add ecx 8 +
push ecx  +
call ds:InterlockedDecrement  +
retn   +
***
mov ecx [ebp-0Ch] +
mov large fs:0 ecx +
pop ecx  +
pop edi  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
push ecx  +
retn   +
***
mov eax eax +
push eax  +
push large dword ptr fs:0  +
lea eax [esp+4+arg_0] +
sub esp [esp+0Ch] +
push ebx  +
push esi  +
push edi  +
mov [eax] ebp +
mov ebp eax +
mov eax dword_104A044 +
xor eax ebp +
push eax  +
push dword ptr [ebp-4]  +
mov dword ptr [ebp-4] 0FFFFFFFFh +
lea eax [ebp-0Ch] +
mov large fs:0 eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov esi ecx +
test edi edi +
jnz loc_100C856  +
mov eax [esi] +
test eax eax +
jz loc_1001689  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [esi] edi +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov edx [eax] +
mov ecx [ebp+arg_4] +
cmp edx [ecx] +
jz loc_1001AA4  +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
cmp dword ptr [eax] 0 +
jz loc_1001B2B  +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
push ebx  +
push esi  +
push edi  +
jz loc_1001AEB  +
mov esi [ebp+arg_4] +
test esi esi +
jz loc_1001AEB  +
mov ebx [ebp+arg_C] +
test ebx ebx +
jz loc_101B641  +
push [ebp+arg_8]  +
and dword ptr [ebx] 0 +
call sub_10017B9  +
test eax eax +
jnz loc_1001958  +
mov edi [esi+8] +
test edi edi +
jz loc_1001841  +
mov eax [esi] +
xor ecx ecx +
test eax eax +
setz cl  +
mov [ebp+arg_4] ecx +
test ecx ecx +
jnz loc_1001AD0  +
push [ebp+arg_8]  +
push eax  +
call sub_1001799  +
test eax eax +
jnz loc_1001AD0  +
add esi 0Ch +
jmp loc_1001810  +
mov eax 80004002h +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 10h  +
***
add ecx 8 +
push ecx  +
call ds:InterlockedIncrement  +
retn   +
***
mov eax eax +
push eax  +
push large dword ptr fs:0  +
lea eax [esp+4+arg_0] +
sub esp [esp+0Ch] +
push ebx  +
push esi  +
push edi  +
mov [eax] ebp +
mov ebp eax +
mov eax dword_104A044 +
xor eax ebp +
push eax  +
mov [ebp-10h] esp +
push dword ptr [ebp-4]  +
mov dword ptr [ebp-4] 0FFFFFFFFh +
lea eax [ebp-0Ch] +
mov large fs:0 eax +
retn   +
***
mov esi [esi+4] +
add esi [ebp+arg_0] +
mov eax [esi] +
push esi  +
call dword ptr [eax+4]  +
mov [ebx] esi +
xor eax eax +
jmp loc_1001846  +
***
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+8] +
push edi  +
lea eax [esi+4] +
push eax  +
call ds:InterlockedDecrement  +
mov edi eax +
test edi edi +
jz loc_1011D83  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
add eax 4 +
push eax  +
call ds:InterlockedIncrement  +
pop ebp  +
retn 4  +
***
push ebp  +
mov ebp esp +
push dword ptr [ebp+10h]  +
mov ecx [ebp+8] +
push dword ptr [ebp+0Ch]  +
call sub_1001A61  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push offset off_1001A7C  +
push ecx  +
call sub_10017D5  +
pop ebp  +
retn 8  +
***
mov edx [eax+4] +
cmp edx [ecx+4] +
jnz loc_10017AE  +
mov edx [eax+8] +
cmp edx [ecx+8] +
jnz loc_10017AE  +
mov eax [eax+0Ch] +
cmp eax [ecx+0Ch] +
jnz loc_10017AE  +
xor eax eax +
inc eax  +
jmp loc_10017B0  +
***
cmp edi 1 +
jz loc_1001958  +
jmp loc_101B64B  +
test eax eax +
jge loc_100183C  +
jmp loc_1001846  +
mov eax 80070057h +
jmp loc_1001846  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_C] +
mov eax 80004003h +
test esi esi +
jz loc_1001B26  +
and dword ptr [esi] 0 +
cmp [ebp+arg_4] 0 +
jnz loc_101C183  +
mov eax [ebp+arg_0] +
push esi  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
call dword ptr [eax+24h]  +
pop esi  +
pop ebp  +
retn 10h  +
***
cmp dword ptr [eax+4] 0 +
jnz loc_10017CA  +
cmp dword ptr [eax+8] 0C0h +
jnz loc_10017CA  +
cmp dword ptr [eax+0Ch] 46000000h +
jnz loc_10017CA  +
xor eax eax +
inc eax  +
jmp loc_10017CC  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+8] +
push edi  +
lea eax [esi+0Ch] +
push eax  +
call ds:InterlockedDecrement  +
mov edi eax +
test edi edi +
jnz loc_1001D7B  +
test esi esi +
jz loc_1001D7B  +
mov eax [esi] +
push 1  +
mov ecx esi +
call dword ptr [eax+0D8h]  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
push 0  +
lea ecx [esi+18h] +
call sub_1001669  +
push 0  +
lea ecx [esi+1Ch] +
call sub_1001669  +
push 0  +
lea ecx [esi+20h] +
call sub_1001669  +
push 0  +
lea ecx [esi+24h] +
call sub_1001669  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1001DE2  +
test [ebp+arg_0] 1 +
jz loc_1001DD6  +
push esi  +
call off_104B7F0  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
call sub_10015E0  +
mov esi ecx +
mov [ebp-10h] esi +
mov dword ptr [esi] offset off_1001B78 +
mov dword ptr [esi+4] offset off_1001B68 +
mov dword ptr [esi+8] offset off_1001B58 +
mov eax [esi+24h] +
mov dword ptr [ebp-4] 2 +
test eax eax +
jnz loc_101C19D  +
mov eax [esi+20h] +
mov byte ptr [ebp-4] 1 +
test eax eax +
jnz loc_101C1A8  +
mov eax [esi+1Ch] +
mov byte ptr [ebp-4] 0 +
test eax eax +
jnz loc_101C1B3  +
mov esi [esi+18h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
test esi esi +
jnz loc_101C1BE  +
call sub_10015C0  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
add eax 0Ch +
push eax  +
call ds:InterlockedIncrement  +
pop ebp  +
retn 4  +
***
lea eax [ecx+14h] +
cmp dword ptr [eax] 0 +
jnz loc_1001F05  +
push eax  +
push offset riid  +
push 15h  +
push 0  +
push offset rclsid  +
call ds:CoCreateInstance  +
test eax eax +
jl locret_1001F07  +
xor eax eax +
retn   +
***
push ebp  +
mov ebp esp +
cmp dword ptr [ebp+8] 0 +
jnz loc_101CACA  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push 0  +
call sub_1001F42  +
pop ebp  +
retn 0Ch  +
***
call sub_1001862  +
mov eax [ebp+10h] +
xor esi esi +
cmp eax esi +
jz loc_101CA35  +
mov ebx 8007000Eh +
push 28h  +
mov [eax] esi +
mov [ebp-14h] ebx +
mov [ebp-18h] esi +
mov [ebp-4] esi +
call off_104B7F4  +
cmp eax esi +
jz loc_1001F83  +
push dword ptr [ebp+8]  +
mov ecx eax +
call sub_1002069  +
mov esi eax +
or dword ptr [ebp-4] 0FFFFFFFFh +
test esi esi +
jz loc_1001FC8  +
lea edi [esi+0Ch] +
push edi  +
call ds:InterlockedIncrement  +
mov ecx esi +
call sub_1001FD7  +
mov ebx eax +
test ebx ebx +
jl loc_1001FA4  +
xor ebx ebx +
push edi  +
call ds:InterlockedDecrement  +
test ebx ebx +
jnz loc_101CA54  +
push dword ptr [ebp+10h]  +
mov eax [esi] +
push dword ptr [ebp+0Ch]  +
push esi  +
call dword ptr [eax]  +
mov ebx eax +
test ebx ebx +
jnz loc_101CA54  +
mov eax ebx +
call sub_10015C0  +
retn 0Ch  +
***
mov edi edi +
push esi  +
push edi  +
mov esi ecx +
lea edi [esi+20h] +
push edi  +
push offset stru_1001EA4  +
push 1  +
push 0  +
push offset stru_1002044  +
call ds:CoCreateInstance  +
test eax eax +
jl loc_1002031  +
mov eax [edi] +
mov ecx [eax] +
lea edx [esi+18h] +
push edx  +
push offset stru_1001EB4  +
push eax  +
call dword ptr [ecx]  +
test eax eax +
jl loc_1002031  +
mov eax [edi] +
mov ecx [eax] +
lea edx [esi+1Ch] +
push edx  +
push offset dword_1002054  +
push eax  +
call dword ptr [ecx]  +
test eax eax +
jl loc_1002031  +
mov edi [edi] +
mov eax [edi] +
add esi 24h +
push esi  +
push offset dword_1002034  +
push edi  +
call dword ptr [eax]  +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_100209D  +
mov dword ptr [esi] offset off_1001C70 +
mov dword ptr [esi+4] offset off_1001C60 +
mov dword ptr [esi+8] offset off_1001C50 +
mov ecx dword_104A064 +
mov eax [ecx] +
call dword ptr [eax+4]  +
mov eax esi +
pop esi  +
retn 4  +
***
mov eax ecx +
xor ecx ecx +
mov [eax+0Ch] ecx +
mov dword ptr [eax] offset off_1001B78 +
mov dword ptr [eax+4] offset off_1001B68 +
mov dword ptr [eax+8] offset off_1001B58 +
mov [eax+18h] ecx +
mov [eax+1Ch] ecx +
mov [eax+20h] ecx +
mov [eax+24h] ecx +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+10h]  +
mov ecx [ebp+8] +
push dword ptr [ebp+0Ch]  +
call sub_10020E6  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push offset off_1002100  +
push ecx  +
call sub_10017D5  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax+20h] +
push [ebp+arg_4]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+1Ch]  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+8] +
push edi  +
lea eax [esi+8] +
push eax  +
call ds:InterlockedDecrement  +
mov edi eax +
test edi edi +
jz loc_10022C8  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
test esi esi +
jz loc_1002237  +
mov eax [esi] +
push 1  +
mov ecx esi +
call dword ptr [eax+78h]  +
jmp loc_1002237  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1002309  +
test byte ptr [ebp+8] 1 +
jz loc_10022FD  +
push esi  +
call off_104B7F0  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_1002188 +
mov dword ptr [esi+4] offset off_1002204 +
mov dword ptr [esi+8] 0C0000001h +
mov ecx dword_104A064 +
mov eax [ecx] +
call dword ptr [eax+8]  +
mov ecx esi +
pop esi  +
nop   +
nop   +
nop   +
nop   +
nop   +
push 4  +
mov eax offset dword_104254C +
call sub_10015E0  +
mov esi ecx +
mov [ebp-10h] esi +
mov dword ptr [esi] offset off_1002250 +
mov dword ptr [esi+4] offset off_1002240 +
mov eax [esi+24h] +
mov dword ptr [ebp-4] 4 +
test eax eax +
jz loc_100236C  +
push eax  +
call off_104B7F0  +
and dword ptr [esi+24h] 0 +
mov eax [esi+20h] +
mov byte ptr [ebp-4] 3 +
test eax eax +
jnz loc_101561C  +
mov eax [esi+1Ch] +
mov byte ptr [ebp-4] 2 +
test eax eax +
jnz loc_1015627  +
mov eax [esi+18h] +
mov byte ptr [ebp-4] 1 +
test eax eax +
jnz loc_1015632  +
mov eax [esi+14h] +
mov byte ptr [ebp-4] 0 +
test eax eax +
jnz loc_101563D  +
mov esi [esi+10h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
test esi esi +
jnz loc_1015648  +
call sub_10015C0  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+8] +
push edi  +
lea eax [esi+4] +
push eax  +
call ds:InterlockedDecrement  +
mov edi eax +
test edi edi +
jz loc_100244C  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_101E6EC  +
cmp word ptr [eax] 0 +
jz loc_101E6F6  +
xor eax eax +
pop ebp  +
retn 4  +
***
test esi esi +
jz loc_100241F  +
mov eax [esi] +
push 1  +
mov ecx esi +
call dword ptr [eax+40h]  +
jmp loc_100241F  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1002486  +
test byte ptr [ebp+8] 1 +
jz loc_100247A  +
push esi  +
call off_104B7F0  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
mov dword ptr [ecx] offset off_10023C0 +
mov ecx [ecx+14h] +
test ecx ecx +
jnz loc_101E906  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+10h]  +
mov ecx [ebp+8] +
push dword ptr [ebp+0Ch]  +
call sub_10024DE  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push offset off_10024F8  +
push ecx  +
call sub_10017D5  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
xor eax eax +
test ecx ecx +
jz loc_1002583  +
cmp ecx 7FFFFFFFh +
ja loc_1002583  +
test eax eax +
jl loc_100257F  +
mov eax [ebp+arg_0] +
push ebx  +
xor ebx ebx +
push esi  +
mov esi ecx +
test ecx ecx +
jz loc_100258A  +
mov edx [ebp+arg_8] +
push edi  +
mov edi 7FFFFFFEh +
sub edi ecx +
sub edx eax +
lea ecx [edi+esi] +
test ecx ecx +
jz loc_1002571  +
movzx ecx word ptr [edx+eax] +
test cx cx +
jz loc_1002571  +
mov [eax] cx +
inc eax  +
inc eax  +
dec esi  +
jnz loc_1002559  +
pop edi  +
test esi esi +
jz loc_100258A  +
xor ecx ecx +
mov [eax] cx +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 0Ch  +
mov eax 80070057h +
jmp loc_100253B  +
dec eax  +
dec eax  +
mov ebx 8007007Ah +
jmp loc_1002576  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
add eax 8 +
push eax  +
call ds:InterlockedIncrement  +
pop ebp  +
retn 4  +
***
call sub_1001862  +
mov esi [ebp+8] +
xor edi edi +
cmp esi edi +
jz loc_101B71B  +
push 30h  +
mov [esi] edi +
mov dword ptr [ebp-14h] 8007000Eh +
mov [ebp-4] edi +
call off_104B7F4  +
cmp eax edi +
jz loc_1002652  +
push edi  +
mov ecx eax +
call sub_100265B  +
cmp eax edi +
jz loc_1002645  +
mov [ebp-14h] edi +
mov [esi] eax +
mov eax [ebp-14h] +
call sub_10015C0  +
retn 4  +
xor eax eax +
jmp loc_100263E  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_1002688  +
mov dword ptr [esi] offset off_1002188 +
mov dword ptr [esi+4] offset off_1002204 +
mov ecx dword_104A064 +
mov eax [ecx] +
call dword ptr [eax+4]  +
mov eax esi +
pop esi  +
retn 4  +
***
mov eax ecx +
xor ecx ecx +
mov [eax+8] ecx +
mov dword ptr [eax] offset off_1002250 +
mov dword ptr [eax+4] offset off_1002240 +
mov [eax+10h] ecx +
mov [eax+14h] ecx +
mov [eax+18h] ecx +
mov [eax+1Ch] ecx +
mov [eax+20h] ecx +
mov [eax+24h] ecx +
mov [eax+28h] ecx +
mov [eax+2Ch] ecx +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+10h]  +
mov ecx [ebp+8] +
push dword ptr [ebp+0Ch]  +
call sub_10026D6  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push offset off_10026F0  +
push ecx  +
call sub_10017D5  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
call sub_100242C  +
test eax eax +
jl loc_1002795  +
push edi  +
mov edi [ebp+arg_8] +
test edi edi +
jz loc_101E911  +
and dword ptr [edi] 0 +
lea eax [ebp+arg_8] +
push eax  +
call sub_1002605  +
test eax eax +
jl loc_1002794  +
push ebx  +
push esi  +
mov esi [ebp+arg_8] +
push [ebp+arg_4]  +
mov ecx esi +
call sub_10027B1  +
mov ebx eax +
test ebx ebx +
jl loc_101E91B  +
mov eax [esi] +
push edi  +
push offset loc_100279C  +
push esi  +
call dword ptr [eax]  +
mov edi eax +
test edi edi +
jl loc_101E92F  +
mov eax edi +
pop esi  +
pop ebx  +
pop edi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
push esi  +
push edi  +
mov edi ecx +
jz loc_1002815  +
mov eax [ebp+arg_0] +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_10027C6  +
sub eax edx +
sar eax 1 +
mov esi eax +
push 2  +
inc esi  +
xor ecx ecx +
pop edx  +
mov eax esi +
mul  edx +
seto cl  +
neg ecx  +
or ecx eax +
push ecx  +
call off_104B7F4  +
mov [edi+24h] eax +
test eax eax +
jz loc_101E7B8  +
push [ebp+arg_0]  +
push esi  +
push eax  +
call sub_1002525  +
mov esi eax +
test esi esi +
jl loc_101E7C2  +
pop edi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
mov esi 80004003h +
jmp loc_100280D  +
***
push ebp  +
mov ebp esp +
cmp dword ptr [ebp+8] 0 +
jnz loc_101C4CC  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push 0  +
call sub_1002846  +
pop ebp  +
retn 0Ch  +
***
call sub_1001862  +
mov eax [ebp+10h] +
xor esi esi +
cmp eax esi +
jz loc_101C2C6  +
push 18h  +
mov [eax] esi +
mov dword ptr [ebp-14h] 8007000Eh +
mov [ebp-18h] esi +
mov [ebp-4] esi +
call off_104B7F4  +
cmp eax esi +
jz loc_1002886  +
push dword ptr [ebp+8]  +
mov ecx eax +
call sub_10028B4  +
mov esi eax +
or dword ptr [ebp-4] 0FFFFFFFFh +
test esi esi +
jz loc_10028A4  +
push dword ptr [ebp+10h]  +
mov eax [esi] +
push dword ptr [ebp+0Ch]  +
push esi  +
call dword ptr [eax]  +
mov [ebp-14h] eax +
test eax eax +
jnz loc_101C2E2  +
mov eax [ebp-14h] +
call sub_10015C0  +
retn 0Ch  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_10028DA  +
mov dword ptr [esi] offset off_10016D8 +
mov ecx dword_104A064 +
mov eax [ecx] +
call dword ptr [eax+4]  +
mov eax esi +
pop esi  +
retn 4  +
***
mov eax ecx +
xor ecx ecx +
mov [eax+4] ecx +
mov dword ptr [eax] offset off_10023C0 +
mov [eax+10h] ecx +
mov [eax+14h] ecx +
retn   +
***
lea eax [ecx+0Ch] +
or edx 0FFFFFFFFh +
xadd [eax] edx +
dec edx  +
test edx edx +
jle loc_10029AC  +
retn   +
mov eax [ecx] +
mov edx [eax] +
push ecx  +
mov ecx eax +
call dword ptr [edx+4]  +
jmp locret_100299F  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ebp+8] 0 +
jz loc_10029D6  +
push dword ptr [ebp+8]  +
push 0  +
push dword ptr [ecx+4]  +
call ds:HeapFree  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ecx+4] +
mov eax [ecx] +
pop ebp  +
jmp dword ptr [eax+4]  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov ecx [esi+0Ch] +
sub ecx 10h +
mov dword ptr [esi] offset off_10029A0 +
call sub_1002990  +
mov ecx [esi+8] +
sub ecx 10h +
call sub_1002990  +
mov ecx [esi+4] +
sub ecx 10h +
call sub_1002990  +
mov dword ptr [esi] offset off_10029F0 +
pop esi  +
retn   +
***
mov eax eax +
push eax  +
push large dword ptr fs:0  +
lea eax [esp+4+arg_0] +
sub esp [esp+0Ch] +
push ebx  +
push esi  +
push edi  +
mov [eax] ebp +
mov ebp eax +
mov eax dword_104A044 +
xor eax ebp +
push eax  +
mov [ebp-10h] eax +
push dword ptr [ebp-4]  +
mov dword ptr [ebp-4] 0FFFFFFFFh +
lea eax [ebp-0Ch] +
mov large fs:0 eax +
retn   +
***
mov ecx [ebp-10h] +
xor ecx ebp +
call sub_1002A8B  +
jmp sub_10015C0  +
***
cmp ecx dword_104A044 +
mov eax [esp+8+arg_4] +
mov ecx [ebp-10h] +
mov large fs:0 ecx +
pop ecx  +
pop edi  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
push ecx  +
retn   +
***
call sub_1002A98  +
xor eax eax +
mov [ebp-20h] eax +
mov [ebp-4] eax +
mov [ebp-1Ch] eax +
mov eax [ebp-1Ch] +
cmp eax [ebp+10h] +
jge loc_1002B44  +
mov esi [ebp+8] +
mov ecx esi +
call dword ptr [ebp+14h]  +
add esi [ebp+0Ch] +
mov [ebp+8] esi +
inc dword ptr [ebp-1Ch]  +
jmp loc_1002B0D  +
mov dword ptr [ebp-20h] 1 +
mov dword ptr [ebp-4] 0FFFFFFFEh +
call sub_1002B64  +
call sub_1002ADD  +
retn 14h  +
***
cmp dword ptr [ebp-20h] 0 +
jz loc_101CDAA  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx+4] +
test eax eax +
jz loc_1002BDE  +
cmp eax [ebp+arg_0] +
jnz loc_1012778  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+lpCriticalSection] +
push esi  +
mov esi ecx +
push eax  +
mov [esi] eax +
call ds:EnterCriticalSection  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword_104A04C 7D6h +
jl loc_1002C2B  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push 0  +
call WinSqmSetDWORD  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
mov eax ecx +
mov ecx [ebp+arg_4] +
and dword ptr [eax+0Ch] 0 +
mov [eax+8] edx +
xor edx edx +
mov dword ptr [eax] offset off_1002B70 +
mov [eax+4] ecx +
mov [ecx] dx +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov eax [esi+4] +
push edi  +
mov edi [ebp+arg_0] +
cmp edi eax +
jz loc_1002CDE  +
test eax eax +
jz loc_1002CDE  +
push eax  +
call ds:CloseHandle  +
mov [esi+4] edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax [ebp+arg_8] +
and [ebp+var_4] 0 +
mov [ebp+var_8] eax +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+arg_4] +
push eax  +
lea eax [ebp+var_8] +
push eax  +
call sub_1002ED5  +
mov eax [ebp+arg_0] +
mov ecx [ebp+var_4] +
mov [eax] ecx +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 28h +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+lpString] +
mov esi ecx +
test edi edi +
jz loc_101DE9C  +
mov eax [ebp+arg_8] +
mov ebx [ebp+arg_4] +
mov [ebp+var_4] ebx +
mov [ebp+arg_4] eax +
cmp eax 0FFFFFFFFh +
jnz loc_1002D88  +
push edi  +
call ds:lstrlenW  +
mov [ebp+arg_8] eax +
lea eax [ebp+arg_8] +
push eax  +
lea ecx [ebp+arg_4] +
call sub_1002F5C  +
push 1  +
lea eax [ebp+arg_8] +
push eax  +
push [ebp+arg_4]  +
lea eax [ebp+var_8] +
push eax  +
lea ecx [ebp+var_4] +
call sub_1002EA5  +
mov ecx eax +
call sub_1002EFC  +
mov ecx [esi+8] +
cmp [eax] ecx +
ja loc_1015407  +
test ebx ebx +
jnz loc_1002DD5  +
mov eax [esi+4] +
cmp edi eax +
jnb loc_10084FA  +
push 1  +
lea eax [ebp+arg_8] +
push eax  +
lea ecx [ebp+arg_4] +
call sub_1002EFC  +
push dword ptr [eax]  +
mov edx [esi] +
mov ecx esi +
call dword ptr [edx+4]  +
push 2  +
lea eax [ebp+arg_8] +
push eax  +
lea ecx [ebp+arg_4] +
call sub_1002E4E  +
mov edi [eax] +
push 2  +
lea eax [ebp+arg_8] +
push eax  +
lea ecx [ebp+var_4] +
call sub_1002E4E  +
push dword ptr [eax]  +
lea eax [ebp+var_8] +
push edi  +
push eax  +
call sub_1002CF7  +
mov ecx [esi+8] +
add ecx ecx +
cmp [eax] ecx +
ja loc_101DEC0  +
push [ebp+arg_4]  +
lea eax [ebp+arg_4] +
push eax  +
lea ecx [ebp+var_4] +
call sub_1002EA5  +
mov eax [eax] +
mov [esi+0Ch] eax +
mov eax [esi+4] +
push edi  +
push [ebp+lpString]  +
lea eax [eax+ebx*2] +
push eax  +
call memcpy  +
mov eax [esi+0Ch] +
mov ecx [esi+4] +
add esp 0Ch +
xor edx edx +
mov [ecx+eax*2] dx +
mov eax [esi+0Ch] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+arg_4] +
push eax  +
push ecx  +
call sub_1002E77  +
mov eax [ebp+arg_0] +
mov ecx [ebp+var_4] +
mov [eax] ecx +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax] +
mov ecx [ebp+arg_4] +
mul  dword ptr [ecx] +
test edx edx +
ja loc_101DE0C  +
cmp eax 0FFFFFFFFh +
ja loc_101DE0C  +
mov ecx [ebp+arg_8] +
mov [ecx] eax +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax [ebp+arg_4] +
and [ebp+var_4] 0 +
mov [ebp+var_8] eax +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_8] +
push eax  +
push ecx  +
call sub_1002ED5  +
mov eax [ebp+arg_0] +
mov ecx [ebp+var_4] +
mov [eax] ecx +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [eax] +
mov eax [ebp+arg_4] +
mov eax [eax] +
add eax ecx +
cmp eax ecx +
jb loc_101B63B  +
mov ecx [ebp+arg_8] +
mov [ecx] eax +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+arg_4] +
push eax  +
push ecx  +
call sub_1002F25  +
mov eax [ebp+arg_0] +
mov ecx [ebp+var_4] +
mov [eax] ecx +
leave   +
retn 8  +
***
mov edi edi +
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
lea ecx [ebp+arg_0] +
call sub_1002F7F  +
mov eax [eax] +
mov [esi] eax +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
mov esi ecx +
push esi  +
push dword ptr [eax]  +
call sub_1002F9E  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jl loc_101DE12  +
mov ecx [ebp+arg_4] +
mov [ecx] eax +
pop ebp  +
retn 8  +
***
mov ecx [ebp-14h] +
xor ecx ebp +
call sub_1002A8B  +
jmp sub_10015C0  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_1004E97  +
lea edx [eax+2] +
nop   +
nop   +
nop   +
nop   +
nop   +
nop   +
nop   +
nop   +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_1003040  +
sub eax edx +
sar eax 1 +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_101C2BB  +
mov eax [ecx] +
call dword ptr [eax+0Ch]  +
add eax 10h +
mov [esi] eax +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
mul  [ebp+arg_8] +
test edx edx +
ja loc_10030A8  +
cmp eax 0FFFFFFFFh +
ja loc_10030A8  +
mov ecx [ebp+arg_0] +
mov [ecx] eax +
xor eax eax +
pop ebp  +
retn 0Ch  +
mov eax 80070057h +
jmp loc_10030A4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+8]  +
push 0  +
push dword ptr [ecx+4]  +
call ds:HeapAlloc  +
pop ebp  +
retn 4  +
***
mov eax ecx +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
mov eax [ebp+arg_4] +
push esi  +
lea ecx [edx+eax] +
lea esi [ecx-1] +
cmp esi edx +
pop esi  +
jl loc_101CBE9  +
dec eax  +
not eax  +
dec ecx  +
and eax ecx +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov eax [esi] +
xor ecx ecx +
sub eax 10h +
inc ecx  +
sub ecx [eax+0Ch] +
mov eax [eax+8] +
sub eax [ebp+arg_0] +
or ecx eax +
jge loc_1003149  +
push [ebp+arg_0]  +
mov ecx esi +
call sub_1003155  +
mov eax [esi] +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx] +
mov edx [eax-0Ch] +
sub eax 10h +
push esi  +
mov esi [ebp+arg_0] +
cmp edx esi +
jg loc_101C31A  +
cmp dword ptr [eax+0Ch] 1 +
jle loc_10130D8  +
push esi  +
call sub_1003188  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
mov esi [ecx] +
mov ebx [esi-0Ch] +
sub esi 10h +
mov [ebp+var_8] ecx +
mov ecx [esi] +
mov eax [ecx] +
push edi  +
mov [ebp+var_4] ebx +
call dword ptr [eax+10h]  +
mov edx [eax] +
push 2  +
push [ebp+arg_0]  +
mov ecx eax +
call dword ptr [edx]  +
mov edi eax +
test edi edi +
jz loc_101C171  +
mov eax [ebp+arg_0] +
cmp ebx eax +
jge loc_10031C5  +
mov eax ebx +
inc eax  +
push eax  +
lea ecx [esi+10h] +
push ecx  +
push eax  +
lea ebx [edi+10h] +
push ebx  +
call sub_1003200  +
mov eax [ebp+var_4] +
add esp 10h +
mov ecx esi +
mov [edi+4] eax +
call sub_1002990  +
mov eax [ebp+var_8] +
pop edi  +
pop esi  +
mov [eax] ebx +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_C] +
add eax eax +
push eax  +
push [ebp+arg_8]  +
mov eax [ebp+arg_4] +
add eax eax +
push eax  +
push [ebp+arg_0]  +
call memcpy_s  +
add esp 10h +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_100324D  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_1003269  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_1003025  +
pop ecx  +
push eax  +
push [ebp+arg_0]  +
mov ecx esi +
call sub_100328F  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_4] 0 +
push ebx  +
mov ebx ecx +
jz loc_1006B9D  +
push esi  +
mov esi [ebp+arg_0] +
test esi esi +
jz loc_101C4F7  +
mov eax [ebx] +
push edi  +
push [ebp+arg_4]  +
mov edi [eax-0Ch] +
sub esi eax +
sar esi 1 +
call sub_1003122  +
cmp esi edi +
pop edi  +
push [ebp+arg_4]  +
jbe loc_101C501  +
push [ebp+arg_0]  +
push [ebp+arg_4]  +
push eax  +
call sub_1003200  +
add esp 10h +
push [ebp+arg_4]  +
mov ecx ebx +
call sub_10032EF  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jl loc_101C153  +
mov edx [ecx] +
cmp eax [edx-8] +
jg loc_101C153  +
mov [edx-0Ch] eax +
mov ecx [ecx] +
xor edx edx +
mov [ecx+eax*2] dx +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
push esi  +
push edi  +
push 7FFFFFFFh  +
push 8  +
inc eax  +
push eax  +
mov esi ecx +
call sub_10030F8  +
push dword ptr [ebp+0Ch]  +
mov edi eax +
push edi  +
lea eax [ebp+8] +
push eax  +
call sub_1003089  +
test eax eax +
jl loc_1003382  +
push dword ptr [ebp+8]  +
lea eax [ebp+8] +
push 10h  +
push eax  +
call sub_100338B  +
test eax eax +
jl loc_1003382  +
mov ecx [esi+4] +
push dword ptr [ebp+8]  +
mov eax [ecx] +
call dword ptr [eax]  +
test eax eax +
jz loc_1003382  +
dec edi  +
and dword ptr [eax+4] 0 +
mov [eax] esi +
mov dword ptr [eax+0Ch] 1 +
mov [eax+8] edi +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
xor eax eax +
jmp loc_100337C  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
mov ecx [ebp+arg_8] +
or edx 0FFFFFFFFh +
sub edx eax +
cmp edx ecx +
jb loc_101CBDF  +
add eax ecx +
mov ecx [ebp+arg_0] +
mov [ecx] eax +
xor eax eax +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push esi  +
push offset dword_104A104  +
mov esi ecx +
call sub_1003060  +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx dword ptr [ebp+Data] +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
test bl 1 +
jz loc_1003407  +
lea eax [ebp+Data] +
push eax  +
lea ecx [edi-4] +
call sub_1004C26  +
mov esi eax +
test esi esi +
jl loc_1003465  +
cmp dword ptr [ebp+Data] 0 +
jz loc_1003465  +
test esi esi +
jl loc_100345C  +
mov eax [ebp+arg_8] +
and dword ptr [eax] 0 +
lea eax [ebp+Data] +
push eax  +
call sub_1004B01  +
mov esi eax +
test esi esi +
jl loc_100345C  +
mov eax ebx +
and al 4 +
cmp al 4 +
setz al  +
movzx eax al +
push eax  +
and bl 2 +
cmp bl 2 +
mov ebx dword ptr [ebp+Data] +
setz al  +
movzx eax al +
push eax  +
push dword ptr [edi+20h]  +
mov ecx ebx +
call sub_10048A5  +
mov esi eax +
test esi esi +
jl loc_100346C  +
push [ebp+arg_8]  +
mov eax [ebx] +
push offset dword_1003478  +
push ebx  +
call dword ptr [eax]  +
mov esi eax +
test esi esi +
jl loc_100346C  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
mov esi 80070015h +
jmp loc_1003403  +
test ebx ebx +
jz loc_100345C  +
jmp loc_101E832  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 24h +
push ebx  +
mov ebx [ebp+arg_4] +
push esi  +
push edi  +
push [ebp+arg_8]  +
mov esi ecx +
mov edi [esi+0Ch] +
lea eax [ebp+var_4] +
push eax  +
lea ecx [ebp+arg_4] +
mov [ebp+arg_4] ebx +
call sub_1002EA5  +
cmp [eax] edi +
ja loc_101B737  +
mov eax [ebp+arg_0] +
mov ecx [ebp+arg_8] +
pop edi  +
mov [eax+8] esi +
pop esi  +
mov [eax] ebx +
mov [eax+4] ecx +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
push [ebp+lpString2]  +
mov edi ds:lstrlenW +
mov esi ecx +
call edi  +
mov edx [esi+4] +
mov ecx [esi+8] +
mov ecx [ecx+4] +
push edx  +
push eax  +
push [ebp+lpString2]  +
mov eax [esi] +
push edx  +
lea eax [ecx+eax*2] +
push eax  +
push 1  +
call sub_1003555  +
mov ebx eax +
test ebx ebx +
jnz loc_1003547  +
push [ebp+lpString2]  +
call edi  +
cmp [esi+4] eax +
jge loc_1003547  +
or ebx 0FFFFFFFFh +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+cchCount2] +
push edi  +
mov edi [ebp+arg_8] +
cmp edi esi +
jb loc_1003568  +
mov edi esi +
cmp [ebp+arg_10] esi +
jb loc_1004E80  +
push esi  +
push [ebp+lpString2]  +
push edi  +
push [ebp+lpString1]  +
push [ebp+dwCmpFlags]  +
push 800h  +
call ds:CompareStringW  +
dec eax  +
jz loc_100363C  +
dec eax  +
jnz loc_1004E88  +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 18h  +
***
call sub_10015E0  +
mov esi ecx +
mov [ebp-10h] esi +
push offset dword_104A104  +
call sub_1003060  +
push dword ptr [ebp+8]  +
and dword ptr [ebp-4] 0 +
mov ecx esi +
call sub_10035E8  +
test al al +
jnz loc_10035D9  +
push dword ptr [ebp+8]  +
mov ecx esi +
call sub_1003231  +
mov eax esi +
call sub_10015C0  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
cmp [ebp+arg_0] eax +
jz loc_1003601  +
test [ebp+arg_0] 0FFFF0000h +
jz loc_101CA24  +
pop ebp  +
retn 4  +
***
or eax 0FFFFFFFFh +
jmp loc_1003597  +
***
mov eax eax +
push eax  +
push large dword ptr fs:0  +
lea eax [esp+4+arg_0] +
sub esp [esp+0Ch] +
push ebx  +
push esi  +
push edi  +
mov [eax] ebp +
mov ebp eax +
mov eax dword_104A044 +
xor eax ebp +
push eax  +
mov [ebp-14h] eax +
mov [ebp-10h] esp +
push dword ptr [ebp-4]  +
mov dword ptr [ebp-4] 0FFFFFFFFh +
lea eax [ebp-0Ch] +
mov large fs:0 eax +
retn   +
***
mov eax [ecx+0Ch] +
sub eax 0 +
jz loc_101F0DC  +
dec eax  +
jnz loc_101F0D5  +
xor eax eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp sub_1002D49  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+8] +
push edi  +
lea eax [esi+4] +
push eax  +
call ds:InterlockedDecrement  +
mov edi eax +
test edi edi +
jz loc_10046E0  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
cmp eax [ecx+4] +
jnb loc_101F0E2  +
mov ecx [ecx] +
lea eax [ecx+eax*8] +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ecx] +
push [ebp+arg_0]  +
push ecx  +
call ds:__imp__wcsicmp  +
pop ecx  +
pop ecx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi] +
sub eax 10h +
cmp dword ptr [eax+0Ch] 1 +
jle loc_1003743  +
push dword ptr [eax+4]  +
call sub_1003188  +
mov eax [esi] +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_1003060  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov eax [ecx] +
mov ecx [eax-10h] +
test ecx ecx +
jz loc_100377F  +
mov eax [ecx] +
call dword ptr [eax+10h]  +
test eax eax +
jz loc_101F40C  +
retn   +
xor eax eax +
jmp loc_1003776  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
push esi  +
push edi  +
mov esi ecx +
cmp eax 0FFFFFFFFh +
jnz loc_101F9A9  +
mov edi [ebp+arg_0] +
test edi edi +
jnz loc_1007420  +
mov eax [esi] +
test eax eax +
jnz loc_101F9B1  +
and dword ptr [esi+4] 0 +
and dword ptr [esi+8] 0 +
mov al 1 +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi] +
cmp eax [esi+14h] +
jnz loc_100462E  +
mov ecx [esi+0Ch] +
and dword ptr [esi+4] 0 +
call sub_10043A8  +
mov eax [esi+14h] +
and dword ptr [esi+0Ch] 0 +
and dword ptr [esi+8] 0 +
mov [esi] eax +
pop esi  +
retn   +
***
call sub_10015E0  +
mov esi ecx +
mov [ebp-10h] esi +
call sub_10033C0  +
push dword ptr [ebp+8]  +
and dword ptr [ebp-4] 0 +
mov ecx esi +
call sub_1003ACF  +
mov eax esi +
call sub_10015C0  +
retn 4  +
***
call sub_10015E0  +
mov esi ecx +
push offset word_100348C  +
push dword ptr [ebp+8]  +
call sub_100422D  +
test al al +
jnz loc_102141E  +
push 0FFFFFFFFh  +
push 0  +
mov ecx esi +
call sub_1003788  +
push dword ptr [ebp+8]  +
lea edi [esi+10h] +
mov ecx edi +
call sub_1003FA0  +
lea ebx [esi+14h] +
push edi  +
mov ecx ebx +
call sub_1003FA0  +
and dword ptr [esi+1Ch] 0 +
push ebx  +
call sub_1003AF2  +
mov [esi+18h] eax +
test eax eax +
jz loc_1003899  +
mov eax [ebx] +
mov eax [eax-0Ch] +
dec eax  +
push eax  +
mov ecx ebx +
call sub_1004428  +
cmp ax 2Ah +
jnz loc_1003899  +
and dword ptr [esi+18h] 0 +
mov ecx edi +
call sub_100372B  +
mov edi eax +
mov eax edi +
cmp word ptr [edi] 0 +
jz loc_10043B1  +
movzx ecx word ptr [edi] +
cmp cx 2Fh +
jz loc_10038C1  +
cmp cx 5Ch +
jz loc_10038C1  +
inc edi  +
inc edi  +
jmp loc_10038A4  +
xor ecx ecx +
mov [edi] cx +
inc edi  +
push eax  +
lea ecx [ebp-14h] +
inc edi  +
call sub_10037F7  +
and dword ptr [ebp-4] 0 +
push eax  +
mov ecx esi +
call sub_1003A43  +
mov ecx [ebp-14h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
add ecx 0FFFFFFF0h +
call sub_1002990  +
movzx eax word ptr [edi] +
cmp ax 2Fh +
jz loc_10038FB  +
cmp ax 5Ch +
jnz loc_10038A2  +
inc edi  +
inc edi  +
jmp loc_10038EC  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 34h +
mov eax dword_104A044 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
mov esi ecx +
movzx eax word ptr [esi+1BAh] +
push edi  +
test al 4 +
jz loc_10039FB  +
and eax 0FFFBh +
mov [esi+1BAh] ax +
call sub_100407C  +
cmp word ptr [esi+1A4h] 0 +
jnz loc_1006C2D  +
movzx eax word ptr [esi+1B2h] +
movzx ebx word ptr [esi+1A6h] +
and [ebp+var_C] 0 +
mov [ebp+var_14] eax +
movzx eax ax +
movzx edi bx +
mov [ebp+var_8] eax +
cmp edi eax +
jnb loc_10039BB  +
mov eax [esi+14h] +
lea eax [eax+edi*2] +
mov [ebp+var_10] eax +
mov eax [ebp+var_10] +
movzx eax word ptr [eax] +
push eax  +
call sub_1003A20  +
test eax eax +
jz loc_1003997  +
inc [ebp+var_C]  +
movzx eax word ptr [esi+1B2h] +
add [ebp+var_10] 2 +
inc edi  +
cmp edi eax +
jb loc_1003974  +
mov eax [ebp+var_C] +
cmp eax 4 +
jz loc_101DB11  +
cmp eax 5 +
jz loc_10039B1  +
cmp eax 3 +
jnz loc_101DB19  +
add ebx 3 +
mov [esi+1A6h] bx +
movzx edi word ptr [esi+1A6h] +
movzx eax di +
lea ecx [eax+2] +
mov [esi+1AEh] di +
cmp [ebp+var_8] ecx +
jb loc_10039EB  +
mov ebx [esi+14h] +
lea ebx [ebx+eax*2] +
movzx eax word ptr [ebx] +
push eax  +
call sub_1003A20  +
test eax eax +
jnz loc_101DB2A  +
xor eax eax +
mov [esi+1ACh] ax +
mov [esi+1A8h] ax +
lea esp [ebp-40h] +
pop edi  +
pop esi  +
pop ebx  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_1002A8B  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 2Fh +
jz loc_1003A39  +
cmp [ebp+arg_0] 5Ch +
jz loc_1003A39  +
xor eax eax +
pop ebp  +
retn 4  +
xor eax eax +
inc eax  +
jmp loc_1003A35  +
***
call sub_10015E0  +
mov esi ecx +
mov [ebp-10h] esi +
mov edi [esi+4] +
mov [ebp-14h] edi +
cmp edi [esi+8] +
jb loc_1003A70  +
lea eax [edi+1] +
push eax  +
call sub_1003BE6  +
test al al +
jz loc_1021413  +
mov eax [esi] +
lea ecx [eax+edi*8] +
mov [ebp-18h] ecx +
and dword ptr [ebp-4] 0 +
test ecx ecx +
jz loc_1003A88  +
push dword ptr [ebp+8]  +
call sub_1003A9A  +
inc dword ptr [esi+4]  +
mov eax edi +
call sub_10015C0  +
retn 4  +
***
call sub_10015E0  +
mov esi ecx +
mov [ebp-10h] esi +
call sub_10033C0  +
mov eax [ebp+8] +
push dword ptr [eax]  +
and dword ptr [ebp-4] 0 +
mov ecx esi +
call sub_1003ACF  +
mov eax esi +
call sub_10015C0  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_1003231  +
push esi  +
call sub_1003AF2  +
mov [esi+4] eax +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
push offset a?  +
call sub_1003B1F  +
xor ecx ecx +
cmp eax 0FFFFFFFFh +
setnz cl  +
mov eax ecx +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
mov eax [esi] +
push eax  +
call ds:wcspbrk  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_1003B41  +
or eax 0FFFFFFFFh +
pop esi  +
pop ebp  +
retn 4  +
sub eax [esi] +
sar eax 1 +
jmp loc_1003B3C  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov ecx [esi+14h] +
sub ecx 10h +
call sub_1002990  +
mov ecx [esi+10h] +
sub ecx 10h +
call sub_1002990  +
mov ecx esi +
pop esi  +
nop   +
nop   +
nop   +
nop   +
nop   +
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi] +
test eax eax +
jz loc_1003B8C  +
push dword ptr [esi+4]  +
push eax  +
call sub_1003B93  +
push dword ptr [esi]  +
call ds:__imp_free  +
pop ecx  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
mov edi [ebp+arg_4] +
test edi edi +
jbe loc_1003BB4  +
push esi  +
mov esi [ebp+arg_0] +
push 0  +
mov ecx esi +
call sub_1003BBE  +
add esi 8 +
dec edi  +
jnz loc_1003BA4  +
pop esi  +
pop edi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov ecx [esi] +
sub ecx 10h +
call sub_1002990  +
test [ebp+arg_0] 1 +
jnz loc_101F419  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi ecx +
mov edx [esi+8] +
push edi  +
mov edi [ebp+arg_0] +
cmp edi edx +
jbe loc_1003C1E  +
cmp dword ptr [esi] 0 +
mov eax [esi+0Ch] +
jnz loc_1003C27  +
cmp eax edi +
ja loc_101F330  +
push 8  +
push edi  +
call ds:calloc  +
pop ecx  +
pop ecx  +
mov [esi] eax +
test eax eax +
jz loc_1003C71  +
mov [esi+8] edi +
mov al 1 +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
test eax eax +
jnz loc_1003C39  +
mov eax [esi+4] +
shr eax 3 +
cmp eax 4 +
jnb loc_1003C75  +
push 4  +
pop eax  +
add eax edx +
mov ebx eax +
cmp edi eax +
jnb loc_101F33E  +
push 8  +
push ebx  +
call ds:calloc  +
mov edi eax +
pop ecx  +
pop ecx  +
test edi edi +
jz loc_1003C71  +
push dword ptr [esi+4]  +
push dword ptr [esi]  +
push edi  +
call sub_1003C89  +
push dword ptr [esi]  +
call ds:__imp_free  +
pop ecx  +
mov [esi] edi +
mov [esi+8] ebx +
jmp loc_1003C1E  +
xor al al +
jmp loc_1003C20  +
mov ecx 400h +
cmp eax ecx +
ja loc_101F337  +
jmp loc_1003C39  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_8] +
shl eax 3 +
push eax  +
push [ebp+arg_4]  +
push eax  +
push [ebp+arg_0]  +
call sub_1003CAD  +
add esp 10h +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call memmove_s  +
add esp 10h +
push eax  +
call sub_1003CD3  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jnz loc_101B5A5  +
pop ebp  +
retn 4  +
***
mov edi edi +
mov edi edi +
push esi  +
mov esi ecx +
lea eax [esi+10h] +
push eax  +
mov dword ptr [esi] offset off_1003E00 +
call sub_1002BC9  +
mov dword ptr [esi] offset off_1002B70 +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax] +
cmp dword ptr [eax-0Ch] 1 +
jnz loc_1003D59  +
mov ax [eax] +
cmp ax [ebp+arg_4] +
jnz loc_1003D59  +
xor eax eax +
inc eax  +
pop ebp  +
retn 8  +
xor eax eax +
jmp loc_1003D55  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
push esi  +
mov esi ecx +
cmp eax [esi+0Ch] +
jnb loc_1003D92  +
mov ecx [esi+4] +
push dword ptr [ebp+arg_0]  +
lea eax [ecx+eax*2] +
push eax  +
call ds:wcschr  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1003D92  +
sub eax [esi+4] +
sar eax 1 +
pop esi  +
pop ebp  +
retn 8  +
or eax 0FFFFFFFFh +
jmp loc_1003D8D  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_1003DC2  +
mov dword ptr [esi] offset off_100171C +
mov ecx dword_104A064 +
mov eax [ecx] +
call dword ptr [eax+4]  +
mov eax esi +
pop esi  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
and dword ptr [esi+4] 0 +
lea ecx [esi+10h] +
mov dword ptr [esi] offset off_1003490 +
call sub_1003DE2  +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
lea eax [esi+10h] +
push eax  +
push 0C1h  +
call sub_1002C95  +
mov dword ptr [esi] offset off_1003E00 +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
lea eax [ecx+10h] +
cmp [ecx+4] eax +
jnz loc_101C15E  +
***
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push 0FFFFFFFFh  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_1003E65  +
test eax eax +
jl loc_1003E5B  +
or word ptr [esi+1BAh] 20h +
xor eax eax +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_1002A3A  +
push dword ptr [ebp+0Ch]  +
mov eax [ebp+8] +
mov edi ecx +
lea esi [edi+10h] +
mov edx [esi] +
push 0  +
push eax  +
mov ecx esi +
call dword ptr [edx+10h]  +
cmp dword ptr [ebp+0Ch] 0FFFFFFFFh +
jnz loc_101D965  +
mov eax [esi+0Ch] +
and dword ptr [ebp-1B0h] 0 +
lea ecx [ebp-1B0h] +
mov [ebp-1ACh] eax +
mov [ebp-1A8h] esi +
call sub_100400E  +
mov eax [edi+1Ch] +
cmp [ebp-1ACh] eax +
jnz loc_101D984  +
mov ecx edi +
call sub_1003ED9  +
xor eax eax +
call sub_1002A77  +
retn 8  +
***
mov [ecx+1BAh] ax +
xor eax eax +
mov [ecx+1A8h] ax +
mov [ecx+1ACh] ax +
mov [ecx+1B0h] ax +
mov [ecx+1B4h] ax +
mov [ecx+1B8h] ax +
mov [ecx+1A6h] ax +
mov [ecx+1AAh] ax +
mov [ecx+1AEh] ax +
mov [ecx+1B2h] ax +
mov [ecx+1B6h] ax +
mov [ecx+1BEh] ax +
mov [ecx+1BCh] ax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax] +
push esi  +
sub eax 10h +
push eax  +
mov esi ecx +
call sub_1003F67  +
add eax 10h +
mov [esi] eax +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
mov ecx [esi] +
mov eax [ecx] +
push edi  +
call dword ptr [eax+10h]  +
lea edx [esi+0Ch] +
cmp dword ptr [edx] 0 +
jl loc_101C328  +
cmp eax [esi] +
jnz loc_101C328  +
xor eax eax +
mov edi esi +
inc eax  +
xadd [edx] eax +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_1003FBC  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax] +
push esi  +
push edi  +
mov edi ecx +
mov esi [edi] +
lea ecx [eax-10h] +
sub esi 10h +
cmp ecx esi +
jz loc_1004001  +
cmp dword ptr [esi+0Ch] 0 +
jl loc_101C640  +
mov edx [ecx] +
cmp edx [esi] +
jnz loc_101C640  +
push ebx  +
push ecx  +
call sub_1003F67  +
pop ecx  +
mov ecx esi +
mov ebx eax +
call sub_1002990  +
add ebx 10h +
mov [edi] ebx +
pop ebx  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
push edi  +
mov edi ds:iswspace +
mov esi ecx +
cmp dword ptr [esi+4] 0 +
jz loc_1004038  +
mov ecx [esi+8] +
mov eax [esi] +
mov ecx [ecx+4] +
movzx eax word ptr [ecx+eax*2] +
push eax  +
call edi  +
pop ecx  +
test eax eax +
jnz loc_101D946  +
cmp dword ptr [esi+4] 0 +
jz loc_1004054  +
mov ecx esi +
call sub_100405C  +
movzx eax ax +
push eax  +
call edi  +
pop ecx  +
test eax eax +
jnz loc_101D954  +
pop edi  +
pop esi  +
retn   +
***
mov eax [ecx+4] +
test eax eax +
jz loc_101D1DA  +
mov edx [ecx] +
add edx eax +
mov eax [ecx+8] +
mov eax [eax+4] +
movzx eax word ptr [eax+edx*2-2] +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push esi  +
mov esi ecx +
movzx eax word ptr [esi+1BAh] +
test al 1 +
jz loc_100416A  +
or [ebp+var_4] 0FFFFFFFFh +
push ebx  +
push edi  +
xor ecx ecx +
and eax 0FFFEh +
push 3  +
mov [esi+1A6h] cx +
pop ecx  +
mov [esi+1BAh] ax +
mov [esi+1A4h] cx +
test al 20h +
jz loc_101D9B7  +
mov ax [esi+1Ch] +
mov [esi+1B2h] ax +
push 0  +
lea ebx [esi+10h] +
push 3Ah  +
mov ecx ebx +
call sub_1003D62  +
mov edi eax +
cmp edi 0FFFFFFFFh +
jz loc_101DAAB  +
movzx eax word ptr [esi+1B2h] +
cmp edi eax +
jg loc_101DAAB  +
push edi  +
push 0  +
lea eax [ebp+var_10] +
push eax  +
mov ecx ebx +
call sub_10034B1  +
push 0  +
lea ecx [ebp+var_10] +
call sub_1004172  +
cmp eax 0FFFFFFFFh +
jnz loc_1004168  +
cmp [ebp+var_C] 1 +
jz loc_101DA08  +
inc edi  +
mov [esi+1A6h] di +
push dword_104A0D8  +
lea ecx [ebp+var_10] +
call sub_1003503  +
test eax eax +
jnz loc_1004E99  +
mov [esi+1A4h] ax +
cmp ax 1 +
jz loc_1004168  +
mov eax [ebp+var_4] +
cmp eax 0FFFFFFFFh +
jnz loc_101DAF7  +
mov ax [esi+1Ch] +
mov [esi+1B2h] ax +
xor eax eax +
mov [esi+1B4h] ax +
pop edi  +
pop ebx  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
mov esi [ecx+4] +
cmp ebx esi +
jnb loc_10041AE  +
mov eax [ecx] +
mov ecx [ecx+8] +
mov ecx [ecx+4] +
add eax ebx +
push edi  +
lea edi [ecx+eax*2] +
movzx eax word ptr [edi] +
push eax  +
call sub_1003A20  +
test eax eax +
jnz loc_10041A5  +
inc ebx  +
inc edi  +
inc edi  +
cmp ebx esi +
jb loc_1004191  +
pop edi  +
cmp ebx esi +
jb loc_101D93E  +
or eax 0FFFFFFFFh +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+10h]  +
mov ecx [ebp+8] +
push dword ptr [ebp+0Ch]  +
call sub_10041D8  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push offset off_10041F4  +
push ecx  +
call sub_10017D5  +
pop ebp  +
retn 8  +
***
lods   +
not dword ptr [edx+174E1962h]  +
inc edi  +
movs   +
xor al 8Fh +
retn 0CD2Bh  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
mov ecx [ebp+arg_0] +
call sub_100424B  +
neg eax  +
sbb eax eax +
inc eax  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
jz loc_101F345  +
push [ebp+arg_0]  +
push dword ptr [ecx]  +
call sub_100426F  +
pop ecx  +
pop ecx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
mov eax [ebp+arg_0] +
mov dx [eax] +
cmp dx [ecx] +
jz loc_100798A  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
pop ebp  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
mov ecx [esi+8] +
sub ecx 10h +
mov dword ptr [esi] offset off_10042BC +
call sub_1002990  +
mov ecx [esi+4] +
sub ecx 10h +
call sub_1002990  +
mov dword ptr [esi] offset off_10029F0 +
pop esi  +
retn   +
***
call sub_10015E0  +
mov esi [ebp+0Ch] +
and dword ptr [ebp-10h] 0 +
mov ecx esi +
call sub_1003768  +
mov ecx [ebp+8] +
push eax  +
call sub_100374C  +
mov eax [ebp+10h] +
mov eax [eax] +
mov edx [eax-0Ch] +
mov ecx [esi] +
mov esi [ecx-0Ch] +
and dword ptr [ebp-4] 0 +
push edx  +
push eax  +
push esi  +
push ecx  +
push dword ptr [ebp+8]  +
mov dword ptr [ebp-10h] 1 +
call sub_1004327  +
mov eax [ebp+8] +
add esp 14h +
call sub_10015C0  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
push ebx  +
push esi  +
mov esi [ebp+arg_8] +
push edi  +
mov edi [ebp+arg_10] +
lea ebx [esi+edi] +
push ebx  +
call sub_1003122  +
push esi  +
push [ebp+arg_4]  +
mov [ebp+arg_8] eax +
push esi  +
push eax  +
call sub_1003200  +
mov eax [ebp+arg_8] +
push edi  +
push [ebp+arg_C]  +
lea eax [eax+esi*2] +
push edi  +
push eax  +
call sub_1003200  +
mov ecx [ebp+arg_0] +
add esp 20h +
push ebx  +
call sub_10032EF  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi] +
cmp eax [esi+14h] +
jz loc_1004388  +
push eax  +
call sub_1004482  +
mov ecx [esi+0Ch] +
and dword ptr [esi+4] 0 +
call sub_10043A8  +
mov eax [esi+14h] +
and dword ptr [esi+0Ch] 0 +
and dword ptr [esi+8] 0 +
mov [esi] eax +
pop esi  +
retn   +
***
test ecx ecx +
jnz loc_1004499  +
retn   +
***
xor edi edi +
inc edi  +
cmp word ptr [eax] 0 +
jz loc_10043DD  +
push eax  +
lea ecx [ebp-1Ch] +
call sub_10037F7  +
push eax  +
mov ecx esi +
mov [ebp-4] edi +
call sub_1003A43  +
mov ecx [ebp-1Ch] +
or dword ptr [ebp-4] 0FFFFFFFFh +
add ecx 0FFFFFFF0h +
call sub_1002990  +
mov eax [esi+4] +
dec eax  +
push eax  +
mov ecx esi +
call sub_10036F0  +
push 2Ah  +
push eax  +
call sub_1003D39  +
test al al +
jz loc_1004419  +
mov eax [ebx] +
mov eax [eax-0Ch] +
dec eax  +
push eax  +
mov ecx ebx +
call sub_1004428  +
cmp ax 2Ah +
jnz loc_1004419  +
mov eax [esi+4] +
push edi  +
dec eax  +
push eax  +
mov ecx esi +
call sub_10054B2  +
mov [esi+1Ch] edi +
xor eax eax +
call sub_10015C0  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
test edx edx +
jl loc_101F3DE  +
mov eax [ecx] +
cmp edx [eax-0Ch] +
jg loc_101F3DE  +
mov ax [eax+edx*2] +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi] +
test eax eax +
jnz loc_1015F52  +
pop esi  +
retn   +
***
push dword ptr [esi+34h]  +
call sub_1004482  +
push dword ptr [esi+38h]  +
mov ecx edi +
call sub_1004482  +
push esi  +
mov ecx edi +
call sub_10045BF  +
jmp loc_1004493  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov edi ecx +
cmp esi [edi+14h] +
jnz loc_1004461  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
push esi  +
mov esi [ecx] +
push ecx  +
call ds:__imp_free  +
pop ecx  +
mov ecx esi +
test esi esi +
jnz loc_100449A  +
pop esi  +
jmp locret_10043B0  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov ecx [esi] +
test ecx ecx +
jz loc_10044C7  +
push 1  +
call sub_10044D1  +
and dword ptr [esi] 0 +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_10044F7  +
test [ebp+arg_0] 1 +
jz loc_10044EB  +
push esi  +
call off_104B7F0  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov ecx [esi+1Ch] +
sub ecx 10h +
call sub_1002990  +
mov ecx [esi+18h] +
sub ecx 10h +
call sub_1002990  +
mov ecx esi +
pop esi  +
nop   +
nop   +
nop   +
nop   +
nop   +
mov edi edi +
push esi  +
mov esi ecx +
call sub_10037C7  +
mov esi [esi+14h] +
test esi esi +
jz loc_1004533  +
push esi  +
call ds:__imp_free  +
pop ecx  +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
mov ecx [esi] +
test ecx ecx +
jz loc_100454C  +
push 1  +
call sub_1004556  +
and dword ptr [esi] 0 +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_100457C  +
test [ebp+arg_0] 1 +
jz loc_1004570  +
push esi  +
call off_104B7F0  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov ecx [esi+1Ch] +
sub ecx 10h +
call sub_1002990  +
mov ecx [esi+18h] +
sub ecx 10h +
call sub_1002990  +
mov ecx esi +
pop esi  +
nop   +
nop   +
nop   +
nop   +
nop   +
mov edi edi +
push esi  +
mov esi ecx +
call sub_1004376  +
mov esi [esi+14h] +
test esi esi +
jz loc_10045B8  +
push esi  +
call ds:__imp_free  +
pop ecx  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov esi ecx +
test edi edi +
jz loc_101FA87  +
push 0  +
mov ecx edi +
call sub_10045F3  +
mov eax [esi+8] +
mov [edi+34h] eax +
dec dword ptr [esi+4]  +
mov [esi+8] edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1004616  +
test [ebp+arg_0] 1 +
jnz loc_101F9EE  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
lea ecx [esi+4] +
call sub_1002A01  +
mov ecx [esi] +
sub ecx 10h +
pop esi  +
jmp sub_1002990  +
***
push eax  +
call sub_100463E  +
jmp loc_10037D7  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov edi ecx +
cmp esi [edi+14h] +
jz loc_1004669  +
push dword ptr [esi+4Ch]  +
call sub_100463E  +
push dword ptr [esi+50h]  +
mov ecx edi +
call sub_100463E  +
push esi  +
mov ecx edi +
call sub_1004674  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov esi ecx +
test edi edi +
jz loc_10203B9  +
push 0  +
mov ecx edi +
call sub_10046A8  +
mov eax [esi+8] +
mov [edi+4Ch] eax +
dec dword ptr [esi+4]  +
mov [esi+8] edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_10046CB  +
test [ebp+arg_0] 1 +
jnz loc_101FF89  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
lea ecx [esi+20h] +
call sub_1004292  +
mov ecx esi +
pop esi  +
jmp sub_1003B4C  +
***
test esi esi +
jz loc_10036DD  +
mov eax [esi] +
push 1  +
mov ecx esi +
call dword ptr [eax+50h]  +
jmp loc_10036DD  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1004721  +
test byte ptr [ebp+8] 1 +
jz loc_1004715  +
push esi  +
call off_104B7F0  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_1001740 +
mov dword ptr [esi+4] 0C0000001h +
mov ecx dword_104A064 +
mov eax [ecx] +
call dword ptr [eax+8]  +
mov ecx esi +
pop esi  +
nop   +
nop   +
nop   +
nop   +
nop   +
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi+4Ch] +
mov dword ptr [esi] offset off_1002FD0 +
test eax eax +
jz loc_100475F  +
push eax  +
call ds:UnmapViewOfFile  +
cmp dword_104A3AC 0 +
jz loc_1004794  +
mov al byte_104A3B0 +
cmp al 4 +
jb loc_10047EB  +
mov eax dword_104A398 +
mov ecx dword_104A39C +
push edi  +
mov edx 20000h +
mov edi 80000000h +
and eax edx +
and ecx edi +
or eax ecx +
jnz loc_1020DB8  +
pop edi  +
lea ecx [esi+50h] +
push 0  +
mov dword ptr [ecx] offset off_1002BE4 +
call sub_1002CC0  +
lea ecx [esi+44h] +
call sub_10044B5  +
lea ecx [esi+40h] +
call sub_10044B5  +
lea ecx [esi+3Ch] +
call sub_10044B5  +
lea ecx [esi+38h] +
call sub_100453A  +
lea ecx [esi+28h] +
call sub_1004450  +
lea ecx [esi+18h] +
call sub_10047F6  +
mov ecx [esi+14h] +
sub ecx 10h +
call sub_1002990  +
mov ecx [esi+10h] +
sub ecx 10h +
pop esi  +
jmp sub_1002990  +
test al al +
jz loc_1004771  +
jmp loc_1004794  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi] +
test eax eax +
jnz loc_1016E1A  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
lea eax [ebp+cbData] +
push eax  +
push [ebp+lpData]  +
lea eax [ebp+lpData] +
push eax  +
push 0  +
push [ebp+lpValueName]  +
mov [ebp+cbData] 4 +
push dword ptr [ecx]  +
call ds:RegQueryValueExW  +
test eax eax +
jnz locret_1004842  +
mov eax [ebp+lpData] +
sub eax 4 +
neg eax  +
sbb eax eax +
and eax 0Dh +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+phkResult] 0 +
push esi  +
lea eax [ebp+phkResult] +
push eax  +
push [ebp+samDesired]  +
mov esi ecx +
push 0  +
push [ebp+lpSubKey]  +
push [ebp+hKey]  +
call ds:RegOpenKeyExW  +
test eax eax +
jnz loc_100487D  +
mov ecx esi +
call sub_1004887  +
mov ecx [ebp+phkResult] +
mov [esi] ecx +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov ecx [esi] +
xor eax eax +
test ecx ecx +
jz loc_100489E  +
push ecx  +
call ds:RegCloseKey  +
and dword ptr [esi] 0 +
pop esi  +
retn   +
***
call sub_1001862  +
mov esi ecx +
push offset CriticalSection  +
lea ecx [ebp-14h] +
mov dword ptr [esi+0Ch] 2 +
call sub_1002BED  +
and dword ptr [ebp-4] 0 +
push dword ptr [ebp+8]  +
lea edi [esi+10h] +
mov ecx edi +
mov byte ptr [ebp-4] 1 +
call sub_1003231  +
lea ebx [esi+14h] +
push offset aWindows  +
mov ecx ebx +
call sub_1003269  +
push 20h  +
call off_104B7F4  +
mov ecx eax +
mov [ebp+8] ecx +
mov byte ptr [ebp-4] 2 +
test ecx ecx +
jz loc_10049F4  +
push edi  +
push ebx  +
call sub_1004A24  +
mov byte ptr [ebp-4] 1 +
test eax eax +
jz loc_10049FB  +
push 20h  +
mov [esi+38h] eax +
call off_104B7F4  +
mov ecx eax +
mov [ebp+8] ecx +
mov byte ptr [ebp-4] 3 +
test ecx ecx +
jz loc_1004A0A  +
push edi  +
push ebx  +
call sub_1007919  +
mov byte ptr [ebp-4] 1 +
test eax eax +
jz loc_10049FB  +
push 20h  +
mov [esi+3Ch] eax +
call off_104B7F4  +
mov ecx eax +
mov [ebp+8] ecx +
mov byte ptr [ebp-4] 4 +
test ecx ecx +
jz loc_1004A11  +
push edi  +
push ebx  +
call sub_1007919  +
mov byte ptr [ebp-4] 1 +
test eax eax +
jz loc_10049FB  +
push 20h  +
mov [esi+40h] eax +
call off_104B7F4  +
mov ecx eax +
mov [ebp+8] ecx +
mov byte ptr [ebp-4] 5 +
test ecx ecx +
jz loc_1004A18  +
push edi  +
push ebx  +
call sub_1007919  +
mov byte ptr [ebp-4] 1 +
test eax eax +
jz loc_10049FB  +
xor edi edi +
inc edi  +
push edi  +
mov ecx esi +
mov [esi+44h] eax +
call sub_1005E70  +
mov [ebp+8] eax +
test eax eax +
jl loc_10049DA  +
mov ecx esi +
call sub_10072EB  +
mov ecx esi +
call sub_1006149  +
call sub_1004FB4  +
mov [esi+5Ch] al +
mov al [ebp+0Ch] +
mov [esi+58h] al +
mov al [ebp+10h] +
mov [esi+0Ch] edi +
mov [esi+5Bh] al +
cmp dword ptr [ebp-14h] 0 +
jz loc_10049E9  +
push dword ptr [ebp-14h]  +
call ds:LeaveCriticalSection  +
mov eax [ebp+8] +
call sub_10015C0  +
retn 0Ch  +
xor eax eax +
jmp loc_100490B  +
cmp dword ptr [ebp-14h] 0 +
jnz loc_102122C  +
jmp loc_1021235  +
xor eax eax +
jmp loc_100493A  +
xor eax eax +
jmp loc_1004969  +
xor eax eax +
jmp loc_1004998  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_4]  +
mov esi ecx +
push [ebp+arg_0]  +
call sub_1004A43  +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
call sub_10015E0  +
mov esi ecx +
mov [ebp-10h] esi +
push 0Ah  +
call sub_1004A9A  +
and dword ptr [ebp-4] 0 +
lea edi [esi+18h] +
mov ecx edi +
call sub_10033C0  +
lea ebx [esi+1Ch] +
mov ecx ebx +
call sub_10033C0  +
push dword ptr [ebp+8]  +
mov ecx edi +
mov byte ptr [ebp-4] 2 +
call sub_1003FA0  +
push dword ptr [ebp+0Ch]  +
mov ecx ebx +
call sub_1003FA0  +
mov eax esi +
call sub_10015C0  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_10050FF  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_1001862  +
mov esi [ebp+8] +
xor edi edi +
cmp esi edi +
jz loc_101E7D4  +
push 60h  +
mov [esi] edi +
mov dword ptr [ebp-14h] 8007000Eh +
mov [ebp-4] edi +
call off_104B7F4  +
cmp eax edi +
jz loc_1004B4E  +
push edi  +
mov ecx eax +
call sub_1004B57  +
cmp eax edi +
jz loc_1004B41  +
mov [ebp-14h] edi +
mov [esi] eax +
mov eax [ebp-14h] +
call sub_10015C0  +
retn 4  +
xor eax eax +
jmp loc_1004B3A  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_1004B7D  +
mov dword ptr [esi] offset off_1001740 +
mov ecx dword_104A064 +
mov eax [ecx] +
call dword ptr [eax+4]  +
mov eax esi +
pop esi  +
retn 4  +
***
mov edi edi +
push ebx  +
push esi  +
mov esi ecx +
xor ebx ebx +
mov [esi+4] ebx +
lea ecx [esi+10h] +
mov dword ptr [esi] offset off_1002FD0 +
call sub_10033C0  +
lea ecx [esi+14h] +
call sub_10033C0  +
mov [esi+18h] ebx +
mov [esi+1Ch] ebx +
mov [esi+20h] ebx +
mov [esi+24h] ebx +
mov [esi+28h] ebx +
mov [esi+2Ch] ebx +
mov [esi+30h] ebx +
mov [esi+34h] ebx +
mov [esi+38h] ebx +
mov [esi+3Ch] ebx +
mov [esi+40h] ebx +
mov [esi+44h] ebx +
mov [esi+4Ch] ebx +
mov dword ptr [esi+50h] offset off_1002BE4 +
mov [esi+54h] ebx +
mov byte ptr [esi+58h] 1 +
mov [esi+59h] bl +
mov [esi+5Ah] bl +
mov [esi+5Bh] bl +
mov [esi+5Ch] bl +
mov [esi+0Ch] ebx +
cmp dword_104A3AC ebx +
jz loc_1004C16  +
mov al byte_104A3B0 +
cmp al 4 +
jb loc_1004C1B  +
mov eax dword_104A398 +
mov ecx dword_104A39C +
push edi  +
mov edx 20000h +
mov edi 80000000h +
and eax edx +
and ecx edi +
or eax ecx +
jnz loc_1020D64  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
retn   +
cmp al bl +
jz loc_1004BF3  +
jmp loc_1004C16  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push esi  +
mov esi dword ptr [ebp+Data] +
push edi  +
push 2001Fh  +
xor edi edi +
push offset aSoftwareMicr_2  +
push 80000002h  +
lea ecx [ebp+var_C] +
mov [ebp+var_C] edi +
mov [ebp+var_8] edi +
mov [ebp+var_4] edi +
mov [esi] edi +
call sub_100484B  +
test eax eax +
jnz loc_1004C78  +
lea eax [ebp+Data] +
push eax  +
push offset aSetupcomplet_0  +
lea ecx [ebp+var_C] +
call sub_100480C  +
test eax eax +
jnz loc_1004C78  +
cmp dword ptr [ebp+Data] edi +
setnz al  +
mov [esi] eax +
lea ecx [ebp+var_C] +
call sub_1004887  +
pop edi  +
xor eax eax +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
test ecx ecx +
jz loc_101E700  +
mov eax [ebp+arg_0] +
and dword ptr [ecx] 0 +
push ecx  +
add eax 4 +
mov edx [eax] +
push 3  +
push eax  +
call dword ptr [edx+0Ch]  +
pop ebp  +
retn 8  +
***
mov esi [ebp+arg_10] +
jmp loc_1003571  +
dec eax  +
jnz loc_101B5EF  +
xor eax eax +
inc eax  +
jmp loc_1003597  +
***
pop ebp  +
retn   +
***
push dword_104A0F8  +
lea ecx [ebp+var_10] +
call sub_1003503  +
test eax eax +
jz loc_101DA97  +
push dword_104A0E8  +
lea ecx [ebp+var_10] +
call sub_1003503  +
test eax eax +
jz loc_101DA9D  +
cmp [ebp+var_C] 0 +
jz loc_101DAA4  +
push 6  +
pop eax  +
jmp loc_100413B  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ebp+arg_8] +
push esi  +
mov esi ds:RegQueryValueExW +
push edi  +
xor edi edi +
mov [eax] edi +
lea eax [ebp+cbData] +
push eax  +
push edi  +
push edi  +
push edi  +
push [ebp+lpValueName]  +
push [ebp+hKey]  +
call esi  +
cmp eax edi +
jnz loc_101EAF0  +
mov eax [ebp+cbData] +
cmp eax edi +
jz loc_101EB05  +
push ebx  +
shr eax 1 +
push 2  +
inc eax  +
xor ecx ecx +
pop edx  +
mul  edx +
seto cl  +
neg ecx  +
or eax ecx +
push eax  +
call off_104B7F4  +
mov ebx eax +
cmp ebx edi +
jz loc_101EB0F  +
lea eax [ebp+cbData] +
push eax  +
push ebx  +
push edi  +
push edi  +
push [ebp+lpValueName]  +
push [ebp+hKey]  +
call esi  +
mov esi eax +
cmp esi edi +
jnz loc_101EB19  +
mov eax [ebp+cbData] +
shr eax 1 +
xor ecx ecx +
mov [ebx+eax*2] cx +
mov eax [ebp+arg_8] +
mov [eax] ebx +
xor eax eax +
pop ebx  +
pop edi  +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push esi  +
mov esi ecx +
lea ecx [esi+4] +
mov dword ptr [esi] offset off_10029A0 +
call sub_10033C0  +
lea ecx [esi+8] +
call sub_10033C0  +
lea ecx [esi+0Ch] +
call sub_10033C0  +
or dword ptr [esi+20h] 0FFFFFFFFh +
xor eax eax +
inc eax  +
xor ecx ecx +
mov [esi+10h] eax +
mov [esi+14h] eax +
mov [esi+1Ch] eax +
mov [esi+18h] ecx +
mov [esi+24h] ecx +
mov [esi+28h] ecx +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_8] +
push eax  +
xor ebx ebx +
push ebx  +
push 10h  +
push offset aAllowremovable  +
push offset aSoftwareMicr_4  +
push 80000002h  +
mov [ebp+var_4] 4 +
call ds:RegGetValueW  +
test eax eax +
jz loc_101F04C  +
mov al bl +
pop ebx  +
leave   +
retn   +
***
cmp byte ptr [ecx+8] 0 +
jnz loc_10050A2  +
mov eax [ecx] +
call dword ptr [eax+4]  +
test eax eax +
jz loc_101F06D  +
xor eax eax +
retn   +
***
mov edi edi +
push esi  +
push 14h  +
mov esi ecx +
call ds:malloc  +
pop ecx  +
mov [esi+4] eax +
test eax eax +
jz loc_101F07A  +
push 1  +
push eax  +
call ds:InitializeSecurityDescriptor  +
test eax eax +
jz loc_101F084  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_8] +
shl eax 2 +
push eax  +
push [ebp+arg_4]  +
push eax  +
push [ebp+arg_0]  +
call sub_1003CAD  +
add esp 10h +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
mov eax ecx +
xor ecx ecx +
mov [eax] ecx +
mov [eax+4] ecx +
mov [eax+8] ecx +
mov [eax+0Ch] ecx +
mov [eax+10h] edx +
mov [eax+14h] ecx +
pop ebp  +
retn 4  +
***
mov [ecx] edx +
jmp loc_1005844  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_100516F  +
mov edx [eax+4Ch] +
push esi  +
mov esi [edx+50h] +
mov [eax+4Ch] esi +
mov esi [edx+50h] +
cmp esi [ecx+14h] +
jnz loc_101F147  +
mov esi [eax+54h] +
mov [edx+54h] esi +
mov esi [eax+54h] +
cmp esi [ecx+14h] +
jz loc_101F14F  +
cmp eax [esi+50h] +
jnz loc_1005173  +
mov [esi+50h] edx +
mov [edx+50h] eax +
mov [eax+54h] edx +
pop esi  +
pop ebp  +
retn 4  +
mov [esi+4Ch] edx +
jmp loc_1005168  +
***
cmp byte ptr [ecx+48h] 0 +
jz loc_101F18A  +
add ecx 4 +
push ecx  +
call ds:IsValidSid  +
neg eax  +
sbb eax eax +
neg eax  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push [ebp+arg_8]  +
and [ebp+var_4] 0 +
push [ebp+arg_4]  +
lea eax [ebp+var_4] +
push eax  +
call sub_1003089  +
test eax eax +
jl loc_10051E7  +
push 4  +
push [ebp+var_4]  +
lea eax [ebp+var_4] +
push eax  +
call sub_100338B  +
test eax eax +
jl loc_10051E7  +
push [ebp+var_4]  +
call ds:malloc  +
pop ecx  +
test eax eax +
jz loc_10051E7  +
mov ecx [ebp+arg_0] +
mov edx [ecx] +
mov [eax] edx +
mov [ecx] eax +
leave   +
retn 0Ch  +
xor eax eax +
jmp locret_10051E3  +
***
mov edi edi +
push esi  +
mov esi ecx +
lea ecx [esi+4] +
mov dword ptr [esi] offset off_10042BC +
call sub_10033C0  +
lea ecx [esi+8] +
call sub_10033C0  +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
push 1  +
push 1  +
push offset dword_10072E0  +
push [ebp+arg_0]  +
call sub_10071A3  +
mov eax [ebp+arg_0] +
add esp 10h +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
push 12h  +
push 1  +
push offset dword_1005264  +
push [ebp+arg_0]  +
call sub_10071A3  +
mov eax [ebp+arg_0] +
add esp 10h +
leave   +
retn 4  +
***
retn   +
***
push ecx  +
call ds:GetLengthSid  +
add eax 8 +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
mov edi [ebp+arg_0] +
mov al [edi+68h] +
shr al 4 +
and al 1 +
jnz loc_101F905  +
test al al +
jnz loc_10052BD  +
test byte ptr [esi+68h] 10h +
jnz loc_1005302  +
mov al [edi+70h] +
test al al +
jz loc_1005307  +
cmp byte ptr [esi+70h] 0 +
jz loc_10052FB  +
test al al +
jz loc_1005307  +
mov eax [edi] +
mov ecx edi +
call dword ptr [eax+10h]  +
test al al +
jnz loc_101F914  +
mov eax [edi] +
mov ecx edi +
call dword ptr [eax+10h]  +
test al al +
jnz loc_10052F3  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+10h]  +
test al al +
jnz loc_1005302  +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
mov eax 0FFFFFFFFh +
jmp loc_10052F5  +
xor eax eax +
inc eax  +
jmp loc_10052F5  +
cmp byte ptr [esi+70h] 0 +
jz loc_10052CE  +
jmp loc_1005302  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+8]  +
add ecx 10h +
call sub_10068B5  +
mov eax [eax] +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov edi ecx +
mov eax [edi] +
cmp eax [esi] +
jz loc_101F92B  +
call sub_1005CB3  +
mov eax [esi] +
and dword ptr [esi] 0 +
mov [edi] eax +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_10015E0  +
mov esi [ebp+0Ch] +
and dword ptr [ebp-10h] 0 +
mov ecx esi +
call sub_1003768  +
mov ecx [ebp+8] +
push eax  +
call sub_100374C  +
mov esi [esi] +
push dword ptr [ebp+10h]  +
and dword ptr [ebp-4] 0 +
mov edi [esi-0Ch] +
mov dword ptr [ebp-10h] 1 +
call sub_1003025  +
push eax  +
push dword ptr [ebp+10h]  +
push edi  +
push esi  +
push dword ptr [ebp+8]  +
call sub_1004327  +
mov eax [ebp+8] +
add esp 18h +
call sub_10015C0  +
retn 0Ch  +
***
call sub_10015E0  +
mov esi [ebp+10h] +
and dword ptr [ebp-10h] 0 +
mov ecx esi +
call sub_1003768  +
mov ecx [ebp+8] +
push eax  +
call sub_100374C  +
mov eax [esi] +
push dword ptr [eax-0Ch]  +
and dword ptr [ebp-4] 0 +
push eax  +
push dword ptr [ebp+0Ch]  +
mov dword ptr [ebp-10h] 1 +
call sub_1003025  +
pop ecx  +
push eax  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call sub_1004327  +
mov eax [ebp+8] +
add esp 14h +
call sub_10015C0  +
retn 0Ch  +
***
xor eax eax +
push esi  +
mov esi ecx +
lea ecx [esi+10h] +
mov [esi] eax +
mov [esi+4] eax +
mov [esi+8] eax +
mov [esi+0Ch] eax +
call sub_10033C0  +
lea ecx [esi+14h] +
call sub_10033C0  +
mov eax esi +
pop esi  +
retn   +
***
push edi  +
call ds:malloc  +
pop ecx  +
mov [esi+14h] eax +
cmp eax ebx +
jz loc_10205F6  +
push edi  +
push ebx  +
push eax  +
call memset  +
mov eax [esi+14h] +
mov dword ptr [eax+48h] 1 +
mov eax [esi+14h] +
mov [eax+50h] eax +
mov eax [esi+14h] +
mov ecx [eax+50h] +
mov [eax+4Ch] ecx +
mov eax [esi+14h] +
mov ecx [eax+4Ch] +
mov [eax+54h] ecx +
mov eax [esi+14h] +
add esp 0Ch +
mov [esi] eax +
jmp loc_1005BD3  +
***
mov [edi] eax +
jmp loc_100568F  +
***
mov ecx [ebp+var_4] +
push esi  +
call sub_10036F0  +
cmp dword ptr [eax+4] 0 +
jnz loc_1005566  +
jmp loc_1005547  +
***
test eax eax +
setz al  +
jmp loc_10055E0  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_4] +
push ebx  +
push esi  +
mov esi ecx +
mov ecx [ebp+arg_0] +
lea ebx [ecx+edx] +
push edi  +
cmp ebx ecx +
jb loc_10213E9  +
cmp ebx edx +
jb loc_10213E9  +
mov eax [esi+4] +
cmp ebx eax +
ja loc_10213E9  +
sub eax ebx +
mov [ebp+arg_0] eax +
mov eax [esi] +
mov edi ecx +
shl edi 3 +
push edx  +
add eax edi +
push eax  +
call sub_1003B93  +
cmp [ebp+arg_0] 0 +
ja loc_10213D3  +
mov eax [ebp+arg_4] +
sub [esi+4] eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
mov ebx [ebp+arg_0] +
mov eax [ebx+4] +
mov [ebp+var_4] ecx +
cmp eax [ecx+4] +
jz loc_100552D  +
xor al al +
pop ebx  +
leave   +
retn 4  +
push esi  +
xor esi esi +
push edi  +
test eax eax +
jbe loc_100556C  +
push esi  +
mov ecx ebx +
call sub_10036F0  +
cmp dword ptr [eax+4] 0 +
jnz loc_100548B  +
mov ecx [ebp+var_4] +
push esi  +
call sub_10036F0  +
mov edi [eax] +
push esi  +
mov ecx ebx +
call sub_10036F0  +
push edi  +
mov ecx eax +
call sub_100370F  +
test eax eax +
jnz loc_1005572  +
inc esi  +
cmp esi [ebx+4] +
jb loc_1005535  +
mov al 1 +
pop edi  +
pop esi  +
jmp loc_1005528  +
xor al al +
jmp loc_100556E  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax [ebp+arg_0] +
mov eax [eax+4] +
mov [ebp+var_4] ecx +
mov ecx [ecx+4] +
mov [ebp+var_8] ecx +
cmp ecx eax +
jz loc_100559C  +
setnbe al  +
leave   +
retn 4  +
push ebx  +
push esi  +
xor ebx ebx +
push edi  +
test ecx ecx +
jbe loc_10055DE  +
mov ecx [ebp+var_4] +
push ebx  +
call sub_10036F0  +
mov ecx [ebp+arg_0] +
push ebx  +
mov edi eax +
call sub_10036F0  +
mov esi eax +
mov eax [edi+4] +
cmp eax [esi+4] +
jnz loc_10054A3  +
test eax eax +
jnz loc_10055D8  +
push dword ptr [esi]  +
mov ecx edi +
call sub_100370F  +
test eax eax +
jnz loc_10055E5  +
inc ebx  +
cmp ebx [ebp+var_8] +
jb loc_10055A5  +
xor al al +
pop edi  +
pop esi  +
pop ebx  +
jmp locret_1005598  +
push dword ptr [esi]  +
mov ecx edi +
call sub_100370F  +
xor ecx ecx +
test eax eax +
setl cl  +
mov al cl +
jmp loc_10055E0  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
mov ecx [ebp+arg_0] +
call sub_100557B  +
test al al +
jnz loc_100562A  +
push [ebp+arg_4]  +
mov ecx [ebp+arg_0] +
call sub_1005511  +
xor ecx ecx +
test al al +
setz cl  +
mov eax ecx +
pop ebp  +
retn 8  +
or eax 0FFFFFFFFh +
jmp loc_1005626  +
***
mov esi [esi+4Ch] +
jmp loc_1005655  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
push [ebp+arg_4]  +
mov edi ecx +
push [ebp+arg_0]  +
call sub_1005B5B  +
mov esi [edi] +
mov [ebp+arg_4] eax +
xor ebx ebx +
cmp esi [edi+14h] +
jz loc_100566E  +
push esi  +
push [ebp+arg_0]  +
mov ebx esi +
call sub_10055FE  +
test eax eax +
jle loc_100562F  +
mov esi [esi+50h] +
jmp loc_1005655  +
mov eax [ebp+arg_4] +
mov [eax+54h] ebx +
test ebx ebx +
jz loc_1005484  +
push ebx  +
push [ebp+arg_0]  +
call sub_10055FE  +
test eax eax +
mov eax [ebp+arg_4] +
jle loc_1005699  +
mov [ebx+50h] eax +
mov eax [ebp+arg_4] +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
mov [ebx+4Ch] eax +
jmp loc_100568F  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
push [ebp+arg_0]  +
mov edi ecx +
call sub_10056D6  +
push [ebp+arg_4]  +
mov esi eax +
test esi esi +
jnz loc_102079C  +
push [ebp+arg_0]  +
mov ecx edi +
call sub_1005762  +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov edi ecx +
mov esi [edi] +
xor ebx ebx +
cmp esi [edi+14h] +
jz loc_1005714  +
test ebx ebx +
jnz sub_1016E31  +
push esi  +
push [ebp+arg_0]  +
call sub_10055FE  +
test eax eax +
jz loc_1016D52  +
jl loc_100571D  +
mov esi [esi+50h] +
cmp esi [edi+14h] +
jnz loc_10056E9  +
test ebx ebx +
jnz sub_1016E31  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
mov esi [esi+4Ch] +
jmp loc_1005707  +
***
mov ecx [edx+50h] +
test ecx ecx +
jz loc_100572F  +
cmp dword ptr [ecx+48h] 0 +
jz loc_10057A4  +
cmp esi [eax+50h] +
jnz loc_100573E  +
mov esi eax +
push esi  +
mov ecx ebx +
call sub_100580C  +
mov eax [esi+54h] +
mov [eax+48h] edi +
mov eax [esi+54h] +
mov eax [eax+54h] +
and dword ptr [eax+48h] 0 +
mov eax [esi+54h] +
push dword ptr [eax+54h]  +
mov ecx ebx +
call sub_100512C  +
jmp loc_10057BA  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
push [ebp+arg_4]  +
mov ebx ecx +
push [ebp+arg_0]  +
call sub_1005639  +
and dword ptr [eax+48h] 0 +
xor edi edi +
inc edi  +
mov [ebp+arg_4] eax +
mov esi eax +
cmp eax [ebx] +
jz loc_10057BE  +
mov eax [esi+54h] +
cmp dword ptr [eax+48h] 0 +
jnz loc_10057BE  +
mov edx [eax+54h] +
mov ecx [edx+4Ch] +
cmp eax ecx +
jz loc_1005722  +
test ecx ecx +
jz loc_10057DA  +
cmp dword ptr [ecx+48h] 0 +
jnz loc_10057DA  +
mov [eax+48h] edi +
mov [ecx+48h] edi +
mov eax [esi+54h] +
mov eax [eax+54h] +
and dword ptr [eax+48h] 0 +
mov eax [esi+54h] +
mov esi [eax+54h] +
cmp esi [ebx] +
jnz loc_1005787  +
mov eax [ebx] +
mov [eax+48h] edi +
mov eax [ebx] +
add eax 54h +
push eax  +
mov ecx ebx +
call sub_1005E52  +
mov eax [ebp+arg_4] +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
cmp esi [eax+4Ch] +
jz loc_102078D  +
mov eax [esi+54h] +
mov [eax+48h] edi +
mov eax [esi+54h] +
mov eax [eax+54h] +
and dword ptr [eax+48h] 0 +
mov eax [esi+54h] +
push dword ptr [eax+54h]  +
mov ecx ebx +
call sub_100580C  +
jmp loc_10057BA  +
***
mov [esi+54h] eax +
jmp loc_100582A  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_100584B  +
mov edx [eax+50h] +
push esi  +
mov esi [edx+4Ch] +
mov [eax+50h] esi +
mov esi [edx+4Ch] +
cmp esi [ecx+14h] +
jnz loc_1005802  +
mov esi [eax+54h] +
mov [edx+54h] esi +
mov esi [eax+54h] +
cmp esi [ecx+14h] +
jz loc_1005120  +
cmp eax [esi+4Ch] +
jz loc_100584F  +
mov [esi+50h] edx +
mov [edx+4Ch] eax +
mov [eax+54h] edx +
pop esi  +
pop ebp  +
retn 4  +
mov [esi+4Ch] edx +
jmp loc_1005844  +
***
call sub_1001862  +
mov ebx ecx +
mov esi [ebp+8] +
mov eax [esi] +
and dword ptr [ebp-14h] 0 +
lea ecx [ebp-14h] +
push ecx  +
push offset aUrl  +
push eax  +
call sub_1004EDC  +
mov edi eax +
test edi edi +
jl loc_100594A  +
lea eax [ebp-20h] +
push eax  +
push offset aInclude  +
mov ecx esi +
call sub_100480C  +
test eax eax +
jnz loc_1021564  +
lea eax [ebp-1Ch] +
push eax  +
push offset aSuppress  +
mov ecx esi +
call sub_100480C  +
test eax eax +
jnz loc_1021577  +
lea eax [ebp-18h] +
push eax  +
push offset aDefault  +
mov ecx esi +
call sub_100480C  +
test eax eax +
jnz loc_1021577  +
lea eax [ebp+8] +
push eax  +
push offset aPolicy  +
mov ecx esi +
call sub_100480C  +
test eax eax +
jnz loc_102157B  +
push dword ptr [ebp-14h]  +
and dword ptr [ebp-4] 0 +
lea ecx [ebp-24h] +
call sub_10035A2  +
push dword ptr [ebp+8]  +
mov ecx ebx +
push 1  +
push dword ptr [ebp-18h]  +
mov byte ptr [ebp-4] 1 +
push 1  +
push dword ptr [ebp-1Ch]  +
push dword ptr [ebp-20h]  +
push eax  +
call sub_1005968  +
mov ecx [ebp-24h] +
add ecx 0FFFFFFF0h +
mov byte ptr [ebp-4] 0 +
call sub_1002990  +
push dword ptr [ebp-14h]  +
lea ecx [ebp-24h] +
call sub_10035A2  +
mov ecx [ebp+0Ch] +
push eax  +
mov byte ptr [ebp-4] 2 +
call sub_100382A  +
mov ecx [ebp-24h] +
add ecx 0FFFFFFF0h +
call sub_1002990  +
or dword ptr [ebp-4] 0FFFFFFFFh +
cmp dword ptr [ebp-14h] 0 +
jz loc_1005959  +
push dword ptr [ebp-14h]  +
call off_104B7F0  +
mov eax edi +
call sub_10015C0  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov esi ecx +
push edi  +
lea ecx [esi+4] +
call sub_1003FA0  +
lea eax [esi+8] +
push eax  +
push dword ptr [edi]  +
mov ecx esi +
call sub_10059BD  +
mov eax [ebp+arg_4] +
and dword ptr [esi+20h] 0 +
mov [esi+0Ch] eax +
mov eax [ebp+arg_8] +
mov [esi+10h] eax +
mov eax [ebp+arg_C] +
mov [esi+14h] eax +
mov eax [ebp+arg_10] +
mov [esi+18h] eax +
mov eax [ebp+arg_14] +
mov [esi+1Ch] eax +
mov eax [ebp+arg_18] +
pop edi  +
mov [esi+24h] eax +
pop esi  +
pop ebp  +
retn 1Ch  +
***
call sub_1002A3A  +
mov esi [ebp+8] +
mov ebx [ebp+0Ch] +
xor edi edi +
push edi  +
lea ecx [ebp-1D4h] +
call sub_1003D9C  +
and [ebp-4] edi +
push esi  +
lea ecx [ebp-1D4h] +
call sub_1003E3B  +
lea eax [ebp-1E0h] +
push eax  +
lea ecx [ebp-1D4h] +
call sub_1006BCC  +
push offset word_1004D80  +
lea ecx [ebp-1E0h] +
call sub_1003503  +
test eax eax +
jz loc_1005A1F  +
mov eax [ebp-1DCh] +
test eax eax +
jnz loc_1005A40  +
push offset aLocalhost  +
mov ecx ebx +
call sub_1003269  +
lea ecx [ebp-1D4h] +
call sub_1003CEC  +
mov eax edi +
call sub_1002A77  +
retn 8  +
push 2  +
xor ecx ecx +
pop edx  +
inc eax  +
mul  edx +
seto cl  +
neg ecx  +
or ecx eax +
push ecx  +
call off_104B7F4  +
mov esi eax +
test esi esi +
jz loc_101FAAC  +
lea eax [ebp-1E4h] +
push eax  +
mov eax [ebp-1DCh] +
inc eax  +
push eax  +
push esi  +
lea ecx [ebp-1E0h] +
call sub_1005A97  +
mov edi eax +
test edi edi +
jl loc_1005A89  +
push esi  +
mov ecx ebx +
call sub_1003231  +
push esi  +
call off_104B7F0  +
jmp loc_1005A2B  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov eax [esi+4] +
lea ecx [eax+1] +
cmp [ebp+arg_4] ecx +
jb loc_101DDF9  +
mov ecx [esi] +
add eax eax +
push edi  +
mov edi [ebp+arg_0] +
push eax  +
mov eax [esi+8] +
mov eax [eax+4] +
lea eax [eax+ecx*2] +
push eax  +
push edi  +
call memcpy  +
mov eax [esi+4] +
xor ecx ecx +
mov [edi+eax*2] cx +
mov eax [ebp+arg_8] +
add esp 0Ch +
pop edi  +
test eax eax +
jz loc_1005AE0  +
mov ecx [esi+4] +
mov [eax] ecx +
xor eax eax +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
push [ebp+arg_4]  +
mov edi ecx +
push [ebp+arg_0]  +
call sub_1006491  +
mov esi [edi] +
mov [ebp+arg_4] eax +
xor ebx ebx +
cmp esi [edi+14h] +
jz loc_1005B26  +
push dword ptr [esi]  +
mov ebx esi +
push [ebp+arg_0]  +
call sub_1007157  +
test eax eax +
jle loc_10179BE  +
mov esi [esi+38h] +
jmp loc_1005B08  +
mov eax [ebp+arg_4] +
mov [eax+3Ch] ebx +
test ebx ebx +
jz loc_1005B52  +
push dword ptr [ebx]  +
push [ebp+arg_0]  +
call sub_1007157  +
test eax eax +
mov eax [ebp+arg_4] +
jle loc_10179C6  +
mov [ebx+38h] eax +
mov eax [ebp+arg_4] +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
mov [edi] eax +
jmp loc_1005B48  +
***
call sub_10015E0  +
mov esi ecx +
xor ebx ebx +
cmp [esi+8] ebx +
jz loc_1005BC7  +
mov edi [esi+8] +
mov [ebp-10h] edi +
mov [ebp-14h] edi +
mov [ebp-4] ebx +
cmp edi ebx +
jz loc_1005B8D  +
push dword ptr [ebp+0Ch]  +
mov ecx edi +
push dword ptr [ebp+8]  +
call sub_1007834  +
mov eax [esi+8] +
mov eax [eax+4Ch] +
mov [esi+8] eax +
lea eax [edi+4Ch] +
push eax  +
mov ecx esi +
mov [edi+48h] ebx +
call sub_1005E52  +
lea eax [edi+50h] +
push eax  +
mov ecx esi +
call sub_1005E52  +
lea eax [edi+54h] +
push eax  +
mov ecx esi +
call sub_1005E52  +
inc dword ptr [esi+4]  +
mov eax edi +
call sub_10015C0  +
retn 8  +
push 58h  +
pop edi  +
cmp [esi+14h] ebx +
jz loc_100543A  +
push edi  +
push dword ptr [esi+10h]  +
lea eax [esi+0Ch] +
push eax  +
call sub_100519D  +
cmp eax ebx +
jz loc_10205F6  +
mov ecx [esi+10h] +
mov edx ecx +
imul edx edx +
dec ecx  +
cmp ecx ebx +
lea eax [edx+eax-54h] +
jge loc_1005BFE  +
jmp loc_1005B70  +
mov edx [esi+8] +
mov [eax+4Ch] edx +
mov [esi+8] eax +
sub eax edi +
dec ecx  +
jns loc_1005BFE  +
jmp loc_1005B70  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
push esi  +
push edi  +
mov esi ecx +
cmp eax 0FFFFFFFFh +
jnz loc_101F792  +
mov edi [ebp+arg_0] +
test edi edi +
jnz loc_101F79A  +
mov eax [esi] +
test eax eax +
jz loc_1005C50  +
push dword ptr [esi+4]  +
push eax  +
call sub_1005C65  +
push dword ptr [esi]  +
call ds:__imp_free  +
and [esi] edi +
pop ecx  +
and dword ptr [esi+4] 0 +
and dword ptr [esi+8] 0 +
mov al 1 +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
mov edi [ebp+arg_4] +
test edi edi +
jbe loc_1005C86  +
push esi  +
mov esi [ebp+arg_0] +
push 0  +
mov ecx esi +
call sub_1005C90  +
add esi 4 +
dec edi  +
jnz loc_1005C76  +
pop esi  +
pop edi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1005CB3  +
test [ebp+arg_0] 1 +
jnz loc_101F324  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov ecx [esi] +
test ecx ecx +
jnz loc_1005CC3  +
and dword ptr [esi] 0 +
pop esi  +
retn   +
mov eax [ecx] +
push 1  +
call dword ptr [eax]  +
jmp loc_1005CBE  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_8]  +
mov esi ecx +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_10068D4  +
mov al [ebp+arg_C] +
mov [esi+70h] al +
mov dword ptr [esi] offset off_1005CFC +
mov eax esi +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_1005CFC +
call sub_1005D49  +
test byte ptr [ebp+8] 1 +
jz loc_1005D3D  +
push esi  +
call off_104B7F0  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
mov edi edi +
push esi  +
mov esi ecx +
mov ecx [esi+5Ch] +
sub ecx 10h +
mov dword ptr [esi] offset off_1005DA0 +
call sub_1002990  +
mov ecx [esi+58h] +
sub ecx 10h +
call sub_1002990  +
mov ecx [esi+54h] +
sub ecx 10h +
call sub_1002990  +
mov ecx [esi+50h] +
sub ecx 10h +
pop esi  +
jmp sub_1002990  +
***
mov [eax+30h] edi +
mov [ecx+30h] edi +
mov eax [esi+3Ch] +
mov eax [eax+3Ch] +
and dword ptr [eax+30h] 0 +
mov eax [esi+3Ch] +
mov esi [eax+3Ch] +
jmp loc_1005E2D  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
push [ebp+arg_4]  +
mov ebx ecx +
push [ebp+arg_0]  +
call sub_1005AEC  +
and dword ptr [eax+30h] 0 +
xor edi edi +
inc edi  +
mov [ebp+arg_4] eax +
mov esi eax +
cmp eax [ebx] +
jz loc_1005E31  +
mov eax [esi+3Ch] +
cmp dword ptr [eax+30h] 0 +
jnz loc_1005E31  +
mov edx [eax+3Ch] +
mov ecx [edx+34h] +
cmp eax ecx +
jz loc_10198F8  +
test ecx ecx +
jz loc_1005E07  +
cmp dword ptr [ecx+30h] 0 +
jz loc_1005DA4  +
cmp esi [eax+34h] +
jz loc_10205E7  +
mov eax [esi+3Ch] +
mov [eax+30h] edi +
mov eax [esi+3Ch] +
mov eax [eax+3Ch] +
and dword ptr [eax+30h] 0 +
mov eax [esi+3Ch] +
push dword ptr [eax+3Ch]  +
mov ecx ebx +
call sub_10060F9  +
cmp esi [ebx] +
jnz loc_1005DE6  +
mov eax [ebx] +
mov [eax+30h] edi +
mov eax [ebx] +
add eax 3Ch +
push eax  +
mov ecx ebx +
call sub_1005E52  +
mov eax [ebp+arg_4] +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_101F13C  +
mov ecx [ecx+14h] +
mov [eax] ecx +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebx  +
push esi  +
push edi  +
push 1  +
mov ebx 0B84h +
push ebx  +
mov esi ecx +
call sub_1002C0D  +
mov ecx [esi+38h] +
push offset dword_104A2B0  +
call sub_10065C0  +
mov edi eax +
test edi edi +
jl loc_1005ECD  +
mov ecx [esi+40h] +
push offset dword_104A2A8  +
call sub_1005ED6  +
mov edi eax +
test edi edi +
jl loc_1005ECD  +
mov ecx [esi+3Ch] +
push offset dword_104A2AC  +
call sub_1005ED6  +
mov edi eax +
test edi edi +
jl loc_1005ECD  +
push 2  +
push ebx  +
call sub_1002C0D  +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
retn 4  +
push 3  +
jmp loc_1005EBF  +
***
call sub_10015E0  +
mov esi ecx +
xor ebx ebx +
mov [ebp-20h] ebx +
mov [ebp-1Ch] ebx +
mov [ebp-18h] ebx +
mov [ebp-4] ebx +
call sub_10037C7  +
push 0FFFFFFFFh  +
lea eax [ebp-20h] +
push eax  +
push ecx  +
lea eax [esi+1Ch] +
mov ecx esp +
mov [ebp-10h] esp +
push eax  +
call sub_10069A9  +
push ecx  +
lea eax [esi+18h] +
mov ecx esp +
mov [ebp-14h] esp +
push eax  +
mov byte ptr [ebp-4] 1 +
call sub_10069A9  +
mov [ebp-4] bl +
call sub_10074CD  +
cmp eax ebx +
jl loc_1005F38  +
push dword ptr [ebp+8]  +
mov ecx esi +
push dword ptr [ebp-20h]  +
call sub_1005F51  +
lea ecx [ebp-20h] +
mov esi eax +
call sub_1004887  +
mov eax esi +
call sub_10015C0  +
retn 4  +
***
call sub_1002A3A  +
mov eax [ebp+0Ch] +
xor ebx ebx +
mov [ebp-218h] ecx +
mov ecx [ebp+8] +
mov [ebp-224h] ebx +
mov [ebp-220h] ebx +
mov [ebp-21Ch] ebx +
mov eax [eax] +
mov esi 2001Fh +
push esi  +
push eax  +
push ecx  +
lea ecx [ebp-224h] +
mov [ebp-4] ebx +
call sub_100484B  +
cmp eax ebx +
jnz loc_1020CEA  +
mov [ebp-214h] ebx +
lea eax [ebp-284h] +
push eax  +
push ebx  +
push ebx  +
push ebx  +
lea eax [ebp-234h] +
push eax  +
lea eax [ebp-210h] +
push eax  +
push dword ptr [ebp-214h]  +
mov dword ptr [ebp-234h] 100h +
push dword ptr [ebp-224h]  +
call ds:RegEnumKeyExW  +
cmp eax 103h +
jz loc_10060A9  +
cmp eax ebx +
jnz loc_1020D11  +
mov [ebp-230h] ebx +
mov [ebp-22Ch] ebx +
mov [ebp-228h] ebx +
push esi  +
lea eax [ebp-210h] +
push eax  +
push dword ptr [ebp-224h]  +
lea ecx [ebp-230h] +
mov byte ptr [ebp-4] 1 +
call sub_100484B  +
cmp eax ebx +
jnz loc_1020D24  +
lea ecx [ebp-27Ch] +
call sub_10051F0  +
lea ecx [ebp-254h] +
call sub_1005416  +
lea eax [ebp-254h] +
push eax  +
lea eax [ebp-230h] +
push eax  +
lea ecx [ebp-27Ch] +
mov byte ptr [ebp-4] 3 +
call sub_1005859  +
mov edi eax +
cmp edi ebx +
jl loc_1020D34  +
mov ecx [ebp-218h] +
lea eax [ebp-27Ch] +
push eax  +
lea eax [ebp-254h] +
push eax  +
call sub_10056A3  +
inc dword ptr [ebp-214h]  +
lea ecx [ebp-254h] +
call sub_1003B4C  +
lea ecx [ebp-27Ch] +
call sub_1004292  +
lea ecx [ebp-230h] +
mov [ebp-4] bl +
call sub_1004887  +
jmp loc_1005FA6  +
xor edi edi +
lea eax [ebp-218h] +
push eax  +
push lpValueName  +
lea ecx [ebp-224h] +
call sub_100480C  +
test eax eax +
jnz loc_10060D9  +
mov eax [ebp-214h] +
cmp [ebp-218h] eax +
jnz loc_1020D5A  +
lea ecx [ebp-224h] +
call sub_1004887  +
mov eax edi +
call sub_1002A77  +
retn 8  +
***
cmp edi ebx +
jge loc_10060AB  +
jmp loc_10060D9  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_100613C  +
mov edx [eax+38h] +
push esi  +
mov esi [edx+34h] +
mov [eax+38h] esi +
mov esi [edx+34h] +
cmp esi [ecx+14h] +
jnz loc_10131E1  +
mov esi [eax+3Ch] +
mov [edx+3Ch] esi +
mov esi [eax+3Ch] +
cmp esi [ecx+14h] +
jz loc_1006140  +
cmp eax [esi+34h] +
jz loc_101F156  +
mov [esi+38h] edx +
mov [edx+34h] eax +
mov [eax+3Ch] edx +
pop esi  +
pop ebp  +
retn 4  +
mov [ecx] edx +
jmp loc_1006135  +
***
call sub_10015E0  +
mov edi ecx +
mov [ebp-10h] edi +
xor ebx ebx +
mov esi 0F001Fh +
cmp [edi+54h] ebx +
jnz loc_1006286  +
lea ecx [ebp-38h] +
call sub_1006B56  +
lea eax [ebp-0ACh] +
push eax  +
mov [ebp-4] ebx +
call sub_10072B8  +
push ebx  +
push esi  +
push eax  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 1 +
call sub_1006313  +
lea ecx [ebp-0ACh] +
mov [ebp-4] bl +
call sub_1005D67  +
lea eax [ebp-0ACh] +
push eax  +
call sub_1005214  +
push ebx  +
push esi  +
push eax  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 2 +
call sub_1006313  +
lea ecx [ebp-0ACh] +
mov [ebp-4] bl +
call sub_1005D67  +
lea eax [ebp-0ACh] +
push eax  +
call sub_100523E  +
push ebx  +
push esi  +
push eax  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 3 +
call sub_1006313  +
lea ecx [ebp-0ACh] +
mov [ebp-4] bl +
call sub_1005D67  +
lea eax [ebp-0ACh] +
push eax  +
call sub_1007173  +
push ebx  +
push 4  +
push eax  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 4 +
call sub_1006313  +
lea ecx [ebp-0ACh] +
call sub_1005D67  +
mov edi offset off_10069C0 +
mov [ebp-18h] edi +
mov [ebp-14h] ebx +
push ebx  +
lea eax [ebp-38h] +
push eax  +
lea ecx [ebp-18h] +
mov byte ptr [ebp-4] 5 +
call sub_1006DF1  +
push ebx  +
lea eax [ebp-18h] +
push eax  +
lea ecx [ebp-4Ch] +
call sub_1007046  +
push offset Name  +
push 4  +
push ebx  +
push 4  +
lea eax [ebp-4Ch] +
push eax  +
push 0FFFFFFFFh  +
call ds:CreateFileMappingW  +
mov ecx [ebp-10h] +
push eax  +
add ecx 50h +
call sub_1002CC0  +
lea ecx [ebp-40h] +
mov [ebp-40h] edi +
call sub_10069CD  +
lea ecx [ebp-18h] +
mov [ebp-18h] edi +
call sub_10069CD  +
lea ecx [ebp-38h] +
call sub_1007488  +
mov edi [ebp-10h] +
mov [ebp-10h] ebx +
cmp [edi+54h] ebx +
jz loc_101FA42  +
cmp [edi+4Ch] ebx +
jnz loc_10062B1  +
mov eax [edi+54h] +
push 4  +
push ebx  +
push ebx  +
push esi  +
push eax  +
call ds:MapViewOfFile  +
mov [edi+4Ch] eax +
cmp eax ebx +
jz loc_101FA5F  +
cmp [ebp-10h] ebx +
jl loc_10062BE  +
mov eax [edi+4Ch] +
mov ecx [edi+48h] +
mov [eax] ecx +
mov eax [ebp-10h] +
call sub_10015C0  +
retn   +
***
cmp eax ebx +
mov [ebp-10h] eax +
jl loc_10062BE  +
jmp loc_1006292  +
***
call sub_1001862  +
mov esi ecx +
mov [ebp-18h] esi +
mov ecx [ebp+8] +
call sub_100517D  +
test al al +
jz loc_1006398  +
mov al [esi+8] +
xor ebx ebx +
cmp al bl +
jnz loc_101F97B  +
mov [ebp-14h] ebx +
mov [ebp-4] ebx +
push 74h  +
mov byte ptr [ebp-4] 1 +
call off_104B7F4  +
mov ecx eax +
mov [ebp-1Ch] ecx +
mov byte ptr [ebp-4] 2 +
cmp ecx ebx +
jz loc_10063A0  +
push 1  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call sub_1005CD0  +
mov [ebp-14h] eax +
mov [ebp-4] ebx +
cmp [ebp-14h] ebx +
jz loc_101F99E  +
lea eax [ebp-14h] +
push eax  +
lea ecx [esi+10h] +
call sub_10063A9  +
mov ecx esi +
call sub_10065A6  +
lea ecx [ebp-14h] +
call sub_1005CB3  +
mov al 1 +
call sub_10015C0  +
retn 0Ch  +
xor eax eax +
jmp loc_100636C  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
push edi  +
mov edi [esi+4] +
cmp edi [esi+8] +
jb loc_10063CB  +
lea eax [edi+1] +
push eax  +
call sub_10063EE  +
test al al +
jz loc_101F253  +
mov eax [esi] +
lea eax [eax+edi*4] +
test eax eax +
jz loc_10063DE  +
mov ecx [ebp+arg_0] +
mov edx [ecx] +
and dword ptr [ecx] 0 +
mov [eax] edx +
inc dword ptr [esi+4]  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi ecx +
mov edx [esi+8] +
push edi  +
mov edi [ebp+arg_0] +
cmp edi edx +
jbe loc_1006452  +
cmp dword ptr [esi] 0 +
mov eax [esi+0Ch] +
jz loc_100645B  +
test eax eax +
jnz loc_100641C  +
mov eax [esi+4] +
shr eax 3 +
cmp eax 4 +
jnb loc_100647D  +
push 4  +
pop eax  +
add eax edx +
mov ebx eax +
cmp edi eax +
jnb loc_101EF56  +
push 4  +
push ebx  +
call ds:calloc  +
mov edi eax +
pop ecx  +
pop ecx  +
test edi edi +
jz loc_1006479  +
push dword ptr [esi+4]  +
push dword ptr [esi]  +
push edi  +
call sub_10050DB  +
push dword ptr [esi]  +
call ds:__imp_free  +
pop ecx  +
mov [esi] edi +
mov [esi+8] ebx +
mov al 1 +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
cmp eax edi +
ja loc_101EF48  +
push 4  +
push edi  +
call ds:calloc  +
pop ecx  +
pop ecx  +
mov [esi] eax +
test eax eax +
jz loc_1006479  +
mov [esi+8] edi +
jmp loc_1006452  +
xor al al +
jmp loc_1006454  +
mov ecx 400h +
cmp eax ecx +
ja loc_101EF4F  +
jmp loc_100641C  +
***
call sub_10015E0  +
mov esi ecx +
xor ebx ebx +
cmp [esi+8] ebx +
jz loc_10064FD  +
mov edi [esi+8] +
mov [ebp-10h] edi +
mov [ebp-14h] edi +
mov [ebp-4] ebx +
cmp edi ebx +
jz loc_10064C3  +
push dword ptr [ebp+0Ch]  +
mov ecx edi +
push dword ptr [ebp+8]  +
call sub_100761C  +
mov eax [esi+8] +
mov eax [eax+34h] +
mov [esi+8] eax +
lea eax [edi+34h] +
push eax  +
mov ecx esi +
mov [edi+30h] ebx +
call sub_1005E52  +
lea eax [edi+38h] +
push eax  +
mov ecx esi +
call sub_1005E52  +
lea eax [edi+3Ch] +
push eax  +
mov ecx esi +
call sub_1005E52  +
inc dword ptr [esi+4]  +
mov eax edi +
call sub_10015C0  +
retn 8  +
push 40h  +
pop edi  +
cmp [esi+14h] ebx +
jnz loc_100654A  +
push edi  +
call ds:malloc  +
pop ecx  +
mov [esi+14h] eax +
cmp eax ebx +
jz loc_10205AB  +
push edi  +
push ebx  +
push eax  +
call memset  +
mov eax [esi+14h] +
mov dword ptr [eax+30h] 1 +
mov eax [esi+14h] +
mov [eax+38h] eax +
mov eax [esi+14h] +
mov ecx [eax+38h] +
mov [eax+34h] ecx +
mov eax [esi+14h] +
mov ecx [eax+34h] +
mov [eax+3Ch] ecx +
mov eax [esi+14h] +
add esp 0Ch +
mov [esi] eax +
push edi  +
push dword ptr [esi+10h]  +
lea eax [esi+0Ch] +
push eax  +
call sub_100519D  +
cmp eax ebx +
jz loc_10205AB  +
mov ecx [esi+10h] +
mov edx ecx +
shl edx 6 +
dec ecx  +
cmp ecx ebx +
lea eax [edx+eax-3Ch] +
jge loc_1006575  +
jmp loc_10064A6  +
mov edx [esi+8] +
mov [eax+34h] edx +
mov [esi+8] eax +
sub eax edi +
dec ecx  +
jns loc_1006575  +
jmp loc_10064A6  +
***
mov edi edi +
mov edi edi +
push esi  +
mov esi ecx +
push dword ptr [esi+4]  +
call ds:__imp_free  +
and dword ptr [esi+4] 0 +
pop ecx  +
pop esi  +
retn   +
***
call sub_10015E0  +
mov esi ecx +
xor ebx ebx +
mov [ebp-20h] ebx +
mov [ebp-1Ch] ebx +
mov [ebp-18h] ebx +
mov [ebp-4] ebx +
call sub_1004376  +
push 0FFFFFFFFh  +
lea eax [ebp-20h] +
push eax  +
push ecx  +
lea eax [esi+1Ch] +
mov ecx esp +
mov [ebp-10h] esp +
push eax  +
call sub_10069A9  +
push ecx  +
lea eax [esi+18h] +
mov ecx esp +
mov [ebp-14h] esp +
push eax  +
mov byte ptr [ebp-4] 1 +
call sub_10069A9  +
mov [ebp-4] bl +
call sub_10074CD  +
cmp eax ebx +
jl loc_1006622  +
push dword ptr [ebp+8]  +
mov ecx esi +
push dword ptr [ebp-20h]  +
call sub_100663B  +
lea ecx [ebp-20h] +
mov esi eax +
call sub_1004887  +
mov eax esi +
call sub_10015C0  +
retn 4  +
***
call sub_1002A3A  +
mov eax [ebp+0Ch] +
xor ebx ebx +
mov [ebp-21Ch] ecx +
mov ecx [ebp+8] +
mov [ebp-228h] ebx +
mov [ebp-224h] ebx +
mov [ebp-220h] ebx +
mov eax [eax] +
mov esi 2001Fh +
push esi  +
push eax  +
push ecx  +
lea ecx [ebp-228h] +
mov [ebp-4] ebx +
call sub_100484B  +
cmp eax ebx +
jnz loc_1020710  +
mov [ebp-214h] ebx +
lea eax [ebp-240h] +
push eax  +
push ebx  +
push ebx  +
push ebx  +
lea eax [ebp-238h] +
push eax  +
lea eax [ebp-210h] +
push eax  +
push dword ptr [ebp-214h]  +
mov dword ptr [ebp-238h] 100h +
push dword ptr [ebp-228h]  +
call ds:RegEnumKeyExW  +
cmp eax 103h +
jz loc_100679E  +
cmp eax ebx +
jnz loc_1020737  +
mov [ebp-234h] ebx +
mov [ebp-230h] ebx +
mov [ebp-22Ch] ebx +
push esi  +
lea eax [ebp-210h] +
push eax  +
push dword ptr [ebp-228h]  +
lea ecx [ebp-234h] +
mov byte ptr [ebp-4] 1 +
call sub_100484B  +
cmp eax ebx +
jnz loc_102074A  +
lea ecx [ebp-26Ch] +
call sub_1004F6D  +
push offset dword_104A104  +
lea ecx [ebp-218h] +
mov byte ptr [ebp-4] 2 +
call sub_1003060  +
lea eax [ebp-218h] +
push eax  +
lea eax [ebp-234h] +
push eax  +
lea ecx [ebp-26Ch] +
mov byte ptr [ebp-4] 3 +
call sub_1006D36  +
mov edi eax +
cmp edi ebx +
jl loc_102075A  +
mov ecx [ebp-21Ch] +
lea eax [ebp-26Ch] +
push eax  +
push dword ptr [ebp-218h]  +
call sub_10070D3  +
mov ecx [ebp-218h] +
inc dword ptr [ebp-214h]  +
add ecx 0FFFFFFF0h +
call sub_1002990  +
lea ecx [ebp-26Ch] +
call sub_1002A01  +
lea ecx [ebp-234h] +
mov [ebp-4] bl +
call sub_1004887  +
jmp loc_1006690  +
xor edi edi +
lea eax [ebp-21Ch] +
push eax  +
push lpValueName  +
lea ecx [ebp-228h] +
call sub_100480C  +
test eax eax +
jnz loc_10067CE  +
mov eax [ebp-214h] +
cmp [ebp-21Ch] eax +
jnz loc_1020783  +
lea ecx [ebp-228h] +
call sub_1004887  +
mov eax edi +
call sub_1002A77  +
retn 8  +
***
cmp edi ebx +
jge loc_10067A0  +
jmp loc_10067CE  +
***
push ebp  +
mov ebp esp +
sub esp 18h +
mov edx [ecx+14h] +
and dword ptr [ebp-10h] 0 +
push esi  +
xor esi esi +
push 4  +
pop eax  +
inc esi  +
mov [ebp-18h] ecx +
mov [ebp-14h] edx +
cmp edx eax +
ja loc_101F93B  +
push ebx  +
push edi  +
lea ebx [esi-1] +
mov [ebp-8] ebx +
cmp ebx [ebp-14h] +
jnb loc_1006886  +
lea edi [ecx+10h] +
sub ebx esi +
push dword ptr [ebp-8]  +
mov ecx edi +
call sub_10068B5  +
push eax  +
lea ecx [ebp-10h] +
call sub_100532F  +
mov eax [ebp-8] +
mov [ebp-4] eax +
cmp eax esi +
jb loc_1006862  +
mov [ebp-0Ch] ebx +
push dword ptr [ebp-0Ch]  +
mov ecx edi +
call sub_10068B5  +
push dword ptr [ebp-10h]  +
mov eax [eax] +
push eax  +
call sub_1005298  +
cmp eax 0FFFFFFFFh +
jz loc_101F94B  +
lea eax [ebp-10h] +
push eax  +
push dword ptr [ebp-4]  +
mov ecx edi +
call sub_10068B5  +
mov ecx eax +
call sub_100532F  +
inc dword ptr [ebp-8]  +
mov eax [ebp-8] +
inc ebx  +
cmp eax [ebp-14h] +
jb loc_1006824  +
mov ecx [ebp-18h] +
mov eax esi +
push 3  +
xor edx edx +
pop esi  +
div  esi +
mov esi eax +
test esi esi +
ja loc_1006814  +
pop edi  +
pop ebx  +
lea ecx [ebp-10h] +
call sub_1005CB3  +
pop esi  +
leave   +
retn   +
***
test esi esi +
ja loc_1006812  +
jmp loc_100689B  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
cmp eax [ecx+4] +
jnb loc_101F15E  +
mov ecx [ecx] +
lea eax [ecx+eax*4] +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
lea ecx [esi+4] +
mov dword ptr [esi] offset off_1003620 +
call sub_1006909  +
mov eax [ebp+arg_4] +
and dword ptr [esi+6Ch] 0 +
mov [esi+64h] eax +
mov al [ebp+arg_8] +
mov [esi+68h] al +
mov eax esi +
pop esi  +
pop ebp  +
retn 0Ch  +
***
call sub_10015E0  +
mov esi ecx +
mov [ebp-10h] esi +
mov edi [ebp+8] +
mov dword ptr [esi] offset off_1005DA0 +
mov al [edi+48h] +
mov [esi+48h] al +
mov eax [edi+4Ch] +
mov [esi+4Ch] eax +
lea eax [edi+50h] +
push eax  +
lea ecx [esi+50h] +
call sub_10069A9  +
and dword ptr [ebp-4] 0 +
lea eax [edi+54h] +
push eax  +
lea ecx [esi+54h] +
call sub_10069A9  +
lea eax [edi+58h] +
push eax  +
lea ecx [esi+58h] +
mov byte ptr [ebp-4] 1 +
call sub_10069A9  +
lea ecx [esi+5Ch] +
call sub_10033C0  +
cmp byte ptr [edi+48h] 0 +
mov byte ptr [ebp-4] 3 +
jz loc_100699A  +
mov ecx edi +
call sub_100517D  +
test al al +
jz loc_101F7E1  +
add edi 4 +
push edi  +
call ds:GetLengthSid  +
push edi  +
lea ecx [esi+4] +
push ecx  +
push eax  +
call ds:CopySid  +
test eax eax +
jz loc_101F7EB  +
mov eax esi +
call sub_10015C0  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_1003F3F  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1Ch +
push esi  +
mov esi ecx +
cmp dword ptr [esi+4] 0 +
jz loc_1006A78  +
push edi  +
lea eax [ebp+dwRevision] +
push eax  +
call sub_1006A80  +
mov edi ds:__imp_free +
test al al +
jz loc_1006A6D  +
test [ebp+dwRevision] 8000h +
jnz loc_1006A6D  +
lea eax [ebp+bSaclDefaulted] +
push eax  +
lea eax [ebp+pOwner] +
push eax  +
push dword ptr [esi+4]  +
call ds:GetSecurityDescriptorOwner  +
push [ebp+pOwner]  +
call edi  +
pop ecx  +
lea eax [ebp+bSaclDefaulted] +
push eax  +
lea eax [ebp+pGroup] +
push eax  +
push dword ptr [esi+4]  +
call ds:GetSecurityDescriptorGroup  +
push [ebp+pGroup]  +
call edi  +
pop ecx  +
lea eax [ebp+bSaclDefaulted] +
push eax  +
lea eax [ebp+pDacl] +
push eax  +
lea eax [ebp+bSaclPresent] +
push eax  +
push dword ptr [esi+4]  +
call ds:GetSecurityDescriptorDacl  +
cmp [ebp+bSaclPresent] 0 +
jz loc_1006A4E  +
push [ebp+pDacl]  +
call edi  +
pop ecx  +
lea eax [ebp+bSaclDefaulted] +
push eax  +
lea eax [ebp+pSacl] +
push eax  +
lea eax [ebp+bSaclPresent] +
push eax  +
push dword ptr [esi+4]  +
call ds:GetSecurityDescriptorSacl  +
cmp [ebp+bSaclPresent] 0 +
jnz loc_101F06F  +
push dword ptr [esi+4]  +
call edi  +
and dword ptr [esi+4] 0 +
pop ecx  +
pop edi  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+dwRevision] +
test edx edx +
jz loc_1006AAE  +
xor eax eax +
mov [edx] ax +
mov eax [ecx+4] +
test eax eax +
jz loc_1006AAE  +
lea ecx [ebp+dwRevision] +
push ecx  +
push edx  +
push eax  +
call ds:GetSecurityDescriptorControl  +
test eax eax +
jz loc_1006AAE  +
mov al 1 +
pop ebp  +
retn 4  +
xor al al +
jmp loc_1006AAA  +
***
mov edi edi +
push esi  +
mov esi ecx +
cmp dword ptr [esi+6Ch] 0 +
jnz loc_1006B26  +
mov eax [esi] +
push ebx  +
push edi  +
call dword ptr [eax+8]  +
mov ebx eax +
push ebx  +
call ds:malloc  +
mov edi eax +
pop ecx  +
test edi edi +
jz loc_101F7F3  +
push ebx  +
push 0  +
push edi  +
call memset  +
mov [edi+2] bx +
mov al [esi+68h] +
mov [edi+1] al +
mov eax [esi] +
add esp 0Ch +
mov ecx esi +
call dword ptr [eax+0Ch]  +
mov [edi] al +
mov eax [esi+64h] +
mov [edi+4] eax +
lea eax [esi+8] +
push eax  +
call ds:GetLengthSid  +
push eax  +
lea eax [esi+8] +
push eax  +
add ebx 0FFFFFFF8h +
lea eax [edi+8] +
push ebx  +
push eax  +
call sub_1006B30  +
add esp 10h +
mov [esi+6Ch] edi +
pop edi  +
pop ebx  +
mov eax [esi+6Ch] +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call memcpy_s  +
add esp 10h +
push eax  +
call sub_1003CD3  +
pop ebp  +
retn   +
***
mov eax ecx +
xor ecx ecx +
mov [eax+4] ecx +
mov [eax+8] cl +
mov dword ptr [eax+0Ch] 2 +
mov dword ptr [eax] offset off_1006B7C +
mov [eax+10h] ecx +
mov [eax+14h] ecx +
mov [eax+18h] ecx +
mov [eax+1Ch] ecx +
retn   +
***
mov eax [ecx+14h] +
retn   +
***
call sub_1006BAC  +
jmp loc_10032E5  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov ecx [esi] +
sub ecx 10h +
xor eax eax +
push edi  +
mov edi [ecx] +
cmp [ecx+4] eax +
jnz loc_101C293  +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1003904  +
test byte ptr [esi+1BAh] 2 +
jz loc_101C546  +
push [ebp+arg_0]  +
mov ecx esi +
call sub_1006BFD  +
mov eax [ebp+arg_0] +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1003904  +
movzx eax word ptr [esi+1A8h] +
push eax  +
movzx eax word ptr [esi+1A6h] +
push eax  +
push [ebp+arg_0]  +
lea ecx [esi+10h] +
call sub_10034B1  +
mov eax [ebp+arg_0] +
pop esi  +
pop ebp  +
retn 4  +
***
movzx edi word ptr [esi+1A6h] +
movzx ecx word ptr [esi+1B2h] +
movzx eax di +
lea edx [eax+2] +
cmp ecx edx +
jl loc_1006CE3  +
mov ecx [esi+14h] +
lea ebx [ecx+eax*2] +
movzx eax word ptr [ebx] +
push eax  +
call sub_1003A20  +
test eax eax +
jz loc_1006CE3  +
movzx eax word ptr [ebx+2] +
push eax  +
call sub_1003A20  +
test eax eax +
jz loc_1006CE3  +
lea eax [edi+2] +
movzx ebx ax +
lea edi [esi+10h] +
push ebx  +
mov ecx edi +
mov [esi+1A6h] ax +
call sub_1006CF1  +
mov [ebp+var_8] eax +
cmp eax 0FFFFFFFFh +
jz loc_101DBD1  +
movzx ecx word ptr [esi+1B2h] +
cmp eax ecx +
jg loc_101DBD1  +
push ebx  +
push 3Ah  +
mov ecx edi +
call sub_1003D62  +
cmp eax 0FFFFFFFFh +
jnz loc_101DBE0  +
mov ebx [ebp+var_8] +
sub bx [esi+1A6h] +
mov ax word ptr [ebp+var_8] +
mov [esi+1A8h] bx +
mov [esi+1AEh] ax +
mov ax [esi+1AEh] +
mov [esi+1BEh] ax +
jmp loc_10039FB  +
mov [esi+1AEh] di +
jmp loc_1006CD0  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push ebx  +
push esi  +
mov esi [ecx+0Ch] +
mov ebx eax +
cmp eax esi +
jnb loc_1006D20  +
mov ecx [ecx+4] +
push edi  +
lea edi [ecx+eax*2] +
movzx eax word ptr [edi] +
push eax  +
call sub_1003A20  +
test eax eax +
jnz loc_1006D1F  +
inc ebx  +
inc edi  +
inc edi  +
cmp ebx esi +
jb loc_1006D0B  +
pop edi  +
cmp ebx esi +
jnb loc_1006D2C  +
mov eax ebx +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
or eax 0FFFFFFFFh +
jmp loc_1006D26  +
***
call sub_1001862  +
mov edi ecx +
mov ebx [ebp+8] +
mov eax [ebx] +
lea ecx [ebp-14h] +
push ecx  +
push offset aUrl  +
xor esi esi +
push eax  +
mov [ebp-14h] esi +
call sub_1004EDC  +
mov [ebp+8] eax +
test eax eax +
jl loc_1006D98  +
lea eax [edi+14h] +
push eax  +
push offset aProvidesnotifi  +
mov ecx ebx +
call sub_100480C  +
mov esi eax +
mov [ebp-18h] esi +
test esi esi +
jnz loc_1006D98  +
push dword ptr [ebp-14h]  +
mov ecx [ebp+0Ch] +
and [ebp-4] eax +
call sub_1003231  +
push esi  +
lea ecx [edi+4] +
call sub_1003231  +
or dword ptr [ebp-4] 0FFFFFFFFh +
cmp dword ptr [ebp-14h] 0 +
jz loc_1006DA7  +
push dword ptr [ebp-14h]  +
call off_104B7F0  +
cmp dword ptr [ebp+8] 0 +
jnz loc_1006DB5  +
test esi esi +
jnz loc_101F028  +
mov eax [ebp+8] +
call sub_10015C0  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push ebx  +
push esi  +
push edi  +
mov ebx ecx +
xor edi edi +
mov [ebp+var_8] ebx +
cmp [ebx+4] edi +
jnz loc_101F1E7  +
mov eax [ebx+4] +
mov [ebp+pDacl] edi +
cmp eax edi +
jnz loc_101F1F1  +
mov ecx ebx +
call sub_10050AA  +
mov esi [ebp+arg_0] +
cmp byte ptr [esi+8] 0 +
jnz loc_1006E74  +
mov ecx esi +
call sub_100508F  +
test al al +
jnz loc_1006E66  +
mov ecx esi +
call sub_1006EA5  +
mov ebx eax +
push ebx  +
call ds:malloc  +
mov edi eax +
pop ecx  +
test edi edi +
jz loc_101F211  +
push ebx  +
mov ecx esi +
call sub_1006EE1  +
push eax  +
push ebx  +
push edi  +
call sub_1006B30  +
mov ebx [ebp+var_8] +
add esp 10h +
cmp byte ptr [esi+8] 0 +
jnz loc_1006E74  +
test edi edi +
jz loc_101F21B  +
xor eax eax +
inc eax  +
movzx ecx [ebp+arg_4] +
push ecx  +
push edi  +
push eax  +
push dword ptr [ebx+4]  +
call ds:SetSecurityDescriptorDacl  +
test eax eax +
jz loc_101F222  +
push [ebp+pDacl]  +
call ds:__imp_free  +
pop ecx  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push esi  +
mov esi ecx +
call sub_1006EE1  +
cmp byte ptr [esi+8] 0 +
pop esi  +
jnz loc_101F1C0  +
push 2  +
push 0Ch  +
lea ecx [ebp+pAclInformation] +
push ecx  +
push eax  +
call ds:GetAclInformation  +
test eax eax +
jz loc_101F1C4  +
mov eax [ebp+var_8] +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
push edi  +
mov esi ecx +
xor edi edi +
cmp [esi+4] edi +
jnz loc_1006F92  +
cmp byte ptr [esi+8] 0 +
jnz loc_1006F92  +
mov eax [esi] +
push ebx  +
push 8  +
pop ebx  +
call dword ptr [eax+4]  +
mov [ebp+var_4] eax +
test eax eax +
jbe loc_1006F2B  +
mov eax [esi] +
push edi  +
mov ecx esi +
call dword ptr [eax+10h]  +
test eax eax +
jz loc_1006F25  +
mov edx [eax] +
mov ecx eax +
call dword ptr [edx+8]  +
add ebx eax +
inc edi  +
cmp edi [ebp+var_4] +
jb loc_1006F10  +
push ebx  +
call ds:malloc  +
pop ecx  +
mov [esi+4] eax +
test eax eax +
jz loc_101F1A3  +
push dword ptr [esi+0Ch]  +
push ebx  +
push eax  +
call ds:InitializeAcl  +
test eax eax +
jz loc_1006F99  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+14h]  +
xor ebx ebx +
cmp [ebp+var_4] ebx +
jbe loc_1006F91  +
mov eax [esi] +
push ebx  +
mov ecx esi +
call dword ptr [eax+10h]  +
mov edi eax +
test edi edi +
jz loc_1006F99  +
mov eax [edi] +
mov ecx edi +
call dword ptr [eax+8]  +
push eax  +
mov eax [edi] +
mov ecx edi +
call dword ptr [eax+4]  +
push eax  +
push 0FFFFFFFFh  +
push dword ptr [esi+0Ch]  +
push dword ptr [esi+4]  +
call ds:AddAce  +
test eax eax +
jz loc_1006F99  +
inc ebx  +
cmp ebx [ebp+var_4] +
jb loc_1006F5B  +
pop ebx  +
mov eax [esi+4] +
pop edi  +
pop esi  +
leave   +
retn   +
call sub_100F56E  +
jmp loc_101F1AD  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
mov esi ecx +
and dword ptr [esi+4] 0 +
mov dword ptr [esi] offset off_10069C0 +
mov eax [eax+4] +
test eax eax +
jz loc_1006FCA  +
push eax  +
call sub_1006FD6  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push esi  +
push edi  +
mov edi [ebp+dwBufferLength] +
push edi  +
mov esi ecx +
call ds:GetSecurityDescriptorLength  +
push eax  +
mov [ebp+dwBufferLength] eax +
call ds:malloc  +
pop ecx  +
mov [esi+4] eax +
test eax eax +
jz loc_101F09C  +
lea eax [ebp+dwRevision] +
push eax  +
lea eax [ebp+pControl] +
push eax  +
push edi  +
call ds:GetSecurityDescriptorControl  +
test eax eax +
jz loc_101F0A6  +
test dword ptr [ebp+pControl] 8000h +
jnz loc_101F0BE  +
lea eax [ebp+dwBufferLength] +
push eax  +
push dword ptr [esi+4]  +
push edi  +
call ds:MakeSelfRelativeSD  +
test eax eax +
jz loc_101F0A6  +
pop edi  +
pop esi  +
leave   +
retn 4  +
***
call sub_10015E0  +
mov esi ecx +
mov [ebp-10h] esi +
push dword ptr [ebp+8]  +
lea edi [esi+0Ch] +
mov ecx edi +
call sub_1006FA8  +
push dword ptr [ebp+0Ch]  +
and dword ptr [ebp-4] 0 +
push edi  +
mov ecx esi +
call sub_1007082  +
mov eax esi +
call sub_10015C0  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
lea ecx [esi+0Ch] +
call sub_10070B2  +
mov eax [esi+10h] +
mov [esi+4] eax +
movzx eax [ebp+arg_4] +
mov dword ptr [esi] 0Ch +
mov [esi+8] eax +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov esi ecx +
cmp esi edi +
jnz loc_101F1CA  +
pop edi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
push [ebp+arg_0]  +
mov edi ecx +
call sub_1007106  +
push [ebp+arg_4]  +
mov esi eax +
test esi esi +
jnz loc_10179CE  +
push [ebp+arg_0]  +
mov ecx edi +
call sub_1005DC1  +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov edi ecx +
mov esi [edi] +
xor ebx ebx +
cmp esi [edi+14h] +
jz loc_1007149  +
test ebx ebx +
jnz sub_101663D  +
push dword ptr [esi]  +
push [ebp+arg_0]  +
call sub_1007157  +
test eax eax +
jz loc_1016636  +
jl loc_1017607  +
mov esi [esi+38h] +
cmp esi [edi+14h] +
jnz loc_1007119  +
test ebx ebx +
jnz sub_101663D  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call ds:__imp__wcsicmp  +
pop ecx  +
pop ecx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
push 0  +
push 1  +
push offset dword_1007198  +
push [ebp+arg_0]  +
call sub_10071A3  +
mov eax [ebp+arg_0] +
add esp 10h +
leave   +
retn 4  +
***
call sub_1002A3A  +
mov esi [ebp+8] +
mov edi [ebp+0Ch] +
lea ecx [esi+50h] +
mov [ebp-5Ch] esi +
mov dword ptr [esi] offset off_1005DA0 +
mov byte ptr [esi+48h] 0 +
mov dword ptr [esi+4Ch] 7 +
call sub_10033C0  +
and dword ptr [ebp-4] 0 +
lea ecx [esi+54h] +
call sub_10033C0  +
lea ecx [esi+58h] +
call sub_10033C0  +
lea ecx [esi+5Ch] +
call sub_10033C0  +
mov ebx [ebp+10h] +
mov byte ptr [ebp-4] 3 +
test bl bl +
jz loc_101F504  +
push ebx  +
call ds:GetSidLengthRequired  +
cmp eax 44h +
ja loc_101F504  +
push ebx  +
push edi  +
lea eax [ebp-54h] +
push eax  +
call ds:InitializeSid  +
test eax eax +
jz loc_101F4FF  +
and dword ptr [ebp-58h] 0 +
movzx ebx bl +
test ebx ebx +
jbe loc_100724A  +
lea edi [ebp+10h] +
push dword ptr [ebp-58h]  +
lea eax [ebp-54h] +
push eax  +
add edi 4 +
call ds:GetSidSubAuthority  +
inc dword ptr [ebp-58h]  +
mov ecx [edi] +
mov [eax] ecx +
cmp [ebp-58h] ebx +
jb loc_100722E  +
lea eax [ebp-54h] +
push eax  +
mov ecx esi +
call sub_1007269  +
mov dword ptr [esi+4Ch] 8 +
mov eax esi +
call sub_1002A77  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+pSourceSid]  +
mov esi ecx +
call ds:IsValidSid  +
test eax eax +
jz loc_101F18D  +
push [ebp+pSourceSid]  +
call ds:GetLengthSid  +
cmp eax 44h +
ja loc_101F18D  +
push [ebp+pSourceSid]  +
lea ecx [esi+4] +
push ecx  +
push eax  +
mov byte ptr [esi+48h] 1 +
call ds:CopySid  +
test eax eax +
jz loc_101F197  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
push 0  +
push 1  +
push offset dword_10072E0  +
push [ebp+arg_0]  +
call sub_10071A3  +
mov eax [ebp+arg_0] +
add esp 10h +
leave   +
retn 4  +
***
call sub_10015E0  +
mov ebx ecx +
push offset dword_104A104  +
lea ecx [ebp-14h] +
call sub_1003060  +
push dword ptr [ebx+14h]  +
lea eax [ebp-14h] +
push off_104B804  +
xor esi esi +
push eax  +
mov [ebp-4] esi +
call sub_10073A5  +
add esp 0Ch +
push 2001Fh  +
push dword ptr [ebp-14h]  +
lea ecx [ebp-20h] +
push 80000002h  +
mov [ebp-20h] esi +
mov [ebp-1Ch] esi +
mov [ebp-18h] esi +
call sub_100484B  +
mov edi 0FFFFh +
mov esi 80070000h +
test eax eax +
jg loc_101F9FA  +
mov [ebp-10h] eax +
test eax eax +
jl loc_100737C  +
add ebx 48h +
push ebx  +
push off_104B800  +
lea ecx [ebp-20h] +
call sub_100480C  +
test eax eax +
jg loc_101FA03  +
mov [ebp-10h] eax +
test eax eax +
jl loc_101FA0C  +
lea ecx [ebp-20h] +
call sub_1004887  +
lea ecx [ebp-20h] +
call sub_1004887  +
mov ecx [ebp-14h] +
add ecx 0FFFFFFF0h +
call sub_1002990  +
mov eax [ebp-10h] +
call sub_10015C0  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
lea eax [ebp+arg_8] +
push eax  +
push [ebp+arg_4]  +
call sub_10073C0  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
push esi  +
push edi  +
mov edi ecx +
jz loc_101F8A5  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call ds:_vscwprintf  +
mov esi eax +
pop ecx  +
pop ecx  +
cmp esi 0FFFFFFFFh +
jz loc_101F8AF  +
push esi  +
mov ecx edi +
call sub_1003122  +
push [ebp+arg_4]  +
lea ecx [esi+1] +
push [ebp+arg_0]  +
push ecx  +
push eax  +
call vswprintf_s  +
add esp 10h +
push esi  +
mov ecx edi +
call sub_10032EF  +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
cmp edi [esi+8] +
jbe loc_101F9CA  +
push edi  +
call sub_1003BE6  +
test al al +
jz loc_10037BC  +
mov eax [esi+4] +
mov ecx edi +
sub ecx eax +
push ecx  +
mov ecx [esi] +
lea eax [ecx+eax*8] +
push eax  +
call sub_1007457  +
mov [esi+4] edi +
jmp loc_10037BA  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
mov edi [ebp+arg_4] +
test edi edi +
jbe loc_100747E  +
push esi  +
mov esi [ebp+arg_0] +
test esi esi +
jz loc_1007477  +
mov ecx esi +
call sub_10033C0  +
and dword ptr [esi+4] 0 +
add esi 8 +
dec edi  +
jnz loc_1007468  +
pop esi  +
pop edi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_1006B7C +
call sub_100658D  +
lea ecx [esi+10h] +
call sub_10074B7  +
push dword ptr [esi+4]  +
mov dword ptr [esi] offset off_1003608 +
call ds:__imp_free  +
pop ecx  +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi] +
test eax eax +
jnz loc_101F770  +
pop esi  +
retn   +
***
call sub_1001862  +
mov esi [ebp-28h] +
xor edi edi +
cmp esi edi +
jl loc_1007583  +
jmp loc_100755C  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+phkResult] 0 +
cmp [ebp+dwDisposition] 0FFFFFFFFh +
push edi  +
mov edi ecx +
lea eax [ebp+dwDisposition] +
jnz loc_10174DF  +
push eax  +
lea eax [ebp+phkResult] +
push eax  +
push [ebp+lpSecurityAttributes]  +
push [ebp+samDesired]  +
push [ebp+dwOptions]  +
push [ebp+lpClass]  +
push 0  +
push [ebp+lpSubKey]  +
push [ebp+hKey]  +
call ds:RegCreateKeyExW  +
mov ecx [ebp+arg_1C] +
test ecx ecx +
jnz loc_101F169  +
test eax eax +
jnz loc_1007612  +
mov ecx edi +
call sub_1004887  +
mov ecx [ebp+phkResult] +
mov [edi] ecx +
pop edi  +
leave   +
retn 20h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_4]  +
mov esi ecx +
push [ebp+arg_0]  +
call sub_1007646  +
and dword ptr [esi+3Ch] 0 +
mov dword ptr [esi+30h] 1 +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
call sub_10015E0  +
mov esi ecx +
mov [ebp-10h] esi +
push dword ptr [ebp+8]  +
call sub_10035A2  +
push dword ptr [ebp+0Ch]  +
and dword ptr [ebp-4] 0 +
lea ecx [esi+4] +
call sub_100767D  +
mov eax esi +
call sub_10015C0  +
retn 8  +
***
call sub_10015E0  +
mov esi ecx +
mov [ebp-10h] esi +
and dword ptr [ebp-4] 0 +
lea ecx [esi+4] +
mov dword ptr [esi] offset off_10029A0 +
call sub_10033C0  +
lea ecx [esi+8] +
call sub_10033C0  +
lea ecx [esi+0Ch] +
call sub_10033C0  +
push dword ptr [ebp+8]  +
mov ecx esi +
mov byte ptr [ebp-4] 3 +
call sub_10076CD  +
mov eax esi +
call sub_10015C0  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov esi ecx +
lea eax [edi+4] +
push eax  +
lea ecx [esi+4] +
call sub_1003FA0  +
lea eax [edi+8] +
push eax  +
lea ecx [esi+8] +
call sub_1003FA0  +
lea eax [edi+0Ch] +
push eax  +
lea ecx [esi+0Ch] +
call sub_1003FA0  +
mov eax [edi+10h] +
mov [esi+10h] eax +
mov eax [edi+14h] +
mov [esi+14h] eax +
mov eax [edi+18h] +
mov [esi+18h] eax +
mov eax [edi+1Ch] +
mov [esi+1Ch] eax +
mov eax [edi+20h] +
mov [esi+20h] eax +
mov eax [edi+24h] +
mov [esi+24h] eax +
mov eax [edi+28h] +
pop edi  +
mov [esi+28h] eax +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_10015E0  +
mov esi ecx +
mov [ebp-10h] esi +
xor eax eax +
mov [esi] eax +
mov [esi+4] eax +
mov [esi+8] eax +
mov [esi+0Ch] eax +
lea ebx [esi+10h] +
mov ecx ebx +
mov [ebp-4] eax +
call sub_10033C0  +
lea ecx [esi+14h] +
call sub_10033C0  +
mov edi [ebp+8] +
push edi  +
mov ecx esi +
mov byte ptr [ebp-4] 2 +
call sub_10077A6  +
lea eax [edi+10h] +
push eax  +
mov ecx ebx +
call sub_1003FA0  +
lea eax [edi+14h] +
push eax  +
lea ecx [esi+14h] +
call sub_1003FA0  +
mov eax [edi+18h] +
mov [esi+18h] eax +
mov eax [edi+1Ch] +
mov [esi+1Ch] eax +
mov eax esi +
call sub_10015C0  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
push 0FFFFFFFFh  +
push dword ptr [esi+4]  +
mov edi ecx +
call sub_1003788  +
test al al +
jz loc_10203AE  +
push dword ptr [esi+4]  +
push dword ptr [esi]  +
push dword ptr [edi]  +
call sub_10077DB  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_8] +
test ebx ebx +
jbe loc_1007805  +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
mov edi [ebp+arg_0] +
sub esi edi +
lea eax [esi+edi] +
push eax  +
mov ecx edi +
call sub_100780F  +
add edi 8 +
dec ebx  +
jnz loc_10077F2  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
push edi  +
mov esi ecx +
call sub_1003FA0  +
mov eax [edi+4] +
mov [esi+4] eax +
pop edi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_4]  +
mov esi ecx +
push [ebp+arg_0]  +
call sub_100785E  +
and dword ptr [esi+54h] 0 +
mov dword ptr [esi+48h] 1 +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
call sub_10015E0  +
mov esi ecx +
mov [ebp-10h] esi +
push dword ptr [ebp+8]  +
call sub_1007732  +
push dword ptr [ebp+0Ch]  +
and dword ptr [ebp-4] 0 +
lea ecx [esi+20h] +
call sub_1007895  +
mov eax esi +
call sub_10015C0  +
retn 8  +
***
call sub_10015E0  +
mov esi ecx +
mov [ebp-10h] esi +
and dword ptr [ebp-4] 0 +
lea ebx [esi+4] +
mov ecx ebx +
mov dword ptr [esi] offset off_10042BC +
call sub_10033C0  +
lea ecx [esi+8] +
call sub_10033C0  +
mov edi [ebp+8] +
lea eax [edi+4] +
push eax  +
mov ecx ebx +
mov byte ptr [ebp-4] 2 +
call sub_1003FA0  +
lea eax [edi+8] +
push eax  +
lea ecx [esi+8] +
call sub_1003FA0  +
mov eax [edi+0Ch] +
mov [esi+0Ch] eax +
mov eax [edi+10h] +
mov [esi+10h] eax +
mov eax [edi+14h] +
mov [esi+14h] eax +
mov eax [edi+18h] +
mov [esi+18h] eax +
mov eax [edi+1Ch] +
mov [esi+1Ch] eax +
mov eax [edi+20h] +
mov [esi+20h] eax +
mov eax [edi+24h] +
mov [esi+24h] eax +
mov eax esi +
call sub_10015C0  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_4]  +
mov esi ecx +
push [ebp+arg_0]  +
call sub_1007938  +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
call sub_10015E0  +
mov esi ecx +
mov [ebp-10h] esi +
push 0Ah  +
call sub_1004A9A  +
and dword ptr [ebp-4] 0 +
lea edi [esi+18h] +
mov ecx edi +
call sub_10033C0  +
lea ebx [esi+1Ch] +
mov ecx ebx +
call sub_10033C0  +
push dword ptr [ebp+8]  +
mov ecx edi +
mov byte ptr [ebp-4] 2 +
call sub_1003FA0  +
push dword ptr [ebp+0Ch]  +
mov ecx ebx +
call sub_1003FA0  +
mov eax esi +
call sub_10015C0  +
retn 8  +
***
test dx dx +
jz loc_10079AC  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_1004286  +
add eax 4 +
add ecx 4 +
test dx dx +
jnz loc_100427A  +
xor eax eax +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov edi [esi] +
push edi  +
call sub_1007AB2  +
mov [esi] eax +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
push esi  +
push edi  +
mov edi [ebp+arg_4] +
test edi edi +
jl loc_101F89E  +
mov esi [ecx] +
cmp edi [esi-0Ch] +
jge loc_1017922  +
call sub_1003768  +
mov ecx [ebp+arg_0] +
push eax  +
push edi  +
push esi  +
call sub_1007CAC  +
mov eax [ebp+arg_0] +
pop edi  +
pop esi  +
leave   +
retn 8  +
***
call sub_10015E0  +
mov esi ecx +
mov [ebp-10h] esi +
xor eax eax +
mov [esi] eax +
mov [esi+4] eax +
mov [esi+8] eax +
mov [esi+0Ch] eax +
lea ecx [esi+10h] +
mov [ebp-4] eax +
call sub_10033C0  +
lea ecx [esi+14h] +
call sub_10033C0  +
push dword ptr [ebp+8]  +
mov ecx esi +
mov byte ptr [ebp-4] 2 +
call sub_100382A  +
mov eax esi +
call sub_10015C0  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_10174AC  +
mov edx [ecx+14h] +
cmp eax edx +
jz loc_10174AC  +
mov ecx eax +
mov eax [eax+4Ch] +
cmp eax edx +
jz loc_1007A8F  +
mov ecx eax +
mov eax [ecx+4Ch] +
jmp loc_1007A84  +
mov eax ecx +
pop ebp  +
retn 4  +
***
cmp eax esi +
jz loc_1007AA5  +
cmp edx [eax+50h] +
jnz loc_1007AA5  +
mov edx eax +
mov eax [eax+54h] +
jmp loc_1007A95  +
cmp eax esi +
jnz loc_1007AD3  +
xor eax eax +
jmp loc_1007AD3  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
test edx edx +
jz loc_101F111  +
mov eax [edx+50h] +
push esi  +
mov esi [ecx+14h] +
cmp eax esi +
jz loc_1007AD8  +
push eax  +
call sub_1007A64  +
pop esi  +
pop ebp  +
retn 4  +
mov eax [edx+54h] +
jmp loc_1007A95  +
***
call sub_1003649  +
mov [ebp-18h] ecx +
mov edi [ebp+8] +
xor eax eax +
mov [ebp-2Ch] eax +
mov [ebp-28h] eax +
mov [ebp-4] eax +
mov eax [edi] +
mov eax [eax-0Ch] +
cmp eax 1 +
mov [ebp-20h] edi +
jl loc_101FB4C  +
mov eax dword_104A2C8 +
push dword ptr [eax-0Ch]  +
lea eax [ebp-2Ch] +
push eax  +
mov ecx edi +
call sub_10079D6  +
push dword_104A2C8  +
mov ecx eax +
call sub_100370F  +
mov ecx [ebp-2Ch] +
mov ebx eax +
neg ebx  +
sbb bl bl +
add ecx 0FFFFFFF0h +
inc bl  +
call sub_1002990  +
test bl bl +
jnz loc_10086DC  +
mov eax dword_104A2CC +
push dword ptr [eax-0Ch]  +
lea eax [ebp-2Ch] +
push eax  +
mov ecx edi +
call sub_10079D6  +
push dword_104A2CC  +
mov ecx eax +
call sub_100370F  +
mov ecx [ebp-2Ch] +
mov ebx eax +
neg ebx  +
sbb bl bl +
add ecx 0FFFFFFF0h +
inc bl  +
call sub_1002990  +
test bl bl +
jnz loc_101FB58  +
mov eax [edi] +
mov ecx [eax-0Ch] +
push 3  +
pop esi  +
cmp ecx esi +
jle loc_1007BAB  +
cmp ecx 1 +
jl loc_101FB96  +
movzx edx word ptr [eax+2] +
cmp dx 3Ah +
jz loc_1012F6F  +
cmp ecx esi +
jz loc_101FBA0  +
xor ebx ebx +
inc ebx  +
push ebx  +
lea eax [ebp-20h] +
push eax  +
mov ecx edi +
call sub_1007C5B  +
push offset dword_1003488  +
push eax  +
mov byte ptr [ebp-4] 2 +
mov [ebp-2Ch] ebx +
call sub_1007C3C  +
test al al +
jz loc_1007BF7  +
push ebx  +
lea eax [ebp-18h] +
push eax  +
mov ecx edi +
call sub_1007C5B  +
push offset dword_1012E6C  +
push eax  +
mov ebx esi +
call sub_1007C3C  +
test al al +
jnz loc_1012EEE  +
mov byte ptr [ebp-21h] 0 +
test bl 2 +
jz loc_1007C0E  +
mov ecx [ebp-18h] +
add ecx 0FFFFFFF0h +
and ebx 0FFFFFFFDh +
call sub_1002990  +
and dword ptr [ebp-4] 0 +
test bl 1 +
jz loc_1007C22  +
mov ecx [ebp-20h] +
add ecx 0FFFFFFF0h +
call sub_1002990  +
cmp byte ptr [ebp-21h] 0 +
jnz loc_1012F05  +
mov eax [ebp-28h] +
call sub_1002FBC  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
mov ecx [ebp+arg_0] +
call sub_100424B  +
neg eax  +
sbb eax eax +
neg eax  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
push ebx  +
mov ebx [ebp+arg_4] +
push esi  +
push edi  +
test ebx ebx +
jl loc_101F882  +
mov edi [ecx] +
mov esi [edi-0Ch] +
test esi esi +
jl loc_101F889  +
cmp ebx esi +
jge loc_101F890  +
call sub_1003768  +
mov ecx [ebp+arg_0] +
push eax  +
sub esi ebx +
push ebx  +
lea eax [edi+esi*2] +
push eax  +
call sub_1007CAC  +
mov eax [ebp+arg_0] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_8]  +
mov esi ecx +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1007CCE  +
mov eax esi +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov ecx [ebp+arg_8] +
push edi  +
test ecx ecx +
jz loc_101F234  +
cmp [ebp+arg_0] 0 +
mov edi [ebp+arg_4] +
jz loc_101F23E  +
mov eax [ecx] +
push 2  +
push edi  +
call dword ptr [eax]  +
test eax eax +
jz loc_101F24D  +
add eax 10h +
push edi  +
mov ecx esi +
mov [esi] eax +
call sub_10032EF  +
push edi  +
push [ebp+arg_0]  +
push edi  +
push dword ptr [esi]  +
call sub_1003200  +
add esp 10h +
pop edi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 0Ch  +
***
call sub_10015E0  +
mov edi ecx +
xor edx edx +
cmp [edi+1Ch] edx +
jnz loc_1017BA7  +
mov ecx [edi+4] +
mov esi [ebp+8] +
mov eax [esi+4] +
cmp [esi+1Ch] edx +
jnz loc_1021470  +
cmp ecx eax +
jb loc_10130B8  +
xor eax eax +
call sub_10015C0  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
lea eax [ebp+arg_4] +
push [ebp+arg_0]  +
push eax  +
call sub_1007DA1  +
test eax eax +
jl loc_101F25E  +
mov eax [ebp+arg_4] +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
mov ecx [ebp+arg_8] +
mov edx 7FFFFFFFh +
sub edx eax +
cmp edx ecx +
jl loc_101F126  +
add eax ecx +
mov ecx [ebp+arg_0] +
mov [ecx] eax +
xor eax eax +
pop ebp  +
retn 0Ch  +
***
mov ecx [ecx] +
sub ecx 10h +
jmp sub_1002990  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
cmp [ebp+arg_0] 0 +
push ebx  +
push esi  +
mov esi ecx +
push edi  +
mov [ebp+var_4] esi +
jl loc_101F3C4  +
mov ebx [ebp+arg_4] +
test ebx ebx +
jl loc_101F3CD  +
push [ebp+arg_0]  +
mov eax [esi] +
mov edi [eax-0Ch] +
push ebx  +
call sub_1007D79  +
cmp eax edi +
jg loc_101F3D4  +
test ebx ebx +
jle loc_1007E51  +
mov ecx [ebp+var_4] +
mov esi edi +
sub esi [ebp+arg_0] +
sub esi ebx +
inc esi  +
call sub_100372B  +
mov ecx [ebp+arg_0] +
add esi esi +
lea edx [ecx+ebx] +
push esi  +
lea edx [eax+edx*2] +
push edx  +
lea eax [eax+ecx*2] +
push esi  +
push eax  +
call sub_1003CAD  +
mov ecx [ebp+var_4] +
add esp 10h +
sub edi ebx +
push edi  +
call sub_10032EF  +
mov esi [ebp+var_4] +
mov eax [esi] +
mov eax [eax-0Ch] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_10033C0  +
mov eax esi +
pop esi  +
retn   +
***
call sub_1001862  +
xor edx edx +
mov [ebp-18h] edx +
cmp dword_104A3AC edx +
jz loc_101FFF9  +
mov al byte_104A3B0 +
cmp al 4 +
jb loc_101FFA3  +
***
mov edi dword_104A398 +
mov esi dword_104A39C +
mov ebx dword_104A3A0 +
mov eax edi +
mov ecx esi +
and eax 20000h +
and ecx 80000000h +
or eax ecx +
jnz loc_101FFAD  +
cmp [ebp+10h] edx +
jz loc_10126E1  +
cmp [ebp+14h] edx +
jz loc_10126E1  +
push dword ptr [ebp+0Ch]  +
call sub_100242C  +
mov [ebp-14h] eax +
test eax eax +
jl loc_1020010  +
mov ecx [ebp+8] +
call sub_1003689  +
mov [ebp-14h] eax +
test eax eax +
jl loc_1020010  +
push dword ptr [ebp+0Ch]  +
and dword ptr [ebp-4] 0 +
lea ecx [ebp-14h] +
call sub_10035A2  +
push 2  +
lea eax [ebp-20h] +
push eax  +
lea ecx [ebp-14h] +
mov byte ptr [ebp-4] 1 +
call sub_1007C5B  +
xor esi esi +
inc esi  +
push offset asc_1007D24  +
mov ebx esi +
push eax  +
mov byte ptr [ebp-4] 2 +
mov [ebp-18h] ebx +
call sub_100422D  +
test al al +
jnz loc_10126CB  +
push 2  +
lea eax [ebp-1Ch] +
push eax  +
lea ecx [ebp-14h] +
call sub_1007C5B  +
push 3  +
pop ebx  +
push offset asc_1007D2C  +
push eax  +
call sub_100422D  +
mov byte ptr [ebp+0Fh] 0 +
test al al +
jnz loc_10126CB  +
test bl 2 +
jz loc_1007F7B  +
mov ecx [ebp-1Ch] +
add ecx 0FFFFFFF0h +
and ebx 0FFFFFFFDh +
call sub_1002990  +
mov [ebp-4] esi +
test bl 1 +
jz loc_1007F8E  +
mov ecx [ebp-20h] +
add ecx 0FFFFFFF0h +
call sub_1002990  +
cmp byte ptr [ebp+0Fh] 0 +
jnz loc_10126F2  +
push dword ptr [ebp+14h]  +
mov ecx [ebp+8] +
push dword ptr [ebp+10h]  +
mov eax [ecx+3Ch] +
push eax  +
lea eax [ebp-14h] +
push eax  +
call sub_100811F  +
mov ecx [ebp-14h] +
add ecx 0FFFFFFF0h +
mov ebx eax +
call sub_1002990  +
cmp dword_104A3AC 0 +
jz loc_1007FF2  +
mov al byte_104A3B0 +
cmp al 4 +
jb loc_10126D4  +
mov eax dword_104A398 +
mov ecx dword_104A39C +
mov edx 20000h +
mov esi 80000000h +
and eax edx +
and ecx esi +
or eax ecx +
jnz loc_1020089  +
mov eax ebx +
call sub_10015C0  +
retn 10h  +
***
mov eax [esi+2Ch] +
mov ecx [ebp+10h] +
mov [ecx] eax +
cmp dword ptr [esi+38h] 0 +
jz loc_101FE79  +
mov eax [ebp+14h] +
mov dword ptr [eax] 1 +
lea ecx [ebp-5Ch] +
call sub_1003B4C  +
mov ecx [ebp+8] +
add ecx 0FFFFFFF0h +
call sub_1002990  +
lea ecx [ebp-7Ch] +
call sub_1003B4C  +
mov ecx [ebp-14h] +
add ecx 0FFFFFFF0h +
mov byte ptr [ebp-4] 0 +
call sub_1002990  +
add dword ptr [ebp-18h] 4 +
dec dword ptr [ebp-20h]  +
jnz loc_100819F  +
xor esi esi +
or dword ptr [ebp-4] 0FFFFFFFFh +
push offset loc_1007DCD  +
push edi  +
push 4  +
lea eax [ebp-3Ch] +
push eax  +
call sub_1008074  +
mov eax esi +
call sub_10015C0  +
retn 10h  +
***
call sub_1002A98  +
and dword ptr [ebp-1Ch] 0 +
mov esi [ebp+0Ch] +
mov eax esi +
imul eax [ebp+10h] +
add [ebp+8] eax +
and dword ptr [ebp-4] 0 +
dec dword ptr [ebp+10h]  +
js loc_10080C4  +
sub [ebp+8] esi +
mov ecx [ebp+8] +
call dword ptr [ebp+14h]  +
jmp loc_1008094  +
mov dword ptr [ebp-1Ch] 1 +
mov dword ptr [ebp-4] 0FFFFFFFEh +
call sub_10080E4  +
call sub_1002ADD  +
retn 10h  +
***
cmp dword ptr [ebp-1Ch] 0 +
jz loc_101CD30  +
retn   +
***
push edi  +
lea eax [ebp-30h] +
push eax  +
lea ecx [ebp+8] +
call sub_1007C5B  +
or dword ptr [ebp-10h] 8 +
push offset asc_1007D2C  +
push eax  +
call sub_100422D  +
test al al +
jnz loc_10082C0  +
xor bl bl +
jmp loc_10082C2  +
***
call sub_10015E0  +
mov [ebp-24h] ecx +
push offset loc_1007DCD  +
push offset loc_1007E62  +
push 2  +
pop edi  +
push edi  +
push 4  +
lea eax [ebp-3Ch] +
xor esi esi +
push eax  +
mov [ebp-10h] esi +
call sub_1002AF6  +
push dword ptr [ebp+8]  +
lea ecx [ebp-38h] +
mov [ebp-4] esi +
call sub_1003FA0  +
push eax  +
lea ecx [ebp-3Ch] +
call sub_1003FBC  +
mov eax [ebp+10h] +
push dword ptr [ebp+8]  +
mov [eax] esi +
mov eax [ebp+14h] +
mov [eax] esi +
call sub_1003AF2  +
test eax eax +
jnz loc_101FE59  +
lea eax [ebp-3Ch] +
push eax  +
call sub_100838F  +
xor ecx ecx +
test al al +
setnz cl  +
inc ecx  +
mov eax ecx +
jz loc_100804E  +
lea ecx [ebp-3Ch] +
mov [ebp-18h] ecx +
mov [ebp-20h] eax +
push dword ptr [ebp-18h]  +
lea ecx [ebp-14h] +
call sub_1003F3F  +
mov ecx [ebp-24h] +
xor esi esi +
inc esi  +
push esi  +
lea eax [ebp-14h] +
push eax  +
mov byte ptr [ebp-4] 1 +
call sub_1007AE2  +
mov eax [ebp-14h] +
cmp [eax-0Ch] edi +
jl loc_100824B  +
push edi  +
lea eax [ebp-2Ch] +
push eax  +
lea ecx [ebp-14h] +
call sub_1007C5B  +
or [ebp-10h] esi +
push offset asc_1007D24  +
push eax  +
mov byte ptr [ebp-4] 2 +
call sub_100422D  +
test al al +
jnz loc_10084D2  +
push edi  +
lea eax [ebp-28h] +
push eax  +
lea ecx [ebp-14h] +
call sub_1007C5B  +
or [ebp-10h] edi +
push offset asc_1007D2C  +
push eax  +
call sub_100422D  +
test al al +
jnz loc_10084D2  +
xor bl bl +
test byte ptr [ebp-10h] 2 +
jz loc_100822B  +
mov ecx [ebp-28h] +
and dword ptr [ebp-10h] 0FFFFFFFDh +
add ecx 0FFFFFFF0h +
call sub_1002990  +
test byte ptr [ebp-10h] 1 +
mov [ebp-4] esi +
jz loc_1008243  +
mov ecx [ebp-2Ch] +
and dword ptr [ebp-10h] 0FFFFFFFEh +
add ecx 0FFFFFFF0h +
call sub_1002990  +
test bl bl +
jnz loc_101FE63  +
mov ecx [ebp+0Ch] +
push dword ptr [ecx]  +
call sub_1007A64  +
mov [ebp-1Ch] eax +
lea eax [ebp-14h] +
push eax  +
lea ecx [ebp-7Ch] +
call sub_1007A16  +
mov byte ptr [ebp-4] 3 +
cmp dword ptr [ebp-1Ch] 0 +
jz loc_100802A  +
mov ecx [ebp+0Ch] +
lea eax [ebp-1Ch] +
push eax  +
call sub_10079B5  +
mov esi eax +
lea eax [esi+24h] +
push eax  +
lea ecx [ebp+8] +
call sub_1003F3F  +
mov eax [ebp+8] +
cmp [eax-0Ch] edi +
mov byte ptr [ebp-4] 4 +
jl loc_10082FE  +
push edi  +
lea eax [ebp-34h] +
push eax  +
lea ecx [ebp+8] +
call sub_1007C5B  +
or dword ptr [ebp-10h] 4 +
push offset asc_1007D24  +
push eax  +
mov byte ptr [ebp-4] 5 +
call sub_100422D  +
test al al +
jz loc_10080EF  +
mov bl 1 +
test byte ptr [ebp-10h] 8 +
jnz loc_1008376  +
test byte ptr [ebp-10h] 4 +
mov dword ptr [ebp-4] 4 +
jz loc_10082E8  +
mov ecx [ebp-34h] +
and dword ptr [ebp-10h] 0FFFFFFFBh +
add ecx 0FFFFFFF0h +
call sub_1002990  +
test bl bl +
jz loc_10082FE  +
mov eax [ebp+8] +
mov eax [eax-0Ch] +
push 1  +
dec eax  +
push eax  +
lea ecx [ebp+8] +
call sub_1007DDC  +
lea eax [ebp+8] +
push eax  +
lea ecx [ebp-5Ch] +
call sub_1007A16  +
mov eax [ebp-18h] +
push dword ptr [eax]  +
mov ebx ds:__imp__wcsicmp +
push dword ptr [ebp+8]  +
mov byte ptr [ebp-4] 6 +
call ebx  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_10084CA  +
push dword ptr [ebp-14h]  +
push dword ptr [ebp+8]  +
call ebx  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_10084CA  +
mov eax [ebp-78h] +
cmp eax [ebp-58h] +
jz loc_1012E49  +
lea eax [ebp-7Ch] +
push eax  +
lea ecx [ebp-5Ch] +
call sub_1007D37  +
test eax eax +
jnz loc_1007FFC  +
lea ecx [ebp-5Ch] +
call sub_1003B4C  +
mov ecx [ebp+8] +
add ecx 0FFFFFFF0h +
mov byte ptr [ebp-4] 3 +
call sub_1002990  +
jmp loc_1008268  +
mov ecx [ebp-30h] +
and dword ptr [ebp-10h] 0FFFFFFF7h +
add ecx 0FFFFFFF0h +
call sub_1002990  +
jmp loc_10082CC  +
***
call sub_10015E0  +
push dword ptr [ebp+8]  +
lea ecx [ebp-14h] +
call sub_1003F3F  +
mov eax dword_104A2CC +
push dword ptr [eax-0Ch]  +
and dword ptr [ebp-4] 0 +
lea eax [ebp-20h] +
push eax  +
lea ecx [ebp-14h] +
call sub_10079D6  +
push dword_104A2CC  +
mov ecx eax +
call sub_100370F  +
mov ecx [ebp-20h] +
mov ebx eax +
neg ebx  +
sbb bl bl +
add ecx 0FFFFFFF0h +
inc bl  +
call sub_1002990  +
test bl bl +
jnz loc_10087BC  +
mov edi [ebp-14h] +
mov eax [edi-0Ch] +
test eax eax +
jle loc_10083FD  +
movzx eax word ptr [edi] +
cmp ax 2Fh +
jz loc_10087EB  +
push edi  +
call ds:PathIsUNCW  +
test eax eax +
jnz loc_10087DE  +
push edi  +
call ds:PathIsUNCServerW  +
test eax eax +
jnz loc_10087DE  +
push edi  +
call ds:PathIsUNCServerShareW  +
test eax eax +
jnz loc_10087DE  +
lea eax [ebp-14h] +
push eax  +
lea ecx [ebp-18h] +
call sub_1003F3F  +
lea ecx [ebp-18h] +
mov byte ptr [ebp-4] 3 +
call sub_1008479  +
mov ebx [ebp-18h] +
push ebx  +
call ds:GetDriveTypeW  +
cmp eax 4 +
jz loc_1021632  +
mov byte ptr [ebp+0Bh] 0 +
lea ecx [ebx-10h] +
call sub_1002990  +
lea ecx [edi-10h] +
call sub_1002990  +
mov al [ebp+0Bh] +
call sub_10015C0  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi] +
push edi  +
push dword ptr [eax-0Ch]  +
call sub_1003122  +
push eax  +
call ds:PathStripToRootW  +
push 0FFFFFFFFh  +
mov ecx esi +
mov edi eax +
call sub_10084A5  +
mov eax edi +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
mov esi ecx +
cmp eax 0FFFFFFFFh +
jnz loc_10084BD  +
push dword ptr [esi]  +
call sub_1003025  +
pop ecx  +
push eax  +
mov ecx esi +
call sub_10032EF  +
pop esi  +
pop ebp  +
retn 4  +
***
xor eax eax +
inc eax  +
jmp loc_1008352  +
mov bl 1 +
jmp loc_1008216  +
***
mov edi edi +
push esi  +
mov esi ecx +
lea eax [esi+10h] +
push eax  +
mov dword ptr [esi] offset off_1002B8C +
call sub_1002BC9  +
mov dword ptr [esi] offset off_1002B70 +
pop esi  +
retn   +
***
lea eax [eax+ecx*2] +
cmp edi eax +
jnb loc_1002DBE  +
jmp loc_1002DD5  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
push esi  +
mov esi ecx +
push 0FFFFFFFFh  +
push [ebp+lpString]  +
mov [esi+4] eax +
mov eax [ebp+arg_0] +
mov dword ptr [esi] offset off_1002B70 +
mov [esi+8] eax +
call sub_100853F  +
mov eax esi +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 24h +
cmp [ebp+lpString] 0 +
push esi  +
push edi  +
mov esi ecx +
jz loc_101DED3  +
mov edi [ebp+arg_4] +
mov [ebp+arg_4] edi +
cmp edi 0FFFFFFFFh +
jz loc_10085AC  +
push 1  +
lea eax [ebp+var_4] +
push eax  +
lea ecx [ebp+arg_4] +
call sub_1002EFC  +
mov eax [eax] +
cmp eax [esi+8] +
ja loc_1015430  +
push 2  +
lea eax [ebp+var_4] +
push eax  +
lea ecx [ebp+arg_4] +
call sub_1002E4E  +
push dword ptr [eax]  +
push [ebp+lpString]  +
push dword ptr [esi+4]  +
call memcpy  +
mov eax [esi+4] +
add esp 0Ch +
mov [esi+0Ch] edi +
xor ecx ecx +
mov [eax+edi*2] cx +
mov eax [esi+0Ch] +
pop edi  +
pop esi  +
leave   +
retn 8  +
push [ebp+lpString]  +
call ds:lstrlenW  +
mov [ebp+var_4] eax +
lea eax [ebp+var_4] +
push eax  +
lea ecx [ebp+arg_4] +
call sub_1002F5C  +
mov edi [ebp+arg_4] +
jmp loc_1008560  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_0]  +
call off_104B7F4  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_0]  +
call off_104B7F0  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_4] 0 +
ja loc_101DDE9  +
mov eax [ebp+arg_0] +
jb loc_1008615  +
cmp eax 0FFFFFFFFh +
ja loc_101DDE9  +
mov ecx [ebp+arg_8] +
mov [ecx] eax +
xor eax eax +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
mov eax [ebp+arg_4] +
add eax ecx +
cmp eax ecx +
jb loc_1022163  +
mov ecx [ebp+arg_8] +
mov [ecx] eax +
xor eax eax +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
cmp dword_104A3AC 0 +
push ebx  +
push esi  +
push edi  +
mov edi 20000h +
mov esi 80000000h +
jz loc_1008686  +
mov al byte_104A3B0 +
cmp al 4 +
jb loc_10086D0  +
mov eax dword_104A398 +
mov ecx dword_104A39C +
and eax edi +
and ecx esi +
or eax ecx +
jnz loc_101E70A  +
mov ebx [ebp+arg_8] +
mov eax [ebp+arg_0] +
mov ecx [eax] +
lea edx [ebp+var_4] +
push edx  +
push ebx  +
push [ebp+arg_4]  +
push eax  +
call dword ptr [ecx+38h]  +
cmp dword_104A3AC 0 +
mov [ebp+arg_4] eax +
jz loc_10086C6  +
mov al byte_104A3B0 +
cmp al 4 +
jb loc_10086D6  +
mov eax dword_104A398 +
mov ecx dword_104A39C +
and eax edi +
and ecx esi +
or eax ecx +
jnz loc_101E755  +
mov eax [ebp+arg_4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
test al al +
jz loc_100866F  +
jmp loc_1008686  +
test al al +
jz loc_10086AF  +
jmp loc_10086C6  +
***
mov eax dword_104A2C8 +
mov esi [eax-0Ch] +
mov eax [edi] +
mov eax [eax-0Ch] +
lea ebx [esi+1] +
cmp eax ebx +
jl loc_101FB70  +
push esi  +
mov ecx edi +
call sub_1004428  +
movzx eax ax +
push eax  +
call ds:towupper  +
movzx edi ax +
pop ecx  +
cmp di 2Ah +
jz loc_1015371  +
cmp di 3Fh +
jz loc_1015371  +
mov ecx [ebp-20h] +
mov eax [ecx] +
mov eax [eax-0Ch] +
add esi 2 +
cmp eax esi +
jl loc_101FB7C  +
cmp di 5Ah +
ja loc_1015365  +
cmp di 41h +
jb loc_1015365  +
xor esi esi +
cmp [ebp-28h] esi +
jl loc_1015371  +
push ebx  +
call sub_1004428  +
movzx eax ax +
cmp ax 3Ah +
jnz loc_101FB8A  +
cmp [ebp-28h] esi +
jl loc_1015371  +
mov eax [ebp-18h] +
cmp byte ptr [eax+5Ch] 0 +
jnz loc_1015371  +
cmp [ebp+0Ch] esi +
jz loc_1015371  +
mov eax ds:dword_10087B4 +
mov [ebp-1Ch] eax +
mov eax ds:dword_10087B8 +
mov [ebp-18h] eax +
lea eax [ebp-1Ch] +
push eax  +
mov [ebp-1Ch] di +
call ds:GetDriveTypeW  +
mov edi [ebp-20h] +
cmp eax 3 +
jz loc_1007B86  +
jmp loc_101FB70  +
***
mov eax [ebp-14h] +
mov eax [eax-0Ch] +
mov ecx dword_104A2CC +
sub eax [ecx-0Ch] +
lea ecx [ebp-14h] +
push eax  +
lea eax [ebp-20h] +
push eax  +
call sub_1007C5B  +
mov byte ptr [ebp-4] 1 +
jmp loc_1008800  +
lea ecx [edi-10h] +
call sub_1002990  +
jmp loc_10216DA  +
mov edi [edi-0Ch] +
dec edi  +
push edi  +
lea eax [ebp-20h] +
push eax  +
lea ecx [ebp-14h] +
call sub_1007C5B  +
mov byte ptr [ebp-4] 2 +
push eax  +
lea ecx [ebp-14h] +
call sub_1003FBC  +
mov ecx [ebp-20h] +
add ecx 0FFFFFFF0h +
mov byte ptr [ebp-4] 0 +
call sub_1002990  +
jmp loc_10083E6  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
push esi  +
mov esi ecx +
jz loc_101B66E  +
push [ebp+arg_0]  +
call ds:SysAllocString  +
mov [esi] eax +
test eax eax +
jz loc_101B676  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
test esi esi +
jz loc_100893A  +
mov eax [esi] +
push 1  +
mov ecx esi +
call dword ptr [eax+64h]  +
jmp loc_100893A  +
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+8] +
push edi  +
lea eax [esi+8] +
push eax  +
call ds:InterlockedDecrement  +
mov edi eax +
test edi edi +
jz loc_100890C  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_100896D  +
test [ebp+arg_0] 1 +
jz loc_1008961  +
push esi  +
call off_104B7F0  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
mov edi edi +
push esi  +
mov esi ecx +
lea ecx [esi+18h] +
mov dword ptr [esi] offset off_10088A0 +
mov dword ptr [esi+4] offset off_1008908 +
call sub_1002A01  +
mov ecx [esi+14h] +
sub ecx 10h +
call sub_1002990  +
mov dword ptr [esi+4] offset off_1008904 +
pop esi  +
retn   +
***
push ebp  +
mov ebp esp +
cmp dword_104A3AC 0 +
push esi  +
push edi  +
jz loc_1008A27  +
mov al byte_104A3B0 +
cmp al 4 +
jb loc_101B2F6  +
mov eax dword_104A398 +
mov ecx dword_104A39C +
mov esi 200h +
mov edi 80000000h +
and eax esi +
and ecx edi +
or eax ecx +
jnz loc_101D559  +
mov edi [ebp+8] +
mov eax edi +
dec eax  +
push ebx  +
jz loc_100C119  +
sub eax 3 +
jz loc_101D5D9  +
dec eax  +
jz loc_100C119  +
sub eax 6 +
jz loc_101D5BE  +
dec eax  +
dec eax  +
jz loc_101B2DA  +
dec eax  +
jnz loc_101D59B  +
mov ebx [ebp+0Ch] +
cmp ebx 5 +
jz loc_10125DC  +
cmp ebx 6 +
jz loc_10125DC  +
cmp dword_104A3AC 0 +
pop ebx  +
jz loc_1008AA9  +
mov al byte_104A3B0 +
cmp al 4 +
jb loc_101B325  +
mov eax dword_104A398 +
mov ecx dword_104A39C +
mov esi 200h +
mov edi 80000000h +
and eax esi +
and ecx edi +
or eax ecx +
jnz loc_101D5E9  +
pop edi  +
xor eax eax +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_8]  +
mov eax [ebp+arg_0] +
mov eax [eax+18h] +
push [ebp+arg_4]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+0D4h]  +
pop ebp  +
retn 0Ch  +
***
call sub_10015E0  +
and dword ptr [ebp-10h] 0 +
and dword ptr [ebp-4] 0 +
lea eax [ebp-10h] +
push eax  +
push offset stru_1002154  +
push 15h  +
push 0  +
push offset rclsid  +
call ds:CoCreateInstance  +
mov edi eax +
test edi edi +
jnz loc_1008B1D  +
mov eax [ebp-10h] +
mov ecx [eax] +
push edi  +
push dword ptr [ebp+8]  +
push eax  +
call dword ptr [ecx+0D4h]  +
mov edi eax +
mov eax [ebp-10h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
test eax eax +
jz loc_1008B2E  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax edi +
call sub_10015C0  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi eax +
xor eax eax +
mov ecx edx +
test edx edx +
jz loc_1008B6E  +
cmp [esi] ax +
jz loc_1008B54  +
inc esi  +
inc esi  +
dec edx  +
jnz loc_1008B4A  +
test edx edx +
jz loc_1008B6E  +
pop esi  +
test edi edi +
jz nullsub_4  +
test eax eax +
jl loc_101DDD5  +
sub ecx edx +
mov [edi] ecx +
retn   +
mov eax 80070057h +
jmp loc_1008B58  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
mov eax [ecx] +
mov edx [eax-0Ch] +
test edx edx +
jl loc_101C496  +
cmp word ptr [eax] 7Bh +
jnz loc_10095B0  +
dec edx  +
push edx  +
call sub_1004428  +
cmp ax 7Dh +
jnz loc_10095B0  +
xor eax eax +
inc eax  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+8] +
push edi  +
lea eax [esi+4] +
push eax  +
call ds:InterlockedDecrement  +
mov edi eax +
test edi edi +
jz loc_10095D3  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_1003649  +
mov esi [ebp+8] +
mov ebx [ebp+0Ch] +
xor edi edi +
push edi  +
lea ecx [ebp-1D8h] +
mov [ebp-4] edi +
call sub_1003D9C  +
push esi  +
lea ecx [ebp-1D8h] +
mov byte ptr [ebp-4] 1 +
call sub_1003E3B  +
lea eax [ebp-1E8h] +
push eax  +
lea ecx [ebp-1D8h] +
call sub_1006BCC  +
push offset word_1004D80  +
lea ecx [ebp-1E8h] +
call sub_1003503  +
test eax eax +
jz loc_1009605  +
mov eax [ebp-1E4h] +
test eax eax +
jz loc_1009605  +
push 2  +
inc eax  +
xor ecx ecx +
pop edx  +
mul  edx +
seto cl  +
neg ecx  +
or eax ecx +
push eax  +
call off_104B7F4  +
mov esi eax +
test esi esi +
jz loc_101FAB6  +
lea eax [ebp-1DCh] +
push eax  +
mov eax [ebp-1E4h] +
inc eax  +
push eax  +
push esi  +
lea ecx [ebp-1E8h] +
call sub_1005A97  +
mov edi eax +
test edi edi +
jl loc_1008CAB  +
push esi  +
mov ecx ebx +
call sub_1003231  +
push esi  +
call off_104B7F0  +
lea ecx [ebp-1D8h] +
call sub_1003CEC  +
mov eax edi +
call sub_1002FBC  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_1008CF5  +
mov edx [ecx+14h] +
cmp eax edx +
jz loc_1008CF5  +
mov ecx eax +
mov eax [eax+34h] +
cmp eax edx +
jnz loc_1008CEE  +
mov eax ecx +
pop ebp  +
retn 4  +
mov ecx eax +
mov eax [ecx+34h] +
jmp loc_1008CE4  +
xor eax eax +
jmp loc_1008CEA  +
***
call sub_1001862  +
mov esi [ebp+8] +
xor edi edi +
cmp esi edi +
jz loc_101F265  +
push 44h  +
mov [esi] edi +
mov dword ptr [ebp-14h] 8007000Eh +
mov [ebp-4] edi +
call off_104B7F4  +
cmp eax edi +
jz loc_1008D4B  +
push edi  +
mov ecx eax +
call sub_1008D54  +
cmp eax edi +
jz loc_1008D3E  +
mov [ebp-14h] edi +
mov [esi] eax +
mov eax [ebp-14h] +
call sub_10015C0  +
retn 4  +
xor eax eax +
jmp loc_1008D37  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_1008D81  +
mov dword ptr [esi] offset off_10028F0 +
mov dword ptr [esi+4] offset off_1008908 +
mov ecx dword_104A064 +
mov eax [ecx] +
call dword ptr [eax+4]  +
mov eax esi +
pop esi  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
and dword ptr [esi+8] 0 +
mov dword ptr [esi+4] offset off_1008904 +
lea ecx [esi+14h] +
mov dword ptr [esi] offset off_10088A0 +
mov dword ptr [esi+4] offset off_1008908 +
call sub_10033C0  +
lea ecx [esi+18h] +
call sub_1004F6D  +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+10h]  +
mov ecx [ebp+8] +
push dword ptr [ebp+0Ch]  +
call sub_1008DD3  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push offset off_1008DF0  +
push ecx  +
call sub_10017D5  +
pop ebp  +
retn 8  +
***
call sub_10015E0  +
mov edi ecx +
push dword ptr [edi]  +
xor ebx ebx +
call sub_1008CCC  +
mov [ebp-14h] eax +
test eax eax +
jz loc_1008EBD  +
and dword ptr [ebp-10h] 0 +
and dword ptr [ebp-4] 0 +
lea eax [ebp-18h] +
push eax  +
call sub_1008CFE  +
mov ebx eax +
test ebx ebx +
jl loc_101F3F2  +
mov esi [ebp-18h] +
mov eax [esi] +
lea ecx [ebp-10h] +
push ecx  +
push offset dword_1008EC8  +
push esi  +
call dword ptr [eax]  +
mov ebx eax +
test ebx ebx +
jl loc_101F3E9  +
lea eax [ebp-14h] +
push eax  +
mov ecx edi +
call sub_1008EDD  +
lea ecx [esi+4] +
mov edx [ecx] +
lea esi [eax+4] +
push esi  +
push eax  +
lea eax [edi+1Ch] +
push eax  +
lea eax [edi+18h] +
push eax  +
call dword ptr [edx]  +
mov ebx eax +
test ebx ebx +
jl loc_101F3F2  +
cmp ebx 1 +
jz loc_10099F1  +
push dword ptr [ebp-10h]  +
mov ecx [ebp+8] +
call sub_1009744  +
mov eax [ebp-10h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
test eax eax +
jz loc_1008EB3  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
cmp dword ptr [ebp-14h] 0 +
jnz loc_1008E2F  +
mov eax ebx +
call sub_10015C0  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov edi [esi] +
push edi  +
call sub_1008EFE  +
mov [esi] eax +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
test edx edx +
jz loc_101F11F  +
mov eax [edx+38h] +
push esi  +
mov esi [ecx+14h] +
cmp eax esi +
jnz loc_10095E9  +
mov eax [edx+3Ch] +
cmp eax esi +
jz loc_1008F2D  +
cmp edx [eax+38h] +
jz loc_10095F4  +
cmp eax esi +
jz loc_10095FE  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+8] +
mov edx [edx] +
push esi  +
mov esi [ebp+10h] +
mov eax [esi] +
push edi  +
mov edi ecx +
mov ecx [ebp+0Ch] +
mov ecx [ecx] +
push 1  +
push eax  +
push ecx  +
push edx  +
call sub_1008F8A  +
test eax eax +
jl loc_10099E9  +
push esi  +
lea ecx [edi+10h] +
call sub_1003FA0  +
push dword ptr [ebp+14h]  +
lea ecx [edi+14h] +
call sub_10095BC  +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 10h  +
***
call sub_1001862  +
xor ebx ebx +
push offset dword_104A104  +
lea ecx [ebp-20h] +
mov [ebp-4] ebx +
call sub_1003060  +
lea eax [ebp-20h] +
push eax  +
push dword ptr [ebp+10h]  +
mov byte ptr [ebp-4] 1 +
call sub_1008BF4  +
cmp eax ebx +
jl loc_101CA65  +
cmp dword ptr [ebp+14h] 1 +
jnz loc_1008FD7  +
lea eax [ebp-20h] +
push eax  +
call sub_1008B8D  +
cmp eax ebx +
jz loc_10097D0  +
mov [ebp-14h] ebx +
push dword ptr [ebp+0Ch]  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 2 +
call sub_100883D  +
mov esi eax +
push dword ptr [ebp+8]  +
lea ecx [ebp+0Ch] +
mov byte ptr [ebp-4] 3 +
call sub_100883D  +
mov ecx [esi] +
mov eax [eax] +
lea edx [ebp-14h] +
push edx  +
push ecx  +
push eax  +
mov byte ptr [ebp-4] 4 +
call sub_100913D  +
push dword ptr [ebp+0Ch]  +
mov edi ds:SysFreeString +
mov esi eax +
call edi  +
push dword ptr [ebp-28h]  +
call edi  +
cmp esi ebx +
jl loc_1009A19  +
mov [ebp-18h] ebx +
push dword ptr [ebp-20h]  +
mov esi [ebp-14h] +
lea ecx [ebp+0Ch] +
mov byte ptr [ebp-4] 5 +
call sub_100883D  +
mov eax [eax] +
mov ecx [esi] +
lea edx [ebp-18h] +
push edx  +
push eax  +
push esi  +
mov byte ptr [ebp-4] 6 +
call dword ptr [ecx+30h]  +
push dword ptr [ebp+0Ch]  +
mov esi eax +
call edi  +
cmp esi ebx +
jl loc_1009A08  +
cmp esi 1 +
jz loc_101CA6C  +
mov [ebp-1Ch] ebx +
mov eax [ebp-18h] +
mov ecx [eax] +
lea edx [ebp-1Ch] +
push edx  +
push eax  +
mov byte ptr [ebp-4] 7 +
call dword ptr [ecx+34h]  +
mov esi eax +
cmp esi ebx +
jl loc_10099F8  +
mov [ebp-24h] ebx +
mov eax [ebp-1Ch] +
mov ecx [eax] +
lea edx [ebp-24h] +
push edx  +
push offset dword_1009128  +
push eax  +
mov byte ptr [ebp-4] 8 +
call dword ptr [ecx]  +
mov esi eax +
cmp esi ebx +
jl loc_101CAA2  +
push dword ptr [ebp+10h]  +
mov esi [ebp-24h] +
lea ecx [ebp+0Ch] +
call sub_100883D  +
push dword ptr [ebp+14h]  +
mov eax [eax] +
mov ecx [esi] +
push eax  +
push esi  +
mov byte ptr [ebp-4] 9 +
call dword ptr [ecx+38h]  +
push dword ptr [ebp+0Ch]  +
mov [ebp+10h] eax +
call edi  +
mov eax [ebp-24h] +
mov byte ptr [ebp-4] 7 +
cmp eax ebx +
jz loc_10090DC  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-1Ch] +
mov byte ptr [ebp-4] 5 +
cmp eax ebx +
jz loc_10090ED  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-18h] +
mov byte ptr [ebp-4] 2 +
cmp eax ebx +
jz loc_10090FE  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-14h] +
mov byte ptr [ebp-4] 1 +
cmp eax ebx +
jz loc_100910F  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov ecx [ebp-20h] +
add ecx 0FFFFFFF0h +
call sub_1002990  +
mov eax [ebp+10h] +
call sub_10015C0  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
push esi  +
mov esi [ebp+arg_8] +
and dword ptr [esi] 0 +
push edi  +
lea eax [ebp+var_4] +
push eax  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1009186  +
mov edi eax +
test edi edi +
jnz loc_1009179  +
mov eax [ebp+var_4] +
mov ecx [eax] +
push esi  +
push eax  +
call dword ptr [ecx+2Ch]  +
mov edi eax +
mov eax [ebp+var_4] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax edi +
pop edi  +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
push esi  +
mov esi [ebp+arg_8] +
and dword ptr [esi] 0 +
push edi  +
lea eax [ebp+var_4] +
push eax  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_10091CF  +
mov edi eax +
test edi edi +
jnz loc_10091C2  +
mov eax [ebp+var_4] +
mov ecx [eax] +
push esi  +
push eax  +
call dword ptr [ecx+20h]  +
mov edi eax +
mov eax [ebp+var_4] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax edi +
pop edi  +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
push ebx  +
mov ebx [ebp+arg_8] +
and dword ptr [ebx] 0 +
push esi  +
lea eax [ebp+var_4] +
push eax  +
push [ebp+arg_0]  +
call sub_1009275  +
mov esi eax +
test esi esi +
jnz loc_1009256  +
and [ebp+arg_0] eax +
mov eax [ebp+var_4] +
mov ecx [eax] +
lea edx [ebp+arg_0] +
push edx  +
push eax  +
call dword ptr [ecx+20h]  +
mov esi eax +
test esi esi +
jnz loc_100924D  +
and [ebp+arg_8] eax +
mov eax [ebp+arg_0] +
mov ecx [eax] +
lea edx [ebp+arg_8] +
push edx  +
push offset dword_1009260  +
push eax  +
call dword ptr [ecx]  +
mov esi eax +
test esi esi +
jnz loc_1009244  +
mov eax [ebp+arg_8] +
mov ecx [eax] +
push ebx  +
push [ebp+arg_4]  +
push eax  +
call dword ptr [ecx+20h]  +
mov esi eax +
cmp esi 1 +
jz loc_10215AF  +
mov eax [ebp+arg_8] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+arg_0] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+var_4] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
mov ebx [ebp+arg_4] +
push esi  +
push edi  +
lea eax [ebp+ppv] +
push eax  +
push offset stru_1001EA4  +
xor edi edi +
push 15h  +
push edi  +
push offset rclsid  +
mov [ebp+ppv] edi +
mov [ebx] edi +
call ds:CoCreateInstance  +
mov esi eax +
cmp esi edi +
jnz loc_1009300  +
mov eax [ebp+ppv] +
lea edx [ebp+var_4] +
push edx  +
mov [ebp+var_4] edi +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+1Ch]  +
mov esi eax +
cmp esi edi +
jnz loc_10092F7  +
mov eax [ebp+var_4] +
lea edx [ebp+arg_4] +
push edx  +
push [ebp+arg_0]  +
mov [ebp+arg_4] edi +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+20h]  +
mov esi eax +
cmp esi edi +
jnz loc_1009309  +
mov eax [ebp+arg_4] +
mov ecx [eax] +
push ebx  +
push offset dword_1009314  +
push eax  +
call dword ptr [ecx]  +
mov esi eax +
mov eax [ebp+arg_4] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+var_4] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+ppv] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 8  +
cmp esi 1 +
jnz loc_10092EE  +
jmp loc_10215A5  +
***
call sub_1001862  +
mov esi [ebp+8] +
xor edi edi +
cmp esi edi +
jz loc_101EF68  +
push 24h  +
mov [esi] edi +
mov dword ptr [ebp-14h] 8007000Eh +
mov [ebp-4] edi +
call off_104B7F4  +
cmp eax edi +
jz loc_1009376  +
push edi  +
mov ecx eax +
call sub_100937F  +
cmp eax edi +
jz loc_1009369  +
mov [ebp-14h] edi +
mov [esi] eax +
mov eax [ebp-14h] +
call sub_10015C0  +
retn 4  +
xor eax eax +
jmp loc_1009362  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_10093A5  +
mov dword ptr [esi] offset off_1001918 +
mov ecx dword_104A064 +
mov eax [ecx] +
call dword ptr [eax+4]  +
mov eax esi +
pop esi  +
retn 4  +
***
xor eax eax +
push edi  +
mov edi ecx +
mov [edi+4] eax +
mov dword ptr [edi] offset off_10089C8 +
mov [edi+0Ch] eax +
mov [edi+10h] eax +
mov [edi+14h] eax +
mov [edi+18h] eax +
mov [edi+1Ch] eax +
mov [edi+20h] eax +
cmp dword_104A3AC eax +
jz loc_10093FB  +
mov cl byte_104A3B0 +
cmp cl 4 +
jb loc_10093FF  +
mov eax dword_104A398 +
mov ecx dword_104A39C +
push esi  +
mov edx 20000h +
mov esi 80000000h +
and eax edx +
and ecx esi +
or eax ecx +
jnz loc_101EC18  +
pop esi  +
mov eax edi +
pop edi  +
retn   +
cmp cl al +
jz loc_10093D8  +
jmp loc_10093FB  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+10h]  +
mov ecx [ebp+8] +
push dword ptr [ebp+0Ch]  +
call sub_1009426  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push offset off_1009440  +
push ecx  +
call sub_10017D5  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
cmp dword_104A3AC 0 +
push ebx  +
push esi  +
push edi  +
mov edi 20000h +
mov esi 80000000h +
jz loc_10094AE  +
mov al byte_104A3B0 +
cmp al 4 +
jb loc_1009579  +
mov eax dword_104A398 +
mov ecx dword_104A39C +
and eax edi +
and ecx esi +
or eax ecx +
jnz loc_101F50F  +
***
mov eax [ebp+0Ch] +
test eax eax +
jz loc_101F54E  +
mov ebx [ebp+8] +
and dword ptr [eax] 0 +
mov ecx ebx +
call sub_1003689  +
mov [ebp-4] eax +
xor eax eax +
cmp [ebp-4] eax +
jl loc_101F5C7  +
mov ecx [ebx+38h] +
cmp [ecx+4] eax +
jz loc_101F62B  +
mov [ebp-8] eax +
lea eax [ebp-4] +
push eax  +
call sub_1009329  +
mov ebx eax +
test ebx ebx +
jl loc_100953C  +
mov ebx [ebp-4] +
mov eax [ebx] +
push ebx  +
call dword ptr [eax+4]  +
mov eax [ebx] +
lea ecx [ebp-8] +
push ecx  +
push offset dword_100958C  +
push ebx  +
call dword ptr [eax]  +
mov [ebp-4] eax +
mov eax [ebx] +
push ebx  +
call dword ptr [eax+8]  +
xor eax eax +
cmp [ebp-4] eax +
jl loc_101F68E  +
mov ecx [ebp+8] +
mov ecx [ecx+38h] +
push eax  +
push ebx  +
call sub_1008E0D  +
mov ebx eax +
test ebx ebx +
jl loc_100953C  +
mov eax [ebp-8] +
mov ecx [ebp+0Ch] +
and dword ptr [ebp-8] 0 +
mov [ecx] eax +
cmp dword_104A3AC 0 +
jz loc_1009565  +
mov al byte_104A3B0 +
cmp al 4 +
jb loc_1009586  +
mov ecx dword_104A39C +
mov eax dword_104A398 +
and ecx esi +
and eax edi +
or eax ecx +
jnz loc_101F700  +
mov eax [ebp-8] +
test eax eax +
jnz loc_101F73F  +
mov eax ebx +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
test al al +
jz loc_1009497  +
jmp loc_10094AE  +
***
test al al +
jz loc_100954E  +
jmp loc_1009565  +
***
xor eax eax +
jmp loc_1008BC0  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_10076CD  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
test esi esi +
jz loc_1008BE7  +
mov eax [esi] +
push 1  +
mov ecx esi +
call dword ptr [eax+1Ch]  +
jmp loc_1008BE7  +
***
push eax  +
call sub_1008CCC  +
jmp loc_1008F35  +
mov edx eax +
mov eax [eax+3Ch] +
jmp loc_1008F20  +
xor eax eax +
jmp loc_1008F35  +
***
push offset aLocalhost  +
mov ecx ebx +
call sub_1003269  +
jmp loc_1008CB2  +
***
call sub_1001862  +
cmp dword_104A3AC 0 +
jz loc_101ED4C  +
mov al byte_104A3B0 +
cmp al 4 +
jb loc_101ED00  +
mov eax dword_104A398 +
mov ecx dword_104A39C +
mov edi 20000h +
mov esi 80000000h +
and eax edi +
and ecx esi +
or eax ecx +
jnz loc_101ED0A  +
xor ebx ebx +
cmp [ebp+10h] ebx +
jz loc_101ED5B  +
mov eax [ebp+14h] +
mov [ebp-14h] ebx +
cmp eax ebx +
jnz loc_1009732  +
cmp dword ptr [ebp+0Ch] 1 +
jnz loc_101EDC5  +
mov eax [ebp+8] +
mov ecx [eax+10h] +
cmp ecx [eax+0Ch] +
jnb loc_10096E9  +
mov ecx [ebp+0Ch] +
cmp [ebp-14h] ecx +
jnb loc_10096E9  +
push dword ptr [eax+10h]  +
and dword ptr [ebp-4] 0 +
lea ecx [eax+14h] +
call sub_10068B5  +
mov ebx [eax] +
push offset dword_10095A0  +
push dword_104A134  +
mov [ebp-1Ch] ebx +
push dword_104A130  +
call ds:EventEnabled  +
test al al +
jnz loc_101EE2F  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov eax [ebx] +
push ebx  +
call dword ptr [eax+4]  +
mov eax [ebp+8] +
inc dword ptr [eax+10h]  +
mov ecx [ebp-14h] +
mov eax [ebp+10h] +
inc dword ptr [ebp-14h]  +
mov [eax+ecx*4] ebx +
jmp loc_1009685  +
mov eax [ebp+14h] +
test eax eax +
jnz loc_101EED4  +
mov eax [ebp-14h] +
xor ebx ebx +
cmp eax [ebp+0Ch] +
setnz bl  +
cmp dword_104A3AC 0 +
jz loc_1009728  +
mov al byte_104A3B0 +
cmp al 4 +
jb loc_1009739  +
mov eax dword_104A398 +
mov ecx dword_104A39C +
and eax edi +
and ecx esi +
or eax ecx +
jnz loc_101EEDE  +
mov eax ebx +
call sub_10015C0  +
retn 10h  +
mov [eax] ebx +
jmp loc_1009685  +
test al al +
jz loc_1009711  +
jmp loc_1009728  +
***
call sub_1001862  +
mov esi ecx +
mov [ebp-1Ch] esi +
xor eax eax +
cmp [ebp+8] eax +
jz loc_101EF84  +
mov [ebp-14h] eax +
mov [ebp-4] eax +
lea eax [ebp+8] +
push eax  +
lea ecx [esi+14h] +
call sub_1009792  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov eax [ebp+8] +
inc dword ptr [esi+0Ch]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
mov eax [ebp-14h] +
call sub_10015C0  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
push edi  +
mov edi [esi+4] +
cmp edi [esi+8] +
jnb loc_10097BE  +
mov eax [esi] +
lea eax [eax+edi*4] +
test eax eax +
jz loc_10097B3  +
mov ecx [ebp+arg_0] +
mov ecx [ecx] +
mov [eax] ecx +
inc dword ptr [esi+4]  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
lea eax [edi+1] +
push eax  +
call sub_10063EE  +
test al al +
jnz loc_10097A3  +
jmp loc_101EF5D  +
***
xor esi esi +
mov ecx [ebp-20h] +
add ecx 0FFFFFFF0h +
call sub_1002990  +
mov eax esi +
jmp loc_100911D  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_100980F  +
test byte ptr [ebp+8] 1 +
jz loc_1009803  +
push esi  +
call off_104B7F0  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_1001918 +
mov dword ptr [esi+4] 0C0000001h +
mov ecx dword_104A064 +
mov eax [ecx] +
call dword ptr [eax+8]  +
mov ecx esi +
pop esi  +
nop   +
nop   +
nop   +
nop   +
nop   +
push 8  +
mov eax offset dword_1042884 +
call sub_10015E0  +
mov [ebp-10h] ecx +
mov dword ptr [ecx] offset off_10089C8 +
and dword ptr [ebp-4] 0 +
cmp dword_104A3AC 0 +
mov edi 20000h +
mov esi 80000000h +
jz loc_1009880  +
mov al byte_104A3B0 +
cmp al 4 +
jb loc_10098E7  +
mov eax dword_104A398 +
mov ecx dword_104A39C +
and eax edi +
and ecx esi +
or eax ecx +
jnz loc_101EC60  +
mov eax [ebp-10h] +
mov eax [eax+18h] +
xor ebx ebx +
mov [ebp-14h] eax +
test eax eax +
jbe loc_10098AD  +
mov ecx [ebp-10h] +
push ebx  +
add ecx 14h +
call sub_10068B5  +
mov eax [eax] +
test eax eax +
jz loc_10098A7  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
inc ebx  +
cmp ebx [ebp-14h] +
jb loc_100988F  +
cmp dword_104A3AC 0 +
jz loc_10098D6  +
mov al byte_104A3B0 +
cmp al 4 +
jb loc_10098F1  +
mov eax dword_104A398 +
mov ecx dword_104A39C +
and eax edi +
and ecx esi +
or eax ecx +
jnz loc_101EC9F  +
mov ecx [ebp-10h] +
add ecx 14h +
call sub_10098FC  +
call sub_10015C0  +
retn   +
test al al +
jz loc_1009869  +
jmp loc_1009880  +
test al al +
jz loc_10098BF  +
jmp loc_10098D6  +
***
mov eax [ecx] +
test eax eax +
jz locret_100990A  +
push eax  +
call ds:__imp_free  +
pop ecx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
xor esi esi +
push edi  +
cmp [ebp+arg_4] esi +
jz loc_101EB46  +
mov ebx [ebp+arg_0] +
push dword ptr [ebx+14h]  +
push [ebp+arg_4]  +
call sub_100997C  +
mov [ebp+arg_4] eax +
cmp dword_104A3AC esi +
jz loc_1009967  +
mov al byte_104A3B0 +
cmp al 4 +
jb loc_1009971  +
mov edx dword_104A398 +
mov esi dword_104A39C +
mov ecx 20000h +
mov eax 80000000h +
and edx ecx +
and esi eax +
or edx esi +
jnz loc_101EBBD  +
mov eax [ebp+arg_4] +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
test al al +
jz loc_1009945  +
jmp loc_1009967  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_4] +
test ebx ebx +
jz loc_101E80C  +
mov eax ebx +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_1009992  +
sub eax edx +
sar eax 1 +
push esi  +
lea eax [eax+eax+2] +
push eax  +
call ds:CoTaskMemAlloc  +
mov esi [ebp+arg_0] +
mov [esi] eax +
test eax eax +
jz loc_101E818  +
mov ecx ebx +
push edi  +
lea edi [ecx+2] +
mov dx [ecx] +
inc ecx  +
inc ecx  +
test dx dx +
jnz loc_10099BF  +
sub ecx edi +
sar ecx 1 +
push ebx  +
inc ecx  +
push ecx  +
push eax  +
call sub_1002525  +
mov edi eax +
test edi edi +
jl loc_101E822  +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
xor eax eax +
inc eax  +
jmp loc_1008F7F  +
***
xor ebx ebx +
jmp loc_1008EA2  +
***
mov eax [ebp-1Ch] +
mov byte ptr [ebp-4] 5 +
cmp eax ebx +
jz loc_1009A08  +
jmp loc_101CA97  +
mov eax [ebp-18h] +
mov byte ptr [ebp-4] 2 +
cmp eax ebx +
jz loc_1009A19  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-14h] +
mov byte ptr [ebp-4] 1 +
cmp eax ebx +
jz loc_10097D2  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_10097D2  +
***
call sub_1002A3A  +
mov esi ecx +
xor edi edi +
call sub_100A834  +
xor ebx ebx +
inc ebx  +
test eax eax +
jnz loc_1009AD0  +
mov ecx off_104B7E4 +
push 2  +
call sub_1009E64  +
call ds:GetCurrentProcess  +
push eax  +
call sub_100F588  +
mov edi eax +
test edi edi +
jl loc_100BFB7  +
mov ecx off_104B7E4 +
push ebx  +
push 14h  +
call sub_101165F  +
mov edi eax +
test edi edi +
jl loc_100BFB7  +
mov eax off_104B7E4 +
mov [eax+90h] ebx +
mov ecx off_104B7E4 +
mov eax [ecx] +
call dword ptr [eax+30h]  +
mov edi eax +
test edi edi +
jl loc_100BFB7  +
mov ecx off_104B7E4 +
push 4  +
call sub_1009E64  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+3Ch]  +
mov edi eax +
test edi edi +
jl loc_100BFB7  +
mov eax off_104B7E4 +
push dword ptr [eax+30h]  +
lea ecx [ebp-950h] +
call sub_100A2FC  +
and dword ptr [ebp-4] 0 +
push 0  +
push ds:dword_1009BE4  +
lea eax [ebp-950h] +
push eax  +
call sub_100A3F1  +
mov eax off_104B7E4 +
mov eax [eax+38h] +
or dword ptr [ebp-960h] 0FFFFFFFFh +
mov [ebp-968h] eax +
mov eax [esi+40h] +
add esp 0Ch +
mov ecx esi +
mov [ebp-964h] eax +
mov dword ptr [ebp-954h] 2 +
call sub_100A834  +
test eax eax +
jnz loc_101D65C  +
cmp dword_104A04C 7D6h +
jl loc_101D650  +
mov eax off_104B7E4 +
mov eax [eax+4Ch] +
mov [ebp-960h] eax +
mov dword ptr [ebp-954h] 3 +
mov eax off_104B7E4 +
and dword ptr [eax+0A0h] 0 +
and dword ptr [ebp-95Ch] 0 +
push ebx  +
lea eax [esi+44h] +
push eax  +
mov dword ptr [ebp-958h] 1D4C0h +
call ds:InterlockedExchange  +
push dword ptr [ebp-958h]  +
lea eax [ebp-968h] +
push dword ptr [ebp-954h]  +
push eax  +
call sub_1009BED  +
mov dword ptr [ebp-958h] 1388h +
cmp eax 2 +
jz loc_101D66E  +
cmp eax 102h +
jnz loc_100BF90  +
mov eax off_104B7E4 +
cmp dword ptr [eax+90h] 0 +
jz loc_101D68F  +
mov eax off_104B7E4 +
cmp dword ptr [eax+90h] 0 +
jz loc_1009B85  +
or dword ptr [ebp-958h] 0FFFFFFFFh +
jmp loc_1009B85  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1Ch +
push esi  +
push edi  +
mov edi ds:PeekMessageW +
xor esi esi +
push 1  +
push esi  +
push esi  +
push esi  +
lea eax [ebp+Msg] +
push eax  +
call edi  +
test eax eax +
jnz loc_101D228  +
push 4FFh  +
push [ebp+dwMilliseconds]  +
push esi  +
push [ebp+pHandles]  +
push [ebp+nCount]  +
call ds:MsgWaitForMultipleObjects  +
cmp eax [ebp+nCount] +
jz loc_1009BFF  +
pop edi  +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov eax [esi] +
cmp [ebp+arg_0] eax +
jz loc_1009C66  +
push eax  +
call ds:SysFreeString  +
cmp [ebp+arg_0] 0 +
jz loc_1009C6D  +
push [ebp+arg_0]  +
call ds:SysAllocString  +
mov [esi] eax +
test eax eax +
jz loc_101B482  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
and dword ptr [esi] 0 +
jmp loc_1009C66  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
lea eax [esi+10h] +
push eax  +
push 42h  +
call sub_100850F  +
mov dword ptr [esi] offset off_1002B8C +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
push ecx  +
push edx  +
push eax  +
push offset SHELL32_dll_import_table  +
call sub_1009D5C  +
pop edx  +
pop ecx  +
jmp eax  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
mov eax [ebp+hModule] +
and [ebp+var_4] 0 +
push ebx  +
mov ebx [eax+4] +
push esi  +
mov esi [eax+8] +
push edi  +
mov edi [ebp+arg_4] +
sub edi [eax+0Ch] +
mov eax [eax+10h] +
mov ecx offset __ImageBase +
sub edi ecx +
sar edi 2 +
add esi ecx +
mov edx [esi] +
lea eax __ImageBase[eax+edi*4] +
add ebx ecx +
mov ecx [eax] +
mov [ebp+hModule] edx +
lea eax (__ImageBase+2)[ecx] +
test ecx ecx +
js loc_101CAD0  +
mov [ebp+lpProcName] eax +
test edx edx +
jnz loc_1009DFB  +
push edx  +
push edx  +
push ebx  +
call LoadLibraryExA  +
mov edi eax +
mov [ebp+hModule] edi +
test edi edi +
jz loc_101CAF3  +
push 0  +
push edi  +
push esi  +
call InterlockedCompareExchange  +
mov esi eax +
test esi esi +
jnz loc_101CAE5  +
push 8  +
pop ecx  +
lea edi [ebp+var_28] +
stos   +
mov eax [ebp+hModule] +
mov [ebp+var_14] eax +
mov eax ds:dword_1009E50 +
mov [ebp+var_2C] 24h +
mov [ebp+var_20] ebx +
test eax eax +
jnz loc_101CAD8  +
cmp [ebp+hModule] 0FFFFFFFFh +
jz loc_101CB1A  +
cmp [ebp+hModule] 0 +
jz loc_101CB36  +
push [ebp+lpProcName]  +
push [ebp+hModule]  +
call GetProcAddress  +
mov esi eax +
test esi esi +
jz loc_101CB23  +
mov [ebp+var_4] 1 +
test esi esi +
jz loc_101CB36  +
cmp [ebp+var_4] 0 +
jz loc_1009E3E  +
mov eax [ebp+arg_4] +
mov [eax] esi +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
cmp eax 0B6h +
jnz loc_1009E2B  +
jmp loc_1009E24  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 7530h  +
push [ebp+arg_0]  +
call sub_1009E7F  +
pop ebp  +
retn 4  +
***
call sub_10015E0  +
mov esi ecx +
lea eax [esi+74h] +
push eax  +
lea ecx [ebp-10h] +
call sub_1002BED  +
mov ecx [esi+58h] +
and dword ptr [ebp-4] 0 +
xor edi edi +
inc edi  +
push 4  +
pop ebx  +
cmp ecx edi +
jz loc_101D487  +
cmp ecx ebx +
jz loc_100C0FD  +
cmp [ebp+8] ebx +
jz loc_100ADEF  +
xor eax eax +
cmp dword ptr [ebp+8] 2 +
mov [esi+5Ch] eax +
jnz loc_1009FE8  +
mov eax [ebp+0Ch] +
mov [esi+6Ch] eax +
cmp ecx ebx +
jz loc_1009EE1  +
cmp [ebp+8] ebx +
jz loc_100ADFA  +
mov eax [ebp+8] +
mov ecx esi +
mov [esi+58h] eax +
call sub_1009F63  +
cmp [ebp+8] ebx +
jz loc_100A32E  +
cmp [ebp+8] edi +
jz loc_100A32E  +
inc dword ptr [esi+68h]  +
cmp dword_104A3AC 0 +
jz loc_1009F3A  +
mov al byte_104A3B0 +
cmp al bl +
jb loc_100C10C  +
mov eax dword_104A398 +
mov ecx dword_104A39C +
mov edx 200h +
mov edi 80000000h +
and eax edx +
and ecx edi +
or eax ecx +
jnz loc_101D4A1  +
lea eax [esi+54h] +
push eax  +
push dword ptr [esi+70h]  +
call ds:SetServiceStatus  +
cmp dword ptr [ebp-10h] 0 +
jz loc_1009F56  +
push dword ptr [ebp-10h]  +
call ds:LeaveCriticalSection  +
call sub_10015C0  +
retn 8  +
***
call sub_10015E0  +
mov esi ecx +
lea eax [esi+74h] +
push eax  +
lea ecx [ebp-10h] +
call sub_1002BED  +
mov eax [esi+58h] +
and dword ptr [ebp-4] 0 +
cmp eax 2 +
jnz loc_1009FE1  +
mov eax off_104B7E4 +
cmp dword ptr [eax+90h] 0 +
jnz loc_1009FAB  +
mov ecx esi +
call sub_100A834  +
test eax eax +
jnz loc_1009FAB  +
cmp [esi+44h] eax +
jnz loc_101D474  +
cmp dword ptr [ebp-10h] 0 +
jz loc_1009FBA  +
push dword ptr [ebp-10h]  +
call ds:LeaveCriticalSection  +
call sub_10015C0  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
lea eax [esi+10h] +
push eax  +
mov dword ptr [esi] offset off_1002BA8 +
call sub_1002BC9  +
mov dword ptr [esi] offset off_1002B70 +
pop esi  +
retn   +
***
cmp eax 4 +
jnz loc_1009FAB  +
jmp loc_1009F89  +
***
cmp dword ptr [ebp+8] 3 +
jz loc_1009ECE  +
and dword ptr [esi+6Ch] 0 +
jmp loc_1009ED4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push [ebp+arg_4]  +
mov ecx [eax+0Ch] +
call sub_1009E64  +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push 0  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call ds:EventWrite  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push esi  +
mov esi ecx +
lea eax [esi+10h] +
push eax  +
push 42h  +
call sub_1002C95  +
mov dword ptr [esi] offset off_1002B8C +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
lea eax [esi+10h] +
push eax  +
push 401h  +
call sub_1002C95  +
mov dword ptr [esi] offset off_1002BA8 +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ecx+8] +
mov eax [ebp+arg_0] +
sub esp 20h +
dec edx  +
cmp eax edx +
ja loc_101B6A7  +
mov [ecx+0Ch] eax +
mov ecx [ecx+4] +
xor edx edx +
mov [ecx+eax*2] dx +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax ecx +
xor ecx ecx +
mov [eax] ecx +
mov [eax+4] ecx +
mov [eax+8] ecx +
mov [eax+0Ch] ecx +
mov [eax+10h] ecx +
mov ecx [ebp+arg_0] +
mov [eax+14h] ecx +
pop ebp  +
retn 4  +
***
mov edi edi +
sub ecx eax +
sbb eax eax +
not eax  +
and ecx eax +
mov eax esp +
and eax 0FFFFF000h +
cmp ecx eax +
jb loc_100A18C  +
mov eax ecx +
pop ecx  +
xchg eax esp +
mov eax [eax] +
mov [esp+0] eax +
retn   +
sub eax 1000h +
test [eax] eax +
jmp loc_100A17E  +
***
mov edi edi +
push esi  +
push edi  +
mov esi ecx +
call sub_100A1D8  +
mov ecx eax +
mov eax [esi] +
dec eax  +
mov edi edx +
jnz loc_100A710  +
sub ecx [esi+4] +
mov eax dword_104A054 +
sbb edi [esi+8] +
cdq   +
cmp edi edx +
jl loc_100A1D0  +
jg loc_1011A43  +
cmp ecx eax +
ja loc_1011A43  +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push ebx  +
xor edi edi +
mov eax [esp+arg_4] +
or eax eax +
jl loc_101B3C0  +
mov eax [esp+arg_C] +
or eax eax +
jl loc_101B3D9  +
or eax eax +
jnz loc_101B3F2  +
mov ecx [esp+arg_8] +
mov eax [esp+arg_4] +
xor edx edx +
div  ecx +
mov ebx eax +
mov eax [esp+arg_0] +
div  ecx +
mov edx ebx +
dec edi  +
jz loc_101B438  +
pop ebx  +
pop esi  +
pop edi  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
cmp [ebp+arg_4] eax +
jz loc_100A288  +
cmp [ebp+arg_4] 7FFFFFFFh +
ja loc_100A288  +
test eax eax +
jl loc_100A286  +
push edi  +
mov edi [ebp+arg_0] +
lea eax [ebp+arg_C] +
push eax  +
push [ebp+arg_8]  +
mov eax [ebp+arg_4] +
push 0  +
call sub_100A294  +
pop edi  +
pop ebp  +
retn   +
mov eax 80070057h +
jmp loc_100A26C  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push [ebp+arg_8]  +
mov esi eax +
push [ebp+arg_4]  +
xor ebx ebx +
dec esi  +
push esi  +
push edi  +
call ds:_vsnwprintf  +
add esp 10h +
test eax eax +
jl loc_100A2CE  +
cmp eax esi +
ja loc_100A2CE  +
jz loc_100A2D3  +
mov ecx [ebp+arg_0] +
test ecx ecx +
jnz loc_101B59E  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 0Ch  +
mov ebx 8007007Ah +
xor eax eax +
mov [edi+esi*2] ax +
mov eax esi +
jmp loc_100A2BB  +
***
mov edi edi +
push ebp  +
mov ebp esp +
lea eax [ecx+10h] +
cmp [ecx+4] eax +
jnz loc_101B628  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
mov esi ecx +
lea ecx [esi+4] +
mov [esi] eax +
call sub_100A0C7  +
lea ecx [esi+98h] +
call sub_100A0C7  +
lea ecx [esi+12Ch] +
call sub_100A0E6  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
and dword ptr [esi+68h] 0 +
jmp loc_1009F03  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_100A1D8  +
mov ecx [esi] +
sub ecx 0 +
jnz loc_100AAF1  +
xor ecx ecx +
inc ecx  +
mov [esi+0Ch] ecx +
mov [esi] ecx +
mov [esi+8] edx +
mov [esi+4] eax +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 40h +
mov eax dword_104A044 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov esi ecx +
push dword ptr [esi+14h]  +
lea eax [ebp+var_24] +
push offset a08x  +
push 10h  +
xor ebx ebx +
push eax  +
mov [ebp+var_25] bl +
call sub_100A257  +
add esp 10h +
test eax eax +
jl loc_100A3D8  +
lea eax [ebp+var_2C] +
push eax  +
lea eax [ebp+var_40] +
push eax  +
push ebx  +
push 8  +
lea eax [ebp+var_24] +
push eax  +
push edi  +
push 80000002h  +
mov [ebp+var_40] ebx +
mov [ebp+var_3C] ebx +
mov [ebp+var_38] ebx +
mov [ebp+var_34] ebx +
mov [ebp+var_30] ebx +
mov [ebp+var_2C] 14h +
call ds:__imp_SHRegGetValueW  +
test eax eax +
jz loc_100AB0D  +
mov ecx [ebp+var_4] +
mov al [ebp+var_25] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1002A8B  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
lea eax [ebp+arg_8] +
push eax  +
push 4  +
push [ebp+arg_4]  +
call sub_100A40E  +
pop ebp  +
retn   +
***
call sub_1002A3A  +
mov esi ecx +
lea ecx [ebp-824h] +
call sub_100A0E6  +
and dword ptr [ebp-4] 0 +
lea eax [ebp-824h] +
push eax  +
mov ecx esi +
call sub_100A54A  +
mov eax [ebp-820h] +
mov [ebp-850h] eax +
mov eax [ebp+10h] +
xor edx edx +
inc edx  +
add eax 0FFFFFFFCh +
add eax 4 +
mov ecx [eax] +
movzx ebx dx +
mov [ebp+ebx*4-850h] ecx +
test ecx ecx +
jnz loc_100A497  +
mov ecx [esi] +
push 0  +
push 0  +
lea eax [ebp-850h] +
push eax  +
movzx eax dx +
push eax  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call sub_100A4A5  +
lea ecx [ebp-824h] +
mov esi eax +
call sub_1009FC5  +
mov eax esi +
call sub_1002A77  +
retn 0Ch  +
inc edx  +
cmp dx 0Bh +
jnb loc_100A464  +
jmp loc_100A451  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword_104B808 0 +
push esi  +
mov esi ecx +
jnz loc_100A4F4  +
push [ebp+dwEventID]  +
mov ecx offset unk_104A120 +
call sub_100A5F1  +
test al al +
jnz loc_100A4F4  +
mov ecx esi +
call sub_100A501  +
test eax eax +
jz loc_100A4F7  +
push [ebp+lpRawData]  +
movzx eax word ptr [esi+58h] +
push [ebp+lpStrings]  +
push [ebp+dwDataSize]  +
push dword ptr [ebp+wNumStrings]  +
push 0  +
push [ebp+dwEventID]  +
push eax  +
push dword ptr [ebp+wType]  +
push dword ptr [esi+54h]  +
call ds:ReportEventW  +
xor eax eax +
inc eax  +
pop esi  +
pop ebp  +
retn 18h  +
***
cmp dword_104B808 0 +
jnz loc_101E50D  +
push esi  +
lea esi [ecx+54h] +
cmp dword ptr [esi] 0 +
jnz loc_1011B05  +
push edi  +
push dword ptr [ecx+4]  +
push 0  +
call ds:RegisterEventSourceW  +
mov edi eax +
test edi edi +
jz loc_100A542  +
push 0  +
push edi  +
push esi  +
call ds:__imp_InterlockedCompareExchange  +
test eax eax +
jnz loc_101E511  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0FFFFFFFFh  +
push offset word_1041BC2  +
mov eax large fs:0 +
push eax  +
mov eax 182Ch +
call sub_100A16A  +
mov eax dword_104A044 +
xor eax ebp +
mov [ebp+var_10] eax +
push ebx  +
push esi  +
push edi  +
push eax  +
lea eax [ebp+var_C] +
mov large fs:0 eax +
mov esi [ebp+arg_0] +
mov edi ecx +
push 0  +
mov ecx esi +
call sub_100A108  +
mov eax [esi] +
push 0FFFFFFFFh  +
push dword ptr [esi+0Ch]  +
mov ecx esi +
push offset dword_100A5E8  +
call dword ptr [eax+10h]  +
cmp dword ptr [edi+0A4h] 0 +
mov ebx offset dword_100A5E4 +
jnz loc_101E0E7  +
cmp dword ptr [edi+10h] 0 +
jnz loc_101E0B7  +
cmp dword ptr [edi+138h] 0 +
jnz loc_101E154  +
mov ecx [ebp+var_C] +
mov large fs:0 ecx +
pop ecx  +
pop edi  +
pop esi  +
pop ebx  +
mov ecx [ebp+var_10] +
xor ecx ebp +
call sub_1002A8B  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
push ebx  +
push esi  +
push edi  +
mov edi ecx +
call sub_100A15A  +
movzx eax [ebp+arg_0] +
push eax  +
lea ecx [ebp+var_18] +
call sub_100A134  +
mov esi offset aSoftwareMicros +
push esi  +
lea ecx [ebp+var_18] +
call sub_100A366  +
lea ecx [ebp+var_18] +
call sub_100A6D6  +
push esi  +
lea ecx [ebp+var_18] +
mov bl al +
call sub_100A64E  +
xor eax eax +
cmp [ebp+var_18] 2 +
jz loc_101E585  +
or [edi+1] al +
pop edi  +
pop esi  +
mov al bl +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 28h +
mov eax dword_104A044 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov esi ecx +
push dword ptr [esi+14h]  +
lea eax [ebp+ValueName] +
push offset a08x  +
push 10h  +
push eax  +
xor bl bl +
call sub_100A257  +
add esp 10h +
test eax eax +
jl loc_100A6BE  +
lea eax [ebp+hKey] +
push eax  +
push 2  +
push 0  +
push edi  +
push 80000002h  +
call ds:RegOpenKeyExW  +
test eax eax +
jnz loc_100A6BE  +
push 14h  +
push esi  +
push 3  +
push eax  +
lea eax [ebp+ValueName] +
push eax  +
push [ebp+hKey]  +
call ds:RegSetValueExW  +
test eax eax +
jnz loc_100A6B5  +
inc bl  +
push [ebp+hKey]  +
call ds:RegCloseKey  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
mov al bl +
xor ecx ebp +
pop ebx  +
call sub_1002A8B  +
leave   +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_100A19A  +
mov ecx esi +
call sub_100A33C  +
mov ecx esi +
call sub_100A6FE  +
xor ecx ecx +
test al al +
setz cl  +
mov al cl +
pop esi  +
retn   +
***
mov eax [ecx] +
test eax eax +
jz loc_100A70D  +
cmp eax 1 +
jnz loc_101E53B  +
mov al 1 +
retn   +
***
dec eax  +
jnz loc_100A1D0  +
jmp loc_101E55B  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jg loc_100AB44  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
lea eax [ecx+10h] +
cmp [ecx+4] eax +
jnz loc_100FA6E  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi+0B8h] +
push edi  +
test eax eax +
jz loc_100A828  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov edi eax +
test edi edi +
jl loc_100A823  +
call sub_100B925  +
push dword ptr [esi+0E0h]  +
mov eax [esi] +
push dword ptr [esi+0DCh]  +
mov ecx esi +
call dword ptr [eax+38h]  +
mov edi eax +
test edi edi +
jl loc_100A823  +
mov ecx esi +
call sub_100AD7D  +
push dword ptr [esi+70h]  +
lea ecx [esi+0CCh] +
call sub_100B2AA  +
mov eax edi +
pop edi  +
pop esi  +
retn   +
***
mov edi 80004005h +
jmp loc_100A823  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
push edi  +
xor edi edi +
mov esi ecx +
inc edi  +
cmp dword ptr [esi+9Ch] 0 +
jz loc_100F70B  +
cmp dword ptr [esi+0A0h] 0 +
jz loc_100F70B  +
xor eax eax +
cmp [esi+9Ch] edi +
setz al  +
cmp dword_104A3AC 0 +
mov [ebp+var_4] eax +
jz loc_100A8A0  +
mov al byte_104A3B0 +
cmp al 4 +
jb loc_100F740  +
mov eax dword_104A398 +
mov ecx dword_104A39C +
mov edx 200h +
mov esi 80000000h +
and eax edx +
and ecx esi +
or eax ecx +
jnz loc_101D3F8  +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
leave   +
retn   +
***
call sub_1003649  +
mov eax [ebp+0Ch] +
mov esi [ebp+8] +
mov ebx ds:SetLastError +
push 0  +
mov edi ecx +
mov [ebp-230h] esi +
mov [ebp-224h] eax +
call ebx  +
mov eax [edi+9Ch] +
test eax eax +
jz loc_1011863  +
lea ecx [ebp-220h] +
push ecx  +
lea ecx [ebp-21Ch] +
push ecx  +
lea ecx [ebp-228h] +
push ecx  +
push 0  +
push esi  +
mov esi ds:RegQueryValueExW +
push eax  +
mov dword ptr [ebp-220h] 208h +
call esi  +
mov [ebp-22Ch] eax +
mov ecx 0EAh +
test eax eax +
jz loc_1011871  +
cmp eax ecx +
jz loc_1011871  +
push eax  +
call ebx  +
xor eax eax +
call sub_1002FBC  +
retn 8  +
***
mov edi edi +
push esi  +
mov esi ecx +
lea ecx [esi+4] +
mov dword ptr [esi] offset off_100A958 +
call sub_100A0C7  +
mov eax esi +
pop esi  +
retn   +
***
call sub_10015E0  +
mov esi ecx +
mov [ebp-10h] esi +
call sub_100A93F  +
xor ebx ebx +
mov [ebp-4] ebx +
mov dword ptr [esi] offset off_100AA50 +
mov dword ptr [esi+98h] 1 +
cmp [ebp+14h] ebx +
jnz loc_101DF15  +
push dword ptr [ebp+0Ch]  +
lea ecx [esi+4] +
call sub_100AA00  +
mov edi ds:SetLastError +
push ebx  +
call edi  +
lea ebx [esi+9Ch] +
push ebx  +
push dword ptr [ebp+10h]  +
push 0  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call ds:RegOpenKeyExW  +
test eax eax +
jnz loc_100CCB4  +
mov eax esi +
call sub_10015C0  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx] +
push 0FFFFFFFFh  +
push 0  +
push [ebp+arg_0]  +
call dword ptr [eax+10h]  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi+9Ch] +
mov dword ptr [esi] offset off_100AA50 +
test eax eax +
jz loc_100AA3F  +
cmp dword ptr [esi+98h] 0 +
jz loc_100AA3F  +
push eax  +
call ds:RegCloseKey  +
mov dword ptr [esi] offset off_100A958 +
lea ecx [esi+4] +
pop esi  +
jmp sub_10084DE  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov edi ecx +
mov ecx esi +
call sub_100AAAE  +
test al al +
jz loc_100AAA5  +
push 5  +
pop ecx  +
movs   +
mov al 1 +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
xor al al +
jmp loc_100AA9F  +
***
mov edi edi +
push ebx  +
push esi  +
push edi  +
mov esi ecx +
call sub_100A1D8  +
mov ecx [esi] +
mov edi eax +
xor eax eax +
sub ecx eax +
mov bl 1 +
jz loc_100AAE3  +
dec ecx  +
jnz loc_101E53E  +
cmp [esi+0Ch] eax +
mov ecx [esi+8] +
setnl bl  +
cmp ecx edx +
jg loc_100AAE9  +
jl loc_100AAE3  +
mov ecx [esi+4] +
cmp ecx edi +
ja loc_100AAE9  +
cmp bl al +
jz loc_100AAE9  +
mov al 1 +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
jle loc_100AADC  +
jmp loc_100AAE9  +
***
dec ecx  +
jnz loc_101E51D  +
mov ecx [esi+0Ch] +
cmp ecx dword_104A050 +
jge loc_101E529  +
inc ecx  +
mov [esi+0Ch] ecx +
pop esi  +
retn   +
***
cmp [ebp+var_2C] 14h +
jnz loc_100A3D8  +
lea eax [ebp+var_40] +
push eax  +
mov ecx esi +
call sub_100AA81  +
mov [ebp+var_25] al +
jmp loc_100A3D8  +
***
and eax 0FFFFh +
or eax 80070000h +
jmp loc_100A7B1  +
***
mov edi edi +
push esi  +
push 8001h  +
mov esi ecx +
call ds:SetErrorMode  +
mov [esi] eax +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 23Ch +
mov eax dword_104A044 +
xor eax ebp +
mov [ebp+var_4] eax +
push [ebp+arg_0]  +
lea eax [ebp+var_210] +
push 105h  +
push eax  +
call sub_1002525  +
push 3Fh  +
pop eax  +
mov word ptr [ebp+var_210+2] ax +
lea eax [ebp+var_210] +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_100ABAF  +
sub eax edx +
push esi  +
sar eax 1 +
lea esi [ebp+eax*2-212h] +
movzx eax word ptr [esi] +
push edi  +
push eax  +
call sub_1003A20  +
test eax eax +
jz loc_100ABD8  +
xor eax eax +
mov [esi] ax +
lea eax [ebp+var_210] +
push eax  +
lea eax [ebp+var_23C] +
push eax  +
call ds:RtlInitUnicodeString  +
and [ebp+var_228] 0 +
and [ebp+var_21C] 0 +
and [ebp+var_218] 0 +
lea eax [ebp+var_23C] +
mov [ebp+var_224] eax +
xor eax eax +
lea edi [ebp+var_234] +
stos   +
push 4021h  +
stos   +
push 0  +
lea eax [ebp+var_234] +
push eax  +
lea eax [ebp+var_22C] +
push eax  +
push 100000h  +
lea eax [ebp+var_214] +
push eax  +
mov [ebp+var_22C] 18h +
mov [ebp+var_220] 40h +
call ds:NtOpenFile  +
push eax  +
call ds:RtlNtStatusToDosError  +
pop edi  +
pop esi  +
test eax eax +
jnz loc_101B48D  +
push eax  +
call ds:SetLastError  +
mov ecx [ebp+var_4] +
mov eax [ebp+var_214] +
xor ecx ebp +
call sub_1002A8B  +
leave   +
retn 4  +
***
mov eax ecx +
or dword ptr [eax] 0FFFFFFFFh +
xor edx edx +
lea ecx [eax+630h] +
mov [eax+4] edx +
mov [eax+212h] dl +
mov [eax+213h] dl +
mov dword ptr [eax+62Ch] 3 +
mov [ecx] edx +
mov [ecx+4] edx +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
push [ebp+arg_0]  +
mov esi ecx +
mov edi 105h +
push edi  +
lea eax [esi+214h] +
push eax  +
mov byte ptr [esi+213h] 1 +
call sub_1002525  +
push [ebp+arg_4]  +
lea eax [esi+41Eh] +
push edi  +
push eax  +
call sub_1002525  +
mov eax [ebp+arg_8] +
mov [esi+628h] eax +
mov eax [ebp+arg_C] +
mov [esi+62Ch] eax +
mov eax [ebp+arg_10] +
pop edi  +
mov [esi+4] eax +
pop esi  +
pop ebp  +
retn 14h  +
***
call sub_10015E0  +
lea eax [ebp-14h] +
push eax  +
call sub_1002605  +
xor ebx ebx +
cmp eax ebx +
mov [ebp-10h] eax +
jl sub_101B7CB  +
mov edi [ebp-14h] +
push offset aSystemindex  +
mov ecx edi +
call sub_10027B1  +
cmp eax ebx +
mov [ebp-10h] eax +
jl sub_101B786  +
push dword ptr [ebp+8]  +
lea eax [edi+4] +
mov ecx [eax] +
push ebx  +
push eax  +
call dword ptr [ecx+0Ch]  +
cmp eax ebx +
mov [ebp-10h] eax +
jl loc_101B75B  +
cmp edi ebx +
jz loc_100AD6D  +
mov eax [edi] +
push 1  +
mov ecx edi +
call dword ptr [eax+78h]  +
mov eax [ebp-10h] +
call sub_10015C0  +
retn 8  +
***
call sub_1001862  +
xor esi esi +
mov [ebp-4] esi +
mov [ebp-20h] esi +
mov [ebp-1Ch] esi +
mov [ebp-18h] esi +
push 20019h  +
push lpSubKey  +
lea ecx [ebp-20h] +
push 80000002h  +
mov byte ptr [ebp-4] 1 +
call sub_100484B  +
lea eax [ebp-14h] +
push eax  +
push offset aSqmfulldrivein  +
lea ecx [ebp-20h] +
mov [ebp-14h] esi +
call sub_100480C  +
cmp eax esi +
jz loc_101C276  +
lea ecx [ebp-20h] +
call sub_1004887  +
call sub_10015C0  +
retn   +
***
mov eax [ecx+0B8h] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+18h]  +
retn   +
***
mov eax [esi+8Ch] +
jmp loc_1009EC1  +
call ds:GetTickCount64  +
test edx edx +
ja loc_1009EE1  +
jb loc_100AE15  +
cmp eax 2BF20h +
jnb loc_1009EE1  +
push 0B4h  +
call sub_1008AD9  +
jmp loc_1009EE1  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 420h +
mov eax dword_104A044 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
push edi  +
mov esi ecx +
mov eax 105h +
push eax  +
lea ecx [ebp+FileSystemNameBuffer] +
push ecx  +
lea ecx [ebp+FileSystemFlags] +
push ecx  +
xor edi edi +
push edi  +
push edi  +
push eax  +
lea eax [ebp+VolumeNameBuffer] +
push eax  +
lea eax [esi+8] +
push eax  +
call ds:GetVolumeInformationW  +
test eax eax +
jz loc_101B530  +
push dword ptr [esi+4]  +
lea eax [ebp+VolumeNameBuffer] +
push dword ptr [esi+62Ch]  +
mov ecx esi +
push [ebp+FileSystemFlags]  +
push eax  +
lea eax [ebp+FileSystemNameBuffer] +
push eax  +
call sub_100ACB4  +
mov ecx esi +
call sub_100AEB4  +
mov ecx [ebp+var_4] +
mov eax edi +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_1002A8B  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 28h +
mov eax dword_104A044 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
mov eax ecx +
xor ebx ebx +
mov [ebp+var_10] eax +
cmp [eax+213h] bl +
jz loc_100AF49  +
lea eax [ebp+dwDisposition] +
push eax  +
lea eax [ebp+hKey] +
push eax  +
push ebx  +
push 2001Fh  +
push ebx  +
push ebx  +
push ebx  +
push offset SubKey  +
push 80000002h  +
mov [ebp+var_24] offset off_100AB30 +
mov [ebp+hKey] ebx +
call ds:RegCreateKeyExW  +
test eax eax +
jnz loc_100AF39  +
push esi  +
push edi  +
mov esi offset asc_100AF58 +
lea edi [ebp+SubKey] +
movs   +
movs   +
mov esi [ebp+var_10] +
mov eax [esi+4] +
mov [ebp+var_14] ebx +
mov [ebp+var_10] eax +
cmp eax ebx +
jz loc_100AF37  +
test byte ptr [ebp+var_10] 1 +
jnz loc_100AFC4  +
shr [ebp+var_10] 1 +
inc [ebp+var_14]  +
cmp [ebp+var_10] ebx +
jnz loc_100AF22  +
pop edi  +
pop esi  +
push ebx  +
lea ecx [ebp+var_24] +
mov [ebp+var_24] offset off_100AB30 +
call sub_100B0B5  +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop ebx  +
call sub_1002A8B  +
leave   +
retn   +
***
mov eax [ebp+var_14] +
add eax 41h +
mov [ebp+SubKey] ax +
lea eax [ebp+dwDisposition] +
push eax  +
lea eax [ebp+phkResult] +
push eax  +
push ebx  +
push 2001Fh  +
push ebx  +
push ebx  +
push ebx  +
lea eax [ebp+SubKey] +
push eax  +
push [ebp+hKey]  +
mov [ebp+var_1C] offset off_100AB30 +
mov [ebp+phkResult] ebx +
call ds:RegCreateKeyExW  +
test eax eax +
jnz sub_100B081  +
push 4  +
pop edi  +
push edi  +
lea eax [esi+62Ch] +
push eax  +
push edi  +
push ebx  +
push offset ValueName  +
push [ebp+phkResult]  +
call ds:RegSetValueExW  +
mov ecx offset aRaw +
lea eax [esi+214h] +
mov dx [eax] +
cmp dx [ecx] +
jz loc_101B499  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
cmp eax ebx +
jz sub_100B081  +
lea ecx [esi+41Eh] +
mov eax ecx +
lea edx [eax+2] +
jmp loc_100B05C  +
***
mov dword ptr [ebp-1Ch] offset off_100AB30 +
call sub_100B0B5  +
jmp loc_100AF2C  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov eax [esi+4] +
push edi  +
mov edi [ebp+arg_0] +
cmp edi eax +
jz loc_100B0D3  +
test eax eax +
jz loc_100B0D3  +
push eax  +
call ds:RegCloseKey  +
mov [esi+4] edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_10015E0  +
mov ebx ecx +
xor esi esi +
lea ecx [ebp-18h] +
mov [ebp-10h] esi +
call sub_100AB58  +
push dword ptr [ebp+8]  +
mov [ebp-4] esi +
call ds:GetDriveTypeW  +
cmp eax 3 +
jnz loc_100B1BB  +
lea edi [ebx+0Ch] +
lea ecx [ebp-24h] +
mov [ebp-24h] edi +
mov [ebp-20h] esi +
mov [ebp-1Ch] esi +
call sub_100B1E1  +
mov esi eax +
test esi esi +
jz loc_100B14F  +
push dword ptr [ebp+8]  +
mov ecx esi +
call sub_100B260  +
test al al +
jnz loc_100B147  +
lea ecx [ebp-24h] +
call sub_100B1E1  +
mov esi eax +
test esi esi +
jnz loc_100B12B  +
test esi esi +
jnz loc_101B568  +
push 638h  +
call off_104B7F4  +
test eax eax +
jz loc_100B1CF  +
mov ecx eax +
call sub_100AC83  +
mov esi eax +
mov [ebp-14h] esi +
mov byte ptr [ebp-4] 1 +
test esi esi +
jz loc_100B1D3  +
push 3  +
push dword ptr [ebp+8]  +
mov ecx esi +
push dword ptr [ebx]  +
call sub_100B43E  +
mov [ebp-10h] eax +
test eax eax +
jl loc_100B1AC  +
push esi  +
mov ecx ebx +
mov byte ptr [esi+212h] 1 +
call sub_100B53E  +
mov ecx [edi] +
and dword ptr [ebp-14h] 0 +
mov [ebp-10h] eax +
lea eax [esi+630h] +
mov [eax] ecx +
mov [eax+4] esi +
mov [edi] eax +
mov ecx [ebp-14h] +
mov byte ptr [ebp-4] 0 +
test ecx ecx +
jnz loc_101B574  +
push dword ptr [ebp-18h]  +
call ds:SetErrorMode  +
mov eax [ebp-10h] +
call sub_10015C0  +
retn 4  +
xor esi esi +
jmp loc_100B167  +
mov dword ptr [ebp-10h] 8007000Eh +
jmp loc_100B1AC  +
***
mov eax [ecx+4] +
test eax eax +
jz loc_100B1F7  +
mov [ecx+8] eax +
mov eax [eax] +
mov [ecx+4] eax +
test eax eax +
jnz loc_100B20D  +
xor eax eax +
retn   +
cmp dword ptr [ecx+8] 0 +
jnz loc_100B1F4  +
mov eax [ecx] +
test eax eax +
jz loc_100B1F4  +
cmp dword ptr [eax] 0 +
jz loc_100B1F4  +
mov eax [eax] +
mov [ecx+4] eax +
mov eax [eax+4] +
retn   +
***
mov ecx [eax] +
lea edx [edi+41h] +
push edx  +
push eax  +
call dword ptr [ecx+0A8h]  +
test ebx ebx +
jl loc_100B24C  +
mov ebx eax +
jmp loc_100B24C  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
xor ebx ebx +
mov esi ecx +
xor edi edi +
mov eax [esi+8] +
test eax eax +
jz loc_100B252  +
cmp [ebp+arg_0] 0 +
jz loc_100B252  +
test byte ptr [ebp+arg_0] 1 +
jnz loc_100B211  +
shr [ebp+arg_0] 1 +
inc edi  +
jmp loc_100B239  +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
add ecx 8 +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_100B28F  +
test dx dx +
jz loc_100B2A1  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_100B28F  +
add eax 4 +
add ecx 4 +
test dx dx +
jnz loc_100B26B  +
jmp loc_100B2A1  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
xor ecx ecx +
test eax eax +
setz cl  +
mov al cl +
pop ebp  +
retn 4  +
xor eax eax +
jmp loc_100B294  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 28h +
mov eax dword_104A044 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push ebx  +
mov ebx ecx +
mov [ebx] eax +
call sub_100B6C1  +
mov [ebp+var_28] eax +
test eax eax +
jl loc_100B31E  +
push esi  +
push edi  +
push 8  +
pop ecx  +
xor eax eax +
lea edi [ebp+NotificationFilter] +
stos   +
mov [ebp+NotificationFilter] 20h +
mov [ebp+var_20] 5 +
mov esi offset dword_100AB34 +
lea edi [ebp+var_18] +
movs   +
movs   +
push 1  +
lea eax [ebp+NotificationFilter] +
movs   +
push eax  +
push dword ptr [ebx]  +
movs   +
call ds:RegisterDeviceNotificationW  +
pop edi  +
mov [ebx+4] eax +
pop esi  +
test eax eax +
jz loc_101B58D  +
cmp [ebp+var_28] 0 +
jl loc_100B31E  +
mov ecx ebx +
call sub_100B335  +
mov ecx [ebp+var_4] +
mov eax [ebp+var_28] +
xor ecx ebp +
pop ebx  +
call sub_1002A8B  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 214h +
mov eax dword_104A044 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
push edi  +
mov esi 105h +
push esi  +
lea eax [ebp+var_210] +
push eax  +
mov [ebp+var_214] ecx +
xor edi edi +
call ds:FindFirstVolumeW  +
mov ebx eax +
cmp ebx 0FFFFFFFFh +
jz loc_101B580  +
test edi edi +
jnz loc_100B3AB  +
mov ecx [ebp+var_214] +
lea eax [ebp+var_210] +
push eax  +
call sub_100B0E1  +
push esi  +
lea eax [ebp+var_210] +
push eax  +
push ebx  +
call ds:FindNextVolumeW  +
test eax eax +
jnz loc_100B373  +
call ds:__imp_GetLastError  +
mov edi eax +
cmp edi 12h +
jnz loc_100B373  +
xor edi edi +
push ebx  +
call ds:FindVolumeClose  +
test eax eax +
jz loc_101B580  +
mov ecx [ebp+var_214] +
call sub_100B3DF  +
push edi  +
call sub_100A7A1  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1002A8B  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push ebx  +
xor ebx ebx +
push esi  +
push edi  +
lea edi [ecx+0Ch] +
mov [ebp+var_10] ecx +
mov [ebp+var_8] ebx +
mov [ebp+var_C] ebx +
xor esi esi +
mov [ebp+var_1] bl +
mov [ebp+var_20] edi +
mov [ebp+var_1C] ebx +
mov [ebp+var_18] ebx +
cmp [ebp+var_1] bl +
jnz loc_100B419  +
lea ecx [ebp+var_20] +
call sub_100B1E1  +
mov esi eax +
cmp esi ebx +
jz loc_100B431  +
lea eax [esi+212h] +
mov [ebp+var_1] bl +
cmp [eax] bl +
jz loc_101B4CA  +
mov [eax] bl +
mov [ebp+var_C] esi +
jmp loc_100B406  +
mov eax [ebp+var_8] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 40h +
mov eax dword_104A044 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push esi  +
push edi  +
push [ebp+arg_4]  +
mov esi ecx +
mov [ebp+hRecipient] eax +
push 105h  +
lea eax [esi+8] +
push eax  +
call sub_1002525  +
mov ecx esi +
call sub_100B5B9  +
mov ecx esi +
mov [ebp+var_34] eax +
call sub_100AE29  +
or [ebp+var_38] 0FFFFFFFFh +
cmp [ebp+var_34] 0 +
mov edi offset off_100AB2C +
mov [ebp+var_3C] edi +
jl loc_100B4EC  +
push [ebp+arg_4]  +
call sub_100AB73  +
push eax  +
lea ecx [ebp+var_3C] +
call sub_100B511  +
cmp [ebp+var_38] 0FFFFFFFFh +
jz loc_101B54E  +
cmp [ebp+var_34] 0 +
jl loc_100B4EC  +
push 2Ch  +
lea eax [ebp+NotificationFilter] +
push 0  +
push eax  +
call memset  +
mov eax [ebp+var_38] +
add esp 0Ch +
mov [ebp+var_24] eax +
push 1  +
lea eax [ebp+NotificationFilter] +
push eax  +
push [ebp+hRecipient]  +
mov [ebp+NotificationFilter] 2Ch +
mov [ebp+var_2C] 6 +
call ds:RegisterDeviceNotificationW  +
mov [esi] eax +
test eax eax +
jz loc_101B55B  +
push 0FFFFFFFFh  +
lea ecx [ebp+var_3C] +
mov [ebp+var_3C] edi +
call sub_100B511  +
mov ecx [ebp+var_4] +
mov eax [ebp+var_34] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_1002A8B  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov eax [esi+4] +
push edi  +
mov edi [ebp+arg_0] +
cmp edi eax +
jz loc_100B530  +
cmp eax 0FFFFFFFFh +
jz loc_100B530  +
push eax  +
call ds:CloseHandle  +
mov [esi+4] edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
mov ebx ecx +
push edi  +
mov ecx esi +
call sub_100AE29  +
mov edi eax +
test edi edi +
jl loc_100B56F  +
mov ecx esi +
call sub_100B57D  +
test al al +
jz loc_100B56F  +
push dword ptr [esi+4]  +
mov ecx ebx +
call sub_100B22B  +
mov edi eax +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
cmp byte ptr [ecx+213h] 0 +
jz loc_100B5A9  +
mov edx offset aRaw +
lea eax [ecx+214h] +
mov cx [eax] +
cmp cx [edx] +
jz loc_101B444  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
test eax eax +
jz loc_100B5A9  +
mov al 1 +
retn   +
xor al al +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push ebx  +
push esi  +
mov esi ds:GetVolumePathNamesForVolumeNameW +
push edi  +
lea edi [ecx+8] +
mov [ebp+var_10] ecx +
xor eax eax +
lea ecx [ebp+var_8] +
push ecx  +
push eax  +
push eax  +
push edi  +
mov [ebp+var_4] eax +
mov [ebp+var_C] eax +
call esi  +
test eax eax +
jnz loc_100B696  +
call ds:__imp_GetLastError  +
cmp eax 0EAh +
jnz loc_100B696  +
mov eax [ebp+var_8] +
push 2  +
xor ecx ecx +
pop edx  +
mul  edx +
seto cl  +
neg ecx  +
or eax ecx +
push eax  +
call off_104B7F4  +
mov ebx eax +
test ebx ebx +
jz loc_100B68D  +
lea eax [ebp+var_8] +
push eax  +
push [ebp+var_8]  +
push ebx  +
push edi  +
call esi  +
test eax eax +
jz loc_101B475  +
cmp word ptr [ebx] 0 +
mov esi ebx +
jz loc_100B671  +
push esi  +
call ds:PathIsRootW  +
test eax eax +
jz loc_100B655  +
movzx eax word ptr [esi] +
push eax  +
call sub_100B6A4  +
movzx ecx ax +
xor eax eax +
sub ecx 41h +
inc eax  +
shl eax cl +
or [ebp+var_C] eax +
mov eax esi +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_100B65A  +
sub eax edx +
sar eax 1 +
lea esi [esi+eax*2+2] +
cmp [esi] cx +
jnz loc_100B633  +
push ebx  +
call off_104B7F0  +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
test eax eax +
jl locret_100B68B  +
mov ecx [ebp+var_C] +
mov edx [ebp+var_10] +
mov [edx+4] ecx +
leave   +
retn   +
mov [ebp+var_4] 8007000Eh +
jmp loc_100B678  +
mov [ebp+var_4] 8000FFFFh +
jmp loc_100B678  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 5Ah +
movzx eax [ebp+arg_0] +
ja loc_101B46D  +
pop ebp  +
retn 4  +
***
call sub_10015E0  +
mov edi ecx +
xor ebx ebx +
mov [ebp-38h] ebx +
lea eax [ebp-38h] +
push eax  +
push offset stru_1002154  +
push 15h  +
push ebx  +
push offset rclsid  +
mov [ebp-4] ebx +
call ds:CoCreateInstance  +
mov esi eax +
cmp esi ebx +
jl loc_100B8D4  +
mov [ebp-34h] ebx +
mov eax [ebp-38h] +
mov ecx [eax] +
lea edx [ebp-34h] +
push edx  +
push eax  +
mov byte ptr [ebp-4] 1 +
call dword ptr [ecx+1Ch]  +
mov esi eax +
cmp esi ebx +
jl loc_100B8C4  +
mov [ebp-14h] ebx +
push offset aWindows  +
lea ecx [ebp-14h] +
mov byte ptr [ebp-4] 2 +
call sub_1009C37  +
cmp [ebp-14h] ebx +
jz loc_100B8BB  +
mov [ebp-30h] ebx +
mov eax [ebp-34h] +
mov ecx [eax] +
lea edx [ebp-30h] +
push edx  +
push dword ptr [ebp-14h]  +
mov byte ptr [ebp-4] 3 +
push eax  +
call dword ptr [ecx+20h]  +
mov esi eax +
cmp esi ebx +
jnz loc_100B8AA  +
mov [ebp-2Ch] ebx +
mov eax [ebp-30h] +
mov ecx [eax] +
lea edx [ebp-2Ch] +
push edx  +
push offset dword_100887C  +
push eax  +
mov byte ptr [ebp-4] 4 +
call dword ptr [ecx]  +
mov esi eax +
cmp esi ebx +
jl loc_100B899  +
mov [ebp-28h] ebx +
mov eax [ebp-2Ch] +
mov ecx [eax] +
lea edx [ebp-28h] +
push edx  +
push eax  +
mov byte ptr [ebp-4] 5 +
call dword ptr [ecx+20h]  +
mov esi eax +
cmp esi ebx +
jl loc_100B888  +
mov [ebp-24h] ebx +
mov eax [ebp-28h] +
mov ecx [eax] +
lea edx [ebp-24h] +
push edx  +
push offset dword_100886C  +
push eax  +
mov byte ptr [ebp-4] 6 +
call dword ptr [ecx]  +
mov esi eax +
cmp esi ebx +
jl loc_100B877  +
mov [ebp-10h] ebx +
push offset aSystemindex  +
lea ecx [ebp-10h] +
mov byte ptr [ebp-4] 7 +
call sub_1009C37  +
cmp [ebp-10h] ebx +
jz loc_100B86E  +
mov [ebp-20h] ebx +
mov eax [ebp-24h] +
mov ecx [eax] +
lea edx [ebp-20h] +
push edx  +
push dword ptr [ebp-10h]  +
mov byte ptr [ebp-4] 8 +
push eax  +
call dword ptr [ecx+20h]  +
mov esi eax +
cmp esi ebx +
jnz loc_100B85D  +
mov [ebp-1Ch] ebx +
mov eax [ebp-20h] +
mov ecx [eax] +
lea edx [ebp-1Ch] +
push edx  +
push offset dword_100888C  +
push eax  +
mov byte ptr [ebp-4] 9 +
call dword ptr [ecx]  +
mov esi eax +
cmp esi ebx +
jl loc_100B84C  +
mov [ebp-18h] ebx +
mov eax [ebp-1Ch] +
mov ecx [eax] +
lea edx [ebp-18h] +
push edx  +
push eax  +
mov byte ptr [ebp-4] 0Ah +
call dword ptr [ecx+20h]  +
mov esi eax +
cmp esi ebx +
jl loc_100B83B  +
mov eax [ebp-18h] +
mov ecx [eax] +
add edi 8 +
push edi  +
push offset dword_100B8F8  +
push eax  +
call dword ptr [ecx]  +
mov esi eax +
mov eax [ebp-18h] +
mov byte ptr [ebp-4] 9 +
cmp eax ebx +
jz loc_100B84C  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-1Ch] +
mov byte ptr [ebp-4] 8 +
cmp eax ebx +
jz loc_100B85D  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-20h] +
mov byte ptr [ebp-4] 7 +
cmp eax ebx +
jz loc_100B86E  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
push dword ptr [ebp-10h]  +
call ds:SysFreeString  +
mov eax [ebp-24h] +
mov byte ptr [ebp-4] 5 +
cmp eax ebx +
jz loc_100B888  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-28h] +
mov byte ptr [ebp-4] 4 +
cmp eax ebx +
jz loc_100B899  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-2Ch] +
mov byte ptr [ebp-4] 3 +
cmp eax ebx +
jz loc_100B8AA  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-30h] +
mov byte ptr [ebp-4] 2 +
cmp eax ebx +
jz loc_100B8BB  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
push dword ptr [ebp-14h]  +
call ds:SysFreeString  +
mov eax [ebp-34h] +
mov [ebp-4] bl +
cmp eax ebx +
jz loc_100B8D4  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
cmp esi 1 +
jz loc_101B4C0  +
mov eax [ebp-38h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
cmp eax ebx +
jz loc_100B8EE  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax esi +
call sub_10015C0  +
retn   +
***
call sub_1002A3A  +
xor ebx ebx +
mov [ebp-304h] ebx +
lea ecx [ebp-0BB0h] +
mov [ebp-4] ebx +
call sub_100A0E6  +
push eax  +
lea eax [ebp-304h] +
push eax  +
mov byte ptr [ebp-4] 1 +
call sub_100AD0C  +
lea ecx [ebp-0BB0h] +
mov esi eax +
mov [ebp-4] bl +
call sub_1009FC5  +
push ebx  +
push 2001Bh  +
push offset aSoftwareMicr_0  +
push 80000002h  +
lea ecx [ebp-300h] +
call sub_100A989  +
cmp esi ebx +
jl loc_100B9C3  +
lea ecx [ebp-1CCh] +
call sub_100A0C7  +
lea eax [ebp-1CCh] +
push eax  +
push offset aOlddatadirecto  +
lea ecx [ebp-300h] +
mov byte ptr [ebp-4] 3 +
call sub_100A8AC  +
test eax eax +
jnz sub_101BB6C  +
lea ecx [ebp-1CCh] +
call sub_10084DE  +
lea ecx [ebp-300h] +
mov [ebp-4] bl +
call sub_100AA1A  +
mov eax [ebp-304h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
cmp eax ebx +
jz loc_100B9E5  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
call sub_1002A77  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0FFFFFFFFh  +
push offset word_103F7BE  +
mov eax large fs:0 +
push eax  +
mov eax 19FCh +
call sub_100A16A  +
mov eax dword_104A044 +
xor eax ebp +
mov [ebp-10h] eax +
push ebx  +
push esi  +
push edi  +
push eax  +
lea eax [ebp-0Ch] +
mov large fs:0 eax +
mov [ebp-1A00h] ecx +
cmp dword_104A3AC 0 +
mov edi 200h +
mov esi 80000000h +
jz loc_100BAAC  +
mov al byte_104A3B0 +
cmp al 4 +
jb loc_100BAEF  +
mov eax dword_104A398 +
mov ecx dword_104A39C +
and eax edi +
and ecx esi +
or eax ecx +
jnz loc_101BE10  +
xor ebx ebx +
cmp dword ptr [ebp+8] 2 +
mov [ebp-19FCh] ebx +
jz loc_101BE4E  +
cmp dword ptr [ebp+8] 1 +
jz loc_101BE4E  +
call sub_100BB05  +
mov eax [ebp-19FCh] +
mov ecx [ebp-0Ch] +
mov large fs:0 ecx +
pop ecx  +
pop edi  +
pop esi  +
pop ebx  +
mov ecx [ebp-10h] +
xor ecx ebp +
call sub_1002A8B  +
leave   +
retn 8  +
***
test al al +
jz loc_100BA95  +
jmp loc_100BAAC  +
***
cmp dword ptr [ebp-19FCh] 0 +
jge loc_100BAC8  +
jmp loc_100BACD  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push esi  +
lea eax [ebp+hkey] +
push eax  +
push 0F003Fh  +
push 0  +
push offset aSoftwareMicr_0  +
push 80000002h  +
call ds:RegOpenKeyExW  +
push eax  +
call sub_100A7A1  +
mov esi eax +
test esi esi +
jl loc_100BB7E  +
lea eax [ebp+pcbData] +
push eax  +
push offset aSetupcompleted  +
push [ebp+hkey]  +
call sub_100BBAB  +
mov esi eax +
test esi esi +
jl loc_100BB75  +
cmp [ebp+pcbData] 1 +
jnz loc_100BB75  +
push offset pszSubKey  +
push [ebp+hkey]  +
call ds:SHDeleteKeyW  +
push eax  +
call sub_100A7A1  +
mov esi eax +
test esi esi +
jge loc_100BB75  +
cmp esi 80070002h +
jnz loc_100BB75  +
xor esi esi +
push [ebp+hkey]  +
call ds:RegCloseKey  +
mov eax esi +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov ecx [ebp+pcbData] +
and dword ptr [ecx] 0 +
push 4  +
pop eax  +
mov [ebp+pdwType] eax +
mov [ebp+pcbData] eax +
lea eax [ebp+pcbData] +
push eax  +
push ecx  +
lea eax [ebp+pdwType] +
push eax  +
push [ebp+pszValue]  +
push 0  +
push [ebp+hkey]  +
call ds:SHGetValueW  +
push eax  +
call sub_100A7A1  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+8] +
push edi  +
lea eax [esi+4] +
push eax  +
call ds:InterlockedDecrement  +
mov edi eax +
test edi edi +
jz loc_1011AD0  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
test byte ptr [ebp-3Ch] 1 +
jnz loc_101CC72  +
push 0Ah  +
pop eax  +
push eax  +
push esi  +
push 0  +
push offset __ImageBase  +
call sub_100EB97  +
mov dword_104A084 eax +
cmp dword_104A078 0 +
jnz loc_101CCC3  +
push eax  +
call ds:exit  +
***
mov edi edi +
push ebx  +
xor ebx ebx +
push esi  +
push edi  +
cmp dword_104A3AC ebx +
jz loc_100BC8A  +
mov al byte_104A3B0 +
cmp al 4 +
jb loc_100BD25  +
mov eax dword_104A398 +
mov ecx dword_104A39C +
mov edx 200h +
mov esi 80000000h +
and eax edx +
and ecx esi +
or eax ecx +
jnz loc_101D77A  +
push ebx  +
push (offset byte_10089E8+1)  +
push offset aWsearch  +
call ds:RegisterServiceCtrlHandlerExW  +
mov ecx off_104B7E4 +
mov [ecx+70h] eax +
mov eax off_104B7E4 +
cmp [eax+70h] ebx +
jz loc_101D7B8  +
mov ecx off_104B7E4 +
push 2  +
call sub_1009E64  +
push ebx  +
push ebx  +
call ds:CoInitializeEx  +
mov edi eax +
cmp edi ebx +
jl loc_100BD1F  +
mov eax off_104B7E4 +
mov esi ds:GetCurrentProcess +
push ebx  +
push ebx  +
push 100000h  +
add eax 0B4h +
push eax  +
call esi  +
push eax  +
call ds:GetCurrentThread  +
push eax  +
call esi  +
push eax  +
call ds:DuplicateHandle  +
test eax eax +
jz loc_101D7C2  +
cmp edi ebx +
jl loc_100BD44  +
mov ecx off_104B7E4 +
mov eax [ecx] +
push ebx  +
call dword ptr [eax+34h]  +
cmp eax ebx +
jl loc_100BD3C  +
mov ecx off_104B7E4 +
call sub_1009A38  +
pop edi  +
pop esi  +
pop ebx  +
retn 8  +
***
cmp al bl +
jz loc_100BC69  +
jmp loc_100BC8A  +
***
cmp eax ebx +
jge loc_100BCB2  +
jmp loc_100BD1F  +
***
push eax  +
call sub_100BFCD  +
jmp loc_100BD1F  +
***
call ds:CoUninitialize  +
jmp loc_100BD1F  +
***
lea ecx [ebp-424h] +
call sub_100C7C9  +
mov eax [ebp-424h] +
xor edi edi +
cmp eax edi +
mov byte ptr [ebp-4] 0Ah +
jl loc_101C8F6  +
mov esi offset unk_104A180 +
push offset off_104A740  +
mov ecx esi +
call sub_1010679  +
cmp eax edi +
jl loc_101C8F6  +
mov ecx esi +
call sub_100BEBD  +
push 3  +
push 0B86h  +
call sub_1002C0D  +
call ds:CoUninitialize  +
mov [ebp-4] edi +
call ds:?Cleanup@CSearchServiceObj@@SGHXZ  +
cmp dword_104A3AC 0 +
jz loc_100BE41  +
mov dl byte_104A3B0 +
cmp dl 4 +
jb loc_100BE8C  +
mov eax dword_104A398 +
mov ecx dword_104A39C +
mov edi 200h +
mov ebx 80000000h +
and eax edi +
and ecx ebx +
or eax ecx +
jnz loc_101C843  +
cmp dword_104A3AC 0 +
jz loc_100BE41  +
cmp dl 4 +
jb loc_100BE99  +
mov eax dword_104A398 +
mov ecx dword_104A39C +
mov edi 80010000h +
and eax 5 +
and ecx edi +
or eax ecx +
jz loc_100BE41  +
mov edx dword_104A3A0 +
mov esi dword_104A3A4 +
mov eax edx +
mov ecx esi +
and eax 5 +
and ecx edi +
cmp eax edx +
jnz loc_100BE41  +
cmp ecx esi +
jnz loc_100BE41  +
push offset dword_100BEA8  +
push dword_104A134  +
push dword_104A130  +
call sub_100A01E  +
push offset dword_104A130  +
call sub_1011A50  +
or dword ptr [ebp-4] 0FFFFFFFFh +
cmp dword ptr [ebp-440h] 0 +
jz loc_100BE64  +
push dword ptr [ebp-440h]  +
call off_104B7F0  +
mov eax [ebp-434h] +
call sub_1002FBC  +
retn 10h  +
test al al +
jz loc_100EC1F  +
jmp loc_100EC6D  +
test al al +
jz loc_100EC82  +
jmp loc_100ECA3  +
test dl dl +
jz loc_100BDC2  +
jmp loc_100BDE3  +
test dl dl +
jnz loc_100BE41  +
jmp loc_100BDF5  +
***
cmp dword_104A3AC 0 +
push ebx  +
push esi  +
mov ebx ecx +
jz loc_100BEF4  +
mov al byte_104A3B0 +
cmp al 4 +
jb loc_100BF28  +
mov eax dword_104A398 +
mov ecx dword_104A39C +
mov edx 200h +
mov esi 80000000h +
and eax edx +
and ecx esi +
or eax ecx +
jnz loc_101D1DD  +
lea eax [ebx+0A4h] +
push eax  +
call ds:StartServiceCtrlDispatcherW  +
test eax eax +
jz loc_100BF25  +
lea esi [ebx+0B4h] +
mov eax [esi] +
test eax eax +
jz loc_100BF25  +
push 0FFFFFFFFh  +
push eax  +
call ds:WaitForSingleObject  +
push dword ptr [esi]  +
call ds:CloseHandle  +
and dword ptr [esi] 0 +
pop esi  +
pop ebx  +
retn   +
test al al +
jz loc_100BED3  +
jmp loc_100BEF4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
lea ecx [esi+0CCh] +
call sub_100BF63  +
mov esi [esi+0B8h] +
test esi esi +
jz loc_100BF59  +
push dword ptr [ebp+8]  +
mov eax [esi] +
push esi  +
call dword ptr [eax+0Ch]  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi+4] +
cmp eax 0FFFFFFFFh +
jz loc_100BF7B  +
push eax  +
call ds:UnregisterDeviceNotification  +
or dword ptr [esi+4] 0FFFFFFFFh +
mov eax [esi+8] +
test eax eax +
jz loc_100BF8C  +
and dword ptr [esi+8] 0 +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
xor eax eax +
pop esi  +
retn   +
***
cmp eax ebx +
jz loc_101D6B1  +
mov ecx off_104B7E4 +
cmp dword ptr [ecx+50h] 0 +
jnz loc_101D76C  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-950h] +
call sub_100C0D9  +
push edi  +
call sub_100BFCD  +
mov eax edi +
call sub_1002A77  +
retn   +
***
call sub_1002A3A  +
mov eax off_104B7E4 +
xor edi edi +
cmp [eax+94h] edi +
jnz loc_100C0C5  +
push 3E8h  +
mov esi 0B86h +
push esi  +
call sub_1002C0D  +
mov ecx off_104B7E4 +
push dword ptr [ecx+98h]  +
mov eax [ecx] +
call dword ptr [eax+28h]  +
push 7D0h  +
push esi  +
call sub_1002C0D  +
mov ecx off_104B7E4 +
cmp [ecx+90h] edi +
jz loc_100C039  +
call sub_1012359  +
mov eax off_104B7E4 +
mov [eax+90h] edi +
push 0BB8h  +
push esi  +
call sub_1002C0D  +
call ds:CoUninitialize  +
mov eax off_104B7E4 +
cmp [eax+30h] edi +
jz loc_100C08A  +
push dword ptr [eax+30h]  +
lea ecx [ebp-950h] +
call sub_100A2FC  +
push edi  +
push ds:dword_100C0D0  +
lea eax [ebp-950h] +
push eax  +
mov [ebp-4] edi +
call sub_100A3F1  +
or dword ptr [ebp-4] 0FFFFFFFFh +
add esp 0Ch +
lea ecx [ebp-950h] +
call sub_100C0D9  +
push 0FA0h  +
push esi  +
call sub_1002C0D  +
mov ecx off_104B7E4 +
mov eax [ecx] +
call dword ptr [eax+2Ch]  +
mov esi [ebp+8] +
cmp esi edi +
jl loc_101D4F8  +
mov ecx off_104B7E4 +
xor esi esi +
inc esi  +
push esi  +
call sub_1009E64  +
mov eax off_104B7E4 +
mov [eax+94h] esi +
call sub_1002A77  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
lea ecx [esi+12Ch] +
call sub_1009FC5  +
lea ecx [esi+98h] +
call sub_10084DE  +
lea ecx [esi+4] +
pop esi  +
jmp sub_10084DE  +
***
cmp dword ptr [ebp+8] 2 +
jnz loc_1009EB6  +
jmp loc_101D499  +
test al al +
jz loc_1009F19  +
jmp loc_1009F3A  +
***
cmp dword_104A3AC 0 +
jz loc_100C17B  +
mov al byte_104A3B0 +
cmp al 4 +
jb loc_101B30A  +
mov eax dword_104A398 +
mov edx dword_104A39C +
mov ecx 80010000h +
and eax 5 +
and edx ecx +
or eax edx +
jz loc_100C17B  +
mov esi dword_104A3A0 +
mov ebx dword_104A3A4 +
mov eax esi +
mov edx ebx +
and eax 5 +
and edx ecx +
cmp eax esi +
jnz loc_100C17B  +
cmp edx ebx +
jnz loc_100C17B  +
push offset dword_100C1C8  +
push dword_104A134  +
push dword_104A130  +
call sub_100A01E  +
xor esi esi +
xor eax eax +
inc esi  +
cmp edi esi +
setnz al  +
inc eax  +
push eax  +
push 0B86h  +
call sub_1002C0D  +
cmp edi 5 +
jnz loc_101B317  +
mov eax off_104B7E4 +
mov [eax+98h] esi +
mov ecx off_104B7E4 +
push 3  +
call sub_1009E64  +
mov eax off_104B7E4 +
push dword ptr [eax+38h]  +
call ds:SetEvent  +
jmp loc_1008A71  +
***
mov edi edi +
push ebp  +
mov ebp esp +
test byte ptr dword_104A070 1 +
jnz loc_100C6F5  +
or dword_104A070 1 +
call ds:GetSystemDefaultLCID  +
mov dword_104A06C eax +
cmp dword_104A06C 41Fh +
jz loc_101B5D5  +
pop ebp  +
jmp ds:lstrcmpiW  +
***
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
push esi  +
mov esi ecx +
lea ecx [esi+8] +
mov byte ptr [esi] 0 +
mov [esi+4] eax +
call sub_100A0C7  +
lea ecx [esi+9Ch] +
call sub_100A0C7  +
lea ecx [esi+130h] +
call sub_100A0C7  +
lea ecx [esi+1C4h] +
call sub_100A0C7  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_100A93F  +
and dword ptr [esi+98h] 0 +
and dword ptr [esi+9Ch] 0 +
mov dword ptr [esi] offset off_100AA50 +
mov eax esi +
pop esi  +
retn   +
***
push off_104B7EC  +
call sub_100E521  +
retn   +
***
mov edi edi +
push esi  +
xor eax eax +
push eax  +
mov esi ecx +
push eax  +
mov [esi] eax +
call ds:CoInitializeEx  +
mov [esi] eax +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+28h] +
xor ecx ecx +
cmp eax ecx +
jz loc_100C826  +
mov edx [ebp+0Ch] +
sub edx ecx +
jz loc_101C0EB  +
dec edx  +
jnz loc_100C826  +
mov cl [ebp+10h] +
mov [eax+28h] cl +
mov ecx [ebp+14h] +
mov [eax+10h] ecx +
mov ecx [ebp+18h] +
mov [eax+14h] ecx +
mov ecx [ebp+1Ch] +
mov [eax+18h] ecx +
mov ecx [ebp+20h] +
mov dword ptr [eax+24h] 1 +
mov [eax+1Ch] ecx +
pop ebp  +
retn 24h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_C] +
mov ecx [eax] +
or ecx [eax+4] +
jnz loc_101C0FF  +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call ds:EventRegister  +
pop ebp  +
retn 10h  +
***
mov eax [edi] +
push edi  +
call dword ptr [eax+4]  +
jmp loc_100167D  +
***
push offset dword_104A080  +
push dword_104BA98  +
mov dword_104A080 eax +
push offset unk_104A278  +
push offset unk_104A27C  +
push offset unk_104A274  +
call ds:__getmainargs  +
add esp 14h +
mov dword_104A07C eax +
retn   +
***
call ds:SetUnhandledExceptionFilter  +
xor eax eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov eax dword_104A044 +
and [ebp+SystemTimeAsFileTime.dwLowDateTime] 0 +
and [ebp+SystemTimeAsFileTime.dwHighDateTime] 0 +
push ebx  +
push edi  +
mov edi 0BB40E64Eh +
mov ebx 0FFFF0000h +
cmp eax edi +
jnz loc_101CDE0  +
push esi  +
lea eax [ebp+SystemTimeAsFileTime] +
push eax  +
call ds:GetSystemTimeAsFileTime  +
mov esi [ebp+SystemTimeAsFileTime.dwHighDateTime] +
xor esi [ebp+SystemTimeAsFileTime.dwLowDateTime] +
call ds:GetCurrentProcessId  +
xor esi eax +
call ds:GetCurrentThreadId  +
xor esi eax +
call ds:GetTickCount  +
xor esi eax +
lea eax [ebp+PerformanceCount] +
push eax  +
call ds:QueryPerformanceCounter  +
mov eax dword ptr [ebp+PerformanceCount+4] +
xor eax dword ptr [ebp+PerformanceCount] +
xor esi eax +
cmp esi edi +
jz loc_100C94A  +
test dword_104A044 ebx +
jz loc_100C94A  +
mov dword_104A044 esi +
not esi  +
mov dword_104A048 esi +
pop esi  +
pop edi  +
pop ebx  +
leave   +
retn   +
mov esi 0BB40E64Fh +
jmp loc_100C937  +
***
call sub_10015E0  +
mov esi [ebp+8] +
and dword ptr [ebp-10h] 0 +
mov [ebp-14h] esi +
xor edi edi +
lea eax [ebp+0Ch] +
inc edi  +
push eax  +
mov ecx esi +
mov [ebp-4] edi +
call sub_100EA61  +
mov eax [esi+0Ch] +
mov ecx [esi+4] +
cmp word ptr [ecx+eax*2-2] 5Ch +
mov [ebp-10h] edi +
jnz loc_100C997  +
dec eax  +
push eax  +
mov ecx esi +
call sub_100A108  +
lea ecx [ebp+0Ch] +
call sub_10084DE  +
mov eax esi +
call sub_10015C0  +
retn 98h  +
***
mov eax offset byte_10410F9 +
call sub_10015E0  +
mov esi ecx +
cmp byte ptr [esi+258h] 0 +
jnz loc_101CF96  +
cmp byte ptr [esi+259h] 0 +
jnz loc_101CFBC  +
call sub_10015C0  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+pUnk] 0 +
push esi  +
mov esi [ebp+arg_0] +
mov eax [esi+8] +
test eax eax +
jz loc_100CA32  +
push edi  +
lea ecx [ebp+pUnk] +
push ecx  +
push offset dword_1008B78  +
push dword ptr [esi+0Ch]  +
call eax  +
mov edi eax +
test edi edi +
jl loc_100CA22  +
lea eax [esi+14h] +
push eax  +
push [ebp+flags]  +
push [ebp+dwClsContext]  +
push [ebp+pUnk]  +
push dword ptr [esi]  +
call ds:CoRegisterClassObject  +
mov edi eax +
mov eax [ebp+pUnk] +
test eax eax +
jz loc_100CA2F  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax edi +
pop edi  +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_8] +
test esi esi +
jnz loc_101D001  +
mov eax [ebp+arg_0] +
cmp eax 0FFFFFFFFh +
jz loc_100CA70  +
mov [ecx+2Ch] eax +
test eax eax +
jz loc_100CA70  +
cmp dword ptr [eax] 0 +
mov esi eax +
jz loc_100CA70  +
push 1  +
call dword ptr [esi+20h]  +
add esi 24h +
cmp dword ptr [esi] 0 +
jnz loc_100CA63  +
mov esi dword_104A33C +
cmp esi dword_104A340 +
jb loc_101D011  +
xor eax eax +
pop esi  +
pop ebp  +
retn 0Ch  +
***
push ebp  +
mov ebp esp +
push dword ptr [ebp+8]  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebx  +
push offset aGlobalWsearchm  +
xor ebx ebx +
push ebx  +
push 100000h  +
call ds:OpenEventW  +
cmp eax ebx +
jnz loc_101D2B0  +
mov al bl +
pop ebx  +
retn   +
***
call sub_1001862  +
mov esi ecx +
mov [ebp-14h] esi +
push dword ptr [esi]  +
call off_104B7F0  +
push dword ptr [esi+4]  +
mov edi ds:__imp_free +
xor ebx ebx +
mov [esi] ebx +
call edi  +
push dword ptr [esi+8]  +
mov [esi+4] ebx +
call edi  +
push dword ptr [esi+0Ch]  +
mov [esi+8] ebx +
call edi  +
push dword ptr [esi+10h]  +
mov [esi+0Ch] ebx +
call edi  +
add esp 10h +
push 14h  +
mov [esi+10h] ebx +
mov [ebp-4] ebx +
call off_104B7F4  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov [esi] eax +
mov eax [esi] +
cmp eax ebx +
jz loc_100CB87  +
push 1  +
push eax  +
call ds:InitializeSecurityDescriptor  +
test eax eax +
jz loc_101D2D2  +
xor eax eax +
call sub_10015C0  +
retn   +
mov eax 8007000Eh +
jmp loc_100CB81  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
xor eax eax +
mov [ebp+TokenHandle] eax +
cmp edi eax +
jz loc_100CBA9  +
mov [edi] eax +
mov esi [ebp+arg_4] +
cmp esi eax +
jz loc_100CBB2  +
mov [esi] eax +
lea eax [ebp+TokenHandle] +
push eax  +
push [ebp+OpenAsSelf]  +
push 8  +
call ds:GetCurrentThread  +
push eax  +
call ds:OpenThreadToken  +
test eax eax +
jnz loc_101D302  +
call sub_100F56E  +
mov esi eax +
pop edi  +
mov eax esi +
pop esi  +
leave   +
retn 0Ch  +
***
call sub_1001862  +
mov edi [ebp+0Ch] +
xor esi esi +
cmp edi esi +
jz loc_101D31C  +
cmp [ebp+8] esi +
jz loc_101D326  +
lea eax [ebp-20h] +
push eax  +
lea eax [ebp-18h] +
push eax  +
push esi  +
lea eax [ebp-1Ch] +
push eax  +
push esi  +
push dword ptr [ebp+8]  +
mov [edi] esi +
push esi  +
mov [ebp-14h] esi +
mov [ebp-18h] esi +
mov [ebp-1Ch] esi +
call ds:LookupAccountNameW  +
call ds:__imp_GetLastError  +
cmp eax 7Ah +
jnz loc_101D35B  +
mov eax [ebp-18h] +
push 2  +
xor ecx ecx +
pop edx  +
mul  edx +
seto cl  +
mov [ebp-4] esi +
neg ecx  +
or eax ecx +
push eax  +
call off_104B7F4  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov [ebp-14h] eax +
cmp [ebp-14h] esi +
jz loc_100CCAD  +
push dword ptr [ebp-1Ch]  +
call ds:malloc  +
pop ecx  +
mov [edi] eax +
cmp eax esi +
jz loc_100CCA6  +
lea ecx [ebp-20h] +
push ecx  +
lea ecx [ebp-18h] +
push ecx  +
push dword ptr [ebp-14h]  +
lea ecx [ebp-1Ch] +
push ecx  +
push eax  +
push dword ptr [ebp+8]  +
push esi  +
call ds:LookupAccountNameW  +
test eax eax +
jz loc_101D344  +
xor ebx ebx +
push dword ptr [ebp-14h]  +
call off_104B7F0  +
mov eax ebx +
call sub_10015C0  +
retn 8  +
mov ebx 8007000Eh +
jmp loc_100CC93  +
mov ebx 8007000Eh +
jmp loc_100CC9C  +
***
and dword ptr [ebx] 0 +
push eax  +
call edi  +
jmp loc_100A9F1  +
***
call sub_1001862  +
mov esi ecx +
xor ebx ebx +
cmp [esi+98h] ebx +
jnz loc_101DF37  +
push ebx  +
call ds:SetLastError  +
lea edi [esi+9Ch] +
push edi  +
push dword ptr [ebp+10h]  +
mov dword ptr [esi+98h] 1 +
push ebx  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call ds:RegOpenKeyExW  +
cmp eax ebx +
jle loc_100CD16  +
and eax 0FFFFh +
or eax 80070000h +
cmp eax ebx +
mov [ebp+10h] eax +
jge loc_100CD1F  +
mov [edi] ebx +
mov [ebp-4] ebx +
cmp [ebp+14h] ebx +
jnz loc_101DF55  +
push dword ptr [ebp+0Ch]  +
lea ecx [esi+4] +
call sub_100AA00  +
mov eax [ebp+10h] +
call sub_10015C0  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
xor eax eax +
mov edx 80070057h +
test ecx ecx +
jz loc_100CDB3  +
cmp ecx 7FFFFFFFh +
ja loc_100CDB3  +
test eax eax +
jl loc_100CDAF  +
push edi  +
mov edi [ebp+arg_C] +
cmp edi 7FFFFFFEh +
ja loc_101E1A6  +
mov eax [ebp+arg_0] +
push ebx  +
xor ebx ebx +
push esi  +
mov esi ecx +
test ecx ecx +
jz loc_100CDB7  +
mov edx [ebp+arg_8] +
sub edi ecx +
sub edx eax +
lea ecx [edi+esi] +
test ecx ecx +
jz loc_100CDA1  +
movzx ecx word ptr [edx+eax] +
test cx cx +
jz loc_100CDA1  +
mov [eax] cx +
inc eax  +
inc eax  +
dec esi  +
jnz loc_100CD89  +
test esi esi +
jz loc_100CDB7  +
xor ecx ecx +
mov [eax] cx +
pop esi  +
mov eax ebx +
pop ebx  +
pop edi  +
pop ebp  +
retn 10h  +
mov eax edx +
jmp loc_100CD61  +
dec eax  +
dec eax  +
mov ebx 8007007Ah +
jmp loc_100CDA5  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push [ebp+bDaclDefaulted]  +
push [ebp+pDacl]  +
push [ebp+bDaclPresent]  +
push ecx  +
call ds:SetSecurityDescriptorDacl  +
test eax eax +
jz loc_101E21B  +
leave   +
retn 0Ch  +
***
mov edi edi +
push esi  +
push offset unk_104A268  +
push 1  +
push offset unk_104A2D8  +
mov esi ecx +
call sub_1010B7F  +
mov eax esi +
pop esi  +
retn   +
***
call sub_10015E0  +
mov esi ds:CreateWellKnownSid +
lea eax [ebp-20h] +
push eax  +
xor ebx ebx +
push ebx  +
push ebx  +
push dword ptr [ebp+8]  +
mov [ebp-20h] ebx +
call esi  +
test eax eax +
jnz loc_100CE42  +
call ds:__imp_GetLastError  +
cmp eax 7Ah +
jnz loc_101E36B  +
push dword ptr [ebp-20h]  +
call off_104B7F4  +
mov edi eax +
mov [ebp-14h] edi +
mov [ebp-4] ebx +
cmp edi ebx +
jz loc_100CF92  +
lea eax [ebp-20h] +
push eax  +
push edi  +
push ebx  +
push dword ptr [ebp+8]  +
call esi  +
test eax eax +
jz loc_101E382  +
lea eax [ebp-24h] +
push eax  +
lea eax [ebp-18h] +
push eax  +
push ebx  +
lea eax [ebp-1Ch] +
push eax  +
push ebx  +
push edi  +
push ebx  +
mov [ebp-1Ch] ebx +
mov [ebp-18h] ebx +
call ds:LookupAccountSidW  +
test eax eax +
jnz loc_100CE9D  +
call ds:__imp_GetLastError  +
cmp eax 7Ah +
jnz loc_101E388  +
mov eax [ebp-1Ch] +
push 2  +
inc eax  +
xor ecx ecx +
pop edx  +
mul  edx +
seto cl  +
neg ecx  +
or eax ecx +
push eax  +
call off_104B7F4  +
mov [ebp-10h] eax +
mov eax [ebp-18h] +
push 2  +
inc eax  +
xor ecx ecx +
pop edx  +
mul  edx +
seto cl  +
mov byte ptr [ebp-4] 1 +
neg ecx  +
or eax ecx +
push eax  +
call off_104B7F4  +
mov [ebp+8] eax +
mov eax [ebp-1Ch] +
mov ecx [ebp-18h] +
lea esi [ecx+eax+2] +
push 2  +
xor ecx ecx +
pop edx  +
mov eax esi +
mul  edx +
seto cl  +
mov byte ptr [ebp-4] 2 +
neg ecx  +
or eax ecx +
push eax  +
call off_104B7F4  +
mov edi eax +
cmp [ebp-10h] ebx +
jz loc_101E3C9  +
cmp [ebp+8] ebx +
jz loc_101E3C9  +
cmp edi ebx +
jz loc_101E3C9  +
lea eax [ebp-24h] +
push eax  +
lea eax [ebp-18h] +
push eax  +
push dword ptr [ebp+8]  +
lea eax [ebp-1Ch] +
push eax  +
push dword ptr [ebp-10h]  +
push dword ptr [ebp-14h]  +
push ebx  +
call ds:LookupAccountSidW  +
test eax eax +
jz loc_101E39E  +
push dword ptr [ebp-10h]  +
push dword ptr [ebp+8]  +
push offset aLsLs  +
push esi  +
push edi  +
call sub_100A257  +
mov esi eax +
mov eax [ebp+0Ch] +
add esp 14h +
cmp esi ebx +
jl loc_101E3B7  +
mov [eax] edi +
push dword ptr [ebp+8]  +
mov byte ptr [ebp-4] 1 +
call off_104B7F0  +
push dword ptr [ebp-10h]  +
mov [ebp-4] bl +
call off_104B7F0  +
push dword ptr [ebp-14h]  +
or dword ptr [ebp-4] 0FFFFFFFFh +
call off_104B7F0  +
mov eax esi +
call sub_10015C0  +
retn 8  +
mov eax 8007000Eh +
jmp loc_100CF8A  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push esi  +
push edi  +
push [ebp+arg_0]  +
mov edi ecx +
lea esi [edi+18h] +
mov ecx esi +
call sub_101195D  +
push [ebp+bGroupDefaulted]  +
mov esi [esi] +
push esi  +
push edi  +
call ds:SetSecurityDescriptorGroup  +
test eax eax +
jz loc_101E431  +
pop edi  +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 28h +
mov eax dword_104A044 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
mov ebx [ebp+arg_4] +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
lea eax [ebp+var_28] +
push eax  +
mov esi offset a08x +
push esi  +
push edi  +
call ds:swscanf  +
add esp 0Ch +
cmp eax 1 +
jnz loc_100D05D  +
push dword ptr [ebp+var_28]  +
lea eax [ebp+var_24] +
push esi  +
push 10h  +
push eax  +
call sub_100A257  +
add esp 10h +
test eax eax +
jl loc_100D05D  +
lea eax [ebp+var_24] +
push eax  +
push edi  +
call ds:__imp__wcsicmp  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_100D05D  +
mov eax dword ptr [ebp+var_28] +
mov [ebx] eax +
mov al 1 +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1002A8B  +
leave   +
retn 8  +
xor al al +
jmp loc_100D04C  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push 105h  +
mov ecx esi +
call sub_100FCFC  +
mov ecx [esi+8] +
dec ecx  +
push ecx  +
push eax  +
push hModule  +
call ds:GetModuleFileNameW  +
push eax  +
mov ecx esi +
call sub_100A108  +
push 5Ch  +
mov ecx esi +
call sub_101183E  +
inc eax  +
push eax  +
mov ecx esi +
call sub_100A108  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ecx] +
mov eax [ecx+4] +
sub eax edx +
sar eax 1 +
js loc_100D0DC  +
lea ecx [edx+eax*2] +
mov dx [ecx] +
cmp dx [ebp+arg_0] +
jz loc_100D0DC  +
dec eax  +
dec ecx  +
dec ecx  +
test eax eax +
jge loc_100D0CC  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push esi  +
mov esi ecx +
mov eax [esi] +
push edi  +
test eax eax +
jnz loc_101E622  +
mov edi [ebp+arg_0] +
xor ecx ecx +
push 2  +
pop edx  +
mov eax edi +
mul  edx +
seto cl  +
neg ecx  +
or ecx eax +
push ecx  +
call sub_10085CE  +
pop ecx  +
mov [esi] eax +
test eax eax +
jz loc_101E631  +
mov [esi+8] edi +
mov [esi+4] eax +
xor ecx ecx +
pop edi  +
mov [eax] cx +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov eax [esi+4] +
sub eax [esi] +
mov ecx [esi+8] +
push edi  +
mov edi [ebp+arg_0] +
sar eax 1 +
sub ecx eax +
lea edx [edi+1] +
cmp edx ecx +
ja loc_101E65F  +
add edi edi +
push edi  +
push [ebp+arg_4]  +
push dword ptr [esi+4]  +
call memcpy  +
add [esi+4] edi +
mov esi [esi+4] +
add esp 0Ch +
xor eax eax +
pop edi  +
mov [esi] ax +
pop esi  +
pop ebp  +
retn 8  +
***
mov eax offset SHGetFolderPathW +
jmp loc_1009D46  +
***
add eax eax +
xor eax esi +
jmp loc_100D78D  +
***
call ds:GetProcessHeap  +
push offset loc_10121B7  +
mov dword_104A0B8 offset off_1002958 +
mov dword_104A0BC eax +
mov byte_104A0C0 0 +
call sub_1010E75  +
pop ecx  +
retn   +
***
call ds:InitializeCriticalSection  +
push offset loc_1011B8A  +
call sub_1010E75  +
pop ecx  +
retn   +
***
mov ecx offset dword_104A0E4 +
call sub_1011187  +
push offset loc_1011BAB  +
mov dword_104A0E4 offset off_1002C74 +
call sub_1010E75  +
pop ecx  +
retn   +
***
mov ecx offset dword_104A0D4 +
call sub_1011187  +
push offset loc_1011BBB  +
mov dword_104A0D4 offset off_1002C74 +
call sub_1010E75  +
pop ecx  +
retn   +
***
mov ecx offset dword_104A0C4 +
call sub_1011187  +
push offset loc_1011BCB  +
mov dword_104A0C4 offset off_1002C74 +
call sub_1010E75  +
pop ecx  +
retn   +
***
call ds:InitializeCriticalSection  +
push offset loc_1011BDB  +
call sub_1010E75  +
pop ecx  +
retn   +
***
call sub_1010E75  +
pop ecx  +
retn   +
***
call sub_1010E75  +
pop ecx  +
retn   +
***
mov ecx offset dword_104A280 +
call sub_10035A2  +
push offset loc_1011BFB  +
call sub_1010E75  +
pop ecx  +
retn   +
***
mov ecx offset dword_104A284 +
call sub_10035A2  +
push offset loc_1011C0E  +
call sub_1010E75  +
pop ecx  +
retn   +
***
mov ecx offset dword_104A288 +
call sub_10035A2  +
push offset loc_1011C21  +
call sub_1010E75  +
pop ecx  +
retn   +
***
mov ecx offset dword_104A28C +
call sub_10035A2  +
push offset loc_1011C34  +
call sub_1010E75  +
pop ecx  +
retn   +
***
mov ecx offset dword_104A290 +
call sub_10035A2  +
push offset loc_1011C47  +
call sub_1010E75  +
pop ecx  +
retn   +
***
mov ecx offset dword_104A294 +
call sub_10035A2  +
push offset loc_1011C5A  +
call sub_1010E75  +
pop ecx  +
retn   +
***
mov ecx offset dword_104A298 +
call sub_10035A2  +
push offset loc_1011C6D  +
call sub_1010E75  +
pop ecx  +
retn   +
***
mov ecx offset dword_104A29C +
call sub_10035A2  +
push offset loc_1011C80  +
call sub_1010E75  +
pop ecx  +
retn   +
***
mov ecx offset dword_104A2A0 +
call sub_10035A2  +
push offset loc_1011CA4  +
call sub_1010E75  +
pop ecx  +
retn   +
***
mov ecx offset dword_104A2A4 +
call sub_10035A2  +
push offset loc_1011CB7  +
call sub_1010E75  +
pop ecx  +
retn   +
***
call ds:InitializeCriticalSection  +
push offset loc_1011C93  +
call sub_1010E75  +
pop ecx  +
retn   +
***
mov ecx offset dword_104A2A8 +
call sub_10035A2  +
push offset loc_1011CCA  +
call sub_1010E75  +
pop ecx  +
retn   +
***
mov ecx offset dword_104A2AC +
call sub_10035A2  +
push offset loc_1011CDD  +
call sub_1010E75  +
pop ecx  +
retn   +
***
mov ecx offset dword_104A2B0 +
call sub_10035A2  +
push offset loc_1011CF0  +
call sub_1010E75  +
pop ecx  +
retn   +
***
mov ecx offset dword_104A2B4 +
call sub_10035A2  +
push offset loc_1011D03  +
call sub_1010E75  +
pop ecx  +
retn   +
***
mov ecx offset dword_104A2B8 +
call sub_10035A2  +
push offset loc_1011D16  +
call sub_1010E75  +
pop ecx  +
retn   +
***
mov ecx offset dword_104A2BC +
call sub_10035A2  +
push offset loc_1011D29  +
call sub_1010E75  +
pop ecx  +
retn   +
***
mov ecx offset dword_104A2C0 +
call sub_10035A2  +
push offset loc_1011D3C  +
call sub_1010E75  +
pop ecx  +
retn   +
***
mov ecx offset dword_104A2C4 +
call sub_10035A2  +
push offset loc_1011D4F  +
call sub_1010E75  +
pop ecx  +
retn   +
***
mov ecx offset dword_104A2CC +
call sub_10035A2  +
push offset loc_1011D62  +
call sub_1010E75  +
pop ecx  +
retn   +
***
mov ecx offset dword_104A2C8 +
call sub_10035A2  +
push offset loc_1011D75  +
call sub_1010E75  +
pop ecx  +
retn   +
***
call sub_100D64C  +
push offset loc_101225E  +
call sub_1010E75  +
pop ecx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 24h +
push ebx  +
push esi  +
mov esi ds:malloc +
push edi  +
mov ebx 1000h +
push ebx  +
mov [ebp+var_4] ecx +
call esi  +
mov edi 400h +
push edi  +
mov dword_104A094 eax +
call esi  +
push edi  +
mov dword_104A098 eax +
call esi  +
push edi  +
mov dword_104A0A0 eax +
call esi  +
push edi  +
mov dword_104A09C eax +
call esi  +
xor ecx ecx +
add esp 14h +
mov dword_104A090 eax +
cmp dword_104A094 ecx +
jz loc_10219AC  +
cmp dword_104A098 ecx +
jz loc_10219AC  +
cmp dword_104A0A0 ecx +
jz loc_10219AC  +
cmp dword_104A09C ecx +
jz loc_10219AC  +
cmp eax ecx +
jz loc_10219AC  +
mov edx dword_104BA94 +
push 4  +
mov eax edx +
pop ecx  +
mov esi dword_104A094 +
push 20h  +
mov [ecx+esi] eax +
pop esi  +
test eax eax +
jns loc_100D747  +
add eax eax +
xor eax edx +
dec esi  +
jnz loc_100D6E6  +
add ecx 4 +
cmp ecx ebx +
jb loc_100D6DA  +
mov edi [ebp+var_4] +
mov esi 100h +
push esi  +
push 20h  +
push dword_104A098  +
mov ecx edi +
call sub_100D756  +
push esi  +
push 28h  +
push dword_104A0A0  +
mov ecx edi +
call sub_100D756  +
push esi  +
push 30h  +
push dword_104A09C  +
mov ecx edi +
call sub_100D756  +
push esi  +
push 38h  +
push dword_104A090  +
mov ecx edi +
call sub_100D756  +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
add eax eax +
jmp loc_100D6EE  +
***
add eax eax +
xor eax esi +
jmp loc_100D77A  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
xor eax eax +
sub esp 20h +
inc eax  +
push esi  +
mov esi dword_104BA94 +
mov edx 80000000h +
test ecx ecx +
jbe loc_100D77D  +
test eax edx +
jnz loc_100D74B  +
add eax eax +
dec ecx  +
jnz loc_100D774  +
xor ecx ecx +
mov [ebp+ecx*4+var_20] eax +
test eax edx +
jnz loc_100D19A  +
add eax eax +
inc ecx  +
cmp ecx 8 +
jb loc_100D77F  +
xor esi esi +
cmp [ebp+arg_8] esi +
jbe loc_100D7BD  +
push edi  +
xor eax eax +
xor edi edi +
mov edx esi +
mov ecx edi +
shr edx cl +
test dl 1 +
jnz loc_100D7C2  +
inc edi  +
cmp edi 8 +
jb loc_100D79F  +
mov ecx [ebp+arg_0] +
mov [ecx+esi*4] eax +
inc esi  +
cmp esi [ebp+arg_8] +
jb loc_100D79B  +
pop edi  +
pop esi  +
leave   +
retn 0Ch  +
xor eax [ebp+edi*4+var_20] +
jmp loc_100D7AA  +
***
add [ebp+var_8] 2 +
mov eax [ebp+var_8] +
inc esi  +
sar eax 1 +
inc esi  +
cmp eax edi +
jb loc_100D846  +
jmp loc_100D85E  +
xor eax eax +
jmp loc_100D9A3  +
mov esi eax +
pop ecx  +
pop ecx  +
test esi esi +
jnz loc_100D900  +
jmp loc_100D9A0  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push ebx  +
push edi  +
push 7CFh  +
call ds:GetCommandLineW  +
push eax  +
mov edi 7D0h +
push edi  +
mov ebx offset unk_104A840 +
push ebx  +
call sub_100CD46  +
test eax eax +
jl loc_101E1B5  +
mov eax [ebp+arg_0] +
and dword ptr [eax] 0 +
push esi  +
mov esi ebx +
cmp word ptr [esi] 0 +
jz loc_100D8A6  +
mov eax esi +
sub eax ebx +
mov ecx eax +
sar ecx 1 +
cmp ecx edi +
jnb loc_100D85E  +
mov [ebp+var_8] eax +
movzx eax word ptr [esi] +
test ax ax +
jz loc_100D85E  +
push eax  +
call ds:iswspace  +
pop ecx  +
test eax eax +
jnz loc_100D7C8  +
mov eax esi +
sub eax ebx +
and eax 0FFFFFFFEh +
cmp eax 0FA0h +
jz loc_100D8A6  +
movzx eax word ptr [esi] +
test ax ax +
jz loc_100D8A6  +
cmp ax 22h +
jz loc_101E1BC  +
push eax  +
call ds:iswspace  +
pop ecx  +
test eax eax +
jnz loc_100D897  +
cmp word ptr [esi] 0 +
jz loc_100D897  +
inc esi  +
inc esi  +
movzx eax word ptr [esi] +
jmp loc_100D87E  +
mov eax [ebp+arg_0] +
inc dword ptr [eax]  +
mov eax esi +
sub eax ebx +
sar eax 1 +
cmp eax edi +
jb loc_100D831  +
mov eax [ebp+arg_0] +
mov esi [eax] +
test esi esi +
jz loc_100D7DC  +
push 4  +
xor ecx ecx +
pop edx  +
mov eax esi +
mul  edx +
seto cl  +
neg ecx  +
or eax ecx +
push eax  +
call off_104B7F4  +
mov [ebp+var_C] eax +
test eax eax +
jz loc_100D7DC  +
and [ebp+var_4] 0 +
mov esi ebx +
jmp loc_100D91B  +
movzx eax word ptr [esi] +
push eax  +
call ds:iswspace  +
pop ecx  +
test eax eax +
jnz loc_100D900  +
cmp [esi] ax +
jz loc_100D90D  +
add [ebp+var_8] 2 +
mov eax [ebp+var_8] +
inc esi  +
sar eax 1 +
inc esi  +
cmp eax edi +
jb loc_100D8DD  +
cmp word ptr [esi] 0 +
jz loc_100D90D  +
xor eax eax +
mov [esi] ax +
inc esi  +
inc esi  +
mov eax esi +
sub eax ebx +
sar eax 1 +
cmp eax edi +
jnb loc_100D9A0  +
cmp word ptr [esi] 0 +
jz loc_100D9A0  +
mov eax [ebp+arg_0] +
mov ecx [ebp+var_4] +
cmp ecx [eax] +
jge loc_100D9A0  +
mov eax esi +
sub eax ebx +
mov ecx eax +
sar ecx 1 +
cmp ecx edi +
jnb loc_100D952  +
mov [ebp+var_8] eax +
movzx eax word ptr [esi] +
test ax ax +
jz loc_100D952  +
push eax  +
call ds:iswspace  +
pop ecx  +
test eax eax +
jnz loc_101E1E1  +
mov eax esi +
sub eax ebx +
mov [ebp+var_8] eax +
sar [ebp+var_8] 1 +
mov [ebp+var_10] eax +
cmp [ebp+var_8] edi +
jz loc_100D9A0  +
movzx eax word ptr [esi] +
test ax ax +
jz loc_100D9A0  +
cmp ax 22h +
jz loc_101E1F9  +
mov eax [ebp+var_C] +
mov ecx [ebp+var_4] +
mov [eax+ecx*4] esi +
inc [ebp+var_4]  +
cmp word ptr [esi] 22h +
jz loc_101E20A  +
cmp [ebp+var_8] edi +
jnb loc_100D900  +
mov eax [ebp+var_10] +
mov [ebp+var_8] eax +
jmp loc_100D8DD  +
mov eax [ebp+var_C] +
pop esi  +
pop edi  +
pop ebx  +
leave   +
retn 4  +
***
mov eax offset word_1040FE2 +
call sub_1002A3A  +
xor edi edi +
push edi  +
push 2001Bh  +
push offset aSoftwareMicr_0  +
mov esi ecx +
mov ebx 80000002h +
push ebx  +
lea ecx [ebp-0B0h] +
mov [ebp-1F4h] edi +
call sub_100A989  +
lea eax [esi+9Ch] +
mov [ebp-4] edi +
push eax  +
mov edi offset aDatadirectory +
push edi  +
lea ecx [ebp-0B0h] +
call sub_100A8AC  +
test eax eax +
jz loc_101CF68  +
sub esp 94h +
lea eax [esi+9Ch] +
mov ecx esp +
mov [ebp-1F8h] esp +
push eax  +
call sub_100EA61  +
lea eax [ebp-28Ch] +
push eax  +
call sub_100DC9B  +
push dword ptr [eax+4]  +
lea ecx [esi+9Ch] +
mov byte ptr [ebp-4] 1 +
call sub_100AA00  +
lea ecx [ebp-28Ch] +
mov byte ptr [ebp-4] 0 +
call sub_10084DE  +
push 0  +
push 20019h  +
push offset aSoftwarePolici  +
push ebx  +
lea ecx [ebp-150h] +
call sub_100A989  +
lea eax [esi+130h] +
push eax  +
push edi  +
lea ecx [ebp-150h] +
mov byte ptr [ebp-4] 2 +
call sub_100A8AC  +
dec eax  +
neg eax  +
sbb al al +
inc al  +
mov [esi+258h] al +
jnz loc_100DA9D  +
push dword ptr [esi+0A0h]  +
lea ecx [esi+130h] +
call sub_100AA00  +
sub esp 94h +
lea eax [esi+130h] +
mov ecx esp +
mov [ebp-1F8h] esp +
push eax  +
call sub_100EA61  +
lea eax [ebp-28Ch] +
push eax  +
call sub_100DC9B  +
push dword ptr [eax+4]  +
lea ecx [esi+130h] +
mov byte ptr [ebp-4] 3 +
call sub_100AA00  +
lea ecx [ebp-28Ch] +
mov byte ptr [ebp-4] 2 +
call sub_10084DE  +
push 0  +
push 20019h  +
push offset aSoftwareMic_14  +
push ebx  +
lea ecx [ebp-1F0h] +
call sub_100A989  +
lea ebx [esi+1C4h] +
push ebx  +
push edi  +
lea ecx [ebp-1F0h] +
mov byte ptr [ebp-4] 4 +
call sub_100A8AC  +
dec eax  +
neg eax  +
sbb al al +
inc al  +
mov [esi+259h] al +
jnz loc_100DB2F  +
push dword ptr [esi+0A0h]  +
mov ecx ebx +
call sub_100AA00  +
sub esp 94h +
mov ecx esp +
mov [ebp-1F8h] esp +
push ebx  +
call sub_100EA61  +
lea eax [ebp-28Ch] +
push eax  +
call sub_100DC9B  +
push dword ptr [eax+4]  +
mov ecx ebx +
mov byte ptr [ebp-4] 5 +
call sub_100AA00  +
lea ecx [ebp-28Ch] +
call sub_10084DE  +
lea ecx [ebp-1F0h] +
mov byte ptr [ebp-4] 2 +
call sub_100AA1A  +
lea ecx [ebp-150h] +
mov byte ptr [ebp-4] 0 +
call sub_100AA1A  +
lea edi [esi+8] +
push edi  +
push offset aDefaultdatadir  +
lea ecx [ebp-0B0h] +
call sub_100A8AC  +
test eax eax +
jz loc_101CF86  +
sub esp 94h +
mov ecx esp +
mov [ebp-1F8h] esp +
push edi  +
call sub_100EA61  +
lea eax [ebp-28Ch] +
push eax  +
call sub_100DC9B  +
push dword ptr [eax+4]  +
mov ecx edi +
mov byte ptr [ebp-4] 6 +
call sub_100AA00  +
lea ecx [ebp-28Ch] +
call sub_10084DE  +
cmp dword ptr [ebp-1F4h] 0 +
jl loc_100DBE7  +
mov byte ptr [esi] 1 +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-0B0h] +
call sub_100AA1A  +
mov eax [ebp-1F4h] +
call sub_1002A77  +
retn   +
***
call sub_1002A3A  +
mov esi [ebp+8] +
and dword ptr [ebp-428h] 0 +
mov [ebp-42Ch] esi +
xor ebx ebx +
lea eax [ebp+0Ch] +
inc ebx  +
push eax  +
mov ecx esi +
mov [ebp-4] ebx +
call sub_100EA61  +
push dword ptr [ebp+10h]  +
lea eax [ebp-218h] +
push eax  +
mov [ebp-428h] ebx +
call ds:PathCanonicalizeW  +
test eax eax +
jz loc_100DD13  +
lea eax [ebp-218h] +
push eax  +
lea ecx [ebp-4CCh] +
call sub_1009D0D  +
push dword ptr [eax+4]  +
mov ecx esi +
mov byte ptr [ebp-4] 2 +
call sub_100AA00  +
lea ecx [ebp-4CCh] +
mov [ebp-4] bl +
call sub_10084DE  +
mov eax [esi+4] +
push 104h  +
lea ecx [ebp-420h] +
push ecx  +
push eax  +
call ds:ExpandEnvironmentStringsW  +
test eax eax +
jz loc_100DD3F  +
mov eax [esi] +
push 0FFFFFFFFh  +
push 0  +
lea ecx [ebp-420h] +
push ecx  +
mov ecx esi +
call dword ptr [eax+10h]  +
sub esp 94h +
mov ecx esp +
mov [ebp-424h] esp +
push esi  +
call sub_100EA61  +
lea eax [ebp-4CCh] +
push eax  +
call sub_100C956  +
push dword ptr [eax+4]  +
mov ecx esi +
mov byte ptr [ebp-4] 3 +
call sub_100AA00  +
lea ecx [ebp-4CCh] +
mov [ebp-4] bl +
call sub_10084DE  +
mov eax [esi+0Ch] +
cmp eax 0Bh +
jb loc_100DE18  +
push 0Bh  +
lea eax [ebp-438h] +
push eax  +
mov ecx esi +
call sub_100DE5B  +
push offset aSearchData  +
mov ecx eax +
call sub_1003503  +
test eax eax +
jnz loc_100DE18  +
mov eax [esi+0Ch] +
add eax 0FFFFFFF5h +
push eax  +
mov ecx esi +
call sub_100A108  +
sub esp 94h +
mov ecx esp +
mov [ebp-424h] esp +
push esi  +
call sub_100EA61  +
lea eax [ebp-4CCh] +
push eax  +
call sub_100C956  +
mov byte ptr [ebp-4] 4 +
push dword ptr [eax+4]  +
mov ecx esi +
call sub_100AA00  +
lea ecx [ebp-4CCh] +
call sub_10084DE  +
lea ecx [ebp+0Ch] +
call sub_10084DE  +
mov eax esi +
call sub_1002A77  +
retn 98h  +
***
mov eax [esi+0Ch] +
cmp eax 6 +
jb loc_100DDEE  +
push 6  +
lea eax [ebp-438h] +
push eax  +
mov ecx esi +
call sub_100DE5B  +
push offset aSearch_0  +
mov ecx eax +
call sub_1003503  +
test eax eax +
jnz loc_100DDEE  +
jmp loc_101CE61  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx+0Ch] +
sub esp 20h +
cmp [ebp+arg_4] eax +
ja loc_101CE3D  +
push [ebp+arg_4]  +
sub eax [ebp+arg_4] +
push eax  +
push [ebp+arg_0]  +
call sub_10034B1  +
mov eax [ebp+arg_0] +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
xor eax eax +
cmp esi [ebp+arg_4] +
jnb loc_100DEAB  +
test eax eax +
jnz loc_100DEAB  +
mov ecx [esi] +
test ecx ecx +
jz loc_100DEA6  +
call ecx  +
add esi 4 +
jmp loc_100DE95  +
pop esi  +
pop ebp  +
retn   +
***
call sub_100C8C7  +
push 58h  +
push offset dword_100E070  +
call sub_1002A98  +
xor ebx ebx +
mov [ebp-1Ch] ebx +
mov [ebp-4] ebx +
lea eax [ebp-68h] +
push eax  +
call ds:GetStartupInfoA  +
mov dword ptr [ebp-4] 0FFFFFFFEh +
mov dword ptr [ebp-4] 1 +
mov eax large fs:18h +
mov esi [eax+4] +
mov edi offset Destination +
push 0  +
push esi  +
push edi  +
call ds:__imp_InterlockedCompareExchange  +
test eax eax +
jnz loc_101CC23  +
xor esi esi +
inc esi  +
mov eax dword_104A0A4 +
cmp eax esi +
jz loc_101CC41  +
mov eax dword_104A0A4 +
test eax eax +
jnz loc_100E0A7  +
mov dword_104A0A4 esi +
push offset dword_100E06C  +
push offset dword_100E060  +
call sub_100DE8A  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_101CCE7  +
mov eax dword_104A0A4 +
cmp eax esi +
jnz loc_100DF64  +
push offset dword_100E05C  +
push offset dword_100DFB0  +
call _initterm  +
pop ecx  +
pop ecx  +
mov dword_104A0A4 2 +
test ebx ebx +
jnz loc_100DF70  +
push ebx  +
push edi  +
call ds:InterlockedExchange  +
cmp dword_104BAA8 0 +
jnz loc_101CC4E  +
mov eax ds:_acmdln +
mov esi [eax] +
mov [ebp-20h] esi +
mov al [esi] +
cmp al 20h +
jbe loc_100E098  +
cmp al 22h +
jz loc_101CC7B  +
movzx eax al +
push eax  +
call ds:_ismbblead  +
pop ecx  +
test eax eax +
jnz loc_101CC8B  +
inc esi  +
jmp loc_100DF84  +
test al al +
jz loc_100E0B2  +
cmp dword ptr [ebp-1Ch] 0 +
jz loc_100E0B2  +
jmp loc_100DF91  +
mov dword_104BBB8 esi +
jmp loc_100DF40  +
mov al [esi] +
test al al +
jz loc_100BC14  +
cmp al 20h +
ja loc_100BC14  +
inc esi  +
mov [ebp-20h] esi +
jmp loc_100E0B2  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push esi  +
mov esi ds:SetLastError +
push edi  +
push 0  +
mov edi ecx +
call esi  +
mov eax [edi+9Ch] +
mov [ebp+cbData] 4 +
test eax eax +
jz loc_101DF0E  +
lea ecx [ebp+cbData] +
push ecx  +
lea ecx [ebp+Data] +
push ecx  +
lea ecx [ebp+Type] +
push ecx  +
push 0  +
push [ebp+lpValueName]  +
push eax  +
call ds:RegQueryValueExW  +
test eax eax +
jnz loc_100E12D  +
cmp [ebp+Type] 4 +
jnz loc_100E12D  +
mov eax [ebp+arg_4] +
mov ecx dword ptr [ebp+Data] +
mov [eax] ecx +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
leave   +
retn 8  +
push eax  +
call esi  +
xor eax eax +
jmp loc_100E127  +
***
cmp dword_104A04C 7D6h +
jge loc_100E14A  +
jmp loc_10217A8  +
jmp ds:WinSqmIsOptedIn  +
***
mov ecx offset unk_104A264 +
jmp loc_100E161  +
mov edi edi +
push esi  +
mov esi ecx +
call sub_100F325  +
mov dword_104A04C eax +
call sub_100E183  +
mov dword_104A088 eax +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 120h +
mov eax dword_104A044 +
xor eax ebp +
mov [ebp+var_4] eax +
lea eax [ebp+VersionInformation] +
push eax  +
mov [ebp+VersionInformation.dwOSVersionInfoSize] 11Ch +
call ds:GetVersionExW  +
test eax eax +
jz loc_100E1BA  +
movzx eax [ebp+var_8] +
shr eax 0Fh +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_1002A8B  +
leave   +
retn   +
***
call sub_100E521  +
push off_104B7EC  +
mov ecx offset off_104B824 +
call sub_100E521  +
push off_104B7EC  +
mov ecx offset off_104B830 +
call sub_100E521  +
push off_104B7EC  +
mov ecx offset off_104B83C +
call sub_100E521  +
push off_104B7EC  +
mov ecx offset off_104B848 +
call sub_100E521  +
push off_104B7EC  +
mov ecx offset off_104B854 +
call sub_100E521  +
push off_104B7EC  +
mov ecx offset off_104B860 +
call sub_100E521  +
push off_104B7EC  +
mov ecx offset off_104B86C +
call sub_100E521  +
push off_104B7EC  +
mov ecx offset off_104B878 +
call sub_100E521  +
push off_104B7EC  +
mov ecx offset off_104B884 +
call sub_100E521  +
push off_104B7EC  +
mov ecx offset off_104B890 +
call sub_100E521  +
push off_104B7EC  +
mov ecx offset off_104B89C +
call sub_100E521  +
push off_104B7EC  +
mov ecx offset off_104B8A8 +
call sub_100E521  +
push off_104B7EC  +
mov ecx offset off_104B8B4 +
call sub_100E521  +
push off_104B7EC  +
mov ecx offset off_104B8C0 +
call sub_100E521  +
push off_104B7EC  +
mov ecx offset off_104B8CC +
call sub_100E521  +
push off_104B7EC  +
mov ecx offset off_104B8D8 +
call sub_100E521  +
push off_104B7EC  +
mov ecx offset off_104B8E4 +
call sub_100E521  +
push off_104B7EC  +
mov ecx offset off_104B8F0 +
call sub_100E521  +
push off_104B7EC  +
mov ecx offset off_104B8FC +
call sub_100E521  +
push off_104B7EC  +
mov ecx offset off_104B908 +
call sub_100E521  +
push off_104B7EC  +
mov ecx offset off_104B914 +
call sub_100E521  +
push off_104B7EC  +
mov ecx offset off_104B920 +
call sub_100E521  +
push off_104B7EC  +
mov ecx offset off_104B92C +
call sub_100E521  +
push off_104B7EC  +
mov ecx offset off_104B938 +
call sub_100E521  +
push off_104B7EC  +
mov ecx offset off_104B944 +
call sub_100E521  +
push off_104B7EC  +
mov ecx offset off_104B950 +
call sub_100E521  +
push off_104B7EC  +
mov ecx offset off_104B95C +
call sub_100E521  +
push off_104B7EC  +
mov ecx offset off_104B968 +
call sub_100E521  +
push off_104B7EC  +
mov ecx offset off_104B974 +
call sub_100E521  +
push off_104B7EC  +
mov ecx offset off_104B980 +
call sub_100E521  +
push off_104B7EC  +
mov ecx offset off_104B98C +
call sub_100E521  +
push off_104B7EC  +
mov ecx offset off_104B998 +
call sub_100E521  +
push off_104B7EC  +
mov ecx offset off_104B9A4 +
call sub_100E521  +
push off_104B7EC  +
mov ecx offset off_104B9B0 +
call sub_100E521  +
push off_104B7EC  +
mov ecx offset off_104B9BC +
call sub_100E521  +
push off_104B7EC  +
mov ecx offset off_104B9C8 +
call sub_100E521  +
push off_104B7EC  +
mov ecx offset off_104B9D4 +
call sub_100E521  +
push off_104B7EC  +
mov ecx offset off_104B9E0 +
call sub_100E521  +
push off_104B7EC  +
mov ecx offset off_104B9EC +
call sub_100E521  +
push off_104B7EC  +
mov ecx offset off_104B9F8 +
call sub_100E521  +
push off_104B7EC  +
mov ecx offset off_104BA04 +
call sub_100E521  +
push off_104B7EC  +
mov ecx offset off_104BA10 +
call sub_100E521  +
push off_104B7EC  +
mov ecx offset off_104BA1C +
call sub_100E521  +
push off_104B7EC  +
mov ecx offset off_104BA28 +
call sub_100E521  +
push off_104B7EC  +
mov ecx offset off_104BA34 +
call sub_100E521  +
push off_104B7EC  +
mov ecx offset off_104BA40 +
call sub_100E521  +
push off_104B7EC  +
mov ecx offset off_104BA4C +
call sub_100E521  +
push off_104B7EC  +
mov ecx offset off_104BA58 +
call sub_100E521  +
push off_104B7EC  +
mov ecx offset off_104BA64 +
call sub_100E521  +
push off_104B7EC  +
mov ecx offset off_104BA70 +
call sub_100E521  +
push off_104B7EC  +
mov ecx offset off_104BA7C +
call sub_100E521  +
push off_104B7EC  +
mov ecx offset off_104BA88 +
call sub_100E521  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
lea eax [ecx+4] +
push eax  +
push dword ptr [ecx+8]  +
mov ecx [ebp+arg_0] +
call sub_100E53E  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ecx] 0 +
jnz loc_101E5EB  +
pop ebp  +
retn 8  +
***
call sub_100E562  +
mov byte ptr [esi] 1 +
jmp loc_100A168  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
lea eax [ebp+var_4] +
push eax  +
push offset aEventthrottlem  +
call sub_100E6E3  +
xor esi esi +
inc esi  +
test eax eax +
jnz loc_100E590  +
mov eax [ebp+var_4] +
cmp eax esi +
mov dword_104A050 esi +
jl loc_100E590  +
mov dword_104A050 eax +
lea eax [ebp+var_4] +
push eax  +
push offset aEventthrottl_0  +
call sub_100E6E3  +
test eax eax +
jnz loc_100E5B4  +
mov eax [ebp+var_4] +
cmp eax esi +
mov dword_104A054 esi +
jl loc_100E5B4  +
mov dword_104A054 eax +
lea eax [ebp+var_4] +
push eax  +
push offset aEventthrottleb  +
call sub_100E6E3  +
test eax eax +
jnz loc_100E5D8  +
mov eax [ebp+var_4] +
cmp eax esi +
mov dword_104A058 esi +
jl loc_100E5D8  +
mov dword_104A058 eax +
lea eax [ebp+var_4] +
push eax  +
push offset aEventthrottlef  +
call sub_100E6E3  +
test eax eax +
jnz loc_100E5FC  +
mov eax [ebp+var_4] +
cmp eax esi +
mov dword_104A05C esi +
jl loc_100E5FC  +
mov dword_104A05C eax +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
lea eax [ebp+var_4] +
push eax  +
push [ebp+arg_4]  +
mov [ebp+var_4] 4 +
push 0  +
push 10h  +
push [ebp+arg_0]  +
push offset aSoftwareMicr_6  +
push 80000002h  +
call ds:__imp_SHRegGetValueW  +
leave   +
retn 8  +
***
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
lea eax [ebp+hModule] +
push eax  +
call sub_100E7B9  +
cmp [ebp+hModule] 0 +
jnz loc_101E670  +
xor eax eax +
leave   +
retn 4  +
***
call sub_10015E0  +
xor edi edi +
mov [ebp-18h] edi +
mov [ebp-14h] edi +
mov [ebp-10h] edi +
push 208h  +
lea ecx [ebp-18h] +
mov [ebp-4] edi +
call sub_100D0E5  +
mov eax [ebp-10h] +
dec eax  +
push eax  +
push dword ptr [ebp-18h]  +
push edi  +
call ds:GetModuleFileNameW  +
push eax  +
lea ecx [ebp-18h] +
call sub_100E89D  +
push 5Ch  +
lea ecx [ebp-18h] +
call sub_100D0B9  +
lea ebx [eax+1] +
push ebx  +
lea ecx [ebp-18h] +
call sub_100E89D  +
push offset aMsfte_dll  +
push 9  +
lea ecx [ebp-18h] +
call sub_100D135  +
push dword ptr [ebp-18h]  +
mov esi ds:LoadLibraryW +
call esi  +
mov ecx [ebp+8] +
mov [ecx] eax +
cmp eax edi +
jnz loc_100E853  +
push ebx  +
lea ecx [ebp-18h] +
call sub_100E89D  +
push offset aMstracer_dll  +
push 0Ch  +
lea ecx [ebp-18h] +
call sub_100D135  +
push dword ptr [ebp-18h]  +
call esi  +
mov ecx [ebp+8] +
mov [ecx] eax +
push dword ptr [ebp-18h]  +
or dword ptr [ebp-4] 0FFFFFFFFh +
call sub_10085E3  +
pop ecx  +
call sub_10015C0  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx] +
mov edx [ebp+arg_0] +
sub esp 20h +
push esi  +
mov esi [ecx+4] +
sub esi eax +
sar esi 1 +
dec esi  +
cmp edx esi +
ja loc_101E5F4  +
lea eax [eax+edx*2] +
mov [ecx+4] eax +
xor ecx ecx +
mov [eax] cx +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and dword ptr [ebp-4] 0 +
add ecx 9Ch +
push ecx  +
mov ecx [ebp+8] +
call sub_100EA61  +
mov eax [ebp+8] +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
push dword ptr [eax+4]  +
mov esi ecx +
lea eax [esi+10h] +
push eax  +
push 42h  +
call sub_100850F  +
mov dword ptr [esi] offset off_1002B8C +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_10015E0  +
mov esi ecx +
mov [ebp-10h] esi +
push dword ptr [esi+20h]  +
mov dword ptr [ebp-4] 2 +
call off_104B7F0  +
and dword ptr [esi+20h] 0 +
push dword ptr [esi+1Ch]  +
mov byte ptr [ebp-4] 1 +
call off_104B7F0  +
and dword ptr [esi+1Ch] 0 +
lea ecx [esi+18h] +
mov byte ptr [ebp-4] 0 +
call sub_100EAE5  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [esi+14h] +
call sub_100EAE5  +
call sub_10015C0  +
retn   +
***
mov eax [ecx] +
test eax eax +
jz locret_100EAF2  +
push eax  +
call off_104B7F0  +
retn   +
***
call sub_10015E0  +
mov esi ecx +
mov [ebp-10h] esi +
xor edi edi +
mov [esi+14h] edi +
mov [ebp-4] edi +
mov [esi+18h] edi +
lea ecx [esi+1Ch] +
mov byte ptr [ebp-4] 1 +
mov [ecx] edi +
call sub_100EB5D  +
lea ecx [esi+20h] +
mov byte ptr [ebp-4] 2 +
mov [ecx] edi +
call sub_100EB5D  +
push 1  +
push esi  +
mov byte ptr [ebp-4] 3 +
call ds:InitializeSecurityDescriptor  +
test eax eax +
jz loc_101C650  +
push edi  +
push edi  +
push 1  +
mov ecx esi +
call sub_100CDC5  +
mov eax esi +
call sub_10015C0  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push esi  +
mov esi ecx +
mov eax [esi] +
test eax eax +
jnz loc_101C5A3  +
push 8  +
call off_104B810  +
push 2  +
push 8  +
push eax  +
mov [esi] eax +
call ds:InitializeAcl  +
test eax eax +
jz loc_101C5B2  +
pop esi  +
leave   +
retn   +
***
call sub_1003649  +
xor esi esi +
push esi  +
push esi  +
push 1  +
push esi  +
mov [ebp-434h] esi +
call ds:HeapSetInformation  +
push 0FFFFFFFFh  +
call ImmDisableIME  +
mov [ebp-440h] esi +
mov [ebp-4] esi +
call sub_100E139  +
test eax eax +
jnz loc_101C68E  +
push esi  +
mov byte ptr [ebp-4] 1 +
call sub_100E795  +
call sub_100E1CB  +
mov [ebp-4] esi +
push offset dword_104A130  +
push offset unk_104A388  +
push offset loc_100C7E5  +
xor ebx ebx +
push offset dword_100EEFC  +
inc ebx  +
call sub_100C82F  +
xor edi edi +
cmp dword_104A3AC edi +
jz loc_100ECA3  +
mov al byte_104A3B0 +
cmp al 4 +
jb loc_100BE72  +
mov eax dword_104A398 +
mov ecx dword_104A39C +
mov edx 80010000h +
and eax 5 +
and ecx edx +
or eax ecx +
jz loc_100EC6D  +
mov esi dword_104A3A0 +
mov ecx dword_104A3A4 +
mov eax esi +
and eax 5 +
and ecx edx +
cmp eax esi +
jnz loc_100EC6D  +
cmp ecx dword_104A3A4 +
jnz loc_100EC6D  +
push offset dword_100EF10  +
push dword_104A134  +
push dword_104A130  +
call sub_100A01E  +
cmp dword_104A3AC edi +
jz loc_100ECA3  +
mov al byte_104A3B0 +
cmp al 4 +
jb loc_100BE7F  +
mov eax dword_104A398 +
mov esi dword_104A39C +
mov ecx 200h +
mov edx 80000000h +
and eax ecx +
and esi edx +
or eax esi +
jnz loc_101C7AF  +
push offset aMainServiceThr  +
push 0FFFFFFFFh  +
call nullsub_1  +
mov ecx offset unk_104A120 +
call sub_100F0F1  +
push 20h  +
call ds:GetCurrentProcess  +
push eax  +
call ds:SetPriorityClass  +
lea ecx [ebp-428h] +
mov byte ptr [ebp-4] 3 +
mov [ebp-428h] edi +
call sub_100EB5D  +
lea ecx [ebp-478h] +
mov byte ptr [ebp-4] 4 +
call sub_100EAF8  +
lea ecx [ebp-42Ch] +
mov byte ptr [ebp-4] 5 +
call sub_100CDEE  +
lea ecx [ebp-430h] +
mov byte ptr [ebp-4] 6 +
call sub_1010B60  +
lea eax [ebp-21Ch] +
push eax  +
push edi  +
push edi  +
push 801Ch  +
push edi  +
mov byte ptr [ebp-4] 7 +
call SHGetFolderPathW  +
cmp eax edi +
jl loc_101C7F7  +
lea eax [ebp-21Ch] +
push eax  +
push offset aLocalappdata  +
call ds:SetEnvironmentVariableW  +
cmp eax edi +
jz loc_101C7F7  +
lea ecx [ebp-478h] +
call sub_100F8E8  +
mov eax [ebp-42Ch] +
mov [ebp-438h] eax +
lea eax [ebp-420h] +
push eax  +
lea eax [ebp-43Ch] +
push eax  +
lea eax [ebp-438h] +
push eax  +
push ebx  +
mov esi 0C0100000h +
push ebx  +
lea ecx [ebp-428h] +
mov byte ptr [ebp-420h] 0 +
mov [ebp-43Ch] esi +
call sub_100EF71  +
mov eax [ebp-430h] +
mov [ebp-438h] eax +
lea eax [ebp-420h] +
push eax  +
lea eax [ebp-43Ch] +
push eax  +
lea eax [ebp-438h] +
push eax  +
push ebx  +
push ebx  +
lea ecx [ebp-428h] +
mov byte ptr [ebp-420h] 0 +
mov [ebp-43Ch] esi +
call sub_100EF71  +
push edi  +
push dword ptr [ebp-428h]  +
lea ecx [ebp-478h] +
push ebx  +
call sub_100CDC5  +
and dword ptr [ebp-424h] 0 +
lea eax [ebp-478h] +
mov [ebp-448h] edi +
mov dword ptr [ebp-450h] 0Ch +
mov [ebp-44Ch] eax +
lea edi [ebp-450h] +
mov esi offset off_104A0B0 +
cmp dword ptr [ebp-424h] 0Fh +
jnb loc_100EE4B  +
push offset aSearchservicem  +
push 1  +
push edi  +
call ds:CreateMutexW  +
push eax  +
mov ecx esi +
call sub_1002CC0  +
call ds:__imp_GetLastError  +
cmp dword_104A0B4 0 +
mov ebx eax +
jz loc_101C899  +
test ebx ebx +
jnz loc_101C899  +
xor ebx ebx +
inc ebx  +
lea ecx [ebp-430h] +
mov byte ptr [ebp-4] 6 +
call sub_100EAE5  +
lea ecx [ebp-42Ch] +
mov byte ptr [ebp-4] 5 +
call sub_100EAE5  +
lea ecx [ebp-478h] +
mov byte ptr [ebp-4] 4 +
call sub_100EA8C  +
push dword ptr [ebp-428h]  +
mov byte ptr [ebp-4] 3 +
call off_104B7F0  +
mov eax [ebp+8] +
and dword ptr [ebp-4] 0 +
mov dword_104A074 eax +
lea eax [ebp-444h] +
push eax  +
mov byte ptr [ebp-4] 9 +
call sub_100D7F9  +
mov edi eax +
mov [ebp-440h] edi +
test edi edi +
jz loc_101C913  +
cmp dword ptr [ebp-444h] 2 +
jnz loc_101C913  +
mov esi ebx +
cmp esi [ebp-444h] +
jge loc_100BD4C  +
mov eax [edi+esi*4] +
movzx ecx word ptr [eax] +
cmp cx 2Fh +
jnz loc_101C8EA  +
add eax 2 +
push offset aEmbedding  +
push eax  +
call ds:__imp__wcsicmp  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_101C913  +
inc esi  +
jmp loc_100EEC3  +
***
call sub_10015E0  +
mov [ebp-10h] ecx +
xor eax eax +
xor edi edi +
cmp [ebp+8] edi +
setnz al  +
mov [ebp-14h] eax +
cmp eax edi +
mov eax ds:AddAccessAllowedAce +
jz loc_101E2EC  +
push 2  +
mov [ebp-18h] eax +
push 0Ch  +
lea eax [ebp-24h] +
push eax  +
push dword ptr [ecx]  +
mov [ebp-20h] edi +
call ds:GetAclInformation  +
mov eax [ebp+0Ch] +
mov ecx [ebp-20h] +
mov ebx [ebp+10h] +
lea esi [ecx+eax*8] +
cmp eax edi +
jbe loc_100EFD1  +
push dword ptr [ebx+edi*4]  +
call ds:GetLengthSid  +
add esi eax +
inc edi  +
cmp edi [ebp+0Ch] +
jb loc_100EFC0  +
push esi  +
call off_104B810  +
mov [ebp+8] eax +
push 2  +
push esi  +
xor edi edi +
push eax  +
mov [ebp-4] edi +
call ds:InitializeAcl  +
test eax eax +
jz loc_101E2F6  +
mov esi [ebp-10h] +
cmp [ebp-14h] edi +
jz loc_100F004  +
push dword ptr [esi]  +
push dword ptr [ebp+8]  +
call sub_100F07B  +
cmp dword ptr [ebp+0Ch] 0 +
jbe loc_100F050  +
mov eax [ebp+14h] +
sub eax ebx +
mov esi ebx +
mov ebx [ebp+18h] +
mov [ebp+10h] eax +
cmp dword ptr [ebp+14h] 0 +
jz loc_100F06F  +
mov eax [ebp+10h] +
mov eax [eax+esi] +
push dword ptr [esi]  +
push eax  +
push 2  +
push dword ptr [ebp+8]  +
call dword ptr [ebp-18h]  +
test eax eax +
jz loc_101E35F  +
test ebx ebx +
jz loc_100F044  +
cmp byte ptr [edi+ebx] 0 +
jnz loc_101E32A  +
inc edi  +
add esi 4 +
cmp edi [ebp+0Ch] +
jb loc_100F017  +
mov esi [ebp-10h] +
cmp dword ptr [ebp-14h] 0 +
jz loc_101E350  +
push dword ptr [esi]  +
call off_104B7F0  +
mov eax [ebp+8] +
mov [esi] eax +
call sub_10015C0  +
retn 14h  +
mov eax 101F0000h +
jmp loc_100F023  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 30h +
cmp [ebp+pAcl] 0 +
jz locret_100F0DD  +
push esi  +
push 2  +
push 0Ch  +
lea eax [ebp+pAclInformation] +
push eax  +
push [ebp+pAcl]  +
call ds:GetAclInformation  +
test eax eax +
jz loc_101E2B2  +
xor esi esi +
cmp [ebp+pAclInformation] esi +
jbe loc_100F0DC  +
lea eax [ebp+pAceList] +
push eax  +
push esi  +
push [ebp+pAcl]  +
call ds:GetAce  +
test eax eax +
jz loc_100F0E1  +
mov eax [ebp+pAceList] +
movzx ecx word ptr [eax+2] +
push ecx  +
push eax  +
push 0FFFFFFFFh  +
push 2  +
push [ebp+arg_0]  +
call ds:AddAce  +
test eax eax +
jz loc_100F0E1  +
inc esi  +
cmp esi [ebp+pAclInformation] +
jb loc_100F0AA  +
pop esi  +
leave   +
retn 8  +
call ds:__imp_GetLastError  +
jmp loc_101E2E6  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax 146Ch +
call sub_100A16A  +
mov eax dword_104A044 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
push edi  +
call sub_100A15A  +
mov esi ds:RegOpenKeyExW +
lea eax [ebp+hKey] +
push eax  +
push 3  +
xor ebx ebx +
push ebx  +
push offset aSoftwareMicros  +
mov edi 80000002h +
push edi  +
mov [ebp+hKey] ebx +
mov [ebp+var_34] ebx +
call esi  +
cmp eax ebx +
jnz loc_100F26F  +
lea eax [ebp+var_34] +
push eax  +
push 3  +
push ebx  +
push offset aSoftwareMicr_3  +
push edi  +
call esi  +
cmp eax ebx +
jnz loc_100F26F  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
lea eax [ebp+cValues] +
push eax  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push [ebp+hKey]  +
call ds:RegQueryInfoKeyW  +
test eax eax +
jnz loc_100F26F  +
cmp [ebp+cValues] 400h +
ja loc_100F26F  +
mov [ebp+dwIndex] ebx +
cmp [ebp+cValues] ebx +
jbe loc_100F230  +
lea esi [ebp+var_1468] +
push 14h  +
pop edi  +
lea eax [ebp+cbData] +
push eax  +
lea eax [ebp+Data] +
push eax  +
lea eax [ebp+Type] +
push eax  +
push ebx  +
lea eax [ebp+cbValueName] +
push eax  +
lea eax [ebp+ValueName] +
push eax  +
push [ebp+dwIndex]  +
mov [esi] bl +
push [ebp+hKey]  +
mov [ebp+cbValueName] 10h +
mov dword ptr [ebp+Data] ebx +
mov [ebp+var_50] ebx +
mov [ebp+var_4C] ebx +
mov [ebp+var_48] ebx +
mov [ebp+var_44] ebx +
mov [ebp+cbData] edi +
call ds:RegEnumValueW  +
test eax eax +
jnz loc_100F21E  +
cmp [ebp+Type] 3 +
jnz loc_100F21E  +
cmp [ebp+cbData] edi +
jnz loc_100F21E  +
mov ecx [ebp+cbValueName] +
mov [ebp+ecx*2+ValueName] ax +
lea edi [esi-4] +
push edi  +
lea eax [ebp+ValueName] +
push eax  +
call sub_100CFEA  +
test al al +
jz loc_100F21E  +
push dword ptr [edi]  +
lea ecx [ebp+var_6C] +
call sub_100A134  +
lea eax [ebp+Data] +
push eax  +
lea ecx [ebp+var_6C] +
call sub_100AA81  +
lea ecx [ebp+var_6C] +
call sub_100A19A  +
cmp [ebp+var_6C] ebx +
jnz loc_100F21E  +
mov byte ptr [esi] 1 +
inc [ebp+dwIndex]  +
mov eax [ebp+dwIndex] +
add esi 5 +
cmp eax [ebp+cValues] +
jb loc_100F191  +
xor edi edi +
cmp [ebp+cValues] ebx +
jbe loc_100F26F  +
lea esi [ebp+var_146C] +
cmp [esi+4] bl +
jz loc_100F266  +
push dword ptr [esi]  +
lea ecx [ebp+var_6C] +
call sub_100A134  +
push offset aSoftwareMicros  +
lea ecx [ebp+var_6C] +
call sub_10119C9  +
push offset aSoftwareMicr_3  +
lea ecx [ebp+var_6C] +
call sub_10119C9  +
inc edi  +
add esi 5 +
cmp edi [ebp+cValues] +
jb loc_100F23D  +
mov esi ds:RegCloseKey +
cmp [ebp+hKey] ebx +
jz loc_100F27F  +
push [ebp+hKey]  +
call esi  +
cmp [ebp+var_34] ebx +
jz loc_100F289  +
push [ebp+var_34]  +
call esi  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1002A8B  +
leave   +
retn   +
***
push 5  +
call sub_100F356  +
test eax eax +
jz loc_101CDF4  +
push 0  +
push 0  +
push 6  +
call sub_100F356  +
test eax eax +
jz loc_101CDFA  +
mov eax 7D6h +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 120h +
mov eax dword_104A044 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
mov esi 11Ch +
push esi  +
lea eax [ebp+var_120] +
push 0  +
push eax  +
call memset  +
mov eax [ebp+arg_0] +
add esp 0Ch +
push 3  +
mov [ebp+var_11C] eax +
mov eax [ebp+arg_4] +
push 2  +
mov [ebp+var_118] eax +
mov ax [ebp+arg_8] +
push 0  +
mov [ebp+var_120] esi +
mov esi ds:VerSetConditionMask +
push 0  +
mov [ebp+var_C] ax +
call esi  +
push 3  +
push 1  +
push edx  +
push eax  +
call esi  +
push 3  +
push 20h  +
push edx  +
push eax  +
call esi  +
push edx  +
push eax  +
push 23h  +
lea eax [ebp+var_120] +
push eax  +
call ds:VerifyVersionInfoW  +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop esi  +
call sub_1002A8B  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
xor eax eax +
mov [ebp+TokenHandle] eax +
cmp edi eax +
jz loc_100F3FE  +
mov [edi] eax +
mov esi [ebp+arg_4] +
cmp esi eax +
jz loc_100F407  +
mov [esi] eax +
lea eax [ebp+TokenHandle] +
push eax  +
push 8  +
call ds:GetCurrentProcess  +
push eax  +
call ds:OpenProcessToken  +
test eax eax +
jz loc_101D2F6  +
push esi  +
push edi  +
push [ebp+TokenHandle]  +
call sub_100F444  +
push [ebp+TokenHandle]  +
mov esi eax +
call ds:CloseHandle  +
pop edi  +
mov eax esi +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax [ebp+arg_4] +
push ebx  +
xor ebx ebx +
push esi  +
push edi  +
mov [ebp+ReturnLength] ebx +
mov [ebp+var_4] ebx +
cmp eax ebx +
jz loc_100F45F  +
mov [eax] ebx +
mov ecx [ebp+arg_8] +
cmp ecx ebx +
jz loc_100F468  +
mov [ecx] ebx +
mov esi ds:GetTokenInformation +
mov edi ds:__imp_GetLastError +
cmp eax ebx +
jz loc_100F4DB  +
lea eax [ebp+ReturnLength] +
push eax  +
push ebx  +
push ebx  +
push 1  +
push [ebp+TokenHandle]  +
call esi  +
call edi  +
cmp eax 7Ah +
jnz loc_101D0E5  +
push [ebp+ReturnLength]  +
call ds:malloc  +
mov ebx eax +
pop ecx  +
test ebx ebx +
jz loc_100F54D  +
lea eax [ebp+ReturnLength] +
push eax  +
push [ebp+ReturnLength]  +
push ebx  +
push 1  +
push [ebp+TokenHandle]  +
call esi  +
test eax eax +
jz loc_100F543  +
push dword ptr [ebx]  +
push [ebp+arg_4]  +
call sub_10112D7  +
push ebx  +
mov [ebp+var_4] eax +
call ds:__imp_free  +
pop ecx  +
xor ebx ebx +
cmp [ebp+var_4] ebx +
jl loc_101D101  +
cmp [ebp+arg_8] ebx +
jz loc_100F530  +
lea eax [ebp+ReturnLength] +
push eax  +
push ebx  +
push ebx  +
push 5  +
push [ebp+TokenHandle]  +
call esi  +
call edi  +
cmp eax 7Ah +
jnz loc_101D0F3  +
push [ebp+ReturnLength]  +
call ds:malloc  +
mov edi eax +
pop ecx  +
cmp edi ebx +
jz loc_100F560  +
lea eax [ebp+ReturnLength] +
push eax  +
push [ebp+ReturnLength]  +
push edi  +
push 5  +
push [ebp+TokenHandle]  +
call esi  +
test eax eax +
jz loc_100F559  +
push dword ptr [edi]  +
push [ebp+arg_8]  +
call sub_10112D7  +
push edi  +
mov [ebp+var_4] eax +
call ds:__imp_free  +
pop ecx  +
cmp [ebp+var_4] ebx +
jl loc_101D101  +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
call sub_100F56E  +
jmp loc_100F4C5  +
mov [ebp+var_4] 8007000Eh +
jmp loc_100F4D0  +
call sub_100F56E  +
jmp loc_100F525  +
mov [ebp+var_4] 8007000Eh +
jmp loc_100F530  +
***
call ds:__imp_GetLastError  +
test eax eax +
jle locret_100F582  +
and eax 0FFFFh +
or eax 80070000h +
retn   +
***
call sub_1001862  +
and dword ptr [ebp-4] 0 +
lea ecx [ebp-1Ch] +
call sub_1010B60  +
lea ecx [ebp-18h] +
mov byte ptr [ebp-4] 1 +
call sub_100CDEE  +
push dword ptr [ebp-1Ch]  +
mov byte ptr [ebp-4] 2 +
push dword ptr [ebp+8]  +
call sub_100F5F8  +
mov [ebp-14h] eax +
test eax eax +
jl loc_100F5D0  +
push dword ptr [ebp-18h]  +
push dword ptr [ebp+8]  +
call sub_100F5F8  +
mov [ebp-14h] eax +
lea ecx [ebp-18h] +
mov byte ptr [ebp-4] 1 +
call sub_100EAE5  +
lea ecx [ebp-1Ch] +
mov byte ptr [ebp-4] 0 +
call sub_100EAE5  +
mov eax [ebp-14h] +
call sub_10015C0  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov eax dword_104A044 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
push edi  +
lea eax [ebp+TokenHandle] +
push eax  +
push 88h  +
push [ebp+ProcessHandle]  +
mov esi offset off_1002BE4 +
xor edi edi +
mov [ebp+var_C] esi +
mov [ebp+TokenHandle] edi +
call ds:OpenProcessToken  +
test eax eax +
jz loc_101E46F  +
mov ebx ds:GetTokenInformation +
lea eax [ebp+ReturnLength] +
push eax  +
push edi  +
push edi  +
push 6  +
push [ebp+TokenHandle]  +
call ebx  +
test eax eax +
jnz loc_101E4AA  +
call ds:__imp_GetLastError  +
cmp eax 7Ah +
jnz loc_101E475  +
push [ebp+pSid]  +
mov edi ds:GetLengthSid +
call edi  +
mov ecx [ebp+ReturnLength] +
lea eax [ecx+eax+0Ch] +
mov [ebp+ReturnLength] eax +
call sub_100FA58  +
mov esi esp +
lea eax [ebp+ReturnLength] +
push eax  +
push [ebp+ReturnLength]  +
push esi  +
push 6  +
push [ebp+TokenHandle]  +
call ebx  +
test eax eax +
jz loc_100F700  +
cmp dword ptr [esi] 0 +
jz loc_101E4A3  +
push [ebp+pSid]  +
mov ebx [esi] +
call edi  +
push [ebp+pSid]  +
add eax 8 +
add [ebx+2] ax +
push 10000000h  +
push 2  +
push dword ptr [esi]  +
call ds:AddAccessAllowedAce  +
test eax eax +
jz loc_100F700  +
push dword ptr [esi]  +
call ds:IsValidAcl  +
mov eax [esi] +
movzx eax word ptr [eax+2] +
push eax  +
push esi  +
push 6  +
push [ebp+TokenHandle]  +
call ds:SetTokenInformation  +
test eax eax +
jz loc_100F700  +
push 0  +
lea ecx [ebp+var_C] +
mov [ebp+var_C] offset off_1002BE4 +
call sub_1002CC0  +
xor eax eax +
***
lea esp [ebp-1Ch] +
pop edi  +
pop esi  +
pop ebx  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_1002A8B  +
leave   +
retn 8  +
***
call ds:__imp_GetLastError  +
jmp loc_101E49D  +
***
call sub_100CAAE  +
test al al +
jnz loc_100F735  +
call sub_10114D4  +
test eax eax +
jnz loc_100F735  +
call sub_100F752  +
test eax eax +
jnz loc_100F735  +
mov dword ptr [esi+9Ch] 2 +
jmp loc_100A85B  +
mov [esi+9Ch] edi +
jmp loc_100A85B  +
test al al +
jz loc_100A87F  +
jmp loc_100A8A0  +
***
call sub_1002A3A  +
push offset aSoftwareMicr_0  +
mov esi 104h +
push esi  +
lea eax [ebp-218h] +
push eax  +
call sub_1002525  +
push offset dword_1003488  +
push esi  +
lea eax [ebp-218h] +
push eax  +
call sub_100F84F  +
push offset aPreventfromsta  +
push esi  +
lea eax [ebp-218h] +
push eax  +
call sub_100F84F  +
lea ecx [ebp-2B8h] +
call sub_100C78B  +
and dword ptr [ebp-4] 0 +
push 0  +
push 1  +
lea eax [ebp-218h] +
push eax  +
push 80000002h  +
lea ecx [ebp-2B8h] +
call sub_100CCC4  +
xor ecx ecx +
test eax eax +
setnl cl  +
cmp dword_104A3AC 0 +
mov [ebp-2BCh] ecx +
jz loc_100F806  +
mov al byte_104A3B0 +
cmp al 4 +
jb loc_100F821  +
mov eax dword_104A398 +
mov ecx dword_104A39C +
mov edx 200h +
mov esi 80000000h +
and eax edx +
and ecx esi +
or eax ecx +
jnz loc_101D39F  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-2B8h] +
call sub_100AA1A  +
mov eax [ebp-2BCh] +
call sub_1002A77  +
retn   +
test al al +
jnz loc_100F806  +
jmp loc_100F7E5  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_4] +
push esi  +
xor eax eax +
push edi  +
test ebx ebx +
jz loc_100F8CD  +
cmp ebx 7FFFFFFFh +
ja loc_100F8CD  +
mov esi [ebp+arg_0] +
test eax eax +
jl loc_100F8D4  +
lea edi [ebp+arg_4] +
mov edx ebx +
mov eax esi +
call sub_1008B3D  +
mov edx [ebp+arg_4] +
test eax eax +
jl loc_100F8C6  +
mov ecx ebx +
sub ecx edx +
lea eax [esi+edx*2] +
mov [ebp+arg_4] 0 +
jz loc_100F8D8  +
mov esi ecx +
sub esi ebx +
lea edi [esi+edx+7FFFFFFFh] +
mov esi [ebp+arg_8] +
sub esi eax +
test edi edi +
jz loc_100F8BA  +
movzx edx word ptr [esi+eax] +
test dx dx +
jz loc_100F8BA  +
mov [eax] dx +
inc eax  +
inc eax  +
dec ecx  +
dec edi  +
test ecx ecx +
jnz loc_100F8A2  +
test ecx ecx +
jz loc_100F8D8  +
xor ecx ecx +
mov [eax] cx +
mov eax [ebp+arg_4] +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
mov eax 80070057h +
jmp loc_100F868  +
xor edx edx +
jmp loc_100F87E  +
dec eax  +
dec eax  +
mov [ebp+arg_4] 8007007Ah +
jmp loc_100F8BE  +
***
call sub_10015E0  +
mov ebx ecx +
mov esi offset off_1002BE4 +
xor edi edi +
mov [ebp-14h] esi +
mov [ebp-10h] edi +
lea eax [ebp-10h] +
push eax  +
push 1  +
push 8  +
mov [ebp-4] edi +
call ds:GetCurrentThread  +
push eax  +
call ds:OpenThreadToken  +
test eax eax +
jnz loc_101E4FE  +
call ds:__imp_GetLastError  +
cmp eax 3F0h +
jnz loc_101E4DF  +
mov ecx ebx +
call sub_100F952  +
push edi  +
lea ecx [ebp-14h] +
mov [ebp-14h] esi +
call sub_1002CC0  +
call sub_10015C0  +
retn   +
***
call sub_10015E0  +
mov ebx ecx +
mov esi offset off_1002BE4 +
xor edi edi +
mov [ebp-14h] esi +
mov [ebp-10h] edi +
lea eax [ebp-10h] +
push eax  +
push 8  +
mov [ebp-4] edi +
call ds:GetCurrentProcess  +
push eax  +
call ds:OpenProcessToken  +
test eax eax +
jz loc_101E4C0  +
push dword ptr [ebp-10h]  +
mov ecx ebx +
call sub_100F9AC  +
push edi  +
lea ecx [ebp-14h] +
mov [ebp-14h] esi +
call sub_1002CC0  +
call sub_10015C0  +
retn   +
***
mov edi edi +
sub ecx eax +
and ecx 0Fh +
add eax ecx +
sbb ecx ecx +
or eax ecx +
pop ecx  +
jmp sub_100A16A  +
***
push eax  +
push 41h  +
push dword ptr [ebp+8]  +
call sub_100FA83  +
jmp loc_100A7CB  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_4] +
mov esi ecx +
cmp [ebp+arg_0] edi +
jnb loc_100FAA5  +
push ebx  +
mov ebx [ebp+arg_8] +
push ebx  +
call sub_1002BC9  +
mov [esi+4] ebx +
mov [esi+8] edi +
pop ebx  +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 94h +
mov eax dword_104A044 +
xor eax ebp +
mov [ebp-4] eax +
push ebx  +
push esi  +
mov esi [ebp+8] +
push edi  +
mov edi [ebp+0Ch] +
lea eax [ebp-74h] +
push eax  +
push 1  +
xor ebx ebx +
push ebx  +
push offset aSoftwareMicr_0  +
mov dword ptr [esi] 2 +
push 80000002h  +
mov dword ptr [edi] 65h +
call ds:RegOpenKeyExW  +
push eax  +
call sub_100A7A1  +
cmp eax ebx +
mov [ebp-80h] eax +
jl loc_100FC56  +
push 4  +
pop eax  +
mov [ebp-78h] eax +
mov [ebp-6Ch] eax +
lea eax [ebp-78h] +
push eax  +
lea eax [ebp-70h] +
push eax  +
lea eax [ebp-6Ch] +
push eax  +
push offset aSetupcompleted  +
push ebx  +
push dword ptr [ebp-74h]  +
mov [ebp-70h] ebx +
mov ebx ds:SHGetValueW +
call ebx  +
push eax  +
call sub_100A7A1  +
test eax eax +
jl loc_100FC4D  +
xor eax eax +
inc eax  +
cmp [ebp-70h] eax +
jnz loc_100FC4D  +
mov [esi] eax +
xor eax eax +
push 62h  +
push eax  +
mov [ebp-68h] ax +
lea eax [ebp-66h] +
push eax  +
mov dword ptr [edi] 64h +
call memset  +
add esp 0Ch +
lea eax [ebp-78h] +
push eax  +
lea eax [ebp-68h] +
push eax  +
lea eax [ebp-6Ch] +
push eax  +
push offset aIndexercatalog  +
push 0  +
push dword ptr [ebp-74h]  +
mov dword ptr [ebp-78h] 64h +
mov dword ptr [ebp-6Ch] 1 +
call ebx  +
test eax eax +
jnz loc_100FC4D  +
cmp dword ptr [ebp-6Ch] 1 +
jnz loc_100FC4D  +
lea eax [ebp-7Ch] +
push eax  +
lea eax [ebp-88h] +
push eax  +
lea eax [ebp-84h] +
push eax  +
lea eax [ebp-68h] +
push offset aD_X_X  +
push eax  +
call swscanf_s  +
add esp 14h +
cmp eax 3 +
jnz loc_100FC4D  +
lea eax [ebp-94h] +
push eax  +
push 800h  +
push 1  +
mov dword ptr [ebp-94h] 0Ch +
call ds:GetNLSVersion  +
test eax eax +
jz loc_100FC4D  +
push 4  +
pop eax  +
cmp [ebp-84h] eax +
jnz loc_100FC4D  +
mov ecx [ebp-88h] +
cmp ecx [ebp-90h] +
jnz loc_100FC4D  +
mov ecx [ebp-7Ch] +
cmp ecx [ebp-8Ch] +
ja loc_100FC4D  +
and dword ptr [ebp-70h] 0 +
mov [ebp-6Ch] eax +
mov [ebp-78h] eax +
lea eax [ebp-78h] +
push eax  +
lea eax [ebp-70h] +
push eax  +
lea eax [ebp-6Ch] +
push eax  +
push offset aRebuildindex  +
push 0  +
push dword ptr [ebp-74h]  +
call ebx  +
test eax eax +
jz loc_101B6CB  +
and dword ptr [esi] 0 +
and dword ptr [edi] 0 +
***
mov eax [ebp+var_7C] +
cmp eax [ebp+var_8C] +
jb loc_101B711  +
push [ebp+hKey]  +
call ds:RegCloseKey  +
mov ecx [ebp+var_4] +
mov eax [ebp+var_80] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1002A8B  +
leave   +
retn 8  +
***
mov eax offset dword_1040C78 +
call sub_1002A3A  +
lea eax [ebp+8] +
xor ebx ebx +
push eax  +
lea ecx [ebp-0A4h] +
mov [ebp-4] ebx +
call sub_100EA61  +
push ebx  +
lea ecx [ebp-0A4h] +
mov byte ptr [ebp-4] 1 +
call sub_100FCFC  +
mov esi eax +
push esi  +
call ds:PathStripToRootW  +
test eax eax +
jz loc_100FCDA  +
push esi  +
call ds:PathIsDirectoryW  +
test eax eax +
jz loc_101CE19  +
lea ecx [ebp-0A4h] +
call sub_10084DE  +
lea ecx [ebp+8] +
call sub_10084DE  +
mov al bl +
call sub_1002A77  +
retn 94h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
mov esi ecx +
cmp eax [esi+8] +
jbe loc_100FD11  +
mov edx [esi] +
push eax  +
call dword ptr [edx]  +
mov eax [esi+4] +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_1002A3A  +
push 0  +
push 2  +
push offset aSoftwareMic_14  +
mov esi ecx +
push 80000002h  +
lea ecx [ebp-0B0h] +
call sub_100A989  +
and dword ptr [ebp-4] 0 +
push offset aDatadirectory  +
lea ecx [ebp-0B0h] +
xor edi edi +
call sub_100FD89  +
test eax eax +
jnz loc_101CE20  +
call sub_100F56E  +
mov edi eax +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-0B0h] +
call sub_100AA1A  +
mov eax edi +
call sub_1002A77  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx+9Ch] +
test eax eax +
jz loc_101DEF7  +
push [ebp+lpValueName]  +
push eax  +
call ds:RegDeleteValueW  +
test eax eax +
jz loc_101DEFE  +
push eax  +
***
call ds:SetLastError  +
xor eax eax +
pop ebp  +
retn 4  +
***
call sub_1003649  +
mov eax ecx +
mov ebx [ebp+9Ch] +
and dword ptr [ebp-4] 0 +
test ebx ebx +
jz loc_100FDE2  +
mov byte ptr [ebx] 0 +
mov ecx [eax+4] +
push 2  +
call sub_1009E64  +
sub esp 94h +
lea eax [ebp+8] +
mov ecx esp +
mov [ebp-140h] esp +
push eax  +
call sub_100EA61  +
lea eax [ebp-0A8h] +
push eax  +
call sub_100FE6A  +
push dword ptr [ebp-0A4h]  +
mov esi ds:PathIsDirectoryW +
and dword ptr [ebp-140h] 0 +
mov byte ptr [ebp-4] 1 +
call esi  +
test eax eax +
jz loc_101CE98  +
push dword ptr [ebp-0A4h]  +
mov byte ptr [ebp-4] 2 +
call esi  +
test eax eax +
jz loc_101CF32  +
lea ecx [ebp-0A8h] +
call sub_10084DE  +
lea ecx [ebp+8] +
call sub_10084DE  +
mov eax [ebp-140h] +
call sub_1002FBC  +
retn 98h  +
***
call sub_10015E0  +
mov esi [ebp+8] +
and dword ptr [ebp-10h] 0 +
mov [ebp-14h] esi +
xor edi edi +
lea eax [ebp+0Ch] +
inc edi  +
push eax  +
mov ecx esi +
mov [ebp-4] edi +
call sub_100EA61  +
mov eax [esi] +
push 0FFFFFFFFh  +
push dword ptr [esi+0Ch]  +
mov ecx esi +
push offset aSearchData_0  +
mov [ebp-10h] edi +
call dword ptr [eax+10h]  +
lea ecx [ebp+0Ch] +
call sub_10084DE  +
mov eax esi +
call sub_10015C0  +
retn 98h  +
***
call sub_1001862  +
mov eax [ebp+10h] +
xor esi esi +
cmp eax esi +
jz loc_101C4AD  +
mov edi 8007000Eh +
push 28h  +
mov [eax] esi +
mov [ebp-14h] edi +
mov [ebp-18h] esi +
mov [ebp-4] esi +
call off_104B7F4  +
cmp eax esi +
jz loc_100FF55  +
push dword ptr [ebp+8]  +
mov ecx eax +
call sub_1010441  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov esi eax +
test esi esi +
jz loc_100FF4B  +
mov eax [ebp+8] +
lea ecx [esi+8] +
mov [esi+24h] eax +
call sub_100FF69  +
mov edi eax +
test edi edi +
jl loc_100FF59  +
xor edi edi +
test edi edi +
jnz loc_100FF59  +
push dword ptr [ebp+10h]  +
mov eax [esi] +
push dword ptr [ebp+0Ch]  +
push esi  +
call dword ptr [eax]  +
mov edi eax +
test edi edi +
jnz loc_100FF59  +
mov eax edi +
call sub_10015C0  +
retn 0Ch  +
***
xor eax eax +
jmp loc_100FF16  +
***
push 1  +
mov ecx esi +
call sub_1011D9E  +
jmp loc_100FF4B  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_100FF82  +
test eax eax +
jl loc_100FF7B  +
mov byte ptr [esi+18h] 1 +
pop esi  +
retn   +
***
call sub_1002A98  +
and dword ptr [ebp-4] 0 +
push ecx  +
call ds:InitializeCriticalSection  +
and dword ptr [ebp-1Ch] 0 +
mov dword ptr [ebp-4] 0FFFFFFFEh +
mov eax [ebp-1Ch] +
call sub_1002ADD  +
retn   +
***
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
mov ecx [esi+0C4h] +
test ecx ecx +
jnz loc_101016B  +
lea eax [ebp-4] +
push eax  +
push offset aUser32_dll  +
push 1  +
call ds:GetModuleHandleExW  +
test eax eax +
jz loc_101C12A  +
push edi  +
mov edi ds:__imp_GetProcAddress +
push offset aRegisterpowers  +
push dword ptr [ebp-4]  +
call edi  +
push offset aUnregisterpowe  +
push dword ptr [ebp-4]  +
mov [esi+0C4h] eax +
call edi  +
mov ecx [esi+0C4h] +
mov [esi+0C8h] eax +
pop edi  +
test ecx ecx +
jz loc_1010176  +
test eax eax +
jz loc_1010176  +
push 1  +
push offset dword_1010180  +
push dword ptr [esi+70h]  +
call ecx  +
mov [esi+0C0h] eax +
test eax eax +
jz loc_101C12A  +
xor eax eax +
pop esi  +
leave   +
retn   +
***
cmp dword ptr [esi+0C8h] 0 +
jz loc_10100FD  +
jmp loc_101014C  +
***
mov eax 8007007Fh +
jmp loc_1010168  +
***
mov eax offset dword_104185C +
call sub_1003649  +
and dword ptr [ebp-4] 0 +
push 0  +
lea ecx [ebp-0A8h] +
call sub_10117E5  +
push offset word_100348C  +
push dword ptr [ebp-0A4h]  +
mov byte ptr [ebp-4] 1 +
call sub_100C6D5  +
test eax eax +
jz loc_101DD94  +
push dword ptr [ebp-0A4h]  +
call sub_101025C  +
lea ecx [ebp-0A8h] +
mov [ebp-0ACh] eax +
call sub_10084DE  +
mov eax [ebp-0ACh] +
call sub_1002FBC  +
retn   +
***
call sub_1002A3A  +
mov ebx [ebp+8] +
xor eax eax +
mov [ebp-828h] ebx +
cmp ebx eax +
jz loc_1010337  +
cmp [ebx] ax +
jz loc_1010337  +
mov edi ds:GetEnvironmentVariableW +
push eax  +
push eax  +
mov esi offset aPath +
push esi  +
call edi  +
mov ecx ebx +
lea edx [ecx+2] +
mov bx [ecx] +
inc ecx  +
inc ecx  +
test bx bx +
jnz loc_101029C  +
sub ecx edx +
sar ecx 1 +
lea ebx [ecx+eax+104h] +
lea ecx [ebp-824h] +
call sub_100A0E6  +
and dword ptr [ebp-4] 0 +
push ebx  +
push ebx  +
lea ecx [ebp-824h] +
call sub_100FCFC  +
push eax  +
push esi  +
call edi  +
push 0FFFFFFFFh  +
lea ecx [ebp-824h] +
call sub_1010357  +
mov eax [ebp-824h] +
push 0FFFFFFFFh  +
push dword ptr [ebp-818h]  +
lea ecx [ebp-824h] +
push offset dword_1010344  +
call dword ptr [eax+10h]  +
mov eax [ebp-824h] +
push 0FFFFFFFFh  +
push dword ptr [ebp-818h]  +
lea ecx [ebp-824h] +
push dword ptr [ebp-828h]  +
call dword ptr [eax+10h]  +
push dword ptr [ebp-820h]  +
push esi  +
call ds:SetEnvironmentVariableW  +
test eax eax +
jz loc_101DD67  +
lea ecx [ebp-824h] +
call sub_1009FC5  +
xor eax eax +
call sub_1002A77  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
sub esp 20h +
push esi  +
mov esi ecx +
cmp eax 0FFFFFFFFh +
jnz loc_1010373  +
push dword ptr [esi+4]  +
call ds:lstrlenW  +
cmp eax [esi+8] +
jnb loc_101B683  +
mov ecx [esi+4] +
mov [esi+0Ch] eax +
xor edx edx +
mov [ecx+eax*2] dx +
pop esi  +
leave   +
retn 4  +
***
movzx eax ds:word_10103E8 +
push eax  +
push offset SourceName  +
call sub_10103F1  +
mov [esi+30h] eax +
mov esi eax +
test esi esi +
jz loc_101D389  +
mov dword_104A08C esi +
xor eax eax +
call sub_10015C0  +
retn   +
***
xor eax eax +
jmp loc_10103C6  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_1010419  +
mov ax [ebp+arg_4] +
and dword ptr [esi+54h] 0 +
mov [esi+58h] ax +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
lea eax [esi+10h] +
push eax  +
push 21h  +
call sub_100850F  +
mov dword ptr [esi] offset off_1002D28 +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_1010471  +
mov dword ptr [esi] offset off_1010458 +
mov eax esi +
pop esi  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
lea ecx [esi+4] +
call sub_101048D  +
mov dword ptr [esi] offset off_10019CC +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
push edi  +
mov edx ecx +
and dword ptr [edx] 0 +
lea esi [edx+4] +
push 6  +
pop ecx  +
xor eax eax +
mov edi esi +
stos   +
mov [esi+18h] al +
pop edi  +
mov eax edx +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+10h]  +
mov ecx [ebp+8] +
push dword ptr [ebp+0Ch]  +
call sub_10104CB  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push offset off_10104E8  +
push ecx  +
call sub_10017D5  +
pop ebp  +
retn 8  +
***
mov dword ptr [esi] offset off_1001550 +
xor edi edi +
mov [esi+30h] edi +
mov eax offset off_1002BE4 +
mov [esi+34h] eax +
mov [esi+38h] edi +
mov [esi+3Ch] eax +
mov [esi+40h] edi +
mov [esi+48h] eax +
lea eax [esi+74h] +
push eax  +
mov [esi+4Ch] edi +
call ds:InitializeCriticalSection  +
mov [esi+8Ch] edi +
mov [esi+90h] edi +
mov [esi+94h] edi +
mov [esi+98h] edi +
mov [esi+9Ch] edi +
mov [esi+0B4h] edi +
pop edi  +
mov dword ptr [esi+0A0h] 1 +
mov eax esi +
pop esi  +
retn   +
***
mov dword_104A068 esi +
mov eax esi +
pop esi  +
retn   +
***
mov ecx edx +
mov [esi+28h] eax +
call sub_100FF82  +
test eax eax +
jl loc_101C177  +
mov dword ptr [esi+4] 24h +
***
pop edi  +
mov eax esi +
pop esi  +
retn   +
***
mov ecx offset unk_104A180 +
call sub_101060E  +
push offset loc_1012071  +
call sub_1010E75  +
pop ecx  +
retn   +
***
call sub_10015E0  +
mov esi ecx +
mov [ebp-10h] esi +
call near ptr dword_101050C+15h  +
xor edi edi +
mov dword ptr [esi] offset off_10014D8 +
mov [ebp-4] edi +
mov [esi+0B8h] edi +
lea ecx [esi+0CCh] +
mov byte ptr [ebp-4] 1 +
mov [esi+0BCh] edi +
mov [esi+0C0h] edi +
call sub_1010669  +
mov [esi+0DCh] edi +
mov [esi+0E0h] edi +
mov eax esi +
call sub_10015C0  +
retn   +
***
mov eax ecx +
and dword ptr [eax+8] 0 +
and dword ptr [eax+0Ch] 0 +
retn   +
***
call sub_10015E0  +
mov ebx ecx +
cmp dword_104A3AC 0 +
jz loc_10106BE  +
mov al byte_104A3B0 +
cmp al 4 +
jb loc_1010725  +
mov eax dword_104A398 +
mov ecx dword_104A39C +
mov edx 200h +
mov esi 80000000h +
and eax edx +
and ecx esi +
or eax ecx +
jnz loc_101C5F0  +
push dword ptr [ebp+8]  +
mov ecx ebx +
call sub_10107C4  +
mov edi eax +
test edi edi +
jl loc_101071B  +
xor esi esi +
mov [ebp+8] esi +
and [ebp-4] esi +
lea eax [ebp-10h] +
push eax  +
call sub_1010745  +
mov edi eax +
test edi edi +
jl loc_101070D  +
push dword ptr [ebp-10h]  +
lea ecx [ebp+8] +
call sub_1001669  +
mov esi [ebp+8] +
mov eax [esi] +
lea ecx [ebx+0BCh] +
push ecx  +
push offset dword_1010730  +
push esi  +
call dword ptr [eax]  +
mov edi eax +
test edi edi +
jl loc_101070D  +
mov [esi+0Ch] ebx +
or dword ptr [ebp-4] 0FFFFFFFFh +
test esi esi +
jz loc_101071B  +
mov eax [esi] +
push esi  +
call dword ptr [eax+8]  +
mov eax edi +
call sub_10015C0  +
retn 4  +
test al al +
jnz loc_10106BE  +
jmp loc_101069D  +
***
call sub_1001862  +
mov esi [ebp+8] +
xor edi edi +
cmp esi edi +
jz loc_101C513  +
push 10h  +
mov [esi] edi +
mov dword ptr [ebp-14h] 8007000Eh +
mov [ebp-4] edi +
call off_104B7F4  +
cmp eax edi +
jz loc_1010792  +
push edi  +
mov ecx eax +
call sub_101079B  +
cmp eax edi +
jz loc_1010785  +
mov [ebp-14h] edi +
mov [esi] eax +
mov eax [ebp-14h] +
call sub_10015C0  +
retn 4  +
xor eax eax +
jmp loc_101077E  +
***
mov edi edi +
push esi  +
mov esi ecx +
and dword ptr [esi+4] 0 +
and dword ptr [esi+0Ch] 0 +
mov dword ptr [esi] offset off_10016B4 +
mov ecx dword_104A064 +
mov eax [ecx] +
call dword ptr [eax+4]  +
mov eax esi +
pop esi  +
retn 4  +
***
call sub_1002A3A  +
mov eax [ebp+8] +
xor ebx ebx +
mov esi ecx +
mov [ebp-1CCh] eax +
cmp dword_104A3AC ebx +
jz loc_1010816  +
mov al byte_104A3B0 +
cmp al 4 +
jb loc_1010AC7  +
mov eax dword_104A398 +
mov ecx dword_104A39C +
mov edx 200h +
mov edi 80000000h +
and eax edx +
and ecx edi +
or eax ecx +
jnz loc_101D7E0  +
push ebx  +
push ebx  +
call ds:GetModuleHandleW  +
push eax  +
push dword ptr [ebp-1CCh]  +
mov ecx esi +
call sub_100CA3C  +
mov [ebp-1E8h] ebx +
mov [ebp-1E4h] ebx +
mov [ebp-1E0h] ebx +
mov [ebp-1DCh] ebx +
mov [ebp-1D8h] ebx +
push 1  +
push ebx  +
lea ecx [ebp-1E8h] +
mov [ebp-4] ebx +
call sub_10116DA  +
mov [ebp-1C8h] ebx +
lea eax [ebp-1C8h] +
push eax  +
push 11h  +
mov byte ptr [ebp-4] 1 +
call sub_100CE0D  +
cmp eax ebx +
jl loc_101D820  +
push 1  +
push dword ptr [ebp-1C8h]  +
lea ecx [ebp-1E8h] +
call sub_1011348  +
lea eax [ebp-1C4h] +
push eax  +
mov dword ptr [ebp-1C4h] 114h +
xor edi edi +
call ds:GetVersionExW  +
test eax eax +
jz loc_10108BE  +
cmp dword ptr [ebp-1B4h] 2 +
jnz loc_10108BE  +
cmp dword ptr [ebp-1C0h] 4 +
jbe loc_10108BE  +
inc edi  +
push ebx  +
neg edi  +
sbb edi edi +
and edi 20h +
push edi  +
push ebx  +
push 2  +
push 6  +
push ebx  +
lea eax [ebp-208h] +
push eax  +
push 1  +
push dword ptr [ebp-1E8h]  +
mov dword ptr [ebp-208h] 9 +
mov [ebp-204h] ebx +
mov [ebp-200h] ebx +
mov [ebp-1FCh] ebx +
mov dword ptr [ebp-1F8h] 0Ah +
mov [ebp-1F4h] ebx +
mov [ebp-1F0h] ebx +
mov [ebp-1ECh] ebx +
call ds:CoInitializeSecurity  +
mov edi eax +
cmp edi ebx +
jl loc_101D853  +
mov [ebp-1D0h] ebx +
lea eax [ebp-1D0h] +
push eax  +
push offset stru_1010AD4  +
push 1  +
push ebx  +
push offset stru_1010B18  +
mov byte ptr [ebp-4] 2 +
call ds:CoCreateInstance  +
test eax eax +
mov eax [ebp-1D0h] +
jl loc_1010966  +
cmp eax ebx +
jz loc_1010966  +
mov ecx [eax] +
push 2  +
push 1  +
push eax  +
call dword ptr [ecx+0Ch]  +
mov eax [ebp-1D0h] +
mov byte ptr [ebp-4] 1 +
cmp eax ebx +
jz loc_1010974  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov edi ds:CreateEventW +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
call edi  +
lea ecx [esi+34h] +
push eax  +
call sub_1002CC0  +
cmp [esi+38h] ebx +
jz loc_101D880  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
call edi  +
lea ecx [esi+48h] +
push eax  +
call sub_1002CC0  +
cmp [esi+4Ch] ebx +
jz loc_101D880  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
call edi  +
lea ecx [esi+3Ch] +
push eax  +
call sub_1002CC0  +
cmp [esi+40h] ebx +
jz loc_101D880  +
mov [esi+44h] ebx +
cmp dword_104A04C 7D6h +
mov edi 80000002h +
jl loc_101D89E  +
lea eax [esi+74h] +
push eax  +
lea ecx [ebp-1CCh] +
call sub_1002BED  +
push ebx  +
push 20019h  +
push offset aSoftwareMicr_0  +
push edi  +
lea ecx [ebp-0B0h] +
mov byte ptr [ebp-4] 3 +
mov dword ptr [esi+54h] 10h +
mov dword ptr [esi+58h] 2 +
mov [esi+5Ch] ebx +
mov dword ptr [esi+8Ch] 0C5h +
call sub_100A989  +
lea eax [ebp-1D4h] +
push eax  +
push offset aEnableservicep  +
lea ecx [ebp-0B0h] +
mov byte ptr [ebp-4] 4 +
mov [ebp-1D4h] ebx +
call sub_100E0CF  +
test eax eax +
jnz loc_101D8D3  +
lea ecx [ebp-0B0h] +
mov [esi+60h] ebx +
mov [esi+64h] ebx +
mov [esi+68h] ebx +
mov [esi+6Ch] ebx +
mov dword ptr [esi+0A4h] offset aWsearch +
mov dword ptr [esi+0A8h] offset loc_100BC4D +
mov [esi+0ACh] ebx +
mov [esi+0B0h] ebx +
mov byte ptr [ebp-4] 3 +
call sub_100AA1A  +
cmp [ebp-1CCh] ebx +
jz loc_1010A97  +
push dword ptr [ebp-1CCh]  +
call ds:LeaveCriticalSection  +
mov [ebp-4] bl +
cmp [ebp-1C8h] ebx +
jz loc_1010AAE  +
push dword ptr [ebp-1C8h]  +
call off_104B7F0  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-1E8h] +
call sub_1010B2D  +
xor eax eax +
call sub_1002A77  +
retn 4  +
cmp al bl +
jnz loc_1010816  +
jmp loc_10107F5  +
***
mov edi edi +
push esi  +
push edi  +
mov esi ecx +
push dword ptr [esi]  +
call off_104B7F0  +
push dword ptr [esi+4]  +
mov edi ds:__imp_free +
call edi  +
push dword ptr [esi+8]  +
call edi  +
push dword ptr [esi+0Ch]  +
call edi  +
push dword ptr [esi+10h]  +
call edi  +
add esp 10h +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
push offset unk_104A72C  +
push 2  +
push offset unk_104A2D0  +
mov esi ecx +
call sub_1010B7F  +
mov eax esi +
pop esi  +
retn   +
***
call sub_10015E0  +
mov [ebp-10h] ecx +
xor esi esi +
mov [ecx] esi +
mov [ebp-14h] esi +
mov ebx [ebp+0Ch] +
push ebx  +
mov [ebp-4] esi +
call ds:GetSidLengthRequired  +
push eax  +
call off_104B810  +
push ebx  +
push dword ptr [ebp+8]  +
mov edi eax +
push edi  +
call ds:InitializeSid  +
test eax eax +
jz loc_101E29A  +
cmp ebx esi +
jbe loc_1010BD7  +
push esi  +
push edi  +
call ds:GetSidSubAuthority  +
mov ecx [ebp+10h] +
mov ecx [ecx+esi*4] +
inc esi  +
mov [eax] ecx +
cmp esi ebx +
jb loc_1010BC2  +
mov eax [ebp-10h] +
mov [eax] edi +
mov eax [ebp-10h] +
call sub_10015C0  +
retn 0Ch  +
***
mov edi edi +
push edi  +
mov edx ecx +
push 6  +
pop ecx  +
xor eax eax +
mov edi edx +
stos   +
mov eax edx +
pop edi  +
retn   +
***
mov ecx offset unk_104A35C +
call sub_1010C3F  +
push offset loc_101213F  +
call sub_1010E75  +
pop ecx  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
call near ptr dword_1010BE8+4  +
push esi  +
mov dword ptr [esi] 2Ch +
call sub_1010C66  +
test eax eax +
jl loc_101CB7A  +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_1010C87  +
cmp dword ptr [eax] 2Ch +
jnz loc_1010C87  +
and dword ptr [eax+1Ch] 0 +
lea ecx [eax+4] +
call sub_100FF82  +
pop ebp  +
retn 4  +
mov eax 80070057h +
jmp loc_1010C83  +
***
mov ecx offset unk_104A3B8 +
call sub_1010CAE  +
push offset loc_101202F  +
call sub_1010E75  +
pop ecx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 98h +
mov eax dword_104A044 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
mov esi ecx +
call sub_1010D81  +
mov eax offset __ImageBase +
push 94h  +
mov [esi+8] eax +
mov [esi+4] eax +
lea eax [ebp+VersionInformation] +
push 0  +
push eax  +
mov dword ptr [esi] 3Ch +
mov byte ptr [esi+0Ch] 0 +
call memset  +
add esp 0Ch +
lea eax [ebp+VersionInformation] +
push eax  +
mov [ebp+VersionInformation.dwOSVersionInfoSize] 94h +
call ds:GetVersionExA  +
cmp [ebp+VersionInformation.dwPlatformId] 2 +
jnz loc_1010D50  +
cmp [ebp+VersionInformation.dwMajorVersion] 5 +
jb loc_1010D23  +
mov byte ptr [esi+0Ch] 1 +
lea ecx [esi+18h] +
mov dword ptr [esi+10h] 800h +
mov dword ptr [esi+14h] offset dword_1010D6C +
call sub_100FF82  +
test eax eax +
jl loc_101CBA1  +
mov ecx [ebp+var_4] +
mov eax esi +
xor ecx ebp +
pop esi  +
call sub_1002A8B  +
leave   +
retn   +
cmp [ebp+VersionInformation.dwPlatformId] 1 +
jz loc_101CB89  +
jmp loc_1010D23  +
***
cmp [ebp+VersionInformation.dwMinorVersion] 0 +
jbe loc_1010D23  +
jmp loc_1010D1F  +
***
mov edi edi +
push esi  +
mov esi ecx +
lea ecx [esi+18h] +
call sub_1010C0D  +
xor eax eax +
mov [esi+30h] eax +
mov [esi+34h] eax +
mov [esi+38h] eax +
mov eax esi +
pop esi  +
retn   +
***
mov eax 5A4Dh +
cmp word ptr ds:__ImageBase ax +
jnz loc_1010E43  +
mov eax ds:dword_100003C +
lea eax __ImageBase[eax] +
cmp dword ptr [eax] 4550h +
jnz loc_1010E43  +
movzx ecx word ptr [eax+18h] +
cmp ecx 10Bh +
jnz loc_101CCF9  +
cmp dword ptr [eax+74h] 0Eh +
jbe loc_1010E43  +
xor ecx ecx +
cmp [eax+0E8h] ecx +
setnz cl  +
mov eax ecx +
push 2  +
mov dword_104A078 eax +
call sub_10111B6  +
push eax  +
call ds:__set_app_type  +
or dword_104A0A8 0FFFFFFFFh +
or dword_104A0AC 0FFFFFFFFh +
pop ecx  +
pop ecx  +
call ds:__p__fmode  +
mov ecx dword_104BAA4 +
mov [eax] ecx +
call ds:__p__commode  +
mov ecx dword_104BAA0 +
mov [eax] ecx +
call sub_100E78D  +
cmp dword_104B814 0 +
jz loc_101CD1F  +
call sub_1010E4C  +
xor eax eax +
retn   +
***
xor eax eax +
jmp loc_1010DEA  +
***
call ds:_controlfp  +
pop ecx  +
pop ecx  +
retn   +
***
push offset loc_1011B38  +
call sub_1010E75  +
pop ecx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_0]  +
call sub_1010E91  +
neg eax  +
sbb eax eax +
neg eax  +
pop ecx  +
dec eax  +
pop ebp  +
retn   +
***
call sub_1002A98  +
mov eax dword_104A0AC +
mov [ebp-1Ch] eax +
cmp eax 0FFFFFFFFh +
jnz loc_101CD46  +
push dword ptr [ebp+8]  +
call ds:_onexit  +
pop ecx  +
call sub_1002ADD  +
retn   +
***
call sub_1010F01  +
push offset loc_1011B7A  +
call sub_1010E75  +
pop ecx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax ecx +
mov ecx [ebp+arg_0] +
mov [eax+4] ecx +
mov dword ptr [eax] offset off_100296C +
xor ecx ecx +
mov dword ptr [eax+14h] 2 +
mov [eax+0Ch] ecx +
mov [eax+10h] ecx +
mov [eax+18h] cx +
mov [eax+1Ah] cx +
mov [eax+8] eax +
pop ebp  +
retn 4  +
***
mov ecx offset unk_104A334 +
call sub_1010F52  +
push offset loc_10121D9  +
call sub_1010E75  +
pop ecx  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
push edi  +
lea edi [esi+10h] +
mov ecx edi +
call sub_1010C0D  +
and dword ptr [esi] 0 +
mov ecx edi +
mov dword ptr [esi+4] offset __ImageBase +
mov dword ptr [esi+8] offset dword_1010F98 +
mov dword ptr [esi+0Ch] offset dword_1010F98 +
call sub_100FF82  +
test eax eax +
jl loc_101CC17  +
mov dword ptr [esi] 28h +
pop edi  +
mov eax esi +
pop esi  +
retn   +
***
call sub_1010FB1  +
mov dword_104A060 eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 98h +
mov eax dword_104A044 +
xor eax ebp +
mov [ebp+var_4] eax +
lea eax [ebp+VersionInformation] +
push eax  +
mov [ebp+VersionInformation.dwOSVersionInfoSize] 94h +
call ds:GetVersionExA  +
test eax eax +
jz loc_1010FF9  +
cmp [ebp+VersionInformation.dwPlatformId] 2 +
jnz loc_1010FF9  +
xor eax eax +
inc eax  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_1002A8B  +
leave   +
retn   +
xor eax eax +
jmp loc_1010FED  +
***
push offset aSoftwareMic_15  +
mov ecx offset dword_104A26C +
call sub_10035A2  +
push offset loc_1011B54  +
call sub_1010E75  +
pop ecx  +
retn   +
***
push offset aSoftwareMic_16  +
mov ecx offset dword_104A270 +
call sub_10035A2  +
push offset loc_1011B67  +
call sub_1010E75  +
pop ecx  +
retn   +
***
push offset aHttp  +
mov ecx offset dword_104A0F4 +
call sub_1011187  +
push offset loc_1011B9B  +
mov dword_104A0F4 offset off_1002C74 +
call sub_1010E75  +
pop ecx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+lpString] +
mov esi ecx +
push edi  +
mov dword ptr [esi] offset off_1002B70 +
call ds:lstrlenW  +
mov [esi+4] edi +
mov [esi+0Ch] eax +
mov [esi+8] eax +
pop edi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
call ds:GetModuleHandleA  +
test eax eax +
jz loc_10111E4  +
push eax  +
call sub_10111EE  +
test eax eax +
jz loc_10111E4  +
movzx eax word ptr [eax+5Ch] +
cmp ax 2 +
jnz loc_101CDD1  +
push 2  +
pop eax  +
pop ebp  +
retn   +
mov eax [ebp+arg_0] +
pop ebp  +
retn   +
***
call sub_1002A98  +
xor eax eax +
mov ecx [ebp+8] +
test ecx ecx +
jz loc_101123D  +
cmp ecx 0FFFFFFFFh +
jz loc_101123D  +
and [ebp-4] eax +
mov edx 5A4Dh +
cmp [ecx] dx +
jnz loc_1011236  +
mov edx [ecx+3Ch] +
test edx edx +
jl loc_1011236  +
cmp edx 10000000h +
jnb loc_1011236  +
lea eax [edx+ecx] +
mov [ebp-1Ch] eax +
cmp dword ptr [eax] 4550h +
jnz loc_101CDC7  +
mov dword ptr [ebp-4] 0FFFFFFFEh +
call sub_1002ADD  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
push [ebp+bOwnerDefaulted]  +
mov edi ecx +
push 0  +
push dword ptr [edi]  +
call ds:SetSecurityDescriptorOwner  +
test eax eax +
jz loc_101D0AF  +
mov ebx ds:__imp_free +
lea esi [edi+4] +
push dword ptr [esi]  +
call ebx  +
and dword ptr [esi] 0 +
cmp [ebp+pSourceSid] 0 +
pop ecx  +
jz loc_101D093  +
push [ebp+pSourceSid]  +
push esi  +
call sub_10112D7  +
mov [ebp+pSourceSid] eax +
test eax eax +
jl loc_10112C8  +
push [ebp+bOwnerDefaulted]  +
push dword ptr [esi]  +
push dword ptr [edi]  +
call ds:SetSecurityDescriptorOwner  +
test eax eax +
jz loc_101D09A  +
mov eax [ebp+pSourceSid] +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
push esi  +
mov esi [ebp+arg_0] +
test esi esi +
jz loc_101D066  +
cmp dword ptr [esi] 0 +
jnz loc_101133C  +
push [ebp+pSourceSid]  +
and dword ptr [esi] 0 +
call ds:IsValidSid  +
test eax eax +
jz loc_101133C  +
push edi  +
push [ebp+pSourceSid]  +
call ds:GetLengthSid  +
mov edi eax +
push edi  +
call ds:malloc  +
pop ecx  +
mov [esi] eax +
test eax eax +
jz loc_101D070  +
push [ebp+pSourceSid]  +
push eax  +
push edi  +
call ds:CopySid  +
test eax eax +
jz loc_101D07A  +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
leave   +
retn 8  +
mov eax 80070057h +
jmp loc_1011337  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
lea eax [ebp+pSid] +
push eax  +
push [ebp+pSid]  +
mov edi ecx +
call sub_100CBE4  +
mov esi eax +
test esi esi +
jl loc_101137C  +
push [ebp+AccessMask]  +
mov ecx edi +
push [ebp+pSid]  +
call sub_1011389  +
push [ebp+pSid]  +
mov esi eax +
call ds:__imp_free  +
pop ecx  +
pop edi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
push [ebp+AccessMask]  +
mov esi ecx +
push [ebp+pSid]  +
lea edi [esi+0Ch] +
push edi  +
call sub_10113CC  +
mov ebx eax +
test ebx ebx +
jl loc_10113BE  +
push 0  +
push dword ptr [edi]  +
push 1  +
push dword ptr [esi]  +
call ds:SetSecurityDescriptorDacl  +
test eax eax +
jz loc_101D2EA  +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push ebx  +
mov ebx [ebp+arg_0] +
push edi  +
xor edi edi +
cmp ebx edi +
jz loc_101D19E  +
push esi  +
mov esi [ebx] +
mov [ebp+pAcl] esi +
cmp [ebp+pSid] edi +
jz loc_101149F  +
push [ebp+pSid]  +
call ds:IsValidSid  +
test eax eax +
jz loc_101149F  +
mov [ebp+var_C] edi +
cmp [ebx] edi +
jnz loc_101D1A8  +
push [ebp+pSid]  +
call ds:GetLengthSid  +
mov ecx [ebp+var_C] +
lea edi [eax+ecx+10h] +
push edi  +
call ds:malloc  +
mov esi eax +
pop ecx  +
test esi esi +
jz loc_1011496  +
push 2  +
push edi  +
push esi  +
call ds:InitializeAcl  +
mov edi ds:__imp_free +
test eax eax +
jz loc_101148C  +
push [ebp+pAcl]  +
push esi  +
call sub_10114AB  +
mov [ebp+arg_0] eax +
test eax eax +
jl loc_101D1D1  +
push [ebp+pSid]  +
push [ebp+AccessMask]  +
push 2  +
push esi  +
call ds:AddAccessAllowedAce  +
test eax eax +
jz loc_101148C  +
push [ebp+pAcl]  +
mov [ebx] esi +
call edi  +
pop ecx  +
cmp [ebp+arg_0] 0 +
jl loc_101D1D1  +
mov eax [ebp+arg_0] +
pop esi  +
pop edi  +
pop ebx  +
leave   +
retn 0Ch  +
cmp eax edi +
mov [ebp+arg_0] eax +
jge loc_101140E  +
jmp loc_1011479  +
call sub_100F56E  +
jmp loc_101D1C9  +
mov [ebp+arg_0] 8007000Eh +
jmp loc_1011479  +
mov eax 80070057h +
jmp loc_101147C  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push esi  +
xor esi esi +
cmp [ebp+arg_0] esi +
jz loc_101D134  +
cmp [ebp+pAcl] esi +
jnz loc_101D13E  +
xor eax eax +
pop esi  +
leave   +
retn 8  +
***
call sub_1002A3A  +
xor ebx ebx +
push ebx  +
xor esi esi +
inc esi  +
push esi  +
push offset aSystemSetup  +
push 80000002h  +
lea ecx [ebp-0B0h] +
mov [ebp-0B8h] ebx +
call sub_100A989  +
lea eax [ebp-0B8h] +
push eax  +
push offset aSystemsetupinp  +
lea ecx [ebp-0B0h] +
mov [ebp-4] ebx +
call sub_100E0CF  +
test eax eax +
jz loc_101152B  +
cmp [ebp-0B8h] ebx +
jnz loc_1011587  +
call sub_10115C9  +
mov [ebp-0B4h] ebx +
test eax eax +
jnz loc_1011587  +
cmp dword_104A3AC ebx +
jz loc_101156C  +
mov al byte_104A3B0 +
cmp al 4 +
jb loc_101158F  +
mov eax dword_104A398 +
mov ecx dword_104A39C +
mov edx 200h +
mov esi 80000000h +
and eax edx +
and ecx esi +
or eax ecx +
jnz loc_101D255  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-0B0h] +
call sub_100AA1A  +
mov eax [ebp-0B4h] +
call sub_1002A77  +
retn   +
mov [ebp-0B4h] esi +
jmp loc_101153A  +
cmp al bl +
jnz loc_101156C  +
jmp loc_101154B  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push esi  +
lea eax [ebp+hKey] +
push eax  +
push 1  +
xor esi esi +
push esi  +
push offset aSystemSetup  +
push 80000002h  +
mov [ebp+hKey] esi +
call ds:RegOpenKeyExW  +
test eax eax +
jnz loc_101162B  +
lea eax [ebp+cbData] +
push eax  +
lea eax [ebp+Data] +
push eax  +
lea eax [ebp+Type] +
push eax  +
push esi  +
push offset aUpgrade  +
push [ebp+hKey]  +
mov dword ptr [ebp+Data] esi +
mov [ebp+cbData] 4 +
mov [ebp+Type] esi +
call ds:RegQueryValueExW  +
test eax eax +
jz loc_1021992  +
push [ebp+hKey]  +
call ds:RegCloseKey  +
mov eax esi +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ecx+2Ch] +
xor eax eax +
test esi esi +
jz loc_101168E  +
cmp [esi] eax +
jz loc_101168E  +
test eax eax +
jnz loc_101169E  +
push [ebp+flags]  +
push [ebp+dwClsContext]  +
push esi  +
call sub_100C9E1  +
add esi 24h +
cmp dword ptr [esi] 0 +
jnz loc_1011672  +
test eax eax +
jnz loc_101169E  +
push [ebp+flags]  +
push [ebp+dwClsContext]  +
push offset unk_104A334  +
call sub_10116A8  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
mov edi [ebp+arg_0] +
test edi edi +
jz loc_101D024  +
xor eax eax +
push esi  +
mov esi [edi+8] +
inc eax  +
cmp esi [edi+0Ch] +
jb loc_10116CB  +
pop esi  +
pop edi  +
pop ebp  +
retn 0Ch  +
test eax eax +
jge loc_101D02E  +
jmp loc_10116C5  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
push edi  +
mov ebx ecx +
call sub_100CB11  +
mov edi eax +
xor esi esi +
cmp edi esi +
jl loc_1011769  +
push esi  +
lea eax [ebp+pSourceSid] +
push eax  +
lea eax [ebp+var_4] +
push eax  +
mov [ebp+var_4] esi +
mov [ebp+pSourceSid] esi +
call sub_100CB93  +
mov edi eax +
and eax 0FFFFh +
cmp eax 3F0h +
jnz loc_1011729  +
cmp [ebp+arg_4] esi +
jz loc_1011729  +
lea eax [ebp+pSourceSid] +
push eax  +
lea eax [ebp+var_4] +
push eax  +
call sub_100F3E8  +
mov edi eax +
cmp edi esi +
jl loc_1011769  +
push [ebp+bGroupDefaulted]  +
mov ecx ebx +
push [ebp+var_4]  +
call sub_1011269  +
mov edi eax +
cmp edi esi +
jl loc_101174F  +
push [ebp+bGroupDefaulted]  +
mov ecx ebx +
push [ebp+pSourceSid]  +
call sub_1011777  +
mov edi eax +
push [ebp+var_4]  +
mov esi ds:__imp_free +
call esi  +
push [ebp+pSourceSid]  +
call esi  +
pop ecx  +
pop ecx  +
test edi edi +
jl loc_101D393  +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
push [ebp+bGroupDefaulted]  +
mov edi ecx +
push 0  +
push dword ptr [edi]  +
call ds:SetSecurityDescriptorGroup  +
test eax eax +
jz loc_101D0D8  +
mov ebx ds:__imp_free +
lea esi [edi+8] +
push dword ptr [esi]  +
call ebx  +
and dword ptr [esi] 0 +
cmp [ebp+pSourceSid] 0 +
pop ecx  +
jz loc_101D0BC  +
push [ebp+pSourceSid]  +
push esi  +
call sub_10112D7  +
mov [ebp+pSourceSid] eax +
test eax eax +
jl loc_10117D6  +
push [ebp+bGroupDefaulted]  +
push dword ptr [esi]  +
push dword ptr [edi]  +
call ds:SetSecurityDescriptorGroup  +
test eax eax +
jz loc_101D0C3  +
mov eax [ebp+pSourceSid] +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
call sub_1001862  +
mov esi ecx +
mov [ebp-14h] esi +
call sub_100A0C7  +
and dword ptr [ebp-4] 0 +
push esi  +
mov dword ptr [esi] offset off_1002B8C +
mov byte ptr [ebp-4] 1 +
call sub_100D06E  +
cmp dword ptr [ebp+8] 0 +
jnz loc_101E594  +
push 5Ch  +
mov ecx esi +
call sub_101183E  +
cmp eax 0FFFFFFFFh +
jz loc_101182F  +
push eax  +
mov ecx esi +
call sub_100A108  +
mov eax esi +
call sub_10015C0  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx+0Ch] +
dec eax  +
js loc_101185F  +
mov ecx [ecx+4] +
lea ecx [ecx+eax*2] +
mov dx [ecx] +
cmp dx [ebp+arg_0] +
jz loc_101185F  +
dec eax  +
dec ecx  +
dec ecx  +
test eax eax +
jge loc_101184F  +
pop ebp  +
retn 4  +
***
push 6  +
jmp loc_100A92E  +
push 0  +
jmp loc_1011912  +
cmp dword ptr [ebp-228h] 1 +
jz loc_1011890  +
cmp dword ptr [ebp-228h] 7 +
jz loc_1011890  +
cmp dword ptr [ebp-228h] 2 +
jnz loc_100A92D  +
and dword ptr [ebp-4] 0 +
cmp dword ptr [ebp-228h] 2 +
jnz loc_101E01F  +
cmp eax ecx +
jz loc_101DF98  +
mov ecx [ebp-224h] +
mov esi 104h +
push esi  +
call sub_100FCFC  +
push esi  +
push eax  +
lea eax [ebp-21Ch] +
push eax  +
call ds:ExpandEnvironmentStringsW  +
lea ecx [eax-1] +
mov [ebp-220h] eax +
cmp ecx 102h +
ja loc_101DFF6  +
add eax eax +
mov [ebp-220h] eax +
mov eax [ebp-22Ch] +
test eax eax +
jnz loc_101DFC5  +
or dword ptr [ebp-4] 0FFFFFFFFh +
shr dword ptr [ebp-220h] 1 +
mov ecx [ebp-224h] +
jz loc_101186A  +
mov eax [ebp-220h] +
dec eax  +
push eax  +
call sub_100A108  +
xor eax eax +
inc eax  +
jmp loc_100A932  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push esi  +
push edi  +
push [ebp+arg_0]  +
mov edi ecx +
lea esi [edi+14h] +
mov ecx esi +
call sub_101195D  +
push [ebp+bOwnerDefaulted]  +
mov esi [esi] +
push esi  +
push edi  +
call ds:SetSecurityDescriptorOwner  +
test eax eax +
jz loc_101E412  +
pop edi  +
pop esi  +
leave   +
retn 8  +
***
call sub_10015E0  +
mov esi ecx +
push dword ptr [ebp+8]  +
call ds:IsValidSid  +
test eax eax +
jz loc_101E24F  +
mov eax [esi] +
xor edi edi +
cmp eax edi +
jnz loc_101E273  +
push dword ptr [ebp+8]  +
mov [esi] edi +
call ds:GetLengthSid  +
mov ebx eax +
mov [ebp-10h] edi +
push ebx  +
mov [ebp-4] edi +
call off_104B810  +
push dword ptr [ebp+8]  +
mov edi eax +
push edi  +
push ebx  +
mov [ebp-10h] edi +
call ds:CopySid  +
test eax eax +
jz loc_101E27F  +
mov [esi] edi +
call sub_10015C0  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 28h +
mov eax dword_104A044 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
mov eax ecx +
push dword ptr [eax+14h]  +
lea eax [ebp+ValueName] +
push offset a08x  +
push 10h  +
push eax  +
xor ebx ebx +
call sub_100A257  +
add esp 10h +
test eax eax +
jl loc_1011A31  +
lea eax [ebp+hKey] +
push eax  +
push 2  +
push ebx  +
push esi  +
push 80000002h  +
call ds:RegOpenKeyExW  +
test eax eax +
jnz loc_1011A31  +
lea eax [ebp+ValueName] +
push eax  +
push [ebp+hKey]  +
call ds:RegDeleteValueW  +
test eax eax +
jnz loc_1011A28  +
mov bl 1 +
push [ebp+hKey]  +
call ds:RegCloseKey  +
mov ecx [ebp+var_4] +
pop esi  +
mov al bl +
xor ecx ebp +
pop ebx  +
call sub_1002A8B  +
leave   +
retn 4  +
***
and dword ptr [esi] 0 +
jmp loc_100A1D0  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
mov eax [esi] +
mov ecx [esi+4] +
mov edx eax +
or edx ecx +
jz loc_101C106  +
push ecx  +
push eax  +
call ds:EventUnregister  +
and dword ptr [esi] 0 +
and dword ptr [esi+4] 0 +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call ds:??1CSearchServiceObj@@QAE@XZ  +
test [ebp+arg_0] 1 +
jz loc_1011AC9  +
push esi  +
call off_104B7F0  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
test esi esi +
jz loc_100BC0C  +
mov eax [esi] +
push 1  +
mov ecx esi +
call dword ptr [eax+20h]  +
jmp loc_100BC0C  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax+14h] +
test eax eax +
jz loc_1011B01  +
push eax  +
call ds:CoRevokeClassObject  +
pop ebp  +
retn 4  +
***
xor eax eax +
inc eax  +
pop esi  +
retn   +
***
push 0  +
mov ecx offset off_104A0B0 +
mov off_104A0B0 offset off_1002BE4 +
call sub_1002CC0  +
retn   +
***
mov ecx dword_104A26C +
add ecx 0FFFFFFF0h +
jmp sub_1002990  +
***
mov ecx dword_104A270 +
add ecx 0FFFFFFF0h +
jmp sub_1002990  +
***
mov dword_104A104 offset off_100296C +
retn   +
***
push offset unk_104A138  +
call ds:DeleteCriticalSection  +
retn   +
***
mov dword_104A0F4 offset off_1002B70 +
retn   +
***
mov dword_104A0E4 offset off_1002B70 +
retn   +
***
mov dword_104A0D4 offset off_1002B70 +
retn   +
***
mov dword_104A0C4 offset off_1002B70 +
retn   +
***
push offset unk_104A150  +
call ds:DeleteCriticalSection  +
retn   +
***
mov ecx offset dword_104A318 +
jmp loc_101221D  +
***
mov ecx dword_104A280 +
add ecx 0FFFFFFF0h +
jmp sub_1002990  +
***
mov ecx dword_104A284 +
add ecx 0FFFFFFF0h +
jmp sub_1002990  +
***
mov ecx dword_104A288 +
add ecx 0FFFFFFF0h +
jmp sub_1002990  +
***
mov ecx dword_104A28C +
add ecx 0FFFFFFF0h +
jmp sub_1002990  +
***
mov ecx dword_104A290 +
add ecx 0FFFFFFF0h +
jmp sub_1002990  +
***
mov ecx dword_104A294 +
add ecx 0FFFFFFF0h +
jmp sub_1002990  +
***
mov ecx dword_104A298 +
add ecx 0FFFFFFF0h +
jmp sub_1002990  +
***
mov ecx dword_104A29C +
add ecx 0FFFFFFF0h +
jmp sub_1002990  +
***
push offset CriticalSection  +
call ds:DeleteCriticalSection  +
retn   +
***
mov ecx dword_104A2A0 +
add ecx 0FFFFFFF0h +
jmp sub_1002990  +
***
mov ecx dword_104A2A4 +
add ecx 0FFFFFFF0h +
jmp sub_1002990  +
***
mov ecx dword_104A2A8 +
add ecx 0FFFFFFF0h +
jmp sub_1002990  +
***
mov ecx dword_104A2AC +
add ecx 0FFFFFFF0h +
jmp sub_1002990  +
***
mov ecx dword_104A2B0 +
add ecx 0FFFFFFF0h +
jmp sub_1002990  +
***
mov ecx dword_104A2B4 +
add ecx 0FFFFFFF0h +
jmp sub_1002990  +
***
mov ecx dword_104A2B8 +
add ecx 0FFFFFFF0h +
jmp sub_1002990  +
***
mov ecx dword_104A2BC +
add ecx 0FFFFFFF0h +
jmp sub_1002990  +
***
mov ecx dword_104A2C0 +
add ecx 0FFFFFFF0h +
jmp sub_1002990  +
***
mov ecx dword_104A2C4 +
add ecx 0FFFFFFF0h +
jmp sub_1002990  +
***
mov ecx dword_104A2CC +
add ecx 0FFFFFFF0h +
jmp sub_1002990  +
***
mov ecx dword_104A2C8 +
add ecx 0FFFFFFF0h +
jmp sub_1002990  +
***
test esi esi +
jz loc_1001990  +
push 1  +
mov ecx esi +
call sub_1011D9E  +
jmp loc_1001990  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1011DC4  +
test [ebp+arg_0] 1 +
jz loc_1011DB8  +
push esi  +
call off_104B7F0  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov eax ecx +
lea ecx [eax+4] +
mov dword ptr [ecx] 0C0000001h +
mov dword ptr [eax] offset off_10019CC +
jmp loc_1011DDC  +
lea eax [ecx+4] +
cmp byte ptr [eax+18h] 0 +
jz locret_1011DF0  +
push eax  +
mov byte ptr [eax+18h] 0 +
call ds:DeleteCriticalSection  +
retn   +
***
mov edi edi +
mov edi edi +
push esi  +
mov esi ecx +
push edi  +
lea edi [esi+4] +
cmp dword ptr [edi] 0 +
jz loc_1011E6D  +
cmp dword ptr [esi+0Ch] 0 +
jnz loc_101C36F  +
mov eax [esi+28h] +
test eax eax +
jnz loc_101C37E  +
add esi 10h +
push esi  +
call ds:DeleteCriticalSection  +
and dword ptr [edi] 0 +
pop edi  +
pop esi  +
retn   +
***
mov eax [ecx] +
test eax eax +
jz loc_1011E86  +
mov edx [eax] +
mov [ecx] edx +
and dword ptr [eax] 0 +
mov eax [eax+4] +
retn   +
xor eax eax +
retn   +
***
call sub_10015E0  +
mov esi ecx +
mov [ebp-10h] esi +
mov dword ptr [ebp-4] 1 +
call sub_100BF63  +
lea ecx [esi+0Ch] +
mov byte ptr [ebp-4] 0 +
call sub_1011ED1  +
mov esi [esi+8] +
or dword ptr [ebp-4] 0FFFFFFFFh +
test esi esi +
jnz loc_101B543  +
call sub_10015C0  +
retn   +
***
call sub_10015E0  +
mov esi ecx +
mov [ebp-10h] esi +
and dword ptr [ebp-4] 0 +
call sub_1011EF9  +
and dword ptr [esi] 0 +
call sub_10015C0  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_1011E75  +
test eax eax +
jz loc_1011F14  +
push 1  +
mov ecx eax +
call sub_10122A5  +
mov ecx esi +
jmp loc_1011EFE  +
pop esi  +
retn   +
***
mov edi edi +
mov edi edi +
push esi  +
mov esi ecx +
lea eax [esi+10h] +
push eax  +
mov dword ptr [esi] offset off_1002D28 +
call sub_1002BC9  +
mov dword ptr [esi] offset off_1002B70 +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_1011DF6  +
lea ecx [esi+30h] +
pop esi  +
nop   +
nop   +
nop   +
nop   +
nop   +
mov eax ecx +
mov ecx [eax] +
and dword ptr [eax] 0 +
test ecx ecx +
jz locret_1011FE4  +
push 1  +
call sub_1011FEA  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1011F1B  +
test [ebp+arg_0] 1 +
jz loc_1012003  +
push esi  +
call sub_101200F  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+lpMem]  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi] +
test eax eax +
jnz loc_101CB46  +
and dword ptr [esi+4] 0 +
and dword ptr [esi+8] 0 +
pop esi  +
retn   +
***
mov ecx offset unk_104A180 +
jmp sub_101207D  +
***
call sub_10015E0  +
mov esi ecx +
mov [ebp-10h] esi +
mov dword ptr [esi] offset off_10014D8 +
lea ecx [esi+0CCh] +
mov dword ptr [ebp-4] 1 +
call sub_1011E8E  +
mov ecx [esi+0B8h] +
mov byte ptr [ebp-4] 0 +
test ecx ecx +
jnz loc_101C4A1  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov ecx esi +
call sub_10120CE  +
call sub_10015C0  +
retn   +
***
call sub_10015E0  +
mov esi ecx +
mov [ebp-10h] esi +
mov dword ptr [esi] offset off_1001550 +
and dword ptr [ebp-4] 0 +
lea eax [esi+74h] +
push eax  +
call ds:DeleteCriticalSection  +
lea ecx [esi+48h] +
mov edi offset off_1002BE4 +
push 0  +
mov [ecx] edi +
call sub_1002CC0  +
lea ecx [esi+3Ch] +
push 0  +
mov [ecx] edi +
call sub_1002CC0  +
lea ecx [esi+34h] +
push 0  +
mov [ecx] edi +
call sub_1002CC0  +
mov ecx [esi+30h] +
test ecx ecx +
jnz loc_101C48A  +
mov ecx esi +
mov dword ptr [esi] offset off_1001524 +
call sub_1011E3D  +
call sub_10015C0  +
retn   +
***
mov ecx offset unk_104A35C +
jmp loc_101214B  +
mov edi edi +
push esi  +
push hModule  +
mov esi ecx +
push esi  +
call sub_101216A  +
lea ecx [esi+20h] +
pop esi  +
jmp sub_1012053  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
xor edi edi +
cmp esi edi +
jz loc_10121AB  +
mov eax [esi] +
cmp eax edi +
jz loc_10121A3  +
cmp eax 2Ch +
jnz loc_10121AB  +
cmp [esi+24h] edi +
jg sub_101CB55  +
lea ecx [esi+20h] +
call sub_1012053  +
lea eax [esi+4] +
push eax  +
call ds:DeleteCriticalSection  +
and dword ptr [esi] 0 +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
mov eax 80070057h +
jmp loc_10121A5  +
***
mov ecx offset dword_104A0B8 +
jmp sub_10121C3  +
***
cmp byte ptr [ecx+8] 0 +
mov dword ptr [ecx] offset off_1002958 +
jnz loc_101CBAD  +
retn   +
***
mov ecx offset unk_104A334 +
jmp loc_10121E5  +
mov edi edi +
push esi  +
mov esi ecx +
cmp dword ptr [esi] 0 +
jz loc_101220A  +
push ebx  +
mov ebx [esi+8] +
cmp ebx [esi+0Ch] +
jb loc_101CBF1  +
lea eax [esi+10h] +
push eax  +
call ds:DeleteCriticalSection  +
and dword ptr [esi] 0 +
pop ebx  +
pop esi  +
retn   +
***
mov ecx offset unk_104A2FC +
jmp loc_101221D  +
push 4  +
mov eax offset dword_1042414 +
call sub_10015E0  +
mov esi ecx +
mov [ebp-10h] esi +
and dword ptr [ebp-4] 0 +
call near ptr dword_1011B0C+3  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [esi+4] +
call sub_101224E  +
call sub_10015C0  +
retn   +
***
mov eax [ecx] +
test eax eax +
jnz loc_101E6D7  +
retn   +
***
mov ecx offset unk_104A265 +
jmp loc_101226A  +
mov edi edi +
push esi  +
push dword_104A094  +
mov esi ds:__imp_free +
call esi  +
push dword_104A098  +
call esi  +
push dword_104A0A0  +
call esi  +
push dword_104A09C  +
call esi  +
push dword_104A090  +
call esi  +
add esp 14h +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_10122CB  +
test [ebp+arg_0] 1 +
jz loc_10122BF  +
push esi  +
call off_104B7F0  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi] +
cmp eax 0FFFFFFFFh +
jz loc_10122E1  +
push eax  +
call ds:UnregisterDeviceNotification  +
or dword ptr [esi] 0FFFFFFFFh +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_101230E  +
test byte ptr [ebp+8] 1 +
jz loc_1012302  +
push esi  +
call off_104B7F0  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_10016B4 +
mov dword ptr [esi+4] 0C0000001h +
mov ecx dword_104A064 +
mov eax [ecx] +
call dword ptr [eax+8]  +
mov dword ptr [esi] offset off_1012334 +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi [ecx+2Ch] +
xor eax eax +
test esi esi +
jz loc_101237F  +
cmp [esi] eax +
jz loc_101237F  +
test eax eax +
jnz loc_1012389  +
push esi  +
call sub_1011AEB  +
add esi 24h +
cmp dword ptr [esi] 0 +
jnz loc_1012369  +
test eax eax +
jnz loc_1012389  +
push offset unk_104A334  +
call sub_1012390  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
mov edi [ebp+arg_0] +
test edi edi +
jz loc_101D048  +
push esi  +
mov esi [edi+8] +
xor eax eax +
cmp esi [edi+0Ch] +
jb loc_10123B2  +
pop esi  +
pop edi  +
pop ebp  +
retn 4  +
test eax eax +
jz loc_101D052  +
jmp loc_10123AC  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+8] +
push edi  +
lea eax [esi+10h] +
push eax  +
call ds:InterlockedDecrement  +
mov edi eax +
test edi edi +
jz loc_10124D7  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
test esi esi +
jz loc_10124CF  +
mov eax [esi] +
push 1  +
mov ecx esi +
call dword ptr [eax+30h]  +
jmp loc_10124CF  +
***
mov edi edi +
push esi  +
mov esi ecx +
push 0  +
lea ecx [esi+1Ch] +
call sub_1001669  +
push 0  +
lea ecx [esi+20h] +
call sub_1001669  +
push 0  +
lea ecx [esi+24h] +
call sub_1001669  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_101253B  +
test [ebp+arg_0] 1 +
jz loc_101252F  +
push esi  +
call off_104B7F0  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
call sub_10015E0  +
mov esi ecx +
mov [ebp-10h] esi +
mov dword ptr [esi] offset off_101245C +
mov dword ptr [esi+4] offset off_101244C +
mov dword ptr [esi+8] offset off_10123BC +
mov dword ptr [esi+0Ch] offset off_1012438 +
mov eax [esi+24h] +
mov dword ptr [ebp-4] 1 +
test eax eax +
jnz loc_101C1F1  +
mov eax [esi+20h] +
mov byte ptr [ebp-4] 0 +
test eax eax +
jnz loc_101C1FC  +
mov esi [esi+1Ch] +
or dword ptr [ebp-4] 0FFFFFFFFh +
test esi esi +
jnz loc_101C207  +
call sub_10015C0  +
retn   +
***
push 8  +
call off_104B7F4  +
mov esi eax +
test esi esi +
jz loc_101B303  +
xor eax eax +
mov edi esi +
stos   +
stos   +
xor edi edi +
cmp esi edi +
jz loc_1008A71  +
mov eax [ebp+10h] +
push edi  +
push edi  +
push esi  +
push offset loc_1012632  +
mov [esi] ebx +
mov eax [eax+4] +
push edi  +
push edi  +
mov [esi+4] eax +
call ds:CreateThread  +
cmp eax edi +
jz loc_101D5B2  +
push eax  +
call ds:CloseHandle  +
jmp loc_1008A71  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push edi  +
mov ebx offset unk_104A138 +
push ebx  +
call ds:EnterCriticalSection  +
mov edi [ebp+8] +
mov eax [edi] +
cmp eax 5 +
jz loc_101B34C  +
cmp eax 6 +
jnz loc_1012671  +
push esi  +
mov esi [edi+4] +
test esi esi +
jbe loc_101D245  +
mov ecx off_104B7E4 +
mov eax [ecx] +
push esi  +
call dword ptr [eax+40h]  +
pop esi  +
push edi  +
call off_104B7F0  +
push ebx  +
call ds:LeaveCriticalSection  +
pop edi  +
xor eax eax +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ecx+0B8h] +
mov eax 80004005h +
test ecx ecx +
jz loc_10126A9  +
push dword ptr [ebp+8]  +
mov eax [ecx] +
push ecx  +
call dword ptr [eax+14h]  +
pop ebp  +
retn 4  +
***
sub dword ptr [esp+4] 4 +
jmp loc_1002219  +
***
sub dword ptr [esp+4] 4 +
jmp loc_10025B9  +
***
mov byte ptr [ebp+0Fh] 1 +
jmp loc_1007F68  +
test al al +
jz loc_1007FD1  +
jmp loc_1007FF2  +
cmp dword_104A3AC edx +
jnz loc_10200DB  +
jmp loc_1020130  +
mov eax [ebp-14h] +
mov eax [eax-0Ch] +
push esi  +
dec eax  +
push eax  +
lea ecx [ebp-14h] +
call sub_1007DDC  +
jmp loc_1007F98  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_8]  +
mov eax [ebp+arg_0] +
mov eax [eax+18h] +
push [ebp+arg_4]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+0Ch]  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_C]  +
mov eax [ebp+arg_0] +
push [ebp+arg_8]  +
mov eax [eax+18h] +
push [ebp+arg_4]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+1Ch]  +
pop ebp  +
retn 10h  +
***
sub dword ptr [esp+4] 8 +
jmp loc_10124B5  +
***
sub dword ptr [esp+4] 8 +
jmp loc_1012B1D  +
***
sub dword ptr [esp+4] 8 +
jmp loc_1012BC5  +
***
push eax  +
call ds:__imp_free  +
pop ecx  +
jmp loc_1002BDE  +
***
mov edi edi +
push ebp  +
mov ebp esp +
lea eax [ecx+10h] +
push eax  +
push 7FFFh  +
push 41h  +
push dword ptr [ebp+8]  +
call sub_10127AB  +
pop ebp  +
retn 4  +
***
mov edi edi +
mov ds:0A9FC4801h eax +
call sub_10015E0  +
mov edi ecx +
and dword ptr [ebp-10h] 0 +
push dword ptr [ebp+8]  +
mov ecx [edi+3Ch] +
call sub_1017935  +
push dword ptr [ebp+8]  +
lea ecx [ebp+8] +
mov esi eax +
call sub_1003F3F  +
and dword ptr [ebp-4] 0 +
push offset aFile  +
lea ecx [ebp-18h] +
call sub_10035A2  +
push offset aFile_0  +
lea ecx [ebp-24h] +
mov byte ptr [ebp-4] 1 +
call sub_10035A2  +
mov eax [ebp-18h] +
push dword ptr [eax-0Ch]  +
lea eax [ebp-20h] +
push eax  +
lea ecx [ebp+8] +
mov byte ptr [ebp-4] 2 +
call sub_10079D6  +
push dword ptr [ebp-18h]  +
mov ecx eax +
call sub_100370F  +
mov ecx [ebp-20h] +
mov ebx eax +
neg ebx  +
sbb bl bl +
add ecx 0FFFFFFF0h +
inc bl  +
call sub_1002990  +
test bl bl +
jz loc_101293E  +
push dword ptr [ebp-24h]  +
lea ecx [ebp+8] +
push dword ptr [ebp-18h]  +
call sub_103A3B2  +
push 2Fh  +
push 5Ch  +
lea ecx [ebp+8] +
call sub_103A33B  +
and dword ptr [ebp-14h] 0 +
lea eax [ebp-14h] +
push eax  +
push offset stru_1012B08  +
push 15h  +
push 0  +
push offset stru_10019F0  +
mov byte ptr [ebp-4] 3 +
call ds:CoCreateInstance  +
mov ebx eax +
test ebx ebx +
jl loc_1012ACA  +
push offset aSystemindex  +
lea ecx [ebp-20h] +
call sub_100883D  +
push dword ptr [edi+14h]  +
lea ecx [ebp-1Ch] +
mov byte ptr [ebp-4] 4 +
call sub_100883D  +
push dword ptr [ebp-20h]  +
mov eax [ebp-14h] +
push dword ptr [ebp-1Ch]  +
mov ecx [eax] +
push eax  +
mov byte ptr [ebp-4] 5 +
call dword ptr [ecx+0Ch]  +
push dword ptr [ebp-1Ch]  +
mov edi ds:SysFreeString +
mov ebx eax +
call edi  +
push dword ptr [ebp-20h]  +
mov byte ptr [ebp-4] 3 +
call edi  +
test ebx ebx +
jl loc_1012ACA  +
xor eax eax +
lea edi [ebp-40h] +
stos   +
stos   +
stos   +
stos   +
stos   +
test esi esi +
jz loc_1012AAB  +
cmp dword ptr [esi+0Ch] 0 +
jnz loc_1012AAB  +
lea eax [ebp+8] +
push eax  +
mov dword ptr [ebp-40h] 10010001h +
call sub_1003AF2  +
mov esi offset dword_1022454 +
test eax eax +
jnz loc_1012A58  +
xor ebx ebx +
inc ebx  +
push ebx  +
lea eax [ebp-28h] +
push eax  +
lea ecx [ebp+8] +
call sub_1007C5B  +
push esi  +
push eax  +
mov byte ptr [ebp-4] 6 +
mov [ebp-10h] ebx +
call sub_1007C3C  +
test al al +
jz loc_1012A58  +
push ebx  +
lea eax [ebp-1Ch] +
push eax  +
lea ecx [ebp+8] +
call sub_1007C5B  +
push 7  +
pop edi  +
push offset dword_1003488  +
push eax  +
mov [ebp-4] edi +
mov dword ptr [ebp-10h] 3 +
call sub_100422D  +
test al al +
jnz loc_1012A54  +
push ebx  +
lea eax [ebp-20h] +
push eax  +
lea ecx [ebp+8] +
call sub_1007C5B  +
push offset dword_1012E6C  +
push eax  +
mov [ebp-10h] edi +
call sub_100422D  +
test al al +
jz loc_1012A58  +
mov bl 1 +
jmp loc_1012A5A  +
xor bl bl +
test byte ptr [ebp-10h] 4 +
jz loc_1012A6F  +
mov ecx [ebp-20h] +
and dword ptr [ebp-10h] 0FFFFFFFBh +
add ecx 0FFFFFFF0h +
call sub_1002990  +
test byte ptr [ebp-10h] 2 +
jz loc_1012A84  +
mov ecx [ebp-1Ch] +
and dword ptr [ebp-10h] 0FFFFFFFDh +
add ecx 0FFFFFFF0h +
call sub_1002990  +
test byte ptr [ebp-10h] 1 +
mov dword ptr [ebp-4] 3 +
jz loc_1012A9C  +
mov ecx [ebp-28h] +
add ecx 0FFFFFFF0h +
call sub_1002990  +
test bl bl +
jz loc_1012AAF  +
push esi  +
lea ecx [ebp+8] +
call sub_1012ECD  +
jmp loc_1012AAF  +
and dword ptr [ebp-40h] 0 +
mov eax [ebp+8] +
lea edx [ebp-2Ch] +
push edx  +
lea edx [ebp-40h] +
push edx  +
mov [ebp-3Ch] eax +
mov eax [ebp-14h] +
mov ecx [eax] +
push 1  +
push eax  +
call dword ptr [ecx+1Ch]  +
mov ebx eax +
mov eax [ebp-14h] +
mov byte ptr [ebp-4] 2 +
test eax eax +
jz loc_1012ADB  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov ecx [ebp-24h] +
add ecx 0FFFFFFF0h +
call sub_1002990  +
mov ecx [ebp-18h] +
add ecx 0FFFFFFF0h +
call sub_1002990  +
mov ecx [ebp+8] +
add ecx 0FFFFFFF0h +
call sub_1002990  +
mov eax ebx +
call sub_10015C0  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+10h]  +
mov ecx [ebp+8] +
push dword ptr [ebp+0Ch]  +
call sub_1012B39  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push offset off_1012B58  +
push ecx  +
call sub_10017D5  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
add eax 10h +
push eax  +
call ds:InterlockedIncrement  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
jnz loc_101CA1E  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push 0  +
call sub_1012C05  +
pop ebp  +
retn 0Ch  +
***
call sub_1001862  +
mov eax [ebp+10h] +
xor esi esi +
cmp eax esi +
jz loc_101C4D8  +
mov ebx 8007000Eh +
push 28h  +
mov [eax] esi +
mov [ebp-14h] ebx +
mov [ebp-18h] esi +
mov [ebp-4] esi +
call off_104B7F4  +
cmp eax esi +
jz loc_1012C46  +
push dword ptr [ebp+8]  +
mov ecx eax +
call sub_1012D1D  +
mov esi eax +
or dword ptr [ebp-4] 0FFFFFFFFh +
test esi esi +
jz loc_1012C83  +
lea edi [esi+10h] +
push edi  +
call ds:InterlockedIncrement  +
mov ecx esi +
call sub_1012C9D  +
mov ebx eax +
test ebx ebx +
jl loc_1012C67  +
xor ebx ebx +
push edi  +
call ds:InterlockedDecrement  +
test ebx ebx +
jnz loc_1012C8D  +
push dword ptr [ebp+10h]  +
mov eax [esi] +
push dword ptr [ebp+0Ch]  +
push esi  +
call dword ptr [eax]  +
mov ebx eax +
test ebx ebx +
jnz loc_1012C8D  +
mov eax ebx +
call sub_10015C0  +
retn 0Ch  +
mov eax [esi] +
push 1  +
mov ecx esi +
call dword ptr [eax+30h]  +
jmp loc_1012C83  +
***
mov edi edi +
push esi  +
push edi  +
mov esi ecx +
lea edi [esi+1Ch] +
push edi  +
push offset stru_1012BB0  +
push 1  +
push 0  +
push offset stru_1012CE8  +
call ds:CoCreateInstance  +
test eax eax +
jl loc_1012CE3  +
mov eax [edi] +
mov ecx [eax] +
lea edx [esi+20h] +
push edx  +
push offset stru_1012D08  +
push eax  +
call dword ptr [ecx]  +
test eax eax +
jl loc_1012CE3  +
mov edi [edi] +
mov eax [edi] +
add esi 24h +
push esi  +
push offset dword_1012CF8  +
push edi  +
call dword ptr [eax]  +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_1012D58  +
mov dword ptr [esi] offset off_1012404 +
mov dword ptr [esi+4] offset off_10124A0 +
mov dword ptr [esi+8] offset off_10123E0 +
mov dword ptr [esi+0Ch] offset off_101248C +
mov ecx dword_104A064 +
mov eax [ecx] +
call dword ptr [eax+4]  +
mov eax esi +
pop esi  +
retn 4  +
***
mov eax ecx +
xor ecx ecx +
mov [eax+10h] ecx +
mov dword ptr [eax] offset off_101245C +
mov dword ptr [eax+4] offset off_101244C +
mov dword ptr [eax+8] offset off_10123BC +
mov dword ptr [eax+0Ch] offset off_1012438 +
mov [eax+1Ch] ecx +
mov [eax+20h] ecx +
mov [eax+24h] ecx +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax+1Ch] +
push esi  +
mov ecx [eax] +
push edi  +
sub esp 10h +
mov edi esp +
push [ebp+arg_8]  +
lea esi [ebp+arg_C] +
push [ebp+arg_4]  +
movs   +
movs   +
movs   +
push eax  +
movs   +
call dword ptr [ecx+1Ch]  +
pop edi  +
pop esi  +
pop ebp  +
retn 1Ch  +
***
call sub_10015E0  +
mov edi [ebp+8] +
xor esi esi +
cmp [edi+4] esi +
jbe loc_1012E2A  +
push esi  +
mov ecx edi +
call sub_10036F0  +
push dword ptr [eax]  +
lea ecx [ebp-10h] +
call sub_10035A2  +
mov ecx [ebp+0Ch] +
and dword ptr [ebp-4] 0 +
push esi  +
call sub_10036F0  +
push dword ptr [eax]  +
lea ecx [ebp+8] +
call sub_10035A2  +
push dword ptr [ebp+8]  +
push dword ptr [ebp-10h]  +
call ds:__imp__wcsicmp  +
pop ecx  +
pop ecx  +
mov ecx [ebp+8] +
add ecx 0FFFFFFF0h +
test eax eax +
jnz loc_1012E35  +
call sub_1002990  +
mov ecx [ebp-10h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
add ecx 0FFFFFFF0h +
call sub_1002990  +
inc esi  +
cmp esi [edi+4] +
jb loc_1012DCF  +
xor eax eax +
inc eax  +
call sub_10015C0  +
retn 8  +
call sub_1002990  +
mov ecx [ebp-10h] +
add ecx 0FFFFFFF0h +
call sub_1002990  +
xor eax eax +
jmp loc_1012E2D  +
***
lea eax [ebp+8] +
push eax  +
call sub_1003AF2  +
test eax eax +
lea eax [ebp-5Ch] +
push eax  +
lea eax [ebp-7Ch] +
push eax  +
jnz loc_1014C96  +
call sub_1012DB9  +
jmp loc_1008352  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
mov ebx ecx +
mov eax [ebx] +
push edi  +
mov edi [eax-0Ch] +
sub esi eax +
mov eax [ebp+arg_4] +
add eax edi +
push eax  +
sar esi 1 +
mov [ebp+var_4] eax +
call sub_1003122  +
cmp esi edi +
lea esi [eax+esi*2] +
jbe loc_1012EA4  +
mov esi [ebp+arg_0] +
push [ebp+arg_4]  +
lea eax [eax+edi*2] +
push esi  +
push [ebp+arg_4]  +
push eax  +
call sub_1003200  +
add esp 10h +
push [ebp+var_4]  +
mov ecx ebx +
call sub_10032EF  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_1003025  +
pop ecx  +
push eax  +
push [ebp+arg_0]  +
mov ecx esi +
call sub_1012E75  +
pop esi  +
pop ebp  +
retn 4  +
***
push edi  +
call sub_1003AF2  +
mov byte ptr [ebp-21h] 1 +
test eax eax +
jz loc_1007BFB  +
jmp loc_1007BF7  +
push 0  +
push 5Ch  +
mov ecx edi +
mov dword ptr [ebp-20h] 2Fh +
call sub_1012F38  +
cmp eax 0FFFFFFFFh +
jz loc_1012F23  +
push 5Ch  +
pop eax  +
mov [ebp-20h] ax +
lea eax [ebp-20h] +
push eax  +
mov ecx edi +
call sub_1012ECD  +
jmp loc_1007C2C  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov ecx [ebp+arg_4] +
test ecx ecx +
jl loc_1012F6A  +
mov eax [esi] +
cmp ecx [eax-0Ch] +
jge loc_1012F6A  +
push dword ptr [ebp+arg_0]  +
lea eax [eax+ecx*2] +
push eax  +
call ds:wcschr  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1012F6A  +
sub eax [esi] +
sar eax 1 +
pop esi  +
pop ebp  +
retn 8  +
or eax 0FFFFFFFFh +
jmp loc_1012F65  +
***
cmp ecx 2 +
jl loc_101FB96  +
movzx edx word ptr [eax+4] +
cmp dx 5Ch +
jnz loc_1007BA9  +
cmp ecx esi +
jl loc_101FB96  +
movzx edx word ptr [eax+6] +
cmp dx 5Ch +
jz loc_1007BA9  +
test ecx ecx +
jl loc_101FB96  +
movzx eax word ptr [eax] +
push eax  +
call ds:towupper  +
movzx eax ax +
add eax 0FFFFFFBFh +
pop ecx  +
cmp ax 19h +
ja loc_1007BB1  +
push edi  +
push offset dword_104A2C8  +
lea eax [ebp-18h] +
push eax  +
call sub_10042CD  +
push eax  +
mov ecx edi +
mov byte ptr [ebp-4] 1 +
call sub_1003FA0  +
mov ecx [ebp-18h] +
add ecx 0FFFFFFF0h +
mov byte ptr [ebp-4] 0 +
call sub_1002990  +
jmp loc_1007BB1  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
cmp [ebp+8] eax +
jz loc_101CBC4  +
cmp [ebp+0Ch] eax +
jz loc_101CBD0  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push eax  +
push dword ptr [ecx+4]  +
call ds:HeapReAlloc  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+0Ch] +
push esi  +
push edi  +
push 7FFFFFFFh  +
push 8  +
inc eax  +
push eax  +
mov esi ecx +
call sub_10030F8  +
push dword ptr [ebp+10h]  +
mov edi eax +
push edi  +
lea eax [ebp+0Ch] +
push eax  +
call sub_1003089  +
test eax eax +
jl loc_1013080  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp+0Ch] +
push 10h  +
push eax  +
call sub_100338B  +
test eax eax +
jl loc_1013080  +
push dword ptr [ebp+0Ch]  +
mov ecx [esi+4] +
push dword ptr [ebp+8]  +
mov eax [ecx] +
call dword ptr [eax+8]  +
test eax eax +
jz loc_1013080  +
dec edi  +
mov [eax+8] edi +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
xor eax eax +
jmp loc_101307A  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov edi ecx +
mov eax [edi] +
mov esi [eax-0Ch] +
lea ebx [esi+1] +
push ebx  +
call sub_1003122  +
mov cx [ebp+arg_0] +
mov [eax+esi*2] cx +
push ebx  +
mov ecx edi +
call sub_10032EF  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov eax [edi+18h] +
cmp eax edx +
jnz loc_10153C8  +
cmp [esi+18h] edx +
jnz loc_10153FE  +
push esi  +
push edi  +
call sub_1012DB9  +
jmp loc_1007D6C  +
***
mov eax [eax+8] +
cmp eax esi +
jge loc_100317E  +
mov edx eax +
mov eax 400h +
cmp edx eax +
jg loc_101C321  +
add edx edx +
cmp edx esi +
jl loc_10155A4  +
push edx  +
call sub_101310C  +
jmp loc_100317E  +
***
mov edi edi +
mov edi edi +
push esi  +
mov esi ecx +
lea ecx [esi+1BAh] +
movzx eax word ptr [ecx] +
test al 8 +
jz loc_1013181  +
and eax 0FFF7h +
mov [ecx] ax +
mov ecx esi +
call sub_1003904  +
mov ax [esi+1B2h] +
sub ax [esi+1AEh] +
mov [esi+1B0h] ax +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_101314B  +
cmp word ptr [esi+1B0h] 0 +
jz loc_101DC83  +
movzx eax word ptr [esi+1AEh] +
push eax  +
push [ebp+arg_0]  +
lea ecx [esi+10h] +
call sub_10131C3  +
mov eax [ebp+arg_0] +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx+0Ch] +
sub eax [ebp+arg_4] +
push eax  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_10034B1  +
mov eax [ebp+arg_0] +
pop ebp  +
retn 8  +
***
mov [esi+3Ch] eax +
jmp loc_100611B  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1003CEC  +
test byte ptr [ebp+8] 1 +
jz loc_1013208  +
push esi  +
call off_104B7F0  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ecx] +
mov eax [ecx+4] +
lea eax [eax+edx-1] +
cmp eax edx +
jb loc_1013241  +
push esi  +
test eax eax +
jl loc_1013240  +
mov esi [ecx+8] +
mov esi [esi+4] +
mov si [esi+eax*2] +
cmp si [ebp+arg_0] +
jz loc_1013240  +
dec eax  +
cmp eax edx +
jnb loc_1013227  +
pop esi  +
sub eax edx +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_101314B  +
xor eax eax +
cmp [esi+1A4h] ax +
jnz loc_101326B  +
cmp [esi+1A8h] ax +
jnz loc_101326B  +
inc eax  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_101314B  +
movzx eax word ptr [esi+1B0h] +
test ax ax +
jz loc_101DCD4  +
movzx eax ax +
push eax  +
movzx eax word ptr [esi+1AEh] +
push eax  +
push [ebp+arg_0]  +
lea ecx [esi+10h] +
call sub_10034B1  +
mov eax [ebp+arg_0] +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
lea eax [esi+10h] +
push eax  +
push 0C1h  +
call sub_100850F  +
mov dword ptr [esi] offset off_1003E00 +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
cmp [ecx] di +
jnz loc_10153B7  +
mov ecx [ebp-14h] +
add ecx 0FFFFFFF0h +
call sub_1002990  +
xor eax eax +
call sub_10015C0  +
retn 8  +
***
or [ebp+var_4] 0FFFFFFFFh +
mov eax [ebp+var_18] +
mov [ebp+var_50] eax +
push [ebp+var_50]  +
call sub_10085E3  +
pop ecx  +
mov ecx [ebp+var_C] +
mov large fs:0 ecx +
pop ecx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push 1  +
lea eax [ebp+DestStr] +
push eax  +
push 1  +
lea eax [ebp+SrcStr] +
push eax  +
push 200h  +
push 0  +
call ds:LCMapStringW  +
test eax eax +
mov ax [ebp+DestStr] +
jz loc_1021EC9  +
leave   +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
push dword ptr [esi+2Ch]  +
call off_104B7F0  +
xor eax eax +
mov [esi] eax +
mov [esi+34h] eax +
mov [esi+2Ch] eax +
mov [esi+30h] eax +
pop esi  +
retn   +
***
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi ecx +
xor ecx ecx +
inc ecx  +
lea eax [esi+14h] +
mov ebx [ebp+arg_0] +
cmp [eax-4] ebx +
jz loc_1015511  +
dec ecx  +
sub eax 8 +
test ecx ecx +
jge loc_1013392  +
mov eax [esi+20h] +
cmp eax 2 +
push edi  +
jg loc_1022117  +
jge loc_1015526  +
mov ecx [ebp+arg_4] +
mov [esi+eax*8+8] ebx +
mov [esi+eax*8+0Ch] ecx +
inc dword ptr [esi+20h]  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push esi  +
mov esi ecx +
mov cl [ebp+arg_0] +
and dword ptr [esi+0Ch] 0 +
push 1Fh  +
pop eax  +
push 2  +
mov [esi+10h] cl +
xor ecx ecx +
pop edx  +
mov [esi+8] eax +
mul  edx +
seto cl  +
mov dword ptr [esi+4] 1 +
neg ecx  +
or eax ecx +
push eax  +
call off_104B7F4  +
mov [esi] eax +
test eax eax +
jz loc_1022196  +
mov ecx 0FFFFh +
mov [eax] cx +
mov eax esi +
pop esi  +
leave   +
retn 4  +
***
xor eax eax +
inc eax  +
jmp loc_1013467  +
push 0Ah  +
pop eax  +
jmp loc_1013445  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ecx] +
test esi esi +
jz loc_101346D  +
cmp esi 0Ah +
jnb loc_1013428  +
mov eax esi +
dec eax  +
push edi  +
mov edi [ebp+arg_0] +
js loc_101345C  +
lea edx [ecx+eax*4+4] +
cmp [edx] edi +
jz loc_1013423  +
dec eax  +
sub edx 4 +
test eax eax +
jge loc_1013450  +
cmp esi 0Ah +
ja loc_102209A  +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
xor eax eax +
jmp loc_1013468  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
mov [ebp-0Ch] ecx +
mov dword ptr [ebp-8] 2 +
mov eax [ebp-0Ch] +
add eax 8 +
mov [ebp-4] eax +
mov eax [ebp-8] +
dec eax  +
mov [ebp-8] eax +
js loc_10134AE  +
mov eax [ebp-4] +
mov dword ptr [eax] 4 +
mov eax [ebp-4] +
add eax 8 +
mov [ebp-4] eax +
jmp loc_1013491  +
***
mov eax [ebp-0Ch] +
and dword ptr [eax+18h] 0 +
mov eax [ebp-0Ch] +
and dword ptr [eax+1Ch] 0 +
mov eax [ebp-0Ch] +
and dword ptr [eax+20h] 0 +
mov eax [ebp-0Ch] +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx ecx +
mov eax [ebx+20h] +
cmp eax 2 +
push esi  +
push edi  +
jg loc_10154D4  +
lea edi [eax-1] +
test edi edi +
jl loc_1013502  +
lea esi [ebx+edi*8+8] +
mov eax [esi] +
cmp eax [ebp+arg_4] +
jz loc_101351B  +
cmp eax 1 +
jz loc_1013515  +
dec edi  +
sub esi 8 +
test edi edi +
jge loc_10134EE  +
mov esi [ebx+20h] +
sub esi 3 +
jns loc_10154DC  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
cmp [ebp+arg_4] 5 +
jz loc_10134FA  +
push dword ptr [esi+4]  +
mov ecx [ebp+arg_0] +
call sub_101352D  +
jmp loc_10134FA  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
push ebx  +
mov esi ecx +
call sub_1013432  +
test eax eax +
jnz loc_1013554  +
mov eax [esi] +
cmp eax 0Ah +
jnb loc_10220C1  +
mov [esi+eax*4+4] ebx +
inc dword ptr [esi]  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi ecx +
cmp byte ptr [esi+10h] 0 +
jnz loc_1015509  +
push dword ptr [ebp+SrcStr]  +
call sub_101331E  +
movzx ebx ax +
cmp bx 2Eh +
jz loc_1015501  +
mov edx [esi+4] +
mov eax edx +
push edi  +
xor edi edi +
shr eax 1 +
mov dword ptr [ebp+SrcStr] edx +
test edx edx +
jbe loc_10135B3  +
mov ecx [esi] +
movzx ecx word ptr [ecx+eax*2] +
cmp cx bx +
jz loc_10135B3  +
jb loc_10135C9  +
mov edx eax +
mov eax edx +
sub eax edi +
shr eax 1 +
add eax edi +
cmp edx edi +
ja loc_1013598  +
mov ecx [esi] +
pop edi  +
cmp [ecx+eax*2] bx +
jb loc_1022183  +
add eax 7 +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
lea edi [eax+1] +
jmp loc_10135A7  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0FFFFFFFFh  +
push offset dword_1045544  +
mov eax large fs:0 +
push eax  +
sub esp 48h +
mov eax dword_104A044 +
xor eax ebp +
push eax  +
lea eax [ebp+var_C] +
mov large fs:0 eax +
mov [ebp+var_54] ecx +
and [ebp+var_18] 0 +
lea ecx [ebp+var_44] +
call sub_1013352  +
and [ebp+var_4] 0 +
push [ebp+arg_0]  +
mov ecx [ebp+arg_4] +
call sub_101352D  +
mov [ebp+var_45] 1 +
movzx eax [ebp+var_45] +
test eax eax +
jz loc_10132F7  +
mov [ebp+var_45] 0 +
mov eax [ebp+arg_4] +
mov eax [eax] +
mov [ebp+var_4C] eax +
cmp [ebp+var_4C] 0 +
jbe loc_101361C  +
push [ebp+var_4C]  +
mov ecx [ebp+arg_4] +
call sub_101369A  +
push eax  +
lea ecx [ebp+var_44] +
call sub_1013432  +
test eax eax +
jz loc_101365B  +
mov eax [ebp+var_4C] +
dec eax  +
mov [ebp+var_4C] eax +
jmp loc_1013634  +
push [ebp+var_4C]  +
mov ecx [ebp+arg_4] +
call sub_101369A  +
push eax  +
lea ecx [ebp+var_44] +
call sub_101352D  +
push 5  +
push [ebp+arg_4]  +
push [ebp+var_4C]  +
mov ecx [ebp+arg_4] +
call sub_101369A  +
push eax  +
mov ecx [ebp+var_54] +
call sub_1013B18  +
mov ecx eax +
call sub_10134CD  +
mov [ebp+var_45] 1 +
jmp loc_1013652  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
cmp eax 0Ah +
ja loc_10136AE  +
mov eax [ecx+eax*4] +
pop ebp  +
retn 4  +
mov ecx [ecx+2Ch] +
mov eax [ecx+eax*4-2Ch] +
jmp loc_10136AA  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
mov [ebp+var_14] ecx +
mov [ebp+var_1] 0 +
mov eax [ebp+arg_0] +
mov eax [eax] +
mov [ebp+var_8] eax +
cmp [ebp+var_8] 0 +
jbe loc_1013710  +
movzx eax [ebp+var_1] +
test eax eax +
jnz loc_1013710  +
push [ebp+var_8]  +
mov ecx [ebp+arg_0] +
call sub_101369A  +
push eax  +
mov ecx [ebp+var_14] +
call sub_1013B18  +
mov [ebp+var_C] eax +
mov eax [ebp+var_C] +
mov eax [eax+4] +
mov [ebp+var_10] eax +
mov al byte ptr [ebp+var_10] +
mov [ebp+var_1] al +
mov eax [ebp+var_8] +
dec eax  +
mov [ebp+var_8] eax +
jmp loc_10136D3  +
mov al [ebp+var_1] +
leave   +
retn 4  +
***
call sub_10015E0  +
xor edi edi +
cmp [ebp+0Ch] edi +
jz loc_10213F4  +
add ecx 14h +
push ecx  +
lea ecx [ebp-14h] +
call sub_1003F3F  +
lea ecx [ebp-14h] +
mov [ebp-4] edi +
call sub_100372B  +
mov ebx [ebp+8] +
mov esi eax +
mov [ebp-10h] edi +
mov ecx esi +
cmp [esi] di +
jz loc_10132D9  +
mov eax [ebp+0Ch] +
cmp [ebp-10h] eax +
jnb loc_10132D9  +
movzx eax word ptr [esi] +
cmp ax 2Fh +
jz loc_101377C  +
cmp ax 5Ch +
jz loc_101377C  +
inc esi  +
inc esi  +
jmp loc_1013754  +
movzx edi ax +
xor eax eax +
mov [esi] ax +
push ecx  +
inc esi  +
mov ecx ebx +
inc esi  +
call sub_10149CF  +
push edi  +
mov ecx ebx +
call sub_10137C0  +
inc dword ptr [ebp-10h]  +
movzx eax word ptr [esi] +
cmp ax 2Fh +
jz loc_10137AC  +
cmp ax 5Ch +
jz loc_10137AC  +
xor edi edi +
jmp loc_1013752  +
movzx eax ax +
push eax  +
mov ecx ebx +
call sub_10137C0  +
inc esi  +
inc esi  +
jmp loc_1013799  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_10137DC  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_1013089  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov eax [ebp+var_84] +
mov eax [eax+4] +
mov [ebp+var_C] eax +
mov eax [ebp+var_84] +
push dword ptr [eax+4]  +
push 1  +
push [ebp+var_14]  +
mov ecx [ebp+var_84] +
call sub_1013B18  +
mov ecx eax +
call sub_1013383  +
push [ebp+var_14]  +
mov ecx [ebp+var_84] +
call sub_1013B18  +
mov [ebp+var_6C] eax +
mov eax [ebp+var_6C] +
mov eax [eax] +
mov [ebp+var_10] eax +
mov eax [ebp+arg_0] +
mov [ebp+var_18] eax +
mov eax [ebp+var_84] +
mov eax [eax+4] +
inc eax  +
mov ecx [ebp+var_84] +
mov [ecx+4] eax +
mov eax [ebp+var_C] +
mov [ebp+var_14] eax +
push [ebp+var_14]  +
mov ecx [ebp+var_84] +
call sub_1013B18  +
mov [ebp+var_70] eax +
mov eax [ebp+var_70] +
mov eax [eax] +
mov [ebp+var_74] eax +
push [ebp+var_74]  +
push 5  +
push [ebp+var_10]  +
mov ecx [ebp+var_84] +
call sub_1013B18  +
mov ecx eax +
call sub_1013383  +
push [ebp+var_10]  +
push 5  +
push [ebp+var_14]  +
mov ecx [ebp+var_84] +
call sub_1013B18  +
mov ecx eax +
call sub_1013383  +
jmp loc_1013A52  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 88h +
push esi  +
push edi  +
mov [ebp+var_84] ecx +
mov [ebp+var_6] 0 +
mov eax [ebp+arg_4] +
cmp dword ptr [eax] 0 +
setz al  +
mov [ebp+var_5] al +
mov eax [ebp+arg_8] +
and dword ptr [eax] 0 +
movzx eax [ebp+var_5] +
test eax eax +
jz loc_1021B58  +
mov eax [ebp+var_84] +
mov eax [eax+4] +
mov [ebp+var_14] eax +
mov eax [ebp+arg_4] +
mov ecx [ebp+var_84] +
mov ecx [ecx+4] +
mov [eax] ecx +
mov eax [ebp+var_84] +
mov eax [eax+4] +
inc eax  +
mov ecx [ebp+var_84] +
mov [ecx+4] eax +
and [ebp+var_10] 0 +
mov eax [ebp+arg_0] +
movzx eax word ptr [eax] +
cmp eax 2Ah +
jz loc_101549C  +
mov eax [ebp+var_84] +
mov eax [eax+4] +
mov [ebp+var_C] eax +
mov eax [ebp+var_84] +
push dword ptr [eax+4]  +
push 2  +
push [ebp+var_14]  +
mov ecx [ebp+var_84] +
call sub_1013B18  +
mov ecx eax +
call sub_1013383  +
mov eax [ebp+var_84] +
mov eax [eax+4] +
inc eax  +
mov ecx [ebp+var_84] +
mov [ecx+4] eax +
mov eax [ebp+var_C] +
mov [ebp+var_14] eax +
push [ebp+var_14]  +
mov ecx [ebp+var_84] +
call sub_1013B18  +
mov [ebp+var_64] eax +
mov eax [ebp+var_64] +
mov eax [eax] +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
mov [ebp+var_18] eax +
mov eax [ebp+arg_0] +
movzx eax word ptr [eax] +
test eax eax +
jz loc_1013A5F  +
mov eax [ebp+arg_0] +
movzx eax word ptr [eax] +
movzx ecx [ebp+arg_10] +
cmp eax ecx +
jz loc_1013A5F  +
mov eax [ebp+arg_0] +
movzx eax word ptr [eax] +
mov [ebp+var_88] eax +
cmp [ebp+var_88] 2Ah +
jz loc_10137F3  +
cmp [ebp+var_88] 3Fh +
jz loc_1021B6D  +
cmp [ebp+var_88] 7Ch +
jz loc_1021BD6  +
mov eax [ebp+var_84] +
mov eax [eax+4] +
mov [ebp+var_C] eax +
mov eax [ebp+var_84] +
push dword ptr [eax+4]  +
mov eax [ebp+arg_0] +
movzx eax word ptr [eax] +
push eax  +
mov ecx [ebp+var_84] +
add ecx 8 +
call sub_101355F  +
push eax  +
push [ebp+var_14]  +
mov ecx [ebp+var_84] +
call sub_1013B18  +
mov ecx eax +
call sub_1013383  +
push [ebp+var_14]  +
mov ecx [ebp+var_84] +
call sub_1013B18  +
mov [ebp+var_78] eax +
mov eax [ebp+var_78] +
mov eax [eax] +
mov [ebp+var_10] eax +
mov eax [ebp+arg_0] +
mov [ebp+var_18] eax +
mov eax [ebp+var_84] +
mov eax [eax+4] +
inc eax  +
mov ecx [ebp+var_84] +
mov [ecx+4] eax +
mov eax [ebp+var_C] +
mov [ebp+var_14] eax +
mov eax [ebp+arg_0] +
inc eax  +
inc eax  +
mov [ebp+arg_0] eax +
jmp loc_1013987  +
movzx eax [ebp+arg_10] +
test eax eax +
jnz loc_1013AC4  +
mov eax [ebp+arg_0] +
movzx eax word ptr [eax-2] +
cmp eax 2Ah +
jz loc_1013AC4  +
mov eax [ebp+var_84] +
mov eax [eax+4] +
mov [ebp+var_C] eax +
mov eax [ebp+var_84] +
push dword ptr [eax+4]  +
push 3  +
push [ebp+var_14]  +
mov ecx [ebp+var_84] +
call sub_1013B18  +
mov ecx eax +
call sub_1013383  +
and [ebp+var_10] 0 +
mov eax off_104BAAC +
mov [ebp+var_18] eax +
mov eax [ebp+var_84] +
mov eax [eax+4] +
inc eax  +
mov ecx [ebp+var_84] +
mov [ecx+4] eax +
mov eax [ebp+var_C] +
mov [ebp+var_14] eax +
mov eax [ebp+arg_8] +
cmp dword ptr [eax] 0 +
jnz loc_1021BFF  +
push [ebp+var_14]  +
mov ecx [ebp+var_84] +
call sub_1013B18  +
mov [ebp+var_7C] eax +
mov eax [ebp+var_7C] +
mov eax [eax] +
mov [ebp+var_80] eax +
mov eax [ebp+arg_8] +
mov ecx [ebp+var_80] +
mov [eax] ecx +
cmp [ebp+arg_C] 0 +
jnz loc_1021C20  +
mov eax [ebp+arg_0] +
movzx eax word ptr [eax] +
movzx ecx [ebp+arg_10] +
cmp eax ecx +
jnz loc_1021C2F  +
pop edi  +
pop esi  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0FFFFFFFFh  +
push offset dword_10454EC  +
mov eax large fs:0 +
push eax  +
sub esp 34h +
mov eax dword_104A044 +
xor eax ebp +
push eax  +
lea eax [ebp+var_C] +
mov large fs:0 eax +
mov [ebp+var_38] ecx +
mov eax [ebp+var_38] +
mov ecx [ebp+arg_0] +
cmp ecx [eax+1Ch] +
ja loc_1021A0C  +
mov eax [ebp+arg_0] +
dec eax  +
imul eax eax +
mov ecx [ebp+var_38] +
add eax [ecx+20h] +
mov ecx [ebp+var_C] +
mov large fs:0 ecx +
pop ecx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0FFFFFFFFh  +
push offset word_104559E  +
mov eax large fs:0 +
push eax  +
sub esp 74h +
push esi  +
push edi  +
mov eax dword_104A044 +
xor eax ebp +
push eax  +
lea eax [ebp+var_C] +
mov large fs:0 eax +
mov [ebp+var_6C] ecx +
mov eax [ebp+var_6C] +
and dword ptr [eax] 0 +
mov eax [ebp+var_6C] +
mov dword ptr [eax+4] 1 +
push [ebp+arg_4]  +
mov ecx [ebp+var_6C] +
add ecx 8 +
call sub_10133D3  +
and [ebp+var_4] 0 +
mov eax [ebp+var_6C] +
and dword ptr [eax+20h] 0 +
cmp [ebp+arg_0] 0 +
jz loc_1021E05  +
mov eax [ebp+arg_0] +
mov [ebp+var_70] eax +
mov eax [ebp+var_70] +
add eax 2 +
mov [ebp+var_74] eax +
mov eax [ebp+var_70] +
mov ax [eax] +
mov [ebp+var_76] ax +
add [ebp+var_70] 2 +
cmp [ebp+var_76] 0 +
jnz loc_1013BE0  +
mov eax [ebp+var_70] +
sub eax [ebp+var_74] +
sar eax 1 +
mov [ebp+var_7C] eax +
mov eax [ebp+var_7C] +
lea eax [eax+eax+4] +
mov ecx [ebp+var_6C] +
mov [ecx+1Ch] eax +
mov eax [ebp+var_6C] +
mov eax [eax+1Ch] +
mov [ebp+var_38] eax +
xor ecx ecx +
mov eax [ebp+var_38] +
push 24h  +
pop edx  +
mul  edx +
seto cl  +
neg ecx  +
or ecx eax +
xor eax eax +
add ecx 4 +
setb al  +
neg eax  +
or eax ecx +
push eax  +
call sub_10085CE  +
pop ecx  +
mov [ebp+var_40] eax +
mov byte ptr [ebp+var_4] 1 +
cmp [ebp+var_40] 0 +
jz loc_1013D20  +
mov eax [ebp+var_40] +
mov ecx [ebp+var_38] +
mov [eax] ecx +
push offset loc_10145FC  +
push offset loc_1013476  +
push [ebp+var_38]  +
push 24h  +
mov eax [ebp+var_40] +
add eax 4 +
push eax  +
call sub_1002AF6  +
mov eax [ebp+var_40] +
add eax 4 +
mov [ebp+var_80] eax +
mov eax [ebp+var_80] +
mov [ebp+var_3C] eax +
mov byte ptr [ebp+var_4] 0 +
mov eax [ebp+var_6C] +
mov ecx [ebp+var_3C] +
mov [eax+20h] ecx +
mov eax [ebp+var_6C] +
cmp dword ptr [eax+20h] 0 +
jz loc_1021E2E  +
mov [ebp+var_14] 1 +
mov eax [ebp+var_6C] +
mov ecx [ebp+var_14] +
cmp ecx [eax+1Ch] +
ja loc_1013CCF  +
push [ebp+var_14]  +
mov ecx [ebp+var_6C] +
call sub_1013B18  +
mov [ebp+var_64] eax +
mov eax [ebp+var_64] +
mov ecx [ebp+var_14] +
mov [eax] ecx +
mov eax [ebp+var_64] +
and dword ptr [eax+4] 0 +
mov eax [ebp+var_14] +
inc eax  +
mov [ebp+var_14] eax +
jmp loc_1013C9E  +
push [ebp+arg_0]  +
mov ecx [ebp+var_6C] +
call sub_1013D2E  +
push 0  +
push 0  +
lea eax [ebp+var_10] +
push eax  +
push [ebp+var_6C]  +
push [ebp+arg_0]  +
mov ecx [ebp+var_6C] +
call sub_10138AE  +
push [ebp+var_10]  +
mov ecx [ebp+var_6C] +
call sub_1013B18  +
mov [ebp+var_68] eax +
mov eax [ebp+var_68] +
mov dword ptr [eax+4] 1 +
or [ebp+var_4] 0FFFFFFFFh +
mov eax [ebp+var_6C] +
mov ecx [ebp+var_C] +
mov large fs:0 ecx +
pop ecx  +
pop edi  +
pop esi  +
leave   +
retn 8  +
and [ebp+var_80] 0 +
jmp loc_1013C77  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 28h +
push esi  +
push edi  +
mov [ebp+var_24] ecx +
mov eax [ebp+arg_0] +
movzx eax word ptr [eax] +
test eax eax +
jz loc_1013D8D  +
mov eax [ebp+arg_0] +
movzx eax word ptr [eax] +
mov [ebp+var_28] eax +
cmp [ebp+var_28] 2Ah +
jz loc_1013D83  +
cmp [ebp+var_28] 2Eh +
jz loc_1013D83  +
cmp [ebp+var_28] 3Fh +
jz loc_1013D83  +
cmp [ebp+var_28] 7Ch +
jz loc_1021B2F  +
mov eax [ebp+arg_0] +
movzx eax word ptr [eax] +
push eax  +
mov eax [ebp+arg_0] +
movzx eax word ptr [eax] +
push eax  +
mov ecx [ebp+var_24] +
add ecx 8 +
call sub_10142E0  +
mov eax [ebp+arg_0] +
inc eax  +
inc eax  +
mov [ebp+arg_0] eax +
jmp loc_1013D3B  +
mov ecx [ebp+var_24] +
add ecx 8 +
call sub_1013DA3  +
pop edi  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebx  +
push esi  +
push edi  +
push offset sub_1013DF2  +
mov esi ecx +
push 2  +
push dword ptr [esi+4]  +
push dword ptr [esi]  +
call ds:qsort  +
xor edi edi +
inc edi  +
add esp 10h +
xor ebx ebx +
cmp [esi+4] edi +
jbe loc_1013DE5  +
xor edx edx +
mov eax [esi] +
movzx ecx word ptr [eax+edi*2] +
cmp [edx+eax] cx +
jz loc_1013DDF  +
inc ebx  +
lea edx [ebx+ebx] +
mov [edx+eax] cx +
inc edi  +
cmp edi [esi+4] +
jb loc_1013DCB  +
inc ebx  +
pop edi  +
mov [esi+4] ebx +
pop esi  +
pop ebx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [ebp+arg_4] +
movzx eax word ptr [eax] +
movzx ecx word ptr [ecx] +
sub eax ecx +
pop ebp  +
retn   +
***
call sub_10015E0  +
mov esi ecx +
mov [ebp-10h] esi +
xor ebx ebx +
mov [esi] ebx +
mov [ebp-4] ebx +
mov [esi+4] ebx +
mov [esi+8] ebx +
push dword ptr [ebp+8]  +
lea edi [esi+0Ch] +
mov ecx edi +
mov byte ptr [ebp-4] 2 +
call sub_10132B3  +
mov eax [edi+0Ch] +
mov [ebp-18h] eax +
lea eax [ebp-1Ch] +
push eax  +
lea ecx [esi+1A0h] +
mov byte ptr [ebp-4] 3 +
mov [ebp-1Ch] ebx +
mov [ebp-14h] edi +
call sub_10146E4  +
mov ecx esi +
call sub_1013E78  +
test eax eax +
jz loc_10213AF  +
mov eax esi +
call sub_10015C0  +
retn 4  +
***
call sub_1002A3A  +
mov esi ecx +
lea eax [esi+1B8h] +
mov ecx [eax] +
mov [ebp-144h] ecx +
mov ecx [eax+4] +
mov eax [eax+8] +
mov [ebp-13Ch] eax +
mov [ebp-140h] ecx +
lea eax [esi+1ACh] +
mov ecx [eax] +
mov [ebp-154h] ecx +
mov ecx [eax+4] +
mov eax [eax+8] +
xor ebx ebx +
push ebx  +
mov [ebp-150h] ecx +
push 7Ch  +
lea ecx [ebp-154h] +
mov [ebp-14Ch] eax +
call sub_101440C  +
or edi 0FFFFFFFFh +
cmp eax edi +
jnz loc_1013FD2  +
push ebx  +
push 7Ch  +
lea ecx [ebp-144h] +
call sub_101440C  +
cmp eax edi +
jnz loc_1013FD2  +
lea eax [ebp-144h] +
push eax  +
lea ecx [ebp-138h] +
call sub_1014968  +
push 4Ch  +
mov [ebp-4] ebx +
call off_104B7F4  +
mov ecx eax +
mov [ebp-15Ch] ecx +
mov byte ptr [ebp-4] 1 +
cmp ecx ebx +
jz loc_1013FD6  +
push ebx  +
push dword ptr [ebp-134h]  +
call sub_1013FF0  +
mov [ebp-4] bl +
mov [esi] eax +
cmp eax ebx +
jz loc_1021EE7  +
push ebx  +
push 2Ah  +
lea ecx [ebp-154h] +
call sub_101440C  +
cmp eax edi +
jz loc_1021F14  +
lea eax [ebp-154h] +
push eax  +
lea ecx [ebp-0A4h] +
call sub_1014968  +
push ebx  +
push 2Fh  +
push 5Ch  +
lea ecx [ebp-0A4h] +
mov byte ptr [ebp-4] 2 +
call sub_10142AD  +
push 4Ch  +
call off_104B7F4  +
mov ecx eax +
mov [ebp-15Ch] ecx +
mov byte ptr [ebp-4] 3 +
cmp ecx ebx +
jz loc_1013FE7  +
push ebx  +
push dword ptr [ebp-0A0h]  +
call sub_1013FF0  +
mov byte ptr [ebp-4] 2 +
mov [esi+4] eax +
cmp eax ebx +
jz loc_1021EE7  +
lea ecx [ebp-0A4h] +
call sub_10084DE  +
lea ecx [ebp-138h] +
call sub_10084DE  +
xor eax eax +
inc eax  +
call sub_1002A77  +
retn   +
xor eax eax +
jmp loc_1013FCC  +
xor eax eax +
jmp loc_1013F37  +
cmp eax edi +
jnz loc_1013F5A  +
jmp loc_1013FBE  +
xor eax eax +
jmp loc_1013FA4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push esi  +
push [ebp+arg_4]  +
lea eax [ebp+var_8] +
push eax  +
push [ebp+arg_0]  +
mov esi ecx +
mov [ebp+var_8] 0BB8h +
call sub_101401C  +
mov eax esi +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0FFFFFFFFh  +
push offset dword_10456B8  +
mov eax large fs:0 +
push eax  +
sub esp 10h +
mov eax dword_104A044 +
xor eax ebp +
push eax  +
lea eax [ebp+var_C] +
mov large fs:0 eax +
mov [ebp+var_1C] ecx +
push [ebp+arg_8]  +
push [ebp+arg_0]  +
mov ecx [ebp+var_1C] +
call sub_1013B72  +
and [ebp+var_4] 0 +
mov eax [ebp+var_1C] +
mov eax [eax+4] +
mov [ebp+var_10] eax +
push [ebp+var_10]  +
mov ecx [ebp+var_1C] +
add ecx 24h +
call sub_1014AD3  +
mov byte ptr [ebp+var_4] 1 +
mov eax [ebp+var_1C] +
mov eax [eax+4] +
mov [ebp+var_14] eax +
mov eax [ebp+var_1C] +
mov ecx [ebp+var_14] +
mov [eax+38h] ecx +
mov eax [ebp+var_1C] +
and dword ptr [eax+3Ch] 0 +
mov eax [ebp+var_1C] +
and dword ptr [eax+40h] 0 +
mov eax [ebp+var_1C] +
add eax 44h +
mov [ebp+var_18] eax +
mov eax [ebp+var_18] +
mov ecx [ebp+arg_4] +
mov ecx [ecx] +
mov [eax] ecx +
mov eax [ebp+var_18] +
mov ecx [ebp+arg_4] +
mov ecx [ecx+4] +
mov [eax+4] ecx +
call ds:GetTickCount  +
mov ecx [ebp+var_1C] +
mov [ecx+48h] eax +
mov ecx [ebp+var_1C] +
call sub_10140E1  +
or [ebp+var_4] 0FFFFFFFFh +
mov eax [ebp+var_1C] +
mov ecx [ebp+var_C] +
mov large fs:0 ecx +
pop ecx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0FFFFFFFFh  +
push offset dword_10455F8  +
mov eax large fs:0 +
push eax  +
sub esp 74h +
push esi  +
push edi  +
mov eax dword_104A044 +
xor eax ebp +
push eax  +
lea eax [ebp+var_C] +
mov large fs:0 eax +
mov [ebp+var_80] ecx +
and [ebp+var_1C] 0 +
lea ecx [ebp+var_48] +
call sub_1013352  +
and [ebp+var_4] 0 +
mov eax [ebp+var_80] +
mov eax [eax] +
mov [ebp+var_78] eax +
lea eax [ebp+var_48] +
push eax  +
push [ebp+var_78]  +
mov ecx [ebp+var_80] +
call sub_10135D3  +
lea eax [ebp+var_48] +
push eax  +
mov ecx [ebp+var_80] +
add ecx 24h +
call sub_1014A6D  +
mov ecx [ebp+var_80] +
mov [ecx+34h] eax +
mov eax [ebp+var_80] +
mov eax [eax+38h] +
inc eax  +
mov ecx [ebp+var_80] +
mov ecx [ecx+0Ch] +
add ecx 7 +
imul eax ecx +
mov [ebp+var_10] eax +
xor ecx ecx +
mov eax [ebp+var_10] +
push 4  +
pop edx  +
mul  edx +
seto cl  +
neg ecx  +
or ecx eax +
push ecx  +
call sub_10085CE  +
pop ecx  +
mov [ebp+var_50] eax +
mov eax [ebp+var_80] +
mov ecx [ebp+var_50] +
mov [eax+3Ch] ecx +
mov eax [ebp+var_80] +
mov eax [eax+38h] +
inc eax  +
push eax  +
call sub_10085CE  +
pop ecx  +
mov [ebp+var_54] eax +
mov eax [ebp+var_80] +
mov ecx [ebp+var_54] +
mov [eax+40h] ecx +
mov eax [ebp+var_80] +
cmp dword ptr [eax+3Ch] 0 +
jz loc_1021E57  +
mov eax [ebp+var_80] +
cmp dword ptr [eax+40h] 0 +
jz loc_1021E57  +
mov eax [ebp+var_10] +
shl eax 2 +
push eax  +
push 0FFh  +
mov eax [ebp+var_80] +
push dword ptr [eax+3Ch]  +
call memset  +
add esp 0Ch +
mov eax [ebp+var_80] +
mov eax [eax+38h] +
inc eax  +
push eax  +
push 0  +
mov eax [ebp+var_80] +
push dword ptr [eax+40h]  +
call memset  +
add esp 0Ch +
mov eax [ebp+var_80] +
mov eax [eax+38h] +
mov [ebp+var_4C] eax +
cmp [ebp+var_4C] 0 +
jl loc_101421B  +
mov eax [ebp+var_80] +
mov eax [eax+0Ch] +
add eax 7 +
imul eax [ebp+var_4C] +
mov ecx [ebp+var_80] +
mov ecx [ecx+3Ch] +
mov dword ptr [ecx+eax*4] 0FFFFFFFEh +
mov eax [ebp+var_4C] +
dec eax  +
mov [ebp+var_4C] eax +
jmp loc_10141F2  +
lea eax [ebp+var_48] +
push eax  +
mov ecx [ebp+var_80] +
call sub_10136BC  +
movzx eax al +
push eax  +
mov eax [ebp+var_80] +
push dword ptr [eax+34h]  +
mov ecx [ebp+var_80] +
call sub_1014260  +
or [ebp+var_4] 0FFFFFFFFh +
mov eax [ebp+var_1C] +
mov [ebp+var_7C] eax +
push [ebp+var_7C]  +
call sub_10085E3  +
pop ecx  +
mov ecx [ebp+var_C] +
mov large fs:0 ecx +
pop ecx  +
pop edi  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 50h +
push esi  +
push edi  +
mov [ebp+var_50] ecx +
mov eax [ebp+var_50] +
mov ecx [ebp+arg_0] +
cmp ecx [eax+38h] +
ja loc_1021C58  +
mov eax [ebp+var_50] +
mov eax [eax+0Ch] +
add eax 7 +
imul eax [ebp+arg_0] +
mov ecx [ebp+var_50] +
mov ecx [ecx+3Ch] +
or dword ptr [ecx+eax*4] 0FFFFFFFFh +
mov eax [ebp+var_50] +
mov eax [eax+40h] +
mov ecx [ebp+arg_0] +
mov dl [ebp+arg_4] +
mov [eax+ecx] dl +
pop edi  +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_8]  +
mov esi ecx +
push dword ptr [ebp+arg_0]  +
call sub_1003D62  +
cmp eax 0FFFFFFFFh +
jz loc_10142D6  +
mov ecx [esi+4] +
mov dx [ebp+arg_4] +
mov [ecx+eax*2] dx +
inc eax  +
push eax  +
mov ecx esi +
jmp loc_10142B8  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi ecx +
cmp byte ptr [esi+10h] 0 +
push edi  +
jnz loc_101433A  +
push dword ptr [ebp+SrcStr]  +
call sub_101331E  +
push [ebp+arg_4]  +
movzx ebx ax +
call sub_101331E  +
movzx edi ax +
mov eax [esi+8] +
sub eax [esi+4] +
cmp eax 2 +
jb loc_1014331  +
mov eax [esi+4] +
mov ecx [esi] +
dec ebx  +
mov [ecx+eax*2] bx +
inc dword ptr [esi+4]  +
mov eax [esi+4] +
mov ecx [esi] +
mov [ecx+eax*2] di +
inc dword ptr [esi+4]  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
mov ecx esi +
call sub_1014347  +
jmp loc_1014311  +
mov edi [ebp+arg_4] +
mov ebx dword ptr [ebp+SrcStr] +
jmp loc_1014306  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 24h +
push ebx  +
push esi  +
push edi  +
mov edi ecx +
mov eax [edi] +
lea esi [edi+8] +
mov ebx [esi] +
push esi  +
push 1  +
push ebx  +
mov [ebp+var_4] eax +
call sub_1008625  +
test eax eax +
jl loc_10143CB  +
mov eax [esi] +
push 2  +
pop ecx  +
mul  ecx +
push esi  +
push edx  +
push eax  +
call sub_10085F8  +
test eax eax +
jl loc_10143CB  +
push esi  +
push 1  +
push dword ptr [esi]  +
call sub_10143DA  +
test eax eax +
jl loc_10143CB  +
mov eax [esi] +
push 2  +
xor ecx ecx +
pop edx  +
mul  edx +
seto cl  +
neg ecx  +
or eax ecx +
push eax  +
call off_104B7F4  +
mov [edi] eax +
test eax eax +
jz loc_1022200  +
lea ecx [ebx+ebx] +
push ecx  +
push [ebp+var_4]  +
push eax  +
call memcpy  +
add esp 0Ch +
push [ebp+var_4]  +
call off_104B7F0  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
push 0C000000Dh  +
jmp loc_1022205  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
cmp eax [ebp+arg_4] +
jb loc_1022173  +
sub eax [ebp+arg_4] +
mov ecx [ebp+arg_8] +
mov [ecx] eax +
xor eax eax +
pop ebp  +
retn 0Ch  +
***
mov ecx [esi+4] +
add ecx [esi] +
cmp eax ecx +
jb loc_1014429  +
jmp loc_1021EC1  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov eax [esi] +
add eax [ebp+arg_4] +
mov ecx [esi+8] +
push eax  +
push dword ptr [ebp+arg_0]  +
call sub_1003D62  +
test eax eax +
jg loc_10143F9  +
cmp eax 0FFFFFFFFh +
jnz loc_1014436  +
or eax 0FFFFFFFFh +
pop esi  +
pop ebp  +
retn 8  +
sub eax [esi] +
jmp loc_1014431  +
***
call sub_10015E0  +
mov esi ecx +
mov [ebp-10h] esi +
xor edi edi +
inc edi  +
lea ecx [esi+0Ch] +
mov [ebp-4] edi +
call sub_1003D18  +
mov ecx [esi+8] +
test ecx ecx +
jz loc_101446B  +
push edi  +
call sub_1014497  +
mov ecx [esi+4] +
mov byte ptr [ebp-4] 0 +
test ecx ecx +
jz loc_101447C  +
push edi  +
call sub_1014497  +
mov ecx [esi] +
or dword ptr [ebp-4] 0FFFFFFFFh +
test ecx ecx +
jz loc_101448C  +
push edi  +
call sub_1014497  +
call sub_10015C0  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_10144BD  +
test [ebp+arg_0] 1 +
jz loc_10144B1  +
push esi  +
call off_104B7F0  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0FFFFFFFFh  +
push offset dword_1045494  +
mov eax large fs:0 +
push eax  +
sub esp 0Ch +
mov eax dword_104A044 +
xor eax ebp +
push eax  +
lea eax [ebp+var_C] +
mov large fs:0 eax +
mov [ebp+var_18] ecx +
mov [ebp+var_4] 1 +
mov eax [ebp+var_18] +
mov eax [eax+3Ch] +
mov [ebp+var_10] eax +
push [ebp+var_10]  +
call sub_10085E3  +
pop ecx  +
mov eax [ebp+var_18] +
mov eax [eax+40h] +
mov [ebp+var_14] eax +
push [ebp+var_14]  +
call sub_10085E3  +
pop ecx  +
mov byte ptr [ebp+var_4] 0 +
mov ecx [ebp+var_18] +
add ecx 24h +
call sub_1013374  +
or [ebp+var_4] 0FFFFFFFFh +
mov ecx [ebp+var_18] +
call sub_101453F  +
mov ecx [ebp+var_C] +
mov large fs:0 ecx +
pop ecx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0FFFFFFFFh  +
push offset dword_104543C  +
mov eax large fs:0 +
push eax  +
sub esp 18h +
mov eax dword_104A044 +
xor eax ebp +
push eax  +
lea eax [ebp+var_C] +
mov large fs:0 eax +
mov [ebp+var_20] ecx +
and [ebp+var_4] 0 +
mov eax [ebp+var_20] +
mov eax [eax+20h] +
mov [ebp+var_14] eax +
mov eax [ebp+var_14] +
mov [ebp+var_10] eax +
cmp [ebp+var_10] 0 +
jz loc_10145B2  +
push 3  +
mov ecx [ebp+var_10] +
call sub_10145BD  +
mov [ebp+var_24] eax +
or [ebp+var_4] 0FFFFFFFFh +
mov eax [ebp+var_20] +
mov eax [eax+8] +
mov [ebp+var_1C] eax +
push [ebp+var_1C]  +
call sub_10085E3  +
pop ecx  +
mov ecx [ebp+var_C] +
mov large fs:0 ecx +
pop ecx  +
leave   +
retn   +
and [ebp+var_24] 0 +
jmp loc_101458F  +
***
mov edi edi +
push ebp  +
mov ebp esp +
test [ebp+arg_0] 2 +
push esi  +
mov esi ecx +
jz loc_101C10D  +
push edi  +
push offset loc_10145FC  +
lea edi [esi-4] +
push dword ptr [edi]  +
push 24h  +
push esi  +
call sub_1008074  +
test [ebp+arg_0] 1 +
jz loc_10145EF  +
push edi  +
call off_104B7F0  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
push dword ptr [ecx+18h]  +
call off_104B7F0  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 24h +
push esi  +
mov esi [ebp+arg_0] +
test esi esi +
jz loc_1021773  +
lea eax [ebp+var_C] +
push eax  +
mov ecx esi +
call sub_1013272  +
lea eax [ebp+var_18] +
push eax  +
mov ecx esi +
call sub_1014694  +
mov ecx esi +
call sub_10146CC  +
test eax eax +
jnz loc_101464F  +
mov ecx esi +
call sub_101324C  +
test eax eax +
jz loc_102177D  +
mov ecx [ebp+arg_4] +
lea eax [ebp+var_18] +
push eax  +
call sub_1014694  +
push eax  +
lea eax [ebp+var_24] +
push eax  +
mov ecx esi +
call sub_1014694  +
mov ecx eax +
call sub_1014A07  +
test eax eax +
jnz loc_10155DC  +
push [ebp+arg_C]  +
mov ecx [ebp+arg_8] +
lea eax [ebp+var_C] +
push eax  +
call sub_101513F  +
neg eax  +
sbb eax eax +
inc eax  +
pop esi  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov esi ecx +
call sub_10146CC  +
xor edi edi +
sub eax edi +
jnz loc_10155AB  +
mov eax [ebp+arg_0] +
mov [eax] edi +
mov ecx dword_104A0E0 +
mov dword ptr [eax+8] offset dword_104A0D4 +
mov [eax+4] ecx +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_100407C  +
movzx eax word ptr [esi+1A4h] +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
mov esi ecx +
mov ecx [eax] +
mov [esi] ecx +
mov ecx [eax+4] +
mov [esi+4] ecx +
mov eax [eax+8] +
mov [esi+8] eax +
xor eax eax +
mov [esi+0Ch] eax +
mov [esi+10h] eax +
mov [esi+14h] eax +
mov ecx esi +
mov [esi+18h] eax +
mov [esi+1Ch] eax +
mov [esi+20h] eax +
call sub_1014726  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push ebx  +
push esi  +
push edi  +
push 5Ch  +
mov edi ecx +
call sub_1013214  +
push 2Fh  +
mov ecx edi +
mov esi eax +
call sub_1013214  +
cmp esi eax +
jle loc_101474B  +
mov eax esi +
lea ebx [eax+1] +
push ebx  +
push 0  +
lea eax [ebp+var_C] +
push eax  +
mov ecx edi +
call sub_1014B97  +
mov eax [ebp+var_C] +
lea esi [edi+0Ch] +
mov [esi] eax +
mov eax [ebp+var_8] +
mov [esi+4] eax +
mov eax [ebp+var_4] +
mov [esi+8] eax +
push ebx  +
lea eax [ebp+var_C] +
push eax  +
mov ecx edi +
call sub_1014B74  +
mov ecx [eax] +
add edi 18h +
mov [edi] ecx +
mov ecx [eax+4] +
mov [edi+4] ecx +
mov eax [eax+8] +
mov [edi+8] eax +
call sub_10147A5  +
mov esi edi +
call sub_10147A5  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
cmp dword ptr [esi+4] 0 +
jz locret_10147C5  +
mov eax [esi+8] +
mov ecx [esi] +
mov eax [eax+4] +
movzx eax word ptr [eax+ecx*2] +
push eax  +
call sub_1003A20  +
test eax eax +
jnz loc_1021ED9  +
retn   +
***
call sub_1002A3A  +
mov esi [ebp+8] +
mov edi [ebp+0Ch] +
lea eax [ebp-1E0h] +
push eax  +
call sub_101490F  +
lea eax [ebp-1DCh] +
push eax  +
call sub_101490F  +
push offset dword_104A104  +
lea ecx [ebp-1D8h] +
call sub_1003060  +
mov eax [esi+4] +
mov ecx [edi+4] +
and dword ptr [ebp-4] 0 +
cmp eax ecx +
jb loc_1021428  +
push ecx  +
lea eax [ebp-1D8h] +
push eax  +
mov ecx esi +
call sub_101371C  +
mov ebx [ebp-1E0h] +
push dword ptr [ebp-1D8h]  +
mov ecx ebx +
call sub_1003E3B  +
push dword ptr [edi+14h]  +
mov esi [ebp-1DCh] +
mov ecx esi +
call sub_1003E3B  +
lea eax [ebp-1F8h] +
push eax  +
mov ecx esi +
call sub_1013188  +
mov ecx [eax] +
mov [ebp-1ECh] ecx +
mov ecx [eax+4] +
mov eax [eax+8] +
mov [ebp-1E8h] ecx +
mov ecx esi +
mov [ebp-1E4h] eax +
call sub_10146CC  +
test eax eax +
jnz loc_101488E  +
mov ecx esi +
call sub_101324C  +
test eax eax +
jz loc_1021452  +
mov eax [ebp-1E4h] +
mov eax [eax+4] +
mov ecx [ebp-1ECh] +
lea eax [eax+ecx*2] +
push eax  +
lea ecx [ebp-1D4h] +
call sub_1013E0C  +
push 1  +
lea eax [ebp-1D4h] +
push eax  +
push esi  +
push ebx  +
mov byte ptr [ebp-4] 1 +
call sub_101460B  +
xor ecx ecx +
test eax eax +
setz cl  +
mov edi ecx +
test ebx ebx +
jz loc_10148D6  +
mov eax [ebx] +
push 1  +
mov ecx ebx +
call dword ptr [eax+1Ch]  +
test esi esi +
jz loc_10148E3  +
mov eax [esi] +
push 1  +
mov ecx esi +
call dword ptr [eax+1Ch]  +
lea ecx [ebp-1D4h] +
mov byte ptr [ebp-4] 0 +
call sub_101443F  +
mov ecx [ebp-1D8h] +
add ecx 0FFFFFFF0h +
call sub_1002990  +
mov eax edi +
call sub_1002A77  +
retn 8  +
***
call sub_1001862  +
mov esi [ebp+8] +
xor edi edi +
cmp esi edi +
jz loc_1021393  +
push 1C4h  +
mov [esi] edi +
mov dword ptr [ebp-14h] 8007000Eh +
mov [ebp-4] edi +
call off_104B7F4  +
cmp eax edi +
jz loc_101495F  +
push edi  +
mov ecx eax +
call sub_1003D9C  +
cmp eax edi +
jz loc_1014952  +
mov [ebp-14h] edi +
mov [esi] eax +
mov eax [ebp-14h] +
call sub_10015C0  +
retn 4  +
xor eax eax +
jmp loc_101494B  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
lea eax [esi+10h] +
push eax  +
push 42h  +
call sub_1014990  +
mov dword ptr [esi] offset off_1002B8C +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
push esi  +
mov esi ecx +
mov [esi+4] eax +
mov eax [ebp+arg_0] +
mov [esi+8] eax +
mov eax [ebp+arg_8] +
mov dword ptr [esi] offset off_1002B70 +
mov ecx [eax+8] +
push dword ptr [eax+4]  +
mov ecx [ecx+4] +
mov eax [eax] +
lea eax [ecx+eax*2] +
push eax  +
mov ecx esi +
call sub_100853F  +
mov eax esi +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_10149EB  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_1012ECD  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_0]  +
call sub_1014A22  +
neg eax  +
sbb eax eax +
inc eax  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ecx+4] +
mov eax [ebp+arg_0] +
cmp edx [eax+4] +
jnz loc_101CE12  +
mov edx [eax+8] +
mov eax [eax] +
mov edx [edx+4] +
push esi  +
mov esi [ecx+8] +
mov esi [esi+4] +
push edi  +
mov edi [ecx+4] +
push edi  +
push edi  +
lea eax [edx+eax*2] +
push eax  +
mov eax [ecx] +
push edi  +
lea eax [esi+eax*2] +
push eax  +
push 1  +
call sub_1003555  +
neg eax  +
sbb eax eax +
pop edi  +
inc eax  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_1014BE6  +
test eax eax +
jnz loc_1014A8B  +
push [ebp+arg_0]  +
mov ecx esi +
call sub_1014A95  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov eax [esi+8] +
dec eax  +
cmp eax [esi+0Ch] +
jz loc_10153AD  +
inc dword ptr [esi+0Ch]  +
mov eax [esi+0Ch] +
mov ecx [esi] +
push [ebp+arg_0]  +
imul ecx eax +
mov eax [esi+4] +
lea eax [eax+ecx*4] +
push eax  +
mov ecx esi +
call sub_1014C5D  +
mov eax [esi+0Ch] +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
push esi  +
mov esi ecx +
mov [esi+4] eax +
mov [esi+8] eax +
mov [esi+0Ch] eax +
mov eax [ebp+arg_0] +
add eax 20h +
shr eax 5 +
mov [esi] eax +
call sub_1014B02  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebx  +
push esi  +
mov esi ecx +
mov eax [esi] +
push edi  +
mov edi [esi+8] +
lea ecx [edi+0Ah] +
imul eax ecx +
mov ebx [esi+4] +
push 4  +
mov [esi+8] ecx +
xor ecx ecx +
pop edx  +
mul  edx +
seto cl  +
neg ecx  +
or eax ecx +
push eax  +
call off_104B7F4  +
mov ecx [esi] +
imul ecx edi +
shl ecx 2 +
push ecx  +
push ebx  +
push eax  +
mov [esi+4] eax +
call memcpy  +
mov ecx [esi+8] +
mov eax [esi] +
sub ecx edi +
imul ecx eax +
imul eax edi +
shl ecx 2 +
push ecx  +
mov ecx [esi+4] +
lea eax [ecx+eax*4] +
push 0  +
push eax  +
call memset  +
add esp 18h +
push ebx  +
call off_104B7F0  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx+4] +
sub eax [ebp+arg_4] +
push eax  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1014B97  +
mov eax [ebp+arg_0] +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 24h +
push ebx  +
mov ebx [ebp+arg_4] +
push esi  +
push edi  +
push [ebp+arg_8]  +
mov esi ecx +
mov edi [esi+4] +
lea eax [ebp+var_4] +
push eax  +
lea ecx [ebp+arg_4] +
mov [ebp+arg_4] ebx +
call sub_1002EA5  +
cmp [eax] edi +
ja loc_101D450  +
push [ebp+arg_8]  +
mov eax [esi] +
mov ecx [esi+8] +
add eax ebx +
push eax  +
push [ebp+arg_0]  +
call sub_10034B1  +
mov eax [ebp+arg_0] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
mov esi ecx +
mov eax [esi] +
push edi  +
shl eax 2 +
push eax  +
push 0  +
push dword ptr [esi+4]  +
call memset  +
add esp 0Ch +
push [ebp+arg_0]  +
mov ecx esi +
push dword ptr [esi+4]  +
call sub_1014C5D  +
mov eax [esi+0Ch] +
xor ecx ecx +
inc ecx  +
mov [ebp+arg_0] ecx +
mov [ebp+var_8] eax +
cmp eax ecx +
jb loc_1014C4F  +
mov edx [esi] +
mov ebx [esi+4] +
shl edx 2 +
lea eax [ebx+edx] +
mov [ebp+var_4] eax +
mov esi [ebp+var_4] +
mov ecx edx +
mov edi ebx +
xor eax eax +
cmps   +
jz loc_10153A5  +
inc [ebp+arg_0]  +
mov eax [ebp+arg_0] +
add [ebp+var_4] edx +
cmp eax [ebp+var_8] +
jbe loc_1014C30  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_4] +
mov esi [edi] +
test esi esi +
jbe loc_1014C90  +
push esi  +
mov ecx edi +
call sub_101369A  +
mov edx [ebp+arg_0] +
dec eax  +
mov ecx eax +
shr ecx 5 +
lea edx [edx+ecx*4] +
mov ecx eax +
xor eax eax +
and ecx 1Fh +
inc eax  +
shl eax cl +
or [edx] eax +
dec esi  +
jnz loc_1014C6D  +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
call sub_10147CB  +
jmp loc_1008352  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
test edx edx +
jz loc_1014CE6  +
cmp edx [ecx+0Ch] +
ja loc_1014CE6  +
mov eax [ecx] +
mov ecx [ecx+4] +
push esi  +
mov esi eax +
imul esi edx +
shl eax 5 +
dec eax  +
push edi  +
lea esi [ecx+esi*4] +
mov edi eax +
js loc_1014CE4  +
xor eax eax +
mov ecx edi +
and ecx 1Fh +
inc eax  +
shl eax cl +
mov ecx edi +
shr ecx 5 +
test [esi+ecx*4] eax +
jnz loc_1014CEA  +
dec edi  +
jns loc_1014CCD  +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
mov ecx [ebp+arg_4] +
lea eax [edi+1] +
push eax  +
call sub_101352D  +
jmp loc_1014CE1  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov [ebp+var_8] ecx +
mov eax [ebp+arg_0] +
mov eax [eax] +
mov [ebp+var_4] eax +
cmp [ebp+var_4] 0 +
jbe locret_1014D3F  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+var_4]  +
mov ecx [ebp+arg_0] +
call sub_101369A  +
push eax  +
mov ecx [ebp+var_8] +
call sub_1013B18  +
mov ecx eax +
call sub_10134CD  +
mov eax [ebp+var_4] +
dec eax  +
mov [ebp+var_4] eax +
jmp loc_1014D0F  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov [ebp+var_8] ecx +
mov eax [ebp+arg_0] +
mov eax [eax] +
mov [ebp+var_4] eax +
cmp [ebp+var_4] 0 +
jbe locret_1014D80  +
push [ebp+arg_4]  +
push [ebp+var_4]  +
mov ecx [ebp+arg_0] +
call sub_101369A  +
push eax  +
mov ecx [ebp+var_8] +
call sub_10135D3  +
mov eax [ebp+var_4] +
dec eax  +
mov [ebp+var_4] eax +
jmp loc_1014D5A  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
mov eax [esi+4] +
push edi  +
mov edi [ebp+arg_4] +
cmp eax [edi+4] +
jnz loc_1021ED2  +
and [ebp+arg_0] 0 +
push ebx  +
test eax eax +
jbe loc_1014E10  +
mov eax [esi] +
mov ecx [esi+8] +
add eax [ebp+arg_0] +
mov ecx [ecx+4] +
movzx eax word ptr [ecx+eax*2] +
push eax  +
call sub_101331E  +
mov ecx [edi+8] +
mov ecx [ecx+4] +
movzx ebx ax +
mov eax [edi] +
add eax [ebp+arg_0] +
movzx eax word ptr [ecx+eax*2] +
push eax  +
call sub_101331E  +
movzx eax ax +
push ebx  +
mov [ebp+arg_4] eax +
call sub_1003A20  +
test eax eax +
jnz loc_1014DFB  +
cmp bx word ptr [ebp+arg_4] +
jnz loc_1014E07  +
inc [ebp+arg_0]  +
mov eax [ebp+arg_0] +
cmp eax [esi+4] +
jb loc_1014DAB  +
jmp loc_1014E10  +
push [ebp+arg_4]  +
call sub_1003A20  +
test eax eax +
jnz loc_1014DEE  +
xor eax eax +
pop ebx  +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
xor eax eax +
inc eax  +
jmp loc_1014E09  +
***
mov [ebp+var_20] 0FFFFFFFEh +
mov eax [ebp+var_104] +
mov eax [eax+0Ch] +
add eax 7 +
imul eax [ebp+var_1C] +
movzx ecx [ebp+SrcStr] +
add eax ecx +
mov ecx [ebp+var_104] +
mov ecx [ecx+3Ch] +
mov edx [ebp+var_20] +
mov [ecx+eax*4] edx +
jmp loc_101502E  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0FFFFFFFFh  +
push offset byte_104565B  +
mov eax large fs:0 +
push eax  +
sub esp 0FCh +
push esi  +
push edi  +
mov eax dword_104A044 +
xor eax ebp +
push eax  +
lea eax [ebp+var_C] +
mov large fs:0 eax +
mov [ebp+var_104] ecx +
call ds:GetTickCount  +
mov ecx [ebp+var_104] +
mov [ecx+48h] eax +
mov eax [ebp+var_104] +
mov eax [eax+34h] +
mov [ebp+var_1C] eax +
mov eax [ebp+var_1C] +
mov [ebp+var_10] eax +
mov eax [ebp+var_104] +
mov eax [eax+40h] +
mov ecx [ebp+var_1C] +
mov al [eax+ecx] +
mov [ebp+var_15] al +
push 2  +
pop eax  +
mov [ebp+SrcStr] ax +
movzx eax [ebp+var_15] +
test eax eax +
jnz loc_1015391  +
mov eax [ebp+var_104] +
mov eax [eax+0Ch] +
add eax 7 +
imul eax [ebp+var_1C] +
movzx ecx [ebp+SrcStr] +
add eax ecx +
mov ecx [ebp+var_104] +
mov ecx [ecx+3Ch] +
mov eax [ecx+eax*4] +
mov [ebp+var_20] eax +
cmp [ebp+var_20] 0FFFFFFFFh +
jnz loc_10150BE  +
and [ebp+var_64] 0 +
lea ecx [ebp+var_90] +
call sub_1013352  +
and [ebp+var_4] 0 +
and [ebp+var_9C] 0 +
lea ecx [ebp+var_C8] +
call sub_1013352  +
mov byte ptr [ebp+var_4] 1 +
and [ebp+var_2C] 0 +
lea ecx [ebp+var_58] +
call sub_1013352  +
mov byte ptr [ebp+var_4] 2 +
lea eax [ebp+var_90] +
push eax  +
push [ebp+var_1C]  +
mov ecx [ebp+var_104] +
add ecx 24h +
call sub_1014CA5  +
movzx eax [ebp+SrcStr] +
push eax  +
lea eax [ebp+var_C8] +
push eax  +
lea eax [ebp+var_90] +
push eax  +
mov ecx [ebp+var_104] +
call sub_1014CFD  +
cmp [ebp+var_C8] 0 +
jz loc_1014E15  +
lea eax [ebp+var_58] +
push eax  +
lea eax [ebp+var_C8] +
push eax  +
mov ecx [ebp+var_104] +
call sub_1014D48  +
lea eax [ebp+var_58] +
push eax  +
mov ecx [ebp+var_104] +
add ecx 24h +
call sub_1014A6D  +
mov [ebp+var_20] eax +
mov eax [ebp+var_104] +
mov ecx [ebp+var_20] +
cmp ecx [eax+38h] +
ja loc_1014FD6  +
mov eax [ebp+var_104] +
mov eax [eax+0Ch] +
add eax 7 +
imul eax [ebp+var_20] +
mov ecx [ebp+var_104] +
mov ecx [ecx+3Ch] +
mov eax [ecx+eax*4] +
mov [ebp+var_EC] eax +
cmp [ebp+var_EC] 0FFFFFFFEh +
jnz loc_1015379  +
mov [ebp+var_105] 0 +
movzx eax [ebp+var_105] +
test eax eax +
jnz loc_1015009  +
lea eax [ebp+var_58] +
push eax  +
mov ecx [ebp+var_104] +
call sub_10136BC  +
movzx eax al +
push eax  +
push [ebp+var_20]  +
mov ecx [ebp+var_104] +
call sub_1014260  +
mov eax [ebp+var_104] +
mov eax [eax+0Ch] +
add eax 7 +
imul eax [ebp+var_1C] +
movzx ecx [ebp+SrcStr] +
add eax ecx +
mov ecx [ebp+var_104] +
mov ecx [ecx+3Ch] +
mov edx [ebp+var_20] +
mov [ecx+eax*4] edx +
mov eax [ebp+var_104] +
add eax 44h +
mov [ebp+var_F0] eax +
mov eax [ebp+var_F0] +
mov esi [eax+4] +
mov eax [ebp+var_F0] +
add esi [eax] +
call ds:GetTickCount  +
cmp esi eax +
jb loc_1021E80  +
and [ebp+var_F4] 0 +
cmp [ebp+var_F4] 0 +
jnz loc_1021E8F  +
mov byte ptr [ebp+var_4] 1 +
mov eax [ebp+var_2C] +
mov [ebp+var_F8] eax +
push [ebp+var_F8]  +
call sub_10085E3  +
pop ecx  +
mov byte ptr [ebp+var_4] 0 +
mov eax [ebp+var_9C] +
mov [ebp+var_FC] eax +
push [ebp+var_FC]  +
call sub_10085E3  +
pop ecx  +
or [ebp+var_4] 0FFFFFFFFh +
mov eax [ebp+var_64] +
mov [ebp+var_100] eax +
push [ebp+var_100]  +
call sub_10085E3  +
pop ecx  +
cmp [ebp+var_20] 0FFFFFFFEh +
jz loc_1015127  +
mov eax [ebp+var_1C] +
mov [ebp+var_10] eax +
mov eax [ebp+var_20] +
mov [ebp+var_1C] eax +
mov eax [ebp+var_104] +
mov eax [eax+40h] +
mov ecx [ebp+var_1C] +
mov al [eax+ecx] +
mov [ebp+var_15] al +
movzx eax [ebp+SrcStr] +
cmp eax 3 +
jz loc_1015385  +
mov eax [ebp+arg_0] +
mov ax [eax] +
mov [ebp+SrcStr] ax +
mov eax [ebp+arg_0] +
inc eax  +
inc eax  +
mov [ebp+arg_0] eax +
movzx eax [ebp+SrcStr] +
test eax eax +
jz loc_1015399  +
push dword ptr [ebp+SrcStr]  +
mov ecx [ebp+var_104] +
add ecx 8 +
call sub_101355F  +
mov [ebp+SrcStr] ax +
jmp loc_1014EB7  +
xor al al +
mov ecx [ebp+var_C] +
mov large fs:0 ecx +
pop ecx  +
pop edi  +
pop esi  +
leave   +
retn 4  +
***
call sub_1003649  +
mov edi [ebp+8] +
xor ebx ebx +
mov esi ecx +
mov [ebp-2F0h] esi +
mov [ebp-2ECh] edi +
cmp [ebp+0Ch] ebx +
jz loc_1021F6A  +
mov eax [esi+18h] +
cmp eax [edi+4] +
ja loc_101519D  +
push eax  +
push ebx  +
lea eax [ebp-2E8h] +
push eax  +
mov ecx edi +
call sub_1014B97  +
lea eax [ebp-2E8h] +
push eax  +
lea eax [esi+1A0h] +
push eax  +
call sub_1014D89  +
test eax eax +
jnz loc_1021F27  +
cmp [esi+4] ebx +
jz loc_1015226  +
cmp [esi+8] ebx +
jnz loc_1015226  +
lea eax [esi+1ACh] +
push eax  +
lea ecx [ebp-13Ch] +
call sub_1014968  +
mov eax [ebp-13Ch] +
push 0FFFFFFFFh  +
push dword ptr [ebp-130h]  +
lea ecx [ebp-13Ch] +
push offset asc_1015334  +
mov [ebp-4] ebx +
call dword ptr [eax+10h]  +
push ebx  +
push 2Fh  +
push 5Ch  +
lea ecx [ebp-13Ch] +
call sub_10142AD  +
push 4Ch  +
mov byte ptr [ebp-4] 1 +
call off_104B7F4  +
mov ecx eax +
mov [ebp-2F4h] ecx +
mov byte ptr [ebp-4] 2 +
cmp ecx ebx +
jz loc_101532D  +
push ebx  +
push dword ptr [ebp-138h]  +
call sub_1013FF0  +
mov [esi+8] eax +
lea ecx [ebp-13Ch] +
call sub_10084DE  +
push edi  +
lea ecx [ebp-318h] +
mov dword ptr [ebp-4] 4 +
mov [ebp-2DCh] ebx +
mov [ebp-2D8h] ebx +
mov [ebp-2D4h] ebx +
mov [ebp-2E8h] ebx +
mov [ebp-2E4h] ebx +
mov [ebp-2E0h] ebx +
call sub_10146E4  +
mov eax [ebp-30Ch] +
mov ecx [ebp-308h] +
mov [ebp-2DCh] eax +
mov eax [ebp-304h] +
mov [ebp-2D4h] eax +
mov eax [ebp-300h] +
mov [ebp-2E8h] eax +
mov eax [ebp-2FCh] +
mov [ebp-2E4h] eax +
mov eax [ebp-2F8h] +
lea edi [esi+1ACh] +
mov [ebp-2E0h] eax +
mov eax [edi+4] +
mov [ebp-2D8h] ecx +
cmp [esi+4] ebx +
jz loc_1021F81  +
lea eax [ebp-2DCh] +
push eax  +
lea ecx [ebp-2D0h] +
call sub_101533F  +
push ebx  +
push 2Fh  +
push 5Ch  +
lea ecx [ebp-2D0h] +
mov byte ptr [ebp-4] 5 +
call sub_10142AD  +
push dword ptr [ebp-2CCh]  +
mov ecx [esi+4] +
call sub_1014E4B  +
movzx eax al +
cmp eax ebx +
jnz loc_1021FC1  +
cmp [ebp+0Ch] ebx +
jz loc_1015318  +
mov ecx [esi+8] +
cmp ecx ebx +
jz loc_1015318  +
push dword ptr [ebp-2CCh]  +
call sub_1014E4B  +
movzx eax al +
cmp eax ebx +
jnz loc_1021FC1  +
lea ecx [ebp-2D0h] +
call sub_1003D18  +
xor eax eax +
call sub_1002FBC  +
retn 8  +
xor eax eax +
jmp loc_1015218  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
lea eax [esi+10h] +
push eax  +
push 0C1h  +
call sub_1014990  +
mov dword ptr [esi] offset off_1003E00 +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov dword ptr [ebp-28h] 80070057h +
jmp loc_1008745  +
mov edi [ebp-20h] +
jmp loc_1007B86  +
***
mov [ebp+var_105] 1 +
jmp loc_1014FDD  +
mov eax [ebp+var_10] +
cmp eax [ebp+var_1C] +
jnz loc_1014EB7  +
mov al [ebp+var_15] +
jmp loc_1015129  +
push 3  +
pop eax  +
mov [ebp+SrcStr] ax +
jmp loc_1014EB7  +
***
mov eax [ebp+arg_0] +
jmp loc_1014C51  +
***
call sub_1014B02  +
jmp loc_1014AAA  +
***
mov eax [ebp+0Ch] +
cmp [ebp-10h] eax +
jnb loc_10132E2  +
jmp loc_1021406  +
***
cmp [esi+18h] edx +
jnz loc_1007D6A  +
cmp eax edx +
jz loc_1021476  +
lea ecx [edi+14h] +
mov eax [ecx] +
mov ebx [eax-0Ch] +
push edx  +
push 2Ah  +
call sub_1012F38  +
dec ebx  +
cmp eax ebx +
jz loc_10214C2  +
push edi  +
push esi  +
call sub_10147CB  +
jmp loc_1007D6C  +
cmp eax edx +
jnz loc_10153C8  +
jmp loc_1021476  +
***
push 1  +
lea eax [ebp+arg_8] +
push eax  +
push [ebp+arg_4]  +
lea eax [ebp+var_8] +
push eax  +
lea ecx [ebp+var_4] +
call sub_1002EA5  +
mov ecx eax +
call sub_1002EFC  +
push dword ptr [eax]  +
mov edx [esi] +
mov ecx esi +
call dword ptr [edx]  +
jmp loc_1002DD5  +
***
push 1  +
lea eax [ebp+var_4] +
push eax  +
lea ecx [ebp+arg_4] +
call sub_1002EFC  +
push dword ptr [eax]  +
mov ecx esi +
call sub_1015451  +
jmp loc_1008579  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 24h +
push esi  +
and [ebp+var_4] 0 +
push edi  +
mov edi [ebp+arg_0] +
lea eax [ebp+var_4] +
push eax  +
push 2  +
mov esi ecx +
pop ecx  +
mov eax edi +
mul  ecx +
push edx  +
push eax  +
call sub_10085F8  +
test eax eax +
jl loc_101DE18  +
push [ebp+var_4]  +
call ds:malloc  +
pop ecx  +
mov [esi+4] eax +
test eax eax +
jz loc_101DE38  +
mov [esi+8] edi +
pop edi  +
pop esi  +
leave   +
retn 4  +
***
push [ebp+var_14]  +
mov ecx [ebp+var_84] +
call sub_1013B18  +
mov [ebp+var_5C] eax +
mov eax [ebp+var_5C] +
mov eax [eax] +
mov [ebp+var_60] eax +
push [ebp+var_60]  +
push 1  +
push [ebp+var_14]  +
mov ecx [ebp+var_84] +
call sub_1013B18  +
mov ecx eax +
call sub_1013383  +
jmp loc_1013968  +
***
xor edi edi +
inc edi  +
jmp loc_10134E6  +
mov eax [ebx+18h] +
lea eax [eax+esi*8] +
mov ecx [eax] +
cmp ecx [ebp+arg_4] +
jnz loc_1015587  +
push dword ptr [eax+4]  +
mov ecx [ebp+arg_0] +
call sub_101352D  +
dec esi  +
js loc_101350E  +
jmp loc_10154DC  +
***
push 6  +
pop eax  +
jmp loc_10135C3  +
mov ebx dword ptr [ebp+SrcStr] +
jmp loc_101357D  +
***
mov edx [ebp+arg_4] +
cmp [eax] edx +
jnz loc_101339E  +
jmp loc_10133C8  +
lea eax [edi+5] +
jmp loc_101553A  +
mov edi [esi+1Ch] +
add eax 0FFFFFFFEh +
cmp eax edi +
jl loc_1015564  +
mov ebx [esi+18h] +
test edi edi +
jnz loc_1015521  +
push 2  +
pop eax  +
mov [esi+1Ch] eax +
shl eax 3 +
push eax  +
call off_104B7F4  +
mov ecx edi +
shl ecx 3 +
push ecx  +
push ebx  +
push eax  +
mov [esi+18h] eax +
call memcpy  +
add esp 0Ch +
push ebx  +
call off_104B7F0  +
mov ebx [ebp+arg_0] +
mov eax [esi+20h] +
mov ecx [esi+1Ch] +
mov edx [ebp+arg_4] +
add eax 0FFFFFFFEh +
cmp eax ecx +
jge loc_1022144  +
mov ecx [esi+18h] +
mov [ecx+eax*8] ebx +
mov [ecx+eax*8+4] edx +
jmp loc_10133C4  +
***
cmp ecx 1 +
jnz loc_10154F8  +
jmp loc_1022154  +
cmp [ebp+arg_4] 6 +
jnz loc_10154ED  +
jmp loc_10154F8  +
***
mov edx esi +
jmp loc_10130FC  +
***
dec eax  +
jz loc_101DD50  +
sub eax 5 +
jnz loc_101DD24  +
push edi  +
add esi 10h +
push 3Ah  +
mov ecx esi +
call sub_1003D62  +
push eax  +
push edi  +
push [ebp+arg_0]  +
mov ecx esi +
call sub_10034B1  +
mov eax [ebp+arg_0] +
jmp loc_10146C1  +
***
xor eax eax +
inc eax  +
jmp loc_101468A  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+8] +
push edi  +
lea eax [esi+4] +
push eax  +
call ds:InterlockedDecrement  +
mov edi eax +
test edi edi +
jz loc_1015653  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_100237B  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_100238A  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_1002399  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_10023A8  +
mov eax [esi] +
push esi  +
call dword ptr [eax+8]  +
jmp loc_10023B7  +
***
test esi esi +
jz loc_1015603  +
mov eax [esi] +
push 1  +
mov ecx esi +
call dword ptr [eax+18h]  +
jmp loc_1015603  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_101568D  +
test byte ptr [ebp+8] 1 +
jz loc_1015681  +
push esi  +
call off_104B7F0  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_100162C +
mov dword ptr [esi+4] 0C0000001h +
mov ecx dword_104A064 +
mov eax [ecx] +
call dword ptr [eax+8]  +
mov ecx esi +
pop esi  +
nop   +
nop   +
nop   +
nop   +
nop   +
mov dword ptr [ecx] offset off_1008820 +
mov ecx [ecx+0Ch] +
test ecx ecx +
jz locret_10156C5  +
mov eax [ecx] +
push ecx  +
call dword ptr [eax+8]  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
xor ebx ebx +
push esi  +
push edi  +
cmp [ebp+arg_8] ebx +
jz loc_1015796  +
cmp [ebp+arg_10] ebx +
jz loc_1015796  +
cmp [ebp+arg_C] ebx +
jz loc_1015796  +
mov esi [ebp+arg_4] +
xor edi edi +
cmp esi ebx +
jz loc_101571A  +
push 0Ch  +
xor ecx ecx +
pop edx  +
mov eax esi +
mul  edx +
seto cl  +
neg ecx  +
or ecx eax +
push ecx  +
call off_104B7F4  +
mov edi eax +
cmp edi ebx +
jz loc_1021360  +
test esi esi +
jbe loc_1015766  +
mov eax [ebp+arg_8] +
mov ecx edi +
mov edx [eax] +
test edx 0FFB30000h +
jnz loc_1021373  +
movzx edx dx +
test edx edx +
jz loc_101573D  +
cmp edx 1 +
jnz loc_101578C  +
mov edx [eax] +
mov [ecx] edx +
cmp dword ptr [eax+4] 1 +
jnz loc_101574F  +
or edx 800000h +
mov [ecx] edx +
mov edx [eax+0Ch] +
mov [ecx+4] edx +
mov edx [eax+8] +
mov [ecx+8] edx +
inc ebx  +
add eax 14h +
add ecx 0Ch +
cmp ebx esi +
jb loc_1015723  +
push [ebp+arg_10]  +
mov eax [ebp+arg_0] +
push [ebp+arg_C]  +
mov eax [eax+0Ch] +
mov ecx [eax] +
push edi  +
push esi  +
push eax  +
call dword ptr [ecx+10h]  +
push edi  +
mov esi eax +
call off_104B7F0  +
mov eax esi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 14h  +
cmp edx 2 +
jz loc_101573D  +
jmp loc_102136A  +
mov eax 80004003h +
jmp loc_1015785  +
***
call sub_1001862  +
mov esi ecx +
mov [ebp-2Ch] esi +
cmp dword ptr [esi+28h] 0 +
jnz loc_101595B  +
lea ebx [esi+10h] +
push ebx  +
push offset stru_1001EB4  +
push 15h  +
push 0  +
push offset rclsid  +
call ds:CoCreateInstance  +
and dword ptr [ebp-20h] 0 +
mov edi eax +
and dword ptr [ebp-4] 0 +
test edi edi +
jl loc_1015938  +
mov ebx [ebx] +
mov eax [ebx] +
lea ecx [ebp-20h] +
push ecx  +
push ebx  +
call dword ptr [eax+1Ch]  +
mov edi eax +
test edi edi +
jl loc_1015938  +
mov eax [ebp-20h] +
mov ecx [eax] +
lea ebx [esi+14h] +
push ebx  +
push offset dword_101560C  +
push eax  +
call dword ptr [ecx]  +
mov edi eax +
test edi edi +
jl loc_1015938  +
and dword ptr [ebp-1Ch] 0 +
push offset aWindows  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 2 +
call sub_100883D  +
mov ebx [ebx] +
mov eax [ebx] +
lea ecx [ebp-1Ch] +
push ecx  +
push dword ptr [ebp-28h]  +
mov byte ptr [ebp-4] 3 +
push ebx  +
call dword ptr [eax+20h]  +
mov edi eax +
cmp edi 1 +
jz loc_101E840  +
test edi edi +
jl loc_1015875  +
mov eax [ebp-1Ch] +
mov ecx [eax] +
lea edx [esi+18h] +
push edx  +
push offset dword_100887C  +
push eax  +
call dword ptr [ecx]  +
mov edi eax +
and dword ptr [ebp-18h] 0 +
mov byte ptr [ebp-4] 4 +
test edi edi +
jl loc_101590D  +
mov eax [esi+18h] +
mov ecx [eax] +
lea edx [ebp-18h] +
push edx  +
push eax  +
call dword ptr [ecx+20h]  +
mov edi eax +
test edi edi +
jl loc_101590D  +
mov eax [ebp-18h] +
mov ecx [eax] +
lea ebx [esi+1Ch] +
push ebx  +
push offset dword_100886C  +
push eax  +
call dword ptr [ecx]  +
mov edi eax +
test edi edi +
jl loc_101590D  +
push dword ptr [esi+24h]  +
lea ecx [ebp-24h] +
call sub_100883D  +
and dword ptr [ebp-14h] 0 +
mov eax [ebx] +
mov ecx [eax] +
lea edx [ebp-14h] +
push edx  +
push dword ptr [ebp-24h]  +
mov byte ptr [ebp-4] 6 +
push eax  +
call dword ptr [ecx+20h]  +
mov edi eax +
cmp edi 1 +
jz loc_101E84A  +
test edi edi +
jl loc_10158F3  +
mov eax [ebp-14h] +
mov ecx [eax] +
lea edx [esi+20h] +
push edx  +
push offset dword_100888C  +
push eax  +
call dword ptr [ecx]  +
mov edi eax +
mov eax [ebp-14h] +
mov byte ptr [ebp-4] 5 +
test eax eax +
jz loc_1015904  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
push dword ptr [ebp-24h]  +
call ds:SysFreeString  +
mov eax [ebp-18h] +
mov byte ptr [ebp-4] 3 +
test eax eax +
jz loc_101591E  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
push dword ptr [ebp-28h]  +
call ds:SysFreeString  +
mov eax [ebp-1Ch] +
mov byte ptr [ebp-4] 1 +
test eax eax +
jz loc_1015938  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [esi+2Ch] edi +
mov dword ptr [esi+28h] 1 +
test edi edi +
jl loc_101E86B  +
mov eax [ebp-20h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
test eax eax +
jz loc_101595B  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [esi+2Ch] +
call sub_10015C0  +
retn   +
***
call sub_1001862  +
mov esi [ebp+8] +
xor edi edi +
cmp esi edi +
jz loc_101E7F0  +
push 10h  +
mov [esi] edi +
mov dword ptr [ebp-14h] 8007000Eh +
mov [ebp-4] edi +
call off_104B7F4  +
cmp eax edi +
jz loc_10159B6  +
push edi  +
mov ecx eax +
call sub_10159BF  +
cmp eax edi +
jz loc_10159A9  +
mov [ebp-14h] edi +
mov [esi] eax +
mov eax [ebp-14h] +
call sub_10015C0  +
retn 4  +
xor eax eax +
jmp loc_10159A2  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_10159E5  +
mov dword ptr [esi] offset off_100162C +
mov ecx dword_104A064 +
mov eax [ecx] +
call dword ptr [eax+4]  +
mov eax esi +
pop esi  +
retn 4  +
***
mov eax ecx +
and dword ptr [eax+4] 0 +
mov dword ptr [eax] offset off_1008820 +
and dword ptr [eax+0Ch] 0 +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+10h]  +
mov ecx [ebp+8] +
push dword ptr [ebp+0Ch]  +
call sub_1015A17  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push offset off_1015A34  +
push ecx  +
call sub_10017D5  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_C] 0 +
push edi  +
jz loc_101E8EE  +
push esi  +
mov esi [ebp+arg_0] +
mov ecx esi +
call sub_10157B5  +
mov edi eax +
test edi edi +
jl loc_1015AC6  +
lea eax [ebp+arg_0] +
push eax  +
call sub_1015969  +
mov edi eax +
test edi edi +
jl loc_1015AC6  +
push [ebp+arg_18]  +
push [ebp+arg_14]  +
push [ebp+arg_10]  +
push [ebp+arg_4]  +
push offset aWindows  +
push dword ptr [esi+24h]  +
mov esi [ebp+arg_0] +
mov ecx esi +
call sub_1015ADD  +
mov edi eax +
test edi edi +
jl loc_1015ACE  +
push [ebp+arg_C]  +
mov eax [esi] +
push [ebp+arg_8]  +
push esi  +
call dword ptr [eax]  +
mov edi eax +
test edi edi +
jl loc_1015ACE  +
pop esi  +
mov eax edi +
pop edi  +
pop ebp  +
retn 1Ch  +
test esi esi +
jnz loc_101E8F8  +
jmp loc_1015AC6  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
push esi  +
jz loc_1015B2A  +
cmp [ebp+arg_4] 0 +
jz loc_1015B2A  +
lea esi [ecx+0Ch] +
push esi  +
push offset stru_10157A0  +
push 1  +
push 0  +
push offset stru_1015B34  +
call ds:CoCreateInstance  +
test eax eax +
jl loc_1015B25  +
push [ebp+arg_14]  +
mov eax [esi] +
push [ebp+arg_10]  +
mov ecx [eax] +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_0]  +
push [ebp+arg_4]  +
push eax  +
call dword ptr [ecx+0Ch]  +
pop esi  +
pop ebp  +
retn 18h  +
mov eax 80004003h +
jmp loc_1015B25  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax+1Ch] +
push [ebp+arg_4]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+0B8h]  +
pop ebp  +
retn 8  +
***
xor eax eax +
inc eax  +
jmp loc_1015BC8  +
push 3  +
jmp loc_1015BC7  +
push 7  +
jmp loc_1015BC7  +
push 4  +
jmp loc_1015BC7  +
push 5  +
jmp loc_1015BC7  +
push 2  +
jmp loc_1015BC7  +
push 6  +
jmp loc_1015BC7  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
cmp eax 63h +
jg loc_1015BD0  +
jz loc_1015BCC  +
cmp eax 8 +
ja loc_1015BD0  +
jmp ds:off_1015B81[eax*4]  +
push 8  +
pop eax  +
pop ebp  +
retn 4  +
push 9  +
jmp loc_1015BC7  +
xor eax eax +
jmp loc_1015BC8  +
***
push 3  +
pop eax  +
jmp loc_1015C25  +
push 2  +
jmp loc_1015BD6  +
push 6  +
jmp loc_1015BD6  +
push 4  +
jmp loc_1015BD6  +
push 5  +
jmp loc_1015BD6  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
cmp eax 7 +
ja loc_1015C29  +
jmp ds:off_1015BE9[eax*4]  +
xor eax eax +
inc eax  +
pop ebp  +
retn 4  +
xor eax eax +
jmp loc_1015C25  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
cmp [ebp+arg_4] 0 +
push ebx  +
push esi  +
push edi  +
jz loc_101E8A0  +
mov ebx [ebp+arg_8] +
test ebx ebx +
jz loc_101E8A0  +
mov esi [ebp+arg_0] +
mov ecx esi +
call sub_10157B5  +
mov edi eax +
test edi edi +
jl loc_1015D29  +
mov eax [esi+20h] +
and [ebp+arg_8] 0 +
mov ecx [eax] +
lea edx [ebp+arg_8] +
push edx  +
push eax  +
call dword ptr [ecx+20h]  +
mov edi eax +
mov eax [ebp+arg_8] +
test edi edi +
jl loc_1015D1F  +
mov ecx [eax] +
lea edx [ebp+arg_0] +
push edx  +
push eax  +
call dword ptr [ecx+40h]  +
mov edi eax +
test edi edi +
jl loc_1015D1C  +
push [ebp+arg_0]  +
call sub_1015C0E  +
mov ecx [ebp+arg_4] +
mov [ecx] eax +
cmp eax 1 +
jnz loc_101E8AA  +
push [ebp+arg_8]  +
lea ecx [ebp+var_4] +
call sub_1015D37  +
mov eax [ebp+var_4] +
test eax eax +
jz loc_101E8C1  +
mov ecx [eax] +
lea edx [ebp+arg_0] +
push edx  +
push eax  +
call dword ptr [ecx+84h]  +
mov edi eax +
test edi edi +
jl loc_1015D0F  +
cmp [ebp+arg_0] 40D93h +
jz loc_101E8D8  +
cmp [ebp+arg_0] 40D92h +
jz loc_101E8E3  +
mov eax [esi+10h] +
mov ecx [eax] +
lea edx [ebp+arg_4] +
push edx  +
push eax  +
call dword ptr [ecx+0B8h]  +
mov edi eax +
test edi edi +
jl loc_1015D0F  +
push [ebp+arg_4]  +
call sub_1015BAA  +
mov [ebx] eax +
mov eax [ebp+var_4] +
test eax eax +
jz loc_1015D1C  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+arg_8] +
test eax eax +
jz loc_1015D29  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
mov esi ecx +
and dword ptr [esi] 0 +
test eax eax +
jz loc_1015D54  +
mov ecx [eax] +
push esi  +
push offset dword_1015D5C  +
push eax  +
call dword ptr [ecx]  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 4  +
lea eax [ebp+Data] +
push eax  +
push 4  +
push 0  +
push [ebp+lpValueName]  +
push dword ptr [ecx]  +
call ds:RegSetValueExW  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
mov ecx [ebp+arg_0] +
call sub_1005511  +
xor ecx ecx +
test al al +
setnz cl  +
mov al cl +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
push esi  +
push edi  +
mov esi ecx +
cmp eax 0FFFFFFFFh +
jnz loc_101F8B6  +
mov edi [ebp+arg_0] +
test edi edi +
jnz loc_101F8BE  +
mov eax [esi] +
test eax eax +
jnz loc_1016DB7  +
and dword ptr [esi+4] 0 +
and dword ptr [esi+8] 0 +
mov al 1 +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
call sub_10015E0  +
mov esi ecx +
mov [ebp-10h] esi +
mov edi [esi+4] +
mov [ebp-14h] edi +
cmp edi [esi+8] +
jb loc_1015E22  +
lea eax [edi+1] +
push eax  +
call sub_1015E4C  +
test al al +
jz loc_101FF95  +
mov eax [esi] +
lea ecx [eax+edi*4] +
mov [ebp-18h] ecx +
and dword ptr [ebp-4] 0 +
test ecx ecx +
jz loc_1015E3A  +
push dword ptr [ebp+8]  +
call sub_10035A2  +
inc dword ptr [esi+4]  +
mov eax edi +
call sub_10015C0  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi ecx +
mov edx [esi+8] +
push edi  +
mov edi [ebp+arg_0] +
cmp edi edx +
jbe loc_1015E84  +
cmp dword ptr [esi] 0 +
mov eax [esi+0Ch] +
jnz loc_1015E8D  +
cmp eax edi +
ja loc_101F350  +
push 4  +
push edi  +
call ds:calloc  +
pop ecx  +
pop ecx  +
mov [esi] eax +
test eax eax +
jz loc_1015ED9  +
mov [esi+8] edi +
mov al 1 +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
test eax eax +
jnz loc_1015E9F  +
mov eax [esi+4] +
shr eax 3 +
cmp eax 4 +
jnb loc_1015EDD  +
push 4  +
pop eax  +
add eax edx +
mov ebx eax +
cmp edi eax +
jnb loc_101F35E  +
push 4  +
push ebx  +
call ds:calloc  +
mov edi eax +
pop ecx  +
pop ecx  +
test edi edi +
jz loc_1015ED9  +
push dword ptr [esi+4]  +
push dword ptr [esi]  +
push edi  +
call sub_1015EF1  +
push dword ptr [esi]  +
call ds:__imp_free  +
add esp 10h +
mov [esi] edi +
mov [esi+8] ebx +
jmp loc_1015E84  +
xor al al +
jmp loc_1015E86  +
mov ecx 400h +
cmp eax ecx +
ja loc_101F357  +
jmp loc_1015E9F  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_8] +
shl eax 2 +
push eax  +
push [ebp+arg_4]  +
push eax  +
push [ebp+arg_0]  +
call sub_1003CAD  +
add esp 10h +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
test edx edx +
jz loc_101F118  +
mov eax [edx+34h] +
push esi  +
mov esi [ecx+14h] +
cmp eax esi +
jnz loc_1019FD0  +
mov eax [edx+3Ch] +
cmp eax esi +
jz loc_1015F45  +
cmp edx [eax+34h] +
jnz loc_1015F45  +
mov edx eax +
mov eax [eax+3Ch] +
jmp loc_1015F35  +
cmp eax esi +
jz loc_101A3A6  +
pop esi  +
pop ebp  +
retn 4  +
***
push dword ptr [esi+4]  +
push eax  +
call sub_1015F6E  +
push dword ptr [esi]  +
call ds:__imp_free  +
pop ecx  +
jmp loc_100445F  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
mov edi [ebp+arg_4] +
test edi edi +
jbe loc_1015F8F  +
push esi  +
mov esi [ebp+arg_0] +
push 0  +
mov ecx esi +
call sub_1003BBE  +
add esi 4 +
dec edi  +
jnz loc_1015F7F  +
pop esi  +
pop edi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
mov edi [ebp+arg_4] +
test edi edi +
jbe loc_1015FBA  +
push esi  +
mov esi [ebp+arg_0] +
push 0  +
mov ecx esi +
call sub_1015FC4  +
add esi 20h +
dec edi  +
jnz loc_1015FAA  +
pop esi  +
pop edi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1003B4C  +
test [ebp+arg_0] 1 +
jnz loc_101FA7B  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
cmp dword_104A3AC 0 +
push ebx  +
push esi  +
push edi  +
mov edi 20000h +
mov esi 80000000h +
jz loc_1016027  +
mov al byte_104A3B0 +
cmp al 4 +
jb loc_1016091  +
mov eax dword_104A398 +
mov ecx dword_104A39C +
and eax edi +
and ecx esi +
or eax ecx +
jnz loc_102124D  +
mov ecx [ebp+arg_0] +
call sub_1003689  +
mov ebx eax +
test ebx ebx +
jl loc_102128C  +
push offset CriticalSection  +
lea ecx [ebp+lpCriticalSection] +
call sub_1002BED  +
mov ecx [ebp+arg_0] +
call sub_10160A6  +
cmp dword_104A3AC 0 +
mov ebx eax +
jz loc_1016079  +
mov al byte_104A3B0 +
cmp al 4 +
jb loc_101609B  +
mov eax dword_104A398 +
mov ecx dword_104A39C +
and eax edi +
and ecx esi +
or eax ecx +
jnz loc_1021301  +
cmp [ebp+lpCriticalSection] 0 +
jz loc_1016088  +
push [ebp+lpCriticalSection]  +
call ds:LeaveCriticalSection  +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
leave   +
retn 4  +
test al al +
jz loc_1016010  +
jmp loc_1016027  +
test al al +
jz loc_1016062  +
jmp loc_1016079  +
***
call sub_1003649  +
push 0Ah  +
pop edi  +
mov esi ecx +
xor ebx ebx +
push offset word_100348C  +
lea ecx [ebp-0A8h] +
mov [ebp-0C4h] esi +
mov [ebp-0ACh] ebx +
mov [ebp-0BCh] edi +
call sub_1009D0D  +
mov ecx esi +
mov [ebp-4] ebx +
call sub_101749A  +
test al al +
jz loc_101615E  +
cmp [esi+59h] bl +
jnz loc_101615E  +
mov [ebp-0B0h] ebx +
lea eax [ebp-0B0h] +
push eax  +
mov byte ptr [ebp-4] 1 +
call sub_1017614  +
cmp eax ebx +
mov [ebp-0ACh] eax +
jl loc_101613F  +
mov byte ptr [esi+59h] 1 +
cmp [esi+58h] bl +
jz loc_101613F  +
push ebx  +
push 1  +
push offset dword_104A124  +
call ds:__imp_InterlockedCompareExchange  +
test eax eax +
jnz loc_101613F  +
push dword ptr [ebp-0B0h]  +
mov ecx esi +
call sub_101962A  +
mov [ebp-0ACh] eax +
mov eax [ebp-0B0h] +
mov [ebp-4] bl +
cmp eax ebx +
jz loc_1016152  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
cmp [ebp-0ACh] ebx +
jl loc_102120D  +
mov ecx esi +
call sub_1017558  +
test al al +
jnz loc_1021078  +
mov ecx esi +
call sub_101759E  +
test al al +
jnz loc_1021084  +
mov ecx esi +
call sub_101749A  +
test al al +
jz loc_1017327  +
push 1  +
push 7ADh  +
call sub_10198CB  +
push 1  +
push 0B85h  +
call sub_1002C0D  +
mov ecx esi +
call sub_101833E  +
cmp eax ebx +
mov [ebp-0ACh] eax +
jl loc_1021090  +
mov ecx esi +
mov byte ptr [ebp-4] 2 +
call sub_1018C9A  +
mov [ebp-4] ebx +
cmp [ebp-0ACh] ebx +
mov dword ptr [ebp-0BCh] 14h +
jl loc_101691E  +
push offset aSearchCrawlsco  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
call CreateTransaction  +
mov edi eax +
cmp edi 0FFFFFFFFh +
jz loc_10210BC  +
cmp [ebp-0ACh] ebx +
jl loc_1016283  +
push edi  +
push ecx  +
mov [ebp-0B0h] esp +
mov ecx esp +
push offset dword_104A2A8  +
call sub_1003F3F  +
mov ecx [esi+40h] +
call sub_1018AD8  +
cmp eax ebx +
mov [ebp-0ACh] eax +
jl loc_1016283  +
push edi  +
push ecx  +
mov [ebp-0B0h] esp +
mov ecx esp +
push offset dword_104A2AC  +
call sub_1003F3F  +
mov ecx [esi+3Ch] +
call sub_1018AD8  +
cmp eax ebx +
mov [ebp-0ACh] eax +
jl loc_1016283  +
push edi  +
push ecx  +
mov [ebp-0B0h] esp +
mov ecx esp +
push offset dword_104A2B0  +
call sub_1003F3F  +
mov ecx [esi+38h] +
call sub_1018DB2  +
cmp eax ebx +
mov [ebp-0ACh] eax +
jl loc_1016283  +
push edi  +
call CommitTransaction  +
test eax eax +
jz loc_10210CC  +
cmp edi 0FFFFFFFFh +
jz loc_101628F  +
push edi  +
call ds:CloseHandle  +
cmp [ebp-0ACh] ebx +
jl loc_101691E  +
push 2  +
push 0B85h  +
call sub_1002C0D  +
cmp [ebp-0ACh] ebx +
jl loc_102120D  +
mov ecx esi +
mov dword ptr [ebp-0BCh] 1Eh +
call sub_101A013  +
mov [ebp-0E4h] ebx +
mov [ebp-0E0h] ebx +
mov [ebp-0DCh] ebx +
mov [ebp-0D8h] ebx +
lea eax [ebp-0E4h] +
push eax  +
mov ecx esi +
mov byte ptr [ebp-4] 4 +
call sub_1016791  +
lea edi [esi+18h] +
push edi  +
lea eax [ebp-0E4h] +
push eax  +
mov ecx esi +
call sub_1019B68  +
mov [ebp-0B8h] ebx +
cmp [esi+1Ch] ebx +
jbe loc_10163FC  +
mov [ebp-0B4h] ebx +
cmp [ebp-0E0h] ebx +
jbe loc_10163D5  +
push dword ptr [ebp-0B4h]  +
lea ecx [ebp-0E4h] +
call sub_10068B5  +
push eax  +
lea ecx [ebp-0B0h] +
call sub_1003F3F  +
push 1  +
lea eax [ebp-0B0h] +
push eax  +
mov ecx esi +
mov byte ptr [ebp-4] 5 +
call sub_1007AE2  +
push dword ptr [ebp-0B8h]  +
mov ecx edi +
call sub_101668A  +
add eax 14h +
push eax  +
lea ecx [ebp-0C0h] +
call sub_1003F3F  +
push 1  +
lea eax [ebp-0C0h] +
push eax  +
mov ecx esi +
mov byte ptr [ebp-4] 6 +
call sub_1007AE2  +
lea eax [ebp-0C0h] +
push eax  +
lea eax [ebp-0B0h] +
push eax  +
call sub_1019A7F  +
mov ecx [ebp-0C0h] +
add ecx 0FFFFFFF0h +
test eax eax +
jnz loc_1019946  +
call sub_1002990  +
mov ecx [ebp-0B0h] +
add ecx 0FFFFFFF0h +
mov byte ptr [ebp-4] 4 +
call sub_1002990  +
inc dword ptr [ebp-0B4h]  +
mov eax [ebp-0B4h] +
cmp eax [ebp-0E0h] +
jb loc_1016321  +
mov eax [ebp-0E0h] +
cmp [ebp-0B4h] eax +
jz loc_10168F3  +
inc dword ptr [ebp-0B8h]  +
mov eax [ebp-0B8h] +
cmp eax [esi+1Ch] +
jb loc_101630F  +
cmp [ebp-0ACh] ebx +
jl loc_1017319  +
mov ecx [esi+44h] +
push dword ptr [ecx]  +
mov dword ptr [ebp-0BCh] 28h +
call sub_1007A64  +
mov [ebp-0B0h] eax +
cmp eax ebx +
jz loc_1016448  +
mov ecx [esi+44h] +
lea eax [ebp-0B0h] +
push eax  +
call sub_10079B5  +
add eax 20h +
push eax  +
mov ecx esi +
call sub_10170AF  +
cmp [ebp-0B0h] ebx +
jnz loc_1016426  +
mov [ebp-0D4h] ebx +
mov [ebp-0D0h] ebx +
mov [ebp-0CCh] ebx +
mov [ebp-0C8h] ebx +
lea eax [ebp-0D4h] +
push eax  +
mov ecx esi +
mov byte ptr [ebp-4] 7 +
call sub_1016791  +
lea eax [esi+10h] +
push eax  +
lea eax [esi+14h] +
push eax  +
lea ecx [ebp-10Ch] +
call sub_1007919  +
xor edi edi +
mov byte ptr [ebp-4] 8 +
cmp [ebp-0D0h] ebx +
jbe loc_101652A  +
push 1  +
push edi  +
lea ecx [ebp-0D4h] +
call sub_10068B5  +
push eax  +
mov ecx esi +
call sub_1007AE2  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push edi  +
lea ecx [ebp-0D4h] +
call sub_10068B5  +
push eax  +
lea ecx [ebp-154h] +
call sub_10165E1  +
mov [ebp-0B0h] eax +
push edi  +
lea ecx [ebp-0D4h] +
mov byte ptr [ebp-4] 9 +
call sub_10068B5  +
push eax  +
lea ecx [ebp-12Ch] +
call sub_1007A16  +
push dword ptr [ebp-0B0h]  +
lea ecx [ebp-10Ch] +
push eax  +
mov byte ptr [ebp-4] 0Ah +
call sub_10056A3  +
lea ecx [ebp-12Ch] +
call sub_1003B4C  +
lea ecx [ebp-154h] +
mov byte ptr [ebp-4] 8 +
call sub_1004292  +
inc edi  +
cmp edi [ebp-0D0h] +
jb loc_1016497  +
mov [ebp-0B4h] ebx +
mov eax [ebp-0B4h] +
cmp eax [esi+2Ch] +
jnb loc_10172E6  +
lea ecx [esi+28h] +
push eax  +
call sub_10068B5  +
push ecx  +
mov ecx esp +
mov [ebp-0B0h] esp +
push eax  +
call sub_10069A9  +
lea ecx [ebp-10Ch] +
call sub_1016DD5  +
mov edi eax +
cmp edi ebx +
jz loc_1021120  +
cmp [edi+40h] ebx +
jnz loc_1016589  +
lea eax [edi+14h] +
push eax  +
mov ecx esi +
call sub_1016EA0  +
mov dword ptr [edi+40h] 1 +
mov [ebp-0ACh] eax +
cmp [ebp-0ACh] ebx +
jl loc_102119A  +
inc dword ptr [ebp-0B4h]  +
jmp loc_1016530  +
***
call sub_10015E0  +
mov esi ecx +
mov [ebp-10h] esi +
and dword ptr [ebp-4] 0 +
lea ecx [esi+4] +
mov dword ptr [esi] offset off_10042BC +
call sub_10033C0  +
lea ecx [esi+8] +
call sub_10033C0  +
push dword ptr [ebp+20h]  +
mov ecx esi +
push dword ptr [ebp+1Ch]  +
mov byte ptr [ebp-4] 2 +
push dword ptr [ebp+18h]  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call sub_1005968  +
mov eax esi +
call sub_10015C0  +
retn 1Ch  +
***
call sub_1015F13  +
mov esi eax +
test esi esi +
jz loc_101665D  +
push dword ptr [esi]  +
push dword ptr [ebp+8]  +
call sub_1016669  +
test al al +
jnz loc_101F2C7  +
mov eax ebx +
jmp loc_100714B  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call ds:__imp__wcsicmp  +
neg eax  +
pop ecx  +
sbb eax eax +
pop ecx  +
inc eax  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
cmp eax [ecx+4] +
jnb loc_101F0ED  +
shl eax 5 +
add eax [ecx] +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_8] +
shl eax 5 +
push eax  +
push [ebp+arg_4]  +
push eax  +
push [ebp+arg_0]  +
call sub_1003CAD  +
add esp 10h +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi ecx +
mov edx [esi+8] +
push edi  +
mov edi [ebp+arg_0] +
cmp edi edx +
jbe loc_1016731  +
cmp dword ptr [esi] 0 +
mov eax [esi+0Ch] +
jz loc_101673A  +
test eax eax +
jnz loc_10166FB  +
mov eax [esi+4] +
shr eax 3 +
cmp eax 4 +
jnb loc_101675C  +
push 4  +
pop eax  +
add eax edx +
mov ebx eax +
cmp edi eax +
jnb loc_101F31D  +
push 20h  +
push ebx  +
call ds:calloc  +
mov edi eax +
pop ecx  +
pop ecx  +
test edi edi +
jz loc_1016758  +
push dword ptr [esi+4]  +
push dword ptr [esi]  +
push edi  +
call sub_10166A9  +
push dword ptr [esi]  +
call ds:__imp_free  +
pop ecx  +
mov [esi] edi +
mov [esi+8] ebx +
mov al 1 +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
cmp eax edi +
ja loc_101F30F  +
push 20h  +
push edi  +
call ds:calloc  +
pop ecx  +
pop ecx  +
mov [esi] eax +
test eax eax +
jz loc_1016758  +
mov [esi+8] edi +
jmp loc_1016731  +
xor al al +
jmp loc_1016733  +
mov ecx 400h +
cmp eax ecx +
ja loc_101F316  +
jmp loc_10166FB  +
***
call sub_1001862  +
mov esi ecx +
xor ebx ebx +
mov [ebp-4] ebx +
call sub_1016D22  +
mov edi eax +
cmp edi ebx +
jl loc_10168E9  +
mov [ebp-14h] ebx +
lea eax [ebp-14h] +
push eax  +
push offset stru_1001EB4  +
push 15h  +
push ebx  +
push offset rclsid  +
call ds:CoCreateInstance  +
mov edi eax +
cmp edi ebx +
jl loc_10168D9  +
mov [ebp-18h] ebx +
mov eax [esi+10h] +
mov esi [esi+14h] +
push eax  +
push esi  +
lea eax [ebp-18h] +
push eax  +
push dword ptr [ebp-14h]  +
mov byte ptr [ebp-4] 2 +
call sub_1016C29  +
mov edi eax +
mov eax [ebp-18h] +
cmp edi 1 +
jz loc_1020386  +
cmp edi ebx +
jl loc_10168CB  +
mov [ebp-1Ch] ebx +
lea ecx [ebp-1Ch] +
push ecx  +
push eax  +
mov byte ptr [ebp-4] 3 +
call sub_1016BD1  +
mov edi eax +
cmp edi ebx +
jl loc_10168B7  +
lea eax [ebp-3Ch] +
push eax  +
call ds:VariantInit  +
mov esi ds:VariantClear +
mov byte ptr [ebp-4] 4 +
mov eax [ebp-1Ch] +
mov ecx [eax] +
lea edx [ebp-28h] +
push edx  +
lea edx [ebp-3Ch] +
push edx  +
push 1  +
push eax  +
call dword ptr [ecx+0Ch]  +
cmp eax ebx +
jnz loc_10168B1  +
cmp edi ebx +
jl loc_10168B1  +
mov [ebp-24h] ebx +
mov eax [ebp-34h] +
mov ecx [eax] +
lea edx [ebp-24h] +
push edx  +
push offset dword_101677C  +
push eax  +
mov byte ptr [ebp-4] 5 +
call dword ptr [ecx]  +
mov edi eax +
cmp edi ebx +
jnz loc_1016898  +
mov [ebp-20h] ebx +
mov eax [ebp-24h] +
mov ecx [eax] +
lea edx [ebp-20h] +
push edx  +
push eax  +
mov byte ptr [ebp-4] 6 +
call dword ptr [ecx+1Ch]  +
push dword ptr [ebp-20h]  +
mov ecx [ebp+8] +
call sub_1015DF5  +
push dword ptr [ebp-20h]  +
call ds:SysFreeString  +
lea eax [ebp-3Ch] +
push eax  +
call esi  +
mov eax [ebp-24h] +
mov byte ptr [ebp-4] 4 +
cmp eax ebx +
jz loc_1016837  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_1016837  +
lea eax [ebp-3Ch] +
push eax  +
call esi  +
mov eax [ebp-1Ch] +
mov byte ptr [ebp-4] 2 +
cmp eax ebx +
jz loc_10168C8  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-18h] +
mov byte ptr [ebp-4] 1 +
cmp eax ebx +
jz loc_10168D9  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-14h] +
mov [ebp-4] bl +
cmp eax ebx +
jz loc_10168E9  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax edi +
call sub_10015C0  +
retn 4  +
***
push dword ptr [ebp-0B8h]  +
mov ecx edi +
call sub_101668A  +
add eax 14h +
push eax  +
mov ecx esi +
call sub_101692A  +
cmp eax ebx +
mov [ebp-0ACh] eax +
jge loc_10163E7  +
jmp loc_10210DC  +
push 3  +
jmp loc_101629D  +
***
call sub_1002A3A  +
mov ebx [ebp+8] +
mov esi ecx +
push dword ptr [esi+14h]  +
lea ecx [ebp-1F8h] +
call sub_100883D  +
push dword ptr [esi+10h]  +
xor edi edi +
lea ecx [ebp-1F4h] +
mov [ebp-4] edi +
call sub_100883D  +
push ebx  +
lea ecx [ebp-1ECh] +
mov byte ptr [ebp-4] 1 +
call sub_1003F3F  +
mov ebx [ebp-1ECh] +
mov eax [ebx-0Ch] +
dec eax  +
push eax  +
lea ecx [ebp-1ECh] +
mov byte ptr [ebp-4] 2 +
call sub_1004428  +
movzx eax ax +
cmp ax 2Ah +
jz loc_101FEF1  +
cmp ax 5Ch +
jz loc_10169A6  +
cmp ax 2Fh +
jnz loc_101FF05  +
lea ecx [ebp-234h] +
call sub_1004F6D  +
mov ecx [esi+38h] +
lea eax [ebp-234h] +
push eax  +
lea eax [ebp-1ECh] +
push eax  +
mov byte ptr [ebp-4] 3 +
call sub_1019917  +
xor esi esi +
cmp eax edi +
jnz loc_101A44A  +
cmp [ebp-220h] edi +
jz loc_101FF20  +
push ebx  +
lea ecx [ebp-1F0h] +
call sub_100883D  +
push esi  +
push dword ptr [ebp-1F0h]  +
mov byte ptr [ebp-4] 7 +
push dword ptr [ebp-1F4h]  +
push dword ptr [ebp-1F8h]  +
call sub_1016A5E  +
mov [ebp-1ECh] eax +
cmp eax 80070005h +
jz loc_101FF2D  +
push dword ptr [ebp-1F0h]  +
mov esi ds:SysFreeString +
call esi  +
lea ecx [ebp-234h] +
call sub_1002A01  +
lea ecx [ebx-10h] +
call sub_1002990  +
push dword ptr [ebp-1F4h]  +
call esi  +
push dword ptr [ebp-1F8h]  +
call esi  +
mov eax [ebp-1ECh] +
call sub_1002A77  +
retn 4  +
***
call sub_10015E0  +
lea eax [ebp-14h] +
push eax  +
push dword ptr [ebp+0Ch]  +
xor ebx ebx +
push dword ptr [ebp+8]  +
mov [ebp-14h] ebx +
call sub_1009186  +
mov esi eax +
cmp esi ebx +
jnz loc_1016B91  +
mov eax [ebp-14h] +
lea edx [ebp-10h] +
push edx  +
mov [ebp-10h] ebx +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+34h]  +
mov esi eax +
cmp esi ebx +
jnz loc_1016B88  +
mov eax [ebp-10h] +
lea edx [ebp+8] +
push edx  +
push dword ptr [ebp+10h]  +
mov [ebp+8] ebx +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+28h]  +
mov esi eax +
cmp esi 80040D02h +
jz loc_102161B  +
cmp esi ebx +
jnz loc_1016B7F  +
mov eax [ebp+8] +
lea edx [ebp+0Ch] +
push edx  +
push offset dword_1016B9C  +
mov [ebp+0Ch] ebx +
mov ecx [eax] +
push eax  +
call dword ptr [ecx]  +
mov esi eax +
cmp esi ebx +
jnz loc_1016B76  +
mov eax [ebp+0Ch] +
mov ecx [eax] +
push 0FFFFFFFFh  +
push eax  +
call dword ptr [ecx+34h]  +
mov esi eax +
cmp esi ebx +
jnz loc_1016B6D  +
push dword ptr [ebp+10h]  +
lea ecx [ebp+10h] +
call sub_10035A2  +
push 0Fh  +
lea eax [ebp-18h] +
push eax  +
lea ecx [ebp+10h] +
mov [ebp-4] ebx +
call sub_10079D6  +
push eax  +
lea ecx [ebp+10h] +
mov byte ptr [ebp-4] 1 +
call sub_1003FBC  +
mov ecx [ebp-18h] +
add ecx 0FFFFFFF0h +
mov [ebp-4] bl +
call sub_1002990  +
push offset aOutlookexpress  +
push dword ptr [ebp+10h]  +
call ds:__imp__wcsicmp  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_101A519  +
cmp [ebp+14h] ebx +
jnz loc_101A519  +
mov eax [ebp+0Ch] +
mov ecx [eax] +
push ebx  +
push eax  +
call dword ptr [ecx+3Ch]  +
mov esi eax +
mov ecx [ebp+10h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
add ecx 0FFFFFFF0h +
call sub_1002990  +
mov eax [ebp+0Ch] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+8] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-10h] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-14h] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax esi +
call sub_10015C0  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
call sub_1016D22  +
mov eax [ebp+arg_0] +
mov ecx [eax] +
lea edx [ebp+var_4] +
push edx  +
push eax  +
call dword ptr [ecx+24h]  +
mov esi eax +
test esi esi +
jnz loc_1016C0B  +
push [ebp+arg_4]  +
mov eax [ebp+var_4] +
mov ecx [eax] +
push offset dword_1016C14  +
push eax  +
call dword ptr [ecx]  +
mov esi eax +
mov eax [ebp+var_4] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax esi +
pop esi  +
leave   +
retn 8  +
***
call sub_10015E0  +
call sub_1016D22  +
mov eax [ebp+8] +
mov ecx [eax] +
lea edx [ebp-18h] +
push edx  +
push eax  +
call dword ptr [ecx+1Ch]  +
mov esi eax +
test esi esi +
jnz loc_1016D13  +
push dword ptr [ebp+10h]  +
lea ecx [ebp-1Ch] +
call sub_100883D  +
mov eax [ebp-18h] +
mov ecx [eax] +
and [ebp-4] esi +
lea edx [ebp-14h] +
push edx  +
push dword ptr [ebp-1Ch]  +
push eax  +
call dword ptr [ecx+20h]  +
mov edi ds:SysFreeString +
mov esi eax +
test esi esi +
jnz loc_1016D05  +
mov eax [ebp-14h] +
mov ecx [eax] +
lea edx [ebp-10h] +
push edx  +
push eax  +
call dword ptr [ecx+20h]  +
mov esi eax +
test esi esi +
jnz loc_1016CFC  +
push dword ptr [ebp+14h]  +
lea ecx [ebp+14h] +
call sub_100883D  +
mov eax [ebp-10h] +
mov ecx [eax] +
lea edx [ebp+10h] +
push edx  +
push dword ptr [ebp+14h]  +
mov byte ptr [ebp-4] 1 +
push eax  +
call dword ptr [ecx+20h]  +
mov esi eax +
test esi esi +
jnz loc_1016CEA  +
mov eax [ebp+10h] +
mov ecx [eax] +
lea edx [ebp+8] +
push edx  +
push eax  +
call dword ptr [ecx+20h]  +
mov esi eax +
test esi esi +
jnz loc_1016CE1  +
mov eax [ebp+8] +
push dword ptr [ebp+0Ch]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+34h]  +
mov esi eax +
mov eax [ebp+8] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+10h] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-10h] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
push dword ptr [ebp+14h]  +
mov byte ptr [ebp-4] 0 +
call edi  +
mov eax [ebp-14h] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-18h] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
push dword ptr [ebp-1Ch]  +
call edi  +
mov eax esi +
call sub_10015C0  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20Ch +
mov eax dword_104A044 +
xor eax ebp +
mov [ebp+var_4] eax +
cmp byte_104A040 0 +
jz loc_1019962  +
xor eax eax +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_1002A8B  +
leave   +
retn   +
***
mov ebx esi +
jmp loc_1005707  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
push esi  +
mov esi ecx +
jz loc_1016D91  +
mov ecx [ebp+arg_4] +
test ecx ecx +
jl loc_1016D91  +
mov eax [esi] +
cmp ecx [eax-0Ch] +
jg loc_1016D91  +
push [ebp+arg_0]  +
lea eax [eax+ecx*2] +
push eax  +
call ds:wcsstr  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_101A655  +
or eax 0FFFFFFFFh +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_0]  +
mov ecx [ebp+arg_4] +
call sub_100424B  +
neg eax  +
sbb eax eax +
inc eax  +
pop ebp  +
retn 8  +
***
push dword ptr [esi+4]  +
push eax  +
call sub_1015F6E  +
push dword ptr [esi]  +
call ds:__imp_free  +
and [esi] edi +
pop ecx  +
jmp loc_1015DE0  +
***
call sub_10015E0  +
mov esi ecx +
and dword ptr [ebp-4] 0 +
lea eax [ebp+8] +
push eax  +
lea ecx [ebp-2Ch] +
call sub_1007A16  +
push eax  +
mov ecx esi +
call sub_10056D6  +
lea ecx [ebp-2Ch] +
mov esi eax +
call sub_1003B4C  +
mov ecx [ebp+8] +
add ecx 0FFFFFFF0h +
call sub_1002990  +
mov eax esi +
call sub_10015C0  +
retn 4  +
***
call sub_1016E5C  +
mov esi eax +
test esi esi +
jz loc_1016E50  +
push esi  +
push dword ptr [ebp+8]  +
call sub_1015D94  +
test al al +
jnz loc_101F281  +
mov eax ebx +
jmp loc_1005716  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
test edx edx +
jz loc_101F0F8  +
mov eax [edx+4Ch] +
push esi  +
mov esi [ecx+14h] +
cmp eax esi +
jnz loc_101F0FF  +
mov eax [edx+54h] +
cmp eax esi +
jz loc_1016E8E  +
cmp edx [eax+4Ch] +
jnz loc_1016E8E  +
mov edx eax +
mov eax [eax+54h] +
jmp loc_1016E7E  +
cmp eax esi +
jz loc_101F10A  +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_10015E0  +
mov esi ecx +
call sub_1016D22  +
push dword ptr [ebp+8]  +
lea ecx [ebp+8] +
call sub_1003F3F  +
xor edi edi +
push offset aFile  +
lea ecx [ebp-14h] +
mov [ebp-4] edi +
call sub_10035A2  +
mov eax [ebp-14h] +
push dword ptr [eax-0Ch]  +
lea eax [ebp-28h] +
push eax  +
lea ecx [ebp+8] +
mov byte ptr [ebp-4] 1 +
call sub_10079D6  +
push dword ptr [ebp-14h]  +
mov ecx eax +
call sub_100370F  +
mov ecx [ebp-28h] +
mov ebx eax +
neg ebx  +
sbb bl bl +
add ecx 0FFFFFFF0h +
inc bl  +
call sub_1002990  +
test bl bl +
jnz loc_101FD5A  +
mov [ebp-10h] edi +
lea eax [ebp-10h] +
push eax  +
push offset stru_1001EB4  +
push 15h  +
push edi  +
push offset rclsid  +
call ds:CoCreateInstance  +
mov ebx eax +
cmp ebx edi +
jl loc_101FD90  +
mov [ebp-20h] edi +
mov eax [esi+10h] +
mov esi [esi+14h] +
push eax  +
push esi  +
lea eax [ebp-20h] +
push eax  +
push dword ptr [ebp-10h]  +
mov byte ptr [ebp-4] 4 +
call sub_1016C29  +
mov esi eax +
mov eax [ebp-20h] +
cmp esi 1 +
jz loc_101FDBE  +
cmp esi edi +
jl loc_101FDD0  +
mov [ebp-18h] edi +
lea ecx [ebp-18h] +
push ecx  +
push eax  +
mov byte ptr [ebp-4] 5 +
call sub_1016BD1  +
mov esi eax +
cmp esi edi +
jl loc_101FDF8  +
lea eax [ebp-3Ch] +
push eax  +
call ds:VariantInit  +
mov eax [ebp-18h] +
mov ecx [eax] +
lea edx [ebp-2Ch] +
push edx  +
lea edx [ebp-3Ch] +
push edx  +
push 1  +
push eax  +
mov byte ptr [ebp-4] 6 +
call dword ptr [ecx+0Ch]  +
mov esi ds:VariantClear +
test eax eax +
jnz loc_101FE0E  +
mov ebx ds:SysFreeString +
mov [ebp-1Ch] edi +
mov eax [ebp-34h] +
mov ecx [eax] +
lea edx [ebp-1Ch] +
push edx  +
push offset dword_101677C  +
push eax  +
mov byte ptr [ebp-4] 7 +
call dword ptr [ecx]  +
mov [ebp-28h] eax +
lea eax [ebp-3Ch] +
push eax  +
call esi  +
cmp [ebp-28h] edi +
jl loc_101703D  +
mov [ebp-24h] edi +
mov eax [ebp-1Ch] +
mov ecx [eax] +
lea edx [ebp-24h] +
push edx  +
push eax  +
mov byte ptr [ebp-4] 8 +
call dword ptr [ecx+1Ch]  +
lea eax [ebp+8] +
push eax  +
push dword ptr [ebp-24h]  +
call sub_1016D9E  +
test al al +
jnz loc_101702C  +
push dword ptr [ebp-24h]  +
call ebx  +
mov eax [ebp-1Ch] +
mov byte ptr [ebp-4] 6 +
cmp eax edi +
jz loc_1017010  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-18h] +
mov ecx [eax] +
lea edx [ebp-2Ch] +
push edx  +
lea edx [ebp-3Ch] +
push edx  +
push 1  +
push eax  +
call dword ptr [ecx+0Ch]  +
test eax eax +
jz loc_1016FB0  +
jmp loc_101FE0E  +
mov eax [ebp-1Ch] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+48h]  +
push dword ptr [ebp-24h]  +
mov [ebp-28h] eax +
call ebx  +
mov eax [ebp-1Ch] +
mov byte ptr [ebp-4] 6 +
cmp eax edi +
jz loc_101704E  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
lea eax [ebp-3Ch] +
push eax  +
call esi  +
mov eax [ebp-18h] +
mov byte ptr [ebp-4] 4 +
cmp eax edi +
jz loc_1017065  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-20h] +
mov byte ptr [ebp-4] 3 +
cmp eax edi +
jz loc_1017076  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-10h] +
mov byte ptr [ebp-4] 1 +
cmp eax edi +
jz loc_1017087  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov esi [ebp-28h] +
mov ecx [ebp-14h] +
add ecx 0FFFFFFF0h +
call sub_1002990  +
mov ecx [ebp+8] +
add ecx 0FFFFFFF0h +
call sub_1002990  +
mov eax esi +
call sub_10015C0  +
retn 4  +
***
call sub_1001862  +
mov esi ecx +
push dword ptr [esi+14h]  +
and dword ptr [ebp-4] 0 +
lea ecx [ebp-20h] +
call sub_100883D  +
push dword ptr [esi+10h]  +
lea ecx [ebp-1Ch] +
mov byte ptr [ebp-4] 1 +
call sub_100883D  +
mov esi [ebp+8] +
lea eax [esi+4] +
push eax  +
lea ecx [ebp+8] +
mov byte ptr [ebp-4] 2 +
call sub_1003F3F  +
mov ebx [ebp+8] +
push ebx  +
lea ecx [ebp-18h] +
mov byte ptr [ebp-4] 3 +
call sub_100883D  +
push dword ptr [esi+8]  +
lea ecx [ebp-14h] +
mov byte ptr [ebp-4] 4 +
call sub_100883D  +
mov eax [esi+1Ch] +
mov ecx [esi+18h] +
mov edx [esi+14h] +
mov edi [esi+10h] +
mov esi [esi+0Ch] +
neg eax  +
sbb eax eax +
neg ecx  +
sbb ecx ecx +
push eax  +
push ecx  +
neg edx  +
sbb edx edx +
push edx  +
neg edi  +
sbb edi edi +
push edi  +
neg esi  +
sbb esi esi +
push esi  +
push dword ptr [ebp-18h]  +
mov byte ptr [ebp-4] 5 +
push dword ptr [ebp-14h]  +
push dword ptr [ebp-1Ch]  +
push dword ptr [ebp-20h]  +
call sub_101717F  +
push dword ptr [ebp-14h]  +
mov esi ds:SysFreeString +
mov [ebp+8] eax +
call esi  +
push dword ptr [ebp-18h]  +
call esi  +
lea ecx [ebx-10h] +
call sub_1002990  +
push dword ptr [ebp-1Ch]  +
call esi  +
push dword ptr [ebp-20h]  +
call esi  +
mov eax [ebp+8] +
call sub_10015C0  +
retn 4  +
***
call sub_10015E0  +
xor ebx ebx +
mov [ebp-10h] ebx +
lea eax [ebp-10h] +
push eax  +
push dword ptr [ebp+0Ch]  +
mov [ebp-4] ebx +
push dword ptr [ebp+8]  +
call sub_100913D  +
mov esi eax +
cmp esi ebx +
jnz loc_10172BD  +
mov [ebp+0Ch] ebx +
mov eax [ebp-10h] +
mov ecx [eax] +
lea edx [ebp+0Ch] +
push edx  +
push dword ptr [ebp+10h]  +
mov byte ptr [ebp-4] 1 +
push eax  +
call dword ptr [ecx+30h]  +
mov esi eax +
cmp esi 1 +
jz loc_101F3A4  +
cmp esi ebx +
jnz loc_10172AD  +
mov [ebp-14h] ebx +
mov eax [ebp+0Ch] +
mov ecx [eax] +
lea edx [ebp-14h] +
push edx  +
push eax  +
mov byte ptr [ebp-4] 2 +
call dword ptr [ecx+34h]  +
mov esi eax +
cmp esi ebx +
jnz loc_101729C  +
mov [ebp+8] ebx +
mov eax [ebp-14h] +
mov ecx [eax] +
lea edx [ebp+8] +
push edx  +
push dword ptr [ebp+18h]  +
mov byte ptr [ebp-4] 3 +
push dword ptr [ebp+14h]  +
push eax  +
call dword ptr [ecx+24h]  +
mov esi eax +
cmp esi ebx +
jnz loc_10172D8  +
mov [ebp+10h] ebx +
mov eax [ebp+8] +
mov ecx [eax] +
lea edx [ebp+10h] +
push edx  +
push offset dword_101676C  +
push eax  +
mov byte ptr [ebp-4] 4 +
call dword ptr [ecx]  +
mov esi eax +
cmp esi ebx +
jnz loc_101727A  +
mov eax [ebp+10h] +
push dword ptr [ebp+1Ch]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+34h]  +
mov esi eax +
cmp esi ebx +
jnz loc_101727A  +
mov eax [ebp+10h] +
push dword ptr [ebp+20h]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+2Ch]  +
mov esi eax +
cmp esi ebx +
jnz loc_101727A  +
mov eax [ebp+10h] +
push dword ptr [ebp+24h]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+68h]  +
mov esi eax +
cmp esi ebx +
jnz loc_101727A  +
mov eax [ebp+10h] +
push dword ptr [ebp+28h]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+78h]  +
mov esi eax +
mov eax [ebp+10h] +
mov byte ptr [ebp-4] 3 +
cmp eax ebx +
jz loc_101728B  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+8] +
mov byte ptr [ebp-4] 2 +
cmp eax ebx +
jz loc_101729C  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-14h] +
mov byte ptr [ebp-4] 1 +
cmp eax ebx +
jz loc_10172AD  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+0Ch] +
mov [ebp-4] bl +
cmp eax ebx +
jz loc_10172BD  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-10h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
cmp eax ebx +
jz loc_10172CE  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax esi +
call sub_10015C0  +
retn 24h  +
cmp esi 80040D02h +
jz loc_101F3BD  +
jmp loc_101728B  +
***
push 0FFFFFFFFh  +
push ebx  +
lea ecx [esi+28h] +
call sub_1015DB6  +
mov ecx esi +
mov byte ptr [ebp-4] 0Dh +
call sub_1017352  +
mov dword ptr [ebp-4] 8 +
lea ecx [ebp-10Ch] +
call sub_10044F7  +
lea ecx [ebp-0D4h] +
call sub_1004450  +
lea ecx [ebp-0E4h] +
mov [ebp-4] bl +
call sub_1004450  +
cmp [ebp-0ACh] ebx +
jl loc_102120D  +
mov [esi+5Ah] bl +
lea ecx [ebp-0A8h] +
call sub_10084DE  +
mov eax [ebp-0ACh] +
call sub_1002FBC  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi+4Ch] +
test eax eax +
jz loc_1017363  +
mov eax [eax] +
mov [esi+48h] eax +
inc dword ptr [esi+48h]  +
call sub_1017380  +
test eax eax +
jl loc_101FB4A  +
mov ecx esi +
pop esi  +
jmp sub_1006149  +
***
call sub_10015E0  +
mov esi ecx +
push offset dword_104A104  +
lea ecx [ebp-14h] +
call sub_1003060  +
push dword ptr [esi+14h]  +
lea eax [ebp-14h] +
push off_104B804  +
xor edi edi +
push eax  +
mov [ebp-4] edi +
call sub_10073A5  +
add esp 0Ch +
push 2001Fh  +
push dword ptr [ebp-14h]  +
lea ecx [ebp-20h] +
push 80000002h  +
mov [ebp-20h] edi +
mov [ebp-1Ch] edi +
mov [ebp-18h] edi +
call sub_100484B  +
mov ebx 0FFFFh +
mov edi 80070000h +
test eax eax +
jg loc_101FA30  +
mov [ebp-10h] eax +
test eax eax +
jl loc_1017408  +
push dword ptr [esi+48h]  +
lea ecx [ebp-20h] +
push off_104B800  +
call sub_1015D71  +
test eax eax +
jg loc_101FA39  +
mov [ebp-10h] eax +
lea ecx [ebp-20h] +
call sub_1004887  +
lea ecx [ebp-20h] +
call sub_1004887  +
mov ecx [ebp-14h] +
add ecx 0FFFFFFF0h +
call sub_1002990  +
mov eax [ebp-10h] +
call sub_10015C0  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
push ebx  +
push esi  +
push edi  +
test eax eax +
jz loc_101E9D8  +
mov ecx [ebp+arg_0] +
mov ebx [ecx+2Ch] +
mov [eax] ebx +
cmp dword_104A3AC 0 +
jz loc_1017486  +
mov al byte_104A3B0 +
cmp al 4 +
jb loc_101748F  +
mov edx dword_104A398 +
mov esi dword_104A39C +
mov ecx 20000h +
mov eax 80000000h +
and edx ecx +
and esi eax +
or edx esi +
jnz loc_101EA4C  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
test al al +
jz loc_1017464  +
jmp loc_1017486  +
***
xor eax eax +
cmp [ecx+5Ah] al +
jz loc_10174A5  +
xor eax eax +
inc eax  +
retn   +
cmp [ecx+5Bh] al +
jnz loc_10174A1  +
jmp locret_10174A4  +
***
xor eax eax +
jmp loc_1007A91  +
***
mov edi edi +
push esi  +
push edi  +
mov edi ecx +
lea esi [edi+6Ch] +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+8]  +
test al al +
jnz loc_10174D2  +
lea esi [edi+0A0h] +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+14h]  +
pop edi  +
lea eax [esi+24h] +
pop esi  +
retn   +
***
push 0  +
push [ebp+dwDisposition]  +
push eax  +
lea eax [ebp+phkResult] +
push eax  +
push [ebp+lpSecurityAttributes]  +
push [ebp+samDesired]  +
push [ebp+dwOptions]  +
push [ebp+lpClass]  +
push 0  +
push [ebp+lpSubKey]  +
push [ebp+hKey]  +
call ds:RegCreateKeyTransactedW  +
jmp loc_10075F7  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
cmp [ebp+arg_8] 0FFFFFFFFh +
push edi  +
mov edi ecx +
lea eax [ebp+var_4] +
jz loc_101F173  +
push 0  +
push [ebp+arg_8]  +
push eax  +
push [ebp+samDesired]  +
push 0  +
push [ebp+lpSubKey]  +
push [ebp+hKey]  +
call ds:RegOpenKeyTransactedW  +
test eax eax +
jnz loc_101754E  +
mov ecx edi +
call sub_1004887  +
mov ecx [ebp+var_4] +
mov [edi] ecx +
pop edi  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push ebx  +
push 20019h  +
push dword_104A2A0  +
xor eax eax +
push 80000002h  +
lea ecx [ebp+var_C] +
mov [ebp+var_C] eax +
mov [ebp+var_8] eax +
mov [ebp+var_4] eax +
call sub_100484B  +
mov ebx eax +
neg ebx  +
sbb bl bl +
lea ecx [ebp+var_C] +
inc bl  +
call sub_1004887  +
mov al bl +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
call sub_1007AB2  +
mov esi eax +
test esi esi +
jz loc_10175FE  +
push esi  +
push dword ptr [ebp+8]  +
call sub_1015D94  +
test al al +
jnz loc_101F293  +
mov eax esi +
***
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov esi [esi+34h] +
jmp loc_100713C  +
***
call sub_10015E0  +
mov [ebp-34h] ecx +
xor edi edi +
mov [ebp-2Ch] edi +
lea eax [ebp-2Ch] +
push eax  +
push offset stru_1001EB4  +
push 15h  +
push edi  +
push offset rclsid  +
mov [ebp-4] edi +
call ds:CoCreateInstance  +
mov esi eax +
mov [ebp-28h] edi +
cmp esi edi +
mov byte ptr [ebp-4] 1 +
jl loc_101765E  +
mov eax [ebp-2Ch] +
mov ecx [eax] +
lea edx [ebp-28h] +
push edx  +
push eax  +
call dword ptr [ecx+1Ch]  +
mov esi eax +
mov [ebp-24h] edi +
cmp esi edi +
mov byte ptr [ebp-4] 2 +
jl loc_101767C  +
mov eax [ebp-28h] +
mov ecx [eax] +
lea edx [ebp-24h] +
push edx  +
push offset dword_101560C  +
push eax  +
call dword ptr [ecx]  +
mov esi eax +
mov [ebp-20h] edi +
cmp esi edi +
mov edi ds:SysFreeString +
mov byte ptr [ebp-4] 3 +
jl loc_10176BE  +
mov esi [ebp-24h] +
push offset aWindows  +
lea ecx [ebp-30h] +
call sub_100883D  +
mov eax [eax] +
mov ecx [esi] +
lea edx [ebp-20h] +
push edx  +
push eax  +
push esi  +
mov byte ptr [ebp-4] 4 +
call dword ptr [ecx+20h]  +
push dword ptr [ebp-30h]  +
mov esi eax +
call edi  +
cmp esi 1 +
jz loc_101F370  +
and dword ptr [ebp-1Ch] 0 +
mov byte ptr [ebp-4] 5 +
test esi esi +
jl loc_10176DD  +
mov eax [ebp-20h] +
mov ecx [eax] +
lea edx [ebp-1Ch] +
push edx  +
push offset dword_100887C  +
push eax  +
call dword ptr [ecx]  +
mov esi eax +
and dword ptr [ebp-18h] 0 +
mov byte ptr [ebp-4] 6 +
test esi esi +
jl loc_10176F8  +
mov eax [ebp-1Ch] +
mov ecx [eax] +
lea edx [ebp-18h] +
push edx  +
push eax  +
call dword ptr [ecx+20h]  +
mov esi eax +
and dword ptr [ebp-14h] 0 +
mov byte ptr [ebp-4] 7 +
test esi esi +
jl loc_1017717  +
mov eax [ebp-18h] +
mov ecx [eax] +
lea edx [ebp-14h] +
push edx  +
push offset dword_100886C  +
push eax  +
call dword ptr [ecx]  +
mov esi eax +
and dword ptr [ebp-10h] 0 +
mov byte ptr [ebp-4] 8 +
test esi esi +
jl loc_1017765  +
mov eax [ebp-34h] +
push dword ptr [eax+10h]  +
mov esi [ebp-14h] +
lea ecx [ebp-34h] +
call sub_100883D  +
mov eax [eax] +
mov ecx [esi] +
lea edx [ebp-10h] +
push edx  +
push eax  +
push esi  +
mov byte ptr [ebp-4] 9 +
call dword ptr [ecx+20h]  +
push dword ptr [ebp-34h]  +
mov esi eax +
call edi  +
cmp esi 1 +
jz loc_101F37A  +
test esi esi +
jl loc_1017765  +
mov eax [ebp-10h] +
mov ecx [ebp+8] +
and dword ptr [ebp-10h] 0 +
mov [ecx] eax +
mov eax [ebp-10h] +
mov byte ptr [ebp-4] 7 +
test eax eax +
jnz loc_101F384  +
mov eax [ebp-14h] +
mov byte ptr [ebp-4] 6 +
test eax eax +
jz loc_1017785  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-18h] +
mov byte ptr [ebp-4] 5 +
test eax eax +
jz loc_1017796  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-1Ch] +
mov byte ptr [ebp-4] 3 +
test eax eax +
jz loc_10177A7  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-20h] +
mov byte ptr [ebp-4] 2 +
test eax eax +
jz loc_10177B8  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-24h] +
mov byte ptr [ebp-4] 1 +
test eax eax +
jz loc_10177C9  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-28h] +
mov byte ptr [ebp-4] 0 +
test eax eax +
jz loc_10177DA  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-2Ch] +
or dword ptr [ebp-4] 0FFFFFFFFh +
test eax eax +
jz loc_10177EB  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax esi +
call sub_10015C0  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push 1  +
push [ebp+arg_10]  +
mov esi ecx +
push [ebp+arg_8]  +
lea ecx [esi+6Ch] +
push [ebp+arg_0]  +
mov eax [ecx] +
call dword ptr [eax+20h]  +
mov eax [ebp+arg_C] +
mov ecx [eax] +
cmp dword ptr [ecx-0Ch] 0 +
jg loc_1017823  +
mov eax [ebp+arg_8] +
push 0  +
push [ebp+arg_10]  +
lea ecx [esi+0A0h] +
mov edx [ecx] +
push eax  +
push [ebp+arg_4]  +
call dword ptr [edx+20h]  +
pop esi  +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
push dword ptr [eax]  +
mov ecx [ebp+arg_0] +
call sub_100424B  +
neg eax  +
sbb eax eax +
inc eax  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov esi ecx +
test edi edi +
jnz loc_101F472  +
xor al al +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
lea ecx [esi+8] +
mov dword ptr [esi] offset off_1009CF0 +
call sub_10033C0  +
lea ecx [esi+0Ch] +
call sub_10033C0  +
or dword ptr [esi+4] 0FFFFFFFFh +
mov byte ptr [esi+10h] 1 +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
xor eax eax +
cmp [ebp+arg_4] eax +
push esi  +
push edi  +
mov ebx ecx +
mov [ebp+var_4] eax +
jl loc_101F849  +
mov esi [ebp+arg_8] +
cmp esi eax +
jl loc_101F851  +
mov eax [ebx] +
mov edi [eax-0Ch] +
push esi  +
push [ebp+arg_4]  +
call sub_1007D79  +
cmp eax edi +
jg loc_101F858  +
mov edi [ebx] +
mov eax [edi-0Ch] +
cmp [ebp+arg_4] eax +
jg loc_101F865  +
cmp [ebp+arg_4] 0 +
jz loc_101F86C  +
mov ecx ebx +
call sub_1003768  +
mov ecx [ebp+arg_0] +
push eax  +
mov eax [ebp+arg_4] +
push esi  +
lea eax [edi+eax*2] +
push eax  +
call sub_1007CAC  +
mov eax [ebp+arg_0] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
push ecx  +
mov ecx [ebp+arg_0] +
call sub_10069A9  +
jmp loc_1007A08  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
lea ecx [ebp+var_20] +
call sub_1007A16  +
push eax  +
mov ecx esi +
call sub_10193F1  +
lea ecx [ebp+var_20] +
mov esi eax +
call sub_1003B4C  +
mov eax esi +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
push esi  +
push edi  +
mov esi ecx +
cmp eax 0FFFFFFFFh +
jnz loc_101FF38  +
mov edi [ebp+arg_0] +
test edi edi +
jnz loc_101FF40  +
mov eax [esi] +
test eax eax +
jz loc_10179A3  +
push dword ptr [esi+4]  +
push eax  +
call sub_1015F99  +
push dword ptr [esi]  +
call ds:__imp_free  +
and [esi] edi +
pop ecx  +
and dword ptr [esi+4] 0 +
and dword ptr [esi+8] 0 +
mov al 1 +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov eax [ebp-14h] +
call sub_10015C0  +
retn 4  +
***
mov esi [esi+34h] +
jmp loc_1005B08  +
mov [ebx+34h] eax +
jmp loc_1005B48  +
***
lea ecx [esi+4] +
call sub_10095BC  +
mov eax esi +
jmp loc_10070FB  +
***
call sub_1001862  +
mov edi [ebp+0Ch] +
xor ebx ebx +
and [ebp-14h] ebx +
test edi edi +
jz loc_1017A06  +
mov eax [edi] +
lea ecx [ebp-14h] +
push ecx  +
push edi  +
call dword ptr [eax+18h]  +
mov ebx eax +
cmp dword_104A3AC 0 +
jz loc_1017A3C  +
mov al byte_104A3B0 +
cmp al 4 +
jb loc_1017B11  +
mov eax dword_104A398 +
mov ecx dword_104A39C +
mov edx 20000h +
and eax edx +
and ecx 80000000h +
or eax ecx +
jnz loc_1020601  +
***
test ebx ebx +
jl loc_1017ACC  +
test edi edi +
jz loc_1020650  +
test ebx ebx +
jl loc_1017ACC  +
mov esi [ebp+8] +
mov ecx esi +
call sub_1003689  +
mov ebx eax +
test ebx ebx +
jl loc_1017ACC  +
mov eax [esi+10h] +
mov ecx [esi+14h] +
push 2  +
push dword ptr [ebp-14h]  +
push eax  +
push ecx  +
call sub_1008F8A  +
mov ebx eax +
test ebx ebx +
jl loc_1017ACC  +
mov eax [edi] +
lea ecx [ebp+0Ch] +
push ecx  +
push edi  +
call dword ptr [eax+28h]  +
mov ebx eax +
test ebx ebx +
jl loc_1017ACC  +
lea ecx [ebp-44h] +
call sub_1004F6D  +
mov eax [ebp+0Ch] +
push dword ptr [ebp-14h]  +
and dword ptr [ebp-4] 0 +
mov ecx [esi+38h] +
mov [ebp-30h] eax +
mov byte ptr [ebp-4] 1 +
call sub_1007106  +
test eax eax +
jnz loc_102065A  +
mov ecx [esi+38h] +
lea eax [ebp-44h] +
push eax  +
push dword ptr [ebp-14h]  +
call sub_10070D3  +
mov byte ptr [esi+5Ah] 1 +
lea ecx [ebp-44h] +
call sub_1002A01  +
push dword ptr [ebp-14h]  +
call ds:CoTaskMemFree  +
cmp dword_104A3AC 0 +
jz loc_1017B07  +
mov al byte_104A3B0 +
cmp al 4 +
jb loc_1017B24  +
mov eax dword_104A398 +
mov ecx dword_104A39C +
mov edx 20000h +
and eax edx +
and ecx 80000000h +
or eax ecx +
jnz loc_1020681  +
mov eax ebx +
call sub_10015C0  +
retn 8  +
***
test al al +
jz loc_1017A1C  +
jmp loc_1017A3C  +
***
test al al +
jz loc_1017AB1  +
jmp loc_1017AC4  +
test al al +
jz loc_1017AE7  +
jmp loc_1017B07  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+8] +
mov esi ecx +
mov eax [esi+4] +
push 1  +
push eax  +
push offset aUrl  +
mov ecx edi +
call sub_1019559  +
test eax eax +
jnz loc_1017B99  +
push dword ptr [esi+0Ch]  +
mov ecx edi +
push offset aInclude  +
call sub_1015D71  +
test eax eax +
jnz loc_1017B99  +
push dword ptr [esi+10h]  +
mov ecx edi +
push offset aSuppress  +
call sub_1015D71  +
test eax eax +
jnz loc_1017B99  +
push dword ptr [esi+18h]  +
mov ecx edi +
push offset aDefault  +
call sub_1015D71  +
test eax eax +
jnz loc_1017B99  +
push dword ptr [esi+24h]  +
mov ecx edi +
push offset aPolicy  +
call sub_1015D71  +
pop edi  +
pop esi  +
test eax eax +
jg loc_1021384  +
pop ebp  +
retn 8  +
***
mov eax [edi+4] +
lea ecx [eax+1] +
jmp loc_1007D53  +
***
push ebp  +
mov ebp esp +
sub esp 18h +
push ebx  +
push edi  +
mov edi ecx +
mov eax [edi+8] +
xor ebx ebx +
cmp [eax-0Ch] ebx +
jz loc_10217AB  +
push esi  +
mov esi 20019h +
push esi  +
push eax  +
push 80000002h  +
lea ecx [ebp-0Ch] +
mov [ebp-0Ch] ebx +
mov [ebp-8] ebx +
mov [ebp-4] ebx +
call sub_100484B  +
test eax eax +
jz loc_10217B2  +
lea ecx [ebp-0Ch] +
call sub_1004887  +
mov al bl +
pop esi  +
pop edi  +
pop ebx  +
leave   +
retn   +
***
push ebp  +
mov ebp esp +
sub esp 18h +
push ebx  +
push edi  +
mov edi ecx +
mov eax [edi+8] +
xor ebx ebx +
cmp [eax-0Ch] ebx +
jz loc_10217E8  +
push esi  +
mov esi 20019h +
push esi  +
push eax  +
push 80000001h  +
lea ecx [ebp-0Ch] +
mov [ebp-0Ch] ebx +
mov [ebp-8] ebx +
mov [ebp-4] ebx +
call sub_100484B  +
test eax eax +
jz loc_10217EF  +
lea ecx [ebp-0Ch] +
call sub_1004887  +
mov al bl +
pop esi  +
pop edi  +
pop ebx  +
leave   +
retn   +
***
mov eax offset __imp_CreateTransaction +
jmp loc_1018F76  +
***
mov eax offset __imp_SHGetKnownFolderPath +
jmp loc_1009D46  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov eax [ecx] +
push esi  +
mov esi [eax-0Ch] +
push edi  +
push esi  +
mov [ebp+var_10] ecx +
call sub_1003122  +
lea edx [eax+esi*2] +
mov ecx eax +
mov [ebp+var_C] edx +
cmp eax edx +
jnb loc_1017CF4  +
push ebx  +
mov di [eax] +
lea edx [eax+2] +
mov [ebp+var_8] edx +
cmp di [ebp+arg_0] +
jz loc_1017CEB  +
sub edx eax +
sar edx 1 +
and [ebp+var_4] 0 +
lea edi [ecx+edx*2] +
cmp ecx edi +
jz loc_1017CEB  +
cmp [ebp+var_4] edx +
jnb loc_1017CEB  +
mov bx [eax] +
inc eax  +
mov [ecx] bx +
inc eax  +
inc ecx  +
inc ecx  +
inc [ebp+var_4]  +
jmp loc_1017CD3  +
mov eax [ebp+var_8] +
cmp eax [ebp+var_C] +
jb loc_1017CB9  +
pop ebx  +
sub eax ecx +
sar eax 1 +
mov edi eax +
xor edx edx +
sub esi edi +
mov [ecx] dx +
mov ecx [ebp+var_10] +
push esi  +
call sub_10032EF  +
mov eax edi +
pop edi  +
pop esi  +
leave   +
retn 4  +
***
call sub_10015E0  +
mov esi ecx +
xor ebx ebx +
mov [ebp-14h] ebx +
mov [ebp-64h] ebx +
mov [ebp-60h] ebx +
mov [ebp-5Ch] ebx +
mov [ebp-58h] ebx +
mov [ebp-4] ebx +
mov [ebp-54h] ebx +
mov [ebp-50h] ebx +
mov [ebp-4Ch] ebx +
mov [ebp-48h] ebx +
mov [ebp-74h] ebx +
mov [ebp-70h] ebx +
mov [ebp-6Ch] ebx +
mov [ebp-68h] ebx +
mov dword ptr [ebp-40h] offset off_1002BE4 +
mov [ebp-3Ch] ebx +
push offset aCsmPolicyKeyMu  +
push ebx  +
push ebx  +
mov byte ptr [ebp-4] 3 +
call ds:CreateMutexW  +
push eax  +
lea ecx [ebp-40h] +
call sub_1002CC0  +
cmp [ebp-3Ch] ebx +
jz loc_10207AB  +
push 0FFFFFFFFh  +
push dword ptr [ebp-3Ch]  +
call ds:WaitForSingleObject  +
lea eax [ebp-64h] +
push eax  +
push offset aDefaultexclude  +
mov ecx esi +
call sub_1017F67  +
cmp eax ebx +
mov [ebp-20h] eax +
jl loc_1017DCD  +
lea eax [ebp-54h] +
push eax  +
push offset aDefaultindexed  +
mov ecx esi +
call sub_1017F67  +
cmp eax ebx +
mov [ebp-20h] eax +
jl loc_1017DCD  +
lea eax [ebp-74h] +
push eax  +
push offset aPreventindexin  +
mov ecx esi +
call sub_1017F67  +
mov [ebp-20h] eax +
push dword ptr [ebp-3Ch]  +
call ds:ReleaseMutex  +
cmp [ebp-20h] ebx +
jl loc_1017E7B  +
lea eax [esi+10h] +
push eax  +
lea eax [esi+14h] +
push eax  +
lea ecx [ebp-0DCh] +
call sub_1007919  +
mov edi [esi+3Ch] +
push dword ptr [edi]  +
mov ecx edi +
mov byte ptr [ebp-4] 4 +
call sub_1007A64  +
mov [ebp-18h] eax +
cmp eax ebx +
jz loc_1017E25  +
lea eax [ebp-18h] +
push eax  +
mov ecx edi +
call sub_10079B5  +
mov [ebp-34h] eax +
cmp [eax+44h] ebx +
jnz loc_10207B8  +
cmp [ebp-18h] ebx +
jnz loc_1017E09  +
mov [ebp-18h] ebx +
cmp [ebp-50h] ebx +
ja loc_10207E7  +
mov [ebp-18h] ebx +
cmp [ebp-60h] ebx +
ja loc_10209C7  +
mov [ebp-18h] ebx +
cmp [ebp-70h] ebx +
ja loc_1020ADE  +
cmp [ebp-0D8h] ebx +
ja loc_1020CB6  +
push dword ptr [ebp-0DCh]  +
lea ecx [ebp-0DCh] +
call sub_1007A64  +
mov edi eax +
cmp edi ebx +
jnz loc_1020CBF  +
lea ecx [ebp-0DCh] +
call sub_10044F7  +
push ebx  +
lea ecx [ebp-40h] +
mov dword ptr [ebp-40h] offset off_1002BE4 +
call sub_1002CC0  +
lea ecx [ebp-74h] +
call sub_1004450  +
lea ecx [ebp-54h] +
call sub_1004450  +
lea ecx [ebp-64h] +
call sub_1004450  +
mov eax [ebp-20h] +
call sub_10015C0  +
retn   +
***
call sub_1002A3A  +
mov eax [ebp+0Ch] +
mov esi [ebp+8] +
mov [ebp-0B4h] ecx +
lea ecx [ebp-1A0h] +
mov [ebp-0BCh] esi +
mov [ebp-0B8h] eax +
call sub_1019040  +
xor ebx ebx +
push esi  +
lea ecx [ebp-0ACh] +
mov [ebp-4] ebx +
call sub_10035A2  +
push offset word_100348C  +
lea ecx [ebp-0A8h] +
mov byte ptr [ebp-4] 1 +
call sub_10035A2  +
mov [ebp-0CCh] ebx +
mov [ebp-0C8h] ebx +
mov [ebp-0C4h] ebx +
mov [ebp-0C0h] ebx +
mov esi offset dword_104A104 +
push esi  +
lea ecx [ebp-0B0h] +
mov byte ptr [ebp-4] 3 +
call sub_1003060  +
lea eax [ebp-0CCh] +
push eax  +
lea eax [ebp-0B0h] +
push eax  +
lea eax [ebp-0ACh] +
push eax  +
lea eax [ebp-0A8h] +
push eax  +
push offset dword_104A2B4  +
lea ecx [ebp-1A0h] +
mov byte ptr [ebp-4] 4 +
call sub_10177FA  +
mov ecx [ebp-0B0h] +
add ecx 0FFFFFFF0h +
call sub_1002990  +
lea ecx [ebp-0CCh] +
call sub_1004450  +
mov ecx [ebp-0A8h] +
add ecx 0FFFFFFF0h +
call sub_1002990  +
mov ecx [ebp-0ACh] +
add ecx 0FFFFFFF0h +
mov [ebp-4] bl +
call sub_1002990  +
lea ecx [ebp-1A0h] +
call sub_10174B8  +
mov edi [eax+4] +
mov [ebp-0B0h] ebx +
cmp edi ebx +
ja loc_10204D9  +
push dword ptr [ebp-0B8h]  +
mov ecx [ebp-0B4h] +
push dword ptr [ebp-0BCh]  +
call sub_101852D  +
mov [ebp-0A8h] eax +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-1A0h] +
call sub_10180B8  +
mov eax [ebp-0A8h] +
call sub_1002A77  +
retn 8  +
***
cmp [ebp-0A8h] ebx +
jge loc_101806F  +
jmp loc_101808C  +
***
call sub_10015E0  +
mov esi ecx +
mov [ebp-10h] esi +
lea ecx [esi+0A0h] +
mov edi offset off_101909C +
mov dword ptr [ebp-4] 1 +
mov [ecx] edi +
call sub_1018143  +
lea ecx [esi+6Ch] +
mov byte ptr [ebp-4] 0 +
mov [ecx] edi +
call sub_1018143  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov ecx esi +
call sub_1018106  +
call sub_10015C0  +
retn   +
***
call sub_10015E0  +
mov esi ecx +
mov [ebp-10h] esi +
lea ecx [esi+38h] +
mov dword ptr [ebp-4] 1 +
call sub_1018143  +
lea ecx [esi+4] +
mov byte ptr [ebp-4] 0 +
call sub_1018143  +
mov dword ptr [esi] offset off_1009CE4 +
call sub_10015C0  +
retn   +
***
mov edi edi +
mov edi edi +
push esi  +
mov esi ecx +
mov ecx [esi+0Ch] +
sub ecx 10h +
mov dword ptr [esi] offset off_1009CF0 +
call sub_1002990  +
mov ecx [esi+8] +
sub ecx 10h +
pop esi  +
jmp sub_1002990  +
***
push 34h  +
mov eax offset byte_10453E5 +
call sub_10015E0  +
mov esi ecx +
push 0FFFFFFFFh  +
lea ecx [esi+24h] +
xor ebx ebx +
push ebx  +
mov [ebp-28h] ecx +
call sub_1015DB6  +
xor edi edi +
cmp [esi+18h] ebx +
ja loc_102181D  +
mov eax [esi+8] +
cmp [eax-0Ch] ebx +
jnz loc_10181CB  +
call sub_10015C0  +
retn   +
***
mov dword ptr [ebp-24h] offset unk_104A734 +
cmp [esi+10h] bl +
jz loc_102183C  +
mov [ebp-18h] ebx +
mov edi 20019h +
mov [ebp-40h] ebx +
mov [ebp-3Ch] ebx +
mov [ebp-38h] ebx +
mov eax [esi+8] +
mov ecx [ebp-18h] +
push edi  +
push eax  +
mov eax [ebp-24h] +
push dword ptr [eax+ecx*4]  +
lea ecx [ebp-40h] +
mov [ebp-4] ebx +
call sub_100484B  +
cmp eax ebx +
jz loc_1021848  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-40h] +
call sub_1004887  +
inc dword ptr [ebp-18h]  +
cmp dword ptr [ebp-18h] 2 +
jge loc_10181C5  +
jmp loc_10181E3  +
***
jnz loc_1018230  +
push dword ptr [ebp+8]  +
mov ecx ebx +
call sub_1015DF5  +
mov ecx [ebp+8] +
add ecx 0FFFFFFF0h +
mov byte ptr [ebp-4] 0 +
call sub_1002990  +
jmp loc_101826C  +
***
call sub_1001862  +
mov edi ecx +
mov ecx [edi+38h] +
push dword ptr [ecx]  +
and dword ptr [ebp-14h] 0 +
and dword ptr [ebp-4] 0 +
call sub_1008CCC  +
mov ebx [ebp+8] +
mov [ebp-18h] eax +
cmp dword ptr [ebp-18h] 0 +
jz loc_10179B3  +
mov ecx [edi+38h] +
lea eax [ebp-18h] +
push eax  +
call sub_1008EDD  +
push offset dword_104A104  +
lea ecx [ebp+8] +
mov esi eax +
call sub_1003060  +
mov esi [esi] +
lea eax [ebp+8] +
push eax  +
push esi  +
mov byte ptr [ebp-4] 1 +
call sub_1008BF4  +
mov [ebp-14h] eax +
test eax eax +
jl loc_1020368  +
lea eax [ebp+8] +
push eax  +
call sub_1008B8D  +
test eax eax +
jz loc_1018230  +
xor esi esi +
cmp esi [ebx+4] +
jnb loc_1018224  +
push esi  +
mov ecx ebx +
call sub_10068B5  +
push eax  +
lea eax [ebp+8] +
push eax  +
call sub_1017841  +
test al al +
jnz loc_10182E1  +
inc esi  +
jmp loc_10182BF  +
cmp esi [ebx+4] +
jmp loc_1018224  +
***
mov esi [esi+4Ch] +
jmp loc_101832B  +
mov eax ebx +
jmp loc_1017600  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
push edi  +
mov edi ecx +
mov esi [edi] +
xor ebx ebx +
cmp esi [edi+14h] +
jz loc_10182EE  +
test ebx ebx +
jnz sub_10175DF  +
push esi  +
push [ebp+arg_0]  +
mov [ebp+var_4] esi +
call sub_10055FE  +
test eax eax +
jz loc_1018335  +
jl loc_10182E9  +
mov esi [esi+50h] +
cmp esi [edi+14h] +
jnz loc_101830E  +
jmp loc_101F289  +
mov ebx esi +
jmp loc_101832B  +
***
call sub_1001862  +
mov esi ecx +
xor ebx ebx +
mov [ebp-18h] ebx +
mov [ebp-4] ebx +
call sub_1017D17  +
push 0FFFFFFFFh  +
push ebx  +
lea ecx [esi+18h] +
call sub_1017969  +
lea edi [esi+44h] +
mov ecx edi +
call sub_10044B5  +
push 20h  +
call off_104B7F4  +
mov ecx eax +
mov [ebp-14h] ecx +
mov byte ptr [ebp-4] 1 +
cmp ecx ebx +
jz loc_101840C  +
lea eax [esi+10h] +
push eax  +
lea eax [esi+14h] +
push eax  +
call sub_1007919  +
mov [ebp-4] bl +
cmp eax ebx +
jz loc_1020E00  +
mov ecx [esi+3Ch] +
mov [edi] eax +
push dword ptr [ecx]  +
call sub_1007A64  +
mov [ebp-14h] eax +
cmp [ebp-14h] ebx +
jz loc_1018805  +
mov ecx [esi+3Ch] +
lea eax [ebp-14h] +
push eax  +
call sub_10079B5  +
mov edi eax +
lea eax [edi+14h] +
push eax  +
call sub_1003AF2  +
test eax eax +
jz loc_10183E1  +
mov ecx [esi+44h] +
lea eax [edi+20h] +
push eax  +
push edi  +
call sub_10056A3  +
jmp loc_10183AE  +
mov ecx [esi+3Ch] +
push edi  +
call sub_10189B2  +
cmp eax ebx +
jnz loc_10183FE  +
cmp [edi+2Ch] ebx +
jz loc_10183AE  +
push edi  +
lea ecx [esi+18h] +
call sub_10187AF  +
jmp loc_10183D2  +
mov eax [eax+2Ch] +
cmp eax [edi+2Ch] +
jz loc_10183AE  +
cmp eax ebx +
jz loc_10183F3  +
jmp loc_10183D2  +
xor eax eax +
jmp loc_1018394  +
***
mov eax [edi] +
mov eax [eax-0Ch] +
lea ecx [esi+3] +
cmp eax ecx +
mov [ebp-14h] ecx +
jl loc_101851D  +
push 2  +
lea eax [esi+1] +
push eax  +
lea eax [ebp+8] +
push eax  +
mov ecx edi +
call sub_10178AE  +
and dword ptr [ebp-4] 0 +
push offset asc_10184C0  +
mov ecx eax +
call sub_100424B  +
mov ecx [ebp+8] +
mov ebx eax +
neg ebx  +
sbb bl bl +
or dword ptr [ebp-4] 0FFFFFFFFh +
add ecx 0FFFFFFF0h +
inc bl  +
call sub_1002990  +
test bl bl +
jz loc_101851D  +
push esi  +
mov ecx edi +
call sub_1004428  +
movzx eax ax +
push eax  +
call ds:towupper  +
movzx eax ax +
add eax 0FFFFFFBFh +
pop ecx  +
cmp ax 19h +
ja loc_101851D  +
and dword ptr [ebp-10h] 0 +
cmp dword ptr [ebp+0Ch] 0 +
jz loc_101851D  +
push dword ptr [ebp-14h]  +
lea eax [ebp-14h] +
push eax  +
mov ecx edi +
call sub_10079D6  +
mov ecx [ebp+0Ch] +
push eax  +
mov dword ptr [ebp-4] 1 +
call sub_1003FA0  +
mov ecx [ebp-14h] +
add ecx 0FFFFFFF0h +
call sub_1002990  +
jmp loc_101851D  +
***
call sub_10015E0  +
mov eax dword_104A2C8 +
mov esi [eax-0Ch] +
mov edi [ebp+8] +
push esi  +
lea eax [ebp+8] +
push eax  +
mov ecx edi +
mov dword ptr [ebp-10h] 1 +
call sub_10079D6  +
push dword_104A2C8  +
mov ecx eax +
call sub_100370F  +
mov ecx [ebp+8] +
mov ebx eax +
neg ebx  +
sbb bl bl +
add ecx 0FFFFFFF0h +
inc bl  +
call sub_1002990  +
test bl bl +
jnz loc_1018410  +
mov eax [ebp-10h] +
call sub_10015C0  +
retn 8  +
***
call sub_1003649  +
mov eax [ebp+8] +
mov [ebp-0E4h] eax +
mov eax [ebp+0Ch] +
mov [ebp-0B8h] ecx +
push offset dword_104A104  +
lea ecx [ebp-0B0h] +
mov [ebp-0E0h] eax +
call sub_1003060  +
xor esi esi +
mov [ebp-4] esi +
mov [ebp-0DCh] esi +
mov [ebp-0D8h] esi +
mov [ebp-0D4h] esi +
mov [ebp-0D0h] esi +
mov ecx [ebp-0B8h] +
lea eax [ebp-0DCh] +
push eax  +
mov byte ptr [ebp-4] 1 +
call sub_1018246  +
cmp eax esi +
mov [ebp-0ACh] eax +
jl loc_1018783  +
mov [ebp-0C0h] esi +
mov ebx [ebp-0C0h] +
cmp ebx [ebp-0D8h] +
jnb loc_1018783  +
mov [ebp-0F4h] esi +
mov [ebp-0F0h] esi +
mov [ebp-0ECh] esi +
mov [ebp-0E8h] esi +
push offset dword_104A2B4  +
lea ecx [ebp-0B0h] +
mov byte ptr [ebp-4] 3 +
call sub_1003FBC  +
push 5Ch  +
lea ecx [ebp-0B0h] +
call sub_1013089  +
push ebx  +
lea ecx [ebp-0DCh] +
call sub_10068B5  +
push eax  +
lea ecx [ebp-0BCh] +
call sub_1003F3F  +
push 7Bh  +
lea ecx [ebp-0BCh] +
mov byte ptr [ebp-4] 4 +
call sub_1017C94  +
push 7Dh  +
lea ecx [ebp-0BCh] +
call sub_1017C94  +
mov edi [ebp-0BCh] +
push dword ptr [edi-0Ch]  +
lea ecx [ebp-0B0h] +
push edi  +
call sub_1012E75  +
push ebx  +
lea ecx [ebp-0DCh] +
call sub_10068B5  +
push dword ptr [eax]  +
lea ecx [ebp-0F4h] +
call sub_1015DF5  +
lea ecx [edi-10h] +
call sub_1002990  +
mov dword ptr [ebp-4] 2 +
lea ecx [ebp-1DCh] +
xor edi edi +
call sub_1019040  +
cmp [ebp-0ACh] esi +
mov byte ptr [ebp-4] 6 +
jl loc_1018750  +
push dword ptr [ebp-0E4h]  +
lea ecx [ebp-0C4h] +
call sub_10035A2  +
push offset word_100348C  +
lea ecx [ebp-0C8h] +
mov byte ptr [ebp-4] 7 +
call sub_10035A2  +
mov [ebp-104h] esi +
mov [ebp-100h] esi +
mov [ebp-0FCh] esi +
mov [ebp-0F8h] esi +
push offset dword_104A104  +
lea ecx [ebp-0CCh] +
mov byte ptr [ebp-4] 9 +
call sub_1003060  +
lea eax [ebp-104h] +
push eax  +
lea eax [ebp-0CCh] +
push eax  +
lea eax [ebp-0C4h] +
push eax  +
lea eax [ebp-0C8h] +
push eax  +
lea eax [ebp-0B0h] +
push eax  +
lea ecx [ebp-1DCh] +
mov byte ptr [ebp-4] 0Ah +
call sub_10177FA  +
mov ecx [ebp-0CCh] +
add ecx 0FFFFFFF0h +
call sub_1002990  +
lea ecx [ebp-104h] +
call sub_1004450  +
mov ecx [ebp-0C8h] +
add ecx 0FFFFFFF0h +
call sub_1002990  +
mov ecx [ebp-0C4h] +
add ecx 0FFFFFFF0h +
mov byte ptr [ebp-4] 6 +
call sub_1002990  +
lea ecx [ebp-1DCh] +
call sub_10174B8  +
mov edi [eax+4] +
xor ebx ebx +
cmp edi esi +
ja sub_1020401  +
lea ecx [ebp-1DCh] +
mov byte ptr [ebp-4] 2 +
call sub_10180B8  +
lea ecx [ebp-0F4h] +
mov byte ptr [ebp-4] 1 +
call sub_1004450  +
inc dword ptr [ebp-0C0h]  +
jmp loc_10185AB  +
lea ecx [ebp-0DCh] +
call sub_1004450  +
mov ecx [ebp-0B0h] +
add ecx 0FFFFFFF0h +
call sub_1002990  +
mov eax [ebp-0ACh] +
call sub_1002FBC  +
retn 8  +
***
call sub_10015E0  +
mov esi ecx +
mov [ebp-10h] esi +
mov edi [esi+4] +
mov [ebp-14h] edi +
cmp edi [esi+8] +
jnb loc_10187F3  +
mov ecx edi +
shl ecx 5 +
add ecx [esi] +
mov [ebp-18h] ecx +
mov dword ptr [ebp-4] 0 +
jz loc_10187E6  +
push dword ptr [ebp+8]  +
call sub_1007732  +
inc dword ptr [esi+4]  +
mov eax edi +
call sub_10015C0  +
retn 4  +
lea eax [edi+1] +
push eax  +
call sub_10166CD  +
test al al +
jnz loc_10187CB  +
jmp loc_10205A0  +
***
mov ecx esi +
call sub_101881A  +
mov eax [ebp-18h] +
call sub_10015C0  +
retn   +
***
call sub_10015E0  +
mov ebx ecx +
mov [ebp-28h] ebx +
push 20h  +
call off_104B7F4  +
mov [ebp-24h] eax +
and dword ptr [ebp-4] 0 +
test eax eax +
jz loc_1018951  +
lea ecx [ebx+10h] +
push ecx  +
lea ecx [ebx+14h] +
push ecx  +
mov ecx eax +
call sub_1004A24  +
mov [ebp-18h] eax +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea esi [ebx+38h] +
mov ecx [esi] +
push dword ptr [ecx]  +
call sub_1008CCC  +
mov [ebp-14h] eax +
test eax eax +
jz loc_10188C7  +
mov ecx [esi] +
lea eax [ebp-14h] +
push eax  +
call sub_1008EDD  +
mov edi eax +
mov eax dword_104A2C8 +
push dword ptr [eax-0Ch]  +
lea eax [ebp-24h] +
push eax  +
mov ecx edi +
call sub_10079D6  +
push dword ptr [eax]  +
push dword_104A2C8  +
call ds:__imp__wcsicmp  +
pop ecx  +
pop ecx  +
mov ecx [ebp-24h] +
test eax eax +
setnz byte ptr [ebp-0Dh]  +
add ecx 0FFFFFFF0h +
call sub_1002990  +
cmp byte ptr [ebp-0Dh] 0 +
jz loc_10188C1  +
mov eax [edi] +
mov ecx [ebp-18h] +
add edi 4 +
push edi  +
push eax  +
call sub_10070D3  +
cmp dword ptr [ebp-14h] 0 +
jnz loc_101886B  +
and dword ptr [ebp-20h] 0 +
cmp dword ptr [ebx+1Ch] 0 +
jbe loc_1018922  +
mov ebx offset dword_104A104 +
push ebx  +
lea ecx [ebp-1Ch] +
call sub_1003060  +
mov ecx [ebp-28h] +
push dword ptr [ebp-20h]  +
add ecx 18h +
mov dword ptr [ebp-4] 1 +
call sub_101668A  +
lea ecx [ebp-1Ch] +
push ecx  +
add eax 14h +
push eax  +
call sub_10184CB  +
test eax eax +
jz loc_1018936  +
mov ecx [ebp-1Ch] +
or dword ptr [ebp-4] 0FFFFFFFFh +
add ecx 0FFFFFFF0h +
call sub_1002990  +
inc dword ptr [ebp-20h]  +
mov eax [ebp-28h] +
mov ecx [ebp-20h] +
cmp ecx [eax+1Ch] +
jb loc_10188D6  +
mov ecx esi +
call sub_100453A  +
mov eax [ebp-18h] +
mov [esi] eax +
xor eax eax +
call sub_10015C0  +
retn   +
mov ecx [esi] +
push dword ptr [ecx]  +
call sub_1008CCC  +
push ebx  +
lea ecx [ebp-24h] +
mov [ebp-14h] eax +
call sub_1003060  +
mov byte ptr [ebp-4] 2 +
jmp loc_1018975  +
and dword ptr [ebp-18h] 0 +
jmp loc_1018854  +
mov ecx [esi] +
lea eax [ebp-14h] +
push eax  +
call sub_1008EDD  +
mov edi eax +
lea eax [ebp-24h] +
push eax  +
push edi  +
call sub_10184CB  +
test eax eax +
jz loc_1018980  +
cmp dword ptr [ebp-14h] 0 +
jnz loc_101895A  +
jmp loc_10206E8  +
push dword ptr [ebp-1Ch]  +
mov ecx edi +
call sub_100370F  +
test eax eax +
jnz loc_1018975  +
mov eax [edi] +
mov ecx [ebp-18h] +
add edi 4 +
push edi  +
push eax  +
call sub_10070D3  +
mov ecx [ebp-24h] +
add ecx 0FFFFFFF0h +
call sub_1002990  +
jmp loc_1018905  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_10182FA  +
mov [ebp+var_4] eax +
test eax eax +
jz loc_10189EC  +
push edi  +
lea eax [ebp+var_4] +
push eax  +
mov ecx esi +
call sub_10079B5  +
push [ebp+arg_0]  +
mov edi eax +
mov ecx edi +
call sub_1007D37  +
test eax eax +
jnz loc_10189F1  +
cmp [ebp+var_4] eax +
jnz loc_10189CB  +
pop edi  +
pop esi  +
leave   +
retn 4  +
mov eax edi +
jmp loc_10189EB  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 21Ch +
mov eax dword_104A044 +
xor eax ebp +
mov [ebp+var_4] eax +
mov ecx [ebp+arg_4] +
mov ecx [ecx] +
mov eax [ebp+arg_0] +
mov eax [eax] +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_8] +
push 2001Fh  +
push edi  +
push ecx  +
xor esi esi +
push eax  +
lea ecx [ebp+hKey] +
mov [ebp+hKey] esi +
mov [ebp+var_20C] esi +
mov [ebp+var_208] esi +
call sub_101750D  +
mov ebx eax +
cmp ebx esi +
jnz loc_101F44F  +
lea eax [ebp+ftLastWriteTime] +
push eax  +
push esi  +
push esi  +
push esi  +
lea eax [ebp+cbName] +
push eax  +
lea eax [ebp+SubKey] +
push eax  +
push esi  +
push [ebp+hKey]  +
mov [ebp+cbName] 100h +
call ds:RegEnumKeyExW  +
cmp eax 103h +
jz loc_1018AAA  +
cmp eax esi +
jnz loc_101F465  +
push edi  +
lea eax [ebp+SubKey] +
push eax  +
lea ecx [ebp+hKey] +
call sub_10197C1  +
cmp eax esi +
jz loc_1018A50  +
jmp loc_101F465  +
lea ecx [ebp+hKey] +
call sub_1004887  +
lea ecx [ebp+hKey] +
call sub_1004887  +
mov eax esi +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1002A8B  +
leave   +
retn 0Ch  +
***
call sub_1001862  +
mov edi ecx +
mov [ebp-24h] edi +
xor esi esi +
mov [ebp-4] esi +
mov [ebp-44h] esi +
mov [ebp-40h] esi +
mov [ebp-3Ch] esi +
push dword ptr [ebp+0Ch]  +
lea eax [ebp-44h] +
push eax  +
push ecx  +
lea eax [edi+1Ch] +
mov ecx esp +
mov [ebp-28h] esp +
push eax  +
mov byte ptr [ebp-4] 1 +
call sub_10069A9  +
push ecx  +
lea eax [edi+18h] +
mov ecx esp +
mov [ebp-20h] esp +
push eax  +
mov byte ptr [ebp-4] 2 +
call sub_10069A9  +
mov byte ptr [ebp-4] 1 +
call sub_10074CD  +
mov ebx eax +
cmp ebx esi +
jl loc_101FBD9  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp+8] +
push eax  +
lea eax [ebp-44h] +
push eax  +
call sub_10189FA  +
mov ebx eax +
cmp ebx esi +
jnz loc_101FBF3  +
mov [ebp-14h] esi +
mov [ebp-50h] esi +
mov [ebp-4Ch] esi +
mov [ebp-48h] esi +
push esi  +
push esi  +
push 2001Fh  +
push esi  +
push esi  +
push dword ptr [ebp+0Ch]  +
lea ecx [ebp-50h] +
push dword ptr [ebp+8]  +
mov byte ptr [ebp-4] 3 +
push dword ptr [ebp-44h]  +
call sub_10075BE  +
cmp eax esi +
jnz loc_101FC01  +
push dword ptr [edi]  +
mov ecx edi +
mov [ebp-18h] esi +
call sub_1007A64  +
mov [ebp-20h] eax +
cmp [ebp-20h] esi +
jz loc_1018C4A  +
mov [ebp-38h] esi +
mov [ebp-34h] esi +
mov [ebp-30h] esi +
push offset dword_104A104  +
lea ecx [ebp-1Ch] +
mov byte ptr [ebp-4] 4 +
call sub_1003060  +
lea eax [ebp-20h] +
push eax  +
mov ecx edi +
call sub_10079B5  +
mov [ebp-28h] eax +
mov eax [ebp-18h] +
inc dword ptr [ebp-18h]  +
push eax  +
lea eax [ebp-1Ch] +
push offset aD  +
push eax  +
mov byte ptr [ebp-4] 6 +
call sub_10073A5  +
add esp 0Ch +
mov dword ptr [ebp-4] 5 +
cmp [ebp-14h] esi +
jl loc_101FC4E  +
mov ebx [ebp-1Ch] +
push esi  +
push esi  +
push 2001Fh  +
push esi  +
push esi  +
push dword ptr [ebp+0Ch]  +
lea ecx [ebp-38h] +
push ebx  +
push dword ptr [ebp-50h]  +
call sub_10075BE  +
cmp eax esi +
jnz loc_101FC75  +
mov eax [ebp-28h] +
lea ecx [eax+20h] +
mov edx [ecx] +
push eax  +
lea eax [ebp-38h] +
push eax  +
call dword ptr [edx]  +
lea ecx [ebp-38h] +
mov [ebp-14h] eax +
call sub_1004887  +
lea ecx [ebx-10h] +
call sub_1002990  +
cmp [ebp-14h] esi +
lea ecx [ebp-38h] +
jl loc_1018C8E  +
mov byte ptr [ebp-4] 3 +
call sub_1004887  +
jmp loc_1018B92  +
cmp [ebp-14h] esi +
jl loc_1018C68  +
push dword ptr [ebp-18h]  +
lea ecx [ebp-50h] +
push lpValueName  +
call sub_1015D71  +
cmp eax esi +
jnz loc_101FC61  +
lea ecx [ebp-50h] +
call sub_1004887  +
lea ecx [ebp-44h] +
call sub_1004887  +
mov ecx [ebp+8] +
add ecx 0FFFFFFF0h +
call sub_1002990  +
mov eax [ebp-14h] +
call sub_10015C0  +
retn 8  +
call sub_1004887  +
jmp loc_1018C4A  +
***
call sub_10015E0  +
mov ebx ecx +
xor edi edi +
mov [ebp-2Ch] edi +
mov [ebp-28h] edi +
mov [ebp-24h] edi +
push 2001Fh  +
push off_104B7FC  +
lea ecx [ebp-2Ch] +
push 80000002h  +
mov [ebp-4] edi +
call sub_100484B  +
lea eax [ebp-20h] +
push eax  +
push offset aSqmfulldrivein  +
lea ecx [ebp-2Ch] +
mov [ebp-20h] edi +
call sub_100480C  +
cmp eax edi +
jz loc_1018D9F  +
mov ecx [ebx+3Ch] +
push dword ptr [ecx]  +
call sub_1007A64  +
mov [ebp-14h] eax +
lea eax [ebp-18h] +
push eax  +
push edi  +
push edi  +
push offset dword_1018D7C  +
call SHGetKnownFolderPath  +
cmp eax edi +
jl loc_1018D9F  +
push dword ptr [ebp-18h]  +
lea ecx [ebp-1Ch] +
call sub_10035A2  +
push dword ptr [ebp-18h]  +
mov byte ptr [ebp-4] 1 +
call ds:CoTaskMemFree  +
lea eax [ebp-1Ch] +
push eax  +
lea ecx [ebp-4Ch] +
call sub_1007A16  +
mov byte ptr [ebp-4] 2 +
mov [ebp-10h] edi +
cmp [ebp-14h] edi +
jz loc_1018D8C  +
mov ecx [ebx+3Ch] +
lea eax [ebp-14h] +
push eax  +
call sub_10079B5  +
mov esi eax +
cmp [esi+2Ch] edi +
jz loc_1018D3A  +
cmp dword ptr [esi+4] 2 +
jnz loc_1018D3A  +
push edi  +
mov ecx esi +
call sub_10036F0  +
mov eax [eax] +
push offset aFile_0  +
push eax  +
call ds:__imp__wcsicmp  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_1018D3A  +
jmp loc_101FE8F  +
lea ecx [ebp-4Ch] +
call sub_1003B4C  +
mov ecx [ebp-1Ch] +
add ecx 0FFFFFFF0h +
call sub_1002990  +
lea ecx [ebp-2Ch] +
call sub_1004887  +
call sub_10015C0  +
retn   +
***
call sub_1001862  +
mov edi ecx +
mov [ebp-24h] edi +
xor esi esi +
mov [ebp-4] esi +
mov [ebp-44h] esi +
mov [ebp-40h] esi +
mov [ebp-3Ch] esi +
push dword ptr [ebp+0Ch]  +
lea eax [ebp-44h] +
push eax  +
push ecx  +
lea eax [edi+1Ch] +
mov ecx esp +
mov [ebp-28h] esp +
push eax  +
mov byte ptr [ebp-4] 1 +
call sub_10069A9  +
push ecx  +
lea eax [edi+18h] +
mov ecx esp +
mov [ebp-20h] esp +
push eax  +
mov byte ptr [ebp-4] 2 +
call sub_10069A9  +
mov byte ptr [ebp-4] 1 +
call sub_10074CD  +
mov ebx eax +
cmp ebx esi +
jl loc_101FC89  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp+8] +
push eax  +
lea eax [ebp-44h] +
push eax  +
call sub_10189FA  +
mov ebx eax +
cmp ebx esi +
jnz loc_101FCA3  +
mov [ebp-14h] esi +
mov [ebp-50h] esi +
mov [ebp-4Ch] esi +
mov [ebp-48h] esi +
push esi  +
push esi  +
push 2001Fh  +
push esi  +
push esi  +
push dword ptr [ebp+0Ch]  +
lea ecx [ebp-50h] +
push dword ptr [ebp+8]  +
mov byte ptr [ebp-4] 3 +
push dword ptr [ebp-44h]  +
call sub_10075BE  +
cmp eax esi +
jnz loc_101FCB1  +
push dword ptr [edi]  +
mov ecx edi +
mov [ebp-18h] esi +
call sub_1008CCC  +
mov [ebp-20h] eax +
cmp [ebp-20h] esi +
jz loc_1018F24  +
mov [ebp-38h] esi +
mov [ebp-34h] esi +
mov [ebp-30h] esi +
push offset dword_104A104  +
lea ecx [ebp-1Ch] +
mov byte ptr [ebp-4] 4 +
call sub_1003060  +
lea eax [ebp-20h] +
push eax  +
mov ecx edi +
call sub_1008EDD  +
mov [ebp-28h] eax +
mov eax [ebp-18h] +
inc dword ptr [ebp-18h]  +
push eax  +
lea eax [ebp-1Ch] +
push offset aD  +
push eax  +
mov byte ptr [ebp-4] 6 +
call sub_10073A5  +
add esp 0Ch +
mov dword ptr [ebp-4] 5 +
cmp [ebp-14h] esi +
jl loc_101FCFE  +
mov ebx [ebp-1Ch] +
push esi  +
push esi  +
push 2001Fh  +
push esi  +
push esi  +
push dword ptr [ebp+0Ch]  +
lea ecx [ebp-38h] +
push ebx  +
push dword ptr [ebp-50h]  +
call sub_10075BE  +
cmp eax esi +
jnz loc_101FD25  +
mov eax [ebp-28h] +
lea ecx [eax+4] +
mov edx [ecx] +
push eax  +
lea eax [ebp-38h] +
push eax  +
call dword ptr [edx]  +
lea ecx [ebp-38h] +
mov [ebp-14h] eax +
call sub_1004887  +
lea ecx [ebx-10h] +
call sub_1002990  +
cmp [ebp-14h] esi +
lea ecx [ebp-38h] +
jl loc_1018F68  +
mov byte ptr [ebp-4] 3 +
call sub_1004887  +
jmp loc_1018E6C  +
cmp [ebp-14h] esi +
jl loc_1018F42  +
push dword ptr [ebp-18h]  +
lea ecx [ebp-50h] +
push lpValueName  +
call sub_1015D71  +
cmp eax esi +
jnz loc_101FD11  +
lea ecx [ebp-50h] +
call sub_1004887  +
lea ecx [ebp-44h] +
call sub_1004887  +
mov ecx [ebp+8] +
add ecx 0FFFFFFF0h +
call sub_1002990  +
mov eax [ebp-14h] +
call sub_10015C0  +
retn 8  +
call sub_1004887  +
jmp loc_1018F24  +
***
mov eax offset __imp_CommitTransaction +
jmp $+2  +
push ecx  +
push edx  +
push eax  +
push offset ktmw32_dll_import_table  +
call sub_1009D5C  +
pop edx  +
pop ecx  +
jmp eax  +
***
mov edi edi +
push esi  +
mov esi ecx +
lea ecx [esi+4] +
mov dword ptr [esi] offset off_1018FAC +
call sub_1018FC1  +
lea ecx [esi+38h] +
call sub_1018FC1  +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_1017882  +
xor eax eax +
mov dword ptr [esi] offset off_1018FF0 +
mov [esi+14h] eax +
mov [esi+18h] eax +
mov [esi+1Ch] eax +
mov [esi+20h] eax +
mov [esi+24h] eax +
mov [esi+28h] eax +
mov [esi+2Ch] eax +
mov [esi+30h] eax +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi] +
call dword ptr [eax+0Ch]  +
test al al +
jnz loc_1019036  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+10h]  +
test al al +
jnz loc_1019036  +
xor eax eax +
pop esi  +
retn   +
xor eax eax +
inc eax  +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_1018F8C  +
lea ecx [esi+6Ch] +
mov dword ptr [esi] offset off_1019068 +
call sub_1019085  +
lea ecx [esi+0A0h] +
call sub_1019085  +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_1018FC1  +
mov dword ptr [esi] offset off_101909C +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
lea ecx [esi+8] +
call sub_1003FA0  +
push [ebp+arg_4]  +
lea ecx [esi+0Ch] +
call sub_1003FA0  +
mov eax [ebp+arg_8] +
mov [esi+4] eax +
mov al [ebp+arg_C] +
mov [esi+10h] al +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+14h]  +
pop esi  +
pop ebp  +
retn 10h  +
***
call sub_1001862  +
cmp dword_104A3AC 0 +
mov bl byte_104A3B0 +
jz loc_1020F98  +
cmp bl 4 +
jb loc_1020F31  +
mov eax dword_104A398 +
mov ecx dword_104A39C +
mov edi 20000h +
mov esi 80000000h +
and eax edi +
and ecx esi +
or eax ecx +
jnz loc_1020F3B  +
push dword ptr [ebp+0Ch]  +
call sub_100242C  +
mov [ebp-14h] eax +
test eax eax +
jl loc_1020FA7  +
mov ecx [ebp+8] +
call sub_1003689  +
mov [ebp-14h] eax +
test eax eax +
jl loc_1020FA7  +
push dword ptr [ebp+0Ch]  +
and dword ptr [ebp-4] 0 +
lea ecx [ebp+0Ch] +
call sub_10035A2  +
mov ecx [ebp+8] +
push 0  +
push dword ptr [ebp+18h]  +
mov byte ptr [ebp-4] 1 +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push eax  +
call sub_10191E3  +
mov ecx [ebp+0Ch] +
add ecx 0FFFFFFF0h +
mov [ebp-14h] eax +
call sub_1002990  +
cmp dword_104A3AC 0 +
jz loc_10191CD  +
mov al byte_104A3B0 +
cmp al 4 +
jb loc_10191D8  +
mov eax dword_104A398 +
mov ecx dword_104A39C +
and eax edi +
and ecx esi +
or eax ecx +
jnz loc_1021015  +
mov eax [ebp-14h] +
call sub_10015C0  +
retn 14h  +
test al al +
jz loc_10191B6  +
jmp loc_10191CD  +
***
call sub_1001862  +
mov esi ecx +
xor ebx ebx +
mov [ebp-14h] ebx +
push dword ptr [ebp+8]  +
lea ecx [ebp+8] +
mov [ebp-4] ebx +
call sub_1003F3F  +
mov edi [ebp+0Ch] +
push edi  +
lea eax [ebp+8] +
push eax  +
mov ecx esi +
mov byte ptr [ebp-4] 1 +
call sub_1007AE2  +
cmp eax ebx +
jl loc_1020E1F  +
mov ecx [esi+3Ch] +
lea eax [ebp+8] +
push eax  +
call sub_1017935  +
cmp eax ebx +
jnz loc_1020E33  +
mov eax [esi+10h] +
mov ecx [esi+14h] +
push 2  +
pop ebx  +
push ebx  +
push dword ptr [ebp+8]  +
push eax  +
push ecx  +
call sub_1008F8A  +
mov [ebp-18h] eax +
test eax eax +
jl loc_1020E1F  +
mov eax [ebp+18h] +
test eax 0FFFFFFFCh +
jnz loc_1020E6E  +
and eax ebx +
mov [ebp-20h] eax +
test edi edi +
jz loc_10193DE  +
push ebx  +
lea eax [ebp-1Ch] +
push eax  +
lea ecx [ebp+8] +
call sub_1007C5B  +
xor edi edi +
push offset asc_1007D24  +
inc edi  +
push eax  +
mov byte ptr [ebp-4] 2 +
mov [ebp-14h] edi +
call sub_100422D  +
test al al +
jnz loc_10193D7  +
push ebx  +
lea eax [ebp+18h] +
push eax  +
lea ecx [ebp+8] +
call sub_1007C5B  +
or [ebp-14h] ebx +
push offset asc_1007D2C  +
push eax  +
call sub_100422D  +
test al al +
jnz loc_10193D7  +
xor bl bl +
test byte ptr [ebp-14h] 2 +
jz loc_10192D1  +
mov ecx [ebp+18h] +
and dword ptr [ebp-14h] 0FFFFFFFDh +
add ecx 0FFFFFFF0h +
call sub_1002990  +
test byte ptr [ebp-14h] 1 +
mov [ebp-4] edi +
jz loc_10192E5  +
mov ecx [ebp-1Ch] +
add ecx 0FFFFFFF0h +
call sub_1002990  +
test bl bl +
jnz loc_1020E75  +
lea eax [ebp+8] +
push eax  +
call sub_1003AF2  +
xor ebx ebx +
cmp eax ebx +
jnz loc_1020E8B  +
cmp [ebp+10h] ebx +
jz loc_101930E  +
cmp [ebp+14h] ebx +
jnz loc_1020E6E  +
cmp eax ebx +
jnz loc_1020E96  +
lea eax [ebp+8] +
push eax  +
lea ecx [ebp-44h] +
call sub_1007A16  +
push ebx  +
push edi  +
push dword ptr [ebp+10h]  +
lea eax [ebp+8] +
push edi  +
push dword ptr [ebp-20h]  +
lea ecx [ebp-6Ch] +
push dword ptr [ebp+0Ch]  +
mov byte ptr [ebp-4] 3 +
push eax  +
call sub_10165E1  +
cmp dword ptr [ebp+10h] 0 +
mov byte ptr [ebp-4] 4 +
jz loc_1020ED3  +
mov ecx [esi+40h] +
lea eax [ebp-44h] +
push eax  +
call sub_10193F1  +
push eax  +
lea ecx [ebp-6Ch] +
call sub_1017861  +
test al al +
jnz loc_1019377  +
mov ecx [esi+40h] +
lea eax [ebp-6Ch] +
push eax  +
lea eax [ebp-44h] +
push eax  +
call sub_10056A3  +
mov ebx edi +
mov ecx [esi+3Ch] +
lea eax [ebp-44h] +
push eax  +
call sub_10193F1  +
test eax eax +
jnz loc_1020EA1  +
mov ecx [esi+3Ch] +
lea eax [ebp-6Ch] +
push eax  +
lea eax [ebp-44h] +
push eax  +
call sub_10056A3  +
mov ecx esi +
call sub_101833E  +
push dword ptr [ebp+8]  +
lea ecx [esi+28h] +
call sub_1015DF5  +
mov byte ptr [esi+5Ah] 1 +
lea ecx [ebp-6Ch] +
call sub_1004292  +
lea ecx [ebp-44h] +
call sub_1003B4C  +
mov ecx [ebp+8] +
add ecx 0FFFFFFF0h +
call sub_1002990  +
mov eax [ebp-18h] +
call sub_10015C0  +
retn 14h  +
mov bl 1 +
jmp loc_10192BC  +
xor edi edi +
inc edi  +
jmp loc_1019297  +
***
test ebx ebx +
jnz loc_101939B  +
jmp loc_10193B1  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_0]  +
call sub_10056D6  +
test eax eax +
jnz loc_101F4F7  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_C]  +
mov esi ecx +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1019439  +
mov dword ptr [esi+4] 4 +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
push edi  +
lea ebx [ecx+14h] +
push 0FFFFFFFFh  +
mov [ebp+var_4] ecx +
xor edi edi +
push edi  +
mov ecx ebx +
call sub_1015DB6  +
mov esi [ebp+arg_8] +
cmp [esi+4] edi +
ja loc_10203C4  +
push [ebp+arg_C]  +
mov ecx [ebp+var_4] +
push 3  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_10190C5  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
push ebp  +
mov ebp esp +
cmp dword ptr [ebp+8] 0 +
jnz loc_101C4D2  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push 0  +
call sub_10194A4  +
pop ebp  +
retn 0Ch  +
***
call sub_1001862  +
mov eax [ebp+10h] +
xor esi esi +
cmp eax esi +
jz loc_101C2F0  +
push 44h  +
mov [eax] esi +
mov dword ptr [ebp-14h] 8007000Eh +
mov [ebp-18h] esi +
mov [ebp-4] esi +
call off_104B7F4  +
cmp eax esi +
jz loc_10194E4  +
push dword ptr [ebp+8]  +
mov ecx eax +
call sub_1008D54  +
mov esi eax +
or dword ptr [ebp-4] 0FFFFFFFFh +
test esi esi +
jz loc_1019502  +
push dword ptr [ebp+10h]  +
mov eax [esi] +
push dword ptr [ebp+0Ch]  +
push esi  +
call dword ptr [eax]  +
mov [ebp-14h] eax +
test eax eax +
jnz loc_101C30C  +
mov eax [ebp-14h] +
call sub_10015C0  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+0Ch] +
mov eax [eax] +
push esi  +
push 1  +
push eax  +
mov esi ecx +
mov ecx [ebp+8] +
push offset aUrl  +
call sub_1019559  +
test eax eax +
jnz loc_1019547  +
cmp [esi+14h] eax +
mov ecx [ebp+8] +
setnz al  +
push eax  +
push offset aProvidesnotifi  +
call sub_1015D71  +
pop esi  +
test eax eax +
jg loc_101EB37  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+lpData] 0 +
push esi  +
mov esi ecx +
jz loc_101C3F0  +
push [ebp+lpData]  +
call ds:lstrlenW  +
lea eax [eax+eax+2] +
push eax  +
push [ebp+lpData]  +
push [ebp+dwType]  +
push 0  +
push [ebp+lpValueName]  +
push dword ptr [esi]  +
call ds:RegSetValueExW  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword_104A3AC 0 +
push ebx  +
mov ebx [ebp+arg_4] +
jz loc_10195D4  +
mov al byte_104A3B0 +
cmp al 4 +
jb loc_10195F0  +
mov eax dword_104A398 +
mov ecx dword_104A39C +
push esi  +
mov edx 20000h +
mov esi 80000000h +
and eax edx +
and ecx esi +
or eax ecx +
jnz loc_101EFBC  +
pop esi  +
push ebx  +
call sub_100242C  +
test eax eax +
jl loc_10195EB  +
mov eax [ebp+arg_0] +
push ebx  +
add eax 14h +
push eax  +
call sub_10195FB  +
pop ebx  +
pop ebp  +
retn 8  +
test al al +
jz loc_10195B1  +
jmp loc_10195D4  +
***
call sub_1001862  +
push dword ptr [ebp+0Ch]  +
mov ecx [ebp+8] +
and dword ptr [ebp-14h] 0 +
and dword ptr [ebp-4] 0 +
call sub_1003231  +
mov eax [ebp-14h] +
call sub_10015C0  +
retn 8  +
***
call sub_10015E0  +
xor ebx ebx +
mov [ebp-18h] ebx +
mov eax [ebp+8] +
mov ecx [eax] +
lea edx [ebp-18h] +
push edx  +
push eax  +
mov [ebp-4] ebx +
call dword ptr [ecx+28h]  +
mov esi eax +
cmp esi ebx +
jl loc_1019660  +
mov eax [ebp-18h] +
mov ecx [eax] +
lea edx [ebp-20h] +
push edx  +
push eax  +
call dword ptr [ecx+1Ch]  +
mov esi eax +
mov [ebp-14h] ebx +
cmp esi ebx +
mov byte ptr [ebp-4] 1 +
mov [ebp-1Ch] ebx +
jl loc_101974F  +
mov edi offset dword_1019784 +
mov ecx [ebp-1Ch] +
cmp ecx [ebp-20h] +
jge loc_101973B  +
mov [ebp-10h] ebx +
mov eax [ebp-18h] +
mov edx [eax] +
lea esi [ebp-10h] +
push esi  +
push ecx  +
push eax  +
mov byte ptr [ebp-4] 2 +
call dword ptr [edx+20h]  +
mov esi eax +
mov [ebp+8] ebx +
cmp esi ebx +
mov byte ptr [ebp-4] 3 +
jl loc_1019716  +
mov eax [ebp-10h] +
mov ecx [eax] +
lea edx [ebp+8] +
push edx  +
push eax  +
call dword ptr [ecx+1Ch]  +
mov esi eax +
cmp esi ebx +
jl loc_1019716  +
cmp [ebp+8] ebx +
jz loc_1019716  +
push offset aSearch_jetprop  +
push dword ptr [ebp+8]  +
call ds:__imp__wcsicmp  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_1019716  +
lea eax [ebp-30h] +
push eax  +
call ds:VariantInit  +
mov eax [ebp-10h] +
mov ecx [eax] +
lea edx [ebp-30h] +
push edx  +
push eax  +
mov byte ptr [ebp-4] 4 +
call dword ptr [ecx+28h]  +
mov esi eax +
cmp esi ebx +
jl loc_101970C  +
cmp word ptr [ebp-30h] 0Dh +
jnz loc_101F38F  +
mov eax [ebp-28h] +
mov ecx [eax] +
lea edx [ebp-14h] +
push edx  +
push edi  +
push eax  +
call dword ptr [ecx]  +
mov esi eax +
lea eax [ebp-30h] +
push eax  +
call ds:VariantClear  +
push dword ptr [ebp+8]  +
call ds:SysFreeString  +
mov eax [ebp-10h] +
mov byte ptr [ebp-4] 1 +
cmp eax ebx +
jz loc_1019730  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
inc dword ptr [ebp-1Ch]  +
cmp esi ebx +
jge loc_1019677  +
cmp esi ebx +
jl loc_101974F  +
mov eax [ebp-14h] +
cmp eax ebx +
jz loc_101977A  +
mov ecx [eax] +
push ebx  +
push eax  +
call dword ptr [ecx+34h]  +
mov esi eax +
mov eax [ebp-14h] +
mov [ebp-4] bl +
cmp eax ebx +
jz loc_101975F  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-18h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
cmp eax ebx +
jz loc_1019770  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax esi +
call sub_10015C0  +
retn 4  +
mov esi 80004005h +
jmp loc_101974F  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 224h +
mov eax dword_104A044 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_4] +
mov eax ecx +
mov ecx [ebp+lpSubKey] +
push 2001Fh  +
push edi  +
push ecx  +
push dword ptr [eax]  +
xor esi esi +
mov [ebp+var_21C] ecx +
lea ecx [ebp+hKey] +
mov [ebp+var_218] eax +
mov [ebp+hKey] esi +
mov [ebp+var_210] esi +
mov [ebp+var_20C] esi +
call sub_101750D  +
mov ebx eax +
cmp ebx esi +
jnz loc_101F425  +
mov ebx ds:RegEnumKeyExW +
lea eax [ebp+ftLastWriteTime] +
push eax  +
push esi  +
push esi  +
push esi  +
lea eax [ebp+cbName] +
push eax  +
lea eax [ebp+SubKey] +
push eax  +
push esi  +
push [ebp+hKey]  +
mov [ebp+cbName] 100h +
call ebx  +
test eax eax +
jz loc_101F437  +
lea ecx [ebp+hKey] +
call sub_1004887  +
mov ecx [ebp+var_218] +
push edi  +
push [ebp+var_21C]  +
call sub_10198A0  +
lea ecx [ebp+hKey] +
mov esi eax +
call sub_1004887  +
mov eax esi +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1002A8B  +
leave   +
retn 8  +
***
cmp eax esi +
jz loc_1019825  +
jmp loc_1019875  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
cmp [ebp+arg_4] 0FFFFFFFFh +
push eax  +
jz loc_101F05C  +
push [ebp+arg_4]  +
push eax  +
push eax  +
push [ebp+arg_0]  +
push dword ptr [ecx]  +
call ds:RegDeleteKeyTransactedW  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword_104A04C 7D6h +
jl loc_10198E9  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push 0  +
call WinSqmIncrementDWORD  +
pop ebp  +
retn 8  +
***
mov ecx [edx+38h] +
test ecx ecx +
jz loc_10205B6  +
cmp dword ptr [ecx+30h] 0 +
jz loc_1005DA4  +
jmp loc_10205B6  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
push dword ptr [esi]  +
mov edi ecx +
call sub_1007106  +
test eax eax +
jz loc_101A545  +
mov ecx [ebp+arg_4] +
add eax 4 +
push eax  +
call sub_10095BC  +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
call sub_1002990  +
mov ecx [ebp-0B0h] +
add ecx 0FFFFFFF0h +
mov byte ptr [ebp-4] 4 +
call sub_1002990  +
jmp loc_10163D5  +
***
lea eax [ebp+Value] +
push eax  +
push 0  +
push 0  +
push 801Ch  +
push 0  +
call SHGetFolderPathW  +
test eax eax +
jnz loc_1016D46  +
lea eax [ebp+Value] +
push eax  +
push offset aLocalappdata  +
call ds:SetEnvironmentVariableW  +
test eax eax +
jz loc_10215B9  +
mov byte_104A040 1 +
jmp loc_1016D44  +
***
mov ecx [ebp-18h] +
and dword ptr [ebp-14h] 0FFFFFFF7h +
add ecx 0FFFFFFF0h +
call sub_1002990  +
jmp loc_1019ABA  +
mov ecx [ebp-1Ch] +
and dword ptr [ebp-14h] 0FFFFFFFBh +
add ecx 0FFFFFFF0h +
call sub_1002990  +
jmp loc_1019AC4  +
mov ecx [ebp-20h] +
and dword ptr [ebp-14h] 0FFFFFFFDh +
add ecx 0FFFFFFF0h +
call sub_1002990  +
jmp loc_1019ACE  +
***
push eax  +
call sub_1007C5B  +
and dword ptr [ebp-4] 0 +
mov edi offset dword_1003488 +
push edi  +
push eax  +
mov [ebp-14h] ebx +
call sub_100422D  +
mov esi offset dword_1012E6C +
test al al +
jnz loc_10199EC  +
mov ecx [ebp+8] +
push ebx  +
lea eax [ebp-1Ch] +
push eax  +
call sub_1007C5B  +
or dword ptr [ebp-14h] 4 +
push esi  +
push eax  +
mov dword ptr [ebp-4] 2 +
call sub_100422D  +
test al al +
jz loc_1019AAC  +
mov ecx [ebp+0Ch] +
push ebx  +
lea eax [ebp-18h] +
push eax  +
call sub_1007C5B  +
or dword ptr [ebp-14h] 8 +
push edi  +
push eax  +
call sub_100422D  +
test al al +
jz loc_1019AAC  +
jmp loc_10199E4  +
***
call sub_10015E0  +
and dword ptr [ebp-14h] 0 +
mov ecx [ebp+8] +
mov eax [ecx] +
mov eax [eax-0Ch] +
xor ebx ebx +
inc ebx  +
cmp eax ebx +
jle loc_1019AAC  +
mov edx [ebp+0Ch] +
mov edx [edx] +
cmp eax [edx-0Ch] +
jz sub_1019A10  +
mov byte ptr [ebp-0Dh] 0 +
test byte ptr [ebp-14h] 8 +
jnz loc_10199A8  +
test byte ptr [ebp-14h] 4 +
jnz loc_10199BC  +
test byte ptr [ebp-14h] 2 +
jnz loc_10199D0  +
or dword ptr [ebp-4] 0FFFFFFFFh +
test [ebp-14h] bl +
jnz loc_1019AFB  +
cmp byte ptr [ebp-0Dh] 0 +
mov ecx [ebp+8] +
jnz loc_10215C3  +
mov eax [ebp+0Ch] +
push dword ptr [eax]  +
call sub_100370F  +
neg eax  +
sbb eax eax +
inc eax  +
call sub_10015C0  +
retn 8  +
mov ecx [ebp-24h] +
add ecx 0FFFFFFF0h +
call sub_1002990  +
jmp loc_1019AD7  +
***
call sub_10015E0  +
mov esi ecx +
mov [ebp-10h] esi +
mov edi [esi+4] +
mov [ebp-14h] edi +
cmp edi [esi+8] +
jnb loc_1019B51  +
mov ecx edi +
shl ecx 5 +
add ecx [esi] +
mov [ebp-18h] ecx +
mov dword ptr [ebp-4] 0 +
jz loc_1019B44  +
push dword ptr [ebp+8]  +
call sub_101A1FA  +
inc dword ptr [esi+4]  +
mov eax edi +
call sub_10015C0  +
retn 4  +
lea eax [edi+1] +
push eax  +
call sub_10166CD  +
test al al +
jnz loc_1019B29  +
jmp loc_101F787  +
***
call sub_10015E0  +
mov [ebp-14h] ecx +
mov ebx [ebp+8] +
and dword ptr [ebp-10h] 0 +
cmp dword ptr [ebx+4] 0 +
jbe loc_1019C29  +
mov esi [ebp+0Ch] +
push dword ptr [ebp-10h]  +
mov ecx ebx +
call sub_10068B5  +
push eax  +
lea ecx [ebp+0Ch] +
call sub_1003F3F  +
mov ecx [ebp-14h] +
push 1  +
lea eax [ebp+0Ch] +
xor edi edi +
push eax  +
mov [ebp-4] edi +
call sub_1007AE2  +
cmp [esi+4] edi +
jbe loc_1019C02  +
push edi  +
mov ecx esi +
call sub_101668A  +
add eax 14h +
push eax  +
lea ecx [ebp+8] +
call sub_1003F3F  +
mov ecx [ebp-14h] +
push 1  +
lea eax [ebp+8] +
push eax  +
mov byte ptr [ebp-4] 1 +
call sub_1007AE2  +
lea eax [ebp+0Ch] +
push eax  +
lea eax [ebp+8] +
push eax  +
call sub_1019A7F  +
mov ecx [ebp+8] +
add ecx 0FFFFFFF0h +
mov byte ptr [ebp-4] 0 +
test eax eax +
jnz loc_1019C33  +
call sub_1002990  +
inc edi  +
cmp edi [esi+4] +
jb loc_1019BB6  +
cmp edi [esi+4] +
jz loc_101FEE1  +
mov ecx [ebp+0Ch] +
or dword ptr [ebp-4] 0FFFFFFFFh +
add ecx 0FFFFFFF0h +
call sub_1002990  +
inc dword ptr [ebp-10h]  +
mov eax [ebp-10h] +
cmp eax [ebx+4] +
jb loc_1019B8B  +
xor eax eax +
call sub_10015C0  +
retn 8  +
call sub_1002990  +
jmp loc_1019C02  +
***
call sub_1001862  +
xor ebx ebx +
mov [ebp-4] ebx +
mov [ebp-2Ch] ebx +
mov eax [ebp+8] +
mov ecx [eax] +
lea edx [ebp-2Ch] +
push edx  +
push eax  +
mov byte ptr [ebp-4] 1 +
call dword ptr [ecx+34h]  +
cmp eax ebx +
mov [ebp-38h] eax +
jl loc_1019E1F  +
mov [ebp-34h] ebx +
mov [ebp-30h] ebx +
mov eax [ebp-2Ch] +
mov ecx [eax] +
lea edx [ebp-30h] +
push edx  +
push eax  +
mov byte ptr [ebp-4] 3 +
call dword ptr [ecx+20h]  +
mov [ebp-38h] eax +
cmp eax ebx +
mov eax [ebp-30h] +
jl loc_1019E00  +
mov ecx [eax] +
lea edx [ebp-34h] +
push edx  +
push offset dword_1016C14  +
push eax  +
call dword ptr [ecx]  +
cmp eax ebx +
mov [ebp-38h] eax +
jl loc_1019DFD  +
lea eax [ebp-54h] +
push eax  +
call ds:VariantInit  +
mov esi ds:VariantClear +
mov edi ds:SysFreeString +
mov byte ptr [ebp-4] 4 +
mov eax [ebp-34h] +
mov ecx [eax] +
lea edx [ebp-40h] +
push edx  +
lea edx [ebp-54h] +
push edx  +
push 1  +
push eax  +
call dword ptr [ecx+0Ch]  +
cmp eax ebx +
jnz loc_1019DF7  +
mov [ebp-28h] ebx +
mov eax [ebp-4Ch] +
mov ecx [eax] +
lea edx [ebp-28h] +
push edx  +
push offset dword_101676C  +
push eax  +
mov byte ptr [ebp-4] 5 +
call dword ptr [ecx]  +
mov [ebp-38h] eax +
cmp eax ebx +
jnz loc_1019DD7  +
mov [ebp-3Ch] ebx +
mov eax [ebp-28h] +
mov ecx [eax] +
lea edx [ebp-3Ch] +
push edx  +
push eax  +
mov byte ptr [ebp-4] 6 +
call dword ptr [ecx+1Ch]  +
mov eax [ebp-28h] +
mov ecx [eax] +
lea edx [ebp+8] +
push edx  +
push eax  +
call dword ptr [ecx+20h]  +
mov eax [ebp-28h] +
mov ecx [eax] +
lea edx [ebp-14h] +
push edx  +
push eax  +
call dword ptr [ecx+64h]  +
mov eax [ebp-28h] +
mov ecx [eax] +
lea edx [ebp-18h] +
push edx  +
push eax  +
call dword ptr [ecx+74h]  +
mov eax [ebp-28h] +
mov ecx [eax] +
lea edx [ebp-1Ch] +
push edx  +
push eax  +
call dword ptr [ecx+4Ch]  +
mov eax [ebp-28h] +
mov ecx [eax] +
lea edx [ebp-20h] +
push edx  +
push eax  +
call dword ptr [ecx+30h]  +
mov eax [ebp-28h] +
mov ecx [eax] +
lea edx [ebp-24h] +
push edx  +
push eax  +
call dword ptr [ecx+28h]  +
mov [ebp-74h] ebx +
push dword ptr [ebp-3Ch]  +
lea ecx [ebp-74h] +
mov byte ptr [ebp-4] 7 +
call sub_1009C37  +
xor eax eax +
cmp [ebp+8] bx +
mov ecx [ebp+0Ch] +
setnz al  +
mov [ebp-70h] eax +
xor eax eax +
cmp [ebp-14h] bx +
setnz al  +
mov [ebp-6Ch] eax +
xor eax eax +
cmp [ebp-18h] bx +
setnz al  +
mov [ebp-64h] eax +
xor eax eax +
cmp [ebp-1Ch] bx +
setnz al  +
mov [ebp-60h] eax +
xor eax eax +
cmp [ebp-20h] bx +
setnz al  +
mov [ebp-5Ch] eax +
xor eax eax +
cmp [ebp-24h] bx +
setnz al  +
mov [ebp-58h] eax +
lea eax [ebp-74h] +
push eax  +
call sub_1019B0D  +
push dword ptr [ebp-74h]  +
call edi  +
push dword ptr [ebp-3Ch]  +
call edi  +
lea eax [ebp-54h] +
push eax  +
call esi  +
mov eax [ebp-28h] +
mov byte ptr [ebp-4] 4 +
cmp eax ebx +
jz loc_1019CC7  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_1019CC7  +
lea eax [ebp-54h] +
push eax  +
call esi  +
mov eax [ebp-30h] +
mov byte ptr [ebp-4] 2 +
cmp eax ebx +
jz loc_1019E0E  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-34h] +
mov byte ptr [ebp-4] 1 +
cmp eax ebx +
jz loc_1019E1F  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-2Ch] +
mov [ebp-4] bl +
cmp eax ebx +
jz loc_1019E2F  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-38h] +
call sub_10015C0  +
retn 8  +
***
call sub_1001862  +
mov ebx ecx +
push dword ptr [ebx+14h]  +
xor edi edi +
lea ecx [ebp-2Ch] +
mov [ebp-4] edi +
call sub_100883D  +
push dword ptr [ebx+10h]  +
lea ecx [ebp-28h] +
mov byte ptr [ebp-4] 1 +
call sub_100883D  +
mov [ebp-20h] edi +
lea eax [ebp-20h] +
push eax  +
push dword ptr [ebp-28h]  +
mov byte ptr [ebp-4] 3 +
push dword ptr [ebp-2Ch]  +
call sub_100913D  +
cmp eax edi +
mov [ebp-1Ch] eax +
jl loc_1019FA4  +
mov [ebp-18h] edi +
mov [ebp-14h] edi +
mov eax [ebp-20h] +
mov ecx [eax] +
lea edx [ebp-14h] +
push edx  +
push eax  +
mov byte ptr [ebp-4] 5 +
call dword ptr [ecx+20h]  +
mov [ebp-1Ch] eax +
cmp eax edi +
mov eax [ebp-14h] +
jl loc_1019F89  +
mov ecx [eax] +
lea edx [ebp-18h] +
push edx  +
push offset dword_1016C14  +
push eax  +
call dword ptr [ecx]  +
mov [ebp-1Ch] eax +
mov eax [ebp-14h] +
cmp eax edi +
jz loc_1019ED6  +
mov [ebp-14h] edi +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-14h] +
cmp [ebp-1Ch] edi +
jl loc_1019F89  +
lea eax [ebp-44h] +
push eax  +
call ds:VariantInit  +
mov esi ds:VariantClear +
mov byte ptr [ebp-4] 6 +
mov eax [ebp-18h] +
mov ecx [eax] +
lea edx [ebp-30h] +
push edx  +
lea edx [ebp-44h] +
push edx  +
push 1  +
push eax  +
call dword ptr [ecx+0Ch]  +
cmp eax edi +
jnz loc_1019F70  +
mov [ebp-24h] edi +
mov eax [ebp-3Ch] +
mov ecx [eax] +
lea edx [ebp-24h] +
push edx  +
push offset dword_1019F60  +
push eax  +
mov byte ptr [ebp-4] 7 +
call dword ptr [ecx]  +
mov [ebp-1Ch] eax +
cmp eax edi +
jnz loc_1019F49  +
push dword ptr [ebp+8]  +
mov ecx ebx +
push dword ptr [ebp-24h]  +
call sub_1019C3F  +
mov [ebp-1Ch] eax +
mov eax [ebp-24h] +
cmp eax edi +
jz loc_1019F49  +
mov [ebp-24h] edi +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
lea eax [ebp-44h] +
push eax  +
call esi  +
mov eax [ebp-24h] +
mov byte ptr [ebp-4] 6 +
cmp eax edi +
jz loc_1019EF3  +
jmp loc_101F80C  +
mov eax [ebp-18h] +
cmp eax edi +
jz loc_1019F80  +
mov [ebp-18h] edi +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
lea eax [ebp-44h] +
push eax  +
call esi  +
mov eax [ebp-14h] +
mov byte ptr [ebp-4] 4 +
cmp eax edi +
jnz loc_101F817  +
mov eax [ebp-18h] +
mov byte ptr [ebp-4] 3 +
cmp eax edi +
jnz loc_101F822  +
mov eax [ebp-20h] +
mov byte ptr [ebp-4] 2 +
cmp eax edi +
jz loc_1019FB5  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
push dword ptr [ebp-28h]  +
mov esi ds:SysFreeString +
call esi  +
push dword ptr [ebp-2Ch]  +
call esi  +
mov eax [ebp-1Ch] +
call sub_10015C0  +
retn 4  +
***
push eax  +
call sub_1019FE0  +
jmp loc_1015F4D  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_101A39F  +
mov edx [ecx+14h] +
cmp eax edx +
jz loc_101A39F  +
mov ecx eax +
mov eax [eax+38h] +
cmp eax edx +
jnz loc_101A395  +
mov eax ecx +
pop ebp  +
retn 4  +
***
call sub_10015E0  +
mov esi ecx +
push dword ptr [esi+14h]  +
lea ecx [ebp-28h] +
call sub_100883D  +
push dword ptr [esi+10h]  +
xor edi edi +
lea ecx [ebp-24h] +
mov [ebp-4] edi +
call sub_100883D  +
mov [ebp-38h] edi +
mov [ebp-34h] edi +
mov [ebp-30h] edi +
mov [ebp-2Ch] edi +
lea eax [ebp-38h] +
push eax  +
mov ecx esi +
mov byte ptr [ebp-4] 2 +
call sub_1019E3F  +
mov esi eax +
cmp esi edi +
jl loc_101A160  +
mov [ebp-1Ch] edi +
lea eax [ebp-1Ch] +
push eax  +
push dword ptr [ebp-24h]  +
mov byte ptr [ebp-4] 3 +
push dword ptr [ebp-28h]  +
call sub_100913D  +
mov esi eax +
cmp esi edi +
jnz loc_101A14F  +
xor ebx ebx +
cmp [ebp-34h] edi +
jbe loc_101A14F  +
push offset dword_104A104  +
lea ecx [ebp-18h] +
call sub_1003060  +
push ebx  +
lea ecx [ebp-38h] +
mov byte ptr [ebp-4] 4 +
call sub_101668A  +
mov eax [eax] +
lea ecx [ebp-18h] +
push ecx  +
push eax  +
call sub_1008BF4  +
push dword ptr [ebp-18h]  +
lea ecx [ebp-20h] +
call sub_100883D  +
mov [ebp-14h] edi +
mov eax [ebp-1Ch] +
mov ecx [eax] +
lea edx [ebp-14h] +
push edx  +
push dword ptr [ebp-20h]  +
mov byte ptr [ebp-4] 6 +
push eax  +
call dword ptr [ecx+30h]  +
mov esi eax +
cmp esi edi +
jnz loc_101A11C  +
mov [ebp-10h] edi +
mov eax [ebp-14h] +
mov ecx [eax] +
lea edx [ebp-10h] +
push edx  +
push eax  +
mov byte ptr [ebp-4] 7 +
call dword ptr [ecx+34h]  +
mov esi eax +
cmp esi edi +
jnz loc_101A10B  +
mov esi [ebp-10h] +
push ebx  +
lea ecx [ebp-38h] +
call sub_101668A  +
mov eax [eax] +
mov ecx [esi] +
push eax  +
push esi  +
call dword ptr [ecx+28h]  +
mov esi eax +
mov eax [ebp-10h] +
mov byte ptr [ebp-4] 6 +
cmp eax edi +
jz loc_101A11C  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-14h] +
mov byte ptr [ebp-4] 5 +
cmp eax edi +
jz loc_101A12D  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
push dword ptr [ebp-20h]  +
call ds:SysFreeString  +
mov ecx [ebp-18h] +
add ecx 0FFFFFFF0h +
mov byte ptr [ebp-4] 3 +
call sub_1002990  +
inc ebx  +
cmp ebx [ebp-34h] +
jb loc_101A08C  +
mov eax [ebp-1Ch] +
mov byte ptr [ebp-4] 2 +
cmp eax edi +
jz loc_101A160  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
lea ecx [ebp-38h] +
call sub_101A185  +
push dword ptr [ebp-24h]  +
mov edi ds:SysFreeString +
call edi  +
push dword ptr [ebp-28h]  +
call edi  +
mov eax esi +
call sub_10015C0  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi] +
test eax eax +
jz loc_101A1A2  +
push dword ptr [esi+4]  +
push eax  +
call sub_101A1A9  +
push dword ptr [esi]  +
call ds:__imp_free  +
pop ecx  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
mov edi [ebp+arg_4] +
test edi edi +
jbe loc_101A1CA  +
push esi  +
mov esi [ebp+arg_0] +
push 0  +
mov ecx esi +
call sub_101A1D4  +
add esi 20h +
dec edi  +
jnz loc_101A1BA  +
pop esi  +
pop edi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
push dword ptr [esi]  +
call ds:SysFreeString  +
test [ebp+arg_0] 1 +
jnz loc_101F130  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
push edi  +
mov esi ecx +
call sub_101A243  +
mov eax [edi+4] +
mov [esi+4] eax +
mov eax [edi+8] +
mov [esi+8] eax +
mov eax [edi+0Ch] +
mov [esi+0Ch] eax +
mov eax [edi+10h] +
mov [esi+10h] eax +
mov eax [edi+14h] +
mov [esi+14h] eax +
mov eax [edi+18h] +
mov [esi+18h] eax +
mov eax [edi+1Ch] +
mov [esi+1Ch] eax +
pop edi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov edi ecx +
mov ecx esi +
call sub_101A272  +
mov [edi] eax +
cmp dword ptr [esi] 0 +
jz loc_101A265  +
test eax eax +
jz loc_101F365  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi] +
test eax eax +
jz loc_101B681  +
push eax  +
call ds:SysStringByteLen  +
push eax  +
push dword ptr [esi]  +
call ds:SysAllocStringByteLen  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword_104A3AC 0 +
push ebx  +
mov ebx [ebp+arg_4] +
jz loc_101A2D6  +
mov al byte_104A3B0 +
cmp al 4 +
jb loc_101A2E3  +
mov eax dword_104A398 +
mov ecx dword_104A39C +
push esi  +
mov edx 20000h +
mov esi 80000000h +
and eax edx +
and ecx esi +
or eax ecx +
jnz loc_101E93D  +
pop esi  +
mov eax [ebp+arg_0] +
mov [eax+28h] ebx +
xor eax eax +
pop ebx  +
pop ebp  +
retn 8  +
test al al +
jz loc_101A2B3  +
jmp loc_101A2D6  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword_104A3AC 0 +
push ebx  +
mov ebx [ebp+arg_4] +
jz loc_101A32C  +
mov al byte_104A3B0 +
cmp al 4 +
jb loc_101A339  +
mov eax dword_104A398 +
mov ecx dword_104A39C +
push esi  +
mov edx 20000h +
mov esi 80000000h +
and eax edx +
and ecx esi +
or eax ecx +
jnz loc_101E988  +
pop esi  +
mov eax [ebp+arg_0] +
mov [eax+2Ch] ebx +
xor eax eax +
pop ebx  +
pop ebp  +
retn 8  +
test al al +
jz loc_101A309  +
jmp loc_101A32C  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword_104A3AC 0 +
push ebx  +
mov ebx [ebp+arg_4] +
jz loc_101A382  +
mov al byte_104A3B0 +
cmp al 4 +
jb loc_101A38F  +
mov eax dword_104A398 +
mov ecx dword_104A39C +
push esi  +
mov edx 20000h +
mov esi 80000000h +
and eax edx +
and ecx esi +
or eax ecx +
jnz loc_101EAA0  +
pop esi  +
mov eax [ebp+arg_0] +
mov [eax+34h] ebx +
xor eax eax +
pop ebx  +
pop ebp  +
retn 8  +
test al al +
jz loc_101A35F  +
jmp loc_101A382  +
***
mov ecx eax +
mov eax [ecx+38h] +
jmp loc_101A000  +
xor eax eax +
jmp loc_101A00A  +
***
xor eax eax +
jmp loc_1015F4D  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov edi [esi] +
push edi  +
call sub_1015F13  +
mov [esi] eax +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
push ebx  +
push esi  +
push edi  +
mov edi ecx +
mov esi [edi] +
cmp esi [edi+14h] +
jz loc_101A440  +
cmp [ebp+var_4] 0 +
jnz loc_101F2DF  +
push dword ptr [esi]  +
mov ebx esi +
push [ebp+arg_0]  +
call sub_1007157  +
test eax eax +
jz loc_101F2CF  +
jl loc_101F2D7  +
mov esi [esi+38h] +
cmp esi [edi+14h] +
jnz loc_101A3E9  +
cmp [ebp+var_4] 0 +
jnz loc_101F2DF  +
test ebx ebx +
jz loc_101A440  +
push dword ptr [ebx]  +
push [ebp+arg_0]  +
call sub_1007157  +
test eax eax +
jl loc_101F307  +
push ebx  +
mov ecx edi +
call sub_1008EFE  +
mov [ebp+var_4] eax +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
cmp eax 1 +
jnz loc_10169E1  +
xor esi esi +
push edi  +
lea ecx [ebp-1E8h] +
inc esi  +
call sub_1003D9C  +
push ebx  +
lea ecx [ebp-1E8h] +
mov byte ptr [ebp-4] 4 +
call sub_1003E3B  +
lea eax [ebp-208h] +
push eax  +
lea ecx [ebp-1E8h] +
call sub_1013188  +
mov eax [ebp-200h] +
mov eax [eax+4] +
mov ecx [ebp-208h] +
lea eax [eax+ecx*2] +
push eax  +
lea ecx [ebp-1F0h] +
call sub_10035A2  +
push 3  +
lea eax [ebp-1FCh] +
push eax  +
lea ecx [ebp-1F0h] +
mov byte ptr [ebp-4] 5 +
call sub_10079D6  +
push eax  +
lea ecx [ebp-1F0h] +
mov byte ptr [ebp-4] 6 +
call sub_1003FBC  +
mov ecx [ebp-1FCh] +
add ecx 0FFFFFFF0h +
call sub_1002990  +
push 0Ah  +
lea eax [ebp-24h] +
push eax  +
push edi  +
push edi  +
push edi  +
push edi  +
push edi  +
push dword ptr [ebp-1F0h]  +
call ds:GetVolumeInformationW  +
cmp eax edi +
jnz loc_101FF26  +
mov ecx [ebp-1F0h] +
add ecx 0FFFFFFF0h +
call sub_1002990  +
lea ecx [ebp-1E8h] +
mov byte ptr [ebp-4] 3 +
call sub_1003CEC  +
jmp loc_10169E1  +
***
mov eax [ebp+0Ch] +
mov ecx [eax] +
push 1  +
push eax  +
call dword ptr [ecx+3Ch]  +
mov esi eax +
cmp esi ebx +
jl loc_1016B5E  +
cmp [ebp+14h] ebx +
jz loc_1016B5E  +
mov eax [ebp+0Ch] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+40h]  +
jmp loc_1016B5E  +
***
push dword ptr [esi]  +
mov ecx edi +
call sub_101A3D3  +
mov [ebp+arg_0] eax +
mov ecx edi +
test eax eax +
jnz loc_101FD39  +
push dword ptr [edi]  +
call sub_1019FE0  +
mov [ebp+arg_0] eax +
push ebx  +
cmp [ebp+arg_0] 0 +
jz loc_101A58E  +
lea eax [ebp+arg_0] +
push eax  +
mov ecx edi +
call sub_101A3B2  +
mov ebx eax +
mov eax [esi] +
push 0  +
push eax  +
mov ecx ebx +
call sub_1016D5E  +
test eax eax +
jnz loc_101A566  +
jmp loc_101FD47  +
xor eax eax +
inc eax  +
pop ebx  +
jmp loc_1019940  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push edi  +
mov edi [ebp+arg_8] +
test eax eax +
jz loc_101A5C9  +
mov edx [ebp+arg_4] +
cmp edx 7FFFFFFFh +
ja loc_101A5C9  +
call sub_1008B3D  +
test eax eax +
jl loc_101DDD9  +
pop edi  +
pop ebp  +
retn 0Ch  +
mov eax 80070057h +
jmp loc_101A5BC  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_4]  +
call sub_100242C  +
mov esi eax +
test esi esi +
jl loc_101A64E  +
push edi  +
mov edi [ebp+arg_0] +
mov ecx edi +
call sub_10157B5  +
mov esi eax +
test esi esi +
jl loc_101A64D  +
lea eax [ebp+arg_0] +
push eax  +
call sub_1004B01  +
mov esi eax +
test esi esi +
jl loc_101A64D  +
push 0  +
push 0  +
push dword ptr [edi+24h]  +
mov edi [ebp+arg_0] +
mov ecx edi +
call sub_10048A5  +
mov esi eax +
test esi esi +
jl loc_101A640  +
push [ebp+arg_4]  +
lea ecx [ebp+arg_4] +
call sub_10035A2  +
push eax  +
mov ecx edi +
call sub_101A6FB  +
mov ecx [ebp+arg_4] +
add ecx 0FFFFFFF0h +
mov esi eax +
call sub_1002990  +
test edi edi +
jz loc_101A64D  +
mov eax [edi] +
push 1  +
mov ecx edi +
call dword ptr [eax+50h]  +
pop edi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
sub eax [esi] +
sar eax 1 +
jmp loc_1016D94  +
***
call sub_10015E0  +
mov eax dword_104A2CC +
push dword ptr [eax-0Ch]  +
mov esi [ebp+8] +
lea eax [ebp+8] +
push eax  +
mov ecx esi +
call sub_10079D6  +
push dword_104A2CC  +
mov ecx eax +
call sub_100370F  +
mov ecx [ebp+8] +
mov ebx eax +
neg ebx  +
sbb bl bl +
add ecx 0FFFFFFF0h +
inc bl  +
call sub_1002990  +
test bl bl +
jnz loc_101FAEA  +
push 1  +
lea eax [ebp+8] +
push eax  +
mov ecx esi +
call sub_10079D6  +
push 2Fh  +
push eax  +
call sub_1003D39  +
mov ecx [ebp+8] +
add ecx 0FFFFFFF0h +
mov bl al +
call sub_1002990  +
test bl bl +
jnz loc_101FB15  +
call sub_10015C0  +
retn 4  +
***
mov eax [ebp-1Ch] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+48h]  +
jmp loc_101A96E  +
mov byte ptr [ebp+0Bh] 0 +
jmp loc_101A826  +
***
call sub_10015E0  +
mov ebx ecx +
xor edi edi +
mov [ebp-14h] edi +
push dword ptr [ebp+8]  +
lea ecx [ebp-24h] +
call sub_1003F3F  +
push dword ptr [ebp-24h]  +
mov ecx [ebx+38h] +
mov [ebp-4] edi +
call sub_1007106  +
cmp eax edi +
jz loc_101FE4F  +
lea eax [ebp-24h] +
push eax  +
lea ecx [ebp-10h] +
call sub_1003F3F  +
push 1  +
lea eax [ebp-10h] +
push eax  +
mov ecx ebx +
mov byte ptr [ebp-4] 1 +
call sub_1007AE2  +
call sub_1016D22  +
mov [ebp-30h] edi +
lea eax [ebp-30h] +
push eax  +
push offset stru_1001EB4  +
push 15h  +
push edi  +
push offset rclsid  +
call ds:CoCreateInstance  +
mov esi eax +
cmp esi edi +
jnz loc_101A9DF  +
mov [ebp-2Ch] edi +
mov eax [ebx+10h] +
mov ecx [ebx+14h] +
push eax  +
push ecx  +
lea eax [ebp-2Ch] +
push eax  +
push dword ptr [ebp-30h]  +
mov byte ptr [ebp-4] 3 +
call sub_1016C29  +
mov esi eax +
cmp esi edi +
jnz loc_101A9CE  +
mov [ebp-20h] edi +
lea eax [ebp-20h] +
push eax  +
push dword ptr [ebp-2Ch]  +
mov byte ptr [ebp-4] 4 +
call sub_1016BD1  +
mov esi eax +
cmp esi edi +
jnz loc_101A9BD  +
lea eax [ebp-44h] +
push eax  +
call ds:VariantInit  +
mov eax [ebp-10h] +
cmp dword ptr [eax-0Ch] 1 +
mov byte ptr [ebp-4] 5 +
jle loc_101A6ED  +
push 1  +
lea eax [ebp-1Ch] +
push eax  +
lea ecx [ebp-10h] +
call sub_1007C5B  +
push offset dword_1003488  +
push eax  +
mov byte ptr [ebp-4] 6 +
mov dword ptr [ebp-14h] 1 +
call sub_100422D  +
test al al +
jnz loc_101A822  +
push 1  +
lea eax [ebp-28h] +
push eax  +
lea ecx [ebp-10h] +
call sub_1007C5B  +
push offset dword_1012E6C  +
push eax  +
mov dword ptr [ebp-14h] 3 +
call sub_100422D  +
test al al +
jz loc_101A6ED  +
mov byte ptr [ebp+0Bh] 1 +
test byte ptr [ebp-14h] 2 +
jz loc_101A83B  +
mov ecx [ebp-28h] +
and dword ptr [ebp-14h] 0FFFFFFFDh +
add ecx 0FFFFFFF0h +
call sub_1002990  +
test byte ptr [ebp-14h] 1 +
mov dword ptr [ebp-4] 5 +
jz loc_101A853  +
mov ecx [ebp-1Ch] +
add ecx 0FFFFFFF0h +
call sub_1002990  +
cmp byte ptr [ebp+0Bh] 0 +
jz loc_101A889  +
mov eax [ebp-10h] +
mov eax [eax-0Ch] +
dec eax  +
push eax  +
lea eax [ebp+8] +
push eax  +
lea ecx [ebp-10h] +
call sub_10079D6  +
push eax  +
lea ecx [ebp-10h] +
mov byte ptr [ebp-4] 7 +
call sub_1003FBC  +
mov ecx [ebp+8] +
add ecx 0FFFFFFF0h +
mov byte ptr [ebp-4] 5 +
call sub_1002990  +
mov eax [ebp-20h] +
mov ecx [eax] +
lea edx [ebp-34h] +
push edx  +
lea edx [ebp-44h] +
push edx  +
push 1  +
push eax  +
call dword ptr [ecx+0Ch]  +
test eax eax +
jnz loc_101A9B3  +
cmp esi edi +
jl loc_101A9B3  +
mov [ebp-1Ch] edi +
mov eax [ebp-3Ch] +
mov ecx [eax] +
lea edx [ebp-1Ch] +
push edx  +
push offset dword_101677C  +
push eax  +
mov byte ptr [ebp-4] 8 +
call dword ptr [ecx]  +
mov esi eax +
cmp esi edi +
jnz loc_101A98F  +
mov [ebp-18h] edi +
mov eax [ebp-1Ch] +
mov ecx [eax] +
lea edx [ebp-18h] +
push edx  +
push eax  +
mov byte ptr [ebp-4] 9 +
call dword ptr [ecx+1Ch]  +
lea eax [ebp+8] +
push eax  +
push 7FFFFFFFh  +
push dword ptr [ebp-18h]  +
call sub_101A59C  +
mov esi eax +
cmp esi edi +
jnz loc_101A986  +
inc dword ptr [ebp+8]  +
mov eax [ebp+8] +
push 2  +
xor ecx ecx +
pop edx  +
mul  edx +
seto cl  +
neg ecx  +
or eax ecx +
push eax  +
call off_104B7F4  +
mov edi eax +
mov esi edi +
neg esi  +
sbb esi esi +
and esi 7FF8FFF2h +
add esi 8007000Eh +
jnz loc_101A97D  +
push dword ptr [ebp-18h]  +
push dword ptr [ebp+8]  +
push edi  +
call sub_1002525  +
mov esi eax +
test esi esi +
jnz loc_101A97D  +
push edi  +
lea ecx [ebp-28h] +
call sub_10035A2  +
push 1  +
lea eax [ebp-28h] +
push eax  +
mov ecx ebx +
mov byte ptr [ebp-4] 0Ah +
call sub_1007AE2  +
push esi  +
push dword ptr [ebp-10h]  +
lea ecx [ebp-28h] +
call sub_1016D5E  +
test eax eax +
jz loc_101A6DF  +
mov ecx [ebp-28h] +
add ecx 0FFFFFFF0h +
mov byte ptr [ebp-4] 9 +
call sub_1002990  +
push edi  +
call off_104B7F0  +
xor edi edi +
push dword ptr [ebp-18h]  +
call ds:SysFreeString  +
lea eax [ebp-44h] +
push eax  +
call ds:VariantClear  +
mov eax [ebp-1Ch] +
mov byte ptr [ebp-4] 5 +
cmp eax edi +
jz loc_101A889  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_101A889  +
lea eax [ebp-44h] +
push eax  +
call ds:VariantClear  +
mov eax [ebp-20h] +
mov byte ptr [ebp-4] 3 +
cmp eax edi +
jz loc_101A9CE  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-2Ch] +
mov byte ptr [ebp-4] 2 +
cmp eax edi +
jz loc_101A9DF  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-30h] +
mov byte ptr [ebp-4] 1 +
cmp eax edi +
jz loc_101A9F0  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov ecx [ebp-10h] +
add ecx 0FFFFFFF0h +
call sub_1002990  +
mov ecx [ebp-24h] +
add ecx 0FFFFFFF0h +
call sub_1002990  +
mov eax esi +
call sub_10015C0  +
retn 4  +
***
cmp [ebp+var_14] eax +
jnz loc_101AA4B  +
mov eax [ebp+arg_0] +
mov ecx [eax] +
lea edx [ebp+var_2C] +
push edx  +
push eax  +
call dword ptr [ecx+80h]  +
mov [ebp+var_4] eax +
test eax eax +
jl loc_101AC0A  +
mov eax [ebp+var_2C] +
mov [ebp+var_14] 1 +
mov [ebp+var_1C] ebx +
mov [ebp+var_20] eax +
jmp loc_101AC0A  +
test bl bl +
jz loc_101AA9C  +
jmp loc_101AAB3  +
cmp ebx [ebp+var_1C] +
ja loc_101AA15  +
jmp loc_101AC0A  +
mov [ebp+var_4] 1 +
jmp loc_101AC6F  +
test al al +
jz loc_101AC84  +
jmp loc_101AC9B  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 40h +
cmp dword_104A3AC 0 +
push ebx  +
mov bl byte_104A3B0 +
push esi  +
push edi  +
mov edi 20000h +
mov esi 80000000h +
jz loc_101AAB3  +
cmp bl 4 +
jb loc_101AA45  +
mov eax dword_104A398 +
mov ecx dword_104A39C +
and eax edi +
and ecx esi +
or eax ecx +
jnz loc_1020160  +
cmp [ebp+arg_8] 0 +
jz loc_10201B5  +
push [ebp+arg_4]  +
call sub_100242C  +
xor edx edx +
cmp eax edx +
mov [ebp+var_4] eax +
jl loc_102021D  +
mov eax [ebp+arg_8] +
push [ebp+arg_4]  +
lea ecx [ebp+var_8] +
mov [eax] edx +
call sub_10035A2  +
lea eax [ebp+var_8] +
push eax  +
call sub_101A663  +
xor eax eax +
mov [ebp+var_14] eax +
mov [ebp+var_20] eax +
mov [ebp+var_1C] eax +
lea eax [ebp+var_28] +
push eax  +
push 7FFFFFFFh  +
push [ebp+var_8]  +
call sub_101A59C  +
mov ebx eax +
xor eax eax +
cmp ebx eax +
jl loc_1020290  +
lea ecx [ebp+ppv] +
push ecx  +
push offset stru_1001EB4  +
push 15h  +
push eax  +
push offset rclsid  +
mov [ebp+ppv] eax +
call ds:CoCreateInstance  +
xor ebx ebx +
mov [ebp+var_4] eax +
cmp eax ebx +
jnz loc_101AC59  +
mov eax [ebp+arg_0] +
mov ecx [eax+10h] +
mov eax [eax+14h] +
push ecx  +
push eax  +
lea eax [ebp+var_10] +
push eax  +
push [ebp+ppv]  +
mov [ebp+var_10] ebx +
call sub_1016C29  +
mov [ebp+var_4] eax +
cmp eax ebx +
jnz loc_101AC4C  +
lea eax [ebp+var_C] +
push eax  +
push [ebp+var_10]  +
mov [ebp+var_C] ebx +
call sub_1016BD1  +
mov [ebp+var_4] eax +
cmp eax ebx +
jnz loc_101AC3F  +
lea eax [ebp+pvarg] +
push eax  +
call ds:VariantInit  +
mov eax [ebp+var_C] +
mov ecx [eax] +
lea edx [ebp+var_30] +
push edx  +
lea edx [ebp+pvarg] +
push edx  +
push 1  +
push eax  +
call dword ptr [ecx+0Ch]  +
test eax eax +
jnz loc_101AC35  +
cmp [ebp+var_4] ebx +
jl loc_101AC35  +
mov eax dword ptr [ebp+pvarg.anonymous_0+8] +
lea edx [ebp+arg_0] +
push edx  +
push offset dword_101677C  +
mov [ebp+arg_0] ebx +
mov ecx [eax] +
push eax  +
call dword ptr [ecx]  +
mov [ebp+var_4] eax +
cmp eax ebx +
jnz loc_101AC15  +
mov eax [ebp+arg_0] +
lea edx [ebp+arg_4] +
push edx  +
mov [ebp+arg_4] ebx +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+1Ch]  +
lea eax [ebp+var_24] +
push eax  +
push 7FFFFFFFh  +
push [ebp+arg_4]  +
call sub_101A59C  +
mov [ebp+var_4] eax +
cmp eax ebx +
jnz loc_101AC0C  +
mov ebx [ebp+var_24] +
cmp ebx [ebp+var_28] +
ja loc_101AC0A  +
push ebx  +
push [ebp+var_8]  +
push [ebp+arg_4]  +
call ds:__imp__wcsnicmp  +
add esp 0Ch +
test eax eax +
jz loc_101AA10  +
xor ebx ebx +
push [ebp+arg_4]  +
call ds:SysFreeString  +
lea eax [ebp+pvarg] +
push eax  +
call ds:VariantClear  +
mov eax [ebp+arg_0] +
cmp eax ebx +
jz loc_101AB83  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_101AB83  +
lea eax [ebp+pvarg] +
push eax  +
call ds:VariantClear  +
mov eax [ebp+var_C] +
cmp eax ebx +
jz loc_101AC4C  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+var_10] +
cmp eax ebx +
jz loc_101AC59  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
cmp [ebp+var_4] ebx +
jl loc_101AC6F  +
cmp [ebp+var_14] ebx +
jz loc_101AA55  +
mov eax [ebp+var_20] +
mov ecx [ebp+arg_8] +
mov [ecx] eax +
cmp dword_104A3AC ebx +
jz loc_101AC9B  +
mov al byte_104A3B0 +
cmp al 4 +
jb loc_101AA61  +
mov eax dword_104A398 +
mov ecx dword_104A39C +
and eax edi +
and ecx esi +
or eax ecx +
jnz loc_1020301  +
mov eax [ebp+ppv] +
cmp eax ebx +
jz loc_101ACA8  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov ecx [ebp+var_8] +
add ecx 0FFFFFFF0h +
call sub_1002990  +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov eax [esi] +
push edi  +
mov edi [ebp+arg_0] +
cmp eax edi +
jz loc_101ACDD  +
push eax  +
call ds:SysFreeString  +
mov [esi] edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov eax ecx +
and dword ptr [eax] 0 +
and dword ptr [eax+4] 0 +
or dword ptr [eax+8] 0FFFFFFFFh +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
mov esi ecx +
mov [esi] eax +
test eax eax +
jz loc_101AD12  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
mov eax [ebp+arg_0] +
mov ecx [eax] +
push offset dword_101AD38  +
push eax  +
call dword ptr [ecx]  +
pop ebp  +
retn 8  +
***
call sub_1002A3A  +
mov esi ecx +
xor ebx ebx +
cmp [esi+0Ch] ebx +
jnz loc_101C3FB  +
mov eax dword_104A064 +
add eax 10h +
mov [ebp-234h] eax +
push eax  +
mov [ebp-4] ebx +
call ds:EnterCriticalSection  +
mov byte ptr [ebp-230h] 1 +
mov dword ptr [ebp-21Ch] 80004005h +
cmp [esi+0Ch] ebx +
jnz loc_101AEEE  +
mov edi [esi+4] +
push edi  +
push offset unk_104BAB0  +
mov [ebp-22Ch] ebx +
call sub_1001799  +
test eax eax +
jnz loc_101C40B  +
lea eax [ebp-22Ch] +
push eax  +
push dword ptr [ebp+8]  +
movzx eax word ptr [esi+0Ah] +
push eax  +
movzx eax word ptr [esi+8] +
push eax  +
push edi  +
call ds:LoadRegTypeLib  +
mov [ebp-21Ch] eax +
cmp [ebp-21Ch] ebx +
jl loc_101AEBA  +
mov [ebp-224h] ebx +
mov eax [ebp-22Ch] +
mov ecx [eax] +
lea edx [ebp-224h] +
push edx  +
push dword ptr [esi]  +
mov byte ptr [ebp-4] 1 +
push eax  +
call dword ptr [ecx+18h]  +
cmp eax ebx +
mov [ebp-21Ch] eax +
jl loc_101AE9B  +
push dword ptr [ebp-224h]  +
lea ecx [ebp-228h] +
call sub_101ACFB  +
mov [ebp-220h] ebx +
lea eax [ebp-220h] +
push eax  +
push dword ptr [ebp-224h]  +
mov byte ptr [ebp-4] 3 +
call sub_101AD1E  +
test eax eax +
jl loc_101AE55  +
lea eax [ebp-220h] +
push eax  +
lea ecx [ebp-228h] +
call sub_101B059  +
mov eax [ebp-228h] +
push esi  +
mov [esi+0Ch] eax +
mov ecx dword_104A064 +
push offset loc_102BE50  +
mov [ebp-228h] ebx +
call sub_101B0EF  +
mov eax [ebp-220h] +
mov byte ptr [ebp-4] 2 +
cmp eax ebx +
jz loc_101AE89  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-228h] +
mov byte ptr [ebp-4] 1 +
cmp eax ebx +
jnz loc_101C47F  +
mov eax [ebp-22Ch] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-224h] +
mov [ebp-4] bl +
cmp eax ebx +
jz loc_101AEBA  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [esi+0Ch] +
cmp eax ebx +
jz loc_101AED4  +
cmp [esi+14h] ebx +
jnz loc_101AED4  +
push eax  +
mov ecx esi +
call sub_101AEFB  +
mov [ebp-21Ch] eax +
push dword ptr [ebp-234h]  +
call ds:LeaveCriticalSection  +
mov eax [ebp-21Ch] +
call sub_1002A77  +
retn 4  +
mov [ebp-21Ch] ebx +
jmp loc_101AEBA  +
***
call sub_1001862  +
mov ebx ecx +
mov [ebp-18h] ebx +
mov edi [ebp+8] +
mov eax [edi] +
lea ecx [ebp-24h] +
push ecx  +
push edi  +
call dword ptr [eax+0Ch]  +
xor ecx ecx +
cmp eax ecx +
jl loc_101B043  +
mov eax [ebp-24h] +
movzx eax word ptr [eax+2Ch] +
mov esi eax +
mov [ebp-1Ch] ecx +
mov [ebx+18h] eax +
mov [ebx+14h] ecx +
cmp esi ecx +
jz loc_101AF98  +
push 0Ch  +
pop edx  +
mul  edx +
mov [ebp-4] ecx +
seto cl  +
neg ecx  +
or ecx eax +
xor eax eax +
add ecx 4 +
setb al  +
neg eax  +
or eax ecx +
push eax  +
call off_104B7F4  +
mov [ebp-20h] eax +
mov byte ptr [ebp-4] 1 +
test eax eax +
jz loc_101B04D  +
push offset loc_1025B45  +
push offset loc_101ACE8  +
push esi  +
lea edi [eax+4] +
push 0Ch  +
push edi  +
mov [eax] esi +
call sub_1002AF6  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov [ebp-1Ch] edi +
cmp dword ptr [ebp-1Ch] 0 +
jz loc_101C1DB  +
mov edi [ebp+8] +
xor ecx ecx +
cmp [ebx+18h] ecx +
mov [ebp-18h] ecx +
jle loc_101B034  +
mov esi [ebp-1Ch] +
add esi 8 +
mov [esi-4] ecx +
mov [esi] ecx +
mov eax [edi] +
lea ecx [ebp-20h] +
push ecx  +
push dword ptr [ebp-18h]  +
push edi  +
call dword ptr [eax+14h]  +
test eax eax +
jl loc_101B01F  +
xor eax eax +
mov [ebp-14h] eax +
mov ecx [edi] +
push eax  +
push eax  +
push eax  +
lea eax [ebp-14h] +
push eax  +
mov eax [ebp-20h] +
push dword ptr [eax]  +
mov dword ptr [ebp-4] 3 +
push edi  +
call dword ptr [ecx+30h]  +
test eax eax +
jl loc_101B009  +
mov eax [ebp-14h] +
and dword ptr [ebp-14h] 0 +
lea edi [esi-8] +
push eax  +
mov ecx edi +
call sub_101ACC2  +
push dword ptr [edi]  +
call ds:SysStringLen  +
mov edi [ebp+8] +
mov [esi-4] eax +
mov eax [ebp-20h] +
mov eax [eax] +
mov [esi] eax +
push dword ptr [ebp-20h]  +
mov eax [edi] +
push edi  +
call dword ptr [eax+50h]  +
push dword ptr [ebp-14h]  +
or dword ptr [ebp-4] 0FFFFFFFFh +
call ds:SysFreeString  +
inc dword ptr [ebp-18h]  +
mov eax [ebp-18h] +
add esi 0Ch +
cmp eax [ebx+18h] +
jge loc_101B034  +
xor ecx ecx +
jmp loc_101AFAA  +
mov eax [ebp-1Ch] +
push dword ptr [ebp-24h]  +
mov [ebx+14h] eax +
mov eax [edi] +
push edi  +
call dword ptr [eax+4Ch]  +
xor eax eax +
call sub_10015C0  +
retn 4  +
xor edi edi +
jmp loc_101AF82  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
push dword ptr [esi]  +
mov edi ecx +
call sub_101B081  +
test al al +
jz loc_101C3CD  +
mov eax [edi] +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax [ecx] +
push edi  +
test eax eax +
jz loc_101C35F  +
mov edi [ebp+arg_0] +
test edi edi +
jz loc_101B0E6  +
and [ebp+var_4] 0 +
and [ebp+var_8] 0 +
mov ecx [eax] +
push esi  +
lea edx [ebp+var_4] +
push edx  +
mov esi offset dword_1008B78 +
push esi  +
push eax  +
call dword ptr [ecx]  +
mov eax [edi] +
lea ecx [ebp+var_8] +
push ecx  +
push esi  +
push edi  +
call dword ptr [eax]  +
mov eax [ebp+var_8] +
cmp [ebp+var_4] eax +
pop esi  +
setz byte ptr [ebp+arg_0+3]  +
test eax eax +
jz loc_101B0D1  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+var_4] +
test eax eax +
jz loc_101B0DE  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov al byte ptr [ebp+arg_0+3] +
pop edi  +
leave   +
retn 4  +
xor al al +
jmp loc_101B0E1  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
mov eax ecx +
push [ebp+arg_0]  +
add ecx 4 +
neg eax  +
sbb eax eax +
and eax ecx +
push eax  +
call sub_101B114  +
pop ebp  +
retn 8  +
***
call sub_1001862  +
mov edi [ebp+8] +
test edi edi +
jz loc_101C3A6  +
and dword ptr [ebp-14h] 0 +
and dword ptr [ebp-4] 0 +
push 0Ch  +
call off_104B7F4  +
mov esi eax +
test esi esi +
jz loc_101C3C1  +
mov eax [ebp+0Ch] +
mov [esi] eax +
mov eax [ebp+10h] +
mov [esi+4] eax +
lea ebx [edi+0Ch] +
push ebx  +
call ds:EnterCriticalSection  +
mov eax [edi+8] +
and dword ptr [ebp+8] 0 +
mov [esi+8] eax +
push ebx  +
mov [edi+8] esi +
call ds:LeaveCriticalSection  +
mov eax [ebp+8] +
call sub_10015C0  +
retn 0Ch  +
***
popa   +
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_14]  +
mov ecx offset off_104A2E0 +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
call sub_101B1B8  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push ebx  +
push [ebp+arg_C]  +
mov ebx ecx +
call sub_101B2BD  +
cmp dword ptr [ebx+0Ch] 0 +
jz loc_101B263  +
cmp dword ptr [ebx+14h] 0 +
push esi  +
push edi  +
jz loc_101C52F  +
cmp [ebp+arg_8] 1 +
jnz loc_101C52F  +
mov eax [ebp+arg_4] +
push dword ptr [eax]  +
call ds:lstrlenW  +
mov edx [ebx+18h] +
dec edx  +
mov [ebp+var_8] eax +
js loc_101C52F  +
mov ecx [ebx+14h] +
mov eax edx +
imul eax eax +
mov [ebp+var_C] ecx +
lea ecx [eax+ecx+4] +
mov [ebp+arg_C] eax +
mov [ebp+var_4] ecx +
mov eax [ebp+var_8] +
cmp eax [ecx] +
jz loc_101B236  +
mov ecx [ebp+var_4] +
sub [ebp+arg_C] 0Ch +
dec edx  +
sub ecx 0Ch +
mov [ebp+var_4] ecx +
test edx edx +
jge loc_101B218  +
jmp loc_101C52F  +
mov ecx [ebp+arg_C] +
mov eax [ebx+14h] +
mov esi [ebp+arg_4] +
mov edi [esi] +
add eax ecx +
mov ecx [eax+4] +
mov esi [eax] +
add ecx ecx +
xor eax eax +
cmps   +
jnz loc_101B21F  +
mov eax [ebp+var_C] +
imul edx edx +
mov eax [edx+eax+8] +
mov ecx [ebp+arg_10] +
mov [ecx] eax +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx offset off_104A2E0 +
pop ebp  +
jmp loc_101B27F  +
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_C]  +
mov esi ecx +
call sub_101B2BD  +
cmp dword ptr [esi+0Ch] 0 +
jz loc_101B2B3  +
push [ebp+arg_20]  +
mov eax [esi+0Ch] +
push [ebp+arg_1C]  +
mov ecx [eax] +
push [ebp+arg_18]  +
push [ebp+arg_14]  +
push [ebp+arg_10]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push eax  +
call dword ptr [ecx+2Ch]  +
pop esi  +
pop ebp  +
retn 24h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
cmp [ecx+0Ch] eax +
jz loc_101AD48  +
cmp [ecx+14h] eax +
jz loc_101AD48  +
pop ebp  +
retn 4  +
***
cmp dword ptr [ebp+0Ch] 4 +
jz loc_101B2EA  +
cmp dword ptr [ebp+0Ch] 7 +
jnz loc_1008A71  +
push 1Eh  +
call sub_1008AD9  +
jmp loc_1008A71  +
***
test al al +
jz loc_1008A06  +
jmp loc_1008A27  +
***
xor esi esi +
jmp loc_10125F4  +
***
test al al +
jz loc_100C12F  +
jmp loc_100C17B  +
***
cmp edi 0Fh +
jz loc_100C19A  +
jmp loc_100C1A5  +
***
test al al +
jz loc_1008A88  +
jmp loc_1008AA9  +
***
mov eax [ecx+0B8h] +
test eax eax +
jz loc_101C270  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+18h]  +
retn   +
***
mov ecx off_104B7E4 +
mov eax [ecx] +
call dword ptr [eax+44h]  +
jmp loc_1012671  +
***
test eax eax +
jnz loc_1012664  +
jmp loc_1012670  +
***
mov edi edi +
mov eax [esp+arg_4] +
mov ecx [esp+arg_C] +
or ecx eax +
mov ecx [esp+arg_8] +
jnz loc_101B3A5  +
mov eax [esp+arg_0] +
mul  ecx +
retn 10h  +
push ebx  +
mul  ecx +
mov ebx eax +
mov eax [esp+4+arg_0] +
mul  [esp+4+arg_C] +
add ebx eax +
mov eax [esp+4+arg_0] +
mul  ecx +
add edx ebx +
pop ebx  +
retn 10h  +
***
inc edi  +
mov edx [esp+arg_0] +
neg eax  +
neg edx  +
sbb eax 0 +
mov [esp+arg_4] eax +
mov [esp+arg_0] edx +
jmp loc_100A21B  +
inc edi  +
mov edx [esp+arg_8] +
neg eax  +
neg edx  +
sbb eax 0 +
mov [esp+arg_C] eax +
mov [esp+arg_8] edx +
jmp loc_100A227  +
mov ebx eax +
mov ecx [esp+arg_8] +
mov edx [esp+arg_4] +
mov eax [esp+arg_0] +
shr ebx 1 +
rcr ecx 1 +
shr edx 1 +
rcr eax 1 +
or ebx ebx +
jnz loc_101B400  +
div  ecx +
mov esi eax +
mul  [esp+arg_C] +
mov ecx eax +
mov eax [esp+arg_8] +
mul  esi +
add edx ecx +
jb loc_101B42E  +
cmp edx [esp+arg_4] +
ja loc_101B42E  +
jb loc_101B42F  +
cmp eax [esp+arg_0] +
jbe loc_101B42F  +
dec esi  +
xor edx edx +
mov eax esi +
jmp loc_100A245  +
neg edx  +
neg eax  +
sbb edx 0 +
jmp loc_100A24C  +
***
test cx cx +
jz loc_101B466  +
mov cx [eax+2] +
cmp cx [edx+2] +
jnz loc_100B59D  +
add eax 4 +
add edx 4 +
test cx cx +
jnz loc_100B591  +
xor eax eax +
jmp loc_100B5A2  +
***
sub eax 20h +
jmp loc_100B6B8  +
***
call sub_1025B53  +
mov [ebp+var_4] eax +
jmp loc_100B671  +
***
push 8007000Eh  +
call loc_1025B15  +
int 3  +
or [ebp+var_214] 0FFFFFFFFh +
jmp loc_100AC63  +
***
cmp dx bx +
jz loc_101B4B9  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_100B030  +
add eax edi +
add ecx edi +
cmp dx bx +
jnz loc_100B024  +
xor eax eax +
jmp loc_100B035  +
***
mov esi 80004005h +
jmp loc_100B8DD  +
***
lea ecx [ebp+var_20] +
mov [ebp+var_1] 1 +
call sub_100B1E1  +
mov ecx esi +
mov [ebp+var_14] eax +
call sub_10122CB  +
mov eax [esi+4] +
cmp eax ebx +
jz loc_101B4F8  +
mov ecx [ebp+var_10] +
push eax  +
call sub_1025BE1  +
cmp [ebp+var_8] ebx +
jl loc_101B4F8  +
mov [ebp+var_8] eax +
mov eax [ebp+var_C] +
cmp eax ebx +
jz loc_101B506  +
add eax 630h +
jmp loc_101B508  +
xor eax eax +
lea ecx [esi+630h] +
push ecx  +
push eax  +
mov ecx edi +
call sub_1025C29  +
push 1  +
mov ecx esi +
call sub_10122A5  +
mov esi [ebp+var_14] +
cmp esi ebx +
jnz loc_100B406  +
jmp loc_100B431  +
***
mov byte ptr [esi+213h] 0 +
call sub_1025B53  +
mov edi eax +
jmp loc_100AE9F  +
***
mov eax [esi] +
push esi  +
call dword ptr [eax+8]  +
jmp loc_1011EC6  +
***
call sub_1025B53  +
mov [ebp+var_34] eax +
jmp loc_100B4A9  +
call sub_1025B53  +
mov [ebp+var_34] eax +
jmp loc_100B4EC  +
***
mov byte ptr [esi+212h] 1 +
jmp loc_100B1BB  +
push 1  +
call sub_10122A5  +
jmp loc_100B1BB  +
***
call ds:__imp_GetLastError  +
mov edi eax +
jmp loc_100B3BA  +
***
call sub_100F56E  +
or dword ptr [ebx+4] 0FFFFFFFFh +
mov [ebp+var_28] eax +
jmp loc_100B311  +
***
mov [ecx] eax +
jmp loc_100A2C6  +
***
cmp eax 0Ch +
jz loc_101B5CE  +
cmp eax 16h +
jz loc_101B5C7  +
cmp eax 22h +
jz loc_101B5C7  +
cmp eax 50h +
jz loc_1003CE3  +
push 80004005h  +
call loc_1025B15  +
push 80070057h  +
jmp loc_101B5C2  +
push 8007000Eh  +
jmp loc_101B5C2  +
***
push 0FFFFFFFFh  +
push [ebp+lpString2]  +
push 0FFFFFFFFh  +
push [ebp+lpString1]  +
push 1  +
push 7Fh  +
call ds:CompareStringW  +
dec eax  +
dec eax  +
pop ebp  +
retn 8  +
***
test [ebp+dwCmpFlags] 1 +
jz loc_101B613  +
cmp edi esi +
jge loc_101B5FE  +
mov esi edi +
push esi  +
push [ebp+lpString2]  +
push [ebp+lpString1]  +
call ds:__imp__wcsnicmp  +
add esp 0Ch +
jmp loc_1003597  +
cmp edi esi +
jge loc_101B619  +
mov esi edi +
push esi  +
push [ebp+lpString2]  +
push [ebp+lpString1]  +
call ds:__imp_wcsncmp  +
jmp loc_101B60B  +
***
push eax  +
push 400h  +
push dword ptr [ebp+8]  +
call sub_100FA83  +
jmp loc_100A2F3  +
***
call loc_1026210  +
int 3  +
***
mov eax 80004003h +
jmp loc_1001846  +
push dword ptr [esi+4]  +
push ebx  +
push [ebp+arg_8]  +
push [ebp+arg_0]  +
call edi  +
test eax eax +
jz loc_1001846  +
cmp [ebp+arg_4] 0 +
jz loc_1001ADE  +
jmp loc_100183C  +
***
and dword ptr [esi] 0 +
jmp loc_1008862  +
push 8007000Eh  +
call loc_1025B15  +
int 3  +
pop esi  +
retn   +
***
push 800700CEh  +
lea ecx [ebp+var_20] +
call sub_1026AE1  +
mov esi eax +
lea edi [ebp+var_10] +
movs   +
movs   +
movs   +
push offset dword_10458FC  +
lea eax [ebp+var_10] +
push eax  +
movs   +
call _CxxThrowException  +
***
push 800700CEh  +
lea ecx [ebp+var_20] +
call sub_1026AE1  +
mov esi eax +
lea edi [ebp+var_10] +
movs   +
movs   +
movs   +
push offset dword_10458FC  +
lea eax [ebp+var_10] +
push eax  +
movs   +
call _CxxThrowException  +
cmp [ebp+var_6C] 4 +
jnz loc_101B6F8  +
mov eax [ebp+var_70] +
test eax eax +
jz loc_101B6F8  +
lea ecx [eax-1] +
mov dword ptr [esi] 1 +
cmp ecx 6 +
ja loc_101B6ED  +
mov [edi] eax +
jmp loc_100FC3E  +
mov dword ptr [edi] 67h +
jmp loc_100FC3E  +
and dword ptr [esi] 0 +
and dword ptr [edi] 0 +
push offset aRebuildindex  +
push [ebp+hKey]  +
call ds:RegDeleteValueW  +
jmp loc_100FC3E  +
call sub_1026C9C  +
jmp loc_100FC4D  +
***
mov eax offset loc_101B72B +
retn   +
mov esi [ebp+8] +
xor edi edi +
mov eax edi +
jmp loc_100263E  +
***
call sub_1026F3F  +
call sub_1026F3F  +
mov esi [ebp+0Ch] +
push 7D0h  +
lea eax [ebp-18h] +
push eax  +
mov ecx esi +
mov dword ptr [ebp-4] 2 +
call sub_102629D  +
mov eax [esi] +
push 0FFFFFFFFh  +
push dword ptr [esi+0Ch]  +
mov ecx esi +
push offset a129  +
call dword ptr [eax+10h]  +
lea ecx [ebp-18h] +
call sub_10261EA  +
jmp loc_100AD6D  +
***
sub esp 94h +
lea eax [ebp-1CCh] +
mov ecx esp +
mov [ebp-308h] esp +
push eax  +
call sub_100EA61  +
lea eax [ebp-0A4h] +
push eax  +
call sub_100DC9B  +
mov eax [eax+4] +
push 0FFFFFFFFh  +
push ebx  +
push eax  +
mov eax [ebp-1CCh] +
lea ecx [ebp-1CCh] +
mov byte ptr [ebp-4] 4 +
call dword ptr [eax+10h]  +
lea ecx [ebp-0A4h] +
mov byte ptr [ebp-4] 3 +
call sub_10084DE  +
sub esp 94h +
lea eax [ebp-1CCh] +
mov ecx esp +
mov [ebp-308h] esp +
push eax  +
call sub_100EA61  +
lea eax [ebp-0A4h] +
push eax  +
call sub_1031A4D  +
mov eax [eax+4] +
push 0FFFFFFFFh  +
push ebx  +
push eax  +
mov eax [ebp-1CCh] +
lea ecx [ebp-1CCh] +
mov byte ptr [ebp-4] 5 +
call dword ptr [eax+10h]  +
lea ecx [ebp-0A4h] +
mov byte ptr [ebp-4] 3 +
call sub_10084DE  +
mov edi offset aFile +
push edi  +
lea ecx [ebp-260h] +
call sub_1009D0D  +
push dword ptr [ebp-1C0h]  +
mov eax [ebp-260h] +
push dword ptr [ebp-254h]  +
lea ecx [ebp-260h] +
push dword ptr [ebp-1C8h]  +
mov byte ptr [ebp-4] 6 +
call dword ptr [eax+10h]  +
mov eax [ebp-260h] +
push 0FFFFFFFFh  +
push dword ptr [ebp-254h]  +
mov esi offset asc_1007D24 +
push esi  +
lea ecx [ebp-260h] +
call dword ptr [eax+10h]  +
mov eax [ebp-304h] +
push dword ptr [ebp-25Ch]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+24h]  +
cmp eax ebx +
mov [ebp-308h] eax +
jl loc_101BE00  +
lea ecx [ebp-138h] +
call sub_100A0C7  +
lea eax [ebp-138h] +
push eax  +
push offset aDatadirectory  +
lea ecx [ebp-300h] +
mov byte ptr [ebp-4] 7 +
call sub_100A8AC  +
test eax eax +
jz loc_101BDC9  +
sub esp 94h +
lea eax [ebp-138h] +
mov ecx esp +
mov [ebp-308h] esp +
push eax  +
call sub_100EA61  +
lea eax [ebp-39Ch] +
push eax  +
call sub_100DC9B  +
mov eax [eax+4] +
push 0FFFFFFFFh  +
push ebx  +
push eax  +
mov eax [ebp-138h] +
lea ecx [ebp-138h] +
mov byte ptr [ebp-4] 8 +
call dword ptr [eax+10h]  +
lea ecx [ebp-39Ch] +
mov byte ptr [ebp-4] 7 +
call sub_10084DE  +
sub esp 94h +
lea eax [ebp-138h] +
mov ecx esp +
mov [ebp-308h] esp +
push eax  +
call sub_100EA61  +
lea eax [ebp-39Ch] +
push eax  +
call sub_1031A4D  +
mov eax [eax+4] +
push 0FFFFFFFFh  +
push ebx  +
push eax  +
mov eax [ebp-138h] +
lea ecx [ebp-138h] +
mov byte ptr [ebp-4] 9 +
call dword ptr [eax+10h]  +
lea ecx [ebp-39Ch] +
mov byte ptr [ebp-4] 7 +
call sub_10084DE  +
push edi  +
lea ecx [ebp-0A4h] +
call sub_1009D0D  +
push dword ptr [ebp-12Ch]  +
mov eax [ebp-0A4h] +
push dword ptr [ebp-98h]  +
lea ecx [ebp-0A4h] +
push dword ptr [ebp-134h]  +
mov byte ptr [ebp-4] 0Ah +
call dword ptr [eax+10h]  +
mov eax [ebp-0A4h] +
push 0FFFFFFFFh  +
push dword ptr [ebp-98h]  +
lea ecx [ebp-0A4h] +
push esi  +
call dword ptr [eax+10h]  +
mov eax [ebp-304h] +
push dword ptr [ebp-0A0h]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+24h]  +
mov eax [ebp-304h] +
mov ecx [eax] +
push ebx  +
push ebx  +
push dword ptr [ebp-0A0h]  +
push eax  +
call dword ptr [ecx+0Ch]  +
lea ecx [ebp-0A4h] +
mov [ebp-308h] eax +
call sub_10084DE  +
lea ecx [ebp-138h] +
mov byte ptr [ebp-4] 6 +
call sub_10084DE  +
cmp [ebp-308h] ebx +
jl loc_101BE00  +
mov eax [ebp-304h] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+40h]  +
cmp eax ebx +
jl loc_101BE00  +
push offset aOlddatadirecto  +
lea ecx [ebp-300h] +
call sub_100FD89  +
lea ecx [ebp-260h] +
call sub_10084DE  +
jmp loc_100B9B8  +
***
mov eax dword_104A3A0 +
mov ebx dword_104A3A4 +
mov ecx eax +
mov edx ebx +
and ecx edi +
and edx esi +
cmp ecx eax +
jnz loc_100BAAC  +
cmp edx ebx +
jnz loc_100BAAC  +
push offset dword_101C098  +
push dword_104A134  +
push dword_104A130  +
call sub_100A01E  +
jmp loc_100BAAC  +
***
mov eax [ebp-1A00h] +
push dword ptr [eax+30h]  +
lea ecx [ebp-11E4h] +
call sub_100A2FC  +
lea ecx [ebp-8A4h] +
mov [ebp-4] ebx +
call sub_100A0E6  +
lea ecx [ebp-19F8h] +
call sub_100A0E6  +
lea eax [ebp-19F8h] +
push eax  +
push dword ptr [ebp+0Ch]  +
mov byte ptr [ebp-4] 2 +
call sub_1029D2F  +
push ebx  +
push dword ptr [ebp-19F4h]  +
lea eax [ebp-11E4h] +
push 400003ECh  +
push eax  +
call sub_100A3F1  +
add esp 10h +
push 1  +
mov ebx 0B83h +
push ebx  +
call sub_1002C0D  +
and dword ptr [ebp-1A00h] 0 +
lea eax [ebp-8A4h] +
push eax  +
lea eax [ebp-1A00h] +
push eax  +
call sub_102A9BD  +
xor ecx ecx +
cmp eax ecx +
mov [ebp-19FCh] eax +
jl loc_101BF70  +
push ecx  +
lea eax [ebp-11E4h] +
push 400003EDh  +
push eax  +
call sub_100A3F1  +
add esp 0Ch +
push 2  +
push ebx  +
call sub_1002C0D  +
cmp dword_104A3AC 0 +
jz loc_101C06A  +
mov al byte_104A3B0 +
cmp al 4 +
jnb loc_101BF1B  +
test al al +
jnz loc_101C06A  +
mov eax dword_104A398 +
mov ecx dword_104A39C +
and eax edi +
and ecx esi +
or eax ecx +
jz loc_101C06A  +
mov eax dword_104A3A0 +
mov ecx eax +
and ecx edi +
mov edi dword_104A3A4 +
mov edx edi +
and edx esi +
cmp ecx eax +
jnz loc_101C06A  +
cmp edx edi +
jnz loc_101C06A  +
push offset dword_101C0A8  +
push dword_104A134  +
push dword_104A130  +
call sub_100A01E  +
jmp loc_101C06A  +
cmp [ebp-898h] ecx +
jnz loc_101BFA6  +
push ecx  +
lea ecx [ebp-1A08h] +
call sub_1026F3F  +
push 7D1h  +
lea eax [ebp-1A08h] +
push eax  +
lea ecx [ebp-8A4h] +
call sub_102629D  +
lea ecx [ebp-1A08h] +
call sub_10261EA  +
push dword ptr [ebp-1A00h]  +
lea eax [ebp-90h] +
push offset aD  +
push 20h  +
push eax  +
call sub_100A257  +
push dword ptr [ebp-19FCh]  +
lea eax [ebp-50h] +
push offset a0xX  +
push 20h  +
push eax  +
call sub_100A257  +
push 0  +
push dword ptr [ebp-8A0h]  +
lea eax [ebp-50h] +
push eax  +
lea eax [ebp-90h] +
push eax  +
lea eax [ebp-11E4h] +
push 0C00003EEh  +
push eax  +
call sub_1026388  +
add esp 38h +
push 3  +
push ebx  +
call sub_1002C0D  +
cmp dword_104A3AC 0 +
jz loc_101C06A  +
mov al byte_104A3B0 +
cmp al 4 +
jnb loc_101C01A  +
test al al +
jnz loc_101C06A  +
mov eax dword_104A398 +
mov ecx dword_104A39C +
and eax edi +
and ecx esi +
or eax ecx +
jz loc_101C06A  +
mov eax dword_104A3A0 +
mov ecx eax +
and ecx edi +
mov edi dword_104A3A4 +
mov edx edi +
and edx esi +
cmp ecx eax +
jnz loc_101C06A  +
cmp edx edi +
jnz loc_101C06A  +
push dword ptr [ebp-8A0h]  +
push dword ptr [ebp-19FCh]  +
push offset dword_101C0B8  +
push dword_104A134  +
push dword_104A130  +
call sub_1026426  +
lea ecx [ebp-19F8h] +
call sub_1009FC5  +
lea ecx [ebp-8A4h] +
call sub_1009FC5  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-11E4h] +
call sub_100C0D9  +
jmp loc_100BAF5  +
***
mov eax [ebp-14h] +
mov eax [eax] +
mov eax [eax] +
xor ecx ecx +
cmp eax 0C0000017h +
setz cl  +
mov eax ecx +
retn   +
***
mov esp [ebp-18h] +
mov dword ptr [ebp-1Ch] 8007000Eh +
jmp loc_100FF9D  +
***
mov [eax+24h] ecx +
mov [eax+28h] cl +
mov [eax+10h] ecx +
mov [eax+14h] ecx +
mov [eax+18h] ecx +
jmp loc_100C823  +
***
xor eax eax +
jmp loc_100C852  +
***
xor eax eax +
jmp loc_1011A77  +
***
push dword ptr [esi+18h]  +
call off_104B7F0  +
test [ebp+arg_0] 1 +
jz loc_101C123  +
push esi  +
call off_104B7F0  +
mov eax esi +
jmp loc_10145F2  +
***
call ds:__imp_GetLastError  +
test eax eax +
jle loc_1010168  +
and eax 0FFFFh +
or eax 80070000h +
jmp loc_1010168  +
***
push 80070057h  +
call loc_1025B15  +
int 3  +
push eax  +
push 0C0h  +
push [ebp+arg_0]  +
call sub_100FA83  +
jmp loc_1003E32  +
***
call sub_102BAC6  +
int 3  +
mov byte_104BB7C 1 +
jmp loc_10105E9  +
***
push [ebp+arg_8]  +
call sub_10017B9  +
test eax eax +
jnz loc_1001B19  +
mov eax 80040110h +
jmp loc_1001B26  +
***
or dword ptr [ebp-4] 0FFFFFFFFh +
mov eax offset loc_101C1D3 +
retn   +
mov ebx [ebp-18h] +
jmp loc_101AF89  +
***
mov eax [ebp+8] +
push dword ptr [ebp-24h]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4Ch]  +
mov eax 8007000Eh +
jmp loc_101B045  +
***
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_10125B8  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_10125C7  +
mov eax [esi] +
push esi  +
call dword ptr [eax+8]  +
jmp loc_10125D6  +
***
retf 0D78Bh  +
***
mov eax 80004005h +
retn   +
***
mov eax offset loc_101C28E +
retn   +
jmp loc_100ADD7  +
***
cmp [ecx+0Ch] eax +
jge loc_101C2A5  +
push eax  +
mov ecx esi +
call sub_10032EF  +
jmp loc_1006BC4  +
call sub_1002990  +
mov eax [edi] +
mov ecx edi +
call dword ptr [eax+0Ch]  +
add eax 10h +
mov [esi] eax +
jmp loc_1006BC4  +
***
push 80004005h  +
call loc_1025B15  +
int 3  +
***
or dword ptr [ebp-4] 0FFFFFFFFh +
mov eax offset loc_101C2DA +
retn   +
mov esi [ebp-18h] +
jmp loc_100288A  +
***
mov eax [esi] +
push 1  +
mov ecx esi +
call dword ptr [eax+40h]  +
jmp loc_10028A4  +
***
or dword ptr [ebp-4] 0FFFFFFFFh +
mov eax offset loc_101C304 +
retn   +
mov esi [ebp-18h] +
jmp loc_10194E8  +
***
mov eax [esi] +
push 1  +
mov ecx esi +
call dword ptr [eax+64h]  +
jmp loc_1019502  +
***
mov esi edx +
jmp loc_100316E  +
add edx eax +
jmp loc_10130F4  +
***
mov edx [eax] +
push 2  +
push dword ptr [esi+4]  +
mov ecx eax +
call dword ptr [edx]  +
mov edi eax +
test edi edi +
jnz loc_101C33E  +
call sub_102BAC6  +
mov eax [esi+4] +
mov [edi+4] eax +
mov eax [esi+4] +
inc eax  +
push eax  +
add esi 10h +
push esi  +
push eax  +
lea eax [edi+10h] +
push eax  +
call sub_1003200  +
add esp 10h +
jmp loc_1003F95  +
***
cmp [ebp+arg_0] eax +
jnz loc_101B0E6  +
mov al 1 +
jmp loc_101B0E1  +
***
push edi  +
call sub_102BCD5  +
and dword ptr [esi+0Ch] 0 +
jmp loc_1011E55  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_1011E60  +
***
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_1011E15  +
mov eax [esi] +
cmp eax edi +
jz loc_101C39E  +
push edi  +
call dword ptr [eax+20h]  +
add esi 4 +
jmp loc_1011E27  +
***
mov eax offset loc_101C3B6 +
retn   +
mov edi [ebp+8] +
mov esi [ebp-14h] +
jmp loc_101B13D  +
***
mov dword ptr [ebp+8] 8007000Eh +
jmp loc_101B16E  +
***
mov esi [esi] +
push offset dword_101C3E0  +
push esi  +
push edi  +
call sub_102BD9A  +
jmp loc_101B076  +
***
push 80004005h  +
call loc_1025B15  +
int 3  +
cmp [esi+14h] ebx +
jz loc_101AD6A  +
xor eax eax +
jmp loc_101AEE6  +
***
mov eax 0FFFFh +
mov ecx eax +
cmp [esi+8] cx +
jnz loc_101ADB8  +
cmp [esi+0Ah] ax +
jnz loc_101ADB8  +
mov edi 104h +
push edi  +
lea eax [ebp-218h] +
push eax  +
push hModule  +
call ds:GetModuleFileNameW  +
cmp eax ebx +
jz loc_101AEBA  +
cmp eax edi +
jz loc_101AEBA  +
lea eax [ebp-22Ch] +
push eax  +
lea eax [ebp-218h] +
push eax  +
mov [ebp-220h] ebx +
call ds:LoadTypeLib  +
lea ecx [ebp-220h] +
mov [ebp-21Ch] eax +
call sub_102BE1E  +
jmp loc_101ADD9  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_101AE9B  +
***
push 1  +
call sub_1011FEA  +
jmp loc_1012127  +
***
push 80070057h  +
call loc_1025B15  +
int 3  +
push 1  +
call sub_1011AAE  +
jmp loc_10120B8  +
***
mov eax 80004003h +
jmp loc_100FF4D  +
***
or dword ptr [ebp-4] 0FFFFFFFFh +
mov eax offset loc_101C4C1 +
retn   +
***
mov edi [ebp-14h] +
mov esi [ebp-18h] +
jmp loc_100FF1C  +
***
pop ebp  +
jmp loc_102D1BC  +
***
pop ebp  +
jmp loc_102D248  +
***
or dword ptr [ebp-4] 0FFFFFFFFh +
mov eax offset loc_101C4EC +
retn   +
mov ebx [ebp-14h] +
mov esi [ebp-18h] +
jmp loc_1012C4A  +
***
push 80070057h  +
call loc_1025B15  +
lea ecx [eax+esi*2] +
push ecx  +
push [ebp+arg_4]  +
push eax  +
call sub_102BAA0  +
jmp loc_10032D7  +
***
mov eax offset loc_101C523 +
retn   +
mov esi [ebp+8] +
xor edi edi +
mov eax edi +
jmp loc_101077E  +
***
push [ebp+arg_10]  +
mov ebx [ebx+0Ch] +
push [ebp+arg_8]  +
mov eax [ebx] +
push [ebp+arg_4]  +
push ebx  +
call dword ptr [eax+28h]  +
jmp loc_101B261  +
***
movzx ecx word ptr [esi+1A6h] +
movzx eax word ptr [esi+1A8h] +
add eax ecx +
movzx ecx word ptr [esi+1AEh] +
cmp ecx eax +
jle loc_1006BE6  +
mov ecx esi +
call sub_10146CC  +
cmp eax 1 +
jnz loc_101C581  +
mov ecx esi +
call sub_102B5F0  +
cmp eax 50h +
jz loc_1006BE6  +
movzx eax word ptr [esi+1A6h] +
movzx ecx word ptr [esi+1AEh] +
sub ecx eax +
push ecx  +
push eax  +
push [ebp+arg_0]  +
lea ecx [esi+10h] +
call sub_10034B1  +
jmp loc_1006BF0  +
***
push eax  +
call off_104B7F0  +
and dword ptr [esi] 0 +
jmp loc_100EB72  +
call ds:__imp_GetLastError  +
test eax eax +
jle loc_101C5C6  +
and eax 0FFFFh +
or eax 80070000h +
push eax  +
push 195h  +
push offset aDW7rtmEnduserM  +
lea ecx [ebp+var_20] +
call sub_102F44D  +
mov esi eax +
lea edi [ebp+var_10] +
movs   +
movs   +
movs   +
push offset dword_10458FC  +
lea eax [ebp+var_10] +
push eax  +
movs   +
call _CxxThrowException  +
mov eax dword_104A3A0 +
mov edi dword_104A3A4 +
mov ecx eax +
and ecx edx +
mov edx edi +
and edx esi +
cmp ecx eax +
jnz loc_10106BE  +
cmp edx edi +
jnz loc_10106BE  +
push offset dword_101C630  +
push dword_104A134  +
push dword_104A130  +
call sub_100A01E  +
jmp loc_10106BE  +
***
push dword ptr [eax-0Ch]  +
mov ecx edi +
push eax  +
call sub_100328F  +
jmp loc_1004001  +
***
call ds:__imp_GetLastError  +
cmp eax edi +
jle loc_101C664  +
and eax 0FFFFh +
or eax 80070000h +
push eax  +
push 1B7h  +
push offset aDW7rtmEnduserM  +
lea ecx [ebp-30h] +
call sub_102F44D  +
mov esi eax +
lea edi [ebp-20h] +
movs   +
movs   +
movs   +
push offset dword_10458FC  +
lea eax [ebp-20h] +
push eax  +
movs   +
call _CxxThrowException  +
mov edi ds:RegOpenKeyExW +
lea eax [ebp-42Ch] +
push eax  +
push 9  +
push esi  +
push offset aSoftwareMicr_7  +
push 80000002h  +
call edi  +
cmp eax esi +
jnz loc_100EBD6  +
mov ebx ds:RegEnumKeyExW +
xor eax eax +
push eax  +
push eax  +
push eax  +
push eax  +
lea ecx [ebp-424h] +
push ecx  +
lea ecx [ebp-41Ch] +
push ecx  +
mov esi 0FFh +
mov [ebp-430h] eax +
push eax  +
jmp loc_101C786  +
push offset a0  +
push esi  +
lea eax [ebp-41Ch] +
push eax  +
call sub_100F84F  +
lea eax [ebp-428h] +
push eax  +
push 1  +
push 0  +
lea eax [ebp-41Ch] +
push eax  +
push dword ptr [ebp-42Ch]  +
call edi  +
test eax eax +
jnz loc_101C766  +
lea eax [ebp-438h] +
push eax  +
lea eax [ebp-214h] +
push eax  +
lea eax [ebp-43Ch] +
push eax  +
push 0  +
push offset aProgidhandler  +
push dword ptr [ebp-428h]  +
mov [ebp-438h] esi +
mov dword ptr [ebp-43Ch] 1 +
call ds:RegQueryValueExW  +
test eax eax +
jnz loc_101C75A  +
lea eax [ebp-214h] +
push eax  +
push 10A1h  +
call sub_103CEAF  +
push dword ptr [ebp-428h]  +
call ds:RegCloseKey  +
inc dword ptr [ebp-430h]  +
xor eax eax +
push eax  +
push eax  +
push eax  +
push eax  +
lea eax [ebp-424h] +
push eax  +
lea eax [ebp-41Ch] +
push eax  +
push dword ptr [ebp-430h]  +
push dword ptr [ebp-42Ch]  +
mov [ebp-424h] esi +
call ebx  +
test eax eax +
jz loc_101C6DD  +
push dword ptr [ebp-42Ch]  +
call ds:RegCloseKey  +
xor esi esi +
jmp loc_100EBD6  +
***
and dword ptr [ebp-4] 0 +
mov eax offset loc_100EBE8 +
retn   +
***
and dword ptr [ebp-4] 0 +
mov eax [ebp-454h] +
mov eax [eax] +
and dword ptr [ebp-4] 0 +
mov [ebp-434h] eax +
mov eax offset loc_100BDA0 +
retn   +
***
pop ebp  +
jmp loc_102F74E  +
***
movzx eax word ptr [ebp+arg_0] +
push eax  +
call sub_102F7F0  +
mov al 1 +
jmp loc_1003601  +
***
or dword ptr [ebp-4] 0FFFFFFFFh +
mov eax offset loc_101CA49 +
retn   +
mov ebx [ebp-14h] +
mov esi [ebp-18h] +
jmp loc_1001F87  +
***
mov eax [esi] +
push 1  +
mov ecx esi +
call dword ptr [eax+0D8h]  +
jmp loc_1001FC8  +
***
mov eax [ebp-2Ch] +
mov eax [eax] +
mov [ebp+10h] eax +
mov eax offset loc_100911A +
retn   +
***
pop ebp  +
jmp loc_1030214  +
***
movzx eax cx +
jmp loc_1009DA7  +
lea ecx [ebp+var_2C] +
push ecx  +
push 5  +
call eax  +
jmp loc_1009DFB  +
push edi  +
call FreeLibrary  +
mov [ebp+hModule] esi +
jmp loc_1009DFB  +
call GetLastError  +
cmp eax 7Eh +
jz loc_101CB04  +
cmp eax 0C1h +
jnz loc_101CB36  +
push 0  +
push 0FFFFFFFFh  +
push esi  +
call InterlockedCompareExchange  +
test eax eax +
jz loc_101CB1A  +
mov [ebp+hModule] eax +
jmp loc_1009DFB  +
mov [ebp+var_4] 1 +
jmp loc_101CB36  +
call GetLastError  +
cmp eax 7Fh +
jnz loc_1009E47  +
jmp loc_1009E24  +
push [ebp+lpProcName]  +
push ebx  +
call DelayLoadFailureHook  +
mov esi eax +
jmp loc_1009E33  +
***
push edi  +
mov ecx ebx +
call sub_10307CA  +
movzx eax word ptr [eax] +
push dword ptr [ebp+0Ch]  +
push eax  +
call ds:UnregisterClassA  +
inc edi  +
cmp edi [esi+24h] +
jl loc_101CB59  +
pop ebx  +
jmp loc_101218E  +
***
mov byte_104BB7C 1 +
and dword ptr [esi] 0 +
jmp loc_1010C5D  +
***
cmp [ebp+VersionInformation.dwMajorVersion] 4 +
ja loc_1010D1F  +
jz loc_1010D5F  +
jmp loc_1010D23  +
mov byte_104BB7C 1 +
jmp loc_1010D41  +
***
mov ecx [ecx+4] +
test ecx ecx +
jz locret_10121D3  +
push ecx  +
call ds:HeapDestroy  +
jmp locret_10121D3  +
***
push dword ptr [ebp+0Ch]  +
mov eax [ecx] +
call dword ptr [eax]  +
jmp loc_101301C  +
***
push dword ptr [ebp+8]  +
mov eax [ecx] +
call dword ptr [eax+4]  +
xor eax eax +
jmp loc_101301C  +
***
mov eax 80070057h +
jmp loc_10033AC  +
***
mov eax [ebp+arg_8] +
jmp loc_1003119  +
***
push edi  +
mov edi [ebx] +
test edi edi +
jz loc_101CC09  +
mov eax [edi+10h] +
test eax eax +
jz loc_101CC05  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
and dword ptr [edi+10h] 0 +
add ebx 4 +
cmp ebx [esi+0Ch] +
jb loc_101CBF2  +
pop edi  +
jmp loc_10121FC  +
***
mov byte_104BB7C 1 +
jmp loc_1010F8F  +
***
mov eax [ebp-14h] +
mov esp [ebp-18h] +
mov eax [ebp-24h] +
mov dword_104A084 eax +
cmp dword_104A078 0 +
jnz loc_101CCC3  +
push eax  +
call ds:_exit  +
***
mov dword ptr [ebp-4] 0FFFFFFFEh +
mov eax 0FFh +
call sub_1002ADD  +
retn   +
***
cmp ecx 20Bh +
jnz loc_1010E43  +
cmp dword ptr [eax+84h] 0Eh +
jbe loc_1010E43  +
xor ecx ecx +
cmp [eax+0F8h] ecx +
jmp loc_1010DE5  +
***
push offset sub_100E78D  +
call ds:__setusermatherr  +
pop ecx  +
jmp loc_1010E3B  +
***
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call sub_1030941  +
jmp locret_10080EE  +
***
push 8  +
call _lock  +
pop ecx  +
and dword ptr [ebp-4] 0 +
mov eax dword_104A0AC +
mov [ebp-1Ch] eax +
mov eax dword_104A0A8 +
mov [ebp-20h] eax +
lea eax [ebp-20h] +
push eax  +
lea eax [ebp-1Ch] +
push eax  +
push dword ptr [ebp+8]  +
call __dllonexit  +
add esp 0Ch +
mov [ebp-24h] eax +
mov eax [ebp-1Ch] +
mov dword_104A0AC eax +
mov eax [ebp-20h] +
mov dword_104A0A8 eax +
mov dword ptr [ebp-4] 0FFFFFFFEh +
call sub_101CDA1  +
mov eax [ebp-24h] +
jmp loc_1010EB8  +
***
pop ecx  +
retn   +
***
xor eax eax +
mov [ebp-1Ch] eax +
jmp loc_1011236  +
***
cmp ax 3 +
jnz loc_10111E4  +
xor eax eax +
inc eax  +
pop ebp  +
retn   +
***
test eax ebx +
jz loc_100C8F0  +
not eax  +
mov dword_104A048 eax +
jmp loc_100C946  +
***
mov eax 7D0h +
retn   +
push 0  +
push 2  +
push 5  +
call sub_100F356  +
neg eax  +
sbb eax eax +
and eax 2 +
add eax 7D1h +
retn   +
***
xor eax eax +
jmp loc_1014A64  +
***
mov bl 1 +
jmp loc_100FCDA  +
***
push dword ptr [esi+0A0h]  +
lea ecx [esi+1C4h] +
mov byte ptr [esi+259h] 0 +
call sub_100AA00  +
jmp loc_100FD6D  +
***
push 800700CEh  +
lea ecx [ebp+var_20] +
call sub_1026AE1  +
mov esi eax +
lea edi [ebp+var_10] +
movs   +
movs   +
movs   +
push offset dword_10458FC  +
lea eax [ebp+var_10] +
push eax  +
movs   +
call _CxxThrowException  +
***
mov eax [esi+0Ch] +
add eax 0FFFFFFFAh +
push eax  +
mov ecx esi +
call sub_100A108  +
sub esp 94h +
mov ecx esp +
mov [ebp-424h] esp +
push esi  +
call sub_100EA61  +
lea eax [ebp-4CCh] +
push eax  +
call sub_100C956  +
mov byte ptr [ebp-4] 5 +
jmp loc_100DDD9  +
***
cmp dword ptr [ebp-140h] 0 +
jl loc_101CF62  +
mov eax [ebp-144h] +
mov eax [eax] +
mov [ebp-140h] eax +
mov eax offset loc_100FE44 +
retn   +
***
call sub_100F56E  +
mov [ebp-1F4h] eax +
mov byte ptr [esi+258h] 0 +
mov byte ptr [esi+259h] 0 +
jmp loc_100DB86  +
***
call sub_100F56E  +
mov [ebp-1F4h] eax +
jmp loc_100DBDB  +
***
sub esp 94h +
lea eax [esi+130h] +
mov ecx esp +
mov [ebp-10h] esp +
push eax  +
call sub_100EA61  +
and dword ptr [ebp-4] 0 +
sub esp 94h +
mov [ebp-14h] esp +
jmp loc_101CFE3  +
sub esp 94h +
lea eax [esi+1C4h] +
mov ecx esp +
mov [ebp-14h] esp +
push eax  +
call sub_100EA61  +
sub esp 94h +
mov dword ptr [ebp-4] 1 +
mov [ebp-10h] esp +
lea eax [esi+9Ch] +
mov ecx esp +
push eax  +
call sub_100EA61  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov ecx esi +
call sub_1031E4F  +
jmp loc_100C9D6  +
***
push edi  +
mov edi offset unk_104BAB0 +
movs   +
movs   +
movs   +
movs   +
pop edi  +
jmp loc_100CA4D  +
mov eax [esi] +
test eax eax +
jz loc_101D01C  +
push 1  +
call dword ptr [eax+20h]  +
add esi 4 +
jmp loc_100CA76  +
***
mov eax 80070057h +
jmp loc_10116C6  +
mov ecx [esi] +
test ecx ecx +
jz loc_101D040  +
push [ebp+flags]  +
push [ebp+dwClsContext]  +
push ecx  +
call sub_100C9E1  +
add esi 4 +
jmp loc_10116C0  +
***
mov eax 80070057h +
jmp loc_10123AD  +
mov ecx [esi] +
test ecx ecx +
jz loc_101D05E  +
push ecx  +
call sub_1011AEB  +
add esi 4 +
jmp loc_10123A7  +
***
mov eax 80004003h +
jmp loc_1011337  +
mov eax 8007000Eh +
jmp loc_1011336  +
call sub_100F56E  +
push dword ptr [esi]  +
mov [ebp+var_4] eax +
call ds:__imp_free  +
and dword ptr [esi] 0 +
pop ecx  +
jmp loc_1011333  +
***
xor eax eax +
jmp loc_10112CB  +
call sub_100F56E  +
push dword ptr [esi]  +
mov [ebp+pSourceSid] eax +
call ebx  +
and dword ptr [esi] 0 +
pop ecx  +
jmp loc_10112C8  +
call sub_100F56E  +
mov [ebp+pSourceSid] eax +
jmp loc_10112C8  +
***
xor eax eax +
jmp loc_10117D9  +
call sub_100F56E  +
push dword ptr [esi]  +
mov [ebp+pSourceSid] eax +
call ebx  +
and dword ptr [esi] 0 +
pop ecx  +
jmp loc_10117D6  +
call sub_100F56E  +
mov [ebp+pSourceSid] eax +
jmp loc_10117D6  +
***
push eax  +
call sub_100A7A1  +
mov [ebp+var_4] eax +
jmp loc_100F4D2  +
push eax  +
call sub_100A7A1  +
mov [ebp+var_4] eax +
jmp loc_100F530  +
mov eax [ebp+arg_4] +
cmp eax ebx +
jz loc_101D116  +
push dword ptr [eax]  +
call ds:__imp_free  +
mov eax [ebp+arg_4] +
pop ecx  +
mov [eax] ebx +
mov eax [ebp+arg_8] +
cmp eax ebx +
jz loc_100F539  +
push dword ptr [eax]  +
call ds:__imp_free  +
mov eax [ebp+arg_8] +
pop ecx  +
mov [eax] ebx +
jmp loc_100F539  +
***
mov eax 80004003h +
jmp loc_10114CA  +
push 2  +
push 0Ch  +
lea eax [ebp+pAclInformation] +
push eax  +
push [ebp+pAcl]  +
call ds:GetAclInformation  +
test eax eax +
jnz loc_101D15D  +
call sub_100F56E  +
jmp loc_10114CA  +
cmp [ebp+pAclInformation] esi +
jbe loc_10114C8  +
lea eax [ebp+pAceList] +
push eax  +
push esi  +
push [ebp+pAcl]  +
call ds:GetAce  +
test eax eax +
jz loc_101D153  +
mov eax [ebp+pAceList] +
movzx ecx word ptr [eax+2] +
push ecx  +
push eax  +
push 0FFFFFFFFh  +
push 2  +
push [ebp+arg_0]  +
call ds:AddAce  +
test eax eax +
jz loc_101D153  +
inc esi  +
cmp esi [ebp+pAclInformation] +
jnb loc_10114C8  +
jmp loc_101D166  +
***
mov eax 80004003h +
jmp loc_101147D  +
push 2  +
push 0Ch  +
lea eax [ebp+pAclInformation] +
push eax  +
push esi  +
call ds:GetAclInformation  +
test eax eax +
jnz loc_101140E  +
call sub_100F56E  +
jmp loc_1011483  +
mov [ebp+arg_0] eax +
jmp loc_101146F  +
push esi  +
call edi  +
pop ecx  +
jmp loc_1011479  +
***
xor eax eax +
retn   +
***
mov eax dword_104A3A0 +
push edi  +
mov edi dword_104A3A4 +
mov ecx eax +
and ecx edx +
mov edx edi +
and edx esi +
cmp ecx eax +
jnz loc_101D20F  +
cmp edx edi +
jnz loc_101D20F  +
push offset dword_101D218  +
push dword_104A134  +
push dword_104A130  +
call sub_100A01E  +
pop edi  +
jmp loc_100BEF4  +
***
cmp [ebp+Msg.message] 12h +
jz loc_101D23D  +
lea eax [ebp+Msg] +
push eax  +
call ds:DispatchMessageW  +
jmp loc_1009BFF  +
xor eax eax +
inc eax  +
jmp loc_1009C2C  +
***
jnz loc_1012670  +
call sub_10263A5  +
jmp loc_101B35C  +
***
mov eax dword_104A3A0 +
mov edi dword_104A3A4 +
mov ecx eax +
and ecx edx +
mov edx edi +
and edx esi +
cmp ecx eax +
jnz loc_101156C  +
cmp edx edi +
jnz loc_101156C  +
push dword ptr [ebp-0B4h]  +
push offset dword_101D2A0  +
push dword_104A134  +
push dword_104A130  +
call sub_10379EB  +
jmp loc_101156C  +
***
or dword ptr [ebp-4] 0FFFFFFFFh +
mov eax offset loc_101D2C8 +
retn   +
mov esi [ebp-14h] +
xor ebx ebx +
jmp loc_100CB68  +
***
call sub_100F56E  +
push dword ptr [esi]  +
mov edi eax +
call off_104B7F0  +
mov [esi] ebx +
mov eax edi +
jmp loc_100CB81  +
***
call sub_100F56E  +
mov ebx eax +
jmp loc_10113BE  +
***
call sub_100F56E  +
mov esi eax +
jmp loc_100F437  +
***
push esi  +
push edi  +
push [ebp+TokenHandle]  +
call sub_100F444  +
push [ebp+TokenHandle]  +
mov esi eax +
call ds:CloseHandle  +
jmp loc_100CBD7  +
***
or dword ptr [ebp-4] 0FFFFFFFFh +
mov eax offset loc_101D33A +
retn   +
mov edi [ebp+0Ch] +
xor esi esi +
jmp loc_100CC5A  +
***
mov eax [ebp-20h] +
mov eax [ebp-24h] +
mov eax [eax] +
mov [ebp-14h] eax +
mov eax offset loc_100F5E8 +
retn   +
***
mov eax 8007000Eh +
jmp loc_10103DB  +
***
mov ecx ebx +
call sub_100CB11  +
jmp loc_1011769  +
***
mov eax dword_104A3A0 +
mov edi dword_104A3A4 +
mov ecx eax +
and ecx edx +
mov edx edi +
and edx esi +
cmp ecx eax +
jnz loc_100F806  +
cmp edx edi +
jnz loc_100F806  +
push dword ptr [ebp-2BCh]  +
push offset dword_101D3E8  +
push dword_104A134  +
push dword_104A130  +
call sub_10379EB  +
jmp loc_100F806  +
***
mov eax dword_104A3A0 +
mov edi dword_104A3A4 +
mov ecx eax +
and ecx edx +
mov edx edi +
and edx esi +
cmp ecx eax +
jnz loc_100A8A0  +
cmp edx edi +
jnz loc_100A8A0  +
push [ebp+var_4]  +
push offset dword_101D440  +
push dword_104A134  +
push dword_104A130  +
call sub_10379EB  +
jmp loc_100A8A0  +
***
push 800700CEh  +
lea ecx [ebp+var_24] +
call sub_1026AE1  +
mov esi eax +
lea edi [ebp+var_14] +
movs   +
movs   +
movs   +
push offset dword_10458FC  +
lea eax [ebp+var_14] +
push eax  +
movs   +
call _CxxThrowException  +
***
mov eax off_104B7E4 +
push dword ptr [eax+40h]  +
call ds:SetEvent  +
jmp loc_1009FAB  +
***
cmp dword ptr [ebp+8] 3 +
jnz loc_1009EAE  +
mov [ebp+8] edi +
jmp loc_1009EBF  +
mov [ebp+8] ebx +
jmp loc_1009EB6  +
mov eax dword_104A3A0 +
mov ebx dword_104A3A4 +
mov ecx eax +
and ecx edx +
mov edx ebx +
and edx edi +
cmp ecx eax +
jnz loc_1009F3A  +
cmp edx ebx +
jnz loc_1009F3A  +
push dword ptr [esi+68h]  +
push dword ptr [ebp+8]  +
push dword ptr [esi+6Ch]  +
push offset dword_101D4E8  +
push dword_104A134  +
push dword_104A130  +
call sub_10395BD  +
jmp loc_1009F3A  +
***
mov eax off_104B7E4 +
add eax 74h +
push eax  +
lea ecx [ebp-954h] +
call sub_1002BED  +
mov eax esi +
and eax 1FFF0000h +
cmp eax 70000h +
jnz loc_101D528  +
mov ecx off_104B7E4 +
movzx eax si +
mov [ecx+60h] eax +
jmp loc_101D53C  +
mov eax off_104B7E4 +
mov dword ptr [eax+60h] 42Ah +
mov eax off_104B7E4 +
mov [eax+64h] esi +
cmp [ebp-954h] edi +
jz loc_100C0AB  +
push dword ptr [ebp-954h]  +
call ds:LeaveCriticalSection  +
jmp loc_100C0AB  +
***
mov edx dword_104A3A0 +
mov eax edx +
and eax esi +
mov esi dword_104A3A4 +
mov ecx esi +
and ecx edi +
cmp eax edx +
jnz loc_1008A27  +
cmp ecx esi +
jnz loc_1008A27  +
push dword ptr [ebp+8]  +
push offset dword_101D630  +
push dword_104A134  +
push dword_104A130  +
call sub_10379EB  +
jmp loc_1008A27  +
***
dec eax  +
jz loc_100C119  +
mov ecx off_104B7E4 +
call sub_1009F63  +
jmp loc_1008A71  +
***
push esi  +
call off_104B7F0  +
jmp loc_1008A71  +
***
push dword ptr [ebp+14h]  +
mov ecx off_104B7E4 +
push dword ptr [ebp+10h]  +
mov eax [ecx] +
push dword ptr [ebp+0Ch]  +
push 0Bh  +
call dword ptr [eax+48h]  +
jmp loc_1008A71  +
***
mov ecx off_104B7E4 +
call sub_1032B26  +
jmp loc_1008A71  +
***
mov edx dword_104A3A0 +
mov eax edx +
and eax esi +
mov esi dword_104A3A4 +
mov ecx esi +
and ecx edi +
cmp eax edx +
jnz loc_1008AA9  +
cmp ecx esi +
jnz loc_1008AA9  +
push dword ptr [ebp+8]  +
push offset dword_101D640  +
push dword_104A134  +
push dword_104A130  +
call sub_10379EB  +
jmp loc_1008AA9  +
***
mov ecx esi +
call sub_1032CFC  +
jmp loc_1009B45  +
mov ecx off_104B7E4 +
push 4  +
call sub_1009E64  +
jmp loc_1009B5D  +
mov ecx esi +
call sub_1032CFC  +
mov eax off_104B7E4 +
push ebx  +
push dword ptr [eax+4Ch]  +
push ebx  +
push 0  +
push dword ptr [eax+50h]  +
call ds:RegNotifyChangeKeyValue  +
jmp loc_1009B85  +
mov ecx esi +
call sub_100A834  +
test eax eax +
jnz loc_1009BCD  +
mov eax off_104B7E4 +
push dword ptr [eax+40h]  +
call ds:SetEvent  +
jmp loc_1009B85  +
mov ecx off_104B7E4 +
cmp dword ptr [ecx+90h] 0 +
jnz loc_1009B85  +
cmp dword ptr [ebp-95Ch] 0 +
jnz loc_101D6F5  +
mov eax [esi] +
push ebx  +
mov ecx esi +
call dword ptr [eax+34h]  +
mov edi eax +
test edi edi +
jl loc_101D6E9  +
call ds:GetCurrentProcess  +
push eax  +
call sub_100F588  +
mov edi eax +
mov ecx off_104B7E4 +
mov [ebp-95Ch] ebx +
test edi edi +
jl loc_100BF9E  +
push ebx  +
push 14h  +
call sub_101165F  +
mov edi eax +
test edi edi +
jl loc_100BF98  +
mov eax off_104B7E4 +
mov [eax+90h] ebx +
mov ecx off_104B7E4 +
mov eax [ecx] +
call dword ptr [eax+30h]  +
mov edi eax +
test edi edi +
jl loc_100BF98  +
mov ecx off_104B7E4 +
push 4  +
call sub_1009E64  +
cmp dword_104A04C 7D6h +
jge loc_101D74F  +
mov ecx esi +
call sub_1032CFC  +
mov eax off_104B7E4 +
mov eax [eax+4Ch] +
mov [ebp-960h] eax +
mov dword ptr [ebp-954h] 3 +
jmp loc_1009B85  +
push dword ptr [ecx+50h]  +
call ds:RegCloseKey  +
jmp loc_100BFA8  +
***
mov eax dword_104A3A0 +
mov edi dword_104A3A4 +
mov ecx eax +
and ecx edx +
mov edx edi +
and edx esi +
cmp ecx eax +
jnz loc_100BC8A  +
cmp edx edi +
jnz loc_100BC8A  +
push offset dword_101D7D0  +
push dword_104A134  +
push dword_104A130  +
call sub_100A01E  +
jmp loc_100BC8A  +
***
call sub_100F56E  +
jmp loc_100BD32  +
***
call sub_100F56E  +
mov edi eax +
jmp loc_100BD00  +
***
mov eax dword_104A3A0 +
mov ecx eax +
and ecx edx +
mov edx dword_104A3A4 +
and edx edi +
cmp ecx eax +
jnz loc_1010816  +
cmp edx dword_104A3A4 +
jnz loc_1010816  +
push offset dword_101D8F0  +
push dword_104A134  +
push dword_104A130  +
call sub_100A01E  +
jmp loc_1010816  +
push eax  +
push 8Eh  +
push offset aDW7rtmEnduse_0  +
lea ecx [ebp-228h] +
call sub_102F44D  +
mov esi eax +
lea edi [ebp-218h] +
movs   +
movs   +
movs   +
push offset dword_10458FC  +
lea eax [ebp-218h] +
push eax  +
movs   +
call _CxxThrowException  +
mov [ebp-4] bl +
cmp [ebp-1C8h] ebx +
jz loc_101D86A  +
push dword ptr [ebp-1C8h]  +
call off_104B7F0  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-1E8h] +
call sub_1010B2D  +
mov eax edi +
jmp loc_1010ABF  +
mov [ebp-4] bl +
cmp [ebp-1C8h] ebx +
jz loc_101D897  +
push dword ptr [ebp-1C8h]  +
call off_104B7F0  +
mov edi 8007000Eh +
jmp loc_101D86A  +
lea eax [esi+50h] +
push eax  +
push 20019h  +
push ebx  +
push offset aSoftwareMicr_8  +
push edi  +
call ds:RegOpenKeyExW  +
cmp eax ebx +
jnz loc_10109DA  +
mov eax [esi+4Ch] +
push 1  +
push eax  +
push 1  +
push ebx  +
push dword ptr [esi+50h]  +
call ds:RegNotifyChangeKeyValue  +
jmp loc_10109DA  +
cmp [ebp-1D4h] ebx +
jz loc_1010A48  +
or dword ptr [esi+8Ch] 100h +
jmp loc_1010A48  +
***
mov eax ebx +
jmp loc_10041B1  +
***
push 1  +
mov ecx esi +
call sub_103310E  +
jmp loc_100401A  +
mov eax [esi+4] +
dec eax  +
push eax  +
mov ecx esi +
call sub_10330CE  +
jmp loc_1004038  +
***
push dword ptr [edi+14h]  +
call ds:lstrlenW  +
cmp eax [ebp+0Ch] +
jz loc_1003E93  +
push eax  +
mov ecx esi +
call sub_100A108  +
jmp loc_1003E93  +
lea eax [ebp-1B0h] +
push eax  +
lea ecx [ebp-1A4h] +
call sub_101533F  +
push dword ptr [ebp-1A0h]  +
and dword ptr [ebp-4] 0 +
mov ecx esi +
call sub_100AA00  +
lea ecx [ebp-1A4h] +
call sub_1003D18  +
jmp loc_1003EC3  +
***
push 0  +
lea edi [esi+10h] +
push 23h  +
mov ecx edi +
call sub_1003D62  +
push 0  +
push 3Fh  +
mov ecx edi +
mov ebx eax +
call sub_1003D62  +
mov [ebp+var_4] eax +
cmp ebx 0FFFFFFFFh +
jz loc_101D9E3  +
cmp eax ebx +
jge loc_101D9E5  +
cmp eax 0FFFFFFFFh +
jz loc_101D9E5  +
mov ebx eax +
cmp ebx 0FFFFFFFFh +
jz loc_10040C3  +
mov ax [esi+1Ch] +
sub ax bx +
mov [esi+1B2h] bx +
mov [esi+1B4h] ax +
jmp loc_10040CE  +
mov ebx [esi+1Ch] +
lea eax [edi+2] +
cmp ebx eax +
jbe loc_101DA3C  +
mov eax [esi+14h] +
movzx eax word ptr [eax+edi*2+2] +
push eax  +
call sub_1003A20  +
test eax eax +
jz loc_101DA3C  +
mov eax [esi+14h] +
lea ecx [edi+2] +
movzx eax word ptr [eax+ecx*2] +
push eax  +
call sub_1003A20  +
test eax eax +
jnz loc_100411D  +
mov eax 0FFFBh +
and [esi+1BAh] ax +
xor eax eax +
mov [esi+1ACh] ax +
mov [esi+1A8h] ax +
mov [esi+1AEh] ax +
mov [esi+1A4h] ax +
mov eax [ebp+var_4] +
inc edi  +
mov [esi+1BEh] di +
cmp eax 0FFFFFFFFh +
jz loc_101DA8B  +
sub ebx eax +
mov [esi+1B2h] ax +
mov [esi+1B4h] bx +
jmp loc_1004168  +
mov [esi+1B2h] bx +
jmp loc_100415F  +
inc eax  +
jmp loc_100413B  +
push 7  +
jmp loc_1004ED1  +
push 3  +
jmp loc_1004ED1  +
cmp word ptr [esi+1B2h] 2 +
jb loc_1004148  +
mov eax [esi+14h] +
cmp word ptr [eax] 5Ch +
jnz loc_1004148  +
cmp word ptr [eax+2] 5Ch +
jnz loc_1004148  +
xor eax eax +
push 3  +
mov ecx ebx +
mov [esi+1A4h] ax +
call sub_1006CF1  +
cmp eax 0FFFFFFFFh +
jnz loc_101DAEB  +
push 2  +
pop eax  +
mov [esi+1BEh] ax +
jmp loc_1004148  +
mov cx [esi+1Ch] +
sub cx ax +
mov [esi+1B4h] cx +
mov [esi+1B2h] ax +
jmp loc_1004168  +
***
add ebx 2 +
jmp loc_10039B4  +
cmp eax 6 +
jnz loc_10039BB  +
add ebx 4 +
jmp loc_10039B4  +
movzx eax word ptr [ebx+2] +
push eax  +
call sub_1003A20  +
test eax eax +
jz loc_10039EB  +
add edi 2 +
movzx ebx di +
lea ecx [esi+10h] +
push ebx  +
mov [esi+1A6h] di +
call sub_1006CF1  +
cmp eax 0FFFFFFFFh +
jz loc_101DBC7  +
cmp eax [ebp+var_8] +
jg loc_101DBC7  +
sub eax edi +
lea ecx [esi+1A8h] +
mov [ecx] ax +
cmp ax 2 +
jnz loc_101DB90  +
mov edx [esi+14h] +
cmp word ptr [edx+ebx*2+2] 3Ah +
jnz loc_101DB90  +
add [esi+1AEh] ax +
xor eax eax +
mov [esi+1ACh] ax +
mov [ecx] ax +
jmp loc_10039FB  +
lea eax [eax+edi+1] +
mov [esi+1AAh] ax +
movzx eax ax +
push eax  +
lea ecx [esi+10h] +
call sub_1006CF1  +
cmp eax 0FFFFFFFFh +
jz loc_101DBB1  +
cmp eax [ebp+var_8] +
jle loc_101DBB4  +
mov eax [ebp+var_8] +
sub ax [esi+1AAh] +
mov [esi+1ACh] ax +
jmp loc_10039FB  +
mov eax [ebp+var_14] +
sub eax edi +
jmp loc_10039F4  +
movzx eax word ptr [esi+1B2h] +
mov [ebp+var_8] eax +
jmp loc_1006CA1  +
lea ebx [eax+1] +
cmp ebx [ebp+var_8] +
jge loc_1006CB4  +
mov eax [ebp+var_8] +
sub eax ebx +
push eax  +
push ebx  +
lea eax [ebp+var_30] +
push eax  +
mov ecx edi +
call sub_10034B1  +
mov ecx [eax] +
mov [ebp+var_20] ecx +
mov ecx [eax+4] +
mov eax [eax+8] +
lea edi [ecx+ecx] +
mov [ebp+var_18] eax +
lea eax [edi+2] +
call sub_100FA58  +
mov [ebp+var_C] esp +
test esp esp +
jnz loc_101DC42  +
push 8007000Eh  +
lea ecx [ebp+var_24] +
call sub_1026AE1  +
mov esi eax +
lea edi [ebp+var_34] +
movs   +
movs   +
movs   +
push offset dword_10458FC  +
lea eax [ebp+var_34] +
push eax  +
movs   +
call _CxxThrowException  +
mov eax [ebp+var_18] +
mov eax [eax+4] +
mov ecx [ebp+var_20] +
push edi  +
lea eax [eax+ecx*2] +
push eax  +
push [ebp+var_C]  +
call memcpy  +
mov eax [ebp+var_C] +
xor ecx ecx +
push eax  +
mov [edi+eax] cx +
call ds:_wtol  +
mov [esi+1C0h] eax +
mov eax 0FFFDh +
and [esi+1BAh] ax +
add esp 10h +
dec ebx  +
jmp loc_1006CB7  +
***
cmp word ptr [esi+1A4h] 0 +
jz loc_10131A3  +
test byte ptr dword_104BCEC 1 +
mov esi offset dword_104BCDC +
jnz loc_101DCBD  +
or dword_104BCEC 1 +
push offset dword_1012E6C  +
mov ecx esi +
call sub_1032FF5  +
push offset loc_1045820  +
call sub_1010E75  +
pop ecx  +
mov eax [ebp+arg_0] +
and dword ptr [eax] 0 +
mov ecx dword_104BCE8 +
mov [eax+4] ecx +
mov [eax+8] esi +
jmp loc_10131B9  +
***
cmp [esi+1A4h] ax +
jz loc_101328F  +
test byte ptr dword_104BD00 1 +
mov esi offset dword_104BCF0 +
jnz loc_101DD0D  +
or dword_104BD00 1 +
push offset dword_1012E6C  +
mov ecx esi +
call sub_1032FF5  +
push offset loc_1045810  +
call sub_1010E75  +
pop ecx  +
mov eax [ebp+arg_0] +
and dword ptr [eax] 0 +
mov ecx dword_104BCFC +
mov [eax+4] ecx +
mov [eax+8] esi +
jmp loc_10132A9  +
***
dec eax  +
mov eax [ebp+arg_0] +
mov [eax] edi +
jz loc_101DD3E  +
mov ecx dword_104A0D0 +
mov dword ptr [eax+8] offset dword_104A0C4 +
jmp loc_10146BE  +
mov ecx dword_104A0F0 +
mov dword ptr [eax+8] offset dword_104A0E4 +
jmp loc_10146BE  +
mov eax [ebp+arg_0] +
mov [eax] edi +
mov ecx dword_104A100 +
mov dword ptr [eax+8] offset dword_104A0F4 +
jmp loc_10146BE  +
***
push 8000FFFFh  +
lea ecx [ebp-848h] +
call sub_1026AE1  +
mov esi eax +
lea edi [ebp-838h] +
movs   +
movs   +
movs   +
push offset dword_10458FC  +
lea eax [ebp-838h] +
push eax  +
movs   +
call _CxxThrowException  +
push 8000FFFFh  +
lea ecx [ebp-0D0h] +
call sub_1026AE1  +
mov esi eax +
lea edi [ebp-0C0h] +
movs   +
movs   +
movs   +
push offset dword_10458FC  +
lea eax [ebp-0C0h] +
push eax  +
movs   +
call _CxxThrowException  +
mov eax [ebp-0B0h] +
mov eax [eax] +
mov [ebp-0ACh] eax +
mov eax offset loc_101024B +
retn   +
***
test edi edi +
jz loc_101A5C4  +
and dword ptr [edi] 0 +
jmp loc_101A5C4  +
***
mov eax [ebp+arg_8] +
or dword ptr [eax] 0FFFFFFFFh +
mov eax 80070216h +
jmp loc_100861C  +
***
mov eax [ebp+arg_8] +
test eax eax +
jz loc_101DE02  +
mov [eax] ecx +
mov eax 8007007Ah +
jmp loc_1005AE2  +
***
call loc_1026210  +
int 3  +
call loc_1026210  +
int 3  +
push eax  +
lea ecx [ebp+var_24] +
call sub_1026AE1  +
mov esi eax +
lea edi [ebp+var_14] +
movs   +
movs   +
movs   +
push offset dword_10458FC  +
lea eax [ebp+var_14] +
push eax  +
movs   +
call _CxxThrowException  +
push 800700CEh  +
jmp loc_101DE19  +
***
push 800700CEh  +
lea ecx [ebp+var_20] +
call sub_1026AE1  +
mov esi eax +
lea edi [ebp+var_10] +
movs   +
movs   +
movs   +
movs   +
push offset dword_10458FC  +
lea eax [ebp+var_10] +
push eax  +
call _CxxThrowException  +
mov ecx eax +
jmp loc_10127DD  +
mov [ebp+arg_C] 80070216h +
push offset dword_101DE8C  +
lea eax [ebp+arg_C] +
jmp loc_101DE5D  +
mov [ebp+arg_C] 80070216h +
mov [esp+30h+var_30] offset dword_101DE8C +
jmp loc_101DE76  +
***
push 80070057h  +
lea ecx [ebp+var_28] +
call sub_1026AE1  +
mov esi eax +
lea edi [ebp+var_18] +
movs   +
movs   +
movs   +
push offset dword_10458FC  +
lea eax [ebp+var_18] +
push eax  +
movs   +
call _CxxThrowException  +
mov eax [esi+4] +
and dword ptr [esi+0Ch] 0 +
xor ecx ecx +
mov [eax] cx +
xor eax eax +
jmp loc_1002E42  +
***
push 80070057h  +
lea ecx [ebp+var_24] +
call sub_1026AE1  +
mov esi eax +
lea edi [ebp+var_14] +
movs   +
movs   +
movs   +
push offset dword_10458FC  +
lea eax [ebp+var_14] +
push eax  +
movs   +
call _CxxThrowException  +
push 6  +
jmp loc_100FDAF  +
***
push 0  +
call ds:SetLastError  +
xor eax eax +
inc eax  +
jmp loc_100FDB7  +
***
push 6  +
jmp loc_100E12E  +
***
push dword ptr [ebp+14h]  +
lea edi [esi+4] +
mov ecx edi +
call sub_100AA00  +
push edi  +
call sub_1033D72  +
push dword ptr [ebp+0Ch]  +
mov ecx edi +
call sub_1026C01  +
jmp loc_100A9C8  +
***
mov eax [ebp-14h] +
mov eax [ebp-18h] +
mov eax [eax] +
mov [ebp+10h] eax +
mov eax offset loc_100CD36 +
retn   +
***
mov ecx [ebp-234h] +
call sub_103339B  +
mov eax offset loc_100A930 +
retn   +
***
push 72h  +
lea ecx [ebp+var_1024] +
call sub_1034F77  +
push dword ptr [edi+8]  +
and [ebp+var_4] 0 +
push [ebp+var_1020]  +
lea eax [ebp+var_810] +
push 400h  +
push eax  +
call sub_100A257  +
add esp 10h +
jmp loc_101E120  +
push 71h  +
lea ecx [ebp+var_1024] +
call sub_1034F77  +
mov eax [edi+9Ch] +
mov ecx [edi+8] +
push eax  +
push ecx  +
push [ebp+var_1020]  +
lea eax [ebp+var_810] +
push 400h  +
push eax  +
mov [ebp+var_4] 1 +
call sub_100A257  +
add esp 14h +
mov eax [esi] +
push 0FFFFFFFFh  +
push dword ptr [esi+0Ch]  +
mov ecx esi +
push ebx  +
call dword ptr [eax+0Ch]  +
mov eax [esi] +
push 0FFFFFFFFh  +
push dword ptr [esi+0Ch]  +
lea ecx [ebp+var_810] +
push ecx  +
mov ecx esi +
call dword ptr [eax+10h]  +
or [ebp+var_4] 0FFFFFFFFh +
lea ecx [ebp+var_1024] +
call sub_1009FC5  +
jmp loc_100A5B9  +
push 6Fh  +
lea ecx [ebp+var_1838] +
call sub_1034F77  +
mov eax [esi] +
push 0FFFFFFFFh  +
push dword ptr [esi+0Ch]  +
mov ecx esi +
push ebx  +
mov [ebp+var_4] 2 +
call dword ptr [eax+0Ch]  +
push [ebp+var_182C]  +
mov ecx esi +
push [ebp+var_1834]  +
call sub_1026241  +
add edi 12Ch +
push edi  +
mov ecx esi +
call sub_1026C1C  +
lea ecx [ebp+var_1838] +
call sub_1009FC5  +
jmp loc_100A5C6  +
***
mov eax edx +
mov edx [ebp+arg_0] +
xor ecx ecx +
mov [edx] cx +
jmp loc_100CDAE  +
***
xor eax eax +
jmp loc_100D9A4  +
push 22h  +
add esi 2 +
push esi  +
call ds:wcschr  +
mov esi eax +
pop ecx  +
pop ecx  +
test esi esi +
jz loc_101E1D7  +
inc esi  +
inc esi  +
jmp loc_100D897  +
mov eax [ebp+arg_0] +
inc dword ptr [eax]  +
jmp loc_100D8A6  +
add [ebp+var_8] 2 +
mov eax [ebp+var_8] +
inc esi  +
sar eax 1 +
inc esi  +
cmp eax edi +
jnb loc_100D952  +
jmp loc_100D93A  +
mov ecx [ebp+var_C] +
mov edx [ebp+var_4] +
lea eax [esi+2] +
mov [ecx+edx*4] eax +
jmp loc_100D97F  +
push 22h  +
add esi 2 +
push esi  +
call ds:wcschr  +
jmp loc_100D7E3  +
***
call ds:__imp_GetLastError  +
test eax eax +
jle loc_101E22F  +
and eax 0FFFFh +
or eax 80070000h +
push eax  +
lea ecx [ebp+var_20] +
call sub_1026AE1  +
mov esi eax +
lea edi [ebp+var_10] +
movs   +
movs   +
movs   +
push offset dword_10458FC  +
lea eax [ebp+var_10] +
push eax  +
movs   +
call _CxxThrowException  +
push 80070057h  +
lea ecx [ebp+var_40] +
call sub_1026AE1  +
mov esi eax +
lea edi [ebp+var_20] +
movs   +
movs   +
movs   +
movs   +
push offset dword_10458FC  +
lea eax [ebp+var_20] +
push eax  +
call _CxxThrowException  +
push eax  +
call off_104B7F0  +
jmp loc_1011988  +
***
lea ecx [ebp-50h] +
call sub_103309C  +
mov esi eax +
lea edi [ebp-30h] +
movs   +
movs   +
movs   +
movs   +
push offset dword_10458FC  +
lea eax [ebp-30h] +
jmp loc_101E26D  +
***
or dword ptr [ebp-4] 0FFFFFFFFh +
cmp edi esi +
jz loc_1010BDC  +
push edi  +
call off_104B7F0  +
jmp loc_1010BDC  +
***
call ds:__imp_GetLastError  +
test eax eax +
jle loc_101E2C6  +
and eax 0FFFFh +
or eax 80070000h +
push eax  +
lea ecx [ebp+var_30] +
call sub_1026AE1  +
mov esi eax +
lea edi [ebp+var_20] +
movs   +
movs   +
movs   +
push offset dword_10458FC  +
lea eax [ebp+var_20] +
push eax  +
movs   +
call _CxxThrowException  +
test eax eax +
jg loc_101E2BC  +
jmp loc_101E2C6  +
***
mov eax ds:AddAccessDeniedAce +
jmp loc_100EF9A  +
call ds:__imp_GetLastError  +
cmp eax edi +
jle loc_101E30A  +
and eax 0FFFFh +
or eax 80070000h +
push eax  +
lea ecx [ebp-44h] +
call sub_1026AE1  +
mov esi eax +
lea edi [ebp-34h] +
movs   +
movs   +
movs   +
push offset dword_10458FC  +
lea eax [ebp-34h] +
push eax  +
movs   +
call _CxxThrowException  +
lea eax [ebp+18h] +
push eax  +
push dword ptr [ebp-24h]  +
push dword ptr [ebp+8]  +
call ds:GetAce  +
test eax eax +
jz loc_100F044  +
mov al [edi+ebx] +
mov ecx [ebp+18h] +
mov [ecx+1] al +
jmp loc_100F044  +
push dword ptr [esi]  +
push dword ptr [ebp+8]  +
call sub_100F07B  +
jmp loc_100F05A  +
call ds:__imp_GetLastError  +
test eax eax +
jg loc_101E300  +
jmp loc_101E30A  +
***
cmp eax ebx +
jle loc_100CF8A  +
and eax 0FFFFh +
or eax 80070000h +
jmp loc_100CF8A  +
call ds:__imp_GetLastError  +
cmp eax ebx +
jle loc_101E396  +
and eax 0FFFFh +
or eax 80070000h +
mov esi eax +
push edi  +
jmp loc_100CF7E  +
call ds:__imp_GetLastError  +
cmp eax ebx +
jle loc_101E3B2  +
and eax 0FFFFh +
or eax 80070000h +
mov esi eax +
mov eax [ebp+0Ch] +
push edi  +
mov [eax] ebx +
mov byte ptr [ebp-4] 2 +
call off_104B7F0  +
jmp loc_100CF62  +
mov eax [ebp+0Ch] +
mov [eax] ebx +
mov byte ptr [ebp-4] 2 +
cmp edi ebx +
jz loc_101E3DD  +
push edi  +
call off_104B7F0  +
mov byte ptr [ebp-4] 1 +
cmp [ebp+8] ebx +
jz loc_101E3EF  +
push dword ptr [ebp+8]  +
call off_104B7F0  +
mov [ebp-4] bl +
cmp [ebp-10h] ebx +
jz loc_101E400  +
push dword ptr [ebp-10h]  +
call off_104B7F0  +
push dword ptr [ebp-14h]  +
or dword ptr [ebp-4] 0FFFFFFFFh +
call off_104B7F0  +
jmp loc_100CF92  +
***
lea ecx [ebp+var_20] +
call sub_103309C  +
mov esi eax +
lea edi [ebp+var_10] +
movs   +
movs   +
movs   +
push offset dword_10458FC  +
lea eax [ebp+var_10] +
push eax  +
movs   +
call _CxxThrowException  +
***
lea ecx [ebp+var_20] +
call sub_103309C  +
mov esi eax +
lea edi [ebp+var_10] +
movs   +
movs   +
movs   +
push offset dword_10458FC  +
lea eax [ebp+var_10] +
push eax  +
movs   +
call _CxxThrowException  +
lea ecx [ebp+var_2C] +
call sub_103309C  +
mov esi eax +
lea edi [ebp+var_1C] +
movs   +
movs   +
movs   +
push offset dword_10458FC  +
lea eax [ebp+var_1C] +
push eax  +
movs   +
call _CxxThrowException  +
call ds:__imp_GetLastError  +
cmp eax edi +
jle loc_101E483  +
and eax 0FFFFh +
or eax 80070000h +
mov esi eax +
push 0  +
lea ecx [ebp+var_C] +
mov [ebp+var_C] offset off_1002BE4 +
call sub_1002CC0  +
mov eax esi +
jmp loc_100F6EC  +
***
test eax eax +
jle loc_101E483  +
jmp loc_101E479  +
mov esi 80004005h +
jmp loc_101E485  +
push edi  +
lea ecx [ebp+var_C] +
mov [ebp+var_C] esi +
call sub_1002CC0  +
mov eax 80004005h +
jmp loc_100F6EC  +
***
lea ecx [ebp-34h] +
call sub_103309C  +
mov esi eax +
lea edi [ebp-24h] +
movs   +
movs   +
movs   +
push offset dword_10458FC  +
lea eax [ebp-24h] +
push eax  +
movs   +
call _CxxThrowException  +
***
lea ecx [ebp-34h] +
call sub_103309C  +
mov esi eax +
lea edi [ebp-24h] +
movs   +
movs   +
movs   +
push offset dword_10458FC  +
lea eax [ebp-24h] +
push eax  +
movs   +
call _CxxThrowException  +
push dword ptr [ebp-10h]  +
mov ecx ebx +
call sub_100F9AC  +
jmp loc_100F93B  +
***
xor eax eax +
inc eax  +
retn   +
push edi  +
call ds:DeregisterEventSource  +
jmp loc_100A53F  +
***
dec ecx  +
jnz loc_100A35F  +
inc dword ptr [esi+10h]  +
pop esi  +
retn   +
mov dword ptr [esi] 2 +
mov dword ptr [esi+10h] 1 +
jmp loc_100A359  +
***
xor al al +
retn   +
***
dec ecx  +
jnz loc_100AAE9  +
cmp [esi+10h] eax +
mov ecx [esi+8] +
setnl bl  +
cmp ecx edx +
jge loc_100AAED  +
jmp loc_100AAE3  +
***
sub ecx [esi+4] +
mov eax dword_104A058 +
sbb edi [esi+8] +
cdq   +
cmp edi edx +
jl loc_100A1D0  +
jg loc_101E579  +
cmp ecx eax +
jbe loc_100A1D0  +
mov ecx esi +
call sub_1034AF4  +
jmp loc_1011A43  +
***
cmp [ebp+var_8] eax +
jle loc_100A63D  +
inc eax  +
jmp loc_100A63D  +
***
mov eax [ebp-14h] +
and dword ptr [eax+0Ch] 0 +
mov eax [eax+4] +
xor ecx ecx +
mov [eax] cx +
mov eax offset loc_101E5C3 +
retn   +
mov esi [ebp-14h] +
jmp loc_101182F  +
***
mov ecx [ecx+10h] +
pop ebp  +
jmp loc_1035C73  +
***
push 800700CEh  +
push 0D5h  +
push offset aDW7rtmEnduse_1  +
lea ecx [ebp+var_20] +
call sub_102F44D  +
mov esi eax +
lea edi [ebp+var_10] +
movs   +
movs   +
movs   +
push offset dword_10458FC  +
lea eax [ebp+var_10] +
push eax  +
movs   +
call _CxxThrowException  +
***
push eax  +
call sub_10085E3  +
and dword ptr [esi] 0 +
pop ecx  +
jmp loc_100D0FB  +
push 8007000Eh  +
push 0FCh  +
push offset aDW7rtmEnduse_1  +
lea ecx [ebp+var_20] +
call sub_102F44D  +
mov esi eax +
lea edi [ebp+var_10] +
movs   +
movs   +
movs   +
push offset dword_10458FC  +
lea eax [ebp+var_10] +
push eax  +
movs   +
call _CxxThrowException  +
lea eax [eax+edi+1] +
push eax  +
mov ecx esi +
call sub_1036342  +
jmp loc_100D158  +
***
cmp [ebp+arg_0] 0 +
mov eax offset aAccessretailtr +
jnz loc_101E680  +
mov eax offset ProcName +
push eax  +
push [ebp+hModule]  +
call ds:__imp_GetProcAddress  +
test eax eax +
jz loc_100E7AE  +
cmp [ebp+arg_0] 0 +
jz loc_101E69F  +
push offset off_104B7EC  +
jmp loc_101E6A4  +
push offset off_104B7E8  +
call eax  +
xor eax eax +
inc eax  +
jmp locret_100E7B0  +
***
push eax  +
call ds:CloseHandle  +
test eax eax +
jnz locret_1012258  +
jmp ds:__imp_GetLastError  +
***
mov eax 80004003h +
jmp loc_1002448  +
mov eax 80070057h +
jmp loc_1002448  +
***
mov eax 80004003h +
jmp loc_1004CE5  +
***
mov eax dword_104A3A0 +
mov ebx dword_104A3A4 +
mov ecx eax +
mov edx ebx +
and ecx edi +
and edx esi +
cmp ecx eax +
jnz loc_1008686  +
cmp edx ebx +
jnz loc_1008686  +
mov eax [ebp+arg_4] +
test eax eax +
jnz loc_101E739  +
mov eax offset word_100348C +
push eax  +
push offset dword_101E798  +
push dword_104A134  +
push dword_104A130  +
call sub_10263C4  +
jmp loc_1008686  +
mov eax dword_104A3A0 +
mov ecx eax +
and ecx edi +
mov edi dword_104A3A4 +
mov edx edi +
and edx esi +
cmp ecx eax +
jnz loc_10086C6  +
cmp edx edi +
jnz loc_10086C6  +
push dword ptr [ebx]  +
push [ebp+arg_4]  +
push offset dword_101E7A8  +
push dword_104A134  +
push dword_104A130  +
call sub_102B7A7  +
jmp loc_10086C6  +
***
mov esi 8007000Eh +
jmp loc_100280D  +
push dword ptr [edi+24h]  +
call off_104B7F0  +
and dword ptr [edi+24h] 0 +
jmp loc_100280D  +
***
mov eax offset loc_101E7E4 +
retn   +
mov esi [ebp+8] +
xor edi edi +
mov eax edi +
jmp loc_1004B3A  +
***
mov eax offset loc_101E800 +
retn   +
mov esi [ebp+8] +
xor edi edi +
mov eax edi +
jmp loc_10159A2  +
***
mov eax [ebp+arg_0] +
and [eax] ebx +
xor eax eax +
jmp loc_10099E4  +
mov eax 8007000Eh +
jmp loc_10099E3  +
push dword ptr [esi]  +
call ds:CoTaskMemFree  +
and dword ptr [esi] 0 +
jmp loc_10099E0  +
***
mov eax [ebx] +
push 1  +
mov ecx ebx +
call dword ptr [eax+50h]  +
jmp loc_100345C  +
***
mov eax [ebp-30h] +
mov [ebp-28h] eax +
mov eax offset loc_101E860 +
retn   +
mov esi [ebp-2Ch] +
mov edi [ebp-28h] +
jmp loc_1015938  +
***
push 0  +
lea ecx [esi+10h] +
call sub_1036A89  +
xor edi edi +
push edi  +
lea ecx [esi+14h] +
call sub_1036A89  +
push edi  +
lea ecx [esi+18h] +
call sub_1036A89  +
push edi  +
lea ecx [esi+1Ch] +
call sub_1036A89  +
push edi  +
lea ecx [esi+20h] +
call sub_1036A89  +
jmp loc_101594A  +
***
mov edi 80004003h +
jmp loc_1015D29  +
mov eax [ebp+arg_8] +
and dword ptr [ebx] 0 +
test eax eax +
jz loc_101E8BA  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
xor eax eax +
jmp loc_1015D2B  +
mov eax [ebp+arg_8] +
test eax eax +
jz loc_101E8CE  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax 8000FFFFh +
jmp loc_1015D2B  +
mov dword ptr [ebx] 0Ah +
jmp loc_1015D0F  +
mov dword ptr [ebx] 9 +
jmp loc_1015D0F  +
***
mov edi 80004003h +
jmp loc_1015AC7  +
mov eax [esi] +
push 1  +
mov ecx esi +
call dword ptr [eax+18h]  +
jmp loc_1015AC6  +
***
mov eax [ecx] +
push ecx  +
call dword ptr [eax+8]  +
jmp locret_10024BC  +
***
mov eax 80004003h +
jmp loc_1002794  +
test esi esi +
jz loc_101E928  +
mov eax [esi] +
push 1  +
mov ecx esi +
call dword ptr [eax+78h]  +
mov eax ebx +
jmp loc_1002792  +
mov eax [esi] +
push 1  +
mov ecx esi +
call dword ptr [eax+78h]  +
jmp loc_1002790  +
***
mov eax dword_104A3A0 +
push edi  +
mov edi dword_104A3A4 +
mov ecx eax +
and ecx edx +
mov edx edi +
and edx esi +
cmp ecx eax +
jnz loc_101E970  +
cmp edx edi +
jnz loc_101E970  +
push ebx  +
push offset dword_101E978  +
push dword_104A134  +
push dword_104A130  +
call sub_10379EB  +
pop edi  +
jmp loc_101A2D5  +
***
mov eax dword_104A3A0 +
push edi  +
mov edi dword_104A3A4 +
mov ecx eax +
and ecx edx +
mov edx edi +
and edx esi +
cmp ecx eax +
jnz loc_101E9BB  +
cmp edx edi +
jnz loc_101E9BB  +
push ebx  +
push offset dword_101E9C8  +
push dword_104A134  +
push dword_104A130  +
call sub_10379EB  +
pop edi  +
jmp loc_101A32B  +
***
mov ebx 80004003h +
cmp dword_104A3AC eax +
jz loc_101EA45  +
mov al byte_104A3B0 +
cmp al 4 +
jnb loc_101E9F2  +
test al al +
jnz loc_101EA45  +
mov edx dword_104A398 +
mov esi dword_104A39C +
mov ecx 20000h +
mov eax 80000000h +
and edx ecx +
and esi eax +
or edx esi +
jz loc_101EA45  +
mov edx dword_104A3A0 +
mov edi dword_104A3A4 +
mov esi edx +
and esi ecx +
mov ecx edi +
and ecx eax +
cmp esi edx +
jnz loc_101EA45  +
cmp ecx edi +
jnz loc_101EA45  +
push 0  +
push ebx  +
push offset dword_101EA90  +
push dword_104A134  +
push dword_104A130  +
call sub_102B7A7  +
mov eax ebx +
jmp loc_1017488  +
mov edx dword_104A3A0 +
mov edi dword_104A3A4 +
mov esi edx +
and esi ecx +
mov ecx edi +
and ecx eax +
cmp esi edx +
jnz loc_1017486  +
cmp ecx edi +
jnz loc_1017486  +
push ebx  +
push 0  +
push offset dword_101EA90  +
push dword_104A134  +
push dword_104A130  +
call sub_102B7A7  +
jmp loc_1017486  +
***
mov eax dword_104A3A0 +
push edi  +
mov edi dword_104A3A4 +
mov ecx eax +
and ecx edx +
mov edx edi +
and edx esi +
cmp ecx eax +
jnz loc_101EAD3  +
cmp edx edi +
jnz loc_101EAD3  +
push ebx  +
push offset dword_101EAE0  +
push dword_104A134  +
push dword_104A130  +
call sub_10379EB  +
pop edi  +
jmp loc_101A381  +
***
jle loc_1004F62  +
and eax 0FFFFh +
or eax 80070000h +
jmp loc_1004F62  +
mov eax 8000FFFFh +
jmp loc_1004F62  +
mov eax 8007000Eh +
jmp loc_1004F61  +
push ebx  +
call off_104B7F0  +
cmp esi edi +
jle loc_101EB30  +
and esi 0FFFFh +
or esi 80070000h +
mov eax esi +
jmp loc_1004F61  +
***
and eax 0FFFFh +
or eax 80070000h +
jmp loc_1019550  +
***
mov ebx 80004003h +
cmp dword_104A3AC esi +
jz loc_101EBB6  +
mov al byte_104A3B0 +
cmp al 4 +
jnb loc_101EB60  +
test al al +
jnz loc_101EBB6  +
mov edx dword_104A398 +
mov esi dword_104A39C +
mov ecx 20000h +
mov eax 80000000h +
and edx ecx +
and esi eax +
or edx esi +
jz loc_101EBB6  +
mov edx dword_104A3A0 +
mov edi dword_104A3A4 +
mov esi edx +
and esi ecx +
mov ecx edi +
and ecx eax +
cmp esi edx +
jnz loc_101EBB6  +
cmp ecx edi +
jnz loc_101EBB6  +
push offset word_100348C  +
push ebx  +
push offset dword_101EC08  +
push dword_104A134  +
push dword_104A130  +
call sub_1026426  +
mov eax ebx +
jmp loc_100996A  +
mov edx dword_104A3A0 +
mov edi dword_104A3A4 +
mov esi edx +
and esi ecx +
mov ecx edi +
and ecx eax +
cmp esi edx +
jnz loc_1009967  +
cmp ecx edi +
jnz loc_1009967  +
push dword ptr [ebx+14h]  +
push [ebp+arg_4]  +
push offset dword_101EC08  +
push dword_104A134  +
push dword_104A130  +
call sub_1026426  +
jmp loc_1009967  +
***
mov eax dword_104A3A0 +
push ebx  +
mov ebx dword_104A3A4 +
mov ecx eax +
and ecx edx +
mov edx ebx +
and edx esi +
cmp ecx eax +
jnz loc_101EC4A  +
cmp edx ebx +
jnz loc_101EC4A  +
push offset dword_101EC50  +
push dword_104A134  +
push dword_104A130  +
call sub_100A01E  +
pop ebx  +
jmp loc_10093FA  +
***
mov edx dword_104A3A0 +
mov ebx dword_104A3A4 +
mov eax edx +
mov ecx ebx +
and eax edi +
and ecx esi +
cmp eax edx +
jnz loc_1009880  +
cmp ecx ebx +
jnz loc_1009880  +
push offset dword_101ECE0  +
push dword_104A134  +
push dword_104A130  +
call sub_100A01E  +
jmp loc_1009880  +
mov edx dword_104A3A0 +
mov eax edx +
and eax edi +
mov edi dword_104A3A4 +
mov ecx edi +
and ecx esi +
cmp eax edx +
jnz loc_10098D6  +
cmp ecx edi +
jnz loc_10098D6  +
push offset dword_101ECF0  +
push dword_104A134  +
push dword_104A130  +
call sub_100A01E  +
jmp loc_10098D6  +
***
or dword ptr [ebp-4] 0FFFFFFFFh +
mov eax offset loc_101EEB8 +
retn   +
cmp dword ptr [ebp-20h] 0 +
mov edi 20000h +
mov esi 80000000h +
jl loc_10096E9  +
mov ebx [ebp-1Ch] +
jmp loc_10096CF  +
***
mov ecx [ebp-14h] +
mov [eax] ecx +
jmp loc_10096F4  +
mov edx dword_104A3A0 +
mov eax edx +
and eax edi +
mov edi dword_104A3A4 +
mov ecx edi +
and ecx esi +
cmp eax edx +
jnz loc_1009728  +
cmp ecx edi +
jnz loc_1009728  +
push dword ptr [ebp-14h]  +
push ebx  +
push offset dword_101EF38  +
push dword_104A134  +
push dword_104A130  +
call sub_102B7A7  +
jmp loc_1009728  +
***
mov edi eax +
jmp loc_1006463  +
mov eax ecx +
jmp loc_100641C  +
mov ebx edi +
jmp loc_1006428  +
***
push 8007000Eh  +
call loc_1025B15  +
int 3  +
***
mov eax offset loc_101EF78 +
retn   +
mov esi [ebp+8] +
xor edi edi +
mov eax edi +
jmp loc_1009362  +
***
mov eax [ebp-18h] +
mov eax [ebp-18h] +
mov [ebp-14h] eax +
mov eax offset loc_101961A +
retn   +
***
mov eax dword_104A3A0 +
push edi  +
mov edi dword_104A3A4 +
mov ecx eax +
and ecx edx +
mov edx edi +
and edx esi +
cmp ecx eax +
jnz loc_101EFFA  +
cmp edx edi +
jnz loc_101EFFA  +
mov eax ebx +
test ebx ebx +
jnz loc_101EFE3  +
mov eax offset word_100348C +
push eax  +
push offset dword_101F000  +
push dword_104A134  +
push dword_104A130  +
call sub_10263C4  +
pop edi  +
jmp loc_10195D3  +
***
inc ebp  +
or ds:byte_101F020[eax] bh +
retn   +
***
cmp esi 103h +
jz loc_1006DB5  +
test esi esi +
jle loc_101F044  +
and esi 0FFFFh +
or esi 80070000h +
mov [ebp+8] esi +
jmp loc_1006DB5  +
***
cmp [ebp+var_8] ebx +
jz loc_1004FED  +
mov bl 1 +
jmp loc_1004FED  +
***
push eax  +
push [ebp+arg_0]  +
push dword ptr [ecx]  +
call ds:RegDeleteKeyExW  +
jmp loc_10198C2  +
***
inc eax  +
retn   +
***
push [ebp+pSacl]  +
call edi  +
pop ecx  +
jmp loc_1006A6D  +
***
push 8007000Eh  +
call loc_1025B15  +
call sub_100F56E  +
push dword ptr [esi+4]  +
mov edi eax +
call ds:__imp_free  +
and dword ptr [esi+4] 0 +
pop ecx  +
push edi  +
jmp loc_101F07F  +
***
push 8007000Eh  +
call loc_1025B15  +
call sub_100F56E  +
push dword ptr [esi+4]  +
mov edi eax +
call ds:__imp_free  +
and dword ptr [esi+4] 0 +
pop ecx  +
push edi  +
jmp loc_101F0A1  +
push [ebp+dwBufferLength]  +
push edi  +
push [ebp+dwBufferLength]  +
push dword ptr [esi+4]  +
call sub_1006B30  +
add esp 10h +
jmp loc_100703B  +
***
dec eax  +
mov eax 80004005h +
retn   +
mov eax 8000FFFFh +
retn   +
***
push 80070057h  +
call loc_1025B15  +
int 3  +
push 80070057h  +
call loc_1025B15  +
int 3  +
xor eax eax +
jmp loc_1016E97  +
***
push eax  +
call sub_10397CD  +
jmp loc_1016E96  +
xor eax eax +
jmp loc_1016E96  +
***
xor eax eax +
jmp loc_1007AD4  +
***
xor eax eax +
jmp loc_1015F4E  +
***
xor eax eax +
jmp loc_1008F36  +
***
mov eax 80070057h +
jmp loc_1007DC4  +
***
push esi  +
call off_104B7F0  +
jmp loc_101A1EE  +
***
push 80004005h  +
call loc_1025B15  +
int 3  +
***
mov [esi+54h] eax +
jmp loc_100514E  +
mov [ecx] edx +
jmp loc_1005168  +
***
mov [esi+34h] edx +
jmp loc_1006135  +
***
push 80070057h  +
call loc_1025B15  +
int 3  +
mov edx [ebp+arg_8] +
mov [ecx] edx +
jmp loc_1007602  +
***
push eax  +
push [ebp+samDesired]  +
push 0  +
push [ebp+lpSubKey]  +
push [ebp+hKey]  +
call ds:RegOpenKeyExW  +
jmp loc_101753E  +
***
xor al al +
retn   +
***
push 80070057h  +
call loc_1025B15  +
call sub_100F56E  +
mov byte ptr [esi+48h] 0 +
push eax  +
jmp loc_101F192  +
***
push 8007000Eh  +
call loc_1025B15  +
push dword ptr [esi+4]  +
mov edi eax +
call ds:__imp_free  +
and dword ptr [esi+4] 0 +
pop ecx  +
push edi  +
jmp loc_101F1A8  +
***
xor eax eax +
leave   +
retn   +
call sub_10308E9  +
int 3  +
mov eax [esi] +
call dword ptr [eax+4]  +
mov eax [edi+4] +
test eax eax +
jz loc_10070C6  +
push eax  +
mov ecx esi +
call sub_1006FD6  +
jmp loc_10070C6  +
***
call sub_103961D  +
jmp loc_1006E0C  +
lea ecx [ebp+bDaclDefaulted] +
push ecx  +
lea ecx [ebp+pDacl] +
push ecx  +
lea ecx [ebp+bDaclPresent] +
push ecx  +
push eax  +
call ds:GetSecurityDescriptorDacl  +
test eax eax +
jnz loc_1006E21  +
call sub_10308E9  +
push 8007000Eh  +
call loc_1025B15  +
xor eax eax +
jmp loc_1006E77  +
call sub_100F56E  +
push edi  +
mov esi eax +
call ds:__imp_free  +
pop ecx  +
push esi  +
jmp loc_101F216  +
***
push 80004005h  +
call loc_1025B15  +
test edi edi +
jz loc_1007CEF  +
push 80070057h  +
jmp loc_101F239  +
call sub_102BAC6  +
int 3  +
***
mov eax offset loc_101F275 +
retn   +
mov esi [ebp+8] +
xor edi edi +
mov eax edi +
jmp loc_1008D37  +
***
mov ebx esi +
push esi  +
jmp loc_1016E32  +
***
test ebx ebx +
jnz sub_10175DF  +
jmp loc_101F299  +
***
push esi  +
jmp loc_10175E0  +
***
mov esi [ebp+var_4] +
test esi esi +
jz loc_10182EE  +
push esi  +
push [ebp+arg_0]  +
call sub_10055FE  +
test eax eax +
jge loc_101F2B8  +
mov ebx esi +
jmp loc_10182EE  +
push esi  +
mov ecx edi +
call sub_1007AB2  +
mov ebx eax +
jmp loc_10182EE  +
***
mov ebx esi +
push esi  +
jmp loc_101663E  +
***
mov [ebp+var_4] esi +
jmp loc_101A410  +
mov esi [esi+34h] +
jmp loc_101A410  +
push [ebp+var_4]  +
jmp loc_101F2F3  +
push dword ptr [esi]  +
push [ebp+arg_0]  +
call sub_1016669  +
test al al +
jz loc_101F300  +
push esi  +
mov ecx edi +
call sub_1008EFE  +
mov esi eax +
test esi esi +
jnz loc_101F2E4  +
mov eax esi +
jmp loc_101A443  +
mov [ebp+var_4] ebx +
jmp loc_101A440  +
***
mov edi eax +
jmp loc_1016742  +
mov eax ecx +
jmp loc_10166FB  +
mov ebx edi +
jmp loc_1016707  +
***
push esi  +
call off_104B7F0  +
jmp loc_1005CA7  +
***
mov edi eax +
jmp loc_1003C0A  +
mov eax ecx +
jmp loc_1003C39  +
mov ebx edi +
jmp loc_1003C45  +
***
push 80004005h  +
call loc_1025B15  +
int 3  +
mov edi eax +
jmp loc_1015E70  +
***
mov eax ecx +
jmp loc_1015E9F  +
mov ebx edi +
jmp loc_1015EAB  +
***
push 8007000Eh  +
call loc_1025B15  +
int 3  +
***
mov esi 80004005h +
jmp loc_10176BE  +
mov esi 80004005h +
jmp loc_1017755  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_1017774  +
***
cmp word ptr [ebp-30h] 9 +
jz loc_10196FD  +
mov esi 80004002h +
jmp loc_101970C  +
***
mov eax [ebp-10h] +
mov ecx [eax] +
lea edx [ebp+0Ch] +
push edx  +
push 0FFFFFFFFh  +
push dword ptr [ebp+10h]  +
push eax  +
call dword ptr [ecx+24h]  +
mov esi eax +
jmp loc_10171CE  +
xor esi esi +
jmp loc_101728B  +
***
and [ebp+arg_0] 0 +
jmp loc_1007DF4  +
xor ebx ebx +
jmp loc_1007DFF  +
mov ebx edi +
sub ebx [ebp+arg_0] +
jmp loc_1007E15  +
***
push 80070057h  +
call loc_1025B15  +
int 3  +
mov eax [esi] +
push 1  +
mov ecx esi +
call dword ptr [eax+64h]  +
mov eax [ebp+var_10] +
or [ebp+var_4] 0FFFFFFFFh +
test eax eax +
jz loc_1008EBD  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_1008EBD  +
***
mov ecx offset dword_104A104 +
mov eax dword_104A104 +
jmp dword ptr [eax+10h]  +
***
push esi  +
call off_104B7F0  +
jmp loc_1003BDA  +
***
lea ecx [ebp+hKey] +
call sub_1004887  +
mov eax ebx +
jmp loc_1019884  +
push edi  +
lea eax [ebp+SubKey] +
push eax  +
lea ecx [ebp+hKey] +
call sub_10197C1  +
jmp loc_1019895  +
***
lea ecx [ebp+hKey] +
call sub_1004887  +
push ebx  +
call sub_100A7A1  +
jmp loc_1018AC2  +
push eax  +
call sub_100A7A1  +
mov esi eax +
jmp loc_1018AAA  +
***
lea eax [esi+4] +
push eax  +
lea eax [edi+4] +
push eax  +
call sub_1039FBD  +
test al al +
jnz loc_1017875  +
lea eax [esi+8] +
push eax  +
lea eax [edi+8] +
push eax  +
call sub_1039FBD  +
test al al +
jnz loc_1017875  +
mov eax [edi+0Ch] +
cmp eax [esi+0Ch] +
jnz loc_1017875  +
mov eax [edi+10h] +
cmp eax [esi+10h] +
jnz loc_1017875  +
mov eax [edi+14h] +
cmp eax [esi+14h] +
jnz loc_1017875  +
mov eax [edi+18h] +
cmp eax [esi+18h] +
jnz loc_1017875  +
mov eax [edi+1Ch] +
cmp eax [esi+1Ch] +
jnz loc_1017875  +
mov eax [edi+20h] +
cmp eax [esi+20h] +
jnz loc_1017875  +
mov eax [edi+24h] +
cmp eax [esi+24h] +
jnz loc_1017875  +
mov al 1 +
jmp loc_1017877  +
***
add eax 20h +
jmp loc_1019406  +
***
call sub_10308E9  +
push 80070057h  +
call loc_1025B15  +
int 3  +
mov edx dword_104A3A0 +
mov ebx dword_104A3A4 +
mov eax edx +
mov ecx ebx +
and eax edi +
and ecx esi +
cmp eax edx +
jnz loc_10094AE  +
cmp ecx ebx +
jnz loc_10094AE  +
push offset dword_101F750  +
push dword_104A134  +
push dword_104A130  +
call sub_100A01E  +
jmp loc_10094AE  +
mov ebx 80004003h +
cmp dword_104A3AC eax +
jz loc_1009570  +
mov al byte_104A3B0 +
cmp al 4 +
jnb loc_101F570  +
test al al +
jnz loc_1009570  +
mov eax dword_104A398 +
mov ecx dword_104A39C +
and eax edi +
and ecx esi +
or eax ecx +
jz loc_1009570  +
mov edx dword_104A3A0 +
mov eax edx +
and eax edi +
mov edi dword_104A3A4 +
mov ecx edi +
and ecx esi +
cmp eax edx +
jnz loc_1009570  +
cmp ecx edi +
jnz loc_1009570  +
push ebx  +
push offset dword_101F760  +
push dword_104A134  +
push dword_104A130  +
call sub_10379EB  +
jmp loc_1009570  +
cmp dword_104A3AC eax +
jz loc_101F623  +
mov al byte_104A3B0 +
cmp al 4 +
jnb loc_101F5DC  +
test al al +
jnz loc_101F623  +
mov eax dword_104A398 +
mov ecx dword_104A39C +
and eax edi +
and ecx esi +
or eax ecx +
jz loc_101F623  +
mov eax dword_104A3A0 +
mov ecx eax +
and ecx edi +
mov edi dword_104A3A4 +
mov edx edi +
and edx esi +
cmp ecx eax +
jnz loc_101F623  +
cmp edx edi +
jnz loc_101F623  +
push dword ptr [ebp-4]  +
push offset dword_101F760  +
push dword_104A134  +
push dword_104A130  +
call sub_10379EB  +
mov eax [ebp-4] +
jmp loc_1009572  +
cmp dword_104A3AC eax +
jz loc_101F686  +
mov al byte_104A3B0 +
cmp al 4 +
jnb loc_101F640  +
test al al +
jnz loc_101F686  +
mov eax dword_104A398 +
mov ecx dword_104A39C +
and eax edi +
and ecx esi +
or eax ecx +
jz loc_101F686  +
mov eax dword_104A3A0 +
mov ecx eax +
and ecx edi +
mov edi dword_104A3A4 +
mov edx edi +
and edx esi +
cmp ecx eax +
jnz loc_101F686  +
cmp edx edi +
jnz loc_101F686  +
push 1  +
push offset dword_101F760  +
push dword_104A134  +
push dword_104A130  +
call sub_10379EB  +
xor eax eax +
inc eax  +
jmp loc_1009572  +
cmp dword_104A3AC eax +
jz loc_101F6EA  +
mov al byte_104A3B0 +
cmp al 4 +
jnb loc_101F6A3  +
test al al +
jnz loc_101F6EA  +
mov eax dword_104A398 +
mov ecx dword_104A39C +
and eax edi +
and ecx esi +
or eax ecx +
jz loc_101F6EA  +
mov eax dword_104A3A0 +
mov ecx eax +
and ecx edi +
mov edi dword_104A3A4 +
mov edx edi +
and edx esi +
cmp ecx eax +
jnz loc_101F6EA  +
cmp edx edi +
jnz loc_101F6EA  +
push dword ptr [ebp-4]  +
push offset dword_101F760  +
push dword_104A134  +
push dword_104A130  +
call sub_10379EB  +
mov eax [ebp-8] +
test eax eax +
jz loc_101F623  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_101F623  +
mov eax dword_104A3A0 +
mov ecx eax +
and ecx edi +
mov edi dword_104A3A4 +
mov edx edi +
and edx esi +
cmp ecx eax +
jnz loc_1009565  +
cmp edx edi +
jnz loc_1009565  +
push ebx  +
push offset dword_101F760  +
push dword_104A134  +
push dword_104A130  +
call sub_10379EB  +
jmp loc_1009565  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_1009570  +
***
push dword ptr [esi+4]  +
push eax  +
call sub_1005C65  +
push dword ptr [esi]  +
call ds:__imp_free  +
pop ecx  +
jmp loc_10074C6  +
***
push 8007000Eh  +
call loc_1025B15  +
int 3  +
***
mov [esi+0Ch] eax +
jmp loc_1005C2B  +
cmp edi [esi+8] +
ja loc_101F7B8  +
mov eax [esi+4] +
cmp eax edi +
jb loc_101F7C9  +
jbe loc_101F7D9  +
sub eax edi +
push eax  +
mov eax [esi] +
lea eax [eax+edi*4] +
push eax  +
call sub_1005C65  +
jmp loc_101F7D9  +
push edi  +
call sub_10063EE  +
test al al +
jz loc_1005C5A  +
mov eax [esi+4] +
mov ecx edi +
sub ecx eax +
push ecx  +
mov ecx [esi] +
lea eax [ecx+eax*4] +
push eax  +
call sub_1039D13  +
mov [esi+4] edi +
jmp loc_1005C58  +
***
push 80070057h  +
call loc_1025B15  +
call sub_100F56E  +
push eax  +
jmp loc_101F7E6  +
***
push 8007000Eh  +
call loc_1025B15  +
int 3  +
mov eax [ebp-44h] +
mov eax [eax] +
mov [ebp-38h] eax +
mov eax offset loc_1019E2F +
retn   +
***
mov eax [ebp-34h] +
mov eax [ebp-24h] +
mov eax [eax] +
mov [ebp+8] eax +
mov eax offset loc_101716F +
retn   +
***
mov [ebp+arg_4] eax +
jmp loc_10178C7  +
xor esi esi +
jmp loc_10178D2  +
mov eax [ebx] +
mov esi [eax-0Ch] +
sub esi [ebp+arg_4] +
jmp loc_10178E8  +
xor esi esi +
jmp loc_10178F6  +
cmp esi eax +
jnz loc_1017900  +
mov ecx [ebp+arg_0] +
push ebx  +
call sub_10069A9  +
jmp loc_1017918  +
***
xor ebx ebx +
jmp loc_1007C73  +
xor esi esi +
jmp loc_1007C80  +
push ecx  +
mov ecx [ebp+arg_0] +
call sub_10069A9  +
jmp loc_1007C9D  +
***
xor edi edi +
jmp loc_10079ED  +
***
push 80070057h  +
call loc_1025B15  +
push 8007000Eh  +
jmp loc_101F8AA  +
***
mov [esi+0Ch] eax +
jmp loc_1015DCB  +
cmp edi [esi+8] +
ja loc_101F8DC  +
mov eax [esi+4] +
cmp eax edi +
jb loc_101F8ED  +
jbe loc_101F8FD  +
sub eax edi +
push eax  +
mov eax [esi] +
lea eax [eax+edi*4] +
push eax  +
call sub_1015F6E  +
jmp loc_101F8FD  +
push edi  +
call sub_1015E4C  +
test al al +
jz loc_1015DEA  +
mov eax [esi+4] +
mov ecx edi +
sub ecx eax +
push ecx  +
mov ecx [esi] +
lea eax [ecx+eax*4] +
push eax  +
call sub_1039FDE  +
mov [esi+4] edi +
jmp loc_1015DE8  +
***
test byte ptr [esi+68h] 10h +
jz loc_10052FB  +
jmp loc_10052B3  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+10h]  +
test al al +
jnz loc_10052DD  +
or eax 0FFFFFFFFh +
jmp loc_10052F5  +
***
cmp edi esi +
jz loc_1005351  +
and dword ptr [esi] 0 +
jmp loc_1005351  +
***
mov esi eax +
imul eax eax +
inc eax  +
cmp eax edx +
jnb loc_10068A6  +
jmp loc_101F93B  +
***
push dword ptr [ebp-0Ch]  +
mov ecx edi +
call sub_10068B5  +
push eax  +
push dword ptr [ebp-4]  +
mov ecx edi +
call sub_10068B5  +
mov ecx eax +
call sub_100532F  +
sub [ebp-4] esi +
sub [ebp-0Ch] esi +
cmp [ebp-4] esi +
jb loc_1006862  +
jmp loc_1006844  +
***
and dword ptr [ebp-4] 0 +
mov eax offset loc_101F994 +
retn   +
mov esi [ebp-18h] +
xor ebx ebx +
jmp loc_1006372  +
***
push 8007000Eh  +
call loc_1025B15  +
int 3  +
***
mov [esi+0Ch] eax +
jmp loc_100379D  +
push dword ptr [esi+4]  +
push eax  +
call sub_1003B93  +
push dword ptr [esi]  +
call ds:__imp_free  +
and [esi] edi +
pop ecx  +
jmp loc_10037B2  +
mov eax [esi+4] +
cmp eax edi +
jb loc_100743A  +
jbe loc_100744A  +
sub eax edi +
push eax  +
mov eax [esi] +
lea eax [eax+edi*8] +
push eax  +
call sub_1003B93  +
jmp loc_100744A  +
***
push esi  +
call off_104B7F0  +
jmp loc_100460A  +
***
and eax edi +
or eax esi +
jmp loc_1007350  +
and eax edi +
or eax esi +
jmp loc_1007371  +
xor eax eax +
inc eax  +
push eax  +
push off_104B800  +
lea ecx [ebp-20h] +
mov [ebx] eax +
call sub_1015D71  +
test eax eax +
jle loc_101FA28  +
and eax edi +
or eax esi +
mov [ebp-10h] eax +
jmp loc_100737C  +
***
and eax ebx +
or eax edi +
jmp loc_10173E5  +
and eax ebx +
or eax edi +
jmp loc_1017405  +
***
call ds:__imp_GetLastError  +
cmp eax ebx +
jle loc_10062C7  +
and eax 0FFFFh +
or eax 80070000h +
jmp loc_10062C7  +
call ds:__imp_GetLastError  +
cmp eax ebx +
jle loc_101FA73  +
and eax 0FFFFh +
or eax 80070000h +
mov [ebp-10h] eax +
jmp loc_10062B1  +
***
push esi  +
call off_104B7F0  +
jmp loc_1015FDB  +
***
mov eax [ebp-28h] +
mov [ebp-18h] eax +
mov eax offset sub_10075AE +
retn   +
***
mov edi 8007000Eh +
jmp loc_1005A2B  +
***
mov eax [ebp-1ECh] +
mov eax [eax] +
mov [ebp-1DCh] eax +
mov eax offset loc_101FADF +
retn   +
mov edi [ebp-1DCh] +
jmp loc_1008CBD  +
***
mov eax [esi] +
mov eax [eax-0Ch] +
mov ecx dword_104A2CC +
sub eax [ecx-0Ch] +
mov ecx esi +
push eax  +
lea eax [ebp+8] +
push eax  +
call sub_1007C5B  +
and dword ptr [ebp-4] 0 +
push eax  +
mov ecx esi +
call sub_1003FA0  +
mov ecx [ebp+8] +
jmp loc_101FB39  +
mov eax [esi] +
mov eax [eax-0Ch] +
dec eax  +
push eax  +
lea eax [ebp-10h] +
push eax  +
mov ecx esi +
call sub_1007C5B  +
push eax  +
mov ecx esi +
mov dword ptr [ebp-4] 1 +
call sub_1003FA0  +
mov ecx [ebp-10h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
add ecx 0FFFFFFF0h +
call sub_1002990  +
jmp loc_101A6AD  +
***
pop esi  +
retn   +
***
mov eax [ebp-30h] +
mov eax [eax] +
mov [ebp-28h] eax +
mov eax offset loc_1007C2C +
retn   +
***
mov eax [ebp-2Ch] +
mov [ebp-14h] eax +
mov dword ptr [ebp-4] 5 +
mov eax offset loc_101FC44 +
retn   +
mov edi [ebp-24h] +
xor esi esi +
jmp loc_1018BE6  +
***
mov ecx [ebp-1Ch] +
add ecx 0FFFFFFF0h +
call sub_1002990  +
lea ecx [ebp-38h] +
jmp loc_1018C8E  +
jle loc_101FC6D  +
and eax 0FFFFh +
or eax 80070000h +
mov [ebp-14h] eax +
jmp loc_1018C68  +
jle loc_101FC81  +
and eax 0FFFFh +
or eax 80070000h +
mov [ebp-14h] eax +
lea ecx [ebx-10h] +
jmp loc_101FC54  +
***
mov eax [ebp-2Ch] +
mov [ebp-14h] eax +
mov dword ptr [ebp-4] 5 +
mov eax offset loc_101FCF4 +
retn   +
mov edi [ebp-24h] +
xor esi esi +
jmp loc_1018EC0  +
***
mov ecx [ebp-1Ch] +
add ecx 0FFFFFFF0h +
call sub_1002990  +
lea ecx [ebp-38h] +
jmp loc_1018F68  +
jle loc_101FD1D  +
and eax 0FFFFh +
or eax 80070000h +
mov [ebp-14h] eax +
jmp loc_1018F42  +
jle loc_101FD31  +
and eax 0FFFFh +
or eax 80070000h +
mov [ebp-14h] eax +
lea ecx [ebx-10h] +
jmp loc_101FD04  +
***
lea eax [ebp+arg_0] +
push eax  +
call sub_101A3B2  +
jmp loc_101A565  +
mov ecx [ebp+arg_4] +
add ebx 4 +
push ebx  +
call sub_10095BC  +
xor eax eax +
jmp loc_101A591  +
***
mov eax [ebp+8] +
mov eax [eax-0Ch] +
mov ecx [ebp-14h] +
sub eax [ecx-0Ch] +
lea ecx [ebp+8] +
push eax  +
lea eax [ebp-28h] +
push eax  +
call sub_1007C5B  +
push eax  +
lea ecx [ebp+8] +
mov byte ptr [ebp-4] 2 +
call sub_1003FBC  +
mov ecx [ebp-28h] +
add ecx 0FFFFFFF0h +
call sub_1002990  +
jmp loc_1016F0B  +
mov eax [ebp-10h] +
mov byte ptr [ebp-4] 1 +
cmp eax edi +
jz loc_101FDA1  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov ecx [ebp-14h] +
add ecx 0FFFFFFF0h +
call sub_1002990  +
mov ecx [ebp+8] +
add ecx 0FFFFFFF0h +
call sub_1002990  +
mov eax ebx +
jmp loc_10170A2  +
cmp eax edi +
jnz loc_1016F60  +
mov esi 80004005h +
jmp loc_1016F58  +
mov byte ptr [ebp-4] 3 +
cmp eax edi +
jz loc_101FDDE  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-10h] +
mov byte ptr [ebp-4] 1 +
cmp eax edi +
jz loc_101708A  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_101708A  +
mov eax [ebp-18h] +
mov byte ptr [ebp-4] 4 +
cmp eax edi +
jz loc_101FE09  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-20h] +
jmp loc_101FDD0  +
lea eax [ebp-3Ch] +
push eax  +
call esi  +
mov eax [ebp-18h] +
mov byte ptr [ebp-4] 4 +
cmp eax edi +
jz loc_101FE25  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-20h] +
mov byte ptr [ebp-4] 3 +
cmp eax edi +
jz loc_101FE36  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-10h] +
mov byte ptr [ebp-4] 1 +
cmp eax edi +
jz loc_101FE47  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
xor esi esi +
inc esi  +
jmp loc_101708A  +
***
mov esi 80070057h +
jmp loc_101A9FB  +
***
mov esi 80070057h +
jmp loc_1008050  +
mov eax [ebp-14h] +
mov eax [eax-0Ch] +
push esi  +
dec eax  +
push eax  +
lea ecx [ebp-14h] +
call sub_1007DDC  +
jmp loc_100824B  +
mov esi [esi+44h] +
mov ecx [ebp+14h] +
xor eax eax +
test esi esi +
setnz al  +
add eax edi +
mov [ecx] eax +
jmp loc_1008017  +
***
push 1  +
mov ecx esi +
call sub_10036F0  +
push eax  +
lea ecx [ebp-6Ch] +
call sub_1007A16  +
lea ecx [ebp-4Ch] +
push ecx  +
mov ecx eax +
mov byte ptr [ebp-4] 3 +
call sub_1007D37  +
lea ecx [ebp-6Ch] +
mov esi eax +
mov byte ptr [ebp-4] 2 +
call sub_1003B4C  +
cmp esi edi +
jz loc_101FEC8  +
or dword ptr [ebp-10h] 1 +
jmp loc_101FECC  +
or dword ptr [ebp-10h] 2 +
push dword ptr [ebp-10h]  +
lea ecx [ebp-2Ch] +
push offset aSqmfulldrivein  +
call sub_1015D71  +
jmp loc_1018D3A  +
***
push dword ptr [ebp+0Ch]  +
mov ecx [ebp-14h] +
call sub_1039E17  +
jmp loc_1019C0B  +
***
mov ebx [ebx-0Ch] +
push 1  +
dec ebx  +
push ebx  +
lea ecx [ebp-1ECh] +
call sub_1007DDC  +
jmp loc_101FF15  +
push offset dword_1003488  +
lea ecx [ebp-1ECh] +
call sub_1012ECD  +
mov ebx [ebp-1ECh] +
jmp loc_10169A6  +
inc esi  +
jmp loc_10169E1  +
xor esi esi +
jmp loc_101A4F7  +
mov [ebp-1ECh] edi +
jmp loc_1016A1A  +
***
mov [esi+0Ch] eax +
jmp loc_101797E  +
cmp edi [esi+8] +
ja loc_101FF60  +
mov eax [esi+4] +
cmp eax edi +
jb loc_101FF71  +
jbe loc_101FF81  +
sub eax edi +
push eax  +
mov eax edi +
shl eax 5 +
add eax [esi] +
push eax  +
call sub_1015F99  +
jmp loc_101FF81  +
push edi  +
call sub_10166CD  +
test al al +
jz loc_10179AD  +
mov eax [esi+4] +
mov ecx edi +
sub ecx eax +
shl eax 5 +
add eax [esi] +
push ecx  +
push eax  +
call sub_103A86C  +
mov [esi+4] edi +
jmp loc_10179AB  +
***
push esi  +
call off_104B7F0  +
jmp loc_10046BF  +
***
mov eax [ebp-24h] +
mov eax [eax] +
mov [ebp-14h] eax +
mov eax offset loc_1020081 +
retn   +
mov ebx [ebp-14h] +
jmp loc_1007FBB  +
***
mov eax dword_104A3A0 +
mov edi dword_104A3A4 +
mov ecx eax +
and ecx edx +
mov edx edi +
and edx esi +
cmp ecx eax +
jnz loc_1007FF2  +
cmp edx edi +
jnz loc_1007FF2  +
test ebx ebx +
jl loc_10200B7  +
mov eax [ebp+14h] +
mov eax [eax] +
jmp loc_10200B9  +
xor eax eax +
push eax  +
mov eax [ebp+10h] +
push dword ptr [eax]  +
push ebx  +
push offset dword_1020150  +
push dword_104A134  +
push dword_104A130  +
call sub_10395BD  +
jmp loc_1007FF2  +
mov al byte_104A3B0 +
cmp al 4 +
jnb loc_10200E8  +
test al al +
jnz loc_1020130  +
mov ecx 20000h +
and edi ecx +
and esi 80000000h +
or edi esi +
jz loc_1020130  +
mov esi dword_104A3A4 +
mov eax ebx +
and eax ecx +
mov ecx esi +
and ecx 80000000h +
cmp eax ebx +
jnz loc_1020130  +
cmp ecx esi +
jnz loc_1020130  +
push edx  +
push edx  +
push 80004003h  +
push offset dword_1020150  +
push dword_104A134  +
push dword_104A130  +
call sub_10395BD  +
mov eax 80004003h +
jmp loc_1007FF4  +
***
mov eax dword_104A3A0 +
mov ecx dword_104A3A4 +
and eax edi +
and ecx esi +
cmp eax dword_104A3A0 +
jnz loc_101AAB3  +
cmp ecx dword_104A3A4 +
jnz loc_101AAB3  +
mov eax [ebp+arg_4] +
test eax eax +
jnz loc_1020193  +
mov eax offset word_100348C +
push eax  +
push offset dword_1020348  +
push dword_104A134  +
push dword_104A130  +
call sub_10263C4  +
mov bl byte_104A3B0 +
jmp loc_101AAB3  +
cmp dword_104A3AC 0 +
jz loc_1020213  +
cmp bl 4 +
jnb loc_10201C7  +
test bl bl +
jnz loc_1020213  +
mov eax dword_104A398 +
mov ecx dword_104A39C +
and eax edi +
and ecx esi +
or eax ecx +
jz loc_1020213  +
mov edx dword_104A3A0 +
mov eax edx +
and eax edi +
mov edi dword_104A3A4 +
mov ecx edi +
and ecx esi +
cmp eax edx +
jnz loc_1020213  +
cmp ecx edi +
jnz loc_1020213  +
push 0  +
push 80004003h  +
push offset dword_1020358  +
push dword_104A134  +
push dword_104A130  +
call sub_102B7A7  +
mov eax 80004003h +
jmp loc_101ACB6  +
cmp dword_104A3AC edx +
jz loc_101ACB3  +
cmp bl 4 +
jnb loc_1020236  +
test bl bl +
jnz loc_101ACB3  +
mov eax dword_104A398 +
mov ecx dword_104A39C +
and eax edi +
and ecx esi +
or eax ecx +
jz loc_101ACB3  +
mov ebx dword_104A3A0 +
mov eax ebx +
and eax edi +
mov edi dword_104A3A4 +
mov ecx edi +
and ecx esi +
cmp eax ebx +
jnz loc_101ACB3  +
cmp ecx edi +
jnz loc_101ACB3  +
push edx  +
push [ebp+var_4]  +
push offset dword_1020358  +
push dword_104A134  +
push dword_104A130  +
call sub_102B7A7  +
jmp loc_101ACB3  +
cmp dword_104A3AC eax +
jz loc_10202EF  +
mov al byte_104A3B0 +
cmp al 4 +
jnb loc_10202A5  +
test al al +
jnz loc_10202EF  +
mov eax dword_104A398 +
mov ecx dword_104A39C +
and eax edi +
and ecx esi +
or eax ecx +
jz loc_10202EF  +
mov eax dword_104A3A0 +
mov ecx eax +
and ecx edi +
mov edi dword_104A3A4 +
mov edx edi +
and edx esi +
cmp ecx eax +
jnz loc_10202EF  +
cmp edx edi +
jnz loc_10202EF  +
mov eax [ebp+arg_8] +
push dword ptr [eax]  +
push ebx  +
push offset dword_1020358  +
push dword_104A134  +
push dword_104A130  +
call sub_102B7A7  +
mov ecx [ebp+var_8] +
add ecx 0FFFFFFF0h +
call sub_1002990  +
mov eax ebx +
jmp loc_101ACB6  +
mov eax dword_104A3A0 +
mov ecx eax +
and ecx edi +
mov edi dword_104A3A4 +
mov edx edi +
and edx esi +
cmp ecx eax +
jnz loc_101AC9B  +
cmp edx edi +
jnz loc_101AC9B  +
mov eax [ebp+arg_8] +
push dword ptr [eax]  +
push [ebp+var_4]  +
push offset dword_1020358  +
push dword_104A134  +
push dword_104A130  +
call sub_102B7A7  +
jmp loc_101AC9B  +
***
mov eax [ebp-1Ch] +
mov eax [eax] +
mov [ebp-14h] eax +
mov eax offset loc_10179B3 +
retn   +
***
mov eax [ebp-2Ch] +
mov eax [eax] +
mov [ebp+8] eax +
mov eax offset loc_10203A6 +
retn   +
mov edi [ebp+8] +
jmp loc_10168E9  +
***
push 8007000Eh  +
call loc_1025B15  +
int 3  +
***
mov eax [ebp-108h] +
call sub_1039C07  +
mov ecx eax +
call sub_10068B5  +
push eax  +
lea ecx [ebp-0B4h] +
call sub_1003F3F  +
mov ecx [ebp-0B8h] +
push 1  +
lea eax [ebp-0B4h] +
push eax  +
mov byte ptr [ebp-4] 0Bh +
call sub_1007AE2  +
cmp eax esi +
mov [ebp-0ACh] eax +
jge loc_1020484  +
push dword ptr [ebp-0B4h]  +
lea ecx [ebp-0A8h] +
call sub_1009D0D  +
mov ecx [ebp-0B8h] +
lea eax [ebp-0A8h] +
push eax  +
push dword ptr [ebp-0ACh]  +
mov byte ptr [ebp-4] 0Ch +
push 14h  +
call sub_1039D64  +
lea ecx [ebp-0A8h] +
mov [ebp-0ACh] esi +
call sub_10084DE  +
jmp loc_10204B9  +
mov ecx [ebp-0B8h] +
lea eax [ebp-0B4h] +
push eax  +
call sub_103A231  +
test eax eax +
jz loc_10204B9  +
push dword ptr [ebp-0E0h]  +
mov ecx [ebp-0B8h] +
lea eax [ebp-0F4h] +
push eax  +
lea eax [ebp-0B4h] +
push eax  +
call sub_103AE89  +
mov ecx [ebp-0B4h] +
add ecx 0FFFFFFF0h +
mov byte ptr [ebp-4] 6 +
call sub_1002990  +
inc ebx  +
cmp ebx edi +
jnb loc_101875A  +
jmp sub_1020401  +
***
push esi  +
lea ecx [ebp-0ACh] +
call sub_1003060  +
push dword ptr [ebp-0B0h]  +
lea ecx [ebp-1A0h] +
mov byte ptr [ebp-4] 5 +
call sub_1039C07  +
mov ecx eax +
call sub_10068B5  +
push eax  +
lea ecx [ebp-0ACh] +
call sub_1003FBC  +
mov ecx [ebp-0B4h] +
push 1  +
lea eax [ebp-0ACh] +
push eax  +
call sub_1007AE2  +
cmp eax ebx +
push dword ptr [ebp-0ACh]  +
mov [ebp-0A8h] eax +
jge loc_102056D  +
lea ecx [ebp-0A4h] +
call sub_1009D0D  +
mov ecx [ebp-0B4h] +
lea eax [ebp-0A4h] +
push eax  +
push dword ptr [ebp-0A8h]  +
mov byte ptr [ebp-4] 6 +
push 14h  +
call sub_1039D64  +
lea ecx [ebp-0A4h] +
mov [ebp-0A8h] ebx +
call sub_10084DE  +
jmp loc_1020578  +
mov ecx [ebp-0B8h] +
call sub_1015DF5  +
mov ecx [ebp-0ACh] +
add ecx 0FFFFFFF0h +
mov [ebp-4] bl +
call sub_1002990  +
inc dword ptr [ebp-0B0h]  +
cmp [ebp-0B0h] edi +
jnb loc_10180A9  +
jmp loc_10204D9  +
***
push 8007000Eh  +
call loc_1025B15  +
int 3  +
***
push 8007000Eh  +
call loc_1025B15  +
int 3  +
cmp esi [eax+38h] +
jnz loc_10205C5  +
mov esi eax +
push esi  +
mov ecx ebx +
call sub_10060F9  +
mov eax [esi+3Ch] +
mov [eax+30h] edi +
mov eax [esi+3Ch] +
mov eax [eax+3Ch] +
and dword ptr [eax+30h] 0 +
mov eax [esi+3Ch] +
push dword ptr [eax+3Ch]  +
mov ecx ebx +
call sub_1039810  +
jmp loc_1005E2D  +
***
mov esi eax +
push esi  +
mov ecx ebx +
call sub_1039810  +
jmp loc_1005E10  +
***
mov eax [ebp-18h] +
mov eax [eax] +
mov [ebp+8] eax +
mov eax offset loc_1020679 +
retn   +
mov ebx [ebp+8] +
jmp loc_1017AC4  +
***
mov eax dword_104A3A0 +
mov esi dword_104A3A4 +
mov ecx eax +
and ecx edx +
mov edx esi +
and edx 80000000h +
cmp ecx eax +
jnz loc_1017B07  +
cmp edx esi +
jnz loc_1017B07  +
push ebx  +
push offset dword_10206D8  +
push dword_104A134  +
push dword_104A130  +
call sub_10379EB  +
jmp loc_1017B07  +
***
lea ecx [ebp-54h] +
call sub_1004F6D  +
mov ecx [ebp-18h] +
lea eax [ebp-54h] +
push eax  +
push dword ptr [ebp-1Ch]  +
mov byte ptr [ebp-4] 3 +
call sub_10070D3  +
lea ecx [ebp-54h] +
call sub_1002A01  +
jmp loc_101899D  +
***
cmp eax 2 +
jz loc_1020725  +
cmp eax ebx +
jle loc_1020723  +
and eax 0FFFFh +
or eax 80070000h +
mov ebx eax +
lea ecx [ebp-228h] +
call sub_1004887  +
mov eax ebx +
jmp loc_10067DB  +
jle loc_1020743  +
and eax 0FFFFh +
or eax 80070000h +
mov edi eax +
jmp loc_10067E3  +
jle loc_1020756  +
and eax 0FFFFh +
or eax 80070000h +
mov edi eax +
jmp loc_1020773  +
mov ecx [ebp-218h] +
add ecx 0FFFFFFF0h +
call sub_1002990  +
lea ecx [ebp-26Ch] +
call sub_1002A01  +
lea ecx [ebp-234h] +
call sub_1004887  +
jmp loc_10067E3  +
mov edi 80004005h +
jmp loc_10067CE  +
***
mov esi eax +
push esi  +
mov ecx ebx +
call sub_100512C  +
jmp loc_10057E3  +
***
lea ecx [esi+20h] +
call sub_103A899  +
mov eax esi +
jmp loc_10056CB  +
***
call sub_100F56E  +
mov [ebp-20h] eax +
jmp loc_1017DD6  +
lea ecx [eax+20h] +
push ecx  +
push eax  +
lea ecx [ebp-0DCh] +
call sub_10056A3  +
push dword ptr [ebp-34h]  +
mov ecx [esi+3Ch] +
call sub_103B0BF  +
mov edi [esi+3Ch] +
push dword ptr [edi]  +
mov ecx edi +
call sub_1007A64  +
mov [ebp-18h] eax +
jmp loc_1017E20  +
mov [ebp-30h] ebx +
mov [ebp-2Ch] ebx +
mov [ebp-28h] ebx +
mov [ebp-24h] ebx +
lea eax [ebp-30h] +
push eax  +
push dword ptr [ebp-18h]  +
lea ecx [ebp-54h] +
mov byte ptr [ebp-4] 5 +
call sub_10068B5  +
push eax  +
mov ecx esi +
call sub_103B067  +
cmp eax ebx +
mov [ebp-20h] eax +
jl loc_10209B6  +
mov [ebp-34h] ebx +
cmp [ebp-2Ch] ebx +
jbe loc_1020996  +
push offset dword_104A104  +
lea ecx [ebp-1Ch] +
call sub_1003060  +
push dword ptr [ebp-34h]  +
lea ecx [ebp-30h] +
mov byte ptr [ebp-4] 6 +
call sub_10068B5  +
push eax  +
lea ecx [ebp-1Ch] +
call sub_1003FBC  +
mov eax [ebp-1Ch] +
push 2  +
pop edi  +
cmp [eax-0Ch] edi +
jl loc_102089E  +
push edi  +
lea eax [ebp-38h] +
push eax  +
lea ecx [ebp-1Ch] +
call sub_1007C5B  +
or dword ptr [ebp-14h] 1 +
push offset asc_1007D2C  +
push eax  +
mov byte ptr [ebp-4] 7 +
call sub_100422D  +
test al al +
jnz loc_1020898  +
push edi  +
lea eax [ebp-44h] +
push eax  +
lea ecx [ebp-1Ch] +
call sub_1007C5B  +
or [ebp-14h] edi +
push offset asc_1007D24  +
push eax  +
call sub_100422D  +
test al al +
jz loc_102089E  +
mov byte ptr [ebp-0Dh] 1 +
jmp loc_10208A1  +
mov [ebp-0Dh] bl +
test byte ptr [ebp-14h] 2 +
jz loc_10208B6  +
mov ecx [ebp-44h] +
and dword ptr [ebp-14h] 0FFFFFFFDh +
add ecx 0FFFFFFF0h +
call sub_1002990  +
test byte ptr [ebp-14h] 1 +
mov dword ptr [ebp-4] 6 +
jz loc_10208D2  +
mov ecx [ebp-38h] +
and dword ptr [ebp-14h] 0FFFFFFFEh +
add ecx 0FFFFFFF0h +
call sub_1002990  +
cmp [ebp-0Dh] bl +
jz loc_10208E9  +
mov eax [ebp-1Ch] +
mov eax [eax-0Ch] +
push 1  +
dec eax  +
push eax  +
lea ecx [ebp-1Ch] +
call sub_1007DDC  +
lea eax [ebp-1Ch] +
push eax  +
lea ecx [ebp-94h] +
call sub_1007A16  +
xor eax eax +
inc eax  +
push eax  +
push eax  +
push eax  +
push eax  +
push ebx  +
push eax  +
lea eax [ebp-1Ch] +
push eax  +
lea ecx [ebp-0BCh] +
mov byte ptr [ebp-4] 8 +
call sub_10165E1  +
lea eax [ebp-0BCh] +
push eax  +
lea eax [ebp-94h] +
push eax  +
lea eax [ebp-0DCh] +
push eax  +
mov ecx esi +
mov byte ptr [ebp-4] 9 +
call sub_103BA6C  +
mov ecx [esi+3Ch] +
lea eax [ebp-94h] +
push eax  +
call sub_10193F1  +
cmp eax ebx +
jz loc_102094C  +
cmp [eax+18h] ebx +
jz loc_1020962  +
mov ecx [esi+3Ch] +
lea eax [ebp-0BCh] +
push eax  +
lea eax [ebp-94h] +
push eax  +
call sub_10056A3  +
lea ecx [ebp-0BCh] +
call sub_1004292  +
lea ecx [ebp-94h] +
call sub_1003B4C  +
mov ecx [ebp-1Ch] +
add ecx 0FFFFFFF0h +
mov byte ptr [ebp-4] 5 +
call sub_1002990  +
inc dword ptr [ebp-34h]  +
mov eax [ebp-34h] +
cmp eax [ebp-2Ch] +
jb loc_1020825  +
lea ecx [ebp-30h] +
mov byte ptr [ebp-4] 4 +
call sub_1004450  +
inc dword ptr [ebp-18h]  +
mov eax [ebp-18h] +
cmp eax [ebp-50h] +
jnb loc_1017E31  +
jmp loc_10207E7  +
lea ecx [ebp-30h] +
mov byte ptr [ebp-4] 4 +
call sub_1004450  +
jmp loc_1017E31  +
mov [ebp-30h] ebx +
mov [ebp-2Ch] ebx +
mov [ebp-28h] ebx +
mov [ebp-24h] ebx +
lea eax [ebp-30h] +
push eax  +
push dword ptr [ebp-18h]  +
lea ecx [ebp-64h] +
mov byte ptr [ebp-4] 0Ah +
call sub_10068B5  +
push eax  +
mov ecx esi +
call sub_103B067  +
cmp eax ebx +
mov [ebp-20h] eax +
jl loc_1020ACD  +
xor edi edi +
cmp [ebp-2Ch] ebx +
jbe loc_1020AAD  +
push edi  +
lea ecx [ebp-30h] +
call sub_10068B5  +
push eax  +
lea ecx [ebp-94h] +
call sub_1007A16  +
xor eax eax +
inc eax  +
push eax  +
push eax  +
push eax  +
push eax  +
push ebx  +
push ebx  +
push edi  +
lea ecx [ebp-30h] +
mov byte ptr [ebp-4] 0Bh +
call sub_10068B5  +
push eax  +
lea ecx [ebp-0BCh] +
call sub_10165E1  +
lea eax [ebp-0BCh] +
push eax  +
lea eax [ebp-94h] +
push eax  +
lea eax [ebp-0DCh] +
push eax  +
mov ecx esi +
mov byte ptr [ebp-4] 0Ch +
call sub_103BA6C  +
mov ecx [esi+3Ch] +
lea eax [ebp-94h] +
push eax  +
call sub_10193F1  +
cmp eax ebx +
jz loc_1020A73  +
cmp [eax+18h] ebx +
jz loc_1020A89  +
mov ecx [esi+3Ch] +
lea eax [ebp-0BCh] +
push eax  +
lea eax [ebp-94h] +
push eax  +
call sub_10056A3  +
lea ecx [ebp-0BCh] +
call sub_1004292  +
lea ecx [ebp-94h] +
mov byte ptr [ebp-4] 0Ah +
call sub_1003B4C  +
inc edi  +
cmp edi [ebp-2Ch] +
jb loc_1020A04  +
lea ecx [ebp-30h] +
mov byte ptr [ebp-4] 4 +
call sub_1004450  +
inc dword ptr [ebp-18h]  +
mov eax [ebp-18h] +
cmp eax [ebp-60h] +
jnb loc_1017E3D  +
jmp loc_10209C7  +
lea ecx [ebp-30h] +
mov byte ptr [ebp-4] 4 +
call sub_1004450  +
jmp loc_1017E3D  +
push dword ptr [ebp-18h]  +
lea ecx [ebp-74h] +
call sub_10068B5  +
push eax  +
lea ecx [ebp-1Ch] +
call sub_1003F3F  +
push 2  +
lea eax [ebp-44h] +
push eax  +
lea ecx [ebp-1Ch] +
mov byte ptr [ebp-4] 0Dh +
call sub_1007C5B  +
or dword ptr [ebp-14h] 4 +
push offset asc_1007D24  +
push eax  +
mov byte ptr [ebp-4] 0Eh +
call sub_100422D  +
test al al +
jnz loc_1020B3F  +
push 2  +
lea eax [ebp-38h] +
push eax  +
lea ecx [ebp-1Ch] +
call sub_1007C5B  +
or dword ptr [ebp-14h] 8 +
push offset asc_1007D2C  +
push eax  +
call sub_100422D  +
mov [ebp-0Dh] bl +
test al al +
jz loc_1020B43  +
mov byte ptr [ebp-0Dh] 1 +
test byte ptr [ebp-14h] 8 +
jz loc_1020B58  +
mov ecx [ebp-38h] +
and dword ptr [ebp-14h] 0FFFFFFF7h +
add ecx 0FFFFFFF0h +
call sub_1002990  +
test byte ptr [ebp-14h] 4 +
mov dword ptr [ebp-4] 0Dh +
jz loc_1020B74  +
mov ecx [ebp-44h] +
and dword ptr [ebp-14h] 0FFFFFFFBh +
add ecx 0FFFFFFF0h +
call sub_1002990  +
cmp [ebp-0Dh] bl +
jz loc_1020B8B  +
mov eax [ebp-1Ch] +
mov eax [eax-0Ch] +
push 1  +
dec eax  +
push eax  +
lea ecx [ebp-1Ch] +
call sub_1007DDC  +
mov [ebp-30h] ebx +
mov [ebp-2Ch] ebx +
mov [ebp-28h] ebx +
mov [ebp-24h] ebx +
lea eax [ebp-30h] +
push eax  +
lea eax [ebp-1Ch] +
push eax  +
mov ecx esi +
mov byte ptr [ebp-4] 0Fh +
call sub_103B067  +
cmp eax ebx +
mov [ebp-20h] eax +
jl loc_1020C9A  +
xor edi edi +
cmp [ebp-2Ch] ebx +
jbe loc_1020C6F  +
push edi  +
lea ecx [ebp-30h] +
call sub_10068B5  +
push eax  +
lea ecx [ebp-94h] +
call sub_1007A16  +
push 1  +
push 1  +
push ebx  +
push 1  +
push ebx  +
push ebx  +
push edi  +
lea ecx [ebp-30h] +
mov byte ptr [ebp-4] 10h +
call sub_10068B5  +
push eax  +
lea ecx [ebp-0BCh] +
call sub_10165E1  +
lea eax [ebp-0BCh] +
push eax  +
lea eax [ebp-94h] +
push eax  +
lea eax [ebp-0DCh] +
push eax  +
mov ecx esi +
mov byte ptr [ebp-4] 11h +
call sub_103BA6C  +
mov ecx [esi+3Ch] +
lea eax [ebp-94h] +
push eax  +
call sub_103B0BF  +
mov ecx [esi+3Ch] +
lea eax [ebp-94h] +
push eax  +
call sub_103B16D  +
mov ecx [esi+3Ch] +
lea eax [ebp-0BCh] +
push eax  +
lea eax [ebp-94h] +
push eax  +
call sub_10056A3  +
lea ecx [ebp-0BCh] +
call sub_1004292  +
lea ecx [ebp-94h] +
mov byte ptr [ebp-4] 0Fh +
call sub_1003B4C  +
inc edi  +
cmp edi [ebp-2Ch] +
jb loc_1020BC0  +
lea ecx [ebp-30h] +
call sub_1004450  +
mov ecx [ebp-1Ch] +
add ecx 0FFFFFFF0h +
mov byte ptr [ebp-4] 4 +
call sub_1002990  +
inc dword ptr [ebp-18h]  +
mov eax [ebp-18h] +
cmp eax [ebp-70h] +
jnb loc_1017E49  +
jmp loc_1020ADE  +
lea ecx [ebp-30h] +
call sub_1004450  +
mov ecx [ebp-1Ch] +
add ecx 0FFFFFFF0h +
mov byte ptr [ebp-4] 4 +
call sub_1002990  +
jmp loc_1017E49  +
mov byte ptr [esi+5Ah] 1 +
jmp loc_1017E55  +
add esi 28h +
mov [ebp-38h] esi +
push edi  +
lea ecx [ebp-0DCh] +
mov esi edi +
call sub_1007AB2  +
push dword ptr [esi+14h]  +
mov ecx [ebp-38h] +
mov edi eax +
call sub_1015DF5  +
cmp edi ebx +
jz loc_1017E70  +
jmp loc_1020CC5  +
***
cmp eax 2 +
jz loc_1020CFF  +
cmp eax ebx +
jle loc_1020CFD  +
and eax 0FFFFh +
or eax 80070000h +
mov ebx eax +
lea ecx [ebp-224h] +
call sub_1004887  +
mov eax ebx +
jmp loc_10060E6  +
jle loc_1020D1D  +
and eax 0FFFFh +
or eax 80070000h +
mov edi eax +
jmp loc_10060EE  +
jle loc_1020D30  +
and eax 0FFFFh +
or eax 80070000h +
mov edi eax +
jmp loc_1020D4A  +
lea ecx [ebp-254h] +
call sub_1003B4C  +
lea ecx [ebp-27Ch] +
call sub_1004292  +
lea ecx [ebp-230h] +
call sub_1004887  +
jmp loc_10060EE  +
mov edi 80004005h +
jmp loc_10060D9  +
***
mov eax dword_104A3A0 +
mov ebx dword_104A3A4 +
mov ecx eax +
and ecx edx +
mov edx ebx +
and edx edi +
cmp ecx eax +
jnz loc_1004C15  +
cmp edx ebx +
jnz loc_1004C15  +
push offset nullsub_2  +
push dword_104A134  +
push dword_104A130  +
call sub_100A01E  +
jmp loc_1004C15  +
***
mov eax [ebp-1Ch] +
mov eax [eax] +
mov [ebp-18h] eax +
mov eax offset loc_101880C +
retn   +
***
mov eax [ebp-24h] +
mov eax [eax] +
mov [ebp-18h] eax +
mov eax offset loc_10193CC +
retn   +
***
mov eax [ebp-18h] +
mov eax [eax] +
mov [ebp-14h] eax +
mov eax offset loc_1021006 +
retn   +
mov edi 20000h +
mov esi 80000000h +
jmp loc_10191A4  +
***
mov eax dword_104A3A0 +
mov ecx eax +
and ecx edi +
mov edi dword_104A3A4 +
mov edx edi +
and edx esi +
cmp ecx eax +
jnz loc_10191CD  +
cmp edx edi +
jnz loc_10191CD  +
push dword ptr [ebp-14h]  +
push offset dword_1021068  +
push dword_104A134  +
push dword_104A130  +
call sub_10379EB  +
jmp loc_10191CD  +
***
and dword ptr [ebp-4] 0 +
mov eax offset loc_10210AF +
retn   +
mov esi [ebp-0C4h] +
xor ebx ebx +
jmp loc_10161C6  +
***
mov eax [ebp-0E8h] +
mov eax [eax] +
mov [ebp-0ACh] eax +
mov dword ptr [ebp-4] 8 +
mov eax offset loc_102118D +
retn   +
mov esi [ebp-0C4h] +
xor ebx ebx +
jmp loc_1016589  +
***
cmp dword ptr [ebp-0ACh] 0 +
mov eax [ebp-0ECh] +
mov ecx [eax] +
jl loc_10211F3  +
push 32h  +
pop eax  +
lea edx [ebp-0A8h] +
push edx  +
push ecx  +
mov ecx [ebp-0C4h] +
push eax  +
mov [ebp-0BCh] eax +
call sub_1039D64  +
mov dword ptr [ebp-4] 8 +
mov eax offset loc_1021200 +
retn   +
mov esi [ebp-0C4h] +
xor ebx ebx +
jmp loc_1017303  +
***
lea eax [ebp-0A8h] +
push eax  +
push dword ptr [ebp-0ACh]  +
mov ecx esi +
push dword ptr [ebp-0BCh]  +
call sub_1039D64  +
jmp loc_1017336  +
***
mov eax [ebp-18h] +
mov eax [eax] +
mov [ebp+8] eax +
mov eax offset loc_10049DA +
retn   +
***
mov edx dword_104A3A0 +
mov ebx dword_104A3A4 +
mov eax edx +
mov ecx ebx +
and eax edi +
and ecx esi +
cmp eax edx +
jnz loc_1016027  +
cmp ecx ebx +
jnz loc_1016027  +
push offset dword_1021340  +
push dword_104A134  +
push dword_104A130  +
call sub_100A01E  +
jmp loc_1016027  +
cmp dword_104A3AC 0 +
jz loc_1016088  +
mov al byte_104A3B0 +
cmp al 4 +
jnb loc_10212AA  +
test al al +
jnz loc_1016088  +
mov eax dword_104A398 +
mov ecx dword_104A39C +
and eax edi +
and ecx esi +
or eax ecx +
jz loc_1016088  +
mov edx dword_104A3A0 +
mov eax edx +
and eax edi +
mov edi dword_104A3A4 +
mov ecx edi +
and ecx esi +
cmp eax edx +
jnz loc_1016088  +
cmp ecx edi +
jnz loc_1016088  +
push ebx  +
push offset dword_1021350  +
push dword_104A134  +
push dword_104A130  +
call sub_10379EB  +
jmp loc_1016088  +
mov eax dword_104A3A0 +
mov ecx eax +
and ecx edi +
mov edi dword_104A3A4 +
mov edx edi +
and edx esi +
cmp ecx eax +
jnz loc_1016079  +
cmp edx edi +
jnz loc_1016079  +
push ebx  +
push offset dword_1021350  +
push dword_104A134  +
push dword_104A130  +
call sub_10379EB  +
jmp loc_1016079  +
***
mov eax 8007000Eh +
jmp loc_1015785  +
cmp edx 3 +
jz loc_101573D  +
push edi  +
call off_104B7F0  +
mov eax 80070057h +
jmp loc_1015785  +
***
and eax 0FFFFh +
or eax 80070000h +
jmp loc_1017BA3  +
***
mov eax offset loc_10213A3 +
retn   +
mov esi [ebp+8] +
xor edi edi +
mov eax edi +
jmp loc_101494B  +
***
push 80070057h  +
lea ecx [ebp-30h] +
call sub_1026AE1  +
mov esi eax +
lea edi [ebp-20h] +
movs   +
movs   +
movs   +
push offset dword_10458FC  +
lea eax [ebp-20h] +
push eax  +
movs   +
call _CxxThrowException  +
***
mov eax [esi] +
push [ebp+arg_0]  +
lea ecx [eax+ebx*8] +
push ecx  +
add eax edi +
push eax  +
call sub_1003C89  +
jmp loc_10054FF  +
push 80070057h  +
call loc_1025B15  +
int 3  +
mov ecx [ebp+arg_0] +
push offset word_100348C  +
call sub_1003269  +
jmp loc_10132ED  +
***
push ecx  +
mov ecx ebx +
call sub_10149CF  +
jmp loc_10132E2  +
***
push 8007000Eh  +
call loc_1025B15  +
int 3  +
***
mov eax 80004003h +
jmp loc_100441B  +
***
push eax  +
lea eax [ebp-1D8h] +
push eax  +
mov ecx edi +
call sub_101371C  +
mov ebx [ebp-1E0h] +
push dword ptr [esi+14h]  +
mov ecx ebx +
call sub_1003E3B  +
push dword ptr [ebp-1D8h]  +
jmp loc_101483F  +
push 2  +
lea ecx [ebp-1ECh] +
call sub_1004172  +
push eax  +
lea ecx [ebp-1ECh] +
call sub_103310E  +
jmp loc_101488E  +
***
inc eax  +
jmp loc_1007D62  +
cmp [esi+18h] edx +
jz loc_10153D9  +
lea ecx [esi+14h] +
mov eax [ecx] +
mov ebx [eax-0Ch] +
push edx  +
push 2Ah  +
call sub_1012F38  +
dec ebx  +
cmp eax ebx +
jnz loc_10214BB  +
cmp dword ptr [esi+1Ch] 0 +
mov eax [esi+4] +
jz loc_102149E  +
inc eax  +
dec eax  +
test eax eax +
jle loc_10214BB  +
cmp eax [edi+4] +
jb loc_10214BB  +
push esi  +
push edi  +
call sub_1012DB9  +
test eax eax +
jz loc_10214BB  +
xor eax eax +
inc eax  +
jmp loc_1007D6C  +
push esi  +
push edi  +
jmp loc_10153F4  +
mov eax [edi+4] +
xor ebx ebx +
cmp [edi+1Ch] ebx +
jz loc_10214CD  +
inc eax  +
dec eax  +
cmp eax ebx +
mov [ebp-14h] eax +
jle loc_10153F2  +
cmp eax [esi+4] +
ja loc_10153F2  +
test eax eax +
jbe loc_1021556  +
push ebx  +
mov ecx edi +
call sub_10036F0  +
push dword ptr [eax]  +
lea ecx [ebp-10h] +
call sub_10035A2  +
and dword ptr [ebp-4] 0 +
push ebx  +
mov ecx esi +
call sub_10036F0  +
push dword ptr [eax]  +
lea ecx [ebp+8] +
call sub_10035A2  +
push dword ptr [ebp+8]  +
push dword ptr [ebp-10h]  +
call ds:__imp__wcsicmp  +
pop ecx  +
pop ecx  +
mov ecx [ebp+8] +
add ecx 0FFFFFFF0h +
test eax eax +
jnz loc_1021542  +
call sub_1002990  +
mov ecx [ebp-10h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
add ecx 0FFFFFFF0h +
call sub_1002990  +
inc ebx  +
cmp ebx [ebp-14h] +
jnb loc_1021556  +
jmp loc_10214E6  +
call sub_1002990  +
mov ecx [ebp-10h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
add ecx 0FFFFFFF0h +
call sub_1002990  +
cmp ebx [ebp-14h] +
jnz loc_10153F2  +
jmp loc_10214B3  +
***
mov eax [ebp-28h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov [ebp+0Ch] eax +
mov eax offset loc_102159D +
retn   +
mov edi [ebp+0Ch] +
jmp loc_100594A  +
***
mov esi 80004002h +
jmp loc_10092EE  +
***
mov esi 80004002h +
jmp loc_100923B  +
***
call sub_100F56E  +
jmp loc_1016D46  +
***
mov eax [ecx] +
mov eax [eax-0Ch] +
dec eax  +
push eax  +
lea eax [ebp+8] +
push eax  +
call sub_10079D6  +
mov ecx [ebp+0Ch] +
mov eax [ecx] +
mov eax [eax-0Ch] +
dec eax  +
push eax  +
lea eax [ebp+0Ch] +
push eax  +
mov dword ptr [ebp-4] 3 +
call sub_10079D6  +
mov edi [ebp+0Ch] +
mov ebx [ebp+8] +
push edi  +
push ebx  +
call ds:__imp__wcsicmp  +
mov esi eax +
pop ecx  +
neg esi  +
pop ecx  +
sbb esi esi +
lea ecx [edi-10h] +
inc esi  +
call sub_1002990  +
lea ecx [ebx-10h] +
call sub_1002990  +
mov eax esi +
jmp loc_1019AF3  +
***
mov eax [ebp-10h] +
mov ecx [eax] +
lea edx [ebp+8] +
push edx  +
push dword ptr [ebp+10h]  +
push eax  +
call dword ptr [ecx+20h]  +
mov esi eax +
jmp loc_1016AC3  +
***
push 1  +
lea eax [ebp-1Ch] +
push eax  +
lea ecx [ebp-18h] +
call sub_1007C5B  +
mov esi offset dword_1003488 +
push esi  +
push eax  +
call sub_100422D  +
mov ecx [ebp-1Ch] +
add ecx 0FFFFFFF0h +
mov [ebp-0Dh] al +
call sub_1002990  +
cmp byte ptr [ebp-0Dh] 0 +
jz loc_10216B6  +
mov eax [ebx-0Ch] +
dec eax  +
push eax  +
lea eax [ebp-24h] +
push eax  +
lea ecx [ebp-18h] +
call sub_10079D6  +
push eax  +
lea ecx [ebp-18h] +
mov byte ptr [ebp-4] 4 +
call sub_1003FBC  +
mov ecx [ebp-24h] +
add ecx 0FFFFFFF0h +
mov byte ptr [ebp-4] 3 +
call sub_1002990  +
push 1  +
lea eax [ebp-1Ch] +
push eax  +
lea ecx [ebp-18h] +
call sub_1007C5B  +
push esi  +
push eax  +
call sub_100422D  +
mov ecx [ebp-1Ch] +
add ecx 0FFFFFFF0h +
mov bl al +
call sub_1002990  +
test bl bl +
mov ebx [ebp-18h] +
jnz loc_1021660  +
and dword ptr [ebp-20h] 0 +
lea eax [ebp-20h] +
push eax  +
push 0  +
push ebx  +
call WNetGetConnectionW  +
cmp eax 0EAh +
jz loc_10216E1  +
lea ecx [ebx-10h] +
call sub_1002990  +
jmp loc_10087DE  +
xor al al +
jmp loc_100846C  +
push offset dword_104A104  +
lea ecx [ebp-1Ch] +
call sub_1003060  +
mov eax [ebp-20h] +
inc eax  +
push eax  +
lea ecx [ebp-1Ch] +
mov byte ptr [ebp-4] 5 +
call sub_1003122  +
lea ecx [ebp-20h] +
push ecx  +
push eax  +
push ebx  +
call WNetGetConnectionW  +
test eax eax +
jz loc_1021722  +
mov byte ptr [ebp+0Bh] 0 +
mov ecx [ebp-1Ch] +
add ecx 0FFFFFFF0h +
call sub_1002990  +
jmp loc_1008459  +
push 0FFFFFFFFh  +
lea ecx [ebp-1Ch] +
call sub_10084A5  +
push edi  +
call ds:PathSkipRootW  +
sub eax edi +
sar eax 1 +
push eax  +
lea eax [ebp-24h] +
push eax  +
lea ecx [ebp-14h] +
call sub_103A592  +
push dword ptr [eax]  +
lea ecx [ebp-1Ch] +
mov byte ptr [ebp-4] 6 +
call sub_103CE2B  +
mov ecx [ebp-24h] +
add ecx 0FFFFFFF0h +
mov byte ptr [ebp-4] 5 +
call sub_1002990  +
mov ecx [ebp+8] +
lea eax [ebp-1Ch] +
push eax  +
call sub_1003FBC  +
mov byte ptr [ebp+0Bh] 1 +
jmp loc_1021712  +
***
mov eax 80004003h +
jmp loc_101468A  +
push 2  +
lea ecx [ebp+var_C] +
call sub_103310E  +
push 0  +
lea ecx [ebp+var_C] +
call sub_1004172  +
cmp eax 0FFFFFFFFh +
jz loc_10155DC  +
push eax  +
lea ecx [ebp+var_C] +
call sub_103310E  +
jmp loc_101464F  +
***
xor eax eax +
retn   +
***
xor al al +
jmp loc_1017C02  +
***
mov edi [edi+0Ch] +
push esi  +
push edi  +
push dword ptr [ebp-0Ch]  +
lea ecx [ebp-18h] +
mov [ebp-18h] ebx +
mov [ebp-14h] ebx +
mov [ebp-10h] ebx +
call sub_100484B  +
lea ecx [ebp-18h] +
test eax eax +
jnz loc_10217DE  +
call sub_1004887  +
mov bl 1 +
jmp loc_1017BF7  +
***
call sub_1004887  +
jmp loc_1017BF7  +
***
xor al al +
jmp loc_1017C56  +
***
mov edi [edi+0Ch] +
push esi  +
push edi  +
push dword ptr [ebp-0Ch]  +
lea ecx [ebp-18h] +
mov [ebp-18h] ebx +
mov [ebp-14h] ebx +
mov [ebp-10h] ebx +
call sub_100484B  +
mov ebx eax +
neg ebx  +
sbb bl bl +
lea ecx [ebp-18h] +
inc bl  +
call sub_1004887  +
jmp loc_1017C4B  +
***
push edi  +
lea ecx [esi+14h] +
call sub_10068B5  +
push dword ptr [eax]  +
mov ecx [ebp-28h] +
call sub_1015DF5  +
inc edi  +
cmp edi [esi+18h] +
jnb loc_10181BD  +
jmp loc_102181D  +
***
mov dword ptr [ebp-24h] offset unk_104BB74 +
jmp loc_10181DB  +
***
mov [ebp-34h] ebx +
mov [ebp-30h] ebx +
mov [ebp-2Ch] ebx +
mov eax [esi+0Ch] +
push edi  +
push eax  +
push dword ptr [ebp-40h]  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 1 +
call sub_100484B  +
cmp eax ebx +
jz loc_1021876  +
lea ecx [ebp-34h] +
call sub_1004887  +
jmp loc_101820D  +
***
mov esi 104h +
mov edi offset dword_104A104 +
push edi  +
lea ecx [ebp-14h] +
mov [ebp-24h] ebx +
mov [ebp-18h] esi +
mov [ebp-1Ch] esi +
call sub_1003060  +
push edi  +
lea ecx [ebp-10h] +
mov byte ptr [ebp-4] 2 +
call sub_1003060  +
push esi  +
lea ecx [ebp-10h] +
mov byte ptr [ebp-4] 3 +
call sub_1003122  +
push dword ptr [ebp-18h]  +
lea ecx [ebp-14h] +
mov [ebp-20h] eax +
call sub_1003122  +
lea ecx [ebp-1Ch] +
push ecx  +
push dword ptr [ebp-20h]  +
lea ecx [ebp-18h] +
push ebx  +
push ebx  +
push ecx  +
push eax  +
push ebx  +
mov ebx ds:RegEnumValueW +
jmp loc_102195A  +
push 0FFFFFFFFh  +
lea ecx [ebp-14h] +
call sub_10084A5  +
push 0FFFFFFFFh  +
lea ecx [ebp-10h] +
call sub_10084A5  +
push dword ptr [ebp-10h]  +
mov ecx [ebp-28h] +
call sub_1015DF5  +
mov ecx [ebp-10h] +
add ecx 0FFFFFFF0h +
call sub_1002990  +
mov ecx [ebp-14h] +
add ecx 0FFFFFFF0h +
mov byte ptr [ebp-4] 1 +
call sub_1002990  +
inc dword ptr [ebp-24h]  +
push edi  +
lea ecx [ebp-14h] +
mov [ebp-18h] esi +
mov [ebp-1Ch] esi +
call sub_1003060  +
push edi  +
lea ecx [ebp-10h] +
mov byte ptr [ebp-4] 2 +
call sub_1003060  +
push esi  +
lea ecx [ebp-10h] +
mov byte ptr [ebp-4] 3 +
call sub_1003122  +
push dword ptr [ebp-18h]  +
lea ecx [ebp-14h] +
mov [ebp-20h] eax +
call sub_1003122  +
lea ecx [ebp-1Ch] +
push ecx  +
push dword ptr [ebp-20h]  +
lea ecx [ebp-18h] +
push 0  +
push 0  +
push ecx  +
push eax  +
push dword ptr [ebp-24h]  +
push dword ptr [ebp-34h]  +
call ebx  +
test eax eax +
jz loc_10218D4  +
mov ecx [ebp-10h] +
add ecx 0FFFFFFF0h +
call sub_1002990  +
mov ecx [ebp-14h] +
add ecx 0FFFFFFF0h +
call sub_1002990  +
lea ecx [ebp-34h] +
call sub_1004887  +
lea ecx [ebp-40h] +
call sub_1004887  +
jmp loc_10181C5  +
***
cmp [ebp+Type] 4 +
jnz loc_1011622  +
cmp dword ptr [ebp+Data] 1 +
jnz loc_1011622  +
inc esi  +
jmp loc_1011622  +
***
push 8007000Eh  +
push 41h  +
push offset aDW7rtmEnduse_2  +
lea ecx [ebp+var_24] +
call sub_102F44D  +
mov esi eax +
lea edi [ebp+var_14] +
movs   +
movs   +
movs   +
push offset dword_10458FC  +
lea eax [ebp+var_14] +
push eax  +
movs   +
call _CxxThrowException  +
int 3  +
***
mov eax [ebp+arg_0] +
add eax 0Ah +
mov [ebp+var_18] eax +
mov eax [ebp+var_18] +
mov [ebp+var_1C] eax +
xor ecx ecx +
mov eax [ebp+var_1C] +
push 24h  +
pop edx  +
mul  edx +
seto cl  +
neg ecx  +
or ecx eax +
xor eax eax +
add ecx 4 +
setb al  +
neg eax  +
or eax ecx +
push eax  +
call sub_10085CE  +
pop ecx  +
mov [ebp+var_24] eax +
and [ebp+var_4] 0 +
cmp [ebp+var_24] 0 +
jz loc_1021A7A  +
mov eax [ebp+var_24] +
mov ecx [ebp+var_1C] +
mov [eax] ecx +
push offset loc_10145FC  +
push offset loc_1013476  +
push [ebp+var_1C]  +
push 24h  +
mov eax [ebp+var_24] +
add eax 4 +
push eax  +
call sub_1002AF6  +
mov eax [ebp+var_24] +
add eax 4 +
mov [ebp+var_3C] eax +
jmp loc_1021A7E  +
and [ebp+var_3C] 0 +
mov eax [ebp+var_3C] +
mov [ebp+var_20] eax +
or [ebp+var_4] 0FFFFFFFFh +
mov eax [ebp+var_20] +
mov [ebp+var_14] eax +
and [ebp+var_10] 0 +
jmp loc_1021A9B  +
mov eax [ebp+var_10] +
inc eax  +
mov [ebp+var_10] eax +
mov eax [ebp+var_38] +
mov ecx [ebp+var_10] +
cmp ecx [eax+1Ch] +
jnb loc_1021ACA  +
mov eax [ebp+var_10] +
imul eax eax +
mov ecx [ebp+var_38] +
add eax [ecx+20h] +
push eax  +
mov ecx [ebp+var_10] +
imul ecx ecx +
add ecx [ebp+var_14] +
call sub_103E9D7  +
jmp loc_1021A94  +
mov eax [ebp+var_10] +
inc eax  +
mov [ebp+var_10] eax +
mov eax [ebp+var_10] +
cmp eax [ebp+var_18] +
jnb loc_1021AF0  +
mov eax [ebp+var_10] +
imul eax eax +
add eax [ebp+var_14] +
mov [ebp+var_30] eax +
mov eax [ebp+var_10] +
inc eax  +
mov ecx [ebp+var_30] +
mov [ecx] eax +
mov eax [ebp+var_30] +
and dword ptr [eax+4] 0 +
jmp loc_1021AC3  +
mov eax [ebp+var_38] +
mov eax [eax+20h] +
mov [ebp+var_2C] eax +
mov eax [ebp+var_2C] +
mov [ebp+var_28] eax +
cmp [ebp+var_28] 0 +
jz loc_1021B14  +
push 3  +
mov ecx [ebp+var_28] +
call sub_10145BD  +
mov [ebp+var_40] eax +
jmp loc_1021B18  +
and [ebp+var_40] 0 +
mov eax [ebp+var_38] +
mov ecx [ebp+var_14] +
mov [eax+20h] ecx +
mov eax [ebp+var_38] +
mov ecx [ebp+var_18] +
mov [eax+1Ch] ecx +
jmp loc_1013B51  +
***
push 80070057h  +
lea ecx [ebp+var_20] +
call sub_1026AE1  +
mov esi eax +
lea edi [ebp+var_10] +
movs   +
movs   +
movs   +
movs   +
push offset dword_10458FC  +
lea eax [ebp+var_10] +
push eax  +
call _CxxThrowException  +
jmp loc_1013D83  +
***
mov eax [ebp+arg_4] +
mov eax [eax] +
mov [ebp+var_14] eax +
mov eax [ebp+arg_4] +
mov eax [eax] +
mov [ebp+var_10] eax +
jmp loc_1013968  +
mov eax [ebp+var_84] +
mov eax [eax+4] +
mov [ebp+var_C] eax +
mov eax [ebp+var_84] +
push dword ptr [eax+4]  +
push 1  +
push [ebp+var_14]  +
mov ecx [ebp+var_84] +
call sub_1013B18  +
mov ecx eax +
call sub_1013383  +
push [ebp+var_14]  +
mov ecx [ebp+var_84] +
call sub_1013B18  +
mov [ebp+var_68] eax +
mov eax [ebp+var_68] +
mov eax [eax] +
mov [ebp+var_10] eax +
mov eax [ebp+arg_0] +
mov [ebp+var_18] eax +
mov eax [ebp+var_84] +
mov eax [eax+4] +
inc eax  +
mov ecx [ebp+var_84] +
mov [ecx+4] eax +
mov eax [ebp+var_C] +
mov [ebp+var_14] eax +
jmp loc_1013A52  +
push 80070057h  +
lea ecx [ebp+var_38] +
call sub_1026AE1  +
mov esi eax +
lea edi [ebp+var_28] +
movs   +
movs   +
movs   +
movs   +
push offset dword_10458FC  +
lea eax [ebp+var_28] +
push eax  +
call _CxxThrowException  +
jmp loc_1013A52  +
mov eax [ebp+arg_8] +
push dword ptr [eax]  +
push 5  +
push [ebp+var_14]  +
mov ecx [ebp+var_84] +
call sub_1013B18  +
mov ecx eax +
call sub_1013383  +
jmp loc_1013AF1  +
mov eax [ebp+arg_0] +
inc eax  +
inc eax  +
mov ecx [ebp+arg_C] +
mov [ecx] eax +
jmp loc_1013AFB  +
push 80041602h  +
lea ecx [ebp+var_58] +
call sub_1026AE1  +
mov esi eax +
lea edi [ebp+var_48] +
movs   +
movs   +
movs   +
movs   +
push offset dword_10458FC  +
lea eax [ebp+var_48] +
push eax  +
call _CxxThrowException  +
jmp loc_1013B0D  +
***
mov [ebp+var_C] 0Ah +
mov eax [ebp+var_50] +
mov eax [eax+3Ch] +
mov [ebp+var_4] eax +
mov eax [ebp+var_50] +
mov eax [eax+40h] +
mov [ebp+var_8] eax +
mov eax [ebp+var_50] +
mov eax [eax+38h] +
mov [ebp+var_18] eax +
mov eax [ebp+var_50] +
mov eax [eax+38h] +
inc eax  +
mov ecx [ebp+var_50] +
mov ecx [ecx+0Ch] +
add ecx 7 +
imul eax ecx +
mov [ebp+var_14] eax +
mov eax [ebp+arg_0] +
xor edx edx +
push 0Ah  +
pop ecx  +
div  ecx +
inc eax  +
imul eax eax +
mov ecx [ebp+var_50] +
mov [ecx+38h] eax +
mov eax [ebp+var_50] +
mov eax [eax+38h] +
inc eax  +
mov ecx [ebp+var_50] +
mov ecx [ecx+0Ch] +
add ecx 7 +
imul eax ecx +
mov [ebp+var_10] eax +
xor ecx ecx +
mov eax [ebp+var_10] +
push 4  +
pop edx  +
mul  edx +
seto cl  +
neg ecx  +
or ecx eax +
push ecx  +
call sub_10085CE  +
pop ecx  +
mov [ebp+var_20] eax +
mov eax [ebp+var_50] +
mov ecx [ebp+var_20] +
mov [eax+3Ch] ecx +
mov eax [ebp+var_50] +
mov eax [eax+38h] +
inc eax  +
push eax  +
call sub_10085CE  +
pop ecx  +
mov [ebp+var_24] eax +
mov eax [ebp+var_50] +
mov ecx [ebp+var_24] +
mov [eax+40h] ecx +
mov eax [ebp+var_50] +
cmp dword ptr [eax+3Ch] 0 +
jz loc_1021D0A  +
mov eax [ebp+var_50] +
cmp dword ptr [eax+40h] 0 +
jnz loc_1021D2E  +
push 8007000Eh  +
lea ecx [ebp+var_44] +
call sub_1026AE1  +
mov esi eax +
lea edi [ebp+var_34] +
movs   +
movs   +
movs   +
movs   +
push offset dword_10458FC  +
lea eax [ebp+var_34] +
push eax  +
call _CxxThrowException  +
xor eax eax +
jnz loc_1021D2E  +
mov eax [ebp+var_14] +
shl eax 2 +
push eax  +
push [ebp+var_4]  +
mov eax [ebp+var_50] +
push dword ptr [eax+3Ch]  +
call memcpy  +
add esp 0Ch +
mov eax [ebp+var_18] +
inc eax  +
push eax  +
push [ebp+var_8]  +
mov eax [ebp+var_50] +
push dword ptr [eax+40h]  +
call memcpy  +
add esp 0Ch +
mov eax [ebp+var_10] +
sub eax [ebp+var_14] +
shl eax 2 +
push eax  +
push 0FFh  +
mov eax [ebp+var_50] +
mov eax [eax+3Ch] +
mov ecx [ebp+var_14] +
lea eax [eax+ecx*4] +
push eax  +
call memset  +
add esp 0Ch +
mov eax [ebp+var_50] +
mov eax [eax+38h] +
sub eax [ebp+var_18] +
push eax  +
push 0  +
mov eax [ebp+var_50] +
mov eax [eax+40h] +
mov ecx [ebp+var_18] +
lea eax [eax+ecx+1] +
push eax  +
call memset  +
add esp 0Ch +
mov eax [ebp+var_50] +
mov eax [eax+38h] +
sub eax 9 +
mov [ebp+var_1C] eax +
jmp loc_1021DBB  +
mov eax [ebp+var_1C] +
inc eax  +
mov [ebp+var_1C] eax +
mov eax [ebp+var_50] +
mov ecx [ebp+var_1C] +
cmp ecx [eax+38h] +
ja loc_1021DE2  +
mov eax [ebp+var_50] +
mov eax [eax+0Ch] +
add eax 7 +
imul eax [ebp+var_1C] +
mov ecx [ebp+var_50] +
mov ecx [ecx+3Ch] +
mov dword ptr [ecx+eax*4] 0FFFFFFFEh +
jmp loc_1021DB4  +
mov eax [ebp+var_4] +
mov [ebp+var_48] eax +
push [ebp+var_48]  +
call sub_10085E3  +
pop ecx  +
mov eax [ebp+var_8] +
mov [ebp+var_4C] eax +
push [ebp+var_4C]  +
call sub_10085E3  +
pop ecx  +
jmp loc_101427C  +
***
push 80041602h  +
lea ecx [ebp+var_34] +
call sub_1026AE1  +
mov esi eax +
lea edi [ebp+var_24] +
movs   +
movs   +
movs   +
movs   +
push offset dword_10458FC  +
lea eax [ebp+var_24] +
push eax  +
call _CxxThrowException  +
jmp loc_1013BD1  +
push 8007000Eh  +
lea ecx [ebp+var_60] +
call sub_1026AE1  +
mov esi eax +
lea edi [ebp+var_50] +
movs   +
movs   +
movs   +
movs   +
push offset dword_10458FC  +
lea eax [ebp+var_50] +
push eax  +
call _CxxThrowException  +
jmp loc_1013C97  +
***
push 8007000Eh  +
lea ecx [ebp+var_74] +
call sub_1026AE1  +
mov esi eax +
lea edi [ebp+var_64] +
movs   +
movs   +
movs   +
movs   +
push offset dword_10458FC  +
lea eax [ebp+var_64] +
push eax  +
call _CxxThrowException  +
jmp loc_10141B7  +
***
mov [ebp+var_F4] 1 +
jmp loc_1015063  +
push 80041607h  +
lea ecx [ebp+var_E8] +
call sub_1026AE1  +
mov esi eax +
lea edi [ebp+var_D8] +
movs   +
movs   +
movs   +
movs   +
push offset dword_10458FC  +
lea eax [ebp+var_D8] +
push eax  +
call _CxxThrowException  +
jmp loc_1015070  +
***
or eax 0FFFFFFFFh +
jmp loc_1014429  +
***
mov ax [ebp+SrcStr] +
jmp locret_1013349  +
***
xor eax eax +
jmp loc_1014E0A  +
***
push 1  +
mov ecx esi +
call sub_103310E  +
jmp locret_10147C5  +
***
push 8007000Eh  +
lea ecx [ebp-158h] +
call sub_1026AE1  +
mov esi eax +
lea edi [ebp-148h] +
movs   +
movs   +
movs   +
push offset dword_10458FC  +
lea eax [ebp-148h] +
push eax  +
movs   +
call _CxxThrowException  +
push ebx  +
push 3Fh  +
lea ecx [ebp-154h] +
call sub_101440C  +
jmp loc_1013FDD  +
***
mov eax offset loc_1021F57 +
retn   +
mov edi [ebp-2ECh] +
mov esi [ebp-2F0h] +
xor ebx ebx +
jmp loc_101521B  +
***
retn   +
***
lea eax [esi-0Bh] +
test eax eax +
jl loc_1013465  +
mov ecx [ecx+2Ch] +
lea ecx [ecx+eax*4] +
cmp [ecx] edi +
jz loc_1013423  +
dec eax  +
sub ecx 4 +
test eax eax +
jl loc_1013465  +
jmp loc_10220AB  +
***
push edi  +
mov edi [esi+30h] +
cmp [esi+34h] edi +
jb loc_1022105  +
mov ebx [esi+2Ch] +
push 4  +
lea eax [edi+0Ah] +
xor ecx ecx +
pop edx  +
mov [esi+30h] eax +
mul  edx +
seto cl  +
neg ecx  +
or eax ecx +
push eax  +
call off_104B7F4  +
mov ecx edi +
shl ecx 2 +
push ecx  +
push ebx  +
push eax  +
mov [esi+2Ch] eax +
call memcpy  +
add esp 0Ch +
push ebx  +
call off_104B7F0  +
mov ebx [ebp+arg_0] +
mov eax [esi+34h] +
mov ecx [esi+2Ch] +
mov [ecx+eax*4] ebx +
inc dword ptr [esi+34h]  +
pop edi  +
jmp loc_1013552  +
***
lea ecx [eax-3] +
test ecx ecx +
jl loc_102213C  +
mov edx [esi+18h] +
lea edx [edx+ecx*8] +
cmp [edx] ebx +
jnz loc_1022134  +
mov edi [ebp+arg_4] +
cmp [edx+4] edi +
jz loc_10133C7  +
dec ecx  +
sub edx 8 +
test ecx ecx +
jge loc_1022124  +
cmp eax 2 +
jmp loc_10133B3  +
mov eax [esi+18h] +
mov [eax+ecx*8-8] ebx +
mov [eax+ecx*8-4] edx +
jmp loc_10133C4  +
***
cmp [ebp+arg_4] 5 +
jnz loc_1015595  +
jmp loc_10154F8  +
***
mov eax [ebp+arg_8] +
or dword ptr [eax] 0FFFFFFFFh +
mov eax 80070216h +
jmp loc_1008641  +
***
mov eax [ebp+arg_8] +
or dword ptr [eax] 0FFFFFFFFh +
mov eax 80070216h +
jmp loc_10143F5  +
***
lea ecx [eax+1] +
cmp ecx dword ptr [ebp+SrcStr] +
jnb loc_10135C0  +
mov eax ecx +
jmp loc_10135C0  +
***
push 8007000Eh  +
push 31h  +
push offset aDW7rtmEnduse_3  +
lea ecx [ebp+var_20] +
call sub_102F44D  +
mov esi eax +
lea edi [ebp+var_10] +
movs   +
movs   +
movs   +
push offset dword_10458FC  +
lea eax [ebp+var_10] +
push eax  +
movs   +
call _CxxThrowException  +
nop   +
nop   +
nop   +
***
push 0C000009Ah  +
lea ecx [ebp+var_24] +
call sub_1026AE1  +
mov esi eax +
lea edi [ebp+var_14] +
movs   +
movs   +
movs   +
push offset dword_10458FC  +
lea eax [ebp+var_14] +
push eax  +
movs   +
call _CxxThrowException  +
push esp  +
add [ecx+0] bh +
jo $+2  +
add gs:[eax+eax+69h] cl +
add [edx+0] ah +
***
retf 0  +
***
retn   +
***
retn 0  +
***
retf   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov [ebp+8] eax +
push offset dword_1025B30  +
lea eax [ebp+8] +
push eax  +
call _CxxThrowException  +
int 3  +
nop   +
push dword ptr [ecx]  +
call ds:SysFreeString  +
retn   +
***
call ds:__imp_GetLastError  +
test eax eax +
jle loc_1025B69  +
and eax 0FFFFh +
or eax 80070000h +
test eax eax +
jl locret_1025B70  +
mov eax 80004005h +
retn   +
***
call ds:SetErrorMode  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
test [ebp+arg_0] 2 +
push esi  +
mov esi ecx +
jz loc_1025BC0  +
push edi  +
push offset loc_1025B45  +
lea edi [esi-4] +
push dword ptr [edi]  +
push 0Ch  +
push esi  +
call sub_1008074  +
test [ebp+arg_0] 1 +
jz loc_1025BBB  +
push edi  +
call off_104B7F0  +
mov eax edi +
pop edi  +
jmp loc_1025BD7  +
push dword ptr [esi]  +
call ds:SysFreeString  +
test [ebp+arg_0] 1 +
jz loc_1025BD5  +
push esi  +
call off_104B7F0  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
xor ebx ebx +
mov esi ecx +
xor edi edi +
jmp loc_1025C14  +
cmp [ebp+arg_0] 0 +
jz loc_1025C1B  +
test byte ptr [ebp+arg_0] 1 +
jz loc_1025C10  +
mov ecx [eax] +
lea edx [edi+41h] +
push edx  +
push eax  +
call dword ptr [ecx+0ACh]  +
test ebx ebx +
jl loc_1025C10  +
mov ebx eax +
shr [ebp+arg_0] 1 +
inc edi  +
mov eax [esi+8] +
test eax eax +
jnz loc_1025BF1  +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
test edx edx +
jz loc_1025C44  +
mov eax [ebp+arg_4] +
mov ecx [eax] +
mov [edx] ecx +
and dword ptr [eax] 0 +
mov eax [eax+4] +
jmp loc_1025C49  +
call sub_1011E75  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
push 0FFFFFFFFh  +
mov dword ptr [esi] offset off_100AB2C +
call sub_100B511  +
test byte ptr [ebp+8] 1 +
jz loc_1025C87  +
push esi  +
call off_104B7F0  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
push 0  +
mov dword ptr [esi] offset off_100AB30 +
call sub_100B0B5  +
test byte ptr [ebp+8] 1 +
jz loc_1025CB5  +
push esi  +
call off_104B7F0  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi ecx +
mov ecx [ebp+arg_0] +
call sub_100AE29  +
mov esi eax +
test esi esi +
jl loc_1025CF0  +
mov ecx [ebp+arg_0] +
call sub_100B57D  +
test al al +
jz loc_1025CF0  +
push [ebp+arg_4]  +
mov ecx edi +
call sub_100B22B  +
mov esi eax +
pop edi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push ebx  +
push esi  +
mov esi [ebp+arg_4] +
xor ebx ebx +
cmp dword ptr [esi+4] 6 +
push edi  +
mov [ebp+var_4] ecx +
mov [ebp+var_8] ebx +
jnz loc_1025D4D  +
mov edi [esi+10h] +
cmp edi 0FFFFFFFFh +
jz loc_1025D4D  +
cmp edi ebx +
jz loc_1025D4D  +
add ecx 0Ch +
mov [ebp+var_14] ecx +
mov [ebp+var_10] ebx +
mov [ebp+var_C] ebx +
jmp loc_1025D37  +
cmp [ebx] edi +
jz loc_1025D47  +
lea ecx [ebp+var_14] +
call sub_100B1E1  +
mov ebx eax +
test ebx ebx +
jz loc_1025D4D  +
jmp loc_1025D33  +
mov eax [ebx+4] +
mov [ebp+var_8] eax +
mov eax [ebp+arg_0] +
sub eax 8000h +
jz loc_1025E83  +
dec eax  +
jz loc_1025E70  +
dec eax  +
jz loc_1025E5F  +
dec eax  +
dec eax  +
jz loc_1025E83  +
dec eax  +
dec eax  +
jnz loc_1025EA2  +
test ebx ebx +
jz loc_1025EA2  +
lea eax [esi+14h] +
push 4  +
pop ecx  +
mov edi offset dword_1025EAC +
mov esi eax +
xor edx edx +
cmps   +
jnz loc_1025DA0  +
mov ecx ebx +
call sub_100AE29  +
jmp loc_1025EA2  +
push 4  +
pop ecx  +
mov edi offset dword_1025F0C +
mov esi eax +
xor edx edx +
cmps   +
jnz loc_1025DE6  +
mov ecx ebx +
call sub_100B5B9  +
mov edi [ebx+4] +
mov esi edi +
xor esi [ebp+var_8] +
mov eax esi +
and eax [ebp+var_8] +
jz loc_1025DCF  +
mov ecx [ebp+var_4] +
push eax  +
call sub_1025BE1  +
and esi edi +
jz loc_1025EA2  +
mov ecx [ebp+var_4] +
push esi  +
push ebx  +
call sub_1025CC1  +
jmp loc_1025EA2  +
push 4  +
pop ecx  +
mov edi offset dword_1025F1C +
mov esi eax +
xor edx edx +
cmps   +
jnz loc_1025E0D  +
mov ecx ebx +
call sub_100AE29  +
mov ecx ebx +
call sub_100B57D  +
mov ecx [ebp+var_4] +
test al al +
jnz loc_1025E68  +
jmp loc_1025E79  +
push 4  +
pop ecx  +
mov edi offset dword_1025EBC +
mov esi eax +
xor edx edx +
cmps   +
jz loc_1025E76  +
push 4  +
pop ecx  +
mov edi offset dword_1025EDC +
mov esi eax +
xor edx edx +
cmps   +
jz loc_1025E76  +
push 4  +
pop ecx  +
mov edi offset dword_1025EEC +
mov esi eax +
xor edx edx +
cmps   +
jz loc_1025E65  +
push 4  +
pop ecx  +
mov edi offset dword_1025EFC +
mov esi eax +
xor edx edx +
cmps   +
jz loc_1025E65  +
push 4  +
mov esi eax +
pop ecx  +
mov edi offset dword_1025ECC +
xor eax eax +
cmps   +
jz loc_1025E65  +
jmp loc_1025EA2  +
cmp [ebp+var_8] 0 +
jz loc_1025EA2  +
mov ecx [ebp+var_4] +
push ebx  +
call sub_100B53E  +
jmp loc_1025EA2  +
cmp [ebp+var_8] 0 +
jz loc_1025EA2  +
mov ecx [ebp+var_4] +
push [ebp+var_8]  +
call sub_1025BE1  +
jmp loc_1025EA2  +
cmp dword ptr [esi+4] 5 +
jnz loc_1025EA2  +
push 4  +
add esi 0Ch +
pop ecx  +
mov edi offset dword_100AB34 +
xor eax eax +
cmps   +
jnz loc_1025EA2  +
mov ecx [ebp+var_4] +
call sub_100B335  +
pop edi  +
pop esi  +
xor eax eax +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push esi  +
mov esi ecx +
push dword ptr [esi+8]  +
push dword ptr [esi+0Ch]  +
push dword ptr [esi]  +
call sub_102D020  +
cmp dword_104A318 0 +
jz loc_1025FA4  +
mov ecx dword_104BB6C +
mov eax off_104B7EC +
push ebx  +
mov ebx [eax+0Ch] +
push edi  +
mov edi ecx +
imul edi edi +
push 2  +
pop edx  +
cmp [edi+ebx] edx +
pop edi  +
pop ebx  +
jl loc_1025FA4  +
push dword ptr [esi+0Ch]  +
mov [ebp+var_4] eax +
push dword ptr [esi+8]  +
lea eax [ebp+var_14] +
push dword ptr [esi+4]  +
mov [ebp+var_14] offset aDW7rtmEnduse_4 +
push dword ptr [esi]  +
mov [ebp+var_10] 0F4h +
push offset aExceptionHr0x0  +
push eax  +
mov [ebp+var_C] ecx +
mov [ebp+var_8] edx +
call sub_10362FF  +
add esp 18h +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call ds:SysStringLen  +
test eax eax +
jz loc_10260CF  +
and [ebp+var_4] 0 +
push edi  +
lea eax [ebp+var_4] +
push eax  +
push [ebp+arg_0]  +
push dword ptr [esi]  +
call OLEAUT32_313  +
mov edi eax +
test edi edi +
jl loc_10260CC  +
push dword ptr [esi]  +
call ds:SysFreeString  +
mov eax [ebp+var_4] +
mov [esi] eax +
mov eax edi +
pop edi  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
xor esi esi +
push edi  +
mov edi ecx +
cmp [ebp+arg_0] esi +
jz loc_1026169  +
mov eax [edi] +
cmp eax esi +
jz loc_10260F6  +
cmp [ebp+arg_4] esi +
jz loc_1026169  +
push eax  +
call ds:SysStringLen  +
mov ecx [ebp+arg_4] +
lea ebx [eax+ecx] +
cmp ebx eax +
mov [ebp+var_4] eax +
jge loc_1026111  +
mov eax 8007000Eh +
jmp loc_102616B  +
push ebx  +
push esi  +
call ds:SysAllocStringLen  +
mov esi eax +
test esi esi +
jz loc_102610A  +
push dword ptr [edi]  +
call ds:SysStringLen  +
test eax eax +
jbe loc_1026140  +
mov eax [ebp+var_4] +
add eax eax +
push eax  +
push dword ptr [edi]  +
lea eax [ebx+ebx] +
push eax  +
push esi  +
call sub_1006B30  +
add esp 10h +
mov eax [ebp+arg_4] +
add eax eax +
push eax  +
push [ebp+arg_0]  +
push eax  +
mov eax [ebp+var_4] +
lea eax [esi+eax*2] +
push eax  +
call sub_1006B30  +
xor eax eax +
add esp 10h +
mov [esi+ebx*2] ax +
push dword ptr [edi]  +
call ds:SysFreeString  +
mov [edi] esi +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
push dword ptr [eax]  +
mov esi ecx +
call sub_1026090  +
test eax eax +
jge loc_1026193  +
push eax  +
call loc_1025B15  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+lpBuffer] +
push esi  +
mov esi ds:LoadStringW +
push edi  +
mov edi ecx +
xor ecx ecx +
mov [ebx] cx +
mov ecx [edi+4] +
xor eax eax +
test ecx ecx +
jz loc_10261CE  +
push [ebp+nBufferMax]  +
push ebx  +
push [ebp+uID]  +
push ecx  +
call esi  +
test eax eax +
jnz loc_10261DE  +
mov edi [edi] +
test edi edi +
jz loc_10261DE  +
push [ebp+nBufferMax]  +
push ebx  +
push [ebp+uID]  +
push edi  +
call esi  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi] +
test eax eax +
jz loc_10261FC  +
push eax  +
call ds:__imp_FreeLibrary  +
mov esi [esi+4] +
test esi esi +
jz loc_1026209  +
push esi  +
call sub_103DC0E  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push offset dword_102622C  +
lea eax [ebp-4] +
push eax  +
mov dword ptr [ebp-4] 1 +
call _CxxThrowException  +
int 3  +
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
mov eax [ecx] +
push dword ptr [ecx+0Ch]  +
push [ebp+arg_0]  +
call dword ptr [eax+10h]  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
cmp eax 0FFFFFFFFh +
jnz loc_102626E  +
mov eax [ecx+0Ch] +
dec eax  +
push edi  +
mov edi eax +
test eax eax +
jl loc_1026291  +
mov ecx [ecx+4] +
push esi  +
lea esi [ecx+eax*2] +
movzx eax word ptr [esi] +
push eax  +
call sub_1003A20  +
test eax eax +
jnz loc_1026290  +
dec edi  +
dec esi  +
dec esi  +
test edi edi +
jge loc_102627C  +
pop esi  +
mov eax edi +
pop edi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
push dword ptr [esi+8]  +
mov ecx [ebp+arg_0] +
push dword ptr [esi+4]  +
push [ebp+uID]  +
call sub_102619F  +
mov [esi+0Ch] eax +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ecx+0Ch] +
xor eax eax +
push eax  +
push eax  +
push [ebp+cchMultiByte]  +
inc edx  +
push [ebp+lpMultiByteStr]  +
push edx  +
push dword ptr [ecx+4]  +
push eax  +
push eax  +
call ds:WideCharToMultiByte  +
pop ebp  +
retn 8  +
***
mov edx [ecx+0Ch] +
xor eax eax +
push eax  +
push eax  +
push eax  +
push eax  +
inc edx  +
push edx  +
push dword ptr [ecx+4]  +
push eax  +
push eax  +
call ds:WideCharToMultiByte  +
retn   +
***
mov eax [ecx+0Ch] +
test eax eax +
jz loc_1026317  +
mov ecx [ecx+4] +
movzx eax word ptr [ecx+eax*2-2] +
retn   +
xor eax eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov edx [eax+8] +
push dword ptr [eax+4]  +
mov eax [eax] +
mov edx [edx+4] +
lea eax [edx+eax*2] +
push eax  +
call sub_1026241  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov edx [eax+8] +
mov eax [eax+9Ch] +
push edx  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push eax  +
call sub_100CCC4  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
lea eax [ebp+arg_8] +
push eax  +
push 2  +
push [ebp+arg_4]  +
call sub_100A40E  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
lea eax [ebp+arg_8] +
push eax  +
push 1  +
push [ebp+arg_4]  +
call sub_100A40E  +
pop ebp  +
retn   +
***
mov eax dword_104A04C +
cmp eax 7D1h +
jz loc_10263BB  +
cmp eax 7D3h +
jz loc_10263BB  +
xor eax eax +
retn   +
xor eax eax +
inc eax  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_C] +
sub esp 10h +
test ecx ecx +
jz loc_10263EE  +
mov eax ecx +
push esi  +
lea esi [eax+2] +
mov dx [eax] +
inc eax  +
inc eax  +
test dx dx +
jnz loc_10263D9  +
sub eax esi +
sar eax 1 +
lea eax [eax+eax+2] +
pop esi  +
jmp loc_10263F1  +
push 0Ah  +
pop eax  +
test ecx ecx +
jnz loc_10263FA  +
mov ecx offset aNull +
and [ebp+var_C] 0 +
and [ebp+var_4] 0 +
mov [ebp+var_8] eax +
lea eax [ebp+var_10] +
push eax  +
push 1  +
push [ebp+arg_8]  +
mov [ebp+var_10] ecx +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call ds:EventWrite  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
and [ebp+var_1C] 0 +
and [ebp+var_14] 0 +
push edi  +
mov edi [ebp+arg_10] +
lea eax [ebp+arg_C] +
mov [ebp+var_20] eax +
mov [ebp+var_18] 4 +
test edi edi +
jz loc_1026464  +
mov eax edi +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_1026450  +
sub eax edx +
sar eax 1 +
lea eax [eax+eax+2] +
jmp loc_1026467  +
push 0Ah  +
pop eax  +
mov ecx edi +
test edi edi +
jnz loc_1026472  +
mov ecx offset aNull +
and [ebp+var_C] 0 +
and [ebp+var_4] 0 +
mov [ebp+var_8] eax +
lea eax [ebp+var_20] +
push eax  +
push 2  +
push [ebp+arg_8]  +
mov [ebp+var_10] ecx +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call ds:EventWrite  +
pop edi  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword_104BB84 0 +
jnz loc_10264D0  +
push offset dword_104BB80  +
xor eax eax +
inc eax  +
push offset aShell32_dll_0  +
push eax  +
mov dword_104BB84 eax +
call ds:GetModuleHandleExW  +
test eax eax +
jnz loc_10264D0  +
and dword_104BB80 eax +
mov eax dword_104BB80 +
test eax eax +
jz loc_10264E5  +
push [ebp+lpProcName]  +
push eax  +
call ds:__imp_GetProcAddress  +
jmp loc_10264E7  +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
mov eax dword_104A044 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
push edi  +
lea esi [ebp+arg_0] +
lea edi [ebp+var_14] +
movs   +
movs   +
movs   +
movs   +
mov esi [ebp+arg_18] +
mov edi [ebp+arg_14] +
xor eax eax +
mov [esi] ax +
cmp dword_104BB8C eax +
jnz loc_1026553  +
push offset aShgetfolderp_0  +
mov dword_104BB8C 1 +
call sub_102649F  +
mov dword_104BB88 eax +
mov eax dword_104BB88 +
test eax eax +
jz loc_102656C  +
push [ebp+arg_1C]  +
lea ecx [ebp+var_14] +
push esi  +
push edi  +
push [ebp+arg_10]  +
push ecx  +
call eax  +
jmp loc_1026571  +
mov eax 8007007Fh +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_1002A8B  +
leave   +
retn 20h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20Ch +
mov eax dword_104A044 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
mov esi [ebp+arg_0] +
push 104h  +
lea eax [ebp+Buffer] +
push eax  +
call ds:GetSystemDirectoryW  +
test eax eax +
jbe loc_10265CE  +
xor eax eax +
jmp loc_10265D7  +
call sub_1025B53  +
test eax eax +
jl loc_10265E1  +
mov cx [ebp+Buffer] +
mov [esi] cx +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop esi  +
call sub_1002A8B  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push esi  +
mov esi [ebp+pvData] +
lea eax [ebp+hKey] +
push eax  +
push 1  +
push 0  +
push offset aSoftwareMicr_0  +
push 80000002h  +
mov byte ptr [esi] 0 +
call ds:RegOpenKeyExW  +
push eax  +
call sub_100A7A1  +
test eax eax +
jl loc_102666B  +
and [ebp+pvData] 0 +
push 4  +
pop eax  +
mov [ebp+pcbData] eax +
mov [ebp+pdwType] eax +
lea eax [ebp+pcbData] +
push eax  +
lea eax [ebp+pvData] +
push eax  +
lea eax [ebp+pdwType] +
push eax  +
push offset pszValue  +
push 0  +
push [ebp+hKey]  +
call ds:SHGetValueW  +
push eax  +
call sub_100A7A1  +
test eax eax +
jl loc_1026662  +
cmp [ebp+pvData] 1 +
jnz loc_1026662  +
mov byte ptr [esi] 1 +
push [ebp+hKey]  +
call ds:RegCloseKey  +
xor eax eax +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor ecx ecx +
cmp [ebp+arg_18] ecx +
jnz loc_10266BC  +
mov eax 80070057h +
jmp loc_10266D4  +
cmp [ebp+arg_14] ecx +
jz loc_10266C4  +
push 2  +
pop ecx  +
mov eax [ebp+arg_20] +
mov edx [eax] +
push ecx  +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
push eax  +
call dword ptr [edx+0Ch]  +
pop ebp  +
retn 24h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push esi  +
lea eax [ebp+hKey] +
push eax  +
push 2  +
push 0  +
push offset aSoftwareMicr_9  +
push 80000002h  +
call ds:RegOpenKeyExW  +
push eax  +
call sub_100A7A1  +
mov esi eax +
test esi esi +
jl loc_1026739  +
push 4  +
lea eax [ebp+pvData] +
push eax  +
push 4  +
push offset aInstalled  +
push 0  +
push [ebp+hKey]  +
mov [ebp+pvData] 1 +
call ds:SHSetValueW  +
push eax  +
call sub_100A7A1  +
push [ebp+hKey]  +
mov esi eax +
call ds:RegCloseKey  +
mov eax esi +
pop esi  +
leave   +
retn   +
***
push ebp  +
mov ebp esp +
sub esp 41Ch +
mov eax dword_104A044 +
xor eax ebp +
mov [ebp-4] eax +
push esi  +
push edi  +
lea eax [ebp-414h] +
push eax  +
push 9  +
xor esi esi +
push esi  +
push offset aSoftwareMic_10  +
push 80000002h  +
call ds:RegOpenKeyExW  +
mov edi eax +
cmp edi esi +
jnz loc_10268DF  +
push ebx  +
mov ebx ds:RegEnumKeyExW +
push esi  +
push esi  +
push esi  +
push esi  +
lea eax [ebp-418h] +
push eax  +
lea eax [ebp-40Ch] +
push eax  +
mov [ebp-410h] esi +
push esi  +
jmp loc_102687D  +
lea eax [ebp-41Ch] +
push eax  +
lea eax [ebp-20Ch] +
push eax  +
push esi  +
push 2  +
push offset aProgid  +
lea eax [ebp-40Ch] +
push eax  +
push dword ptr [ebp-414h]  +
mov dword ptr [ebp-41Ch] 208h +
call ds:RegGetValueW  +
test eax eax +
jnz loc_102685F  +
mov [ebp-6] ax +
lea eax [ebp-20Ch] +
push offset aMssearch_ipspi  +
push eax  +
call ds:__imp__wcsicmp  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_102689A  +
inc dword ptr [ebp-410h]  +
push esi  +
push esi  +
push esi  +
push esi  +
lea eax [ebp-418h] +
push eax  +
lea eax [ebp-40Ch] +
push eax  +
push dword ptr [ebp-410h]  +
push dword ptr [ebp-414h]  +
mov dword ptr [ebp-418h] 100h +
call ebx  +
mov edi eax +
cmp edi esi +
jnz loc_10268C6  +
jmp loc_102680C  +
***
push 4  +
lea eax [ebp-410h] +
push eax  +
push 4  +
push offset aIncludeipsplug  +
push offset aSoftwareMicr_1  +
push 80000002h  +
mov dword ptr [ebp-410h] 1 +
call ds:RegSetKeyValueW  +
mov edi eax +
pop ebx  +
cmp edi 103h +
jnz loc_10268D1  +
xor edi edi +
push dword ptr [ebp-414h]  +
call ds:RegCloseKey  +
jmp loc_10268EB  +
cmp edi 2 +
jz loc_10268E9  +
cmp edi 3 +
jnz loc_10268EB  +
xor edi edi +
push edi  +
call sub_100A7A1  +
mov ecx [ebp-4] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_1002A8B  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi [ebp+arg_0] +
and dword ptr [esi] 0 +
and [ebp+arg_0] 0 +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+arg_0] +
push eax  +
push 0  +
push 10h  +
push offset aIncludeipsplug  +
push offset aSoftwareMicr_1  +
push 80000002h  +
mov [ebp+var_4] 4 +
call ds:RegGetValueW  +
test eax eax +
jnz loc_1026A0E  +
xor ecx ecx +
inc ecx  +
test byte ptr [ebp+arg_0] cl +
jz loc_1026A1C  +
mov [esi] ecx +
jmp loc_1026A1C  +
cmp eax 2 +
jz loc_1026A18  +
cmp eax 3 +
jnz loc_1026A1C  +
xor eax eax +
and [esi] eax +
push eax  +
call sub_100A7A1  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push dword ptr [eax+4]  +
push dword ptr [ecx+4]  +
call sub_100C6D5  +
neg eax  +
sbb eax eax +
neg eax  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
lea eax [ecx+10h] +
push eax  +
push 100000h  +
push 400h  +
push dword ptr [ebp+8]  +
call sub_10127AB  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_10084DE  +
test byte ptr [ebp+8] 1 +
jz loc_1026A8C  +
push esi  +
call off_104B7F0  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov eax 80004001h +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
cmp [ebp+arg_4] eax +
jz loc_1026ABA  +
cmp [ebp+arg_4] 7FFFFFFFh +
jbe loc_1026ABF  +
mov eax 80070057h +
test eax eax +
jl loc_1026AD8  +
mov eax [ebp+arg_4] +
push edi  +
push [ebp+arg_C]  +
mov edi [ebp+arg_0] +
push [ebp+arg_8]  +
push 0  +
call sub_100A294  +
pop edi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
mov esi ecx +
or dword ptr [esi+0Ch] 0FFFFFFFFh +
mov [esi] eax +
mov eax [ebp+4] +
mov [esi+4] eax +
mov dword ptr [esi+8] offset dword_10223DC +
call sub_1025F31  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+lpString]  +
mov esi ecx +
call ds:lstrlenW  +
push eax  +
push [ebp+lpString]  +
mov ecx esi +
call sub_10260D9  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+lpString]  +
mov esi ecx +
call sub_1026B10  +
test eax eax +
jge loc_1026B50  +
push eax  +
call loc_1025B15  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_10261EA  +
push 2  +
push 0  +
push [ebp+lpLibFileName]  +
call ds:LoadLibraryExW  +
push 0  +
push 8  +
push [ebp+lpLibFileName]  +
mov [esi] eax +
call sub_103DD7F  +
mov [esi+4] eax +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20Ch +
mov eax dword_104A044 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
xor eax eax +
push 206h  +
push eax  +
mov word ptr [ebp+lpLibFileName] ax +
lea eax [ebp+lpLibFileName+2] +
push eax  +
mov edi ecx +
call memset  +
add esp 0Ch +
push 104h  +
lea eax [ebp+lpLibFileName] +
push eax  +
push esi  +
call ds:GetModuleFileNameW  +
lea eax [ebp+lpLibFileName] +
push eax  +
mov ecx edi +
call sub_1026B5C  +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_1002A8B  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx] +
push 0FFFFFFFFh  +
push dword ptr [ecx+0Ch]  +
push [ebp+arg_0]  +
call dword ptr [eax+10h]  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push dword ptr [eax+0Ch]  +
push dword ptr [eax+4]  +
call sub_1026241  +
pop ebp  +
retn 4  +
***
mov dword ptr [ecx] offset off_100A958 +
add ecx 4 +
jmp sub_10084DE  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
lea ecx [esi+4] +
mov dword ptr [esi] offset off_100A958 +
call sub_10084DE  +
test byte ptr [ebp+8] 1 +
jz loc_1026C6E  +
push esi  +
call off_104B7F0  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
push ebp  +
mov ebp esp +
push ecx  +
and dword ptr [ebp-4] 0 +
add ecx 8 +
push ecx  +
mov ecx [ebp+8] +
call sub_100EA61  +
mov eax [ebp+8] +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 78h +
mov eax dword_104A044 +
xor eax ebp +
mov [ebp+var_4] eax +
and [ebp+hKey] 0 +
push esi  +
lea eax [ebp+hKey] +
push eax  +
push 0F003Fh  +
push 0  +
push offset aSoftwareMicr_0  +
push 80000002h  +
call ds:RegOpenKeyExW  +
push eax  +
call sub_100A7A1  +
mov esi eax +
test esi esi +
jl loc_1026D6B  +
lea eax [ebp+var_78] +
push eax  +
push 800h  +
push 1  +
mov [ebp+var_78] 0Ch +
call ds:GetNLSVersion  +
test eax eax +
jz loc_1026D54  +
xor eax eax +
push 62h  +
push eax  +
mov word ptr [ebp+pvData] ax +
lea eax [ebp+pvData+2] +
push eax  +
call memset  +
push [ebp+var_70]  +
lea eax [ebp+pvData] +
push [ebp+var_74]  +
push 4  +
push offset aD_X_X  +
push 32h  +
push eax  +
call sub_100A257  +
mov esi eax +
add esp 24h +
test esi esi +
jl loc_1026D62  +
lea eax [ebp+pvData] +
push eax  +
call ds:lstrlenW  +
lea eax [eax+eax+2] +
push eax  +
lea eax [ebp+pvData] +
push eax  +
push 1  +
push offset aIndexercatalog  +
push 0  +
push [ebp+hKey]  +
call ds:SHSetValueW  +
jmp loc_1026D5A  +
call ds:__imp_GetLastError  +
push eax  +
call sub_100A7A1  +
mov esi eax +
push [ebp+hKey]  +
call ds:RegCloseKey  +
mov ecx [ebp+var_4] +
mov eax esi +
xor ecx ebp +
pop esi  +
call sub_1002A8B  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
xor ebx ebx +
push esi  +
cmp dword_104A3AC ebx +
jz loc_1026E03  +
mov al byte_104A3B0 +
cmp al 4 +
jnb loc_1026DB0  +
cmp al bl +
jnz loc_1026E03  +
mov eax dword_104A398 +
mov ecx dword_104A39C +
mov edx 200h +
mov esi 80000000h +
and eax edx +
and ecx esi +
or eax ecx +
jz loc_1026E03  +
mov eax dword_104A3A0 +
push edi  +
mov edi dword_104A3A4 +
mov ecx eax +
and ecx edx +
mov edx edi +
and edx esi +
cmp ecx eax +
jnz loc_1026E02  +
cmp edx edi +
jnz loc_1026E02  +
push [ebp+pvData]  +
push offset dword_1026E98  +
push dword_104A134  +
push dword_104A130  +
call sub_10379EB  +
pop edi  +
lea eax [ebp+hKey] +
push eax  +
push 0F003Fh  +
push ebx  +
push offset aSoftwareMicr_0  +
push 80000002h  +
mov [ebp+hKey] ebx +
call ds:RegOpenKeyExW  +
push eax  +
call sub_100A7A1  +
mov esi eax +
cmp esi ebx +
jl loc_1026E82  +
cmp [ebp+pvData] 1 +
jnz loc_1026E5F  +
call sub_1026C9C  +
mov esi eax +
cmp esi ebx +
jl loc_1026E82  +
push offset aRebuildindex  +
push [ebp+hKey]  +
call ds:RegDeleteValueW  +
cmp eax 2 +
jz loc_1026E55  +
cmp eax 3 +
jnz loc_1026E57  +
xor eax eax +
push eax  +
call sub_100A7A1  +
mov esi eax +
cmp esi ebx +
jl loc_1026E82  +
push 4  +
lea eax [ebp+pvData] +
push eax  +
push 4  +
push offset aSetupcompleted  +
push ebx  +
push [ebp+hKey]  +
call ds:SHSetValueW  +
push eax  +
call sub_100A7A1  +
mov esi eax +
cmp [ebp+hKey] ebx +
jz loc_1026E90  +
push [ebp+hKey]  +
call ds:RegCloseKey  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
add esp esp +
sub eax [eax] +
add eax ebp +
push es  +
mov esi 90C3FFFDh +
nop   +
nop   +
nop   +
nop   +
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
push 0  +
mov dword ptr [esi] offset off_1002BE4 +
call sub_1002CC0  +
test byte ptr [ebp+8] 1 +
jz loc_1026EE2  +
push esi  +
call off_104B7F0  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
sub dword ptr [esp+4] 4 +
jmp loc_10026BA  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov edi ecx +
mov eax [edi] +
cmp eax [esi] +
jz loc_1026F32  +
push eax  +
call ds:SysFreeString  +
mov ecx esi +
call sub_101A272  +
mov [edi] eax +
cmp dword ptr [esi] 0 +
jz loc_1026F32  +
test eax eax +
jnz loc_1026F32  +
push 8007000Eh  +
call loc_1025B15  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
and dword ptr [esi] 0 +
and dword ptr [esi+4] 0 +
call sub_1026B91  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
inc eax  +
retn 10h  +
***
mov edi edi +
push esi  +
lea esi [ecx+9Ch] +
mov eax [esi] +
test eax eax +
jz loc_1026F8C  +
cmp dword ptr [ecx+98h] 0 +
jz loc_1026F8C  +
push eax  +
call ds:RegCloseKey  +
and dword ptr [esi] 0 +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_100AA1A  +
test byte ptr [ebp+8] 1 +
jz loc_1026FB0  +
push esi  +
call off_104B7F0  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_10015E0  +
xor ebx ebx +
mov [ebp-18h] ebx +
lea eax [ebp-18h] +
push eax  +
push offset stru_1002154  +
push 15h  +
push ebx  +
push offset stru_10223EC  +
mov [ebp-4] ebx +
call ds:CoCreateInstance  +
mov edi eax +
cmp edi ebx +
jl loc_1027114  +
mov [ebp-14h] ebx +
mov eax [ebp-18h] +
mov ecx [eax] +
lea edx [ebp-14h] +
push edx  +
push eax  +
mov byte ptr [ebp-4] 1 +
call dword ptr [ecx+1Ch]  +
mov edi eax +
cmp edi ebx +
jl loc_10270C5  +
mov [ebp-10h] ebx +
mov eax [ebp-14h] +
mov ecx [eax] +
lea edx [ebp-10h] +
push edx  +
push dword ptr [ebp+8]  +
mov byte ptr [ebp-4] 2 +
push eax  +
call dword ptr [ecx+20h]  +
test eax eax +
jnz loc_1027077  +
push dword ptr [ebp+0Ch]  +
mov eax [ebp-10h] +
mov ecx [eax] +
push offset dword_100887C  +
push eax  +
call dword ptr [ecx]  +
mov edi eax +
cmp edi ebx +
jge loc_10270B2  +
mov esi [ebp+10h] +
cmp esi ebx +
jz loc_10270B2  +
push ebx  +
lea ecx [ebp-20h] +
call sub_1026F3F  +
push 7D0h  +
lea eax [ebp-20h] +
push eax  +
mov ecx esi +
mov byte ptr [ebp-4] 3 +
call sub_102629D  +
mov eax [esi] +
push 0FFFFFFFFh  +
push dword ptr [esi+0Ch]  +
mov ecx esi +
push offset a100  +
call dword ptr [eax+10h]  +
jmp loc_10270AA  +
mov edi 80040D61h +
cmp [ebp+10h] ebx +
jz loc_10270B2  +
push ebx  +
lea ecx [ebp-20h] +
call sub_1026F3F  +
mov ecx [ebp+10h] +
push 7D2h  +
lea eax [ebp-20h] +
push eax  +
mov byte ptr [ebp-4] 4 +
call sub_102629D  +
push dword ptr [ebp+8]  +
mov ecx [ebp+10h] +
call sub_1026C01  +
lea ecx [ebp-20h] +
call sub_10261EA  +
mov eax [ebp-10h] +
mov byte ptr [ebp-4] 1 +
cmp eax ebx +
jz loc_1027102  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_1027102  +
mov esi [ebp+10h] +
cmp esi ebx +
jz loc_1027102  +
push ebx  +
lea ecx [ebp-20h] +
call sub_1026F3F  +
push 7D0h  +
lea eax [ebp-20h] +
push eax  +
mov ecx esi +
mov byte ptr [ebp-4] 5 +
call sub_102629D  +
mov eax [esi] +
push 0FFFFFFFFh  +
push dword ptr [esi+0Ch]  +
mov ecx esi +
push offset a101  +
call dword ptr [eax+10h]  +
lea ecx [ebp-20h] +
call sub_10261EA  +
mov eax [ebp-14h] +
mov [ebp-4] bl +
cmp eax ebx +
jz loc_1027151  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_1027151  +
mov esi [ebp+10h] +
cmp esi ebx +
jz loc_1027151  +
push ebx  +
lea ecx [ebp-20h] +
call sub_1026F3F  +
push 7D0h  +
lea eax [ebp-20h] +
push eax  +
mov ecx esi +
mov byte ptr [ebp-4] 6 +
call sub_102629D  +
mov eax [esi] +
push 0FFFFFFFFh  +
push dword ptr [esi+0Ch]  +
mov ecx esi +
push offset a102  +
call dword ptr [eax+10h]  +
lea ecx [ebp-20h] +
call sub_10261EA  +
mov eax [ebp-18h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
cmp eax ebx +
jz loc_1027162  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax edi +
call sub_10015C0  +
retn 0Ch  +
***
call sub_1002A3A  +
mov ecx [ebp+0Ch] +
mov eax [ebp+8] +
mov esi [ebp+14h] +
mov [ebp-21Ch] ecx +
mov ecx [ebp+10h] +
xor ebx ebx +
mov [ebp-238h] eax +
mov [ebp-248h] ecx +
mov [ebp-234h] ebx +
push esi  +
lea ecx [ebp-234h] +
push ecx  +
push eax  +
mov [ebp-4] ebx +
call sub_1026FBC  +
mov [ebp-224h] eax +
cmp eax 80040D61h +
jnz loc_10274C6  +
mov [ebp-228h] ebx +
lea eax [ebp-228h] +
push eax  +
push offset stru_1002154  +
push 15h  +
push ebx  +
push offset stru_10223EC  +
call ds:CoCreateInstance  +
cmp eax ebx +
mov [ebp-224h] eax +
jl loc_1027474  +
mov [ebp-22Ch] ebx +
mov eax [ebp-228h] +
mov ecx [eax] +
lea edx [ebp-22Ch] +
push edx  +
push eax  +
mov byte ptr [ebp-4] 2 +
call dword ptr [ecx+1Ch]  +
cmp eax ebx +
mov [ebp-224h] eax +
jl loc_102741F  +
xor eax eax +
mov [ebp-12h] ax +
lea eax [ebp-230h] +
push eax  +
push 1  +
push ebx  +
push offset aSoftwareMicr_0  +
push 80000002h  +
mov dword ptr [ebp-244h] 206h +
mov dword ptr [ebp-240h] 2 +
call ds:RegOpenKeyExW  +
push eax  +
call sub_100A7A1  +
cmp eax ebx +
mov [ebp-224h] eax +
jl loc_10273F0  +
lea eax [ebp-244h] +
push eax  +
lea eax [ebp-218h] +
push eax  +
lea eax [ebp-240h] +
push eax  +
mov edi offset aDefaultapplica +
push edi  +
push offset aGatheringMan_0  +
push dword ptr [ebp-230h]  +
call ds:SHGetValueW  +
push eax  +
call sub_100A7A1  +
cmp eax ebx +
mov [ebp-224h] eax +
jl loc_10273A7  +
lea eax [ebp-218h] +
push eax  +
push ebx  +
call SHELL32_165  +
cmp eax ebx +
jz loc_102731D  +
cmp eax 50h +
jz loc_102731D  +
cmp eax 0B7h +
jz loc_102731D  +
push ebx  +
lea ecx [ebp-220h] +
mov dword ptr [ebp-224h] 80070003h +
call sub_1026F3F  +
push 7D4h  +
lea eax [ebp-220h] +
push eax  +
mov ecx esi +
mov byte ptr [ebp-4] 5 +
call sub_102629D  +
push 0FFFFFFFFh  +
push dword ptr [esi+0Ch]  +
lea ecx [ebp-218h] +
push ecx  +
jmp loc_10273D0  +
mov [ebp-23Ch] ebx +
mov eax [ebp-22Ch] +
mov ecx [eax] +
lea edx [ebp-23Ch] +
push edx  +
push dword ptr [ebp-248h]  +
mov byte ptr [ebp-4] 3 +
push dword ptr [ebp-21Ch]  +
push dword ptr [ebp-238h]  +
push eax  +
call dword ptr [ecx+28h]  +
cmp eax ebx +
mov [ebp-224h] eax +
jge loc_1027391  +
push ebx  +
lea ecx [ebp-220h] +
call sub_1026F3F  +
push 7D3h  +
lea eax [ebp-220h] +
push eax  +
mov ecx esi +
mov byte ptr [ebp-4] 4 +
call sub_102629D  +
push dword ptr [ebp-238h]  +
mov ecx esi +
call sub_1026C01  +
lea ecx [ebp-220h] +
call sub_10261EA  +
mov eax [ebp-23Ch] +
mov byte ptr [ebp-4] 2 +
cmp eax ebx +
jz loc_10273E2  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_10273E2  +
push ebx  +
lea ecx [ebp-220h] +
call sub_1026F3F  +
push 7D5h  +
lea eax [ebp-220h] +
push eax  +
mov ecx esi +
mov byte ptr [ebp-4] 6 +
call sub_102629D  +
push 0FFFFFFFFh  +
push dword ptr [esi+0Ch]  +
push edi  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+10h]  +
lea ecx [ebp-220h] +
call sub_10261EA  +
push dword ptr [ebp-230h]  +
call ds:RegCloseKey  +
jmp loc_102745E  +
push ebx  +
lea ecx [ebp-220h] +
call sub_1026F3F  +
push 7D7h  +
lea eax [ebp-220h] +
push eax  +
mov ecx esi +
mov byte ptr [ebp-4] 7 +
call sub_102629D  +
push 0FFFFFFFFh  +
push dword ptr [esi+0Ch]  +
push offset aWindowsSearch  +
jmp loc_102744C  +
push ebx  +
lea ecx [ebp-220h] +
call sub_1026F3F  +
push 7D0h  +
lea eax [ebp-220h] +
push eax  +
mov ecx esi +
mov byte ptr [ebp-4] 8 +
call sub_102629D  +
push 0FFFFFFFFh  +
push dword ptr [esi+0Ch]  +
push offset a103  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+10h]  +
lea ecx [ebp-220h] +
call sub_10261EA  +
mov eax [ebp-22Ch] +
mov byte ptr [ebp-4] 1 +
cmp eax ebx +
jz loc_10274B3  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_10274B3  +
push ebx  +
lea ecx [ebp-220h] +
call sub_1026F3F  +
push 7D0h  +
lea eax [ebp-220h] +
push eax  +
mov ecx esi +
mov byte ptr [ebp-4] 9 +
call sub_102629D  +
mov eax [esi] +
push 0FFFFFFFFh  +
push dword ptr [esi+0Ch]  +
mov ecx esi +
push offset a104  +
call dword ptr [eax+10h]  +
lea ecx [ebp-220h] +
call sub_10261EA  +
mov eax [ebp-228h] +
mov [ebp-4] bl +
cmp eax ebx +
jz loc_10274C6  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-234h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
cmp eax ebx +
jz loc_10274DA  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-224h] +
call sub_1002A77  +
retn 10h  +
***
call sub_10015E0  +
xor ebx ebx +
mov [ebp-10h] ebx +
mov esi [ebp+10h] +
push esi  +
lea eax [ebp-10h] +
push eax  +
push dword ptr [ebp+8]  +
mov [ebp-4] ebx +
call sub_1026FBC  +
mov edi eax +
cmp edi ebx +
jl loc_1027644  +
mov [ebp+10h] ebx +
mov eax [ebp-10h] +
mov ecx [eax] +
lea edx [ebp+10h] +
push edx  +
push eax  +
mov byte ptr [ebp-4] 1 +
call dword ptr [ecx+48h]  +
mov edi eax +
cmp edi ebx +
jl loc_10275FE  +
mov [ebp+8] ebx +
mov eax [ebp+10h] +
mov ecx [eax] +
lea edx [ebp+8] +
push edx  +
push dword ptr [ebp+0Ch]  +
mov byte ptr [ebp-4] 2 +
push eax  +
call dword ptr [ecx+28h]  +
mov edi eax +
cmp edi 80040D02h +
jnz loc_10275B8  +
xor edi edi +
cmp edi ebx +
jge loc_10275EB  +
push ebx  +
lea ecx [ebp-18h] +
call sub_1026F3F  +
push 7D8h  +
lea eax [ebp-18h] +
push eax  +
mov ecx esi +
mov byte ptr [ebp-4] 3 +
call sub_102629D  +
push dword ptr [ebp+0Ch]  +
mov ecx esi +
call sub_1026C01  +
lea ecx [ebp-18h] +
call sub_10261EA  +
mov eax [ebp+8] +
mov byte ptr [ebp-4] 1 +
cmp eax ebx +
jz loc_1027634  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_1027634  +
push ebx  +
lea ecx [ebp-18h] +
call sub_1026F3F  +
push 7D0h  +
lea eax [ebp-18h] +
push eax  +
mov ecx esi +
mov byte ptr [ebp-4] 4 +
call sub_102629D  +
mov eax [esi] +
push 0FFFFFFFFh  +
push dword ptr [esi+0Ch]  +
mov ecx esi +
push offset a105  +
call dword ptr [eax+10h]  +
lea ecx [ebp-18h] +
call sub_10261EA  +
mov eax [ebp+10h] +
mov [ebp-4] bl +
cmp eax ebx +
jz loc_1027644  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-10h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
cmp eax ebx +
jz loc_1027655  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax edi +
call sub_10015C0  +
retn 0Ch  +
***
call sub_10015E0  +
and dword ptr [ebp-10h] 0 +
mov ebx [ebp+24h] +
and dword ptr [ebp-4] 0 +
push ebx  +
lea eax [ebp-10h] +
push eax  +
push dword ptr [ebp+8]  +
call sub_1026FBC  +
mov esi eax +
test esi esi +
jl loc_1027897  +
push offset aGathererUseChe  +
lea ecx [ebp-14h] +
call sub_100883D  +
mov esi [ebp-14h] +
neg esi  +
sbb esi esi +
and esi 7FF8FFF2h +
add esi 8007000Eh +
mov byte ptr [ebp-4] 1 +
js loc_102788E  +
lea eax [ebp-30h] +
push eax  +
call ds:VariantInit  +
push 0Bh  +
pop eax  +
mov [ebp-30h] ax +
sub esp 10h +
or eax 0FFFFFFFFh +
mov [ebp-28h] ax +
mov eax [ebp-10h] +
mov ecx [eax] +
mov edi esp +
push dword ptr [ebp-14h]  +
lea esi [ebp-30h] +
movs   +
movs   +
movs   +
push eax  +
movs   +
call dword ptr [ecx+98h]  +
mov esi eax +
xor edi edi +
cmp esi edi +
jl loc_1027858  +
mov [ebp+8] edi +
mov eax [ebp-10h] +
mov ecx [eax] +
lea edx [ebp+8] +
push edx  +
push eax  +
mov byte ptr [ebp-4] 2 +
call dword ptr [ecx+20h]  +
mov esi eax +
cmp esi edi +
jl loc_102780F  +
mov [ebp+24h] edi +
mov eax [ebp+8] +
mov ecx [eax] +
lea edx [ebp+24h] +
push edx  +
push offset dword_100886C  +
push eax  +
mov byte ptr [ebp-4] 3 +
call dword ptr [ecx]  +
mov esi eax +
cmp esi edi +
jl loc_10277C6  +
mov [ebp-18h] edi +
mov eax [ebp+24h] +
mov ecx [eax] +
lea edx [ebp-18h] +
push edx  +
push dword ptr [ebp+20h]  +
mov edx [ebp+18h] +
push dword ptr [ebp+1Ch]  +
neg edx  +
sbb edx edx +
push edx  +
mov edx [ebp+14h] +
neg edx  +
sbb edx edx +
push edx  +
push dword ptr [ebp+10h]  +
mov byte ptr [ebp-4] 4 +
push dword ptr [ebp+0Ch]  +
push eax  +
call dword ptr [ecx+30h]  +
mov esi eax +
cmp esi 80040D52h +
jnz loc_1027780  +
xor esi esi +
cmp esi edi +
jge loc_10277B3  +
push edi  +
lea ecx [ebp-20h] +
call sub_1026F3F  +
push 7D9h  +
lea eax [ebp-20h] +
push eax  +
mov ecx ebx +
mov byte ptr [ebp-4] 5 +
call sub_102629D  +
push dword ptr [ebp+10h]  +
mov ecx ebx +
call sub_1026C01  +
lea ecx [ebp-20h] +
call sub_10261EA  +
mov eax [ebp-18h] +
mov byte ptr [ebp-4] 3 +
cmp eax edi +
jz loc_10277FC  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_10277FC  +
push edi  +
lea ecx [ebp-20h] +
call sub_1026F3F  +
push 7D0h  +
lea eax [ebp-20h] +
push eax  +
mov ecx ebx +
mov byte ptr [ebp-4] 6 +
call sub_102629D  +
mov eax [ebx] +
push 0FFFFFFFFh  +
push dword ptr [ebx+0Ch]  +
mov ecx ebx +
push offset a106  +
call dword ptr [eax+10h]  +
lea ecx [ebp-20h] +
call sub_10261EA  +
mov eax [ebp+24h] +
mov byte ptr [ebp-4] 2 +
cmp eax edi +
jz loc_1027845  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_1027845  +
push edi  +
lea ecx [ebp-20h] +
call sub_1026F3F  +
push 7D0h  +
lea eax [ebp-20h] +
push eax  +
mov ecx ebx +
mov byte ptr [ebp-4] 7 +
call sub_102629D  +
mov eax [ebx] +
push 0FFFFFFFFh  +
push dword ptr [ebx+0Ch]  +
mov ecx ebx +
push offset a107  +
call dword ptr [eax+10h]  +
lea ecx [ebp-20h] +
call sub_10261EA  +
mov eax [ebp+8] +
mov byte ptr [ebp-4] 1 +
cmp eax edi +
jz loc_102788E  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_102788E  +
push edi  +
lea ecx [ebp-20h] +
call sub_1026F3F  +
push 7D0h  +
lea eax [ebp-20h] +
push eax  +
mov ecx ebx +
mov byte ptr [ebp-4] 8 +
call sub_102629D  +
mov eax [ebx] +
push 0FFFFFFFFh  +
push dword ptr [ebx+0Ch]  +
mov ecx ebx +
push offset a108  +
call dword ptr [eax+10h]  +
lea ecx [ebp-20h] +
call sub_10261EA  +
push dword ptr [ebp-14h]  +
call ds:SysFreeString  +
mov eax [ebp-10h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
test eax eax +
jz loc_10278A8  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax esi +
call sub_10015C0  +
retn 20h  +
***
call sub_10015E0  +
xor ebx ebx +
mov [ebp-14h] ebx +
mov esi [ebp+14h] +
push esi  +
lea eax [ebp-14h] +
push eax  +
push dword ptr [ebp+8]  +
mov [ebp-4] ebx +
call sub_1026FBC  +
cmp eax ebx +
mov [ebp+14h] eax +
jl loc_1027A5E  +
mov [ebp-10h] ebx +
mov eax [ebp-14h] +
mov ecx [eax] +
lea edx [ebp-10h] +
push edx  +
push eax  +
mov byte ptr [ebp-4] 1 +
call dword ptr [ecx+20h]  +
cmp eax ebx +
mov [ebp+14h] eax +
jl loc_1027A14  +
mov [ebp+8] ebx +
mov eax [ebp-10h] +
mov ecx [eax] +
lea edx [ebp+8] +
push edx  +
push offset dword_100886C  +
push eax  +
mov byte ptr [ebp-4] 2 +
call dword ptr [ecx]  +
cmp eax ebx +
mov [ebp+14h] eax +
jl loc_10279C7  +
mov edi [ebp+10h] +
mov eax [ebp+8] +
mov ecx [eax] +
push edi  +
push dword ptr [ebp+0Ch]  +
push eax  +
call dword ptr [ecx+20h]  +
mov [ebp+14h] eax +
cmp eax 1 +
jnz loc_1027995  +
cmp [edi] ebx +
jnz loc_1027A01  +
mov dword ptr [ebp+14h] 80004005h +
cmp [ebp+14h] ebx +
jge loc_1027A01  +
cmp esi ebx +
jz loc_1027A01  +
push ebx  +
lea ecx [ebp-1Ch] +
call sub_1026F3F  +
push 7DAh  +
lea eax [ebp-1Ch] +
push eax  +
mov ecx esi +
mov byte ptr [ebp-4] 3 +
call sub_102629D  +
push dword ptr [ebp+0Ch]  +
mov ecx esi +
call sub_1026C01  +
jmp loc_10279F9  +
cmp esi ebx +
jz loc_1027A01  +
push ebx  +
lea ecx [ebp-1Ch] +
call sub_1026F3F  +
push 7D0h  +
lea eax [ebp-1Ch] +
push eax  +
mov ecx esi +
mov byte ptr [ebp-4] 4 +
call sub_102629D  +
mov eax [esi] +
push 0FFFFFFFFh  +
push dword ptr [esi+0Ch]  +
mov ecx esi +
push offset a109  +
call dword ptr [eax+10h]  +
lea ecx [ebp-1Ch] +
call sub_10261EA  +
mov eax [ebp+8] +
mov byte ptr [ebp-4] 1 +
cmp eax ebx +
jz loc_1027A4E  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_1027A4E  +
cmp esi ebx +
jz loc_1027A4E  +
push ebx  +
lea ecx [ebp-1Ch] +
call sub_1026F3F  +
push 7D0h  +
lea eax [ebp-1Ch] +
push eax  +
mov ecx esi +
mov byte ptr [ebp-4] 5 +
call sub_102629D  +
mov eax [esi] +
push 0FFFFFFFFh  +
push dword ptr [esi+0Ch]  +
mov ecx esi +
push offset a110  +
call dword ptr [eax+10h]  +
lea ecx [ebp-1Ch] +
call sub_10261EA  +
mov eax [ebp-10h] +
mov [ebp-4] bl +
cmp eax ebx +
jz loc_1027A5E  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-14h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
cmp eax ebx +
jz loc_1027A6F  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+14h] +
call sub_10015C0  +
retn 10h  +
***
call sub_10015E0  +
xor ebx ebx +
mov [ebp-10h] ebx +
mov esi [ebp+14h] +
push esi  +
lea eax [ebp-10h] +
push eax  +
push dword ptr [ebp+0Ch]  +
mov [ebp-4] ebx +
push dword ptr [ebp+8]  +
call sub_1027905  +
mov edi eax +
cmp edi ebx +
jl loc_1027B8D  +
mov [ebp+14h] ebx +
mov eax [ebp-10h] +
mov ecx [eax] +
lea edx [ebp+14h] +
push edx  +
push eax  +
mov byte ptr [ebp-4] 1 +
call dword ptr [ecx+28h]  +
mov edi eax +
cmp edi ebx +
jl loc_1027B47  +
mov [ebp+0Ch] ebx +
mov eax [ebp+14h] +
mov ecx [eax] +
lea edx [ebp+0Ch] +
push edx  +
push 1  +
push dword ptr [ebp+10h]  +
mov byte ptr [ebp-4] 2 +
push eax  +
call dword ptr [ecx+28h]  +
mov edi eax +
cmp edi 80040D02h +
jnz loc_1027B01  +
xor edi edi +
cmp edi ebx +
jge loc_1027B34  +
push ebx  +
lea ecx [ebp-18h] +
call sub_1026F3F  +
push 7D8h  +
lea eax [ebp-18h] +
push eax  +
mov ecx esi +
mov byte ptr [ebp-4] 3 +
call sub_102629D  +
push dword ptr [ebp+10h]  +
mov ecx esi +
call sub_1026C01  +
lea ecx [ebp-18h] +
call sub_10261EA  +
mov eax [ebp+0Ch] +
mov byte ptr [ebp-4] 1 +
cmp eax ebx +
jz loc_1027B7D  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_1027B7D  +
push ebx  +
lea ecx [ebp-18h] +
call sub_1026F3F  +
push 7D0h  +
lea eax [ebp-18h] +
push eax  +
mov ecx esi +
mov byte ptr [ebp-4] 4 +
call sub_102629D  +
mov eax [esi] +
push 0FFFFFFFFh  +
push dword ptr [esi+0Ch]  +
mov ecx esi +
push offset a120  +
call dword ptr [eax+10h]  +
lea ecx [ebp-18h] +
call sub_10261EA  +
mov eax [ebp+14h] +
mov [ebp-4] bl +
cmp eax ebx +
jz loc_1027B8D  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-10h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
cmp eax ebx +
jz loc_1027B9E  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax edi +
call sub_10015C0  +
retn 10h  +
***
call sub_10015E0  +
xor ebx ebx +
mov [ebp-10h] ebx +
mov esi [ebp+14h] +
push esi  +
lea eax [ebp-10h] +
push eax  +
push dword ptr [ebp+0Ch]  +
mov [ebp-4] ebx +
push dword ptr [ebp+8]  +
call sub_1027905  +
mov edi eax +
cmp edi ebx +
jl loc_1027CB1  +
mov [ebp+14h] ebx +
mov eax [ebp-10h] +
mov ecx [eax] +
lea edx [ebp+14h] +
push edx  +
push eax  +
mov byte ptr [ebp-4] 1 +
call dword ptr [ecx+24h]  +
mov edi eax +
cmp edi ebx +
jl loc_1027C6B  +
mov [ebp+0Ch] ebx +
mov eax [ebp+14h] +
mov ecx [eax] +
lea edx [ebp+0Ch] +
push edx  +
push 1  +
push dword ptr [ebp+10h]  +
mov byte ptr [ebp-4] 2 +
push eax  +
call dword ptr [ecx+28h]  +
mov edi eax +
cmp edi 80040D02h +
jnz loc_1027C25  +
xor edi edi +
cmp edi ebx +
jge loc_1027C58  +
push ebx  +
lea ecx [ebp-18h] +
call sub_1026F3F  +
push 7D8h  +
lea eax [ebp-18h] +
push eax  +
mov ecx esi +
mov byte ptr [ebp-4] 3 +
call sub_102629D  +
push dword ptr [ebp+10h]  +
mov ecx esi +
call sub_1026C01  +
lea ecx [ebp-18h] +
call sub_10261EA  +
mov eax [ebp+0Ch] +
mov byte ptr [ebp-4] 1 +
cmp eax ebx +
jz loc_1027CA1  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_1027CA1  +
push ebx  +
lea ecx [ebp-18h] +
call sub_1026F3F  +
push 7D0h  +
lea eax [ebp-18h] +
push eax  +
mov ecx esi +
mov byte ptr [ebp-4] 4 +
call sub_102629D  +
mov eax [esi] +
push 0FFFFFFFFh  +
push dword ptr [esi+0Ch]  +
mov ecx esi +
push offset a121  +
call dword ptr [eax+10h]  +
lea ecx [ebp-18h] +
call sub_10261EA  +
mov eax [ebp+14h] +
mov [ebp-4] bl +
cmp eax ebx +
jz loc_1027CB1  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-10h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
cmp eax ebx +
jz loc_1027CC2  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax edi +
call sub_10015C0  +
retn 10h  +
***
call sub_10015E0  +
lea eax [ebp-10h] +
push eax  +
push 0F003Fh  +
xor esi esi +
push esi  +
push offset aSoftwareMicr_0  +
push 80000002h  +
call ds:RegOpenKeyExW  +
push eax  +
call sub_100A7A1  +
mov edi eax +
cmp edi esi +
jl loc_1027D39  +
push 4  +
lea eax [ebp+8] +
push eax  +
push 4  +
push esi  +
push offset aSystemindexnor  +
push dword ptr [ebp-10h]  +
call ds:RegSetValueExW  +
push eax  +
call sub_100A7A1  +
push dword ptr [ebp-10h]  +
mov edi eax +
call ds:RegCloseKey  +
cmp edi esi +
jge loc_1027D71  +
push esi  +
lea ecx [ebp-18h] +
call sub_1026F3F  +
mov [ebp-4] esi +
mov esi [ebp+0Ch] +
push 7D0h  +
lea eax [ebp-18h] +
push eax  +
mov ecx esi +
call sub_102629D  +
mov eax [esi] +
push 0FFFFFFFFh  +
push dword ptr [esi+0Ch]  +
mov ecx esi +
push offset a122  +
call dword ptr [eax+10h]  +
lea ecx [ebp-18h] +
call sub_10261EA  +
mov eax edi +
call sub_10015C0  +
retn 8  +
***
call sub_10015E0  +
and dword ptr [ebp-10h] 0 +
mov esi [ebp+14h] +
and dword ptr [ebp-4] 0 +
push esi  +
lea eax [ebp-10h] +
push eax  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call sub_1027905  +
mov ebx eax +
test ebx ebx +
jl loc_1027E03  +
mov eax [ebp-10h] +
push dword ptr [ebp+10h]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+20h]  +
mov ebx eax +
test ebx ebx +
jge loc_1027E03  +
test esi esi +
jz loc_1027E03  +
push 0  +
lea ecx [ebp-18h] +
call sub_1026F3F  +
push 7D0h  +
lea eax [ebp-18h] +
push eax  +
mov ecx esi +
mov byte ptr [ebp-4] 1 +
call sub_102629D  +
mov eax [esi] +
push 0FFFFFFFFh  +
push dword ptr [esi+0Ch]  +
mov ecx esi +
push offset a125  +
call dword ptr [eax+10h]  +
lea ecx [ebp-18h] +
call sub_10261EA  +
mov eax [ebp-10h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
test eax eax +
jz loc_1027E14  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax ebx +
call sub_10015C0  +
retn 10h  +
***
call sub_10015E0  +
and dword ptr [ebp-10h] 0 +
mov esi [ebp+14h] +
and dword ptr [ebp-4] 0 +
push esi  +
lea eax [ebp-10h] +
push eax  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call sub_1027D89  +
mov ebx eax +
test ebx ebx +
jl loc_1027EA7  +
mov eax [ebp-10h] +
push dword ptr [ebp+10h]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+2Ch]  +
mov ebx eax +
test ebx ebx +
jge loc_1027EA7  +
test esi esi +
jz loc_1027EA7  +
push 0  +
lea ecx [ebp-18h] +
call sub_1026F3F  +
push 7D0h  +
lea eax [ebp-18h] +
push eax  +
mov ecx esi +
mov byte ptr [ebp-4] 1 +
call sub_102629D  +
mov eax [esi] +
push 0FFFFFFFFh  +
push dword ptr [esi+0Ch]  +
mov ecx esi +
push offset a126  +
call dword ptr [eax+10h]  +
lea ecx [ebp-18h] +
call sub_10261EA  +
mov eax [ebp-10h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
test eax eax +
jz loc_1027EB8  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax ebx +
call sub_10015C0  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax [ebp+arg_4] +
mov ecx [eax] +
push esi  +
push eax  +
call dword ptr [ecx+40h]  +
mov esi eax +
test esi esi +
jge loc_1027F0B  +
push 0  +
lea ecx [ebp+var_8] +
call sub_1026F3F  +
mov ecx [ebp+arg_0] +
push 7E6h  +
lea eax [ebp+var_8] +
push eax  +
call sub_102629D  +
lea ecx [ebp+var_8] +
call sub_10261EA  +
mov eax esi +
pop esi  +
leave   +
retn 8  +
***
call sub_1002A3A  +
mov eax [ebp+28h] +
mov edi [ebp+24h] +
mov [ebp-220h] eax +
lea eax [ebp-218h] +
push eax  +
xor ebx ebx +
inc ebx  +
push ebx  +
push 0  +
push dword ptr [ebp+14h]  +
push 0  +
call SHGetFolderPathW  +
mov esi eax +
test esi esi +
jl loc_1027FFB  +
push offset asc_1007D24  +
push 104h  +
lea eax [ebp-218h] +
push eax  +
call sub_100F84F  +
mov esi eax +
test esi esi +
jl loc_1028059  +
push offset aFile  +
lea ecx [ebp-21Ch] +
call sub_100883D  +
and dword ptr [ebp-4] 0 +
mov esi [ebp-21Ch] +
neg esi  +
sbb esi esi +
and esi 7FF8FFF2h +
mov ebx 8007000Eh +
add esi ebx +
js loc_1027FED  +
lea eax [ebp-218h] +
push eax  +
lea ecx [ebp-21Ch] +
call sub_1026B36  +
mov esi [ebp-21Ch] +
neg esi  +
sbb esi esi +
and esi 7FF8FFF2h +
add esi ebx +
js loc_1027FED  +
push dword ptr [ebp-220h]  +
push edi  +
push dword ptr [ebp+20h]  +
push dword ptr [ebp+1Ch]  +
push dword ptr [ebp+18h]  +
push dword ptr [ebp-21Ch]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call sub_10266A9  +
mov esi eax +
push dword ptr [ebp-21Ch]  +
call ds:SysFreeString  +
jmp loc_1028059  +
push 0  +
lea ecx [ebp-224h] +
call sub_1026F3F  +
push 7DFh  +
lea eax [ebp-224h] +
push eax  +
mov ecx edi +
mov [ebp-4] ebx +
call sub_102629D  +
push dword ptr [edi+8]  +
mov ecx edi +
call sub_100FCFC  +
push dword ptr [ebp+14h]  +
mov ecx [edi+0Ch] +
mov edx [edi+8] +
push offset aD  +
sub edx ecx +
push edx  +
lea eax [eax+ecx*2] +
push eax  +
call sub_100A257  +
add esp 10h +
push 0FFFFFFFFh  +
mov ecx edi +
call sub_1010357  +
lea ecx [ebp-224h] +
call sub_10261EA  +
mov eax esi +
call sub_1002A77  +
retn 24h  +
***
call sub_1002A3A  +
mov eax [ebp+8] +
mov esi [ebp+1Ch] +
mov ebx [ebp+20h] +
mov ecx [ebx+0Ch] +
mov edi [ebp+18h] +
mov [ebp-0E5Ch] eax +
mov eax [ebp+28h] +
mov [ebp-0E60h] eax +
mov eax [esi+0Ch] +
cmp ecx eax +
jbe loc_10281B9  +
mov ecx [esi+4] +
push eax  +
push 0  +
lea eax [ebp-0E70h] +
mov [ebp-0E64h] ecx +
push eax  +
mov ecx ebx +
call sub_10034B1  +
push dword ptr [ebp-0E64h]  +
lea ecx [ebp-0E70h] +
call sub_1003503  +
test eax eax +
jnz loc_10281B9  +
push offset aFile  +
lea ecx [ebp-518h] +
call sub_1009D0D  +
mov eax [edi+0Ch] +
mov edi [edi+4] +
push eax  +
push dword ptr [ebp-50Ch]  +
mov eax [ebp-518h] +
push edi  +
lea ecx [ebp-518h] +
mov dword ptr [ebp-4] 1 +
call dword ptr [eax+10h]  +
mov eax [ebp-518h] +
push 0FFFFFFFFh  +
push dword ptr [ebp-50Ch]  +
mov edi offset asc_1007D24 +
push edi  +
lea ecx [ebp-518h] +
call dword ptr [eax+10h]  +
push dword ptr [esi+0Ch]  +
lea eax [ebp-0E7Ch] +
push eax  +
mov ecx ebx +
call sub_10131C3  +
push eax  +
lea ecx [ebp-518h] +
call sub_102631F  +
mov eax [ebp-518h] +
push 0FFFFFFFFh  +
push dword ptr [ebp-50Ch]  +
lea ecx [ebp-518h] +
push edi  +
call dword ptr [eax+10h]  +
push dword ptr [ebp-514h]  +
lea ecx [ebp-0E5Ch] +
call sub_100883D  +
mov esi [ebp-0E5Ch] +
neg esi  +
sbb esi esi +
and esi 7FF8FFF2h +
add esi 8007000Eh +
mov byte ptr [ebp-4] 2 +
js loc_102819E  +
mov eax [ebp-0E60h] +
mov ecx [eax] +
push 0  +
push 0  +
push dword ptr [ebp-0E5Ch]  +
push eax  +
call dword ptr [ecx+0Ch]  +
mov esi eax +
push dword ptr [ebp-0E5Ch]  +
call ds:SysFreeString  +
lea ecx [ebp-518h] +
call sub_10084DE  +
mov eax esi +
jmp loc_102822D  +
mov eax [ebp-0E5Ch] +
cmp byte ptr [eax] 0 +
jnz loc_102822B  +
mov esi [esi+4] +
mov ebx [ebx+4] +
push esi  +
push ebx  +
push offset aFolderSSystemp  +
lea eax [ebp-484h] +
push 23Ah  +
push eax  +
call sub_100A257  +
add esp 14h +
push dword_104A1B0  +
lea ecx [ebp-0E58h] +
call sub_100A2FC  +
and dword ptr [ebp-4] 0 +
push 0  +
lea eax [ebp-484h] +
push eax  +
lea eax [ebp-0E58h] +
push 800003F6h  +
push eax  +
call sub_102636B  +
mov eax [ebp-0E5Ch] +
add esp 10h +
lea ecx [ebp-0E58h] +
mov byte ptr [eax] 1 +
call sub_100C0D9  +
xor eax eax +
call sub_1002A77  +
retn 24h  +
***
call sub_1002A3A  +
mov eax [ebp+18h] +
mov esi [ebp+14h] +
lea ecx [ebp-644h] +
mov [ebp-0F98h] eax +
xor ebx ebx +
xor edi edi +
call sub_100A0C7  +
mov [ebp-4] ebx +
mov dword ptr [ebp-0FA0h] offset off_1002BE4 +
mov [ebp-0F9Ch] ebx +
lea eax [ebp-0F9Ch] +
push eax  +
push 8  +
mov byte ptr [ebp-4] 1 +
call ds:GetCurrentProcess  +
push eax  +
call ds:OpenProcessToken  +
test eax eax +
jnz loc_1028327  +
call ds:__imp_GetLastError  +
push eax  +
call sub_100A7A1  +
push ebx  +
lea ecx [ebp-0F94h] +
mov edi eax +
call sub_1026F3F  +
push 7D0h  +
lea eax [ebp-0F94h] +
push eax  +
mov ecx esi +
mov byte ptr [ebp-4] 2 +
call sub_102629D  +
mov eax [esi] +
push 0FFFFFFFFh  +
push dword ptr [esi+0Ch]  +
mov ecx esi +
push offset a142  +
call dword ptr [eax+10h]  +
lea ecx [ebp-0F94h] +
mov byte ptr [ebp-4] 1 +
call sub_10261EA  +
xor eax eax +
push 208h  +
mov [ebp-21Ch] ax +
lea eax [ebp-21Ah] +
push ebx  +
push eax  +
call memset  +
add esp 0Ch +
cmp edi ebx +
mov dword ptr [ebp-0F8Ch] 105h +
jl loc_10283FA  +
lea eax [ebp-0F8Ch] +
push eax  +
lea eax [ebp-21Ch] +
push eax  +
push dword ptr [ebp-0F9Ch]  +
call GetUserProfileDirectoryW  +
test eax eax +
jz loc_10283C2  +
push 0FFFFFFFFh  +
push ebx  +
lea eax [ebp-21Ch] +
push eax  +
mov eax [ebp-644h] +
lea ecx [ebp-644h] +
call dword ptr [eax+10h]  +
mov eax [ebp-638h] +
cmp eax ebx +
jbe loc_10283FA  +
mov ecx [ebp-640h] +
movzx eax word ptr [ecx+eax*2-2] +
push eax  +
call sub_1003A20  +
test eax eax +
jz loc_10283FA  +
mov eax [ebp-638h] +
dec eax  +
push eax  +
lea ecx [ebp-644h] +
call sub_100A108  +
jmp loc_10283FA  +
call ds:__imp_GetLastError  +
push eax  +
call sub_100A7A1  +
push ebx  +
lea ecx [ebp-0F94h] +
mov edi eax +
call sub_1026F3F  +
push 7DCh  +
lea eax [ebp-0F94h] +
push eax  +
mov ecx esi +
call sub_102629D  +
lea ecx [ebp-0F94h] +
call sub_10261EA  +
push ebx  +
lea ecx [ebp-0FA0h] +
mov dword ptr [ebp-0FA0h] offset off_1002BE4 +
call sub_1002CC0  +
lea ecx [ebp-5B0h] +
call sub_100A0C7  +
xor eax eax +
push 208h  +
mov [ebp-21Ch] ax +
lea eax [ebp-21Ah] +
push ebx  +
push eax  +
mov byte ptr [ebp-4] 3 +
call memset  +
add esp 0Ch +
cmp edi ebx +
mov dword ptr [ebp-0F8Ch] 105h +
jl loc_10284EC  +
lea eax [ebp-0F8Ch] +
push eax  +
lea eax [ebp-21Ch] +
push eax  +
call GetProfilesDirectoryW  +
test eax eax +
jz loc_10284B4  +
push 0FFFFFFFFh  +
push ebx  +
lea eax [ebp-21Ch] +
push eax  +
mov eax [ebp-5B0h] +
lea ecx [ebp-5B0h] +
call dword ptr [eax+10h]  +
mov eax [ebp-5A4h] +
cmp eax ebx +
jbe loc_10284EC  +
mov ecx [ebp-5ACh] +
movzx eax word ptr [ecx+eax*2-2] +
push eax  +
call sub_1003A20  +
test eax eax +
jz loc_10284EC  +
mov eax [ebp-5A4h] +
dec eax  +
push eax  +
lea ecx [ebp-5B0h] +
call sub_100A108  +
jmp loc_10284EC  +
call ds:__imp_GetLastError  +
push eax  +
call sub_100A7A1  +
push ebx  +
lea ecx [ebp-0F94h] +
mov edi eax +
call sub_1026F3F  +
push 7DBh  +
lea eax [ebp-0F94h] +
push eax  +
mov ecx esi +
call sub_102629D  +
lea ecx [ebp-0F94h] +
call sub_10261EA  +
cmp dword_104A04C 7D6h +
mov [ebp-0F85h] bl +
jl loc_10285B7  +
cmp edi ebx +
jl loc_10285B0  +
xor eax eax +
push 208h  +
mov [ebp-21Ch] ax +
lea eax [ebp-21Ah] +
push ebx  +
push eax  +
call memset  +
add esp 0Ch +
lea eax [ebp-21Ch] +
push eax  +
push 1  +
push ebx  +
push 401Ch  +
push ebx  +
call SHGetFolderPathW  +
cmp eax ebx +
jl loc_10285B0  +
lea eax [ebp-21Ch] +
push eax  +
lea ecx [ebp-51Ch] +
call sub_1009D0D  +
mov eax [ebp-51Ch] +
push 0FFFFFFFFh  +
push dword ptr [ebp-510h]  +
lea ecx [ebp-51Ch] +
push offset aTemp_0  +
mov byte ptr [ebp-4] 4 +
call dword ptr [eax+0Ch]  +
push dword ptr [ebp-0F98h]  +
lea eax [ebp-51Ch] +
push esi  +
push eax  +
lea eax [ebp-644h] +
push eax  +
lea eax [ebp-5B0h] +
push eax  +
push dword ptr [ebp+10h]  +
lea eax [ebp-0F85h] +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push eax  +
call sub_1028068  +
lea ecx [ebp-51Ch] +
call sub_10084DE  +
xor edi edi +
jmp loc_1028972  +
cmp edi ebx +
mov dword ptr [ebp-0FB8h] 1Ah +
mov dword ptr [ebp-0FB4h] 21h +
mov dword ptr [ebp-0FB0h] 13h +
mov dword ptr [ebp-0FACh] 1Bh +
mov dword ptr [ebp-0FA8h] 9 +
mov dword ptr [ebp-0FA4h] 15h +
mov [ebp-0F8Ch] ebx +
jl loc_1028972  +
cmp dword ptr [ebp-0F8Ch] 6 +
jnb loc_1028730  +
xor eax eax +
push 208h  +
mov [ebp-21Ch] ax +
lea eax [ebp-21Ah] +
push ebx  +
push eax  +
call memset  +
mov eax [ebp-0F8Ch] +
mov eax [ebp+eax*4-0FB8h] +
add esp 0Ch +
lea ecx [ebp-21Ch] +
push ecx  +
push 1  +
push ebx  +
or eax 4000h +
push eax  +
push ebx  +
call SHGetFolderPathW  +
mov edi eax +
cmp edi ebx +
jl loc_10286AA  +
lea eax [ebp-21Ch] +
push eax  +
lea ecx [ebp-51Ch] +
call sub_1009D0D  +
push dword ptr [ebp-0F98h]  +
mov byte ptr [ebp-4] 5 +
push esi  +
push eax  +
lea eax [ebp-644h] +
push eax  +
lea eax [ebp-5B0h] +
push eax  +
push dword ptr [ebp+10h]  +
lea eax [ebp-0F85h] +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push eax  +
call sub_1028068  +
lea ecx [ebp-51Ch] +
mov edi eax +
mov byte ptr [ebp-4] 3 +
call sub_10084DE  +
jmp loc_1028722  +
push ebx  +
lea ecx [ebp-0F94h] +
call sub_1026F3F  +
push 7DFh  +
lea eax [ebp-0F94h] +
push eax  +
mov ecx esi +
mov byte ptr [ebp-4] 6 +
call sub_102629D  +
push dword ptr [esi+8]  +
mov ecx esi +
call sub_100FCFC  +
mov edx [esi+0Ch] +
mov ecx [esi+8] +
mov [ebp-0F9Ch] eax +
mov eax [ebp-0F8Ch] +
push dword ptr [ebp+eax*4-0FB8h]  +
mov eax [ebp-0F9Ch] +
push offset aD  +
sub ecx edx +
push ecx  +
lea eax [eax+edx*2] +
push eax  +
call sub_100A257  +
add esp 10h +
push 0FFFFFFFFh  +
mov ecx esi +
call sub_1010357  +
lea ecx [ebp-0F94h] +
mov byte ptr [ebp-4] 3 +
call sub_10261EA  +
inc dword ptr [ebp-0F8Ch]  +
cmp edi ebx +
jge loc_1028601  +
cmp edi ebx +
jl loc_1028972  +
push offset aFile  +
lea ecx [ebp-51Ch] +
call sub_1009D0D  +
push dword ptr [ebp-5A4h]  +
mov eax [ebp-51Ch] +
push dword ptr [ebp-510h]  +
lea ecx [ebp-51Ch] +
push dword ptr [ebp-5ACh]  +
mov byte ptr [ebp-4] 7 +
call dword ptr [eax+10h]  +
mov eax [ebp-51Ch] +
push 0FFFFFFFFh  +
push dword ptr [ebp-510h]  +
lea ecx [ebp-51Ch] +
push offset aUserdata  +
call dword ptr [eax+10h]  +
push dword ptr [ebp-518h]  +
lea ecx [ebp-0F8Ch] +
call sub_100883D  +
mov edi [ebp-0F8Ch] +
neg edi  +
sbb edi edi +
and edi 7FF8FFF2h +
add edi 8007000Eh +
mov byte ptr [ebp-4] 8 +
js loc_10287CC  +
mov eax [ebp-0F98h] +
mov ecx [eax] +
push ebx  +
push ebx  +
push dword ptr [ebp-0F8Ch]  +
push eax  +
call dword ptr [ecx+0Ch]  +
mov edi eax +
push dword ptr [ebp-0F8Ch]  +
call ds:SysFreeString  +
lea ecx [ebp-51Ch] +
mov byte ptr [ebp-4] 3 +
call sub_10084DE  +
cmp edi ebx +
jl loc_1028972  +
lea ecx [ebp-51Ch] +
call sub_100A0C7  +
xor eax eax +
push 208h  +
mov [ebp-21Ch] ax +
lea eax [ebp-21Ah] +
push ebx  +
push eax  +
mov byte ptr [ebp-4] 9 +
call memset  +
add esp 0Ch +
lea eax [ebp-21Ch] +
push eax  +
push 1  +
push ebx  +
push 401Ch  +
push ebx  +
call SHGetFolderPathW  +
mov edi eax +
cmp edi ebx +
jl loc_1028928  +
push 0FFFFFFFFh  +
push ebx  +
lea eax [ebp-21Ch] +
push eax  +
mov eax [ebp-51Ch] +
lea ecx [ebp-51Ch] +
call dword ptr [eax+10h]  +
mov eax [ebp-510h] +
cmp eax ebx +
jnz loc_1028864  +
or eax 0FFFFFFFFh +
jmp loc_1028873  +
add eax 0FFFFFFFEh +
push eax  +
lea ecx [ebp-51Ch] +
call sub_102625D  +
cmp eax [ebp-638h] +
jle loc_10288BF  +
push eax  +
lea ecx [ebp-51Ch] +
call sub_100A108  +
push dword ptr [ebp-0F98h]  +
lea eax [ebp-51Ch] +
push esi  +
push eax  +
lea eax [ebp-644h] +
push eax  +
lea eax [ebp-5B0h] +
push eax  +
push dword ptr [ebp+10h]  +
lea eax [ebp-0F85h] +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push eax  +
call sub_1028068  +
mov edi eax +
jmp loc_1028967  +
cmp [ebp-0F85h] bl +
jnz loc_1028967  +
push dword ptr [ebp-518h]  +
lea eax [ebp-488h] +
push offset aSpecialfolderS  +
push 136h  +
push eax  +
call sub_100A257  +
add esp 10h +
push dword_104A1B0  +
lea ecx [ebp-0F84h] +
call sub_100A2FC  +
push ebx  +
lea eax [ebp-488h] +
push eax  +
lea eax [ebp-0F84h] +
push 800003F6h  +
push eax  +
mov byte ptr [ebp-4] 0Ah +
call sub_102636B  +
add esp 10h +
lea ecx [ebp-0F84h] +
call sub_100C0D9  +
jmp loc_1028967  +
push ebx  +
lea ecx [ebp-0F94h] +
call sub_1026F3F  +
push 7DFh  +
lea eax [ebp-0F94h] +
push eax  +
mov ecx esi +
mov byte ptr [ebp-4] 0Bh +
call sub_102629D  +
mov eax [esi] +
push 0FFFFFFFFh  +
push dword ptr [esi+0Ch]  +
mov ecx esi +
push offset aCsidl_local_ap  +
call dword ptr [eax+10h]  +
lea ecx [ebp-0F94h] +
call sub_10261EA  +
lea ecx [ebp-51Ch] +
call sub_10084DE  +
lea ecx [ebp-5B0h] +
call sub_10084DE  +
lea ecx [ebp-644h] +
call sub_10084DE  +
mov eax edi +
call sub_1002A77  +
retn 14h  +
***
call sub_10015E0  +
and dword ptr [ebp-10h] 0 +
mov esi [ebp+14h] +
and dword ptr [ebp-4] 0 +
push esi  +
lea eax [ebp-10h] +
push eax  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call sub_1027D89  +
mov ebx eax +
test ebx ebx +
jl loc_1028A8F  +
mov eax [ebp-10h] +
push dword ptr [ebp+10h]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+30h]  +
mov ebx eax +
test ebx ebx +
jge loc_1028A8F  +
test esi esi +
jz loc_1028A8F  +
push 0  +
lea ecx [ebp-18h] +
call sub_1026F3F  +
push 7D0h  +
lea eax [ebp-18h] +
push eax  +
mov ecx esi +
mov byte ptr [ebp-4] 1 +
call sub_102629D  +
mov eax [esi] +
push 0FFFFFFFFh  +
push dword ptr [esi+0Ch]  +
mov ecx esi +
push offset a143  +
call dword ptr [eax+10h]  +
lea ecx [ebp-18h] +
call sub_10261EA  +
mov eax [ebp-10h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
test eax eax +
jz loc_1028AA0  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax ebx +
call sub_10015C0  +
retn 10h  +
***
call sub_10015E0  +
xor ebx ebx +
mov [ebp-10h] ebx +
mov esi [ebp+10h] +
push esi  +
lea eax [ebp-10h] +
push eax  +
push dword ptr [ebp+0Ch]  +
mov [ebp-4] ebx +
push dword ptr [ebp+8]  +
call sub_1028A15  +
mov edi eax +
cmp edi ebx +
jl loc_1028CB7  +
mov [ebp-14h] ebx +
mov eax [ebp-10h] +
mov ecx [eax] +
lea edx [ebp-14h] +
push edx  +
push eax  +
mov byte ptr [ebp-4] 1 +
call dword ptr [ecx+20h]  +
mov edi eax +
cmp edi ebx +
jl loc_1028C71  +
lea eax [ebp-34h] +
push eax  +
call ds:VariantInit  +
mov [ebp+8] ebx +
mov eax [ebp-14h] +
mov ecx [eax] +
lea edx [ebp+8] +
push edx  +
push offset dword_1028CFC  +
push eax  +
mov byte ptr [ebp-4] 2 +
call dword ptr [ecx]  +
mov edi eax +
cmp edi ebx +
jge loc_1028B6B  +
push ebx  +
lea ecx [ebp-1Ch] +
call sub_1026F3F  +
push 7D0h  +
lea eax [ebp-1Ch] +
push eax  +
mov ecx esi +
mov byte ptr [ebp-4] 3 +
call sub_102629D  +
mov eax [esi] +
push 0FFFFFFFFh  +
push dword ptr [esi+0Ch]  +
mov ecx esi +
push offset a144  +
call dword ptr [eax+10h]  +
lea ecx [ebp-1Ch] +
call sub_10261EA  +
jmp loc_1028C5E  +
mov eax [ebp+8] +
mov ecx [eax] +
push ebx  +
lea edx [ebp-34h] +
push edx  +
push 1  +
push eax  +
call dword ptr [ecx+0Ch]  +
mov edi eax +
cmp edi ebx +
jnz loc_1028C5E  +
mov [ebp+0Ch] ebx +
mov eax [ebp-2Ch] +
mov ecx [eax] +
lea edx [ebp+0Ch] +
push edx  +
push offset dword_1028CE4  +
push eax  +
mov byte ptr [ebp-4] 4 +
call dword ptr [ecx]  +
mov edi eax +
cmp edi ebx +
jl loc_1028C05  +
mov [ebp+10h] ebx +
mov eax [ebp+0Ch] +
mov ecx [eax] +
lea edx [ebp+10h] +
push edx  +
push eax  +
mov byte ptr [ebp-4] 5 +
call dword ptr [ecx+1Ch]  +
mov edi eax +
cmp edi ebx +
jl loc_1028BCB  +
mov eax [ebp-10h] +
push dword ptr [ebp+10h]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+28h]  +
jmp loc_1028BFA  +
push ebx  +
lea ecx [ebp-1Ch] +
call sub_1026F3F  +
push 7E4h  +
lea eax [ebp-1Ch] +
push eax  +
mov ecx esi +
mov byte ptr [ebp-4] 6 +
call sub_102629D  +
push dword ptr [ebp+10h]  +
mov ecx esi +
call sub_1026C01  +
lea ecx [ebp-1Ch] +
call sub_10261EA  +
push dword ptr [ebp+10h]  +
call ds:SysFreeString  +
jmp loc_1028C3B  +
push ebx  +
lea ecx [ebp-24h] +
call sub_1026F3F  +
push 7D0h  +
lea eax [ebp-24h] +
push eax  +
mov ecx esi +
mov byte ptr [ebp-4] 7 +
call sub_102629D  +
mov eax [esi] +
push 0FFFFFFFFh  +
push dword ptr [esi+0Ch]  +
mov ecx esi +
push offset a145  +
call dword ptr [eax+10h]  +
lea ecx [ebp-24h] +
call sub_10261EA  +
lea eax [ebp-34h] +
push eax  +
call ds:VariantClear  +
mov eax [ebp+0Ch] +
mov byte ptr [ebp-4] 2 +
cmp eax ebx +
jz loc_1028C56  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
cmp edi ebx +
jge loc_1028B6B  +
mov eax [ebp+8] +
mov byte ptr [ebp-4] 1 +
cmp eax ebx +
jz loc_1028CA7  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_1028CA7  +
push ebx  +
lea ecx [ebp-24h] +
call sub_1026F3F  +
push 7D0h  +
lea eax [ebp-24h] +
push eax  +
mov ecx esi +
mov byte ptr [ebp-4] 8 +
call sub_102629D  +
mov eax [esi] +
push 0FFFFFFFFh  +
push dword ptr [esi+0Ch]  +
mov ecx esi +
push offset a146  +
call dword ptr [eax+10h]  +
lea ecx [ebp-24h] +
call sub_10261EA  +
mov eax [ebp-14h] +
mov [ebp-4] bl +
cmp eax ebx +
jz loc_1028CB7  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-10h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
cmp eax ebx +
jz loc_1028CC8  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax edi +
call sub_10015C0  +
retn 0Ch  +
***
call sub_10015E0  +
and dword ptr [ebp-10h] 0 +
mov esi [ebp+14h] +
and dword ptr [ebp-4] 0 +
push esi  +
lea eax [ebp-10h] +
push eax  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call sub_1028A15  +
mov ebx eax +
test ebx ebx +
jl loc_1028D8C  +
mov edx [ebp+10h] +
mov eax [ebp-10h] +
mov ecx [eax] +
neg edx  +
sbb edx edx +
push edx  +
push eax  +
call dword ptr [ecx+34h]  +
mov ebx eax +
test ebx ebx +
jge loc_1028D8C  +
push 0  +
lea ecx [ebp-18h] +
call sub_1026F3F  +
push 7D0h  +
lea eax [ebp-18h] +
push eax  +
mov ecx esi +
mov byte ptr [ebp-4] 1 +
call sub_102629D  +
mov eax [esi] +
push 0FFFFFFFFh  +
push dword ptr [esi+0Ch]  +
mov ecx esi +
push offset a147  +
call dword ptr [eax+10h]  +
lea ecx [ebp-18h] +
call sub_10261EA  +
mov eax [ebp-10h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
test eax eax +
jz loc_1028D9D  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax ebx +
call sub_10015C0  +
retn 10h  +
***
call sub_10015E0  +
xor ebx ebx +
mov [ebp-10h] ebx +
push dword ptr [ebp+18h]  +
lea eax [ebp-10h] +
push eax  +
push dword ptr [ebp+0Ch]  +
mov [ebp-4] ebx +
push dword ptr [ebp+8]  +
call sub_1027E2D  +
mov esi eax +
cmp esi ebx +
jl loc_1028E5D  +
mov [ebp+0Ch] ebx +
mov eax [ebp-10h] +
mov ecx [eax] +
lea edx [ebp+0Ch] +
push edx  +
mov edx [ebp+14h] +
neg edx  +
sbb edx edx +
push edx  +
push dword ptr [ebp+10h]  +
mov byte ptr [ebp-4] 1 +
push eax  +
call dword ptr [ecx+24h]  +
mov esi eax +
cmp esi 80040D02h +
jz loc_1028E16  +
and eax 0FFFFh +
cmp eax 0B7h +
jnz loc_1028E18  +
xor esi esi +
cmp esi ebx +
jge loc_1028E4D  +
push ebx  +
lea ecx [ebp-18h] +
call sub_1026F3F  +
mov ecx [ebp+18h] +
push 7E5h  +
lea eax [ebp-18h] +
push eax  +
mov byte ptr [ebp-4] 2 +
call sub_102629D  +
push dword ptr [ebp+10h]  +
mov ecx [ebp+18h] +
call sub_1026C01  +
lea ecx [ebp-18h] +
call sub_10261EA  +
mov eax [ebp+0Ch] +
mov [ebp-4] bl +
cmp eax ebx +
jz loc_1028E5D  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-10h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
cmp eax ebx +
jz loc_1028E6E  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax esi +
call sub_10015C0  +
retn 14h  +
***
call sub_1002A3A  +
mov eax [ebp+10h] +
mov ebx [ebp+0Ch] +
mov edi [ebp+8] +
mov ecx [ebp+18h] +
mov [ebp-6E0h] eax +
mov eax [ebp+14h] +
push eax  +
push ebx  +
push edi  +
mov [ebp-6C4h] edi +
mov [ebp-6D4h] ebx +
mov [ebp-6CCh] eax +
mov [ebp-6C8h] ecx +
call sub_1028AB9  +
mov esi eax +
test esi esi +
jl loc_1028F1F  +
push dword ptr [ebp-6CCh]  +
push 0  +
push ebx  +
push edi  +
call sub_1028D11  +
mov esi eax +
test esi esi +
jl loc_1028F1F  +
lea eax [ebp-6D5h] +
push eax  +
call sub_10265F5  +
mov esi eax +
test esi esi +
jl loc_1028F1F  +
and dword ptr [ebp-6C0h] 0 +
lea eax [ebp-6C0h] +
push eax  +
push ebx  +
push edi  +
call sub_103047C  +
test eax eax +
jge loc_1028F1F  +
cmp dword ptr [ebp-6C0h] 0 +
jbe loc_1028F1F  +
push dword ptr [ebp-6CCh]  +
push ebx  +
push edi  +
call sub_1028AB9  +
mov esi eax +
xor eax eax +
cmp dword_104A04C 7D6h +
push offset aLocalhost  +
setnl al  +
lea ecx [ebp-6D0h] +
mov [ebp-6DCh] eax +
call sub_100883D  +
and dword ptr [ebp-4] 0 +
mov ebx 8007000Eh +
test esi esi +
jl loc_1028F81  +
mov esi [ebp-6D0h] +
neg esi  +
sbb esi esi +
and esi 7FF8FFF2h +
add esi ebx +
js loc_1028F81  +
push dword ptr [ebp-6CCh]  +
push 0FFFFFFFFh  +
push dword ptr [ebp-6D0h]  +
push dword ptr [ebp-6D4h]  +
push edi  +
call sub_1028DB5  +
mov esi eax +
xor eax eax +
mov edi 206h +
push edi  +
push eax  +
mov [ebp-218h] ax +
lea eax [ebp-216h] +
push eax  +
call memset  +
add esp 0Ch +
test esi esi +
jl loc_1028FD5  +
lea eax [ebp-218h] +
push eax  +
push 1  +
push 0  +
push 24h  +
push 0  +
call SHGetFolderPathW  +
mov esi eax +
test esi esi +
jl loc_1028FD5  +
lea eax [ebp-218h] +
push eax  +
call ds:PathAddBackslashW  +
test eax eax +
jnz loc_1028FD5  +
mov esi 80004005h +
xor eax eax +
push edi  +
push eax  +
mov [ebp-420h] ax +
lea eax [ebp-41Eh] +
push eax  +
call memset  +
add esp 0Ch +
test esi esi +
jl loc_1029034  +
lea eax [ebp-6C0h] +
push eax  +
lea eax [ebp-420h] +
push eax  +
mov dword ptr [ebp-6C0h] 104h +
call GetProfilesDirectoryW  +
test eax eax +
jz loc_102902D  +
lea eax [ebp-420h] +
push eax  +
call ds:PathAddBackslashW  +
test eax eax +
jnz loc_1029034  +
mov esi 80004005h +
jmp loc_1029034  +
call sub_100F56E  +
mov esi eax +
mov eax ds:dword_1022458 +
mov [ebp-628h] eax +
mov eax ds:dword_102245C +
push 200h  +
mov [ebp-624h] eax +
lea eax [ebp-620h] +
push 0  +
push eax  +
call memset  +
add esp 0Ch +
test esi esi +
jl loc_1029761  +
mov ax [ebp-218h] +
mov edi offset aFile +
push edi  +
lea ecx [ebp-6BCh] +
mov [ebp-628h] ax +
call sub_1009D0D  +
push 0FFFFFFFFh  +
push dword ptr [ebp-6B0h]  +
lea eax [ebp-628h] +
push eax  +
mov eax [ebp-6BCh] +
lea ecx [ebp-6BCh] +
mov byte ptr [ebp-4] 1 +
call dword ptr [eax+10h]  +
mov eax [ebp-6BCh] +
push 0FFFFFFFFh  +
push dword ptr [ebp-6B0h]  +
lea ecx [ebp-6BCh] +
push offset aWindows_  +
call dword ptr [eax+10h]  +
push dword ptr [ebp-6B8h]  +
lea ecx [ebp-6C0h] +
call sub_100883D  +
mov esi [ebp-6C0h] +
neg esi  +
sbb esi esi +
and esi 7FF8FFF2h +
add esi ebx +
mov byte ptr [ebp-4] 2 +
js loc_1029106  +
mov eax [ebp-6C8h] +
mov ecx [eax] +
push 0  +
push 0  +
push dword ptr [ebp-6C0h]  +
push eax  +
call dword ptr [ecx+0Ch]  +
mov esi eax +
push dword ptr [ebp-6C0h]  +
call ds:SysFreeString  +
lea ecx [ebp-6BCh] +
mov byte ptr [ebp-4] 0 +
call sub_10084DE  +
test esi esi +
jl loc_1029761  +
push edi  +
lea ecx [ebp-6BCh] +
call sub_1009D0D  +
push 0FFFFFFFFh  +
push dword ptr [ebp-6B0h]  +
lea eax [ebp-218h] +
push eax  +
mov eax [ebp-6BCh] +
lea ecx [ebp-6BCh] +
mov byte ptr [ebp-4] 3 +
call dword ptr [eax+10h]  +
mov eax [ebp-6BCh] +
push 0FFFFFFFFh  +
push dword ptr [ebp-6B0h]  +
lea ecx [ebp-6BCh] +
push offset aCsc  +
call dword ptr [eax+10h]  +
push dword ptr [ebp-6B8h]  +
lea ecx [ebp-6C0h] +
call sub_100883D  +
mov esi [ebp-6C0h] +
neg esi  +
sbb esi esi +
and esi 7FF8FFF2h +
add esi ebx +
mov byte ptr [ebp-4] 4 +
js loc_10291B4  +
mov eax [ebp-6C8h] +
mov ecx [eax] +
push 0  +
push 0  +
push dword ptr [ebp-6C0h]  +
push eax  +
call dword ptr [ecx+0Ch]  +
mov esi eax +
push dword ptr [ebp-6C0h]  +
call ds:SysFreeString  +
lea ecx [ebp-6BCh] +
mov byte ptr [ebp-4] 0 +
call sub_10084DE  +
test esi esi +
jl loc_1029761  +
push edi  +
lea ecx [ebp-6BCh] +
call sub_1009D0D  +
push 0FFFFFFFFh  +
push dword ptr [ebp-6B0h]  +
lea eax [ebp-218h] +
push eax  +
mov eax [ebp-6BCh] +
lea ecx [ebp-6BCh] +
mov byte ptr [ebp-4] 5 +
call dword ptr [eax+10h]  +
mov eax [ebp-6BCh] +
push 0FFFFFFFFh  +
push dword ptr [ebp-6B0h]  +
lea ecx [ebp-6BCh] +
push offset aTemp  +
call dword ptr [eax+10h]  +
push dword ptr [ebp-6B8h]  +
lea ecx [ebp-6C0h] +
call sub_100883D  +
mov esi [ebp-6C0h] +
neg esi  +
sbb esi esi +
and esi 7FF8FFF2h +
add esi ebx +
mov byte ptr [ebp-4] 6 +
js loc_1029262  +
mov eax [ebp-6C8h] +
mov ecx [eax] +
push 0  +
push 0  +
push dword ptr [ebp-6C0h]  +
push eax  +
call dword ptr [ecx+0Ch]  +
mov esi eax +
push dword ptr [ebp-6C0h]  +
call ds:SysFreeString  +
lea ecx [ebp-6BCh] +
mov byte ptr [ebp-4] 0 +
call sub_10084DE  +
test esi esi +
jl loc_1029761  +
push edi  +
lea ecx [ebp-6BCh] +
call sub_1009D0D  +
push 0FFFFFFFFh  +
push dword ptr [ebp-6B0h]  +
lea eax [ebp-218h] +
push eax  +
mov eax [ebp-6BCh] +
lea ecx [ebp-6BCh] +
mov byte ptr [ebp-4] 7 +
call dword ptr [eax+10h]  +
mov eax [ebp-6BCh] +
push 0FFFFFFFFh  +
push dword ptr [ebp-6B0h]  +
lea ecx [ebp-6BCh] +
push offset dword_1022454  +
call dword ptr [eax+10h]  +
push dword ptr [ebp-6B8h]  +
lea ecx [ebp-6C0h] +
call sub_100883D  +
mov esi [ebp-6C0h] +
neg esi  +
sbb esi esi +
and esi 7FF8FFF2h +
add esi ebx +
mov byte ptr [ebp-4] 8 +
js loc_1029310  +
mov eax [ebp-6C8h] +
mov ecx [eax] +
push 0  +
push 0  +
push dword ptr [ebp-6C0h]  +
push eax  +
call dword ptr [ecx+0Ch]  +
mov esi eax +
push dword ptr [ebp-6C0h]  +
call ds:SysFreeString  +
lea ecx [ebp-6BCh] +
mov byte ptr [ebp-4] 0 +
call sub_10084DE  +
test esi esi +
jl loc_1029761  +
push edi  +
lea ecx [ebp-6BCh] +
call sub_1009D0D  +
push 0FFFFFFFFh  +
push dword ptr [ebp-6B0h]  +
lea eax [ebp-420h] +
push eax  +
mov eax [ebp-6BCh] +
lea ecx [ebp-6BCh] +
mov byte ptr [ebp-4] 9 +
call dword ptr [eax+10h]  +
mov eax [ebp-6BCh] +
push 0FFFFFFFFh  +
push dword ptr [ebp-6B0h]  +
lea ecx [ebp-6BCh] +
push offset aAppdataLocalTe  +
call dword ptr [eax+10h]  +
push dword ptr [ebp-6B8h]  +
lea ecx [ebp-6C0h] +
call sub_100883D  +
mov esi [ebp-6C0h] +
neg esi  +
sbb esi esi +
and esi 7FF8FFF2h +
add esi ebx +
mov byte ptr [ebp-4] 0Ah +
js loc_10293BE  +
mov eax [ebp-6C8h] +
mov ecx [eax] +
push 0  +
push 0  +
push dword ptr [ebp-6C0h]  +
push eax  +
call dword ptr [ecx+0Ch]  +
mov esi eax +
push dword ptr [ebp-6C0h]  +
call ds:SysFreeString  +
lea ecx [ebp-6BCh] +
mov byte ptr [ebp-4] 0 +
call sub_10084DE  +
test esi esi +
jl loc_1029761  +
push edi  +
lea ecx [ebp-6BCh] +
call sub_1009D0D  +
push 0FFFFFFFFh  +
push dword ptr [ebp-6B0h]  +
lea eax [ebp-420h] +
push eax  +
mov eax [ebp-6BCh] +
lea ecx [ebp-6BCh] +
mov byte ptr [ebp-4] 0Bh +
call dword ptr [eax+10h]  +
mov eax [ebp-6BCh] +
push 0FFFFFFFFh  +
push dword ptr [ebp-6B0h]  +
lea ecx [ebp-6BCh] +
push offset aDefaultAppdata  +
call dword ptr [eax+10h]  +
push dword ptr [ebp-6B8h]  +
lea ecx [ebp-6C0h] +
call sub_100883D  +
mov esi [ebp-6C0h] +
neg esi  +
sbb esi esi +
and esi 7FF8FFF2h +
add esi ebx +
mov byte ptr [ebp-4] 0Ch +
js loc_102946C  +
mov eax [ebp-6C8h] +
mov ecx [eax] +
push 0  +
push 0  +
push dword ptr [ebp-6C0h]  +
push eax  +
call dword ptr [ecx+0Ch]  +
mov esi eax +
push dword ptr [ebp-6C0h]  +
call ds:SysFreeString  +
lea ecx [ebp-6BCh] +
mov byte ptr [ebp-4] 0 +
call sub_10084DE  +
test esi esi +
jl loc_1029761  +
push edi  +
lea ecx [ebp-6BCh] +
call sub_1009D0D  +
push 0FFFFFFFFh  +
push dword ptr [ebp-6B0h]  +
lea eax [ebp-420h] +
push eax  +
mov eax [ebp-6BCh] +
lea ecx [ebp-6BCh] +
mov byte ptr [ebp-4] 0Dh +
call dword ptr [eax+10h]  +
mov eax [ebp-6BCh] +
push 0FFFFFFFFh  +
push dword ptr [ebp-6B0h]  +
lea ecx [ebp-6BCh] +
push offset aAppdataLocalMi  +
call dword ptr [eax+10h]  +
push dword ptr [ebp-6B8h]  +
lea ecx [ebp-6C0h] +
call sub_100883D  +
mov esi [ebp-6C0h] +
neg esi  +
sbb esi esi +
and esi 7FF8FFF2h +
add esi ebx +
mov byte ptr [ebp-4] 0Eh +
js loc_102951A  +
mov eax [ebp-6C8h] +
mov ecx [eax] +
push 0  +
push 0  +
push dword ptr [ebp-6C0h]  +
push eax  +
call dword ptr [ecx+0Ch]  +
mov esi eax +
push dword ptr [ebp-6C0h]  +
call ds:SysFreeString  +
lea ecx [ebp-6BCh] +
mov byte ptr [ebp-4] 0 +
call sub_10084DE  +
test esi esi +
jl loc_1029761  +
push edi  +
lea ecx [ebp-6BCh] +
call sub_1009D0D  +
mov eax [ebp-6BCh] +
push 0FFFFFFFFh  +
push dword ptr [ebp-6B0h]  +
lea ecx [ebp-6BCh] +
push dword ptr [ebp-6E0h]  +
mov byte ptr [ebp-4] 0Fh +
call dword ptr [eax+10h]  +
mov eax [ebp-6BCh] +
push 0FFFFFFFFh  +
push dword ptr [ebp-6B0h]  +
lea ecx [ebp-6BCh] +
push offset asc_1007D24  +
call dword ptr [eax+10h]  +
push dword ptr [ebp-6B8h]  +
lea ecx [ebp-6C0h] +
call sub_100883D  +
mov esi [ebp-6C0h] +
mov edi [ebp-6C8h] +
neg esi  +
sbb esi esi +
and esi 7FF8FFF2h +
add esi ebx +
mov byte ptr [ebp-4] 10h +
js loc_10295C7  +
mov eax [edi] +
push 0  +
push 0  +
push dword ptr [ebp-6C0h]  +
push edi  +
call dword ptr [eax+0Ch]  +
mov esi eax +
push dword ptr [ebp-6C0h]  +
call ds:SysFreeString  +
lea ecx [ebp-6BCh] +
mov byte ptr [ebp-4] 0 +
call sub_10084DE  +
test esi esi +
jl loc_1029761  +
cmp dword ptr [ebp-6DCh] 0 +
jz loc_102961B  +
push edi  +
push dword ptr [ebp-6CCh]  +
push 1  +
push 0  +
push 1  +
push 16h  +
push dword ptr [ebp-6D0h]  +
push dword ptr [ebp-6D4h]  +
push dword ptr [ebp-6C4h]  +
call sub_1027F17  +
mov esi eax +
test esi esi +
jl loc_1029761  +
push edi  +
push dword ptr [ebp-6CCh]  +
push dword ptr [ebp-6D0h]  +
push dword ptr [ebp-6D4h]  +
push dword ptr [ebp-6C4h]  +
call sub_102827B  +
mov esi eax +
test esi esi +
jl loc_1029761  +
push edi  +
push dword ptr [ebp-6CCh]  +
push 1  +
push 0  +
push 0  +
push 23h  +
push dword ptr [ebp-6D0h]  +
push dword ptr [ebp-6D4h]  +
push dword ptr [ebp-6C4h]  +
call sub_1027F17  +
mov esi eax +
test esi esi +
jl loc_1029761  +
push offset aFileSystemVolu  +
lea ecx [ebp-6C4h] +
call sub_100883D  +
mov esi [ebp-6C4h] +
neg esi  +
sbb esi esi +
and esi 7FF8FFF2h +
add esi ebx +
mov byte ptr [ebp-4] 11h +
js loc_10296B5  +
mov eax [edi] +
push 0  +
push 0  +
push dword ptr [ebp-6C4h]  +
push edi  +
call dword ptr [eax+0Ch]  +
mov esi eax +
push dword ptr [ebp-6C4h]  +
mov byte ptr [ebp-4] 0 +
call ds:SysFreeString  +
test esi esi +
jl loc_1029761  +
push offset aFileDfsrprivat  +
lea ecx [ebp-6C4h] +
call sub_100883D  +
mov esi [ebp-6C4h] +
neg esi  +
sbb esi esi +
and esi 7FF8FFF2h +
add esi ebx +
mov byte ptr [ebp-4] 12h +
js loc_1029707  +
mov eax [edi] +
push 0  +
push 0  +
push dword ptr [ebp-6C4h]  +
push edi  +
call dword ptr [eax+0Ch]  +
mov esi eax +
push dword ptr [ebp-6C4h]  +
mov byte ptr [ebp-4] 0 +
call ds:SysFreeString  +
test esi esi +
jl loc_1029761  +
push offset aFileRecycle_bi  +
lea ecx [ebp-6C4h] +
call sub_100883D  +
mov esi [ebp-6C4h] +
neg esi  +
sbb esi esi +
and esi 7FF8FFF2h +
add esi ebx +
mov byte ptr [ebp-4] 13h +
js loc_1029755  +
mov eax [edi] +
push 0  +
push 0  +
push dword ptr [ebp-6C4h]  +
push edi  +
call dword ptr [eax+0Ch]  +
mov esi eax +
push dword ptr [ebp-6C4h]  +
call ds:SysFreeString  +
push dword ptr [ebp-6D0h]  +
call ds:SysFreeString  +
mov eax esi +
call sub_1002A77  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 218h +
mov eax dword_104A044 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_4] +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
xor esi esi +
cmp dword_104A04C 7D6h +
push edi  +
mov [ebp+var_218] eax +
jl loc_1029999  +
push 104h  +
lea eax [ebp+pszPath] +
push eax  +
push 0FFFFFFFFh  +
push 4400h  +
sub esp 10h +
mov edi esp +
mov esi offset dword_1029A78 +
movs   +
movs   +
movs   +
movs   +
call sub_1026509  +
mov esi eax +
jmp loc_1029A06  +
call sub_10263A5  +
test eax eax +
jz loc_1029A01  +
lea eax [ebp+var_210] +
push eax  +
lea eax [ebp+pszPath] +
push eax  +
mov [ebp+var_210] 104h +
call GetAllUsersProfileDirectoryW  +
test eax eax +
jnz loc_10299DE  +
call ds:__imp_GetLastError  +
test eax eax +
jle loc_10299D8  +
and eax 0FFFFh +
or eax 80070000h +
mov esi eax +
test esi esi +
jl loc_1029A33  +
lea eax [ebp+pszPath] +
push 5Ch  +
push eax  +
call ds:wcsrchr  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_10299FA  +
xor ecx ecx +
mov [eax] cx +
jmp loc_1029A06  +
mov esi 80070057h +
jmp loc_1029A06  +
mov esi 80004001h +
test esi esi +
jl loc_1029A33  +
lea eax [ebp+pszPath] +
push eax  +
call ds:PathAddBackslashW  +
lea eax [ebp+pszPath] +
push eax  +
call ds:SysAllocString  +
mov [ebx] eax +
test eax eax +
jnz loc_1029A2F  +
mov esi 8007000Eh +
test esi esi +
jge loc_1029A62  +
push 0  +
lea ecx [ebp+var_214] +
call sub_1026F3F  +
mov ecx [ebp+var_218] +
push 7DEh  +
lea eax [ebp+var_214] +
push eax  +
call sub_102629D  +
lea ecx [ebp+var_214] +
call sub_10261EA  +
mov ecx [ebp+var_4] +
pop edi  +
mov eax esi +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1002A8B  +
leave   +
retn 8  +
***
call sub_1002A3A  +
mov eax [ebp+14h] +
mov edi [ebp+10h] +
mov [ebp-234h] eax +
lea eax [ebp-224h] +
push eax  +
mov [ebp-230h] edi +
call sub_102659B  +
mov esi eax +
xor ebx ebx +
cmp esi ebx +
jl loc_1029CCE  +
lea eax [ebp-225h] +
push eax  +
mov [ebp-225h] bl +
call sub_10265F5  +
mov esi eax +
mov [ebp-22Ch] ebx +
cmp esi ebx +
mov [ebp-4] ebx +
jl loc_1029CC0  +
cmp [ebp-225h] bl +
jz loc_1029B1F  +
mov eax ds:dword_1022458 +
mov [ebp-18h] eax +
mov eax ds:dword_102245C +
mov [ebp-14h] eax +
mov ax [ebp-224h] +
mov [ebp-18h] ax +
lea eax [ebp-18h] +
push eax  +
lea ecx [ebp-22Ch] +
call sub_1026B10  +
jmp loc_1029B2C  +
push edi  +
lea eax [ebp-22Ch] +
push eax  +
call sub_102993D  +
mov esi eax +
cmp esi ebx +
jl loc_1029CC0  +
push offset aFile  +
lea ecx [ebp-224h] +
call sub_100883D  +
mov esi [ebp-224h] +
neg esi  +
sbb esi esi +
mov ebx 7FF8FFF2h +
and esi ebx +
mov edi 8007000Eh +
add esi edi +
mov byte ptr [ebp-4] 1 +
js loc_1029B9E  +
lea eax [ebp-22Ch] +
push eax  +
lea ecx [ebp-224h] +
call sub_1026177  +
mov esi [ebp-224h] +
neg esi  +
sbb esi esi +
and esi ebx +
add esi edi +
js loc_1029B9E  +
mov eax [ebp-234h] +
mov ecx [eax] +
push 0  +
push 1  +
push dword ptr [ebp-224h]  +
push eax  +
call dword ptr [ecx+0Ch]  +
mov esi eax +
push dword ptr [ebp-224h]  +
mov byte ptr [ebp-4] 0 +
call ds:SysFreeString  +
test esi esi +
jl loc_1029CC0  +
cmp dword_104A04C 7D6h +
jl loc_1029CC0  +
lea eax [ebp-220h] +
push eax  +
push 1  +
push 0  +
push 16h  +
push 0  +
call SHGetFolderPathW  +
mov esi eax +
test esi esi +
jl loc_1029C83  +
lea eax [ebp-220h] +
push eax  +
lea ecx [ebp-230h] +
call sub_100883D  +
mov esi [ebp-230h] +
neg esi  +
sbb esi esi +
and esi ebx +
add esi edi +
mov byte ptr [ebp-4] 2 +
js loc_1029C75  +
push offset aFile  +
lea ecx [ebp-224h] +
call sub_100883D  +
mov esi [ebp-224h] +
neg esi  +
sbb esi esi +
and esi ebx +
add esi edi +
mov byte ptr [ebp-4] 3 +
js loc_1029C69  +
lea eax [ebp-220h] +
push eax  +
lea ecx [ebp-224h] +
call sub_1026B36  +
mov esi [ebp-224h] +
neg esi  +
sbb esi esi +
and esi ebx +
add esi edi +
js loc_1029C69  +
mov eax [ebp-234h] +
mov ecx [eax] +
push 0  +
push 1  +
push dword ptr [ebp-224h]  +
push eax  +
call dword ptr [ecx+0Ch]  +
mov esi eax +
push dword ptr [ebp-224h]  +
call ds:SysFreeString  +
push dword ptr [ebp-230h]  +
call ds:SysFreeString  +
jmp loc_1029CC0  +
push 0  +
lea ecx [ebp-18h] +
call sub_1026F3F  +
mov edi [ebp-230h] +
push 7DFh  +
lea eax [ebp-18h] +
push eax  +
mov ecx edi +
mov byte ptr [ebp-4] 4 +
call sub_102629D  +
mov eax [edi] +
push 0FFFFFFFFh  +
push dword ptr [edi+0Ch]  +
mov ecx edi +
push offset aCsidl_common_s  +
call dword ptr [eax+10h]  +
lea ecx [ebp-18h] +
call sub_10261EA  +
push dword ptr [ebp-22Ch]  +
call ds:SysFreeString  +
jmp loc_1029CEF  +
push ebx  +
lea ecx [ebp-18h] +
call sub_1026F3F  +
push 7E1h  +
lea eax [ebp-18h] +
push eax  +
mov ecx edi +
call sub_102629D  +
lea ecx [ebp-18h] +
call sub_10261EA  +
mov eax esi +
call sub_1002A77  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push esi  +
push edi  +
mov edi [ebp+arg_4] +
mov eax [edi] +
push 0FFFFFFFFh  +
push 0  +
push offset word_100348C  +
mov ecx edi +
call dword ptr [eax+10h]  +
mov esi [ebp+arg_0] +
test esi esi +
jl loc_1029D57  +
cmp esi 8 +
jl loc_1029D5F  +
lea eax [esi-64h] +
cmp eax 3 +
ja loc_1029D80  +
push 0  +
lea ecx [ebp+var_8] +
call sub_1026F3F  +
add esi 834h +
push esi  +
push eax  +
mov ecx edi +
call sub_102629D  +
lea ecx [ebp+var_8] +
call sub_10261EA  +
pop edi  +
pop esi  +
leave   +
retn 8  +
***
push ebp  +
mov ebp esp +
push 0FFFFFFFFh  +
push offset dword_103F4B8  +
mov eax large fs:0 +
push eax  +
mov eax 13D0h +
call sub_100A16A  +
mov eax dword_104A044 +
xor eax ebp +
mov [ebp-10h] eax +
push ebx  +
push esi  +
push edi  +
push eax  +
lea eax [ebp-0Ch] +
mov large fs:0 eax +
cmp dword_104A3AC 0 +
mov edi 200h +
mov esi 80000000h +
jz loc_1029E23  +
mov al byte_104A3B0 +
cmp al 4 +
jnb loc_1029DDF  +
test al al +
jnz loc_1029E23  +
mov eax dword_104A398 +
mov ecx dword_104A39C +
and eax edi +
and ecx esi +
or eax ecx +
jz loc_1029E23  +
mov eax dword_104A3A0 +
mov ebx dword_104A3A4 +
mov ecx eax +
mov edx ebx +
and ecx edi +
and edx esi +
cmp ecx eax +
jnz loc_1029E23  +
cmp edx ebx +
jnz loc_1029E23  +
push offset dword_102A280  +
push dword_104A134  +
push dword_104A130  +
call sub_100A01E  +
lea ecx [ebp-124h] +
call sub_100A0C7  +
push dword_104A1B0  +
xor ebx ebx +
lea ecx [ebp-0BA4h] +
mov [ebp-4] ebx +
call sub_100A2FC  +
mov byte ptr [ebp-4] 1 +
cmp dword_104A1B0 ebx +
jz loc_1029E98  +
lea ecx [ebp-13B8h] +
call sub_100A0E6  +
lea eax [ebp-13B8h] +
push eax  +
push dword ptr [ebp+8]  +
mov byte ptr [ebp-4] 2 +
call sub_1029D2F  +
push ebx  +
push dword ptr [ebp-13B4h]  +
lea eax [ebp-0BA4h] +
push 800003F0h  +
push eax  +
call sub_102636B  +
add esp 10h +
lea ecx [ebp-13B8h] +
mov byte ptr [ebp-4] 1 +
call sub_1009FC5  +
push ebx  +
push 20019h  +
push offset aSoftwareMicr_0  +
push 80000002h  +
lea ecx [ebp-264h] +
call sub_100A989  +
lea eax [ebp-124h] +
push eax  +
push offset aDatadirectory  +
lea ecx [ebp-264h] +
mov byte ptr [ebp-4] 3 +
mov [ebp-13BCh] ebx +
call sub_100A8AC  +
test eax eax +
jnz loc_1029EF2  +
call ds:__imp_GetLastError  +
push eax  +
call sub_100A7A1  +
cmp eax ebx +
mov [ebp-13BCh] eax +
jl loc_102A004  +
mov ebx [ebp-118h] +
mov eax [ebp-120h] +
movzx eax word ptr [eax+ebx*2-2] +
push eax  +
call sub_1003A20  +
test eax eax +
jz loc_1029F20  +
dec ebx  +
push ebx  +
lea ecx [ebp-124h] +
call sub_100A108  +
mov ebx [ebp-118h] +
mov eax [ebp-124h] +
push 0FFFFFFFFh  +
push ebx  +
push offset String  +
lea ecx [ebp-124h] +
call dword ptr [eax+10h]  +
mov eax [ebp-124h] +
push 0FFFFFFFFh  +
push dword ptr [ebp-118h]  +
lea ecx [ebp-124h] +
push offset aWindows  +
call dword ptr [eax+10h]  +
cmp dword_104A3AC 0 +
jz loc_1029FB3  +
mov al byte_104A3B0 +
cmp al 4 +
jnb loc_1029F69  +
test al al +
jnz loc_1029FB3  +
mov eax dword_104A398 +
mov ecx dword_104A39C +
and eax edi +
and ecx esi +
or eax ecx +
jz loc_1029FB3  +
mov eax dword_104A3A0 +
mov ebx dword_104A3A4 +
mov ecx eax +
mov edx ebx +
and ecx edi +
and edx esi +
cmp ecx eax +
jnz loc_1029FB3  +
cmp edx ebx +
jnz loc_1029FB3  +
push dword ptr [ebp-120h]  +
push offset dword_102A290  +
push dword_104A134  +
push dword_104A130  +
call sub_10263C4  +
push 0  +
push 1  +
push dword ptr [ebp-120h]  +
call sub_10344CD  +
test eax eax +
jnz loc_102A004  +
mov ebx ds:__imp_GetLastError +
call ebx  +
cmp eax 91h +
jnz loc_1029FEA  +
push 0  +
push 0  +
push dword ptr [ebp-120h]  +
call sub_10344CD  +
test eax eax +
jnz loc_102A004  +
call ebx  +
test eax eax +
jz loc_102A004  +
cmp eax 2 +
jz loc_102A004  +
cmp eax 3 +
jz loc_102A004  +
push eax  +
call sub_100A7A1  +
mov [ebp-13BCh] eax +
and dword ptr [ebp-13C0h] 0 +
mov dword ptr [ebp-13DCh] offset aApplications_0 +
mov dword ptr [ebp-13D8h] offset aCatalognames +
mov dword ptr [ebp-13D4h] offset aDatabases +
mov dword ptr [ebp-13D0h] offset aGather +
mov dword ptr [ebp-13CCh] offset aGatheringManag +
mov dword ptr [ebp-13C8h] offset aUsnnotifier +
mov dword ptr [ebp-13C4h] offset aCrawlscopemana +
lea ecx [ebp-1C4h] +
call sub_100C78B  +
mov eax [ebp-13C0h] +
push 0F003Fh  +
push dword ptr [ebp+eax*4-13DCh]  +
lea eax [ebp-264h] +
push eax  +
lea ecx [ebp-1C4h] +
mov byte ptr [ebp-4] 4 +
call sub_1026344  +
mov ebx eax +
test ebx ebx +
jl loc_102A0AC  +
push offset aWindows  +
lea ecx [ebp-1C4h] +
call sub_1033FFE  +
test eax eax +
jnz loc_102A0AC  +
call ds:__imp_GetLastError  +
push eax  +
call sub_100A7A1  +
mov ebx eax +
cmp ebx 80070002h +
jz loc_102A0BC  +
cmp ebx 80070003h +
jnz loc_102A0BE  +
xor ebx ebx +
cmp dword ptr [ebp-13BCh] 0 +
jl loc_102A0CD  +
mov [ebp-13BCh] ebx +
lea ecx [ebp-1C4h] +
mov byte ptr [ebp-4] 3 +
call sub_100AA1A  +
inc dword ptr [ebp-13C0h]  +
cmp dword ptr [ebp-13C0h] 7 +
jb loc_102A051  +
xor ebx ebx +
cmp dword_104A1B0 ebx +
jz loc_102A238  +
cmp [ebp-13BCh] ebx +
push ebx  +
jl loc_102A190  +
lea eax [ebp-0BA4h] +
push 400003F2h  +
push eax  +
call sub_100A3F1  +
add esp 0Ch +
cmp dword_104A3AC ebx +
jz loc_102A238  +
mov al byte_104A3B0 +
cmp al 4 +
jnb loc_102A13B  +
test al al +
jnz loc_102A238  +
mov eax dword_104A398 +
mov ecx dword_104A39C +
and eax edi +
and ecx esi +
or eax ecx +
jz loc_102A238  +
mov eax dword_104A3A0 +
mov ecx eax +
and ecx edi +
mov edi dword_104A3A4 +
mov edx edi +
and edx esi +
cmp ecx eax +
jnz loc_102A238  +
cmp edx edi +
jnz loc_102A238  +
push offset dword_102A2A0  +
push dword_104A134  +
push dword_104A130  +
call sub_100A01E  +
jmp loc_102A238  +
push offset aD  +
lea eax [ebp-50h] +
push 20h  +
push eax  +
call sub_100A257  +
push dword ptr [ebp-13BCh]  +
lea eax [ebp-90h] +
push offset a0xX  +
push 20h  +
push eax  +
call sub_100A257  +
push ebx  +
lea eax [ebp-90h] +
push eax  +
lea eax [ebp-50h] +
push eax  +
lea eax [ebp-0BA4h] +
push 0C00003F3h  +
push eax  +
call sub_1026388  +
add esp 34h +
cmp dword_104A3AC ebx +
jz loc_102A238  +
mov al byte_104A3B0 +
cmp al 2 +
jnb loc_102A1EE  +
test al al +
jnz loc_102A238  +
mov eax dword_104A398 +
mov ecx dword_104A39C +
and eax edi +
and ecx esi +
or eax ecx +
jz loc_102A238  +
mov eax dword_104A3A0 +
mov ecx eax +
and ecx edi +
mov edi dword_104A3A4 +
mov edx edi +
and edx esi +
cmp ecx eax +
jnz loc_102A238  +
cmp edx edi +
jnz loc_102A238  +
push dword ptr [ebp-13BCh]  +
push offset dword_102A2B0  +
push dword_104A134  +
push dword_104A130  +
call sub_10379EB  +
lea ecx [ebp-264h] +
mov byte ptr [ebp-4] 1 +
call sub_100AA1A  +
lea ecx [ebp-0BA4h] +
call sub_100C0D9  +
lea ecx [ebp-124h] +
call sub_10084DE  +
mov eax [ebp-13BCh] +
mov ecx [ebp-0Ch] +
mov large fs:0 ecx +
pop ecx  +
pop edi  +
pop esi  +
pop ebx  +
mov ecx [ebp-10h] +
xor ecx ebp +
call sub_1002A8B  +
leave   +
retn 4  +
***
call sub_1002A3A  +
mov eax [ebp+8] +
mov edi [ebp+10h] +
mov esi [ebp+18h] +
mov [ebp-248h] eax +
mov eax [ebp+0Ch] +
mov [ebp-22Ch] eax +
mov eax [ebp+14h] +
mov [ebp-240h] eax +
mov eax [ebp+1Ch] +
push offset aSearch_jetprop  +
lea ecx [ebp-238h] +
mov [ebp-230h] edi +
mov [ebp-224h] esi +
mov [ebp-228h] eax +
call sub_100883D  +
xor ebx ebx +
push offset aSearch_tripoli  +
lea ecx [ebp-23Ch] +
mov [ebp-4] ebx +
call sub_100883D  +
push offset aSearch_mappi  +
lea ecx [ebp-250h] +
mov byte ptr [ebp-4] 1 +
call sub_100883D  +
push offset aMssearch_ipspi  +
lea ecx [ebp-234h] +
mov byte ptr [ebp-4] 2 +
call sub_100883D  +
mov byte ptr [ebp-4] 3 +
cmp [ebp-238h] ebx +
jz loc_102A910  +
cmp [ebp-23Ch] ebx +
jz loc_102A910  +
cmp edi ebx +
jz loc_102A910  +
cmp [ebp-234h] ebx +
jz loc_102A910  +
mov dword ptr [esi] 2 +
mov edi 80000000h +
cmp dword_104A3AC ebx +
jz loc_102A4A4  +
mov al byte_104A3B0 +
cmp al 4 +
jnb loc_102A459  +
cmp al bl +
jnz loc_102A4A4  +
mov eax dword_104A398 +
mov ecx dword_104A39C +
mov edx 200h +
and eax edx +
and ecx edi +
or eax ecx +
jz loc_102A4A4  +
mov eax dword_104A3A0 +
mov esi dword_104A3A4 +
mov ecx eax +
and ecx edx +
mov edx esi +
and edx edi +
cmp ecx eax +
jnz loc_102A4A4  +
cmp edx esi +
jnz loc_102A4A4  +
push 2  +
push offset aN  +
push dword_104A134  +
push dword_104A130  +
call sub_10379EB  +
mov eax [ebp-238h] +
mov ecx [ebp-234h] +
mov [ebp-2A0h] eax +
mov eax [ebp-23Ch] +
mov [ebp-28Ch] eax +
mov eax [ebp-250h] +
mov [ebp-278h] eax +
xor eax eax +
inc eax  +
mov [ebp-26Ch] eax +
mov [ebp-260h] eax +
lea eax [ebp-21Ch] +
push eax  +
mov [ebp-29Ch] ebx +
mov [ebp-298h] ebx +
mov [ebp-294h] ebx +
mov [ebp-290h] ebx +
mov [ebp-288h] ebx +
mov [ebp-284h] ebx +
mov [ebp-280h] ebx +
mov [ebp-27Ch] ebx +
mov [ebp-274h] ebx +
mov [ebp-270h] ebx +
mov [ebp-268h] ebx +
mov [ebp-264h] ecx +
mov [ebp-25Ch] ebx +
mov [ebp-258h] ebx +
mov [ebp-254h] ebx +
mov [ebp-21Ch] ebx +
call sub_10269C5  +
mov esi eax +
cmp esi ebx +
jl loc_102A560  +
xor eax eax +
cmp [ebp-21Ch] ebx +
setz al  +
mov [ebp-254h] eax +
cmp esi ebx +
mov [ebp-21Ch] ebx +
jl loc_102A915  +
lea eax [ebp-298h] +
mov [ebp-220h] eax +
cmp dword ptr [ebp-21Ch] 4 +
jnb loc_102A5D7  +
cmp [eax+8] ebx +
jz loc_102A58C  +
mov [eax] ebx +
jmp loc_102A5C4  +
push dword ptr [ebp-228h]  +
push dword ptr [eax-8]  +
push dword ptr [ebp-22Ch]  +
call sub_102754D  +
mov ecx [ebp-220h] +
mov esi eax +
xor eax eax +
cmp esi ebx +
setnl al  +
cmp esi ebx +
mov [ecx] eax +
jge loc_102A5BE  +
mov eax ecx +
cmp [eax-4] ebx +
jz loc_102A5BE  +
xor esi esi +
mov eax [ebp-220h] +
inc dword ptr [ebp-21Ch]  +
add eax 14h +
cmp esi ebx +
mov [ebp-220h] eax +
jge loc_102A57A  +
cmp esi ebx +
jl loc_102A915  +
mov eax [ebp-224h] +
mov dword ptr [eax] 3 +
cmp dword_104A3AC ebx +
jz loc_102A64B  +
mov al byte_104A3B0 +
cmp al 4 +
jnb loc_102A600  +
cmp al bl +
jnz loc_102A64B  +
mov eax dword_104A398 +
mov ecx dword_104A39C +
mov edx 200h +
and eax edx +
and ecx edi +
or eax ecx +
jz loc_102A64B  +
mov eax dword_104A3A0 +
mov esi dword_104A3A4 +
mov ecx eax +
and ecx edx +
mov edx esi +
and edx edi +
cmp ecx eax +
jnz loc_102A64B  +
cmp edx esi +
jnz loc_102A64B  +
push 3  +
push offset aN  +
push dword_104A134  +
push dword_104A130  +
call sub_10379EB  +
lea eax [ebp-220h] +
push eax  +
push 20019h  +
push ebx  +
push dword ptr [ebp-230h]  +
push dword ptr [ebp-248h]  +
call ds:RegOpenKeyExW  +
push eax  +
call sub_100A7A1  +
mov esi eax +
cmp esi ebx +
jl loc_102A8B2  +
lea eax [ebp-248h] +
push eax  +
lea eax [ebp-218h] +
push eax  +
lea eax [ebp-230h] +
push eax  +
push offset aDefaultproject  +
push ebx  +
push dword ptr [ebp-220h]  +
mov dword ptr [ebp-248h] 104h +
mov dword ptr [ebp-230h] 2 +
call ds:SHGetValueW  +
push eax  +
call sub_100A7A1  +
mov esi eax +
cmp esi ebx +
jl loc_102A85F  +
xor eax eax +
mov [ebp-12h] ax +
lea eax [ebp-218h] +
push eax  +
lea ecx [ebp-21Ch] +
call sub_100883D  +
mov esi [ebp-21Ch] +
neg esi  +
sbb esi esi +
and esi 7FF8FFF2h +
add esi 8007000Eh +
mov byte ptr [ebp-4] 4 +
js loc_102A851  +
mov eax [ebp-224h] +
mov dword ptr [eax] 4 +
cmp dword_104A3AC ebx +
jz loc_102A769  +
mov al byte_104A3B0 +
cmp al 4 +
jnb loc_102A71E  +
cmp al bl +
jnz loc_102A769  +
mov eax dword_104A398 +
mov ecx dword_104A39C +
mov edx 200h +
and eax edx +
and ecx edi +
or eax ecx +
jz loc_102A769  +
mov eax dword_104A3A0 +
mov esi dword_104A3A4 +
mov ecx eax +
and ecx edx +
mov edx esi +
and edx edi +
cmp ecx eax +
jnz loc_102A769  +
cmp edx esi +
jnz loc_102A769  +
push 4  +
push offset aN  +
push dword_104A134  +
push dword_104A130  +
call sub_10379EB  +
push dword ptr [ebp-228h]  +
push ebx  +
push ebx  +
push 1  +
push ebx  +
push dword ptr [ebp-21Ch]  +
push dword ptr [ebp-240h]  +
push dword ptr [ebp-22Ch]  +
call sub_102766D  +
mov esi eax +
cmp esi ebx +
jl loc_102A851  +
mov eax [ebp-224h] +
mov dword ptr [eax] 5 +
cmp dword_104A3AC ebx +
jz loc_102A803  +
mov al byte_104A3B0 +
cmp al 4 +
jnb loc_102A7B6  +
cmp al bl +
jnz loc_102A803  +
mov eax dword_104A398 +
mov ecx dword_104A39C +
mov edx 200h +
and eax edx +
and ecx edi +
or eax ecx +
jz loc_102A803  +
mov eax dword_104A3A0 +
mov ecx eax +
and ecx edx +
mov edx dword_104A3A4 +
and edx edi +
cmp ecx eax +
jnz loc_102A803  +
cmp edx dword_104A3A4 +
jnz loc_102A803  +
push 5  +
push offset aN  +
push dword_104A134  +
push dword_104A130  +
call sub_10379EB  +
mov [ebp-224h] ebx +
lea edi [ebp-2A0h] +
cmp dword ptr [ebp-224h] 4 +
jnb loc_102A851  +
cmp [edi+8] ebx +
jz loc_102A844  +
push dword ptr [ebp-228h]  +
push dword ptr [edi]  +
push dword ptr [ebp-240h]  +
push dword ptr [ebp-22Ch]  +
cmp [edi+0Ch] ebx +
jz loc_102A83D  +
call sub_1027BB5  +
jmp loc_102A842  +
call sub_1027A91  +
mov esi eax +
inc dword ptr [ebp-224h]  +
add edi 14h +
cmp esi ebx +
jge loc_102A80F  +
push dword ptr [ebp-21Ch]  +
call ds:SysFreeString  +
jmp loc_102A8A4  +
push ebx  +
lea ecx [ebp-244h] +
call sub_1026F3F  +
mov edi [ebp-228h] +
push 7D5h  +
lea eax [ebp-244h] +
push eax  +
mov ecx edi +
mov byte ptr [ebp-4] 5 +
call sub_102629D  +
mov eax [edi] +
push 0FFFFFFFFh  +
push dword ptr [edi+0Ch]  +
mov ecx edi +
push offset aDefaultproject  +
call dword ptr [eax+10h]  +
lea ecx [ebp-244h] +
call sub_10261EA  +
push dword ptr [ebp-220h]  +
call ds:RegCloseKey  +
jmp loc_102A8F5  +
push ebx  +
lea ecx [ebp-24Ch] +
call sub_1026F3F  +
mov ecx [ebp-228h] +
push 7D7h  +
lea eax [ebp-24Ch] +
push eax  +
mov byte ptr [ebp-4] 6 +
call sub_102629D  +
push dword ptr [ebp-230h]  +
mov ecx [ebp-228h] +
call sub_1026C01  +
lea ecx [ebp-24Ch] +
call sub_10261EA  +
cmp esi ebx +
jl loc_102A915  +
cmp [ebp-254h] ebx +
jnz loc_102A915  +
cmp [ebp-25Ch] ebx +
jnz loc_102A915  +
call sub_10266DD  +
jmp loc_102A915  +
mov esi 8007000Eh +
push dword ptr [ebp-234h]  +
mov edi ds:SysFreeString +
call edi  +
push dword ptr [ebp-250h]  +
call edi  +
push dword ptr [ebp-23Ch]  +
call edi  +
push dword ptr [ebp-238h]  +
call edi  +
mov eax esi +
call sub_1002A77  +
retn 18h  +
***
call sub_1003649  +
mov eax [ebp+8] +
mov ecx [ebp+0Ch] +
and dword ptr [eax] 0 +
cmp dword_104A3AC 0 +
mov [ebp-228h] eax +
mov [ebp-220h] ecx +
jz loc_102AA49  +
mov al byte_104A3B0 +
cmp al 4 +
jnb loc_102A9F7  +
test al al +
jnz loc_102AA49  +
mov eax dword_104A398 +
mov ecx dword_104A39C +
mov edi 200h +
mov esi 80000000h +
and eax edi +
and ecx esi +
or eax ecx +
jz loc_102AA53  +
mov eax dword_104A3A0 +
mov ebx dword_104A3A4 +
mov ecx eax +
mov edx ebx +
and ecx edi +
and edx esi +
cmp ecx eax +
jnz loc_102AA53  +
cmp edx ebx +
jnz loc_102AA53  +
push 0  +
push offset aN  +
push dword_104A134  +
push dword_104A130  +
call sub_10379EB  +
jmp loc_102AA53  +
mov esi 80000000h +
mov edi 200h +
push 0  +
call sub_1026D91  +
mov ebx eax +
test ebx ebx +
jl loc_102B0F8  +
lea eax [ebp-248h] +
push eax  +
push 20019h  +
push 0  +
push offset aSoftwareMicr_0  +
push 80000002h  +
call ds:RegOpenKeyExW  +
push eax  +
call sub_100A7A1  +
mov ebx eax +
test ebx ebx +
jl loc_102B0F8  +
push dword ptr [ebp-220h]  +
call sub_103D48C  +
push eax  +
call sub_1027CD9  +
mov ebx eax +
xor eax eax +
mov [ebp-16h] ax +
mov dword ptr [ebp-258h] 206h +
mov dword ptr [ebp-254h] 2 +
test ebx ebx +
jl loc_102AAF7  +
lea eax [ebp-258h] +
push eax  +
lea eax [ebp-21Ch] +
push eax  +
lea eax [ebp-254h] +
push eax  +
push offset aDatadirectory  +
push 0  +
push dword ptr [ebp-248h]  +
call ds:SHGetValueW  +
push eax  +
call sub_100A7A1  +
mov ebx eax +
test ebx ebx +
jge loc_102AB4B  +
push 0  +
lea ecx [ebp-244h] +
call sub_1026F3F  +
mov ecx [ebp-220h] +
and dword ptr [ebp-4] 0 +
push 7D5h  +
lea eax [ebp-244h] +
push eax  +
call sub_102629D  +
mov ecx [ebp-220h] +
mov eax [ecx] +
push 0FFFFFFFFh  +
push dword ptr [ecx+0Ch]  +
push offset aDatadirectory  +
call dword ptr [eax+10h]  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-244h] +
call sub_10261EA  +
test ebx ebx +
jl loc_102B0EC  +
lea eax [ebp-21Ch] +
push eax  +
call ds:PathRemoveBackslashW  +
lea eax [ebp-21Ch] +
push eax  +
lea ecx [ebp-238h] +
call sub_100883D  +
push offset aWindows  +
lea ecx [ebp-22Ch] +
mov dword ptr [ebp-4] 1 +
call sub_100883D  +
push offset aSystemindex  +
lea ecx [ebp-230h] +
mov byte ptr [ebp-4] 2 +
call sub_100883D  +
push offset aSearch_gathere  +
lea ecx [ebp-23Ch] +
mov byte ptr [ebp-4] 3 +
call sub_100883D  +
push offset aApplications_1  +
lea ecx [ebp-234h] +
mov byte ptr [ebp-4] 4 +
call sub_100883D  +
lea eax [ebp-22Ch] +
push eax  +
lea ecx [ebp-234h] +
mov byte ptr [ebp-4] 5 +
call sub_1026177  +
cmp dword ptr [ebp-238h] 0 +
jz loc_102ABFE  +
xor eax eax +
cmp [ebp-22Ch] eax +
jz loc_102ABFE  +
cmp [ebp-230h] eax +
jz loc_102ABFE  +
cmp [ebp-23Ch] eax +
jz loc_102ABFE  +
cmp [ebp-234h] eax +
jnz loc_102AC05  +
mov ebx 8007000Eh +
xor eax eax +
cmp ebx eax +
jl loc_102B0BE  +
mov ecx [ebp-228h] +
mov dword ptr [ecx] 1 +
cmp dword_104A3AC eax +
jz loc_102AC74  +
mov al byte_104A3B0 +
cmp al 4 +
jnb loc_102AC2E  +
test al al +
jnz loc_102AC74  +
mov eax dword_104A398 +
mov ecx dword_104A39C +
and eax edi +
and ecx esi +
or eax ecx +
jz loc_102AC74  +
mov eax dword_104A3A0 +
mov ebx dword_104A3A4 +
mov ecx eax +
mov edx ebx +
and ecx edi +
and edx esi +
cmp ecx eax +
jnz loc_102AC74  +
cmp edx ebx +
jnz loc_102AC74  +
push 1  +
push offset aN  +
push dword_104A134  +
push dword_104A130  +
call sub_10379EB  +
and dword ptr [ebp-224h] 0 +
lea eax [ebp-238h] +
push eax  +
lea ecx [ebp-224h] +
mov byte ptr [ebp-4] 7 +
call sub_1026EFD  +
push offset String  +
lea ecx [ebp-224h] +
call sub_1026B36  +
push dword ptr [ebp-220h]  +
push dword ptr [ebp-23Ch]  +
push dword ptr [ebp-224h]  +
push dword ptr [ebp-22Ch]  +
call sub_1027189  +
mov ebx eax +
mov dword ptr [ebp-4] 6 +
jmp loc_102ACF4  +
mov eax [ebp-25Ch] +
mov eax [eax] +
mov [ebp-240h] eax +
mov dword ptr [ebp-4] 6 +
mov eax offset loc_102ACE4 +
retn   +
mov ebx [ebp-240h] +
mov edi 200h +
mov esi 80000000h +
push dword ptr [ebp-224h]  +
mov byte ptr [ebp-4] 5 +
call ds:SysFreeString  +
test ebx ebx +
jl loc_102B0BE  +
lea eax [ebp-240h] +
push eax  +
push 2  +
push 0  +
push offset aGatheringMan_0  +
push dword ptr [ebp-248h]  +
call ds:RegOpenKeyExW  +
push eax  +
call sub_100A7A1  +
mov ebx eax +
test ebx ebx +
jge loc_102AD7E  +
push 0  +
lea ecx [ebp-250h] +
call sub_1026F3F  +
mov ecx [ebp-220h] +
push 7D7h  +
lea eax [ebp-250h] +
push eax  +
mov byte ptr [ebp-4] 9 +
call sub_102629D  +
mov ecx [ebp-220h] +
mov eax [ecx] +
push 0FFFFFFFFh  +
push dword ptr [ecx+0Ch]  +
push offset aGatheringMan_0  +
call dword ptr [eax+10h]  +
lea ecx [ebp-250h] +
call sub_10261EA  +
jmp loc_102ADB5  +
push dword ptr [ebp-220h]  +
push dword ptr [ebp-228h]  +
push dword ptr [ebp-230h]  +
push dword ptr [ebp-234h]  +
push dword ptr [ebp-22Ch]  +
push dword ptr [ebp-240h]  +
call sub_102A377  +
push dword ptr [ebp-240h]  +
mov ebx eax +
call ds:RegCloseKey  +
and dword ptr [ebp-224h] 0 +
mov byte ptr [ebp-4] 0Ah +
test ebx ebx +
jl loc_102AFE7  +
mov eax [ebp-228h] +
mov dword ptr [eax] 7 +
cmp dword_104A3AC 0 +
jz loc_102AE30  +
mov al byte_104A3B0 +
cmp al 4 +
jnb loc_102ADEA  +
test al al +
jnz loc_102AE30  +
mov eax dword_104A398 +
mov ecx dword_104A39C +
and eax edi +
and ecx esi +
or eax ecx +
jz loc_102AE30  +
mov eax dword_104A3A0 +
mov ebx dword_104A3A4 +
mov ecx eax +
mov edx ebx +
and ecx edi +
and edx esi +
cmp ecx eax +
jnz loc_102AE30  +
cmp edx ebx +
jnz loc_102AE30  +
push 7  +
push offset aN  +
push dword_104A134  +
push dword_104A130  +
call sub_10379EB  +
push dword ptr [ebp-220h]  +
lea eax [ebp-224h] +
push eax  +
call sub_100AD0C  +
mov ebx eax +
test ebx ebx +
jl loc_102AFE7  +
mov eax [ebp-228h] +
mov dword ptr [eax] 8 +
cmp dword_104A3AC 0 +
jz loc_102AEB4  +
mov al byte_104A3B0 +
cmp al 4 +
jnb loc_102AE6E  +
test al al +
jnz loc_102AEB4  +
mov eax dword_104A398 +
mov ecx dword_104A39C +
and eax edi +
and ecx esi +
or eax ecx +
jz loc_102AEB4  +
mov eax dword_104A3A0 +
mov ebx dword_104A3A4 +
mov ecx eax +
mov edx ebx +
and ecx edi +
and edx esi +
cmp ecx eax +
jnz loc_102AEB4  +
cmp edx ebx +
jnz loc_102AEB4  +
push 8  +
push offset aN  +
push dword_104A134  +
push dword_104A130  +
call sub_10379EB  +
push dword ptr [ebp-224h]  +
push dword ptr [ebp-220h]  +
push dword ptr [ebp-238h]  +
push dword ptr [ebp-230h]  +
push dword ptr [ebp-22Ch]  +
call sub_1028E7D  +
mov ebx eax +
test ebx ebx +
jl loc_102AFE7  +
mov eax [ebp-228h] +
mov dword ptr [eax] 9 +
cmp dword_104A3AC 0 +
jz loc_102AF49  +
mov al byte_104A3B0 +
cmp al 4 +
jnb loc_102AF03  +
test al al +
jnz loc_102AF49  +
mov eax dword_104A398 +
mov ecx dword_104A39C +
and eax edi +
and ecx esi +
or eax ecx +
jz loc_102AF49  +
mov eax dword_104A3A0 +
mov ebx dword_104A3A4 +
mov ecx eax +
mov edx ebx +
and ecx edi +
and edx esi +
cmp ecx eax +
jnz loc_102AF49  +
cmp edx ebx +
jnz loc_102AF49  +
push 9  +
push offset aN  +
push dword_104A134  +
push dword_104A130  +
call sub_10379EB  +
push dword ptr [ebp-224h]  +
push dword ptr [ebp-220h]  +
push dword ptr [ebp-230h]  +
push dword ptr [ebp-22Ch]  +
call sub_1029A8D  +
mov ebx eax +
test ebx ebx +
jl loc_102AFE7  +
mov eax [ebp-228h] +
mov dword ptr [eax] 0Ah +
cmp dword_104A3AC 0 +
jz loc_102AFD4  +
mov al byte_104A3B0 +
cmp al 4 +
jnb loc_102AF8E  +
test al al +
jnz loc_102AFD4  +
mov eax dword_104A398 +
mov ecx dword_104A39C +
and eax edi +
and ecx esi +
or eax ecx +
jz loc_102AFD4  +
mov eax dword_104A3A0 +
mov ebx dword_104A3A4 +
mov ecx eax +
mov edx ebx +
and ecx edi +
and edx esi +
cmp ecx eax +
jnz loc_102AFD4  +
cmp edx ebx +
jnz loc_102AFD4  +
push 0Ah  +
push offset aN  +
push dword_104A134  +
push dword_104A130  +
call sub_10379EB  +
push dword ptr [ebp-224h]  +
push dword ptr [ebp-220h]  +
call sub_1027ED1  +
mov ebx eax +
mov eax [ebp-224h] +
mov byte ptr [ebp-4] 5 +
test eax eax +
jz loc_102AFFB  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
test ebx ebx +
jl loc_102B0BE  +
mov eax [ebp-228h] +
mov dword ptr [eax] 0Bh +
cmp dword_104A3AC 0 +
jz loc_102B06B  +
mov al byte_104A3B0 +
cmp al 4 +
jnb loc_102B025  +
test al al +
jnz loc_102B06B  +
mov eax dword_104A398 +
mov ecx dword_104A39C +
and eax edi +
and ecx esi +
or eax ecx +
jz loc_102B06B  +
mov eax dword_104A3A0 +
mov ecx eax +
and ecx edi +
mov edi dword_104A3A4 +
mov edx edi +
and edx esi +
cmp ecx eax +
jnz loc_102B06B  +
cmp edx edi +
jnz loc_102B06B  +
push 0Bh  +
push offset aN  +
push dword_104A134  +
push dword_104A130  +
call sub_10379EB  +
push 1  +
call sub_1026D91  +
mov ebx eax +
test ebx ebx +
jge loc_102B0BE  +
push 0  +
lea ecx [ebp-250h] +
call sub_1026F3F  +
mov esi [ebp-220h] +
push 7D6h  +
lea eax [ebp-250h] +
push eax  +
mov ecx esi +
mov byte ptr [ebp-4] 0Bh +
call sub_102629D  +
mov eax [esi] +
push 0FFFFFFFFh  +
push dword ptr [esi+0Ch]  +
mov ecx esi +
push offset aSetupcomplet_0  +
call dword ptr [eax+10h]  +
lea ecx [ebp-250h] +
call sub_10261EA  +
push dword ptr [ebp-234h]  +
mov esi ds:SysFreeString +
call esi  +
push dword ptr [ebp-23Ch]  +
call esi  +
push dword ptr [ebp-230h]  +
call esi  +
push dword ptr [ebp-22Ch]  +
call esi  +
push dword ptr [ebp-238h]  +
call esi  +
push dword ptr [ebp-248h]  +
call ds:RegCloseKey  +
mov eax ebx +
call sub_1002FBC  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1003200  +
add esp 10h +
push eax  +
call sub_1003CD3  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+hResInfo]  +
push [ebp+hModule]  +
call ds:LoadResource  +
test eax eax +
jz loc_102B1C4  +
push esi  +
push eax  +
call ds:LockResource  +
mov esi eax +
test esi esi +
jz loc_102B1B6  +
push [ebp+hResInfo]  +
push [ebp+hModule]  +
call ds:SizeofResource  +
mov ecx [ebp+arg_8] +
add eax esi +
and ecx 0Fh +
jbe loc_102B1B2  +
cmp esi eax +
jnb loc_102B1B6  +
dec ecx  +
movzx edx word ptr [esi] +
lea esi [esi+edx*2+2] +
jnz loc_102B1A4  +
cmp esi eax +
jb loc_102B1BA  +
xor eax eax +
jmp loc_102B1C3  +
movzx eax word ptr [esi] +
neg eax  +
sbb eax eax +
and eax esi +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
shr eax 4 +
inc eax  +
movzx eax ax +
push 6  +
push eax  +
push [ebp+hModule]  +
call ds:FindResourceW  +
test eax eax +
jz loc_102B1F8  +
push [ebp+arg_4]  +
push eax  +
push [ebp+hModule]  +
call sub_102B16B  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
push dword ptr [ebp+wLanguage]  +
shr eax 4 +
inc eax  +
movzx eax ax +
push eax  +
push 6  +
push [ebp+hModule]  +
call ds:FindResourceExW  +
test eax eax +
jz loc_102B22F  +
push [ebp+arg_4]  +
push eax  +
push [ebp+hModule]  +
call sub_102B16B  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov esi offset unk_104A3B8 +
push 0  +
mov ecx esi +
call sub_103082C  +
xor ebx ebx +
inc ebx  +
jmp loc_102B26C  +
push dword ptr [ebp+wLanguage]  +
push [ebp+arg_0]  +
push edi  +
call sub_102B201  +
test eax eax +
jnz loc_102B279  +
push ebx  +
mov ecx esi +
call sub_103082C  +
inc ebx  +
mov edi eax +
test edi edi +
jnz loc_102B253  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
mov eax edi +
jmp loc_102B272  +
***
add bh bh +
adc eax offset DeleteCriticalSection +
retn   +
***
retn   +
***
call ss:off_104B7F0  +
and dword ptr [esi] 0 +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 40h +
mov edx [ebp+arg_14] +
push ebx  +
push esi  +
push edi  +
xor esi esi +
lea eax [ebp+arg_C] +
push 4  +
mov [ebp+var_40] eax +
pop eax  +
lea ecx [ebp+arg_10] +
mov [ebp+var_3C] esi +
mov [ebp+var_38] eax +
mov [ebp+var_34] esi +
mov [ebp+var_30] ecx +
mov [ebp+var_2C] esi +
mov [ebp+var_28] eax +
mov [ebp+var_24] esi +
cmp edx esi +
jz loc_102B30F  +
mov eax edx +
lea edi [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
cmp cx si +
jnz loc_102B2FB  +
sub eax edi +
sar eax 1 +
lea eax [eax+eax+2] +
jmp loc_102B312  +
push 0Ah  +
pop eax  +
mov ebx offset aNull +
cmp edx esi +
jnz loc_102B31D  +
mov edx ebx +
mov ecx [ebp+arg_18] +
mov [ebp+var_20] edx +
mov [ebp+var_1C] esi +
mov [ebp+var_18] eax +
mov [ebp+var_14] esi +
cmp ecx esi +
jz loc_102B349  +
mov eax ecx +
lea edi [eax+2] +
mov dx [eax] +
inc eax  +
inc eax  +
cmp dx si +
jnz loc_102B335  +
sub eax edi +
sar eax 1 +
lea eax [eax+eax+2] +
jmp loc_102B34C  +
push 0Ah  +
pop eax  +
cmp ecx esi +
jnz loc_102B352  +
mov ecx ebx +
mov [ebp+var_8] eax +
lea eax [ebp+var_40] +
push eax  +
push 4  +
push [ebp+arg_8]  +
mov [ebp+var_10] ecx +
push [ebp+arg_4]  +
mov [ebp+var_C] esi +
push [ebp+arg_0]  +
mov [ebp+var_4] esi +
call ds:EventWrite  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 1Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 30h +
mov ecx [ebp+arg_10] +
push ebx  +
push esi  +
push edi  +
xor edi edi +
lea eax [ebp+arg_C] +
mov [ebp+var_30] eax +
mov [ebp+var_2C] edi +
mov [ebp+var_28] 4 +
mov [ebp+var_24] edi +
cmp ecx edi +
jz loc_102B3BF  +
mov eax ecx +
lea esi [eax+2] +
mov dx [eax] +
inc eax  +
inc eax  +
cmp dx di +
jnz loc_102B3AB  +
sub eax esi +
sar eax 1 +
lea eax [eax+eax+2] +
jmp loc_102B3C2  +
push 0Ah  +
pop eax  +
mov ebx offset aNull +
cmp ecx edi +
jnz loc_102B3CD  +
mov ecx ebx +
mov esi [ebp+arg_14] +
mov [ebp+var_20] ecx +
mov [ebp+var_1C] edi +
mov [ebp+var_18] eax +
mov [ebp+var_14] edi +
cmp esi edi +
jz loc_102B3F9  +
mov eax esi +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
cmp cx di +
jnz loc_102B3E5  +
sub eax edx +
sar eax 1 +
lea eax [eax+eax+2] +
jmp loc_102B3FC  +
push 0Ah  +
pop eax  +
mov ecx esi +
cmp esi edi +
jnz loc_102B404  +
mov ecx ebx +
mov [ebp+var_8] eax +
lea eax [ebp+var_30] +
push eax  +
push 3  +
push [ebp+arg_8]  +
mov [ebp+var_10] ecx +
push [ebp+arg_4]  +
mov [ebp+var_C] edi +
push [ebp+arg_0]  +
mov [ebp+var_4] edi +
call ds:EventWrite  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 18h  +
***
push ebp  +
mov ebp esp +
mov eax off_104B7E0 +
mov ecx [eax] +
push 0  +
push dword ptr [ebp+8]  +
push 12h  +
push eax  +
call dword ptr [ecx+20h]  +
pop ebp  +
retn 4  +
***
push ebp  +
mov ebp esp +
mov eax off_104B7E0 +
mov ecx [eax] +
push 0  +
push dword ptr [ebp+8]  +
push 13h  +
push eax  +
call dword ptr [ecx+20h]  +
pop ebp  +
retn 4  +
***
push ebp  +
mov ebp esp +
mov eax off_104B7E0 +
mov ecx [eax] +
push 0  +
push dword ptr [ebp+8]  +
push 32h  +
push eax  +
call dword ptr [ecx+20h]  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_C] +
cmp eax 0FFFFFFFFh +
jnz loc_102B4B3  +
mov eax [ebp+arg_8] +
lea ecx [eax+2] +
mov dx [eax] +
inc eax  +
inc eax  +
test dx dx +
jnz loc_102B4A4  +
sub eax ecx +
sar eax 1 +
inc eax  +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_102B145  +
add esp 10h +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax off_104B7E0 +
mov ecx [eax] +
push 0  +
push [ebp+arg_0]  +
push 39h  +
push eax  +
call dword ptr [ecx+20h]  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax off_104B7E0 +
mov ecx [eax] +
push 0  +
push [ebp+arg_0]  +
push 38h  +
push eax  +
call dword ptr [ecx+20h]  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push ebx  +
xor ebx ebx +
cmp byte_104BB91 bl +
jnz loc_102B596  +
cmp byte_104BB90 bl +
jnz loc_102B596  +
lea eax [ebp+hKey] +
push eax  +
push 20019h  +
push ebx  +
push offset aSoftwareMicr_2  +
push 80000002h  +
mov byte_104BB91 1 +
mov [ebp+hKey] ebx +
call ds:RegOpenKeyExW  +
test eax eax +
jnz loc_102B596  +
lea eax [ebp+cbData] +
push eax  +
lea eax [ebp+Data] +
push eax  +
lea eax [ebp+Type] +
push eax  +
push ebx  +
push offset aEtwlogging  +
push [ebp+hKey]  +
mov [ebp+cbData] 4 +
call ds:RegQueryValueExW  +
test eax eax +
jnz loc_102B587  +
cmp [ebp+Type] 4 +
jnz loc_102B587  +
mov byte_104BB90 1 +
cmp dword ptr [ebp+Data] ebx +
ja loc_102B58D  +
mov byte_104BB90 bl +
push [ebp+hKey]  +
call ds:RegCloseKey  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
cmp [ebp+10h] eax +
jz loc_102B5D4  +
push dword ptr [ebp+10h]  +
add ecx 0CCh +
push dword ptr [ebp+0Ch]  +
call sub_1025CFD  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_1003904  +
test byte ptr [esi+1BAh] 2 +
jz loc_102B608  +
or eax 0FFFFFFFFh +
pop esi  +
retn   +
mov eax [esi+1C0h] +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
lea eax [ecx+10h] +
push eax  +
push 800h  +
push 40h  +
push dword ptr [ebp+8]  +
call sub_10127AB  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
mov esi ecx +
mov eax [esi+0Ch] +
push edi  +
mov edi [ebp+8] +
lea ecx [eax+eax+4] +
mov [ebp-8] ecx +
xor ebx ebx +
lea ecx [ebp-4] +
push ecx  +
push ebx  +
push dword ptr [ebp+0Ch]  +
inc eax  +
push edi  +
push eax  +
push dword ptr [esi+4]  +
mov [ebp-4] ebx +
push 400h  +
push ebx  +
call ds:WideCharToMultiByte  +
cmp [ebp-4] ebx +
jz loc_102B6B5  +
mov eax [ebp+0Ch] +
cmp eax ebx +
jnz loc_102B683  +
cmp edi ebx +
jnz loc_102B683  +
mov eax [ebp-8] +
jmp loc_102B6B5  +
cmp eax [ebp-8] +
jnb loc_102B694  +
push 7Ah  +
call ds:SetLastError  +
xor eax eax +
jmp loc_102B6B5  +
mov byte ptr [edi] 0FFh +
mov byte ptr [edi+1] 0FEh +
mov ebx [esi+0Ch] +
lea ebx [ebx+ebx+2] +
push ebx  +
push dword ptr [esi+4]  +
add edi 2 +
push edi  +
call memcpy  +
add esp 0Ch +
lea eax [ebx+2] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
push edi  +
xor edi edi +
lea eax [ebp-4] +
push eax  +
push edi  +
push edi  +
mov esi ecx +
mov eax [esi+0Ch] +
push edi  +
inc eax  +
push eax  +
push dword ptr [esi+4]  +
mov [ebp-4] edi +
push 400h  +
push edi  +
call ds:WideCharToMultiByte  +
cmp [ebp-4] edi +
jz loc_102B6F7  +
mov eax [esi+0Ch] +
lea eax [eax+eax+4] +
pop edi  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1003D18  +
test byte ptr [ebp+8] 1 +
jz loc_102B71A  +
push esi  +
call off_104B7F0  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_4] 4 +
jb loc_102B74F  +
mov eax [ebp+arg_0] +
mov cl [eax] +
test cl cl +
jz loc_102B74F  +
cmp cl 0FFh +
jnz loc_102B74F  +
mov al [eax+1] +
test al al +
jz loc_102B74F  +
cmp al 0FEh +
jnz loc_102B74F  +
xor eax eax +
inc eax  +
jmp loc_102B751  +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
cmp eax 0FFFFFFFFh +
jz loc_102B76E  +
add eax 0FFFFFFFCh +
shr eax 1 +
jmp loc_102B771  +
or eax 0FFFFFFFFh +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_1039171  +
mov dword ptr [esi] offset off_1002594 +
mov dword ptr [esi+4] offset off_10224F4 +
mov ecx dword_104A064 +
mov eax [ecx] +
call dword ptr [eax+4]  +
mov eax esi +
pop esi  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push 4  +
lea eax [ebp+arg_C] +
mov [ebp+var_20] eax +
pop eax  +
mov [ebp+var_18] eax +
mov [ebp+var_8] eax +
lea eax [ebp+var_20] +
push eax  +
push 2  +
push [ebp+arg_8]  +
xor ecx ecx +
push [ebp+arg_4]  +
lea edx [ebp+arg_10] +
push [ebp+arg_0]  +
mov [ebp+var_1C] ecx +
mov [ebp+var_14] ecx +
mov [ebp+var_10] edx +
mov [ebp+var_C] ecx +
mov [ebp+var_4] ecx +
call ds:EventWrite  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
push ebx  +
push esi  +
push edi  +
test eax eax +
jnz loc_102B870  +
mov ebx 80004003h +
cmp dword_104A3AC eax +
jz loc_102B86C  +
mov al byte_104A3B0 +
cmp al 4 +
jnb loc_102B819  +
test al al +
jnz loc_102B86C  +
mov edx dword_104A398 +
mov esi dword_104A39C +
mov ecx 20000h +
mov eax 80000000h +
and edx ecx +
and esi eax +
or edx esi +
jz loc_102B86C  +
mov edx dword_104A3A0 +
mov edi dword_104A3A4 +
mov esi edx +
and esi ecx +
mov ecx edi +
and ecx eax +
cmp esi edx +
jnz loc_102B86C  +
cmp ecx edi +
jnz loc_102B86C  +
push 0  +
push ebx  +
push offset dword_102B8F0  +
push dword_104A134  +
push dword_104A130  +
call sub_102B7A7  +
mov eax ebx +
jmp loc_102B8E3  +
mov ecx [ebp+arg_0] +
mov ebx [ecx+18h] +
mov [eax] ebx +
cmp dword_104A3AC 0 +
jz loc_102B8E1  +
mov al byte_104A3B0 +
cmp al 4 +
jnb loc_102B88E  +
test al al +
jnz loc_102B8E1  +
mov edx dword_104A398 +
mov esi dword_104A39C +
mov ecx 20000h +
mov eax 80000000h +
and edx ecx +
and esi eax +
or edx esi +
jz loc_102B8E1  +
mov edx dword_104A3A0 +
mov edi dword_104A3A4 +
mov esi edx +
and esi ecx +
mov ecx edi +
and ecx eax +
cmp esi edx +
jnz loc_102B8E1  +
cmp ecx edi +
jnz loc_102B8E1  +
push ebx  +
push 0  +
push offset dword_102B8F0  +
push dword_104A134  +
push dword_104A130  +
call sub_102B7A7  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
push ebx  +
push esi  +
push edi  +
test eax eax +
jnz loc_102B985  +
mov ebx 80004003h +
cmp dword_104A3AC eax +
jz loc_102B981  +
mov al byte_104A3B0 +
cmp al 4 +
jnb loc_102B92E  +
test al al +
jnz loc_102B981  +
mov edx dword_104A398 +
mov esi dword_104A39C +
mov ecx 20000h +
mov eax 80000000h +
and edx ecx +
and esi eax +
or edx esi +
jz loc_102B981  +
mov edx dword_104A3A0 +
mov edi dword_104A3A4 +
mov esi edx +
and esi ecx +
mov ecx edi +
and ecx eax +
cmp esi edx +
jnz loc_102B981  +
cmp ecx edi +
jnz loc_102B981  +
push 0  +
push ebx  +
push offset dword_102BA00  +
push dword_104A134  +
push dword_104A130  +
call sub_102B7A7  +
mov eax ebx +
jmp loc_102B9F8  +
mov ecx [ebp+arg_0] +
mov ebx [ecx+1Ch] +
mov [eax] ebx +
cmp dword_104A3AC 0 +
jz loc_102B9F6  +
mov al byte_104A3B0 +
cmp al 4 +
jnb loc_102B9A3  +
test al al +
jnz loc_102B9F6  +
mov edx dword_104A398 +
mov esi dword_104A39C +
mov ecx 20000h +
mov eax 80000000h +
and edx ecx +
and esi eax +
or edx esi +
jz loc_102B9F6  +
mov edx dword_104A3A0 +
mov edi dword_104A3A4 +
mov esi edx +
and esi ecx +
mov ecx edi +
and ecx eax +
cmp esi edx +
jnz loc_102B9F6  +
cmp ecx edi +
jnz loc_102B9F6  +
push ebx  +
push 0  +
push offset dword_102BA00  +
push dword_104A134  +
push dword_104A130  +
call sub_102B7A7  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_1002594 +
mov dword ptr [esi+4] offset off_10224F4 +
mov dword ptr [esi+8] 0C0000001h +
mov ecx dword_104A064 +
mov eax [ecx] +
call dword ptr [eax+8]  +
mov ecx esi +
pop esi  +
jmp sub_10391AB  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+8] +
push edi  +
lea eax [esi+8] +
push eax  +
call ds:InterlockedDecrement  +
mov edi eax +
test edi edi +
jnz loc_102BA6D  +
test esi esi +
jz loc_102BA6D  +
mov eax [esi] +
push 1  +
mov ecx esi +
call dword ptr [eax+1Ch]  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_102BA15  +
test [ebp+arg_0] 1 +
jz loc_102BA94  +
push esi  +
call off_104B7F0  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_C] +
add eax eax +
push eax  +
push [ebp+arg_8]  +
mov eax [ebp+arg_4] +
add eax eax +
push eax  +
push [ebp+arg_0]  +
call memmove_s  +
add esp 10h +
pop ebp  +
retn   +
***
int 3  +
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+arg_0]  +
call sub_102B238  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_10028DA  +
mov eax [ebp+arg_0] +
mov [esi+4] eax +
mov dword ptr [esi] offset off_102BB10 +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov eax [eax+4] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov eax [eax+4] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+10h]  +
mov eax [ebp+8] +
mov eax [eax+4] +
push dword ptr [ebp+0Ch]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx]  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1008D81  +
mov eax [ebp+arg_0] +
mov [esi+8] eax +
mov dword ptr [esi] offset off_102BBD0 +
mov dword ptr [esi+4] offset off_1008908 +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+10h]  +
mov eax [ebp+8] +
mov eax [eax+8] +
push dword ptr [ebp+0Ch]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx]  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1039171  +
mov eax [ebp+arg_0] +
mov [esi+8] eax +
mov dword ptr [esi] offset off_102BC80 +
mov dword ptr [esi+4] offset off_10224F4 +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov eax [eax+8] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov eax [eax+8] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+lpArguments] +
push esi  +
test ebx ebx +
jnz loc_102BCF2  +
push ebx  +
push ebx  +
push 1  +
push 0C0000005h  +
call ds:RaiseException  +
mov esi [ebx+8] +
test esi esi +
jz loc_102BD10  +
push edi  +
push dword ptr [esi+4]  +
call dword ptr [esi]  +
mov edi [esi+8] +
push esi  +
call off_104B7F0  +
mov esi edi +
test edi edi +
jnz loc_102BCFA  +
pop edi  +
and dword ptr [ebx+8] 0 +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_4] 0 +
mov ecx dword_104A064 +
mov eax [ecx] +
jz loc_102BD37  +
call dword ptr [eax+4]  +
jmp loc_102BD3A  +
call dword ptr [eax+8]  +
xor eax eax +
pop ebp  +
retn 8  +
***
add ecx 10h +
jmp sub_1003D18  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_4] +
test esi esi +
jnz loc_102BD6C  +
mov eax 80004003h +
jmp loc_102BD78  +
mov ecx [ebp+arg_0] +
call sub_10146CC  +
mov [esi] eax +
xor eax eax +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_0]  +
call ds:__imp_free  +
pop ecx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
test esi esi +
jnz loc_102BDAB  +
xor eax eax +
jmp loc_102BDCE  +
mov eax [ebp+arg_4] +
push edi  +
mov edi [esi] +
and dword ptr [esi] 0 +
test eax eax +
jz loc_102BDC1  +
mov ecx [eax] +
push esi  +
push [ebp+arg_8]  +
push eax  +
call dword ptr [ecx]  +
test edi edi +
jz loc_102BDCB  +
mov eax [edi] +
push edi  +
call dword ptr [eax+8]  +
mov eax [esi] +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push offset stru_1001EA4  +
push [ebp+arg_4]  +
call sub_1001799  +
test eax eax +
jnz loc_102BE13  +
push offset dword_1002054  +
push [ebp+arg_4]  +
call sub_1001799  +
test eax eax +
jnz loc_102BE13  +
push offset stru_1001EB4  +
push [ebp+arg_4]  +
call sub_1001799  +
test eax eax +
jnz loc_102BE13  +
inc eax  +
jmp loc_102BE15  +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push esi  +
mov esi ecx +
jmp loc_102BE31  +
mov eax [esi] +
mov ecx [eax] +
push eax  +
mov [esi] ecx +
call sub_102BD82  +
cmp dword ptr [esi] 0 +
jnz loc_102BE25  +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
push dword ptr [esi]  +
call ds:LeaveCriticalSection  +
mov byte ptr [esi+4] 0 +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+8] +
test esi esi +
jz loc_102BE80  +
mov eax [esi+0Ch] +
test eax eax +
jz loc_102BE6A  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov ecx [esi+14h] +
and dword ptr [esi+0Ch] 0 +
test ecx ecx +
jz loc_102BE7C  +
push 3  +
call sub_1025B8D  +
and dword ptr [esi+14h] 0 +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax+20h] +
push [ebp+arg_4]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+20h]  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax+20h] +
push [ebp+arg_4]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+24h]  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax+20h] +
push [ebp+arg_4]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+2Ch]  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax+20h] +
push [ebp+arg_4]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+28h]  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax+20h] +
push [ebp+arg_4]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+30h]  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax+20h] +
push [ebp+arg_4]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+34h]  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax+20h] +
push [ebp+arg_4]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+50h]  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax+20h] +
push [ebp+arg_4]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+40h]  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax+20h] +
push [ebp+arg_4]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+44h]  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax+20h] +
push [ebp+arg_4]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+48h]  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax+20h] +
push [ebp+arg_4]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4Ch]  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax+20h] +
push [ebp+arg_4]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+38h]  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax+20h] +
push [ebp+arg_4]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+3Ch]  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax+20h] +
push [ebp+arg_4]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+58h]  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax+20h] +
push [ebp+arg_4]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+54h]  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax+20h] +
push [ebp+arg_4]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+60h]  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax+20h] +
push [ebp+arg_4]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+5Ch]  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax+20h] +
push [ebp+arg_4]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+68h]  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax+20h] +
push [ebp+arg_4]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+64h]  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax+20h] +
push [ebp+arg_4]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+70h]  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax+20h] +
push [ebp+arg_4]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+6Ch]  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_8]  +
mov eax [ebp+arg_0] +
mov eax [eax+1Ch] +
push [ebp+arg_4]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+0BCh]  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_8]  +
mov eax [ebp+arg_0] +
mov eax [eax+1Ch] +
push [ebp+arg_4]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+0C0h]  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_8]  +
mov eax [ebp+arg_0] +
mov eax [eax+1Ch] +
push [ebp+arg_4]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+0C4h]  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_8]  +
mov eax [ebp+arg_0] +
mov eax [eax+1Ch] +
push [ebp+arg_4]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+0C8h]  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax+20h] +
push [ebp+arg_4]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+74h]  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_8]  +
mov eax [ebp+arg_0] +
mov eax [eax+20h] +
push [ebp+arg_4]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+78h]  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax+20h] +
push [ebp+arg_4]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+7Ch]  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_8]  +
mov eax [ebp+arg_0] +
mov eax [eax+20h] +
push [ebp+arg_4]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+80h]  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax+1Ch] +
push [ebp+arg_4]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+0A8h]  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_8]  +
mov eax [ebp+arg_0] +
mov eax [eax+1Ch] +
push [ebp+arg_4]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+0ACh]  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax+20h] +
push [ebp+arg_4]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+84h]  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax+20h] +
push [ebp+arg_4]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+88h]  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax+20h] +
push [ebp+arg_4]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8Ch]  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax+20h] +
push [ebp+arg_4]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+90h]  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax+20h] +
push [ebp+arg_4]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+94h]  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_14]  +
mov eax [ebp+arg_0] +
push [ebp+arg_10]  +
mov eax [eax+20h] +
push [ebp+arg_C]  +
mov ecx [eax] +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push eax  +
call dword ptr [ecx+98h]  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax+20h] +
push [ebp+arg_4]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+9Ch]  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_8]  +
mov eax [ebp+arg_0] +
mov eax [eax+1Ch] +
push [ebp+arg_4]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+0B0h]  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax+1Ch] +
push [ebp+arg_4]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+0B4h]  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax+20h] +
push [ebp+arg_4]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+0A4h]  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax+20h] +
push [ebp+arg_4]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+0A0h]  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax+18h] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+0CCh]  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax+18h] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+0D0h]  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax+1Ch] +
push [ebp+arg_4]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+0Ch]  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push offset stru_1012BB0  +
push [ebp+arg_4]  +
call sub_1001799  +
neg eax  +
sbb eax eax +
inc eax  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax+1Ch] +
push [ebp+arg_4]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+20h]  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax+1Ch] +
push [ebp+arg_4]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+24h]  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_10]  +
mov eax [ebp+arg_0] +
push [ebp+arg_C]  +
mov eax [eax+1Ch] +
push [ebp+arg_8]  +
mov ecx [eax] +
push [ebp+arg_4]  +
push eax  +
call dword ptr [ecx+2Ch]  +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_8]  +
mov eax [ebp+arg_0] +
mov eax [eax+18h] +
push [ebp+arg_4]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+10h]  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax+18h] +
push [ebp+arg_4]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+14h]  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax+18h] +
push [ebp+arg_4]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+18h]  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax+18h] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+20h]  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax+18h] +
push [ebp+arg_4]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+0Ch]  +
pop ebp  +
retn 8  +
***
mov dword ptr [ecx] offset off_102C524 +
mov ecx [ecx+10h] +
test ecx ecx +
jz locret_102C521  +
mov eax [ecx] +
push ecx  +
call dword ptr [eax+8]  +
retn   +
***
add ecx 10h +
push ecx  +
push offset stru_10157A0  +
push 1  +
push 0  +
push offset stru_1015B34  +
call ds:CoCreateInstance  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_18]  +
mov eax [ebp+arg_0] +
push [ebp+arg_14]  +
mov eax [eax+10h] +
push [ebp+arg_10]  +
mov ecx [eax] +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push eax  +
call dword ptr [ecx+0Ch]  +
pop ebp  +
retn 1Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_10]  +
mov eax [ebp+arg_0] +
push [ebp+arg_C]  +
mov eax [eax+10h] +
push [ebp+arg_8]  +
mov ecx [eax] +
push [ebp+arg_4]  +
push eax  +
call dword ptr [ecx+10h]  +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push offset off_102C5C8  +
push ecx  +
call sub_10017D5  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
test eax eax +
jnz loc_102C5F8  +
mov eax 80004003h +
jmp loc_102C600  +
mov dword ptr [eax] 1 +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax 36B8h +
call sub_100A16A  +
mov eax dword_104A044 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_10] +
mov ecx [ebp+arg_C] +
push esi  +
push edi  +
push dword ptr [eax]  +
mov edi [ebp+arg_8] +
push ecx  +
mov esi 0DACh +
push esi  +
lea eax [ebp+var_1B5C] +
push eax  +
mov [ebp+var_36B8] edi +
call sub_1026AA5  +
test eax eax +
jl loc_102C966  +
cmp [ebp+arg_4] 0FFFFFFFFh +
push ebx  +
jnz loc_102C65F  +
test edi edi +
jnz loc_102C65F  +
xor bl bl +
jmp loc_102C661  +
mov bl 1 +
cmp byte_104BB90 0 +
jz loc_102C746  +
cmp [ebp+arg_0] 0 +
jl loc_102C6D4  +
test bl bl +
jz loc_102C6AF  +
mov eax edi +
test edi edi +
jnz loc_102C683  +
mov eax offset word_100348C +
push eax  +
push [ebp+arg_4]  +
lea eax [ebp+var_1B5C] +
push eax  +
call ds:GetCurrentThreadId  +
push eax  +
push offset a4dSWidDS  +
lea eax [ebp+OutputString] +
push esi  +
push eax  +
call sub_100A257  +
add esp 1Ch +
jmp loc_102C735  +
lea eax [ebp+var_1B5C] +
push eax  +
call ds:GetCurrentThreadId  +
push eax  +
push offset a4dS  +
lea eax [ebp+OutputString] +
push esi  +
push eax  +
call sub_100A257  +
add esp 14h +
jmp loc_102C735  +
test bl bl +
jz loc_102C70F  +
mov eax edi +
test edi edi +
jnz loc_102C6E3  +
mov eax offset word_100348C +
push eax  +
push [ebp+arg_4]  +
lea eax [ebp+var_1B5C] +
push eax  +
push [ebp+arg_0]  +
call ds:GetCurrentThreadId  +
push eax  +
push offset a4dFailed08xSWi  +
lea eax [ebp+OutputString] +
push esi  +
push eax  +
call sub_100A257  +
add esp 20h +
jmp loc_102C735  +
lea eax [ebp+var_1B5C] +
push eax  +
push [ebp+arg_0]  +
call ds:GetCurrentThreadId  +
push eax  +
push offset a4dFailed08xS  +
lea eax [ebp+OutputString] +
push esi  +
push eax  +
call sub_100A257  +
add esp 18h +
test eax eax +
jl loc_102C746  +
lea eax [ebp+OutputString] +
push eax  +
call ds:OutputDebugStringW  +
xor eax eax +
cmp [ebp+arg_0] eax +
jl loc_102C866  +
test bl bl +
jz loc_102C7E4  +
cmp dword_104A3AC eax +
jz loc_102C965  +
mov al byte_104A3B0 +
cmp al 4 +
jnb loc_102C776  +
test al al +
jnz loc_102C965  +
mov ecx dword_104A398 +
mov edx dword_104A39C +
mov eax 80000000h +
and ecx 4 +
and edx eax +
or ecx edx +
jz loc_102C965  +
mov ecx dword_104A3A0 +
mov edi dword_104A3A4 +
mov edx ecx +
mov esi edi +
and edx 4 +
and esi eax +
cmp edx ecx +
jnz loc_102C965  +
cmp esi edi +
jnz loc_102C965  +
lea eax [ebp+var_1B5C] +
push eax  +
push [ebp+var_36B8]  +
push [ebp+arg_4]  +
push offset dword_102C988  +
push dword_104A134  +
push dword_104A130  +
call sub_102B37F  +
jmp loc_102C965  +
cmp dword_104A3AC eax +
jz loc_102C965  +
mov al byte_104A3B0 +
cmp al 4 +
jnb loc_102C801  +
test al al +
jnz loc_102C965  +
mov ecx dword_104A398 +
mov edx dword_104A39C +
mov eax 80000000h +
and ecx 4 +
and edx eax +
or ecx edx +
jz loc_102C965  +
mov ecx dword_104A3A0 +
mov edi dword_104A3A4 +
mov edx ecx +
mov esi edi +
and edx 4 +
and esi eax +
cmp edx ecx +
jnz loc_102C965  +
cmp esi edi +
jnz loc_102C965  +
lea eax [ebp+var_1B5C] +
push eax  +
push offset dword_1022310  +
push dword_104A134  +
push dword_104A130  +
call sub_10263C4  +
jmp loc_102C965  +
test bl bl +
jz loc_102C8F9  +
cmp dword_104A3AC eax +
jz loc_102C965  +
mov al byte_104A3B0 +
cmp al 4 +
jnb loc_102C88B  +
test al al +
jnz loc_102C965  +
mov ecx dword_104A398 +
mov edx dword_104A39C +
mov eax 80000000h +
and ecx 4 +
and edx eax +
or ecx edx +
jz loc_102C965  +
mov ecx dword_104A3A0 +
mov edi dword_104A3A4 +
mov edx ecx +
mov esi edi +
and edx 4 +
and esi eax +
cmp edx ecx +
jnz loc_102C965  +
cmp esi edi +
jnz loc_102C965  +
lea eax [ebp+var_1B5C] +
push eax  +
push [ebp+var_36B8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push offset dword_102C998  +
push dword_104A134  +
push dword_104A130  +
call sub_102B2C1  +
jmp loc_102C965  +
cmp dword_104A3AC eax +
jz loc_102C965  +
mov al byte_104A3B0 +
cmp al 4 +
jnb loc_102C90E  +
test al al +
jnz loc_102C965  +
mov ecx dword_104A398 +
mov edx dword_104A39C +
mov eax 80000000h +
and ecx 4 +
and edx eax +
or ecx edx +
jz loc_102C965  +
mov ecx dword_104A3A0 +
mov edi dword_104A3A4 +
mov edx ecx +
mov esi edi +
and edx 4 +
and esi eax +
cmp edx ecx +
jnz loc_102C965  +
cmp esi edi +
jnz loc_102C965  +
lea eax [ebp+var_1B5C] +
push eax  +
push [ebp+arg_0]  +
push offset dword_102C978  +
push dword_104A134  +
push dword_104A130  +
call sub_1026426  +
pop ebx  +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_1002A8B  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+8] +
push edi  +
push dword ptr [ebp+10h]  +
mov edi ecx +
push esi  +
call sub_102B726  +
push dword ptr [ebp+10h]  +
mov ecx edi +
test eax eax +
jz loc_102CA8D  +
call sub_102B75A  +
push eax  +
push dword ptr [ebp+0Ch]  +
add esi 2 +
push esi  +
mov ecx edi +
call sub_1002D49  +
jmp loc_102CA96  +
push dword ptr [ebp+0Ch]  +
push esi  +
call sub_103394D  +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push offset off_102CABC  +
push ecx  +
call sub_10017D5  +
pop ebp  +
retn 8  +
***
call sub_1001862  +
mov eax [ebp+10h] +
xor esi esi +
cmp eax esi +
jnz loc_102CAF5  +
mov eax 80004003h +
jmp loc_102CB51  +
push 24h  +
mov [eax] esi +
mov dword ptr [ebp-14h] 8007000Eh +
mov [ebp-18h] esi +
mov [ebp-4] esi +
call off_104B7F4  +
cmp eax esi +
jz loc_102CB1C  +
push dword ptr [ebp+8]  +
mov ecx eax +
call sub_102B77A  +
mov esi eax +
or dword ptr [ebp-4] 0FFFFFFFFh +
jmp loc_102CB2F  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov eax offset loc_102CB2C +
retn   +
mov esi [ebp-18h] +
test esi esi +
jz loc_102CB4E  +
push dword ptr [ebp+10h]  +
mov eax [esi] +
push dword ptr [ebp+0Ch]  +
push esi  +
call dword ptr [eax]  +
mov [ebp-14h] eax +
test eax eax +
jz loc_102CB4E  +
mov eax [esi] +
push 1  +
mov ecx esi +
call dword ptr [eax+1Ch]  +
mov eax [ebp-14h] +
call sub_10015C0  +
retn 0Ch  +
***
mov edi edi +
push esi  +
mov esi ecx +
and dword ptr [esi+4] 0 +
and dword ptr [esi+10h] 0 +
mov dword ptr [esi] offset off_1001998 +
mov ecx dword_104A064 +
mov eax [ecx] +
call dword ptr [eax+4]  +
mov eax esi +
pop esi  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+8] +
push edi  +
lea eax [esi+4] +
push eax  +
call ds:InterlockedDecrement  +
mov edi eax +
test edi edi +
jnz loc_102CBAE  +
test esi esi +
jz loc_102CBAE  +
mov eax [esi] +
push 1  +
mov ecx esi +
call dword ptr [eax+14h]  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push offset off_102CBD8  +
push ecx  +
call sub_10017D5  +
pop ebp  +
retn 8  +
***
mov edi edi +
push esi  +
mov esi ecx +
push 0  +
lea ecx [esi+10h] +
mov dword ptr [esi] offset off_1001998 +
mov dword ptr [esi+4] 0C0000001h +
call sub_1001669  +
mov ecx dword_104A064 +
mov eax [ecx] +
call dword ptr [eax+8]  +
mov ecx esi +
pop esi  +
jmp sub_102C50E  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+10h]  +
mov ecx [ebp+8] +
push dword ptr [ebp+0Ch]  +
call sub_102CBBB  +
pop ebp  +
retn 0Ch  +
***
call sub_10015E0  +
mov esi ecx +
mov [ebp-10h] esi +
and dword ptr [esi+4] 0 +
push dword ptr [ebp+8]  +
lea ecx [esi+0Ch] +
mov dword ptr [esi] offset off_100189C +
call sub_102BAEE  +
mov ecx dword_104A064 +
mov eax [ecx] +
and dword ptr [ebp-4] 0 +
call dword ptr [eax+4]  +
mov eax esi +
call sub_10015C0  +
retn 4  +
***
call sub_10015E0  +
mov esi ecx +
mov [ebp-10h] esi +
mov dword ptr [esi] offset off_100189C +
and dword ptr [ebp-4] 0 +
mov dword ptr [esi+4] 0C0000001h +
mov ecx dword_104A064 +
mov eax [ecx] +
call dword ptr [eax+8]  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [esi+0Ch] +
call sub_10024AB  +
call sub_10015C0  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+10h] +
push edi  +
xor edi edi +
cmp esi edi +
jnz loc_102CCE4  +
mov eax 80004003h +
jmp loc_102CD12  +
push dword ptr [ebp+0Ch]  +
mov [esi] edi +
call sub_10017B9  +
test eax eax +
jz loc_102CCFF  +
mov eax [ebp+8] +
mov [esi] eax +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
jmp loc_102CD10  +
mov ecx [ebp+8] +
push esi  +
push dword ptr [ebp+0Ch]  +
add ecx 0Ch +
call sub_10024DE  +
mov edi eax +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
call sub_10015E0  +
mov esi ecx +
mov [ebp-10h] esi +
and dword ptr [esi+4] 0 +
push dword ptr [ebp+8]  +
lea ecx [esi+0Ch] +
mov dword ptr [esi] offset off_10018AC +
call sub_102BBA8  +
mov ecx dword_104A064 +
mov eax [ecx] +
and dword ptr [ebp-4] 0 +
call dword ptr [eax+4]  +
mov eax esi +
call sub_10015C0  +
retn 4  +
***
call sub_10015E0  +
mov esi ecx +
mov [ebp-10h] esi +
mov dword ptr [esi] offset off_10018AC +
and dword ptr [ebp-4] 0 +
mov dword ptr [esi+4] 0C0000001h +
mov ecx dword_104A064 +
mov eax [ecx] +
call dword ptr [eax+8]  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [esi+0Ch] +
call sub_1008999  +
call sub_10015C0  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+10h] +
push edi  +
xor edi edi +
cmp esi edi +
jnz loc_102CDBC  +
mov eax 80004003h +
jmp loc_102CDEA  +
push dword ptr [ebp+0Ch]  +
mov [esi] edi +
call sub_10017B9  +
test eax eax +
jz loc_102CDD7  +
mov eax [ebp+8] +
mov [esi] eax +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
jmp loc_102CDE8  +
mov ecx [ebp+8] +
push esi  +
push dword ptr [ebp+0Ch]  +
add ecx 0Ch +
call sub_1008DD3  +
mov edi eax +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+10h]  +
mov ecx [ebp+8] +
push dword ptr [ebp+0Ch]  +
call sub_102C5AD  +
pop ebp  +
retn 0Ch  +
***
call sub_10015E0  +
mov esi ecx +
mov [ebp-10h] esi +
and dword ptr [esi+4] 0 +
push dword ptr [ebp+8]  +
lea ecx [esi+0Ch] +
mov dword ptr [esi] offset off_10018BC +
call sub_102BC58  +
mov ecx dword_104A064 +
mov eax [ecx] +
and dword ptr [ebp-4] 0 +
call dword ptr [eax+4]  +
mov eax esi +
call sub_10015C0  +
retn 4  +
***
call sub_10015E0  +
mov esi ecx +
mov [ebp-10h] esi +
mov dword ptr [esi] offset off_10018BC +
and dword ptr [ebp-4] 0 +
mov dword ptr [esi+4] 0C0000001h +
mov ecx dword_104A064 +
mov eax [ecx] +
call dword ptr [eax+8]  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [esi+0Ch] +
call sub_10391AB  +
call sub_10015C0  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+10h] +
push edi  +
xor edi edi +
cmp esi edi +
jnz loc_102CEB0  +
mov eax 80004003h +
jmp loc_102CEDE  +
push dword ptr [ebp+0Ch]  +
mov [esi] edi +
call sub_10017B9  +
test eax eax +
jz loc_102CECB  +
mov eax [ebp+8] +
mov [esi] eax +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
jmp loc_102CEDC  +
mov ecx [ebp+8] +
push esi  +
push dword ptr [ebp+0Ch]  +
add ecx 0Ch +
call sub_102C5AD  +
mov edi eax +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_102CBF5  +
test byte ptr [ebp+8] 1 +
jz loc_102CF03  +
push esi  +
call off_104B7F0  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_102CC89  +
test byte ptr [ebp+8] 1 +
jz loc_102CF29  +
push esi  +
call off_104B7F0  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_102CD61  +
test byte ptr [ebp+8] 1 +
jz loc_102CF4F  +
push esi  +
call off_104B7F0  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_102CE55  +
test byte ptr [ebp+8] 1 +
jz loc_102CF75  +
push esi  +
call off_104B7F0  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax ecx +
and dword ptr [eax+4] 0 +
and dword ptr [eax+10h] 0 +
mov ecx [ebp+arg_0] +
mov dword ptr [eax] offset off_102CFA0 +
mov [eax+4] ecx +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
cmp byte_104BB91 0 +
jnz loc_102CFDD  +
call sub_102B50C  +
cmp byte_104BB90 0 +
jnz loc_102D001  +
push offset dword_1022310  +
push dword_104A134  +
push dword_104A130  +
call ds:EventEnabled  +
test al al +
jz locret_102D019  +
lea eax [ebp+arg_4] +
mov [ebp+var_4] eax +
lea eax [ebp+var_4] +
push eax  +
push [ebp+arg_0]  +
push 0  +
push 0FFFFFFFFh  +
push 0  +
call sub_102C609  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_8] +
test eax eax +
jnz loc_102D031  +
mov eax offset loc_102D108 +
push eax  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push offset aCnlbaseexcepti  +
call sub_102CFC9  +
add esp 10h +
pop ebp  +
retn 0Ch  +
***
call sub_1001862  +
mov eax [ebp+10h] +
xor esi esi +
cmp eax esi +
jnz loc_102D12D  +
mov eax 80004003h +
jmp loc_102D1AF  +
mov ebx 8007000Eh +
push 14h  +
mov [eax] esi +
mov [ebp-14h] ebx +
mov [ebp-18h] esi +
mov [ebp-4] esi +
call off_104B7F4  +
cmp eax esi +
jz loc_102D155  +
push dword ptr [ebp+8]  +
mov ecx eax +
call sub_102CB5E  +
mov esi eax +
or dword ptr [ebp-4] 0FFFFFFFFh +
jmp loc_102D16B  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov eax offset loc_102D165 +
retn   +
mov ebx [ebp-14h] +
mov esi [ebp-18h] +
test esi esi +
jz loc_102D1AD  +
lea edi [esi+4] +
push edi  +
call ds:InterlockedIncrement  +
mov ecx esi +
call sub_102C53D  +
mov ebx eax +
test ebx ebx +
jl loc_102D188  +
xor ebx ebx +
push edi  +
call ds:InterlockedDecrement  +
test ebx ebx +
jnz loc_102D1A4  +
push dword ptr [ebp+10h]  +
mov eax [esi] +
push dword ptr [ebp+0Ch]  +
push esi  +
call dword ptr [eax]  +
mov ebx eax +
test ebx ebx +
jz loc_102D1AD  +
mov eax [esi] +
push 1  +
mov ecx esi +
call dword ptr [eax+14h]  +
mov eax ebx +
call sub_10015C0  +
retn 0Ch  +
***
push 10h  +
mov eax offset dword_103FCF8 +
call sub_1001862  +
mov eax [ebp+10h] +
xor esi esi +
cmp eax esi +
jnz loc_102D1D8  +
mov eax 80004003h +
jmp loc_102D23B  +
push 24h  +
mov [eax] esi +
mov dword ptr [ebp-14h] 8007000Eh +
mov [ebp-18h] esi +
mov [ebp-4] esi +
call off_104B7F4  +
mov ecx eax +
mov [ebp-1Ch] ecx +
mov byte ptr [ebp-4] 1 +
cmp ecx esi +
jz loc_102D206  +
push dword ptr [ebp+8]  +
call sub_102CC45  +
mov esi eax +
or dword ptr [ebp-4] 0FFFFFFFFh +
jmp loc_102D219  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov eax offset loc_102D216 +
retn   +
***
mov esi [ebp-18h] +
test esi esi +
jz loc_102D238  +
push dword ptr [ebp+10h]  +
mov eax [esi] +
push dword ptr [ebp+0Ch]  +
push esi  +
call dword ptr [eax]  +
mov [ebp-14h] eax +
test eax eax +
jz loc_102D238  +
mov eax [esi] +
push 1  +
mov ecx esi +
call dword ptr [eax+0Ch]  +
mov eax [ebp-14h] +
call sub_10015C0  +
retn 0Ch  +
***
push 10h  +
mov eax offset dword_103FD60 +
call sub_1001862  +
mov eax [ebp+10h] +
xor esi esi +
cmp eax esi +
jnz loc_102D264  +
mov eax 80004003h +
jmp loc_102D2C7  +
push 50h  +
mov [eax] esi +
mov dword ptr [ebp-14h] 8007000Eh +
mov [ebp-18h] esi +
mov [ebp-4] esi +
call off_104B7F4  +
mov ecx eax +
mov [ebp-1Ch] ecx +
mov byte ptr [ebp-4] 1 +
cmp ecx esi +
jz loc_102D292  +
push dword ptr [ebp+8]  +
call sub_102CD1D  +
mov esi eax +
or dword ptr [ebp-4] 0FFFFFFFFh +
jmp loc_102D2A5  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov eax offset loc_102D2A2 +
retn   +
***
mov esi [ebp-18h] +
test esi esi +
jz loc_102D2C4  +
push dword ptr [ebp+10h]  +
mov eax [esi] +
push dword ptr [ebp+0Ch]  +
push esi  +
call dword ptr [eax]  +
mov [ebp-14h] eax +
test eax eax +
jz loc_102D2C4  +
mov eax [esi] +
push 1  +
mov ecx esi +
call dword ptr [eax+0Ch]  +
mov eax [ebp-14h] +
call sub_10015C0  +
retn 0Ch  +
***
push 10h  +
mov eax offset dword_103FDC8 +
call sub_1001862  +
mov eax [ebp+arg_8] +
xor esi esi +
cmp eax esi +
jnz loc_102D2F0  +
mov eax 80004003h +
jmp loc_102D353  +
push 30h  +
mov [eax] esi +
mov [ebp+var_14] 8007000Eh +
mov [ebp+var_18] esi +
mov [ebp+var_4] esi +
call off_104B7F4  +
mov ecx eax +
mov [ebp+var_1C] ecx +
mov byte ptr [ebp+var_4] 1 +
cmp ecx esi +
jz loc_102D31E  +
push [ebp+arg_0]  +
call sub_102CE11  +
mov esi eax +
or [ebp+var_4] 0FFFFFFFFh +
jmp loc_102D331  +
***
or dword ptr [ebp-4] 0FFFFFFFFh +
mov eax offset loc_102D32E +
retn   +
***
mov esi [ebp-18h] +
***
test esi esi +
jz loc_102D350  +
push [ebp+arg_8]  +
mov eax [esi] +
push [ebp+arg_4]  +
push esi  +
call dword ptr [eax]  +
mov [ebp+var_14] eax +
test eax eax +
jz loc_102D350  +
mov eax [esi] +
push 1  +
mov ecx esi +
call dword ptr [eax+0Ch]  +
mov eax [ebp+var_14] +
call sub_10015C0  +
retn 0Ch  +
***
sub dword ptr [esp+4] 0Ch +
jmp loc_10124B5  +
***
sub dword ptr [esp+4] 4 +
jmp loc_1012BC5  +
***
sub dword ptr [esp+4] 0Ch +
jmp loc_1012BC5  +
***
sub dword ptr [esp+4] 4 +
jmp loc_10124B5  +
***
sub dword ptr [esp+4] 4 +
jmp loc_1012B1D  +
***
sub dword ptr [esp+4] 0Ch +
jmp loc_1012B1D  +
***
call sub_10015E0  +
mov esi ecx +
mov [ebp-10h] esi +
and dword ptr [esi+4] 0 +
push dword ptr [ebp+8]  +
lea ecx [esi+0Ch] +
mov dword ptr [esi] offset off_10018CC +
call sub_102CF81  +
mov ecx dword_104A064 +
mov eax [ecx] +
and dword ptr [ebp-4] 0 +
call dword ptr [eax+4]  +
mov eax esi +
call sub_10015C0  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+8] +
push edi  +
lea eax [esi+4] +
push eax  +
call ds:InterlockedDecrement  +
mov edi eax +
test edi edi +
jnz loc_102D425  +
test esi esi +
jz loc_102D425  +
mov eax [esi] +
push 1  +
mov ecx esi +
call dword ptr [eax+0Ch]  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+10h] +
push edi  +
xor edi edi +
cmp esi edi +
jnz loc_102D449  +
mov eax 80004003h +
jmp loc_102D477  +
push dword ptr [ebp+0Ch]  +
mov [esi] edi +
call sub_10017B9  +
test eax eax +
jz loc_102D464  +
mov eax [ebp+8] +
mov [esi] eax +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
jmp loc_102D475  +
mov ecx [ebp+8] +
push esi  +
push dword ptr [ebp+0Ch]  +
add ecx 0Ch +
call sub_102CBBB  +
mov edi eax +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
call sub_10015E0  +
mov esi ecx +
mov [ebp-10h] esi +
mov dword ptr [esi] offset off_10018CC +
and dword ptr [ebp-4] 0 +
push 0  +
lea ecx [esi+1Ch] +
mov dword ptr [esi+4] 0C0000001h +
call sub_1001669  +
mov ecx dword_104A064 +
mov eax [ecx] +
call dword ptr [eax+8]  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [esi+0Ch] +
call sub_102C50E  +
call sub_10015C0  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_102D482  +
test byte ptr [ebp+8] 1 +
jz loc_102D4EA  +
push esi  +
call off_104B7F0  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1012D58  +
mov eax [ebp+arg_0] +
mov [esi+10h] eax +
mov dword ptr [esi] offset off_102D574 +
mov dword ptr [esi+4] offset off_102D564 +
mov dword ptr [esi+8] offset off_102D540 +
mov dword ptr [esi+0Ch] offset off_102D52C +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov eax [eax+10h] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov eax [eax+10h] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+10h]  +
mov eax [ebp+8] +
mov eax [eax+10h] +
push dword ptr [ebp+0Ch]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx]  +
pop ebp  +
retn 0Ch  +
***
sub dword ptr [esp+4] 4 +
jmp loc_102D5C3  +
***
sub dword ptr [esp+4] 8 +
jmp loc_102D5C3  +
***
sub dword ptr [esp+4] 0Ch +
jmp loc_102D5C3  +
***
sub dword ptr [esp+4] 4 +
jmp loc_102D5A9  +
***
sub dword ptr [esp+4] 8 +
jmp loc_102D5A9  +
***
sub dword ptr [esp+4] 4 +
jmp loc_102D5DD  +
***
sub dword ptr [esp+4] 0Ch +
jmp loc_102D5A9  +
***
sub dword ptr [esp+4] 8 +
jmp loc_102D5DD  +
***
sub dword ptr [esp+4] 0Ch +
jmp loc_102D5DD  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push [ebp+arg_4]  +
and [ebp+cb] 0 +
push [ebp+arg_0]  +
lea eax [ebp+cb] +
push eax  +
call sub_1003089  +
test eax eax +
jge loc_102D692  +
xor eax eax +
jmp locret_102D69B  +
push [ebp+cb]  +
call ds:CoTaskMemAlloc  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push [ebp+arg_8]  +
and [ebp+cb] 0 +
push [ebp+arg_4]  +
lea eax [ebp+cb] +
push eax  +
call sub_1003089  +
test eax eax +
jge loc_102D6C5  +
xor eax eax +
jmp locret_102D6D1  +
push [ebp+cb]  +
push [ebp+pv]  +
call ds:CoTaskMemRealloc  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_0]  +
call ds:malloc  +
pop ecx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+lpString]  +
call ds:lstrlenW  +
lea eax [eax+eax+2] +
push eax  +
push [ebp+lpString]  +
mov eax [ebp+arg_4] +
add eax eax +
push eax  +
push [ebp+arg_0]  +
call memcpy_s  +
add esp 10h +
neg eax  +
sbb eax eax +
inc eax  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call wcsncpy_s  +
add esp 10h +
push eax  +
call sub_1003CD3  +
pop ebp  +
retn   +
***
mov eax [ecx+8] +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+8] +
push edi  +
xor edi edi +
cmp ebx edi +
jnz loc_102D76D  +
mov eax 80004003h +
jmp loc_102D79E  +
push esi  +
lea esi [ecx+28h] +
cmp [esi] edi +
jnz loc_102D78F  +
push esi  +
push offset dword_102D7B4  +
push 1  +
push edi  +
push offset dword_102D7A4  +
call ds:CoCreateInstance  +
mov edi eax +
test edi edi +
jl loc_102D79B  +
mov eax [esi] +
mov [ebx] eax +
mov esi [esi] +
mov eax [esi] +
push esi  +
call dword ptr [eax+4]  +
mov eax edi +
pop esi  +
pop edi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_4] +
test ebx ebx +
jz loc_102D817  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
lea edi [ebx-1] +
xor eax eax +
test edi edi +
jbe loc_102D80F  +
mov edx [ebp+arg_8] +
movzx ecx word ptr [edx] +
test cx cx +
jz loc_102D80F  +
mov [esi+eax*2] cx +
cmp word ptr [edx] 27h +
jnz loc_102D808  +
lea ecx [ebx-2] +
cmp eax ecx +
jnb loc_102D808  +
push 27h  +
inc eax  +
pop ecx  +
mov [esi+eax*2] cx +
inc edx  +
inc edx  +
inc eax  +
cmp eax edi +
jb loc_102D7E7  +
xor ecx ecx +
pop edi  +
mov [esi+eax*2] cx +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov eax 80004005h +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
cmp dword ptr [esi+4] 0 +
jnz loc_102D880  +
cmp dword ptr [esi+8] 0 +
jnz loc_102D880  +
push offset ModuleName  +
call ds:GetModuleHandleW  +
test eax eax +
jz loc_102D862  +
push offset aRegdeletekeyex  +
push eax  +
call ds:__imp_GetProcAddress  +
mov [esi+4] eax +
jmp loc_102D880  +
push offset LibFileName  +
call ds:LoadLibraryW  +
test eax eax +
jz loc_102D880  +
push offset aRegdeletekeyw  +
push eax  +
call ds:__imp_GetProcAddress  +
mov [esi+8] eax +
mov eax [esi+4] +
test eax eax +
jz loc_102D894  +
push 0  +
push 0  +
push [ebp+arg_0]  +
push dword ptr [esi]  +
call eax  +
jmp loc_102D8AA  +
mov eax [esi+8] +
test eax eax +
jz loc_102D8A4  +
push [ebp+arg_0]  +
push dword ptr [esi]  +
call eax  +
jmp loc_102D8AA  +
call ds:__imp_GetLastError  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
and [ebp+phkResult] 0 +
lea eax [ebp+dwDisposition] +
push eax  +
lea eax [ebp+phkResult] +
push eax  +
push [ebp+dwDisposition]  +
mov esi ecx +
push [ebp+samDesired]  +
push [ebp+dwOptions]  +
push [ebp+lpClass]  +
push 0  +
push [ebp+lpSubKey]  +
push [ebp+hKey]  +
call ds:RegCreateKeyExW  +
mov ecx [ebp+arg_18] +
test ecx ecx +
jz loc_102D982  +
mov edx [ebp+dwDisposition] +
mov [ecx] edx +
test eax eax +
jnz loc_102D992  +
mov ecx esi +
call sub_1004887  +
mov ecx [ebp+phkResult] +
mov [esi] ecx +
pop esi  +
leave   +
retn 1Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+lpData] +
push edi  +
mov ebx ecx +
test esi esi +
jnz loc_102D9B7  +
push 80004005h  +
call loc_1025B15  +
xor edi edi +
push esi  +
call ds:lstrlenW  +
inc eax  +
lea ecx [eax+eax] +
add esi ecx +
add edi ecx +
cmp eax 1 +
jnz loc_102D9B9  +
push edi  +
push [ebp+lpData]  +
push 7  +
push 0  +
push [ebp+lpValueName]  +
push dword ptr [ebx]  +
call ds:RegSetValueExW  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+lpString2]  +
push [ebp+lpString1]  +
call ds:lstrcmpiW  +
neg eax  +
sbb al al +
inc al  +
pop ebp  +
retn 8  +
***
mov eax [ecx] +
push 27h  +
pop ecx  +
cmp cx [eax] +
jnz loc_102DA29  +
push eax  +
call ds:CharNextW  +
push 27h  +
pop ecx  +
cmp cx [eax] +
jz loc_102DA29  +
xor eax eax +
inc eax  +
retn   +
xor eax eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
cmp eax 64h +
push esi  +
mov esi ecx +
jge loc_102DA46  +
mov eax 3E8h +
and dword ptr [esi] 0 +
push 2  +
push eax  +
mov [esi+4] eax +
call sub_102D671  +
mov [esi+8] eax +
test eax eax +
jz loc_102DA60  +
xor ecx ecx +
mov [eax] cx +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
adc eax offset CoTaskMemFree +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_4] +
push esi  +
mov esi ecx +
mov eax [esi] +
lea ecx [eax+ebx+1] +
cmp ecx eax +
push edi  +
jle loc_102DB00  +
cmp ecx ebx +
jle loc_102DB00  +
mov edi [esi+4] +
cmp ecx edi +
jl loc_102DAC0  +
cmp edi 3FFFFFFFh +
jg loc_102DB00  +
add edi edi +
cmp ecx edi +
jge loc_102DA9D  +
push 2  +
push edi  +
push dword ptr [esi+8]  +
call sub_102D6A4  +
test eax eax +
jz loc_102DB00  +
mov [esi+8] eax +
mov [esi+4] edi +
mov eax [esi] +
test eax eax +
jl loc_102DB00  +
mov edx [esi+4] +
cmp eax edx +
jge loc_102DB00  +
mov ecx edx +
sub ecx eax +
cmp ecx edx +
jg loc_102DB00  +
lea edx [ebx+ebx] +
push edx  +
push [ebp+arg_0]  +
add ecx ecx +
push ecx  +
mov ecx [esi+8] +
lea eax [ecx+eax*2] +
push eax  +
call sub_1006B30  +
add [esi] ebx +
mov eax [esi] +
mov ecx [esi+8] +
xor edx edx +
mov [ecx+eax*2] dx +
xor eax eax +
add esp 10h +
inc eax  +
jmp loc_102DB02  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
test byte ptr dword_104BBB4 1 +
jnz loc_102DB71  +
or dword_104BBB4 1 +
push 8  +
pop eax  +
mov word_104BB98 ax +
mov eax 4008h +
push 13h  +
mov word_104BBA0 ax +
pop eax  +
push 11h  +
mov word_104BBA8 ax +
pop eax  +
mov lpString2 offset dword_102DBB4 +
mov dword_104BB9C offset dword_102DBB0 +
mov dword_104BBA4 offset dword_102DBAC +
mov dword_104BBAC offset dword_102DBA8 +
mov word_104BBB0 ax +
push esi  +
xor esi esi +
push lpString2[esi*8]  +
push [ebp+lpString1]  +
call ds:lstrcmpiW  +
test eax eax +
jz loc_102DB95  +
inc esi  +
cmp esi 4 +
jb loc_102DB74  +
xor eax eax +
pop esi  +
pop ebp  +
retn 8  +
mov ax word_104BB98[esi*8] +
mov ecx [ebp+arg_4] +
mov [ecx] ax +
xor eax eax +
inc eax  +
jmp loc_102DB90  +
***
mov edi edi +
push ebp  +
mov ebp esp +
movzx eax [ebp+arg_0] +
cmp eax 30h +
jl loc_102DBF1  +
cmp eax 39h +
jle loc_102DBEC  +
cmp eax 40h +
jle loc_102DBF1  +
cmp eax 46h +
jle loc_102DBE7  +
lea ecx [eax-61h] +
cmp ecx 5 +
ja loc_102DBF1  +
add eax 0FFFFFFA9h +
jmp loc_102DBF3  +
add eax 0FFFFFFC9h +
jmp loc_102DBF3  +
add eax 0FFFFFFD0h +
jmp loc_102DBF3  +
xor al al +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
xor esi esi +
push ds:off_102DC30[esi*8]  +
push [ebp+lpString1]  +
call ds:lstrcmpiW  +
test eax eax +
jz loc_102DC25  +
inc esi  +
cmp esi 0Eh +
jb loc_102DC04  +
xor eax eax +
pop esi  +
pop ebp  +
retn 4  +
mov eax ds:dword_102DC34[esi*8] +
jmp loc_102DC20  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+lpsz] +
push esi  +
xor esi esi +
test eax eax +
jz loc_102DCD1  +
jmp loc_102DCC3  +
cmp cx [ebp+arg_4] +
jz loc_102DCCD  +
push eax  +
call ds:CharNextW  +
movzx ecx word ptr [eax] +
test cx cx +
jz loc_102DCCF  +
jmp loc_102DCB6  +
mov esi eax +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
movzx eax [ebp+arg_0] +
cmp eax 9 +
jl loc_102DCFD  +
cmp eax 0Ah +
jle loc_102DCF8  +
cmp eax 0Dh +
jz loc_102DCF8  +
cmp eax 20h +
jnz loc_102DCFD  +
xor eax eax +
inc eax  +
jmp loc_102DCFF  +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
jmp loc_102DD1B  +
push dword ptr [esi]  +
call ds:CharNextW  +
mov [esi] eax +
mov ecx esi +
mov eax [esi] +
movzx eax word ptr [eax] +
push eax  +
call sub_102DCDB  +
test eax eax +
jnz loc_102DD0F  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
call sub_102DD08  +
mov eax [esi] +
movzx ecx word ptr [eax] +
xor edx edx +
cmp dx cx +
jnz loc_102DD55  +
mov eax 80020009h +
jmp loc_102DE35  +
push ebx  +
push edi  +
mov edi [ebp+arg_0] +
push 27h  +
pop edx  +
mov [ebp+var_4] edi +
cmp dx cx +
jnz loc_102DDE3  +
mov ebx ds:CharNextW +
push eax  +
call ebx  +
mov [esi] eax +
jmp loc_102DDC6  +
mov ecx esi +
call sub_102DA0C  +
test eax eax +
jnz loc_102DDCD  +
mov eax [esi] +
push 27h  +
pop ecx  +
cmp cx [eax] +
jnz loc_102DD8C  +
push eax  +
call ebx  +
mov [esi] eax +
mov eax [esi] +
push eax  +
mov [ebp+arg_0] eax +
call ebx  +
mov edx [ebp+var_4] +
mov [esi] eax +
sub eax [ebp+arg_0] +
add edx 2000h +
sar eax 1 +
lea ecx [edi+eax*2+2] +
cmp ecx edx +
jnb loc_102DE3A  +
test eax eax +
jle loc_102DDC4  +
mov ecx [ebp+arg_0] +
mov dx [ecx] +
mov [edi] dx +
inc edi  +
inc edi  +
inc ecx  +
inc ecx  +
dec eax  +
jnz loc_102DDB7  +
mov eax [esi] +
xor ecx ecx +
cmp cx [eax] +
jnz loc_102DD72  +
mov eax [esi] +
xor ecx ecx +
cmp cx [eax] +
jz loc_102DE3A  +
xor eax eax +
mov [edi] ax +
push dword ptr [esi]  +
call ebx  +
mov [esi] eax +
jmp loc_102DE31  +
mov ebx [esi] +
movzx eax word ptr [ebx] +
push eax  +
mov ecx esi +
call sub_102DCDB  +
test eax eax +
jnz loc_102DE2C  +
push ebx  +
call ds:CharNextW  +
mov edx [ebp+var_4] +
mov [esi] eax +
sub eax ebx +
sar eax 1 +
lea ecx [edi+eax*2+2] +
add edx 2000h +
cmp ecx edx +
jnb loc_102DE3A  +
test eax eax +
jle loc_102DE23  +
mov cx [ebx] +
mov [edi] cx +
inc edi  +
inc edi  +
inc ebx  +
inc ebx  +
dec eax  +
jnz loc_102DE16  +
mov eax [esi] +
xor ecx ecx +
cmp cx [eax] +
jnz loc_102DDE3  +
xor eax eax +
mov [edi] ax +
xor eax eax +
pop edi  +
pop ebx  +
pop esi  +
leave   +
retn 4  +
mov eax 80020009h +
jmp loc_102DE33  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi offset off_102DE78 +
push dword ptr [esi]  +
push [ebp+lpString1]  +
call ds:lstrcmpiW  +
test eax eax +
jz loc_102DE73  +
add esi 4 +
cmp esi offset dword_102DEA8 +
jl loc_102DE51  +
xor eax eax +
inc eax  +
pop esi  +
pop ebp  +
retn 4  +
xor eax eax +
jmp loc_102DE6E  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
xor eax eax +
push eax  +
push eax  +
push eax  +
push eax  +
push eax  +
push eax  +
push eax  +
lea ecx [ebp+cSubKeys] +
push ecx  +
push eax  +
push eax  +
push eax  +
push [ebp+hKey]  +
mov [ebp+cSubKeys] eax +
call ds:RegQueryInfoKeyW  +
test eax eax +
jz loc_102DED7  +
xor eax eax +
jmp locret_102DEE0  +
xor eax eax +
cmp eax [ebp+cSubKeys] +
sbb eax eax +
neg eax  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax 2004h +
call sub_100A16A  +
mov eax dword_104A044 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
mov esi [ebp+arg_0] +
cmp word ptr [esi] 3Dh +
push edi  +
mov edi ecx +
jnz loc_102DF3E  +
push esi  +
call sub_102DD31  +
test eax eax +
jl loc_102DF40  +
mov ecx edi +
call sub_102DD08  +
lea eax [ebp+var_2004] +
push eax  +
mov ecx edi +
call sub_102DD31  +
test eax eax +
jl loc_102DF40  +
push esi  +
mov ecx edi +
call sub_102DD31  +
test eax eax +
jl loc_102DF40  +
xor eax eax +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_1002A8B  +
leave   +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi] +
push edi  +
mov edi ds:__imp_free +
test eax eax +
jz loc_102DF6E  +
push eax  +
call edi  +
and dword ptr [esi] 0 +
pop ecx  +
mov eax [esi+4] +
test eax eax +
jz loc_102DF7D  +
push eax  +
call edi  +
and dword ptr [esi+4] 0 +
pop ecx  +
and dword ptr [esi+8] 0 +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
mov edi edi +
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov esi ecx +
xor edi edi +
cmp [esi+8] edi +
jle loc_102E015  +
mov eax [ebp+arg_0] +
push dword ptr [eax]  +
mov eax [esi] +
push dword ptr [eax+edi*4]  +
call sub_102D9EC  +
test al al +
jnz loc_102E01E  +
inc edi  +
cmp edi [esi+8] +
jl loc_102DFFC  +
or eax 0FFFFFFFFh +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
mov eax edi +
jmp loc_102E018  +
***
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_102D6DA  +
test eax eax +
jnz loc_102E052  +
push 8007000Eh  +
call loc_1025B15  +
mov [esi] eax +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
lea eax [ebp+arg_4] +
push [ebp+arg_0]  +
push eax  +
call sub_1003089  +
test eax eax +
jge loc_102E07C  +
push eax  +
call loc_1025B15  +
mov eax [ebp+arg_4] +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 224h +
mov eax dword_104A044 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
push edi  +
mov eax ecx +
mov ecx [ebp+lpSubKey] +
push 2001Fh  +
push ecx  +
push dword ptr [eax]  +
xor esi esi +
mov [ebp+var_21C] ecx +
lea ecx [ebp+var_214] +
mov [ebp+var_218] eax +
mov [ebp+var_214] esi +
mov [ebp+var_210] esi +
mov [ebp+var_20C] esi +
call sub_100484B  +
mov edi eax +
cmp edi esi +
jz loc_102E0FA  +
lea ecx [ebp+var_214] +
call sub_1004887  +
mov eax edi +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_1002A8B  +
leave   +
retn 4  +
mov edi ds:RegEnumKeyExW +
jmp loc_102E118  +
lea eax [ebp+SubKey] +
push eax  +
lea ecx [ebp+var_214] +
call sub_102E088  +
cmp eax esi +
jnz loc_102E163  +
lea eax [ebp+var_224] +
push eax  +
push esi  +
push esi  +
push esi  +
lea eax [ebp+var_208] +
push eax  +
lea eax [ebp+SubKey] +
push eax  +
push esi  +
push [ebp+var_214]  +
mov [ebp+var_208] 100h +
call edi  +
test eax eax +
jz loc_102E102  +
lea ecx [ebp+var_214] +
call sub_1004887  +
push [ebp+var_21C]  +
mov ecx [ebp+var_218] +
call sub_102D82E  +
lea ecx [ebp+var_214] +
mov esi eax +
call sub_1004887  +
mov eax esi +
jmp loc_102E0EA  +
***
mov edi edi +
push esi  +
push edi  +
mov esi ecx +
xor edi edi +
cmp [esi+8] edi +
jle loc_102E1AF  +
push edi  +
mov ecx esi +
call sub_102DF89  +
push dword ptr [eax]  +
call off_104B7F0  +
push edi  +
mov ecx esi +
call sub_102DFBA  +
push dword ptr [eax]  +
call off_104B7F0  +
inc edi  +
cmp edi [esi+8] +
jl loc_102E189  +
mov ecx esi +
call sub_102DF55  +
pop edi  +
xor eax eax +
pop esi  +
retn   +
***
call sub_10015E0  +
mov esi ecx +
xor eax eax +
cmp [ebp+8] eax +
jz loc_102E1FB  +
mov [ebp-10h] eax +
push dword ptr [ebp+8]  +
mov [ebp-4] eax +
call ds:lstrlenW  +
push eax  +
push dword ptr [ebp+8]  +
mov ecx esi +
call sub_102DA7B  +
lea ecx [ebp-10h] +
mov esi eax +
call sub_102BE1E  +
mov eax esi +
call sub_10015C0  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
lea edi [esi+10h] +
push edi  +
call ds:EnterCriticalSection  +
lea ecx [esi+4] +
call sub_102E17C  +
push edi  +
mov esi eax +
call ds:LeaveCriticalSection  +
pop edi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov ecx [eax] +
push offset word_100348C  +
push offset aAppid  +
push eax  +
call dword ptr [ecx+0Ch]  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_102DFEC  +
cmp eax 0FFFFFFFFh +
jnz loc_102E282  +
xor eax eax +
jmp loc_102E28C  +
push eax  +
mov ecx esi +
call sub_102DFBA  +
mov eax [eax] +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
mov eax [ecx] +
shl edx 2 +
add eax edx +
jz loc_102E2C1  +
push esi  +
mov esi [ebp+arg_4] +
mov esi [esi] +
mov [eax] esi +
pop esi  +
mov eax [ecx+4] +
add eax edx +
jz loc_102E2CF  +
mov ecx [ebp+arg_8] +
mov ecx [ecx] +
mov [eax] ecx +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 400h +
push esi  +
mov esi ecx +
jbe loc_102E2F3  +
push [ebp+arg_0]  +
call sub_102E034  +
jmp loc_102E2F8  +
lea eax [esi+4] +
mov [esi] eax +
mov eax [esi] +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 100h +
push esi  +
mov esi ecx +
jbe loc_102E31F  +
push [ebp+arg_0]  +
call sub_102E034  +
jmp loc_102E324  +
lea eax [esi+4] +
mov [esi] eax +
mov eax [esi] +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_10015E0  +
mov [ebp-10h] ecx +
and dword ptr [ebp-4] 0 +
call sub_102E17C  +
mov ecx [ebp-10h] +
call sub_102DF55  +
call sub_10015C0  +
retn   +
***
call sub_10015E0  +
mov esi ecx +
mov [ebp-10h] esi +
mov dword ptr [esi] offset off_1022660 +
push esi  +
mov dword ptr [ebp-4] 1 +
call sub_102E208  +
lea eax [esi+10h] +
cmp byte ptr [eax+18h] 0 +
jz loc_102E393  +
push eax  +
mov byte ptr [eax+18h] 0 +
call ds:DeleteCriticalSection  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [esi+4] +
call sub_102E330  +
call sub_10015C0  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+10h] +
test eax eax +
jz loc_102E3B9  +
and dword ptr [eax] 0 +
mov eax 80004001h +
pop ebp  +
retn 0Ch  +
***
xor eax eax +
inc eax  +
retn 4  +
***
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_102E35B  +
test [ebp+arg_0] 1 +
jz loc_102E3F6  +
push esi  +
call off_104B7F0  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov esi ecx +
lea edi [esi+10h] +
push edi  +
call ds:EnterCriticalSection  +
lea eax [ebp+arg_0] +
push eax  +
lea ecx [esi+4] +
call sub_102E269  +
push edi  +
mov esi eax +
call ds:LeaveCriticalSection  +
pop edi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_1002A3A  +
mov edi [ebp+8] +
mov ebx [ebp+0Ch] +
mov esi ecx +
mov [ebp-64h] ebx +
test edi edi +
jz loc_102E568  +
test ebx ebx +
jz loc_102E568  +
and dword ptr [ebx] 0 +
push edi  +
call ds:lstrlenW  +
add eax eax +
push eax  +
lea ecx [ebp-60h] +
call sub_102DA31  +
xor ecx ecx +
mov [ebp-4] ecx +
cmp [ebp-58h] ecx +
jnz loc_102E48E  +
push ecx  +
call ds:CoTaskMemFree  +
mov eax 8007000Eh +
jmp loc_102E56D  +
mov [esi] edi +
mov [ebp-54h] ecx +
cmp [edi] cx +
jz loc_102E537  +
mov ebx ds:CharNextW +
mov eax [esi] +
cmp word ptr [eax] 25h +
jnz loc_102E513  +
push eax  +
call ebx  +
mov [esi] eax +
cmp word ptr [eax] 25h +
jz loc_102E513  +
push 25h  +
push eax  +
call sub_102DCA5  +
mov edi eax +
test edi edi +
jz loc_102E54D  +
mov ecx [esi] +
sub eax ecx +
sar eax 1 +
cmp eax 1Fh +
jg loc_102E556  +
push eax  +
push ecx  +
lea eax [ebp-50h] +
push 20h  +
push eax  +
call sub_102D727  +
mov ecx [esi+4] +
add esp 10h +
lea eax [ebp-50h] +
push eax  +
call sub_102E402  +
test eax eax +
jz loc_102E54D  +
push eax  +
lea ecx [ebp-60h] +
call sub_102E1C0  +
test eax eax +
jz loc_102E55F  +
cmp [esi] edi +
jz loc_102E522  +
push dword ptr [esi]  +
call ebx  +
mov [esi] eax +
cmp eax edi +
jz loc_102E522  +
jmp loc_102E507  +
push 1  +
push eax  +
lea ecx [ebp-60h] +
call sub_102DA7B  +
test eax eax +
jz loc_102E55F  +
push dword ptr [esi]  +
call ebx  +
mov [esi] eax +
cmp word ptr [eax] 0 +
jnz loc_102E4A2  +
mov ebx [ebp-64h] +
xor ecx ecx +
mov eax [ebp-58h] +
mov [ebp-58h] ecx +
mov [ebx] eax +
push dword ptr [ebp-58h]  +
call ds:CoTaskMemFree  +
mov eax [ebp-54h] +
jmp loc_102E56D  +
mov dword ptr [ebp-54h] 80020009h +
jmp loc_102E53F  +
mov dword ptr [ebp-54h] 80004005h +
jmp loc_102E53F  +
mov dword ptr [ebp-54h] 8007000Eh +
jmp loc_102E53F  +
mov eax 80004003h +
call sub_1002A77  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov eax [esi+8] +
push edi  +
mov edi off_104BB58 +
push 4  +
inc eax  +
push eax  +
push dword ptr [esi]  +
call edi  +
add esp 0Ch +
test eax eax +
jnz loc_102E59F  +
xor eax eax +
jmp loc_102E5CD  +
mov [esi] eax +
mov eax [esi+8] +
push 4  +
inc eax  +
push eax  +
push dword ptr [esi+4]  +
call edi  +
add esp 0Ch +
test eax eax +
jz loc_102E59B  +
push [ebp+arg_4]  +
mov ecx esi +
push [ebp+arg_0]  +
mov [esi+4] eax +
push dword ptr [esi+8]  +
call sub_102E2A7  +
inc dword ptr [esi+8]  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push 2  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_102E05E  +
push eax  +
mov ecx esi +
call sub_102E2D8  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push 2  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_102E05E  +
push eax  +
mov ecx esi +
call sub_102E304  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push 1  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_102E05E  +
push eax  +
mov ecx esi +
call sub_102E304  +
pop esi  +
pop ebp  +
retn 4  +
***
mov dword ptr [ecx] offset off_1001524 +
jmp sub_1011E3D  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_1001524 +
call sub_1011E3D  +
test byte ptr [ebp+8] 1 +
jz loc_102E674  +
push esi  +
call off_104B7F0  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_1001862  +
mov [ebp-30h] ecx +
xor edi edi +
cmp [ebp+8] edi +
jz loc_102E7AD  +
cmp [ebp+0Ch] edi +
jz loc_102E7AD  +
push dword ptr [ebp+8]  +
mov [ebp-1Ch] edi +
call ds:lstrlenW  +
lea eax [eax+eax+2] +
push 2  +
xor ecx ecx +
pop edx  +
mov [ebp-20h] eax +
mul  edx +
seto cl  +
mov [ebp-14h] edi +
mov [ebp-4] edi +
neg ecx  +
or eax ecx +
push eax  +
call off_104B7F4  +
mov [ebp-14h] eax +
jmp loc_102E6DE  +
mov eax offset loc_102E6DC +
retn   +
xor edi edi +
mov eax [ebp-14h] +
push 2  +
pop esi  +
push dword ptr [ebp+0Ch]  +
mov [ebp-4] esi +
mov [ebp-2Ch] eax +
call ds:lstrlenW  +
lea eax [eax+eax+2] +
xor ecx ecx +
mov [ebp-24h] eax +
mov edx esi +
mul  edx +
seto cl  +
mov [ebp-18h] edi +
mov byte ptr [ebp-4] 3 +
neg ecx  +
or eax ecx +
push eax  +
call off_104B7F4  +
mov [ebp-18h] eax +
mov [ebp-4] esi +
jmp loc_102E72C  +
mov dword ptr [ebp-4] 2 +
mov eax offset loc_102E72A +
retn   +
xor edi edi +
mov esi [ebp-18h] +
mov byte ptr [ebp-4] 5 +
mov [ebp-28h] esi +
cmp [ebp-14h] edi +
jz loc_102E776  +
cmp esi edi +
jz loc_102E776  +
push dword ptr [ebp-20h]  +
push dword ptr [ebp+8]  +
push dword ptr [ebp-20h]  +
push dword ptr [ebp-14h]  +
call sub_1006B30  +
push dword ptr [ebp-24h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp-24h]  +
push esi  +
call sub_1006B30  +
mov ecx [ebp-30h] +
add esp 20h +
lea eax [ebp-18h] +
push eax  +
lea eax [ebp-14h] +
push eax  +
call sub_102E57A  +
test eax eax +
jnz loc_102E77F  +
mov dword ptr [ebp-1Ch] 8007000Eh +
jmp loc_102E785  +
mov [ebp-2Ch] edi +
mov [ebp-28h] edi +
push dword ptr [ebp-28h]  +
xor eax eax +
cmp [ebp-1Ch] edi +
mov byte ptr [ebp-4] 2 +
setnl al  +
mov esi eax +
call off_104B7F0  +
push dword ptr [ebp-2Ch]  +
or dword ptr [ebp-4] 0FFFFFFFFh +
call off_104B7F0  +
mov eax esi +
jmp loc_102E7AF  +
xor eax eax +
call sub_10015C0  +
retn 8  +
***
call sub_10015E0  +
cmp dword ptr [ebp+0Ch] 0 +
jz loc_102E81A  +
cmp dword ptr [ebp+10h] 0 +
jz loc_102E81A  +
mov esi [ebp+8] +
lea edi [esi+10h] +
push edi  +
call ds:EnterCriticalSection  +
and dword ptr [ebp+8] 0 +
push dword ptr [ebp+10h]  +
and dword ptr [ebp-4] 0 +
push dword ptr [ebp+0Ch]  +
lea ecx [esi+4] +
call sub_102E680  +
push edi  +
mov esi eax +
call ds:LeaveCriticalSection  +
lea ecx [ebp+8] +
call sub_102BE1E  +
mov eax esi +
neg eax  +
sbb eax eax +
and eax 7FF8FFF2h +
add eax 8007000Eh +
jmp loc_102E81F  +
mov eax 80070057h +
call sub_10015C0  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0FFFFFFFFh  +
push offset byte_1040097  +
mov eax large fs:0 +
push eax  +
push ecx  +
mov eax 2120h +
call sub_100A16A  +
mov eax dword_104A044 +
xor eax ebp +
mov [ebp+var_14] eax +
push ebx  +
push esi  +
push edi  +
push eax  +
lea eax [ebp+var_C] +
mov large fs:0 eax +
mov [ebp+var_10] esp +
mov eax [ebp+arg_8] +
mov esi [ebp+arg_0] +
mov ebx [ebp+arg_4] +
mov [ebp+var_212C] eax +
lea eax [ebp+String1] +
xor edi edi +
push eax  +
mov [ebp+var_2128] ecx +
mov [ebp+var_2124] esi +
mov dword ptr [ebp+Data] ebx +
mov [ebp+var_211C] edi +
call sub_102DD31  +
cmp eax edi +
jl loc_102EB5E  +
lea eax [ebp+var_211C] +
push eax  +
lea eax [ebp+String1] +
push eax  +
call sub_102DB0E  +
test eax eax +
jnz loc_102E8C2  +
mov eax 80020009h +
jmp loc_102EB5E  +
mov ecx [ebp+var_2128] +
call sub_102DD08  +
mov ecx [ebp+var_2128] +
lea eax [ebp+String1] +
push eax  +
call sub_102DD31  +
cmp eax edi +
jl loc_102EB5E  +
movzx eax word ptr [ebp+var_211C] +
sub eax 8 +
jz loc_102EB28  +
sub eax 9 +
jz loc_102EA20  +
dec eax  +
dec eax  +
jz loc_102E9E4  +
sub eax 3FF5h +
jnz loc_102EB47  +
lea eax [ebp+String1] +
push eax  +
call ds:lstrlenW  +
inc eax  +
inc eax  +
mov [ebp+lpData] edi +
mov [ebp+var_4] edi +
push eax  +
lea ecx [ebp+lpData] +
mov byte ptr [ebp+var_4] 1 +
call sub_102E5FC  +
mov [ebp+var_4] edi +
jmp loc_102E94C  +
and dword ptr [ebp-4] 0 +
mov eax offset loc_102E94A +
retn   +
xor edi edi +
mov esi [ebp+lpData] +
cmp esi edi +
jz loc_102E9BF  +
cmp [ebp+String1] 0 +
lea edi [ebp+String1] +
jz loc_102E999  +
mov ebx ds:CharNextW +
push edi  +
call ebx  +
movzx ecx word ptr [edi] +
cmp cx 5Ch +
jnz loc_102E98C  +
cmp word ptr [eax] 30h +
jnz loc_102E98C  +
xor ecx ecx +
mov [esi] cx +
inc esi  +
push eax  +
inc esi  +
call ebx  +
mov edi eax +
jmp loc_102E993  +
mov [esi] cx +
inc esi  +
inc esi  +
inc edi  +
inc edi  +
cmp word ptr [edi] 0 +
jnz loc_102E96C  +
mov ecx [ebp+var_2124] +
xor eax eax +
mov [esi] ax +
mov [esi+2] ax +
push [ebp+lpData]  +
push dword ptr [ebp+Data]  +
call sub_102D99C  +
mov esi eax +
xor edi edi +
jmp loc_102E9C2  +
push 0Eh  +
pop esi  +
lea eax [ebp+var_2114] +
cmp [ebp+lpData] eax +
jz loc_102EB3B  +
lea ecx [ebp+lpData] +
call sub_102E027  +
jmp loc_102EB3B  +
lea eax [ebp+Data] +
push eax  +
push edi  +
push edi  +
lea eax [ebp+String1] +
push eax  +
mov [ebp+var_2124] edi +
call ds:VarUI4FromStr  +
push dword ptr [ebp+Data]  +
mov ecx esi +
push ebx  +
call sub_1015D71  +
lea ecx [ebp+var_2124] +
mov esi eax +
call sub_102BE1E  +
jmp loc_102EB3B  +
lea eax [ebp+String1] +
push eax  +
call ds:lstrlenW  +
mov [ebp+var_211C] eax +
test al 1 +
jz loc_102EA41  +
mov eax 80004005h +
jmp loc_102EB5E  +
cdq   +
sub eax edx +
mov ebx eax +
sar ebx 1 +
mov [ebp+var_2130] ebx +
mov [ebp+lpData] edi +
mov [ebp+var_4] 3 +
push ebx  +
lea ecx [ebp+lpData] +
mov byte ptr [ebp+var_4] 4 +
call sub_102E620  +
jmp loc_102EA7B  +
mov eax offset loc_102EA73 +
retn   +
mov ebx [ebp-2130h] +
xor edi edi +
cmp [ebp+lpData] edi +
jnz loc_102EA9A  +
lea eax [ebp+var_2114] +
test eax eax +
jz loc_102EA37  +
lea ecx [ebp+lpData] +
call sub_102E027  +
jmp loc_102EA37  +
push ebx  +
push edi  +
push [ebp+lpData]  +
call memset  +
add esp 0Ch +
cmp [ebp+var_211C] edi +
jle loc_102EAEC  +
mov ecx [ebp+lpData] +
mov eax edi +
cdq   +
sub eax edx +
sar eax 1 +
lea esi [eax+ecx] +
movzx eax [ebp+edi*2+String1] +
push eax  +
call sub_102DBBD  +
mov edx edi +
and edx 1 +
shl edx 2 +
push 4  +
pop ecx  +
sub ecx edx +
shl al cl +
or [esi] al +
inc edi  +
cmp edi [ebp+var_211C] +
jl loc_102EAB2  +
xor edi edi +
mov eax [ebp+var_2124] +
mov eax [eax] +
push ebx  +
push [ebp+lpData]  +
push 3  +
push edi  +
push dword ptr [ebp+Data]  +
push eax  +
call ds:RegSetValueExW  +
mov esi eax +
lea eax [ebp+var_2114] +
cmp [ebp+lpData] eax +
jz loc_102EB3B  +
lea ecx [ebp+lpData] +
call sub_102E027  +
jmp loc_102EB3B  +
push 1  +
lea eax [ebp+String1] +
push eax  +
push ebx  +
mov ecx esi +
call sub_1019559  +
mov esi eax +
cmp esi edi +
jz loc_102EB47  +
push esi  +
call sub_100A7A1  +
jmp loc_102EB5E  +
push [ebp+var_212C]  +
mov ecx [ebp+var_2128] +
call sub_102DD31  +
cmp eax edi +
jl loc_102EB5E  +
xor eax eax +
mov ecx [ebp+var_C] +
mov large fs:0 ecx +
pop ecx  +
pop edi  +
pop esi  +
pop ebx  +
mov ecx [ebp+var_14] +
xor ecx ebp +
call sub_1002A8B  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0FFFFFFFFh  +
push offset byte_10400FF  +
mov eax large fs:0 +
push eax  +
mov eax 225Ch +
call sub_100A16A  +
mov eax dword_104A044 +
xor eax ebp +
mov [ebp+var_10] eax +
push ebx  +
push esi  +
push edi  +
push eax  +
lea eax [ebp+var_C] +
mov large fs:0 eax +
mov eax [ebp+arg_4] +
mov edi [ebp+arg_0] +
xor ebx ebx +
mov [ebp+var_221C] ecx +
mov [ebp+var_2220] eax +
mov [ebp+var_222C] ebx +
mov [ebp+var_2228] ebx +
mov [ebp+var_2224] ebx +
mov eax [ebp+arg_C] +
push edi  +
mov [ebp+var_4] ebx +
mov [ebp+var_2264] eax +
call sub_102DD31  +
mov esi eax +
cmp esi ebx +
jmp loc_102F0FC  +
mov esi ds:lstrcmpiW +
push offset String2  +
push edi  +
mov [ebp+var_2230] 1 +
call esi  +
mov ebx eax +
neg ebx  +
push offset aForceremove  +
sbb ebx ebx +
push edi  +
inc ebx  +
call esi  +
test eax eax +
jz loc_102EC27  +
test ebx ebx +
jz loc_102ECE4  +
mov ecx [ebp+var_221C] +
push edi  +
call sub_102DD31  +
mov esi eax +
test esi esi +
jl loc_102F165  +
cmp [ebp+arg_8] 0 +
jz loc_102ECE4  +
xor esi esi +
push 5Ch  +
push edi  +
mov [ebp+var_223C] esi +
mov [ebp+var_2238] esi +
mov [ebp+var_2234] esi +
call sub_102DCA5  +
test eax eax +
jnz loc_102F109  +
mov ecx [ebp+var_221C] +
push edi  +
call sub_102DE46  +
test eax eax +
jz loc_102EC99  +
mov eax [ebp+var_2220] +
push edi  +
lea ecx [ebp+var_223C] +
mov [ebp+var_223C] eax +
call sub_102E088  +
mov [ebp+var_223C] esi +
cmp ebx esi +
jz loc_102ECD9  +
mov ecx [ebp+var_221C] +
push edi  +
call sub_102DD31  +
mov esi eax +
test esi esi +
jl loc_102F11B  +
mov ecx [ebp+var_221C] +
push edi  +
call sub_102DEE9  +
lea ecx [ebp+var_223C] +
mov esi eax +
call sub_1004887  +
test esi esi +
jge loc_102F0B7  +
jmp loc_102F165  +
lea ecx [ebp+var_223C] +
call sub_1004887  +
push offset aNoremove  +
push edi  +
call ds:lstrcmpiW  +
test eax eax +
jnz loc_102ED10  +
mov ecx [ebp+var_221C] +
and [ebp+var_2230] eax +
push edi  +
call sub_102DD31  +
mov esi eax +
test esi esi +
jl loc_102F165  +
push offset aVal  +
push edi  +
call ds:lstrcmpiW  +
test eax eax +
jnz loc_102EE35  +
mov ecx [ebp+var_221C] +
lea eax [ebp+ValueName] +
push eax  +
call sub_102DD31  +
mov esi eax +
xor ebx ebx +
cmp esi ebx +
jl loc_102F165  +
mov ecx [ebp+var_221C] +
push edi  +
call sub_102DD31  +
mov esi eax +
cmp esi ebx +
jl loc_102F165  +
cmp word ptr [edi] 3Dh +
jnz loc_102F114  +
cmp [ebp+arg_8] ebx +
jz loc_102EDBB  +
mov [ebp+var_2250] ebx +
mov [ebp+var_224C] ebx +
mov eax [ebp+var_2220] +
mov ecx [ebp+var_221C] +
mov [ebp+var_2254] eax +
push edi  +
lea eax [ebp+ValueName] +
push eax  +
lea eax [ebp+var_2254] +
push eax  +
mov byte ptr [ebp+var_4] 1 +
call sub_102E82C  +
mov esi eax +
cmp esi ebx +
mov [ebp+var_2254] ebx +
lea ecx [ebp+var_2254] +
jl loc_102F160  +
mov byte ptr [ebp+var_4] bl +
jmp loc_102F0B2  +
cmp [ebp+arg_C] ebx +
jnz loc_102EE24  +
cmp [ebp+var_2230] ebx +
jz loc_102EE24  +
push 20006h  +
push ebx  +
push [ebp+var_2220]  +
lea ecx [ebp+hKey] +
mov [ebp+hKey] ebx +
mov [ebp+var_2244] ebx +
mov [ebp+var_2240] ebx +
call sub_100484B  +
cmp eax ebx +
jnz loc_102F123  +
lea eax [ebp+ValueName] +
push eax  +
push [ebp+hKey]  +
call ds:RegDeleteValueW  +
cmp eax ebx +
jz loc_102EE19  +
cmp eax 2 +
jnz loc_102F123  +
lea ecx [ebp+hKey] +
call sub_1004887  +
mov ecx [ebp+var_221C] +
push edi  +
call sub_102DEE9  +
jmp loc_102EBEB  +
push 5Ch  +
push edi  +
call sub_102DCA5  +
test eax eax +
jnz loc_102F114  +
cmp [ebp+arg_8] eax +
jz loc_102EEE4  +
mov esi 2001Fh +
push esi  +
push edi  +
push [ebp+var_2220]  +
lea ecx [ebp+var_222C] +
call sub_100484B  +
test eax eax +
jz loc_102EEA8  +
push 20019h  +
push edi  +
push [ebp+var_2220]  +
lea ecx [ebp+var_222C] +
call sub_100484B  +
test eax eax +
jz loc_102EEA8  +
xor ebx ebx +
push ebx  +
push ebx  +
push esi  +
push ebx  +
push ebx  +
push edi  +
push [ebp+var_2220]  +
lea ecx [ebp+var_222C] +
call sub_102D947  +
mov esi eax +
cmp esi ebx +
jnz loc_102F131  +
mov ecx [ebp+var_221C] +
push edi  +
call sub_102DD31  +
mov esi eax +
test esi esi +
jl loc_102F165  +
cmp word ptr [edi] 3Dh +
jnz loc_102F0B7  +
mov ecx [ebp+var_221C] +
push edi  +
push 0  +
lea eax [ebp+var_222C] +
push eax  +
call sub_102E82C  +
mov esi eax +
jmp loc_102ECCC  +
cmp [ebp+arg_C] 0 +
jnz loc_102EF05  +
push 20019h  +
push edi  +
push [ebp+var_2220]  +
lea ecx [ebp+var_222C] +
call sub_100484B  +
mov ebx eax +
jmp loc_102EF08  +
push 2  +
pop ebx  +
test ebx ebx +
jz loc_102EF13  +
mov [ebp+arg_C] 1 +
push 0FFFFFFFFh  +
push edi  +
lea eax [ebp+SubKey] +
push 104h  +
push eax  +
call wcsncpy_s  +
add esp 10h +
push eax  +
call sub_1003CD3  +
mov ecx [ebp+var_221C] +
push edi  +
call sub_102DD31  +
mov esi eax +
test esi esi +
jl loc_102F165  +
mov ecx [ebp+var_221C] +
push edi  +
call sub_102DEE9  +
mov esi eax +
test esi esi +
jl loc_102F165  +
cmp word ptr [edi] 7Bh +
jnz loc_102EFAB  +
push edi  +
call ds:lstrlenW  +
cmp eax 1 +
jnz loc_102EFAB  +
push [ebp+arg_C]  +
mov ecx [ebp+var_221C] +
push 0  +
push [ebp+var_222C]  +
push edi  +
call sub_102EB7F  +
mov esi eax +
test esi esi +
jge loc_102EF95  +
cmp [ebp+arg_C] 0 +
jz loc_102F165  +
mov ecx [ebp+var_221C] +
push edi  +
call sub_102DD31  +
mov esi eax +
test esi esi +
jl loc_102F165  +
mov eax [ebp+var_2264] +
mov [ebp+arg_C] eax +
cmp ebx 2 +
jz loc_102F0FE  +
test ebx ebx +
jz loc_102EFD6  +
test eax eax +
jnz loc_102F0FE  +
push ebx  +
call sub_100A7A1  +
mov esi eax +
jmp loc_102F165  +
test eax eax +
jz loc_102F02D  +
push [ebp+var_222C]  +
mov ecx [ebp+var_221C] +
call sub_102DEAD  +
test eax eax +
jz loc_102F02D  +
mov ecx [ebp+var_221C] +
lea eax [ebp+SubKey] +
push eax  +
call sub_102DE46  +
test eax eax +
jz loc_102F0FE  +
cmp [ebp+var_2230] 0 +
jz loc_102F0FE  +
lea eax [ebp+SubKey] +
push eax  +
lea ecx [ebp+var_222C] +
call sub_102E088  +
jmp loc_102F0FE  +
push [ebp+var_222C]  +
mov ecx [ebp+var_221C] +
call sub_102DEAD  +
lea ecx [ebp+var_222C] +
mov [ebp+var_2268] eax +
call sub_1004887  +
mov ebx eax +
xor eax eax +
cmp ebx eax +
jnz loc_102F144  +
cmp [ebp+var_2230] eax +
jz loc_102F0FE  +
cmp [ebp+var_2268] eax +
jnz loc_102F0FE  +
mov [ebp+var_225C] eax +
mov [ebp+var_2258] eax +
mov eax [ebp+var_2220] +
mov [ebp+var_2260] eax +
lea eax [ebp+SubKey] +
push eax  +
lea ecx [ebp+var_2260] +
call sub_102D82E  +
and [ebp+var_2260] 0 +
test eax eax +
jnz loc_102F152  +
lea ecx [ebp+var_2260] +
call sub_1004887  +
cmp [ebp+arg_8] 0 +
jz loc_102F0FE  +
cmp word ptr [edi] 7Bh +
jnz loc_102F0FE  +
push edi  +
call ds:lstrlenW  +
cmp eax 1 +
jnz loc_102F0FE  +
mov ecx [ebp+var_221C] +
push 0  +
push [ebp+arg_8]  +
push [ebp+var_222C]  +
push edi  +
call sub_102EB7F  +
mov esi eax +
test esi esi +
jl loc_102F165  +
mov ecx [ebp+var_221C] +
push edi  +
call sub_102DD31  +
mov esi eax +
test esi esi +
jl loc_102F165  +
cmp word ptr [edi] 7Dh +
jz loc_102F165  +
jmp loc_102EBF4  +
lea ecx [ebp+var_223C] +
call sub_1004887  +
mov esi 80020009h +
jmp loc_102F165  +
lea ecx [ebp+var_223C] +
jmp loc_102F160  +
push eax  +
call sub_100A7A1  +
lea ecx [ebp+hKey] +
jmp loc_102F15E  +
lea ecx [ebp+var_222C] +
call sub_1004887  +
push esi  +
call sub_100A7A1  +
jmp loc_102F172  +
lea ecx [ebp+var_222C] +
call sub_1004887  +
push ebx  +
jmp loc_102F13D  +
push eax  +
call sub_100A7A1  +
lea ecx [ebp+var_2260] +
mov esi eax +
call sub_1004887  +
lea ecx [ebp+var_222C] +
call sub_1004887  +
mov eax esi +
mov ecx [ebp+var_C] +
mov large fs:0 ecx +
pop ecx  +
pop edi  +
pop esi  +
pop ebx  +
mov ecx [ebp+var_10] +
xor ecx ebp +
call sub_1002A8B  +
leave   +
retn 10h  +
***
mov edi edi +
push esi  +
mov edx ecx +
push edi  +
mov dword ptr [edx] offset off_1022660 +
and dword ptr [edx+4] 0 +
and dword ptr [edx+8] 0 +
and dword ptr [edx+0Ch] 0 +
lea esi [edx+10h] +
push 6  +
pop ecx  +
xor eax eax +
mov edi esi +
stos   +
mov [esi+18h] al +
pop edi  +
mov eax edx +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_10120CE  +
test byte ptr [ebp+8] 1 +
jz loc_102F224  +
push esi  +
call off_104B7F0  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
jnz loc_102F24C  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push 0  +
call sub_102CAD9  +
pop ebp  +
retn 0Ch  +
pop ebp  +
jmp loc_102D2D4  +
***
push 10h  +
mov eax offset dword_1040330 +
call sub_1001862  +
mov eax [ebp+10h] +
xor esi esi +
cmp eax esi +
jnz loc_102F273  +
mov eax 80004003h +
jmp loc_102F2EC  +
mov edi 8007000Eh +
push 20h  +
mov [eax] esi +
mov [ebp-14h] edi +
mov [ebp-18h] esi +
mov [ebp-4] esi +
call off_104B7F4  +
mov ecx eax +
mov [ebp-1Ch] ecx +
mov byte ptr [ebp-4] 1 +
cmp ecx esi +
jz loc_102F2A2  +
push dword ptr [ebp+8]  +
call sub_102D3BA  +
mov esi eax +
or dword ptr [ebp-4] 0FFFFFFFFh +
jmp loc_102F2B8  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov eax offset loc_102F2B2 +
retn   +
***
mov edi [ebp-14h] +
mov esi [ebp-18h] +
test esi esi +
jz loc_102F2EA  +
lea ecx [esi+0Ch] +
call sub_102C53D  +
mov edi eax +
test edi edi +
jl loc_102F2E1  +
xor edi edi +
test edi edi +
jnz loc_102F2E1  +
push dword ptr [ebp+10h]  +
mov eax [esi] +
push dword ptr [ebp+0Ch]  +
push esi  +
call dword ptr [eax]  +
mov edi eax +
test edi edi +
jz loc_102F2EA  +
mov eax [esi] +
push 1  +
mov ecx esi +
call dword ptr [eax+0Ch]  +
mov eax edi +
call sub_10015C0  +
retn 0Ch  +
***
call sub_10015E0  +
mov esi ecx +
mov [ebp-10h] esi +
and dword ptr [esi+4] 0 +
push dword ptr [ebp+8]  +
lea ecx [esi+0Ch] +
mov dword ptr [esi] offset off_10018DC +
call sub_102D4F6  +
mov ecx dword_104A064 +
mov eax [ecx] +
and dword ptr [ebp-4] 0 +
call dword ptr [eax+4]  +
mov eax esi +
call sub_10015C0  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+10h] +
push edi  +
xor edi edi +
cmp esi edi +
jnz loc_102F354  +
mov eax 80004003h +
jmp loc_102F382  +
push dword ptr [ebp+0Ch]  +
mov [esi] edi +
call sub_10017B9  +
test eax eax +
jz loc_102F36F  +
mov eax [ebp+8] +
mov [esi] eax +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
jmp loc_102F380  +
mov ecx [ebp+8] +
push esi  +
push dword ptr [ebp+0Ch]  +
add ecx 0Ch +
call sub_1012B39  +
mov edi eax +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
call sub_10015E0  +
mov [ebp-10h] ecx +
mov dword ptr [ecx] offset off_10018DC +
and dword ptr [ebp-4] 0 +
lea esi [ecx+0Ch] +
mov dword ptr [ecx+4] 0C0000001h +
mov ecx esi +
call sub_10124EB  +
mov ecx dword_104A064 +
mov eax [ecx] +
call dword ptr [eax+8]  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov ecx esi +
call sub_101257A  +
call sub_10015C0  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_102F38D  +
test byte ptr [ebp+8] 1 +
jz loc_102F3F2  +
push esi  +
call off_104B7F0  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push [ebp+arg_4]  +
mov ebx ecx +
push [ebp+hModule]  +
call sub_102B1CD  +
mov esi eax +
test esi esi +
jz loc_102F442  +
push edi  +
movzx edi word ptr [esi] +
push edi  +
mov ecx ebx +
call sub_1003122  +
movzx ecx word ptr [esi] +
push ecx  +
add esi 2 +
push esi  +
push edi  +
push eax  +
call sub_102B491  +
add esp 10h +
push edi  +
mov ecx ebx +
call sub_10032EF  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_8] +
push esi  +
mov esi ecx +
mov [esi] eax +
mov eax [ebp+4] +
mov [esi+4] eax +
mov eax [ebp+arg_0] +
mov [esi+8] eax +
mov eax [ebp+arg_4] +
mov [esi+0Ch] eax +
call sub_1025F31  +
mov eax esi +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax 200Ch +
call sub_100A16A  +
mov eax dword_104A044 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
and [ebp+pv] 0 +
push esi  +
mov esi ecx +
push edi  +
lea ecx [ebp+pv] +
push ecx  +
push eax  +
mov ecx esi +
call sub_102E437  +
mov edi eax +
test edi edi +
jl loc_102F574  +
mov eax [ebp+pv] +
xor ecx ecx +
mov [esi] eax +
cmp cx [eax] +
jz loc_102F566  +
push ebx  +
lea eax [ebp+String1] +
push eax  +
mov ecx esi +
call sub_102DD31  +
mov edi eax +
xor ebx ebx +
cmp edi ebx +
jl loc_102F565  +
lea eax [ebp+String1] +
push eax  +
call sub_102DBFC  +
mov [ebp+var_200C] eax +
cmp eax ebx +
jz loc_102F5AD  +
lea eax [ebp+String1] +
push eax  +
mov ecx esi +
call sub_102DD31  +
mov edi eax +
cmp edi ebx +
jl loc_102F565  +
push 7Bh  +
pop eax  +
cmp ax [ebp+String1] +
jnz loc_102F5AD  +
lea eax [ebp+String1] +
mov ecx esi +
cmp [ebp+arg_4] ebx +
jz loc_102F584  +
mov ebx [esi] +
push 0  +
push [ebp+arg_4]  +
push [ebp+var_200C]  +
push eax  +
call sub_102EB7F  +
mov edi eax +
test edi edi +
jge loc_102F598  +
push 0  +
push 0  +
push [ebp+var_200C]  +
lea eax [ebp+String1] +
push eax  +
mov ecx esi +
mov [esi] ebx +
call sub_102EB7F  +
pop ebx  +
push [ebp+pv]  +
call ds:CoTaskMemFree  +
mov eax edi +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_1002A8B  +
leave   +
retn 8  +
push ebx  +
push ebx  +
push [ebp+var_200C]  +
push eax  +
call sub_102EB7F  +
mov edi eax +
cmp edi ebx +
jl loc_102F565  +
mov ecx esi +
call sub_102DD08  +
mov eax [esi] +
xor ecx ecx +
cmp cx [eax] +
jz loc_102F565  +
jmp loc_102F4D1  +
mov edi 80020009h +
jmp loc_102F565  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_4] +
mov esi ecx +
test edi edi +
jnz loc_102F5D0  +
mov eax 80004003h +
jmp loc_102F5F5  +
xor eax eax +
cmp [esi+0Ch] eax +
jnz loc_102F5DF  +
push [ebp+arg_0]  +
call sub_101AD4E  +
mov ecx [esi+0Ch] +
mov [edi] ecx +
cmp dword ptr [esi+0Ch] 0 +
jz loc_102F5F5  +
mov esi [esi+0Ch] +
mov eax [esi] +
push esi  +
call dword ptr [eax+4]  +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
jz loc_102F612  +
mov eax 8002000Bh +
jmp loc_102F61D  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
call sub_102F5B9  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_101207D  +
test byte ptr [ebp+8] 1 +
jz loc_102F640  +
push esi  +
call off_104B7F0  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_C]  +
mov ecx offset off_104A2E0 +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
call sub_102F600  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_C]  +
mov ecx offset off_104BB20 +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
call sub_102F600  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_14]  +
mov ecx offset off_104BB20 +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
call sub_101B1B8  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx offset off_104BB20 +
pop ebp  +
jmp loc_101B27F  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_C]  +
mov ecx offset off_104BB3C +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
call sub_102F600  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_14]  +
mov ecx offset off_104BB3C +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
call sub_101B1B8  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx offset off_104BB3C +
pop ebp  +
jmp loc_101B27F  +
***
push ebp  +
mov ebp esp +
cmp dword ptr [ebp+8] 0 +
jnz loc_102F743  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push 0  +
call sub_102D10E  +
pop ebp  +
retn 0Ch  +
***
pop ebp  +
jmp loc_102F257  +
***
push 10h  +
mov eax offset dword_104048C +
call sub_1001862  +
mov eax [ebp+arg_8] +
xor esi esi +
cmp eax esi +
jnz loc_102F76A  +
mov eax 80004003h +
jmp loc_102F7E3  +
mov edi 8007000Eh +
push 34h  +
mov [eax] esi +
mov [ebp+var_14] edi +
mov [ebp+var_18] esi +
mov [ebp+var_4] esi +
call off_104B7F4  +
mov ecx eax +
mov [ebp+var_1C] ecx +
mov byte ptr [ebp+var_4] 1 +
cmp ecx esi +
jz loc_102F799  +
push [ebp+arg_0]  +
call sub_102F2F9  +
mov esi eax +
or [ebp+var_4] 0FFFFFFFFh +
jmp loc_102F7AF  +
***
or dword ptr [ebp-4] 0FFFFFFFFh +
mov eax offset loc_102F7A9 +
retn   +
***
mov edi [ebp-14h] +
mov esi [ebp-18h] +
***
test esi esi +
jz loc_102F7E1  +
lea ecx [esi+0Ch] +
call sub_1012C9D  +
mov edi eax +
test edi edi +
jl loc_102F7D8  +
xor edi edi +
test edi edi +
jnz loc_102F7D8  +
push [ebp+arg_8]  +
mov eax [esi] +
push [ebp+arg_4]  +
push esi  +
call dword ptr [eax]  +
mov edi eax +
test edi edi +
jz loc_102F7E1  +
mov eax [esi] +
push 1  +
mov ecx esi +
call dword ptr [eax+0Ch]  +
mov eax edi +
call sub_10015C0  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_102BAD6  +
test eax eax +
jz loc_102F80F  +
push [ebp+arg_0]  +
mov ecx esi +
push eax  +
call sub_102F3FE  +
pop esi  +
pop ebp  +
retn 4  +
***
sub dword ptr [esp+4] 4 +
jmp loc_1001EC9  +
***
sub dword ptr [esp+4] 8 +
jmp loc_1001EC9  +
***
sub dword ptr [esp+4] 4 +
jmp loc_1001D51  +
***
sub dword ptr [esp+4] 8 +
jmp loc_1001D51  +
***
sub dword ptr [esp+4] 4 +
jmp loc_10020CA  +
***
sub dword ptr [esp+4] 8 +
jmp loc_10020CA  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_100209D  +
mov eax [ebp+arg_0] +
mov [esi+0Ch] eax +
mov dword ptr [esi] offset off_102F8C8 +
mov dword ptr [esi+4] offset off_102F8B4 +
mov dword ptr [esi+8] offset off_102F8A4 +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov eax [eax+0Ch] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov eax [eax+0Ch] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+10h]  +
mov eax [ebp+8] +
mov eax [eax+0Ch] +
push dword ptr [ebp+0Ch]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx]  +
pop ebp  +
retn 0Ch  +
***
sub dword ptr [esp+4] 4 +
jmp loc_102F9D9  +
***
sub dword ptr [esp+4] 8 +
jmp loc_102F9D9  +
***
sub dword ptr [esp+4] 4 +
jmp loc_102F9BF  +
***
sub dword ptr [esp+4] 8 +
jmp loc_102F9BF  +
***
sub dword ptr [esp+4] 4 +
jmp loc_102F9A5  +
***
sub dword ptr [esp+4] 8 +
jmp loc_102F9A5  +
***
call sub_1003649  +
mov eax [ebp+8] +
mov edi [ebp+0Ch] +
mov ebx [ebp+10h] +
xor esi esi +
mov [ebp-424h] esi +
mov [ebp-4] esi +
mov [ebp-42Ch] ecx +
mov [ebp-430h] esi +
mov [ebp-418h] esi +
push 2  +
push esi  +
push eax  +
mov byte ptr [ebp-4] 1 +
call ds:LoadLibraryExW  +
mov [ebp-41Ch] eax +
cmp eax esi +
jnz loc_102FA9F  +
call sub_100F56E  +
mov esi eax +
jmp loc_102FBA8  +
push ebx  +
push edi  +
push eax  +
call ds:FindResourceW  +
mov edi eax +
cmp edi esi +
jnz loc_102FAB8  +
call sub_100F56E  +
jmp loc_102FB9A  +
push edi  +
push dword ptr [ebp-41Ch]  +
call ds:LoadResource  +
mov [ebp-428h] eax +
cmp eax esi +
jz loc_102FAAE  +
push edi  +
push dword ptr [ebp-41Ch]  +
call ds:SizeofResource  +
mov edi eax +
lea eax [edi+1] +
mov [ebp-420h] edi +
cmp eax edi +
jnb loc_102FB1E  +
lea eax [ebp-414h] +
cmp [ebp-418h] eax +
jz loc_102FB04  +
lea ecx [ebp-418h] +
call sub_102E027  +
mov esi 8007000Eh +
lea ecx [ebp-424h] +
call sub_102BE1E  +
mov eax esi +
call sub_1002FBC  +
retn 10h  +
push eax  +
lea ecx [ebp-418h] +
mov byte ptr [ebp-4] 2 +
call sub_102E5D8  +
mov dword ptr [ebp-4] 1 +
jmp loc_102FB4C  +
mov dword ptr [ebp-4] 1 +
mov eax offset loc_102FB44 +
retn   +
mov edi [ebp-420h] +
xor esi esi +
cmp [ebp-418h] esi +
jnz loc_102FB5B  +
mov esi 8007000Eh +
jmp loc_102FB9C  +
push edi  +
push dword ptr [ebp-418h]  +
push edi  +
push dword ptr [ebp-428h]  +
push esi  +
push 3  +
call ds:MultiByteToWideChar  +
cmp eax esi +
jz loc_102FAAE  +
mov edx [ebp-418h] +
push dword ptr [ebp+14h]  +
xor ecx ecx +
mov [edx+eax*2] cx +
push dword ptr [ebp-418h]  +
lea ecx [ebp-430h] +
call sub_102F47D  +
mov esi eax +
push dword ptr [ebp-41Ch]  +
call ds:__imp_FreeLibrary  +
lea eax [ebp-414h] +
cmp [ebp-418h] eax +
jz loc_102FB09  +
lea ecx [ebp-418h] +
call sub_102E027  +
jmp loc_102FB09  +
***
call sub_10015E0  +
and dword ptr [ebp-10h] 0 +
movzx eax word ptr [ebp+10h] +
mov ecx [ebp+8] +
and dword ptr [ebp-4] 0 +
push 1  +
push dword ptr [ebp+14h]  +
push eax  +
push dword ptr [ebp+0Ch]  +
call sub_102FA46  +
lea ecx [ebp-10h] +
mov esi eax +
call sub_102BE1E  +
mov eax esi +
call sub_10015C0  +
retn 10h  +
***
call sub_10015E0  +
xor eax eax +
mov [ebp-10h] eax +
mov [ebp-4] eax +
cmp [ebp+10h] eax +
jz loc_102FC50  +
cmp [ebp+14h] eax +
jz loc_102FC50  +
mov ecx [ebp+8] +
push 1  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
call sub_102FA46  +
lea ecx [ebp-10h] +
mov esi eax +
call sub_102BE1E  +
mov eax esi +
jmp loc_102FC5D  +
lea ecx [ebp-10h] +
call sub_102BE1E  +
mov eax 80070057h +
call sub_10015C0  +
retn 10h  +
***
call sub_10015E0  +
xor eax eax +
mov [ebp-10h] eax +
mov ecx [ebp+8] +
push eax  +
push dword ptr [ebp+14h]  +
mov [ebp-4] eax +
movzx eax word ptr [ebp+10h] +
push eax  +
push dword ptr [ebp+0Ch]  +
call sub_102FA46  +
lea ecx [ebp-10h] +
mov esi eax +
call sub_102BE1E  +
mov eax esi +
call sub_10015C0  +
retn 10h  +
***
call sub_10015E0  +
xor eax eax +
mov [ebp-10h] eax +
mov [ebp-4] eax +
cmp [ebp+10h] eax +
jz loc_102FCE9  +
cmp [ebp+14h] eax +
jz loc_102FCE9  +
mov ecx [ebp+8] +
push eax  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
call sub_102FA46  +
lea ecx [ebp-10h] +
mov esi eax +
call sub_102BE1E  +
mov eax esi +
jmp loc_102FCF6  +
lea ecx [ebp-10h] +
call sub_102BE1E  +
mov eax 80070057h +
call sub_10015C0  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0A68h +
mov eax dword_104A044 +
xor eax ebp +
mov [ebp-4] eax +
mov eax [ebp+0Ch] +
push ebx  +
push esi  +
mov esi [ebp+14h] +
push edi  +
mov edi [ebp+8] +
lea ecx [ebp-0A68h] +
mov [ebp-0A3Ch] eax +
call sub_102F1D9  +
lea ecx [ebp-0A58h] +
call sub_100FF69  +
mov ebx eax +
test ebx ebx +
jge loc_102FD64  +
lea ecx [ebp-0A68h] +
call sub_102E35B  +
mov eax ebx +
mov ecx [ebp-4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1002A8B  +
leave   +
retn 10h  +
***
test esi esi +
jnz loc_102FD7D  +
jmp loc_102FD83  +
push dword ptr [esi+4]  +
push eax  +
lea eax [ebp-0A68h] +
push eax  +
call sub_102E7BC  +
add esi 8 +
mov eax [esi] +
test eax eax +
jnz loc_102FD6A  +
mov eax [edi] +
lea ecx [ebp-0A68h] +
push ecx  +
mov ecx edi +
call dword ptr [eax+14h]  +
xor ebx ebx +
cmp eax ebx +
jge loc_102FDA8  +
mov esi eax +
lea ecx [ebp-0A68h] +
call sub_102E35B  +
mov eax esi +
jmp loc_102FD53  +
***
mov edi hModule +
mov esi 104h +
push esi  +
lea eax [ebp-20Ch] +
push eax  +
push edi  +
mov [ebp-0A38h] ebx +
call ds:GetModuleFileNameW  +
cmp eax ebx +
jnz loc_102FDE0  +
call sub_100F56E  +
mov esi eax +
lea ecx [ebp-0A38h] +
call sub_102BE1E  +
jmp loc_102FD99  +
***
cmp eax esi +
jnz loc_102FDF6  +
lea ecx [ebp-0A38h] +
call sub_102BE1E  +
mov esi 8007007Ah +
jmp loc_102FD99  +
***
lea eax [ebp-20Ch] +
push eax  +
push 208h  +
lea eax [ebp-0A34h] +
push eax  +
call sub_102D7C9  +
cmp edi ebx +
jz loc_102FE25  +
push ebx  +
call ds:GetModuleHandleW  +
cmp edi eax +
jz loc_102FE25  +
lea eax [ebp-0A34h] +
jmp loc_102FE8A  +
push 22h  +
pop eax  +
mov [ebp-624h] ax +
lea eax [ebp-0A34h] +
push eax  +
push 20Bh  +
lea eax [ebp-622h] +
push eax  +
call sub_102D6F2  +
test al al +
jnz loc_102FE60  +
lea ecx [ebp-0A38h] +
call sub_102BE1E  +
mov esi 80004005h +
jmp loc_102FD99  +
***
lea eax [ebp-624h] +
push eax  +
call ds:lstrlenW  +
add eax eax +
push 22h  +
pop ecx  +
mov [ebp+eax-624h] cx +
xor ecx ecx +
mov [ebp+eax-622h] cx +
lea eax [ebp-624h] +
push eax  +
push offset aModule  +
lea eax [ebp-0A68h] +
push eax  +
call sub_102E7BC  +
mov esi eax +
cmp esi ebx +
jl loc_102FDD3  +
lea eax [ebp-0A34h] +
push eax  +
push offset aModule_raw  +
lea eax [ebp-0A68h] +
push eax  +
call sub_102E7BC  +
mov esi eax +
cmp esi ebx +
jl loc_102FDD3  +
push offset aRegistry  +
push dword ptr [ebp-0A3Ch]  +
lea eax [ebp-20Ch] +
push eax  +
lea eax [ebp-0A68h] +
push eax  +
cmp [ebp+10h] ebx +
jz loc_102FEF0  +
call sub_102FC11  +
jmp loc_102FDD1  +
***
call sub_102FCAB  +
jmp loc_102FDD1  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0A64h +
mov eax dword_104A044 +
xor eax ebp +
mov [ebp-4] eax +
push ebx  +
push esi  +
mov esi [ebp+14h] +
push edi  +
mov edi [ebp+8] +
lea ecx [ebp-0A64h] +
call sub_102F1D9  +
lea ecx [ebp-0A54h] +
call sub_100FF69  +
mov ebx eax +
test ebx ebx +
jge loc_102FF57  +
lea ecx [ebp-0A64h] +
call sub_102E35B  +
mov eax ebx +
mov ecx [ebp-4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1002A8B  +
leave   +
retn 10h  +
***
test esi esi +
jnz loc_102FF70  +
jmp loc_102FF76  +
push dword ptr [esi+4]  +
push eax  +
lea eax [ebp-0A64h] +
push eax  +
call sub_102E7BC  +
add esi 8 +
mov eax [esi] +
test eax eax +
jnz loc_102FF5D  +
mov eax [edi] +
lea ecx [ebp-0A64h] +
push ecx  +
mov ecx edi +
call dword ptr [eax+14h]  +
xor ebx ebx +
cmp eax ebx +
jge loc_102FF9B  +
mov esi eax +
lea ecx [ebp-0A64h] +
call sub_102E35B  +
mov eax esi +
jmp loc_102FF46  +
***
mov edi hModule +
mov esi 104h +
push esi  +
lea eax [ebp-20Ch] +
push eax  +
push edi  +
mov [ebp-0A38h] ebx +
call ds:GetModuleFileNameW  +
cmp eax ebx +
jnz loc_102FFD3  +
call sub_100F56E  +
mov esi eax +
lea ecx [ebp-0A38h] +
call sub_102BE1E  +
jmp loc_102FF8C  +
***
cmp eax esi +
jnz loc_102FFE9  +
lea ecx [ebp-0A38h] +
call sub_102BE1E  +
mov esi 8007007Ah +
jmp loc_102FF8C  +
***
lea eax [ebp-20Ch] +
push eax  +
push 208h  +
lea eax [ebp-0A34h] +
push eax  +
call sub_102D7C9  +
cmp edi ebx +
jz loc_1030018  +
push ebx  +
call ds:GetModuleHandleW  +
cmp edi eax +
jz loc_1030018  +
lea eax [ebp-0A34h] +
jmp loc_103007D  +
push 22h  +
pop eax  +
mov [ebp-624h] ax +
lea eax [ebp-0A34h] +
push eax  +
push 20Bh  +
lea eax [ebp-622h] +
push eax  +
call sub_102D6F2  +
test al al +
jnz loc_1030053  +
lea ecx [ebp-0A38h] +
call sub_102BE1E  +
mov esi 80004005h +
jmp loc_102FF8C  +
***
lea eax [ebp-624h] +
push eax  +
call ds:lstrlenW  +
add eax eax +
push 22h  +
pop ecx  +
mov [ebp+eax-624h] cx +
xor ecx ecx +
mov [ebp+eax-622h] cx +
lea eax [ebp-624h] +
push eax  +
push offset aModule  +
lea eax [ebp-0A64h] +
push eax  +
call sub_102E7BC  +
mov esi eax +
cmp esi ebx +
jl loc_102FFC6  +
lea eax [ebp-0A34h] +
push eax  +
push offset aModule_raw  +
lea eax [ebp-0A64h] +
push eax  +
call sub_102E7BC  +
mov esi eax +
cmp esi ebx +
jl loc_102FFC6  +
push offset aRegistry  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp-20Ch] +
push eax  +
lea eax [ebp-0A64h] +
push eax  +
cmp [ebp+10h] ebx +
jz loc_10300E0  +
call sub_102FBCF  +
jmp loc_102FFC4  +
***
call sub_102FC6A  +
jmp loc_102FFC4  +
***
call sub_10015E0  +
mov esi ecx +
mov [ebp-10h] esi +
and dword ptr [esi+4] 0 +
push dword ptr [ebp+8]  +
lea ecx [esi+0Ch] +
mov dword ptr [esi] offset off_10018EC +
call sub_102F873  +
mov ecx dword_104A064 +
mov eax [ecx] +
and dword ptr [ebp-4] 0 +
call dword ptr [eax+4]  +
mov eax esi +
call sub_10015C0  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+10h] +
push edi  +
xor edi edi +
cmp esi edi +
jnz loc_103014A  +
mov eax 80004003h +
jmp loc_1030178  +
push dword ptr [ebp+0Ch]  +
mov [esi] edi +
call sub_10017B9  +
test eax eax +
jz loc_1030165  +
mov eax [ebp+8] +
mov [esi] eax +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
jmp loc_1030176  +
mov ecx [ebp+8] +
push esi  +
push dword ptr [ebp+0Ch]  +
add ecx 0Ch +
call sub_10020E6  +
mov edi eax +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
call sub_10015E0  +
mov [ebp-10h] ecx +
mov dword ptr [ecx] offset off_10018EC +
and dword ptr [ebp-4] 0 +
lea esi [ecx+0Ch] +
mov dword ptr [ecx+4] 0C0000001h +
mov ecx esi +
call sub_1001D88  +
mov ecx dword_104A064 +
mov eax [ecx] +
call dword ptr [eax+8]  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov ecx esi +
call sub_1001E1A  +
call sub_10015C0  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1030183  +
test byte ptr [ebp+8] 1 +
jz loc_10301E8  +
push esi  +
call off_104B7F0  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp loc_102FD03  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp loc_102FEFF  +
***
push 10h  +
mov eax offset dword_10406FC +
call sub_1001862  +
mov eax [ebp+10h] +
xor esi esi +
cmp eax esi +
jnz loc_1030230  +
mov eax 80004003h +
jmp loc_10302A9  +
mov edi 8007000Eh +
push 34h  +
mov [eax] esi +
mov [ebp-14h] edi +
mov [ebp-18h] esi +
mov [ebp-4] esi +
call off_104B7F4  +
mov ecx eax +
mov [ebp-1Ch] ecx +
mov byte ptr [ebp-4] 1 +
cmp ecx esi +
jz loc_103025F  +
push dword ptr [ebp+8]  +
call sub_10300EF  +
mov esi eax +
or dword ptr [ebp-4] 0FFFFFFFFh +
jmp loc_1030275  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov eax offset loc_103026F +
retn   +
***
mov edi [ebp-14h] +
mov esi [ebp-18h] +
test esi esi +
jz loc_10302A7  +
lea ecx [esi+0Ch] +
call sub_1001FD7  +
mov edi eax +
test edi edi +
jl loc_103029E  +
xor edi edi +
test edi edi +
jnz loc_103029E  +
push dword ptr [ebp+10h]  +
mov eax [esi] +
push dword ptr [ebp+0Ch]  +
push esi  +
call dword ptr [eax]  +
mov edi eax +
test edi edi +
jz loc_10302A7  +
mov eax [esi] +
push 1  +
mov ecx esi +
call dword ptr [eax+0Ch]  +
mov eax edi +
call sub_10015C0  +
retn 0Ch  +
***
push 0  +
mov eax offset dword_10407E0 +
call sub_10015E0  +
mov esi ecx +
mov edi [ebp+14h] +
lea ebx [edi+4] +
push ebx  +
lea ecx [ebp+14h] +
call sub_1003F3F  +
mov eax [ebp+0Ch] +
mov eax [eax] +
mov ecx [ebp+8] +
mov ecx [ecx] +
and dword ptr [ebp-4] 0 +
push 1  +
push dword ptr [ebp+14h]  +
push eax  +
push ecx  +
call sub_1008F8A  +
mov ecx [ebp+14h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
add ecx 0FFFFFFF0h +
mov [ebp+0Ch] eax +
call sub_1002990  +
cmp dword ptr [ebp+0Ch] 0 +
jge loc_103030A  +
xor eax eax +
inc eax  +
jmp loc_1030325  +
push ebx  +
lea ecx [esi+10h] +
call sub_1003FA0  +
mov eax [edi+0Ch] +
mov [esi+14h] eax +
mov eax [edi+18h] +
and dword ptr [esi+1Ch] 0 +
mov [esi+18h] eax +
xor eax eax +
call sub_10015C0  +
retn 10h  +
***
mov edi edi +
push esi  +
mov esi ecx +
lea eax [esi+10h] +
push eax  +
push 21h  +
call sub_1002C95  +
mov dword ptr [esi] offset off_1002D28 +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
lea eax [ecx+10h] +
push eax  +
push 400h  +
push 20h  +
push dword ptr [ebp+8]  +
call sub_10127AB  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
lea eax [ecx+10h] +
cmp [ecx+4] eax +
jz loc_103038A  +
push eax  +
push 20h  +
push dword ptr [ebp+8]  +
call sub_100FA83  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
lea eax [esi+10h] +
push eax  +
push 11h  +
call sub_1002C95  +
mov dword ptr [esi] offset off_1002C3C +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
lea eax [ecx+10h] +
push eax  +
push 100h  +
push 20h  +
push dword ptr [ebp+8]  +
call sub_10127AB  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
lea eax [ecx+10h] +
cmp [ecx+4] eax +
jz loc_10303EB  +
push eax  +
push 10h  +
push dword ptr [ebp+8]  +
call sub_100FA83  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
lea eax [esi+10h] +
push eax  +
mov dword ptr [esi] offset off_1002C3C +
call sub_1002BC9  +
mov dword ptr [esi] offset off_1002B70 +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1011F36  +
test byte ptr [ebp+8] 1 +
jz loc_103042F  +
push esi  +
call off_104B7F0  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_10303F4  +
test byte ptr [ebp+8] 1 +
jz loc_1030455  +
push esi  +
call off_104B7F0  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
cmp dword ptr [ecx+4] 0 +
jnz loc_103046A  +
and dword ptr [ecx] 0 +
mov ecx [ecx] +
test ecx ecx +
jz locret_1030476  +
mov eax [ecx] +
push 1  +
call dword ptr [eax]  +
retn   +
***
call sub_1002A3A  +
mov eax [ebp+8] +
mov [ebp-0BCh] eax +
mov eax [ebp+0Ch] +
mov [ebp-9Ch] eax +
mov eax [ebp+10h] +
xor ebx ebx +
mov [ebp-0B8h] eax +
mov [eax] ebx +
mov [ebp-0B4h] ebx +
mov dword ptr [ebp-0B0h] 1 +
mov edi 0F003Fh +
push edi  +
push offset aSoftwareMic_11  +
lea ecx [ebp-0B4h] +
mov [ebp-4] ebx +
call sub_10333ED  +
mov esi eax +
cmp esi ebx +
jl loc_103051B  +
lea eax [ebp-0A0h] +
push eax  +
push offset aIncludedextens  +
lea ecx [ebp-0B4h] +
call sub_1033526  +
test eax eax +
jnz loc_103050A  +
call ds:__imp_GetLastError  +
cmp eax ebx +
jle loc_1030508  +
and eax 0FFFFh +
or eax 80070000h +
mov esi eax +
cmp esi ebx +
jl loc_103051B  +
cmp [ebp-0A0h] ebx +
jz loc_103051B  +
mov esi 80004001h +
mov [ebp-0A4h] ebx +
cmp esi ebx +
mov byte ptr [ebp-4] 1 +
jl loc_1030544  +
push ebx  +
lea eax [ebp-0A4h] +
push eax  +
push dword ptr [ebp-9Ch]  +
push dword ptr [ebp-0BCh]  +
call sub_1028A15  +
mov esi eax +
mov [ebp-0ACh] ebx +
mov dword ptr [ebp-0A8h] 1 +
cmp esi ebx +
mov byte ptr [ebp-4] 2 +
jl loc_1030576  +
push edi  +
push offset aExtensionlist  +
lea eax [ebp-0B4h] +
push eax  +
lea ecx [ebp-0ACh] +
call sub_1033498  +
mov esi eax +
lea ecx [ebp-44h] +
call sub_1030393  +
xor edi edi +
jmp loc_103066C  +
lea ecx [ebp-98h] +
call sub_1030332  +
lea eax [ebp-98h] +
push eax  +
push edi  +
lea ecx [ebp-0ACh] +
mov byte ptr [ebp-4] 4 +
call sub_103350A  +
test eax eax +
jz loc_1030675  +
lea eax [ebp-44h] +
push eax  +
push dword ptr [ebp-94h]  +
lea ecx [ebp-0ACh] +
call sub_1033557  +
test eax eax +
jnz loc_10305DE  +
call ds:__imp_GetLastError  +
cmp eax ebx +
jle loc_10305DC  +
and eax 0FFFFh +
or eax 80070000h +
mov esi eax +
cmp esi ebx +
jl loc_1030660  +
push ebx  +
lea ecx [ebp-44h] +
call sub_100FCFC  +
push eax  +
lea ecx [ebp-9Ch] +
call sub_100883D  +
mov esi [ebp-9Ch] +
neg esi  +
sbb esi esi +
and esi 7FF8FFF2h +
add esi 8007000Eh +
js loc_1030654  +
mov [ebp-0A0h] ebx +
mov eax [ebp-0A4h] +
mov ecx [eax] +
lea edx [ebp-0A0h] +
push edx  +
push dword ptr [ebp-9Ch]  +
mov byte ptr [ebp-4] 6 +
push eax  +
call dword ptr [ecx+24h]  +
mov esi eax +
cmp esi ebx +
jl loc_1030640  +
mov eax [ebp-0B8h] +
inc dword ptr [eax]  +
mov eax [ebp-0A0h] +
mov byte ptr [ebp-4] 5 +
cmp eax ebx +
jz loc_1030654  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
push dword ptr [ebp-9Ch]  +
call ds:SysFreeString  +
lea ecx [ebp-98h] +
call sub_1011F36  +
inc edi  +
cmp esi ebx +
jl loc_103069D  +
jmp loc_1030585  +
call ds:__imp_GetLastError  +
cmp eax 103h +
jz loc_1030692  +
cmp eax ebx +
jle loc_1030690  +
and eax 0FFFFh +
or eax 80070000h +
mov esi eax +
lea ecx [ebp-98h] +
call sub_1011F36  +
lea ecx [ebp-44h] +
call sub_10303F4  +
lea ecx [ebp-0ACh] +
mov byte ptr [ebp-4] 1 +
call sub_1030461  +
mov eax [ebp-0A4h] +
mov [ebp-4] bl +
cmp eax ebx +
jz loc_10306C7  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-0B4h] +
call sub_1030461  +
mov eax esi +
call sub_1002A77  +
retn 0Ch  +
***
mov edi edi +
mov edi edi +
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov esi ecx +
lea edi [esi+18h] +
push edi  +
call ds:EnterCriticalSection  +
mov eax [esi+34h] +
mov ecx [ebp+arg_0] +
cmp ecx eax +
jg loc_103086C  +
test ecx ecx +
jl loc_103086C  +
cmp ecx eax +
jnz loc_103085F  +
mov esi [esi+8] +
push edi  +
call ds:LeaveCriticalSection  +
mov eax esi +
jmp loc_1030875  +
push ecx  +
lea ecx [esi+30h] +
call sub_10307FB  +
mov esi [eax] +
jmp loc_1030854  +
push edi  +
call ds:LeaveCriticalSection  +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+8]  +
push 0  +
push dword ptr [ecx+4]  +
call ds:HeapSize  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_10121C3  +
test byte ptr [ebp+8] 1 +
jz loc_10308B6  +
push esi  +
call sub_10085E3  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
test byte ptr [ebp+8] 1 +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_100296C +
jz loc_10308DD  +
push esi  +
call sub_10085E3  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call ds:__imp_GetLastError  +
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call ds:??1type_info@@UAE@XZ  +
test byte ptr [ebp+8] 1 +
jz loc_103092F  +
push esi  +
call sub_10085E3  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_1002A98  +
and dword ptr [ebp-4] 0 +
dec dword ptr [ebp+10h]  +
js loc_1030991  +
mov ecx [ebp+8] +
sub ecx [ebp+0Ch] +
mov [ebp+8] ecx +
call dword ptr [ebp+14h]  +
jmp loc_1030951  +
mov eax [ebp-14h] +
mov [ebp-1Ch] eax +
mov eax [ebp-1Ch] +
mov eax [eax] +
mov [ebp-20h] eax +
mov eax [ebp-20h] +
cmp dword ptr [eax] 0E06D7363h +
jz loc_1030988  +
mov dword ptr [ebp-24h] 0 +
mov eax [ebp-24h] +
retn   +
call ds:?terminate@@YAXXZ  +
mov esp [ebp-18h] +
mov dword ptr [ebp-4] 0FFFFFFFEh +
call sub_1002ADD  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push offset sub_1002A8B  +
push offset dword_104A044  +
call _except_handler4_common  +
add esp 18h +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
push esi  +
xor esi esi +
cmp ecx esi +
jbe loc_1030A64  +
push 0FFFFFFE0h  +
xor edx edx +
pop eax  +
div  ecx +
cmp eax [ebp+arg_8] +
jnb loc_1030A64  +
call _errno  +
push esi  +
push esi  +
push esi  +
push esi  +
push esi  +
mov dword ptr [eax] 0Ch +
call sub_1030DDE  +
add esp 14h +
xor eax eax +
jmp loc_1030A73  +
imul ecx [ebp+arg_8] +
push ecx  +
push [ebp+arg_0]  +
call realloc  +
pop ecx  +
pop ecx  +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov eax [eax] +
cmp dword ptr [eax] 0E06D7363h +
jnz loc_1030AB8  +
cmp dword ptr [eax+10h] 3 +
jnz loc_1030AB8  +
mov eax [eax+14h] +
cmp eax 19930520h +
jz loc_1030AB2  +
cmp eax 19930521h +
jz loc_1030AB2  +
cmp eax 19930522h +
jz loc_1030AB2  +
cmp eax 1994000h +
jnz loc_1030AB8  +
call ds:?terminate@@YAXXZ  +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
mov eax 5A4Dh +
cmp [ecx] ax +
jz loc_1030AE4  +
xor eax eax +
pop ebp  +
retn   +
mov eax [ecx+3Ch] +
add eax ecx +
cmp dword ptr [eax] 4550h +
jnz loc_1030AE0  +
xor edx edx +
mov ecx 10Bh +
cmp [eax+18h] cx +
setz dl  +
mov eax edx +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [eax+3Ch] +
add ecx eax +
movzx eax word ptr [ecx+14h] +
push ebx  +
push esi  +
movzx esi word ptr [ecx+6] +
xor edx edx +
push edi  +
lea eax [eax+ecx+18h] +
test esi esi +
jbe loc_1030B45  +
mov edi [ebp+arg_4] +
mov ecx [eax+0Ch] +
cmp edi ecx +
jb loc_1030B3D  +
mov ebx [eax+8] +
add ebx ecx +
cmp edi ebx +
jb loc_1030B47  +
inc edx  +
add eax 28h +
cmp edx esi +
jb loc_1030B2D  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
call sub_1002A98  +
and dword ptr [ebp-4] 0 +
mov esi offset __ImageBase +
push esi  +
call sub_1030ACE  +
pop ecx  +
test eax eax +
jz loc_1030BAE  +
mov eax [ebp+8] +
sub eax esi +
push eax  +
push esi  +
call sub_1030B08  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1030BAE  +
mov eax [eax+24h] +
shr eax 1Fh +
not eax  +
and eax 1 +
mov dword ptr [ebp-4] 0FFFFFFFEh +
jmp loc_1030BB7  +
mov eax [ebp-14h] +
mov eax [eax] +
mov eax [eax] +
xor ecx ecx +
cmp eax 0C0000005h +
setz cl  +
mov eax ecx +
retn   +
mov esp [ebp-18h] +
mov dword ptr [ebp-4] 0FFFFFFFEh +
xor eax eax +
call sub_1002ADD  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 328h +
mov dword_104A510 eax +
mov dword_104A50C ecx +
mov dword_104A508 edx +
mov dword_104A504 ebx +
mov dword_104A500 esi +
mov dword_104A4FC edi +
mov word_104A528 ss +
mov word_104A51C cs +
mov word_104A4F8 ds +
mov word_104A4F4 es +
mov word_104A4F0 fs +
mov word_104A4EC gs +
pushf   +
pop dword_104A520  +
mov eax [ebp+0] +
mov dword_104A514 eax +
mov eax [ebp+4] +
mov dword_104A518 eax +
lea eax [ebp+8] +
mov dword_104A524 eax +
mov eax [ebp-320h] +
mov dword_104A460 10001h +
mov eax dword_104A518 +
mov dword_104A41C eax +
mov dword_104A410 0C0000409h +
mov dword_104A414 1 +
mov eax dword_104A044 +
mov [ebp-328h] eax +
mov eax dword_104A048 +
mov [ebp-324h] eax +
push 0  +
call ds:SetUnhandledExceptionFilter  +
push offset ExceptionInfo  +
call ds:UnhandledExceptionFilter  +
push 0C0000409h  +
call ds:GetCurrentProcess  +
push eax  +
call ds:TerminateProcess  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2D0h +
mov eax dword_104A044 +
xor eax ebp +
mov [ebp+var_4] eax +
mov [ebp+var_220] eax +
mov [ebp+var_224] ecx +
mov [ebp+var_228] edx +
mov [ebp+var_22C] ebx +
mov [ebp+var_230] esi +
mov [ebp+var_234] edi +
mov [ebp+var_208] ss +
mov [ebp+var_214] cs +
mov [ebp+var_238] ds +
mov [ebp+var_23C] es +
mov [ebp+var_240] fs +
mov [ebp+var_244] gs +
pushf   +
pop [ebp+var_210]  +
mov eax [ebp+4] +
mov [ebp+var_218] eax +
lea eax [ebp+4] +
mov [ebp+var_2D0] 10001h +
mov [ebp+var_20C] eax +
mov eax [eax-4] +
push offset OutputString  +
mov [ebp+var_21C] eax +
call ds:OutputDebugStringA  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_1002A8B  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp loc_1030D08  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
mov eax [ebp+arg_0] +
mov edx [eax+0Ch] +
and [ebp+var_C] 0 +
mov [ebp+var_4] eax +
lea eax [ebp+var_C] +
push eax  +
mov [ebp+var_8] edx +
call sub_1014A22  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_C] +
sub esp 20h +
push esi  +
push edi  +
test edx edx +
jz loc_1030E4D  +
mov eax edx +
lea esi [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_1030E39  +
sub eax esi +
sar eax 1 +
lea eax [eax+eax+2] +
jmp loc_1030E50  +
push 0Ah  +
pop eax  +
mov edi offset aNull +
test edx edx +
jnz loc_1030E5B  +
mov edx edi +
mov ecx [ebp+arg_10] +
and [ebp+var_1C] 0 +
and [ebp+var_14] 0 +
mov [ebp+var_20] edx +
mov [ebp+var_18] eax +
test ecx ecx +
jz loc_1030E89  +
mov eax ecx +
lea esi [eax+2] +
mov dx [eax] +
inc eax  +
inc eax  +
test dx dx +
jnz loc_1030E75  +
sub eax esi +
sar eax 1 +
lea eax [eax+eax+2] +
jmp loc_1030E8C  +
push 0Ah  +
pop eax  +
test ecx ecx +
jnz loc_1030E92  +
mov ecx edi +
and [ebp+var_C] 0 +
and [ebp+var_4] 0 +
mov [ebp+var_8] eax +
lea eax [ebp+var_20] +
push eax  +
push 2  +
push [ebp+arg_8]  +
mov [ebp+var_10] ecx +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call ds:EventWrite  +
pop edi  +
pop esi  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_C] +
sub esp 30h +
push ebx  +
push esi  +
push edi  +
xor edi edi +
cmp ecx edi +
jz loc_1030EED  +
mov eax ecx +
lea esi [eax+2] +
mov dx [eax] +
inc eax  +
inc eax  +
cmp dx di +
jnz loc_1030ED9  +
sub eax esi +
sar eax 1 +
lea eax [eax+eax+2] +
jmp loc_1030EF0  +
push 0Ah  +
pop eax  +
mov ebx offset aNull +
cmp ecx edi +
jnz loc_1030EFB  +
mov ecx ebx +
mov [ebp+var_30] ecx +
mov ecx [ebp+arg_10] +
mov [ebp+var_2C] edi +
mov [ebp+var_28] eax +
mov [ebp+var_24] edi +
cmp ecx edi +
jz loc_1030F27  +
mov eax ecx +
lea esi [eax+2] +
mov dx [eax] +
inc eax  +
inc eax  +
cmp dx di +
jnz loc_1030F13  +
sub eax esi +
sar eax 1 +
lea eax [eax+eax+2] +
jmp loc_1030F2A  +
push 0Ah  +
pop eax  +
cmp ecx edi +
jnz loc_1030F30  +
mov ecx ebx +
mov esi [ebp+arg_14] +
mov [ebp+var_20] ecx +
mov [ebp+var_1C] edi +
mov [ebp+var_18] eax +
mov [ebp+var_14] edi +
cmp esi edi +
jz loc_1030F5C  +
mov eax esi +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
cmp cx di +
jnz loc_1030F48  +
sub eax edx +
sar eax 1 +
lea eax [eax+eax+2] +
jmp loc_1030F5F  +
push 0Ah  +
pop eax  +
mov ecx esi +
cmp esi edi +
jnz loc_1030F67  +
mov ecx ebx +
mov [ebp+var_8] eax +
lea eax [ebp+var_30] +
push eax  +
push 3  +
push [ebp+arg_8]  +
mov [ebp+var_10] ecx +
push [ebp+arg_4]  +
mov [ebp+var_C] edi +
push [ebp+arg_0]  +
mov [ebp+var_4] edi +
call ds:EventWrite  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
lea eax [ecx+128h] +
cmp dword ptr [eax] 0 +
jl loc_1030FA9  +
mov ecx [ebp+arg_0] +
mov [eax] ecx +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
push offset aCatalogMoveFil  +
push 0FFFFFFFFh  +
call nullsub_1  +
mov esi ds:OutputDebugStringW +
push offset aCatalogMoveBeg  +
call esi  +
mov edi [ebp+arg_0] +
push 0  +
lea eax [edi+94h] +
push eax  +
push edi  +
call sub_1034A14  +
push offset aCatalogMoveEnd  +
mov [edi+128h] eax +
call esi  +
pop edi  +
xor eax eax +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_1002A3A  +
xor esi esi +
push esi  +
push 2001Bh  +
push offset aSoftwareMicr_0  +
push 80000002h  +
lea ecx [ebp-0B0h] +
call sub_100A989  +
push offset aOlddatadirecto  +
lea ecx [ebp-0B0h] +
mov [ebp-4] esi +
call sub_100FD89  +
test eax eax +
jnz loc_10310C7  +
call sub_100F56E  +
mov esi eax +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-0B0h] +
call sub_100AA1A  +
mov eax esi +
call sub_1002A77  +
retn   +
***
call sub_10015E0  +
mov esi ecx +
mov [ebp-10h] esi +
lea eax [ebp+8] +
push eax  +
mov dword ptr [ebp-4] 1 +
call sub_100EA61  +
lea eax [ebp+9Ch] +
push eax  +
lea ecx [esi+94h] +
mov byte ptr [ebp-4] 2 +
call sub_100EA61  +
and dword ptr [esi+128h] 0 +
lea ecx [ebp+8] +
call sub_10084DE  +
lea ecx [ebp+9Ch] +
call sub_10084DE  +
mov eax esi +
call sub_10015C0  +
retn 128h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax 1228h +
call sub_100A16A  +
mov eax dword_104A044 +
xor eax ebp +
mov [ebp-4] eax +
mov eax [ebp+8] +
and dword ptr [ebp-121Ch] 0 +
cmp dword ptr [ebp+10h] 1 +
mov [ebp-1224h] eax +
mov eax [ebp+0Ch] +
push ebx  +
mov ebx [ebp+1Ch] +
mov [ebp-1228h] eax +
mov eax [ebp+14h] +
jz loc_103118C  +
cmp dword ptr [ebp+10h] 2 +
jnz loc_1031332  +
cmp dword ptr [ebp+10h] 2 +
mov ecx [ebx+98h] +
push edi  +
mov edi [ebx+4] +
mov [ebp-1218h] edi +
mov [ebp-1220h] ecx +
mov [ebp-1214h] eax +
jnz loc_10311D1  +
push 104h  +
lea ecx [ebp-20Ch] +
push ecx  +
push eax  +
call ds:ExpandEnvironmentStringsW  +
test eax eax +
jz loc_10311D1  +
lea eax [ebp-20Ch] +
mov [ebp-1214h] eax +
push esi  +
push dword ptr [ebp-1214h]  +
mov esi ds:lstrlenW +
call esi  +
push edi  +
mov [ebp-1210h] eax +
call esi  +
mov ecx [ebp-1210h] +
cmp eax ecx +
jg loc_1031330  +
push edi  +
call esi  +
push eax  +
push edi  +
push dword ptr [ebp-1214h]  +
call ds:StrCmpNICW  +
test eax eax +
jnz loc_1031330  +
push dword ptr [ebp-1220h]  +
mov edi 800h +
push edi  +
lea eax [ebp-120Ch] +
push eax  +
call sub_1002525  +
mov [ebp-1210h] eax +
test eax eax +
jl loc_1031323  +
push dword ptr [ebp-1218h]  +
call esi  +
mov ecx [ebp-1214h] +
lea eax [ecx+eax*2] +
push eax  +
push edi  +
lea eax [ebp-120Ch] +
push eax  +
call sub_100F84F  +
mov [ebp-1210h] eax +
test eax eax +
jl loc_1031323  +
lea eax [ebp-120Ch] +
push eax  +
call esi  +
lea eax [eax+eax+2] +
push eax  +
lea eax [ebp-120Ch] +
push eax  +
push dword ptr [ebp+10h]  +
push 0  +
push dword ptr [ebp-1228h]  +
push dword ptr [ebp-1224h]  +
call ds:RegSetValueExW  +
push eax  +
call sub_100A7A1  +
mov [ebp-1210h] eax +
test eax eax +
jl loc_1031323  +
cmp dword_104A3AC 0 +
jz loc_1031319  +
mov al byte_104A3B0 +
cmp al 4 +
jnb loc_10312B9  +
test al al +
jnz loc_1031319  +
mov eax dword_104A398 +
mov ecx dword_104A39C +
mov edx 200h +
mov esi 80000000h +
and eax edx +
and ecx esi +
or eax ecx +
jz loc_1031319  +
mov eax dword_104A3A0 +
mov edi dword_104A3A4 +
mov ecx eax +
and ecx edx +
mov edx edi +
and edx esi +
cmp ecx eax +
jnz loc_1031319  +
cmp edx edi +
jnz loc_1031319  +
push dword ptr [ebp-1220h]  +
push dword ptr [ebp-1218h]  +
push dword ptr [ebp-1214h]  +
push offset dword_1031348  +
push dword_104A134  +
push dword_104A130  +
call sub_1030EC0  +
mov dword ptr [ebp-121Ch] 1 +
push dword ptr [ebp-1210h]  +
mov ecx ebx +
call sub_1030F94  +
pop esi  +
pop edi  +
mov ecx [ebp-4] +
mov eax [ebp-121Ch] +
xor ecx ebp +
pop ebx  +
call sub_1002A8B  +
leave   +
retn 18h  +
***
call sub_10015E0  +
mov eax ecx +
mov ecx [eax+4] +
xor esi esi +
push 2  +
mov [ebp-4] esi +
call sub_1009E64  +
push esi  +
push 1  +
push dword ptr [ebp+0Ch]  +
call sub_10344CD  +
test eax eax +
jnz loc_1031390  +
call sub_100F56E  +
mov esi eax +
lea ecx [ebp+8] +
call sub_10084DE  +
mov eax esi +
call sub_10015C0  +
retn 94h  +
***
call sub_10015E0  +
mov ebx ecx +
and dword ptr [ebp-4] 0 +
sub esp 94h +
lea eax [ebp+8] +
mov ecx esp +
mov [ebp-10h] esp +
push eax  +
call sub_100EA61  +
mov ecx ebx +
call sub_103135D  +
push 2  +
pop edi  +
jmp loc_1031404  +
test edi edi +
jle loc_103140A  +
push 7D0h  +
call ds:Sleep  +
sub esp 94h +
lea eax [ebp+8] +
mov ecx esp +
mov [ebp-10h] esp +
push eax  +
call sub_100EA61  +
mov ecx ebx +
call sub_103135D  +
dec edi  +
mov esi eax +
test esi esi +
jl loc_10313D9  +
lea ecx [ebp+8] +
call sub_10084DE  +
mov eax esi +
call sub_10015C0  +
retn 94h  +
***
call sub_10015E0  +
mov esi ecx +
mov [ebp-10h] esi +
lea eax [ebp+8] +
push eax  +
mov dword ptr [ebp-4] 1 +
call sub_100EA61  +
lea eax [ebp+9Ch] +
push eax  +
lea ecx [esi+94h] +
mov byte ptr [ebp-4] 2 +
call sub_100EA61  +
and dword ptr [esi+128h] 0 +
and dword ptr [esi+12Ch] 0 +
lea ecx [ebp+8] +
call sub_10084DE  +
lea ecx [ebp+9Ch] +
call sub_10084DE  +
mov eax esi +
call sub_10015C0  +
retn 128h  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi+12Ch] +
test eax eax +
jz loc_103149E  +
push eax  +
call ds:CloseHandle  +
lea ecx [esi+94h] +
call sub_10084DE  +
mov ecx esi +
pop esi  +
jmp sub_10084DE  +
***
mov edi edi +
push esi  +
push 0  +
push 0  +
mov esi ecx +
push esi  +
push offset StartAddress  +
push 0  +
push 0  +
call ds:CreateThread  +
mov ecx eax +
xor eax eax +
mov [esi+12Ch] ecx +
pop esi  +
test ecx ecx +
jz sub_100F56E  +
retn   +
***
call sub_1002A3A  +
mov edi ecx +
sub esp 94h +
lea eax [ebp+9Ch] +
mov ecx esp +
mov [ebp-148h] esp +
push eax  +
mov dword ptr [ebp-4] 1 +
call sub_100EA61  +
sub esp 94h +
lea eax [ebp+8] +
mov ecx esp +
mov [ebp-144h] esp +
push eax  +
mov byte ptr [ebp-4] 2 +
call sub_100EA61  +
lea ecx [ebp-140h] +
mov byte ptr [ebp-4] 1 +
call sub_1031421  +
lea ecx [ebp-140h] +
mov byte ptr [ebp-4] 3 +
call sub_10314B6  +
mov ebx eax +
test ebx ebx +
jl loc_103159C  +
mov esi ds:OutputDebugStringW +
push offset aCsmPing  +
call esi  +
mov ecx [edi+4] +
push 2  +
call sub_1009E64  +
push 7D0h  +
push dword ptr [ebp-14h]  +
call ds:WaitForSingleObject  +
cmp eax 102h +
jz loc_103155F  +
test eax eax +
jnz loc_103158E  +
mov ebx [ebp-18h] +
jmp loc_1031595  +
call sub_100F56E  +
mov ebx eax +
push offset aCatalogMoveE_0  +
call esi  +
lea ecx [ebp-140h] +
call sub_1031488  +
lea ecx [ebp+8] +
call sub_10084DE  +
lea ecx [ebp+9Ch] +
call sub_10084DE  +
mov eax ebx +
call sub_1002A77  +
retn 128h  +
***
call sub_10015E0  +
mov esi ecx +
lea eax [ebp+8] +
xor edi edi +
push eax  +
mov [ebp-4] edi +
call sub_100EA61  +
lea ecx [ebp+8] +
mov [esi+98h] edi +
mov [esi+9Ch] edi +
mov [esi+0A0h] edi +
mov [esi+0A4h] edi +
call sub_10084DE  +
mov eax esi +
call sub_10015C0  +
retn 94h  +
***
call sub_1002A3A  +
mov esi ecx +
lea eax [ebp+8] +
xor edi edi +
push eax  +
lea ecx [ebp-1CCh] +
mov [ebp-4] edi +
call sub_100EA61  +
push esi  +
lea ecx [ebp-138h] +
mov byte ptr [ebp-4] 1 +
call sub_100EA61  +
push dword ptr [ebp-1C0h]  +
mov eax [ebp-138h] +
push dword ptr [ebp-12Ch]  +
lea ecx [ebp-138h] +
push dword ptr [ebp-1C8h]  +
mov byte ptr [ebp-4] 2 +
call dword ptr [eax+10h]  +
mov eax [ebp-138h] +
push 0FFFFFFFFh  +
push dword ptr [ebp-12Ch]  +
lea ecx [ebp-138h] +
push offset asc_1007D24  +
call dword ptr [eax+10h]  +
push edi  +
push edi  +
push edi  +
lea eax [ebp-41Ch] +
push eax  +
push edi  +
push dword ptr [ebp-134h]  +
mov [ebp-420h] edi +
call ds:FindFirstFileExW  +
mov [ebp-424h] eax +
cmp eax 0FFFFFFFFh +
jz loc_103183D  +
test byte ptr [ebp-41Ch] 10h +
jz loc_10317F5  +
cmp word ptr [ebp-3F0h] 2Eh +
jz loc_1031801  +
lea eax [esi+0A0h] +
add dword ptr [eax] 1 +
lea ecx [ebp-0A4h] +
adc [eax+4] edi +
lea eax [ebp-1CCh] +
push eax  +
call sub_100EA61  +
mov eax [ebp-0A4h] +
push 0FFFFFFFFh  +
push dword ptr [ebp-98h]  +
lea ecx [ebp-0A4h] +
push offset dword_1003488  +
mov byte ptr [ebp-4] 3 +
call dword ptr [eax+10h]  +
push 0FFFFFFFFh  +
push dword ptr [ebp-98h]  +
lea eax [ebp-3F0h] +
push eax  +
mov eax [ebp-0A4h] +
lea ecx [ebp-0A4h] +
call dword ptr [eax+10h]  +
sub esp 94h +
lea eax [ebp-0A4h] +
mov ecx esp +
mov [ebp-420h] esp +
push eax  +
call sub_100EA61  +
mov ecx esi +
call sub_10316A4  +
lea ecx [ebp-0A4h] +
mov [ebp-420h] eax +
mov byte ptr [ebp-4] 2 +
call sub_10084DE  +
jmp loc_1031801  +
lea eax [esi+98h] +
add dword ptr [eax] 1 +
adc [eax+4] edi +
cmp [ebp-420h] edi +
jl loc_103182F  +
lea eax [ebp-41Ch] +
push eax  +
push dword ptr [ebp-424h]  +
call ds:FindNextFileW  +
test eax eax +
jnz loc_1031746  +
call sub_100F56E  +
mov [ebp-420h] eax +
push dword ptr [ebp-424h]  +
call ds:FindClose  +
jmp loc_1031848  +
call sub_100F56E  +
mov [ebp-420h] eax +
cmp dword ptr [ebp-420h] 80070012h +
jnz loc_103185A  +
mov [ebp-420h] edi +
lea ecx [ebp-138h] +
call sub_10084DE  +
lea ecx [ebp-1CCh] +
call sub_10084DE  +
lea ecx [ebp+8] +
call sub_10084DE  +
mov eax [ebp-420h] +
call sub_1002A77  +
retn 94h  +
***
mov edi edi +
push esi  +
mov esi ecx +
lea ecx [esi+94h] +
call sub_10084DE  +
mov ecx esi +
pop esi  +
jmp sub_10084DE  +
***
call sub_1002A3A  +
and dword ptr [ebp-4] 0 +
mov eax [ecx+4] +
push dword ptr [eax+30h]  +
lea ecx [ebp-9D0h] +
call sub_100A2FC  +
push dword ptr [ebp+130h]  +
lea eax [ebp-50h] +
push offset aD  +
push 20h  +
push eax  +
mov byte ptr [ebp-4] 2 +
call sub_100A257  +
push dword ptr [ebp+134h]  +
lea eax [ebp-90h] +
push offset a0xX  +
push 20h  +
push eax  +
call sub_100A257  +
push 0  +
lea eax [ebp-90h] +
push eax  +
lea eax [ebp-50h] +
push eax  +
push dword ptr [ebp+0A0h]  +
lea eax [ebp-9D0h] +
push dword ptr [ebp+0Ch]  +
push 800003FAh  +
push eax  +
call sub_102636B  +
add esp 3Ch +
lea ecx [ebp-9D0h] +
call sub_100C0D9  +
lea ecx [ebp+8] +
call sub_10084DE  +
lea ecx [ebp+9Ch] +
call sub_10084DE  +
call sub_1002A77  +
retn 130h  +
***
call sub_1002A3A  +
mov eax ecx +
lea esi [eax+9Ch] +
xor edi edi +
push esi  +
lea ecx [ebp+8] +
mov [ebp-4] edi +
call sub_1026A2C  +
test eax eax +
jz loc_1031A17  +
lea eax [ebp+8] +
push eax  +
lea ecx [ebp-0A4h] +
call sub_100EA61  +
mov eax [ebp-0A4h] +
push 0FFFFFFFFh  +
push dword ptr [ebp-98h]  +
lea ecx [ebp-0A4h] +
push offset aSearchData_1  +
mov byte ptr [ebp-4] 1 +
call dword ptr [eax+10h]  +
push edi  +
push 2001Bh  +
push offset aSoftwareMicr_0  +
push 80000002h  +
lea ecx [ebp-144h] +
call sub_100A989  +
lea eax [ebp-0A4h] +
push eax  +
push offset aDatadirectory  +
lea ecx [ebp-144h] +
mov byte ptr [ebp-4] 2 +
call sub_1033BB3  +
test eax eax +
jz loc_10319F6  +
push dword ptr [ebp+0Ch]  +
mov ecx esi +
call sub_100AA00  +
jmp loc_10319FD  +
call sub_100F56E  +
mov edi eax +
lea ecx [ebp-144h] +
mov byte ptr [ebp-4] 1 +
call sub_100AA1A  +
lea ecx [ebp-0A4h] +
call sub_10084DE  +
lea ecx [ebp+8] +
call sub_10084DE  +
mov eax edi +
call sub_1002A77  +
retn 94h  +
***
call sub_10015E0  +
mov esi [ebp+8] +
and dword ptr [ebp-10h] 0 +
mov [ebp-14h] esi +
xor edi edi +
lea eax [ebp+0Ch] +
inc edi  +
push eax  +
mov ecx esi +
mov [ebp-4] edi +
call sub_100EA61  +
mov eax [esi] +
push 0FFFFFFFFh  +
push dword ptr [esi+0Ch]  +
mov ecx esi +
push offset aSearch  +
mov [ebp-10h] edi +
call dword ptr [eax+10h]  +
lea ecx [ebp+0Ch] +
call sub_10084DE  +
mov eax esi +
call sub_10015C0  +
retn 98h  +
***
call sub_1002A3A  +
and dword ptr [ebp-4] 0 +
xor esi esi +
push esi  +
push 2001Bh  +
push offset aSoftwareMicr_0  +
push 80000002h  +
lea ecx [ebp-0B0h] +
call sub_100A989  +
lea eax [ebp+8] +
push eax  +
push offset aOlddatadirecto  +
lea ecx [ebp-0B0h] +
mov byte ptr [ebp-4] 1 +
call sub_1033BB3  +
test eax eax +
jnz loc_1031B04  +
call sub_100F56E  +
mov esi eax +
lea ecx [ebp-0B0h] +
mov byte ptr [ebp-4] 0 +
call sub_100AA1A  +
lea ecx [ebp+8] +
call sub_10084DE  +
mov eax esi +
call sub_1002A77  +
retn 94h  +
***
call sub_1002A3A  +
mov edi ecx +
sub esp 94h +
lea eax [ebp+8] +
mov ecx esp +
mov [ebp-0A8h] esp +
xor esi esi +
push eax  +
mov [ebp-4] esi +
call sub_100EA61  +
lea eax [ebp-0A4h] +
push eax  +
call sub_1031A4D  +
push dword ptr [ebp-0A0h]  +
mov byte ptr [ebp-4] 1 +
call ds:PathIsDirectoryW  +
test eax eax +
jz loc_1031B9A  +
sub esp 94h +
lea eax [ebp-0A4h] +
mov ecx esp +
mov [ebp-0A8h] esp +
push eax  +
call sub_100EA61  +
mov ecx edi +
call sub_10313A7  +
mov esi eax +
lea ecx [ebp-0A4h] +
call sub_10084DE  +
lea ecx [ebp+8] +
call sub_10084DE  +
mov eax esi +
call sub_1002A77  +
retn 94h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
sub esp 94h +
mov esi ecx +
mov ecx esp +
mov [ebp+var_4] esp +
push offset word_100348C  +
call sub_1009D0D  +
mov ecx esi +
call sub_10316A4  +
pop esi  +
leave   +
retn   +
***
call sub_1002A3A  +
sub esp 94h +
lea eax [ebp+8] +
mov ecx esp +
mov [ebp-0BCh] esp +
xor ebx ebx +
push eax  +
mov [ebp-4] ebx +
call sub_100EA61  +
lea ecx [ebp-0B8h] +
call sub_1031659  +
lea ecx [ebp-0B8h] +
mov byte ptr [ebp-4] 1 +
call sub_1031BBC  +
test eax eax +
jl loc_1031C3C  +
mov eax [ebp-20h] +
or eax [ebp-1Ch] +
jnz loc_1031C3C  +
mov bl 1 +
lea ecx [ebp-0B8h] +
call sub_10084DE  +
lea ecx [ebp+8] +
call sub_10084DE  +
mov al bl +
call sub_1002A77  +
retn 94h  +
***
call sub_1002A3A  +
mov eax ecx +
mov ecx [eax+4] +
push 2  +
mov dword ptr [ebp-4] 1 +
call sub_1009E64  +
xor esi esi +
push esi  +
push 0Bh  +
push offset aSoftwareMicr_0  +
push 80000002h  +
lea ecx [ebp-0B0h] +
call sub_100A989  +
sub esp 94h +
mov edi esp +
mov [ebp-1E4h] esp +
sub esp 94h +
lea eax [ebp+9Ch] +
mov ecx esp +
mov [ebp-1E0h] esp +
push eax  +
mov byte ptr [ebp-4] 2 +
call sub_100EA61  +
push edi  +
call sub_100FE6A  +
sub esp 94h +
mov [ebp-1E0h] esp +
mov edi esp +
sub esp 94h +
lea eax [ebp+8] +
mov ecx esp +
mov [ebp-1E0h] esp +
push eax  +
mov byte ptr [ebp-4] 3 +
call sub_100EA61  +
push edi  +
call sub_100FE6A  +
lea ecx [ebp-1DCh] +
mov byte ptr [ebp-4] 2 +
call sub_10310E3  +
push 1000h  +
lea eax [ebp-1DCh] +
push eax  +
push 104h  +
push esi  +
push offset loc_1031143  +
push esi  +
push dword ptr [ebp-14h]  +
mov byte ptr [ebp-4] 4 +
call sub_103362C  +
mov esi [ebp-0B4h] +
test eax eax +
jnz loc_1031D3D  +
mov esi 800703F5h +
lea ecx [ebp-1DCh] +
call sub_103188B  +
lea ecx [ebp-0B0h] +
mov byte ptr [ebp-4] 1 +
call sub_100AA1A  +
lea ecx [ebp+8] +
call sub_10084DE  +
lea ecx [ebp+9Ch] +
call sub_10084DE  +
mov eax esi +
call sub_1002A77  +
retn 128h  +
***
call sub_1002A3A  +
and dword ptr [ebp-4] 0 +
mov eax [ecx+4] +
push dword ptr [eax+30h]  +
lea ecx [ebp-9D0h] +
call sub_100A2FC  +
cmp dword ptr [ebp+134h] 0 +
mov byte ptr [ebp-4] 2 +
jl loc_1031DCB  +
push 0  +
push dword ptr [ebp+0A0h]  +
lea eax [ebp-9D0h] +
push dword ptr [ebp+0Ch]  +
push 400003F9h  +
push eax  +
call sub_100A3F1  +
add esp 14h +
jmp loc_1031E24  +
push dword ptr [ebp+130h]  +
lea eax [ebp-50h] +
push offset aD  +
push 20h  +
push eax  +
call sub_100A257  +
push dword ptr [ebp+134h]  +
lea eax [ebp-90h] +
push offset a0xX  +
push 20h  +
push eax  +
call sub_100A257  +
push 0  +
lea eax [ebp-90h] +
push eax  +
lea eax [ebp-50h] +
push eax  +
push dword ptr [ebp+0A0h]  +
lea eax [ebp-9D0h] +
push dword ptr [ebp+0Ch]  +
push 0C00003F8h  +
push eax  +
call sub_1026388  +
add esp 3Ch +
lea ecx [ebp-9D0h] +
call sub_100C0D9  +
lea ecx [ebp+8] +
call sub_10084DE  +
lea ecx [ebp+9Ch] +
call sub_10084DE  +
call sub_1002A77  +
retn 130h  +
***
call sub_10015E0  +
and dword ptr [ebp-18h] 0 +
mov [ebp-20h] ecx +
lea eax [ebp+9Ch] +
push eax  +
lea ecx [ebp+8] +
mov dword ptr [ebp-4] 1 +
call sub_1032724  +
test eax eax +
jz loc_1031E99  +
lea ecx [ebp+8] +
call sub_10084DE  +
lea ecx [ebp+9Ch] +
call sub_10084DE  +
mov al 1 +
jmp loc_1032589  +
cmp dword_104A3AC 0 +
mov edi 200h +
mov esi 80000000h +
jz loc_1031F06  +
mov al byte_104A3B0 +
cmp al 4 +
jnb loc_1031EB9  +
test al al +
jnz loc_1031F06  +
mov eax dword_104A398 +
mov ecx dword_104A39C +
and eax edi +
and ecx esi +
or eax ecx +
jz loc_1031F06  +
mov eax dword_104A3A0 +
mov ebx dword_104A3A4 +
mov ecx eax +
mov edx ebx +
and ecx edi +
and edx esi +
cmp ecx eax +
jnz loc_1031F06  +
cmp edx ebx +
jnz loc_1031F06  +
push dword ptr [ebp+0A0h]  +
push dword ptr [ebp+0Ch]  +
push offset dword_10325B8  +
push dword_104A134  +
push dword_104A130  +
call sub_1030E23  +
and dword ptr [ebp-14h] 0 +
sub esp 94h +
lea eax [ebp+9Ch] +
mov ecx esp +
mov [ebp-18h] esp +
push eax  +
mov dword ptr [ebp-24h] 0Ah +
call sub_100EA61  +
lea eax [ebp-0C4h] +
push eax  +
call sub_1031A4D  +
push dword ptr [eax+4]  +
mov byte ptr [ebp-4] 2 +
mov dword ptr [ebp-18h] 1 +
call ds:PathIsDirectoryW  +
test eax eax +
jz loc_1031F84  +
sub esp 94h +
mov [ebp-10h] esp +
mov ebx esp +
sub esp 94h +
lea eax [ebp+9Ch] +
mov ecx esp +
mov [ebp-10h] esp +
push eax  +
call sub_100EA61  +
push ebx  +
call sub_1031A4D  +
mov ecx [ebp-20h] +
call sub_1031BE9  +
test al al +
jz loc_1031F84  +
mov bl 1 +
jmp loc_1031F86  +
xor bl bl +
lea ecx [ebp-0C4h] +
mov dword ptr [ebp-4] 1 +
call sub_10084DE  +
test bl bl +
jz loc_1031FCC  +
sub esp 94h +
mov [ebp-10h] esp +
mov ebx esp +
sub esp 94h +
lea eax [ebp+9Ch] +
mov ecx esp +
mov [ebp-10h] esp +
push eax  +
call sub_100EA61  +
push ebx  +
call sub_1031A4D  +
mov ecx [ebp-20h] +
call sub_103135D  +
sub esp 94h +
lea eax [ebp+9Ch] +
mov ecx esp +
mov [ebp-10h] esp +
push eax  +
call sub_100EA61  +
lea eax [ebp-0C4h] +
push eax  +
call sub_100FE6A  +
push dword ptr [eax+4]  +
call ds:PathFileExistsW  +
lea ecx [ebp-0C4h] +
mov ebx eax +
call sub_10084DE  +
test ebx ebx +
jz loc_1032012  +
mov dword ptr [ebp-14h] 800700B7h +
jmp loc_103207A  +
mov eax [ebp+14h] +
mov dword ptr [ebp-24h] 14h +
cmp [ebp+0A8h] eax +
jb loc_1032046  +
push eax  +
push 0  +
lea eax [ebp-30h] +
push eax  +
lea ecx [ebp+9Ch] +
call sub_10034B1  +
lea eax [ebp+8] +
push eax  +
lea ecx [ebp-30h] +
call sub_1030DF9  +
test eax eax +
jnz loc_1032073  +
mov eax [ebp+0A8h] +
cmp [ebp+14h] eax +
jb loc_103207A  +
push eax  +
push 0  +
lea eax [ebp-30h] +
push eax  +
lea ecx [ebp+8] +
call sub_10034B1  +
lea eax [ebp+9Ch] +
push eax  +
lea ecx [ebp-30h] +
call sub_1030DF9  +
test eax eax +
jz loc_103207A  +
mov dword ptr [ebp-14h] 8007007Bh +
cmp dword ptr [ebp-14h] 0 +
mov byte ptr [ebp-1Ch] 0 +
jl loc_1032177  +
push 0  +
sub esp 94h +
lea eax [ebp+9Ch] +
mov ecx esp +
mov [ebp-10h] esp +
push eax  +
mov dword ptr [ebp-24h] 1Eh +
call sub_100EA61  +
mov ecx [ebp-20h] +
call sub_100FDC0  +
cmp dword_104A3AC 0 +
jz loc_1032113  +
mov al byte_104A3B0 +
cmp al 4 +
jnb loc_10320C6  +
test al al +
jnz loc_1032113  +
mov eax dword_104A398 +
mov ecx dword_104A39C +
and eax edi +
and ecx esi +
or eax ecx +
jz loc_1032113  +
mov eax dword_104A3A0 +
mov ebx dword_104A3A4 +
mov ecx eax +
mov edx ebx +
and ecx edi +
and edx esi +
cmp ecx eax +
jnz loc_1032113  +
cmp edx ebx +
jnz loc_1032113  +
push dword ptr [ebp+0A0h]  +
push dword ptr [ebp+0Ch]  +
push offset dword_10325C8  +
push dword_104A134  +
push dword_104A130  +
call sub_1030E23  +
sub esp 94h +
mov ebx esp +
mov [ebp-10h] esp +
sub esp 94h +
lea eax [ebp+9Ch] +
mov ecx esp +
mov [ebp-18h] esp +
push eax  +
call sub_100EA61  +
push ebx  +
call sub_100FE6A  +
sub esp 94h +
mov [ebp-18h] esp +
mov ebx esp +
sub esp 94h +
lea eax [ebp+8] +
mov ecx esp +
mov [ebp-18h] esp +
push eax  +
mov byte ptr [ebp-4] 3 +
call sub_100EA61  +
push ebx  +
call sub_100FE6A  +
mov ecx [ebp-20h] +
mov byte ptr [ebp-4] 1 +
call sub_10314E8  +
mov [ebp-14h] eax +
mov byte ptr [ebp-1Ch] 1 +
cmp dword ptr [ebp-14h] 0 +
mov byte ptr [ebp-1Ah] 0 +
jl loc_10321CE  +
sub esp 94h +
lea eax [ebp+9Ch] +
mov ecx esp +
mov [ebp-10h] esp +
push eax  +
mov dword ptr [ebp-24h] 28h +
call sub_100EA61  +
sub esp 94h +
lea eax [ebp+8] +
mov ecx esp +
mov [ebp-18h] esp +
push eax  +
mov byte ptr [ebp-4] 4 +
call sub_100EA61  +
mov ebx [ebp-20h] +
mov ecx ebx +
mov byte ptr [ebp-4] 1 +
call sub_1031C5E  +
mov [ebp-14h] eax +
mov byte ptr [ebp-1Ah] 1 +
jmp loc_10321D1  +
mov ebx [ebp-20h] +
cmp dword ptr [ebp-14h] 0 +
mov byte ptr [ebp-1Bh] 0 +
jl loc_1032208  +
sub esp 94h +
lea eax [ebp+8] +
mov ecx esp +
mov [ebp-10h] esp +
push eax  +
mov dword ptr [ebp-24h] 32h +
call sub_100EA61  +
mov ecx ebx +
call sub_1031AB1  +
mov [ebp-14h] eax +
test eax eax +
jl loc_1032208  +
mov byte ptr [ebp-1Bh] 1 +
cmp dword ptr [ebp-14h] 0 +
mov byte ptr [ebp-19h] 0 +
jl loc_10322C1  +
sub esp 94h +
lea eax [ebp+9Ch] +
mov ecx esp +
mov [ebp-10h] esp +
push eax  +
mov dword ptr [ebp-24h] 3Ch +
call sub_100EA61  +
mov ecx ebx +
call sub_1031954  +
mov [ebp-14h] eax +
test eax eax +
jl loc_10322C1  +
cmp dword_104A3AC 0 +
mov byte ptr [ebp-19h] 1 +
jz loc_10322A6  +
mov al byte_104A3B0 +
cmp al 4 +
jnb loc_103225C  +
test al al +
jnz loc_10322A6  +
mov eax dword_104A398 +
mov ecx dword_104A39C +
and eax edi +
and ecx esi +
or eax ecx +
jz loc_10322A6  +
mov eax dword_104A3A0 +
mov ebx dword_104A3A4 +
mov ecx eax +
mov edx ebx +
and ecx edi +
and edx esi +
cmp ecx eax +
jnz loc_10322A3  +
cmp edx ebx +
jnz loc_10322A3  +
push dword ptr [ebp+0Ch]  +
push offset dword_10325D8  +
push dword_104A134  +
push dword_104A130  +
call sub_10263C4  +
mov ebx [ebp-20h] +
sub esp 94h +
lea eax [ebp+8] +
mov ecx esp +
mov [ebp-10h] esp +
push eax  +
call sub_100EA61  +
mov ecx ebx +
call sub_1031B2A  +
push dword ptr [ebp-14h]  +
lea eax [ebp+9Ch] +
push dword ptr [ebp-24h]  +
sub esp 94h +
mov ecx esp +
mov [ebp-10h] esp +
push eax  +
call sub_100EA61  +
sub esp 94h +
lea eax [ebp+8] +
mov ecx esp +
mov [ebp-18h] esp +
push eax  +
mov byte ptr [ebp-4] 5 +
call sub_100EA61  +
mov ecx ebx +
mov byte ptr [ebp-4] 1 +
call sub_1031D79  +
cmp dword ptr [ebp-14h] 0 +
jge loc_103256F  +
cmp dword_104A3AC 0 +
jz loc_1032368  +
mov al byte_104A3B0 +
cmp al 4 +
jnb loc_1032321  +
test al al +
jnz loc_1032368  +
mov eax dword_104A398 +
mov ecx dword_104A39C +
and eax edi +
and ecx esi +
or eax ecx +
jz loc_1032368  +
mov edx dword_104A3A0 +
mov ecx dword_104A3A4 +
mov eax edx +
and eax edi +
and ecx esi +
cmp eax edx +
jnz loc_1032368  +
cmp ecx dword_104A3A4 +
jnz loc_1032368  +
push offset dword_1032598  +
push dword_104A134  +
push dword_104A130  +
call sub_100A01E  +
cmp byte ptr [ebp-1Ah] 0 +
jz loc_10323EC  +
sub esp 94h +
lea eax [ebp+8] +
mov ecx esp +
mov [ebp-10h] esp +
push eax  +
call sub_100EA61  +
sub esp 94h +
lea eax [ebp+9Ch] +
mov ecx esp +
mov [ebp-18h] esp +
push eax  +
mov byte ptr [ebp-4] 6 +
call sub_100EA61  +
mov ecx ebx +
mov byte ptr [ebp-4] 1 +
call sub_1031C5E  +
test eax eax +
jge loc_10323EC  +
push eax  +
push 0C8h  +
sub esp 94h +
lea eax [ebp+9Ch] +
mov ecx esp +
mov [ebp-10h] esp +
push eax  +
call sub_100EA61  +
sub esp 94h +
lea eax [ebp+8] +
mov ecx esp +
mov [ebp-18h] esp +
push eax  +
mov byte ptr [ebp-4] 7 +
call sub_100EA61  +
mov ecx ebx +
mov byte ptr [ebp-4] 1 +
call sub_10318A8  +
cmp byte ptr [ebp-1Ch] 0 +
jz loc_10324B9  +
cmp dword_104A3AC 0 +
jz loc_1032457  +
mov al byte_104A3B0 +
cmp al 4 +
jnb loc_103240C  +
test al al +
jnz loc_1032457  +
mov eax dword_104A398 +
mov ecx dword_104A39C +
and eax edi +
and ecx esi +
or eax ecx +
jz loc_1032457  +
mov edx dword_104A3A0 +
mov eax edx +
and eax edi +
mov edi dword_104A3A4 +
mov ecx edi +
and ecx esi +
cmp eax edx +
jnz loc_1032457  +
cmp ecx edi +
jnz loc_1032457  +
push dword ptr [ebp+0A0h]  +
push offset dword_10325A8  +
push dword_104A134  +
push dword_104A130  +
call sub_10263C4  +
sub esp 94h +
lea eax [ebp+9Ch] +
mov ecx esp +
mov [ebp-10h] esp +
push eax  +
call sub_100EA61  +
mov ecx ebx +
call sub_1031B2A  +
test eax eax +
jge loc_10324B9  +
push eax  +
push 0D2h  +
sub esp 94h +
lea eax [ebp+9Ch] +
mov ecx esp +
mov [ebp-10h] esp +
push eax  +
call sub_100EA61  +
sub esp 94h +
lea eax [ebp+8] +
mov ecx esp +
mov [ebp-18h] esp +
push eax  +
mov byte ptr [ebp-4] 8 +
call sub_100EA61  +
mov ecx ebx +
mov byte ptr [ebp-4] 1 +
call sub_10318A8  +
cmp byte ptr [ebp-1Bh] 0 +
jz loc_103250A  +
mov ecx ebx +
call sub_103107D  +
test eax eax +
jge loc_103250A  +
push eax  +
push 0DCh  +
sub esp 94h +
lea eax [ebp+9Ch] +
mov ecx esp +
mov [ebp-10h] esp +
push eax  +
call sub_100EA61  +
sub esp 94h +
lea eax [ebp+8] +
mov ecx esp +
mov [ebp-18h] esp +
push eax  +
mov byte ptr [ebp-4] 9 +
call sub_100EA61  +
mov ecx ebx +
mov byte ptr [ebp-4] 1 +
call sub_10318A8  +
cmp byte ptr [ebp-19h] 0 +
jz loc_103256F  +
sub esp 94h +
lea eax [ebp+8] +
mov ecx esp +
mov [ebp-10h] esp +
push eax  +
call sub_100EA61  +
mov ecx ebx +
call sub_1031954  +
test eax eax +
jge loc_103256F  +
push eax  +
push 0E6h  +
sub esp 94h +
lea eax [ebp+9Ch] +
mov ecx esp +
mov [ebp-10h] esp +
push eax  +
call sub_100EA61  +
sub esp 94h +
lea eax [ebp+8] +
mov ecx esp +
mov [ebp-18h] esp +
push eax  +
mov byte ptr [ebp-4] 0Ah +
call sub_100EA61  +
mov ecx ebx +
mov byte ptr [ebp-4] 1 +
call sub_10318A8  +
lea ecx [ebp+8] +
call sub_10084DE  +
lea ecx [ebp+9Ch] +
call sub_10084DE  +
cmp dword ptr [ebp-14h] 0 +
setnl al  +
call sub_10015C0  +
retn 128h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov edx [ecx] +
push esi  +
push dword ptr [eax+4]  +
mov esi [eax+8] +
mov eax [eax] +
mov esi [esi+4] +
push 0  +
lea eax [esi+eax*2] +
push eax  +
call dword ptr [edx+10h]  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov ecx [eax+0Ch] +
mov eax [eax+4] +
push ecx  +
push eax  +
call sub_1034CE8  +
pop ebp  +
retn 4  +
***
adc eax offset LeaveCriticalSection +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp loc_1032616  +
***
mov edi edi +
push esi  +
mov esi ecx +
lea eax [esi+10h] +
push eax  +
push 81h  +
call sub_1002C95  +
mov dword ptr [esi] offset off_1002C58 +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
lea eax [ecx+10h] +
push eax  +
push 100000h  +
push 80h  +
push dword ptr [ebp+8]  +
call sub_10127AB  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
lea eax [ecx+10h] +
cmp [ecx+4] eax +
jz loc_10326B5  +
push eax  +
push 80h  +
push dword ptr [ebp+8]  +
call sub_100FA83  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
lea eax [esi+10h] +
push eax  +
mov dword ptr [esi] offset off_1002C58 +
call sub_1002BC9  +
mov dword ptr [esi] offset off_1002B70 +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_10326BE  +
test byte ptr [ebp+8] 1 +
jz loc_10326F9  +
push esi  +
call off_104B7F0  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call dword ptr [esi+4]  +
xor edx edx +
div  dword ptr [esi+8] +
pop esi  +
mov eax edx +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push dword ptr [eax+4]  +
push dword ptr [ecx+4]  +
call sub_100C6D5  +
neg eax  +
sbb eax eax +
inc eax  +
pop ebp  +
retn 4  +
***
mov edx [ecx] +
test edx edx +
jnz loc_103274E  +
xor eax eax +
retn   +
mov eax [ecx+4] +
test eax eax +
jz loc_1032768  +
mov [ecx+8] eax +
mov eax [eax] +
add edx 4 +
mov [ecx+4] eax +
cmp eax edx +
jnz loc_1032768  +
and dword ptr [ecx+4] 0 +
xor eax eax +
cmp [ecx+4] eax +
setnz al  +
retn   +
***
push ecx  +
call ds:VariantClear  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_1003DC2  +
and dword ptr [esi+1C4h] 0 +
mov dword ptr [esi] offset off_10018FC +
mov eax esi +
pop esi  +
retn 4  +
***
call sub_10015E0  +
mov [ebp-10h] ecx +
mov dword ptr [ecx] offset off_10018FC +
and dword ptr [ebp-4] 0 +
cmp dword ptr [ecx+4] 0 +
jz loc_10327EA  +
push 8000FFFFh  +
lea ecx [ebp-30h] +
call sub_1026AE1  +
mov esi eax +
lea edi [ebp-20h] +
movs   +
movs   +
movs   +
push offset dword_10458FC  +
lea eax [ebp-20h] +
push eax  +
movs   +
call _CxxThrowException  +
mov dword ptr [ecx] offset off_1003490 +
add ecx 10h +
call sub_1003D18  +
call sub_10015C0  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
add eax 4 +
push eax  +
call ds:InterlockedDecrement  +
cmp eax 0FFFFFFFFh +
jnz loc_103281F  +
mov eax 8000FFFFh +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+10h]  +
mov ecx [ebp+8] +
push dword ptr [ebp+0Ch]  +
call sub_102CAA1  +
pop ebp  +
retn 0Ch  +
***
call sub_10015E0  +
mov esi ecx +
mov ebx [ebp+0Ch] +
mov eax [ebp+8] +
and dword ptr [esi+0Ch] 0 +
mov dword ptr [esi] offset off_10226F4 +
mov [esi+4] eax +
mov [esi+8] ebx +
test ebx ebx +
jnz loc_1032890  +
push 80070057h  +
lea ecx [ebp-3Ch] +
call sub_1026AE1  +
mov esi eax +
lea edi [ebp-1Ch] +
movs   +
movs   +
movs   +
movs   +
push offset dword_10458FC  +
lea eax [ebp-1Ch] +
push eax  +
call _CxxThrowException  +
push 4  +
xor ecx ecx +
pop edx  +
mov eax ebx +
mul  edx +
seto cl  +
neg ecx  +
or eax ecx +
push eax  +
call off_104B7F4  +
mov [esi+10h] eax +
test eax eax +
jnz loc_10328B5  +
push 8007000Eh  +
jmp loc_1032871  +
xor edi edi +
test ebx ebx +
jbe loc_10328F1  +
push 10h  +
call off_104B7F4  +
mov ecx eax +
mov [ebp+8] ecx +
xor eax eax +
mov [ebp-4] eax +
cmp ecx eax +
jz loc_10328D9  +
call sub_103E80E  +
mov eax [ebp+8] +
mov ecx [esi+10h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov [ecx+edi*4] eax +
mov eax [esi+10h] +
cmp dword ptr [eax+edi*4] 0 +
jz loc_10328FB  +
inc edi  +
cmp edi ebx +
jb loc_10328BB  +
mov eax esi +
call sub_10015C0  +
retn 8  +
push 8007000Eh  +
lea ecx [ebp-4Ch] +
call sub_1026AE1  +
mov esi eax +
lea edi [ebp-2Ch] +
movs   +
movs   +
movs   +
movs   +
push offset dword_10458FC  +
lea eax [ebp-2Ch] +
jmp loc_103288A  +
***
mov edi edi +
push esi  +
mov esi ecx +
and dword ptr [esi] 0 +
lea ecx [esi+4] +
call sub_1032654  +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push esi  +
push 118h  +
call off_104B7F4  +
test eax eax +
jz loc_103295F  +
mov ecx eax +
call sub_1032923  +
mov esi eax +
jmp loc_1032961  +
xor esi esi +
test esi esi +
jnz loc_1032989  +
push 8007000Eh  +
lea ecx [ebp+var_20] +
call sub_1026AE1  +
mov esi eax +
lea edi [ebp+var_10] +
movs   +
movs   +
movs   +
push offset dword_10458FC  +
lea eax [ebp+var_10] +
push eax  +
movs   +
call _CxxThrowException  +
mov eax [ebp+arg_0] +
push dword ptr [eax+4]  +
lea ecx [esi+4] +
call sub_100AA00  +
mov eax esi +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
lea ecx [esi+4] +
call sub_10326BE  +
test [ebp+arg_0] 1 +
jz loc_10329C0  +
push esi  +
call off_104B7F0  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_1002A3A  +
mov esi [ebp+8] +
mov edi [ebp+0Ch] +
push 0  +
lea ecx [ebp-1D8h] +
call sub_1032785  +
and dword ptr [ebp-4] 0 +
push 0FFFFFFFFh  +
push esi  +
lea ecx [ebp-1D8h] +
call sub_1003E65  +
lea eax [ebp-1E4h] +
push eax  +
lea ecx [ebp-1D8h] +
call sub_1006BFD  +
mov esi [ebp-1E0h] +
cmp esi 2 +
jbe loc_1032A7A  +
mov eax [ebp-1DCh] +
mov eax [eax+4] +
mov ecx [ebp-1E4h] +
movzx eax word ptr [eax+ecx*2] +
cmp ax 7Bh +
jnz loc_1032A7A  +
lea ecx [ebp-1E4h] +
call sub_100405C  +
cmp ax 7Dh +
jnz loc_1032A7A  +
add esi 0FFFFFFFEh +
push esi  +
push 1  +
lea eax [ebp-1F0h] +
push eax  +
lea ecx [ebp-1E4h] +
call sub_1014B97  +
push eax  +
mov ecx edi +
call sub_10325ED  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-1D8h] +
call sub_10327A7  +
xor eax eax +
jmp loc_1032A8C  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-1D8h] +
call sub_10327A7  +
xor eax eax +
inc eax  +
call sub_1002A77  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_103293C  +
push eax  +
push dword ptr [esi+8]  +
mov ecx esi +
call sub_103E7AD  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_1032AD1  +
push 1  +
call sub_10329A3  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
test byte ptr dword_104BCD8 1 +
push esi  +
mov esi offset unk_104BBC4 +
jnz loc_1032B0E  +
or dword_104BCD8 1 +
and dword_104BBC0 0 +
mov ecx esi +
call sub_1032654  +
push offset loc_1045801  +
call sub_1010E75  +
pop ecx  +
mov eax [ebp+arg_0] +
test eax eax +
jnz loc_1032B19  +
mov eax esi +
jmp loc_1032B1C  +
add eax 4 +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_10015E0  +
mov esi ecx +
lea eax [esi+74h] +
push eax  +
lea ecx [ebp-10h] +
call sub_1002BED  +
push dword ptr [esi+58h]  +
and dword ptr [ebp-4] 0 +
mov ecx esi +
call sub_1009E64  +
cmp dword ptr [ebp-10h] 0 +
jz loc_1032B5D  +
push dword ptr [ebp-10h]  +
call ds:LeaveCriticalSection  +
call sub_10015C0  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
cmp dword ptr [esi+0Ch] 0 +
jz loc_1032B89  +
push esi  +
mov ecx esi +
call sub_103E7D8  +
test eax eax +
jz loc_1032B89  +
push eax  +
mov ecx esi +
call sub_1032ABE  +
jmp loc_1032B6D  +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
push edi  +
mov esi ecx +
xor edi edi +
cmp [esi+8] edi +
jbe loc_1032BAE  +
mov eax [esi+10h] +
mov ecx [eax+edi*4] +
call sub_1032B68  +
inc edi  +
cmp edi [esi+8] +
jb loc_1032B9D  +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
and [ebp+var_4] 0 +
mov [ebp+var_C] ecx +
mov [ebp+var_8] ecx +
jmp loc_1032BE8  +
mov eax [ebp+var_4] +
neg eax  +
sbb eax eax +
and eax [ebp+var_8] +
push eax  +
call sub_1032ADA  +
push [ebp+arg_0]  +
mov ecx eax +
call sub_1032724  +
test eax eax +
jnz loc_1032BF8  +
lea ecx [ebp+var_C] +
call sub_1032745  +
test eax eax +
jnz loc_1032BCA  +
leave   +
retn 4  +
xor eax eax +
inc eax  +
jmp locret_1032BF4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1032B68  +
test [ebp+arg_0] 1 +
jz loc_1032C1C  +
push esi  +
call off_104B7F0  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
push [ebp+arg_0]  +
call sub_1032705  +
mov ecx [esi+10h] +
mov ecx [ecx+eax*4] +
call sub_1032BB6  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
push edi  +
mov esi ecx +
xor edi edi +
mov dword ptr [esi] offset off_10226F4 +
cmp [esi+8] edi +
jbe loc_1032C7A  +
mov eax [esi+10h] +
mov ecx [eax+edi*4] +
test ecx ecx +
jz loc_1032C74  +
push 1  +
call sub_1032C02  +
inc edi  +
cmp edi [esi+8] +
jb loc_1032C63  +
push dword ptr [esi+10h]  +
call off_104B7F0  +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_1032705  +
push [ebp+arg_0]  +
mov edi eax +
mov eax [esi+10h] +
shl edi 2 +
mov ecx [eax+edi] +
call sub_1032BB6  +
test eax eax +
jz loc_1032CB7  +
xor eax eax +
jmp loc_1032CCB  +
mov eax [esi+10h] +
push [ebp+arg_0]  +
mov ecx [eax+edi] +
call sub_1032A99  +
inc dword ptr [esi+0Ch]  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1032C50  +
test byte ptr [ebp+8] 1 +
jz loc_1032CF0  +
push esi  +
call off_104B7F0  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_1003649  +
mov [ebp-2F0h] ecx +
push 11h  +
xor ebx ebx +
push offset loc_1032647  +
lea ecx [ebp-31Ch] +
mov [ebp-4] ebx +
call sub_1032844  +
push ebx  +
push 20019h  +
push offset aSoftwareMicr_8  +
push 80000002h  +
lea ecx [ebp-0B4h] +
mov byte ptr [ebp-4] 1 +
call sub_100A989  +
lea ecx [ebp-2DCh] +
call sub_1032654  +
mov byte ptr [ebp-4] 3 +
xor esi esi +
lea eax [ebp-2DCh] +
push eax  +
push esi  +
lea ecx [ebp-0B4h] +
call sub_1033EB7  +
cmp eax ebx +
jz loc_1032D84  +
lea eax [ebp-2DCh] +
push eax  +
lea ecx [ebp-31Ch] +
call sub_1032C8B  +
inc esi  +
jmp loc_1032D58  +
mov [ebp-2ECh] ebx +
lea eax [ebp-2ECh] +
push eax  +
push offset stru_1002154  +
push 15h  +
push ebx  +
push offset rclsid  +
mov byte ptr [ebp-4] 4 +
call ds:CoCreateInstance  +
mov esi eax +
cmp esi ebx +
jnz loc_1032F74  +
mov [ebp-2E0h] ebx +
push offset aSystemindex  +
push offset aWindows  +
lea eax [ebp-2E0h] +
push eax  +
push dword ptr [ebp-2ECh]  +
mov byte ptr [ebp-4] 5 +
call sub_1016C29  +
mov esi eax +
cmp esi ebx +
jnz loc_1032F60  +
mov [ebp-2F4h] ebx +
lea eax [ebp-2F4h] +
push eax  +
push dword ptr [ebp-2E0h]  +
mov byte ptr [ebp-4] 6 +
call sub_1016BD1  +
mov esi eax +
cmp esi ebx +
jnz loc_1032F4C  +
lea eax [ebp-304h] +
push eax  +
call ds:VariantInit  +
mov edi ds:VariantClear +
mov byte ptr [ebp-4] 7 +
cmp esi ebx +
jnz loc_1032F43  +
mov eax [ebp-2F4h] +
mov ecx [eax] +
lea edx [ebp-308h] +
push edx  +
lea edx [ebp-304h] +
push edx  +
push 1  +
push eax  +
call dword ptr [ecx+0Ch]  +
cmp eax ebx +
jnz loc_1032F43  +
push 9  +
pop eax  +
cmp ax [ebp-304h] +
jnz loc_1032F35  +
mov [ebp-2E8h] ebx +
mov eax [ebp-2FCh] +
mov ecx [eax] +
lea edx [ebp-2E8h] +
push edx  +
push offset dword_1032FE0  +
push eax  +
mov byte ptr [ebp-4] 8 +
call dword ptr [ecx]  +
mov esi eax +
cmp esi ebx +
jnz loc_1032F21  +
mov [ebp-2E4h] ebx +
mov eax [ebp-2E8h] +
mov ecx [eax] +
lea edx [ebp-2E4h] +
push edx  +
push eax  +
mov byte ptr [ebp-4] 9 +
call dword ptr [ecx+1Ch]  +
mov esi eax +
cmp esi ebx +
jnz loc_1032F15  +
lea ecx [ebp-1C8h] +
call sub_1032654  +
mov ecx [ebp-2F0h] +
lea eax [ebp-1C8h] +
push eax  +
push dword ptr [ebp-2E4h]  +
mov byte ptr [ebp-4] 0Ah +
call sub_10329CC  +
cmp eax ebx +
jnz loc_1032F0A  +
lea eax [ebp-1C8h] +
push eax  +
lea ecx [ebp-31Ch] +
call sub_1032C28  +
cmp eax ebx +
jnz loc_1032F0A  +
mov eax [ebp-2E8h] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4Ch]  +
mov eax [ebp-2E0h] +
push dword ptr [ebp-2E4h]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+2Ch]  +
mov esi eax +
lea ecx [ebp-1C8h] +
call sub_10326BE  +
push dword ptr [ebp-2E4h]  +
call ds:SysFreeString  +
mov eax [ebp-2E8h] +
mov byte ptr [ebp-4] 7 +
cmp eax ebx +
jz loc_1032F35  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
lea eax [ebp-304h] +
push eax  +
call edi  +
jmp loc_1032E1F  +
lea eax [ebp-304h] +
push eax  +
call edi  +
mov eax [ebp-2F4h] +
mov byte ptr [ebp-4] 5 +
cmp eax ebx +
jz loc_1032F60  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-2E0h] +
mov byte ptr [ebp-4] 4 +
cmp eax ebx +
jz loc_1032F74  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
lea ecx [ebp-31Ch] +
call sub_1032B90  +
mov eax [ebp-2ECh] +
mov byte ptr [ebp-4] 3 +
cmp eax ebx +
jz loc_1032F93  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
lea ecx [ebp-2DCh] +
call sub_10326BE  +
lea ecx [ebp-0B4h] +
mov byte ptr [ebp-4] 1 +
call sub_100AA1A  +
lea ecx [ebp-31Ch] +
mov [ebp-4] bl +
call sub_1032C50  +
jmp loc_1032FD7  +
mov eax [ebp-320h] +
mov eax [eax] +
mov [ebp-2F0h] eax +
mov eax offset loc_1032FD1 +
retn   +
mov esi [ebp-2F0h] +
mov eax esi +
call sub_1002FBC  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+lpString]  +
mov esi ecx +
call sub_1011187  +
mov dword ptr [esi] offset off_1002C74 +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
add [eax+2Bh] esi +
add [ecx] al +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
test [ebp+arg_0] 1 +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_1002B70 +
jz loc_103303E  +
push esi  +
call off_104B7F0  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_C]  +
mov ecx [ebp+arg_0] +
push [ebp+arg_8]  +
add ecx 10h +
push [ebp+arg_4]  +
call sub_1033903  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
mov edi [ebp+arg_4] +
test edi edi +
jnz loc_1033080  +
mov eax 80004003h +
jmp loc_1033092  +
push esi  +
mov esi [ebp+arg_0] +
push 8  +
add esi 1A4h +
pop ecx  +
movs   +
xor eax eax +
pop esi  +
pop edi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call ds:__imp_GetLastError  +
or dword ptr [esi+0Ch] 0FFFFFFFFh +
mov [esi] eax +
mov eax [ebp+4] +
mov ecx esi +
mov [esi+4] eax +
mov dword ptr [esi+8] offset dword_10223DC +
call sub_1025F31  +
mov eax esi +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
sub esp 20h +
cmp eax [ecx+4] +
jbe loc_1033102  +
push 800700CEh  +
lea ecx [ebp+var_20] +
call sub_1026AE1  +
mov esi eax +
lea edi [ebp+var_10] +
movs   +
movs   +
movs   +
push offset dword_10458FC  +
lea eax [ebp+var_10] +
push eax  +
movs   +
call _CxxThrowException  +
mov [ecx+4] eax +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx+4] +
mov edx [ebp+arg_0] +
sub esp 20h +
cmp edx eax +
jbe loc_1033144  +
push 800700CEh  +
lea ecx [ebp+var_20] +
call sub_1026AE1  +
mov esi eax +
lea edi [ebp+var_10] +
movs   +
movs   +
movs   +
push offset dword_10458FC  +
lea eax [ebp+var_10] +
push eax  +
movs   +
call _CxxThrowException  +
add [ecx] edx +
sub eax edx +
mov [ecx+4] eax +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push esi  +
mov esi ecx +
mov eax [esi+0Ch] +
mov [ebp+var_4] eax +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_8] +
push eax  +
lea eax [ebp+var_4] +
push eax  +
mov [ebp+var_8] 2 +
call sub_1002F25  +
mov eax [ebp+var_4] +
cmp eax [esi+8] +
jbe loc_10331BF  +
mov edx [esi] +
push eax  +
mov ecx esi +
call dword ptr [edx]  +
mov eax [esi+0Ch] +
mov ecx [esi+4] +
mov dx [ebp+arg_0] +
mov [ecx+eax*2] dx +
inc dword ptr [esi+0Ch]  +
mov eax [esi+0Ch] +
mov ecx [esi+4] +
xor edx edx +
mov [ecx+eax*2] dx +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
sub esp 0Ch +
lea eax [ebp+var_C] +
push eax  +
call sub_1006BFD  +
push [ebp+arg_C]  +
lea ecx [ebp+var_C] +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
call sub_1005A97  +
leave   +
retn 10h  +
***
call sub_10015E0  +
xor esi esi +
lea ecx [ebp-74h] +
mov dword ptr [ebp-30h] 0Ch +
mov [ebp-28h] esi +
call sub_100EAF8  +
lea ecx [ebp-18h] +
mov [ebp-4] esi +
call sub_1010B60  +
xor ebx ebx +
inc ebx  +
lea ecx [ebp-14h] +
mov [ebp-4] bl +
call sub_100CDEE  +
lea ecx [ebp-10h] +
mov byte ptr [ebp-4] 2 +
mov [ebp-10h] esi +
call sub_100EB5D  +
mov eax [ebp+0Ch] +
mov byte ptr [ebp-4] 3 +
cmp eax esi +
jnz loc_1033312  +
mov eax [ebp-18h] +
mov [ebp-20h] eax +
lea eax [ebp+0Ch] +
push eax  +
lea eax [ebp-1Ch] +
push eax  +
lea eax [ebp-20h] +
push eax  +
push ebx  +
mov edi 10000000h +
push ebx  +
lea ecx [ebp-10h] +
mov byte ptr [ebp+0Ch] 9 +
mov [ebp-1Ch] edi +
call sub_100EF71  +
mov eax [ebp-18h] +
mov [ebp-1Ch] eax +
lea eax [ebp+0Ch] +
push eax  +
lea eax [ebp-20h] +
push eax  +
lea eax [ebp-1Ch] +
push eax  +
push ebx  +
mov esi 1F01FFh +
push ebx  +
lea ecx [ebp-10h] +
mov byte ptr [ebp+0Ch] 2 +
mov [ebp-20h] esi +
call sub_100EF71  +
mov eax [ebp-14h] +
mov [ebp-1Ch] eax +
lea eax [ebp+0Ch] +
push eax  +
lea eax [ebp-20h] +
push eax  +
lea eax [ebp-1Ch] +
push eax  +
push ebx  +
push ebx  +
lea ecx [ebp-10h] +
mov byte ptr [ebp+0Ch] 9 +
mov [ebp-20h] edi +
call sub_100EF71  +
mov eax [ebp-14h] +
mov [ebp-1Ch] eax +
lea eax [ebp+0Ch] +
push eax  +
lea eax [ebp-20h] +
push eax  +
lea eax [ebp-1Ch] +
push eax  +
push ebx  +
push ebx  +
lea ecx [ebp-10h] +
mov byte ptr [ebp+0Ch] 2 +
mov [ebp-20h] esi +
call sub_100EF71  +
push 0  +
push dword ptr [ebp-10h]  +
lea ecx [ebp-74h] +
push ebx  +
call sub_100CDC5  +
lea eax [ebp-74h] +
mov [ebp-2Ch] eax +
lea eax [ebp-30h] +
push eax  +
lea eax [ebp-24h] +
push eax  +
push dword ptr [ebp+8]  +
call sub_10341B0  +
test eax eax +
jnz loc_103335A  +
mov eax [ebp-24h] +
test eax eax +
jle loc_103333A  +
and eax 0FFFFh +
or eax 80070000h +
push eax  +
lea ecx [ebp-50h] +
call sub_1026AE1  +
mov esi eax +
lea edi [ebp-40h] +
movs   +
movs   +
movs   +
push offset dword_10458FC  +
lea eax [ebp-40h] +
push eax  +
movs   +
call _CxxThrowException  +
push dword ptr [ebp-10h]  +
mov byte ptr [ebp-4] 2 +
call off_104B7F0  +
and dword ptr [ebp-10h] 0 +
lea ecx [ebp-14h] +
mov [ebp-4] bl +
call sub_100EAE5  +
lea ecx [ebp-18h] +
mov byte ptr [ebp-4] 0 +
call sub_100EAE5  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-74h] +
call sub_100EA8C  +
call sub_10015C0  +
retn 8  +
***
mov eax [ecx] +
mov ecx eax +
and ecx 1FFF0000h +
cmp ecx 70000h +
jnz loc_10333B0  +
movzx eax ax +
push eax  +
call ds:SetLastError  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
mov eax [ecx+0Ch] +
test eax eax +
jz loc_10333D7  +
mov edx [ecx+4] +
cmp word ptr [edx+eax*2-2] 5Ch +
jz loc_10333E4  +
mov edx [ecx] +
push 0FFFFFFFFh  +
push eax  +
push offset dword_1003488  +
call dword ptr [edx+10h]  +
pop ebp  +
retn 4  +
***
call sub_1002A3A  +
mov edi [ebp+8] +
push 0  +
mov esi ecx +
call ds:SetLastError  +
push edi  +
lea ecx [ebp-0A4h] +
call sub_1009D0D  +
mov ecx [esi] +
and dword ptr [ebp-4] 0 +
test ecx ecx +
jz loc_103342C  +
and dword ptr [esi] 0 +
test ecx ecx +
jz loc_103342C  +
mov eax [ecx] +
push 1  +
call dword ptr [eax]  +
push 0A0h  +
call off_104B7F4  +
mov ecx eax +
mov [ebp-0A8h] ecx +
mov byte ptr [ebp-4] 1 +
test ecx ecx +
jz loc_1033459  +
push 0  +
push dword ptr [ebp+0Ch]  +
push edi  +
push 80000002h  +
call sub_100A989  +
jmp loc_103345B  +
xor eax eax +
mov [esi] eax +
test eax eax +
jnz loc_103347B  +
mov esi 8007000Eh +
lea ecx [ebp-0A4h] +
call sub_10084DE  +
mov eax esi +
call sub_1002A77  +
retn 8  +
call ds:__imp_GetLastError  +
test eax eax +
jle loc_103348F  +
and eax 0FFFFh +
or eax 80070000h +
mov esi eax +
jmp loc_1033466  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
push edi  +
mov edi ds:SetLastError +
xor ebx ebx +
push ebx  +
mov esi ecx +
call edi  +
mov ecx [esi] +
cmp ecx ebx +
jz loc_10334BC  +
mov [esi] ebx +
mov eax [ecx] +
push 1  +
call dword ptr [eax]  +
mov eax [ebp+arg_0] +
mov [ebp+var_4] ebx +
test eax eax +
jz loc_10334DC  +
mov ecx [eax] +
test ecx ecx +
jz loc_10334DC  +
push [ebp+arg_8]  +
mov eax [ecx] +
push esi  +
push [ebp+arg_4]  +
call dword ptr [eax+4]  +
mov ebx eax +
jmp loc_10334E0  +
push 6  +
call edi  +
pop edi  +
pop esi  +
test ebx ebx +
pop ebx  +
jnz loc_10334FE  +
call ds:__imp_GetLastError  +
test eax eax +
jle loc_10334FB  +
and eax 0FFFFh +
or eax 80070000h +
mov [ebp+var_4] eax +
mov eax [ebp+var_4] +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ecx] +
test ecx ecx +
jz loc_103351B  +
mov eax [ecx] +
pop ebp  +
jmp dword ptr [eax+14h]  +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov ecx [ecx] +
test ecx ecx +
jz loc_103354C  +
lea edx [ebp+var_4] +
push edx  +
push [ebp+arg_4]  +
mov [ebp+var_4] 4 +
mov eax [ecx] +
push 3  +
push [ebp+arg_0]  +
call dword ptr [eax+20h]  +
jmp locret_103354E  +
xor eax eax +
leave   +
retn 8  +
***
call sub_1001862  +
mov edi ecx +
mov eax [edi] +
xor esi esi +
cmp eax esi +
jz loc_103361D  +
lea edx [ebp-14h] +
push edx  +
push esi  +
mov ebx 82h +
push ebx  +
push dword ptr [ebp+8]  +
mov ecx eax +
mov [ebp-14h] esi +
mov eax [ecx] +
mov [ebp-4] esi +
call dword ptr [eax+20h]  +
cmp eax esi +
jz loc_103361D  +
mov esi [ebp-14h] +
mov ecx [ebp+0Ch] +
mov edi [edi] +
shr esi 1 +
inc esi  +
push esi  +
call sub_100FCFC  +
mov edx [edi] +
lea ecx [ebp-14h] +
push ecx  +
push eax  +
push ebx  +
push dword ptr [ebp+8]  +
mov ecx edi +
call dword ptr [edx+20h]  +
mov edi eax +
test edi edi +
jz loc_103360B  +
mov ecx [ebp+0Ch] +
lea eax [esi-1] +
push eax  +
call sub_100A108  +
mov ecx [ebp+0Ch] +
push 0  +
call sub_100FCFC  +
lea ecx [ebp+8] +
push ecx  +
push esi  +
push eax  +
call sub_101A59C  +
test eax eax +
jge loc_1033600  +
push eax  +
lea ecx [ebp-38h] +
call sub_1026AE1  +
mov esi eax +
lea edi [ebp-28h] +
movs   +
movs   +
movs   +
push offset dword_10458FC  +
lea eax [ebp-28h] +
push eax  +
movs   +
call _CxxThrowException  +
push dword ptr [ebp+8]  +
mov ecx [ebp+0Ch] +
call sub_100A108  +
mov eax edi +
jmp loc_103361F  +
mov ecx [ebp-18h] +
call sub_103339B  +
mov eax offset loc_103361D +
retn   +
xor eax eax +
call sub_10015C0  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 22Ch +
mov eax dword_104A044 +
xor eax ebp +
mov [ebp+var_4] eax +
mov ecx [ebp+arg_C] +
mov eax [ebp+arg_8] +
push ebx  +
mov ebx [ebp+arg_4] +
mov [ebp+var_21C] ecx +
mov ecx [ebp+arg_14] +
push edi  +
mov edi [ebp+arg_0] +
mov [ebp+var_228] eax +
mov [ebp+var_224] ecx +
mov [ebp+var_210] 1 +
test ebx ebx +
jnz loc_103367A  +
test eax eax +
jz loc_103375E  +
push esi  +
mov esi [ebp+arg_10] +
test esi esi +
jnz loc_1033687  +
mov esi 104h +
push 2  +
xor ecx ecx +
pop edx  +
mov eax esi +
mul  edx +
seto cl  +
neg ecx  +
or ecx eax +
push ecx  +
call off_104B7F4  +
and [ebp+dwIndex] 0 +
mov [ebp+phkResult] eax +
push 0  +
lea eax [ebp+cbClass] +
push eax  +
lea eax [ebp+Class] +
push eax  +
push 0  +
lea eax [ebp+cbName] +
push eax  +
push [ebp+phkResult]  +
mov [ebp+cbName] esi +
push [ebp+dwIndex]  +
mov [ebp+cbClass] 104h +
push edi  +
call ds:RegEnumKeyExW  +
test eax eax +
jnz loc_1033735  +
push [ebp+arg_18]  +
push [ebp+var_224]  +
push esi  +
push [ebp+var_21C]  +
push [ebp+var_228]  +
push ebx  +
push [ebp+phkResult]  +
push edi  +
call sub_103389B  +
mov [ebp+var_210] eax +
test eax eax +
jz loc_103374A  +
test ebx ebx +
jz loc_103374A  +
cmp [ebp+cbName] esi +
jnb loc_1033743  +
push [ebp+var_21C]  +
push [ebp+phkResult]  +
push edi  +
call ebx  +
jmp loc_103374A  +
cmp eax 103h +
jz loc_103375D  +
cmp eax 0EAh +
jz loc_103374A  +
and [ebp+var_210] 0 +
inc [ebp+dwIndex]  +
cmp [ebp+var_210] 0 +
jnz loc_10336AB  +
pop esi  +
mov ecx [ebp+var_4] +
mov eax [ebp+var_210] +
pop edi  +
xor ecx ebp +
pop ebx  +
call sub_1002A8B  +
leave   +
retn 1Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 22Ch +
mov eax dword_104A044 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_4] +
mov ecx [ebp+arg_8] +
push ebx  +
mov ebx [ebp+arg_0] +
mov [ebp+var_228] eax +
mov [ebp+var_22C] ecx +
mov [ebp+var_210] 1 +
test eax eax +
jz loc_1033881  +
push esi  +
mov esi [ebp+arg_C] +
test esi esi +
jnz loc_10337C3  +
mov esi 1000h +
push esi  +
call off_104B7F4  +
and [ebp+dwIndex] 0 +
mov [ebp+lpData] eax +
lea eax [ebp+cbData] +
push eax  +
push [ebp+lpData]  +
lea eax [ebp+Type] +
push eax  +
push 0  +
lea eax [ebp+cbValueName] +
push eax  +
lea eax [ebp+ValueName] +
push eax  +
push [ebp+dwIndex]  +
mov [ebp+cbValueName] 104h +
push ebx  +
mov [ebp+cbData] esi +
call ds:RegEnumValueW  +
test eax eax +
jnz loc_1033858  +
cmp [ebp+cbValueName] 104h +
jnb loc_1033866  +
cmp [ebp+cbData] esi +
ja loc_1033866  +
push [ebp+var_22C]  +
lea eax [ebp+ValueName] +
push [ebp+cbData]  +
push [ebp+lpData]  +
push [ebp+Type]  +
push eax  +
push ebx  +
call [ebp+var_228]  +
jmp loc_103386D  +
cmp eax 103h +
jz loc_1033880  +
cmp eax 0EAh +
jz loc_103386D  +
and [ebp+var_210] 0 +
inc [ebp+dwIndex]  +
cmp [ebp+var_210] 0 +
jnz loc_10337D7  +
pop esi  +
mov ecx [ebp+var_4] +
mov eax [ebp+var_210] +
xor ecx ebp +
pop ebx  +
call sub_1002A8B  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
lea eax [ebp+phkResult] +
push eax  +
push 0Bh  +
xor esi esi +
push esi  +
push [ebp+phkResult]  +
push [ebp+hKey]  +
call ds:RegOpenKeyExW  +
test eax eax +
jnz loc_10338F7  +
push [ebp+arg_1C]  +
push [ebp+arg_18]  +
push [ebp+arg_14]  +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+phkResult]  +
call sub_103362C  +
test eax eax +
jz loc_10338EE  +
push [ebp+arg_1C]  +
push [ebp+arg_18]  +
push [ebp+arg_C]  +
push [ebp+phkResult]  +
call sub_1033779  +
test eax eax +
jz loc_10338EE  +
inc esi  +
push [ebp+phkResult]  +
call ds:RegCloseKey  +
mov eax esi +
pop esi  +
pop ebp  +
retn 20h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx+0Ch] +
lea edx [eax+1] +
cmp [ebp+arg_4] edx +
jnb loc_1033923  +
mov eax [ebp+arg_8] +
test eax eax +
jz loc_103391C  +
mov [eax] edx +
mov eax 8007007Ah +
jmp loc_1033944  +
mov edx [ebp+arg_8] +
test edx edx +
jz loc_103392C  +
mov [edx] eax +
mov eax [ecx+0Ch] +
lea eax [eax+eax+2] +
push eax  +
push dword ptr [ecx+4]  +
push [ebp+arg_0]  +
call memcpy  +
add esp 0Ch +
xor eax eax +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 28h +
cmp [ebp+lpMultiByteStr] 0 +
push esi  +
push edi  +
mov esi ecx +
jnz loc_1033983  +
push 80070057h  +
lea ecx [ebp+var_28] +
call sub_1026AE1  +
mov esi eax +
lea edi [ebp+var_18] +
movs   +
movs   +
movs   +
push offset dword_10458FC  +
lea eax [ebp+var_18] +
push eax  +
movs   +
call _CxxThrowException  +
mov eax [ebp+arg_8] +
mov edi [ebp+cchMultiByte] +
mov [ebp+var_4] edi +
mov [ebp+cchMultiByte] eax +
cmp eax 0FFFFFFFFh +
jnz loc_10339AC  +
push [ebp+lpMultiByteStr]  +
call ds:lstrlenA  +
mov [ebp+arg_8] eax +
lea eax [ebp+arg_8] +
push eax  +
lea ecx [ebp+cchMultiByte] +
call sub_1002F5C  +
push 1  +
lea eax [ebp+arg_8] +
push eax  +
push [ebp+cchMultiByte]  +
lea eax [ebp+var_8] +
push eax  +
lea ecx [ebp+var_4] +
call sub_1002EA5  +
mov ecx eax +
call sub_1002EFC  +
mov ecx [esi+8] +
cmp [eax] ecx +
jbe loc_10339F5  +
push 1  +
lea eax [ebp+arg_8] +
push eax  +
push [ebp+cchMultiByte]  +
lea eax [ebp+var_8] +
push eax  +
lea ecx [ebp+var_4] +
call sub_1002EA5  +
mov ecx eax +
call sub_1002EFC  +
push dword ptr [eax]  +
mov edx [esi] +
mov ecx esi +
call dword ptr [edx]  +
jmp loc_1033A2E  +
test edi edi +
jnz loc_1033A2E  +
mov eax [esi+4] +
cmp [ebp+lpMultiByteStr] eax +
jb loc_1033A09  +
lea eax [eax+ecx*2] +
cmp [ebp+lpMultiByteStr] eax +
jb loc_1033A2E  +
push 1  +
lea eax [ebp+arg_8] +
push eax  +
push [ebp+cchMultiByte]  +
lea eax [ebp+var_8] +
push eax  +
lea ecx [ebp+var_4] +
call sub_1002EA5  +
mov ecx eax +
call sub_1002EFC  +
push dword ptr [eax]  +
mov edx [esi] +
mov ecx esi +
call dword ptr [edx+4]  +
push 1  +
lea eax [ebp+arg_8] +
push eax  +
lea ecx [ebp+cchMultiByte] +
call sub_1002EFC  +
mov eax [eax] +
lea ecx [eax+edi] +
cmp ecx [esi+8] +
jbe loc_1033A4A  +
xor eax eax +
jmp loc_1033A66  +
push eax  +
mov eax [esi+4] +
lea eax [eax+edi*2] +
push eax  +
push [ebp+cchMultiByte]  +
mov [esi+0Ch] edi +
push [ebp+lpMultiByteStr]  +
call sub_1034FC7  +
add [esi+0Ch] eax +
mov eax [esi+0Ch] +
pop edi  +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
movzx ecx [ebp+arg_0] +
push 3  +
pop eax  +
cmp ecx eax +
jz loc_1033AA2  +
cmp ecx 13h +
jz loc_1033AA2  +
jle loc_1033AA5  +
cmp ecx 15h +
jle loc_1033AA5  +
cmp ecx 80h +
jz loc_1033AA5  +
cmp ecx 82h +
jnz loc_1033AA5  +
xor eax eax +
inc eax  +
jmp loc_1033AA5  +
push 4  +
pop eax  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push esi  +
mov esi ds:SetLastError +
push edi  +
push 0  +
mov edi ecx +
call esi  +
mov eax [edi+9Ch] +
test eax eax +
jnz loc_1033AD5  +
push 6  +
call esi  +
xor eax eax +
jmp loc_1033AF9  +
lea ecx [ebp+ftLastWriteTime] +
push ecx  +
push 0  +
push 0  +
push 0  +
push [ebp+lpcbName]  +
push [ebp+lpName]  +
push [ebp+dwIndex]  +
push eax  +
call ds:RegEnumKeyExW  +
test eax eax +
jz loc_1033AF6  +
push eax  +
jmp loc_1033ACF  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ecx+9Ch] +
push esi  +
xor esi esi +
cmp eax esi +
jnz loc_1033B23  +
push 6  +
call ds:SetLastError  +
xor eax eax +
jmp loc_1033B65  +
lea ecx [ebp+dwDisposition] +
push ecx  +
lea ecx [ebp+hKey] +
push ecx  +
push esi  +
push 0F003Fh  +
push esi  +
push esi  +
push esi  +
push [ebp+hKey]  +
push eax  +
call ds:RegCreateKeyExW  +
cmp eax esi +
jz loc_1033B45  +
push eax  +
jmp loc_1033B19  +
push [ebp+hKey]  +
call ds:RegCloseKey  +
cmp [ebp+dwDisposition] 2 +
jnz loc_1033B5B  +
push 0B7h  +
jmp loc_1033B19  +
push esi  +
call ds:SetLastError  +
xor eax eax +
inc eax  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx+9Ch] +
test eax eax +
jnz loc_1033B8A  +
push 6  +
call ds:SetLastError  +
xor eax eax +
jmp loc_1033BAA  +
push 0  +
push 0  +
push [ebp+arg_0]  +
push eax  +
call ds:RegDeleteKeyExW  +
test eax eax +
jz loc_1033B9F  +
push eax  +
jmp loc_1033B80  +
push 0  +
call ds:SetLastError  +
xor eax eax +
inc eax  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
cmp dword ptr [esi+9Ch] 0 +
jnz loc_1033BD0  +
push 6  +
call ds:SetLastError  +
xor eax eax +
jmp loc_1033C08  +
mov ecx [ebp+arg_4] +
mov eax [ecx+0Ch] +
lea eax [eax+eax+2] +
push eax  +
push 0  +
call sub_100FCFC  +
push eax  +
push 1  +
push 0  +
push [ebp+lpValueName]  +
push dword ptr [esi+9Ch]  +
call ds:RegSetValueExW  +
test eax eax +
jz loc_1033BFD  +
push eax  +
jmp loc_1033BC6  +
push 0  +
call ds:SetLastError  +
xor eax eax +
inc eax  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ecx+9Ch] +
test edx edx +
jnz loc_1033C2D  +
push 6  +
call ds:SetLastError  +
xor eax eax +
jmp loc_1033C5A  +
push [ebp+cbData]  +
push [ebp+lpData]  +
push [ebp+arg_4]  +
call sub_1033A71  +
push eax  +
push 0  +
push [ebp+lpValueName]  +
push edx  +
call ds:RegSetValueExW  +
test eax eax +
jz loc_1033C4F  +
push eax  +
jmp loc_1033C23  +
push 0  +
call ds:SetLastError  +
xor eax eax +
inc eax  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ds:SetLastError +
push edi  +
push 0  +
mov edi ecx +
call esi  +
mov eax [edi+9Ch] +
test eax eax +
jnz loc_1033C89  +
push 6  +
call esi  +
xor eax eax +
jmp loc_1033CBD  +
push [ebp+lpcbData]  +
lea ecx [ebp+Type] +
push [ebp+lpData]  +
push ecx  +
push 0  +
push [ebp+lpValueName]  +
push eax  +
call ds:RegQueryValueExW  +
test eax eax +
jz loc_1033CA6  +
push eax  +
jmp loc_1033C83  +
push [ebp+arg_4]  +
call sub_1033A71  +
cmp [ebp+Type] eax +
jz loc_1033CBA  +
push 70Ch  +
jmp loc_1033C83  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
lea eax [esi+10h] +
push eax  +
push 21h  +
call sub_1014990  +
mov dword ptr [esi] offset off_1002D28 +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov ecx [ecx] +
test ecx ecx +
jz locret_1033CFC  +
mov eax [ecx] +
push 1  +
call dword ptr [eax]  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
shr ecx 1 +
push 0  +
pop eax  +
jz loc_1033D19  +
cmp ecx 7FFFFFFFh +
jbe loc_1033D1E  +
mov eax 80070057h +
test eax eax +
jl loc_1033D69  +
mov eax [ebp+arg_0] +
push ebx  +
xor ebx ebx +
push esi  +
mov esi ecx +
test ecx ecx +
jz loc_1033D59  +
mov edx [ebp+arg_8] +
push edi  +
mov edi 7FFFFFFEh +
sub edi ecx +
sub edx eax +
lea ecx [edi+esi] +
test ecx ecx +
jz loc_1033D54  +
movzx ecx word ptr [edx+eax] +
test cx cx +
jz loc_1033D54  +
mov [eax] cx +
inc eax  +
inc eax  +
dec esi  +
jnz loc_1033D3C  +
pop edi  +
test esi esi +
jnz loc_1033D60  +
dec eax  +
dec eax  +
mov ebx 8007007Ah +
xor ecx ecx +
mov [eax] cx +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov edi [esi+0Ch] +
test edi edi +
jz loc_1033D95  +
mov eax [esi+4] +
movzx eax word ptr [eax+edi*2-2] +
push eax  +
call sub_1003A20  +
test eax eax +
jnz loc_1033DA4  +
mov eax [esi] +
push 0FFFFFFFFh  +
push edi  +
push offset dword_1012E6C  +
mov ecx esi +
call dword ptr [eax+10h]  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_10015E0  +
mov esi ecx +
mov [ebp-10h] esi +
call sub_100A93F  +
and dword ptr [ebp-4] 0 +
push 0  +
mov dword ptr [esi] offset off_100AA50 +
mov dword ptr [esi+98h] 1 +
call ds:SetLastError  +
mov ebx [ebp+8] +
push dword ptr [ebx+8]  +
lea edi [esi+4] +
mov ecx edi +
call sub_100AA00  +
push edi  +
call sub_1033D72  +
push dword ptr [ebp+0Ch]  +
mov ecx edi +
call sub_1026C01  +
mov ebx [ebx+9Ch] +
lea edi [esi+9Ch] +
push edi  +
push dword ptr [ebp+10h]  +
push 0  +
push dword ptr [ebp+0Ch]  +
push ebx  +
call ds:RegOpenKeyExW  +
test eax eax +
jz loc_1033E2B  +
and dword ptr [edi] 0 +
push eax  +
call ds:SetLastError  +
mov eax esi +
call sub_10015C0  +
retn 0Ch  +
***
push 8  +
mov eax offset byte_10419C7 +
call sub_10015E0  +
mov esi ecx +
push 0  +
call ds:SetLastError  +
push 0A0h  +
call off_104B7F4  +
mov ecx eax +
mov [ebp-10h] ecx +
and dword ptr [ebp-4] 0 +
test ecx ecx +
jz loc_1033E78  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+8]  +
push esi  +
call sub_1033DAF  +
mov esi eax +
jmp loc_1033E7A  +
xor esi esi +
test esi esi +
jz loc_1033E92  +
call ds:__imp_GetLastError  +
test eax eax +
jnz loc_1033E92  +
mov eax [ebp+0Ch] +
mov [eax] esi +
xor eax eax +
inc eax  +
jmp loc_1033EAA  +
mov eax [ebp+0Ch] +
and dword ptr [eax] 0 +
or dword ptr [ebp-4] 0FFFFFFFFh +
test esi esi +
jz loc_1033EA8  +
mov eax [esi] +
push 1  +
mov ecx esi +
call dword ptr [eax]  +
xor eax eax +
call sub_10015C0  +
retn 0Ch  +
***
call sub_1001862  +
mov edi ecx +
mov esi ds:SetLastError +
xor ebx ebx +
push ebx  +
call esi  +
cmp [edi+9Ch] ebx +
jnz loc_1033EE0  +
push 6  +
call esi  +
xor eax eax +
jmp loc_1033F4F  +
mov esi [ebp+0Ch] +
mov eax [esi+8] +
mov [ebp-14h] eax +
mov eax [esi+4] +
lea ecx [ebp-20h] +
push ecx  +
push ebx  +
push ebx  +
push ebx  +
lea ecx [ebp-14h] +
push ecx  +
push eax  +
push dword ptr [ebp+8]  +
push dword ptr [edi+9Ch]  +
call ds:RegEnumKeyExW  +
cmp eax 0EAh +
jnz loc_1033F35  +
mov eax [ebp-14h] +
add eax eax +
push eax  +
mov ecx esi +
mov [ebp-14h] eax +
mov [ebp-4] ebx +
call sub_100FCFC  +
or dword ptr [ebp-4] 0FFFFFFFFh +
jmp loc_1033EE9  +
mov ecx [ebp-18h] +
call sub_103339B  +
mov eax offset loc_1033EDC +
retn   +
cmp eax ebx +
jz loc_1033F42  +
push eax  +
call ds:SetLastError  +
jmp loc_1033EDC  +
push dword ptr [ebp-14h]  +
mov ecx esi +
call sub_100A108  +
xor eax eax +
inc eax  +
call sub_10015C0  +
retn 8  +
***
call sub_1001862  +
mov ebx ecx +
mov edi ds:SetLastError +
xor esi esi +
push esi  +
call edi  +
cmp [ebx+9Ch] esi +
jnz loc_1033F85  +
push 6  +
call edi  +
xor eax eax +
jmp loc_1033FF1  +
mov edi [ebp+0Ch] +
mov eax [edi+8] +
mov [ebp-14h] eax +
mov eax [edi+4] +
push esi  +
push esi  +
push esi  +
push esi  +
lea ecx [ebp-14h] +
push ecx  +
push eax  +
push dword ptr [ebp+8]  +
push dword ptr [ebx+9Ch]  +
call ds:RegEnumValueW  +
cmp eax 0EAh +
jnz loc_1033FD7  +
mov eax [ebp-14h] +
add eax eax +
push eax  +
mov ecx edi +
mov [ebp-14h] eax +
mov [ebp-4] esi +
call sub_100FCFC  +
or dword ptr [ebp-4] 0FFFFFFFFh +
jmp loc_1033F8E  +
mov ecx [ebp-18h] +
call sub_103339B  +
mov eax offset loc_1033F81 +
retn   +
cmp eax esi +
jz loc_1033FE4  +
push eax  +
call ds:SetLastError  +
jmp loc_1033F81  +
push dword ptr [ebp-14h]  +
mov ecx edi +
call sub_100A108  +
xor eax eax +
inc eax  +
call sub_10015C0  +
retn 8  +
***
call sub_1003649  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
movzx eax word ptr [ecx] +
push 61h  +
pop edx  +
cmp dx ax +
ja loc_103411B  +
cmp ax 7Ah +
jbe loc_1034129  +
push 41h  +
pop edx  +
cmp dx ax +
ja loc_1034135  +
cmp ax 5Ah +
ja loc_1034135  +
xor eax eax +
cmp word ptr [ecx+2] 3Ah +
setz al  +
jmp loc_1034137  +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push 5Ch  +
pop edx  +
cmp [eax] dx +
jnz loc_10341A5  +
cmp [eax+2] dx +
jnz loc_10341A5  +
add eax 4 +
cmp [eax] dx +
jz loc_10341A5  +
movzx ecx word ptr [eax] +
test cx cx +
jz loc_10341A5  +
cmp cx dx +
jz loc_1034175  +
inc eax  +
inc eax  +
movzx ecx word ptr [eax] +
test cx cx +
jnz loc_1034166  +
cmp word ptr [eax] 0 +
jz loc_10341A5  +
add eax 2 +
cmp [eax] dx +
jz loc_10341A5  +
movzx ecx word ptr [eax] +
test cx cx +
jz loc_10341A5  +
cmp cx dx +
jz loc_103419A  +
inc eax  +
inc eax  +
movzx ecx word ptr [eax] +
test cx cx +
jnz loc_103418B  +
cmp word ptr [eax] 0 +
jz loc_10341A5  +
xor eax eax +
inc eax  +
jmp loc_10341A7  +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+lpSecurityAttributes] +
push esi  +
push edi  +
push ebx  +
push [ebp+lpFileName]  +
call ds:CreateDirectoryW  +
mov esi [ebp+arg_4] +
test eax eax +
jnz loc_1034202  +
mov edi ds:__imp_GetLastError +
call edi  +
mov [esi] eax +
cmp eax 50h +
jz loc_10341E6  +
cmp eax 0B7h +
jz loc_10341E6  +
xor eax eax +
jmp loc_1034220  +
test ebx ebx +
jz loc_1034202  +
push dword ptr [ebx+4]  +
push 4  +
push [ebp+lpFileName]  +
call ds:SetFileSecurityW  +
test eax eax +
jnz loc_1034202  +
call edi  +
mov [esi] eax +
jmp loc_10341E2  +
push [ebp+lpFileName]  +
call ds:GetFileAttributesW  +
or eax 2000h +
push eax  +
push [ebp+lpFileName]  +
call ds:SetFileAttributesW  +
and dword ptr [esi] 0 +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov eax [esi+4] +
push edi  +
mov edi [ebp+arg_0] +
cmp edi eax +
jz loc_103424B  +
cmp eax 0FFFFFFFFh +
jz loc_103424B  +
push eax  +
call ds:FindClose  +
mov [esi+4] edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 210h +
mov eax dword_104A044 +
xor eax ebp +
mov [ebp+var_4] eax +
and [ebp+var_210] 0 +
push esi  +
mov eax 104h +
push eax  +
push [ebp+arg_0]  +
lea esi [ebp+PathName] +
push eax  +
mov eax esi +
push eax  +
call sub_100CD46  +
test eax eax +
jge loc_103429C  +
mov eax 8000FFFFh +
jmp loc_10343C0  +
lea eax [ebp+PathName] +
push eax  +
call sub_1034102  +
test eax eax +
jz loc_10342DC  +
cmp word ptr [ebp+var_208] 5Ch +
jz loc_10342C0  +
mov eax 800700A1h +
jmp loc_10343C0  +
cmp word ptr [ebp+var_208+2] 0 +
lea esi [ebp+var_208+2] +
jz loc_10342B6  +
cmp word ptr [ebp+var_208+2] 5Ch +
jz loc_10342B6  +
jmp loc_1034330  +
lea eax [ebp+PathName] +
push eax  +
call sub_1034140  +
test eax eax +
jz loc_1034330  +
lea esi [ebp+var_208] +
movzx eax word ptr [esi] +
test ax ax +
jz loc_1034309  +
cmp ax 5Ch +
jz loc_1034309  +
inc esi  +
inc esi  +
lea eax [ebp+var_4] +
cmp esi eax +
jb loc_10342F2  +
lea eax [ebp+var_4] +
cmp esi eax +
jnb loc_1034330  +
cmp word ptr [esi] 5Ch +
jz loc_103431E  +
jmp loc_1034330  +
cmp ax 5Ch +
jz loc_103432E  +
inc esi  +
inc esi  +
movzx eax word ptr [esi] +
test ax ax +
jnz loc_1034318  +
cmp word ptr [esi] 5Ch +
jnz loc_1034330  +
inc esi  +
inc esi  +
push ebx  +
mov ebx ds:__imp_GetLastError +
push edi  +
jmp loc_1034354  +
lea eax [ebp+PathName] +
cmp esi eax +
jb loc_103435B  +
movzx eax word ptr [esi] +
test ax ax +
jz loc_103435B  +
cmp ax 5Ch +
jz loc_103435B  +
inc esi  +
inc esi  +
lea eax [ebp-6] +
cmp esi eax +
jb loc_103433A  +
xor eax eax +
cmp word ptr [esi] 5Ch +
setz al  +
mov edi eax +
xor eax eax +
push eax  +
mov [esi] ax +
lea eax [ebp+PathName] +
push eax  +
call ds:CreateDirectoryW  +
test eax eax +
jnz loc_103439C  +
call ebx  +
cmp eax 0B7h +
jz loc_103439C  +
call ebx  +
test eax eax +
jle loc_1034396  +
and eax 0FFFFh +
or eax 80070000h +
mov [ebp+var_210] eax +
test edi edi +
jz loc_10343B8  +
push 5Ch  +
pop eax  +
mov [esi] ax +
lea eax [ebp-6] +
cmp esi eax +
jnb loc_10343B8  +
inc esi  +
inc esi  +
cmp [ebp+var_210] 0 +
jge loc_1034354  +
mov eax [ebp+var_210] +
pop edi  +
pop ebx  +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop esi  +
call sub_1002A8B  +
leave   +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
and dword ptr [esi+4] 0 +
lea ecx [esi+8] +
mov dword ptr [esi] offset off_10343F8 +
call sub_100A0C7  +
and dword ptr [esi+9Ch] 0 +
mov eax esi +
pop esi  +
retn   +
***
call sub_1001862  +
mov edi ecx +
mov eax [ebp+10h] +
and dword ptr [ebp-4] 0 +
mov [edi+4] eax +
mov eax [ebp+0Ch] +
mov eax [eax+4] +
lea ebx [edi+8] +
push eax  +
mov ecx ebx +
call sub_100AA00  +
push ebx  +
call sub_10333BD  +
mov ecx [ebp+8] +
mov esi [ecx+0Ch] +
add edi 9Ch +
mov [edi] esi +
call sub_1026307  +
cmp ax 5Ch +
jz loc_1034450  +
inc esi  +
mov [edi] esi +
push 0  +
mov ecx ebx +
call sub_100FCFC  +
push eax  +
call sub_1034259  +
jmp loc_1034472  +
mov eax [ebp-14h] +
mov eax [eax] +
mov [ebp+10h] eax +
mov eax offset loc_103446F +
retn   +
mov eax [ebp+10h] +
call sub_10015C0  +
retn 0Ch  +
***
call sub_103422C  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
push 0FFFFFFFFh  +
mov dword ptr [esi] offset off_1022774 +
call sub_103422C  +
test byte ptr [ebp+8] 1 +
jz loc_10344C1  +
push esi  +
call off_104B7F0  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_1003649  +
and dword ptr [ebp-2FCh] 0 +
mov eax offset loc_10346D4 +
retn   +
***
call sub_1002A3A  +
mov ebx [ebp+8] +
mov edi ecx +
push ebx  +
lea ecx [ebp-0A4h] +
call sub_100EA61  +
and dword ptr [ebp-4] 0 +
lea eax [ebp-0A4h] +
push eax  +
call sub_10333BD  +
mov eax [ebp-0A4h] +
push 0FFFFFFFFh  +
push dword ptr [ebp-98h]  +
lea ecx [ebp-0A4h] +
push offset a__0  +
call dword ptr [eax+10h]  +
or dword ptr [ebp-2F8h] 0FFFFFFFFh +
mov esi offset off_1022774 +
mov [ebp-2FCh] esi +
lea eax [ebp-2F4h] +
push eax  +
push dword ptr [ebp-0A0h]  +
mov byte ptr [ebp-4] 1 +
call ds:FindFirstFileW  +
push eax  +
lea ecx [ebp-2FCh] +
call sub_103422C  +
cmp dword ptr [ebp-2F8h] 0FFFFFFFFh +
jz loc_1034853  +
push offset word_1004D80  +
lea eax [ebp-2C8h] +
push eax  +
call ds:lstrcmpW  +
test eax eax +
jz loc_1034838  +
push offset a__  +
lea eax [ebp-2C8h] +
push eax  +
call ds:lstrcmpW  +
test eax eax +
jz loc_1034838  +
mov eax [ebp-0A4h] +
push 0FFFFFFFFh  +
push 0  +
push dword ptr [ebx+4]  +
lea ecx [ebp-0A4h] +
call dword ptr [eax+10h]  +
lea eax [ebp-0A4h] +
push eax  +
call sub_10333BD  +
push 0FFFFFFFFh  +
push dword ptr [ebp-98h]  +
lea eax [ebp-2C8h] +
push eax  +
mov eax [ebp-0A4h] +
lea ecx [ebp-0A4h] +
call dword ptr [eax+10h]  +
test byte ptr [ebp-2F4h] 10h +
mov eax [edi] +
lea ecx [ebp-0A4h] +
jz loc_103482F  +
push dword ptr [ebp-2F4h]  +
push ecx  +
mov ecx edi +
call dword ptr [eax+4]  +
mov [ebp-300h] eax +
test eax eax +
jl loc_1034857  +
jnz loc_1034838  +
lea eax [ebp-0A4h] +
push eax  +
mov ecx edi +
call sub_10346F4  +
jmp loc_1034834  +
push ecx  +
mov ecx edi +
call dword ptr [eax]  +
test eax eax +
jl loc_1034883  +
lea eax [ebp-2F4h] +
push eax  +
push dword ptr [ebp-2F8h]  +
call ds:FindNextFileW  +
test eax eax +
jnz loc_1034782  +
xor edi edi +
jmp loc_1034885  +
push 0FFFFFFFFh  +
lea ecx [ebp-2FCh] +
mov [ebp-2FCh] esi +
call sub_103422C  +
lea ecx [ebp-0A4h] +
call sub_10084DE  +
mov eax [ebp-300h] +
call sub_1002A77  +
retn 4  +
mov edi eax +
push 0FFFFFFFFh  +
lea ecx [ebp-2FCh] +
mov [ebp-2FCh] esi +
call sub_103422C  +
lea ecx [ebp-0A4h] +
call sub_10084DE  +
mov eax edi +
jmp loc_103487B  +
***
push 0B0h  +
mov eax offset dword_1041DB0 +
call sub_1003649  +
mov edi [ebp+8] +
mov esi ecx +
lea eax [esi+8] +
xor ebx ebx +
push eax  +
lea ecx [ebp-0A8h] +
mov [ebp-4] ebx +
call sub_100EA61  +
push dword ptr [esi+9Ch]  +
lea eax [ebp-0BCh] +
push eax  +
mov ecx edi +
mov byte ptr [ebp-4] 1 +
call sub_10131C3  +
push eax  +
lea ecx [ebp-0A8h] +
call sub_102631F  +
cmp [esi+4] ebx +
jz loc_1034922  +
push dword ptr [ebp-0A4h]  +
mov eax [edi+4] +
push eax  +
call ds:MoveFileW  +
test eax eax +
jz loc_1034922  +
xor esi esi +
lea ecx [ebp-0A8h] +
call sub_10084DE  +
mov eax esi +
jmp loc_1034969  +
mov edi [edi+4] +
push ebx  +
push dword ptr [ebp-0A4h]  +
push edi  +
call ds:CopyFileW  +
test eax eax +
jnz loc_1034911  +
call ds:__imp_GetLastError  +
cmp eax ebx +
jle loc_103494B  +
and eax 0FFFFh +
or eax 80070000h +
mov esi eax +
jmp loc_1034913  +
***
mov eax [ebp-0B0h] +
mov eax [eax] +
mov [ebp-0ACh] eax +
mov eax offset loc_1034963 +
retn   +
***
mov eax [ebp-0ACh] +
call sub_1002FBC  +
retn 4  +
***
push 0B0h  +
mov eax offset dword_1041E24 +
call sub_1003649  +
mov edi [ebp+8] +
and dword ptr [ebp-4] 0 +
mov esi ecx +
lea eax [esi+8] +
push eax  +
lea ecx [ebp-0A8h] +
call sub_100EA61  +
push dword ptr [esi+9Ch]  +
lea eax [ebp-0BCh] +
push eax  +
mov ecx edi +
mov byte ptr [ebp-4] 1 +
call sub_10131C3  +
push eax  +
lea ecx [ebp-0A8h] +
call sub_102631F  +
push 0  +
lea ecx [ebp-0A8h] +
call sub_100FCFC  +
push eax  +
call sub_1034259  +
test eax eax +
jge loc_10349E9  +
mov esi eax +
lea ecx [ebp-0A8h] +
call sub_10084DE  +
mov eax esi +
jmp loc_1034A07  +
xor esi esi +
jmp loc_10349DA  +
***
mov eax [ebp-0B0h] +
mov eax [eax] +
mov [ebp-0ACh] eax +
mov eax offset loc_1034A01 +
retn   +
***
mov eax [ebp-0ACh] +
call sub_1002FBC  +
retn 8  +
***
call sub_1002A3A  +
mov esi [ebp+8] +
mov edi [ebp+0Ch] +
lea ecx [ebp-0B0h] +
call sub_10343D4  +
and dword ptr [ebp-4] 0 +
push edi  +
lea ecx [ebp-144h] +
call sub_100EA61  +
push esi  +
lea ecx [ebp-1D8h] +
mov byte ptr [ebp-4] 1 +
call sub_100EA61  +
push dword ptr [ebp+10h]  +
lea eax [ebp-144h] +
push eax  +
lea eax [ebp-1D8h] +
push eax  +
lea ecx [ebp-0B0h] +
mov byte ptr [ebp-4] 2 +
call sub_1034405  +
lea ecx [ebp-1D8h] +
mov edi eax +
call sub_10084DE  +
lea ecx [ebp-144h] +
mov byte ptr [ebp-4] 0 +
call sub_10084DE  +
test edi edi +
jge loc_1034AAB  +
mov esi edi +
lea ecx [ebp-0A8h] +
call sub_10084DE  +
mov eax esi +
call sub_1002A77  +
retn 0Ch  +
push esi  +
lea ecx [ebp-144h] +
call sub_100EA61  +
lea eax [ebp-144h] +
push eax  +
lea ecx [ebp-0B0h] +
mov byte ptr [ebp-4] 3 +
call sub_10346F4  +
lea ecx [ebp-144h] +
mov esi eax +
call sub_10084DE  +
jmp loc_1034A96  +
***
xor eax eax +
cmp dword ptr [ecx] 2 +
jnz locret_1034AEE  +
cmp [ecx+10h] eax +
jle locret_1034AEE  +
inc eax  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 17Ch +
mov eax dword_104A044 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
mov esi ecx +
call sub_1034AE1  +
test al al +
jz loc_1034C81  +
push dword ptr [esi+14h]  +
lea ecx [ebp+var_16C] +
call sub_100A134  +
push offset aSoftwareMicr_3  +
lea ecx [ebp+var_16C] +
call sub_100A366  +
test al al +
jz loc_1034B6A  +
mov eax [ebp+var_16C] +
cmp eax [esi] +
jnz loc_1034B6A  +
mov eax [ebp+var_168] +
cmp eax [esi+4] +
jnz loc_1034B6A  +
mov eax dword ptr [ebp+Time.wYear] +
cmp eax [esi+8] +
jnz loc_1034B6A  +
mov eax dword ptr [ebp+Time.wHour] +
cmp eax [esi+10h] +
jz loc_1034C81  +
push dword ptr [esi+14h]  +
lea eax [ebp+var_24] +
push offset aU  +
push 10h  +
push eax  +
call sub_100A257  +
add esp 10h +
test eax eax +
jl loc_1034C81  +
push dword ptr [esi+10h]  +
lea eax [ebp+var_44] +
push offset aD  +
push 10h  +
push eax  +
call sub_100A257  +
add esp 10h +
test eax eax +
jl loc_1034C81  +
push edi  +
xor edi edi +
push edi  +
push 2710h  +
push dword ptr [esi+8]  +
push dword ptr [esi+4]  +
call sub_101B38C  +
mov [ebp+FileTime.dwLowDateTime] eax +
lea eax [ebp+UniversalTime] +
push eax  +
lea eax [ebp+FileTime] +
push eax  +
mov [ebp+FileTime.dwHighDateTime] edx +
call ds:FileTimeToSystemTime  +
test eax eax +
jz loc_1034C80  +
lea eax [ebp+Time] +
push eax  +
lea eax [ebp+UniversalTime] +
push eax  +
push edi  +
call ds:SystemTimeToTzSpecificLocalTime  +
test eax eax +
jz loc_1034C80  +
push 80h  +
lea eax [ebp+TimeStr] +
push eax  +
push edi  +
lea eax [ebp+Time] +
push eax  +
push edi  +
push 800h  +
call ds:GetTimeFormatW  +
test eax eax +
jle loc_1034C80  +
lea eax [ebp+var_24] +
mov [ebp+var_150] eax +
lea eax [ebp+var_44] +
mov [ebp+FileTime.dwLowDateTime] eax +
push offset SourceName  +
lea eax [ebp+TimeStr] +
push edi  +
mov [ebp+Strings] offset word_100348C +
mov [ebp+FileTime.dwHighDateTime] eax +
call ds:RegisterEventSourceW  +
mov esi eax +
cmp esi edi +
jz loc_1034C80  +
push edi  +
lea eax [ebp+Strings] +
push eax  +
push edi  +
push 4  +
push edi  +
push 800003F7h  +
push 1  +
push 2  +
push esi  +
call ds:ReportEventW  +
push esi  +
call ds:DeregisterEventSource  +
pop edi  +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop esi  +
call sub_1002A8B  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi eax +
push esi  +
push [ebp+lpDestStr]  +
push esi  +
push [ebp+lpDestStr]  +
push 200h  +
push 800h  +
call ds:LCMapStringW  +
cmp eax esi +
jz loc_1034CCA  +
test eax eax +
jz loc_1034CC8  +
lea esi [eax-1] +
jmp loc_1034CCA  +
xor esi esi +
test esi esi +
jz loc_1034CDC  +
lea eax [esi+esi] +
push eax  +
push [ebp+lpDestStr]  +
call sub_103E8DB  +
jmp loc_1034CDE  +
xor eax eax +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax dword_104A044 +
xor eax ebp +
mov [ebp+var_4] eax +
and [ebp+var_8] 0 +
push esi  +
lea eax [ebp+var_8] +
push eax  +
mov eax [ebp+arg_4] +
push 2  +
pop ecx  +
mul  ecx +
push edx  +
push eax  +
call sub_10085F8  +
test eax eax +
jge loc_1034D19  +
xor eax eax +
jmp loc_1034D3B  +
mov eax [ebp+var_8] +
call sub_100FA58  +
mov esi esp +
push [ebp+var_8]  +
push [ebp+arg_0]  +
push esi  +
call memcpy  +
mov eax [ebp+arg_4] +
add esp 0Ch +
push esi  +
call sub_1034C9B  +
lea esp [ebp-0Ch] +
pop esi  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_1002A8B  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+lpBuffer] +
push esi  +
mov esi ecx +
mov ecx [ebp+nBufferMax] +
push ecx  +
push eax  +
push [ebp+uID]  +
mov [esi+8] ecx +
mov ecx [ebp+arg_8] +
mov dword ptr [esi] offset off_1002B70 +
mov [esi+4] eax +
call sub_102619F  +
mov [esi+0Ch] eax +
mov eax esi +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+uID]  +
mov esi ecx +
push [ebp+arg_0]  +
lea eax [esi+10h] +
push eax  +
push 401h  +
call sub_1034D52  +
mov dword ptr [esi] offset off_1002BA8 +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
call sub_10015E0  +
mov esi ecx +
mov [ebp-10h] esi +
call sub_100C78B  +
and dword ptr [ebp-4] 0 +
push 0  +
push dword ptr [ebp+8]  +
mov ecx esi +
push offset aSoftwareMicr_2  +
push 80000002h  +
mov dword ptr [esi] offset off_100AA50 +
call sub_100CCC4  +
mov eax esi +
call sub_10015C0  +
retn 4  +
***
call sub_1003649  +
mov edi [ebp+8] +
mov esi ecx +
mov [ebp-0B8h] esi +
call sub_100A0C7  +
and dword ptr [ebp-4] 0 +
push 20019h  +
lea ecx [ebp-0B4h] +
mov dword ptr [esi] offset off_1002B8C +
mov byte ptr [ebp-4] 1 +
call sub_1034DB6  +
push esi  +
push offset aInstalldirecto  +
lea ecx [ebp-0B4h] +
mov byte ptr [ebp-4] 2 +
call sub_100A8AC  +
push esi  +
test eax eax +
jnz loc_1034E59  +
call sub_100D06E  +
jmp loc_1034E6F  +
call sub_10333BD  +
mov eax [esi] +
push 0FFFFFFFFh  +
push dword ptr [esi+0Ch]  +
mov ecx esi +
push offset word_100348C  +
call dword ptr [eax+10h]  +
push esi  +
call sub_10333BD  +
mov eax [esi] +
push 0FFFFFFFFh  +
push dword ptr [esi+0Ch]  +
mov ecx esi +
push edi  +
call dword ptr [eax+10h]  +
lea ecx [ebp-0B4h] +
mov byte ptr [ebp-4] 1 +
call sub_100AA1A  +
jmp loc_1034EB1  +
mov eax [ebp-0B8h] +
and dword ptr [eax+0Ch] 0 +
mov eax [eax+4] +
xor ecx ecx +
mov [eax] cx +
mov eax offset loc_1034EAB +
retn   +
mov esi [ebp-0B8h] +
mov eax esi +
call sub_1002FBC  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 94h +
test byte ptr dword_104BD10 1 +
jnz loc_1034F17  +
or dword_104BD10 1 +
and dword_104BD08 0 +
and dword_104BD0C 0 +
push offset loc_1045830  +
call sub_1010E75  +
pop ecx  +
cmp dword_104BD04 0 +
push esi  +
mov esi offset dword_104BD08 +
jnz loc_1034F55  +
push offset aTquery_dll  +
lea ecx [ebp+var_94] +
mov dword_104BD04 1 +
call sub_1034DFB  +
push dword ptr [eax+4]  +
mov ecx esi +
call sub_1026B5C  +
lea ecx [ebp+var_94] +
call sub_10084DE  +
mov eax esi +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+uID]  +
mov esi ecx +
call sub_1034EE3  +
push eax  +
mov ecx esi +
call sub_1034D88  +
mov dword ptr [esi] offset off_1002BA8 +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1009FC5  +
test byte ptr [ebp+8] 1 +
jz loc_1034FBB  +
push esi  +
call off_104B7F0  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+lpWideCharStr] +
push esi  +
mov esi [ebp+cchWideChar] +
push edi  +
push esi  +
push ebx  +
push [ebp+cchMultiByte]  +
push [ebp+lpMultiByteStr]  +
push 0  +
push 0  +
call ds:MultiByteToWideChar  +
mov edi eax +
test esi esi +
jle loc_103500E  +
cmp edi esi +
jge loc_1034FFD  +
test edi edi +
jl loc_1034FFD  +
xor eax eax +
mov [ebx+edi*2] ax +
jmp loc_103500E  +
xor eax eax +
push 7Ah  +
xor edi edi +
mov [ebx+esi*2-2] ax +
call ds:SetLastError  +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov ebx eax +
mov esi edx +
xor eax eax +
xor edi edi +
test esi esi +
jz loc_103504C  +
cmp [ebp+arg_4] eax +
jz loc_1035048  +
mov dl [ebx] +
test dl dl +
jz loc_1035048  +
mov [ecx] dl +
inc ecx  +
inc ebx  +
dec esi  +
dec [ebp+arg_4]  +
inc edi  +
test esi esi +
jnz loc_1035030  +
test esi esi +
jnz loc_1035053  +
dec ecx  +
dec edi  +
mov eax 8007007Ah +
mov byte ptr [ecx] 0 +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_103505F  +
mov [ecx] edi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push [ebp+arg_8]  +
mov esi eax +
push [ebp+arg_4]  +
xor ebx ebx +
dec esi  +
push esi  +
push edi  +
call ds:_vsnprintf  +
add esp 10h +
test eax eax +
jl loc_1035097  +
cmp eax esi +
ja loc_1035097  +
jnz loc_10350A1  +
mov [esi+edi] bl +
jmp loc_103509F  +
mov [esi+edi] bl +
mov ebx 8007007Ah +
mov eax esi +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_10350AA  +
mov [ecx] eax +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
push esi  +
push edi  +
lea edi [edx+10h] +
lea ecx [edx+80000h] +
cmp edi ecx +
jnb loc_10350DC  +
sub ecx edi +
dec ecx  +
shr ecx 2 +
inc ecx  +
mov eax 200020h +
stos   +
lea edi [edx+7FFF0h] +
mov esi offset aLog +
movs   +
movs   +
movs   +
movs   +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov eax [esi] +
push edi  +
test eax eax +
jz loc_1035132  +
push eax  +
call sub_10085E3  +
and dword ptr [esi] 0 +
pop ecx  +
mov edi [ebp+arg_0] +
push edi  +
call sub_10085CE  +
pop ecx  +
mov [esi+8] edi +
mov [esi] eax +
mov [esi+4] eax +
pop edi  +
mov byte ptr [eax] 0 +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi ecx +
push edi  +
mov edi [esi+4] +
sub edi [esi] +
lea eax [edi+1] +
cmp [ebp+arg_0] eax +
jnb loc_103516C  +
mov [ebp+arg_0] eax +
push [ebp+arg_0]  +
call sub_10085CE  +
push edi  +
push dword ptr [esi]  +
mov ebx eax +
push ebx  +
call memcpy  +
push dword ptr [esi]  +
call sub_10085E3  +
mov ecx [ebp+arg_0] +
add esp 14h +
lea eax [ebx+edi] +
mov [esi] ebx +
pop edi  +
mov [esi+4] eax +
mov [esi+8] ecx +
pop esi  +
mov byte ptr [eax] 0 +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov eax [esi+4] +
push edi  +
mov edi [ebp+arg_0] +
cmp eax edi +
jz loc_10351C7  +
test eax eax +
jz loc_10351C4  +
push eax  +
call ds:CloseHandle  +
mov [esi+4] edi +
pop edi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi+4] +
test eax eax +
jz loc_10351F0  +
cmp eax 0FFFFFFFFh +
jz loc_10351F0  +
push eax  +
call ds:CloseHandle  +
and dword ptr [esi+4] 0 +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi+4] +
test eax eax +
jz loc_103520E  +
push eax  +
call ds:UnmapViewOfFile  +
and dword ptr [esi+4] 0 +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi] +
test eax eax +
jz loc_103522A  +
push eax  +
call ds:LocalFree  +
and dword ptr [esi] 0 +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov eax [esi+4] +
cmp eax [esi] +
jnz loc_1035244  +
xor eax eax +
jmp loc_103528D  +
mov eax [esi+0Ch] +
mov ecx [esi+10h] +
imul eax eax +
mov byte ptr [eax+ecx] 0 +
mov eax [ebp+arg_0] +
lea ecx [eax+1] +
mov dl [eax] +
inc eax  +
test dl dl +
jnz loc_1035257  +
sub eax ecx +
inc eax  +
cmp eax 52h +
ja loc_103527C  +
push eax  +
mov eax [esi+0Ch] +
push [ebp+arg_0]  +
imul eax eax +
add eax [esi+10h] +
push eax  +
call memcpy  +
add esp 0Ch +
mov eax [esi+0Ch] +
inc dword ptr [esi+4]  +
inc eax  +
xor edx edx +
div  dword ptr [esi] +
xor eax eax +
inc eax  +
mov [esi+0Ch] edx +
pop esi  +
pop ebp  +
retn 4  +
***
mov edx [ecx+4] +
test edx edx +
jnz loc_10352A1  +
xor eax eax +
retn   +
mov eax [ecx+8] +
push esi  +
mov esi eax +
imul esi esi +
add esi [ecx+10h] +
dec edx  +
mov [ecx+4] edx +
inc eax  +
xor edx edx +
div  dword ptr [ecx] +
mov eax esi +
pop esi  +
mov [ecx+8] edx +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_8] +
xor eax eax +
cmp ecx 1 +
jbe loc_10352ED  +
push eax  +
dec ecx  +
push ecx  +
push [ebp+lpBuffer]  +
movzx ecx [ebp+arg_0] +
push 400h  +
push ecx  +
push eax  +
push 1000h  +
call ds:FormatMessageW  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_4] +
xor eax eax +
mov ecx 80070057h +
test edx edx +
jz loc_1035324  +
cmp edx 7FFFFFFFh +
jbe loc_1035326  +
mov eax ecx +
test eax eax +
jl loc_103534D  +
cmp [ebp+arg_C] 7FFFFFFEh +
jbe loc_103533D  +
mov eax ecx +
mov ecx [ebp+arg_0] +
mov byte ptr [ecx] 0 +
jmp loc_103534D  +
push [ebp+arg_C]  +
mov eax [ebp+arg_8] +
mov ecx [ebp+arg_0] +
push 0  +
call sub_103501C  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
cmp [ebp+arg_4] eax +
jz loc_103536B  +
cmp [ebp+arg_4] 7FFFFFFFh +
jbe loc_1035370  +
mov eax 80070057h +
test eax eax +
jl loc_103538A  +
push edi  +
mov edi [ebp+arg_0] +
lea eax [ebp+arg_C] +
push eax  +
push [ebp+arg_8]  +
mov eax [ebp+arg_4] +
push 0  +
call sub_103506B  +
pop edi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov esi ecx +
lea eax [edi+1] +
cmp eax [esi+8] +
jbe loc_10353AB  +
push eax  +
call sub_1035119  +
push edi  +
push [ebp+arg_4]  +
push dword ptr [esi]  +
call memcpy  +
mov eax [esi] +
add esp 0Ch +
add eax edi +
mov [esi+4] eax +
pop edi  +
mov byte ptr [eax] 0 +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov edx [eax] +
mov eax [eax+4] +
push edx  +
sub eax edx +
push eax  +
call sub_1035391  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov eax [esi+4] +
sub eax [esi] +
mov ecx [esi+8] +
push edi  +
mov edi [ebp+arg_0] +
sub ecx eax +
lea edx [edi+1] +
cmp edx ecx +
jbe loc_1035416  +
lea eax [eax+edi+1] +
push eax  +
mov ecx esi +
call sub_1035152  +
push edi  +
push [ebp+arg_4]  +
push dword ptr [esi+4]  +
call memcpy  +
add esp 0Ch +
add [esi+4] edi +
mov esi [esi+4] +
pop edi  +
mov byte ptr [esi] 0 +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov edx [eax] +
mov eax [eax+4] +
push edx  +
sub eax edx +
push eax  +
call sub_10353ED  +
pop ebp  +
retn 4  +
***
mov dword ptr [ecx] offset off_1022798 +
jmp sub_10351D4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_1022798 +
call sub_10351D4  +
test byte ptr [ebp+8] 1 +
jz loc_1035488  +
push esi  +
call sub_10085E3  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov dword ptr [ecx] offset off_102279C +
jmp sub_10351F7  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_102279C +
call sub_10351F7  +
test byte ptr [ebp+8] 1 +
jz loc_10354C4  +
push esi  +
call sub_10085E3  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_10015E0  +
mov esi ecx +
mov [ebp-14h] esi +
xor edi edi +
mov [esi] edi +
push edi  +
lea eax [ebp-10h] +
push eax  +
push 1  +
push offset aOSydA0xc010000  +
mov [ebp-4] edi +
mov [ebp-10h] edi +
call ConvertStringSecurityDescriptorToSecurityDescriptorA  +
test eax eax +
jnz loc_103553E  +
call ds:__imp_GetLastError  +
cmp eax edi +
jle loc_1035514  +
and eax 0FFFFh +
or eax 80070000h +
push eax  +
push 202h  +
push offset aDW7rtmEnduse_5  +
lea ecx [ebp-34h] +
call sub_102F44D  +
mov esi eax +
lea edi [ebp-24h] +
movs   +
movs   +
movs   +
push offset dword_10458FC  +
lea eax [ebp-24h] +
push eax  +
movs   +
call _CxxThrowException  +
mov eax [ebp-10h] +
push eax  +
mov [esi] eax +
call ds:GetSecurityDescriptorLength  +
mov [esi+4] eax +
mov eax [ebp-10h] +
mov [esi+8] eax +
mov [esi+0Ch] edi +
mov eax esi +
call sub_10015C0  +
retn   +
***
call sub_10015E0  +
mov esi ecx +
mov [ebp-10h] esi +
push dword ptr [esi+20h]  +
mov dword ptr [ebp-4] 3 +
call sub_10085E3  +
mov eax [esi+1Ch] +
pop ecx  +
mov byte ptr [ebp-4] 2 +
test eax eax +
jz loc_1035603  +
push eax  +
call sub_10085E3  +
pop ecx  +
lea ecx [esi+14h] +
mov dword ptr [ecx] offset off_102279C +
call sub_10351F7  +
lea ecx [esi+8] +
mov edi offset off_1022798 +
mov [ecx] edi +
call sub_10351D4  +
mov ecx esi +
mov [esi] edi +
call sub_10351D4  +
call sub_10015C0  +
retn   +
***
call sub_10015E0  +
mov esi ecx +
mov [ebp-10h] esi +
push dword ptr [esi+64h]  +
mov dword ptr [ebp-4] 7 +
call sub_10085E3  +
push dword ptr [esi+48h]  +
mov byte ptr [ebp-4] 6 +
call sub_10085E3  +
push dword ptr [esi+3Ch]  +
mov byte ptr [ebp-4] 5 +
call sub_10085E3  +
push dword ptr [esi+30h]  +
mov byte ptr [ebp-4] 4 +
call sub_10085E3  +
push dword ptr [esi+24h]  +
mov byte ptr [ebp-4] 3 +
call sub_10085E3  +
push dword ptr [esi+18h]  +
mov byte ptr [ebp-4] 2 +
call sub_10085E3  +
lea ecx [esi+10h] +
add esp 18h +
mov dword ptr [ecx] offset off_102279C +
call sub_10351F7  +
lea ecx [esi+8] +
mov edi offset off_1022798 +
mov [ecx] edi +
call sub_10351D4  +
mov ecx esi +
mov [esi] edi +
call sub_10351D4  +
call sub_10015C0  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1035634  +
test byte ptr [ebp+8] 1 +
jz loc_10356DE  +
push esi  +
call sub_10085E3  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_10355D0  +
test byte ptr [ebp+8] 1 +
jz loc_1035704  +
push esi  +
call sub_10085E3  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push edi  +
mov edi ecx +
cmp dword ptr [edi+10h] 0 +
mov [ebp+var_4] edi +
jz loc_1035AE2  +
push ebx  +
push esi  +
lea eax [ebp+SystemTime] +
push eax  +
call ds:GetLocalTime  +
cmp [ebp+arg_1C] 4 +
mov ebx [ebp+arg_18] +
mov esi [ebp+arg_14] +
jb loc_1035752  +
mov eax ds:dword_1035C64 +
mov [esi] eax +
mov eax ds:dword_1035C68 +
mov [esi+4] eax +
add dword ptr [ebx] 4 +
mov eax [edi+10h] +
mov ecx [eax+38h] +
cmp dword ptr [ecx+90h] 0 +
jz loc_103579F  +
mov ecx [eax+20h] +
mov eax [ebx] +
push ecx  +
mov ecx [ebp+arg_1C] +
sub ecx eax +
push offset aLognameS  +
push ecx  +
lea eax [esi+eax*2] +
push eax  +
call sub_100A257  +
add esp 10h +
test eax eax +
jl loc_103579F  +
mov ecx [ebx] +
lea eax [esi+ecx*2] +
lea edi [eax+2] +
mov dx [eax] +
inc eax  +
inc eax  +
test dx dx +
jnz loc_103578A  +
sub eax edi +
mov edi [ebp+var_4] +
sar eax 1 +
add ecx eax +
mov [ebx] ecx +
mov eax [edi+10h] +
mov eax [eax+38h] +
cmp dword ptr [eax+0B4h] 0 +
jz loc_103580B  +
movzx ecx [ebp+SystemTime.wMilliseconds] +
push ecx  +
movzx ecx [ebp+SystemTime.wSecond] +
push ecx  +
movzx ecx [ebp+SystemTime.wMinute] +
mov eax [ebx] +
push ecx  +
movzx ecx [ebp+SystemTime.wHour] +
push ecx  +
movzx ecx [ebp+SystemTime.wDay] +
push ecx  +
movzx ecx [ebp+SystemTime.wMonth] +
push ecx  +
movzx ecx [ebp+SystemTime.wYear] +
push ecx  +
mov ecx [ebp+arg_1C] +
sub ecx eax +
push offset aTime04d02d02d0  +
push ecx  +
lea eax [esi+eax*2] +
push eax  +
call sub_100A257  +
add esp 28h +
test eax eax +
jl loc_103580B  +
mov ecx [ebx] +
lea eax [esi+ecx*2] +
lea edi [eax+2] +
mov dx [eax] +
inc eax  +
inc eax  +
test dx dx +
jnz loc_10357F6  +
sub eax edi +
mov edi [ebp+var_4] +
sar eax 1 +
add ecx eax +
mov [ebx] ecx +
mov eax [edi+10h] +
mov eax [eax+38h] +
cmp dword ptr [eax+0FCh] 0 +
jz loc_1035857  +
push dword ptr [ebp+arg_C]  +
mov eax [ebx] +
mov ecx [ebp+arg_1C] +
sub ecx eax +
push offset aEl0xX  +
push ecx  +
lea eax [esi+eax*2] +
push eax  +
call sub_100A257  +
add esp 10h +
test eax eax +
jl loc_1035857  +
mov ecx [ebx] +
lea eax [esi+ecx*2] +
lea edi [eax+2] +
mov dx [eax] +
inc eax  +
inc eax  +
test dx dx +
jnz loc_1035842  +
sub eax edi +
mov edi [ebp+var_4] +
sar eax 1 +
add ecx eax +
mov [ebx] ecx +
mov eax [edi+10h] +
mov eax [eax+38h] +
cmp dword ptr [eax+120h] 0 +
mov edi dword ptr [ebp+arg_10] +
jz loc_10358A5  +
mov eax [ebx] +
mov ecx [ebp+arg_1C] +
push edi  +
sub ecx eax +
push offset aTagid0xX  +
push ecx  +
lea eax [esi+eax*2] +
push eax  +
call sub_100A257  +
add esp 10h +
test eax eax +
jl loc_10358A5  +
mov ecx [ebx] +
lea eax [esi+ecx*2] +
lea edx [eax+2] +
mov [ebp+arg_18] edx +
mov dx [eax] +
inc eax  +
inc eax  +
test dx dx +
jnz loc_1035892  +
sub eax [ebp+arg_18] +
sar eax 1 +
add ecx eax +
mov [ebx] ecx +
mov ecx [ebp+var_4] +
mov eax [ecx+10h] +
mov eax [eax+38h] +
cmp dword ptr [eax+144h] 0 +
jz loc_10358F9  +
mov ecx [ecx+0Ch] +
imul edi edi +
mov eax [ebx] +
lea ecx [edi+ecx+4] +
push ecx  +
mov ecx [ebp+arg_1C] +
sub ecx eax +
push offset aTagnameS  +
push ecx  +
lea eax [esi+eax*2] +
push eax  +
call sub_100A257  +
add esp 10h +
test eax eax +
jl loc_10358F9  +
mov ecx [ebx] +
lea eax [esi+ecx*2] +
lea edi [eax+2] +
mov dx [eax] +
inc eax  +
inc eax  +
test dx dx +
jnz loc_10358E7  +
sub eax edi +
sar eax 1 +
add ecx eax +
mov [ebx] ecx +
mov eax [ebp+var_4] +
mov eax [eax+10h] +
mov eax [eax+38h] +
cmp dword ptr [eax+168h] 0 +
jz loc_1035949  +
mov edi [ebx] +
call ds:GetCurrentProcessId  +
push eax  +
mov eax [ebp+arg_1C] +
sub eax edi +
push offset aPid0xX  +
push eax  +
lea eax [esi+edi*2] +
push eax  +
call sub_100A257  +
add esp 10h +
test eax eax +
jl loc_1035949  +
mov ecx [ebx] +
lea eax [esi+ecx*2] +
lea edi [eax+2] +
mov dx [eax] +
inc eax  +
inc eax  +
test dx dx +
jnz loc_1035937  +
sub eax edi +
sar eax 1 +
add ecx eax +
mov [ebx] ecx +
mov eax [ebp+var_4] +
mov eax [eax+10h] +
mov eax [eax+38h] +
cmp dword ptr [eax+0D8h] 0 +
jz loc_1035999  +
mov edi [ebx] +
call ds:GetCurrentThreadId  +
push eax  +
mov eax [ebp+arg_1C] +
sub eax edi +
push offset aTid0xX  +
push eax  +
lea eax [esi+edi*2] +
push eax  +
call sub_100A257  +
add esp 10h +
test eax eax +
jl loc_1035999  +
mov ecx [ebx] +
lea eax [esi+ecx*2] +
lea edi [eax+2] +
mov dx [eax] +
inc eax  +
inc eax  +
test dx dx +
jnz loc_1035987  +
sub eax edi +
sar eax 1 +
add ecx eax +
mov [ebx] ecx +
mov eax [ebx] +
lea ecx [eax+3] +
cmp ecx [ebp+arg_1C] +
jge loc_10359B4  +
lea edi [esi+eax*2] +
mov esi offset asc_1035B64 +
movs   +
movs   +
add dword ptr [ebx] 3 +
mov esi [ebp+arg_14] +
xor eax eax +
cmp dword ptr [ebp+arg_0] eax +
jnz loc_10359CD  +
mov ecx [ebp+var_4] +
mov ecx [ecx+10h] +
mov ecx [ecx+38h] +
cmp [ecx+6Ch] eax +
jz loc_1035AA9  +
cmp dword ptr [ebp+arg_4] eax +
jz loc_1035A0F  +
push [ebp+arg_8]  +
mov eax [ebx] +
push dword ptr [ebp+arg_4]  +
mov ecx [ebp+arg_1C] +
sub ecx eax +
push offset aLocSDLoc  +
push ecx  +
lea eax [esi+eax*2] +
push eax  +
call sub_100A257  +
add esp 14h +
test eax eax +
jl loc_1035A0F  +
mov ecx [ebx] +
lea eax [esi+ecx*2] +
lea edi [eax+2] +
mov dx [eax] +
inc eax  +
inc eax  +
test dx dx +
jnz loc_10359FD  +
sub eax edi +
sar eax 1 +
add ecx eax +
mov [ebx] ecx +
cmp dword ptr [ebp+arg_0] 0 +
jz loc_1035AA9  +
push dword ptr [ebp+arg_0]  +
mov eax [ebx] +
mov ecx [ebp+arg_1C] +
sub ecx eax +
push offset aErr0x08x  +
push ecx  +
lea eax [esi+eax*2] +
push eax  +
call sub_100A257  +
add esp 10h +
test eax eax +
jl loc_1035A53  +
mov ecx [ebx] +
lea eax [esi+ecx*2] +
lea edi [eax+2] +
mov dx [eax] +
inc eax  +
inc eax  +
test dx dx +
jnz loc_1035A41  +
sub eax edi +
sar eax 1 +
add ecx eax +
mov [ebx] ecx +
mov eax [ebx] +
test eax eax +
jle loc_1035A72  +
cmp eax [ebp+arg_1C] +
jge loc_1035A72  +
mov ecx [ebp+arg_1C] +
sub ecx eax +
push ecx  +
lea eax [esi+eax*2] +
push eax  +
push dword ptr [ebp+arg_0]  +
call sub_10352C2  +
add [ebx] eax +
mov eax [ebx] +
mov ecx [ebp+arg_1C] +
sub ecx eax +
push offset aErr  +
push ecx  +
lea eax [esi+eax*2] +
push eax  +
call sub_100A257  +
add esp 0Ch +
test eax eax +
jl loc_1035AA9  +
mov ecx [ebx] +
lea eax [esi+ecx*2] +
lea edi [eax+2] +
mov dx [eax] +
inc eax  +
inc eax  +
test dx dx +
jnz loc_1035A97  +
sub eax edi +
sar eax 1 +
add ecx eax +
mov [ebx] ecx +
mov eax [ebx] +
mov ecx [ebp+arg_1C] +
sub ecx eax +
push offset aMsg  +
push ecx  +
lea eax [esi+eax*2] +
push eax  +
call sub_100A257  +
add esp 0Ch +
test eax eax +
jl loc_1035AE0  +
mov ecx [ebx] +
lea eax [esi+ecx*2] +
lea esi [eax+2] +
mov dx [eax] +
inc eax  +
inc eax  +
test dx dx +
jnz loc_1035ACE  +
sub eax esi +
sar eax 1 +
add ecx eax +
mov [ebx] ecx +
pop esi  +
pop ebx  +
pop edi  +
leave   +
retn 20h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi ecx +
mov eax [esi+2Ch] +
push edi  +
xor edi edi +
xor ebx ebx +
cmp [eax] edi +
jbe loc_1035CAD  +
mov eax [esi+30h] +
push 3Fh  +
lea eax [eax+edi+4] +
push eax  +
push [ebp+arg_0]  +
call ds:strncmp  +
add esp 0Ch +
test eax eax +
jz loc_1035CC5  +
mov eax [esi+2Ch] +
inc ebx  +
add edi 44h +
cmp ebx [eax] +
jb loc_1035C88  +
mov eax [esi+2Ch] +
cmp dword ptr [eax] 100h +
jb loc_1035CCC  +
mov eax [ebp+arg_4] +
mov ecx dword_104BB60 +
mov [eax] ecx +
jmp loc_1035D16  +
mov eax [ebp+arg_4] +
mov [eax] ebx +
jmp loc_1035D16  +
mov eax [eax] +
mov ecx [esi+30h] +
imul eax eax +
mov dword ptr [eax+ecx] 2 +
mov eax [esi+2Ch] +
mov eax [eax] +
mov ecx [esi+30h] +
imul eax eax +
push 3Fh  +
push [ebp+arg_0]  +
lea eax [eax+ecx+4] +
push 40h  +
push eax  +
call sub_1035309  +
mov eax [esi+2Ch] +
mov eax [eax] +
mov ecx [esi+30h] +
imul eax eax +
mov byte ptr [eax+ecx+43h] 0 +
mov eax [esi+2Ch] +
mov eax [eax] +
mov ecx [ebp+arg_4] +
mov [ecx] eax +
mov esi [esi+2Ch] +
inc dword ptr [esi]  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
call sub_1002A3A  +
mov eax [ebp+8] +
mov [ebp-68h] eax +
lea eax [ebp-60h] +
push eax  +
mov esi ecx +
call ds:GetLocalTime  +
lea eax [esi+74h] +
push eax  +
call ds:InterlockedIncrement  +
push eax  +
movzx eax word ptr [ebp-52h] +
push eax  +
movzx eax word ptr [ebp-54h] +
push eax  +
movzx eax word ptr [ebp-56h] +
push eax  +
movzx eax word ptr [ebp-58h] +
push eax  +
movzx eax word ptr [ebp-5Ah] +
push eax  +
movzx eax word ptr [ebp-5Eh] +
push eax  +
movzx eax word ptr [ebp-60h] +
push eax  +
push offset a04d02d02d02d02  +
lea eax [ebp-50h] +
push 40h  +
push eax  +
call sub_1035356  +
add esp 2Ch +
lea eax [esi+24h] +
lea edi [esi+3Ch] +
push eax  +
mov ecx edi +
call sub_10353CE  +
push offset dword_10227A8  +
push 1  +
mov ecx edi +
call sub_10353ED  +
lea eax [esi+18h] +
push eax  +
mov ecx edi +
mov [ebp-64h] eax +
call sub_1035439  +
lea eax [ebp-50h] +
lea ecx [eax+1] +
mov dl [eax] +
inc eax  +
test dl dl +
jnz loc_1035DB4  +
sub eax ecx +
lea ecx [ebp-50h] +
push ecx  +
push eax  +
mov ecx edi +
call sub_10353ED  +
mov ebx offset dword_10227A0 +
push ebx  +
push 4  +
mov ecx edi +
call sub_10353ED  +
push dword ptr [ebp-64h]  +
add esi 48h +
mov ecx esi +
call sub_10353CE  +
lea eax [ebp-50h] +
lea ecx [eax+1] +
mov dl [eax] +
inc eax  +
test dl dl +
jnz loc_1035DEB  +
sub eax ecx +
lea ecx [ebp-50h] +
push ecx  +
push eax  +
mov ecx esi +
call sub_10353ED  +
push ebx  +
push 4  +
mov ecx esi +
call sub_10353ED  +
or dword ptr [ebp-6Ch] 0FFFFFFFFh +
xor ebx ebx +
lea ecx [ebp-70h] +
mov [ebp-70h] ebx +
call sub_103651E  +
lea ecx [ebp-80h] +
mov [ebp-4] ebx +
call sub_10354D0  +
mov edi [edi] +
push ebx  +
push 80h  +
push 1  +
lea eax [ebp-7Ch] +
push eax  +
push 1  +
push 0C0000000h  +
push edi  +
mov byte ptr [ebp-4] 1 +
call ds:CreateFileA  +
mov esi [ebp-68h] +
push eax  +
mov ecx esi +
call sub_10351A6  +
cmp dword ptr [esi+4] 0FFFFFFFFh +
jnz loc_1035E9E  +
call ds:__imp_GetLastError  +
cmp eax ebx +
jle loc_1035E6B  +
and eax 0FFFFh +
or eax 80070000h +
push eax  +
push 0B65h  +
push offset aDW7rtmEnduse_6  +
lea ecx [ebp-0A0h] +
call sub_102F44D  +
mov esi eax +
lea edi [ebp-90h] +
movs   +
movs   +
movs   +
push offset dword_10458FC  +
lea eax [ebp-90h] +
push eax  +
movs   +
call _CxxThrowException  +
lea ecx [ebp-80h] +
call sub_1035215  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-70h] +
call sub_10364F1  +
call sub_1002A77  +
retn 4  +
***
call sub_10015E0  +
mov esi ecx +
lea eax [esi+24h] +
lea edi [esi+30h] +
push eax  +
mov ecx edi +
call sub_10353CE  +
push offset dword_10227A8  +
push 1  +
mov ecx edi +
call sub_10353ED  +
lea eax [esi+18h] +
push eax  +
mov ecx edi +
call sub_1035439  +
push offset dword_10227A0  +
push 4  +
mov ecx edi +
call sub_10353ED  +
and dword ptr [ebp-10h] 0 +
mov ebx offset off_1022798 +
mov [ebp-14h] ebx +
and dword ptr [ebp-4] 0 +
lea eax [ebp-14h] +
push eax  +
mov ecx esi +
call sub_1035D22  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-14h] +
mov [ebp-14h] ebx +
call sub_10351D4  +
mov eax [esi+68h] +
test eax eax +
jz loc_1035FA3  +
mov ecx [esi+70h] +
test ecx ecx +
jz loc_1035FA3  +
push ecx  +
push eax  +
call ds:FlushViewOfFile  +
push 0  +
push dword ptr [esi+3Ch]  +
push dword ptr [edi]  +
call ds:CopyFileA  +
lea ebx [esi+54h] +
mov eax [ebx+4] +
cmp eax [ebx] +
jnz loc_1035FFF  +
mov ecx ebx +
call sub_1035297  +
mov [ebp-10h] eax +
lea eax [esi+24h] +
push eax  +
mov ecx edi +
call sub_10353CE  +
push offset dword_10227A8  +
push 1  +
mov ecx edi +
call sub_10353ED  +
mov eax [ebp-10h] +
lea ecx [eax+1] +
mov dl [eax] +
inc eax  +
test dl dl +
jnz loc_1035FE3  +
push dword ptr [ebp-10h]  +
sub eax ecx +
push eax  +
mov ecx edi +
call sub_10353ED  +
push dword ptr [edi]  +
call ds:DeleteFileA  +
push dword ptr [esi+48h]  +
mov ecx ebx +
call sub_1035231  +
push dword ptr [esi+68h]  +
call sub_10350B7  +
mov dword ptr [esi+6Ch] 10h +
call sub_10015C0  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx+6Ch] +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
xor edi edi +
lea ebx [eax+esi] +
mov edx 7FFE2h +
inc edi  +
cmp ebx edx +
jbe loc_1036054  +
cmp esi edx +
jbe loc_103604F  +
cmp eax 10h +
jnz loc_103604D  +
xor eax eax +
jmp loc_1036056  +
xor edi edi +
call sub_1035F20  +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push [ebp+arg_0]  +
call sub_1036023  +
test eax eax +
jnz locret_10360A4  +
push 80070057h  +
push 0E6h  +
push offset aDW7rtmEnduse_7  +
lea ecx [ebp+var_20] +
call sub_102F44D  +
mov esi eax +
lea edi [ebp+var_10] +
movs   +
movs   +
movs   +
push offset dword_10458FC  +
lea eax [ebp+var_10] +
push eax  +
movs   +
call _CxxThrowException  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
push edi  +
mov esi ecx +
call ds:__imp_GetLastError  +
test [ebp+arg_0] 2 +
mov ebx [ebp+lpOutputString] +
mov [ebp+dwErrCode] eax +
jz loc_1036105  +
push ebx  +
call ds:OutputDebugStringW  +
test [ebp+arg_0] 1 +
jz loc_103614A  +
cmp dword ptr [esi+68h] 0 +
jz loc_103614A  +
mov eax [ebp+arg_8] +
test eax eax +
jnz loc_103612B  +
mov eax ebx +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_103611D  +
sub eax edx +
sar eax 1 +
lea edi [eax+eax] +
push edi  +
mov ecx esi +
call sub_1036062  +
mov eax [esi+6Ch] +
add eax [esi+68h] +
push edi  +
push ebx  +
push eax  +
call memcpy  +
add esp 0Ch +
add [esi+6Ch] edi +
test [ebp+arg_0] 8 +
mov esi ds:fprintf +
mov edi offset aS +
jz loc_103616B  +
mov eax ds:_iob +
push ebx  +
add eax 40h +
push edi  +
push eax  +
call esi  +
add esp 0Ch +
test [ebp+arg_0] 4 +
jz loc_1036181  +
mov eax ds:_iob +
push ebx  +
add eax 20h +
push edi  +
push eax  +
call esi  +
add esp 0Ch +
push [ebp+dwErrCode]  +
call ds:SetLastError  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
push off_104B7E8  +
call sub_100E521  +
retn   +
***
call sub_1002A3A  +
mov edx [ebp+1Ch] +
mov eax [ebp+0Ch] +
and dword ptr [ebp-0C20h] 0 +
mov [ebp-0C24h] edx +
mov edx [ebp+20h] +
mov [ebp-0C28h] edx +
mov esi 5F5h +
push esi  +
lea edx [ebp-0C20h] +
push edx  +
lea edx [ebp-0C1Ch] +
push edx  +
push dword ptr [ebp+18h]  +
mov [ebp-0C2Ch] ecx +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push eax  +
push dword ptr [ebp+8]  +
call sub_1035710  +
push dword ptr [ebp-0C28h]  +
mov edi [ebp-0C20h] +
push dword ptr [ebp-0C24h]  +
sub esi edi +
push esi  +
lea ebx [ebp+edi*2-0C1Ch] +
push ebx  +
call sub_1026AA5  +
test eax eax +
jl loc_1036243  +
mov eax ebx +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_1036233  +
sub eax edx +
sar eax 1 +
add edi eax +
mov eax 605h +
push offset aMsgTrc  +
sub eax edi +
push eax  +
lea esi [ebp+edi*2-0C1Ch] +
push esi  +
call sub_100A257  +
add esp 0Ch +
test eax eax +
jl loc_1036279  +
mov eax esi +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_1036269  +
sub eax edx +
sar eax 1 +
add edi eax +
mov eax 604h +
cmp edi eax +
jle loc_1036284  +
mov edi eax +
mov esi [ebp-0C2Ch] +
xor eax eax +
mov [ebp+edi*2-0C1Ch] ax +
lea eax [esi+4] +
push eax  +
lea ecx [ebp-0C34h] +
call sub_10364CF  +
and dword ptr [ebp-4] 0 +
cmp dword ptr [esi] 0 +
jz loc_10362C5  +
mov eax [esi+10h] +
mov eax [eax+38h] +
mov eax [eax] +
push edi  +
lea ecx [ebp-0C1Ch] +
push ecx  +
mov ecx [esi+14h] +
push eax  +
call sub_10360E1  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-0C34h] +
call sub_10364BE  +
call sub_1002A77  +
retn 1Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [eax] +
test ecx ecx +
jnz loc_1036312  +
mov ecx offset dword_1036330 +
lea edx [ebp+arg_8] +
push edx  +
push [ebp+arg_4]  +
push dword ptr [eax+8]  +
push dword ptr [eax+0Ch]  +
push dword ptr [eax+4]  +
push ecx  +
mov ecx [eax+10h] +
push 0  +
call sub_10361B1  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push ebx  +
push esi  +
push edi  +
mov esi ecx +
mov edi [esi+4] +
sub edi [esi] +
sar edi 1 +
lea eax [edi+1] +
cmp [ebp+arg_0] eax +
jnb loc_1036361  +
mov [ebp+arg_0] eax +
mov eax [ebp+arg_0] +
xor ecx ecx +
push 2  +
pop edx  +
mul  edx +
seto cl  +
neg ecx  +
or ecx eax +
push ecx  +
call sub_10085CE  +
mov ebx eax +
mov eax [esi] +
pop ecx  +
test eax eax +
jnz loc_10363AF  +
push 8007000Eh  +
push 10Fh  +
push offset aDW7rtmEnduse_1  +
lea ecx [ebp+var_20] +
call sub_102F44D  +
mov esi eax +
lea edi [ebp+var_10] +
movs   +
movs   +
movs   +
push offset dword_10458FC  +
lea eax [ebp+var_10] +
push eax  +
movs   +
call _CxxThrowException  +
add edi edi +
push edi  +
push eax  +
push ebx  +
call memcpy  +
push dword ptr [esi]  +
call sub_10085E3  +
mov ecx [ebp+arg_0] +
add esp 10h +
lea eax [ebx+edi] +
mov [esi] ebx +
mov [esi+8] ecx +
pop edi  +
mov [esi+4] eax +
xor ecx ecx +
pop esi  +
mov [eax] cx +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push esi  +
mov esi ecx +
push dword ptr [esi]  +
dec dword ptr [esi+4]  +
call ds:ReleaseMutex  +
test eax eax +
jnz loc_103643A  +
inc dword ptr [esi+4]  +
call ds:__imp_GetLastError  +
test eax eax +
jle loc_1036413  +
and eax 0FFFFh +
or eax 80070000h +
push eax  +
push 6Ah  +
push offset aDW7rtmEnduse_8  +
lea ecx [ebp+var_20] +
call sub_102F44D  +
mov esi eax +
lea edi [ebp+var_10] +
movs   +
movs   +
movs   +
push offset dword_10458FC  +
lea eax [ebp+var_10] +
push eax  +
movs   +
call _CxxThrowException  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push esi  +
mov esi ecx +
push 0FFFFFFFFh  +
push dword ptr [esi]  +
call ds:WaitForSingleObject  +
test eax eax +
jz loc_1036487  +
call sub_100F56E  +
push eax  +
push 75h  +
push offset aDW7rtmEnduse_8  +
lea ecx [ebp+var_20] +
call sub_102F44D  +
mov esi eax +
lea edi [ebp+var_10] +
movs   +
movs   +
movs   +
push offset dword_10458FC  +
lea eax [ebp+var_10] +
push eax  +
movs   +
call _CxxThrowException  +
inc dword ptr [esi+4]  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
mov ecx [esi] +
call sub_1036442  +
mov dword ptr [esi+4] 1 +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
mov ecx [esi] +
call sub_10363E2  +
and dword ptr [esi+4] 0 +
pop esi  +
retn   +
***
cmp dword ptr [ecx] 0 +
jz locret_10364C9  +
cmp dword ptr [ecx+4] 0 +
jnz loc_10364A7  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
mov esi ecx +
and dword ptr [esi+4] 0 +
mov [esi] eax +
call sub_1036492  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
cmp dword ptr [esi] 0 +
jz loc_103650E  +
push dword ptr [esi+4]  +
call ds:ImpersonateLoggedOnUser  +
test eax eax +
jnz loc_103650E  +
call ds:__imp_GetLastError  +
push dword ptr [esi+4]  +
call ds:CloseHandle  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push esi  +
push edi  +
mov esi ecx +
lea edi [esi+4] +
push edi  +
push 1  +
push 0Eh  +
call ds:GetCurrentThread  +
push eax  +
call ds:OpenThreadToken  +
test eax eax +
jnz loc_10365B5  +
mov esi ds:__imp_GetLastError +
call esi  +
cmp eax 3F0h +
jz loc_103658C  +
cmp eax 5 +
jz loc_103658C  +
test eax eax +
jle loc_1036565  +
and eax 0FFFFh +
or eax 80070000h +
push eax  +
push 41h  +
push offset aDW7rtmEnduse_9  +
lea ecx [ebp+var_20] +
call sub_102F44D  +
mov esi eax +
lea edi [ebp+var_10] +
movs   +
movs   +
movs   +
push offset dword_10458FC  +
lea eax [ebp+var_10] +
push eax  +
movs   +
call _CxxThrowException  +
push edi  +
push 0Ah  +
call ds:GetCurrentProcess  +
push eax  +
call ds:OpenProcessToken  +
test eax eax +
jnz loc_10365DA  +
call esi  +
test eax eax +
jle loc_10365B0  +
and eax 0FFFFh +
or eax 80070000h +
push eax  +
push 39h  +
jmp loc_1036568  +
call ds:RevertToSelf  +
mov [esi] eax +
test eax eax +
jnz loc_10365DA  +
call ds:__imp_GetLastError  +
test eax eax +
jle loc_10365D5  +
and eax 0FFFFh +
or eax 80070000h +
push eax  +
push 4Dh  +
jmp loc_1036568  +
pop edi  +
pop esi  +
leave   +
retn   +
***
mov eax offset SHELL32_165 +
jmp loc_1009D46  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_4] 0 +
jz loc_1036657  +
push [ebp+arg_4]  +
mov eax [ebp+arg_0] +
push dword ptr [eax+24h]  +
call ds:SHStrDupW  +
jmp loc_103665C  +
mov eax 80004003h +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
call sub_100242C  +
test eax eax +
jl loc_103668A  +
cmp [ebp+arg_8] 0 +
jnz loc_1036681  +
mov eax 80004003h +
test eax eax +
jl loc_103668A  +
mov eax 80070057h +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
call sub_100242C  +
test eax eax +
jl loc_10366B4  +
cmp [ebp+arg_8] 0 +
mov eax 80004003h +
jz loc_10366B4  +
mov eax 80070057h +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
test esi esi +
jnz loc_10366CE  +
xor eax eax +
jmp loc_10366ED  +
push edi  +
mov edi [ebp+arg_4] +
test edi edi +
jz loc_10366DC  +
mov eax [edi] +
push edi  +
call dword ptr [eax+4]  +
mov eax [esi] +
test eax eax +
jz loc_10366E8  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [esi] edi +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
call sub_100242C  +
test eax eax +
jl loc_1036722  +
cmp [ebp+arg_8] 0 +
jz loc_1036714  +
cmp [ebp+arg_C] 0 +
jnz loc_1036719  +
mov eax 80004003h +
test eax eax +
jl loc_1036722  +
mov eax 80004001h +
pop ebp  +
retn 10h  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_103CCAD  +
mov dword ptr [esi] offset off_1001648 +
mov ecx dword_104A064 +
mov eax [ecx] +
call dword ptr [eax+4]  +
mov eax esi +
pop esi  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push offset off_103676C  +
push ecx  +
call sub_10017D5  +
pop ebp  +
retn 8  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_1001648 +
mov dword ptr [esi+4] 0C0000001h +
mov ecx dword_104A064 +
mov eax [ecx] +
call dword ptr [eax+8]  +
mov ecx esi +
pop esi  +
jmp loc_103CA77  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+10h]  +
mov ecx [ebp+8] +
push dword ptr [ebp+0Ch]  +
call sub_1036751  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1036789  +
test byte ptr [ebp+8] 1 +
jz loc_10367E9  +
push esi  +
call off_104B7F0  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_1001862  +
mov esi [ebp+8] +
xor edi edi +
cmp esi edi +
jnz loc_1036811  +
mov eax 80004003h +
jmp loc_1036850  +
push 18h  +
mov [esi] edi +
mov dword ptr [ebp-14h] 8007000Eh +
mov [ebp-4] edi +
call off_104B7F4  +
cmp eax edi +
jz loc_1036833  +
push edi  +
mov ecx eax +
call sub_103672B  +
jmp loc_1036844  +
xor eax eax +
jmp loc_1036844  +
mov eax offset loc_103683D +
retn   +
mov esi [ebp+8] +
xor edi edi +
mov eax edi +
cmp eax edi +
jz loc_103684B  +
mov [ebp-14h] edi +
mov [esi] eax +
mov eax [ebp-14h] +
call sub_10015C0  +
retn 4  +
***
call sub_10015E0  +
xor ebx ebx +
mov [ebp-10h] ebx +
mov eax [ecx+20h] +
mov ecx [eax] +
lea edx [ebp-10h] +
push edx  +
push eax  +
mov [ebp-4] ebx +
call dword ptr [ecx+28h]  +
mov esi eax +
cmp esi ebx +
mov eax [ebp-10h] +
jge loc_103689C  +
or dword ptr [ebp-4] 0FFFFFFFFh +
cmp eax ebx +
jz loc_1036895  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax esi +
jmp loc_10369C0  +
mov ecx [eax] +
lea edx [ebp-1Ch] +
push edx  +
push eax  +
call dword ptr [ecx+1Ch]  +
mov esi eax +
cmp esi ebx +
jge loc_10368B1  +
mov eax [ebp-10h] +
jmp loc_1036887  +
cmp [ebp-1Ch] ebx +
mov eax [ebp+8] +
mov [eax] ebx +
mov [ebp-18h] ebx +
jle loc_1036949  +
mov esi ds:VariantClear +
mov edi offset dword_10369C8 +
mov [ebp-14h] ebx +
mov eax [ebp-10h] +
mov ecx [eax] +
lea edx [ebp-14h] +
push edx  +
push dword ptr [ebp-18h]  +
mov byte ptr [ebp-4] 1 +
push eax  +
call dword ptr [ecx+20h]  +
cmp eax ebx +
mov [ebp-20h] eax +
jl loc_1036987  +
lea eax [ebp-30h] +
push eax  +
call ds:VariantInit  +
mov eax [ebp-14h] +
mov ecx [eax] +
lea edx [ebp-30h] +
push edx  +
push eax  +
mov byte ptr [ebp-4] 2 +
call dword ptr [ecx+28h]  +
cmp eax ebx +
jl loc_1036961  +
cmp word ptr [ebp-30h] 0Dh +
jz loc_103691C  +
cmp word ptr [ebp-30h] 9 +
jnz loc_1036961  +
push dword ptr [ebp+8]  +
mov eax [ebp-28h] +
mov ecx [eax] +
push edi  +
push eax  +
call dword ptr [ecx]  +
cmp eax ebx +
lea eax [ebp-30h] +
push eax  +
jl loc_1036965  +
call esi  +
mov eax [ebp-14h] +
mov [ebp-4] bl +
cmp eax ebx +
jz loc_1036942  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+8] +
cmp [eax] ebx +
jnz loc_10369AD  +
mov eax [ebp-10h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
cmp eax ebx +
jz loc_103695A  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax 8000FFFFh +
jmp loc_10369C0  +
lea eax [ebp-30h] +
push eax  +
call esi  +
mov eax [ebp-14h] +
mov [ebp-4] bl +
cmp eax ebx +
jz loc_1036977  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
inc dword ptr [ebp-18h]  +
mov eax [ebp-18h] +
cmp eax [ebp-1Ch] +
jge loc_1036942  +
jmp loc_10368CD  +
mov eax [ebp-14h] +
mov [ebp-4] bl +
cmp eax ebx +
jz loc_1036997  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-10h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
cmp eax ebx +
jz loc_10369A8  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-20h] +
jmp loc_10369C0  +
mov eax [ebp-10h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
cmp eax ebx +
jz loc_10369BE  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
xor eax eax +
call sub_10015C0  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+ppv] +
test esi esi +
jnz loc_10369F1  +
mov eax 80004003h +
jmp loc_1036A4C  +
and dword ptr [esi] 0 +
and [ebp+ppv] 0 +
push ebx  +
lea eax [ebp+ppv] +
push eax  +
push offset stru_1036A64  +
push 1  +
push 0  +
push offset stru_1036A74  +
call ds:CoCreateInstance  +
mov ebx eax +
mov eax [ebp+ppv] +
test ebx ebx +
jge loc_1036A28  +
test eax eax +
jz loc_1036A24  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax ebx +
jmp loc_1036A4B  +
mov edx [ebp+arg_0] +
mov ecx [eax] +
push esi  +
push offset dword_1036A54  +
push dword ptr [edx+24h]  +
push eax  +
call dword ptr [ecx+2Ch]  +
mov esi eax +
mov eax [ebp+ppv] +
test eax eax +
jz loc_1036A49  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax esi +
pop ebx  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx] +
cmp eax [ebp+arg_0] +
jz loc_1036A9E  +
push [ebp+arg_0]  +
push ecx  +
call sub_10366BD  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
mov esi ecx +
and dword ptr [esi] 0 +
test eax eax +
jz loc_1036AC4  +
mov ecx [eax] +
push esi  +
push offset dword_1036ACC  +
push eax  +
call dword ptr [ecx]  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
mov ecx esi +
call sub_10157B5  +
test eax eax +
jl loc_1036AFE  +
mov eax [esi+20h] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4Ch]  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
mov ecx esi +
call sub_10157B5  +
test eax eax +
jl loc_1036B25  +
mov eax [esi+20h] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+34h]  +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_1001862  +
push dword ptr [ebp+0Ch]  +
call sub_100242C  +
mov esi eax +
test esi esi +
jl loc_1036C53  +
mov edi [ebp+8] +
mov ecx edi +
call sub_10157B5  +
mov esi eax +
test esi esi +
jl loc_1036C53  +
and dword ptr [ebp+8] 0 +
and dword ptr [ebp-4] 0 +
lea eax [ebp+8] +
push eax  +
push offset stru_1012D08  +
push 1  +
push 0  +
push offset stru_10019F0  +
call ds:CoCreateInstance  +
mov esi eax +
test esi esi +
jl loc_1036C42  +
push offset aWindows  +
lea ecx [ebp-18h] +
mov byte ptr [ebp-4] 1 +
call sub_100883D  +
push dword ptr [edi+24h]  +
lea ecx [ebp-14h] +
mov byte ptr [ebp-4] 2 +
call sub_100883D  +
push dword ptr [ebp-14h]  +
mov eax [ebp+8] +
push dword ptr [ebp-18h]  +
mov ecx [eax] +
push eax  +
mov byte ptr [ebp-4] 3 +
call dword ptr [ecx+0Ch]  +
push dword ptr [ebp-14h]  +
mov edi ds:SysFreeString +
mov esi eax +
call edi  +
push dword ptr [ebp-18h]  +
call edi  +
and dword ptr [ebp-4] 0 +
jmp loc_1036BE9  +
mov eax [ebp-1Ch] +
and dword ptr [ebp-4] 0 +
mov [ebp-18h] eax +
mov eax offset loc_1036BE6 +
retn   +
mov esi [ebp-18h] +
test esi esi +
jl loc_1036C42  +
mov esi ds:wcschr +
xor eax eax +
lea edi [ebp-30h] +
stos   +
stos   +
stos   +
stos   +
stos   +
mov edi [ebp+0Ch] +
push 2Ah  +
push edi  +
call esi  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_1036C16  +
push 3Fh  +
push edi  +
call esi  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1036C1B  +
mov eax 10000h +
lea edx [ebp+0Ch] +
push edx  +
or eax 4000002h +
lea edx [ebp-30h] +
push edx  +
mov [ebp-30h] eax +
mov eax [ebp+8] +
push 1  +
mov [ebp-2Ch] edi +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+1Ch]  +
mov esi eax +
test esi esi +
jl loc_1036C42  +
mov esi [ebp+0Ch] +
mov eax [ebp+8] +
or dword ptr [ebp-4] 0FFFFFFFFh +
test eax eax +
jz loc_1036C53  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax esi +
call sub_10015C0  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
mov ecx esi +
call sub_10157B5  +
test eax eax +
jl loc_1036C82  +
mov eax [esi+18h] +
push [ebp+arg_4]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+68h]  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
mov edi [ebp+arg_4] +
test edi edi +
jnz loc_1036CA0  +
mov eax 80004003h +
jmp loc_1036CC6  +
push esi  +
mov esi [ebp+arg_0] +
mov ecx esi +
call sub_10157B5  +
test eax eax +
jl loc_1036CC5  +
mov eax [esi+18h] +
mov ecx [eax] +
lea edx [ebp+arg_4] +
push edx  +
push eax  +
call dword ptr [ecx+6Ch]  +
test eax eax +
jl loc_1036CC5  +
mov ecx [ebp+arg_4] +
mov [edi] ecx +
pop esi  +
pop edi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
mov ecx esi +
call sub_10157B5  +
test eax eax +
jl loc_1036CF0  +
mov eax [esi+18h] +
push [ebp+arg_4]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+70h]  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
mov edi [ebp+arg_4] +
test edi edi +
jnz loc_1036D0E  +
mov eax 80004003h +
jmp loc_1036D34  +
push esi  +
mov esi [ebp+arg_0] +
mov ecx esi +
call sub_10157B5  +
test eax eax +
jl loc_1036D33  +
mov eax [esi+18h] +
mov ecx [eax] +
lea edx [ebp+arg_4] +
push edx  +
push eax  +
call dword ptr [ecx+74h]  +
test eax eax +
jl loc_1036D33  +
mov ecx [ebp+arg_4] +
mov [edi] ecx +
pop esi  +
pop edi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_4] +
test edi edi +
jnz loc_1036D53  +
mov esi 80004003h +
jmp loc_1036D9C  +
mov ecx [ebp+arg_0] +
call sub_10157B5  +
mov esi eax +
test esi esi +
jl loc_1036D9C  +
mov ecx [ebp+arg_0] +
and [ebp+arg_4] 0 +
lea eax [ebp+arg_4] +
push eax  +
call sub_103685D  +
mov esi eax +
test esi esi +
jl loc_1036D8F  +
mov eax [ebp+arg_4] +
mov ecx [eax] +
lea edx [ebp+arg_0] +
push edx  +
push eax  +
call dword ptr [ecx+28h]  +
mov esi eax +
test esi esi +
jl loc_1036D8F  +
mov eax [ebp+arg_0] +
mov [edi] eax +
mov eax [ebp+arg_4] +
test eax eax +
jz loc_1036D9C  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
pop edi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
call sub_1001862  +
xor ebx ebx +
cmp [ebp+0Ch] ebx +
jz loc_1037098  +
cmp [ebp+10h] ebx +
jz loc_1037098  +
cmp [ebp+14h] ebx +
jz loc_1037098  +
mov esi [ebp+8] +
mov ecx esi +
call sub_10157B5  +
cmp eax ebx +
mov [ebp-24h] eax +
jl loc_103701B  +
mov [ebp-14h] ebx +
mov eax [esi+20h] +
mov ecx [eax] +
lea edx [ebp-14h] +
push edx  +
push eax  +
mov [ebp-4] ebx +
call dword ptr [ecx+20h]  +
mov esi eax +
cmp esi ebx +
jge loc_1036E18  +
mov eax [ebp-14h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
cmp eax ebx +
jz loc_1036E11  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax esi +
jmp loc_103709D  +
push dword ptr [ebp-14h]  +
lea ecx [ebp+8] +
call sub_1036AA7  +
cmp [ebp+8] ebx +
jnz loc_1036E43  +
mov eax [ebp-14h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
cmp eax ebx +
jz loc_1036E39  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax 8000FFFFh +
jmp loc_103709D  +
push offset aPkmCatalogWait  +
lea ecx [ebp-18h] +
mov byte ptr [ebp-4] 2 +
call sub_100883D  +
mov edi ds:VariantInit +
lea eax [ebp-38h] +
push eax  +
call edi  +
mov esi ds:VariantClear +
lea eax [ebp-38h] +
push eax  +
mov byte ptr [ebp-4] 4 +
call esi  +
mov eax [ebp+8] +
mov ecx [eax] +
lea edx [ebp-38h] +
push edx  +
push dword ptr [ebp-18h]  +
push eax  +
call dword ptr [ecx+70h]  +
cmp eax ebx +
mov [ebp-24h] eax +
jge loc_1036EBF  +
lea eax [ebp-38h] +
push eax  +
call esi  +
push dword ptr [ebp-18h]  +
call ds:SysFreeString  +
mov eax [ebp+8] +
mov [ebp-4] bl +
cmp eax ebx +
jz loc_1036EA6  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-14h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
cmp eax ebx +
jz loc_1036EB7  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-24h] +
jmp loc_103709D  +
cmp word ptr [ebp-38h] 3 +
jz loc_1036EEE  +
lea eax [ebp-38h] +
push eax  +
call esi  +
push dword ptr [ebp-18h]  +
call ds:SysFreeString  +
mov eax [ebp+8] +
mov [ebp-4] bl +
cmp eax ebx +
jz loc_1036E28  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_1036E28  +
mov eax [ebp-30h] +
mov ecx [ebp+0Ch] +
mov [ecx] eax +
push offset aPkmCatalogWa_0  +
lea ecx [ebp-1Ch] +
call sub_100883D  +
lea eax [ebp-48h] +
push eax  +
call edi  +
lea eax [ebp-48h] +
push eax  +
mov byte ptr [ebp-4] 6 +
call esi  +
mov eax [ebp+8] +
mov ecx [eax] +
lea edx [ebp-48h] +
push edx  +
push dword ptr [ebp-1Ch]  +
push eax  +
call dword ptr [ecx+70h]  +
cmp eax ebx +
mov [ebp+0Ch] eax +
jge loc_1036F6F  +
lea eax [ebp-48h] +
push eax  +
call esi  +
push dword ptr [ebp-1Ch]  +
mov edi ds:SysFreeString +
call edi  +
lea eax [ebp-38h] +
push eax  +
call esi  +
push dword ptr [ebp-18h]  +
call edi  +
mov eax [ebp+8] +
mov [ebp-4] bl +
cmp eax ebx +
jz loc_1036F56  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-14h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
cmp eax ebx +
jz loc_1036F67  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+0Ch] +
jmp loc_103709D  +
cmp word ptr [ebp-48h] 3 +
jz loc_1036F97  +
lea eax [ebp-48h] +
push eax  +
call esi  +
mov edi ds:SysFreeString +
push dword ptr [ebp-1Ch]  +
call edi  +
lea eax [ebp-38h] +
push eax  +
call esi  +
push dword ptr [ebp-18h]  +
call edi  +
jmp loc_1036ED5  +
mov eax [ebp-40h] +
mov ecx [ebp+10h] +
mov [ecx] eax +
push offset aPkmCatalogWa_1  +
lea ecx [ebp-20h] +
call sub_100883D  +
lea eax [ebp-58h] +
push eax  +
call edi  +
lea eax [ebp-58h] +
push eax  +
mov byte ptr [ebp-4] 8 +
call esi  +
mov eax [ebp+8] +
mov ecx [eax] +
lea edx [ebp-58h] +
push edx  +
push dword ptr [ebp-20h]  +
push eax  +
call dword ptr [ecx+70h]  +
cmp eax ebx +
mov [ebp-24h] eax +
jge loc_1037020  +
lea eax [ebp-58h] +
push eax  +
call esi  +
push dword ptr [ebp-20h]  +
mov edi ds:SysFreeString +
call edi  +
lea eax [ebp-48h] +
push eax  +
call esi  +
push dword ptr [ebp-1Ch]  +
call edi  +
lea eax [ebp-38h] +
push eax  +
call esi  +
push dword ptr [ebp-18h]  +
call edi  +
mov eax [ebp+8] +
mov [ebp-4] bl +
cmp eax ebx +
jz loc_103700A  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-14h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
cmp eax ebx +
jz loc_103701B  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-24h] +
jmp loc_103709D  +
cmp word ptr [ebp-58h] 3 +
jz loc_1037043  +
lea eax [ebp-58h] +
push eax  +
call esi  +
push dword ptr [ebp-20h]  +
mov edi ds:SysFreeString +
call edi  +
lea eax [ebp-48h] +
push eax  +
call esi  +
jmp loc_1036F82  +
mov eax [ebp-50h] +
mov ecx [ebp+14h] +
mov [ecx] eax +
lea eax [ebp-58h] +
push eax  +
call esi  +
push dword ptr [ebp-20h]  +
mov edi ds:SysFreeString +
call edi  +
lea eax [ebp-48h] +
push eax  +
call esi  +
push dword ptr [ebp-1Ch]  +
call edi  +
lea eax [ebp-38h] +
push eax  +
call esi  +
push dword ptr [ebp-18h]  +
call edi  +
mov dword ptr [ebp-4] 1 +
jmp loc_1036FFA  +
mov eax [ebp-28h] +
mov [ebp-24h] eax +
mov dword ptr [ebp-4] 1 +
mov eax offset loc_1037091 +
retn   +
xor ebx ebx +
jmp loc_1036FFA  +
mov eax 80004003h +
call sub_10015C0  +
retn 10h  +
***
call sub_1001862  +
xor ebx ebx +
cmp [ebp+0Ch] ebx +
jnz loc_10371A0  +
mov eax 80004003h +
jmp loc_10372F1  +
mov esi [ebp+8] +
mov ecx esi +
call sub_10157B5  +
mov edi eax +
cmp edi ebx +
jl loc_10372EF  +
mov [ebp+8] ebx +
mov eax [esi+20h] +
mov ecx [eax] +
lea edx [ebp+8] +
push edx  +
push eax  +
mov [ebp-4] ebx +
call dword ptr [ecx+20h]  +
mov esi eax +
cmp esi ebx +
jge loc_10371E5  +
mov eax [ebp+8] +
or dword ptr [ebp-4] 0FFFFFFFFh +
cmp eax ebx +
jz loc_10371DE  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax esi +
jmp loc_10372F1  +
push dword ptr [ebp+8]  +
lea ecx [ebp-14h] +
call sub_1036AA7  +
cmp [ebp-14h] ebx +
jnz loc_1037210  +
mov eax [ebp+8] +
or dword ptr [ebp-4] 0FFFFFFFFh +
cmp eax ebx +
jz loc_1037206  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax 8000FFFFh +
jmp loc_10372F1  +
push offset aPkmCatalogLast  +
lea ecx [ebp-18h] +
mov byte ptr [ebp-4] 2 +
call sub_100883D  +
lea eax [ebp-2Ch] +
push eax  +
call ds:VariantInit  +
mov esi ds:VariantClear +
lea eax [ebp-2Ch] +
push eax  +
mov byte ptr [ebp-4] 4 +
call esi  +
mov eax [ebp-14h] +
mov ecx [eax] +
lea edx [ebp-2Ch] +
push edx  +
push dword ptr [ebp-18h]  +
push eax  +
call dword ptr [ecx+70h]  +
mov edi eax +
cmp edi ebx +
jge loc_1037262  +
lea eax [ebp-2Ch] +
push eax  +
call esi  +
push dword ptr [ebp-18h]  +
call ds:SysFreeString  +
jmp loc_10372CE  +
cmp word ptr [ebp-2Ch] 8 +
jz loc_1037291  +
lea eax [ebp-2Ch] +
push eax  +
call esi  +
push dword ptr [ebp-18h]  +
call ds:SysFreeString  +
mov eax [ebp-14h] +
mov [ebp-4] bl +
cmp eax ebx +
jz loc_10371F5  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_10371F5  +
push dword ptr [ebp-24h]  +
push dword ptr [ebp+0Ch]  +
call sub_100997C  +
mov edi eax +
lea eax [ebp-2Ch] +
push eax  +
call esi  +
push dword ptr [ebp-18h]  +
call ds:SysFreeString  +
mov dword ptr [ebp-4] 1 +
jmp loc_10372CE  +
mov eax [ebp-1Ch] +
mov [ebp+0Ch] eax +
mov dword ptr [ebp-4] 1 +
mov eax offset loc_10372C9 +
retn   +
mov edi [ebp+0Ch] +
xor ebx ebx +
mov eax [ebp-14h] +
mov [ebp-4] bl +
cmp eax ebx +
jz loc_10372DE  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+8] +
or dword ptr [ebp-4] 0FFFFFFFFh +
cmp eax ebx +
jz loc_10372EF  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax edi +
call sub_10015C0  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_4] 0 +
push edi  +
jnz loc_103734A  +
mov edi 80004003h +
jmp loc_103739E  +
push esi  +
mov esi [ebp+arg_0] +
mov ecx esi +
call sub_10157B5  +
mov edi eax +
test edi edi +
jl loc_103739D  +
lea eax [ebp+arg_0] +
push eax  +
call sub_10367F5  +
mov edi eax +
test edi edi +
jl loc_103739D  +
push dword ptr [esi+24h]  +
mov esi [ebp+arg_0] +
mov ecx esi +
call sub_103CCC9  +
mov edi eax +
test edi edi +
jl loc_1037390  +
push [ebp+arg_4]  +
mov eax [esi] +
push offset dword_10373A8  +
push esi  +
call dword ptr [eax]  +
mov edi eax +
test edi edi +
jge loc_103739D  +
test esi esi +
jz loc_103739D  +
mov eax [esi] +
push 1  +
mov ecx esi +
call dword ptr [eax+18h]  +
pop esi  +
mov eax edi +
pop edi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov ecx [ebp+arg_0] +
push esi  +
call sub_10157B5  +
and [ebp+var_4] 0 +
mov esi eax +
test esi esi +
jl loc_103742A  +
mov ecx [ebp+arg_0] +
lea eax [ebp+var_4] +
push eax  +
call sub_103685D  +
mov esi eax +
test esi esi +
jl loc_103741D  +
mov eax [ebp+var_4] +
mov ecx [eax] +
lea edx [ebp+arg_0] +
push edx  +
push eax  +
call dword ptr [ecx+2Ch]  +
mov esi eax +
test esi esi +
jl loc_103741D  +
cmp [ebp+arg_4] 0 +
mov eax [ebp+arg_0] +
jz loc_1037409  +
or eax 2 +
jmp loc_103740C  +
and eax 0FFFFFFFDh +
cmp eax [ebp+arg_0] +
jz loc_103741D  +
mov ecx [ebp+var_4] +
mov edx [ecx] +
push eax  +
push ecx  +
call dword ptr [edx+30h]  +
mov esi eax +
mov eax [ebp+var_4] +
test eax eax +
jz loc_103742A  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax esi +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov ecx [ebp+arg_0] +
push esi  +
call sub_10157B5  +
and [ebp+var_4] 0 +
mov esi eax +
test esi esi +
jl loc_103748E  +
mov ecx [ebp+arg_0] +
lea eax [ebp+var_4] +
push eax  +
call sub_103685D  +
mov esi eax +
test esi esi +
jl loc_1037481  +
mov eax [ebp+var_4] +
mov ecx [eax] +
lea edx [ebp+arg_0] +
push edx  +
push eax  +
call dword ptr [ecx+2Ch]  +
mov esi eax +
test esi esi +
jl loc_1037481  +
mov eax [ebp+arg_0] +
mov ecx [ebp+arg_4] +
shr eax 1 +
and eax 1 +
mov [ecx] eax +
mov eax [ebp+var_4] +
test eax eax +
jz loc_103748E  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax esi +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
push [ebp+arg_4]  +
call sub_100242C  +
mov esi eax +
test esi esi +
jl loc_1037556  +
push edi  +
mov edi [ebp+arg_0] +
mov ecx edi +
call sub_10157B5  +
mov esi eax +
test esi esi +
jl loc_1037555  +
test [ebp+arg_8] 0FFFFFFFCh +
jz loc_10374D6  +
mov esi 80070057h +
test esi esi +
jl loc_1037555  +
mov eax [edi+20h] +
and [ebp+var_4] 0 +
mov ecx [eax] +
lea edx [ebp+var_4] +
push edx  +
push eax  +
call dword ptr [ecx+20h]  +
mov esi eax +
test esi esi +
jl loc_1037548  +
mov eax [ebp+var_4] +
and [ebp+arg_0] 0 +
mov ecx [eax] +
lea edx [ebp+arg_0] +
push edx  +
push offset dword_1015D5C  +
push eax  +
call dword ptr [ecx]  +
mov esi eax +
test esi esi +
jl loc_103753B  +
push [ebp+arg_4]  +
call ds:SysAllocString  +
mov edi eax +
test edi edi +
jnz loc_1037522  +
mov esi 8007000Eh +
jmp loc_1037534  +
push [ebp+arg_8]  +
mov eax [ebp+arg_0] +
mov ecx [eax] +
push edi  +
push eax  +
call dword ptr [ecx+0A4h]  +
mov esi eax +
push edi  +
call ds:SysFreeString  +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_1037548  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+var_4] +
test eax eax +
jz loc_1037555  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
pop edi  +
mov eax esi +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+pv] +
mov ecx [eax] +
push esi  +
lea edx [ebp+pv] +
push edx  +
push eax  +
call dword ptr [ecx+0Ch]  +
mov esi eax +
test esi esi +
jnz loc_10375A5  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push offset aD_D  +
push [ebp+pv]  +
call ds:swscanf  +
add esp 10h +
cmp eax 2 +
jz loc_103759C  +
mov esi 80004005h +
push [ebp+pv]  +
call ds:CoTaskMemFree  +
mov eax esi +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
call sub_100242C  +
test eax eax +
jl loc_10375DF  +
mov eax [ebp+arg_8] +
neg eax  +
sbb eax eax +
and eax 6C054h +
add eax 80004003h +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi [ebp+Type] +
mov eax [esi] +
and dword ptr [esi] 0 +
push edi  +
mov edi [ebp+lpData] +
add eax eax +
mov [ebp+cbData] eax +
lea eax [ebp+cbData] +
push eax  +
push edi  +
lea eax [ebp+Type] +
push eax  +
push 0  +
push [ebp+lpValueName]  +
push dword ptr [ecx]  +
call ds:RegQueryValueExW  +
test eax eax +
jnz loc_1037653  +
cmp [ebp+Type] 1 +
jz loc_103762B  +
cmp [ebp+Type] 2 +
jz loc_103762B  +
push 0Dh  +
pop eax  +
jmp loc_1037653  +
mov eax [ebp+cbData] +
test edi edi +
jz loc_103764D  +
test eax eax +
jz loc_1037648  +
test al 1 +
jnz loc_1037626  +
mov ecx eax +
shr ecx 1 +
cmp word ptr [edi+ecx*2-2] 0 +
jnz loc_1037626  +
jmp loc_103764D  +
xor ecx ecx +
mov [edi] cx +
shr eax 1 +
mov [esi] eax +
xor eax eax +
pop edi  +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_4] +
test esi esi +
jnz loc_1037672  +
mov eax 80004003h +
jmp loc_1037691  +
mov eax [ebp+arg_0] +
mov eax [eax+14h] +
mov ecx [eax] +
lea edx [ebp+arg_4] +
push edx  +
push eax  +
call dword ptr [ecx+84h]  +
test eax eax +
jl loc_1037691  +
movsx eax word ptr [ebp+arg_4] +
mov [esi] eax +
xor eax eax +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
mov ecx esi +
call sub_1001EE4  +
test eax eax +
jl loc_10376E1  +
push edi  +
mov edi [ebp+arg_4] +
test edi edi +
jnz loc_10376BE  +
mov eax 80004003h +
jmp loc_10376E0  +
mov eax [esi+14h] +
mov ecx [eax] +
lea edx [ebp+arg_0] +
push edx  +
push eax  +
call dword ptr [ecx+88h]  +
test eax eax +
jl loc_10376E0  +
xor eax eax +
cmp word ptr [ebp+arg_0] 0FFFFh +
setz al  +
mov [edi] eax +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
mov ecx esi +
call sub_1001EE4  +
test eax eax +
jl loc_103772A  +
push edi  +
mov edi [ebp+arg_4] +
test edi edi +
jnz loc_103770E  +
mov eax 80004003h +
jmp loc_1037729  +
mov eax [esi+14h] +
mov ecx [eax] +
lea edx [ebp+arg_0] +
push edx  +
push eax  +
call dword ptr [ecx+90h]  +
test eax eax +
jl loc_1037729  +
mov eax [ebp+arg_0] +
mov [edi] eax +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0DCh +
mov eax dword_104A044 +
xor eax ebp +
mov [ebp+var_4] eax +
push edi  +
mov edi [ebp+arg_4] +
test edi edi +
jnz loc_1037765  +
mov eax 80004003h +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop edi  +
call sub_1002A8B  +
leave   +
retn 8  +
and [ebp+var_D8] 0 +
and [ebp+var_D4] 0 +
and [ebp+var_D0] 0 +
push esi  +
push 20019h  +
push offset aSoftwareMicr_2  +
push 80000002h  +
lea ecx [ebp+var_D8] +
call sub_100484B  +
mov esi eax +
lea ecx [ebp+var_D8] +
test esi esi +
jz loc_10377C6  +
call sub_1004887  +
test esi esi +
jle loc_10377B6  +
and esi 0FFFFh +
or esi 80070000h +
lea ecx [ebp+var_D8] +
call sub_1004887  +
mov eax esi +
pop esi  +
jmp loc_1037756  +
lea eax [ebp+Type] +
push eax  +
lea eax [ebp+Data] +
push eax  +
push offset aCurrentversion  +
mov [ebp+Type] 64h +
call sub_10375E8  +
mov esi eax +
test esi esi +
jz loc_10377F6  +
lea ecx [ebp+var_D8] +
jmp loc_10377A1  +
lea eax [ebp+Data] +
push eax  +
push edi  +
call sub_100997C  +
mov esi eax +
jmp loc_10377B6  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
mov ecx esi +
call sub_1001EE4  +
test eax eax +
jl loc_103789E  +
cmp [ebp+arg_10] 0 +
jz loc_1037899  +
cmp [ebp+arg_14] 0 +
jz loc_1037899  +
push edi  +
push [ebp+arg_10]  +
lea ecx [ebp+arg_0] +
call sub_100883D  +
push [ebp+arg_14]  +
lea ecx [ebp+arg_10] +
call sub_100883D  +
push [ebp+arg_10]  +
mov edx [ebp+arg_8] +
push [ebp+arg_0]  +
mov eax [esi+14h] +
push [ebp+arg_C]  +
mov ecx [eax] +
neg edx  +
sbb edx edx +
push edx  +
push [ebp+arg_4]  +
push eax  +
call dword ptr [ecx+98h]  +
push [ebp+arg_10]  +
mov esi ds:SysFreeString +
mov edi eax +
call esi  +
push [ebp+arg_0]  +
call esi  +
mov eax edi +
pop edi  +
jmp loc_103789E  +
mov eax 80004003h +
pop esi  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
mov ecx esi +
call sub_1001EE4  +
test eax eax +
jl loc_10378DE  +
mov eax [esi+14h] +
and [ebp+arg_0] 0 +
mov ecx [eax] +
lea edx [ebp+arg_0] +
push edx  +
push eax  +
call dword ptr [ecx+30h]  +
test eax eax +
jge loc_10378E3  +
push [ebp+arg_0]  +
mov esi eax +
call ds:SysFreeString  +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
push [ebp+arg_0]  +
push [ebp+arg_4]  +
call sub_100997C  +
jmp loc_10378D1  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
mov ecx esi +
call sub_1001EE4  +
test eax eax +
jl loc_103793D  +
push [ebp+arg_4]  +
call sub_100242C  +
test eax eax +
jl loc_103793D  +
push [ebp+arg_4]  +
lea ecx [ebp+arg_4] +
call sub_100883D  +
mov eax [esi+14h] +
push [ebp+arg_4]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+34h]  +
test eax eax +
jge loc_1037942  +
mov esi eax +
push [ebp+arg_4]  +
call ds:SysFreeString  +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
xor esi esi +
jmp loc_1037932  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
mov ecx esi +
call sub_1001EE4  +
test eax eax +
jl loc_1037984  +
mov eax [esi+14h] +
and [ebp+arg_0] 0 +
mov ecx [eax] +
lea edx [ebp+arg_0] +
push edx  +
push eax  +
call dword ptr [ecx+8Ch]  +
test eax eax +
jge loc_1037989  +
push [ebp+arg_0]  +
mov esi eax +
call ds:SysFreeString  +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
push [ebp+arg_0]  +
push [ebp+arg_4]  +
call sub_100997C  +
jmp loc_1037977  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
mov ecx esi +
call sub_1001EE4  +
test eax eax +
jl loc_10379D4  +
mov eax [esi+14h] +
and [ebp+arg_0] 0 +
mov ecx [eax] +
lea edx [ebp+arg_0] +
push edx  +
push eax  +
call dword ptr [ecx+94h]  +
test eax eax +
jge loc_10379D9  +
push [ebp+arg_0]  +
mov esi eax +
call ds:SysFreeString  +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
push [ebp+arg_0]  +
push [ebp+arg_4]  +
call sub_100997C  +
jmp loc_10379C7  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
and [ebp+var_C] 0 +
and [ebp+var_4] 0 +
lea eax [ebp+arg_C] +
mov [ebp+var_10] eax +
lea eax [ebp+var_10] +
push eax  +
push 1  +
push [ebp+arg_8]  +
mov [ebp+var_8] 4 +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call ds:EventWrite  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
push ebx  +
push esi  +
push edi  +
test eax eax +
jnz loc_1037AA6  +
mov ebx 80004003h +
cmp dword_104A3AC eax +
jz loc_1037AA2  +
mov al byte_104A3B0 +
cmp al 4 +
jnb loc_1037A4F  +
test al al +
jnz loc_1037AA2  +
mov edx dword_104A398 +
mov esi dword_104A39C +
mov ecx 20000h +
mov eax 80000000h +
and edx ecx +
and esi eax +
or edx esi +
jz loc_1037AA2  +
mov edx dword_104A3A0 +
mov edi dword_104A3A4 +
mov esi edx +
and esi ecx +
mov ecx edi +
and ecx eax +
cmp esi edx +
jnz loc_1037AA2  +
cmp ecx edi +
jnz loc_1037AA2  +
push 0  +
push ebx  +
push offset dword_1037B20  +
push dword_104A134  +
push dword_104A130  +
call sub_102B7A7  +
mov eax ebx +
jmp loc_1037B19  +
mov ecx [ebp+arg_0] +
mov ebx [ecx+28h] +
mov [eax] ebx +
cmp dword_104A3AC 0 +
jz loc_1037B17  +
mov al byte_104A3B0 +
cmp al 4 +
jnb loc_1037AC4  +
test al al +
jnz loc_1037B17  +
mov edx dword_104A398 +
mov esi dword_104A39C +
mov ecx 20000h +
mov eax 80000000h +
and edx ecx +
and esi eax +
or edx esi +
jz loc_1037B17  +
mov edx dword_104A3A0 +
mov edi dword_104A3A4 +
mov esi edx +
and esi ecx +
mov ecx edi +
and ecx eax +
cmp esi edx +
jnz loc_1037B17  +
cmp ecx edi +
jnz loc_1037B17  +
push ebx  +
push 0  +
push offset dword_1037B20  +
push dword_104A134  +
push dword_104A130  +
call sub_102B7A7  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword_104A3AC 0 +
push ebx  +
mov ebx [ebp+arg_4] +
jz loc_1037BA7  +
mov al byte_104A3B0 +
cmp al 4 +
jnb loc_1037B54  +
test al al +
jnz loc_1037BA7  +
mov eax dword_104A398 +
mov ecx dword_104A39C +
push esi  +
mov edx 20000h +
mov esi 80000000h +
and eax edx +
and ecx esi +
or eax ecx +
jz loc_1037BA6  +
mov eax dword_104A3A0 +
push edi  +
mov edi dword_104A3A4 +
mov ecx eax +
and ecx edx +
mov edx edi +
and edx esi +
cmp ecx eax +
jnz loc_1037BA5  +
cmp edx edi +
jnz loc_1037BA5  +
push ebx  +
push offset dword_1037BB8  +
push dword_104A134  +
push dword_104A130  +
call sub_10379EB  +
pop edi  +
pop esi  +
mov eax [ebp+arg_0] +
mov [eax+30h] ebx +
xor eax eax +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
push ebx  +
push esi  +
push edi  +
test eax eax +
jnz loc_1037C4D  +
mov ebx 80004003h +
cmp dword_104A3AC eax +
jz loc_1037C49  +
mov al byte_104A3B0 +
cmp al 4 +
jnb loc_1037BF6  +
test al al +
jnz loc_1037C49  +
mov edx dword_104A398 +
mov esi dword_104A39C +
mov ecx 20000h +
mov eax 80000000h +
and edx ecx +
and esi eax +
or edx esi +
jz loc_1037C49  +
mov edx dword_104A3A0 +
mov edi dword_104A3A4 +
mov esi edx +
and esi ecx +
mov ecx edi +
and ecx eax +
cmp esi edx +
jnz loc_1037C49  +
cmp ecx edi +
jnz loc_1037C49  +
push 0  +
push ebx  +
push offset dword_1037CC8  +
push dword_104A134  +
push dword_104A130  +
call sub_102B7A7  +
mov eax ebx +
jmp loc_1037CC0  +
mov ecx [ebp+arg_0] +
mov ebx [ecx+30h] +
mov [eax] ebx +
cmp dword_104A3AC 0 +
jz loc_1037CBE  +
mov al byte_104A3B0 +
cmp al 4 +
jnb loc_1037C6B  +
test al al +
jnz loc_1037CBE  +
mov edx dword_104A398 +
mov esi dword_104A39C +
mov ecx 20000h +
mov eax 80000000h +
and edx ecx +
and esi eax +
or edx esi +
jz loc_1037CBE  +
mov edx dword_104A3A0 +
mov edi dword_104A3A4 +
mov esi edx +
and esi ecx +
mov ecx edi +
and ecx eax +
cmp esi edx +
jnz loc_1037CBE  +
cmp ecx edi +
jnz loc_1037CBE  +
push ebx  +
push 0  +
push offset dword_1037CC8  +
push dword_104A134  +
push dword_104A130  +
call sub_102B7A7  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword_104A3AC 0 +
push ebx  +
mov ebx [ebp+arg_4] +
jz loc_1037D4F  +
mov al byte_104A3B0 +
cmp al 4 +
jnb loc_1037CFC  +
test al al +
jnz loc_1037D4F  +
mov eax dword_104A398 +
mov ecx dword_104A39C +
push esi  +
mov edx 20000h +
mov esi 80000000h +
and eax edx +
and ecx esi +
or eax ecx +
jz loc_1037D4E  +
mov eax dword_104A3A0 +
push edi  +
mov edi dword_104A3A4 +
mov ecx eax +
and ecx edx +
mov edx edi +
and edx esi +
cmp ecx eax +
jnz loc_1037D4D  +
cmp edx edi +
jnz loc_1037D4D  +
push ebx  +
push offset dword_1037D60  +
push dword_104A134  +
push dword_104A130  +
call sub_10379EB  +
pop edi  +
pop esi  +
mov eax [ebp+arg_0] +
mov [eax+38h] ebx +
xor eax eax +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
push ebx  +
push esi  +
push edi  +
test eax eax +
jnz loc_1037DF5  +
mov ebx 80004003h +
cmp dword_104A3AC eax +
jz loc_1037DF1  +
mov al byte_104A3B0 +
cmp al 4 +
jnb loc_1037D9E  +
test al al +
jnz loc_1037DF1  +
mov edx dword_104A398 +
mov esi dword_104A39C +
mov ecx 20000h +
mov eax 80000000h +
and edx ecx +
and esi eax +
or edx esi +
jz loc_1037DF1  +
mov edx dword_104A3A0 +
mov edi dword_104A3A4 +
mov esi edx +
and esi ecx +
mov ecx edi +
and ecx eax +
cmp esi edx +
jnz loc_1037DF1  +
cmp ecx edi +
jnz loc_1037DF1  +
push 0  +
push ebx  +
push offset dword_1037E70  +
push dword_104A134  +
push dword_104A130  +
call sub_102B7A7  +
mov eax ebx +
jmp loc_1037E68  +
mov ecx [ebp+arg_0] +
mov ebx [ecx+38h] +
mov [eax] ebx +
cmp dword_104A3AC 0 +
jz loc_1037E66  +
mov al byte_104A3B0 +
cmp al 4 +
jnb loc_1037E13  +
test al al +
jnz loc_1037E66  +
mov edx dword_104A398 +
mov esi dword_104A39C +
mov ecx 20000h +
mov eax 80000000h +
and edx ecx +
and esi eax +
or edx esi +
jz loc_1037E66  +
mov edx dword_104A3A0 +
mov edi dword_104A3A4 +
mov esi edx +
and esi ecx +
mov ecx edi +
and ecx eax +
cmp esi edx +
jnz loc_1037E66  +
cmp ecx edi +
jnz loc_1037E66  +
push ebx  +
push 0  +
push offset dword_1037E70  +
push dword_104A134  +
push dword_104A130  +
call sub_102B7A7  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword_104A3AC 0 +
push ebx  +
mov ebx [ebp+arg_4] +
jz loc_1037EF7  +
mov al byte_104A3B0 +
cmp al 4 +
jnb loc_1037EA4  +
test al al +
jnz loc_1037EF7  +
mov eax dword_104A398 +
mov ecx dword_104A39C +
push esi  +
mov edx 20000h +
mov esi 80000000h +
and eax edx +
and ecx esi +
or eax ecx +
jz loc_1037EF6  +
mov eax dword_104A3A0 +
push edi  +
mov edi dword_104A3A4 +
mov ecx eax +
and ecx edx +
mov edx edi +
and edx esi +
cmp ecx eax +
jnz loc_1037EF5  +
cmp edx edi +
jnz loc_1037EF5  +
push ebx  +
push offset dword_1037F08  +
push dword_104A134  +
push dword_104A130  +
call sub_10379EB  +
pop edi  +
pop esi  +
mov eax [ebp+arg_0] +
mov [eax+3Ch] ebx +
xor eax eax +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
push ebx  +
push esi  +
push edi  +
test eax eax +
jnz loc_1037F9F  +
mov ebx 80004003h +
cmp dword_104A3AC eax +
jz loc_1037F9B  +
mov al byte_104A3B0 +
cmp al 4 +
jnb loc_1037F48  +
test al al +
jnz loc_1037F9B  +
mov edx dword_104A398 +
mov esi dword_104A39C +
mov ecx 20000h +
mov eax 80000000h +
and edx ecx +
and esi eax +
or edx esi +
jz loc_1037F9B  +
mov edx dword_104A3A0 +
mov edi dword_104A3A4 +
mov esi edx +
and esi ecx +
mov ecx edi +
and ecx eax +
cmp esi edx +
jnz loc_1037F9B  +
cmp ecx edi +
jnz loc_1037F9B  +
push 0  +
push ebx  +
push offset dword_1038020  +
push dword_104A134  +
push dword_104A130  +
call sub_102B7A7  +
mov eax ebx +
jmp loc_1038012  +
mov ecx [ebp+arg_0] +
mov ebx [ecx+3Ch] +
mov [eax] ebx +
cmp dword_104A3AC 0 +
jz loc_1038010  +
mov al byte_104A3B0 +
cmp al 4 +
jnb loc_1037FBD  +
test al al +
jnz loc_1038010  +
mov edx dword_104A398 +
mov esi dword_104A39C +
mov ecx 20000h +
mov eax 80000000h +
and edx ecx +
and esi eax +
or edx esi +
jz loc_1038010  +
mov edx dword_104A3A0 +
mov edi dword_104A3A4 +
mov esi edx +
and esi ecx +
mov ecx edi +
and ecx eax +
cmp esi edx +
jnz loc_1038010  +
cmp ecx edi +
jnz loc_1038010  +
push ebx  +
push 0  +
push offset dword_1038020  +
push dword_104A134  +
push dword_104A130  +
call sub_102B7A7  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
push ebx  +
push esi  +
push edi  +
test eax eax +
jnz loc_10380B5  +
mov ebx 80004003h +
cmp dword_104A3AC eax +
jz loc_10380B1  +
mov al byte_104A3B0 +
cmp al 4 +
jnb loc_103805E  +
test al al +
jnz loc_10380B1  +
mov edx dword_104A398 +
mov esi dword_104A39C +
mov ecx 20000h +
mov eax 80000000h +
and edx ecx +
and esi eax +
or edx esi +
jz loc_10380B1  +
mov edx dword_104A3A0 +
mov edi dword_104A3A4 +
mov esi edx +
and esi ecx +
mov ecx edi +
and ecx eax +
cmp esi edx +
jnz loc_10380B1  +
cmp ecx edi +
jnz loc_10380B1  +
push 0  +
push ebx  +
push offset dword_1038130  +
push dword_104A134  +
push dword_104A130  +
call sub_102B7A7  +
mov eax ebx +
jmp loc_1038128  +
mov ecx [ebp+arg_0] +
mov ebx [ecx+34h] +
mov [eax] ebx +
cmp dword_104A3AC 0 +
jz loc_1038126  +
mov al byte_104A3B0 +
cmp al 4 +
jnb loc_10380D3  +
test al al +
jnz loc_1038126  +
mov edx dword_104A398 +
mov esi dword_104A39C +
mov ecx 20000h +
mov eax 80000000h +
and edx ecx +
and esi eax +
or edx esi +
jz loc_1038126  +
mov edx dword_104A3A0 +
mov edi dword_104A3A4 +
mov esi edx +
and esi ecx +
mov ecx edi +
and ecx eax +
cmp esi edx +
jnz loc_1038126  +
cmp ecx edi +
jnz loc_1038126  +
push ebx  +
push 0  +
push offset dword_1038130  +
push dword_104A134  +
push dword_104A130  +
call sub_102B7A7  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov eax 80004001h +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
cmp [ebp+arg_4] eax +
setz al  +
lea eax [eax+eax-7FFFBFFFh] +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword_104A3AC 0 +
push ebx  +
mov ebx [ebp+arg_4] +
jz loc_10381E1  +
mov al byte_104A3B0 +
cmp al 4 +
jnb loc_103818E  +
test al al +
jnz loc_10381E1  +
mov eax dword_104A398 +
mov ecx dword_104A39C +
push esi  +
mov edx 20000h +
mov esi 80000000h +
and eax edx +
and ecx esi +
or eax ecx +
jz loc_10381E0  +
mov eax dword_104A3A0 +
push edi  +
mov edi dword_104A3A4 +
mov ecx eax +
and ecx edx +
mov edx edi +
and edx esi +
cmp ecx eax +
jnz loc_10381DF  +
cmp edx edi +
jnz loc_10381DF  +
push ebx  +
push offset dword_10381F0  +
push dword_104A134  +
push dword_104A130  +
call sub_10379EB  +
pop edi  +
pop esi  +
mov eax [ebp+arg_0] +
mov [eax+40h] ebx +
xor eax eax +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
push ebx  +
push esi  +
push edi  +
test eax eax +
jnz loc_1038285  +
mov ebx 80004003h +
cmp dword_104A3AC eax +
jz loc_1038281  +
mov al byte_104A3B0 +
cmp al 4 +
jnb loc_103822E  +
test al al +
jnz loc_1038281  +
mov edx dword_104A398 +
mov esi dword_104A39C +
mov ecx 20000h +
mov eax 80000000h +
and edx ecx +
and esi eax +
or edx esi +
jz loc_1038281  +
mov edx dword_104A3A0 +
mov edi dword_104A3A4 +
mov esi edx +
and esi ecx +
mov ecx edi +
and ecx eax +
cmp esi edx +
jnz loc_1038281  +
cmp ecx edi +
jnz loc_1038281  +
push 0  +
push ebx  +
push offset dword_1038308  +
push dword_104A134  +
push dword_104A130  +
call sub_102B7A7  +
mov eax ebx +
jmp loc_10382FA  +
mov ebx [ebp+arg_0] +
mov ecx [ebx+40h] +
mov [eax] ecx +
cmp dword_104A3AC 0 +
jz loc_10382F8  +
mov al byte_104A3B0 +
cmp al 4 +
jnb loc_10382A3  +
test al al +
jnz loc_10382F8  +
mov edx dword_104A398 +
mov esi dword_104A39C +
mov ecx 20000h +
mov eax 80000000h +
and edx ecx +
and esi eax +
or edx esi +
jz loc_10382F8  +
mov edx dword_104A3A0 +
mov edi dword_104A3A4 +
mov esi edx +
and esi ecx +
mov ecx edi +
and ecx eax +
cmp esi edx +
jnz loc_10382F8  +
cmp ecx edi +
jnz loc_10382F8  +
push dword ptr [ebx+40h]  +
push 0  +
push offset dword_1038308  +
push dword_104A134  +
push dword_104A130  +
call sub_102B7A7  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword_104A3AC 0 +
push esi  +
push edi  +
mov edi 20000h +
mov esi 80000000h +
jz loc_103838B  +
mov al byte_104A3B0 +
cmp al 4 +
jnb loc_1038344  +
test al al +
jnz loc_103838B  +
mov eax dword_104A398 +
mov ecx dword_104A39C +
and eax edi +
and ecx esi +
or eax ecx +
jz loc_103838B  +
mov edx dword_104A3A0 +
push ebx  +
mov ebx dword_104A3A4 +
mov eax edx +
mov ecx ebx +
and eax edi +
and ecx esi +
cmp eax edx +
jnz loc_103838A  +
cmp ecx ebx +
jnz loc_103838A  +
push offset dword_1038468  +
push dword_104A134  +
push dword_104A130  +
call sub_100A01E  +
pop ebx  +
mov eax [ebp+arg_0] +
mov ecx [eax+10h] +
mov edx [ebp+arg_4] +
add ecx edx +
cmp ecx [eax+0Ch] +
ja loc_10383FE  +
mov [eax+10h] ecx +
cmp dword_104A3AC 0 +
jz loc_10383FA  +
mov al byte_104A3B0 +
cmp al 4 +
jnb loc_10383B4  +
test al al +
jnz loc_10383FA  +
mov eax dword_104A398 +
mov ecx dword_104A39C +
and eax edi +
and ecx esi +
or eax ecx +
jz loc_10383FA  +
mov eax dword_104A3A0 +
mov ecx eax +
and ecx edi +
mov edi dword_104A3A4 +
mov edx edi +
and edx esi +
cmp ecx eax +
jnz loc_10383FA  +
cmp edx edi +
jnz loc_10383FA  +
push 0  +
push offset dword_1038478  +
push dword_104A134  +
push dword_104A130  +
call sub_10379EB  +
xor eax eax +
jmp loc_103845E  +
cmp dword_104A3AC 0 +
jz loc_103845B  +
mov al byte_104A3B0 +
cmp al 4 +
jnb loc_1038414  +
test al al +
jnz loc_103845B  +
mov eax dword_104A398 +
mov ecx dword_104A39C +
and eax edi +
and ecx esi +
or eax ecx +
jz loc_103845B  +
mov edx dword_104A3A0 +
mov eax edx +
and eax edi +
mov edi dword_104A3A4 +
mov ecx edi +
and ecx esi +
cmp eax edx +
jnz loc_103845B  +
cmp ecx edi +
jnz loc_103845B  +
push 1  +
push offset dword_1038478  +
push dword_104A134  +
push dword_104A130  +
call sub_10379EB  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
xor esi esi +
push edi  +
cmp [ebp+arg_4] esi +
jnz loc_103851C  +
mov ebx 80004003h +
cmp dword_104A3AC esi +
jz loc_1038518  +
mov al byte_104A3B0 +
cmp al 4 +
jnb loc_10384C2  +
test al al +
jnz loc_1038518  +
mov edx dword_104A398 +
mov esi dword_104A39C +
mov ecx 20000h +
mov eax 80000000h +
and edx ecx +
and esi eax +
or edx esi +
jz loc_1038518  +
mov edx dword_104A3A0 +
mov edi dword_104A3A4 +
mov esi edx +
and esi ecx +
mov ecx edi +
and ecx eax +
cmp esi edx +
jnz loc_1038518  +
cmp ecx edi +
jnz loc_1038518  +
push offset word_100348C  +
push ebx  +
push offset dword_10385A8  +
push dword_104A134  +
push dword_104A130  +
call sub_1026426  +
mov eax ebx +
jmp loc_103859B  +
mov ebx [ebp+arg_0] +
push dword ptr [ebx+1Ch]  +
push [ebp+arg_4]  +
call sub_100997C  +
mov [ebp+arg_4] eax +
cmp dword_104A3AC esi +
jz loc_1038598  +
mov al byte_104A3B0 +
cmp al 4 +
jnb loc_1038542  +
test al al +
jnz loc_1038598  +
mov edx dword_104A398 +
mov esi dword_104A39C +
mov ecx 20000h +
mov eax 80000000h +
and edx ecx +
and esi eax +
or edx esi +
jz loc_1038598  +
mov edx dword_104A3A0 +
mov edi dword_104A3A4 +
mov esi edx +
and esi ecx +
mov ecx edi +
and ecx eax +
cmp esi edx +
jnz loc_1038598  +
cmp ecx edi +
jnz loc_1038598  +
push dword ptr [ebx+1Ch]  +
push [ebp+arg_4]  +
push offset dword_10385A8  +
push dword_104A134  +
push dword_104A130  +
call sub_1026426  +
mov eax [ebp+arg_4] +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
and dword ptr [eax+10h] 0 +
cmp dword_104A3AC 0 +
jz loc_1038631  +
mov al byte_104A3B0 +
cmp al 4 +
jnb loc_10385DF  +
test al al +
jnz loc_1038631  +
mov eax dword_104A398 +
mov ecx dword_104A39C +
push esi  +
mov edx 20000h +
mov esi 80000000h +
and eax edx +
and ecx esi +
or eax ecx +
jz loc_1038630  +
mov eax dword_104A3A0 +
push edi  +
mov edi dword_104A3A4 +
mov ecx eax +
and ecx edx +
mov edx edi +
and edx esi +
cmp ecx eax +
jnz loc_103862F  +
cmp edx edi +
jnz loc_103862F  +
push offset dword_1038638  +
push dword_104A134  +
push dword_104A130  +
call sub_100A01E  +
pop edi  +
pop esi  +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
cmp dword_104A3AC 0 +
push ebx  +
push esi  +
push edi  +
mov edi 20000h +
mov esi 80000000h +
jz loc_10386BC  +
mov al byte_104A3B0 +
cmp al 4 +
jnb loc_1038677  +
test al al +
jnz loc_10386BC  +
mov eax dword_104A398 +
mov ecx dword_104A39C +
and eax edi +
and ecx esi +
or eax ecx +
jz loc_10386BC  +
mov edx dword_104A3A0 +
mov ebx dword_104A3A4 +
mov eax edx +
mov ecx ebx +
and eax edi +
and ecx esi +
cmp eax edx +
jnz loc_10386BC  +
cmp ecx ebx +
jnz loc_10386BC  +
push offset dword_1038840  +
push dword_104A134  +
push dword_104A130  +
call sub_100A01E  +
cmp [ebp+arg_4] 0 +
jnz loc_103872A  +
cmp dword_104A3AC 0 +
mov ebx 80004003h +
jz loc_1038723  +
mov al byte_104A3B0 +
cmp al 4 +
jnb loc_10386DD  +
test al al +
jnz loc_1038723  +
mov eax dword_104A398 +
mov ecx dword_104A39C +
and eax edi +
and ecx esi +
or eax ecx +
jz loc_1038723  +
mov edx dword_104A3A0 +
mov eax edx +
and eax edi +
mov edi dword_104A3A4 +
mov ecx edi +
and ecx esi +
cmp eax edx +
jnz loc_1038723  +
cmp ecx edi +
jnz loc_1038723  +
push ebx  +
push offset dword_1038850  +
push dword_104A134  +
push dword_104A130  +
call sub_10379EB  +
mov eax ebx +
jmp loc_1038835  +
lea eax [ebp+var_8] +
push eax  +
call sub_1009329  +
mov ebx eax +
test ebx ebx +
jge loc_103877D  +
cmp dword_104A3AC 0 +
jz loc_1038723  +
mov al byte_104A3B0 +
cmp al 4 +
jnb loc_103874F  +
test al al +
jnz loc_1038723  +
mov eax dword_104A398 +
mov ecx dword_104A39C +
and eax edi +
and ecx esi +
or eax ecx +
jz loc_1038723  +
mov eax dword_104A3A0 +
mov ecx eax +
and ecx edi +
mov edi dword_104A3A4 +
mov edx edi +
and edx esi +
cmp ecx eax +
jnz loc_1038723  +
cmp edx edi +
jmp loc_103870A  +
mov ebx [ebp+var_8] +
mov eax [ebx] +
push ebx  +
call dword ptr [eax+4]  +
mov eax [ebp+arg_0] +
and [ebp+var_8] 0 +
cmp dword ptr [eax+0Ch] 0 +
jbe loc_10387BF  +
mov ecx [ebp+arg_0] +
push [ebp+var_8]  +
add ecx 14h +
call sub_10068B5  +
push dword ptr [eax]  +
mov ecx ebx +
call sub_1009744  +
mov [ebp+var_4] eax +
test eax eax +
jl loc_10387CF  +
inc [ebp+var_8]  +
mov eax [ebp+arg_0] +
mov ecx [ebp+var_8] +
cmp ecx [eax+0Ch] +
jb loc_1038793  +
push [ebp+arg_4]  +
mov eax [ebx] +
push offset dword_100958C  +
push ebx  +
call dword ptr [eax]  +
mov [ebp+var_4] eax +
mov eax [ebx] +
push ebx  +
call dword ptr [eax+8]  +
cmp dword_104A3AC 0 +
jz loc_1038832  +
mov al byte_104A3B0 +
cmp al 4 +
jnb loc_10387EB  +
test al al +
jnz loc_1038832  +
mov ecx dword_104A39C +
mov eax dword_104A398 +
and ecx esi +
and eax edi +
or eax ecx +
jz loc_1038832  +
mov eax dword_104A3A0 +
mov ecx eax +
and ecx edi +
mov edi dword_104A3A4 +
mov edx edi +
and edx esi +
cmp ecx eax +
jnz loc_1038832  +
cmp edx edi +
jnz loc_1038832  +
push [ebp+var_4]  +
push offset dword_1038850  +
push dword_104A134  +
push dword_104A130  +
call sub_10379EB  +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword_104A3AC 0 +
push ebx  +
mov ebx [ebp+arg_4] +
jz loc_10388E2  +
mov al byte_104A3B0 +
cmp al 4 +
jnb loc_1038884  +
test al al +
jnz loc_10388E2  +
mov eax dword_104A398 +
mov ecx dword_104A39C +
push esi  +
mov edx 20000h +
mov esi 80000000h +
and eax edx +
and ecx esi +
or eax ecx +
jz loc_10388E1  +
mov eax dword_104A3A0 +
push edi  +
mov edi dword_104A3A4 +
mov ecx eax +
and ecx edx +
mov edx edi +
and edx esi +
cmp ecx eax +
jnz loc_10388E0  +
cmp edx edi +
jnz loc_10388E0  +
mov eax ebx +
test ebx ebx +
jnz loc_10388C9  +
mov eax offset word_100348C +
push eax  +
push offset dword_1038900  +
push dword_104A134  +
push dword_104A130  +
call sub_10263C4  +
pop edi  +
pop esi  +
push ebx  +
call sub_100242C  +
test eax eax +
jl loc_10388F9  +
mov eax [ebp+arg_0] +
push ebx  +
add eax 1Ch +
push eax  +
call sub_10195FB  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword_104A3AC 0 +
push esi  +
push edi  +
mov edi 20000h +
mov esi 80000000h +
jz loc_1038983  +
mov al byte_104A3B0 +
cmp al 4 +
jnb loc_103893C  +
test al al +
jnz loc_1038983  +
mov eax dword_104A398 +
mov ecx dword_104A39C +
and eax edi +
and ecx esi +
or eax ecx +
jz loc_1038983  +
mov edx dword_104A3A0 +
push ebx  +
mov ebx dword_104A3A4 +
mov eax edx +
mov ecx ebx +
and eax edi +
and ecx esi +
cmp eax edx +
jnz loc_1038982  +
cmp ecx ebx +
jnz loc_1038982  +
push offset dword_1038A60  +
push dword_104A134  +
push dword_104A130  +
call sub_100A01E  +
pop ebx  +
mov eax [ebp+arg_0] +
mov ecx [eax+10h] +
mov edx [ebp+arg_4] +
add ecx edx +
cmp ecx [eax+0Ch] +
ja loc_10389F6  +
mov [eax+10h] ecx +
cmp dword_104A3AC 0 +
jz loc_10389F2  +
mov al byte_104A3B0 +
cmp al 4 +
jnb loc_10389AC  +
test al al +
jnz loc_10389F2  +
mov eax dword_104A398 +
mov ecx dword_104A39C +
and eax edi +
and ecx esi +
or eax ecx +
jz loc_10389F2  +
mov eax dword_104A3A0 +
mov ecx eax +
and ecx edi +
mov edi dword_104A3A4 +
mov edx edi +
and edx esi +
cmp ecx eax +
jnz loc_10389F2  +
cmp edx edi +
jnz loc_10389F2  +
push 0  +
push offset dword_1038A70  +
push dword_104A134  +
push dword_104A130  +
call sub_10379EB  +
xor eax eax +
jmp loc_1038A56  +
cmp dword_104A3AC 0 +
jz loc_1038A53  +
mov al byte_104A3B0 +
cmp al 4 +
jnb loc_1038A0C  +
test al al +
jnz loc_1038A53  +
mov eax dword_104A398 +
mov ecx dword_104A39C +
and eax edi +
and ecx esi +
or eax ecx +
jz loc_1038A53  +
mov edx dword_104A3A0 +
mov eax edx +
and eax edi +
mov edi dword_104A3A4 +
mov ecx edi +
and ecx esi +
cmp eax edx +
jnz loc_1038A53  +
cmp ecx edi +
jnz loc_1038A53  +
push 1  +
push offset dword_1038A70  +
push dword_104A134  +
push dword_104A130  +
call sub_10379EB  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+pv] +
mov ecx [ebp+arg_4] +
mov eax [eax] +
push esi  +
mov esi [ecx] +
mov ecx [eax] +
push edi  +
lea edx [ebp+pv] +
push edx  +
push eax  +
call dword ptr [ecx+0Ch]  +
mov eax [esi] +
lea ecx [ebp+arg_4] +
push ecx  +
push esi  +
call dword ptr [eax+0Ch]  +
push [ebp+arg_4]  +
push [ebp+pv]  +
call ds:__imp__wcsicmp  +
mov esi ds:CoTaskMemFree +
pop ecx  +
pop ecx  +
push [ebp+pv]  +
mov edi eax +
call esi  +
push [ebp+arg_4]  +
call esi  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_4] 0 +
push ebx  +
mov ebx [ebp+arg_0] +
jz loc_1038AF6  +
push [ebp+arg_4]  +
mov eax [ebx+14h] +
push eax  +
call ds:SHStrDupW  +
mov [ebp+arg_4] eax +
jmp loc_1038AFD  +
mov [ebp+arg_4] 80004003h +
cmp dword_104A3AC 0 +
jz loc_1038B6B  +
mov al byte_104A3B0 +
cmp al 4 +
jnb loc_1038B13  +
test al al +
jnz loc_1038B6B  +
mov eax dword_104A398 +
mov ecx dword_104A39C +
push esi  +
mov edx 20000h +
mov esi 80000000h +
and eax edx +
and ecx esi +
or eax ecx +
jz loc_1038B6A  +
mov eax dword_104A3A0 +
push edi  +
mov edi dword_104A3A4 +
mov ecx eax +
and ecx edx +
mov edx edi +
and edx esi +
cmp ecx eax +
jnz loc_1038B69  +
cmp edx edi +
jnz loc_1038B69  +
push dword ptr [ebx+14h]  +
push [ebp+arg_4]  +
push offset dword_1038B78  +
push dword_104A134  +
push dword_104A130  +
call sub_1026426  +
pop edi  +
pop esi  +
mov eax [ebp+arg_4] +
pop ebx  +
pop ebp  +
retn 8  +
***
xor eax eax +
push edi  +
mov edi ecx +
mov [edi+4] eax +
mov dword ptr [edi] offset off_100E76C +
mov [edi+0Ch] eax +
mov [edi+10h] eax +
mov [edi+14h] eax +
mov [edi+18h] eax +
mov [edi+1Ch] eax +
mov [edi+20h] eax +
cmp dword_104A3AC eax +
jz loc_1038C16  +
mov cl byte_104A3B0 +
cmp cl 4 +
jnb loc_1038BC4  +
cmp cl al +
jnz loc_1038C16  +
mov eax dword_104A398 +
mov ecx dword_104A39C +
push esi  +
mov edx 20000h +
mov esi 80000000h +
and eax edx +
and ecx esi +
or eax ecx +
jz loc_1038C15  +
mov eax dword_104A3A0 +
push ebx  +
mov ebx dword_104A3A4 +
mov ecx eax +
and ecx edx +
mov edx ebx +
and edx esi +
cmp ecx eax +
jnz loc_1038C14  +
cmp edx ebx +
jnz loc_1038C14  +
push offset dword_1038C20  +
push dword_104A134  +
push dword_104A130  +
call sub_100A01E  +
pop ebx  +
pop esi  +
mov eax edi +
pop edi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
and dword ptr [eax+10h] 0 +
xor eax eax +
pop ebp  +
retn 4  +
***
push 8  +
mov eax offset dword_1042884 +
call sub_10015E0  +
mov [ebp-10h] ecx +
mov dword ptr [ecx] offset off_100E76C +
and dword ptr [ebp-4] 0 +
cmp dword_104A3AC 0 +
mov edi 20000h +
mov esi 80000000h +
jz loc_1038CCA  +
mov al byte_104A3B0 +
cmp al 4 +
jnb loc_1038C85  +
test al al +
jnz loc_1038CCA  +
mov eax dword_104A398 +
mov ecx dword_104A39C +
and eax edi +
and ecx esi +
or eax ecx +
jz loc_1038CCA  +
mov edx dword_104A3A0 +
mov ebx dword_104A3A4 +
mov eax edx +
mov ecx ebx +
and eax edi +
and ecx esi +
cmp eax edx +
jnz loc_1038CCA  +
cmp ecx ebx +
jnz loc_1038CCA  +
push offset dword_1038D68  +
push dword_104A134  +
push dword_104A130  +
call sub_100A01E  +
mov eax [ebp-10h] +
mov eax [eax+18h] +
xor ebx ebx +
mov [ebp-14h] eax +
test eax eax +
jbe loc_1038CF7  +
mov ecx [ebp-10h] +
push ebx  +
add ecx 14h +
call sub_10068B5  +
mov eax [eax] +
test eax eax +
jz loc_1038CF1  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
inc ebx  +
cmp ebx [ebp-14h] +
jb loc_1038CD9  +
cmp dword_104A3AC 0 +
jz loc_1038D52  +
mov al byte_104A3B0 +
cmp al 4 +
jnb loc_1038D0D  +
test al al +
jnz loc_1038D52  +
mov eax dword_104A398 +
mov ecx dword_104A39C +
and eax edi +
and ecx esi +
or eax ecx +
jz loc_1038D52  +
mov edx dword_104A3A0 +
mov eax edx +
and eax edi +
mov edi dword_104A3A4 +
mov ecx edi +
and ecx esi +
cmp eax edx +
jnz loc_1038D52  +
cmp ecx edi +
jnz loc_1038D52  +
push offset dword_1038D78  +
push dword_104A134  +
push dword_104A130  +
call sub_100A01E  +
mov ecx [ebp-10h] +
add ecx 14h +
call sub_10098FC  +
call sub_10015C0  +
retn   +
***
call sub_1001862  +
cmp dword_104A3AC 0 +
jz loc_1038E00  +
mov al byte_104A3B0 +
cmp al 4 +
jnb loc_1038DAF  +
test al al +
jnz loc_1038E00  +
mov eax dword_104A398 +
mov ecx dword_104A39C +
mov edi 20000h +
mov esi 80000000h +
and eax edi +
and ecx esi +
or eax ecx +
jz loc_1038E0A  +
mov edx dword_104A3A0 +
mov ebx dword_104A3A4 +
mov eax edx +
mov ecx ebx +
and eax edi +
and ecx esi +
cmp eax edx +
jnz loc_1038E0A  +
cmp ecx ebx +
jnz loc_1038E0A  +
push offset dword_1039070  +
push dword_104A134  +
push dword_104A130  +
call sub_100A01E  +
jmp loc_1038E0A  +
mov esi 80000000h +
mov edi 20000h +
xor ecx ecx +
cmp [ebp+10h] ecx +
jnz loc_1038E7A  +
cmp dword_104A3AC ecx +
jz loc_1038E70  +
mov al byte_104A3B0 +
cmp al 4 +
jnb loc_1038E26  +
test al al +
jnz loc_1038E70  +
mov eax dword_104A398 +
mov ecx dword_104A39C +
and eax edi +
and ecx esi +
or eax ecx +
jz loc_1038E70  +
mov edx dword_104A3A0 +
mov eax edx +
and eax edi +
mov edi dword_104A3A4 +
mov ecx edi +
and ecx esi +
cmp eax edx +
jnz loc_1038E70  +
cmp ecx edi +
jnz loc_1038E70  +
push 80004003h  +
push offset dword_1039080  +
push dword_104A134  +
push dword_104A130  +
call sub_10379EB  +
mov eax 80004003h +
jmp loc_1039067  +
mov eax [ebp+14h] +
mov [ebp-14h] ecx +
cmp eax ecx +
jnz loc_1038EF3  +
cmp dword ptr [ebp+0Ch] 1 +
jz loc_1038EF5  +
cmp dword_104A3AC ecx +
jz loc_1038EE9  +
mov al byte_104A3B0 +
cmp al 4 +
jnb loc_1038E9F  +
test al al +
jnz loc_1038EE9  +
mov eax dword_104A398 +
mov ecx dword_104A39C +
and eax edi +
and ecx esi +
or eax ecx +
jz loc_1038EE9  +
mov edx dword_104A3A0 +
mov eax edx +
and eax edi +
mov edi dword_104A3A4 +
mov ecx edi +
and ecx esi +
cmp eax edx +
jnz loc_1038EE9  +
cmp ecx edi +
jnz loc_1038EE9  +
push 80070057h  +
push offset dword_1039080  +
push dword_104A134  +
push dword_104A130  +
call sub_10379EB  +
mov eax 80070057h +
jmp loc_1039067  +
mov [eax] ecx +
mov eax [ebp+8] +
mov ecx [eax+10h] +
cmp ecx [eax+0Ch] +
jnb loc_1038FF5  +
mov ecx [ebp+0Ch] +
cmp [ebp-14h] ecx +
jnb loc_1038FF5  +
push dword ptr [eax+10h]  +
and dword ptr [ebp-4] 0 +
lea ecx [eax+14h] +
call sub_10068B5  +
mov ebx [eax] +
push offset dword_1039090  +
push dword_104A134  +
mov [ebp-1Ch] ebx +
push dword_104A130  +
call ds:EventEnabled  +
test al al +
jz loc_1038FB5  +
mov eax [ebx] +
lea ecx [ebp-18h] +
push ecx  +
push ebx  +
call dword ptr [eax+0Ch]  +
test eax eax +
jl loc_1038FB5  +
cmp dword_104A3AC 0 +
jz loc_1038FAC  +
mov al byte_104A3B0 +
cmp al 4 +
jnb loc_1038F63  +
test al al +
jnz loc_1038FAC  +
mov eax dword_104A398 +
mov ecx dword_104A39C +
and eax edi +
and ecx esi +
or eax ecx +
jz loc_1038FAC  +
mov eax dword_104A3A0 +
mov edx dword_104A3A4 +
mov ecx eax +
and ecx edi +
and edx esi +
cmp ecx eax +
jnz loc_1038FAC  +
cmp edx dword_104A3A4 +
jnz loc_1038FAC  +
push dword ptr [ebp-18h]  +
push offset dword_1039090  +
push dword_104A134  +
push dword_104A130  +
call sub_10263C4  +
push dword ptr [ebp-18h]  +
call ds:CoTaskMemFree  +
or dword ptr [ebp-4] 0FFFFFFFFh +
jmp loc_1038FD8  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov eax offset loc_1038FC5 +
retn   +
cmp dword ptr [ebp-20h] 0 +
mov edi 20000h +
mov esi 80000000h +
jl loc_1038FF5  +
mov ebx [ebp-1Ch] +
mov eax [ebx] +
push ebx  +
call dword ptr [eax+4]  +
mov eax [ebp+8] +
inc dword ptr [eax+10h]  +
mov ecx [ebp-14h] +
mov eax [ebp+10h] +
inc dword ptr [ebp-14h]  +
mov [eax+ecx*4] ebx +
jmp loc_1038EF5  +
mov ecx [ebp+14h] +
mov eax [ebp-14h] +
test ecx ecx +
jz loc_1039001  +
mov [ecx] eax +
xor ebx ebx +
cmp eax [ebp+0Ch] +
setnz bl  +
cmp dword_104A3AC 0 +
jz loc_1039065  +
mov al byte_104A3B0 +
cmp al 4 +
jnb loc_103901F  +
test al al +
jnz loc_1039065  +
mov eax dword_104A398 +
mov ecx dword_104A39C +
and eax edi +
and ecx esi +
or eax ecx +
jz loc_1039065  +
mov edx dword_104A3A0 +
mov eax edx +
and eax edi +
mov edi dword_104A3A4 +
mov ecx edi +
and ecx esi +
cmp eax edx +
jnz loc_1039065  +
cmp ecx edi +
jnz loc_1039065  +
push ebx  +
push offset dword_1039080  +
push dword_104A134  +
push dword_104A130  +
call sub_10379EB  +
mov eax ebx +
call sub_10015C0  +
retn 10h  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_1038B8D  +
mov dword ptr [esi] offset off_1001938 +
mov ecx dword_104A064 +
mov eax [ecx] +
call dword ptr [eax+4]  +
mov eax esi +
pop esi  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push offset off_10390E8  +
push ecx  +
call sub_10017D5  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+10h]  +
mov ecx [ebp+8] +
push dword ptr [ebp+0Ch]  +
call sub_10390CB  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_1001938 +
mov dword ptr [esi+4] 0C0000001h +
mov ecx dword_104A064 +
mov eax [ecx] +
call dword ptr [eax+8]  +
mov ecx esi +
pop esi  +
jmp loc_1038C4C  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1039121  +
test byte ptr [ebp+8] 1 +
jz loc_1039165  +
push esi  +
call off_104B7F0  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
and dword ptr [esi+8] 0 +
mov dword ptr [esi+4] offset off_1008904 +
lea ecx [esi+14h] +
mov dword ptr [esi] offset off_100C69C +
mov dword ptr [esi+4] offset off_10224F4 +
call sub_10033C0  +
and dword ptr [esi+18h] 0 +
and dword ptr [esi+1Ch] 0 +
and dword ptr [esi+20h] 0 +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
mov ecx [esi+14h] +
sub ecx 10h +
mov dword ptr [esi] offset off_100C69C +
mov dword ptr [esi+4] offset off_10224F4 +
call sub_1002990  +
mov dword ptr [esi+4] offset off_1008904 +
pop esi  +
retn   +
***
call sub_1001862  +
mov esi [ebp+8] +
xor edi edi +
cmp esi edi +
jnz loc_10391F2  +
mov eax 80004003h +
jmp loc_1039231  +
push 24h  +
mov [esi] edi +
mov dword ptr [ebp-14h] 8007000Eh +
mov [ebp-4] edi +
call off_104B7F4  +
cmp eax edi +
jz loc_1039214  +
push edi  +
mov ecx eax +
call sub_10390A5  +
jmp loc_1039225  +
xor eax eax +
jmp loc_1039225  +
mov eax offset loc_103921E +
retn   +
mov esi [ebp+8] +
xor edi edi +
mov eax edi +
cmp eax edi +
jz loc_103922C  +
mov [ebp-14h] edi +
mov [esi] eax +
mov eax [ebp-14h] +
call sub_10015C0  +
retn 4  +
***
call sub_1001862  +
cmp dword_104A3AC 0 +
jz loc_10392B1  +
mov al byte_104A3B0 +
cmp al 4 +
jnb loc_1039260  +
test al al +
jnz loc_10392B1  +
mov eax dword_104A398 +
mov ecx dword_104A39C +
mov edi 20000h +
mov esi 80000000h +
and eax edi +
and ecx esi +
or eax ecx +
jz loc_10392BB  +
mov edx dword_104A3A0 +
mov ebx dword_104A3A4 +
mov eax edx +
mov ecx ebx +
and eax edi +
and ecx esi +
cmp eax edx +
jnz loc_10392BB  +
cmp ecx ebx +
jnz loc_10392BB  +
push offset nullsub_6  +
push dword_104A134  +
push dword_104A130  +
call sub_100A01E  +
jmp loc_10392BB  +
mov esi 80000000h +
mov edi 20000h +
cmp dword ptr [ebp+0Ch] 0 +
jnz loc_103932B  +
cmp dword_104A3AC 0 +
jz loc_1039321  +
mov al byte_104A3B0 +
cmp al 4 +
jnb loc_10392D7  +
test al al +
jnz loc_1039321  +
mov eax dword_104A398 +
mov ecx dword_104A39C +
and eax edi +
and ecx esi +
or eax ecx +
jz loc_1039321  +
mov edx dword_104A3A0 +
mov eax edx +
and eax edi +
mov edi dword_104A3A4 +
mov ecx edi +
and ecx esi +
cmp eax edx +
jnz loc_1039321  +
cmp ecx edi +
jnz loc_1039321  +
push 80004003h  +
push offset dword_1039490  +
push dword_104A134  +
push dword_104A130  +
call sub_10379EB  +
mov eax 80004003h +
jmp loc_1039471  +
lea eax [ebp-1Ch] +
push eax  +
call sub_10391D6  +
mov ebx eax +
test ebx ebx +
jge loc_103939C  +
cmp dword_104A3AC 0 +
jz loc_1039395  +
mov al byte_104A3B0 +
cmp al 4 +
jnb loc_1039350  +
test al al +
jnz loc_1039395  +
mov eax dword_104A398 +
mov ecx dword_104A39C +
and eax edi +
and ecx esi +
or eax ecx +
jz loc_1039395  +
mov eax dword_104A3A0 +
mov ecx eax +
and ecx edi +
mov edi dword_104A3A4 +
mov edx edi +
and edx esi +
cmp ecx eax +
jnz loc_1039395  +
cmp edx edi +
jnz loc_1039395  +
push ebx  +
push offset dword_1039490  +
push dword_104A134  +
push dword_104A130  +
call sub_10379EB  +
mov eax ebx +
jmp loc_1039471  +
mov ebx [ebp-1Ch] +
mov eax [ebx] +
push ebx  +
call dword ptr [eax+4]  +
and dword ptr [ebp-18h] 0 +
mov eax [ebp+8] +
mov ecx [ebp-18h] +
cmp ecx [eax+0Ch] +
jnb loc_10393FB  +
and dword ptr [ebp-4] 0 +
push ecx  +
lea ecx [eax+14h] +
call sub_10068B5  +
push dword ptr [eax]  +
mov ecx ebx +
call sub_1009744  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov [ebp-14h] eax +
jmp loc_10393F0  +
mov eax [ebp-20h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov [ebp-14h] eax +
mov eax offset loc_10393E3 +
retn   +
mov ebx [ebp-1Ch] +
mov edi 20000h +
mov esi 80000000h +
cmp dword ptr [ebp-14h] 0 +
jl loc_103940B  +
inc dword ptr [ebp-18h]  +
jmp loc_10393A9  +
push dword ptr [ebp+0Ch]  +
mov eax [ebx] +
push offset dword_1022788  +
push ebx  +
call dword ptr [eax]  +
mov [ebp-14h] eax +
mov eax [ebx] +
push ebx  +
call dword ptr [eax+8]  +
cmp dword_104A3AC 0 +
jz loc_103946E  +
mov al byte_104A3B0 +
cmp al 4 +
jnb loc_1039427  +
test al al +
jnz loc_103946E  +
mov ecx dword_104A39C +
mov eax dword_104A398 +
and ecx esi +
and eax edi +
or eax ecx +
jz loc_103946E  +
mov eax dword_104A3A0 +
mov ecx eax +
and ecx edi +
mov edi dword_104A3A4 +
mov edx edi +
and edx esi +
cmp ecx eax +
jnz loc_103946E  +
cmp edx edi +
jnz loc_103946E  +
push dword ptr [ebp-14h]  +
push offset dword_1039490  +
push dword_104A134  +
push dword_104A130  +
call sub_10379EB  +
mov eax [ebp-14h] +
call sub_10015C0  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_C] +
xor edx edx +
sub esp 30h +
cmp ecx edx +
jz loc_10394D3  +
push esi  +
mov eax ecx +
push edi  +
lea edi [eax+2] +
mov si [eax] +
inc eax  +
inc eax  +
cmp si dx +
jnz loc_10394BD  +
sub eax edi +
sar eax 1 +
pop edi  +
lea eax [eax+eax+2] +
pop esi  +
jmp loc_10394D6  +
push 0Ah  +
pop eax  +
cmp ecx edx +
jnz loc_10394DF  +
mov ecx offset aNull +
push 4  +
mov [ebp+var_28] eax +
lea eax [ebp+arg_10] +
mov [ebp+var_20] eax +
pop eax  +
mov [ebp+var_18] eax +
mov [ebp+var_8] eax +
lea eax [ebp+var_30] +
push eax  +
push 3  +
push [ebp+arg_8]  +
mov [ebp+var_30] ecx +
push [ebp+arg_4]  +
lea ecx [ebp+arg_14] +
push [ebp+arg_0]  +
mov [ebp+var_2C] edx +
mov [ebp+var_24] edx +
mov [ebp+var_1C] edx +
mov [ebp+var_14] edx +
mov [ebp+var_10] ecx +
mov [ebp+var_C] edx +
mov [ebp+var_4] edx +
call ds:EventWrite  +
leave   +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_C] +
xor ecx ecx +
sub esp 40h +
cmp edx ecx +
jz loc_1039558  +
push esi  +
mov eax edx +
push edi  +
lea edi [eax+2] +
mov si [eax] +
inc eax  +
inc eax  +
cmp si cx +
jnz loc_1039542  +
sub eax edi +
sar eax 1 +
pop edi  +
lea eax [eax+eax+2] +
pop esi  +
jmp loc_103955B  +
push 0Ah  +
pop eax  +
cmp edx ecx +
jnz loc_1039564  +
mov edx offset aNull +
push 4  +
mov [ebp+var_38] eax +
lea eax [ebp+arg_10] +
mov [ebp+var_3C] ecx +
mov [ebp+var_34] ecx +
mov [ebp+var_30] eax +
pop eax  +
mov [ebp+var_2C] ecx +
mov [ebp+var_24] ecx +
mov [ebp+var_1C] ecx +
mov [ebp+var_14] ecx +
mov [ebp+var_C] ecx +
mov [ebp+var_4] ecx +
lea ecx [ebp+var_40] +
push ecx  +
push eax  +
push [ebp+arg_8]  +
mov [ebp+var_40] edx +
push [ebp+arg_4]  +
lea edx [ebp+arg_14] +
push [ebp+arg_0]  +
mov [ebp+var_20] edx +
lea edx [ebp+arg_18] +
mov [ebp+var_28] eax +
mov [ebp+var_18] eax +
mov [ebp+var_10] edx +
mov [ebp+var_8] eax +
call ds:EventWrite  +
leave   +
retn 1Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 30h +
push 4  +
lea eax [ebp+arg_C] +
mov [ebp+var_30] eax +
pop eax  +
mov [ebp+var_28] eax +
mov [ebp+var_18] eax +
mov [ebp+var_8] eax +
lea eax [ebp+var_30] +
push eax  +
push 3  +
push [ebp+arg_8]  +
xor ecx ecx +
push [ebp+arg_4]  +
lea edx [ebp+arg_10] +
push [ebp+arg_0]  +
mov [ebp+var_20] edx +
lea edx [ebp+arg_14] +
mov [ebp+var_2C] ecx +
mov [ebp+var_24] ecx +
mov [ebp+var_1C] ecx +
mov [ebp+var_14] ecx +
mov [ebp+var_10] edx +
mov [ebp+var_C] ecx +
mov [ebp+var_4] ecx +
call ds:EventWrite  +
leave   +
retn 18h  +
***
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
push ebx  +
push esi  +
mov esi ecx +
xor ebx ebx +
mov [ebp+var_2C] esi +
cmp [esi+4] ebx +
jz loc_103979C  +
lea eax [ebp+dwRevision] +
push eax  +
call sub_1006A80  +
test al al +
jnz loc_103964E  +
push 80004005h  +
call loc_1025B15  +
test [ebp+dwRevision] 8000h +
jz loc_103979C  +
lea eax [ebp+dwPrimaryGroupSize] +
push eax  +
push ebx  +
lea eax [ebp+dwOwnerSize] +
push eax  +
push ebx  +
lea eax [ebp+dwSaclSize] +
push eax  +
push ebx  +
lea eax [ebp+dwDaclSize] +
push eax  +
push ebx  +
lea eax [ebp+dwAbsoluteSecurityDescriptorSize] +
push eax  +
push ebx  +
push dword ptr [esi+4]  +
mov [ebp+dwSaclSize] ebx +
mov [ebp+dwDaclSize] ebx +
mov [ebp+dwPrimaryGroupSize] ebx +
mov [ebp+dwOwnerSize] ebx +
mov [ebp+dwAbsoluteSecurityDescriptorSize] ebx +
call ds:MakeAbsoluteSD  +
call ds:__imp_GetLastError  +
cmp eax 7Ah +
jz loc_103969C  +
call sub_10308E9  +
push [ebp+dwAbsoluteSecurityDescriptorSize]  +
mov esi ds:malloc +
call esi  +
pop ecx  +
mov [ebp+pAbsoluteSecurityDescriptor] eax +
cmp eax ebx +
jz loc_1039644  +
cmp [ebp+dwOwnerSize] ebx +
jz loc_10396BF  +
push [ebp+dwOwnerSize]  +
call esi  +
pop ecx  +
mov [ebp+pOwner] eax +
jmp loc_10396C2  +
mov [ebp+pOwner] ebx +
cmp [ebp+dwOwnerSize] ebx +
jz loc_10396D0  +
cmp [ebp+pOwner] ebx +
jz loc_1039644  +
cmp [ebp+dwPrimaryGroupSize] ebx +
jz loc_10396E0  +
push [ebp+dwPrimaryGroupSize]  +
call esi  +
pop ecx  +
mov [ebp+pPrimaryGroup] eax +
jmp loc_10396E3  +
mov [ebp+pPrimaryGroup] ebx +
cmp [ebp+dwPrimaryGroupSize] ebx +
jz loc_10396F1  +
cmp [ebp+pPrimaryGroup] ebx +
jz loc_1039644  +
cmp [ebp+dwDaclSize] ebx +
jz loc_1039701  +
push [ebp+dwDaclSize]  +
call esi  +
pop ecx  +
mov [ebp+pDacl] eax +
jmp loc_1039704  +
mov [ebp+pDacl] ebx +
cmp [ebp+dwDaclSize] ebx +
jz loc_1039712  +
cmp [ebp+pDacl] ebx +
jz loc_1039644  +
push edi  +
cmp [ebp+dwSaclSize] ebx +
jz loc_1039722  +
push [ebp+dwSaclSize]  +
call esi  +
pop ecx  +
mov edi eax +
jmp loc_1039724  +
xor edi edi +
cmp [ebp+dwSaclSize] ebx +
jz loc_1039731  +
cmp edi ebx +
jz loc_1039644  +
mov ebx [ebp+pAbsoluteSecurityDescriptor] +
mov esi [ebp+var_2C] +
lea eax [ebp+dwPrimaryGroupSize] +
push eax  +
push [ebp+pPrimaryGroup]  +
lea eax [ebp+dwOwnerSize] +
push eax  +
push [ebp+pOwner]  +
lea eax [ebp+dwSaclSize] +
push eax  +
push edi  +
lea eax [ebp+dwDaclSize] +
push eax  +
push [ebp+pDacl]  +
lea eax [ebp+dwAbsoluteSecurityDescriptorSize] +
push eax  +
push ebx  +
push dword ptr [esi+4]  +
call ds:MakeAbsoluteSD  +
test eax eax +
jnz loc_1039791  +
call sub_100F56E  +
mov esi ds:__imp_free +
push ebx  +
mov [ebp+var_2C] eax +
call esi  +
push [ebp+pOwner]  +
call esi  +
push [ebp+pPrimaryGroup]  +
call esi  +
push [ebp+pDacl]  +
call esi  +
push edi  +
call esi  +
add esp 14h +
push [ebp+var_2C]  +
jmp loc_1039649  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+4]  +
mov [esi+4] ebx +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_10397C4  +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_10397B4  +
sub eax edx +
sar eax 1 +
pop ebp  +
retn   +
xor eax eax +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_10397F4  +
mov edx [ecx+14h] +
cmp eax edx +
jz loc_10397F4  +
mov ecx eax +
mov eax [eax+50h] +
jmp loc_10397EC  +
mov ecx eax +
mov eax [ecx+50h] +
cmp eax edx +
jnz loc_10397E7  +
mov eax ecx +
jmp loc_10397F6  +
xor eax eax +
pop ebp  +
retn 4  +
***
jmp ds:CoRevertToSelf  +
***
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_1039857  +
mov edx [eax+34h] +
push esi  +
mov esi [edx+38h] +
mov [eax+34h] esi +
mov esi [edx+38h] +
cmp esi [ecx+14h] +
jz loc_1039831  +
mov [esi+3Ch] eax +
mov esi [eax+3Ch] +
mov [edx+3Ch] esi +
mov esi [eax+3Ch] +
cmp esi [ecx+14h] +
jnz loc_1039843  +
mov [ecx] edx +
jmp loc_1039850  +
cmp eax [esi+38h] +
jnz loc_103984D  +
mov [esi+38h] edx +
jmp loc_1039850  +
mov [esi+34h] edx +
mov [edx+38h] eax +
mov [eax+3Ch] edx +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jnz loc_1039876  +
push 80004005h  +
call loc_1025B15  +
mov edx [ebp+arg_4] +
test edx edx +
jz loc_103986C  +
push esi  +
lea esi [edx+54h] +
push edi  +
mov edi [esi] +
mov [eax+54h] edi +
mov edi [esi] +
mov esi edi +
cmp [edi+4Ch] edx +
jnz loc_1039895  +
mov [esi+4Ch] eax +
jmp loc_1039898  +
mov [esi+50h] eax +
mov esi [edx+50h] +
mov [eax+50h] esi +
mov esi [edx+4Ch] +
mov [eax+4Ch] esi +
mov esi [edx+48h] +
mov [eax+48h] esi +
mov esi [eax+50h] +
mov [esi+54h] eax +
mov esi [eax+4Ch] +
mov [esi+54h] eax +
pop edi  +
pop esi  +
cmp [ecx] edx +
jnz loc_10398BE  +
mov [ecx] eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov ebx ecx +
test esi esi +
jnz loc_10398E2  +
push 80004005h  +
call loc_1025B15  +
xor edi edi +
inc edi  +
jmp loc_10399E5  +
cmp [esi+48h] edi +
jnz loc_10399ED  +
mov eax [esi+54h] +
mov ecx [eax+4Ch] +
cmp esi ecx +
jnz loc_103996E  +
mov ecx [eax+50h] +
cmp dword ptr [ecx+48h] 0 +
jnz loc_1039920  +
mov eax [ecx+54h] +
mov [ecx+48h] edi +
and dword ptr [eax+48h] 0 +
push dword ptr [esi+54h]  +
mov ecx ebx +
call sub_100580C  +
mov eax [esi+54h] +
mov ecx [eax+50h] +
mov edx [ecx+4Ch] +
cmp [edx+48h] edi +
jnz loc_1039930  +
mov edx [ecx+50h] +
cmp [edx+48h] edi +
jz loc_103999E  +
mov edx [ecx+50h] +
cmp [edx+48h] edi +
jnz loc_1039950  +
mov eax [ecx+4Ch] +
mov [eax+48h] edi +
and dword ptr [ecx+48h] 0 +
push ecx  +
mov ecx ebx +
call sub_100512C  +
mov eax [esi+54h] +
mov ecx [eax+50h] +
mov eax [eax+48h] +
mov [ecx+48h] eax +
mov eax [esi+54h] +
mov [eax+48h] edi +
mov eax [ecx+50h] +
mov [eax+48h] edi +
push dword ptr [esi+54h]  +
mov ecx ebx +
call sub_100580C  +
jmp loc_10399E3  +
cmp dword ptr [ecx+48h] 0 +
jnz loc_103998E  +
mov eax [ecx+54h] +
mov [ecx+48h] edi +
and dword ptr [eax+48h] 0 +
push dword ptr [esi+54h]  +
mov ecx ebx +
call sub_100512C  +
mov eax [esi+54h] +
mov ecx [eax+4Ch] +
mov edx [ecx+50h] +
cmp [edx+48h] edi +
jnz loc_10399A7  +
mov edx [ecx+4Ch] +
cmp [edx+48h] edi +
jnz loc_10399A7  +
and dword ptr [ecx+48h] 0 +
mov esi [esi+54h] +
jmp loc_10399E5  +
mov edx [ecx+4Ch] +
cmp [edx+48h] edi +
jnz loc_10399C7  +
mov eax [ecx+50h] +
mov [eax+48h] edi +
and dword ptr [ecx+48h] 0 +
push ecx  +
mov ecx ebx +
call sub_100580C  +
mov eax [esi+54h] +
mov ecx [eax+4Ch] +
mov eax [eax+48h] +
mov [ecx+48h] eax +
mov eax [esi+54h] +
mov [eax+48h] edi +
mov eax [ecx+4Ch] +
mov [eax+48h] edi +
push dword ptr [esi+54h]  +
mov ecx ebx +
call sub_100512C  +
mov esi [ebx] +
cmp esi [ebx] +
jnz loc_10398EA  +
mov [esi+48h] edi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jnz loc_1039A12  +
push 80004005h  +
call loc_1025B15  +
mov edx [ebp+arg_4] +
test edx edx +
jz loc_1039A08  +
push esi  +
lea esi [edx+3Ch] +
push edi  +
mov edi [esi] +
mov [eax+3Ch] edi +
mov edi [esi] +
mov esi edi +
cmp [edi+34h] edx +
jnz loc_1039A31  +
mov [esi+34h] eax +
jmp loc_1039A34  +
mov [esi+38h] eax +
mov esi [edx+38h] +
mov [eax+38h] esi +
mov esi [edx+34h] +
mov [eax+34h] esi +
mov esi [edx+30h] +
mov [eax+30h] esi +
mov esi [eax+38h] +
mov [esi+3Ch] eax +
mov esi [eax+34h] +
mov [esi+3Ch] eax +
pop edi  +
pop esi  +
cmp [ecx] edx +
jnz loc_1039A5A  +
mov [ecx] eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov ebx ecx +
test esi esi +
jnz loc_1039A7E  +
push 80004005h  +
call loc_1025B15  +
xor edi edi +
inc edi  +
jmp loc_1039B81  +
cmp [esi+30h] edi +
jnz loc_1039B89  +
mov eax [esi+3Ch] +
mov ecx [eax+34h] +
cmp esi ecx +
jnz loc_1039B0A  +
mov ecx [eax+38h] +
cmp dword ptr [ecx+30h] 0 +
jnz loc_1039ABC  +
mov eax [ecx+3Ch] +
mov [ecx+30h] edi +
and dword ptr [eax+30h] 0 +
push dword ptr [esi+3Ch]  +
mov ecx ebx +
call sub_10060F9  +
mov eax [esi+3Ch] +
mov ecx [eax+38h] +
mov edx [ecx+34h] +
cmp [edx+30h] edi +
jnz loc_1039ACC  +
mov edx [ecx+38h] +
cmp [edx+30h] edi +
jz loc_1039B3A  +
mov edx [ecx+38h] +
cmp [edx+30h] edi +
jnz loc_1039AEC  +
mov eax [ecx+34h] +
mov [eax+30h] edi +
and dword ptr [ecx+30h] 0 +
push ecx  +
mov ecx ebx +
call sub_1039810  +
mov eax [esi+3Ch] +
mov ecx [eax+38h] +
mov eax [eax+30h] +
mov [ecx+30h] eax +
mov eax [esi+3Ch] +
mov [eax+30h] edi +
mov eax [ecx+38h] +
mov [eax+30h] edi +
push dword ptr [esi+3Ch]  +
mov ecx ebx +
call sub_10060F9  +
jmp loc_1039B7F  +
cmp dword ptr [ecx+30h] 0 +
jnz loc_1039B2A  +
mov eax [ecx+3Ch] +
mov [ecx+30h] edi +
and dword ptr [eax+30h] 0 +
push dword ptr [esi+3Ch]  +
mov ecx ebx +
call sub_1039810  +
mov eax [esi+3Ch] +
mov ecx [eax+34h] +
mov edx [ecx+38h] +
cmp [edx+30h] edi +
jnz loc_1039B43  +
mov edx [ecx+34h] +
cmp [edx+30h] edi +
jnz loc_1039B43  +
and dword ptr [ecx+30h] 0 +
mov esi [esi+3Ch] +
jmp loc_1039B81  +
mov edx [ecx+34h] +
cmp [edx+30h] edi +
jnz loc_1039B63  +
mov eax [ecx+38h] +
mov [eax+30h] edi +
and dword ptr [ecx+30h] 0 +
push ecx  +
mov ecx ebx +
call sub_10060F9  +
mov eax [esi+3Ch] +
mov ecx [eax+34h] +
mov eax [eax+30h] +
mov [ecx+30h] eax +
mov eax [esi+3Ch] +
mov [eax+30h] edi +
mov eax [ecx+34h] +
mov [eax+30h] edi +
push dword ptr [esi+3Ch]  +
mov ecx ebx +
call sub_1039810  +
mov esi [ebx] +
cmp esi [ebx] +
jnz loc_1039A86  +
mov [esi+30h] edi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov dword ptr [ecx] offset off_101909C +
jmp sub_1018143  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_101909C +
call sub_1018143  +
test byte ptr [ebp+8] 1 +
jz loc_1039BC8  +
push esi  +
call off_104B7F0  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov dword ptr [ecx] offset off_1009CE4 +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
test byte ptr [ebp+8] 1 +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_1009CE4 +
jz loc_1039BFB  +
push esi  +
call off_104B7F0  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
lea ecx [esi+6Ch] +
mov eax [ecx] +
call dword ptr [eax+8]  +
test al al +
lea eax [esi+90h] +
jnz loc_1039C24  +
lea eax [esi+0C4h] +
pop esi  +
retn   +
***
push dword ptr [ecx+18h]  +
push dword ptr [ecx+14h]  +
call ds:qsort  +
add esp 10h +
xor eax eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
push dword ptr [esi+4]  +
mov dword ptr [esi] offset off_1003608 +
call ds:__imp_free  +
test byte ptr [ebp+8] 1 +
pop ecx  +
jz loc_1039C6E  +
push esi  +
call off_104B7F0  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
jmp sub_10069CD  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov edi [esi] +
push edi  +
call sub_1016E5C  +
mov [esi] eax +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_1001862  +
mov esi [ebp+8] +
xor edi edi +
cmp esi edi +
jnz loc_1039CC7  +
mov eax 80004003h +
jmp loc_1039D06  +
push 24h  +
mov [esi] edi +
mov dword ptr [ebp-14h] 8007000Eh +
mov [ebp-4] edi +
call off_104B7F4  +
cmp eax edi +
jz loc_1039CE9  +
push edi  +
mov ecx eax +
call sub_102B77A  +
jmp loc_1039CFA  +
xor eax eax +
jmp loc_1039CFA  +
mov eax offset loc_1039CF3 +
retn   +
mov esi [ebp+8] +
xor edi edi +
mov eax edi +
cmp eax edi +
jz loc_1039D01  +
mov [ebp-14h] edi +
mov [esi] eax +
mov eax [ebp-14h] +
call sub_10015C0  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
test ecx ecx +
jbe loc_1039D2F  +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_1039D29  +
and dword ptr [eax] 0 +
add eax 4 +
dec ecx  +
jnz loc_1039D22  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_10069C0 +
call sub_10069CD  +
test byte ptr [ebp+8] 1 +
jz loc_1039D58  +
push esi  +
call off_104B7F0  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_1002A3A  +
mov esi [ebp+10h] +
push 3  +
push offset SourceName  +
lea ecx [ebp-0ECh] +
call sub_10103F1  +
and dword ptr [ebp-4] 0 +
lea eax [ebp-0ECh] +
push eax  +
lea ecx [ebp-0A2Ch] +
call sub_100A2FC  +
push dword ptr [ebp+8]  +
lea eax [ebp-50h] +
push offset aD  +
push 20h  +
push eax  +
mov byte ptr [ebp-4] 1 +
call sub_100A257  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp-90h] +
push offset a0xX  +
push 20h  +
push eax  +
call sub_100A257  +
mov esi [esi+4] +
push 0  +
push esi  +
lea eax [ebp-90h] +
push eax  +
lea eax [ebp-50h] +
push eax  +
lea eax [ebp-0A2Ch] +
push 0C00003FBh  +
push eax  +
call sub_1026388  +
add esp 38h +
lea ecx [ebp-0A2Ch] +
call sub_100C0D9  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-0ECh] +
call sub_1011F1B  +
call sub_1002A77  +
retn 0Ch  +
***
call sub_1001862  +
mov esi ecx +
push dword ptr [ebp+8]  +
xor ebx ebx +
lea ecx [ebp-18h] +
mov [ebp-4] ebx +
call sub_100883D  +
mov [ebp-14h] ebx +
lea eax [ebp-14h] +
push eax  +
push offset stru_1001EB4  +
push 15h  +
push ebx  +
push offset rclsid  +
call ds:CoCreateInstance  +
mov edi eax +
cmp edi ebx +
jnz loc_1039E95  +
mov [ebp+8] ebx +
mov eax [esi+10h] +
mov esi [esi+14h] +
push eax  +
push esi  +
lea eax [ebp+8] +
push eax  +
push dword ptr [ebp-14h]  +
mov byte ptr [ebp-4] 3 +
call sub_1016C29  +
mov edi eax +
cmp edi ebx +
jnz loc_1039E84  +
mov eax [ebp+8] +
push dword ptr [ebp-18h]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+2Ch]  +
mov edi eax +
mov eax [ebp+8] +
mov byte ptr [ebp-4] 2 +
cmp eax ebx +
jz loc_1039E95  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-14h] +
mov byte ptr [ebp-4] 1 +
cmp eax ebx +
jz loc_1039EA6  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
push dword ptr [ebp-18h]  +
call ds:SysFreeString  +
jmp loc_1039EC2  +
mov eax [ebp-1Ch] +
mov eax [eax] +
mov [ebp+8] eax +
mov eax offset loc_1039EBF +
retn   +
mov edi [ebp+8] +
mov eax edi +
call sub_10015C0  +
retn 4  +
***
call sub_10015E0  +
mov edi ecx +
push dword ptr [edi]  +
xor ebx ebx +
call sub_1007A64  +
mov [ebp-14h] eax +
test eax eax +
jz loc_1039F8D  +
and dword ptr [ebp-10h] 0 +
and dword ptr [ebp-4] 0 +
lea eax [ebp-18h] +
push eax  +
call sub_1039CAB  +
mov ebx eax +
test ebx ebx +
jl loc_1039F7C  +
mov esi [ebp-18h] +
mov eax [esi] +
lea ecx [ebp-10h] +
push ecx  +
push offset loc_1039FA8  +
push esi  +
call dword ptr [eax]  +
mov ebx eax +
test ebx ebx +
jl loc_1039F73  +
lea eax [ebp-14h] +
push eax  +
mov ecx edi +
call sub_10079B5  +
lea ecx [esi+4] +
mov edx [ecx] +
lea esi [eax+20h] +
push esi  +
push eax  +
lea eax [edi+1Ch] +
push eax  +
lea eax [edi+18h] +
push eax  +
call dword ptr [edx]  +
mov ebx eax +
test ebx ebx +
jl loc_1039F7C  +
cmp ebx 1 +
jnz loc_1039F4F  +
xor ebx ebx +
jmp loc_1039F5A  +
push dword ptr [ebp-10h]  +
mov ecx [ebp+8] +
call sub_1009744  +
mov eax [ebp-10h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
test eax eax +
jz loc_1039F6B  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
cmp dword ptr [ebp-14h] 0 +
jz loc_1039F8D  +
jmp loc_1039EF3  +
mov eax [esi] +
push 1  +
mov ecx esi +
call dword ptr [eax+1Ch]  +
mov eax [ebp-10h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
test eax eax +
jz loc_1039F8D  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
cmp dword ptr [ebp+0Ch] 0 +
jz loc_1039F9B  +
mov ecx [ebp+8] +
call sub_1039C2B  +
mov eax ebx +
call sub_10015C0  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
push dword ptr [eax]  +
mov ecx [ebp+arg_0] +
call sub_100424B  +
neg eax  +
sbb eax eax +
neg eax  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
mov edi [ebp+arg_4] +
test edi edi +
jbe loc_103A001  +
push esi  +
mov esi [ebp+arg_0] +
test esi esi +
jz loc_1039FFA  +
mov ecx esi +
call sub_10033C0  +
add esi 4 +
dec edi  +
jnz loc_1039FEF  +
pop esi  +
pop edi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push offset asc_103A090  +
mov esi ecx +
call sub_100E78D  +
cmp dword ptr [esi+0Ch] 0 +
pop ecx  +
pop esi  +
mov eax offset aInclude_0 +
jnz loc_103A02F  +
mov eax offset aExclude +
mov ecx [ebp+arg_0] +
push dword ptr [ecx+14h]  +
push eax  +
push offset aUrlSS  +
call sub_100E78D  +
push offset dword_100A5E8  +
call sub_100E78D  +
add esp 10h +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
push edi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_10056D6  +
mov [ebp+var_4] eax +
mov ecx esi +
test eax eax +
jnz loc_103A12D  +
push [ebp+arg_0]  +
call sub_10182FA  +
mov [ebp+var_4] eax +
mov ecx esi +
test eax eax +
jz loc_103A138  +
lea eax [ebp+var_4] +
push eax  +
call sub_1039C8A  +
jmp loc_103A15E  +
push dword ptr [esi]  +
call sub_10397CD  +
mov [ebp+var_4] eax +
jmp loc_103A15E  +
lea eax [ebp+var_4] +
push eax  +
mov ecx esi +
call sub_1039C8A  +
mov ecx [ebp+arg_0] +
mov edi eax +
push edi  +
call sub_1007D37  +
test eax eax +
jnz loc_103A16C  +
cmp [ebp+var_4] 0 +
jnz loc_103A144  +
xor eax eax +
pop edi  +
pop esi  +
leave   +
retn 4  +
mov eax edi +
jmp loc_103A166  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
push edi  +
mov esi offset dword_103A190 +
mov edi eax +
movs   +
movs   +
movs   +
movs   +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov esi ecx +
test edi edi +
jz loc_103A224  +
lea eax [esi+4] +
push eax  +
lea eax [edi+4] +
push eax  +
call sub_1039FBD  +
test al al +
jnz loc_103A224  +
lea eax [esi+8] +
push eax  +
lea eax [edi+8] +
push eax  +
call sub_1039FBD  +
test al al +
jnz loc_103A224  +
lea eax [esi+0Ch] +
push eax  +
lea eax [edi+0Ch] +
push eax  +
call sub_1039FBD  +
test al al +
jnz loc_103A224  +
mov eax [edi+10h] +
cmp eax [esi+10h] +
jnz loc_103A224  +
mov eax [edi+14h] +
cmp eax [esi+14h] +
jnz loc_103A224  +
mov eax [edi+18h] +
cmp eax [esi+18h] +
jnz loc_103A224  +
mov eax [edi+1Ch] +
cmp eax [esi+1Ch] +
jnz loc_103A224  +
mov eax [edi+20h] +
cmp eax [esi+20h] +
jnz loc_103A224  +
mov eax [edi+24h] +
cmp eax [esi+24h] +
jnz loc_103A224  +
mov eax [edi+28h] +
cmp eax [esi+28h] +
jnz loc_103A224  +
mov al 1 +
jmp loc_103A226  +
xor al al +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push 0  +
push offset asc_103A2B8  +
mov ecx esi +
call sub_1016D5E  +
cmp eax 0FFFFFFFFh +
jnz loc_103A28A  +
push 0  +
push offset asc_103A2AC  +
mov ecx esi +
call sub_1016D5E  +
cmp eax 0FFFFFFFFh +
jnz loc_103A28A  +
push 0  +
push offset asc_103A2A0  +
mov ecx esi +
call sub_1016D5E  +
cmp eax 0FFFFFFFFh +
jnz loc_103A28A  +
push 0  +
push offset asc_103A294  +
mov ecx esi +
call sub_1016D5E  +
cmp eax 0FFFFFFFFh +
jnz loc_103A28A  +
xor eax eax +
jmp loc_103A28D  +
xor eax eax +
inc eax  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1018166  +
test byte ptr [ebp+8] 1 +
jz loc_103A2E3  +
push esi  +
call off_104B7F0  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1005D67  +
test byte ptr [ebp+8] 1 +
jz loc_103A309  +
push esi  +
call off_104B7F0  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1005D49  +
test byte ptr [ebp+8] 1 +
jz loc_103A32F  +
push esi  +
call off_104B7F0  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov ax [ebp+arg_0] +
push ebx  +
mov ebx ecx +
xor ecx ecx +
mov [ebp+var_8] ecx +
cmp ax [ebp+arg_4] +
jz loc_103A3A5  +
mov eax [ebx] +
push edi  +
mov edi [eax-0Ch] +
cmp edi ecx +
mov [ebp+var_1] cl +
jle loc_103A3A4  +
push esi  +
lea esi [ecx+ecx] +
mov cx [ebp+arg_0] +
cmp [esi+eax] cx +
jnz loc_103A38C  +
cmp [ebp+var_1] 0 +
jnz loc_103A381  +
push edi  +
mov ecx ebx +
mov [ebp+var_1] 1 +
call sub_1003122  +
mov cx [ebp+arg_4] +
inc [ebp+var_8]  +
mov [esi+eax] cx +
lea ecx [esi+2] +
sar ecx 1 +
cmp ecx edi +
jl loc_103A362  +
cmp [ebp+var_1] 0 +
pop esi  +
jz loc_103A3A4  +
push edi  +
mov ecx ebx +
call sub_10032EF  +
pop edi  +
mov eax [ebp+var_8] +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 24h +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
mov [ebp+var_18] esi +
call sub_10397A5  +
pop ecx  +
mov [ebp+var_C] eax +
test eax eax +
jz loc_103A502  +
push edi  +
push [ebp+arg_4]  +
call sub_10397A5  +
mov esi [esi] +
and [ebp+var_4] 0 +
mov [ebp+var_8] eax +
mov eax [esi-0Ch] +
lea edi [esi+eax*2] +
pop ecx  +
cmp esi edi +
jnb loc_103A4FE  +
push ebx  +
mov ebx ds:wcsstr +
jmp loc_103A407  +
mov ecx [ebp+var_C] +
inc [ebp+var_4]  +
lea esi [eax+ecx*2] +
push [ebp+arg_0]  +
push esi  +
call ebx  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_103A3FE  +
push esi  +
call sub_10397A5  +
lea esi [esi+eax*2+2] +
pop ecx  +
cmp esi edi +
jb loc_103A407  +
cmp [ebp+var_4] 0 +
jle loc_103A4FD  +
mov esi [ebp+var_8] +
sub esi [ebp+var_C] +
mov eax [ebp+var_18] +
imul esi [ebp+var_4] +
mov eax [eax] +
mov edi [eax-0Ch] +
add esi edi +
cmp esi edi +
mov [ebp+var_14] edi +
mov [ebp+var_20] esi +
mov eax esi +
jg loc_103A44E  +
mov eax edi +
mov ecx [ebp+var_18] +
push eax  +
call sub_1003122  +
lea ecx [eax+edi*2] +
mov [ebp+var_1C] eax +
mov [ebp+var_24] ecx +
cmp eax ecx +
jmp loc_103A4EB  +
push [ebp+arg_0]  +
push [ebp+var_10]  +
call ebx  +
mov edi eax +
pop ecx  +
pop ecx  +
test edi edi +
jz loc_103A4DA  +
mov esi [ebp+var_14] +
mov edx [ebp+var_C] +
mov eax edi +
sub eax [ebp+var_1C] +
sar eax 1 +
sub esi eax +
mov eax [ebp+var_8] +
sub esi edx +
lea ecx [esi+esi] +
push ecx  +
lea edx [edi+edx*2] +
push edx  +
add eax eax +
add eax edi +
push ecx  +
push eax  +
mov [ebp+var_10] eax +
call sub_1003CAD  +
mov eax [ebp+var_8] +
add eax eax +
push eax  +
push [ebp+arg_4]  +
push eax  +
push edi  +
call sub_1006B30  +
mov ecx [ebp+var_8] +
mov eax [ebp+var_10] +
push [ebp+arg_0]  +
add esi ecx +
sub ecx [ebp+var_C] +
xor edx edx +
add [ebp+var_14] ecx +
push eax  +
mov [ebp+var_10] eax +
mov [edi+esi*2] dx +
call ebx  +
mov edi eax +
add esp 28h +
test edi edi +
jnz loc_103A477  +
mov esi [ebp+var_20] +
mov edi [ebp+var_10] +
push edi  +
call sub_10397A5  +
lea eax [edi+eax*2+2] +
cmp eax [ebp+var_24] +
pop ecx  +
mov [ebp+var_10] eax +
jb loc_103A467  +
mov ecx [ebp+var_18] +
push esi  +
call sub_10032EF  +
pop ebx  +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_4] +
push ebx  +
push esi  +
mov esi ecx +
mov ecx [ebp+arg_0] +
lea ebx [ecx+edx] +
push edi  +
cmp ebx ecx +
jb loc_103A567  +
cmp ebx edx +
jb loc_103A567  +
mov eax [esi+4] +
cmp ebx eax +
ja loc_103A567  +
sub eax ebx +
mov [ebp+arg_0] eax +
mov eax [esi] +
mov edi ecx +
shl edi 2 +
push edx  +
add eax edi +
push eax  +
call sub_1005C65  +
cmp [ebp+arg_0] 0 +
jbe loc_103A55A  +
mov eax [esi] +
push [ebp+arg_0]  +
lea ecx [eax+ebx*4] +
push ecx  +
add eax edi +
push eax  +
call sub_10050DB  +
mov eax [ebp+arg_4] +
sub [esi+4] eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
push 80070057h  +
call loc_1025B15  +
int 3  +
nop   +
nop   +
nop   +
nop   +
nop   +
mov edi edi +
push ebp  +
mov ebp esp +
push 1  +
push [ebp+arg_0]  +
add ecx 10h +
call sub_103A50C  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ecx] +
mov eax [eax-0Ch] +
sub eax [ebp+arg_4] +
and [ebp+var_4] 0 +
push eax  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_10178AE  +
mov eax [ebp+arg_0] +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1018143  +
test byte ptr [ebp+8] 1 +
jz loc_103A5D6  +
push esi  +
call off_104B7F0  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
lea ecx [esi+4] +
mov eax [ecx] +
call dword ptr [eax+8]  +
test al al +
jnz loc_103A603  +
lea ecx [esi+38h] +
mov eax [ecx] +
call dword ptr [eax+8]  +
test al al +
jnz loc_103A603  +
xor eax eax +
pop esi  +
retn   +
***
xor eax eax +
inc eax  +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
lea ecx [esi+4] +
mov eax [ecx] +
call dword ptr [eax+14h]  +
lea ecx [esi+38h] +
mov eax [ecx] +
pop esi  +
jmp dword ptr [eax+14h]  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1018106  +
test byte ptr [ebp+8] 1 +
jz loc_103A642  +
push esi  +
call off_104B7F0  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push 1  +
push dword ptr [ebp+18h]  +
mov esi ecx +
push dword ptr [ebp+10h]  +
lea ecx [esi+4] +
push dword ptr [ebp+8]  +
mov eax [ecx] +
call dword ptr [eax+20h]  +
mov eax [ebp+14h] +
mov ecx [eax] +
cmp dword ptr [ecx-0Ch] 0 +
jg loc_103A677  +
mov eax [ebp+10h] +
push 0  +
push dword ptr [ebp+18h]  +
lea ecx [esi+38h] +
mov edx [ecx] +
push eax  +
push dword ptr [ebp+0Ch]  +
call dword ptr [edx+20h]  +
pop esi  +
pop ebp  +
retn 14h  +
***
mov edi edi +
push esi  +
mov esi ecx +
lea ecx [esi+6Ch] +
mov eax [ecx] +
call dword ptr [eax+8]  +
test al al +
jnz loc_103A6B6  +
lea ecx [esi+0A0h] +
mov eax [ecx] +
call dword ptr [eax+8]  +
test al al +
jnz loc_103A6B6  +
xor eax eax +
pop esi  +
retn   +
***
xor eax eax +
inc eax  +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
lea ecx [esi+6Ch] +
mov eax [ecx] +
call dword ptr [eax+14h]  +
lea ecx [esi+0A0h] +
mov eax [ecx] +
pop esi  +
jmp dword ptr [eax+14h]  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_10180B8  +
test byte ptr [ebp+8] 1 +
jz loc_103A6F8  +
push esi  +
call off_104B7F0  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_10015E0  +
mov esi ecx +
push dword ptr [ebp+8]  +
lea ecx [ebp-2Ch] +
call sub_1007A16  +
and dword ptr [ebp-4] 0 +
lea eax [ebp-2Ch] +
push eax  +
mov ecx esi +
call sub_10189B2  +
xor esi esi +
test eax eax +
jnz loc_103A744  +
lea ecx [ebp-2Ch] +
call sub_1003B4C  +
mov eax esi +
call sub_10015C0  +
retn 4  +
inc esi  +
jmp loc_103A732  +
***
call sub_10015E0  +
mov esi ecx +
push dword ptr [ebp+8]  +
lea ecx [ebp-2Ch] +
call sub_1007A16  +
and dword ptr [ebp-4] 0 +
lea eax [ebp-2Ch] +
push eax  +
mov ecx esi +
call sub_103A101  +
xor esi esi +
test eax eax +
jnz loc_103A78C  +
lea ecx [ebp-2Ch] +
call sub_1003B4C  +
mov eax esi +
call sub_10015C0  +
retn 4  +
inc esi  +
jmp loc_103A77A  +
***
call sub_10015E0  +
mov esi ecx +
push dword ptr [ebp+8]  +
lea ecx [ebp-2Ch] +
call sub_1007A16  +
and dword ptr [ebp-4] 0 +
push eax  +
mov ecx esi +
call sub_10189B2  +
lea ecx [ebp-2Ch] +
mov esi eax +
call sub_1003B4C  +
mov eax esi +
call sub_10015C0  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov edi ecx +
test esi esi +
jnz loc_103A7E6  +
xor al al +
jmp loc_103A861  +
push ebx  +
mov ebx [edi+14h] +
cmp [esi+34h] ebx +
jz loc_103A7FC  +
cmp [esi+38h] ebx +
jz loc_103A7FC  +
push esi  +
call sub_1008EFE  +
mov esi eax +
mov ecx [esi+34h] +
cmp ecx ebx +
pop ebx  +
jnz loc_103A807  +
mov ecx [esi+38h] +
mov eax [esi+3Ch] +
mov [ecx+3Ch] eax +
mov eax [esi+3Ch] +
cmp eax [edi+14h] +
jnz loc_103A819  +
mov [edi] ecx +
jmp loc_103A826  +
cmp esi [eax+34h] +
jnz loc_103A823  +
mov [eax+34h] ecx +
jmp loc_103A826  +
mov [eax+38h] ecx +
cmp dword ptr [esi+30h] 1 +
jnz loc_103A834  +
push ecx  +
mov ecx edi +
call sub_1039A63  +
cmp esi [ebp+arg_0] +
jz loc_103A844  +
push [ebp+arg_0]  +
mov ecx edi +
push esi  +
call sub_10399FC  +
mov eax [edi] +
test eax eax +
jz loc_103A855  +
add eax 3Ch +
push eax  +
mov ecx edi +
call sub_1005E52  +
push [ebp+arg_0]  +
mov ecx edi +
call sub_10045BF  +
mov al 1 +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
mov edi [ebp+arg_4] +
test edi edi +
jbe loc_103A88F  +
push esi  +
mov esi [ebp+arg_0] +
test esi esi +
jz loc_103A888  +
mov ecx esi +
call sub_1005416  +
add esi 20h +
dec edi  +
jnz loc_103A87D  +
pop esi  +
pop edi  +
pop ebp  +
retn 8  +
***
call sub_10015E0  +
mov esi ecx +
mov [ebp-10h] esi +
call sub_1004292  +
mov [ebp-14h] esi +
and dword ptr [ebp-4] 0 +
test esi esi +
jz loc_103A8C4  +
push dword ptr [ebp+8]  +
mov ecx esi +
call sub_1007895  +
mov eax esi +
call sub_10015C0  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1007488  +
test byte ptr [ebp+8] 1 +
jz loc_103A8ED  +
push esi  +
call off_104B7F0  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_1001862  +
cmp dword_104A3AC 0 +
jz loc_103A97D  +
mov al byte_104A3B0 +
cmp al 4 +
jnb loc_103A91B  +
test al al +
jnz loc_103A97D  +
mov ebx dword_104A39C +
mov eax dword_104A398 +
mov edi 20000h +
mov ecx ebx +
mov esi 80000000h +
and eax edi +
and ecx esi +
or eax ecx +
jz loc_103A98D  +
mov edx dword_104A3A0 +
mov ecx dword_104A3A4 +
mov eax edx +
and eax edi +
and ecx esi +
cmp eax edx +
jnz loc_103A98D  +
cmp ecx dword_104A3A4 +
jnz loc_103A98D  +
mov eax [ebp+0Ch] +
test eax eax +
jnz loc_103A964  +
mov eax offset word_100348C +
push eax  +
push offset dword_103AB88  +
push dword_104A134  +
push dword_104A130  +
call sub_10263C4  +
jmp loc_103A987  +
mov esi 80000000h +
mov edi 20000h +
mov ebx dword_104A39C +
cmp dword ptr [ebp+10h] 0 +
jnz loc_103A9F9  +
cmp dword_104A3AC 0 +
jz loc_103A9EF  +
mov al byte_104A3B0 +
cmp al 4 +
jnb loc_103A9A9  +
test al al +
jnz loc_103A9EF  +
mov eax dword_104A398 +
and eax edi +
and ebx esi +
or eax ebx +
jz loc_103A9EF  +
mov edx dword_104A3A0 +
mov eax edx +
and eax edi +
mov edi dword_104A3A4 +
mov ecx edi +
and ecx esi +
cmp eax edx +
jnz loc_103A9EF  +
cmp ecx edi +
jnz loc_103A9EF  +
push 0  +
push 80004003h  +
push offset dword_103AB98  +
push dword_104A134  +
push dword_104A130  +
call sub_102B7A7  +
mov eax 80004003h +
jmp loc_103AB7B  +
push dword ptr [ebp+0Ch]  +
call sub_100242C  +
mov [ebp-14h] eax +
test eax eax +
jge loc_103AA62  +
cmp dword_104A3AC 0 +
jz loc_103AB78  +
mov al byte_104A3B0 +
cmp al 4 +
jnb loc_103AA26  +
test al al +
jnz loc_103AB78  +
mov eax dword_104A398 +
and eax edi +
and ebx esi +
or eax ebx +
jz loc_103AB78  +
mov ecx dword_104A3A0 +
mov eax ecx +
and eax edi +
mov edi dword_104A3A4 +
mov edx edi +
and edx esi +
cmp eax ecx +
jnz loc_103AB78  +
cmp edx edi +
jnz loc_103AB78  +
push 0  +
jmp loc_103AB5F  +
mov ecx [ebp+8] +
call sub_1003689  +
xor edx edx +
cmp eax edx +
mov [ebp-14h] eax +
jge loc_103AACB  +
cmp dword_104A3AC edx +
jz loc_103AB78  +
mov al byte_104A3B0 +
cmp al 4 +
jnb loc_103AA90  +
test al al +
jnz loc_103AB78  +
mov eax dword_104A398 +
and eax edi +
and ebx esi +
or eax ebx +
jz loc_103AB78  +
mov ecx dword_104A3A0 +
mov ebx dword_104A3A4 +
mov eax ecx +
and eax edi +
mov edi ebx +
and edi esi +
cmp eax ecx +
jnz loc_103AB78  +
cmp edi ebx +
jnz loc_103AB78  +
push edx  +
jmp loc_103AB5F  +
push dword ptr [ebp+0Ch]  +
lea ecx [ebp+0Ch] +
mov [ebp-4] edx +
call sub_10035A2  +
mov eax [ebp+8] +
mov ecx [eax+3Ch] +
lea eax [ebp+0Ch] +
push eax  +
mov byte ptr [ebp-4] 1 +
call sub_103A704  +
mov ecx [ebp+10h] +
mov [ecx] eax +
mov ecx [ebp+0Ch] +
add ecx 0FFFFFFF0h +
call sub_1002990  +
jmp loc_103AB16  +
mov eax [ebp-18h] +
mov eax [eax] +
mov [ebp-14h] eax +
mov eax offset loc_103AB0C +
retn   +
mov edi 20000h +
mov esi 80000000h +
cmp dword_104A3AC 0 +
jz loc_103AB78  +
mov al byte_104A3B0 +
cmp al 4 +
jnb loc_103AB2C  +
test al al +
jnz loc_103AB78  +
mov eax dword_104A398 +
mov ecx dword_104A39C +
and eax edi +
and ecx esi +
or eax ecx +
jz loc_103AB78  +
mov eax dword_104A3A0 +
mov ecx eax +
and ecx edi +
mov edi dword_104A3A4 +
mov edx edi +
and edx esi +
cmp ecx eax +
jnz loc_103AB78  +
cmp edx edi +
jnz loc_103AB78  +
mov eax [ebp+10h] +
push dword ptr [eax]  +
push dword ptr [ebp-14h]  +
push offset dword_103AB98  +
push dword_104A134  +
push dword_104A130  +
call sub_102B7A7  +
mov eax [ebp-14h] +
call sub_10015C0  +
retn 0Ch  +
***
call sub_1001862  +
cmp dword_104A3AC 0 +
jz loc_103AC31  +
mov al byte_104A3B0 +
cmp al 4 +
jnb loc_103ABCF  +
test al al +
jnz loc_103AC31  +
mov ebx dword_104A39C +
mov eax dword_104A398 +
mov edi 20000h +
mov ecx ebx +
mov esi 80000000h +
and eax edi +
and ecx esi +
or eax ecx +
jz loc_103AC41  +
mov edx dword_104A3A0 +
mov ecx dword_104A3A4 +
mov eax edx +
and eax edi +
and ecx esi +
cmp eax edx +
jnz loc_103AC41  +
cmp ecx dword_104A3A4 +
jnz loc_103AC41  +
mov eax [ebp+0Ch] +
test eax eax +
jnz loc_103AC18  +
mov eax offset word_100348C +
push eax  +
push offset dword_103AE38  +
push dword_104A134  +
push dword_104A130  +
call sub_10263C4  +
jmp loc_103AC3B  +
mov esi 80000000h +
mov edi 20000h +
mov ebx dword_104A39C +
cmp dword ptr [ebp+10h] 0 +
jnz loc_103ACAD  +
cmp dword_104A3AC 0 +
jz loc_103ACA3  +
mov al byte_104A3B0 +
cmp al 4 +
jnb loc_103AC5D  +
test al al +
jnz loc_103ACA3  +
mov eax dword_104A398 +
and eax edi +
and ebx esi +
or eax ebx +
jz loc_103ACA3  +
mov edx dword_104A3A0 +
mov eax edx +
and eax edi +
mov edi dword_104A3A4 +
mov ecx edi +
and ecx esi +
cmp eax edx +
jnz loc_103ACA3  +
cmp ecx edi +
jnz loc_103ACA3  +
push 0  +
push 80004003h  +
push offset dword_103AE48  +
push dword_104A134  +
push dword_104A130  +
call sub_102B7A7  +
mov eax 80004003h +
jmp loc_103AE2F  +
push dword ptr [ebp+0Ch]  +
call sub_100242C  +
mov [ebp-14h] eax +
test eax eax +
jge loc_103AD16  +
cmp dword_104A3AC 0 +
jz loc_103AE2C  +
mov al byte_104A3B0 +
cmp al 4 +
jnb loc_103ACDA  +
test al al +
jnz loc_103AE2C  +
mov eax dword_104A398 +
and eax edi +
and ebx esi +
or eax ebx +
jz loc_103AE2C  +
mov ecx dword_104A3A0 +
mov eax ecx +
and eax edi +
mov edi dword_104A3A4 +
mov edx edi +
and edx esi +
cmp eax ecx +
jnz loc_103AE2C  +
cmp edx edi +
jnz loc_103AE2C  +
push 0  +
jmp loc_103AE13  +
mov ecx [ebp+8] +
call sub_1003689  +
xor edx edx +
cmp eax edx +
mov [ebp-14h] eax +
jge loc_103AD7F  +
cmp dword_104A3AC edx +
jz loc_103AE2C  +
mov al byte_104A3B0 +
cmp al 4 +
jnb loc_103AD44  +
test al al +
jnz loc_103AE2C  +
mov eax dword_104A398 +
and eax edi +
and ebx esi +
or eax ebx +
jz loc_103AE2C  +
mov ecx dword_104A3A0 +
mov ebx dword_104A3A4 +
mov eax ecx +
and eax edi +
mov edi ebx +
and edi esi +
cmp eax ecx +
jnz loc_103AE2C  +
cmp edi ebx +
jnz loc_103AE2C  +
push edx  +
jmp loc_103AE13  +
push dword ptr [ebp+0Ch]  +
lea ecx [ebp+0Ch] +
mov [ebp-4] edx +
call sub_10035A2  +
mov eax [ebp+8] +
mov ecx [eax+3Ch] +
lea eax [ebp+0Ch] +
push eax  +
mov byte ptr [ebp-4] 1 +
call sub_103A74C  +
mov ecx [ebp+10h] +
mov [ecx] eax +
mov ecx [ebp+0Ch] +
add ecx 0FFFFFFF0h +
call sub_1002990  +
jmp loc_103ADCA  +
mov eax [ebp-18h] +
mov eax [eax] +
mov [ebp-14h] eax +
mov eax offset loc_103ADC0 +
retn   +
mov edi 20000h +
mov esi 80000000h +
cmp dword_104A3AC 0 +
jz loc_103AE2C  +
mov al byte_104A3B0 +
cmp al 4 +
jnb loc_103ADE0  +
test al al +
jnz loc_103AE2C  +
mov eax dword_104A398 +
mov ecx dword_104A39C +
and eax edi +
and ecx esi +
or eax ecx +
jz loc_103AE2C  +
mov eax dword_104A3A0 +
mov ecx eax +
and ecx edi +
mov edi dword_104A3A4 +
mov edx edi +
and edx esi +
cmp ecx eax +
jnz loc_103AE2C  +
cmp edx edi +
jnz loc_103AE2C  +
mov eax [ebp+10h] +
push dword ptr [eax]  +
push dword ptr [ebp-14h]  +
push offset dword_103AE48  +
push dword_104A134  +
push dword_104A130  +
call sub_102B7A7  +
mov eax [ebp-14h] +
call sub_10015C0  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_1007106  +
test eax eax +
jz loc_103AE7D  +
push eax  +
mov ecx esi +
call sub_103A7D2  +
mov al 1 +
jmp loc_103AE7F  +
xor al al +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_1001862  +
mov edi [ebp+8] +
xor ebx ebx +
push edi  +
mov [ebp-14h] ebx +
mov [ebp-4] ebx +
call sub_103A231  +
test eax eax +
jnz loc_103AEBB  +
push dword ptr [edi]  +
mov ecx [ebp+10h] +
call sub_1015DF5  +
xor eax eax +
jmp loc_103AFC0  +
push ebx  +
push 7Bh  +
mov ecx edi +
call sub_1012F38  +
mov esi eax +
mov [ebp-20h] esi +
cmp esi 0FFFFFFFFh +
jz loc_103AFBB  +
mov eax [edi] +
mov eax [eax-0Ch] +
lea ecx [esi+3] +
cmp ecx eax +
jge loc_103AFBB  +
lea eax [esi+1] +
push eax  +
mov ecx edi +
call sub_1004428  +
movzx eax ax +
cmp ax 2Ah +
jnz loc_103AFBB  +
mov eax [ebp+0Ch] +
cmp ebx [eax+4] +
jnb loc_103AFB6  +
push offset dword_104A104  +
lea ecx [ebp+8] +
call sub_1003060  +
push esi  +
lea eax [ebp-18h] +
push eax  +
mov ecx edi +
mov byte ptr [ebp-4] 1 +
call sub_10079D6  +
push eax  +
lea ecx [ebp+8] +
mov byte ptr [ebp-4] 2 +
call sub_1003FBC  +
mov ecx [ebp-18h] +
add ecx 0FFFFFFF0h +
mov byte ptr [ebp-4] 1 +
call sub_1002990  +
mov ecx [ebp+0Ch] +
push ebx  +
call sub_10068B5  +
mov eax [eax] +
push dword ptr [eax-0Ch]  +
lea ecx [ebp+8] +
push eax  +
call sub_1012E75  +
lea eax [esi+3] +
push eax  +
lea eax [ebp-1Ch] +
push eax  +
mov ecx edi +
call sub_103A592  +
mov eax [eax] +
push dword ptr [eax-0Ch]  +
lea ecx [ebp+8] +
push eax  +
mov byte ptr [ebp-4] 3 +
call sub_1012E75  +
mov ecx [ebp-1Ch] +
add ecx 0FFFFFFF0h +
mov byte ptr [ebp-4] 1 +
call sub_1002990  +
mov esi [ebp+8] +
mov ecx [ebp+10h] +
push esi  +
call sub_1015DF5  +
lea ecx [esi-10h] +
mov byte ptr [ebp-4] 0 +
call sub_1002990  +
mov esi [ebp-20h] +
inc ebx  +
jmp loc_103AEFB  +
mov eax [ebp-24h] +
mov eax [eax] +
mov [ebp-14h] eax +
mov eax offset loc_103AFB6 +
retn   +
mov eax [ebp-14h] +
jmp loc_103AFC0  +
mov eax 80070057h +
call sub_10015C0  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov edi ecx +
test esi esi +
jnz loc_103AFE1  +
xor al al +
jmp loc_103B05C  +
push ebx  +
mov ebx [edi+14h] +
cmp [esi+4Ch] ebx +
jz loc_103AFF7  +
cmp [esi+50h] ebx +
jz loc_103AFF7  +
push esi  +
call sub_1007AB2  +
mov esi eax +
mov ecx [esi+4Ch] +
cmp ecx ebx +
pop ebx  +
jnz loc_103B002  +
mov ecx [esi+50h] +
mov eax [esi+54h] +
mov [ecx+54h] eax +
mov eax [esi+54h] +
cmp eax [edi+14h] +
jnz loc_103B014  +
mov [edi] ecx +
jmp loc_103B021  +
cmp esi [eax+4Ch] +
jnz loc_103B01E  +
mov [eax+4Ch] ecx +
jmp loc_103B021  +
mov [eax+50h] ecx +
cmp dword ptr [esi+48h] 1 +
jnz loc_103B02F  +
push ecx  +
mov ecx edi +
call sub_10398C7  +
cmp esi [ebp+arg_0] +
jz loc_103B03F  +
push [ebp+arg_0]  +
mov ecx edi +
push esi  +
call sub_1039860  +
mov eax [edi] +
test eax eax +
jz loc_103B050  +
add eax 54h +
push eax  +
mov ecx edi +
call sub_1005E52  +
push [ebp+arg_0]  +
mov ecx edi +
call sub_1004674  +
mov al 1 +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_10015E0  +
mov edi ecx +
xor esi esi +
mov [ebp-1Ch] esi +
mov [ebp-18h] esi +
mov [ebp-14h] esi +
mov [ebp-10h] esi +
lea eax [ebp-1Ch] +
push eax  +
mov [ebp-4] esi +
call sub_1018246  +
cmp eax esi +
jge loc_103B0A7  +
lea ecx [ebp-1Ch] +
mov esi eax +
call sub_1004450  +
mov eax esi +
call sub_10015C0  +
retn 8  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp-1Ch] +
push eax  +
push dword ptr [ebp+8]  +
mov ecx edi +
call sub_103AE89  +
jmp loc_103B093  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_10056D6  +
test eax eax +
jz loc_103B0DF  +
push eax  +
mov ecx esi +
call sub_103AFCD  +
mov al 1 +
jmp loc_103B0E1  +
xor al al +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
mov [ebp+var_1] 0 +
call sub_10182FA  +
push dword ptr [esi]  +
mov ecx esi +
mov ebx eax +
call sub_1007A64  +
mov [ebp+var_8] eax +
test eax eax +
jz loc_103B15F  +
push edi  +
cmp eax ebx +
jz loc_103B15E  +
lea eax [ebp+var_8] +
push eax  +
mov ecx esi +
call sub_10079B5  +
mov ecx [ebp+arg_0] +
mov edi eax +
push edi  +
call sub_1007D37  +
test eax eax +
jz loc_103B157  +
push edi  +
mov ecx esi +
call sub_103B0BF  +
push [ebp+arg_0]  +
mov ecx esi +
mov [ebp+var_1] 1 +
call sub_10182FA  +
push dword ptr [esi]  +
mov ecx esi +
mov ebx eax +
call sub_1007A64  +
mov [ebp+var_8] eax +
mov eax [ebp+var_8] +
test eax eax +
jnz loc_103B115  +
pop edi  +
mov al [ebp+var_1] +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
push edi  +
mov esi ecx +
call sub_103B0EB  +
cmp dword ptr [edi+18h] 0 +
mov byte ptr [ebp+arg_0+3] al +
jz loc_103B1F2  +
push edi  +
mov ecx esi +
call sub_10182FA  +
push dword ptr [esi]  +
mov ecx esi +
mov [ebp+var_8] eax +
call sub_1007A64  +
mov [ebp+var_4] eax +
test eax eax +
jz loc_103B1EF  +
push ebx  +
cmp eax [ebp+var_8] +
jz loc_103B1EE  +
lea eax [ebp+var_4] +
push eax  +
mov ecx esi +
call sub_10079B5  +
mov ebx eax +
push edi  +
mov ecx ebx +
call sub_103CDE9  +
test eax eax +
jz loc_103B1E7  +
push ebx  +
mov ecx esi +
call sub_103B0BF  +
push edi  +
mov ecx esi +
mov byte ptr [ebp+arg_0+3] 1 +
call sub_10182FA  +
push dword ptr [esi]  +
mov ecx esi +
mov [ebp+var_8] eax +
call sub_1007A64  +
mov [ebp+var_4] eax +
mov eax [ebp+var_4] +
test eax eax +
jnz loc_103B1A6  +
pop ebx  +
mov al byte ptr [ebp+arg_0+3] +
pop edi  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push ebx  +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
lea ecx [ebp+var_20] +
call sub_1007A16  +
push eax  +
mov ecx esi +
call sub_103B0BF  +
lea ecx [ebp+var_20] +
mov bl al +
call sub_1003B4C  +
pop esi  +
mov al bl +
pop ebx  +
leave   +
retn 4  +
***
call sub_10015E0  +
mov esi ecx +
push dword ptr [ebp+8]  +
lea ecx [ebp+8] +
call sub_10035A2  +
and dword ptr [ebp-4] 0 +
lea eax [ebp+8] +
push eax  +
lea ecx [ebp-2Ch] +
call sub_1007A16  +
push eax  +
mov ecx esi +
call sub_103B0BF  +
lea ecx [ebp-2Ch] +
mov bl al +
call sub_1003B4C  +
mov ecx [ebp+8] +
add ecx 0FFFFFFF0h +
call sub_1002990  +
mov al bl +
call sub_10015C0  +
retn 4  +
***
call sub_1001862  +
cmp dword_104A3AC 0 +
jz loc_103B308  +
mov al byte_104A3B0 +
cmp al 4 +
jnb loc_103B2AA  +
test al al +
jnz loc_103B308  +
mov eax dword_104A398 +
mov ecx dword_104A39C +
mov edi 20000h +
mov esi 80000000h +
and eax edi +
and ecx esi +
or eax ecx +
jz loc_103B312  +
mov edx dword_104A3A0 +
mov ebx dword_104A3A4 +
mov eax edx +
mov ecx ebx +
and eax edi +
and ecx esi +
cmp eax edx +
jnz loc_103B312  +
cmp ecx ebx +
jnz loc_103B312  +
mov eax [ebp+0Ch] +
test eax eax +
jnz loc_103B2EF  +
mov eax offset word_100348C +
push eax  +
push offset dword_103B570  +
push dword_104A134  +
push dword_104A130  +
call sub_10263C4  +
jmp loc_103B312  +
mov esi 80000000h +
mov edi 20000h +
push dword ptr [ebp+0Ch]  +
call sub_100242C  +
mov ebx eax +
test ebx ebx +
jge loc_103B383  +
cmp dword_104A3AC 0 +
jz loc_103B37C  +
mov al byte_104A3B0 +
cmp al 4 +
jnb loc_103B336  +
test al al +
jnz loc_103B37C  +
mov eax dword_104A398 +
mov ecx dword_104A39C +
and eax edi +
and ecx esi +
or eax ecx +
jz loc_103B37C  +
mov edx dword_104A3A0 +
mov eax edx +
and eax edi +
mov edi dword_104A3A4 +
mov ecx edi +
and ecx esi +
cmp eax edx +
jnz loc_103B37C  +
cmp ecx edi +
jnz loc_103B37C  +
push ebx  +
push offset dword_103B580  +
push dword_104A134  +
push dword_104A130  +
call sub_10379EB  +
mov eax ebx +
jmp loc_103B563  +
mov ebx [ebp+8] +
mov ecx ebx +
call sub_1003689  +
mov [ebp+8] eax +
test eax eax +
jge loc_103B3E4  +
cmp dword_104A3AC 0 +
jz loc_103B560  +
mov al byte_104A3B0 +
cmp al 4 +
jnb loc_103B3B2  +
test al al +
jnz loc_103B560  +
mov eax dword_104A398 +
mov ecx dword_104A39C +
and eax edi +
and ecx esi +
or eax ecx +
jz loc_103B560  +
mov ecx dword_104A3A0 +
mov eax ecx +
and eax edi +
mov edi dword_104A3A4 +
mov edx edi +
and edx esi +
cmp eax ecx +
jmp loc_103B541  +
mov eax [ebx+10h] +
mov ecx [ebx+14h] +
and dword ptr [ebp-4] 0 +
push 2  +
push dword ptr [ebp+0Ch]  +
push eax  +
push ecx  +
call sub_1008F8A  +
mov [ebp+8] eax +
test eax eax +
jge loc_103B466  +
cmp dword_104A3AC 0 +
jz loc_103B45E  +
mov al byte_104A3B0 +
cmp al 4 +
jnb loc_103B417  +
test al al +
jnz loc_103B45E  +
mov eax dword_104A398 +
mov ecx dword_104A39C +
and eax edi +
and ecx esi +
or eax ecx +
jz loc_103B45E  +
mov eax dword_104A3A0 +
mov ecx eax +
and ecx edi +
mov edi dword_104A3A4 +
mov edx edi +
and edx esi +
cmp ecx eax +
jnz loc_103B45E  +
cmp edx edi +
jnz loc_103B45E  +
push dword ptr [ebp+8]  +
push offset dword_103B580  +
push dword_104A134  +
push dword_104A130  +
call sub_10379EB  +
mov eax [ebp+8] +
jmp loc_103B563  +
push dword ptr [ebp+0Ch]  +
mov ecx [ebx+38h] +
call sub_103AE5D  +
xor ecx ecx +
test al al +
setz cl  +
mov [ebp+8] ecx +
test al al +
jz loc_103B503  +
push dword ptr [ebp+0Ch]  +
lea ecx [ebp+0Ch] +
mov byte ptr [ebx+5Ah] 1 +
call sub_10035A2  +
lea eax [ebp+0Ch] +
push eax  +
lea ecx [ebp-34h] +
mov byte ptr [ebp-4] 1 +
call sub_1007A16  +
mov ecx [ebp+0Ch] +
add ecx 0FFFFFFF0h +
mov byte ptr [ebp-4] 3 +
call sub_1002990  +
mov ecx [ebx+3Ch] +
lea eax [ebp-34h] +
push eax  +
call sub_103B0BF  +
mov ecx [ebx+3Ch] +
lea eax [ebp-34h] +
push eax  +
call sub_103B0EB  +
mov ecx [ebx+40h] +
lea eax [ebp-34h] +
push eax  +
call sub_103B0BF  +
mov ecx [ebx+40h] +
lea eax [ebp-34h] +
push eax  +
call sub_103B0EB  +
lea ecx [ebp-34h] +
call sub_1003B4C  +
jmp loc_103B503  +
mov eax [ebp-14h] +
mov eax [eax] +
mov [ebp+8] eax +
mov eax offset loc_103B4F9 +
retn   +
mov edi 20000h +
mov esi 80000000h +
cmp dword_104A3AC 0 +
jz loc_103B560  +
mov al byte_104A3B0 +
cmp al 4 +
jnb loc_103B519  +
test al al +
jnz loc_103B560  +
mov eax dword_104A398 +
mov ecx dword_104A39C +
and eax edi +
and ecx esi +
or eax ecx +
jz loc_103B560  +
mov eax dword_104A3A0 +
mov ecx eax +
and ecx edi +
mov edi dword_104A3A4 +
mov edx edi +
and edx esi +
cmp ecx eax +
jnz loc_103B560  +
cmp edx edi +
jnz loc_103B560  +
push dword ptr [ebp+8]  +
push offset dword_103B580  +
push dword_104A134  +
push dword_104A130  +
call sub_10379EB  +
mov eax [ebp+8] +
call sub_10015C0  +
retn 8  +
***
call sub_1001862  +
mov eax [ebp-1Ch] +
mov eax [eax] +
mov [ebp+8] eax +
mov eax offset loc_103B65F +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword_104A3AC 0 +
push ebx  +
push esi  +
push edi  +
mov edi 20000h +
mov esi 80000000h +
jz loc_103B6F6  +
mov al byte_104A3B0 +
cmp al 4 +
jnb loc_103B6A5  +
test al al +
jnz loc_103B6F6  +
mov eax dword_104A398 +
mov ecx dword_104A39C +
and eax edi +
and ecx esi +
or eax ecx +
jz loc_103B6F6  +
mov eax dword_104A3A0 +
mov ebx dword_104A3A4 +
mov ecx eax +
mov edx ebx +
and ecx edi +
and edx esi +
cmp ecx eax +
jnz loc_103B6F6  +
cmp edx ebx +
jnz loc_103B6F6  +
mov eax [ebp+arg_4] +
test eax eax +
jnz loc_103B6DF  +
mov eax offset word_100348C +
push eax  +
push offset dword_103B770  +
push dword_104A134  +
push dword_104A130  +
call sub_10263C4  +
mov ecx [ebp+arg_0] +
push 0  +
push [ebp+arg_4]  +
call sub_103B595  +
cmp dword_104A3AC 0 +
mov ebx eax +
jz loc_103B760  +
mov al byte_104A3B0 +
cmp al 4 +
jnb loc_103B71B  +
test al al +
jnz loc_103B760  +
mov eax dword_104A398 +
mov ecx dword_104A39C +
and eax edi +
and ecx esi +
or eax ecx +
jz loc_103B760  +
mov eax dword_104A3A0 +
mov ecx eax +
and ecx edi +
mov edi dword_104A3A4 +
mov edx edi +
and edx esi +
cmp ecx eax +
jnz loc_103B760  +
cmp edx edi +
jnz loc_103B760  +
push ebx  +
push offset dword_103B780  +
push dword_104A134  +
push dword_104A130  +
call sub_10379EB  +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword_104A3AC 0 +
push ebx  +
push esi  +
push edi  +
mov edi 20000h +
mov esi 80000000h +
jz loc_103B80E  +
mov al byte_104A3B0 +
cmp al 4 +
jnb loc_103B7BD  +
test al al +
jnz loc_103B80E  +
mov eax dword_104A398 +
mov ecx dword_104A39C +
and eax edi +
and ecx esi +
or eax ecx +
jz loc_103B80E  +
mov eax dword_104A3A0 +
mov ebx dword_104A3A4 +
mov ecx eax +
mov edx ebx +
and ecx edi +
and edx esi +
cmp ecx eax +
jnz loc_103B80E  +
cmp edx ebx +
jnz loc_103B80E  +
mov eax [ebp+arg_4] +
test eax eax +
jnz loc_103B7F7  +
mov eax offset word_100348C +
push eax  +
push offset dword_103B888  +
push dword_104A134  +
push dword_104A130  +
call sub_10263C4  +
mov ecx [ebp+arg_0] +
push 1  +
push [ebp+arg_4]  +
call sub_103B595  +
cmp dword_104A3AC 0 +
mov ebx eax +
jz loc_103B878  +
mov al byte_104A3B0 +
cmp al 4 +
jnb loc_103B833  +
test al al +
jnz loc_103B878  +
mov eax dword_104A398 +
mov ecx dword_104A39C +
and eax edi +
and ecx esi +
or eax ecx +
jz loc_103B878  +
mov eax dword_104A3A0 +
mov ecx eax +
and ecx edi +
mov edi dword_104A3A4 +
mov edx edi +
and edx esi +
cmp ecx eax +
jnz loc_103B878  +
cmp edx edi +
jnz loc_103B878  +
push ebx  +
push offset dword_103B898  +
push dword_104A134  +
push dword_104A130  +
call sub_10379EB  +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 8  +
***
call sub_1001862  +
mov esi ecx +
mov [ebp-20h] esi +
xor ebx ebx +
mov [ebp-30h] ebx +
mov [ebp-2Ch] ebx +
mov [ebp-28h] ebx +
push offset dword_104A104  +
lea ecx [ebp-14h] +
mov [ebp-4] ebx +
call sub_1003060  +
mov ecx esi +
call sub_1004376  +
lea eax [esi+18h] +
mov byte ptr [ebp-4] 2 +
push eax  +
cmp [ebp+0Ch] bl +
jz loc_103B948  +
push offset dword_104A2A4  +
lea eax [ebp-1Ch] +
push eax  +
call sub_10042CD  +
push offset dword_1003488  +
push eax  +
lea eax [ebp-18h] +
push eax  +
mov byte ptr [ebp-4] 3 +
call sub_100535E  +
lea ecx [esi+1Ch] +
push ecx  +
push eax  +
lea eax [ebp+0Ch] +
push eax  +
mov byte ptr [ebp-4] 4 +
call sub_10042CD  +
push eax  +
lea ecx [ebp-14h] +
mov byte ptr [ebp-4] 5 +
call sub_1003FBC  +
mov ecx [ebp+0Ch] +
add ecx 0FFFFFFF0h +
call sub_1002990  +
mov ecx [ebp-18h] +
add ecx 0FFFFFFF0h +
call sub_1002990  +
mov ecx [ebp-1Ch] +
jmp loc_103B9A1  +
push offset dword_104A2A0  +
lea eax [ebp-18h] +
push eax  +
call sub_10042CD  +
push offset dword_1003488  +
push eax  +
lea eax [ebp-1Ch] +
push eax  +
mov byte ptr [ebp-4] 6 +
call sub_100535E  +
lea ecx [esi+1Ch] +
push ecx  +
push eax  +
lea eax [ebp+0Ch] +
push eax  +
mov byte ptr [ebp-4] 7 +
call sub_10042CD  +
push eax  +
lea ecx [ebp-14h] +
mov byte ptr [ebp-4] 8 +
call sub_1003FBC  +
mov ecx [ebp+0Ch] +
add ecx 0FFFFFFF0h +
call sub_1002990  +
mov ecx [ebp-1Ch] +
add ecx 0FFFFFFF0h +
call sub_1002990  +
mov ecx [ebp-18h] +
add ecx 0FFFFFFF0h +
call sub_1002990  +
mov dword ptr [ebp-4] 1 +
jmp loc_103B9F0  +
mov eax [ebp-24h] +
mov eax [eax] +
mov [ebp+0Ch] eax +
mov dword ptr [ebp-4] 1 +
mov eax offset loc_103B9C7 +
retn   +
mov esi [ebp+0Ch] +
xor ebx ebx +
cmp esi ebx +
jge loc_103B9ED  +
mov ecx [ebp-14h] +
add ecx 0FFFFFFF0h +
call sub_1002990  +
lea ecx [ebp-30h] +
call sub_1004887  +
mov eax esi +
call sub_10015C0  +
retn 8  +
mov esi [ebp-20h] +
push 20019h  +
push dword ptr [ebp-14h]  +
lea ecx [ebp-30h] +
push 80000002h  +
call sub_100484B  +
cmp eax ebx +
jz loc_103BA19  +
jle loc_103BA15  +
and eax 0FFFFh +
or eax 80070000h +
mov esi eax +
jmp loc_103B9D0  +
push dword ptr [ebp+8]  +
mov ecx esi +
push dword ptr [ebp-30h]  +
call sub_100663B  +
jmp loc_103BA15  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
push dword ptr [esi]  +
call sub_1007A64  +
mov [ebp+var_4] eax +
test eax eax +
jz loc_103BA62  +
lea eax [ebp+var_4] +
push eax  +
mov ecx esi +
call sub_10079B5  +
lea ecx [eax+20h] +
push ecx  +
mov ecx [ebp+arg_0] +
push eax  +
call sub_10056A3  +
cmp [ebp+var_4] 0 +
jnz loc_103BA44  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
push ebx  +
push [ebp+arg_4]  +
call sub_10056D6  +
xor bl bl +
test eax eax +
jz loc_103BAA1  +
push [ebp+arg_8]  +
lea ecx [eax+20h] +
call sub_1017861  +
test al al +
jnz loc_103BA94  +
inc bl  +
push [ebp+arg_4]  +
mov ecx [ebp+arg_0] +
call sub_103B0BF  +
jmp loc_103BAA3  +
mov bl 1 +
test bl bl +
pop ebx  +
jz loc_103BAB6  +
push [ebp+arg_8]  +
mov ecx [ebp+arg_0] +
push [ebp+arg_4]  +
call sub_10056A3  +
pop ebp  +
retn 0Ch  +
***
call sub_1001862  +
mov esi ecx +
mov [ebp-20h] esi +
xor ebx ebx +
mov [ebp-30h] ebx +
mov [ebp-2Ch] ebx +
mov [ebp-28h] ebx +
push offset dword_104A104  +
lea ecx [ebp-14h] +
mov [ebp-4] ebx +
call sub_1003060  +
mov ecx esi +
call sub_10037C7  +
lea eax [esi+18h] +
mov byte ptr [ebp-4] 2 +
push eax  +
cmp [ebp+0Ch] bl +
jz loc_103BB5A  +
push offset dword_104A2A4  +
lea eax [ebp-1Ch] +
push eax  +
call sub_10042CD  +
push offset dword_1003488  +
push eax  +
lea eax [ebp-18h] +
push eax  +
mov byte ptr [ebp-4] 3 +
call sub_100535E  +
lea ecx [esi+1Ch] +
push ecx  +
push eax  +
lea eax [ebp+0Ch] +
push eax  +
mov byte ptr [ebp-4] 4 +
call sub_10042CD  +
push eax  +
lea ecx [ebp-14h] +
mov byte ptr [ebp-4] 5 +
call sub_1003FBC  +
mov ecx [ebp+0Ch] +
add ecx 0FFFFFFF0h +
call sub_1002990  +
mov ecx [ebp-18h] +
add ecx 0FFFFFFF0h +
call sub_1002990  +
mov ecx [ebp-1Ch] +
jmp loc_103BBB3  +
push offset dword_104A2A0  +
lea eax [ebp-18h] +
push eax  +
call sub_10042CD  +
push offset dword_1003488  +
push eax  +
lea eax [ebp-1Ch] +
push eax  +
mov byte ptr [ebp-4] 6 +
call sub_100535E  +
lea ecx [esi+1Ch] +
push ecx  +
push eax  +
lea eax [ebp+0Ch] +
push eax  +
mov byte ptr [ebp-4] 7 +
call sub_10042CD  +
push eax  +
lea ecx [ebp-14h] +
mov byte ptr [ebp-4] 8 +
call sub_1003FBC  +
mov ecx [ebp+0Ch] +
add ecx 0FFFFFFF0h +
call sub_1002990  +
mov ecx [ebp-1Ch] +
add ecx 0FFFFFFF0h +
call sub_1002990  +
mov ecx [ebp-18h] +
add ecx 0FFFFFFF0h +
call sub_1002990  +
mov dword ptr [ebp-4] 1 +
jmp loc_103BC02  +
mov eax [ebp-24h] +
mov eax [eax] +
mov [ebp+0Ch] eax +
mov dword ptr [ebp-4] 1 +
mov eax offset loc_103BBD9 +
retn   +
mov esi [ebp+0Ch] +
xor ebx ebx +
cmp esi ebx +
jge loc_103BBFF  +
mov ecx [ebp-14h] +
add ecx 0FFFFFFF0h +
call sub_1002990  +
lea ecx [ebp-30h] +
call sub_1004887  +
mov eax esi +
call sub_10015C0  +
retn 8  +
mov esi [ebp-20h] +
push 20019h  +
push dword ptr [ebp-14h]  +
lea ecx [ebp-30h] +
push 80000002h  +
call sub_100484B  +
cmp eax ebx +
jz loc_103BC2B  +
jle loc_103BC27  +
and eax 0FFFFh +
or eax 80070000h +
mov esi eax +
jmp loc_103BBE2  +
push dword ptr [ebp+8]  +
mov ecx esi +
push dword ptr [ebp-30h]  +
call sub_1005F51  +
jmp loc_103BC27  +
***
call sub_1001862  +
cmp dword_104A3AC 0 +
mov bl byte_104A3B0 +
jz loc_103BCCF  +
cmp bl 4 +
jnb loc_103BC63  +
test bl bl +
jnz loc_103BCCF  +
mov eax dword_104A398 +
mov ecx dword_104A39C +
mov edi 20000h +
mov esi 80000000h +
and eax edi +
and ecx esi +
or eax ecx +
jz loc_103BCD9  +
mov edx dword_104A3A0 +
mov ecx dword_104A3A4 +
mov eax edx +
and eax edi +
and ecx esi +
cmp eax edx +
jnz loc_103BCD9  +
cmp ecx dword_104A3A4 +
jnz loc_103BCD9  +
mov eax [ebp+0Ch] +
test eax eax +
jnz loc_103BCAA  +
mov eax offset word_100348C +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push eax  +
push offset dword_103BE08  +
push dword_104A134  +
push dword_104A130  +
call sub_10394A5  +
mov bl byte_104A3B0 +
jmp loc_103BCD9  +
mov esi 80000000h +
mov edi 20000h +
push dword ptr [ebp+0Ch]  +
call sub_100242C  +
mov [ebp-14h] eax +
test eax eax +
jge loc_103BD3C  +
cmp dword_104A3AC 0 +
jz loc_103BDF6  +
cmp bl 4 +
jnb loc_103BD02  +
test bl bl +
jnz loc_103BDF6  +
mov eax dword_104A398 +
mov ecx dword_104A39C +
and eax edi +
and ecx esi +
or eax ecx +
jz loc_103BDF6  +
mov edx dword_104A3A0 +
mov eax edx +
and eax edi +
mov edi dword_104A3A4 +
mov ecx edi +
and ecx esi +
cmp eax edx +
jnz loc_103BDF6  +
cmp ecx edi +
jmp loc_103BDDB  +
mov ecx [ebp+8] +
call sub_1003689  +
mov [ebp-14h] eax +
test eax eax +
jl loc_103BCE8  +
push dword ptr [ebp+0Ch]  +
and dword ptr [ebp-4] 0 +
lea ecx [ebp+0Ch] +
call sub_10035A2  +
push dword ptr [ebp+14h]  +
mov ecx [ebp+8] +
push 0  +
push 1  +
push dword ptr [ebp+10h]  +
mov byte ptr [ebp-4] 1 +
push eax  +
call sub_10191E3  +
mov ecx [ebp+0Ch] +
add ecx 0FFFFFFF0h +
mov [ebp-14h] eax +
call sub_1002990  +
jmp loc_103BD99  +
mov eax [ebp-18h] +
mov eax [eax] +
mov [ebp-14h] eax +
mov eax offset loc_103BD8F +
retn   +
mov edi 20000h +
mov esi 80000000h +
cmp dword_104A3AC 0 +
jz loc_103BDF6  +
mov al byte_104A3B0 +
cmp al 4 +
jnb loc_103BDAF  +
test al al +
jnz loc_103BDF6  +
mov eax dword_104A398 +
mov ecx dword_104A39C +
and eax edi +
and ecx esi +
or eax ecx +
jz loc_103BDF6  +
mov eax dword_104A3A0 +
mov ecx eax +
and ecx edi +
mov edi dword_104A3A4 +
mov edx edi +
and edx esi +
cmp ecx eax +
jnz loc_103BDF6  +
cmp edx edi +
jnz loc_103BDF6  +
push dword ptr [ebp-14h]  +
push offset dword_103BE18  +
push dword_104A134  +
push dword_104A130  +
call sub_10379EB  +
mov eax [ebp-14h] +
call sub_10015C0  +
retn 10h  +
***
call sub_1001862  +
cmp dword_104A3AC 0 +
mov bl byte_104A3B0 +
jz loc_103BEC0  +
cmp bl 4 +
jnb loc_103BE51  +
test bl bl +
jnz loc_103BEC0  +
mov eax dword_104A398 +
mov ecx dword_104A39C +
mov edi 20000h +
mov esi 80000000h +
and eax edi +
and ecx esi +
or eax ecx +
jz loc_103BECA  +
mov edx dword_104A3A0 +
mov ecx dword_104A3A4 +
mov eax edx +
and eax edi +
and ecx esi +
cmp eax edx +
jnz loc_103BECA  +
cmp ecx dword_104A3A4 +
jnz loc_103BECA  +
mov eax [ebp+0Ch] +
test eax eax +
jnz loc_103BE98  +
mov eax offset word_100348C +
push dword ptr [ebp+18h]  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push eax  +
push offset dword_103BFF8  +
push dword_104A134  +
push dword_104A130  +
call sub_103952A  +
mov bl byte_104A3B0 +
jmp loc_103BECA  +
mov esi 80000000h +
mov edi 20000h +
push dword ptr [ebp+0Ch]  +
call sub_100242C  +
mov [ebp-14h] eax +
test eax eax +
jge loc_103BF2D  +
cmp dword_104A3AC 0 +
jz loc_103BFE8  +
cmp bl 4 +
jnb loc_103BEF3  +
test bl bl +
jnz loc_103BFE8  +
mov eax dword_104A398 +
mov ecx dword_104A39C +
and eax edi +
and ecx esi +
or eax ecx +
jz loc_103BFE8  +
mov edx dword_104A3A0 +
mov eax edx +
and eax edi +
mov edi dword_104A3A4 +
mov ecx edi +
and ecx esi +
cmp eax edx +
jnz loc_103BFE8  +
cmp ecx edi +
jmp loc_103BFCD  +
mov ecx [ebp+8] +
call sub_1003689  +
mov [ebp-14h] eax +
test eax eax +
jl loc_103BED9  +
push dword ptr [ebp+0Ch]  +
and dword ptr [ebp-4] 0 +
lea ecx [ebp+0Ch] +
call sub_10035A2  +
push dword ptr [ebp+18h]  +
mov ecx [ebp+8] +
push dword ptr [ebp+14h]  +
mov byte ptr [ebp-4] 1 +
push 0  +
push dword ptr [ebp+10h]  +
push eax  +
call sub_10191E3  +
mov ecx [ebp+0Ch] +
add ecx 0FFFFFFF0h +
mov [ebp-14h] eax +
call sub_1002990  +
jmp loc_103BF8B  +
mov eax [ebp-18h] +
mov eax [eax] +
mov [ebp-14h] eax +
mov eax offset loc_103BF81 +
retn   +
mov edi 20000h +
mov esi 80000000h +
cmp dword_104A3AC 0 +
jz loc_103BFE8  +
mov al byte_104A3B0 +
cmp al 4 +
jnb loc_103BFA1  +
test al al +
jnz loc_103BFE8  +
mov eax dword_104A398 +
mov ecx dword_104A39C +
and eax edi +
and ecx esi +
or eax ecx +
jz loc_103BFE8  +
mov eax dword_104A3A0 +
mov ecx eax +
and ecx edi +
mov edi dword_104A3A4 +
mov edx edi +
and edx esi +
cmp ecx eax +
jnz loc_103BFE8  +
cmp edx edi +
jnz loc_103BFE8  +
push dword ptr [ebp-14h]  +
push offset dword_103C008  +
push dword_104A134  +
push dword_104A130  +
call sub_10379EB  +
mov eax [ebp-14h] +
call sub_10015C0  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
cmp dword_104A3AC 0 +
push ebx  +
push esi  +
push edi  +
mov edi 20000h +
mov esi 80000000h +
jz loc_103C08C  +
mov al byte_104A3B0 +
cmp al 4 +
jnb loc_103C047  +
test al al +
jnz loc_103C08C  +
mov eax dword_104A398 +
mov ecx dword_104A39C +
and eax edi +
and ecx esi +
or eax ecx +
jz loc_103C08C  +
mov edx dword_104A3A0 +
mov ebx dword_104A3A4 +
mov eax edx +
mov ecx ebx +
and eax edi +
and ecx esi +
cmp eax edx +
jnz loc_103C08C  +
cmp ecx ebx +
jnz loc_103C08C  +
push offset dword_103C350  +
push dword_104A134  +
push dword_104A130  +
call sub_100A01E  +
mov eax [ebp+arg_4] +
test eax eax +
jnz loc_103C10C  +
mov ebx 80070057h +
cmp dword_104A3AC eax +
jz loc_103C340  +
mov al byte_104A3B0 +
cmp al 4 +
jnb loc_103C0B5  +
test al al +
jnz loc_103C340  +
mov eax dword_104A398 +
mov ecx dword_104A39C +
and eax edi +
and ecx esi +
or eax ecx +
jz loc_103C340  +
mov edx dword_104A3A0 +
mov eax edx +
and eax edi +
mov edi dword_104A3A4 +
mov ecx edi +
and ecx esi +
cmp eax edx +
jnz loc_103C340  +
cmp ecx edi +
jnz loc_103C340  +
push ebx  +
push offset dword_103C360  +
push dword_104A134  +
push dword_104A130  +
call sub_10379EB  +
jmp loc_103C340  +
mov ebx [ebp+arg_0] +
and dword ptr [eax] 0 +
mov ecx ebx +
call sub_1003689  +
mov [ebp+var_4] eax +
test eax eax +
jge loc_103C185  +
cmp dword_104A3AC 0 +
jz loc_103C17D  +
mov al byte_104A3B0 +
cmp al 4 +
jnb loc_103C136  +
test al al +
jnz loc_103C17D  +
mov eax dword_104A398 +
mov ecx dword_104A39C +
and eax edi +
and ecx esi +
or eax ecx +
jz loc_103C17D  +
mov eax dword_104A3A0 +
mov ecx eax +
and ecx edi +
mov edi dword_104A3A4 +
mov edx edi +
and edx esi +
cmp ecx eax +
jnz loc_103C17D  +
cmp edx edi +
jnz loc_103C17D  +
push [ebp+var_4]  +
push offset dword_103C360  +
push dword_104A134  +
push dword_104A130  +
call sub_10379EB  +
mov eax [ebp+var_4] +
jmp loc_103C342  +
mov ecx ebx +
call sub_101833E  +
mov [ebp+var_4] eax +
xor eax eax +
cmp [ebp+var_4] eax +
jge loc_103C19E  +
cmp dword_104A3AC eax +
jmp loc_103C127  +
mov ecx [ebx+44h] +
cmp [ecx+4] eax +
jnz loc_103C209  +
cmp dword_104A3AC eax +
jz loc_103C201  +
mov al byte_104A3B0 +
cmp al 4 +
jnb loc_103C1BB  +
test al al +
jnz loc_103C201  +
mov eax dword_104A398 +
mov ecx dword_104A39C +
and eax edi +
and ecx esi +
or eax ecx +
jz loc_103C201  +
mov eax dword_104A3A0 +
mov ecx eax +
and ecx edi +
mov edi dword_104A3A4 +
mov edx edi +
and edx esi +
cmp ecx eax +
jnz loc_103C201  +
cmp edx edi +
jnz loc_103C201  +
push 1  +
push offset dword_103C360  +
push dword_104A134  +
push dword_104A130  +
call sub_10379EB  +
xor eax eax +
inc eax  +
jmp loc_103C342  +
mov [ebp+var_8] eax +
lea eax [ebp+var_4] +
push eax  +
call sub_10391D6  +
mov ebx eax +
test ebx ebx +
jl loc_103C2D8  +
mov ebx [ebp+var_4] +
mov eax [ebx] +
push ebx  +
call dword ptr [eax+4]  +
mov eax [ebx] +
lea ecx [ebp+var_8] +
push ecx  +
push offset dword_1022788  +
push ebx  +
call dword ptr [eax]  +
mov [ebp+var_4] eax +
mov eax [ebx] +
push ebx  +
call dword ptr [eax+8]  +
cmp [ebp+var_4] 0 +
jge loc_103C2B8  +
cmp dword_104A3AC 0 +
jz loc_103C2A2  +
mov al byte_104A3B0 +
cmp al 4 +
jnb loc_103C25B  +
test al al +
jnz loc_103C2A2  +
mov eax dword_104A398 +
mov ecx dword_104A39C +
and eax edi +
and ecx esi +
or eax ecx +
jz loc_103C2A2  +
mov eax dword_104A3A0 +
mov ecx eax +
and ecx edi +
mov edi dword_104A3A4 +
mov edx edi +
and edx esi +
cmp ecx eax +
jnz loc_103C2A2  +
cmp edx edi +
jnz loc_103C2A2  +
push [ebp+var_4]  +
push offset dword_103C360  +
push dword_104A134  +
push dword_104A130  +
call sub_10379EB  +
mov eax [ebp+var_8] +
test eax eax +
jz loc_103C17D  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_103C17D  +
mov eax [ebp+arg_0] +
mov ecx [eax+44h] +
push 1  +
push ebx  +
call sub_1039ED1  +
mov ebx eax +
test ebx ebx +
jl loc_103C2D8  +
mov eax [ebp+var_8] +
mov ecx [ebp+arg_4] +
and [ebp+var_8] 0 +
mov [ecx] eax +
cmp dword_104A3AC 0 +
jz loc_103C333  +
mov al byte_104A3B0 +
cmp al 4 +
jnb loc_103C2EE  +
test al al +
jnz loc_103C333  +
mov ecx dword_104A39C +
mov eax dword_104A398 +
and ecx esi +
and eax edi +
or eax ecx +
jz loc_103C333  +
mov eax dword_104A3A0 +
mov ecx eax +
and ecx edi +
mov edi dword_104A3A4 +
mov edx edi +
and edx esi +
cmp ecx eax +
jnz loc_103C333  +
cmp edx edi +
jnz loc_103C333  +
push ebx  +
push offset dword_103C360  +
push dword_104A134  +
push dword_104A130  +
call sub_10379EB  +
mov eax [ebp+var_8] +
test eax eax +
jz loc_103C340  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax ebx +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
call sub_1001862  +
cmp dword_104A3AC 0 +
jz loc_103C3E7  +
mov al byte_104A3B0 +
cmp al 4 +
jnb loc_103C397  +
test al al +
jnz loc_103C3E7  +
mov eax dword_104A398 +
mov ecx dword_104A39C +
mov edi 20000h +
mov esi 80000000h +
and eax edi +
and ecx esi +
or eax ecx +
jz loc_103C3F1  +
mov eax dword_104A3A0 +
mov ebx dword_104A3A4 +
mov ecx eax +
mov edx ebx +
and ecx edi +
and edx esi +
cmp ecx eax +
jnz loc_103C3F1  +
cmp edx ebx +
jnz loc_103C3F1  +
push offset dword_103C5C8  +
push dword_104A134  +
push dword_104A130  +
call sub_100A01E  +
jmp loc_103C3F1  +
mov esi 80000000h +
mov edi 20000h +
mov ebx [ebp+8] +
mov ecx ebx +
call sub_1003689  +
mov [ebp+8] eax +
test eax eax +
jge loc_103C452  +
cmp dword_104A3AC 0 +
jz loc_103C5B6  +
mov al byte_104A3B0 +
cmp al 4 +
jnb loc_103C420  +
test al al +
jnz loc_103C5B6  +
mov eax dword_104A398 +
mov ecx dword_104A39C +
and eax edi +
and ecx esi +
or eax ecx +
jz loc_103C5B6  +
mov ecx dword_104A3A0 +
mov eax ecx +
and eax edi +
mov edi dword_104A3A4 +
mov edx edi +
and edx esi +
cmp eax ecx +
jmp loc_103C597  +
and dword ptr [ebp-4] 0 +
lea ecx [ebx+3Ch] +
mov byte ptr [ebx+5Ah] 1 +
call sub_10044B5  +
push 20h  +
call off_104B7F4  +
mov ecx eax +
mov [ebp+8] ecx +
mov byte ptr [ebp-4] 1 +
test ecx ecx +
jz loc_103C486  +
lea eax [ebx+10h] +
push eax  +
lea eax [ebx+14h] +
push eax  +
call sub_1007919  +
jmp loc_103C488  +
xor eax eax +
mov byte ptr [ebp-4] 0 +
test eax eax +
jnz loc_103C4FF  +
mov dword ptr [ebx+0Ch] 2 +
cmp dword_104A3AC eax +
jz loc_103C4F5  +
mov al byte_104A3B0 +
cmp al 4 +
jnb loc_103C4AC  +
test al al +
jnz loc_103C4F5  +
mov eax dword_104A398 +
mov ecx dword_104A39C +
and eax edi +
and ecx esi +
or eax ecx +
jz loc_103C4F5  +
mov eax dword_104A3A0 +
mov ecx eax +
and ecx edi +
mov edi dword_104A3A4 +
mov edx edi +
and edx esi +
cmp ecx eax +
jnz loc_103C4F5  +
cmp edx edi +
jnz loc_103C4F5  +
push 8007000Eh  +
push offset dword_103C5D8  +
push dword_104A134  +
push dword_104A130  +
call sub_10379EB  +
mov eax 8007000Eh +
jmp loc_103C5B9  +
mov ecx [ebx+40h] +
push eax  +
mov [ebx+3Ch] eax +
call sub_103BA2D  +
mov ecx ebx +
call sub_101833E  +
mov ecx [ebx+40h] +
push dword ptr [ecx]  +
mov [ebp+8] eax +
call sub_1007A64  +
mov [ebp-14h] eax +
cmp dword ptr [ebp-14h] 0 +
jz loc_103C559  +
mov ecx [ebx+40h] +
lea eax [ebp-14h] +
push eax  +
call sub_10079B5  +
push dword ptr [eax+14h]  +
lea ecx [ebx+28h] +
call sub_1015DF5  +
jmp loc_103C522  +
mov eax [ebp-18h] +
mov eax [eax] +
mov [ebp+8] eax +
mov eax offset loc_103C54F +
retn   +
mov edi 20000h +
mov esi 80000000h +
cmp dword_104A3AC 0 +
jz loc_103C5B6  +
mov al byte_104A3B0 +
cmp al 4 +
jnb loc_103C56F  +
test al al +
jnz loc_103C5B6  +
mov eax dword_104A398 +
mov ecx dword_104A39C +
and eax edi +
and ecx esi +
or eax ecx +
jz loc_103C5B6  +
mov eax dword_104A3A0 +
mov ecx eax +
and ecx edi +
mov edi dword_104A3A4 +
mov edx edi +
and edx esi +
cmp ecx eax +
jnz loc_103C5B6  +
cmp edx edi +
jnz loc_103C5B6  +
push dword ptr [ebp+8]  +
push offset dword_103C5D8  +
push dword_104A134  +
push dword_104A130  +
call sub_10379EB  +
mov eax [ebp+8] +
call sub_10015C0  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push dword ptr [esi]  +
mov ebx ecx +
mov ecx esi +
call sub_1007A64  +
mov [ebp+arg_0] eax +
test eax eax +
jz loc_103C63E  +
lea eax [ebp+arg_0] +
push eax  +
mov ecx esi +
call sub_10079B5  +
cmp dword ptr [eax+44h] 0 +
jnz loc_103C638  +
xor ecx ecx +
cmp [eax+30h] ecx +
jz loc_103C624  +
push 2  +
pop ecx  +
push ecx  +
push 0  +
push dword ptr [eax+38h]  +
add eax 24h +
push dword ptr [eax+8]  +
mov ecx ebx +
push eax  +
call sub_10191E3  +
cmp [ebp+arg_0] 0 +
jnz loc_103C609  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
call sub_10015E0  +
mov edi ecx +
xor ebx ebx +
mov [ebp-1Ch] ebx +
mov [ebp-18h] ebx +
call ds:CoImpersonateClient  +
mov [ebp-28h] eax +
lea eax [ebp-10h] +
push eax  +
xor esi esi +
inc esi  +
push esi  +
push 8  +
mov [ebp-4] ebx +
call ds:GetCurrentThread  +
push eax  +
call ds:OpenThreadToken  +
mov [ebp-14h] eax +
cmp eax ebx +
jnz loc_103C69F  +
call ds:__imp_GetLastError  +
cmp eax 3F0h +
jnz loc_103C6F2  +
mov [ebp-10h] ebx +
mov [ebp-14h] esi +
lea ecx [ebp-24h] +
call sub_100CDEE  +
lea ecx [ebp-20h] +
mov byte ptr [ebp-4] 1 +
call sub_1010B60  +
mov esi ds:CheckTokenMembership +
lea eax [ebp-1Ch] +
push eax  +
push dword ptr [ebp-24h]  +
push dword ptr [ebp-10h]  +
call esi  +
lea eax [ebp-18h] +
push eax  +
push dword ptr [ebp-20h]  +
push dword ptr [ebp-10h]  +
call esi  +
cmp [ebp-10h] ebx +
jz loc_103C6DF  +
push dword ptr [ebp-10h]  +
call ds:CloseHandle  +
lea ecx [ebp-20h] +
call sub_100EAE5  +
lea ecx [ebp-24h] +
mov [ebp-4] bl +
call sub_100EAE5  +
or dword ptr [ebp-4] 0FFFFFFFFh +
cmp [ebp-28h] ebx +
jl loc_103C701  +
call ds:CoRevertToSelf  +
cmp [ebp-14h] ebx +
jz loc_103C83B  +
cmp [ebp-1Ch] ebx +
jnz loc_103C718  +
cmp [ebp-18h] ebx +
jz loc_103C83B  +
lea esi [edi+10h] +
lea eax [edi+14h] +
push esi  +
push eax  +
lea ecx [ebp-54h] +
call sub_1004A24  +
push esi  +
lea eax [edi+14h] +
push eax  +
lea ecx [ebp-94h] +
mov dword ptr [ebp-4] 2 +
call sub_1007919  +
push esi  +
lea eax [edi+14h] +
push eax  +
lea ecx [ebp-74h] +
mov byte ptr [ebp-4] 3 +
call sub_1007919  +
push ebx  +
push offset dword_104A2B0  +
lea ecx [ebp-54h] +
mov byte ptr [ebp-4] 4 +
call sub_103B8AD  +
test eax eax +
jl loc_103C820  +
push ebx  +
push offset dword_104A2A8  +
lea ecx [ebp-74h] +
call sub_103BABF  +
test eax eax +
jl loc_103C820  +
push ebx  +
push offset dword_104A2AC  +
lea ecx [ebp-94h] +
call sub_103BABF  +
test eax eax +
jl loc_103C820  +
push dword ptr [ebp-54h]  +
lea ecx [ebp-54h] +
call sub_1008CCC  +
cmp eax ebx +
jnz loc_103C7AD  +
jmp loc_103C7CE  +
mov eax [ebp-14h] +
push eax  +
lea ecx [ebp-54h] +
mov esi eax +
call sub_1008EFE  +
mov ecx [edi+38h] +
mov [ebp-14h] eax +
lea eax [esi+4] +
push eax  +
push dword ptr [esi]  +
call sub_10070D3  +
cmp [ebp-14h] ebx +
jnz loc_103C7AA  +
lea eax [ebp-74h] +
push eax  +
mov ecx edi +
call sub_103C5ED  +
lea eax [ebp-94h] +
push eax  +
mov ecx edi +
call sub_103C5ED  +
push 2001Fh  +
push offset aSoftwareMicr_0  +
push 80000002h  +
lea ecx [ebp-34h] +
mov [ebp-34h] ebx +
mov [ebp-30h] ebx +
mov [ebp-2Ch] ebx +
call sub_100484B  +
test eax eax +
jnz loc_103C818  +
push offset aCrawlscopema_0  +
lea ecx [ebp-34h] +
call sub_102E088  +
lea ecx [ebp-34h] +
call sub_1004887  +
lea ecx [ebp-74h] +
call sub_10044F7  +
lea ecx [ebp-94h] +
call sub_10044F7  +
lea ecx [ebp-54h] +
call sub_100457C  +
call sub_10015C0  +
retn   +
***
call sub_10015E0  +
mov [ebp-2Ch] ecx +
xor ebx ebx +
mov [ebp-18h] ebx +
mov [ebp-24h] ebx +
mov [ebp-28h] ebx +
call ds:CoImpersonateClient  +
mov [ebp-30h] eax +
lea eax [ebp-14h] +
push eax  +
push 1  +
push 8  +
mov [ebp-4] ebx +
call ds:GetCurrentThread  +
push eax  +
call ds:OpenThreadToken  +
mov edi eax +
cmp edi ebx +
jnz loc_103C89A  +
call ds:__imp_GetLastError  +
cmp eax 3F0h +
jnz loc_103C8ED  +
xor edi edi +
mov [ebp-14h] ebx +
inc edi  +
lea ecx [ebp-20h] +
call sub_100CDEE  +
lea ecx [ebp-1Ch] +
mov byte ptr [ebp-4] 1 +
call sub_1010B60  +
mov esi ds:CheckTokenMembership +
lea eax [ebp-24h] +
push eax  +
push dword ptr [ebp-20h]  +
push dword ptr [ebp-14h]  +
call esi  +
lea eax [ebp-28h] +
push eax  +
push dword ptr [ebp-1Ch]  +
push dword ptr [ebp-14h]  +
call esi  +
cmp [ebp-14h] ebx +
jz loc_103C8DA  +
push dword ptr [ebp-14h]  +
call ds:CloseHandle  +
lea ecx [ebp-1Ch] +
call sub_100EAE5  +
lea ecx [ebp-20h] +
mov [ebp-4] bl +
call sub_100EAE5  +
or dword ptr [ebp-4] 0FFFFFFFFh +
cmp [ebp-30h] ebx +
jl loc_103C8FC  +
call ds:CoRevertToSelf  +
cmp edi ebx +
jz loc_103CA33  +
cmp [ebp-24h] ebx +
jnz loc_103C912  +
cmp [ebp-28h] ebx +
jz loc_103CA33  +
mov eax [ebp-2Ch] +
lea ecx [eax+10h] +
push ecx  +
add eax 14h +
push eax  +
lea ecx [ebp-5Ch] +
call sub_1007919  +
push 1  +
push offset dword_104A2AC  +
lea ecx [ebp-5Ch] +
mov dword ptr [ebp-4] 2 +
call sub_103BABF  +
cmp eax ebx +
jl loc_103CA2B  +
push dword ptr [ebp-5Ch]  +
lea ecx [ebp-5Ch] +
call sub_1007A64  +
mov edi eax +
jmp loc_103C9DE  +
push edi  +
lea ecx [ebp-5Ch] +
mov esi edi +
call sub_1007AB2  +
mov edi eax +
lea eax [esi+24h] +
push eax  +
lea ecx [ebp-20h] +
mov [ebp-1Ch] eax +
call sub_1003F3F  +
mov byte ptr [ebp-4] 3 +
cmp [esi+38h] ebx +
jnz loc_103C9A6  +
mov eax dword_104A2C8 +
push dword ptr [eax-0Ch]  +
lea eax [ebp-30h] +
push eax  +
lea ecx [ebp-20h] +
call sub_10079D6  +
push dword_104A2C8  +
or dword ptr [ebp-18h] 1 +
mov ecx eax +
call sub_100370F  +
mov [ebp-0Dh] bl +
test eax eax +
jz loc_103C9AA  +
mov byte ptr [ebp-0Dh] 1 +
test byte ptr [ebp-18h] 1 +
jz loc_103C9BF  +
mov ecx [ebp-30h] +
and dword ptr [ebp-18h] 0FFFFFFFEh +
add ecx 0FFFFFFF0h +
call sub_1002990  +
cmp [ebp-0Dh] bl +
jz loc_103C9CF  +
push dword ptr [ebp-1Ch]  +
lea ecx [ebp-5Ch] +
call sub_103B1FD  +
mov ecx [ebp-20h] +
add ecx 0FFFFFFF0h +
mov byte ptr [ebp-4] 2 +
call sub_1002990  +
cmp edi ebx +
jnz loc_103C955  +
mov ecx [ebp-2Ch] +
lea eax [ebp-5Ch] +
push eax  +
call sub_103C5ED  +
push 2001Fh  +
push offset aSoftwareMicr_0  +
push 80000002h  +
lea ecx [ebp-3Ch] +
mov [ebp-3Ch] ebx +
mov [ebp-38h] ebx +
mov [ebp-34h] ebx +
call sub_100484B  +
test eax eax +
jnz loc_103CA23  +
push offset aCrawlscopema_1  +
lea ecx [ebp-3Ch] +
call sub_102E088  +
lea ecx [ebp-3Ch] +
call sub_1004887  +
lea ecx [ebp-5Ch] +
call sub_10044F7  +
call sub_10015C0  +
retn   +
***
push 4  +
mov eax offset byte_1044CCB +
call sub_10015E0  +
mov esi ecx +
mov [ebp-10h] esi +
mov dword ptr [esi] offset off_100C6B8 +
mov eax [esi+0Ch] +
mov dword ptr [ebp-4] 1 +
test eax eax +
jz loc_103CAA7  +
push eax  +
call off_104B7F0  +
and dword ptr [esi+0Ch] 0 +
mov eax [esi+14h] +
mov byte ptr [ebp-4] 0 +
test eax eax +
jz loc_103CAB8  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov esi [esi+10h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
test esi esi +
jz loc_103CAC9  +
mov eax [esi] +
push esi  +
call dword ptr [eax+8]  +
call sub_10015C0  +
retn   +
***
call sub_1001862  +
mov edi [ebp+0Ch] +
push edi  +
call sub_100242C  +
test eax eax +
jl loc_103CB40  +
push 4  +
call off_104B7F4  +
mov esi eax +
mov [ebp-14h] esi +
test esi esi +
jnz loc_103CB05  +
mov eax 8007000Eh +
jmp loc_103CB40  +
mov eax [ebp+8] +
and dword ptr [ebp-4] 0 +
push esi  +
mov [esi] edi +
mov eax [eax+14h] +
mov ecx [eax] +
push 1  +
push eax  +
call dword ptr [ecx+10h]  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov [ebp+0Ch] eax +
jmp loc_103CB36  +
mov eax [ebp-18h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov [ebp+0Ch] eax +
mov eax offset loc_103CB33 +
retn   +
mov esi [ebp-14h] +
push esi  +
call off_104B7F0  +
mov eax [ebp+0Ch] +
call sub_10015C0  +
retn 8  +
***
call sub_1001862  +
mov eax [ebp-14h] +
mov [ebp+0Ch] eax +
mov eax offset loc_103CB7B +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+arg_8] +
push edi  +
test esi esi +
jz loc_103CC9C  +
cmp [ebp+arg_C] 0 +
jz loc_103CC9C  +
mov ebx [ebp+arg_4] +
test ebx ebx +
jnz loc_103CBC2  +
xor eax eax +
jmp loc_103CCA1  +
push 14h  +
xor ecx ecx +
pop edx  +
mov eax ebx +
mul  edx +
seto cl  +
neg ecx  +
or ecx eax +
push ecx  +
call off_104B7F4  +
mov edi eax +
test edi edi +
jnz loc_103CBE9  +
mov eax 8007000Eh +
jmp loc_103CCA1  +
and [ebp+arg_8] 0 +
test ebx ebx +
jbe loc_103CC70  +
lea eax [edi+4] +
lea ecx [esi+8] +
mov edx [ecx-8] +
test edx 0FFB30000h +
jnz loc_103CC8E  +
movzx esi dx +
test esi esi +
jz loc_103CC1C  +
cmp esi 1 +
jz loc_103CC1C  +
cmp esi 2 +
jz loc_103CC1C  +
cmp esi 3 +
jnz loc_103CC8E  +
mov [eax-4] edx +
cmp dword ptr [ecx+4] 1 +
jnz loc_103CC2E  +
or edx 800000h +
mov [eax-4] edx +
and dword ptr [eax+0Ch] 0 +
and dword ptr [eax+4] 0 +
cmp esi 3 +
jnz loc_103CC47  +
mov edx [ecx] +
mov [eax] edx +
mov edx [ecx-4] +
mov [eax+8] edx +
jmp loc_103CC62  +
cmp esi 1 +
jz loc_103CC51  +
cmp esi 2 +
jnz loc_103CC5D  +
mov edx [ecx] +
test edx edx +
jz loc_103CC5D  +
cmp word ptr [edx] 0 +
jnz loc_103CC60  +
mov edx [ecx-4] +
mov [eax] edx +
inc [ebp+arg_8]  +
add ecx 10h +
add eax 14h +
cmp [ebp+arg_8] ebx +
jb loc_103CBF7  +
push [ebp+arg_C]  +
mov eax [ebp+arg_0] +
mov eax [eax+14h] +
mov ecx [eax] +
push edi  +
push ebx  +
push eax  +
call dword ptr [ecx+1Ch]  +
push edi  +
mov esi eax +
call off_104B7F0  +
mov eax esi +
jmp loc_103CCA1  +
push edi  +
call off_104B7F0  +
mov eax 80070057h +
jmp loc_103CCA1  +
mov eax 80004003h +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 10h  +
***
mov eax ecx +
xor ecx ecx +
mov [eax+4] ecx +
mov dword ptr [eax] offset off_100C6B8 +
mov [eax+0Ch] ecx +
mov [eax+10h] ecx +
mov [eax+14h] ecx +
retn   +
***
call sub_1001862  +
mov eax [ebp-18h] +
mov [ebp+8] eax +
mov eax offset loc_103CDBA +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ecx+1Ch] 0 +
push esi  +
mov esi [ecx+4] +
jz loc_103CDF9  +
inc esi  +
mov edx [ebp+arg_0] +
cmp dword ptr [edx+1Ch] 0 +
mov eax [edx+4] +
jz loc_103CE06  +
inc eax  +
cmp esi eax +
pop esi  +
jnz loc_103CE20  +
cmp dword ptr [edx+18h] 0 +
jz loc_103CE20  +
cmp dword ptr [ecx+18h] 0 +
jnz loc_103CE20  +
push edx  +
push ecx  +
call sub_10147CB  +
jmp loc_103CE22  +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
push [ebp+pMore]  +
mov esi ecx +
call sub_1003025  +
pop ecx  +
mov ecx [esi] +
mov ecx [ecx-0Ch] +
lea eax [eax+ecx+1] +
push eax  +
mov ecx esi +
call sub_1003122  +
push [ebp+pMore]  +
push eax  +
call ds:PathAppendW  +
push 0FFFFFFFFh  +
mov ecx esi +
mov edi eax +
call sub_10084A5  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
test eax eax +
jz loc_103CE84  +
cmp word ptr [eax] 0 +
mov ecx eax +
jnz loc_103CE89  +
mov ecx offset aNull_0 +
mov eax [ebp+arg_0] +
mov [eax+4] ecx +
mov dword ptr [eax] 2 +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
cmp dword_104A04C 7D6h +
jl locret_103CEDE  +
push [ebp+arg_4]  +
lea eax [ebp+var_8] +
push eax  +
call sub_103CE70  +
lea eax [ebp+var_8] +
push eax  +
push 1  +
push [ebp+arg_0]  +
push 0  +
call WinSqmAddToStream  +
leave   +
retn 8  +
***
mov eax offset GetProfilesDirectoryW +
jmp $+2  +
push ecx  +
push edx  +
push eax  +
push offset USERENV_dll_import_table  +
call sub_1009D5C  +
pop edx  +
pop ecx  +
jmp eax  +
***
mov eax offset GetUserProfileDirectoryW +
jmp loc_103CEE9  +
***
mov eax offset GetAllUsersProfileDirectoryW +
jmp loc_103CEE9  +
***
mov eax offset __imp_WNetGetConnectionW +
jmp $+2  +
push ecx  +
push edx  +
push eax  +
push offset MPR_dll_import_table  +
call sub_1009D5C  +
pop edx  +
pop ecx  +
jmp eax  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
mov eax [esi] +
push edi  +
mov edi ecx +
mov ecx esi +
call dword ptr [eax+0Ch]  +
test al al +
jz loc_103CF4B  +
push 1  +
jmp loc_103CF58  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+10h]  +
test al al +
jz loc_103CF63  +
push 0  +
mov eax [edi] +
add esi 24h +
push esi  +
mov ecx edi +
call dword ptr [eax+1Ch]  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+Type] +
push edi  +
mov edi [ebp+cbData] +
test edi edi +
jz loc_103CF89  +
cmp dword ptr [esi] 2 +
jnb loc_103CF89  +
push 7Ah  +
pop eax  +
jmp loc_103CFE7  +
mov eax [esi] +
and dword ptr [esi] 0 +
add eax eax +
mov [ebp+cbData] eax +
lea eax [ebp+cbData] +
push eax  +
push edi  +
lea eax [ebp+Type] +
push eax  +
push 0  +
push [ebp+lpValueName]  +
push dword ptr [ecx]  +
call ds:RegQueryValueExW  +
test eax eax +
jnz loc_103CFE7  +
cmp [ebp+Type] 7 +
jz loc_103CFB7  +
push 0Dh  +
jmp loc_103CF86  +
mov ecx [ebp+cbData] +
test edi edi +
jz loc_103CFE1  +
test cl 1 +
jnz loc_103CFB3  +
mov eax ecx +
shr eax 1 +
cmp eax 1 +
jb loc_103CFB3  +
cmp word ptr [edi+eax*2-2] 0 +
jnz loc_103CFB3  +
cmp eax 1 +
jbe loc_103CFE1  +
cmp word ptr [edi+eax*2-4] 0 +
jnz loc_103CFB3  +
shr ecx 1 +
mov [esi] ecx +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push ebx  +
push esi  +
mov esi ecx +
mov eax [esi+8] +
xor ebx ebx +
cmp [eax-0Ch] ebx +
jnz loc_103D00C  +
xor al al +
jmp loc_103D053  +
push 20019h  +
push eax  +
push 80000002h  +
lea ecx [ebp+hKey] +
mov [ebp+hKey] ebx +
mov [ebp+var_C] ebx +
mov [ebp+var_8] ebx +
call sub_100484B  +
test eax eax +
jnz loc_103D049  +
mov esi [esi+0Ch] +
lea eax [ebp+cbData] +
push eax  +
push ebx  +
push ebx  +
push ebx  +
push esi  +
push [ebp+hKey]  +
mov [ebp+cbData] ebx +
call ds:RegQueryValueExW  +
test eax eax +
jnz loc_103D049  +
mov bl 1 +
lea ecx [ebp+hKey] +
call sub_1004887  +
mov al bl +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push ebx  +
push esi  +
mov esi ecx +
mov eax [esi+8] +
xor ebx ebx +
cmp [eax-0Ch] ebx +
jnz loc_103D078  +
xor al al +
pop esi  +
pop ebx  +
leave   +
retn   +
push 20019h  +
push eax  +
push 80000001h  +
lea ecx [ebp+hKey] +
mov [ebp+hKey] ebx +
mov [ebp+var_C] ebx +
mov [ebp+var_8] ebx +
call sub_100484B  +
test eax eax +
jz loc_103D0A4  +
lea ecx [ebp+hKey] +
call sub_1004887  +
mov al bl +
jmp loc_103D074  +
mov esi [esi+0Ch] +
lea eax [ebp+cbData] +
push eax  +
push ebx  +
push ebx  +
push ebx  +
push esi  +
push [ebp+hKey]  +
mov [ebp+cbData] ebx +
call ds:RegQueryValueExW  +
mov ebx eax +
neg ebx  +
sbb bl bl +
inc bl  +
jmp loc_103D098  +
***
call sub_10015E0  +
mov [ebp-1Ch] ecx +
mov eax [ebp+8] +
mov esi [eax+4] +
xor ebx ebx +
mov [ebp-18h] esi +
mov byte ptr [ebp-0Dh] 1 +
test esi esi +
jz loc_103D1E3  +
xor edi edi +
test esi esi +
jbe loc_103D114  +
mov ecx [ebp+8] +
push edi  +
call sub_10068B5  +
mov eax [eax] +
mov eax [eax-0Ch] +
test eax eax +
jnz loc_103D10B  +
mov [ebp-0Dh] al +
inc edi  +
lea ebx [ebx+eax+1] +
cmp edi esi +
jb loc_103D0F6  +
inc ebx  +
cmp byte ptr [ebp-0Dh] 0 +
jz loc_103D1E3  +
push offset dword_104A104  +
lea ecx [ebp-14h] +
call sub_1003060  +
xor edi edi +
push ebx  +
lea ecx [ebp-14h] +
mov [ebp-4] edi +
call sub_1003122  +
mov esi eax +
cmp [ebp-18h] edi +
jbe loc_103D180  +
mov ecx [ebp+8] +
push edi  +
call sub_10068B5  +
push dword ptr [eax]  +
push ebx  +
push esi  +
call sub_1002525  +
mov ecx [ebp+8] +
push edi  +
call sub_10068B5  +
mov eax [eax] +
mov eax [eax-0Ch] +
or ecx 0FFFFFFFFh +
sub ecx eax +
add ebx ecx +
mov ecx [ebp+8] +
push edi  +
call sub_10068B5  +
mov eax [eax] +
mov eax [eax-0Ch] +
inc edi  +
lea esi [esi+eax*2+2] +
cmp edi [ebp-18h] +
jb loc_103D141  +
xor eax eax +
push 0FFFFFFFFh  +
lea ecx [ebp-14h] +
mov [esi] ax +
call sub_10084A5  +
xor eax eax +
mov [ebp-28h] eax +
mov [ebp-24h] eax +
mov [ebp-20h] eax +
mov esi [ebp-1Ch] +
mov eax [esi+8] +
push 2001Fh  +
push eax  +
xor eax eax +
cmp [ebp+0Ch] al +
lea ecx [ebp-28h] +
setnz al  +
mov byte ptr [ebp-4] 1 +
add eax 80000001h +
push eax  +
call sub_100484B  +
mov edi [ebp-14h] +
test eax eax +
jnz loc_103D1D3  +
push edi  +
push dword ptr [esi+0Ch]  +
lea ecx [ebp-28h] +
call sub_102D99C  +
lea ecx [ebp-28h] +
call sub_1004887  +
lea ecx [edi-10h] +
call sub_1002990  +
call sub_10015C0  +
retn 8  +
***
call sub_10015E0  +
mov esi ecx +
push 0FFFFFFFFh  +
lea ecx [esi+24h] +
xor ebx ebx +
push ebx  +
mov [ebp-18h] ecx +
call sub_1015DB6  +
xor edi edi +
cmp [esi+18h] ebx +
jbe loc_103D22E  +
push edi  +
lea ecx [esi+14h] +
call sub_10068B5  +
push dword ptr [eax]  +
mov ecx [ebp-18h] +
call sub_1015DF5  +
inc edi  +
cmp edi [esi+18h] +
jb loc_103D215  +
mov eax [esi+8] +
cmp [eax-0Ch] ebx +
jz loc_103D344  +
mov dword ptr [ebp-20h] offset unk_104A734 +
cmp [esi+10h] bl +
jnz loc_103D24D  +
mov dword ptr [ebp-20h] offset unk_104BB74 +
mov [ebp-10h] ebx +
mov [ebp-2Ch] ebx +
mov [ebp-28h] ebx +
mov [ebp-24h] ebx +
mov eax [esi+8] +
mov ecx [ebp-10h] +
push 20019h  +
push eax  +
mov eax [ebp-20h] +
push dword ptr [eax+ecx*4]  +
lea ecx [ebp-2Ch] +
mov [ebp-4] ebx +
call sub_100484B  +
cmp eax ebx +
jnz loc_103D2D2  +
mov eax [esi+0Ch] +
lea ecx [ebp-14h] +
push ecx  +
push ebx  +
push eax  +
lea ecx [ebp-2Ch] +
mov [ebp-14h] ebx +
call sub_103CF6E  +
cmp eax ebx +
jnz loc_103D2D2  +
push offset dword_104A104  +
lea ecx [ebp-1Ch] +
call sub_1003060  +
mov eax [ebp-14h] +
inc eax  +
push eax  +
lea ecx [ebp-1Ch] +
mov byte ptr [ebp-4] 1 +
call sub_1003122  +
lea ecx [ebp-14h] +
push ecx  +
mov edi eax +
mov eax [esi+0Ch] +
push edi  +
push eax  +
lea ecx [ebp-2Ch] +
call sub_103CF6E  +
cmp eax ebx +
jz loc_103D2EC  +
mov ecx [ebp-1Ch] +
add ecx 0FFFFFFF0h +
call sub_1002990  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-2Ch] +
call sub_1004887  +
inc dword ptr [ebp-10h]  +
cmp dword ptr [ebp-10h] 2 +
jge loc_103D344  +
jmp loc_103D250  +
mov ecx [ebp-18h] +
push 0FFFFFFFFh  +
push ebx  +
mov esi edi +
call sub_1015DB6  +
cmp [edi] bx +
jz loc_103D331  +
push esi  +
lea ecx [ebp-20h] +
call sub_10035A2  +
push dword ptr [ebp-20h]  +
mov ecx [ebp-18h] +
mov byte ptr [ebp-4] 2 +
call sub_1015DF5  +
mov eax [ebp-20h] +
mov ecx [eax-0Ch] +
lea esi [esi+ecx*2+2] +
lea ecx [eax-10h] +
mov byte ptr [ebp-4] 1 +
call sub_1002990  +
cmp [esi] bx +
jnz loc_103D2FE  +
mov ecx [ebp-1Ch] +
add ecx 0FFFFFFF0h +
call sub_1002990  +
lea ecx [ebp-2Ch] +
call sub_1004887  +
call sub_10015C0  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
call ds:GetTickCount  +
sub eax [ebp+arg_0] +
cmp [ebp+arg_4] eax +
sbb eax eax +
neg eax  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
xor ecx ecx +
cmp ecx 62h +
jnb loc_103D391  +
mov dx [ebp+arg_0] +
cmp dx ds:word_103D398[ecx] +
jnz loc_103D38B  +
xor eax eax +
inc eax  +
inc ecx  +
inc ecx  +
test eax eax +
jz loc_103D376  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2B8h +
mov eax dword_104A044 +
xor eax ebp +
mov [ebp+var_4] eax +
lea eax [ebp+var_2B8] +
push eax  +
lea eax [ebp+var_2B0] +
push eax  +
lea eax [ebp+var_2B4] +
push eax  +
push 8  +
mov [ebp+var_2B8] 100h +
call ds:GetSystemPreferredUILanguages  +
test eax eax +
jz loc_103D475  +
cmp [ebp+var_2B4] 0 +
jbe loc_103D475  +
push 55h  +
lea eax [ebp+var_B0] +
push eax  +
lea eax [ebp+var_2B0] +
push eax  +
call ds:ResolveLocaleName  +
test eax eax +
jle loc_103D475  +
push 0  +
lea eax [ebp+var_B0] +
push eax  +
call ds:LocaleNameToLCID  +
test eax eax +
jnz loc_103D47B  +
call ds:GetSystemDefaultLCID  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_1002A8B  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
cmp dword_104BD18 0 +
jz loc_103D4AF  +
push 4E20h  +
push dword_104BD14  +
call sub_103D34F  +
test eax eax +
jz loc_103D4F8  +
lea eax [ebp+var_4] +
push eax  +
push offset aSystemindexnor  +
push offset aSoftwareMicr_0  +
push 80000002h  +
call sub_103D504  +
test eax eax +
jge loc_103D4E5  +
mov [ebp+var_4] 1 +
call sub_103D3FF  +
push eax  +
call sub_103D36D  +
test eax eax +
jz loc_103D4E5  +
or [ebp+var_4] 2 +
mov eax [ebp+var_4] +
mov dword_104BD18 eax +
call ds:GetTickCount  +
mov dword_104BD14 eax +
mov eax dword_104BD18 +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
lea eax [ebp+var_4] +
push eax  +
push [ebp+arg_C]  +
mov [ebp+var_4] 4 +
push 0  +
push 10h  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call SHRegGetValueW  +
test eax eax +
jle locret_103D538  +
and eax 0FFFFh +
or eax 80070000h +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+wLanguage]  +
push 1  +
push offset Type  +
push [ebp+hModule]  +
call ds:FindResourceExW  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+hModule]  +
call sub_103D541  +
test eax eax +
jz loc_103D58A  +
push eax  +
push [ebp+hModule]  +
call ds:LoadResource  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+hModule] 0 +
push esi  +
jz loc_103D5E8  +
cmp [ebp+arg_4] 0 +
jz loc_103D5E8  +
push [ebp+hModule]  +
call sub_103D56D  +
push [ebp+arg_4]  +
mov esi eax +
call sub_103D56D  +
test esi esi +
jz loc_103D5E0  +
test eax eax +
jz loc_103D5E0  +
mov ecx 0FECDFECDh +
cmp [esi] ecx +
jnz loc_103D5E8  +
cmp [eax] ecx +
jnz loc_103D5E8  +
push edi  +
push 4  +
lea edi [eax+1Ch] +
add esi 1Ch +
pop ecx  +
xor eax eax +
cmps   +
pop edi  +
jnz loc_103D5E8  +
inc eax  +
jmp loc_103D5EA  +
push 0Dh  +
call ds:SetLastError  +
xor eax eax +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
xor esi esi +
push edi  +
cmp [ebp+lpLibFileName] esi +
jnz loc_103D607  +
xor eax eax +
jmp loc_103D675  +
cmp [ebp+arg_4] esi +
jz loc_103D662  +
push esi  +
push esi  +
push 3  +
push esi  +
push 5  +
push 80000000h  +
push [ebp+lpLibFileName]  +
call ds:CreateFileW  +
mov edi eax +
cmp edi 0FFFFFFFFh +
jz loc_103D603  +
push esi  +
push esi  +
push esi  +
push 8  +
push esi  +
push edi  +
call ds:CreateFileMappingW  +
push edi  +
mov edi ds:CloseHandle +
mov ebx eax +
call edi  +
cmp ebx esi +
jz loc_103D603  +
push esi  +
push esi  +
push esi  +
push 1  +
push ebx  +
call ds:MapViewOfFile  +
push ebx  +
mov [ebp+lpLibFileName] eax +
call edi  +
mov eax [ebp+lpLibFileName] +
cmp eax esi +
jz loc_103D603  +
or eax 1 +
jmp loc_103D675  +
xor eax eax +
cmp [ebp+arg_8] esi +
setnz al  +
push eax  +
push esi  +
push [ebp+lpLibFileName]  +
call ds:LoadLibraryExW  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 120h +
mov eax dword_104A044 +
xor eax ebp +
mov [ebp+var_4] eax +
push edi  +
xor edi edi +
cmp dword_104BD1C edi +
jnz loc_103D79D  +
push esi  +
mov esi 11Ch +
push esi  +
lea eax [ebp+VersionInformation] +
push edi  +
push eax  +
call memset  +
add esp 0Ch +
lea eax [ebp+VersionInformation] +
mov [ebp+VersionInformation.dwOSVersionInfoSize] esi +
mov esi ds:GetVersionExW +
push eax  +
call esi  +
test eax eax +
jnz loc_103D6E8  +
lea eax [ebp+VersionInformation] +
push eax  +
mov [ebp+VersionInformation.dwOSVersionInfoSize] 114h +
call esi  +
mov eax [ebp+VersionInformation.dwPlatformId] +
dec eax  +
mov dword_104BD1C edi +
pop esi  +
jz loc_103D770  +
dec eax  +
jnz loc_103D79D  +
cmp [ebp+VersionInformation.dwMajorVersion] 5 +
jnz loc_103D75D  +
mov eax [ebp+VersionInformation.dwMinorVersion] +
sub eax edi +
jz loc_103D751  +
dec eax  +
jz loc_103D73E  +
dec eax  +
jz loc_103D724  +
mov dword_104BD1C 14h +
jmp loc_103D79D  +
cmp [ebp+var_C] 1 +
jb loc_103D735  +
mov dword_104BD1C 10h +
or dword_104BD1C 4 +
jmp loc_103D79D  +
cmp [ebp+var_C] 2 +
jb loc_103D735  +
mov dword_104BD1C 8 +
jmp loc_103D735  +
mov dword_104BD1C 4 +
jmp loc_103D79D  +
cmp [ebp+VersionInformation.dwMajorVersion] 4 +
ja loc_103D7AF  +
mov dword_104BD1C 2 +
cmp [ebp+VersionInformation.dwMajorVersion] 4 +
jnz loc_103D79D  +
cmp [ebp+VersionInformation.dwMinorVersion] edi +
jz loc_103D793  +
cmp [ebp+VersionInformation.dwMinorVersion] 0Ah +
jz loc_103D793  +
cmp [ebp+VersionInformation.dwMinorVersion] 5Ah +
jnz loc_103D79D  +
mov dword_104BD1C 1 +
mov ecx [ebp+var_4] +
mov eax dword_104BD1C +
xor ecx ebp +
pop edi  +
call sub_1002A8B  +
leave   +
retn   +
mov dword_104BD1C 20h +
jmp loc_103D79D  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 44h +
mov eax dword_104A044 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
push 20h  +
lea eax [ebp+LCData] +
push eax  +
push 8  +
push 404h  +
mov esi 0C04h +
call ds:GetLocaleInfoW  +
test eax eax +
jz loc_103D814  +
push 3  +
lea eax [ebp+LCData] +
push offset word_103D824  +
push eax  +
call wcsncmp  +
add esp 0Ch +
mov esi eax +
neg esi  +
sbb esi esi +
and esi 0FFFFF800h +
add esi 0C04h +
mov ecx [ebp+var_4] +
mov ax si +
xor ecx ebp +
pop esi  +
call sub_1002A8B  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
mov eax dword_104A044 +
xor eax ebp +
mov [ebp+var_4] eax +
xor eax eax +
cmp ax word_104BD20 +
jnz loc_103D8CA  +
push esi  +
lea eax [ebp+hKey] +
push eax  +
push 1  +
xor esi esi +
push esi  +
push offset aSoftwareMic_12  +
push 80000002h  +
mov [ebp+cbData] 6 +
call ds:RegOpenKeyExW  +
test eax eax +
jnz loc_103D8C9  +
push edi  +
lea eax [ebp+cbData] +
push eax  +
lea eax [ebp+Data] +
push eax  +
push esi  +
push esi  +
push offset aLocale  +
push [ebp+hKey]  +
call ds:RegQueryValueExW  +
push [ebp+hKey]  +
mov edi eax +
call ds:RegCloseKey  +
cmp edi esi +
pop edi  +
jnz loc_103D8C9  +
push 3  +
push ds:off_103D8E0[esi*8]  +
lea eax [ebp+Data] +
push eax  +
call _wcsnicmp  +
add esp 0Ch +
test eax eax +
jz loc_103D8BB  +
inc esi  +
cmp esi 1Ch +
jnb loc_103D8C9  +
jmp loc_103D89A  +
mov ax ds:word_103D8E4[esi*8] +
mov word_104BD20 ax +
pop esi  +
mov ecx [ebp+var_4] +
mov ax word_104BD20 +
xor ecx ebp +
call sub_1002A8B  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push edi  +
mov edi eax +
xor ebx ebx +
cmp edi ebx +
jz loc_103DB49  +
cmp [ebp+arg_0] ebx +
jz loc_103DB49  +
cmp [ebp+arg_4] ebx +
jz loc_103DB49  +
push esi  +
movzx eax word ptr [edi] +
lea ecx [eax-61h] +
cmp cx 19h +
ja loc_103DAC5  +
movzx eax ax +
sub eax 61h +
jmp loc_103DAD4  +
lea ecx [eax-41h] +
cmp cx 19h +
ja loc_103DAFE  +
movzx eax ax +
sub eax 41h +
cmp eax 1Ah +
jnb loc_103DAFE  +
mov esi ds:dword_103DB50[eax*4] +
test esi esi +
jnz loc_103DAF6  +
jmp loc_103DAFE  +
push eax  +
push edi  +
call _wcsicmp  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_103DB09  +
add esi 8 +
mov eax [esi] +
cmp word ptr [eax] 0 +
jnz loc_103DAE6  +
mov edi [ebp+arg_0] +
inc ebx  +
cmp ebx 2 +
jge loc_103DB48  +
jmp loc_103DAB1  +
mov esi [esi+4] +
mov eax esi +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_103DB11  +
sub eax edx +
sar eax 1 +
cmp eax 55h +
jnb loc_103DB48  +
mov eax esi +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_103DB29  +
sub eax edx +
sar eax 1 +
lea eax [eax+eax+2] +
push eax  +
push esi  +
push [ebp+arg_4]  +
call memcpy  +
add esp 0Ch +
pop esi  +
pop edi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
test esi esi +
jz loc_103DC03  +
cmp [ebp+arg_4] 0 +
jz loc_103DC03  +
push 2  +
push 55h  +
push esi  +
push [ebp+arg_0]  +
call sub_103E623  +
test eax eax +
jz loc_103DC03  +
push 2  +
push 55h  +
push [ebp+arg_4]  +
push esi  +
call sub_103E6C9  +
test edi edi +
jz loc_103DBFE  +
xor eax eax +
push edi  +
push [ebp+arg_4]  +
mov [edi] ax +
mov eax esi +
call sub_103DA8B  +
xor eax eax +
inc eax  +
jmp loc_103DC05  +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:__imp_FreeLibrary  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20Ch +
mov eax dword_104A044 +
xor eax ebp +
mov [ebp+var_4] eax +
push edi  +
mov edi [ebp+arg_0] +
test edi edi +
jnz loc_103DC40  +
xor eax eax +
jmp loc_103DCAB  +
push ebx  +
lea eax [ebp+arg_8] +
push eax  +
push [ebp+arg_4]  +
lea eax [ebp+LibFileName] +
push 104h  +
push eax  +
xor ebx ebx +
call sub_1026AA5  +
test eax eax +
jl loc_103DCA8  +
push esi  +
call sub_103D681  +
mov esi eax +
and esi 26h +
call sub_103D681  +
and eax 38h +
push esi  +
push eax  +
lea eax [ebp+LibFileName] +
push eax  +
call sub_103D5F4  +
mov ebx eax +
pop esi  +
test ebx ebx +
jz loc_103DCA8  +
push ebx  +
push edi  +
call sub_103D593  +
test eax eax +
jnz loc_103DCA8  +
push ebx  +
test bl 1 +
jz loc_103DCA0  +
call ds:UnmapViewOfFile  +
jmp loc_103DCA6  +
call ds:__imp_FreeLibrary  +
xor ebx ebx +
mov eax ebx +
pop ebx  +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop edi  +
call sub_1002A8B  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
test eax eax +
jz loc_103DD18  +
test ecx ecx +
jz loc_103DD18  +
cmp dword ptr [ebp+arg_0] 0 +
push eax  +
jz loc_103DCFC  +
test edx edx +
jz loc_103DCE9  +
push edx  +
push dword ptr [ebp+arg_0]  +
push offset aSSS_mui  +
push ecx  +
call sub_103DC1F  +
add esp 14h +
jmp loc_103DD1A  +
push dword ptr [ebp+arg_0]  +
push offset aSS_mui  +
push ecx  +
call sub_103DC1F  +
add esp 10h +
jmp loc_103DD1A  +
test edx edx +
jz loc_103DD08  +
push edx  +
push offset a_SS_mui  +
jmp loc_103DCF1  +
push offset a_S_mui  +
push ecx  +
call sub_103DC1F  +
add esp 0Ch +
jmp loc_103DD1A  +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 428h +
mov eax dword_104A044 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
xor ebx ebx +
mov [ebp+lpLibFileName] esi +
mov [ebp+FilePart] ebx +
cmp esi ebx +
jnz loc_103DDB2  +
xor eax eax +
jmp loc_103E50B  +
test [ebp+arg_4] 0FFFFFFE3h +
jnz loc_103DDAB  +
push edi  +
mov edi dword ptr [ebp+wLanguage] +
cmp di bx +
jnz loc_103DDCE  +
test byte ptr [ebp+arg_4] 10h +
jnz loc_103E438  +
call sub_103D681  +
mov dword_104BD24 eax +
movzx eax al +
and eax 20h +
or eax 2 +
push eax  +
push 0  +
push esi  +
call ds:LoadLibraryExW  +
mov [ebp+hModule] eax +
test eax eax +
jz loc_103E438  +
test byte ptr dword_104BD24 20h +
jnz loc_103E50A  +
lea eax [ebp+FilePart] +
push eax  +
lea eax [ebp+LibFileName] +
push eax  +
push 104h  +
push 0  +
push esi  +
push 0  +
call ds:SearchPathW  +
test eax eax +
jz loc_103E42C  +
mov eax [ebp+FilePart] +
test eax eax +
jnz loc_103DE4A  +
and dword ptr [ebp+var_41C] ebx +
lea eax [ebp+LibFileName] +
mov [ebp+FilePart] eax +
jmp loc_103DE5C  +
lea ecx [ebp+LibFileName] +
mov dword ptr [ebp+var_41C] ecx +
xor ecx ecx +
mov [eax-2] cx +
push 0  +
push [ebp+hModule]  +
call sub_103D541  +
test eax eax +
jz loc_103E414  +
test di di +
jnz loc_103E3EC  +
mov al byte ptr dword_104BD24 +
test al 4 +
jz loc_103E1FB  +
call ds:GetUserDefaultUILanguage  +
movzx eax ax +
mov ecx 404h +
mov [ebp+var_420] eax +
cmp ax cx +
jnz loc_103DEAE  +
call sub_103D7C0  +
movzx eax ax +
mov [ebp+var_420] eax +
mov eax [ebp+arg_4] +
and eax 8 +
mov [ebp+var_424] eax +
cmp [ebp+var_424] 0 +
jz loc_103DF84  +
lea eax [ebp+var_15C] +
push eax  +
push [ebp+var_420]  +
lea edi [ebp+var_208] +
lea esi [ebp+var_B0] +
call sub_103DBBD  +
test eax eax +
jz loc_103E478  +
push dword ptr [ebp+var_41C]  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
mov edx esi +
call sub_103DCBD  +
mov ebx eax +
test ebx ebx +
jnz loc_103E47C  +
push dword ptr [ebp+var_41C]  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
lea edx [ebp+var_15C] +
call sub_103DCBD  +
mov ebx eax +
test ebx ebx +
jnz loc_103E47C  +
cmp word ptr [ebp+var_208] ax +
jz loc_103DF63  +
push dword ptr [ebp+var_41C]  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
mov edx edi +
call sub_103DCBD  +
mov ebx eax +
test ebx ebx +
jnz loc_103E47C  +
mov eax 0C04h +
cmp word ptr [ebp+var_420] ax +
jnz loc_103E12F  +
mov [ebp+var_420] 404h +
jmp loc_103DEBA  +
movzx eax word ptr [ebp+var_420] +
push eax  +
push offset aMui04hx  +
lea eax [ebp+var_B0] +
push 55h  +
push eax  +
call sub_100A257  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
add esp 10h +
push dword ptr [ebp+var_41C]  +
lea edx [ebp+var_B0] +
call sub_103DCBD  +
mov ebx eax +
test ebx ebx +
jnz loc_103E47C  +
lea eax [ebp+var_15C] +
push eax  +
push [ebp+var_420]  +
xor edi edi +
lea esi [ebp+var_B0] +
call sub_103DBBD  +
test eax eax +
jz loc_103E036  +
push 2  +
lea eax [ebp+var_15C] +
push eax  +
call sub_103E5BB  +
movzx eax ax +
test ax ax +
jz loc_103E036  +
movzx eax ax +
push eax  +
push offset aMui04hx  +
mov eax esi +
push 55h  +
push eax  +
call sub_100A257  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
add esp 10h +
push dword ptr [ebp+var_41C]  +
mov edx esi +
call sub_103DCBD  +
mov ebx eax +
test ebx ebx +
jnz loc_103E47C  +
mov eax 0C04h +
cmp word ptr [ebp+var_420] ax +
jz loc_103DF75  +
call ds:GetSystemDefaultUILanguage  +
movzx esi ax +
mov [ebp+var_424] esi +
cmp si word ptr [ebp+var_420] +
jz loc_103E113  +
movzx eax si +
push eax  +
push offset aMui04hx  +
lea eax [ebp+var_B0] +
push 55h  +
push eax  +
call sub_100A257  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
add esp 10h +
push dword ptr [ebp+var_41C]  +
lea edx [ebp+var_B0] +
call sub_103DCBD  +
mov ebx eax +
test ebx ebx +
jnz loc_103E47C  +
lea eax [ebp+var_15C] +
push eax  +
push esi  +
xor edi edi +
lea esi [ebp+var_B0] +
call sub_103DBBD  +
test eax eax +
jz loc_103E10D  +
push 2  +
lea eax [ebp+var_15C] +
push eax  +
call sub_103E5BB  +
movzx eax ax +
test ax ax +
jz loc_103E10D  +
movzx eax ax +
push eax  +
push offset aMui04hx  +
mov eax esi +
push 55h  +
push eax  +
call sub_100A257  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
add esp 10h +
push dword ptr [ebp+var_41C]  +
mov edx esi +
call sub_103DCBD  +
mov ebx eax +
test ebx ebx +
jnz loc_103E47C  +
mov esi [ebp+var_424] +
mov eax 409h +
mov ecx eax +
cmp cx word ptr [ebp+var_420] +
jz loc_103E3C4  +
cmp ax si +
jmp loc_103E39C  +
call ds:GetSystemDefaultUILanguage  +
movzx eax ax +
mov [ebp+var_424] eax +
cmp ax word ptr [ebp+var_420] +
jz loc_103E1E2  +
lea ecx [ebp+var_15C] +
push ecx  +
push eax  +
lea edi [ebp+var_208] +
lea esi [ebp+var_B0] +
call sub_103DBBD  +
test eax eax +
jz loc_103E414  +
push dword ptr [ebp+var_41C]  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
mov edx esi +
call sub_103DCBD  +
mov ebx eax +
test ebx ebx +
jnz loc_103E47C  +
push dword ptr [ebp+var_41C]  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
lea edx [ebp+var_15C] +
call sub_103DCBD  +
mov ebx eax +
test ebx ebx +
jnz loc_103E47C  +
cmp word ptr [ebp+var_208] ax +
jz loc_103E1E2  +
push dword ptr [ebp+var_41C]  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
mov edx edi +
call sub_103DCBD  +
mov ebx eax +
test ebx ebx +
jnz loc_103E47C  +
mov eax 409h +
mov ecx eax +
cmp cx word ptr [ebp+var_420] +
jnz loc_103E2B9  +
jmp loc_103E3C4  +
test al 3 +
jz loc_103E414  +
call sub_103D82F  +
test byte ptr [ebp+arg_4] 8 +
movzx eax ax +
mov [ebp+var_424] eax +
jz loc_103E2E2  +
lea ecx [ebp+var_15C] +
push ecx  +
push eax  +
lea edi [ebp+var_208] +
lea esi [ebp+var_B0] +
call sub_103DBBD  +
test eax eax +
jz loc_103E414  +
push dword ptr [ebp+var_41C]  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
mov edx esi +
call sub_103DCBD  +
mov ebx eax +
test ebx ebx +
jnz loc_103E47C  +
push dword ptr [ebp+var_41C]  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
lea edx [ebp+var_15C] +
call sub_103DCBD  +
mov ebx eax +
test ebx ebx +
jnz loc_103E47C  +
cmp word ptr [ebp+var_208] ax +
jz loc_103E2B2  +
push dword ptr [ebp+var_41C]  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
mov edx edi +
call sub_103DCBD  +
mov ebx eax +
test ebx ebx +
jnz loc_103E47C  +
mov eax 409h +
mov ecx eax +
cmp cx word ptr [ebp+var_424] +
jz loc_103E3C4  +
lea ecx [ebp+var_15C] +
push ecx  +
push eax  +
xor edi edi +
lea esi [ebp+var_B0] +
call sub_103DBBD  +
mov edx esi +
jmp loc_103E3A3  +
movzx eax ax +
push eax  +
push offset aMui04hx  +
lea eax [ebp+var_B0] +
push 55h  +
push eax  +
call sub_100A257  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
add esp 10h +
push dword ptr [ebp+var_41C]  +
lea edx [ebp+var_B0] +
call sub_103DCBD  +
mov ebx eax +
test ebx ebx +
jnz loc_103E47C  +
lea eax [ebp+var_15C] +
push eax  +
push [ebp+var_424]  +
xor edi edi +
lea esi [ebp+var_B0] +
call sub_103DBBD  +
test eax eax +
jz loc_103E390  +
push 2  +
lea eax [ebp+var_15C] +
push eax  +
call sub_103E5BB  +
movzx eax ax +
test ax ax +
jz loc_103E390  +
movzx eax ax +
push eax  +
push offset aMui04hx  +
mov eax esi +
push 55h  +
push eax  +
call sub_100A257  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
add esp 10h +
push dword ptr [ebp+var_41C]  +
mov edx esi +
call sub_103DCBD  +
mov ebx eax +
test ebx ebx +
jnz loc_103E47C  +
mov eax 409h +
cmp ax word ptr [ebp+var_424] +
jz loc_103E3C4  +
mov edx offset aMui0409 +
push dword ptr [ebp+var_41C]  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
call sub_103DCBD  +
mov ebx eax +
test ebx ebx +
jnz loc_103E47C  +
push dword ptr [ebp+var_41C]  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
xor edx edx +
call sub_103DCBD  +
mov ebx eax +
test ebx ebx +
jz loc_103E478  +
jmp loc_103E47C  +
test byte ptr dword_104BD24 7 +
jz loc_103E414  +
test byte ptr [ebp+arg_4] 8 +
jz loc_103E43F  +
lea eax [ebp+var_15C] +
push eax  +
push edi  +
xor edi edi +
lea esi [ebp+var_B0] +
call sub_103DBBD  +
test eax eax +
jnz loc_103E459  +
test byte ptr [ebp+arg_4] 10h +
jz loc_103E48C  +
push dword ptr [ebp+wLanguage]  +
push [ebp+hModule]  +
call sub_103D541  +
test eax eax +
jnz loc_103E48C  +
push [ebp+hModule]  +
call ds:__imp_FreeLibrary  +
xor eax eax +
jmp loc_103E50A  +
movzx eax di +
push eax  +
push offset aMui04hx  +
lea eax [ebp+var_B0] +
push 55h  +
push eax  +
call sub_100A257  +
add esp 10h +
push dword ptr [ebp+var_41C]  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
lea edx [ebp+var_B0] +
call sub_103DCBD  +
mov ebx eax +
test ebx ebx +
jz loc_103E414  +
push [ebp+hModule]  +
call ds:__imp_FreeLibrary  +
mov eax ebx +
jmp loc_103E50A  +
test byte ptr [ebp+hModule] 1 +
jz loc_103E504  +
push [ebp+hModule]  +
call ds:__imp_FreeLibrary  +
call sub_103D681  +
test al 38h +
jz loc_103E4E1  +
push [ebp+FilePart]  +
lea eax [ebp+LibFileName] +
push dword ptr [ebp+var_41C]  +
push offset aSS  +
push 104h  +
push eax  +
call sub_100A257  +
add esp 14h +
push 0  +
push 1  +
lea eax [ebp+LibFileName] +
push eax  +
call sub_103D5F4  +
jmp loc_103E4FE  +
call sub_103D681  +
push 0  +
and eax 26h +
pop eax  +
setnz al  +
push eax  +
push 0  +
push [ebp+lpLibFileName]  +
call ds:LoadLibraryExW  +
mov [ebp+hModule] eax +
mov eax [ebp+hModule] +
pop edi  +
mov ecx [ebp+var_4] +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1002A8B  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [ebp+arg_4] +
movzx eax word ptr [eax] +
movzx ecx word ptr [ecx] +
cmp cx ax +
jnz loc_103E56F  +
xor eax eax +
pop ebp  +
retn   +
sbb eax eax +
and eax 2 +
dec eax  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
push dword ptr [eax]  +
push [ebp+arg_0]  +
call _wcsicmp  +
pop ecx  +
pop ecx  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
cmp dword ptr [eax+8] 68h +
jnz loc_103E5B0  +
cmp word ptr [eax] 7Fh +
jz loc_103E5B0  +
xor eax eax +
inc eax  +
jmp loc_103E5B2  +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
jz loc_103E610  +
test [ebp+arg_4] 0FFFFFFFDh +
jnz loc_103E610  +
push offset sub_103E57C  +
push 8  +
push 163h  +
push offset off_1024B78  +
push [ebp+arg_0]  +
call bsearch  +
add esp 14h +
test eax eax +
jz loc_103E610  +
mov ecx [eax+4] +
imul ecx ecx +
add ecx offset dword_1023AC0 +
test byte ptr [ebp+arg_4] 2 +
jnz loc_103E60B  +
push ecx  +
call sub_103E597  +
test eax eax +
jnz loc_103E610  +
mov ax [ecx] +
jmp loc_103E61A  +
push 57h  +
call ds:SetLastError  +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_8] 0 +
push esi  +
push edi  +
jl loc_103E6B4  +
cmp [ebp+arg_4] 0 +
jnz loc_103E640  +
cmp [ebp+arg_8] 0 +
jnz loc_103E6B4  +
test [ebp+arg_C] 0FFFFFFFDh +
jnz loc_103E6B4  +
push offset sub_103E555  +
push 0Ch  +
push 164h  +
lea eax [ebp+arg_0] +
push offset dword_1023AC0  +
push eax  +
call bsearch  +
mov ecx eax +
add esp 14h +
test ecx ecx +
jz loc_103E6B4  +
test byte ptr [ebp+arg_C] 2 +
jnz loc_103E67C  +
push ecx  +
call sub_103E597  +
test eax eax +
jnz loc_103E6B4  +
mov edi [ecx+4] +
mov eax edi +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_103E684  +
sub eax edx +
sar eax 1 +
cmp [ebp+arg_4] 0 +
lea esi [eax+1] +
jz loc_103E6B0  +
push esi  +
push edi  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
call sub_100CD46  +
test eax eax +
jge loc_103E6B0  +
push 7Ah  +
jmp loc_103E6B6  +
mov eax esi +
jmp loc_103E6BE  +
push 57h  +
call ds:SetLastError  +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
xor edi edi +
cmp [ebp+arg_0] edi +
jz loc_103E777  +
cmp [ebp+arg_8] edi +
jle loc_103E6EC  +
cmp [ebp+arg_4] edi +
jz loc_103E777  +
cmp [ebp+arg_8] edi +
jl loc_103E777  +
test [ebp+arg_C] 0FFFFFFFDh +
jnz loc_103E777  +
push offset sub_103E57C  +
push 8  +
push 163h  +
push offset off_1024B78  +
push [ebp+arg_0]  +
call bsearch  +
add esp 14h +
cmp eax edi +
jz loc_103E777  +
mov ecx [eax+4] +
imul ecx ecx +
mov edx offset dword_1023AC0 +
add ecx edx +
test byte ptr [ebp+arg_C] 2 +
jnz loc_103E738  +
push ecx  +
call sub_103E597  +
test eax eax +
jnz loc_103E777  +
mov eax [ecx+8] +
imul eax eax +
add eax edx +
mov eax [eax+4] +
mov ecx eax +
lea edx [ecx+2] +
mov si [ecx] +
inc ecx  +
inc ecx  +
cmp si di +
jnz loc_103E748  +
sub ecx edx +
sar ecx 1 +
lea esi [ecx+1] +
cmp [ebp+arg_4] edi +
jz loc_103E773  +
push esi  +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
call sub_100CD46  +
test eax eax +
jge loc_103E773  +
push 7Ah  +
jmp loc_103E779  +
mov eax esi +
jmp loc_103E781  +
push 57h  +
call ds:SetLastError  +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_4] +
test edx edx +
jz loc_103E7CF  +
mov eax [ebp+arg_0] +
push esi  +
mov esi [eax] +
mov [edx] esi +
mov [eax] edx +
pop esi  +
cmp eax [ecx+8] +
jnz loc_103E7CC  +
mov [ecx+8] edx +
inc dword ptr [ecx+0Ch]  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
test edx edx +
jnz loc_103E7E8  +
xor eax eax +
jmp loc_103E805  +
lea eax [ecx+4] +
cmp edx eax +
jz loc_103E7E4  +
mov eax [edx] +
push esi  +
mov esi [eax] +
mov [edx] esi +
pop esi  +
cmp eax [ecx+8] +
jnz loc_103E7FF  +
mov [ecx+8] edx +
dec dword ptr [ecx+0Ch]  +
and dword ptr [eax] 0 +
pop ebp  +
retn 4  +
***
mov eax ecx +
lea ecx [eax+4] +
and dword ptr [ecx] 0 +
and dword ptr [eax+0Ch] 0 +
mov [ecx] ecx +
mov [eax] ecx +
mov [eax+8] eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
mov ecx [ebp+arg_0] +
mov edx dword_104A098 +
push ebx  +
lea ecx [ecx+eax*4-4] +
push esi  +
mov esi dword_104A0A0 +
mov [ebp+arg_0] ecx +
push edi  +
mov ecx 0FFh +
test eax eax +
jz loc_103E899  +
mov eax [ebp+arg_8] +
mov edi [ebp+arg_8] +
mov ebx dword_104A09C +
shr eax 10h +
shr edi 8 +
and eax ecx +
mov eax [ebx+eax*4] +
mov ebx dword_104A090 +
and edi ecx +
xor eax [esi+edi*4] +
mov edi [ebp+arg_8] +
shr edi 18h +
xor eax [ebx+edi*4] +
mov edi [ebp+arg_8] +
and edi ecx +
xor eax [edx+edi*4] +
mov edi [ebp+arg_0] +
xor eax [edi] +
dec [ebp+arg_4]  +
sub [ebp+arg_0] 4 +
cmp [ebp+arg_4] 0 +
mov [ebp+arg_8] eax +
jnz loc_103E851  +
mov eax [ebp+arg_8] +
mov edi [ebp+arg_8] +
mov ebx dword_104A09C +
shr eax 10h +
and eax ecx +
mov eax [ebx+eax*4] +
shr edi 8 +
and edi ecx +
xor eax [esi+edi*4] +
mov esi [ebp+arg_8] +
mov edi dword_104A090 +
shr esi 18h +
xor eax [edi+esi*4] +
mov esi [ebp+arg_8] +
and esi ecx +
xor eax [edx+esi*4] +
pop edi  +
xor eax [ebp+arg_8] +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_4] +
push esi  +
mov esi dword_104A098 +
push edi  +
mov edi [ebp+arg_0] +
mov eax edi +
neg eax  +
xor ecx ecx +
and eax 3 +
jmp loc_103E911  +
test eax eax +
jz loc_103E915  +
mov edx ecx +
shr edx 18h +
shl ecx 8 +
xor ecx [esi+edx*4] +
movzx edx byte ptr [edi] +
xor ecx edx +
dec ebx  +
inc edi  +
dec eax  +
test ebx ebx +
jnz loc_103E8FA  +
mov [ebp+arg_0] ebx +
shr [ebp+arg_0] 2 +
push ecx  +
push [ebp+arg_0]  +
push edi  +
call sub_103E827  +
mov ecx eax +
mov eax [ebp+arg_0] +
shl eax 2 +
add edi eax +
sub ebx eax +
jz loc_103E94A  +
mov eax ecx +
shr eax 18h +
shl ecx 8 +
xor ecx [esi+eax*4] +
movzx eax byte ptr [edi] +
xor ecx eax +
dec ebx  +
inc edi  +
test ebx ebx +
jnz loc_103E934  +
mov ebx dword_104A09C +
mov eax ecx +
shr eax 10h +
mov edx 0FFh +
and eax edx +
mov eax [ebx+eax*4] +
mov ebx dword_104A0A0 +
mov edi ecx +
shr edi 8 +
and edi edx +
xor eax [ebx+edi*4] +
mov ebx dword_104A090 +
mov edi ecx +
shr edi 18h +
xor eax [ebx+edi*4] +
mov edi ecx +
and edi edx +
xor eax [esi+edi*4] +
pop edi  +
pop esi  +
xor eax ecx +
pop ebx  +
pop ebp  +
retn 8  +
***
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov [ebp-8] ecx +
mov eax [ebp-8] +
mov eax [eax] +
mov [ebp-4] eax +
push dword ptr [ebp-4]  +
call sub_10085E3  +
pop ecx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov [ebp-8] ecx +
mov eax [ebp-8] +
mov eax [eax+2Ch] +
mov [ebp-4] eax +
push dword ptr [ebp-4]  +
call sub_10085E3  +
pop ecx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov edx [eax] +
mov [ecx] edx +
xor edx edx +
mov [ecx+4] edx +
cmp [eax+4] edx +
jz loc_103E9F4  +
mov dword ptr [ecx+4] 1 +
push esi  +
mov esi [eax+20h] +
mov [ecx+20h] esi +
push edi  +
lea esi [eax+8] +
lea edi [ecx+8] +
movs   +
movs   +
movs   +
movs   +
mov esi [eax+1Ch] +
mov [ecx+1Ch] esi +
mov esi [eax+18h] +
mov [ecx+18h] esi +
pop edi  +
mov [eax+20h] edx +
mov [eax+1Ch] edx +
mov [eax+18h] edx +
pop esi  +
pop ebp  +
retn 4  +
***
xor [edi+edi*8] ebx +
jmp dword ptr [edx]  +
***
movs   +
sbb edi edi +
jmp dword ptr [edx]  +
***
ror dword ptr [ecx] 0FFh +
jmp dword ptr [edx]  +
***
inc ecx  +
add al 0FFh +
jmp dword ptr [edx]  +
***
sal edi 0FEh +
jmp dword ptr [edx]  +
***
retn   +
***
popa   +
loop loc_104275D  +
jmp dword ptr [edx]  +
***
cdq   +
loopne loc_1042925  +
jmp dword ptr [edx]  +
***
push ebp  +
loopne loc_1042969  +
jmp dword ptr [edx]  +
***
std   +
fsin   +
jmp dword ptr [edx]  +
***
cdq   +
fdivr st st(6) +
jmp dword ptr [edx]  +
***
icebp   +
sar esi cl +
jmp dword ptr [edx]  +
***
popf   +
sar esi cl +
jmp dword ptr [edx]  +
***
leave   +
sar dh 1 +
jmp dword ptr [edx]  +
***
push 2  +
push 4  +
lea eax [ebp-3Ch] +
push eax  +
call sub_1008074  +
retn   +
***
lea ecx [ebp-14h] +
jmp loc_1007DCD  +
***
mov eax [ebp-10h] +
and eax 1 +
jz locret_1043ACC  +
and dword ptr [ebp-10h] 0FFFFFFFEh +
lea ecx [ebp-2Ch] +
jmp loc_1007DCD  +
***
retn   +
***
lea ecx [ebp-7Ch] +
jmp sub_1003B4C  +
***
lea ecx [ebp+8] +
jmp loc_1007DCD  +
***
mov eax [ebp-10h] +
and eax 4 +
jz locret_1043AF1  +
and dword ptr [ebp-10h] 0FFFFFFFBh +
lea ecx [ebp-34h] +
jmp loc_1007DCD  +
***
retn   +
***
lea ecx [ebp-5Ch] +
jmp sub_1003B4C  +
***
retf   +
***
retf 0FFFEh  +
***
dec ebp  +
retf 0FFFEh  +
***
retn 0FFFEh  +
***
retn   +
***
push ecx  +
mov bh 0FEh +
jmp dword ptr [edx]  +
***
pop ecx  +
retn   +
***
retn   +
***
mov ecx offset unk_104BBC4 +
jmp sub_10326BE  +
***
mov dword_104BCF0 offset off_1002B70 +
retn   +
***
mov dword_104BCDC offset off_1002B70 +
retn   +
***
mov ecx offset dword_104BD08 +
jmp sub_10261EA  +
***
retf 49Bh  +
***
retn 5302h  +
***
jns $+2  +
retf 4802h  +
***
pop edi  +
jnb $+2  +
jmp far ptr 7063h:6D656D04h  +
***
