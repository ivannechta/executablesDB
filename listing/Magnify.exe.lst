mov bh 51h +
jl loc_1001E56  +
sbb [esi+edx*4-0C9C061h] al +
inc ebp  +
les eax [ebx+esi*8-75D50A5Fh] +
retn   +
***
lods   +
and al 0FFh +
sub esp [eax] +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_10] +
test edx edx +
jz loc_1002F46  +
cmp word ptr [edx] 0 +
jnz loc_1002F2B  +
push 0Eh  +
jmp loc_1002F48  +
mov eax edx +
push esi  +
lea esi [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_1002F31  +
sub eax esi +
sar eax 1 +
lea eax [eax+eax+2] +
pop esi  +
jmp loc_1002F49  +
push 0Ah  +
pop eax  +
test edx edx +
jz loc_1002F5A  +
cmp word ptr [edx] 0 +
jnz loc_1002F5F  +
mov edx offset aNull +
jmp loc_1002F5F  +
mov edx offset aNull_0 +
push 0  +
push eax  +
push edx  +
push [ebp+arg_8]  +
push [ebp+arg_C]  +
push 2Bh  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call TraceMessage  +
add esp 20h +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_10] +
test edx edx +
jz loc_1002FB3  +
cmp word ptr [edx] 0 +
jnz loc_1002F98  +
push 0Eh  +
jmp loc_1002FB5  +
mov eax edx +
push esi  +
lea esi [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_1002F9E  +
sub eax esi +
sar eax 1 +
lea eax [eax+eax+2] +
pop esi  +
jmp loc_1002FB6  +
push 0Ah  +
pop eax  +
test edx edx +
jz loc_1002FC7  +
cmp word ptr [edx] 0 +
jnz loc_1002FCC  +
mov edx offset aNull +
jmp loc_1002FCC  +
mov edx offset aNull_0 +
push 0  +
push 4  +
lea ecx [ebp+arg_14] +
push ecx  +
push eax  +
push edx  +
push [ebp+arg_8]  +
push [ebp+arg_C]  +
push 2Bh  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call TraceMessage  +
add esp 28h +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
push esi  +
mov esi ecx +
mov ecx [ebp+arg_0] +
mov [esi] eax +
mov [esi+4] ecx +
mov eax off_1018000 +
cmp eax offset off_1018000 +
jz loc_100302D  +
test byte ptr [eax+1Ch] 40h +
jz loc_100302D  +
push ecx  +
push offset dword_1001748  +
push 0Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1002F15  +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebx  +
push esi  +
mov esi ecx +
mov eax [esi] +
push edi  +
mov ebx offset off_1018000 +
mov edi offset dword_1001748 +
test eax eax +
jz loc_1003077  +
mov ecx [eax] +
test ecx ecx +
jge loc_1003077  +
mov eax off_1018000 +
cmp eax ebx +
jz loc_1003097  +
test byte ptr [eax+1Ch] 4 +
jz loc_100307C  +
push ecx  +
push dword ptr [esi+4]  +
push edi  +
push 0Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1002F82  +
mov eax off_1018000 +
cmp eax ebx +
jz loc_1003097  +
test byte ptr [eax+1Ch] 40h +
jz loc_1003097  +
push dword ptr [esi+4]  +
push edi  +
push 0Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1002F15  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+arg_8]  +
push [ebp+arg_C]  +
push 2Bh  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call TraceMessage  +
add esp 18h +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push 4  +
lea eax [ebp+arg_10] +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_C]  +
push 2Bh  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call TraceMessage  +
add esp 20h +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
xor ecx ecx +
xor edx edx +
mov [eax+10h] ecx +
mov [eax] ecx +
mov byte ptr [eax+18h] 1 +
mov [eax+19h] cl +
mov [eax+1Ah] dx +
mov [eax+1Ch] ecx +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax [ebp+10h] +
xor edx edx +
push ebx  +
mov [eax] edx +
mov eax [ebp+8] +
sub eax 4 +
push esi  +
mov esi [ebp+0Ch] +
push edi  +
mov edi esi +
jz loc_1003149  +
dec eax  +
jz loc_1003140  +
push 57h  +
pop eax  +
jmp loc_10031B7  +
xor ebx ebx +
xor eax eax +
mov [ebp+0Fh] al +
jmp loc_100316F  +
push dword ptr [ebp+14h]  +
call ds:GetTraceLoggerHandle  +
mov ebx eax +
push edx  +
push ebx  +
mov [ebp-4] edx +
call ds:GetTraceEnableLevel  +
push dword ptr [ebp-4]  +
mov [ebp+0Fh] al +
push ebx  +
call ds:GetTraceEnableFlags  +
mov edx [ebp-4] +
movzx ecx word ptr [esi+1Ah] +
test cl 1 +
jz loc_1003198  +
cmp dword ptr [esi+10h] 0 +
jz loc_1003198  +
mov ecx [esi+10h] +
mov [ecx] ebx +
mov [ecx+4] edx +
movzx ecx byte ptr [ebp+0Fh] +
mov edx [esi+10h] +
mov [edx+0Ch] ecx +
mov ecx [esi+10h] +
mov [ecx+8] eax +
jmp loc_10031B5  +
test cl 2 +
jz loc_10031A6  +
mov esi [esi+10h] +
test esi esi +
jz loc_10031A6  +
mov edi esi +
mov cl [ebp+0Fh] +
mov [edi+10h] ebx +
mov [edi+14h] edx +
mov [edi+19h] cl +
mov [edi+1Ch] eax +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push esi  +
mov esi off_1018000 +
push edi  +
mov edi offset dword_101859C +
jmp loc_1003202  +
mov eax [edi] +
and [ebp+var_4] 0 +
lea ecx [esi+8] +
push ecx  +
push 0  +
push 0  +
lea ecx [ebp+var_8] +
push ecx  +
push 1  +
push eax  +
push esi  +
push offset loc_100311A  +
add edi 4 +
mov [ebp+var_8] eax +
call ds:RegisterTraceGuidsW  +
mov esi [esi] +
test esi esi +
jnz loc_10031D9  +
pop edi  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push esi  +
mov esi off_1018000 +
push edi  +
mov edi offset off_1018000 +
cmp esi edi +
jz loc_100324E  +
jmp loc_1003244  +
mov eax [esi+8] +
mov ecx [esi+0Ch] +
mov edx eax +
or edx ecx +
jz loc_1003242  +
push ecx  +
push eax  +
call ds:UnregisterTraceGuids  +
and dword ptr [esi+8] 0 +
and dword ptr [esi+0Ch] 0 +
mov esi [esi] +
test esi esi +
jnz loc_1003226  +
mov off_1018000 edi +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1C4h +
and [ebp+var_4] 0 +
push ebx  +
push esi  +
mov esi ds:GetKeyState +
push edi  +
push 0A2h  +
call esi  +
mov edi 8000h +
xor ebx ebx +
mov ecx edi +
inc ebx  +
test ax cx +
jz loc_1003287  +
mov [ebp+var_4] ebx +
push 0A3h  +
call esi  +
push 2  +
test ax di +
pop edi  +
jz loc_1003299  +
or [ebp+var_4] edi +
push 0A4h  +
call esi  +
mov ecx 8000h +
test ax cx +
jz loc_10032AE  +
or [ebp+var_4] 4 +
push 0A5h  +
call esi  +
mov ecx 8000h +
test ax cx +
jz loc_10032C3  +
or [ebp+var_4] 8 +
push 0A0h  +
call esi  +
mov ecx 8000h +
test ax cx +
jz loc_10032D8  +
or [ebp+var_4] 10h +
push 0A1h  +
call esi  +
mov ecx 8000h +
test ax cx +
jz loc_10032ED  +
or [ebp+var_4] 20h +
and [ebp+pInputs.type] 0 +
push 1BCh  +
lea eax [ebp+pInputs.anonymous_0] +
push 0  +
push eax  +
call memset  +
add esp 0Ch +
xor eax eax +
test byte ptr [ebp+var_4] bl +
jz loc_100332B  +
mov eax 0A2h +
mov word ptr [ebp+pInputs.anonymous_0] ax +
mov [ebp+pInputs.type] ebx +
mov dword ptr [ebp+pInputs.anonymous_0+4] edi +
mov eax ebx +
test byte ptr [ebp+var_4] 2 +
push 3  +
pop esi  +
jz loc_100334F  +
mov ecx eax +
imul ecx ecx +
lea ecx [ebp+ecx+pInputs] +
mov edx 0A3h +
mov [ecx] ebx +
mov [ecx+4] dx +
mov [ecx+8] esi +
inc eax  +
test byte ptr [ebp+var_4] 4 +
jz loc_1003370  +
mov ecx eax +
imul ecx ecx +
lea ecx [ebp+ecx+pInputs] +
mov edx 0A4h +
mov [ecx] ebx +
mov [ecx+4] dx +
mov [ecx+8] edi +
inc eax  +
test byte ptr [ebp+var_4] 8 +
jz loc_1003391  +
mov ecx eax +
imul ecx ecx +
lea ecx [ebp+ecx+pInputs] +
mov edx 0A5h +
mov [ecx] ebx +
mov [ecx+4] dx +
mov [ecx+8] esi +
inc eax  +
test byte ptr [ebp+var_4] 10h +
jz loc_10033B2  +
mov ecx eax +
imul ecx ecx +
lea ecx [ebp+ecx+pInputs] +
mov edx 0A0h +
mov [ecx] ebx +
mov [ecx+4] dx +
mov [ecx+8] edi +
inc eax  +
test byte ptr [ebp+var_4] 20h +
jz loc_10033D3  +
mov ecx eax +
imul ecx ecx +
lea ecx [ebp+ecx+pInputs] +
mov edx 0A1h +
mov [ecx] ebx +
mov [ecx+4] dx +
mov [ecx+8] edi +
inc eax  +
mov ecx eax +
imul ecx ecx +
lea ecx [ebp+ecx+pInputs] +
and dword ptr [ecx+8] 0 +
mov [ecx] ebx +
push 5Bh  +
pop edx  +
mov [ecx+4] dx +
inc eax  +
mov ecx eax +
imul ecx ecx +
lea ecx [ebp+ecx+pInputs] +
and dword ptr [ecx+8] 0 +
mov [ecx] ebx +
push 55h  +
pop edx  +
mov [ecx+4] dx +
inc eax  +
mov ecx eax +
imul ecx ecx +
lea ecx [ebp+ecx+pInputs] +
mov [ecx+4] dx +
mov [ecx] ebx +
mov [ecx+8] edi +
inc eax  +
mov ecx eax +
imul ecx ecx +
push 5Bh  +
lea ecx [ebp+ecx+pInputs] +
pop edx  +
mov [ecx] ebx +
mov [ecx+4] dx +
mov [ecx+8] edi +
push 1Ch  +
lea ecx [ebp+pInputs] +
push ecx  +
inc eax  +
push eax  +
call ds:SendInput  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 210h +
mov eax dword_101852C +
xor eax ebp +
mov [ebp+var_4] eax +
and [ebp+var_208] 0 +
push esi  +
mov esi [ebp+arg_0] +
xor eax eax +
mov [ebp+pvInfo] ax +
test esi esi +
jnz loc_100348C  +
mov [ebp+var_208] 80070057h +
jmp loc_100355B  +
call ds:GetCurrentThreadId  +
push eax  +
call ds:GetThreadDesktop  +
mov [ebp+hDesktop] eax +
test eax eax +
jz loc_10034C3  +
lea ecx [ebp+nLengthNeeded] +
push ecx  +
push 0FFh  +
lea ecx [ebp+pvInfo] +
push ecx  +
push 2  +
push eax  +
call ds:GetUserObjectInformationW  +
test eax eax +
jnz loc_10034CF  +
mov [ebp+var_208] 80004005h +
jmp loc_1003546  +
push edi  +
mov edi ds:_wcsicmp +
lea eax [ebp+pvInfo] +
push offset aDefault  +
push eax  +
call edi  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_10034F2  +
mov dword ptr [esi] 1 +
jmp loc_1003545  +
lea eax [ebp+pvInfo] +
push offset aWinlogon  +
push eax  +
call edi  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_100350E  +
mov dword ptr [esi] 3 +
jmp loc_1003545  +
lea eax [ebp+pvInfo] +
push offset aScreenSaver  +
push eax  +
call edi  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_100352A  +
mov dword ptr [esi] 2 +
jmp loc_1003545  +
lea eax [ebp+pvInfo] +
push offset aDisplay_cplDes  +
push eax  +
call edi  +
neg eax  +
sbb eax eax +
neg eax  +
pop ecx  +
add eax 4 +
pop ecx  +
mov [esi] eax +
pop edi  +
cmp [ebp+hDesktop] 0 +
jz loc_100355B  +
push [ebp+hDesktop]  +
call ds:CloseDesktop  +
mov ecx [ebp+var_4] +
mov eax [ebp+var_208] +
xor ecx ebp +
pop esi  +
call sub_10149A5  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+nCode] 0 +
push ebx  +
mov ebx [ebp+arg_8] +
jnz loc_10035E3  +
cmp [ebp+wParam] 100h +
jnz loc_10035E3  +
test ebx ebx +
jz loc_10035E3  +
mov eax [ebx] +
cmp eax 0BBh +
jz loc_100359F  +
cmp eax 6Bh +
jnz loc_10035E3  +
push esi  +
mov esi ds:GetAsyncKeyState +
push edi  +
push 5Bh  +
call esi  +
mov edi 8000h +
mov ecx edi +
test ax cx +
jnz loc_10035C0  +
push 5Ch  +
call esi  +
test ax di +
jz loc_10035E1  +
push 0  +
push offset ClassName  +
call ds:FindWindowW  +
test eax eax +
jz loc_10035E1  +
push 0  +
push 0  +
push 312h  +
push eax  +
call ds:PostMessageW  +
pop edi  +
pop esi  +
push ebx  +
push [ebp+wParam]  +
push [ebp+nCode]  +
push 0  +
call ds:CallNextHookEx  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
push 1  +
push 1000000h  +
push [ebp+arg_0]  +
call InitProcessPriv  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+28h] +
xor ecx ecx +
cmp eax ecx +
jz loc_100366A  +
mov edx [ebp+0Ch] +
sub edx ecx +
jz loc_1003658  +
dec edx  +
jnz loc_100366A  +
mov cl [ebp+10h] +
mov [eax+28h] cl +
mov ecx [ebp+14h] +
mov [eax+10h] ecx +
mov ecx [ebp+18h] +
mov [eax+14h] ecx +
mov ecx [ebp+1Ch] +
mov [eax+18h] ecx +
mov ecx [ebp+20h] +
mov dword ptr [eax+24h] 1 +
jmp loc_1003667  +
mov [eax+24h] ecx +
mov [eax+28h] cl +
mov [eax+10h] ecx +
mov [eax+14h] ecx +
mov [eax+18h] ecx +
mov [eax+1Ch] ecx +
pop ebp  +
retn 24h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_C] +
mov ecx [eax] +
or ecx [eax+4] +
jz loc_1003686  +
xor eax eax +
jmp loc_1003696  +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call ds:EventRegister  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
mov eax [esi] +
mov ecx [esi+4] +
mov edx eax +
or edx ecx +
jnz loc_10036B7  +
xor eax eax +
jmp loc_10036C6  +
push ecx  +
push eax  +
call ds:EventUnregister  +
and dword ptr [esi] 0 +
and dword ptr [esi+4] 0 +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push 0  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call ds:EventWrite  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push esi  +
lea eax [ebp+var_8] +
xor esi esi +
push eax  +
push esi  +
mov [ebp+var_8] esi +
mov [ebp+var_C] 5 +
call ds:GetCurrentProcess  +
push eax  +
call ds:IsProcessInJob  +
cmp [ebp+var_8] esi +
jz loc_1003721  +
cmp eax esi +
jnz loc_1003785  +
lea eax [ebp+var_C] +
push eax  +
call sub_1003450  +
test eax eax +
jl loc_1003785  +
cmp [ebp+var_C] 1 +
jnz loc_1003785  +
push esi  +
lea eax [ebp+hKey] +
push eax  +
push esi  +
push 2001Fh  +
push 1  +
push esi  +
push esi  +
push offset SubKey  +
push 80000001h  +
mov [ebp+hKey] esi +
call ds:RegCreateKeyExW  +
test eax eax +
jnz loc_1003785  +
push 4  +
lea eax [ebp+Data] +
push eax  +
push 4  +
push esi  +
push offset ValueName  +
push [ebp+hKey]  +
mov dword ptr [ebp+Data] 3 +
call ds:RegSetValueExW  +
push [ebp+hKey]  +
test eax eax +
jz loc_100378A  +
call ds:RegCloseKey  +
xor eax eax +
pop esi  +
leave   +
retn   +
call ds:RegCloseKey  +
call sub_1003256  +
xor eax eax +
inc eax  +
jmp loc_1003787  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push esi  +
lea eax [ebp+var_8] +
push eax  +
mov [ebp+var_8] 5 +
call sub_1003450  +
test eax eax +
jl loc_1003815  +
cmp [ebp+var_8] 1 +
jnz loc_1003815  +
xor esi esi +
push esi  +
lea eax [ebp+hKey] +
push eax  +
push esi  +
push 2001Fh  +
push 1  +
push esi  +
push esi  +
push offset SubKey  +
push 80000001h  +
mov [ebp+hKey] esi +
call ds:RegCreateKeyExW  +
test eax eax +
jnz loc_1003815  +
push 4  +
lea eax [ebp+Data] +
push eax  +
push 4  +
push esi  +
push offset ValueName  +
push [ebp+hKey]  +
mov dword ptr [ebp+Data] 2 +
call ds:RegSetValueExW  +
push [ebp+hKey]  +
test eax eax +
jz loc_100381A  +
call ds:RegCloseKey  +
xor eax eax +
pop esi  +
leave   +
retn   +
call ds:RegCloseKey  +
call sub_1003256  +
xor eax eax +
inc eax  +
jmp loc_1003817  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10Ch +
mov eax dword_101852C +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push ebx  +
push esi  +
mov esi [ebp+arg_8] +
push edi  +
xor ebx ebx +
push ebx  +
push ebx  +
xor edi edi +
inc edi  +
push edi  +
push ebx  +
mov [ebp+var_DC] eax +
call ds:HeapSetInformation  +
push 64h  +
lea eax [ebp+WindowName] +
push eax  +
push 66h  +
push ebx  +
call ds:GetModuleHandleW  +
push eax  +
call ds:LoadStringW  +
mov [ebp+var_F0] edi +
mov [ebp+var_E0] ebx +
mov [ebp+var_E8] ebx +
cmp esi ebx +
jz loc_1003A92  +
movzx eax word ptr [esi] +
cmp ax 2Dh +
jz loc_10038A8  +
cmp ax 2Fh +
jnz loc_1003A92  +
mov eax ds:dword_1001A00 +
mov dword ptr [ebp+var_C] eax +
mov eax ds:dword_1001A04 +
mov [ebp+var_8] eax +
lea eax [ebp+var_C] +
push eax  +
push esi  +
call ds:wcstok  +
pop ecx  +
pop ecx  +
mov [ebp+hObject] eax +
cmp eax ebx +
jz loc_1003A9B  +
mov esi ds:CompareStringW +
push 0FFFFFFFFh  +
push offset String2  +
push 0FFFFFFFFh  +
push [ebp+hObject]  +
push edi  +
push 7Fh  +
call esi  +
cmp eax 2 +
jnz loc_10038FD  +
push 1388h  +
call ds:Sleep  +
push 0FFFFFFFFh  +
push offset aNoutilman  +
push 0FFFFFFFFh  +
push [ebp+hObject]  +
push edi  +
push 7Fh  +
call esi  +
cmp eax 2 +
jnz loc_100391C  +
mov [ebp+var_F0] ebx +
push 0FFFFFFFFh  +
push offset aFullscreen  +
push 0FFFFFFFFh  +
push [ebp+hObject]  +
push edi  +
push 7Fh  +
call esi  +
cmp eax 2 +
jnz loc_100393F  +
mov [ebp+var_E0] 3 +
push 0FFFFFFFFh  +
push offset aLens  +
push 0FFFFFFFFh  +
push [ebp+hObject]  +
push edi  +
push 7Fh  +
call esi  +
cmp eax 2 +
jnz loc_1003962  +
mov [ebp+var_E0] 4 +
push 0FFFFFFFFh  +
push offset aDocked  +
push 0FFFFFFFFh  +
push [ebp+hObject]  +
push edi  +
push 7Fh  +
call esi  +
push 2  +
pop ecx  +
cmp eax ecx +
jnz loc_1003983  +
mov [ebp+var_E0] ecx +
push 0FFFFFFFFh  +
push offset aHilight  +
push 0FFFFFFFFh  +
push [ebp+hObject]  +
push edi  +
push 7Fh  +
call esi  +
cmp eax 2 +
jnz loc_10039D2  +
call sub_101395F  +
mov dword_1018594 eax +
call sub_101395F  +
mov dword_1018598 eax +
mov edx [eax] +
push 0FF00FFh  +
mov ecx eax +
call dword ptr [edx+0Ch]  +
call sub_101395F  +
mov dword_1018590 eax +
mov edx [eax] +
push 0FFFF00h  +
mov ecx eax +
call dword ptr [edx+0Ch]  +
push 0FFFFFFFFh  +
push offset aGlobalhotkey  +
push 0FFFFFFFFh  +
push [ebp+hObject]  +
push edi  +
push 7Fh  +
call esi  +
cmp eax 2 +
jz loc_1003A0B  +
lea eax [ebp+var_C] +
push eax  +
push ebx  +
call ds:wcstok  +
pop ecx  +
pop ecx  +
mov [ebp+hObject] eax +
cmp eax ebx +
jnz loc_10038D9  +
jmp loc_1003A9B  +
push edi  +
push 1736h  +
push ebx  +
call WinSqmIncrementDWORD  +
lea eax [ebp+hhk] +
push eax  +
mov [ebp+hhk] ebx +
call sub_1010CF9  +
test eax eax +
jge loc_1003A34  +
xor eax eax +
jmp loc_1003F57  +
push ebx  +
lea eax [ebp+hObject] +
push eax  +
push ebx  +
push 2001Fh  +
push edi  +
push ebx  +
push ebx  +
push offset aSoftwareMicr_0  +
push 80000001h  +
mov [ebp+hObject] ebx +
call ds:RegCreateKeyExW  +
cmp eax ebx +
jz loc_1003A86  +
mov ecx off_1018000 +
cmp ecx offset off_1018000 +
jz loc_1003A86  +
test byte ptr [ecx+1Ch] 4 +
jz loc_1003A86  +
push eax  +
push offset dword_1001758  +
push 0Ah  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10030C6  +
push [ebp+hObject]  +
call ds:RegCloseKey  +
call sub_10036F1  +
test eax eax +
jnz loc_1003A2D  +
lea eax [ebp+phkResult] +
push eax  +
push 0F003Fh  +
push ebx  +
push offset aSoftwareMicr_0  +
mov esi 80000001h +
push esi  +
mov [ebp+phkResult] ebx +
call ds:RegOpenKeyExW  +
test eax eax +
jnz loc_1003AE3  +
push ebx  +
push ebx  +
push offset aSoftwareMicr_0  +
push esi  +
mov [ebp+var_E8] edi +
call ds:RegDeleteKeyExW  +
push [ebp+phkResult]  +
call ds:RegCloseKey  +
push offset Name  +
push edi  +
push ebx  +
call ds:CreateMutexW  +
mov [ebp+hObject] eax +
cmp eax ebx +
jnz loc_1003B02  +
or eax 0FFFFFFFFh +
jmp loc_1003F57  +
call ds:GetLastError  +
cmp eax 0B7h +
jnz loc_1003B41  +
push [ebp+hObject]  +
call ds:CloseHandle  +
lea eax [ebp+WindowName] +
push eax  +
push offset ClassName  +
call ds:FindWindowW  +
cmp eax ebx +
jz loc_1003A2D  +
push eax  +
call ds:SetForegroundWindow  +
jmp loc_1003A2D  +
mov esi offset unk_10185A0 +
push esi  +
call sub_10030F2  +
push offset aMicrosoftMagni  +
mov dword_101859C offset dword_1001738 +
mov off_1018000 esi +
call sub_10031C3  +
mov eax off_1018000 +
cmp eax offset off_1018000 +
jz loc_1003B8A  +
test byte ptr [eax+1Ch] 10h +
jz loc_1003B8A  +
push offset dword_1001758  +
push 0Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10030A0  +
push offset dword_1018558  +
push offset unk_1018560  +
push offset loc_100361C  +
push offset dword_1001684  +
call sub_1003673  +
mov edi 10000h +
mov esi 80000000h +
cmp dword_1018584 ebx +
jz loc_1003C08  +
mov al byte_1018588 +
cmp al 4 +
jnb loc_1003BC2  +
cmp al bl +
jnz loc_1003C08  +
mov eax dword_1018570 +
mov ecx dword_1018574 +
and eax edi +
and ecx esi +
or eax ecx +
jz loc_1003C08  +
mov eax dword_1018578 +
mov edx dword_101857C +
mov ecx eax +
and ecx edi +
and edx esi +
cmp ecx eax +
jnz loc_1003C08  +
cmp edx dword_101857C +
jnz loc_1003C08  +
push offset dword_1001698  +
push dword_101855C  +
push dword_1018558  +
call sub_10036D0  +
push 1  +
push 64h  +
call ds:SetProcessShutdownParameters  +
push ebx  +
push offset word_100190C  +
call ds:RegisterApplicationRestart  +
mov eax [ebp+var_DC] +
push ebx  +
mov hmod eax +
call ds:CoInitialize  +
cmp eax ebx +
jge loc_1003C78  +
mov ecx off_1018000 +
cmp ecx offset off_1018000 +
jz loc_1003C5B  +
test byte ptr [ecx+1Ch] 4 +
jz loc_1003C5B  +
push eax  +
push offset dword_1001758  +
push 0Ch  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10030C6  +
push [ebp+hObject]  +
call ds:ReleaseMutex  +
push [ebp+hObject]  +
call ds:CloseHandle  +
jmp loc_1003A2D  +
push 1  +
push 8  +
call sub_10035FC  +
cmp eax ebx +
mov [ebp+var_DC] eax +
jl loc_1003CA6  +
push 2  +
call InitThread  +
cmp eax ebx +
mov [ebp+var_DC] eax +
jge loc_1003CF3  +
push 1000000h  +
call UnInitProcessPriv  +
mov eax off_1018000 +
cmp eax offset off_1018000 +
jz loc_1003CD0  +
test byte ptr [eax+1Ch] 4 +
jz loc_1003CD0  +
push [ebp+var_DC]  +
push offset dword_1001758  +
push 0Dh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10030C6  +
push [ebp+hObject]  +
call ds:ReleaseMutex  +
push [ebp+hObject]  +
call ds:CloseHandle  +
call ds:CoUninitialize  +
jmp loc_1003A2D  +
lea eax [ebp+var_FC] +
push eax  +
mov [ebp+var_FC.dwSize] 8 +
mov [ebp+var_FC.dwICC] 0C000h +
call ds:InitCommonControlsEx  +
test eax eax +
jnz loc_1003D1E  +
call ds:InitCommonControls  +
push ebx  +
push hmod  +
push offset fn  +
push 0Dh  +
call ds:SetWindowsHookExW  +
mov [ebp+hhk] eax +
xor eax eax +
inc eax  +
mov [ebp+var_10C] eax +
mov [ebp+var_100] eax +
push ebx  +
lea eax [ebp+var_10C] +
push eax  +
lea eax [ebp+var_F4] +
push eax  +
mov [ebp+var_108] ebx +
mov [ebp+var_104] ebx +
call GdiplusStartup  +
cmp eax ebx +
jz loc_1003D9F  +
mov ecx off_1018000 +
cmp ecx offset off_1018000 +
jz loc_1003C5B  +
test byte ptr [ecx+1Ch] 4 +
jz loc_1003C5B  +
push eax  +
push offset dword_1001758  +
push 0Eh  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10030C6  +
jmp loc_1003C5B  +
push ebx  +
push ebx  +
push 1  +
push 47h  +
call ds:SystemParametersInfoW  +
push ebx  +
push 47h  +
push 1Ah  +
push 0FFFFh  +
call ds:PostMessageW  +
push 1  +
push 1AB1h  +
push ebx  +
call WinSqmIncrementDWORD  +
cmp dword_1018584 ebx +
jz loc_1003E23  +
mov al byte_1018588 +
cmp al 4 +
jnb loc_1003DDD  +
cmp al bl +
jnz loc_1003E23  +
mov eax dword_1018570 +
mov ecx dword_1018574 +
and eax edi +
and ecx esi +
or eax ecx +
jz loc_1003E23  +
mov eax dword_1018578 +
mov edx dword_101857C +
mov ecx eax +
and ecx edi +
and edx esi +
cmp ecx eax +
jnz loc_1003E23  +
cmp edx dword_101857C +
jnz loc_1003E23  +
push offset dword_10016A8  +
push dword_101855C  +
push dword_1018558  +
call sub_10036D0  +
push [ebp+var_E8]  +
push [ebp+var_E0]  +
call sub_1003FFB  +
mov [ebp+var_DC] eax +
cmp eax ebx +
jz loc_1003EC7  +
mov edx [eax] +
mov ecx eax +
call dword ptr [edx+1Ch]  +
mov ecx [ebp+var_DC] +
lea eax [ebp+var_E0] +
push eax  +
call sub_10041D8  +
mov ecx [ebp+var_DC] +
mov [ebp+var_8] eax +
mov eax [ecx] +
push 1  +
call dword ptr [eax+14h]  +
cmp [ebp+var_8] ebx +
jz loc_1003EC7  +
cmp dword_1018584 ebx +
jz loc_1003E23  +
mov al byte_1018588 +
cmp al 4 +
jnb loc_1003E85  +
cmp al bl +
jnz loc_1003E23  +
mov eax dword_1018570 +
mov ecx dword_1018574 +
and eax edi +
and ecx esi +
or eax ecx +
jz loc_1003E23  +
mov eax dword_1018578 +
mov edx dword_101857C +
mov ecx eax +
and ecx edi +
and edx esi +
cmp ecx eax +
jnz loc_1003E23  +
cmp edx dword_101857C +
jnz loc_1003E23  +
push offset dword_1001708  +
jmp loc_1003E12  +
call sub_100F656  +
cmp [ebp+hhk] ebx +
jz loc_1003EE0  +
push [ebp+hhk]  +
call ds:UnhookWindowsHookEx  +
push ebx  +
push ebx  +
push ebx  +
push 47h  +
call ds:SystemParametersInfoW  +
push ebx  +
push 47h  +
push 1Ah  +
push 0FFFFh  +
call ds:PostMessageW  +
push [ebp+var_F4]  +
call GdiplusShutdown  +
push [ebp+hObject]  +
call ds:ReleaseMutex  +
push [ebp+hObject]  +
call ds:CloseHandle  +
cmp [ebp+var_F0] ebx +
jz loc_1003F2B  +
call sub_100379F  +
call sub_1010D43  +
call UnInitThread  +
push 1000000h  +
call UnInitProcessPriv  +
call ds:CoUninitialize  +
push offset dword_1018558  +
call sub_100369F  +
call sub_1003211  +
xor eax eax +
inc eax  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_10149A5  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push 4  +
pop eax  +
push eax  +
lea ecx [ebp+arg_1C] +
push ecx  +
push eax  +
lea ecx [ebp+arg_18] +
push ecx  +
push eax  +
lea ecx [ebp+arg_14] +
push ecx  +
push eax  +
lea eax [ebp+arg_10] +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_C]  +
push 2Bh  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call TraceMessage  +
add esp 38h +
pop ebp  +
retn 20h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push 4  +
pop eax  +
push eax  +
lea ecx [ebp+arg_2C] +
push ecx  +
push eax  +
lea ecx [ebp+arg_28] +
push ecx  +
push eax  +
lea ecx [ebp+arg_24] +
push ecx  +
push eax  +
lea ecx [ebp+arg_20] +
push ecx  +
push eax  +
lea ecx [ebp+arg_1C] +
push ecx  +
push eax  +
lea ecx [ebp+arg_18] +
push ecx  +
push eax  +
lea ecx [ebp+arg_14] +
push ecx  +
push eax  +
lea eax [ebp+arg_10] +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_C]  +
push 2Bh  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call TraceMessage  +
add esp 58h +
pop ebp  +
retn 30h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push esi  +
lea eax [ebp+var_4] +
xor esi esi +
and [ebp+var_4] esi +
push eax  +
call sub_1010CF9  +
test eax eax +
jl loc_10040DC  +
and [ebp+var_8] esi +
lea eax [ebp+var_8] +
push eax  +
call ds:DwmIsCompositionEnabled  +
cmp [ebp+var_8] esi +
jz loc_10040A3  +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_1004076  +
cmp eax 1 +
jz loc_1004076  +
cmp eax 3 +
jnz loc_1004054  +
push 550h  +
call ??2@YAPAXI@Z  +
pop ecx  +
test eax eax +
jz loc_10040BA  +
mov ecx eax +
call sub_1004F6A  +
jmp loc_10040B6  +
cmp eax 4 +
jnz loc_1004071  +
push 518h  +
call ??2@YAPAXI@Z  +
pop ecx  +
test eax eax +
jz loc_10040BA  +
mov ecx eax +
call sub_10089ED  +
jmp loc_10040B6  +
cmp eax 2 +
jmp loc_10040A1  +
mov ecx [ebp+var_4] +
push 4  +
call sub_1010A90  +
test eax eax +
jnz loc_1004094  +
mov ecx [ebp+var_4] +
push 1  +
push 2  +
push 4  +
call sub_1010BE4  +
jmp loc_100403C  +
cmp eax 2 +
jz loc_100403C  +
cmp eax 3 +
jz loc_1004059  +
cmp eax 1 +
jnz loc_10040DC  +
push 48h  +
call ??2@YAPAXI@Z  +
pop ecx  +
test eax eax +
jz loc_10040BA  +
mov ecx eax +
call sub_100487D  +
mov esi eax +
jmp loc_10040BC  +
xor esi esi +
test esi esi +
jz loc_10040DC  +
mov eax [ebp+arg_4] +
mov [esi+24h] eax +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+18h]  +
test eax eax +
jnz loc_10040DC  +
mov eax [esi] +
push 1  +
mov ecx esi +
call dword ptr [eax+14h]  +
xor esi esi +
mov eax esi +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov ecx [esi+8] +
mov dword ptr [esi] offset off_1001A44 +
mov dword ptr [esi+4] offset off_1001A30 +
test ecx ecx +
jz loc_100410B  +
mov eax [ecx] +
push 1  +
call dword ptr [eax]  +
and dword ptr [esi+8] 0 +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
push 100h  +
mov esi ecx +
call ??2@YAPAXI@Z  +
pop ecx  +
test eax eax +
jz loc_1004134  +
push esi  +
mov ecx eax +
call sub_1009EEB  +
jmp loc_1004136  +
xor eax eax +
mov [esi+8] eax +
test eax eax +
jz loc_1004182  +
push [ebp+arg_C]  +
mov ecx eax +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_100BBCE  +
mov ecx [esi+8] +
mov edi eax +
test edi edi +
jge loc_1004169  +
test ecx ecx +
jz loc_1004163  +
mov eax [ecx] +
push 1  +
call dword ptr [eax]  +
and dword ptr [esi+8] 0 +
jmp loc_1004187  +
push 0FFFFFFECh  +
call ds:?GetHWND@NativeHWNDHost@DirectUI@@QAEPAUHWND__@@XZ  +
push eax  +
call ds:GetWindowLongW  +
and eax 400000h +
mov [esi+20h] eax +
jmp loc_1004187  +
mov edi 8007000Eh +
xor eax eax +
test edi edi +
pop edi  +
setnl al  +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_8] +
mov eax ecx +
mov ecx [ebp+arg_0] +
add edx ecx +
mov [eax+8] edx +
mov edx [ebp+arg_C] +
mov [eax] ecx +
mov ecx [ebp+arg_4] +
add edx ecx +
mov [eax+4] ecx +
mov [eax+0Ch] edx +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov [ecx+28h] eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx+28h] +
mov ecx [ebp+arg_0] +
mov [ecx] eax +
xor ecx ecx +
test eax eax +
setnz cl  +
mov eax ecx +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1Ch +
mov eax [ebp+arg_0] +
sub eax [ecx+0Ch] +
push esi  +
shl eax 10h +
push edi  +
mov edi [ecx+14h] +
sub edi [ecx+0Ch] +
mov esi 8000h +
add eax esi +
cdq   +
idiv  edi +
and [ebp+pInputs.type] 0 +
and dword ptr [ebp+pInputs.anonymous_0+14h] 0 +
push 2Bh  +
mov dword ptr [ebp+pInputs.anonymous_0+0Ch] 0C001h +
mov edi eax +
mov eax [ebp+arg_4] +
sub eax [ecx+10h] +
mov dword ptr [ebp+pInputs.anonymous_0] edi +
shl eax 10h +
add eax esi +
mov esi [ecx+18h] +
sub esi [ecx+10h] +
cdq   +
idiv  esi +
mov dword ptr [ebp+pInputs.anonymous_0+4] eax +
call ds:GetSystemMetrics  +
mov dword ptr [ebp+pInputs.anonymous_0+8] eax +
call ds:GetTickCount  +
mov dword ptr [ebp+pInputs.anonymous_0+10h] eax +
push 1Ch  +
lea eax [ebp+pInputs] +
push eax  +
push 1  +
mov dword ptr [ebp+pInputs.anonymous_0+14h] 1000h +
call ds:SendInput  +
pop edi  +
pop esi  +
test eax eax +
jnz locret_10042A4  +
mov eax off_1018000 +
cmp eax offset off_1018000 +
jz locret_10042A4  +
test byte ptr [eax+1Ch] 4 +
jz locret_10042A4  +
call ds:GetLastError  +
push eax  +
mov eax off_1018000 +
push offset dword_1001A08  +
push 10h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10030C6  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+pt.y]  +
push [ebp+pt.x]  +
push ecx  +
call ds:PtInRect  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov edx eax +
sub edx [ecx] +
mov [ecx] eax +
add [ecx+8] edx +
mov eax [ebp+arg_4] +
mov edx eax +
sub edx [ecx+4] +
mov [ecx+4] eax +
add [ecx+0Ch] edx +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 24h +
fld  ds:flt_1001A18 +
push ebx  +
mov ebx ecx +
mov dword ptr [ebx+4] offset off_1001A1C +
fstp  dword ptr [ebx+1Ch] +
push esi  +
xor eax eax +
push edi  +
push 1  +
mov dword ptr [ebx] offset off_1001A44 +
mov dword ptr [ebx+4] offset off_1001A30 +
mov [ebx+8] eax +
mov [ebx+24h] eax +
mov [ebx+28h] eax +
mov [ebx+3Ch] eax +
call ds:ShowSystemCursor  +
mov esi ds:GetSystemMetrics +
push 4Fh  +
call esi  +
push 4Eh  +
mov edi eax +
call esi  +
push 4Dh  +
mov [ebp+var_C] eax +
call esi  +
push 4Ch  +
mov [ebp+var_4] eax +
call esi  +
push edi  +
push [ebp+var_C]  +
lea ecx [ebp+var_24] +
push [ebp+var_4]  +
push eax  +
call sub_1004199  +
mov esi eax +
lea edi [ebx+0Ch] +
movs   +
movs   +
movs   +
movs   +
xor eax eax +
mov [ebp+var_14] eax +
mov [ebp+var_10] eax +
mov [ebp+var_C] eax +
mov [ebp+var_8] eax +
lea edi [ebx+2Ch] +
lea esi [ebp+var_14] +
movs   +
movs   +
movs   +
movs   +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_10040E8  +
test [ebp+arg_0] 1 +
jz loc_10043AD  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx+14h] +
sub eax [ecx+0Ch] +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
mov edx [esi+8] +
mov ebx [esi] +
push edi  +
mov edi edx +
sub edi ebx +
cmp edi eax +
mov eax [ecx+0Ch] +
jg loc_10043EB  +
cmp ebx eax +
jl loc_10043FE  +
mov eax [ecx+14h] +
cmp edx eax +
jle loc_1004405  +
sub eax edx +
add eax ebx +
jmp loc_10043FE  +
sub eax [ecx+14h] +
sub eax ebx +
add eax edx +
cdq   +
sub eax edx +
mov edx eax +
mov eax [ecx+0Ch] +
sar edx 1 +
sub eax edx +
add edi eax +
mov [esi+8] edi +
mov [esi] eax +
mov edx [esi+0Ch] +
mov eax [ecx+18h] +
mov ebx [esi+4] +
sub eax [ecx+10h] +
mov edi edx +
sub edi ebx +
cmp edi eax +
mov eax [ecx+10h] +
jg loc_1004434  +
cmp ebx eax +
jge loc_1004427  +
add edi eax +
mov [esi+4] eax +
jmp loc_100444A  +
mov ecx [ecx+18h] +
cmp edx ecx +
jle loc_100444D  +
sub ecx edx +
add ecx ebx +
jmp loc_1004445  +
sub eax [ecx+18h] +
mov ecx [ecx+10h] +
sub eax ebx +
add eax edx +
cdq   +
sub eax edx +
sar eax 1 +
sub ecx eax +
mov [esi+4] ecx +
add edi ecx +
mov [esi+0Ch] edi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 64h +
fild  [ebp+arg_0] +
push ebx  +
push esi  +
mov esi ecx +
fmul  dword ptr [esi+1Ch] +
push edi  +
mov [ebp+var_C] esi +
call _ftol2_sse  +
fild  [ebp+arg_4] +
mov [ebp+var_8] eax +
fmul  dword ptr [esi+1Ch] +
call _ftol2_sse  +
mov ebx [ebp+arg_18] +
mov esi ebx +
lea edi [ebp+rc1] +
movs   +
movs   +
movs   +
push 2  +
push [ebp+hwnd]  +
mov [ebp+var_4] eax +
movs   +
call ds:GetAncestor  +
mov esi [ebp+var_C] +
lea edi [esi+2Ch] +
push dword ptr [edi+4]  +
mov ecx ebx +
push dword ptr [edi]  +
mov [ebp+arg_18] eax +
mov [ebp+var_10] edi +
call sub_10042AD  +
test eax eax +
jz loc_10045D7  +
push dword ptr [esi+38h]  +
mov ecx ebx +
push dword ptr [esi+34h]  +
call sub_10042AD  +
test eax eax +
jz loc_10045D7  +
mov eax [ebp+arg_18] +
cmp eax [esi+3Ch] +
jnz loc_10045D7  +
mov ecx [edi] +
mov eax [ebp+arg_8] +
sub eax ecx +
cdq   +
mov ecx eax +
mov eax [ebp+pt.x] +
sub eax [esi+34h] +
xor ecx edx +
sub ecx edx +
cdq   +
mov edi eax +
mov eax [ebp+arg_C] +
xor edi edx +
sub edi edx +
mov edx [esi+30h] +
sub eax edx +
cdq   +
xor eax edx +
sub eax edx +
cmp eax 5 +
jnb loc_1004573  +
mov eax [ebp+pt.y] +
sub eax [esi+38h] +
cdq   +
xor eax edx +
sub eax edx +
cmp eax 5 +
jnb loc_1004573  +
mov eax [ebp+var_10] +
mov ecx [eax] +
mov eax [ebp+arg_8] +
cmp eax ecx +
jge loc_100452B  +
sub eax [ebp+var_8] +
jmp loc_1004534  +
mov eax [ebp+pt.x] +
sub eax [ebp+arg_0] +
add eax [ebp+var_8] +
mov ecx eax +
sub ecx [ebx] +
mov [ebx] eax +
add [ebx+8] ecx +
mov eax off_1018000 +
cmp eax offset off_1018000 +
jz loc_10045D7  +
test byte ptr [eax+1Ch] 10h +
jz loc_10045D7  +
mov ecx [ebx+4] +
mov edi [ebx+0Ch] +
mov edx [ebx] +
sub edi ecx +
push edi  +
mov edi [ebx+8] +
sub edi edx +
push edi  +
push ecx  +
push edx  +
push offset dword_1001A08  +
push 0Bh  +
jmp loc_10045CC  +
cmp ecx 5 +
jnb loc_10045D7  +
cmp edi 5 +
jnb loc_10045D7  +
mov ecx [esi+30h] +
mov eax [ebp+arg_C] +
cmp eax ecx +
jge loc_100458C  +
sub eax [ebp+var_4] +
jmp loc_1004595  +
mov eax [ebp+pt.y] +
sub eax [ebp+arg_4] +
add eax [ebp+var_4] +
mov ecx eax +
sub ecx [ebx+4] +
mov [ebx+4] eax +
add [ebx+0Ch] ecx +
mov eax off_1018000 +
cmp eax offset off_1018000 +
jz loc_10045D7  +
test byte ptr [eax+1Ch] 10h +
jz loc_10045D7  +
mov ecx [ebx+4] +
mov edi [ebx+0Ch] +
mov edx [ebx] +
sub edi ecx +
push edi  +
mov edi [ebx+8] +
sub edi edx +
push edi  +
push ecx  +
push edx  +
push offset dword_1001A08  +
push 0Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1003F6D  +
push ebx  +
lea eax [ebp+rc1] +
push eax  +
call ds:EqualRect  +
test eax eax +
jz loc_10047CB  +
call ds:GetDesktopWindow  +
mov [ebp+var_14] eax +
xor eax eax +
mov [ebp+var_64] eax +
mov [ebp+var_60] eax +
mov [ebp+var_5C] eax +
mov [ebp+var_58] eax +
mov [ebp+var_54] eax +
mov [ebp+var_50] eax +
mov [ebp+var_4C] eax +
mov [ebp+var_48] eax +
mov [ebp+Rect.left] eax +
mov [ebp+Rect.top] eax +
mov [ebp+Rect.right] eax +
mov [ebp+Rect.bottom] eax +
mov eax [ebp+hwnd] +
lea esi [ebp+arg_8] +
lea edi [ebp+var_34] +
movs   +
movs   +
movs   +
movs   +
push 2  +
mov [ebp+hwnd] eax +
pop edi  +
lea esi [ebp+Rect] +
push esi  +
push [ebp+hwnd]  +
call ds:GetWindowRect  +
push 1  +
push [ebp+hwnd]  +
call ds:GetAncestor  +
mov [ebp+hwnd] eax +
cmp eax [ebp+var_14] +
jz loc_1004654  +
dec edi  +
sub esi 10h +
test edi edi +
jge loc_100462F  +
and [ebp+hwnd] 0 +
lea esi [ebp+var_60] +
lea edi [esi-4] +
push edi  +
call ds:IsRectEmpty  +
test eax eax +
jz loc_10046BE  +
mov eax off_1018000 +
cmp eax offset off_1018000 +
jz loc_10047B8  +
test byte ptr [eax+1Ch] 10h +
jz loc_10047B8  +
mov ecx [ebp+pt.y] +
sub ecx [ebp+arg_C] +
push ecx  +
mov ecx [ebp+pt.x] +
sub ecx [ebp+arg_8] +
push ecx  +
push [ebp+arg_C]  +
mov ecx [esi+8] +
push [ebp+arg_8]  +
sub ecx [esi] +
push ecx  +
mov ecx [esi+4] +
sub ecx [edi] +
push ecx  +
push dword ptr [esi]  +
push dword ptr [edi]  +
push offset dword_1001A08  +
push 0Dh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1003FAA  +
jmp loc_10047B8  +
mov eax [ebp+var_C] +
cmp dword ptr [eax+20h] 0 +
jz loc_1004740  +
mov eax [esi+4] +
mov ecx [esi] +
mov [ebx+8] eax +
sub eax [ebp+arg_0] +
mov [ebx+4] ecx +
mov [ebx] eax +
mov eax [ebp+arg_4] +
add ecx eax +
mov eax [ebp+var_4] +
neg eax  +
push eax  +
push [ebp+var_8]  +
mov [ebx+0Ch] ecx +
push ebx  +
call ds:OffsetRect  +
mov eax off_1018000 +
cmp eax offset off_1018000 +
jz loc_1004737  +
test byte ptr [eax+1Ch] 10h +
jz loc_1004737  +
mov ecx [ebp+pt.y] +
sub ecx [ebp+arg_C] +
push ecx  +
mov ecx [ebp+pt.x] +
sub ecx [ebp+arg_8] +
push ecx  +
push [ebp+arg_C]  +
mov ecx [esi+8] +
push [ebp+arg_8]  +
sub ecx [esi] +
push ecx  +
mov ecx [esi+4] +
sub ecx [edi] +
push ecx  +
push dword ptr [esi]  +
push dword ptr [edi]  +
push offset dword_1001A08  +
push 0Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1003FAA  +
push [ebp+pt.y]  +
mov eax [ebp+arg_8] +
push eax  +
jmp loc_10047AD  +
push dword ptr [edi+4]  +
mov ecx ebx +
push dword ptr [edi]  +
call sub_10042D0  +
mov eax [ebp+var_4] +
neg eax  +
push eax  +
mov eax [ebp+var_8] +
neg eax  +
push eax  +
push ebx  +
call ds:OffsetRect  +
mov eax off_1018000 +
cmp eax offset off_1018000 +
jz loc_10047A7  +
test byte ptr [eax+1Ch] 10h +
jz loc_10047A7  +
mov ecx [ebp+pt.y] +
sub ecx [ebp+arg_C] +
push ecx  +
mov ecx [ebp+pt.x] +
sub ecx [ebp+arg_8] +
push ecx  +
push [ebp+arg_C]  +
mov ecx [esi+8] +
push [ebp+arg_8]  +
sub ecx [esi] +
push ecx  +
mov ecx [esi+4] +
sub ecx [edi] +
push ecx  +
push dword ptr [esi]  +
push dword ptr [edi]  +
push offset dword_1001A08  +
push 0Fh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1003FAA  +
push [ebp+pt.y]  +
push [ebp+pt.x]  +
mov ecx ebx +
call sub_10042AD  +
test eax eax +
jnz loc_10047C8  +
inc [ebp+hwnd]  +
add esi 10h +
cmp [ebp+hwnd] 4 +
jb loc_100465B  +
mov esi [ebp+var_C] +
mov eax [ebp+arg_18] +
mov edi [ebp+var_10] +
mov [esi+3Ch] eax +
lea esi [ebp+arg_8] +
movs   +
movs   +
movs   +
movs   +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 20h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 28h +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
xor edi edi +
push edi  +
push [ebp+pt.y]  +
mov [esi] edi +
push [ebp+pt.x]  +
mov [esi+4] edi +
mov [esi+8] edi +
mov [esi+0Ch] edi +
call ds:MonitorFromPoint  +
cmp eax edi +
jz loc_100482F  +
lea ecx [ebp+rcSrc] +
push ecx  +
push eax  +
mov [ebp+rcSrc.left] 28h +
call ds:GetMonitorInfoW  +
lea eax [ebp+rcSrc.top] +
push eax  +
push esi  +
call ds:CopyRect  +
pop edi  +
mov eax esi +
pop esi  +
leave   +
retn 0Ch  +
***
mov eax dword_1018600 +
inc dword_1018600  +
cmp eax 0Ah +
jle loc_1004853  +
and dword_1018600 0 +
mov ecx dword_10185FC +
xor eax eax +
cmp dword_1018600 eax +
setz al  +
push eax  +
call sub_10111F6  +
retn 10h  +
***
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_10042F8  +
and dword ptr [esi+44h] 0 +
mov dword ptr [esi] offset off_1001A8C +
mov dword ptr [esi+4] offset off_1001A78 +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_10111AF  +
test [ebp+arg_0] 1 +
jz loc_10048BB  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push ebx  +
mov ebx ds:GetTickCount64 +
push esi  +
push edi  +
mov esi ecx +
call ebx  +
mov [ebp+var_8] eax +
mov [ebp+var_4] edx +
call WinSqmIsOptedIn  +
xor edi edi +
test eax eax +
jz loc_1004994  +
push 1  +
push 1733h  +
push edi  +
call WinSqmIncrementDWORD  +
mov ecx [esi+44h] +
push 0Eh  +
call sub_1010A90  +
push 64h  +
pop ecx  +
cdq   +
idiv  ecx +
push eax  +
push 1739h  +
push edi  +
call WinSqmSetDWORD  +
mov ecx [esi+44h] +
push 10h  +
call sub_1010A90  +
push eax  +
push 11ABh  +
push edi  +
call WinSqmSetDWORD  +
mov ecx [esi+44h] +
push 11h  +
call sub_1010A90  +
push eax  +
push 11A8h  +
push edi  +
call WinSqmSetDWORD  +
mov ecx [esi+44h] +
push 12h  +
call sub_1010A90  +
push eax  +
push 11A1h  +
push edi  +
call WinSqmSetDWORD  +
push 0Ch  +
pop eax  +
push edi  +
lea ecx [ebp+pvParam] +
push ecx  +
push eax  +
push 42h  +
mov [ebp+pvParam] eax +
call ds:SystemParametersInfoW  +
test eax eax +
jle loc_1004994  +
mov eax [ebp+var_10] +
xor ecx ecx +
and al 1 +
cmp al 1 +
setz cl  +
push ecx  +
push 11A3h  +
push edi  +
call WinSqmSetDWORD  +
mov ecx [esi+8] +
call sub_100A168  +
push dword ptr [esi+40h]  +
mov ecx [esi+8] +
call ds:?GetHWND@NativeHWNDHost@DirectUI@@QAEPAUHWND__@@XZ  +
push eax  +
call ds:KillTimer  +
call WinSqmIsOptedIn  +
test eax eax +
jz loc_10049D9  +
call ebx  +
sub eax [ebp+var_8] +
push edi  +
sbb edx [ebp+var_4] +
push 3E8h  +
push edx  +
push eax  +
call __aulldiv  +
push eax  +
push 1732h  +
push edi  +
call WinSqmIncrementDWORD  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
push esi  +
mov esi ecx +
jz loc_1004A0E  +
push 1  +
call sub_10041C4  +
mov ecx [esi+8] +
push 0  +
push 0  +
push 10h  +
call ds:?GetHWND@NativeHWNDHost@DirectUI@@QAEPAUHWND__@@XZ  +
push eax  +
call ds:PostMessageW  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
push edi  +
push 0  +
push 0  +
push 2  +
push 0CBh  +
mov esi ecx +
call sub_1004112  +
mov edi eax +
test edi edi +
jz loc_1004A5A  +
mov ecx [esi+44h] +
push 0Eh  +
call sub_1010A90  +
push 64h  +
pop ecx  +
cdq   +
idiv  ecx +
push ecx  +
mov ecx [esi+8] +
mov [ebp+var_4] eax +
fild  [ebp+var_4] +
fstp  [esp+10h+var_10] +
call sub_100A268  +
mov eax edi +
pop edi  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_1001A8C +
mov dword ptr [esi+4] offset off_1001A78 +
call MagUninitialize  +
mov ecx dword_10185FC +
test ecx ecx +
jz loc_1004A94  +
push 1  +
call sub_10048A1  +
and dword_10185FC 0 +
call sub_1011AFA  +
mov ecx esi +
pop esi  +
jmp sub_10040E8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push esi  +
mov esi ecx +
call MagInitialize  +
push hmod  +
call sub_1013190  +
lea eax [esi+44h] +
push eax  +
mov [ebp+var_C] eax +
call sub_1010CF9  +
test eax eax +
jge loc_1004AFC  +
mov eax off_1018000 +
cmp eax offset off_1018000 +
jz loc_1004AF5  +
test byte ptr [eax+1Ch] 4 +
jz loc_1004AF5  +
push offset dword_1001A68  +
push 0Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10030A0  +
xor eax eax +
jmp loc_1004C71  +
push 90h  +
call ??2@YAPAXI@Z  +
pop ecx  +
test eax eax +
jz loc_1004B14  +
mov ecx eax +
call sub_1011993  +
jmp loc_1004B16  +
xor eax eax +
mov dword_10185FC eax +
test eax eax +
jnz loc_1004B51  +
mov eax off_1018000 +
cmp eax offset off_1018000 +
jz loc_1004AF5  +
test byte ptr [eax+1Ch] 4 +
jz loc_1004AF5  +
call ds:GetLastError  +
push eax  +
mov eax off_1018000 +
push offset dword_1001A68  +
push 0Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10030C6  +
jmp loc_1004AF5  +
mov ecx esi +
call sub_1004A18  +
test eax eax +
jnz loc_1004B7A  +
mov eax off_1018000 +
cmp eax offset off_1018000 +
jz loc_1004AF5  +
test byte ptr [eax+1Ch] 4 +
jz loc_1004AF5  +
push offset dword_1001A68  +
push 0Ch  +
jmp loc_1004AEA  +
mov ecx [esi+8] +
push ebx  +
push edi  +
call ds:?GetHWND@NativeHWNDHost@DirectUI@@QAEPAUHWND__@@XZ  +
mov ebx ds:ShowWindow +
push 0  +
push eax  +
mov [ebp+hWnd] eax +
call ebx  +
push 0FFFFFFECh  +
push [ebp+hWnd]  +
call ds:GetWindowLongW  +
mov ecx dword_10185FC +
mov edi eax +
and edi 400000h +
call sub_1010D61  +
mov eax [ebp+var_C] +
mov ecx [eax] +
push 0Eh  +
call sub_1010A90  +
mov [ebp+var_8] eax +
fild  [ebp+var_8] +
push ecx  +
mov ecx [esi+8] +
fdiv  ds:dbl_1001AB0 +
fstp  [ebp+var_10] +
fld  [ebp+var_10] +
fstp  [esp+10h+var_10] +
call sub_100A268  +
mov ecx [esi+8] +
call sub_1009EE2  +
push esi  +
push edi  +
push [ebp+var_8]  +
push dword ptr [eax+0A4h]  +
call sub_10123DA  +
test eax eax +
jnz loc_1004C1F  +
mov eax off_1018000 +
cmp eax offset off_1018000 +
jz loc_1004C1B  +
test byte ptr [eax+1Ch] 4 +
jz loc_1004C1B  +
push offset dword_1001A68  +
push 0Dh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10030A0  +
xor eax eax +
jmp loc_1004C6F  +
mov ecx [esi+8] +
push eax  +
call sub_100A348  +
push offset TimerFunc  +
push 0Ah  +
push 0  +
push 0  +
call ds:SetTimer  +
mov [esi+40h] eax +
mov ecx dword_10185FC +
call sub_1011A22  +
mov eax [ebp+var_C] +
mov ecx [eax] +
push 18h  +
call sub_1010A90  +
test eax eax +
setnz al  +
xor ecx ecx +
test al al +
setz cl  +
dec ecx  +
and ecx 0FFFFFFFDh +
add ecx 5 +
push ecx  +
push [ebp+hWnd]  +
call ebx  +
xor eax eax +
inc eax  +
pop edi  +
pop ebx  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1004A65  +
test [ebp+arg_0] 1 +
jz loc_1004C93  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
fld  [ebp+arg_0] +
push ecx  +
push ecx  +
fstp  [esp+8+var_8] +
call ds:ceil  +
fstp  [ebp+arg_0] +
pop ecx  +
fld  [ebp+arg_0] +
pop ecx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
fld  [ebp+arg_0] +
push ecx  +
fstp  [esp+4+var_4] +
call sub_1004C9F  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+lprcSrc]  +
mov esi ecx +
push esi  +
call ds:CopyRect  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx+8] +
add eax [ecx] +
push esi  +
mov esi [ebp+arg_0] +
cdq   +
sub eax edx +
sar eax 1 +
mov [esi] eax +
mov eax [ecx+0Ch] +
add eax [ecx+4] +
cdq   +
sub eax edx +
sar eax 1 +
mov [esi+4] eax +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
xor eax eax +
cmp [ecx] eax +
jnz locret_1004D3E  +
cmp [ecx+8] eax +
jnz locret_1004D3E  +
cmp [ecx+4] eax +
jnz locret_1004D3E  +
cmp [ecx+0Ch] eax +
jnz locret_1004D3E  +
inc eax  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+yBottom]  +
push [ebp+xRight]  +
push [ebp+yTop]  +
push [ebp+xLeft]  +
push ecx  +
call ds:SetRect  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+dy]  +
push [ebp+arg_0]  +
push ecx  +
call ds:OffsetRect  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_1004D91  +
mov [ecx+8] eax +
jmp loc_1004D93  +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
fld  [ebp+arg_4] +
push esi  +
mov esi ecx +
and dword ptr [esi] 0 +
mov eax [eax] +
push esi  +
push 0  +
push ecx  +
fstp  [esp+10h+var_10] +
push eax  +
call GdipCreatePen1  +
mov [esi+4] eax +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_1004DDC  +
mov [ecx+4] eax +
jmp loc_1004DDE  +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push 4  +
lea eax [ebp+arg_14] +
push eax  +
push 4  +
lea eax [ebp+arg_10] +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_C]  +
push 2Bh  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call TraceMessage  +
add esp 28h +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push 4  +
lea eax [ebp+arg_18] +
push eax  +
push 4  +
lea eax [ebp+arg_14] +
push eax  +
push 4  +
lea eax [ebp+arg_10] +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_C]  +
push 2Bh  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call TraceMessage  +
add esp 30h +
pop ebp  +
retn 1Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push 8  +
lea eax [ebp+arg_14] +
push eax  +
push 4  +
lea eax [ebp+arg_10] +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_C]  +
push 2Bh  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call TraceMessage  +
add esp 28h +
pop ebp  +
retn 1Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push 4  +
pop eax  +
push eax  +
lea ecx [ebp+arg_24] +
push ecx  +
push eax  +
lea ecx [ebp+arg_20] +
push ecx  +
push eax  +
lea ecx [ebp+arg_1C] +
push ecx  +
push eax  +
lea eax [ebp+arg_18] +
push eax  +
push 8  +
lea eax [ebp+arg_10] +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_C]  +
push 2Bh  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call TraceMessage  +
add esp 40h +
pop ebp  +
retn 28h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push 4  +
pop eax  +
push eax  +
lea ecx [ebp+arg_2C] +
push ecx  +
push eax  +
lea ecx [ebp+arg_28] +
push ecx  +
push eax  +
lea ecx [ebp+arg_24] +
push ecx  +
push eax  +
lea ecx [ebp+arg_20] +
push ecx  +
push eax  +
lea ecx [ebp+arg_1C] +
push ecx  +
push eax  +
lea eax [ebp+arg_18] +
push eax  +
push 8  +
lea eax [ebp+arg_10] +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_C]  +
push 2Bh  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call TraceMessage  +
add esp 50h +
pop ebp  +
retn 30h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push 4  +
pop eax  +
push eax  +
lea ecx [ebp+arg_34] +
push ecx  +
push eax  +
lea ecx [ebp+arg_30] +
push ecx  +
push eax  +
lea ecx [ebp+arg_2C] +
push ecx  +
push eax  +
lea ecx [ebp+arg_28] +
push ecx  +
push eax  +
lea ecx [ebp+arg_24] +
push ecx  +
push eax  +
lea ecx [ebp+arg_20] +
push ecx  +
push eax  +
lea ecx [ebp+arg_1C] +
push ecx  +
push eax  +
lea eax [ebp+arg_18] +
push eax  +
push 8  +
lea eax [ebp+arg_10] +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_C]  +
push 2Bh  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call TraceMessage  +
add esp 60h +
pop ebp  +
retn 38h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
push ebx  +
push esi  +
push edi  +
mov ebx ecx +
call sub_10042F8  +
xor esi esi +
lea ecx [ebx+48h] +
mov dword ptr [ebx] offset off_1001C40 +
mov dword ptr [ebx+4] offset off_1001C2C +
mov [ebx+40h] esi +
mov [ebx+44h] esi +
call sub_100E726  +
fld1   +
lea ecx [ebx+4E4h] +
fstp  dword ptr [ebx+490h] +
mov [ebx+4CCh] esi +
mov [ebx+4D8h] esi +
mov [ebx+4DCh] esi +
mov [ebx+4E0h] esi +
call sub_1013A3A  +
or dword ptr [ebx+530h] 0FFFFFFFFh +
push esi  +
push offset aFullscreenmagn  +
lea ecx [ebp+var_8] +
mov [ebx+514h] esi +
mov [ebx+528h] esi +
mov [ebx+52Ch] esi +
mov [ebx+534h] esi +
mov [ebx+538h] esi +
mov [ebx+53Ch] esi +
mov [ebx+540h] esi +
call sub_1002FF5  +
mov [ebp+var_18] esi +
mov [ebp+var_14] esi +
mov [ebp+var_10] esi +
mov [ebp+var_C] esi +
lea edi [ebx+494h] +
lea esi [ebp+var_18] +
movs   +
movs   +
movs   +
movs   +
xor ecx ecx +
mov [ebp+var_18] ecx +
mov [ebp+var_14] ecx +
mov [ebp+var_10] ecx +
mov [ebp+var_C] ecx +
lea edi [ebx+4A4h] +
lea esi [ebp+var_18] +
movs   +
movs   +
movs   +
movs   +
xor eax eax +
mov [ebx+4C8h] ecx +
mov [ebx+4D4h] ecx +
mov [ebx+4C4h] eax +
mov [ebx+4D0h] eax +
lea edi [ebx+518h] +
stos   +
stos   +
stos   +
stos   +
mov [ebp+var_18] ecx +
mov [ebp+var_14] ecx +
mov [ebp+var_10] ecx +
mov [ebp+var_C] ecx +
lea edi [ebx+4B4h] +
lea esi [ebp+var_18] +
movs   +
movs   +
movs   +
lea ecx [ebp+var_8] +
movs   +
call sub_1003039  +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push ebx  +
push esi  +
push edi  +
mov esi ecx +
push 0  +
push offset aFullscreenma_0  +
lea ecx [ebp+var_C] +
mov dword ptr [esi] offset off_1001C40 +
mov dword ptr [esi+4] offset off_1001C2C +
call sub_1002FF5  +
push 0  +
call ds:ClipCursor  +
mov ebx ds:DestroyWindow +
lea edi [esi+518h] +
mov [ebp+var_4] 4 +
mov eax [edi] +
test eax eax +
jz loc_10050D5  +
push eax  +
call ebx  +
add edi 4 +
dec [ebp+var_4]  +
jnz loc_10050CC  +
mov eax [esi+40h] +
mov edi ds:IsWindow +
test eax eax +
jz loc_10050F6  +
push eax  +
call edi  +
test eax eax +
jz loc_10050F6  +
push dword ptr [esi+40h]  +
call ebx  +
mov eax [esi+44h] +
test eax eax +
jz loc_1005109  +
push eax  +
call edi  +
test eax eax +
jz loc_1005109  +
push dword ptr [esi+44h]  +
call ebx  +
call sub_100E8AD  +
lea ecx [ebp+var_C] +
call sub_1003039  +
lea ecx [esi+4E4h] +
call nullsub_2  +
lea ecx [esi+48h] +
call sub_100D9CB  +
mov ecx esi +
call sub_10040E8  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push ebx  +
push esi  +
push edi  +
xor edi edi +
push edi  +
mov esi ecx +
push offset aFullscreenma_1  +
lea ecx [ebp+var_10] +
call sub_1002FF5  +
mov ebx ds:GetTickCount64 +
call ebx  +
mov [ebp+var_8] eax +
mov [ebp+var_4] edx +
call WinSqmIsOptedIn  +
test eax eax +
jz loc_10051DF  +
push 1  +
push 1735h  +
push edi  +
call WinSqmIncrementDWORD  +
mov ecx [esi+514h] +
push 0Eh  +
call sub_1010A90  +
push eax  +
push 1739h  +
push edi  +
call WinSqmSetDWORD  +
mov ecx [esi+514h] +
push 10h  +
call sub_1010A90  +
push eax  +
push 11ABh  +
push edi  +
call WinSqmSetDWORD  +
mov ecx [esi+514h] +
push 11h  +
call sub_1010A90  +
push eax  +
push 11A8h  +
push edi  +
call WinSqmSetDWORD  +
mov ecx [esi+514h] +
push 12h  +
call sub_1010A90  +
push eax  +
push 11A1h  +
push edi  +
call WinSqmSetDWORD  +
mov ecx [esi+8] +
call sub_100A168  +
mov ecx [esi+4E0h] +
cmp ecx edi +
jz loc_10051F6  +
call sub_100EF9F  +
call WinSqmIsOptedIn  +
test eax eax +
jz loc_1005220  +
call ebx  +
sub eax [ebp+var_8] +
push edi  +
sbb edx [ebp+var_4] +
push 3E8h  +
push edx  +
push eax  +
call __aulldiv  +
push eax  +
push 11A4h  +
push edi  +
call WinSqmIncrementDWORD  +
lea ecx [ebp+var_10] +
call sub_1003039  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
mov ebx ecx +
push edi  +
lea ecx [ebx+4E0h] +
call sub_10139C4  +
test eax eax +
jz loc_1005301  +
mov eax [ebp+10h] +
sub eax [ebp+8] +
mov [ebp-8] eax +
jz loc_1005301  +
mov eax [ebx+10h] +
sub eax [ebx+8] +
mov [ebp-4] eax +
fild  dword ptr [ebp-4] +
fidiv  dword ptr [ebp-8] +
fstp  dword ptr [ebp-4] +
mov eax off_1018000 +
cmp eax offset off_1018000 +
jz loc_10052B6  +
test byte ptr [eax+1Ch] 10h +
jz loc_10052B6  +
push dword ptr [ebx+14h]  +
fld  dword ptr [ebp-4] +
push dword ptr [ebx+10h]  +
push dword ptr [ebx+0Ch]  +
push dword ptr [ebx+8]  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push ecx  +
push ecx  +
fstp  qword ptr [esp] +
push offset dword_1001AB8  +
push 0Dh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1004F13  +
fld  dword ptr [ebp-4] +
lea eax [ebx+490h] +
mov edi eax +
fstp  dword ptr [ebx+48Ch] +
lea esi [ebp+8] +
movs   +
movs   +
movs   +
push eax  +
lea ecx [ebx-4] +
movs   +
call sub_10043B9  +
sub esp 10h +
mov edi esp +
fld  dword ptr [ebx+48Ch] +
lea esi [ebx+8] +
movs   +
movs   +
movs   +
movs   +
sub esp 10h +
mov edi esp +
lea esi [ebx+490h] +
movs   +
movs   +
movs   +
push ecx  +
movs   +
fstp  dword ptr [esp] +
call sub_100EA6C  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov ecx [esi+4DCh] +
call sub_100F1C7  +
test eax eax +
jnz loc_10053C2  +
cmp [esi+534h] eax +
jz loc_1005376  +
push 17h  +
call ds:GetSystemMetrics  +
xor ecx ecx +
test eax eax +
setnz cl  +
inc ecx  +
mov eax ecx +
push eax  +
call ds:GetAsyncKeyState  +
test ax ax +
jl loc_1005376  +
mov eax off_1018000 +
cmp eax offset off_1018000 +
jz loc_100536F  +
test byte ptr [eax+1Ch] 10h +
jz loc_100536F  +
push offset dword_1001AB8  +
push 0Fh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10030A0  +
and dword ptr [esi+534h] 0 +
cmp dword ptr [esi+4D4h] 3 +
jz loc_10053C2  +
lea ecx [esi+44h] +
call sub_100D4BA  +
test eax eax +
jnz loc_10053C2  +
push edi  +
lea edi [esi+510h] +
mov ecx [edi] +
push 11h  +
call sub_1010A90  +
cmp eax 1 +
jz loc_10053C1  +
mov ecx [edi] +
push 12h  +
call sub_1010A90  +
cmp eax 1 +
jz loc_10053C1  +
add esi 490h +
push esi  +
mov esi ds:ClipCursor +
call esi  +
push 0  +
call esi  +
pop edi  +
pop esi  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx ecx +
cmp dword ptr [ebx+538h] 0 +
jnz loc_100547C  +
lea ecx [ebx+48h] +
call sub_100D4BA  +
test eax eax +
jnz loc_100547C  +
push esi  +
lea esi [ebx+514h] +
mov ecx [esi] +
push 11h  +
call sub_1010A90  +
cmp eax 1 +
jz loc_100547B  +
mov ecx [esi] +
push 12h  +
call sub_1010A90  +
cmp eax 1 +
jz loc_100547B  +
cmp dword ptr [ebx+4D8h] 2 +
jnz loc_100547B  +
mov eax [ebp+arg_20] +
sub eax [ebp+arg_0] +
mov ecx [ebp+arg_24] +
mov edx [ebp+rc.left] +
sub ecx [ebp+arg_4] +
lea esi [eax+edx] +
mov eax [ebp+rc.top] +
push edi  +
lea edi [eax+ecx] +
push edi  +
push esi  +
lea eax [ebp+rc] +
push eax  +
call ds:PtInRect  +
test eax eax +
jz loc_100547A  +
push edi  +
push esi  +
mov ecx ebx +
call sub_10041F7  +
mov eax off_1018000 +
cmp eax offset off_1018000 +
jz loc_100547A  +
test byte ptr [eax+1Ch] 10h +
jz loc_100547A  +
push edi  +
push esi  +
push [ebp+arg_24]  +
push [ebp+arg_20]  +
push offset dword_1001AB8  +
push 13h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1003F6D  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 28h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0A0h +
push ebx  +
push esi  +
push edi  +
push [ebp+arg_18]  +
lea eax [ebp+var_90] +
push [ebp+arg_14]  +
mov ebx ecx +
push eax  +
call sub_10047E7  +
mov ecx [ebp+var_8C] +
mov eax [ebp+arg_14] +
dec ecx  +
mov [ebp+pt.x] eax +
mov [ebp+var_78] eax +
mov eax [ebp+var_84] +
mov [ebp+pt.y] ecx +
mov ecx [ebp+var_90] +
dec ecx  +
inc eax  +
mov [ebp+var_74] eax +
mov eax [ebp+var_88] +
inc eax  +
mov [ebp+var_40] eax +
mov [ebp+var_68] ecx +
mov ecx [ebp+arg_18] +
lea esi [ebx+0Ch] +
mov eax [esi] +
cdq   +
mov [ebp+var_64] ecx +
mov [ebp+var_3C] ecx +
mov ecx eax +
mov eax [ebx+10h] +
xor ecx edx +
sub ecx edx +
lea edi [ebp+rc] +
movs   +
cdq   +
movs   +
xor eax edx +
sub eax edx +
push eax  +
movs   +
mov [ebp+dy] eax +
push ecx  +
lea eax [ebp+rc] +
push eax  +
mov [ebp+var_20] ecx +
movs   +
call ds:OffsetRect  +
push [ebp+dy]  +
lea esi [ebp+arg_4] +
push [ebp+var_20]  +
lea edi [ebp+var_50] +
movs   +
movs   +
movs   +
lea eax [ebp+var_50] +
push eax  +
movs   +
call ds:OffsetRect  +
push [ebp+dy]  +
lea esi [ebp+var_90] +
push [ebp+var_20]  +
lea edi [ebp+var_A0] +
movs   +
movs   +
movs   +
lea eax [ebp+var_A0] +
push eax  +
movs   +
call ds:OffsetRect  +
mov eax [ebp+var_44] +
sub eax [ebp+var_4C] +
mov [ebp+var_8] eax +
fild  [ebp+var_8] +
mov eax [ebp+var_48] +
fmul  dword ptr [ebx+1Ch] +
fld  ds:dbl_1001CF0 +
fmul st(1) st +
fxch  st(1) +
fstp  [ebp+var_8] +
sub eax [ebp+var_50] +
push ecx  +
mov [ebp+var_C] eax +
fild  [ebp+var_C] +
mov eax [ebp+rc.bottom] +
sub eax [ebp+rc.top] +
fmul  dword ptr [ebx+1Ch] +
mov [ebp+var_10] eax +
fmulp st(1) st +
fstp  [ebp+var_C] +
fild  [ebp+var_4C] +
fidiv  [ebp+var_10] +
fmul  [ebp+var_8] +
fstp  [ebp+var_10] +
fld  [ebp+var_10] +
fstp  [esp+0B0h+var_B0] +
call sub_1004CC3  +
pop ecx  +
call _ftol2_sse  +
push [ebp+pt.y]  +
mov [ebp+var_10] eax +
push [ebp+pt.x]  +
lea eax [ebp+var_60] +
push eax  +
mov ecx ebx +
call sub_10047E7  +
lea ecx [ebp+var_60] +
call sub_1004D28  +
test eax eax +
jz loc_10055F7  +
push [ebp+pt.y]  +
lea ecx [ebx+0Ch] +
push [ebp+pt.x]  +
call sub_10042AD  +
test eax eax +
jz loc_10055F7  +
mov eax [ebp+var_9C] +
sub eax [ebp+rc.top] +
cdq   +
xor eax edx +
sub eax edx +
mov [ebp+var_4] eax +
fild  [ebp+var_4] +
fdiv  dword ptr [ebx+490h] +
call _ftol2_sse  +
add [ebp+var_10] eax +
mov eax [ebp+rc.right] +
fild  [ebp+var_50] +
sub eax [ebp+rc.left] +
push ecx  +
mov [ebp+var_4] eax +
fidiv  [ebp+var_4] +
fmul  [ebp+var_C] +
fstp  [ebp+var_4] +
fld  [ebp+var_4] +
fstp  dword ptr [esp+0] +
call sub_1004CC3  +
pop ecx  +
call _ftol2_sse  +
push [ebp+var_64]  +
mov [ebp+var_4] eax +
push [ebp+var_68]  +
lea eax [ebp+var_28] +
push eax  +
mov ecx ebx +
call sub_10047E7  +
mov esi eax +
lea edi [ebp+var_60] +
movs   +
movs   +
movs   +
lea ecx [ebp+var_60] +
movs   +
call sub_1004D28  +
test eax eax +
jz loc_100567B  +
push [ebp+var_64]  +
lea ecx [ebx+0Ch] +
push [ebp+var_68]  +
call sub_10042AD  +
test eax eax +
jz loc_100567B  +
mov eax [ebp+var_A0] +
sub eax [ebp+rc.left] +
cdq   +
xor eax edx +
sub eax edx +
mov [ebp+pt.y] eax +
fild  [ebp+pt.y] +
fdiv  dword ptr [ebx+490h] +
call _ftol2_sse  +
add [ebp+var_4] eax +
mov eax [ebp+rc.bottom] +
mov ecx eax +
sub eax [ebp+var_44] +
sub ecx [ebp+rc.top] +
mov [ebp+pt.y] eax +
fild  [ebp+pt.y] +
mov [ebp+dy] ecx +
push ecx  +
fidiv  [ebp+dy] +
fmul  [ebp+var_8] +
fstp  [ebp+dy] +
fld  [ebp+dy] +
fstp  [esp+0A0h+var_A0] +
call sub_1004CC3  +
pop ecx  +
call _ftol2_sse  +
push [ebp+var_74]  +
mov [ebp+var_8] eax +
push [ebp+var_78]  +
lea eax [ebp+var_70] +
push eax  +
mov ecx ebx +
call sub_10047E7  +
mov esi eax +
lea edi [ebp+var_60] +
movs   +
movs   +
movs   +
lea ecx [ebp+var_60] +
movs   +
call sub_1004D28  +
test eax eax +
jz loc_1005707  +
push [ebp+var_74]  +
lea ecx [ebx+0Ch] +
push [ebp+var_78]  +
call sub_10042AD  +
test eax eax +
jz loc_1005707  +
mov eax [ebp+var_94] +
sub eax [ebp+rc.bottom] +
cdq   +
xor eax edx +
sub eax edx +
mov [ebp+dy] eax +
fild  [ebp+dy] +
fdiv  dword ptr [ebx+490h] +
call _ftol2_sse  +
add [ebp+var_8] eax +
mov eax [ebp+rc.right] +
mov ecx eax +
sub eax [ebp+var_48] +
sub ecx [ebp+rc.left] +
mov [ebp+dy] eax +
fild  [ebp+dy] +
mov [ebp+pt.y] ecx +
push ecx  +
fidiv  [ebp+pt.y] +
fmul  [ebp+var_C] +
fstp  [ebp+dy] +
fld  [ebp+dy] +
fstp  [esp+98h+var_98] +
call sub_1004CC3  +
pop ecx  +
call _ftol2_sse  +
push [ebp+var_3C]  +
mov [ebp+var_C] eax +
push [ebp+var_40]  +
lea eax [ebp+var_80] +
push eax  +
mov ecx ebx +
call sub_10047E7  +
mov esi eax +
lea edi [ebp+var_60] +
movs   +
movs   +
movs   +
lea ecx [ebp+var_60] +
movs   +
call sub_1004D28  +
test eax eax +
jz loc_1005793  +
push [ebp+var_3C]  +
lea ecx [ebx+0Ch] +
push [ebp+var_40]  +
call sub_10042AD  +
test eax eax +
jz loc_1005793  +
mov eax [ebp+var_98] +
sub eax [ebp+rc.right] +
cdq   +
xor eax edx +
sub eax edx +
mov [ebp+arg_18] eax +
fild  [ebp+arg_18] +
fdiv  dword ptr [ebx+490h] +
call _ftol2_sse  +
add [ebp+var_C] eax +
mov eax [ebp+arg_0] +
mov ecx [ebp+var_4] +
lea esi [ebp+arg_4] +
mov edi eax +
movs   +
movs   +
movs   +
movs   +
add [eax] ecx +
mov ecx [ebp+var_10] +
add [eax+4] ecx +
mov ecx [ebp+var_C] +
sub [eax+8] ecx +
mov ecx [ebp+var_8] +
sub [eax+0Ch] ecx +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 1Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
cmp [ebp+arg_8] 0 +
push ebx  +
push esi  +
push edi  +
mov ebx ecx +
jnz loc_10057DF  +
mov dword ptr [ebx+4D8h] 2 +
lea esi [ebx+4E4h] +
mov ecx esi +
call sub_10139C4  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
test eax eax +
jz loc_10057FF  +
mov ecx esi +
call sub_1013E29  +
jmp loc_1005878  +
lea esi [ebx+494h] +
mov [ebp+arg_8] esi +
lea edi [ebp+rc] +
movs   +
movs   +
movs   +
lea eax [ebp+rc] +
push eax  +
movs   +
call ds:OffsetRect  +
lea eax [ebp+rc] +
push eax  +
mov ecx ebx +
call sub_10043B9  +
push 0  +
lea eax [ebp+rc] +
push eax  +
call ds:MonitorFromRect  +
test eax eax +
jz loc_1005878  +
mov ecx [ebx+4E0h] +
sub esp 10h +
lea esi [ebp+rc] +
test ecx ecx +
jz loc_100586A  +
lea edi [ebx+4A4h] +
movs   +
movs   +
movs   +
movs   +
mov edi esp +
lea esi [ebp+rc] +
movs   +
movs   +
movs   +
movs   +
mov esi [ebp+arg_8] +
sub esp 10h +
mov edi esp +
movs   +
movs   +
movs   +
movs   +
call sub_100F94D  +
jmp loc_1005878  +
mov edi esp +
movs   +
movs   +
movs   +
lea ecx [ebx+4] +
mov eax [ecx] +
movs   +
call dword ptr [eax+4]  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+pt.y] +
push esi  +
push edi  +
mov edi [ebp+pt.x] +
mov esi ecx +
mov ecx [esi+8] +
push ebx  +
push edi  +
call sub_100A1C4  +
test eax eax +
jnz loc_10058A7  +
fldz   +
fstp  dword ptr [esi+1Ch] +
mov eax [esi] +
push ebx  +
push edi  +
mov ecx esi +
call dword ptr [eax]  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push esi  +
mov esi [ebp+lprc] +
push edi  +
push dword ptr [ebp+0Ch]  +
mov edi ecx +
push [ebp+xRight]  +
mov ecx esi +
call sub_10042AD  +
test eax eax +
jnz loc_10058F5  +
lea eax [ebp+var_10] +
push eax  +
lea ecx [edi+4B4h] +
call sub_1004CF9  +
mov ecx [eax] +
mov [ebp+xRight] ecx +
mov eax [eax+4] +
mov [ebp+0Ch] eax +
push ebx  +
push esi  +
lea ecx [ebp+rcDst] +
call sub_1004CDB  +
mov eax [edi+14h] +
sub eax [edi+0Ch] +
mov [ebp+lprc] eax +
fild  [ebp+lprc] +
fdiv  [ebp+arg_8] +
fld  ds:dbl_1001CF8 +
fmul st(1) st +
fadd st(1) st +
fxch  st(1) +
call _ftol2_sse  +
mov ebx eax +
mov eax [edi+18h] +
sub eax [edi+10h] +
mov [ebp+lprc] eax +
fild  [ebp+lprc] +
fdiv  [ebp+arg_8] +
fmul st st(1) +
faddp st(1) st +
call _ftol2_sse  +
push dword ptr [ebp+0Ch]  +
mov ecx esi +
push [ebp+xRight]  +
mov [ebp+lprc] eax +
push dword ptr [ebp+0Ch]  +
push [ebp+xRight]  +
call sub_1004D44  +
push [ebp+lprc]  +
push ebx  +
push esi  +
call ds:InflateRect  +
mov ebx [ebp+xRight] +
mov eax ebx +
sub eax [ebp+rcDst.left] +
mov ecx [ebp+0Ch] +
mov [ebp+var_10] eax +
mov [ebp+var_8] eax +
mov eax [esi+8] +
sub eax [esi] +
sub ecx [ebp+rcDst.top] +
mov [ebp+lprc] eax +
mov eax [ebp+rcDst.right] +
fild  [ebp+lprc] +
sub eax [ebp+rcDst.left] +
mov [ebp+var_4] ecx +
mov [ebp+lprc] eax +
fidiv  [ebp+lprc] +
fstp  [ebp+lprc] +
fld  [ebp+lprc] +
fimul  [ebp+var_10] +
fld  ds:dbl_1001CF8 +
fadd st(1) st +
fxch  st(1) +
call _ftol2_sse  +
mov [ebp+var_8] eax +
mov eax [esi+0Ch] +
sub eax [esi+4] +
mov [ebp+lprc] eax +
mov eax [ebp+rcDst.bottom] +
fild  [ebp+lprc] +
sub eax [ebp+rcDst.top] +
mov [ebp+lprc] eax +
fidiv  [ebp+lprc] +
fstp  [ebp+lprc] +
fld  [ebp+lprc] +
fimul  [ebp+var_4] +
faddp st(1) st +
call _ftol2_sse  +
mov ecx [esi] +
mov edx [esi+4] +
mov [ebp+var_4] eax +
mov eax [ebp+var_8] +
add eax ecx +
mov ecx [ebp+var_4] +
sub ebx eax +
mov eax [ebp+0Ch] +
add ecx edx +
sub eax ecx +
push eax  +
push ebx  +
mov ecx esi +
call sub_1004D65  +
push esi  +
mov ecx edi +
call sub_10043B9  +
mov eax off_1018000 +
pop ebx  +
cmp eax offset off_1018000 +
jz loc_1005A3B  +
test byte ptr [eax+1Ch] 10h +
jz loc_1005A3B  +
mov ecx [esi+4] +
fld  [ebp+arg_8] +
mov edi [esi+0Ch] +
mov edx [esi] +
mov esi [esi+8] +
sub edi ecx +
push edi  +
sub esi edx +
push esi  +
push ecx  +
push edx  +
push dword ptr [ebp+0Ch]  +
push [ebp+xRight]  +
push ecx  +
push ecx  +
fstp  [esp+48h+var_48] +
push offset dword_1001AB8  +
push 1Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1004EC6  +
pop edi  +
pop esi  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
push esi  +
mov esi ecx +
cmp dword ptr [esi+4D8h] 3 +
jnz loc_1005AC3  +
xor eax eax +
mov [ebp+rcDst.left] eax +
mov [ebp+rcDst.top] eax +
mov [ebp+rcDst.right] eax +
mov [ebp+rcDst.bottom] eax +
lea eax [esi+494h] +
push eax  +
lea eax [esi+4B4h] +
push eax  +
lea eax [ebp+rcDst] +
push eax  +
call ds:IntersectRect  +
lea eax [ebp+var_8] +
push eax  +
lea ecx [ebp+rcDst] +
call sub_1004CF9  +
mov eax off_1018000 +
cmp eax offset off_1018000 +
jz loc_1005AB6  +
test byte ptr [eax+1Ch] 10h +
jz loc_1005AB6  +
push [ebp+var_4]  +
push [ebp+var_8]  +
push offset dword_1001AB8  +
push 1Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1004DE7  +
push [ebp+var_4]  +
mov ecx esi +
push [ebp+var_8]  +
call sub_10041F7  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ecx+8] +
pop ebp  +
jmp sub_100AAEF  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
mov esi ecx +
push edi  +
lea edi [esi+518h] +
xor ebx ebx +
cmp [edi] ebx +
jz loc_1005C9F  +
mov [ebp+var_4] ebx +
cmp [esi+4CCh] ebx +
jnz loc_1005B10  +
cmp [esi+52Ch] ebx +
jz loc_1005C26  +
fld1   +
fcomp  dword ptr [esi+490h] +
fnstsw  ax +
test ah 1 +
jz loc_1005C26  +
lea ecx [esi+4E4h] +
call sub_10139C4  +
test eax eax +
jnz loc_1005C26  +
mov eax [esi+498h] +
xor ecx ecx +
cmp eax [esi+10h] +
setle cl  +
mov eax ecx +
cmp eax ebx +
jz loc_1005B58  +
xor ecx ecx +
cmp [esi+530h] ebx +
setz cl  +
mov [ebp+var_4] ecx +
mov edi ds:ShowWindow +
neg eax  +
push 5  +
sbb eax eax +
pop ebx  +
and eax 0FFFFFFFBh +
add eax ebx +
push eax  +
push dword ptr [esi+518h]  +
call edi  +
mov eax [esi+4A0h] +
xor ecx ecx +
cmp eax [esi+18h] +
setnl cl  +
mov eax ecx +
test eax eax +
jz loc_1005B9C  +
cmp [ebp+var_4] 0 +
jnz loc_1005B9C  +
xor ecx ecx +
cmp dword ptr [esi+530h] 1 +
setz cl  +
mov [ebp+var_4] ecx +
neg eax  +
sbb eax eax +
and eax 0FFFFFFFBh +
add eax ebx +
push eax  +
push dword ptr [esi+51Ch]  +
call edi  +
mov eax [esi+494h] +
xor ecx ecx +
cmp eax [esi+0Ch] +
setle cl  +
mov eax ecx +
test eax eax +
jz loc_1005BD7  +
cmp [ebp+var_4] 0 +
jnz loc_1005BD7  +
xor ecx ecx +
cmp dword ptr [esi+530h] 2 +
setz cl  +
mov [ebp+var_4] ecx +
neg eax  +
sbb eax eax +
and eax 0FFFFFFFBh +
add eax ebx +
push eax  +
push dword ptr [esi+520h]  +
call edi  +
mov eax [esi+49Ch] +
xor ecx ecx +
cmp eax [esi+14h] +
setnl cl  +
mov eax ecx +
test eax eax +
jz loc_1005C12  +
cmp [ebp+var_4] 0 +
jnz loc_1005C12  +
xor ecx ecx +
cmp dword ptr [esi+530h] 3 +
setz cl  +
mov [ebp+var_4] ecx +
neg eax  +
sbb eax eax +
and eax 0FFFFFFFBh +
add eax ebx +
push eax  +
push dword ptr [esi+524h]  +
call edi  +
jmp loc_1005C40  +
push 4  +
pop ebx  +
push 0  +
push dword ptr [edi]  +
call ds:ShowWindow  +
add edi 4 +
dec ebx  +
jnz loc_1005C29  +
mov [ebp+var_4] 1 +
cmp [ebp+var_4] 0 +
jz loc_1005C9F  +
mov eax off_1018000 +
mov edi ds:GetParent +
cmp eax offset off_1018000 +
jz loc_1005C84  +
test byte ptr [eax+1Ch] 10h +
jz loc_1005C84  +
push dword ptr [esi+518h]  +
call edi  +
push eax  +
push dword ptr [esi+530h]  +
mov eax off_1018000 +
push offset dword_1001AB8  +
push 1Dh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1004DE7  +
push 89Ah  +
push dword ptr [esi+518h]  +
call edi  +
push eax  +
call ds:KillTimer  +
and dword ptr [esi+538h] 0 +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
xor edi edi +
lea esi [ecx+52Ch] +
cmp [ebp+arg_0] edi +
jz loc_1005CD9  +
cmp [esi] edi +
jnz loc_1005CED  +
push edi  +
push 1388h  +
push 899h  +
push dword ptr [ecx+40h]  +
call ds:SetTimer  +
mov [esi] eax +
jmp loc_1005CED  +
cmp [esi] edi +
jz loc_1005CED  +
push 899h  +
push dword ptr [ecx+40h]  +
call ds:KillTimer  +
mov [esi] edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 89Ah  +
push [ebp+hWnd]  +
call ds:GetParent  +
push eax  +
call ds:KillTimer  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
mov esi ecx +
xor ebx ebx +
cmp [esi+534h] ebx +
jnz loc_1005E71  +
mov eax [esi+530h] +
push edi  +
xor edi edi +
inc edi  +
sub eax ebx +
mov [esi+534h] edi +
mov [ebp+var_4] ebx +
jz loc_1005DB3  +
dec eax  +
jz loc_1005D91  +
dec eax  +
jz loc_1005D71  +
dec eax  +
jnz loc_1005E69  +
lea eax [esi+494h] +
mov ecx [eax+8] +
sub ecx [eax] +
mov [ebp+var_8] ecx +
fild  [ebp+var_8] +
fmul  ds:dbl_1001D08 +
jmp loc_1005D88  +
lea eax [esi+494h] +
mov ecx [eax+8] +
sub ecx [eax] +
mov [ebp+var_8] ecx +
fild  [ebp+var_8] +
fmul  ds:dbl_1001D00 +
call _ftol2_sse  +
mov ebx eax +
jmp loc_1005DD3  +
mov eax [esi+4A0h] +
sub eax [esi+498h] +
mov [ebp+var_8] eax +
fild  [ebp+var_8] +
fmul  ds:dbl_1001D08 +
call _ftol2_sse  +
mov [ebp+var_4] eax +
jmp loc_1005DD7  +
mov eax [esi+4A0h] +
sub eax [esi+498h] +
mov [ebp+var_8] eax +
fild  [ebp+var_8] +
fmul  ds:dbl_1001D00 +
call _ftol2_sse  +
mov [ebp+var_4] eax +
test ebx ebx +
jnz loc_1005DE1  +
cmp [ebp+var_4] 0 +
jz loc_1005E69  +
push 17h  +
call ds:GetSystemMetrics  +
xor ecx ecx +
test eax eax +
setnz cl  +
inc ecx  +
mov eax ecx +
push eax  +
call ds:GetAsyncKeyState  +
test ax ax +
jge loc_1005E37  +
mov eax off_1018000 +
cmp eax offset off_1018000 +
jz loc_1005E23  +
test byte ptr [eax+1Ch] 10h +
jz loc_1005E23  +
push offset dword_1001AB8  +
push 20h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10030A0  +
push edi  +
push [ebp+var_4]  +
mov ecx esi +
push ebx  +
mov [esi+538h] edi +
call sub_10057C2  +
jmp loc_1005E69  +
mov eax off_1018000 +
cmp eax offset off_1018000 +
jz loc_1005E5B  +
test byte ptr [eax+1Ch] 10h +
jz loc_1005E5B  +
push offset dword_1001AB8  +
push 21h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10030A0  +
push 89Ah  +
push dword ptr [esi+40h]  +
call ds:KillTimer  +
and dword ptr [esi+534h] 0 +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push esi  +
mov esi ecx +
mov eax off_1018000 +
cmp eax offset off_1018000 +
jz loc_1005EA9  +
test byte ptr [eax+1Ch] 10h +
jz loc_1005EA9  +
push offset dword_1001AB8  +
push 22h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10030A0  +
mov eax [esi+530h] +
test eax eax +
jl loc_1005F00  +
push edi  +
lea ecx [ebp+Rect] +
push ecx  +
push dword ptr [esi+eax*4+518h]  +
call ds:GetWindowRect  +
lea eax [ebp+var_8] +
push eax  +
lea ecx [ebp+Rect] +
call sub_1004CF9  +
xor ecx ecx +
inc ecx  +
push ecx  +
mov eax ecx +
push eax  +
push [ebp+var_4]  +
lea ecx [ebp+var_10] +
push [ebp+var_8]  +
call sub_1004199  +
mov esi eax +
lea edi [ebp+Rect] +
movs   +
movs   +
movs   +
lea eax [ebp+Rect] +
movs   +
mov esi ds:ClipCursor +
push eax  +
call esi  +
push 0  +
call esi  +
pop edi  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ebp+arg_0] +
and [ebp+var_4] 0 +
push esi  +
mov esi ecx +
lea ecx [ebp+var_4] +
mov dword ptr [esi+8] 6 +
mov dword ptr [esi] offset off_1001BCC +
mov eax [eax] +
push ecx  +
push eax  +
call GdipCreateSolidFill  +
mov [esi+8] eax +
mov eax [ebp+var_4] +
mov [esi+4] eax +
mov eax esi +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
push dword ptr [esi+4]  +
mov dword ptr [esi] offset off_1001BCC +
call GdipDeleteBrush  +
test byte ptr [ebp+8] 1 +
jz loc_1005F68  +
push esi  +
call GdipFree  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
push esi  +
lea eax [ebp+var_4] +
push eax  +
push [ebp+arg_0]  +
mov esi ecx +
call GdipCreateFromHDC  +
mov [esi+4] eax +
mov eax [ebp+var_4] +
mov [esi] eax +
mov eax esi +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
push dword ptr [esi]  +
call GdipSetSmoothingMode  +
push eax  +
mov ecx esi +
call sub_1004DCB  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
push [ebp+arg_8]  +
mov esi ecx +
push [ebp+arg_4]  +
push dword ptr [eax]  +
push dword ptr [esi]  +
call GdipDrawPolygonI  +
push eax  +
mov ecx esi +
call sub_1004DCB  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
push [ebp+arg_10]  +
mov esi ecx +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push dword ptr [eax+4]  +
push dword ptr [esi]  +
call GdipFillRectangleI  +
push eax  +
mov ecx esi +
call sub_1004DCB  +
pop esi  +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
push [ebp+arg_C]  +
mov esi ecx +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push dword ptr [eax+4]  +
push dword ptr [esi]  +
call GdipFillPolygonI  +
push eax  +
mov ecx esi +
call sub_1004DCB  +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1005088  +
test [ebp+arg_0] 1 +
jz loc_100606E  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
push ebx  +
mov ebx ecx +
mov ecx dword_1018590 +
push esi  +
push edi  +
test ecx ecx +
jz loc_10060A7  +
mov eax [ecx] +
lea edx [ebp+8] +
push edx  +
call dword ptr [eax+4]  +
mov ecx dword_1018590 +
mov eax [ecx] +
push 1  +
call dword ptr [eax+8]  +
lea edi [ebx+4B4h] +
lea esi [ebp+8] +
movs   +
movs   +
mov ecx [ebx+4E0h] +
movs   +
movs   +
xor eax eax +
cmp dword ptr [ebp+18h] 0Ch +
lea esi [ebx+494h] +
mov [ebp+18h] esi +
lea edi [ebp-1Ch] +
movs   +
setz al  +
movs   +
movs   +
inc eax  +
inc eax  +
mov [ebx+4D8h] eax +
movs   +
call sub_100F1C7  +
test eax eax +
jz loc_10060F1  +
lea esi [ebx+4A4h] +
lea edi [ebp-1Ch] +
movs   +
movs   +
movs   +
movs   +
mov eax [ebx+14h] +
sub eax [ebx+0Ch] +
mov [ebp-4] eax +
fild  dword ptr [ebp-4] +
fdiv  dword ptr [ebx+490h] +
call _ftol2_sse  +
mov [ebp-0Ch] eax +
mov eax [ebx+18h] +
sub eax [ebx+10h] +
mov [ebp-4] eax +
fild  dword ptr [ebp-4] +
fdiv  dword ptr [ebx+490h] +
call _ftol2_sse  +
push dword ptr [ebp+1Ch]  +
lea ecx [ebp-1Ch] +
push ecx  +
sub esp 10h +
mov edi esp +
lea esi [ebp+8] +
movs   +
movs   +
movs   +
push eax  +
push dword ptr [ebp-0Ch]  +
mov ecx ebx +
movs   +
call sub_1004459  +
lea eax [ebp-1Ch] +
push eax  +
mov ecx ebx +
call sub_10043B9  +
lea eax [ebp-1Ch] +
push eax  +
push dword ptr [ebp+18h]  +
call ds:EqualRect  +
test eax eax +
jnz loc_1006290  +
cmp dword_1018584 eax +
jz loc_10061C3  +
mov al byte_1018588 +
cmp al 4 +
jnb loc_1006175  +
test al al +
jnz loc_10061C3  +
mov eax dword_1018570 +
mov ecx dword_1018574 +
mov edx 10000h +
mov esi 80000000h +
and eax edx +
and ecx esi +
or eax ecx +
jz loc_10061C3  +
mov eax dword_1018578 +
mov edi dword_101857C +
mov ecx eax +
and ecx edx +
mov edx edi +
and edx esi +
cmp ecx eax +
jnz loc_10061C3  +
cmp edx edi +
jnz loc_10061C3  +
push offset dword_10016E8  +
push dword_101855C  +
push dword_1018558  +
call sub_10036D0  +
lea eax [ebp+8] +
push eax  +
push dword ptr [ebp+18h]  +
xor esi esi +
lea eax [ebp-2Ch] +
push eax  +
mov [ebp-2Ch] esi +
mov [ebp-28h] esi +
mov [ebp-24h] esi +
mov [ebp-20h] esi +
call ds:UnionRect  +
push dword ptr [ebp+18h]  +
lea eax [ebp-2Ch] +
push eax  +
call ds:EqualRect  +
test eax eax +
jnz loc_1006290  +
mov eax off_1018000 +
cmp eax offset off_1018000 +
jz loc_100622F  +
test byte ptr [eax+1Ch] 10h +
jz loc_100622F  +
mov ecx [ebp+14h] +
sub ecx [ebp+0Ch] +
push ecx  +
mov ecx [ebp+10h] +
sub ecx [ebp+8] +
push ecx  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push offset dword_1001AB8  +
push 0Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1003F6D  +
lea eax [ebp-0Ch] +
push eax  +
lea ecx [ebp+8] +
call sub_1004CF9  +
mov ecx [eax] +
mov [ebx+4D0h] ecx +
mov ecx [ebx+4E0h] +
mov eax [eax+4] +
sub esp 10h +
cmp ecx esi +
mov [ebx+4D4h] eax +
lea esi [ebp-1Ch] +
jz loc_1006282  +
lea edi [ebx+4A4h] +
movs   +
movs   +
movs   +
movs   +
mov edi esp +
lea esi [ebp-1Ch] +
movs   +
movs   +
movs   +
movs   +
mov esi [ebp+18h] +
sub esp 10h +
mov edi esp +
movs   +
movs   +
movs   +
movs   +
call sub_100F94D  +
jmp loc_1006290  +
mov edi esp +
movs   +
movs   +
movs   +
lea ecx [ebx+4] +
mov eax [ecx] +
movs   +
call dword ptr [eax+4]  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push ebx  +
push esi  +
push 0  +
mov ebx ecx +
push offset aFullscreenma_2  +
lea ecx [ebp+var_C] +
call sub_1002FF5  +
lea ecx [ebx+4E4h] +
call sub_10139C4  +
test eax eax +
jnz loc_10063D3  +
mov ecx [ebx+514h] +
push edi  +
push 0Eh  +
call sub_1010AB4  +
fstp  [ebp+var_4] +
cmp dword_1018584 0 +
mov edi 10000h +
mov esi 80000000h +
jz loc_1006341  +
mov al byte_1018588 +
cmp al 4 +
jnb loc_10062FB  +
test al al +
jnz loc_1006341  +
mov eax dword_1018570 +
mov ecx dword_1018574 +
and eax edi +
and ecx esi +
or eax ecx +
jz loc_1006341  +
mov eax dword_1018578 +
mov edx dword_101857C +
mov ecx eax +
and ecx edi +
and edx esi +
cmp ecx eax +
jnz loc_1006341  +
cmp edx dword_101857C +
jnz loc_1006341  +
push offset dword_10016B8  +
push dword_101855C  +
push dword_1018558  +
call sub_10036D0  +
mov ecx [ebx+4E0h] +
test ecx ecx +
jz loc_100636A  +
cmp [ebp+arg_0] 0 +
jz loc_100636A  +
fld  [ebp+var_4] +
push ecx  +
push ecx  +
fstp  [esp+20h+var_1C] +
fld  dword ptr [ebx+490h] +
fstp  [esp+20h+var_20] +
call sub_100FA70  +
jmp loc_10063D2  +
fld  [ebp+var_4] +
lea ecx [ebx+4] +
mov eax [ecx] +
push ecx  +
fstp  [esp+1Ch+var_1C] +
call dword ptr [eax]  +
cmp dword_1018584 0 +
jz loc_10063D2  +
mov al byte_1018588 +
cmp al 4 +
jnb loc_100638E  +
test al al +
jnz loc_10063D2  +
mov eax dword_1018570 +
mov ecx dword_1018574 +
and eax edi +
and ecx esi +
or eax ecx +
jz loc_10063D2  +
mov eax dword_1018578 +
mov ecx eax +
and ecx edi +
mov edi dword_101857C +
mov edx edi +
and edx esi +
cmp ecx eax +
jnz loc_10063D2  +
cmp edx edi +
jnz loc_10063D2  +
push offset dword_10016C8  +
push dword_101855C  +
push dword_1018558  +
call sub_10036D0  +
pop edi  +
mov ecx [ebx+514h] +
push 0Fh  +
call sub_1010A90  +
push eax  +
call sub_100E911  +
mov ecx [ebx+514h] +
push 10h  +
lea esi [ebx+48h] +
call sub_1010A90  +
dec eax  +
neg eax  +
sbb eax eax +
inc eax  +
push eax  +
mov ecx esi +
call sub_100D493  +
mov ecx [ebx+514h] +
push 12h  +
call sub_1010A90  +
dec eax  +
neg eax  +
sbb eax eax +
inc eax  +
push eax  +
mov ecx esi +
call sub_100D4A7  +
mov ecx [ebx+514h] +
push 11h  +
call sub_1010A90  +
dec eax  +
neg eax  +
sbb eax eax +
inc eax  +
push eax  +
mov ecx esi +
call sub_101103A  +
lea ecx [ebp+var_C] +
call sub_1003039  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push ebx  +
push esi  +
push edi  +
mov ebx ecx +
xor edi edi +
cmp [ebx+4D8h] edi +
jz loc_100647D  +
mov ecx [ebx+4] +
push edi  +
push edi  +
push 10h  +
call ds:?GetHWND@NativeHWNDHost@DirectUI@@QAEPAUHWND__@@XZ  +
push eax  +
call ds:PostMessageW  +
jmp loc_1006735  +
lea esi [ebx+4E0h] +
mov ecx esi +
mov [ebp-4] esi +
call sub_10139C4  +
test eax eax +
jz loc_100661A  +
mov ecx esi +
call sub_1013A31  +
mov ecx esi +
cmp eax 1 +
jnz loc_10064FB  +
push 2  +
call sub_10139CD  +
mov eax off_1018000 +
cmp eax offset off_1018000 +
jz loc_10064CE  +
test byte ptr [eax+1Ch] 10h +
jz loc_10064CE  +
push offset dword_1001AB8  +
push 10h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10030A0  +
mov ecx [ebx+4DCh] +
cmp ecx edi +
jz loc_1006735  +
fld  ds:dbl_1001D68 +
lea eax [ebx+8] +
sub esp 18h +
fstp  qword ptr [esp+10h] +
mov esi eax +
mov edi esp +
movs   +
movs   +
movs   +
movs   +
mov esi eax +
jmp loc_10065B7  +
call sub_1013A31  +
cmp eax 2 +
jnz loc_10065CA  +
push 3  +
mov ecx esi +
call sub_10139CD  +
cmp [ebx+4DCh] edi +
jz loc_1006735  +
mov ecx esi +
call sub_1013A31  +
cmp eax 3 +
jnz loc_1006573  +
mov eax off_1018000 +
cmp eax offset off_1018000 +
jz loc_100654E  +
test byte ptr [eax+1Ch] 10h +
jz loc_100654E  +
push offset dword_1001AB8  +
push 11h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10030A0  +
lea eax [ebp-14h] +
push eax  +
mov ecx esi +
call sub_10139A6  +
fld  ds:dbl_1001D60 +
sub esp 18h +
fstp  qword ptr [esp+10h] +
mov esi eax +
mov edi esp +
movs   +
movs   +
movs   +
movs   +
lea esi [ebx+8] +
jmp loc_10065B1  +
mov eax off_1018000 +
cmp eax offset off_1018000 +
jz loc_1006597  +
test byte ptr [eax+1Ch] 10h +
jz loc_1006597  +
push offset dword_1001AB8  +
push 12h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10030A0  +
fld  ds:dbl_1001D58 +
lea eax [ebx+8] +
sub esp 18h +
fstp  qword ptr [esp+10h] +
mov esi eax +
mov edi esp +
movs   +
movs   +
movs   +
movs   +
mov esi eax +
mov ecx [ebx+4DCh] +
sub esp 10h +
mov edi esp +
movs   +
movs   +
movs   +
movs   +
call sub_100FB69  +
jmp loc_1006735  +
mov ecx [ebx+510h] +
push 0Eh  +
call sub_1010AB4  +
fstp  dword ptr [ebp+8] +
sub esp 10h +
fld  dword ptr [ebp+8] +
mov edi esp +
lea esi [ebx+8] +
movs   +
movs   +
movs   +
movs   +
sub esp 10h +
mov edi esp +
lea esi [ebx+490h] +
movs   +
movs   +
movs   +
push ecx  +
movs   +
fstp  dword ptr [esp] +
call sub_100EA6C  +
mov ecx [ebp-4] +
push 0  +
call sub_10139CD  +
mov ecx [ebp-4] +
push 0  +
call sub_1013D77  +
jmp loc_1006735  +
mov ecx [ebx+510h] +
push 0Eh  +
call sub_1010A90  +
mov [ebp-4] eax +
cmp [ebp+8] edi +
jz loc_1006648  +
fild  dword ptr [ebp-4] +
mov eax [ebx] +
push ecx  +
mov ecx ebx +
fdiv  ds:dbl_1001AB0 +
fstp  dword ptr [ebp+8] +
fld  dword ptr [ebp+8] +
fstp  dword ptr [esp] +
call dword ptr [eax]  +
cmp dword_1018584 edi +
jz loc_10066AD  +
mov al byte_1018588 +
cmp al 4 +
jnb loc_100665D  +
test al al +
jnz loc_10066AD  +
mov eax dword_1018570 +
mov ecx dword_1018574 +
mov edx 10000h +
mov esi 80000000h +
and eax edx +
and ecx esi +
or eax ecx +
jz loc_10066AD  +
mov eax dword_1018578 +
mov edi dword_101857C +
mov ecx eax +
and ecx edx +
mov edx edi +
and edx esi +
cmp ecx eax +
jnz loc_10066AB  +
cmp edx edi +
jnz loc_10066AB  +
push offset dword_10016C8  +
push dword_101855C  +
push dword_1018558  +
call sub_10036D0  +
xor edi edi +
cmp dword ptr [ebp-4] 64h +
lea esi [ebx+44h] +
jnz loc_10066C9  +
push edi  +
mov ecx esi +
call sub_100D493  +
push edi  +
mov ecx esi +
call sub_100D4A7  +
push edi  +
jmp loc_1006713  +
mov ecx [ebx+510h] +
push 10h  +
call sub_1010A90  +
dec eax  +
neg eax  +
sbb eax eax +
inc eax  +
push eax  +
mov ecx esi +
call sub_100D493  +
mov ecx [ebx+510h] +
push 12h  +
call sub_1010A90  +
dec eax  +
neg eax  +
sbb eax eax +
inc eax  +
push eax  +
mov ecx esi +
call sub_100D4A7  +
mov ecx [ebx+510h] +
push 11h  +
call sub_1010A90  +
dec eax  +
neg eax  +
sbb eax eax +
inc eax  +
push eax  +
mov ecx esi +
call sub_101103A  +
fild  dword ptr [ebp-4] +
push ecx  +
mov ecx [ebx+4] +
fdiv  ds:dbl_1001AB0 +
fstp  dword ptr [ebp+8] +
fld  dword ptr [ebp+8] +
fstp  dword ptr [esp] +
call sub_100A268  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 34h +
fldz   +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
push edi  +
lea esi [ebp+arg_4] +
mov edi ebx +
movs   +
movs   +
movs   +
movs   +
fcomp  dword ptr [ecx+1Ch] +
mov [ebp+var_4] ecx +
fnstsw  ax +
test ah 44h +
jnp loc_10068B7  +
push [ebp+pt.y]  +
lea eax [ebp+rc2] +
push [ebp+pt.x]  +
push eax  +
call sub_10047E7  +
mov edi [ebp+var_4] +
lea eax [ebp+rc2] +
push eax  +
lea esi [edi+0Ch] +
push esi  +
call ds:EqualRect  +
test eax eax +
jnz loc_10067C6  +
lea ecx [ebp+rc2] +
call sub_1004D28  +
test eax eax +
jnz loc_10067C6  +
push [ebp+pt.y]  +
mov ecx [ebp+var_4] +
push [ebp+pt.x]  +
lea esi [ebp+arg_4] +
sub esp 10h +
mov edi esp +
movs   +
movs   +
movs   +
lea eax [ebp+var_34] +
push eax  +
movs   +
call sub_1005486  +
mov esi eax +
mov edi ebx +
movs   +
movs   +
movs   +
movs   +
jmp loc_10068B7  +
mov eax [esi+0Ch] +
sub eax [esi+4] +
push ecx  +
mov [ebp+var_4] eax +
mov eax [ebp+arg_10] +
sub eax [ebp+arg_8] +
push ecx  +
mov [ebp+arg_0] eax +
fild  [ebp+arg_0] +
fmul  dword ptr [edi+1Ch] +
fadd st st +
fild  [ebp+arg_8] +
fidiv  [ebp+var_4] +
fmulp st(1) st +
fstp  [esp+48h+var_48] +
call ds:ceil  +
call _ftol2_sse  +
mov [ebp+var_10] eax +
mov eax [esi+8] +
sub eax [esi] +
mov [ebp+var_4] eax +
mov eax [ebp+arg_C] +
sub eax [ebp+arg_4] +
mov [ebp+arg_0] eax +
fild  [ebp+arg_0] +
fmul  dword ptr [edi+1Ch] +
fadd st st +
fild  [ebp+arg_4] +
fidiv  [ebp+var_4] +
fmulp st(1) st +
fstp  [esp+48h+var_48] +
call ds:ceil  +
call _ftol2_sse  +
mov [ebp+var_C] eax +
mov eax [esi+0Ch] +
sub eax [esi+4] +
mov [ebp+var_4] eax +
mov eax [ebp+arg_10] +
sub eax [ebp+arg_8] +
mov [ebp+var_8] eax +
mov eax [edi+18h] +
sub eax [ebp+arg_10] +
mov [ebp+arg_0] eax +
fild  [ebp+arg_0] +
fidiv  [ebp+var_4] +
fild  [ebp+var_8] +
fmul  dword ptr [edi+1Ch] +
fadd st st +
fmulp st(1) st +
fstp  [esp+48h+var_48] +
call ds:ceil  +
call _ftol2_sse  +
mov [ebp+var_14] eax +
mov eax [esi+8] +
sub eax [esi] +
mov [ebp+var_8] eax +
mov eax [ebp+arg_C] +
sub eax [ebp+arg_4] +
mov [ebp+var_4] eax +
mov eax [edi+14h] +
sub eax [ebp+arg_C] +
mov [ebp+arg_0] eax +
fild  [ebp+arg_0] +
fidiv  [ebp+var_8] +
fild  [ebp+var_4] +
fmul  dword ptr [edi+1Ch] +
fadd st st +
fmulp st(1) st +
fstp  [esp+48h+var_48] +
call ds:ceil  +
pop ecx  +
pop ecx  +
call _ftol2_sse  +
mov ecx [ebp+var_C] +
add [ebx] ecx +
sub [ebx+8] eax +
mov ecx [ebp+var_10] +
mov eax [ebp+var_14] +
add [ebx+4] ecx +
sub [ebx+0Ch] eax +
mov ecx dword_1018598 +
test ecx ecx +
jz loc_10068D4  +
mov eax [ecx] +
push ebx  +
call dword ptr [eax+4]  +
mov ecx dword_1018598 +
mov eax [ecx] +
push 1  +
call dword ptr [eax+8]  +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
leave   +
retn 1Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
sub eax 837h +
push esi  +
mov esi ecx +
jz loc_1006913  +
sub eax 62h +
jz loc_1006903  +
dec eax  +
jnz loc_100691E  +
call sub_1005D1B  +
jmp loc_100691E  +
push 0  +
call sub_1005CA9  +
mov ecx esi +
call sub_1005ADE  +
jmp loc_100691E  +
lea ecx [esi+4E4h] +
call sub_1013C37  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 64h +
push ebx  +
push esi  +
mov ebx ecx +
xor esi esi +
push edi  +
cmp [ebx+4CCh] esi +
jz loc_1006962  +
lea eax [ebp+pgui] +
push eax  +
push esi  +
mov [ebp+pgui.cbSize] 30h +
call ds:GetGUIThreadInfo  +
test eax eax +
jz loc_1006BD2  +
cmp [ebp+pgui.hwndCapture] esi +
jz loc_1006BD2  +
fldz   +
fcomp  dword ptr [ebx+1Ch] +
fnstsw  ax +
test ah 44h +
jp loc_10069B9  +
push [ebp+pt.y]  +
fld  ds:flt_1001BC8 +
lea esi [ebx+494h] +
fstp  dword ptr [ebx+1Ch] +
push [ebp+pt.x]  +
lea eax [ebp+var_24] +
sub esp 10h +
mov edi esp +
movs   +
movs   +
movs   +
push eax  +
mov ecx ebx +
movs   +
call sub_1006741  +
push [ebp+pt.y]  +
mov esi eax +
push [ebp+pt.x]  +
lea edi [ebp+rc] +
movs   +
movs   +
movs   +
lea eax [ebp+rc] +
push eax  +
movs   +
call ds:PtInRect  +
test eax eax +
jnz loc_10069B9  +
fldz   +
fstp  dword ptr [ebx+1Ch] +
push [ebp+pt.y]  +
lea esi [ebx+494h] +
push [ebp+pt.x]  +
lea eax [ebp+var_24] +
sub esp 10h +
mov edi esp +
movs   +
movs   +
movs   +
push eax  +
mov ecx ebx +
movs   +
call sub_1006741  +
push [ebp+pt.y]  +
mov esi eax +
push [ebp+pt.x]  +
lea edi [ebp+rc] +
movs   +
movs   +
movs   +
lea eax [ebp+rc] +
push eax  +
movs   +
call ds:PtInRect  +
test eax eax +
jnz loc_1006B39  +
mov esi [ebp+pt.x] +
mov ecx [ebx+4C4h] +
mov edi [ebp+pt.y] +
mov edx [ebx+4C8h] +
mov eax esi +
sub eax ecx +
mov ecx edi +
sub ecx edx +
cmp dword ptr [ebx+4CCh] 0 +
mov [ebp+var_14] eax +
mov [ebp+dy] ecx +
jz loc_1006ABF  +
lea eax [ebp+var_1C] +
push eax  +
lea ecx [ebx+494h] +
call sub_1004CF9  +
mov ecx [eax] +
mov eax [eax+4] +
sub edi eax +
mov eax [ebx+18h] +
sub eax [ebx+10h] +
sub esi ecx +
mov [ebp+var_4] eax +
fild  [ebp+var_4] +
mov [ebp+var_1C] esi +
mov [ebp+var_14] esi +
mov [ebp+dy] edi +
fmul  dword ptr [ebx+1Ch] +
fld  ds:dbl_1001CF8 +
fmul st(1) st +
fxch  st(1) +
call _ftol2_sse  +
mov [ebp+var_8] eax +
mov eax [ebx+14h] +
sub eax [ebx+0Ch] +
mov [ebp+var_4] eax +
fild  [ebp+var_4] +
fmul  dword ptr [ebx+1Ch] +
fmulp st(1) st +
call _ftol2_sse  +
mov ebx eax +
mov eax esi +
cdq   +
mov esi eax +
xor esi edx +
sub esi edx +
mov eax edi +
cdq   +
mov ecx eax +
xor ecx edx +
sub ecx edx +
cmp ecx esi +
jle loc_1006A9E  +
mov eax edi +
cdq   +
idiv  ecx +
jmp loc_1006AA0  +
xor eax eax +
imul eax [ebp+var_8] +
cmp esi ecx +
mov edi eax +
jle loc_1006AB2  +
mov eax [ebp+var_1C] +
cdq   +
idiv  esi +
jmp loc_1006AB4  +
xor eax eax +
imul eax ebx +
mov [ebp+var_14] eax +
mov [ebp+dy] edi +
jmp loc_1006B26  +
push edx  +
push dword ptr [ebx+4C4h]  +
lea eax [ebp+rc] +
push eax  +
call ds:PtInRect  +
test eax eax +
jnz loc_1006B26  +
lea eax [ebp+var_C] +
push eax  +
lea ecx [ebp+rc] +
call sub_1004CF9  +
mov eax [ebp+var_C] +
sub eax [ebx+4C4h] +
cdq   +
mov ecx eax +
mov eax [ebp+var_C] +
sub eax [ebp+pt.x] +
xor ecx edx +
sub ecx edx +
cdq   +
xor eax edx +
sub eax edx +
cmp ecx eax +
jl loc_1006B26  +
mov eax [ebp+var_8] +
sub eax [ebx+4C8h] +
cdq   +
mov ecx eax +
mov eax [ebp+var_8] +
sub eax [ebp+pt.y] +
xor ecx edx +
sub ecx edx +
cdq   +
xor eax edx +
sub eax edx +
cmp ecx eax +
jl loc_1006B26  +
and [ebp+var_14] 0 +
and [ebp+dy] 0 +
push [ebp+dy]  +
mov ecx [ebp+lprc] +
push [ebp+var_14]  +
call sub_1004D65  +
jmp loc_1006BD2  +
fldz   +
fcomp  dword ptr [ebx+1Ch] +
fnstsw  ax +
test ah 44h +
jp loc_1006B77  +
mov eax [ebp+pt.y] +
cmp [ebp+rc.top] eax +
jnz loc_1006B53  +
push 0FFFFFFFAh  +
push 0  +
jmp loc_1006BC9  +
inc eax  +
cmp [ebp+rc.bottom] eax +
jnz loc_1006B5D  +
push 6  +
jmp loc_1006B4F  +
mov eax [ebp+pt.x] +
cmp [ebp+rc.left] eax +
jnz loc_1006B6B  +
push 0  +
push 0FFFFFFFAh  +
jmp loc_1006BC9  +
inc eax  +
cmp [ebp+rc.right] eax +
jnz loc_1006BD2  +
push 0  +
push 6  +
jmp loc_1006BC9  +
mov eax [ebx+498h] +
cmp [ebp+rc.top] eax +
jnz loc_1006B8B  +
cmp eax [ebx+10h] +
jz loc_1006B8B  +
push 0FFFFFFFDh  +
jmp loc_1006B4F  +
mov eax [ebx+4A0h] +
cmp [ebp+rc.bottom] eax +
jnz loc_1006B9F  +
cmp eax [ebx+18h] +
jz loc_1006B9F  +
push 3  +
jmp loc_1006B4F  +
mov eax [ebx+494h] +
cmp [ebp+rc.left] eax +
jnz loc_1006BB5  +
cmp eax [ebx+0Ch] +
jz loc_1006BB5  +
push 0  +
push 0FFFFFFFDh  +
jmp loc_1006BC9  +
mov eax [ebx+49Ch] +
cmp [ebp+rc.right] eax +
jnz loc_1006BD2  +
cmp eax [ebx+14h] +
jz loc_1006BD2  +
push 0  +
push 3  +
push [ebp+lprc]  +
call ds:OffsetRect  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
push ebx  +
push esi  +
mov esi ecx +
mov ecx [esi+518h] +
xor ebx ebx +
cmp ecx ebx +
jz loc_1006DAE  +
fld1   +
fcomp  dword ptr [esi+490h] +
fnstsw  ax +
test ah 5 +
jp loc_1006DA7  +
push edi  +
lea eax [ebp+Rect] +
push eax  +
push ecx  +
mov [ebp+uFlags] 14h +
call ds:GetWindowRect  +
mov edi [ebp+Rect.right] +
mov eax [ebp+Rect.bottom] +
sub edi [ebp+Rect.left] +
sub eax [ebp+Rect.top] +
mov [ebp+var_C] edi +
mov [ebp+cy] eax +
cmp [ebp+hWinPosInfo] ebx +
jz loc_1006CA6  +
xor ecx ecx +
fld  dword ptr [esi+490h] +
fld  flt_1018008[ecx*8] +
fcompp st(1) st +
fnstsw  ax +
test ah 41h +
jz loc_1006C57  +
inc ecx  +
cmp ecx 5 +
jb loc_1006C39  +
jmp loc_1006C62  +
mov eax dword_1018004[ecx*8] +
cmp eax ebx +
jnz loc_1006C67  +
mov eax dword_1018024 +
lea ecx [esi+528h] +
cmp eax [ecx] +
jz loc_1006CA6  +
push ebx  +
mov [ecx] eax +
mov [ebp+var_14] eax +
mov [ebp+var_10] eax +
push 80800000h  +
lea eax [ebp+var_1C] +
push eax  +
mov [ebp+var_1C] ebx +
mov [ebp+var_18] ebx +
call ds:AdjustWindowRect  +
mov eax [ebp+var_14] +
sub eax [ebp+var_1C] +
mov [ebp+var_C] eax +
mov eax [ebp+var_10] +
sub eax [ebp+var_18] +
mov edi [ebp+var_C] +
mov [ebp+cy] eax +
jmp loc_1006CAD  +
mov [ebp+uFlags] 15h +
push 4  +
call ds:BeginDeferWindowPos  +
push [ebp+uFlags]  +
mov ecx eax +
mov eax [esi+49Ch] +
sub eax [esi+494h] +
push [ebp+cy]  +
cdq   +
sub eax edx +
mov ebx eax +
mov eax edi +
cdq   +
sub eax edx +
push edi  +
mov edi ds:DeferWindowPos +
sar eax 1 +
sar ebx 1 +
sub ebx eax +
mov eax [esi+498h] +
add ebx [esi+494h] +
push eax  +
push ebx  +
push 0  +
push dword ptr [esi+518h]  +
push ecx  +
call edi  +
push [ebp+uFlags]  +
mov ecx [esi+4A0h] +
push [ebp+cy]  +
sub ecx [ebp+cy] +
push [ebp+var_C]  +
inc ecx  +
push ecx  +
push ebx  +
push 0  +
push dword ptr [esi+51Ch]  +
push eax  +
call edi  +
push [ebp+uFlags]  +
mov [ebp+hWinPosInfo] eax +
mov eax [esi+4A0h] +
sub eax [esi+498h] +
push [ebp+cy]  +
mov ecx [esi+494h] +
push [ebp+var_C]  +
cdq   +
sub eax edx +
mov ebx eax +
mov eax [ebp+cy] +
cdq   +
sub eax edx +
sar ebx 1 +
sar eax 1 +
sub ebx eax +
add ebx [esi+498h] +
push ebx  +
push ecx  +
push 0  +
push dword ptr [esi+520h]  +
push [ebp+hWinPosInfo]  +
call edi  +
push [ebp+uFlags]  +
mov ecx [esi+49Ch] +
push [ebp+cy]  +
sub ecx [ebp+var_C] +
push [ebp+var_C]  +
inc ecx  +
push ebx  +
push ecx  +
xor ebx ebx +
push ebx  +
push dword ptr [esi+524h]  +
push eax  +
call edi  +
push eax  +
call ds:EndDeferWindowPos  +
lea eax [esi+518h] +
mov edi eax +
mov [ebp+hWinPosInfo] 4 +
push ebx  +
push ebx  +
push dword ptr [edi]  +
call ds:InvalidateRect  +
add edi 4 +
dec [ebp+hWinPosInfo]  +
jnz loc_1006D94  +
pop edi  +
mov ecx esi +
call sub_1005ADE  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov esi ecx +
mov eax off_1018000 +
mov edi offset off_1018000 +
cmp eax edi +
jz loc_1006DEF  +
test byte ptr [eax+1Ch] 10h +
jz loc_1006DEF  +
push dword ptr [esi+538h]  +
push offset dword_1001AB8  +
push 1Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10030C6  +
mov ebx [ebp+arg_4] +
lea eax [esi+538h] +
cmp dword ptr [eax] 0 +
jz loc_1006E05  +
cmp ebx [esi+530h] +
jz loc_1006E66  +
mov dword ptr [eax] 1 +
mov [esi+530h] ebx +
mov eax off_1018000 +
cmp eax edi +
mov edi ds:GetParent +
jz loc_1006E47  +
test byte ptr [eax+1Ch] 10h +
jz loc_1006E47  +
push dword ptr [esi+518h]  +
call edi  +
push eax  +
mov eax off_1018000 +
push ebx  +
push offset dword_1001AB8  +
push 1Fh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1004DE7  +
push 0  +
push 0C8h  +
push 89Ah  +
push [ebp+hWnd]  +
call edi  +
push eax  +
call ds:SetTimer  +
mov ecx esi +
call sub_1005D1B  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and dword ptr [ebp-4] 0 +
push esi  +
lea eax [ebp-4] +
mov esi ecx +
push eax  +
push dword ptr [esi+4]  +
call GdipCloneBrush  +
push eax  +
mov ecx esi +
call sub_1004D80  +
push 0Ch  +
call GdipAlloc  +
test eax eax +
jz loc_1006EB4  +
mov ecx [esi+8] +
mov edx [ebp-4] +
mov dword ptr [eax] offset off_1001BCC +
mov [eax+8] ecx +
mov [eax+4] edx +
mov esi eax +
jmp loc_1006EB6  +
xor esi esi +
test esi esi +
jnz loc_1006EC2  +
push dword ptr [ebp-4]  +
call GdipDeleteBrush  +
mov eax esi +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push ebx  +
push esi  +
push edi  +
mov ebx ecx +
call sub_1005A46  +
lea esi [ebx+494h] +
lea edi [ebp-10h] +
movs   +
movs   +
lea eax [ebp-10h] +
push eax  +
push dword ptr [ebp+0Ch]  +
movs   +
push dword ptr [ebp+8]  +
mov ecx ebx +
mov dword ptr [ebx+4D8h] 1 +
movs   +
call sub_1006928  +
mov eax [ebp+8] +
mov [ebx+4C4h] eax +
mov eax [ebp+0Ch] +
mov [ebx+4C8h] eax +
lea eax [ebp-10h] +
push eax  +
mov ecx ebx +
call sub_10043B9  +
lea eax [ebp-10h] +
push eax  +
lea eax [ebx+494h] +
push eax  +
call ds:EqualRect  +
test eax eax +
jnz loc_1006FCC  +
mov eax off_1018000 +
cmp eax offset off_1018000 +
jz loc_1006F66  +
test byte ptr [eax+1Ch] 10h +
jz loc_1006F66  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push offset dword_1001AB8  +
push 0Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1004DE7  +
cmp dword ptr [ebx+4CCh] 0 +
jz loc_1006FA8  +
mov ecx [ebx+4E0h] +
sub esp 10h +
lea esi [ebp-10h] +
test ecx ecx +
jz loc_1006FBE  +
lea edi [ebx+4A4h] +
movs   +
movs   +
movs   +
movs   +
mov edi esp +
lea esi [ebp-10h] +
movs   +
movs   +
movs   +
movs   +
sub esp 10h +
mov edi esp +
lea esi [ebx+494h] +
movs   +
movs   +
movs   +
movs   +
call sub_100F94D  +
jmp loc_1006FCC  +
mov esi ds:ClipCursor +
lea eax [ebp-10h] +
push eax  +
call esi  +
push 0  +
call esi  +
sub esp 10h +
lea esi [ebp-10h] +
mov edi esp +
movs   +
movs   +
movs   +
lea ecx [ebx+4] +
mov eax [ecx] +
movs   +
call dword ptr [eax+4]  +
lea esi [ebx+4E4h] +
mov ecx esi +
call sub_10139C4  +
test eax eax +
jz loc_100703C  +
mov ecx [ebx+4E0h] +
call sub_100F1C7  +
test eax eax +
jnz loc_1006FF4  +
push eax  +
mov ecx esi +
call sub_1013D77  +
fld1   +
lea ecx [ebx+490h] +
fcomp  dword ptr [ecx] +
fnstsw  ax +
test ah 44h +
jp loc_100703C  +
fld  dword ptr [ecx] +
push ecx  +
mov ecx [ebx+514h] +
fstp  dword ptr [esp] +
push 0Eh  +
call sub_1010AB4  +
push ecx  +
fstp  dword ptr [esp] +
push dword ptr [ebp+0Ch]  +
lea esi [ebx+494h] +
push dword ptr [ebp+8]  +
lea ecx [ebx+4E4h] +
sub esp 10h +
mov edi esp +
movs   +
movs   +
movs   +
movs   +
call sub_1013B90  +
mov eax [ebp+8] +
mov [ebx+4D0h] eax +
mov eax [ebp+0Ch] +
pop edi  +
pop esi  +
mov [ebx+4D4h] eax +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
fld1   +
push ebx  +
fcomp  dword ptr [ebp+8] +
push esi  +
push edi  +
mov ebx ecx +
fnstsw  ax +
test ah 41h +
jz loc_10071B5  +
fld  ds:flt_1001D70 +
fcomp  dword ptr [ebp+8] +
fnstsw  ax +
test ah 5 +
jnp loc_10071B5  +
fld  dword ptr [ebp+8] +
fld  dword ptr [ebx+48Ch] +
fucompp   +
fnstsw  ax +
test ah 44h +
jnp loc_10071B5  +
lea eax [ebp-8] +
push eax  +
call ds:GetPhysicalCursorPos  +
cmp dword ptr [ebx+4D4h] 1 +
mov eax [ebp-4] +
mov edx [ebp-8] +
jnz loc_10070C5  +
mov [ebx+4CCh] edx +
mov [ebx+4D0h] eax +
fld  dword ptr [ebp+8] +
lea esi [ebx+490h] +
push esi  +
lea ecx [ebx-4] +
push ecx  +
fstp  dword ptr [esp] +
push eax  +
push edx  +
call sub_10058BB  +
fld  dword ptr [ebp+8] +
fstp  dword ptr [ebx+48Ch] +
mov ecx dword_1018594 +
test ecx ecx +
jz loc_1007103  +
mov eax [ecx] +
push esi  +
call dword ptr [eax+4]  +
mov ecx dword_1018594 +
mov eax [ecx] +
push 1  +
call dword ptr [eax+8]  +
mov eax off_1018000 +
cmp eax offset off_1018000 +
jz loc_1007147  +
test byte ptr [eax+1Ch] 10h +
jz loc_1007147  +
mov ecx [esi+0Ch] +
fld  dword ptr [ebx+48Ch] +
sub ecx [esi+4] +
push ecx  +
mov ecx [esi+8] +
sub ecx [esi] +
push ecx  +
push dword ptr [ebx+494h]  +
push dword ptr [esi]  +
push ecx  +
push ecx  +
fstp  qword ptr [esp] +
push offset dword_1001AB8  +
push 0Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1004E83  +
sub esp 10h +
fld  dword ptr [ebx+48Ch] +
mov edi esp +
lea esi [ebx+8] +
movs   +
movs   +
movs   +
movs   +
sub esp 10h +
mov edi esp +
lea esi [ebx+490h] +
movs   +
movs   +
movs   +
push ecx  +
movs   +
fstp  dword ptr [esp] +
call sub_100EA6C  +
push 1  +
lea ecx [ebx-4] +
call sub_1006BDE  +
cmp dword ptr [ebx+4D8h] 0 +
jnz loc_10071B5  +
fld  dword ptr [ebx+48Ch] +
sub esp 10h +
mov edi esp +
lea esi [ebx+490h] +
movs   +
movs   +
movs   +
push ecx  +
mov ecx [ebx+4] +
movs   +
fstp  dword ptr [esp] +
call sub_100B2C9  +
mov ecx [ebx+4] +
call ds:?GetHWND@NativeHWNDHost@DirectUI@@QAEPAUHWND__@@XZ  +
push eax  +
call ds:UpdateWindow  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 28h +
push ebx  +
push esi  +
push edi  +
mov ebx ecx +
lea eax [ebp+8] +
push eax  +
lea esi [ebx+490h] +
push esi  +
call ds:EqualRect  +
test eax eax +
jnz loc_100731D  +
and [ebp-8] eax +
and [ebp-4] eax +
lea eax [ebp-8] +
push eax  +
call ds:GetPhysicalCursorPos  +
lea edi [ebp-28h] +
movs   +
movs   +
movs   +
movs   +
lea esi [ebp+8] +
lea edi [ebx+490h] +
movs   +
xor eax eax +
movs   +
mov [ebp-18h] eax +
mov [ebp-14h] eax +
mov [ebp-10h] eax +
mov [ebp-0Ch] eax +
lea ecx [ebp+8] +
push ecx  +
lea eax [ebx+8] +
movs   +
push eax  +
lea eax [ebp-18h] +
push eax  +
movs   +
call ds:UnionRect  +
push dword ptr [ebp-4]  +
lea esi [ebp+8] +
push dword ptr [ebp-8]  +
lea ecx [ebx-4] +
sub esp 10h +
mov edi esp +
movs   +
movs   +
movs   +
movs   +
sub esp 10h +
mov edi esp +
lea esi [ebp-28h] +
movs   +
movs   +
movs   +
movs   +
call sub_10053CB  +
mov ecx dword_1018594 +
test ecx ecx +
jz loc_1007274  +
mov edx [ecx] +
lea eax [ebx+490h] +
push eax  +
call dword ptr [edx+4]  +
mov ecx dword_1018594 +
mov eax [ecx] +
push 1  +
call dword ptr [eax+8]  +
mov eax off_1018000 +
cmp eax offset off_1018000 +
jz loc_10072AC  +
test byte ptr [eax+1Ch] 10h +
jz loc_10072AC  +
mov ecx [ebp+14h] +
sub ecx [ebp+0Ch] +
push ecx  +
mov ecx [ebp+10h] +
sub ecx [ebp+8] +
push ecx  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push offset dword_1001AB8  +
push 0Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1003F6D  +
sub esp 10h +
fld  dword ptr [ebx+48Ch] +
mov edi esp +
lea esi [ebx+8] +
movs   +
movs   +
movs   +
movs   +
sub esp 10h +
mov edi esp +
lea esi [ebp+8] +
movs   +
movs   +
movs   +
push ecx  +
movs   +
fstp  dword ptr [esp] +
call sub_100EA6C  +
lea esi [ebx-4] +
push 0  +
mov ecx esi +
call sub_1006BDE  +
cmp dword ptr [ebx+534h] 0 +
jz loc_10072EF  +
mov ecx esi +
call sub_1005E7A  +
fld  dword ptr [ebx+48Ch] +
sub esp 10h +
mov edi esp +
lea esi [ebp+8] +
movs   +
movs   +
movs   +
push ecx  +
mov ecx [ebx+4] +
movs   +
fstp  dword ptr [esp] +
call sub_100B2C9  +
mov ecx [ebx+4] +
call ds:?GetHWND@NativeHWNDHost@DirectUI@@QAEPAUHWND__@@XZ  +
push eax  +
call ds:UpdateWindow  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+Msg] +
sub esp 20h +
push ebx  +
mov eax 2C4h +
push esi  +
push edi  +
cmp ecx eax +
ja loc_10074DE  +
jz loc_10074BF  +
cmp ecx 1Ah +
jz loc_1007439  +
cmp ecx 7Eh +
jz loc_10073A7  +
cmp ecx 113h +
jz loc_1007397  +
cmp ecx 2C3h +
jnz loc_10078C8  +
mov esi [ebp+pvParam] +
fld  ds:flt_1001D90 +
push 0  +
fstp  dword ptr [esi+1Ch] +
mov ecx esi +
mov dword ptr [esi+4CCh] 1 +
call sub_1005CA9  +
mov ecx esi +
call sub_1005ADE  +
jmp loc_10078C8  +
push [ebp+pt.x]  +
mov ecx [ebp+pvParam] +
call sub_10068E2  +
jmp loc_10078C8  +
mov edi [ebp+pvParam] +
fld  dword ptr [edi+490h] +
fstp  [ebp+pvParam] +
fld  [ebp+pvParam] +
fcomp  ds:dbl_1001D88 +
fnstsw  ax +
test ah 41h +
jnz loc_10073CB  +
fld  ds:flt_1001D84 +
jmp loc_10073D1  +
fld  ds:flt_1001D80 +
fstp  [ebp+var_4] +
lea ebx [edi+4] +
fld  [ebp+var_4] +
mov eax [ebx] +
fadd  [ebp+pvParam] +
push ecx  +
mov ecx ebx +
fstp  [ebp+var_4] +
fld  [ebp+var_4] +
fstp  dword ptr [esp+30h+var_34+4] +
call dword ptr [eax]  +
mov esi ds:GetSystemMetrics +
push 4Fh  +
call esi  +
push 4Eh  +
mov [ebp+var_4] eax +
call esi  +
push 4Dh  +
mov [ebp+var_10] eax +
call esi  +
push 4Ch  +
mov [ebp+var_8] eax +
call esi  +
push [ebp+var_4]  +
lea ecx [ebp+var_20] +
push [ebp+var_10]  +
push [ebp+var_8]  +
push eax  +
call sub_1004199  +
fld  [ebp+pvParam] +
add edi 0Ch +
mov esi eax +
mov eax [ebx] +
movs   +
movs   +
movs   +
push ecx  +
mov ecx ebx +
movs   +
fstp  dword ptr [esp+34h+var_34] +
call dword ptr [eax]  +
jmp loc_10078C8  +
mov eax off_1018000 +
mov ebx offset off_1018000 +
cmp eax ebx +
jz loc_100745F  +
test byte ptr [eax+1Ch] 10h +
jz loc_100745F  +
push offset dword_1001AB8  +
push 18h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10030A0  +
cmp [ebp+pt.x] 47h +
jnz loc_10078C8  +
mov esi ds:SystemParametersInfoW +
xor edi edi +
push edi  +
lea eax [ebp+pvParam] +
push eax  +
push edi  +
push 46h  +
call esi  +
mov eax off_1018000 +
cmp eax ebx +
jz loc_100749F  +
test byte ptr [eax+1Ch] 10h +
jz loc_100749F  +
push [ebp+pvParam]  +
push offset dword_1001AB8  +
push 19h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10030C6  +
cmp [ebp+pvParam] edi +
jnz loc_10078C8  +
push edi  +
push edi  +
push 1  +
push 47h  +
call esi  +
push edi  +
push 47h  +
push 1Ah  +
push 0FFFFh  +
jmp loc_1007583  +
mov ecx [ebp+pvParam] +
fld  ds:flt_1001BC8 +
and dword ptr [ecx+4CCh] 0 +
fstp  dword ptr [ecx+1Ch] +
push 1  +
call sub_1005CA9  +
jmp loc_10078C8  +
mov eax ecx +
sub eax 312h +
jz loc_10075EC  +
sub eax 0Ch +
jz loc_100758E  +
sub eax 1E2h +
jz loc_1007519  +
sub eax 100h +
jnz loc_10078C8  +
push [ebp+pt.y]  +
mov ecx [ebp+pvParam] +
push [ebp+pt.x]  +
call sub_1005884  +
jmp loc_10078C8  +
mov esi [ebp+pvParam] +
xor eax eax +
mov dword ptr [esi+4DCh] 1 +
cmp [esi+4E0h] eax +
jz loc_1007575  +
mov eax off_1018000 +
cmp eax offset off_1018000 +
jz loc_1007554  +
test byte ptr [eax+1Ch] 10h +
jz loc_1007554  +
push offset dword_1001AB8  +
push 17h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10030A0  +
fld1   +
push ecx  +
push ecx  +
fstp  dword ptr [esp+34h+var_34+4] +
fld  dword ptr [esi+490h] +
mov ecx [esi+4E0h] +
fstp  dword ptr [esp+34h+var_34] +
call sub_100FA70  +
jmp loc_10078C8  +
mov ecx [esi+8] +
push eax  +
push eax  +
push 10h  +
call ds:?GetHWND@NativeHWNDHost@DirectUI@@QAEPAUHWND__@@XZ  +
push eax  +
call ds:PostMessageW  +
jmp loc_10078C8  +
lea eax [ebp+Msg] +
xor edi edi +
push eax  +
mov [ebp+Msg] edi +
call ds:DwmIsCompositionEnabled  +
cmp [ebp+Msg] edi +
jz loc_10075BC  +
push 4  +
lea eax [ebp+pvParam] +
push eax  +
push 8  +
push [ebp+hWnd]  +
mov [ebp+pvParam] 2 +
call ds:DwmSetWindowAttribute  +
jmp loc_10075DC  +
mov esi [ebp+pvParam] +
push 2  +
mov ecx esi +
call sub_10041C4  +
mov ecx [esi+8] +
push edi  +
push edi  +
push 10h  +
call ds:?GetHWND@NativeHWNDHost@DirectUI@@QAEPAUHWND__@@XZ  +
push eax  +
call ds:PostMessageW  +
push [ebp+pt.y]  +
push [ebp+pt.x]  +
push 31Eh  +
jmp loc_10078D1  +
mov ebx [ebp+pvParam] +
call ds:GetTickCount  +
sub eax [ebx+53Ch] +
cmp eax 0C8h +
jge loc_100764D  +
mov ecx [ebp+pt.x] +
cmp ecx [ebx+540h] +
jnz loc_100764D  +
fld  qword ptr [ebx+548h] +
fmul  ds:dbl_1001D78 +
fst  qword ptr [ebx+548h] +
mov ecx off_1018000 +
cmp ecx offset off_1018000 +
jz loc_1007693  +
test byte ptr [ecx+1Ch] 10h +
jz loc_1007693  +
push ecx  +
push ecx  +
fstp  [esp+34h+var_34] +
push eax  +
push offset dword_1001AB8  +
push 14h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_1004E51  +
jmp loc_1007695  +
mov ecx off_1018000 +
cmp ecx offset off_1018000 +
jz loc_100767D  +
test byte ptr [ecx+1Ch] 10h +
jz loc_100767D  +
push dword ptr [ebx+540h]  +
push [ebp+pt.x]  +
push eax  +
push offset dword_1001AB8  +
push 15h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_1004E19  +
fld  ds:dbl_1001D08 +
xor esi esi +
fstp  qword ptr [ebx+548h] +
mov [ebx+540h] esi +
jmp loc_1007697  +
fstp  st +
xor esi esi +
mov ecx [ebp+pt.x] +
push 3  +
pop eax  +
sub ecx eax +
jz loc_100788E  +
dec ecx  +
jz loc_1007864  +
dec ecx  +
jz loc_1007838  +
dec ecx  +
jz loc_100780C  +
sub ecx 9 +
jnz loc_10078BC  +
lea edi [ebx+4E4h] +
mov ecx edi +
call sub_10139C4  +
test eax eax +
jnz loc_10078BC  +
fld1   +
fcomp  dword ptr [ebx+490h] +
fnstsw  ax +
test ah 5 +
jp loc_10078BC  +
mov ecx [ebx+4E0h] +
cmp ecx esi +
jz loc_10078BC  +
call sub_100F1C7  +
test eax eax +
jnz loc_10078BC  +
push 1  +
mov ecx edi +
call sub_1013D77  +
sub esp 10h +
mov edi esp +
lea esi [ebx+494h] +
movs   +
movs   +
movs   +
movs   +
lea esi [ebx+4E4h] +
mov ecx esi +
call sub_1013A7C  +
push 1  +
mov ecx esi +
call sub_10139CD  +
mov eax off_1018000 +
cmp eax offset off_1018000 +
jz loc_1007758  +
test byte ptr [eax+1Ch] 10h +
jz loc_1007758  +
push offset dword_1001AB8  +
push 16h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10030A0  +
mov ecx ebx +
call sub_1005ADE  +
fld  ds:dbl_1001D60 +
sub esp 18h +
fstp  [esp+44h+var_34] +
mov edi esp +
lea esi [ebx+0Ch] +
movs   +
movs   +
mov ecx [ebx+4E0h] +
movs   +
movs   +
sub esp 10h +
mov edi esp +
lea esi [ebx+494h] +
movs   +
movs   +
movs   +
movs   +
call sub_100FB69  +
cmp dword_1018584 0 +
jz loc_10078BC  +
mov al byte_1018588 +
cmp al 4 +
jnb loc_10077AD  +
test al al +
jnz loc_10078BC  +
mov eax dword_1018570 +
mov ecx dword_1018574 +
mov edx 10000h +
mov esi 80000000h +
and eax edx +
and ecx esi +
or eax ecx +
jz loc_10078BC  +
mov eax dword_1018578 +
mov edi dword_101857C +
mov ecx eax +
and ecx edx +
mov edx edi +
and edx esi +
cmp ecx eax +
jnz loc_10078BC  +
cmp edx edi +
jnz loc_10078BC  +
push offset dword_1001728  +
push dword_101855C  +
push dword_1018558  +
call sub_10036D0  +
jmp loc_10078BC  +
mov dword ptr [ebx+540h] 6 +
mov eax [ebx+4A0h] +
sub eax [ebx+498h] +
push esi  +
mov [ebp+pvParam] eax +
fild  [ebp+pvParam] +
fmul  qword ptr [ebx+548h] +
call _ftol2_sse  +
push eax  +
push esi  +
jmp loc_10078B5  +
mov dword ptr [ebx+540h] 5 +
mov eax [ebx+4A0h] +
sub eax [ebx+498h] +
push esi  +
mov [ebp+pvParam] eax +
fild  [ebp+pvParam] +
fmul  qword ptr [ebx+548h] +
call _ftol2_sse  +
neg eax  +
jmp loc_1007834  +
lea eax [ebx+494h] +
mov dword ptr [ebx+540h] 4 +
mov ecx [eax+8] +
sub ecx [eax] +
push esi  +
mov [ebp+pvParam] ecx +
fild  [ebp+pvParam] +
push esi  +
fmul  qword ptr [ebx+548h] +
call _ftol2_sse  +
jmp loc_10078B4  +
mov [ebx+540h] eax +
lea eax [ebx+494h] +
mov ecx [eax+8] +
sub ecx [eax] +
push esi  +
mov [ebp+pvParam] ecx +
fild  [ebp+pvParam] +
push esi  +
fmul  qword ptr [ebx+548h] +
call _ftol2_sse  +
neg eax  +
push eax  +
mov ecx ebx +
call sub_10057C2  +
call ds:GetTickCount  +
mov [ebx+53Ch] eax +
push [ebp+pt.y]  +
push [ebp+pt.x]  +
push [ebp+Msg]  +
push [ebp+hWnd]  +
call ds:DefWindowProcW  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+8] +
push esi  +
push edi  +
push 0FFFFFFEBh  +
push ebx  +
call ds:GetWindowLongW  +
cmp dword ptr [ebp+0Ch] 81h +
mov esi ds:SetWindowLongW +
mov edi eax +
jnz loc_1007916  +
mov eax [ebp+14h] +
mov edi [eax] +
push edi  +
push 0FFFFFFEBh  +
push ebx  +
call esi  +
cmp dword ptr [ebp+0Ch] 82h +
jnz loc_1007927  +
xor edi edi +
push edi  +
push 0FFFFFFEBh  +
push ebx  +
call esi  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push ebx  +
test edi edi +
jz loc_100793D  +
push edi  +
call sub_1007329  +
jmp loc_1007943  +
call ds:DefWindowProcW  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 50h +
push esi  +
push edi  +
lea eax [ebp+Rect] +
push eax  +
push [ebp+hWnd]  +
call ds:GetClientRect  +
push 2  +
lea eax [ebp+var_50] +
pop ecx  +
xor edi edi +
mov [eax+4] edi +
mov [eax] edi +
add eax 8 +
dec ecx  +
jns loc_100796E  +
mov eax [ebp+arg_8] +
sub eax edi +
jz loc_1007A8C  +
dec eax  +
jz loc_1007A43  +
dec eax  +
jz loc_10079F7  +
dec eax  +
jnz loc_1007AEC  +
fild  [ebp+Rect.right] +
fstp  [ebp+hWnd] +
fld  [ebp+hWnd] +
fmul  ds:dbl_1001DB0 +
call _ftol2_sse  +
fild  [ebp+Rect.bottom] +
mov esi eax +
mov [ebp+var_50] esi +
fstp  [ebp+arg_8] +
fld  [ebp+arg_8] +
fmul  ds:dbl_1001DA8 +
call _ftol2_sse  +
fld  [ebp+arg_8] +
fmul  ds:dbl_1001DA0 +
mov [ebp+var_4C] eax +
mov [ebp+var_48] esi +
call _ftol2_sse  +
fld  [ebp+hWnd] +
fmul  ds:dbl_1001D98 +
mov [ebp+var_44] eax +
call _ftol2_sse  +
mov [ebp+var_40] eax +
mov eax [ebp+Rect.bottom] +
cdq   +
sub eax edx +
sar eax 1 +
jmp loc_1007AE9  +
fild  [ebp+Rect.right] +
fstp  [ebp+hWnd] +
fld  [ebp+hWnd] +
fmul  ds:dbl_1001D98 +
call _ftol2_sse  +
fild  [ebp+Rect.bottom] +
mov esi eax +
mov [ebp+var_50] esi +
fstp  [ebp+arg_8] +
fld  [ebp+arg_8] +
fmul  ds:dbl_1001DA8 +
call _ftol2_sse  +
fld  [ebp+arg_8] +
fmul  ds:dbl_1001DA0 +
mov [ebp+var_4C] eax +
mov [ebp+var_48] esi +
call _ftol2_sse  +
fld  [ebp+hWnd] +
fmul  ds:dbl_1001DB0 +
jmp loc_10079DF  +
fild  [ebp+Rect.right] +
fstp  [ebp+hWnd] +
fld  [ebp+hWnd] +
fmul  ds:dbl_1001DA8 +
call _ftol2_sse  +
fild  [ebp+Rect.bottom] +
mov [ebp+var_50] eax +
fstp  [ebp+arg_8] +
fld  [ebp+arg_8] +
fmul  ds:dbl_1001DB0 +
call _ftol2_sse  +
fld  [ebp+hWnd] +
fmul  ds:dbl_1001DA0 +
mov esi eax +
mov [ebp+var_4C] esi +
call _ftol2_sse  +
fld  [ebp+arg_8] +
fmul  ds:dbl_1001D98 +
jmp loc_1007AD3  +
fild  [ebp+Rect.right] +
fstp  [ebp+hWnd] +
fld  [ebp+hWnd] +
fmul  ds:dbl_1001DA8 +
call _ftol2_sse  +
fild  [ebp+Rect.bottom] +
mov [ebp+var_50] eax +
fstp  [ebp+arg_8] +
fld  [ebp+arg_8] +
fmul  ds:dbl_1001D98 +
call _ftol2_sse  +
fld  [ebp+hWnd] +
fmul  ds:dbl_1001DA0 +
mov esi eax +
mov [ebp+var_4C] esi +
call _ftol2_sse  +
fld  [ebp+arg_8] +
fmul  ds:dbl_1001DB0 +
mov [ebp+var_48] eax +
mov eax [ebp+Rect.right] +
cdq   +
sub eax edx +
sar eax 1 +
mov [ebp+var_44] esi +
mov [ebp+var_40] eax +
call _ftol2_sse  +
mov [ebp+var_3C] eax +
push [ebp+arg_4]  +
lea ecx [ebp+var_8] +
call sub_1005F74  +
push 2  +
lea ecx [ebp+var_8] +
call sub_1005FA1  +
push offset unk_101802C  +
lea ecx [ebp+var_28] +
call sub_1005F08  +
push [ebp+Rect.bottom]  +
lea eax [ebp+var_28] +
push [ebp+Rect.right]  +
lea ecx [ebp+var_8] +
push edi  +
push edi  +
push eax  +
call sub_1005FF1  +
mov esi offset unk_1018030 +
push esi  +
lea ecx [ebp+var_1C] +
call sub_1005F08  +
fld1   +
push ecx  +
fstp  [esp+5Ch+var_5C] +
push esi  +
lea ecx [ebp+var_10] +
call sub_1004D9C  +
push 3  +
lea eax [ebp+var_50] +
push eax  +
lea eax [ebp+var_10] +
push eax  +
lea ecx [ebp+var_8] +
call sub_1005FC5  +
push edi  +
push 3  +
lea eax [ebp+var_50] +
push eax  +
lea eax [ebp+var_1C] +
push eax  +
lea ecx [ebp+var_8] +
call sub_1006024  +
push [ebp+var_10]  +
call GdipDeletePen  +
push [ebp+var_18]  +
call GdipDeleteBrush  +
push [ebp+var_24]  +
call GdipDeleteBrush  +
push [ebp+var_8]  +
call GdipDeleteGraphics  +
pop edi  +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
sub esp 30h +
cmp dword_1018638 eax +
jnz locret_1007BF3  +
mov ecx hmod +
mov [ebp+var_30.cbClsExtra] eax +
mov [ebp+var_30.cbWndExtra] eax +
mov [ebp+var_30.hIcon] eax +
mov [ebp+var_30.hCursor] eax +
mov [ebp+var_30.lpszMenuName] eax +
mov [ebp+var_30.hIconSm] eax +
lea eax [ebp+var_30] +
push eax  +
mov [ebp+var_30.cbSize] 30h +
mov [ebp+var_30.style] 3 +
mov [ebp+var_30.lpfnWndProc] offset loc_10078E6 +
mov [ebp+var_30.hInstance] ecx +
mov [ebp+var_30.hbrBackground] 8 +
mov [ebp+var_30.lpszClassName] offset aScreenMagnifie +
mov dword_1018638 1 +
call ds:RegisterClassExW  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 4Ch +
mov eax dword_101852C +
xor eax ebp +
mov [ebp-4] eax +
and dword ptr [ebp-48h] 0 +
push ebx  +
mov ebx [ebp+14h] +
push esi  +
mov esi ds:GetWindowLongW +
push edi  +
mov edi [ebp+8] +
push 0FFFFFFEBh  +
push edi  +
call esi  +
push 0FFFFFFEBh  +
push edi  +
mov [ebp-4Ch] eax +
call ds:GetParent  +
push eax  +
call esi  +
mov esi eax +
mov eax [ebp+0Ch] +
dec eax  +
jz loc_1007CB0  +
sub eax 0Eh +
jz loc_1007C7F  +
sub eax 1F2h +
jz loc_1007C6E  +
dec eax  +
jz loc_1007C5D  +
push ebx  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push edi  +
call ds:DefWindowProcW  +
mov [ebp-48h] eax +
jmp loc_1007CBD  +
test esi esi +
jz loc_1007CBD  +
push dword ptr [ebp-4Ch]  +
mov ecx esi +
push edi  +
call sub_1005CF8  +
jmp loc_1007CBD  +
test esi esi +
jz loc_1007CBD  +
push dword ptr [ebp-4Ch]  +
mov ecx esi +
push edi  +
call sub_1006DB9  +
jmp loc_1007CBD  +
lea eax [ebp-44h] +
push eax  +
push edi  +
call ds:BeginPaint  +
test esi esi +
jz loc_1007C9C  +
push dword ptr [ebp-4Ch]  +
mov ecx esi +
push dword ptr [ebp-44h]  +
push edi  +
call sub_100794F  +
lea eax [ebp-44h] +
push eax  +
push edi  +
call ds:EndPaint  +
mov dword ptr [ebp-48h] 1 +
jmp loc_1007CBD  +
mov eax [ebx] +
push dword ptr [eax]  +
push 0FFFFFFEBh  +
push edi  +
call ds:SetWindowLongW  +
mov ecx [ebp-4] +
mov eax [ebp-48h] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_10149A5  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 3Ch +
push esi  +
push edi  +
xor edi edi +
push 5Eh  +
mov esi ecx +
mov [ebp+var_8] edi +
call ds:GetSystemMetrics  +
test al 0CFh +
jz loc_1007E17  +
push ebx  +
push 2Ch  +
lea eax [ebp+var_3C.style] +
push edi  +
push eax  +
call memset  +
mov eax hmod +
add esp 0Ch +
push 7F00h  +
push edi  +
mov [ebp+var_3C.cbSize] 30h +
mov [ebp+var_3C.lpfnWndProc] offset loc_1007BFA +
mov [ebp+var_3C.hInstance] eax +
call ds:LoadCursorW  +
push edi  +
mov [ebp+var_3C.hCursor] eax +
call ds:GetStockObject  +
mov [ebp+var_3C.hbrBackground] eax +
lea eax [ebp+var_3C] +
mov ebx offset aMagnifierpanar +
push eax  +
mov [ebp+var_3C.lpszClassName] ebx +
call ds:RegisterClassExW  +
push offset String  +
call ds:GlobalAddAtomW  +
movzx eax ax +
mov [ebp+var_C] eax +
mov [ebp+Param] edi +
lea eax [ebp+Param] +
push eax  +
push hmod  +
push edi  +
push dword ptr [esi+40h]  +
push edi  +
push edi  +
push edi  +
push edi  +
push 80000000h  +
push offset WindowName  +
push ebx  +
push 8080008h  +
call ds:CreateWindowExW  +
mov ecx [ebp+Param] +
mov [esi+ecx*4+518h] eax +
mov eax [ebp+Param] +
lea eax [esi+eax*4+518h] +
cmp [eax] edi +
jz loc_1007DD4  +
push 2  +
push 0A0h  +
push edi  +
push dword ptr [eax]  +
call ds:SetLayeredWindowAttributes  +
cmp word ptr [ebp+var_C] di +
jz loc_1007DC9  +
mov eax [ebp+Param] +
push 1  +
push offset String  +
push dword ptr [esi+eax*4+518h]  +
call ds:SetPropW  +
inc [ebp+Param]  +
cmp [ebp+Param] 4 +
jb loc_1007D5C  +
jmp loc_1007E16  +
call ds:GetLastError  +
cmp eax edi +
jle loc_1007DE8  +
and eax 0FFFFh +
or eax 80070000h +
cmp eax edi +
mov [ebp+var_8] eax +
jge loc_1007E16  +
mov eax off_1018000 +
cmp eax offset off_1018000 +
jz loc_1007E16  +
test byte ptr [eax+1Ch] 4 +
jz loc_1007E16  +
push [ebp+var_8]  +
push offset dword_1001AB8  +
push 1Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10030C6  +
pop ebx  +
mov eax [ebp+var_8] +
pop edi  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
push ebx  +
push esi  +
push edi  +
push 0  +
mov ebx ecx +
push offset aFullscreenma_3  +
lea ecx [ebp+var_C] +
call sub_1002FF5  +
lea eax [ebx+514h] +
push eax  +
call sub_1010CF9  +
test eax eax +
jge loc_1007E5E  +
lea ecx [ebp+var_C] +
call sub_1003039  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
call sub_100E86F  +
test eax eax +
jz loc_1007E4F  +
mov eax ebx +
neg eax  +
lea ecx [ebx+4] +
sbb eax eax +
and eax ecx +
push eax  +
call sub_100F5E5  +
lea esi [ebx+0Ch] +
lea edi [ebx+494h] +
movs   +
movs   +
movs   +
movs   +
lea esi [ebx+4C4h] +
push esi  +
mov [ebx+4E0h] eax +
call ds:GetPhysicalCursorPos  +
mov eax [esi] +
mov [ebx+4D0h] eax +
mov eax [esi+4] +
mov ecx ebx +
mov [ebx+4D4h] eax +
call sub_1007B8F  +
push ebx  +
push hmod  +
xor esi esi +
push esi  +
push esi  +
xor edi edi +
inc edi  +
push edi  +
push edi  +
push esi  +
push esi  +
push 84000000h  +
push esi  +
push offset aScreenMagnifie  +
push 80800A8h  +
call ds:CreateWindowExW  +
mov [ebx+40h] eax +
cmp eax esi +
jz loc_1007E4F  +
push 4  +
lea ecx [ebp+var_4] +
push ecx  +
push 0Ch  +
push eax  +
mov [ebp+var_4] edi +
call ds:DwmSetWindowAttribute  +
mov ecx ebx +
call sub_1007CD6  +
test eax eax +
jl loc_1007E4F  +
push dword ptr [ebx+40h]  +
lea ecx [ebx+4E4h] +
call sub_100D4A7  +
push edi  +
push dword ptr [ebx+40h]  +
mov ecx ebx +
push 3  +
push 0CBh  +
call sub_1004112  +
test eax eax +
jnz loc_1007F37  +
lea ecx [ebp+var_C] +
call sub_1003039  +
mov eax esi +
jmp loc_1007E59  +
push esi  +
push offset aTabletpenservi  +
call ds:FindWindowW  +
cmp eax esi +
jz loc_1007F57  +
push dword ptr [ebx+40h]  +
push esi  +
push 2DDh  +
push eax  +
call ds:PostMessageW  +
push ebx  +
push esi  +
push edi  +
push edi  +
push dword ptr [ebx+40h]  +
lea ecx [ebx+48h] +
call sub_100DA3F  +
lea edi [ebx+514h] +
mov ecx [edi] +
push 0Eh  +
call sub_1010A90  +
cmp eax 64h +
jnz loc_1007F97  +
cmp [ebx+24h] esi +
jz loc_1007F97  +
mov ecx [edi] +
push 13h  +
call sub_1010A90  +
mov ecx [edi] +
push 1  +
add eax 64h +
push eax  +
push 0Eh  +
call sub_1010BE4  +
push 0Ah  +
pop eax  +
push 14h  +
mov [ebp+var_24] eax +
mov [ebp+var_20] eax +
pop eax  +
push esi  +
push hmod  +
mov [ebp+var_14] eax +
push esi  +
push esi  +
push eax  +
push eax  +
mov [ebp+var_10] eax +
mov eax 80000000h +
push eax  +
push eax  +
push 84000001h  +
push esi  +
push offset aMagnifier  +
push 80800A8h  +
mov [ebp+var_2C] esi +
mov [ebp+var_28] esi +
mov [ebp+var_1C] esi +
mov [ebp+var_18] esi +
call ds:CreateWindowExW  +
fld  ds:flt_1001DB8 +
sub esp 10h +
mov edi esp +
lea esi [ebp+var_1C] +
movs   +
movs   +
movs   +
movs   +
sub esp 10h +
mov edi esp +
lea esi [ebp+var_2C] +
movs   +
movs   +
movs   +
push ecx  +
movs   +
fstp  dword ptr [esp+0] +
push eax  +
mov [ebx+44h] eax +
call sub_100EB00  +
mov eax [ebx] +
xor esi esi +
inc esi  +
push esi  +
mov ecx ebx +
call dword ptr [eax+20h]  +
fld  dword ptr [ebx+490h] +
push ecx  +
mov ecx [ebx+8] +
fstp  dword ptr [esp+0] +
call sub_100A268  +
jmp loc_1007F28  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push 4  +
pop eax  +
push eax  +
lea ecx [ebp+arg_24] +
push ecx  +
push eax  +
lea ecx [ebp+arg_20] +
push ecx  +
push eax  +
lea ecx [ebp+arg_1C] +
push ecx  +
push eax  +
lea ecx [ebp+arg_18] +
push ecx  +
push eax  +
lea ecx [ebp+arg_14] +
push ecx  +
push eax  +
lea eax [ebp+arg_10] +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_C]  +
push 2Bh  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call TraceMessage  +
add esp 48h +
pop ebp  +
retn 28h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push 8  +
lea eax [ebp+arg_10] +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_C]  +
push 2Bh  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call TraceMessage  +
add esp 20h +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push 8  +
lea eax [ebp+arg_18] +
push eax  +
push 8  +
lea eax [ebp+arg_10] +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_C]  +
push 2Bh  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call TraceMessage  +
add esp 28h +
pop ebp  +
retn 20h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1013E93  +
test [ebp+arg_0] 1 +
jz loc_10080EE  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push ebx  +
push esi  +
push edi  +
xor edi edi +
push edi  +
mov esi ecx +
push offset aLensmagnifierR  +
lea ecx [ebp+var_10] +
call sub_1002FF5  +
mov ebx ds:GetTickCount64 +
call ebx  +
mov [ebp+var_8] eax +
mov [ebp+var_4] edx +
call WinSqmIsOptedIn  +
test eax eax +
jz loc_10081A7  +
push 1  +
push 1738h  +
push edi  +
call WinSqmIncrementDWORD  +
mov ecx [esi+508h] +
push 0Eh  +
call sub_1010A90  +
push eax  +
push 1739h  +
push edi  +
call WinSqmSetDWORD  +
mov ecx [esi+508h] +
push 10h  +
call sub_1010A90  +
push eax  +
push 11ABh  +
push edi  +
call WinSqmSetDWORD  +
mov ecx [esi+508h] +
push 11h  +
call sub_1010A90  +
push eax  +
push 11A8h  +
push edi  +
call WinSqmSetDWORD  +
mov ecx [esi+508h] +
push 12h  +
call sub_1010A90  +
push eax  +
push 11A1h  +
push edi  +
call WinSqmSetDWORD  +
mov ecx [esi+8] +
call sub_100A168  +
call WinSqmIsOptedIn  +
test eax eax +
jz loc_10081D9  +
call ebx  +
sub eax [ebp+var_8] +
push edi  +
sbb edx [ebp+var_4] +
push 3E8h  +
push edx  +
push eax  +
call __aulldiv  +
push eax  +
push 1737h  +
push edi  +
call WinSqmIncrementDWORD  +
lea ecx [ebp+var_10] +
call sub_1003039  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ecx+44h]  +
push [ebp+arg_0]  +
call sub_100E960  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 24h +
push edi  +
mov edi ecx +
lea ecx [ebp+8] +
lea eax [edi+490h] +
push ecx  +
push eax  +
mov [ebp-14h] eax +
call ds:EqualRect  +
test eax eax +
jnz loc_10082D2  +
mov eax [ebp+10h] +
sub eax [ebp+8] +
push ebx  +
mov [ebp-4] eax +
fild  dword ptr [ebp-4] +
push esi  +
fmul  dword ptr [edi+48Ch] +
call _ftol2_sse  +
mov ebx eax +
mov eax [ebp+14h] +
sub eax [ebp+0Ch] +
mov [ebp-4] eax +
fild  dword ptr [ebp-4] +
fmul  dword ptr [edi+48Ch] +
call _ftol2_sse  +
mov [ebp-18h] eax +
lea eax [ebp-24h] +
xor esi esi +
push eax  +
lea ecx [ebp+8] +
mov [ebp-4] esi +
call sub_1004CF9  +
push esi  +
push esi  +
push dword ptr [eax+4]  +
lea ecx [ebp-10h] +
push dword ptr [eax]  +
call sub_1004199  +
mov esi eax +
mov eax [ebp-18h] +
cdq   +
lea ecx [edi+4A0h] +
sub eax edx +
sar eax 1 +
push eax  +
mov edi ecx +
movs   +
movs   +
mov eax ebx +
cdq   +
sub eax edx +
movs   +
sar eax 1 +
push eax  +
push ecx  +
movs   +
call ds:InflateRect  +
mov edi [ebp-14h] +
lea esi [ebp+8] +
movs   +
movs   +
movs   +
movs   +
mov ecx dword_1018594 +
pop esi  +
pop ebx  +
test ecx ecx +
jz loc_10082D2  +
mov eax [ecx] +
lea edx [ebp+8] +
push edx  +
call dword ptr [eax+4]  +
mov ecx dword_1018594 +
mov eax [ecx] +
push 1  +
call dword ptr [eax+8]  +
pop edi  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 24h +
fld1   +
push ebx  +
fld  dword ptr [ebp+8] +
push esi  +
fcom  st(1) +
mov esi ecx +
push edi  +
mov [ebp-4] esi +
fnstsw  ax +
fstp  st(1) +
test ah 5 +
jnp loc_1008413  +
fld  ds:flt_1001D70 +
fcomp  st(1) +
fnstsw  ax +
test ah 5 +
jnp loc_1008413  +
fld  st +
fld  dword ptr [esi+48Ch] +
fucompp   +
fnstsw  ax +
test ah 44h +
jnp loc_1008413  +
fld  dword ptr [esi+48Ch] +
fld  st(1) +
fucompp   +
fnstsw  ax +
test ah 44h +
jnp loc_1008413  +
lea ebx [esi+4A0h] +
mov eax [ebx+8] +
sub eax [ebx] +
mov [ebp-8] eax +
fild  dword ptr [ebp-8] +
fld  st(1) +
fdivp st(1) st +
call _ftol2_sse  +
mov [ebp-1Ch] eax +
mov eax [ebx+0Ch] +
sub eax [ebx+4] +
mov [ebp-8] eax +
fidivr  dword ptr [ebp-8] +
call _ftol2_sse  +
and dword ptr [ebp-8] 0 +
mov [ebp-18h] eax +
lea eax [ebp-24h] +
lea edi [esi+490h] +
push eax  +
mov ecx edi +
call sub_1004CF9  +
push dword ptr [ebp-8]  +
xor ecx ecx +
push ecx  +
push dword ptr [eax+4]  +
lea ecx [ebp-14h] +
push dword ptr [eax]  +
call sub_1004199  +
mov esi eax +
mov eax [ebp-18h] +
cdq   +
sub eax edx +
sar eax 1 +
push eax  +
mov eax [ebp-1Ch] +
movs   +
cdq   +
sub eax edx +
movs   +
sar eax 1 +
push eax  +
mov eax [ebp-4] +
movs   +
add eax 490h +
push eax  +
movs   +
call ds:InflateRect  +
mov eax [ebp-4] +
sub esp 10h +
fld  dword ptr [ebp+8] +
mov edi esp +
fstp  dword ptr [eax+48Ch] +
mov esi ebx +
fld  dword ptr [ebp+8] +
movs   +
movs   +
movs   +
movs   +
sub esp 10h +
lea ebx [eax+490h] +
mov edi esp +
mov esi ebx +
movs   +
movs   +
movs   +
push ecx  +
movs   +
fstp  dword ptr [esp] +
push dword ptr [eax+40h]  +
call sub_100EB00  +
mov ecx dword_1018594 +
test ecx ecx +
jz loc_1008415  +
mov eax [ecx] +
push ebx  +
call dword ptr [eax+4]  +
mov ecx dword_1018594 +
mov eax [ecx] +
push 1  +
call dword ptr [eax+8]  +
jmp loc_1008415  +
fstp  st +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+lprc2]  +
push ecx  +
call ds:EqualRect  +
neg eax  +
sbb eax eax +
inc eax  +
pop ebp  +
retn 4  +
***
xor eax eax +
cmp [ecx+4DCh] eax +
jz loc_1008464  +
mov ecx [ecx+4] +
push eax  +
push eax  +
push 10h  +
call ds:?GetHWND@NativeHWNDHost@DirectUI@@QAEPAUHWND__@@XZ  +
push eax  +
call ds:PostMessageW  +
mov eax off_1018000 +
cmp eax offset off_1018000 +
jz locret_1008488  +
test byte ptr [eax+1Ch] 10h +
jz locret_1008488  +
push offset dword_1001E48  +
push 10h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10030A0  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
push edi  +
mov edi [ebp+arg_0] +
lea eax [esi+4E4h] +
cmp [eax] edi +
jz loc_10084D9  +
push ebx  +
push 0FFFFFFF0h  +
push dword ptr [esi+44h]  +
mov [eax] edi +
call ds:GetWindowLongW  +
mov ebx eax +
test edi edi +
jz loc_10084C1  +
or ebx 1 +
push 0  +
jmp loc_10084C6  +
and ebx 0FFFFFFFEh +
push 1  +
call ds:ShowSystemCursor  +
push ebx  +
push 0FFFFFFF0h  +
push dword ptr [esi+44h]  +
call ds:SetWindowLongW  +
pop ebx  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push esi  +
push edi  +
push [ebp+lprcSrc]  +
lea ecx [ebp+rcDst] +
call sub_1004CDB  +
mov edx [ebp+rcDst.right] +
sub edx [ebp+rcDst.left] +
mov ecx [ebp+rcDst.bottom] +
mov eax [ebp+arg_C] +
sub ecx [ebp+rcDst.top] +
mov edi [eax+4] +
imul edi [eax] +
mov esi edx +
imul esi ecx +
cmp esi edi +
pop edi  +
pop esi  +
jle loc_100851E  +
mov [eax] edx +
mov [eax+4] ecx +
mov ecx off_1018000 +
cmp ecx offset off_1018000 +
jz loc_1008549  +
test byte ptr [ecx+1Ch] 10h +
jz loc_1008549  +
push dword ptr [eax+4]  +
push dword ptr [eax]  +
push offset dword_1001E48  +
push 15h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_1004DE7  +
xor eax eax +
inc eax  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
sub esp 10h +
push ebx  +
push esi  +
push edi  +
mov ebx ecx +
cmp eax 0BB9h +
jz loc_10087E5  +
cmp eax 0BBAh +
jz loc_10087E5  +
cmp eax 0BBBh +
jnz loc_10087F1  +
push dword ptr [ebx+40h]  +
call ds:IsWindowVisible  +
test eax eax +
jnz loc_100859E  +
push 5  +
push dword ptr [ebx+40h]  +
call ds:ShowWindow  +
lea eax [ebx+494h] +
lea ecx [ebx+4C4h] +
push eax  +
push ecx  +
call ds:EqualRect  +
test eax eax +
jz loc_10085CB  +
lea eax [ebx+4D4h] +
mov ecx [eax] +
cmp ecx 4 +
jnb loc_10085CB  +
inc ecx  +
mov [eax] ecx +
jmp loc_1008768  +
lea esi [ebx+4A4h] +
lea edi [ebp+X] +
movs   +
movs   +
movs   +
push 0FFFFFFECh  +
push dword ptr [ebx+40h]  +
movs   +
mov esi ds:GetWindowLongW +
call esi  +
push eax  +
push 0  +
push 0FFFFFFF0h  +
push dword ptr [ebx+40h]  +
call esi  +
push eax  +
lea eax [ebp+X] +
push eax  +
call ds:AdjustWindowRectEx  +
lea ecx [ebx+4C4h] +
mov edx [ecx+8] +
sub edx [ecx] +
lea eax [ebx+494h] +
mov esi [eax+8] +
sub esi [eax] +
cmp edx esi +
jnz loc_10086A3  +
mov edx [eax+0Ch] +
mov esi [ecx+0Ch] +
sub edx [eax+4] +
sub esi [ecx+4] +
cmp esi edx +
jnz loc_10086A3  +
sub esp 10h +
fld  dword ptr [ebx+490h] +
mov edi esp +
lea esi [ebx+4A4h] +
movs   +
movs   +
movs   +
movs   +
sub esp 10h +
mov edi esp +
mov esi eax +
movs   +
movs   +
movs   +
push ecx  +
movs   +
fstp  [esp+40h+var_40] +
push dword ptr [ebx+44h]  +
call sub_100EB00  +
mov eax [ebp-4] +
sub eax [ebp-0Ch] +
push 419h  +
push eax  +
mov eax [ebp-8] +
sub eax [ebp+X] +
push eax  +
push dword ptr [ebp-0Ch]  +
push [ebp+X]  +
push 0FFFFFFFFh  +
push dword ptr [ebx+40h]  +
call ds:SetWindowPos  +
mov esi ds:GetWindow +
xor edi edi +
push edi  +
push edi  +
push 5  +
push dword ptr [ebx+44h]  +
call esi  +
push eax  +
call ds:InvalidateRect  +
push 5  +
push dword ptr [ebx+44h]  +
call esi  +
push eax  +
call ds:UpdateWindow  +
jmp loc_1008757  +
sub esp 10h +
fld  dword ptr [ebx+490h] +
mov edi esp +
lea esi [ebx+4A4h] +
movs   +
movs   +
movs   +
movs   +
sub esp 10h +
mov edi esp +
mov esi eax +
movs   +
movs   +
movs   +
push ecx  +
movs   +
fstp  [esp+40h+var_40] +
push dword ptr [ebx+44h]  +
call sub_100EB00  +
mov eax [ebp-4] +
sub eax [ebp-0Ch] +
mov edi ds:SetWindowPos +
push 18h  +
push eax  +
mov eax [ebp-8] +
sub eax [ebp+X] +
push eax  +
push dword ptr [ebp-0Ch]  +
push [ebp+X]  +
push 0FFFFFFFFh  +
push dword ptr [ebx+40h]  +
call edi  +
lea esi [ebx+4A4h] +
mov eax [esi+0Ch] +
sub eax [esi+4] +
push 1Ch  +
push eax  +
mov eax [esi+8] +
sub eax [esi] +
push eax  +
xor eax eax +
push eax  +
push eax  +
push eax  +
push dword ptr [ebx+44h]  +
call edi  +
mov eax [esi+0Ch] +
sub eax [esi+4] +
mov ecx [esi+8] +
sub ecx [esi] +
mov esi ds:GetWindow +
push 1Ch  +
push eax  +
push ecx  +
xor eax eax +
push eax  +
push eax  +
push eax  +
push 5  +
push dword ptr [ebx+44h]  +
call esi  +
push eax  +
call edi  +
push 0  +
push 0  +
push 5  +
push dword ptr [ebx+44h]  +
call esi  +
push eax  +
call ds:InvalidateRect  +
push 5  +
push dword ptr [ebx+44h]  +
call esi  +
push eax  +
call ds:UpdateWindow  +
xor edi edi +
push edi  +
push edi  +
push dword ptr [ebx+44h]  +
call ds:InvalidateRect  +
mov [ebx+4D4h] edi +
lea esi [ebx+494h] +
lea edi [ebx+4C4h] +
push esi  +
mov ecx edi +
call sub_1008421  +
test eax eax +
jz loc_10087F1  +
mov eax off_1018000 +
cmp eax offset off_1018000 +
jz loc_10087DF  +
test byte ptr [eax+1Ch] 10h +
jz loc_10087DF  +
mov ecx [esi+0Ch] +
sub ecx [esi+4] +
push ecx  +
mov ecx [esi+8] +
sub ecx [esi] +
push ecx  +
push dword ptr [ebx+498h]  +
mov ecx [ebx+4B0h] +
push dword ptr [esi]  +
sub ecx [ebx+4A8h] +
push ecx  +
mov ecx [ebx+4ACh] +
sub ecx [ebx+4A4h] +
push ecx  +
push dword ptr [ebx+4A8h]  +
push dword ptr [ebx+4A4h]  +
push offset dword_1001E48  +
push 16h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1003FAA  +
movs   +
movs   +
movs   +
movs   +
jmp loc_10087F1  +
mov ecx [ebx+50Ch] +
push eax  +
call sub_1014531  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov esi ecx +
cmp edi 0Bh +
jz loc_1008818  +
cmp edi 0Ah +
jz loc_1008818  +
xor al al +
jmp loc_100881A  +
mov al 1 +
mov ecx [esi+508h] +
xor ebx ebx +
test al al +
setnz bl  +
add ebx 14h +
push ebx  +
call sub_1010A90  +
xor ecx ecx +
cmp edi 8 +
jz loc_1008843  +
jbe loc_100884E  +
cmp edi 0Ah +
jbe loc_1008871  +
cmp edi 0Bh +
jnz loc_100884E  +
lea ecx [eax-0Ah] +
cmp ecx 0Ah +
jg loc_100884E  +
push 0Ah  +
pop ecx  +
cmp ecx eax +
jz loc_100886A  +
push 0  +
push ecx  +
mov ecx [esi+508h] +
push ebx  +
call sub_1010BE4  +
mov eax [esi] +
push 0  +
mov ecx esi +
call dword ptr [eax+20h]  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
lea ecx [eax+0Ah] +
cmp ecx 64h +
jl loc_100884E  +
push 64h  +
jmp loc_100884D  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push 43Bh  +
xor eax eax +
push eax  +
push eax  +
push eax  +
push eax  +
mov esi ecx +
push 0FFFFFFFFh  +
push dword ptr [esi+40h]  +
call ds:SetWindowPos  +
push [ebp+dwProcessId]  +
mov ecx [esi+8] +
call sub_100AAEF  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push ebx  +
push esi  +
mov esi ecx +
xor ebx ebx +
push edi  +
cmp [esi+4D8h] ebx +
jz loc_10088D0  +
xor eax eax +
jmp loc_10088D3  +
mov eax [ebp+arg_0] +
lea edi [esi+514h] +
cmp [edi] eax +
jz loc_10089E1  +
xor ecx ecx +
cmp eax ebx +
setz cl  +
mov [edi] eax +
push ecx  +
call ds:ShowSystemCursor  +
lea eax [ebp+var_14] +
push eax  +
cmp [edi] ebx +
jz loc_100891A  +
lea ecx [esi+494h] +
call sub_1004CF9  +
mov ecx [eax] +
mov [esi+4BCh] ecx +
mov eax [eax+4] +
mov [esi+4C0h] eax +
jmp loc_10089E1  +
push offset fnEnum  +
push ebx  +
push ebx  +
mov [ebp+var_14] ebx +
mov [ebp+var_10] ebx +
call ds:EnumDisplayMonitors  +
fild  [ebp+var_14] +
mov eax [esi+4ACh] +
sub eax [esi+4A4h] +
fstp  [ebp+arg_0] +
imul eax eax +
mov [ebp+var_C] eax +
fild  [ebp+var_C] +
fdiv  [ebp+arg_0] +
call _ftol2_sse  +
fild  [ebp+var_10] +
mov [ebp+var_8] eax +
mov eax [esi+4B0h] +
sub eax [esi+4A8h] +
fstp  [ebp+var_4] +
imul eax eax +
mov [ebp+var_C] eax +
fild  [ebp+var_C] +
fdiv  [ebp+var_4] +
call _ftol2_sse  +
fild  [ebp+var_8] +
fld  ds:dbl_1001AB0 +
mov [ebp+var_C] eax +
fdiv st(1) st +
fld  [ebp+arg_0] +
fmulp st(2) st +
fxch  st(1) +
call _ftol2_sse  +
fidivr  [ebp+var_C] +
mov [esi+4B4h] eax +
fmul  [ebp+var_4] +
call _ftol2_sse  +
push ebx  +
push [ebp+var_8]  +
lea edi [esi+508h] +
mov ecx [edi] +
push 14h  +
mov [esi+4B8h] eax +
call sub_1010BE4  +
mov ecx [edi] +
push ebx  +
push [ebp+var_C]  +
push 15h  +
call sub_1010BE4  +
mov eax [esi] +
push ebx  +
mov ecx esi +
call dword ptr [eax+20h]  +
fld  dword ptr [esi+490h] +
push ecx  +
mov ecx [esi+8] +
fstp  [esp+28h+var_28] +
call sub_100A268  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
push ebx  +
push esi  +
push edi  +
mov ebx ecx +
call sub_10042F8  +
xor esi esi +
lea ecx [ebx+48h] +
mov dword ptr [ebx] offset off_1001F10 +
mov dword ptr [ebx+4] offset off_1001EFC +
mov [ebx+40h] esi +
mov [ebx+44h] esi +
call sub_100E726  +
push esi  +
push offset aLensmagnifierL  +
lea ecx [ebp+var_8] +
mov [ebx+4D4h] esi +
mov [ebx+4D8h] esi +
mov [ebx+4DCh] esi +
mov [ebx+4E0h] esi +
mov [ebx+4E4h] esi +
mov [ebx+4E8h] esi +
mov [ebx+4ECh] esi +
mov [ebx+508h] esi +
mov [ebx+50Ch] esi +
mov [ebx+510h] esi +
mov [ebx+514h] esi +
call sub_1002FF5  +
fld  ds:flt_1001EBC +
mov [ebp+var_18] esi +
fstp  dword ptr [ebx+490h] +
mov [ebp+var_14] esi +
mov [ebp+var_10] esi +
mov [ebp+var_C] esi +
lea edi [ebx+494h] +
lea esi [ebp+var_18] +
movs   +
movs   +
movs   +
movs   +
xor eax eax +
mov [ebp+var_18] eax +
mov [ebp+var_14] eax +
mov [ebp+var_10] eax +
mov [ebp+var_C] eax +
lea edi [ebx+4A4h] +
lea esi [ebp+var_18] +
movs   +
movs   +
movs   +
movs   +
mov [ebp+var_18] eax +
mov [ebp+var_14] eax +
mov [ebp+var_10] eax +
mov [ebp+var_C] eax +
lea edi [ebx+4F8h] +
lea esi [ebp+var_18] +
movs   +
movs   +
movs   +
movs   +
mov [ebp+var_18] eax +
mov [ebp+var_14] eax +
mov [ebp+var_10] eax +
mov [ebp+var_C] eax +
lea edi [ebx+4C4h] +
lea esi [ebp+var_18] +
movs   +
movs   +
xor ecx ecx +
movs   +
mov [ebx+4C0h] ecx +
mov [ebx+4F4h] ecx +
mov [ebx+4B4h] ecx +
lea ecx [ebp+var_8] +
movs   +
mov [ebx+4BCh] eax +
mov [ebx+4F0h] eax +
mov [ebx+4B8h] eax +
call sub_1003039  +
mov eax ebx +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi+40h] +
push edi  +
mov dword ptr [esi] offset off_1001F10 +
mov dword ptr [esi+4] offset off_1001EFC +
test eax eax +
jz loc_1008B68  +
push eax  +
call ds:IsWindow  +
test eax eax +
jz loc_1008B68  +
push 0  +
push offset aTabletpenservi  +
call ds:FindWindowW  +
test eax eax +
jz loc_1008B5F  +
push dword ptr [esi+40h]  +
push 0  +
push 2DCh  +
push eax  +
call ds:PostMessageW  +
push dword ptr [esi+40h]  +
call ds:DestroyWindow  +
mov ecx [esi+4E8h] +
test ecx ecx +
jz loc_1008B77  +
call sub_100EF9F  +
lea edi [esi+50Ch] +
mov ecx [edi] +
test ecx ecx +
jz loc_1008B8D  +
push 1  +
call sub_10080D4  +
and dword ptr [edi] 0 +
call sub_100E8AD  +
lea ecx [esi+48h] +
call sub_100D9CB  +
pop edi  +
mov ecx esi +
pop esi  +
jmp sub_10040E8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
mov eax [ebp+arg_0] +
push ebx  +
mov ebx ecx +
sub eax [ebx+4BCh] +
mov ecx [ebp+arg_4] +
sub ecx [ebx+4C0h] +
push esi  +
push edi  +
mov [ebp+dwData] eax +
mov [ebp+var_4] ecx +
test eax eax +
jnz loc_1008BD9  +
test ecx ecx +
jz loc_1008CFC  +
fld  dword ptr [ebx+490h] +
lea esi [ebx+494h] +
fadd st st +
lea edi [ebp+rc1] +
fild  [ebp+var_4] +
movs   +
movs   +
fdiv st st(1) +
movs   +
movs   +
call _ftol2_sse  +
fidivr  [ebp+dwData] +
push eax  +
call _ftol2_sse  +
push eax  +
lea eax [ebp+rc1] +
push eax  +
call ds:InflateRect  +
lea ecx [ebp+dwData] +
push ecx  +
xor eax eax +
push offset fnEnum  +
push eax  +
push eax  +
mov [ebp+dwData] eax +
mov [ebp+var_4] eax +
call ds:EnumDisplayMonitors  +
fild  [ebp+dwData] +
fdiv  dword ptr [ebx+490h] +
call _ftol2_sse  +
mov esi eax +
push 0Ah  +
cdq   +
pop ecx  +
idiv  ecx +
mov ecx [ebp+rc1.right] +
mov edx [ebp+rc1.left] +
sub ecx edx +
cmp ecx eax +
jge loc_1008C4B  +
add edx eax +
jmp loc_1008C51  +
cmp ecx esi +
jle loc_1008C54  +
add edx esi +
mov [ebp+rc1.right] edx +
fild  [ebp+var_4] +
fdiv  dword ptr [ebx+490h] +
call _ftol2_sse  +
mov esi eax +
push 0Ah  +
cdq   +
pop ecx  +
idiv  ecx +
mov ecx [ebp+rc1.bottom] +
mov edx [ebp+rc1.top] +
sub ecx edx +
cmp ecx eax +
jge loc_1008C7A  +
add edx eax +
jmp loc_1008C80  +
cmp ecx esi +
jle loc_1008C83  +
add edx esi +
mov [ebp+rc1.bottom] edx +
lea eax [ebx+494h] +
push eax  +
lea ecx [ebp+rc1] +
call sub_1008421  +
test eax eax +
jz loc_1008CFC  +
mov eax [ebp+rc1.right] +
sub eax [ebp+rc1.left] +
sub esp 10h +
cdq   +
sub eax edx +
mov ecx eax +
mov eax [ebx+4BCh] +
sar ecx 1 +
sub eax ecx +
mov ecx eax +
sub ecx [ebp+rc1.left] +
mov [ebp+rc1.left] eax +
mov eax [ebp+rc1.bottom] +
sub eax [ebp+rc1.top] +
add [ebp+rc1.right] ecx +
cdq   +
sub eax edx +
mov ecx eax +
mov eax [ebx+4C0h] +
sar ecx 1 +
sub eax ecx +
mov ecx eax +
sub ecx [ebp+rc1.top] +
mov [ebp+rc1.top] eax +
add [ebp+rc1.bottom] ecx +
mov edi esp +
lea esi [ebp+rc1] +
movs   +
movs   +
movs   +
lea ecx [ebx+4] +
mov eax [ecx] +
movs   +
call dword ptr [eax+4]  +
push dword ptr [ebx+4C0h]  +
push dword ptr [ebx+4BCh]  +
call ds:SetPhysicalCursorPos  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 30h +
push ebx  +
push esi  +
push edi  +
xor esi esi +
push esi  +
mov ebx ecx +
push offset aLensmagnifierO  +
lea ecx [ebp+var_20] +
call sub_1002FF5  +
push esi  +
mov ecx ebx +
call sub_10088B5  +
mov ecx [ebx+508h] +
push 0Eh  +
call sub_1010AB4  +
fstp  [ebp+var_4] +
fld  [ebp+var_4] +
fld  dword ptr [ebx+490h] +
fucompp   +
fnstsw  ax +
test ah 44h +
jnp loc_1008ECB  +
mov eax off_1018000 +
cmp eax offset off_1018000 +
jz loc_1008D8A  +
test byte ptr [eax+1Ch] 10h +
jz loc_1008D8A  +
fld  dword ptr [ebx+490h] +
sub esp 10h +
fstp  [esp+4Ch+var_44] +
fld  [ebp+var_4] +
fstp  [esp+4Ch+var_4C] +
push offset dword_1001E48  +
push 0Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10080A2  +
cmp dword_1018584 0 +
mov edi 10000h +
mov esi 80000000h +
jz loc_1008DF0  +
mov al byte_1018588 +
cmp al 4 +
jnb loc_1008DAA  +
test al al +
jnz loc_1008DF0  +
mov eax dword_1018570 +
mov ecx dword_1018574 +
and eax edi +
and ecx esi +
or eax ecx +
jz loc_1008DF0  +
mov eax dword_1018578 +
mov edx dword_101857C +
mov ecx eax +
and ecx edi +
and edx esi +
cmp ecx eax +
jnz loc_1008DF0  +
cmp edx dword_101857C +
jnz loc_1008DF0  +
push offset dword_10016B8  +
push dword_101855C  +
push dword_1018558  +
call sub_10036D0  +
cmp dword ptr [ebx+4E8h] 0 +
jz loc_1008E4A  +
cmp [ebp+arg_0] 0 +
jz loc_1008E4A  +
mov esi ds:GetTickCount +
call esi  +
sub eax [ebx+4ECh] +
mov [ebp+arg_0] eax +
fild  [ebp+arg_0] +
fcomp  ds:dbl_1001D58 +
fnstsw  ax +
test ah 1 +
jnz loc_1008E3D  +
fld  [ebp+var_4] +
push ecx  +
push ecx  +
mov ecx [ebx+4E8h] +
fstp  dword ptr [esp+44h+var_44+4] +
fld  dword ptr [ebx+490h] +
fstp  dword ptr [esp+44h+var_44] +
call sub_100FA70  +
call esi  +
mov [ebx+4ECh] eax +
jmp loc_1009053  +
fld  [ebp+var_4] +
lea ecx [ebx+4] +
mov eax [ecx] +
push ecx  +
fstp  dword ptr [esp+40h+var_44+4] +
call dword ptr [eax]  +
cmp dword_1018584 0 +
jz loc_1009053  +
mov al byte_1018588 +
cmp al 4 +
jnb loc_1008E76  +
test al al +
jnz loc_1009053  +
mov eax dword_1018570 +
mov ecx dword_1018574 +
and eax edi +
and ecx esi +
or eax ecx +
jz loc_1009053  +
mov eax dword_1018578 +
mov ecx eax +
and ecx edi +
mov edi dword_101857C +
mov edx edi +
and edx esi +
cmp ecx eax +
jnz loc_1009053  +
cmp edx edi +
jnz loc_1009053  +
push offset dword_10016C8  +
push dword_101855C  +
push dword_1018558  +
call sub_10036D0  +
jmp loc_1009053  +
mov ecx [ebx+508h] +
push 14h  +
call sub_1010A90  +
mov ecx [ebx+508h] +
push 15h  +
mov [ebp+var_8] eax +
call sub_1010A90  +
mov [ebp+var_C] eax +
lea eax [ebp+dwData] +
push eax  +
push offset fnEnum  +
push esi  +
push esi  +
mov [ebp+dwData] esi +
mov [ebp+var_14] esi +
call ds:EnumDisplayMonitors  +
fild  [ebp+var_8] +
fld  ds:dbl_1001AB0 +
fdiv st(1) st +
fild  [ebp+dwData] +
fmulp st(2) st +
fxch  st(1) +
call _ftol2_sse  +
fidivr  [ebp+var_C] +
mov esi eax +
mov [ebp+var_8] esi +
fimul  [ebp+var_14] +
call _ftol2_sse  +
mov edi eax +
mov [ebp+var_C] edi +
mov eax off_1018000 +
cmp eax offset off_1018000 +
jz loc_1008F65  +
test byte ptr [eax+1Ch] 10h +
jz loc_1008F65  +
push edi  +
push esi  +
push dword ptr [ebx+4B8h]  +
push dword ptr [ebx+4B4h]  +
push offset dword_1001E48  +
push 0Dh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1003F6D  +
mov eax off_1018000 +
cmp [ebx+4B4h] esi +
jnz loc_1008F79  +
cmp [ebx+4B8h] edi +
jz loc_1009053  +
cmp eax offset off_1018000 +
jz loc_1008FAD  +
test byte ptr [eax+1Ch] 10h +
jz loc_1008FAD  +
lea ecx [ebx+4A4h] +
mov edx [ecx+0Ch] +
sub edx [ecx+4] +
push edi  +
push esi  +
push edx  +
mov edx [ecx+8] +
sub edx [ecx] +
push edx  +
push offset dword_1001E48  +
push 0Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1003F6D  +
fild  [ebp+var_8] +
mov [ebx+4B4h] esi +
mov [ebx+4B8h] edi +
fdiv  [ebp+var_4] +
call _ftol2_sse  +
fild  [ebp+var_C] +
mov esi eax +
fdiv  [ebp+var_4] +
call _ftol2_sse  +
mov edi eax +
lea eax [ebp+var_10] +
lea ecx [ebx+494h] +
push eax  +
call sub_1004CF9  +
xor ecx ecx +
push ecx  +
push ecx  +
push dword ptr [eax+4]  +
lea ecx [ebp+rc] +
push dword ptr [eax]  +
call sub_1004199  +
mov eax edi +
cdq   +
sub eax edx +
sar eax 1 +
push eax  +
mov eax esi +
cdq   +
sub eax edx +
sar eax 1 +
push eax  +
lea eax [ebp+rc] +
push eax  +
call ds:InflateRect  +
mov ecx [ebx+4E8h] +
test ecx ecx +
jz loc_100903F  +
cmp [ebp+arg_0] 0 +
jz loc_100903F  +
sub esp 10h +
mov edi esp +
lea esi [ebp+rc] +
movs   +
movs   +
movs   +
movs   +
sub esp 10h +
mov edi esp +
lea esi [ebx+494h] +
movs   +
movs   +
movs   +
movs   +
call sub_100F94D  +
jmp loc_1009053  +
sub esp 10h +
mov edi esp +
lea esi [ebp+rc] +
movs   +
movs   +
movs   +
lea ecx [ebx+4] +
mov eax [ecx] +
movs   +
call dword ptr [eax+4]  +
mov ecx [ebx+508h] +
push 0Fh  +
call sub_1010A90  +
push eax  +
mov ecx ebx +
call sub_10081EB  +
lea ecx [ebp+var_20] +
call sub_1003039  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
mov ebx ecx +
mov ecx [ebx+504h] +
push 0Eh  +
call sub_1010A90  +
cmp [ebp+arg_0] 0 +
mov [ebp+var_4] eax +
fild  [ebp+var_4] +
fdiv  ds:dbl_1001AB0 +
fstp  [ebp+var_4] +
fld  [ebp+var_4] +
fstp  dword ptr [ebx+48Ch] +
jz loc_10090BD  +
fld  [ebp+var_4] +
mov eax [ebx] +
push ecx  +
mov ecx ebx +
fstp  [esp+0Ch+var_C] +
call dword ptr [eax]  +
cmp dword_1018584 0 +
jz loc_1009125  +
mov al byte_1018588 +
cmp al 4 +
jnb loc_10090D3  +
test al al +
jnz loc_1009125  +
mov eax dword_1018570 +
mov ecx dword_1018574 +
push esi  +
mov edx 10000h +
mov esi 80000000h +
and eax edx +
and ecx esi +
or eax ecx +
jz loc_1009124  +
mov eax dword_1018578 +
push edi  +
mov edi dword_101857C +
mov ecx eax +
and ecx edx +
mov edx edi +
and edx esi +
cmp ecx eax +
jnz loc_1009123  +
cmp edx edi +
jnz loc_1009123  +
push offset dword_10016C8  +
push dword_101855C  +
push dword_1018558  +
call sub_10036D0  +
pop edi  +
pop esi  +
fld  dword ptr [ebx+48Ch] +
push ecx  +
mov ecx [ebx+4] +
fstp  [esp+10h+var_10] +
call sub_100A268  +
mov eax off_1018000 +
cmp eax offset off_1018000 +
jz loc_1009166  +
test byte ptr [eax+1Ch] 10h +
jz loc_1009166  +
fld  dword ptr [ebx+48Ch] +
push ecx  +
push ecx  +
fstp  qword ptr [esp] +
push offset dword_1001E48  +
push 0Fh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1008076  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push esi  +
mov esi ecx +
cmp dword ptr [esi+4D8h] 0 +
jz loc_10091EA  +
mov ecx off_1018000 +
cmp ecx offset off_1018000 +
jz loc_10091CA  +
test byte ptr [ecx+1Ch] 10h +
jz loc_10091CA  +
lea eax [esi+4A4h] +
mov edx [eax+0Ch] +
sub edx [eax+4] +
push edx  +
mov edx [eax+8] +
sub edx [eax] +
push edx  +
push dword ptr [esi+4A8h]  +
push dword ptr [eax]  +
push [ebp+pt.y]  +
push [ebp+pt.x]  +
push offset dword_1001E48  +
push 11h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_100802F  +
push [ebp+pt.y]  +
lea ecx [esi+4A4h] +
push [ebp+pt.x]  +
call sub_10042AD  +
test eax eax +
jz loc_100922C  +
push 1  +
mov ecx esi +
call sub_1008490  +
jmp loc_100922C  +
push edi  +
push [ebp+pt.y]  +
lea edi [esi+4A4h] +
push [ebp+pt.x]  +
mov ecx edi +
call sub_10042AD  +
test eax eax +
jz loc_100922B  +
cmp dword ptr [esi+4DCh] 0 +
jnz loc_100922B  +
lea eax [ebp+var_8] +
push eax  +
mov ecx edi +
call sub_1004CF9  +
push dword ptr [eax+4]  +
mov ecx esi +
push dword ptr [eax]  +
call sub_10041F7  +
push 0  +
mov ecx esi +
call sub_1008490  +
pop edi  +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 3Ch +
mov eax [ebp+arg_0] +
push ebx  +
push esi  +
push edi  +
mov [ebp+var_4] ecx +
cmp eax 8 +
jz loc_100940F  +
cmp eax 0Bh +
jz loc_100940F  +
cmp eax 9 +
jz loc_100940F  +
cmp eax 0Ah +
jz loc_100940F  +
cmp eax 7 +
jnz loc_100928F  +
xor eax eax +
cmp [ebp+arg_4] eax +
jnz loc_1009284  +
xor edx edx +
cmp [ecx+514h] eax +
setz dl  +
mov eax edx +
push eax  +
call sub_10088B5  +
jmp loc_1009415  +
sub eax 3 +
lea ebx [ecx+494h] +
mov esi ebx +
lea edi [ebp+rc2] +
movs   +
movs   +
movs   +
movs   +
jz loc_10092BC  +
dec eax  +
jz loc_10092B6  +
dec eax  +
jz loc_10092B2  +
dec eax  +
jnz loc_10092CA  +
push 20h  +
push 0  +
jmp loc_10092C0  +
push 0FFFFFFE0h  +
jmp loc_10092AE  +
push 0  +
push 20h  +
jmp loc_10092C0  +
push 0  +
push 0FFFFFFE0h  +
lea eax [ebp+rc2] +
push eax  +
call ds:OffsetRect  +
lea eax [ebp+var_C] +
push eax  +
lea ecx [ebp+rc2] +
call sub_1004CF9  +
push dword ptr [eax+4]  +
mov edi [ebp+var_4] +
push dword ptr [eax]  +
lea eax [ebp+var_2C] +
push eax  +
mov ecx edi +
call sub_10047E7  +
lea eax [ebp+var_2C] +
push eax  +
call ds:IsRectEmpty  +
test eax eax +
jz loc_100931E  +
lea eax [ebp+var_C] +
push eax  +
mov ecx ebx +
call sub_1004CF9  +
push dword ptr [eax+4]  +
mov ecx edi +
push dword ptr [eax]  +
lea eax [ebp+var_3C] +
push eax  +
call sub_10047E7  +
mov esi eax +
lea edi [ebp+var_2C] +
movs   +
movs   +
movs   +
movs   +
mov edi [ebp+var_4] +
mov esi [ebp+rc2.right] +
sub esi [ebp+rc2.left] +
lea eax [ebp+var_C] +
push eax  +
lea ecx [ebp+rc2] +
call sub_1004CF9  +
mov ecx [ebp+var_2C] +
cmp [eax] ecx +
jge loc_1009346  +
mov eax [ebx+8] +
sub eax [ebx] +
cdq   +
sub eax edx +
sar eax 1 +
sub ecx eax +
inc ecx  +
jmp loc_1009366  +
lea eax [ebp+var_C] +
push eax  +
lea ecx [ebp+rc2] +
call sub_1004CF9  +
mov ecx [ebp+var_24] +
cmp [eax] ecx +
jle loc_1009369  +
mov eax [ebx+8] +
sub eax [ebx] +
cdq   +
sub eax edx +
sar eax 1 +
sub ecx eax +
dec ecx  +
mov [ebp+rc2.left] ecx +
mov eax [ebp+rc2.left] +
add eax esi +
mov esi [ebp+rc2.bottom] +
sub esi [ebp+rc2.top] +
mov [ebp+rc2.right] eax +
lea eax [ebp+var_C] +
push eax  +
lea ecx [ebp+rc2] +
call sub_1004CF9  +
mov ecx [ebp+var_28] +
cmp [eax+4] ecx +
jge loc_100939B  +
mov eax [ebx+0Ch] +
sub eax [ebx+4] +
cdq   +
sub eax edx +
sar eax 1 +
sub ecx eax +
inc ecx  +
jmp loc_10093BD  +
lea eax [ebp+var_C] +
push eax  +
lea ecx [ebp+rc2] +
call sub_1004CF9  +
mov ecx [ebp+var_20] +
cmp [eax+4] ecx +
jle loc_10093C0  +
mov eax [ebx+0Ch] +
sub eax [ebx+4] +
cdq   +
sub eax edx +
sar eax 1 +
sub ecx eax +
dec ecx  +
mov [ebp+rc2.top] ecx +
mov eax [ebp+rc2.top] +
add eax esi +
mov [ebp+rc2.bottom] eax +
lea eax [ebp+rc2] +
push eax  +
push ebx  +
call ds:EqualRect  +
test eax eax +
jnz loc_1009415  +
mov ecx [edi+4E8h] +
sub esp 10h +
lea esi [ebp+rc2] +
test ecx ecx +
jz loc_10093FF  +
mov edi esp +
movs   +
movs   +
movs   +
movs   +
sub esp 10h +
mov edi esp +
mov esi ebx +
movs   +
movs   +
movs   +
movs   +
call sub_100F94D  +
jmp loc_1009415  +
lea ecx [edi+4] +
mov eax [ecx] +
mov edi esp +
movs   +
movs   +
movs   +
movs   +
call dword ptr [eax+4]  +
jmp loc_1009415  +
push eax  +
call sub_10087FD  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi ecx +
mov ebx [esi+514h] +
push 0  +
call sub_10088B5  +
mov ecx [esi+50Ch] +
test ecx ecx +
jz loc_10094CF  +
cmp dword ptr [esi+4D8h] 0 +
jz loc_1009469  +
call sub_1013FEF  +
cmp eax 0FFh +
jz loc_1009469  +
mov ecx [esi+50Ch] +
push 1  +
push 1  +
call sub_10140CD  +
mov ecx [esi+50Ch] +
xor eax eax +
cmp [ebp+arg_0] 201h +
push edi  +
mov edi [esi+4DCh] +
setz al  +
push eax  +
mov eax [ebp+arg_4] +
push dword ptr [eax+4]  +
push dword ptr [eax]  +
call sub_1013F4C  +
mov [esi+4DCh] eax +
test eax eax +
jz loc_10094BB  +
lea eax [esi+4F0h] +
push eax  +
call ds:GetPhysicalCursorPos  +
lea eax [esi+494h] +
push eax  +
lea eax [esi+4F8h] +
push eax  +
call ds:CopyRect  +
cmp edi [esi+4DCh] +
pop edi  +
jz loc_10094CF  +
mov ecx [esi+50Ch] +
call sub_1014513  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1008B18  +
test [ebp+arg_0] 1 +
jz loc_10094F6  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push ebx  +
mov ebx ecx +
mov ecx [ebx+4E8h] +
push esi  +
push edi  +
test ecx ecx +
jz loc_1009526  +
call sub_100F1C7  +
test eax eax +
jnz loc_10096C3  +
cmp dword ptr [ebx+514h] 0 +
jz loc_1009541  +
push dword ptr [ebp+0Ch]  +
mov ecx ebx +
push dword ptr [ebp+8]  +
call sub_1008BA8  +
jmp loc_10096C3  +
lea eax [ebp+8] +
push eax  +
call ds:GetPhysicalCursorPos  +
lea esi [ebx+494h] +
lea edi [ebp-20h] +
movs   +
movs   +
movs   +
movs   +
xor edi edi +
cmp [ebx+4DCh] edi +
jz loc_10095DA  +
mov ecx [ebp+8] +
sub ecx [ebx+4F0h] +
lea eax [ebx+4F8h] +
mov esi eax +
lea edi [ebp-20h] +
movs   +
movs   +
movs   +
movs   +
add [ebp-20h] ecx +
mov ecx [ebp+0Ch] +
sub ecx [ebx+4F4h] +
add [ebp-1Ch] ecx +
mov ecx [eax+8] +
sub ecx [eax] +
add ecx [ebp-20h] +
mov [ebp-18h] ecx +
mov ecx [eax+0Ch] +
sub ecx [eax+4] +
lea eax [ebp-8] +
add ecx [ebp-1Ch] +
push eax  +
mov [ebp-14h] ecx +
lea ecx [ebp-20h] +
call sub_1004CF9  +
push dword ptr [eax+4]  +
lea ecx [ebx+0Ch] +
push dword ptr [eax]  +
call sub_10042AD  +
test eax eax +
jz loc_1009683  +
sub esp 10h +
mov edi esp +
lea esi [ebp-20h] +
movs   +
movs   +
movs   +
lea ecx [ebx+4] +
mov eax [ecx] +
movs   +
call dword ptr [eax+4]  +
jmp loc_1009683  +
push dword ptr [ebx+4C0h]  +
lea esi [ebx+4A4h] +
push dword ptr [ebx+4BCh]  +
mov ecx esi +
call sub_10042AD  +
test eax eax +
jz loc_100965B  +
cmp [ebx+4D8h] edi +
jnz loc_100965B  +
xor ecx ecx +
push ecx  +
xor eax eax +
push eax  +
push dword ptr [ebp+0Ch]  +
lea ecx [ebp-10h] +
push dword ptr [ebp+8]  +
call sub_1004199  +
mov esi eax +
lea ecx [ebx+494h] +
mov eax [ecx+0Ch] +
sub eax [ecx+4] +
lea edi [ebp-20h] +
cdq   +
sub eax edx +
sar eax 1 +
push eax  +
mov eax [ecx+8] +
sub eax [ecx] +
movs   +
cdq   +
movs   +
sub eax edx +
sar eax 1 +
movs   +
push eax  +
lea eax [ebp-20h] +
push eax  +
movs   +
call ds:InflateRect  +
sub esp 10h +
mov edi esp +
lea esi [ebp-20h] +
movs   +
movs   +
movs   +
lea ecx [ebx+4] +
mov eax [ecx] +
movs   +
call dword ptr [eax+4]  +
push 0  +
jmp loc_100967C  +
push dword ptr [ebp+0Ch]  +
mov ecx esi +
push dword ptr [ebp+8]  +
call sub_10042AD  +
test eax eax +
jz loc_100967B  +
push dword ptr [ebp+0Ch]  +
mov ecx ebx +
push dword ptr [ebp+8]  +
call sub_1009170  +
jmp loc_1009683  +
push edi  +
mov ecx ebx +
call sub_1008490  +
mov ecx [ebx+50Ch] +
test ecx ecx +
jz loc_10096B1  +
cmp dword ptr [ebx+4D8h] 0 +
jz loc_10096B1  +
call sub_1013FEF  +
cmp eax 0FFh +
jz loc_10096B1  +
mov ecx [ebx+50Ch] +
push 1  +
push 1  +
call sub_10140CD  +
mov eax [ebp+8] +
mov [ebx+4BCh] eax +
mov eax [ebp+0Ch] +
mov [ebx+4C0h] eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+Msg] +
sub esp 28h +
push ebx  +
mov eax 2C4h +
push esi  +
push edi  +
cmp ecx eax +
ja loc_1009912  +
jz loc_1009899  +
mov eax ecx +
dec eax  +
jz loc_1009819  +
dec eax  +
dec eax  +
jz loc_10097FB  +
sub eax 0Dh +
jz loc_10097DB  +
sub eax 4 +
jz loc_10097D3  +
sub eax 0FFh +
jz loc_10097C3  +
sub eax 1B0h +
jnz loc_1009A72  +
mov edi [ebp+arg_0] +
xor esi esi +
push esi  +
mov ecx edi +
call sub_10088B5  +
xor ebx ebx +
lea eax [ebp+pt] +
inc ebx  +
push eax  +
mov [edi+4D8h] ebx +
mov [ebp+pt.x] esi +
mov [ebp+pt.y] esi +
call ds:GetPhysicalCursorPos  +
mov eax off_1018000 +
cmp eax offset off_1018000 +
jz loc_1009794  +
test byte ptr [eax+1Ch] 10h +
jz loc_1009794  +
lea ecx [edi+4A4h] +
mov edx [ecx+0Ch] +
sub edx [ecx+4] +
push edx  +
mov edx [ecx+8] +
sub edx [ecx] +
push edx  +
push dword ptr [edi+4A8h]  +
push dword ptr [ecx]  +
push [ebp+pt.y]  +
push [ebp+pt.x]  +
push offset dword_1001E48  +
push 12h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100802F  +
push [ebp+pt.y]  +
lea ecx [edi+4A4h] +
push [ebp+pt.x]  +
call sub_10042AD  +
test eax eax +
jz loc_10097B1  +
push ebx  +
mov ecx edi +
call sub_1008490  +
mov ecx [edi+50Ch] +
push ebx  +
push ebx  +
call sub_10140CD  +
jmp loc_1009A72  +
push [ebp+wParam]  +
mov ecx [ebp+arg_0] +
call sub_1008555  +
jmp loc_1009A72  +
xor eax eax +
inc eax  +
jmp loc_1009A84  +
mov eax [ebp+arg_0] +
xor esi esi +
push esi  +
push esi  +
push 10h  +
push dword ptr [eax+44h]  +
call ds:SendMessageW  +
push [ebp+hWinPosInfo]  +
call ds:DestroyWindow  +
jmp loc_1009A72  +
mov eax [ebp+arg_0] +
mov ecx [eax+50Ch] +
test ecx ecx +
jz loc_1009A72  +
push [ebp+hWinPosInfo]  +
call sub_1014165  +
jmp loc_1009A72  +
lea eax [ebp+var_4] +
xor esi esi +
push eax  +
mov [ebp+var_4] esi +
call ds:DwmIsCompositionEnabled  +
mov ebx ds:DwmSetWindowAttribute +
cmp [ebp+var_4] esi +
jz loc_1009847  +
push 4  +
lea eax [ebp+var_8] +
push eax  +
push 8  +
push [ebp+hWinPosInfo]  +
mov [ebp+var_8] 2 +
call ebx  +
mov edi [ebp+arg_0] +
push esi  +
push hmod  +
lea eax [edi+4A4h] +
mov ecx [eax+0Ch] +
sub ecx [eax+4] +
mov edx [eax+8] +
sub edx [eax] +
push esi  +
push [ebp+hWinPosInfo]  +
mov eax offset aMagnifier +
push ecx  +
push edx  +
push esi  +
push esi  +
push 50000000h  +
push eax  +
push eax  +
push esi  +
call ds:CreateWindowExW  +
push 4  +
mov [edi+44h] eax +
lea eax [ebp+pt.y] +
push eax  +
push 0Ch  +
push [ebp+hWinPosInfo]  +
mov [ebp+pt.y] 1 +
call ebx  +
jmp loc_1009A72  +
mov eax off_1018000 +
cmp eax offset off_1018000 +
jz loc_10098BD  +
test byte ptr [eax+1Ch] 10h +
jz loc_10098BD  +
push offset dword_1001E48  +
push 13h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10030A0  +
mov edi [ebp+arg_0] +
mov ecx [edi+50Ch] +
xor esi esi +
push esi  +
push esi  +
mov [edi+4D8h] esi +
call sub_10140CD  +
mov ecx [edi+50Ch] +
call sub_1013FEF  +
mov ecx 0FFh +
cmp eax ecx +
jge loc_1009900  +
push ecx  +
mov ecx [edi+50Ch] +
call sub_1013FF8  +
mov ecx [edi+50Ch] +
call sub_1014513  +
mov ecx [edi+50Ch] +
push 1  +
call sub_1014085  +
jmp loc_1009A72  +
mov eax ecx +
sub eax 312h +
jz loc_1009A64  +
sub eax 0Ch +
jz loc_1009A09  +
sub eax 1E2h +
jz loc_1009962  +
sub eax 100h +
jz loc_1009950  +
dec eax  +
jnz loc_1009A72  +
push [ebp+lParam]  +
mov ecx [ebp+arg_0] +
push [ebp+wParam]  +
call sub_1009170  +
jmp loc_1009A72  +
push [ebp+lParam]  +
mov ecx [ebp+arg_0] +
push [ebp+wParam]  +
mov eax [ecx] +
call dword ptr [eax]  +
jmp loc_1009A72  +
mov ebx [ebp+arg_0] +
xor esi esi +
mov dword ptr [ebx+4E0h] 1 +
cmp [ebx+4E8h] esi +
jz loc_10099F3  +
mov eax off_1018000 +
cmp eax offset off_1018000 +
jz loc_100999D  +
test byte ptr [eax+1Ch] 10h +
jz loc_100999D  +
push offset dword_1001E48  +
push 14h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10030A0  +
mov ecx [ebx+50Ch] +
cmp ecx esi +
jz loc_10099AC  +
call sub_10144A4  +
lea eax [ebp+var_18] +
lea ecx [ebx+494h] +
push eax  +
xor edi edi +
call sub_1004CF9  +
push esi  +
push edi  +
push dword ptr [eax+4]  +
lea ecx [ebp+var_28] +
push dword ptr [eax]  +
call sub_1004199  +
sub esp 10h +
mov edi esp +
mov esi eax +
movs   +
movs   +
mov ecx [ebx+4E8h] +
movs   +
movs   +
sub esp 10h +
mov edi esp +
lea esi [ebx+494h] +
movs   +
movs   +
movs   +
movs   +
call sub_100F94D  +
jmp loc_1009A72  +
mov ecx [ebx+8] +
push esi  +
push esi  +
push 10h  +
call ds:?GetHWND@NativeHWNDHost@DirectUI@@QAEPAUHWND__@@XZ  +
push eax  +
call ds:PostMessageW  +
jmp loc_1009A72  +
lea eax [ebp+Msg] +
xor esi esi +
push eax  +
mov [ebp+Msg] esi +
call ds:DwmIsCompositionEnabled  +
cmp [ebp+Msg] esi +
jz loc_1009A37  +
push 4  +
lea eax [ebp+arg_0] +
push eax  +
push 8  +
push [ebp+hWinPosInfo]  +
mov [ebp+arg_0] 2 +
call ds:DwmSetWindowAttribute  +
jmp loc_1009A57  +
mov edi [ebp+arg_0] +
push 2  +
mov ecx edi +
call sub_10041C4  +
mov ecx [edi+8] +
push esi  +
push esi  +
push 10h  +
call ds:?GetHWND@NativeHWNDHost@DirectUI@@QAEPAUHWND__@@XZ  +
push eax  +
call ds:PostMessageW  +
push [ebp+lParam]  +
push [ebp+wParam]  +
push 31Eh  +
jmp loc_1009A7B  +
push [ebp+lParam]  +
mov ecx [ebp+arg_0] +
push [ebp+wParam]  +
call sub_1009236  +
push [ebp+lParam]  +
push [ebp+wParam]  +
push [ebp+Msg]  +
push [ebp+hWinPosInfo]  +
call ds:DefWindowProcW  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+8] +
push esi  +
push edi  +
push 0FFFFFFEBh  +
push ebx  +
call ds:GetWindowLongW  +
cmp dword ptr [ebp+0Ch] 81h +
mov esi ds:SetWindowLongW +
mov edi eax +
jnz loc_1009AC0  +
mov eax [ebp+14h] +
mov edi [eax] +
push edi  +
push 0FFFFFFEBh  +
push ebx  +
call esi  +
cmp dword ptr [ebp+0Ch] 82h +
jnz loc_1009AD1  +
xor edi edi +
push edi  +
push 0FFFFFFEBh  +
push ebx  +
call esi  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push ebx  +
test edi edi +
jz loc_1009AE7  +
push edi  +
call sub_10096CF  +
jmp loc_1009AED  +
call ds:DefWindowProcW  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 30h +
push esi  +
xor esi esi +
cmp dword_101863C esi +
jnz loc_1009B71  +
mov eax hmod +
push 1  +
push eax  +
mov [ebp+var_30.cbSize] 30h +
mov [ebp+var_30.style] 3 +
mov [ebp+var_30.lpfnWndProc] offset loc_1009A90 +
mov [ebp+var_30.cbClsExtra] esi +
mov [ebp+var_30.cbWndExtra] esi +
mov [ebp+var_30.hInstance] eax +
call ds:LoadIconW  +
push 7F00h  +
push esi  +
mov [ebp+var_30.hIcon] eax +
call ds:LoadCursorW  +
mov [ebp+var_30.hCursor] eax +
mov eax [ebp+arg_0] +
mov [ebp+var_30.hbrBackground] eax +
lea eax [ebp+var_30] +
push eax  +
mov [ebp+var_30.lpszMenuName] esi +
mov [ebp+var_30.lpszClassName] offset aScreenMagnif_0 +
mov [ebp+var_30.hIconSm] esi +
mov dword_101863C 1 +
call ds:RegisterClassExW  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 34h +
push ebx  +
push esi  +
xor esi esi +
push esi  +
mov ebx ecx +
push offset aLensmagnifierI  +
lea ecx [ebp+var_18] +
call sub_1002FF5  +
call sub_100E86F  +
test eax eax +
jnz loc_1009BAF  +
lea ecx [ebp+var_18] +
call sub_1003039  +
xor eax eax +
jmp loc_1009D9B  +
lea eax [ebx+508h] +
push eax  +
call sub_1010CF9  +
test eax eax +
jl loc_1009BA0  +
push edi  +
lea eax [ebp+var_10] +
push eax  +
mov [ebp+var_10] esi +
mov [ebp+var_C] esi +
call ds:GetPhysicalCursorPos  +
xor ecx ecx +
push ecx  +
xor eax eax +
push eax  +
push [ebp+var_C]  +
lea ecx [ebp+var_34] +
push [ebp+var_10]  +
call sub_1004199  +
mov esi eax +
lea edi [ebx+4A4h] +
movs   +
xor ecx ecx +
push ecx  +
movs   +
xor eax eax +
push eax  +
push [ebp+var_C]  +
movs   +
push [ebp+var_10]  +
lea ecx [ebp+var_34] +
movs   +
call sub_1004199  +
mov esi eax +
lea edi [ebx+494h] +
movs   +
movs   +
movs   +
movs   +
lea esi [ebx+508h] +
mov ecx [esi] +
push 14h  +
call sub_1010A90  +
mov ecx [esi] +
push 15h  +
mov edi eax +
call sub_1010A90  +
cmp edi 1 +
jz loc_1009C34  +
cmp eax 1 +
jnz loc_1009C4E  +
mov ecx [esi] +
push 1  +
push 1Eh  +
push 14h  +
call sub_1010BE4  +
mov ecx [esi] +
push 1  +
push 1Eh  +
push 15h  +
call sub_1010BE4  +
lea eax [ebx+4] +
push eax  +
call sub_100F5E5  +
xor edi edi +
push edi  +
mov [ebx+4E8h] eax +
call ds:ClipCursor  +
or [ebp+var_4] 0FFFFFFFFh +
lea eax [ebp+var_4] +
push eax  +
push 20h  +
push 1  +
push 1  +
push 1  +
call ds:CreateBitmap  +
mov [ebp+var_8] eax +
cmp eax edi +
jz loc_1009D90  +
mov [ebp+var_24.lbHatch] eax +
lea eax [ebp+var_24] +
push eax  +
mov [ebp+var_24.lbStyle] 3 +
mov [ebp+var_24.lbColor] edi +
call ds:CreateBrushIndirect  +
mov [ebx+510h] eax +
cmp eax edi +
jnz loc_1009CB6  +
push [ebp+var_8]  +
call ds:DeleteObject  +
jmp loc_1009D90  +
push eax  +
mov ecx ebx +
call sub_1009AF9  +
push ebx  +
push hmod  +
lea eax [ebx+4A4h] +
mov ecx [eax+0Ch] +
sub ecx [eax+4] +
mov edx [eax+8] +
sub edx [eax] +
push edi  +
push edi  +
push ecx  +
push edx  +
mov eax 80000000h +
push eax  +
push eax  +
push 86040000h  +
push edi  +
push offset aScreenMagnif_0  +
push 800A8h  +
call ds:CreateWindowExW  +
mov [ebx+40h] eax +
cmp eax edi +
jnz loc_1009D1D  +
mov eax off_1018000 +
cmp eax offset off_1018000 +
jz loc_1009D90  +
test byte ptr [eax+1Ch] 4 +
jz loc_1009D90  +
push offset dword_1001E48  +
push 0Ah  +
jmp loc_1009D85  +
push edi  +
push offset aTabletpenservi  +
call ds:FindWindowW  +
cmp eax edi +
jz loc_1009D9F  +
push dword ptr [ebx+40h]  +
push edi  +
push 2DDh  +
push eax  +
call ds:PostMessageW  +
push 68h  +
call ??2@YAPAXI@Z  +
pop ecx  +
cmp eax edi +
jz loc_1009D52  +
mov ecx eax +
call sub_10145FD  +
jmp loc_1009D54  +
xor eax eax +
mov [ebx+50Ch] eax +
cmp eax edi +
jz loc_1009D6C  +
push dword ptr [ebx+40h]  +
mov ecx eax +
call sub_1014257  +
cmp eax edi +
jnz loc_1009D9F  +
mov eax off_1018000 +
cmp eax offset off_1018000 +
jz loc_1009D90  +
test byte ptr [eax+1Ch] 10h +
jz loc_1009D90  +
push offset dword_1001E48  +
push 0Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10030A0  +
lea ecx [ebp+var_18] +
call sub_1003039  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
push 1  +
push dword ptr [ebx+40h]  +
mov ecx ebx +
push 4  +
push 0CBh  +
call sub_1004112  +
test eax eax +
jnz loc_1009DC2  +
lea ecx [ebp+var_18] +
call sub_1003039  +
mov eax edi +
jmp loc_1009D9A  +
push 2  +
push 0FFh  +
push edi  +
push dword ptr [ebx+40h]  +
call ds:SetLayeredWindowAttributes  +
mov ecx [esi] +
push 0Eh  +
call sub_1010AB4  +
fstp  dword ptr [ebx+490h] +
push ebx  +
push edi  +
push edi  +
push 1  +
push dword ptr [ebx+40h]  +
lea ecx [ebx+48h] +
call sub_100DA3F  +
lea eax [ebp+var_10] +
push eax  +
call ds:GetPhysicalCursorPos  +
push edi  +
xor eax eax +
push eax  +
push [ebp+var_C]  +
lea ecx [ebp+var_34] +
push [ebp+var_10]  +
call sub_1004199  +
mov esi eax +
mov eax [ebx] +
lea edi [ebx+494h] +
movs   +
movs   +
movs   +
push 0  +
mov ecx ebx +
movs   +
call dword ptr [eax+20h]  +
push 0  +
push 10h  +
push 0BBBh  +
push dword ptr [ebx+40h]  +
call ds:SetTimer  +
fld  dword ptr [ebx+490h] +
push ecx  +
mov ecx [ebx+8] +
fstp  [esp+58h+var_58] +
call sub_100A268  +
xor edi edi +
inc edi  +
jmp loc_1009DB6  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
cmp [ebp+arg_4] 0 +
push esi  +
lea eax [ebp+var_4] +
mov esi ecx +
push eax  +
push [ebp+arg_0]  +
mov dword ptr [esi] offset off_100208C +
jz loc_1009E7B  +
call GdipCreateBitmapFromStreamICM  +
jmp loc_1009E80  +
call GdipCreateBitmapFromStream  +
mov [esi+8] eax +
mov eax [ebp+var_4] +
mov [esi+4] eax +
mov eax esi +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 10h  +
call GdipAlloc  +
test eax eax +
jz loc_1009EAD  +
mov ecx eax +
pop ebp  +
jmp loc_1009E54  +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
push dword ptr [eax]  +
mov esi ecx +
push [ebp+arg_4]  +
push dword ptr [esi+4]  +
call GdipCreateHBITMAPFromBitmap  +
push eax  +
mov ecx esi +
call sub_1004D80  +
pop esi  +
pop ebp  +
retn 8  +
***
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov esi ecx +
call ds:??0NativeHWNDHost@DirectUI@@QAE@XZ  +
fld1   +
xor eax eax +
fstp  dword ptr [esi+0C8h] +
mov [esi+1Ch] eax +
mov [esi+20h] eax +
mov [esi+24h] eax +
mov [esi+28h] eax +
mov [esi+2Ch] eax +
mov [esi+30h] eax +
mov [esi+0A8h] al +
mov [esi+0ACh] eax +
mov [esi+0B0h] eax +
mov [esi+0B4h] eax +
mov [esi+0B8h] eax +
mov [esi+0DCh] eax +
mov [esi+0E0h] eax +
mov [esi+0E4h] eax +
mov [esi+0E8h] eax +
mov [esi+0ECh] eax +
mov [esi+0F0h] eax +
mov [esi+0F4h] eax +
mov [esi+0FCh] eax +
mov eax [ebp+arg_0] +
mov [esi+18h] eax +
mov eax 96h +
mov [esi+0C0h] eax +
mov [esi+0C4h] eax +
lea eax [esi+0CCh] +
push eax  +
mov dword ptr [esi] offset off_1002094 +
mov dword ptr [esi+0A4h] 0FFh +
mov byte ptr [esi+0BCh] 1 +
mov dword ptr [esi+0F8h] 0BB8h +
call ds:SetRectEmpty  +
push 0Dh  +
pop ecx  +
xor eax eax +
lea edi [esi+3Ch] +
stos   +
push 0Dh  +
pop ecx  +
lea edi [esi+70h] +
stos   +
pop edi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
mov esi ecx +
push edi  +
mov dword ptr [esi] offset off_1002094 +
call sub_100BFF3  +
mov ecx esi +
call ds:?GetHWND@NativeHWNDHost@DirectUI@@QAEPAUHWND__@@XZ  +
mov ebx eax +
test ebx ebx +
jz loc_100A03A  +
xor edi edi +
push dword_1018038[edi]  +
push ebx  +
call ds:UnregisterHotKey  +
test eax eax +
jnz loc_100A02F  +
mov eax off_1018000 +
cmp eax offset off_1018000 +
jz loc_100A02F  +
test byte ptr [eax+1Ch] 4 +
jz loc_100A02F  +
call ds:GetLastError  +
push eax  +
mov eax off_1018000 +
push offset loc_1001FA8  +
push 0Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10030C6  +
add edi 0Ch +
cmp edi 0CCh +
jb loc_1009FEE  +
mov ecx [esi+2Ch] +
test ecx ecx +
jz loc_100A061  +
mov eax [esi+30h] +
test eax eax +
jz loc_100A054  +
push eax  +
push ecx  +
call ds:SelectObject  +
and dword ptr [esi+30h] 0 +
push dword ptr [esi+2Ch]  +
call ds:DeleteDC  +
and dword ptr [esi+2Ch] 0 +
mov ebx ds:DeleteObject +
lea edi [esi+3Ch] +
mov [ebp+var_4] 0Dh +
mov eax [edi] +
test eax eax +
jz loc_100A07D  +
push eax  +
call ebx  +
and dword ptr [edi] 0 +
add edi 4 +
dec [ebp+var_4]  +
jnz loc_100A071  +
lea edi [esi+70h] +
mov [ebp+var_4] 0Dh +
mov eax [edi] +
test eax eax +
jz loc_100A09B  +
push eax  +
call ebx  +
and dword ptr [edi] 0 +
add edi 4 +
dec [ebp+var_4]  +
jnz loc_100A08F  +
mov ecx esi +
call ds:??1NativeHWNDHost@DirectUI@@UAE@XZ  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 24h +
mov eax dword_101852C +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
push edi  +
push 5  +
mov ebx ecx +
pop ecx  +
lea eax [ebp+hKey] +
push eax  +
mov esi offset aRunbefore +
lea edi [ebp+ValueName] +
push 3  +
movs   +
xor esi esi +
push esi  +
push offset aSoftwareMicr_1  +
push 80000001h  +
call ds:RegOpenKeyExW  +
test eax eax +
jnz loc_100A154  +
push 4  +
pop edi  +
lea eax [ebp+var_24] +
push eax  +
lea eax [ebp+Data] +
push eax  +
push esi  +
push 10h  +
lea eax [ebp+ValueName] +
push eax  +
push esi  +
push [ebp+hKey]  +
mov dword ptr [ebp+Data] esi +
mov [ebp+var_24] edi +
call ds:RegGetValueW  +
test eax eax +
jnz loc_100A126  +
cmp dword ptr [ebp+Data] esi +
setnz al  +
cmp eax esi +
jnz loc_100A14B  +
push edi  +
lea eax [ebp+Data] +
push eax  +
push edi  +
push esi  +
lea eax [ebp+ValueName] +
push eax  +
push [ebp+hKey]  +
mov dword ptr [ebp+Data] 1 +
call ds:RegSetValueExW  +
mov dword ptr [ebx+0F8h] 1388h +
push [ebp+hKey]  +
call ds:RegCloseKey  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_10149A5  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1Ch +
push esi  +
push edi  +
call ds:?GetHWND@NativeHWNDHost@DirectUI@@QAEPAUHWND__@@XZ  +
mov esi ds:GetMessageW +
xor edi edi +
jmp loc_100A1AE  +
call sub_100C00A  +
cmp eax edi +
jz loc_100A19A  +
lea ecx [ebp+Msg] +
push ecx  +
push eax  +
call ds:IsDialogMessageW  +
test eax eax +
jnz loc_100A1AE  +
lea eax [ebp+Msg] +
push eax  +
call ds:TranslateMessage  +
lea eax [ebp+Msg] +
push eax  +
call ds:DispatchMessageW  +
push edi  +
push edi  +
push edi  +
lea eax [ebp+Msg] +
push eax  +
call esi  +
test eax eax +
jnz loc_100A182  +
pop edi  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push ebx  +
push esi  +
mov esi ecx +
mov [ebp+var_4] 1 +
call ds:?GetHWND@NativeHWNDHost@DirectUI@@QAEPAUHWND__@@XZ  +
mov ebx eax +
push ebx  +
call ds:IsIconic  +
test eax eax +
jnz loc_100A25A  +
mov eax [esi+0A4h] +
push edi  +
xor edi edi +
mov [ebp+rc.left] edi +
mov [ebp+rc.top] edi +
mov [ebp+rc.right] edi +
mov [ebp+rc.bottom] edi +
cmp eax 0FFh +
jnz loc_100A231  +
lea eax [ebp+rc] +
push eax  +
push ebx  +
call ds:GetWindowRect  +
push [ebp+pt.y]  +
lea eax [ebp+rc] +
push [ebp+pt.x]  +
push eax  +
call ds:PtInRect  +
test eax eax +
jz loc_100A259  +
call ds:GetCapture  +
test eax eax +
jnz loc_100A259  +
jmp loc_100A256  +
cmp eax edi +
jnz loc_100A259  +
lea eax [ebp+rc] +
push eax  +
push dword ptr [esi+28h]  +
call ds:GetWindowRect  +
push [ebp+pt.y]  +
lea eax [ebp+rc] +
push [ebp+pt.x]  +
push eax  +
call ds:PtInRect  +
test eax eax +
jz loc_100A259  +
mov [ebp+var_4] edi +
pop edi  +
mov eax [ebp+var_4] +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 288h +
mov eax dword_101852C +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
push 40h  +
lea eax [ebp+Source] +
push eax  +
push 0AAh  +
push hmod  +
mov esi ecx +
call ds:LoadStringW  +
test eax eax +
jle loc_100A334  +
cmp eax 3Fh +
jb loc_100A2AA  +
push 3Fh  +
pop eax  +
fld  [ebp+arg_0] +
xor ecx ecx +
fmul  ds:dbl_1001AB0 +
mov [ebp+eax*2+Source] cx +
fadd  ds:dbl_1001CF8 +
call _ftol2  +
mov [ebp+Arguments] eax +
lea eax [ebp+Arguments] +
push eax  +
push 100h  +
lea eax [ebp+Buffer] +
push eax  +
push 0  +
push 0  +
lea eax [ebp+Source] +
push eax  +
push 2400h  +
call ds:FormatMessageW  +
test eax eax +
jbe loc_100A334  +
push offset aZoomfactorlabe  +
call StrToID  +
mov ecx [esi+1Ch] +
movzx eax ax +
push eax  +
call ds:?FindDescendent@Element@DirectUI@@QAEPAV12@G@Z  +
test eax eax +
jz loc_100A334  +
lea ecx [ebp+Buffer] +
push ecx  +
add esi 0FCh +
mov ecx eax +
mov dword ptr [esi] 1 +
call ds:?SetContentString@Element@DirectUI@@QAEJPBG@Z  +
and dword ptr [esi] 0 +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop esi  +
call sub_10149A5  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov [ecx+20h] eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
and [ebp+var_4] 0 +
push esi  +
push edi  +
lea eax [ebp+var_4] +
mov esi ecx +
mov edi [esi+1Ch] +
push eax  +
call ds:DwmIsCompositionEnabled  +
mov ecx [edi+0A4h] +
push 4  +
call sub_1010A90  +
mov [ebp+var_8] eax +
cmp eax [ebp+arg_0] +
jz loc_100A3F4  +
cmp [ebp+var_4] 0 +
jz loc_100A3F4  +
mov eax [ebp+arg_0] +
dec eax  +
jz loc_100A3A7  +
dec eax  +
jz loc_100A3A3  +
dec eax  +
jnz loc_100A3B1  +
push 4  +
jmp loc_100A3A9  +
push 3  +
jmp loc_100A3A9  +
push 2  +
mov ecx [esi+18h] +
call sub_10041C4  +
mov ecx [edi+0A4h] +
push 1  +
push [ebp+arg_0]  +
push 4  +
call sub_1010BE4  +
cmp [ebp+var_8] 1 +
push 0  +
push 0  +
jnz loc_100A3DA  +
push 10h  +
mov ecx esi +
call ds:?GetHWND@NativeHWNDHost@DirectUI@@QAEPAUHWND__@@XZ  +
push eax  +
jmp loc_100A406  +
push 500h  +
push dword ptr [esi+20h]  +
call ds:SendMessageW  +
mov dword ptr [esi+0F4h] 1 +
jmp loc_100A40C  +
cmp [ebp+arg_0] 3 +
jnz loc_100A40C  +
push 1  +
push 7  +
push 312h  +
push dword ptr [esi+20h]  +
call ds:PostMessageW  +
pop edi  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
xor ebx ebx +
push edi  +
mov esi ecx +
cmp [ebp+arg_0] bl +
jz loc_100A45D  +
cmp [esi+0ACh] ebx +
jnz loc_100A47B  +
call ds:?GetHWND@NativeHWNDHost@DirectUI@@QAEPAUHWND__@@XZ  +
mov edi eax +
push edi  +
call ds:IsWindowEnabled  +
test eax eax +
jz loc_100A47B  +
push ebx  +
push 0C8h  +
push 7D3h  +
push edi  +
call ds:SetTimer  +
mov [esi+0ACh] eax +
jmp loc_100A47B  +
lea edi [esi+0ACh] +
cmp [edi] ebx +
jz loc_100A47B  +
push 7D3h  +
call ds:?GetHWND@NativeHWNDHost@DirectUI@@QAEPAUHWND__@@XZ  +
push eax  +
call ds:KillTimer  +
mov [edi] ebx +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
xor ebx ebx +
push edi  +
mov esi ecx +
cmp [ebp+arg_0] bl +
jz loc_100A4C9  +
cmp [esi+0B4h] ebx +
jnz loc_100A4E7  +
push ebx  +
lea edi [esi+0F8h] +
push dword ptr [edi]  +
push 7D1h  +
call ds:?GetHWND@NativeHWNDHost@DirectUI@@QAEPAUHWND__@@XZ  +
push eax  +
call ds:SetTimer  +
mov [esi+0B4h] eax +
mov dword ptr [edi] 0BB8h +
jmp loc_100A4E7  +
lea edi [esi+0B4h] +
cmp [edi] ebx +
jz loc_100A4E7  +
push 7D1h  +
call ds:?GetHWND@NativeHWNDHost@DirectUI@@QAEPAUHWND__@@XZ  +
push eax  +
call ds:KillTimer  +
mov [edi] ebx +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
xor ebx ebx +
push esi  +
mov esi ecx +
cmp [ebp+arg_0] bl +
jz loc_100A531  +
cmp [esi+0B8h] ebx +
jnz loc_100A551  +
mov al [ebp+arg_4] +
push ebx  +
push 19h  +
push 7D2h  +
mov [esi+0A8h] al +
call ds:?GetHWND@NativeHWNDHost@DirectUI@@QAEPAUHWND__@@XZ  +
push eax  +
call ds:SetTimer  +
mov [esi+0B8h] eax +
jmp loc_100A551  +
push edi  +
lea edi [esi+0B8h] +
cmp [edi] ebx +
jz loc_100A550  +
push 7D2h  +
call ds:?GetHWND@NativeHWNDHost@DirectUI@@QAEPAUHWND__@@XZ  +
push eax  +
call ds:KillTimer  +
mov [edi] ebx +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
and [ebp+var_4] 0 +
push ebx  +
lea eax [ebp+var_4] +
push eax  +
movzx eax [ebp+arg_0] +
push offset aPng  +
push eax  +
push hmod  +
call SHLWAPI_628  +
mov ebx eax +
test ebx ebx +
jl loc_100A5D7  +
push esi  +
push 0  +
push [ebp+var_4]  +
call sub_1009E95  +
mov esi eax +
test esi esi +
jz loc_100A5C8  +
and dword ptr [ebp+arg_0] 0 +
lea eax [ebp+var_8] +
push eax  +
lea eax [ebp+arg_0] +
push eax  +
mov ecx esi +
call sub_1009EB8  +
test eax eax +
jnz loc_100A5B9  +
mov eax [ebp+arg_4] +
mov ecx [ebp+var_8] +
mov [eax] ecx +
jmp loc_100A5BE  +
mov ebx 80004005h +
mov eax [esi] +
push 1  +
mov ecx esi +
call dword ptr [eax]  +
jmp loc_100A5CD  +
mov ebx 80004005h +
mov eax [ebp+var_4] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
pop esi  +
mov eax ebx +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1Ch +
push ebx  +
mov ebx 0FFh +
push esi  +
mov esi ecx +
mov eax [esi+34h] +
mov ecx ebx +
sub ecx [esi+0A4h] +
push edi  +
imul eax ecx +
cdq   +
mov edi ebx +
idiv  edi +
mov [ebp+var_14] eax +
mov eax [esi+38h] +
imul eax ecx +
cdq   +
idiv  ebx +
xor ebx ebx +
cmp [ebp+var_14] ebx +
mov [ebp+cy] eax +
jl loc_100A70C  +
cmp eax ebx +
jl loc_100A70C  +
mov ecx [ebp+var_14] +
xor edi edi +
mov [ebp+var_8] ebx +
mov [ebp+var_C] ebx +
cmp ecx [esi+34h] +
jnz loc_100A644  +
cmp eax [esi+38h] +
jnz loc_100A644  +
mov eax [esi+2Ch] +
jmp loc_100A6A2  +
push dword ptr [esi+2Ch]  +
call ds:CreateCompatibleDC  +
mov edi eax +
cmp edi ebx +
jz loc_100A70C  +
push [ebp+cy]  +
push [ebp+var_14]  +
push dword ptr [esi+2Ch]  +
call ds:CreateCompatibleBitmap  +
mov [ebp+var_8] eax +
cmp eax ebx +
jz loc_100A6E9  +
push eax  +
push edi  +
call ds:SelectObject  +
push 3  +
push edi  +
mov [ebp+var_C] eax +
call ds:SetStretchBltMode  +
push 0CC0020h  +
push dword ptr [esi+38h]  +
push dword ptr [esi+34h]  +
push ebx  +
push ebx  +
push dword ptr [esi+2Ch]  +
push [ebp+cy]  +
push [ebp+var_14]  +
push ebx  +
push ebx  +
push edi  +
call ds:StretchBlt  +
mov eax edi +
cmp eax ebx +
jz loc_100A6E9  +
push 2  +
lea ecx [ebp+var_4] +
push ecx  +
push ebx  +
lea ecx [ebp+var_1C] +
push ecx  +
push eax  +
lea eax [ebp+var_14] +
push eax  +
push ebx  +
push ebx  +
push dword ptr [esi+28h]  +
mov [ebp+var_1C] ebx +
mov [ebp+var_18] ebx +
mov byte ptr [ebp+var_4] bl +
mov byte ptr [ebp+var_4+1] bl +
mov byte ptr [ebp+var_4+3] 1 +
mov byte ptr [ebp+var_4+2] 0FFh +
call ds:UpdateLayeredWindow  +
push 16h  +
push [ebp+cy]  +
push [ebp+var_14]  +
push ebx  +
push ebx  +
push ebx  +
push dword ptr [esi+28h]  +
call ds:SetWindowPos  +
cmp edi ebx +
jz loc_100A70C  +
cmp [ebp+var_8] ebx +
jz loc_100A705  +
push [ebp+var_C]  +
push edi  +
call ds:SelectObject  +
push [ebp+var_8]  +
call ds:DeleteObject  +
push edi  +
call ds:DeleteDC  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov edi ecx +
mov esi [edi+1Ch] +
mov ecx [esi+0A4h] +
push 13h  +
call sub_1010A90  +
mov ecx [esi+0A4h] +
push 0Eh  +
mov ebx eax +
call sub_1010A90  +
xor ecx ecx +
cmp [ebp+arg_0] 800Ah +
push 1  +
setz cl  +
lea ecx [ecx+ecx-1] +
imul ecx ebx +
add eax ecx +
mov ecx [esi+0A4h] +
push eax  +
push 0Eh  +
call sub_1010BE4  +
cmp dword ptr [edi+24h] 2 +
jnz loc_100A7B6  +
call sub_1004872  +
test eax eax +
jz loc_100A7B6  +
mov ecx [esi+0A4h] +
push 0Eh  +
call sub_1010A90  +
push eax  +
mov [ebp+arg_0] eax +
call sub_1004872  +
mov ecx eax +
call sub_10114E4  +
call sub_1004872  +
mov ecx eax +
call sub_1010D61  +
fild  [ebp+arg_0] +
push ecx  +
mov ecx edi +
fdiv  ds:dbl_1001AB0 +
fstp  [ebp+arg_0] +
fld  [ebp+arg_0] +
fstp  [esp+10h+var_10] +
call sub_100A268  +
mov ecx [edi+18h] +
mov eax [ecx] +
push 1  +
call dword ptr [eax+20h]  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
call __SEH_prolog4  +
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push esi  +
mov esi ecx +
mov eax [esi+0D4h] +
sub eax [esi+0CCh] +
test eax eax +
jle loc_100A94F  +
mov eax [esi+0D8h] +
sub eax [esi+0D0h] +
test eax eax +
jle loc_100A94F  +
fild  dword ptr [esi+0C0h] +
push ebx  +
push edi  +
fdiv  dword ptr [esi+0C8h] +
call _ftol2_sse  +
mov edi eax +
lea eax [esi+0C4h] +
fild  dword ptr [eax] +
add edi [esi+0CCh] +
mov [ebp+var_4] eax +
fdiv  dword ptr [esi+0C8h] +
call _ftol2_sse  +
add eax [esi+0D0h] +
mov ecx esi +
mov [ebp+var_C] eax +
lea eax [ebp+var_20] +
push eax  +
call ds:?GetHWND@NativeHWNDHost@DirectUI@@QAEPAUHWND__@@XZ  +
push eax  +
call ds:GetWindowRect  +
mov eax [ebp+var_18] +
sub eax [ebp+var_20] +
mov ebx [ebp+var_14] +
mov ecx [esi+0D4h] +
sub ebx [ebp+var_1C] +
lea edx [eax+edi] +
cmp ecx edx +
jge loc_100A8FD  +
sub ecx eax +
mov edi ecx +
mov eax edi +
sub eax [esi+0CCh] +
mov [ebp+var_8] eax +
fild  [ebp+var_8] +
fmul  dword ptr [esi+0C8h] +
call _ftol2_sse  +
mov [esi+0C0h] eax +
cmp [esi+0CCh] edi +
jle loc_100A90C  +
and dword ptr [esi+0C0h] 0 +
mov ecx [ebp+var_C] +
mov eax [esi+0D8h] +
add ecx ebx +
cmp eax ecx +
jge loc_100A93C  +
sub eax ebx +
mov [ebp+var_C] eax +
sub eax [esi+0D0h] +
mov [ebp+var_8] eax +
fild  [ebp+var_8] +
fmul  dword ptr [esi+0C8h] +
call _ftol2_sse  +
mov ecx [ebp+var_4] +
mov [ecx] eax +
mov eax [ebp+var_C] +
cmp [esi+0D0h] eax +
pop edi  +
pop ebx  +
jle loc_100A94F  +
mov eax [ebp+var_4] +
and dword ptr [eax] 0 +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push ebx  +
push esi  +
mov esi ecx +
fild  dword ptr [esi+0C0h] +
push edi  +
mov edi [esi+0CCh] +
fdiv  dword ptr [esi+0C8h] +
call _ftol2_sse  +
fild  dword ptr [esi+0C4h] +
mov ebx [esi+0D0h] +
lea eax [eax+edi+8] +
fdiv  dword ptr [esi+0C8h] +
mov [ebp+var_10] eax +
call _ftol2_sse  +
lea eax [eax+ebx+0Ah] +
mov [ebp+Y] eax +
mov eax [esi+0D4h] +
sub eax edi +
test eax eax +
jle loc_100A9CB  +
mov eax [esi+0D8h] +
sub eax ebx +
test eax eax +
jle loc_100A9CB  +
mov eax [esi+0D8h] +
mov edx edi +
mov edi [esi+0D4h] +
mov [ebp+var_4] ebx +
jmp loc_100A9F2  +
mov ebx ds:GetSystemMetrics +
push 4Ch  +
call ebx  +
push 4Eh  +
mov [ebp+var_8] eax +
call ebx  +
mov edi eax +
add edi [ebp+var_8] +
push 4Dh  +
call ebx  +
push 4Fh  +
mov [ebp+var_4] eax +
call ebx  +
add eax [ebp+var_4] +
mov edx [ebp+var_8] +
mov ecx [esi+34h] +
mov ebx [ebp+var_10] +
add ebx ecx +
cmp ebx edi +
jle loc_100AA03  +
sub edi ecx +
mov [ebp+var_10] edi +
cmp [ebp+var_10] edx +
jge loc_100AA0B  +
mov [ebp+var_10] edx +
mov ecx [esi+38h] +
mov edx [ebp+Y] +
add edx ecx +
cmp edx eax +
jle loc_100AA1C  +
sub eax ecx +
mov [ebp+Y] eax +
mov eax [ebp+var_4] +
cmp [ebp+Y] eax +
jge loc_100AA27  +
mov [ebp+Y] eax +
mov edi [ebp+var_10] +
push ecx  +
push ecx  +
mov ecx [ebp+Y] +
mov eax esp +
mov [eax] edi +
mov [eax+4] ecx +
mov ecx [esi+18h] +
lea eax [ebp+var_20] +
push eax  +
call sub_10047E7  +
mov ecx eax +
call sub_1004D28  +
test eax eax +
jnz loc_100AA5F  +
push 15h  +
push eax  +
push eax  +
push [ebp+Y]  +
push edi  +
push eax  +
push dword ptr [esi+28h]  +
call ds:SetWindowPos  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push ebx  +
push esi  +
push edi  +
lea eax [ebp+Rect] +
mov esi ecx +
push eax  +
push dword ptr [esi+28h]  +
call ds:GetWindowRect  +
mov edi [ebp+Rect.left] +
mov ebx [ebp+Rect.top] +
add edi 0FFFFFFF8h +
mov eax edi +
sub eax [esi+0CCh] +
add ebx 0FFFFFFF6h +
mov [ebp+var_4] eax +
fild  [ebp+var_4] +
fmul  dword ptr [esi+0C8h] +
call _ftol2_sse  +
mov [esi+0C0h] eax +
mov eax ebx +
sub eax [esi+0D0h] +
mov [ebp+var_4] eax +
fild  [ebp+var_4] +
fmul  dword ptr [esi+0C8h] +
call _ftol2_sse  +
push 15h  +
mov [esi+0C4h] eax +
xor eax eax +
push eax  +
push eax  +
push ebx  +
push edi  +
push eax  +
mov ecx esi +
call ds:?GetHWND@NativeHWNDHost@DirectUI@@QAEPAUHWND__@@XZ  +
push eax  +
call ds:SetWindowPos  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
push dword ptr [esi+28h]  +
call ds:IsWindowVisible  +
test eax eax +
jz loc_100AB5F  +
push ebx  +
mov ebx [ebp+dwProcessId] +
lea eax [ebp+dwProcessId] +
push eax  +
push ebx  +
call ds:GetWindowThreadProcessId  +
call ds:GetCurrentProcessId  +
cmp [ebp+dwProcessId] eax +
jz loc_100AB5E  +
push edi  +
mov edi ds:GetTickCount +
cmp ebx [esi+0E8h] +
jnz loc_100AB3C  +
call edi  +
sub eax [esi+0ECh] +
cmp eax 3E8h +
jbe loc_100AB5D  +
push 13h  +
xor eax eax +
push eax  +
push eax  +
push eax  +
push eax  +
push 0FFFFFFFFh  +
push dword ptr [esi+28h]  +
call ds:SetWindowPos  +
mov [esi+0E8h] ebx +
call edi  +
mov [esi+0ECh] eax +
pop edi  +
pop ebx  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
imul eax eax +
cmp dword ptr [ecx+0F0h] 0 +
jz loc_100AB85  +
mov eax ds:dword_1001FF4[eax] +
jmp loc_100AB8B  +
mov eax ds:dword_1001FF0[eax] +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ecx+0F0h] 0 +
mov eax [ebp+arg_0] +
jz loc_100ABAB  +
mov eax [ecx+eax*4+70h] +
jmp loc_100ABAF  +
mov eax [ecx+eax*4+3Ch] +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
xor ebx ebx +
push esi  +
mov esi ecx +
cmp [ebp+arg_0] bl +
jz loc_100ABF6  +
cmp [esi+0B0h] ebx +
jnz loc_100AC12  +
push dword ptr [esi+28h]  +
call ds:IsWindowEnabled  +
test eax eax +
jz loc_100AC12  +
push ebx  +
push 64h  +
push 7D4h  +
push dword ptr [esi+28h]  +
call ds:SetTimer  +
mov [esi+0B0h] eax +
jmp loc_100AC12  +
push edi  +
lea edi [esi+0B0h] +
cmp [edi] ebx +
jz loc_100AC11  +
push 7D4h  +
push dword ptr [esi+28h]  +
call ds:KillTimer  +
mov [edi] ebx +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
lea eax [ebp+pt] +
push eax  +
call ds:GetCursorPos  +
lea eax [ebp+rc] +
push eax  +
push [ebp+hWnd]  +
call ds:GetWindowRect  +
push [ebp+pt.y]  +
lea eax [ebp+rc] +
push [ebp+pt.x]  +
push eax  +
call ds:PtInRect  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
push dword ptr [esi+4]  +
mov dword ptr [esi] offset off_100208C +
call GdipDisposeImage  +
test byte ptr [ebp+8] 1 +
jz loc_100AC77  +
push esi  +
call GdipFree  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1009FC8  +
test byte ptr [ebp+8] 1 +
jz loc_100AC9D  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
cmp dword ptr [ecx+0A4h] 0FFh +
push 1  +
jge loc_100ACBF  +
push 1  +
call sub_100A4F3  +
retn   +
call sub_100A417  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1Ch +
push ebx  +
push esi  +
push edi  +
mov esi ecx +
call ds:?GetHWND@NativeHWNDHost@DirectUI@@QAEPAUHWND__@@XZ  +
mov edi 7D3h +
mov ebx eax +
mov [ebp+hWnd] ebx +
cmp [ebp+arg_0] edi +
jz loc_100AE18  +
cmp [ebp+arg_0] 7D1h +
jz loc_100AE18  +
cmp [ebp+arg_0] 7D2h +
jnz loc_100AE85  +
xor ebx ebx +
lea edi [esi+0A4h] +
cmp [esi+0A8h] bl +
jz loc_100ADC5  +
fild  dword ptr [edi] +
fcomp  ds:dbl_1002170 +
fnstsw  ax +
test ah 44h +
jp loc_100AD97  +
mov ecx esi +
call sub_100AA69  +
fild  dword ptr [esi+0C0h] +
fdiv  dword ptr [esi+0C8h] +
call _ftol2_sse  +
fild  dword ptr [esi+0C4h] +
add eax [esi+0CCh] +
fdiv  dword ptr [esi+0C8h] +
mov [ebp+pt.x] eax +
call _ftol2_sse  +
add eax [esi+0D0h] +
mov ecx [esi+18h] +
push eax  +
push [ebp+pt.x]  +
mov [ebp+pt.y] eax +
lea eax [ebp+var_1C] +
push eax  +
call sub_10047E7  +
mov ecx eax +
call sub_1004D28  +
test eax eax +
jnz loc_100AD97  +
push 15h  +
push ebx  +
push ebx  +
push [ebp+pt.y]  +
push [ebp+pt.x]  +
push ebx  +
push [ebp+hWnd]  +
call ds:SetWindowPos  +
add dword ptr [edi] 16h +
mov ecx [edi] +
mov eax 0FFh +
cmp ecx eax +
jl loc_100ADFF  +
push ebx  +
push ebx  +
mov ecx esi +
mov [edi] eax +
call sub_100A4F3  +
push 1  +
mov ecx esi +
call sub_100A417  +
push ebx  +
push dword ptr [esi+28h]  +
call ds:ShowWindow  +
jmp loc_100ADFF  +
cmp dword ptr [edi] 0FFh +
jnz loc_100ADDF  +
mov ecx esi +
call sub_100A957  +
push 4  +
push dword ptr [esi+28h]  +
call ds:ShowWindow  +
add dword ptr [edi] 0FFFFFFEAh +
cmp [edi] ebx +
jg loc_100ADFF  +
mov ecx esi +
call sub_100A957  +
mov ecx esi +
call sub_100AA69  +
push ebx  +
push ebx  +
mov ecx esi +
mov [edi] ebx +
call sub_100A4F3  +
mov ecx esi +
call sub_100A5E3  +
movzx eax byte ptr [edi] +
push 2  +
push eax  +
push ebx  +
push [ebp+hWnd]  +
call ds:SetLayeredWindowAttributes  +
jmp loc_100AE85  +
push ebx  +
call ds:IsIconic  +
test eax eax +
jz loc_100AE30  +
xor ebx ebx +
push ebx  +
mov ecx esi +
call sub_100A417  +
push ebx  +
jmp loc_100AE7E  +
call ds:GetForegroundWindow  +
cmp eax ebx +
jz loc_100AE85  +
push ebx  +
mov ecx esi +
call sub_100AC1D  +
test eax eax +
jnz loc_100AE7C  +
call ds:GetCapture  +
xor ebx ebx +
cmp eax ebx +
jz loc_100AE57  +
cmp eax [ebp+hWnd] +
jz loc_100AE85  +
mov ecx esi +
cmp [ebp+arg_0] edi +
jnz loc_100AE62  +
push 1  +
jmp loc_100AE80  +
push ebx  +
call sub_100A417  +
push ebx  +
mov ecx esi +
call sub_100A487  +
push ebx  +
push 1  +
mov ecx esi +
call sub_100A4F3  +
jmp loc_100AE85  +
push 0  +
mov ecx esi +
call sub_100A487  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebx  +
push esi  +
mov ebx ecx +
push edi  +
mov esi offset dword_1001FF4 +
lea edi [ebx+70h] +
lea eax [edi-34h] +
push eax  +
push dword ptr [esi-4]  +
mov ecx ebx +
call sub_100A55C  +
test eax eax +
jl loc_100AECE  +
push edi  +
push dword ptr [esi]  +
mov ecx ebx +
call sub_100A55C  +
test eax eax +
jl loc_100AECE  +
add esi 0Ch +
add edi 4 +
cmp esi offset off_1002090 +
jl loc_100AEA0  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
mov esi ecx +
xor edx edx +
push edx  +
mov ecx esi +
call sub_100AB69  +
cmp ebx eax +
jz loc_100AEFC  +
inc edx  +
cmp edx 0Dh +
jl loc_100AEE8  +
jmp loc_100AF38  +
push edi  +
push edx  +
call sub_100AB94  +
mov edi eax +
lea eax [ebp+var_18] +
push eax  +
push 18h  +
push edi  +
call ds:GetObjectW  +
mov eax [ebp+var_14] +
push edi  +
push dword ptr [esi+2Ch]  +
mov [esi+34h] eax +
mov eax [ebp+var_10] +
mov [esi+38h] eax +
call ds:SelectObject  +
cmp dword ptr [esi+30h] 0 +
pop edi  +
jnz loc_100AF32  +
mov [esi+30h] eax +
mov [esi+0DCh] ebx +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebx  +
mov ebx ecx +
cmp dword ptr [ebx+24h] 3 +
jnz loc_100AFC8  +
cmp dword_1018584 0 +
jz loc_100AFB6  +
mov al byte_1018588 +
cmp al 4 +
jnb loc_100AF64  +
test al al +
jnz loc_100AFB6  +
mov eax dword_1018570 +
mov ecx dword_1018574 +
push esi  +
mov edx 10000h +
mov esi 80000000h +
and eax edx +
and ecx esi +
or eax ecx +
jz loc_100AFB5  +
mov eax dword_1018578 +
push edi  +
mov edi dword_101857C +
mov ecx eax +
and ecx edx +
mov edx edi +
and edx esi +
cmp ecx eax +
jnz loc_100AFB4  +
cmp edx edi +
jnz loc_100AFB4  +
push offset dword_1001718  +
push dword_101855C  +
push dword_1018558  +
call sub_10036D0  +
pop edi  +
pop esi  +
push 0  +
push 0Fh  +
push 312h  +
push dword ptr [ebx+20h]  +
call ds:PostMessageW  +
pop ebx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and dword ptr [ebp-4] 0 +
push esi  +
lea eax [ebp-4] +
mov esi ecx +
push eax  +
push dword ptr [esi+4]  +
call GdipCloneImage  +
push eax  +
mov ecx esi +
call sub_1004D80  +
push 10h  +
call GdipAlloc  +
test eax eax +
jz loc_100B00F  +
mov ecx [esi+8] +
mov edx [ebp-4] +
mov dword ptr [eax] offset off_100208C +
mov [eax+4] edx +
mov [eax+8] ecx +
jmp loc_100B011  +
xor eax eax +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
xor edx edx +
mov ecx offset dword_1001FF8 +
fld  [ebp+arg_0] +
fld  dword ptr [ecx] +
fcompp st(1) st +
fnstsw  ax +
test ah 41h +
jz loc_100B065  +
add ecx 0Ch +
inc edx  +
cmp ecx offset off_1002094 +
jl loc_100B028  +
push 0Ch  +
mov ecx esi +
call sub_100AB69  +
cmp [esi+0DCh] eax +
jz loc_100B060  +
push eax  +
call sub_100AED7  +
mov ecx esi +
call sub_100A5E3  +
pop esi  +
pop ebp  +
retn 4  +
push edx  +
jmp loc_100B044  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
push edi  +
mov esi ecx +
xor edi edi +
call ds:GetDesktopWindow  +
mov ebx eax +
push ebx  +
call ds:GetDC  +
push eax  +
mov [ebp+hDC] eax +
call ds:CreateCompatibleDC  +
mov [esi+2Ch] eax +
test eax eax +
jz loc_100B0B4  +
mov eax [esi+0F0h] +
neg eax  +
sbb eax eax +
and eax 11h +
add eax 39h +
push eax  +
mov ecx esi +
call sub_100AED7  +
jmp loc_100B0CA  +
call ds:GetLastError  +
test eax eax +
jle loc_100B0C8  +
and eax 0FFFFh +
or eax 80070000h +
mov edi eax +
push [ebp+hDC]  +
push ebx  +
call ds:ReleaseDC  +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
mov esi ecx +
call ds:GetTickCount  +
mov ebx [ebp+arg_0] +
lea ecx [esi+0E0h] +
mov edx eax +
sub edx [ecx] +
cmp edx 7Dh +
ja loc_100B10F  +
cmp [esi+0E4h] ebx +
jz loc_100B203  +
push edi  +
mov edi [esi+1Ch] +
mov [ecx] eax +
mov [esi+0E4h] ebx +
cmp ebx 10h +
ja loc_100B202  +
jmp ds:off_100B20C[ebx*4]  +
push 800Ah  +
mov ecx esi +
call sub_100A716  +
jmp loc_100B1E8  +
push 800Bh  +
jmp loc_100B130  +
cmp dword ptr [esi+24h] 2 +
jnz loc_100B161  +
push [ebp+lParam]  +
push 2  +
push 312h  +
push dword ptr [esi+20h]  +
call ds:PostMessageW  +
jmp loc_100B1E8  +
mov ecx [edi+0A4h] +
push 0Fh  +
call sub_1010A90  +
xor ecx ecx +
test eax eax +
setz cl  +
push 1  +
push ecx  +
mov ecx [edi+0A4h] +
push 0Fh  +
call sub_1010BE4  +
mov ecx [esi+18h] +
mov eax [ecx] +
push 1  +
call dword ptr [eax+20h]  +
jmp loc_100B1E8  +
push 2  +
mov ecx esi +
call sub_100A35C  +
jmp loc_100B1E8  +
push 3  +
jmp loc_100B193  +
push 1  +
jmp loc_100B193  +
mov ecx esi +
call sub_100AF43  +
jmp loc_100B1E8  +
push [ebp+lParam]  +
push ebx  +
jmp loc_100B14E  +
push 0  +
push 7  +
jmp loc_100B14E  +
cmp dword ptr [esi+24h] 2 +
push 0  +
push 0  +
jnz loc_100B1D0  +
push 10h  +
mov ecx esi +
call ds:?GetHWND@NativeHWNDHost@DirectUI@@QAEPAUHWND__@@XZ  +
push eax  +
jmp loc_100B156  +
push 500h  +
push dword ptr [esi+20h]  +
call ds:SendMessageW  +
mov dword ptr [esi+0F4h] 1 +
xor eax eax +
lea ecx [ebp+var_8] +
push ecx  +
inc eax  +
push eax  +
push 1AFDh  +
push 0  +
mov [ebp+var_4] ebx +
mov [ebp+var_8] eax +
call WinSqmAddToStream  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push esi  +
mov esi ecx +
fld  dword ptr [esi+0C8h] +
push ecx  +
fstp  [esp+4+var_4] +
mov dword ptr [esi+0F0h] 1 +
call sub_100B019  +
push 1  +
mov ecx esi +
call sub_100ABB8  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 7D4h +
push esi  +
mov esi ecx +
jnz loc_100B2BF  +
push dword ptr [esi+28h]  +
call sub_100AC1D  +
test eax eax +
jnz loc_100B2BF  +
and [esi+0F0h] eax +
push eax  +
mov ecx esi +
call sub_100ABB8  +
fld  dword ptr [esi+0C8h] +
push ecx  +
mov ecx esi +
fstp  [esp+8+var_8] +
call sub_100B019  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 34h +
push ebx  +
mov ebx ecx +
fld  dword ptr [ebx+0C8h] +
push esi  +
fld  [ebp+arg_0] +
push edi  +
fucompp   +
mov [ebp+var_1] 1 +
fnstsw  ax +
test ah 44h +
jp loc_100B2F0  +
mov [ebp+var_1] 0 +
mov esi ds:IsRectEmpty +
lea edi [ebx+0CCh] +
push edi  +
call esi  +
test eax eax +
jz loc_100B311  +
lea eax [ebp+rc] +
push eax  +
call esi  +
mov [ebp+var_2] 1 +
test eax eax +
jz loc_100B315  +
mov [ebp+var_2] 0 +
fld  dword ptr [ebx+0C8h] +
fld  [ebp+arg_0] +
fucompp   +
fnstsw  ax +
test ah 44h +
jp loc_100B332  +
push edi  +
call esi  +
mov [ebp+var_3] 1 +
test eax eax +
jz loc_100B336  +
mov [ebp+var_3] 0 +
cmp [ebp+var_2] 0 +
fld  [ebp+arg_0] +
lea esi [ebp+rc] +
fstp  dword ptr [ebx+0C8h] +
movs   +
movs   +
movs   +
movs   +
jz loc_100B353  +
mov ecx ebx +
call sub_100A841  +
mov ecx ebx +
call ds:?GetHWND@NativeHWNDHost@DirectUI@@QAEPAUHWND__@@XZ  +
mov esi eax +
push esi  +
mov [ebp+var_C] esi +
call ds:IsIconic  +
test eax eax +
jnz loc_100B4B2  +
call ds:GetCapture  +
cmp esi eax +
jz loc_100B4B2  +
cmp [ebp+var_1] 0 +
jz loc_100B391  +
fld  [ebp+arg_0] +
push ecx  +
mov ecx ebx +
fstp  [esp+34h+var_34] +
call sub_100B019  +
lea eax [ebp+pt] +
push eax  +
call ds:GetPhysicalCursorPos  +
lea eax [ebp+Rect] +
push eax  +
push esi  +
call ds:GetWindowRect  +
push [ebp+pt.y]  +
lea eax [ebp+Rect] +
push [ebp+pt.x]  +
push eax  +
call ds:PtInRect  +
cmp [ebp+var_1] 0 +
mov [ebp+var_8] eax +
jz loc_100B408  +
test eax eax +
jz loc_100B408  +
mov eax [ebp+Rect.left] +
sub eax [ebx+0CCh] +
mov [ebp+arg_0] eax +
fild  [ebp+arg_0] +
fmul  dword ptr [ebx+0C8h] +
call _ftol2_sse  +
mov [ebx+0C0h] eax +
mov eax [ebp+Rect.top] +
sub eax [ebx+0D0h] +
mov [ebp+arg_0] eax +
fild  [ebp+arg_0] +
fmul  dword ptr [ebx+0C8h] +
call _ftol2_sse  +
mov [ebx+0C4h] eax +
jmp loc_100B4B2  +
fild  dword ptr [ebx+0C0h] +
fdiv  [ebp+arg_0] +
call _ftol2_sse  +
fild  dword ptr [ebx+0C4h] +
mov esi eax +
add esi [ebp+rc.left] +
fdiv  [ebp+arg_0] +
call _ftol2_sse  +
mov edi eax +
add edi [ebp+rc.top] +
cmp dword ptr [ebx+0A4h] 0 +
mov byte ptr [ebx+0BCh] 0 +
jz loc_100B474  +
push ecx  +
push ecx  +
mov eax esp +
mov [eax] esi +
mov [eax+4] edi +
mov ecx [ebx+18h] +
lea eax [ebp+var_34] +
push eax  +
call sub_10047E7  +
mov ecx eax +
call sub_1004D28  +
test eax eax +
jnz loc_100B474  +
push 15h  +
push eax  +
push eax  +
push edi  +
push esi  +
push eax  +
mov ecx ebx +
call ds:?GetHWND@NativeHWNDHost@DirectUI@@QAEPAUHWND__@@XZ  +
push eax  +
call ds:SetWindowPos  +
cmp dword ptr [ebx+0A4h] 0FFh +
jz loc_100B489  +
mov ecx ebx +
call sub_100A957  +
jmp loc_100B4AB  +
cmp [ebp+var_3] 0 +
jz loc_100B4AB  +
cmp [ebp+var_8] 0 +
jnz loc_100B4AB  +
call ds:GetForegroundWindow  +
cmp eax [ebp+var_C] +
jz loc_100B4AB  +
push 0  +
push 1  +
mov ecx ebx +
call sub_100A4F3  +
mov byte ptr [ebx+0BCh] 1 +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 14h  +
***
mov edi edi +
push ebx  +
mov ebx ecx +
fld  dword ptr [ebx+0C8h] +
push esi  +
fcomp  ds:dbl_1002188 +
push edi  +
fnstsw  ax +
test ah 1 +
jnz loc_100B563  +
xor esi esi +
push esi  +
call sub_100A417  +
push esi  +
mov ecx ebx +
call sub_100A487  +
push esi  +
push esi  +
mov ecx ebx +
call sub_100A4F3  +
lea eax [ebx+0A4h] +
mov dword ptr [eax] 0FFh +
movzx eax byte ptr [eax] +
push 2  +
push eax  +
push esi  +
mov ecx ebx +
call ds:?GetHWND@NativeHWNDHost@DirectUI@@QAEPAUHWND__@@XZ  +
push eax  +
call ds:SetLayeredWindowAttributes  +
mov ecx ebx +
call sub_100A5E3  +
fld  dword ptr [ebx+0C8h] +
sub esp 10h +
mov edi esp +
lea esi [ebx+0CCh] +
movs   +
movs   +
movs   +
push ecx  +
movs   +
fstp  dword ptr [esp+0] +
mov ecx ebx +
call sub_100B2C9  +
push offset aZoomout  +
call StrToID  +
mov ecx [ebx+1Ch] +
movzx eax ax +
push eax  +
call ds:?FindDescendent@Element@DirectUI@@QAEPAV12@G@Z  +
test eax eax +
jz loc_100B563  +
mov edx [eax] +
mov ecx eax +
pop edi  +
pop esi  +
pop ebx  +
jmp dword ptr [edx+54h]  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+8] +
push edi  +
push 0FFFFFFEBh  +
push esi  +
xor edi edi +
call ds:GetWindowLongW  +
mov edx [ebp+0Ch] +
dec edx  +
mov ecx eax +
jz loc_100B5E2  +
sub edx 1Fh +
jz loc_100B5C6  +
sub edx 0F3h +
jz loc_100B5B8  +
sub edx 0EEh +
jz loc_100B5A9  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
jmp loc_100B5D7  +
test ecx ecx +
jz loc_100B5F0  +
push 1  +
push 1  +
call sub_100A4F3  +
jmp loc_100B5F0  +
test ecx ecx +
jz loc_100B5F0  +
push dword ptr [ebp+10h]  +
call sub_100B283  +
jmp loc_100B5F0  +
test ecx ecx +
jz loc_100B5CF  +
call sub_100B255  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push 20h  +
push esi  +
call ds:DefWindowProcW  +
mov edi eax +
jmp loc_100B5F0  +
mov eax [ebp+14h] +
push dword ptr [eax]  +
push 0FFFFFFEBh  +
push esi  +
call ds:SetWindowLongW  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
mov eax [ebp+14h] +
push ebx  +
push esi  +
xor esi esi +
mov ebx ecx +
mov ecx [ebp+8] +
push edi  +
inc esi  +
xor edi edi +
mov [ebp-4] esi +
mov [eax] edi +
cmp ecx 53h +
ja loc_100B86C  +
jz loc_100B862  +
sub ecx 3 +
jz loc_100B7EA  +
dec ecx  +
dec ecx  +
jz loc_100B714  +
sub ecx 0Bh +
jz loc_100B6B7  +
dec ecx  +
jz loc_100B6B0  +
sub ecx 5 +
jz loc_100B6B7  +
sub ecx 0Ah +
jz loc_100B6A4  +
sub ecx 26h +
jnz loc_100BA8D  +
mov esi [ebp+10h] +
cmp esi edi +
jz loc_100BA8D  +
test byte ptr [esi+18h] 4 +
jnz loc_100B68F  +
mov eax [ebx+1Ch] +
cmp eax edi +
jz loc_100B68F  +
mov eax [eax+0A4h] +
cmp eax edi +
jz loc_100B68F  +
push 4  +
mov ecx eax +
call sub_1010A90  +
cmp eax 3 +
jnz loc_100B68F  +
and dword ptr [esi+18h] 0FFFFFFFBh +
mov eax [ebx+20h] +
mov [esi+4] eax +
cmp [ebx+0FCh] edi +
jz loc_100BA8D  +
or dword ptr [esi+18h] 2 +
jmp loc_100BA8D  +
mov ecx ebx +
call sub_100ACA9  +
jmp loc_100BA8D  +
mov [eax] esi +
jmp loc_100BA64  +
lea esi [ebx+0F4h] +
cmp [esi] edi +
jnz loc_100B6DC  +
push edi  +
push edi  +
push 500h  +
push dword ptr [ebx+20h]  +
call ds:SendMessageW  +
mov dword ptr [esi] 1 +
jmp loc_100BA64  +
mov eax [ebx+1Ch] +
push 1  +
push dword ptr [ebx+0C0h]  +
lea esi [eax+0A4h] +
mov ecx [esi] +
push 16h  +
call sub_1010BE4  +
mov ecx [esi] +
push 1  +
push dword ptr [ebx+0C4h]  +
push 17h  +
call sub_1010BE4  +
mov ecx ebx +
call ds:?DestroyWindow@NativeHWNDHost@DirectUI@@QAEXXZ  +
jmp loc_100BA64  +
mov esi [ebx+1Ch] +
cmp esi edi +
jz loc_100BA8D  +
cmp [ebx+0FCh] edi +
jnz loc_100BA8D  +
cmp dword ptr [ebp+0Ch] 1 +
jnz loc_100B73D  +
mov byte ptr [ebx+0BCh] 0 +
jmp loc_100B7CC  +
cmp [ebp+0Ch] edi +
jnz loc_100B7CC  +
mov byte ptr [ebx+0BCh] 1 +
mov ecx [esi+0A4h] +
push 18h  +
call sub_1010A90  +
test eax eax +
jz loc_100B7CC  +
fld  dword ptr [ebx+0C8h] +
push ecx  +
mov ecx ebx +
fstp  dword ptr [esp] +
call sub_100B019  +
mov ecx ebx +
call sub_100A841  +
mov ecx ebx +
call sub_100B4BE  +
push offset aZoomfactorlabe  +
call StrToID  +
mov ecx [ebx+1Ch] +
movzx eax ax +
push eax  +
call ds:?FindDescendent@Element@DirectUI@@QAEPAV12@G@Z  +
cmp eax edi +
jz loc_100B7C3  +
push offset word_100190C  +
mov ecx eax +
call ds:?SetContentString@Element@DirectUI@@QAEJPBG@Z  +
mov ecx [esi+0A4h] +
push 0Eh  +
call sub_1010AB4  +
fstp  dword ptr [ebp+10h] +
fld  dword ptr [ebp+10h] +
push ecx  +
mov ecx ebx +
fstp  dword ptr [esp] +
call sub_100A268  +
push 1  +
mov ecx ebx +
call sub_100A487  +
mov ecx [esi+0A4h] +
xor eax eax +
cmp dword ptr [ebp+0Ch] 1 +
push 1  +
setz al  +
push eax  +
push 18h  +
call sub_1010BE4  +
jmp loc_100BA8D  +
cmp byte ptr [ebx+0BCh] 0 +
jz loc_100BA8D  +
mov ecx ebx +
call ds:?GetHWND@NativeHWNDHost@DirectUI@@QAEPAUHWND__@@XZ  +
mov esi eax +
push esi  +
call ds:IsIconic  +
test eax eax +
jnz loc_100BA8D  +
lea eax [ebp-14h] +
push eax  +
push esi  +
call ds:GetWindowRect  +
mov eax [ebp-14h] +
sub eax [ebx+0CCh] +
mov [ebp+0Ch] eax +
fild  dword ptr [ebp+0Ch] +
fmul  dword ptr [ebx+0C8h] +
call _ftol2_sse  +
mov esi eax +
mov eax [ebp-10h] +
sub eax [ebx+0D0h] +
mov [ebp+0Ch] eax +
fild  dword ptr [ebp+0Ch] +
fmul  dword ptr [ebx+0C8h] +
call _ftol2_sse  +
mov [ebx+0C0h] esi +
mov [ebx+0C4h] eax +
jmp loc_100BA8D  +
call sub_100A7CC  +
jmp loc_100BA8D  +
sub ecx 86h +
jz loc_100BA79  +
sub ecx 1Eh +
jz loc_100B8F5  +
sub ecx 6Dh +
jz loc_100B909  +
dec ecx  +
jz loc_100B8E2  +
dec ecx  +
jz loc_100B8D3  +
sub ecx 103h +
jz loc_100B8B2  +
sub ecx 0FCh +
jnz loc_100BA8D  +
push dword ptr [ebp+10h]  +
mov ecx ebx +
push dword ptr [ebp+0Ch]  +
call sub_100B0E0  +
jmp loc_100BA8D  +
mov eax [ebp+10h] +
push 15h  +
push edi  +
push edi  +
push dword ptr [eax+4]  +
mov ecx ebx +
push dword ptr [eax]  +
push edi  +
call ds:?GetHWND@NativeHWNDHost@DirectUI@@QAEPAUHWND__@@XZ  +
push eax  +
call ds:SetWindowPos  +
jmp loc_100BA8D  +
push dword ptr [ebp+0Ch]  +
mov ecx ebx +
call sub_100ACCA  +
jmp loc_100BA8D  +
mov eax [ebp+0Ch] +
and eax 0FFF0h +
cmp eax 0F090h +
jnz loc_100BA8D  +
mov ecx ebx +
call ds:?GetHWND@NativeHWNDHost@DirectUI@@QAEPAUHWND__@@XZ  +
push eax  +
call ds:SetForegroundWindow  +
jmp loc_100BA8D  +
movzx ecx word ptr [ebp+0Ch] +
cmp ecx 451h +
jz loc_100BA4B  +
cmp ecx 8009h +
jle loc_100BA8D  +
cmp ecx 800Bh +
jle loc_100BA41  +
cmp ecx 800Dh +
jz loc_100BA02  +
mov eax 800Eh +
cmp ecx eax +
jz loc_100B9EA  +
jle loc_100BA8D  +
cmp ecx 8011h +
jg loc_100BA8D  +
cmp dword_1018584 edi +
jz loc_100B9BF  +
mov al byte_1018588 +
cmp al 4 +
jnb loc_100B971  +
test al al +
jnz loc_100B9BF  +
mov eax dword_1018570 +
mov ecx dword_1018574 +
mov edx 10000h +
mov esi 80000000h +
and eax edx +
and ecx esi +
or eax ecx +
jz loc_100B9BF  +
mov eax dword_1018578 +
mov edi dword_101857C +
mov ecx eax +
and ecx edx +
mov edx edi +
and edx esi +
cmp ecx eax +
jnz loc_100B9BF  +
cmp edx edi +
jnz loc_100B9BF  +
push offset dword_10016F8  +
push dword_101855C  +
push dword_1018558  +
call sub_10036D0  +
movzx eax word ptr [ebp+0Ch] +
sub eax 800Fh +
jz loc_100B9E6  +
dec eax  +
jz loc_100B9E2  +
dec eax  +
jnz loc_100BA8D  +
push 1  +
mov ecx ebx +
call sub_100A35C  +
jmp loc_100BA8D  +
push 2  +
jmp loc_100B9D6  +
***
push 3  +
jmp loc_100B9D6  +
***
mov ecx ebx +
call sub_100AF43  +
push esi  +
push 1731h  +
push edi  +
call WinSqmIncrementDWORD  +
jmp loc_100BA8D  +
mov ecx ebx +
call sub_100B4BE  +
mov eax [ebx+1Ch] +
mov eax [eax+0A4h] +
sub esp 10h +
mov edi esp +
push dword ptr [ebx+24h]  +
lea esi [ebx+0CCh] +
push dword ptr [ebx+18h]  +
movs   +
movs   +
movs   +
push eax  +
mov ecx ebx +
movs   +
call ds:?GetHWND@NativeHWNDHost@DirectUI@@QAEPAUHWND__@@XZ  +
push eax  +
call sub_100D342  +
push 1  +
mov ecx ebx +
call sub_100A417  +
jmp loc_100BA8D  +
push ecx  +
mov ecx ebx +
call sub_100A716  +
jmp loc_100BA8D  +
cmp dword ptr [ebx+24h] 2 +
push edi  +
push edi  +
jnz loc_100BA69  +
push 10h  +
mov ecx ebx +
call ds:?GetHWND@NativeHWNDHost@DirectUI@@QAEPAUHWND__@@XZ  +
push eax  +
call ds:PostMessageW  +
mov [ebp-4] edi +
jmp loc_100BA8D  +
push 500h  +
push dword ptr [ebx+20h]  +
call ds:SendMessageW  +
jmp loc_100BA8D  +
cmp [ebp+0Ch] edi +
jz loc_100BA8D  +
mov ecx ebx +
call sub_100B4BE  +
push esi  +
mov ecx ebx +
call sub_100A487  +
mov eax [ebp-4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 100h +
mov eax dword_101852C +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax hmod +
push ebx  +
push esi  +
push edi  +
xor edi edi +
push 7F89h  +
push edi  +
mov esi ecx +
mov [ebp+var_D0] 80004005h +
mov [ebp+var_100.cbSize] 30h +
mov [ebp+var_100.style] 3 +
mov [ebp+var_100.lpfnWndProc] offset loc_100B56C +
mov [ebp+var_100.cbClsExtra] edi +
mov [ebp+var_100.cbWndExtra] edi +
mov [ebp+var_100.hInstance] eax +
mov [ebp+var_100.hIcon] edi +
call ds:LoadCursorW  +
mov [ebp+var_100.hCursor] eax +
lea eax [ebp+var_100] +
mov ebx offset aMaguiiconclass +
push eax  +
mov [ebp+var_100.hbrBackground] 10h +
mov [ebp+var_100.lpszMenuName] edi +
mov [ebp+var_100.lpszClassName] ebx +
mov [ebp+var_100.hIconSm] edi +
call ds:RegisterClassExW  +
push 64h  +
lea eax [ebp+WindowName] +
push eax  +
push 66h  +
push hmod  +
call ds:LoadStringW  +
push esi  +
push hmod  +
mov ecx esi +
push edi  +
call ds:?GetHWND@NativeHWNDHost@DirectUI@@QAEPAUHWND__@@XZ  +
push eax  +
mov eax [esi+0C4h] +
push edi  +
push edi  +
add eax 0Ah +
push eax  +
mov eax [esi+0C0h] +
add eax 8 +
push eax  +
push 80000000h  +
lea eax [ebp+WindowName] +
push eax  +
push ebx  +
push 8080000h  +
call ds:CreateWindowExW  +
mov [esi+28h] eax +
cmp eax edi +
jz loc_100BBB4  +
mov ecx esi +
call sub_100B06D  +
cmp eax edi +
mov [ebp+var_D0] eax +
jl loc_100BBB4  +
push 1  +
mov ecx esi +
call sub_100A487  +
mov ecx [ebp+var_4] +
mov eax [ebp+var_D0] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_10149A5  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 108h +
mov eax dword_101852C +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_8] +
push ebx  +
push esi  +
mov esi ecx +
mov ecx [ebp+arg_4] +
mov [ebp+hWndInsertAfter] eax +
mov [esi+20h] eax +
xor eax eax +
cmp ecx 2 +
setz al  +
push 64h  +
xor ebx ebx +
mov [esi+24h] ecx +
mov [esi+0F4h] eax +
lea eax [ebp+Buffer] +
push eax  +
push 66h  +
push ebx  +
call ds:GetModuleHandleW  +
push eax  +
call ds:LoadStringW  +
push 5  +
push ebx  +
push 0CA0000h  +
push 80C0008h  +
mov eax 80000000h +
push eax  +
push eax  +
push eax  +
push eax  +
push 1  +
push hmod  +
call ds:LoadIconW  +
push eax  +
push ebx  +
lea eax [ebp+Buffer] +
push eax  +
push offset aMaguiclass_0  +
mov ecx esi +
call ds:?Initialize@NativeHWNDHost@DirectUI@@QAEJPBG0PAUHWND__@@PAUHICON__@@HHHHHHPAUHINSTANCE__@@I@Z  +
cmp eax ebx +
mov [ebp+var_D8] eax +
jl loc_100BEC2  +
mov ecx esi +
call ds:?GetHWND@NativeHWNDHost@DirectUI@@QAEPAUHWND__@@XZ  +
mov [ebp+hWnd] eax +
lea eax [ebp+var_F8] +
push eax  +
push ebx  +
push [ebp+arg_0]  +
lea eax [ebp+var_E0] +
push hmod  +
mov [ebp+var_E0] ebx +
push eax  +
push esi  +
call sub_1010116  +
cmp eax ebx +
mov [ebp+var_D8] eax +
jl loc_100BEC2  +
mov ecx [ebp+var_E0] +
push edi  +
push [ebp+var_F8]  +
call ds:?EndDefer@Element@DirectUI@@QAEXK@Z  +
mov eax [ebp+var_E0] +
lea edi [eax+0A4h] +
mov [esi+1Ch] eax +
mov ecx [edi] +
push 18h  +
call sub_1010A90  +
test eax eax +
lea eax [ebp+Rect] +
push eax  +
push [ebp+hWnd]  +
setnz [ebp+var_CD]  +
mov [ebp+Rect.left] ebx +
mov [ebp+Rect.top] ebx +
mov [ebp+Rect.right] ebx +
mov [ebp+Rect.bottom] ebx +
call ds:GetWindowRect  +
test eax eax +
jz loc_100BD85  +
mov ecx [edi] +
push 16h  +
call sub_1010A90  +
mov ecx [edi] +
push 17h  +
mov [ebp+var_DC] eax +
call sub_1010A90  +
mov edx [ebp+var_DC] +
mov ecx [ebp+Rect.bottom] +
sub ecx [ebp+Rect.top] +
mov edi eax +
mov eax [ebp+Rect.right] +
sub eax [ebp+Rect.left] +
push ebx  +
add eax edx +
mov [ebp+rc.right] eax +
lea eax [ebp+rc] +
add ecx edi +
push eax  +
mov [ebp+rc.left] edx +
mov [ebp+rc.top] edi +
mov [ebp+rc.bottom] ecx +
call ds:MonitorFromRect  +
test eax eax +
jz loc_100BD85  +
mov eax [ebp+var_DC] +
mov [esi+0C0h] eax +
mov [esi+0C4h] edi +
cmp [ebp+arg_4] 3 +
push 1  +
push ebx  +
push ebx  +
push dword ptr [esi+0C4h]  +
push dword ptr [esi+0C0h]  +
jnz loc_100BD9F  +
push 0FFFFFFFFh  +
jmp loc_100BDA5  +
push [ebp+hWndInsertAfter]  +
push [ebp+hWnd]  +
call ds:SetWindowPos  +
mov edi [ebp+hWnd] +
push 2  +
push 0FFh  +
push ebx  +
push edi  +
mov [esi+0BCh] bl +
call ds:SetLayeredWindowAttributes  +
mov ecx esi +
call sub_100AE91  +
cmp eax ebx +
mov [ebp+var_D8] eax +
jl loc_100BEAB  +
mov ecx esi +
call sub_100BA9C  +
cmp eax ebx +
mov [ebp+var_D8] eax +
jl loc_100BEAB  +
push 4  +
lea eax [ebp+hWndInsertAfter] +
push eax  +
push 8  +
push edi  +
mov [ebp+hWndInsertAfter] 1 +
call ds:DwmSetWindowAttribute  +
cmp [ebp+arg_C] bl +
jz loc_100BE4C  +
cmp [ebp+var_CD] bl +
jz loc_100BE37  +
push 6  +
push edi  +
call ds:ShowWindow  +
push 1  +
push 1AC3h  +
push ebx  +
call WinSqmIncrementDWORD  +
jmp loc_100BE4C  +
push 47h  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push edi  +
call ds:SetWindowPos  +
push edi  +
call ds:UpdateWindow  +
xor edi edi +
push dword_1018040[edi]  +
push dword_101803C[edi]  +
push dword_1018038[edi]  +
push [ebp+hWnd]  +
call ds:RegisterHotKey  +
test eax eax +
jnz loc_100BEA0  +
mov eax off_1018000 +
cmp eax offset off_1018000 +
jz loc_100BEA0  +
test byte ptr [eax+1Ch] 4 +
jz loc_100BEA0  +
call ds:GetLastError  +
push eax  +
mov eax off_1018000 +
push offset loc_1001FA8  +
push 0Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10030C6  +
add edi 0Ch +
cmp edi 0CCh +
jb loc_100BE4E  +
cmp [ebp+var_D8] ebx +
mov byte ptr [esi+0BCh] 1 +
pop edi  +
jl loc_100BEC2  +
mov ecx esi +
call sub_100A0B5  +
mov ecx [ebp+var_4] +
mov eax [ebp+var_D8] +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_10149A5  +
leave   +
retn 10h  +
***
mov eax ecx +
xor ecx ecx +
mov [eax] ecx +
mov [eax+4] ecx +
mov [eax+0Ch] ecx +
mov [eax+10h] ecx +
mov [eax+14h] ecx +
mov [eax+18h] ecx +
mov [eax+1Ch] ecx +
mov [eax+20h] ecx +
mov [eax+24h] ecx +
mov [eax+28h] cl +
mov [eax+29h] cl +
mov [eax+2Ah] cl +
mov [eax+2Bh] cl +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
mov eax dword_101852C +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
mov ebx ecx +
mov eax [ebx+4] +
test eax eax +
jz loc_100BF34  +
push eax  +
call ds:DeleteObject  +
and dword ptr [ebx+4] 0 +
mov eax [ebx+18h] +
test eax eax +
jz loc_100BFB8  +
push esi  +
push edi  +
mov esi offset dword_1001650 +
lea edi [ebp+var_14] +
movs   +
movs   +
movs   +
push 1  +
movs   +
mov edi [eax] +
mov esi ds:GetDlgItem +
lea eax [ebp+var_14] +
push eax  +
push 0  +
push 0FFFFFFFCh  +
push 131h  +
push dword ptr [ebx]  +
call esi  +
push eax  +
push dword ptr [ebx+18h]  +
call dword ptr [edi+24h]  +
mov eax [ebx+18h] +
mov edi [eax] +
push 1  +
lea eax [ebp+var_14] +
push eax  +
push 0  +
push 0FFFFFFFCh  +
push 143h  +
push dword ptr [ebx]  +
call esi  +
push eax  +
push dword ptr [ebx+18h]  +
call dword ptr [edi+24h]  +
mov eax [ebx+18h] +
mov edi [eax] +
push 1  +
lea eax [ebp+var_14] +
push eax  +
push 0  +
push 0FFFFFFFCh  +
push 141h  +
push dword ptr [ebx]  +
call esi  +
push eax  +
push dword ptr [ebx+18h]  +
call dword ptr [edi+24h]  +
mov eax [ebx+18h] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
and dword ptr [ebx+18h] 0 +
pop edi  +
pop esi  +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop ebx  +
call sub_10149A5  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_100BF0D  +
test [ebp+arg_0] 1 +
jz loc_100BFE4  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov eax dword_1018674 +
test eax eax +
jz locret_100C004  +
push dword ptr [eax]  +
call ds:DestroyWindow  +
retn   +
***
mov ecx dword_1018674 +
xor eax eax +
test ecx ecx +
jz locret_100C018  +
mov eax [ecx] +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 70h +
push ebx  +
push esi  +
mov esi ds:GetWindowRect +
push edi  +
lea eax [ebp+Rect] +
mov ebx ecx +
push eax  +
push dword ptr [ebx]  +
call esi  +
lea eax [ebp+var_48] +
push eax  +
push dword ptr [ebx+14h]  +
call esi  +
push 9  +
pop ecx  +
xor eax eax +
lea edi [ebp+rcSrc.top] +
stos   +
lea eax [ebp+rcSrc] +
push eax  +
push 2  +
push dword ptr [ebx+14h]  +
mov [ebp+rcSrc.left] 28h +
call ds:MonitorFromWindow  +
push eax  +
call ds:GetMonitorInfoW  +
lea eax [ebp-5Ch] +
push eax  +
lea eax [ebp+X] +
push eax  +
call ds:CopyRect  +
mov eax [ebp+rcSrc1.right] +
sub eax [ebp+rcSrc1.left] +
test eax eax +
jle loc_100C0BC  +
mov eax [ebp+rcSrc1.bottom] +
sub eax [ebp+rcSrc1.top] +
test eax eax +
jle loc_100C0BC  +
xor eax eax +
mov [ebp+var_28] eax +
mov [ebp+var_24] eax +
mov [ebp+var_20] eax +
mov [ebp+var_1C] eax +
lea eax [ebp+X] +
push eax  +
lea eax [ebp+rcSrc1] +
push eax  +
lea eax [ebp+var_28] +
push eax  +
call ds:IntersectRect  +
lea edi [ebp+X] +
lea esi [ebp+var_28] +
test eax eax +
jnz loc_100C0B8  +
lea esi [ebp+rcSrc1] +
movs   +
movs   +
movs   +
movs   +
mov eax [ebp+Rect.bottom] +
sub eax [ebp+Rect.top] +
mov edx [ebp+var_3C] +
mov ecx [ebp+Rect.right] +
sub ecx [ebp+Rect.left] +
mov esi [ebp+var_48] +
lea edi [edx+eax] +
mov [ebp+var_4] edx +
mov edx [ebp-0Ch] +
cmp edi edx +
mov [ebp+var_8] esi +
jle loc_100C0E2  +
sub edx eax +
jmp loc_100C0E5  +
mov edx [ebp+var_4] +
cmp edx [ebp-14h] +
jge loc_100C0ED  +
mov edx [ebp-14h] +
mov eax [ebp-10h] +
add esi ecx +
cmp esi eax +
jle loc_100C0FC  +
sub eax ecx +
mov ecx eax +
jmp loc_100C0FF  +
mov ecx [ebp+var_8] +
cmp ecx [ebp+X] +
jge loc_100C107  +
mov ecx [ebp+X] +
push 5  +
xor eax eax +
push eax  +
push eax  +
push edx  +
push ecx  +
push eax  +
push dword ptr [ebx]  +
call ds:SetWindowPos  +
push dword ptr [ebx]  +
call ds:SetForegroundWindow  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 38h +
push ebx  +
mov ebx ds:GetDlgItem +
push esi  +
push edi  +
xor edi edi +
cmp [ebp+arg_4] edi +
mov esi ecx +
mov [ebp+rcSrc1.left] edi +
mov [ebp+rcSrc1.top] edi +
mov [ebp+rcSrc1.right] edi +
mov [ebp+rcSrc1.bottom] edi +
mov [ebp+var_8] edi +
jle loc_100C19E  +
mov eax [ebp+arg_0] +
mov ecx [ebp+var_8] +
push dword ptr [eax+ecx*4]  +
push dword ptr [esi]  +
call ebx  +
push edi  +
push eax  +
mov [ebp+hWnd] eax +
call ds:EnableWindow  +
push edi  +
push [ebp+hWnd]  +
call ds:ShowWindow  +
lea eax [ebp+rcSrc2] +
push eax  +
push [ebp+hWnd]  +
call ds:GetWindowRect  +
lea eax [ebp+rcSrc2] +
push eax  +
lea eax [ebp+rcSrc1] +
push eax  +
push eax  +
call ds:UnionRect  +
inc [ebp+var_8]  +
mov eax [ebp+var_8] +
cmp eax [ebp+arg_4] +
jl loc_100C155  +
cmp [ebp+arg_C] edi +
mov [ebp+arg_4] edi +
jle loc_100C1F8  +
mov eax [ebp+arg_8] +
mov ecx [ebp+arg_4] +
push dword ptr [eax+ecx*4]  +
push dword ptr [esi]  +
call ebx  +
lea ecx [ebp+Rect] +
push ecx  +
push eax  +
mov [ebp+hWnd] eax +
call ds:GetClientRect  +
push 1  +
lea eax [ebp+Rect] +
push eax  +
push dword ptr [esi]  +
push [ebp+hWnd]  +
call ds:MapWindowPoints  +
mov eax [ebp+rcSrc1.top] +
sub eax [ebp+rcSrc1.bottom] +
push 5  +
add eax [ebp+Rect.top] +
push edi  +
push edi  +
push eax  +
push [ebp+Rect.left]  +
push edi  +
push [ebp+hWnd]  +
call ds:SetWindowPos  +
inc [ebp+arg_4]  +
mov eax [ebp+arg_4] +
cmp eax [ebp+arg_C] +
jl loc_100C1A6  +
lea eax [ebp+Rect] +
push eax  +
push dword ptr [esi]  +
call ds:GetWindowRect  +
mov eax [ebp+Rect.bottom] +
sub eax [ebp+rcSrc1.bottom] +
push 6  +
sub eax [ebp+Rect.top] +
add eax [ebp+rcSrc1.top] +
push eax  +
mov eax [ebp+Rect.right] +
sub eax [ebp+Rect.left] +
push eax  +
push edi  +
push edi  +
push edi  +
push dword ptr [esi]  +
call ds:SetWindowPos  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+hWnd]  +
mov esi [ecx+4] +
call ds:GetDlgCtrlID  +
cmp eax 136h +
jnz loc_100C24C  +
xor esi esi +
push 8  +
call ds:GetSysColor  +
push eax  +
push [ebp+arg_0]  +
call ds:SetTextColor  +
push 1  +
push [ebp+arg_0]  +
call ds:SetBkMode  +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
cmp eax 32h +
jge loc_100C286  +
xor eax eax +
jmp loc_100C298  +
cmp eax 0C8h +
jle loc_100C292  +
push 5  +
pop eax  +
jmp loc_100C298  +
push 32h  +
cdq   +
pop ecx  +
idiv  ecx +
pop ebp  +
retn 4  +
***
push 400h  +
push 131h  +
push dword ptr [ecx]  +
call ds:SendDlgItemMessageW  +
test eax eax +
jnz loc_100C2BF  +
push 19h  +
pop eax  +
retn   +
cmp eax 5 +
jnz loc_100C2CA  +
mov eax 190h +
retn   +
imul eax eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
sub eax 0Ah +
cmp [ebp+arg_0] 0 +
jz loc_100C2EB  +
push 5Ah  +
pop ecx  +
sub ecx eax +
mov eax ecx +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
cmp [ebp+arg_0] al +
push 0  +
setnz al  +
push 0  +
push 400h  +
lea eax [eax+eax+141h] +
push eax  +
push dword ptr [ecx]  +
call ds:SendDlgItemMessageW  +
cmp [ebp+arg_0] 0 +
jz loc_100C327  +
push 5Ah  +
pop ecx  +
sub ecx eax +
mov eax ecx +
add eax 0Ah +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
mov [ebp+var_1] 0 +
call sub_100C2A1  +
mov ecx [esi+1Ch] +
cmp eax ecx +
jz loc_100C35D  +
push 0  +
push ecx  +
mov ecx [esi+8] +
push 13h  +
call sub_1010BE4  +
mov [ebp+var_1] 1 +
push 1  +
mov ecx esi +
call sub_100C2F4  +
mov ecx [esi+24h] +
cmp eax ecx +
jz loc_100C37E  +
push 0  +
push ecx  +
mov ecx [esi+8] +
push 15h  +
call sub_1010BE4  +
mov [ebp+var_1] 1 +
push 0  +
mov ecx esi +
call sub_100C2F4  +
mov ecx [esi+20h] +
cmp eax ecx +
jz loc_100C39F  +
push 0  +
push ecx  +
mov ecx [esi+8] +
push 14h  +
call sub_1010BE4  +
mov [ebp+var_1] 1 +
mov ecx [esi+8] +
push ebx  +
push edi  +
push 4  +
call sub_1010A90  +
mov edi ds:SendDlgItemMessageW +
mov ebx 0F0h +
cmp eax 3 +
jz loc_100C45B  +
push 0  +
push 0  +
push ebx  +
push 13Bh  +
push dword ptr [esi]  +
call edi  +
mov cl [esi+28h] +
dec eax  +
neg eax  +
sbb al al +
inc al  +
cmp al cl +
jz loc_100C3F3  +
xor eax eax +
test cl cl +
mov ecx [esi+8] +
setnz al  +
push 0  +
push eax  +
push 10h  +
call sub_1010BE4  +
mov [ebp+var_1] 1 +
push 0  +
push 0  +
push ebx  +
push 13Ch  +
push dword ptr [esi]  +
call edi  +
mov cl [esi+29h] +
dec eax  +
neg eax  +
sbb al al +
inc al  +
cmp al cl +
jz loc_100C427  +
xor eax eax +
test cl cl +
mov ecx [esi+8] +
setnz al  +
push 0  +
push eax  +
push 11h  +
call sub_1010BE4  +
mov [ebp+var_1] 1 +
push 0  +
push 0  +
push ebx  +
push 13Dh  +
push dword ptr [esi]  +
call edi  +
mov cl [esi+2Ah] +
dec eax  +
neg eax  +
sbb al al +
inc al  +
cmp al cl +
jz loc_100C45B  +
xor eax eax +
test cl cl +
mov ecx [esi+8] +
setnz al  +
push 0  +
push eax  +
push 12h  +
call sub_1010BE4  +
mov [ebp+var_1] 1 +
push 0  +
push 0  +
push ebx  +
push 13Fh  +
push dword ptr [esi]  +
call edi  +
mov cl [esi+2Bh] +
dec eax  +
neg eax  +
sbb al al +
inc al  +
pop edi  +
pop ebx  +
cmp al cl +
jz loc_100C491  +
xor eax eax +
test cl cl +
mov ecx [esi+8] +
setnz al  +
push 0  +
push eax  +
push 0Fh  +
call sub_1010BE4  +
mov [ebp+var_1] 1 +
cmp [ebp+var_1] 0 +
jz loc_100C4F6  +
cmp dword ptr [esi+10h] 2 +
jnz loc_100C4EC  +
call sub_1004872  +
test eax eax +
jz loc_100C4EC  +
movzx eax byte ptr [esi+2Bh] +
push eax  +
call sub_1004872  +
mov ecx eax +
call sub_1010FF3  +
movzx eax byte ptr [esi+28h] +
push eax  +
call sub_1004872  +
mov ecx eax +
call sub_101103A  +
movzx eax byte ptr [esi+29h] +
push eax  +
call sub_1004872  +
mov ecx eax +
call sub_100D493  +
movzx eax byte ptr [esi+2Ah] +
push eax  +
call sub_1004872  +
mov ecx eax +
call sub_10131FF  +
jmp loc_100C4F6  +
mov ecx [esi+0Ch] +
mov eax [ecx] +
push 1  +
call dword ptr [eax+20h]  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
cmp dword ptr [ebp+0Ch] 0 +
jnz loc_100C543  +
push 13Bh  +
push dword ptr [ebp+8]  +
call ds:GetParent  +
push eax  +
call ds:GetDlgItem  +
lea ecx [ebp-10h] +
push ecx  +
push eax  +
call ds:GetWindowRect  +
push 5  +
push 0  +
push 0  +
push dword ptr [ebp-0Ch]  +
push dword ptr [ebp-10h]  +
push 0  +
push dword ptr [ebp+8]  +
call ds:SetWindowPos  +
xor eax eax +
leave   +
retn 14h  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov ecx [esi] +
xor eax eax +
test ecx ecx +
jz loc_100C565  +
push ecx  +
call ds:RegCloseKey  +
and dword ptr [esi] 0 +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+phkResult] 0 +
push esi  +
lea eax [ebp+phkResult] +
push eax  +
push [ebp+samDesired]  +
mov esi ecx +
push 0  +
push [ebp+lpSubKey]  +
push [ebp+hKey]  +
call ds:RegOpenKeyExW  +
test eax eax +
jnz loc_100C59E  +
mov ecx esi +
call sub_100C54E  +
mov ecx [ebp+phkResult] +
mov [esi] ecx +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
lea eax [ebp+cbData] +
push eax  +
push [ebp+lpData]  +
lea eax [ebp+lpData] +
push eax  +
push 0  +
push [ebp+lpValueName]  +
mov [ebp+cbData] 4 +
push dword ptr [ecx]  +
call ds:RegQueryValueExW  +
test eax eax +
jnz locret_100C5DE  +
mov eax [ebp+lpData] +
sub eax 4 +
neg eax  +
sbb eax eax +
and eax 0Dh +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov ebx eax +
mov esi edx +
xor eax eax +
xor edi edi +
test esi esi +
jz loc_100C61C  +
cmp [ebp+arg_4] eax +
jz loc_100C618  +
movzx edx word ptr [ebx] +
test dx dx +
jz loc_100C618  +
mov [ecx] dx +
inc ecx  +
inc ecx  +
inc ebx  +
inc ebx  +
dec esi  +
dec [ebp+arg_4]  +
inc edi  +
test esi esi +
jnz loc_100C5FB  +
test esi esi +
jnz loc_100C624  +
dec ecx  +
dec ecx  +
dec edi  +
mov eax 8007007Ah +
xor edx edx +
mov [ecx] dx +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_100C632  +
mov [ecx] edi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
sub esp 68h +
push ebx  +
push esi  +
mov esi ecx +
shr eax 10h +
xor ecx ecx +
cmp cx ax +
jnz loc_100C86F  +
movzx eax word ptr [ebp+arg_0] +
push edi  +
xor edi edi +
cmp eax edi +
mov [ebp+nIDButton] eax +
jle loc_100C86E  +
cmp eax 2 +
jle loc_100C84C  +
cmp eax 13Ah +
jle loc_100C86E  +
cmp eax 13Dh +
jle loc_100C6E9  +
cmp eax 13Fh +
jnz loc_100C86E  +
push edi  +
push edi  +
push 0F0h  +
push eax  +
push dword ptr [esi]  +
call ds:SendDlgItemMessageW  +
mov ecx [esi+8] +
mov ebx eax +
dec ebx  +
push edi  +
neg ebx  +
push edi  +
sbb bl bl +
pop eax  +
inc bl  +
setnz al  +
push eax  +
push 0Fh  +
call sub_1010BE4  +
cmp dword ptr [esi+10h] 2 +
jnz loc_100C840  +
call sub_1004872  +
test eax eax +
jz loc_100C86E  +
movzx eax bl +
push eax  +
call sub_1004872  +
mov ecx eax +
call sub_1010FF3  +
jmp loc_100C86E  +
push edi  +
push edi  +
mov edi ds:SendDlgItemMessageW +
push 0F0h  +
push 13Bh  +
push dword ptr [esi]  +
call edi  +
push 0  +
push 0  +
mov ebx eax +
dec ebx  +
push 0F0h  +
neg ebx  +
push 13Ch  +
push dword ptr [esi]  +
sbb bl bl +
inc bl  +
call edi  +
push 0  +
dec eax  +
push 0  +
neg eax  +
push 0F0h  +
sbb al al +
push 13Dh  +
push dword ptr [esi]  +
inc al  +
mov [ebp+var_1] al +
call edi  +
dec eax  +
neg eax  +
sbb al al +
inc al  +
test bl bl +
jnz loc_100C7AB  +
cmp [ebp+var_1] bl +
jnz loc_100C7AB  +
test al al +
jnz loc_100C7AB  +
push 5Ch  +
xor ebx ebx +
lea eax [ebp+var_64] +
push ebx  +
push eax  +
call memset  +
mov eax [esi] +
add esp 0Ch +
push ebx  +
mov [ebp+var_64] eax +
mov eax hmod +
push ebx  +
mov [ebp+var_60] eax +
xor edi edi +
push ebx  +
lea eax [ebp+var_68] +
inc edi  +
push eax  +
mov [ebp+var_68] 60h +
mov [ebp+var_58] edi +
mov [ebp+var_54] 14Ah +
mov [ebp+var_4C] 14Bh +
mov [ebp+var_3C] edi +
mov [ebp+var_14] offset loc_100C4FE +
call ds:COMCTL32_345  +
push edi  +
push [ebp+nIDButton]  +
push dword ptr [esi]  +
call ds:CheckDlgButton  +
jmp loc_100C86E  +
mov ecx 13Bh +
cmp cx word ptr [ebp+arg_0] +
jnz loc_100C7BA  +
push 10h  +
jmp loc_100C7D0  +
mov ecx 13Ch +
cmp cx word ptr [ebp+arg_0] +
jnz loc_100C7CC  +
mov bl [ebp+var_1] +
push 11h  +
jmp loc_100C7D0  +
push 12h  +
mov bl al +
mov ecx [esi+8] +
xor eax eax +
test bl bl +
setnz al  +
pop edi  +
push 0  +
push eax  +
push edi  +
call sub_1010BE4  +
cmp dword ptr [esi+10h] 2 +
jnz loc_100C840  +
call sub_1004872  +
test eax eax +
jz loc_100C86E  +
sub edi 10h +
jz loc_100C822  +
dec edi  +
jz loc_100C810  +
dec edi  +
jnz loc_100C832  +
movzx eax bl +
push eax  +
call sub_1004872  +
mov ecx eax +
call sub_10131FF  +
jmp loc_100C832  +
movzx eax bl +
push eax  +
call sub_1004872  +
mov ecx eax +
call sub_100D493  +
jmp loc_100C832  +
movzx eax bl +
push eax  +
call sub_1004872  +
mov ecx eax +
call sub_101103A  +
call sub_1004872  +
mov ecx eax +
call sub_1010D61  +
jmp loc_100C86E  +
mov ecx [esi+0Ch] +
mov eax [ecx] +
push 1  +
call dword ptr [eax+20h]  +
jmp loc_100C86E  +
push 2  +
pop eax  +
cmp ax word ptr [ebp+arg_0] +
jnz loc_100C85E  +
mov ecx esi +
call sub_100C333  +
jmp loc_100C866  +
mov ecx [esi+8] +
call sub_1010B55  +
push dword ptr [esi]  +
call ds:DestroyWindow  +
pop edi  +
pop esi  +
xor eax eax +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push ebx  +
push esi  +
push edi  +
push [ebp+lpString]  +
mov ebx ecx +
push dword ptr [ebx]  +
call ds:GetDlgItem  +
lea ecx [ebp+ppvObject] +
push ecx  +
push offset stru_10021B8  +
push 0FFFFFFFCh  +
push eax  +
call AccessibleObjectFromWindow  +
test eax eax +
jl loc_100C8F3  +
and [ebp+var_C] 0 +
push 3  +
pop eax  +
lea edx [ebp+lpString] +
push edx  +
mov word ptr [ebp+var_14] ax +
mov eax [ebp+ppvObject] +
mov ecx [eax] +
sub esp 10h +
mov edi esp +
lea esi [ebp+var_14] +
movs   +
movs   +
movs   +
push eax  +
movs   +
call dword ptr [ecx+2Ch]  +
test eax eax +
jl loc_100C8EA  +
push [ebp+lpString]  +
push 144h  +
push dword ptr [ebx]  +
call ds:SetDlgItemTextW  +
push [ebp+lpString]  +
call ds:SysFreeString  +
mov eax [ebp+ppvObject] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_4] +
xor eax eax +
test edx edx +
jz loc_100C915  +
cmp edx 7FFFFFFFh +
jbe loc_100C91A  +
mov eax 80070057h +
test eax eax +
jl loc_100C930  +
mov eax [ebp+arg_8] +
mov ecx [ebp+arg_0] +
push 7FFFFFFEh  +
push 0  +
call sub_100C5E7  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_4] +
push ebx  +
xor eax eax +
push edi  +
mov ebx 7FFFFFFFh +
test edx edx +
jz loc_100C952  +
cmp edx ebx +
jbe loc_100C957  +
mov eax 80070057h +
mov edi [ebp+arg_0] +
test eax eax +
jl loc_100C98E  +
and [ebp+arg_4] 0 +
xor ecx ecx +
push esi  +
mov esi edx +
mov eax edi +
cmp edx ecx +
jz loc_100C97B  +
cmp [eax] cx +
jz loc_100C977  +
inc eax  +
inc eax  +
dec esi  +
jnz loc_100C96D  +
cmp esi ecx +
jnz loc_100C984  +
mov [ebp+arg_4] 80070057h +
jmp loc_100C988  +
mov ecx edx +
sub ecx esi +
mov eax [ebp+arg_4] +
pop esi  +
jmp loc_100C990  +
xor ecx ecx +
test eax eax +
jl loc_100C9A4  +
mov eax [ebp+arg_8] +
push ebx  +
sub edx ecx +
push 0  +
lea ecx [edi+ecx*2] +
call sub_100C5E7  +
pop edi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
xor eax eax +
test ecx ecx +
jz loc_100C9C5  +
cmp ecx 7FFFFFFFh +
jbe loc_100C9CA  +
mov eax 80070057h +
test eax eax +
jl loc_100CA07  +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
lea eax [ebp+arg_C] +
push eax  +
push [ebp+arg_8]  +
lea esi [ecx-1] +
push esi  +
push edi  +
xor ebx ebx +
call ds:_vsnwprintf  +
add esp 10h +
test eax eax +
jl loc_100C9F7  +
cmp eax esi +
ja loc_100C9F7  +
jnz loc_100CA02  +
jmp loc_100C9FC  +
mov ebx 8007007Ah +
xor eax eax +
mov [edi+esi*2] ax +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov eax dword_101852C +
xor eax ebp +
mov [ebp+var_4] eax +
and dword ptr [ebp+LCData] 0 +
push ebx  +
mov ebx [ebp+arg_4] +
push esi  +
mov esi ds:GetLocaleInfoW +
push edi  +
push 2  +
lea eax [ebp+LCData] +
push eax  +
push 20000075h  +
mov edi 400h +
push edi  +
call esi  +
push 4  +
lea eax [ebp+var_C] +
push eax  +
push 76h  +
push edi  +
call esi  +
movzx eax [ebp+LCData] +
dec eax  +
jz loc_100CA93  +
dec eax  +
jz loc_100CA8C  +
dec eax  +
jz loc_100CA62  +
mov eax offset aUS +
jmp loc_100CA98  +
mov eax offset aSU +
push [ebp+arg_0]  +
lea ecx [ebp+var_C] +
push ecx  +
push eax  +
push [ebp+arg_8]  +
push ebx  +
call sub_100C9AF  +
mov ecx [ebp+var_4] +
add esp 14h +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_10149A5  +
leave   +
retn 0Ch  +
mov eax offset aSU_0 +
jmp loc_100CA67  +
mov eax offset aUS_0 +
lea ecx [ebp+var_C] +
push ecx  +
push [ebp+arg_0]  +
jmp loc_100CA6E  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 208h +
mov eax dword_101852C +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
push edi  +
mov ebx ecx +
push 131h  +
push dword ptr [ebx]  +
call ds:GetDlgItem  +
lea esi [ebx+18h] +
push esi  +
push offset stru_10021F8  +
push 15h  +
push 0  +
push offset stru_1001640  +
mov [ebp+hWnd] eax +
call ds:CoCreateInstance  +
test eax eax +
jl loc_100CB88  +
push 100h  +
lea eax [ebp+Buffer] +
push eax  +
push 9Dh  +
push hmod  +
call ds:LoadStringW  +
mov eax [esi] +
mov ecx [eax] +
lea edx [ebp+Buffer] +
push edx  +
sub esp 10h +
mov edi esp +
mov esi offset dword_1001650 +
movs   +
movs   +
push 0  +
push 0FFFFFFFCh  +
push [ebp+hWnd]  +
movs   +
push eax  +
movs   +
call dword ptr [ecx+1Ch]  +
test eax eax +
jl loc_100CB88  +
mov esi ds:SendMessageW +
push 50000h  +
push 1  +
push 406h  +
push [ebp+hWnd]  +
call esi  +
mov ecx [ebx+8] +
push 13h  +
call sub_1010A90  +
push eax  +
mov ecx ebx +
mov [ebx+1Ch] eax +
call sub_100C275  +
push eax  +
push 1  +
push 405h  +
push [ebp+hWnd]  +
call esi  +
push 131h  +
mov ecx ebx +
call sub_100C87C  +
jmp loc_100CB96  +
push 0  +
push [ebp+hWnd]  +
call ds:EnableWindow  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_10149A5  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 418h +
mov eax dword_101852C +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_4] +
push edi  +
xor edi edi +
cmp eax edi +
jz loc_100CC90  +
mov eax [eax+8] +
cmp eax 0FFFFFFFEh +
jz loc_100CBDE  +
cmp eax 0FFFFFFFCh +
jnz loc_100CC90  +
movzx eax [ebp+arg_0] +
sub eax 13Ah +
jz loc_100CC3F  +
sub eax 12h +
jnz loc_100CC90  +
lea eax [ebp+ppv] +
push eax  +
push offset stru_10021A8  +
push 17h  +
push edi  +
push offset stru_1002E64  +
mov [ebp+ppv] edi +
call ds:CoCreateInstance  +
test eax eax +
jl loc_100CC2D  +
mov eax [ebp+ppv] +
mov ecx [eax] +
push edi  +
push offset aPageeasiertose  +
push offset aMicrosoft_ease  +
push eax  +
call dword ptr [ecx+0Ch]  +
mov eax [ebp+ppv] +
cmp eax edi +
jz loc_100CC90  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_100CC90  +
push esi  +
mov esi 104h +
push esi  +
lea eax [ebp+Buffer] +
push eax  +
call ds:GetSystemDirectoryW  +
test eax eax +
jbe loc_100CC8F  +
push offset aCttune_exe  +
lea eax [ebp+Buffer] +
push eax  +
push offset aSS  +
lea eax [ebp+File] +
push esi  +
push eax  +
call sub_100C9AF  +
add esp 14h +
test eax eax +
jl loc_100CC8F  +
push 1  +
push edi  +
push edi  +
lea eax [ebp+File] +
push eax  +
push edi  +
push edi  +
call ds:ShellExecuteW  +
pop esi  +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop edi  +
call sub_10149A5  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
push edi  +
mov edi ds:GetDlgItem +
mov esi ecx +
push 143h  +
push dword ptr [esi]  +
call edi  +
cmp [ebp+arg_4] eax +
setz byte ptr [ebp+var_4]  +
cmp byte ptr [ebp+var_4] 0 +
jnz loc_100CD0D  +
push 141h  +
push dword ptr [esi]  +
call edi  +
cmp [ebp+arg_4] eax +
jz loc_100CD0D  +
mov ebx 131h +
push ebx  +
push dword ptr [esi]  +
call edi  +
cmp [ebp+arg_4] eax +
jnz loc_100CD3A  +
push ebx  +
mov ecx esi +
call sub_100C87C  +
mov ecx esi +
call sub_100C2A1  +
mov ecx [esi+8] +
push 0  +
push eax  +
push 13h  +
call sub_1010BE4  +
mov ecx [esi+0Ch] +
mov eax [ecx] +
push 1  +
jmp loc_100CD37  +
push [ebp+var_4]  +
mov ecx esi +
call sub_100C2F4  +
mov ecx [esi+8] +
push 0  +
push eax  +
xor eax eax +
cmp byte ptr [ebp+var_4] al +
setnz al  +
add eax 14h +
push eax  +
call sub_1010BE4  +
mov esi [esi+0Ch] +
mov eax [esi] +
push 0  +
mov ecx esi +
call dword ptr [eax+20h]  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0C4h +
mov eax dword_101852C +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
mov ebx [ebp+arg_4] +
push edi  +
push offset aA0  +
push [ebp+arg_8]  +
push ebx  +
call sub_100C8FF  +
xor edi edi +
test eax eax +
jl loc_100CE08  +
push esi  +
cmp edi 5Ah +
ja loc_100CE07  +
cmp [ebp+arg_0] 0 +
mov esi edi +
jz loc_100CD8F  +
push 5Ah  +
pop esi  +
sub esi edi +
xor eax eax +
push 3Eh  +
push eax  +
mov word ptr [ebp+var_44] ax +
lea eax [ebp+var_44+2] +
push eax  +
call memset  +
add esp 0Ch +
push 20h  +
lea eax [ebp+var_44] +
push eax  +
add esi 0Ah +
push esi  +
call sub_100CA0E  +
test eax eax +
jl loc_100CDFE  +
xor eax eax +
push 7Eh  +
push eax  +
mov [ebp+var_C4] ax +
lea eax [ebp-0C2h] +
push eax  +
call memset  +
lea eax [ebp+var_44] +
push eax  +
push edi  +
push offset aUS_1  +
lea eax [ebp+var_C4] +
push 40h  +
push eax  +
call sub_100C9AF  +
add esp 20h +
test eax eax +
jl loc_100CDFE  +
lea eax [ebp+var_C4] +
push eax  +
push [ebp+arg_8]  +
push ebx  +
call sub_100C939  +
inc edi  +
test eax eax +
jge loc_100CD79  +
pop esi  +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop ebx  +
call sub_10149A5  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax 2008h +
call __alloca_probe  +
mov eax dword_101852C +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
push edi  +
mov ebx ecx +
push 143h  +
push dword ptr [ebx]  +
call ds:GetDlgItem  +
mov esi ds:SendMessageW +
push 5A0000h  +
push 1  +
mov edi eax +
push 406h  +
push edi  +
mov [ebp+var_2008] edi +
call esi  +
mov ecx [ebx+8] +
push 15h  +
call sub_1010A90  +
push eax  +
push 1  +
mov ecx ebx +
mov [ebx+24h] eax +
call sub_100C2D3  +
push eax  +
push 1  +
push 405h  +
push edi  +
call esi  +
push 0  +
push 0Ah  +
push 414h  +
push edi  +
call esi  +
cmp dword ptr [ebx+18h] 0 +
jz loc_100CEE0  +
push 1000h  +
lea eax [ebp+var_2004] +
push eax  +
push 1  +
mov ecx ebx +
call sub_100CD46  +
test eax eax +
jl loc_100CEE0  +
mov eax [ebx+18h] +
mov ecx [eax] +
lea edx [ebp+var_2004] +
push edx  +
sub esp 10h +
mov edi esp +
mov esi offset dword_1001650 +
movs   +
movs   +
push 0  +
push 0FFFFFFFCh  +
push [ebp+var_2008]  +
movs   +
push eax  +
movs   +
call dword ptr [ecx+1Ch]  +
mov esi ds:SendMessageW +
push 141h  +
push dword ptr [ebx]  +
call ds:GetDlgItem  +
push 5A0000h  +
push 1  +
mov edi eax +
push 406h  +
push edi  +
mov [ebp+var_2008] edi +
call esi  +
mov ecx [ebx+8] +
push 14h  +
call sub_1010A90  +
mov [ebx+20h] eax +
add eax 0FFFFFFF6h +
push eax  +
push 1  +
push 405h  +
push edi  +
call esi  +
push 0  +
push 0Ah  +
push 414h  +
push edi  +
call esi  +
cmp dword ptr [ebx+18h] 0 +
jz loc_100CF72  +
push 1000h  +
lea eax [ebp+var_2004] +
push eax  +
push 0  +
mov ecx ebx +
call sub_100CD46  +
test eax eax +
jl loc_100CF72  +
mov ebx [ebx+18h] +
mov eax [ebx] +
lea ecx [ebp+var_2004] +
push ecx  +
sub esp 10h +
mov edi esp +
mov esi offset dword_1001650 +
movs   +
movs   +
push 0  +
push 0FFFFFFFCh  +
push [ebp+var_2008]  +
movs   +
push ebx  +
movs   +
call dword ptr [eax+1Ch]  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_10149A5  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 60h +
push ebx  +
push esi  +
push edi  +
mov edi dword ptr [ebp+Data] +
mov esi ecx +
push 5  +
mov [esi] edi +
call ds:GetSysColor  +
push eax  +
call ds:CreateSolidBrush  +
xor ebx ebx +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push 12Eh  +
mov [esi+4] eax +
push hmod  +
call ds:LoadImageW  +
cmp eax ebx +
jz loc_100CFD8  +
push eax  +
push ebx  +
push 172h  +
push 13Eh  +
push edi  +
call ds:SendDlgItemMessageW  +
mov ecx [esi+8] +
push 0Fh  +
call sub_1010A90  +
mov edi ds:CheckDlgButton +
test eax eax +
setnz al  +
xor ecx ecx +
cmp al bl +
setnz cl  +
mov [esi+2Bh] al +
push ecx  +
push 13Fh  +
push dword ptr [esi]  +
call edi  +
mov ecx esi +
call sub_100CAA6  +
cmp dword ptr [esi+10h] 4 +
jnz loc_100D0B6  +
push 0Fh  +
lea eax [ebp+var_60] +
push eax  +
push 4  +
lea eax [ebp+var_20] +
push eax  +
mov ecx esi +
mov [ebp+var_20] 133h +
mov [ebp+var_1C] 13Dh +
mov [ebp+var_18] 13Ch +
mov [ebp+var_14] 13Bh +
mov [ebp+var_60] 13Ah +
mov [ebp+var_5C] 14Ch +
mov [ebp+var_58] 135h +
mov [ebp+var_54] 13Eh +
mov [ebp+var_50] 147h +
mov [ebp+var_4C] 146h +
mov [ebp+var_48] 142h +
mov [ebp+var_44] 143h +
mov [ebp+var_40] 149h +
mov [ebp+var_3C] 148h +
mov [ebp+var_38] 140h +
mov [ebp+var_34] 141h +
mov [ebp+var_30] 136h +
mov [ebp+var_2C] 1 +
mov [ebp+var_28] 2 +
call sub_100C12C  +
mov ecx esi +
call sub_100CE1D  +
jmp loc_100D218  +
mov ecx [esi+8] +
push 10h  +
call sub_1010A90  +
test eax eax +
setnz al  +
xor ecx ecx +
cmp al bl +
setnz cl  +
mov [esi+28h] al +
push ecx  +
push 13Bh  +
push dword ptr [esi]  +
call edi  +
mov ecx [esi+8] +
push 11h  +
call sub_1010A90  +
test eax eax +
setnz al  +
xor ecx ecx +
cmp al bl +
setnz cl  +
mov [esi+29h] al +
push ecx  +
push 13Ch  +
push dword ptr [esi]  +
call edi  +
mov ecx [esi+8] +
push 12h  +
call sub_1010A90  +
test eax eax +
setnz al  +
xor ecx ecx +
cmp al bl +
setnz cl  +
mov [esi+2Ah] al +
push ecx  +
push 13Dh  +
push dword ptr [esi]  +
call edi  +
push 20019h  +
push offset aSystemSetup  +
push 80000002h  +
lea ecx [ebp+var_10] +
mov dword ptr [ebp+Data] ebx +
mov [ebp+var_10] ebx +
mov [ebp+var_C] ebx +
mov [ebp+var_8] ebx +
call sub_100C56C  +
test eax eax +
jnz loc_100D15E  +
lea eax [ebp+Data] +
push eax  +
push offset aOobeinprogress  +
lea ecx [ebp+var_10] +
call sub_100C5A8  +
test eax eax +
jz loc_100D15E  +
mov dword ptr [ebp+Data] ebx +
push 5  +
pop edi  +
lea eax [ebp+var_4] +
push eax  +
mov [ebp+var_4] edi +
call sub_1003450  +
xor ecx ecx +
inc ecx  +
test eax eax +
jl loc_100D17E  +
cmp [ebp+var_4] ecx +
jnz loc_100D17E  +
cmp dword ptr [ebp+Data] ebx +
jz loc_100D199  +
push 3  +
lea eax [ebp+var_1C] +
push eax  +
mov [ebp+var_54] 13Ah +
mov [ebp+var_50] 14Ch +
push 0Ch  +
lea eax [ebp+var_54] +
jmp loc_100D1B1  +
push edi  +
lea eax [ebp+var_24] +
push eax  +
mov [ebp+var_24] 13Ah +
mov [ebp+var_20] 14Ch +
push 0Ah  +
lea eax [ebp+var_4C] +
mov [ebp+var_18] ecx +
push eax  +
mov ecx esi +
mov [ebp+var_4C] 135h +
mov [ebp+var_48] 13Eh +
mov [ebp+var_44] 147h +
mov [ebp+var_40] 146h +
mov [ebp+var_3C] 142h +
mov [ebp+var_38] 143h +
mov [ebp+var_34] 149h +
mov [ebp+var_30] 148h +
mov [ebp+var_2C] 140h +
mov [ebp+var_28] 141h +
mov [ebp+var_1C] 136h +
mov [ebp+var_14] 2 +
call sub_100C12C  +
lea ecx [ebp+var_10] +
call sub_100C54E  +
push 131h  +
push dword ptr [esi]  +
call ds:GetDlgItem  +
push eax  +
call ds:SetFocus  +
pop edi  +
pop esi  +
xor eax eax +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+hWnd] +
push edi  +
push 8  +
push esi  +
xor edi edi +
call ds:GetWindowLongW  +
mov ecx eax +
mov eax [ebp+arg_4] +
mov edx 111h +
cmp eax edx +
ja loc_100D2ED  +
jz loc_100D2DF  +
dec eax  +
dec eax  +
jz loc_100D2C2  +
sub eax 0Eh +
jz loc_100D2B0  +
sub eax 3Eh +
jz loc_100D298  +
sub eax 0C2h +
jnz loc_100D335  +
push [ebp+dwNewLong]  +
push 8  +
push esi  +
call ds:SetWindowLongW  +
mov ecx [ebp+dwNewLong] +
push esi  +
call sub_100CF86  +
mov edi eax +
jmp loc_100D335  +
cmp ecx edi +
jz loc_100D335  +
push [ebp+dwNewLong]  +
push [ebp+arg_8]  +
call sub_100CBAA  +
jmp loc_100D335  +
cmp ecx edi +
jz loc_100D2B9  +
call sub_100C333  +
push esi  +
call ds:DestroyWindow  +
jmp loc_100D335  +
cmp ecx edi +
jz loc_100D335  +
mov ecx dword_1018674 +
cmp ecx edi +
jz loc_100D2D7  +
push 1  +
call sub_100BFCA  +
mov dword_1018674 edi +
jmp loc_100D335  +
cmp ecx edi +
jz loc_100D335  +
push [ebp+arg_8]  +
call sub_100C63E  +
jmp loc_100D291  +
cmp eax 114h +
jb loc_100D335  +
cmp eax 115h +
jbe loc_100D326  +
cmp eax 136h +
jz loc_100D31D  +
cmp eax 138h +
jnz loc_100D335  +
cmp ecx edi +
jz loc_100D335  +
push [ebp+dwNewLong]  +
push [ebp+arg_8]  +
call sub_100C231  +
jmp loc_100D291  +
cmp ecx edi +
jz loc_100D335  +
mov edi [ecx+4] +
jmp loc_100D335  +
cmp ecx edi +
jz loc_100D335  +
push [ebp+dwNewLong]  +
push [ebp+arg_8]  +
call sub_100CCA4  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
xor ebx ebx +
push esi  +
push edi  +
cmp dword_1018674 ebx +
jnz loc_100D3E5  +
push 2Ch  +
call ??2@YAPAXI@Z  +
pop ecx  +
test eax eax +
jz loc_100D36F  +
mov ecx eax +
call sub_100BEDD  +
mov esi eax +
jmp loc_100D371  +
xor esi esi +
test esi esi +
jz loc_100D3DC  +
mov eax [ebp+arg_0] +
mov [esi+14h] eax +
mov eax [ebp+arg_4] +
push esi  +
mov [esi+8] eax +
mov eax [ebp+arg_8] +
push offset DialogFunc  +
mov [esi+0Ch] eax +
mov eax [ebp+arg_C] +
push 0  +
push 12Dh  +
mov [esi+10h] eax +
push hmod  +
call ds:CreateDialogParamW  +
test eax eax +
jz loc_100D3BB  +
push 5  +
push eax  +
mov dword_1018674 esi +
call ds:ShowWindow  +
jmp loc_100D3E5  +
push 1  +
mov ecx esi +
call sub_100BFCA  +
call ds:GetLastError  +
test eax eax +
jle loc_100D3D8  +
and eax 0FFFFh +
or eax 80070000h +
mov ebx eax +
jmp loc_100D3E1  +
mov ebx 8007000Eh +
test ebx ebx +
jl loc_100D3FC  +
mov ecx dword_1018674 +
sub esp 10h +
mov edi esp +
lea esi [ebp+arg_10] +
movs   +
movs   +
movs   +
movs   +
call sub_100C01E  +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 20h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_10] +
push esi  +
test edx edx +
jz loc_100D43A  +
cmp word ptr [edx] 0 +
jnz loc_100D421  +
push 0Eh  +
jmp loc_100D43C  +
mov eax edx +
lea esi [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_100D426  +
sub eax esi +
sar eax 1 +
lea ecx [eax+eax+2] +
jmp loc_100D43D  +
push 0Ah  +
pop ecx  +
test edx edx +
jz loc_100D44E  +
cmp word ptr [edx] 0 +
jnz loc_100D453  +
mov edx offset aNull +
jmp loc_100D453  +
mov edx offset aNull_0 +
push 0  +
push 4  +
pop eax  +
push eax  +
lea esi [ebp+arg_24] +
push esi  +
push eax  +
lea esi [ebp+arg_20] +
push esi  +
push eax  +
lea esi [ebp+arg_1C] +
push esi  +
push eax  +
lea esi [ebp+arg_18] +
push esi  +
push eax  +
lea eax [ebp+arg_14] +
push eax  +
push ecx  +
push edx  +
push [ebp+arg_8]  +
push [ebp+arg_C]  +
push 2Bh  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call TraceMessage  +
add esp 48h +
pop esi  +
pop ebp  +
retn 28h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov [ecx+8] eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov [ecx] eax +
pop ebp  +
retn 4  +
***
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
mov ebx [ebp+arg_8] +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
sub esp 10h +
mov edi esp +
movs   +
lea eax [ebx+0Ch] +
push eax  +
lea ecx [ebx+8] +
lea edx [ebx+4] +
mov [ebp+arg_8] edx +
mov edx [ebp+arg_0] +
mov edx [edx] +
movs   +
push ecx  +
push [ebp+arg_8]  +
movs   +
push ebx  +
push [ebp+arg_0]  +
mov [ebp+var_8] eax +
mov [ebp+var_4] ecx +
movs   +
call dword ptr [edx+58h]  +
test eax eax +
jge loc_100D52E  +
mov ecx off_1018000 +
cmp ecx offset off_1018000 +
jz loc_100D52A  +
test byte ptr [ecx+1Ch] 4 +
jz loc_100D52A  +
push eax  +
push offset loc_10022C8  +
push 0Ch  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10030C6  +
xor eax eax +
jmp loc_100D542  +
mov ecx [ebx] +
mov eax [ebp+var_4] +
add [eax] ecx +
mov eax [ebp+arg_8] +
mov ecx [eax] +
mov eax [ebp+var_8] +
add [eax] ecx +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov ebx ecx +
inc dword ptr [ebx+444h]  +
mov eax [ebx+444h] +
push 1Eh  +
pop ecx  +
xor edx edx +
div  ecx +
mov esi [ebp+arg_0] +
push 8  +
pop ecx  +
mov eax edx +
shl eax 5 +
lea edi [eax+ebx+84h] +
movs   +
mov eax [ebx+444h] +
add edx 5 +
pop edi  +
shl edx 5 +
pop esi  +
mov [edx+ebx] eax +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov ebx ecx +
mov eax [ebx+444h] +
push 1Eh  +
pop ecx  +
xor edx edx +
div  ecx +
mov edi [ebp+arg_0] +
push 8  +
pop ecx  +
push 8  +
xor eax eax +
shl edx 5 +
lea edx [edx+ebx+84h] +
mov esi edx +
movs   +
pop ecx  +
mov edi edx +
stos   +
mov eax [ebx+444h] +
test eax eax +
jz loc_100D5DF  +
dec eax  +
mov [ebx+444h] eax +
pop edi  +
mov [ebx+444h] eax +
mov eax [ebp+arg_0] +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax+1Ch] +
push ebx  +
mov ebx ecx +
test eax eax +
jbe loc_100D64E  +
push esi  +
dec eax  +
push 1Eh  +
xor edx edx +
pop ecx  +
div  ecx +
lea eax [edx+5] +
shl eax 5 +
mov esi [eax+ebx] +
test esi esi +
jbe loc_100D64D  +
push edi  +
mov eax [ebp+arg_0] +
cmp esi [eax+1Ch] +
jnb loc_100D64C  +
xor eax eax +
shl edx 5 +
push 8  +
pop ecx  +
lea edi [edx+ebx+84h] +
stos   +
lea eax [esi-1] +
cdq   +
push 1Eh  +
pop ecx  +
idiv  ecx +
lea eax [edx+5] +
shl eax 5 +
mov esi [eax+ebx] +
test esi esi +
ja loc_100D61D  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0E4h +
mov eax dword_101852C +
xor eax ebp +
mov [ebp+var_4] eax +
mov ecx [ebp+arg_4] +
mov eax [ebp+hWnd] +
push ebx  +
push esi  +
push edi  +
mov [ebp+var_D4] ecx +
push 64h  +
lea ecx [ebp+String1] +
push ecx  +
push eax  +
mov [ebp+var_D0] eax +
call ds:GetClassNameW  +
mov esi ds:CompareStringW +
or edi 0FFFFFFFFh +
push edi  +
push offset aScreenmagnif_0  +
push edi  +
lea eax [ebp+String1] +
push eax  +
xor ebx ebx +
inc ebx  +
push ebx  +
push 7Fh  +
call esi  +
cmp eax 2 +
jnz loc_100D6BD  +
xor eax eax +
jmp loc_100D782  +
push edi  +
push offset aToolbarwindow3  +
push edi  +
lea eax [ebp+String1] +
push eax  +
push ebx  +
push 7Fh  +
call esi  +
cmp eax 2 +
jz loc_100D780  +
push edi  +
push offset aInternetExplor  +
push edi  +
lea eax [ebp+String1] +
push eax  +
push ebx  +
push 7Fh  +
call esi  +
cmp eax 2 +
jz loc_100D780  +
push edi  +
push offset aStatic  +
push edi  +
lea eax [ebp+String1] +
push eax  +
push ebx  +
push 7Fh  +
call esi  +
cmp eax 2 +
jz loc_100D780  +
lea eax [ebp+pvarg] +
push eax  +
call ds:VariantInit  +
mov eax [ebp+var_D4] +
mov ecx [eax] +
lea edx [ebp+pvarg] +
push edx  +
sub esp 10h +
mov edi esp +
lea esi [ebp+arg_8] +
movs   +
movs   +
movs   +
push eax  +
movs   +
call dword ptr [ecx+38h]  +
test eax eax +
jl loc_100D780  +
test byte ptr [ebp+pvarg.anonymous_0+8] 4 +
jnz loc_100D780  +
mov eax off_1018000 +
cmp eax offset off_1018000 +
jz loc_100D6B6  +
test byte ptr [eax+1Ch] 10h +
jz loc_100D6B6  +
push [ebp+arg_10]  +
push [ebp+var_D0]  +
push offset loc_10022C8  +
push 0Dh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1004DE7  +
jmp loc_100D6B6  +
mov eax ebx +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_10149A5  +
leave   +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 50h +
push ebx  +
push esi  +
push edi  +
lea eax [ebp+hwnd] +
push eax  +
xor esi esi +
push esi  +
mov [ebp+hwnd] 30h +
call ds:GetGUIThreadInfo  +
mov eax [ebp-34h] +
mov ebx [ebp+ppvObject] +
mov [ebx] esi +
cmp eax esi +
jnz loc_100D7CE  +
mov eax [ebp-44h] +
cmp eax esi +
jz loc_100D870  +
push 3  +
pop ecx  +
mov word ptr [ebp+var_20] cx +
lea ecx [ebp+ppvObject] +
push ecx  +
push offset stru_1001630  +
push 0FFFFFFF8h  +
push eax  +
mov [ebp+ppvObject] esi +
mov [ebp+var_18] esi +
call AccessibleObjectFromWindow  +
test eax eax +
jl loc_100D842  +
mov eax [ebp+ppvObject] +
mov ecx [eax] +
sub esp 10h +
mov edi esp +
lea esi [ebp+var_20] +
movs   +
lea edx [ebp+var_4] +
push edx  +
lea edx [ebp+var_8] +
push edx  +
movs   +
lea edx [ebp+var_C] +
push edx  +
lea edx [ebp+var_10] +
movs   +
push edx  +
push eax  +
movs   +
call dword ptr [ecx+58h]  +
mov esi eax +
mov eax [ebp+ppvObject] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
test esi esi +
jl loc_100D842  +
mov eax [ebp+var_10] +
add [ebp+var_8] eax +
mov eax [ebp+var_C] +
add [ebp+var_4] eax +
mov edi [ebp+lpPoints] +
mov dword ptr [ebx] 1 +
lea esi [ebp+var_10] +
movs   +
movs   +
movs   +
movs   +
jmp loc_100D870  +
mov eax [ebp-4Ch] +
and al 1 +
xor ecx ecx +
cmp al 1 +
setz cl  +
mov eax ecx +
mov [ebx] eax +
test eax eax +
jz loc_100D870  +
mov edi [ebp+lpPoints] +
lea esi [ebp-30h] +
movs   +
movs   +
push 2  +
push [ebp+lpPoints]  +
movs   +
push 0  +
push dword ptr [ebp-34h]  +
movs   +
call ds:MapWindowPoints  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
xor ebx ebx +
push esi  +
push edi  +
cmp [ebp+nCode] ebx +
jnz loc_100D988  +
mov esi dword_1018678 +
cmp esi ebx +
jz loc_100D988  +
mov edi 201h +
cmp [ebp+arg_4] edi +
jz loc_100D961  +
cmp [ebp+arg_4] 202h +
jz loc_100D961  +
mov edi ds:GetTickCount +
call edi  +
sub eax [esi+14h] +
cmp eax 0Ah +
jle loc_100D988  +
mov eax [ebp+arg_8] +
mov ebx 1000h +
cmp [eax+14h] ebx +
jnz loc_100D917  +
cmp dword ptr [esi+4Ch] 0 +
jnz loc_100D8EE  +
mov eax [esi+40h] +
cmp eax 0Ch +
jz loc_100D8EE  +
cmp eax 0Bh +
jnz loc_100D917  +
mov eax off_1018000 +
cmp eax offset off_1018000 +
jz loc_100D912  +
test byte ptr [eax+1Ch] 10h +
jz loc_100D912  +
push offset loc_10022C8  +
push 1Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10030A0  +
call edi  +
mov [esi+14h] eax +
mov eax [ebp+arg_8] +
cmp [eax+14h] ebx +
jz loc_100D988  +
call edi  +
cmp [ebp+arg_4] 200h +
mov [esi+14h] eax +
jnz loc_100D988  +
lea eax [ebp+wParam] +
xor edi edi +
push eax  +
mov [ebp+wParam] edi +
mov [ebp+lParam] edi +
call ds:GetPhysicalCursorPos  +
push [ebp+lParam]  +
push [ebp+wParam]  +
cmp [esi+8] edi +
jz loc_100D95A  +
push 600h  +
push dword ptr [esi+48h]  +
call ds:PostMessageW  +
jmp loc_100D988  +
push 601h  +
jmp loc_100D94F  +
push [ebp+arg_8]  +
mov ecx [esi+50h] +
push [ebp+arg_4]  +
mov eax [ecx] +
call dword ptr [eax+8]  +
test eax eax +
jz loc_100D976  +
xor ebx ebx +
inc ebx  +
cmp [ebp+arg_4] edi +
jnz loc_100D984  +
call ds:GetTickCount  +
mov [esi+18h] eax +
test ebx ebx +
jnz loc_100D99F  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+nCode]  +
push hhk  +
call ds:CallNextHookEx  +
mov ebx eax +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx dword_1018680 +
test ecx ecx +
jz loc_100D9C2  +
mov eax [ecx] +
pop ebp  +
jmp dword ptr [eax+8]  +
pop ebp  +
retn 1Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
push 0  +
mov esi ecx +
push offset aFocustrackerFo  +
lea ecx [ebp+var_8] +
call sub_1002FF5  +
push 0Bh  +
add esi 54h +
pop ebx  +
mov eax [esi] +
test eax eax +
jz loc_100D9FB  +
push eax  +
call ds:UnhookWinEvent  +
and dword ptr [esi] 0 +
add esi 4 +
dec ebx  +
jnz loc_100D9EB  +
and dword_1018678 ebx +
mov eax hhk +
pop esi  +
pop ebx  +
test eax eax +
jz loc_100DA20  +
push eax  +
call ds:UnhookWindowsHookEx  +
and hhk 0 +
lea ecx [ebp+var_8] +
call sub_1003039  +
mov ecx dword_1018680 +
test ecx ecx +
jz locret_100DA38  +
mov eax [ecx] +
push 1  +
call dword ptr [eax]  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
push edi  +
xor edi edi +
push edi  +
mov esi ecx +
push offset aFocustrackerIn  +
lea ecx [ebp+var_8] +
call sub_1002FF5  +
mov eax [ebp+arg_4] +
mov [esi+8] eax +
mov eax [ebp+arg_8] +
mov [esi+4] eax +
mov eax [ebp+arg_C] +
mov [esi] eax +
mov eax [ebp+arg_10] +
mov [esi+50h] eax +
mov eax [ebp+arg_0] +
mov [esi+48h] eax +
lea ebx [esi+54h] +
mov eax dword_1018104[edi] +
xor ecx ecx +
push ecx  +
push ecx  +
push ecx  +
push offset pfnWinEventProc  +
push ecx  +
push eax  +
push eax  +
call ds:SetWinEventHook  +
mov [ebx] eax +
test eax eax +
jnz loc_100DAD0  +
mov eax off_1018000 +
cmp eax offset off_1018000 +
jz loc_100DAD0  +
test byte ptr [eax+1Ch] 4 +
jz loc_100DAD0  +
call ds:GetLastError  +
push eax  +
push dword_1018104[edi]  +
mov eax off_1018000 +
push offset loc_10022C8  +
push 0Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1004DE7  +
add edi 4 +
add ebx 4 +
cmp edi 2Ch +
jb loc_100DA7B  +
push 0  +
push 0  +
push offset sub_100D87C  +
push 0Eh  +
call ds:SetWindowsHookExW  +
mov hhk eax +
test eax eax +
jnz loc_100DB25  +
mov eax off_1018000 +
cmp eax offset off_1018000 +
jz loc_100DB25  +
test byte ptr [eax+1Ch] 4 +
jz loc_100DB25  +
call ds:GetLastError  +
push eax  +
mov eax off_1018000 +
push offset loc_10022C8  +
push 0Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10030C6  +
call ds:GetTickCount  +
lea ecx [ebp+var_8] +
mov [esi+14h] eax +
mov [esi+18h] eax +
call sub_1003039  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 148h +
mov eax dword_101852C +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_C] +
push ebx  +
mov ebx [ebp+hWnd] +
push esi  +
xor esi esi +
mov dword ptr [eax] 0Ah +
push edi  +
mov [ebp+var_128] ecx +
mov [ebp+var_124] eax +
cmp [ecx+4] esi +
jnz loc_100DB84  +
xor eax eax +
inc eax  +
jmp loc_100DE5E  +
lea eax [ebp+dwProcessId] +
push eax  +
push ebx  +
mov [ebp+dwProcessId] esi +
call ds:GetWindowThreadProcessId  +
call ds:GetCurrentProcessId  +
cmp [ebp+dwProcessId] eax +
jnz loc_100DBEC  +
xor eax eax +
mov [ebp+psz2] ax +
push 80h  +
lea eax [ebp+psz2] +
push eax  +
push ebx  +
call ds:RealGetWindowClassW  +
mov edi ds:StrCmpW +
lea eax [ebp+psz2] +
push eax  +
push offset psz1  +
call edi  +
test eax eax +
jz loc_100DB7C  +
lea eax [ebp+psz2] +
push eax  +
push offset aMaguiiconcla_0  +
call edi  +
test eax eax +
jz loc_100DB7C  +
lea eax [ebp+pvarChild] +
push eax  +
lea eax [ebp+ppacc] +
push eax  +
push [ebp+dwChildId]  +
mov [ebp+ppacc] esi +
push [ebp+dwId]  +
mov [ebp+var_10C] 1 +
push ebx  +
call AccessibleObjectFromEvent  +
cmp eax esi +
jl loc_100DE2B  +
mov [ebp+rc.left] esi +
mov [ebp+rc.top] esi +
mov [ebp+rc.right] esi +
mov [ebp+rc.bottom] esi +
sub esp 10h +
mov edi esp +
push [ebp+ppacc]  +
lea esi [ebp+pvarChild] +
movs   +
movs   +
movs   +
push ebx  +
mov ebx [ebp+var_128] +
mov ecx ebx +
movs   +
call sub_100D658  +
test eax eax +
jz loc_100DDEE  +
lea eax [ebp+rc] +
push eax  +
lea eax [ebp+pvarChild] +
push eax  +
push [ebp+ppacc]  +
mov ecx ebx +
call sub_100D4C3  +
test eax eax +
jz loc_100DDEE  +
lea eax [ebp+rc] +
push eax  +
call ds:IsRectEmpty  +
test eax eax +
jnz loc_100DDEE  +
cmp dword_1018584 eax +
jz loc_100DCFC  +
mov al byte_1018588 +
cmp al 4 +
jnb loc_100DCAE  +
test al al +
jnz loc_100DCFC  +
mov eax dword_1018570 +
mov ecx dword_1018574 +
mov edx 10000h +
mov esi 80000000h +
and eax edx +
and ecx esi +
or eax ecx +
jz loc_100DCFC  +
mov eax dword_1018578 +
mov edi dword_101857C +
mov ecx eax +
and ecx edx +
mov edx edi +
and edx esi +
cmp ecx eax +
jnz loc_100DCFC  +
cmp edx edi +
jnz loc_100DCFC  +
push offset dword_10016D8  +
push dword_101855C  +
push dword_1018558  +
call sub_10036D0  +
lea edx [ebp+pvarg] +
push edx  +
sub esp 10h +
mov edi esp +
lea esi [ebp+pvarChild] +
movs   +
movs   +
xor eax eax +
mov word ptr [ebp+pvarg.anonymous_0] ax +
mov eax [ebp+ppacc] +
mov ecx [eax] +
movs   +
push eax  +
movs   +
call dword ptr [ecx+34h]  +
test eax eax +
jl loc_100DD46  +
cmp word ptr [ebp+pvarg.anonymous_0] 3 +
jnz loc_100DD46  +
mov eax dword ptr [ebp+pvarg.anonymous_0+8] +
mov ecx [ebp+var_124] +
mov [ecx] eax +
mov [ebx+40h] eax +
lea eax [ebp+pvarg] +
push eax  +
call ds:VariantClear  +
push 0FCh  +
lea eax [ebp+var_100] +
push 0  +
push eax  +
mov dword ptr [ebp+psz2] 20h +
call memset  +
add esp 0Ch +
mov eax off_1018000 +
cmp eax offset off_1018000 +
jz loc_100DDCC  +
test byte ptr [eax+1Ch] 10h +
jz loc_100DDCC  +
mov ecx [ebp+rc.bottom] +
sub ecx [ebp+rc.top] +
push ecx  +
mov ecx [ebp+rc.right] +
sub ecx [ebp+rc.left] +
push ecx  +
push [ebp+rc.top]  +
mov ecx [ebp+var_124] +
push [ebp+rc.left]  +
push dword ptr [ecx]  +
lea ecx [ebp+psz2] +
push ecx  +
push offset loc_10022C8  +
push 0Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100D40A  +
cmp dword ptr [ebx+3Ch] 0 +
lea edi [ebx+1Ch] +
lea esi [ebp+rc] +
movs   +
movs   +
movs   +
movs   +
jnz loc_100DE19  +
lea edi [ebx+2Ch] +
lea esi [ebp+rc] +
movs   +
movs   +
movs   +
movs   +
jmp loc_100DE19  +
mov eax off_1018000 +
cmp eax offset off_1018000 +
jz loc_100DE12  +
test byte ptr [eax+1Ch] 10h +
jz loc_100DE12  +
push offset loc_10022C8  +
push 0Fh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10030A0  +
and [ebp+var_10C] 0 +
mov eax [ebp+ppacc] +
test eax eax +
jz loc_100DE58  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_100DE58  +
mov ecx off_1018000 +
cmp ecx offset off_1018000 +
jz loc_100DE52  +
test byte ptr [ecx+1Ch] 4 +
jz loc_100DE52  +
push eax  +
push offset loc_10022C8  +
push 10h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10030C6  +
mov [ebp+var_10C] esi +
mov eax [ebp+var_10C] +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_10149A5  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_C] +
sub esp 7Ch +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
push edi  +
cmp eax [ebx+44h] +
jnz loc_100E0A8  +
call ds:GetTickCount  +
mov esi eax +
call ds:GetDoubleClickTime  +
sub esi [ebx+18h] +
cmp esi eax +
ja loc_100DED4  +
mov eax off_1018000 +
cmp eax offset off_1018000 +
jz loc_100E0A8  +
test byte ptr [eax+1Ch] 10h +
jz loc_100E0A8  +
push offset loc_10022C8  +
push 1Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10030A0  +
jmp loc_100E0A8  +
lea eax [ebp+var_5C] +
push eax  +
mov ecx ebx +
call sub_100D59A  +
mov eax [ebp+var_44] +
xor ecx ecx +
mov [ebp+var_4] eax +
mov [ebp+arg_C] ecx +
mov eax [ebp+var_44] +
cmp [ebp+var_4] eax +
jnz loc_100E0A8  +
mov edx [ebx+444h] +
mov [ebp+var_C] edx +
cmp [ebp+var_58] ecx +
jnz loc_100DF11  +
cmp [ebp+var_48] ecx +
jnz loc_100DF11  +
cmp eax ecx +
jz loc_100E098  +
cmp [ebp+var_58] 800Bh +
lea esi [ebx+1Ch] +
lea edi [ebp+rc2] +
movs   +
movs   +
movs   +
mov dword ptr [ebx+40h] 0Ah +
movs   +
jnz loc_100DFD2  +
cmp [ebp+dwId] 0FFFFFFF8h +
jnz loc_100DFD2  +
mov eax off_1018000 +
cmp eax offset off_1018000 +
jz loc_100DF67  +
test byte ptr [eax+1Ch] 10h +
jz loc_100DF67  +
push [ebp+dwChildId]  +
push 0FFFFFFF8h  +
push [ebp+hWnd]  +
push offset loc_10022C8  +
push 1Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1004E19  +
xor ecx ecx +
lea eax [ebp+ppvObject] +
push eax  +
lea eax [ebp+Points] +
mov [ebp+Points.x] ecx +
mov [ebp+Points.y] ecx +
mov [ebp+var_14] ecx +
mov [ebp+var_10] ecx +
push eax  +
mov ecx ebx +
call sub_100D798  +
xor eax eax +
cmp [ebp+ppvObject] eax +
jz loc_100E016  +
mov edx [ebp+var_14] +
sub edx [ebp+Points.x] +
xor ecx ecx +
inc ecx  +
cmp edx ecx +
jnz loc_100DFBC  +
mov edx [ebp+var_10] +
sub edx [ebp+Points.y] +
cmp edx ecx +
jnz loc_100DFBC  +
mov [ebp+var_2C] eax +
mov [ebp+var_28] eax +
mov [ebp+var_24] eax +
mov [ebp+var_20] eax +
lea esi [ebp+var_2C] +
lea edi [ebx+1Ch] +
movs   +
movs   +
movs   +
movs   +
jmp loc_100E016  +
lea esi [ebp+Points] +
lea edi [ebx+1Ch] +
movs   +
movs   +
movs   +
movs   +
mov [ebp+arg_0] 7 +
mov [ebp+arg_C] ecx +
jmp loc_100E016  +
mov eax off_1018000 +
cmp eax offset off_1018000 +
jz loc_100DFFF  +
test byte ptr [eax+1Ch] 10h +
jz loc_100DFFF  +
push [ebp+dwChildId]  +
push [ebp+dwId]  +
push [ebp+hWnd]  +
push offset loc_10022C8  +
push 1Dh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1004E19  +
lea eax [ebp+arg_0] +
push eax  +
push [ebp+dwChildId]  +
mov ecx ebx +
push [ebp+dwId]  +
push [ebp+hWnd]  +
call sub_100DB45  +
mov [ebp+arg_C] eax +
lea eax [ebx+1Ch] +
push eax  +
call ds:IsRectEmpty  +
test eax eax +
jnz loc_100E06B  +
lea eax [ebp+rc2] +
lea esi [ebx+1Ch] +
push eax  +
mov ecx esi +
call sub_1008421  +
test eax eax +
jz loc_100E06B  +
cmp dword ptr [ebx+4Ch] 0 +
jz loc_100E049  +
cmp [ebp+arg_0] 24h +
jnz loc_100E049  +
mov [ebp+arg_0] 0Ch +
push [ebp+hWnd]  +
mov ecx [ebx+50h] +
push [ebp+arg_0]  +
mov eax [ecx] +
sub esp 10h +
mov edi esp +
movs   +
movs   +
movs   +
movs   +
call dword ptr [eax+4]  +
lea eax [ebp+var_5C] +
push eax  +
mov ecx ebx +
call sub_100D5F4  +
cmp [ebp+arg_C] 0 +
jnz loc_100E0A8  +
mov eax [ebp+var_C] +
cmp eax [ebx+444h] +
jnz loc_100E0A8  +
lea eax [ebp+var_7C] +
push eax  +
mov ecx ebx +
call sub_100D59A  +
push 8  +
pop ecx  +
mov esi eax +
lea edi [ebp+var_5C] +
movs   +
xor ecx ecx +
jmp loc_100DEEA  +
push dword ptr [ebx+44h]  +
push dword ptr [ebx+48h]  +
call ds:KillTimer  +
and dword ptr [ebx+44h] 0 +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push dword_1018678  +
call sub_100DE74  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 164h +
mov eax dword_101852C +
xor eax ebp +
mov [ebp-4] eax +
push ebx  +
push esi  +
mov esi [ebp+0Ch] +
push edi  +
mov edi [ebp+10h] +
mov ebx ecx +
mov [ebp-108h] edi +
cmp esi 3 +
jnz loc_100E225  +
push 0FFFFFFECh  +
push edi  +
call ds:GetWindowLongW  +
test al 8 +
jz loc_100E11E  +
mov ecx [ebx+50h] +
mov eax [ecx] +
push edi  +
call dword ptr [eax+0Ch]  +
xor eax eax +
push 0FEh  +
push eax  +
mov [ebp-104h] ax +
lea eax [ebp-102h] +
push eax  +
call memset  +
add esp 0Ch +
mov esi 80h +
push esi  +
lea eax [ebp-104h] +
push eax  +
push edi  +
call ds:GetClassNameW  +
mov edi ds:CompareStringW +
push 0FFFFFFFFh  +
push offset aDv2controlhost  +
push esi  +
lea eax [ebp-104h] +
push eax  +
push 0  +
push 7Fh  +
call edi  +
cmp eax 2 +
jnz loc_100E1FE  +
lea eax [ebp-124h] +
push eax  +
push dword ptr [ebp-108h]  +
call ds:GetWindowRect  +
lea eax [ebp-15Ch] +
push eax  +
push 2  +
lea eax [ebp-124h] +
push eax  +
mov dword ptr [ebp-15Ch] 28h +
call ds:MonitorFromRect  +
push eax  +
call ds:GetMonitorInfoW  +
mov eax [ebp-124h] +
cmp eax [ebp-158h] +
jz loc_100E1CE  +
mov eax [ebp-11Ch] +
cmp eax [ebp-150h] +
jnz loc_100E6CA  +
mov eax off_1018000 +
cmp eax offset off_1018000 +
jz loc_100E1F2  +
test byte ptr [eax+1Ch] 10h +
jz loc_100E1F2  +
push offset loc_10022C8  +
push 11h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10030A0  +
mov dword ptr [ebx+4Ch] 1 +
jmp loc_100E6CA  +
push 0FFFFFFFFh  +
push offset aMaguiiconcla_1  +
push esi  +
lea eax [ebp-104h] +
push eax  +
push 0  +
push 7Fh  +
call edi  +
cmp eax 2 +
jz loc_100E6CA  +
and dword ptr [ebx+4Ch] 0 +
jmp loc_100E6CA  +
cmp esi 20h +
jnz loc_100E241  +
push 0  +
push 0  +
push 602h  +
push dword ptr [ebx+48h]  +
call ds:PostMessageW  +
jmp loc_100E6CA  +
mov eax 800Bh +
cmp esi eax +
jnz loc_100E258  +
cmp dword ptr [ebp+14h] 0FFFFFFF8h +
jnz loc_100E258  +
xor edi edi +
inc edi  +
cmp dword ptr [ebx] 0 +
jmp loc_100E265  +
xor edi edi +
cmp [ebx+4] edi +
jz loc_100E6CA  +
cmp esi eax +
jz loc_100E6CA  +
cmp dword ptr [ebx+8] 0 +
jz loc_100E2BE  +
call ds:GetTickCount  +
sub eax [ebx+14h] +
cmp eax 0FAh +
jge loc_100E2BE  +
mov eax off_1018000 +
cmp eax offset off_1018000 +
jz loc_100E6CA  +
test byte ptr [eax+1Ch] 10h +
jz loc_100E6CA  +
push dword ptr [ebp+18h]  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp-108h]  +
push offset loc_10022C8  +
push 12h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1004E19  +
jmp loc_100E6CA  +
cmp esi 8005h +
jz loc_100E635  +
test edi edi +
jnz loc_100E635  +
and [ebp-10Ch] edi +
lea eax [ebp-134h] +
push eax  +
mov dword ptr [ebp-110h] 80004005h +
call ds:SetRectEmpty  +
mov eax esi +
sub eax 4 +
jz loc_100E5B4  +
dec eax  +
jz loc_100E31F  +
dec eax  +
jz loc_100E50F  +
dec eax  +
dec eax  +
jz loc_100E3FD  +
dec eax  +
jz loc_100E363  +
sub eax 0Bh +
jz loc_100E5B4  +
dec eax  +
jnz loc_100E5DF  +
cmp dword ptr [ebx+3Ch] 0 +
jz loc_100E5DF  +
mov eax off_1018000 +
cmp eax offset off_1018000 +
jz loc_100E34D  +
test byte ptr [eax+1Ch] 10h +
jz loc_100E34D  +
push offset loc_10022C8  +
push 15h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10030A0  +
and dword ptr [ebx+3Ch] 0 +
lea esi [ebx+2Ch] +
lea edi [ebp-134h] +
movs   +
movs   +
movs   +
movs   +
jmp loc_100E5DF  +
mov eax off_1018000 +
cmp eax offset off_1018000 +
jz loc_100E387  +
test byte ptr [eax+1Ch] 10h +
jz loc_100E387  +
push offset loc_10022C8  +
push 1Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10030A0  +
push 64h  +
lea eax [ebp-0CCh] +
push eax  +
push dword ptr [ebp-108h]  +
call ds:GetClassNameW  +
push 0FFFFFFFFh  +
push offset aCombolbox  +
push 0FFFFFFFFh  +
lea eax [ebp-0CCh] +
push eax  +
push 1  +
push 7Fh  +
call ds:CompareStringW  +
cmp eax 2 +
jnz loc_100E5DF  +
lea eax [ebp-164h] +
push eax  +
push 0  +
mov dword ptr [ebp-164h] 30h +
call ds:GetGUIThreadInfo  +
cmp dword ptr [ebp-158h] 0 +
jz loc_100E5DF  +
lea eax [ebp-134h] +
push eax  +
push dword ptr [ebp-158h]  +
call ds:GetWindowRect  +
jmp loc_100E5DF  +
mov eax off_1018000 +
mov esi offset off_1018000 +
mov edi offset loc_10022C8 +
cmp eax esi +
jz loc_100E424  +
test byte ptr [eax+1Ch] 10h +
jz loc_100E424  +
push edi  +
push 18h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10030A0  +
push 64h  +
lea eax [ebp-0CCh] +
push eax  +
push dword ptr [ebp-108h]  +
call ds:GetClassNameW  +
push 0FFFFFFFFh  +
push offset aCombolbox  +
push 0FFFFFFFFh  +
lea eax [ebp-0CCh] +
push eax  +
push 1  +
push 7Fh  +
call ds:CompareStringW  +
cmp eax 2 +
jnz loc_100E5DF  +
lea eax [ebp-114h] +
push eax  +
push 1F4h  +
xor eax eax +
push eax  +
push eax  +
push eax  +
push 188h  +
push dword ptr [ebp-108h]  +
call ds:SendMessageTimeoutW  +
test eax eax +
jz loc_100E5DF  +
mov eax [ebp-114h] +
cmp eax 0FFFFFFFFh +
jz loc_100E5DF  +
lea ecx [ebp-124h] +
push ecx  +
lea ecx [ebp-10Ch] +
push ecx  +
inc eax  +
push eax  +
push 0FFFFFFFCh  +
push dword ptr [ebp-108h]  +
call AccessibleObjectFromEvent  +
mov [ebp-110h] eax +
test eax eax +
jge loc_100E4E1  +
mov eax off_1018000 +
cmp eax esi +
jz loc_100E5DF  +
test byte ptr [eax+1Ch] 4 +
jz loc_100E5DF  +
push dword ptr [ebp-110h]  +
push edi  +
push 19h  +
jmp loc_100E577  +
lea eax [ebp-144h] +
push eax  +
lea eax [ebp-124h] +
push eax  +
push dword ptr [ebp-10Ch]  +
mov ecx ebx +
call sub_100D4C3  +
test eax eax +
jz loc_100E5DF  +
lea esi [ebp-144h] +
jmp loc_100E354  +
***
mov eax off_1018000 +
mov esi offset off_1018000 +
mov edi offset loc_10022C8 +
cmp eax esi +
jz loc_100E536  +
test byte ptr [eax+1Ch] 10h +
jz loc_100E536  +
push edi  +
push 16h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10030A0  +
lea eax [ebp-144h] +
push eax  +
lea eax [ebp-10Ch] +
push eax  +
push dword ptr [ebp+18h]  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp-108h]  +
call AccessibleObjectFromEvent  +
mov [ebp-110h] eax +
test eax eax +
jge loc_100E584  +
mov eax off_1018000 +
cmp eax esi +
jz loc_100E5DF  +
test byte ptr [eax+1Ch] 4 +
jz loc_100E5DF  +
push dword ptr [ebp-110h]  +
push edi  +
push 17h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10030C6  +
jmp loc_100E5DF  +
lea eax [ebp-124h] +
push eax  +
lea eax [ebp-144h] +
push eax  +
push dword ptr [ebp-10Ch]  +
mov ecx ebx +
call sub_100D4C3  +
test eax eax +
jz loc_100E5DF  +
cmp dword ptr [ebx+40h] 0Ch +
jz loc_100E5DF  +
lea esi [ebp-124h] +
jmp loc_100E354  +
***
mov eax off_1018000 +
cmp eax offset off_1018000 +
jz loc_100E5D8  +
test byte ptr [eax+1Ch] 10h +
jz loc_100E5D8  +
push offset loc_10022C8  +
push 14h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10030A0  +
mov dword ptr [ebx+3Ch] 1 +
lea eax [ebp-134h] +
push eax  +
call ds:IsRectEmpty  +
test eax eax +
jnz loc_100E60F  +
push dword ptr [ebp-108h]  +
mov ecx [ebx+50h] +
mov eax [ecx] +
push 0Ah  +
sub esp 10h +
mov edi esp +
lea esi [ebp-134h] +
movs   +
movs   +
movs   +
movs   +
call dword ptr [eax+4]  +
mov eax [ebp-10Ch] +
test eax eax +
jz loc_100E6CA  +
cmp dword ptr [ebp-110h] 0 +
jl loc_100E6CA  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_100E6CA  +
mov eax [ebp+8] +
mov edi [ebp-108h] +
mov [ebp-154h] eax +
mov eax [ebp+14h] +
mov [ebp-148h] eax +
mov eax [ebp+1Ch] +
mov [ebp-140h] eax +
mov eax [ebp+20h] +
mov [ebp-13Ch] eax +
mov [ebp-150h] esi +
mov esi [ebp+18h] +
lea eax [ebp-154h] +
push eax  +
mov ecx ebx +
mov [ebp-14Ch] edi +
mov [ebp-144h] esi +
call sub_100D54E  +
mov eax off_1018000 +
cmp eax offset off_1018000 +
jz loc_100E6AB  +
test byte ptr [eax+1Ch] 10h +
jz loc_100E6AB  +
push esi  +
push dword ptr [ebp+14h]  +
push edi  +
push offset loc_10022C8  +
push 13h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1004E19  +
cmp dword ptr [ebx+44h] 0 +
jnz loc_100E6CA  +
push offset loc_100E0B4  +
mov eax 14A6h +
push 32h  +
push eax  +
push dword ptr [ebx+48h]  +
mov [ebx+44h] eax +
call ds:SetTimer  +
mov ecx [ebp-4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_10149A5  +
leave   +
retn 1Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx dword_1018678 +
test ecx ecx +
jz loc_100E6F5  +
pop ebp  +
jmp loc_100E0D9  +
***
pop ebp  +
retn 1Ch  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_10132EF  +
mov dword_1018680 eax +
test eax eax +
jz loc_100E71D  +
mov edx [eax] +
push offset loc_100E6E0  +
mov ecx eax +
call dword ptr [edx+4]  +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
push ebx  +
push esi  +
mov ebx ecx +
push edi  +
lea ecx [ebx+80h] +
call sub_100E6FE  +
xor esi esi +
push esi  +
push offset aFocustracker_0  +
lea ecx [ebp+var_8] +
call sub_1002FF5  +
mov [ebx+8] esi +
mov [ebx+4] esi +
mov [ebx] esi +
mov [ebx+3Ch] esi +
mov [ebx+444h] esi +
mov [ebp+var_18] esi +
mov [ebp+var_14] esi +
mov [ebp+var_10] esi +
mov [ebp+var_C] esi +
lea edi [ebx+1Ch] +
lea esi [ebp+var_18] +
movs   +
movs   +
movs   +
movs   +
xor eax eax +
mov [ebp+var_18] eax +
mov [ebp+var_14] eax +
mov [ebp+var_10] eax +
mov [ebp+var_C] eax +
lea edi [ebx+2Ch] +
lea esi [ebp+var_18] +
movs   +
movs   +
movs   +
mov [ebx+4Ch] eax +
mov [ebx+14h] eax +
mov [ebx+18h] eax +
movs   +
mov dword ptr [ebx+40h] 0Ah +
mov hhk eax +
push 2Ch  +
push eax  +
mov [ebx+44h] eax +
lea eax [ebx+54h] +
push eax  +
call memset  +
push 3C0h  +
lea eax [ebx+84h] +
push 0  +
push eax  +
call memset  +
add esp 18h +
lea ecx [ebp+var_8] +
mov dword_1018678 ebx +
call sub_1003039  +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push 4  +
pop eax  +
push eax  +
lea ecx [ebp+arg_30] +
push ecx  +
push eax  +
lea ecx [ebp+arg_2C] +
push ecx  +
push eax  +
lea ecx [ebp+arg_28] +
push ecx  +
push eax  +
lea ecx [ebp+arg_24] +
push ecx  +
push eax  +
lea ecx [ebp+arg_20] +
push ecx  +
push eax  +
lea ecx [ebp+arg_1C] +
push ecx  +
push eax  +
lea ecx [ebp+arg_18] +
push ecx  +
push eax  +
lea ecx [ebp+arg_14] +
push ecx  +
push eax  +
lea eax [ebp+arg_10] +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_C]  +
push 2Bh  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call TraceMessage  +
add esp 60h +
pop ebp  +
retn 34h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push 4  +
lea eax [ebp+arg_1C] +
push eax  +
push 4  +
lea eax [ebp+arg_18] +
push eax  +
push 8  +
lea eax [ebp+arg_10] +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_C]  +
push 2Bh  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call TraceMessage  +
add esp 30h +
pop ebp  +
retn 20h  +
***
mov edi edi +
push esi  +
xor esi esi +
inc esi  +
call MagInitialize  +
test eax eax +
jnz loc_100E8A4  +
mov eax off_1018000 +
cmp eax offset off_1018000 +
jz loc_100E8A2  +
test byte ptr [eax+1Ch] 4 +
jz loc_100E8A2  +
push offset dword_10024B0  +
push 0Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10030A0  +
xor esi esi +
mov eax esi +
pop esi  +
retn   +
***
and dword_10186AC 0 +
push offset dword_1018684  +
mov dword_1018684 28h +
mov dword_10186A8 3 +
call ds:USER32_2001  +
test eax eax +
jnz loc_100E907  +
mov eax off_1018000 +
cmp eax offset off_1018000 +
jz loc_100E907  +
test byte ptr [eax+1Ch] 4 +
jz loc_100E907  +
call ds:GetLastError  +
push eax  +
mov eax off_1018000 +
push offset dword_10024B0  +
push 0Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10030C6  +
jmp MagUninitialize  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
mov eax offset unk_1018138 +
jnz loc_100E926  +
mov eax offset unk_10181A0 +
push eax  +
call SetMagnificationDesktopColorEffect  +
test eax eax +
jnz loc_100E957  +
mov eax off_1018000 +
cmp eax offset off_1018000 +
jz loc_100E957  +
test byte ptr [eax+1Ch] 4 +
jz loc_100E957  +
push [ebp+arg_0]  +
push offset dword_10024B0  +
push 0Dh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10030C6  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+hWnd]  +
call ds:IsWindow  +
test eax eax +
jz loc_100E997  +
push 0FFFFFFF0h  +
push [ebp+hWnd]  +
call ds:GetWindowLongW  +
cmp [ebp+arg_0] 0 +
jz loc_100E988  +
or eax 4 +
jmp loc_100E98B  +
and eax 0FFFFFFFBh +
push eax  +
push 0FFFFFFF0h  +
push [ebp+hWnd]  +
call ds:SetWindowLongW  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
cmp dword_1018130 0 +
jz locret_100EA63  +
push esi  +
push edi  +
mov dword_1018684 28h +
lea esi [ebp+arg_0] +
mov edi offset unk_1018688 +
movs   +
movs   +
movs   +
movs   +
lea esi [ebp+arg_10] +
mov edi offset unk_1018698 +
movs   +
xor eax eax +
cmp dword_10186AC eax +
movs   +
setnz al  +
movs   +
movs   +
push offset dword_1018684  +
mov dword_10186A8 eax +
call ds:USER32_2001  +
test eax eax +
jz loc_100EA02  +
mov dword_10186AC 1 +
jmp loc_100EA61  +
mov eax off_1018000 +
cmp eax offset off_1018000 +
jz loc_100EA61  +
test byte ptr [eax+1Ch] 4 +
jz loc_100EA61  +
mov eax [ebp+arg_8] +
sub eax [ebp+arg_0] +
mov esi [ebp+arg_1C] +
mov edi [ebp+arg_18] +
sub esi [ebp+arg_14] +
sub edi [ebp+arg_10] +
push ebx  +
mov ebx [ebp+arg_C] +
sub ebx [ebp+arg_4] +
mov [ebp+var_4] eax +
call ds:GetLastError  +
push eax  +
push esi  +
mov eax off_1018000 +
push edi  +
push [ebp+arg_10]  +
push [ebp+arg_14]  +
push ebx  +
push [ebp+var_4]  +
push [ebp+arg_0]  +
push [ebp+arg_4]  +
push offset dword_10024B0  +
push 0Fh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100E7E1  +
pop ebx  +
pop edi  +
pop esi  +
leave   +
retn 20h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
fild  [ebp+arg_4] +
push esi  +
push edi  +
fmul  [ebp+arg_0] +
fisub  [ebp+arg_14] +
call _ftol2_sse  +
fild  [ebp+arg_8] +
mov esi eax +
neg esi  +
fmul  [ebp+arg_0] +
fisub  [ebp+arg_18] +
call _ftol2_sse  +
fld  [ebp+arg_0] +
mov edi eax +
neg edi  +
push edi  +
push esi  +
push ecx  +
push ecx  +
fstp  [esp+18h+var_18] +
call SetMagnificationDesktopMagnification  +
test eax eax +
jnz loc_100EAD8  +
mov eax off_1018000 +
cmp eax offset off_1018000 +
jz loc_100EAD8  +
test byte ptr [eax+1Ch] 4 +
jz loc_100EAD8  +
fld  [ebp+arg_0] +
push edi  +
push esi  +
push ecx  +
push ecx  +
fstp  [esp+28h+var_28] +
push offset dword_10024B0  +
push 0Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100E837  +
sub esp 10h +
mov edi esp +
lea esi [ebp+arg_14] +
movs   +
movs   +
movs   +
movs   +
sub esp 10h +
mov edi esp +
lea esi [ebp+arg_4] +
movs   +
movs   +
movs   +
movs   +
call sub_100E9A0  +
pop edi  +
pop esi  +
pop ebp  +
retn 24h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 24h +
fld  [ebp+arg_4] +
mov eax [ebp+arg_8] +
fst  [ebp+var_24] +
neg eax  +
fldz   +
mov [ebp+arg_4] eax +
mov eax [ebp+arg_C] +
fst  [ebp+var_20] +
fild  [ebp+arg_4] +
neg eax  +
fld  st(2) +
mov [ebp+arg_4] eax +
push esi  +
push edi  +
fmulp st(1) st +
lea eax [ebp+var_24] +
push eax  +
push [ebp+arg_0]  +
fstp  [ebp+var_1C] +
fst  [ebp+var_18] +
fxch  st(1) +
fst  [ebp+var_14] +
fimul  [ebp+arg_4] +
fstp  [ebp+var_10] +
fst  [ebp+var_C] +
fstp  [ebp+var_8] +
fld1   +
fstp  [ebp+var_4] +
call MagSetWindowTransform  +
sub esp 10h +
mov edi esp +
lea esi [ebp+arg_18] +
movs   +
movs   +
movs   +
movs   +
sub esp 10h +
mov edi esp +
lea esi [ebp+arg_8] +
movs   +
movs   +
movs   +
movs   +
call sub_100E9A0  +
pop edi  +
pop esi  +
leave   +
retn 28h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
push edi  +
test ebx ebx +
jnz loc_100EBBA  +
and [ebp+var_10] ebx +
and [ebp+var_C] ebx +
xor eax eax +
sub esp 10h +
inc eax  +
mov [ebp+var_8] eax +
mov [ebp+var_4] eax +
mov edi esp +
lea esi [ebp+var_10] +
movs   +
movs   +
movs   +
movs   +
sub esp 10h +
mov edi esp +
lea esi [ebp+var_10] +
movs   +
movs   +
movs   +
movs   +
call sub_100E9A0  +
pop edi  +
pop esi  +
mov dword_1018130 ebx +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+10h] +
test eax eax +
jnz loc_100EBDF  +
mov eax 80070057h +
jmp loc_100EC20  +
and dword ptr [eax] 0 +
push esi  +
mov esi [ebp+0Ch] +
push edi  +
push 4  +
pop ecx  +
mov edi offset dword_1002E74 +
xor edx edx +
cmps   +
jz loc_100EC06  +
mov esi [ebp+0Ch] +
push 4  +
pop ecx  +
mov edi offset dword_10024D0 +
xor edx edx +
cmps   +
jnz loc_100EC19  +
mov ecx [ebp+8] +
mov [eax] ecx +
test ecx ecx +
jz loc_100EC19  +
mov eax [ecx] +
push ecx  +
call dword ptr [eax+4]  +
xor eax eax +
jmp loc_100EC1E  +
mov eax 80004002h +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+8] +
mov eax [ecx+40h] +
lea edx [eax+1] +
mov [ecx+40h] edx +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+8] +
mov eax [ecx+40h] +
lea edx [eax-1] +
mov [ecx+40h] edx +
pop ebp  +
retn 4  +
***
xor eax eax +
retn 4  +
***
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
cmp dword ptr [ebp+10h] 1 +
push esi  +
setz al  +
mov esi eax +
test esi esi +
jnz loc_100EC90  +
cmp dword ptr [ebp+10h] 6 +
jnz loc_100ED27  +
mov eax [ebp+0Ch] +
mov ecx [eax] +
lea edx [ebp+10h] +
push edx  +
push 0  +
push eax  +
call dword ptr [ecx+40h]  +
mov eax [ebp+10h] +
dec eax  +
jz loc_100ECF3  +
dec eax  +
jz loc_100ECD8  +
dec eax  +
jnz loc_100ED27  +
mov eax [ebp+8] +
test esi esi +
jz loc_100ECB7  +
inc dword ptr [eax+38h]  +
jmp loc_100ED27  +
mov ecx [eax+38h] +
test ecx ecx +
jle loc_100ED27  +
lea edx [ecx-1] +
mov [eax+38h] edx +
mov eax [eax+2Ch] +
mov esi [eax] +
xor ecx ecx +
test edx edx +
setz cl  +
push ecx  +
mov ecx eax +
call dword ptr [esi+0Ch]  +
jmp loc_100ED27  +
mov eax [ebp+8] +
test esi esi +
jz loc_100ECE4  +
inc dword ptr [eax+34h]  +
jmp loc_100ED27  +
mov ecx [eax+34h] +
test ecx ecx +
jle loc_100ED27  +
lea edx [ecx-1] +
mov [eax+34h] edx +
jmp loc_100ECC4  +
***
mov eax [ebp+8] +
test esi esi +
jz loc_100ED00  +
inc word ptr [eax+30h]  +
jmp loc_100ED27  +
movzx ecx word ptr [eax+30h] +
test cx cx +
jbe loc_100ED27  +
lea edx [ecx-1] +
push ebx  +
xor ecx ecx +
xor ebx ebx +
cmp cx dx +
setz bl  +
mov [eax+30h] dx +
mov eax [eax+2Ch] +
mov esi [eax] +
mov ecx eax +
push ebx  +
call dword ptr [esi+10h]  +
pop ebx  +
xor eax eax +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
mov eax [ebp+arg_0] +
mov ecx [eax] +
push offset dword_1002510  +
push eax  +
call dword ptr [ecx]  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
test esi esi +
jnz loc_100ED62  +
xor eax eax +
jmp loc_100ED81  +
push edi  +
mov edi [ebp+arg_4] +
test edi edi +
jz loc_100ED70  +
mov eax [edi] +
push edi  +
call dword ptr [eax+4]  +
mov eax [esi] +
test eax eax +
jz loc_100ED7C  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [esi] edi +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_1002534 +
mov dword ptr [esi+4] offset off_1002520 +
mov eax [esi+2Ch] +
test eax eax +
jz loc_100EDAA  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [esi+28h] +
test eax eax +
jz loc_100EDB7  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [esi+24h] +
test eax eax +
jz loc_100EDC4  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [esi+20h] +
test eax eax +
jz loc_100EDD1  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [esi+1Ch] +
test eax eax +
jz loc_100EDDE  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [esi+18h] +
test eax eax +
jz loc_100EDEB  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [esi+14h] +
test eax eax +
jz loc_100EDF8  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [esi+10h] +
test eax eax +
jz loc_100EE05  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [esi+0Ch] +
test eax eax +
jz loc_100EE12  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov esi [esi+8] +
test esi esi +
jz loc_100EE1F  +
mov eax [esi] +
push esi  +
call dword ptr [eax+8]  +
pop esi  +
retn   +
***
sub dword ptr [esp+4] 4 +
jmp loc_100EBCC  +
***
sub dword ptr [esp+4] 4 +
jmp loc_100EC43  +
***
sub dword ptr [esp+4] 4 +
jmp loc_100EC29  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_100ED8B  +
test [ebp+arg_0] 1 +
jz loc_100EE6D  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push esi  +
mov esi [ebp+8] +
xor eax eax +
push edi  +
cmp [esi+34h] ax +
jbe loc_100EF05  +
mov eax [esi+10h] +
mov ecx [eax] +
lea edx [ebp-8] +
push edx  +
push eax  +
call dword ptr [ecx+18h]  +
mov eax [esi+14h] +
mov ecx [eax] +
lea edx [ebp-0Ch] +
push edx  +
push eax  +
call dword ptr [ecx+18h]  +
mov eax [esi+20h] +
mov ecx [eax] +
lea edx [ebp+8] +
push edx  +
push eax  +
call dword ptr [ecx+18h]  +
mov eax [esi+24h] +
mov ecx [eax] +
lea edx [ebp-4] +
push edx  +
push eax  +
call dword ptr [ecx+18h]  +
mov ecx [ebp-4] +
mov eax [ebp+8] +
mov edi [ebp-0Ch] +
mov edx [ebp-8] +
push ecx  +
push eax  +
push edi  +
push edx  +
lea ecx [ebp-20h] +
call sub_1004199  +
lea eax [ebp-20h] +
push eax  +
call ds:IsRectEmpty  +
test eax eax +
jnz loc_100EF92  +
mov ecx [esi+30h] +
mov eax [ecx] +
sub esp 10h +
mov edi esp +
lea esi [ebp-20h] +
movs   +
movs   +
movs   +
movs   +
call dword ptr [eax+4]  +
jmp loc_100EF92  +
cmp [esi+38h] eax +
jle loc_100EF2D  +
mov eax [esi+28h] +
mov ecx [eax] +
lea edx [ebp-10h] +
push edx  +
push eax  +
call dword ptr [ecx+0Ch]  +
fld  qword ptr [ebp-10h] +
mov ecx [esi+30h] +
fstp  dword ptr [ebp+8] +
fld  dword ptr [ebp+8] +
mov eax [ecx] +
push ecx  +
fstp  dword ptr [esp] +
call dword ptr [eax]  +
jmp loc_100EF92  +
cmp [esi+3Ch] eax +
jle loc_100EF92  +
mov eax [esi+10h] +
mov ecx [eax] +
lea edx [ebp+8] +
push edx  +
push eax  +
call dword ptr [ecx+18h]  +
mov eax [esi+14h] +
mov ecx [eax] +
lea edx [ebp-0Ch] +
push edx  +
push eax  +
call dword ptr [ecx+18h]  +
mov eax [esi+18h] +
mov ecx [eax] +
lea edx [ebp-8] +
push edx  +
push eax  +
call dword ptr [ecx+18h]  +
mov eax [esi+1Ch] +
mov ecx [eax] +
lea edx [ebp-4] +
push edx  +
push eax  +
call dword ptr [ecx+18h]  +
mov eax [ebp+8] +
mov ecx [esi+30h] +
mov [ebp-20h] eax +
mov eax [ebp-0Ch] +
mov [ebp-1Ch] eax +
mov eax [ebp-8] +
mov [ebp-18h] eax +
mov eax [ebp-4] +
mov [ebp-14h] eax +
mov eax [ecx] +
sub esp 10h +
mov edi esp +
lea esi [ebp-20h] +
movs   +
movs   +
movs   +
movs   +
call dword ptr [eax+8]  +
pop edi  +
xor eax eax +
pop esi  +
leave   +
retn 4  +
***
mov eax [ecx+8] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+1Ch]  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
and [ebp+var_8] 0 +
push ebx  +
push esi  +
mov esi ds:CoCreateInstance +
push edi  +
mov edi ecx +
lea eax [edi+8] +
push eax  +
push offset stru_10024E0  +
xor ebx ebx +
inc ebx  +
push ebx  +
push 0  +
push offset stru_100256C  +
call esi  +
mov [ebp+var_4] eax +
test eax eax +
jl loc_100F065  +
lea eax [edi+0Ch] +
push eax  +
push offset stru_10024F0  +
push ebx  +
push 0  +
push offset stru_100255C  +
call esi  +
mov [ebp+var_4] eax +
test eax eax +
jl loc_100F040  +
add edi 2Ch +
push edi  +
push offset stru_1002500  +
push ebx  +
push 0  +
push offset stru_100254C  +
call esi  +
mov esi eax +
test esi esi +
jl loc_100F01D  +
mov [ebp+var_8] ebx +
jmp loc_100F098  +
mov eax off_1018000 +
cmp eax offset off_1018000 +
jz loc_100F098  +
test byte ptr [eax+1Ch] 4 +
jz loc_100F098  +
call ds:GetLastError  +
push eax  +
push esi  +
push offset dword_10024C0  +
push 12h  +
jmp loc_100F088  +
mov eax off_1018000 +
cmp eax offset off_1018000 +
jz loc_100F098  +
test byte ptr [eax+1Ch] 4 +
jz loc_100F098  +
call ds:GetLastError  +
push eax  +
push [ebp+var_4]  +
push offset dword_10024C0  +
push 13h  +
jmp loc_100F088  +
mov eax off_1018000 +
cmp eax offset off_1018000 +
jz loc_100F098  +
test byte ptr [eax+1Ch] 4 +
jz loc_100F098  +
call ds:GetLastError  +
push eax  +
push [ebp+var_4]  +
push offset dword_10024C0  +
push 14h  +
mov eax off_1018000 +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1004DE7  +
mov eax [ebp+var_8] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx+8] +
fldz   +
mov ecx [eax] +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push esi  +
push ecx  +
push ecx  +
fstp  [esp+14h+var_14] +
push eax  +
xor ebx ebx +
call dword ptr [ecx+0Ch]  +
test eax eax +
jl loc_100F11B  +
mov esi [esi] +
fld  [ebp+arg_4] +
mov eax [esi] +
push edi  +
push ecx  +
push ecx  +
fstp  qword ptr [esp+0] +
push esi  +
call dword ptr [eax+28h]  +
fld  [ebp+arg_C] +
push ecx  +
push ecx  +
fstp  [esp+14h+var_14] +
mov edi eax +
mov eax [esi] +
push esi  +
call dword ptr [eax+2Ch]  +
test edi edi +
jl loc_100F0F2  +
test eax eax +
jl loc_100F0F2  +
inc ebx  +
jmp loc_100F11A  +
mov ecx off_1018000 +
cmp ecx offset off_1018000 +
jz loc_100F11A  +
test byte ptr [ecx+1Ch] 4 +
jz loc_100F11A  +
push eax  +
push edi  +
push offset dword_10024C0  +
push 18h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_1004DE7  +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
fldz   +
mov eax [ecx+2Ch] +
push esi  +
fstp  [ebp+var_8] +
mov ecx [eax] +
push edi  +
lea edx [ebp+var_8] +
push edx  +
push eax  +
xor edi edi +
call dword ptr [ecx+20h]  +
mov esi eax +
cmp esi edi +
jl loc_100F189  +
mov eax [ebp+arg_0] +
fld  [ebp+var_8] +
mov ecx [eax] +
push edi  +
push ecx  +
push ecx  +
fstp  [esp+24h+var_24] +
push eax  +
call dword ptr [ecx+2Ch]  +
mov esi eax +
cmp esi edi +
jl loc_100F166  +
inc edi  +
jmp loc_100F1BA  +
mov eax off_1018000 +
cmp eax offset off_1018000 +
jz loc_100F1BA  +
test byte ptr [eax+1Ch] 4 +
jz loc_100F1BA  +
call ds:GetLastError  +
push eax  +
push esi  +
push offset dword_10024C0  +
push 1Dh  +
jmp loc_100F1AA  +
mov eax off_1018000 +
cmp eax offset off_1018000 +
jz loc_100F1BA  +
test byte ptr [eax+1Ch] 4 +
jz loc_100F1BA  +
call ds:GetLastError  +
push eax  +
push esi  +
push offset dword_10024C0  +
push 1Eh  +
mov eax off_1018000 +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1004DE7  +
mov eax edi +
pop edi  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ecx+8] +
mov ecx [eax] +
push esi  +
lea edx [ebp+var_4] +
push edx  +
push eax  +
xor esi esi +
call dword ptr [ecx+2Ch]  +
test eax eax +
jl loc_100F1E8  +
cmp [ebp+var_4] 1 +
jnz loc_100F1E8  +
inc esi  +
mov eax esi +
pop esi  +
leave   +
retn   +
***
mov eax ecx +
xor ecx ecx +
mov dword ptr [eax] offset off_1002534 +
mov dword ptr [eax+4] offset off_1002520 +
mov [eax+8] ecx +
mov [eax+0Ch] ecx +
mov [eax+10h] ecx +
mov [eax+14h] ecx +
mov [eax+18h] ecx +
mov [eax+1Ch] ecx +
mov [eax+20h] ecx +
mov [eax+24h] ecx +
mov [eax+28h] ecx +
mov [eax+2Ch] ecx +
xor edx edx +
mov [eax+34h] dx +
mov [eax+38h] ecx +
mov [eax+3Ch] ecx +
mov [eax+40h] ecx +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
and [ebp+var_10] 0 +
and [ebp+var_4] 0 +
push esi  +
push edi  +
lea eax [ebp+var_4] +
mov esi ecx +
push eax  +
push dword ptr [esi+8]  +
call sub_100ED33  +
mov eax [esi+2Ch] +
mov ecx [eax] +
push 1  +
push [ebp+var_4]  +
push eax  +
call dword ptr [ecx+0Ch]  +
mov edi eax +
test edi edi +
jl loc_100F2E3  +
mov eax [esi+2Ch] +
mov ecx [eax] +
push esi  +
push eax  +
call dword ptr [ecx+10h]  +
mov edi eax +
test edi edi +
jl loc_100F2B8  +
mov eax [esi+2Ch] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+14h]  +
mov edi eax +
test edi edi +
jge loc_100F321  +
mov eax off_1018000 +
cmp eax offset off_1018000 +
jz loc_100F475  +
test byte ptr [eax+1Ch] 4 +
jz loc_100F475  +
call ds:GetLastError  +
push eax  +
push edi  +
push offset dword_10024C0  +
push 15h  +
jmp loc_100F30C  +
mov eax off_1018000 +
cmp eax offset off_1018000 +
jz loc_100F475  +
test byte ptr [eax+1Ch] 4 +
jz loc_100F475  +
call ds:GetLastError  +
push eax  +
push edi  +
push offset dword_10024C0  +
push 16h  +
jmp loc_100F30C  +
mov eax off_1018000 +
cmp eax offset off_1018000 +
jz loc_100F475  +
test byte ptr [eax+1Ch] 4 +
jz loc_100F475  +
call ds:GetLastError  +
push eax  +
push edi  +
push offset dword_10024C0  +
push 17h  +
mov eax off_1018000 +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1004DE7  +
jmp loc_100F475  +
mov edi ds:GetSystemMetrics +
push ebx  +
push 4Ch  +
call edi  +
mov ebx eax +
push 4Eh  +
mov [ebp+var_18] ebx +
call edi  +
push 4Dh  +
mov [ebp+var_C] eax +
call edi  +
push 4Fh  +
mov [ebp+var_8] eax +
call edi  +
mov edi eax +
mov eax [ebp+var_C] +
lea ecx [eax+ebx] +
mov [ebp+var_14] ecx +
fild  [ebp+var_14] +
cdq   +
sub eax edx +
sar eax 1 +
fstp  [ebp+var_24] +
sub esp 10h +
fld  [ebp+var_24] +
sub ebx eax +
fstp  [esp+60h+var_58] +
mov [ebp+var_14] ebx +
lea eax [esi+10h] +
fild  [ebp+var_14] +
mov ecx esi +
mov [ebp+var_1C] edi +
fstp  [esp+60h+var_60] +
push eax  +
call sub_100F0A5  +
mov ecx [ebp+var_8] +
mov ebx eax +
lea eax [edi+ecx] +
mov [ebp+var_14] eax +
fild  [ebp+var_14] +
mov eax edi +
cdq   +
sub eax edx +
fstp  [ebp+var_2C] +
sar eax 1 +
fld  [ebp+var_2C] +
sub ecx eax +
sub esp 10h +
mov [ebp+var_14] ecx +
fstp  [esp+60h+var_58] +
lea eax [esi+14h] +
fild  [ebp+var_14] +
mov ecx esi +
fstp  [esp+60h+var_60] +
push eax  +
call sub_100F0A5  +
fld  [ebp+var_24] +
sub esp 10h +
fstp  [esp+60h+var_58] +
mov edi eax +
fild  [ebp+var_18] +
lea eax [esi+18h] +
mov ecx esi +
fstp  [esp+60h+var_60] +
push eax  +
call sub_100F0A5  +
fld  [ebp+var_2C] +
sub esp 10h +
fstp  [esp+60h+var_58] +
mov [ebp+var_18] eax +
fild  [ebp+var_8] +
lea eax [esi+1Ch] +
mov ecx esi +
fstp  [esp+60h+var_60] +
push eax  +
call sub_100F0A5  +
fild  [ebp+var_C] +
sub esp 10h +
mov [ebp+var_14] eax +
fstp  [esp+60h+var_58] +
fldz   +
lea eax [esi+20h] +
fstp  [esp+60h+var_60] +
push eax  +
mov ecx esi +
call sub_100F0A5  +
fild  [ebp+var_1C] +
sub esp 10h +
mov [ebp+var_C] eax +
fstp  [esp+60h+var_58] +
lea eax [esi+24h] +
fldz   +
mov ecx esi +
fstp  [esp+60h+var_60] +
push eax  +
call sub_100F0A5  +
fld  ds:dbl_1002580 +
sub esp 10h +
fstp  [esp+60h+var_58] +
mov [ebp+var_1C] eax +
fld1   +
lea eax [esi+28h] +
fstp  [esp+60h+var_60] +
mov ecx esi +
push eax  +
call sub_100F0A5  +
test ebx ebx +
pop ebx  +
jz loc_100F475  +
test edi edi +
jz loc_100F475  +
cmp [ebp+var_18] 0 +
jz loc_100F475  +
cmp [ebp+var_14] 0 +
jz loc_100F475  +
cmp [ebp+var_C] 0 +
jz loc_100F475  +
cmp [ebp+var_1C] 0 +
jz loc_100F475  +
test eax eax +
jz loc_100F475  +
mov [ebp+var_10] 1 +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
test eax eax +
jz loc_100F484  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+var_10] +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
fld  ds:dbl_1002588 +
and [ebp+var_4] 0 +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_4] +
push edi  +
sub esp 20h +
fstp  [esp+34h+var_1C] +
mov esi ecx +
fldz   +
mov eax [esi+0Ch] +
mov ecx [eax] +
fstp  [esp+34h+var_24] +
fld  [ebp+arg_14] +
fstp  [esp+34h+var_2C] +
fld  [ebp+arg_1C] +
fstp  [esp+34h+var_34] +
push eax  +
call dword ptr [ecx+28h]  +
mov ebx eax +
test ebx ebx +
jl loc_100F587  +
mov edi [edi] +
mov ecx esi +
call sub_100F1C7  +
test eax eax +
jnz loc_100F4F1  +
fld  [ebp+arg_C] +
mov eax [edi] +
push ecx  +
push ecx  +
fstp  [esp+40h+var_40] +
push edi  +
call dword ptr [eax+0Ch]  +
mov ebx eax +
test ebx ebx +
jl loc_100F564  +
mov eax off_1018000 +
mov esi offset off_1018000 +
mov ebx offset dword_10024C0 +
cmp eax esi +
jz loc_100F52C  +
test byte ptr [eax+1Ch] 10h +
jz loc_100F52C  +
fld  [ebp+arg_14] +
sub esp 10h +
fstp  [esp+54h+var_4C] +
fld  [ebp+arg_C] +
fstp  [esp+54h+var_54] +
push ebx  +
push 19h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10080A2  +
mov eax [ebp+arg_0] +
mov ecx [eax] +
push edi  +
push [ebp+arg_8]  +
push eax  +
call dword ptr [ecx+0Ch]  +
mov edi eax +
test edi edi +
jl loc_100F548  +
mov [ebp+var_4] 1 +
jmp loc_100F5B8  +
mov eax off_1018000 +
cmp eax esi +
jz loc_100F5B8  +
test byte ptr [eax+1Ch] 4 +
jz loc_100F5B8  +
call ds:GetLastError  +
push eax  +
push edi  +
push ebx  +
push 1Ah  +
jmp loc_100F5A8  +
mov eax off_1018000 +
cmp eax offset off_1018000 +
jz loc_100F5B8  +
test byte ptr [eax+1Ch] 4 +
jz loc_100F5B8  +
call ds:GetLastError  +
push eax  +
push ebx  +
push offset dword_10024C0  +
push 1Bh  +
jmp loc_100F5A8  +
mov eax off_1018000 +
cmp eax offset off_1018000 +
jz loc_100F5B8  +
test byte ptr [eax+1Ch] 4 +
jz loc_100F5B8  +
call ds:GetLastError  +
push eax  +
push ebx  +
push offset dword_10024C0  +
push 1Ch  +
mov eax off_1018000 +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1004DE7  +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 24h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx] +
cmp eax [ebp+arg_0] +
jz loc_100F5DC  +
push [ebp+arg_0]  +
push ecx  +
call sub_100ED51  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi dword_10186B0 +
test esi esi +
jnz loc_100F644  +
push 44h  +
call ??2@YAPAXI@Z  +
pop ecx  +
test eax eax +
jz loc_100F60C  +
mov ecx eax +
call sub_100F1F2  +
mov esi eax +
jmp loc_100F60E  +
xor esi esi +
test esi esi +
jz loc_100F63C  +
mov eax [esi] +
push esi  +
call dword ptr [eax+4]  +
mov eax [ebp+arg_0] +
mov ecx esi +
mov [esi+30h] eax +
call sub_100EFAE  +
test eax eax +
jz loc_100F634  +
mov ecx esi +
call sub_100F236  +
test eax eax +
jnz loc_100F63C  +
mov eax [esi] +
push esi  +
call dword ptr [eax+8]  +
xor esi esi +
mov dword_10186B0 esi +
jmp loc_100F64A  +
mov eax [ebp+arg_0] +
mov [esi+30h] eax +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov eax dword_10186B0 +
test eax eax +
jz locret_100F691  +
push 0  +
lea ecx [eax+8] +
call sub_100F5C7  +
mov ecx dword_10186B0 +
push 0  +
add ecx 2Ch +
call sub_100F5C7  +
mov ecx dword_10186B0 +
test ecx ecx +
jz loc_100F68A  +
push 1  +
call sub_100EE53  +
and dword_10186B0 0 +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
fld  ds:dbl_1001D58 +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
sub esp 18h +
fstp  [esp+44h+var_34] +
mov esi ecx +
fild  [ebp+arg_14] +
mov eax [esi+10h] +
xor ebx ebx +
mov [ebp+var_C] ebx +
fstp  [esp+44h+var_3C] +
fild  [ebp+arg_4] +
fstp  [esp+44h+var_44] +
push eax  +
lea eax [ebp+var_C] +
push eax  +
push edi  +
call sub_100F48E  +
fld  ds:dbl_1001D58 +
sub esp 18h +
fstp  [esp+44h+var_34] +
mov [ebp+var_18] eax +
fild  [ebp+arg_18] +
mov eax [esi+14h] +
mov ecx esi +
mov [ebp+var_8] ebx +
fstp  [esp+44h+var_3C] +
fild  [ebp+arg_8] +
fstp  [esp+44h+var_44] +
push eax  +
lea eax [ebp+var_8] +
push eax  +
push edi  +
call sub_100F48E  +
fld  ds:dbl_1001D58 +
mov [ebp+var_1C] eax +
mov eax [ebp+arg_1C] +
sub eax [ebp+arg_14] +
sub esp 18h +
fstp  [esp+44h+var_34] +
mov [ebp+var_10] eax +
mov eax [ebp+arg_C] +
fild  [ebp+var_10] +
sub eax [ebp+arg_4] +
mov ecx esi +
fstp  [esp+44h+var_3C] +
mov [ebp+var_14] eax +
fild  [ebp+var_14] +
mov eax [esi+20h] +
mov [ebp+var_4] ebx +
fstp  [esp+44h+var_44] +
push eax  +
lea eax [ebp+var_4] +
push eax  +
push edi  +
call sub_100F48E  +
fld  ds:dbl_1001D58 +
mov [ebp+var_20] eax +
mov eax [ebp+arg_20] +
sub eax [ebp+arg_18] +
sub esp 18h +
fstp  [esp+44h+var_34] +
mov [ebp+var_14] eax +
mov eax [ebp+arg_10] +
fild  [ebp+var_14] +
sub eax [ebp+arg_8] +
mov ecx esi +
fstp  [esp+44h+var_3C] +
mov [ebp+var_10] eax +
fild  [ebp+var_10] +
mov eax [esi+24h] +
mov [ebp+arg_0] ebx +
fstp  [esp+44h+var_44] +
push eax  +
lea eax [ebp+arg_0] +
push eax  +
push edi  +
call sub_100F48E  +
xor esi esi +
cmp [ebp+var_18] ebx +
jz loc_100F79E  +
cmp [ebp+var_1C] ebx +
jz loc_100F79E  +
cmp [ebp+var_20] ebx +
jz loc_100F79E  +
cmp eax ebx +
jz loc_100F79E  +
inc esi  +
mov eax [ebp+arg_0] +
cmp eax ebx +
jz loc_100F7AB  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+var_4] +
cmp eax ebx +
jz loc_100F7B8  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+var_8] +
cmp eax ebx +
jz loc_100F7C5  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+var_C] +
cmp eax ebx +
jz loc_100F7D2  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 24h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
fld  [ebp+arg_24] +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
sub esp 18h +
fstp  [esp+3Ch+var_2C] +
mov esi ecx +
fild  [ebp+arg_14] +
mov eax [esi+10h] +
xor ebx ebx +
mov [ebp+var_C] ebx +
fstp  [esp+3Ch+var_34] +
fild  [ebp+arg_4] +
fstp  [esp+3Ch+var_3C] +
push eax  +
lea eax [ebp+var_C] +
push eax  +
push edi  +
call sub_100F48E  +
fld  [ebp+arg_24] +
sub esp 18h +
fstp  [esp+3Ch+var_2C] +
mov [ebp+var_10] eax +
fild  [ebp+arg_18] +
mov eax [esi+14h] +
mov ecx esi +
mov [ebp+var_8] ebx +
fstp  [esp+3Ch+var_34] +
fild  [ebp+arg_8] +
fstp  [esp+3Ch+var_3C] +
push eax  +
lea eax [ebp+var_8] +
push eax  +
push edi  +
call sub_100F48E  +
fld  [ebp+arg_24] +
sub esp 18h +
fstp  [esp+3Ch+var_2C] +
mov [ebp+var_14] eax +
fild  [ebp+arg_1C] +
mov eax [esi+18h] +
mov ecx esi +
mov [ebp+var_4] ebx +
fstp  [esp+3Ch+var_34] +
fild  [ebp+arg_C] +
fstp  [esp+3Ch+var_3C] +
push eax  +
lea eax [ebp+var_4] +
push eax  +
push edi  +
call sub_100F48E  +
fld  [ebp+arg_24] +
sub esp 18h +
fstp  [esp+3Ch+var_2C] +
mov [ebp+var_18] eax +
fild  [ebp+arg_20] +
mov eax [esi+1Ch] +
mov ecx esi +
mov [ebp+arg_0] ebx +
fstp  [esp+3Ch+var_34] +
fild  [ebp+arg_10] +
fstp  [esp+3Ch+var_3C] +
push eax  +
lea eax [ebp+arg_0] +
push eax  +
push edi  +
call sub_100F48E  +
xor esi esi +
cmp [ebp+var_10] ebx +
jz loc_100F8B7  +
cmp [ebp+var_14] ebx +
jz loc_100F8B7  +
cmp [ebp+var_18] ebx +
jz loc_100F8B7  +
cmp eax ebx +
jz loc_100F8B7  +
inc esi  +
mov eax [ebp+arg_0] +
cmp eax ebx +
jz loc_100F8C4  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+var_4] +
cmp eax ebx +
jz loc_100F8D1  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+var_8] +
cmp eax ebx +
jz loc_100F8DE  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+var_C] +
cmp eax ebx +
jz loc_100F8EB  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 2Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
fld  ds:dbl_1001D58 +
mov eax [ecx+28h] +
push esi  +
sub esp 18h +
fstp  [esp+20h+var_10] +
xor esi esi +
fld  [ebp+arg_8] +
and [ebp+var_4] esi +
fstp  [esp+20h+var_18] +
fld  [ebp+arg_4] +
fstp  [esp+20h+var_20] +
push eax  +
lea eax [ebp+var_4] +
push eax  +
push [ebp+arg_0]  +
call sub_100F48E  +
test eax eax +
jz loc_100F934  +
inc esi  +
mov eax [ebp+var_4] +
test eax eax +
jz loc_100F941  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax esi +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
mov ebx ecx +
cmp dword ptr [ebx+38h] 0 +
push esi  +
push edi  +
jg loc_100FA64  +
cmp dword ptr [ebx+3Ch] 0 +
jg loc_100FA64  +
mov eax off_1018000 +
mov edi offset off_1018000 +
mov esi offset dword_10024C0 +
cmp eax edi +
jz loc_100F994  +
test byte ptr [eax+1Ch] 10h +
jz loc_100F994  +
push esi  +
push 0Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10030A0  +
mov eax [ebx+8] +
and [ebp+var_4] 0 +
mov ecx [eax] +
lea edx [ebp+var_4] +
push edx  +
push eax  +
call dword ptr [ecx+14h]  +
mov [ebp+var_8] eax +
test eax eax +
jl loc_100FA2B  +
mov eax [ebp+var_4] +
mov ecx [eax] +
lea edx [ebx+4] +
push edx  +
push eax  +
call dword ptr [ecx+4Ch]  +
mov [ebp+var_8] eax +
test eax eax +
jge loc_100F9EC  +
mov eax off_1018000 +
cmp eax edi +
jz loc_100F9EC  +
test byte ptr [eax+1Ch] 4 +
jz loc_100F9EC  +
call ds:GetLastError  +
push eax  +
push [ebp+var_8]  +
mov eax off_1018000 +
push esi  +
push 0Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1004DE7  +
mov eax [ebp+var_4] +
mov ecx [eax] +
push 1  +
push 0  +
push eax  +
call dword ptr [ecx+3Ch]  +
sub esp 10h +
mov edi esp +
lea esi [ebp+arg_10] +
movs   +
movs   +
movs   +
movs   +
sub esp 10h +
mov edi esp +
push [ebp+var_4]  +
lea esi [ebp+arg_0] +
movs   +
movs   +
movs   +
mov ecx ebx +
movs   +
call sub_100F697  +
test eax eax +
jz loc_100FA57  +
push [ebp+var_4]  +
mov ecx ebx +
call sub_100F128  +
jmp loc_100FA57  +
mov eax off_1018000 +
cmp eax edi +
jz loc_100FA57  +
test byte ptr [eax+1Ch] 4 +
jz loc_100FA57  +
call ds:GetLastError  +
push eax  +
push [ebp+var_8]  +
mov eax off_1018000 +
push esi  +
push 0Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1004DE7  +
mov eax [ebp+var_4] +
test eax eax +
jz loc_100FA64  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 20h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
cmp word ptr [esi+34h] 0 +
ja loc_100FB5F  +
cmp dword ptr [esi+3Ch] 0 +
jg loc_100FB5F  +
mov eax [esi+8] +
and [ebp+var_4] 0 +
mov ecx [eax] +
push edi  +
lea edx [ebp+var_4] +
push edx  +
push eax  +
call dword ptr [ecx+14h]  +
mov edi eax +
test edi edi +
jl loc_100FB20  +
mov eax [ebp+var_4] +
mov ecx [eax] +
lea edx [esi+4] +
push edx  +
push eax  +
call dword ptr [ecx+4Ch]  +
mov edi eax +
test edi edi +
jge loc_100FAEA  +
mov eax off_1018000 +
cmp eax offset off_1018000 +
jz loc_100FAEA  +
test byte ptr [eax+1Ch] 4 +
jz loc_100FAEA  +
call ds:GetLastError  +
push eax  +
mov eax off_1018000 +
push edi  +
push offset dword_10024C0  +
push 0Dh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1004DE7  +
mov eax [ebp+var_4] +
mov ecx [eax] +
push 2  +
push 0  +
push eax  +
call dword ptr [ecx+3Ch]  +
fld  [ebp+arg_4] +
push ecx  +
push ecx  +
fstp  [esp+30h+var_2C] +
mov ecx esi +
fld  [ebp+arg_0] +
fstp  [esp+30h+var_30] +
push [ebp+var_4]  +
call sub_100F8F9  +
test eax eax +
jz loc_100FB51  +
push [ebp+var_4]  +
mov ecx esi +
call sub_100F128  +
jmp loc_100FB51  +
mov eax off_1018000 +
cmp eax offset off_1018000 +
jz loc_100FB51  +
test byte ptr [eax+1Ch] 4 +
jz loc_100FB51  +
call ds:GetLastError  +
push eax  +
mov eax off_1018000 +
push edi  +
push offset dword_10024C0  +
push 0Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1004DE7  +
mov eax [ebp+var_4] +
pop edi  +
test eax eax +
jz loc_100FB5F  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
push edi  +
mov ebx ecx +
call sub_100F1C7  +
test eax eax +
jnz loc_100FC89  +
and [ebp+var_4] eax +
mov eax [ebx+8] +
mov ecx [eax] +
lea edx [ebp+var_4] +
push edx  +
push eax  +
call dword ptr [ecx+14h]  +
mov esi eax +
test esi esi +
jl loc_100FC4B  +
mov eax [ebp+var_4] +
mov ecx [eax] +
lea edx [ebx+4] +
push edx  +
push eax  +
call dword ptr [ecx+4Ch]  +
mov esi eax +
test esi esi +
jge loc_100FBDF  +
mov eax off_1018000 +
cmp eax offset off_1018000 +
jz loc_100FBDF  +
test byte ptr [eax+1Ch] 4 +
jz loc_100FBDF  +
call ds:GetLastError  +
push eax  +
mov eax off_1018000 +
push esi  +
push offset dword_10024C0  +
push 0Fh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1004DE7  +
mov eax [ebp+var_4] +
mov ecx [eax] +
push 3  +
push 0  +
push eax  +
call dword ptr [ecx+3Ch]  +
fld  [ebp+arg_20] +
sub esp 18h +
fstp  [esp+44h+var_34] +
mov edi esp +
lea esi [ebp+arg_10] +
movs   +
movs   +
movs   +
movs   +
sub esp 10h +
mov edi esp +
push [ebp+var_4]  +
lea esi [ebp+arg_0] +
movs   +
movs   +
movs   +
mov ecx ebx +
movs   +
call sub_100F7E0  +
test eax eax +
jz loc_100FC25  +
push [ebp+var_4]  +
mov ecx ebx +
call sub_100F128  +
jmp loc_100FC7C  +
mov eax off_1018000 +
cmp eax offset off_1018000 +
jz loc_100FC7C  +
test byte ptr [eax+1Ch] 10h +
jz loc_100FC7C  +
push offset dword_10024C0  +
push 10h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10030A0  +
jmp loc_100FC7C  +
mov eax off_1018000 +
cmp eax offset off_1018000 +
jz loc_100FC7C  +
test byte ptr [eax+1Ch] 4 +
jz loc_100FC7C  +
call ds:GetLastError  +
push eax  +
mov eax off_1018000 +
push esi  +
push offset dword_10024C0  +
push 11h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1004DE7  +
mov eax [ebp+var_4] +
test eax eax +
jz loc_100FC89  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 28h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call ds:??1DUIFactory@DirectUI@@QAE@XZ  +
test [ebp+arg_0] 1 +
jz loc_100FCB0  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
mov esi ecx +
mov [esi+94h] eax +
mov eax [ebp+arg_4] +
mov [esi+9Ch] eax +
mov eax [ebp+arg_8] +
push edi  +
mov [esi+0A0h] eax +
call ds:?Register@HWNDElement@DirectUI@@SGJXZ  +
push [ebp+arg_10]  +
mov ecx [esi+94h] +
push [ebp+arg_C]  +
push 0  +
push 0  +
call ds:?GetHWND@NativeHWNDHost@DirectUI@@QAEPAUHWND__@@XZ  +
push eax  +
mov ecx esi +
call ds:?Initialize@HWNDElement@DirectUI@@QAEJPAUHWND__@@_NIPAVElement@2@PAK@Z  +
mov edi eax +
test edi edi +
jl loc_100FDFC  +
push 1  +
mov ecx esi +
call ds:?SetVisible@Element@DirectUI@@QAEJ_N@Z  +
mov edi eax +
test edi edi +
jl loc_100FDFC  +
push 2  +
mov ecx esi +
call ds:?SetActive@Element@DirectUI@@QAEJH@Z  +
mov edi eax +
test edi edi +
jl loc_100FDFC  +
push 1  +
mov ecx esi +
call ds:?SetAccessible@Element@DirectUI@@QAEJ_N@Z  +
mov edi eax +
test edi edi +
jl loc_100FDFC  +
mov ecx [esi+94h] +
push esi  +
call ds:?Host@NativeHWNDHost@DirectUI@@QAEXPAVElement@2@@Z  +
push 1  +
mov ecx esi +
call ds:?DoubleBuffered@Element@DirectUI@@QAEX_N@Z  +
lea eax [ebp+arg_0] +
push eax  +
call ds:?Create@FillLayout@DirectUI@@SGJPAPAVLayout@2@@Z  +
mov edi eax +
test edi edi +
jl loc_100FDFC  +
push [ebp+arg_0]  +
mov ecx esi +
call ds:?SetLayout@Element@DirectUI@@QAEJPAVLayout@2@@Z  +
mov edi eax +
test edi edi +
jge loc_100FD92  +
mov ecx [ebp+arg_0] +
call ds:?Destroy@Layout@DirectUI@@QAEXXZ  +
jmp loc_100FDFC  +
push 10h  +
mov edi 80004005h +
call ??2@YAPAXI@Z  +
pop ecx  +
mov [ebp+arg_0] eax +
test eax eax +
jz loc_100FDBE  +
mov ecx [esi+94h] +
call ds:?GetHWND@NativeHWNDHost@DirectUI@@QAEPAUHWND__@@XZ  +
mov ecx [ebp+arg_0] +
push eax  +
call ds:??0DUIFactory@DirectUI@@QAE@PAUHWND__@@@Z  +
jmp loc_100FDC0  +
xor eax eax +
mov [esi+98h] eax +
test eax eax +
jz loc_100FDFC  +
push 0  +
lea ecx [ebp+arg_8] +
push ecx  +
movzx ecx word ptr [ebp+arg_8] +
push 0  +
push esi  +
push offset aMain  +
push ecx  +
push dword ptr [esi+9Ch]  +
mov ecx eax +
call ds:?LoadFromResource@DUIFactory@DirectUI@@QAEJPAUHINSTANCE__@@PBG1PAVElement@2@PAKPAPAV42@1@Z  +
mov edi eax +
test edi edi +
jl loc_100FDFC  +
push [ebp+arg_8]  +
mov ecx esi +
call ds:?Add@Element@DirectUI@@QAEJPAV12@@Z  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 38h +
cmp byte ptr [ebp+0Ch] 0 +
push esi  +
push edi  +
mov edi ecx +
jz loc_100FF82  +
test dword ptr [ebp+8] 10000h +
jz loc_100FF82  +
lea esi [edi+84h] +
cmp byte ptr [esi] 0 +
jz loc_100FF82  +
cmp byte ptr [edi+85h] 0 +
jnz loc_100FF82  +
push ebx  +
push dword ptr [ebp+0Ch]  +
mov byte ptr [esi] 0 +
push dword ptr [ebp+8]  +
call ds:?OnGroupChanged@HWNDElement@DirectUI@@UAEXH_N@Z  +
lea eax [ebp+8] +
push eax  +
mov ecx edi +
mov byte ptr [esi] 1 +
call ds:?GetExtent@Element@DirectUI@@QAEPBUtagSIZE@@PAPAVValue@2@@Z  +
push dword ptr [edi+78h]  +
mov ebx eax +
call ds:GetParent  +
mov edi eax +
mov [ebp+0Ch] edi +
test edi edi +
jz loc_100FF76  +
lea eax [ebp-10h] +
push eax  +
call ds:SetRectEmpty  +
mov esi ds:GetWindowLongW +
push 0FFFFFFECh  +
push edi  +
call esi  +
push eax  +
push 0  +
push 0FFFFFFF0h  +
push edi  +
call esi  +
push eax  +
lea eax [ebp-10h] +
push eax  +
call ds:AdjustWindowRectEx  +
mov esi [ebp-8] +
mov edi [ebp-4] +
sub esi [ebp-10h] +
sub edi [ebp-0Ch] +
lea eax [ebp-10h] +
push eax  +
push dword ptr [ebp+0Ch]  +
call ds:GetWindowRect  +
mov eax [ebx] +
add eax [ebp-10h] +
push 9  +
add eax esi +
mov [ebp-8] eax +
mov eax [ebx+4] +
add eax [ebp-0Ch] +
pop ecx  +
add eax edi +
mov [ebp-4] eax +
xor eax eax +
mov dword ptr [ebp-38h] 28h +
lea edi [ebp-34h] +
stos   +
lea eax [ebp-38h] +
push eax  +
push 2  +
push dword ptr [ebp+0Ch]  +
call ds:MonitorFromWindow  +
push eax  +
call ds:GetMonitorInfoW  +
mov eax [ebp-1Ch] +
sub eax [ebp-8] +
mov esi ds:OffsetRect +
jns loc_100FF16  +
xor edi edi +
push edi  +
push eax  +
lea eax [ebp-10h] +
push eax  +
call esi  +
jmp loc_100FF18  +
xor edi edi +
mov eax [ebp-18h] +
sub eax [ebp-4] +
jns loc_100FF28  +
push eax  +
push edi  +
lea eax [ebp-10h] +
push eax  +
call esi  +
mov eax [ebp-24h] +
sub eax [ebp-10h] +
cmp eax edi +
jle loc_100FF3A  +
push edi  +
push eax  +
lea eax [ebp-10h] +
push eax  +
call esi  +
mov eax [ebp-20h] +
sub eax [ebp-0Ch] +
cmp eax edi +
jle loc_100FF4C  +
push eax  +
push edi  +
lea eax [ebp-10h] +
push eax  +
call esi  +
mov eax [ebp-4] +
sub eax [ebp-0Ch] +
cmp eax 400h +
jge loc_100FF76  +
push 214h  +
push eax  +
mov eax [ebp-8] +
sub eax [ebp-10h] +
push eax  +
push dword ptr [ebp-0Ch]  +
push dword ptr [ebp-10h]  +
push edi  +
push dword ptr [ebp+0Ch]  +
call ds:SetWindowPos  +
mov ecx [ebp+8] +
call ds:?Release@Value@DirectUI@@QAEXXZ  +
pop ebx  +
jmp loc_100FF8E  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call ds:?OnGroupChanged@HWNDElement@DirectUI@@UAEXH_N@Z  +
pop edi  +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ebp+arg_0] +
push ebx  +
push esi  +
push edi  +
xor edi edi +
mov esi ecx +
mov [eax] edi +
cmp dword ptr [esi+0A0h] 0CBh +
mov ebx 80004005h +
jnz loc_1010005  +
push edi  +
push edi  +
push edi  +
push edi  +
lea eax [ebp+var_4] +
push eax  +
call ds:?Create@DUIXmlParser@DirectUI@@SGJPAPAV12@P6GPAVValue@2@PBGPAX@Z2P6GX11H2@Z2@Z  +
mov ebx eax +
cmp ebx edi +
jl loc_1010005  +
push 1000000h  +
push edi  +
call ds:GetModuleHandleW  +
mov ecx [ebp+var_4] +
push eax  +
push dword ptr [esi+0A0h]  +
call ds:?SetXMLFromResource@DUIXmlParser@DirectUI@@QAEJIPAUHINSTANCE__@@0@Z  +
mov ebx eax +
cmp ebx edi +
jl loc_100FFFC  +
mov eax [ebp+var_4] +
mov ecx [ebp+arg_0] +
mov [ecx] eax +
jmp loc_1010005  +
mov ecx [ebp+var_4] +
call ds:?Destroy@DUIXmlParser@DirectUI@@QAEXXZ  +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:?OnEvent@HWNDElement@DirectUI@@UAEXPAUEvent@2@@Z  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+dwBytes]  +
push 8  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
call ds:??0HWNDElement@DirectUI@@QAE@XZ  +
mov dword ptr [esi] offset off_10025A0 +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
mov ecx [esi+98h] +
mov dword ptr [esi] offset off_10025A0 +
test ecx ecx +
jz loc_101007A  +
push 1  +
call sub_100FC95  +
mov ecx esi +
pop esi  +
jmp ds:??1HWNDElement@DirectUI@@UAE@XZ  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_101005E  +
test byte ptr [ebp+8] 1 +
jz loc_10100A2  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_1010044  +
mov dword ptr [esi] offset off_1002668 +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_1002668 +
call sub_101005E  +
test byte ptr [ebp+8] 1 +
jz loc_10100E7  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
push 0A8h  +
call sub_1010024  +
mov esi eax +
test esi esi +
jz loc_101010D  +
mov ecx esi +
call sub_10100AE  +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_4] +
and dword ptr [ebx] 0 +
push esi  +
mov esi 0CBh +
cmp [ebp+arg_C] esi +
jz loc_1010134  +
mov eax 80070057h +
jmp loc_1010179  +
push edi  +
call sub_10100F3  +
mov edi eax +
test edi edi +
jnz loc_1010147  +
mov eax 8007000Eh +
jmp loc_1010178  +
push [ebp+arg_14]  +
mov ecx edi +
push 0  +
push esi  +
push [ebp+arg_8]  +
push [ebp+arg_0]  +
call sub_100FCBC  +
mov esi eax +
mov ecx edi +
test esi esi +
jge loc_101016E  +
push 1  +
call ds:?Destroy@Element@DirectUI@@QAEJ_N@Z  +
mov eax esi +
jmp loc_1010178  +
mov [ebx] edi +
mov eax [edi] +
call dword ptr [eax+0C4h]  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 248h +
mov eax dword_101852C +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov esi ecx +
mov [ebp+var_244] esi +
mov [ebp+hWnd] edi +
call ds:CreatePopupMenu  +
mov [ebp+var_208] eax +
test eax eax +
jz loc_1010483  +
push ebx  +
push edi  +
call ds:SetForegroundWindow  +
lea eax [ebp+var_20C] +
push eax  +
call ds:DwmIsCompositionEnabled  +
mov ecx [esi+0A4h] +
push 4  +
call sub_1010A90  +
push 2Ch  +
mov [ebp+var_210] eax +
lea eax [ebp+var_240.fMask] +
push 0  +
push eax  +
call memset  +
mov eax [ebp+var_20C] +
mov edi ds:LoadStringW +
add esp 0Ch +
neg eax  +
sbb eax eax +
and eax 0FFFFFFFDh +
add eax 3 +
mov [ebp+var_240.fState] eax +
mov ebx 100h +
push ebx  +
lea eax [ebp+Buffer] +
push eax  +
push 0ABh  +
push hmod  +
mov [ebp+var_240.cbSize] 30h +
mov [ebp+var_240.fMask] 13h +
mov [ebp+var_240.fType] 200h +
mov [ebp+var_240.wID] 8010h +
call edi  +
lea eax [ebp+Buffer] +
mov [ebp+var_240.dwTypeData] eax +
lea ecx [eax+2] +
mov dx [eax] +
inc eax  +
inc eax  +
test dx dx +
jnz loc_1010268  +
mov esi ds:InsertMenuItemW +
sub eax ecx +
sar eax 1 +
mov [ebp+var_240.cch] eax +
lea eax [ebp+var_240] +
push eax  +
push 1  +
push 0  +
push [ebp+var_208]  +
call esi  +
mov eax [ebp+var_20C] +
neg eax  +
sbb eax eax +
and eax 0FFFFFFFDh +
add eax 3 +
push ebx  +
mov [ebp+var_240.fState] eax +
lea eax [ebp+Buffer] +
push eax  +
push 0ACh  +
push hmod  +
mov [ebp+var_240.wID] 800Fh +
call edi  +
lea eax [ebp+Buffer] +
mov [ebp+var_240.dwTypeData] eax +
lea ecx [eax+2] +
mov dx [eax] +
inc eax  +
inc eax  +
test dx dx +
jnz loc_10102D9  +
sub eax ecx +
sar eax 1 +
mov [ebp+var_240.cch] eax +
lea eax [ebp+var_240] +
push eax  +
push 1  +
push 1  +
push [ebp+var_208]  +
call esi  +
and [ebp+var_240.fState] 0 +
push ebx  +
lea eax [ebp+Buffer] +
push eax  +
push 0AEh  +
push hmod  +
mov [ebp+var_240.wID] 8011h +
call edi  +
lea eax [ebp+Buffer] +
mov [ebp+var_240.dwTypeData] eax +
lea ecx [eax+2] +
mov dx [eax] +
inc eax  +
inc eax  +
test dx dx +
jnz loc_1010335  +
sub eax ecx +
sar eax 1 +
mov [ebp+var_240.cch] eax +
lea eax [ebp+var_240] +
push eax  +
push 1  +
push 2  +
push [ebp+var_208]  +
call esi  +
xor eax eax +
mov [ebp+var_240.wID] eax +
mov [ebp+var_240.dwTypeData] eax +
mov [ebp+var_240.cch] eax +
lea eax [ebp+var_240] +
push eax  +
push 1  +
push 3  +
push [ebp+var_208]  +
mov [ebp+var_240.fType] 800h +
call esi  +
xor eax eax +
cmp [ebp+var_210] 2 +
mov [ebp+var_240.fType] eax +
mov [ebp+var_240.wID] 800Eh +
jnz loc_10103CD  +
cmp [ebp+var_20C] eax +
jz loc_10103CD  +
mov eax [ebp+var_244] +
mov ecx [eax+0A4h] +
push 0Eh  +
call sub_1010A90  +
xor ecx ecx +
cmp eax 64h +
setnle cl  +
mov eax ecx +
neg eax  +
sbb eax eax +
and eax 0FFFFFFFDh +
add eax 3 +
push ebx  +
mov [ebp+var_240.fState] eax +
lea eax [ebp+Buffer] +
push eax  +
push 0ADh  +
push hmod  +
call edi  +
lea eax [ebp+Buffer] +
mov [ebp+var_240.dwTypeData] eax +
lea ecx [eax+2] +
pop ebx  +
mov dx [eax] +
inc eax  +
inc eax  +
test dx dx +
jnz loc_1010402  +
mov edi [ebp+var_208] +
sub eax ecx +
sar eax 1 +
mov [ebp+var_240.cch] eax +
lea eax [ebp+var_240] +
push eax  +
push 1  +
push 4  +
push edi  +
call esi  +
mov eax [ebp+var_210] +
dec eax  +
jz loc_1010456  +
dec eax  +
jz loc_1010448  +
dec eax  +
jnz loc_101046B  +
push eax  +
mov eax 800Fh +
push eax  +
push 8011h  +
push eax  +
jmp loc_1010464  +
push 0  +
push 8010h  +
push 8011h  +
jmp loc_101045F  +
push 0  +
mov eax 8011h +
push eax  +
push eax  +
push 800Fh  +
push edi  +
call ds:CheckMenuRadioItem  +
xor eax eax +
push eax  +
push [ebp+hWnd]  +
push eax  +
push [ebp+y]  +
push [ebp+x]  +
push eax  +
push edi  +
call ds:TrackPopupMenu  +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_10149A5  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
lea eax [ebp+arg_4] +
push eax  +
mov eax [ebp+arg_4] +
call dword ptr [eax]  +
mov ecx eax +
mov eax [ebp+arg_0] +
mov eax [eax] +
sub eax [ecx] +
neg eax  +
sbb eax eax +
inc eax  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
push ebx  +
push esi  +
mov esi [ebp+8] +
cmp dword ptr [esi+0Ch] 2 +
push edi  +
mov ebx ecx +
jnz loc_1010617  +
mov ecx [esi] +
call ds:?GetID@Element@DirectUI@@QAEGXZ  +
movzx eax ax +
mov [ebp-4] eax +
mov eax ds:?Click@Button@DirectUI@@SG?AVUID@@XZ +
mov [ebp+8] eax +
lea eax [ebp+8] +
push eax  +
lea eax [esi+4] +
push eax  +
call sub_1010498  +
test al al +
jz loc_1010617  +
mov ecx [ebx+94h] +
call ds:?GetHWND@NativeHWNDHost@DirectUI@@QAEPAUHWND__@@XZ  +
push offset aZoomout  +
mov edi eax +
call StrToID  +
movzx eax ax +
push eax  +
mov ecx ebx +
call ds:?FindDescendent@Element@DirectUI@@QAEPAV12@G@Z  +
test eax eax +
jz loc_101053B  +
call ds:GetForegroundWindow  +
cmp edi eax +
jz loc_101053B  +
mov eax [ebx] +
mov ecx ebx +
call dword ptr [eax+54h]  +
push offset aZoomin  +
call StrToID  +
cmp [ebp-4] ax +
setz byte ptr [ebp+0Bh]  +
cmp byte ptr [ebp+0Bh] 0 +
jnz loc_10105F9  +
push offset aZoomout  +
call StrToID  +
cmp [ebp-4] ax +
jz loc_10105F9  +
push offset aViewlist  +
call StrToID  +
cmp [ebp-4] ax +
jnz loc_10105C9  +
mov ecx [esi] +
and dword ptr [ebp+8] 0 +
lea eax [ebp+8] +
push eax  +
call ds:?GetLocation@Element@DirectUI@@QAEPBUtagPOINT@@PAPAVValue@2@@Z  +
mov ecx [ebp+8] +
mov esi [eax] +
call ds:?Release@Value@DirectUI@@QAEXXZ  +
lea eax [ebp-18h] +
push eax  +
push edi  +
call ds:GetClientRect  +
mov eax [ebp-0Ch] +
push 1  +
mov [ebp-4] eax +
lea eax [ebp-8] +
push eax  +
push 0  +
push edi  +
mov [ebp-8] esi +
call ds:MapWindowPoints  +
push dword ptr [ebp-4]  +
mov ecx ebx +
push dword ptr [ebp-8]  +
push edi  +
call sub_1010184  +
jmp loc_101061F  +
push offset aOptions  +
call StrToID  +
cmp [ebp-4] ax +
jnz loc_10105E2  +
push 0  +
push 800Dh  +
jmp loc_1010609  +
push offset aHelp  +
call StrToID  +
cmp [ebp-4] ax +
jnz loc_1010617  +
call sub_100A7CC  +
jmp loc_101061F  +
xor eax eax +
cmp [ebp+0Bh] al +
push 0  +
setz al  +
add eax 800Ah +
push eax  +
push 111h  +
push edi  +
call ds:PostMessageW  +
jmp loc_101061F  +
push esi  +
mov ecx ebx +
call sub_1010013  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi [ebp+8] +
mov eax [esi+8] +
mov [ebp-4] ecx +
test eax eax +
jz loc_1010644  +
cmp eax 2 +
jnz loc_1010687  +
cmp dword ptr [esi+0Ch] 1 +
jnz loc_1010687  +
cmp dword ptr [esi+10h] 1 +
jnz loc_1010687  +
cmp word ptr [esi+18h] 0Dh +
jnz loc_1010687  +
push ebx  +
push edi  +
call ds:?GetKeyFocusedElement@HWNDElement@DirectUI@@SGPAVElement@2@XZ  +
mov edi eax +
call ds:?GetClassInfoPtr@CCPushButton@DirectUI@@SGPAUIClassInfo@2@XZ  +
mov ebx eax +
mov eax [edi] +
mov ecx edi +
call dword ptr [eax+80h]  +
cmp eax ebx +
jnz loc_1010681  +
mov eax [edi] +
mov ecx edi +
call dword ptr [eax+88h]  +
pop edi  +
mov byte ptr [esi+4] 1 +
pop ebx  +
cmp byte ptr [esi+4] 0 +
jnz loc_1010697  +
mov ecx [ebp-4] +
push esi  +
call ds:?OnInput@HWNDElement@DirectUI@@UAEXPAUInputEvent@2@@Z  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 3Ch +
push esi  +
mov esi ecx +
mov ecx [esi+0A4h] +
call sub_1010AE0  +
test al al +
jnz loc_10106C2  +
xor eax eax +
jmp loc_1010887  +
push edi  +
lea eax [ebp+hKey] +
push eax  +
xor edi edi +
inc edi  +
push edi  +
push 0  +
push offset aSoftwareMicr_2  +
push 80000001h  +
call ds:RegOpenKeyExW  +
test eax eax +
jz loc_10106E8  +
xor eax eax +
jmp loc_1010886  +
push ebx  +
mov ebx offset off_1018214 +
lea eax [ebp+cbData] +
push eax  +
lea eax [ebp+Data] +
push eax  +
push 0  +
push 0  +
push dword ptr [ebx]  +
mov [ebp+cbData] 4 +
push [ebp+hKey]  +
call ds:RegQueryValueExW  +
test eax eax +
jnz loc_101072A  +
mov ecx [esi+0A4h] +
push edi  +
push [ebp+Data]  +
push dword ptr [ebx+4]  +
call sub_1010BE4  +
test eax eax +
jnz loc_101086C  +
add ebx 8 +
cmp ebx offset unk_1018244 +
jb loc_10106EE  +
lea eax [ebp+cbData] +
push eax  +
lea eax [ebp+var_3C] +
push eax  +
xor ebx ebx +
push ebx  +
push ebx  +
push offset aAppbar  +
push [ebp+hKey]  +
mov [ebp+cbData] 30h +
call ds:RegQueryValueExW  +
test eax eax +
jnz loc_101087A  +
mov eax [ebp+var_38] +
cmp eax edi +
jz loc_1010827  +
cmp eax 3 +
jz loc_1010827  +
cmp eax ebx +
jz loc_1010827  +
cmp eax 2 +
jz loc_1010827  +
push edi  +
push ebx  +
mov ecx [esi+0A4h] +
push 6  +
call sub_1010BE4  +
cmp eax ebx +
jnz loc_101086C  +
mov ecx [esi+0A4h] +
push edi  +
push [ebp+var_1C]  +
push 8  +
call sub_1010BE4  +
cmp eax ebx +
jnz loc_101086C  +
mov ecx [esi+0A4h] +
push edi  +
push [ebp+var_18]  +
push 9  +
call sub_1010BE4  +
cmp eax ebx +
jnz loc_101086C  +
mov eax [ebp+var_14] +
sub eax [ebp+var_1C] +
mov ecx [esi+0A4h] +
push edi  +
push eax  +
push 0Ah  +
call sub_1010BE4  +
cmp eax ebx +
jnz loc_101086C  +
mov eax [ebp+var_10] +
sub eax [ebp+var_18] +
mov ecx [esi+0A4h] +
push edi  +
push eax  +
push 0Bh  +
call sub_1010BE4  +
cmp eax ebx +
jnz loc_101086C  +
cmp [ebp+var_2C] ebx +
jz loc_1010847  +
push edi  +
push [ebp+var_2C]  +
mov ecx [esi+0A4h] +
push 0Ch  +
call sub_1010BE4  +
cmp eax ebx +
jnz loc_101086C  +
cmp [ebp+var_28] ebx +
jz loc_1010852  +
push edi  +
push [ebp+var_28]  +
jmp loc_101085B  +
mov ecx [esi+0A4h] +
push edi  +
push dword_1018204[eax*4]  +
push 7  +
call sub_1010BE4  +
cmp eax ebx +
jnz loc_101086C  +
push edi  +
push edi  +
jmp loc_1010785  +
cmp [ebp+var_24] ebx +
jz loc_101081C  +
push edi  +
push [ebp+var_24]  +
jmp loc_101080B  +
cmp [ebp+var_20] ebx +
jz loc_101087A  +
push edi  +
push [ebp+var_20]  +
mov ecx [esi+0A4h] +
push 0Dh  +
call sub_1010BE4  +
cmp eax ebx +
jz loc_101087A  +
jle loc_1010885  +
and eax 0FFFFh +
or eax 80070000h +
jmp loc_1010885  +
push [ebp+hKey]  +
call ds:RegCloseKey  +
xor eax eax +
pop ebx  +
pop edi  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push ebx  +
push esi  +
push edi  +
mov edi ecx +
lea esi [edi+0A4h] +
push esi  +
call sub_1010CF9  +
xor ebx ebx +
cmp eax ebx +
jl loc_10109FB  +
mov ecx edi +
mov [ebp+var_8] 5 +
call sub_10106A1  +
cmp eax ebx +
jl loc_10109FB  +
call sub_1004872  +
test eax eax +
jz loc_1010945  +
mov ecx [esi] +
push 10h  +
call sub_1010A90  +
xor ecx ecx +
test eax eax +
setnle cl  +
push ecx  +
call sub_1004872  +
mov ecx eax +
call sub_101103A  +
mov ecx [esi] +
push 11h  +
call sub_1010A90  +
xor ecx ecx +
test eax eax +
setnle cl  +
push ecx  +
call sub_1004872  +
mov ecx eax +
call sub_100D493  +
mov ecx [esi] +
push 12h  +
call sub_1010A90  +
xor ecx ecx +
test eax eax +
setnle cl  +
push ecx  +
call sub_1004872  +
mov ecx eax +
call sub_10131FF  +
mov ecx [esi] +
push 0Fh  +
call sub_1010A90  +
xor ecx ecx +
test eax eax +
setnle cl  +
push ecx  +
call sub_1004872  +
mov ecx eax +
call sub_1010FF3  +
push 20019h  +
push offset aSystemSetup  +
push 80000002h  +
lea ecx [ebp+var_14] +
mov dword ptr [ebp+Data] ebx +
mov [ebp+var_14] ebx +
mov [ebp+var_10] ebx +
mov [ebp+var_C] ebx +
call sub_100C56C  +
test eax eax +
jnz loc_1010984  +
lea eax [ebp+Data] +
push eax  +
push offset aOobeinprogress  +
lea ecx [ebp+var_14] +
call sub_100C5A8  +
test eax eax +
jz loc_1010984  +
mov dword ptr [ebp+Data] ebx +
lea eax [ebp+var_8] +
push eax  +
call sub_1003450  +
test eax eax +
jl loc_10109C2  +
cmp [ebp+var_8] 1 +
jnz loc_10109C2  +
cmp dword ptr [ebp+Data] ebx +
jnz loc_10109C2  +
push offset aHelpdisabled  +
call StrToID  +
movzx eax ax +
push eax  +
mov ecx edi +
call ds:?FindDescendent@Element@DirectUI@@QAEPAV12@G@Z  +
cmp eax ebx +
jz loc_10109F1  +
push 0FFFFFFFDh  +
mov ecx eax +
call ds:?SetLayoutPos@Element@DirectUI@@QAEJH@Z  +
jmp loc_10109F1  +
push offset aHelp  +
call StrToID  +
movzx eax ax +
push eax  +
mov ecx edi +
call ds:?FindDescendent@Element@DirectUI@@QAEPAV12@G@Z  +
mov esi eax +
cmp esi ebx +
jz loc_10109F1  +
push 0FFFFFFFDh  +
mov ecx esi +
call ds:?SetLayoutPos@Element@DirectUI@@QAEJH@Z  +
push ebx  +
mov ecx esi +
call ds:?SetEnabled@Element@DirectUI@@QAEJ_N@Z  +
lea ecx [ebp+var_14] +
call sub_100C54E  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
push edi  +
mov edi ecx +
xor ebx ebx +
cmp [edi] ebx +
jnz loc_1010A31  +
push edi  +
push 1  +
push ebx  +
push offset aSoftwareMicr_1  +
push 80000001h  +
call ds:RegOpenKeyExW  +
test eax eax +
jz loc_1010A31  +
mov [edi] ebx +
mov esi offset dword_1018250 +
mov eax [edi] +
cmp eax ebx +
jz loc_1010A7B  +
lea ecx [ebp+cbData] +
push ecx  +
lea ecx [ebp+Data] +
push ecx  +
push ebx  +
push ebx  +
push dword ptr [esi-8]  +
mov [ebp+cbData] 4 +
push eax  +
call ds:RegQueryValueExW  +
test eax eax +
jnz loc_1010A7B  +
cmp [esi-4] ebx +
jz loc_1010A75  +
mov eax [esi] +
cmp dword ptr [ebp+Data] eax +
jge loc_1010A6A  +
mov dword ptr [ebp+Data] eax +
mov eax [esi+4] +
cmp dword ptr [ebp+Data] eax +
jle loc_1010A75  +
mov dword ptr [ebp+Data] eax +
mov eax dword ptr [ebp+Data] +
mov [esi+0Ch] eax +
add esi 1Ch +
cmp esi offset unk_101850C +
jl loc_1010A36  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
cmp eax 18h +
ja loc_1010AA8  +
imul eax eax +
mov eax dword_101825C[eax] +
jmp loc_1010AAB  +
or eax 0FFFFFFFFh +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
push edx  +
call sub_1010A90  +
imul edx edx +
mov [ebp+arg_0] eax +
fild  [ebp+arg_0] +
fidiv  flt_1018258[edx] +
fstp  [ebp+arg_0] +
fld  [ebp+arg_0] +
pop ebp  +
retn 4  +
***
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi dword ptr [ebp+Data] +
push edi  +
mov edi ecx +
cmp esi 18h +
ja loc_1010B47  +
cmp esi 0Fh +
jnz loc_1010B16  +
cmp dword_1018400 1 +
jnz loc_1010B16  +
push 1  +
push 1734h  +
push 0  +
call WinSqmIncrementDWORD  +
imul esi esi +
mov eax dword_101825C[esi] +
push 4  +
mov dword ptr [ebp+Data] eax +
lea eax [ebp+Data] +
push eax  +
push 4  +
push 0  +
push off_1018248[esi]  +
push dword ptr [edi+4]  +
call ds:RegSetValueExW  +
test eax eax +
jnz loc_1010B4A  +
and dword_1018260[esi] eax +
jmp loc_1010B4A  +
push 57h  +
pop eax  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebx  +
push esi  +
push edi  +
xor eax eax +
mov ebx ecx +
xor edi edi +
mov esi offset dword_1018260 +
cmp dword ptr [esi] 0 +
jz loc_1010B76  +
push edi  +
mov ecx ebx +
call sub_1010AE9  +
test eax eax +
jnz loc_1010B82  +
add esi 1Ch +
inc edi  +
cmp esi offset unk_101851C +
jl loc_1010B65  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov edi edi +
push esi  +
push edi  +
mov esi ecx +
call sub_1010B55  +
mov eax [esi] +
mov edi ds:RegCloseKey +
test eax eax +
jz loc_1010BA8  +
push eax  +
call edi  +
and dword ptr [esi] 0 +
mov eax [esi+4] +
test eax eax +
jz loc_1010BB6  +
push eax  +
call edi  +
and dword ptr [esi+4] 0 +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1010B8B  +
test [ebp+arg_0] 1 +
jz loc_1010BD8  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ebp+Data] 18h +
ja loc_1010C3C  +
mov eax dword ptr [ebp+Data] +
mov edx [ebp+arg_4] +
imul eax eax +
cmp dword_101824C[eax] 0 +
push esi  +
mov dword_1018260[eax] 1 +
jz loc_1010C24  +
mov esi dword_1018250[eax] +
cmp edx esi +
jge loc_1010C18  +
mov edx esi +
mov esi dword_1018254[eax] +
cmp edx esi +
jle loc_1010C24  +
mov edx esi +
mov dword_101825C[eax] edx +
xor eax eax +
pop esi  +
cmp [ebp+arg_8] al +
jz loc_1010C3F  +
push dword ptr [ebp+Data]  +
call sub_1010AE9  +
jmp loc_1010C3F  +
push 57h  +
pop eax  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
push edi  +
mov esi ecx +
push esi  +
xor eax eax +
push 1  +
push eax  +
mov ebx offset aSoftwareMicr_1 +
push ebx  +
mov edi 80000001h +
push edi  +
mov [esi+4] eax +
mov [esi] eax +
call ds:RegOpenKeyExW  +
test eax eax +
setnz al  +
mov [esi+8] al +
lea eax [ebp+var_4] +
push eax  +
mov [ebp+var_4] 5 +
call sub_1003450  +
test eax eax +
jl loc_1010C93  +
cmp [ebp+var_4] 1 +
jz loc_1010CAD  +
push 1  +
push 1  +
push 12h  +
mov ecx esi +
call sub_1010BE4  +
push 1  +
push 1  +
push 11h  +
mov ecx esi +
call sub_1010BE4  +
lea eax [ebp+dwDisposition] +
push eax  +
lea eax [esi+4] +
push eax  +
xor eax eax +
push eax  +
push 3  +
push eax  +
push eax  +
push eax  +
push ebx  +
push edi  +
call ds:RegCreateKeyExW  +
test eax eax +
jz loc_1010CCD  +
and dword ptr [esi+4] 0 +
cmp dword ptr [esi] 0 +
jnz loc_1010CE6  +
push esi  +
push 1  +
push 0  +
push ebx  +
push edi  +
call ds:RegOpenKeyExW  +
test eax eax +
jz loc_1010CE6  +
and dword ptr [esi] 0 +
mov ecx esi +
call sub_1010A05  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
and dword ptr [esi] 0 +
mov eax dword_10186B4 +
test eax eax +
jnz loc_1010D35  +
push 0Ch  +
call ??2@YAPAXI@Z  +
pop ecx  +
test eax eax +
jz loc_1010D23  +
mov ecx eax +
call sub_1010C48  +
jmp loc_1010D25  +
xor eax eax +
mov dword_10186B4 eax +
test eax eax +
jnz loc_1010D35  +
mov eax 8007000Eh +
jmp loc_1010D39  +
mov [esi] eax +
xor eax eax +
pop esi  +
pop ebp  +
retn 4  +
***
mov ecx dword_10186B4 +
test ecx ecx +
jz locret_1010D5B  +
push 1  +
call sub_1010BBE  +
and dword_10186B4 0 +
retn   +
***
or eax 0FFFFFFFFh +
push esi  +
mov esi ecx +
and dword ptr [esi+2Ch] 0 +
mov [esi+14h] eax +
mov [esi+18h] eax +
mov [esi+1Ch] eax +
mov [esi+20h] eax +
mov [esi+24h] eax +
mov [esi+28h] eax +
mov [esi+30h] eax +
mov [esi+34h] eax +
mov [esi+38h] eax +
mov [esi+3Ch] eax +
call ds:GetTickCount  +
mov [esi+88h] eax +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 50h +
push ebx  +
push esi  +
push edi  +
lea eax [ebp+hwnd] +
push eax  +
push 0  +
mov esi ecx +
mov [ebp+hwnd] 30h +
call ds:GetGUIThreadInfo  +
mov ebx [ebp+ppvObject] +
and dword ptr [ebx] 0 +
mov edi [ebp+arg_0] +
mov eax [ebp-34h] +
add esi 44h +
movs   +
movs   +
movs   +
movs   +
test eax eax +
jnz loc_1010DDE  +
mov eax [ebp-44h] +
test eax eax +
jz loc_1010E82  +
and [ebp+ppvObject] 0 +
and [ebp+var_18] 0 +
push 3  +
pop ecx  +
mov word ptr [ebp+var_20] cx +
lea ecx [ebp+ppvObject] +
push ecx  +
push offset stru_1001630  +
push 0FFFFFFF8h  +
push eax  +
call AccessibleObjectFromWindow  +
test eax eax +
jnz loc_1010E54  +
mov eax [ebp+ppvObject] +
mov ecx [eax] +
sub esp 10h +
mov edi esp +
lea esi [ebp+var_20] +
movs   +
lea edx [ebp+var_4] +
push edx  +
lea edx [ebp+var_8] +
push edx  +
movs   +
lea edx [ebp+var_C] +
push edx  +
lea edx [ebp+var_10] +
movs   +
push edx  +
push eax  +
movs   +
call dword ptr [ecx+58h]  +
mov esi eax +
mov eax [ebp+ppvObject] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
test esi esi +
jnz loc_1010E82  +
mov eax [ebp+var_10] +
add [ebp+var_8] eax +
mov eax [ebp+var_C] +
add [ebp+var_4] eax +
mov edi [ebp+lpPoints] +
mov dword ptr [ebx] 1 +
lea esi [ebp+var_10] +
movs   +
movs   +
movs   +
movs   +
jmp loc_1010E82  +
mov eax [ebp-4Ch] +
and al 1 +
xor ecx ecx +
cmp al 1 +
setz cl  +
mov eax ecx +
mov [ebx] eax +
test eax eax +
jz loc_1010E82  +
mov edi [ebp+lpPoints] +
lea esi [ebp-30h] +
movs   +
movs   +
push 2  +
push [ebp+lpPoints]  +
movs   +
push 0  +
push dword ptr [ebp-34h]  +
movs   +
call ds:MapWindowPoints  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
mov eax [esi+8] +
sub eax [esi] +
push edi  +
mov edi ds:GetSystemMetrics +
mov [ebp+arg_0] eax +
mov eax [esi+0Ch] +
sub eax [esi+4] +
push 4Ch  +
mov [ebp+var_4] eax +
call edi  +
push 4Dh  +
mov [ebp+var_14] eax +
call edi  +
push 4Eh  +
mov [ebp+var_10] eax +
call edi  +
mov ebx eax +
add ebx [ebp+var_14] +
push 4Fh  +
call edi  +
mov edi [ebp+var_14] +
mov ecx eax +
mov eax [ebp+var_10] +
mov edx ebx +
sub edx edi +
add ecx eax +
cmp [ebp+arg_0] edx +
jg loc_1010EFD  +
cmp [esi] edi +
jge loc_1010EEE  +
mov edx [ebp+arg_0] +
mov [esi] edi +
add edi edx +
jmp loc_1010F14  +
cmp [esi+8] ebx +
jle loc_1010F17  +
mov [esi+8] ebx +
sub ebx [ebp+arg_0] +
mov [esi] ebx +
jmp loc_1010F17  +
mov eax edi +
sub eax ebx +
mov ebx [ebp+arg_0] +
add eax ebx +
cdq   +
sub eax edx +
sar eax 1 +
sub edi eax +
mov eax [ebp+var_10] +
mov [esi] edi +
add edi ebx +
mov [esi+8] edi +
mov edi [ebp+var_4] +
mov edx ecx +
sub edx eax +
cmp edi edx +
jg loc_1010F36  +
cmp [esi+4] eax +
jl loc_1010F46  +
cmp [esi+0Ch] ecx +
jle loc_1010F4E  +
mov [esi+0Ch] ecx +
sub ecx edi +
mov [esi+4] ecx +
jmp loc_1010F4E  +
sub eax ecx +
add eax edi +
cdq   +
sub eax edx +
mov ecx eax +
mov eax [ebp+var_10] +
sar ecx 1 +
sub eax ecx +
mov [esi+4] eax +
add eax edi +
mov [esi+0Ch] eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 24h +
push esi  +
mov esi ecx +
mov eax [esi] +
push edi  +
xor edi edi +
cmp eax edi +
jz loc_1010F83  +
push eax  +
call ds:IsWindow  +
test eax eax +
jz loc_1010F83  +
push dword ptr [esi]  +
call ds:DestroyWindow  +
mov [esi] edi +
mov eax [esi+10h] +
push edi  +
push hmod  +
neg eax  +
push edi  +
push [ebp+hWndParent]  +
sbb eax eax +
push 1  +
push 1  +
push edi  +
push edi  +
and eax 4 +
or eax 50000001h +
push eax  +
push offset aMagnifierwindo  +
push offset aMagnifier  +
push edi  +
call ds:CreateWindowExW  +
fld  dword ptr [esi+40h] +
fstp  [ebp+var_24] +
lea ecx [ebp+var_24] +
fldz   +
push ecx  +
fst  [ebp+var_20] +
push eax  +
fst  [ebp+var_1C] +
mov [esi] eax +
fst  [ebp+var_18] +
fld  dword ptr [esi+40h] +
fstp  [ebp+var_14] +
fst  [ebp+var_10] +
fst  [ebp+var_C] +
fstp  [ebp+var_8] +
fld1   +
fstp  [ebp+var_4] +
call MagSetWindowTransform  +
mov eax [esi] +
pop edi  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov esi ecx +
push dword ptr [esi]  +
mov [esi+10h] edi +
call ds:IsWindow  +
test eax eax +
jz loc_101102F  +
push 0FFFFFFF0h  +
push dword ptr [esi]  +
call ds:GetWindowLongW  +
test edi edi +
jz loc_1011021  +
or eax 4 +
jmp loc_1011024  +
and eax 0FFFFFFFBh +
push eax  +
push 0FFFFFFF0h  +
push dword ptr [esi]  +
call ds:SetWindowLongW  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov [ecx+4] eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0E0h +
mov eax dword_101852C +
xor eax ebp +
mov [ebp+var_4] eax +
mov ecx [ebp+arg_4] +
mov eax [ebp+hWnd] +
push esi  +
push edi  +
mov [ebp+var_D0] ecx +
push 64h  +
lea ecx [ebp+String1] +
push ecx  +
push eax  +
call ds:GetClassNameW  +
mov esi ds:CompareStringW +
or edi 0FFFFFFFFh +
push edi  +
push offset aToolbarwindow3  +
push edi  +
lea eax [ebp+String1] +
push eax  +
push 1  +
push 7Fh  +
call esi  +
cmp eax 2 +
jz loc_101110E  +
push edi  +
push offset aInternetExplor  +
push edi  +
lea eax [ebp+String1] +
push eax  +
push 1  +
push 7Fh  +
call esi  +
cmp eax 2 +
jz loc_101110E  +
push edi  +
push offset aStatic  +
push edi  +
lea eax [ebp+String1] +
push eax  +
push 1  +
push 7Fh  +
call esi  +
cmp eax 2 +
jz loc_101110E  +
lea eax [ebp+pvarg] +
push eax  +
call ds:VariantInit  +
mov eax [ebp+var_D0] +
mov ecx [eax] +
lea edx [ebp+pvarg] +
push edx  +
sub esp 10h +
mov edi esp +
lea esi [ebp+arg_8] +
movs   +
movs   +
movs   +
push eax  +
movs   +
call dword ptr [ecx+38h]  +
test eax eax +
jnz loc_101110E  +
test byte ptr [ebp+pvarg.anonymous_0+8] 4 +
jz loc_1011111  +
xor eax eax +
inc eax  +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_10149A5  +
leave   +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
mov ebx [ebp+lprc] +
push esi  +
push edi  +
push ebx  +
call ds:SetRectEmpty  +
mov esi [ebp+arg_4] +
sub esp 10h +
mov edi esp +
movs   +
lea eax [ebx+0Ch] +
push eax  +
lea ecx [ebx+8] +
lea edx [ebx+4] +
mov [ebp+lprc] edx +
mov edx [ebp+arg_0] +
mov edx [edx] +
movs   +
push ecx  +
push [ebp+lprc]  +
movs   +
push ebx  +
push [ebp+arg_0]  +
mov [ebp+var_8] eax +
mov [ebp+var_4] ecx +
movs   +
call dword ptr [edx+58h]  +
test eax eax +
jz loc_1011171  +
xor eax eax +
jmp loc_1011185  +
mov ecx [ebx] +
mov eax [ebp+var_4] +
add [eax] ecx +
mov eax [ebp+lprc] +
mov ecx [eax] +
mov eax [ebp+var_8] +
add [eax] ecx +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx dword_10186B8 +
test ecx ecx +
jz loc_10111A6  +
mov eax [ecx] +
pop ebp  +
jmp dword ptr [eax+8]  +
pop ebp  +
retn 1Ch  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi] +
push edi  +
test eax eax +
jz loc_10111C5  +
push eax  +
call ds:DestroyWindow  +
and dword ptr [esi] 0 +
push 8  +
add esi 68h +
pop edi  +
mov eax [esi] +
test eax eax +
jz loc_10111D8  +
push eax  +
call ds:UnhookWinEvent  +
add esi 4 +
dec edi  +
jnz loc_10111CB  +
mov ecx dword_10186B8 +
pop edi  +
pop esi  +
test ecx ecx +
jz locret_10111F0  +
mov eax [ecx] +
push 1  +
call dword ptr [eax]  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 60h +
push ebx  +
push esi  +
mov ebx ecx +
mov eax [ebx] +
push edi  +
xor edi edi +
cmp eax edi +
jz loc_10114D8  +
push eax  +
call ds:IsWindow  +
test eax eax +
jz loc_10114D8  +
or esi 0FFFFFFFFh +
mov [ebp+var_20] esi +
mov [ebp+var_1C] esi +
mov [ebp+var_18] esi +
mov [ebp+var_14] esi +
call ds:GetTickCount  +
mov [ebp+var_4] eax +
lea eax [ebp+ppvObject] +
push eax  +
lea eax [ebp+Points] +
push eax  +
lea eax [ebp+rc1] +
push eax  +
mov ecx ebx +
call sub_1010D9C  +
cmp [ebx+0Ch] edi +
jz loc_10112AC  +
mov eax [ebp+ppvObject] +
cmp eax edi +
jz loc_10112A9  +
cmp [ebx+4] edi +
jz loc_101126B  +
mov ecx [ebp+var_4] +
sub ecx [ebx+88h] +
cmp ecx 0FAh +
jbe loc_101129A  +
cmp [ebx+2Ch] edi +
jz loc_1011290  +
mov ecx [ebp+Points.x] +
cmp ecx [ebx+30h] +
jnz loc_1011290  +
mov ecx [ebp+Points.y] +
cmp ecx [ebx+34h] +
jnz loc_1011290  +
mov ecx [ebp+var_38] +
cmp ecx [ebx+38h] +
jnz loc_1011290  +
mov ecx [ebp+var_34] +
cmp ecx [ebx+3Ch] +
jz loc_101129A  +
lea esi [ebp+Points] +
lea edi [ebp+var_20] +
movs   +
movs   +
movs   +
movs   +
lea edi [ebx+30h] +
lea esi [ebp+Points] +
movs   +
movs   +
movs   +
movs   +
or esi 0FFFFFFFFh +
xor edi edi +
mov [ebx+2Ch] eax +
cmp [ebx+8] edi +
jz loc_10112FB  +
lea eax [ebx+1Ch] +
push eax  +
lea eax [ebp+rc1] +
push eax  +
call ds:EqualRect  +
test eax eax +
jnz loc_10112FB  +
cmp [ebx+4] edi +
jz loc_10112D8  +
mov eax [ebp+var_4] +
sub eax [ebx+88h] +
cmp eax 0FAh +
jbe loc_10112EC  +
cmp [ebp+var_20] esi +
jnz loc_10112EC  +
cmp [ebp+var_1C] esi +
jnz loc_10112EC  +
lea esi [ebp+rc1] +
lea edi [ebp+var_20] +
movs   +
movs   +
movs   +
movs   +
lea esi [ebp+rc1] +
lea edi [ebx+1Ch] +
movs   +
movs   +
movs   +
movs   +
or esi 0FFFFFFFFh +
xor edi edi +
lea eax [ebp+var_10] +
push eax  +
call ds:GetPhysicalCursorPos  +
mov eax [ebp+var_10] +
mov ecx [ebp+var_C] +
cmp eax [ebx+14h] +
jnz loc_1011315  +
cmp ecx [ebx+18h] +
jz loc_1011340  +
cmp [ebx+4] edi +
jz loc_101132A  +
cmp [ebp+var_20] esi +
jnz loc_101132A  +
cmp [ebp+var_1C] esi +
jnz loc_101132A  +
mov [ebp+var_20] eax +
mov [ebp+var_1C] ecx +
mov [ebx+14h] eax +
mov eax [ebp+var_4] +
mov [ebx+18h] ecx +
mov [ebx+88h] eax +
mov [ebp+arg_0] 1 +
cmp [ebp+var_20] esi +
jnz loc_101135A  +
cmp [ebp+var_1C] esi +
jnz loc_101135A  +
cmp [ebp+arg_0] edi +
jz loc_10114D8  +
push edi  +
push edi  +
jmp loc_10114D0  +
lea eax [ebp+Rect] +
push eax  +
push dword ptr [ebx]  +
call ds:GetClientRect  +
fld  dword ptr [ebx+40h] +
fadd st st +
fild  [ebp+Rect.right] +
fdiv st st(1) +
fld1   +
fadd st(1) st +
fxch  st(1) +
call _ftol2_sse  +
fild  [ebp+Rect.bottom] +
mov esi eax +
fdivrp st(2) st +
faddp st(1) st +
call _ftol2_sse  +
cmp [ebp+var_14] 0FFFFFFFFh +
mov edi eax +
jnz loc_10113C5  +
cmp [ebp+var_18] 0FFFFFFFFh +
jnz loc_10113C5  +
mov eax [ebp+var_20] +
mov ecx eax +
sub ecx esi +
add esi eax +
mov eax [ebp+var_1C] +
mov [ebp+var_30] ecx +
mov ecx eax +
sub ecx edi +
add edi eax +
lea eax [ebp+var_30] +
mov [ebp+var_2C] ecx +
push eax  +
mov ecx ebx +
mov [ebp+var_28] esi +
mov [ebp+var_24] edi +
call sub_1010E8E  +
jmp loc_10114B9  +
mov edx [ebp+var_18] +
mov ecx [ebp+var_20] +
lea eax [esi+esi] +
sub edx ecx +
cmp eax edx +
mov [ebp+arg_0] eax +
jle loc_10113EF  +
mov eax [ebp+var_18] +
add eax ecx +
cdq   +
sub eax edx +
sar eax 1 +
mov ecx eax +
sub ecx esi +
add eax esi +
mov [ebp+var_30] ecx +
mov [ebp+var_28] eax +
jmp loc_1011420  +
call ds:GetForegroundWindow  +
push 0FFFFFFECh  +
push eax  +
call ds:GetWindowLongW  +
test eax 400000h +
jz loc_1011411  +
mov eax [ebp+var_18] +
inc eax  +
mov [ebp+var_28] eax +
sub eax [ebp+arg_0] +
jmp loc_101141D  +
mov eax [ebp+var_20] +
mov ecx [ebp+arg_0] +
dec eax  +
add ecx eax +
mov [ebp+var_28] ecx +
mov [ebp+var_30] eax +
mov edx [ebp+var_14] +
mov ecx [ebp+var_1C] +
lea eax [edi+edi] +
sub edx ecx +
cmp eax edx +
jle loc_1011441  +
mov eax [ebp+var_14] +
add eax ecx +
cdq   +
sub eax edx +
sar eax 1 +
mov ecx eax +
sub ecx edi +
add eax edi +
jmp loc_1011444  +
dec ecx  +
add eax ecx +
mov [ebp+var_24] eax +
lea eax [ebp+var_30] +
mov [ebp+var_2C] ecx +
push eax  +
mov ecx ebx +
call sub_1010E8E  +
cmp dword_1018584 0 +
jz loc_10114B9  +
mov al byte_1018588 +
cmp al 4 +
jnb loc_101146B  +
test al al +
jnz loc_10114B9  +
mov eax dword_1018570 +
mov ecx dword_1018574 +
mov edx 10000h +
mov esi 80000000h +
and eax edx +
and ecx esi +
or eax ecx +
jz loc_10114B9  +
mov eax dword_1018578 +
mov edi dword_101857C +
mov ecx eax +
and ecx edx +
mov edx edi +
and edx esi +
cmp ecx eax +
jnz loc_10114B9  +
cmp edx edi +
jnz loc_10114B9  +
push offset dword_10016E8  +
push dword_101855C  +
push dword_1018558  +
call sub_10036D0  +
sub esp 10h +
mov edi esp +
push dword ptr [ebx]  +
lea esi [ebp+var_30] +
movs   +
movs   +
movs   +
movs   +
call MagSetWindowSource  +
push 0  +
push 0  +
push dword ptr [ebx]  +
call ds:InvalidateRect  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 28h +
push ebx  +
mov ebx ecx +
mov eax [ebx] +
mov [ebp+var_4] ebx +
test eax eax +
jz loc_1011612  +
push eax  +
call ds:IsWindow  +
test eax eax +
jz loc_1011612  +
cmp dword_1018584 0 +
push esi  +
push edi  +
mov edi 10000h +
mov esi 80000000h +
jz loc_1011574  +
mov al byte_1018588 +
cmp al 4 +
jnb loc_101152D  +
test al al +
jnz loc_1011574  +
mov eax dword_1018570 +
mov ecx dword_1018574 +
and eax edi +
and ecx esi +
or eax ecx +
jz loc_1011574  +
mov eax dword_1018578 +
mov ebx dword_101857C +
mov ecx eax +
mov edx ebx +
and ecx edi +
and edx esi +
cmp ecx eax +
jnz loc_1011571  +
cmp edx ebx +
jnz loc_1011571  +
push offset dword_10016B8  +
push dword_101855C  +
push dword_1018558  +
call sub_10036D0  +
mov ebx [ebp+var_4] +
fild  [ebp+arg_0] +
lea eax [ebp+var_28] +
push eax  +
push dword ptr [ebx]  +
fdiv  ds:dbl_1001AB0 +
fstp  [ebp+arg_0] +
fld  [ebp+arg_0] +
fstp  dword ptr [ebx+40h] +
fld  [ebp+arg_0] +
fstp  [ebp+var_28] +
fldz   +
fst  [ebp+var_24] +
fst  [ebp+var_20] +
fst  [ebp+var_1C] +
fld  [ebp+arg_0] +
fstp  [ebp+var_18] +
fst  [ebp+var_14] +
fst  [ebp+var_10] +
fstp  [ebp+var_C] +
fld1   +
fstp  [ebp+var_8] +
call MagSetWindowTransform  +
cmp dword_1018584 0 +
jz loc_1011610  +
mov al byte_1018588 +
cmp al 4 +
jnb loc_10115CC  +
test al al +
jnz loc_1011610  +
mov eax dword_1018570 +
mov ecx dword_1018574 +
and eax edi +
and ecx esi +
or eax ecx +
jz loc_1011610  +
mov eax dword_1018578 +
mov ecx eax +
and ecx edi +
mov edi dword_101857C +
mov edx edi +
and edx esi +
cmp ecx eax +
jnz loc_1011610  +
cmp edx edi +
jnz loc_1011610  +
push offset dword_10016C8  +
push dword_101855C  +
push dword_1018558  +
call sub_10036D0  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 124h +
mov eax dword_101852C +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
mov esi [ebp+hWnd] +
push edi  +
mov ebx ecx +
xor edx edx +
push 8  +
mov [ebp+dwResult] esi +
mov [ebp+ppacc] edx +
lea eax [ebx+68h] +
pop ecx  +
mov edi [eax] +
cmp edi [ebp+arg_0] +
jnz loc_1011657  +
xor edx edx +
inc edx  +
add eax 4 +
dec ecx  +
jnz loc_101164D  +
xor edi edi +
cmp edx edi +
jz loc_101191D  +
mov eax [ebp+arg_4] +
cmp eax 9 +
ja loc_10117BD  +
jz loc_1011751  +
sub eax 4 +
jz loc_1011906  +
dec eax  +
jz loc_10118F2  +
dec eax  +
jz loc_1011704  +
dec eax  +
dec eax  +
jnz loc_101191D  +
push 64h  +
lea eax [ebp+String1] +
push eax  +
push esi  +
call ds:GetClassNameW  +
push 0FFFFFFFFh  +
push offset aCombolbox  +
push 0FFFFFFFFh  +
lea eax [ebp+String1] +
push eax  +
push 1  +
push 7Fh  +
call ds:CompareStringW  +
cmp eax 2 +
jnz loc_101190D  +
lea eax [ebp+dwResult] +
push eax  +
push 1F4h  +
push edi  +
push edi  +
push edi  +
push 188h  +
push esi  +
call ds:SendMessageTimeoutW  +
test eax eax +
jz loc_101190D  +
lea eax [ebp+pvarChild] +
push eax  +
lea eax [ebp+ppacc] +
push eax  +
mov eax [ebp+dwResult] +
inc eax  +
push eax  +
push 0FFFFFFFCh  +
jmp loc_1011718  +
lea eax [ebp+pvarChild] +
push eax  +
lea eax [ebp+ppacc] +
push eax  +
push [ebp+dwChildId]  +
push [ebp+dwId]  +
push esi  +
call AccessibleObjectFromEvent  +
test eax eax +
jl loc_101190D  +
lea eax [ebp+rc] +
push eax  +
lea eax [ebp+pvarChild] +
push eax  +
push [ebp+ppacc]  +
mov ecx ebx +
call sub_1011126  +
test eax eax +
jz loc_101190D  +
lea edi [ebx+44h] +
jmp loc_10118E6  +
push 64h  +
lea eax [ebp+String1] +
push eax  +
push esi  +
call ds:GetClassNameW  +
push 0FFFFFFFFh  +
push offset aCombolbox  +
push 0FFFFFFFFh  +
lea eax [ebp+String1] +
push eax  +
push 1  +
push 7Fh  +
call ds:CompareStringW  +
cmp eax 2 +
jnz loc_101190D  +
lea eax [ebp+pgui] +
push eax  +
push edi  +
mov [ebp+pgui.cbSize] 30h +
call ds:GetGUIThreadInfo  +
cmp [ebp+pgui.hwndFocus] edi +
jz loc_101190D  +
add ebx 44h +
push ebx  +
push [ebp+pgui.hwndFocus]  +
call ds:GetWindowRect  +
jmp loc_101190D  +
sub eax 14h +
jz loc_1011906  +
dec eax  +
jz loc_10118F2  +
sub eax 7FF0h +
jnz loc_101191D  +
lea eax [ebp+pvarChild] +
push eax  +
lea eax [ebp+ppacc] +
push eax  +
push [ebp+dwChildId]  +
push [ebp+dwId]  +
push esi  +
call AccessibleObjectFromEvent  +
test eax eax +
jl loc_101190D  +
sub esp 10h +
mov edi esp +
push [ebp+ppacc]  +
lea esi [ebp+pvarChild] +
push [ebp+dwResult]  +
movs   +
movs   +
movs   +
mov ecx ebx +
movs   +
call sub_101104E  +
test eax eax +
jz loc_101190D  +
lea eax [ebp+rc] +
push eax  +
lea eax [ebp+pvarChild] +
push eax  +
push [ebp+ppacc]  +
mov ecx ebx +
call sub_1011126  +
test eax eax +
jz loc_101190D  +
xor eax eax +
cmp [ebp+rc.top] eax +
jnz loc_101186D  +
cmp [ebp+rc.left] eax +
jnz loc_101186D  +
cmp [ebp+rc.bottom] eax +
jnz loc_101186D  +
cmp [ebp+rc.right] eax +
jz loc_101190D  +
cmp dword_1018584 eax +
jz loc_10118D0  +
mov al byte_1018588 +
cmp al 4 +
jnb loc_1011882  +
test al al +
jnz loc_10118D0  +
mov eax dword_1018570 +
mov ecx dword_1018574 +
mov edx 10000h +
mov esi 80000000h +
and eax edx +
and ecx esi +
or eax ecx +
jz loc_10118D0  +
mov eax dword_1018578 +
mov edi dword_101857C +
mov ecx eax +
and ecx edx +
mov edx edi +
and edx esi +
cmp ecx eax +
jnz loc_10118D0  +
cmp edx edi +
jnz loc_10118D0  +
push offset dword_10016D8  +
push dword_101855C  +
push dword_1018558  +
call sub_10036D0  +
cmp dword ptr [ebx+64h] 0 +
lea edi [ebx+44h] +
lea esi [ebp+rc] +
movs   +
movs   +
movs   +
movs   +
jnz loc_101190D  +
lea edi [ebx+54h] +
lea esi [ebp+rc] +
movs   +
movs   +
movs   +
movs   +
jmp loc_101190D  +
cmp [ebx+64h] edi +
jz loc_101191D  +
mov [ebx+64h] edi +
lea esi [ebx+54h] +
lea edi [ebx+44h] +
movs   +
movs   +
movs   +
movs   +
jmp loc_101191D  +
mov dword ptr [ebx+64h] 1 +
mov eax [ebp+ppacc] +
test eax eax +
jz loc_101191D  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_10149A5  +
leave   +
retn 1Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
call sub_1004872  +
test eax eax +
jz loc_1011962  +
push dword ptr [ebp+20h]  +
push dword ptr [ebp+1Ch]  +
push dword ptr [ebp+18h]  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call sub_1004872  +
mov ecx eax +
call sub_101161C  +
pop ebp  +
retn 1Ch  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_10132EF  +
mov dword_10186B8 eax +
test eax eax +
jz loc_101198A  +
mov edx [eax] +
push offset loc_1011933  +
mov ecx eax +
call dword ptr [edx+4]  +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
mov esi ecx +
push edi  +
lea ecx [esi+8Ch] +
call sub_101196B  +
fld  ds:flt_1001DB8 +
or eax 0FFFFFFFFh +
fstp  dword ptr [esi+40h] +
xor edi edi +
mov ecx esi +
mov [esi] edi +
mov [esi+4] edi +
mov [esi+8] edi +
mov [esi+0Ch] edi +
mov [esi+10h] edi +
mov [esi+44h] eax +
mov [esi+48h] eax +
mov [esi+4Ch] eax +
mov [esi+50h] eax +
mov [esi+54h] eax +
mov [esi+58h] eax +
mov [esi+5Ch] eax +
mov [esi+60h] eax +
mov [esi+64h] edi +
call sub_1010D61  +
lea ebx [esi+68h] +
mov [ebp+var_4] edi +
mov eax [ebp+var_4] +
mov eax dword_1018504[eax] +
push edi  +
push edi  +
push edi  +
push offset sub_1011191  +
push edi  +
push eax  +
push eax  +
call ds:SetWinEventHook  +
add [ebp+var_4] 4 +
mov [ebx] eax +
add ebx 4 +
cmp [ebp+var_4] 20h +
jb loc_10119ED  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
inc dword ptr [esi+14h]  +
inc dword ptr [esi+18h]  +
call ds:GetTickCount  +
push 1  +
mov ecx esi +
mov [esi+88h] eax +
call sub_10111F6  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 24h +
and [ebp+pData.hWnd] 0 +
lea eax [ebp+pData] +
push eax  +
push 1  +
mov [ebp+pData.cbSize] 24h +
call ds:SHAppBarMessage  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+X] +
mov ecx [ebp+Y] +
mov edx [ebp+arg_C] +
sub esp 2Ch +
push esi  +
mov esi [ebp+cy] +
push edi  +
xor edi edi +
mov dword_10186EC eax +
mov dword_10186F0 ecx +
mov dword_10186F4 edx +
mov dword_10186F8 esi +
cmp dword_10186CC edi +
jz loc_1011ABB  +
push 514h  +
push esi  +
push edx  +
push ecx  +
push eax  +
push edi  +
push [ebp+hWnd]  +
call ds:SetWindowPos  +
jmp loc_1011AEF  +
mov [ebp+wndpl.rcNormalPosition.left] eax +
add eax edx +
mov [ebp+wndpl.rcNormalPosition.right] eax +
lea eax [ebp+wndpl] +
push eax  +
push [ebp+hWnd]  +
mov [ebp+wndpl.rcNormalPosition.top] ecx +
add ecx esi +
mov [ebp+wndpl.length] 2Ch +
mov [ebp+wndpl.flags] edi +
mov [ebp+wndpl.showCmd] 4 +
mov [ebp+wndpl.ptMaxPosition.x] edi +
mov [ebp+wndpl.ptMaxPosition.y] edi +
mov [ebp+wndpl.rcNormalPosition.bottom] ecx +
call ds:SetWindowPlacement  +
pop edi  +
pop esi  +
leave   +
retn 14h  +
***
mov eax hWnd +
push esi  +
mov esi ds:IsWindow +
test eax eax +
jz loc_1011B23  +
push eax  +
call esi  +
test eax eax +
jz loc_1011B23  +
push 0  +
push 0  +
push 10h  +
push hWnd  +
call ds:SendMessageW  +
mov eax dword_10186C0 +
test eax eax +
jz loc_1011B5A  +
push eax  +
call esi  +
test eax eax +
jz loc_1011B5A  +
mov ax word_10186FC +
test ax ax +
jz loc_1011B4E  +
movzx eax ax +
push eax  +
push dword_10186C0  +
call ds:RemovePropW  +
push dword_10186C0  +
call ds:DestroyWindow  +
mov ax word_10186FC +
pop esi  +
test ax ax +
jz loc_1011B78  +
movzx eax ax +
push eax  +
call ds:GlobalDeleteAtom  +
xor eax eax +
mov word_10186FC ax +
and dword_10186C0 0 +
and hWnd 0 +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 24h +
mov eax [ebp+arg_0] +
mov [ebp+pData.hWnd] eax +
xor eax eax +
mov [ebp+pData.cbSize] 24h +
mov dword_10186D0 eax +
cmp [ebp+arg_4] eax +
jz loc_1011BD9  +
lea ecx [ebp+pData] +
push ecx  +
push eax  +
mov [ebp+pData.uCallbackMessage] 401h +
mov dword_10186CC 1 +
call ds:SHAppBarMessage  +
test eax eax +
jz locret_1011BED  +
mov dword_10186D0 1 +
jmp loc_1011BEA  +
mov dword_10186CC eax +
lea eax [ebp+pData] +
push eax  +
push 1  +
call ds:SHAppBarMessage  +
xor eax eax +
inc eax  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push ebx  +
xor ebx ebx +
mov [ebp+var_4] 5 +
cmp [ebp+arg_8] ebx +
jnz loc_1011C28  +
lea eax [ebp+var_4] +
push eax  +
call sub_1003450  +
test eax eax +
jl loc_1011CE3  +
cmp [ebp+var_4] 1 +
jnz loc_1011CE3  +
push esi  +
mov esi ds:GetSystemMetrics +
push edi  +
push ebx  +
mov [ebp+pvParam.left] ebx +
mov [ebp+pvParam.top] ebx +
call esi  +
xor edi edi +
inc edi  +
push edi  +
mov [ebp+pvParam.right] eax +
call esi  +
mov esi [ebp+arg_4] +
mov [ebp+pvParam.bottom] eax +
cmp [ebp+arg_8] ebx +
jnz loc_1011C74  +
mov eax [esi+8] +
add eax [esi] +
cdq   +
sub eax edx +
mov ecx eax +
mov eax [esi+0Ch] +
add eax [esi+4] +
sar ecx 1 +
cdq   +
sub eax edx +
sar eax 1 +
push eax  +
push ecx  +
lea eax [ebp+pvParam] +
push eax  +
call ds:PtInRect  +
test eax eax +
jz loc_1011CE1  +
mov [ebp+arg_4] edi +
cmp [ebp+arg_8] ebx +
jnz loc_1011CA9  +
mov eax [ebp+arg_0] +
sub eax ebx +
jz loc_1011CA3  +
dec eax  +
jz loc_1011C9B  +
dec eax  +
jz loc_1011C94  +
dec eax  +
jnz loc_1011CA9  +
mov eax [esi+4] +
mov [ebp+pvParam.bottom] eax +
jmp loc_1011CA9  +
mov eax [esi] +
mov [ebp+pvParam.right] eax +
jmp loc_1011CA9  +
mov eax [esi+0Ch] +
mov [ebp+pvParam.top] eax +
jmp loc_1011CA9  +
mov eax [esi+8] +
mov [ebp+pvParam.left] eax +
mov edi offset rc2 +
push edi  +
lea eax [ebp+pvParam] +
push eax  +
call ds:EqualRect  +
test eax eax +
jz loc_1011CC0  +
mov [ebp+arg_4] ebx +
lea esi [ebp+pvParam] +
movs   +
movs   +
movs   +
movs   +
cmp [ebp+arg_4] ebx +
jnz loc_1011CD1  +
cmp [ebp+arg_8] ebx +
jz loc_1011CE1  +
push 2  +
lea eax [ebp+pvParam] +
push eax  +
push 1  +
push 2Fh  +
call ds:SystemParametersInfoW  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
xor edx edx +
push esi  +
mov [ebp+var_8] edx +
mov [ebp+var_4] edx +
cmp dword_10186D0 edx +
jz loc_1011DBF  +
mov esi [ebp+arg_4] +
mov ecx [ebp+arg_0] +
push ebx  +
mov ebx [ebp+arg_8] +
push edi  +
lea eax [ebx+10h] +
mov edi eax +
movs   +
movs   +
movs   +
movs   +
mov [ebx+0Ch] ecx +
cmp ecx edx +
jz loc_1011D40  +
cmp ecx 2 +
jz loc_1011D40  +
mov edi [ebx+1Ch] +
sub edi [ebx+14h] +
push edx  +
mov [eax] edx +
call ds:GetSystemMetrics  +
mov esi [ebp+var_4] +
mov [ebx+18h] eax +
jmp loc_1011D56  +
mov esi [ebx+18h] +
sub esi [eax] +
push 1  +
mov [ebx+14h] edx +
call ds:GetSystemMetrics  +
mov edi [ebp+var_8] +
mov [ebx+1Ch] eax +
push ebx  +
push 2  +
call ds:SHAppBarMessage  +
mov eax [ebp+arg_0] +
sub eax 0 +
jz loc_1011D8E  +
dec eax  +
jz loc_1011D84  +
dec eax  +
jz loc_1011D7A  +
dec eax  +
jnz loc_1011D96  +
mov eax [ebx+1Ch] +
sub eax edi +
mov [ebx+14h] eax +
jmp loc_1011D96  +
mov eax [ebx+18h] +
sub eax esi +
mov [ebx+10h] eax +
jmp loc_1011D96  +
mov eax [ebx+14h] +
add eax edi +
mov [ebx+1Ch] eax +
jmp loc_1011D96  +
mov eax [ebx+10h] +
add eax esi +
mov [ebx+18h] eax +
push ebx  +
push 3  +
call ds:SHAppBarMessage  +
mov eax [ebx+14h] +
mov edx [ebx+1Ch] +
mov ecx [ebx+10h] +
sub edx eax +
push edx  +
mov edx [ebx+18h] +
sub edx ecx +
push edx  +
push eax  +
push ecx  +
push dword ptr [ebx+4]  +
call sub_1011A6F  +
pop edi  +
pop ebx  +
jmp loc_1011DE0  +
mov eax [ebp+arg_4] +
mov ecx [eax+4] +
mov esi [eax+0Ch] +
mov edx [eax] +
mov eax [eax+8] +
sub esi ecx +
push esi  +
sub eax edx +
push eax  +
mov eax [ebp+arg_8] +
push ecx  +
push edx  +
push dword ptr [eax+4]  +
call sub_1011A6F  +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0FFFFFFF0h  +
push dword_10186C0  +
call ds:GetWindowLongW  +
cmp [ebp+arg_0] 0 +
jz loc_1011E0A  +
or eax 0C80000h +
jmp loc_1011E0F  +
and eax 0FF37FFFFh +
push eax  +
push 0FFFFFFF0h  +
push dword_10186C0  +
call ds:SetWindowLongW  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
and [ebp+var_C] 0 +
and [ebp+var_10] 0 +
push ebx  +
push esi  +
mov esi ds:GetSystemMetrics +
push 0  +
call esi  +
mov ebx eax +
push 1  +
mov [ebp+var_8] ebx +
call esi  +
mov [ebp+var_4] eax +
lea eax [ebp+Rect] +
push eax  +
mov eax [ebp+arg_0] +
push dword ptr [eax+4]  +
call ds:GetWindowRect  +
mov edx dword_1018524 +
mov ecx [ebp+Rect.bottom] +
mov eax [ebp+Rect.right] +
sub ecx [ebp+Rect.top] +
sub eax [ebp+Rect.left] +
mov esi edx +
sub esi 0 +
jz loc_1011E97  +
dec esi  +
jz loc_1011E92  +
dec esi  +
jz loc_1011E8B  +
dec esi  +
jnz loc_1011E9A  +
mov eax [ebp+var_4] +
sub eax ecx +
mov [ebp+var_C] eax +
jmp loc_1011E9A  +
sub ebx eax +
mov [ebp+var_10] ebx +
jmp loc_1011E9A  +
mov [ebp+var_4] ecx +
jmp loc_1011E9A  +
mov [ebp+var_8] eax +
push [ebp+arg_0]  +
lea eax [ebp+var_10] +
push eax  +
push edx  +
call sub_1011CED  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 24h +
mov eax [ebp+arg_4] +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
xor esi esi +
sub eax esi +
mov [ebp+pData.cbSize] 24h +
mov [ebp+pData.hWnd] edi +
jz loc_1011F02  +
dec eax  +
jz loc_1011EF7  +
dec eax  +
jnz loc_1011F28  +
lea eax [ebp+pData] +
push eax  +
push 4  +
call ds:SHAppBarMessage  +
cmp [ebp+arg_8] esi +
jnz loc_1011F0E  +
test al 2 +
jz loc_1011F28  +
push 13h  +
push esi  +
push esi  +
push esi  +
push esi  +
push 0FFFFFFFFh  +
jmp loc_1011F21  +
lea eax [ebp+pData] +
push eax  +
call sub_1011E27  +
jmp loc_1011F28  +
lea eax [ebp+pData] +
push eax  +
push 4  +
call ds:SHAppBarMessage  +
push 13h  +
push esi  +
push esi  +
push esi  +
push esi  +
test al 2 +
push 0  +
pop eax  +
setz al  +
lea eax [eax+eax-1] +
push eax  +
push edi  +
call ds:SetWindowPos  +
pop edi  +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push esi  +
xor esi esi +
push esi  +
lea eax [ebp+pvParam] +
push eax  +
push esi  +
push 30h  +
call ds:SystemParametersInfoW  +
mov eax [ebp+arg_4] +
sub eax esi +
jz loc_1011FDE  +
dec eax  +
jz loc_1011FB8  +
dec eax  +
jz loc_1011F8E  +
dec eax  +
jnz loc_1012005  +
mov eax [ebp+pvParam] +
mov esi [ebp+arg_0] +
mov [esi] eax +
mov ecx dword_10186C8 +
push 0Dh  +
call sub_1010A90  +
mov ecx [ebp+var_4] +
mov edx ecx +
sub edx eax +
mov eax [ebp+var_8] +
mov [esi+4] edx +
mov [esi+8] eax +
mov [esi+0Ch] ecx +
jmp loc_1012005  +
mov ecx dword_10186C8 +
push 0Ch  +
call sub_1010A90  +
mov ecx [ebp+var_8] +
mov edx ecx +
sub edx eax +
mov eax [ebp+arg_0] +
mov [eax] edx +
mov edx [ebp+var_C] +
mov [eax+8] ecx +
mov ecx [ebp+var_4] +
mov [eax+4] edx +
mov [eax+0Ch] ecx +
jmp loc_1012005  +
mov esi [ebp+arg_0] +
mov eax [ebp+pvParam] +
mov [esi] eax +
mov eax [ebp+var_C] +
mov [esi+4] eax +
mov eax [ebp+var_8] +
mov [esi+8] eax +
mov ecx dword_10186C8 +
push 0Dh  +
call sub_1010A90  +
add eax [ebp+var_C] +
jmp loc_1012002  +
mov eax [ebp+pvParam] +
mov esi [ebp+arg_0] +
mov [esi] eax +
mov eax [ebp+var_C] +
mov [esi+4] eax +
mov ecx dword_10186C8 +
push 0Ch  +
call sub_1010A90  +
add eax [ebp+pvParam] +
mov [esi+8] eax +
mov eax [ebp+var_4] +
mov [esi+0Ch] eax +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 34h +
push dword_10186C0  +
call ds:IsWindow  +
test eax eax +
jnz loc_101203C  +
mov eax [ebp+cy] +
mov dword_10186CC eax +
mov eax [ebp+arg_4] +
mov dword_1018524 eax +
jmp locret_1012138  +
push esi  +
xor esi esi +
push edi  +
cmp [ebp+cy] esi +
jnz loc_10120DC  +
cmp dword_10186CC esi +
jz loc_1012136  +
cmp dword_10186D0 esi +
jz loc_101206B  +
push esi  +
push dword_10186C0  +
call sub_1011B8C  +
jmp loc_101207A  +
push 1  +
push esi  +
push esi  +
mov dword_10186CC esi +
call sub_1011BF6  +
cmp [ebp+arg_8] esi +
jz loc_1012136  +
mov ecx dword_10186C8 +
push ebx  +
push 8  +
call sub_1010A90  +
mov ecx dword_10186C8 +
push 9  +
mov esi eax +
call sub_1010A90  +
mov ecx dword_10186C8 +
push 0Ah  +
mov edi eax +
call sub_1010A90  +
mov ecx dword_10186C8 +
push 0Bh  +
mov ebx eax +
call sub_1010A90  +
push 1  +
mov [ebp+cy] eax +
call sub_1011DEA  +
push [ebp+cy]  +
push ebx  +
push edi  +
push esi  +
push dword_10186C0  +
call sub_1011A6F  +
pop ebx  +
jmp loc_1012136  +
mov edi [ebp+arg_4] +
cmp dword_10186CC esi +
jnz loc_10120F6  +
push 1  +
push dword_10186C0  +
call sub_1011B8C  +
jmp loc_10120FE  +
cmp edi dword_1018524 +
jz loc_1012136  +
push edi  +
lea eax [ebp+var_10] +
push eax  +
mov dword_1018524 edi +
call sub_1011F33  +
push esi  +
call sub_1011DEA  +
mov eax dword_10186C0 +
mov [ebp+var_30] eax +
lea eax [ebp+var_34] +
push eax  +
lea eax [ebp+var_10] +
push eax  +
push dword_1018524  +
mov [ebp+var_34] 24h +
call sub_1011CED  +
pop edi  +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 30h +
push ebx  +
push esi  +
mov esi ds:GetSystemMetrics +
push edi  +
xor edi edi +
xor ebx ebx +
inc ebx  +
push edi  +
mov [ebp+var_8] edi +
mov [ebp+var_4] ebx +
mov [ebp+rc.left] edi +
mov [ebp+rc.top] edi +
call esi  +
push ebx  +
mov [ebp+rc.right] eax +
call esi  +
push [ebp+pt.y]  +
mov [ebp+rc.bottom] eax +
push [ebp+pt.x]  +
lea eax [ebp+rc] +
push eax  +
call ds:PtInRect  +
test eax eax +
jz loc_1012247  +
push edi  +
lea eax [ebp+pvParam] +
push eax  +
push edi  +
push 30h  +
call ds:SystemParametersInfoW  +
mov eax [ebp+pt.x] +
sub eax [ebp+pvParam] +
mov edi [ebp+var_28] +
mov ebx [ebp+var_24] +
sub edi [ebp+pt.x] +
sub ebx [ebp+pt.y] +
mov [ebp+var_C] eax +
mov eax [ebp+pt.y] +
sub eax [ebp+var_2C] +
push 2  +
mov [ebp+var_10] eax +
call esi  +
mov ecx [ebp+var_10] +
cmp ecx eax +
jg loc_10121D4  +
cmp ecx [ebp+var_C] +
jg loc_10121D4  +
cmp ecx edi +
jg loc_10121D4  +
cmp ecx ebx +
jg loc_10121D4  +
xor eax eax +
inc eax  +
mov [ebp+var_8] eax +
mov [ebp+var_4] eax +
push 2  +
call esi  +
cmp ebx eax +
jg loc_10121F8  +
cmp ebx [ebp+var_C] +
jg loc_10121F8  +
cmp ebx edi +
jg loc_10121F8  +
cmp ebx [ebp+var_10] +
jg loc_10121F8  +
mov [ebp+var_8] 1 +
mov [ebp+var_4] 3 +
push 2  +
call esi  +
mov ecx [ebp+var_C] +
cmp ecx eax +
jg loc_101221B  +
cmp ecx [ebp+var_10] +
jg loc_101221B  +
cmp ecx edi +
jg loc_101221B  +
cmp ecx ebx +
jg loc_101221B  +
and [ebp+var_4] 0 +
mov [ebp+var_8] 1 +
push 2  +
call esi  +
cmp edi eax +
jg loc_101223F  +
cmp edi [ebp+var_C] +
jg loc_101223F  +
cmp edi [ebp+var_10] +
jg loc_101223F  +
cmp edi ebx +
jg loc_101223F  +
mov [ebp+var_8] 1 +
mov [ebp+var_4] 2 +
cmp [ebp+var_8] 0 +
jnz loc_10122BF  +
xor edi edi +
cmp cy edi +
jz loc_10122A0  +
mov ecx dword_10186C8 +
push 0Ah  +
call sub_1010A90  +
mov ecx dword_10186C8 +
push 0Bh  +
mov edi eax +
call sub_1010A90  +
push 1  +
mov ebx eax +
call sub_1011DEA  +
mov esi [ebp+pt.x] +
mov ecx [ebp+arg_8] +
mov eax edi +
cdq   +
sub eax edx +
sar eax 1 +
sub esi eax +
mov eax ebx +
cdq   +
sub eax edx +
mov edx eax +
mov eax [ebp+pt.y] +
sar edx 1 +
sub eax edx +
mov [ecx] esi +
add esi edi +
mov [ecx+4] eax +
add eax ebx +
mov [ecx+8] esi +
mov [ecx+0Ch] eax +
mov eax dword_1018528 +
mov [ebp+var_4] eax +
mov eax [ebp+var_8] +
pop edi  +
mov cy eax +
mov eax [ebp+var_4] +
pop esi  +
mov dword_1018528 eax +
pop ebx  +
leave   +
retn 0Ch  +
push 0  +
call sub_1011DEA  +
push [ebp+var_4]  +
push [ebp+arg_8]  +
call sub_1011F33  +
jmp loc_10122A8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 28h +
push ebx  +
xor ebx ebx +
cmp dword_10186CC ebx +
jnz loc_10123D2  +
push esi  +
push dword_10186F8  +
lea ecx [ebp+X] +
push dword_10186F4  +
push dword_10186F0  +
push dword_10186EC  +
call sub_1004199  +
push ebx  +
lea eax [ebp+X] +
push eax  +
call ds:MonitorFromRect  +
mov esi eax +
mov eax off_1018000 +
cmp eax offset off_1018000 +
jz loc_101234E  +
test byte ptr [eax+1Ch] 10h +
jz loc_101234E  +
push dword_10186F0  +
push dword_10186EC  +
push esi  +
push offset dword_1002C68  +
push 0Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1004E19  +
cmp esi ebx +
jnz loc_10123D1  +
mov esi ds:GetSystemMetrics +
push edi  +
push 1  +
call esi  +
push ebx  +
mov edi eax +
mov [ebp+var_28] ebx +
mov [ebp+var_24] ebx +
call esi  +
mov [ebp+var_20] eax +
lea eax [ebp+var_8] +
push eax  +
lea ecx [ebp+var_28] +
mov [ebp+var_1C] edi +
call sub_1004CF9  +
push dword ptr [eax+4]  +
lea ecx [ebp+X] +
push dword ptr [eax]  +
call sub_10042D0  +
mov eax [ebp-0Ch] +
sub eax [ebp-14h] +
push eax  +
mov eax [ebp-10h] +
sub eax [ebp+X] +
push eax  +
push dword ptr [ebp-14h]  +
push [ebp+X]  +
push dword_10186C0  +
call sub_1011A6F  +
mov ecx dword_10186C8 +
push 1  +
push dword_10186EC  +
push 8  +
call sub_1010BE4  +
mov ecx dword_10186C8 +
push 1  +
push dword_10186F0  +
push 9  +
call sub_1010BE4  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0D8h +
mov eax dword_101852C +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
call sub_1011AFA  +
mov eax [ebp+arg_C] +
push 1  +
xor edi edi +
push edi  +
push edi  +
mov dword_10186BC eax +
call sub_1011BF6  +
call sub_1011A49  +
push 8  +
mov ecx esi +
mov dword_10186C8 esi +
call sub_1010A90  +
mov ecx dword_10186C8 +
push 9  +
mov ebx eax +
call sub_1010A90  +
mov ecx dword_10186C8 +
push 0Ah  +
mov [ebp+var_D8] eax +
call sub_1010A90  +
mov ecx dword_10186C8 +
push 0Bh  +
mov [ebp+var_D0] eax +
call sub_1010A90  +
push 64h  +
mov [ebp+var_D4] eax +
lea eax [ebp+WindowName] +
push eax  +
push 67h  +
push edi  +
call ds:GetModuleHandleW  +
push eax  +
call ds:LoadStringW  +
push edi  +
push hmod  +
mov eax 80000000h +
push edi  +
push edi  +
push eax  +
push eax  +
push eax  +
push eax  +
push 20C0000h  +
lea eax [ebp+WindowName] +
push eax  +
mov eax [ebp+arg_8] +
neg eax  +
sbb eax eax +
and eax 400000h +
push offset aScreenMagnif_1  +
or eax 180288h +
push eax  +
call ds:CreateWindowExW  +
mov ecx [ebp+var_D8] +
mov dword_10186F0 ecx +
mov ecx [ebp+var_D0] +
mov dword_10186F4 ecx +
mov ecx [ebp+var_D4] +
mov dword_10186C0 eax +
mov dword_10186EC ebx +
mov dword_10186F8 ecx +
cmp eax edi +
jnz loc_10124EA  +
xor eax eax +
jmp loc_1012583  +
push [ebp+arg_4]  +
call sub_1004872  +
mov ecx eax +
call sub_10114E4  +
push 2  +
push 0FFh  +
push edi  +
push dword_10186C0  +
call ds:SetLayeredWindowAttributes  +
push offset aAccessibility_  +
call ds:GlobalAddAtomW  +
mov word_10186FC ax +
cmp ax di +
jz loc_1012535  +
movzx eax ax +
push 1  +
push eax  +
push dword_10186C0  +
call ds:SetPropW  +
push 6  +
mov ecx esi +
call sub_1010A90  +
push 7  +
mov ecx esi +
mov ebx eax +
call sub_1010A90  +
xor ecx ecx +
cmp ebx edi +
setz cl  +
push 1  +
push eax  +
push ebx  +
mov dword_10186CC ecx +
call sub_101200F  +
call sub_10122D8  +
push 4  +
push dword_10186C0  +
call ds:ShowWindow  +
push dword_10186C0  +
call ds:UpdateWindow  +
mov eax dword_10186C0 +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_10149A5  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 60h +
mov ecx dword_10186C8 +
and [ebp+dy] 0 +
and [ebp+pt.y] 0 +
push ebx  +
push esi  +
push edi  +
push 8  +
call sub_1010A90  +
mov ecx dword_10186C8 +
push 9  +
mov esi eax +
call sub_1010A90  +
mov ecx dword_10186C8 +
push 0Ah  +
mov edi eax +
call sub_1010A90  +
mov ecx dword_10186C8 +
push 0Bh  +
mov ebx eax +
call sub_1010A90  +
mov ecx eax +
mov eax [ebp+arg_0] +
sub eax 3 +
jz loc_10126EA  +
dec eax  +
jz loc_101269C  +
dec eax  +
jz loc_101264C  +
dec eax  +
jnz loc_10129F1  +
mov eax ebx +
cdq   +
sub eax edx +
push 0  +
sar eax 1 +
add edi ecx +
add eax esi +
push edi  +
push eax  +
call ds:MonitorFromPoint  +
mov edi dword_1018524 +
mov esi eax +
neg esi  +
sbb esi esi +
neg esi  +
cmp dword_10186CC 0 +
jz loc_101263E  +
cmp edi 3 +
jnz loc_101263E  +
test esi esi +
jz loc_10129F1  +
fild  dword_10186F8 +
fmul  ds:dbl_1001D08 +
jmp loc_101268F  +
mov eax ebx +
cdq   +
sub eax edx +
push 0  +
sar eax 1 +
add eax esi +
push edi  +
push eax  +
call ds:MonitorFromPoint  +
mov edi dword_1018524 +
mov esi eax +
neg esi  +
sbb esi esi +
neg esi  +
cmp dword_10186CC 0 +
jz loc_1012683  +
cmp edi 1 +
jnz loc_1012683  +
test esi esi +
jz loc_10129F1  +
fild  dword_10186F8 +
fmul  ds:dbl_1001D00 +
call _ftol2_sse  +
mov [ebp+dy] eax +
jmp loc_1012734  +
mov eax ecx +
cdq   +
sub eax edx +
sar eax 1 +
push 0  +
add eax edi +
push eax  +
add esi ebx +
push esi  +
call ds:MonitorFromPoint  +
mov edi dword_1018524 +
mov esi eax +
neg esi  +
sbb esi esi +
neg esi  +
cmp dword_10186CC 0 +
jz loc_10126D5  +
cmp edi 2 +
jnz loc_10126D5  +
test esi esi +
jz loc_10129F1  +
fild  dword_10186F4 +
fmul  ds:dbl_1001D08 +
call _ftol2_sse  +
mov ebx eax +
jmp loc_101273D  +
mov eax ecx +
cdq   +
sub eax edx +
sar eax 1 +
push 0  +
add eax edi +
push eax  +
push esi  +
call ds:MonitorFromPoint  +
mov edi dword_1018524 +
mov esi eax +
neg esi  +
sbb esi esi +
neg esi  +
cmp dword_10186CC 0 +
jz loc_1012720  +
test edi edi +
jnz loc_1012720  +
test esi esi +
jz loc_10129F1  +
fild  dword_10186F4 +
fmul  ds:dbl_1001D00 +
call _ftol2_sse  +
mov [ebp+pt.y] eax +
cmp [ebp+dy] 0 +
mov ebx [ebp+pt.y] +
jnz loc_1012745  +
test ebx ebx +
jz loc_10129F1  +
xor eax eax +
cmp dword_10186CC eax +
jz loc_101281E  +
cmp edi eax +
jz loc_101275C  +
cmp edi 2 +
jnz loc_1012774  +
cmp [ebp+dy] eax +
jz loc_1012774  +
xor ecx ecx +
cmp [ebp+dy] eax +
push 1  +
setnle cl  +
lea ecx [ecx+ecx+1] +
push ecx  +
push 1  +
jmp loc_101278C  +
xor ecx ecx +
inc ecx  +
cmp edi ecx +
jz loc_1012780  +
cmp edi 3 +
jnz loc_10127A8  +
cmp ebx eax +
jz loc_10127A8  +
jl loc_1012789  +
push 2  +
pop eax  +
push ecx  +
push eax  +
push ecx  +
call sub_101200F  +
mov ecx dword_10186C8 +
push 1  +
push dword_1018524  +
push 7  +
call sub_1010BE4  +
jmp loc_10127F8  +
push ecx  +
push edi  +
push eax  +
call sub_101200F  +
test esi esi +
jz loc_10127F8  +
lea eax [ebp+X] +
push eax  +
push dword_10186C0  +
call ds:GetWindowRect  +
mov eax [ebp+dy] +
shl eax 2 +
push eax  +
shl ebx 2 +
push ebx  +
lea eax [ebp+X] +
push eax  +
call ds:OffsetRect  +
mov eax [ebp-20h] +
sub eax [ebp-28h] +
push eax  +
mov eax [ebp-24h] +
sub eax [ebp+X] +
push eax  +
push dword ptr [ebp-28h]  +
push [ebp+X]  +
push dword_10186C0  +
call sub_1011A6F  +
mov ecx dword_10186C8 +
push 1  +
push dword_10186CC  +
push 6  +
call sub_1010BE4  +
call sub_1004872  +
mov ecx eax +
call sub_1011A22  +
jmp loc_10129F1  +
mov esi ds:GetWindowRect +
lea eax [ebp+X] +
push eax  +
push dword_10186C0  +
call esi  +
push [ebp+dy]  +
lea eax [ebp+X] +
push ebx  +
push eax  +
call ds:OffsetRect  +
push 0  +
lea eax [ebp+pvParam] +
push eax  +
push 0  +
push 30h  +
call ds:SystemParametersInfoW  +
lea eax [ebp+pt] +
push eax  +
lea ecx [ebp+X] +
call sub_1004CF9  +
mov edi [ebp+pt.y] +
push edi  +
push [ebp+pt.x]  +
lea eax [ebp+pvParam] +
push eax  +
call ds:PtInRect  +
test eax eax +
jnz loc_10128BD  +
mov eax [ebp+pvParam] +
cmp [ebp+pt.x] eax +
jge loc_1012883  +
lea ecx [eax+ebx] +
cmp [ebp+pt.x] ecx +
jle loc_1012883  +
inc eax  +
mov [ebp+pt.x] eax +
mov eax [ebp+var_34] +
cmp [ebp+pt.x] eax +
jle loc_1012897  +
lea ecx [eax+ebx] +
cmp [ebp+pt.x] ecx +
jge loc_1012897  +
dec eax  +
mov [ebp+pt.x] eax +
mov eax [ebp+var_38] +
cmp edi eax +
jge loc_10128AA  +
mov ecx [ebp+dy] +
add ecx eax +
cmp edi ecx +
jle loc_10128AA  +
lea edi [eax+1] +
mov eax [ebp+var_30] +
cmp edi eax +
jle loc_10128BD  +
mov ecx [ebp+dy] +
add ecx eax +
cmp edi ecx +
jge loc_10128BD  +
lea edi [eax-1] +
lea eax [ebp+X] +
push eax  +
push edi  +
push [ebp+pt.x]  +
call sub_1012141  +
lea eax [ebp+Rect] +
push eax  +
push dword_10186C0  +
call esi  +
mov ecx dword_10186C8 +
xor ebx ebx +
inc ebx  +
push ebx  +
push [ebp+Rect]  +
push 8  +
call sub_1010BE4  +
mov ecx dword_10186C8 +
push ebx  +
push dword ptr [ebp-18h]  +
push 9  +
call sub_1010BE4  +
mov eax [ebp-14h] +
sub eax [ebp+Rect] +
mov ecx dword_10186C8 +
push ebx  +
push eax  +
push 0Ah  +
call sub_1010BE4  +
mov eax [ebp-10h] +
sub eax [ebp-18h] +
mov ecx dword_10186C8 +
push ebx  +
push eax  +
push 0Bh  +
call sub_1010BE4  +
mov eax cy +
push 0  +
test eax eax +
jz loc_10129C4  +
push dword_1018528  +
push eax  +
call sub_101200F  +
mov ecx dword_10186C8 +
push ebx  +
push ebx  +
push 6  +
call sub_1010BE4  +
mov eax dword_10186C0 +
mov [ebp+var_5C] eax +
lea eax [ebp+var_60] +
push eax  +
mov [ebp+var_60] 24h +
call sub_1011E27  +
mov ecx dword_10186C8 +
push ebx  +
push dword_1018524  +
push 7  +
call sub_1010BE4  +
lea eax [ebp+Rect] +
push eax  +
push dword_10186C0  +
call esi  +
mov eax dword_1018524 +
cmp eax ebx +
jz loc_10129A1  +
cmp eax 3 +
jz loc_10129A1  +
mov eax [ebp-14h] +
sub eax [ebp+Rect] +
push ebx  +
push eax  +
push 0Ch  +
jmp loc_10129AB  +
mov eax [ebp-10h] +
sub eax [ebp-18h] +
push ebx  +
push eax  +
push 0Dh  +
mov ecx dword_10186C8 +
call sub_1010BE4  +
call sub_1004872  +
mov ecx eax +
call sub_1010D61  +
jmp loc_10129F1  +
push edi  +
push [ebp+pt.x]  +
call ds:MonitorFromPoint  +
test eax eax +
jz loc_10129F1  +
mov eax [ebp-20h] +
sub eax [ebp-28h] +
push eax  +
mov eax [ebp-24h] +
sub eax [ebp+X] +
push eax  +
push dword ptr [ebp-28h]  +
push [ebp+X]  +
push dword_10186C0  +
call sub_1011A6F  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
sub esp 28h +
push ebx  +
push esi  +
push edi  +
cmp eax 9 +
jz loc_1012A19  +
cmp eax 0Ah +
jz loc_1012A19  +
xor edi edi +
jmp loc_1012A1C  +
xor edi edi +
inc edi  +
mov [ebp+var_4] 1 +
cmp eax 8 +
jz loc_1012A2D  +
cmp eax 9 +
jnz loc_1012A31  +
and [ebp+var_4] 0 +
mov esi ds:GetSystemMetrics +
push 0  +
call esi  +
mov ebx eax +
push 1  +
mov [ebp+var_C] ebx +
call esi  +
fld  ds:dbl_1002CE0 +
fld  ds:dbl_1002CD8 +
mov [ebp+var_8] eax +
fild  [ebp+var_8] +
test edi edi +
jz loc_1012A5E  +
fmul st st(1) +
jmp loc_1012A60  +
fmul st st(2) +
call _ftol2_sse  +
mov [ebp+arg_0] eax +
test edi edi +
jz loc_1012A7D  +
fstp  st(1) +
fimul  [ebp+var_C] +
call _ftol2_sse  +
mov esi eax +
mov [ebp+var_10] esi +
jmp loc_1012A8C  +
fstp  st +
fimul  [ebp+var_C] +
call _ftol2_sse  +
mov [ebp+var_10] eax +
mov esi eax +
xor edi edi +
cmp dword_10186CC edi +
jz loc_1012BAF  +
push dword_10186F8  +
lea ecx [ebp+X] +
push dword_10186F4  +
push dword_10186F0  +
push dword_10186EC  +
call sub_1004199  +
mov ecx dword_1018524 +
xor eax eax +
cmp [ebp+var_4] edi +
jz loc_1012AE3  +
cmp ecx 1 +
jnz loc_1012AD3  +
mov edx [ebp+arg_0] +
inc eax  +
sub [ebp+var_1C] edx +
cmp ecx 3 +
jnz loc_1012AF8  +
mov ecx [ebp+arg_0] +
xor eax eax +
inc eax  +
sub [ebp+Y] ecx +
jmp loc_1012AF8  +
cmp ecx edi +
jnz loc_1012AED  +
xor eax eax +
inc eax  +
add [ebp+var_20] esi +
cmp ecx 2 +
jnz loc_1012AF8  +
xor eax eax +
inc eax  +
add [ebp+X] esi +
cmp eax edi +
jz loc_1012CC3  +
cmp [ebp+var_4] edi +
jnz loc_1012B2B  +
mov eax esi +
cdq   +
xor eax edx +
sub eax edx +
mov edx [ebp+var_20] +
mov ecx edx +
sub ecx [ebp+X] +
sub ebx eax +
cmp ecx ebx +
jg loc_1012CC3  +
cmp ecx eax +
jle loc_1012CC3  +
mov esi [ebp+var_1C] +
jmp loc_1012B53  +
mov eax [ebp+arg_0] +
mov esi [ebp+var_1C] +
cdq   +
xor eax edx +
sub eax edx +
mov edx [ebp+var_8] +
mov ecx esi +
sub ecx [ebp+Y] +
sub edx eax +
cmp ecx edx +
jg loc_1012CC3  +
cmp ecx eax +
jle loc_1012CC3  +
mov edx [ebp+var_20] +
sub esi [ebp+Y] +
sub edx [ebp+X] +
push esi  +
push edx  +
push [ebp+Y]  +
push [ebp+X]  +
push dword_10186C0  +
call sub_1011A6F  +
push edi  +
lea eax [ebp+X] +
push eax  +
push dword_1018524  +
call sub_1011BF6  +
call sub_1004872  +
mov ecx eax +
call sub_1010D61  +
mov ecx dword_10186C8 +
push 1  +
cmp [ebp+var_4] edi +
jz loc_1012BA2  +
push dword_10186F8  +
push 0Dh  +
jmp loc_1012CBE  +
push dword_10186F4  +
push 0Ch  +
jmp loc_1012CBE  +
mov ecx dword_10186C8 +
push 8  +
call sub_1010A90  +
mov ecx dword_10186C8 +
push 9  +
mov edi eax +
call sub_1010A90  +
mov ecx dword_10186C8 +
push 0Bh  +
mov ebx eax +
call sub_1010A90  +
mov ecx dword_10186C8 +
push 0Ah  +
mov [ebp+cy] eax +
call sub_1010A90  +
mov ecx [ebp+arg_0] +
add ecx ecx +
add esi esi +
cmp [ebp+var_4] 0 +
mov [ebp+var_18] eax +
jz loc_1012C5E  +
mov esi dword_10186F8 +
test ecx ecx +
jge loc_1012C11  +
mov eax ecx +
cdq   +
xor eax edx +
sub eax edx +
cmp esi eax +
jg loc_1012C24  +
test ecx ecx +
jle loc_1012CC3  +
mov eax [ebp+var_8] +
sub eax ecx +
cmp esi eax +
jge loc_1012CC3  +
mov eax [ebp+cy] +
sub ebx [ebp+arg_0] +
add ecx eax +
push ecx  +
push [ebp+var_18]  +
push ebx  +
push edi  +
push dword_10186C0  +
call sub_1011A6F  +
mov ecx dword_10186C8 +
push 1  +
push dword_10186F8  +
push 0Bh  +
call sub_1010BE4  +
push 1  +
push dword_10186F0  +
push 9  +
jmp loc_1012CB8  +
mov ecx dword_10186F4 +
test esi esi +
jge loc_1012C75  +
mov eax esi +
cdq   +
xor eax edx +
sub eax edx +
cmp ecx eax +
jg loc_1012C80  +
test esi esi +
jle loc_1012CC3  +
mov eax [ebp+var_C] +
sub eax esi +
cmp ecx eax +
jge loc_1012CC3  +
push [ebp+cy]  +
mov eax [ebp+var_18] +
sub edi [ebp+var_10] +
add esi eax +
push esi  +
push ebx  +
push edi  +
push dword_10186C0  +
call sub_1011A6F  +
mov ecx dword_10186C8 +
push 1  +
push dword_10186F4  +
push 0Ah  +
call sub_1010BE4  +
push 1  +
push dword_10186EC  +
push 8  +
mov ecx dword_10186C8 +
call sub_1010BE4  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 38h +
mov ecx [ebp+0Ch] +
push esi  +
xor esi esi +
mov eax 84h +
push edi  +
mov [ebp-4] esi +
cmp ecx eax +
ja loc_1012EFF  +
jz loc_1012E36  +
mov eax ecx +
dec eax  +
jz loc_1012DF2  +
dec eax  +
jz loc_1012DE5  +
sub eax 3 +
jz loc_1012DAC  +
sub eax 0Bh +
jz loc_1012DA0  +
sub eax 10h +
jz loc_1012D85  +
sub eax 26h +
jz loc_1012D2E  +
sub eax 38h +
jz loc_1012FD9  +
jmp loc_1012F2F  +
mov eax [ebp+14h] +
cmp dword_10186CC esi +
jz loc_1012D71  +
cmp dword_10186E8 esi +
jnz loc_1012D71  +
mov ecx dword_10186EC +
cmp ecx [eax+8] +
jnz loc_1012D6D  +
mov ecx dword_10186F0 +
cmp ecx [eax+0Ch] +
jnz loc_1012D6D  +
mov ecx dword_10186F4 +
cmp ecx [eax+10h] +
jnz loc_1012D6D  +
mov ecx dword_10186F8 +
cmp ecx [eax+14h] +
jz loc_1012D71  +
or dword ptr [eax+18h] 3 +
push eax  +
push dword ptr [ebp+10h]  +
push 46h  +
push dword ptr [ebp+8]  +
call ds:DefWindowProcW  +
jmp loc_1013185  +
push 7F86h  +
push esi  +
call ds:LoadCursorW  +
push eax  +
call ds:SetCursor  +
xor eax eax +
inc eax  +
jmp loc_1013185  +
push esi  +
call ds:PostQuitMessage  +
jmp loc_1013183  +
cmp hWnd esi +
jz loc_1013183  +
lea eax [ebp-14h] +
push eax  +
push dword ptr [ebp+8]  +
call ds:GetClientRect  +
push 14h  +
push dword ptr [ebp-8]  +
push dword ptr [ebp-0Ch]  +
push dword ptr [ebp-10h]  +
push dword ptr [ebp-14h]  +
push esi  +
push hWnd  +
call ds:SetWindowPos  +
jmp loc_1013183  +
push esi  +
push esi  +
push esi  +
call sub_101200F  +
jmp loc_1013183  +
push dword ptr [ebp+8]  +
call sub_1004872  +
mov ecx eax +
call sub_1010F5A  +
mov hWnd eax +
lea eax [ebp-4] +
push eax  +
call ds:DwmIsCompositionEnabled  +
cmp [ebp-4] esi +
jz loc_1013183  +
push 4  +
lea eax [ebp+10h] +
push eax  +
push 8  +
push dword ptr [ebp+8]  +
mov dword ptr [ebp+10h] 2 +
call ds:DwmSetWindowAttribute  +
jmp loc_1013183  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push eax  +
push dword ptr [ebp+8]  +
call ds:DefWindowProcW  +
xor edi edi +
inc edi  +
cmp eax edi +
jnz loc_1012E55  +
push 2  +
pop eax  +
jmp loc_1013185  +
cmp dword_10186CC esi +
jz loc_1013185  +
cmp eax 0Fh +
jz loc_1012E8D  +
cmp eax 10h +
jz loc_1012E8D  +
cmp eax 11h +
jz loc_1012E8D  +
cmp eax 0Ah +
jz loc_1012E8D  +
cmp eax 0Bh +
jz loc_1012E8D  +
cmp eax 0Ch +
jz loc_1012E8D  +
cmp eax 0Dh +
jz loc_1012E8D  +
cmp eax 0Eh +
jnz loc_1013185  +
mov ecx dword_1018524 +
cmp ecx esi +
jnz loc_1012EAE  +
cmp eax 0Bh +
jz loc_1012EAA  +
cmp eax 0Eh +
jz loc_1012EAA  +
cmp eax 11h +
jz loc_1012EAA  +
push 12h  +
jmp loc_1012E4F  +
***
push 0Bh  +
jmp loc_1012E4F  +
***
cmp ecx 2 +
jnz loc_1012EC6  +
cmp eax 0Ah +
jz loc_1012EC2  +
cmp eax 0Dh +
jz loc_1012EC2  +
cmp eax 10h +
jnz loc_1012EA6  +
push 0Ah  +
jmp loc_1012E4F  +
***
cmp ecx edi +
jnz loc_1012EE0  +
cmp eax 0Fh +
jz loc_1012ED9  +
cmp eax 11h +
jz loc_1012ED9  +
cmp eax 10h +
jnz loc_1012EA6  +
push 0Fh  +
jmp loc_1012E4F  +
***
cmp ecx 3 +
jnz loc_1013185  +
cmp eax 0Ch +
jz loc_1012EF8  +
cmp eax 0Eh +
jz loc_1012EF8  +
cmp eax 0Dh +
jnz loc_1012EA6  +
push 0Ch  +
jmp loc_1012E4F  +
***
mov eax ecx +
sub eax 216h +
jz loc_101316C  +
sub eax 1Bh +
jz loc_1013110  +
dec eax  +
jz loc_1013006  +
sub eax 0E0h +
jz loc_1012F7F  +
sub eax 0Ch +
jz loc_1012F4E  +
sub eax 0E3h +
jz loc_1012F3B  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push ecx  +
jmp loc_1012D77  +
***
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+8]  +
call sub_1011EB2  +
jmp loc_1013183  +
lea eax [ebp-4] +
push eax  +
call ds:DwmIsCompositionEnabled  +
cmp [ebp-4] esi +
jz loc_1012F6F  +
mov ecx dword_10186BC +
push 1  +
call sub_10049E3  +
jmp loc_1013183  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push 31Eh  +
jmp loc_1012D77  +
***
mov eax [ebp+10h] +
cmp eax 2 +
jz loc_1012FA8  +
jbe loc_1012FD9  +
cmp eax 6 +
jbe loc_1012FA0  +
cmp eax 7 +
jbe loc_1012FD9  +
cmp eax 0Bh +
ja loc_1012FD9  +
push eax  +
call sub_10129FD  +
jmp loc_1012FD9  +
push eax  +
call sub_1012599  +
jmp loc_1012FD9  +
mov ecx dword_10186C8 +
push 0Fh  +
call sub_1010A90  +
mov esi eax +
neg esi  +
sbb esi esi +
inc esi  +
push esi  +
call sub_1004872  +
mov ecx eax +
call sub_1010FF3  +
mov ecx dword_10186C8 +
push 1  +
push esi  +
push 0Fh  +
call sub_1010BE4  +
push dword_10186F8  +
push dword_10186F4  +
push dword_10186F0  +
push dword_10186EC  +
push dword_10186C0  +
call sub_1011A6F  +
call sub_10122D8  +
jmp loc_1013183  +
mov eax cy +
mov ecx dword_1018528 +
mov dword_10186E8 esi +
cmp eax dword_10186CC +
jnz loc_1013027  +
cmp ecx dword_1018524 +
jz loc_101302F  +
push esi  +
push ecx  +
push eax  +
call sub_101200F  +
mov ecx dword_10186C8 +
xor edi edi +
inc edi  +
push edi  +
push dword_10186CC  +
push 6  +
call sub_1010BE4  +
cmp dword_10186CC esi +
jnz loc_101309E  +
lea eax [ebp-14h] +
push eax  +
push dword ptr [ebp+8]  +
call ds:GetWindowRect  +
mov ecx dword_10186C8 +
push edi  +
push dword ptr [ebp-14h]  +
push 8  +
call sub_1010BE4  +
mov ecx dword_10186C8 +
push edi  +
push dword ptr [ebp-10h]  +
push 9  +
call sub_1010BE4  +
mov eax [ebp-0Ch] +
sub eax [ebp-14h] +
mov ecx dword_10186C8 +
push edi  +
push eax  +
push 0Ah  +
call sub_1010BE4  +
mov eax [ebp-8] +
sub eax [ebp-10h] +
push edi  +
push eax  +
push 0Bh  +
jmp loc_10130F7  +
mov ecx dword_10186C8 +
push edi  +
push dword_1018524  +
push 7  +
call sub_1010BE4  +
mov esi [ebp+8] +
lea eax [ebp-38h] +
push eax  +
mov dword ptr [ebp-38h] 24h +
mov [ebp-34h] esi +
call sub_1011E27  +
lea eax [ebp-14h] +
push eax  +
push esi  +
call ds:GetWindowRect  +
mov eax dword_1018524 +
cmp eax edi +
jz loc_10130ED  +
cmp eax 3 +
jz loc_10130ED  +
mov eax [ebp-0Ch] +
sub eax [ebp-14h] +
push edi  +
push eax  +
push 0Ch  +
jmp loc_10130F7  +
mov eax [ebp-8] +
sub eax [ebp-10h] +
push edi  +
push eax  +
push 0Dh  +
mov ecx dword_10186C8 +
call sub_1010BE4  +
call sub_1004872  +
mov ecx eax +
call sub_1010D61  +
jmp loc_1013183  +
mov eax dword_10186CC +
mov ecx dword_1018524 +
xor edi edi +
inc edi  +
mov dword_10186E8 edi +
mov cy eax +
mov dword_1018528 ecx +
cmp dword_10186D0 esi +
jz loc_101315E  +
mov eax [ebp+8] +
mov [ebp-34h] eax +
lea eax [ebp-38h] +
push eax  +
push 3  +
mov dword ptr [ebp-38h] 24h +
mov [ebp-28h] esi +
mov [ebp-20h] esi +
mov [ebp-24h] esi +
mov [ebp-1Ch] esi +
call ds:SHAppBarMessage  +
jmp loc_1013183  +
cmp eax esi +
jz loc_1013183  +
push edi  +
push esi  +
push esi  +
call sub_1011BF6  +
jmp loc_1013183  +
call ds:GetMessagePos  +
push dword ptr [ebp+14h]  +
movsx ecx ax +
shr eax 10h +
cwde   +
push eax  +
push ecx  +
call sub_1012141  +
xor eax eax +
pop edi  +
pop esi  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 30h +
mov eax [ebp+hInstance] +
push esi  +
push 1  +
xor esi esi +
push eax  +
mov [ebp+var_30.cbSize] 30h +
mov [ebp+var_30.style] 3 +
mov [ebp+var_30.lpfnWndProc] offset loc_1012CCF +
mov [ebp+var_30.cbClsExtra] esi +
mov [ebp+var_30.cbWndExtra] esi +
mov [ebp+var_30.hInstance] eax +
call ds:LoadIconW  +
push 7F00h  +
push esi  +
mov [ebp+var_30.hIcon] eax +
call ds:LoadCursorW  +
mov [ebp+var_30.hCursor] eax +
lea eax [ebp+var_30] +
push eax  +
mov [ebp+var_30.hbrBackground] 10h +
mov [ebp+var_30.lpszMenuName] esi +
mov [ebp+var_30.lpszClassName] offset aScreenMagnif_1 +
mov [ebp+var_30.hIconSm] esi +
call ds:RegisterClassExW  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov [ecx+0Ch] eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi ecx +
xor ebx ebx +
cmp [esi+10h] ebx +
jz loc_1013273  +
push 20h  +
call ??2@YAPAXI@Z  +
pop ecx  +
cmp eax ebx +
jz loc_10132C8  +
mov ecx [ebp+arg_0] +
mov [eax+4] ecx +
mov ecx [ebp+arg_4] +
mov [eax+8] ecx +
mov ecx [ebp+arg_8] +
mov [eax+0Ch] ecx +
mov ecx [ebp+arg_C] +
mov [eax+10h] ecx +
mov ecx [ebp+arg_10] +
mov [eax+14h] ecx +
mov ecx [ebp+arg_14] +
mov [eax+18h] ecx +
mov ecx [ebp+arg_18] +
mov [eax+1Ch] ecx +
mov [eax] ebx +
cmp [esi+4] ebx +
jz loc_101326B  +
mov ecx [esi+8] +
mov [ecx] eax +
jmp loc_101326E  +
mov [esi+4] eax +
mov [esi+8] eax +
jmp loc_10132C8  +
push [ebp+arg_18]  +
mov dword ptr [esi+10h] 1 +
push [ebp+arg_14]  +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call dword ptr [esi+0Ch]  +
cmp [esi+4] ebx +
jz loc_10132C5  +
push edi  +
mov edi [esi+4] +
mov eax [edi] +
mov [esi+4] eax +
push dword ptr [edi+1Ch]  +
push dword ptr [edi+18h]  +
push dword ptr [edi+14h]  +
push dword ptr [edi+10h]  +
push dword ptr [edi+0Ch]  +
push dword ptr [edi+8]  +
push dword ptr [edi+4]  +
call dword ptr [esi+0Ch]  +
push edi  +
call ??3@YAXPAX@Z  +
pop ecx  +
cmp [esi+4] ebx +
jnz loc_1013298  +
pop edi  +
mov [esi+10h] ebx +
pop esi  +
pop ebx  +
pop ebp  +
retn 1Ch  +
***
mov eax ecx +
xor ecx ecx +
mov dword ptr [eax] offset off_1002CF4 +
mov [eax+4] ecx +
mov [eax+8] ecx +
mov [eax+0Ch] ecx +
mov [eax+10h] ecx +
retn   +
***
pop ecx  +
test eax eax +
jz loc_1013302  +
mov ecx eax +
jmp loc_10132D3  +
xor eax eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
test byte ptr [ebp+8] 1 +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_1002CE8 +
jz loc_1013325  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+8] +
push 0FFFFFFEBh  +
push ebx  +
call ds:GetWindowLongW  +
test eax eax +
jz loc_1013358  +
push dword ptr [ebp+14h]  +
mov edx [eax] +
push dword ptr [ebp+10h]  +
mov ecx eax +
push dword ptr [ebp+0Ch]  +
call dword ptr [edx]  +
jmp loc_1013397  +
push edi  +
mov edi 81h +
cmp [ebp+0Ch] edi +
jnz loc_1013386  +
mov eax [ebp+14h] +
push esi  +
mov esi [eax] +
push esi  +
push 0FFFFFFEBh  +
push ebx  +
mov [esi+4] ebx +
call ds:SetWindowLongW  +
push dword ptr [ebp+14h]  +
mov eax [esi] +
push dword ptr [ebp+10h]  +
mov ecx esi +
push edi  +
call dword ptr [eax]  +
pop esi  +
jmp loc_1013396  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push ebx  +
call ds:DefWindowProcW  +
pop edi  +
pop ebx  +
pop ebp  +
retn 10h  +
***
call ds:DestroyWindow  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
neg eax  +
sbb eax eax +
and eax 8 +
push eax  +
push dword ptr [ecx+4]  +
call ds:ShowWindow  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx+8] +
sub eax 0 +
push esi  +
push edi  +
jz loc_10134A1  +
dec eax  +
jz loc_101345D  +
dec eax  +
jz loc_101343E  +
dec eax  +
jnz loc_10134D7  +
mov eax [ecx+0Ch] +
mov edx [ebp+arg_0] +
sub edx [eax+18h] +
sub edx [eax+14h] +
mov eax [ebp+arg_10] +
dec edx  +
dec edx  +
mov [eax] edx +
mov edx [ecx+0Ch] +
mov esi [edx+18h] +
add esi [edx+14h] +
mov edx [ebp+arg_8] +
lea edx [esi+edx+2] +
mov [eax+8] edx +
mov edx [ecx+0Ch] +
mov esi [edx+14h] +
mov edx [ebp+arg_C] +
add esi edx +
mov [eax+4] esi +
mov ecx [ecx+0Ch] +
mov esi [ecx+18h] +
add esi [ecx+14h] +
lea ecx [esi+edx+2] +
jmp loc_10134D4  +
mov eax [ecx+0Ch] +
mov edx [eax+14h] +
mov esi [ebp+arg_8] +
mov eax [ebp+arg_10] +
add edx esi +
mov [eax] edx +
mov edx [ecx+0Ch] +
mov edi [edx+18h] +
add edi [edx+14h] +
lea edx [edi+esi+2] +
jmp loc_10134BC  +
mov eax [ecx+0Ch] +
mov edx [ebp+arg_0] +
sub edx [eax+18h] +
sub edx [eax+14h] +
mov eax [ebp+arg_10] +
dec edx  +
dec edx  +
mov [eax] edx +
mov edx [ecx+0Ch] +
mov esi [edx+18h] +
add esi [edx+14h] +
mov edx [ebp+arg_8] +
lea edx [esi+edx+2] +
mov [eax+8] edx +
mov esi [ecx+0Ch] +
mov edx [ebp+arg_4] +
mov edi edx +
sub edi [esi+18h] +
sub edi [esi+14h] +
dec edi  +
dec edi  +
mov [eax+4] edi +
mov ecx [ecx+0Ch] +
sub edx [ecx+14h] +
mov [eax+0Ch] edx +
jmp loc_10134D7  +
mov eax [ecx+0Ch] +
mov edx [ebp+arg_0] +
mov esi edx +
sub esi [eax+18h] +
sub esi [eax+14h] +
mov eax [ebp+arg_10] +
dec esi  +
dec esi  +
mov [eax] esi +
mov esi [ecx+0Ch] +
sub edx [esi+14h] +
mov esi [ebp+arg_4] +
mov [eax+8] edx +
mov edx [ecx+0Ch] +
sub esi [edx+14h] +
mov [eax+4] esi +
mov ecx [ecx+0Ch] +
mov ecx [ecx+14h] +
add ecx [ebp+arg_C] +
mov [eax+0Ch] ecx +
pop edi  +
pop esi  +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
sub esp 10h +
sub eax 14h +
push ebx  +
mov ebx ecx +
jz loc_1013519  +
sub eax 70h +
jz loc_1013511  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push dword ptr [ebx+4]  +
call ds:DefWindowProcW  +
jmp loc_1013638  +
or eax 0FFFFFFFFh +
jmp loc_1013638  +
push esi  +
push edi  +
lea eax [ebp-10h] +
push eax  +
push dword ptr [ebx+4]  +
call ds:GetClientRect  +
mov eax [ebx+0Ch] +
push dword ptr [eax]  +
call ds:CreateSolidBrush  +
mov edi [ebp+0Ch] +
mov esi eax +
push esi  +
lea eax [ebp-10h] +
push eax  +
push edi  +
call ds:FillRect  +
push esi  +
call ds:DeleteObject  +
push 7  +
call ds:GetStockObject  +
push eax  +
push edi  +
call ds:SelectObject  +
mov esi ds:MoveToEx +
push 0  +
push dword ptr [ebp-0Ch]  +
mov [ebp+8] eax +
push dword ptr [ebp-10h]  +
push edi  +
call esi  +
push dword ptr [ebp-4]  +
push dword ptr [ebp-10h]  +
push edi  +
mov edi ds:LineTo +
call edi  +
mov eax [ebp-8] +
push 0  +
push dword ptr [ebp-0Ch]  +
dec eax  +
push eax  +
push dword ptr [ebp+0Ch]  +
call esi  +
push dword ptr [ebp-4]  +
mov eax [ebp-8] +
dec eax  +
push eax  +
push dword ptr [ebp+0Ch]  +
call edi  +
mov eax [ebx+8] +
cmp eax 1 +
jnz loc_10135DB  +
push 0  +
push dword ptr [ebp-0Ch]  +
push dword ptr [ebp-10h]  +
push dword ptr [ebp+0Ch]  +
call esi  +
push dword ptr [ebp-0Ch]  +
push dword ptr [ebp-8]  +
push dword ptr [ebp+0Ch]  +
call edi  +
mov eax [ebp-4] +
mov ecx [ebp-10h] +
dec eax  +
push 0  +
push eax  +
mov eax [ebx+0Ch] +
mov eax [eax+18h] +
lea eax [eax+ecx+1] +
push eax  +
push dword ptr [ebp+0Ch]  +
call esi  +
mov eax [ebp-4] +
dec eax  +
push eax  +
jmp loc_1013617  +
cmp eax 3 +
jnz loc_1013627  +
mov eax [ebp-4] +
push 0  +
dec eax  +
push eax  +
push dword ptr [ebp-10h]  +
push dword ptr [ebp+0Ch]  +
call esi  +
mov eax [ebp-4] +
dec eax  +
push eax  +
push dword ptr [ebp-8]  +
push dword ptr [ebp+0Ch]  +
call edi  +
mov eax [ebx+0Ch] +
mov eax [eax+18h] +
mov ecx [ebp-10h] +
push 0  +
push dword ptr [ebp-0Ch]  +
lea eax [eax+ecx+1] +
push eax  +
push dword ptr [ebp+0Ch]  +
call esi  +
push dword ptr [ebp-0Ch]  +
mov eax [ebx+0Ch] +
mov ecx [ebp-8] +
sub ecx [eax+18h] +
dec ecx  +
push ecx  +
push dword ptr [ebp+0Ch]  +
call edi  +
push dword ptr [ebp+8]  +
push dword ptr [ebp+0Ch]  +
call ds:SelectObject  +
xor eax eax +
pop edi  +
inc eax  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
sub esp 28h +
cmp dword_1018700 eax +
jnz loc_1013698  +
mov ecx hmod +
mov [ebp+WndClass.cbClsExtra] eax +
mov [ebp+WndClass.cbWndExtra] eax +
mov [ebp+WndClass.hIcon] eax +
mov [ebp+WndClass.hCursor] eax +
mov [ebp+WndClass.hbrBackground] eax +
mov [ebp+WndClass.lpszMenuName] eax +
lea eax [ebp+WndClass] +
push eax  +
mov dword_1018700 1 +
mov [ebp+WndClass.style] 803h +
mov [ebp+WndClass.lpfnWndProc] offset loc_1013331 +
mov [ebp+WndClass.hInstance] ecx +
mov [ebp+WndClass.lpszClassName] offset aRectwndclass +
call ds:RegisterClassW  +
xor eax eax +
inc eax  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
cmp dword ptr [esi+60h] 0 +
jz loc_10136E2  +
push ebx  +
mov ebx [ebp+arg_0] +
push edi  +
mov edi [ebp+arg_4] +
lea ecx [esi+4] +
mov eax [ecx] +
push edi  +
push ebx  +
call dword ptr [eax+0Ch]  +
lea ecx [esi+14h] +
mov eax [ecx] +
push edi  +
push ebx  +
call dword ptr [eax+0Ch]  +
lea ecx [esi+24h] +
mov eax [ecx] +
push edi  +
push ebx  +
call dword ptr [eax+0Ch]  +
lea ecx [esi+34h] +
mov eax [ecx] +
push edi  +
push ebx  +
call dword ptr [eax+0Ch]  +
pop edi  +
pop ebx  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ecx+60h] 0 +
push esi  +
mov esi [ebp+8] +
push edi  +
lea edi [ecx+48h] +
movs   +
movs   +
movs   +
movs   +
pop edi  +
pop esi  +
jz loc_101370E  +
push 1  +
push 0  +
call sub_10136A2  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+8] +
mov esi ecx +
cmp edi [esi+60h] +
jz loc_101375C  +
mov [esi+60h] edi +
test edi edi +
jz loc_1013738  +
push 1  +
push 0  +
call sub_10136A2  +
lea ecx [esi+4] +
mov eax [ecx] +
push edi  +
call dword ptr [eax+8]  +
lea ecx [esi+14h] +
mov eax [ecx] +
push edi  +
call dword ptr [eax+8]  +
lea ecx [esi+24h] +
mov eax [ecx] +
push edi  +
call dword ptr [eax+8]  +
lea ecx [esi+34h] +
mov eax [ecx] +
push edi  +
call dword ptr [eax+8]  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
push 0  +
push 1  +
mov [ecx+44h] eax +
call sub_10136A2  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
push 1  +
push 0  +
mov [ecx+5Ch] eax +
call sub_10136A2  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
push 1  +
push 0  +
mov [ecx+58h] eax +
call sub_10136A2  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
test byte ptr [ebp+8] 1 +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_1002D2C +
jz loc_10137D9  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
push esi  +
mov esi ecx +
mov [esi+8] eax +
mov eax [ebp+arg_0] +
mov dword ptr [esi] offset off_1002D00 +
mov [esi+0Ch] eax +
call sub_1013642  +
push esi  +
push hmod  +
xor eax eax +
push 0  +
push 0  +
inc eax  +
push eax  +
push eax  +
push eax  +
push eax  +
push 80000000h  +
push offset word_100190C  +
push offset aRectwndclass  +
push 80h  +
call ds:CreateWindowExW  +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_10133A1  +
test byte ptr [ebp+8] 1 +
jz loc_1013856  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push ebx  +
push esi  +
xor esi esi +
push edi  +
mov ebx ecx +
cmp [ebp+8] esi +
jz loc_1013882  +
push 1  +
push esi  +
push dword ptr [ebx+4]  +
call ds:InvalidateRect  +
cmp [ebp+0Ch] esi +
jz loc_10138C2  +
mov esi [ebx+0Ch] +
lea eax [ebp-10h] +
push eax  +
add esi 4 +
sub esp 10h +
mov edi esp +
movs   +
movs   +
movs   +
mov ecx ebx +
movs   +
call sub_10133D8  +
mov eax [ebp-4] +
sub eax [ebp-0Ch] +
push 10h  +
push eax  +
mov eax [ebp-8] +
sub eax [ebp-10h] +
push eax  +
push dword ptr [ebp-0Ch]  +
push dword ptr [ebp-10h]  +
push 0FFFFFFFFh  +
push dword ptr [ebx+4]  +
call ds:SetWindowPos  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebx  +
push esi  +
push edi  +
mov esi ecx +
push 0  +
lea edi [esi+44h] +
push edi  +
lea ecx [esi+4] +
mov dword ptr [esi] offset off_1002D44 +
call sub_10137E5  +
push 1  +
push edi  +
lea ecx [esi+14h] +
call sub_10137E5  +
push 2  +
pop ebx  +
push ebx  +
push edi  +
lea ecx [esi+24h] +
call sub_10137E5  +
push 3  +
push edi  +
lea ecx [esi+34h] +
call sub_10137E5  +
mov [edi+14h] ebx +
mov [edi+18h] ebx +
mov dword ptr [edi] 0FFFFh +
and dword ptr [esi+60h] 0 +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
lea ecx [esi+34h] +
mov dword ptr [esi] offset off_1002D44 +
call sub_10133A1  +
lea ecx [esi+24h] +
call sub_10133A1  +
lea ecx [esi+14h] +
call sub_10133A1  +
lea ecx [esi+4] +
call sub_10133A1  +
mov dword ptr [esi] offset off_1002D2C +
pop esi  +
retn   +
***
pop ecx  +
test eax eax +
jz loc_1013972  +
mov ecx eax +
jmp loc_10138CE  +
xor eax eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1013927  +
test byte ptr [ebp+8] 1 +
jz loc_1013994  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
push edi  +
lea esi [ecx+8] +
mov edi eax +
movs   +
movs   +
movs   +
movs   +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov esi ecx +
mov eax off_1018000 +
mov ebx [ebp+arg_0] +
mov edi ds:GetTickCount +
cmp eax offset off_1018000 +
jz loc_1013A10  +
test byte ptr [eax+1Ch] 10h +
jz loc_1013A10  +
call edi  +
sub eax [esi+2Ch] +
push eax  +
mov eax off_1018000 +
push ebx  +
push offset dword_1002D5C  +
push 0Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1004DE7  +
cmp dword ptr [esi+18h] 2 +
jnz loc_1013A22  +
call edi  +
sub eax [esi+2Ch] +
cmp eax 0C8h +
jbe loc_1013A25  +
mov [esi+18h] ebx +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push esi  +
mov eax ecx +
xor ecx ecx +
push edi  +
mov [ebp+var_10] ecx +
mov [ebp+var_C] ecx +
mov [ebp+var_8] ecx +
mov [ebp+var_4] ecx +
lea edi [eax+8] +
lea esi [ebp+var_10] +
movs   +
movs   +
movs   +
movs   +
pop edi  +
mov [eax+4] ecx +
mov [eax+18h] ecx +
mov [eax+1Ch] ecx +
mov [eax+20h] ecx +
mov [eax+24h] ecx +
mov [eax+28h] ecx +
mov [eax+2Ch] ecx +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push ebx  +
mov ebx ecx +
cmp dword ptr [ebx+4] 0 +
jz loc_1013B86  +
push esi  +
push edi  +
lea eax [ebp+rc2] +
lea edi [ebx+8] +
push eax  +
mov ecx edi +
call sub_1008421  +
test eax eax +
jz loc_1013AB4  +
cmp dword ptr [ebx+18h] 2 +
jnz loc_1013AB4  +
call ds:GetTickCount  +
mov [ebx+2Ch] eax +
lea esi [ebp+rc2] +
movs   +
movs   +
lea eax [ebp+Rect] +
movs   +
push eax  +
push dword ptr [ebx]  +
movs   +
call ds:GetWindowRect  +
mov eax [ebp-0Ch] +
mov esi ds:OffsetRect +
neg eax  +
push eax  +
mov eax [ebp+Rect] +
neg eax  +
push eax  +
lea eax [ebp+rc2] +
push eax  +
call esi  +
mov eax [ebp-0Ch] +
neg eax  +
push eax  +
mov eax [ebp+Rect] +
neg eax  +
push eax  +
lea eax [ebp+Rect] +
push eax  +
call esi  +
push dword ptr [ebp-4]  +
mov esi ds:CreateRectRgn +
push dword ptr [ebp-8]  +
push dword ptr [ebp-0Ch]  +
push [ebp+Rect]  +
call esi  +
push 0FFFFFFECh  +
push dword ptr [ebx]  +
mov edi eax +
call ds:GetWindowLongW  +
test eax 400000h +
jz loc_1013B2E  +
mov ecx [ebp+rc2.right] +
mov eax [ebp-8] +
sub eax [ebp+rc2.right] +
sub ecx [ebp+rc2.left] +
mov [ebp+rc2.left] eax +
add ecx eax +
mov [ebp+rc2.right] ecx +
jmp loc_1013B31  +
mov eax [ebp+rc2.left] +
push [ebp+rc2.bottom]  +
push [ebp+rc2.right]  +
push [ebp+rc2.top]  +
push eax  +
call esi  +
push 3  +
mov esi eax +
push esi  +
push edi  +
push edi  +
call ds:CombineRgn  +
test eax eax +
jnz loc_1013B72  +
mov eax off_1018000 +
cmp eax offset off_1018000 +
jz loc_1013B72  +
test byte ptr [eax+1Ch] 4 +
jz loc_1013B72  +
push offset dword_1002D5C  +
push 0Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10030A0  +
push 1  +
push edi  +
push dword ptr [ebx]  +
call ds:SetWindowRgn  +
push esi  +
call ds:DeleteObject  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push ebx  +
mov ebx ecx +
cmp dword ptr [ebx+4] 0 +
push esi  +
push edi  +
jz loc_1013C2B  +
fldz   +
fcomp  [ebp+arg_18] +
fnstsw  ax +
test ah 44h +
jnp loc_1013C2B  +
mov eax [ebp+arg_10] +
lea esi [ebx+8] +
lea edi [ebp+rcSrc] +
movs   +
movs   +
movs   +
movs   +
mov ecx eax +
sub ecx [ebp+rcSrc.left] +
mov [ebp+rcSrc.left] eax +
sub eax [ebp+arg_0] +
add [ebp+rcSrc.right] ecx +
mov [ebp+var_10] eax +
mov ecx [ebp+arg_14] +
fild  [ebp+var_10] +
mov edx ecx +
sub edx [ebp+rcSrc.top] +
mov [ebp+rcSrc.top] ecx +
fmul  [ebp+arg_1C] +
sub ecx [ebp+arg_4] +
add [ebp+rcSrc.bottom] edx +
mov [ebp+var_8] eax +
fdiv  [ebp+arg_18] +
mov [ebp+var_4] ecx +
call _ftol2_sse  +
fild  [ebp+var_4] +
mov esi eax +
neg esi  +
fmul  [ebp+arg_1C] +
fdiv  [ebp+arg_18] +
call _ftol2_sse  +
neg eax  +
push eax  +
push esi  +
lea eax [ebp+rcSrc] +
push eax  +
call ds:OffsetRect  +
sub esp 10h +
lea eax [ebp+rcSrc] +
mov ecx esp +
push eax  +
call sub_1004CDB  +
mov ecx ebx +
call sub_1013A7C  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 20h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 30h +
push ebx  +
push esi  +
mov ebx ecx +
xor esi esi +
push edi  +
cmp [ebx+4] esi +
jz loc_1013D5D  +
cmp dword ptr [ebx+18h] 2 +
jz loc_1013C5E  +
cmp [ebx+1Ch] esi +
jnz loc_1013D5D  +
cmp [ebx+1Ch] esi +
jz loc_1013D6D  +
lea eax [ebp+rc2] +
push eax  +
push dword ptr [ebx]  +
call ds:GetWindowRect  +
push dword ptr [ebx+24h]  +
mov eax [ebx+20h] +
lea esi [ebx+8] +
lea edi [ebp+rc] +
movs   +
movs   +
movs   +
push eax  +
lea eax [ebp+rc] +
push eax  +
movs   +
call ds:OffsetRect  +
lea eax [ebp+rc] +
push eax  +
lea eax [ebp+rc2] +
push eax  +
lea eax [ebp+rc1] +
push eax  +
call ds:UnionRect  +
lea eax [ebp+rc2] +
push eax  +
lea eax [ebp+rc1] +
push eax  +
call ds:EqualRect  +
test eax eax +
jz loc_1013D45  +
push 0  +
lea eax [ebp+rc] +
push eax  +
call ds:MonitorFromRect  +
test eax eax +
jz loc_1013D6D  +
mov eax off_1018000 +
cmp eax offset off_1018000 +
jz loc_1013D16  +
test byte ptr [eax+1Ch] 4 +
jz loc_1013D16  +
mov ecx [ebp+rc2.bottom] +
sub ecx [ebp+rc2.top] +
push ecx  +
mov ecx [ebp+rc2.right] +
sub ecx [ebp+rc2.left] +
push ecx  +
push [ebp+rc2.top]  +
mov ecx [ebp+rc.bottom] +
push [ebp+rc2.left]  +
sub ecx [ebp+rc.top] +
push ecx  +
mov ecx [ebp+rc.right] +
sub ecx [ebp+rc.left] +
push ecx  +
push [ebp+rc.top]  +
push [ebp+rc.left]  +
push offset dword_1002D5C  +
push 0Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1003FAA  +
sub esp 10h +
mov edi esp +
lea esi [ebp+rc] +
movs   +
movs   +
movs   +
mov ecx ebx +
movs   +
call sub_1013A7C  +
inc dword ptr [ebx+28h]  +
cmp dword ptr [ebx+28h] 0Fh +
jl loc_1013D6D  +
push 837h  +
push dword ptr [ebx]  +
call ds:KillTimer  +
and dword ptr [ebx+1Ch] 0 +
jmp loc_1013D6D  +
mov eax [ebx+20h] +
cdq   +
sub eax edx +
sar eax 1 +
mov [ebx+20h] eax +
mov eax [ebx+24h] +
cdq   +
sub eax edx +
sar eax 1 +
mov [ebx+24h] eax +
jmp loc_1013D6D  +
push 837h  +
push dword ptr [ebx]  +
call ds:KillTimer  +
mov [ebx+1Ch] esi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
sub esp 14h +
push edi  +
mov edi ecx +
cmp [edi+4] eax +
jz loc_1013E1F  +
push ebx  +
xor ebx ebx +
mov [edi+4] eax +
cmp eax ebx +
jz loc_1013DFD  +
push esi  +
mov esi ds:GetSystemMetrics +
push 4Fh  +
call esi  +
push 4Eh  +
mov [ebp+arg_0] eax +
call esi  +
push 4Dh  +
mov [ebp+var_C] eax +
call esi  +
push 4Ch  +
mov [ebp+var_4] eax +
call esi  +
push [ebp+arg_0]  +
lea ecx [ebp+X] +
push [ebp+var_C]  +
push [ebp+var_4]  +
push eax  +
call sub_1004199  +
mov eax [ebp+var_8] +
sub eax [ebp+Y] +
push 50h  +
push eax  +
mov eax [ebp+var_C] +
sub eax [ebp+X] +
push eax  +
push [ebp+Y]  +
push [ebp+X]  +
push 0FFFFFFFFh  +
push dword ptr [edi]  +
call ds:SetWindowPos  +
push 2  +
push 80h  +
push ebx  +
push dword ptr [edi]  +
call ds:SetLayeredWindowAttributes  +
pop esi  +
jmp loc_1013E1E  +
push 90h  +
push ebx  +
push ebx  +
push 1  +
push 1  +
push 0FFFFFFFFh  +
push dword ptr [edi]  +
call ds:SetWindowPos  +
push 2  +
push ebx  +
push ebx  +
push dword ptr [edi]  +
call ds:SetLayeredWindowAttributes  +
pop ebx  +
pop edi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov esi ecx +
xor edi edi +
cmp [esi+4] edi +
jz loc_1013E73  +
cmp dword ptr [esi+18h] 2 +
jnz loc_1013E73  +
push edi  +
push 0Fh  +
push 837h  +
push dword ptr [esi]  +
call ds:SetTimer  +
mov [esi+1Ch] eax +
mov eax [ebp+arg_0] +
cdq   +
push 0Fh  +
pop ecx  +
idiv  ecx +
mov [esi+28h] edi +
mov [esi+20h] eax +
mov eax [ebp+arg_4] +
cdq   +
idiv  ecx +
mov ecx esi +
mov [esi+24h] eax +
call sub_1013C37  +
jmp loc_1013E88  +
cmp [esi+1Ch] edi +
jz loc_1013E88  +
push 837h  +
push dword ptr [esi]  +
call ds:KillTimer  +
mov [esi+1Ch] edi +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebx  +
push esi  +
push edi  +
mov edi ecx +
push 4  +
lea esi [edi+18h] +
pop ebx  +
mov eax [esi-4] +
test eax eax +
jz loc_1013EAE  +
push eax  +
call ds:DeleteObject  +
mov eax [esi] +
test eax eax +
jz loc_1013EBB  +
push eax  +
call ds:DeleteDC  +
add esi 10h +
dec ebx  +
jnz loc_1013EA0  +
push 4  +
lea esi [edi+4] +
pop edi  +
mov eax [esi] +
test eax eax +
jz loc_1013ED4  +
push eax  +
call ds:DestroyWindow  +
add esi 4 +
dec edi  +
jnz loc_1013EC7  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
mov al [ecx+58h] +
push ebx  +
push esi  +
mov esi [ecx+54h] +
push edi  +
mov edi [ebp+arg_0] +
xor ebx ebx +
mov [ebp+var_2] al +
neg esi  +
sbb esi esi +
push 2  +
mov eax edi +
cdq   +
sub eax edx +
sar eax 1 +
and esi 2 +
add esi eax +
lea edx [ebp-4] +
push edx  +
push ebx  +
shl esi 4 +
lea edx [ebp+var_C] +
push edx  +
lea eax [esi+ecx] +
push dword ptr [eax+18h]  +
add eax 1Ch +
push eax  +
push ebx  +
push ebx  +
push dword ptr [ecx+edi*4+4]  +
mov [ebp+var_C] ebx +
mov [ebp+var_8] ebx +
mov [ebp+var_4] bl +
mov [ebp+var_3] bl +
mov [ebp+var_1] 1 +
call ds:UpdateLayeredWindow  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
xor edi edi +
mov esi ecx +
cmp [ebp+arg_8] edi +
jz loc_1013FAF  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call ds:WindowFromPhysicalPoint  +
xor edx edx +
lea ecx [esi+4] +
cmp [ecx] eax +
jz loc_1013F7C  +
inc edx  +
add ecx 4 +
cmp edx 4 +
jl loc_1013F6D  +
jmp loc_1013FE2  +
mov eax off_1018000 +
cmp eax offset off_1018000 +
jz loc_1013FA0  +
test byte ptr [eax+1Ch] 10h +
jz loc_1013FA0  +
push offset dword_1002D70  +
push 0Dh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10030A0  +
xor edi edi +
inc edi  +
push 0  +
mov [esi+54h] edi +
call sub_100EB7C  +
jmp loc_1013FE2  +
cmp [esi+54h] edi +
jz loc_1013FE2  +
mov eax off_1018000 +
cmp eax offset off_1018000 +
jz loc_1013FD8  +
test byte ptr [eax+1Ch] 10h +
jz loc_1013FD8  +
push offset dword_1002D70  +
push 0Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10030A0  +
push 1  +
call sub_100EB7C  +
and [esi+54h] edi +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov [ecx+58h] eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 30h +
push esi  +
xor esi esi +
cmp dword_1018704 esi +
jnz loc_101407D  +
mov eax ds:DefWindowProcW +
mov [ebp+var_30.lpfnWndProc] eax +
mov eax hmod +
push 7F00h  +
push esi  +
mov [ebp+var_30.cbSize] 30h +
mov [ebp+var_30.style] 3 +
mov [ebp+var_30.cbClsExtra] esi +
mov [ebp+var_30.cbWndExtra] esi +
mov [ebp+var_30.hInstance] eax +
mov [ebp+var_30.hIcon] esi +
call ds:LoadCursorW  +
mov [ebp+var_30.hCursor] eax +
lea eax [ebp+var_30] +
push eax  +
mov [ebp+var_30.hbrBackground] 10h +
mov [ebp+var_30.lpszMenuName] esi +
mov [ebp+var_30.lpszClassName] offset aScreenmagnifie +
mov [ebp+var_30.hIconSm] esi +
call ds:RegisterClassExW  +
mov dword_1018704 1 +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
push esi  +
mov esi ecx +
jz loc_10140AC  +
push 0  +
push 1388h  +
push 0BB9h  +
push dword ptr [esi]  +
call ds:SetTimer  +
mov [esi+60h] eax +
jmp loc_10140C3  +
cmp dword ptr [esi+60h] 0 +
jz loc_10140C3  +
push 0BB9h  +
push dword ptr [esi]  +
call ds:KillTimer  +
and dword ptr [esi+60h] 0 +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
push esi  +
push edi  +
xor edi edi +
mov esi ecx +
mov [esi+5Ch] eax +
cmp [ebp+arg_0] edi +
jz loc_1014121  +
cmp [esi+64h] edi +
jnz loc_101415A  +
mov eax off_1018000 +
cmp eax offset off_1018000 +
jz loc_101410C  +
test byte ptr [eax+1Ch] 10h +
jz loc_101410C  +
push offset dword_1002D70  +
push 0Fh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10030A0  +
push edi  +
push 0Ah  +
push 0BBAh  +
push dword ptr [esi]  +
call ds:SetTimer  +
mov [esi+64h] eax +
jmp loc_101415A  +
cmp [esi+64h] edi +
jz loc_101415A  +
mov eax off_1018000 +
cmp eax offset off_1018000 +
jz loc_101414A  +
test byte ptr [eax+1Ch] 10h +
jz loc_101414A  +
push offset dword_1002D70  +
push 10h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10030A0  +
push 0BBAh  +
push dword ptr [esi]  +
call ds:KillTimer  +
mov [esi+64h] edi +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 38h +
push ebx  +
mov ebx ds:GetWindowRect +
push esi  +
push edi  +
lea eax [ebp+y] +
push eax  +
push [ebp+hWinPosInfo]  +
mov esi ecx +
call ebx  +
mov eax [ebp-1Ch] +
sub eax [ebp-24h] +
mov edi [ebp-20h] +
sub edi [ebp+y] +
mov [ebp+var_14] eax +
lea eax [ebp+Rect] +
push eax  +
push dword ptr [esi+4]  +
call ebx  +
mov eax [ebp+Rect.right] +
sub eax [ebp+Rect.left] +
push 4  +
mov [ebp+var_8] eax +
mov eax [ebp+Rect.bottom] +
sub eax [ebp+Rect.top] +
mov [ebp+var_4] eax +
call ds:BeginDeferWindowPos  +
mov ecx eax +
mov eax edi +
sub eax [ebp+var_8] +
push 15h  +
cdq   +
sub eax edx +
mov edx [ebp-24h] +
sub edx [ebp+var_4] +
xor edi edi +
push edi  +
push edi  +
sar eax 1 +
add eax [ebp+y] +
push edx  +
push eax  +
push edi  +
push dword ptr [esi+4]  +
mov edi ds:DeferWindowPos +
push ecx  +
mov [ebp+x] eax +
call edi  +
push 15h  +
xor ecx ecx +
push ecx  +
push ecx  +
push dword ptr [ebp-1Ch]  +
push [ebp+x]  +
push ecx  +
push dword ptr [esi+8]  +
push eax  +
call edi  +
mov [ebp+hWinPosInfo] eax +
lea eax [ebp+Rect] +
push eax  +
push dword ptr [esi+0Ch]  +
call ebx  +
mov eax [ebp+Rect.right] +
sub eax [ebp+Rect.left] +
mov ecx [ebp+Rect.bottom] +
mov ebx [ebp+y] +
sub ecx [ebp+Rect.top] +
sub ebx eax +
mov eax [ebp+var_14] +
sub eax ecx +
cdq   +
sub eax edx +
sar eax 1 +
add eax [ebp-24h] +
push 15h  +
xor ecx ecx +
push ecx  +
push ecx  +
push eax  +
mov [ebp+var_C] eax +
push ebx  +
push ecx  +
push dword ptr [esi+0Ch]  +
push [ebp+hWinPosInfo]  +
call edi  +
push 15h  +
xor ecx ecx +
push ecx  +
push ecx  +
push [ebp+var_C]  +
push dword ptr [ebp-20h]  +
push ecx  +
push dword ptr [esi+10h]  +
push eax  +
call edi  +
push eax  +
call ds:EndDeferWindowPos  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 3Ch +
push ebx  +
push edi  +
xor ebx ebx +
push ebx  +
mov edi ecx +
push offset aPanningwidgets  +
lea ecx [ebp+var_24] +
call sub_1002FF5  +
mov eax [ebp+arg_0] +
mov ecx edi +
mov [edi] eax +
call sub_101400C  +
push ebx  +
mov [ebp+arg_0] ebx +
call ds:GetDC  +
mov [ebp+hDC] eax +
cmp eax ebx +
jz loc_101443A  +
push 5Eh  +
call ds:GetSystemMetrics  +
mov [ebp+var_8] ebx +
test al 3 +
jz loc_10142AA  +
mov [ebp+var_8] 1 +
mov eax off_1018000 +
cmp eax offset off_1018000 +
jz loc_10142D1  +
test byte ptr [eax+1Ch] 10h +
jz loc_10142D1  +
push [ebp+var_8]  +
push offset dword_1002D70  +
push 0Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10030C6  +
xor eax eax +
push esi  +
lea esi [edi+14h] +
mov [ebp+var_4] eax +
jmp loc_10142DF  +
mov eax [ebp+var_4] +
cmp [ebp+var_8] ebx +
jz loc_10142EC  +
mov eax ds:dword_1002DD4[eax] +
jmp loc_10142F2  +
mov eax ds:dword_1002DC4[eax] +
push ebx  +
push ebx  +
push ebx  +
movzx eax ax +
push ebx  +
push eax  +
push hmod  +
call ds:LoadImageW  +
mov [esi] eax +
cmp eax ebx +
jz loc_101433F  +
push [ebp+hDC]  +
call ds:CreateCompatibleDC  +
mov [esi+4] eax +
cmp eax ebx +
jz loc_101433F  +
push dword ptr [esi]  +
push eax  +
call ds:SelectObject  +
lea eax [ebp+var_3C] +
push eax  +
push 18h  +
push dword ptr [esi]  +
call ds:GetObjectW  +
mov eax [ebp+var_38] +
mov [esi+8] eax +
mov eax [ebp+var_34] +
mov [esi+0Ch] eax +
cmp [esi+8] ebx +
jz loc_1014358  +
cmp [esi+0Ch] ebx +
jz loc_1014358  +
add [ebp+var_4] 4 +
add esi 10h +
cmp [ebp+var_4] 10h +
jl loc_10142DC  +
jmp loc_1014377  +
call ds:GetLastError  +
cmp eax ebx +
jle loc_101436C  +
and eax 0FFFFh +
or eax 80070000h +
cmp eax ebx +
mov [ebp+arg_0] eax +
jl loc_101442D  +
lea eax [edi+4] +
mov [ebp+var_8] ebx +
mov [ebp+var_C] eax +
mov eax [ebp+var_8] +
push edi  +
push hmod  +
cdq   +
push ebx  +
push dword ptr [edi]  +
sub eax edx +
sar eax 1 +
mov ecx eax +
shl ecx 4 +
add eax 2 +
shl eax 4 +
push dword ptr [eax+edi]  +
lea esi [ecx+edi] +
lea ecx [esi+1Ch] +
push dword ptr [ecx]  +
mov [ebp+var_14] ecx +
push ebx  +
push ebx  +
push 80000000h  +
push ebx  +
push offset aScreenmagnifie  +
push 80008h  +
call ds:CreateWindowExW  +
mov ecx [ebp+var_C] +
mov [ecx] eax +
cmp eax ebx +
jz loc_1014400  +
push 2  +
lea eax [ebp+var_4] +
push eax  +
push ebx  +
lea eax [ebp+var_1C] +
push eax  +
mov [edi+58h] ebx +
push dword ptr [esi+18h]  +
mov [ebp+var_1C] ebx +
push [ebp+var_14]  +
mov [ebp+var_18] ebx +
push ebx  +
push ebx  +
push dword ptr [ecx]  +
mov byte ptr [ebp+var_4] bl +
mov byte ptr [ebp+var_4+1] bl +
mov byte ptr [ebp+var_4+3] 1 +
mov byte ptr [ebp+var_4+2] 0FFh +
call ds:UpdateLayeredWindow  +
jmp loc_1014417  +
call ds:GetLastError  +
cmp eax ebx +
jle loc_1014414  +
and eax 0FFFFh +
or eax 80070000h +
mov [ebp+arg_0] eax +
cmp [ebp+arg_0] ebx +
jl loc_101442D  +
inc [ebp+var_8]  +
add [ebp+var_C] 4 +
cmp [ebp+var_8] 4 +
jl loc_1014380  +
push [ebp+hDC]  +
push ebx  +
call ds:ReleaseDC  +
pop esi  +
jmp loc_1014451  +
call ds:GetLastError  +
cmp eax ebx +
jle loc_101444E  +
and eax 0FFFFh +
or eax 80070000h +
mov [ebp+arg_0] eax +
cmp [ebp+arg_0] ebx +
jge loc_1014489  +
mov eax off_1018000 +
cmp eax offset off_1018000 +
jz loc_1014489  +
test byte ptr [eax+1Ch] 4 +
jz loc_1014489  +
call ds:GetLastError  +
push eax  +
push [ebp+arg_0]  +
mov eax off_1018000 +
push offset dword_1002D70  +
push 0Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1004DE7  +
lea ecx [ebp+var_24] +
call sub_1003039  +
xor eax eax +
cmp [ebp+arg_0] ebx +
pop edi  +
setnl al  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebx  +
push esi  +
push edi  +
mov esi ecx +
mov eax off_1018000 +
cmp eax offset off_1018000 +
jz loc_10144CF  +
test byte ptr [eax+1Ch] 10h +
jz loc_10144CF  +
push offset dword_1002D70  +
push 0Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10030A0  +
mov edi ds:KillTimer +
push 0BB9h  +
push dword ptr [esi]  +
call edi  +
push 0BBAh  +
push dword ptr [esi]  +
call edi  +
xor ebx ebx +
mov [esi+58h] ebx +
lea edi [esi+4] +
push ebx  +
mov ecx esi +
call sub_1013EE3  +
push 0  +
push dword ptr [edi]  +
call ds:ShowWindow  +
inc ebx  +
add edi 4 +
cmp ebx 4 +
jl loc_10144EF  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov edi edi +
push esi  +
push edi  +
mov edi ecx +
xor esi esi +
push esi  +
mov ecx edi +
call sub_1013EE3  +
inc esi  +
cmp esi 4 +
jl loc_101451B  +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0BB9h +
push ebx  +
push esi  +
mov esi ecx +
jnz loc_1014563  +
xor ebx ebx +
cmp [esi+54h] ebx +
jnz loc_10145F2  +
push ebx  +
call sub_1014085  +
push ebx  +
push 1  +
mov ecx esi +
call sub_10140CD  +
jmp loc_10145F2  +
cmp [ebp+arg_0] 0BBAh +
jnz loc_10145F2  +
xor ebx ebx +
push edi  +
cmp [esi+5Ch] ebx +
jz loc_10145B7  +
cmp [esi+58h] ebx +
jnz loc_1014599  +
lea edi [esi+4] +
mov [ebp+arg_0] 4 +
push 5  +
push dword ptr [edi]  +
call ds:ShowWindow  +
add edi 4 +
dec [ebp+arg_0]  +
jnz loc_1014587  +
add dword ptr [esi+58h] 32h +
mov ecx [esi+58h] +
mov eax 0FFh +
cmp ecx eax +
jl loc_10145EA  +
push ebx  +
push ebx  +
mov ecx esi +
mov [esi+58h] eax +
call sub_10140CD  +
jmp loc_10145EA  +
lea edi [esi+58h] +
add dword ptr [edi] 0FFFFFFCEh +
cmp [edi] ebx +
jg loc_10145EA  +
push 1  +
push ebx  +
mov [edi] ebx +
call sub_10140CD  +
cmp [edi] ebx +
jnz loc_10145EA  +
lea edi [esi+4] +
mov [ebp+arg_0] 4 +
push ebx  +
push dword ptr [edi]  +
call ds:ShowWindow  +
add edi 4 +
dec [ebp+arg_0]  +
jnz loc_10145D9  +
mov ecx esi +
call sub_1014513  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
push edi  +
mov esi ecx +
xor edi edi +
push edi  +
push offset aPanningwidge_0  +
lea ecx [ebp+var_8] +
mov [esi] edi +
mov [esi+54h] edi +
mov dword ptr [esi+58h] 0FFh +
mov dword ptr [esi+5Ch] 1 +
mov [esi+60h] edi +
mov [esi+64h] edi +
call sub_1002FF5  +
push 4  +
xor ecx ecx +
xor edx edx +
lea eax [esi+18h] +
pop ebx  +
mov [eax-4] edi +
mov [eax] edi +
mov [eax+4] ecx +
mov [eax+8] edx +
add eax 10h +
dec ebx  +
jnz loc_101463C  +
xor eax eax +
lea edi [esi+4] +
stos   +
stos   +
stos   +
lea ecx [ebp+var_8] +
stos   +
call sub_1003039  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
xor eax eax +
jmp loc_1014691  +
test eax eax +
jnz loc_1014696  +
mov ecx [esi] +
test ecx ecx +
jz loc_101468E  +
call ecx  +
add esi 4 +
cmp esi [ebp+arg_4] +
jb loc_1014682  +
pop esi  +
pop ebp  +
retn   +
***
mov eax dword_101872C +
push offset dword_101871C  +
push dword_1018728  +
mov dword_101871C eax +
push offset unk_101870C  +
push offset unk_1018710  +
push offset unk_1018708  +
call ds:__wgetmainargs  +
add esp 14h +
mov dword_1018718 eax +
retn   +
***
call __SEH_prolog4  +
xor ebx ebx +
mov [ebp+var_1C] ebx +
mov [ebp+ms_exc.disabled] ebx +
lea eax [ebp+StartupInfo] +
push eax  +
call ds:GetStartupInfoW  +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov [ebp+ms_exc.disabled] 1 +
mov eax large fs:18h +
mov esi [eax+4] +
mov [ebp+var_20] ebx +
mov edi offset Destination +
push ebx  +
push esi  +
push edi  +
call ds:InterlockedCompareExchange  +
cmp eax ebx +
jz loc_1014739  +
cmp eax esi +
jnz loc_101472C  +
xor esi esi +
inc esi  +
mov [ebp+var_20] esi +
jmp loc_101473C  +
push 3E8h  +
call ds:Sleep  +
jmp loc_1014713  +
xor esi esi +
inc esi  +
mov eax dword_1018A5C +
cmp eax esi +
jnz loc_101474F  +
push 1Fh  +
call _amsg_exit  +
pop ecx  +
jmp loc_101477E  +
mov eax dword_1018A5C +
test eax eax +
jnz loc_1014778  +
mov dword_1018A5C esi +
push offset dword_10015A8  +
push offset dword_100159C  +
call sub_1014675  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_101477E  +
jmp loc_10148A2  +
mov dword_1018724 esi +
mov eax dword_1018A5C +
cmp eax esi +
jnz loc_10147A2  +
push offset dword_1001598  +
push offset dword_1001590  +
call _initterm  +
pop ecx  +
pop ecx  +
mov dword_1018A5C 2 +
cmp [ebp+var_20] ebx +
jnz loc_10147AF  +
push ebx  +
push edi  +
call ds:InterlockedExchange  +
cmp dword_1018A64 ebx +
jz loc_10147D0  +
push offset dword_1018A64  +
call sub_1014C29  +
pop ecx  +
test eax eax +
jz loc_10147D0  +
push ebx  +
push 2  +
push ebx  +
call dword_1018A64  +
mov eax ds:_wcmdln +
cmp [eax] ebx +
jz loc_10148A2  +
mov eax [eax] +
mov [ebp+var_24] eax +
movzx ecx word ptr [eax] +
cmp cx 20h +
ja $LN58  +
cmp cx bx +
jz loc_10147F5  +
cmp [ebp+var_1C] ebx +
jnz $LN58  +
movzx ecx word ptr [eax] +
cmp cx bx +
jz loc_101480A  +
cmp cx 20h +
ja loc_101480A  +
inc eax  +
inc eax  +
mov [ebp+var_24] eax +
jmp loc_10147F5  +
test byte ptr [ebp+StartupInfo.dwFlags] 1 +
jz loc_1014816  +
movzx ecx [ebp+StartupInfo.wShowWindow] +
jmp loc_1014819  +
push 0Ah  +
pop ecx  +
push ecx  +
push eax  +
push ebx  +
push 1000000h  +
call _wWinMain@16  +
mov dword_1018720 eax +
cmp dword_1018714 ebx +
jnz $LN59  +
push eax  +
call ds:exit  +
cmp cx 22h +
jnz loc_101484B  +
xor ecx ecx +
cmp [ebp+var_1C] ebx +
setz cl  +
mov [ebp+var_1C] ecx +
inc eax  +
inc eax  +
jmp loc_10147DF  +
mov eax [ebp-14h] +
mov ecx [eax] +
mov ecx [ecx] +
mov [ebp-28h] ecx +
push eax  +
push ecx  +
call _XcptFilter  +
pop ecx  +
pop ecx  +
retn   +
mov esp [ebp-18h] +
mov eax [ebp-28h] +
mov dword_1018720 eax +
xor ebx ebx +
cmp dword_1018714 ebx +
jnz $LN59  +
push eax  +
call ds:_exit  +
cmp dword_1018724 ebx +
jnz loc_101488D  +
call ds:_cexit  +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov eax dword_1018720 +
jmp loc_10148AE  +
xor eax eax +
inc eax  +
retn   +
mov esp [ebp-18h] +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov eax 0FFh +
call __SEH_epilog4  +
retn   +
***
mov eax 5A4Dh +
cmp ds:1000000h ax +
jz loc_10148CB  +
xor eax eax +
jmp loc_1014918  +
mov eax ds:100003Ch +
lea eax [eax+1000000h] +
cmp dword ptr [eax] 4550h +
jnz loc_10148C7  +
movzx ecx word ptr [eax+18h] +
cmp ecx 10Bh +
jz loc_1014905  +
cmp ecx 20Bh +
jnz loc_10148C7  +
cmp dword ptr [eax+84h] 0Eh +
jbe loc_10148C7  +
xor ecx ecx +
cmp [eax+0F8h] ecx +
jmp loc_1014913  +
cmp dword ptr [eax+74h] 0Eh +
jbe loc_10148C7  +
xor ecx ecx +
cmp [eax+0E8h] ecx +
setnz cl  +
mov eax ecx +
push 2  +
mov dword_1018714 eax +
call sub_1014D37  +
push eax  +
call ds:__set_app_type  +
or dword_1018A54 0FFFFFFFFh +
or dword_1018A58 0FFFFFFFFh +
pop ecx  +
pop ecx  +
call ds:__p__fmode  +
mov ecx dword_1018734 +
mov [eax] ecx +
call ds:__p__commode  +
mov ecx dword_1018730 +
mov [eax] ecx +
call sub_1014CC9  +
cmp dword_1018548 0 +
jnz loc_1014971  +
push offset sub_1014CC9  +
call ds:__setusermatherr  +
pop ecx  +
call sub_1014CB1  +
xor eax eax +
retn   +
***
call sub_1014D76  +
jmp ___tmainCRTStartup  +
***
cmp ecx dword_101852C +
jnz loc_10149B0  +
retn 0  +
jmp loc_1014E0C  +
***
mov eax [esp+arg_C] +
or eax eax +
jnz loc_1014A12  +
mov ecx [esp+arg_8] +
mov eax [esp+arg_4] +
xor edx edx +
div  ecx +
mov ebx eax +
mov eax [esp+arg_0] +
div  ecx +
mov edx ebx +
jmp loc_1014A53  +
mov ecx eax +
mov ebx [esp+arg_8] +
mov edx [esp+arg_4] +
mov eax [esp+arg_0] +
shr ecx 1 +
rcr ebx 1 +
shr edx 1 +
rcr eax 1 +
or ecx ecx +
jnz loc_1014A20  +
div  ebx +
mov esi eax +
mul  [esp+arg_C] +
mov ecx eax +
mov eax [esp+arg_8] +
mul  esi +
add edx ecx +
jb loc_1014A4E  +
cmp edx [esp+arg_4] +
ja loc_1014A4E  +
jb loc_1014A4F  +
cmp eax [esp+arg_0] +
jbe loc_1014A4F  +
dec esi  +
xor edx edx +
mov eax esi +
pop esi  +
pop ebx  +
retn 10h  +
***
mov eax [esp+8+arg_4] +
mov ecx [ebp-10h] +
mov large fs:0 ecx +
pop ecx  +
pop edi  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
push ecx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push offset sub_10149A5  +
push offset dword_101852C  +
call _except_handler4_common  +
add esp 18h +
pop ebp  +
retn   +
***
sub ecx eax +
sbb eax eax +
not eax  +
and ecx eax +
mov eax esp +
and eax 0FFFFF000h +
cmp ecx eax +
jb cs20  +
mov eax ecx +
pop ecx  +
xchg eax esp +
mov eax [eax] +
mov [esp+0] eax +
retn   +
sub eax 1000h +
test [eax] eax +
jmp cs10  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov eax [eax] +
cmp dword ptr [eax] 0E06D7363h +
jnz loc_1014B6D  +
cmp dword ptr [eax+10h] 3 +
jnz loc_1014B6D  +
mov eax [eax+14h] +
cmp eax 19930520h +
jz loc_1014B67  +
cmp eax 19930521h +
jz loc_1014B67  +
cmp eax 19930522h +
jz loc_1014B67  +
cmp eax 1994000h +
jnz loc_1014B6D  +
call ds:?terminate@@YAXXZ  +
xor eax eax +
pop ebp  +
retn 4  +
***
push offset loc_1014B30  +
call ds:SetUnhandledExceptionFilter  +
xor eax eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
mov eax 5A4Dh +
cmp [ecx] ax +
jz loc_1014BB6  +
xor eax eax +
pop ebp  +
retn   +
mov eax [ecx+3Ch] +
add eax ecx +
cmp dword ptr [eax] 4550h +
jnz loc_1014BB2  +
xor edx edx +
mov ecx 10Bh +
cmp [eax+18h] cx +
setz dl  +
mov eax edx +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [eax+3Ch] +
add ecx eax +
movzx eax word ptr [ecx+14h] +
push ebx  +
push esi  +
movzx esi word ptr [ecx+6] +
xor edx edx +
push edi  +
lea eax [eax+ecx+18h] +
test esi esi +
jbe loc_1014C1D  +
mov edi [ebp+arg_4] +
mov ecx [eax+0Ch] +
cmp edi ecx +
jb loc_1014C15  +
mov ebx [eax+8] +
add ebx ecx +
cmp edi ebx +
jb loc_1014C1F  +
inc edx  +
add eax 28h +
cmp edx esi +
jb loc_1014C05  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
call __SEH_prolog4  +
and [ebp+ms_exc.disabled] 0 +
mov esi 1000000h +
push esi  +
call sub_1014BA0  +
pop ecx  +
test eax eax +
jz loc_1014C86  +
mov eax [ebp+arg_0] +
sub eax esi +
push eax  +
push esi  +
call sub_1014BE0  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1014C86  +
mov eax [eax+24h] +
shr eax 1Fh +
not eax  +
and eax 1 +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
jmp loc_1014C8F  +
mov eax [ebp-14h] +
mov eax [eax] +
mov eax [eax] +
xor ecx ecx +
cmp eax 0C0000005h +
setz cl  +
mov eax ecx +
retn   +
mov esp [ebp-18h] +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
xor eax eax +
call __SEH_epilog4  +
retn   +
***
call ds:_controlfp  +
pop ecx  +
pop ecx  +
retn   +
***
retn   +
***
call __SEH_prolog4  +
xor eax eax +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_1014D2A  +
cmp ecx 0FFFFFFFFh +
jz loc_1014D2A  +
and [ebp+ms_exc.disabled] eax +
mov edx 5A4Dh +
cmp [ecx] dx +
jnz loc_1014D23  +
mov edx [ecx+3Ch] +
test edx edx +
jl loc_1014D23  +
cmp edx 10000000h +
jnb loc_1014D23  +
lea eax [edx+ecx] +
mov [ebp+var_1C] eax +
cmp dword ptr [eax] 4550h +
jz loc_1014D23  +
jmp loc_1014D1E  +
xor eax eax +
inc eax  +
retn   +
mov esp [ebp-18h] +
xor eax eax +
mov [ebp+var_1C] eax +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
call __SEH_epilog4  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
call ds:GetModuleHandleA  +
test eax eax +
jz loc_1014D6C  +
push eax  +
call sub_1014CD1  +
test eax eax +
jz loc_1014D6C  +
movzx eax word ptr [eax+5Ch] +
cmp ax 2 +
jnz loc_1014D61  +
push 2  +
pop eax  +
pop ebp  +
retn   +
cmp ax 3 +
jnz loc_1014D6C  +
xor eax eax +
inc eax  +
pop ebp  +
retn   +
mov eax [ebp+arg_0] +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov eax dword_101852C +
and [ebp+SystemTimeAsFileTime.dwLowDateTime] 0 +
and [ebp+SystemTimeAsFileTime.dwHighDateTime] 0 +
push ebx  +
push edi  +
mov edi 0BB40E64Eh +
mov ebx 0FFFF0000h +
cmp eax edi +
jz loc_1014DA8  +
test eax ebx +
jz loc_1014DA8  +
not eax  +
mov dword_1018530 eax +
jmp loc_1014E03  +
push esi  +
lea eax [ebp+SystemTimeAsFileTime] +
push eax  +
call ds:GetSystemTimeAsFileTime  +
mov esi [ebp+SystemTimeAsFileTime.dwHighDateTime] +
xor esi [ebp+SystemTimeAsFileTime.dwLowDateTime] +
call ds:GetCurrentProcessId  +
xor esi eax +
call ds:GetCurrentThreadId  +
xor esi eax +
call ds:GetTickCount  +
xor esi eax +
lea eax [ebp+PerformanceCount] +
push eax  +
call ds:QueryPerformanceCounter  +
mov eax dword ptr [ebp+PerformanceCount+4] +
xor eax dword ptr [ebp+PerformanceCount] +
xor esi eax +
cmp esi edi +
jz loc_1014DEF  +
test dword_101852C ebx +
jnz loc_1014DF4  +
mov esi 0BB40E64Fh +
mov dword_101852C esi +
not esi  +
mov dword_1018530 esi +
pop esi  +
pop edi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 328h +
mov dword_1018838 eax +
mov dword_1018834 ecx +
mov dword_1018830 edx +
mov dword_101882C ebx +
mov dword_1018828 esi +
mov dword_1018824 edi +
mov word_1018850 ss +
mov word_1018844 cs +
mov word_1018820 ds +
mov word_101881C es +
mov word_1018818 fs +
mov word_1018814 gs +
pushf   +
pop dword_1018848  +
mov eax [ebp+0] +
mov dword_101883C eax +
mov eax [ebp+4] +
mov dword_1018840 eax +
lea eax [ebp+8] +
mov dword_101884C eax +
mov eax [ebp-320h] +
mov dword_1018788 10001h +
mov eax dword_1018840 +
mov dword_1018744 eax +
mov dword_1018738 0C0000409h +
mov dword_101873C 1 +
mov eax dword_101852C +
mov [ebp-328h] eax +
mov eax dword_1018530 +
mov [ebp-324h] eax +
push 0  +
call ds:SetUnhandledExceptionFilter  +
push offset ExceptionInfo  +
call ds:UnhandledExceptionFilter  +
push 0C0000409h  +
call ds:GetCurrentProcess  +
push eax  +
call ds:TerminateProcess  +
leave   +
retn   +
***
jmp ds:?IsRTLReading@Element@DirectUI@@UAE_NXZ  +
***
jmp ds:?IsContentProtected@Element@DirectUI@@UAE_NXZ  +
***
jmp ds:?GetContentStringAsDisplayed@Element@DirectUI@@UAEPBGPAPAVValue@2@@Z  +
***
jmp ds:?OnPropertyChanging@Element@DirectUI@@UAE_NPBUPropertyInfo@2@HPAVValue@2@1@Z  +
***
jmp ds:?OnPropertyChanging@Element@DirectUI@@UAE_NPAUPropertyInfo@2@HPAVValue@2@1@Z  +
***
jmp ds:?OnPropertyChanged@HWNDElement@DirectUI@@UAEXPBUPropertyInfo@2@HPAVValue@2@1@Z  +
***
jmp ds:?OnPropertyChanged@Element@DirectUI@@UAEXPAUPropertyInfo@2@HPAVValue@2@1@Z  +
***
jmp ds:?OnInput@HWNDElement@DirectUI@@UAEXPAUInputEvent@2@@Z  +
***
jmp ds:?OnKeyFocusMoved@Element@DirectUI@@UAEXPAV12@0@Z  +
***
jmp ds:?OnMouseFocusMoved@Element@DirectUI@@UAEXPAV12@0@Z  +
***
jmp ds:?OnDestroy@HWNDElement@DirectUI@@UAEXXZ  +
***
add [eax] eax +
pushf   +
imul eax [ecx] +
retn 16Bh  +
***
add [eax+0] al +
push 0EE000165h  +
pop esi  +
add [eax] eax +
ficomp  word ptr [esi+1] +
add ah cl +
pop esi  +
add [eax] eax +
mov eax 0FC00015Eh +
pop esi  +
add [eax] eax +
adc [edi+1] bl +
add [esi] ah +
pop edi  +
add [eax] eax +
pop edi  +
add [eax] eax +
push edx  +
pop edi  +
add [eax] eax +
push 7600015Fh  +
pop edi  +
add [eax] eax +
mov [edi+1] bl +
add [edi+ebx*2+5FAA0001h] bl +
add [eax] eax +
mov dh 5Fh +
add [eax] eax +
retn 15Fh  +
***
retf   +
***
retn   +
***
