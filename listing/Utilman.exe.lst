mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1C4h +
and [ebp+var_4] 0 +
push ebx  +
push esi  +
mov esi ds:GetKeyState +
push edi  +
push 0A2h  +
call esi  +
mov edi 8000h +
xor ebx ebx +
mov ecx edi +
inc ebx  +
test ax cx +
jz loc_1002F96  +
mov [ebp+var_4] ebx +
push 0A3h  +
call esi  +
push 2  +
test ax di +
pop edi  +
jz loc_1002FA8  +
or [ebp+var_4] edi +
push 0A4h  +
call esi  +
mov ecx 8000h +
test ax cx +
jz loc_1002FBD  +
or [ebp+var_4] 4 +
push 0A5h  +
call esi  +
mov ecx 8000h +
test ax cx +
jz loc_1002FD2  +
or [ebp+var_4] 8 +
push 0A0h  +
call esi  +
mov ecx 8000h +
test ax cx +
jz loc_1002FE7  +
or [ebp+var_4] 10h +
push 0A1h  +
call esi  +
mov ecx 8000h +
test ax cx +
jz loc_1002FFC  +
or [ebp+var_4] 20h +
and [ebp+pInputs.type] 0 +
push 1BCh  +
lea eax [ebp+pInputs.anonymous_0] +
push 0  +
push eax  +
call memset  +
add esp 0Ch +
xor eax eax +
test byte ptr [ebp+var_4] bl +
jz loc_100303A  +
mov eax 0A2h +
mov word ptr [ebp+pInputs.anonymous_0] ax +
mov [ebp+pInputs.type] ebx +
mov dword ptr [ebp+pInputs.anonymous_0+4] edi +
mov eax ebx +
test byte ptr [ebp+var_4] 2 +
push 3  +
pop esi  +
jz loc_100305E  +
mov ecx eax +
imul ecx ecx +
lea ecx [ebp+ecx+pInputs] +
mov edx 0A3h +
mov [ecx] ebx +
mov [ecx+4] dx +
mov [ecx+8] esi +
inc eax  +
test byte ptr [ebp+var_4] 4 +
jz loc_100307F  +
mov ecx eax +
imul ecx ecx +
lea ecx [ebp+ecx+pInputs] +
mov edx 0A4h +
mov [ecx] ebx +
mov [ecx+4] dx +
mov [ecx+8] edi +
inc eax  +
test byte ptr [ebp+var_4] 8 +
jz loc_10030A0  +
mov ecx eax +
imul ecx ecx +
lea ecx [ebp+ecx+pInputs] +
mov edx 0A5h +
mov [ecx] ebx +
mov [ecx+4] dx +
mov [ecx+8] esi +
inc eax  +
test byte ptr [ebp+var_4] 10h +
jz loc_10030C1  +
mov ecx eax +
imul ecx ecx +
lea ecx [ebp+ecx+pInputs] +
mov edx 0A0h +
mov [ecx] ebx +
mov [ecx+4] dx +
mov [ecx+8] edi +
inc eax  +
test byte ptr [ebp+var_4] 20h +
jz loc_10030E2  +
mov ecx eax +
imul ecx ecx +
lea ecx [ebp+ecx+pInputs] +
mov edx 0A1h +
mov [ecx] ebx +
mov [ecx+4] dx +
mov [ecx+8] edi +
inc eax  +
mov ecx eax +
imul ecx ecx +
lea ecx [ebp+ecx+pInputs] +
and dword ptr [ecx+8] 0 +
mov [ecx] ebx +
push 5Bh  +
pop edx  +
mov [ecx+4] dx +
inc eax  +
mov ecx eax +
imul ecx ecx +
lea ecx [ebp+ecx+pInputs] +
and dword ptr [ecx+8] 0 +
mov [ecx] ebx +
push 55h  +
pop edx  +
mov [ecx+4] dx +
inc eax  +
mov ecx eax +
imul ecx ecx +
lea ecx [ebp+ecx+pInputs] +
mov [ecx+4] dx +
mov [ecx] ebx +
mov [ecx+8] edi +
inc eax  +
mov ecx eax +
imul ecx ecx +
push 5Bh  +
lea ecx [ebp+ecx+pInputs] +
pop edx  +
mov [ecx] ebx +
mov [ecx+4] dx +
mov [ecx+8] edi +
push 1Ch  +
lea ecx [ebp+pInputs] +
push ecx  +
inc eax  +
push eax  +
call ds:SendInput  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
xor ecx ecx +
xor edx edx +
mov [eax+10h] ecx +
mov [eax] ecx +
mov byte ptr [eax+18h] 1 +
mov [eax+19h] cl +
mov [eax+1Ah] dx +
mov [eax+1Ch] ecx +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax [ebp+10h] +
xor edx edx +
push ebx  +
mov [eax] edx +
mov eax [ebp+8] +
sub eax 4 +
push esi  +
mov esi [ebp+0Ch] +
push edi  +
mov edi esi +
jz loc_10031B6  +
dec eax  +
jz loc_10031AD  +
push 57h  +
pop eax  +
jmp loc_1003224  +
xor ebx ebx +
xor eax eax +
mov [ebp+0Fh] al +
jmp loc_10031DC  +
push dword ptr [ebp+14h]  +
call ds:GetTraceLoggerHandle  +
mov ebx eax +
push edx  +
push ebx  +
mov [ebp-4] edx +
call ds:GetTraceEnableLevel  +
push dword ptr [ebp-4]  +
mov [ebp+0Fh] al +
push ebx  +
call ds:GetTraceEnableFlags  +
mov edx [ebp-4] +
movzx ecx word ptr [esi+1Ah] +
test cl 1 +
jz loc_1003205  +
cmp dword ptr [esi+10h] 0 +
jz loc_1003205  +
mov ecx [esi+10h] +
mov [ecx] ebx +
mov [ecx+4] edx +
movzx ecx byte ptr [ebp+0Fh] +
mov edx [esi+10h] +
mov [edx+0Ch] ecx +
mov ecx [esi+10h] +
mov [ecx+8] eax +
jmp loc_1003222  +
test cl 2 +
jz loc_1003213  +
mov esi [esi+10h] +
test esi esi +
jz loc_1003213  +
mov edi esi +
mov cl [ebp+0Fh] +
mov [edi+10h] ebx +
mov [edi+14h] edx +
mov [edi+19h] cl +
mov [edi+1Ch] eax +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push esi  +
mov esi off_100D000 +
push edi  +
mov edi offset dword_100D330 +
jmp loc_100326F  +
mov eax [edi] +
and [ebp+var_4] 0 +
lea ecx [esi+8] +
push ecx  +
push 0  +
push 0  +
lea ecx [ebp+var_8] +
push ecx  +
push 1  +
push eax  +
push esi  +
push offset loc_1003187  +
add edi 4 +
mov [ebp+var_8] eax +
call ds:RegisterTraceGuidsW  +
mov esi [esi] +
test esi esi +
jnz loc_1003246  +
pop edi  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push esi  +
mov esi off_100D000 +
push edi  +
mov edi offset off_100D000 +
cmp esi edi +
jz loc_10032BB  +
jmp loc_10032B1  +
mov eax [esi+8] +
mov ecx [esi+0Ch] +
mov edx eax +
or edx ecx +
jz loc_10032AF  +
push ecx  +
push eax  +
call ds:UnregisterTraceGuids  +
and dword ptr [esi+8] 0 +
and dword ptr [esi+0Ch] 0 +
mov esi [esi] +
test esi esi +
jnz loc_1003293  +
mov off_100D000 edi +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_10] +
test edx edx +
jz loc_10032F4  +
cmp word ptr [edx] 0 +
jnz loc_10032D9  +
push 0Eh  +
jmp loc_10032F6  +
mov eax edx +
push esi  +
lea esi [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_10032DF  +
sub eax esi +
sar eax 1 +
lea eax [eax+eax+2] +
pop esi  +
jmp loc_10032F7  +
push 0Ah  +
pop eax  +
test edx edx +
jz loc_1003308  +
cmp word ptr [edx] 0 +
jnz loc_100330D  +
mov edx offset aNull +
jmp loc_100330D  +
mov edx offset aNull_0 +
push 0  +
push eax  +
push edx  +
push [ebp+arg_8]  +
push [ebp+arg_C]  +
push 2Bh  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call TraceMessage  +
add esp 20h +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
push esi  +
mov esi ecx +
mov ecx [ebp+arg_0] +
mov [esi] eax +
mov [esi+4] ecx +
mov eax off_100D000 +
cmp eax offset off_100D000 +
jz loc_1003368  +
test byte ptr [eax+1Ch] 40h +
jz loc_1003368  +
push ecx  +
push offset dword_10014B0  +
push 0Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10032C3  +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebx  +
push esi  +
mov esi ecx +
mov eax [esi] +
push edi  +
mov ebx offset off_100D000 +
mov edi offset dword_10014B0 +
test eax eax +
jz loc_10033B2  +
mov ecx [eax] +
test ecx ecx +
jge loc_10033B2  +
mov eax off_100D000 +
cmp eax ebx +
jz loc_10033D2  +
test byte ptr [eax+1Ch] 4 +
jz loc_10033B7  +
push ecx  +
push dword ptr [esi+4]  +
push edi  +
push 0Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1006C8D  +
mov eax off_100D000 +
cmp eax ebx +
jz loc_10033D2  +
test byte ptr [eax+1Ch] 40h +
jz loc_10033D2  +
push dword ptr [esi+4]  +
push edi  +
push 0Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10032C3  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax 2228h +
call __alloca_probe  +
mov eax dword_100D004 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
lea eax [ebp+var_210] +
push eax  +
push 2000h  +
lea eax [ebp+var_2228] +
xor ebx ebx +
push eax  +
mov [ebp+var_218] ebx +
call K32EnumProcesses  +
test eax eax +
jz loc_100352B  +
shr [ebp+var_210] 2 +
mov eax 800h +
cmp [ebp+var_210] eax +
jbe loc_1003437  +
mov [ebp+var_210] eax +
push edi  +
call ds:GetCurrentProcessId  +
mov edi ds:ProcessIdToSessionId +
lea ecx [ebp+var_214] +
push ecx  +
push eax  +
mov [ebp+var_21C] eax +
mov [ebp+var_214] ebx +
call edi  +
test eax eax +
jz loc_100352A  +
cmp [ebp+var_210] ebx +
jbe loc_1003524  +
push esi  +
lea eax [ebp+var_220] +
push eax  +
lea esi [ebp+ebx*4+var_2228] +
push dword ptr [esi]  +
call edi  +
test eax eax +
jz loc_100350A  +
mov eax [ebp+var_220] +
cmp eax [ebp+var_214] +
jnz loc_100350A  +
mov esi [esi] +
cmp [ebp+var_21C] esi +
jz loc_100350A  +
push esi  +
push 0  +
push 410h  +
call ds:OpenProcess  +
mov esi eax +
test esi esi +
jz loc_100350A  +
lea eax [ebp+var_228] +
push eax  +
push 4  +
lea eax [ebp+var_224] +
push eax  +
push esi  +
call K32EnumProcessModules  +
test eax eax +
jz loc_1003503  +
push 104h  +
lea eax [ebp+var_20C] +
push eax  +
push [ebp+var_224]  +
push esi  +
call K32GetModuleBaseNameW  +
test eax eax +
jz loc_1003503  +
lea eax [ebp+var_20C] +
push offset aUtilman_exe  +
push eax  +
call ds:_wcsicmp  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1003519  +
push esi  +
call ds:CloseHandle  +
inc ebx  +
cmp ebx [ebp+var_210] +
jb loc_100346F  +
jmp loc_1003523  +
mov [ebp+var_218] 1 +
pop esi  +
mov eax [ebp+var_218] +
pop edi  +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop ebx  +
call sub_100611F  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
mov eax dword_100D004 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
xor ebx ebx +
lea eax [ebp+pSid] +
push eax  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push 4  +
push 1  +
lea eax [ebp+pIdentifierAuthority] +
push eax  +
mov [ebp+var_14] ebx +
mov [ebp+pIdentifierAuthority.Value] bl +
mov [ebp+pIdentifierAuthority.Value+1] bl +
mov [ebp+pIdentifierAuthority.Value+2] bl +
mov [ebp+pIdentifierAuthority.Value+3] bl +
mov [ebp+pIdentifierAuthority.Value+4] bl +
mov [ebp+pIdentifierAuthority.Value+5] 5 +
call ds:AllocateAndInitializeSid  +
test eax eax +
jnz loc_1003588  +
mov [ebp+pSid] ebx +
cmp [ebp+pSid] ebx +
jz loc_10035B6  +
push esi  +
lea eax [ebp+var_14] +
push eax  +
push [ebp+pSid]  +
push ebx  +
call ds:CheckTokenMembership  +
push [ebp+pSid]  +
mov esi eax +
call ds:FreeSid  +
cmp esi ebx +
pop esi  +
jz loc_10035B6  +
cmp [ebp+var_14] ebx +
jz loc_10035B6  +
xor eax eax +
inc eax  +
jmp loc_10035B8  +
xor eax eax +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop ebx  +
call sub_100611F  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
push 1  +
push 1000000h  +
push [ebp+arg_0]  +
call InitProcessPriv  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push 0  +
push [ebp+dwExceptionFlags]  +
push [ebp+dwExceptionCode]  +
call ds:RaiseException  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
cmp dword ptr [ebp+8] 8007000Eh +
push 1  +
setz al  +
dec eax  +
and eax 6 +
add eax 0C0000017h +
push eax  +
call sub_10035EA  +
mov edi edi +
push esi  +
mov esi ecx +
mov ecx [esi] +
xor eax eax +
test ecx ecx +
jz loc_1003647  +
push ecx  +
call ds:RegCloseKey  +
and dword ptr [esi] 0 +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+phkResult] 0 +
push esi  +
lea eax [ebp+phkResult] +
push eax  +
push [ebp+samDesired]  +
mov esi ecx +
push 0  +
push [ebp+lpSubKey]  +
push [ebp+hKey]  +
call ds:RegOpenKeyExW  +
test eax eax +
jnz loc_1003680  +
mov ecx esi +
call sub_1003630  +
mov ecx [ebp+phkResult] +
mov [esi] ecx +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
lea eax [ebp+cbData] +
push eax  +
push [ebp+lpData]  +
lea eax [ebp+lpData] +
push eax  +
push 0  +
push [ebp+lpValueName]  +
mov [ebp+cbData] 4 +
push dword ptr [ecx]  +
call ds:RegQueryValueExW  +
test eax eax +
jnz locret_10036C0  +
mov eax [ebp+lpData] +
sub eax 4 +
neg eax  +
sbb eax eax +
and eax 0Dh +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi [ebp+Type] +
mov eax [esi] +
and dword ptr [esi] 0 +
push edi  +
mov edi [ebp+lpData] +
add eax eax +
mov [ebp+cbData] eax +
lea eax [ebp+cbData] +
push eax  +
push edi  +
lea eax [ebp+Type] +
push eax  +
push 0  +
push [ebp+lpValueName]  +
push dword ptr [ecx]  +
call ds:RegQueryValueExW  +
test eax eax +
jnz loc_1003734  +
cmp [ebp+Type] 1 +
jz loc_100370C  +
cmp [ebp+Type] 2 +
jz loc_100370C  +
push 0Dh  +
pop eax  +
jmp loc_1003734  +
mov eax [ebp+cbData] +
test edi edi +
jz loc_100372E  +
test eax eax +
jz loc_1003729  +
test al 1 +
jnz loc_1003707  +
mov ecx eax +
shr ecx 1 +
cmp word ptr [edi+ecx*2-2] 0 +
jz loc_100372E  +
jmp loc_1003707  +
xor ecx ecx +
mov [edi] cx +
shr eax 1 +
mov [esi] eax +
xor eax eax +
pop edi  +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 4  +
lea eax [ebp+Data] +
push eax  +
push 4  +
push 0  +
push [ebp+lpValueName]  +
push dword ptr [ecx]  +
call ds:RegSetValueExW  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+lpData] 0 +
push esi  +
mov esi ecx +
jnz loc_100377A  +
push 80004005h  +
call loc_1003608  +
push [ebp+lpData]  +
call ds:lstrlenW  +
lea eax [eax+eax+2] +
push eax  +
push [ebp+lpData]  +
push [ebp+dwType]  +
push 0  +
push [ebp+lpValueName]  +
push dword ptr [esi]  +
call ds:RegSetValueExW  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+28h] +
xor ecx ecx +
cmp eax ecx +
jz loc_10037F3  +
mov edx [ebp+0Ch] +
sub edx ecx +
jz loc_10037E1  +
dec edx  +
jnz loc_10037F3  +
mov cl [ebp+10h] +
mov [eax+28h] cl +
mov ecx [ebp+14h] +
mov [eax+10h] ecx +
mov ecx [ebp+18h] +
mov [eax+14h] ecx +
mov ecx [ebp+1Ch] +
mov [eax+18h] ecx +
mov ecx [ebp+20h] +
mov dword ptr [eax+24h] 1 +
jmp loc_10037F0  +
mov [eax+24h] ecx +
mov [eax+28h] cl +
mov [eax+10h] ecx +
mov [eax+14h] ecx +
mov [eax+18h] ecx +
mov [eax+1Ch] ecx +
pop ebp  +
retn 24h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_C] +
mov ecx [eax] +
or ecx [eax+4] +
jz loc_100380F  +
xor eax eax +
jmp loc_100381F  +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call ds:EventRegister  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
mov eax [esi] +
mov ecx [esi+4] +
mov edx eax +
or edx ecx +
jnz loc_1003840  +
xor eax eax +
jmp loc_100384F  +
push ecx  +
push eax  +
call ds:EventUnregister  +
and dword ptr [esi] 0 +
and dword ptr [esi+4] 0 +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push 0  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call ds:EventWrite  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 70h +
lea ecx [ebp+var_70] +
call sub_1006853  +
lea ecx [ebp+var_70] +
call sub_1008EFC  +
mov ecx eax +
call sub_1008B19  +
test eax eax +
jz loc_10038EB  +
call sub_10033DB  +
test eax eax +
jnz loc_10038EB  +
and [ebp+ppv] eax +
lea eax [ebp+ppv] +
push eax  +
push offset riid  +
push 1  +
push 0  +
push offset rclsid  +
call ds:CoCreateInstance  +
test eax eax +
jl loc_10038E0  +
mov eax [ebp+ppv] +
mov ecx [eax] +
push 0  +
push 0  +
push offset aMicrosoft_ease  +
push eax  +
call dword ptr [ecx+0Ch]  +
mov eax [ebp+ppv] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
push 7D0h  +
call ds:Sleep  +
lea ecx [ebp+var_70] +
call sub_1006898  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
xor eax eax +
test ecx ecx +
jz loc_1003910  +
cmp ecx 7FFFFFFFh +
jbe loc_1003915  +
mov eax 80070057h +
test eax eax +
jl loc_1003952  +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
lea eax [ebp+arg_C] +
push eax  +
push [ebp+arg_8]  +
lea esi [ecx-1] +
push esi  +
push edi  +
xor ebx ebx +
call ds:_vsnwprintf  +
add esp 10h +
test eax eax +
jl loc_1003942  +
cmp eax esi +
ja loc_1003942  +
jnz loc_100394D  +
jmp loc_1003947  +
mov ebx 8007007Ah +
xor eax eax +
mov [edi+esi*2] ax +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
push esi  +
lea eax [ebp+var_4] +
push eax  +
mov esi 80004005h +
call ds:GetCurrentProcessId  +
push eax  +
call ds:ProcessIdToSessionId  +
test eax eax +
jz loc_1003999  +
push [ebp+var_4]  +
push dword ptr [ebp+arg_0]  +
push offset aSD  +
push [ebp+arg_4]  +
push [ebp+arg_8]  +
call sub_10038FA  +
add esp 14h +
mov esi eax +
mov eax esi +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 130h +
mov eax dword_100D004 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_8] +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
push edi  +
push 21h  +
pop ecx  +
mov esi offset aSoftwareMicr_1 +
lea edi [ebp+var_128] +
movs   +
mov [ebp+var_12C] eax +
xor eax eax +
mov [ebp+SubKey] ax +
lea eax [ebp+SubKey] +
push eax  +
push 4Dh  +
lea eax [ebp+var_128] +
push eax  +
movs   +
call sub_1003959  +
test eax eax +
jl loc_1003A47  +
mov ecx [ebp+var_12C] +
push 2001Fh  +
lea eax [ebp+SubKey] +
push eax  +
push 80000002h  +
call sub_100364E  +
test eax eax +
jnz loc_1003A47  +
mov eax [ebp+arg_4] +
mov ecx [ebp+var_12C] +
mov [ebp+Type] eax +
lea eax [ebp+Type] +
push eax  +
push ebx  +
push offset aConfiguration  +
call sub_10036C9  +
test eax eax +
jz loc_1003A47  +
xor eax eax +
mov [ebx] ax +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100611F  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0AC4h +
mov eax dword_100D004 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push ebx  +
push esi  +
mov esi [ebp+arg_8] +
push edi  +
xor ebx ebx +
push ebx  +
push ebx  +
xor edi edi +
inc edi  +
push edi  +
push ebx  +
mov [ebp+hInstance] eax +
mov [ebp+Y] esi +
call ds:HeapSetInformation  +
lea eax [ebp+var_A44] +
push eax  +
push ebx  +
mov [ebp+var_A44] edi +
call ds:GetCurrentProcess  +
push eax  +
call ds:IsProcessInJob  +
cmp [ebp+var_A44] ebx +
jnz loc_1003B74  +
mov ecx offset aRestart +
mov eax esi +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_1003AEA  +
cmp dx bx +
jz loc_1003AE6  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_1003AEA  +
add eax 4 +
add ecx 4 +
cmp dx bx +
jnz loc_1003AC4  +
xor eax eax +
jmp loc_1003AEF  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
cmp eax ebx +
jnz loc_1003B5C  +
xor eax eax +
push 7FEh  +
mov word ptr [ebp+var_A0C] ax +
lea eax [ebp+var_A0C+2] +
push ebx  +
push eax  +
mov [ebp+hKey] ebx +
mov [ebp+var_A1C] ebx +
mov [ebp+var_A18] ebx +
call memset  +
add esp 0Ch +
lea eax [ebp+hKey] +
push eax  +
push 400h  +
lea eax [ebp+var_A0C] +
push eax  +
call sub_10039A5  +
push edi  +
push offset Data  +
push offset aConfiguration  +
lea ecx [ebp+hKey] +
call sub_1003762  +
lea ecx [ebp+hKey] +
call sub_1003630  +
call sub_1002F65  +
xor eax eax +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100611F  +
leave   +
retn 10h  +
push ebx  +
call ds:CoInitialize  +
test eax eax +
jl loc_1003B61  +
call sub_100353D  +
test eax eax +
jz loc_1003B95  +
call sub_100387A  +
call ds:CoUninitialize  +
jmp loc_1003B61  +
call sub_10033DB  +
test eax eax +
jnz loc_1003B8D  +
push offset dword_100D2D8  +
push offset unk_100D2E0  +
push offset loc_10037A5  +
push offset dword_1001470  +
mov [ebp+var_A4C] ebx +
mov [ebp+var_A10] ebx +
call sub_10037FC  +
mov esi 80000000h +
cmp dword_100D304 ebx +
jz loc_1003C26  +
mov al byte_100D308 +
cmp al 4 +
jnb loc_1003BDD  +
cmp al bl +
jnz loc_1003C26  +
mov eax dword_100D2F0 +
mov ecx dword_100D2F4 +
mov edx 10000h +
and eax edx +
and ecx esi +
or eax ecx +
jz loc_1003C26  +
mov eax dword_100D2F8 +
mov edi dword_100D2FC +
mov ecx eax +
and ecx edx +
mov edx edi +
and edx esi +
cmp ecx eax +
jnz loc_1003C26  +
cmp edx edi +
jnz loc_1003C26  +
push offset dword_1001480  +
push dword_100D2DC  +
push dword_100D2D8  +
call sub_1003859  +
mov edi offset unk_100D310 +
push edi  +
call sub_100315F  +
push offset aMicrosoftEoa  +
mov dword_100D330 offset dword_10014A0 +
mov off_100D000 edi +
call sub_1003230  +
push 20019h  +
push offset SubKey  +
push 80000002h  +
lea ecx [ebp+var_A58] +
mov [ebp+var_A38] ebx +
mov [ebp+var_A58] ebx +
mov [ebp+var_A54] ebx +
mov [ebp+var_A50] ebx +
call sub_100364E  +
test eax eax +
jnz loc_1003CA2  +
lea eax [ebp+var_A38] +
push eax  +
push offset ValueName  +
lea ecx [ebp+var_A58] +
call sub_100368A  +
test eax eax +
jz loc_1003CA2  +
mov [ebp+var_A38] ebx +
cmp [ebp+var_A38] ebx +
jz loc_1003EAE  +
lea ecx [ebp+var_AC4] +
call sub_1006853  +
push 2001Fh  +
push offset aSoftwareMicr_0  +
push 80000001h  +
lea ecx [ebp+hKey] +
mov [ebp+var_A3C] ebx +
mov [ebp+hKey] ebx +
mov [ebp+var_A1C] ebx +
mov [ebp+var_A18] ebx +
call sub_100364E  +
test eax eax +
jnz loc_1003E86  +
push 206h  +
mov [ebp+ValueName] ax +
lea eax [ebp-20Ah] +
push ebx  +
push eax  +
call memset  +
mov edi ds:RegEnumValueW +
add esp 0Ch +
lea eax [ebp+cbData] +
push eax  +
lea eax [ebp+Data] +
push eax  +
lea eax [ebp+Type] +
push eax  +
push ebx  +
lea eax [ebp+cbValueName] +
push eax  +
lea eax [ebp+ValueName] +
push eax  +
push ebx  +
push [ebp+hKey]  +
mov [ebp+cbValueName] 104h +
mov [ebp+Type] ebx +
mov dword ptr [ebp+Data] ebx +
mov [ebp+cbData] 4 +
mov [ebp+dwIndex] 1 +
call edi  +
test eax eax +
jnz loc_1003E86  +
test [ebp+Data] 1 +
jz loc_1003DA0  +
lea eax [ebp+ValueName] +
push eax  +
call sub_1009359  +
cmp eax ebx +
jz loc_1003DA0  +
push eax  +
lea ecx [ebp+var_AC4] +
call sub_1008EFC  +
mov ecx eax +
call sub_1008B01  +
cmp dword ptr [ebp+Data] ebx +
jz loc_1003DD7  +
push 4  +
lea eax [ebp+var_A34] +
push eax  +
push 4  +
push ebx  +
lea eax [ebp+ValueName] +
push eax  +
push [ebp+hKey]  +
mov [ebp+var_A3C] 1 +
mov [ebp+var_A34] ebx +
call ds:RegSetValueExW  +
push 208h  +
lea eax [ebp+ValueName] +
push ebx  +
push eax  +
call memset  +
mov eax [ebp+dwIndex] +
add esp 0Ch +
inc [ebp+dwIndex]  +
lea ecx [ebp+cbData] +
push ecx  +
lea ecx [ebp+Data] +
push ecx  +
lea ecx [ebp+Type] +
push ecx  +
push ebx  +
lea ecx [ebp+cbValueName] +
push ecx  +
lea ecx [ebp+ValueName] +
push ecx  +
push eax  +
push [ebp+hKey]  +
mov [ebp+cbValueName] 104h +
mov [ebp+cbData] 4 +
call edi  +
test eax eax +
jz loc_1003D74  +
cmp [ebp+var_A3C] ebx +
jz loc_1003E86  +
call ds:CoUninitialize  +
call sub_100327E  +
push offset dword_100D2D8  +
call sub_1003828  +
lea ecx [ebp+hKey] +
call sub_1003630  +
lea ecx [ebp+var_AC4] +
call sub_1006898  +
lea ecx [ebp+var_A58] +
call sub_1003630  +
mov eax ebx +
jmp loc_1003B63  +
lea ecx [ebp+var_AC4] +
call sub_1008EFC  +
mov ecx eax +
call sub_1008DC3  +
lea ecx [ebp+hKey] +
call sub_1003630  +
lea ecx [ebp+var_AC4] +
call sub_1006898  +
xor edi edi +
inc edi  +
push edi  +
push 8  +
call sub_10035CA  +
test eax eax +
jl loc_1003F79  +
push 2  +
call InitThread  +
cmp eax ebx +
jl loc_1003F79  +
lea eax [ebp+var_A10] +
push eax  +
push 4  +
push 0C80000h  +
push ebx  +
push esi  +
push esi  +
push esi  +
push esi  +
push edi  +
push [ebp+hInstance]  +
call ds:LoadIconW  +
push eax  +
push ebx  +
push offset Data  +
call ds:?Create@NativeHWNDHost@DirectUI@@SGJPBGPAUHWND__@@PAUHICON__@@HHHHHHIPAPAV12@@Z  +
cmp [ebp+var_A10] ebx +
jz loc_1003F89  +
lea eax [ebp+Y] +
push eax  +
push ebx  +
push [ebp+Y]  +
lea eax [ebp+var_A34] +
push [ebp+hInstance]  +
push eax  +
push [ebp+var_A10]  +
call sub_10041B7  +
test eax eax +
jl loc_1003F79  +
push [ebp+Y]  +
mov ecx [ebp+var_A34] +
call ds:?EndDefer@Element@DirectUI@@QAEXK@Z  +
mov ecx [ebp+var_A10] +
push edi  +
push ebx  +
push ebx  +
push 64h  +
push 64h  +
push 0FFFFFFFFh  +
call ds:?GetHWND@NativeHWNDHost@DirectUI@@QAEPAUHWND__@@XZ  +
push eax  +
call ds:SetWindowPos  +
mov ecx [ebp+var_A10] +
push edi  +
call ds:?ShowWindow@NativeHWNDHost@DirectUI@@QAEXH@Z  +
mov [ebp+var_A4C] edi +
call StartMessagePump  +
mov ecx [ebp+var_A10] +
cmp ecx ebx +
jz loc_1003F89  +
call ds:?Destroy@NativeHWNDHost@DirectUI@@QAEXXZ  +
call UnInitThread  +
push 1000000h  +
call UnInitProcessPriv  +
call ds:CoUninitialize  +
call sub_100327E  +
push offset dword_100D2D8  +
call sub_1003828  +
mov ebx [ebp+var_A4C] +
jmp loc_1003E74  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+dwBytes]  +
push 8  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call ds:??1DUIFactory@DirectUI@@QAE@XZ  +
test [ebp+arg_0] 1 +
jz loc_1003FF8  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
mov esi ecx +
mov [esi+94h] eax +
mov eax [ebp+arg_4] +
push edi  +
mov [esi+98h] eax +
call ds:?Register@HWNDElement@DirectUI@@SGJXZ  +
push [ebp+arg_10]  +
mov ecx [esi+94h] +
push [ebp+arg_C]  +
push 0  +
push 0  +
call ds:?GetHWND@NativeHWNDHost@DirectUI@@QAEPAUHWND__@@XZ  +
push eax  +
mov ecx esi +
call ds:?Initialize@HWNDElement@DirectUI@@QAEJPAUHWND__@@_NIPAVElement@2@PAK@Z  +
mov edi eax +
test edi edi +
jl loc_1004127  +
push 1  +
mov ecx esi +
call ds:?SetVisible@Element@DirectUI@@QAEJ_N@Z  +
mov edi eax +
test edi edi +
jl loc_1004127  +
push 1  +
mov ecx esi +
call ds:?SetAccessible@Element@DirectUI@@QAEJ_N@Z  +
mov edi eax +
test edi edi +
jl loc_1004127  +
mov ecx [esi+94h] +
push esi  +
call ds:?Host@NativeHWNDHost@DirectUI@@QAEXPAVElement@2@@Z  +
push 1  +
mov ecx esi +
call ds:?DoubleBuffered@Element@DirectUI@@QAEX_N@Z  +
lea eax [ebp+arg_0] +
push eax  +
call ds:?Create@FillLayout@DirectUI@@SGJPAPAVLayout@2@@Z  +
mov edi eax +
test edi edi +
jl loc_1004127  +
push [ebp+arg_0]  +
mov ecx esi +
call ds:?SetLayout@Element@DirectUI@@QAEJPAVLayout@2@@Z  +
mov edi eax +
test edi edi +
jge loc_10040BD  +
mov ecx [ebp+arg_0] +
call ds:?Destroy@Layout@DirectUI@@QAEXXZ  +
jmp loc_1004127  +
push 10h  +
mov edi 80004005h +
call ??2@YAPAXI@Z  +
pop ecx  +
mov [ebp+arg_0] eax +
test eax eax +
jz loc_10040E9  +
mov ecx [esi+94h] +
call ds:?GetHWND@NativeHWNDHost@DirectUI@@QAEPAUHWND__@@XZ  +
mov ecx [ebp+arg_0] +
push eax  +
call ds:??0DUIFactory@DirectUI@@QAE@PAUHWND__@@@Z  +
jmp loc_10040EB  +
xor eax eax +
mov [esi+9Ch] eax +
test eax eax +
jz loc_1004127  +
push 0  +
lea ecx [ebp+arg_0] +
push ecx  +
movzx ecx [ebp+arg_8] +
push 0  +
push esi  +
push offset aMain  +
push ecx  +
push dword ptr [esi+98h]  +
mov ecx eax +
call ds:?LoadFromResource@DUIFactory@DirectUI@@QAEJPAUHINSTANCE__@@PBG1PAVElement@2@PAKPAPAV42@1@Z  +
mov edi eax +
test edi edi +
jl loc_1004127  +
push [ebp+arg_0]  +
mov ecx esi +
call ds:?Add@Element@DirectUI@@QAEJPAV12@@Z  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:?OnEvent@HWNDElement@DirectUI@@UAEXPAUEvent@2@@Z  +
***
mov edi edi +
push esi  +
lea esi [ecx+94h] +
mov ecx [esi] +
call ds:?GetHWND@NativeHWNDHost@DirectUI@@QAEPAUHWND__@@XZ  +
test eax eax +
jz loc_1004163  +
mov ecx [esi] +
pop esi  +
jmp ds:?DestroyWindow@NativeHWNDHost@DirectUI@@QAEXXZ  +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
push 0F8h  +
call sub_1003FBD  +
mov esi eax +
test esi esi +
jz loc_1004184  +
mov ecx esi +
call sub_10042DD  +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
mov ecx [esi+9Ch] +
mov dword ptr [esi] offset off_10016F0 +
test ecx ecx +
jz loc_10041A9  +
push 1  +
call sub_1003FDD  +
mov ecx esi +
pop esi  +
jmp ds:??1HWNDElement@DirectUI@@UAE@XZ  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_4] +
and dword ptr [edi] 0 +
call sub_100416A  +
mov esi eax +
test esi esi +
jnz loc_10041D6  +
mov eax 8007000Eh +
jmp loc_1004211  +
push ebx  +
push [ebp+arg_14]  +
mov ecx esi +
push [ebp+arg_10]  +
push 0CAh  +
push [ebp+arg_8]  +
push [ebp+arg_0]  +
call sub_1004004  +
mov ebx eax +
mov ecx esi +
test ebx ebx +
jge loc_1004203  +
push 1  +
call ds:?Destroy@Element@DirectUI@@QAEJ_N@Z  +
mov eax ebx +
jmp loc_1004210  +
push [ebp+arg_C]  +
mov [edi] esi +
mov eax [esi] +
call dword ptr [eax+0C4h]  +
pop ebx  +
pop edi  +
pop esi  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_100418D  +
test byte ptr [ebp+8] 1 +
jz loc_1004236  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
call ds:??0HWNDElement@DirectUI@@QAE@XZ  +
mov dword ptr [esi] offset off_10016F0 +
mov eax esi +
pop esi  +
retn   +
***
lea eax [ecx+0Ch] +
or edx 0FFFFFFFFh +
xadd [eax] edx +
dec edx  +
test edx edx +
jg locret_1004275  +
mov eax [ecx] +
mov edx [eax] +
push ecx  +
mov ecx eax +
call dword ptr [edx+4]  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
mov eax [ebp+arg_0] +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_10042AC  +
test dx dx +
jz loc_10042A8  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_10042AC  +
add eax 4 +
add ecx 4 +
test dx dx +
jnz loc_1004286  +
xor eax eax +
pop ebp  +
retn   +
sbb eax eax +
sbb eax 0FFFFFFFFh +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
lea eax [ebp+arg_4] +
push eax  +
mov eax [ebp+arg_4] +
call dword ptr [eax]  +
mov ecx eax +
mov eax [ebp+arg_0] +
mov eax [eax] +
sub eax [ecx] +
neg eax  +
sbb eax eax +
inc eax  +
pop ebp  +
retn 8  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_1004242  +
and dword ptr [esi+0A0h] 0 +
lea ecx [esi+0A4h] +
mov dword ptr [esi] offset off_10017D0 +
call sub_1009D26  +
and dword ptr [esi+0F0h] 0 +
and dword ptr [esi+0F4h] 0 +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
push edi  +
lea edi [esi+0A0h] +
mov eax [edi] +
mov dword ptr [esi] offset off_10017D0 +
test eax eax +
jz loc_100433F  +
push eax  +
call ds:__imp_?GetHWND@HWNDElement@DirectUI@@UAEPAUHWND__@@XZ  +
push eax  +
call ds:KillTimer  +
and dword ptr [edi] 0 +
lea ecx [esi+0A4h] +
call sub_1009EBC  +
pop edi  +
mov ecx esi +
pop esi  +
jmp sub_100418D  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
xor esi esi +
push esi  +
push esi  +
push esi  +
push esi  +
lea eax [ebp+arg_0] +
push eax  +
mov [edi] esi +
call ds:?Create@DUIXmlParser@DirectUI@@SGJPAPAV12@P6GPAVValue@2@PBGPAX@Z2P6GX11H2@Z2@Z  +
mov ebx eax +
cmp ebx esi +
jl loc_10043A1  +
cmp [ebp+arg_0] esi +
jz loc_100439D  +
push 1000000h  +
push esi  +
call ds:GetModuleHandleW  +
mov ecx [ebp+arg_0] +
push eax  +
push 0CAh  +
call ds:?SetXMLFromResource@DUIXmlParser@DirectUI@@QAEJIPAUHINSTANCE__@@0@Z  +
mov ebx eax +
cmp ebx esi +
jge loc_10043B0  +
mov ecx [ebp+arg_0] +
cmp ecx esi +
jz loc_10043B5  +
call ds:?Destroy@DUIXmlParser@DirectUI@@QAEXXZ  +
jmp loc_10043B5  +
mov eax [ebp+arg_0] +
mov [edi] eax +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push dword ptr [ebp+18h]  +
mov esi ecx +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call ds:__imp_?Paint@Element@DirectUI@@UAEXPAUHDC__@@PBUtagRECT@@1PAU4@2@Z  +
lea eax [esi+0F4h] +
xor ecx ecx +
cmp [eax] ecx +
jnz loc_100440A  +
push ecx  +
push ecx  +
mov dword ptr [eax] 1 +
mov eax [esi] +
push 401h  +
mov ecx esi +
call dword ptr [eax+0A0h]  +
push eax  +
call ds:PostMessageW  +
pop esi  +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_C] +
add eax eax +
push eax  +
push [ebp+arg_8]  +
mov eax [ebp+arg_4] +
add eax eax +
push eax  +
push [ebp+arg_0]  +
call memcpy_s  +
add esp 10h +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
mul  [ebp+arg_8] +
test edx edx +
ja loc_100444E  +
cmp eax 0FFFFFFFFh +
jbe loc_1004455  +
mov eax 80070057h +
jmp loc_100445C  +
mov ecx [ebp+arg_0] +
mov [ecx] eax +
xor eax eax +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_0]  +
call ds:malloc  +
pop ecx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_0]  +
call ds:__imp_free  +
pop ecx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_10044CD  +
cmp eax 0Ch +
jz loc_10044C6  +
cmp eax 16h +
jz loc_10044BF  +
cmp eax 22h +
jz loc_10044BF  +
cmp eax 50h +
jz loc_10044CD  +
push 80004005h  +
call loc_1003608  +
push 80070057h  +
jmp loc_10044BA  +
push 8007000Eh  +
jmp loc_10044BA  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1004414  +
add esp 10h +
push eax  +
call sub_1004495  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+hResInfo]  +
push [ebp+hModule]  +
call ds:LoadResource  +
test eax eax +
jz loc_1004555  +
push esi  +
push eax  +
call ds:LockResource  +
mov esi eax +
test esi esi +
jz loc_1004547  +
push [ebp+hResInfo]  +
push [ebp+hModule]  +
call ds:SizeofResource  +
mov ecx [ebp+arg_8] +
add eax esi +
and ecx 0Fh +
jbe loc_1004543  +
cmp esi eax +
jnb loc_1004547  +
dec ecx  +
movzx edx word ptr [esi] +
lea esi [esi+edx*2+2] +
jnz loc_1004535  +
cmp esi eax +
jb loc_100454B  +
xor eax eax +
jmp loc_1004554  +
movzx eax word ptr [esi] +
neg eax  +
sbb eax eax +
and eax esi +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
shr eax 4 +
inc eax  +
movzx eax ax +
push 6  +
push eax  +
push [ebp+hModule]  +
call ds:FindResourceW  +
test eax eax +
jz loc_1004589  +
push [ebp+arg_4]  +
push eax  +
push [ebp+hModule]  +
call sub_10044FC  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
push dword ptr [ebp+wLanguage]  +
shr eax 4 +
inc eax  +
movzx eax ax +
push eax  +
push 6  +
push [ebp+hModule]  +
call ds:FindResourceExW  +
test eax eax +
jz loc_10045C0  +
push [ebp+arg_4]  +
push eax  +
push [ebp+hModule]  +
call sub_10044FC  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov esi offset unk_100D35C +
push 0  +
mov ecx esi +
call sub_1005C86  +
xor ebx ebx +
inc ebx  +
jmp loc_10045FD  +
push dword ptr [ebp+wLanguage]  +
push [ebp+arg_0]  +
push edi  +
call sub_1004592  +
test eax eax +
jnz loc_100460A  +
push ebx  +
mov ecx esi +
call sub_1005C86  +
inc ebx  +
mov edi eax +
test edi edi +
jnz loc_10045E4  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
mov eax edi +
jmp loc_1004603  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_C] +
cmp eax 0FFFFFFFFh +
jnz loc_1004635  +
mov eax [ebp+arg_8] +
lea ecx [eax+2] +
mov dx [eax] +
inc eax  +
inc eax  +
test dx dx +
jnz loc_1004626  +
sub eax ecx +
sar eax 1 +
inc eax  +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_10044D6  +
add esp 10h +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1004316  +
test byte ptr [ebp+8] 1 +
jz loc_1004668  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
jnz loc_1004689  +
push 80004005h  +
call loc_1003608  +
push [ebp+arg_0]  +
push dword ptr [ecx]  +
call sub_100427B  +
pop ecx  +
pop ecx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov ecx [ebp+arg_0] +
test ecx ecx +
jnz loc_10046B7  +
push 80004005h  +
call loc_1003608  +
mov eax [ecx] +
call dword ptr [eax+0Ch]  +
add eax 10h +
mov [esi] eax +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_1004465  +
mov [esi] eax +
test eax eax +
setnz al  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+arg_0]  +
call sub_10045C9  +
pop ebp  +
retn 4  +
***
push 8007000Eh  +
call loc_1003608  +
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
mov ecx [esi] +
mov eax [ecx] +
push edi  +
call dword ptr [eax+10h]  +
lea edx [esi+0Ch] +
cmp dword ptr [edx] 0 +
jl loc_100473E  +
cmp eax [esi] +
jnz loc_100473E  +
xor eax eax +
mov edi esi +
inc eax  +
xadd [edx] eax +
jmp loc_1004770  +
mov edx [eax] +
push 2  +
push dword ptr [esi+4]  +
mov ecx eax +
call dword ptr [edx]  +
mov edi eax +
test edi edi +
jnz loc_1004754  +
call loc_1004706  +
mov eax [esi+4] +
mov [edi+4] eax +
mov eax [esi+4] +
inc eax  +
push eax  +
add esi 10h +
push esi  +
push eax  +
lea eax [edi+10h] +
push eax  +
call sub_1004414  +
add esp 10h +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
test eax eax +
jl loc_100479D  +
mov edx [ecx] +
cmp eax [edx-8] +
jg loc_100479D  +
mov [edx-0Ch] eax +
mov ecx [ecx] +
xor edx edx +
mov [ecx+eax*2] dx +
pop ebp  +
retn 4  +
***
push 80070057h  +
call loc_1003608  +
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
push esi  +
mov esi ecx +
mov eax [esi] +
sub eax 10h +
cmp [eax+8] edx +
mov ecx [eax] +
jge loc_10047D7  +
test edx edx +
jle loc_10047D7  +
push edi  +
mov edi [ecx] +
push 2  +
push edx  +
push eax  +
call dword ptr [edi+8]  +
pop edi  +
test eax eax +
jnz loc_10047DC  +
call loc_1004706  +
add eax 10h +
mov [esi] eax +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
push esi  +
test eax eax +
jnz loc_10047FC  +
mov esi [ecx] +
jmp loc_1004813  +
mov esi [eax] +
jmp loc_1004813  +
push [ebp+arg_0]  +
push dword ptr [esi+8]  +
call sub_100427B  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_100481E  +
mov esi [esi] +
test esi esi +
jnz loc_1004800  +
xor eax eax +
pop esi  +
pop ebp  +
retn 8  +
mov eax esi +
jmp loc_1004819  +
***
mov edi edi +
push esi  +
push offset dword_100D340  +
mov esi ecx +
call sub_100469E  +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
mov ecx [ebp+arg_0] +
call sub_1004674  +
neg eax  +
sbb eax eax +
inc eax  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
push esi  +
push 2  +
push [ebp+arg_0]  +
lea eax [ebp+var_4] +
push eax  +
mov esi ecx +
call sub_100443A  +
test eax eax +
jge loc_100488F  +
xor al al +
jmp loc_1004899  +
push [ebp+var_4]  +
mov ecx esi +
call sub_10046CD  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax] +
push esi  +
sub eax 10h +
push eax  +
mov esi ecx +
call sub_1004716  +
add eax 10h +
mov [esi] eax +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
mov esi [ecx] +
mov ebx [esi-0Ch] +
sub esi 10h +
mov [ebp+var_8] ecx +
mov ecx [esi] +
mov eax [ecx] +
push edi  +
mov [ebp+var_4] ebx +
call dword ptr [eax+10h]  +
mov edx [eax] +
push 2  +
push [ebp+arg_0]  +
mov ecx eax +
call dword ptr [edx]  +
mov edi eax +
test edi edi +
jnz loc_1004900  +
call loc_1004706  +
mov eax [ebp+arg_0] +
cmp ebx eax +
jge loc_1004909  +
mov eax ebx +
inc eax  +
push eax  +
lea ecx [esi+10h] +
push ecx  +
push eax  +
lea ebx [edi+10h] +
push ebx  +
call sub_1004414  +
mov eax [ebp+var_4] +
add esp 10h +
mov ecx esi +
mov [edi+4] eax +
call sub_100425C  +
mov eax [ebp+var_8] +
pop edi  +
pop esi  +
mov [eax] ebx +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx] +
mov edx [eax-0Ch] +
sub eax 10h +
push esi  +
mov esi [ebp+arg_0] +
cmp edx esi +
jle loc_1004951  +
mov esi edx +
cmp dword ptr [eax+0Ch] 1 +
jle loc_100495F  +
push esi  +
call sub_10048CB  +
jmp loc_1004983  +
mov eax [eax+8] +
cmp eax esi +
jge loc_1004983  +
mov edx eax +
mov eax 400h +
cmp edx eax +
jle loc_1004975  +
add edx eax +
jmp loc_1004977  +
add edx edx +
cmp edx esi +
jge loc_100497D  +
mov edx esi +
push edx  +
call sub_10047AD  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
push ebx  +
push esi  +
mov [ebp+var_4] ecx +
mov ecx [ebp+arg_0] +
push edi  +
call sub_1008EFC  +
mov ecx eax +
call sub_1008AEE  +
mov esi eax +
mov edi offset aStatus +
push edi  +
mov [ebp+var_18] esi +
call StrToID  +
mov ecx [ebp+var_4] +
mov ebx ds:?FindDescendent@Element@DirectUI@@QAEPAV12@G@Z +
movzx eax ax +
push eax  +
call ebx  +
test eax eax +
jnz loc_10049D7  +
mov eax 80004005h +
jmp loc_1004AC9  +
mov ecx eax +
call ds:?GetParent@Element@DirectUI@@QAEPAV12@XZ  +
mov [ebp+var_C] eax +
test eax eax +
jz loc_10049CD  +
mov eax [esi] +
mov [ebp+var_14] 1 +
mov [ebp+var_10] eax +
test eax eax +
jz loc_1004AA6  +
mov ecx [ebp+var_18] +
lea eax [ebp+var_10] +
push eax  +
call sub_1006FC3  +
mov esi [eax] +
push esi  +
call sub_1009359  +
mov ecx eax +
mov [ebp+var_8] ecx +
test ecx ecx +
jz loc_1004A96  +
push offset aSystemsetting  +
call sub_1008F1F  +
push eax  +
call sub_100484E  +
test al al +
jnz loc_1004A96  +
push esi  +
call StrToID  +
mov ecx [ebp+var_4] +
movzx eax ax +
push eax  +
call ebx  +
test eax eax +
jnz loc_1004A96  +
lea eax [ebp+arg_0] +
push eax  +
xor esi esi +
push esi  +
push [ebp+var_C]  +
push esi  +
call ds:?Create@Element@DirectUI@@SGJIPAV12@PAKPAPAV12@@Z  +
cmp [ebp+arg_0] esi +
jz loc_10049CD  +
mov ecx [ebp+var_8] +
call sub_1008F04  +
mov eax [eax] +
cmp [eax] si +
jnz loc_1004A71  +
mov ecx [ebp+var_8] +
call sub_1008EFC  +
mov eax [eax] +
mov ecx [ebp+arg_0] +
push eax  +
call ds:?SetContentString@Element@DirectUI@@QAEJPBG@Z  +
mov ecx [ebp+arg_0] +
push edi  +
call ds:?SetClass@Element@DirectUI@@QAEJPBG@Z  +
mov ecx [ebp+var_C] +
push 1  +
push [ebp+arg_0]  +
call ds:?Insert@Element@DirectUI@@QAEJPAV12@I@Z  +
mov [ebp+var_14] esi +
cmp [ebp+var_10] 0 +
jnz loc_10049FA  +
cmp [ebp+var_14] 0 +
jz loc_1004AC7  +
push offset aExpandoarea  +
call StrToID  +
mov ecx [ebp+var_4] +
movzx eax ax +
push eax  +
call ebx  +
test eax eax +
jz loc_1004AC7  +
push 0FFFFFFFDh  +
mov ecx eax +
call ds:?SetLayoutPos@Element@DirectUI@@QAEJH@Z  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_10048A3  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi] +
sub eax 10h +
cmp dword ptr [eax+0Ch] 1 +
jle loc_1004B09  +
push dword ptr [eax+4]  +
call sub_10048CB  +
mov eax [esi] +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov eax [esi] +
xor ecx ecx +
sub eax 10h +
inc ecx  +
sub ecx [eax+0Ch] +
mov eax [eax+8] +
sub eax [ebp+arg_0] +
or ecx eax +
jge loc_1004B39  +
push [ebp+arg_0]  +
mov ecx esi +
call sub_100493A  +
mov eax [esi] +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 48h +
mov eax dword_100D004 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
push edi  +
push 10h  +
pop ecx  +
mov esi offset aSystemrootSyst +
lea edi [ebp+Src] +
movs   +
mov esi 124h +
xor edi edi +
push esi  +
lea ecx [ebp+lpDst] +
mov [ebp+lpDst] edi +
call sub_100486C  +
test al al +
jnz loc_1004B89  +
push [ebp+lpDst]  +
call sub_100447D  +
xor eax eax +
jmp loc_1004BCA  +
push ebx  +
mov ebx [ebp+lpDst] +
push esi  +
push ebx  +
lea eax [ebp+Src] +
push eax  +
call ds:ExpandEnvironmentStringsW  +
cmp eax edi +
jz loc_1004BC1  +
cmp eax esi +
ja loc_1004BC1  +
push edi  +
push edi  +
push offset Parameters  +
push ebx  +
push edi  +
push edi  +
call ds:ShellExecuteW  +
cmp eax 20h +
push ebx  +
jle loc_1004BC2  +
call sub_100447D  +
xor eax eax +
inc eax  +
jmp loc_1004BC9  +
push ebx  +
call sub_100447D  +
xor eax eax +
pop ebx  +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_100611F  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
push [ebp+arg_4]  +
mov edi ecx +
call sub_1009359  +
mov esi eax +
test esi esi +
jz loc_1004C87  +
push ebx  +
push [ebp+arg_4]  +
call StrToID  +
movzx eax ax +
push eax  +
mov ecx edi +
call ds:?FindDescendent@Element@DirectUI@@QAEPAV12@G@Z  +
mov ebx eax +
test ebx ebx +
jz loc_1004C86  +
mov ecx esi +
call sub_1008F1F  +
mov eax [eax] +
push offset aSystemsetting  +
push eax  +
call ds:wcsstr  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1004C3D  +
mov ecx esi +
call sub_100910B  +
test eax eax +
jz loc_1004C86  +
push 1  +
jmp loc_1004C7E  +
mov ecx [ebp+arg_0] +
call sub_1008EFC  +
mov ecx eax +
call sub_1008AEE  +
mov ecx esi +
mov edi eax +
call sub_1008EFC  +
push eax  +
lea ecx [ebp+arg_4] +
call sub_10048A3  +
mov esi [ebp+arg_4] +
push 0  +
push esi  +
mov ecx edi +
call sub_10047EB  +
test eax eax +
setnz al  +
lea ecx [esi-10h] +
mov byte ptr [ebp+arg_4] al +
call sub_100425C  +
push [ebp+arg_4]  +
mov ecx ebx +
call ds:?SetSelected@Element@DirectUI@@QAEJ_N@Z  +
pop ebx  +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 74h +
push esi  +
push edi  +
push 0  +
lea ecx [ebp+var_74] +
call sub_1006872  +
lea ecx [ebp+var_74] +
call sub_1008EFC  +
mov ecx eax +
call sub_1008AEE  +
mov edi eax +
mov eax [edi] +
mov [ebp+var_4] eax +
test eax eax +
jz loc_1004D08  +
lea eax [ebp+var_4] +
push eax  +
mov ecx edi +
call sub_1006FC3  +
push eax  +
lea ecx [ebp+var_8] +
call sub_10048A3  +
mov esi [ebp+var_8] +
push esi  +
call sub_1009359  +
test eax eax +
jz loc_1004CFA  +
mov ecx eax +
call sub_1008F1F  +
mov eax [eax] +
push [ebp+arg_0]  +
push eax  +
call ds:wcsstr  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_1004D0C  +
lea ecx [esi-10h] +
call sub_100425C  +
cmp [ebp+var_4] 0 +
jnz loc_1004CC0  +
xor esi esi +
jmp loc_1004D17  +
lea ecx [esi-10h] +
call sub_100425C  +
xor esi esi +
inc esi  +
lea ecx [ebp+var_74] +
call sub_1006898  +
pop edi  +
mov eax esi +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebx  +
push esi  +
mov ebx offset aOsk +
push ebx  +
mov esi ecx +
call sub_1004C92  +
test eax eax +
jnz loc_1004E51  +
push edi  +
push offset aNarrator  +
call StrToID  +
mov edi ds:?FindDescendent@Element@DirectUI@@QAEPAV12@G@Z +
movzx eax ax +
push eax  +
mov ecx esi +
call edi  +
push offset aMagnifierpane  +
mov [esi+0C4h] eax +
call StrToID  +
movzx eax ax +
push eax  +
mov ecx esi +
call edi  +
push offset aHighcontrast  +
mov [esi+0C8h] eax +
call StrToID  +
movzx eax ax +
push eax  +
mov ecx esi +
call edi  +
push ebx  +
mov [esi+0CCh] eax +
call StrToID  +
movzx eax ax +
push eax  +
mov ecx esi +
call edi  +
push offset aStickykeys  +
mov [esi+0D0h] eax +
call StrToID  +
movzx eax ax +
push eax  +
mov ecx esi +
call edi  +
push offset aFilterkeys  +
mov [esi+0D4h] eax +
call StrToID  +
movzx eax ax +
push eax  +
mov ecx esi +
call edi  +
push offset aOk  +
mov [esi+0D8h] eax +
call StrToID  +
movzx eax ax +
push eax  +
mov ecx esi +
call edi  +
push offset aCancel  +
mov [esi+0DCh] eax +
call StrToID  +
movzx eax ax +
push eax  +
mov ecx esi +
call edi  +
push offset aApply  +
mov [esi+0E0h] eax +
call StrToID  +
movzx eax ax +
push eax  +
mov ecx esi +
call edi  +
mov [esi+0E4h] eax +
xor eax eax +
push eax  +
push 3A98h  +
mov [esi+0E8h] eax +
mov [esi+0ECh] eax +
mov eax [esi] +
push 100h  +
mov ecx esi +
call dword ptr [eax+0A0h]  +
push eax  +
call ds:SetTimer  +
mov [esi+0A0h] eax +
pop edi  +
pop esi  +
xor eax eax +
pop ebx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push [ebp+arg_4]  +
mov ebx ecx +
push [ebp+hModule]  +
call sub_100455E  +
mov esi eax +
test esi esi +
jz loc_1004E9F  +
push edi  +
movzx edi word ptr [esi] +
push edi  +
mov ecx ebx +
call sub_1004B12  +
movzx ecx word ptr [esi] +
push ecx  +
add esi 2 +
push esi  +
push edi  +
push eax  +
call sub_1004613  +
add esp 10h +
push edi  +
mov ecx ebx +
call loc_100477B  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_10046EE  +
test eax eax +
jz loc_1004EC9  +
push [ebp+arg_0]  +
mov ecx esi +
push eax  +
call sub_1004E5B  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 70h +
push ebx  +
push esi  +
mov esi ecx +
mov ecx [esi+94h] +
push edi  +
call ds:?GetHWND@NativeHWNDHost@DirectUI@@QAEPAUHWND__@@XZ  +
push offset dword_100D340  +
lea ecx [ebp+lpString] +
mov edi eax +
call sub_100469E  +
push 12Ch  +
lea ecx [ebp+lpString] +
call sub_1004EAA  +
push [ebp+lpString]  +
push edi  +
call ds:SetWindowTextW  +
mov ecx esi +
call sub_1004D2C  +
push 0  +
lea ecx [ebp+var_70] +
call sub_1006872  +
push offset aNarrator_0  +
lea eax [ebp+var_70] +
push eax  +
mov ecx esi +
call sub_1004BDD  +
push offset aMagnifierpane  +
lea eax [ebp+var_70] +
push eax  +
mov ecx esi +
call sub_1004BDD  +
push offset aHighcontrast  +
lea eax [ebp+var_70] +
push eax  +
mov ecx esi +
call sub_1004BDD  +
push offset aOsk  +
lea eax [ebp+var_70] +
push eax  +
mov ecx esi +
call sub_1004BDD  +
push offset aStickykeys  +
lea eax [ebp+var_70] +
push eax  +
mov ecx esi +
call sub_1004BDD  +
push offset aFilterkeys  +
lea eax [ebp+var_70] +
push eax  +
mov ecx esi +
call sub_1004BDD  +
lea eax [ebp+var_70] +
push eax  +
mov ecx esi +
call sub_100498D  +
cmp dword_100D304 0 +
mov ebx eax +
jz loc_1004FF4  +
mov al byte_100D308 +
cmp al 4 +
jnb loc_1004FA6  +
test al al +
jnz loc_1004FF4  +
mov eax dword_100D2F0 +
mov ecx dword_100D2F4 +
mov edx 10000h +
mov esi 80000000h +
and eax edx +
and ecx esi +
or eax ecx +
jz loc_1004FF4  +
mov eax dword_100D2F8 +
mov edi dword_100D2FC +
mov ecx eax +
and ecx edx +
mov edx edi +
and edx esi +
cmp ecx eax +
jnz loc_1004FF4  +
cmp edx edi +
jnz loc_1004FF4  +
push offset dword_1001490  +
push dword_100D2DC  +
push dword_100D2D8  +
call sub_1003859  +
test ebx ebx +
jz loc_1005016  +
mov esi ebx +
lea ecx [ebp+var_70] +
call sub_1006898  +
mov ecx [ebp+lpString] +
add ecx 0FFFFFFF0h +
call sub_100425C  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 4  +
xor esi esi +
jmp loc_1004FFA  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
push edi  +
push offset aScreenreader  +
mov edi ecx +
call sub_1004C92  +
test eax eax +
jnz loc_1005175  +
push ebx  +
push esi  +
push 7F02h  +
push eax  +
call ds:LoadCursorW  +
mov ebx ds:SetCursor +
push eax  +
call ebx  +
push offset aNarrator  +
mov [ebp+hCursor] eax +
call StrToID  +
mov esi ds:?FindDescendent@Element@DirectUI@@QAEPAV12@G@Z +
movzx eax ax +
push eax  +
mov ecx edi +
call esi  +
push offset aMagnifierpane  +
mov [ebp+var_2C] eax +
call StrToID  +
movzx eax ax +
push eax  +
mov ecx edi +
call esi  +
push offset aOsk  +
mov [ebp+var_28] eax +
call StrToID  +
movzx eax ax +
push eax  +
mov ecx edi +
call esi  +
push offset aStickykeys  +
mov [ebp+var_24] eax +
call StrToID  +
movzx eax ax +
push eax  +
mov ecx edi +
call esi  +
push offset aHighcontrast  +
mov [ebp+var_20] eax +
call StrToID  +
movzx eax ax +
push eax  +
mov ecx edi +
call esi  +
push offset aFilterkeys  +
mov [ebp+var_1C] eax +
call StrToID  +
movzx eax ax +
push eax  +
mov ecx edi +
call esi  +
push offset aOk  +
mov [ebp+var_18] eax +
call StrToID  +
movzx eax ax +
push eax  +
mov ecx edi +
call esi  +
push offset aCancel  +
mov [ebp+var_14] eax +
call StrToID  +
movzx eax ax +
push eax  +
mov ecx edi +
call esi  +
push offset aApply  +
mov [ebp+var_10] eax +
call StrToID  +
movzx eax ax +
push eax  +
mov ecx edi +
call esi  +
mov [ebp+var_C] eax +
xor esi esi +
mov eax [ebp+esi*4+var_2C] +
test eax eax +
jz loc_100512F  +
push eax  +
lea ecx [edi+0A4h] +
call sub_1009D72  +
inc esi  +
cmp esi 9 +
jb loc_100511B  +
push offset dword_100D340  +
lea ecx [ebp+var_4] +
call sub_100469E  +
push 12Eh  +
lea ecx [ebp+var_4] +
call sub_1004EAA  +
lea ecx [ebp+var_4] +
call sub_1004AF1  +
push eax  +
lea ecx [edi+0A4h] +
call sub_1009DBA  +
push [ebp+hCursor]  +
call ebx  +
mov ecx [ebp+var_4] +
add ecx 0FFFFFFF0h +
call sub_100425C  +
pop esi  +
pop ebx  +
xor eax eax +
pop edi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push esi  +
push edi  +
push [ebp+arg_4]  +
mov esi ecx +
call StrToID  +
movzx eax ax +
push eax  +
mov ecx esi +
call ds:?FindDescendent@Element@DirectUI@@QAEPAV12@G@Z  +
mov edi eax +
test edi edi +
jz loc_10052DC  +
push ebx  +
push [ebp+arg_4]  +
call sub_1009359  +
mov ebx eax +
mov [ebp+var_8] ebx +
test ebx ebx +
jz loc_10052DB  +
mov ecx edi +
call ds:?GetSelected@Element@DirectUI@@QAE_NXZ  +
test al al +
jz loc_10052CB  +
mov ecx ebx +
call sub_1008F1F  +
mov eax [eax] +
mov edi ds:wcsstr +
push offset aSystemsetting  +
push eax  +
call edi  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1005264  +
call sub_1004B45  +
test eax eax +
jnz loc_1005264  +
mov ebx offset dword_100D340 +
push ebx  +
lea ecx [ebp+arg_4] +
call sub_100469E  +
push ebx  +
lea ecx [ebp+var_4] +
call sub_100469E  +
push 12Ch  +
lea ecx [ebp+arg_4] +
call sub_1004EAA  +
push 12Dh  +
lea ecx [ebp+var_4] +
call sub_1004EAA  +
mov ebx [ebp+var_4] +
mov eax [esi] +
push 0  +
push 0FFFEh  +
push 1  +
push 0  +
push ebx  +
push [ebp+arg_4]  +
mov ecx esi +
push dword ptr [esi+98h]  +
call dword ptr [eax+0A0h]  +
push eax  +
call ds:COMCTL32_344  +
lea ecx [ebx-10h] +
call sub_100425C  +
mov ecx [ebp+arg_4] +
add ecx 0FFFFFFF0h +
call sub_100425C  +
mov ebx [ebp+var_8] +
mov ecx ebx +
call sub_1008F1F  +
mov eax [eax] +
push offset aScreenreader  +
push eax  +
call edi  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1005286  +
lea ecx [esi+0A4h] +
call sub_1009F0A  +
mov ecx ebx +
call sub_1008F1F  +
mov eax [eax] +
push offset aOsk  +
push eax  +
call edi  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_10052B9  +
mov eax [esi] +
lea edi [esi+0A0h] +
push dword ptr [edi]  +
mov ecx esi +
call dword ptr [eax+0A0h]  +
push eax  +
call ds:KillTimer  +
and dword ptr [edi] 0 +
mov ecx [ebp+arg_0] +
push ebx  +
call sub_1008EFC  +
mov ecx eax +
call sub_1008B01  +
jmp loc_10052DB  +
mov ecx [ebp+arg_0] +
push ebx  +
call sub_1008EFC  +
mov ecx eax +
call sub_1008A43  +
pop ebx  +
pop edi  +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
push esi  +
push edi  +
xor edi edi +
mov esi ecx +
cmp eax 113h +
jnz loc_100538F  +
mov ecx [esi+0A0h] +
cmp ecx [ebp+arg_8] +
jnz loc_10053F9  +
cmp dword ptr [esi+0E8h] 9 +
jnb loc_1005320  +
cmp [esi+0ECh] edi +
jnz loc_1005374  +
lea eax [esi+0ECh] +
inc dword ptr [eax]  +
mov eax [eax] +
mov [esi+0E8h] edi +
mov eax ds:dword_10017B8[eax*4] +
cmp eax edi +
jnz loc_100535A  +
mov eax [esi] +
push ecx  +
mov ecx esi +
call dword ptr [eax+0A0h]  +
push eax  +
call ds:KillTimer  +
mov [esi+0A0h] edi +
xor eax eax +
jmp loc_10053FB  +
push edi  +
push eax  +
mov eax [esi] +
push ecx  +
mov ecx esi +
call dword ptr [eax+0A0h]  +
push eax  +
call ds:SetTimer  +
mov [esi+0A0h] eax +
mov eax [esi+0E8h] +
mov ecx [esi+eax*4+0C4h] +
inc eax  +
mov [esi+0E8h] eax +
mov eax [ecx] +
call dword ptr [eax+54h]  +
jmp loc_10053F9  +
cmp eax 401h +
jnz loc_10053C0  +
push offset aCancel  +
call StrToID  +
movzx eax ax +
push eax  +
mov ecx esi +
call ds:?FindDescendent@Element@DirectUI@@QAEPAV12@G@Z  +
cmp eax edi +
jz loc_10053B7  +
mov edx [eax] +
mov ecx eax +
call dword ptr [edx+54h]  +
mov ecx esi +
call sub_100501F  +
jmp loc_10053F9  +
cmp eax 2 +
jnz loc_10053E7  +
push dword ptr [esi+0A0h]  +
mov eax [esi] +
call dword ptr [eax+0A0h]  +
push eax  +
call ds:KillTimer  +
lea ecx [esi+0A4h] +
call sub_1009F0A  +
jmp loc_10053F9  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push eax  +
push [ebp+arg_0]  +
call ds:__imp_?WndProc@HWNDElement@DirectUI@@UAEJPAUHWND__@@IIJ@Z  +
mov edi eax +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
push offset aNarrator_0  +
push edi  +
mov esi ecx +
call sub_100517F  +
push offset aMagnifierpane  +
push edi  +
mov ecx esi +
call sub_100517F  +
push offset aHighcontrast  +
push edi  +
mov ecx esi +
call sub_100517F  +
push offset aOsk  +
push edi  +
mov ecx esi +
call sub_100517F  +
push offset aStickykeys  +
push edi  +
mov ecx esi +
call sub_100517F  +
push offset aFilterkeys  +
push edi  +
mov ecx esi +
call sub_100517F  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 78h +
push ebx  +
push esi  +
mov esi [ebp+8] +
cmp dword ptr [esi+0Ch] 2 +
push edi  +
mov edi ecx +
jnz loc_100560E  +
mov ecx [esi] +
call ds:?GetID@Element@DirectUI@@QAEGXZ  +
movzx eax ax +
mov [ebp-4] eax +
mov eax ds:?Click@Button@DirectUI@@SG?AVUID@@XZ +
mov [ebp-0Ch] eax +
lea eax [ebp-0Ch] +
push eax  +
lea eax [esi+4] +
push eax  +
call sub_10042B8  +
test al al +
jz loc_100560E  +
mov ebx offset aOk +
push ebx  +
call StrToID  +
mov esi ds:?FindDescendent@Element@DirectUI@@QAEPAV12@G@Z +
movzx eax ax +
push eax  +
mov ecx edi +
call esi  +
push offset aApply  +
mov [ebp-0Ch] eax +
call StrToID  +
movzx eax ax +
push eax  +
mov ecx edi +
call esi  +
mov ecx [ebp-0Ch] +
mov [ebp-8] eax +
test ecx ecx +
jz loc_10054FD  +
test eax eax +
jz loc_10054FD  +
push 1  +
call ds:?SetEnabled@Element@DirectUI@@QAEJ_N@Z  +
mov ecx [ebp-8] +
push 1  +
call ds:?SetEnabled@Element@DirectUI@@QAEJ_N@Z  +
push 0  +
lea ecx [ebp-78h] +
call sub_1006872  +
push ebx  +
call StrToID  +
cmp [ebp-4] ax +
jnz loc_1005532  +
lea eax [ebp-78h] +
push eax  +
mov ecx edi +
call sub_1005406  +
mov ecx edi +
call sub_1004145  +
lea ecx [ebp-78h] +
call sub_1006898  +
jmp loc_1005616  +
mov ebx offset aCancel +
push ebx  +
call StrToID  +
cmp [ebp-4] ax +
jz loc_100551E  +
push offset aApply  +
call StrToID  +
cmp [ebp-4] ax +
jnz loc_100559B  +
lea eax [ebp-78h] +
push eax  +
mov ecx edi +
call sub_1005406  +
mov ecx [ebp-8] +
mov eax [ecx] +
call dword ptr [eax+7Ch]  +
test al al +
jz loc_1005583  +
push ebx  +
call StrToID  +
movzx eax ax +
push eax  +
mov ecx edi +
call esi  +
test eax eax +
jz loc_1005583  +
mov edx [eax] +
mov ecx eax +
call dword ptr [edx+54h]  +
mov ecx [ebp-0Ch] +
push 0  +
call ds:?SetEnabled@Element@DirectUI@@QAEJ_N@Z  +
mov ecx [ebp-8] +
push 0  +
call ds:?SetEnabled@Element@DirectUI@@QAEJ_N@Z  +
jmp loc_1005603  +
mov ebx offset aExpandobutton +
push ebx  +
call StrToID  +
cmp [ebp-4] ax +
jnz loc_1005603  +
push offset aStatusarea  +
call StrToID  +
movzx eax ax +
push eax  +
mov ecx edi +
call esi  +
push ebx  +
mov [ebp-0Ch] eax +
call StrToID  +
movzx eax ax +
push eax  +
mov ecx edi +
call esi  +
mov ecx [ebp-0Ch] +
xor esi esi +
mov ebx eax +
cmp ecx esi +
jz loc_1005603  +
cmp ebx esi +
jz loc_1005603  +
cmp [edi+0F0h] esi +
jz loc_10055EA  +
push 0FFFFFFFDh  +
jmp loc_10055EE  +
xor esi esi +
inc esi  +
push esi  +
call ds:?SetLayoutPos@Element@DirectUI@@QAEJH@Z  +
push esi  +
mov ecx ebx +
mov [edi+0F0h] esi +
call ds:?SetSelected@Element@DirectUI@@QAEJ_N@Z  +
lea ecx [ebp-78h] +
call sub_1006898  +
mov esi [ebp+8] +
push esi  +
mov ecx edi +
call sub_1004134  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 6Ch +
push ebx  +
mov ebx [ebp+8] +
mov eax [ebx+8] +
push edi  +
mov edi ecx +
test eax eax +
jz loc_1005641  +
cmp eax 2 +
jnz loc_10057A5  +
mov eax [ebx+0Ch] +
dec eax  +
jnz loc_10057A5  +
cmp dword ptr [ebx+10h] 1 +
jnz loc_10057A5  +
push esi  +
push eax  +
lea ecx [ebp-6Ch] +
call sub_1006872  +
movzx eax word ptr [ebx+18h] +
cmp eax 28h +
jg loc_1005723  +
cmp eax 25h +
jge loc_1005705  +
cmp eax 9 +
jz loc_1005705  +
cmp eax 0Dh +
jz loc_1005698  +
cmp eax 1Bh +
jnz loc_100579C  +
mov ecx edi +
call sub_1004145  +
jmp loc_100579C  +
call ds:?GetKeyFocusedElement@HWNDElement@DirectUI@@SGPAVElement@2@XZ  +
mov esi eax +
call ds:?GetClassInfoPtr@CCPushButton@DirectUI@@SGPAUIClassInfo@2@XZ  +
mov [ebp+8] eax +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+80h]  +
cmp eax [ebp+8] +
jnz loc_10056C4  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+88h]  +
jmp loc_10056FC  +
push offset aOk  +
call StrToID  +
movzx eax ax +
push eax  +
mov ecx edi +
call ds:?FindDescendent@Element@DirectUI@@QAEPAV12@G@Z  +
test eax eax +
jz loc_10056F5  +
mov ecx eax +
call ds:?GetEnabled@Element@DirectUI@@QAE_NXZ  +
test al al +
jz loc_10056F5  +
lea eax [ebp-6Ch] +
push eax  +
mov ecx edi +
call sub_1005406  +
mov ecx edi +
call sub_1004145  +
mov byte ptr [ebx+4] 1 +
jmp loc_100579C  +
mov eax [edi] +
lea esi [edi+0A0h] +
push dword ptr [esi]  +
mov ecx edi +
call dword ptr [eax+0A0h]  +
push eax  +
call ds:KillTimer  +
and dword ptr [esi] 0 +
jmp loc_100579C  +
sub eax 71h +
jz loc_1005771  +
dec eax  +
jz loc_1005760  +
dec eax  +
jnz loc_100579C  +
push offset aOsk  +
call sub_1009359  +
mov [ebp+8] eax +
test eax eax +
jz loc_100579C  +
mov eax [edi] +
lea esi [edi+0A0h] +
push dword ptr [esi]  +
mov ecx edi +
call dword ptr [eax+0A0h]  +
push eax  +
call ds:KillTimer  +
and dword ptr [esi] 0 +
push dword ptr [ebp+8]  +
jmp loc_100578D  +
push offset aMagnifierpane  +
call sub_1009359  +
test eax eax +
jz loc_100579C  +
push eax  +
jmp loc_100578D  +
push offset aNarrator_0  +
call sub_1009359  +
mov esi eax +
test esi esi +
jz loc_100579C  +
lea ecx [edi+0A4h] +
call sub_1009F0A  +
push esi  +
lea ecx [ebp-6Ch] +
call sub_1008EFC  +
mov ecx eax +
call sub_1008B01  +
lea ecx [ebp-6Ch] +
call sub_1006898  +
pop esi  +
cmp byte ptr [ebx+4] 0 +
jnz loc_10057B4  +
push ebx  +
mov ecx edi +
call ds:?OnInput@HWNDElement@DirectUI@@UAEXPAUInputEvent@2@@Z  +
pop edi  +
pop ebx  +
leave   +
retn 4  +
***
cmp byte ptr [ecx+8] 0 +
mov dword ptr [ecx] offset off_1001A5C +
jz locret_1005809  +
mov ecx [ecx+4] +
test ecx ecx +
jz locret_1005809  +
push ecx  +
call ds:HeapDestroy  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+8]  +
push 0  +
push dword ptr [ecx+4]  +
call ds:HeapAlloc  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ebp+8] 0 +
jz loc_1005844  +
push dword ptr [ebp+8]  +
push 0  +
push dword ptr [ecx+4]  +
call ds:HeapFree  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
cmp [ebp+8] eax +
jnz loc_1005862  +
push dword ptr [ebp+0Ch]  +
mov eax [ecx] +
call dword ptr [eax]  +
jmp loc_1005883  +
cmp [ebp+0Ch] eax +
jnz loc_1005873  +
push dword ptr [ebp+8]  +
mov eax [ecx] +
call dword ptr [eax+4]  +
xor eax eax +
jmp loc_1005883  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push eax  +
push dword ptr [ecx+4]  +
call ds:HeapReAlloc  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+8]  +
push 0  +
push dword ptr [ecx+4]  +
call ds:HeapSize  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_10057EF  +
test byte ptr [ebp+8] 1 +
jz loc_10058C2  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
push ebp  +
mov ebp esp +
mov eax ecx +
mov ecx [ebp+8] +
mov [eax+4] ecx +
mov dword ptr [eax] offset off_1001A70 +
xor ecx ecx +
mov dword ptr [eax+14h] 2 +
mov [eax+0Ch] ecx +
mov [eax+10h] ecx +
mov [eax+18h] cx +
mov [eax+1Ah] cx +
mov [eax+8] eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ecx+4] +
mov eax [ecx] +
pop ebp  +
jmp dword ptr [eax+4]  +
***
ror byte ptr [ebp-0FBDEBBFh] cl +
xadd [eax] edx +
lea eax [ecx+8] +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
test [ebp+arg_0] 1 +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_1001A70 +
jz loc_1005945  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
mov eax [ebp+arg_4] +
push esi  +
lea ecx [edx+eax] +
lea esi [ecx-1] +
cmp esi edx +
pop esi  +
jge loc_100596D  +
mov eax [ebp+arg_8] +
jmp loc_1005973  +
dec eax  +
not eax  +
dec ecx  +
and eax ecx +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
mov ecx [ebp+arg_8] +
or edx 0FFFFFFFFh +
sub edx eax +
cmp edx ecx +
jnb loc_1005997  +
mov eax 80070057h +
jmp loc_10059A0  +
add eax ecx +
mov ecx [ebp+arg_0] +
mov [ecx] eax +
xor eax eax +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
push esi  +
push edi  +
push 7FFFFFFFh  +
push 8  +
inc eax  +
push eax  +
mov esi ecx +
call sub_1005951  +
push dword ptr [ebp+0Ch]  +
mov edi eax +
push edi  +
lea eax [ebp+8] +
push eax  +
call sub_100443A  +
test eax eax +
jl loc_1005A09  +
push dword ptr [ebp+8]  +
lea eax [ebp+8] +
push 10h  +
push eax  +
call sub_100597C  +
test eax eax +
jl loc_1005A09  +
mov ecx [esi+4] +
push dword ptr [ebp+8]  +
mov eax [ecx] +
call dword ptr [eax]  +
test eax eax +
jz loc_1005A09  +
dec edi  +
and dword ptr [eax+4] 0 +
mov [eax] esi +
mov dword ptr [eax+0Ch] 1 +
mov [eax+8] edi +
jmp loc_1005A0B  +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+0Ch] +
push esi  +
push edi  +
push 7FFFFFFFh  +
push 8  +
inc eax  +
push eax  +
mov esi ecx +
call sub_1005951  +
push dword ptr [ebp+10h]  +
mov edi eax +
push edi  +
lea eax [ebp+0Ch] +
push eax  +
call sub_100443A  +
test eax eax +
jl loc_1005A6D  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp+0Ch] +
push 10h  +
push eax  +
call sub_100597C  +
test eax eax +
jl loc_1005A6D  +
push dword ptr [ebp+0Ch]  +
mov ecx [esi+4] +
push dword ptr [ebp+8]  +
mov eax [ecx] +
call dword ptr [eax+8]  +
test eax eax +
jz loc_1005A6D  +
dec edi  +
mov [eax+8] edi +
jmp loc_1005A6F  +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi] +
test eax eax +
jz loc_1005A8F  +
push eax  +
call free  +
and dword ptr [esi] 0 +
pop ecx  +
and dword ptr [esi+4] 0 +
and dword ptr [esi+8] 0 +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call memmove_s  +
add esp 10h +
push eax  +
call sub_1004495  +
pop ebp  +
retn   +
***
mov edi edi +
push esi  +
push 18h  +
mov esi ecx +
push 0  +
push esi  +
call memset  +
add esp 0Ch +
mov eax esi +
pop esi  +
retn   +
***
call __SEH_prolog4  +
and [ebp+ms_exc.disabled] 0 +
push ecx  +
call ds:InitializeCriticalSection  +
and [ebp+var_1C] 0 +
jmp loc_1005B1A  +
mov eax [ebp-14h] +
mov eax [eax] +
mov eax [eax] +
xor ecx ecx +
cmp eax 0C0000017h +
setz cl  +
mov eax ecx +
retn   +
mov esp [ebp-18h] +
mov dword ptr [ebp-1Ch] 8007000Eh +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov eax [ebp+var_1C] +
call __SEH_epilog4  +
retn   +
***
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
test eax eax +
jnz loc_1005B42  +
mov eax 80070057h +
jmp loc_1005B53  +
cmp dword ptr [eax] 2Ch +
jnz loc_1005B3B  +
and dword ptr [eax+1Ch] 0 +
lea ecx [eax+4] +
call sub_1005ADF  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
test eax eax +
jl loc_1005B76  +
cmp eax [ecx+4] +
jge loc_1005B76  +
mov ecx [ecx] +
lea eax [ecx+eax*2] +
pop ebp  +
retn 4  +
***
push 0  +
push 0  +
push 1  +
push 0C000008Ch  +
call ds:RaiseException  +
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
test eax eax +
jl loc_1005BA7  +
cmp eax [ecx+4] +
jge loc_1005BA7  +
mov ecx [ecx] +
lea eax [ecx+eax*4] +
pop ebp  +
retn 4  +
***
push 0  +
push 0  +
push 1  +
push 0C000008Ch  +
call ds:RaiseException  +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+8] +
push edi  +
xor edi edi +
cmp esi edi +
jnz loc_1005BF6  +
mov eax 80070057h +
jmp loc_1005C3D  +
mov eax [esi] +
cmp eax edi +
jz loc_1005C3B  +
cmp eax 2Ch +
jnz loc_1005BEF  +
cmp [esi+24h] edi +
jle loc_1005C26  +
push ebx  +
lea ebx [esi+20h] +
push edi  +
mov ecx ebx +
call loc_1005B5C  +
movzx eax word ptr [eax] +
push dword ptr [ebp+0Ch]  +
push eax  +
call ds:UnregisterClassA  +
inc edi  +
cmp edi [esi+24h] +
jl loc_1005C0A  +
pop ebx  +
lea ecx [esi+20h] +
call sub_1005A7A  +
lea eax [esi+4] +
push eax  +
call ds:DeleteCriticalSection  +
and dword ptr [esi] 0 +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push esi  +
mov esi ecx +
lea ecx [esi+18h] +
call sub_1005AC4  +
xor eax eax +
mov [esi+30h] eax +
mov [esi+34h] eax +
mov [esi+38h] eax +
mov eax esi +
pop esi  +
retn   +
***
lea ecx [esi+30h] +
pop esi  +
jmp sub_1005A7A  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov esi ecx +
lea edi [esi+18h] +
push edi  +
call ds:EnterCriticalSection  +
mov eax [esi+34h] +
mov ecx [ebp+arg_0] +
cmp ecx eax +
jg loc_1005CC6  +
test ecx ecx +
jl loc_1005CC6  +
cmp ecx eax +
jnz loc_1005CB9  +
mov esi [esi+8] +
push edi  +
call ds:LeaveCriticalSection  +
mov eax esi +
jmp loc_1005CCF  +
push ecx  +
lea ecx [esi+30h] +
call loc_1005B8D  +
mov esi [eax] +
jmp loc_1005CAE  +
push edi  +
call ds:LeaveCriticalSection  +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov byte_100D2D4 1 +
and dword ptr [esi] 0 +
mov eax esi +
pop esi  +
retn   +
***
push ebp  +
mov ebp esp +
sub esp 98h +
mov eax dword_100D004 +
xor eax ebp +
mov [ebp-4] eax +
push esi  +
mov esi ecx +
call sub_1005C48  +
mov eax 1000000h +
push 94h  +
mov [esi+8] eax +
mov [esi+4] eax +
lea eax [ebp-98h] +
push 0  +
push eax  +
mov dword ptr [esi] 3Ch +
mov byte ptr [esi+0Ch] 0 +
call memset  +
add esp 0Ch +
lea eax [ebp-98h] +
push eax  +
mov dword ptr [ebp-98h] 94h +
call ds:GetVersionExA  +
cmp dword ptr [ebp-88h] 2 +
jnz loc_1005D7A  +
cmp dword ptr [ebp-94h] 5 +
jb loc_1005D9B  +
jmp loc_1005D97  +
cmp dword ptr [ebp-88h] 1 +
jnz loc_1005D9B  +
cmp dword ptr [ebp-94h] 4 +
ja loc_1005D97  +
jnz loc_1005D9B  +
cmp dword ptr [ebp-90h] 0 +
jbe loc_1005D9B  +
mov byte ptr [esi+0Ch] 1 +
lea ecx [esi+18h] +
mov dword ptr [esi+10h] 800h +
mov dword ptr [esi+14h] offset dword_1001A98 +
call sub_1005ADF  +
test eax eax +
jge loc_1005DBC  +
mov byte_100D2D4 1 +
mov ecx [ebp-4] +
mov eax esi +
xor ecx ebp +
pop esi  +
call sub_100611F  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
xor eax eax +
jmp loc_1005E0B  +
test eax eax +
jnz loc_1005E10  +
mov ecx [esi] +
test ecx ecx +
jz loc_1005E08  +
call ecx  +
add esi 4 +
cmp esi [ebp+arg_4] +
jb loc_1005DFC  +
pop esi  +
pop ebp  +
retn   +
***
mov eax dword_100D420 +
push offset dword_100D410  +
push dword_100D41C  +
mov dword_100D410 eax +
push offset unk_100D400  +
push offset unk_100D404  +
push offset unk_100D3FC  +
call ds:__wgetmainargs  +
add esp 14h +
mov dword_100D40C eax +
retn   +
***
call __SEH_prolog4  +
xor ebx ebx +
mov [ebp+var_1C] ebx +
mov [ebp+ms_exc.disabled] ebx +
lea eax [ebp+StartupInfo] +
push eax  +
call ds:GetStartupInfoW  +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov [ebp+ms_exc.disabled] 1 +
mov eax large fs:18h +
mov esi [eax+4] +
mov [ebp+var_20] ebx +
mov edi offset Destination +
push ebx  +
push esi  +
push edi  +
call ds:InterlockedCompareExchange  +
cmp eax ebx +
jz loc_1005EB3  +
cmp eax esi +
jnz loc_1005EA6  +
xor esi esi +
inc esi  +
mov [ebp+var_20] esi +
jmp loc_1005EB6  +
push 3E8h  +
call ds:Sleep  +
jmp loc_1005E8D  +
xor esi esi +
inc esi  +
mov eax dword_100D74C +
cmp eax esi +
jnz loc_1005EC9  +
push 1Fh  +
call _amsg_exit  +
pop ecx  +
jmp loc_1005EF8  +
mov eax dword_100D74C +
test eax eax +
jnz loc_1005EF2  +
mov dword_100D74C esi +
push offset dword_10013D8  +
push offset dword_10013CC  +
call sub_1005DEF  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1005EF8  +
jmp loc_100601C  +
mov dword_100D418 esi +
mov eax dword_100D74C +
cmp eax esi +
jnz loc_1005F1C  +
push offset dword_10013C8  +
push offset dword_10013B0  +
call _initterm  +
pop ecx  +
pop ecx  +
mov dword_100D74C 2 +
cmp [ebp+var_20] ebx +
jnz loc_1005F29  +
push ebx  +
push edi  +
call ds:InterlockedExchange  +
cmp dword_100D75C ebx +
jz loc_1005F4A  +
push offset dword_100D75C  +
call sub_1006479  +
pop ecx  +
test eax eax +
jz loc_1005F4A  +
push ebx  +
push 2  +
push ebx  +
call dword_100D75C  +
mov eax ds:_wcmdln +
cmp [eax] ebx +
jz loc_100601C  +
mov eax [eax] +
mov [ebp+var_24] eax +
movzx ecx word ptr [eax] +
cmp cx 20h +
ja $LN58  +
cmp cx bx +
jz loc_1005F6F  +
cmp [ebp+var_1C] ebx +
jnz $LN58  +
movzx ecx word ptr [eax] +
cmp cx bx +
jz loc_1005F84  +
cmp cx 20h +
ja loc_1005F84  +
inc eax  +
inc eax  +
mov [ebp+var_24] eax +
jmp loc_1005F6F  +
test byte ptr [ebp+StartupInfo.dwFlags] 1 +
jz loc_1005F90  +
movzx ecx [ebp+StartupInfo.wShowWindow] +
jmp loc_1005F93  +
push 0Ah  +
pop ecx  +
push ecx  +
push eax  +
push ebx  +
push 1000000h  +
call _wWinMain@16  +
mov dword_100D414 eax +
cmp dword_100D408 ebx +
jnz $LN59  +
push eax  +
call ds:exit  +
cmp cx 22h +
jnz loc_1005FC5  +
xor ecx ecx +
cmp [ebp+var_1C] ebx +
setz cl  +
mov [ebp+var_1C] ecx +
inc eax  +
inc eax  +
jmp loc_1005F59  +
mov eax [ebp-14h] +
mov ecx [eax] +
mov ecx [ecx] +
mov [ebp-28h] ecx +
push eax  +
push ecx  +
call _XcptFilter  +
pop ecx  +
pop ecx  +
retn   +
mov esp [ebp-18h] +
mov eax [ebp-28h] +
mov dword_100D414 eax +
xor ebx ebx +
cmp dword_100D408 ebx +
jnz $LN59  +
push eax  +
call ds:_exit  +
cmp dword_100D418 ebx +
jnz loc_1006007  +
call ds:_cexit  +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov eax dword_100D414 +
jmp loc_1006028  +
xor eax eax +
inc eax  +
retn   +
mov esp [ebp-18h] +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov eax 0FFh +
call __SEH_epilog4  +
retn   +
***
mov eax 5A4Dh +
cmp ds:1000000h ax +
jz loc_1006045  +
xor eax eax +
jmp loc_1006092  +
mov eax ds:100003Ch +
lea eax [eax+1000000h] +
cmp dword ptr [eax] 4550h +
jnz loc_1006041  +
movzx ecx word ptr [eax+18h] +
cmp ecx 10Bh +
jz loc_100607F  +
cmp ecx 20Bh +
jnz loc_1006041  +
cmp dword ptr [eax+84h] 0Eh +
jbe loc_1006041  +
xor ecx ecx +
cmp [eax+0F8h] ecx +
jmp loc_100608D  +
cmp dword ptr [eax+74h] 0Eh +
jbe loc_1006041  +
xor ecx ecx +
cmp [eax+0E8h] ecx +
setnz cl  +
mov eax ecx +
push 2  +
mov dword_100D408 eax +
call sub_1006587  +
push eax  +
call ds:__set_app_type  +
or dword_100D754 0FFFFFFFFh +
or dword_100D758 0FFFFFFFFh +
pop ecx  +
pop ecx  +
call ds:__p__fmode  +
mov ecx dword_100D428 +
mov [eax] ecx +
call ds:__p__commode  +
mov ecx dword_100D424 +
mov [eax] ecx +
call sub_1006519  +
cmp dword_100D018 0 +
jnz loc_10060EB  +
push offset sub_1006519  +
call ds:__setusermatherr  +
pop ecx  +
call sub_1006501  +
xor eax eax +
retn   +
***
call sub_10065C6  +
jmp ___tmainCRTStartup  +
***
cmp ecx dword_100D004 +
jnz loc_100612A  +
retn 0  +
jmp loc_100665C  +
***
sub ecx eax +
sbb eax eax +
not eax  +
and ecx eax +
mov eax esp +
and eax 0FFFFF000h +
cmp ecx eax +
jb cs20  +
mov eax ecx +
pop ecx  +
xchg eax esp +
mov eax [eax] +
mov [esp+0] eax +
retn   +
sub eax 1000h +
test [eax] eax +
jmp cs10  +
***
call __SEH_prolog4  +
pop ecx  +
retn   +
***
push ebp  +
mov ebp esp +
push dword ptr [ebp+8]  +
call sub_100619F  +
neg eax  +
sbb eax eax +
neg eax  +
pop ecx  +
dec eax  +
pop ebp  +
retn   +
***
mov eax [esp+8+arg_4] +
mov ecx [ebp-10h] +
mov large fs:0 ecx +
pop ecx  +
pop edi  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
push ecx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push offset sub_100611F  +
push offset dword_100D004  +
call _except_handler4_common  +
add esp 18h +
pop ebp  +
retn   +
***
push offset loc_10062B2  +
push large dword ptr fs:0  +
mov eax [esp+10h] +
mov [esp+10h] ebp +
lea ebp [esp+10h] +
sub esp eax +
push ebx  +
push esi  +
push edi  +
mov eax dword_100D004 +
xor [ebp-4] eax +
xor eax ebp +
mov [ebp-1Ch] eax +
push eax  +
mov [ebp-18h] esp +
push dword ptr [ebp-8]  +
mov eax [ebp-4] +
mov dword ptr [ebp-4] 0FFFFFFFEh +
mov [ebp-8] eax +
lea eax [ebp-10h] +
mov large fs:0 eax +
retn   +
***
mov ecx [ebp-1Ch] +
xor ecx ebp +
call sub_100611F  +
jmp __SEH_epilog4  +
***
push ecx  +
lea ecx [esp+8] +
sub ecx eax +
and ecx 0Fh +
add eax ecx +
sbb ecx ecx +
or eax ecx +
pop ecx  +
jmp __alloca_probe  +
***
push ecx  +
lea ecx [esp+8] +
sub ecx eax +
and ecx 7 +
add eax ecx +
sbb ecx ecx +
or eax ecx +
pop ecx  +
jmp __alloca_probe  +
***
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov eax [eax] +
cmp dword ptr [eax] 0E06D7363h +
jnz loc_10063BA  +
cmp dword ptr [eax+10h] 3 +
jnz loc_10063BA  +
mov eax [eax+14h] +
cmp eax 19930520h +
jz loc_10063B4  +
cmp eax 19930521h +
jz loc_10063B4  +
cmp eax 19930522h +
jz loc_10063B4  +
cmp eax 1994000h +
jnz loc_10063BA  +
call ds:?terminate@@YAXXZ  +
xor eax eax +
pop ebp  +
retn 4  +
***
push (offset byte_100637C+1)  +
call ds:SetUnhandledExceptionFilter  +
xor eax eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
mov eax 5A4Dh +
cmp [ecx] ax +
jz loc_1006406  +
xor eax eax +
pop ebp  +
retn   +
mov eax [ecx+3Ch] +
add eax ecx +
cmp dword ptr [eax] 4550h +
jnz loc_1006402  +
xor edx edx +
mov ecx 10Bh +
cmp [eax+18h] cx +
setz dl  +
mov eax edx +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [eax+3Ch] +
add ecx eax +
movzx eax word ptr [ecx+14h] +
push ebx  +
push esi  +
movzx esi word ptr [ecx+6] +
xor edx edx +
push edi  +
lea eax [eax+ecx+18h] +
test esi esi +
jbe loc_100646D  +
mov edi [ebp+arg_4] +
mov ecx [eax+0Ch] +
cmp edi ecx +
jb loc_1006465  +
mov ebx [eax+8] +
add ebx ecx +
cmp edi ebx +
jb loc_100646F  +
inc edx  +
add eax 28h +
cmp edx esi +
jb loc_1006455  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
call __SEH_prolog4  +
and [ebp+ms_exc.disabled] 0 +
mov esi 1000000h +
push esi  +
call sub_10063F0  +
pop ecx  +
test eax eax +
jz loc_10064D6  +
mov eax [ebp+arg_0] +
sub eax esi +
push eax  +
push esi  +
call sub_1006430  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_10064D6  +
mov eax [eax+24h] +
shr eax 1Fh +
not eax  +
and eax 1 +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
jmp loc_10064DF  +
mov eax [ebp-14h] +
mov eax [eax] +
mov eax [eax] +
xor ecx ecx +
cmp eax 0C0000005h +
setz cl  +
mov eax ecx +
retn   +
mov esp [ebp-18h] +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
xor eax eax +
call __SEH_epilog4  +
retn   +
***
call ds:_controlfp  +
pop ecx  +
pop ecx  +
retn   +
***
retn   +
***
call __SEH_prolog4  +
xor eax eax +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_100657A  +
cmp ecx 0FFFFFFFFh +
jz loc_100657A  +
and [ebp+ms_exc.disabled] eax +
mov edx 5A4Dh +
cmp [ecx] dx +
jnz loc_1006573  +
mov edx [ecx+3Ch] +
test edx edx +
jl loc_1006573  +
cmp edx 10000000h +
jnb loc_1006573  +
lea eax [edx+ecx] +
mov [ebp+var_1C] eax +
cmp dword ptr [eax] 4550h +
jz loc_1006573  +
jmp loc_100656E  +
xor eax eax +
inc eax  +
retn   +
mov esp [ebp-18h] +
xor eax eax +
mov [ebp+var_1C] eax +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
call __SEH_epilog4  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
call ds:GetModuleHandleA  +
test eax eax +
jz loc_10065BC  +
push eax  +
call sub_1006521  +
test eax eax +
jz loc_10065BC  +
movzx eax word ptr [eax+5Ch] +
cmp ax 2 +
jnz loc_10065B1  +
push 2  +
pop eax  +
pop ebp  +
retn   +
cmp ax 3 +
jnz loc_10065BC  +
xor eax eax +
inc eax  +
pop ebp  +
retn   +
mov eax [ebp+arg_0] +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov eax dword_100D004 +
and [ebp+SystemTimeAsFileTime.dwLowDateTime] 0 +
and [ebp+SystemTimeAsFileTime.dwHighDateTime] 0 +
push ebx  +
push edi  +
mov edi 0BB40E64Eh +
mov ebx 0FFFF0000h +
cmp eax edi +
jz loc_10065F8  +
test eax ebx +
jz loc_10065F8  +
not eax  +
mov dword_100D008 eax +
jmp loc_1006653  +
push esi  +
lea eax [ebp+SystemTimeAsFileTime] +
push eax  +
call ds:GetSystemTimeAsFileTime  +
mov esi [ebp+SystemTimeAsFileTime.dwHighDateTime] +
xor esi [ebp+SystemTimeAsFileTime.dwLowDateTime] +
call ds:GetCurrentProcessId  +
xor esi eax +
call ds:GetCurrentThreadId  +
xor esi eax +
call ds:GetTickCount  +
xor esi eax +
lea eax [ebp+PerformanceCount] +
push eax  +
call ds:QueryPerformanceCounter  +
mov eax dword ptr [ebp+PerformanceCount+4] +
xor eax dword ptr [ebp+PerformanceCount] +
xor esi eax +
cmp esi edi +
jz loc_100663F  +
test dword_100D004 ebx +
jnz loc_1006644  +
mov esi 0BB40E64Fh +
mov dword_100D004 esi +
not esi  +
mov dword_100D008 esi +
pop esi  +
pop edi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 328h +
mov dword_100D530 eax +
mov dword_100D52C ecx +
mov dword_100D528 edx +
mov dword_100D524 ebx +
mov dword_100D520 esi +
mov dword_100D51C edi +
mov word_100D548 ss +
mov word_100D53C cs +
mov word_100D518 ds +
mov word_100D514 es +
mov word_100D510 fs +
mov word_100D50C gs +
pushf   +
pop dword_100D540  +
mov eax [ebp+0] +
mov dword_100D534 eax +
mov eax [ebp+4] +
mov dword_100D538 eax +
lea eax [ebp+8] +
mov dword_100D544 eax +
mov eax [ebp-320h] +
mov dword_100D480 10001h +
mov eax dword_100D538 +
mov dword_100D43C eax +
mov dword_100D430 0C0000409h +
mov dword_100D434 1 +
mov eax dword_100D004 +
mov [ebp-328h] eax +
mov eax dword_100D008 +
mov [ebp-324h] eax +
push 0  +
call ds:SetUnhandledExceptionFilter  +
push offset ExceptionInfo  +
call ds:UnhandledExceptionFilter  +
push 0C0000409h  +
call ds:GetCurrentProcess  +
push eax  +
call ds:TerminateProcess  +
leave   +
retn   +
***
test ecx ecx +
jz locret_1006789  +
push esi  +
mov esi [ecx] +
push ecx  +
call ds:__imp_free  +
pop ecx  +
mov ecx esi +
test esi esi +
jnz loc_1006778  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_10090AC  +
test [ebp+arg_0] 1 +
jz loc_10067A9  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
push edi  +
mov esi ecx +
xor edi edi +
jmp loc_10067D1  +
mov eax [esi] +
cmp eax edi +
jz loc_10067F0  +
mov ecx [eax] +
mov [esi] ecx +
push eax  +
mov ecx esi +
call sub_1006923  +
cmp [esi+8] edi +
ja loc_10067BF  +
mov ecx [esi+0Ch] +
mov [esi] edi +
mov [esi+4] edi +
mov [esi+10h] edi +
cmp ecx edi +
jz loc_10067ED  +
call sub_1006773  +
mov [esi+0Ch] edi +
pop edi  +
pop esi  +
retn   +
***
push 80004005h  +
call loc_1003608  +
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push [ebp+arg_8]  +
and [ebp+var_4] 0 +
push [ebp+arg_4]  +
lea eax [ebp+var_4] +
push eax  +
call sub_100443A  +
test eax eax +
jl loc_1006848  +
push 4  +
push [ebp+var_4]  +
lea eax [ebp+var_4] +
push eax  +
call sub_100597C  +
test eax eax +
jl loc_1006848  +
push [ebp+var_4]  +
call ds:malloc  +
pop ecx  +
test eax eax +
jz loc_1006848  +
mov ecx [ebp+arg_0] +
mov edx [ecx] +
mov [eax] edx +
mov [ecx] eax +
jmp locret_100684A  +
xor eax eax +
leave   +
retn 0Ch  +
***
mov edi edi +
push esi  +
push 1  +
mov esi ecx +
call sub_10070D7  +
push 0Ah  +
lea ecx [esi+54h] +
call sub_1006F52  +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_10070D7  +
push 0Ah  +
lea ecx [esi+54h] +
call sub_1006F52  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push edi  +
mov edi ecx +
cmp dword ptr [edi+5Ch] 0 +
jz loc_10068D3  +
push esi  +
lea esi [edi+54h] +
mov eax [esi] +
mov [ebp+var_4] eax +
test eax eax +
jz loc_10068D2  +
lea eax [ebp+var_4] +
push eax  +
mov ecx esi +
call sub_1006FC3  +
mov ecx [eax] +
test ecx ecx +
jz loc_10068CC  +
push 1  +
call sub_100678F  +
cmp [ebp+var_4] 0 +
jnz loc_10068B4  +
pop esi  +
lea ecx [edi+54h] +
call loc_10067B5  +
mov ecx edi +
call sub_1007114  +
pop edi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_10072A4  +
mov eax [esi+10h] +
mov ecx [eax] +
test eax eax +
jz loc_1006908  +
mov edx [ebp+arg_0] +
mov edx [edx] +
mov [eax+8] edx +
mov [esi+10h] ecx +
mov ecx [ebp+arg_4] +
mov [eax+4] ecx +
mov ecx [ebp+arg_8] +
mov [eax] ecx +
inc dword ptr [esi+8]  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ecx+10h] +
mov eax [ebp+arg_0] +
mov [eax] edx +
dec dword ptr [ecx+8]  +
mov [ecx+10h] eax +
jnz loc_100693D  +
call loc_10067B5  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push 0  +
mov esi ecx +
push dword ptr [esi+4]  +
push [ebp+arg_0]  +
call sub_10068EA  +
mov ecx [esi+4] +
test ecx ecx +
jz loc_1006966  +
mov [ecx] eax +
jmp loc_1006968  +
mov [esi] eax +
mov [esi+4] eax +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0A0h +
mov eax dword_100D004 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
push 20019h  +
xor esi esi +
push offset aSoftwareMicr_3  +
mov [ebp+var_90] ecx +
push 80000002h  +
lea ecx [ebp+hKey] +
mov [ebp+hKey] esi +
mov [ebp+var_98] esi +
mov [ebp+var_94] esi +
call sub_100364E  +
test eax eax +
jnz loc_1006A62  +
push ebx  +
push edi  +
mov edi ds:RegEnumKeyExW +
push esi  +
push esi  +
push esi  +
push esi  +
lea eax [ebp+cbName] +
push eax  +
lea eax [ebp+Name] +
push eax  +
push esi  +
push [ebp+hKey]  +
mov [ebp+cbName] 40h +
mov [ebp+dwIndex] esi +
call edi  +
mov ebx 103h +
jmp loc_1006A5C  +
lea eax [ebp+Name] +
push eax  +
call sub_1009359  +
mov [ebp+var_A0] eax +
cmp eax esi +
jz loc_1006A2C  +
mov ecx [ebp+var_90] +
lea eax [ebp+var_A0] +
push eax  +
add ecx 54h +
call sub_1006946  +
inc [ebp+dwIndex]  +
push esi  +
push esi  +
push esi  +
push esi  +
lea eax [ebp+cbName] +
push eax  +
lea eax [ebp+Name] +
push eax  +
push [ebp+dwIndex]  +
mov [ebp+cbName] 40h +
push [ebp+hKey]  +
call edi  +
cmp eax ebx +
jnz loc_1006A01  +
pop edi  +
pop ebx  +
lea ecx [ebp+hKey] +
call sub_1003630  +
mov ecx [ebp+var_4] +
mov eax [ebp+var_90] +
xor ecx ebp +
add eax 54h +
pop esi  +
call sub_100611F  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
and [ebp+phkResult] 0 +
lea eax [ebp+dwDisposition] +
push eax  +
lea eax [ebp+phkResult] +
push eax  +
push [ebp+dwDisposition]  +
mov esi ecx +
push [ebp+samDesired]  +
push [ebp+dwOptions]  +
push [ebp+lpClass]  +
push 0  +
push [ebp+lpSubKey]  +
push [ebp+hKey]  +
call ds:RegCreateKeyExW  +
mov ecx [ebp+arg_18] +
test ecx ecx +
jz loc_1006AC3  +
mov edx [ebp+dwDisposition] +
mov [ecx] edx +
test eax eax +
jnz loc_1006AD3  +
mov ecx esi +
call sub_1003630  +
mov ecx [ebp+phkResult] +
mov [esi] ecx +
pop esi  +
leave   +
retn 1Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
mov eax [ebp+arg_4] +
add eax ecx +
cmp eax ecx +
jb loc_1006AF7  +
mov ecx [ebp+arg_8] +
mov [ecx] eax +
xor eax eax +
jmp loc_1006B02  +
mov eax [ebp+arg_8] +
or dword ptr [eax] 0FFFFFFFFh +
mov eax 80070216h +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
push eax  +
push eax  +
push 0FFFFFFFFh  +
push [ebp+lpMultiByteStr]  +
push eax  +
push 3  +
call ds:MultiByteToWideChar  +
dec eax  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+cchWideChar]  +
push [ebp+lpWideCharStr]  +
push [ebp+cchMultiByte]  +
push [ebp+lpMultiByteStr]  +
push 0  +
push 3  +
call ds:MultiByteToWideChar  +
pop ebp  +
retn   +
***
mov edi edi +
push esi  +
mov esi eax +
xor eax eax +
mov ecx edx +
test edx edx +
jz loc_1006B67  +
cmp [esi] ax +
jz loc_1006B63  +
inc esi  +
inc esi  +
dec edx  +
jnz loc_1006B59  +
test edx edx +
jnz loc_1006B6C  +
mov eax 80070057h +
pop esi  +
test edi edi +
jz locret_1006B7D  +
test eax eax +
jl loc_1006B7A  +
sub ecx edx +
mov [edi] ecx +
retn   +
and dword ptr [edi] 0 +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
mov edi eax +
xor eax eax +
test edx edx +
jz loc_1006B96  +
cmp edx [ebp+arg_4] +
jbe loc_1006B9B  +
mov eax 80070057h +
test eax eax +
jl loc_1006BA9  +
mov eax [ebp+arg_0] +
call sub_1006B4C  +
jmp loc_1006BAC  +
and dword ptr [edi] 0 +
pop edi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov ebx eax +
mov esi edx +
xor eax eax +
xor edi edi +
test esi esi +
jz loc_1006BEB  +
cmp [ebp+arg_4] eax +
jz loc_1006BE7  +
movzx edx word ptr [ebx] +
test dx dx +
jz loc_1006BE7  +
mov [ecx] dx +
inc ecx  +
inc ecx  +
inc ebx  +
inc ebx  +
dec esi  +
dec [ebp+arg_4]  +
inc edi  +
test esi esi +
jnz loc_1006BCA  +
test esi esi +
jnz loc_1006BF3  +
dec ecx  +
dec ecx  +
dec edi  +
mov eax 8007007Ah +
xor edx edx +
mov [ecx] dx +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_1006C01  +
mov [ecx] edi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
test eax eax +
jz loc_1006C21  +
cmp word ptr [eax] 0 +
mov ecx eax +
jnz loc_1006C26  +
mov ecx offset aNull_1 +
mov eax [ebp+arg_0] +
mov [eax+4] ecx +
mov dword ptr [eax] 2 +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+arg_8]  +
push [ebp+arg_C]  +
push 2Bh  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call TraceMessage  +
add esp 18h +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push 4  +
lea eax [ebp+arg_10] +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_C]  +
push 2Bh  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call TraceMessage  +
add esp 20h +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_10] +
test edx edx +
jz loc_1006CBE  +
cmp word ptr [edx] 0 +
jnz loc_1006CA3  +
push 0Eh  +
jmp loc_1006CC0  +
mov eax edx +
push esi  +
lea esi [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_1006CA9  +
sub eax esi +
sar eax 1 +
lea eax [eax+eax+2] +
pop esi  +
jmp loc_1006CC1  +
push 0Ah  +
pop eax  +
test edx edx +
jz loc_1006CD2  +
cmp word ptr [edx] 0 +
jnz loc_1006CD7  +
mov edx offset aNull +
jmp loc_1006CD7  +
mov edx offset aNull_0 +
push 0  +
push 4  +
lea ecx [ebp+arg_14] +
push ecx  +
push eax  +
push edx  +
push [ebp+arg_8]  +
push [ebp+arg_C]  +
push 2Bh  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call TraceMessage  +
add esp 28h +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
mov eax dword_100D004 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
xor ebx ebx +
lea eax [ebp+pSid] +
push eax  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push 4  +
push 1  +
lea eax [ebp+pIdentifierAuthority] +
push eax  +
xor esi esi +
mov [ebp+var_14] ebx +
mov [ebp+pIdentifierAuthority.Value] bl +
mov [ebp+pIdentifierAuthority.Value+1] bl +
mov [ebp+pIdentifierAuthority.Value+2] bl +
mov [ebp+pIdentifierAuthority.Value+3] bl +
mov [ebp+pIdentifierAuthority.Value+4] bl +
mov [ebp+pIdentifierAuthority.Value+5] 5 +
call ds:AllocateAndInitializeSid  +
test eax eax +
jnz loc_1006D4E  +
mov [ebp+pSid] ebx +
cmp [ebp+pSid] ebx +
jz loc_1006D6C  +
lea eax [ebp+var_14] +
push eax  +
push [ebp+pSid]  +
push ebx  +
call ds:CheckTokenMembership  +
push [ebp+pSid]  +
mov esi eax +
call ds:FreeSid  +
mov eax off_100D000 +
cmp eax offset off_100D000 +
jz loc_1006DA1  +
test byte ptr [eax+1Ch] 10h +
jz loc_1006DA1  +
cmp esi ebx +
jz loc_1006D8C  +
cmp [ebp+var_14] ebx +
jz loc_1006D8C  +
xor ecx ecx +
inc ecx  +
jmp loc_1006D8E  +
xor ecx ecx +
push ecx  +
push offset dword_1001BDC  +
push 18h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1006C61  +
cmp esi ebx +
jz loc_1006DAF  +
cmp [ebp+var_14] ebx +
jz loc_1006DAF  +
xor eax eax +
inc eax  +
jmp loc_1006DB1  +
xor eax eax +
mov ecx [ebp+var_4] +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100611F  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
push edi  +
lea eax [ebp+var_4] +
push eax  +
push 0  +
call ds:GetCurrentProcess  +
push eax  +
call ds:IsProcessInJob  +
mov edi eax +
mov eax off_100D000 +
cmp eax offset off_100D000 +
jz loc_1006E1A  +
test byte ptr [eax+1Ch] 10h +
jz loc_1006E1A  +
cmp [ebp+var_4] 0 +
jz loc_1006E05  +
test edi edi +
jz loc_1006E05  +
xor ecx ecx +
inc ecx  +
jmp loc_1006E07  +
xor ecx ecx +
push ecx  +
push offset dword_1001BDC  +
push 19h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1006C61  +
cmp [ebp+var_4] 0 +
jz loc_1006E29  +
test edi edi +
jz loc_1006E29  +
xor eax eax +
inc eax  +
jmp loc_1006E2B  +
xor eax eax +
pop edi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
push ebx  +
mov ebx [ebp+Type] +
push esi  +
push edi  +
test ebx ebx +
jbe loc_1006EF0  +
mov edi [ebp+arg_0] +
mov ecx [ebp+arg_8] +
push 20019h  +
push offset aSoftwareMicros  +
xor eax eax +
push 80000001h  +
mov [edi] ax +
call sub_100364E  +
mov esi eax +
test esi esi +
jz loc_1006EA9  +
mov eax off_100D000 +
cmp eax offset off_100D000 +
jz loc_1006E95  +
test byte ptr [eax+1Ch] 8 +
jz loc_1006E95  +
push esi  +
push offset dword_1001BDC  +
push 1Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1006C61  +
test esi esi +
jle loc_1006EA5  +
and esi 0FFFFh +
or esi 80070000h +
mov eax esi +
jmp loc_1006EFA  +
mov ecx [ebp+arg_8] +
lea eax [ebp+Type] +
push eax  +
push edi  +
push offset aConfiguration  +
mov [ebp+Type] ebx +
call sub_10036C9  +
test eax eax +
jz loc_1006EF7  +
mov ecx off_100D000 +
cmp ecx offset off_100D000 +
jz loc_1006EE9  +
test byte ptr [ecx+1Ch] 8 +
jz loc_1006EE9  +
push eax  +
push offset dword_1001BDC  +
push 1Dh  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_1006C61  +
xor eax eax +
mov [edi] ax +
jmp loc_1006EF7  +
mov [ebp+var_4] 80070057h +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jnz loc_1006F14  +
pop ebp  +
retn   +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_1006F17  +
sub eax edx +
sar eax 1 +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_C] +
add eax eax +
push eax  +
push [ebp+arg_8]  +
mov eax [ebp+arg_4] +
add eax eax +
push eax  +
push [ebp+arg_0]  +
call memmove_s  +
add esp 10h +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax ecx +
xor ecx ecx +
mov [eax] ecx +
mov [eax+4] ecx +
mov [eax+8] ecx +
mov [eax+0Ch] ecx +
mov [eax+10h] ecx +
mov ecx [ebp+arg_0] +
mov [eax+14h] ecx +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
push edi  +
mov esi ecx +
xor edi edi +
jmp loc_1006F94  +
mov eax [esi] +
cmp eax edi +
jz loc_1006FB3  +
mov ecx [eax] +
mov [esi] ecx +
push eax  +
mov ecx esi +
call sub_100783F  +
cmp [esi+8] edi +
ja loc_1006F82  +
mov ecx [esi+0Ch] +
mov [esi] edi +
mov [esi+4] edi +
mov [esi+10h] edi +
cmp ecx edi +
jz loc_1006FB0  +
call sub_1006773  +
mov [esi+0Ch] edi +
pop edi  +
pop esi  +
retn   +
***
push 80004005h  +
call loc_1003608  +
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
mov eax [ecx] +
test eax eax +
jnz loc_1006FDB  +
push 80004005h  +
call loc_1003608  +
mov edx [eax] +
mov [ecx] edx +
add eax 8 +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
mov ecx [ebp+arg_8] +
mov edx 7FFFFFFFh +
sub edx eax +
cmp edx ecx +
jge loc_1007008  +
mov eax 80070057h +
jmp loc_1007011  +
add eax ecx +
mov ecx [ebp+arg_0] +
mov [ecx] eax +
xor eax eax +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_4] +
shr edx 1 +
push 0  +
pop eax  +
jz loc_1007031  +
cmp edx 7FFFFFFFh +
jbe loc_1007036  +
mov eax 80070057h +
test eax eax +
jl loc_100704C  +
mov eax [ebp+arg_8] +
mov ecx [ebp+arg_0] +
push 7FFFFFFEh  +
push 0  +
call sub_1006BB6  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
mov edi 7FFFFFFFh +
push edi  +
shr esi 1 +
push ebx  +
lea eax [ebp+arg_4] +
mov edx esi +
call sub_1006B83  +
test eax eax +
jl loc_100708F  +
mov eax [ebp+arg_4] +
push edi  +
mov edx esi +
sub edx eax +
lea ecx [ebx+eax*2] +
mov eax [ebp+arg_8] +
push 0  +
call sub_1006BB6  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push edi  +
mov edi [ebp+arg_8] +
test eax eax +
jz loc_10070BD  +
mov edx [ebp+arg_4] +
cmp edx 7FFFFFFFh +
ja loc_10070BD  +
call sub_1006B4C  +
jmp loc_10070C2  +
mov eax 80070057h +
test eax eax +
jge loc_10070CD  +
test edi edi +
jz loc_10070CD  +
and dword ptr [edi] 0 +
pop edi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push 0Ah  +
mov esi ecx +
call sub_1006F52  +
push 0Ah  +
lea ecx [esi+18h] +
call sub_1006F52  +
push 0Ah  +
lea ecx [esi+30h] +
call sub_1006F52  +
mov eax [ebp+arg_0] +
and dword ptr [esi+48h] 0 +
and dword ptr [esi+50h] 0 +
mov [esi+4Ch] eax +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
lea ecx [esi+30h] +
call loc_1006F78  +
lea ecx [esi+18h] +
call loc_1006F78  +
mov ecx esi +
pop esi  +
jmp loc_1006F78  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
call WinSqmIsOptedIn  +
test eax eax +
jz locret_1007184  +
mov ecx [ebp+arg_0] +
push esi  +
call sub_1008F0D  +
mov esi [eax] +
test esi esi +
jz loc_1007183  +
push 5Ch  +
push esi  +
call ds:wcsrchr  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1007167  +
lea esi [eax+2] +
push esi  +
lea eax [ebp+var_8] +
push eax  +
call sub_1006C0D  +
lea eax [ebp+var_8] +
push eax  +
push 1  +
push 107Dh  +
push 0  +
call WinSqmAddToStream  +
pop esi  +
leave   +
retn 4  +
***
mov eax [ecx] +
mov ecx [eax-10h] +
test ecx ecx +
jz loc_100719D  +
mov eax [ecx] +
call dword ptr [eax+10h]  +
jmp loc_100719F  +
xor eax eax +
test eax eax +
jnz locret_10071B0  +
mov ecx offset dword_100D340 +
mov eax dword_100D340 +
jmp dword ptr [eax+10h]  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
push dword ptr [eax]  +
mov ecx [ebp+arg_0] +
call sub_1004674  +
neg eax  +
sbb eax eax +
neg eax  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov ecx [ebp+arg_8] +
push edi  +
test ecx ecx +
jnz loc_10071F1  +
push 80004005h  +
call loc_1003608  +
cmp [ebp+arg_0] 0 +
mov edi [ebp+arg_4] +
jnz loc_1007205  +
test edi edi +
jz loc_1007205  +
push 80070057h  +
jmp loc_10071EC  +
mov eax [ecx] +
push 2  +
push edi  +
call dword ptr [eax]  +
test eax eax +
jnz loc_1007215  +
call loc_1004706  +
add eax 10h +
push edi  +
mov ecx esi +
mov [esi] eax +
call loc_100477B  +
push edi  +
push [ebp+arg_0]  +
push edi  +
push dword ptr [esi]  +
call sub_1004414  +
add esp 10h +
pop edi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov ecx [esi] +
sub ecx 10h +
xor eax eax +
push edi  +
mov edi [ecx] +
cmp [ecx+4] eax +
jz loc_1007272  +
cmp [ecx+0Ch] eax +
jge loc_1007261  +
push eax  +
mov ecx esi +
call loc_100477B  +
jmp loc_1007272  +
call sub_100425C  +
mov eax [edi] +
mov ecx edi +
call dword ptr [eax+0Ch]  +
add eax 10h +
mov [esi] eax +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
lea eax [ebp+arg_4] +
push [ebp+arg_0]  +
push eax  +
call sub_1006FEB  +
test eax eax +
jge loc_1007298  +
push eax  +
call loc_1003608  +
mov eax [ebp+arg_4] +
pop ebp  +
retn 8  +
***
mov edi edi +
push esi  +
mov esi ecx +
cmp dword ptr [esi+10h] 0 +
jnz loc_10072E7  +
push 0Ch  +
push dword ptr [esi+14h]  +
lea eax [esi+0Ch] +
push eax  +
call sub_1006800  +
test eax eax +
jnz loc_10072CB  +
push 8007000Eh  +
call loc_1003608  +
mov ecx [esi+14h] +
mov edx ecx +
imul edx edx +
lea eax [edx+eax-8] +
jmp loc_10072E4  +
mov edx [esi+10h] +
mov [eax] edx +
mov [esi+10h] eax +
sub eax 0Ch +
dec ecx  +
jns loc_10072D9  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
mov ecx [ebp+arg_0] +
call sub_1004674  +
neg eax  +
sbb eax eax +
neg eax  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_100469E  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_8]  +
mov esi ecx +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_10071D7  +
mov eax esi +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push ebx  +
push esi  +
push edi  +
lea eax [ebp+var_8] +
push eax  +
xor ebx ebx +
push offset aStartlistCreat  +
lea ecx [ebp+var_10] +
mov [ebp+var_8] ebx +
call sub_1003330  +
mov esi [ebp+lpDst] +
cmp esi ebx +
jz loc_10074AE  +
cmp [esi] bx +
jz loc_10074AE  +
lea eax [ebp+nSize] +
push eax  +
push 7FFFFFFFh  +
push esi  +
mov [ebp+nSize] ebx +
call sub_100709B  +
test eax eax +
jl loc_1007489  +
lea eax [ebp+nSize] +
push eax  +
push 104h  +
push [ebp+nSize]  +
call sub_1006ADD  +
test eax eax +
jl loc_1007489  +
push [ebp+nSize]  +
lea ecx [ebp+lpDst] +
mov [ebp+lpDst] ebx +
call sub_100486C  +
test al al +
jnz loc_10073D7  +
push [ebp+lpDst]  +
call sub_100447D  +
mov esi 8007000Eh +
jmp loc_100748E  +
push [ebp+nSize]  +
mov edi [ebp+lpDst] +
push edi  +
push esi  +
call ds:ExpandEnvironmentStringsW  +
mov esi eax +
cmp esi ebx +
jnz loc_100740C  +
call ds:GetLastError  +
cmp eax ebx +
jle loc_10073FF  +
and eax 0FFFFh +
or eax 80070000h +
mov esi eax +
push edi  +
call sub_100447D  +
jmp loc_100748E  +
cmp esi [ebp+nSize] +
jbe loc_100741E  +
push edi  +
call sub_100447D  +
mov esi 8007007Ah +
jmp loc_100748E  +
push [ebp+nShowCmd]  +
push ebx  +
push [ebp+lpParameters]  +
push edi  +
push ebx  +
push ebx  +
call ds:ShellExecuteW  +
mov edi eax +
cmp edi 20h +
jg loc_100749A  +
mov eax off_100D000 +
cmp eax offset off_100D000 +
jz loc_100745D  +
test byte ptr [eax+1Ch] 8 +
jz loc_100745D  +
push edi  +
push [ebp+lpDst]  +
push offset dword_1001BDC  +
push 17h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1006C8D  +
cmp edi 2 +
jl loc_1007481  +
cmp edi 3 +
jle loc_100746C  +
cmp edi 0Bh +
jnz loc_1007481  +
cmp esi ebx +
jle loc_100747C  +
and esi 0FFFFh +
or esi 80070000h +
push [ebp+lpDst]  +
jmp loc_1007402  +
push [ebp+lpDst]  +
call sub_100447D  +
mov esi 80004005h +
lea ecx [ebp+var_10] +
call sub_1003374  +
mov eax esi +
jmp loc_10074BB  +
push [ebp+lpDst]  +
call sub_100447D  +
lea ecx [ebp+var_10] +
call sub_1003374  +
xor eax eax +
jmp loc_10074BB  +
lea ecx [ebp+var_10] +
call sub_1003374  +
mov eax 80070057h +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 7Ch +
push edi  +
mov edi ecx +
mov ecx [ebp+arg_0] +
push 2001Fh  +
xor eax eax +
push offset aSoftwareMicr_0  +
mov [ecx] ax +
mov ecx [ebp+arg_8] +
push 80000001h  +
call sub_100364E  +
test eax eax +
jnz loc_10075D0  +
lea ecx [ebp+var_7C] +
call sub_1006853  +
lea ecx [ebp+var_7C] +
call sub_1006975  +
mov [ebp+var_C] eax +
mov eax [eax] +
mov [ebp+var_8] eax +
test eax eax +
jz loc_10075C8  +
push esi  +
mov ecx [ebp+var_C] +
lea eax [ebp+var_8] +
push eax  +
call sub_1006FC3  +
mov esi [eax] +
push offset aSystemsetting  +
mov ecx esi +
call sub_1008F1F  +
push eax  +
call sub_10072EE  +
test al al +
jz loc_10075BD  +
mov ecx esi +
call sub_1008EFC  +
mov eax [eax] +
lea ecx [ebp+Data] +
push ecx  +
mov ecx [ebp+arg_8] +
push eax  +
call sub_100368A  +
test eax eax +
jnz loc_10075BD  +
test [ebp+Data] 2 +
jz loc_100757D  +
and dword ptr [ebp+Data] 0FFFFFFFDh +
mov ecx esi +
mov dword ptr [edi+50h] 1 +
call sub_1008EFC  +
push dword ptr [ebp+Data]  +
mov ecx [ebp+arg_8] +
push dword ptr [eax]  +
call sub_100373F  +
test [ebp+Data] 1 +
jz loc_10075BD  +
mov eax [ebp+arg_0] +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_1007589  +
sub eax edx +
sar eax 1 +
jz loc_10075A9  +
push offset asc_1001C24  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1007055  +
mov ecx esi +
call sub_1008EFC  +
push dword ptr [eax]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1007055  +
cmp [ebp+var_8] 0 +
jnz loc_100751A  +
pop esi  +
lea ecx [ebp+var_7C] +
call sub_1006898  +
pop edi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_4] 0 +
push ebx  +
push esi  +
push edi  +
mov ebx ecx +
jge loc_10075EE  +
and [ebp+arg_4] 0 +
mov esi [ebp+arg_8] +
test esi esi +
jge loc_10075F7  +
xor esi esi +
mov eax [ebx] +
mov edi [eax-0Ch] +
push esi  +
push [ebp+arg_4]  +
call sub_100727A  +
cmp eax edi +
jle loc_1007611  +
mov eax [ebx] +
mov esi [eax-0Ch] +
sub esi [ebp+arg_4] +
mov edi [ebx] +
mov eax [edi-0Ch] +
cmp [ebp+arg_4] eax +
jle loc_100761D  +
xor esi esi +
cmp [ebp+arg_4] 0 +
jnz loc_1007632  +
cmp esi eax +
jnz loc_1007632  +
mov ecx [ebp+arg_0] +
push ebx  +
call sub_1004AD5  +
jmp loc_100764A  +
mov ecx ebx +
call sub_100718D  +
mov ecx [ebp+arg_0] +
push eax  +
mov eax [ebp+arg_4] +
push esi  +
lea eax [edi+eax*2] +
push eax  +
call sub_1007329  +
mov eax [ebp+arg_0] +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_4] 0 +
push ebx  +
mov ebx ecx +
jnz loc_100766E  +
call sub_100723E  +
jmp loc_10076C3  +
push esi  +
mov esi [ebp+arg_0] +
test esi esi +
jnz loc_1007680  +
push 80070057h  +
call loc_1003608  +
mov eax [ebx] +
push edi  +
push [ebp+arg_4]  +
mov edi [eax-0Ch] +
sub esi eax +
sar esi 1 +
call sub_1004B12  +
cmp esi edi +
pop edi  +
push [ebp+arg_4]  +
ja loc_10076A9  +
lea ecx [eax+esi*2] +
push ecx  +
push [ebp+arg_4]  +
push eax  +
call sub_1006F2C  +
jmp loc_10076B5  +
push [ebp+arg_0]  +
push [ebp+arg_4]  +
push eax  +
call sub_1004414  +
add esp 10h +
push [ebp+arg_4]  +
mov ecx ebx +
call loc_100477B  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov ecx [esi+8] +
sub ecx 10h +
call sub_100425C  +
test [ebp+arg_0] 1 +
jz loc_10076ED  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax] +
push esi  +
push edi  +
mov edi ecx +
mov esi [edi] +
lea ecx [eax-10h] +
sub esi 10h +
cmp ecx esi +
jz loc_1007743  +
cmp dword ptr [esi+0Ch] 0 +
jl loc_1007738  +
mov edx [ecx] +
cmp edx [esi] +
jnz loc_1007738  +
push ebx  +
push ecx  +
call sub_1004716  +
pop ecx  +
mov ecx esi +
mov ebx eax +
call sub_100425C  +
add ebx 10h +
mov [edi] ebx +
pop ebx  +
jmp loc_1007743  +
push dword ptr [eax-0Ch]  +
mov ecx edi +
push eax  +
call sub_1007659  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
mov ebx ecx +
mov eax [ebx] +
push edi  +
mov edi [eax-0Ch] +
sub esi eax +
mov eax [ebp+arg_4] +
add eax edi +
push eax  +
sar esi 1 +
mov [ebp+var_4] eax +
call sub_1004B12  +
cmp esi edi +
lea esi [eax+esi*2] +
jbe loc_100777F  +
mov esi [ebp+arg_0] +
push [ebp+arg_4]  +
lea eax [eax+edi*2] +
push esi  +
push [ebp+arg_4]  +
push eax  +
call sub_1004414  +
add esp 10h +
push [ebp+var_4]  +
mov ecx ebx +
call loc_100477B  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+lpMultiByteStr] 0 +
push esi  +
push edi  +
mov edi ecx +
jz loc_10077C4  +
push [ebp+lpMultiByteStr]  +
call sub_1006B0B  +
pop ecx  +
mov esi eax +
jmp loc_10077C6  +
xor esi esi +
mov ecx edi +
test esi esi +
jle loc_10077EB  +
push esi  +
call sub_1004B12  +
push 0FFFFFFFFh  +
push [ebp+lpMultiByteStr]  +
push esi  +
push eax  +
call sub_1006B2A  +
add esp 10h +
push esi  +
mov ecx edi +
call loc_100477B  +
jmp loc_10077F0  +
call sub_100723E  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax] +
push dword ptr [eax-0Ch]  +
push eax  +
call sub_1007750  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_1006F06  +
pop ecx  +
push eax  +
push [ebp+arg_0]  +
mov ecx esi +
call sub_1007659  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov esi ecx +
push 0  +
mov ecx edi +
call sub_10076CD  +
mov eax [esi+10h] +
mov [edi] eax +
dec dword ptr [esi+8]  +
mov [esi+10h] edi +
jnz loc_1007868  +
mov ecx esi +
call loc_1006F78  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_1006F06  +
pop ecx  +
push eax  +
push [ebp+arg_0]  +
mov ecx esi +
call sub_1007750  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
cmp [ebp+arg_0] eax +
jz loc_10078BA  +
test [ebp+arg_0] 0FFFF0000h +
jnz loc_10078BA  +
movzx eax word ptr [ebp+arg_0] +
push eax  +
call sub_1004EAA  +
mov al 1 +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_1007819  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_10077FD  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jnz loc_1007911  +
push 80004005h  +
call loc_1003608  +
push esi  +
cmp eax [ecx] +
jnz loc_100791C  +
mov edx [eax] +
mov [ecx] edx +
jmp loc_1007923  +
mov edx [eax+4] +
mov esi [eax] +
mov [edx] esi +
cmp eax [ecx+4] +
jnz loc_1007930  +
mov edx [eax+4] +
mov [ecx+4] edx +
jmp loc_1007938  +
mov edx [eax] +
mov esi [eax+4] +
mov [edx+4] esi +
push eax  +
call sub_100783F  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_10078C3  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_10078DF  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_4]  +
mov esi ecx +
call sub_100469E  +
push [ebp+lpMultiByteStr]  +
mov ecx esi +
call sub_1007899  +
test al al +
jnz loc_10079A8  +
push [ebp+lpMultiByteStr]  +
mov ecx esi +
call sub_10077A8  +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_4]  +
mov esi ecx +
call sub_100469E  +
push [ebp+arg_0]  +
mov ecx esi +
call sub_1007899  +
test al al +
jnz loc_10079DC  +
push [ebp+arg_0]  +
mov ecx esi +
call sub_1007948  +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
push offset Data  +
mov ecx esi +
call sub_1007819  +
mov edi [ebp+arg_4] +
mov eax [edi] +
mov [ebp+arg_0] eax +
test eax eax +
jz loc_1007A37  +
mov eax [esi] +
cmp dword ptr [eax-0Ch] 0 +
jz loc_1007A1E  +
push offset asc_1001C24  +
mov ecx esi +
call sub_1007873  +
lea eax [ebp+arg_0] +
push eax  +
mov ecx edi +
call sub_1006FC3  +
push eax  +
mov ecx esi +
call sub_1007964  +
cmp [ebp+arg_0] 0 +
jnz loc_1007A0A  +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push offset dword_100D340  +
mov esi ecx +
call sub_100469E  +
push [ebp+arg_0]  +
mov ecx esi +
call sub_1007899  +
test al al +
jnz loc_1007A6C  +
push [ebp+arg_0]  +
mov ecx esi +
call sub_1007948  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
mov esi [ebp+arg_8] +
mov ebx ecx +
mov ecx [esi] +
push edi  +
test ecx ecx +
jge loc_1007A96  +
push 80070057h  +
call loc_1003608  +
mov edx [ebp+arg_4] +
test edx edx +
jz loc_1007AEF  +
cmp word ptr [edx] 0 +
jz loc_1007AEF  +
mov eax [ebx] +
lea edi [eax+ecx*2] +
mov ecx [eax-0Ch] +
lea eax [eax+ecx*2] +
mov [ebp+arg_8] eax +
cmp edi eax +
jnb loc_1007B0E  +
push edx  +
push edi  +
call ds:wcsspn  +
lea edi [edi+eax*2] +
pop ecx  +
pop ecx  +
mov [ebp+var_4] eax +
cmp edi [ebp+arg_8] +
jnb loc_1007B0E  +
push [ebp+arg_4]  +
push edi  +
call ds:wcscspn  +
pop ecx  +
pop ecx  +
mov ecx [esi] +
add ecx [ebp+var_4] +
push eax  +
push ecx  +
push [ebp+arg_0]  +
lea edx [ecx+eax+1] +
mov ecx ebx +
mov [esi] edx +
call sub_10075DA  +
jmp loc_1007B21  +
mov edi [ebx] +
cmp ecx [edi-0Ch] +
jge loc_1007B0E  +
mov ecx ebx +
call sub_100718D  +
mov ecx [ebp+arg_0] +
push eax  +
mov eax [esi] +
lea eax [edi+eax*2] +
push eax  +
call sub_10079B4  +
jmp loc_1007B21  +
or dword ptr [esi] 0FFFFFFFFh +
mov ecx ebx +
call sub_100718D  +
mov ecx [ebp+arg_0] +
push eax  +
call sub_100730D  +
mov eax [ebp+arg_0] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
push ebx  +
call sub_100718D  +
push eax  +
push [ebp+lpMultiByteStr]  +
lea ecx [ebp+lpMultiByteStr] +
call sub_1007980  +
lea eax [ebp+lpMultiByteStr] +
push eax  +
push [ebp+arg_0]  +
call sub_10071B6  +
mov ecx [ebp+lpMultiByteStr] +
add ecx 0FFFFFFF0h +
mov bl al +
call sub_100425C  +
mov al bl +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
lea ecx [esi+8] +
call sub_1007A42  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1Ch +
and [ebp+var_4] 0 +
push esi  +
lea eax [ebp+var_4] +
push eax  +
mov esi ecx +
push offset aStartlistSaves  +
lea ecx [ebp+var_10] +
call sub_1003330  +
mov ecx esi +
call sub_1006D00  +
test eax eax +
jz loc_1007C94  +
push ebx  +
push offset dword_100D340  +
lea ecx [ebp+var_8] +
call sub_100469E  +
push esi  +
lea eax [ebp+var_8] +
push eax  +
mov ecx esi +
call sub_10079E8  +
and [ebp+var_1C] 0 +
and [ebp+var_18] 0 +
and [ebp+var_14] 0 +
push 20006h  +
mov esi offset aSoftwareMicros +
push esi  +
push 80000001h  +
lea ecx [ebp+var_1C] +
call sub_100364E  +
mov ebx [ebp+var_8] +
test eax eax +
jz loc_1007C3B  +
jle loc_1007C0E  +
and eax 0FFFFh +
or eax 80070000h +
mov [ebp+var_4] eax +
mov eax off_100D000 +
cmp eax offset off_100D000 +
jz loc_1007C83  +
test byte ptr [eax+1Ch] 8 +
jz loc_1007C83  +
push [ebp+var_4]  +
push esi  +
push offset dword_1001BDC  +
push 12h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1006C8D  +
jmp loc_1007C83  +
push 1  +
push ebx  +
push offset aConfiguratio_0  +
lea ecx [ebp+var_1C] +
call sub_1003762  +
test eax eax +
jz loc_1007C5E  +
jle loc_1007C5B  +
and eax 0FFFFh +
or eax 80070000h +
mov [ebp+var_4] eax +
mov eax off_100D000 +
cmp eax offset off_100D000 +
jz loc_1007C83  +
test byte ptr [eax+1Ch] 10h +
jz loc_1007C83  +
push ebx  +
push offset dword_1001BDC  +
push 13h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10032C3  +
lea ecx [ebp+var_1C] +
call sub_1003630  +
lea ecx [ebx-10h] +
call sub_100425C  +
pop ebx  +
mov esi [ebp+var_4] +
lea ecx [ebp+var_10] +
call sub_1003374  +
mov eax esi +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
mov eax dword_100D004 +
xor eax ebp +
mov [ebp+var_4] eax +
and [ebp+var_20] 0 +
push esi  +
mov esi [ebp+arg_0] +
lea eax [ebp+var_20] +
push eax  +
call ds:GetCurrentProcessId  +
push eax  +
call ds:ProcessIdToSessionId  +
push offset aSoftwareMicr_1  +
mov ecx esi +
call sub_1007A42  +
push 0Ah  +
push 0Ch  +
lea eax [ebp+var_1C] +
push eax  +
push [ebp+var_20]  +
call _ltow_s  +
add esp 10h +
lea eax [ebp+var_1C] +
push eax  +
mov ecx esi +
call sub_1007873  +
mov ecx [ebp+var_4] +
mov eax esi +
xor ecx ebp +
pop esi  +
call sub_100611F  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax 1018h +
call __alloca_probe  +
mov eax dword_100D004 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
push edi  +
xor ebx ebx +
xor eax eax +
mov esi 7FEh +
push esi  +
mov word ptr [ebp+Data] ax +
lea eax [ebp-1002h] +
push ebx  +
push eax  +
mov [ebp+lpSubKey] ecx +
mov [ebp+var_1018] ebx +
mov [ebp+var_1014] ebx +
mov [ebp+var_1010] ebx +
call memset  +
xor eax eax +
push esi  +
mov word ptr [ebp+var_804] ax +
lea eax [ebp+var_804+2] +
push ebx  +
push eax  +
call memset  +
add esp 18h +
mov esi 20019h +
push esi  +
push offset aSoftwareMicros  +
push 80000001h  +
lea ecx [ebp+var_1018] +
call sub_100364E  +
mov edi offset aConfiguratio_0 +
test eax eax +
jnz loc_1007DD5  +
lea eax [ebp+Type] +
push eax  +
lea eax [ebp+Data] +
push eax  +
push edi  +
lea ecx [ebp+var_1018] +
mov [ebp+Type] 400h +
call sub_10036C9  +
test eax eax +
jz loc_1007DD5  +
xor eax eax +
mov word ptr [ebp+Data] ax +
mov ecx [ebp+lpSubKey] +
lea eax [ebp+lpSubKey] +
push eax  +
call sub_1007CA9  +
push esi  +
mov esi [ebp+lpSubKey] +
push esi  +
push 80000002h  +
lea ecx [ebp+var_1018] +
call sub_100364E  +
test eax eax +
jnz loc_1007E34  +
lea eax [ebp+Type] +
push eax  +
lea eax [ebp+var_804] +
push eax  +
push edi  +
lea ecx [ebp+var_1018] +
mov [ebp+Type] 400h +
call sub_10036C9  +
test eax eax +
jz loc_1007E34  +
xor eax eax +
mov word ptr [ebp+var_804] ax +
lea ecx [ebp+var_804] +
lea eax [ebp+Data] +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_1007E66  +
cmp dx bx +
jz loc_1007E62  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_1007E66  +
add eax 4 +
add ecx 4 +
cmp dx bx +
jnz loc_1007E40  +
xor eax eax +
jmp loc_1007E6B  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
cmp eax ebx +
jz loc_1007E74  +
call sub_1002F65  +
lea ecx [esi-10h] +
call sub_100425C  +
lea ecx [ebp+var_1018] +
call sub_1003630  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100611F  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+Type] +
xor eax eax +
mov [esi] ax +
push edi  +
lea eax [ebp+Type] +
push eax  +
call sub_1007CA9  +
mov eax [eax] +
mov ecx [ebp+arg_8] +
push 2001Fh  +
push eax  +
push 80000002h  +
call sub_100364E  +
mov ecx [ebp+Type] +
add ecx 0FFFFFFF0h +
mov edi eax +
call sub_100425C  +
mov ebx offset dword_1001BDC +
test edi edi +
jz loc_1007F00  +
mov eax off_100D000 +
cmp eax offset off_100D000 +
jz loc_1007F00  +
test byte ptr [eax+1Ch] 8 +
jz loc_1007F00  +
push edi  +
push ebx  +
push 1Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1006C61  +
mov eax [ebp+arg_4] +
mov ecx [ebp+arg_8] +
mov [ebp+Type] eax +
lea eax [ebp+Type] +
push eax  +
push esi  +
push offset aConfiguration  +
call sub_10036C9  +
test eax eax +
jz loc_1007F44  +
mov ecx off_100D000 +
cmp ecx offset off_100D000 +
jz loc_1007F3F  +
test byte ptr [ecx+1Ch] 8 +
jz loc_1007F3F  +
push eax  +
push ebx  +
push 1Bh  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_1006C61  +
xor eax eax +
mov [esi] ax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 228h +
mov eax dword_100D004 +
xor eax ebp +
mov [ebp+var_4] eax +
mov ecx [ebp+arg_0] +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_8] +
mov [ebp+lpData] ecx +
mov [ebp+Type] edi +
mov eax off_100D000 +
mov esi offset off_100D000 +
cmp eax esi +
jz loc_1007FA4  +
test byte ptr [eax+1Ch] 8 +
jz loc_1007FA4  +
push ecx  +
mov ebx offset dword_1001BDC +
push ebx  +
push 1Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10032C3  +
jmp loc_1007FA9  +
mov ebx offset dword_1001BDC +
lea eax [ebp+var_214] +
push eax  +
xor eax eax +
push eax  +
push 3  +
push eax  +
push eax  +
push offset aSoftwareMicros  +
push 80000001h  +
mov ecx edi +
call sub_1006A88  +
mov edi eax +
test edi edi +
jz loc_100800F  +
mov eax off_100D000 +
cmp eax esi +
jz loc_1007FEC  +
test byte ptr [eax+1Ch] 8 +
jz loc_1007FEC  +
push edi  +
push ebx  +
push 1Fh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1006C61  +
test edi edi +
jle loc_1007FFC  +
and edi 0FFFFh +
or edi 80070000h +
mov eax edi +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100611F  +
leave   +
retn 0Ch  +
mov ecx [ebp+Type] +
push 1  +
push [ebp+lpData]  +
push offset aConfiguratio_0  +
call sub_1003762  +
mov edi eax +
xor eax eax +
cmp edi eax +
jz loc_1008044  +
mov eax off_100D000 +
cmp eax esi +
jz loc_1007FEC  +
test byte ptr [eax+1Ch] 8 +
jz loc_1007FEC  +
push edi  +
push ebx  +
push 20h  +
jmp loc_1007FE1  +
push 20019h  +
push offset aSoftwareMicr_4  +
push 80000001h  +
lea ecx [ebp+var_228] +
mov [ebp+var_228] eax +
mov [ebp+var_224] eax +
mov [ebp+var_220] eax +
call sub_100364E  +
mov edi eax +
test edi edi +
jz loc_10080B8  +
mov eax off_100D000 +
cmp eax esi +
jz loc_1008094  +
test byte ptr [eax+1Ch] 8 +
jz loc_1008094  +
push edi  +
push ebx  +
push 21h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1006C61  +
test edi edi +
jle loc_10080A4  +
and edi 0FFFFh +
or edi 80070000h +
mov esi edi +
lea ecx [ebp+var_228] +
call sub_1003630  +
mov eax esi +
jmp loc_1007FFE  +
xor eax eax +
push 206h  +
push eax  +
mov word ptr [ebp+Data] ax +
lea eax [ebp-20Ah] +
push eax  +
call memset  +
add esp 0Ch +
lea eax [ebp+Type] +
push eax  +
lea eax [ebp+Data] +
push eax  +
push offset aStartup  +
lea ecx [ebp+var_228] +
mov [ebp+Type] 104h +
call sub_10036C9  +
lea eax [ebp+Data] +
push eax  +
lea ecx [ebp+Type] +
call sub_1007A42  +
lea eax [ebp+Data] +
push eax  +
lea ecx [ebp+var_214] +
call sub_1007A42  +
lea eax [ebp+Data] +
push eax  +
lea ecx [ebp+var_21C] +
call sub_1007A42  +
push offset aOnScreenKeyboa  +
lea ecx [ebp+Type] +
call sub_1007873  +
push offset aNarrator_lnk  +
lea ecx [ebp+var_214] +
call sub_1007873  +
push offset aMagnifier_lnk  +
lea ecx [ebp+var_21C] +
call sub_1007873  +
push [ebp+Type]  +
mov ebx ds:GetFileAttributesW +
call ebx  +
mov edi ds:DeleteFileW +
cmp eax 0FFFFFFFFh +
jz loc_10081B9  +
push offset aOsk_0  +
push [ebp+arg_4]  +
push [ebp+lpData]  +
call sub_1007055  +
push [ebp+Type]  +
call edi  +
mov eax off_100D000 +
cmp eax esi +
jz loc_10081B9  +
test byte ptr [eax+1Ch] 10h +
jz loc_10081B9  +
push offset dword_1001BDC  +
push 22h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1006C3B  +
push [ebp+var_214]  +
call ebx  +
cmp eax 0FFFFFFFFh +
jz loc_1008202  +
push offset aNarrator_1  +
push [ebp+arg_4]  +
push [ebp+lpData]  +
call sub_1007055  +
push [ebp+var_214]  +
call edi  +
mov eax off_100D000 +
cmp eax esi +
jz loc_1008202  +
test byte ptr [eax+1Ch] 10h +
jz loc_1008202  +
push offset dword_1001BDC  +
push 23h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1006C3B  +
push [ebp+var_21C]  +
call ebx  +
cmp eax 0FFFFFFFFh +
jz loc_100824B  +
push offset aMagnifierpan_0  +
push [ebp+arg_4]  +
push [ebp+lpData]  +
call sub_1007055  +
push [ebp+var_21C]  +
call edi  +
mov eax off_100D000 +
cmp eax esi +
jz loc_100824B  +
test byte ptr [eax+1Ch] 10h +
jz loc_100824B  +
push offset dword_1001BDC  +
push 24h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1006C3B  +
mov ecx [ebp+var_21C] +
add ecx 0FFFFFFF0h +
call sub_100425C  +
mov ecx [ebp+var_214] +
add ecx 0FFFFFFF0h +
call sub_100425C  +
mov ecx [ebp+Type] +
add ecx 0FFFFFFF0h +
call sub_100425C  +
xor esi esi +
jmp loc_10080A6  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov edi ecx +
call sub_10072A4  +
mov esi [edi+10h] +
mov ebx [esi] +
test esi esi +
jz loc_10082A3  +
push [ebp+arg_0]  +
mov ecx esi +
call sub_1007B6F  +
mov eax [ebp+arg_4] +
mov [edi+10h] ebx +
mov [esi+4] eax +
mov eax [ebp+arg_8] +
mov [esi] eax +
inc dword ptr [edi+8]  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 24h +
push ebx  +
push esi  +
push edi  +
xor edi edi +
push edi  +
mov ebx ecx +
push offset aStartlistSav_0  +
lea ecx [ebp+var_18] +
mov [ebp+lpData] edi +
call sub_1003330  +
lea eax [ebp+var_C] +
push eax  +
mov ecx ebx +
mov [ebp+var_24] edi +
mov [ebp+var_20] edi +
mov [ebp+var_1C] edi +
call sub_1007CA9  +
mov eax [eax] +
push 20006h  +
push eax  +
mov esi 80000002h +
push esi  +
lea ecx [ebp+var_24] +
call sub_100364E  +
mov ecx [ebp+var_C] +
add ecx 0FFFFFFF0h +
mov [ebp+var_4] eax +
call sub_100425C  +
cmp [ebp+var_4] edi +
jz loc_10083A8  +
lea eax [ebp+var_C] +
push eax  +
mov ecx ebx +
call sub_1007CA9  +
mov eax [eax] +
lea ecx [ebp+var_10] +
push ecx  +
push edi  +
push 3  +
push 1  +
push edi  +
push eax  +
push esi  +
lea ecx [ebp+var_24] +
call sub_1006A88  +
mov ecx [ebp+var_C] +
add ecx 0FFFFFFF0h +
mov esi eax +
call sub_100425C  +
cmp esi edi +
jz loc_10083A8  +
mov eax off_100D000 +
cmp eax offset off_100D000 +
jz loc_1008393  +
test byte ptr [eax+1Ch] 8 +
jz loc_1008393  +
lea eax [ebp+var_C] +
push eax  +
mov ecx ebx +
mov [ebp+lpData] 1 +
call sub_1007CA9  +
push esi  +
push dword ptr [eax]  +
mov eax off_100D000 +
push offset dword_1001BDC  +
push 14h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1006C8D  +
test byte ptr [ebp+lpData] 1 +
jz loc_1008432  +
mov ecx [ebp+var_C] +
add ecx 0FFFFFFF0h +
jmp loc_100842D  +
push offset dword_100D340  +
lea ecx [ebp+lpData] +
call sub_100469E  +
lea eax [ebx+18h] +
push eax  +
lea eax [ebp+lpData] +
push eax  +
mov ecx ebx +
call sub_10079E8  +
mov esi [ebp+lpData] +
push 1  +
push esi  +
push offset aConfiguratio_0  +
lea ecx [ebp+var_24] +
call sub_1003762  +
cmp [ebp+var_4] edi +
jz loc_1008405  +
mov eax off_100D000 +
cmp eax offset off_100D000 +
jz loc_100842A  +
test byte ptr [eax+1Ch] 8 +
jz loc_100842A  +
push [ebp+var_4]  +
push offset dword_1001BDC  +
push 15h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1006C61  +
jmp loc_100842A  +
mov eax off_100D000 +
cmp eax offset off_100D000 +
jz loc_100842A  +
test byte ptr [eax+1Ch] 10h +
jz loc_100842A  +
push esi  +
push offset dword_1001BDC  +
push 16h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10032C3  +
lea ecx [esi-10h] +
call sub_100425C  +
lea ecx [ebp+var_24] +
call sub_1003630  +
lea ecx [ebp+var_18] +
call sub_1003374  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push 0  +
mov esi ecx +
push dword ptr [esi+4]  +
push [ebp+arg_0]  +
call sub_1008281  +
mov ecx [esi+4] +
test ecx ecx +
jz loc_100846C  +
mov [ecx] eax +
jmp loc_100846E  +
mov [esi] eax +
mov [esi+4] eax +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov edi ecx +
test esi esi +
jnz loc_1008495  +
push 80004005h  +
call loc_1003608  +
mov eax [esi] +
mov [ebp+arg_0] eax +
test eax eax +
jz loc_10084B8  +
lea eax [ebp+arg_0] +
push eax  +
mov ecx esi +
call sub_1006FC3  +
push dword ptr [eax]  +
mov ecx edi +
call sub_100844C  +
cmp [ebp+arg_0] 0 +
jnz loc_100849E  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
mov ecx [ebp+arg_0] +
push ebx  +
push edi  +
lea eax [ebp+var_C] +
push eax  +
lea eax [ebp+var_10] +
push eax  +
lea eax [ebp+var_4] +
xor ebx ebx +
push eax  +
mov [ebp+var_C] ebx +
mov dword ptr [ebp+var_10] 2Ch +
call sub_1007A78  +
mov edi offset dword_1001E50 +
push edi  +
lea eax [ebp+var_4] +
push eax  +
call sub_1007B30  +
test al al +
jz loc_100859F  +
push esi  +
mov esi [ebp+var_4] +
cmp [esi-0Ch] ebx +
jz loc_1008564  +
push offset aSoftwareMicr_2  +
lea ecx [ebp+lpSubKey] +
call sub_1007A42  +
push dword ptr [esi-0Ch]  +
lea ecx [ebp+lpSubKey] +
push esi  +
call sub_1007750  +
push 20019h  +
push [ebp+lpSubKey]  +
lea ecx [ebp+var_20] +
push 80000002h  +
mov [ebp+var_20] ebx +
mov [ebp+var_1C] ebx +
mov [ebp+var_18] ebx +
call sub_100364E  +
test eax eax +
jnz loc_1008551  +
mov ecx [ebp+arg_4] +
push esi  +
call sub_100844C  +
lea ecx [ebp+var_20] +
call sub_1003630  +
mov ecx [ebp+lpSubKey] +
add ecx 0FFFFFFF0h +
call sub_100425C  +
mov ecx [ebp+arg_0] +
lea eax [ebp+var_C] +
push eax  +
lea eax [ebp+var_10] +
push eax  +
lea eax [ebp+var_14] +
push eax  +
call sub_1007A78  +
push eax  +
lea ecx [ebp+var_4] +
call sub_10076F9  +
mov ecx [ebp+var_14] +
add ecx 0FFFFFFF0h +
call sub_100425C  +
push edi  +
lea eax [ebp+var_4] +
push eax  +
call sub_1007B30  +
test al al +
jnz loc_1008505  +
pop esi  +
mov ecx [ebp+var_4] +
add ecx 0FFFFFFF0h +
call sub_100425C  +
pop edi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax 1830h +
call __alloca_probe  +
mov eax dword_100D004 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
push edi  +
mov edi ecx +
xor esi esi +
xor eax eax +
cmp [edi+48h] esi +
jnz loc_1008784  +
push ebx  +
mov ebx 7FEh +
push ebx  +
mov word ptr [ebp+var_804] ax +
lea eax [ebp+var_804+2] +
push esi  +
push eax  +
mov dword ptr [edi+48h] 1 +
mov [ebp+var_1818] esi +
mov [ebp+var_1814] esi +
mov [ebp+var_1810] esi +
call memset  +
xor eax eax +
push ebx  +
mov word ptr [ebp+Type] ax +
lea eax [ebp+Type+2] +
push esi  +
push eax  +
mov [ebp+var_1830] esi +
mov [ebp+var_182C] esi +
mov [ebp+var_1828] esi +
call memset  +
add esp 18h +
lea eax [ebp+var_1830] +
push eax  +
mov esi 400h +
push esi  +
lea eax [ebp+Type] +
push eax  +
mov ecx edi +
call sub_1007E9B  +
lea eax [ebp+Type] +
push eax  +
lea ecx [ebp+var_180C] +
call sub_1007A42  +
lea eax [edi+18h] +
push eax  +
lea eax [ebp+var_180C] +
push eax  +
mov ecx edi +
call sub_10084C3  +
mov ecx edi +
call sub_1006D00  +
test eax eax +
jz loc_1008846  +
xor eax eax +
push ebx  +
push eax  +
mov [ebp+var_1824] eax +
mov [ebp+var_1820] eax +
mov [ebp+var_181C] eax +
lea eax [ebp+var_1804+2] +
xor ecx ecx +
push eax  +
mov word ptr [ebp+var_1804] cx +
call memset  +
add esp 0Ch +
lea eax [ebp+var_1824] +
push eax  +
push esi  +
lea eax [ebp+var_1804] +
push eax  +
mov ecx edi +
call sub_10074C7  +
lea eax [ebp+var_1804] +
push eax  +
lea ecx [ebp+var_1808] +
call sub_1007A42  +
lea eax [edi+30h] +
push eax  +
lea eax [ebp+var_1808] +
push eax  +
mov ecx edi +
call sub_10084C3  +
lea eax [ebp+var_1818] +
push eax  +
push esi  +
lea eax [ebp+var_804] +
push eax  +
mov ecx edi +
call sub_1006E33  +
mov ebx eax +
test ebx ebx +
jge loc_100882B  +
and eax 0FFFFh +
cmp eax 2 +
jz loc_1008792  +
mov eax off_100D000 +
cmp eax offset off_100D000 +
jz loc_1008744  +
test byte ptr [eax+1Ch] 8 +
jz loc_1008744  +
push ebx  +
push offset dword_1001BDC  +
push 10h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1006C61  +
mov ecx [ebp+var_1808] +
add ecx 0FFFFFFF0h +
call sub_100425C  +
lea ecx [ebp+var_1824] +
call sub_1003630  +
mov ecx [ebp+var_180C] +
add ecx 0FFFFFFF0h +
call sub_100425C  +
lea ecx [ebp+var_1830] +
call sub_1003630  +
lea ecx [ebp+var_1818] +
call sub_1003630  +
mov eax ebx +
pop ebx  +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_100611F  +
leave   +
retn   +
lea eax [ebp+Type] +
push eax  +
push esi  +
lea eax [ebp+var_804] +
push eax  +
call sub_100701A  +
lea eax [ebp+var_1818] +
push eax  +
push esi  +
lea eax [ebp+var_804] +
push eax  +
mov ecx edi +
call sub_1007F50  +
mov esi eax +
test esi esi +
jge loc_100882B  +
mov eax off_100D000 +
cmp eax offset off_100D000 +
jz loc_10087E7  +
test byte ptr [eax+1Ch] 8 +
jz loc_10087E7  +
push esi  +
push offset dword_1001BDC  +
push 11h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1006C61  +
mov ecx [ebp+var_1808] +
add ecx 0FFFFFFF0h +
call sub_100425C  +
lea ecx [ebp+var_1824] +
call sub_1003630  +
mov ecx [ebp+var_180C] +
add ecx 0FFFFFFF0h +
call sub_100425C  +
lea ecx [ebp+var_1830] +
call sub_1003630  +
lea ecx [ebp+var_1818] +
call sub_1003630  +
mov eax esi +
jmp loc_1008783  +
mov ecx [ebp+var_1808] +
add ecx 0FFFFFFF0h +
call sub_100425C  +
lea ecx [ebp+var_1824] +
call sub_1003630  +
jmp loc_100885C  +
lea eax [ebp+var_1818] +
push eax  +
push esi  +
lea eax [ebp+var_804] +
push eax  +
mov ecx edi +
call sub_1007E9B  +
lea eax [ebp+var_804] +
push eax  +
lea ecx [ebp+var_1808] +
call sub_1007A42  +
push edi  +
lea eax [ebp+var_1808] +
push eax  +
mov ecx edi +
call sub_10084C3  +
mov ecx [ebp+var_1808] +
add ecx 0FFFFFFF0h +
call sub_100425C  +
xor esi esi +
jmp loc_1008800  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov esi ecx +
test edi edi +
jnz loc_10088B6  +
mov eax 80070057h +
jmp loc_1008A38  +
call sub_10085B5  +
mov [ebp+arg_0] eax +
test eax eax +
jl loc_1008A38  +
push ebx  +
push offset aSystemsetting  +
mov ecx edi +
call sub_1008F1F  +
push eax  +
call sub_100484E  +
test al al +
jz loc_100896C  +
mov ecx edi +
call sub_1008F0D  +
push dword ptr [eax]  +
call ds:_wtoi  +
pop ecx  +
mov ebx eax +
call sub_100949D  +
cmp ebx eax +
jnb loc_1008A34  +
push dword ptr [esi+4Ch]  +
mov ecx edi +
push [ebp+arg_4]  +
push ebx  +
call sub_1008EFC  +
push eax  +
call sub_10095F0  +
mov [ebp+arg_0] eax +
test eax eax +
jl loc_1008A34  +
mov ecx esi +
call sub_1006D00  +
test eax eax +
jz loc_1008955  +
mov ecx edi +
mov [ebp+var_4] 1 +
call sub_1008EFC  +
push eax  +
lea ecx [ebp+arg_4] +
call sub_10048A3  +
push 0  +
push [ebp+arg_4]  +
mov ecx esi +
call sub_10047EB  +
test eax eax +
jz loc_1008955  +
mov bl 1 +
jmp loc_1008957  +
xor bl bl +
test byte ptr [ebp+var_4] 1 +
jz loc_1008968  +
mov ecx [ebp+arg_4] +
add ecx 0FFFFFFF0h +
call sub_100425C  +
test bl bl +
jmp loc_10089D3  +
mov ecx esi +
call sub_1006D00  +
test eax eax +
jz loc_1008990  +
mov ecx esi +
call sub_1006DC4  +
test eax eax +
jnz loc_1008990  +
mov ecx esi +
call sub_1007D14  +
xor eax eax +
jmp loc_1008A37  +
mov ecx edi +
call sub_1008F0D  +
mov ebx [eax] +
test ebx ebx +
jnz loc_10089A7  +
mov eax 80004005h +
jmp loc_1008A37  +
mov ecx edi +
call sub_1008F16  +
mov eax [eax] +
push 5  +
push eax  +
push ebx  +
mov ecx esi +
call sub_100734B  +
mov [ebp+arg_0] eax +
test eax eax +
jl loc_1008A34  +
push edi  +
mov ecx esi +
call sub_1007136  +
mov ecx esi +
call sub_1006DC4  +
test eax eax +
jz loc_1008A34  +
mov ecx edi +
call sub_1008EFC  +
push eax  +
lea ecx [ebp+arg_4] +
call sub_10048A3  +
push 0  +
push [ebp+arg_4]  +
lea ecx [esi+18h] +
call sub_10047EB  +
mov ecx [ebp+arg_4] +
mov ebx eax +
neg ebx  +
sbb bl bl +
add ecx 0FFFFFFF0h +
inc bl  +
call sub_100425C  +
test bl bl +
jz loc_1008A2D  +
mov ecx edi +
call sub_1008EFC  +
push eax  +
lea ecx [ebp+arg_4] +
call sub_10048A3  +
mov edi [ebp+arg_4] +
push edi  +
lea ecx [esi+18h] +
call sub_100844C  +
lea ecx [edi-10h] +
call sub_100425C  +
mov ecx esi +
call sub_10082C2  +
mov eax [ebp+arg_0] +
pop ebx  +
pop edi  +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov esi ecx +
test edi edi +
jnz loc_1008A5D  +
mov eax 80070057h +
jmp loc_1008AE3  +
call sub_10085B5  +
mov [ebp+arg_0] eax +
test eax eax +
jl loc_1008AE3  +
push offset aSystemsetting  +
mov ecx edi +
call sub_1008F1F  +
push eax  +
call sub_100484E  +
test al al +
jz loc_1008AB2  +
push ebx  +
mov ecx edi +
call sub_1008F0D  +
push dword ptr [eax]  +
call ds:_wtoi  +
pop ecx  +
mov ebx eax +
call sub_100949D  +
cmp ebx eax +
jnb loc_1008AB1  +
push dword ptr [esi+4Ch]  +
mov ecx edi +
push 0  +
push ebx  +
call sub_1008EFC  +
push eax  +
call sub_1009732  +
mov [ebp+arg_0] eax +
pop ebx  +
cmp [ebp+arg_0] 0 +
jl loc_1008AE0  +
mov ecx edi +
call sub_1008EFC  +
push 0  +
push dword ptr [eax]  +
lea edi [esi+18h] +
mov ecx edi +
call sub_10047EB  +
test eax eax +
jz loc_1008AD9  +
push eax  +
mov ecx edi +
call sub_10078FB  +
mov ecx esi +
call sub_10082C2  +
mov eax [ebp+arg_0] +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_10085B5  +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+arg_0]  +
call sub_1008897  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 3Ch +
push ebx  +
push esi  +
push edi  +
lea eax [ebp+var_4] +
push eax  +
mov esi ecx +
xor ebx ebx +
push offset aStartlistSynch  +
lea ecx [ebp+var_18] +
mov [ebp+lpData] ebx +
call sub_1003330  +
mov ecx esi +
call sub_10085B5  +
cmp eax ebx +
mov [ebp+var_4] eax +
jge loc_1008B5B  +
mov esi eax +
lea ecx [ebp+var_18] +
call sub_1003374  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn   +
mov [ebp+var_4] 1 +
cmp [esi+38h] ebx +
jz loc_1008BD3  +
cmp [esi+50h] ebx +
jz loc_1008BD3  +
mov eax [esi+30h] +
mov [ebp+var_8] eax +
cmp eax ebx +
jz loc_1008BD3  +
lea eax [ebp+var_8] +
push eax  +
lea ecx [esi+30h] +
call sub_1006FC3  +
mov edi eax +
push dword ptr [edi]  +
call sub_1009359  +
cmp eax ebx +
jz loc_1008D62  +
push eax  +
mov ecx esi +
call sub_1008B01  +
cmp eax ebx +
mov [ebp+var_4] eax +
jge loc_1008BCB  +
mov eax off_100D000 +
cmp eax offset off_100D000 +
jz loc_1008BCB  +
test byte ptr [eax+1Ch] 8 +
jz loc_1008BCB  +
push [ebp+var_4]  +
push dword ptr [edi]  +
push offset dword_1001BDC  +
push 0Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1006C8D  +
mov [ebp+var_4] ebx +
cmp [ebp+var_8] ebx +
jnz loc_1008B76  +
mov eax [esi] +
mov [ebp+var_8] eax +
cmp eax ebx +
jz loc_1008C4C  +
lea eax [ebp+var_8] +
push eax  +
mov ecx esi +
call sub_1006FC3  +
mov ebx eax +
mov edi [ebx] +
push 0  +
push edi  +
lea ecx [esi+18h] +
call sub_10047EB  +
test eax eax +
jnz loc_1008C44  +
push edi  +
call sub_1009359  +
test eax eax +
jz loc_1008D62  +
push eax  +
mov ecx esi +
call sub_1008B01  +
mov [ebp+var_4] eax +
test eax eax +
jge loc_1008C40  +
mov eax off_100D000 +
cmp eax offset off_100D000 +
jz loc_1008C40  +
test byte ptr [eax+1Ch] 8 +
jz loc_1008C40  +
push [ebp+var_4]  +
push dword ptr [ebx]  +
push offset dword_1001BDC  +
push 0Dh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1006C8D  +
and [ebp+var_4] 0 +
cmp [ebp+var_8] 0 +
jnz loc_1008BDC  +
xor ebx ebx +
cmp [ebp+var_4] ebx +
jnz loc_1008C58  +
mov ecx esi +
call sub_1007B8E  +
cmp [esi+50h] ebx +
jz loc_1008DB6  +
push 0Ah  +
lea ecx [ebp+var_3C] +
call sub_1006F52  +
push esi  +
lea ecx [ebp+var_3C] +
call sub_100847B  +
lea edi [esi+30h] +
mov eax [edi] +
mov [ebp+var_8] eax +
cmp eax ebx +
jz loc_1008CAE  +
lea eax [ebp+var_8] +
push eax  +
mov ecx edi +
call sub_1006FC3  +
mov eax [eax] +
push ebx  +
push eax  +
lea ecx [ebp+var_3C] +
mov [ebp+var_10] eax +
call sub_10047EB  +
test eax eax +
jnz loc_1008CA9  +
push [ebp+var_10]  +
lea ecx [ebp+var_3C] +
call sub_100844C  +
cmp [ebp+var_8] ebx +
jnz loc_1008C80  +
lea eax [ebp+var_10] +
push eax  +
mov ecx esi +
mov [ebp+var_24] ebx +
mov [ebp+var_20] ebx +
mov [ebp+var_1C] ebx +
call sub_1007CA9  +
mov eax [eax] +
push 20006h  +
push eax  +
push 80000002h  +
lea ecx [ebp+var_24] +
call sub_100364E  +
mov ecx [ebp+var_10] +
add ecx 0FFFFFFF0h +
mov edi eax +
call sub_100425C  +
cmp edi ebx +
jz loc_1008D6C  +
mov eax off_100D000 +
cmp eax offset off_100D000 +
jz loc_1008D2A  +
test byte ptr [eax+1Ch] 8 +
jz loc_1008D2A  +
lea eax [ebp+var_10] +
push eax  +
mov ecx esi +
mov [ebp+lpData] 1 +
call sub_1007CA9  +
push edi  +
push dword ptr [eax]  +
mov eax off_100D000 +
push offset dword_1001BDC  +
push 0Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1006C8D  +
test byte ptr [ebp+lpData] 1 +
jz loc_1008D3B  +
mov ecx [ebp+var_10] +
add ecx 0FFFFFFF0h +
call sub_100425C  +
cmp edi ebx +
jle loc_1008D4B  +
and edi 0FFFFh +
or edi 80070000h +
lea ecx [ebp+var_24] +
mov esi edi +
call sub_1003630  +
lea ecx [ebp+var_3C] +
call loc_1006F78  +
jmp loc_1008B4C  +
mov esi 8007000Eh +
jmp loc_1008B4C  +
push offset dword_100D340  +
lea ecx [ebp+lpData] +
call sub_100469E  +
lea eax [ebp+var_3C] +
push eax  +
lea eax [ebp+lpData] +
push eax  +
mov ecx esi +
call sub_10079E8  +
mov esi [ebp+lpData] +
push 1  +
push esi  +
push offset aConfiguratio_0  +
lea ecx [ebp+var_24] +
call sub_1003762  +
lea ecx [esi-10h] +
mov [ebp+var_4] ebx +
call sub_100425C  +
lea ecx [ebp+var_24] +
call sub_1003630  +
lea ecx [ebp+var_3C] +
call loc_1006F78  +
mov esi [ebp+var_4] +
jmp loc_1008B4C  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push esi  +
mov esi ecx +
call sub_10085B5  +
test eax eax +
jl loc_1008ECB  +
mov eax [esi] +
and [ebp+var_4] 0 +
push ebx  +
push edi  +
mov [ebp+var_8] eax +
test eax eax +
jz loc_1008E52  +
lea eax [ebp+var_8] +
push eax  +
mov ecx esi +
call sub_1006FC3  +
push dword ptr [eax]  +
call sub_1009359  +
mov edi eax +
test edi edi +
jz loc_1008ECE  +
push edi  +
mov ecx esi +
call sub_1008B01  +
mov ebx eax +
test ebx ebx +
jge loc_1008E4C  +
mov eax off_100D000 +
cmp eax offset off_100D000 +
jz loc_1008E49  +
test byte ptr [eax+1Ch] 8 +
jz loc_1008E49  +
mov ecx edi +
call sub_1008EFC  +
push [ebp+var_4]  +
push dword ptr [eax]  +
mov eax off_100D000 +
push offset dword_1001BDC  +
push 0Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1006C8D  +
mov [ebp+var_4] ebx +
cmp [ebp+var_8] 0 +
jnz loc_1008DEA  +
lea ebx [esi+30h] +
mov eax [ebx] +
mov [ebp+var_8] eax +
test eax eax +
jz loc_1008EC6  +
lea eax [ebp+var_8] +
push eax  +
mov ecx ebx +
call sub_1006FC3  +
push dword ptr [eax]  +
call sub_1009359  +
mov edi eax +
test edi edi +
jz loc_1008ECE  +
push edi  +
mov ecx esi +
call sub_1008B01  +
mov [ebp+var_C] eax +
test eax eax +
jge loc_1008EC0  +
mov eax off_100D000 +
cmp eax offset off_100D000 +
jz loc_1008EBA  +
test byte ptr [eax+1Ch] 8 +
jz loc_1008EBA  +
mov ecx edi +
call sub_1008EFC  +
push [ebp+var_4]  +
push dword ptr [eax]  +
mov eax off_100D000 +
push offset dword_1001BDC  +
push 0Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_1006C8D  +
mov eax [ebp+var_C] +
mov [ebp+var_4] eax +
cmp [ebp+var_8] 0 +
jnz loc_1008E5E  +
mov eax [ebp+var_4] +
pop edi  +
pop ebx  +
pop esi  +
leave   +
retn   +
mov eax 8007000Eh +
jmp loc_1008EC9  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call _wcslwr_s  +
neg eax  +
sbb eax eax +
pop ecx  +
not eax  +
and eax [ebp+arg_0] +
pop ecx  +
pop ebp  +
retn   +
***
retn   +
***
retn   +
***
retn   +
***
retn   +
***
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax 2230h +
call __alloca_probe  +
mov eax dword_100D004 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push edi  +
mov [ebp+var_22C] eax +
mov eax [ebp+arg_4] +
mov [ebp+var_220] eax +
xor edi edi +
mov [eax] edi +
lea eax [ebp+var_210] +
push eax  +
push 2000h  +
lea eax [ebp+var_2230] +
push eax  +
call K32EnumProcesses  +
test eax eax +
jz loc_1009098  +
shr [ebp+var_210] 2 +
mov eax 800h +
cmp [ebp+var_210] eax +
jbe loc_1008F92  +
mov [ebp+var_210] eax +
push ebx  +
call ds:GetCurrentProcessId  +
mov ebx ds:ProcessIdToSessionId +
lea ecx [ebp+var_214] +
push ecx  +
push eax  +
mov [ebp+var_228] eax +
mov [ebp+var_214] edi +
call ebx  +
test eax eax +
jz loc_1009097  +
mov [ebp+var_218] edi +
cmp [ebp+var_210] edi +
jbe loc_1009091  +
push esi  +
lea eax [ebp+var_224] +
push eax  +
lea esi [ebp+edi*4+var_2230] +
push dword ptr [esi]  +
call ebx  +
test eax eax +
jz loc_100906C  +
mov eax [ebp+var_224] +
cmp eax [ebp+var_214] +
jnz loc_100906C  +
mov esi [esi] +
cmp [ebp+var_228] esi +
jz loc_100906C  +
push esi  +
push 0  +
push 410h  +
call ds:OpenProcess  +
mov esi eax +
test esi esi +
jz loc_100906C  +
lea eax [ebp+var_230] +
push eax  +
push 4  +
lea eax [ebp+var_21C] +
push eax  +
push esi  +
call K32EnumProcessModules  +
test eax eax +
jz loc_1009065  +
push 104h  +
lea eax [ebp+var_20C] +
push eax  +
push [ebp+var_21C]  +
push esi  +
call K32GetModuleBaseNameW  +
test eax eax +
jz loc_1009065  +
push [ebp+var_22C]  +
lea eax [ebp+var_20C] +
push eax  +
call ds:_wcsicmp  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_100907B  +
push esi  +
call ds:CloseHandle  +
inc edi  +
cmp edi [ebp+var_210] +
jb loc_1008FD0  +
jmp loc_1009090  +
mov eax [ebp+var_220] +
mov [eax] esi +
mov eax [ebp+edi*4+var_2230] +
mov [ebp+var_218] eax +
pop esi  +
mov eax [ebp+var_218] +
pop ebx  +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop edi  +
call sub_100611F  +
leave   +
retn 8  +
***
mov edi edi +
push esi  +
push edi  +
mov esi ecx +
mov ecx [esi+1Ch] +
push 10h  +
pop edi  +
sub ecx edi +
call sub_100425C  +
mov ecx [esi+18h] +
sub ecx edi +
call sub_100425C  +
mov ecx [esi+14h] +
sub ecx edi +
call sub_100425C  +
mov ecx [esi+10h] +
sub ecx edi +
call sub_100425C  +
mov ecx [esi+0Ch] +
sub ecx edi +
call sub_100425C  +
mov ecx [esi+8] +
sub ecx edi +
call sub_100425C  +
mov ecx [esi+4] +
sub ecx edi +
call sub_100425C  +
mov ecx [esi] +
sub ecx edi +
pop edi  +
pop esi  +
jmp sub_100425C  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
push edi  +
mov esi ecx +
push offset aSystemsetting  +
lea eax [esi+14h] +
push eax  +
xor ebx ebx +
call sub_100484E  +
test al al +
jz loc_100914A  +
push dword ptr [esi+0Ch]  +
call ds:_wtoi  +
pop ecx  +
mov edi eax +
call sub_100949D  +
cmp edi eax +
jnb loc_1009172  +
push edi  +
push esi  +
call sub_1009585  +
mov ebx eax +
jmp loc_1009172  +
mov eax [esi+1Ch] +
cmp [eax-0Ch] ebx +
jnz loc_1009156  +
xor eax eax +
jmp loc_1009174  +
lea ecx [ebp+hObject] +
push ecx  +
push eax  +
mov ecx esi +
call sub_1008F28  +
test eax eax +
jz loc_1009172  +
push [ebp+hObject]  +
call ds:CloseHandle  +
xor ebx ebx +
inc ebx  +
mov eax ebx +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
mov ecx [esi] +
test ecx ecx +
jz loc_1009190  +
push 1  +
call sub_100678F  +
and dword ptr [esi] 0 +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
push edi  +
mov edi ecx +
mov eax [edi] +
mov esi [eax-0Ch] +
push esi  +
call sub_1004B12  +
lea ecx [esi+1] +
push ecx  +
push eax  +
call sub_1008EDA  +
pop ecx  +
pop ecx  +
push esi  +
mov ecx edi +
call loc_100477B  +
mov eax edi +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1004827  +
lea ecx [esi+4] +
call sub_1004827  +
lea ecx [esi+8] +
call sub_1004827  +
lea ecx [esi+0Ch] +
call sub_1004827  +
lea ecx [esi+10h] +
call sub_1004827  +
lea ecx [esi+14h] +
call sub_1004827  +
lea ecx [esi+18h] +
call sub_1004827  +
lea ecx [esi+1Ch] +
call sub_1004827  +
push [ebp+arg_0]  +
mov ecx esi +
call sub_1007948  +
mov ecx esi +
call sub_100919A  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 810h +
mov eax dword_100D004 +
xor eax ebp +
mov [ebp+var_4] eax +
mov ecx [ebp+arg_8] +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov edi [ebp+arg_4] +
push offset dword_1001E50  +
mov [ebp+var_810] edi +
mov [ebp+var_80C] ecx +
call sub_10077A8  +
and [ebp+Type] 0 +
lea eax [ebp+Type] +
push eax  +
push 0  +
push edi  +
mov ecx esi +
call sub_10036C9  +
test eax eax +
jnz loc_1009340  +
mov eax [ebp+Type] +
test eax eax +
jz loc_1009340  +
xor ecx ecx +
push 2  +
pop edx  +
mul  edx +
seto cl  +
neg ecx  +
or ecx eax +
push ecx  +
call ??_U@YAPAXI@Z  +
mov ebx eax +
xor eax eax +
pop ecx  +
test ebx ebx +
jz loc_1009343  +
mov [ebx] ax +
lea eax [ebp+Type] +
push eax  +
push ebx  +
push edi  +
mov ecx esi +
call sub_10036C9  +
mov edi 400h +
test eax eax +
jnz loc_10092F0  +
cmp [ebp+Type] eax +
jbe loc_10092F0  +
cmp [ebp+Type] edi +
jbe loc_10092E4  +
mov [ebx+7FEh] ax +
mov ecx [ebp+var_80C] +
push ebx  +
call sub_1007948  +
cmp word ptr [ebx] 40h +
jnz loc_1009339  +
mov esi [esi] +
push 0  +
push 1  +
push 0  +
push edi  +
lea eax [ebp+var_804] +
push eax  +
push [ebp+var_810]  +
push esi  +
call ds:RegLoadMUIStringW  +
mov ecx [ebp+var_80C] +
test eax eax +
jnz loc_100932F  +
mov [ebp+var_6] ax +
lea eax [ebp+var_804] +
push eax  +
call sub_1007819  +
jmp loc_1009339  +
push offset dword_1001E50  +
call sub_10077A8  +
push ebx  +
call ??_V@YAXPAX@Z  +
pop ecx  +
xor eax eax +
inc eax  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100611F  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push edi  +
push offset aSoftwareMicr_2  +
lea ecx [ebp+lpSubKey] +
call sub_1007A42  +
push [ebp+arg_0]  +
lea ecx [ebp+lpSubKey] +
call sub_1007873  +
mov edi [ebp+lpSubKey] +
and [ebp+var_10] 0 +
and [ebp+var_C] 0 +
and [ebp+var_8] 0 +
push 20019h  +
push edi  +
push 80000002h  +
lea ecx [ebp+var_10] +
call sub_100364E  +
test eax eax +
jz loc_10093B7  +
lea ecx [ebp+var_10] +
call sub_1003630  +
lea ecx [edi-10h] +
call sub_100425C  +
xor eax eax +
pop edi  +
leave   +
retn 4  +
push esi  +
push 20h  +
call ??2@YAPAXI@Z  +
pop ecx  +
test eax eax +
jz loc_10093D2  +
push [ebp+arg_0]  +
mov ecx eax +
call sub_10091C9  +
mov esi eax +
jmp loc_10093D4  +
xor esi esi +
mov [ebp+arg_0] esi +
test esi esi +
jnz loc_10093F8  +
lea ecx [ebp+arg_0] +
call sub_100917E  +
lea ecx [ebp+var_10] +
call sub_1003630  +
lea ecx [edi-10h] +
call sub_100425C  +
mov eax esi +
pop esi  +
jmp loc_10093B2  +
lea eax [esi+4] +
push eax  +
push offset aApplicationnam  +
lea eax [ebp+var_10] +
push eax  +
call sub_100922B  +
lea eax [esi+8] +
push eax  +
push offset aDescription  +
lea eax [ebp+var_10] +
push eax  +
call sub_100922B  +
lea eax [esi+0Ch] +
push eax  +
push offset aStartexe  +
lea eax [ebp+var_10] +
push eax  +
call sub_100922B  +
lea eax [esi+10h] +
push eax  +
push offset aStartparams  +
lea eax [ebp+var_10] +
push eax  +
call sub_100922B  +
lea edi [esi+14h] +
push edi  +
push offset aSimpleprofile  +
lea eax [ebp+var_10] +
push eax  +
call sub_100922B  +
lea eax [esi+18h] +
push eax  +
push offset aProfile  +
lea eax [ebp+var_10] +
push eax  +
call sub_100922B  +
lea eax [esi+1Ch] +
push eax  +
push offset aAtexe  +
lea eax [ebp+var_10] +
push eax  +
call sub_100922B  +
push offset aSystemsetting  +
push edi  +
call sub_10072EE  +
test al al +
jz loc_100948C  +
mov ecx edi +
call sub_100919A  +
and [ebp+arg_0] 0 +
mov edi [ebp+lpSubKey] +
jmp loc_10093DB  +
***
pop eax  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1Ch +
push ebx  +
mov ebx [ebp+pvParam] +
push esi  +
mov esi ds:SystemParametersInfoW +
push edi  +
mov [ebp+uiAction] 1003h +
mov [ebp+var_18] 1005h +
mov [ebp+var_14] 1007h +
mov [ebp+var_10] 1015h +
mov [ebp+var_C] 1017h +
xor edi edi +
push 3  +
push ebx  +
push 0  +
push [ebp+edi*4+uiAction]  +
call esi  +
test eax eax +
jz loc_1009517  +
inc edi  +
cmp edi 5 +
jb loc_10094DF  +
push 3  +
lea eax [ebp+var_8] +
push eax  +
push 0  +
push 49h  +
mov [ebp+var_8] 8 +
mov [ebp+var_4] ebx +
call esi  +
test eax eax +
jz loc_1009517  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
call ds:GetLastError  +
test eax eax +
jle loc_1009510  +
and eax 0FFFFh +
or eax 80070000h +
jmp loc_1009510  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [eax] +
mov eax [ebp+arg_4] +
imul eax eax +
mov eax off_100D0B8[eax] +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_100956E  +
test dx dx +
jz loc_100956A  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_100956E  +
add eax 4 +
add ecx 4 +
test dx dx +
jnz loc_1009548  +
xor eax eax +
jmp loc_1009573  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
xor ecx ecx +
test eax eax +
setz cl  +
mov eax ecx +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 40h +
mov eax dword_100D004 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
mov esi [ebp+arg_4] +
push esi  +
push [ebp+arg_0]  +
call sub_1009532  +
test eax eax +
jnz loc_10095AC  +
xor eax eax +
jmp loc_10095DC  +
imul esi esi +
add esi offset off_100D0B8 +
mov eax [esi+0Ch] +
dec eax  +
dec eax  +
jnz loc_10095A8  +
mov eax [esi+10h] +
push 0  +
lea ecx [ebp+pvParam] +
push ecx  +
push eax  +
push dword ptr [esi+4]  +
mov [ebp+pvParam] eax +
call ds:SystemParametersInfoW  +
test eax eax +
jz loc_10095A8  +
mov eax [ebp+var_3C] +
and eax 1 +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop esi  +
call sub_100611F  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 44h +
mov eax dword_100D004 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
mov ebx [ebp+arg_C] +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
mov edi [ebp+arg_8] +
neg ebx  +
push esi  +
push [ebp+arg_0]  +
sbb ebx ebx +
and ebx 3 +
call sub_1009532  +
test eax eax +
jnz loc_100962C  +
mov eax 80070057h +
jmp loc_10096E0  +
imul esi esi +
add esi offset off_100D0B8 +
mov eax [esi] +
mov ecx offset aAnimations +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_1009662  +
test dx dx +
jz loc_100965E  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_1009662  +
add eax 4 +
add ecx 4 +
test dx dx +
jnz loc_100963C  +
xor eax eax +
jmp loc_1009667  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
test eax eax +
jnz loc_1009676  +
push dword ptr [edi]  +
call sub_10094A6  +
test eax eax +
jl loc_10096E0  +
mov eax [esi+0Ch] +
sub eax 0 +
jz loc_1009703  +
dec eax  +
jz loc_10096FA  +
dec eax  +
jnz loc_10096DE  +
mov eax [esi+10h] +
test edi edi +
jnz loc_10096F1  +
push edi  +
mov edi ds:SystemParametersInfoW +
lea ecx [ebp+pvParam] +
push ecx  +
push eax  +
push dword ptr [esi+4]  +
mov [ebp+pvParam] eax +
call edi  +
test eax eax +
jz loc_1009717  +
test byte ptr [ebp+var_3C] 1 +
jnz loc_10096DE  +
or [ebp+var_3C] 1 +
push ebx  +
lea eax [ebp+pvParam] +
push eax  +
push dword ptr [esi+10h]  +
push dword ptr [esi+8]  +
call edi  +
test ebx ebx +
jnz loc_10096DE  +
lea eax [ebp+dwResult] +
push eax  +
push 1388h  +
push 2  +
push ebx  +
push dword ptr [esi+8]  +
push 1Ah  +
push 0FFFFh  +
call ds:SendMessageTimeoutW  +
xor eax eax +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100611F  +
leave   +
retn 10h  +
push ebx  +
push edi  +
mov [edi] eax +
push dword ptr [esi+10h]  +
jmp loc_100970A  +
mov edi [edi] +
push ebx  +
push edi  +
push dword ptr [esi+10h]  +
jmp loc_100970A  +
mov edi [edi] +
push ebx  +
push dword ptr [esi+14h]  +
push edi  +
push dword ptr [esi+8]  +
call ds:SystemParametersInfoW  +
test eax eax +
jnz loc_10096DE  +
call ds:GetLastError  +
test eax eax +
jle loc_10096E0  +
and eax 0FFFFh +
or eax 80070000h +
jmp loc_10096E0  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 44h +
mov eax dword_100D004 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
mov ebx [ebp+arg_8] +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
mov edi [ebp+arg_C] +
neg edi  +
push esi  +
push [ebp+arg_0]  +
sbb edi edi +
and edi 3 +
call sub_1009532  +
test eax eax +
jnz loc_100976E  +
mov eax 80070057h +
jmp loc_1009806  +
imul esi esi +
add esi offset off_100D0B8 +
mov eax [esi+0Ch] +
dec eax  +
dec eax  +
jnz loc_1009804  +
mov eax [esi+10h] +
test ebx ebx +
jnz loc_10097D0  +
push ebx  +
mov ebx ds:SystemParametersInfoW +
lea ecx [ebp+pvParam] +
push ecx  +
push eax  +
push dword ptr [esi+4]  +
mov [ebp+pvParam] eax +
call ebx  +
test eax eax +
jnz loc_10097B7  +
call ds:GetLastError  +
test eax eax +
jle loc_1009806  +
and eax 0FFFFh +
or eax 80070000h +
jmp loc_1009806  +
test byte ptr [ebp+var_3C] 1 +
jz loc_1009804  +
and [ebp+var_3C] 0FFFFFFFEh +
push edi  +
lea eax [ebp+pvParam] +
push eax  +
push dword ptr [esi+10h]  +
push dword ptr [esi+8]  +
call ebx  +
jmp loc_10097E4  +
push edi  +
push ebx  +
mov [ebx] eax +
push dword ptr [esi+10h]  +
push dword ptr [esi+8]  +
call ds:SystemParametersInfoW  +
test eax eax +
jz loc_10097A1  +
test edi edi +
jnz loc_1009804  +
lea eax [ebp+dwResult] +
push eax  +
push 1388h  +
push 2  +
push edi  +
push dword ptr [esi+8]  +
push 1Ah  +
push 0FFFFh  +
call ds:SendMessageTimeoutW  +
xor eax eax +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100611F  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
cmp eax [ecx+4] +
jb loc_1009833  +
push 80070057h  +
call loc_1003608  +
mov ecx [ecx] +
lea eax [ecx+eax*4] +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_8] +
shl eax 2 +
push eax  +
push [ebp+arg_4]  +
push eax  +
push [ebp+arg_0]  +
call sub_1005A9E  +
add esp 10h +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
mov edi ecx +
mov eax [edi+8] +
test eax eax +
jz loc_10098B3  +
push esi  +
xor esi esi +
test eax eax +
jbe loc_10098B2  +
push ebx  +
lea ebx [edi+4] +
push esi  +
mov ecx ebx +
call sub_100981C  +
mov eax [eax] +
cmp eax [ebp+arg_0] +
jnz loc_10098AB  +
push esi  +
mov ecx ebx +
call sub_100981C  +
and dword ptr [eax] 0 +
inc esi  +
cmp esi [edi+8] +
jb loc_1009891  +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn 4  +
***
mov eax [ecx] +
test eax eax +
jz locret_10098CB  +
push eax  +
call ds:__imp_free  +
pop ecx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi ecx +
mov edx [esi+8] +
push edi  +
mov edi [ebp+arg_0] +
cmp edi edx +
jbe loc_1009960  +
cmp dword ptr [esi] 0 +
mov eax [esi+0Ch] +
jnz loc_100990D  +
cmp eax edi +
jbe loc_10098F3  +
mov edi eax +
push 4  +
push edi  +
call ds:calloc  +
pop ecx  +
pop ecx  +
mov [esi] eax +
test eax eax +
jnz loc_1009908  +
xor al al +
jmp loc_1009962  +
mov [esi+8] edi +
jmp loc_1009960  +
test eax eax +
jnz loc_100992C  +
mov eax [esi+4] +
shr eax 3 +
cmp eax 4 +
jnb loc_1009921  +
push 4  +
pop eax  +
jmp loc_100992C  +
mov ecx 400h +
cmp eax ecx +
jbe loc_100992C  +
mov eax ecx +
add eax edx +
mov ebx eax +
cmp edi eax +
jb loc_1009936  +
mov ebx edi +
push 4  +
push ebx  +
call ds:calloc  +
mov edi eax +
pop ecx  +
pop ecx  +
test edi edi +
jz loc_1009904  +
push dword ptr [esi+4]  +
push dword ptr [esi]  +
push edi  +
call sub_1009841  +
push dword ptr [esi]  +
call ds:__imp_free  +
pop ecx  +
mov [esi] edi +
mov [esi+8] ebx +
mov al 1 +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
call __EH_prolog3  +
and dword ptr [ebp-10h] 0 +
and dword ptr [ebp-4] 0 +
lea eax [ebp-10h] +
push eax  +
push offset stru_10021B0  +
push 17h  +
push 0  +
push offset stru_1002898  +
call ds:CoCreateInstance  +
mov edi eax +
test edi edi +
jl loc_10099C1  +
push dword ptr [ebp+10h]  +
mov eax [ebp-10h] +
push dword ptr [ebp+8]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+3Ch]  +
mov edi eax +
test edi edi +
jl loc_10099C1  +
mov eax [ebp-10h] +
mov ecx [ebp+0Ch] +
and dword ptr [ebp-10h] 0 +
mov [ecx] eax +
mov eax [ebp-10h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
test eax eax +
jz loc_10099D2  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax edi +
call __EH_epilog3  +
retn 0Ch  +
***
call __EH_prolog3  +
and dword ptr [ebp-10h] 0 +
and dword ptr [ebp-4] 0 +
push 0  +
lea eax [ebp-10h] +
push eax  +
push dword ptr [ebp+8]  +
call sub_100996E  +
mov esi [ebp-10h] +
mov ebx eax +
test ebx ebx +
jl loc_1009A1D  +
push dword ptr [ebp+14h]  +
mov eax [esi] +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push esi  +
call dword ptr [eax+48h]  +
mov ebx eax +
or dword ptr [ebp-4] 0FFFFFFFFh +
test esi esi +
jz loc_1009A2B  +
mov eax [esi] +
push esi  +
call dword ptr [eax+8]  +
mov eax ebx +
call __EH_epilog3  +
retn 10h  +
***
call __EH_prolog3_GS  +
mov esi ecx +
xor ebx ebx +
mov [ebp-68h] esi +
cmp [esi+1Ch] ebx +
jz loc_1009A5C  +
mov eax 80004005h +
jmp loc_1009C27  +
add esi 18h +
cmp [esi] ebx +
jnz loc_1009C25  +
push esi  +
push offset stru_10023F8  +
xor edi edi +
inc edi  +
push edi  +
push ebx  +
push offset stru_1002918  +
call ds:CoCreateInstance  +
cmp eax ebx +
jl loc_1009C27  +
call ds:GetThreadUILanguage  +
movzx eax ax +
push eax  +
push offset aLanguageX  +
lea eax [ebp-50h] +
push 20h  +
push eax  +
call sub_10038FA  +
add esp 10h +
cmp eax ebx +
jl loc_1009C27  +
mov [ebp-54h] ebx +
mov eax [esi] +
mov ecx [eax] +
lea edx [ebp-54h] +
push edx  +
push eax  +
mov [ebp-4] ebx +
call dword ptr [ecx+4Ch]  +
mov [ebp-5Ch] eax +
cmp eax ebx +
mov eax [ebp-54h] +
jge loc_1009ADC  +
or dword ptr [ebp-4] 0FFFFFFFFh +
cmp eax ebx +
jz loc_1009AD4  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-5Ch] +
jmp loc_1009C27  +
lea edx [ebp-64h] +
push edx  +
lea edx [ebp-50h] +
push edx  +
mov [ebp-64h] edi +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+60h]  +
cmp eax ebx +
mov [ebp-5Ch] eax +
jge loc_1009AF9  +
mov eax [ebp-54h] +
jmp loc_1009AC6  +
cmp [ebp-64h] ebx +
jnz loc_1009C14  +
mov [ebp-58h] ebx +
lea eax [ebp-58h] +
push eax  +
push ebx  +
lea eax [ebp-50h] +
push eax  +
push offset aHkey_local_mac  +
mov byte ptr [ebp-4] 1 +
call sub_10099E1  +
mov [ebp-5Ch] eax +
cmp eax ebx +
mov eax [ebp-58h] +
jge loc_1009B35  +
mov [ebp-4] bl +
cmp eax ebx +
jz loc_1009AF4  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_1009AF4  +
mov ecx [eax] +
lea edx [ebp-6Ch] +
push edx  +
push eax  +
call dword ptr [ecx+20h]  +
cmp eax ebx +
mov [ebp-5Ch] eax +
jge loc_1009B4B  +
mov eax [ebp-58h] +
jmp loc_1009B26  +
cmp [ebp-6Ch] ebx +
jnz loc_1009B80  +
mov eax [ebp-68h] +
mov [eax+1Ch] edi +
mov eax [ebp-58h] +
mov [ebp-4] bl +
cmp eax ebx +
jz loc_1009B66  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-54h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
cmp eax ebx +
jz loc_1009A52  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_1009A52  +
mov [ebp-60h] ebx +
mov eax [ebp-58h] +
mov ecx [eax] +
push ebx  +
lea edx [ebp-60h] +
push edx  +
push edi  +
push eax  +
mov byte ptr [ebp-4] 2 +
call dword ptr [ecx+0Ch]  +
mov edi eax +
cmp edi ebx +
jge loc_1009BD2  +
mov eax [ebp-60h] +
mov byte ptr [ebp-4] 1 +
cmp eax ebx +
jz loc_1009BAD  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-58h] +
mov [ebp-4] bl +
cmp eax ebx +
jz loc_1009BBD  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-54h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
cmp eax ebx +
jz loc_1009BCE  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax edi +
jmp loc_1009C27  +
mov eax [esi] +
push dword ptr [ebp-60h]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+48h]  +
mov edi eax +
cmp edi ebx +
jl loc_1009B9C  +
mov esi [esi] +
mov eax [esi] +
push ebx  +
push 12h  +
push offset Data  +
push esi  +
call dword ptr [eax+50h]  +
mov eax [ebp-60h] +
mov byte ptr [ebp-4] 1 +
cmp eax ebx +
jz loc_1009C04  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-58h] +
mov [ebp-4] bl +
cmp eax ebx +
jz loc_1009C14  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-54h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
cmp eax ebx +
jz loc_1009C25  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
xor eax eax +
call sub_100A3A6  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov ecx [ebp+arg_4] +
test ecx ecx +
jl loc_1009C61  +
mov eax [esi] +
cmp ecx [eax-0Ch] +
jge loc_1009C61  +
push dword ptr [ebp+arg_0]  +
lea eax [eax+ecx*2] +
push eax  +
call ds:wcschr  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1009C61  +
sub eax [esi] +
sar eax 1 +
jmp loc_1009C64  +
or eax 0FFFFFFFFh +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
push edi  +
mov edi [esi+4] +
cmp edi [esi+8] +
jb loc_1009C96  +
lea eax [edi+1] +
push eax  +
call sub_10098D1  +
test al al +
jnz loc_1009C96  +
push 8007000Eh  +
call loc_1003608  +
mov eax [esi] +
lea eax [eax+edi*4] +
test eax eax +
jz loc_1009CA6  +
mov ecx [ebp+arg_0] +
mov ecx [ecx] +
mov [eax] ecx +
inc dword ptr [esi+4]  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
push esi  +
push edi  +
mov esi ecx +
cmp eax 0FFFFFFFFh +
jz loc_1009CCA  +
mov [esi+0Ch] eax +
mov edi [ebp+arg_0] +
test edi edi +
jnz loc_1009CEB  +
mov eax [esi] +
test eax eax +
jz loc_1009CE1  +
push eax  +
call ds:__imp_free  +
and [esi] edi +
pop ecx  +
and dword ptr [esi+4] 0 +
and dword ptr [esi+8] 0 +
jmp loc_1009D19  +
cmp edi [esi+8] +
ja loc_1009CF9  +
mov eax [esi+4] +
cmp edi eax +
jbe loc_1009D16  +
jmp loc_1009D06  +
push edi  +
call sub_10098D1  +
test al al +
jz loc_1009D1B  +
mov eax [esi+4] +
mov ecx edi +
sub ecx eax +
push ecx  +
mov ecx [esi] +
lea eax [ecx+eax*4] +
push eax  +
call nullsub_1  +
mov [esi+4] edi +
mov al 1 +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_1002240 +
push edi  +
xor edi edi +
lea ecx [esi+14h] +
mov [esi+4] edi +
mov [esi+8] edi +
mov [esi+0Ch] edi +
mov [esi+10h] edi +
call sub_1004827  +
mov [esi+18h] edi +
mov [esi+1Ch] edi +
pop edi  +
mov eax esi +
pop esi  +
retn   +
***
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
push esi  +
mov esi ecx +
jnz loc_1009D87  +
mov eax 80004005h +
jmp loc_1009DB0  +
call sub_1009A3A  +
test eax eax +
jl loc_1009DB0  +
mov ecx [ebp+arg_0] +
push edi  +
push esi  +
call ds:?AddListener@Element@DirectUI@@QAEJPAUIElementListener@2@@Z  +
mov edi eax +
test edi edi +
jl loc_1009DAD  +
lea eax [ebp+arg_0] +
push eax  +
lea ecx [esi+4] +
call sub_1009C6E  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1009A3A  +
xor ecx ecx +
cmp eax ecx +
jl loc_1009DE6  +
cmp [esi+18h] ecx +
jz loc_1009DE6  +
cmp [ebp+arg_0] ecx +
jz loc_1009DE6  +
mov eax [esi+18h] +
mov edx [eax] +
push ecx  +
push 13h  +
push [ebp+arg_0]  +
push eax  +
call dword ptr [edx+50h]  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
cmp [ebp+arg_0] 0 +
push ebx  +
push esi  +
mov esi ecx +
push edi  +
mov [ebp+var_4] esi +
jge loc_1009E08  +
and [ebp+arg_0] 0 +
mov ebx [ebp+arg_4] +
test ebx ebx +
jge loc_1009E11  +
xor ebx ebx +
push [ebp+arg_0]  +
mov eax [esi] +
mov edi [eax-0Ch] +
push ebx  +
call sub_100727A  +
cmp eax edi +
jle loc_1009E28  +
mov ebx edi +
sub ebx [ebp+arg_0] +
test ebx ebx +
jle loc_1009E64  +
mov ecx [ebp+var_4] +
mov esi edi +
sub esi [ebp+arg_0] +
sub esi ebx +
inc esi  +
call sub_1004AF1  +
mov ecx [ebp+arg_0] +
add esi esi +
lea edx [ecx+ebx] +
push esi  +
lea edx [eax+edx*2] +
push edx  +
lea eax [eax+ecx*2] +
push esi  +
push eax  +
call sub_1005A9E  +
mov ecx [ebp+var_4] +
add esp 10h +
sub edi ebx +
push edi  +
call loc_100477B  +
mov esi [ebp+var_4] +
mov eax [esi] +
mov eax [eax-0Ch] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi+8] +
test eax eax +
jz loc_1009EB5  +
push edi  +
xor edi edi +
test eax eax +
jbe loc_1009EA8  +
push ebx  +
lea ebx [esi+4] +
push edi  +
mov ecx ebx +
call sub_100981C  +
mov ecx [eax] +
test ecx ecx +
jz loc_1009EA1  +
push esi  +
call ds:?RemoveListener@Element@DirectUI@@QAEXPAUIElementListener@2@@Z  +
inc edi  +
cmp edi [esi+8] +
jb loc_1009E8C  +
pop ebx  +
push 0FFFFFFFFh  +
push 0  +
lea ecx [esi+4] +
call sub_1009CB6  +
pop edi  +
pop esi  +
retn   +
***
call __EH_prolog3  +
mov esi ecx +
mov [ebp-10h] esi +
mov dword ptr [esi] offset off_1002240 +
mov dword ptr [ebp-4] 1 +
call sub_1009E75  +
mov eax [esi+18h] +
test eax eax +
jz loc_1009EEC  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov ecx [esi+14h] +
sub ecx 10h +
call sub_100425C  +
lea ecx [esi+4] +
call sub_10098BD  +
call __EH_epilog3  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_1009E75  +
mov eax [esi+18h] +
test eax eax +
jz loc_1009F25  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
and dword ptr [esi+18h] 0 +
pop esi  +
retn   +
***
call __EH_prolog3_catch  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov eax offset loc_1009FD1 +
retn   +
***
jmp ds:?IsRTLReading@Element@DirectUI@@UAE_NXZ  +
***
jmp ds:?IsContentProtected@Element@DirectUI@@UAE_NXZ  +
***
jmp ds:?GetContentStringAsDisplayed@Element@DirectUI@@UAEPBGPAPAVValue@2@@Z  +
***
jmp ds:?OnPropertyChanging@Element@DirectUI@@UAE_NPBUPropertyInfo@2@HPAVValue@2@1@Z  +
***
jmp ds:?OnPropertyChanging@Element@DirectUI@@UAE_NPAUPropertyInfo@2@HPAVValue@2@1@Z  +
***
jmp ds:?OnPropertyChanged@HWNDElement@DirectUI@@UAEXPBUPropertyInfo@2@HPAVValue@2@1@Z  +
***
jmp ds:?OnPropertyChanged@Element@DirectUI@@UAEXPAUPropertyInfo@2@HPAVValue@2@1@Z  +
***
jmp ds:?OnGroupChanged@HWNDElement@DirectUI@@UAEXH_N@Z  +
***
jmp ds:?OnInput@HWNDElement@DirectUI@@UAEXPAUInputEvent@2@@Z  +
***
jmp ds:?OnKeyFocusMoved@Element@DirectUI@@UAEXPAV12@0@Z  +
***
jmp ds:?OnMouseFocusMoved@Element@DirectUI@@UAEXPAV12@0@Z  +
***
jmp ds:?OnDestroy@HWNDElement@DirectUI@@UAEXXZ  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call ds:??1type_info@@UAE@XZ  +
test byte ptr [ebp+8] 1 +
jz loc_100A2C8  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
jmp ds:__CxxFrameHandler3  +
***
lea eax [esp+4+arg_0] +
sub esp [esp+0Ch] +
push ebx  +
push esi  +
push edi  +
mov [eax] ebp +
mov ebp eax +
mov eax dword_100D004 +
xor eax ebp +
push eax  +
push dword ptr [ebp-4]  +
mov dword ptr [ebp-4] 0FFFFFFFFh +
lea eax [ebp-0Ch] +
mov large fs:0 eax +
retn   +
***
lea eax [esp+4+arg_0] +
sub esp [esp+0Ch] +
push ebx  +
push esi  +
push edi  +
mov [eax] ebp +
mov ebp eax +
mov eax dword_100D004 +
xor eax ebp +
push eax  +
mov [ebp-10h] esp +
push dword ptr [ebp-4]  +
mov dword ptr [ebp-4] 0FFFFFFFFh +
lea eax [ebp-0Ch] +
mov large fs:0 eax +
retn   +
***
lea eax [esp+4+arg_0] +
sub esp [esp+0Ch] +
push ebx  +
push esi  +
push edi  +
mov [eax] ebp +
mov ebp eax +
mov eax dword_100D004 +
xor eax ebp +
push eax  +
mov [ebp-10h] eax +
push dword ptr [ebp-4]  +
mov dword ptr [ebp-4] 0FFFFFFFFh +
lea eax [ebp-0Ch] +
mov large fs:0 eax +
retn   +
***
mov ecx [ebp-0Ch] +
mov large fs:0 ecx +
pop ecx  +
pop edi  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
push ecx  +
retn   +
***
mov ecx [ebp-10h] +
xor ecx ebp +
call sub_100611F  +
jmp __EH_epilog3  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_100611F  +
mov eax offset dword_100A5EC +
jmp loc_100A2D4  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-70h] +
xor ecx eax +
call sub_100611F  +
mov ecx [edx-4] +
xor ecx eax +
call sub_100611F  +
mov eax offset dword_100A628 +
jmp loc_100A2D4  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_100611F  +
mov eax offset dword_100A65C +
jmp loc_100A2D4  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-1Ch] +
xor ecx eax +
call sub_100611F  +
mov eax offset dword_100A6BC +
jmp loc_100A2D4  +
***
jmp fword ptr [eax+24h]  +
***
mov ecx offset dword_100D334 +
jmp sub_10057EF  +
***
mov dword_100D340 offset off_1001A70 +
retn   +
***
retn 0B0h  +
***
retf   +
***
retf   +
***
