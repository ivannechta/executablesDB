mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
test ecx ecx +
jz loc_1001285  +
cmp ecx [ebp+arg_0] +
jbe loc_100128A  +
mov eax 80070057h +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
test [ebp+arg_8] 100h +
jz loc_10012B8  +
cmp [ebp+arg_0] eax +
jnz loc_10012AC  +
cmp ecx eax +
jnz loc_10012B1  +
cmp ecx [ebp+arg_4] +
jbe loc_10012C0  +
mov eax 80070057h +
jmp loc_10012C0  +
push [ebp+arg_4]  +
call sub_1001275  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push [ebp+arg_8]  +
mov esi eax +
push [ebp+arg_4]  +
xor ebx ebx +
dec esi  +
push esi  +
push edi  +
call ds:_vsnprintf  +
add esp 10h +
test eax eax +
jl loc_10012F5  +
cmp eax esi +
ja loc_10012F5  +
jnz loc_10012FF  +
mov [esi+edi] bl +
jmp loc_10012FD  +
mov [esi+edi] bl +
mov ebx 8007007Ah +
mov eax esi +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_1001308  +
mov [ecx] eax +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
test edi edi +
jbe loc_1001339  +
test [ebp+arg_4] 1000h +
jz loc_1001339  +
mov edx [ebp+arg_0] +
lea eax [esi+ecx] +
mov [edx] eax +
mov edx edi +
sub edx ecx +
mov [ebx] edx +
mov byte ptr [eax] 0 +
test [ebp+arg_4] 400h +
jz loc_100137D  +
mov eax [ebp+arg_4] +
and eax 0FFh +
push edi  +
push eax  +
push esi  +
mov [ebp+var_4] eax +
call memset  +
add esp 0Ch +
cmp [ebp+var_4] 0 +
jnz loc_1001367  +
mov eax [ebp+arg_0] +
mov [eax] esi +
mov [ebx] edi +
jmp loc_100137D  +
test edi edi +
jbe loc_1001394  +
mov ecx [ebp+arg_0] +
lea eax [esi+edi-1] +
mov [ecx] eax +
mov dword ptr [ebx] 1 +
mov byte ptr [eax] 0 +
test edi edi +
jbe loc_1001394  +
test [ebp+arg_4] 800h +
jz loc_1001394  +
mov eax [ebp+arg_0] +
mov [eax] esi +
mov [ebx] edi +
mov byte ptr [esi] 0 +
xor eax eax +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
xor eax eax +
test ecx ecx +
jz loc_10013B5  +
cmp ecx 7FFFFFFFh +
jbe loc_10013BA  +
mov eax 80070057h +
test eax eax +
jl loc_10013FE  +
mov eax [ebp+arg_0] +
push ebx  +
xor ebx ebx +
push esi  +
mov esi ecx +
test ecx ecx +
jz loc_10013F1  +
mov edx [ebp+arg_8] +
push edi  +
mov edi 7FFFFFFEh +
sub edi ecx +
sub edx eax +
lea ecx [edi+esi] +
test ecx ecx +
jz loc_10013EC  +
mov cl [edx+eax] +
test cl cl +
jz loc_10013EC  +
mov [eax] cl +
inc eax  +
dec esi  +
jnz loc_10013D8  +
pop edi  +
test esi esi +
jnz loc_10013F7  +
dec eax  +
mov ebx 8007007Ah +
mov byte ptr [eax] 0 +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
cmp [ebp+arg_4] eax +
jz loc_100141C  +
cmp [ebp+arg_4] 7FFFFFFFh +
jbe loc_1001421  +
mov eax 80070057h +
test eax eax +
jl loc_100143B  +
push edi  +
mov edi [ebp+arg_0] +
lea eax [ebp+arg_C] +
push eax  +
push [ebp+arg_8]  +
mov eax [ebp+arg_4] +
push 0  +
call sub_10012C9  +
pop edi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push ebx  +
mov ebx [ebp+arg_4] +
push esi  +
push [ebp+arg_10]  +
mov esi [ebp+arg_0] +
push 7FFFFFFFh  +
push esi  +
mov ecx ebx +
call sub_1001293  +
xor ecx ecx +
cmp eax ecx +
mov [ebp+var_4] eax +
jl loc_10014EF  +
test [ebp+arg_10] 100h +
push edi  +
mov edi ebx +
mov [ebp+var_8] esi +
mov [ebp+var_C] edi +
jz loc_100148D  +
cmp [ebp+arg_14] ecx +
jnz loc_100148D  +
mov [ebp+arg_14] offset dword_1001170 +
test [ebp+arg_10] 0FFFFE000h +
mov [ebp+var_4] ecx +
jz loc_10014F6  +
mov [ebp+var_4] 80070057h +
cmp ebx ecx +
jz loc_10014A6  +
mov [esi] cl +
test [ebp+arg_10] 1C00h +
jz loc_10014CA  +
test ebx ebx +
jz loc_10014CA  +
push [ebp+arg_10]  +
mov edi [ebp+arg_4] +
lea eax [ebp+var_8] +
push eax  +
lea ebx [ebp+var_C] +
xor ecx ecx +
call sub_1001315  +
mov edi [ebp+var_C] +
cmp [ebp+var_4] 0 +
jge loc_10014D9  +
cmp [ebp+var_4] 8007007Ah +
jnz loc_10014EE  +
mov eax [ebp+arg_8] +
test eax eax +
jz loc_10014E5  +
mov ecx [ebp+var_8] +
mov [eax] ecx +
mov eax [ebp+arg_C] +
test eax eax +
jz loc_10014EE  +
mov [eax] edi +
pop edi  +
mov eax [ebp+var_4] +
pop esi  +
pop ebx  +
leave   +
retn   +
cmp ebx ecx +
jnz loc_1001514  +
mov eax [ebp+arg_14] +
cmp [eax] cl +
jz loc_10014D9  +
mov eax esi +
neg eax  +
sbb eax eax +
and eax 23h +
add eax 80070057h +
mov [ebp+var_4] eax +
jmp loc_10014A6  +
lea eax [ebp+arg_18] +
push eax  +
push [ebp+arg_14]  +
lea eax [ebp+var_C] +
push eax  +
mov eax ebx +
mov edi esi +
mov [ebp+var_C] ecx +
call sub_10012C9  +
mov [ebp+var_4] eax +
mov eax [ebp+var_C] +
mov edi ebx +
sub edi eax +
cmp [ebp+var_4] 0 +
lea ecx [eax+esi] +
mov [ebp+var_8] ecx +
mov [ebp+var_C] edi +
jl loc_10014A6  +
mov eax [ebp+arg_10] +
test eax 200h +
jz loc_10014D9  +
cmp edi 1 +
jbe loc_10014D9  +
lea ecx [edi-1] +
and eax 0FFh +
push ecx  +
push eax  +
mov eax [ebp+var_8] +
inc eax  +
push eax  +
call memset  +
add esp 0Ch +
jmp loc_10014D9  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
mov eax dword_1003000 +
xor eax ebp +
mov [ebp+var_4] eax +
and [ebp+var_18] 0 +
push esi  +
push edi  +
lea esi [ebp+arg_0] +
lea edi [ebp+var_14] +
movs   +
movs   +
movs   +
movs   +
mov esi [ebp+arg_10] +
test esi esi +
jnz loc_10015A5  +
xor eax eax +
jmp loc_1001617  +
mov eax [ebp+var_8] +
mov ecx eax +
shr ecx 18h +
push ecx  +
mov ecx eax +
shr ecx 10h +
movzx ecx cl +
push ecx  +
mov ecx eax +
shr ecx 8 +
movzx ecx cl +
push ecx  +
movzx eax al +
push eax  +
mov eax [ebp+var_C] +
mov ecx eax +
shr ecx 18h +
push ecx  +
mov ecx eax +
shr ecx 10h +
movzx ecx cl +
push ecx  +
mov ecx eax +
shr ecx 8 +
movzx eax al +
movzx ecx cl +
push ecx  +
push eax  +
mov eax [ebp+var_10] +
shr eax 10h +
push eax  +
movzx eax word ptr [ebp+var_10] +
push eax  +
push dword ptr [ebp+var_14]  +
lea eax [ebp+var_18] +
push offset a08lx04x04x02x0  +
push 800h  +
push 0  +
push eax  +
push [ebp+arg_14]  +
push esi  +
call sub_1001442  +
add esp 44h +
test eax eax +
jl loc_10015A1  +
mov eax [ebp+var_18] +
sub eax esi +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_1001BF9  +
leave   +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 150h +
mov eax dword_1003000 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
push edi  +
lea esi [ebp+arg_0] +
lea edi [ebp+var_140] +
movs   +
movs   +
mov ebx [ebp+arg_10] +
and [ebp+var_148] 0 +
and [ebp+hKey] 0 +
movs   +
push 28h  +
movs   +
lea eax [ebp+var_2C] +
push eax  +
sub esp 10h +
mov edi esp +
lea esi [ebp+var_140] +
movs   +
movs   +
movs   +
movs   +
call sub_1001578  +
test eax eax +
jnz loc_1001687  +
xor eax eax +
jmp loc_100176F  +
lea eax [ebp+var_2C] +
push eax  +
push offset aClsidSInprocse  +
mov esi 104h +
lea eax [ebp+Src] +
push esi  +
push eax  +
call sub_1001407  +
add esp 10h +
test eax eax +
jl loc_1001680  +
lea eax [ebp+hKey] +
push eax  +
push 20019h  +
xor edi edi +
push edi  +
lea eax [ebp+Src] +
push eax  +
push 80000000h  +
call ds:RegOpenKeyExA  +
test eax eax +
jnz loc_1001755  +
lea eax [ebp+cbData] +
push eax  +
lea eax [ebp+Src] +
push eax  +
lea eax [ebp+Type] +
push eax  +
push edi  +
mov [ebp+cbData] esi +
push edi  +
push [ebp+hKey]  +
xor esi esi +
inc esi  +
mov [ebp+Type] esi +
call ds:RegQueryValueExA  +
test eax eax +
jnz loc_1001755  +
cmp [ebp+Type] 2 +
mov [ebp+var_2D] al +
lea eax [ebp+Src] +
jnz loc_100173E  +
push [ebp+nSize]  +
push ebx  +
push eax  +
call ds:ExpandEnvironmentStringsA  +
cmp eax edi +
jbe loc_1001736  +
cmp eax [ebp+nSize] +
ja loc_1001736  +
mov [ebp+var_148] esi +
jmp loc_1001755  +
mov [ebp+var_148] edi +
jmp loc_1001755  +
push eax  +
push [ebp+nSize]  +
push ebx  +
call sub_100139F  +
xor ecx ecx +
test eax eax +
setnl cl  +
mov [ebp+var_148] ecx +
cmp [ebp+hKey] edi +
jz loc_1001769  +
push [ebp+hKey]  +
call ds:RegCloseKey  +
mov eax [ebp+var_148] +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1001BF9  +
leave   +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 120h +
mov eax dword_1003000 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+hInstance] +
push ebx  +
push esi  +
push edi  +
push 4  +
pop edi  +
xor esi esi +
push esi  +
push esi  +
mov [ebp+var_118] eax +
mov eax [ebp+lpCmdLine] +
push 1  +
push esi  +
mov [ebp+var_114] eax +
mov [ebp+hKey] esi +
mov [ebp+cbData] edi +
call ds:HeapSetInformation  +
lea eax [ebp+hKey] +
push eax  +
push 1  +
push esi  +
push offset SubKey  +
push 80000002h  +
call ds:RegOpenKeyExW  +
test eax eax +
jnz loc_1001828  +
lea eax [ebp+cbData] +
push eax  +
lea eax [ebp+Data] +
push eax  +
lea eax [ebp+Type] +
push eax  +
push esi  +
push offset ValueName  +
push [ebp+hKey]  +
call ds:RegQueryValueExW  +
test eax eax +
jnz loc_1001828  +
cmp [ebp+Type] edi +
jnz loc_1001828  +
cmp dword ptr [ebp+Data] 1 +
jnz loc_1001828  +
push esi  +
jmp loc_100182A  +
push 3  +
call ds:SetProcessDEPPolicy  +
push 104h  +
lea eax [ebp+LibFileName] +
push eax  +
sub esp 10h +
mov edi esp +
mov esi offset dword_1001114 +
movs   +
movs   +
movs   +
movs   +
call sub_100162C  +
mov ebx offset dword_10010FC +
test eax eax +
jnz loc_100186E  +
push ebx  +
push 104h  +
lea eax [ebp+LibFileName] +
push eax  +
call sub_100139F  +
test eax eax +
jl loc_10018BC  +
mov esi ds:LoadLibraryA +
lea eax [ebp+LibFileName] +
push eax  +
call esi  +
mov edi eax +
test edi edi +
jnz loc_100188C  +
push ebx  +
call esi  +
mov edi eax +
test edi edi +
jz loc_10018BC  +
push offset ProcName  +
push edi  +
call ds:GetProcAddress  +
mov dword_1003364 eax +
test eax eax +
jz loc_10018BC  +
push [ebp+var_114]  +
push [ebp+var_118]  +
call eax  +
push edi  +
mov esi eax +
call ds:FreeLibrary  +
mov eax esi +
jmp loc_10018BF  +
or eax 0FFFFFFFFh +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1001BF9  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
xor eax eax +
jmp loc_10018F1  +
test eax eax +
jnz loc_10018F6  +
mov ecx [esi] +
test ecx ecx +
jz loc_10018EE  +
call ecx  +
add esi 4 +
cmp esi [ebp+arg_4] +
jb loc_10018E2  +
pop esi  +
pop ebp  +
retn   +
***
mov eax dword_100303C +
push offset dword_100302C  +
push dword_1003038  +
mov dword_100302C eax +
push offset unk_100301C  +
push offset unk_1003020  +
push offset unk_1003018  +
call ds:__getmainargs  +
add esp 14h +
mov dword_1003028 eax +
retn   +
***
call __SEH_prolog4  +
xor ebx ebx +
mov [ebp+var_1C] ebx +
mov [ebp+ms_exc.disabled] ebx +
lea eax [ebp+StartupInfo] +
push eax  +
call ds:GetStartupInfoA  +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov [ebp+ms_exc.disabled] 1 +
mov eax large fs:18h +
mov esi [eax+4] +
mov edi offset Destination +
push 0  +
push esi  +
push edi  +
call ds:InterlockedCompareExchange  +
test eax eax +
jz loc_1001996  +
cmp eax esi +
jnz loc_1001989  +
xor esi esi +
inc esi  +
mov ebx esi +
jmp loc_1001999  +
push 3E8h  +
call ds:Sleep  +
jmp loc_1001970  +
xor esi esi +
inc esi  +
mov eax dword_1003370 +
cmp eax esi +
jnz loc_10019AC  +
push 1Fh  +
call _amsg_exit  +
pop ecx  +
jmp loc_10019DB  +
mov eax dword_1003370 +
test eax eax +
jnz loc_10019D5  +
mov dword_1003370 esi +
push offset dword_10010D0  +
push offset dword_10010C4  +
call sub_10018D5  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_10019DB  +
jmp loc_1001B03  +
mov dword_1003034 esi +
mov eax dword_1003370 +
cmp eax esi +
jnz loc_10019FF  +
push offset dword_10010C0  +
push offset dword_10010B8  +
call _initterm  +
pop ecx  +
pop ecx  +
mov dword_1003370 2 +
test ebx ebx +
jnz loc_1001A0B  +
push ebx  +
push edi  +
call ds:InterlockedExchange  +
cmp dword_1003378 0 +
jz loc_1001A2F  +
push offset dword_1003378  +
call sub_1001D09  +
pop ecx  +
test eax eax +
jz loc_1001A2F  +
push 0  +
push 2  +
push 0  +
call dword_1003378  +
mov eax ds:_acmdln +
mov esi [eax] +
mov [ebp+var_20] esi +
mov al [esi] +
cmp al 20h +
ja $LN61  +
test al al +
jz loc_1001A49  +
cmp [ebp+var_1C] 0 +
jnz $LN61  +
mov al [esi] +
test al al +
jz loc_1001A59  +
cmp al 20h +
ja loc_1001A59  +
inc esi  +
mov [ebp+var_20] esi +
jmp loc_1001A49  +
test byte ptr [ebp+StartupInfo.dwFlags] 1 +
jz loc_1001A65  +
movzx eax [ebp+StartupInfo.wShowWindow] +
jmp loc_1001A68  +
push 0Ah  +
pop eax  +
push eax  +
push esi  +
push 0  +
push 1000000h  +
call _WinMain@16  +
mov dword_1003030 eax +
cmp dword_1003024 0 +
jnz $LN62  +
push eax  +
call ds:exit  +
cmp al 22h +
jnz loc_1001A9A  +
xor ecx ecx +
cmp [ebp+var_1C] ecx +
setz cl  +
mov [ebp+var_1C] ecx +
movzx eax al +
push eax  +
call ds:_ismbblead  +
pop ecx  +
test eax eax +
jz loc_1001AAD  +
inc esi  +
mov [ebp+var_20] esi +
inc esi  +
jmp loc_1001A36  +
mov eax [ebp-14h] +
mov ecx [eax] +
mov ecx [ecx] +
mov [ebp-24h] ecx +
push eax  +
push ecx  +
call _XcptFilter  +
pop ecx  +
pop ecx  +
retn   +
mov esp [ebp-18h] +
mov eax [ebp-24h] +
mov dword_1003030 eax +
cmp dword_1003024 0 +
jnz $LN62  +
push eax  +
call ds:_exit  +
cmp dword_1003034 0 +
jnz loc_1001AEE  +
call ds:_cexit  +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov eax dword_1003030 +
jmp loc_1001B0F  +
xor eax eax +
inc eax  +
retn   +
mov esp [ebp-18h] +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov eax 0FFh +
call __SEH_epilog4  +
retn   +
***
mov eax 5A4Dh +
cmp ds:1000000h ax +
jz loc_1001B2C  +
xor eax eax +
jmp loc_1001B79  +
mov eax ds:100003Ch +
lea eax [eax+1000000h] +
cmp dword ptr [eax] 4550h +
jnz loc_1001B28  +
movzx ecx word ptr [eax+18h] +
cmp ecx 10Bh +
jz loc_1001B66  +
cmp ecx 20Bh +
jnz loc_1001B28  +
cmp dword ptr [eax+84h] 0Eh +
jbe loc_1001B28  +
xor ecx ecx +
cmp [eax+0F8h] ecx +
jmp loc_1001B74  +
cmp dword ptr [eax+74h] 0Eh +
jbe loc_1001B28  +
xor ecx ecx +
cmp [eax+0E8h] ecx +
setnz cl  +
mov eax ecx +
push 2  +
mov dword_1003024 eax +
call sub_1001EA2  +
push eax  +
call ds:__set_app_type  +
or dword_1003368 0FFFFFFFFh +
or dword_100336C 0FFFFFFFFh +
pop ecx  +
pop ecx  +
call ds:__p__fmode  +
mov ecx dword_1003044 +
mov [eax] ecx +
call ds:__p__commode  +
mov ecx dword_1003040 +
mov [eax] ecx +
call sub_1001E34  +
cmp dword_1003010 0 +
jnz loc_1001BD2  +
push offset sub_1001E34  +
call ds:__setusermatherr  +
pop ecx  +
call sub_1001E1C  +
xor eax eax +
retn   +
***
call sub_1001EE1  +
jmp ___tmainCRTStartup  +
***
cmp ecx dword_1003000 +
jnz loc_1001C04  +
retn 0  +
jmp loc_1001F78  +
***
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov eax [eax] +
cmp dword ptr [eax] 0E06D7363h +
jnz loc_1001C4B  +
cmp dword ptr [eax+10h] 3 +
jnz loc_1001C4B  +
mov eax [eax+14h] +
cmp eax 19930520h +
jz loc_1001C45  +
cmp eax 19930521h +
jz loc_1001C45  +
cmp eax 19930522h +
jz loc_1001C45  +
cmp eax 1994000h +
jnz loc_1001C4B  +
call ds:?terminate@@YAXXZ  +
xor eax eax +
pop ebp  +
retn 4  +
***
push offset unk_1001C0E  +
call ds:SetUnhandledExceptionFilter  +
xor eax eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
mov eax 5A4Dh +
cmp [ecx] ax +
jz loc_1001C96  +
xor eax eax +
pop ebp  +
retn   +
mov eax [ecx+3Ch] +
add eax ecx +
cmp dword ptr [eax] 4550h +
jnz loc_1001C92  +
xor edx edx +
mov ecx 10Bh +
cmp [eax+18h] cx +
setz dl  +
mov eax edx +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [eax+3Ch] +
add ecx eax +
movzx eax word ptr [ecx+14h] +
push ebx  +
push esi  +
movzx esi word ptr [ecx+6] +
xor edx edx +
push edi  +
lea eax [eax+ecx+18h] +
test esi esi +
jbe loc_1001CFD  +
mov edi [ebp+arg_4] +
mov ecx [eax+0Ch] +
cmp edi ecx +
jb loc_1001CF5  +
mov ebx [eax+8] +
add ebx ecx +
cmp edi ebx +
jb loc_1001CFF  +
inc edx  +
add eax 28h +
cmp edx esi +
jb loc_1001CE5  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
call __SEH_prolog4  +
and [ebp+ms_exc.disabled] 0 +
mov esi 1000000h +
push esi  +
call sub_1001C80  +
pop ecx  +
test eax eax +
jz loc_1001D66  +
mov eax [ebp+arg_0] +
sub eax esi +
push eax  +
push esi  +
call sub_1001CC0  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1001D66  +
mov eax [eax+24h] +
shr eax 1Fh +
not eax  +
and eax 1 +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
jmp loc_1001D6F  +
mov eax [ebp-14h] +
mov eax [eax] +
mov eax [eax] +
xor ecx ecx +
cmp eax 0C0000005h +
setz cl  +
mov eax ecx +
retn   +
mov esp [ebp-18h] +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
xor eax eax +
call __SEH_epilog4  +
retn   +
***
mov eax [esp+8+arg_4] +
mov ecx [ebp-10h] +
mov large fs:0 ecx +
pop ecx  +
pop edi  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
push ecx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push offset sub_1001BF9  +
push offset dword_1003000  +
call _except_handler4_common  +
add esp 18h +
pop ebp  +
retn   +
***
call ds:_controlfp  +
pop ecx  +
pop ecx  +
retn   +
***
retn   +
***
call __SEH_prolog4  +
xor eax eax +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_1001E95  +
cmp ecx 0FFFFFFFFh +
jz loc_1001E95  +
and [ebp+ms_exc.disabled] eax +
mov edx 5A4Dh +
cmp [ecx] dx +
jnz loc_1001E8E  +
mov edx [ecx+3Ch] +
test edx edx +
jl loc_1001E8E  +
cmp edx 10000000h +
jnb loc_1001E8E  +
lea eax [edx+ecx] +
mov [ebp+var_1C] eax +
cmp dword ptr [eax] 4550h +
jz loc_1001E8E  +
jmp loc_1001E89  +
xor eax eax +
inc eax  +
retn   +
mov esp [ebp-18h] +
xor eax eax +
mov [ebp+var_1C] eax +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
call __SEH_epilog4  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
call ds:GetModuleHandleA  +
test eax eax +
jz loc_1001ED7  +
push eax  +
call sub_1001E3C  +
test eax eax +
jz loc_1001ED7  +
movzx eax word ptr [eax+5Ch] +
cmp ax 2 +
jnz loc_1001ECC  +
push 2  +
pop eax  +
pop ebp  +
retn   +
cmp ax 3 +
jnz loc_1001ED7  +
xor eax eax +
inc eax  +
pop ebp  +
retn   +
mov eax [ebp+arg_0] +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov eax dword_1003000 +
and [ebp+SystemTimeAsFileTime.dwLowDateTime] 0 +
and [ebp+SystemTimeAsFileTime.dwHighDateTime] 0 +
push ebx  +
push edi  +
mov edi 0BB40E64Eh +
mov ebx 0FFFF0000h +
cmp eax edi +
jz loc_1001F13  +
test eax ebx +
jz loc_1001F13  +
not eax  +
mov dword_1003004 eax +
jmp loc_1001F6E  +
push esi  +
lea eax [ebp+SystemTimeAsFileTime] +
push eax  +
call ds:GetSystemTimeAsFileTime  +
mov esi [ebp+SystemTimeAsFileTime.dwHighDateTime] +
xor esi [ebp+SystemTimeAsFileTime.dwLowDateTime] +
call ds:GetCurrentProcessId  +
xor esi eax +
call ds:GetCurrentThreadId  +
xor esi eax +
call ds:GetTickCount  +
xor esi eax +
lea eax [ebp+PerformanceCount] +
push eax  +
call ds:QueryPerformanceCounter  +
mov eax dword ptr [ebp+PerformanceCount+4] +
xor eax dword ptr [ebp+PerformanceCount] +
xor esi eax +
cmp esi edi +
jz loc_1001F5A  +
test dword_1003000 ebx +
jnz loc_1001F5F  +
mov esi 0BB40E64Fh +
mov dword_1003000 esi +
not esi  +
mov dword_1003004 esi +
pop esi  +
pop edi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 328h +
mov dword_1003148 eax +
mov dword_1003144 ecx +
mov dword_1003140 edx +
mov dword_100313C ebx +
mov dword_1003138 esi +
mov dword_1003134 edi +
mov word_1003160 ss +
mov word_1003154 cs +
mov word_1003130 ds +
mov word_100312C es +
mov word_1003128 fs +
mov word_1003124 gs +
pushf   +
pop dword_1003158  +
mov eax [ebp+0] +
mov dword_100314C eax +
mov eax [ebp+4] +
mov dword_1003150 eax +
lea eax [ebp+8] +
mov dword_100315C eax +
mov eax [ebp-320h] +
mov dword_1003098 10001h +
mov eax dword_1003150 +
mov dword_1003054 eax +
mov dword_1003048 0C0000409h +
mov dword_100304C 1 +
mov eax dword_1003000 +
mov [ebp-328h] eax +
mov eax dword_1003004 +
mov [ebp-324h] eax +
push 0  +
call ds:SetUnhandledExceptionFilter  +
push offset ExceptionInfo  +
call ds:UnhandledExceptionFilter  +
push 0C0000409h  +
call ds:GetCurrentProcess  +
push eax  +
call ds:TerminateProcess  +
leave   +
retn   +
***
