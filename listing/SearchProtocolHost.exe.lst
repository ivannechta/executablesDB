mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push edi  +
push 0Bh  +
pop ebx  +
cmp eax 1F4h +
jnb loc_1001469  +
push 2  +
pop ebx  +
mov edi eax +
dec ebx  +
jz loc_1001462  +
push edi  +
push [ebp+fWaitAll]  +
push [ebp+nCount]  +
push [ebp+pHandles]  +
call sub_100141B  +
cmp eax 102h +
jz loc_10013F7  +
pop edi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1Ch +
push esi  +
mov esi ds:PeekMessageW +
push edi  +
xor edi edi +
push 1  +
push edi  +
push edi  +
push edi  +
lea eax [ebp+Msg] +
push eax  +
call esi  +
test eax eax +
jnz loc_1013B4E  +
push 4FFh  +
push [ebp+dwMilliseconds]  +
push [ebp+fWaitAll]  +
push [ebp+pHandles]  +
push [ebp+nCount]  +
call ds:MsgWaitForMultipleObjects  +
cmp eax [ebp+nCount] +
jz loc_100142D  +
pop edi  +
pop esi  +
leave   +
retn 10h  +
***
mov eax 102h +
jmp loc_1001410  +
push 0Ah  +
xor edx edx +
pop ecx  +
div  ecx +
jmp loc_10013F5  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
push edi  +
mov esi ecx +
push dword ptr [esi+34h]  +
call sub_1001709  +
mov [ebp+nCount] eax +
mov eax [esi+60h] +
mov ecx 2710h +
mov ebx ecx +
cmp eax 0FFFFFFFFh +
jz loc_10014A5  +
cmp eax ecx +
jb loc_1013C8F  +
and [ebp+var_4] 0 +
lea edi [esi+14h] +
push 0  +
push edi  +
push [ebp+nCount]  +
mov eax ebx +
call sub_10013E1  +
mov ecx [esi+2Ch] +
mov ecx [ecx+80h] +
test ecx ecx +
jns loc_100E3E6  +
cmp eax 102h +
jnz loc_1003921  +
test ecx 40000000h +
jnz loc_1013CA8  +
mov eax [esi+60h] +
cmp eax 0FFFFFFFFh +
jnz loc_1013C96  +
cmp [ebp+var_4] eax +
jb loc_10014AC  +
jmp loc_1013C9E  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push esi  +
push edi  +
xor edi edi +
mov esi ecx +
cmp [ebp+arg_0] edi +
jz loc_1013C45  +
push ebx  +
push dword ptr [esi+54h]  +
call sub_1001709  +
mov [ebp+nCount] eax +
mov eax [esi+60h] +
mov ecx 2710h +
mov ebx ecx +
cmp eax 0FFFFFFFFh +
jnz loc_1013C4F  +
cmp [ebp+arg_4] ebx +
jb loc_1013C5E  +
mov [ebp+var_4] edi +
mov [ebp+var_C] edi +
mov [ebp+var_8] edi +
mov edi 80000000h +
mov eax [esi+2Ch] +
test [eax+80h] edi +
jz loc_100E3CE  +
push 0  +
lea eax [esi+14h] +
push eax  +
push [ebp+nCount]  +
mov eax ebx +
call sub_10013E1  +
mov ecx [esi+2Ch] +
test [ecx+80h] edi +
jz loc_100E3CE  +
cmp eax 102h +
jz loc_1001598  +
push eax  +
call sub_10049CB  +
test eax eax +
jl loc_1001591  +
xor eax eax +
inc eax  +
mov [esi+6] ax +
xor eax eax +
pop ebx  +
pop edi  +
pop esi  +
leave   +
retn 8  +
add [ebp+var_4] ebx +
cmp [ebp+var_4] 249F0h +
jnb loc_1013C66  +
mov eax [ebp+var_8] +
add eax ebx +
mov [ebp+var_8] eax +
cmp eax [ebp+arg_4] +
jnb loc_1013C7C  +
mov eax [esi+60h] +
cmp eax 0FFFFFFFFh +
jz loc_1001549  +
jmp loc_100E3D8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push esi  +
mov esi ecx +
xor ecx ecx +
cmp [ebp+arg_0] ecx +
jz loc_1013F4A  +
push 32h  +
pop eax  +
cmp [ebp+arg_4] eax +
jb loc_1013F54  +
mov eax [esi+2Ch] +
push ebx  +
mov ebx [eax+90h] +
push edi  +
mov edi [eax+88h] +
mov [ebp+var_4] ecx +
cmp [esi+6] cx +
jnz loc_100B375  +
cmp [esi+4] cx +
jz loc_10016C4  +
push 40000000h  +
sub eax 0FFFFFF80h +
push eax  +
call sub_10044EB  +
mov ecx esi +
call sub_10044CE  +
push dword ptr [esi+44h]  +
mov ecx esi +
mov [ebp+var_4] eax +
call sub_1001709  +
and [ebp+var_8] 0 +
and [ebp+var_C] 0 +
mov [ebp+nCount] eax +
cmp edi ebx +
jz loc_10016A8  +
mov eax [esi+2Ch] +
test dword ptr [eax+80h] 80000000h +
jz loc_100D99B  +
push 0  +
lea eax [esi+14h] +
push eax  +
push [ebp+nCount]  +
push 32h  +
pop eax  +
call sub_10013E1  +
cmp eax 102h +
jnz loc_1004262  +
mov ecx [ebp+var_C] +
mov eax [esi+60h] +
add [ebp+var_8] 32h +
add ecx 32h +
mov [ebp+var_C] ecx +
cmp eax 0FFFFFFFFh +
jnz loc_1013F5C  +
cmp ecx [ebp+arg_4] +
jnb loc_100D988  +
mov eax [esi+2Ch] +
mov ecx [eax+88h] +
cmp ecx [eax+90h] +
jnz loc_1001646  +
mov eax [esi+4Ch] +
push 0  +
push 1  +
push eax  +
call ds:ReleaseSemaphore  +
test eax eax +
jz loc_1013F8E  +
xor eax eax +
mov [esi+4] ax +
mov eax [ebp+var_4] +
pop edi  +
pop ebx  +
pop esi  +
leave   +
retn 8  +
***
test eax eax +
jz loc_1001EF7  +
push eax  +
call ds:CloseHandle  +
jmp loc_1001EF7  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
xor eax eax +
test edx edx +
jz loc_100173F  +
mov [ecx+14h] edx +
mov edx [ecx+8] +
inc eax  +
test edx edx +
jz loc_1001728  +
push 2  +
mov [ecx+18h] edx +
pop eax  +
mov edx [ecx+0Ch] +
test edx edx +
jz loc_1001734  +
mov [ecx+eax*4+14h] edx +
inc eax  +
mov edx [ecx+10h] +
test edx edx +
jnz loc_100FC2E  +
pop ebp  +
retn 4  +
***
call sub_1001D89  +
mov esi ecx +
mov eax [ebp+8] +
xor ebx ebx +
cmp eax ebx +
jz loc_100DE46  +
mov edx [ebp+0Ch] +
cmp edx ebx +
jz loc_100DE46  +
mov ecx [ebp+10h] +
cmp ecx ebx +
jz loc_100DE46  +
mov [esi+9A0h] ecx +
push eax  +
lea ecx [esi+9BCh] +
mov [esi+994h] ebx +
mov [esi+418h] eax +
mov [esi+99Ch] edx +
call sub_10042FC  +
push dword ptr [ebp+14h]  +
lea edi [esi+9E4h] +
mov ecx edi +
call sub_1001F59  +
mov eax [ebp+18h] +
push 254h  +
mov [esi+9E8h] eax +
call off_102665C  +
mov [ebp+10h] eax +
mov [ebp-4] ebx +
cmp eax ebx +
jz loc_100DE3E  +
mov ecx eax +
call sub_1003034  +
mov [ebp+10h] eax +
mov eax [ebp+10h] +
mov [ebp+18h] eax +
mov dword ptr [ebp-4] 1 +
cmp eax ebx +
jz loc_1012C3E  +
push dword ptr [esi+9E8h]  +
mov edi [edi] +
mov ecx [esi+418h] +
push edi  +
call sub_10015CB  +
cmp eax ebx +
jl loc_1012C48  +
mov ecx esi +
call sub_1001B10  +
mov edi eax +
cmp edi ebx +
jl loc_1001AF2  +
lea eax [ebp-10h] +
push eax  +
mov ecx esi +
call sub_10049E5  +
mov edi eax +
cmp edi ebx +
jl loc_1001AF2  +
lea eax [ebp-10h] +
push eax  +
mov ecx esi +
call sub_10049E5  +
mov edi eax +
cmp edi ebx +
jl loc_1001AF2  +
lea eax [ebp+8] +
push eax  +
lea eax [ebp+0Ch] +
push eax  +
mov ecx esi +
call sub_1004A49  +
mov edi eax +
cmp edi ebx +
jl loc_1001AF2  +
push dword ptr [ebp+8]  +
mov ecx [ebp+10h] +
push dword ptr [ebp+0Ch]  +
call sub_100561A  +
push 0FFFFFFFFh  +
push dword ptr [ebp+0Ch]  +
lea ecx [esi+41Ch] +
call sub_100537D  +
mov edi eax +
cmp edi ebx +
jl loc_1001AF2  +
lea eax [ebp-10h] +
push eax  +
mov ecx esi +
call sub_10049E5  +
mov edi eax +
cmp edi ebx +
jl loc_1001AF2  +
mov eax [ebp-10h] +
mov ecx [ebp+10h] +
mov [ecx+23Ch] eax +
lea eax [ebp+8] +
push eax  +
lea eax [ebp+0Ch] +
push eax  +
mov ecx esi +
call sub_1004A49  +
mov edi eax +
cmp edi ebx +
jl loc_1001AF2  +
push dword ptr [ebp+8]  +
mov ecx [ebp+10h] +
push dword ptr [ebp+0Ch]  +
call sub_10055FC  +
lea eax [ebp+8] +
push eax  +
lea eax [ebp+0Ch] +
push eax  +
mov ecx esi +
call sub_1004A49  +
mov edi eax +
cmp edi ebx +
jl loc_1001AF2  +
push dword ptr [ebp+8]  +
mov ecx [ebp+10h] +
mov eax [ecx] +
push ebx  +
push dword ptr [ebp+0Ch]  +
call dword ptr [eax+10h]  +
lea eax [ebp+8] +
push eax  +
lea eax [ebp+0Ch] +
push eax  +
mov ecx esi +
call sub_1004A49  +
mov edi eax +
cmp edi ebx +
jl loc_1001AF2  +
push dword ptr [ebp+8]  +
lea ecx [esi+5FCh] +
mov eax [ecx] +
push ebx  +
push dword ptr [ebp+0Ch]  +
call dword ptr [eax+10h]  +
lea eax [esi+650h] +
push eax  +
mov ecx esi +
call sub_10057C3  +
mov edi eax +
cmp edi ebx +
jl loc_1001AF2  +
lea eax [esi+658h] +
push eax  +
mov ecx esi +
call sub_10049E5  +
mov edi eax +
cmp edi ebx +
jl loc_1001AF2  +
lea eax [esi+65Ch] +
push eax  +
mov ecx esi +
call sub_10049E5  +
mov edi eax +
cmp edi ebx +
jl loc_1001AF2  +
lea eax [esi+660h] +
push eax  +
mov ecx esi +
call sub_10049E5  +
mov edi eax +
cmp edi ebx +
jl loc_1001AF2  +
lea eax [esi+664h] +
push eax  +
mov ecx esi +
call sub_10049E5  +
mov edi eax +
cmp edi ebx +
jl loc_1001AF2  +
lea eax [ebp+8] +
push eax  +
lea eax [ebp+0Ch] +
push eax  +
mov ecx esi +
call sub_1004A49  +
mov edi eax +
cmp edi ebx +
jl loc_1001AF2  +
push dword ptr [ebp+8]  +
lea ecx [esi+668h] +
mov eax [ecx] +
push ebx  +
push dword ptr [ebp+0Ch]  +
call dword ptr [eax+10h]  +
lea eax [ebp+8] +
push eax  +
lea eax [ebp+0Ch] +
push eax  +
mov ecx esi +
call sub_1004A49  +
mov edi eax +
cmp edi ebx +
jl loc_1001AF2  +
push dword ptr [ebp+8]  +
lea ecx [esi+7FCh] +
mov eax [ecx] +
push ebx  +
push dword ptr [ebp+0Ch]  +
call dword ptr [eax+10h]  +
lea eax [ebp+8] +
push eax  +
mov ecx esi +
call sub_10049E5  +
mov edi eax +
cmp edi ebx +
jl loc_1001AF2  +
mov eax [ebp+8] +
lea ecx [esi+9F0h] +
push ecx  +
push eax  +
mov ecx esi +
mov [esi+9ECh] eax +
call sub_1004A8D  +
mov edi eax +
cmp edi ebx +
jl loc_1001AF2  +
mov eax [esi+660h] +
mov edx eax +
shr edx 4 +
xor ecx ecx +
inc ecx  +
and edx ecx +
mov [esi+5E4h] edx +
mov edx eax +
shr edx 5 +
and edx ecx +
mov [esi+5E8h] edx +
mov edx eax +
shr edx 6 +
and edx ecx +
mov [esi+5ECh] edx +
mov edx eax +
shr edx 7 +
and edx ecx +
mov [esi+5F4h] edx +
mov edx eax +
shr edx 0Ah +
shr eax 0Ch +
and edx ecx +
and eax ecx +
push ecx  +
mov ecx [esi+418h] +
mov [esi+5F0h] edx +
mov [esi+5F8h] eax +
call sub_1005677  +
mov edi eax +
cmp edi ebx +
jl loc_1012C68  +
push dword ptr [esi+99Ch]  +
lea ecx [ebp+14h] +
call sub_1002059  +
push dword ptr [ebp+10h]  +
mov ecx [esi+9A0h] +
mov byte ptr [ebp-4] 2 +
call sub_10041EF  +
mov ebx [eax] +
push esi  +
test ebx ebx +
jnz loc_1012C6B  +
mov ebx [ebp+10h] +
lea ecx [ebx+240h] +
call sub_100563B  +
mov ecx [esi+9A0h] +
push ebx  +
push ebx  +
call sub_100582B  +
and dword ptr [ebp+18h] 0 +
cmp dword ptr [ebp+14h] 0 +
mov [esi+9A4h] ebx +
jz loc_1001AF0  +
push dword ptr [ebp+14h]  +
call ds:LeaveCriticalSection  +
xor ebx ebx +
mov ecx [ebp+18h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
cmp ecx ebx +
jnz loc_100DE32  +
mov eax edi +
call __EH_epilog3  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
mov ecx [esi+418h] +
test ecx ecx +
jz loc_1012924  +
push dword ptr [esi+9E8h]  +
mov eax [esi+9E4h] +
and [ebp+var_4] 0 +
push eax  +
push 4  +
lea eax [ebp+var_4] +
push eax  +
call sub_1001B9B  +
test eax eax +
jl loc_1001B75  +
mov ecx [ebp+var_4] +
cmp ecx [esi+40Ch] +
ja loc_101292E  +
push dword ptr [esi+9E8h]  +
mov eax [esi+9E4h] +
push eax  +
push ecx  +
push dword ptr [esi+404h]  +
mov ecx [esi+418h] +
call sub_1001B9B  +
mov edx [ebp+var_4] +
mov [esi+410h] edx +
lea ecx [esi+9D8h] +
mov esi [esi+404h] +
and dword ptr [ecx+4] 0 +
mov [ecx] esi +
mov [ecx+8] edx +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push edi  +
mov edi [ebp+arg_4] +
mov ebx ecx +
test edi edi +
jz loc_101279A  +
push esi  +
mov esi [ebp+arg_0] +
xor eax eax +
test eax eax +
jl loc_1001BDE  +
push [ebp+arg_C]  +
and [ebp+arg_4] 0 +
push [ebp+arg_8]  +
lea eax [ebp+arg_4] +
push eax  +
push edi  +
push esi  +
mov ecx ebx +
call sub_1001BEA  +
test eax eax +
jl loc_1001BDA  +
sub edi [ebp+arg_4] +
add esi [ebp+arg_4] +
test edi edi +
jnz loc_1001BB5  +
pop esi  +
pop edi  +
pop ebx  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1Ch +
push esi  +
xor esi esi +
push edi  +
mov edi ecx +
cmp [ebp+arg_C] esi +
jz loc_10140E5  +
mov eax [ebp+arg_8] +
mov [ebp+var_C] esi +
cmp eax esi +
jz loc_1001C0D  +
mov [eax] esi +
mov eax [edi+2Ch] +
test dword ptr [eax+80h] 80000000h +
jz loc_10140EF  +
cmp [edi+6] si +
jnz loc_1001C3C  +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
call sub_10014FC  +
cmp eax esi +
mov [ebp+var_C] eax +
jl loc_1001D2A  +
mov eax [edi+2Ch] +
mov edx [ebp+arg_4] +
mov ecx [eax+80h] +
and ecx 3FFFFFFFh +
push ebx  +
mov [ebp+var_14] edx +
mov [ebp+var_8] esi +
mov [ebp+var_18] ecx +
cmp edx esi +
jz loc_1001D03  +
mov eax [edi+2Ch] +
test dword ptr [eax+80h] 80000000h +
mov ebx [eax+88h] +
mov esi [eax+90h] +
mov [ebp+var_1C] ebx +
jz loc_1014117  +
mov eax ebx +
sub eax esi +
cmp ebx esi +
jb loc_100FCC6  +
test eax eax +
jz loc_1004E5A  +
mov [ebp+var_4] eax +
cmp edx eax +
jb loc_10058AA  +
cmp ebx esi +
jbe loc_100FCCD  +
mov eax [edi+2Ch] +
push [ebp+var_4]  +
mov ecx [ebp+var_8] +
lea eax [esi+eax+98h] +
push eax  +
mov eax [ebp+arg_0] +
add ecx eax +
push ecx  +
call memcpy  +
add esp 0Ch +
add esi [ebp+var_4] +
mov eax [ebp+var_4] +
sub [ebp+var_14] eax +
add [ebp+var_8] eax +
mov eax [edi+2Ch] +
mov [eax+90h] esi +
cmp ebx esi +
jb loc_100FD3D  +
sub esi ebx +
add esi [ebp+var_18] +
cmp esi [edi+5Ch] +
jb loc_1001CF8  +
push dword ptr [edi+3Ch]  +
call ds:SetEvent  +
mov edx [ebp+var_14] +
test edx edx +
jnz loc_10058B2  +
mov ecx [ebp+arg_8] +
test ecx ecx +
jz loc_1001D12  +
mov eax [ebp+arg_4] +
sub eax [ebp+var_14] +
mov [ecx] eax +
mov eax [edi+2Ch] +
test dword ptr [eax+80h] 80000000h +
mov eax 80040DB4h +
jz loc_1001D29  +
mov eax [ebp+var_C] +
pop ebx  +
pop edi  +
pop esi  +
leave   +
retn 14h  +
***
mov ecx [ebp-0Ch] +
mov large fs:0 ecx +
pop ecx  +
pop edi  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
push ecx  +
retn   +
***
mov eax eax +
push eax  +
push large dword ptr fs:0  +
lea eax [esp+4+arg_0] +
sub esp [esp+0Ch] +
push ebx  +
push esi  +
push edi  +
mov [eax] ebp +
mov ebp eax +
mov eax dword_1026044 +
xor eax ebp +
push eax  +
push dword ptr [ebp-4]  +
mov dword ptr [ebp-4] 0FFFFFFFFh +
lea eax [ebp-0Ch] +
mov large fs:0 eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
mov eax ecx +
mov ecx [ebp+arg_4] +
and dword ptr [eax+0Ch] 0 +
mov [eax+8] edx +
xor edx edx +
mov dword ptr [eax] offset off_1001D4C +
mov [eax+4] ecx +
mov [ecx] dx +
pop ebp  +
retn 8  +
***
mov edi edi +
push esi  +
mov esi ecx +
lea eax [esi+10h] +
push eax  +
push 21h  +
call sub_1001DCE  +
mov dword ptr [esi] offset off_1001D68 +
mov eax esi +
pop esi  +
retn   +
***
mov eax ecx +
lea ecx [eax+4] +
and dword ptr [ecx] 0 +
and dword ptr [eax+0Ch] 0 +
mov [ecx] ecx +
mov [eax] ecx +
mov [eax+8] eax +
retn   +
***
cmp ecx dword_1026044 +
jnz loc_101C362  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx+4] +
test eax eax +
jz loc_1001E8A  +
cmp eax [ebp+arg_0] +
jnz loc_1001F21  +
pop ebp  +
retn 4  +
***
call sub_1001D89  +
mov edi ecx +
cmp dword ptr [edi+3Ch] 0 +
jz loc_1009C34  +
call __EH_epilog3  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov eax [esi+4] +
push edi  +
mov edi [ebp+arg_0] +
cmp edi eax +
jnz loc_10016E0  +
mov [esi+4] edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
lea eax [esi+10h] +
push eax  +
mov dword ptr [esi] offset off_1001E50 +
call sub_1001E75  +
mov dword ptr [esi] offset off_1001D4C +
pop esi  +
retn   +
***
push eax  +
call ds:__imp_free  +
pop ecx  +
jmp loc_1001E8A  +
***
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_1001F75  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov esi ecx +
test edi edi +
jz loc_1001F6F  +
mov eax [edi] +
push edi  +
call dword ptr [eax+4]  +
mov eax [esi] +
test eax eax +
jnz loc_1001F2E  +
mov [esi] edi +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
lea eax [esi+10h] +
push eax  +
push 0C1h  +
call sub_1001DCE  +
mov dword ptr [esi] offset off_1001F38 +
mov eax esi +
pop esi  +
retn   +
***
mov edx [ecx] +
test edx edx +
jz loc_100DE50  +
mov eax [ecx+4] +
test eax eax +
jz loc_1001FFD  +
mov [ecx+8] eax +
mov eax [eax] +
add edx 4 +
mov [ecx+4] eax +
cmp eax edx +
jz loc_1002006  +
xor eax eax +
cmp [ecx+4] eax +
setnz al  +
retn   +
and dword ptr [ecx+4] 0 +
jmp loc_1001FFD  +
***
mov edi edi +
push esi  +
mov esi ecx +
lea eax [esi+10h] +
push eax  +
mov dword ptr [esi] offset off_1001D68 +
call sub_1001E75  +
mov dword ptr [esi] offset off_1001D4C +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+lpCriticalSection] +
push esi  +
mov esi ecx +
push eax  +
mov [esi] eax +
call ds:EnterCriticalSection  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov ecx [ebp+arg_0] +
mov [esi] ecx +
call sub_1002097  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_1001D89  +
mov esi ecx +
lea eax [esi+0Ch] +
push eax  +
call ds:EnterCriticalSection  +
mov ecx esi +
call sub_10020F0  +
lea eax [esi+24h] +
push eax  +
lea ecx [ebp-10h] +
xor edi edi +
call sub_1002059  +
and [ebp-4] edi +
cmp [esi+8] edi +
jnz loc_101455C  +
push dword ptr [ebp-10h]  +
or dword ptr [ebp-4] 0FFFFFFFFh +
call ds:LeaveCriticalSection  +
test edi edi +
jnz loc_1014571  +
call __EH_epilog3  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
push esi  +
call ds:InterlockedIncrement  +
call ds:GetCurrentThreadId  +
mov [esi+4] eax +
pop esi  +
retn   +
***
call sub_1001D89  +
mov esi ecx +
lea eax [esi+24h] +
push eax  +
lea ecx [ebp-10h] +
call sub_1002059  +
and dword ptr [ebp-4] 0 +
cmp dword ptr [esi] 1 +
jnz loc_1002133  +
or dword ptr [esi+4] 0FFFFFFFFh +
push esi  +
call ds:InterlockedDecrement  +
mov ecx esi +
call sub_1001EBD  +
mov ecx [esi+3Ch] +
call sub_1002165  +
push dword ptr [ebp-10h]  +
mov edi ds:LeaveCriticalSection +
call edi  +
add esi 0Ch +
push esi  +
call edi  +
call __EH_epilog3  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push dword ptr [ecx]  +
call ds:SetEvent  +
test eax eax +
jz loc_10144C8  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0FFFFFFFFh  +
push offset byte_10221DD  +
mov eax large fs:0 +
push eax  +
push ecx  +
mov eax 5BDCh +
call sub_10039A6  +
mov eax dword_1026044 +
xor eax ebp +
mov [ebp+var_14] eax +
push ebx  +
push esi  +
push edi  +
push eax  +
lea eax [ebp+var_C] +
mov large fs:0 eax +
mov [ebp+var_10] esp +
mov eax [ebp+arg_0] +
lea ecx [ebp+var_5B1C] +
mov [ebp+var_5A8C] eax +
call sub_1008466  +
and [ebp+var_4] 0 +
push offset dword_1002F70  +
or edi 0FFFFFFFFh +
push edi  +
call nullsub_1  +
lea ecx [ebp+var_5B68] +
mov byte ptr [ebp+var_4] 1 +
call sub_100B705  +
and [ebp+var_5B48] 0 +
mov [ebp+var_5B68] offset off_10016D0 +
mov esi offset CriticalSection +
push esi  +
mov byte ptr [ebp+var_4] 2 +
call ds:EnterCriticalSection  +
mov ebx dword_1026068 +
inc dword_1026068  +
push esi  +
call ds:LeaveCriticalSection  +
mov eax [ebp+var_5A8C] +
add eax 2E0h +
push eax  +
lea ecx [ebp+var_5244] +
call sub_100B6DA  +
push 0Ah  +
lea eax [ebp+var_3C] +
push eax  +
push ebx  +
mov byte ptr [ebp+var_4] 3 +
call ds:_itow  +
add esp 0Ch +
push edi  +
push [ebp+var_5238]  +
lea ecx [ebp+var_5244] +
push eax  +
mov eax [ebp+var_5244] +
call dword ptr [eax+10h]  +
lea ecx [ebp+var_47BC] +
call sub_100B5ED  +
mov [ebp+var_47BC] offset off_1002030 +
push [ebp+var_5240]  +
lea ecx [ebp+var_47BC] +
mov byte ptr [ebp+var_4] 4 +
call sub_100B3D4  +
xor esi esi +
cmp eax esi +
jl loc_1011416  +
mov eax dword_1026104 +
mov [ebp+var_47B4] eax +
mov eax hObject +
mov [ebp+var_47B0] eax +
cmp dword_1026664 esi +
jnz loc_1011449  +
push dword_102605C  +
lea ecx [ebp+var_47BC] +
push esi  +
call sub_100B399  +
mov eax dword_102605C +
not eax  +
push eax  +
push 1  +
lea ecx [ebp+var_47BC] +
call sub_100B399  +
lea ecx [ebp+var_47BC] +
call sub_100B2F3  +
cmp eax esi +
jl loc_1011454  +
mov [ebp+var_475C] edi +
mov [ebp+ppbc] esi +
lea eax [ebp+ppbc] +
push eax  +
push esi  +
mov byte ptr [ebp+var_4] 5 +
call ds:CreateBindCtx  +
cmp eax esi +
mov [ebp+var_5A5C] eax +
jl loc_1011483  +
mov esi [ebp+var_5A8C] +
xor edi edi +
cmp [esi+14h] edi +
jnz loc_100DFC8  +
lea ecx [ebp+var_51B0] +
call sub_1004340  +
mov [ebp+var_5AA8] edi +
mov [ebp+var_5A80] offset off_1001E6C +
mov [ebp+var_5A7C] edi +
lea ecx [ebp+var_5B3C] +
mov byte ptr [ebp+var_4] 7 +
mov byte ptr [ebp+var_5B3C+1] 0 +
mov [ebp+var_5B34] edi +
mov [ebp+var_5B30] edi +
mov [ebp+var_5B2C] edi +
mov [ebp+var_5B28] edi +
mov [ebp+var_5B24] edi +
mov byte ptr [ebp+var_5B3C] 1 +
call sub_1004525  +
add esi 24h +
mov ecx esi +
mov [ebp+var_5B34] eax +
mov [ebp+var_5B30] edx +
call sub_100460C  +
mov ecx esi +
call sub_1004313  +
lea eax [ebp+pperrinfo] +
push eax  +
push edi  +
mov [ebp+pperrinfo] edi +
call ds:GetErrorInfo  +
mov eax [ebp+pperrinfo] +
cmp eax edi +
jnz loc_10114B2  +
mov esi ds:GetTickCount +
call esi  +
push dword_1026204  +
mov ebx eax +
lea eax [ebp+var_5B68] +
push eax  +
push dword_1026070  +
lea eax [ebp+var_47BC] +
push offset stru_10261E8  +
push eax  +
lea ecx [ebp+var_51B0] +
call sub_1001748  +
mov edi eax +
call esi  +
mov ecx [ebp+var_5A8C] +
sub eax ebx +
push eax  +
add ecx 0CCh +
call sub_1003148  +
cmp edi 80040DB4h +
jz loc_100DF89  +
xor ebx ebx +
cmp edi ebx +
jl loc_10114BD  +
cmp dword_1026074 ebx +
jnz loc_10114EF  +
cmp dword_1026064 ebx +
jz loc_100C99F  +
mov esi [ebp+var_5A5C] +
mov edi 80010007h +
cmp esi edi +
jz loc_100247D  +
cmp esi 800706BAh +
jz loc_100247D  +
cmp esi 80010105h +
jz loc_100247D  +
push ebx  +
push dword_1026114  +
call ds:WaitForSingleObject  +
cmp eax ebx +
jz loc_100C7F4  +
cmp dword_1026064 ebx +
jz loc_100C99F  +
cmp esi edi +
jz loc_100C99F  +
cmp esi 800706BAh +
jz loc_100C99F  +
cmp esi 80010105h +
jz loc_100C99F  +
lea ecx [ebp+var_44DC] +
call sub_1001DF9  +
mov eax [ebp+var_480C] +
mov eax [eax+4] +
push 0FFFFFFFFh  +
push ebx  +
push eax  +
mov eax [ebp+var_44DC] +
lea ecx [ebp+var_44DC] +
mov byte ptr [ebp+var_4] 8 +
call dword ptr [eax+10h]  +
lea eax [ebp+var_51B0] +
mov [ebp+var_5A98] eax +
lea eax [ebp+var_47BC] +
mov [ebp+var_5AA4] ebx +
mov [ebp+var_5AA0] ebx +
mov [ebp+var_5A9C] ebx +
mov [ebp+var_5A94] eax +
mov [ebp+var_5A78] ebx +
mov [ebp+var_5A68] ebx +
mov [ebp+var_5A60] ebx +
lea eax [ebp+var_5B68] +
push eax  +
push ebx  +
lea eax [ebp+var_5AA4] +
push eax  +
lea eax [ebp+var_51B0] +
push eax  +
mov byte ptr [ebp+var_4] 0Ch +
call sub_1005080  +
cmp eax ebx +
mov [ebp+var_5A5C] eax +
jl loc_1002548  +
mov eax [ebp+var_5A8C] +
cmp [eax+14h] ebx +
jnz loc_10115BF  +
cmp [ebp+var_5A5C] ebx +
mov [ebp+var_5ABC] 1 +
mov edi 41203h +
jl loc_1002590  +
cmp [ebp+var_5A5C] edi +
jz loc_1002590  +
push [ebp+var_5AA4]  +
call sub_100708D  +
mov [ebp+var_5ABC] eax +
cmp eax ebx +
jz loc_1002590  +
mov eax [ebp+var_5AA4] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+1Ch]  +
cmp eax ebx +
jz loc_1007960  +
or [ebp+hToken] 0FFFFFFFFh +
mov [ebp+var_5A70] offset off_1005BBC +
mov [ebp+var_5A64] ebx +
mov byte ptr [ebp+var_4] 0Eh +
cmp [ebp+var_5ABC] ebx +
jz loc_10025C4  +
mov esi 41225h +
cmp [ebp+var_5A5C] esi +
jz loc_10115CE  +
cmp [ebp+var_5A5C] ebx +
jl loc_100D698  +
cmp [ebp+var_5A5C] edi +
jz loc_100D698  +
mov [ebp+var_5A74] ebx +
mov eax [ebp+var_5AA4] +
lea edx [ebp+var_5A74] +
push edx  +
push offset dword_1002F60  +
mov [ebp+var_5AD4] ebx +
mov ecx [eax] +
push eax  +
mov byte ptr [ebp+var_4] 10h +
mov [ebp+var_5AFC] ebx +
call dword ptr [ecx]  +
cmp eax ebx +
jl loc_100264B  +
mov eax [ebp+var_5A74] +
mov ecx [eax] +
lea edx [ebp+var_5AD4] +
push edx  +
push eax  +
call dword ptr [ecx+0Ch]  +
cmp eax ebx +
jl loc_101175E  +
mov eax [ebp+var_5A74] +
mov ecx [eax] +
lea edx [ebp+var_5B14] +
push edx  +
push eax  +
call dword ptr [ecx+14h]  +
cmp eax ebx +
jl loc_100264B  +
mov eax [ebp+var_5B14] +
mov [ebp+var_47AC] eax +
lea ecx [ebp+var_4704] +
call sub_1001FA5  +
mov ebx [ebp+var_5AA4] +
lea eax [ebp+var_4704] +
push eax  +
lea eax [ebp+var_51B0] +
push eax  +
mov byte ptr [ebp+var_4] 11h +
call sub_10070F2  +
mov edi 80070020h +
cmp eax edi +
jz loc_1011769  +
cmp [ebp+var_46F8] 19h +
jnb loc_100F24E  +
mov ebx [ebp+var_5AA4] +
lea eax [ebp+var_51B0] +
push eax  +
call sub_1006DFD  +
xor esi esi +
push esi  +
lea ecx [ebp+var_5A68] +
mov [ebp+var_5AF8] 1 +
call sub_1001F59  +
push esi  +
lea ecx [ebp+var_5A60] +
call sub_1001F59  +
mov ecx [ebp+var_5AA4] +
lea eax [ebp+var_51B0] +
push eax  +
call sub_10071B7  +
cmp eax edi +
jz loc_1011781  +
mov ebx [ebp+var_5AA4] +
lea eax [ebp+var_51B0] +
push eax  +
call sub_1007705  +
and [ebp+var_5A84] 0 +
mov eax [ebp+var_5AA4] +
mov ecx [eax] +
lea edx [ebp+var_5A84] +
push edx  +
push offset loc_1006DE8  +
push eax  +
mov byte ptr [ebp+var_4] 12h +
call dword ptr [ecx]  +
mov [ebp+var_5A5C] eax +
test eax eax +
jl loc_1002733  +
mov ebx [ebp+var_5A84] +
lea eax [ebp+var_51B0] +
push eax  +
call sub_10077E5  +
mov [ebp+var_5A5C] eax +
mov ebx [ebp+var_5AA4] +
lea eax [ebp+var_5AB0] +
push eax  +
lea eax [ebp+var_51B0] +
push eax  +
call sub_1006E71  +
cmp eax edi +
jz loc_101182E  +
xor esi esi +
cmp eax esi +
jl loc_100DA26  +
push [ebp+var_5AAC]  +
push [ebp+var_5AB0]  +
push esi  +
push dword_1026208  +
call sub_10077AC  +
mov [ebp+var_5AB0] eax +
mov [ebp+var_5AAC] edx +
cmp edx esi +
ja loc_1002797  +
jb loc_10077D4  +
cmp eax 4000h +
jb loc_10077D4  +
cmp dword_1026040 esi +
jnz loc_101183F  +
mov ebx [ebp+var_5AA4] +
lea eax [ebp+var_51B0] +
push eax  +
call sub_1006F2E  +
cmp eax edi +
jz loc_101182E  +
mov ebx [ebp+var_5AA4] +
lea eax [ebp+var_51B0] +
push eax  +
call sub_1006FCD  +
xor ebx ebx +
mov [ebp+var_5AB8] ebx +
cmp [ebp+var_5ABC] ebx +
jz loc_100282B  +
cmp [ebp+var_4BC4] ebx +
jnz loc_100282B  +
cmp [ebp+hToken] 0FFFFFFFFh +
jnz loc_101186C  +
mov eax [ebp+var_5AA4] +
mov ecx [eax] +
lea edx [ebp+var_5A78] +
push edx  +
push eax  +
call dword ptr [ecx+38h]  +
cmp [ebp+hToken] 0FFFFFFFFh +
mov esi eax +
jnz loc_1011882  +
cmp esi ebx +
jl loc_100F3BB  +
xor eax eax +
cmp esi ebx +
setnl al  +
mov [ebp+var_5AB8] eax +
lea ecx [ebp+var_4570] +
call sub_1003DBC  +
mov eax [ebp+var_5AA4] +
mov ecx [eax] +
lea edx [ebp+var_5B44] +
push edx  +
push 208h  +
lea edx [ebp+var_44C] +
push edx  +
push eax  +
mov byte ptr [ebp+var_4] 13h +
call dword ptr [ecx+28h]  +
cmp eax ebx +
jl loc_10028C9  +
push 0FFFFFFFFh  +
push ebx  +
lea eax [ebp+var_44C] +
push eax  +
mov eax [ebp+var_4570] +
lea ecx [ebp+var_4570] +
call dword ptr [eax+10h]  +
lea eax [ebp+var_51B0] +
push eax  +
lea ebx [ebp+var_4570] +
mov [ebp+var_5AA8] 1 +
call sub_1007A73  +
cmp dword_10262BC 0 +
jz loc_10028C9  +
mov al byte_10262C0 +
cmp al 4 +
jb loc_100D8E0  +
mov eax dword_10262A8 +
mov ecx dword_10262AC +
mov edx 4009h +
mov edi 80000000h +
and eax edx +
and ecx edi +
or eax ecx +
jnz loc_10118E6  +
lea ecx [ebp+var_51B0] +
xor edi edi +
call sub_100726F  +
cmp eax edi +
mov [ebp+var_5A5C] eax +
jl loc_101192B  +
cmp [ebp+var_4818] edi +
jnz loc_101192B  +
test [ebp+var_4B50] 200h +
jz loc_100291C  +
push [ebp+var_5AA4]  +
lea eax [ebp+var_51B0] +
push eax  +
call sub_1007417  +
cmp eax edi +
mov [ebp+var_5A5C] eax +
jl loc_10119F7  +
cmp [ebp+var_4564] 104h +
jnb loc_10119FD  +
push [ebp+var_5A74]  +
mov esi [ebp+var_5A8C] +
push edi  +
push [ebp+var_5AD4]  +
mov ecx esi +
call sub_1005FC2  +
cmp eax edi +
jnz loc_1011A03  +
cmp [ebp+var_5A5C] edi +
jl loc_100295F  +
cmp [esi+14h] edi +
jnz loc_1011A13  +
xor ebx ebx +
mov [ebp+var_5AB4] ebx +
mov byte ptr [ebp+var_4] 14h +
cmp [ebp+var_5ABC] edi +
jz loc_100299F  +
cmp [ebp+var_4BC4] edi +
jnz loc_100299F  +
cmp [ebp+var_4564] edi +
jz loc_100299F  +
mov eax [ebp+var_5AA4] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+1Ch]  +
cmp eax edi +
jz loc_100299F  +
cmp [ebp+var_5AB8] edi +
jz loc_1011AE3  +
mov eax [ebp+var_5AA4] +
mov ecx [eax] +
lea edx [ebp+var_5A60] +
push edx  +
push eax  +
call dword ptr [ecx+3Ch]  +
mov esi eax +
cmp esi edi +
mov [ebp+var_5A5C] esi +
jl loc_1011BCE  +
xor esi esi +
mov [ebp+pUnk] esi +
mov byte ptr [ebp+var_4] 16h +
cmp [ebp+var_5ABC] edi +
jz loc_1002A4F  +
cmp [ebp+var_4BC4] edi +
jnz loc_1002A4F  +
cmp [ebp+var_5A78] edi +
jz loc_100F393  +
push [ebp+var_5A78]  +
lea ecx [ebp+pUnk] +
call sub_1001F59  +
mov esi [ebp+pUnk] +
cmp esi edi +
jz loc_1002A4F  +
mov eax [ebp+var_5A8C] +
cmp [eax+14h] edi +
jnz loc_1011C2B  +
lea eax [ebp+var_5A68] +
push eax  +
lea eax [ebp+var_44DC] +
push eax  +
push esi  +
push dword_1026064  +
lea eax [ebp+var_51B0] +
push [ebp+var_5AA4]  +
push eax  +
call sub_100ECEF  +
mov [ebp+var_5A5C] eax +
cmp eax edi +
jnz loc_100F708  +
mov [ebp+var_5AF8] edi +
cmp [ebp+var_5A5C] edi +
jl loc_100F2B8  +
xor eax eax +
cmp [ebp+var_5A60] edi +
lea ecx [ebp+var_51B0] +
setnz al  +
push eax  +
call sub_10067C7  +
cmp eax edi +
mov [ebp+var_5A5C] eax +
jl loc_1011CB0  +
mov [ebp+var_5A88] edi +
mov byte ptr [ebp+var_4] 17h +
lea eax [ebp+var_5A60] +
cmp [ebp+var_5A60] edi +
jz loc_1011CB3  +
push dword ptr [eax]  +
lea ecx [ebp+var_5A88] +
call sub_1001F59  +
push [ebp+var_5A74]  +
mov ecx [ebp+var_5A8C] +
push edi  +
push [ebp+var_5AD4]  +
call sub_1005FC2  +
cmp eax edi +
jnz loc_1011CBE  +
mov eax [ebp+var_4B50] +
mov ecx eax +
and ecx 8 +
mov [ebp+var_5B10] ecx +
and eax 2 +
lea ecx [ebp+var_5A58] +
mov [ebp+var_4468] 1 +
mov [ebp+var_4464] edi +
mov [ebp+var_5AC4] edi +
mov [ebp+var_5AC0] edi +
mov [ebp+var_5AF0] edi +
mov [ebp+var_5AEC] eax +
call sub_10067A5  +
mov byte ptr [ebp+var_4] 18h +
mov [ebp+var_5ACC] edi +
xor ebx ebx +
cmp [ebp+var_5ACC] ebx +
jnz loc_1006CE0  +
mov edi [ebp+var_5A88] +
cmp edi [ebp+var_5A68] +
jnz loc_1002BCC  +
cmp [ebp+hToken] 0FFFFFFFFh +
jnz loc_1011CEB  +
push [ebp+var_5A8C]  +
lea eax [ebp+var_5AB0] +
push [ebp+ppbc]  +
push [ebp+var_5AA4]  +
push eax  +
lea eax [ebp+var_5AC4] +
push eax  +
lea eax [ebp+var_51B0] +
push eax  +
push [ebp+var_5ABC]  +
push [ebp+var_456C]  +
call sub_100646E  +
cmp [ebp+hToken] 0FFFFFFFFh +
mov esi eax +
jnz loc_1011D01  +
mov eax 80040D23h +
cmp esi eax +
jz loc_1011D11  +
push [ebp+var_5A74]  +
mov ecx [ebp+var_5A8C] +
push [ebp+var_5AFC]  +
push [ebp+var_5AD4]  +
call sub_1005FC2  +
cmp eax ebx +
jnz loc_1011D1C  +
cmp [ebp+var_5A5C] ebx +
jl loc_1011D2B  +
cmp edi ebx +
jz loc_1004278  +
mov eax [edi] +
lea ecx [ebp+var_5B40] +
push ecx  +
push ebx  +
push ebx  +
push 5Fh  +
push edi  +
call dword ptr [eax+0Ch]  +
mov esi eax +
push esi  +
mov [ebp+var_5A5C] esi +
call sub_10066ED  +
test eax eax +
jnz loc_1011D4B  +
cmp esi ebx +
jl loc_1011D73  +
test byte ptr [ebp+var_4B50] 0Ah +
jz loc_1011F1B  +
lea eax [ebp+var_4454] +
mov [ebp+var_5AB8] eax +
lea eax [ebp+var_2450] +
mov [ebp+var_5AF4] 1 +
mov [ebp+pperrinfo] eax +
mov ebx [ebp+var_5A88] +
xor esi esi +
cmp [ebp+var_5A5C] esi +
jl loc_100671C  +
mov eax [ebp+var_5AAC] +
cmp [ebp+var_5AC0] eax +
jb loc_1002C6C  +
ja loc_1011D86  +
mov eax [ebp+var_5AB0] +
cmp [ebp+var_5AC4] eax +
jnb loc_1011D86  +
cmp [ebp+var_4818] esi +
jnz loc_100673C  +
cmp ebx [ebp+var_5A68] +
jnz loc_1002C8C  +
cmp [ebp+var_4468] esi +
jz loc_101014E  +
push [ebp+var_5A74]  +
mov edi [ebp+var_5A8C] +
push [ebp+var_5AFC]  +
mov ecx edi +
push [ebp+var_5AD4]  +
call sub_1005FC2  +
cmp eax esi +
jnz loc_1011D97  +
cmp [edi+14h] esi +
jnz loc_1011DA6  +
mov eax [ebx] +
lea ecx [ebp+var_4488] +
push ecx  +
push ebx  +
call dword ptr [eax+10h]  +
mov esi eax +
push esi  +
mov [ebp+var_5A5C] esi +
call sub_10066ED  +
test eax eax +
jnz loc_1011DB5  +
cmp esi 4121Bh +
jz loc_1011E9C  +
cmp esi 8004173Eh +
jz loc_1011E9C  +
test esi esi +
jl loc_1002C32  +
xor ecx ecx +
cmp [ebp+var_5AF4] ecx +
jnz loc_100696A  +
xor eax eax +
cmp [ebp+var_4480] 1 +
setz al  +
cmp eax ecx +
jz loc_100697F  +
cmp [ebp+var_5B10] ecx +
jz loc_1002C32  +
xor esi esi +
mov [ebp+pv] esi +
cmp eax esi +
jz loc_100698A  +
mov esi 1000h +
mov [ebp+var_5AD0] esi +
cmp [edi+14h] ecx +
jnz loc_1011DA6  +
mov edi [ebp+var_5AB8] +
mov eax [ebx] +
push edi  +
lea ecx [ebp+var_5AD0] +
push ecx  +
push ebx  +
call dword ptr [eax+14h]  +
push eax  +
mov [ebp+var_5AA8] eax +
call sub_10066ED  +
test eax eax +
jnz loc_1011DB5  +
mov eax [ebp+var_5AD0] +
cmp eax esi +
ja loc_1011DFD  +
xor ecx ecx +
mov [edi+eax*2] cx +
cmp [ebp+var_5AA8] 0 +
jl loc_100ECC9  +
mov eax [ebp+var_5AAC] +
cmp [ebp+var_5AC0] eax +
jb loc_1002DC0  +
ja loc_1011E33  +
mov eax [ebp+var_5AB0] +
cmp [ebp+var_5AC4] eax +
jnb loc_1011E33  +
xor ebx ebx +
inc ebx  +
cmp [ebp+var_5AA8] 41709h +
jz loc_1002E2E  +
mov eax [ebp+var_5A8C] +
cmp dword ptr [eax+14h] 0 +
jnz loc_1011E47  +
mov esi [ebp+pperrinfo] +
mov eax [ebp+var_5A88] +
push esi  +
lea edx [ebp+var_5ADC] +
mov ebx 1000h +
push edx  +
mov [ebp+var_5ADC] ebx +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+14h]  +
push eax  +
mov [ebp+var_5AA8] eax +
call sub_10066ED  +
test eax eax +
jnz loc_1011E56  +
mov eax [ebp+var_5ADC] +
cmp eax ebx +
jnb loc_100FBC3  +
xor ecx ecx +
mov [esi+eax*2] cx +
xor ebx ebx +
cmp [ebp+var_5AD0] 0 +
jz loc_1002F04  +
lea eax [ebp+var_4488] +
push eax  +
lea ecx [ebp+var_51B0] +
call sub_1005FEF  +
and [ebp+var_4484] 0 +
mov [ebp+var_5A5C] eax +
test eax eax +
jl loc_1011E69  +
push [ebp+var_5AD0]  +
lea ecx [ebp+var_51B0] +
push [ebp+var_5AB8]  +
call sub_100EC49  +
mov ecx [ebp+var_5A88] +
mov [ebp+var_5A5C] eax +
cmp ecx [ebp+var_5A60] +
jz loc_1002EA0  +
mov ecx [ebp+var_5AD0] +
add [ebp+var_5AC4] ecx +
adc [ebp+var_5AC0] 0 +
test eax eax +
jl loc_1011E69  +
push 4  +
pop ecx  +
mov edi offset dword_1002F50 +
lea esi [ebp+var_4478] +
xor eax eax +
cmps   +
jnz loc_1002F04  +
cmp [ebp+var_4468] 1 +
jnz loc_1002F04  +
cmp [ebp+var_4464] 13h +
jnz loc_1002F04  +
mov esi 2000h +
cmp [ebp+var_5A4C] esi +
jnb loc_1002F04  +
mov eax [ebp+var_5A58] +
push 0FFFFFFFFh  +
push [ebp+var_5A4C]  +
lea ecx [ebp+var_5A58] +
push [ebp+var_5AB8]  +
call dword ptr [eax+10h]  +
cmp [ebp+var_5A4C] esi +
ja loc_100FBB2  +
cmp [ebp+var_5AA8] 41709h +
jnz loc_1002F18  +
test ebx ebx +
jnz loc_1002C32  +
mov eax [ebp+var_5AB8] +
mov ecx [ebp+pperrinfo] +
mov [ebp+var_5AB8] ecx +
mov ecx [ebp+var_5ADC] +
mov [ebp+pperrinfo] eax +
mov eax [ebp+var_5AD0] +
mov [ebp+var_5AD0] ecx +
mov [ebp+var_5ADC] eax +
jmp loc_1002D8D  +
***
call sub_1001D89  +
mov esi ecx +
xor ebx ebx +
cmp [esi] ebx +
jnz loc_101450D  +
lea edi [esi+8] +
push edi  +
call ds:InterlockedDecrement  +
cmp [esi] ebx +
jnz loc_1014528  +
call __EH_epilog3  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx] +
test eax eax +
jz loc_100C98D  +
mov ecx [ebp+arg_0] +
mov ecx [ecx] +
mov edx [eax+4] +
cmp [edx+10h] ecx +
jnz loc_100C994  +
mov ecx [ebp+arg_4] +
mov eax edx +
mov [ecx] eax +
xor eax eax +
inc eax  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov ecx [ebp+arg_0] +
mov [esi] ecx +
call sub_100300A  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
push edi  +
lea edi [esi+8] +
cmp dword ptr [esi] 0 +
jnz loc_1014698  +
push edi  +
call ds:InterlockedIncrement  +
cmp dword ptr [esi] 0 +
jnz loc_10146A4  +
pop edi  +
pop esi  +
retn   +
***
call sub_1001D89  +
mov esi ecx +
mov [ebp-10h] esi +
call sub_1001DF9  +
and dword ptr [ebp-4] 0 +
lea ecx [esi+54h] +
call sub_1001DF9  +
lea ecx [esi+0A8h] +
call sub_1001FA5  +
and dword ptr [esi+23Ch] 0 +
lea ecx [esi+240h] +
mov byte ptr [ebp-4] 2 +
call sub_1003084  +
mov eax esi +
call __EH_epilog3  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
lea ecx [esi+4] +
call sub_1001E18  +
mov dword ptr [esi] offset off_1001F80 +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
lea eax [esi+10h] +
push eax  +
mov dword ptr [esi] offset off_1001F38 +
call sub_1001E75  +
mov dword ptr [esi] offset off_1001D4C +
pop esi  +
retn   +
***
call sub_1001D89  +
mov [ebp-10h] ecx +
mov dword ptr [ecx] offset off_1001F84 +
and dword ptr [ebp-4] 0 +
cmp dword ptr [ecx+4] 0 +
jnz loc_101109F  +
mov dword ptr [ecx] offset off_1002038 +
add ecx 10h +
call sub_10030A0  +
call __EH_epilog3  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_1012E23  +
add eax 4 +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_4] +
push esi  +
push edi  +
mov edi [ebp+Destination] +
not ebx  +
mov esi [edi] +
push esi  +
mov eax ebx +
and eax esi +
push eax  +
push edi  +
call ds:__imp_InterlockedCompareExchange  +
cmp esi eax +
jnz loc_1003129  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
and [ebp+var_4] 0 +
push esi  +
mov esi ecx +
call ds:GetCurrentThreadId  +
mov [ebp+var_8] eax +
lea eax [esi+4] +
push eax  +
lea ecx [ebp+var_C] +
call sub_1002FEC  +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_8] +
push eax  +
mov ecx esi +
call sub_1002FB9  +
pop esi  +
test eax eax +
jz loc_100318B  +
push [ebp+arg_0]  +
mov ecx [ebp+var_4] +
call sub_100319C  +
mov ecx [ebp+var_C] +
call sub_1002F84  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
add [ecx+18h] eax +
mov eax [ecx+18h] +
mov edx [ecx+8] +
cmp eax dword_1026644[edx*4] +
jb loc_10031BD  +
add [ecx+0Ch] eax +
and dword ptr [ecx+18h] 0 +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
add eax 4 +
push eax  +
call ds:InterlockedDecrement  +
cmp eax 0FFFFFFFFh +
jz loc_1010E07  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
jz loc_1012DC1  +
pop ebp  +
jmp off_1026660  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
test edx edx +
jz loc_1003232  +
lea eax [ecx+4] +
cmp edx eax +
jz loc_1003232  +
mov eax [edx] +
push esi  +
mov esi [eax] +
mov [edx] esi +
pop esi  +
cmp eax [ecx+8] +
jnz loc_1003228  +
mov [ecx+8] edx +
dec dword ptr [ecx+0Ch]  +
and dword ptr [eax] 0 +
pop ebp  +
retn 4  +
xor eax eax +
jmp loc_100322E  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1003261  +
test [ebp+arg_0] 1 +
jz loc_1003255  +
push esi  +
call off_1026660  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
lea ecx [esi+0A8h] +
mov dword ptr [esi+240h] offset off_1001F80 +
call sub_10030A0  +
lea ecx [esi+54h] +
call sub_1002011  +
mov ecx esi +
pop esi  +
jmp sub_1002011  +
***
call sub_1001D89  +
mov esi ecx +
mov [ebp-14h] esi +
xor ebx ebx +
mov [ebp-4] ebx +
cmp [esi+9A4h] ebx +
jz loc_100331C  +
push dword ptr [esi+99Ch]  +
lea ecx [ebp-10h] +
call sub_1002059  +
mov eax [esi+9A4h] +
mov byte ptr [ebp-4] 7 +
cmp [eax+0B4h] ebx +
jz loc_100330E  +
mov ecx [esi+9A0h] +
push eax  +
call sub_10041EF  +
mov edi [eax] +
push esi  +
lea ecx [edi+244h] +
call sub_1005E38  +
cmp [edi+250h] ebx +
jnz loc_100330E  +
push dword ptr [esi+9A4h]  +
mov ecx [esi+9A0h] +
call sub_1005EE4  +
cmp eax ebx +
jz loc_100330E  +
push 1  +
mov ecx eax +
call sub_100323B  +
cmp [ebp-10h] ebx +
jz loc_100331C  +
push dword ptr [ebp-10h]  +
call ds:LeaveCriticalSection  +
mov eax [esi+9E4h] +
mov byte ptr [ebp-4] 5 +
cmp eax ebx +
jz loc_1003330  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
lea ecx [esi+9BCh] +
mov byte ptr [ebp-4] 4 +
call sub_100338B  +
lea ecx [esi+7FCh] +
call sub_10030A0  +
lea ecx [esi+668h] +
call sub_10030A0  +
lea ecx [esi+5FCh] +
call sub_1002011  +
lea ecx [esi+41Ch] +
mov [ebp-4] bl +
call sub_10030C1  +
mov esi [esi+408h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
cmp esi ebx +
jnz loc_101140A  +
call __EH_epilog3  +
retn   +
***
mov eax [esp+8+arg_4] +
mov ecx [ebp-10h] +
mov large fs:0 ecx +
pop ecx  +
pop edi  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
push ecx  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi+9Ch] +
mov dword ptr [esi] offset off_10033EC +
test eax eax +
jz loc_1003442  +
cmp dword ptr [esi+98h] 0 +
jz loc_1003442  +
push eax  +
call ds:RegCloseKey  +
mov dword ptr [esi] offset off_1003454 +
lea ecx [esi+4] +
pop esi  +
jmp sub_1001F05  +
***
call sub_1001D89  +
lea ecx [ebp-10h] +
call sub_1008466  +
push offset aCprotocolhandl  +
xor edi edi +
push 0FFFFFFFFh  +
mov [ebp-4] edi +
call nullsub_1  +
mov esi [ebp+8] +
mov eax [esi+0Ch] +
mov [ebp-18h] eax +
mov eax hEvent +
xor ebx ebx +
mov [ebp-14h] eax +
cmp [esi+14h] edi +
jnz loc_10034E7  +
push 0FFFFFFFFh  +
push edi  +
lea eax [ebp-18h] +
push eax  +
push 2  +
call ds:WaitForMultipleObjects  +
sub eax edi +
jnz loc_100CAAF  +
call sub_100DA77  +
mov ebx 80040D23h +
cmp ebx edi +
jge loc_10034BD  +
cmp [ebp-10h] edi +
jl loc_10034F2  +
call ds:CoUninitialize  +
call __EH_epilog3  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_1012CA1  +
add eax 4 +
pop ebp  +
retn 4  +
***
mov edx [ecx] +
test edx edx +
jz loc_100356D  +
mov eax [ecx+4] +
test eax eax +
jz loc_1003563  +
mov [ecx+8] eax +
mov eax [eax] +
add edx 8 +
mov [ecx+4] eax +
cmp eax edx +
jnz loc_1003563  +
and dword ptr [ecx+4] 0 +
mov ecx [ecx+4] +
lea eax [ecx+4] +
test ecx ecx +
jnz locret_1003572  +
mov eax offset unk_1026214 +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+8] +
push edi  +
lea eax [esi+4] +
push eax  +
call ds:InterlockedDecrement  +
mov edi eax +
test edi edi +
jz loc_100EA98  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
call __SEH_prolog4  +
xor ebx ebx +
mov [ebp+ms_exc.disabled] ebx +
mov eax large fs:18h +
mov esi [eax+4] +
mov [ebp+var_1C] ebx +
mov edi offset Destination +
push ebx  +
push esi  +
push edi  +
call ds:__imp_InterlockedCompareExchange  +
cmp eax ebx +
jnz loc_10130B0  +
xor esi esi +
inc esi  +
mov eax dword_10260EC +
cmp eax esi +
jz loc_10130CF  +
mov eax dword_10260EC +
test eax eax +
jnz loc_10036E2  +
mov dword_10260EC esi +
push offset dword_1003760  +
push offset dword_1003754  +
call sub_100A667  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_10130DC  +
mov eax dword_10260EC +
cmp eax esi +
jnz loc_1003697  +
push (offset loc_100374F+1)  +
push offset dword_10036EC  +
call _initterm  +
pop ecx  +
pop ecx  +
mov dword_10260EC 2 +
cmp [ebp+var_1C] ebx +
jnz loc_10036A4  +
push ebx  +
push edi  +
call ds:InterlockedExchange  +
cmp dword_1026920 ebx +
jnz loc_10130EA  +
push dword_1026220  +
push dword_1026224  +
push dword_102621C  +
call sub_10084EE  +
add esp 0Ch +
mov dword_10260B8 eax +
cmp dword_10260AC ebx +
jnz loc_101313C  +
push eax  +
call ds:exit  +
mov dword_1026A00 esi +
jmp loc_1003673  +
***
mov al ds:310100AEh +
scas   +
add [ecx] al +
popf   +
movs   +
add [ecx] al +
scas   +
movs   +
add [ecx] al +
xchg eax edx +
mov dl 0 +
add [eax+330100A6h] edx +
lods   +
add [ecx] al +
sbb ah [ebx-5CD4FF00h] +
add [ecx] al +
cmp al 0A3h +
add [ecx] al +
dec ebp  +
mov ds:0A35E0100h eax +
add [ecx] al +
outs   +
mov ds:0A3800100h eax +
add [ecx] al +
pushf   +
mov ds:0A3B60100h eax +
add [ecx] al +
shl byte ptr [ebx-5C1CFF00h] cl +
add [ecx] al +
sub al 0B2h +
add [ecx] al +
hlt   +
mov ds:0A42D0100h eax +
add [ecx] al +
arpl [eax+eax+0A4BF01h] sp +
add [eax] eax +
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
mov ecx [esi+418h] +
test ecx ecx +
jz loc_10128CD  +
and [ebp+var_4] 0 +
push 4  +
lea eax [ebp+var_4] +
push eax  +
call sub_10037FA  +
test eax eax +
jl loc_10037D4  +
mov eax [ebp+var_4] +
cmp eax [esi+40Ch] +
ja loc_10128D7  +
mov ecx [esi+418h] +
push eax  +
push dword ptr [esi+404h]  +
call sub_10037FA  +
mov edx [ebp+var_4] +
mov [esi+410h] edx +
lea ecx [esi+9D8h] +
mov esi [esi+404h] +
and dword ptr [ecx+4] 0 +
mov [ecx] esi +
mov [ecx+8] edx +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push edi  +
mov edi [ebp+arg_4] +
mov ebx ecx +
test edi edi +
jz loc_1012790  +
push esi  +
mov esi [ebp+arg_0] +
xor eax eax +
test eax eax +
jl loc_100382F  +
lea eax [ebp+arg_4] +
push eax  +
push edi  +
push esi  +
mov ecx ebx +
call sub_100383B  +
sub edi [ebp+arg_4] +
add esi [ebp+arg_4] +
test edi edi +
jnz loc_1003814  +
pop esi  +
pop edi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1Ch +
mov eax [ebp+arg_8] +
push esi  +
xor esi esi +
push edi  +
mov edi ecx +
mov [ebp+var_C] esi +
cmp eax esi +
jz loc_1003855  +
mov [eax] esi +
mov eax [edi+2Ch] +
test dword ptr [eax+80h] 80000000h +
jz loc_1014020  +
cmp [edi+6] si +
jz loc_101402A  +
mov eax [edi+2Ch] +
mov edx [ebp+arg_4] +
mov ecx [eax+80h] +
and ecx 3FFFFFFFh +
push ebx  +
mov [ebp+var_14] edx +
mov [ebp+var_8] esi +
mov [ebp+var_18] ecx +
cmp edx esi +
jz loc_10038F4  +
mov eax [edi+2Ch] +
test dword ptr [eax+80h] 80000000h +
mov ebx [eax+88h] +
mov esi [eax+90h] +
mov [ebp+var_1C] ebx +
jz loc_10140DB  +
mov eax ebx +
sub eax esi +
cmp ebx esi +
jb loc_101403F  +
test eax eax +
jnz loc_100C5E5  +
mov eax [edi+2Ch] +
test dword ptr [eax+80h] 40000000h +
jnz loc_1014046  +
mov ecx edi +
call sub_1001477  +
mov [ebp+var_C] eax +
test eax eax +
jnz loc_10038F4  +
mov edx [ebp+var_14] +
test edx edx +
jnz loc_100C5DD  +
mov ecx [ebp+arg_8] +
test ecx ecx +
jz loc_1003903  +
mov eax [ebp+arg_4] +
sub eax [ebp+var_14] +
mov [ecx] eax +
mov eax [edi+2Ch] +
test dword ptr [eax+80h] 80000000h +
mov eax 80040DB4h +
jz loc_100391A  +
mov eax [ebp+var_C] +
pop ebx  +
pop edi  +
pop esi  +
leave   +
retn 0Ch  +
***
push eax  +
call sub_10049CB  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
call sub_1001D89  +
mov ebx ecx +
call sub_1003789  +
push 254h  +
mov edi eax +
call off_102665C  +
mov [ebp-10h] eax +
xor esi esi +
mov [ebp-4] esi +
cmp eax esi +
jz loc_1003966  +
mov ecx eax +
call sub_1003034  +
mov esi eax +
mov [ebp-1Ch] esi +
mov dword ptr [ebp-4] 1 +
test esi esi +
jz loc_1012B71  +
test edi edi +
jge loc_1012B7B  +
or dword ptr [ebp-4] 0FFFFFFFFh +
test esi esi +
jz loc_1003991  +
push 1  +
mov ecx esi +
call sub_100323B  +
mov eax edi +
call __EH_epilog3  +
retn 4  +
***
sub ecx eax +
sbb eax eax +
not eax  +
and ecx eax +
mov eax esp +
and eax 0FFFFF000h +
cmp ecx eax +
jb loc_1003DAB  +
mov eax ecx +
pop ecx  +
xchg eax esp +
mov eax [eax] +
mov [esp+0] eax +
retn   +
***
mov eax eax +
push eax  +
push large dword ptr fs:0  +
lea eax [esp+4+arg_0] +
sub esp [esp+0Ch] +
push ebx  +
push esi  +
push edi  +
mov [eax] ebp +
mov ebp eax +
mov eax dword_1026044 +
xor eax ebp +
push eax  +
mov [ebp-10h] eax +
push dword ptr [ebp-4]  +
mov dword ptr [ebp-4] 0FFFFFFFFh +
lea eax [ebp-0Ch] +
mov large fs:0 eax +
retn   +
***
mov ecx [ebp-10h] +
xor ecx ebp +
call sub_1001E40  +
jmp __EH_epilog3  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_4] 0 +
ja loc_1013659  +
mov eax [ebp+arg_0] +
jb loc_1003A5B  +
cmp eax 0FFFFFFFFh +
ja loc_1013659  +
mov ecx [ebp+arg_8] +
mov [ecx] eax +
xor eax eax +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax [ebp+arg_8] +
and [ebp+var_4] 0 +
mov [ebp+var_8] eax +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+arg_4] +
push eax  +
lea eax [ebp+var_8] +
push eax  +
call sub_1003C75  +
mov eax [ebp+arg_0] +
mov ecx [ebp+var_4] +
mov [eax] ecx +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 28h +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+lpString] +
mov esi ecx +
test edi edi +
jz loc_1013724  +
mov eax [ebp+arg_8] +
mov ebx [ebp+arg_4] +
mov [ebp+var_4] ebx +
mov [ebp+arg_4] eax +
cmp eax 0FFFFFFFFh +
jnz loc_1003B28  +
push edi  +
call ds:lstrlenW  +
mov [ebp+arg_8] eax +
lea eax [ebp+arg_8] +
push eax  +
lea ecx [ebp+arg_4] +
call sub_1003CFC  +
push 1  +
lea eax [ebp+arg_8] +
push eax  +
push [ebp+arg_4]  +
lea eax [ebp+var_8] +
push eax  +
lea ecx [ebp+var_4] +
call sub_1003C45  +
mov ecx eax +
call sub_1003C9C  +
mov ecx [esi+8] +
cmp [eax] ecx +
ja loc_1004E10  +
test ebx ebx +
jnz loc_1003B75  +
mov eax [esi+4] +
cmp edi eax +
jnb loc_1003D57  +
push 1  +
lea eax [ebp+arg_8] +
push eax  +
lea ecx [ebp+arg_4] +
call sub_1003C9C  +
push dword ptr [eax]  +
mov edx [esi] +
mov ecx esi +
call dword ptr [edx+4]  +
push 2  +
lea eax [ebp+arg_8] +
push eax  +
lea ecx [ebp+arg_4] +
call sub_1003BEE  +
mov edi [eax] +
push 2  +
lea eax [ebp+arg_8] +
push eax  +
lea ecx [ebp+var_4] +
call sub_1003BEE  +
push dword ptr [eax]  +
lea eax [ebp+var_8] +
push edi  +
push eax  +
call sub_1003A99  +
mov ecx [esi+8] +
add ecx ecx +
cmp [eax] ecx +
ja loc_1013748  +
push [ebp+arg_4]  +
lea eax [ebp+arg_4] +
push eax  +
lea ecx [ebp+var_4] +
call sub_1003C45  +
mov eax [eax] +
mov [esi+0Ch] eax +
mov eax [esi+4] +
push edi  +
push [ebp+lpString]  +
lea eax [eax+ebx*2] +
push eax  +
call memcpy  +
mov eax [esi+0Ch] +
mov ecx [esi+4] +
add esp 0Ch +
xor edx edx +
mov [ecx+eax*2] dx +
mov eax [esi+0Ch] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+arg_4] +
push eax  +
push ecx  +
call sub_1003C17  +
mov eax [ebp+arg_0] +
mov ecx [ebp+var_4] +
mov [eax] ecx +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax] +
mov ecx [ebp+arg_4] +
mul  dword ptr [ecx] +
test edx edx +
ja loc_1013692  +
cmp eax 0FFFFFFFFh +
ja loc_1013692  +
mov ecx [ebp+arg_8] +
mov [ecx] eax +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax [ebp+arg_4] +
and [ebp+var_4] 0 +
mov [ebp+var_8] eax +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_8] +
push eax  +
push ecx  +
call sub_1003C75  +
mov eax [ebp+arg_0] +
mov ecx [ebp+var_4] +
mov [eax] ecx +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [eax] +
mov eax [ebp+arg_4] +
mov eax [eax] +
add eax ecx +
cmp eax ecx +
jb loc_1010BEB  +
mov ecx [ebp+arg_8] +
mov [ecx] eax +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+arg_4] +
push eax  +
push ecx  +
call sub_1003CC5  +
mov eax [ebp+arg_0] +
mov ecx [ebp+var_4] +
mov [eax] ecx +
leave   +
retn 8  +
***
mov edi edi +
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
lea ecx [ebp+arg_0] +
call sub_1003D1F  +
mov eax [eax] +
mov [esi] eax +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
mov esi ecx +
push esi  +
push dword ptr [eax]  +
call sub_1003D3E  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jl loc_1013698  +
mov ecx [ebp+arg_4] +
mov [ecx] eax +
pop ebp  +
retn 8  +
***
lea eax [eax+ecx*2] +
cmp edi eax +
jnb loc_1003B5E  +
jmp loc_1003B75  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 2Fh +
jz loc_101025C  +
cmp [ebp+arg_0] 5Ch +
jz loc_101025C  +
xor eax eax +
pop ebp  +
retn 4  +
***
sub eax 1000h +
test [eax] eax +
jmp loc_10039BA  +
***
mov edi edi +
push esi  +
mov esi ecx +
lea eax [esi+10h] +
push eax  +
push 42h  +
call sub_1001DCE  +
mov dword ptr [esi] offset off_1001E50 +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov edx [eax] +
mov ecx [ebp+arg_4] +
cmp edx [ecx] +
jz loc_1003E29  +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ecx+8] +
mov eax [ebp+arg_0] +
sub esp 20h +
dec edx  +
cmp eax edx +
ja loc_1010E54  +
mov [ecx+0Ch] eax +
mov ecx [ecx+4] +
xor edx edx +
mov [ecx+eax*2] dx +
leave   +
retn 4  +
***
mov edx [eax+4] +
cmp edx [ecx+4] +
jnz loc_1003DF7  +
mov edx [eax+8] +
cmp edx [ecx+8] +
jnz loc_1003DF7  +
mov eax [eax+0Ch] +
cmp eax [ecx+0Ch] +
jnz loc_1003DF7  +
xor eax eax +
inc eax  +
jmp loc_1003DF9  +
***
mov edi edi +
push ebp  +
mov ebp esp +
lea eax [ecx+10h] +
cmp [ecx+4] eax +
jnz loc_1010B22  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call dword ptr [esi+4]  +
xor edx edx +
div  dword ptr [esi+0Ch] +
pop esi  +
mov eax edx +
pop ebp  +
retn 4  +
***
mov edi edi +
sub ecx eax +
and ecx 0Fh +
add eax ecx +
sbb ecx ecx +
or eax ecx +
pop ecx  +
jmp sub_10039A6  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [eax+0Ch] +
mov eax [eax+4] +
push ecx  +
push eax  +
call sub_1003ED7  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax dword_1026044 +
xor eax ebp +
mov [ebp+var_4] eax +
and [ebp+var_8] 0 +
push esi  +
lea eax [ebp+var_8] +
push eax  +
mov eax [ebp+arg_4] +
push 2  +
pop ecx  +
mul  ecx +
push edx  +
push eax  +
call sub_1003A3E  +
test eax eax +
jl loc_101437C  +
mov eax [ebp+var_8] +
call sub_1003E9E  +
mov esi esp +
push [ebp+var_8]  +
push [ebp+arg_0]  +
push esi  +
call memcpy  +
mov eax [ebp+arg_4] +
add esp 0Ch +
push esi  +
call sub_1003F41  +
lea esp [ebp-0Ch] +
pop esi  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_1001E40  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi eax +
push esi  +
push [ebp+lpDestStr]  +
push esi  +
push [ebp+lpDestStr]  +
push 200h  +
push 800h  +
call ds:LCMapStringW  +
cmp eax esi +
jnz loc_1014369  +
test esi esi +
jz loc_1003F7E  +
lea eax [esi+esi] +
push eax  +
push [ebp+lpDestStr]  +
call sub_1003F87  +
pop esi  +
pop ebp  +
retn 4  +
xor eax eax +
jmp loc_1003F79  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_4] +
push esi  +
mov esi dword_10260DC +
push edi  +
mov edi [ebp+arg_0] +
mov eax edi +
neg eax  +
xor ecx ecx +
and eax 3 +
test ebx ebx +
jz loc_1003FB0  +
test eax eax +
jnz loc_1014FD4  +
mov [ebp+arg_0] ebx +
shr [ebp+arg_0] 2 +
push ecx  +
push [ebp+arg_0]  +
push edi  +
call sub_100402D  +
mov ecx eax +
mov eax [ebp+arg_0] +
shl eax 2 +
add edi eax +
sub ebx eax +
jz loc_1003FE5  +
mov eax ecx +
shr eax 18h +
shl ecx 8 +
xor ecx [esi+eax*4] +
movzx eax byte ptr [edi] +
xor ecx eax +
dec ebx  +
inc edi  +
test ebx ebx +
jnz loc_1003FCF  +
mov ebx dword_10260E0 +
mov eax ecx +
shr eax 10h +
mov edx 0FFh +
and eax edx +
mov eax [ebx+eax*4] +
mov ebx dword_10260E4 +
mov edi ecx +
shr edi 8 +
and edi edx +
xor eax [ebx+edi*4] +
mov ebx dword_10260D4 +
mov edi ecx +
shr edi 18h +
xor eax [ebx+edi*4] +
mov edi ecx +
and edi edx +
xor eax [esi+edi*4] +
pop edi  +
pop esi  +
xor eax ecx +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
mov ecx [ebp+arg_0] +
mov edx dword_10260DC +
push ebx  +
lea ecx [ecx+eax*4-4] +
push esi  +
mov esi dword_10260E4 +
mov [ebp+arg_0] ecx +
push edi  +
mov ecx 0FFh +
test eax eax +
jz loc_100409F  +
mov eax [ebp+arg_8] +
mov edi [ebp+arg_8] +
mov ebx dword_10260E0 +
shr eax 10h +
shr edi 8 +
and eax ecx +
mov eax [ebx+eax*4] +
mov ebx dword_10260D4 +
and edi ecx +
xor eax [esi+edi*4] +
mov edi [ebp+arg_8] +
shr edi 18h +
xor eax [ebx+edi*4] +
mov edi [ebp+arg_8] +
and edi ecx +
xor eax [edx+edi*4] +
mov edi [ebp+arg_0] +
xor eax [edi] +
dec [ebp+arg_4]  +
sub [ebp+arg_0] 4 +
cmp [ebp+arg_4] 0 +
mov [ebp+arg_8] eax +
jnz loc_1004057  +
mov eax [ebp+arg_8] +
mov edi [ebp+arg_8] +
mov ebx dword_10260E0 +
shr eax 10h +
and eax ecx +
mov eax [ebx+eax*4] +
shr edi 8 +
and edi ecx +
xor eax [esi+edi*4] +
mov esi [ebp+arg_8] +
mov edi dword_10260D4 +
shr esi 18h +
xor eax [edi+esi*4] +
mov esi [ebp+arg_8] +
and esi ecx +
xor eax [edx+esi*4] +
pop edi  +
xor eax [ebp+arg_8] +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_1004103  +
and dword ptr [esi+1C4h] 0 +
mov dword ptr [esi] offset off_1001F84 +
mov eax esi +
pop esi  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
and dword ptr [esi+4] 0 +
lea ecx [esi+10h] +
mov dword ptr [esi] offset off_1002038 +
call sub_1001FA5  +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 24h +
push ebx  +
mov ebx [ebp+arg_4] +
push esi  +
push edi  +
push [ebp+arg_8]  +
mov esi ecx +
mov edi [esi+0Ch] +
lea eax [ebp+var_4] +
push eax  +
lea ecx [ebp+arg_4] +
mov [ebp+arg_4] ebx +
call sub_1003C45  +
cmp [eax] edi +
ja loc_1010E78  +
mov eax [ebp+arg_0] +
mov ecx [ebp+arg_8] +
pop edi  +
mov [eax+8] esi +
pop esi  +
mov [eax] ebx +
mov [eax+4] ecx +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
lea eax [ecx+10h] +
cmp [ecx+4] eax +
jnz loc_100B5B8  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_4] +
test edx edx +
jz loc_10041A6  +
mov eax [ebp+arg_0] +
push esi  +
mov esi [eax] +
mov [edx] esi +
mov [eax] edx +
pop esi  +
cmp eax [ecx+8] +
jnz loc_10041A3  +
mov [ecx+8] edx +
inc dword ptr [ecx+0Ch]  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+8] +
push edi  +
mov edi [esi+23Ch] +
lea eax [esi+0A8h] +
push eax  +
call sub_1003EB9  +
mov ebx eax +
lea eax [esi+54h] +
push eax  +
call sub_1003EB9  +
push esi  +
xor ebx eax +
call sub_1003EB9  +
xor eax ebx +
xor eax edi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
push [ebp+arg_0]  +
call sub_1003E84  +
mov ecx eax +
shl ecx 4 +
add ecx [esi+24h] +
call sub_1004219  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
and [ebp+var_4] 0 +
push esi  +
mov [ebp+var_C] ecx +
mov [ebp+var_8] ecx +
lea ecx [ebp+var_C] +
call sub_1001FDD  +
test eax eax +
jnz loc_1005E8D  +
mov eax offset unk_1026210 +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_100425A  +
mov eax [eax+8] +
pop ebp  +
retn 4  +
***
cmp eax 0FFFFFFFFh +
jz loc_1013F67  +
test eax eax +
jz loc_1001675  +
jmp loc_100D99B  +
***
mov ebx 80041700h +
jmp loc_1006BB4  +
***
or eax 0FFFFFFFFh +
jmp loc_1005246  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
add eax 4 +
push eax  +
call ds:InterlockedIncrement  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
and dword ptr [ecx] 0 +
mov [ecx+10h] eax +
pop ebp  +
retn 4  +
***
mov eax hHandle +
push esi  +
mov esi ecx +
test eax eax +
jz loc_1004339  +
push 0  +
push eax  +
call ds:WaitForSingleObject  +
test eax eax +
jnz loc_1004339  +
push 0FFFFFFFFh  +
lea ecx [esi+0A8h] +
call sub_1004792  +
pop esi  +
retn   +
***
call sub_1001D89  +
mov esi ecx +
mov [ebp-10h] esi +
xor ebx ebx +
mov [esi] ebx +
mov [esi+408h] ebx +
push ebx  +
lea ecx [esi+41Ch] +
mov [ebp-4] ebx +
mov [esi+40Ch] ebx +
call sub_10040E1  +
lea ecx [esi+5FCh] +
mov [esi+5E4h] ebx +
mov [esi+5E8h] ebx +
mov [esi+5ECh] ebx +
mov [esi+5F0h] ebx +
mov [esi+5F4h] ebx +
mov [esi+5F8h] ebx +
call sub_1001DF9  +
lea ecx [esi+668h] +
call sub_1001FA5  +
lea ecx [esi+7FCh] +
call sub_1001FA5  +
lea edi [esi+9BCh] +
push ebx  +
mov ecx edi +
mov byte ptr [ebp-4] 4 +
mov [esi+990h] ebx +
mov [esi+994h] ebx +
mov [esi+998h] ebx +
mov [esi+99Ch] ebx +
mov [esi+9A0h] ebx +
mov [esi+9A4h] ebx +
mov [esi+9A8h] ebx +
call sub_1004447  +
mov [esi+9E0h] ebx +
mov [esi+9E4h] ebx +
lea eax [esi+4] +
push ebx  +
mov ecx edi +
mov byte ptr [ebp-4] 6 +
mov [esi+9E8h] ebx +
mov [esi+404h] eax +
mov dword ptr [esi+40Ch] 400h +
call sub_10042FC  +
xor eax eax +
lea edi [esi+9ACh] +
stos   +
stos   +
stos   +
stos   +
mov [esi+9ECh] ebx +
mov [esi+9F0h] ebx +
mov eax esi +
call __EH_epilog3  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push ebx  +
push esi  +
mov esi ecx +
push edi  +
xor ebx ebx +
mov [esi+10h] eax +
mov [esi+0Ch] ebx +
mov [esi] ebx +
mov [esi+4] ebx +
xor eax eax +
mov edi offset unk_102663C +
stos   +
stos   +
lea edi [esi+18h] +
push offset ModuleName  +
mov dword ptr [esi+8] 1 +
mov [esi+14h] ebx +
mov [edi] ebx +
call ds:GetModuleHandleA  +
cmp eax ebx +
jz loc_10044A6  +
push offset ProcName  +
push eax  +
call ds:__imp_GetProcAddress  +
mov [esi+14h] eax +
cmp eax ebx +
jz loc_10044A6  +
push edi  +
call ds:GetCurrentProcess  +
push eax  +
call dword ptr [esi+14h]  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
neg eax  +
sbb eax eax +
and eax 7FFFBFFBh +
add eax 80004005h +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+Destination] +
mov esi [edi] +
mov eax esi +
or eax [ebp+arg_4] +
push esi  +
push eax  +
push edi  +
call ds:__imp_InterlockedCompareExchange  +
cmp esi eax +
jnz loc_10044F5  +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push ebx  +
push esi  +
push edi  +
lea eax [ebp+UserTime] +
push eax  +
lea eax [ebp+KernelTime] +
push eax  +
lea eax [ebp+ExitTime] +
push eax  +
mov esi ecx +
xor ebx ebx +
xor edi edi +
lea eax [ebp+CreationTime] +
push eax  +
cmp [esi+1] bl +
jnz loc_1010833  +
call ds:GetCurrentProcess  +
push eax  +
call ds:GetProcessTimes  +
test eax eax +
jz loc_1010845  +
mov edx [ebp+UserTime.dwLowDateTime] +
mov eax [ebp+KernelTime.dwLowDateTime] +
mov esi [ebp+UserTime.dwHighDateTime] +
mov ecx [ebp+KernelTime.dwHighDateTime] +
add eax edx +
adc ecx esi +
mov edi eax +
mov ebx ecx +
mov eax edi +
pop edi  +
pop esi  +
mov edx ebx +
pop ebx  +
leave   +
retn   +
***
mov eax [ecx+4] +
test eax eax +
jnz loc_1005FAB  +
cmp dword ptr [ecx+8] 0 +
jnz loc_100C98A  +
mov eax [ecx] +
test eax eax +
jz loc_100C98A  +
cmp dword ptr [eax] 0 +
jz loc_100C98A  +
mov eax [eax] +
mov [ecx+4] eax +
xor eax eax +
inc eax  +
retn   +
***
call sub_1001D89  +
mov esi ecx +
lea eax [esi+4] +
push eax  +
lea ecx [ebp-10h] +
call sub_1002FEC  +
mov edi [ebp+8] +
xor eax eax +
mov [ebp-4] eax +
cmp [esi+48h] edi +
jnz loc_1004CC4  +
mov ecx [ebp-10h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
call sub_1002F84  +
call __EH_epilog3  +
retn 4  +
***
mov eax [ecx+4] +
and eax 0FFFFFFFEh +
retn   +
***
mov edi edi +
push ebx  +
push esi  +
mov esi ecx +
push edi  +
lea edi [esi+0F8h] +
mov ecx edi +
call sub_10046DD  +
mov ecx edi +
call sub_1004600  +
mov ebx eax +
call ds:GetTickCount  +
mov edi eax +
mov eax hHandle +
sub edi ebx +
test eax eax +
jz loc_1004C58  +
cmp ds:dword_1004514 edi +
ja loc_1004C47  +
add esi 0A8h +
push 0  +
mov ecx esi +
call sub_10045BC  +
push 7530h  +
mov ecx esi +
call sub_1004670  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
call sub_1001D89  +
mov edi ecx +
lea eax [edi+4] +
push eax  +
lea ecx [ebp-14h] +
call sub_1002079  +
xor ebx ebx +
mov [ebp-4] ebx +
mov [ebp-20h] edi +
mov [ebp-1Ch] ebx +
mov [ebp-18h] ebx +
lea ecx [ebp-20h] +
call sub_1004586  +
test eax eax +
jz loc_10046C4  +
mov eax [ebp-1Ch] +
mov eax [eax+4] +
cmp [eax+14h] bl +
jnz loc_1004698  +
mov esi [eax+0Ch] +
call ds:GetTickCount  +
sub eax esi +
cmp eax [ebp+8] +
jbe loc_1004698  +
jmp loc_10146B0  +
mov ecx [ebp-14h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
call sub_100210C  +
call __EH_epilog3  +
retn 4  +
***
mov edi edi +
push ebx  +
push esi  +
push edi  +
mov esi ecx +
call sub_1004720  +
mov ebx eax +
or ebx 1 +
call ds:GetTickCount  +
mov edi eax +
mov eax [esi+0Ch] +
and edi 0FFFFFFFEh +
cmp [esi+8] eax +
jz loc_100B37C  +
cmp ebx [esi+4] +
jnz loc_100D872  +
mov [esi+eax*4+28h] edi +
mov [esi+4] ebx +
mov [esi] edi +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push ebx  +
push esi  +
xor ebx ebx +
push edi  +
mov esi ecx +
mov [ebp+plii.cbSize] 8 +
mov [ebp+var_4] ebx +
call ds:GetTickCount  +
cmp dword_1026058 7D6h +
mov edi eax +
jl loc_10146EB  +
lea eax [esi+1B8h] +
cmp [eax] ebx +
jz loc_1004785  +
cmp [eax+4] ebx +
jz loc_1004785  +
mov eax [eax+4] +
cmp eax ebx +
jz loc_1004C82  +
push ebx  +
call eax  +
cmp eax ebx +
jz loc_1004C6B  +
mov eax [esi+4] +
cmp [ebp+var_4] ebx +
jnz loc_1014717  +
mov [ebp+var_4] eax +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
call sub_1001D89  +
mov esi ecx +
and dword ptr [ebp-10h] 0 +
call ds:GetCurrentThreadId  +
mov [ebp-14h] eax +
lea eax [esi+4] +
push eax  +
lea ecx [ebp-18h] +
call sub_1002079  +
and dword ptr [ebp-4] 0 +
lea eax [ebp-10h] +
push eax  +
lea eax [ebp-14h] +
push eax  +
mov ecx esi +
call sub_1002FB9  +
test eax eax +
jz loc_100C9F2  +
mov edi [ebp-10h] +
test edi edi +
jz loc_10047DF  +
mov byte ptr [edi+14h] 1 +
mov ecx [ebp-18h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
call sub_100210C  +
test edi edi +
jz loc_10047FC  +
push dword ptr [esi+4Ch]  +
mov ecx edi +
push dword ptr [ebp+8]  +
call sub_1004809  +
call __EH_epilog3  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push ebx  +
push esi  +
push edi  +
mov esi ecx +
call ds:GetTickCount  +
mov ecx eax +
mov eax [esi+8] +
shl eax 2 +
mov ebx dword_1026644[eax] +
mov edi ds:dword_1003A68[eax] +
mov [ebp+var_C] ecx +
sub ecx [esi+0Ch] +
cmp ebx edi +
jnb loc_1004842  +
test ebx ebx +
ja loc_1004C89  +
mov eax [esi+8] +
cmp ecx ds:dword_1003A68[eax*4] +
jnb loc_1007FEB  +
mov eax [esi+8] +
mov ecx [esi+8] +
mov ecx dword_1026644[ecx*4] +
lea eax dword_1003A68[eax*4] +
cmp ecx [eax] +
jnb loc_1007FEB  +
pop edi  +
mov byte ptr [esi+14h] 0 +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax dword_1026044 +
xor eax ebp +
mov [ebp-4] eax +
push ebx  +
push esi  +
mov esi [ebp+8] +
push edi  +
mov edi [esi+4] +
lea ebx [edi+edi] +
mov eax ebx +
call sub_1003E9E  +
mov eax [esi+8] +
mov ecx [esi] +
mov eax [eax+4] +
mov [ebp-8] esp +
push ebx  +
lea eax [eax+ecx*2] +
push eax  +
push dword ptr [ebp-8]  +
call memcpy  +
add esp 0Ch +
push dword ptr [ebp-8]  +
mov eax edi +
call sub_1003F41  +
lea esp [ebp-14h] +
pop edi  +
pop esi  +
pop ebx  +
mov ecx [ebp-4] +
xor ecx ebp +
call sub_1001E40  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
push [ebp+arg_0]  +
call sub_1003E84  +
mov ecx eax +
shl ecx 4 +
add ecx [esi+24h] +
call sub_100490A  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
and [ebp+var_4] 0 +
push esi  +
mov [ebp+var_C] ecx +
mov [ebp+var_8] ecx +
lea ecx [ebp+var_C] +
call sub_1001FDD  +
test eax eax +
jz loc_100B7DA  +
mov esi [ebp+var_4] +
mov eax esi +
neg eax  +
sbb eax eax +
and eax [ebp+var_8] +
push eax  +
call sub_100424B  +
push [ebp+arg_0]  +
mov ecx eax +
call sub_10052AB  +
test eax eax +
jz loc_100491D  +
neg esi  +
sbb esi esi +
and esi [ebp+var_8] +
push esi  +
call sub_10030FD  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_4]  +
mov esi ecx +
push [ebp+arg_0]  +
call sub_100498C  +
push eax  +
push dword ptr [esi+8]  +
mov ecx esi +
call sub_1004184  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push 0Ch  +
call off_102665C  +
xor ecx ecx +
cmp eax ecx +
jz loc_10049C2  +
mov [eax] ecx +
mov [eax+4] ecx +
mov [eax+8] ecx +
cmp eax ecx +
jz loc_1012AAE  +
mov ecx [ebp+arg_0] +
mov [eax+8] ecx +
mov ecx [ebp+arg_4] +
mov [eax+4] ecx +
leave   +
retn 8  +
xor eax eax +
jmp loc_10049AA  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
jnz loc_100D942  +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
add ecx 9D8h +
pop ebp  +
jmp loc_10049F8  +
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
test esi esi +
jz loc_1014FB6  +
mov edx [ecx+4] +
lea eax [edx+3] +
and eax 0FFFFFFFCh +
sub eax edx +
jnz loc_1004A38  +
cmp dword ptr [ecx+8] 4 +
jb loc_1014FC0  +
mov eax [ecx] +
mov eax [eax] +
mov [esi] eax +
add dword ptr [ecx] 4 +
add dword ptr [ecx+8] 0FFFFFFFCh +
add dword ptr [ecx+4] 4 +
xor eax eax +
pop esi  +
pop ebp  +
retn 4  +
add [ecx] eax +
sub [ecx+8] eax +
add edx eax +
mov [ecx+4] edx +
jmp loc_1004A16  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
cmp [ebp+arg_0] 0 +
push esi  +
mov esi ecx +
jz loc_10127AD  +
lea eax [ebp+var_4] +
push eax  +
call sub_10049E5  +
test eax eax +
jl loc_1004A83  +
mov eax [ebp+var_4] +
push [ebp+arg_0]  +
lea eax [eax+eax+2] +
push eax  +
mov ecx esi +
call sub_1004A8D  +
mov ecx [ebp+arg_4] +
mov edx [ebp+var_4] +
mov [ecx] edx +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
add ecx 9D8h +
pop ebp  +
jmp sub_1004AA0  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_4] +
test edx edx +
jz loc_1014FA2  +
mov eax [ebp+arg_0] +
cmp [ecx+8] eax +
jb loc_1014FAC  +
push esi  +
mov esi [ecx] +
mov [edx] esi +
add [ecx] eax +
sub [ecx+8] eax +
add [ecx+4] eax +
xor eax eax +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push esi  +
mov esi ecx +
mov eax [esi+8] +
push edi  +
mov edi [ebp+arg_0] +
cmp edi eax +
jbe loc_1004B9B  +
cmp edi [ebp+arg_8] +
ja loc_10136C5  +
mov ecx [ebp+arg_4] +
and [ebp+arg_0] 0 +
cmp eax ecx +
jb loc_10136E9  +
xor edx edx +
mov eax edi +
div  ecx +
test edx edx +
jz loc_1004B17  +
lea edi [eax+1] +
imul edi ecx +
lea eax [ebp+arg_0] +
push eax  +
push 2  +
pop ecx  +
mov eax edi +
mul  ecx +
push edx  +
push eax  +
call sub_1003A3E  +
test eax eax +
jl loc_10136F0  +
mov ecx [esi+4] +
mov eax ecx +
sub eax [ebp+arg_C] +
push ebx  +
push [ebp+arg_0]  +
neg eax  +
sbb eax eax +
and eax ecx +
push eax  +
call ds:__imp_realloc  +
mov ebx eax +
pop ecx  +
pop ecx  +
test ebx ebx +
jz loc_10136C5  +
lea eax [ebp+arg_0] +
push eax  +
push 1  +
push dword ptr [esi+0Ch]  +
call sub_1004BB2  +
test eax eax +
jl loc_1004BA1  +
mov eax [ebp+arg_0] +
push 2  +
pop ecx  +
mul  ecx +
lea ecx [ebp+arg_0] +
push ecx  +
push edx  +
push eax  +
call sub_1003A3E  +
test eax eax +
jl loc_1004BA1  +
mov eax [ebp+arg_C] +
cmp [esi+4] eax +
jnz loc_1004B94  +
push [ebp+arg_0]  +
push eax  +
push ebx  +
call memcpy  +
add esp 0Ch +
mov [esi+4] ebx +
mov [esi+8] edi +
pop ebx  +
pop edi  +
pop esi  +
leave   +
retn 10h  +
push ebx  +
call ds:__imp_free  +
jmp loc_1013701  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
mov eax [ebp+arg_4] +
add eax ecx +
cmp eax ecx +
jb loc_1013649  +
mov ecx [ebp+arg_8] +
mov [ecx] eax +
xor eax eax +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
mov esi ecx +
cmp eax [esi+8] +
ja loc_10063EC  +
mov eax [esi+4] +
pop esi  +
pop ebp  +
retn 4  +
***
mov eax eax +
push eax  +
push large dword ptr fs:0  +
lea eax [esp+4+arg_0] +
sub esp [esp+0Ch] +
push ebx  +
push esi  +
push edi  +
mov [eax] ebp +
mov ebp eax +
mov eax dword_1026044 +
xor eax ebp +
push eax  +
mov [ebp-14h] eax +
mov [ebp-10h] esp +
push dword ptr [ebp-4]  +
mov dword ptr [ebp-4] 0FFFFFFFFh +
lea eax [ebp-0Ch] +
mov large fs:0 eax +
retn   +
***
mov ecx [ebp-14h] +
xor ecx ebp +
call sub_1001E40  +
jmp __EH_epilog3  +
***
push 0  +
push eax  +
call ds:WaitForSingleObject  +
test eax eax +
jnz loc_100464C  +
add esi 0A8h +
push edi  +
mov ecx esi +
call sub_1004CA0  +
jmp loc_100465B  +
***
mov eax edi +
sub eax [esi+4] +
cmp eax 0EA60h +
mov eax edi +
jb loc_1004776  +
jmp loc_1004779  +
xor eax eax +
jmp loc_100476E  +
***
mov eax edi +
sub eax ebx +
xor edx edx +
div  [ebp+arg_4] +
sub edi eax +
mov ebx edi +
jmp loc_1004842  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 2  +
pop edx  +
mov eax offset dword_1004518 +
push esi  +
mov esi [eax] +
cmp esi [ebp+arg_0] +
jb loc_100D92E  +
push edx  +
call sub_10045BC  +
pop esi  +
pop ebp  +
retn 4  +
***
mov [esi+48h] edi +
mov [ebp-1Ch] esi +
mov [ebp-18h] eax +
mov [ebp-14h] eax +
lea ecx [ebp-1Ch] +
call sub_1004586  +
test eax eax +
jz loc_10045E7  +
mov eax [ebp-18h] +
mov ecx [eax+4] +
push edi  +
call sub_100D840  +
jmp loc_1004CD0  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
lea eax [esi+10h] +
push eax  +
push 21h  +
call sub_1004D1B  +
mov dword ptr [esi] offset off_1001D68 +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
push esi  +
mov esi ecx +
push 0FFFFFFFFh  +
push [ebp+lpString]  +
mov [esi+4] eax +
mov eax [ebp+arg_0] +
mov dword ptr [esi] offset off_1001D4C +
mov [esi+8] eax +
call sub_1004D4B  +
mov eax esi +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 24h +
cmp [ebp+lpString] 0 +
push esi  +
push edi  +
mov esi ecx +
jz loc_101375B  +
mov edi [ebp+arg_4] +
mov [ebp+arg_4] edi +
cmp edi 0FFFFFFFFh +
jnz loc_1004D87  +
push [ebp+lpString]  +
call ds:lstrlenW  +
mov [ebp+var_4] eax +
lea eax [ebp+var_4] +
push eax  +
lea ecx [ebp+arg_4] +
call sub_1003CFC  +
mov edi [ebp+arg_4] +
push 1  +
lea eax [ebp+var_4] +
push eax  +
lea ecx [ebp+arg_4] +
call sub_1003C9C  +
mov eax [eax] +
cmp eax [esi+8] +
ja loc_100847D  +
push 2  +
lea eax [ebp+var_4] +
push eax  +
lea ecx [ebp+arg_4] +
call sub_1003BEE  +
push dword ptr [eax]  +
push [ebp+lpString]  +
push dword ptr [esi+4]  +
call memcpy  +
mov eax [esi+4] +
add esp 0Ch +
mov [esi+0Ch] edi +
xor ecx ecx +
mov [eax+edi*2] cx +
mov eax [esi+0Ch] +
pop edi  +
pop esi  +
leave   +
retn 8  +
***
mov eax eax +
push eax  +
push large dword ptr fs:0  +
lea eax [esp+4+arg_0] +
sub esp [esp+0Ch] +
push ebx  +
push esi  +
push edi  +
mov [eax] ebp +
mov ebp eax +
mov eax dword_1026044 +
xor eax ebp +
push eax  +
mov [ebp-10h] esp +
push dword ptr [ebp-4]  +
mov dword ptr [ebp-4] 0FFFFFFFFh +
lea eax [ebp-0Ch] +
mov large fs:0 eax +
retn   +
***
push 1  +
lea eax [ebp+arg_8] +
push eax  +
push [ebp+arg_4]  +
lea eax [ebp+var_8] +
push eax  +
lea ecx [ebp+var_4] +
call sub_1003C45  +
mov ecx eax +
call sub_1003C9C  +
push dword ptr [eax]  +
mov edx [esi] +
mov ecx esi +
call dword ptr [edx]  +
jmp loc_1003B75  +
***
mov edi edi +
push ebp  +
mov ebp esp +
lea eax [ecx+10h] +
push eax  +
push 7FFFh  +
push 41h  +
push dword ptr [ebp+8]  +
call sub_1004AD5  +
pop ebp  +
retn 4  +
***
mov eax [edi+2Ch] +
test dword ptr [eax+80h] 40000000h +
jnz loc_10140F9  +
push [ebp+arg_10]  +
mov ecx edi +
push [ebp+arg_C]  +
call sub_1004E8F  +
mov [ebp+var_C] eax +
test eax eax +
jz loc_1001CF8  +
jmp loc_1001D03  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push ebx  +
xor ebx ebx +
push esi  +
mov esi ecx +
cmp [ebp+arg_0] ebx +
jz loc_1013CC1  +
push edi  +
push dword ptr [esi+34h]  +
call sub_1001709  +
mov [ebp+nCount] eax +
mov eax [esi+60h] +
mov ecx 2710h +
mov edi ecx +
cmp eax 0FFFFFFFFh +
jnz loc_1013CCB  +
cmp [ebp+arg_4] edi +
jb loc_1013CDA  +
mov [ebp+var_8] ebx +
mov [ebp+var_4] ebx +
lea ebx [esi+14h] +
push 0  +
push ebx  +
push [ebp+nCount]  +
mov eax edi +
call sub_10013E1  +
mov ecx [esi+2Ch] +
mov ecx [ecx+80h] +
test ecx ecx +
jns loc_1004F09  +
cmp eax 102h +
jz loc_1013CE2  +
push eax  +
call sub_10049CB  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
mov eax 80040DB4h +
jmp loc_1004F02  +
***
call sub_1001D89  +
mov esi ecx +
mov [ebp-14h] esi +
lea eax [esi+28h] +
push eax  +
lea ecx [ebp-28h] +
call sub_1002059  +
mov ecx [ebp+8] +
lea eax [ebp-34h] +
xor ebx ebx +
push eax  +
mov [ebp-4] ebx +
xor edi edi +
call sub_100525B  +
push eax  +
mov ecx esi +
call sub_10048E0  +
mov esi [eax] +
cmp esi ebx +
jz loc_101021D  +
cmp [esi+7Ch] ebx +
jz loc_100CA6C  +
mov [ebp-24h] ebx +
mov [ebp-20h] ebx +
mov [ebp-1Ch] ebx +
mov [ebp-10h] ebx +
mov [ebp-18h] ebx +
mov ebx [ebp+38h] +
mov byte ptr [ebp-4] 5 +
mov ecx esi +
test bl 40h +
jnz loc_1010190  +
lea eax [ebp-18h] +
push eax  +
call sub_100512B  +
test eax eax +
jge loc_100CF98  +
lea eax [ebp-20h] +
push eax  +
mov ecx esi +
call sub_100798A  +
test eax eax +
jl loc_1012F71  +
mov ecx [ebp-14h] +
push esi  +
push dword ptr [ebp+58h]  +
call sub_1005156  +
mov edi eax +
test edi edi +
jl loc_1005012  +
lea ecx [ebp-10h] +
push ecx  +
push dword ptr [ebp+3Ch]  +
mov ecx ebx +
shr ecx 0Ah +
and ecx 1 +
push ecx  +
mov ecx ebx +
shr ecx 5 +
and ecx 1 +
push ecx  +
shr ebx 4 +
and ebx 1 +
push ebx  +
push dword ptr [ebp+34h]  +
mov esi [ebp-20h] +
push dword ptr [ebp+30h]  +
mov eax [esi] +
push dword ptr [ebp+2Ch]  +
push dword ptr [ebp+28h]  +
push dword ptr [ebp+24h]  +
push dword ptr [ebp+20h]  +
push dword ptr [ebp+1Ch]  +
push dword ptr [ebp+18h]  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push esi  +
call dword ptr [eax+18h]  +
mov ecx [ebp+50h] +
push esi  +
push dword ptr [ebp-10h]  +
mov edi eax +
call sub_1007A4E  +
mov eax [ebp-18h] +
mov byte ptr [ebp-4] 4 +
test eax eax +
jnz loc_100D108  +
mov eax [ebp-10h] +
mov byte ptr [ebp-4] 3 +
test eax eax +
jz loc_1005032  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-1Ch] +
mov byte ptr [ebp-4] 2 +
test eax eax +
jnz loc_1010201  +
mov eax [ebp-20h] +
mov byte ptr [ebp-4] 1 +
test eax eax +
jz loc_1005052  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-24h] +
mov byte ptr [ebp-4] 0 +
test eax eax +
jnz loc_1012FC1  +
xor ebx ebx +
cmp [ebp-28h] ebx +
jz loc_1005071  +
push dword ptr [ebp-28h]  +
call ds:LeaveCriticalSection  +
mov eax edi +
call __EH_epilog3  +
retn 54h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx dword_10260A8 +
test ecx ecx +
jz loc_100511F  +
mov eax [ebp+arg_0] +
mov edx [eax+9A4h] +
push ebx  +
mov ebx [edx+58h] +
mov edx [edx+4] +
push esi  +
push edi  +
mov esi [eax+664h] +
mov edi [eax+800h] +
mov [ebp+arg_0] edx +
mov edx [ebp+arg_C] +
add edx 0Ch +
push edx  +
push dword_10260A4  +
lea edx [eax+9ECh] +
push [ebp+arg_4]  +
add eax 41Ch +
push edx  +
push [ebp+arg_8]  +
mov edx offset byte_1004260 +
push esi  +
push edi  +
push dword ptr [eax+250h]  +
push dword ptr [eax+244h]  +
push ebx  +
push [ebp+arg_0]  +
push dword ptr [eax+1D8h]  +
push dword ptr [eax+240h]  +
push dword ptr [eax+23Ch]  +
push dword ptr [eax+238h]  +
push dword ptr [eax+234h]  +
push dword ptr [eax+1E4h]  +
push edx  +
push edx  +
push 0  +
push eax  +
call sub_1004F15  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 10h  +
mov eax 8000FFFFh +
jmp loc_100511B  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ecx+80h] +
test esi esi +
jl loc_100514A  +
cmp dword ptr [ecx+70h] 0 +
jnz loc_100D113  +
mov esi 80004002h +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
push esi  +
push [ebp+arg_4]  +
xor esi esi +
call sub_100517D  +
test eax eax +
jz loc_100CD26  +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
test esi esi +
jz loc_100CD1F  +
lea eax [ecx+4] +
mov edx [eax] +
add ecx 8 +
cmp edx ecx +
jz loc_100CD1F  +
cmp [edx+4] esi +
jnz loc_100D869  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
push [ebp+lpString2]  +
mov edi ds:lstrlenW +
mov esi ecx +
call edi  +
mov edx [esi+4] +
mov ecx [esi+8] +
mov ecx [ecx+4] +
push edx  +
push eax  +
push [ebp+lpString2]  +
mov eax [esi] +
push edx  +
lea eax [ecx+eax*2] +
push eax  +
push 1  +
call sub_1005204  +
mov ebx eax +
test ebx ebx +
jnz loc_10051F6  +
push [ebp+lpString2]  +
call edi  +
cmp [esi+4] eax +
jl loc_10107DB  +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+cchCount2] +
push edi  +
mov edi [ebp+arg_8] +
cmp edi esi +
jb loc_1005217  +
mov edi esi +
cmp [ebp+arg_10] esi +
jb loc_100CF90  +
push esi  +
push [ebp+lpString2]  +
push edi  +
push [ebp+lpString1]  +
push [ebp+dwCmpFlags]  +
push 800h  +
call ds:CompareStringW  +
dec eax  +
jz loc_1004282  +
dec eax  +
jnz loc_100CF81  +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 18h  +
***
sub eax [esi+4] +
sar eax 1 +
jmp loc_10055A8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov esi ecx +
call sub_1005293  +
xor edi edi +
sub eax edi +
jnz loc_100CF12  +
mov eax [ebp+arg_0] +
mov [eax] edi +
mov ecx dword_102615C +
mov dword ptr [eax+8] offset dword_1026150 +
mov [eax+4] ecx +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_1005457  +
movzx eax word ptr [esi+1A4h] +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ecx+0Ch] +
mov eax [ebp+arg_0] +
cmp edx [eax+4] +
jnz loc_10052D8  +
push esi  +
mov esi [eax+8] +
mov eax [eax] +
mov esi [esi+4] +
lea eax [esi+eax*2] +
push edx  +
push eax  +
call sub_10052E1  +
neg eax  +
sbb eax eax +
inc eax  +
pop esi  +
pop ebp  +
retn 4  +
xor eax eax +
jmp loc_10052D4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+cchCount2]  +
push [ebp+cchCount2]  +
push [ebp+lpString2]  +
push dword ptr [ecx+0Ch]  +
push dword ptr [ecx+4]  +
push 1  +
call sub_1005204  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
lea eax [ecx+10h] +
cmp [ecx+4] eax +
jnz loc_1010B32  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp sub_1003AE9  +
***
mov edi edi +
push esi  +
push edi  +
mov edi ds:iswspace +
mov esi ecx +
cmp dword ptr [esi+4] 0 +
jz loc_1005359  +
mov ecx [esi+8] +
mov eax [esi] +
mov ecx [ecx+4] +
movzx eax word ptr [ecx+eax*2] +
push eax  +
call edi  +
pop ecx  +
test eax eax +
jnz loc_101326F  +
cmp dword ptr [esi+4] 0 +
jz loc_1005375  +
mov ecx esi +
call sub_1005657  +
movzx eax ax +
push eax  +
call edi  +
pop ecx  +
test eax eax +
jnz loc_101327D  +
pop edi  +
pop esi  +
retn   +
***
call sub_10039ED  +
push dword ptr [ebp+0Ch]  +
mov eax [ebp+8] +
mov edi ecx +
lea esi [edi+10h] +
mov edx [esi] +
push 0  +
push eax  +
mov ecx esi +
call dword ptr [edx+10h]  +
cmp dword ptr [ebp+0Ch] 0FFFFFFFFh +
jnz loc_101328E  +
mov eax [esi+0Ch] +
and dword ptr [ebp-1B0h] 0 +
lea ecx [ebp-1B0h] +
mov [ebp-1ACh] eax +
mov [ebp-1A8h] esi +
call sub_100532F  +
mov eax [edi+1Ch] +
cmp [ebp-1ACh] eax +
jnz loc_10132AD  +
mov ecx edi +
call sub_10053F1  +
xor eax eax +
call sub_1003A2A  +
retn 8  +
***
mov [ecx+1BAh] ax +
xor eax eax +
mov [ecx+1A8h] ax +
mov [ecx+1ACh] ax +
mov [ecx+1B0h] ax +
mov [ecx+1B4h] ax +
mov [ecx+1B8h] ax +
mov [ecx+1A6h] ax +
mov [ecx+1AAh] ax +
mov [ecx+1AEh] ax +
mov [ecx+1B2h] ax +
mov [ecx+1B6h] ax +
mov [ecx+1BEh] ax +
mov [ecx+1BCh] ax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push esi  +
mov esi ecx +
movzx eax word ptr [esi+1BAh] +
test al 1 +
jz loc_1005573  +
or [ebp+var_4] 0FFFFFFFFh +
push ebx  +
push edi  +
xor ecx ecx +
and eax 0FFFEh +
push 3  +
mov [esi+1A6h] cx +
pop ecx  +
mov [esi+1BAh] ax +
mov [esi+1A4h] cx +
test al 20h +
jnz loc_10054CC  +
push 0  +
lea edi [esi+10h] +
push 23h  +
mov ecx edi +
call sub_100557B  +
push 0  +
push 3Fh  +
mov ecx edi +
mov ebx eax +
call sub_100557B  +
mov [ebp+var_4] eax +
cmp ebx 0FFFFFFFFh +
jnz loc_101003C  +
mov ebx eax +
cmp ebx 0FFFFFFFFh +
jnz loc_1010052  +
mov ax [esi+1Ch] +
mov [esi+1B2h] ax +
push 0  +
lea ebx [esi+10h] +
push 3Ah  +
mov ecx ebx +
call sub_100557B  +
mov edi eax +
cmp edi 0FFFFFFFFh +
jz loc_10078AA  +
movzx eax word ptr [esi+1B2h] +
cmp edi eax +
jg loc_10078AA  +
push edi  +
push 0  +
lea eax [ebp+var_10] +
push eax  +
mov ecx ebx +
call sub_1004123  +
push 0  +
lea ecx [ebp+var_10] +
call sub_10055B2  +
cmp eax 0FFFFFFFFh +
jnz loc_1005571  +
cmp [ebp+var_C] 1 +
jz loc_10132E0  +
inc edi  +
mov [esi+1A6h] di +
push dword_1026154  +
lea ecx [ebp+var_10] +
call sub_10051B1  +
test eax eax +
jnz loc_100CF43  +
mov [esi+1A4h] ax +
cmp ax 1 +
jz loc_1005571  +
mov eax [ebp+var_4] +
cmp eax 0FFFFFFFFh +
jnz loc_10133C1  +
mov ax [esi+1Ch] +
mov [esi+1B2h] ax +
xor eax eax +
mov [esi+1B4h] ax +
pop edi  +
pop ebx  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
push esi  +
mov esi ecx +
cmp eax [esi+0Ch] +
jnb loc_10055A5  +
mov ecx [esi+4] +
push dword ptr [ebp+arg_0]  +
lea eax [ecx+eax*2] +
push eax  +
call ds:wcschr  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_100524C  +
or eax 0FFFFFFFFh +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
mov esi [ecx+4] +
cmp ebx esi +
jnb loc_10055EE  +
mov eax [ecx] +
mov ecx [ecx+8] +
mov ecx [ecx+4] +
add eax ebx +
push edi  +
lea edi [ecx+eax*2] +
movzx eax word ptr [edi] +
push eax  +
call sub_1003D6C  +
test eax eax +
jnz loc_10055E5  +
inc ebx  +
inc edi  +
inc edi  +
cmp ebx esi +
jb loc_10055D1  +
pop edi  +
cmp ebx esi +
jb loc_101325B  +
or eax 0FFFFFFFFh +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
add ecx 54h +
mov eax [ecx] +
push 0  +
push [ebp+arg_0]  +
call dword ptr [eax+10h]  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
add ecx 0A8h +
mov eax [ecx] +
push 0  +
push [ebp+arg_0]  +
call dword ptr [eax+10h]  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_0]  +
add ecx 4 +
push dword ptr [ecx+8]  +
call sub_1004184  +
pop ebp  +
retn 4  +
***
mov eax [ecx+4] +
test eax eax +
jz loc_1013262  +
mov edx [ecx] +
add edx eax +
mov eax [ecx+8] +
mov eax [eax+4] +
movzx eax word ptr [eax+edx*2-2] +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
push ebx  +
push esi  +
mov esi ecx +
mov eax [esi+60h] +
xor edx edx +
mov ecx 2710h +
push edi  +
mov [ebp+var_4] edx +
mov [ebp+var_C] ecx +
cmp eax 0FFFFFFFFh +
jnz loc_1013D69  +
cmp [ebp+arg_0] 1 +
mov eax [esi+2Ch] +
mov ebx [eax+88h] +
mov ecx [eax+90h] +
mov [ebp+var_10] edx +
mov [ebp+var_18] ebx +
mov [ebp+var_14] ecx +
jnz loc_1013E51  +
cmp [esi+4] dx +
jnz loc_10057B0  +
mov edi 40000000h +
cmp [esi+6] dx +
jz loc_1005739  +
push dword ptr [esi+34h]  +
mov ecx esi +
call sub_1001709  +
and [ebp+arg_0] 0 +
mov [ebp+nCount] eax +
mov eax [esi+2Ch] +
test [eax+80h] edi +
jz loc_1013D79  +
cmp ebx [ebp+var_14] +
jnz loc_1013DC4  +
mov eax [esi+2Ch] +
push edi  +
sub eax 0FFFFFF80h +
push eax  +
call sub_1003119  +
push dword ptr [esi+44h]  +
call ds:SetEvent  +
mov eax [esi+54h] +
push 0  +
push 1  +
push eax  +
call ds:ReleaseSemaphore  +
mov ebx eax +
test ebx ebx +
jz loc_1013E00  +
xor eax eax +
mov [esi+6] ax +
test ebx ebx +
jz loc_1013DD9  +
push dword ptr [esi+4Ch]  +
mov ecx esi +
call sub_1001709  +
mov [ebp+nCount] eax +
mov [ebp+var_4] 800705B4h +
lea ebx [esi+14h] +
mov eax [ebp+var_C] +
push 0  +
push ebx  +
push [ebp+nCount]  +
call sub_10013E1  +
mov [ebp+arg_0] eax +
mov eax [ebp+var_18] +
cmp eax [ebp+var_14] +
jnz loc_1013E27  +
mov eax [esi+2Ch] +
push edi  +
sub eax 0FFFFFF80h +
push eax  +
call sub_1003119  +
mov eax [esi+2Ch] +
test dword ptr [eax+80h] 80000000h +
jz loc_1013DCF  +
cmp [ebp+arg_0] 102h +
jz loc_1013E35  +
push [ebp+arg_0]  +
call sub_10049CB  +
mov [ebp+var_4] eax +
test eax eax +
jl loc_10057B9  +
xor eax eax +
inc eax  +
mov [esi+4] ax +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
mov eax [ebp+var_4] +
jmp loc_10057B2  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
jz loc_10127A4  +
add ecx 9D8h +
pop ebp  +
nop   +
nop   +
nop   +
nop   +
nop   +
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ecx+4] +
lea eax [edx+7] +
and eax 0FFFFFFF8h +
sub eax edx +
jz loc_10057FA  +
add [ecx] eax +
sub [ecx+8] eax +
add edx eax +
mov [ecx+4] edx +
cmp dword ptr [ecx+8] 8 +
jb loc_1014FCA  +
mov eax [ecx] +
mov edx [ebp+arg_0] +
push esi  +
mov esi [eax] +
mov [edx] esi +
mov eax [eax+4] +
mov [edx+4] eax +
add dword ptr [ecx] 8 +
add dword ptr [ecx+8] 0FFFFFFF8h +
add dword ptr [ecx+4] 8 +
xor eax eax +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov eax [esi+18h] +
push edi  +
test eax eax +
jnz loc_1012C19  +
push [ebp+arg_0]  +
mov ecx esi +
call sub_1003E65  +
mov ecx [esi+24h] +
push [ebp+arg_0]  +
mov edi eax +
shl edi 4 +
add ecx edi +
call sub_1005884  +
test eax eax +
jnz loc_1012C2C  +
push [ebp+arg_4]  +
mov ecx [esi+24h] +
push [ebp+arg_0]  +
add ecx edi +
call sub_1004964  +
inc dword ptr [esi+10h]  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
and [ebp+var_4] 0 +
mov [ebp+var_C] ecx +
mov [ebp+var_8] ecx +
lea ecx [ebp+var_C] +
call sub_1001FDD  +
test eax eax +
jnz loc_1012B47  +
leave   +
retn 4  +
***
mov [ebp+var_4] edx +
jmp loc_1001CA1  +
mov ecx [ebp+var_18] +
jmp loc_1001C60  +
***
xor eax eax +
cmp [ecx+0Ch] eax +
jnz locret_10058D7  +
mov edx [ecx] +
mov [ecx+8] eax +
mov [ecx+4] edx +
mov [ecx] eax +
mov dword ptr [ecx+0Ch] 1 +
retn   +
***
xor eax eax +
cmp [ecx+0Ch] eax +
jz locret_10058F6  +
mov edx [ecx+4] +
mov dword ptr [ecx+8] 1 +
mov [ecx] edx +
mov [ecx+4] eax +
mov [ecx+0Ch] eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1Ch +
push ebx  +
mov ebx ecx +
mov eax [ebx+2Ch] +
test dword ptr [eax+80h] 80000000h +
jz loc_1013FFB  +
mov ecx [ebp+10h] +
mov eax [ebp+0Ch] +
xor edx edx +
mov [ebp-18h] edx +
mov [ebp-0Ch] eax +
mov [ebp-8] edx +
cmp ecx edx +
jnz loc_1014005  +
mov ecx [ebx+2Ch] +
mov ecx [ecx+80h] +
and ecx 3FFFFFFFh +
push esi  +
push edi  +
mov [ebp-14h] ecx +
cmp eax edx +
jz loc_1005A22  +
mov eax [ebx+2Ch] +
test dword ptr [eax+80h] 80000000h +
mov edi [eax+90h] +
mov esi [eax+88h] +
mov [ebp-1Ch] edi +
jz loc_1014016  +
mov eax edi +
sub eax esi +
cmp esi edi +
jb loc_100F1F2  +
lea eax [eax+ecx-1] +
test eax eax +
jz loc_100FC40  +
mov edx [ebp-0Ch] +
mov [ebp-4] eax +
cmp edx eax +
jnb loc_100599A  +
mov [ebp-4] edx +
cmp esi edi +
jb loc_100F1F8  +
mov eax [ebp-4] +
mov edi ecx +
sub edi esi +
cmp edi eax +
jb loc_100F21F  +
and dword ptr [ebp-10h] 0 +
mov edi eax +
test edi edi +
jz loc_10059E3  +
mov ecx [ebp+8] +
mov eax [ebp-8] +
add eax ecx +
push edi  +
push eax  +
mov eax [ebx+2Ch] +
lea eax [esi+eax+98h] +
push eax  +
call memcpy  +
add esi edi +
add esp 0Ch +
cmp esi [ebp-14h] +
jz loc_100F1EB  +
cmp dword ptr [ebp-10h] 0 +
jnz loc_100F229  +
mov edi [ebp-1Ch] +
mov eax [ebp-4] +
sub [ebp-0Ch] eax +
add [ebp-8] eax +
mov eax [ebx+2Ch] +
mov [eax+88h] esi +
cmp esi edi +
jbe loc_100F1E1  +
sub esi edi +
cmp esi [ebx+58h] +
jnb loc_100F1D2  +
cmp dword ptr [ebp-0Ch] 0 +
jnz loc_100FC38  +
mov eax [ebp+0Ch] +
mov ecx [ebp+10h] +
test ecx ecx +
jnz loc_101400C  +
mov eax [ebx+2Ch] +
test dword ptr [eax+80h] 80000000h +
mov eax 80040DB4h +
jz loc_1005A44  +
mov eax [ebp-18h] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
add ecx 9BCh +
pop ebp  +
jmp sub_1005A63  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
xor eax eax +
push edi  +
mov edi [ebp+arg_0] +
cmp [esi+8] eax +
jz loc_1005A88  +
mov ecx [esi+10h] +
mov eax [ecx] +
push 0  +
push edi  +
push [ebp+arg_4]  +
call dword ptr [eax+4]  +
test eax eax +
jl loc_1005A8A  +
add [esi] edi +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
add ecx 9BCh +
pop ebp  +
jmp sub_1005AA8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov ecx [esi] +
push edi  +
lea edi [ecx+3] +
and edi 0FFFFFFFCh +
xor eax eax +
sub edi ecx +
jnz loc_1007932  +
add [esi] edi +
cmp dword ptr [esi+8] 0 +
jz loc_1005ADB  +
mov ecx [esi+10h] +
mov eax [ecx] +
push 0  +
push 4  +
lea edx [ebp+arg_0] +
push edx  +
call dword ptr [eax+4]  +
test eax eax +
jl loc_1005AE2  +
add dword ptr [esi] 4 +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
mov eax dword_1026044 +
xor eax ebp +
mov [ebp+var_4] eax +
push edi  +
xor eax eax +
push [ebp+arg_0]  +
lea edi [ebp+var_18] +
stos   +
stos   +
stos   +
stos   +
stos   +
mov eax [ebp+arg_4] +
mov [ebp+var_14] eax +
mov eax [ebp+arg_8] +
mov edx ecx +
mov [ebp+var_10] eax +
lea eax [edx+994h] +
mov ecx [eax] +
mov [ebp+var_C] ecx +
inc ecx  +
mov [eax] ecx +
lea eax [ebp+var_18] +
push eax  +
lea ecx [edx+9BCh] +
mov [ebp+var_18] 52485447h +
call sub_1005B53  +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop edi  +
call sub_1001E40  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi ecx +
xor ebx ebx +
xor eax eax +
push edi  +
cmp [esi+8] ebx +
jz loc_1005B85  +
mov edi [ebp+arg_4] +
push edi  +
mov [esi] ebx +
call sub_1005AA8  +
cmp eax ebx +
jl loc_1005B7F  +
not edi  +
push edi  +
mov ecx esi +
call sub_1005AA8  +
cmp eax ebx +
mov [esi] ebx +
jl loc_1005BB5  +
mov ecx [esi] +
lea edi [ecx+7] +
and edi 0FFFFFFF8h +
sub edi ecx +
jnz loc_1014F45  +
cmp eax ebx +
jl loc_1005BB5  +
add [esi] edi +
cmp [esi+8] ebx +
jz loc_1005BAE  +
mov ecx [esi+10h] +
mov eax [ecx] +
push ebx  +
push 14h  +
push [ebp+arg_0]  +
call dword ptr [eax+4]  +
cmp eax ebx +
jl loc_1005BB5  +
add dword ptr [esi] 14h +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
push esi  +
mov edi ecx +
call sub_1005A95  +
test eax eax +
jl loc_1005BEA  +
push [ebp+arg_0]  +
lea eax [esi+esi+2] +
push eax  +
mov ecx edi +
call sub_1005A50  +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov eax [esi+4] +
push edi  +
mov edi [ebp+arg_0] +
cmp edi eax +
jnz loc_1010BD6  +
mov [esi+4] edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_1001D89  +
mov esi ecx +
mov [ebp-10h] esi +
mov eax [esi+10h] +
mov dword ptr [ebp-4] 2 +
test eax eax +
jz loc_1005C3D  +
and dword ptr [eax+10h] 0 +
mov edx [esi] +
test edx edx +
jz loc_1005C54  +
mov eax [esi+8] +
mov ecx [esi+4] +
push eax  +
push ecx  +
push edx  +
push dword ptr [esi+0Ch]  +
call sub_1006B85  +
mov eax [esi+8] +
mov byte ptr [ebp-4] 1 +
test eax eax +
jnz loc_100D0D8  +
mov eax [esi+4] +
mov byte ptr [ebp-4] 0 +
test eax eax +
jz loc_1005C74  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov esi [esi] +
or dword ptr [ebp-4] 0FFFFFFFFh +
test esi esi +
jz loc_1005C84  +
mov eax [esi] +
push esi  +
call dword ptr [eax+8]  +
call __EH_epilog3  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx] +
sub esp 20h +
test eax eax +
jnz loc_1010E9C  +
call ds:RevertToSelf  +
test eax eax +
jz loc_1010EA8  +
leave   +
retn   +
***
lea ecx [ebp+var_5A80] +
mov [ebp+var_5A80] offset off_1001E6C +
call sub_1001EE0  +
lea ecx [ebp+var_51B0] +
mov byte ptr [ebp+var_4] 5 +
call sub_1003290  +
jmp loc_1002323  +
***
call sub_1001D89  +
mov edi ecx +
xor ebx ebx +
mov [ebp-1Ch] ebx +
mov [ebp-4] ebx +
mov [ebp-18h] ebx +
lea eax [ebp-1Ch] +
push eax  +
push ebx  +
mov byte ptr [ebp-4] 1 +
mov [ebp-10h] ebx +
call ds:GetErrorInfo  +
test eax eax +
jz loc_100F726  +
lea esi [edi+9BCh] +
mov ecx esi +
call sub_10058BF  +
and dword ptr [ebp-14h] 0 +
mov dword ptr [ebp-20h] 2 +
cmp dword ptr [ebp-14h] 0 +
jl loc_1005D5F  +
push 5  +
push dword ptr [ebp+8]  +
mov ecx edi +
push ebx  +
call sub_1005AED  +
mov [ebp-14h] eax +
test eax eax +
jl loc_1005D5F  +
cmp dword ptr [ebp-10h] 0 +
mov ecx edi +
jnz loc_100F75A  +
push 0  +
push offset byte_1004260  +
call sub_1005BC5  +
mov [ebp-14h] eax +
mov ebx [esi] +
mov ecx esi +
call sub_10058DD  +
dec dword ptr [ebp-20h]  +
jnz loc_1005D2A  +
mov eax 8007000Eh +
cmp [ebp+8] eax +
jz loc_1012B00  +
push dword ptr [ebp-18h]  +
call ds:SysFreeString  +
mov eax [ebp-1Ch] +
or dword ptr [ebp-4] 0FFFFFFFFh +
test eax eax +
jnz loc_100F765  +
mov eax [ebp-14h] +
call __EH_epilog3  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
push edi  +
mov esi ecx +
call sub_1005DE9  +
test eax eax +
jz loc_1005DE0  +
lea eax [edi+54h] +
push eax  +
lea ecx [esi+54h] +
call sub_1005DE9  +
test eax eax +
jz loc_1005DE0  +
mov eax [esi+23Ch] +
cmp eax [edi+23Ch] +
jnz loc_1005DE0  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
xor eax eax +
jmp loc_1005DDA  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push dword ptr [eax+4]  +
push dword ptr [ecx+4]  +
call sub_1005E0A  +
neg eax  +
sbb eax eax +
inc eax  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
test byte ptr dword_1026090 1 +
jz loc_100C9DB  +
cmp dword_102608C 41Fh +
jz loc_1010788  +
pop ebp  +
jmp ds:lstrcmpiW  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_1005E5A  +
push eax  +
mov ecx esi +
call sub_1003205  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
test esi esi +
jz loc_101324D  +
lea edx [ecx+4] +
mov [edx] esi +
mov eax ecx +
mov ecx [ecx] +
cmp ecx esi +
jnz loc_1005E87  +
cmp eax edx +
jz loc_1013254  +
mov [edx] edx +
pop esi  +
pop ebp  +
retn 4  +
mov eax ecx +
mov ecx [eax] +
jmp loc_1005E74  +
***
mov esi [ebp+var_4] +
mov eax esi +
neg eax  +
sbb eax eax +
and eax [ebp+var_8] +
push eax  +
call sub_100424B  +
push [ebp+arg_0]  +
mov ecx eax +
call sub_1005DA3  +
test eax eax +
jz loc_100422C  +
neg esi  +
sbb esi esi +
and esi [ebp+var_8] +
push esi  +
call sub_1005EC8  +
jmp loc_1004241  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_1010BF1  +
add eax 4 +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
push [ebp+arg_0]  +
call sub_1003E65  +
mov ecx eax +
shl ecx 4 +
add ecx [esi+24h] +
call sub_1005F15  +
test eax eax +
jz loc_1005F0B  +
dec dword ptr [esi+10h]  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
and [ebp+var_4] 0 +
mov [ebp+var_C] ecx +
mov [ebp+var_8] ecx +
lea ecx [ebp+var_C] +
call sub_1001FDD  +
test eax eax +
jz locret_1005F59  +
mov eax [ebp+var_4] +
neg eax  +
sbb eax eax +
and eax [ebp+var_8] +
push eax  +
call sub_100424B  +
push [ebp+arg_0]  +
mov ecx eax +
call sub_1005DA3  +
test eax eax +
jz loc_1005F27  +
lea ecx [ebp+var_C] +
call sub_1005F62  +
leave   +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov ecx [esi] +
push edi  +
xor edi edi +
test ecx ecx +
jz loc_1005FA6  +
mov eax [esi+8] +
test eax eax +
jz loc_1005FA6  +
cmp [esi+4] edi +
jz loc_1005FA6  +
push eax  +
call sub_1003205  +
test eax eax +
jz loc_1005F91  +
mov ecx [esi] +
mov edi [eax+4] +
push eax  +
call sub_10031EA  +
mov eax [esi+8] +
mov ecx [esi] +
mov eax [eax] +
add ecx 4 +
mov [esi+4] eax +
cmp eax ecx +
jnz loc_1005FA6  +
and dword ptr [esi+4] 0 +
mov eax edi +
pop edi  +
pop esi  +
retn   +
***
mov [ecx+8] eax +
mov eax [eax] +
mov [ecx+4] eax +
xor ecx ecx +
test eax eax +
setnz cl  +
mov eax ecx +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
jz loc_1005FE4  +
mov eax [ebp+arg_8] +
mov ecx [eax] +
lea edx [ebp+arg_4] +
push edx  +
push eax  +
call dword ptr [ecx+10h]  +
cmp [ebp+arg_4] 0 +
jnz loc_1010801  +
xor eax eax +
pop ebp  +
retn 0Ch  +
***
call sub_10039ED  +
mov esi [ebp+8] +
mov edi ecx +
lea eax [edi+990h] +
mov ecx [eax] +
mov [esi] ecx +
inc dword ptr [eax]  +
xor ebx ebx +
lea ecx [ebp-64h] +
mov [ebp-6Ch] ebx +
call sub_1001DF9  +
mov [ebp-4] ebx +
cmp [esi+20h] ebx +
jz loc_1010087  +
lea ebx [edi+9BCh] +
mov ecx ebx +
call sub_10058BF  +
and dword ptr [ebp-68h] 0 +
mov dword ptr [ebp-70h] 2 +
xor eax eax +
cmp [ebp-68h] eax +
jl loc_1006070  +
push eax  +
push eax  +
push dword ptr [ebp-6Ch]  +
mov ecx edi +
call sub_1005AED  +
mov [ebp-68h] eax +
test eax eax +
jl loc_1006070  +
push esi  +
mov ecx ebx +
call sub_1006099  +
mov [ebp-68h] eax +
test eax eax +
jl loc_1006070  +
cmp dword ptr [esi+20h] 0 +
jz loc_101009B  +
mov eax [ebx] +
mov ecx ebx +
mov [ebp-6Ch] eax +
call sub_10058DD  +
dec dword ptr [ebp-70h]  +
jnz loc_100603D  +
lea ecx [ebp-64h] +
call sub_1002011  +
mov eax [ebp-68h] +
call sub_1003A2A  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 48h +
mov eax dword_1026044 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push ebx  +
push esi  +
mov esi ecx +
mov ecx [esi] +
push edi  +
lea edi [ecx+7] +
mov [ebp+var_48] eax +
and edi 0FFFFFFF8h +
xor ebx ebx +
xor eax eax +
sub edi ecx +
jz loc_10060DE  +
cmp [esi+8] ebx +
jz loc_10060DE  +
mov ecx [esi+10h] +
mov eax [ecx] +
push ebx  +
push edi  +
push offset unk_102663C  +
call dword ptr [eax+4]  +
cmp eax ebx +
jl loc_100610C  +
add [esi] edi +
cmp [esi+8] ebx +
jz loc_10060FC  +
cmp [esi+18h] ebx +
jnz loc_1014F82  +
push ebx  +
push 34h  +
push [ebp+var_48]  +
mov ecx [esi+10h] +
mov eax [ecx] +
call dword ptr [eax+4]  +
cmp eax ebx +
jl loc_100610C  +
cmp [esi+18h] ebx +
jnz loc_1014F9A  +
add dword ptr [esi] 34h +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1001E40  +
leave   +
retn 4  +
***
cmp eax 10h +
jge loc_100616E  +
test eax eax +
jl loc_10063D0  +
cmp eax 8 +
jle loc_100616E  +
cmp eax 9 +
jle loc_10063D0  +
cmp eax 0Ch +
jle loc_100616E  +
jmp loc_10128BF  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
movzx eax word ptr [ecx] +
and eax 0FFFh +
cmp eax 17h +
jle loc_100611D  +
cmp eax 1Eh +
jl loc_10063D0  +
cmp eax 1Fh +
jg loc_10063C4  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
push esi  +
mov ebx ecx +
call sub_1006147  +
xor edi edi +
push edi  +
push esi  +
call sub_1006331  +
test eax eax +
jl loc_1012AD2  +
cmp word ptr [esi] 1Fh +
jz loc_1006449  +
mov [ebp+var_4] edi +
lea edi [ebx+9BCh] +
mov ecx edi +
call sub_10058BF  +
and [ebp+arg_0] 0 +
mov [ebp+var_8] 2 +
cmp [ebp+arg_0] 0 +
jl loc_10061E8  +
push 2  +
push 0  +
push [ebp+var_4]  +
mov ecx ebx +
call sub_1005AED  +
mov [ebp+arg_0] eax +
test eax eax +
jl loc_10061E8  +
push esi  +
mov ecx ebx +
call sub_1006212  +
mov [ebp+arg_0] eax +
mov eax [edi] +
mov ecx edi +
mov [ebp+var_4] eax +
call sub_10058DD  +
dec [ebp+var_8]  +
jnz loc_10061C2  +
cmp word ptr [esi] 1Fh +
jz loc_1006457  +
mov eax [ebp+arg_0] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov edi ecx +
mov [ebp+var_4] edi +
test esi esi +
jz loc_101297B  +
movzx ecx word ptr [esi] +
push ebx  +
mov eax ecx +
mov ebx 0FFFh +
and eax ebx +
add eax 0FFFFFFBEh +
cmp eax 1 +
jbe loc_1012985  +
mov eax ecx +
push 8  +
and eax ebx +
pop edx  +
cmp dx ax +
setz byte ptr [ebp+arg_0+3]  +
cmp byte ptr [ebp+arg_0+3] 0 +
jnz loc_1007F75  +
add edi 9BCh +
push esi  +
mov ecx edi +
call sub_10062C2  +
test eax eax +
jl loc_10062B6  +
movzx ecx word ptr [esi] +
sub ecx 1Eh +
jz loc_100DA46  +
dec ecx  +
jz loc_10063F6  +
sub ecx 22h +
jz loc_1007316  +
sub ecx 6 +
jz loc_101298F  +
dec ecx  +
jz loc_100DA35  +
test eax eax +
jl loc_10062AC  +
movzx ecx word ptr [esi] +
test ecx 1000h +
jnz loc_10078BD  +
cmp byte ptr [ebp+arg_0+3] 0 +
jnz loc_1007F86  +
pop ebx  +
pop edi  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
push ebx  +
push esi  +
mov esi ecx +
mov ecx [esi] +
push edi  +
lea edi [ecx+7] +
and edi 0FFFFFFF8h +
xor ebx ebx +
xor eax eax +
sub edi ecx +
jz loc_10062F7  +
cmp [esi+8] ebx +
jz loc_10062F7  +
mov ecx [esi+10h] +
mov eax [ecx] +
push ebx  +
push edi  +
push offset unk_102663C  +
call dword ptr [eax+4]  +
cmp eax ebx +
jl loc_1006325  +
add [esi] edi +
cmp [esi+8] ebx +
jz loc_1006315  +
cmp [esi+18h] ebx +
jnz loc_1014F62  +
push ebx  +
push 10h  +
push [ebp+arg_0]  +
mov ecx [esi+10h] +
mov eax [ecx] +
call dword ptr [eax+4]  +
cmp eax ebx +
jl loc_1006325  +
cmp [esi+18h] ebx +
jnz loc_1014F7A  +
add dword ptr [esi] 10h +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
call sub_1001D89  +
mov esi [ebp+8] +
xor ebx ebx +
cmp esi ebx +
jz loc_1014222  +
push esi  +
xor edi edi +
call sub_1006369  +
test eax eax +
jnz loc_100FDAB  +
mov eax edi +
call __EH_epilog3  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
xor ebx ebx +
cmp esi ebx +
jz loc_1014163  +
movzx eax word ptr [esi] +
sub eax 1Eh +
push edi  +
jz loc_100FD96  +
sub eax 0FEEh +
jz loc_100F19B  +
sub eax 12h +
jz loc_100FD96  +
sub eax 2FEEh +
jz loc_100FD9E  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
xor cl dh +
and eax 1A47EFB7h +
adc [ebp-739FFD0Fh] ah +
sahf   +
jmp loc_1006370  +
***
add eax 0FFFFFFC0h +
cmp eax 8 +
jbe loc_100616E  +
xor eax eax +
mov [ecx] ax +
jmp loc_100616E  +
***
mov edx [esi] +
push eax  +
call dword ptr [edx]  +
jmp loc_1004BEB  +
***
push dword ptr [esi+8]  +
mov ecx [ebp+var_4] +
call sub_100640B  +
jmp loc_1006299  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+lpString] +
mov ebx ecx +
test edi edi +
jz loc_10128B5  +
push edi  +
call ds:lstrlenW  +
mov esi eax +
push esi  +
mov ecx ebx +
call sub_1005A95  +
test eax eax +
jl loc_1006442  +
push edi  +
lea eax [esi+esi+2] +
push eax  +
mov ecx ebx +
call sub_1005A50  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
cmp [esi+8] edi +
jnz loc_10061A7  +
jmp loc_1012AE3  +
cmp dword ptr [esi+8] offset byte_1004260 +
jnz loc_1006203  +
jmp loc_1012AEF  +
***
call sub_10039ED  +
mov ecx [ebp+14h] +
mov edi [ebp+8] +
mov eax [ebp+10h] +
mov esi [ebp+1Ch] +
mov ebx [ebp+20h] +
mov [ebp-68h] ecx +
xor ecx ecx +
mov [ebp-80h] eax +
cmp edi ecx +
jz loc_10066CB  +
cmp [edi] cx +
jz loc_10066CB  +
mov eax [eax+660h] +
test al 2 +
jz loc_10066CB  +
mov [ebp-60h] ecx +
mov eax [esi] +
mov [ebp-4] ecx +
lea ecx [ebp-60h] +
push ecx  +
push offset dword_10063DC  +
push esi  +
call dword ptr [eax]  +
and dword ptr [ebp-5Ch] 0 +
xor eax eax +
cmp [ebp+0Ch] eax +
lea ecx [ebp-5Ch] +
push ecx  +
push offset dword_10066D8  +
setz al  +
push ebx  +
push esi  +
mov byte ptr [ebp-4] 1 +
push eax  +
push edi  +
call sub_1007AFE  +
mov ebx eax +
xor esi esi +
cmp ebx esi +
jl loc_10066A1  +
mov eax [ebp-5Ch] +
mov ecx [eax] +
lea edx [ebp-6Ch] +
push edx  +
push eax  +
call dword ptr [ecx+0Ch]  +
mov ebx eax +
cmp ebx esi +
jl loc_10066A1  +
push 34h  +
lea eax [ebp-58h] +
push esi  +
push eax  +
call memset  +
add esp 0Ch +
push 2  +
pop eax  +
mov [ebp-54h] eax +
mov [ebp-50h] eax +
mov dword ptr [ebp-38h] 1 +
call ds:GetSystemDefaultLCID  +
mov [ebp-4Ch] eax +
mov [ebp-64h] esi +
cmp [ebp-6Ch] esi +
jbe loc_10066A1  +
mov eax [ebp+24h] +
cmp dword ptr [eax+14h] 0 +
jnz loc_1007F56  +
mov eax [ebp-5Ch] +
mov ecx [eax] +
lea edx [ebp-24h] +
push edx  +
push dword ptr [ebp-64h]  +
push eax  +
call dword ptr [ecx+10h]  +
mov ebx eax +
test ebx ebx +
jl loc_1006692  +
mov eax [ebp-14h] +
cmp eax ds:dword_1007D7C +
jz loc_1007F05  +
lea eax [ebp-24h] +
push eax  +
call sub_1007DD5  +
test eax eax +
jz loc_1006692  +
lea eax [ebp-24h] +
push eax  +
push dword ptr [ebp-60h]  +
call sub_1007DA0  +
test eax eax +
jz loc_1006692  +
xor eax eax +
lea edi [ebp-7Ch] +
stos   +
stos   +
stos   +
stos   +
mov eax [ebp-5Ch] +
mov ecx [eax] +
lea edx [ebp-7Ch] +
push edx  +
lea edx [ebp-24h] +
push edx  +
push eax  +
mov byte ptr [ebp-4] 2 +
call dword ptr [ecx+14h]  +
mov ebx eax +
mov eax [ebp-14h] +
cmp eax ds:dword_1007E84 +
jz loc_1007E54  +
cmp eax ds:dword_1007D90 +
jz loc_1007F1F  +
test ebx ebx +
jl loc_1006684  +
lea esi [ebp-24h] +
lea edi [ebp-48h] +
movs   +
movs   +
movs   +
movs   +
mov [ebp-34h] eax +
push 1  +
lea eax [ebp-48h] +
lea ecx [ebp-7Ch] +
call sub_1006873  +
test eax eax +
jz loc_1007E4C  +
mov esi [ebp-80h] +
lea eax [ebp-58h] +
push eax  +
mov ecx esi +
call sub_1005FEF  +
mov ebx eax +
lea eax [ebp-7Ch] +
test ebx ebx +
jl loc_1007F39  +
push 0  +
push eax  +
call sub_1006331  +
test eax eax +
jl loc_1010DA5  +
push 3  +
pop ecx  +
cmp cx [ebp-7Ch] +
jz loc_100FBCA  +
test eax eax +
jl loc_1010DA5  +
lea eax [ebp-7Ch] +
push eax  +
mov ecx esi +
call sub_1006177  +
mov ebx eax +
lea eax [ebp-7Ch] +
push eax  +
mov ecx esi +
call sub_10067F2  +
mov ecx [ebp-68h] +
add [ecx] eax +
adc dword ptr [ecx+4] 0 +
test ebx ebx +
jl loc_1010DC9  +
mov edx [ecx+4] +
mov eax [ebp+18h] +
cmp edx [eax+4] +
ja loc_1010DD1  +
jb loc_1006684  +
mov ecx [ecx] +
cmp ecx [eax] +
jnb loc_1010DD1  +
lea eax [ebp-7Ch] +
push eax  +
mov byte ptr [ebp-4] 1 +
call ds:PropVariantClear  +
inc dword ptr [ebp-64h]  +
mov eax [ebp-64h] +
cmp eax [ebp-6Ch] +
jb loc_1006540  +
mov eax [ebp-5Ch] +
mov byte ptr [ebp-4] 0 +
test eax eax +
jz loc_10066B2  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-60h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
test eax eax +
jz loc_10066C3  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
test ebx ebx +
jl loc_1007F45  +
xor ebx ebx +
mov eax ebx +
call sub_1003A2A  +
retn 20h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
jl loc_10066FE  +
xor eax eax +
pop ebp  +
retn 4  +
mov eax [ebp+arg_0] +
sar eax 10h +
and eax 1FFFh +
cmp eax 1 +
jz loc_10107E3  +
cmp eax 7 +
jnz loc_10066F8  +
jmp loc_10107EB  +
***
cmp [ebp+var_5A5C] 80041707h +
jz loc_1002C46  +
cmp [ebp+var_5A5C] 80041708h +
jz loc_1002C46  +
cmp ebx [ebp+var_5A68] +
jz loc_100F13B  +
mov eax [ebp+var_5A5C] +
mov ebx 80041700h +
cmp eax ebx +
jnz loc_1011EC4  +
and [ebp+var_5A5C] 0 +
mov eax [ebp+var_5A68] +
cmp [ebp+var_5A88] eax +
jz loc_100F158  +
push eax  +
lea ecx [ebp+var_5A88] +
call sub_1001F59  +
push 0  +
lea ecx [ebp+var_51B0] +
call sub_10067C7  +
mov [ebp+var_5A5C] eax +
test eax eax +
jge loc_1002B1A  +
jmp loc_1011D2B  +
***
mov edi edi +
push esi  +
mov esi ecx +
lea eax [esi+10h] +
push eax  +
push 401h  +
call sub_1001DCE  +
mov dword ptr [esi] offset off_10039CC +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push 7  +
push 0  +
push 18h  +
mov esi ecx +
call sub_1005AED  +
test eax eax +
jl loc_10067E8  +
push [ebp+arg_0]  +
mov ecx esi +
call sub_1005A95  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi [ebp+arg_0] +
mov [ebp+var_4] ecx +
test esi esi +
jz loc_10127B7  +
movzx ecx word ptr [esi] +
push ebx  +
mov eax ecx +
mov ebx 0FFFh +
and eax ebx +
add eax 0FFFFFFBEh +
cmp eax 1 +
jbe loc_10127BE  +
push edi  +
push 10h  +
pop edi  +
push 8  +
pop eax  +
sub ecx eax +
jz loc_1007F60  +
sub ecx 6 +
jz loc_1006856  +
sub ecx 11h +
jz loc_1007F60  +
sub ecx 22h +
jz loc_100FF05  +
sub ecx 6 +
jz loc_10127CD  +
dec ecx  +
jz loc_10127C5  +
movzx edx word ptr [esi] +
test edx 1000h +
jnz loc_1007F9D  +
mov eax edi +
pop edi  +
pop ebx  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push esi  +
push edi  +
mov edi eax +
push offset dword_1006950  +
push edi  +
mov esi ecx +
call sub_1003DE6  +
test eax eax +
jnz loc_1007E88  +
push ebx  +
xor ebx ebx +
cmp [ebp+arg_0] ebx +
jz loc_10068AF  +
push offset loc_10063B4  +
push edi  +
call sub_1003DE6  +
test eax eax +
jnz loc_1007EA1  +
cmp [edi+10h] ebx +
jz loc_101006C  +
movzx edi word ptr [esi] +
test edi 2000h +
jnz loc_1007D94  +
mov eax edi +
mov edx 0FFFh +
and eax edx +
cmp ax 43h +
jz loc_1007D94  +
cmp ax 42h +
jz loc_1007D94  +
cmp ax 45h +
jz loc_1007D94  +
cmp ax 44h +
jz loc_1007D94  +
movzx eax di +
mov ecx eax +
sub ecx ebx +
jz loc_1007D94  +
sub ecx 8 +
jz loc_1007EE9  +
sub ecx 16h +
jz loc_1006960  +
dec ecx  +
jz loc_1006960  +
sub ecx 28h +
jz loc_100FD89  +
and eax edx +
sub eax 8 +
jz loc_1010A4B  +
sub eax 16h +
jz loc_100FD44  +
dec eax  +
jz loc_10078E7  +
sub eax 28h +
jz loc_1010A12  +
xor eax eax +
inc eax  +
pop ebx  +
pop edi  +
pop esi  +
leave   +
retn 4  +
xor eax eax +
cmp [esi+8] ebx +
setnz al  +
jmp loc_1006946  +
***
xchg eax esi +
mov edi edi +
push esi  +
mov esi ecx +
cmp byte ptr [esi] 0 +
jz loc_1006ABA  +
call sub_1004525  +
cmp dword ptr [esi+18h] 0 +
jl loc_1006ABA  +
push edi  +
mov ecx eax +
sub ecx [esi+8] +
mov edi edx +
sbb edi [esi+0Ch] +
add [esi+10h] ecx +
mov [esi+8] eax +
mov [esi+0Ch] edx +
adc [esi+14h] edi +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 40h +
mov eax dword_1026044 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push ebx  +
mov ebx [ebp+arg_10] +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
mov [ebp+var_3C] eax +
mov eax [ebp+arg_C] +
xor edi edi +
push 30h  +
mov [ebp+var_40] eax +
lea eax [ebp+var_34] +
push edi  +
push eax  +
mov [ebp+var_38] edi +
call memset  +
mov ecx [ebp+var_3C] +
add esp 0Ch +
mov [ebp+var_2C] edi +
push 2  +
pop eax  +
mov [ebp+var_34] eax +
mov [ebp+var_30] eax +
mov eax [ebp+arg_8] +
lea edi [ebp+var_28] +
movs   +
movs   +
movs   +
movs   +
mov [ebp+var_14] eax +
lea eax [ebp+var_38] +
push eax  +
mov [ebp+var_18] 1 +
call sub_1005FEF  +
mov esi eax +
test esi esi +
jl loc_1006B4C  +
push [ebp+var_40]  +
mov ecx [ebp+var_3C] +
call sub_1006177  +
push [ebp+var_40]  +
mov ecx [ebp+var_3C] +
mov esi eax +
call sub_10067F2  +
add [ebx] eax +
adc dword ptr [ebx+4] 0 +
mov ecx [ebp+var_4] +
pop edi  +
mov eax esi +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1001E40  +
leave   +
retn 14h  +
***
mov edi edi +
push esi  +
mov esi ecx +
lea eax [esi+10h] +
push eax  +
mov dword ptr [esi] offset off_10039CC +
call sub_1001E75  +
mov dword ptr [esi] offset off_1001D4C +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
jz loc_1006BAD  +
cmp [ebp+arg_4] 0 +
jz loc_1006BAD  +
mov eax [ebp+arg_C] +
push [ebp+arg_4]  +
test eax eax +
jnz loc_1006BA3  +
mov eax [ebp+arg_8] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+14h]  +
pop ebp  +
retn 10h  +
mov eax 80004003h +
jmp loc_1006BA9  +
***
xor edi edi +
cmp [ebp+var_4818] edi +
jnz loc_1011F3E  +
cmp [ebp+var_5AEC] edi +
jz loc_1006C66  +
cmp [ebp+var_4BCC] edi +
jnz loc_1006C66  +
mov eax [ebp+var_5A5C] +
cmp eax edi +
jl loc_1011F8C  +
cmp [ebp+var_5AF0] edi +
jnz loc_1006BFC  +
cmp dword_1026678 edi +
jnz loc_1011FC5  +
push 10h  +
call ds:CoTaskMemAlloc  +
mov esi eax +
mov [ebp+pvar] esi +
cmp esi edi +
jz loc_1006C66  +
xor eax eax +
mov edi esi +
stos   +
stos   +
stos   +
stos   +
push 15h  +
pop eax  +
lea ecx [ebp+var_5B3C] +
mov [esi] ax +
call sub_1006A8D  +
mov eax [ebp+var_5B2C] +
mov [esi+8] eax +
mov eax [ebp+var_5B28] +
mov [esi+0Ch] eax +
lea eax [ebp+var_5AC4] +
push eax  +
push esi  +
push 0Ah  +
push offset dword_1003D90  +
lea eax [ebp+var_51B0] +
push eax  +
call sub_1006AC1  +
push esi  +
call ds:PropVariantClear  +
push esi  +
call ds:CoTaskMemFree  +
xor edi edi +
mov eax [ebp+var_5AAC] +
cmp [ebp+var_5AC0] eax +
jb loc_1006C8C  +
ja loc_101201C  +
mov eax [ebp+var_5AB0] +
cmp [ebp+var_5AC4] eax +
jnb loc_101201C  +
cmp [ebp+var_5A5C] ebx +
jz loc_101202B  +
push [ebp+var_5A5C]  +
lea ecx [ebp+var_51B0] +
call sub_1005CDF  +
cmp dword_10262BC edi +
jz loc_1006CE0  +
mov al byte_10262C0 +
cmp al 4 +
jb loc_100D8ED  +
mov eax dword_10262A8 +
mov ecx dword_10262AC +
mov edx 4009h +
mov edi 80000000h +
and eax edx +
and ecx edi +
or eax ecx +
jz loc_1006CE0  +
jmp loc_1012036  +
lea ecx [ebp+var_5A58] +
call sub_1006B64  +
mov eax [ebp+var_5A88] +
mov byte ptr [ebp+var_4] 16h +
test eax eax +
jz loc_1006CFF  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+pUnk] +
mov byte ptr [ebp+var_4] 14h +
test eax eax +
jz loc_1006D13  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+var_5AB4] +
mov byte ptr [ebp+var_4] 13h +
test eax eax +
jnz loc_1011F33  +
lea ecx [ebp+var_4570] +
call sub_1001F05  +
mov eax [ebp+var_5A84] +
mov byte ptr [ebp+var_4] 11h +
test eax eax +
jz loc_1006D44  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
lea ecx [ebp+var_4704] +
call sub_10030A0  +
mov eax [ebp+var_5A74] +
mov byte ptr [ebp+var_4] 0Eh +
test eax eax +
jz loc_1006D63  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
lea ecx [ebp+var_5A64] +
mov byte ptr [ebp+var_4] 0Dh +
call sub_1005C8F  +
push 0FFFFFFFFh  +
lea ecx [ebp+var_5A70] +
mov [ebp+var_5A70] offset off_1005BBC +
call sub_1005BF5  +
mov eax [ebp+var_5A60] +
mov byte ptr [ebp+var_4] 0Bh +
test eax eax +
jz loc_1006D9D  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+var_5A68] +
mov byte ptr [ebp+var_4] 0Ah +
test eax eax +
jz loc_1006DB1  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+var_5A78] +
mov byte ptr [ebp+var_4] 9 +
test eax eax +
jz loc_1006DC5  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
lea ecx [ebp+var_5AA4] +
mov byte ptr [ebp+var_4] 8 +
call sub_1005C1A  +
lea ecx [ebp+var_44DC] +
call sub_1002011  +
push 0  +
jmp loc_1005CB1  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 5Ch +
mov eax dword_1026044 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push esi  +
push edi  +
push 34h  +
mov [ebp+var_4C] eax +
lea eax [ebp+var_38] +
push 0  +
push eax  +
call memset  +
add esp 0Ch +
push 2  +
pop eax  +
mov [ebp+var_34] eax +
mov [ebp+var_30] eax +
mov eax [ebx] +
mov esi offset loc_10063B4 +
lea edi [ebp+var_28] +
movs   +
movs   +
movs   +
lea ecx [ebp+var_48] +
push ecx  +
movs   +
push ebx  +
mov [ebp+var_18] 1 +
mov [ebp+var_14] 3 +
call dword ptr [eax+14h]  +
pop edi  +
pop esi  +
test eax eax +
jge loc_100D9F4  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_1001E40  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 50h +
mov eax dword_1026044 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
mov [ebp+var_3C] eax +
mov eax [ebp+arg_4] +
mov [ebp+var_40] eax +
test eax eax +
jz loc_1010AD1  +
push esi  +
push edi  +
push 34h  +
lea eax [ebp+var_38] +
push 0  +
push eax  +
call memset  +
add esp 0Ch +
push 2  +
pop eax  +
mov [ebp+var_34] eax +
mov [ebp+var_30] eax +
mov eax [ebx] +
mov esi offset loc_10063B4 +
lea edi [ebp+var_28] +
movs   +
movs   +
movs   +
movs   +
mov edi [ebp+var_40] +
xor esi esi +
push edi  +
inc esi  +
push ebx  +
mov [ebp+var_18] esi +
mov [ebp+var_14] 0Ch +
call dword ptr [eax+20h]  +
test eax eax +
jl loc_1006F19  +
mov eax [ebx] +
push ebx  +
call dword ptr [eax+1Ch]  +
test eax eax +
jl loc_1006F19  +
cmp eax esi +
jnz loc_100796B  +
push 15h  +
pop eax  +
mov word ptr [ebp+var_50] ax +
mov eax [edi] +
mov [ebp+var_48] eax +
mov eax [edi+4] +
mov [ebp+var_44] eax +
mov ecx [ebp+var_3C] +
lea eax [ebp+var_38] +
push eax  +
call sub_1005FEF  +
test eax eax +
jl loc_1006F19  +
mov ecx [ebp+var_3C] +
lea eax [ebp+var_50] +
push eax  +
call sub_1006177  +
pop edi  +
pop esi  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_1001E40  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 54h +
mov eax dword_1026044 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push esi  +
push edi  +
push 34h  +
mov [ebp+var_3C] eax +
lea eax [ebp+var_38] +
push 0  +
push eax  +
call memset  +
add esp 0Ch +
push 2  +
pop eax  +
mov [ebp+var_34] eax +
mov [ebp+var_30] eax +
mov eax [ebx] +
mov esi offset dword_100779C +
lea edi [ebp+var_28] +
movs   +
movs   +
movs   +
lea ecx [ebp+var_44] +
push ecx  +
movs   +
push ebx  +
mov [ebp+var_18] 1 +
mov [ebp+var_14] 10h +
call dword ptr [eax+24h]  +
pop edi  +
pop esi  +
test eax eax +
jl loc_1006FBA  +
mov ecx [ebp+var_3C] +
push 40h  +
pop eax  +
mov word ptr [ebp+var_54] ax +
mov eax [ebp+var_44] +
mov [ebp+var_4C] eax +
mov eax [ebp+var_40] +
mov [ebp+var_48] eax +
lea eax [ebp+var_38] +
push eax  +
call sub_1005FEF  +
test eax eax +
jl loc_1006FBA  +
mov ecx [ebp+var_3C] +
lea eax [ebp+var_54] +
push eax  +
call sub_1006177  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_1001E40  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax 1050h +
call sub_10039A6  +
mov eax dword_1026044 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push esi  +
push edi  +
push 34h  +
mov [ebp+var_103C] eax +
lea eax [ebp+var_1038] +
push 0  +
push eax  +
call memset  +
add esp 0Ch +
push 2  +
pop eax  +
mov [ebp+var_1034] eax +
mov [ebp+var_1030] eax +
mov eax [ebx] +
mov esi offset dword_100779C +
lea edi [ebp+var_1028] +
movs   +
movs   +
lea ecx [ebp+var_1040] +
push ecx  +
movs   +
push 800h  +
lea ecx [ebp+var_1004] +
push ecx  +
movs   +
push ebx  +
mov [ebp+var_1018] 1 +
mov [ebp+var_1014] 5 +
call dword ptr [eax+30h]  +
pop edi  +
pop esi  +
test eax eax +
jge loc_1010ADB  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_1001E40  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
lea eax [ecx+10h] +
push eax  +
push 800h  +
push 40h  +
push dword ptr [ebp+8]  +
call sub_1004AD5  +
pop ebp  +
retn 4  +
***
call sub_1001D89  +
and dword ptr [ebp-10h] 0 +
mov eax [ebp+8] +
mov ecx [eax] +
and dword ptr [ebp-4] 0 +
lea edx [ebp-10h] +
push edx  +
push offset dword_10063DC  +
push eax  +
call dword ptr [ecx]  +
test eax eax +
mov eax [ebp-10h] +
jl loc_100D3A8  +
mov ecx [eax] +
lea edx [ebp+8] +
push edx  +
push eax  +
call dword ptr [ecx+50h]  +
or dword ptr [ebp-4] 0FFFFFFFFh +
test eax eax +
mov eax [ebp-10h] +
jl loc_1010D63  +
mov esi [ebp+8] +
test eax eax +
jz loc_10070E3  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax esi +
call __EH_epilog3  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 54h +
mov eax dword_1026044 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push esi  +
push edi  +
mov [ebp+var_40] eax +
mov eax [ebp+arg_4] +
push 34h  +
mov [ebp+var_3C] eax +
lea eax [ebp+var_38] +
push 0  +
push eax  +
call memset  +
mov ecx [ebp+var_3C] +
and [ebp+var_44] 0 +
add esp 0Ch +
push 2  +
pop eax  +
mov [ebp+var_34] eax +
mov [ebp+var_30] eax +
mov esi offset dword_1003D90 +
lea edi [ebp+var_28] +
movs   +
movs   +
movs   +
lea eax [ebp+var_44] +
push eax  +
mov eax 400h +
movs   +
mov esi [ebx] +
push eax  +
push eax  +
mov [ebp+var_18] 1 +
mov [ebp+var_14] 5 +
call sub_1004BD7  +
push eax  +
push ebx  +
call dword ptr [esi+10h]  +
pop edi  +
pop esi  +
test eax eax +
jl loc_10071A4  +
push [ebp+var_44]  +
mov ecx [ebp+var_3C] +
call sub_1003E02  +
mov ecx [ebp+var_3C] +
push 1Fh  +
pop eax  +
push 0  +
mov word ptr [ebp+var_54] ax +
call sub_1004BD7  +
mov ecx [ebp+var_40] +
mov [ebp+var_4C] eax +
lea eax [ebp+var_38] +
push eax  +
call sub_1005FEF  +
test eax eax +
jl loc_10071A4  +
mov ecx [ebp+var_40] +
lea eax [ebp+var_54] +
push eax  +
call sub_1006177  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_1001E40  +
leave   +
retn 8  +
***
call sub_10039ED  +
mov eax [ebp+8] +
push 34h  +
mov [ebp-0BA4h] eax +
lea eax [ebp-844h] +
push 0  +
push eax  +
mov ebx ecx +
call memset  +
add esp 0Ch +
push 2  +
pop eax  +
mov [ebp-840h] eax +
mov [ebp-83Ch] eax +
mov esi offset dword_100779C +
lea edi [ebp-834h] +
movs   +
movs   +
movs   +
movs   +
lea ecx [ebp-9D8h] +
mov dword ptr [ebp-824h] 1 +
mov dword ptr [ebp-820h] 4 +
call sub_1001FA5  +
mov eax [ebx] +
lea ecx [ebp-0BA8h] +
push ecx  +
push 400h  +
lea ecx [ebp-810h] +
push ecx  +
xor edi edi +
push ebx  +
mov [ebp-4] edi +
call dword ptr [eax+18h]  +
mov esi eax +
cmp esi 80040D25h +
jz loc_1010264  +
cmp esi edi +
jge loc_100D77B  +
lea ecx [ebp-9D8h] +
call sub_10030A0  +
mov eax esi +
call sub_1003A2A  +
retn 4  +
***
push 14h  +
call sub_1005AED  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+pSecurityDescriptor] 0 +
push esi  +
jz loc_10072BD  +
mov esi [ebp+lpdwBufferLength] +
test esi esi +
jz loc_10072BD  +
mov eax [ebp+arg_4] +
push esi  +
push [ebp+pSecurityDescriptor]  +
mov [esi] eax +
push ecx  +
call ds:MakeSelfRelativeSD  +
test eax eax +
jz loc_101397F  +
push [ebp+pSecurityDescriptor]  +
call ds:GetSecurityDescriptorLength  +
mov [esi] eax +
xor eax eax +
pop esi  +
pop ebp  +
retn 0Ch  +
mov eax 80004003h +
jmp loc_10072B8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push [ebp+bDaclDefaulted]  +
push [ebp+pDacl]  +
push [ebp+bDaclPresent]  +
push ecx  +
call ds:SetSecurityDescriptorDacl  +
test eax eax +
jz loc_101399C  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push [ebp+bSaclDefaulted]  +
push [ebp+pSacl]  +
push [ebp+bSaclPresent]  +
push ecx  +
call ds:SetSecurityDescriptorSacl  +
test eax eax +
jz loc_10139D0  +
leave   +
retn 0Ch  +
***
push dword ptr [esi+0Ch]  +
push dword ptr [esi+8]  +
mov ecx [ebp+var_4] +
call sub_1005A50  +
jmp loc_1006299  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 38h +
push ebx  +
push esi  +
push edi  +
mov edi ds:MakeAbsoluteSD +
xor eax eax +
mov esi ecx +
lea ecx [ebp+dwPrimaryGroupSize] +
push ecx  +
push eax  +
lea ecx [ebp+dwOwnerSize] +
push ecx  +
push eax  +
lea ecx [ebp+dwSaclSize] +
push ecx  +
push eax  +
lea ecx [ebp+dwDaclSize] +
push ecx  +
push eax  +
mov [ebp+dwDaclSize] eax +
mov [ebp+dwSaclSize] eax +
mov [ebp+dwOwnerSize] eax +
mov [ebp+dwPrimaryGroupSize] eax +
lea eax [ebp+dwAbsoluteSecurityDescriptorSize] +
push eax  +
push esi  +
push [ebp+pSelfRelativeSecurityDescriptor]  +
mov [ebp+dwAbsoluteSecurityDescriptorSize] 14h +
call edi  +
push [ebp+dwDaclSize]  +
lea ebx [esi+1Ch] +
mov ecx ebx +
call sub_10073E4  +
push [ebp+dwSaclSize]  +
lea ecx [esi+20h] +
call sub_10073E4  +
push [ebp+dwOwnerSize]  +
lea ecx [esi+14h] +
call sub_10073E4  +
push [ebp+dwPrimaryGroupSize]  +
lea ecx [esi+18h] +
call sub_10073E4  +
mov ebx [ebx] +
mov eax [esi+18h] +
mov ecx [esi+14h] +
mov edx [esi+20h] +
mov [ebp+pDacl] ebx +
lea ebx [ebp+dwPrimaryGroupSize] +
push ebx  +
push eax  +
lea eax [ebp+dwOwnerSize] +
push eax  +
push ecx  +
lea eax [ebp+dwSaclSize] +
push eax  +
push edx  +
lea eax [ebp+dwDaclSize] +
push eax  +
push [ebp+pDacl]  +
lea eax [ebp+dwAbsoluteSecurityDescriptorSize] +
push eax  +
push esi  +
push [ebp+pSelfRelativeSecurityDescriptor]  +
call edi  +
test eax eax +
jz loc_1013A04  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov eax [esi] +
test eax eax +
jz loc_10073FC  +
push eax  +
call off_1026660  +
and dword ptr [esi] 0 +
cmp [ebp+arg_0] 0 +
jz loc_100740D  +
push [ebp+arg_0]  +
call off_1026668  +
mov [esi] eax +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_1004BF8  +
mov eax [ebp+8] +
mov [ebp-468h] eax +
mov eax [ebp+0Ch] +
push 34h  +
mov [ebp-454h] eax +
xor ebx ebx +
lea eax [ebp-448h] +
push ebx  +
push eax  +
call memset  +
add esp 0Ch +
push 2  +
pop eax  +
mov [ebp-444h] eax +
mov [ebp-440h] eax +
mov esi offset dword_100779C +
lea edi [ebp-438h] +
movs   +
movs   +
movs   +
movs   +
mov dword ptr [ebp-428h] 1 +
mov dword ptr [ebp-424h] 6 +
mov [ebp-44Ch] ebx +
mov [ebp-4] ebx +
mov [ebp-460h] ebx +
mov edi 400h +
mov byte ptr [ebp-4] 1 +
lea esi [ebp-414h] +
mov [ebp-45Ch] edi +
mov [ebp-458h] ebx +
mov [ebp-450h] ebx +
mov [ebp-464h] esi +
mov ecx dword_102607C +
test ecx ecx +
jnz loc_100D20A  +
mov eax [ebp-454h] +
mov ecx [eax] +
lea edx [ebp-458h] +
push edx  +
push dword ptr [ebp-45Ch]  +
push esi  +
push eax  +
call dword ptr [ecx+2Ch]  +
mov ebx eax +
xor ecx ecx +
cmp ebx ecx +
jnz loc_1011125  +
push esi  +
call ds:GetSecurityDescriptorLength  +
xor ebx ebx +
mov [ebp-450h] eax +
cmp eax ebx +
jz loc_1007583  +
lea ecx [ebp-48Ch] +
mov byte ptr [ebp-4] 2 +
call sub_1007666  +
push esi  +
lea ecx [ebp-48Ch] +
mov byte ptr [ebp-4] 3 +
call sub_100732E  +
mov eax [ebp-468h] +
cmp [eax+5F8h] ebx +
jnz loc_100D282  +
push ebx  +
push ebx  +
push ebx  +
lea ecx [ebp-48Ch] +
call sub_10072F2  +
lea eax [ebp-450h] +
push eax  +
push dword ptr [ebp-45Ch]  +
lea ecx [ebp-48Ch] +
push esi  +
call sub_1007280  +
mov edi eax +
cmp edi 8007007Ah +
jz loc_10112BC  +
lea ecx [ebp-48Ch] +
mov byte ptr [ebp-4] 2 +
call sub_10075FA  +
mov dword ptr [ebp-4] 1 +
cmp edi ebx +
jl loc_1011324  +
mov ecx [ebp-468h] +
push 41h  +
pop eax  +
mov [ebp-49Ch] ax +
mov eax [ebp-450h] +
mov [ebp-494h] eax +
lea eax [ebp-448h] +
push eax  +
mov [ebp-490h] esi +
call sub_1005FEF  +
mov esi eax +
cmp esi ebx +
jl loc_10075CB  +
mov ecx [ebp-468h] +
lea eax [ebp-49Ch] +
push eax  +
call sub_1006177  +
mov esi eax +
mov byte ptr [ebp-4] 0 +
cmp [ebp-460h] ebx +
jnz loc_101135B  +
or dword ptr [ebp-4] 0FFFFFFFFh +
cmp [ebp-44Ch] ebx +
jnz loc_101136C  +
mov eax esi +
call sub_1004C38  +
retn 8  +
***
call sub_1001D89  +
mov esi ecx +
mov [ebp-10h] esi +
push dword ptr [esi+20h]  +
mov dword ptr [ebp-4] 2 +
call off_1026660  +
and dword ptr [esi+20h] 0 +
push dword ptr [esi+1Ch]  +
mov byte ptr [ebp-4] 1 +
call off_1026660  +
and dword ptr [esi+1Ch] 0 +
lea ecx [esi+18h] +
mov byte ptr [ebp-4] 0 +
call sub_1007653  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [esi+14h] +
call sub_1007653  +
call __EH_epilog3  +
retn   +
***
mov eax [ecx] +
test eax eax +
jz locret_1007660  +
push eax  +
call off_1026660  +
retn   +
***
call sub_1001D89  +
mov esi ecx +
mov [ebp-10h] esi +
xor edi edi +
mov [esi+14h] edi +
mov [ebp-4] edi +
mov [esi+18h] edi +
lea ecx [esi+1Ch] +
mov byte ptr [ebp-4] 1 +
mov [ecx] edi +
call sub_10076CB  +
lea ecx [esi+20h] +
mov byte ptr [ebp-4] 2 +
mov [ecx] edi +
call sub_10076CB  +
push 1  +
push esi  +
mov byte ptr [ebp-4] 3 +
call ds:InitializeSecurityDescriptor  +
test eax eax +
jz loc_10110E7  +
push edi  +
push edi  +
push 1  +
mov ecx esi +
call sub_10072C9  +
mov eax esi +
call __EH_epilog3  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push esi  +
mov esi ecx +
mov eax [esi] +
test eax eax +
jnz loc_1010F29  +
push 8  +
call off_1026668  +
push 2  +
push 8  +
push eax  +
mov [esi] eax +
call ds:InitializeAcl  +
test eax eax +
jz loc_1010F38  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 4Ch +
mov eax dword_1026044 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push esi  +
push edi  +
push 34h  +
mov [ebp+var_3C] eax +
lea eax [ebp+var_38] +
push 0  +
push eax  +
call memset  +
add esp 0Ch +
push 2  +
pop eax  +
mov [ebp+var_34] eax +
mov [ebp+var_30] eax +
mov eax [ebx] +
mov esi offset dword_100779C +
lea edi [ebp+var_28] +
movs   +
movs   +
movs   +
movs   +
push ebx  +
mov [ebp+var_18] 1 +
mov [ebp+var_14] 7 +
call dword ptr [eax+1Ch]  +
pop edi  +
pop esi  +
test eax eax +
jl loc_100778D  +
push 0Bh  +
pop ecx  +
mov word ptr [ebp+var_4C] cx +
xor ecx ecx +
test eax eax +
setnz cl  +
lea eax [ebp+var_38] +
push eax  +
dec ecx  +
mov [ebp+var_44] cx +
mov ecx [ebp+var_3C] +
call sub_1005FEF  +
test eax eax +
jl loc_100778D  +
mov ecx [ebp+var_3C] +
lea eax [ebp+var_4C] +
push eax  +
call sub_1006177  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_1001E40  +
leave   +
retn 4  +
***
mov eax [esp+arg_4] +
mov ecx [esp+arg_C] +
or ecx eax +
mov ecx [esp+arg_8] +
jnz sub_101052C  +
mov eax [esp+arg_0] +
mul  ecx +
retn 10h  +
***
mov [ebp+var_5AAC] esi +
jmp loc_1002797  +
mov [ebp+var_5AB0] 4000h +
jmp loc_10077C9  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 4Ch +
mov eax dword_1026044 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push esi  +
push edi  +
push 34h  +
mov [ebp+var_3C] eax +
lea eax [ebp+var_38] +
push 0  +
push eax  +
call memset  +
add esp 0Ch +
push 2  +
pop eax  +
mov [ebp+var_34] eax +
mov [ebp+var_30] eax +
mov eax [ebx] +
mov esi offset dword_100779C +
lea edi [ebp+var_28] +
movs   +
movs   +
movs   +
movs   +
push ebx  +
mov [ebp+var_18] 1 +
mov [ebp+var_14] 16h +
call dword ptr [eax+44h]  +
pop edi  +
pop esi  +
test eax eax +
jl loc_1007871  +
push 14h  +
pop ecx  +
mov word ptr [ebp+var_4C] cx +
xor ecx ecx +
test eax eax +
setz cl  +
mov eax ecx +
mov ecx [ebp+var_3C] +
cdq   +
mov [ebp+var_44] eax +
lea eax [ebp+var_38] +
push eax  +
mov [ebp+var_40] edx +
call sub_1005FEF  +
test eax eax +
jl loc_1007871  +
mov ecx [ebp+var_3C] +
lea eax [ebp+var_4C] +
push eax  +
call sub_1006177  +
mov ecx [ebp+var_4] +
xor ecx ebp +
xor eax eax +
call sub_1001E40  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov edx [ecx] +
push esi  +
push dword ptr [eax+4]  +
mov esi [eax+8] +
mov eax [eax] +
mov esi [esi+4] +
push 0  +
lea eax [esi+eax*2] +
push eax  +
call dword ptr [edx+10h]  +
pop esi  +
pop ebp  +
retn 4  +
***
cmp word ptr [esi+1B2h] 2 +
jb loc_1005551  +
jmp loc_1013383  +
***
and ecx ebx +
mov edx ecx +
sub edx 0Ch +
jz loc_100F16A  +
sub edx 12h +
jz loc_100DA50  +
dec edx  +
jnz loc_10129BA  +
xor edi edi +
cmp [esi+8] edi +
jbe loc_10062AC  +
jmp loc_1007910  +
***
test edi 1000h +
jz loc_1007D94  +
mov eax [esi+8] +
xor ecx ecx +
cmp eax ebx +
jbe loc_1007D94  +
mov esi [esi+0Ch] +
cmp [esi] ebx +
jnz loc_1006943  +
jmp loc_100FD6A  +
***
test eax eax +
jl loc_10062AC  +
mov eax [esi+0Ch] +
push dword ptr [eax+edi*4]  +
mov ecx [ebp+var_4] +
call sub_100640B  +
inc edi  +
cmp edi [esi+8] +
jnb loc_10062AC  +
jmp loc_1007910  +
***
cmp [esi+8] eax +
jz loc_1005AC3  +
mov ecx [esi+10h] +
mov eax [ecx] +
push 0  +
push edi  +
push offset unk_102663C  +
call dword ptr [eax+4]  +
test eax eax +
jge loc_1005AC3  +
jmp loc_1005AE2  +
***
add ecx 8 +
jmp loc_1007B84  +
***
mov [ebp+var_5ABC] ebx +
jmp loc_1002590  +
***
mov eax [edi] +
or eax [edi+4] +
jnz loc_1006EEB  +
and [ebp+var_48] eax +
and [ebp+var_44] eax +
mov word ptr [ebp+var_50] ax +
jmp loc_1006EFD  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ecx+80h] +
test esi esi +
jl loc_10079B5  +
cmp dword ptr [ecx+68h] 0 +
jz loc_1012DE4  +
mov eax [ecx+68h] +
mov edx [ebp+arg_0] +
mov [edx] eax +
mov ecx [ecx+68h] +
mov eax [ecx] +
push ecx  +
call dword ptr [eax+4]  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
mov edi [ebp+0Ch] +
test edi edi +
jz loc_1013265  +
push esi  +
mov esi [ebp+8] +
push 8  +
add esi 1A4h +
pop ecx  +
movs   +
xor eax eax +
pop esi  +
pop edi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+14h]  +
mov ecx [ebp+8] +
push dword ptr [ebp+10h]  +
add ecx 10h +
push dword ptr [ebp+0Ch]  +
call sub_1007A10  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx+0Ch] +
lea edx [eax+1] +
cmp [ebp+arg_4] edx +
jb loc_101367F  +
mov edx [ebp+arg_8] +
test edx edx +
jz loc_1007A2D  +
mov [edx] eax +
mov eax [ecx+0Ch] +
lea eax [eax+eax+2] +
push eax  +
push dword ptr [ecx+4]  +
push [ebp+arg_0]  +
call memcpy  +
add esp 0Ch +
xor eax eax +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_1001F59  +
push [ebp+arg_4]  +
lea ecx [esi+4] +
call sub_1001F59  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 4Ch +
mov eax dword_1026044 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push esi  +
push edi  +
push 34h  +
mov [ebp+var_3C] eax +
lea eax [ebp+var_38] +
push 0  +
push eax  +
call memset  +
mov ecx [ebp+var_3C] +
add esp 0Ch +
push 2  +
pop eax  +
mov [ebp+var_34] eax +
mov [ebp+var_30] eax +
mov esi offset dword_100779C +
lea edi [ebp+var_28] +
movs   +
movs   +
push 1Fh  +
pop eax  +
movs   +
mov word ptr [ebp+var_4C] ax +
mov eax [ebx+4] +
mov [ebp+var_44] eax +
lea eax [ebp+var_38] +
movs   +
push eax  +
mov [ebp+var_18] 1 +
mov [ebp+var_14] 3 +
call sub_1005FEF  +
pop edi  +
pop esi  +
test eax eax +
jl loc_1007AEB  +
mov ecx [ebp+var_3C] +
lea eax [ebp+var_4C] +
push eax  +
call sub_1006177  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_1001E40  +
leave   +
retn 4  +
***
call sub_1001D89  +
xor ebx ebx +
mov [ebp-10h] ebx +
lea eax [ebp-10h] +
push eax  +
push dword ptr [ebp+14h]  +
mov [ebp-4] ebx +
push dword ptr [ebp+10h]  +
call sub_1007BF5  +
mov edi [ebp-10h] +
push ebx  +
push ebx  +
lea eax [ebp-14h] +
push eax  +
push edi  +
push dword ptr [ebp+8]  +
call SHParseDisplayName  +
mov esi eax +
cmp esi ebx +
jl loc_1007BC6  +
mov [ebp+14h] ebx +
lea eax [ebp+14h] +
push eax  +
push dword ptr [ebp-14h]  +
push ebx  +
push ebx  +
call SHCreateShellItem  +
mov esi eax +
cmp esi ebx +
jl loc_1007BAD  +
mov [ebp+10h] ebx +
mov eax [ebp+14h] +
mov ecx [eax] +
lea edx [ebp+10h] +
push edx  +
push offset loc_1007BE0  +
push eax  +
mov byte ptr [ebp-4] 2 +
call dword ptr [ecx]  +
test eax eax +
jl loc_1010D8A  +
mov ecx 0D0h +
cmp [ebp+0Ch] ebx +
jnz loc_1007958  +
push dword ptr [ebp+1Ch]  +
mov eax [ebp+10h] +
push dword ptr [ebp+18h]  +
mov edx [eax] +
push dword_1026064  +
push ecx  +
push eax  +
call dword ptr [edx+24h]  +
mov esi eax +
mov eax [ebp+10h] +
mov byte ptr [ebp-4] 1 +
cmp eax ebx +
jz loc_1007BAD  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
push dword ptr [ebp-14h]  +
call SHELL32_155  +
mov eax [ebp+14h] +
mov [ebp-4] bl +
cmp eax ebx +
jz loc_1007BC6  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
or dword ptr [ebp-4] 0FFFFFFFFh +
cmp edi ebx +
jz loc_1007BD4  +
mov eax [edi] +
push edi  +
call dword ptr [eax+8]  +
mov eax esi +
call __EH_epilog3  +
retn 18h  +
***
call sub_1001D89  +
mov eax [ebp+10h] +
xor ebx ebx +
mov [eax] ebx +
mov [ebp-10h] ebx +
lea eax [ebp-10h] +
push eax  +
push ebx  +
mov [ebp-4] ebx +
call ds:CreateBindCtx  +
mov esi eax +
cmp esi ebx +
jl loc_1007CC6  +
mov eax [ebp-10h] +
lea edx [ebp-20h] +
push edx  +
mov dword ptr [ebp-20h] 10h +
mov dword ptr [ebp-1Ch] 2 +
mov dword ptr [ebp-18h] 1000h +
mov [ebp-14h] ebx +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+18h]  +
mov esi eax +
cmp esi ebx +
jl loc_1007CC6  +
push dword ptr [ebp+0Ch]  +
mov eax [ebp-10h] +
mov ecx [eax] +
push offset aItemcacheconte  +
push eax  +
call dword ptr [ecx+24h]  +
mov esi eax +
cmp esi ebx +
jl loc_1007CC6  +
mov [ebp+0Ch] ebx +
mov edi [ebp+8] +
mov eax [edi] +
lea ecx [ebp+0Ch] +
push ecx  +
push offset dword_1007D38  +
push edi  +
mov byte ptr [ebp-4] 1 +
call dword ptr [eax]  +
test eax eax +
jl loc_1007CA7  +
mov eax [ebp-10h] +
mov ecx [eax] +
push edi  +
push offset aFileSystemBind  +
push eax  +
call dword ptr [ecx+24h]  +
mov esi eax +
cmp esi ebx +
jl loc_1007CA7  +
mov eax [ebp-10h] +
mov ecx [eax] +
push edi  +
push offset aFoldersAsReadO  +
push eax  +
call dword ptr [ecx+24h]  +
mov esi eax +
mov eax [ebp+0Ch] +
mov [ebp-4] bl +
cmp eax ebx +
jz loc_1007CB7  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
cmp esi ebx +
jl loc_1007CC6  +
mov eax [ebp-10h] +
mov ecx [ebp+10h] +
mov [ebp-10h] ebx +
mov [ecx] eax +
mov eax [ebp-10h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
cmp eax ebx +
jnz loc_1010D7F  +
mov eax esi +
call __EH_epilog3  +
retn 0Ch  +
***
xor eax eax +
jmp loc_1006946  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_1007DCB  +
mov ecx [eax] +
lea edx [ebp+arg_0] +
push edx  +
push [ebp+arg_4]  +
mov [ebp+arg_0] 1 +
push eax  +
call dword ptr [ecx+54h]  +
test eax eax +
jl loc_1007DCB  +
mov eax [ebp+arg_0] +
pop ebp  +
retn 8  +
xor eax eax +
inc eax  +
jmp loc_1007DC7  +
***
call sub_1001D89  +
xor esi esi +
and [ebp-10h] esi +
and [ebp-4] esi +
lea eax [ebp-10h] +
push eax  +
push offset loc_1007E3C  +
push dword ptr [ebp+8]  +
call PSGetPropertyDescription  +
test eax eax +
jl loc_1007EFD  +
mov eax [ebp-10h] +
mov ecx [eax] +
lea edx [ebp+8] +
push edx  +
push eax  +
call dword ptr [ecx+60h]  +
test eax eax +
jl loc_1007E1F  +
test byte ptr [ebp+8] 3 +
push esi  +
pop eax  +
setnz al  +
mov esi eax +
mov eax [ebp-10h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
test eax eax +
jz loc_1007E30  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax esi +
call __EH_epilog3  +
retn 4  +
mov ebp 0A2078F91h +
sub [edi] ecx +
inc esp  +
xchg eax edx +
dec esi  +
inc esi  +
mov ds:20455291h al +
mov ecx [ebp-68h] +
jmp loc_1006669  +
push 4  +
pop ecx  +
mov edi offset dword_1007E74 +
lea esi [ebp-24h] +
xor edx edx +
cmps   +
jnz loc_10065CA  +
and dword ptr [ebp-4Ch] 0 +
jmp loc_10065D6  +
cmp dword ptr [edi+10h] 1 +
jnz loc_1006894  +
cmp dword ptr [edi+14h] 11h +
jnz loc_1006894  +
jmp loc_1010963  +
cmp dword ptr [edi+10h] 1 +
jnz loc_10068AF  +
mov eax [edi+14h] +
cmp eax 0Ch +
jz loc_1007D94  +
cmp eax 0Dh +
jz loc_1007D94  +
cmp eax 0Eh +
jz loc_1007D94  +
cmp eax 0Fh +
jz loc_1007D94  +
cmp eax 10h +
jz loc_1007D94  +
cmp eax 11h +
jnz loc_10068AF  +
jmp loc_1007D94  +
push dword ptr [esi+8]  +
call ds:SysStringLen  +
neg eax  +
sbb eax eax +
neg eax  +
jmp loc_1006946  +
xor esi esi +
inc esi  +
jmp loc_1007E1F  +
***
push 4  +
pop ecx  +
mov edi offset dword_1007D6C +
lea esi [ebp-24h] +
xor eax eax +
cmps   +
jnz loc_1006576  +
jmp loc_1006692  +
push 4  +
pop ecx  +
mov edi offset dword_1007D80 +
lea esi [ebp-24h] +
xor edx edx +
cmps   +
jz loc_1007E69  +
jmp loc_10065D6  +
push eax  +
call ds:PropVariantClear  +
jmp loc_10066A1  +
cmp ebx 80004001h +
jz loc_10066CB  +
jmp loc_10066CD  +
mov ebx 80040D23h +
jmp loc_10066A1  +
***
push dword ptr [esi+8]  +
call ds:lstrlenW  +
push 8  +
lea edi [eax+eax+16h] +
pop eax  +
jmp loc_1006856  +
***
and ecx 0F01Fh +
or ecx 1Fh +
mov [esi] cx +
jmp loc_100625B  +
mov cx [esi] +
mov edx 0F008h +
and cx dx +
or cx 8 +
mov [esi] cx +
jmp loc_10062B6  +
***
and edx ebx +
mov ecx edx +
sub ecx eax +
jz loc_100FF10  +
push 4  +
pop ebx  +
sub ecx ebx +
jz loc_100FEF5  +
sub ecx 12h +
jz loc_1006865  +
dec ecx  +
jnz loc_10127DA  +
xor ebx ebx +
cmp [esi+8] ebx +
jbe loc_1006865  +
mov eax [esi+0Ch] +
push dword ptr [eax+ebx*4]  +
call ds:lstrlenW  +
inc ebx  +
lea edi [edi+eax*2+6] +
cmp ebx [esi+8] +
jnb loc_1006865  +
jmp loc_1007FCF  +
***
mov eax [ebp+var_C] +
mov [esi+0Ch] eax +
mov eax [ebp+arg_0] +
xor ecx ecx +
mov [ebp+dwMilliseconds] ebx +
mov [ebp+nCount] ecx +
cmp eax 0FFFFFFFFh +
jnz loc_1014582  +
cmp [esi+20h] ecx +
jz loc_1008117  +
mov eax [esi+20h] +
test eax eax +
jz loc_100801F  +
mov ecx [ebp+nCount] +
inc [ebp+nCount]  +
mov [ebp+ecx*4+pHandles] eax +
test ebx ebx +
jz loc_100486E  +
mov ecx esi +
call sub_100F359  +
test al al +
jnz loc_100486E  +
cmp dword_10262BC 0 +
jz loc_100812F  +
mov al byte_10262C0 +
cmp al 4 +
jb loc_1014599  +
mov eax dword_10262A8 +
mov ecx dword_10262AC +
mov edi 400001h +
mov ebx 80000000h +
and eax edi +
and ecx ebx +
or eax ecx +
jnz loc_10145A6  +
push 4FFh  +
push [ebp+dwMilliseconds]  +
lea eax [ebp+pHandles] +
push 0  +
push eax  +
push [ebp+nCount]  +
call ds:MsgWaitForMultipleObjects  +
mov [ebp+var_C] eax +
call ds:GetTickCount  +
cmp dword_10262BC 0 +
mov ebx eax +
jz loc_10080C4  +
mov al byte_10262C0 +
cmp al 4 +
jb loc_1008139  +
mov eax dword_10262A8 +
mov ecx dword_10262AC +
and eax edi +
and ecx 80000000h +
or eax ecx +
jnz loc_10145E9  +
mov eax [esi+8] +
mov ecx [esi+8] +
mov ecx dword_1026644[ecx*4] +
lea eax dword_1003A68[eax*4] +
cmp ecx [eax] +
mov eax [esi+8] +
jnb loc_101462E  +
sub ebx [esi+0Ch] +
shl eax 2 +
mov edx dword_1026644[eax] +
test edx edx +
jz loc_1008143  +
mov ecx ds:dword_1003A68[eax] +
mov eax ecx +
sub eax edx +
xor edx edx +
div  [ebp+arg_4] +
sub ecx eax +
mov [ebp+dwMilliseconds] ecx +
mov eax [ebp+dwMilliseconds] +
cmp ebx eax +
jnb loc_100486E  +
jmp loc_1014637  +
push ecx  +
push ecx  +
push ecx  +
push ecx  +
call ds:CreateEventW  +
push eax  +
lea ecx [esi+1Ch] +
call sub_1001EE0  +
jmp loc_100800E  +
mov edi 400001h +
jmp loc_1008071  +
test al al +
jz loc_10080A9  +
jmp loc_10080C4  +
xor ecx ecx +
jmp loc_1008104  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_0]  +
call sub_1008168  +
neg eax  +
sbb eax eax +
neg eax  +
pop ecx  +
dec eax  +
pop ebp  +
retn   +
***
call __SEH_prolog4  +
mov eax dword_10260F4 +
mov [ebp+var_1C] eax +
cmp eax 0FFFFFFFFh +
jnz loc_10131A9  +
push [ebp+arg_0]  +
call ds:_onexit  +
pop ecx  +
call __SEH_epilog4  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
mov eax [ecx+0Ch] +
test eax eax +
jz loc_10081D3  +
mov edx [ecx+4] +
cmp word ptr [edx+eax*2-2] 5Ch +
jz loc_10081E0  +
mov edx [ecx] +
push 0FFFFFFFFh  +
push eax  +
push offset dword_10081E4  +
call dword ptr [edx+10h]  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx] +
push 0FFFFFFFFh  +
push 0  +
push [ebp+arg_0]  +
call dword ptr [eax+10h]  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
lea ecx [esi+4] +
mov dword ptr [esi] offset off_1003454 +
call sub_1003DBC  +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_1008207  +
and dword ptr [esi+98h] 0 +
and dword ptr [esi+9Ch] 0 +
mov dword ptr [esi] offset off_10033EC +
mov eax esi +
pop esi  +
retn   +
***
call sub_1001D89  +
mov esi ecx +
mov [ebp-10h] esi +
call sub_1008223  +
and dword ptr [ebp-4] 0 +
push 0  +
push dword ptr [ebp+8]  +
mov ecx esi +
push offset aSoftwareMicros  +
push 80000002h  +
mov dword ptr [esi] offset off_10033EC +
call sub_10082D9  +
mov eax esi +
call __EH_epilog3  +
retn 4  +
***
call sub_1004DD8  +
mov esi ecx +
xor ebx ebx +
cmp [esi+98h] ebx +
jnz loc_10137C2  +
push ebx  +
call ds:SetLastError  +
lea edi [esi+9Ch] +
push edi  +
push dword ptr [ebp+10h]  +
mov dword ptr [esi+98h] 1 +
push ebx  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call ds:RegOpenKeyExW  +
cmp eax ebx +
jg loc_10137E0  +
cmp eax ebx +
mov [ebp+10h] eax +
jl loc_10137EF  +
mov [ebp-4] ebx +
cmp [ebp+14h] ebx +
jnz loc_1009A0E  +
push dword ptr [ebp+0Ch]  +
lea ecx [esi+4] +
call sub_10081ED  +
mov eax [ebp+10h] +
call __EH_epilog3  +
retn 10h  +
***
call sub_1004BF8  +
mov eax [ebp+0Ch] +
mov esi [ebp+8] +
mov ebx ds:SetLastError +
push 0  +
mov edi ecx +
mov [ebp-230h] esi +
mov [ebp-224h] eax +
call ebx  +
mov eax [edi+9Ch] +
test eax eax +
jz loc_101387D  +
lea ecx [ebp-220h] +
push ecx  +
lea ecx [ebp-21Ch] +
push ecx  +
lea ecx [ebp-228h] +
push ecx  +
push 0  +
push esi  +
mov esi ds:RegQueryValueExW +
push eax  +
mov dword ptr [ebp-220h] 208h +
call esi  +
mov [ebp-22Ch] eax +
mov ecx 0EAh +
test eax eax +
jnz loc_1013888  +
cmp dword ptr [ebp-228h] 1 +
jnz loc_100FA23  +
and dword ptr [ebp-4] 0 +
cmp dword ptr [ebp-228h] 2 +
jz loc_100FA49  +
cmp eax ecx +
mov eax [ebp-220h] +
mov ecx [ebp-224h] +
jz loc_101391A  +
shr eax 1 +
push eax  +
call sub_1004BD7  +
lea ecx [ebp-21Ch] +
push ecx  +
push dword ptr [ebp-220h]  +
push eax  +
call sub_100B7E9  +
test eax eax +
jl loc_1013946  +
mov eax [ebp-22Ch] +
test eax eax +
jnz loc_10138C0  +
or dword ptr [ebp-4] 0FFFFFFFFh +
shr dword ptr [ebp-220h] 1 +
mov ecx [ebp-224h] +
jz loc_100FA42  +
mov eax [ebp-220h] +
dec eax  +
push eax  +
call sub_1003E02  +
xor eax eax +
inc eax  +
call sub_1004C38  +
retn 8  +
***
mov edi edi +
push esi  +
xor eax eax +
push eax  +
mov esi ecx +
push eax  +
mov [esi] eax +
call ds:CoInitializeEx  +
mov [esi] eax +
mov eax esi +
pop esi  +
retn   +
***
push 1  +
lea eax [ebp+var_4] +
push eax  +
lea ecx [ebp+arg_4] +
call sub_1003C9C  +
push dword ptr [eax]  +
mov ecx esi +
call sub_100849E  +
jmp loc_1004DA0  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 24h +
push esi  +
and [ebp+var_4] 0 +
push edi  +
mov edi [ebp+arg_0] +
lea eax [ebp+var_4] +
push eax  +
push 2  +
mov esi ecx +
pop ecx  +
mov eax edi +
mul  ecx +
push edx  +
push eax  +
call sub_1003A3E  +
test eax eax +
jl loc_101369E  +
push [ebp+var_4]  +
call ds:malloc  +
pop ecx  +
mov [esi+4] eax +
test eax eax +
jz loc_10136BE  +
mov [esi+8] edi +
pop edi  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0FFFFFFFFh  +
push offset byte_10222F9  +
mov eax large fs:0 +
push eax  +
push ecx  +
mov eax 7DF0h +
call sub_10039A6  +
mov eax dword_1026044 +
xor eax ebp +
mov [ebp+var_14] eax +
push ebx  +
push esi  +
push edi  +
push eax  +
lea eax [ebp+var_C] +
mov large fs:0 eax +
mov [ebp+var_10] esp +
mov eax [ebp+arg_4] +
xor ebx ebx +
push ebx  +
push ebx  +
xor esi esi +
inc esi  +
push esi  +
push ebx  +
mov [ebp+var_7C38] eax +
call ds:HeapSetInformation  +
push esi  +
call ds:_set_error_mode  +
pop ecx  +
push 0FFFFFFFFh  +
call ImmDisableIME  +
push 2  +
call sub_100AC8F  +
cmp eax ebx +
jl loc_100D3C3  +
push esi  +
call ds:SetErrorMode  +
call ds:LoadMSSearchHooks  +
lea ecx [ebp+var_7C78] +
call sub_1008466  +
push ebx  +
mov [ebp+var_4] esi +
call sub_100AA90  +
call sub_100A706  +
push offset sub_100E670  +
push offset loc_1009A35  +
push 20h  +
push 374h  +
lea eax [ebp+Parameter] +
push eax  +
mov [ebp+var_7C3C] ebx +
call sub_1008C39  +
lea ecx [ebp+var_198] +
call sub_1009E2F  +
push offset dword_10261B8  +
push offset unk_1026298  +
push offset loc_1009DB9  +
push offset dword_1008AD8  +
call sub_1009E03  +
cmp dword_10262BC ebx +
jz loc_10085FF  +
mov al byte_10262C0 +
cmp al 4 +
jb loc_100D3CA  +
mov eax dword_10262A8 +
mov ecx dword_10262AC +
mov edx 4000h +
mov esi 80000000h +
and eax edx +
and ecx esi +
or eax ecx +
jnz loc_10120FD  +
push 28h  +
mov byte ptr [ebp+var_4] 4 +
call off_102665C  +
mov ecx eax +
mov [ebp+var_7C5C] ecx +
mov byte ptr [ebp+var_4] 5 +
cmp ecx ebx +
jz loc_100D3D7  +
push 3  +
push ebx  +
push 11h  +
mov eax offset loc_10041AF +
push eax  +
push eax  +
call sub_1008EAE  +
mov byte ptr [ebp+var_4] 4 +
mov dword_1026070 eax +
cmp eax ebx +
jz loc_1012142  +
mov esi [ebp+var_7C38] +
cmp esi ebx +
jz loc_10126CC  +
cmp [ebp+arg_0] ebx +
jz loc_10126CC  +
cmp [ebp+arg_0] 9 +
jl loc_1012696  +
push offset aDownleveldaemo  +
push dword ptr [esi+20h]  +
call ds:__imp__wcsicmp  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_1012696  +
mov eax [esi+4] +
mov [ebp+var_7C5C] eax +
cmp eax ebx +
jz loc_1012660  +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
cmp cx bx +
jnz loc_100868E  +
sub eax edx +
sar eax 1 +
jz loc_1012660  +
push dword ptr [esi+8]  +
lea ecx [ebp+var_280] +
call sub_1008C91  +
mov byte ptr [ebp+var_4] 6 +
cmp [ebp+var_274] ebx +
jz loc_1012179  +
push dword ptr [esi+0Ch]  +
mov edi ds:_wtoi +
call edi  +
pop ecx  +
mov [ebp+var_7C3C] eax +
cmp eax ebx +
jz loc_101262A  +
cmp eax 20h +
ja loc_101262A  +
mov esi [ebp+var_7C38] +
xor eax eax +
inc eax  +
cmp eax [ebp+var_7C3C] +
sbb eax eax +
neg eax  +
mov dword_1026074 eax +
push dword ptr [esi+10h]  +
call edi  +
pop ecx  +
mov dword_1026060 eax +
mov ecx [esi+14h] +
push ebx  +
mov esi 20019h +
push esi  +
push ecx  +
mov [ebp+lpCriticalSection] ecx +
push eax  +
lea ecx [ebp+var_3C0] +
call sub_1008CB9  +
push esi  +
push offset aGatheringManag  +
lea eax [ebp+var_3C0] +
push eax  +
lea ecx [ebp+var_320] +
mov byte ptr [ebp+var_4] 7 +
call sub_1008D30  +
lea eax [ebp+var_7C60] +
push eax  +
push offset aDebugfilters  +
lea ecx [ebp+var_320] +
mov byte ptr [ebp+var_4] 8 +
call sub_1008B8C  +
cmp eax ebx +
jz loc_100876A  +
cmp [ebp+var_7C60] ebx +
jnz loc_10121AC  +
mov esi [ebp+var_7C38] +
push dword ptr [esi+18h]  +
lea ecx [ebp+var_1EC] +
call sub_1004CF3  +
mov byte ptr [ebp+var_4] 9 +
cmp [ebp+var_1E0] ebx +
jz loc_10121BB  +
cmp [ebp+arg_0] 0Ah +
mov [ebp+var_7C38] ebx +
jge loc_100D3EB  +
call sub_1008FB9  +
cmp eax ebx +
jl loc_1012220  +
mov [ebp+pSecDesc] ebx +
mov [ebp+var_7C70] ebx +
mov [ebp+var_7C6C] ebx +
mov [ebp+var_7C68] ebx +
mov [ebp+var_7C64] ebx +
push 1  +
push ebx  +
lea ecx [ebp+pSecDesc] +
mov byte ptr [ebp+var_4] 0Ah +
call sub_1009854  +
mov [ebp+pSid] ebx +
lea eax [ebp+pSid] +
push eax  +
push 11h  +
mov byte ptr [ebp+var_4] 0Bh +
call sub_10090ED  +
cmp eax ebx +
jl loc_1012252  +
push 1  +
push [ebp+pSid]  +
lea ecx [ebp+pSecDesc] +
call sub_1009366  +
push ebx  +
push ebx  +
push ebx  +
cmp [ebp+var_7C38] ebx +
jnz loc_100D3BC  +
push 2  +
push 5  +
push ebx  +
push ebx  +
push 0FFFFFFFFh  +
push [ebp+pSecDesc]  +
call ds:CoInitializeSecurity  +
cmp eax ebx +
jl loc_1012284  +
mov esi [ebp+lpCriticalSection] +
push esi  +
mov edi offset dword_1026204 +
call sub_100BFBB  +
push esi  +
call sub_100B9D9  +
cmp eax ebx +
jl loc_10122B6  +
push esi  +
mov edi offset dword_1026208 +
call sub_100C260  +
cmp eax ebx +
jl loc_10122F3  +
cmp dword_1026208 ebx +
jz loc_10122F3  +
mov dword_1026040 ebx +
lea eax [ebp+var_280] +
push eax  +
lea ecx [ebp+var_68] +
mov dword_1026068 1 +
call sub_100BF90  +
mov eax [ebp+var_68] +
push 0FFFFFFFFh  +
push [ebp+var_5C]  +
lea ecx [ebp+var_68] +
push offset aSde  +
mov byte ptr [ebp+var_4] 0Ch +
call dword ptr [eax+10h]  +
push [ebp+lpName]  +
push ebx  +
push 1F0003h  +
call ds:OpenEventW  +
push eax  +
mov ecx offset off_1026100 +
call sub_1001EE0  +
cmp dword_1026104 ebx +
jz loc_101230C  +
push esi  +
mov edi offset dword_102606C +
mov dword_102606C 3 +
call sub_100C329  +
call ds:GetCurrentProcessId  +
lea ecx [ebp+var_120] +
mov dword_102605C eax +
call sub_100B5ED  +
mov [ebp+var_120] offset off_1002030 +
push [ebp+var_27C]  +
lea ecx [ebp+var_120] +
mov byte ptr [ebp+var_4] 0Dh +
call sub_100B3D4  +
cmp eax ebx +
jl loc_1012352  +
mov eax dword_1026104 +
mov [ebp+var_118] eax +
cmp dword_1026664 ebx +
jnz loc_1012384  +
push dword_102605C  +
lea ecx [ebp+var_120] +
push ebx  +
call sub_100B399  +
mov eax dword_102605C +
not eax  +
push eax  +
push 1  +
lea ecx [ebp+var_120] +
call sub_100B399  +
lea ecx [ebp+var_120] +
call sub_100B2F3  +
cmp eax ebx +
jl loc_1012393  +
lea ecx [ebp+var_DB4] +
mov [ebp+var_C0] 7530h +
call sub_1004340  +
lea eax [ebp+var_120] +
push eax  +
lea ecx [ebp+var_DB4] +
mov byte ptr [ebp+var_4] 0Eh +
call sub_100C447  +
lea ecx [ebp+var_DB4] +
call sub_100C45E  +
cmp eax ebx +
jl loc_10123C5  +
mov edi ds:GetHandleInformation +
or [ebp+var_C0] 0FFFFFFFFh +
lea eax [ebp+dwFlags] +
push eax  +
push hObject  +
mov [ebp+dwFlags] ebx +
call edi  +
test eax eax +
jz loc_1012408  +
mov eax hObject +
mov [ebp+var_114] eax +
lea eax [ebp+dwFlags] +
push eax  +
push dword_102610C  +
call edi  +
test eax eax +
jz loc_101244E  +
lea eax [ebp+dwFlags] +
push eax  +
push dword_1026114  +
call edi  +
test eax eax +
jz loc_1012494  +
mov edi ds:CreateEventW +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
call edi  +
push eax  +
mov ecx offset off_1026120 +
call sub_1001EE0  +
cmp hEvent ebx +
jz loc_10124DA  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
call edi  +
push eax  +
mov ecx offset off_1026128 +
call sub_1001EE0  +
cmp dword_102612C ebx +
jz loc_1012520  +
push offset aProtocolHostMa  +
push 0FFFFFFFFh  +
call nullsub_1  +
push [ebp+var_1E8]  +
lea ecx [ebp+var_174] +
call sub_10081ED  +
push ebx  +
lea ecx [ebp+var_198] +
call sub_100C407  +
cmp eax ebx +
jl loc_1012566  +
lea ecx [ebp+var_7C4C] +
call sub_100C6D1  +
mov byte ptr [ebp+var_4] 0Fh +
xor esi esi +
cmp esi [ebp+var_7C3C] +
jnb loc_100B6B4  +
push [ebp+var_7C5C]  +
mov edi esi +
imul edi edi +
lea ecx [ebp+edi+var_7954] +
call sub_10081ED  +
push ebx  +
lea ecx [ebp+edi+Parameter] +
call sub_100B679  +
cmp eax ebx +
jl loc_1012598  +
inc esi  +
jmp loc_1008A99  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx] +
push 0FFFFFFFFh  +
push dword ptr [ecx+0Ch]  +
push [ebp+arg_0]  +
call dword ptr [eax+10h]  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push esi  +
mov esi ds:SetLastError +
push edi  +
push 0  +
mov edi ecx +
call esi  +
mov eax [edi+9Ch] +
mov [ebp+cbData] 4 +
test eax eax +
jz loc_101377F  +
lea ecx [ebp+cbData] +
push ecx  +
lea ecx [ebp+Data] +
push ecx  +
lea ecx [ebp+Type] +
push ecx  +
push 0  +
push [ebp+lpValueName]  +
push eax  +
call ds:RegQueryValueExW  +
test eax eax +
jnz loc_100C0DA  +
cmp [ebp+Type] 4 +
jnz loc_100C0DA  +
mov eax [ebp+arg_4] +
mov ecx dword ptr [ebp+Data] +
mov [eax] ecx +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov edi [esi+0Ch] +
test edi edi +
jz loc_1008C1A  +
mov eax [esi+4] +
movzx eax word ptr [eax+edi*2-2] +
push eax  +
call sub_1003D6C  +
test eax eax +
jnz loc_1008C29  +
mov eax [esi] +
push 0FFFFFFFFh  +
push edi  +
push offset String  +
mov ecx esi +
call dword ptr [eax+10h]  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
call __SEH_prolog4  +
xor eax eax +
mov [ebp+var_20] eax +
mov [ebp+ms_exc.disabled] eax +
mov [ebp+var_1C] eax +
mov eax [ebp+var_1C] +
cmp eax [ebp+arg_8] +
jge loc_1008F89  +
mov esi [ebp+arg_0] +
mov ecx esi +
call [ebp+arg_C]  +
add esi [ebp+arg_4] +
mov [ebp+arg_0] esi +
inc [ebp+var_1C]  +
jmp loc_1008C50  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
lea eax [esi+10h] +
push eax  +
push 42h  +
call sub_1004D1B  +
mov dword ptr [esi] offset off_1001E50 +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_1001D89  +
mov esi ecx +
mov [ebp-10h] esi +
call sub_1008207  +
xor ebx ebx +
mov [ebp-4] ebx +
mov dword ptr [esi] offset off_10033EC +
mov dword ptr [esi+98h] 1 +
cmp [ebp+14h] ebx +
jnz loc_1013786  +
push dword ptr [ebp+0Ch]  +
lea ecx [esi+4] +
call sub_10081ED  +
mov edi ds:SetLastError +
push ebx  +
call edi  +
lea ebx [esi+9Ch] +
push ebx  +
push dword ptr [ebp+10h]  +
push 0  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call ds:RegOpenKeyExW  +
test eax eax +
jnz loc_10137A8  +
mov eax esi +
call __EH_epilog3  +
retn 10h  +
***
call sub_1001D89  +
mov esi ecx +
mov [ebp-10h] esi +
call sub_1008207  +
and dword ptr [ebp-4] 0 +
push 0  +
mov dword ptr [esi] offset off_10033EC +
mov dword ptr [esi+98h] 1 +
call ds:SetLastError  +
mov ebx [ebp+8] +
push dword ptr [ebx+8]  +
lea edi [esi+4] +
mov ecx edi +
call sub_10081ED  +
push edi  +
call sub_1008BF7  +
push dword ptr [ebp+0Ch]  +
mov ecx edi +
call sub_1008B71  +
mov ebx [ebx+9Ch] +
lea edi [esi+9Ch] +
push edi  +
push dword ptr [ebp+10h]  +
push 0  +
push dword ptr [ebp+0Ch]  +
push ebx  +
call ds:RegOpenKeyExW  +
test eax eax +
jnz loc_10137B3  +
mov eax esi +
call __EH_epilog3  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
xor eax eax +
test ecx ecx +
jz loc_1008E03  +
cmp ecx 7FFFFFFFh +
ja loc_1008E03  +
test eax eax +
jl loc_1008E01  +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
lea eax [ebp+arg_C] +
push eax  +
push [ebp+arg_8]  +
lea esi [ecx-1] +
push esi  +
push edi  +
xor ebx ebx +
call ds:_vsnwprintf  +
add esp 10h +
test eax eax +
jl loc_1008E0A  +
cmp eax esi +
ja loc_1008E0A  +
jnz loc_1008DFC  +
xor eax eax +
mov [edi+esi*2] ax +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn   +
mov eax 80070057h +
jmp loc_1008DCB  +
mov ebx 8007007Ah +
jmp loc_1008DF6  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor ecx ecx +
mov eax ds:dword_1008E38[ecx*4] +
test eax eax +
jz loc_1008EA4  +
cmp eax [ebp+arg_0] +
jnb loc_1008EA0  +
inc ecx  +
cmp ecx 1Ah +
jb loc_1008E1D  +
jmp loc_1008EA4  +
pop ebp  +
retn 4  +
mov eax [ebp+arg_0] +
jmp loc_1008EA0  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
mov esi ecx +
mov [esi+4] eax +
mov eax [ebp+arg_4] +
mov [esi+8] eax +
mov eax [ebp+arg_8] +
mov [esi+14h] eax +
mov eax [ebp+arg_10] +
mov [esi+1Ch] eax +
mov eax [ebp+arg_C] +
mov dword ptr [esi] offset off_100359C +
mov [esi+20h] eax +
call sub_1008EEB  +
mov eax esi +
pop esi  +
pop ebp  +
retn 14h  +
***
call sub_1001D89  +
mov esi ecx +
push dword ptr [esi+14h]  +
xor ebx ebx +
mov [esi+10h] ebx +
call sub_1008E16  +
mov edi eax +
mov eax [esi+20h] +
imul eax edi +
mov [esi+0Ch] edi +
mov [esi+18h] eax +
cmp edi ebx +
jz loc_101137D  +
xor ecx ecx +
push 10h  +
pop edx  +
mov eax edi +
mul  edx +
seto cl  +
neg ecx  +
or ecx eax +
xor eax eax +
add ecx 4 +
setb al  +
neg eax  +
or eax ecx +
push eax  +
call off_102665C  +
mov [ebp-10h] eax +
mov [ebp-4] ebx +
cmp eax ebx +
jz loc_1008F61  +
push offset loc_100DABA  +
push offset loc_1008F7B  +
push edi  +
lea ebx [eax+4] +
push 10h  +
push ebx  +
mov [eax] edi +
call sub_1008C39  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov [esi+24h] ebx +
test ebx ebx +
jz loc_10113A1  +
call __EH_epilog3  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_1001E18  +
mov eax esi +
pop esi  +
retn   +
***
mov [ebp+var_20] 1 +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
call sub_1008FA9  +
call __SEH_epilog4  +
retn 14h  +
***
cmp dword ptr [ebp-20h] 0 +
jz loc_101320D  +
retn   +
***
call sub_1001D89  +
xor ebx ebx +
mov dword ptr [ebp-18h] offset off_1001E6C +
mov [ebp-14h] ebx +
lea eax [ebp-14h] +
push eax  +
push 28h  +
mov [ebp-4] ebx +
call ds:GetCurrentProcess  +
push eax  +
call ds:OpenProcessToken  +
test eax eax +
jz loc_1010F7E  +
mov edi ds:GetTokenInformation +
lea eax [ebp-10h] +
push eax  +
push ebx  +
push ebx  +
push 3  +
push dword ptr [ebp-14h]  +
mov [ebp-10h] ebx +
call edi  +
mov esi ds:__imp_GetLastError +
test eax eax +
jnz loc_100901A  +
call esi  +
cmp eax 7Ah +
jnz loc_1010F99  +
push dword ptr [ebp-10h]  +
call off_102665C  +
mov ebx eax +
test ebx ebx +
jz loc_1010F9D  +
lea eax [ebp-10h] +
push eax  +
push dword ptr [ebp-10h]  +
push ebx  +
push 3  +
push dword ptr [ebp-14h]  +
call edi  +
test eax eax +
jz loc_1010FA5  +
lea eax [ebp-20h] +
push eax  +
push offset Name  +
xor edi edi +
push edi  +
call ds:LookupPrivilegeValueW  +
xor ecx ecx +
cmp [ebx] edi +
jbe loc_100907A  +
lea eax [ebx+8] +
mov edx [eax-4] +
cmp edx [ebp-20h] +
jz loc_10095C0  +
mov dword ptr [eax+4] 4 +
inc ecx  +
add eax 0Ch +
cmp ecx [ebx] +
jb loc_100905F  +
push edi  +
push edi  +
push dword ptr [ebp-10h]  +
push ebx  +
push edi  +
push dword ptr [ebp-14h]  +
call ds:AdjustTokenPrivileges  +
test eax eax +
jz loc_1010FC7  +
push ebx  +
mov byte ptr [ebp-4] 0 +
call off_1026660  +
xor esi esi +
push 0  +
lea ecx [ebp-18h] +
mov dword ptr [ebp-18h] offset off_1001E6C +
call sub_1001EE0  +
mov eax esi +
call __EH_epilog3  +
retn   +
***
call sub_1001D89  +
mov esi ds:CreateWellKnownSid +
lea eax [ebp-20h] +
push eax  +
xor ebx ebx +
push ebx  +
push ebx  +
push dword ptr [ebp+8]  +
mov [ebp-20h] ebx +
call esi  +
test eax eax +
jnz loc_1009122  +
call ds:__imp_GetLastError  +
cmp eax 7Ah +
jnz loc_1013A8A  +
push dword ptr [ebp-20h]  +
call off_102665C  +
mov edi eax +
mov [ebp-14h] edi +
mov [ebp-4] ebx +
cmp edi ebx +
jz loc_1009272  +
lea eax [ebp-20h] +
push eax  +
push edi  +
push ebx  +
push dword ptr [ebp+8]  +
call esi  +
test eax eax +
jz loc_1013AA1  +
lea eax [ebp-24h] +
push eax  +
lea eax [ebp-18h] +
push eax  +
push ebx  +
lea eax [ebp-1Ch] +
push eax  +
push ebx  +
push edi  +
push ebx  +
mov [ebp-1Ch] ebx +
mov [ebp-18h] ebx +
call ds:LookupAccountSidW  +
test eax eax +
jnz loc_100917D  +
call ds:__imp_GetLastError  +
cmp eax 7Ah +
jnz loc_1013AA7  +
mov eax [ebp-1Ch] +
push 2  +
inc eax  +
xor ecx ecx +
pop edx  +
mul  edx +
seto cl  +
neg ecx  +
or eax ecx +
push eax  +
call off_102665C  +
mov [ebp-10h] eax +
mov eax [ebp-18h] +
push 2  +
inc eax  +
xor ecx ecx +
pop edx  +
mul  edx +
seto cl  +
mov byte ptr [ebp-4] 1 +
neg ecx  +
or eax ecx +
push eax  +
call off_102665C  +
mov [ebp+8] eax +
mov eax [ebp-1Ch] +
mov ecx [ebp-18h] +
lea esi [ecx+eax+2] +
push 2  +
xor ecx ecx +
pop edx  +
mov eax esi +
mul  edx +
seto cl  +
mov byte ptr [ebp-4] 2 +
neg ecx  +
or eax ecx +
push eax  +
call off_102665C  +
mov edi eax +
cmp [ebp-10h] ebx +
jz loc_1013AE8  +
cmp [ebp+8] ebx +
jz loc_1013AE8  +
cmp edi ebx +
jz loc_1013AE8  +
lea eax [ebp-24h] +
push eax  +
lea eax [ebp-18h] +
push eax  +
push dword ptr [ebp+8]  +
lea eax [ebp-1Ch] +
push eax  +
push dword ptr [ebp-10h]  +
push dword ptr [ebp-14h]  +
push ebx  +
call ds:LookupAccountSidW  +
test eax eax +
jz loc_1013ABD  +
push dword ptr [ebp-10h]  +
push dword ptr [ebp+8]  +
push offset aLsLs  +
push esi  +
push edi  +
call sub_1008DB5  +
mov esi eax +
mov eax [ebp+0Ch] +
add esp 14h +
cmp esi ebx +
jl loc_1013AD6  +
mov [eax] edi +
push dword ptr [ebp+8]  +
mov byte ptr [ebp-4] 1 +
call off_1026660  +
push dword ptr [ebp-10h]  +
mov [ebp-4] bl +
call off_1026660  +
push dword ptr [ebp-14h]  +
or dword ptr [ebp-4] 0FFFFFFFFh +
call off_1026660  +
mov eax esi +
call __EH_epilog3  +
retn 8  +
mov eax 8007000Eh +
jmp loc_100926A  +
***
call sub_1004DD8  +
mov edi [ebp+0Ch] +
xor esi esi +
cmp edi esi +
jz loc_1010C65  +
cmp [ebp+8] esi +
jz loc_1010C6F  +
lea eax [ebp-20h] +
push eax  +
lea eax [ebp-18h] +
push eax  +
push esi  +
lea eax [ebp-1Ch] +
push eax  +
push esi  +
push dword ptr [ebp+8]  +
mov [edi] esi +
push esi  +
mov [ebp-14h] esi +
mov [ebp-18h] esi +
mov [ebp-1Ch] esi +
call ds:LookupAccountNameW  +
call ds:__imp_GetLastError  +
cmp eax 7Ah +
jnz loc_1010CA4  +
mov eax [ebp-18h] +
push 2  +
xor ecx ecx +
pop edx  +
mul  edx +
seto cl  +
mov [ebp-4] esi +
neg ecx  +
or eax ecx +
push eax  +
call off_102665C  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov [ebp-14h] eax +
cmp [ebp-14h] esi +
jz loc_100935A  +
push dword ptr [ebp-1Ch]  +
call ds:malloc  +
pop ecx  +
mov [edi] eax +
cmp eax esi +
jz loc_1009353  +
lea ecx [ebp-20h] +
push ecx  +
lea ecx [ebp-18h] +
push ecx  +
push dword ptr [ebp-14h]  +
lea ecx [ebp-1Ch] +
push ecx  +
push eax  +
push dword ptr [ebp+8]  +
push esi  +
call ds:LookupAccountNameW  +
test eax eax +
jz loc_1010C8D  +
xor ebx ebx +
push dword ptr [ebp-14h]  +
call off_1026660  +
mov eax ebx +
call __EH_epilog3  +
retn 8  +
mov ebx 8007000Eh +
jmp loc_1009340  +
mov ebx 8007000Eh +
jmp loc_1009349  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
lea eax [ebp+pSid] +
push eax  +
push [ebp+pSid]  +
mov edi ecx +
call sub_1009291  +
mov esi eax +
test esi esi +
jl loc_100939A  +
push [ebp+AccessMask]  +
mov ecx edi +
push [ebp+pSid]  +
call sub_10093A7  +
push [ebp+pSid]  +
mov esi eax +
call ds:__imp_free  +
pop ecx  +
pop edi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
push [ebp+AccessMask]  +
mov esi ecx +
push [ebp+pSid]  +
lea edi [esi+0Ch] +
push edi  +
call sub_10093EA  +
mov ebx eax +
test ebx ebx +
jl loc_10093DC  +
push 0  +
push dword ptr [edi]  +
push 1  +
push dword ptr [esi]  +
call ds:SetSecurityDescriptorDacl  +
test eax eax +
jz loc_1010C33  +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push ebx  +
mov ebx [ebp+arg_0] +
push edi  +
xor edi edi +
cmp ebx edi +
jz loc_101074C  +
push esi  +
mov esi [ebx] +
mov [ebp+pAcl] esi +
cmp [ebp+pSid] edi +
jz loc_10094BD  +
push [ebp+pSid]  +
call ds:IsValidSid  +
test eax eax +
jz loc_10094BD  +
mov [ebp+var_C] edi +
cmp [ebx] edi +
jnz loc_1010756  +
push [ebp+pSid]  +
call ds:GetLengthSid  +
mov ecx [ebp+var_C] +
lea edi [eax+ecx+10h] +
push edi  +
call ds:malloc  +
mov esi eax +
pop ecx  +
test esi esi +
jz loc_10094B4  +
push 2  +
push edi  +
push esi  +
call ds:InitializeAcl  +
mov edi ds:__imp_free +
test eax eax +
jz loc_10094AA  +
push [ebp+pAcl]  +
push esi  +
call sub_10094C9  +
mov [ebp+arg_0] eax +
test eax eax +
jl loc_101077F  +
push [ebp+pSid]  +
push [ebp+AccessMask]  +
push 2  +
push esi  +
call ds:AddAccessAllowedAce  +
test eax eax +
jz loc_10094AA  +
push [ebp+pAcl]  +
mov [ebx] esi +
call edi  +
pop ecx  +
cmp [ebp+arg_0] 0 +
jl loc_101077F  +
mov eax [ebp+arg_0] +
pop esi  +
pop edi  +
pop ebx  +
leave   +
retn 0Ch  +
cmp eax edi +
mov [ebp+arg_0] eax +
jge loc_100942C  +
jmp loc_1009497  +
call sub_100975B  +
jmp loc_1010777  +
mov [ebp+arg_0] 8007000Eh +
jmp loc_1009497  +
mov eax 80070057h +
jmp loc_100949A  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push esi  +
xor esi esi +
cmp [ebp+arg_0] esi +
jz loc_10106E2  +
cmp [ebp+pAcl] esi +
jnz loc_10106EC  +
xor eax eax +
pop esi  +
leave   +
retn 8  +
***
call sub_1004DD8  +
mov esi ecx +
mov [ebp-14h] esi +
push dword ptr [esi]  +
call off_1026660  +
push dword ptr [esi+4]  +
mov edi ds:__imp_free +
xor ebx ebx +
mov [esi] ebx +
call edi  +
push dword ptr [esi+8]  +
mov [esi+4] ebx +
call edi  +
push dword ptr [esi+0Ch]  +
mov [esi+8] ebx +
call edi  +
push dword ptr [esi+10h]  +
mov [esi+0Ch] ebx +
call edi  +
add esp 10h +
push 14h  +
mov [esi+10h] ebx +
mov [ebp-4] ebx +
call off_102665C  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov [esi] eax +
mov eax [esi] +
cmp eax ebx +
jz loc_1009568  +
push 1  +
push eax  +
call ds:InitializeSecurityDescriptor  +
test eax eax +
jz loc_1010C1B  +
xor eax eax +
call __EH_epilog3  +
retn   +
mov eax 8007000Eh +
jmp loc_1009562  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
xor eax eax +
mov [ebp+TokenHandle] eax +
cmp edi eax +
jz loc_100958A  +
mov [edi] eax +
mov esi [ebp+arg_4] +
cmp esi eax +
jz loc_1009593  +
mov [esi] eax +
lea eax [ebp+TokenHandle] +
push eax  +
push [ebp+OpenAsSelf]  +
push 8  +
call ds:GetCurrentThread  +
push eax  +
call ds:OpenThreadToken  +
test eax eax +
jnz loc_1010C4B  +
call sub_100975B  +
mov esi eax +
pop edi  +
mov eax esi +
pop esi  +
leave   +
retn 0Ch  +
***
mov edx [eax] +
cmp edx [ebp-1Ch] +
jz loc_1009072  +
jmp loc_100906B  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
xor eax eax +
mov [ebp+TokenHandle] eax +
cmp edi eax +
jz loc_10095EB  +
mov [edi] eax +
mov esi [ebp+arg_4] +
cmp esi eax +
jz loc_10095F4  +
mov [esi] eax +
lea eax [ebp+TokenHandle] +
push eax  +
push 8  +
call ds:GetCurrentProcess  +
push eax  +
call ds:OpenProcessToken  +
test eax eax +
jz loc_1010C3F  +
push esi  +
push edi  +
push [ebp+TokenHandle]  +
call sub_1009631  +
push [ebp+TokenHandle]  +
mov esi eax +
call ds:CloseHandle  +
pop edi  +
mov eax esi +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax [ebp+arg_4] +
push ebx  +
xor ebx ebx +
push esi  +
push edi  +
mov [ebp+ReturnLength] ebx +
mov [ebp+var_4] ebx +
cmp eax ebx +
jz loc_100964C  +
mov [eax] ebx +
mov ecx [ebp+arg_8] +
cmp ecx ebx +
jz loc_1009655  +
mov [ecx] ebx +
mov esi ds:GetTokenInformation +
mov edi ds:__imp_GetLastError +
cmp eax ebx +
jz loc_10096C8  +
lea eax [ebp+ReturnLength] +
push eax  +
push ebx  +
push ebx  +
push 1  +
push [ebp+TokenHandle]  +
call esi  +
call edi  +
cmp eax 7Ah +
jnz loc_1010693  +
push [ebp+ReturnLength]  +
call ds:malloc  +
mov ebx eax +
pop ecx  +
test ebx ebx +
jz loc_100973A  +
lea eax [ebp+ReturnLength] +
push eax  +
push [ebp+ReturnLength]  +
push ebx  +
push 1  +
push [ebp+TokenHandle]  +
call esi  +
test eax eax +
jz loc_1009730  +
push dword ptr [ebx]  +
push [ebp+arg_4]  +
call sub_10097E3  +
push ebx  +
mov [ebp+var_4] eax +
call ds:__imp_free  +
pop ecx  +
xor ebx ebx +
cmp [ebp+var_4] ebx +
jl loc_10106AF  +
cmp [ebp+arg_8] ebx +
jz loc_100971D  +
lea eax [ebp+ReturnLength] +
push eax  +
push ebx  +
push ebx  +
push 5  +
push [ebp+TokenHandle]  +
call esi  +
call edi  +
cmp eax 7Ah +
jnz loc_10106A1  +
push [ebp+ReturnLength]  +
call ds:malloc  +
mov edi eax +
pop ecx  +
cmp edi ebx +
jz loc_100974D  +
lea eax [ebp+ReturnLength] +
push eax  +
push [ebp+ReturnLength]  +
push edi  +
push 5  +
push [ebp+TokenHandle]  +
call esi  +
test eax eax +
jz loc_1009746  +
push dword ptr [edi]  +
push [ebp+arg_8]  +
call sub_10097E3  +
push edi  +
mov [ebp+var_4] eax +
call ds:__imp_free  +
pop ecx  +
cmp [ebp+var_4] ebx +
jl loc_10106AF  +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
call sub_100975B  +
jmp loc_10096B2  +
mov [ebp+var_4] 8007000Eh +
jmp loc_10096BD  +
call sub_100975B  +
jmp loc_1009712  +
mov [ebp+var_4] 8007000Eh +
jmp loc_100971D  +
***
call ds:__imp_GetLastError  +
test eax eax +
jle locret_100976F  +
and eax 0FFFFh +
or eax 80070000h +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
push [ebp+bOwnerDefaulted]  +
mov edi ecx +
push 0  +
push dword ptr [edi]  +
call ds:SetSecurityDescriptorOwner  +
test eax eax +
jz loc_101065D  +
mov ebx ds:__imp_free +
lea esi [edi+4] +
push dword ptr [esi]  +
call ebx  +
and dword ptr [esi] 0 +
cmp [ebp+pSourceSid] 0 +
pop ecx  +
jz loc_1010641  +
push [ebp+pSourceSid]  +
push esi  +
call sub_10097E3  +
mov [ebp+pSourceSid] eax +
test eax eax +
jl loc_10097D4  +
push [ebp+bOwnerDefaulted]  +
push dword ptr [esi]  +
push dword ptr [edi]  +
call ds:SetSecurityDescriptorOwner  +
test eax eax +
jz loc_1010648  +
mov eax [ebp+pSourceSid] +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
push esi  +
mov esi [ebp+arg_0] +
test esi esi +
jz loc_1010614  +
cmp dword ptr [esi] 0 +
jnz loc_1009848  +
push [ebp+pSourceSid]  +
and dword ptr [esi] 0 +
call ds:IsValidSid  +
test eax eax +
jz loc_1009848  +
push edi  +
push [ebp+pSourceSid]  +
call ds:GetLengthSid  +
mov edi eax +
push edi  +
call ds:malloc  +
pop ecx  +
mov [esi] eax +
test eax eax +
jz loc_101061E  +
push [ebp+pSourceSid]  +
push eax  +
push edi  +
call ds:CopySid  +
test eax eax +
jz loc_1010628  +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
leave   +
retn 8  +
mov eax 80070057h +
jmp loc_1009843  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
push edi  +
mov ebx ecx +
call sub_10094F2  +
mov edi eax +
xor esi esi +
cmp edi esi +
jl loc_10098E3  +
push esi  +
lea eax [ebp+pSourceSid] +
push eax  +
lea eax [ebp+var_4] +
push eax  +
mov [ebp+var_4] esi +
mov [ebp+pSourceSid] esi +
call sub_1009574  +
mov edi eax +
and eax 0FFFFh +
cmp eax 3F0h +
jnz loc_10098A3  +
cmp [ebp+arg_4] esi +
jz loc_10098A3  +
lea eax [ebp+pSourceSid] +
push eax  +
lea eax [ebp+var_4] +
push eax  +
call sub_10095D5  +
mov edi eax +
cmp edi esi +
jl loc_10098E3  +
push [ebp+bGroupDefaulted]  +
mov ecx ebx +
push [ebp+var_4]  +
call sub_1009775  +
mov edi eax +
cmp edi esi +
jl loc_10098C9  +
push [ebp+bGroupDefaulted]  +
mov ecx ebx +
push [ebp+pSourceSid]  +
call sub_10098F1  +
mov edi eax +
push [ebp+var_4]  +
mov esi ds:__imp_free +
call esi  +
push [ebp+pSourceSid]  +
call esi  +
pop ecx  +
pop ecx  +
test edi edi +
jl loc_1010E48  +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
push [ebp+bGroupDefaulted]  +
mov edi ecx +
push 0  +
push dword ptr [edi]  +
call ds:SetSecurityDescriptorGroup  +
test eax eax +
jz loc_1010686  +
mov ebx ds:__imp_free +
lea esi [edi+8] +
push dword ptr [esi]  +
call ebx  +
and dword ptr [esi] 0 +
cmp [ebp+pSourceSid] 0 +
pop ecx  +
jz loc_101066A  +
push [ebp+pSourceSid]  +
push esi  +
call sub_10097E3  +
mov [ebp+pSourceSid] eax +
test eax eax +
jl loc_1009950  +
push [ebp+bGroupDefaulted]  +
push dword ptr [esi]  +
push dword ptr [edi]  +
call ds:SetSecurityDescriptorGroup  +
test eax eax +
jz loc_1010671  +
mov eax [ebp+pSourceSid] +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov edx [eax+8] +
mov eax [eax+9Ch] +
push edx  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push eax  +
call sub_10082D9  +
pop ebp  +
retn 0Ch  +
***
push dword ptr [ebp+14h]  +
add esi 4 +
mov ecx esi +
call sub_10081ED  +
push esi  +
call sub_1008BF7  +
push dword ptr [ebp+0Ch]  +
mov ecx esi +
call sub_1008B71  +
jmp loc_1008347  +
***
push 4  +
mov eax offset __ehhandler$?CallUnexpected@@YAXPBU_s_ESTypeList@@@Z_12 +
call sub_1001D89  +
mov esi ecx +
mov [ebp-10h] esi +
call sub_1009C94  +
and dword ptr [ebp-4] 0 +
lea ecx [esi+24h] +
mov dword ptr [esi] offset off_10035BC +
call sub_1009A75  +
lea ecx [esi+2E0h] +
call sub_1003DBC  +
mov eax esi +
call __EH_epilog3  +
retn   +
***
call sub_10039ED  +
mov esi ecx +
mov [ebp-0B4h] esi +
call sub_1008223  +
and dword ptr [ebp-4] 0 +
lea ebx [esi+0A8h] +
mov ecx ebx +
mov dword ptr [esi] offset off_1009B48 +
call sub_1009CE1  +
lea ecx [esi+0F8h] +
call sub_1009BBE  +
push 0F003Fh  +
lea ecx [ebp-0B0h] +
mov byte ptr [ebp-4] 2 +
call sub_100824A  +
push 20019h  +
push offset aGatheringManag  +
lea eax [ebp-0B0h] +
push eax  +
mov ecx esi +
mov byte ptr [ebp-4] 3 +
call sub_10099EC  +
lea edi [esi+0A0h] +
push edi  +
push lpValueName  +
mov ecx esi +
call sub_1008B8C  +
test eax eax +
jz loc_10113DA  +
push dword ptr [edi]  +
mov ecx ebx +
push 1  +
call sub_1009B79  +
lea edi [esi+0A4h] +
push edi  +
push off_1026680  +
mov ecx esi +
call sub_1008B8C  +
test eax eax +
jz loc_10113F2  +
push dword ptr [edi]  +
mov ecx ebx +
push 2  +
call sub_1009B79  +
lea ecx [ebp-0B0h] +
mov byte ptr [ebp-4] 2 +
call sub_100341D  +
mov eax esi +
call sub_1003A2A  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
lea eax [ecx-1] +
cmp eax 1 +
ja loc_1009BB5  +
push esi  +
push 3  +
pop eax  +
push 64h  +
pop esi  +
sub eax ecx +
cmp [ebp+arg_4] esi +
ja loc_10144C0  +
mov ecx eax +
shl ecx 2 +
mov eax ds:dword_1003A68[ecx] +
imul eax [ebp+arg_4] +
xor edx edx +
div  esi +
pop esi  +
mov dword_1026644[ecx] eax +
pop ebp  +
retn 8  +
***
xor eax eax +
push esi  +
mov esi ecx +
mov [esi] eax +
mov [esi+4] eax +
mov [esi+8] eax +
mov [esi+0Ch] eax +
lea eax [esi+10h] +
push eax  +
call ds:InitializeCriticalSection  +
lea ecx [esi+1B8h] +
call sub_1009BEC  +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
push edi  +
mov esi ecx +
xor edi edi +
mov [esi] edi +
mov [esi+4] edi +
mov [esi+8] edi +
push lpLibFileName  +
call ds:LoadLibraryA  +
cmp eax edi +
jz loc_1009C1E  +
mov [esi] eax +
push lpProcName  +
push eax  +
call ds:__imp_GetProcAddress  +
mov [esi+4] eax +
cmp [esi] edi +
jz loc_1010CB1  +
cmp [esi+4] edi +
jz loc_1010CB1  +
pop edi  +
mov eax esi +
pop esi  +
retn   +
***
push 4  +
call off_1026668  +
mov ecx eax +
mov [ebp-10h] ecx +
and dword ptr [ebp-4] 0 +
test ecx ecx +
jz loc_1009C5A  +
push 0  +
push 0  +
call sub_1009C63  +
mov [edi+3Ch] eax +
jmp loc_1001ED5  +
xor eax eax +
jmp loc_1009C52  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push esi  +
push 0  +
push [ebp+bInitialState]  +
mov esi ecx +
push 1  +
push [ebp+lpEventAttributes]  +
call ds:CreateEventW  +
mov [esi] eax +
test eax eax +
jz loc_1010EC7  +
mov eax esi +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_1009CAD  +
mov dword ptr [esi] offset off_10035B0 +
mov eax esi +
pop esi  +
retn   +
***
xor eax eax +
push esi  +
push eax  +
mov esi ecx +
push eax  +
mov [esi+4] eax +
push eax  +
push eax  +
mov dword ptr [esi] offset off_10035A4 +
mov [esi+8] eax +
mov [esi+10h] eax +
mov dword ptr [esi+14h] 1 +
mov [esi+18h] eax +
call ds:CreateEventW  +
mov [esi+0Ch] eax +
mov eax esi +
pop esi  +
retn   +
***
call sub_1001D89  +
mov esi ecx +
mov [ebp-10h] esi +
and dword ptr [esi] 0 +
and dword ptr [ebp-4] 0 +
push 1  +
lea ecx [esi+4] +
call sub_1009D18  +
and dword ptr [esi+48h] 0 +
and dword ptr [esi+4Ch] 0 +
mov eax esi +
call __EH_epilog3  +
retn   +
***
call sub_1001D89  +
mov esi ecx +
mov [ebp-10h] esi +
mov edi ds:InitializeCriticalSection +
lea eax [esi+0Ch] +
push eax  +
call edi  +
lea eax [esi+24h] +
xor ebx ebx +
push eax  +
mov [ebp-4] ebx +
call edi  +
mov [esi+3Ch] ebx +
mov [esi+40h] ebx +
or dword ptr [esi+4] 0FFFFFFFFh +
mov byte ptr [ebp-4] 3 +
mov [esi+8] ebx +
mov [esi] ebx +
cmp [ebp+8] ebx +
jz loc_1009D66  +
mov ecx esi +
call sub_1009D75  +
mov ecx esi +
call sub_1001EBD  +
mov eax esi +
call __EH_epilog3  +
retn 4  +
***
call sub_1001D89  +
mov edi ecx +
cmp dword ptr [edi+40h] 0 +
jnz loc_1009DAA  +
push 4  +
call off_1026668  +
mov ecx eax +
mov [ebp-10h] ecx +
and dword ptr [ebp-4] 0 +
test ecx ecx +
jz loc_1009DB0  +
push 0  +
push 0  +
call sub_1009C63  +
mov [edi+40h] eax +
call __EH_epilog3  +
retn   +
xor eax eax +
jmp loc_1009DA7  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+28h] +
xor ecx ecx +
cmp eax ecx +
jz loc_1009DFA  +
mov edx [ebp+0Ch] +
sub edx ecx +
jz loc_1010811  +
dec edx  +
jnz loc_1009DFA  +
mov cl [ebp+10h] +
mov [eax+28h] cl +
mov ecx [ebp+14h] +
mov [eax+10h] ecx +
mov ecx [ebp+18h] +
mov [eax+14h] ecx +
mov ecx [ebp+1Ch] +
mov [eax+18h] ecx +
mov ecx [ebp+20h] +
mov dword ptr [eax+24h] 1 +
mov [eax+1Ch] ecx +
pop ebp  +
retn 24h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_C] +
mov ecx [eax] +
or ecx [eax+4] +
jnz loc_1010825  +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call ds:EventRegister  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_1009C94  +
lea ecx [esi+24h] +
mov dword ptr [esi] offset off_10035C8 +
call sub_1001DF9  +
mov eax esi +
pop esi  +
retn   +
***
push off_1026658  +
call sub_100AA5C  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_0]  +
call off_1026660  +
pop ebp  +
retn   +
***
mov eax dword_1026914 +
push offset dword_10260B4  +
push dword_1026910  +
mov dword_10260B4 eax +
push offset dword_1026220  +
push offset dword_1026224  +
push offset dword_102621C  +
call ds:__wgetmainargs  +
add esp 14h +
mov dword_10260B0 eax +
retn   +
***
push offset loc_101C1E8  +
call ds:SetUnhandledExceptionFilter  +
xor eax eax +
retn   +
***
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ecx] +
mov eax [ecx+4] +
sub eax edx +
sar eax 1 +
js loc_100A2B3  +
lea ecx [edx+eax*2] +
mov dx [ecx] +
cmp dx [ebp+arg_0] +
jz loc_100A2B3  +
dec eax  +
dec ecx  +
dec ecx  +
test eax eax +
jge loc_100A2A3  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov eax [esi+4] +
sub eax [esi] +
mov ecx [esi+8] +
push edi  +
mov edi [ebp+arg_0] +
sar eax 1 +
sub ecx eax +
lea edx [edi+1] +
cmp edx ecx +
ja loc_1014417  +
add edi edi +
push edi  +
push [ebp+arg_4]  +
push dword ptr [esi+4]  +
call memcpy  +
add [esi+4] edi +
mov esi [esi+4] +
add esp 0Ch +
xor eax eax +
pop edi  +
mov [esi] ax +
pop esi  +
pop ebp  +
retn 8  +
***
add eax eax +
xor eax esi +
jmp loc_100A627  +
***
call sub_100814C  +
pop ecx  +
retn   +
***
call sub_100814C  +
pop ecx  +
retn   +
***
push offset loc_100E4BB  +
call sub_100814C  +
pop ecx  +
retn   +
***
call sub_100814C  +
pop ecx  +
retn   +
***
call sub_100814C  +
pop ecx  +
retn   +
***
call sub_100814C  +
pop ecx  +
retn   +
***
push offset CriticalSection  +
call ds:InitializeCriticalSection  +
push offset loc_100E47D  +
call sub_100814C  +
pop ecx  +
retn   +
***
mov esi offset dword_1003D90 +
mov edi offset unk_10261C0 +
movs   +
movs   +
movs   +
movs   +
pop edi  +
pop esi  +
retn   +
***
call ds:InitializeCriticalSection  +
push offset loc_100E48E  +
call sub_100814C  +
pop ecx  +
retn   +
***
call sub_100814C  +
pop ecx  +
retn   +
***
call sub_100814C  +
pop ecx  +
retn   +
***
push offset aHttps  +
mov ecx offset dword_1026160 +
call sub_100B263  +
push offset loc_100E573  +
mov dword_1026160 offset off_1003AC8 +
call sub_100814C  +
pop ecx  +
retn   +
***
mov ecx offset dword_1026150 +
call sub_100B263  +
push offset loc_100E583  +
mov dword_1026150 offset off_1003AC8 +
call sub_100814C  +
pop ecx  +
retn   +
***
mov ecx offset dword_1026140 +
call sub_100B263  +
push offset loc_100E593  +
mov dword_1026140 offset off_1003AC8 +
call sub_100814C  +
pop ecx  +
retn   +
***
call sub_100814C  +
pop ecx  +
retn   +
***
call sub_100814C  +
pop ecx  +
retn   +
***
call sub_100A4DA  +
push offset loc_100E8FD  +
call sub_100814C  +
pop ecx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 24h +
push ebx  +
push esi  +
mov esi ds:malloc +
push edi  +
mov ebx 1000h +
push ebx  +
mov [ebp+var_4] ecx +
call esi  +
mov edi 400h +
push edi  +
mov dword_10260D8 eax +
call esi  +
push edi  +
mov dword_10260DC eax +
call esi  +
push edi  +
mov dword_10260E4 eax +
call esi  +
push edi  +
mov dword_10260E0 eax +
call esi  +
xor ecx ecx +
add esp 14h +
mov dword_10260D4 eax +
cmp dword_10260D8 ecx +
jz loc_1014FEC  +
cmp dword_10260DC ecx +
jz loc_1014FEC  +
cmp dword_10260E4 ecx +
jz loc_1014FEC  +
cmp dword_10260E0 ecx +
jz loc_1014FEC  +
cmp eax ecx +
jz loc_1014FEC  +
mov edx dword_102690C +
push 4  +
mov eax edx +
pop ecx  +
mov esi dword_10260D8 +
push 20h  +
mov [ecx+esi] eax +
pop esi  +
nop   +
nop   +
nop   +
nop   +
nop   +
nop   +
nop   +
nop   +
nop   +
nop   +
nop   +
nop   +
test eax eax +
jns loc_100A5E1  +
add eax eax +
xor eax edx +
dec esi  +
jnz loc_100A580  +
add ecx 4 +
cmp ecx ebx +
jb loc_100A568  +
mov edi [ebp+var_4] +
mov esi 100h +
push esi  +
push 20h  +
push dword_10260DC  +
mov ecx edi +
call sub_100A5F0  +
push esi  +
push 28h  +
push dword_10260E4  +
mov ecx edi +
call sub_100A5F0  +
push esi  +
push 30h  +
push dword_10260E0  +
mov ecx edi +
call sub_100A5F0  +
push esi  +
push 38h  +
push dword_10260D4  +
mov ecx edi +
call sub_100A5F0  +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
add eax eax +
jmp loc_100A588  +
***
add eax eax +
xor eax esi +
jmp loc_100A614  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
xor eax eax +
sub esp 20h +
inc eax  +
push esi  +
mov esi dword_102690C +
mov edx 80000000h +
test ecx ecx +
jbe loc_100A617  +
test eax edx +
jnz loc_100A5E5  +
add eax eax +
dec ecx  +
jnz loc_100A60E  +
xor ecx ecx +
mov [ebp+ecx*4+var_20] eax +
test eax edx +
jnz loc_100A30C  +
add eax eax +
inc ecx  +
cmp ecx 8 +
jb loc_100A619  +
xor esi esi +
cmp [ebp+arg_8] esi +
jbe loc_100A657  +
push edi  +
xor eax eax +
xor edi edi +
mov edx esi +
mov ecx edi +
shr edx cl +
test dl 1 +
jnz loc_100A65C  +
inc edi  +
cmp edi 8 +
jb loc_100A639  +
mov ecx [ebp+arg_0] +
mov [ecx+esi*4] eax +
inc esi  +
cmp esi [ebp+arg_8] +
jb loc_100A635  +
pop edi  +
pop esi  +
leave   +
retn 0Ch  +
xor eax [ebp+edi*4+var_20] +
jmp loc_100A644  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
xor eax eax +
cmp esi [ebp+arg_4] +
jnb loc_100A688  +
test eax eax +
jnz loc_100A688  +
mov ecx [esi] +
test ecx ecx +
jz loc_100A683  +
call ecx  +
add esi 4 +
jmp loc_100A672  +
pop esi  +
pop ebp  +
retn   +
***
mov ecx offset unk_1026201 +
jmp loc_100A69C  +
mov edi edi +
push esi  +
mov esi ecx +
call sub_100ABCC  +
mov dword_1026058 eax +
call sub_100A6BE  +
mov dword_10260E8 eax +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 120h +
mov eax dword_1026044 +
xor eax ebp +
mov [ebp+var_4] eax +
lea eax [ebp+VersionInformation] +
push eax  +
mov [ebp+VersionInformation.dwOSVersionInfoSize] 11Ch +
call ds:GetVersionExW  +
test eax eax +
jz loc_100A6F5  +
movzx eax [ebp+var_8] +
shr eax 0Fh +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_1001E40  +
leave   +
retn   +
***
call sub_100AA5C  +
push off_1026658  +
mov ecx offset off_102669C +
call sub_100AA5C  +
push off_1026658  +
mov ecx offset off_10266A8 +
call sub_100AA5C  +
push off_1026658  +
mov ecx offset off_10266B4 +
call sub_100AA5C  +
push off_1026658  +
mov ecx offset off_10266C0 +
call sub_100AA5C  +
push off_1026658  +
mov ecx offset off_10266CC +
call sub_100AA5C  +
push off_1026658  +
mov ecx offset off_10266D8 +
call sub_100AA5C  +
push off_1026658  +
mov ecx offset off_10266E4 +
call sub_100AA5C  +
push off_1026658  +
mov ecx offset off_10266F0 +
call sub_100AA5C  +
push off_1026658  +
mov ecx offset off_10266FC +
call sub_100AA5C  +
push off_1026658  +
mov ecx offset off_1026708 +
call sub_100AA5C  +
push off_1026658  +
mov ecx offset off_1026714 +
call sub_100AA5C  +
push off_1026658  +
mov ecx offset off_1026720 +
call sub_100AA5C  +
push off_1026658  +
mov ecx offset off_102672C +
call sub_100AA5C  +
push off_1026658  +
mov ecx offset off_1026738 +
call sub_100AA5C  +
push off_1026658  +
mov ecx offset off_1026744 +
call sub_100AA5C  +
push off_1026658  +
mov ecx offset off_1026750 +
call sub_100AA5C  +
push off_1026658  +
mov ecx offset off_102675C +
call sub_100AA5C  +
push off_1026658  +
mov ecx offset off_1026768 +
call sub_100AA5C  +
push off_1026658  +
mov ecx offset off_1026774 +
call sub_100AA5C  +
push off_1026658  +
mov ecx offset off_1026780 +
call sub_100AA5C  +
push off_1026658  +
mov ecx offset off_102678C +
call sub_100AA5C  +
push off_1026658  +
mov ecx offset off_1026798 +
call sub_100AA5C  +
push off_1026658  +
mov ecx offset off_10267A4 +
call sub_100AA5C  +
push off_1026658  +
mov ecx offset off_10267B0 +
call sub_100AA5C  +
push off_1026658  +
mov ecx offset off_10267BC +
call sub_100AA5C  +
push off_1026658  +
mov ecx offset off_10267C8 +
call sub_100AA5C  +
push off_1026658  +
mov ecx offset off_10267D4 +
call sub_100AA5C  +
push off_1026658  +
mov ecx offset off_10267E0 +
call sub_100AA5C  +
push off_1026658  +
mov ecx offset off_10267EC +
call sub_100AA5C  +
push off_1026658  +
mov ecx offset off_10267F8 +
call sub_100AA5C  +
push off_1026658  +
mov ecx offset off_1026804 +
call sub_100AA5C  +
push off_1026658  +
mov ecx offset off_1026810 +
call sub_100AA5C  +
push off_1026658  +
mov ecx offset off_102681C +
call sub_100AA5C  +
push off_1026658  +
mov ecx offset off_1026828 +
call sub_100AA5C  +
push off_1026658  +
mov ecx offset off_1026834 +
call sub_100AA5C  +
push off_1026658  +
mov ecx offset off_1026840 +
call sub_100AA5C  +
push off_1026658  +
mov ecx offset off_102684C +
call sub_100AA5C  +
push off_1026658  +
mov ecx offset off_1026858 +
call sub_100AA5C  +
push off_1026658  +
mov ecx offset off_1026864 +
call sub_100AA5C  +
push off_1026658  +
mov ecx offset off_1026870 +
call sub_100AA5C  +
push off_1026658  +
mov ecx offset off_102687C +
call sub_100AA5C  +
push off_1026658  +
mov ecx offset off_1026888 +
call sub_100AA5C  +
push off_1026658  +
mov ecx offset off_1026894 +
call sub_100AA5C  +
push off_1026658  +
mov ecx offset off_10268A0 +
call sub_100AA5C  +
push off_1026658  +
mov ecx offset off_10268AC +
call sub_100AA5C  +
push off_1026658  +
mov ecx offset off_10268B8 +
call sub_100AA5C  +
push off_1026658  +
mov ecx offset off_10268C4 +
call sub_100AA5C  +
push off_1026658  +
mov ecx offset off_10268D0 +
call sub_100AA5C  +
push off_1026658  +
mov ecx offset off_10268DC +
call sub_100AA5C  +
push off_1026658  +
mov ecx offset off_10268E8 +
call sub_100AA5C  +
push off_1026658  +
mov ecx offset off_10268F4 +
call sub_100AA5C  +
push off_1026658  +
mov ecx offset off_1026900 +
call sub_100AA5C  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
lea eax [ecx+4] +
push eax  +
push dword ptr [ecx+8]  +
mov ecx [ebp+arg_0] +
call sub_100AA79  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ecx] 0 +
jnz loc_10143A3  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
lea eax [ebp+hModule] +
push eax  +
call sub_100AAB4  +
cmp [ebp+hModule] 0 +
jnz loc_1014428  +
xor eax eax +
leave   +
retn 4  +
***
call sub_1001D89  +
xor edi edi +
mov [ebp-18h] edi +
mov [ebp-14h] edi +
mov [ebp-10h] edi +
push 208h  +
lea ecx [ebp-18h] +
mov [ebp-4] edi +
call sub_100B1C7  +
mov eax [ebp-10h] +
dec eax  +
push eax  +
push dword ptr [ebp-18h]  +
push edi  +
call ds:GetModuleFileNameW  +
push eax  +
lea ecx [ebp-18h] +
call sub_100AB99  +
push 5Ch  +
lea ecx [ebp-18h] +
call sub_100A290  +
lea ebx [eax+1] +
push ebx  +
lea ecx [ebp-18h] +
call sub_100AB99  +
push offset aMsfte_dll  +
push 9  +
lea ecx [ebp-18h] +
call sub_100A2BC  +
push dword ptr [ebp-18h]  +
mov esi ds:LoadLibraryW +
call esi  +
mov ecx [ebp+8] +
mov [ecx] eax +
cmp eax edi +
jnz loc_100AB4E  +
push ebx  +
lea ecx [ebp-18h] +
call sub_100AB99  +
push offset aMstracer_dll  +
push 0Ch  +
lea ecx [ebp-18h] +
call sub_100A2BC  +
push dword ptr [ebp-18h]  +
call esi  +
mov ecx [ebp+8] +
mov [ecx] eax +
push dword ptr [ebp-18h]  +
or dword ptr [ebp-4] 0FFFFFFFFh +
call sub_100A21D  +
pop ecx  +
call __EH_epilog3  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx] +
mov edx [ebp+arg_0] +
sub esp 20h +
push esi  +
mov esi [ecx+4] +
sub esi eax +
sar esi 1 +
dec esi  +
cmp edx esi +
ja loc_10143AC  +
lea eax [eax+edx*2] +
mov [ecx+4] eax +
xor ecx ecx +
mov [eax] cx +
pop esi  +
leave   +
retn 4  +
***
push 5  +
call sub_100ABFD  +
test eax eax +
jz loc_101504C  +
push 0  +
push 0  +
push 6  +
call sub_100ABFD  +
test eax eax +
jz loc_1015052  +
mov eax 7D6h +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 120h +
mov eax dword_1026044 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
mov esi 11Ch +
push esi  +
lea eax [ebp+var_120] +
push 0  +
push eax  +
call memset  +
mov eax [ebp+arg_0] +
add esp 0Ch +
push 3  +
mov [ebp+var_11C] eax +
mov eax [ebp+arg_4] +
push 2  +
mov [ebp+var_118] eax +
mov ax [ebp+arg_8] +
push 0  +
mov [ebp+var_120] esi +
mov esi ds:VerSetConditionMask +
push 0  +
mov [ebp+var_C] ax +
call esi  +
push 3  +
push 1  +
push edx  +
push eax  +
call esi  +
push 3  +
push 20h  +
push edx  +
push eax  +
call esi  +
push edx  +
push eax  +
push 23h  +
lea eax [ebp+var_120] +
push eax  +
call ds:VerifyVersionInfoW  +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop esi  +
call sub_1001E40  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword_10260A0 0 +
jnz loc_100ACB6  +
push offset aWersetflags  +
mov dword_10260A0 1 +
call sub_100ACD9  +
mov dword_102609C eax +
mov eax dword_102609C +
test eax eax +
jz loc_1010861  +
pop ebp  +
jmp eax  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword_1026098 0 +
jnz loc_100AD01  +
push offset loc_100AD14  +
mov dword_1026098 1 +
call ds:GetModuleHandleW  +
mov hModule eax +
push [ebp+lpProcName]  +
push hModule  +
call ds:__imp_GetProcAddress  +
pop ebp  +
retn 4  +
imul eax [eax] +
add [edx+0] dh +
outs   +
add [ebp+0] ah +
ins  dx +
add [ebx] dh +
add [edx] dh +
add [esi] ch +
add [eax+eax+6Ch] ah +
add [eax+eax+0] ch +
add [eax-6F6F6F70h] dl +
mov edi edi +
push esi  +
mov esi offset dword_1026180 +
mov ecx esi +
call sub_100AD64  +
push offset sub_100E7EA  +
mov dword_1026180 offset off_1003574 +
mov dword_1026088 esi +
call sub_100814C  +
pop ecx  +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
push edi  +
xor eax eax +
lea edx [esi+10h] +
push 6  +
pop ecx  +
mov edi edx +
stos   +
mov [esi+4] eax +
mov [esi+0Ch] eax +
mov [esi+8] eax +
mov dword_1026084 esi +
mov ecx edx +
mov [esi+28h] eax +
call sub_100ADA8  +
test eax eax +
jl loc_1010BFB  +
mov dword ptr [esi+4] 24h +
pop edi  +
mov eax esi +
pop esi  +
retn   +
***
call __SEH_prolog4  +
and [ebp+ms_exc.disabled] 0 +
push ecx  +
call ds:InitializeCriticalSection  +
and [ebp+var_1C] 0 +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov eax [ebp+var_1C] +
call __SEH_epilog4  +
retn   +
***
mov edi edi +
push edi  +
mov edx ecx +
push 6  +
pop ecx  +
xor eax eax +
mov edi edx +
stos   +
mov eax edx +
pop edi  +
retn   +
***
call sub_100AE4C  +
push offset loc_100E838  +
call sub_100814C  +
pop ecx  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
call near ptr dword_100ADF4+5  +
push esi  +
mov dword ptr [esi] 2Ch +
call sub_100AE73  +
test eax eax +
jl loc_101307D  +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_100AE94  +
cmp dword ptr [eax] 2Ch +
jnz loc_100AE94  +
and dword ptr [eax+1Ch] 0 +
lea ecx [eax+4] +
call sub_100ADA8  +
pop ebp  +
retn 4  +
mov eax 80070057h +
jmp loc_100AE90  +
***
mov ecx offset unk_10262C8 +
call sub_100AEBB  +
push offset loc_100E7A8  +
call sub_100814C  +
pop ecx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 98h +
mov eax dword_1026044 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
mov esi ecx +
call sub_100AF8D  +
mov eax offset __ImageBase +
push 94h  +
mov [esi+8] eax +
mov [esi+4] eax +
lea eax [ebp+VersionInformation] +
push 0  +
push eax  +
mov dword ptr [esi] 3Ch +
mov byte ptr [esi+0Ch] 0 +
call memset  +
add esp 0Ch +
lea eax [ebp+VersionInformation] +
push eax  +
mov [ebp+VersionInformation.dwOSVersionInfoSize] 94h +
call ds:GetVersionExA  +
cmp [ebp+VersionInformation.dwPlatformId] 2 +
jnz loc_100AF5D  +
cmp [ebp+VersionInformation.dwMajorVersion] 5 +
jb loc_100AF30  +
mov byte ptr [esi+0Ch] 1 +
lea ecx [esi+18h] +
mov dword ptr [esi+10h] 800h +
mov dword ptr [esi+14h] offset dword_100AF78 +
call sub_100ADA8  +
test eax eax +
jl loc_10130A4  +
mov ecx [ebp+var_4] +
mov eax esi +
xor ecx ebp +
pop esi  +
call sub_1001E40  +
leave   +
retn   +
cmp [ebp+VersionInformation.dwPlatformId] 1 +
jz loc_101308C  +
jmp loc_100AF30  +
***
cmp [ebp+VersionInformation.dwMinorVersion] 0 +
jbe loc_100AF30  +
jmp loc_100AF2C  +
***
mov edi edi +
push esi  +
mov esi ecx +
lea ecx [esi+18h] +
call sub_100AE1A  +
xor eax eax +
mov [esi+30h] eax +
mov [esi+34h] eax +
mov [esi+38h] eax +
mov eax esi +
pop esi  +
retn   +
***
mov eax 5A4Dh +
cmp word ptr ds:__ImageBase ax +
jnz loc_100B04F  +
mov eax ds:dword_100003C +
lea eax __ImageBase[eax] +
cmp dword ptr [eax] 4550h +
jnz loc_100B04F  +
movzx ecx word ptr [eax+18h] +
cmp ecx 10Bh +
jnz loc_101315C  +
cmp dword ptr [eax+74h] 0Eh +
jbe loc_100B04F  +
xor ecx ecx +
cmp [eax+0E8h] ecx +
setnz cl  +
mov eax ecx +
push 1  +
mov dword_10260AC eax +
call sub_100B070  +
push eax  +
call ds:__set_app_type  +
or dword_10260F0 0FFFFFFFFh +
or dword_10260F4 0FFFFFFFFh +
pop ecx  +
pop ecx  +
call ds:__p__fmode  +
mov ecx dword_102691C +
mov [eax] ecx +
call ds:__p__commode  +
mov ecx dword_1026918 +
mov [eax] ecx +
call sub_100A288  +
cmp dword_102668C 0 +
jz loc_1013182  +
call sub_100B058  +
xor eax eax +
retn   +
***
xor eax eax +
jmp loc_100AFF6  +
***
call ds:_controlfp  +
pop ecx  +
pop ecx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
call ds:GetModuleHandleA  +
test eax eax +
jz loc_100B0A4  +
push eax  +
call sub_100B0AE  +
test eax eax +
jz loc_100B0A4  +
movzx eax word ptr [eax+5Ch] +
cmp ax 2 +
jz loc_1013234  +
cmp ax 3 +
jnz loc_100B0A4  +
xor eax eax +
inc eax  +
pop ebp  +
retn   +
mov eax [ebp+arg_0] +
pop ebp  +
retn   +
***
call __SEH_prolog4  +
xor eax eax +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_100B0FD  +
cmp ecx 0FFFFFFFFh +
jz loc_100B0FD  +
and [ebp+ms_exc.disabled] eax +
mov edx 5A4Dh +
cmp [ecx] dx +
jnz loc_100B0F6  +
mov edx [ecx+3Ch] +
test edx edx +
jl loc_100B0F6  +
cmp edx 10000000h +
jnb loc_100B0F6  +
lea eax [edx+ecx] +
mov [ebp+var_1C] eax +
cmp dword ptr [eax] 4550h +
jnz loc_101322A  +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
call __SEH_epilog4  +
retn 4  +
***
call sub_100B138  +
jmp sub_1003604  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov eax dword_1026044 +
and [ebp+SystemTimeAsFileTime.dwLowDateTime] 0 +
and [ebp+SystemTimeAsFileTime.dwHighDateTime] 0 +
push ebx  +
push edi  +
mov edi 0BB40E64Eh +
mov ebx 0FFFF0000h +
cmp eax edi +
jnz loc_1013239  +
push esi  +
lea eax [ebp+SystemTimeAsFileTime] +
push eax  +
call ds:GetSystemTimeAsFileTime  +
mov esi [ebp+SystemTimeAsFileTime.dwHighDateTime] +
xor esi [ebp+SystemTimeAsFileTime.dwLowDateTime] +
call ds:GetCurrentProcessId  +
xor esi eax +
call ds:GetCurrentThreadId  +
xor esi eax +
call ds:GetTickCount  +
xor esi eax +
lea eax [ebp+PerformanceCount] +
push eax  +
call ds:QueryPerformanceCounter  +
mov eax dword ptr [ebp+PerformanceCount+4] +
xor eax dword ptr [ebp+PerformanceCount] +
xor esi eax +
cmp esi edi +
jz loc_100B1BB  +
test dword_1026044 ebx +
jz loc_100B1BB  +
mov dword_1026044 esi +
not esi  +
mov dword_1026048 esi +
pop esi  +
pop edi  +
pop ebx  +
leave   +
retn   +
mov esi 0BB40E64Fh +
jmp loc_100B1A8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push esi  +
mov esi ecx +
mov eax [esi] +
push edi  +
test eax eax +
jnz loc_10143DA  +
mov edi [ebp+arg_0] +
xor ecx ecx +
push 2  +
pop edx  +
mov eax edi +
mul  edx +
seto cl  +
neg ecx  +
or ecx eax +
push ecx  +
call sub_100B217  +
pop ecx  +
mov [esi] eax +
test eax eax +
jz loc_10143E9  +
mov [esi+8] edi +
mov [esi+4] eax +
xor ecx ecx +
pop edi  +
mov [eax] cx +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_0]  +
call off_102665C  +
pop ebp  +
retn   +
***
push offset aHttp  +
mov ecx offset dword_1026170 +
call sub_100B263  +
push offset loc_100E563  +
mov dword_1026170 offset off_1003AC8 +
call sub_100814C  +
pop ecx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+lpString] +
mov esi ecx +
push edi  +
mov dword ptr [esi] offset off_1001D4C +
call ds:lstrlenW  +
mov [esi+4] edi +
mov [esi+0Ch] eax +
mov [esi+8] eax +
pop edi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
retn   +
***
push ebp  +
mov ebp esp +
sub esp 98h +
mov eax dword_1026044 +
xor eax ebp +
mov [ebp-4] eax +
lea eax [ebp-98h] +
push eax  +
mov dword ptr [ebp-98h] 94h +
call ds:GetVersionExA  +
test eax eax +
jz loc_100B2EA  +
cmp dword ptr [ebp-88h] 2 +
jnz loc_100B2EA  +
xor eax eax +
inc eax  +
mov ecx [ebp-4] +
xor ecx ebp +
call sub_1001E40  +
leave   +
retn   +
***
xor eax eax +
jmp loc_100B2DE  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
mov esi ecx +
cmp word ptr [esi+4] 0 +
push edi  +
jnz loc_1013B6B  +
push dword ptr [esi+34h]  +
call sub_1001709  +
push 0  +
lea edi [esi+14h] +
push edi  +
push eax  +
mov eax [esi+60h] +
call sub_10013E1  +
push eax  +
call sub_10049CB  +
mov ebx eax +
test ebx ebx +
jl loc_1013C05  +
push dword ptr [esi+54h]  +
mov ecx esi +
call sub_1001709  +
push 0  +
push edi  +
push eax  +
mov eax [esi+60h] +
call sub_10013E1  +
push eax  +
call sub_10049CB  +
mov edi eax +
test edi edi +
jl loc_1013C1D  +
push dword ptr [esi+3Ch]  +
xor eax eax +
inc eax  +
mov [esi+6] ax +
call ds:SetEvent  +
test eax eax +
jz loc_1013C35  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
xor eax eax +
jmp loc_10016C7  +
***
mov [esi+4] ebx +
mov [esi+eax*4+28h] ebx +
inc dword ptr [esi+0Ch]  +
mov eax [esi+0Ch] +
mov [esi] edi +
mov [esi+eax*4+28h] edi +
jmp loc_1004717  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx+2Ch] +
mov ecx [ebp+arg_4] +
mov edx [ebp+arg_0] +
mov [eax+edx*4] ecx +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
lea eax [ecx+10h] +
push eax  +
push 100h  +
push 20h  +
push dword ptr [ebp+8]  +
call sub_1004AD5  +
pop ebp  +
retn 4  +
***
call sub_10039ED  +
mov eax [ebp+8] +
push eax  +
xor ebx ebx +
push ebx  +
mov edi 0F001Fh +
push edi  +
mov esi ecx +
mov [ebp-68h] eax +
call ds:OpenFileMappingW  +
lea ecx [esi+24h] +
push eax  +
call sub_1001EE0  +
cmp [esi+28h] ebx +
jz loc_1013FC9  +
push dword ptr [ebp-68h]  +
lea ecx [esi+64h] +
call sub_10081ED  +
mov eax [esi+28h] +
push 10000h  +
push ebx  +
push ebx  +
push edi  +
push eax  +
call ds:MapViewOfFile  +
mov [esi+2Ch] eax +
cmp eax ebx +
jz loc_1013FC9  +
push dword ptr [ebp-68h]  +
lea ecx [ebp-64h] +
call sub_1004CF3  +
mov eax [ebp-64h] +
push 0FFFFFFFFh  +
push dword ptr [ebp-58h]  +
lea ecx [ebp-64h] +
push offset aDre  +
mov [ebp-4] ebx +
call dword ptr [eax+10h]  +
push dword ptr [ebp-60h]  +
mov edi 1F0003h +
push ebx  +
push edi  +
call ds:OpenEventW  +
push eax  +
lea ecx [esi+30h] +
call sub_1001EE0  +
cmp [esi+34h] ebx +
jz loc_100B57B  +
mov eax [ebp-64h] +
push 0FFFFFFFFh  +
push ebx  +
push dword ptr [ebp-68h]  +
lea ecx [ebp-64h] +
call dword ptr [eax+10h]  +
mov eax [ebp-64h] +
push 0FFFFFFFFh  +
push dword ptr [ebp-58h]  +
lea ecx [ebp-64h] +
push offset aDae  +
call dword ptr [eax+10h]  +
push dword ptr [ebp-60h]  +
push ebx  +
push edi  +
call ds:OpenEventW  +
push eax  +
lea ecx [esi+38h] +
call sub_1001EE0  +
cmp [esi+3Ch] ebx +
jz loc_100B57B  +
mov eax [ebp-64h] +
push 0FFFFFFFFh  +
push ebx  +
push dword ptr [ebp-68h]  +
lea ecx [ebp-64h] +
call dword ptr [eax+10h]  +
mov eax [ebp-64h] +
push 0FFFFFFFFh  +
push dword ptr [ebp-58h]  +
lea ecx [ebp-64h] +
push offset aDse  +
call dword ptr [eax+10h]  +
push dword ptr [ebp-60h]  +
push ebx  +
push edi  +
call ds:OpenEventW  +
push eax  +
lea ecx [esi+40h] +
call sub_1001EE0  +
cmp [esi+44h] ebx +
jz loc_100B57B  +
mov eax [ebp-64h] +
push 0FFFFFFFFh  +
push ebx  +
push dword ptr [ebp-68h]  +
lea ecx [ebp-64h] +
call dword ptr [eax+10h]  +
mov eax [ebp-64h] +
push 0FFFFFFFFh  +
push dword ptr [ebp-58h]  +
lea ecx [ebp-64h] +
push offset aTrm  +
call dword ptr [eax+10h]  +
push dword ptr [ebp-60h]  +
push ebx  +
push edi  +
call ds:OpenSemaphoreW  +
push eax  +
lea ecx [esi+48h] +
call sub_1001EE0  +
cmp [esi+4Ch] ebx +
jz loc_100B57B  +
mov eax [ebp-64h] +
push 0FFFFFFFFh  +
push ebx  +
push dword ptr [ebp-68h]  +
lea ecx [ebp-64h] +
call dword ptr [eax+10h]  +
mov eax [ebp-64h] +
push 0FFFFFFFFh  +
push dword ptr [ebp-58h]  +
lea ecx [ebp-64h] +
push offset aRcm  +
call dword ptr [eax+10h]  +
push dword ptr [ebp-60h]  +
push ebx  +
push edi  +
call ds:OpenSemaphoreW  +
push eax  +
lea ecx [esi+50h] +
call sub_1001EE0  +
cmp [esi+54h] ebx +
jz loc_100B57B  +
lea ecx [ebp-64h] +
call sub_1002011  +
mov eax ebx +
call sub_1003A2A  +
retn 4  +
call ds:__imp_GetLastError  +
jmp loc_1013FE6  +
***
push eax  +
push 20h  +
push dword ptr [ebp+8]  +
call sub_100B5CD  +
jmp loc_100417B  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_4] +
mov esi ecx +
cmp [ebp+arg_0] edi +
jb sub_1013669  +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
xor eax eax +
push esi  +
mov esi ecx +
mov [esi+4] ax +
mov [esi+6] ax +
xor ecx ecx +
mov [esi+8] ecx +
mov [esi+0Ch] ecx +
mov [esi+10h] ecx +
mov dword ptr [esi] offset off_1002030 +
mov [esi+28h] ecx +
mov eax offset off_1001E6C +
mov [esi+24h] eax +
mov [esi+2Ch] ecx +
mov [esi+30h] eax +
mov [esi+34h] ecx +
mov [esi+38h] eax +
mov [esi+3Ch] ecx +
mov [esi+40h] eax +
mov [esi+44h] ecx +
mov [esi+48h] eax +
mov [esi+4Ch] ecx +
mov [esi+50h] eax +
mov [esi+54h] ecx +
mov eax 2000h +
lea ecx [esi+64h] +
mov [esi+58h] eax +
mov [esi+5Ch] eax +
mov dword ptr [esi+60h] 1D4C0h +
call sub_100B65A  +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
lea eax [esi+10h] +
push eax  +
push 21h  +
call sub_1001DCE  +
mov dword ptr [esi] offset off_1001E9C +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
cmp dword ptr [esi+8] 0 +
jnz loc_100B6AD  +
and dword ptr [esi+14h] 0 +
lea eax [esi+1Ch] +
push eax  +
push 0  +
push esi  +
push offset StartAddress  +
push [ebp+dwStackSize]  +
push 0  +
call ds:CreateThread  +
mov [esi+8] eax +
test eax eax +
jz loc_10120E0  +
xor eax eax +
pop esi  +
pop ebp  +
retn 4  +
***
mov [ebp+var_7C38] ebx +
lea eax [ebp+var_7C38] +
push eax  +
lea ecx [ebp+var_DB4] +
mov byte ptr [ebp+var_4] 10h +
call sub_1003931  +
jmp loc_100E0FF  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
push dword ptr [eax+4]  +
mov esi ecx +
lea eax [esi+10h] +
push eax  +
push 42h  +
call sub_1004D1B  +
mov dword ptr [esi] offset off_1001E50 +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
and dword ptr [esi+4] 0 +
lea ecx [esi+0Ch] +
mov dword ptr [esi] offset off_10016F4 +
call sub_100B725  +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
lea ecx [esi+4] +
call sub_1001E18  +
mov dword ptr [esi] offset off_1003600 +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx+0Ch] +
sub eax [ebp+arg_4] +
push eax  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1004123  +
mov eax [ebp+arg_0] +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp sub_1003EB9  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push esi  +
mov esi ecx +
mov eax [esi+0Ch] +
mov [ebp+var_4] eax +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_8] +
push eax  +
lea eax [ebp+var_4] +
push eax  +
mov [ebp+var_8] 2 +
call sub_1003CC5  +
mov eax [ebp+var_4] +
cmp eax [esi+8] +
ja loc_1012E2D  +
mov eax [esi+0Ch] +
mov ecx [esi+4] +
mov dx [ebp+arg_0] +
mov [ecx+eax*2] dx +
inc dword ptr [esi+0Ch]  +
mov eax [esi+0Ch] +
mov ecx [esi+4] +
xor edx edx +
mov [ecx+eax*2] dx +
pop esi  +
leave   +
retn 4  +
***
mov eax offset unk_1026218 +
jmp loc_100495A  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
shr ecx 1 +
push 0  +
pop eax  +
jz loc_100B848  +
cmp ecx 7FFFFFFFh +
ja loc_100B848  +
test eax eax +
jl loc_100B844  +
mov eax [ebp+arg_0] +
push ebx  +
xor ebx ebx +
push esi  +
mov esi ecx +
test ecx ecx +
jz loc_100B84F  +
mov edx [ebp+arg_8] +
push edi  +
mov edi 7FFFFFFEh +
sub edi ecx +
sub edx eax +
lea ecx [edi+esi] +
test ecx ecx +
jz loc_100B836  +
movzx ecx word ptr [edx+eax] +
test cx cx +
jz loc_100B836  +
mov [eax] cx +
inc eax  +
inc eax  +
dec esi  +
jnz loc_100B81E  +
pop edi  +
test esi esi +
jz loc_100B84F  +
xor ecx ecx +
mov [eax] cx +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 0Ch  +
mov eax 80070057h +
jmp loc_100B800  +
dec eax  +
dec eax  +
mov ebx 8007007Ah +
jmp loc_100B83B  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
movzx ecx byte ptr [eax+0Fh] +
push ebx  +
push esi  +
push edi  +
push ecx  +
movzx ecx byte ptr [eax+0Eh] +
push ecx  +
movzx ecx byte ptr [eax+0Dh] +
push ecx  +
movzx ecx byte ptr [eax+0Ch] +
push ecx  +
movzx ecx byte ptr [eax+0Bh] +
push ecx  +
movzx ecx byte ptr [eax+0Ah] +
push ecx  +
movzx ecx byte ptr [eax+9] +
mov esi [ebp+arg_8] +
push ecx  +
movzx ecx byte ptr [eax+8] +
mov edi [ebp+arg_4] +
push ecx  +
movzx ecx word ptr [eax+6] +
push ecx  +
movzx ecx word ptr [eax+4] +
push ecx  +
push dword ptr [eax]  +
lea ebx [esi+25h] +
push offset a08lx04x04x02x0  +
push 25h  +
push ebx  +
mov ecx edi +
call sub_1004BD7  +
mov ecx eax +
lea eax [esi+esi] +
add ecx eax +
push ecx  +
call sub_1008DB5  +
add esp 38h +
push ebx  +
mov ecx edi +
call sub_1004BD7  +
mov ecx eax +
lea eax [esi+esi] +
add ecx eax +
push ecx  +
call ds:lstrlenW  +
add eax esi +
push eax  +
mov ecx edi +
call sub_1003E02  +
mov eax [edi+4] +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
call sub_1004DD8  +
mov edi ecx +
mov esi ds:SetLastError +
xor ebx ebx +
push ebx  +
call esi  +
cmp [edi+9Ch] ebx +
jz loc_1013817  +
mov esi [ebp+0Ch] +
mov eax [esi+8] +
mov [ebp-14h] eax +
mov eax [esi+4] +
lea ecx [ebp-20h] +
push ecx  +
push ebx  +
push ebx  +
push ebx  +
lea ecx [ebp-14h] +
push ecx  +
push eax  +
push dword ptr [ebp+8]  +
push dword ptr [edi+9Ch]  +
call ds:RegEnumKeyExW  +
cmp eax 0EAh +
jz loc_1013820  +
cmp eax ebx +
jnz loc_100B9C9  +
push dword ptr [ebp-14h]  +
mov ecx esi +
call sub_1003E02  +
xor eax eax +
inc eax  +
call __EH_epilog3  +
retn 8  +
push eax  +
call ds:SetLastError  +
xor eax eax +
jmp loc_100B9C1  +
***
call sub_10039ED  +
mov ebx [ebp+8] +
lea eax [ebp-68h] +
push eax  +
call sub_100C1E1  +
mov edi eax +
test edi edi +
jl loc_100BABD  +
push dword ptr [ebp-68h]  +
lea ecx [ebp-68h] +
call sub_100C07F  +
mov esi [ebp-68h] +
mov eax [esi] +
and dword ptr [ebp-4] 0 +
push offset dword_10260A4  +
push offset dword_100BAF0  +
push esi  +
call dword ptr [eax]  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov edi eax +
mov eax [esi] +
push esi  +
call dword ptr [eax+8]  +
test edi edi +
jl loc_100BABD  +
cmp dword_10260A8 0 +
jnz loc_100BA6F  +
push 40h  +
call off_102665C  +
mov ecx eax +
mov [ebp-68h] ecx +
mov dword ptr [ebp-4] 1 +
test ecx ecx +
jz loc_100BAC7  +
call sub_100C0B2  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov dword_10260A8 eax +
neg eax  +
sbb eax eax +
and eax 7FF8FFF2h +
add eax 8007000Eh +
mov edi eax +
test edi edi +
jl loc_100BABD  +
push ebx  +
lea ecx [ebp-64h] +
call sub_1004CF3  +
lea eax [ebp-64h] +
push eax  +
mov dword ptr [ebp-4] 2 +
call sub_10081B9  +
mov eax [ebp-64h] +
push 0FFFFFFFFh  +
push dword ptr [ebp-58h]  +
lea ecx [ebp-64h] +
push offset aProtocolhandle  +
call dword ptr [eax+10h]  +
push dword ptr [ebp-60h]  +
mov ecx dword_10260A8 +
push dword_1026060  +
call sub_100BB05  +
lea ecx [ebp-64h] +
mov edi eax +
call sub_1002011  +
mov eax edi +
call sub_1003A2A  +
retn 4  +
xor eax eax +
jmp loc_100BA56  +
***
call sub_10039ED  +
mov eax [ebp+0Ch] +
xor ebx ebx +
mov [ebp-350h] ecx +
mov ecx [ebp+8] +
mov [ebp-348h] ebx +
cmp eax ebx +
jz loc_1012FCC  +
cmp [ebp-348h] ebx +
mov [ebp-344h] ebx +
jl loc_100C5C1  +
push ebx  +
mov esi 20019h +
push esi  +
push eax  +
push ecx  +
lea ecx [ebp-1ACh] +
call sub_1008CB9  +
lea ecx [ebp-0B8h] +
mov [ebp-4] ebx +
mov [ebp-34Ch] ebx +
call sub_1001DF9  +
mov byte ptr [ebp-4] 1 +
lea eax [ebp-0B8h] +
push eax  +
push dword ptr [ebp-34Ch]  +
lea ecx [ebp-1ACh] +
call sub_100B959  +
inc dword ptr [ebp-34Ch]  +
test eax eax +
jz loc_100BBFB  +
push esi  +
push dword ptr [ebp-0B4h]  +
lea eax [ebp-1ACh] +
push eax  +
lea ecx [ebp-24Ch] +
call sub_1008D30  +
lea ecx [ebp-10Ch] +
xor edi edi +
call sub_1001DF9  +
lea eax [ebp-10Ch] +
push eax  +
mov byte ptr [ebp-4] 3 +
push ebx  +
lea ecx [ebp-24Ch] +
call sub_100B959  +
test eax eax +
jnz loc_100BC79  +
lea ecx [ebp-10Ch] +
call sub_1002011  +
lea ecx [ebp-24Ch] +
mov byte ptr [ebp-4] 1 +
call sub_100341D  +
cmp [ebp-348h] ebx +
jge loc_100BB6E  +
xor esi esi +
lea eax [ebp-0B8h] +
push eax  +
push esi  +
lea ecx [ebp-1ACh] +
call sub_100C654  +
test eax eax +
jz loc_100C5A7  +
lea ecx [ebp-64h] +
call sub_1001DF9  +
lea eax [ebp-64h] +
push eax  +
push ebx  +
lea ecx [ebp-0B8h] +
mov byte ptr [ebp-4] 7 +
call sub_1004BD7  +
push eax  +
lea ecx [ebp-1ACh] +
call sub_1008357  +
test eax eax +
jz loc_100BC6A  +
mov ecx [ebp-350h] +
lea eax [ebp-1ACh] +
push eax  +
push dword ptr [ebp-60h]  +
lea eax [ebp-0B8h] +
push eax  +
call sub_100BD33  +
test eax eax +
jnz loc_100BC6A  +
inc dword ptr [ebp-344h]  +
lea ecx [ebp-64h] +
mov byte ptr [ebp-4] 1 +
call sub_1002011  +
inc esi  +
jmp loc_100BBFD  +
push esi  +
push dword ptr [ebp-108h]  +
lea eax [ebp-24Ch] +
push eax  +
lea ecx [ebp-340h] +
inc edi  +
call sub_1008D30  +
lea ecx [ebp-64h] +
call sub_1001DF9  +
lea ecx [ebp-2A0h] +
call sub_1001DF9  +
lea eax [ebp-64h] +
push eax  +
push offset aProgid  +
lea ecx [ebp-340h] +
mov byte ptr [ebp-4] 6 +
call sub_1008357  +
test eax eax +
jz loc_100BCEE  +
mov ecx [ebp-350h] +
lea eax [ebp-1ACh] +
push eax  +
push dword ptr [ebp-60h]  +
lea eax [ebp-0B8h] +
push eax  +
call sub_100BD33  +
test eax eax +
jnz loc_100BCE8  +
inc dword ptr [ebp-344h]  +
mov [ebp-348h] ebx +
lea ecx [ebp-2A0h] +
call sub_1002011  +
lea ecx [ebp-64h] +
call sub_1002011  +
lea ecx [ebp-340h] +
mov byte ptr [ebp-4] 3 +
call sub_100341D  +
lea eax [ebp-10Ch] +
push eax  +
push edi  +
jmp loc_100BBC2  +
***
call sub_10039ED  +
mov eax [ebp+8] +
mov esi offset dword_100B73C +
lea edi [ebp-20h] +
movs   +
movs   +
mov [ebp-0C4h] ecx +
movs   +
lea ecx [ebp-20h] +
mov [ebp-0C0h] eax +
mov eax [ebp+0Ch] +
push ecx  +
push eax  +
movs   +
call ds:CLSIDFromProgID  +
xor ebx ebx +
mov [ebp-0B8h] eax +
cmp eax ebx +
jnz loc_100BE8E  +
push offset aClsid  +
lea ecx [ebp-0B4h] +
call sub_1008C91  +
push dword ptr [ebp-0A8h]  +
lea eax [ebp-0B4h] +
push eax  +
lea eax [ebp-20h] +
push eax  +
mov [ebp-4] ebx +
call sub_100B85D  +
push 7Dh  +
lea ecx [ebp-0B4h] +
call sub_100B784  +
mov esi ds:RegOpenKeyExW +
lea eax [ebp-0BCh] +
push eax  +
push 20019h  +
push ebx  +
push dword ptr [ebp-0B0h]  +
mov edi 80000000h +
push edi  +
call esi  +
cmp eax ebx +
jnz loc_100BE9C  +
push dword ptr [ebp-0BCh]  +
call ds:RegCloseKey  +
xor edi edi +
inc edi  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-0B4h] +
call sub_1001F05  +
cmp [ebp-0B8h] ebx +
jnz loc_100BE8E  +
mov ecx [ebp-0C0h] +
push ebx  +
lea eax [ebp-0D0h] +
push eax  +
call sub_100B751  +
mov ecx [ebp-0C4h] +
push eax  +
call sub_10048E0  +
cmp [eax] ebx +
jnz loc_1012EF0  +
push 84h  +
call off_102665C  +
mov [ebp-0BCh] eax +
mov [ebp-4] edi +
cmp eax ebx +
jz loc_100BEAA  +
lea ecx [ebp-20h] +
push ecx  +
push dword ptr [ebp-0C0h]  +
mov ecx eax +
call sub_100BF49  +
mov esi eax +
mov [ebp-0C0h] esi +
mov dword ptr [ebp-4] 2 +
cmp eax ebx +
jz loc_1012F33  +
mov ecx [ebp-0C4h] +
push eax  +
push eax  +
call sub_100BEC5  +
test eax eax +
jz loc_1012F42  +
xor esi esi +
or dword ptr [ebp-4] 0FFFFFFFFh +
cmp esi ebx +
jnz loc_1012F51  +
mov eax [ebp-0B8h] +
call sub_1003A2A  +
retn 0Ch  +
cmp eax 2 +
jz loc_1012EFB  +
jmp loc_100BDE6  +
xor eax eax +
jmp loc_100BE54  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov eax [esi+18h] +
push edi  +
test eax eax +
jnz loc_1012ECB  +
push [ebp+arg_0]  +
mov ecx esi +
call sub_1003E65  +
mov ecx [esi+24h] +
push [ebp+arg_0]  +
mov edi eax +
shl edi 4 +
add ecx edi +
call sub_100BF1E  +
test eax eax +
jnz loc_1012EDE  +
push [ebp+arg_4]  +
mov ecx [esi+24h] +
push [ebp+arg_0]  +
add ecx edi +
call sub_1004964  +
inc dword ptr [esi+10h]  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
and [ebp+var_4] 0 +
mov [ebp+var_C] ecx +
mov [ebp+var_8] ecx +
lea ecx [ebp+var_C] +
call sub_1001FDD  +
test eax eax +
jnz loc_1012E7B  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
push [ebp+arg_0]  +
mov ebx ecx +
call sub_100BF90  +
mov esi [ebp+arg_4] +
lea edi [ebx+54h] +
movs   +
movs   +
movs   +
movs   +
xor eax eax +
mov [ebx+64h] eax +
mov [ebx+68h] eax +
mov [ebx+6Ch] eax +
mov [ebx+70h] eax +
mov [ebx+74h] eax +
mov [ebx+78h] eax +
pop edi  +
mov [ebx+7Ch] eax +
mov [ebx+80h] eax +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
push dword ptr [eax+4]  +
mov esi ecx +
lea eax [esi+10h] +
push eax  +
push 21h  +
call sub_1004D1B  +
mov dword ptr [esi] offset off_1001D68 +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_10039ED  +
mov eax [ebp+8] +
xor ebx ebx +
push ebx  +
mov esi 20019h +
push esi  +
push eax  +
push dword_1026060  +
lea ecx [ebp-150h] +
call sub_1008CB9  +
push esi  +
push offset aGatheringManag  +
lea eax [ebp-150h] +
push eax  +
lea ecx [ebp-0B0h] +
mov [ebp-4] ebx +
call sub_1008D30  +
push edi  +
push offset aFilterdaemonms  +
lea ecx [ebp-0B0h] +
mov byte ptr [ebp-4] 1 +
call sub_1008B8C  +
test eax eax +
jnz loc_100C028  +
cmp dword_102624C ebx +
jnz loc_101086A  +
lea ecx [ebp-0B0h] +
mov [ebp-4] bl +
call sub_100341D  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-150h] +
call sub_100341D  +
call sub_1003A2A  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
mov esi ecx +
mov [esi] eax +
test eax eax +
jz loc_100C096  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
add ecx 8 +
push ecx  +
call ds:InterlockedIncrement  +
retn   +
***
mov edi edi +
push esi  +
push 3  +
push 0  +
push 11h  +
push offset loc_100487E  +
push offset loc_100B774  +
mov esi ecx +
call sub_1008EAE  +
lea eax [esi+28h] +
push eax  +
call ds:InitializeCriticalSection  +
mov eax esi +
pop esi  +
retn   +
***
push eax  +
call esi  +
xor eax eax +
jmp loc_1008BEC  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+10h]  +
mov ecx [ebp+8] +
push dword ptr [ebp+0Ch]  +
call sub_100C105  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push offset off_100C120  +
push ecx  +
call sub_100C13D  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
push ebx  +
push esi  +
push edi  +
jz loc_100C1B9  +
mov esi [ebp+arg_4] +
test esi esi +
jz loc_100C1B9  +
mov ebx [ebp+arg_C] +
test ebx ebx +
jz loc_1010B84  +
push [ebp+arg_8]  +
and dword ptr [ebx] 0 +
call sub_100C1C5  +
test eax eax +
jnz loc_100C19D  +
mov edi [esi+8] +
test edi edi +
jz loc_1010BB9  +
mov eax [esi] +
xor ecx ecx +
test eax eax +
setz cl  +
mov [ebp+arg_4] ecx +
test ecx ecx +
jnz loc_100C194  +
push [ebp+arg_8]  +
push eax  +
call sub_1003DE6  +
test eax eax +
jz loc_100C1B4  +
cmp edi 1 +
jnz loc_1010B8E  +
mov esi [esi+4] +
add esi [ebp+arg_0] +
mov eax [esi] +
push esi  +
call dword ptr [eax+4]  +
mov [ebx] esi +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 10h  +
add esi 0Ch +
jmp loc_100C16C  +
mov eax 80070057h +
jmp loc_100C1AD  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
cmp dword ptr [eax] 0 +
jz loc_1010B58  +
xor eax eax +
pop ebp  +
retn 4  +
***
call sub_1004DD8  +
mov esi [ebp+8] +
xor edi edi +
cmp esi edi +
jz loc_1012DA5  +
push 10h  +
mov [esi] edi +
mov dword ptr [ebp-14h] 8007000Eh +
mov [ebp-4] edi +
call off_102665C  +
cmp eax edi +
jz loc_100C22E  +
push edi  +
mov ecx eax +
call sub_100C237  +
cmp eax edi +
jz loc_100C221  +
mov [ebp-14h] edi +
mov [esi] eax +
mov eax [ebp-14h] +
call __EH_epilog3  +
retn 4  +
xor eax eax +
jmp loc_100C21A  +
***
mov edi edi +
push esi  +
mov esi ecx +
and dword ptr [esi+4] 0 +
and dword ptr [esi+0Ch] 0 +
mov dword ptr [esi] offset off_1001FC4 +
mov ecx dword_1026084 +
mov eax [ecx] +
call dword ptr [eax+4]  +
mov eax esi +
pop esi  +
retn 4  +
***
call sub_10039ED  +
mov eax [ebp+8] +
test edi edi +
jz loc_101094F  +
push 0  +
mov esi 20019h +
push esi  +
push eax  +
push dword_1026060  +
lea ecx [ebp-150h] +
mov dword ptr [ebp-154h] 80004005h +
call sub_1008CB9  +
and dword ptr [ebp-4] 0 +
push esi  +
push offset aGatheringManag  +
lea eax [ebp-150h] +
push eax  +
lea ecx [ebp-0B0h] +
call sub_1008D30  +
push edi  +
push offset aMaxgrowfactor  +
lea ecx [ebp-0B0h] +
mov byte ptr [ebp-4] 1 +
call sub_1008B8C  +
test eax eax +
jz loc_100C2DA  +
and dword ptr [ebp-154h] 0 +
lea ecx [ebp-0B0h] +
mov byte ptr [ebp-4] 0 +
call sub_100341D  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-150h] +
call sub_100341D  +
mov eax [ebp-154h] +
call sub_1003A2A  +
retn 4  +
***
call sub_10039ED  +
mov eax [ebp+8] +
test edi edi +
jz loc_1010959  +
push 0  +
mov esi 20019h +
push esi  +
push eax  +
push dword_1026060  +
lea ecx [ebp-150h] +
mov dword ptr [ebp-154h] 80004005h +
call sub_1008CB9  +
and dword ptr [ebp-4] 0 +
push esi  +
push offset aGatheringManag  +
lea eax [ebp-150h] +
push eax  +
lea ecx [ebp-0B0h] +
call sub_1008D30  +
lea eax [ebp-158h] +
push eax  +
push offset aPerformancelev  +
lea ecx [ebp-0B0h] +
mov byte ptr [ebp-4] 1 +
call sub_1008B8C  +
test eax eax +
jz loc_100C3B1  +
mov eax [ebp-158h] +
and dword ptr [ebp-154h] 0 +
mov [edi] eax +
lea ecx [ebp-0B0h] +
mov byte ptr [ebp-4] 0 +
call sub_100341D  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-150h] +
call sub_100341D  +
mov eax [ebp-154h] +
call sub_1003A2A  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
cmp dword ptr [esi+8] 0 +
jnz loc_100C43B  +
and dword ptr [esi+14h] 0 +
lea eax [esi+1Ch] +
push eax  +
push 0  +
push esi  +
push offset sub_1003485  +
push [ebp+dwStackSize]  +
push 0  +
call ds:CreateThread  +
mov [esi+8] eax +
test eax eax +
jz loc_1010E11  +
xor eax eax +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov [ecx+418h] eax +
pop ebp  +
retn 4  +
***
call sub_10039ED  +
mov ebx ecx +
call sub_1003789  +
lea ecx [ebp-64h] +
mov edi eax +
call sub_1001DF9  +
xor esi esi +
cmp edi esi +
mov [ebp-4] esi +
jl loc_100C597  +
lea eax [ebp-6Ch] +
push eax  +
lea eax [ebp-68h] +
push eax  +
mov ecx ebx +
call sub_1004A49  +
mov edi eax +
cmp edi esi +
jl loc_100C597  +
push dword ptr [ebp-6Ch]  +
lea ecx [ebp-64h] +
push esi  +
push dword ptr [ebp-68h]  +
call sub_1003AE9  +
cmp [ebp-58h] esi +
jz loc_1012B20  +
push dword ptr [ebp-60h]  +
mov esi ds:_wtoi +
call esi  +
pop ecx  +
push eax  +
mov ecx offset off_10260F8 +
call sub_1001EE0  +
lea eax [ebp-6Ch] +
push eax  +
lea eax [ebp-68h] +
push eax  +
mov ecx ebx +
call sub_1004A49  +
mov edi eax +
test edi edi +
jl loc_100C597  +
push dword ptr [ebp-6Ch]  +
lea ecx [ebp-64h] +
push 0  +
push dword ptr [ebp-68h]  +
call sub_1003AE9  +
cmp dword ptr [ebp-58h] 0 +
jz loc_1012B20  +
push dword ptr [ebp-60h]  +
call esi  +
pop ecx  +
push eax  +
mov ecx offset off_1026108 +
call sub_1001EE0  +
lea eax [ebp-6Ch] +
push eax  +
lea eax [ebp-68h] +
push eax  +
mov ecx ebx +
call sub_1004A49  +
mov edi eax +
test edi edi +
jl loc_100C597  +
push dword ptr [ebp-6Ch]  +
lea ecx [ebp-64h] +
push 0  +
push dword ptr [ebp-68h]  +
call sub_1003AE9  +
cmp dword ptr [ebp-58h] 0 +
jz loc_1012B20  +
push dword ptr [ebp-60h]  +
call esi  +
pop ecx  +
push eax  +
mov ecx offset off_1026110 +
call sub_1001EE0  +
lea eax [ebp-6Ch] +
push eax  +
lea eax [ebp-68h] +
push eax  +
mov ecx ebx +
call sub_1004A49  +
mov edi eax +
test edi edi +
jl loc_100C597  +
push dword ptr [ebp-6Ch]  +
lea ecx [ebp-64h] +
push 0  +
push dword ptr [ebp-68h]  +
call sub_1003AE9  +
cmp dword ptr [ebp-58h] 0 +
jz loc_1012B20  +
push dword ptr [ebp-60h]  +
call esi  +
pop ecx  +
push eax  +
mov ecx offset off_1026118 +
call sub_1001EE0  +
lea ecx [ebp-64h] +
call sub_1002011  +
mov eax edi +
call sub_1003A2A  +
retn   +
***
lea ecx [ebp-0B8h] +
call sub_1002011  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-1ACh] +
call sub_100341D  +
mov eax [ebp-344h] +
neg eax  +
sbb eax eax +
and eax 7FFBF2C9h +
add eax 80040D37h +
call sub_1003A2A  +
retn 8  +
***
mov ecx [ebp+var_18] +
jmp loc_1003892  +
mov [ebp+var_4] eax +
cmp edx eax +
jnb loc_100C5EF  +
mov [ebp+var_4] edx +
cmp ebx esi +
jbe loc_1014064  +
mov eax [edi+2Ch] +
push [ebp+var_4]  +
mov ecx [ebp+var_8] +
lea eax [esi+eax+98h] +
push eax  +
mov eax [ebp+arg_0] +
add ecx eax +
push ecx  +
call memcpy  +
add esp 0Ch +
add esi [ebp+var_4] +
mov eax [ebp+var_4] +
sub [ebp+var_14] eax +
add [ebp+var_8] eax +
mov eax [edi+2Ch] +
mov [eax+90h] esi +
cmp ebx esi +
jb loc_10140D4  +
sub esi ebx +
add esi [ebp+var_18] +
cmp esi [edi+5Ch] +
jb loc_10038E9  +
push dword ptr [edi+3Ch]  +
call ds:SetEvent  +
jmp loc_10038E9  +
***
call sub_1004DD8  +
mov ebx ecx +
mov edi ds:SetLastError +
xor esi esi +
push esi  +
call edi  +
cmp [ebx+9Ch] esi +
jz loc_101384A  +
mov edi [ebp+0Ch] +
mov eax [edi+8] +
mov [ebp-14h] eax +
mov eax [edi+4] +
push esi  +
push esi  +
push esi  +
push esi  +
lea ecx [ebp-14h] +
push ecx  +
push eax  +
push dword ptr [ebp+8]  +
push dword ptr [ebx+9Ch]  +
call ds:RegEnumValueW  +
cmp eax 0EAh +
jz loc_1013853  +
cmp eax esi +
jnz loc_100C6C1  +
push dword ptr [ebp-14h]  +
mov ecx edi +
call sub_1003E02  +
xor eax eax +
inc eax  +
call __EH_epilog3  +
retn 8  +
push eax  +
call ds:SetLastError  +
xor eax eax +
jmp loc_100C6B9  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_100C70C  +
test eax eax +
jz loc_100C702  +
push 100000h  +
call ds:GetCurrentProcess  +
push eax  +
call ds:SetPriorityClass  +
mov dword ptr [esi+4] 200000h +
mov dword ptr [esi] 1 +
mov eax esi +
pop esi  +
retn   +
and dword ptr [esi] 0 +
jmp loc_100C6FE  +
***
cmp dword_1026050 0 +
jz loc_100C726  +
call sub_100C731  +
and dword_1026050 0 +
mov dword_102604C eax +
mov eax dword_102604C +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push esi  +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_8] +
push eax  +
push 0  +
push 10h  +
push offset aUselowpriority  +
push offset aSoftwareMicr_0  +
xor esi esi +
push 80000002h  +
inc esi  +
mov [ebp+var_4] 4 +
call ds:SHRegGetValueW  +
test eax eax +
jnz loc_100C771  +
cmp [ebp+var_8] eax +
jz loc_1014362  +
mov eax esi +
pop esi  +
leave   +
retn   +
***
mov eax dword_1026064 +
cmp eax ebx +
jnz loc_100D8CF  +
push offset dword_1026064  +
call sub_100C83C  +
cmp eax ebx +
jl loc_1011547  +
push dword_1026064  +
call sub_100C95D  +
push dword_1026114  +
call ds:ResetEvent  +
test eax eax +
jnz loc_10024A9  +
jmp loc_1011579  +
***
call sub_1001D89  +
push 10000h  +
push 42h  +
call ds:GlobalAlloc  +
mov esi eax +
xor ebx ebx +
mov [ebp-14h] esi +
cmp esi ebx +
jz loc_1010CBF  +
mov [ebp-10h] ebx +
lea eax [ebp-10h] +
push eax  +
push 1  +
push esi  +
call ds:CreateStreamOnHGlobal  +
mov edi eax +
cmp edi ebx +
jl loc_1010CDC  +
mov edi ds:MapViewOfFile +
push 4  +
push ebx  +
push ebx  +
push 4  +
push dword_102610C  +
call edi  +
cmp eax ebx +
jz loc_1010CFB  +
mov ebx [eax] +
mov esi ds:UnmapViewOfFile +
push eax  +
mov [ebp-18h] ebx +
call esi  +
test eax eax +
jz loc_1010D1F  +
lea eax [ebx+4] +
cmp eax 10000h +
ja loc_1010D3C  +
push eax  +
push 0  +
push 0  +
push 4  +
push dword_102610C  +
call edi  +
mov edi eax +
test edi edi +
jz loc_1010D1F  +
push dword ptr [ebp-14h]  +
lea ebx [edi+4] +
call ds:GlobalLock  +
test eax eax +
jz loc_1010D57  +
push dword ptr [ebp-18h]  +
push ebx  +
push eax  +
call memcpy  +
add esp 0Ch +
push edi  +
call esi  +
push dword ptr [ebp-14h]  +
call ds:GlobalUnlock  +
test eax eax +
jnz loc_100C918  +
mov esi ds:__imp_GetLastError +
call esi  +
test eax eax +
jnz loc_1010D5C  +
push dword ptr [ebp+8]  +
push offset riid  +
push dword ptr [ebp-10h]  +
call ds:CoUnmarshalInterface  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov esi eax +
mov eax [ebp-10h] +
test eax eax +
jz loc_100C93C  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax esi +
call __EH_epilog3  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax dword_10260A4 +
test eax eax +
jz loc_1012C8D  +
cmp [ebp+arg_0] 0 +
jz loc_1012C97  +
push [ebp+arg_0]  +
lea ecx [eax+0Ch] +
call sub_1001F59  +
xor eax eax +
pop ebp  +
retn 4  +
***
xor eax eax +
retn   +
***
xor eax eax +
jmp loc_1002FE3  +
mov eax [eax] +
test eax eax +
jz loc_100C98D  +
jmp loc_1002FCD  +
***
push 0FFFFFFFFh  +
push dword_1026114  +
call ds:WaitForSingleObject  +
cmp eax ebx +
jnz loc_1011501  +
jmp loc_100C7F4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
lea eax [ecx+10h] +
push eax  +
push 400h  +
push 20h  +
push dword ptr [ebp+8]  +
call sub_1004AD5  +
pop ebp  +
retn 4  +
***
or dword_1026090 1 +
call ds:GetSystemDefaultLCID  +
mov dword_102608C eax +
jmp loc_1005E1C  +
***
push 24h  +
call off_102665C  +
test eax eax +
jz loc_100CA23  +
push dword ptr [esi+48h]  +
mov ecx eax +
call sub_100CA2C  +
mov edi eax +
test eax eax +
jz loc_10047DF  +
mov ecx [esi] +
mov [eax] ecx +
mov [eax+4] eax +
inc dword ptr [esi+4Ch]  +
mov [esi] eax +
jmp loc_10047D7  +
xor eax eax +
jmp loc_100CA08  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push ebx  +
push esi  +
mov esi ecx +
xor ebx ebx +
mov [esi] ebx +
mov [esi+4] ebx +
mov [esi+8] eax +
call ds:GetTickCount  +
mov [esi+0Ch] eax +
call ds:GetCurrentThreadId  +
mov [esi+10h] eax +
mov [esi+14h] bl +
mov [esi+18h] ebx +
mov [esi+20h] ebx +
mov dword ptr [esi+1Ch] offset off_1001E6C +
mov eax esi +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
push hEvent  +
mov dword_1026078 esi +
call ds:SetEvent  +
test eax eax +
jz loc_1012F65  +
push 0FFFFFFFFh  +
push dword_102612C  +
call ds:WaitForSingleObject  +
test eax eax +
jnz loc_1012F5E  +
cmp edi ebx +
mov dword_1026078 ebx +
jge loc_1004F60  +
jmp loc_1005063  +
***
dec eax  +
jnz loc_10034E3  +
push dword_10260A4  +
mov ecx dword_1026078 +
lea eax [esi+24h] +
push eax  +
call sub_100CAE7  +
push dword_102612C  +
mov dword_1026078 edi +
call ds:SetEvent  +
jmp loc_10034E3  +
***
call sub_1001D89  +
mov esi ecx +
xor edi edi +
cmp [esi+7Ch] edi +
jnz loc_100CBCC  +
mov [ebp-14h] edi +
mov [ebp-4] edi +
mov [ebp-10h] edi +
mov eax [esi+4] +
lea ecx [ebp-10h] +
push ecx  +
lea ecx [ebp-14h] +
push ecx  +
push eax  +
lea eax [esi+54h] +
push eax  +
mov byte ptr [ebp-4] 1 +
call sub_100CC01  +
cmp eax edi +
mov [esi+80h] eax +
jl loc_100CB4B  +
push dword ptr [ebp-10h]  +
mov eax [esi+4] +
push dword ptr [ebp-14h]  +
mov ecx [ebp+8] +
mov ecx [ecx+4] +
push eax  +
push dword ptr [ebp+0Ch]  +
push ecx  +
call sub_100CCC5  +
mov [esi+80h] eax +
cmp [esi+80h] edi +
jl loc_100CBA5  +
push dword ptr [ebp-14h]  +
lea ebx [esi+70h] +
mov ecx ebx +
call sub_1001F59  +
push dword ptr [ebp-10h]  +
lea edi [esi+64h] +
mov ecx edi +
call sub_1001F59  +
mov eax [edi] +
test eax eax +
jz loc_100D1B9  +
mov ecx [eax] +
lea edx [esi+78h] +
push edx  +
push offset dword_100CCB0  +
push eax  +
call dword ptr [ecx]  +
mov eax [edi] +
mov ecx [eax] +
lea edx [esi+68h] +
push edx  +
push offset dword_100CBEC  +
push eax  +
call dword ptr [ecx]  +
mov edi [edi] +
mov eax [edi] +
lea ecx [esi+6Ch] +
push ecx  +
push offset dword_100CBDC  +
push edi  +
call dword ptr [eax]  +
mov eax [ebp-10h] +
mov dword ptr [esi+7Ch] 1 +
mov byte ptr [ebp-4] 0 +
test eax eax +
jz loc_100CBBD  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-14h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
test eax eax +
jnz loc_100D1F4  +
mov eax [esi+80h] +
call __EH_epilog3  +
retn 8  +
***
call sub_1001D89  +
and dword ptr [ebp-10h] 0 +
and dword ptr [ebp-4] 0 +
lea eax [ebp-10h] +
push eax  +
push offset stru_100CCA0  +
push 1  +
push 0  +
push dword ptr [ebp+8]  +
call ds:CoCreateInstance  +
mov esi eax +
test esi esi +
jl loc_1012EA5  +
push dword ptr [ebp+10h]  +
mov eax [ebp-10h] +
mov ecx [eax] +
push offset dword_100CC90  +
push eax  +
call dword ptr [ecx]  +
mov esi eax +
test esi esi +
jge loc_100CC65  +
push dword ptr [ebp+14h]  +
mov eax [ebp-10h] +
mov ecx [eax] +
push offset dword_100CC80  +
push eax  +
call dword ptr [ecx]  +
mov esi eax +
test esi esi +
jl loc_1012EA5  +
mov eax [ebp-10h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
test eax eax +
jz loc_100CC76  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax esi +
call __EH_epilog3  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_C] +
sub esp 28h +
push esi  +
xor esi esi +
push edi  +
cmp edx esi +
jnz loc_100D160  +
push [ebp+arg_4]  +
mov ecx [ebp+arg_10] +
mov edx [ecx] +
mov eax offset byte_1004260 +
push eax  +
push eax  +
push esi  +
push esi  +
push 14h  +
pop eax  +
push eax  +
push eax  +
push esi  +
push [ebp+arg_0]  +
push ecx  +
call dword ptr [edx+0Ch]  +
mov edi eax +
cmp edi esi +
jl loc_1012EB8  +
mov eax edi +
pop edi  +
pop esi  +
leave   +
retn 14h  +
***
mov ecx [ecx+78h] +
xor eax eax +
test ecx ecx +
jnz loc_100D1FF  +
retn   +
***
xor eax eax +
jmp loc_10051A7  +
***
mov ecx [ebp+arg_4] +
call sub_100CD11  +
mov esi eax +
test esi esi +
jl loc_1005171  +
push [ebp+arg_4]  +
mov ecx [ebp+arg_0] +
call sub_100CD4D  +
jmp loc_1005171  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_100CD73  +
lea ecx [esi+4] +
push eax  +
push dword ptr [ecx+8]  +
call sub_1004184  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push 8  +
call off_102665C  +
test eax eax +
jz loc_100CDA0  +
and dword ptr [eax] 0 +
and dword ptr [eax+4] 0 +
test eax eax +
jz loc_1012DF8  +
mov ecx [ebp+arg_0] +
mov [eax+4] ecx +
leave   +
retn 4  +
xor eax eax +
jmp loc_100CD8E  +
***
push ecx  +
push edx  +
push eax  +
push offset SHELL32_dll_import_table  +
call sub_100CDD0  +
pop edx  +
pop ecx  +
jmp eax  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
mov eax [ebp+hModule] +
and [ebp+var_4] 0 +
push ebx  +
mov ebx [eax+4] +
push esi  +
mov esi [eax+8] +
push edi  +
mov edi [ebp+arg_4] +
sub edi [eax+0Ch] +
mov eax [eax+10h] +
mov ecx offset __ImageBase +
sub edi ecx +
sar edi 2 +
add esi ecx +
mov edx [esi] +
lea eax __ImageBase[eax+edi*4] +
add ebx ecx +
mov ecx [eax] +
mov [ebp+hModule] edx +
lea eax (__ImageBase+2)[ecx] +
test ecx ecx +
js loc_100CED5  +
mov [ebp+lpProcName] eax +
test edx edx +
jnz loc_100CE6F  +
push edx  +
push edx  +
push ebx  +
call LoadLibraryExA  +
mov edi eax +
mov [ebp+hModule] edi +
test edi edi +
jz loc_1012FF6  +
push 0  +
push edi  +
push esi  +
call InterlockedCompareExchange  +
mov esi eax +
test esi esi +
jnz loc_1012FE8  +
push 8  +
pop ecx  +
lea edi [ebp+var_28] +
stos   +
mov eax [ebp+hModule] +
mov [ebp+var_14] eax +
mov eax ds:dword_100CEBC +
mov [ebp+var_2C] 24h +
mov [ebp+var_20] ebx +
test eax eax +
jnz loc_1012FDB  +
cmp [ebp+hModule] 0FFFFFFFFh +
jz loc_101301D  +
cmp [ebp+hModule] 0 +
jz loc_1013039  +
push [ebp+lpProcName]  +
push [ebp+hModule]  +
call GetProcAddress  +
mov esi eax +
test esi esi +
jz loc_1013026  +
mov [ebp+var_4] 1 +
test esi esi +
jz loc_1013039  +
cmp [ebp+var_4] 0 +
jz loc_100CEB2  +
mov eax [ebp+arg_4] +
mov [eax] esi +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov eax offset SHParseDisplayName +
jmp loc_100CDBA  +
***
movzx eax cx +
jmp loc_100CE1B  +
cmp eax 0B6h +
jz loc_100CE98  +
jmp loc_100CE9F  +
***
mov eax offset SHELL32_155 +
jmp loc_100CDBA  +
***
mov eax offset SHCreateShellItem +
jmp loc_100CDBA  +
***
mov eax offset PSGetPropertyDescription +
jmp $+2  +
push ecx  +
push edx  +
push eax  +
push offset PROPSYS_dll_import_table  +
call sub_100CDD0  +
pop edx  +
pop ecx  +
jmp eax  +
***
dec eax  +
jz loc_1010F12  +
sub eax 5 +
jnz loc_1010EE6  +
push edi  +
add esi 10h +
push 3Ah  +
mov ecx esi +
call sub_100557B  +
push eax  +
push edi  +
push [ebp+arg_0]  +
mov ecx esi +
call sub_1004123  +
mov eax [ebp+arg_0] +
jmp loc_1005288  +
***
push dword_1026174  +
lea ecx [ebp+var_10] +
call sub_10051B1  +
test eax eax +
jz loc_101336F  +
push dword_1026164  +
lea ecx [ebp+var_10] +
call sub_10051B1  +
test eax eax +
jz loc_1013375  +
cmp [ebp+var_C] 0 +
jz loc_101337C  +
push 6  +
pop eax  +
jmp loc_1005544  +
***
dec eax  +
jnz loc_10107A2  +
xor eax eax +
inc eax  +
jmp loc_1005246  +
mov esi [ebp+arg_10] +
jmp loc_1005220  +
***
mov ecx [ebp-14h] +
push esi  +
push dword ptr [ebp+58h]  +
call sub_1005156  +
mov edi eax +
test edi edi +
jl loc_1005012  +
and dword ptr [ebp+58h] 0 +
lea eax [ebp+58h] +
push eax  +
mov ecx esi +
mov byte ptr [ebp-4] 6 +
call sub_100D12E  +
mov esi [ebp+58h] +
lea eax [ebp-10h] +
push eax  +
push esi  +
push dword ptr [ebp-18h]  +
mov ecx [ebp-14h] +
push dword ptr [ebp+50h]  +
push dword ptr [ebp+4Ch]  +
push dword ptr [ebp+40h]  +
push dword ptr [ebp+3Ch]  +
push ebx  +
push dword ptr [ebp+34h]  +
push dword ptr [ebp+30h]  +
push dword ptr [ebp+2Ch]  +
push dword ptr [ebp+28h]  +
push dword ptr [ebp+24h]  +
push dword ptr [ebp+20h]  +
push dword ptr [ebp+1Ch]  +
push dword ptr [ebp+18h]  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call sub_100D023  +
mov edi eax +
mov byte ptr [ebp-4] 5 +
test esi esi +
jz loc_1005012  +
mov eax [esi] +
push esi  +
call dword ptr [eax+8]  +
jmp loc_1005012  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 30h +
xor eax eax +
push esi  +
push edi  +
lea edi [ebp+var_1C] +
stos   +
stos   +
stos   +
stos   +
mov eax [ebp+arg_4] +
mov [ebp+var_18] eax +
mov eax [ebp+arg_8] +
mov [ebp+var_14] eax +
mov eax [ebp+arg_C] +
mov [ebp+var_10] eax +
xor eax eax +
lea edi [ebp+var_C] +
stos   +
stos   +
stos   +
mov eax [ebp+arg_14] +
mov [ebp+var_8] eax +
mov eax [ebp+arg_18] +
mov [ebp+var_4] eax +
xor eax eax +
lea edi [ebp+var_30] +
stos   +
stos   +
stos   +
mov esi [ebp+arg_44] +
push [ebp+arg_4C]  +
stos   +
stos   +
mov eax [ebp+arg_10] +
mov [ebp+var_2C] eax +
mov eax [ebp+arg_28] +
mov [ebp+var_28] eax +
mov eax [ebp+arg_2C] +
mov [ebp+var_24] eax +
mov eax [ebp+arg_34] +
mov [ebp+var_20] eax +
mov eax [ebp+arg_48] +
mov [ebp+var_1C] 10h +
mov [ebp+var_C] 0Ch +
mov [ebp+var_30] 14h +
test eax eax +
jz loc_1012DC6  +
push [ebp+arg_3C]  +
mov ecx [ebp+arg_0] +
mov ecx [ecx+14h] +
mov edx [eax] +
lea edi [ebp+var_30] +
push edi  +
lea edi [ebp+var_C] +
push edi  +
lea edi [ebp+var_1C] +
push edi  +
push ecx  +
push eax  +
call dword ptr [edx+1Ch]  +
mov ecx [ebp+arg_40] +
mov edi eax +
mov eax [ebp+arg_4C] +
push esi  +
push dword ptr [eax]  +
call sub_100D0E8  +
mov eax edi +
pop edi  +
pop esi  +
leave   +
retn 50h  +
***
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_1005C63  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_1001F59  +
push [ebp+arg_4]  +
lea ecx [esi+8] +
call sub_1001F59  +
pop esi  +
pop ebp  +
retn 8  +
***
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_1005021  +
***
mov eax [ecx+70h] +
mov edx [ebp+arg_0] +
mov [edx] eax +
mov ecx [ecx+70h] +
mov eax [ecx] +
push ecx  +
call dword ptr [eax+4]  +
jmp loc_100514A  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ecx+80h] +
test esi esi +
jl loc_100D159  +
cmp dword ptr [ecx+74h] 0 +
jz loc_1012DEE  +
mov eax [ecx+74h] +
mov edx [ebp+arg_0] +
mov [edx] eax +
mov ecx [ecx+74h] +
mov eax [ecx] +
push ecx  +
call dword ptr [eax+4]  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
xor eax eax +
lea edi [ebp+var_C] +
stos   +
stos   +
stos   +
push 14h  +
pop eax  +
push 7  +
mov [ebp+var_8] eax +
mov [ebp+var_4] eax +
pop ecx  +
xor eax eax +
lea edi [ebp+var_28] +
stos   +
mov eax [ebp+arg_0] +
lea ecx [ebp+var_28] +
push ecx  +
push [ebp+arg_4]  +
mov [ebp+var_24] eax +
mov eax offset byte_1004260 +
lea ecx [ebp+var_C] +
push ecx  +
mov [ebp+var_14] eax +
mov [ebp+var_10] eax +
mov eax [edx] +
push edx  +
mov [ebp+var_C] 0Ch +
mov [ebp+var_28] 1Ch +
mov [ebp+var_20] esi +
mov [ebp+var_1C] esi +
mov [ebp+var_18] esi +
call dword ptr [eax+0Ch]  +
jmp loc_100CCFA  +
***
mov dl 0F0h +
mov [edi-4Eh] esi +
mov ch 22h +
inc edi  +
mov esp [ebp+5Dh] +
mov ebp 0A9970615h +
***
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_100CBCC  +
***
mov eax [ecx] +
push ecx  +
call dword ptr [eax+0Ch]  +
jmp locret_100CD1E  +
***
mov eax dword_102620C +
mov [ebp-458h] eax +
cmp eax [ebp-45Ch] +
ja loc_10074B4  +
push eax  +
push ecx  +
push esi  +
call memcpy  +
add esp 0Ch +
xor ebx ebx +
jmp loc_10074DE  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 24h +
push esi  +
push edi  +
mov edi ecx +
call sub_100D2EE  +
mov esi eax +
dec esi  +
js loc_100D27C  +
lea eax [ebp+pAce] +
push eax  +
push esi  +
push dword ptr [edi]  +
call ds:GetAce  +
test eax eax +
jz loc_1013A6A  +
mov eax [ebp+pAce] +
push [ebp+pSid2]  +
add eax 8 +
push eax  +
call ds:EqualPrefixSid  +
test eax eax +
jz loc_100D24B  +
jmp loc_1013A5C  +
pop edi  +
pop esi  +
leave   +
retn 4  +
***
cmp [ebp-470h] ebx +
jz loc_1007530  +
lea ecx [ebp-454h] +
call sub_100D321  +
push dword ptr [ebp-454h]  +
lea ecx [ebp-470h] +
mov byte ptr [ebp-4] 4 +
call sub_100D238  +
lea ecx [ebp-470h] +
call sub_100D2EE  +
cmp eax ebx +
jz loc_1011285  +
push ebx  +
push dword ptr [ebp-470h]  +
lea ecx [ebp-48Ch] +
push 1  +
call sub_10072C9  +
lea ecx [ebp-454h] +
mov byte ptr [ebp-4] 3 +
call sub_1007653  +
jmp loc_1007530  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx] +
sub esp 2Ch +
test eax eax +
jz locret_1013A3B  +
push 2  +
push 0Ch  +
lea ecx [ebp+pAclInformation] +
push ecx  +
push eax  +
call ds:GetAclInformation  +
test eax eax +
jz loc_1013A3D  +
mov eax [ebp+pAclInformation] +
leave   +
retn   +
***
mov edi edi +
push esi  +
push offset unk_1026634  +
push 2  +
push offset unk_1026228  +
mov esi ecx +
call sub_100D340  +
mov eax esi +
pop esi  +
retn   +
***
call sub_1001D89  +
mov [ebp-10h] ecx +
xor esi esi +
mov [ecx] esi +
mov [ebp-14h] esi +
mov ebx [ebp+0Ch] +
push ebx  +
mov [ebp-4] esi +
call ds:GetSidLengthRequired  +
push eax  +
call off_1026668  +
push ebx  +
push dword ptr [ebp+8]  +
mov edi eax +
push edi  +
call ds:InitializeSid  +
test eax eax +
jz loc_1013A23  +
cmp ebx esi +
jbe loc_100D398  +
push esi  +
push edi  +
call ds:GetSidSubAuthority  +
mov ecx [ebp+10h] +
mov ecx [ecx+esi*4] +
inc esi  +
mov [eax] ecx +
cmp esi ebx +
jb loc_100D383  +
mov eax [ebp-10h] +
mov [eax] edi +
mov eax [ebp-10h] +
call __EH_epilog3  +
retn 0Ch  +
***
or dword ptr [ebp-4] 0FFFFFFFFh +
test eax eax +
jnz loc_1010D74  +
xor eax eax +
inc eax  +
jmp loc_10070E5  +
***
push 3  +
jmp loc_100881F  +
push 3  +
jmp loc_100855D  +
cmp al bl +
jz loc_10085DE  +
jmp loc_10085FF  +
xor eax eax +
jmp loc_1008630  +
cmp al bl +
jz loc_100DCD8  +
jmp loc_100DCF9  +
push dword ptr [esi+24h]  +
call edi  +
pop ecx  +
mov [ebp+var_7C38] eax +
cmp eax 1 +
jnz loc_100879E  +
call sub_100D423  +
cmp eax ebx +
jl loc_10121EE  +
cmp dword_102607C ebx +
jnz loc_100879E  +
jmp loc_10121EE  +
***
call sub_1001D89  +
xor edi edi +
mov [ebp-10h] edi +
mov dword ptr [ebp-28h] offset off_1001E6C +
mov [ebp-24h] edi +
lea eax [ebp-24h] +
push eax  +
push 8  +
mov [ebp-4] edi +
call ds:GetCurrentProcess  +
push eax  +
call ds:OpenProcessToken  +
test eax eax +
jz loc_1010FCF  +
mov [ebp-18h] edi +
mov [ebp-20h] edi +
mov esi ds:GetTokenInformation +
lea eax [ebp-14h] +
push eax  +
push edi  +
push edi  +
xor ebx ebx +
inc ebx  +
push ebx  +
push dword ptr [ebp-24h]  +
mov byte ptr [ebp-4] 2 +
call esi  +
mov edi ds:__imp_GetLastError +
call edi  +
cmp eax 7Ah +
jnz loc_1010FEA  +
push dword ptr [ebp-14h]  +
call off_102665C  +
mov [ebp-18h] eax +
test eax eax +
jz loc_1010FFD  +
lea eax [ebp-14h] +
push eax  +
push dword ptr [ebp-14h]  +
push dword ptr [ebp-18h]  +
push ebx  +
push dword ptr [ebp-24h]  +
call esi  +
test eax eax +
jz loc_1011013  +
cmp dword ptr [ebp-10h] 0 +
jl loc_100D50B  +
lea eax [ebp-14h] +
push eax  +
push 0  +
push 0  +
push 5  +
push dword ptr [ebp-24h]  +
call esi  +
call edi  +
cmp eax 7Ah +
jnz loc_101102B  +
push dword ptr [ebp-14h]  +
call off_102665C  +
mov [ebp-20h] eax +
test eax eax +
jz loc_1011041  +
cmp dword ptr [ebp-10h] 0 +
jl loc_100D50B  +
lea eax [ebp-14h] +
push eax  +
push dword ptr [ebp-14h]  +
push dword ptr [ebp-20h]  +
push 5  +
push dword ptr [ebp-24h]  +
call esi  +
test eax eax +
jz loc_101104D  +
and dword ptr [ebp-1Ch] 0 +
cmp dword ptr [ebp-10h] 0 +
mov byte ptr [ebp-4] 3 +
jl loc_100D629  +
mov eax [ebp-18h] +
push dword ptr [eax]  +
call ds:GetLengthSid  +
mov esi eax +
add esi 10h +
push esi  +
call off_102665C  +
mov [ebp-1Ch] eax +
test eax eax +
jz loc_1011065  +
cmp dword ptr [ebp-10h] 0 +
jl loc_100D629  +
push ebx  +
lea eax [ebp-3Ch] +
push eax  +
call ds:InitializeSecurityDescriptor  +
test eax eax +
jz loc_100D67F  +
mov eax [ebp-18h] +
push 0  +
push dword ptr [eax]  +
lea eax [ebp-3Ch] +
push eax  +
call ds:SetSecurityDescriptorOwner  +
test eax eax +
jz loc_100D67F  +
mov eax [ebp-20h] +
push 0  +
push dword ptr [eax]  +
lea eax [ebp-3Ch] +
push eax  +
call ds:SetSecurityDescriptorGroup  +
test eax eax +
jz loc_100D67F  +
push 2  +
push esi  +
push dword ptr [ebp-1Ch]  +
call ds:InitializeAcl  +
test eax eax +
jz loc_100D67F  +
mov eax [ebp-18h] +
push dword ptr [eax]  +
push 1F0081h  +
push 2  +
push dword ptr [ebp-1Ch]  +
call ds:AddAccessAllowedAce  +
test eax eax +
jz loc_100D67F  +
push 0  +
push dword ptr [ebp-1Ch]  +
lea eax [ebp-3Ch] +
push ebx  +
push eax  +
call ds:SetSecurityDescriptorDacl  +
test eax eax +
jz loc_100D67F  +
cmp dword ptr [ebp-10h] 0 +
jl loc_100D629  +
mov esi ds:MakeSelfRelativeSD +
mov ebx offset dword_102620C +
push ebx  +
push 0  +
lea eax [ebp-3Ch] +
push eax  +
call esi  +
test eax eax +
jnz loc_100D68F  +
call edi  +
cmp eax 7Ah +
jnz loc_1011087  +
push dword_102620C  +
call off_102665C  +
mov dword_102607C eax +
test eax eax +
jz loc_100D686  +
push ebx  +
push eax  +
lea eax [ebp-3Ch] +
push eax  +
call esi  +
test eax eax +
jz loc_1011087  +
cmp dword ptr [ebp-1Ch] 0 +
mov byte ptr [ebp-4] 2 +
jz loc_100D63C  +
push dword ptr [ebp-1Ch]  +
call off_1026660  +
cmp dword ptr [ebp-20h] 0 +
mov byte ptr [ebp-4] 1 +
jz loc_100D64F  +
push dword ptr [ebp-20h]  +
call off_1026660  +
cmp dword ptr [ebp-18h] 0 +
mov byte ptr [ebp-4] 0 +
jz loc_100D662  +
push dword ptr [ebp-18h]  +
call off_1026660  +
mov esi [ebp-10h] +
xor edi edi +
push edi  +
lea ecx [ebp-28h] +
mov dword ptr [ebp-28h] offset off_1001E6C +
call sub_1001EE0  +
mov eax esi +
call __EH_epilog3  +
retn   +
call edi  +
jmp loc_1011071  +
mov dword ptr [ebp-10h] 8007000Eh +
jmp loc_100D629  +
mov dword ptr [ebp-10h] 80004005h +
jmp loc_100D629  +
***
push [ebp+var_5A5C]  +
lea ecx [ebp+var_51B0] +
call sub_1005CDF  +
lea ecx [ebp+var_5A64] +
mov byte ptr [ebp+var_4] 0Dh +
call sub_1005C8F  +
push 0FFFFFFFFh  +
lea ecx [ebp+var_5A70] +
mov [ebp+var_5A70] offset off_1005BBC +
call sub_1005BF5  +
mov eax [ebp+var_5A60] +
mov byte ptr [ebp+var_4] 0Bh +
cmp eax ebx +
jnz loc_10116CF  +
mov eax [ebp+var_5A68] +
mov byte ptr [ebp+var_4] 0Ah +
cmp eax ebx +
jnz loc_10116DA  +
mov eax [ebp+var_5A78] +
mov byte ptr [ebp+var_4] 9 +
cmp eax ebx +
jnz loc_10116E5  +
lea ecx [ebp+var_5AA4] +
mov byte ptr [ebp+var_4] 8 +
call sub_1005C1A  +
lea ecx [ebp+var_44DC] +
call sub_1002011  +
push ebx  +
jmp loc_1005CB1  +
***
push 1Fh  +
pop eax  +
push edi  +
lea ecx [ebp-9D8h] +
mov [ebp-0BC4h] ax +
call sub_1004BD7  +
mov ecx [ebp-0BA4h] +
mov [ebp-0BBCh] eax +
lea eax [ebp-844h] +
push eax  +
call sub_1005FEF  +
cmp eax edi +
jl loc_100D774  +
mov ecx [ebp-0BA4h] +
lea eax [ebp-0BC4h] +
push eax  +
call sub_1006177  +
mov esi eax +
jmp loc_1007255  +
push edi  +
lea ecx [ebp-0BA0h] +
call sub_10040E1  +
or esi 0FFFFFFFFh +
push esi  +
lea eax [ebp-810h] +
push eax  +
lea ecx [ebp-0BA0h] +
mov byte ptr [ebp-4] 1 +
call sub_100537D  +
lea ecx [ebp-0BA0h] +
call sub_1005457  +
cmp word ptr [ebp-9FCh] 3 +
jnz loc_10102D1  +
mov ebx [ebp-0BA4h] +
add ebx 41Ch +
mov ecx ebx +
call sub_1005293  +
test eax eax +
jz loc_10102C5  +
lea eax [ebp-0BB4h] +
push eax  +
mov ecx ebx +
call sub_100525B  +
push eax  +
lea ecx [ebp-9D8h] +
call sub_1007886  +
push esi  +
push dword ptr [ebp-9CCh]  +
push offset asc_100D728  +
mov eax [ebp-9D8h] +
lea ecx [ebp-9D8h] +
call dword ptr [eax+10h]  +
push esi  +
push dword ptr [ebp-9CCh]  +
lea eax [ebp-810h] +
push eax  +
mov eax [ebp-9D8h] +
lea ecx [ebp-9D8h] +
call dword ptr [eax+10h]  +
lea ecx [ebp-0BA0h] +
mov byte ptr [ebp-4] 0 +
call sub_10030C1  +
jmp loc_100D730  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov [ecx+8] eax +
mov ecx [ecx+20h] +
sub esp 20h +
test ecx ecx +
jnz loc_100D859  +
leave   +
retn 4  +
push ecx  +
call ds:SetEvent  +
test eax eax +
jnz locret_100D855  +
jmp loc_10144E7  +
***
mov eax edx +
mov edx [edx] +
jmp loc_1005196  +
***
lea eax [esi+eax*4+28h] +
mov ecx [eax] +
mov edx ebx +
and ecx 0FFFFFFFEh +
and edx 0FFFFFFFEh +
cmp edx ecx +
jb loc_101472B  +
push ebx  +
mov ecx esi +
call sub_100D8A2  +
push edi  +
mov ecx esi +
call sub_100D8A2  +
jmp loc_1004712  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ecx+0Ch] +
inc edx  +
mov eax edx +
sub eax 64h +
neg eax  +
sbb eax eax +
and eax edx +
mov edx [ecx+8] +
mov [ecx+0Ch] eax +
cmp eax edx +
jz loc_10146D5  +
mov edx [ebp+arg_0] +
mov [ecx+eax*4+28h] edx +
pop ebp  +
retn 4  +
***
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov dword_1026064 ebx +
jmp loc_100C801  +
test al al +
jz loc_10028A8  +
jmp loc_10028C9  +
test al al +
jz loc_1006CBE  +
jmp loc_1006CE0  +
***
mov ecx [eax] +
push eax  +
call dword ptr [ecx+18h]  +
push edi  +
mov ecx ebx +
call sub_1001F59  +
jmp loc_100E393  +
push edi  +
call sub_1001F59  +
jmp loc_100E39E  +
push edi  +
call sub_1001F59  +
jmp loc_100E3CA  +
***
mov eax [ecx] +
push ecx  +
call dword ptr [eax+10h]  +
jmp locret_100DE65  +
***
sub eax 4 +
dec edx  +
cmp eax offset dword_1004510 +
ja loc_1004CAE  +
jmp loc_1004CB9  +
***
cmp [ebp+arg_0] 0FFFFFFFFh +
jz loc_1013B31  +
xor eax eax +
cmp [ebp+arg_0] 102h +
setnz al  +
dec eax  +
and eax 2F800h +
add eax 80040DB4h +
jmp loc_10049DC  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ecx+78h] +
xor eax eax +
test ecx ecx +
jz loc_100D984  +
push [ebp+arg_0]  +
mov eax [ecx] +
push ecx  +
call dword ptr [eax+14h]  +
pop ebp  +
retn 4  +
***
mov eax [ebp+arg_0] +
mov edx [eax] +
push ecx  +
push eax  +
call dword ptr [edx+0Ch]  +
and [ebp+var_C] 0 +
jmp loc_1001697  +
mov eax 80040DB4h +
jmp loc_10016C7  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
mov eax [ebp+8] +
add eax 0Ch +
mov [ebp-0Ch] eax +
add eax 4 +
and dword ptr [ebp-4] 0 +
mov [ebp-8] eax +
lea ecx [ebp-0Ch] +
call sub_1003543  +
cmp dword ptr [eax] 0 +
jz loc_100D9EE  +
mov eax [ebp-4] +
push dword ptr [ebp+0Ch]  +
neg eax  +
sbb eax eax +
and eax [ebp-8] +
push eax  +
call sub_1003527  +
mov ecx [eax] +
call sub_100D96D  +
jmp loc_100D9C5  +
***
xor eax eax +
leave   +
retn 8  +
***
mov ecx [ebp+var_4C] +
push 48h  +
pop eax  +
mov word ptr [ebp+var_5C] ax +
lea eax [ebp+var_48] +
mov [ebp+var_54] eax +
lea eax [ebp+var_38] +
push eax  +
call sub_1005FEF  +
test eax eax +
jl loc_1006E5E  +
mov ecx [ebp+var_4C] +
lea eax [ebp+var_5C] +
push eax  +
call sub_1006177  +
jmp loc_1006E5E  +
***
mov [ebp+var_5AB0] 800000h +
jmp loc_10077C9  +
***
push dword ptr [esi+8]  +
mov ecx edi +
push 10h  +
call sub_1005A63  +
jmp loc_1006299  +
mov eax 8000FFFFh +
jmp loc_1006299  +
mov eax 8000FFFFh +
jmp loc_10062AC  +
***
retn   +
***
cmp dword ptr [ecx+8] 0 +
jnz loc_100DDD0  +
retn   +
***
mov ecx dword_10260A8 +
test ecx ecx +
jz loc_100DA9E  +
call sub_100E162  +
mov ecx dword_10260A8 +
test ecx ecx +
jz loc_100DA97  +
push 1  +
call sub_100E28C  +
and dword_10260A8 0 +
mov eax dword_10260A4 +
test eax eax +
jz locret_100DAB4  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
and dword_10260A4 0 +
retn   +
***
jmp sub_100DAC1  +
***
mov edi edi +
push esi  +
mov esi ecx +
cmp dword ptr [esi+0Ch] 0 +
jnz loc_100DDE5  +
pop esi  +
retn   +
***
mov dword ptr [ecx] offset off_100359C +
mov ecx [ecx+24h] +
test ecx ecx +
jz locret_100DAEB  +
push 3  +
call sub_100DAF1  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
test [ebp+arg_0] 2 +
push edi  +
mov edi ecx +
jz loc_10113C1  +
push esi  +
push offset loc_100DABA  +
lea esi [edi-4] +
push dword ptr [esi]  +
push 10h  +
push edi  +
call sub_100DB30  +
test [ebp+arg_0] 1 +
jz loc_100DB23  +
push esi  +
call off_1026660  +
mov eax esi +
pop esi  +
pop edi  +
pop ebp  +
retn 4  +
***
call __SEH_prolog4  +
and [ebp+var_1C] 0 +
mov esi [ebp+arg_4] +
mov eax esi +
imul eax [ebp+arg_8] +
add [ebp+arg_0] eax +
and [ebp+ms_exc.disabled] 0 +
dec [ebp+arg_8]  +
js loc_100DB7C  +
sub [ebp+arg_0] esi +
mov ecx [ebp+arg_0] +
call [ebp+arg_C]  +
jmp loc_100DB50  +
mov [ebp+var_1C] 1 +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
call sub_100DB9C  +
call __SEH_epilog4  +
retn 10h  +
***
cmp dword ptr [ebp-1Ch] 0 +
jz loc_1013193  +
retn   +
***
lea ecx [ebp+var_7C4C] +
mov byte ptr [ebp+var_4] 0Eh +
call sub_100DF1A  +
lea ecx [ebp+var_DB4] +
mov byte ptr [ebp+var_4] 0Dh +
call sub_1003290  +
lea ecx [ebp+var_120] +
mov byte ptr [ebp+var_4] 0Ch +
call sub_100E1FF  +
lea ecx [ebp+var_68] +
call sub_1002011  +
mov byte ptr [ebp+var_4] 0Ah +
cmp [ebp+pSid] ebx +
jz loc_100DBF4  +
push [ebp+pSid]  +
call off_1026660  +
lea ecx [ebp+pSecDesc] +
mov byte ptr [ebp+var_4] 9 +
call sub_100DDA2  +
lea ecx [ebp+var_1EC] +
call sub_1002011  +
lea ecx [ebp+var_320] +
mov byte ptr [ebp+var_4] 7 +
call sub_100341D  +
lea ecx [ebp+var_3C0] +
mov byte ptr [ebp+var_4] 6 +
call sub_100341D  +
lea ecx [ebp+var_280] +
call sub_1001F05  +
mov [ebp+var_4] 3 +
mov edi [ebp+var_7C3C] +
cmp edi ebx +
jbe loc_100DC5E  +
lea esi [ebp+Parameter] +
mov ecx esi +
call sub_100DD65  +
add esi 374h +
dec edi  +
jnz loc_100DC4E  +
lea ecx [ebp+var_198] +
call sub_100DA67  +
lea ecx [ebp+var_198] +
call sub_100DD65  +
mov eax dword_1026064 +
cmp eax ebx +
jz loc_100DC89  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov dword_1026064 ebx +
mov ecx dword_1026070 +
cmp ecx ebx +
jz loc_100DC9F  +
mov eax [ecx] +
push 1  +
call dword ptr [eax]  +
mov dword_1026070 ebx +
push dword_102607C  +
call off_1026660  +
push hMem  +
mov dword_102607C ebx +
call ds:LocalFree  +
mov hMem ebx +
cmp dword_10262BC ebx +
jz loc_100DCF9  +
mov al byte_10262C0 +
cmp al 4 +
jb loc_100D3DE  +
mov eax dword_10262A8 +
mov ecx dword_10262AC +
mov edx 4000h +
mov edi 80000000h +
and eax edx +
and ecx edi +
or eax ecx +
jnz loc_1012726  +
push offset dword_10261B8  +
call sub_100E3F5  +
lea ecx [ebp+var_198] +
mov byte ptr [ebp+var_4] 2 +
call sub_100EA04  +
push offset sub_100E670  +
push 20h  +
push 374h  +
lea eax [ebp+Parameter] +
push eax  +
mov byte ptr [ebp+var_4] 1 +
call sub_100DB30  +
mov byte ptr [ebp+var_4] bl +
call sub_100DA77  +
cmp [ebp+var_7C78] ebx +
jl loc_100DD44  +
call ds:CoUninitialize  +
xor eax eax +
mov ecx [ebp+var_C] +
mov large fs:0 ecx +
pop ecx  +
pop edi  +
pop esi  +
pop ebx  +
mov ecx [ebp+var_14] +
xor ecx ebp +
call sub_1001E40  +
leave   +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
cmp dword ptr [esi+8] 0 +
jnz loc_100DD78  +
mov eax [esi] +
mov ecx esi +
pop esi  +
jmp dword ptr [eax+8]  +
call ds:GetCurrentThreadId  +
cmp eax [esi+1Ch] +
jz loc_100DD8E  +
push 0FFFFFFFFh  +
push dword ptr [esi+8]  +
call ds:WaitForSingleObject  +
push dword ptr [esi+8]  +
call ds:CloseHandle  +
and dword ptr [esi+8] 0 +
jmp loc_100DD70  +
***
mov edi edi +
push esi  +
push edi  +
mov esi ecx +
push dword ptr [esi]  +
call off_1026660  +
push dword ptr [esi+4]  +
mov edi ds:__imp_free +
call edi  +
push dword ptr [esi+8]  +
call edi  +
push dword ptr [esi+0Ch]  +
call edi  +
push dword ptr [esi+10h]  +
call edi  +
add esp 10h +
pop edi  +
pop esi  +
retn   +
***
push dword ptr [ecx+0Ch]  +
mov dword ptr [ecx+14h] 1 +
call ds:SetEvent  +
jmp locret_100DA71  +
***
push esi  +
mov ecx esi +
call sub_1003205  +
test eax eax +
jz loc_100DAD0  +
push eax  +
mov ecx esi +
call sub_10031EA  +
jmp loc_100DAC6  +
***
mov edi edi +
push ebx  +
push esi  +
push edi  +
mov esi ecx +
xor ebx ebx +
xor edi edi +
cmp [esi+0Ch] ebx +
jbe loc_100DE2A  +
mov ecx [esi+24h] +
add ecx ebx +
call sub_100DAC1  +
inc edi  +
add ebx 10h +
cmp edi [esi+0Ch] +
jb loc_100DE17  +
and dword ptr [esi+10h] 0 +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push 1  +
call sub_100323B  +
jmp loc_1001B01  +
mov [ebp+10h] ebx +
jmp loc_10017D9  +
mov eax 80004003h +
jmp loc_1001B03  +
***
xor eax eax +
retn   +
***
mov ecx [ecx+78h] +
xor eax eax +
test ecx ecx +
jnz loc_100D923  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax ecx +
mov ecx [ebp+arg_0] +
mov [eax] ecx +
xor ecx ecx +
mov [eax+4] ecx +
mov dword ptr [eax+8] 1 +
mov [eax+0Ch] ecx +
mov [eax+10h] ecx +
mov [eax+14h] ecx +
pop ebp  +
retn 4  +
***
cmp dword ptr [ecx+8] 0 +
jz loc_100DEA5  +
mov ecx [ecx+4] +
push ecx  +
call sub_10030FD  +
retn   +
xor ecx ecx +
jmp loc_100DE9E  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi+2Ch] +
push edi  +
xor edi edi +
cmp eax edi +
jz loc_100DECB  +
push 80000000h  +
sub eax 0FFFFFF80h +
push eax  +
call sub_1003119  +
mov eax [esi+2Ch] +
cmp eax edi +
jz loc_100DEDC  +
push eax  +
call ds:UnmapViewOfFile  +
mov [esi+2Ch] edi +
push edi  +
lea ecx [esi+24h] +
call sub_1001EE0  +
push edi  +
lea ecx [esi+30h] +
call sub_1001EE0  +
push edi  +
lea ecx [esi+38h] +
call sub_1001EE0  +
push edi  +
lea ecx [esi+40h] +
call sub_1001EE0  +
push edi  +
lea ecx [esi+48h] +
call sub_1001EE0  +
push edi  +
lea ecx [esi+50h] +
call sub_1001EE0  +
pop edi  +
pop esi  +
retn   +
***
cmp dword ptr [ecx] 0 +
jz locret_100DF2F  +
push dword ptr [ecx+4]  +
call ds:GetCurrentProcess  +
push eax  +
call ds:SetPriorityClass  +
retn   +
***
mov [esi+4] ebx +
jmp loc_100DF61  +
***
mov edi edi +
push ebx  +
push esi  +
mov esi ecx +
xor ebx ebx +
cmp [esi] ebx +
jz loc_1012E1C  +
push edi  +
lea edi [esi+0Ch] +
mov ecx edi +
call sub_1001FDD  +
cmp eax ebx +
jnz loc_100DF85  +
cmp [esi+8] ebx +
jnz loc_100DF30  +
inc dword ptr [esi+4]  +
mov edx [esi] +
mov ecx [esi+4] +
mov [esi+8] ebx +
cmp ecx [edx+0Ch] +
jnb loc_100DF83  +
shl ecx 4 +
add ecx [edx+24h] +
cmp [ecx+0Ch] ebx +
jz loc_100DF55  +
mov [edi] ecx +
mov [edi+4] ecx +
mov [edi+8] ebx +
jmp loc_100DF4E  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push dword_1026104  +
call ds:SetEvent  +
cmp dword_1026664 0 +
jnz loc_10114BD  +
push 0  +
lea ecx [ebp+var_5A80] +
mov [ebp+var_5A80] offset off_1001E6C +
call sub_1001EE0  +
lea ecx [ebp+var_51B0] +
mov byte ptr [ebp+var_4] 5 +
call sub_1003290  +
mov eax [ebp+ppbc] +
mov byte ptr [ebp+var_4] 4 +
test eax eax +
jz loc_100DFDC  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
lea ecx [ebp+var_47BC] +
mov byte ptr [ebp+var_4] 3 +
call sub_100E1FF  +
lea ecx [ebp+var_5244] +
call sub_1001F05  +
lea ecx [ebp+var_5B68] +
mov byte ptr [ebp+var_4] 1 +
call sub_100E035  +
cmp [ebp+var_5B1C] 0 +
jl loc_100E014  +
call ds:CoUninitialize  +
mov ecx [ebp+var_C] +
mov large fs:0 ecx +
pop ecx  +
pop edi  +
pop esi  +
pop ebx  +
mov ecx [ebp+var_14] +
xor ecx ebp +
call sub_1001E40  +
leave   +
retn 4  +
***
call sub_1001D89  +
mov [ebp-10h] ecx +
mov dword ptr [ecx] offset off_10016D0 +
and dword ptr [ebp-4] 0 +
cmp dword ptr [ecx+4] 0 +
jnz loc_10110C3  +
or dword ptr [ebp-4] 0FFFFFFFFh +
call sub_100E06C  +
call __EH_epilog3  +
retn   +
***
call sub_1001D89  +
mov [ebp-10h] ecx +
mov dword ptr [ecx] offset off_10016F4 +
and dword ptr [ebp-4] 0 +
and dword ptr [ebp-14h] 0 +
lea esi [ecx+0Ch] +
lea eax [esi+4] +
mov [ebp-1Ch] esi +
mov [ebp-18h] eax +
lea ecx [ebp-1Ch] +
call sub_1003543  +
cmp dword ptr [eax] 0 +
jz loc_100E0BB  +
mov eax [ebp-14h] +
neg eax  +
sbb eax eax +
and eax [ebp-18h] +
push eax  +
call sub_1003527  +
mov ecx [eax] +
call sub_100DE58  +
jmp loc_100E095  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov ecx esi +
mov dword ptr [esi] offset off_1003600 +
call sub_100E0D7  +
call __EH_epilog3  +
retn   +
***
mov edi edi +
push esi  +
push edi  +
mov edi ecx +
lea esi [edi+4] +
cmp dword ptr [esi+0Ch] 0 +
jz loc_100E0FC  +
push esi  +
mov ecx esi +
call sub_1003205  +
test eax eax +
jz loc_100E0FC  +
push eax  +
mov ecx edi +
call sub_10031EA  +
jmp loc_100E0E0  +
pop edi  +
pop esi  +
retn   +
***
mov esi eax +
cmp esi ebx +
jge loc_10125CA  +
cmp esi 800705B4h +
jz loc_1012617  +
mov ecx [ebp+var_7C38] +
mov byte ptr [ebp+var_4] 0Fh +
cmp ecx ebx +
jnz loc_101261E  +
cmp esi ebx +
jge loc_100B6B4  +
xor edi edi +
cmp edi [ebp+var_7C3C] +
jnb loc_100DBA7  +
mov eax edi +
imul eax eax +
cmp [ebp+eax+var_7C2C] ebx +
jz loc_100E15A  +
lea ecx [ebp+eax+Parameter] +
call sub_100DA67  +
inc edi  +
jmp loc_100E131  +
***
call sub_1001D89  +
mov esi ecx +
lea eax [esi+28h] +
push eax  +
lea ecx [ebp-10h] +
call sub_1002059  +
xor edi edi +
push esi  +
lea ecx [ebp-28h] +
mov [ebp-4] edi +
call sub_100DE6B  +
lea ecx [ebp-28h] +
call sub_100DF3A  +
test eax eax +
jz loc_100E1A7  +
lea ecx [ebp-1Ch] +
call sub_100DE95  +
mov ecx [eax] +
call sub_100E37D  +
jmp loc_100E18A  +
mov dword ptr [ebp-20h] 1 +
mov [ebp-24h] edi +
mov [ebp-1Ch] edi +
mov [ebp-18h] edi +
mov [ebp-14h] edi +
lea ecx [ebp-28h] +
call sub_100DF3A  +
test eax eax +
jz loc_100E1DF  +
lea ecx [ebp-1Ch] +
call sub_100DE95  +
mov eax [eax] +
cmp eax edi +
jz loc_100E1BA  +
push 1  +
mov ecx eax +
call sub_100E2CE  +
jmp loc_100E1BA  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+4]  +
cmp [ebp-10h] edi +
jz loc_100E1F4  +
push dword ptr [ebp-10h]  +
call ds:LeaveCriticalSection  +
call __EH_epilog3  +
retn   +
***
mov edi edi +
push ebx  +
push esi  +
mov esi ecx +
push edi  +
mov dword ptr [esi] offset off_1002030 +
call sub_100DEAE  +
lea ecx [esi+64h] +
call sub_100E26B  +
lea ecx [esi+50h] +
xor ebx ebx +
mov edi offset off_1001E6C +
push ebx  +
mov [ecx] edi +
call sub_1001EE0  +
lea ecx [esi+48h] +
push ebx  +
mov [ecx] edi +
call sub_1001EE0  +
lea ecx [esi+40h] +
push ebx  +
mov [ecx] edi +
call sub_1001EE0  +
lea ecx [esi+38h] +
push ebx  +
mov [ecx] edi +
call sub_1001EE0  +
lea ecx [esi+30h] +
push ebx  +
mov [ecx] edi +
call sub_1001EE0  +
lea ecx [esi+24h] +
push ebx  +
mov [ecx] edi +
call sub_1001EE0  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
lea eax [esi+10h] +
push eax  +
mov dword ptr [esi] offset off_1001E9C +
call sub_1001E75  +
mov dword ptr [esi] offset off_1001D4C +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_100E2B2  +
test [ebp+arg_0] 1 +
jz loc_100E2A6  +
push esi  +
call off_1026660  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
lea eax [esi+28h] +
push eax  +
call ds:DeleteCriticalSection  +
mov ecx esi +
pop esi  +
jmp sub_100DAD7  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_100E2F4  +
test [ebp+arg_0] 1 +
jz loc_100E2E8  +
push esi  +
call off_1026660  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_1001D89  +
mov esi ecx +
mov [ebp-10h] esi +
mov dword ptr [ebp-4] 6 +
call sub_100E37D  +
mov eax [esi+78h] +
mov byte ptr [ebp-4] 5 +
test eax eax +
jnz loc_1012E39  +
mov eax [esi+74h] +
mov byte ptr [ebp-4] 4 +
test eax eax +
jnz loc_1012E44  +
mov eax [esi+70h] +
mov byte ptr [ebp-4] 3 +
test eax eax +
jnz loc_1012E4F  +
mov eax [esi+6Ch] +
mov byte ptr [ebp-4] 2 +
test eax eax +
jnz loc_1012E5A  +
mov eax [esi+68h] +
mov byte ptr [ebp-4] 1 +
test eax eax +
jnz loc_1012E65  +
mov eax [esi+64h] +
mov byte ptr [ebp-4] 0 +
test eax eax +
jnz loc_1012E70  +
mov ecx esi +
call sub_1002011  +
call __EH_epilog3  +
retn   +
***
mov edi edi +
push ebx  +
push esi  +
mov esi ecx +
lea ebx [esi+70h] +
mov eax [ebx] +
push edi  +
xor edi edi +
cmp eax edi +
jnz loc_100D8FA  +
lea ecx [esi+74h] +
cmp [ecx] edi +
jnz loc_100D90D  +
lea ecx [esi+64h] +
cmp [ecx] edi +
jnz loc_100EB05  +
lea ecx [esi+68h] +
cmp [ecx] edi +
jnz loc_100EB10  +
lea ecx [esi+6Ch] +
cmp [ecx] edi +
jnz loc_100EB1B  +
lea ecx [esi+78h] +
cmp [ecx] edi +
jnz loc_100D918  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov eax 80040DB4h +
jmp loc_1001591  +
cmp [ebp+var_4] eax +
jnb loc_1001588  +
jmp loc_1001549  +
***
mov eax 80040DB4h +
jmp loc_1003927  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
mov eax [esi] +
mov ecx [esi+4] +
mov edx eax +
or edx ecx +
jz loc_101082C  +
push ecx  +
push eax  +
call ds:EventUnregister  +
and dword ptr [esi] 0 +
and dword ptr [esi+4] 0 +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_100DAD7  +
test byte ptr [ebp+8] 1 +
jz loc_100E440  +
push esi  +
call off_1026660  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov eax eax +
retn   +
***
push offset CriticalSection  +
call ds:DeleteCriticalSection  +
retn   +
***
push offset stru_10261E8  +
call ds:DeleteCriticalSection  +
retn   +
***
push 0  +
mov ecx offset off_10260F8 +
mov off_10260F8 offset off_1001E6C +
call sub_1001EE0  +
retn   +
***
push 0  +
mov ecx offset off_1026100 +
mov off_1026100 offset off_1001E6C +
call sub_1001EE0  +
retn   +
***
push 0  +
mov ecx offset off_1026108 +
mov off_1026108 offset off_1001E6C +
call sub_1001EE0  +
retn   +
***
push 0  +
mov ecx offset off_1026110 +
mov off_1026110 offset off_1001E6C +
call sub_1001EE0  +
retn   +
***
push 0  +
mov ecx offset off_1026118 +
mov off_1026118 offset off_1001E6C +
call sub_1001EE0  +
retn   +
***
push 0  +
mov ecx offset off_1026120 +
mov off_1026120 offset off_1001E6C +
call sub_1001EE0  +
retn   +
***
push 0  +
mov ecx offset off_1026128 +
mov off_1026128 offset off_1001E6C +
call sub_1001EE0  +
retn   +
***
mov dword_1026170 offset off_1001D4C +
retn   +
***
mov dword_1026160 offset off_1001D4C +
retn   +
***
mov dword_1026150 offset off_1001D4C +
retn   +
***
mov dword_1026140 offset off_1001D4C +
retn   +
***
mov ecx offset dword_102624C +
jmp loc_100E8BC  +
***
call sub_1001D89  +
mov edi ecx +
lea eax [edi+4] +
push eax  +
lea ecx [ebp-14h] +
call sub_1002079  +
xor ebx ebx +
mov [ebp-4] ebx +
lea eax [ebp-10h] +
push eax  +
mov ecx edi +
mov [ebp-10h] ebx +
call sub_100E776  +
test eax eax +
jnz loc_100E5F5  +
mov ecx [ebp-14h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
call sub_100210C  +
call __EH_epilog3  +
retn   +
mov esi [ebp-10h] +
push 1  +
cmp [esi+14h] bl +
jnz loc_100E60B  +
mov ecx esi +
call sub_100E618  +
dec dword ptr [edi+4Ch]  +
jmp loc_100E5D1  +
call ds:Sleep  +
jmp loc_100E5F8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_100E63E  +
test [ebp+arg_0] 1 +
jz loc_100E632  +
push esi  +
call off_1026660  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
mov edi edi +
push esi  +
mov esi [ecx] +
test esi esi +
jnz loc_1010BC3  +
pop esi  +
retn   +
***
call sub_1001D89  +
mov esi ecx +
mov [ebp-10h] esi +
mov dword ptr [esi] offset off_10035BC +
mov dword ptr [ebp-4] 2 +
call sub_100DD65  +
lea ecx [esi+2E0h] +
call sub_1001F05  +
lea ecx [esi+24h] +
mov byte ptr [ebp-4] 0 +
call sub_100E6C6  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov ecx esi +
mov dword ptr [esi] offset off_10035B0 +
call sub_100EA52  +
call __EH_epilog3  +
retn   +
***
call sub_1001D89  +
mov esi ecx +
mov [ebp-10h] esi +
and dword ptr [ebp-4] 0 +
lea ecx [esi+0F8h] +
call sub_100E9C7  +
lea ecx [esi+0A8h] +
call sub_100E707  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov ecx esi +
call sub_100341D  +
call __EH_epilog3  +
retn   +
***
call sub_1001D89  +
mov esi ecx +
mov [ebp-10h] esi +
mov dword ptr [ebp-4] 1 +
call sub_100E5B2  +
lea ecx [esi+4] +
mov byte ptr [ebp-4] 0 +
call sub_100E944  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov ecx esi +
call sub_100E746  +
call __EH_epilog3  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
push edi  +
mov edi ecx +
and [ebp+var_4] 0 +
lea eax [ebp+var_4] +
push eax  +
mov ecx edi +
call sub_100E776  +
lea ecx [ebp+var_4] +
mov esi eax +
call sub_100E65C  +
test esi esi +
jnz loc_100E750  +
pop edi  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx] +
test eax eax +
jnz loc_100E787  +
xor eax eax +
pop ebp  +
retn 4  +
mov edx [eax] +
push esi  +
mov esi [eax+4] +
and dword ptr [eax+4] 0 +
push edi  +
mov edi [ebp+arg_0] +
mov [edi] esi +
and dword ptr [eax] 0 +
xor eax eax +
pop edi  +
mov [ecx] edx +
inc eax  +
pop esi  +
jmp loc_100E783  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi] +
test eax eax +
jnz loc_1013049  +
and dword ptr [esi+4] 0 +
and dword ptr [esi+8] 0 +
pop esi  +
retn   +
***
mov dword_1026180 offset off_1003574 +
mov ecx offset dword_1026180 +
jmp sub_100E800  +
***
mov edi edi +
push esi  +
mov esi ecx +
push edi  +
lea edi [esi+4] +
cmp dword ptr [edi] 0 +
jz loc_100E830  +
cmp dword ptr [esi+0Ch] 0 +
jnz loc_1010E2E  +
mov eax [esi+28h] +
test eax eax +
jnz loc_1010E3D  +
add esi 10h +
push esi  +
call ds:DeleteCriticalSection  +
and dword ptr [edi] 0 +
pop edi  +
pop esi  +
retn   +
***
mov ecx offset unk_1026268 +
jmp loc_100E844  +
mov edi edi +
push esi  +
push dword_10262CC  +
mov esi ecx +
push esi  +
call sub_100E863  +
lea ecx [esi+20h] +
pop esi  +
jmp sub_100E7CC  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
xor edi edi +
cmp esi edi +
jz loc_100E8A4  +
mov eax [esi] +
cmp eax edi +
jz loc_100E89C  +
cmp eax 2Ch +
jnz loc_100E8A4  +
cmp [esi+24h] edi +
jg sub_1013058  +
lea ecx [esi+20h] +
call sub_100E7CC  +
lea eax [esi+4] +
push eax  +
call ds:DeleteCriticalSection  +
and dword ptr [esi] 0 +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
mov eax 80070057h +
jmp loc_100E89E  +
***
mov ecx offset unk_1026230 +
jmp loc_100E8BC  +
push 4  +
mov eax offset __ehhandler$?CallUnexpected@@YAXPBU_s_ESTypeList@@@Z_21 +
call sub_1001D89  +
mov esi ecx +
mov [ebp-10h] esi +
and dword ptr [ebp-4] 0 +
call near ptr dword_100E448+4  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [esi+4] +
call sub_100E8ED  +
call __EH_epilog3  +
retn   +
***
mov eax [ecx] +
test eax eax +
jnz loc_101448F  +
retn   +
***
mov ecx offset unk_1026200 +
jmp loc_100E909  +
mov edi edi +
push esi  +
push dword_10260D8  +
mov esi ds:__imp_free +
call esi  +
push dword_10260DC  +
call esi  +
push dword_10260E4  +
call esi  +
push dword_10260E0  +
call esi  +
push dword_10260D4  +
call esi  +
add esp 14h +
pop esi  +
retn   +
***
call sub_1001D89  +
mov esi ecx +
mov [ebp-10h] esi +
mov ecx [esi+40h] +
mov dword ptr [ebp-4] 2 +
test ecx ecx +
jz loc_100E96A  +
push 1  +
call sub_100E999  +
mov ecx [esi+3Ch] +
mov byte ptr [ebp-4] 1 +
test ecx ecx +
jz loc_100E97C  +
push 1  +
call sub_100E999  +
mov edi ds:DeleteCriticalSection +
lea eax [esi+24h] +
push eax  +
call edi  +
add esi 0Ch +
push esi  +
call edi  +
call __EH_epilog3  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov eax [esi] +
test eax eax +
jz loc_100E9AE  +
push eax  +
call ds:CloseHandle  +
test [ebp+arg_0] 1 +
jz loc_100E9BB  +
push esi  +
call off_1026660  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
lea ecx [esi+1B8h] +
call sub_100E9E8  +
add esi 10h +
push esi  +
call ds:DeleteCriticalSection  +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi] +
test eax eax +
jz loc_100E9FD  +
push eax  +
call ds:__imp_FreeLibrary  +
and dword ptr [esi] 0 +
pop esi  +
retn   +
***
call sub_1001D89  +
mov esi ecx +
mov [ebp-10h] esi +
mov dword ptr [esi] offset off_10035C8 +
mov dword ptr [ebp-4] 1 +
call sub_100DA67  +
mov ecx esi +
call sub_100DD65  +
lea ecx [esi+24h] +
call sub_1002011  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov ecx esi +
mov dword ptr [esi] offset off_10035B0 +
call sub_100EA52  +
call __EH_epilog3  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
push edi  +
mov dword ptr [esi] offset off_10035A4 +
call sub_100DA67  +
mov ecx esi +
call sub_100DD65  +
mov eax [esi+0Ch] +
mov edi ds:CloseHandle +
test eax eax +
jz loc_100EA7A  +
push eax  +
call edi  +
mov esi [esi+10h] +
test esi esi +
jnz loc_1010F76  +
pop edi  +
pop esi  +
retn   +
***
add ecx 8 +
push ecx  +
call ds:InterlockedDecrement  +
retn   +
***
test esi esi +
jz loc_10035F7  +
mov eax [esi] +
push 1  +
mov ecx esi +
call dword ptr [eax+10h]  +
jmp loc_10035F7  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_100EAD9  +
test byte ptr [ebp+8] 1 +
jz loc_100EACD  +
push esi  +
call off_1026660  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_1001FC4 +
mov dword ptr [esi+4] 0C0000001h +
mov ecx dword_1026084 +
mov eax [ecx] +
call dword ptr [eax+8]  +
mov esi [esi+0Ch] +
test esi esi +
jz loc_100EB03  +
mov eax [esi] +
push esi  +
call dword ptr [eax+8]  +
pop esi  +
retn   +
***
push edi  +
call sub_1001F59  +
jmp loc_100E3A9  +
push edi  +
call sub_1001F59  +
jmp loc_100E3B4  +
push edi  +
call sub_1001F59  +
jmp loc_100E3BF  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 34h +
mov eax dword_1026044 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
mov esi ecx +
movzx eax word ptr [esi+1BAh] +
push edi  +
test al 4 +
jz loc_100EB9D  +
and eax 0FFFBh +
mov [esi+1BAh] ax +
call sub_1005457  +
cmp word ptr [esi+1A4h] 0 +
jz loc_100EF39  +
movzx edi word ptr [esi+1A6h] +
movzx ecx word ptr [esi+1B2h] +
movzx eax di +
lea edx [eax+2] +
cmp ecx edx +
jge loc_1010329  +
mov [esi+1AEh] di +
mov ax [esi+1AEh] +
mov [esi+1BEh] ax +
lea esp [ebp-40h] +
pop edi  +
pop esi  +
pop ebx  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_1001E40  +
leave   +
retn   +
***
call sub_10039ED  +
mov eax [ebp+10h] +
mov ecx [ebp+1Ch] +
mov edi [ebp+14h] +
mov ebx [ebp+8] +
mov esi [ebp+0Ch] +
mov [ebp-70h] eax +
mov eax [ebp+18h] +
mov [ebp-6Ch] ecx +
mov ecx [ebp+20h] +
mov [ebp-68h] eax +
mov [ebp-74h] ecx +
test edi edi +
jnz loc_100EBED  +
test eax eax +
jz loc_1012C7B  +
push offset dword_100EC40  +
lea ecx [ebp-64h] +
call sub_1004CF3  +
and dword ptr [ebp-4] 0 +
cmp dword ptr [ebp-68h] 0 +
jz loc_100EC15  +
mov eax [ebp-64h] +
push 0FFFFFFFFh  +
push dword ptr [ebp-58h]  +
lea ecx [ebp-64h] +
push dword ptr [ebp-68h]  +
call dword ptr [eax+10h]  +
push dword ptr [ebp-74h]  +
mov eax [esi] +
push 0  +
push ebx  +
push edi  +
push dword ptr [ebp-60h]  +
push dword ptr [ebp-6Ch]  +
push dword ptr [ebp-70h]  +
push esi  +
call dword ptr [eax+0Ch]  +
lea ecx [ebp-64h] +
mov esi eax +
call sub_1002011  +
mov eax esi +
call sub_1003A2A  +
retn 1Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
mov esi ecx +
push edi  +
xor ebx ebx +
lea edi [esi+9BCh] +
mov ecx edi +
mov [ebp+var_4] ebx +
call sub_10058BF  +
mov [ebp+var_8] 2 +
test ebx ebx +
jl loc_100EC95  +
push 1  +
push 0  +
push [ebp+var_4]  +
mov ecx esi +
call sub_1005AED  +
mov ebx eax +
test ebx ebx +
jl loc_100EC95  +
push [ebp+arg_4]  +
mov ecx esi +
push [ebp+arg_0]  +
call sub_1005BC5  +
mov ebx eax +
mov eax [edi] +
mov ecx edi +
mov [ebp+var_4] eax +
call sub_10058DD  +
dec [ebp+var_8]  +
jnz loc_100EC6E  +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
lea eax [ecx+10h] +
cmp [ecx+4] eax +
jnz loc_1010B45  +
pop ebp  +
retn 4  +
***
mov eax [ebp+var_5AA8] +
cmp eax 80041705h +
jz loc_1002C32  +
cmp eax 80041701h +
jz loc_1002C32  +
jmp loc_1011E7B  +
***
call sub_10039ED  +
mov eax [ebp+18h] +
mov edi [ebp+8] +
mov edx [ebp+10h] +
mov ecx [ebp+14h] +
mov esi [ebp+0Ch] +
mov [ebp-434h] eax +
mov eax [ebp+1Ch] +
xor ebx ebx +
mov [ebp-444h] edx +
mov [ebp-430h] ecx +
mov [ebp-438h] eax +
cmp edi ebx +
jz loc_100EEC3  +
cmp esi ebx +
jz loc_100EEC3  +
cmp eax ebx +
jz loc_100EEC3  +
cmp ecx ebx +
jz loc_100EEC3  +
cmp edx ebx +
jz loc_100EEC3  +
lea ecx [ebp-0C8h] +
call sub_1001DF9  +
lea ecx [ebp-64h] +
mov [ebp-4] ebx +
call sub_1001DF9  +
mov eax [ebp-5Ch] +
lea ecx [ebp-74h] +
push ecx  +
mov [ebp-440h] eax +
mov eax [esi] +
push esi  +
mov byte ptr [ebp-4] 1 +
call dword ptr [eax+14h]  +
cmp eax ebx +
jge loc_1012CFF  +
mov [ebp-42Ch] ebx +
mov [ebp-428h] ebx +
lea ecx [ebp-424h] +
call sub_1001FA5  +
mov eax [esi] +
lea ecx [ebp-428h] +
push ecx  +
push offset loc_1006DE8  +
push esi  +
mov byte ptr [ebp-4] 3 +
call dword ptr [eax]  +
cmp eax ebx +
jl loc_100EE1B  +
lea eax [ebp-424h] +
push eax  +
push offset loc_100EF30  +
push dword ptr [ebp-428h]  +
call sub_100EECF  +
push ebx  +
lea ecx [ebp-290h] +
call sub_10040E1  +
push 0FFFFFFFFh  +
push dword ptr [ebp-420h]  +
lea ecx [ebp-290h] +
mov byte ptr [ebp-4] 4 +
call sub_100537D  +
lea eax [ebp-450h] +
push eax  +
lea ecx [ebp-290h] +
call sub_100F026  +
cmp [eax+4] ebx +
jnz loc_1012D0D  +
lea ecx [ebp-290h] +
mov byte ptr [ebp-4] 3 +
call sub_10030C1  +
cmp [ebp-0BCh] ebx +
jnz loc_100EE4D  +
lea eax [ebp-450h] +
lea ecx [edi+41Ch] +
push eax  +
call sub_100F026  +
push eax  +
lea ecx [ebp-0C8h] +
call sub_1007886  +
cmp [ebp-0BCh] ebx +
jz loc_1012D30  +
push dword ptr [ebp-438h]  +
mov eax [ebp-58h] +
mov ecx [ebp-434h] +
mov ecx [ecx+4] +
push ecx  +
push dword ptr [ebp-0C4h]  +
neg eax  +
sbb eax eax +
and eax [ebp-60h] +
push eax  +
push dword ptr [ebp-430h]  +
push dword ptr [ebp-444h]  +
push dword ptr [ebp-42Ch]  +
call sub_100EBB4  +
lea ecx [ebp-424h] +
mov esi eax +
call sub_10030A0  +
mov eax [ebp-428h] +
mov byte ptr [ebp-4] 1 +
cmp eax ebx +
jz loc_100EEA6  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
lea ecx [ebp-64h] +
call sub_1002011  +
lea ecx [ebp-0C8h] +
call sub_1002011  +
mov eax esi +
call sub_1003A2A  +
retn 18h  +
mov eax 80004003h +
jmp loc_100EEBB  +
***
call sub_1004DD8  +
mov esi [ebp+10h] +
mov edi [esi+8] +
xor ebx ebx +
push ebx  +
mov ecx esi +
mov [ebp-4] ebx +
call sub_1004BD7  +
lea ecx [ebp-14h] +
push ecx  +
push edi  +
push eax  +
push dword ptr [ebp+8]  +
call dword ptr [ebp+0Ch]  +
mov edi eax +
cmp edi 8007007Ah +
jz loc_1012CAB  +
cmp edi ebx +
jge loc_1012CD3  +
or dword ptr [ebp-4] 0FFFFFFFFh +
test edi edi +
jge loc_100EF21  +
push 0  +
mov ecx esi +
call sub_1003E02  +
mov eax edi +
call __EH_epilog3  +
retn 0Ch  +
***
mov eax [esp+4] +
mov eax [eax] +
jmp dword ptr [eax+40h]  +
***
movzx eax word ptr [esi+1B2h] +
movzx ebx word ptr [esi+1A6h] +
and [ebp+var_C] 0 +
mov [ebp+var_14] eax +
movzx eax ax +
movzx edi bx +
mov [ebp+var_8] eax +
cmp edi eax +
jnb loc_100EF9F  +
mov eax [esi+14h] +
lea eax [eax+edi*2] +
mov [ebp+var_10] eax +
mov eax [ebp+var_10] +
movzx eax word ptr [eax] +
push eax  +
call sub_1003D6C  +
test eax eax +
jnz loc_10133DB  +
mov eax [ebp+var_C] +
cmp eax 4 +
jz loc_10133F7  +
cmp eax 5 +
jz loc_10103B9  +
cmp eax 3 +
jz loc_10103B9  +
cmp eax 6 +
jz loc_10133FC  +
movzx edi word ptr [esi+1A6h] +
movzx eax di +
lea ecx [eax+2] +
mov [esi+1AEh] di +
cmp [ebp+var_8] ecx +
jb loc_100EFCF  +
mov ebx [esi+14h] +
lea ebx [ebx+eax*2] +
movzx eax word ptr [ebx] +
push eax  +
call sub_1003D6C  +
test eax eax +
jnz loc_101340B  +
xor eax eax +
mov [esi+1ACh] ax +
mov [esi+1A8h] ax +
jmp loc_100EB9D  +
***
mov edi edi +
push esi  +
mov esi ecx +
lea ecx [esi+1BAh] +
movzx eax word ptr [ecx] +
test al 8 +
jz loc_100F01F  +
and eax 0FFF7h +
mov [ecx] ax +
mov ecx esi +
call sub_100EB2B  +
mov ax [esi+1B2h] +
sub ax [esi+1AEh] +
mov [esi+1B0h] ax +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_100F05B  +
movzx eax word ptr [esi+1B8h] +
push eax  +
movzx eax word ptr [esi+1B6h] +
push eax  +
push [ebp+arg_0]  +
lea ecx [esi+10h] +
call sub_1004123  +
mov eax [ebp+arg_0] +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push esi  +
mov esi ecx +
lea ecx [esi+1BAh] +
movzx eax word ptr [ecx] +
test al 10h +
jz loc_100F0DD  +
and eax 0FFEFh +
mov [ecx] ax +
push edi  +
mov ecx esi +
call sub_100EFE9  +
movzx eax word ptr [esi+1B0h] +
push eax  +
movzx eax word ptr [esi+1AEh] +
push eax  +
lea eax [ebp+var_C] +
push eax  +
lea ecx [esi+10h] +
call sub_1004123  +
push 2Eh  +
lea ecx [ebp+var_C] +
call sub_100F0E5  +
mov edi eax +
cmp edi 0FFFFFFFFh +
jz loc_100F0DC  +
inc edi  +
push edi  +
lea ecx [ebp+var_C] +
call sub_10055B2  +
cmp eax 0FFFFFFFFh +
jnz loc_100F0DC  +
mov ax [esi+1AEh] +
add ax di +
mov [esi+1B6h] ax +
mov eax [ebp+var_8] +
sub eax edi +
mov [esi+1B8h] ax +
pop edi  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ecx] +
mov eax [ecx+4] +
lea eax [eax+edx-1] +
cmp eax edx +
jb loc_100F112  +
push esi  +
test eax eax +
jl loc_100F111  +
mov esi [ecx+8] +
mov esi [esi+4] +
mov si [esi+eax*2] +
cmp si [ebp+arg_0] +
jz loc_100F111  +
dec eax  +
cmp eax edx +
jnb loc_100F0F8  +
pop esi  +
sub eax edx +
pop ebp  +
retn 4  +
***
push [ebp+pv]  +
lea ecx [ebp+var_51B0] +
call sub_10067F2  +
add [ebp+var_5AC4] eax +
adc [ebp+var_5AC0] 0 +
jmp loc_1006A5B  +
cmp [ebp+var_4468] esi +
jnz loc_1006748  +
cmp [ebp+var_4464] esi +
jz loc_1006748  +
jmp loc_1011EAD  +
cmp [ebp+var_5ACC] 0 +
jz loc_1006BB4  +
jmp loc_1006CE0  +
***
xor ebx ebx +
xor edi edi +
cmp [esi+8] ebx +
jbe loc_10062AC  +
test eax eax +
jl loc_10062AC  +
mov eax [esi+0Ch] +
mov ecx [ebp+var_4] +
add eax ebx +
push eax  +
call sub_1006212  +
inc edi  +
add ebx 10h +
cmp edi [esi+8] +
jb loc_100F177  +
jmp loc_10062AC  +
***
xor eax eax +
cmp [esi+0Ch] ebx +
jz loc_10063AB  +
xor edi edi +
cmp [esi+8] ebx +
jbe loc_10063AB  +
test eax eax +
jnz loc_10063AB  +
mov eax [esi+0Ch] +
add eax ebx +
push eax  +
call sub_1006369  +
inc edi  +
add ebx 10h +
cmp edi [esi+8] +
jb loc_100F1B1  +
jmp loc_10063AB  +
***
mov ecx ebx +
call sub_10044CE  +
mov [ebp-18h] eax +
jmp loc_1005A15  +
***
sub esi edi +
add esi [ebp-14h] +
jmp loc_1005A0C  +
***
xor esi esi +
jmp loc_10059E3  +
***
dec eax  +
jmp loc_1005985  +
***
mov eax [ebp+8] +
mov ecx [ebp-8] +
push dword ptr [ebp-4]  +
add ecx eax +
mov eax [ebx+2Ch] +
push ecx  +
lea eax [esi+eax+98h] +
push eax  +
call memcpy  +
add esp 0Ch +
add esi [ebp-4] +
jmp loc_10059F0  +
***
sub eax edi +
mov [ebp-10h] eax +
jmp loc_10059B7  +
***
mov eax [ebp-8] +
push dword ptr [ebp-10h]  +
add edi eax +
add edi [ebp+8] +
mov eax [ebx+2Ch] +
add eax 98h +
push edi  +
push eax  +
call memcpy  +
add esp 0Ch +
add esi [ebp-10h] +
jmp loc_10059ED  +
***
push 19h  +
push 0  +
lea eax [ebp+var_5B08] +
push eax  +
lea ecx [ebp+var_4704] +
call sub_1004123  +
push offset aMultipartXMixe  +
lea ecx [ebp+var_5B08] +
call sub_10051B1  +
test eax eax +
jnz loc_100268D  +
jmp loc_101177A  +
***
cmp [ebp+var_5A5C] 80040D16h +
jnz loc_100F770  +
cmp [ebp+var_5A60] edi +
jz loc_1011C5C  +
mov eax [ebp+var_5AA4] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+1Ch]  +
cmp eax 1 +
jnz loc_1002A5B  +
cmp [ebp+var_5AA8] edi +
jz loc_100F3AA  +
push [ebp+var_5A5C]  +
call sub_100F410  +
jmp loc_1002A5B  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi] +
test eax eax +
jz loc_100F31C  +
push eax  +
call ds:__imp_FreeLibrary  +
mov esi [esi+4] +
test esi esi +
jz loc_100F329  +
push esi  +
call sub_100F330  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:__imp_FreeLibrary  +
***
mov ecx offset dword_1026130 +
jmp sub_100F30A  +
***
mov ecx offset dword_1026138 +
jmp sub_100F30A  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1Ch +
push ebx  +
push esi  +
mov esi ds:PeekMessageW +
push edi  +
xor ebx ebx +
push 6  +
pop ecx  +
xor eax eax +
lea edi [ebp+Msg.message] +
mov [ebp+Msg.hwnd] ebx +
stos   +
push 1  +
push ebx  +
push ebx  +
push ebx  +
lea eax [ebp+Msg] +
push eax  +
call esi  +
test eax eax +
jnz loc_10144A4  +
xor al al +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
cmp ebx edi +
jnz sub_1011C25  +
mov [ebp+var_5A5C] 80040D16h +
jmp loc_1002A01  +
cmp [ebp+var_5AB8] edi +
jnz loc_100F2F5  +
jmp loc_1002A5B  +
cmp esi 80004001h +
jz loc_100281E  +
jmp loc_1011892  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ebp+18h] 0 +
jz loc_1012D91  +
mov eax [ebp+8] +
mov eax [eax+0Ch] +
test eax eax +
jz loc_1012D9B  +
push dword ptr [ebp+18h]  +
push offset byte_1004260  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push 0  +
push eax  +
push dword ptr [ebp+0Ch]  +
call sub_100EBB4  +
pop ebp  +
retn 14h  +
***
call sub_10039ED  +
and [ecx+547D1CF2h] dh +
call sub_10039ED  +
mov edi ecx +
lea esi [edi+10h] +
push esi  +
push 401h  +
mov [ebp-54h] edi +
call sub_1001DCE  +
xor ebx ebx +
cmp dword ptr [ebp+8] 8000FFFFh +
mov [ebp-4] ebx +
mov dword ptr [edi] offset off_1003AC8 +
jz loc_10135A1  +
cmp [ebp+0Ch] ebx +
jz loc_1013626  +
mov ecx [ebp+8] +
mov eax ecx +
sar eax 10h +
and eax 1FFFh +
mov esi 400h +
cmp eax 7 +
jz loc_10135AD  +
cmp eax 4 +
jnz loc_100F789  +
push ecx  +
call sub_100F801  +
push ebx  +
push esi  +
test eax eax +
lea eax [edi+10h] +
push eax  +
push ebx  +
push dword ptr [ebp+8]  +
push 800h  +
jnz loc_100FFFD  +
mov ecx edi +
call sub_100F83A  +
mov ecx eax +
call sub_100F7B2  +
cmp eax ebx +
jz loc_100F792  +
xor ecx ecx +
mov [edi+810h] cx +
lea ecx [edi+10h] +
cmp [ecx] bx +
jz loc_100F5B5  +
cmp word ptr [ecx] 0Dh +
jz loc_100F81F  +
cmp word ptr [ecx] 0Ah +
jz loc_100F82A  +
inc ecx  +
inc ecx  +
jmp loc_100F598  +
push eax  +
mov ecx edi +
call sub_1003E02  +
push 10h  +
push dword ptr [ebp+8]  +
lea ecx [ebp-50h] +
call sub_100F662  +
mov eax [edi] +
push 0FFFFFFFFh  +
push dword ptr [edi+0Ch]  +
mov ecx edi +
push offset aHresult0x  +
mov byte ptr [ebp-4] 1 +
call dword ptr [eax+10h]  +
mov eax [edi] +
push 0FFFFFFFFh  +
push dword ptr [edi+0Ch]  +
mov ecx edi +
push dword ptr [ebp-4Ch]  +
call dword ptr [eax+10h]  +
mov eax [edi] +
push 0FFFFFFFFh  +
push dword ptr [edi+0Ch]  +
mov ecx edi +
push offset dword_100F61C  +
call dword ptr [eax+10h]  +
lea ecx [ebp-50h] +
call sub_100F641  +
xor eax eax +
mov [edi+810h] ax +
mov eax edi +
call sub_1003A2A  +
retn 8  +
***
mov edi edi +
push esi  +
mov esi ecx +
lea eax [esi+10h] +
push eax  +
mov dword ptr [esi] offset off_1003A78 +
call sub_1001E75  +
mov dword ptr [esi] offset off_1001D4C +
pop esi  +
retn   +
***
call sub_1001D89  +
mov esi ecx +
mov [ebp-10h] esi +
lea eax [esi+10h] +
push eax  +
push 18h  +
call sub_1001DCE  +
push dword ptr [ebp+0Ch]  +
and dword ptr [ebp-4] 0 +
push dword ptr [ebp+8]  +
mov ecx esi +
mov dword ptr [esi] offset off_1003A78 +
call sub_100F6A4  +
mov eax esi +
call __EH_epilog3  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
sub esp 20h +
push esi  +
mov esi ecx +
lea ecx [eax-0Ah] +
push edi  +
cmp ecx 1Ah +
ja loc_101357C  +
push eax  +
push 18h  +
lea edi [esi+10h] +
push edi  +
push [ebp+arg_0]  +
call _itow_s  +
add esp 10h +
push 17h  +
mov ecx esi +
call sub_1003E02  +
mov eax edi +
lea ecx [eax+2] +
mov dx [eax] +
inc eax  +
inc eax  +
test dx dx +
jnz loc_100F6DF  +
sub eax ecx +
sar eax 1 +
push eax  +
mov ecx esi +
call sub_1003E02  +
pop edi  +
mov eax esi +
pop esi  +
leave   +
retn 8  +
***
cmp eax 80041205h +
jz loc_1011C79  +
push eax  +
call sub_10066ED  +
test eax eax +
jz loc_1002A4F  +
jmp loc_1011C98  +
***
mov eax [ebp-1Ch] +
mov ecx [eax] +
lea edx [ebp-18h] +
push edx  +
push eax  +
call dword ptr [ecx+14h]  +
test eax eax +
jl loc_1005D12  +
push dword ptr [ebp-18h]  +
call ds:SysStringLen  +
mov [ebp-10h] eax +
mov eax 3E8h +
cmp [ebp-10h] eax +
jbe loc_1005D12  +
jmp loc_1012AF8  +
push dword ptr [ebp-10h]  +
push dword ptr [ebp-18h]  +
jmp loc_1005D57  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_1005D93  +
***
cmp [ebp+var_5A60] edi +
jnz loc_100F2D4  +
jmp loc_1011CA8  +
***
cmp eax 65h +
jz loc_101360B  +
push ebx  +
push esi  +
lea eax [edi+10h] +
push eax  +
push esi  +
push dword ptr [ebp+8]  +
push ebx  +
push 1000h  +
call ds:FormatMessageW  +
jmp loc_100F5BD  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi ds:FormatMessageW +
mov ebx ecx +
xor ecx ecx +
push edi  +
mov edi [ebp+lpBuffer] +
mov [edi] cx +
mov ecx [ebx+4] +
xor eax eax +
test ecx ecx +
jz loc_100F7F1  +
push [ebp+Arguments]  +
push [ebp+nSize]  +
push edi  +
push [ebp+dwLanguageId]  +
push [ebp+dwMessageId]  +
push ecx  +
push [ebp+dwFlags]  +
call esi  +
test eax eax +
jz loc_100F7F1  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 18h  +
mov ebx [ebx] +
test ebx ebx +
jz loc_100F7EA  +
jmp loc_1013564  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
and eax 0FFFFh +
cmp eax 1600h +
jge loc_100FFEA  +
xor eax eax +
pop ebp  +
retn 4  +
***
push 20h  +
pop edx  +
mov [ecx] dx +
jmp loc_100F5A7  +
push 20h  +
pop edx  +
mov [ecx] dx +
jmp loc_100F5B1  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 94h +
test byte ptr dword_10260C0 1 +
jz loc_100F9FE  +
cmp dword_10260BC 0 +
push esi  +
mov esi offset dword_1026130 +
jz loc_100FA93  +
mov eax esi +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_100F30A  +
push 2  +
push 0  +
push [ebp+lpLibFileName]  +
call ds:LoadLibraryExW  +
push 0  +
push 8  +
push [ebp+lpLibFileName]  +
mov [esi] eax +
call sub_100F8BC  +
mov [esi+4] eax +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 428h +
mov eax dword_1026044 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
xor ebx ebx +
mov [ebp+lpLibFileName] esi +
mov [ebp+FilePart] ebx +
cmp esi ebx +
jz loc_100F945  +
test [ebp+arg_4] 0FFFFFFE3h +
jnz loc_100F945  +
push edi  +
mov edi dword ptr [ebp+wLanguage] +
cmp di bx +
jnz loc_100F900  +
test byte ptr [ebp+arg_4] 10h +
jnz loc_100F949  +
call sub_100F952  +
mov dword_10260D0 eax +
movzx eax al +
and eax 20h +
or eax 2 +
push eax  +
push 0  +
push esi  +
call ds:LoadLibraryExW  +
mov [ebp+hModule] eax +
test eax eax +
jz loc_100F949  +
test byte ptr dword_10260D0 20h +
jz loc_10147E7  +
pop edi  +
mov ecx [ebp+var_4] +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1001E40  +
leave   +
retn 0Ch  +
xor eax eax +
jmp loc_100F935  +
xor eax eax +
jmp loc_100F934  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 120h +
mov eax dword_1026044 +
xor eax ebp +
mov [ebp+var_4] eax +
push edi  +
xor edi edi +
cmp dword_10260CC edi +
jnz loc_100F9DD  +
push esi  +
mov esi 11Ch +
push esi  +
lea eax [ebp+VersionInformation] +
push edi  +
push eax  +
call memset  +
add esp 0Ch +
lea eax [ebp+VersionInformation] +
mov [ebp+VersionInformation.dwOSVersionInfoSize] esi +
mov esi ds:GetVersionExW +
push eax  +
call esi  +
test eax eax +
jz loc_1014735  +
mov eax [ebp+VersionInformation.dwPlatformId] +
dec eax  +
mov dword_10260CC edi +
pop esi  +
jz loc_100F9EF  +
dec eax  +
jnz loc_100F9DD  +
cmp [ebp+VersionInformation.dwMajorVersion] 5 +
jz loc_101474D  +
cmp [ebp+VersionInformation.dwMajorVersion] 4 +
jbe loc_10147AB  +
mov dword_10260CC 20h +
mov ecx [ebp+var_4] +
mov eax dword_10260CC +
xor ecx ebp +
pop edi  +
call sub_1001E40  +
leave   +
retn   +
cmp [ebp+VersionInformation.dwMajorVersion] 4 +
jz loc_10147BA  +
jmp loc_100F9DD  +
***
or dword_10260C0 1 +
and dword_1026130 0 +
and dword_1026134 0 +
push offset sub_100F341  +
call sub_100814C  +
pop ecx  +
jmp loc_100F852  +
***
cmp dword ptr [ebp-228h] 7 +
jz loc_10083DD  +
cmp dword ptr [ebp-228h] 2 +
jz loc_10083DD  +
jmp loc_1013890  +
push 0  +
jmp loc_1008451  +
cmp eax ecx +
jz loc_1013893  +
mov ecx [ebp-224h] +
mov esi 104h +
push esi  +
call sub_1004BD7  +
push esi  +
push eax  +
lea eax [ebp-21Ch] +
push eax  +
call ds:ExpandEnvironmentStringsW  +
lea ecx [eax-1] +
mov [ebp-220h] eax +
cmp ecx 102h +
ja loc_10138F1  +
add eax eax +
mov [ebp-220h] eax +
jmp loc_1008425  +
***
push offset aTquery_dll  +
lea ecx [ebp+var_94] +
call sub_100FACC  +
push dword ptr [eax+4]  +
mov ecx esi +
call sub_100F887  +
lea ecx [ebp+var_94] +
call sub_1001F05  +
mov dword_10260BC 1 +
jmp loc_100F865  +
***
call sub_1004BF8  +
mov edi [ebp+8] +
mov esi ecx +
mov [ebp-0B8h] esi +
call sub_1003DBC  +
and dword ptr [ebp-4] 0 +
push 20019h  +
lea ecx [ebp-0B4h] +
mov dword ptr [esi] offset off_1001E50 +
mov byte ptr [ebp-4] 1 +
call sub_100824A  +
push esi  +
push offset aInstalldirecto  +
lea ecx [ebp-0B4h] +
mov byte ptr [ebp-4] 2 +
call sub_1008357  +
push esi  +
test eax eax +
jz loc_1014335  +
call sub_10081B9  +
mov eax [esi] +
push 0FFFFFFFFh  +
push dword ptr [esi+0Ch]  +
mov ecx esi +
push offset byte_1004260  +
call dword ptr [eax+10h]  +
push esi  +
call sub_10081B9  +
mov eax [esi] +
push 0FFFFFFFFh  +
push dword ptr [esi+0Ch]  +
mov ecx esi +
push edi  +
call dword ptr [eax+10h]  +
lea ecx [ebp-0B4h] +
mov byte ptr [ebp-4] 1 +
call sub_100341D  +
mov eax esi +
call sub_1004C38  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
lea eax [ecx+10h] +
push eax  +
push 100000h  +
push 400h  +
push dword ptr [ebp+8]  +
call sub_1004AD5  +
pop ebp  +
retn 4  +
***
push esi  +
lea ecx [ebp+var_5A58] +
call sub_1003E02  +
jmp loc_1002F04  +
mov eax ebx +
jmp loc_1002E26  +
***
lea eax [ebp-7Ch] +
push eax  +
call sub_100FBDD  +
jmp loc_1006638  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
movzx eax word ptr [ecx] +
cmp eax 12h +
jg loc_100FC1E  +
jz loc_100FC18  +
dec eax  +
dec eax  +
jz loc_100FC12  +
dec eax  +
jnz loc_1014121  +
mov eax [ecx+8] +
cdq   +
push esi  +
push 14h  +
pop esi  +
mov [ecx] si +
mov [ecx+8] eax +
mov [ecx+0Ch] edx +
pop esi  +
xor eax eax +
pop ebp  +
retn 4  +
movsx eax word ptr [ecx+8] +
jmp loc_100FBFD  +
movzx eax word ptr [ecx+8] +
jmp loc_100FBFD  +
sub eax 13h +
jnz loc_1014148  +
jmp loc_100FBFA  +
***
dec eax  +
jz loc_100FBFA  +
jmp loc_100FC0C  +
***
mov [ecx+eax*4+14h] edx +
inc eax  +
jmp loc_100173F  +
***
mov ecx [ebp-14h] +
jmp loc_1005953  +
***
mov ecx ebx +
call sub_100FC5C  +
mov [ebp-18h] eax +
test eax eax +
jge loc_1005A15  +
jmp loc_1005A1F  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
push edi  +
mov esi ecx +
push dword ptr [esi+3Ch]  +
call sub_1001709  +
mov [ebp+nCount] eax +
mov eax [esi+60h] +
mov ecx 2710h +
mov ebx ecx +
cmp eax 0FFFFFFFFh +
jnz loc_1013D3C  +
and [ebp+var_4] 0 +
lea edi [esi+14h] +
push 0  +
push edi  +
push [ebp+nCount]  +
mov eax ebx +
call sub_10013E1  +
mov ecx [esi+2Ch] +
test dword ptr [ecx+80h] 80000000h +
jz loc_100FCBF  +
cmp eax 102h +
jz loc_1013D4B  +
push eax  +
call sub_10049CB  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
mov eax 80040DB4h +
jmp loc_100FCBA  +
***
add eax ecx +
jmp loc_1001C8E  +
mov eax [ebp+var_4] +
mov ebx ecx +
sub ebx esi +
cmp ebx eax +
jnb loc_100FD35  +
sub eax ebx +
mov [ebp+var_10] eax +
test ebx ebx +
jz loc_100FD07  +
mov eax [edi+2Ch] +
mov ecx [ebp+arg_0] +
lea eax [esi+eax+98h] +
push ebx  +
push eax  +
mov eax [ebp+var_8] +
add eax ecx +
push eax  +
call memcpy  +
add esi ebx +
add esp 0Ch +
cmp esi [ebp+var_18] +
jnz loc_100FD07  +
xor esi esi +
cmp [ebp+var_10] 0 +
jz loc_100FD2D  +
mov eax [edi+2Ch] +
push [ebp+var_10]  +
add eax 98h +
push eax  +
mov eax [ebp+var_8] +
add ebx eax +
add ebx [ebp+arg_0] +
push ebx  +
call memcpy  +
add esp 0Ch +
add esi [ebp+var_10] +
mov ebx [ebp+var_1C] +
jmp loc_1001CCB  +
and [ebp+var_10] 0 +
mov ebx eax +
jmp loc_100FCDD  +
sub esi ebx +
jmp loc_1001CEA  +
***
test edi 1000h +
jz loc_1007D94  +
mov eax [esi+8] +
xor ecx ecx +
cmp eax ebx +
jbe loc_1007D94  +
mov esi [esi+0Ch] +
cmp [esi] ebx +
jnz loc_1006943  +
jmp loc_100FD7B  +
inc ecx  +
add esi 4 +
cmp ecx eax +
jnb loc_1007D94  +
jmp loc_1007903  +
inc ecx  +
add esi 4 +
cmp ecx eax +
jnb loc_1007D94  +
jmp loc_100FD60  +
mov eax [esi+8] +
call sub_101876B  +
jmp loc_1006946  +
***
xor eax eax +
inc eax  +
jmp loc_10063AB  +
push dword ptr [esi+8]  +
call sub_1006369  +
jmp loc_10063AB  +
***
movzx eax word ptr [esi] +
sub eax 1Eh +
jz loc_100FDFB  +
sub eax 0FEEh +
jnz loc_100FF40  +
cmp [esi+0Ch] ebx +
jz loc_100FF69  +
cmp [esi+8] ebx +
jbe loc_100635A  +
and [ebp+8] ebx +
test edi edi +
jl loc_100635A  +
mov eax [esi+0Ch] +
push dword ptr [ebp+0Ch]  +
add eax [ebp+8] +
push eax  +
call sub_1006331  +
add dword ptr [ebp+8] 10h +
inc ebx  +
mov edi eax +
cmp ebx [esi+8] +
jb loc_100FDD3  +
jmp loc_100635A  +
mov eax [esi+8] +
cmp eax ebx +
jz loc_100FF69  +
lea ecx [ebp+8] +
push ecx  +
push eax  +
push dword ptr [ebp+0Ch]  +
mov [ebp+8] ebx +
call sub_100FE4D  +
mov edi eax +
cmp edi ebx +
jl loc_100FE3A  +
push esi  +
call ds:PropVariantClear  +
mov edi eax +
cmp edi ebx +
jl loc_100FE3A  +
push 1Fh  +
pop eax  +
mov [esi] ax +
mov eax [ebp+8] +
mov [ebp+8] ebx +
mov [esi+8] eax +
xor edi edi +
cmp [ebp+8] ebx +
jz loc_100635A  +
jmp loc_10142EB  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
xor esi esi +
push edi  +
cmp [ebp+lpMultiByteStr] esi +
jz loc_100FEEE  +
cmp [ebp+arg_8] esi +
jz loc_100FEEE  +
cmp [ebp+CodePage] esi +
jnz loc_101416A  +
mov eax [ebp+lpMultiByteStr] +
lea ecx [eax+1] +
mov dl [eax] +
inc eax  +
test dl dl +
jnz loc_100FE7A  +
sub eax ecx +
lea ebx [eax+1] +
push 0Ah  +
pop ecx  +
xor edx edx +
mov eax ebx +
div  ecx +
mov edi eax +
add edi ebx +
lea eax [edi+edi] +
push eax  +
call ds:CoTaskMemAlloc  +
mov [ebp+pv] eax +
cmp eax esi +
jz loc_1014183  +
push edi  +
push eax  +
push ebx  +
push [ebp+lpMultiByteStr]  +
push esi  +
push [ebp+CodePage]  +
mov esi ds:MultiByteToWideChar +
call esi  +
test eax eax +
jz loc_101418D  +
and [ebp+var_4] 0 +
mov eax [ebp+pv] +
mov ecx [ebp+arg_8] +
and [ebp+pv] 0 +
mov [ecx] eax +
cmp [ebp+pv] 0 +
jnz loc_1014214  +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
cmp [ebp+var_4] 0 +
jge loc_100FEC6  +
jmp loc_100FED2  +
mov eax 80004003h +
jmp loc_100FEDF  +
***
xor ebx ebx +
cmp [esi+8] ebx +
jbe loc_1006865  +
mov [ebp+arg_0] ebx +
jmp loc_100FF20  +
mov edi [esi+8] +
add edi 10h +
jmp loc_1006856  +
xor ebx ebx +
cmp [esi+8] ebx +
ja loc_1012842  +
jmp loc_1006865  +
mov eax [esi+0Ch] +
add eax [ebp+arg_0] +
mov ecx [ebp+var_4] +
push eax  +
call sub_10067F2  +
add [ebp+arg_0] 10h +
add edi eax +
inc ebx  +
cmp ebx [esi+8] +
jb loc_100FF20  +
jmp loc_1006865  +
***
sub eax 12h +
jnz loc_101422C  +
cmp [esi+0Ch] ebx +
jz loc_100FF69  +
mov [ebp+8] ebx +
cmp [esi+8] ebx +
jbe loc_100FFDB  +
mov ebx ds:CoTaskMemFree +
jmp loc_100FF73  +
mov edi 80004003h +
jmp loc_100FFC6  +
mov edi 80004003h +
jmp loc_100635A  +
test edi edi +
jl loc_100635A  +
mov eax [esi+0Ch] +
mov ecx [ebp+8] +
lea eax [eax+ecx*4] +
cmp dword ptr [eax] 0 +
jz loc_100FF62  +
and dword ptr [ebp-10h] 0 +
lea ecx [ebp-10h] +
push ecx  +
push dword ptr [eax]  +
push dword ptr [ebp+0Ch]  +
call sub_100FE4D  +
mov edi eax +
test edi edi +
jl loc_100FFBC  +
mov eax [esi+0Ch] +
mov ecx [ebp+8] +
push dword ptr [eax+ecx*4]  +
call ebx  +
mov eax [ebp-10h] +
mov ecx [esi+0Ch] +
mov edx [ebp+8] +
and dword ptr [ebp-10h] 0 +
mov [ecx+edx*4] eax +
cmp dword ptr [ebp-10h] 0 +
jnz loc_10142E1  +
inc dword ptr [ebp+8]  +
mov eax [ebp+8] +
cmp eax [esi+8] +
jb loc_100FF73  +
test edi edi +
jl loc_100635A  +
xor ebx ebx +
mov eax 101Fh +
mov [esi] ax +
xor edi edi +
jmp loc_100635A  +
***
cmp eax 1850h +
jg loc_100F819  +
xor eax eax +
inc eax  +
jmp loc_100F81B  +
***
call sub_101000C  +
jmp loc_100F57D  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 94h +
test byte ptr dword_10260C8 1 +
jz loc_1010406  +
cmp dword_10260C4 0 +
push esi  +
mov esi offset dword_1026138 +
jz loc_101042B  +
mov eax esi +
pop esi  +
leave   +
retn   +
***
cmp eax ebx +
jge loc_10054C3  +
cmp eax 0FFFFFFFFh +
jz loc_10054C3  +
jmp loc_10054C1  +
mov ax [esi+1Ch] +
sub ax bx +
mov [esi+1B2h] bx +
mov [esi+1B4h] ax +
jmp loc_10054D7  +
***
mov edi [edi+14h] +
cmp edi ebx +
jz loc_101096A  +
xor eax eax +
cmp ax [edi] +
jnz loc_10068B8  +
jmp loc_101096A  +
***
mov eax [ebp-64h] +
push 0FFFFFFFFh  +
push ebx  +
push dword ptr [esi+24h]  +
lea ecx [ebp-64h] +
call dword ptr [eax+10h]  +
jmp loc_1006025  +
lea eax [ebp-64h] +
push eax  +
mov ecx edi +
call sub_10100B3  +
mov [ebp-68h] eax +
jmp loc_1006070  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov edx [eax+0Ch] +
mov eax [eax+4] +
push edx  +
push eax  +
add ecx 9BCh +
call sub_10100D7  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
push esi  +
mov edi ecx +
call sub_1005AA8  +
test eax eax +
jl loc_10100F9  +
inc esi  +
push esi  +
push [ebp+arg_0]  +
mov ecx edi +
call sub_1010104  +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_4] +
push esi  +
mov esi ecx +
mov ecx [esi] +
push edi  +
lea edi [ecx+1] +
and edi 0FFFFFFFEh +
xor eax eax +
add ebx ebx +
sub edi ecx +
jnz loc_1014F28  +
add [esi] edi +
cmp dword ptr [esi+8] 0 +
jz loc_101013B  +
mov ecx [esi+10h] +
mov eax [ecx] +
push 0  +
push ebx  +
push [ebp+arg_0]  +
call dword ptr [eax+4]  +
test eax eax +
jl loc_1010141  +
add [esi] ebx +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
test eax eax +
jge loc_1010125  +
jmp loc_1010141  +
***
cmp [ebp+var_4464] esi +
jz loc_1002C8C  +
push [ebp+var_4464]  +
call ds:CoTaskMemFree  +
mov [ebp+var_4464] esi +
jmp loc_1002C8C  +
cmp [ebp+var_4468] 1 +
jnz loc_1006A2F  +
cmp [ebp+var_4464] 2 +
jnz loc_1006A2F  +
jmp loc_1011DDC  +
***
lea eax [ebp-1Ch] +
push eax  +
call sub_10101D3  +
test eax eax +
jl loc_1010213  +
mov ecx [ebp-14h] +
push esi  +
push dword ptr [ebp+58h]  +
call sub_1005156  +
mov edi eax +
test edi edi +
jl loc_1005012  +
mov esi [ebp-1Ch] +
mov eax [esi] +
lea ecx [ebp-10h] +
push ecx  +
push dword ptr [ebp+20h]  +
push dword ptr [ebp+1Ch]  +
push dword ptr [ebp+8]  +
push esi  +
call dword ptr [eax+1Ch]  +
jmp loc_1005004  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ecx+80h] +
test esi esi +
jl loc_10101FA  +
cmp dword ptr [ecx+6Ch] 0 +
jz loc_101020C  +
mov eax [ecx+6Ch] +
mov edx [ebp+arg_0] +
mov [edx] eax +
mov ecx [ecx+6Ch] +
mov eax [ecx] +
push ecx  +
call dword ptr [eax+4]  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_1005041  +
mov esi 80004002h +
jmp loc_10101FA  +
***
mov edi 80040D37h +
jmp loc_1005012  +
mov edi 80040D1Ah +
jmp loc_1005063  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_100EB2B  +
movzx eax word ptr [esi+1A8h] +
push eax  +
movzx eax word ptr [esi+1A6h] +
push eax  +
push [ebp+arg_0]  +
lea ecx [esi+10h] +
call sub_1004123  +
mov eax [ebp+arg_0] +
pop esi  +
pop ebp  +
retn 4  +
***
xor eax eax +
inc eax  +
jmp loc_1003D89  +
***
mov esi [ebp-0BA4h] +
lea eax [ebp-0BB4h] +
add esi 41Ch +
push eax  +
mov ecx esi +
call sub_100525B  +
push eax  +
lea ecx [ebp-9D8h] +
call sub_1007886  +
mov eax [ebp-9D8h] +
push 0FFFFFFFFh  +
push dword ptr [ebp-9CCh]  +
lea ecx [ebp-9D8h] +
push offset asc_100D728  +
call dword ptr [eax+10h]  +
lea eax [ebp-0BB4h] +
push eax  +
mov ecx esi +
call sub_101022C  +
push eax  +
lea ecx [ebp-9D8h] +
call sub_10102ED  +
jmp loc_100D730  +
push esi  +
push edi  +
push offset aFile  +
jmp loc_100D7FB  +
push esi  +
push edi  +
jmp loc_100D811  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov edx [eax+8] +
push dword ptr [eax+4]  +
mov eax [eax] +
mov edx [edx+4] +
lea eax [edx+eax*2] +
push eax  +
call sub_1010312  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
mov eax [ecx] +
push dword ptr [ecx+0Ch]  +
push [ebp+arg_0]  +
call dword ptr [eax+10h]  +
pop ebp  +
retn 8  +
***
mov ecx [esi+14h] +
lea ebx [ecx+eax*2] +
movzx eax word ptr [ebx] +
push eax  +
call sub_1003D6C  +
test eax eax +
jz loc_100EB88  +
movzx eax word ptr [ebx+2] +
push eax  +
call sub_1003D6C  +
test eax eax +
jz loc_100EB88  +
lea eax [edi+2] +
movzx ebx ax +
lea edi [esi+10h] +
push ebx  +
mov ecx edi +
mov [esi+1A6h] ax +
call sub_10103C6  +
mov [ebp+var_8] eax +
cmp eax 0FFFFFFFFh +
jz loc_10134B2  +
movzx ecx word ptr [esi+1B2h] +
cmp eax ecx +
jg loc_10134B2  +
push ebx  +
push 3Ah  +
mov ecx edi +
call sub_100557B  +
cmp eax 0FFFFFFFFh +
jnz loc_10134C1  +
mov ebx [ebp+var_8] +
sub bx [esi+1A6h] +
mov ax word ptr [ebp+var_8] +
mov [esi+1A8h] bx +
mov [esi+1AEh] ax +
jmp loc_100EB8F  +
add ebx 3 +
jmp loc_10133FF  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push ebx  +
push esi  +
mov esi [ecx+0Ch] +
mov ebx eax +
cmp eax esi +
jnb loc_10103F5  +
mov ecx [ecx+4] +
push edi  +
lea edi [ecx+eax*2] +
movzx eax word ptr [edi] +
push eax  +
call sub_1003D6C  +
test eax eax +
jnz loc_10103F4  +
inc ebx  +
inc edi  +
inc edi  +
cmp ebx esi +
jb loc_10103E0  +
pop edi  +
cmp ebx esi +
jnb loc_1010401  +
mov eax ebx +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
or eax 0FFFFFFFFh +
jmp loc_10103FB  +
***
or dword_10260C8 1 +
and dword_1026138 0 +
and dword_102613C 0 +
push offset sub_100F34D  +
call sub_100814C  +
pop ecx  +
jmp loc_1010024  +
push offset aTquery_dll  +
lea ecx [ebp+var_94] +
call sub_1010464  +
push dword ptr [eax+4]  +
mov ecx esi +
call sub_100F887  +
lea ecx [ebp+var_94] +
call sub_1001F05  +
mov dword_10260C4 1 +
jmp loc_1010037  +
***
call sub_1004DD8  +
mov esi ecx +
mov [ebp-14h] esi +
call sub_1003DBC  +
and dword ptr [ebp-4] 0 +
push esi  +
mov dword ptr [esi] offset off_1001E50 +
mov byte ptr [ebp-4] 1 +
call sub_10104BC  +
cmp dword ptr [ebp+8] 0 +
jz loc_10142F9  +
push esi  +
call sub_10081B9  +
mov eax [esi] +
push 0FFFFFFFFh  +
push dword ptr [esi+0Ch]  +
mov ecx esi +
push dword ptr [ebp+8]  +
call dword ptr [eax+10h]  +
mov eax esi +
call __EH_epilog3  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push 105h  +
mov ecx esi +
call sub_1004BD7  +
mov ecx [esi+8] +
dec ecx  +
push ecx  +
push eax  +
push dword_10262CC  +
call ds:GetModuleFileNameW  +
push eax  +
mov ecx esi +
call sub_1003E02  +
push 5Ch  +
mov ecx esi +
call sub_1010507  +
inc eax  +
push eax  +
mov ecx esi +
call sub_1003E02  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
mov ebx eax +
push ebx  +
mov eax [ebp-14h] +
mov esp [ebp-18h] +
mov dword ptr [ebp-1Ch] 8007000Eh +
jmp loc_100ADC3  +
***
mov eax 80004003h +
jmp loc_1009843  +
mov eax 8007000Eh +
jmp loc_1009842  +
call sub_100975B  +
push dword ptr [esi]  +
mov [ebp+var_4] eax +
call ds:__imp_free  +
and dword ptr [esi] 0 +
pop ecx  +
jmp loc_100983F  +
***
xor eax eax +
jmp loc_10097D7  +
call sub_100975B  +
push dword ptr [esi]  +
mov [ebp+pSourceSid] eax +
call ebx  +
and dword ptr [esi] 0 +
pop ecx  +
jmp loc_10097D4  +
call sub_100975B  +
mov [ebp+pSourceSid] eax +
jmp loc_10097D4  +
***
xor eax eax +
jmp loc_1009953  +
call sub_100975B  +
push dword ptr [esi]  +
mov [ebp+pSourceSid] eax +
call ebx  +
and dword ptr [esi] 0 +
pop ecx  +
jmp loc_1009950  +
call sub_100975B  +
mov [ebp+pSourceSid] eax +
jmp loc_1009950  +
***
push eax  +
call sub_1018535  +
mov [ebp+var_4] eax +
jmp loc_10096BF  +
push eax  +
call sub_1018535  +
mov [ebp+var_4] eax +
jmp loc_100971D  +
mov eax [ebp+arg_4] +
cmp eax ebx +
jz loc_10106C4  +
push dword ptr [eax]  +
call ds:__imp_free  +
mov eax [ebp+arg_4] +
pop ecx  +
mov [eax] ebx +
mov eax [ebp+arg_8] +
cmp eax ebx +
jz loc_1009726  +
push dword ptr [eax]  +
call ds:__imp_free  +
mov eax [ebp+arg_8] +
pop ecx  +
mov [eax] ebx +
jmp loc_1009726  +
***
mov eax 80004003h +
jmp loc_10094E8  +
push 2  +
push 0Ch  +
lea eax [ebp+pAclInformation] +
push eax  +
push [ebp+pAcl]  +
call ds:GetAclInformation  +
test eax eax +
jnz loc_101070B  +
call sub_100975B  +
jmp loc_10094E8  +
cmp [ebp+pAclInformation] esi +
jbe loc_10094E6  +
lea eax [ebp+pAceList] +
push eax  +
push esi  +
push [ebp+pAcl]  +
call ds:GetAce  +
test eax eax +
jz loc_1010701  +
mov eax [ebp+pAceList] +
movzx ecx word ptr [eax+2] +
push ecx  +
push eax  +
push 0FFFFFFFFh  +
push 2  +
push [ebp+arg_0]  +
call ds:AddAce  +
test eax eax +
jz loc_1010701  +
inc esi  +
cmp esi [ebp+pAclInformation] +
jnb loc_10094E6  +
jmp loc_1010714  +
***
mov eax 80004003h +
jmp loc_100949B  +
push 2  +
push 0Ch  +
lea eax [ebp+pAclInformation] +
push eax  +
push esi  +
call ds:GetAclInformation  +
test eax eax +
jnz loc_100942C  +
call sub_100975B  +
jmp loc_10094A1  +
mov [ebp+arg_0] eax +
jmp loc_100948D  +
push esi  +
call edi  +
pop ecx  +
jmp loc_1009497  +
***
push 0FFFFFFFFh  +
push [ebp+lpString2]  +
push 0FFFFFFFFh  +
push [ebp+lpString1]  +
push 1  +
push 7Fh  +
call ds:CompareStringW  +
dec eax  +
dec eax  +
pop ebp  +
retn 8  +
***
test [ebp+dwCmpFlags] 1 +
jz loc_10107C6  +
cmp edi esi +
jge loc_10107B1  +
mov esi edi +
push esi  +
push [ebp+lpString2]  +
push [ebp+lpString1]  +
call ds:__imp__wcsnicmp  +
add esp 0Ch +
jmp loc_1005246  +
cmp edi esi +
jge loc_10107CC  +
mov esi edi +
push esi  +
push [ebp+lpString2]  +
push [ebp+lpString1]  +
call ds:__imp_wcsncmp  +
jmp loc_10107BE  +
***
or ebx 0FFFFFFFFh +
jmp loc_10051F6  +
***
xor eax eax +
inc eax  +
jmp loc_10066FA  +
movzx eax word ptr [ebp+arg_0] +
add eax 0FFFFF95Ch +
cmp eax 12Bh +
ja loc_10066F8  +
jmp loc_10107E3  +
***
test eax eax +
jl loc_1005FE4  +
xor eax eax +
inc eax  +
jmp loc_1005FE6  +
***
mov [eax+24h] ecx +
mov [eax+28h] cl +
mov [eax+10h] ecx +
mov [eax+14h] ecx +
mov [eax+18h] ecx +
jmp loc_1009DF7  +
***
xor eax eax +
jmp loc_1009E26  +
***
xor eax eax +
jmp loc_100E41C  +
***
call ds:GetCurrentThread  +
push eax  +
call ds:GetThreadTimes  +
jmp loc_100455C  +
call ds:__imp_GetLastError  +
test eax eax +
jle loc_1010859  +
and eax 0FFFFh +
or eax 80070000h +
mov [esi+18h] eax +
jmp loc_1004578  +
***
mov eax 8007007Fh +
pop ebp  +
retn 4  +
***
mov eax dword_10267CC +
cmp eax 0FFFFFFFFh +
jnz loc_1010892  +
push off_1026658  +
mov ecx offset off_10267C8 +
call sub_100AA5C  +
mov eax dword_10267CC +
cmp eax 0FFFFFFFFh +
jz loc_100C028  +
mov ecx off_1026658 +
imul eax eax +
mov edx [ecx+0Ch] +
mov eax [eax+edx] +
push 4  +
pop esi  +
cmp eax esi +
jl loc_100C028  +
push 1  +
call sub_101E8BE  +
cmp eax esi +
jb loc_100C028  +
mov ecx off_1026658 +
push ebx  +
call sub_101E8BE  +
test eax eax +
jz loc_100C028  +
mov eax dword_10267CC +
mov [ebp-15Ch] eax +
mov eax off_1026658 +
mov [ebp-154h] eax +
lea eax [ebp-164h] +
push offset aFailedToGetReg  +
push eax  +
mov dword ptr [ebp-164h] offset aDW7rtmEnduserM +
mov dword ptr [ebp-160h] 11Eh +
mov [ebp-158h] esi +
call sub_101FF9B  +
pop ecx  +
pop ecx  +
jmp loc_100C028  +
***
mov eax 80004003h +
jmp loc_100C2FE  +
***
mov eax 80004003h +
jmp loc_100C3D5  +
***
xor eax eax +
jmp loc_1006947  +
***
cmp dword_102624C ebx +
jz loc_1007D94  +
mov eax dword_10267CC +
cmp eax 0FFFFFFFFh +
jnz loc_101099E  +
push off_1026658  +
mov ecx offset off_10267C8 +
call sub_100AA5C  +
mov eax dword_10267CC +
cmp eax 0FFFFFFFFh +
jz loc_1007D94  +
mov ecx off_1026658 +
imul eax eax +
mov edx [ecx+0Ch] +
cmp dword ptr [eax+edx] 4 +
jl loc_1007D94  +
push 1  +
call sub_101E8BE  +
cmp eax 4 +
jb loc_1007D94  +
mov ecx off_1026658 +
push ebx  +
call sub_101E8BE  +
test eax eax +
jz loc_1007D94  +
mov eax dword_10267CC +
mov [ebp+var_C] eax +
mov eax off_1026658 +
mov [ebp+var_4] eax +
lea eax [ebp+var_14] +
push offset aPfpsPsproperty  +
push eax  +
mov [ebp+var_14] offset aDW7rtmEnduserM +
mov [ebp+var_10] 1C3h +
mov [ebp+var_8] 4 +
call sub_101FF9B  +
pop ecx  +
pop ecx  +
jmp loc_1007D94  +
test edi 1000h +
jz loc_1007D94  +
mov ecx [esi+8] +
xor edx edx +
cmp ecx ebx +
jbe loc_1007D94  +
mov esi [esi+0Ch] +
mov eax esi +
call sub_101876B  +
test eax eax +
jnz loc_1006943  +
inc edx  +
add esi 0Ch +
cmp edx ecx +
jnb loc_1007D94  +
jmp loc_1010A2E  +
test edi 1000h +
jz loc_1007D94  +
xor edi edi +
cmp [esi+8] ebx +
jbe loc_1007D94  +
mov eax [esi+0Ch] +
push dword ptr [eax+edi*4]  +
call ds:SysStringLen  +
test eax eax +
jnz loc_1006943  +
inc edi  +
cmp edi [esi+8] +
jb loc_1010A62  +
jmp loc_1007D94  +
***
mov eax 80004003h +
jmp loc_1006F1B  +
***
mov ecx [ebp+var_103C] +
push 1Fh  +
pop eax  +
mov word ptr [ebp+var_1050] ax +
lea eax [ebp+var_1004] +
mov [ebp+var_1048] eax +
lea eax [ebp+var_1038] +
push eax  +
call sub_1005FEF  +
test eax eax +
jl loc_1007059  +
mov ecx [ebp+var_103C] +
lea eax [ebp+var_1050] +
push eax  +
call sub_1006177  +
jmp loc_1007059  +
***
push eax  +
push 41h  +
push dword ptr [ebp+8]  +
call sub_100B5CD  +
jmp loc_1003E5C  +
***
push eax  +
push 0C0h  +
push dword ptr [ebp+8]  +
call sub_100B5CD  +
jmp loc_1005316  +
***
push eax  +
push 400h  +
push dword ptr [ebp+8]  +
call sub_100B5CD  +
jmp loc_100ECC5  +
***
cmp dword ptr [eax+4] 0 +
jnz loc_100C1D6  +
cmp dword ptr [eax+8] 0C0h +
jnz loc_100C1D6  +
cmp dword ptr [eax+0Ch] 46000000h +
jnz loc_100C1D6  +
xor eax eax +
inc eax  +
jmp loc_100C1D8  +
***
mov eax 80004003h +
jmp loc_100C1AD  +
push dword ptr [esi+4]  +
push ebx  +
push [ebp+arg_8]  +
push [ebp+arg_0]  +
call edi  +
test eax eax +
jz loc_100C1AD  +
cmp [ebp+arg_4] 0 +
jnz loc_100C1B4  +
test eax eax +
jge loc_100C1B4  +
jmp loc_100C1AD  +
mov eax 80004002h +
jmp loc_100C1AD  +
***
mov ecx esi +
call sub_100E63E  +
push esi  +
call off_1026660  +
jmp loc_100E669  +
***
cmp eax 0FFFFFFFFh +
jz loc_1005C0C  +
push eax  +
call ds:CloseHandle  +
jmp loc_1005C0C  +
***
call loc_1018562  +
int 3  +
mov eax offset unk_10269BC +
jmp loc_1005EDB  +
***
or dword ptr [ebp-4] 0FFFFFFFFh +
mov eax offset loc_1010C11 +
retn   +
mov esi [ebp-14h] +
xor ebx ebx +
jmp loc_1009549  +
***
call sub_100975B  +
push dword ptr [esi]  +
mov edi eax +
call off_1026660  +
mov [esi] ebx +
mov eax edi +
jmp loc_1009562  +
***
call sub_100975B  +
mov ebx eax +
jmp loc_10093DC  +
***
call sub_100975B  +
mov esi eax +
jmp loc_1009624  +
***
push esi  +
push edi  +
push [ebp+TokenHandle]  +
call sub_1009631  +
push [ebp+TokenHandle]  +
mov esi eax +
call ds:CloseHandle  +
jmp loc_10095B8  +
***
or dword ptr [ebp-4] 0FFFFFFFFh +
mov eax offset loc_1010C83 +
retn   +
mov edi [ebp+0Ch] +
xor esi esi +
jmp loc_1009307  +
***
call sub_100975B  +
push dword ptr [edi]  +
mov ebx eax +
call ds:__imp_free  +
pop ecx  +
mov [edi] esi +
jmp loc_1009340  +
push eax  +
call sub_1018535  +
mov ebx eax +
jmp loc_1009349  +
***
call ds:__imp_GetLastError  +
mov [esi+8] eax +
jmp loc_1009C2F  +
***
call ds:__imp_GetLastError  +
cmp eax ebx +
jle loc_100C93E  +
and eax 0FFFFh +
or eax 80070000h +
jmp loc_100C93E  +
push esi  +
call ds:GlobalFree  +
mov eax [ebp-10h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
cmp eax ebx +
jz loc_1010CF4  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax edi +
jmp loc_100C93E  +
call ds:__imp_GetLastError  +
cmp eax ebx +
jle loc_1010D0F  +
and eax 0FFFFh +
or eax 80070000h +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov esi eax +
mov eax [ebp-10h] +
cmp eax ebx +
jmp loc_100C934  +
call ds:__imp_GetLastError  +
test eax eax +
jle loc_100C929  +
and eax 0FFFFh +
or eax 80070000h +
jmp loc_100C929  +
mov eax [ebp-10h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
test eax eax +
jz loc_1010D4D  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax 800700A0h +
jmp loc_100C93E  +
push edi  +
call esi  +
jmp loc_1010D1F  +
call esi  +
jmp loc_100C929  +
***
test eax eax +
jz loc_1010D6D  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
xor eax eax +
jmp loc_10070E5  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_100D3B4  +
***
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_1007CD5  +
***
push dword ptr [ebp+1Ch]  +
push dword ptr [ebp+18h]  +
push dword_1026064  +
push ebx  +
push dword ptr [ebp+14h]  +
call PSGetItemPropertyHandlerWithCreateObject  +
jmp loc_1007B9A  +
***
xor eax eax +
lea edi [ebp-90h] +
stos   +
stos   +
stos   +
stos   +
lea eax [ebp-90h] +
push eax  +
mov ecx esi +
call sub_1006177  +
mov ecx [ebp-68h] +
mov ebx eax +
jmp loc_1006661  +
lea eax [ebp-7Ch] +
jmp loc_1007F39  +
lea eax [ebp-7Ch] +
push eax  +
call ds:PropVariantClear  +
mov eax [ebp-5Ch] +
mov byte ptr [ebp-4] 0 +
test eax eax +
jz loc_1010DEC  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-60h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
test eax eax +
jz loc_1010DFD  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax 41209h +
jmp loc_10066CF  +
***
mov eax 8000FFFFh +
jmp loc_10031E1  +
***
call ds:__imp_GetLastError  +
test eax eax +
jle loc_100C43D  +
and eax 0FFFFh +
or eax 80070000h +
jmp loc_100C43D  +
***
push edi  +
call sub_1018A78  +
and dword ptr [esi+0Ch] 0 +
jmp loc_100E818  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_100E823  +
***
mov ecx ebx +
call sub_10094F2  +
jmp loc_10098E3  +
***
push 800700CEh  +
lea ecx [ebp+var_20] +
call sub_1018DFF  +
mov esi eax +
lea edi [ebp+var_10] +
movs   +
movs   +
movs   +
push offset dword_1023994  +
lea eax [ebp+var_10] +
push eax  +
movs   +
call _CxxThrowException  +
push 800700CEh  +
lea ecx [ebp+var_24] +
call sub_1018DFF  +
mov esi eax +
lea edi [ebp+var_14] +
movs   +
movs   +
movs   +
push offset dword_1023994  +
lea eax [ebp+var_14] +
push eax  +
movs   +
call _CxxThrowException  +
push eax  +
call ds:ImpersonateLoggedOnUser  +
jmp loc_1005CA7  +
***
lea ecx [ebp+var_20] +
call sub_1018DCD  +
mov esi eax +
lea edi [ebp+var_10] +
movs   +
movs   +
movs   +
push offset dword_1023994  +
lea eax [ebp+var_10] +
push eax  +
movs   +
call _CxxThrowException  +
lea ecx [ebp+var_20] +
call sub_1018DCD  +
mov esi eax +
lea edi [ebp+var_10] +
movs   +
movs   +
movs   +
push offset dword_1023994  +
lea eax [ebp+var_10] +
push eax  +
movs   +
call _CxxThrowException  +
dec eax  +
mov eax [ebp+arg_0] +
mov [eax] edi +
jz loc_1010F00  +
mov ecx dword_102614C +
mov dword ptr [eax+8] offset dword_1026140 +
jmp loc_1005285  +
mov ecx dword_102616C +
mov dword ptr [eax+8] offset dword_1026160 +
jmp loc_1005285  +
***
mov eax [ebp+arg_0] +
mov [eax] edi +
mov ecx dword_102617C +
mov dword ptr [eax+8] offset dword_1026170 +
jmp loc_1005285  +
***
push eax  +
call off_1026660  +
and dword ptr [esi] 0 +
jmp loc_10076E0  +
call ds:__imp_GetLastError  +
test eax eax +
jle loc_1010F4C  +
and eax 0FFFFh +
or eax 80070000h +
push eax  +
push 195h  +
push offset aDW7rtmEnduse_0  +
lea ecx [ebp+var_20] +
call sub_1018E2E  +
mov esi eax +
lea edi [ebp+var_10] +
movs   +
movs   +
movs   +
push offset dword_1023994  +
lea eax [ebp+var_10] +
push eax  +
movs   +
call _CxxThrowException  +
push esi  +
call edi  +
jmp loc_100EA85  +
***
call ds:__imp_GetLastError  +
cmp eax ebx +
jle loc_1010F92  +
and eax 0FFFFh +
or eax 80070000h +
mov esi eax +
jmp loc_100909F  +
call esi  +
jmp loc_1010F84  +
call esi  +
test eax eax +
jle loc_1010F92  +
jmp loc_1010F88  +
call esi  +
test eax eax +
jle loc_1010FB5  +
and eax 0FFFFh +
or eax 80070000h +
push ebx  +
mov esi eax +
mov byte ptr [ebp-4] 0 +
call off_1026660  +
jmp loc_100909F  +
call esi  +
cmp eax edi +
jle loc_1010FB5  +
jmp loc_1010FAB  +
***
call ds:__imp_GetLastError  +
cmp eax edi +
jle loc_1010FE3  +
and eax 0FFFFh +
or eax 80070000h +
mov esi eax +
jmp loc_100D667  +
test eax eax +
jle loc_1010FF8  +
and eax 0FFFFh +
or eax 80070000h +
mov [ebp-10h] eax +
jmp loc_1011004  +
mov dword ptr [ebp-10h] 8007000Eh +
cmp dword ptr [ebp-10h] 0 +
jge loc_100D4A0  +
jmp loc_100D50B  +
call edi  +
test eax eax +
jle loc_1011023  +
and eax 0FFFFh +
or eax 80070000h +
mov [ebp-10h] eax +
jmp loc_100D4B8  +
test eax eax +
jle loc_1011039  +
and eax 0FFFFh +
or eax 80070000h +
mov [ebp-10h] eax +
jmp loc_100D4EC  +
mov dword ptr [ebp-10h] 8007000Eh +
jmp loc_100D4EC  +
call edi  +
test eax eax +
jle loc_101105D  +
and eax 0FFFFh +
or eax 80070000h +
mov [ebp-10h] eax +
jmp loc_100D50B  +
mov dword ptr [ebp-10h] 8007000Eh +
jmp loc_100D53F  +
test eax eax +
jle loc_101107F  +
and eax 0FFFFh +
or eax 80070000h +
mov [ebp-10h] eax +
jmp loc_100D5D7  +
call edi  +
test eax eax +
jle loc_1011097  +
and eax 0FFFFh +
or eax 80070000h +
mov [ebp-10h] eax +
jmp loc_100D629  +
***
push 8000FFFFh  +
lea ecx [ebp-30h] +
call sub_1018DFF  +
mov esi eax +
lea edi [ebp-20h] +
movs   +
movs   +
movs   +
push offset dword_1023994  +
lea eax [ebp-20h] +
push eax  +
movs   +
call _CxxThrowException  +
push 8000FFFFh  +
lea ecx [ebp-30h] +
call sub_1018DFF  +
mov esi eax +
lea edi [ebp-20h] +
movs   +
movs   +
movs   +
push offset dword_1023994  +
lea eax [ebp-20h] +
push eax  +
movs   +
call _CxxThrowException  +
call ds:__imp_GetLastError  +
cmp eax edi +
jle loc_10110FB  +
and eax 0FFFFh +
or eax 80070000h +
push eax  +
push 1B7h  +
push offset aDW7rtmEnduse_0  +
lea ecx [ebp-30h] +
call sub_1018E2E  +
mov esi eax +
lea edi [ebp-20h] +
movs   +
movs   +
movs   +
push offset dword_1023994  +
lea eax [ebp-20h] +
push eax  +
movs   +
call _CxxThrowException  +
cmp ebx 41210h +
jz loc_10111F1  +
cmp ebx 80004001h +
jz loc_10111F1  +
cmp ebx 8007007Ah +
jnz loc_1011186  +
cmp [ebp-45Ch] edi +
jnz loc_10111AD  +
cmp [ebp-458h] edi +
jbe loc_10111AD  +
cmp dword ptr [ebp-458h] 10000h +
jnb loc_10111CF  +
push dword ptr [ebp-458h]  +
call off_102665C  +
mov esi eax +
mov eax [ebp-458h] +
mov [ebp-44Ch] esi +
mov [ebp-45Ch] eax +
jmp loc_10074AE  +
cmp ebx ecx +
jge loc_10074B4  +
or dword ptr [ebp-4] 0FFFFFFFFh +
cmp [ebp-44Ch] ecx +
jz loc_10111A6  +
push dword ptr [ebp-44Ch]  +
call off_1026660  +
mov eax ebx +
jmp loc_10075ED  +
or dword ptr [ebp-4] 0FFFFFFFFh +
cmp [ebp-44Ch] ecx +
jz loc_10111C5  +
push dword ptr [ebp-44Ch]  +
call off_1026660  +
mov eax 8000FFFFh +
jmp loc_10075ED  +
or dword ptr [ebp-4] 0FFFFFFFFh +
cmp [ebp-44Ch] ecx +
jz loc_10111E7  +
push dword ptr [ebp-44Ch]  +
call off_1026660  +
mov eax 80041212h +
jmp loc_10075ED  +
cmp hMem ecx +
jnz loc_101123C  +
push offset dword_10269B4  +
push offset hMem  +
push 1  +
push off_1026924  +
call ConvertStringSecurityDescriptorToSecurityDescriptorW  +
test eax eax +
jnz loc_101123A  +
call ds:__imp_GetLastError  +
test eax eax +
jle loc_1011228  +
and eax 0FFFFh +
or eax 80070000h +
or dword ptr [ebp-4] 0FFFFFFFFh +
cmp dword ptr [ebp-44Ch] 0 +
mov esi eax +
jmp loc_10075E5  +
xor ecx ecx +
mov eax dword_10269B4 +
cmp eax [ebp-45Ch] +
jbe loc_101126B  +
or dword ptr [ebp-4] 0FFFFFFFFh +
cmp [ebp-44Ch] ecx +
jz loc_1011261  +
push dword ptr [ebp-44Ch]  +
call off_1026660  +
mov eax 8007007Ah +
jmp loc_10075ED  +
push eax  +
push hMem  +
push esi  +
call memcpy  +
mov eax dword_10269B4 +
add esp 0Ch +
jmp loc_10074EF  +
***
mov eax [ebp-4A0h] +
mov eax [eax] +
mov [ebp-454h] eax +
mov dword ptr [ebp-4] 1 +
mov eax offset loc_1011311 +
retn   +
mov edi [ebp-454h] +
mov esi [ebp-464h] +
xor ebx ebx +
jmp loc_100757B  +
***
mov byte ptr [ebp-4] 0 +
cmp [ebp-460h] ebx +
jz loc_101133C  +
push dword ptr [ebp-460h]  +
call off_1026660  +
or dword ptr [ebp-4] 0FFFFFFFFh +
cmp [ebp-44Ch] ebx +
jz loc_1011354  +
push dword ptr [ebp-44Ch]  +
call off_1026660  +
mov eax edi +
jmp loc_10075ED  +
push dword ptr [ebp-460h]  +
call off_1026660  +
jmp loc_10075DB  +
push dword ptr [ebp-44Ch]  +
call off_1026660  +
jmp loc_10075EB  +
***
push 80070057h  +
lea ecx [ebp-40h] +
call sub_1018DFF  +
mov esi eax +
lea edi [ebp-20h] +
movs   +
movs   +
movs   +
movs   +
push offset dword_1023994  +
lea eax [ebp-20h] +
push eax  +
call _CxxThrowException  +
push 8007000Eh  +
lea ecx [ebp-50h] +
call sub_1018DFF  +
mov esi eax +
lea edi [ebp-30h] +
movs   +
movs   +
movs   +
movs   +
push offset dword_1023994  +
lea eax [ebp-30h] +
jmp loc_101139B  +
***
call sub_100DAC1  +
test [ebp+arg_0] 1 +
jz loc_10113D3  +
push edi  +
call off_1026660  +
mov eax edi +
jmp loc_100DB26  +
***
push 46h  +
pop eax  +
push eax  +
mov [edi] eax +
push lpValueName  +
mov ecx esi +
call sub_101D444  +
jmp loc_1009AFF  +
push 28h  +
pop eax  +
push eax  +
mov [edi] eax +
push off_1026680  +
mov ecx esi +
call sub_101D444  +
jmp loc_1009B26  +
***
push esi  +
call off_1026660  +
jmp loc_1003380  +
***
jmp loc_10029F0  +
***
mov eax offset loc_1012098 +
mov eax offset loc_100E005 +
retn   +
***
add eax 556FBC70h +
add al 74h +
dec eax  +
mov eax 453974FFh +
add al [ecx-5Dh] +
***
call ds:__imp_GetLastError  +
test eax eax +
jle loc_100B6AF  +
and eax 0FFFFh +
or eax 80070000h +
jmp loc_100B6AF  +
***
mov eax dword_1026104 +
test eax eax +
jz loc_1012712  +
push eax  +
call ds:SetEvent  +
mov dword ptr [ebp-4] 3 +
mov eax offset loc_101271F +
retn   +
xor ebx ebx +
jmp loc_100DC3E  +
***
mov eax dword_10262B0 +
mov esi dword_10262B4 +
mov ecx eax +
and ecx edx +
mov edx esi +
and edx edi +
cmp ecx eax +
jnz loc_100DCF9  +
cmp edx esi +
jnz loc_100DCF9  +
call ds:GetCurrentProcessId  +
push eax  +
push offset dword_1012780  +
push dword_10261BC  +
push dword_10261B8  +
call sub_1018730  +
jmp loc_100DCF9  +
***
mov eax 80070057h +
jmp loc_1003830  +
***
mov eax 80070057h +
jmp loc_1001BDF  +
***
mov eax 80004003h +
pop ebp  +
retn 4  +
***
mov eax 80004003h +
jmp loc_1004A83  +
***
xor eax eax +
jmp loc_1006869  +
xor eax eax +
jmp loc_1006868  +
push 20h  +
pop edi  +
jmp loc_1006856  +
mov ecx [esi+8] +
mov edi [ecx] +
add edi 18h +
jmp loc_1006856  +
sub ecx 28h +
jz loc_101281F  +
mov ecx edx +
cmp ecx 40h +
jg loc_1012806  +
jz loc_1012812  +
push 2  +
pop edx  +
sub ecx edx +
cmp ecx 15h +
ja loc_101280B  +
jmp ds:off_101285D[ecx*4]  +
xor eax eax +
inc eax  +
jmp loc_1012812  +
mov eax edx +
jmp loc_1012812  +
mov eax ebx +
jmp loc_1012812  +
cmp ecx 48h +
jz loc_101280F  +
xor eax eax +
jmp loc_1012812  +
push 10h  +
pop eax  +
mov ecx [esi+8] +
imul ecx eax +
add edi ecx +
jmp loc_1006865  +
mov eax [esi+8] +
mov ecx eax +
imul ecx ecx +
add edi ecx +
test eax eax +
jbe loc_1006865  +
mov esi [esi+0Ch] +
add edi [esi] +
add esi 0Ch +
dec eax  +
jz loc_1006865  +
jmp loc_1012834  +
mov eax [esi+0Ch] +
push dword ptr [eax+ebx*4]  +
call ds:SysStringLen  +
inc ebx  +
lea edi [edi+eax*2+6] +
cmp ebx [esi+8] +
jb loc_1012842  +
jmp loc_1006865  +
***
mov edi offset byte_1004260 +
jmp loc_1006420  +
***
cmp eax 0Eh +
jnz loc_10063D0  +
jmp loc_100616E  +
***
mov eax 80004005h +
jmp loc_10037F2  +
mov eax [esi+404h] +
cmp eax [esi+408h] +
jnz loc_10128F3  +
push eax  +
call off_1026660  +
and dword ptr [esi+408h] 0 +
push [ebp+var_4]  +
call off_102665C  +
mov [esi+404h] eax +
test eax eax +
jnz loc_1012910  +
mov eax 8007000Eh +
jmp loc_10037F2  +
mov [esi+408h] eax +
mov eax [ebp+var_4] +
mov [esi+40Ch] eax +
jmp loc_10037C2  +
***
mov eax 80004005h +
jmp loc_1001B93  +
mov eax [esi+404h] +
cmp eax [esi+408h] +
jnz loc_101294A  +
push eax  +
call off_1026660  +
and dword ptr [esi+408h] 0 +
push [ebp+var_4]  +
call off_102665C  +
mov [esi+404h] eax +
test eax eax +
jnz loc_1012967  +
mov eax 8007000Eh +
jmp loc_1001B93  +
mov ecx [ebp+var_4] +
mov [esi+408h] eax +
mov [esi+40Ch] ecx +
jmp loc_1001B56  +
***
mov eax 80004003h +
jmp loc_10062B7  +
mov eax 80040D13h +
jmp loc_10062B6  +
push dword ptr [esi+8]  +
mov ecx edi +
push 0Ch  +
call sub_1005A63  +
test eax eax +
jl loc_10062AC  +
mov ecx [esi+8] +
mov edx [ecx] +
add edx 0FFFFFFFCh +
jz loc_1006299  +
push dword ptr [ecx+8]  +
push edx  +
jmp loc_100731C  +
sub edx 28h +
jz loc_1012A07  +
cmp ecx 40h +
jg loc_10129E4  +
jz loc_10129E0  +
push 2  +
pop eax  +
sub ecx eax +
cmp ecx 15h +
ja loc_10129E9  +
jmp ds:off_1012A56[ecx*4]  +
xor eax eax +
inc eax  +
jmp loc_10129F0  +
push 4  +
jmp loc_10129EF  +
push 8  +
jmp loc_10129EF  +
cmp ecx 48h +
jz loc_10129ED  +
xor eax eax +
jmp loc_10129F0  +
push 10h  +
pop eax  +
mov ecx [esi+8] +
push dword ptr [esi+0Ch]  +
imul ecx eax +
push ecx  +
mov ecx [ebp+var_4] +
call sub_1005A50  +
jmp loc_10062AC  +
mov eax [esi+8] +
push dword ptr [esi+0Ch]  +
imul eax eax +
mov ecx [ebp+var_4] +
push eax  +
call sub_1005A50  +
test eax eax +
jl loc_10062AC  +
xor ebx ebx +
cmp [esi+8] ebx +
jbe loc_10062AC  +
xor edi edi +
test eax eax +
jl loc_10062AC  +
mov eax [esi+0Ch] +
mov ecx [ebp+var_4] +
add eax edi +
push dword ptr [eax+8]  +
push dword ptr [eax]  +
call sub_1005A50  +
inc ebx  +
add edi 0Ch +
cmp ebx [esi+8] +
jb loc_1012A2E  +
jmp loc_10062AC  +
***
push 8007000Eh  +
lea ecx [ebp+var_20] +
call sub_1018DFF  +
mov esi eax +
lea edi [ebp+var_10] +
movs   +
movs   +
movs   +
push offset dword_1023994  +
lea eax [ebp+var_10] +
push eax  +
movs   +
call _CxxThrowException  +
push esi  +
call ds:PropVariantClear  +
xor eax eax +
mov [esi] ax +
jmp loc_100619D  +
***
mov dword ptr [esi+8] offset byte_1004260 +
jmp loc_10061A7  +
and dword ptr [esi+8] 0 +
jmp loc_1006203  +
***
mov [ebp-10h] eax +
jmp loc_1005D12  +
push eax  +
lea ecx [ebp-40h] +
call sub_1018DFF  +
mov esi eax +
lea edi [ebp-30h] +
movs   +
movs   +
movs   +
push offset dword_1023994  +
lea eax [ebp-30h] +
push eax  +
movs   +
call _CxxThrowException  +
push 80070057h  +
lea ecx [ebp-8Ch] +
call sub_1018DFF  +
mov esi eax +
lea edi [ebp-7Ch] +
movs   +
movs   +
movs   +
push offset dword_1023994  +
lea eax [ebp-7Ch] +
push eax  +
movs   +
call _CxxThrowException  +
***
mov eax [ebp+var_4] +
neg eax  +
sbb eax eax +
and eax [ebp+var_8] +
push eax  +
call sub_100424B  +
push [ebp+arg_0]  +
mov ecx eax +
call sub_1005DA3  +
test eax eax +
jz loc_1005896  +
xor eax eax +
inc eax  +
jmp locret_10058A6  +
***
mov eax 8007000Eh +
jmp loc_1003993  +
lea eax [ebp-10h] +
push eax  +
lea eax [ebp-14h] +
push eax  +
mov ecx ebx +
call sub_1004A49  +
mov edi eax +
test edi edi +
jl loc_1003980  +
push dword ptr [ebp-10h]  +
mov eax [esi] +
push 0  +
push dword ptr [ebp-14h]  +
mov ecx esi +
call dword ptr [eax+10h]  +
lea eax [ebp-10h] +
push eax  +
lea eax [ebp-14h] +
push eax  +
mov ecx ebx +
call sub_1004A49  +
mov edi eax +
test edi edi +
jl loc_1003980  +
push dword ptr [ebp-10h]  +
mov ecx esi +
push dword ptr [ebp-14h]  +
call sub_10055FC  +
lea eax [ebp-10h] +
push eax  +
lea eax [ebp-14h] +
push eax  +
mov ecx ebx +
call sub_1004A49  +
mov edi eax +
test edi edi +
jl loc_1003980  +
push dword ptr [ebp-10h]  +
mov ecx esi +
push dword ptr [ebp-14h]  +
call sub_100561A  +
lea eax [ebp-18h] +
push eax  +
mov ecx ebx +
call sub_10049E5  +
mov edi eax +
test edi edi +
jl loc_1003980  +
mov eax [ebp-18h] +
mov [esi+23Ch] eax +
mov eax [ebp+8] +
mov [eax] esi +
xor esi esi +
jmp loc_1003980  +
***
cmp [esi+10h] eax +
jbe loc_100583F  +
call sub_101BC44  +
jmp loc_100583F  +
push 0B7h  +
call ds:SetLastError  +
xor eax eax +
jmp loc_1005879  +
***
mov eax 8007000Eh +
jmp loc_1001B03  +
push eax  +
lea ecx [ebp-30h] +
call sub_1018DFF  +
mov esi eax +
lea edi [ebp-20h] +
movs   +
movs   +
movs   +
push offset dword_1023994  +
lea eax [ebp-20h] +
push eax  +
movs   +
call _CxxThrowException  +
push edi  +
jmp loc_1012C49  +
lea ecx [ebx+240h] +
call sub_100563B  +
jmp loc_1001ADB  +
***
test ebx ebx +
jnz loc_100EBED  +
mov eax 80040D16h +
jmp loc_100EC37  +
***
mov eax 8000000Ah +
jmp loc_100C986  +
mov eax 80004003h +
jmp loc_100C986  +
***
mov eax offset unk_10269F8 +
jmp loc_100353A  +
***
mov eax [ebp-18h] +
mov eax [eax] +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov [ebp+8] eax +
mov eax offset loc_1012CF4 +
retn   +
mov esi [ebp+10h] +
mov edi [ebp+8] +
jmp loc_100EF14  +
***
lea eax [ebp-74h] +
mov [ebp-42Ch] eax +
jmp loc_100ED8D  +
lea eax [ebp-450h] +
push eax  +
lea ecx [ebp-290h] +
call sub_100F026  +
push eax  +
lea ecx [ebp-0C8h] +
call sub_1007886  +
jmp loc_100EE0C  +
mov edi [esi] +
lea eax [ebp-43Ch] +
push eax  +
push dword ptr [ebp-440h]  +
lea ecx [ebp-64h] +
push ebx  +
call sub_1004BD7  +
push eax  +
push esi  +
call dword ptr [edi+10h]  +
cmp eax ebx +
jl loc_1012D81  +
push dword ptr [ebp-43Ch]  +
lea ecx [ebp-64h] +
call sub_1003E02  +
push ebx  +
push 3Bh  +
lea ecx [ebp-64h] +
call sub_100557B  +
cmp eax 0FFFFFFFFh +
jz loc_100EE4D  +
push eax  +
lea ecx [ebp-64h] +
call sub_1003E02  +
jmp loc_100EE4D  +
mov ecx [ebp-60h] +
xor eax eax +
mov [ebp-58h] ebx +
mov [ecx] ax +
jmp loc_100EE4D  +
***
mov eax 80004003h +
jmp loc_100F407  +
***
mov eax 8000000Ah +
jmp loc_100F407  +
***
mov eax offset loc_1012DB5 +
retn   +
mov esi [ebp+8] +
xor edi edi +
mov eax edi +
jmp loc_100C21A  +
***
pop ebp  +
retn 4  +
***
mov eax [ebp+arg_0] +
mov eax [eax+14h] +
mov ecx [esi] +
lea edx [ebp+var_30] +
push edx  +
lea edx [ebp+var_C] +
push edx  +
lea edx [ebp+var_1C] +
push edx  +
push eax  +
push esi  +
call dword ptr [ecx+10h]  +
jmp loc_100D0C0  +
***
mov esi 80004002h +
jmp loc_10079B5  +
***
mov esi 80004002h +
jmp loc_100D159  +
***
push 8007000Eh  +
lea ecx [ebp+var_20] +
call sub_1018DFF  +
mov esi eax +
lea edi [ebp+var_10] +
movs   +
movs   +
movs   +
push offset dword_1023994  +
lea eax [ebp+var_10] +
push eax  +
movs   +
call _CxxThrowException  +
xor eax eax +
jmp loc_100DF86  +
***
mov eax offset unk_10269FC +
jmp loc_1003110  +
***
mov edx [esi] +
push eax  +
mov ecx esi +
call dword ptr [edx]  +
jmp loc_100B7B8  +
***
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_100E320  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_100E32F  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_100E33E  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_100E34D  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_100E35C  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_100E36B  +
***
mov eax [ebp+var_4] +
neg eax  +
sbb eax eax +
and eax [ebp+var_8] +
push eax  +
call sub_100424B  +
push [ebp+arg_0]  +
mov ecx eax +
call sub_1005DE9  +
test eax eax +
jz loc_100BF30  +
xor eax eax +
inc eax  +
jmp locret_100BF40  +
***
push 0C0000C0Bh  +
push dword ptr [ebp+0Ch]  +
push esi  +
call sub_101BE30  +
jmp loc_100CC65  +
***
push 0C0000C0Ch  +
push [ebp+arg_8]  +
push edi  +
call sub_101BE30  +
jmp loc_100CD04  +
***
cmp [esi+10h] eax +
jbe loc_100BED9  +
call sub_101BF0B  +
jmp loc_100BED9  +
push 0B7h  +
call ds:SetLastError  +
xor eax eax +
jmp loc_100BF13  +
***
mov [ebp-0B8h] edi +
jmp loc_100BE8E  +
lea eax [ebp-0BCh] +
push eax  +
push 20119h  +
push ebx  +
push dword ptr [ebp-0B0h]  +
push edi  +
call esi  +
cmp eax ebx +
jnz loc_100BDE6  +
push dword ptr [ebp-0BCh]  +
call ds:RegCloseKey  +
xor edi edi +
inc edi  +
mov [ebp-0B8h] edi +
jmp loc_100BDE9  +
mov dword ptr [ebp-0B8h] 8007000Eh +
jmp loc_100BE82  +
mov dword ptr [ebp-0B8h] 80004005h +
jmp loc_100BE82  +
push edi  +
mov ecx esi +
call sub_100E2CE  +
jmp loc_100BE8E  +
***
call sub_101BD61  +
jmp loc_1012F6A  +
call sub_100975B  +
mov edi eax +
jmp loc_100CA9C  +
lea eax [ebp-24h] +
push eax  +
mov ecx esi +
call sub_101BDF6  +
test eax eax +
jl loc_1010213  +
mov ecx [ebp-14h] +
push esi  +
push dword ptr [ebp+58h]  +
call sub_1005156  +
mov edi eax +
test edi edi +
jl loc_1005012  +
mov esi [ebp-24h] +
mov eax [esi] +
lea ecx [ebp-10h] +
push ecx  +
push dword ptr [ebp+20h]  +
push dword ptr [ebp+1Ch]  +
push dword ptr [ebp+18h]  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push esi  +
call dword ptr [eax+10h]  +
jmp loc_1005004  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_1005061  +
***
mov dword ptr [ebp-348h] 80004003h +
jmp loc_100BB30  +
***
lea ecx [ebp+var_2C] +
push ecx  +
push 5  +
call eax  +
jmp loc_100CE6F  +
push edi  +
call FreeLibrary  +
mov [ebp+hModule] esi +
jmp loc_100CE6F  +
call GetLastError  +
cmp eax 7Eh +
jz loc_1013007  +
cmp eax 0C1h +
jnz loc_1013039  +
push 0  +
push 0FFFFFFFFh  +
push esi  +
call InterlockedCompareExchange  +
test eax eax +
jz loc_101301D  +
mov [ebp+hModule] eax +
jmp loc_100CE6F  +
mov [ebp+var_4] 1 +
jmp loc_1013039  +
call GetLastError  +
cmp eax 7Fh +
jnz loc_100CEDD  +
jmp loc_100CE98  +
push [ebp+lpProcName]  +
push ebx  +
call DelayLoadFailureHook  +
mov esi eax +
jmp loc_100CEA7  +
***
push edi  +
mov ecx ebx +
call sub_101C02B  +
movzx eax word ptr [eax] +
push dword ptr [ebp+0Ch]  +
push eax  +
call ds:UnregisterClassA  +
inc edi  +
cmp edi [esi+24h] +
jl loc_101305C  +
pop ebx  +
jmp loc_100E887  +
***
mov byte_10269B8 1 +
and dword ptr [esi] 0 +
jmp loc_100AE6A  +
***
cmp [ebp+VersionInformation.dwMajorVersion] 4 +
ja loc_100AF2C  +
jz loc_100AF6C  +
jmp loc_100AF30  +
mov byte_10269B8 1 +
jmp loc_100AF4E  +
***
mov eax [ebp-14h] +
mov esp [ebp-18h] +
mov eax [ebp-20h] +
mov dword_10260B8 eax +
xor ebx ebx +
cmp dword_10260AC ebx +
jnz loc_101313C  +
push eax  +
call ds:_exit  +
***
cmp dword_1026A00 ebx +
jnz loc_101314A  +
call ds:_cexit  +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov eax dword_10260B8 +
call __SEH_epilog4  +
retn   +
***
cmp ecx 20Bh +
jnz loc_100B04F  +
cmp dword ptr [eax+84h] 0Eh +
jbe loc_100B04F  +
xor ecx ecx +
cmp [eax+0F8h] ecx +
jmp loc_100AFF1  +
***
push offset sub_100A288  +
call ds:__setusermatherr  +
pop ecx  +
jmp loc_100B047  +
***
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call sub_101C0F5  +
jmp locret_100DBA6  +
***
push 8  +
call _lock  +
pop ecx  +
and [ebp+ms_exc.disabled] 0 +
mov eax dword_10260F4 +
mov [ebp+var_1C] eax +
mov eax dword_10260F0 +
mov [ebp+var_20] eax +
lea eax [ebp+var_20] +
push eax  +
lea eax [ebp+var_1C] +
push eax  +
push [ebp+arg_0]  +
call __dllonexit  +
add esp 0Ch +
mov [ebp+var_24] eax +
mov eax [ebp+var_1C] +
mov dword_10260F4 eax +
mov eax [ebp+var_20] +
mov dword_10260F0 eax +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
call sub_1013204  +
mov eax [ebp+var_24] +
jmp loc_100818F  +
***
pop ecx  +
retn   +
***
xor eax eax +
mov [ebp+var_1C] eax +
jmp loc_100B0F6  +
***
push 2  +
pop eax  +
pop ebp  +
retn   +
***
test eax ebx +
jz loc_100B161  +
not eax  +
mov dword_1026048 eax +
jmp loc_100B1B7  +
***
xor eax eax +
jmp loc_1005E82  +
xor eax eax +
jmp loc_1005E80  +
***
mov eax ebx +
jmp loc_10055F1  +
***
xor eax eax +
retn   +
***
mov eax 80004003h +
jmp loc_10079E4  +
***
push 1  +
mov ecx esi +
call sub_101C70F  +
jmp loc_100533B  +
mov eax [esi+4] +
dec eax  +
push eax  +
mov ecx esi +
call sub_101C6CF  +
jmp loc_1005359  +
***
push dword ptr [edi+14h]  +
call ds:lstrlenW  +
cmp eax [ebp+0Ch] +
jz loc_10053AB  +
push eax  +
mov ecx esi +
call sub_1003E02  +
jmp loc_10053AB  +
lea eax [ebp-1B0h] +
push eax  +
lea ecx [ebp-1A4h] +
call sub_101C6A4  +
push dword ptr [ebp-1A0h]  +
and dword ptr [ebp-4] 0 +
mov ecx esi +
call sub_10081ED  +
lea ecx [ebp-1A4h] +
call sub_10030A0  +
jmp loc_10053DB  +
***
mov ebx [esi+1Ch] +
lea eax [edi+2] +
cmp ebx eax +
jbe loc_1013314  +
mov eax [esi+14h] +
movzx eax word ptr [eax+edi*2+2] +
push eax  +
call sub_1003D6C  +
test eax eax +
jz loc_1013314  +
mov eax [esi+14h] +
lea ecx [edi+2] +
movzx eax word ptr [eax+ecx*2] +
push eax  +
call sub_1003D6C  +
test eax eax +
jnz loc_1005526  +
mov eax 0FFFBh +
and [esi+1BAh] ax +
xor eax eax +
mov [esi+1ACh] ax +
mov [esi+1A8h] ax +
mov [esi+1AEh] ax +
mov [esi+1A4h] ax +
mov eax [ebp+var_4] +
inc edi  +
mov [esi+1BEh] di +
cmp eax 0FFFFFFFFh +
jz loc_1013363  +
sub ebx eax +
mov [esi+1B2h] ax +
mov [esi+1B4h] bx +
jmp loc_1005571  +
mov [esi+1B2h] bx +
jmp loc_1005568  +
inc eax  +
jmp loc_1005544  +
push 7  +
jmp loc_100CF7B  +
push 3  +
jmp loc_100CF7B  +
mov eax [esi+14h] +
cmp word ptr [eax] 5Ch +
jnz loc_1005551  +
cmp word ptr [eax+2] 5Ch +
jnz loc_1005551  +
xor eax eax +
push 3  +
mov ecx ebx +
mov [esi+1A4h] ax +
call sub_10103C6  +
cmp eax 0FFFFFFFFh +
jnz loc_10133B5  +
push 2  +
pop eax  +
mov [esi+1BEh] ax +
jmp loc_1005551  +
mov cx [esi+1Ch] +
sub cx ax +
mov [esi+1B4h] cx +
mov [esi+1B2h] ax +
jmp loc_1005571  +
***
inc [ebp+var_C]  +
movzx eax word ptr [esi+1B2h] +
add [ebp+var_10] 2 +
inc edi  +
cmp edi eax +
jnb loc_100EF78  +
jmp loc_100EF64  +
add ebx 2 +
jmp loc_10133FF  +
add ebx 4 +
mov [esi+1A6h] bx +
jmp loc_100EF9F  +
movzx eax word ptr [ebx+2] +
push eax  +
call sub_1003D6C  +
test eax eax +
jz loc_100EFCF  +
add edi 2 +
movzx ebx di +
lea ecx [esi+10h] +
push ebx  +
mov [esi+1A6h] di +
call sub_10103C6  +
cmp eax 0FFFFFFFFh +
jz loc_10134A8  +
cmp eax [ebp+var_8] +
jg loc_10134A8  +
sub eax edi +
lea ecx [esi+1A8h] +
mov [ecx] ax +
cmp ax 2 +
jnz loc_1013471  +
mov edx [esi+14h] +
cmp word ptr [edx+ebx*2+2] 3Ah +
jnz loc_1013471  +
add [esi+1AEh] ax +
xor eax eax +
mov [esi+1ACh] ax +
mov [ecx] ax +
jmp loc_100EB9D  +
lea eax [eax+edi+1] +
mov [esi+1AAh] ax +
movzx eax ax +
push eax  +
lea ecx [esi+10h] +
call sub_10103C6  +
cmp eax 0FFFFFFFFh +
jz loc_1013492  +
cmp eax [ebp+var_8] +
jle loc_1013495  +
mov eax [ebp+var_8] +
sub ax [esi+1AAh] +
mov [esi+1ACh] ax +
jmp loc_100EB9D  +
mov eax [ebp+var_14] +
sub eax edi +
jmp loc_100EFD8  +
movzx eax word ptr [esi+1B2h] +
mov [ebp+var_8] eax +
jmp loc_1010385  +
lea ebx [eax+1] +
cmp ebx [ebp+var_8] +
jge loc_1010398  +
mov eax [ebp+var_8] +
sub eax ebx +
push eax  +
push ebx  +
lea eax [ebp+var_30] +
push eax  +
mov ecx edi +
call sub_1004123  +
mov ecx [eax] +
mov [ebp+var_20] ecx +
mov ecx [eax+4] +
mov eax [eax+8] +
lea edi [ecx+ecx] +
mov [ebp+var_18] eax +
lea eax [edi+2] +
call sub_1003E9E  +
mov [ebp+var_C] esp +
test esp esp +
jnz loc_1013523  +
push 8007000Eh  +
lea ecx [ebp+var_24] +
call sub_1018DFF  +
mov esi eax +
lea edi [ebp+var_34] +
movs   +
movs   +
movs   +
push offset dword_1023994  +
lea eax [ebp+var_34] +
push eax  +
movs   +
call _CxxThrowException  +
mov eax [ebp+var_18] +
mov eax [eax+4] +
mov ecx [ebp+var_20] +
push edi  +
lea eax [eax+ecx*2] +
push eax  +
push [ebp+var_C]  +
call memcpy  +
mov eax [ebp+var_C] +
xor ecx ecx +
push eax  +
mov [edi+eax] cx +
call ds:_wtol  +
mov [esi+1C0h] eax +
mov eax 0FFFDh +
and [esi+1BAh] ax +
add esp 10h +
dec ebx  +
jmp loc_101039B  +
***
push [ebp+Arguments]  +
push [ebp+nSize]  +
push edi  +
push [ebp+dwLanguageId]  +
push [ebp+dwMessageId]  +
push ebx  +
push [ebp+dwFlags]  +
call esi  +
jmp loc_100F7EA  +
***
push 80070057h  +
lea ecx [ebp+var_20] +
call sub_1018DFF  +
mov esi eax +
lea edi [ebp+var_10] +
movs   +
movs   +
movs   +
push offset dword_1023994  +
lea eax [ebp+var_10] +
push eax  +
movs   +
call _CxxThrowException  +
int 3  +
***
mov dword ptr [ebp+8] 80041501h +
jmp loc_100F52C  +
push ecx  +
call sub_101C7EE  +
test eax eax +
jz loc_10135D4  +
push ebx  +
push esi  +
lea eax [edi+10h] +
push eax  +
movzx eax word ptr [ebp+8] +
push esi  +
push eax  +
push 800h  +
mov ecx edi +
call sub_101C819  +
jmp loc_100F57D  +
push dword ptr [ebp+8]  +
call sub_100F801  +
push ebx  +
test eax eax +
push esi  +
lea eax [edi+10h] +
push eax  +
jz loc_10135F4  +
push ebx  +
push dword ptr [ebp+8]  +
push 800h  +
jmp loc_100FFFD  +
movzx eax word ptr [ebp+8] +
push esi  +
push eax  +
push ebx  +
push 1000h  +
call ds:FormatMessageW  +
jmp loc_100F584  +
and ecx 0FFFFh +
push ecx  +
call ds:strerror  +
pop ecx  +
push eax  +
mov ecx edi +
call sub_101D10E  +
jmp loc_100F584  +
push 10h  +
push esi  +
push dword ptr [ebp+8]  +
call ds:_ultow  +
add esp 0Ch +
push esi  +
call ds:lstrlenW  +
push eax  +
mov ecx edi +
call sub_1003E02  +
jmp loc_100F607  +
***
mov eax [ebp+arg_8] +
or dword ptr [eax] 0FFFFFFFFh +
mov eax 80070216h +
jmp loc_1004BCE  +
***
push ebx  +
call sub_1001E75  +
mov [esi+4] ebx +
mov [esi+8] edi +
pop ebx  +
jmp loc_100B5E2  +
***
mov eax [ebp+arg_8] +
test eax eax +
jz loc_1013688  +
mov [eax] edx +
mov eax 8007007Ah +
jmp loc_1007A45  +
***
call loc_1018562  +
int 3  +
call loc_1018562  +
int 3  +
push eax  +
lea ecx [ebp+var_24] +
call sub_1018DFF  +
mov esi eax +
lea edi [ebp+var_14] +
movs   +
movs   +
movs   +
push offset dword_1023994  +
lea eax [ebp+var_14] +
push eax  +
movs   +
call _CxxThrowException  +
push 800700CEh  +
jmp loc_101369F  +
***
push 800700CEh  +
lea ecx [ebp+var_20] +
call sub_1018DFF  +
mov esi eax +
lea edi [ebp+var_10] +
movs   +
movs   +
movs   +
movs   +
push offset dword_1023994  +
lea eax [ebp+var_10] +
push eax  +
call _CxxThrowException  +
mov ecx eax +
jmp loc_1004B07  +
mov [ebp+arg_C] 80070216h +
push offset dword_1013714  +
lea eax [ebp+arg_C] +
jmp loc_10136E3  +
mov [ebp+arg_C] 80070216h +
mov [esp+30h+var_30] offset dword_1013714 +
jmp loc_10136FC  +
***
push 80070057h  +
lea ecx [ebp+var_28] +
call sub_1018DFF  +
mov esi eax +
lea edi [ebp+var_18] +
movs   +
movs   +
movs   +
push offset dword_1023994  +
lea eax [ebp+var_18] +
push eax  +
movs   +
call _CxxThrowException  +
mov eax [esi+4] +
and dword ptr [esi+0Ch] 0 +
xor ecx ecx +
mov [eax] cx +
xor eax eax +
jmp loc_1003BE2  +
***
push 80070057h  +
lea ecx [ebp+var_24] +
call sub_1018DFF  +
mov esi eax +
lea edi [ebp+var_14] +
movs   +
movs   +
movs   +
push offset dword_1023994  +
lea eax [ebp+var_14] +
push eax  +
movs   +
call _CxxThrowException  +
push 6  +
jmp loc_100C0DB  +
***
push dword ptr [ebp+14h]  +
lea edi [esi+4] +
mov ecx edi +
call sub_10081ED  +
push edi  +
call sub_1008BF7  +
push dword ptr [ebp+0Ch]  +
mov ecx edi +
call sub_1008B71  +
jmp loc_1008CF8  +
and dword ptr [ebx] 0 +
push eax  +
call edi  +
jmp loc_1008D21  +
***
and dword ptr [edi] 0 +
push eax  +
call ds:SetLastError  +
jmp loc_1008DA6  +
***
mov eax [ebp-14h] +
mov eax [ebp-18h] +
mov eax [eax] +
mov [ebp+10h] eax +
mov eax offset loc_1008347 +
retn   +
***
mov ecx [ebp-18h] +
call sub_101D2A0  +
mov eax offset loc_100B9D0 +
retn   +
***
mov ecx [ebp-18h] +
call sub_101D2A0  +
mov eax offset loc_100C6C8 +
retn   +
***
mov ecx [ebp-234h] +
call sub_101D2A0  +
mov eax offset loc_1013881 +
retn   +
***
call ds:__imp_GetLastError  +
test eax eax +
jle loc_10072B8  +
and eax 0FFFFh +
or eax 80070000h +
jmp loc_10072B8  +
***
call ds:__imp_GetLastError  +
test eax eax +
jle loc_10139B0  +
and eax 0FFFFh +
or eax 80070000h +
push eax  +
lea ecx [ebp+var_20] +
call sub_1018DFF  +
mov esi eax +
lea edi [ebp+var_10] +
movs   +
movs   +
movs   +
push offset dword_1023994  +
lea eax [ebp+var_10] +
push eax  +
movs   +
call _CxxThrowException  +
call ds:__imp_GetLastError  +
test eax eax +
jle loc_10139E4  +
and eax 0FFFFh +
or eax 80070000h +
push eax  +
lea ecx [ebp+var_20] +
call sub_1018DFF  +
mov esi eax +
lea edi [ebp+var_10] +
movs   +
movs   +
movs   +
push offset dword_1023994  +
lea eax [ebp+var_10] +
push eax  +
movs   +
call _CxxThrowException  +
lea ecx [ebp+var_38] +
call sub_1018DCD  +
mov esi eax +
lea edi [ebp+var_28] +
movs   +
movs   +
movs   +
push offset dword_1023994  +
lea eax [ebp+var_28] +
push eax  +
movs   +
call _CxxThrowException  +
or [ebp+var_4] 0FFFFFFFFh +
cmp edi esi +
jz loc_100D39D  +
push edi  +
call off_1026660  +
jmp loc_100D39D  +
***
leave   +
retn   +
lea ecx [ebp+var_2C] +
call sub_1018DCD  +
mov esi eax +
lea edi [ebp+var_1C] +
movs   +
movs   +
movs   +
push offset dword_1023994  +
lea eax [ebp+var_1C] +
push eax  +
movs   +
call _CxxThrowException  +
***
push esi  +
push dword ptr [edi]  +
call ds:DeleteAce  +
jmp loc_100D24B  +
lea ecx [ebp+var_24] +
call sub_1018DCD  +
mov esi eax +
lea edi [ebp+var_14] +
movs   +
movs   +
movs   +
push offset dword_1023994  +
lea eax [ebp+var_14] +
push eax  +
movs   +
call _CxxThrowException  +
int 3  +
***
cmp eax ebx +
jle loc_100926A  +
and eax 0FFFFh +
or eax 80070000h +
jmp loc_100926A  +
call ds:__imp_GetLastError  +
cmp eax ebx +
jle loc_1013AB5  +
and eax 0FFFFh +
or eax 80070000h +
mov esi eax +
push edi  +
jmp loc_100925E  +
call ds:__imp_GetLastError  +
cmp eax ebx +
jle loc_1013AD1  +
and eax 0FFFFh +
or eax 80070000h +
mov esi eax +
mov eax [ebp+0Ch] +
push edi  +
mov [eax] ebx +
mov byte ptr [ebp-4] 2 +
call off_1026660  +
jmp loc_1009242  +
mov eax [ebp+0Ch] +
mov [eax] ebx +
mov byte ptr [ebp-4] 2 +
cmp edi ebx +
jz loc_1013AFC  +
push edi  +
call off_1026660  +
mov byte ptr [ebp-4] 1 +
cmp [ebp+8] ebx +
jz loc_1013B0E  +
push dword ptr [ebp+8]  +
call off_1026660  +
mov [ebp-4] bl +
cmp [ebp-10h] ebx +
jz loc_1013B1F  +
push dword ptr [ebp-10h]  +
call off_1026660  +
push dword ptr [ebp-14h]  +
or dword ptr [ebp-4] 0FFFFFFFFh +
call off_1026660  +
jmp loc_1009272  +
***
call ds:__imp_GetLastError  +
test eax eax +
jle loc_10049DC  +
and eax 0FFFFh +
or eax 80070000h +
jmp loc_10049DC  +
***
cmp [ebp+Msg.message] 12h +
jz loc_1013B63  +
lea eax [ebp+Msg] +
push eax  +
call ds:DispatchMessageW  +
jmp loc_100142D  +
xor eax eax +
inc eax  +
jmp loc_100145C  +
***
mov eax [esi+2Ch] +
mov ebx 80000000h +
mov edi 80h +
push ebx  +
add eax edi +
push eax  +
call sub_10044EB  +
mov eax [esi+2Ch] +
and dword ptr [eax+88h] 0 +
mov eax [esi+2Ch] +
and dword ptr [eax+90h] 0 +
push dword ptr [esi+34h]  +
call ds:SetEvent  +
test eax eax +
jnz loc_1013BCB  +
mov eax [esi+2Ch] +
push ebx  +
add eax edi +
push eax  +
call sub_1003119  +
call ds:__imp_GetLastError  +
test eax eax +
jle loc_100B370  +
and eax 0FFFFh +
or eax 80070000h +
jmp loc_100B370  +
push dword ptr [esi+3Ch]  +
mov ecx esi +
call sub_1001709  +
push 0  +
lea ecx [esi+14h] +
push ecx  +
push eax  +
mov eax [esi+60h] +
call sub_10013E1  +
push eax  +
call sub_10049CB  +
mov [ebp+var_4] eax +
test eax eax +
jge loc_1013BFD  +
mov eax [esi+2Ch] +
push ebx  +
add eax edi +
push eax  +
call sub_1003119  +
mov eax [ebp+var_4] +
jmp loc_100B370  +
mov eax [esi+2Ch] +
push 80000000h  +
sub eax 0FFFFFF80h +
push eax  +
call sub_1003119  +
mov eax ebx +
jmp loc_100B370  +
mov eax [esi+2Ch] +
push 80000000h  +
sub eax 0FFFFFF80h +
push eax  +
call sub_1003119  +
mov eax edi +
jmp loc_100B370  +
mov eax [esi+2Ch] +
push 80000000h  +
sub eax 0FFFFFF80h +
jmp loc_1013BA8  +
***
mov eax 80004003h +
jmp loc_1001592  +
cmp eax ecx +
jnb loc_1001532  +
mov ebx eax +
jmp loc_1001532  +
mov [ebp+arg_4] ebx +
jmp loc_100153B  +
cmp [ebp+var_C] 0 +
jnz loc_10015A8  +
mov [ebp+var_C] 1 +
jmp loc_10015A8  +
mov ecx [ebp+arg_0] +
mov edx [ecx] +
push eax  +
push ecx  +
call dword ptr [edx+0Ch]  +
and [ebp+var_8] 0 +
jmp loc_10015B9  +
***
mov ebx eax +
jmp loc_10014A5  +
add [ebp+var_4] ebx +
jmp loc_10014ED  +
mov eax 800705B4h +
jmp loc_1003927  +
mov esi [esi+2Ch] +
mov eax [esi+88h] +
sub eax [esi+90h] +
neg eax  +
sbb eax eax +
inc eax  +
jmp loc_1003927  +
***
mov eax 80004003h +
jmp loc_1004F03  +
cmp eax ecx +
jnb loc_1004EC5  +
mov edi eax +
jmp loc_1004EC5  +
mov [ebp+arg_4] edi +
jmp loc_1004ECE  +
test ecx 40000000h +
jnz loc_1013D23  +
mov eax [ebp+var_4] +
add eax edi +
mov [ebp+var_4] eax +
cmp eax [ebp+arg_4] +
jb loc_1013D05  +
mov ecx [ebp+arg_0] +
mov edx [ecx] +
push eax  +
push ecx  +
call dword ptr [edx+0Ch]  +
and [ebp+var_4] 0 +
mov eax [esi+60h] +
cmp eax 0FFFFFFFFh +
jz loc_1013D10  +
add [ebp+var_8] edi +
cmp [ebp+var_8] eax +
jb loc_1004ED7  +
mov eax 800705B4h +
jmp loc_1004F02  +
mov esi [esi+2Ch] +
mov eax [esi+88h] +
sub eax [esi+90h] +
neg eax  +
sbb eax eax +
inc eax  +
jmp loc_1004F02  +
***
cmp eax ecx +
jnb loc_100FC86  +
mov ebx eax +
jmp loc_100FC86  +
mov eax [esi+60h] +
cmp eax 0FFFFFFFFh +
jz loc_1013D56  +
add [ebp+var_4] ebx +
cmp [ebp+var_4] eax +
jb loc_100FC8D  +
mov eax 800705B4h +
jmp loc_100FCBA  +
***
cmp eax ecx +
jnb loc_100569D  +
mov [ebp+var_C] eax +
jmp loc_100569D  +
mov eax [esi+2Ch] +
test dword ptr [eax+80h] 80000000h +
jz loc_1013DCF  +
push 0  +
lea eax [esi+14h] +
push eax  +
push [ebp+nCount]  +
push 32h  +
pop eax  +
call sub_10013E1  +
cmp eax 102h +
jz loc_1013DA9  +
cmp eax 0FFFFFFFFh +
jz loc_1013DD9  +
test eax eax +
jnz loc_1013DCF  +
mov eax [esi+60h] +
cmp eax 0FFFFFFFFh +
jz loc_10056E5  +
add [ebp+arg_0] 32h +
cmp [ebp+arg_0] eax +
jb loc_10056E5  +
jmp loc_1013DF6  +
mov [eax+90h] ebx +
jmp loc_10056FD  +
mov eax 80040DB4h +
jmp loc_10057B2  +
call ds:__imp_GetLastError  +
test eax eax +
jle loc_10057B2  +
and eax 0FFFFh +
or eax 80070000h +
jmp loc_10057B2  +
mov eax 800705B4h +
jmp loc_10057B2  +
mov eax [esi+2Ch] +
test dword ptr [eax+80h] 80000000h +
jnz loc_1013E1C  +
push 0E9h  +
call ds:SetLastError  +
jmp loc_1013DD9  +
call ds:__imp_GetLastError  +
jmp loc_1005731  +
mov ecx [esi+2Ch] +
mov [ecx+90h] eax +
jmp loc_100576D  +
mov eax [esi+60h] +
cmp eax 0FFFFFFFFh +
jz loc_1013E43  +
mov ecx [ebp+var_C] +
add [ebp+var_10] ecx +
cmp [ebp+var_10] eax +
jnb loc_10057B9  +
jmp loc_1005750  +
cmp [esi+6] dx +
jnz loc_10057B0  +
cmp [esi+4] dx +
jz loc_10057B9  +
push 40000000h  +
sub eax 0FFFFFF80h +
push eax  +
call sub_10044EB  +
mov ecx esi +
call sub_10044CE  +
push dword ptr [esi+44h]  +
mov ecx esi +
mov [ebp+var_4] eax +
call sub_1001709  +
and [ebp+arg_0] 0 +
mov edi eax +
cmp ebx [ebp+var_14] +
jz loc_1013EF2  +
mov eax [esi+2Ch] +
test dword ptr [eax+80h] 80000000h +
jz loc_1013DCF  +
push 0  +
lea eax [esi+14h] +
push eax  +
push edi  +
push 32h  +
pop eax  +
call sub_10013E1  +
cmp eax 102h +
jz loc_1013ECC  +
cmp eax 0FFFFFFFFh +
jz loc_1013DD9  +
test eax eax +
jnz loc_1013DCF  +
mov eax [esi+60h] +
cmp eax 0FFFFFFFFh +
jz loc_1013EE1  +
add [ebp+arg_0] 32h +
cmp [ebp+arg_0] eax +
jnb loc_1013DF6  +
mov eax [esi+2Ch] +
mov ecx [eax+88h] +
cmp ecx [eax+90h] +
jnz loc_1013E92  +
mov eax [esi+4Ch] +
push 0  +
push 1  +
push eax  +
call ds:ReleaseSemaphore  +
test eax eax +
jz loc_1013F0F  +
xor eax eax +
mov [esi+4] ax +
jmp loc_10057B9  +
mov eax [esi+2Ch] +
test dword ptr [eax+80h] 80000000h +
jnz loc_1013F2A  +
mov [ebp+var_4] 80040DB4h +
jmp loc_10057B9  +
mov esi ds:__imp_GetLastError +
call esi  +
call esi  +
test eax eax +
jle loc_1013F42  +
and eax 0FFFFh +
or eax 80070000h +
mov [ebp+var_4] eax +
jmp loc_10057B9  +
***
mov eax 80004003h +
jmp loc_10016C9  +
mov [ebp+arg_4] eax +
jmp loc_10015ED  +
cmp [ebp+var_8] eax +
jb loc_100168E  +
jmp loc_1013F84  +
call ds:__imp_GetLastError  +
test eax eax +
jle loc_10016C7  +
and eax 0FFFFh +
or eax 80070000h +
jmp loc_10016C7  +
mov eax 800705B4h +
jmp loc_10016C7  +
mov eax [esi+2Ch] +
test dword ptr [eax+80h] 80000000h +
jnz loc_1013FA9  +
mov [ebp+var_4] 80040DB4h +
jmp loc_10016C4  +
mov esi ds:__imp_GetLastError +
call esi  +
call esi  +
test eax eax +
jle loc_1013FC1  +
and eax 0FFFFh +
or eax 80070000h +
mov [ebp+var_4] eax +
jmp loc_10016C4  +
***
call ds:__imp_GetLastError  +
cmp eax ebx +
jle loc_100B573  +
and eax 0FFFFh +
or eax 80070000h +
jmp loc_100B573  +
cmp eax ebx +
jle loc_1013FF4  +
and eax 0FFFFh +
or eax 80070000h +
mov ebx eax +
jmp loc_100B569  +
***
mov eax 80040DB4h +
jmp loc_1005A46  +
***
mov [ecx] edx +
jmp loc_1005937  +
***
sub eax [ebp-0Ch] +
mov [ecx] eax +
jmp loc_1005A2D  +
***
mov eax 80040DB4h +
jmp loc_1005A44  +
***
mov eax 80040DB4h +
jmp loc_100391B  +
call sub_101D741  +
cmp eax esi +
mov [ebp+var_C] eax +
jge loc_1003872  +
jmp loc_100391B  +
add eax ecx +
jmp loc_10038C0  +
mov ecx [eax+88h] +
cmp ecx [eax+90h] +
jnz loc_10038E9  +
mov [ebp+var_C] 1 +
jmp loc_10038F4  +
mov eax [ebp+var_4] +
mov ebx ecx +
sub ebx esi +
cmp ebx eax +
jnb loc_1014076  +
sub eax ebx +
mov [ebp+var_10] eax +
jmp loc_101407C  +
and [ebp+var_10] 0 +
mov ebx eax +
test ebx ebx +
jz loc_10140A6  +
mov eax [edi+2Ch] +
mov ecx [ebp+arg_0] +
lea eax [esi+eax+98h] +
push ebx  +
push eax  +
mov eax [ebp+var_8] +
add eax ecx +
push eax  +
call memcpy  +
add esi ebx +
add esp 0Ch +
cmp esi [ebp+var_18] +
jnz loc_10140A6  +
xor esi esi +
cmp [ebp+var_10] 0 +
jz loc_10140CC  +
mov eax [edi+2Ch] +
push [ebp+var_10]  +
add eax 98h +
push eax  +
mov eax [ebp+var_8] +
add ebx eax +
add ebx [ebp+arg_0] +
push ebx  +
call memcpy  +
add esp 0Ch +
add esi [ebp+var_10] +
mov ebx [ebp+var_1C] +
jmp loc_100C619  +
sub esi ebx +
jmp loc_100C638  +
mov eax 80040DB4h +
jmp loc_100391A  +
***
mov eax 80004003h +
jmp loc_1001D2A  +
mov eax 80040DB4h +
jmp loc_1001D2A  +
mov ecx [eax+88h] +
cmp ecx [eax+90h] +
jnz loc_1001CF8  +
mov [ebp+var_C] 1 +
jmp loc_1001D03  +
mov eax 80040DB4h +
jmp loc_1001D29  +
***
sub eax 8 +
jz loc_100FC12  +
sub eax 5 +
jz loc_101413F  +
dec eax  +
jnz loc_100FC0C  +
movzx eax byte ptr [ecx+8] +
jmp loc_100FBFD  +
movsx eax byte ptr [ecx+8] +
jmp loc_100FBFD  +
dec eax  +
dec eax  +
jz loc_1014158  +
dec eax  +
jnz loc_100FC29  +
jmp loc_100FBFA  +
mov eax [ecx+8] +
mov edx [ecx+0Ch] +
jmp loc_100FBFE  +
***
xor eax eax +
jmp loc_10063AC  +
***
push [ebp+CodePage]  +
call ds:IsValidCodePage  +
test eax eax +
jnz loc_100FE74  +
mov [ebp+CodePage] esi +
jmp loc_100FE74  +
mov eax 8007000Eh +
jmp loc_100FEDF  +
call ds:__imp_GetLastError  +
xor ecx ecx +
cmp eax ecx +
jle loc_10141A3  +
and eax 0FFFFh +
or eax 80070000h +
mov [ebp+var_4] eax +
cmp eax 8007007Ah +
jnz loc_100FEE6  +
push ecx  +
push ecx  +
push ebx  +
push [ebp+lpMultiByteStr]  +
push ecx  +
push [ebp+CodePage]  +
call esi  +
push [ebp+pv]  +
call ds:CoTaskMemFree  +
lea eax [edi+edi] +
push eax  +
call ds:CoTaskMemAlloc  +
mov [ebp+pv] eax +
test eax eax +
jz loc_1014208  +
push edi  +
push eax  +
push ebx  +
push [ebp+lpMultiByteStr]  +
push 0  +
push [ebp+CodePage]  +
call esi  +
test eax eax +
jnz loc_100FEC2  +
call ds:__imp_GetLastError  +
test eax eax +
jle loc_1014200  +
and eax 0FFFFh +
or eax 80070000h +
mov [ebp+var_4] eax +
jmp loc_100FEE6  +
mov [ebp+var_4] 8007000Eh +
jmp loc_100FEE6  +
push [ebp+pv]  +
call ds:CoTaskMemFree  +
jmp loc_100FEDC  +
***
mov eax 80004003h +
jmp loc_100635C  +
sub eax 2FEEh +
jnz loc_100635A  +
lea edi [ebp-20h] +
stos   +
stos   +
stos   +
stos   +
push dword ptr [esi+8]  +
lea eax [ebp-20h] +
push eax  +
mov [ebp-4] ebx +
call ds:PropVariantCopy  +
mov edi eax +
cmp edi ebx +
jl loc_1014262  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp-20h] +
push eax  +
call sub_1006331  +
mov edi eax +
cmp edi ebx +
mov byte ptr [ebp-4] 1 +
jl loc_10142D2  +
push 10h  +
call ds:CoTaskMemAlloc  +
mov ebx eax +
mov edi ebx +
neg edi  +
sbb edi edi +
and edi 7FF8FFF2h +
add edi 8007000Eh +
mov [ebp+0Ch] ebx +
js loc_10142C7  +
xor eax eax +
mov edi ebx +
stos   +
stos   +
stos   +
push ebx  +
lea ecx [ebp-20h] +
stos   +
call sub_1020F84  +
mov edi eax +
test edi edi +
jl loc_10142C7  +
push esi  +
call ds:PropVariantClear  +
mov edi eax +
test edi edi +
jl loc_10142C7  +
mov eax 100Ch +
mov [esi] ax +
mov eax ebx +
xor ebx ebx +
mov dword ptr [esi+8] 1 +
mov [esi+0Ch] eax +
xor edi edi +
test ebx ebx +
jz loc_10142D2  +
push ebx  +
call ds:CoTaskMemFree  +
lea eax [ebp-20h] +
push eax  +
call ds:PropVariantClear  +
jmp loc_100635A  +
push dword ptr [ebp-10h]  +
call ebx  +
jmp loc_100FFC6  +
push dword ptr [ebp+8]  +
call ds:CoTaskMemFree  +
jmp loc_100635A  +
***
mov eax [ebp-14h] +
and dword ptr [eax+0Ch] 0 +
mov eax [eax+4] +
xor ecx ecx +
mov [eax] cx +
mov eax offset loc_101432D +
retn   +
mov esi [ebp-14h] +
jmp loc_10104AD  +
***
mov eax [ebp-0B8h] +
and dword ptr [eax+0Ch] 0 +
mov eax [eax+4] +
xor ecx ecx +
mov [eax] cx +
mov eax offset loc_1014357 +
retn   +
mov esi [ebp-0B8h] +
jmp loc_100FB5F  +
***
xor esi esi +
jmp loc_100C771  +
***
test eax eax +
jz loc_1014375  +
lea esi [eax-1] +
jmp loc_1003F69  +
xor esi esi +
jmp loc_1003F69  +
***
xor eax eax +
jmp loc_1003F2A  +
***
mov ecx [ecx+10h] +
pop ebp  +
jmp loc_101F2CB  +
***
push 800700CEh  +
push 0D5h  +
push offset aDW7rtmEnduse_1  +
lea ecx [ebp+var_20] +
call sub_1018E2E  +
mov esi eax +
lea edi [ebp+var_10] +
movs   +
movs   +
movs   +
push offset dword_1023994  +
lea eax [ebp+var_10] +
push eax  +
movs   +
call _CxxThrowException  +
push eax  +
call sub_100A21D  +
and dword ptr [esi] 0 +
pop ecx  +
jmp loc_100B1DD  +
***
push 8007000Eh  +
push 0FCh  +
push offset aDW7rtmEnduse_1  +
lea ecx [ebp+var_20] +
call sub_1018E2E  +
mov esi eax +
lea edi [ebp+var_10] +
movs   +
movs   +
movs   +
push offset dword_1023994  +
lea eax [ebp+var_10] +
push eax  +
movs   +
call _CxxThrowException  +
***
lea eax [eax+edi+1] +
push eax  +
mov ecx esi +
call sub_1020005  +
jmp loc_100A2DF  +
***
cmp [ebp+arg_0] 0 +
mov eax offset aAccessretailtr +
jnz loc_1014438  +
mov eax offset aAccessdebugtra +
push eax  +
push [ebp+hModule]  +
call ds:__imp_GetProcAddress  +
test eax eax +
jz loc_100AAA9  +
cmp [ebp+arg_0] 0 +
jz loc_1014457  +
push offset off_1026658  +
jmp loc_101445C  +
push offset off_1026654  +
call eax  +
xor eax eax +
inc eax  +
jmp locret_100AAAB  +
***
push eax  +
call ds:CloseHandle  +
test eax eax +
jnz locret_100E8F7  +
jmp ds:__imp_GetLastError  +
***
cmp [ebp+Msg.message] 12h +
jz loc_10144B9  +
lea eax [ebp+Msg] +
push eax  +
call ds:DispatchMessageW  +
jmp loc_100F379  +
mov al 1 +
jmp loc_100F38E  +
***
mov [ebp+arg_4] esi +
jmp loc_1009B9B  +
***
lea ecx [ebp+var_20] +
call sub_1018DCD  +
mov esi eax +
lea edi [ebp+var_10] +
movs   +
movs   +
movs   +
push offset dword_1023994  +
lea eax [ebp+var_10] +
push eax  +
movs   +
call _CxxThrowException  +
call ds:__imp_GetLastError  +
push eax  +
lea ecx [ebp+var_20] +
call sub_1018DFF  +
mov esi eax +
lea edi [ebp+var_10] +
movs   +
movs   +
movs   +
push offset dword_1023994  +
lea eax [ebp+var_10] +
push eax  +
movs   +
call _CxxThrowException  +
lea eax [esi+24h] +
push eax  +
lea ecx [ebp+var_10] +
call sub_1002059  +
lea edi [esi+8] +
push edi  +
mov [ebp+var_4] ebx +
call ds:InterlockedDecrement  +
jmp loc_101453B  +
***
lea eax [esi+24h] +
push eax  +
lea ecx [ebp-10h] +
call sub_1002059  +
mov dword ptr [ebp-4] 1 +
cmp [edi] ebx +
jnz loc_101454E  +
mov ecx esi +
call sub_1009D75  +
mov ecx [esi+40h] +
call sub_1002165  +
push dword ptr [ebp-10h]  +
call ds:LeaveCriticalSection  +
jmp loc_1002FAE  +
***
mov ecx esi +
call sub_1009D75  +
mov ecx [esi+40h] +
call sub_10202F7  +
inc edi  +
jmp loc_10020D0  +
mov ecx [esi+40h] +
push 0  +
push 0FFFFFFFFh  +
call sub_1020331  +
jmp loc_10020E5  +
***
cmp eax ecx +
jz loc_1008005  +
mov [ebp+pHandles] eax +
mov [ebp+nCount] 1 +
jmp loc_1008005  +
test al al +
jz loc_1008050  +
jmp loc_100812F  +
mov eax dword_10262B0 +
mov edx dword_10262B4 +
mov ecx eax +
and ecx edi +
and edx ebx +
cmp ecx eax +
jnz loc_1008071  +
cmp edx dword_10262B4 +
jnz loc_1008071  +
push [ebp+dwMilliseconds]  +
push offset dword_1014678  +
push dword_10261BC  +
push dword_10261B8  +
call sub_1018730  +
jmp loc_1008071  +
mov eax dword_10262B0 +
mov ecx eax +
and ecx edi +
mov edi dword_10262B4 +
mov edx edi +
and edx 80000000h +
cmp ecx eax +
jnz loc_10080C4  +
cmp edx edi +
jnz loc_10080C4  +
push [ebp+var_C]  +
push offset dword_1014688  +
push dword_10261BC  +
push dword_10261B8  +
call sub_1018730  +
jmp loc_10080C4  +
mov eax dword_1026644[eax*4] +
jmp loc_101463C  +
mov eax [ebp+dwMilliseconds] +
sub eax ebx +
mov [ebp+dwMilliseconds] eax +
mov eax [ebp+var_C] +
cmp eax 102h +
jz loc_1014662  +
cmp [ebp+nCount] eax +
jbe loc_101465C  +
mov ecx [ebp+arg_0] +
cmp [ebp+eax*4+pHandles] ecx +
jnz loc_1014662  +
jmp loc_100486E  +
jnz loc_100486E  +
cmp [ebp+dwMilliseconds] 0 +
jnz loc_1008027  +
jmp loc_100486E  +
***
mov ecx esi +
call sub_10203AD  +
jmp loc_100301C  +
mov ecx esi +
call sub_102040D  +
jmp loc_1003013  +
***
lea eax [ebp-10h] +
push eax  +
lea ecx [ebp-20h] +
mov [ebp-10h] ebx +
call sub_10204C4  +
mov ecx [ebp-10h] +
cmp ecx ebx +
jz loc_10146CD  +
push 1  +
call sub_100E618  +
dec dword ptr [edi+4Ch]  +
jmp loc_1004698  +
***
push esi  +
inc edx  +
mov esi edx +
sub esi 64h +
neg esi  +
sbb esi esi +
and esi edx +
mov [ecx+8] esi +
pop esi  +
jmp loc_100D8C4  +
***
lea eax [ebp+plii] +
push eax  +
call ds:GetLastInputInfo  +
test eax eax +
jz loc_1004751  +
mov eax [ebp+plii.dwTime] +
mov [ebp+var_4] eax +
cmp eax ebx +
jnz loc_1004751  +
mov [ebp+var_4] 1 +
jmp loc_1004751  +
mov ecx edi +
sub edi [ebp+var_4] +
sub ecx eax +
cmp edi ecx +
ja loc_1004782  +
jmp loc_1004785  +
***
lea ecx [ebx-1] +
mov [eax] ecx +
jmp loc_100D888  +
***
lea eax [ebp+VersionInformation] +
push eax  +
mov [ebp+VersionInformation.dwOSVersionInfoSize] 114h +
call esi  +
jmp loc_100F9A6  +
mov eax [ebp+VersionInformation.dwMinorVersion] +
sub eax edi +
jz loc_101479C  +
dec eax  +
jz loc_1014789  +
dec eax  +
jz loc_101476C  +
mov dword_10260CC 14h +
jmp loc_100F9DD  +
cmp [ebp+var_C] 1 +
jb loc_101477D  +
mov dword_10260CC 10h +
or dword_10260CC 4 +
jmp loc_100F9DD  +
cmp [ebp+var_C] 2 +
jb loc_101477D  +
mov dword_10260CC 8 +
jmp loc_101477D  +
mov dword_10260CC 4 +
jmp loc_100F9DD  +
mov dword_10260CC 2 +
jmp loc_100F9EF  +
cmp [ebp+VersionInformation.dwMinorVersion] edi +
jz loc_10147D8  +
cmp [ebp+VersionInformation.dwMinorVersion] 0Ah +
jz loc_10147D8  +
cmp [ebp+VersionInformation.dwMinorVersion] 5Ah +
jnz loc_100F9DD  +
mov dword_10260CC 1 +
jmp loc_100F9DD  +
***
lea eax [ebp+FilePart] +
push eax  +
lea eax [ebp+LibFileName] +
push eax  +
push 104h  +
push 0  +
push esi  +
push 0  +
call ds:SearchPathW  +
test eax eax +
jz loc_1014E0D  +
mov eax [ebp+FilePart] +
test eax eax +
jnz loc_101482B  +
and dword ptr [ebp+var_41C] ebx +
lea eax [ebp+LibFileName] +
mov [ebp+FilePart] eax +
jmp loc_101483D  +
lea ecx [ebp+LibFileName] +
mov dword ptr [ebp+var_41C] ecx +
xor ecx ecx +
mov [eax-2] cx +
push 0  +
push [ebp+hModule]  +
call sub_10204F9  +
test eax eax +
jz loc_1014DF5  +
test di di +
jnz loc_1014DCD  +
mov al byte ptr dword_10260D0 +
test al 4 +
jz loc_1014BDC  +
call ds:GetUserDefaultUILanguage  +
movzx eax ax +
mov ecx 404h +
mov [ebp+var_420] eax +
cmp ax cx +
jnz loc_101488F  +
call sub_1020639  +
movzx eax ax +
mov [ebp+var_420] eax +
mov eax [ebp+arg_4] +
and eax 8 +
mov [ebp+var_424] eax +
cmp [ebp+var_424] 0 +
jz loc_1014965  +
lea eax [ebp+var_15C] +
push eax  +
push [ebp+var_420]  +
lea edi [ebp+var_208] +
lea esi [ebp+var_B0] +
call sub_1020A35  +
test eax eax +
jz loc_1014E57  +
push dword ptr [ebp+var_41C]  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
mov edx esi +
call sub_1020B24  +
mov ebx eax +
test ebx ebx +
jnz loc_1014E5B  +
push dword ptr [ebp+var_41C]  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
lea edx [ebp+var_15C] +
call sub_1020B24  +
mov ebx eax +
test ebx ebx +
jnz loc_1014E5B  +
cmp word ptr [ebp+var_208] ax +
jz loc_1014944  +
push dword ptr [ebp+var_41C]  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
mov edx edi +
call sub_1020B24  +
mov ebx eax +
test ebx ebx +
jnz loc_1014E5B  +
mov eax 0C04h +
cmp word ptr [ebp+var_420] ax +
jnz loc_1014B10  +
mov [ebp+var_420] 404h +
jmp loc_101489B  +
movzx eax word ptr [ebp+var_420] +
push eax  +
push offset aMui04hx  +
lea eax [ebp+var_B0] +
push 55h  +
push eax  +
call sub_1008DB5  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
add esp 10h +
push dword ptr [ebp+var_41C]  +
lea edx [ebp+var_B0] +
call sub_1020B24  +
mov ebx eax +
test ebx ebx +
jnz loc_1014E5B  +
lea eax [ebp+var_15C] +
push eax  +
push [ebp+var_420]  +
xor edi edi +
lea esi [ebp+var_B0] +
call sub_1020A35  +
test eax eax +
jz loc_1014A17  +
push 2  +
lea eax [ebp+var_15C] +
push eax  +
call sub_1020C4D  +
movzx eax ax +
test ax ax +
jz loc_1014A17  +
movzx eax ax +
push eax  +
push offset aMui04hx  +
mov eax esi +
push 55h  +
push eax  +
call sub_1008DB5  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
add esp 10h +
push dword ptr [ebp+var_41C]  +
mov edx esi +
call sub_1020B24  +
mov ebx eax +
test ebx ebx +
jnz loc_1014E5B  +
mov eax 0C04h +
cmp word ptr [ebp+var_420] ax +
jz loc_1014956  +
call ds:GetSystemDefaultUILanguage  +
movzx esi ax +
mov [ebp+var_424] esi +
cmp si word ptr [ebp+var_420] +
jz loc_1014AF4  +
movzx eax si +
push eax  +
push offset aMui04hx  +
lea eax [ebp+var_B0] +
push 55h  +
push eax  +
call sub_1008DB5  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
add esp 10h +
push dword ptr [ebp+var_41C]  +
lea edx [ebp+var_B0] +
call sub_1020B24  +
mov ebx eax +
test ebx ebx +
jnz loc_1014E5B  +
lea eax [ebp+var_15C] +
push eax  +
push esi  +
xor edi edi +
lea esi [ebp+var_B0] +
call sub_1020A35  +
test eax eax +
jz loc_1014AEE  +
push 2  +
lea eax [ebp+var_15C] +
push eax  +
call sub_1020C4D  +
movzx eax ax +
test ax ax +
jz loc_1014AEE  +
movzx eax ax +
push eax  +
push offset aMui04hx  +
mov eax esi +
push 55h  +
push eax  +
call sub_1008DB5  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
add esp 10h +
push dword ptr [ebp+var_41C]  +
mov edx esi +
call sub_1020B24  +
mov ebx eax +
test ebx ebx +
jnz loc_1014E5B  +
mov esi [ebp+var_424] +
mov eax 409h +
mov ecx eax +
cmp cx word ptr [ebp+var_420] +
jz loc_1014DA5  +
cmp ax si +
jmp loc_1014D7D  +
call ds:GetSystemDefaultUILanguage  +
movzx eax ax +
mov [ebp+var_424] eax +
cmp ax word ptr [ebp+var_420] +
jz loc_1014BC3  +
lea ecx [ebp+var_15C] +
push ecx  +
push eax  +
lea edi [ebp+var_208] +
lea esi [ebp+var_B0] +
call sub_1020A35  +
test eax eax +
jz loc_1014DF5  +
push dword ptr [ebp+var_41C]  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
mov edx esi +
call sub_1020B24  +
mov ebx eax +
test ebx ebx +
jnz loc_1014E5B  +
push dword ptr [ebp+var_41C]  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
lea edx [ebp+var_15C] +
call sub_1020B24  +
mov ebx eax +
test ebx ebx +
jnz loc_1014E5B  +
cmp word ptr [ebp+var_208] ax +
jz loc_1014BC3  +
push dword ptr [ebp+var_41C]  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
mov edx edi +
call sub_1020B24  +
mov ebx eax +
test ebx ebx +
jnz loc_1014E5B  +
mov eax 409h +
mov ecx eax +
cmp cx word ptr [ebp+var_420] +
jnz loc_1014C9A  +
jmp loc_1014DA5  +
test al 3 +
jz loc_1014DF5  +
call sub_10206AB  +
test byte ptr [ebp+arg_4] 8 +
movzx eax ax +
mov [ebp+var_424] eax +
jz loc_1014CC3  +
lea ecx [ebp+var_15C] +
push ecx  +
push eax  +
lea edi [ebp+var_208] +
lea esi [ebp+var_B0] +
call sub_1020A35  +
test eax eax +
jz loc_1014DF5  +
push dword ptr [ebp+var_41C]  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
mov edx esi +
call sub_1020B24  +
mov ebx eax +
test ebx ebx +
jnz loc_1014E5B  +
push dword ptr [ebp+var_41C]  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
lea edx [ebp+var_15C] +
call sub_1020B24  +
mov ebx eax +
test ebx ebx +
jnz loc_1014E5B  +
cmp word ptr [ebp+var_208] ax +
jz loc_1014C93  +
push dword ptr [ebp+var_41C]  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
mov edx edi +
call sub_1020B24  +
mov ebx eax +
test ebx ebx +
jnz loc_1014E5B  +
mov eax 409h +
mov ecx eax +
cmp cx word ptr [ebp+var_424] +
jz loc_1014DA5  +
lea ecx [ebp+var_15C] +
push ecx  +
push eax  +
xor edi edi +
lea esi [ebp+var_B0] +
call sub_1020A35  +
mov edx esi +
jmp loc_1014D84  +
movzx eax ax +
push eax  +
push offset aMui04hx  +
lea eax [ebp+var_B0] +
push 55h  +
push eax  +
call sub_1008DB5  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
add esp 10h +
push dword ptr [ebp+var_41C]  +
lea edx [ebp+var_B0] +
call sub_1020B24  +
mov ebx eax +
test ebx ebx +
jnz loc_1014E5B  +
lea eax [ebp+var_15C] +
push eax  +
push [ebp+var_424]  +
xor edi edi +
lea esi [ebp+var_B0] +
call sub_1020A35  +
test eax eax +
jz loc_1014D71  +
push 2  +
lea eax [ebp+var_15C] +
push eax  +
call sub_1020C4D  +
movzx eax ax +
test ax ax +
jz loc_1014D71  +
movzx eax ax +
push eax  +
push offset aMui04hx  +
mov eax esi +
push 55h  +
push eax  +
call sub_1008DB5  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
add esp 10h +
push dword ptr [ebp+var_41C]  +
mov edx esi +
call sub_1020B24  +
mov ebx eax +
test ebx ebx +
jnz loc_1014E5B  +
mov eax 409h +
cmp ax word ptr [ebp+var_424] +
jz loc_1014DA5  +
mov edx offset aMui0409 +
push dword ptr [ebp+var_41C]  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
call sub_1020B24  +
mov ebx eax +
test ebx ebx +
jnz loc_1014E5B  +
push dword ptr [ebp+var_41C]  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
xor edx edx +
call sub_1020B24  +
mov ebx eax +
test ebx ebx +
jz loc_1014E57  +
jmp loc_1014E5B  +
test byte ptr dword_10260D0 7 +
jz loc_1014DF5  +
test byte ptr [ebp+arg_4] 8 +
jz loc_1014E1E  +
lea eax [ebp+var_15C] +
push eax  +
push edi  +
xor edi edi +
lea esi [ebp+var_B0] +
call sub_1020A35  +
test eax eax +
jnz loc_1014E38  +
test byte ptr [ebp+arg_4] 10h +
jz loc_1014E6E  +
push dword ptr [ebp+wLanguage]  +
push [ebp+hModule]  +
call sub_10204F9  +
test eax eax +
jnz loc_1014E6E  +
push [ebp+hModule]  +
call ds:__imp_FreeLibrary  +
jmp loc_100F949  +
movzx eax di +
push eax  +
push offset aMui04hx  +
lea eax [ebp+var_B0] +
push 55h  +
push eax  +
call sub_1008DB5  +
add esp 10h +
push dword ptr [ebp+var_41C]  +
mov eax [ebp+FilePart] +
mov ecx [ebp+hModule] +
lea edx [ebp+var_B0] +
call sub_1020B24  +
mov ebx eax +
test ebx ebx +
jz loc_1014DF5  +
push [ebp+hModule]  +
call ds:__imp_FreeLibrary  +
mov eax ebx +
jmp loc_100F934  +
test byte ptr [ebp+hModule] 1 +
jz loc_1014EE6  +
push [ebp+hModule]  +
call ds:__imp_FreeLibrary  +
call sub_100F952  +
test al 38h +
jz loc_1014EC3  +
push [ebp+FilePart]  +
lea eax [ebp+LibFileName] +
push dword ptr [ebp+var_41C]  +
push offset aSS  +
push 104h  +
push eax  +
call sub_1008DB5  +
add esp 14h +
push 0  +
push 1  +
lea eax [ebp+LibFileName] +
push eax  +
call sub_10205AC  +
jmp loc_1014EE0  +
call sub_100F952  +
push 0  +
and eax 26h +
pop eax  +
setnz al  +
push eax  +
push 0  +
push [ebp+lpLibFileName]  +
call ds:LoadLibraryExW  +
mov [ebp+hModule] eax +
mov eax [ebp+hModule] +
jmp loc_100F934  +
***
cmp [esi+8] eax +
jz loc_1010125  +
mov ecx [esi+10h] +
mov edx [ecx] +
push eax  +
push edi  +
push offset unk_102663C  +
call dword ptr [edx+4]  +
jmp loc_1010148  +
***
cmp [esi+8] ebx +
jz loc_1005B95  +
mov ecx [esi+10h] +
mov eax [ecx] +
push ebx  +
push edi  +
push offset unk_102663C  +
call dword ptr [eax+4]  +
jmp loc_1005B95  +
***
lea eax [ebp+var_18] +
push eax  +
push [ebp+arg_0]  +
call sub_1020F16  +
push ebx  +
push 18h  +
lea edx [ebp+var_18] +
push edx  +
jmp loc_100630D  +
add dword ptr [esi] 18h +
jmp loc_1006325  +
***
lea eax [ebp+var_44] +
push eax  +
push [ebp+var_48]  +
call sub_1020EA1  +
push ebx  +
push 40h  +
lea edx [ebp+var_44] +
push edx  +
jmp loc_10060F4  +
add dword ptr [esi] 40h +
jmp loc_100610C  +
***
mov eax 80004003h +
jmp loc_1004ACC  +
mov eax 80040D12h +
jmp loc_1004ACC  +
***
mov eax 80004003h +
jmp loc_1004A33  +
mov eax 80040D12h +
jmp loc_1004A33  +
***
mov eax 80040D12h +
jmp loc_1005822  +
***
mov edx ecx +
shr edx 18h +
shl ecx 8 +
xor ecx [esi+edx*4] +
movzx edx byte ptr [edi] +
xor ecx edx +
dec ebx  +
inc edi  +
dec eax  +
jmp loc_1003FA4  +
***
push 8007000Eh  +
push 41h  +
push offset aDW7rtmEnduse_2  +
lea ecx [ebp+var_24] +
call sub_1018E2E  +
mov esi eax +
lea edi [ebp+var_14] +
movs   +
movs   +
movs   +
push offset dword_1023994  +
lea eax [ebp+var_14] +
push eax  +
movs   +
call _CxxThrowException  +
int 3  +
***
mov eax 7D0h +
retn   +
push 0  +
push 2  +
push 5  +
call sub_100ABFD  +
neg eax  +
sbb eax eax +
and eax 2 +
add eax 7D1h +
retn   +
***
retf 0  +
***
retn   +
***
retn 0  +
***
retf   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jle loc_101854B  +
and eax 0FFFFh +
or eax 80070000h +
pop ebp  +
retn 4  +
***
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push offset dword_1018580  +
lea eax [ebp-4] +
push eax  +
mov dword ptr [ebp-4] 1 +
call _CxxThrowException  +
int 3  +
nop   +
nop   +
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ecx+0Ch] +
xor eax eax +
push eax  +
push eax  +
push [ebp+cchMultiByte]  +
inc edx  +
push [ebp+lpMultiByteStr]  +
push edx  +
push dword ptr [ecx+4]  +
push eax  +
push eax  +
call ds:WideCharToMultiByte  +
pop ebp  +
retn 8  +
***
mov edx [ecx+0Ch] +
xor eax eax +
push eax  +
push eax  +
push eax  +
push eax  +
inc edx  +
push edx  +
push dword ptr [ecx+4]  +
push eax  +
push eax  +
call ds:WideCharToMultiByte  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
test [ebp+arg_0] 1 +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_1001D4C +
jz loc_10185F4  +
push esi  +
call off_1026660  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+lpString]  +
mov esi ecx +
call sub_100B263  +
mov dword ptr [esi] offset off_1003AC8 +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
push eax  +
call ds:LeaveCriticalSection  +
retn   +
***
retn   +
***
push ecx  +
call ds:DeleteCriticalSection  +
retn   +
***
call off_1026660  +
and dword ptr [esi] 0 +
pop esi  +
retn   +
***
mov dword ptr [ecx] offset off_1001D4C +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_C] +
sub esp 10h +
test ecx ecx +
jz loc_10186A2  +
mov eax ecx +
push esi  +
lea esi [eax+2] +
mov dx [eax] +
inc eax  +
inc eax  +
test dx dx +
jnz loc_101868D  +
sub eax esi +
sar eax 1 +
lea eax [eax+eax+2] +
pop esi  +
jmp loc_10186A5  +
push 0Ah  +
pop eax  +
test ecx ecx +
jnz loc_10186AE  +
mov ecx offset aNull +
and [ebp+var_C] 0 +
and [ebp+var_4] 0 +
mov [ebp+var_8] eax +
lea eax [ebp+var_10] +
push eax  +
push 1  +
push [ebp+arg_8]  +
mov [ebp+var_10] ecx +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call ds:EventWrite  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push 4  +
lea eax [ebp+arg_C] +
mov [ebp+var_20] eax +
pop eax  +
mov [ebp+var_18] eax +
mov [ebp+var_8] eax +
lea eax [ebp+var_20] +
push eax  +
push 2  +
push [ebp+arg_8]  +
xor ecx ecx +
push [ebp+arg_4]  +
lea edx [ebp+arg_10] +
push [ebp+arg_0]  +
mov [ebp+var_1C] ecx +
mov [ebp+var_14] ecx +
mov [ebp+var_10] edx +
mov [ebp+var_C] ecx +
mov [ebp+var_4] ecx +
call ds:EventWrite  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
and [ebp+var_C] 0 +
and [ebp+var_4] 0 +
lea eax [ebp+arg_C] +
mov [ebp+var_10] eax +
lea eax [ebp+var_10] +
push eax  +
push 1  +
push [ebp+arg_8]  +
mov [ebp+var_8] 4 +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call ds:EventWrite  +
leave   +
retn 10h  +
***
cmp dword ptr [eax+4] 0FFFFFFFFh +
jnz loc_101878C  +
cmp dword ptr [eax] 8 +
jb loc_101878C  +
mov eax [eax+8] +
mov eax [eax] +
dec eax  +
jz loc_1018788  +
sub eax 6 +
jz loc_1018788  +
sub eax 6 +
jnz loc_101878C  +
xor eax eax +
inc eax  +
retn   +
xor eax eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
mov esi ecx +
mov eax [esi+0Ch] +
push edi  +
mov edi [ebp+8] +
lea ecx [eax+eax+4] +
mov [ebp-8] ecx +
xor ebx ebx +
lea ecx [ebp-4] +
push ecx  +
push ebx  +
push dword ptr [ebp+0Ch]  +
inc eax  +
push edi  +
push eax  +
push dword ptr [esi+4]  +
mov [ebp-4] ebx +
push 400h  +
push ebx  +
call ds:WideCharToMultiByte  +
cmp [ebp-4] ebx +
jz loc_1018813  +
mov eax [ebp+0Ch] +
cmp eax ebx +
jnz loc_10187E1  +
cmp edi ebx +
jnz loc_10187E1  +
mov eax [ebp-8] +
jmp loc_1018813  +
cmp eax [ebp-8] +
jnb loc_10187F2  +
push 7Ah  +
call ds:SetLastError  +
xor eax eax +
jmp loc_1018813  +
mov byte ptr [edi] 0FFh +
mov byte ptr [edi+1] 0FEh +
mov ebx [esi+0Ch] +
lea ebx [ebx+ebx+2] +
push ebx  +
push dword ptr [esi+4]  +
add edi 2 +
push edi  +
call memcpy  +
add esp 0Ch +
lea eax [ebx+2] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
push edi  +
xor edi edi +
lea eax [ebp-4] +
push eax  +
push edi  +
push edi  +
mov esi ecx +
mov eax [esi+0Ch] +
push edi  +
inc eax  +
push eax  +
push dword ptr [esi+4]  +
mov [ebp-4] edi +
push 400h  +
push edi  +
call ds:WideCharToMultiByte  +
cmp [ebp-4] edi +
jz loc_1018855  +
mov eax [esi+0Ch] +
lea eax [eax+eax+4] +
pop edi  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1002011  +
test byte ptr [ebp+8] 1 +
jz loc_1018878  +
push esi  +
call off_1026660  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_10030A0  +
test byte ptr [ebp+8] 1 +
jz loc_101889E  +
push esi  +
call off_1026660  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
test byte ptr [ebp+8] 1 +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_1001F80 +
jz loc_10188C5  +
push esi  +
call off_1026660  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_4] 4 +
jb loc_10188FA  +
mov eax [ebp+arg_0] +
mov cl [eax] +
test cl cl +
jz loc_10188FA  +
cmp cl 0FFh +
jnz loc_10188FA  +
mov al [eax+1] +
test al al +
jz loc_10188FA  +
cmp al 0FEh +
jnz loc_10188FA  +
xor eax eax +
inc eax  +
jmp loc_10188FC  +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
cmp eax 0FFFFFFFFh +
jz loc_1018919  +
add eax 0FFFFFFFCh +
shr eax 1 +
jmp loc_101891C  +
or eax 0FFFFFFFFh +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
cmp dword_102624C 0 +
jz locret_101898A  +
mov edx dword_10269AC +
mov eax off_1026658 +
push ebx  +
mov ebx [eax+0Ch] +
push edi  +
mov edi edx +
imul edi edi +
cmp dword ptr [edi+ebx] 2 +
pop edi  +
pop ebx  +
jl locret_101898A  +
push dword ptr [ecx+0Ch]  +
mov [ebp+var_4] eax +
push dword ptr [ecx+8]  +
lea eax [ebp+var_14] +
push dword ptr [ecx+4]  +
mov [ebp+var_14] offset aDW7rtmEnduse_3 +
push dword ptr [ecx]  +
mov [ebp+var_10] 0F4h +
push offset aExceptionHr0x0  +
push eax  +
mov [ebp+var_C] edx +
mov [ebp+var_8] 2 +
call sub_101FFD0  +
add esp 18h +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+lpArguments] +
push esi  +
test ebx ebx +
jnz loc_1018A95  +
push ebx  +
push ebx  +
push 1  +
push 0C0000005h  +
call ds:RaiseException  +
mov esi [ebx+8] +
test esi esi +
jz loc_1018AB3  +
push edi  +
push dword ptr [esi+4]  +
call dword ptr [esi]  +
mov edi [esi+8] +
push esi  +
call off_1026660  +
mov esi edi +
test edi edi +
jnz loc_1018A9D  +
pop edi  +
and dword ptr [ebx+8] 0 +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
add ecx 4 +
jmp sub_1001F05  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
lea ecx [esi+4] +
mov dword ptr [esi] offset off_1003454 +
call sub_1001F05  +
test byte ptr [ebp+8] 1 +
jz loc_1018AF8  +
push esi  +
call off_1026660  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov dword ptr [ecx] offset off_1002038 +
add ecx 10h +
jmp sub_10030A0  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+0Ch] +
test esi esi +
jnz loc_1018B2B  +
mov eax 80004003h +
jmp loc_1018B37  +
mov ecx [ebp+8] +
call sub_1005293  +
mov [esi] eax +
xor eax eax +
pop esi  +
pop ebp  +
retn 8  +
***
call ds:PropVariantClear  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_100E1FF  +
test byte ptr [ebp+8] 1 +
jz loc_1018B6A  +
push esi  +
call off_1026660  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi] +
test eax eax +
jz loc_1018B90  +
push dword ptr [esi+8]  +
push dword ptr [esi+4]  +
push eax  +
push dword ptr [esi+0Ch]  +
call sub_1006B85  +
push 0  +
mov ecx esi +
call sub_1001F59  +
push 0  +
lea ecx [esi+4] +
call sub_1001F59  +
push 0  +
lea ecx [esi+8] +
call sub_1001F59  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push offset off_1018BD0  +
push ecx  +
call sub_100C13D  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jnz loc_1018C00  +
mov eax 80070057h +
jmp loc_1018C5D  +
push esi  +
mov esi [eax] +
test esi esi +
jnz loc_1018C0E  +
mov eax 80070057h +
jmp loc_1018C5C  +
movzx eax word ptr [esi] +
push edi  +
push 13h  +
pop ecx  +
mov edi 1013h +
cmp cx ax +
jz loc_1018C2D  +
mov ecx edi +
cmp cx ax +
jz loc_1018C2D  +
mov eax 80070057h +
jmp loc_1018C5B  +
mov ecx edi +
cmp cx ax +
jz loc_1018C59  +
push 4  +
call ds:CoTaskMemAlloc  +
test eax eax +
jnz loc_1018C47  +
mov eax 8007000Eh +
jmp loc_1018C5B  +
mov ecx [esi+8] +
mov [esi] di +
mov dword ptr [esi+8] 1 +
mov [esi+0Ch] eax +
mov [eax] ecx +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+8] +
push edi  +
push dword ptr [ebp+10h]  +
mov edi ecx +
push esi  +
call sub_10188D1  +
push dword ptr [ebp+10h]  +
mov ecx edi +
test eax eax +
jz loc_1018C9A  +
call sub_1018905  +
push eax  +
push dword ptr [ebp+0Ch]  +
add esi 2 +
push esi  +
mov ecx edi +
call sub_1003AE9  +
jmp loc_1018CA3  +
push dword ptr [ebp+0Ch]  +
push esi  +
call sub_101D17C  +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push offset off_1018CF0  +
push ecx  +
call sub_100C13D  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+10h]  +
mov ecx [ebp+8] +
push dword ptr [ebp+0Ch]  +
call sub_1018CD4  +
pop ebp  +
retn 0Ch  +
***
call sub_1005BF5  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+10h]  +
mov ecx [ebp+8] +
push dword ptr [ebp+0Ch]  +
call sub_1018BB4  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
push 0  +
mov dword ptr [esi] offset off_1001E6C +
call sub_1001EE0  +
test byte ptr [ebp+8] 1 +
jz loc_1018D7A  +
push esi  +
call off_1026660  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
push 0FFFFFFFFh  +
mov dword ptr [esi] offset off_1005BBC +
call sub_1005BF5  +
test byte ptr [ebp+8] 1 +
jz loc_1018DA8  +
push esi  +
call off_1026660  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
cmp dword ptr [ecx+8] 0 +
jz loc_1018DBF  +
mov ecx [ecx+4] +
jmp loc_1018DC1  +
xor ecx ecx +
push ecx  +
call sub_1005EC8  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call ds:__imp_GetLastError  +
or dword ptr [esi+0Ch] 0FFFFFFFFh +
mov [esi] eax +
mov eax [ebp+4] +
mov ecx esi +
mov [esi+4] eax +
mov dword ptr [esi+8] offset dword_10151E8 +
call sub_1018925  +
mov eax esi +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
mov esi ecx +
or dword ptr [esi+0Ch] 0FFFFFFFFh +
mov [esi] eax +
mov eax [ebp+4] +
mov [esi+4] eax +
mov dword ptr [esi+8] offset dword_10151E8 +
call sub_1018925  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_8] +
push esi  +
mov esi ecx +
mov [esi] eax +
mov eax [ebp+4] +
mov [esi+4] eax +
mov eax [ebp+arg_0] +
mov [esi+8] eax +
mov eax [ebp+arg_4] +
mov [esi+0Ch] eax +
call sub_1018925  +
mov eax esi +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push [ebp+hToken]  +
call ds:ImpersonateLoggedOnUser  +
test eax eax +
jnz locret_1018EC6  +
lea ecx [ebp+var_20] +
call sub_1018DCD  +
mov esi eax +
lea edi [ebp+var_10] +
movs   +
movs   +
movs   +
push offset dword_1023994  +
lea eax [ebp+var_10] +
push eax  +
movs   +
call _CxxThrowException  +
leave   +
retn 4  +
***
inc eax  +
retn 10h  +
***
mov edi edi +
push esi  +
lea esi [ecx+9Ch] +
mov eax [esi] +
test eax eax +
jz loc_1018EF9  +
cmp dword ptr [ecx+98h] 0 +
jz loc_1018EF9  +
push eax  +
call ds:RegCloseKey  +
and dword ptr [esi] 0 +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_100EFE9  +
cmp word ptr [esi+1B0h] 0 +
jnz loc_1018F64  +
cmp word ptr [esi+1A4h] 0 +
jz loc_1018F64  +
test byte ptr dword_10269D0 1 +
mov esi offset dword_10269C0 +
jnz loc_1018F50  +
or dword_10269D0 1 +
push offset String  +
mov ecx esi +
call sub_1018600  +
push offset sub_1023825  +
call sub_100814C  +
pop ecx  +
mov eax [ebp+arg_0] +
and dword ptr [eax] 0 +
mov ecx dword_10269CC +
mov [eax+4] ecx +
mov [eax+8] esi +
jmp loc_1018F7A  +
movzx eax word ptr [esi+1AEh] +
push eax  +
push [ebp+arg_0]  +
lea ecx [esi+10h] +
call sub_100B751  +
mov eax [ebp+arg_0] +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_100EA52  +
test byte ptr [ebp+8] 1 +
jz loc_1018F9E  +
push esi  +
call off_1026660  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
push edi  +
xor edi edi +
mov [esi+4] edi +
mov dword ptr [esi] offset off_1015238 +
or dword ptr [esi+10h] 0FFFFFFFFh +
lea ecx [esi+14h] +
mov dword ptr [esi+0Ch] offset off_1005BBC +
call sub_1003DBC  +
mov [esi+0ACh] edi +
mov [esi+0B0h] edi +
mov [esi+0D0h] edi +
mov [esi+0D4h] edi +
mov [esi+0B4h] edi +
mov [esi+0B8h] edi +
mov [esi+0BCh] edi +
mov [esi+0C0h] edi +
mov [esi+0C4h] edi +
mov [esi+0C8h] edi +
pop edi  +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
lea ecx [esi+14h] +
mov dword ptr [esi] offset off_1015238 +
call sub_1001F05  +
lea ecx [esi+0Ch] +
push 0FFFFFFFFh  +
mov dword ptr [ecx] offset off_1005BBC +
call sub_1005BF5  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+8] +
add esi 0Ch +
push 0FFFFFFFFh  +
mov ecx esi +
call sub_1005BF5  +
push dword ptr [ebp+0Ch]  +
mov ecx esi +
call sub_1005BF5  +
xor eax eax +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 84h +
push esi  +
push edi  +
xor edi edi +
mov esi eax +
mov [ebp+var_4] 5 +
cmp dword_1026678 edi +
jz loc_10190C0  +
mov ecx [esi+0Ch] +
cmp ecx 32h +
jb loc_10190C0  +
mov eax [esi+4] +
push edi  +
lea edx [ebp+var_4] +
push edx  +
lea edx [ebp+var_84] +
push edx  +
push ecx  +
push eax  +
call dword_1026670  +
cmp eax edi +
jle loc_10190B8  +
and eax 0FFFFh +
or eax 80070000h +
cmp eax edi +
jl loc_10191C6  +
jmp loc_10190C3  +
mov [ebp+var_4] edi +
push ebx  +
mov ebx ds:GetSystemDefaultLCID +
cmp [ebp+var_4] edi +
jz loc_10190D8  +
cmp dword ptr [esi+0Ch] 96h +
jnb loc_1019110  +
call ebx  +
and eax 3FFh +
xor esi esi +
cmp [ebp+var_4] edi +
jle loc_1019100  +
mov edx [ebp+var_4] +
lea ecx [ebp+var_84] +
cmp [ecx] eax +
jnz loc_10190F6  +
xor esi esi +
inc esi  +
add ecx 10h +
dec edx  +
jnz loc_10190EF  +
cmp esi edi +
jnz loc_1019110  +
mov ecx [ebp+var_4] +
shl ecx 4 +
inc [ebp+var_4]  +
mov [ebp+ecx+var_84] eax +
mov edi ds:CoTaskMemAlloc +
push 10h  +
call edi  +
mov esi eax +
test esi esi +
jnz loc_101914E  +
push 8007000Eh  +
push 824h  +
push offset aDW7rtmEnduserM  +
lea ecx [ebp+var_24] +
call sub_1018E2E  +
mov esi eax +
lea edi [ebp+var_14] +
movs   +
movs   +
movs   +
push offset dword_1023994  +
lea eax [ebp+var_14] +
push eax  +
movs   +
call _CxxThrowException  +
cmp [ebp+var_4] 0 +
jnz loc_1019168  +
call ebx  +
and eax 3FFh +
mov [ebp+var_84] eax +
mov [ebp+var_4] 1 +
mov eax 1013h +
mov [esi] ax +
mov eax [ebp+var_4] +
mov [esi+8] eax +
mov eax [ebp+var_4] +
shl eax 2 +
push eax  +
call edi  +
mov [esi+0Ch] eax +
pop ebx  +
test eax eax +
jnz loc_101919A  +
push esi  +
call ds:CoTaskMemFree  +
push 8007000Eh  +
push 837h  +
jmp loc_101912A  +
xor eax eax +
cmp [ebp+var_4] eax +
jle loc_10191BF  +
lea ecx [ebp+var_84] +
movzx edx word ptr [ecx] +
mov edi [esi+0Ch] +
or edx 400h +
mov [edi+eax*4] edx +
inc eax  +
add ecx 10h +
cmp eax [ebp+var_4] +
jl loc_10191A7  +
mov eax [ebp+arg_0] +
mov [eax] esi +
xor eax eax +
pop edi  +
pop esi  +
leave   +
retn 4  +
***
call sub_10039ED  +
mov eax [ebp+8] +
mov ebx [ebp+0Ch] +
push 34h  +
mov [ebp-54h] eax +
lea eax [ebp-44h] +
push 0  +
push eax  +
call memset  +
mov ecx [ebp-54h] +
add esp 0Ch +
push 2  +
pop eax  +
mov [ebp-40h] eax +
mov [ebp-3Ch] eax +
mov esi offset dword_100779C +
lea edi [ebp-34h] +
movs   +
movs   +
movs   +
movs   +
xor esi esi +
lea eax [ebp-7Ch] +
inc esi  +
push eax  +
add ecx 41Ch +
mov [ebp-24h] esi +
mov dword ptr [ebp-20h] 19h +
call sub_1018F03  +
mov ecx [eax+8] +
mov ecx [ecx+4] +
mov eax [eax] +
lea edx [ebp-50h] +
push edx  +
lea edx [ebp-4Ch] +
lea eax [ecx+eax*2] +
mov ecx [ebx] +
push edx  +
push eax  +
push ebx  +
call dword ptr [ecx+4Ch]  +
mov ecx [ebp-4Ch] +
xor ebx ebx +
mov [ebp-48h] eax +
cmp ecx ebx +
jnz loc_101925E  +
push esi  +
push 1027h  +
call sub_1020F47  +
mov ecx [ebp-4Ch] +
xor eax eax +
cmp [ebp-48h] ebx +
lea edi [ebp-68h] +
stos   +
stos   +
stos   +
stos   +
jl loc_10192C1  +
shl ecx 4 +
push ecx  +
call ds:CoTaskMemAlloc  +
cmp eax ebx +
jnz loc_1019281  +
mov dword ptr [ebp-48h] 8007000Eh +
cmp [ebp-48h] ebx +
jl loc_10192C1  +
mov edx [ebp-4Ch] +
mov ecx 100Ch +
mov [ebp-68h] cx +
xor ecx ecx +
mov [ebp-60h] edx +
mov [ebp-5Ch] eax +
cmp edx ebx +
jbe loc_10192C1  +
xor eax eax +
mov esi [ebp-5Ch] +
push 41h  +
pop edx  +
mov [eax+esi] dx +
mov edx [ebp-5Ch] +
mov [eax+edx+8] ebx +
mov edx [ebp-5Ch] +
mov [eax+edx+0Ch] ebx +
inc ecx  +
add eax 10h +
cmp ecx [ebp-4Ch] +
jb loc_10192A0  +
xor eax eax +
cmp [ebp-48h] ebx +
mov [ebp-58h] eax +
jl loc_101936E  +
xor edi edi +
cmp eax [ebp-60h] +
jnb loc_1019347  +
mov ebx eax +
mov eax [ebp-50h] +
shl ebx 3 +
mov eax [ebx+eax] +
test eax eax +
jz loc_1019339  +
mov ecx [ebp-5Ch] +
push eax  +
lea esi [edi+ecx+8] +
call ds:CoTaskMemAlloc  +
mov [esi+4] eax +
test eax eax +
jnz loc_1019301  +
mov dword ptr [ebp-48h] 8007000Eh +
cmp dword ptr [ebp-48h] 0 +
jl loc_1019336  +
mov ecx [ebp-50h] +
mov ecx [ebx+ecx] +
mov [esi] ecx +
mov edx [ebp-50h] +
push dword ptr [ebx+edx+4]  +
push eax  +
push ecx  +
call ds:CopySid  +
test eax eax +
jnz loc_1019336  +
push dword ptr [esi+4]  +
call ds:CoTaskMemFree  +
and dword ptr [esi] 0 +
call sub_100975B  +
mov [ebp-48h] eax +
add edi 10h +
mov eax [ebp-58h] +
inc eax  +
xor ebx ebx +
cmp [ebp-48h] ebx +
mov [ebp-58h] eax +
jge loc_10192D1  +
cmp [ebp-48h] ebx +
jl loc_101936E  +
mov ecx [ebp-54h] +
lea eax [ebp-44h] +
push eax  +
call sub_1005FEF  +
cmp eax ebx +
mov [ebp-48h] eax +
jl loc_101936E  +
mov ecx [ebp-54h] +
lea eax [ebp-68h] +
push eax  +
call sub_1006177  +
mov [ebp-48h] eax +
lea ecx [ebp-70h] +
call unknown_libname_1  +
push dword ptr [ebp-4Ch]  +
lea ecx [ebp-70h] +
push dword ptr [ebp-50h]  +
mov [ebp-4] ebx +
call sub_101C5D7  +
lea eax [ebp-68h] +
push eax  +
call ds:PropVariantClear  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-70h] +
call sub_101C59D  +
mov eax [ebp-48h] +
call sub_1003A2A  +
retn 8  +
***
mov dword ptr [ecx] offset off_10035B0 +
jmp sub_100EA52  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_10035B0 +
call sub_100EA52  +
test byte ptr [ebp+8] 1 +
jz loc_10193F0  +
push esi  +
call off_1026660  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_1018FAA  +
mov dword ptr [esi] offset off_1004290 +
mov ecx dword_1026084 +
mov eax [ecx] +
call dword ptr [eax+4]  +
mov eax esi +
pop esi  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push offset off_101943C  +
push ecx  +
call sub_100C13D  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+8] +
push edi  +
lea eax [esi+4] +
push eax  +
call ds:InterlockedDecrement  +
mov edi eax +
test edi edi +
jnz loc_1019480  +
test esi esi +
jz loc_1019480  +
mov eax [esi] +
push 1  +
mov ecx esi +
call dword ptr [eax+48h]  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+10h]  +
mov ecx [ebp+8] +
push dword ptr [ebp+0Ch]  +
call sub_1019422  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_1004290 +
mov dword ptr [esi+4] 0C0000001h +
mov ecx dword_1026084 +
mov eax [ecx] +
call dword ptr [eax+8]  +
mov ecx esi +
pop esi  +
jmp loc_1019014  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_10194A9  +
test byte ptr [ebp+8] 1 +
jz loc_10194ED  +
push esi  +
call off_1026660  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
cmp dword ptr [ecx+8] 0 +
jz loc_1019504  +
mov ecx [ecx+4] +
jmp loc_1019506  +
xor ecx ecx +
push ecx  +
call sub_100424B  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
mul  [ebp+arg_8] +
test edx edx +
ja loc_1019526  +
cmp eax 0FFFFFFFFh +
jbe loc_101952D  +
mov eax 80070057h +
jmp loc_1019534  +
mov ecx [ebp+arg_0] +
mov [ecx] eax +
xor eax eax +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push [ebp+arg_4]  +
and [ebp+cb] 0 +
push [ebp+arg_0]  +
lea eax [ebp+cb] +
push eax  +
call sub_1019512  +
test eax eax +
jge loc_101955E  +
xor eax eax +
jmp locret_1019567  +
push [ebp+cb]  +
call ds:CoTaskMemAlloc  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push [ebp+arg_8]  +
and [ebp+cb] 0 +
push [ebp+arg_4]  +
lea eax [ebp+cb] +
push eax  +
call sub_1019512  +
test eax eax +
jge loc_1019591  +
xor eax eax +
jmp locret_101959D  +
push [ebp+cb]  +
push [ebp+pv]  +
call ds:CoTaskMemRealloc  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_0]  +
call ds:malloc  +
pop ecx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_0]  +
call ds:__imp_free  +
pop ecx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+lpString]  +
call ds:lstrlenW  +
lea eax [eax+eax+2] +
push eax  +
push [ebp+lpString]  +
mov eax [ebp+arg_4] +
add eax eax +
push eax  +
push [ebp+arg_0]  +
call memcpy_s  +
add esp 10h +
neg eax  +
sbb eax eax +
inc eax  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov [ebp+8] eax +
push offset dword_1019628  +
lea eax [ebp+8] +
push eax  +
call _CxxThrowException  +
int 3  +
nop   +
nop   +
nop   +
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_1019675  +
cmp eax 0Ch +
jz loc_101966E  +
cmp eax 16h +
jz loc_1019667  +
cmp eax 22h +
jz loc_1019667  +
cmp eax 50h +
jz loc_1019675  +
push 80004005h  +
call loc_101960B  +
push 80070057h  +
jmp loc_1019662  +
push 8007000Eh  +
jmp loc_1019662  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call memcpy_s  +
add esp 10h +
push eax  +
call sub_101963D  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call wcsncpy_s  +
add esp 10h +
push eax  +
call sub_101963D  +
pop ebp  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_100ADA8  +
test eax eax +
jl loc_10196DC  +
mov byte ptr [esi+18h] 1 +
pop esi  +
retn   +
***
mov eax [ecx+8] +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+8] +
push edi  +
xor edi edi +
cmp ebx edi +
jnz loc_1019703  +
mov eax 80004003h +
jmp loc_1019734  +
push esi  +
lea esi [ecx+28h] +
cmp [esi] edi +
jnz loc_1019725  +
push esi  +
push offset dword_101974C  +
push 1  +
push edi  +
push offset dword_101973C  +
call ds:CoCreateInstance  +
mov edi eax +
test edi edi +
jl loc_1019731  +
mov eax [esi] +
mov [ebx] eax +
mov esi [esi] +
mov eax [esi] +
push esi  +
call dword ptr [eax+4]  +
mov eax edi +
pop esi  +
pop edi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_4] +
test ebx ebx +
jz loc_10197AF  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
lea edi [ebx-1] +
xor eax eax +
test edi edi +
jbe loc_10197A7  +
mov edx [ebp+arg_8] +
movzx ecx word ptr [edx] +
test cx cx +
jz loc_10197A7  +
mov [esi+eax*2] cx +
cmp word ptr [edx] 27h +
jnz loc_10197A0  +
lea ecx [ebx-2] +
cmp eax ecx +
jnb loc_10197A0  +
push 27h  +
inc eax  +
pop ecx  +
mov [esi+eax*2] cx +
inc edx  +
inc edx  +
inc eax  +
cmp eax edi +
jb loc_101977F  +
xor ecx ecx +
pop edi  +
mov [esi+eax*2] cx +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov eax 80004005h +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
cmp dword ptr [esi+4] 0 +
jnz loc_1019818  +
cmp dword ptr [esi+8] 0 +
jnz loc_1019818  +
push offset aApiMsWinCoreLo  +
call ds:GetModuleHandleW  +
test eax eax +
jz loc_10197FA  +
push offset aRegdeletekeyex  +
push eax  +
call ds:__imp_GetProcAddress  +
mov [esi+4] eax +
jmp loc_1019818  +
push offset LibFileName  +
call ds:LoadLibraryW  +
test eax eax +
jz loc_1019818  +
push offset aRegdeletekeyw  +
push eax  +
call ds:__imp_GetProcAddress  +
mov [esi+8] eax +
mov eax [esi+4] +
test eax eax +
jz loc_101982C  +
push 0  +
push 0  +
push [ebp+arg_0]  +
push dword ptr [esi]  +
call eax  +
jmp loc_1019842  +
mov eax [esi+8] +
test eax eax +
jz loc_101983C  +
push [ebp+arg_0]  +
push dword ptr [esi]  +
call eax  +
jmp loc_1019842  +
call ds:__imp_GetLastError  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov ecx [esi] +
xor eax eax +
test ecx ecx +
jz loc_10198F6  +
push ecx  +
call ds:RegCloseKey  +
and dword ptr [esi] 0 +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
and [ebp+phkResult] 0 +
lea eax [ebp+dwDisposition] +
push eax  +
lea eax [ebp+phkResult] +
push eax  +
push [ebp+dwDisposition]  +
mov esi ecx +
push [ebp+samDesired]  +
push [ebp+dwOptions]  +
push [ebp+lpClass]  +
push 0  +
push [ebp+lpSubKey]  +
push [ebp+hKey]  +
call ds:RegCreateKeyExW  +
mov ecx [ebp+arg_18] +
test ecx ecx +
jz loc_1019938  +
mov edx [ebp+dwDisposition] +
mov [ecx] edx +
test eax eax +
jnz loc_1019948  +
mov ecx esi +
call sub_10198DF  +
mov ecx [ebp+phkResult] +
mov [esi] ecx +
pop esi  +
leave   +
retn 1Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+phkResult] 0 +
push esi  +
lea eax [ebp+phkResult] +
push eax  +
push [ebp+samDesired]  +
mov esi ecx +
push 0  +
push [ebp+lpSubKey]  +
push [ebp+hKey]  +
call ds:RegOpenKeyExW  +
test eax eax +
jnz loc_1019984  +
mov ecx esi +
call sub_10198DF  +
mov ecx [ebp+phkResult] +
mov [esi] ecx +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 4  +
lea eax [ebp+Data] +
push eax  +
push 4  +
push 0  +
push [ebp+lpValueName]  +
push dword ptr [ecx]  +
call ds:RegSetValueExW  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+lpData] 0 +
push esi  +
mov esi ecx +
jnz loc_10199C9  +
push 80004005h  +
call loc_101960B  +
push [ebp+lpData]  +
call ds:lstrlenW  +
lea eax [eax+eax+2] +
push eax  +
push [ebp+lpData]  +
push [ebp+dwType]  +
push 0  +
push [ebp+lpValueName]  +
push dword ptr [esi]  +
call ds:RegSetValueExW  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+lpData] +
push edi  +
mov ebx ecx +
test esi esi +
jnz loc_1019A0F  +
push 80004005h  +
call loc_101960B  +
xor edi edi +
push esi  +
call ds:lstrlenW  +
inc eax  +
lea ecx [eax+eax] +
add esi ecx +
add edi ecx +
cmp eax 1 +
jnz loc_1019A11  +
push edi  +
push [ebp+lpData]  +
push 7  +
push 0  +
push [ebp+lpValueName]  +
push dword ptr [ebx]  +
call ds:RegSetValueExW  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+lpString2]  +
push [ebp+lpString1]  +
call ds:lstrcmpiW  +
neg eax  +
sbb al al +
inc al  +
pop ebp  +
retn 8  +
***
mov eax [ecx] +
push 27h  +
pop ecx  +
cmp cx [eax] +
jnz loc_1019A81  +
push eax  +
call ds:CharNextW  +
push 27h  +
pop ecx  +
cmp cx [eax] +
jz loc_1019A81  +
xor eax eax +
inc eax  +
retn   +
xor eax eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
cmp eax 64h +
push esi  +
mov esi ecx +
jge loc_1019A9E  +
mov eax 3E8h +
and dword ptr [esi] 0 +
push 2  +
push eax  +
mov [esi+4] eax +
call sub_101953D  +
mov [esi+8] eax +
test eax eax +
jz loc_1019AB8  +
xor ecx ecx +
mov [eax] cx +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
adc eax offset CoTaskMemFree +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_4] +
push esi  +
mov esi ecx +
mov eax [esi] +
lea ecx [eax+ebx+1] +
cmp ecx eax +
push edi  +
jle loc_1019B58  +
cmp ecx ebx +
jle loc_1019B58  +
mov edi [esi+4] +
cmp ecx edi +
jl loc_1019B18  +
cmp edi 3FFFFFFFh +
jg loc_1019B58  +
add edi edi +
cmp ecx edi +
jge loc_1019AF5  +
push 2  +
push edi  +
push dword ptr [esi+8]  +
call sub_1019570  +
test eax eax +
jz loc_1019B58  +
mov [esi+8] eax +
mov [esi+4] edi +
mov eax [esi] +
test eax eax +
jl loc_1019B58  +
mov edx [esi+4] +
cmp eax edx +
jge loc_1019B58  +
mov ecx edx +
sub ecx eax +
cmp ecx edx +
jg loc_1019B58  +
lea edx [ebx+ebx] +
push edx  +
push [ebp+arg_0]  +
add ecx ecx +
push ecx  +
mov ecx [esi+8] +
lea eax [ecx+eax*2] +
push eax  +
call sub_101967E  +
add [esi] ebx +
mov eax [esi] +
mov ecx [esi+8] +
xor edx edx +
mov [ecx+eax*2] dx +
xor eax eax +
add esp 10h +
inc eax  +
jmp loc_1019B5A  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
add bh bh +
adc eax offset DeleteCriticalSection +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
test byte ptr dword_10269F4 1 +
jnz loc_1019BE0  +
or dword_10269F4 1 +
push 8  +
pop eax  +
mov word_10269D8 ax +
mov eax 4008h +
push 13h  +
mov word_10269E0 ax +
pop eax  +
push 11h  +
mov word_10269E8 ax +
pop eax  +
mov lpString2 offset dword_1019C24 +
mov dword_10269DC offset dword_1019C20 +
mov dword_10269E4 offset dword_1019C1C +
mov dword_10269EC offset dword_1019C18 +
mov word_10269F0 ax +
push esi  +
xor esi esi +
push lpString2[esi*8]  +
push [ebp+lpString1]  +
call ds:lstrcmpiW  +
test eax eax +
jz loc_1019C04  +
inc esi  +
cmp esi 4 +
jb loc_1019BE3  +
xor eax eax +
pop esi  +
pop ebp  +
retn 8  +
mov ax word_10269D8[esi*8] +
mov ecx [ebp+arg_4] +
mov [ecx] ax +
xor eax eax +
inc eax  +
jmp loc_1019BFF  +
***
mov edi edi +
push ebp  +
mov ebp esp +
movzx eax [ebp+arg_0] +
cmp eax 30h +
jl loc_1019C61  +
cmp eax 39h +
jle loc_1019C5C  +
cmp eax 40h +
jle loc_1019C61  +
cmp eax 46h +
jle loc_1019C57  +
lea ecx [eax-61h] +
cmp ecx 5 +
ja loc_1019C61  +
add eax 0FFFFFFA9h +
jmp loc_1019C63  +
add eax 0FFFFFFC9h +
jmp loc_1019C63  +
add eax 0FFFFFFD0h +
jmp loc_1019C63  +
xor al al +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
xor esi esi +
push ds:off_1019CA0[esi*8]  +
push [ebp+lpString1]  +
call ds:lstrcmpiW  +
test eax eax +
jz loc_1019C95  +
inc esi  +
cmp esi 0Eh +
jb loc_1019C74  +
xor eax eax +
pop esi  +
pop ebp  +
retn 4  +
mov eax ds:dword_1019CA4[esi*8] +
jmp loc_1019C90  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+lpsz] +
push esi  +
xor esi esi +
test eax eax +
jz loc_1019D41  +
jmp loc_1019D33  +
cmp cx [ebp+arg_4] +
jz loc_1019D3D  +
push eax  +
call ds:CharNextW  +
movzx ecx word ptr [eax] +
test cx cx +
jz loc_1019D3F  +
jmp loc_1019D26  +
mov esi eax +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
movzx eax [ebp+arg_0] +
cmp eax 9 +
jl loc_1019D6D  +
cmp eax 0Ah +
jle loc_1019D68  +
cmp eax 0Dh +
jz loc_1019D68  +
cmp eax 20h +
jnz loc_1019D6D  +
xor eax eax +
inc eax  +
jmp loc_1019D6F  +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
jmp loc_1019D8B  +
push dword ptr [esi]  +
call ds:CharNextW  +
mov [esi] eax +
mov ecx esi +
mov eax [esi] +
movzx eax word ptr [eax] +
push eax  +
call sub_1019D4B  +
test eax eax +
jnz loc_1019D7F  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
call sub_1019D78  +
mov eax [esi] +
movzx ecx word ptr [eax] +
xor edx edx +
cmp dx cx +
jnz loc_1019DC5  +
mov eax 80020009h +
jmp loc_1019EA5  +
push ebx  +
push edi  +
mov edi [ebp+arg_0] +
push 27h  +
pop edx  +
mov [ebp+var_4] edi +
cmp dx cx +
jnz loc_1019E53  +
mov ebx ds:CharNextW +
push eax  +
call ebx  +
mov [esi] eax +
jmp loc_1019E36  +
mov ecx esi +
call sub_1019A64  +
test eax eax +
jnz loc_1019E3D  +
mov eax [esi] +
push 27h  +
pop ecx  +
cmp cx [eax] +
jnz loc_1019DFC  +
push eax  +
call ebx  +
mov [esi] eax +
mov eax [esi] +
push eax  +
mov [ebp+arg_0] eax +
call ebx  +
mov edx [ebp+var_4] +
mov [esi] eax +
sub eax [ebp+arg_0] +
add edx 2000h +
sar eax 1 +
lea ecx [edi+eax*2+2] +
cmp ecx edx +
jnb loc_1019EAA  +
test eax eax +
jle loc_1019E34  +
mov ecx [ebp+arg_0] +
mov dx [ecx] +
mov [edi] dx +
inc edi  +
inc edi  +
inc ecx  +
inc ecx  +
dec eax  +
jnz loc_1019E27  +
mov eax [esi] +
xor ecx ecx +
cmp cx [eax] +
jnz loc_1019DE2  +
mov eax [esi] +
xor ecx ecx +
cmp cx [eax] +
jz loc_1019EAA  +
xor eax eax +
mov [edi] ax +
push dword ptr [esi]  +
call ebx  +
mov [esi] eax +
jmp loc_1019EA1  +
mov ebx [esi] +
movzx eax word ptr [ebx] +
push eax  +
mov ecx esi +
call sub_1019D4B  +
test eax eax +
jnz loc_1019E9C  +
push ebx  +
call ds:CharNextW  +
mov edx [ebp+var_4] +
mov [esi] eax +
sub eax ebx +
sar eax 1 +
lea ecx [edi+eax*2+2] +
add edx 2000h +
cmp ecx edx +
jnb loc_1019EAA  +
test eax eax +
jle loc_1019E93  +
mov cx [ebx] +
mov [edi] cx +
inc edi  +
inc edi  +
inc ebx  +
inc ebx  +
dec eax  +
jnz loc_1019E86  +
mov eax [esi] +
xor ecx ecx +
cmp cx [eax] +
jnz loc_1019E53  +
xor eax eax +
mov [edi] ax +
xor eax eax +
pop edi  +
pop ebx  +
pop esi  +
leave   +
retn 4  +
mov eax 80020009h +
jmp loc_1019EA3  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi offset off_1019EE8 +
push dword ptr [esi]  +
push [ebp+lpString1]  +
call ds:lstrcmpiW  +
test eax eax +
jz loc_1019EE3  +
add esi 4 +
cmp esi offset dword_1019F18 +
jl loc_1019EC1  +
xor eax eax +
inc eax  +
pop esi  +
pop ebp  +
retn 4  +
xor eax eax +
jmp loc_1019EDE  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
xor eax eax +
push eax  +
push eax  +
push eax  +
push eax  +
push eax  +
push eax  +
push eax  +
lea ecx [ebp+cSubKeys] +
push ecx  +
push eax  +
push eax  +
push eax  +
push [ebp+hKey]  +
mov [ebp+cSubKeys] eax +
call ds:RegQueryInfoKeyW  +
test eax eax +
jz loc_1019F47  +
xor eax eax +
jmp locret_1019F50  +
xor eax eax +
cmp eax [ebp+cSubKeys] +
sbb eax eax +
neg eax  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax 2004h +
call sub_10039A6  +
mov eax dword_1026044 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
mov esi [ebp+arg_0] +
cmp word ptr [esi] 3Dh +
push edi  +
mov edi ecx +
jnz loc_1019FAE  +
push esi  +
call sub_1019DA1  +
test eax eax +
jl loc_1019FB0  +
mov ecx edi +
call sub_1019D78  +
lea eax [ebp+var_2004] +
push eax  +
mov ecx edi +
call sub_1019DA1  +
test eax eax +
jl loc_1019FB0  +
push esi  +
mov ecx edi +
call sub_1019DA1  +
test eax eax +
jl loc_1019FB0  +
xor eax eax +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_1001E40  +
leave   +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
jmp loc_1019FD8  +
mov eax [esi] +
mov ecx [eax] +
push eax  +
mov [esi] ecx +
call sub_10195BE  +
cmp dword ptr [esi] 0 +
jnz loc_1019FCC  +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi] +
push edi  +
mov edi ds:__imp_free +
test eax eax +
jz loc_1019FFD  +
push eax  +
call edi  +
and dword ptr [esi] 0 +
pop ecx  +
mov eax [esi+4] +
test eax eax +
jz loc_101A00C  +
push eax  +
call edi  +
and dword ptr [esi+4] 0 +
pop ecx  +
and dword ptr [esi+8] 0 +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
mov edi edi +
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov esi ecx +
xor edi edi +
cmp [esi+8] edi +
jle loc_101A0A4  +
mov eax [ebp+arg_0] +
push dword ptr [eax]  +
mov eax [esi] +
push dword ptr [eax+edi*4]  +
call sub_1019A44  +
test al al +
jnz loc_101A0AD  +
inc edi  +
cmp edi [esi+8] +
jl loc_101A08B  +
or eax 0FFFFFFFFh +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
mov eax edi +
jmp loc_101A0A7  +
***
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_10195A6  +
test eax eax +
jnz loc_101A0E1  +
push 8007000Eh  +
call loc_101960B  +
mov [esi] eax +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
lea eax [ebp+arg_4] +
push [ebp+arg_0]  +
push eax  +
call sub_1019512  +
test eax eax +
jge loc_101A10B  +
push eax  +
call loc_101960B  +
mov eax [ebp+arg_4] +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 224h +
mov eax dword_1026044 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
push edi  +
mov eax ecx +
mov ecx [ebp+lpSubKey] +
push 2001Fh  +
push ecx  +
push dword ptr [eax]  +
xor esi esi +
mov [ebp+var_21C] ecx +
lea ecx [ebp+var_214] +
mov [ebp+var_218] eax +
mov [ebp+var_214] esi +
mov [ebp+var_210] esi +
mov [ebp+var_20C] esi +
call sub_1019952  +
mov edi eax +
cmp edi esi +
jz loc_101A189  +
lea ecx [ebp+var_214] +
call sub_10198DF  +
mov eax edi +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_1001E40  +
leave   +
retn 4  +
mov edi ds:RegEnumKeyExW +
jmp loc_101A1A7  +
lea eax [ebp+SubKey] +
push eax  +
lea ecx [ebp+var_214] +
call sub_101A117  +
cmp eax esi +
jnz loc_101A1F2  +
lea eax [ebp+var_224] +
push eax  +
push esi  +
push esi  +
push esi  +
lea eax [ebp+var_208] +
push eax  +
lea eax [ebp+SubKey] +
push eax  +
push esi  +
push [ebp+var_214]  +
mov [ebp+var_208] 100h +
call edi  +
test eax eax +
jz loc_101A191  +
lea ecx [ebp+var_214] +
call sub_10198DF  +
push [ebp+var_21C]  +
mov ecx [ebp+var_218] +
call sub_10197C6  +
lea ecx [ebp+var_214] +
mov esi eax +
call sub_10198DF  +
mov eax esi +
jmp loc_101A179  +
***
mov edi edi +
push esi  +
push edi  +
mov esi ecx +
xor edi edi +
cmp [esi+8] edi +
jle loc_101A23E  +
push edi  +
mov ecx esi +
call sub_101A018  +
push dword ptr [eax]  +
call off_1026660  +
push edi  +
mov ecx esi +
call sub_101A049  +
push dword ptr [eax]  +
call off_1026660  +
inc edi  +
cmp edi [esi+8] +
jl loc_101A218  +
mov ecx esi +
call sub_1019FE4  +
pop edi  +
xor eax eax +
pop esi  +
retn   +
***
call sub_1001D89  +
mov esi ecx +
xor eax eax +
cmp [ebp+8] eax +
jz loc_101A28A  +
mov [ebp-10h] eax +
push dword ptr [ebp+8]  +
mov [ebp-4] eax +
call ds:lstrlenW  +
push eax  +
push dword ptr [ebp+8]  +
mov ecx esi +
call sub_1019AD3  +
lea ecx [ebp-10h] +
mov esi eax +
call sub_1019FC5  +
mov eax esi +
call __EH_epilog3  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
lea edi [esi+10h] +
push edi  +
call ds:EnterCriticalSection  +
lea ecx [esi+4] +
call sub_101A20B  +
push edi  +
mov esi eax +
call ds:LeaveCriticalSection  +
pop edi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov ecx [eax] +
push offset byte_1004260  +
push offset aAppid  +
push eax  +
call dword ptr [ecx+0Ch]  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_101A07B  +
cmp eax 0FFFFFFFFh +
jnz loc_101A312  +
xor eax eax +
jmp loc_101A31C  +
push eax  +
mov ecx esi +
call sub_101A049  +
mov eax [eax] +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
mov eax [ecx] +
shl edx 2 +
add eax edx +
jz loc_101A351  +
push esi  +
mov esi [ebp+arg_4] +
mov esi [esi] +
mov [eax] esi +
pop esi  +
mov eax [ecx+4] +
add eax edx +
jz loc_101A35F  +
mov ecx [ebp+arg_8] +
mov ecx [ecx] +
mov [eax] ecx +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 400h +
push esi  +
mov esi ecx +
jbe loc_101A383  +
push [ebp+arg_0]  +
call sub_101A0C3  +
jmp loc_101A388  +
lea eax [esi+4] +
mov [esi] eax +
mov eax [esi] +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 100h +
push esi  +
mov esi ecx +
jbe loc_101A3AF  +
push [ebp+arg_0]  +
call sub_101A0C3  +
jmp loc_101A3B4  +
lea eax [esi+4] +
mov [esi] eax +
mov eax [esi] +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_1001D89  +
mov [ebp-10h] ecx +
and dword ptr [ebp-4] 0 +
call sub_101A20B  +
mov ecx [ebp-10h] +
call sub_1019FE4  +
call __EH_epilog3  +
retn   +
***
call sub_1001D89  +
mov esi ecx +
mov [ebp-10h] esi +
mov dword ptr [esi] offset off_10153C8 +
push esi  +
mov dword ptr [ebp-4] 1 +
call sub_101A297  +
lea eax [esi+10h] +
cmp byte ptr [eax+18h] 0 +
jz loc_101A423  +
push eax  +
mov byte ptr [eax+18h] 0 +
call ds:DeleteCriticalSection  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [esi+4] +
call sub_101A3C0  +
call __EH_epilog3  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+10h] +
test eax eax +
jz loc_101A449  +
and dword ptr [eax] 0 +
mov eax 80004001h +
pop ebp  +
retn 0Ch  +
***
xor eax eax +
inc eax  +
retn 4  +
***
xor eax eax +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call ??1_Locimp@locale@std@@MAE@XZ  +
test [ebp+arg_0] 1 +
jz loc_101A486  +
push esi  +
call off_1026660  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov esi ecx +
lea edi [esi+10h] +
push edi  +
call ds:EnterCriticalSection  +
lea eax [ebp+arg_0] +
push eax  +
lea ecx [esi+4] +
call sub_101A2F9  +
push edi  +
mov esi eax +
call ds:LeaveCriticalSection  +
pop edi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_10039ED  +
mov edi [ebp+8] +
mov ebx [ebp+0Ch] +
mov esi ecx +
mov [ebp-64h] ebx +
test edi edi +
jz loc_101A5F8  +
test ebx ebx +
jz loc_101A5F8  +
and dword ptr [ebx] 0 +
push edi  +
call ds:lstrlenW  +
add eax eax +
push eax  +
lea ecx [ebp-60h] +
call sub_1019A89  +
xor ecx ecx +
mov [ebp-4] ecx +
cmp [ebp-58h] ecx +
jnz loc_101A51E  +
push ecx  +
call ds:CoTaskMemFree  +
mov eax 8007000Eh +
jmp loc_101A5FD  +
mov [esi] edi +
mov [ebp-54h] ecx +
cmp [edi] cx +
jz loc_101A5C7  +
mov ebx ds:CharNextW +
mov eax [esi] +
cmp word ptr [eax] 25h +
jnz loc_101A5A3  +
push eax  +
call ebx  +
mov [esi] eax +
cmp word ptr [eax] 25h +
jz loc_101A5A3  +
push 25h  +
push eax  +
call sub_1019D15  +
mov edi eax +
test edi edi +
jz loc_101A5DD  +
mov ecx [esi] +
sub eax ecx +
sar eax 1 +
cmp eax 1Fh +
jg loc_101A5E6  +
push eax  +
push ecx  +
lea eax [ebp-50h] +
push 20h  +
push eax  +
call sub_10196A4  +
mov ecx [esi+4] +
add esp 10h +
lea eax [ebp-50h] +
push eax  +
call sub_101A492  +
test eax eax +
jz loc_101A5DD  +
push eax  +
lea ecx [ebp-60h] +
call sub_101A24F  +
test eax eax +
jz loc_101A5EF  +
cmp [esi] edi +
jz loc_101A5B2  +
push dword ptr [esi]  +
call ebx  +
mov [esi] eax +
cmp eax edi +
jz loc_101A5B2  +
jmp loc_101A597  +
push 1  +
push eax  +
lea ecx [ebp-60h] +
call sub_1019AD3  +
test eax eax +
jz loc_101A5EF  +
push dword ptr [esi]  +
call ebx  +
mov [esi] eax +
cmp word ptr [eax] 0 +
jnz loc_101A532  +
mov ebx [ebp-64h] +
xor ecx ecx +
mov eax [ebp-58h] +
mov [ebp-58h] ecx +
mov [ebx] eax +
push dword ptr [ebp-58h]  +
call ds:CoTaskMemFree  +
mov eax [ebp-54h] +
jmp loc_101A5FD  +
mov dword ptr [ebp-54h] 80020009h +
jmp loc_101A5CF  +
mov dword ptr [ebp-54h] 80004005h +
jmp loc_101A5CF  +
mov dword ptr [ebp-54h] 8007000Eh +
jmp loc_101A5CF  +
mov eax 80004003h +
call sub_1003A2A  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov eax [esi+8] +
push edi  +
mov edi off_1026988 +
push 4  +
inc eax  +
push eax  +
push dword ptr [esi]  +
call edi  +
add esp 0Ch +
test eax eax +
jnz loc_101A62F  +
xor eax eax +
jmp loc_101A65D  +
mov [esi] eax +
mov eax [esi+8] +
push 4  +
inc eax  +
push eax  +
push dword ptr [esi+4]  +
call edi  +
add esp 0Ch +
test eax eax +
jz loc_101A62B  +
push [ebp+arg_4]  +
mov ecx esi +
push [ebp+arg_0]  +
mov [esi+4] eax +
push dword ptr [esi+8]  +
call sub_101A337  +
inc dword ptr [esi+8]  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push 2  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_101A0ED  +
push eax  +
mov ecx esi +
call sub_101A368  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push 2  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_101A0ED  +
push eax  +
mov ecx esi +
call sub_101A394  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push 1  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_101A0ED  +
push eax  +
mov ecx esi +
call sub_101A394  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_1003574 +
call sub_100E800  +
test byte ptr [ebp+8] 1 +
jz loc_101A6F4  +
push esi  +
call off_1026660  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_1004DD8  +
mov [ebp-30h] ecx +
xor edi edi +
cmp [ebp+8] edi +
jz loc_101A82D  +
cmp [ebp+0Ch] edi +
jz loc_101A82D  +
push dword ptr [ebp+8]  +
mov [ebp-1Ch] edi +
call ds:lstrlenW  +
lea eax [eax+eax+2] +
push 2  +
xor ecx ecx +
pop edx  +
mov [ebp-20h] eax +
mul  edx +
seto cl  +
mov [ebp-14h] edi +
mov [ebp-4] edi +
neg ecx  +
or eax ecx +
push eax  +
call off_102665C  +
mov [ebp-14h] eax +
jmp loc_101A75E  +
mov eax offset loc_101A75C +
retn   +
xor edi edi +
mov eax [ebp-14h] +
push 2  +
pop esi  +
push dword ptr [ebp+0Ch]  +
mov [ebp-4] esi +
mov [ebp-2Ch] eax +
call ds:lstrlenW  +
lea eax [eax+eax+2] +
xor ecx ecx +
mov [ebp-24h] eax +
mov edx esi +
mul  edx +
seto cl  +
mov [ebp-18h] edi +
mov byte ptr [ebp-4] 3 +
neg ecx  +
or eax ecx +
push eax  +
call off_102665C  +
mov [ebp-18h] eax +
mov [ebp-4] esi +
jmp loc_101A7AC  +
mov dword ptr [ebp-4] 2 +
mov eax offset loc_101A7AA +
retn   +
xor edi edi +
mov esi [ebp-18h] +
mov byte ptr [ebp-4] 5 +
mov [ebp-28h] esi +
cmp [ebp-14h] edi +
jz loc_101A7F6  +
cmp esi edi +
jz loc_101A7F6  +
push dword ptr [ebp-20h]  +
push dword ptr [ebp+8]  +
push dword ptr [ebp-20h]  +
push dword ptr [ebp-14h]  +
call sub_101967E  +
push dword ptr [ebp-24h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp-24h]  +
push esi  +
call sub_101967E  +
mov ecx [ebp-30h] +
add esp 20h +
lea eax [ebp-18h] +
push eax  +
lea eax [ebp-14h] +
push eax  +
call sub_101A60A  +
test eax eax +
jnz loc_101A7FF  +
mov dword ptr [ebp-1Ch] 8007000Eh +
jmp loc_101A805  +
mov [ebp-2Ch] edi +
mov [ebp-28h] edi +
push dword ptr [ebp-28h]  +
xor eax eax +
cmp [ebp-1Ch] edi +
mov byte ptr [ebp-4] 2 +
setnl al  +
mov esi eax +
call off_1026660  +
push dword ptr [ebp-2Ch]  +
or dword ptr [ebp-4] 0FFFFFFFFh +
call off_1026660  +
mov eax esi +
jmp loc_101A82F  +
xor eax eax +
call __EH_epilog3  +
retn 8  +
***
call sub_1001D89  +
cmp dword ptr [ebp+0Ch] 0 +
jz loc_101A89A  +
cmp dword ptr [ebp+10h] 0 +
jz loc_101A89A  +
mov esi [ebp+8] +
lea edi [esi+10h] +
push edi  +
call ds:EnterCriticalSection  +
and dword ptr [ebp+8] 0 +
push dword ptr [ebp+10h]  +
and dword ptr [ebp-4] 0 +
push dword ptr [ebp+0Ch]  +
lea ecx [esi+4] +
call sub_101A700  +
push edi  +
mov esi eax +
call ds:LeaveCriticalSection  +
lea ecx [ebp+8] +
call sub_1019FC5  +
mov eax esi +
neg eax  +
sbb eax eax +
and eax 7FF8FFF2h +
add eax 8007000Eh +
jmp loc_101A89F  +
mov eax 80070057h +
call __EH_epilog3  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0FFFFFFFFh  +
push offset byte_102194B  +
mov eax large fs:0 +
push eax  +
push ecx  +
mov eax 2120h +
call sub_10039A6  +
mov eax dword_1026044 +
xor eax ebp +
mov [ebp+var_14] eax +
push ebx  +
push esi  +
push edi  +
push eax  +
lea eax [ebp+var_C] +
mov large fs:0 eax +
mov [ebp+var_10] esp +
mov eax [ebp+arg_8] +
mov esi [ebp+arg_0] +
mov ebx [ebp+arg_4] +
mov [ebp+var_212C] eax +
lea eax [ebp+String1] +
xor edi edi +
push eax  +
mov [ebp+var_2128] ecx +
mov [ebp+var_2124] esi +
mov dword ptr [ebp+Data] ebx +
mov [ebp+var_211C] edi +
call sub_1019DA1  +
cmp eax edi +
jl loc_101ABDE  +
lea eax [ebp+var_211C] +
push eax  +
lea eax [ebp+String1] +
push eax  +
call sub_1019B7D  +
test eax eax +
jnz loc_101A942  +
mov eax 80020009h +
jmp loc_101ABDE  +
mov ecx [ebp+var_2128] +
call sub_1019D78  +
mov ecx [ebp+var_2128] +
lea eax [ebp+String1] +
push eax  +
call sub_1019DA1  +
cmp eax edi +
jl loc_101ABDE  +
movzx eax word ptr [ebp+var_211C] +
sub eax 8 +
jz loc_101ABA8  +
sub eax 9 +
jz loc_101AAA0  +
dec eax  +
dec eax  +
jz loc_101AA64  +
sub eax 3FF5h +
jnz loc_101ABC7  +
lea eax [ebp+String1] +
push eax  +
call ds:lstrlenW  +
inc eax  +
inc eax  +
mov [ebp+lpData] edi +
mov [ebp+var_4] edi +
push eax  +
lea ecx [ebp+lpData] +
mov byte ptr [ebp+var_4] 1 +
call sub_101A68C  +
mov [ebp+var_4] edi +
jmp loc_101A9CC  +
and dword ptr [ebp-4] 0 +
mov eax offset loc_101A9CA +
retn   +
xor edi edi +
mov esi [ebp+lpData] +
cmp esi edi +
jz loc_101AA3F  +
cmp [ebp+String1] 0 +
lea edi [ebp+String1] +
jz loc_101AA19  +
mov ebx ds:CharNextW +
push edi  +
call ebx  +
movzx ecx word ptr [edi] +
cmp cx 5Ch +
jnz loc_101AA0C  +
cmp word ptr [eax] 30h +
jnz loc_101AA0C  +
xor ecx ecx +
mov [esi] cx +
inc esi  +
push eax  +
inc esi  +
call ebx  +
mov edi eax +
jmp loc_101AA13  +
mov [esi] cx +
inc esi  +
inc esi  +
inc edi  +
inc edi  +
cmp word ptr [edi] 0 +
jnz loc_101A9EC  +
mov ecx [ebp+var_2124] +
xor eax eax +
mov [esi] ax +
mov [esi+2] ax +
push [ebp+lpData]  +
push dword ptr [ebp+Data]  +
call sub_10199F4  +
mov esi eax +
xor edi edi +
jmp loc_101AA42  +
push 0Eh  +
pop esi  +
lea eax [ebp+var_2114] +
cmp [ebp+lpData] eax +
jz loc_101ABBB  +
lea ecx [ebp+lpData] +
call sub_101A0B6  +
jmp loc_101ABBB  +
lea eax [ebp+Data] +
push eax  +
push edi  +
push edi  +
lea eax [ebp+String1] +
push eax  +
mov [ebp+var_2124] edi +
call ds:VarUI4FromStr  +
push dword ptr [ebp+Data]  +
mov ecx esi +
push ebx  +
call sub_101998E  +
lea ecx [ebp+var_2124] +
mov esi eax +
call sub_1019FC5  +
jmp loc_101ABBB  +
lea eax [ebp+String1] +
push eax  +
call ds:lstrlenW  +
mov [ebp+var_211C] eax +
test al 1 +
jz loc_101AAC1  +
mov eax 80004005h +
jmp loc_101ABDE  +
cdq   +
sub eax edx +
mov ebx eax +
sar ebx 1 +
mov [ebp+var_2130] ebx +
mov [ebp+lpData] edi +
mov [ebp+var_4] 3 +
push ebx  +
lea ecx [ebp+lpData] +
mov byte ptr [ebp+var_4] 4 +
call sub_101A6B0  +
jmp loc_101AAFB  +
mov eax offset loc_101AAF3 +
retn   +
mov ebx [ebp-2130h] +
xor edi edi +
cmp [ebp+lpData] edi +
jnz loc_101AB1A  +
lea eax [ebp+var_2114] +
test eax eax +
jz loc_101AAB7  +
lea ecx [ebp+lpData] +
call sub_101A0B6  +
jmp loc_101AAB7  +
push ebx  +
push edi  +
push [ebp+lpData]  +
call memset  +
add esp 0Ch +
cmp [ebp+var_211C] edi +
jle loc_101AB6C  +
mov ecx [ebp+lpData] +
mov eax edi +
cdq   +
sub eax edx +
sar eax 1 +
lea esi [eax+ecx] +
movzx eax [ebp+edi*2+String1] +
push eax  +
call sub_1019C2D  +
mov edx edi +
and edx 1 +
shl edx 2 +
push 4  +
pop ecx  +
sub ecx edx +
shl al cl +
or [esi] al +
inc edi  +
cmp edi [ebp+var_211C] +
jl loc_101AB32  +
xor edi edi +
mov eax [ebp+var_2124] +
mov eax [eax] +
push ebx  +
push [ebp+lpData]  +
push 3  +
push edi  +
push dword ptr [ebp+Data]  +
push eax  +
call ds:RegSetValueExW  +
mov esi eax +
lea eax [ebp+var_2114] +
cmp [ebp+lpData] eax +
jz loc_101ABBB  +
lea ecx [ebp+lpData] +
call sub_101A0B6  +
jmp loc_101ABBB  +
push 1  +
lea eax [ebp+String1] +
push eax  +
push ebx  +
mov ecx esi +
call sub_10199B1  +
mov esi eax +
cmp esi edi +
jz loc_101ABC7  +
push esi  +
call sub_1018535  +
jmp loc_101ABDE  +
push [ebp+var_212C]  +
mov ecx [ebp+var_2128] +
call sub_1019DA1  +
cmp eax edi +
jl loc_101ABDE  +
xor eax eax +
mov ecx [ebp+var_C] +
mov large fs:0 ecx +
pop ecx  +
pop edi  +
pop esi  +
pop ebx  +
mov ecx [ebp+var_14] +
xor ecx ebp +
call sub_1001E40  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0FFFFFFFFh  +
push offset byte_10219B3  +
mov eax large fs:0 +
push eax  +
mov eax 225Ch +
call sub_10039A6  +
mov eax dword_1026044 +
xor eax ebp +
mov [ebp+var_10] eax +
push ebx  +
push esi  +
push edi  +
push eax  +
lea eax [ebp+var_C] +
mov large fs:0 eax +
mov eax [ebp+arg_4] +
mov edi [ebp+arg_0] +
xor ebx ebx +
mov [ebp+var_221C] ecx +
mov [ebp+var_2220] eax +
mov [ebp+var_222C] ebx +
mov [ebp+var_2228] ebx +
mov [ebp+var_2224] ebx +
mov eax [ebp+arg_C] +
push edi  +
mov [ebp+var_4] ebx +
mov [ebp+var_2264] eax +
call sub_1019DA1  +
mov esi eax +
cmp esi ebx +
jmp loc_101B17C  +
mov esi ds:lstrcmpiW +
push offset String2  +
push edi  +
mov [ebp+var_2230] 1 +
call esi  +
mov ebx eax +
neg ebx  +
push offset aForceremove  +
sbb ebx ebx +
push edi  +
inc ebx  +
call esi  +
test eax eax +
jz loc_101ACA7  +
test ebx ebx +
jz loc_101AD64  +
mov ecx [ebp+var_221C] +
push edi  +
call sub_1019DA1  +
mov esi eax +
test esi esi +
jl loc_101B1E5  +
cmp [ebp+arg_8] 0 +
jz loc_101AD64  +
xor esi esi +
push 5Ch  +
push edi  +
mov [ebp+var_223C] esi +
mov [ebp+var_2238] esi +
mov [ebp+var_2234] esi +
call sub_1019D15  +
test eax eax +
jnz loc_101B189  +
mov ecx [ebp+var_221C] +
push edi  +
call sub_1019EB6  +
test eax eax +
jz loc_101AD19  +
mov eax [ebp+var_2220] +
push edi  +
lea ecx [ebp+var_223C] +
mov [ebp+var_223C] eax +
call sub_101A117  +
mov [ebp+var_223C] esi +
cmp ebx esi +
jz loc_101AD59  +
mov ecx [ebp+var_221C] +
push edi  +
call sub_1019DA1  +
mov esi eax +
test esi esi +
jl loc_101B19B  +
mov ecx [ebp+var_221C] +
push edi  +
call sub_1019F59  +
lea ecx [ebp+var_223C] +
mov esi eax +
call sub_10198DF  +
test esi esi +
jge loc_101B137  +
jmp loc_101B1E5  +
lea ecx [ebp+var_223C] +
call sub_10198DF  +
push offset aNoremove  +
push edi  +
call ds:lstrcmpiW  +
test eax eax +
jnz loc_101AD90  +
mov ecx [ebp+var_221C] +
and [ebp+var_2230] eax +
push edi  +
call sub_1019DA1  +
mov esi eax +
test esi esi +
jl loc_101B1E5  +
push offset aVal  +
push edi  +
call ds:lstrcmpiW  +
test eax eax +
jnz loc_101AEB5  +
mov ecx [ebp+var_221C] +
lea eax [ebp+ValueName] +
push eax  +
call sub_1019DA1  +
mov esi eax +
xor ebx ebx +
cmp esi ebx +
jl loc_101B1E5  +
mov ecx [ebp+var_221C] +
push edi  +
call sub_1019DA1  +
mov esi eax +
cmp esi ebx +
jl loc_101B1E5  +
cmp word ptr [edi] 3Dh +
jnz loc_101B194  +
cmp [ebp+arg_8] ebx +
jz loc_101AE3B  +
mov [ebp+var_2250] ebx +
mov [ebp+var_224C] ebx +
mov eax [ebp+var_2220] +
mov ecx [ebp+var_221C] +
mov [ebp+var_2254] eax +
push edi  +
lea eax [ebp+ValueName] +
push eax  +
lea eax [ebp+var_2254] +
push eax  +
mov byte ptr [ebp+var_4] 1 +
call sub_101A8AC  +
mov esi eax +
cmp esi ebx +
mov [ebp+var_2254] ebx +
lea ecx [ebp+var_2254] +
jl loc_101B1E0  +
mov byte ptr [ebp+var_4] bl +
jmp loc_101B132  +
cmp [ebp+arg_C] ebx +
jnz loc_101AEA4  +
cmp [ebp+var_2230] ebx +
jz loc_101AEA4  +
push 20006h  +
push ebx  +
push [ebp+var_2220]  +
lea ecx [ebp+hKey] +
mov [ebp+hKey] ebx +
mov [ebp+var_2244] ebx +
mov [ebp+var_2240] ebx +
call sub_1019952  +
cmp eax ebx +
jnz loc_101B1A3  +
lea eax [ebp+ValueName] +
push eax  +
push [ebp+hKey]  +
call ds:RegDeleteValueW  +
cmp eax ebx +
jz loc_101AE99  +
cmp eax 2 +
jnz loc_101B1A3  +
lea ecx [ebp+hKey] +
call sub_10198DF  +
mov ecx [ebp+var_221C] +
push edi  +
call sub_1019F59  +
jmp loc_101AC6B  +
push 5Ch  +
push edi  +
call sub_1019D15  +
test eax eax +
jnz loc_101B194  +
cmp [ebp+arg_8] eax +
jz loc_101AF64  +
mov esi 2001Fh +
push esi  +
push edi  +
push [ebp+var_2220]  +
lea ecx [ebp+var_222C] +
call sub_1019952  +
test eax eax +
jz loc_101AF28  +
push 20019h  +
push edi  +
push [ebp+var_2220]  +
lea ecx [ebp+var_222C] +
call sub_1019952  +
test eax eax +
jz loc_101AF28  +
xor ebx ebx +
push ebx  +
push ebx  +
push esi  +
push ebx  +
push ebx  +
push edi  +
push [ebp+var_2220]  +
lea ecx [ebp+var_222C] +
call sub_10198FD  +
mov esi eax +
cmp esi ebx +
jnz loc_101B1B1  +
mov ecx [ebp+var_221C] +
push edi  +
call sub_1019DA1  +
mov esi eax +
test esi esi +
jl loc_101B1E5  +
cmp word ptr [edi] 3Dh +
jnz loc_101B137  +
mov ecx [ebp+var_221C] +
push edi  +
push 0  +
lea eax [ebp+var_222C] +
push eax  +
call sub_101A8AC  +
mov esi eax +
jmp loc_101AD4C  +
cmp [ebp+arg_C] 0 +
jnz loc_101AF85  +
push 20019h  +
push edi  +
push [ebp+var_2220]  +
lea ecx [ebp+var_222C] +
call sub_1019952  +
mov ebx eax +
jmp loc_101AF88  +
push 2  +
pop ebx  +
test ebx ebx +
jz loc_101AF93  +
mov [ebp+arg_C] 1 +
push 0FFFFFFFFh  +
push edi  +
lea eax [ebp+SubKey] +
push 104h  +
push eax  +
call wcsncpy_s  +
add esp 10h +
push eax  +
call sub_101963D  +
mov ecx [ebp+var_221C] +
push edi  +
call sub_1019DA1  +
mov esi eax +
test esi esi +
jl loc_101B1E5  +
mov ecx [ebp+var_221C] +
push edi  +
call sub_1019F59  +
mov esi eax +
test esi esi +
jl loc_101B1E5  +
cmp word ptr [edi] 7Bh +
jnz loc_101B02B  +
push edi  +
call ds:lstrlenW  +
cmp eax 1 +
jnz loc_101B02B  +
push [ebp+arg_C]  +
mov ecx [ebp+var_221C] +
push 0  +
push [ebp+var_222C]  +
push edi  +
call sub_101ABFF  +
mov esi eax +
test esi esi +
jge loc_101B015  +
cmp [ebp+arg_C] 0 +
jz loc_101B1E5  +
mov ecx [ebp+var_221C] +
push edi  +
call sub_1019DA1  +
mov esi eax +
test esi esi +
jl loc_101B1E5  +
mov eax [ebp+var_2264] +
mov [ebp+arg_C] eax +
cmp ebx 2 +
jz loc_101B17E  +
test ebx ebx +
jz loc_101B056  +
test eax eax +
jnz loc_101B17E  +
push ebx  +
call sub_1018535  +
mov esi eax +
jmp loc_101B1E5  +
test eax eax +
jz loc_101B0AD  +
push [ebp+var_222C]  +
mov ecx [ebp+var_221C] +
call sub_1019F1D  +
test eax eax +
jz loc_101B0AD  +
mov ecx [ebp+var_221C] +
lea eax [ebp+SubKey] +
push eax  +
call sub_1019EB6  +
test eax eax +
jz loc_101B17E  +
cmp [ebp+var_2230] 0 +
jz loc_101B17E  +
lea eax [ebp+SubKey] +
push eax  +
lea ecx [ebp+var_222C] +
call sub_101A117  +
jmp loc_101B17E  +
push [ebp+var_222C]  +
mov ecx [ebp+var_221C] +
call sub_1019F1D  +
lea ecx [ebp+var_222C] +
mov [ebp+var_2268] eax +
call sub_10198DF  +
mov ebx eax +
xor eax eax +
cmp ebx eax +
jnz loc_101B1C4  +
cmp [ebp+var_2230] eax +
jz loc_101B17E  +
cmp [ebp+var_2268] eax +
jnz loc_101B17E  +
mov [ebp+var_225C] eax +
mov [ebp+var_2258] eax +
mov eax [ebp+var_2220] +
mov [ebp+var_2260] eax +
lea eax [ebp+SubKey] +
push eax  +
lea ecx [ebp+var_2260] +
call sub_10197C6  +
and [ebp+var_2260] 0 +
test eax eax +
jnz loc_101B1D2  +
lea ecx [ebp+var_2260] +
call sub_10198DF  +
cmp [ebp+arg_8] 0 +
jz loc_101B17E  +
cmp word ptr [edi] 7Bh +
jnz loc_101B17E  +
push edi  +
call ds:lstrlenW  +
cmp eax 1 +
jnz loc_101B17E  +
mov ecx [ebp+var_221C] +
push 0  +
push [ebp+arg_8]  +
push [ebp+var_222C]  +
push edi  +
call sub_101ABFF  +
mov esi eax +
test esi esi +
jl loc_101B1E5  +
mov ecx [ebp+var_221C] +
push edi  +
call sub_1019DA1  +
mov esi eax +
test esi esi +
jl loc_101B1E5  +
cmp word ptr [edi] 7Dh +
jz loc_101B1E5  +
jmp loc_101AC74  +
lea ecx [ebp+var_223C] +
call sub_10198DF  +
mov esi 80020009h +
jmp loc_101B1E5  +
lea ecx [ebp+var_223C] +
jmp loc_101B1E0  +
push eax  +
call sub_1018535  +
lea ecx [ebp+hKey] +
jmp loc_101B1DE  +
lea ecx [ebp+var_222C] +
call sub_10198DF  +
push esi  +
call sub_1018535  +
jmp loc_101B1F2  +
lea ecx [ebp+var_222C] +
call sub_10198DF  +
push ebx  +
jmp loc_101B1BD  +
push eax  +
call sub_1018535  +
lea ecx [ebp+var_2260] +
mov esi eax +
call sub_10198DF  +
lea ecx [ebp+var_222C] +
call sub_10198DF  +
mov eax esi +
mov ecx [ebp+var_C] +
mov large fs:0 ecx +
pop ecx  +
pop edi  +
pop esi  +
pop ebx  +
mov ecx [ebp+var_10] +
xor ecx ebp +
call sub_1001E40  +
leave   +
retn 10h  +
***
mov edi edi +
push esi  +
mov edx ecx +
push edi  +
mov dword ptr [edx] offset off_10153C8 +
and dword ptr [edx+4] 0 +
and dword ptr [edx+8] 0 +
and dword ptr [edx+0Ch] 0 +
lea esi [edx+10h] +
push 6  +
pop ecx  +
xor eax eax +
mov edi esi +
stos   +
mov [esi+18h] al +
pop edi  +
mov eax edx +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_100EA04  +
test byte ptr [ebp+8] 1 +
jz loc_101B2A4  +
push esi  +
call off_1026660  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_1004DD8  +
mov esi [ebp+8] +
xor edi edi +
cmp esi edi +
jnz loc_101B2CC  +
mov eax 80004003h +
jmp loc_101B30E  +
push 0D8h  +
mov [esi] edi +
mov dword ptr [ebp-14h] 8007000Eh +
mov [ebp-4] edi +
call off_102665C  +
cmp eax edi +
jz loc_101B2F1  +
push edi  +
mov ecx eax +
call sub_10193FC  +
jmp loc_101B302  +
xor eax eax +
jmp loc_101B302  +
mov eax offset loc_101B2FB +
retn   +
mov esi [ebp+8] +
xor edi edi +
mov eax edi +
cmp eax edi +
jz loc_101B309  +
mov [ebp-14h] edi +
mov [esi] eax +
mov eax [ebp-14h] +
call __EH_epilog3  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax 200Ch +
call sub_10039A6  +
mov eax dword_1026044 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
and [ebp+pv] 0 +
push esi  +
mov esi ecx +
push edi  +
lea ecx [ebp+pv] +
push ecx  +
push eax  +
mov ecx esi +
call sub_101A4C7  +
mov edi eax +
test edi edi +
jl loc_101B412  +
mov eax [ebp+pv] +
xor ecx ecx +
mov [esi] eax +
cmp cx [eax] +
jz loc_101B404  +
push ebx  +
lea eax [ebp+String1] +
push eax  +
mov ecx esi +
call sub_1019DA1  +
mov edi eax +
xor ebx ebx +
cmp edi ebx +
jl loc_101B403  +
lea eax [ebp+String1] +
push eax  +
call sub_1019C6C  +
mov [ebp+var_200C] eax +
cmp eax ebx +
jz loc_101B44B  +
lea eax [ebp+String1] +
push eax  +
mov ecx esi +
call sub_1019DA1  +
mov edi eax +
cmp edi ebx +
jl loc_101B403  +
push 7Bh  +
pop eax  +
cmp ax [ebp+String1] +
jnz loc_101B44B  +
lea eax [ebp+String1] +
mov ecx esi +
cmp [ebp+arg_4] ebx +
jz loc_101B422  +
mov ebx [esi] +
push 0  +
push [ebp+arg_4]  +
push [ebp+var_200C]  +
push eax  +
call sub_101ABFF  +
mov edi eax +
test edi edi +
jge loc_101B436  +
push 0  +
push 0  +
push [ebp+var_200C]  +
lea eax [ebp+String1] +
push eax  +
mov ecx esi +
mov [esi] ebx +
call sub_101ABFF  +
pop ebx  +
push [ebp+pv]  +
call ds:CoTaskMemFree  +
mov eax edi +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_1001E40  +
leave   +
retn 8  +
push ebx  +
push ebx  +
push [ebp+var_200C]  +
push eax  +
call sub_101ABFF  +
mov edi eax +
cmp edi ebx +
jl loc_101B403  +
mov ecx esi +
call sub_1019D78  +
mov eax [esi] +
xor ecx ecx +
cmp cx [eax] +
jz loc_101B403  +
jmp loc_101B36F  +
mov edi 80020009h +
jmp loc_101B403  +
***
call sub_1004BF8  +
mov eax [ebp+8] +
mov edi [ebp+0Ch] +
mov ebx [ebp+10h] +
xor esi esi +
mov [ebp-424h] esi +
mov [ebp-4] esi +
mov [ebp-42Ch] ecx +
mov [ebp-430h] esi +
mov [ebp-418h] esi +
push 2  +
push esi  +
push eax  +
mov byte ptr [ebp-4] 1 +
call ds:LoadLibraryExW  +
mov [ebp-41Ch] eax +
cmp eax esi +
jnz loc_101B4B0  +
call sub_100975B  +
mov esi eax +
jmp loc_101B5B9  +
push ebx  +
push edi  +
push eax  +
call ds:FindResourceW  +
mov edi eax +
cmp edi esi +
jnz loc_101B4C9  +
call sub_100975B  +
jmp loc_101B5AB  +
push edi  +
push dword ptr [ebp-41Ch]  +
call ds:LoadResource  +
mov [ebp-428h] eax +
cmp eax esi +
jz loc_101B4BF  +
push edi  +
push dword ptr [ebp-41Ch]  +
call ds:SizeofResource  +
mov edi eax +
lea eax [edi+1] +
mov [ebp-420h] edi +
cmp eax edi +
jnb loc_101B52F  +
lea eax [ebp-414h] +
cmp [ebp-418h] eax +
jz loc_101B515  +
lea ecx [ebp-418h] +
call sub_101A0B6  +
mov esi 8007000Eh +
lea ecx [ebp-424h] +
call sub_1019FC5  +
mov eax esi +
call sub_1004C38  +
retn 10h  +
push eax  +
lea ecx [ebp-418h] +
mov byte ptr [ebp-4] 2 +
call sub_101A668  +
mov dword ptr [ebp-4] 1 +
jmp loc_101B55D  +
mov dword ptr [ebp-4] 1 +
mov eax offset loc_101B555 +
retn   +
mov edi [ebp-420h] +
xor esi esi +
cmp [ebp-418h] esi +
jnz loc_101B56C  +
mov esi 8007000Eh +
jmp loc_101B5AD  +
push edi  +
push dword ptr [ebp-418h]  +
push edi  +
push dword ptr [ebp-428h]  +
push esi  +
push 3  +
call ds:MultiByteToWideChar  +
cmp eax esi +
jz loc_101B4BF  +
mov edx [ebp-418h] +
push dword ptr [ebp+14h]  +
xor ecx ecx +
mov [edx+eax*2] cx +
push dword ptr [ebp-418h]  +
lea ecx [ebp-430h] +
call sub_101B31B  +
mov esi eax +
push dword ptr [ebp-41Ch]  +
call ds:__imp_FreeLibrary  +
lea eax [ebp-414h] +
cmp [ebp-418h] eax +
jz loc_101B51A  +
lea ecx [ebp-418h] +
call sub_101A0B6  +
jmp loc_101B51A  +
***
call sub_1001D89  +
and dword ptr [ebp-10h] 0 +
movzx eax word ptr [ebp+10h] +
mov ecx [ebp+8] +
and dword ptr [ebp-4] 0 +
push 1  +
push dword ptr [ebp+14h]  +
push eax  +
push dword ptr [ebp+0Ch]  +
call sub_101B457  +
lea ecx [ebp-10h] +
mov esi eax +
call sub_1019FC5  +
mov eax esi +
call __EH_epilog3  +
retn 10h  +
***
call sub_1001D89  +
xor eax eax +
mov [ebp-10h] eax +
mov [ebp-4] eax +
cmp [ebp+10h] eax +
jz loc_101B661  +
cmp [ebp+14h] eax +
jz loc_101B661  +
mov ecx [ebp+8] +
push 1  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
call sub_101B457  +
lea ecx [ebp-10h] +
mov esi eax +
call sub_1019FC5  +
mov eax esi +
jmp loc_101B66E  +
lea ecx [ebp-10h] +
call sub_1019FC5  +
mov eax 80070057h +
call __EH_epilog3  +
retn 10h  +
***
call sub_1001D89  +
xor eax eax +
mov [ebp-10h] eax +
mov ecx [ebp+8] +
push eax  +
push dword ptr [ebp+14h]  +
mov [ebp-4] eax +
movzx eax word ptr [ebp+10h] +
push eax  +
push dword ptr [ebp+0Ch]  +
call sub_101B457  +
lea ecx [ebp-10h] +
mov esi eax +
call sub_1019FC5  +
mov eax esi +
call __EH_epilog3  +
retn 10h  +
***
call sub_1001D89  +
xor eax eax +
mov [ebp-10h] eax +
mov [ebp-4] eax +
cmp [ebp+10h] eax +
jz loc_101B6FA  +
cmp [ebp+14h] eax +
jz loc_101B6FA  +
mov ecx [ebp+8] +
push eax  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
call sub_101B457  +
lea ecx [ebp-10h] +
mov esi eax +
call sub_1019FC5  +
mov eax esi +
jmp loc_101B707  +
lea ecx [ebp-10h] +
call sub_1019FC5  +
mov eax 80070057h +
call __EH_epilog3  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0A68h +
mov eax dword_1026044 +
xor eax ebp +
mov [ebp-4] eax +
mov eax [ebp+0Ch] +
push ebx  +
push esi  +
mov esi [ebp+14h] +
push edi  +
mov edi [ebp+8] +
lea ecx [ebp-0A68h] +
mov [ebp-0A3Ch] eax +
call sub_101B259  +
lea ecx [ebp-0A58h] +
call sub_10196CA  +
mov ebx eax +
test ebx ebx +
jge loc_101B775  +
lea ecx [ebp-0A68h] +
call ??1_Locimp@locale@std@@MAE@XZ  +
mov eax ebx +
mov ecx [ebp-4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1001E40  +
leave   +
retn 10h  +
***
test esi esi +
jnz loc_101B78E  +
jmp loc_101B794  +
push dword ptr [esi+4]  +
push eax  +
lea eax [ebp-0A68h] +
push eax  +
call sub_101A83C  +
add esi 8 +
mov eax [esi] +
test eax eax +
jnz loc_101B77B  +
mov eax [edi] +
lea ecx [ebp-0A68h] +
push ecx  +
mov ecx edi +
call dword ptr [eax+14h]  +
xor ebx ebx +
cmp eax ebx +
jge loc_101B7B9  +
mov esi eax +
lea ecx [ebp-0A68h] +
call ??1_Locimp@locale@std@@MAE@XZ  +
mov eax esi +
jmp loc_101B764  +
***
mov edi dword_10262CC +
mov esi 104h +
push esi  +
lea eax [ebp-20Ch] +
push eax  +
push edi  +
mov [ebp-0A38h] ebx +
call ds:GetModuleFileNameW  +
cmp eax ebx +
jnz loc_101B7F1  +
call sub_100975B  +
mov esi eax +
lea ecx [ebp-0A38h] +
call sub_1019FC5  +
jmp loc_101B7AA  +
***
cmp eax esi +
jnz loc_101B807  +
lea ecx [ebp-0A38h] +
call sub_1019FC5  +
mov esi 8007007Ah +
jmp loc_101B7AA  +
***
lea eax [ebp-20Ch] +
push eax  +
push 208h  +
lea eax [ebp-0A34h] +
push eax  +
call sub_1019761  +
cmp edi ebx +
jz loc_101B836  +
push ebx  +
call ds:GetModuleHandleW  +
cmp edi eax +
jz loc_101B836  +
lea eax [ebp-0A34h] +
jmp loc_101B89B  +
push 22h  +
pop eax  +
mov [ebp-624h] ax +
lea eax [ebp-0A34h] +
push eax  +
push 20Bh  +
lea eax [ebp-622h] +
push eax  +
call sub_10195D6  +
test al al +
jnz loc_101B871  +
lea ecx [ebp-0A38h] +
call sub_1019FC5  +
mov esi 80004005h +
jmp loc_101B7AA  +
***
lea eax [ebp-624h] +
push eax  +
call ds:lstrlenW  +
add eax eax +
push 22h  +
pop ecx  +
mov [ebp+eax-624h] cx +
xor ecx ecx +
mov [ebp+eax-622h] cx +
lea eax [ebp-624h] +
push eax  +
push offset aModule  +
lea eax [ebp-0A68h] +
push eax  +
call sub_101A83C  +
mov esi eax +
cmp esi ebx +
jl loc_101B7E4  +
lea eax [ebp-0A34h] +
push eax  +
push offset aModule_raw  +
lea eax [ebp-0A68h] +
push eax  +
call sub_101A83C  +
mov esi eax +
cmp esi ebx +
jl loc_101B7E4  +
push offset aRegistry  +
push dword ptr [ebp-0A3Ch]  +
lea eax [ebp-20Ch] +
push eax  +
lea eax [ebp-0A68h] +
push eax  +
cmp [ebp+10h] ebx +
jz loc_101B901  +
call sub_101B622  +
jmp loc_101B7E2  +
***
call sub_101B6BC  +
jmp loc_101B7E2  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0A64h +
mov eax dword_1026044 +
xor eax ebp +
mov [ebp-4] eax +
push ebx  +
push esi  +
mov esi [ebp+14h] +
push edi  +
mov edi [ebp+8] +
lea ecx [ebp-0A64h] +
call sub_101B259  +
lea ecx [ebp-0A54h] +
call sub_10196CA  +
mov ebx eax +
test ebx ebx +
jge loc_101B968  +
lea ecx [ebp-0A64h] +
call ??1_Locimp@locale@std@@MAE@XZ  +
mov eax ebx +
mov ecx [ebp-4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1001E40  +
leave   +
retn 10h  +
***
test esi esi +
jnz loc_101B981  +
jmp loc_101B987  +
push dword ptr [esi+4]  +
push eax  +
lea eax [ebp-0A64h] +
push eax  +
call sub_101A83C  +
add esi 8 +
mov eax [esi] +
test eax eax +
jnz loc_101B96E  +
mov eax [edi] +
lea ecx [ebp-0A64h] +
push ecx  +
mov ecx edi +
call dword ptr [eax+14h]  +
xor ebx ebx +
cmp eax ebx +
jge loc_101B9AC  +
mov esi eax +
lea ecx [ebp-0A64h] +
call ??1_Locimp@locale@std@@MAE@XZ  +
mov eax esi +
jmp loc_101B957  +
***
mov edi dword_10262CC +
mov esi 104h +
push esi  +
lea eax [ebp-20Ch] +
push eax  +
push edi  +
mov [ebp-0A38h] ebx +
call ds:GetModuleFileNameW  +
cmp eax ebx +
jnz loc_101B9E4  +
call sub_100975B  +
mov esi eax +
lea ecx [ebp-0A38h] +
call sub_1019FC5  +
jmp loc_101B99D  +
***
cmp eax esi +
jnz loc_101B9FA  +
lea ecx [ebp-0A38h] +
call sub_1019FC5  +
mov esi 8007007Ah +
jmp loc_101B99D  +
***
lea eax [ebp-20Ch] +
push eax  +
push 208h  +
lea eax [ebp-0A34h] +
push eax  +
call sub_1019761  +
cmp edi ebx +
jz loc_101BA29  +
push ebx  +
call ds:GetModuleHandleW  +
cmp edi eax +
jz loc_101BA29  +
lea eax [ebp-0A34h] +
jmp loc_101BA8E  +
push 22h  +
pop eax  +
mov [ebp-624h] ax +
lea eax [ebp-0A34h] +
push eax  +
push 20Bh  +
lea eax [ebp-622h] +
push eax  +
call sub_10195D6  +
test al al +
jnz loc_101BA64  +
lea ecx [ebp-0A38h] +
call sub_1019FC5  +
mov esi 80004005h +
jmp loc_101B99D  +
***
lea eax [ebp-624h] +
push eax  +
call ds:lstrlenW  +
add eax eax +
push 22h  +
pop ecx  +
mov [ebp+eax-624h] cx +
xor ecx ecx +
mov [ebp+eax-622h] cx +
lea eax [ebp-624h] +
push eax  +
push offset aModule  +
lea eax [ebp-0A64h] +
push eax  +
call sub_101A83C  +
mov esi eax +
cmp esi ebx +
jl loc_101B9D7  +
lea eax [ebp-0A34h] +
push eax  +
push offset aModule_raw  +
lea eax [ebp-0A64h] +
push eax  +
call sub_101A83C  +
mov esi eax +
cmp esi ebx +
jl loc_101B9D7  +
push offset aRegistry  +
push dword ptr [ebp+0Ch]  +
lea eax [ebp-20Ch] +
push eax  +
lea eax [ebp-0A64h] +
push eax  +
cmp [ebp+10h] ebx +
jz loc_101BAF1  +
call sub_101B5E0  +
jmp loc_101B9D5  +
***
call sub_101B67B  +
jmp loc_101B9D5  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_100E670  +
test byte ptr [ebp+8] 1 +
jz loc_101BB1A  +
push esi  +
call off_1026660  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp loc_101B714  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp loc_101B910  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_100E6C6  +
test byte ptr [ebp+8] 1 +
jz loc_101BB60  +
push esi  +
call off_1026660  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
lea eax [ecx+240h] +
lea ecx [eax+4] +
neg eax  +
sbb eax eax +
and eax ecx +
and [ebp+var_4] 0 +
mov [ebp+var_C] eax +
mov [ebp+var_8] eax +
jmp loc_101BB9C  +
mov eax [ebp+var_8] +
mov dword ptr [eax+998h] 1 +
lea ecx [ebp+var_C] +
call sub_101C5F9  +
test eax eax +
jnz loc_101BB8F  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
or dword ptr [edi] 0FFFFFFFFh +
mov esi ecx +
push dword ptr [esi+9E8h]  +
mov eax [esi+9E4h] +
mov ecx [esi+418h] +
push eax  +
call sub_10015CB  +
test eax eax +
jge loc_101BBFD  +
push eax  +
lea ecx [ebp+var_20] +
call sub_1018DFF  +
mov esi eax +
lea edi [ebp+var_10] +
movs   +
movs   +
movs   +
push offset dword_1023994  +
lea eax [ebp+var_10] +
push eax  +
movs   +
call _CxxThrowException  +
mov ecx esi +
call sub_1001B10  +
and [ebp+arg_0] 0 +
test eax eax +
jl loc_101BC39  +
lea eax [ebp+arg_0] +
push eax  +
push 4  +
lea ecx [esi+9D8h] +
call sub_1004AA0  +
test eax eax +
jl loc_101BC39  +
mov eax [ebp+arg_0] +
mov eax [eax] +
mov [edi] eax +
mov ecx [esi+418h] +
push 1  +
call sub_1005677  +
test eax eax +
jl loc_101BBDD  +
pop edi  +
pop esi  +
leave   +
retn 4  +
***
call sub_1001D89  +
mov esi ecx +
mov ecx [esi+1Ch] +
mov eax [esi+0Ch] +
imul eax ecx +
push ecx  +
push dword ptr [esi+20h]  +
push eax  +
call sub_1008E16  +
push eax  +
push dword ptr [esi+8]  +
lea ecx [ebp-5Ch] +
push dword ptr [esi+4]  +
call sub_1008EAE  +
and dword ptr [ebp-4] 0 +
push esi  +
lea ecx [ebp-34h] +
call sub_100DE6B  +
jmp loc_101BCA4  +
lea ecx [ebp-28h] +
call sub_10194F9  +
lea ecx [ebp-28h] +
mov edi eax +
call sub_1018DB4  +
push dword ptr [eax]  +
lea ecx [ebp-5Ch] +
push edi  +
call sub_100582B  +
test eax eax +
jz loc_101BD0A  +
lea ecx [ebp-34h] +
call sub_100DF3A  +
test eax eax +
jnz loc_101BC83  +
mov eax [ebp-58h] +
mov ecx [esi+24h] +
mov [esi+4] eax +
mov eax [ebp-54h] +
mov [esi+8] eax +
mov eax [ebp-50h] +
mov [esi+0Ch] eax +
mov eax [ebp-4Ch] +
mov [esi+10h] eax +
mov eax [ebp-48h] +
mov [esi+14h] eax +
mov eax [ebp-44h] +
mov [esi+18h] eax +
mov eax [ebp-40h] +
mov [esi+1Ch] eax +
mov eax [ebp-3Ch] +
mov [esi+20h] eax +
test ecx ecx +
jz loc_101BCEE  +
push 3  +
call sub_100DAF1  +
mov eax [ebp-38h] +
and dword ptr [ebp-38h] 0 +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-5Ch] +
mov [esi+24h] eax +
call sub_100DAD7  +
call __EH_epilog3  +
retn   +
push 8007000Eh  +
lea ecx [ebp-2Ch] +
call sub_1018DFF  +
mov esi eax +
lea edi [ebp-1Ch] +
movs   +
movs   +
movs   +
push offset dword_1023994  +
lea eax [ebp-1Ch] +
push eax  +
movs   +
call _CxxThrowException  +
int 3  +
nop   +
nop   +
nop   +
nop   +
nop   +
mov dword ptr [ecx] offset off_1003600 +
jmp sub_100E0D7  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
lea eax [ebp+arg_8] +
push eax  +
push 1  +
push [ebp+arg_4]  +
call sub_101DB51  +
pop ebp  +
retn   +
***
call ds:__imp_GetLastError  +
test eax eax +
jle loc_101BD77  +
and eax 0FFFFh +
or eax 80070000h +
test eax eax +
jl locret_101BD7E  +
mov eax 80004005h +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
mov esi ecx +
lea ecx [esi+4] +
mov [esi] eax +
call sub_1003DBC  +
lea ecx [esi+98h] +
call sub_1003DBC  +
lea ecx [esi+12Ch] +
call sub_10067A5  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
lea ecx [esi+12Ch] +
call sub_1006B64  +
lea ecx [esi+98h] +
call sub_1001F05  +
lea ecx [esi+4] +
pop esi  +
jmp sub_1001F05  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ecx+80h] +
test esi esi +
jl loc_101BE24  +
cmp dword ptr [ecx+64h] 0 +
jnz loc_101BE13  +
mov esi 80004002h +
jmp loc_101BE24  +
mov eax [ecx+64h] +
mov edx [ebp+arg_0] +
mov [edx] eax +
mov ecx [ecx+64h] +
mov eax [ecx] +
push ecx  +
call dword ptr [eax+4]  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0FFFFFFFFh  +
push offset byte_102286B  +
mov eax large fs:0 +
push eax  +
mov eax 11B4h +
call sub_10039A6  +
mov eax dword_1026044 +
xor eax ebp +
mov [ebp+var_10] eax +
push esi  +
push eax  +
lea eax [ebp+var_C] +
mov large fs:0 eax +
mov esi [ebp+arg_4] +
push 3  +
push offset SourceName  +
lea ecx [ebp+var_6C] +
call sub_101DC8F  +
and [ebp+var_4] 0 +
lea eax [ebp+var_6C] +
push eax  +
lea ecx [ebp+var_9AC] +
call sub_101BD96  +
push 1  +
push [ebp+arg_0]  +
lea ecx [ebp+var_11C0] +
mov byte ptr [ebp+var_4] 1 +
call sub_100F4F5  +
mov eax [eax+4] +
push 0  +
push eax  +
push esi  +
push [ebp+arg_8]  +
lea eax [ebp+var_9AC] +
push eax  +
mov byte ptr [ebp+var_4] 2 +
call sub_101BD44  +
add esp 14h +
lea ecx [ebp+var_9AC] +
mov [ebp+var_11C0] offset off_1001D4C +
call sub_101BDCD  +
or [ebp+var_4] 0FFFFFFFFh +
lea ecx [ebp+var_6C] +
call sub_101DCB7  +
mov ecx [ebp+var_C] +
mov large fs:0 ecx +
pop ecx  +
pop esi  +
mov ecx [ebp+var_10] +
xor ecx ebp +
call sub_1001E40  +
leave   +
retn 0Ch  +
***
mov ecx [ecx] +
test ecx ecx +
jz locret_101BF05  +
push 1  +
call sub_100E2CE  +
retn   +
***
call sub_1001D89  +
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jl loc_101C045  +
cmp eax [ecx+4] +
jge loc_101C045  +
mov ecx [ecx] +
lea eax [ecx+eax*2] +
pop ebp  +
retn 4  +
push 0  +
push 0  +
push 1  +
push 0C000008Ch  +
call ds:RaiseException  +
int 3  +
nop   +
nop   +
nop   +
nop   +
nop   +
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push offset sub_1001E40  +
push offset dword_1026044  +
call _except_handler4_common  +
add esp 18h +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call ds:??1type_info@@UAE@XZ  +
test byte ptr [ebp+8] 1 +
jz loc_101C0B7  +
push esi  +
call sub_100A21D  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
jmp ds:_purecall  +
***
call __SEH_prolog4  +
and [ebp+ms_exc.disabled] 0 +
dec [ebp+arg_8]  +
js loc_101C145  +
mov ecx [ebp+arg_0] +
sub ecx [ebp+arg_4] +
mov [ebp+arg_0] ecx +
call [ebp+arg_C]  +
jmp loc_101C105  +
mov eax [ebp-14h] +
mov [ebp-1Ch] eax +
mov eax [ebp-1Ch] +
mov eax [eax] +
mov [ebp-20h] eax +
mov eax [ebp-20h] +
cmp dword ptr [eax] 0E06D7363h +
jz loc_101C13C  +
mov dword ptr [ebp-24h] 0 +
mov eax [ebp-24h] +
retn   +
call ds:?terminate@@YAXXZ  +
mov esp [ebp-18h] +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
call __SEH_epilog4  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
push esi  +
xor esi esi +
cmp ecx esi +
jbe loc_101C1C6  +
push 0FFFFFFE0h  +
xor edx edx +
pop eax  +
div  ecx +
cmp eax [ebp+arg_8] +
jnb loc_101C1C6  +
call _errno  +
push esi  +
push esi  +
push esi  +
push esi  +
push esi  +
mov dword ptr [eax] 0Ch +
call sub_101C552  +
add esp 14h +
xor eax eax +
jmp loc_101C1D5  +
imul ecx [ebp+arg_8] +
push ecx  +
push [ebp+arg_0]  +
call realloc  +
pop ecx  +
pop ecx  +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov eax [eax] +
cmp dword ptr [eax] 0E06D7363h +
jnz loc_101C225  +
cmp dword ptr [eax+10h] 3 +
jnz loc_101C225  +
mov eax [eax+14h] +
cmp eax 19930520h +
jz loc_101C21F  +
cmp eax 19930521h +
jz loc_101C21F  +
cmp eax 19930522h +
jz loc_101C21F  +
cmp eax 1994000h +
jnz loc_101C225  +
call ds:?terminate@@YAXXZ  +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
mov eax 5A4Dh +
cmp [ecx] ax +
jz loc_101C251  +
xor eax eax +
pop ebp  +
retn   +
mov eax [ecx+3Ch] +
add eax ecx +
cmp dword ptr [eax] 4550h +
jnz loc_101C24D  +
xor edx edx +
mov ecx 10Bh +
cmp [eax+18h] cx +
setz dl  +
mov eax edx +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [eax+3Ch] +
add ecx eax +
movzx eax word ptr [ecx+14h] +
push ebx  +
push esi  +
movzx esi word ptr [ecx+6] +
xor edx edx +
push edi  +
lea eax [eax+ecx+18h] +
test esi esi +
jbe loc_101C2B2  +
mov edi [ebp+arg_4] +
mov ecx [eax+0Ch] +
cmp edi ecx +
jb loc_101C2AA  +
mov ebx [eax+8] +
add ebx ecx +
cmp edi ebx +
jb loc_101C2B4  +
inc edx  +
add eax 28h +
cmp edx esi +
jb loc_101C29A  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
call __SEH_prolog4  +
and [ebp+ms_exc.disabled] 0 +
mov esi offset __ImageBase +
push esi  +
call sub_101C23B  +
pop ecx  +
test eax eax +
jz loc_101C31B  +
mov eax [ebp+arg_0] +
sub eax esi +
push eax  +
push esi  +
call sub_101C275  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_101C31B  +
mov eax [eax+24h] +
shr eax 1Fh +
not eax  +
and eax 1 +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
jmp loc_101C324  +
mov eax [ebp-14h] +
mov eax [eax] +
mov eax [eax] +
xor ecx ecx +
cmp eax 0C0000005h +
setz cl  +
mov eax ecx +
retn   +
mov esp [ebp-18h] +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
xor eax eax +
call __SEH_epilog4  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 328h +
mov dword_1026418 eax +
mov dword_1026414 ecx +
mov dword_1026410 edx +
mov dword_102640C ebx +
mov dword_1026408 esi +
mov dword_1026404 edi +
mov word_1026430 ss +
mov word_1026424 cs +
mov word_1026400 ds +
mov word_10263FC es +
mov word_10263F8 fs +
mov word_10263F4 gs +
pushf   +
pop dword_1026428  +
mov eax [ebp+0] +
mov dword_102641C eax +
mov eax [ebp+4] +
mov dword_1026420 eax +
lea eax [ebp+8] +
mov dword_102642C eax +
mov eax [ebp-320h] +
mov dword_1026368 10001h +
mov eax dword_1026420 +
mov dword_1026324 eax +
mov dword_1026318 0C0000409h +
mov dword_102631C 1 +
mov eax dword_1026044 +
mov [ebp-328h] eax +
mov eax dword_1026048 +
mov [ebp-324h] eax +
push 0  +
call ds:SetUnhandledExceptionFilter  +
push offset ExceptionInfo  +
call ds:UnhandledExceptionFilter  +
push 0C0000409h  +
call ds:GetCurrentProcess  +
push eax  +
call ds:TerminateProcess  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2D0h +
mov eax dword_1026044 +
xor eax ebp +
mov [ebp+var_4] eax +
mov [ebp+var_220] eax +
mov [ebp+var_224] ecx +
mov [ebp+var_228] edx +
mov [ebp+var_22C] ebx +
mov [ebp+var_230] esi +
mov [ebp+var_234] edi +
mov [ebp+var_208] ss +
mov [ebp+var_214] cs +
mov [ebp+var_238] ds +
mov [ebp+var_23C] es +
mov [ebp+var_240] fs +
mov [ebp+var_244] gs +
pushf   +
pop [ebp+var_210]  +
mov eax [ebp+4] +
mov [ebp+var_218] eax +
lea eax [ebp+4] +
mov [ebp+var_2D0] 10001h +
mov [ebp+var_20C] eax +
mov eax [eax-4] +
push offset OutputString  +
mov [ebp+var_21C] eax +
call ds:OutputDebugStringA  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_1001E40  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp loc_101C479  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi+4] +
test eax eax +
jz loc_101C580  +
push eax  +
call ds:CoTaskMemFree  +
and dword ptr [esi+4] 0 +
and dword ptr [esi] 0 +
pop esi  +
retn   +
***
mov eax ecx +
and dword ptr [eax] 0 +
and dword ptr [eax+4] 0 +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi+4] +
test eax eax +
jz loc_101C5D0  +
push edi  +
xor edi edi +
test eax eax +
jbe loc_101C5C0  +
mov eax [esi] +
lea ecx [eax+edi*8] +
call sub_101C56D  +
inc edi  +
cmp edi [esi+4] +
jb loc_101C5B0  +
push dword ptr [esi]  +
call ds:CoTaskMemFree  +
and dword ptr [esi] 0 +
and dword ptr [esi+4] 0 +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_101C59D  +
mov eax [ebp+arg_0] +
mov [esi] eax +
mov eax [ebp+arg_4] +
mov [esi+4] eax +
pop esi  +
pop ebp  +
retn 8  +
***
mov edx [ecx] +
test edx edx +
jnz loc_101C602  +
xor eax eax +
retn   +
mov eax [ecx+4] +
test eax eax +
jz loc_101C61C  +
mov [ecx+8] eax +
mov eax [eax] +
add edx 4 +
mov [ecx+4] eax +
cmp eax edx +
jnz loc_101C61C  +
and dword ptr [ecx+4] 0 +
mov eax [ecx+4] +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
cmp eax 0FFFFFFFFh +
jnz loc_101C636  +
mov eax [ecx+0Ch] +
dec eax  +
push edi  +
mov edi eax +
test eax eax +
jl loc_101C659  +
mov ecx [ecx+4] +
push esi  +
lea esi [ecx+eax*2] +
movzx eax word ptr [esi] +
push eax  +
call sub_1003D6C  +
test eax eax +
jnz loc_101C658  +
dec edi  +
dec esi  +
dec esi  +
test edi edi +
jge loc_101C644  +
pop esi  +
mov eax edi +
pop edi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
push esi  +
mov esi ecx +
mov [esi+4] eax +
mov eax [ebp+arg_0] +
mov [esi+8] eax +
mov eax [ebp+arg_8] +
mov dword ptr [esi] offset off_1001D4C +
mov ecx [eax+8] +
push dword ptr [eax+4]  +
mov ecx [ecx+4] +
mov eax [eax] +
lea eax [ecx+eax*2] +
push eax  +
mov ecx esi +
call sub_1004D4B  +
mov eax esi +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
lea eax [esi+10h] +
push eax  +
push 0C1h  +
call sub_101C665  +
mov dword ptr [esi] offset off_1001F38 +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
sub esp 20h +
cmp eax [ecx+4] +
jbe loc_101C703  +
push 800700CEh  +
lea ecx [ebp+var_20] +
call sub_1018DFF  +
mov esi eax +
lea edi [ebp+var_10] +
movs   +
movs   +
movs   +
push offset dword_1023994  +
lea eax [ebp+var_10] +
push eax  +
movs   +
call _CxxThrowException  +
mov [ecx+4] eax +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx+4] +
mov edx [ebp+arg_0] +
sub esp 20h +
cmp edx eax +
jbe loc_101C745  +
push 800700CEh  +
lea ecx [ebp+var_20] +
call sub_1018DFF  +
mov esi eax +
lea edi [ebp+var_10] +
movs   +
movs   +
movs   +
push offset dword_1023994  +
lea eax [ebp+var_10] +
push eax  +
movs   +
call _CxxThrowException  +
add [ecx] edx +
sub eax edx +
mov [ecx+4] eax +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+8] +
sub esp 0Ch +
lea eax [ebp-0Ch] +
push eax  +
call sub_101022C  +
push dword ptr [ebp+14h]  +
lea ecx [ebp-0Ch] +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
call sub_101D0AD  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
lea eax [ecx+10h] +
push eax  +
push 200h  +
push 80h  +
push dword ptr [ebp+8]  +
call sub_1004AD5  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
lea eax [ecx+10h] +
cmp [ecx+4] eax +
jz loc_101C7BF  +
push eax  +
push 17h  +
push dword ptr [ebp+8]  +
call sub_100B5CD  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_100F641  +
test byte ptr [ebp+8] 1 +
jz loc_101C7E2  +
push esi  +
call off_1026660  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
and eax 0FFFFh +
cmp eax 2EE0h +
jle loc_101C80E  +
cmp eax 2F9Ah +
jg loc_101C80E  +
xor eax eax +
inc eax  +
jmp loc_101C810  +
xor eax eax +
pop ebp  +
retn 4  +
***
test byte ptr dword_1026A10 1 +
jnz loc_101C842  +
or dword_1026A10 1 +
and dword_1026A08 0 +
and dword_1026A0C 0 +
push offset sub_1023835  +
call sub_100814C  +
pop ecx  +
cmp dword_1026A04 0 +
push esi  +
mov esi offset dword_1026A08 +
jnz loc_101C867  +
push offset aWinhttp_dll  +
mov ecx esi +
call sub_100F887  +
mov dword_1026A04 1 +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ecx] +
mov eax [ebp+arg_0] +
cmp edx [eax] +
jnz loc_101C89F  +
mov ecx [ecx+4] +
cmp ecx [eax+4] +
jz loc_101C8A4  +
xor eax eax +
inc eax  +
jmp loc_101C8A6  +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
mov esi [ecx] +
xor edx edx +
cmp esi eax +
pop esi  +
jnz loc_101C8C8  +
mov eax [ecx+4] +
cmp eax edx +
jz loc_101C8CD  +
xor eax eax +
inc eax  +
jmp loc_101C8CF  +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax 282Ch +
call sub_10039A6  +
mov eax dword_1026044 +
xor eax ebp +
mov [ebp-4] eax +
mov eax [ebp+1Ch] +
mov [ebp-282Ch] eax +
mov eax [ebp+10h] +
push ebx  +
mov ebx [ebp+8] +
mov [ebp-2810h] eax +
mov eax [ebp+14h] +
push esi  +
mov esi [ebp+0Ch] +
mov [ebp-280Ch] eax +
xor eax eax +
push edi  +
mov edi [ebp+18h] +
mov [ebp-2824h] eax +
mov [ebp-2820h] eax +
mov [ebp-281Ch] eax +
mov [ebp-2818h] eax +
mov [ebp-2808h] eax +
cmp esi eax +
jnz loc_101C946  +
mov eax 80004003h +
jmp loc_101CA6A  +
push eax  +
jmp loc_101CA21  +
xor eax eax +
cmp [ebp-2808h] eax +
jl loc_101CA34  +
mov [ebp-2828h] eax +
mov [ebp-2814h] eax +
cmp [ebp-280Ch] eax +
ja loc_101C984  +
jb loc_101C97C  +
cmp dword ptr [ebp-2810h] 2800h +
jnb loc_101C984  +
mov eax [ebp-2810h] +
jmp loc_101C989  +
mov eax 2800h +
mov ecx [ebx] +
lea edx [ebp-2814h] +
push edx  +
push eax  +
lea eax [ebp-2804h] +
push eax  +
push ebx  +
call dword ptr [ecx+0Ch]  +
mov [ebp-2808h] eax +
cmp eax 80070026h +
jnz loc_101C9B2  +
and dword ptr [ebp-2808h] 0 +
mov eax [ebp-2814h] +
xor ecx ecx +
cmp eax ecx +
jz loc_101C9ED  +
cmp [ebp-2808h] ecx +
jl loc_101CA09  +
add [ebp-2824h] eax +
lea edx [ebp-2828h] +
push edx  +
adc [ebp-2820h] ecx +
mov ecx [esi] +
push eax  +
lea eax [ebp-2804h] +
push eax  +
push esi  +
call dword ptr [ecx+10h]  +
mov [ebp-2808h] eax +
xor ecx ecx +
cmp [ebp-2808h] ecx +
jl loc_101CA09  +
mov eax [ebp-2828h] +
add [ebp-281Ch] eax +
adc [ebp-2818h] ecx +
mov eax [ebp-2814h] +
sub [ebp-2810h] eax +
sbb [ebp-280Ch] ecx +
cmp eax ecx +
jz loc_101CA34  +
push 0  +
lea ecx [ebp-2810h] +
call sub_101C8AF  +
test eax eax +
jnz loc_101C94C  +
test edi edi +
jz loc_101CA49  +
mov eax [ebp-2824h] +
mov [edi] eax +
mov eax [ebp-2820h] +
mov [edi+4] eax +
mov eax [ebp-282Ch] +
test eax eax +
jz loc_101CA64  +
mov ecx [ebp-281Ch] +
mov [eax] ecx +
mov ecx [ebp-2818h] +
mov [eax+4] ecx +
mov eax [ebp-2808h] +
mov ecx [ebp-4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1001E40  +
leave   +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
cmp dword ptr [eax+0ACh] 0 +
jz loc_101CA9A  +
push dword ptr [eax+18h]  +
call ds:DeleteFileW  +
xor eax eax +
inc eax  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and dword ptr [ebp-4] 0 +
cmp dword ptr [ebp+0Ch] 0 +
jnz loc_101CABD  +
mov eax 80004003h +
jmp locret_101CB04  +
cmp dword ptr [ebp+10h] 0 +
jz loc_101CAF6  +
mov eax [ebp+8] +
mov eax [eax+10h] +
push 0  +
lea ecx [ebp-4] +
push ecx  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push eax  +
call ds:ReadFile  +
test eax eax +
jnz loc_101CAF6  +
call ds:__imp_GetLastError  +
test eax eax +
jle locret_101CB04  +
and eax 0FFFFh +
or eax 80070000h +
jmp locret_101CB04  +
mov eax [ebp+14h] +
test eax eax +
jz loc_101CB02  +
mov ecx [ebp-4] +
mov [eax] ecx +
xor eax eax +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ebp+10h] 0 +
jz loc_101CB64  +
cmp dword ptr [ebp+0Ch] 0 +
jnz loc_101CB25  +
mov eax 80004003h +
jmp loc_101CB66  +
mov eax [ebp+8] +
mov eax [eax+10h] +
push 0  +
lea ecx [ebp+10h] +
push ecx  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push eax  +
call ds:WriteFile  +
test eax eax +
jnz loc_101CB58  +
call ds:__imp_GetLastError  +
test eax eax +
jle loc_101CB66  +
and eax 0FFFFh +
or eax 80070000h +
jmp loc_101CB66  +
mov eax [ebp+14h] +
test eax eax +
jz loc_101CB64  +
mov ecx [ebp+10h] +
mov [eax] ecx +
xor eax eax +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+14h] +
push edi  +
xor edi edi +
sub eax edi +
jz loc_101CB95  +
dec eax  +
jz loc_101CB90  +
dec eax  +
jz loc_101CB8B  +
mov eax 80070057h +
jmp loc_101CBE6  +
push 2  +
pop ecx  +
jmp loc_101CB97  +
xor ecx ecx +
inc ecx  +
jmp loc_101CB97  +
xor ecx ecx +
mov eax [ebp+10h] +
push esi  +
push ecx  +
lea ecx [ebp+14h] +
mov [ebp+14h] eax +
mov eax [ebp+8] +
mov eax [eax+10h] +
push ecx  +
push dword ptr [ebp+0Ch]  +
push eax  +
call ds:SetFilePointer  +
mov esi eax +
cmp esi 0FFFFFFFFh +
jnz loc_101CBD4  +
call ds:__imp_GetLastError  +
test eax eax +
jle loc_101CBCE  +
and eax 0FFFFh +
or eax 80070000h +
mov edi eax +
test edi edi +
jl loc_101CBE3  +
mov eax [ebp+18h] +
test eax eax +
jz loc_101CBE3  +
mov ecx [ebp+14h] +
mov [eax] esi +
mov [eax+4] ecx +
mov eax edi +
pop esi  +
pop edi  +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+10h] +
mov eax [ebp+0Ch] +
sub esp 18h +
push esi  +
mov esi [ebp+8] +
mov edx [esi] +
push edi  +
lea edi [ebp-8] +
push edi  +
push 0  +
push ecx  +
push eax  +
push esi  +
call dword ptr [edx+14h]  +
test eax eax +
jl loc_101CC62  +
mov eax [ebp-8] +
mov [ebp-18h] eax +
mov eax [ebp-4] +
mov [ebp-14h] eax +
mov eax [ebp+0Ch] +
mov [ebp-10h] eax +
mov eax [ebp+10h] +
mov [ebp-0Ch] eax +
lea eax [ebp-10h] +
push eax  +
lea ecx [ebp-18h] +
call sub_101C889  +
test eax eax +
jz loc_101CC53  +
call ds:__imp_GetLastError  +
test eax eax +
jle loc_101CC62  +
and eax 0FFFFh +
or eax 80070000h +
jmp loc_101CC62  +
push dword ptr [esi+10h]  +
call ds:SetEndOfFile  +
test eax eax +
jz loc_101CC3D  +
xor eax eax +
pop edi  +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
push dword ptr [eax+10h]  +
call ds:FlushFileBuffers  +
test eax eax +
jnz loc_101CC98  +
call ds:__imp_GetLastError  +
test eax eax +
jle loc_101CC9A  +
and eax 0FFFFh +
or eax 80070000h +
jmp loc_101CC9A  +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ebp+1Ch] 2 +
jz loc_101CCB5  +
mov eax 80030001h +
jmp loc_101CCEA  +
push dword ptr [ebp+18h]  +
mov eax [ebp+8] +
push dword ptr [ebp+14h]  +
mov eax [eax+10h] +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push eax  +
call ds:LockFile  +
test eax eax +
jnz loc_101CCE8  +
call ds:__imp_GetLastError  +
test eax eax +
jle loc_101CCEA  +
and eax 0FFFFh +
or eax 80070000h +
jmp loc_101CCEA  +
xor eax eax +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ebp+1Ch] 2 +
jz loc_101CD05  +
mov eax 80030001h +
jmp loc_101CD3A  +
push dword ptr [ebp+18h]  +
mov eax [ebp+8] +
push dword ptr [ebp+14h]  +
mov eax [eax+10h] +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push eax  +
call ds:UnlockFile  +
test eax eax +
jnz loc_101CD38  +
call ds:__imp_GetLastError  +
test eax eax +
jle loc_101CD3A  +
and eax 0FFFFh +
or eax 80070000h +
jmp loc_101CD3A  +
xor eax eax +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+0Ch] +
test ebx ebx +
jnz loc_101CD5A  +
mov eax 80004003h +
jmp loc_101CE8D  +
push esi  +
mov esi [ebp+8] +
cmp dword ptr [esi+10h] 0FFFFFFFFh +
jnz loc_101CD6E  +
mov eax 80070006h +
jmp loc_101CE8C  +
mov dword ptr [ebx+4] 2 +
cmp dword ptr [esi+0B0h] 0 +
push edi  +
jz loc_101CE17  +
mov eax [esi+0D0h] +
mov [ebx+8] eax +
mov eax [esi+0D4h] +
mov [ebx+0Ch] eax +
mov eax [esi+0B4h] +
mov [ebx+18h] eax +
mov eax [esi+0B8h] +
mov [ebx+1Ch] eax +
mov eax [esi+0BCh] +
mov [ebx+20h] eax +
mov eax [esi+0C0h] +
mov [ebx+24h] eax +
mov eax [esi+0C4h] +
mov [ebx+10h] eax +
mov eax [esi+0C8h] +
mov [ebx+14h] eax +
mov eax [esi+0A8h] +
mov [ebx+28h] eax +
mov dword ptr [ebx+2Ch] 2 +
lea edi [ebx+30h] +
mov esi offset dword_100B73C +
movs   +
movs   +
movs   +
movs   +
xor edi edi +
test byte ptr [ebp+10h] 1 +
mov [ebx+40h] edi +
mov [ebx+44h] edi +
jnz loc_101CE87  +
mov esi [ebp+8] +
mov eax [esi+20h] +
lea eax [eax+eax+2] +
push eax  +
call ds:CoTaskMemAlloc  +
mov [ebx] eax +
cmp eax edi +
jnz loc_101CE69  +
mov eax 8007000Eh +
jmp loc_101CE8B  +
mov eax [esi+10h] +
lea ecx [ebx+0Ch] +
push ecx  +
push eax  +
call ds:GetFileSize  +
mov edi ds:__imp_GetLastError +
mov [ebx+8] eax +
cmp eax 0FFFFFFFFh +
jnz loc_101CE39  +
call edi  +
test eax eax +
jnz loc_101CE57  +
mov eax [esi+10h] +
lea ecx [ebx+10h] +
push ecx  +
lea ecx [ebx+20h] +
push ecx  +
lea ecx [ebx+18h] +
push ecx  +
push eax  +
call ds:GetFileTime  +
test eax eax +
jnz loc_101CDCB  +
call edi  +
test eax eax +
jle loc_101CE8B  +
and eax 0FFFFh +
or eax 80070000h +
jmp loc_101CE8B  +
mov eax [esi+20h] +
lea eax [eax+eax+2] +
push eax  +
push edi  +
lea ecx [esi+14h] +
call sub_1004BD7  +
push eax  +
push dword ptr [ebx]  +
call memcpy  +
add esp 0Ch +
jmp loc_101CE89  +
mov [ebx] edi +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+hSourceHandle] +
mov eax [ebx+10h] +
push esi  +
mov esi ds:GetCurrentProcess +
push edi  +
push 2  +
push 0  +
mov edi ecx +
mov [ebp+hSourceHandle] eax +
push 0  +
lea eax [edi+10h] +
push eax  +
call esi  +
push eax  +
push [ebp+hSourceHandle]  +
call esi  +
push eax  +
call ds:DuplicateHandle  +
test eax eax +
jnz loc_101CEE3  +
call ds:__imp_GetLastError  +
test eax eax +
jle loc_101CEFC  +
and eax 0FFFFh +
or eax 80070000h +
jmp loc_101CEFC  +
push dword ptr [ebx+18h]  +
lea ecx [edi+14h] +
call sub_10081ED  +
mov eax [ebx+0A8h] +
mov [edi+0A8h] eax +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov ecx [eax+10h] +
mov edx [ebp+0Ch] +
mov [edx] ecx +
xor ecx ecx +
cmp dword ptr [eax+10h] 0FFFFFFFFh +
setnz cl  +
mov eax ecx +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+30h] +
push esi  +
mov esi [ebp+8] +
push dword ptr [ebp+0Ch]  +
mov [esi+0D0h] eax +
mov eax [ebp+34h] +
mov [esi+0D4h] eax +
mov eax [ebp+18h] +
mov [esi+0B4h] eax +
mov eax [ebp+1Ch] +
mov [esi+0B8h] eax +
mov eax [ebp+20h] +
mov [esi+0BCh] eax +
mov eax [ebp+24h] +
mov [esi+0C0h] eax +
mov eax [ebp+28h] +
mov [esi+0C4h] eax +
mov eax [ebp+2Ch] +
lea ecx [esi+0Ch] +
mov dword ptr [esi+0B0h] 1 +
mov [esi+0C8h] eax +
call sub_1005BF5  +
push dword ptr [ebp+14h]  +
lea ecx [esi+14h] +
call sub_10081ED  +
mov eax [ebp+10h] +
mov [esi+0A8h] eax +
xor eax eax +
pop esi  +
pop ebp  +
retn 30h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ebp+0Ch] 0 +
push ebx  +
mov ebx [ebp+10h] +
push esi  +
mov esi [ebp+8] +
mov [esi+0A8h] ebx +
jnz loc_101CFD2  +
mov eax 80004003h +
jmp loc_101D02A  +
push edi  +
lea edi [esi+0Ch] +
push 0FFFFFFFFh  +
mov ecx edi +
call sub_1005BF5  +
push dword ptr [ebp+24h]  +
push dword ptr [ebp+20h]  +
push dword ptr [ebp+1Ch]  +
push dword ptr [ebp+18h]  +
push dword ptr [ebp+14h]  +
push ebx  +
push dword ptr [ebp+0Ch]  +
call ds:CreateFileW  +
push eax  +
mov ecx edi +
call sub_1005BF5  +
cmp dword ptr [esi+10h] 0FFFFFFFFh +
pop edi  +
jnz loc_101D01D  +
call ds:__imp_GetLastError  +
test eax eax +
jle loc_101D02A  +
and eax 0FFFFh +
or eax 80070000h +
jmp loc_101D02A  +
push dword ptr [ebp+0Ch]  +
lea ecx [esi+14h] +
call sub_10081ED  +
xor eax eax +
pop esi  +
pop ebx  +
pop ebp  +
retn 20h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
cmp dword ptr [ebp+0Ch] 0 +
jnz loc_101D048  +
mov eax 80004003h +
jmp locret_101D092  +
push edi  +
lea eax [ebp-4] +
push eax  +
call sub_101B2B0  +
mov edi eax +
test edi edi +
jl loc_101D08F  +
push esi  +
push dword ptr [ebp-4]  +
lea ecx [ebp-4] +
call sub_100C07F  +
mov esi [ebp-4] +
push dword ptr [ebp+8]  +
mov ecx esi +
call sub_101CE97  +
mov edi eax +
test edi edi +
jl loc_101D084  +
push dword ptr [ebp+0Ch]  +
mov eax [esi] +
push offset dword_101D098  +
push esi  +
call dword ptr [eax]  +
test esi esi +
jz loc_101D08E  +
mov eax [esi] +
push esi  +
call dword ptr [eax+8]  +
pop esi  +
mov eax edi +
pop edi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov eax [esi+4] +
lea ecx [eax+1] +
cmp [ebp+arg_4] ecx +
jnb loc_101D0D0  +
mov eax [ebp+arg_8] +
test eax eax +
jz loc_101D0C9  +
mov [eax] ecx +
mov eax 8007007Ah +
jmp loc_101D104  +
mov ecx [esi] +
add eax eax +
push edi  +
mov edi [ebp+arg_0] +
push eax  +
mov eax [esi+8] +
mov eax [eax+4] +
lea eax [eax+ecx*2] +
push eax  +
push edi  +
call memcpy  +
mov eax [esi+4] +
xor ecx ecx +
mov [edi+eax*2] cx +
mov eax [ebp+arg_8] +
add esp 0Ch +
pop edi  +
test eax eax +
jz loc_101D102  +
mov ecx [esi+4] +
mov [eax] ecx +
xor eax eax +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
cmp [ebp+lpMultiByteStr] 0 +
push ebx  +
push esi  +
push edi  +
mov esi ecx +
jnz loc_101D145  +
push 80004003h  +
lea ecx [ebp+var_20] +
call sub_1018DFF  +
mov esi eax +
lea edi [ebp+var_10] +
movs   +
movs   +
movs   +
push offset dword_1023994  +
lea eax [ebp+var_10] +
push eax  +
movs   +
call _CxxThrowException  +
push [ebp+lpMultiByteStr]  +
call ds:lstrlenA  +
mov ebx eax +
lea edi [ebx+1] +
cmp edi [esi+8] +
jbe loc_101D160  +
push edi  +
mov ecx esi +
call sub_100849E  +
push edi  +
push dword ptr [esi+4]  +
push ebx  +
push [ebp+lpMultiByteStr]  +
call sub_101DCD7  +
pop edi  +
mov [esi+0Ch] eax +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 28h +
cmp [ebp+lpMultiByteStr] 0 +
push esi  +
push edi  +
mov esi ecx +
jnz loc_101D1B2  +
push 80070057h  +
lea ecx [ebp+var_28] +
call sub_1018DFF  +
mov esi eax +
lea edi [ebp+var_18] +
movs   +
movs   +
movs   +
push offset dword_1023994  +
lea eax [ebp+var_18] +
push eax  +
movs   +
call _CxxThrowException  +
mov eax [ebp+arg_8] +
mov edi [ebp+cchMultiByte] +
mov [ebp+var_4] edi +
mov [ebp+cchMultiByte] eax +
cmp eax 0FFFFFFFFh +
jnz loc_101D1DB  +
push [ebp+lpMultiByteStr]  +
call ds:lstrlenA  +
mov [ebp+arg_8] eax +
lea eax [ebp+arg_8] +
push eax  +
lea ecx [ebp+cchMultiByte] +
call sub_1003CFC  +
push 1  +
lea eax [ebp+arg_8] +
push eax  +
push [ebp+cchMultiByte]  +
lea eax [ebp+var_8] +
push eax  +
lea ecx [ebp+var_4] +
call sub_1003C45  +
mov ecx eax +
call sub_1003C9C  +
mov ecx [esi+8] +
cmp [eax] ecx +
jbe loc_101D224  +
push 1  +
lea eax [ebp+arg_8] +
push eax  +
push [ebp+cchMultiByte]  +
lea eax [ebp+var_8] +
push eax  +
lea ecx [ebp+var_4] +
call sub_1003C45  +
mov ecx eax +
call sub_1003C9C  +
push dword ptr [eax]  +
mov edx [esi] +
mov ecx esi +
call dword ptr [edx]  +
jmp loc_101D25D  +
test edi edi +
jnz loc_101D25D  +
mov eax [esi+4] +
cmp [ebp+lpMultiByteStr] eax +
jb loc_101D238  +
lea eax [eax+ecx*2] +
cmp [ebp+lpMultiByteStr] eax +
jb loc_101D25D  +
push 1  +
lea eax [ebp+arg_8] +
push eax  +
push [ebp+cchMultiByte]  +
lea eax [ebp+var_8] +
push eax  +
lea ecx [ebp+var_4] +
call sub_1003C45  +
mov ecx eax +
call sub_1003C9C  +
push dword ptr [eax]  +
mov edx [esi] +
mov ecx esi +
call dword ptr [edx+4]  +
push 1  +
lea eax [ebp+arg_8] +
push eax  +
lea ecx [ebp+cchMultiByte] +
call sub_1003C9C  +
mov eax [eax] +
lea ecx [eax+edi] +
cmp ecx [esi+8] +
jbe loc_101D279  +
xor eax eax +
jmp loc_101D295  +
push eax  +
mov eax [esi+4] +
lea eax [eax+edi*2] +
push eax  +
push [ebp+cchMultiByte]  +
mov [esi+0Ch] edi +
push [ebp+lpMultiByteStr]  +
call sub_101DCD7  +
add [esi+0Ch] eax +
mov eax [esi+0Ch] +
pop edi  +
pop esi  +
leave   +
retn 0Ch  +
***
mov eax [ecx] +
mov ecx eax +
and ecx 1FFF0000h +
cmp ecx 70000h +
jnz loc_101D2B5  +
movzx eax ax +
push eax  +
call ds:SetLastError  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
movzx ecx [ebp+arg_0] +
push 3  +
pop eax  +
cmp ecx eax +
jz loc_101D2F3  +
cmp ecx 13h +
jz loc_101D2F3  +
jle loc_101D2F6  +
cmp ecx 15h +
jle loc_101D2F6  +
cmp ecx 80h +
jz loc_101D2F6  +
cmp ecx 82h +
jnz loc_101D2F6  +
xor eax eax +
inc eax  +
jmp loc_101D2F6  +
push 4  +
pop eax  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push esi  +
mov esi ds:SetLastError +
push edi  +
push 0  +
mov edi ecx +
call esi  +
mov eax [edi+9Ch] +
test eax eax +
jnz loc_101D326  +
push 6  +
call esi  +
xor eax eax +
jmp loc_101D34A  +
lea ecx [ebp+ftLastWriteTime] +
push ecx  +
push 0  +
push 0  +
push 0  +
push [ebp+lpcbName]  +
push [ebp+lpName]  +
push [ebp+dwIndex]  +
push eax  +
call ds:RegEnumKeyExW  +
test eax eax +
jz loc_101D347  +
push eax  +
jmp loc_101D320  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx+9Ch] +
test eax eax +
jnz loc_101D370  +
push 6  +
call ds:SetLastError  +
xor eax eax +
jmp loc_101D38C  +
push [ebp+lpValueName]  +
push eax  +
call ds:RegDeleteValueW  +
test eax eax +
jz loc_101D381  +
push eax  +
jmp loc_101D366  +
push 0  +
call ds:SetLastError  +
xor eax eax +
inc eax  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ecx+9Ch] +
push esi  +
xor esi esi +
cmp eax esi +
jnz loc_101D3B4  +
push 6  +
call ds:SetLastError  +
xor eax eax +
jmp loc_101D3F6  +
lea ecx [ebp+dwDisposition] +
push ecx  +
lea ecx [ebp+hKey] +
push ecx  +
push esi  +
push 0F003Fh  +
push esi  +
push esi  +
push esi  +
push [ebp+hKey]  +
push eax  +
call ds:RegCreateKeyExW  +
cmp eax esi +
jz loc_101D3D6  +
push eax  +
jmp loc_101D3AA  +
push [ebp+hKey]  +
call ds:RegCloseKey  +
cmp [ebp+dwDisposition] 2 +
jnz loc_101D3EC  +
push 0B7h  +
jmp loc_101D3AA  +
push esi  +
call ds:SetLastError  +
xor eax eax +
inc eax  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx+9Ch] +
test eax eax +
jnz loc_101D41B  +
push 6  +
call ds:SetLastError  +
xor eax eax +
jmp loc_101D43B  +
push 0  +
push 0  +
push [ebp+arg_0]  +
push eax  +
call ds:RegDeleteKeyExW  +
test eax eax +
jz loc_101D430  +
push eax  +
jmp loc_101D411  +
push 0  +
call ds:SetLastError  +
xor eax eax +
inc eax  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx+9Ch] +
test eax eax +
jnz loc_101D45F  +
push 6  +
call ds:SetLastError  +
xor eax eax +
jmp loc_101D485  +
push 4  +
lea ecx [ebp+Data] +
push ecx  +
push 4  +
push 0  +
push [ebp+lpValueName]  +
push eax  +
call ds:RegSetValueExW  +
test eax eax +
jz loc_101D47A  +
push eax  +
jmp loc_101D455  +
push 0  +
call ds:SetLastError  +
xor eax eax +
inc eax  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ecx+9Ch] +
test edx edx +
jnz loc_101D4A9  +
push 6  +
call ds:SetLastError  +
xor eax eax +
jmp loc_101D4D6  +
push [ebp+cbData]  +
push [ebp+lpData]  +
push [ebp+arg_4]  +
call sub_101D2C2  +
push eax  +
push 0  +
push [ebp+lpValueName]  +
push edx  +
call ds:RegSetValueExW  +
test eax eax +
jz loc_101D4CB  +
push eax  +
jmp loc_101D49F  +
push 0  +
call ds:SetLastError  +
xor eax eax +
inc eax  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ds:SetLastError +
push edi  +
push 0  +
mov edi ecx +
call esi  +
mov eax [edi+9Ch] +
test eax eax +
jnz loc_101D505  +
push 6  +
call esi  +
xor eax eax +
jmp loc_101D539  +
push [ebp+lpcbData]  +
lea ecx [ebp+Type] +
push [ebp+lpData]  +
push ecx  +
push 0  +
push [ebp+lpValueName]  +
push eax  +
call ds:RegQueryValueExW  +
test eax eax +
jz loc_101D522  +
push eax  +
jmp loc_101D4FF  +
push [ebp+arg_4]  +
call sub_101D2C2  +
cmp [ebp+Type] eax +
jz loc_101D536  +
push 70Ch  +
jmp loc_101D4FF  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
lea eax [esi+10h] +
push eax  +
push 21h  +
call sub_101C665  +
mov dword ptr [esi] offset off_1001D68 +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
push 8  +
mov eax offset byte_1022CDB +
call sub_1001D89  +
mov esi ecx +
push 0  +
call ds:SetLastError  +
push 0A0h  +
call off_102665C  +
mov ecx eax +
mov [ebp-10h] ecx +
and dword ptr [ebp-4] 0 +
test ecx ecx +
jz loc_101D5BC  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+8]  +
push esi  +
call sub_1008D30  +
mov esi eax +
jmp loc_101D5BE  +
xor esi esi +
test esi esi +
jz loc_101D5D6  +
call ds:__imp_GetLastError  +
test eax eax +
jnz loc_101D5D6  +
mov eax [ebp+0Ch] +
mov [eax] esi +
xor eax eax +
inc eax  +
jmp loc_101D5EE  +
mov eax [ebp+0Ch] +
and dword ptr [eax] 0 +
or dword ptr [ebp-4] 0FFFFFFFFh +
test esi esi +
jz loc_101D5EC  +
mov eax [esi] +
push 1  +
mov ecx esi +
call dword ptr [eax]  +
xor eax eax +
call __EH_epilog3  +
retn 0Ch  +
***
call sub_1004BF8  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push dword ptr [eax+0Ch]  +
push dword ptr [eax+4]  +
call sub_1010312  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_100E26B  +
test byte ptr [ebp+8] 1 +
jz loc_101D735  +
push esi  +
call off_1026660  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
push edi  +
mov esi ecx +
push dword ptr [esi+54h]  +
call sub_1001709  +
mov [ebp+nCount] eax +
mov eax [esi+60h] +
mov ecx 2710h +
mov edi ecx +
cmp eax 0FFFFFFFFh +
jz loc_101D76D  +
cmp eax ecx +
jnb loc_101D76D  +
mov edi eax +
mov eax [esi+2Ch] +
mov ecx [eax+80h] +
xor ebx ebx +
mov [ebp+var_4] ebx +
shr ecx 1Fh +
test ecx ecx +
jz loc_101D7CE  +
push 0  +
lea eax [esi+14h] +
push eax  +
push [ebp+nCount]  +
mov eax edi +
call sub_10013E1  +
mov ecx [esi+2Ch] +
mov ecx [ecx+80h] +
shr ecx 1Fh +
test ecx ecx +
jz loc_101D7CE  +
cmp eax 102h +
jnz loc_101D7D5  +
add ebx edi +
cmp ebx 249F0h +
jb loc_101D7C0  +
cmp [ebp+var_4] 0 +
jnz loc_101D7C0  +
mov [ebp+var_4] 1 +
mov eax [esi+60h] +
cmp eax 0FFFFFFFFh +
jz loc_101D77E  +
cmp ebx eax +
jnb loc_101D7DF  +
jmp loc_101D77E  +
mov eax 80040DB4h +
jmp loc_101D7E8  +
push eax  +
call sub_10049CB  +
test eax eax +
jl loc_101D7E8  +
xor eax eax +
inc eax  +
mov [esi+6] ax +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
push eax  +
call ds:CoTaskMemFree  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+lpBuffer] +
push esi  +
mov esi ds:LoadStringW +
push edi  +
mov edi ecx +
xor ecx ecx +
mov [ebx] cx +
mov ecx [edi+4] +
xor eax eax +
test ecx ecx +
jz loc_101D834  +
push [ebp+nBufferMax]  +
push ebx  +
push [ebp+uID]  +
push ecx  +
call esi  +
test eax eax +
jnz loc_101D844  +
mov edi [edi] +
test edi edi +
jz loc_101D844  +
push [ebp+nBufferMax]  +
push ebx  +
push [ebp+uID]  +
push edi  +
call esi  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+lpBuffer] +
push esi  +
mov esi ecx +
mov ecx [ebp+nBufferMax] +
push ecx  +
push eax  +
push [ebp+uID]  +
mov [esi+8] ecx +
mov ecx [ebp+arg_8] +
mov dword ptr [esi] offset off_1001D4C +
mov [esi+4] eax +
call sub_101D805  +
mov [esi+0Ch] eax +
mov eax esi +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+uID]  +
mov esi ecx +
push [ebp+arg_0]  +
lea eax [esi+10h] +
push eax  +
push 401h  +
call sub_101D850  +
mov dword ptr [esi] offset off_10039CC +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_100341D  +
test byte ptr [ebp+8] 1 +
jz loc_101D8CE  +
push esi  +
call off_1026660  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1001F05  +
test byte ptr [ebp+8] 1 +
jz loc_101D8F4  +
push esi  +
call off_1026660  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 94h +
test byte ptr dword_1026A20 1 +
jnz loc_101D934  +
or dword_1026A20 1 +
and dword_1026A18 0 +
and dword_1026A1C 0 +
push offset sub_1023844  +
call sub_100814C  +
pop ecx  +
cmp dword_1026A14 0 +
push esi  +
mov esi offset dword_1026A18 +
jnz loc_101D972  +
push offset aTquery_dll  +
lea ecx [ebp+var_94] +
mov dword_1026A14 1 +
call sub_100FACC  +
push dword ptr [eax+4]  +
mov ecx esi +
call sub_100F887  +
lea ecx [ebp+var_94] +
call sub_1001F05  +
mov eax esi +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+uID]  +
mov esi ecx +
call sub_101D900  +
push eax  +
mov ecx esi +
call sub_101D886  +
mov dword ptr [esi] offset off_10039CC +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1006B64  +
test byte ptr [ebp+8] 1 +
jz loc_101D9C0  +
push esi  +
call off_1026660  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0FFFFFFFFh  +
push offset word_1023172  +
mov eax large fs:0 +
push eax  +
mov eax 182Ch +
call sub_10039A6  +
mov eax dword_1026044 +
xor eax ebp +
mov [ebp+var_10] eax +
push ebx  +
push esi  +
push edi  +
push eax  +
lea eax [ebp+var_C] +
mov large fs:0 eax +
mov esi [ebp+arg_0] +
mov edi ecx +
push 0  +
mov ecx esi +
call sub_1003E02  +
mov eax [esi] +
push 0FFFFFFFFh  +
push dword ptr [esi+0Ch]  +
mov ecx esi +
push offset dword_101DB48  +
call dword ptr [eax+10h]  +
cmp dword ptr [edi+0A4h] 0 +
mov ebx offset dword_101DB44 +
jnz loc_101DA67  +
cmp dword ptr [edi+10h] 0 +
jz loc_101DACF  +
push 72h  +
lea ecx [ebp+var_1024] +
call sub_101D97C  +
push dword ptr [edi+8]  +
and [ebp+var_4] 0 +
push [ebp+var_1020]  +
lea eax [ebp+var_810] +
push 400h  +
push eax  +
call sub_1008DB5  +
add esp 10h +
jmp loc_101DAA0  +
push 71h  +
lea ecx [ebp+var_1024] +
call sub_101D97C  +
mov eax [edi+9Ch] +
mov ecx [edi+8] +
push eax  +
push ecx  +
push [ebp+var_1020]  +
lea eax [ebp+var_810] +
push 400h  +
push eax  +
mov [ebp+var_4] 1 +
call sub_1008DB5  +
add esp 14h +
mov eax [esi] +
push 0FFFFFFFFh  +
push dword ptr [esi+0Ch]  +
mov ecx esi +
push ebx  +
call dword ptr [eax+0Ch]  +
mov eax [esi] +
push 0FFFFFFFFh  +
push dword ptr [esi+0Ch]  +
lea ecx [ebp+var_810] +
push ecx  +
mov ecx esi +
call dword ptr [eax+10h]  +
or [ebp+var_4] 0FFFFFFFFh +
lea ecx [ebp+var_1024] +
call sub_1006B64  +
cmp dword ptr [edi+138h] 0 +
jz loc_101DB25  +
push 6Fh  +
lea ecx [ebp+var_1838] +
call sub_101D97C  +
mov eax [esi] +
push 0FFFFFFFFh  +
push dword ptr [esi+0Ch]  +
mov ecx esi +
push ebx  +
mov [ebp+var_4] 2 +
call dword ptr [eax+0Ch]  +
push [ebp+var_182C]  +
mov ecx esi +
push [ebp+var_1834]  +
call sub_1010312  +
add edi 12Ch +
push edi  +
mov ecx esi +
call sub_101D6FF  +
lea ecx [ebp+var_1838] +
call sub_1006B64  +
mov ecx [ebp+var_C] +
mov large fs:0 ecx +
pop ecx  +
pop edi  +
pop esi  +
pop ebx  +
mov ecx [ebp+var_10] +
xor ecx ebp +
call sub_1001E40  +
leave   +
retn 4  +
***
call sub_10039ED  +
mov esi ecx +
lea ecx [ebp-824h] +
call sub_10067A5  +
and dword ptr [ebp-4] 0 +
lea eax [ebp-824h] +
push eax  +
mov ecx esi +
call sub_101D9CC  +
mov eax [ebp-820h] +
mov [ebp-850h] eax +
mov eax [ebp+10h] +
xor edx edx +
inc edx  +
add eax 0FFFFFFFCh +
add eax 4 +
mov ecx [eax] +
movzx ebx dx +
mov [ebp+ebx*4-850h] ecx +
test ecx ecx +
jz loc_101DBAE  +
inc edx  +
cmp dx 0Bh +
jb loc_101DB94  +
mov ecx [esi] +
push 0  +
push 0  +
lea eax [ebp-850h] +
push eax  +
movzx eax dx +
push eax  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call sub_101DC33  +
lea ecx [ebp-824h] +
mov esi eax +
call sub_1006B64  +
mov eax esi +
call sub_1003A2A  +
retn 0Ch  +
***
cmp dword_1026A24 0 +
jz loc_101DBF3  +
xor eax eax +
inc eax  +
retn   +
push esi  +
lea esi [ecx+54h] +
cmp dword ptr [esi] 0 +
jz loc_101DC01  +
xor eax eax +
inc eax  +
pop esi  +
retn   +
push edi  +
push dword ptr [ecx+4]  +
push 0  +
call ds:RegisterEventSourceW  +
mov edi eax +
test edi edi +
jz loc_101DC2B  +
push 0  +
push edi  +
push esi  +
call ds:__imp_InterlockedCompareExchange  +
test eax eax +
jz loc_101DC28  +
push edi  +
call ds:DeregisterEventSource  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword_1026A24 0 +
push esi  +
mov esi ecx +
jnz loc_101DC82  +
push [ebp+dwEventID]  +
mov ecx offset unk_1026A28 +
call sub_101E48D  +
test al al +
jnz loc_101DC82  +
mov ecx esi +
call sub_101DBE6  +
test eax eax +
jz loc_101DC85  +
push [ebp+lpRawData]  +
movzx eax word ptr [esi+58h] +
push [ebp+lpStrings]  +
push [ebp+dwDataSize]  +
push dword ptr [ebp+wNumStrings]  +
push 0  +
push [ebp+dwEventID]  +
push eax  +
push dword ptr [ebp+wType]  +
push dword ptr [esi+54h]  +
call ds:ReportEventW  +
xor eax eax +
inc eax  +
pop esi  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_1004CF3  +
mov ax [ebp+arg_4] +
and dword ptr [esi+54h] 0 +
mov [esi+58h] ax +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi+54h] +
test eax eax +
jz loc_101DCCA  +
push eax  +
call ds:DeregisterEventSource  +
mov ecx esi +
pop esi  +
jmp sub_1002011  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+lpWideCharStr] +
push esi  +
mov esi [ebp+cchWideChar] +
push edi  +
push esi  +
push ebx  +
push [ebp+cchMultiByte]  +
push [ebp+lpMultiByteStr]  +
push 0  +
push 0  +
call ds:MultiByteToWideChar  +
mov edi eax +
test esi esi +
jle loc_101DD1E  +
cmp edi esi +
jge loc_101DD0D  +
test edi edi +
jl loc_101DD0D  +
xor eax eax +
mov [ebx+edi*2] ax +
jmp loc_101DD1E  +
xor eax eax +
push 7Ah  +
xor edi edi +
mov [ebx+esi*2-2] ax +
call ds:SetLastError  +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
lea eax [ebp+SystemTimeAsFileTime] +
push eax  +
call ds:GetSystemTimeAsFileTime  +
mov ecx [ebp+SystemTimeAsFileTime.dwHighDateTime] +
mov eax [ebp+SystemTimeAsFileTime.dwLowDateTime] +
push 0  +
push 0Ah  +
push ecx  +
push eax  +
call __alldiv  +
push 0  +
push 3E8h  +
push edx  +
push eax  +
call __alldiv  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax ecx +
xor ecx ecx +
mov [eax] ecx +
mov [eax+4] ecx +
mov [eax+8] ecx +
mov [eax+0Ch] ecx +
mov [eax+10h] ecx +
mov ecx [ebp+arg_0] +
mov [eax+14h] ecx +
pop ebp  +
retn 4  +
***
xor eax eax +
cmp dword ptr [ecx] 2 +
jnz locret_101DD96  +
cmp [ecx+10h] eax +
jle locret_101DD96  +
inc eax  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_101DD2C  +
mov ecx [esi] +
sub ecx 0 +
jz loc_101DDD8  +
dec ecx  +
jz loc_101DDB8  +
dec ecx  +
jnz loc_101DDE6  +
inc dword ptr [esi+10h]  +
pop esi  +
retn   +
mov ecx [esi+0Ch] +
cmp ecx dword_102698C +
jl loc_101DDD2  +
mov dword ptr [esi] 2 +
mov dword ptr [esi+10h] 1 +
jmp loc_101DDE0  +
inc ecx  +
mov [esi+0Ch] ecx +
pop esi  +
retn   +
xor ecx ecx +
inc ecx  +
mov [esi+0Ch] ecx +
mov [esi] ecx +
mov [esi+8] edx +
mov [esi+4] eax +
pop esi  +
retn   +
***
mov eax [ecx] +
test eax eax +
jz loc_101DDFB  +
cmp eax 1 +
jz loc_101DDFB  +
xor al al +
retn   +
mov al 1 +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
lea eax [ebp+var_4] +
push eax  +
push [ebp+arg_4]  +
mov [ebp+var_4] 4 +
push 0  +
push 10h  +
push [ebp+arg_0]  +
push offset aSoftwareMicr_1  +
push 80000002h  +
call ds:SHRegGetValueW  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
lea eax [ebp+var_4] +
push eax  +
push offset aEventthrottlem  +
call sub_101DE03  +
xor esi esi +
inc esi  +
test eax eax +
jnz loc_101DEBF  +
mov eax [ebp+var_4] +
cmp eax esi +
mov dword_102698C esi +
jl loc_101DEBF  +
mov dword_102698C eax +
lea eax [ebp+var_4] +
push eax  +
push offset aEventthrottl_0  +
call sub_101DE03  +
test eax eax +
jnz loc_101DEE3  +
mov eax [ebp+var_4] +
cmp eax esi +
mov dword_1026990 esi +
jl loc_101DEE3  +
mov dword_1026990 eax +
lea eax [ebp+var_4] +
push eax  +
push offset aEventthrottleb  +
call sub_101DE03  +
test eax eax +
jnz loc_101DF07  +
mov eax [ebp+var_4] +
cmp eax esi +
mov dword_1026994 esi +
jl loc_101DF07  +
mov dword_1026994 eax +
lea eax [ebp+var_4] +
push eax  +
push offset aEventthrottlef  +
call sub_101DE03  +
test eax eax +
jnz loc_101DF2B  +
mov eax [ebp+var_4] +
cmp eax esi +
mov dword_1026998 esi +
jl loc_101DF2B  +
mov dword_1026998 eax +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebx  +
push esi  +
push edi  +
mov esi ecx +
call sub_101DD2C  +
mov ecx [esi] +
mov edi eax +
xor eax eax +
sub ecx eax +
mov bl 1 +
jz loc_101E058  +
dec ecx  +
jz loc_101E049  +
dec ecx  +
jnz loc_101E05E  +
cmp [esi+10h] eax +
mov ecx [esi+8] +
setnl bl  +
cmp ecx edx +
jl loc_101E058  +
jg loc_101E05E  +
mov ecx [esi+4] +
cmp ecx edi +
ja loc_101E05E  +
jmp loc_101E058  +
cmp [esi+0Ch] eax +
mov ecx [esi+8] +
setnl bl  +
cmp ecx edx +
jg loc_101E05E  +
jge loc_101E040  +
cmp bl al +
jz loc_101E05E  +
mov al 1 +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov edi ecx +
mov ecx esi +
call sub_101E013  +
test al al +
jz loc_101E087  +
push 5  +
pop ecx  +
movs   +
mov al 1 +
jmp loc_101E089  +
xor al al +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 40h +
mov eax dword_1026044 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov esi ecx +
push dword ptr [esi+14h]  +
lea eax [ebp+var_24] +
push offset a08x  +
push 10h  +
xor ebx ebx +
push eax  +
mov [ebp+var_25] bl +
call sub_1008DB5  +
add esp 10h +
test eax eax +
jl loc_101E116  +
lea eax [ebp+var_2C] +
push eax  +
lea eax [ebp+var_40] +
push eax  +
push ebx  +
push 8  +
lea eax [ebp+var_24] +
push eax  +
push edi  +
push 80000002h  +
mov [ebp+var_40] ebx +
mov [ebp+var_3C] ebx +
mov [ebp+var_38] ebx +
mov [ebp+var_34] ebx +
mov [ebp+var_30] ebx +
mov [ebp+var_2C] 14h +
call ds:SHRegGetValueW  +
test eax eax +
jnz loc_101E116  +
cmp [ebp+var_2C] 14h +
jnz loc_101E116  +
lea eax [ebp+var_40] +
push eax  +
mov ecx esi +
call sub_101E067  +
mov [ebp+var_25] al +
mov ecx [ebp+var_4] +
mov al [ebp+var_25] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1001E40  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 28h +
mov eax dword_1026044 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov esi ecx +
push dword ptr [esi+14h]  +
lea eax [ebp+ValueName] +
push offset a08x  +
push 10h  +
push eax  +
xor bl bl +
call sub_1008DB5  +
add esp 10h +
test eax eax +
jl loc_101E19F  +
lea eax [ebp+hKey] +
push eax  +
push 2  +
push 0  +
push edi  +
push 80000002h  +
call ds:RegOpenKeyExW  +
test eax eax +
jnz loc_101E19F  +
push 14h  +
push esi  +
push 3  +
push eax  +
lea eax [ebp+ValueName] +
push eax  +
push [ebp+hKey]  +
call ds:RegSetValueExW  +
test eax eax +
jnz loc_101E196  +
inc bl  +
push [ebp+hKey]  +
call ds:RegCloseKey  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
mov al bl +
xor ecx ebp +
pop ebx  +
call sub_1001E40  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 17Ch +
mov eax dword_1026044 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
mov esi ecx +
call sub_101DD89  +
test al al +
jz loc_101E344  +
push dword ptr [esi+14h]  +
lea ecx [ebp+var_16C] +
call sub_101DD63  +
push offset aSoftwareMicr_2  +
lea ecx [ebp+var_16C] +
call sub_101E094  +
test al al +
jz loc_101E22D  +
mov eax [ebp+var_16C] +
cmp eax [esi] +
jnz loc_101E22D  +
mov eax [ebp+var_168] +
cmp eax [esi+4] +
jnz loc_101E22D  +
mov eax dword ptr [ebp+Time.wYear] +
cmp eax [esi+8] +
jnz loc_101E22D  +
mov eax dword ptr [ebp+Time.wHour] +
cmp eax [esi+10h] +
jz loc_101E344  +
push dword ptr [esi+14h]  +
lea eax [ebp+var_24] +
push offset aU  +
push 10h  +
push eax  +
call sub_1008DB5  +
add esp 10h +
test eax eax +
jl loc_101E344  +
push dword ptr [esi+10h]  +
lea eax [ebp+var_44] +
push offset aD  +
push 10h  +
push eax  +
call sub_1008DB5  +
add esp 10h +
test eax eax +
jl loc_101E344  +
push edi  +
xor edi edi +
push edi  +
push 2710h  +
push dword ptr [esi+8]  +
push dword ptr [esi+4]  +
call sub_10077AC  +
mov [ebp+FileTime.dwLowDateTime] eax +
lea eax [ebp+UniversalTime] +
push eax  +
lea eax [ebp+FileTime] +
push eax  +
mov [ebp+FileTime.dwHighDateTime] edx +
call ds:FileTimeToSystemTime  +
test eax eax +
jz loc_101E343  +
lea eax [ebp+Time] +
push eax  +
lea eax [ebp+UniversalTime] +
push eax  +
push edi  +
call ds:SystemTimeToTzSpecificLocalTime  +
test eax eax +
jz loc_101E343  +
push 80h  +
lea eax [ebp+TimeStr] +
push eax  +
push edi  +
lea eax [ebp+Time] +
push eax  +
push edi  +
push 800h  +
call ds:GetTimeFormatW  +
test eax eax +
jle loc_101E343  +
lea eax [ebp+var_24] +
mov [ebp+var_150] eax +
lea eax [ebp+var_44] +
mov [ebp+FileTime.dwLowDateTime] eax +
push offset SourceName  +
lea eax [ebp+TimeStr] +
push edi  +
mov [ebp+Strings] offset byte_1004260 +
mov [ebp+FileTime.dwHighDateTime] eax +
call ds:RegisterEventSourceW  +
mov esi eax +
cmp esi edi +
jz loc_101E343  +
push edi  +
lea eax [ebp+Strings] +
push eax  +
push edi  +
push 4  +
push edi  +
push 800003F7h  +
push 1  +
push 2  +
push esi  +
call ds:ReportEventW  +
push esi  +
call ds:DeregisterEventSource  +
pop edi  +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop esi  +
call sub_1001E40  +
leave   +
retn   +
***
mov edi edi +
push esi  +
push edi  +
mov esi ecx +
call sub_101DD2C  +
mov ecx eax +
mov eax [esi] +
dec eax  +
mov edi edx +
jz loc_101E42B  +
dec eax  +
jnz loc_101E444  +
sub ecx [esi+4] +
mov eax dword_1026994 +
sbb edi [esi+8] +
cdq   +
cmp edi edx +
jl loc_101E444  +
jg loc_101E422  +
cmp ecx eax +
jbe loc_101E444  +
mov ecx esi +
call sub_101E1B7  +
jmp loc_101E441  +
sub ecx [esi+4] +
mov eax dword_1026990 +
sbb edi [esi+8] +
cdq   +
cmp edi edx +
jl loc_101E444  +
jg loc_101E441  +
cmp ecx eax +
jbe loc_101E444  +
and dword ptr [esi] 0 +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_101E3F5  +
mov ecx esi +
call sub_101DD9C  +
mov ecx esi +
call sub_101DDED  +
xor ecx ecx +
test al al +
setz cl  +
mov al cl +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
cmp byte ptr [esi] 0 +
jnz loc_101E486  +
call sub_101DE91  +
mov byte ptr [esi] 1 +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
push ebx  +
push esi  +
push edi  +
mov edi ecx +
call sub_101E474  +
movzx eax [ebp+arg_0] +
push eax  +
lea ecx [ebp+var_18] +
call sub_101DD63  +
mov esi offset aSoftwareMicr_3 +
push esi  +
lea ecx [ebp+var_18] +
call sub_101E094  +
lea ecx [ebp+var_18] +
call sub_101E44C  +
push esi  +
lea ecx [ebp+var_18] +
mov bl al +
call sub_101E12F  +
xor eax eax +
cmp [ebp+var_18] 2 +
jnz loc_101E4DB  +
cmp [ebp+var_8] eax +
jle loc_101E4DB  +
inc eax  +
or [edi+1] al +
pop edi  +
pop esi  +
mov al bl +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov ebx eax +
mov esi edx +
xor eax eax +
xor edi edi +
test esi esi +
jz loc_101E597  +
cmp [ebp+arg_4] eax +
jz loc_101E593  +
mov dl [ebx] +
test dl dl +
jz loc_101E593  +
mov [ecx] dl +
inc ecx  +
inc ebx  +
dec esi  +
dec [ebp+arg_4]  +
inc edi  +
test esi esi +
jnz loc_101E57B  +
test esi esi +
jnz loc_101E59E  +
dec ecx  +
dec edi  +
mov eax 8007007Ah +
mov byte ptr [ecx] 0 +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_101E5AA  +
mov [ecx] edi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push [ebp+arg_8]  +
mov esi eax +
push [ebp+arg_4]  +
xor ebx ebx +
dec esi  +
push esi  +
push edi  +
call ds:_vsnprintf  +
add esp 10h +
test eax eax +
jl loc_101E5E2  +
cmp eax esi +
ja loc_101E5E2  +
jnz loc_101E5EC  +
mov [esi+edi] bl +
jmp loc_101E5EA  +
mov [esi+edi] bl +
mov ebx 8007007Ah +
mov eax esi +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_101E5F5  +
mov [ecx] eax +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push [ebp+arg_8]  +
mov esi eax +
push [ebp+arg_4]  +
xor ebx ebx +
dec esi  +
push esi  +
push edi  +
call ds:_vsnwprintf  +
add esp 10h +
test eax eax +
jl loc_101E62B  +
cmp eax esi +
ja loc_101E62B  +
jnz loc_101E638  +
jmp loc_101E630  +
mov ebx 8007007Ah +
xor eax eax +
mov [edi+esi*2] ax +
mov eax esi +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_101E641  +
mov [ecx] eax +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
push esi  +
push edi  +
lea edi [edx+10h] +
lea ecx [edx+80000h] +
cmp edi ecx +
jnb loc_101E673  +
sub ecx edi +
dec ecx  +
shr ecx 2 +
inc ecx  +
mov eax 200020h +
stos   +
lea edi [edx+7FFF0h] +
mov esi offset loc_101E688 +
movs   +
movs   +
movs   +
movs   +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
or eax 3C000A00h +
add [edi] ch +
add [eax+eax+4Fh] cl +
add [edi+0] al +
add [eax] al +
add [eax-6F6F6F70h] dl +
push dword ptr [ecx]  +
call sub_100A21D  +
pop ecx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov eax [esi] +
push edi  +
test eax eax +
jz loc_101E6C6  +
push eax  +
call sub_100A21D  +
and dword ptr [esi] 0 +
pop ecx  +
mov edi [ebp+arg_0] +
push edi  +
call sub_100B217  +
pop ecx  +
mov [esi+8] edi +
mov [esi] eax +
mov [esi+4] eax +
pop edi  +
mov byte ptr [eax] 0 +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi ecx +
push edi  +
mov edi [esi+4] +
sub edi [esi] +
lea eax [edi+1] +
cmp [ebp+arg_0] eax +
jnb loc_101E700  +
mov [ebp+arg_0] eax +
push [ebp+arg_0]  +
call sub_100B217  +
push edi  +
push dword ptr [esi]  +
mov ebx eax +
push ebx  +
call memcpy  +
push dword ptr [esi]  +
call sub_100A21D  +
mov ecx [ebp+arg_0] +
add esp 14h +
lea eax [ebx+edi] +
mov [esi] ebx +
pop edi  +
mov [esi+4] eax +
mov [esi+8] ecx +
pop esi  +
mov byte ptr [eax] 0 +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov eax [esi+4] +
push edi  +
mov edi [ebp+arg_0] +
cmp eax edi +
jz loc_101E75B  +
test eax eax +
jz loc_101E758  +
push eax  +
call ds:CloseHandle  +
mov [esi+4] edi +
pop edi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi+4] +
test eax eax +
jz loc_101E784  +
cmp eax 0FFFFFFFFh +
jz loc_101E784  +
push eax  +
call ds:CloseHandle  +
and dword ptr [esi+4] 0 +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi+4] +
test eax eax +
jz loc_101E7A2  +
push eax  +
call ds:UnmapViewOfFile  +
and dword ptr [esi+4] 0 +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi] +
test eax eax +
jz loc_101E7BE  +
push eax  +
call ds:LocalFree  +
and dword ptr [esi] 0 +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov eax [esi+4] +
cmp eax [esi] +
jnz loc_101E7D8  +
xor eax eax +
jmp loc_101E821  +
mov eax [esi+0Ch] +
mov ecx [esi+10h] +
imul eax eax +
mov byte ptr [eax+ecx] 0 +
mov eax [ebp+arg_0] +
lea ecx [eax+1] +
mov dl [eax] +
inc eax  +
test dl dl +
jnz loc_101E7EB  +
sub eax ecx +
inc eax  +
cmp eax 52h +
ja loc_101E810  +
push eax  +
mov eax [esi+0Ch] +
push [ebp+arg_0]  +
imul eax eax +
add eax [esi+10h] +
push eax  +
call memcpy  +
add esp 0Ch +
mov eax [esi+0Ch] +
inc dword ptr [esi+4]  +
inc eax  +
xor edx edx +
div  dword ptr [esi] +
xor eax eax +
inc eax  +
mov [esi+0Ch] edx +
pop esi  +
pop ebp  +
retn 4  +
***
mov edx [ecx+4] +
test edx edx +
jnz loc_101E835  +
xor eax eax +
retn   +
mov eax [ecx+8] +
push esi  +
mov esi eax +
imul esi esi +
add esi [ecx+10h] +
dec edx  +
mov [ecx+4] edx +
inc eax  +
xor edx edx +
div  dword ptr [ecx] +
mov eax esi +
pop esi  +
mov [ecx+8] edx +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_8] +
xor eax eax +
cmp ecx 1 +
jbe loc_101E881  +
push eax  +
dec ecx  +
push ecx  +
push [ebp+lpBuffer]  +
movzx ecx [ebp+arg_0] +
push 400h  +
push ecx  +
push eax  +
push 1000h  +
call ds:FormatMessageA  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_8] +
xor eax eax +
cmp ecx 1 +
jbe loc_101E8B5  +
push eax  +
dec ecx  +
push ecx  +
push [ebp+lpBuffer]  +
movzx ecx [ebp+arg_0] +
push 400h  +
push ecx  +
push eax  +
push 1000h  +
call ds:FormatMessageW  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx+10h] +
mov ecx [ebp+arg_0] +
mov eax [eax+38h] +
imul ecx ecx +
mov eax [ecx+eax] +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_4] +
xor eax eax +
mov ecx 80070057h +
test edx edx +
jz loc_101E909  +
cmp edx 7FFFFFFFh +
jbe loc_101E90B  +
mov eax ecx +
test eax eax +
jl loc_101E932  +
cmp [ebp+arg_C] 7FFFFFFEh +
jbe loc_101E922  +
mov eax ecx +
mov ecx [ebp+arg_0] +
mov byte ptr [ecx] 0 +
jmp loc_101E932  +
push [ebp+arg_C]  +
mov eax [ebp+arg_8] +
mov ecx [ebp+arg_0] +
push 0  +
call sub_101E567  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
cmp [ebp+arg_4] eax +
jz loc_101E950  +
cmp [ebp+arg_4] 7FFFFFFFh +
jbe loc_101E955  +
mov eax 80070057h +
test eax eax +
jl loc_101E96E  +
mov eax [ebp+arg_4] +
push edi  +
push [ebp+arg_C]  +
mov edi [ebp+arg_0] +
push [ebp+arg_8]  +
push 0  +
call sub_101E5B6  +
pop edi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
cmp [ebp+arg_4] eax +
jz loc_101E98C  +
cmp [ebp+arg_4] 7FFFFFFFh +
jbe loc_101E991  +
mov eax 80070057h +
test eax eax +
jl loc_101E9AA  +
mov eax [ebp+arg_4] +
push edi  +
push [ebp+arg_C]  +
mov edi [ebp+arg_0] +
push [ebp+arg_8]  +
push 0  +
call sub_101E602  +
pop edi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
cmp [ebp+arg_4] eax +
jz loc_101E9C8  +
cmp [ebp+arg_4] 7FFFFFFFh +
jbe loc_101E9CD  +
mov eax 80070057h +
test eax eax +
jl loc_101E9E7  +
push edi  +
mov edi [ebp+arg_0] +
lea eax [ebp+arg_C] +
push eax  +
push [ebp+arg_8]  +
mov eax [ebp+arg_4] +
push 0  +
call sub_101E5B6  +
pop edi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov esi ecx +
lea eax [edi+1] +
cmp eax [esi+8] +
jbe loc_101EA08  +
push eax  +
call sub_101E6AD  +
push edi  +
push [ebp+arg_4]  +
push dword ptr [esi]  +
call memcpy  +
mov eax [esi] +
add esp 0Ch +
add eax edi +
mov [esi+4] eax +
pop edi  +
mov byte ptr [eax] 0 +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov edx [eax] +
mov eax [eax+4] +
push edx  +
sub eax edx +
push eax  +
call sub_101E9EE  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov eax [esi+4] +
sub eax [esi] +
mov ecx [esi+8] +
push edi  +
mov edi [ebp+arg_0] +
sub ecx eax +
lea edx [edi+1] +
cmp edx ecx +
jbe loc_101EA73  +
lea eax [eax+edi+1] +
push eax  +
mov ecx esi +
call sub_101E6E6  +
push edi  +
push [ebp+arg_4]  +
push dword ptr [esi+4]  +
call memcpy  +
add esp 0Ch +
add [esi+4] edi +
mov esi [esi+4] +
pop edi  +
mov byte ptr [esi] 0 +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov edx [eax] +
mov eax [eax+4] +
push edx  +
sub eax edx +
push eax  +
call sub_101EA4A  +
pop ebp  +
retn 4  +
***
jmp sub_101E768  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_1015458 +
call sub_101E768  +
test byte ptr [ebp+8] 1 +
jz loc_101EAE5  +
push esi  +
call sub_100A21D  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
jmp sub_101E78B  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_101545C +
call sub_101E78B  +
test byte ptr [ebp+8] 1 +
jz loc_101EB21  +
push esi  +
call sub_100A21D  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_1001D89  +
mov esi ecx +
mov [ebp-14h] esi +
xor edi edi +
mov [esi] edi +
push edi  +
lea eax [ebp-10h] +
push eax  +
push 1  +
push offset aOSydA0xc010000  +
mov [ebp-4] edi +
mov [ebp-10h] edi +
call ConvertStringSecurityDescriptorToSecurityDescriptorA  +
test eax eax +
jnz loc_101EB9B  +
call ds:__imp_GetLastError  +
cmp eax edi +
jle loc_101EB71  +
and eax 0FFFFh +
or eax 80070000h +
push eax  +
push 202h  +
push offset aDW7rtmEnduse_4  +
lea ecx [ebp-34h] +
call sub_1018E2E  +
mov esi eax +
lea edi [ebp-24h] +
movs   +
movs   +
movs   +
push offset dword_1023994  +
lea eax [ebp-24h] +
push eax  +
movs   +
call _CxxThrowException  +
mov eax [ebp-10h] +
push eax  +
mov [esi] eax +
call ds:GetSecurityDescriptorLength  +
mov [esi+4] eax +
mov eax [ebp-10h] +
mov [esi+8] eax +
mov [esi+0Ch] edi +
mov eax esi +
call __EH_epilog3  +
retn   +
***
call sub_1001D89  +
mov esi ecx +
mov [ebp-10h] esi +
push dword ptr [esi+20h]  +
mov dword ptr [ebp-4] 3 +
call sub_100A21D  +
mov eax [esi+1Ch] +
pop ecx  +
mov byte ptr [ebp-4] 2 +
test eax eax +
jz loc_101EC5F  +
push eax  +
call sub_100A21D  +
pop ecx  +
lea ecx [esi+14h] +
mov dword ptr [ecx] offset off_101545C +
call sub_101E78B  +
lea ecx [esi+8] +
mov edi offset off_1015458 +
mov [ecx] edi +
call sub_101E768  +
mov ecx esi +
mov [esi] edi +
call sub_101E768  +
call __EH_epilog3  +
retn   +
***
call sub_1001D89  +
mov esi ecx +
mov [ebp-10h] esi +
push dword ptr [esi+64h]  +
mov dword ptr [ebp-4] 7 +
call sub_100A21D  +
push dword ptr [esi+48h]  +
mov byte ptr [ebp-4] 6 +
call sub_100A21D  +
push dword ptr [esi+3Ch]  +
mov byte ptr [ebp-4] 5 +
call sub_100A21D  +
push dword ptr [esi+30h]  +
mov byte ptr [ebp-4] 4 +
call sub_100A21D  +
push dword ptr [esi+24h]  +
mov byte ptr [ebp-4] 3 +
call sub_100A21D  +
push dword ptr [esi+18h]  +
mov byte ptr [ebp-4] 2 +
call sub_100A21D  +
lea ecx [esi+10h] +
add esp 18h +
mov dword ptr [ecx] offset off_101545C +
call sub_101E78B  +
lea ecx [esi+8] +
mov edi offset off_1015458 +
mov [ecx] edi +
call sub_101E768  +
mov ecx esi +
mov [esi] edi +
call sub_101E768  +
call __EH_epilog3  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_101EC90  +
test byte ptr [ebp+8] 1 +
jz loc_101ED3A  +
push esi  +
call sub_100A21D  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_101EC2C  +
test byte ptr [ebp+8] 1 +
jz loc_101ED60  +
push esi  +
call sub_100A21D  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push edi  +
mov edi ecx +
cmp dword ptr [edi+10h] 0 +
mov [ebp+var_4] edi +
jz loc_101F13E  +
push ebx  +
push esi  +
lea eax [ebp+SystemTime] +
push eax  +
call ds:GetLocalTime  +
cmp [ebp+arg_1C] 4 +
mov ebx [ebp+arg_18] +
mov esi [ebp+arg_14] +
jb loc_101EDAE  +
mov eax ds:dword_101F2BC +
mov [esi] eax +
mov eax ds:dword_101F2C0 +
mov [esi+4] eax +
add dword ptr [ebx] 4 +
mov eax [edi+10h] +
mov ecx [eax+38h] +
cmp dword ptr [ecx+90h] 0 +
jz loc_101EDFB  +
mov ecx [eax+20h] +
mov eax [ebx] +
push ecx  +
mov ecx [ebp+arg_1C] +
sub ecx eax +
push offset aLognameS  +
push ecx  +
lea eax [esi+eax*2] +
push eax  +
call sub_1008DB5  +
add esp 10h +
test eax eax +
jl loc_101EDFB  +
mov ecx [ebx] +
lea eax [esi+ecx*2] +
lea edi [eax+2] +
mov dx [eax] +
inc eax  +
inc eax  +
test dx dx +
jnz loc_101EDE6  +
sub eax edi +
mov edi [ebp+var_4] +
sar eax 1 +
add ecx eax +
mov [ebx] ecx +
mov eax [edi+10h] +
mov eax [eax+38h] +
cmp dword ptr [eax+0B4h] 0 +
jz loc_101EE67  +
movzx ecx [ebp+SystemTime.wMilliseconds] +
push ecx  +
movzx ecx [ebp+SystemTime.wSecond] +
push ecx  +
movzx ecx [ebp+SystemTime.wMinute] +
mov eax [ebx] +
push ecx  +
movzx ecx [ebp+SystemTime.wHour] +
push ecx  +
movzx ecx [ebp+SystemTime.wDay] +
push ecx  +
movzx ecx [ebp+SystemTime.wMonth] +
push ecx  +
movzx ecx [ebp+SystemTime.wYear] +
push ecx  +
mov ecx [ebp+arg_1C] +
sub ecx eax +
push offset aTime04d02d02d0  +
push ecx  +
lea eax [esi+eax*2] +
push eax  +
call sub_1008DB5  +
add esp 28h +
test eax eax +
jl loc_101EE67  +
mov ecx [ebx] +
lea eax [esi+ecx*2] +
lea edi [eax+2] +
mov dx [eax] +
inc eax  +
inc eax  +
test dx dx +
jnz loc_101EE52  +
sub eax edi +
mov edi [ebp+var_4] +
sar eax 1 +
add ecx eax +
mov [ebx] ecx +
mov eax [edi+10h] +
mov eax [eax+38h] +
cmp dword ptr [eax+0FCh] 0 +
jz loc_101EEB3  +
push dword ptr [ebp+arg_C]  +
mov eax [ebx] +
mov ecx [ebp+arg_1C] +
sub ecx eax +
push offset aEl0xX  +
push ecx  +
lea eax [esi+eax*2] +
push eax  +
call sub_1008DB5  +
add esp 10h +
test eax eax +
jl loc_101EEB3  +
mov ecx [ebx] +
lea eax [esi+ecx*2] +
lea edi [eax+2] +
mov dx [eax] +
inc eax  +
inc eax  +
test dx dx +
jnz loc_101EE9E  +
sub eax edi +
mov edi [ebp+var_4] +
sar eax 1 +
add ecx eax +
mov [ebx] ecx +
mov eax [edi+10h] +
mov eax [eax+38h] +
cmp dword ptr [eax+120h] 0 +
mov edi dword ptr [ebp+arg_10] +
jz loc_101EF01  +
mov eax [ebx] +
mov ecx [ebp+arg_1C] +
push edi  +
sub ecx eax +
push offset aTagid0xX  +
push ecx  +
lea eax [esi+eax*2] +
push eax  +
call sub_1008DB5  +
add esp 10h +
test eax eax +
jl loc_101EF01  +
mov ecx [ebx] +
lea eax [esi+ecx*2] +
lea edx [eax+2] +
mov [ebp+arg_18] edx +
mov dx [eax] +
inc eax  +
inc eax  +
test dx dx +
jnz loc_101EEEE  +
sub eax [ebp+arg_18] +
sar eax 1 +
add ecx eax +
mov [ebx] ecx +
mov ecx [ebp+var_4] +
mov eax [ecx+10h] +
mov eax [eax+38h] +
cmp dword ptr [eax+144h] 0 +
jz loc_101EF55  +
mov ecx [ecx+0Ch] +
imul edi edi +
mov eax [ebx] +
lea ecx [edi+ecx+4] +
push ecx  +
mov ecx [ebp+arg_1C] +
sub ecx eax +
push offset aTagnameS  +
push ecx  +
lea eax [esi+eax*2] +
push eax  +
call sub_1008DB5  +
add esp 10h +
test eax eax +
jl loc_101EF55  +
mov ecx [ebx] +
lea eax [esi+ecx*2] +
lea edi [eax+2] +
mov dx [eax] +
inc eax  +
inc eax  +
test dx dx +
jnz loc_101EF43  +
sub eax edi +
sar eax 1 +
add ecx eax +
mov [ebx] ecx +
mov eax [ebp+var_4] +
mov eax [eax+10h] +
mov eax [eax+38h] +
cmp dword ptr [eax+168h] 0 +
jz loc_101EFA5  +
mov edi [ebx] +
call ds:GetCurrentProcessId  +
push eax  +
mov eax [ebp+arg_1C] +
sub eax edi +
push offset aPid0xX  +
push eax  +
lea eax [esi+edi*2] +
push eax  +
call sub_1008DB5  +
add esp 10h +
test eax eax +
jl loc_101EFA5  +
mov ecx [ebx] +
lea eax [esi+ecx*2] +
lea edi [eax+2] +
mov dx [eax] +
inc eax  +
inc eax  +
test dx dx +
jnz loc_101EF93  +
sub eax edi +
sar eax 1 +
add ecx eax +
mov [ebx] ecx +
mov eax [ebp+var_4] +
mov eax [eax+10h] +
mov eax [eax+38h] +
cmp dword ptr [eax+0D8h] 0 +
jz loc_101EFF5  +
mov edi [ebx] +
call ds:GetCurrentThreadId  +
push eax  +
mov eax [ebp+arg_1C] +
sub eax edi +
push offset aTid0xX  +
push eax  +
lea eax [esi+edi*2] +
push eax  +
call sub_1008DB5  +
add esp 10h +
test eax eax +
jl loc_101EFF5  +
mov ecx [ebx] +
lea eax [esi+ecx*2] +
lea edi [eax+2] +
mov dx [eax] +
inc eax  +
inc eax  +
test dx dx +
jnz loc_101EFE3  +
sub eax edi +
sar eax 1 +
add ecx eax +
mov [ebx] ecx +
mov eax [ebx] +
lea ecx [eax+3] +
cmp ecx [ebp+arg_1C] +
jge loc_101F010  +
lea edi [esi+eax*2] +
mov esi offset asc_101F1C0 +
movs   +
movs   +
add dword ptr [ebx] 3 +
mov esi [ebp+arg_14] +
xor eax eax +
cmp dword ptr [ebp+arg_0] eax +
jnz loc_101F029  +
mov ecx [ebp+var_4] +
mov ecx [ecx+10h] +
mov ecx [ecx+38h] +
cmp [ecx+6Ch] eax +
jz loc_101F105  +
cmp dword ptr [ebp+arg_4] eax +
jz loc_101F06B  +
push [ebp+arg_8]  +
mov eax [ebx] +
push dword ptr [ebp+arg_4]  +
mov ecx [ebp+arg_1C] +
sub ecx eax +
push offset aLocSDLoc  +
push ecx  +
lea eax [esi+eax*2] +
push eax  +
call sub_1008DB5  +
add esp 14h +
test eax eax +
jl loc_101F06B  +
mov ecx [ebx] +
lea eax [esi+ecx*2] +
lea edi [eax+2] +
mov dx [eax] +
inc eax  +
inc eax  +
test dx dx +
jnz loc_101F059  +
sub eax edi +
sar eax 1 +
add ecx eax +
mov [ebx] ecx +
cmp dword ptr [ebp+arg_0] 0 +
jz loc_101F105  +
push dword ptr [ebp+arg_0]  +
mov eax [ebx] +
mov ecx [ebp+arg_1C] +
sub ecx eax +
push offset aErr0x08x  +
push ecx  +
lea eax [esi+eax*2] +
push eax  +
call sub_1008DB5  +
add esp 10h +
test eax eax +
jl loc_101F0AF  +
mov ecx [ebx] +
lea eax [esi+ecx*2] +
lea edi [eax+2] +
mov dx [eax] +
inc eax  +
inc eax  +
test dx dx +
jnz loc_101F09D  +
sub eax edi +
sar eax 1 +
add ecx eax +
mov [ebx] ecx +
mov eax [ebx] +
test eax eax +
jle loc_101F0CE  +
cmp eax [ebp+arg_1C] +
jge loc_101F0CE  +
mov ecx [ebp+arg_1C] +
sub ecx eax +
push ecx  +
lea eax [esi+eax*2] +
push eax  +
push dword ptr [ebp+arg_0]  +
call sub_101E88A  +
add [ebx] eax +
mov eax [ebx] +
mov ecx [ebp+arg_1C] +
sub ecx eax +
push offset aErr  +
push ecx  +
lea eax [esi+eax*2] +
push eax  +
call sub_1008DB5  +
add esp 0Ch +
test eax eax +
jl loc_101F105  +
mov ecx [ebx] +
lea eax [esi+ecx*2] +
lea edi [eax+2] +
mov dx [eax] +
inc eax  +
inc eax  +
test dx dx +
jnz loc_101F0F3  +
sub eax edi +
sar eax 1 +
add ecx eax +
mov [ebx] ecx +
mov eax [ebx] +
mov ecx [ebp+arg_1C] +
sub ecx eax +
push offset aMsg  +
push ecx  +
lea eax [esi+eax*2] +
push eax  +
call sub_1008DB5  +
add esp 0Ch +
test eax eax +
jl loc_101F13C  +
mov ecx [ebx] +
lea eax [esi+ecx*2] +
lea esi [eax+2] +
mov dx [eax] +
inc eax  +
inc eax  +
test dx dx +
jnz loc_101F12A  +
sub eax esi +
sar eax 1 +
add ecx eax +
mov [ebx] ecx +
pop esi  +
pop ebx  +
pop edi  +
leave   +
retn 20h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi ecx +
mov eax [esi+2Ch] +
push edi  +
xor edi edi +
xor ebx ebx +
cmp [eax] edi +
jbe loc_101F305  +
mov eax [esi+30h] +
push 3Fh  +
lea eax [eax+edi+4] +
push eax  +
push [ebp+arg_0]  +
call ds:strncmp  +
add esp 0Ch +
test eax eax +
jz loc_101F31D  +
mov eax [esi+2Ch] +
inc ebx  +
add edi 44h +
cmp ebx [eax] +
jb loc_101F2E0  +
mov eax [esi+2Ch] +
cmp dword ptr [eax] 100h +
jb loc_101F324  +
mov eax [ebp+arg_4] +
mov ecx dword_10269A0 +
mov [eax] ecx +
jmp loc_101F36E  +
mov eax [ebp+arg_4] +
mov [eax] ebx +
jmp loc_101F36E  +
mov eax [eax] +
mov ecx [esi+30h] +
imul eax eax +
mov dword ptr [eax+ecx] 2 +
mov eax [esi+2Ch] +
mov eax [eax] +
mov ecx [esi+30h] +
imul eax eax +
push 3Fh  +
push [ebp+arg_0]  +
lea eax [eax+ecx+4] +
push 40h  +
push eax  +
call sub_101E8EE  +
mov eax [esi+2Ch] +
mov eax [eax] +
mov ecx [esi+30h] +
imul eax eax +
mov byte ptr [eax+ecx+43h] 0 +
mov eax [esi+2Ch] +
mov eax [eax] +
mov ecx [ebp+arg_4] +
mov [ecx] eax +
mov esi [esi+2Ch] +
inc dword ptr [esi]  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
call sub_10039ED  +
mov eax [ebp+8] +
mov [ebp-68h] eax +
lea eax [ebp-60h] +
push eax  +
mov esi ecx +
call ds:GetLocalTime  +
lea eax [esi+74h] +
push eax  +
call ds:InterlockedIncrement  +
push eax  +
movzx eax word ptr [ebp-52h] +
push eax  +
movzx eax word ptr [ebp-54h] +
push eax  +
movzx eax word ptr [ebp-56h] +
push eax  +
movzx eax word ptr [ebp-58h] +
push eax  +
movzx eax word ptr [ebp-5Ah] +
push eax  +
movzx eax word ptr [ebp-5Eh] +
push eax  +
movzx eax word ptr [ebp-60h] +
push eax  +
push offset a04d02d02d02d02  +
lea eax [ebp-50h] +
push 40h  +
push eax  +
call sub_101E9B3  +
add esp 2Ch +
lea eax [esi+24h] +
lea edi [esi+3Ch] +
push eax  +
mov ecx edi +
call sub_101EA2B  +
push offset dword_1015468  +
push 1  +
mov ecx edi +
call sub_101EA4A  +
lea eax [esi+18h] +
push eax  +
mov ecx edi +
mov [ebp-64h] eax +
call sub_101EA96  +
lea eax [ebp-50h] +
lea ecx [eax+1] +
mov dl [eax] +
inc eax  +
test dl dl +
jnz loc_101F40C  +
sub eax ecx +
lea ecx [ebp-50h] +
push ecx  +
push eax  +
mov ecx edi +
call sub_101EA4A  +
mov ebx offset dword_1015460 +
push ebx  +
push 4  +
mov ecx edi +
call sub_101EA4A  +
push dword ptr [ebp-64h]  +
add esi 48h +
mov ecx esi +
call sub_101EA2B  +
lea eax [ebp-50h] +
lea ecx [eax+1] +
mov dl [eax] +
inc eax  +
test dl dl +
jnz loc_101F443  +
sub eax ecx +
lea ecx [ebp-50h] +
push ecx  +
push eax  +
mov ecx esi +
call sub_101EA4A  +
push ebx  +
push 4  +
mov ecx esi +
call sub_101EA4A  +
or dword ptr [ebp-6Ch] 0FFFFFFFFh +
xor ebx ebx +
lea ecx [ebp-70h] +
mov [ebp-70h] ebx +
call sub_10201E1  +
lea ecx [ebp-80h] +
mov [ebp-4] ebx +
call sub_101EB2D  +
mov edi [edi] +
push ebx  +
push 80h  +
push 1  +
lea eax [ebp-7Ch] +
push eax  +
push 1  +
push 0C0000000h  +
push edi  +
mov byte ptr [ebp-4] 1 +
call ds:CreateFileA  +
mov esi [ebp-68h] +
push eax  +
mov ecx esi +
call sub_101E73A  +
cmp dword ptr [esi+4] 0FFFFFFFFh +
jnz loc_101F4F6  +
call ds:__imp_GetLastError  +
cmp eax ebx +
jle loc_101F4C3  +
and eax 0FFFFh +
or eax 80070000h +
push eax  +
push 0B65h  +
push offset aDW7rtmEnduse_5  +
lea ecx [ebp-0A0h] +
call sub_1018E2E  +
mov esi eax +
lea edi [ebp-90h] +
movs   +
movs   +
movs   +
push offset dword_1023994  +
lea eax [ebp-90h] +
push eax  +
movs   +
call _CxxThrowException  +
lea ecx [ebp-80h] +
call sub_101E7A9  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-70h] +
call sub_10201B4  +
call sub_1003A2A  +
retn 4  +
***
call sub_1001D89  +
mov esi ecx +
lea eax [esi+24h] +
lea edi [esi+30h] +
push eax  +
mov ecx edi +
call sub_101EA2B  +
push offset dword_1015468  +
push 1  +
mov ecx edi +
call sub_101EA4A  +
lea eax [esi+18h] +
push eax  +
mov ecx edi +
call sub_101EA96  +
push offset dword_1015460  +
push 4  +
mov ecx edi +
call sub_101EA4A  +
and dword ptr [ebp-10h] 0 +
mov ebx offset off_1015458 +
mov [ebp-14h] ebx +
and dword ptr [ebp-4] 0 +
lea eax [ebp-14h] +
push eax  +
mov ecx esi +
call sub_101F37A  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-14h] +
mov [ebp-14h] ebx +
call sub_101E768  +
mov eax [esi+68h] +
test eax eax +
jz loc_101F5FB  +
mov ecx [esi+70h] +
test ecx ecx +
jz loc_101F5FB  +
push ecx  +
push eax  +
call ds:FlushViewOfFile  +
push 0  +
push dword ptr [esi+3Ch]  +
push dword ptr [edi]  +
call ds:CopyFileA  +
lea ebx [esi+54h] +
mov eax [ebx+4] +
cmp eax [ebx] +
jnz loc_101F657  +
mov ecx ebx +
call sub_101E82B  +
mov [ebp-10h] eax +
lea eax [esi+24h] +
push eax  +
mov ecx edi +
call sub_101EA2B  +
push offset dword_1015468  +
push 1  +
mov ecx edi +
call sub_101EA4A  +
mov eax [ebp-10h] +
lea ecx [eax+1] +
mov dl [eax] +
inc eax  +
test dl dl +
jnz loc_101F63B  +
push dword ptr [ebp-10h]  +
sub eax ecx +
push eax  +
mov ecx edi +
call sub_101EA4A  +
push dword ptr [edi]  +
call ds:DeleteFileA  +
push dword ptr [esi+48h]  +
mov ecx ebx +
call sub_101E7C5  +
push dword ptr [esi+68h]  +
call sub_101E64E  +
mov dword ptr [esi+6Ch] 10h +
call __EH_epilog3  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx+6Ch] +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
xor edi edi +
lea ebx [eax+esi] +
mov edx 7FFE2h +
inc edi  +
cmp ebx edx +
jbe loc_101F6AC  +
cmp esi edx +
jbe loc_101F6A7  +
cmp eax 10h +
jnz loc_101F6A5  +
xor eax eax +
jmp loc_101F6AE  +
xor edi edi +
call sub_101F578  +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push [ebp+arg_0]  +
call sub_101F67B  +
test eax eax +
jnz locret_101F6FC  +
push 80070057h  +
push 0E6h  +
push offset aDW7rtmEnduse_6  +
lea ecx [ebp+var_20] +
call sub_1018E2E  +
mov esi eax +
lea edi [ebp+var_10] +
movs   +
movs   +
movs   +
push offset dword_1023994  +
lea eax [ebp+var_10] +
push eax  +
movs   +
call _CxxThrowException  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push esi  +
push edi  +
mov esi ecx +
call ds:__imp_GetLastError  +
test [ebp+arg_0] 2 +
mov [ebp+dwErrCode] eax +
jz loc_101F75D  +
push [ebp+lpMultiByteStr]  +
call ds:OutputDebugStringA  +
test [ebp+arg_0] 1 +
jz loc_101F7CB  +
mov edi [esi+68h] +
test edi edi +
jz loc_101F7CB  +
mov eax [ebp+lpMultiByteStr] +
lea ecx [eax+1] +
mov dl [eax] +
inc eax  +
test dl dl +
jnz loc_101F770  +
push ebx  +
sub eax ecx +
mov ecx [esi+6Ch] +
push 0  +
add ecx edi +
mov edi ds:MultiByteToWideChar +
push ecx  +
push eax  +
push [ebp+lpMultiByteStr]  +
mov ebx 4E4h +
push 9  +
push ebx  +
mov [ebp+cchMultiByte] eax +
call edi  +
mov ecx [esi+6Ch] +
mov [ebp+cchWideChar] eax +
lea eax [ecx+eax*2] +
cmp eax 7FFE2h +
jbe loc_101F7B0  +
mov ecx esi +
call sub_101F578  +
push [ebp+cchWideChar]  +
mov eax [esi+6Ch] +
add eax [esi+68h] +
push eax  +
push [ebp+cchMultiByte]  +
push [ebp+lpMultiByteStr]  +
push 9  +
push ebx  +
call edi  +
add eax eax +
add [esi+6Ch] eax +
pop ebx  +
test [ebp+arg_0] 8 +
mov esi ds:fprintf +
mov edi offset aS +
jz loc_101F7EE  +
push [ebp+lpMultiByteStr]  +
mov eax ds:_iob +
add eax 40h +
push edi  +
push eax  +
call esi  +
add esp 0Ch +
test [ebp+arg_0] 4 +
jz loc_101F806  +
push [ebp+lpMultiByteStr]  +
mov eax ds:_iob +
add eax 20h +
push edi  +
push eax  +
call esi  +
add esp 0Ch +
push [ebp+dwErrCode]  +
call ds:SetLastError  +
pop edi  +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
and eax 90900053h +
nop   +
nop   +
nop   +
push off_1026654  +
call sub_100AA5C  +
retn   +
***
call sub_10039ED  +
mov eax [ebp+0Ch] +
mov [ebp-620h] eax +
mov eax [ebp+1Ch] +
mov [ebp-624h] eax +
mov eax [ebp+20h] +
mov [ebp-638h] eax +
lea eax [ebp-634h] +
mov edi ecx +
push eax  +
mov [ebp-61Ch] edi +
call ds:GetLocalTime  +
cmp dword ptr [edi+10h] 0 +
jz loc_101FD55  +
push offset loc_101FE40  +
lea eax [ebp-618h] +
push 605h  +
push eax  +
call sub_101E9B3  +
mov ebx ds:lstrlenA +
add esp 0Ch +
lea eax [ebp-618h] +
push eax  +
call ebx  +
mov esi eax +
mov eax [edi+10h] +
mov ecx [eax+38h] +
mov ecx [ecx+90h] +
mov edi 5F5h +
test ecx ecx +
jz loc_101F9A3  +
mov eax [eax+20h] +
push eax  +
mov eax edi +
push offset dword_101FE30  +
sub eax esi +
lea ecx [ebp+esi-618h] +
push eax  +
push ecx  +
call sub_101E9B3  +
add esp 10h +
test eax eax +
jl loc_101F9A3  +
lea eax [ebp+esi-618h] +
push eax  +
call ebx  +
add esi eax +
mov eax [ebp-61Ch] +
mov eax [eax+10h] +
mov eax [eax+38h] +
cmp dword ptr [eax+0B4h] 0 +
jz loc_101FA1A  +
movzx ecx word ptr [ebp-626h] +
push ecx  +
movzx ecx word ptr [ebp-628h] +
push ecx  +
movzx ecx word ptr [ebp-62Ah] +
push ecx  +
movzx ecx word ptr [ebp-62Ch] +
push ecx  +
movzx ecx word ptr [ebp-62Eh] +
push ecx  +
movzx ecx word ptr [ebp-632h] +
push ecx  +
movzx ecx word ptr [ebp-634h] +
push ecx  +
mov ecx edi +
push offset aTime04d02d02_0  +
sub ecx esi +
lea eax [ebp+esi-618h] +
push ecx  +
push eax  +
call sub_101E9B3  +
add esp 28h +
test eax eax +
jl loc_101FA1A  +
lea eax [ebp+esi-618h] +
push eax  +
call ebx  +
add esi eax +
mov eax [ebp-61Ch] +
mov eax [eax+10h] +
mov eax [eax+38h] +
cmp dword ptr [eax+0FCh] 0 +
jz loc_101FA5C  +
push dword ptr [ebp+14h]  +
mov ecx edi +
push offset dword_101FDF8  +
sub ecx esi +
lea eax [ebp+esi-618h] +
push ecx  +
push eax  +
call sub_101E9B3  +
add esp 10h +
test eax eax +
jl loc_101FA5C  +
lea eax [ebp+esi-618h] +
push eax  +
call ebx  +
add esi eax +
mov eax [ebp-61Ch] +
mov eax [eax+10h] +
mov eax [eax+38h] +
cmp dword ptr [eax+120h] 0 +
jz loc_101FA9E  +
push dword ptr [ebp+18h]  +
mov ecx edi +
push offset dword_101FDE8  +
sub ecx esi +
lea eax [ebp+esi-618h] +
push ecx  +
push eax  +
call sub_101E9B3  +
add esp 10h +
test eax eax +
jl loc_101FA9E  +
lea eax [ebp+esi-618h] +
push eax  +
call ebx  +
add esi eax +
mov edx [ebp-61Ch] +
mov eax [edx+10h] +
mov eax [eax+38h] +
cmp dword ptr [eax+144h] 0 +
jz loc_101FAEB  +
mov eax [ebp+18h] +
mov edx [edx+0Ch] +
imul eax eax +
lea eax [edx+eax+4] +
push eax  +
mov eax edi +
push offset dword_101FDD8  +
sub eax esi +
lea ecx [ebp+esi-618h] +
push eax  +
push ecx  +
call sub_101E9B3  +
add esp 10h +
test eax eax +
jl loc_101FAEB  +
lea eax [ebp+esi-618h] +
push eax  +
call ebx  +
add esi eax +
mov eax [ebp-61Ch] +
mov eax [eax+10h] +
mov eax [eax+38h] +
cmp dword ptr [eax+168h] 0 +
jz loc_101FB31  +
call ds:GetCurrentProcessId  +
push eax  +
mov eax edi +
sub eax esi +
push offset dword_101FDCC  +
push eax  +
lea eax [ebp+esi-618h] +
push eax  +
call sub_101E9B3  +
add esp 10h +
test eax eax +
jl loc_101FB31  +
lea eax [ebp+esi-618h] +
push eax  +
call ebx  +
add esi eax +
mov eax [ebp-61Ch] +
mov eax [eax+10h] +
mov eax [eax+38h] +
cmp dword ptr [eax+0D8h] 0 +
jz loc_101FB77  +
call ds:GetCurrentThreadId  +
push eax  +
mov eax edi +
sub eax esi +
push offset dword_101FDC0  +
push eax  +
lea eax [ebp+esi-618h] +
push eax  +
call sub_101E9B3  +
add esp 10h +
test eax eax +
jl loc_101FB77  +
lea eax [ebp+esi-618h] +
push eax  +
call ebx  +
add esi eax +
cmp esi edi +
jge loc_101FBA5  +
mov ecx edi +
push offset dword_101FDB8  +
sub ecx esi +
lea eax [ebp+esi-618h] +
push ecx  +
push eax  +
call sub_101E9B3  +
add esp 0Ch +
test eax eax +
jl loc_101FBA5  +
lea eax [ebp+esi-618h] +
push eax  +
call ebx  +
add esi eax +
xor eax eax +
cmp [ebp+8] eax +
jnz loc_101FBC1  +
mov ecx [ebp-61Ch] +
mov ecx [ecx+10h] +
mov ecx [ecx+38h] +
cmp [ecx+6Ch] eax +
jz loc_101FC74  +
cmp [ebp-620h] eax +
jz loc_101FBFC  +
push dword ptr [ebp+10h]  +
mov ecx edi +
push dword ptr [ebp-620h]  +
sub ecx esi +
push offset aLocSDLoc_0  +
lea eax [ebp+esi-618h] +
push ecx  +
push eax  +
call sub_101E9B3  +
add esp 14h +
test eax eax +
jl loc_101FBFC  +
lea eax [ebp+esi-618h] +
push eax  +
call ebx  +
add esi eax +
cmp dword ptr [ebp+8] 0 +
jz loc_101FC74  +
push dword ptr [ebp+8]  +
mov ecx edi +
push offset aErr0x08x_0  +
sub ecx esi +
lea eax [ebp+esi-618h] +
push ecx  +
push eax  +
call sub_101E9B3  +
add esp 10h +
test eax eax +
jl loc_101FC2F  +
lea eax [ebp+esi-618h] +
push eax  +
call ebx  +
add esi eax +
cmp esi edi +
jge loc_101FC4A  +
mov eax edi +
sub eax esi +
push eax  +
lea eax [ebp+esi-618h] +
push eax  +
push dword ptr [ebp+8]  +
call sub_101E856  +
add esi eax +
mov ecx edi +
push offset dword_101FD7C  +
sub ecx esi +
lea eax [ebp+esi-618h] +
push ecx  +
push eax  +
call sub_101E9B3  +
add esp 0Ch +
test eax eax +
jl loc_101FC74  +
lea eax [ebp+esi-618h] +
push eax  +
call ebx  +
add esi eax +
mov ecx edi +
push offset dword_101FD70  +
sub ecx esi +
lea eax [ebp+esi-618h] +
push ecx  +
push eax  +
call sub_101E9B3  +
add esp 0Ch +
test eax eax +
jl loc_101FC9E  +
lea eax [ebp+esi-618h] +
push eax  +
call ebx  +
add esi eax +
cmp esi edi +
jge loc_101FCD2  +
push dword ptr [ebp-638h]  +
mov ecx edi +
push dword ptr [ebp-624h]  +
sub ecx esi +
lea eax [ebp+esi-618h] +
push ecx  +
push eax  +
call sub_101E93B  +
test eax eax +
jl loc_101FCD0  +
lea eax [ebp+esi-618h] +
push eax  +
call ebx  +
add esi eax +
cmp esi edi +
jg loc_101FCFA  +
mov eax 605h +
push offset dword_101FD60  +
sub eax esi +
push eax  +
lea edi [ebp+esi-618h] +
push edi  +
call sub_101E9B3  +
add esp 0Ch +
test eax eax +
jl loc_101FCFA  +
push edi  +
call ebx  +
add esi eax +
cmp esi 604h +
jge loc_101FD0C  +
mov byte ptr [ebp+esi-618h] 0 +
jmp loc_101FD10  +
mov byte ptr [ebp-14h] 0 +
mov esi [ebp-61Ch] +
lea eax [esi+4] +
push eax  +
lea ecx [ebp-640h] +
call sub_1020192  +
and dword ptr [ebp-4] 0 +
cmp dword ptr [esi] 0 +
jz loc_101FD46  +
mov eax [esi+10h] +
mov eax [eax+38h] +
mov eax [eax] +
lea ecx [ebp-618h] +
push ecx  +
mov ecx [esi+14h] +
push eax  +
call sub_101F739  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-640h] +
call sub_1020181  +
call sub_1003A2A  +
retn 1Ch  +
***
call sub_10039ED  +
mov edx [ebp+1Ch] +
mov eax [ebp+0Ch] +
and dword ptr [ebp-0C20h] 0 +
mov [ebp-0C24h] edx +
mov edx [ebp+20h] +
mov [ebp-0C28h] edx +
mov esi 5F5h +
push esi  +
lea edx [ebp-0C20h] +
push edx  +
lea edx [ebp-0C1Ch] +
push edx  +
push dword ptr [ebp+18h]  +
mov [ebp-0C2Ch] ecx +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push eax  +
push dword ptr [ebp+8]  +
call sub_101ED6C  +
push dword ptr [ebp-0C28h]  +
mov edi [ebp-0C20h] +
push dword ptr [ebp-0C24h]  +
sub esi edi +
push esi  +
lea ebx [ebp+edi*2-0C1Ch] +
push ebx  +
call sub_101E977  +
test eax eax +
jl loc_101FEDC  +
mov eax ebx +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_101FECC  +
sub eax edx +
sar eax 1 +
add edi eax +
mov eax 605h +
push offset aMsgTrc  +
sub eax edi +
push eax  +
lea esi [ebp+edi*2-0C1Ch] +
push esi  +
call sub_1008DB5  +
add esp 0Ch +
test eax eax +
jl loc_101FF12  +
mov eax esi +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_101FF02  +
sub eax edx +
sar eax 1 +
add edi eax +
mov eax 604h +
cmp edi eax +
jle loc_101FF1D  +
mov edi eax +
mov esi [ebp-0C2Ch] +
xor eax eax +
mov [ebp+edi*2-0C1Ch] ax +
lea eax [esi+4] +
push eax  +
lea ecx [ebp-0C34h] +
call sub_1020192  +
and dword ptr [ebp-4] 0 +
cmp dword ptr [esi] 0 +
jz loc_101FF5E  +
mov eax [esi+10h] +
mov eax [eax+38h] +
mov eax [eax] +
push edi  +
lea ecx [ebp-0C1Ch] +
push ecx  +
mov ecx [esi+14h] +
push eax  +
call sub_101F820  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-0C34h] +
call sub_1020181  +
call sub_1003A2A  +
retn 1Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [eax] +
test ecx ecx +
jnz loc_101FFAE  +
mov ecx offset dword_101546C +
lea edx [ebp+arg_8] +
push edx  +
push [ebp+arg_4]  +
push dword ptr [eax+8]  +
push dword ptr [eax+0Ch]  +
push dword ptr [eax+4]  +
push ecx  +
mov ecx [eax+10h] +
push 0  +
call sub_101F8ED  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [eax] +
test ecx ecx +
jnz loc_101FFE3  +
mov ecx offset dword_101546C +
lea edx [ebp+arg_8] +
push edx  +
push [ebp+arg_4]  +
push dword ptr [eax+8]  +
push dword ptr [eax+0Ch]  +
push dword ptr [eax+4]  +
push ecx  +
mov ecx [eax+10h] +
push 0  +
call sub_101FE4A  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push ebx  +
push esi  +
push edi  +
mov esi ecx +
mov edi [esi+4] +
sub edi [esi] +
sar edi 1 +
lea eax [edi+1] +
cmp [ebp+arg_0] eax +
jnb loc_1020024  +
mov [ebp+arg_0] eax +
mov eax [ebp+arg_0] +
xor ecx ecx +
push 2  +
pop edx  +
mul  edx +
seto cl  +
neg ecx  +
or ecx eax +
push ecx  +
call sub_100B217  +
mov ebx eax +
mov eax [esi] +
pop ecx  +
test eax eax +
jnz loc_1020072  +
push 8007000Eh  +
push 10Fh  +
push offset aDW7rtmEnduse_1  +
lea ecx [ebp+var_20] +
call sub_1018E2E  +
mov esi eax +
lea edi [ebp+var_10] +
movs   +
movs   +
movs   +
push offset dword_1023994  +
lea eax [ebp+var_10] +
push eax  +
movs   +
call _CxxThrowException  +
add edi edi +
push edi  +
push eax  +
push ebx  +
call memcpy  +
push dword ptr [esi]  +
call sub_100A21D  +
mov ecx [ebp+arg_0] +
add esp 10h +
lea eax [ebx+edi] +
mov [esi] ebx +
mov [esi+8] ecx +
pop edi  +
mov [esi+4] eax +
xor ecx ecx +
pop esi  +
mov [eax] cx +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push esi  +
mov esi ecx +
push dword ptr [esi]  +
dec dword ptr [esi+4]  +
call ds:ReleaseMutex  +
test eax eax +
jnz loc_10200FD  +
inc dword ptr [esi+4]  +
call ds:__imp_GetLastError  +
test eax eax +
jle loc_10200D6  +
and eax 0FFFFh +
or eax 80070000h +
push eax  +
push 6Ah  +
push offset aDW7rtmEnduse_7  +
lea ecx [ebp+var_20] +
call sub_1018E2E  +
mov esi eax +
lea edi [ebp+var_10] +
movs   +
movs   +
movs   +
push offset dword_1023994  +
lea eax [ebp+var_10] +
push eax  +
movs   +
call _CxxThrowException  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push esi  +
mov esi ecx +
push 0FFFFFFFFh  +
push dword ptr [esi]  +
call ds:WaitForSingleObject  +
test eax eax +
jz loc_102014A  +
call sub_100975B  +
push eax  +
push 75h  +
push offset aDW7rtmEnduse_7  +
lea ecx [ebp+var_20] +
call sub_1018E2E  +
mov esi eax +
lea edi [ebp+var_10] +
movs   +
movs   +
movs   +
push offset dword_1023994  +
lea eax [ebp+var_10] +
push eax  +
movs   +
call _CxxThrowException  +
inc dword ptr [esi+4]  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
mov ecx [esi] +
call sub_1020105  +
mov dword ptr [esi+4] 1 +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
mov ecx [esi] +
call sub_10200A5  +
and dword ptr [esi+4] 0 +
pop esi  +
retn   +
***
cmp dword ptr [ecx] 0 +
jz locret_102018C  +
cmp dword ptr [ecx+4] 0 +
jnz loc_102016A  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
mov esi ecx +
and dword ptr [esi+4] 0 +
mov [esi] eax +
call sub_1020155  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
cmp dword ptr [esi] 0 +
jz loc_10201D1  +
push dword ptr [esi+4]  +
call ds:ImpersonateLoggedOnUser  +
test eax eax +
jnz loc_10201D1  +
call ds:__imp_GetLastError  +
push dword ptr [esi+4]  +
call ds:CloseHandle  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push esi  +
push edi  +
mov esi ecx +
lea edi [esi+4] +
push edi  +
push 1  +
push 0Eh  +
call ds:GetCurrentThread  +
push eax  +
call ds:OpenThreadToken  +
test eax eax +
jnz loc_1020278  +
mov esi ds:__imp_GetLastError +
call esi  +
cmp eax 3F0h +
jz loc_102024F  +
cmp eax 5 +
jz loc_102024F  +
test eax eax +
jle loc_1020228  +
and eax 0FFFFh +
or eax 80070000h +
push eax  +
push 41h  +
push offset aDW7rtmEnduse_8  +
lea ecx [ebp+var_20] +
call sub_1018E2E  +
mov esi eax +
lea edi [ebp+var_10] +
movs   +
movs   +
movs   +
push offset dword_1023994  +
lea eax [ebp+var_10] +
push eax  +
movs   +
call _CxxThrowException  +
push edi  +
push 0Ah  +
call ds:GetCurrentProcess  +
push eax  +
call ds:OpenProcessToken  +
test eax eax +
jnz loc_102029D  +
call esi  +
test eax eax +
jle loc_1020273  +
and eax 0FFFFh +
or eax 80070000h +
push eax  +
push 39h  +
jmp loc_102022B  +
call ds:RevertToSelf  +
mov [esi] eax +
test eax eax +
jnz loc_102029D  +
call ds:__imp_GetLastError  +
test eax eax +
jle loc_1020298  +
and eax 0FFFFh +
or eax 80070000h +
push eax  +
push 4Dh  +
jmp loc_102022B  +
pop edi  +
pop esi  +
leave   +
retn   +
***
mov eax offset PSGetItemPropertyHandlerWithCreateObject +
jmp loc_100CF01  +
***
adc eax offset LeaveCriticalSection +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push dword ptr [ecx]  +
call ds:ResetEvent  +
test eax eax +
jnz locret_102032A  +
lea ecx [ebp+var_20] +
call sub_1018DCD  +
mov esi eax +
lea edi [ebp+var_10] +
movs   +
movs   +
movs   +
push offset dword_1023994  +
lea eax [ebp+var_10] +
push eax  +
movs   +
call _CxxThrowException  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push [ebp+bAlertable]  +
push [ebp+dwMilliseconds]  +
push dword ptr [ecx]  +
call ds:WaitForSingleObjectEx  +
cmp eax 0FFFFFFFFh +
jnz locret_102036B  +
lea ecx [ebp+var_20] +
call sub_1018DCD  +
mov esi eax +
lea edi [ebp+var_10] +
movs   +
movs   +
movs   +
push offset dword_1023994  +
lea eax [ebp+var_10] +
push eax  +
movs   +
call _CxxThrowException  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
test esi esi +
jz loc_102039B  +
mov eax [ebp+arg_4] +
mov ecx [eax] +
mov edx [eax+4] +
and dword ptr [eax+4] 0 +
push edi  +
mov edi [ebp+arg_8] +
mov [edi] edx +
and dword ptr [eax] 0 +
mov [esi] ecx +
pop edi  +
jmp loc_10203A3  +
push [ebp+arg_8]  +
call sub_100E776  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
call sub_1001D89  +
mov esi ecx +
lea eax [esi+24h] +
push eax  +
lea ecx [ebp-10h] +
xor edi edi +
call sub_1002059  +
and [ebp-4] edi +
cmp [esi] edi +
jz loc_10203E0  +
mov ecx esi +
call sub_1001EBD  +
mov ecx [esi+3Ch] +
call sub_10202F7  +
inc edi  +
push dword ptr [ebp-10h]  +
or dword ptr [ebp-4] 0FFFFFFFFh +
call ds:LeaveCriticalSection  +
test edi edi +
jz loc_10203FD  +
mov ecx [esi+3Ch] +
push 0  +
push 0FFFFFFFFh  +
call sub_1020331  +
cmp dword ptr [esi] 0 +
jnz loc_10203BB  +
call __EH_epilog3  +
retn   +
***
call sub_1001D89  +
mov esi ecx +
mov dword ptr [ebp-10h] 1 +
xor ebx ebx +
lea eax [esi+24h] +
push eax  +
lea ecx [ebp-14h] +
xor edi edi +
call sub_1002059  +
mov [ebp-4] ebx +
cmp [esi] ebx +
jz loc_102046F  +
cmp [ebp-10h] ebx +
jz loc_102045B  +
lea edi [esi+8] +
push edi  +
call ds:InterlockedDecrement  +
cmp [edi] ebx +
jnz loc_102045B  +
mov ecx esi +
call sub_1009D75  +
mov ecx [esi+40h] +
call sub_1002165  +
mov ecx esi +
call sub_1001EBD  +
mov ecx [esi+3Ch] +
call sub_10202F7  +
xor edi edi +
inc edi  +
jmp loc_102047E  +
cmp [ebp-10h] ebx +
jz loc_102047E  +
lea eax [esi+8] +
push eax  +
call ds:InterlockedDecrement  +
push dword ptr [ebp-14h]  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov [ebp-10h] ebx +
call ds:LeaveCriticalSection  +
cmp edi ebx +
jz loc_102049D  +
mov ecx [esi+3Ch] +
push ebx  +
push 0FFFFFFFFh  +
call sub_1020331  +
cmp [esi] ebx +
jnz loc_1020424  +
call __EH_epilog3  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov eax [esi+4] +
test eax eax +
jz loc_10204ED  +
mov ecx [esi] +
push edi  +
push [ebp+arg_0]  +
mov edi [eax] +
push eax  +
push dword ptr [esi+8]  +
call sub_1020374  +
xor eax eax +
mov [esi+4] edi +
inc eax  +
pop edi  +
jmp loc_10204EF  +
xor eax eax +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+wLanguage]  +
push 1  +
push offset Type  +
push [ebp+hModule]  +
call ds:FindResourceExW  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+hModule]  +
call sub_10204F9  +
test eax eax +
jz loc_1020542  +
push eax  +
push [ebp+hModule]  +
call ds:LoadResource  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+hModule] 0 +
push esi  +
jz loc_10205A0  +
cmp [ebp+arg_4] 0 +
jz loc_10205A0  +
push [ebp+hModule]  +
call sub_1020525  +
push [ebp+arg_4]  +
mov esi eax +
call sub_1020525  +
test esi esi +
jz loc_1020598  +
test eax eax +
jz loc_1020598  +
mov ecx 0FECDFECDh +
cmp [esi] ecx +
jnz loc_10205A0  +
cmp [eax] ecx +
jnz loc_10205A0  +
push edi  +
push 4  +
lea edi [eax+1Ch] +
add esi 1Ch +
pop ecx  +
xor eax eax +
cmps   +
pop edi  +
jnz loc_10205A0  +
inc eax  +
jmp loc_10205A2  +
push 0Dh  +
call ds:SetLastError  +
xor eax eax +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
xor esi esi +
push edi  +
cmp [ebp+lpLibFileName] esi +
jnz loc_10205BF  +
xor eax eax +
jmp loc_102062D  +
cmp [ebp+arg_4] esi +
jz loc_102061A  +
push esi  +
push esi  +
push 3  +
push esi  +
push 5  +
push 80000000h  +
push [ebp+lpLibFileName]  +
call ds:CreateFileW  +
mov edi eax +
cmp edi 0FFFFFFFFh +
jz loc_10205BB  +
push esi  +
push esi  +
push esi  +
push 8  +
push esi  +
push edi  +
call ds:CreateFileMappingW  +
push edi  +
mov edi ds:CloseHandle +
mov ebx eax +
call edi  +
cmp ebx esi +
jz loc_10205BB  +
push esi  +
push esi  +
push esi  +
push 1  +
push ebx  +
call ds:MapViewOfFile  +
push ebx  +
mov [ebp+lpLibFileName] eax +
call edi  +
mov eax [ebp+lpLibFileName] +
cmp eax esi +
jz loc_10205BB  +
or eax 1 +
jmp loc_102062D  +
xor eax eax +
cmp [ebp+arg_8] esi +
setnz al  +
push eax  +
push esi  +
push [ebp+lpLibFileName]  +
call ds:LoadLibraryExW  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 44h +
mov eax dword_1026044 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
push 20h  +
lea eax [ebp+LCData] +
push eax  +
push 8  +
push 404h  +
mov esi 0C04h +
call ds:GetLocaleInfoW  +
test eax eax +
jz loc_102068D  +
push 3  +
lea eax [ebp+LCData] +
push offset word_10206A0  +
push eax  +
call wcsncmp  +
add esp 0Ch +
mov esi eax +
neg esi  +
sbb esi esi +
and esi 0FFFFF800h +
add esi 0C04h +
mov ecx [ebp+var_4] +
mov ax si +
xor ecx ebp +
pop esi  +
call sub_1001E40  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
mov eax dword_1026044 +
xor eax ebp +
mov [ebp+var_4] eax +
xor eax eax +
cmp ax word_1026A2C +
jnz loc_1020746  +
push esi  +
lea eax [ebp+hKey] +
push eax  +
push 1  +
xor esi esi +
push esi  +
push offset SubKey  +
push 80000002h  +
mov [ebp+cbData] 6 +
call ds:RegOpenKeyExW  +
test eax eax +
jnz loc_1020745  +
push edi  +
lea eax [ebp+cbData] +
push eax  +
lea eax [ebp+Data] +
push eax  +
push esi  +
push esi  +
push offset ValueName  +
push [ebp+hKey]  +
call ds:RegQueryValueExW  +
push [ebp+hKey]  +
mov edi eax +
call ds:RegCloseKey  +
cmp edi esi +
pop edi  +
jnz loc_1020745  +
push 3  +
push ds:off_1020758[esi*8]  +
lea eax [ebp+Data] +
push eax  +
call _wcsnicmp  +
add esp 0Ch +
test eax eax +
jz loc_1020737  +
inc esi  +
cmp esi 1Ch +
jnb loc_1020745  +
jmp loc_1020716  +
mov ax ds:word_102075C[esi*8] +
mov word_1026A2C ax +
pop esi  +
mov ecx [ebp+var_4] +
mov ax word_1026A2C +
xor ecx ebp +
call sub_1001E40  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push edi  +
mov edi eax +
xor ebx ebx +
cmp edi ebx +
jz loc_10209C1  +
cmp [ebp+arg_0] ebx +
jz loc_10209C1  +
cmp [ebp+arg_4] ebx +
jz loc_10209C1  +
push esi  +
movzx eax word ptr [edi] +
lea ecx [eax-61h] +
cmp cx 19h +
ja loc_102093D  +
movzx eax ax +
sub eax 61h +
jmp loc_102094C  +
lea ecx [eax-41h] +
cmp cx 19h +
ja loc_1020976  +
movzx eax ax +
sub eax 41h +
cmp eax 1Ah +
jnb loc_1020976  +
mov esi ds:dword_10209C8[eax*4] +
test esi esi +
jnz loc_102096E  +
jmp loc_1020976  +
push eax  +
push edi  +
call _wcsicmp  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1020981  +
add esi 8 +
mov eax [esi] +
cmp word ptr [eax] 0 +
jnz loc_102095E  +
mov edi [ebp+arg_0] +
inc ebx  +
cmp ebx 2 +
jge loc_10209C0  +
jmp loc_1020929  +
mov esi [esi+4] +
mov eax esi +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_1020989  +
sub eax edx +
sar eax 1 +
cmp eax 55h +
jnb loc_10209C0  +
mov eax esi +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_10209A1  +
sub eax edx +
sar eax 1 +
lea eax [eax+eax+2] +
push eax  +
push esi  +
push [ebp+arg_4]  +
call memcpy  +
add esp 0Ch +
pop esi  +
pop edi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
test esi esi +
jz loc_1020A7B  +
cmp [ebp+arg_4] 0 +
jz loc_1020A7B  +
push 2  +
push 55h  +
push esi  +
push [ebp+arg_0]  +
call sub_1020D38  +
test eax eax +
jz loc_1020A7B  +
push 2  +
push 55h  +
push [ebp+arg_4]  +
push esi  +
call sub_1020DDE  +
test edi edi +
jz loc_1020A76  +
xor eax eax +
push edi  +
push [ebp+arg_4]  +
mov [edi] ax +
mov eax esi +
call sub_1020903  +
xor eax eax +
inc eax  +
jmp loc_1020A7D  +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20Ch +
mov eax dword_1026044 +
xor eax ebp +
mov [ebp+var_4] eax +
push edi  +
mov edi [ebp+arg_0] +
test edi edi +
jnz loc_1020AA7  +
xor eax eax +
jmp loc_1020B12  +
push ebx  +
lea eax [ebp+arg_8] +
push eax  +
push [ebp+arg_4]  +
lea eax [ebp+LibFileName] +
push 104h  +
push eax  +
xor ebx ebx +
call sub_101E977  +
test eax eax +
jl loc_1020B0F  +
push esi  +
call sub_100F952  +
mov esi eax +
and esi 26h +
call sub_100F952  +
and eax 38h +
push esi  +
push eax  +
lea eax [ebp+LibFileName] +
push eax  +
call sub_10205AC  +
mov ebx eax +
pop esi  +
test ebx ebx +
jz loc_1020B0F  +
push ebx  +
push edi  +
call sub_102054B  +
test eax eax +
jnz loc_1020B0F  +
push ebx  +
test bl 1 +
jz loc_1020B07  +
call ds:UnmapViewOfFile  +
jmp loc_1020B0D  +
call ds:__imp_FreeLibrary  +
xor ebx ebx +
mov eax ebx +
pop ebx  +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop edi  +
call sub_1001E40  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
test eax eax +
jz loc_1020B7F  +
test ecx ecx +
jz loc_1020B7F  +
cmp dword ptr [ebp+arg_0] 0 +
push eax  +
jz loc_1020B63  +
test edx edx +
jz loc_1020B50  +
push edx  +
push dword ptr [ebp+arg_0]  +
push offset aSSS_mui  +
push ecx  +
call sub_1020A86  +
add esp 14h +
jmp loc_1020B81  +
push dword ptr [ebp+arg_0]  +
push offset aSS_mui  +
push ecx  +
call sub_1020A86  +
add esp 10h +
jmp loc_1020B81  +
test edx edx +
jz loc_1020B6F  +
push edx  +
push offset a_SS_mui  +
jmp loc_1020B58  +
push offset a_S_mui  +
push ecx  +
call sub_1020A86  +
add esp 0Ch +
jmp loc_1020B81  +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [ebp+arg_4] +
movzx eax word ptr [eax] +
movzx ecx word ptr [ecx] +
cmp cx ax +
jnz loc_1020C01  +
xor eax eax +
pop ebp  +
retn   +
sbb eax eax +
and eax 2 +
dec eax  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
push dword ptr [eax]  +
push [ebp+arg_0]  +
call _wcsicmp  +
pop ecx  +
pop ecx  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
cmp dword ptr [eax+8] 68h +
jnz loc_1020C42  +
cmp word ptr [eax] 7Fh +
jz loc_1020C42  +
xor eax eax +
inc eax  +
jmp loc_1020C44  +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
jz loc_1020CA2  +
test [ebp+arg_4] 0FFFFFFFDh +
jnz loc_1020CA2  +
push offset sub_1020C0E  +
push 8  +
push 163h  +
push offset off_1017838  +
push [ebp+arg_0]  +
call bsearch  +
add esp 14h +
test eax eax +
jz loc_1020CA2  +
mov ecx [eax+4] +
imul ecx ecx +
add ecx offset dword_1016780 +
test byte ptr [ebp+arg_4] 2 +
jnz loc_1020C9D  +
push ecx  +
call sub_1020C29  +
test eax eax +
jnz loc_1020CA2  +
mov ax [ecx] +
jmp loc_1020CAC  +
push 57h  +
call ds:SetLastError  +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
xor eax eax +
mov edx 80070057h +
test ecx ecx +
jz loc_1020CD0  +
cmp ecx 7FFFFFFFh +
jbe loc_1020CD2  +
mov eax edx +
test eax eax +
jl loc_1020D2F  +
push edi  +
mov edi [ebp+arg_C] +
cmp edi 7FFFFFFEh +
jbe loc_1020CEE  +
mov eax edx +
mov edx [ebp+arg_0] +
xor ecx ecx +
mov [edx] cx +
jmp loc_1020D2E  +
mov eax [ebp+arg_0] +
push ebx  +
xor ebx ebx +
push esi  +
mov esi ecx +
test ecx ecx +
jz loc_1020D1E  +
mov edx [ebp+arg_8] +
sub edi ecx +
sub edx eax +
lea ecx [edi+esi] +
test ecx ecx +
jz loc_1020D1A  +
movzx ecx word ptr [edx+eax] +
test cx cx +
jz loc_1020D1A  +
mov [eax] cx +
inc eax  +
inc eax  +
dec esi  +
jnz loc_1020D02  +
test esi esi +
jnz loc_1020D25  +
dec eax  +
dec eax  +
mov ebx 8007007Ah +
xor ecx ecx +
mov [eax] cx +
pop esi  +
mov eax ebx +
pop ebx  +
pop edi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_8] 0 +
push esi  +
push edi  +
jl loc_1020DC9  +
cmp [ebp+arg_4] 0 +
jnz loc_1020D55  +
cmp [ebp+arg_8] 0 +
jnz loc_1020DC9  +
test [ebp+arg_C] 0FFFFFFFDh +
jnz loc_1020DC9  +
push offset sub_1020BE7  +
push 0Ch  +
push 164h  +
lea eax [ebp+arg_0] +
push offset dword_1016780  +
push eax  +
call bsearch  +
mov ecx eax +
add esp 14h +
test ecx ecx +
jz loc_1020DC9  +
test byte ptr [ebp+arg_C] 2 +
jnz loc_1020D91  +
push ecx  +
call sub_1020C29  +
test eax eax +
jnz loc_1020DC9  +
mov edi [ecx+4] +
mov eax edi +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_1020D99  +
sub eax edx +
sar eax 1 +
cmp [ebp+arg_4] 0 +
lea esi [eax+1] +
jz loc_1020DC5  +
push esi  +
push edi  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
call sub_1020CB5  +
test eax eax +
jge loc_1020DC5  +
push 7Ah  +
jmp loc_1020DCB  +
mov eax esi +
jmp loc_1020DD3  +
push 57h  +
call ds:SetLastError  +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
xor edi edi +
cmp [ebp+arg_0] edi +
jz loc_1020E8C  +
cmp [ebp+arg_8] edi +
jle loc_1020E01  +
cmp [ebp+arg_4] edi +
jz loc_1020E8C  +
cmp [ebp+arg_8] edi +
jl loc_1020E8C  +
test [ebp+arg_C] 0FFFFFFFDh +
jnz loc_1020E8C  +
push offset sub_1020C0E  +
push 8  +
push 163h  +
push offset off_1017838  +
push [ebp+arg_0]  +
call bsearch  +
add esp 14h +
cmp eax edi +
jz loc_1020E8C  +
mov ecx [eax+4] +
imul ecx ecx +
mov edx offset dword_1016780 +
add ecx edx +
test byte ptr [ebp+arg_C] 2 +
jnz loc_1020E4D  +
push ecx  +
call sub_1020C29  +
test eax eax +
jnz loc_1020E8C  +
mov eax [ecx+8] +
imul eax eax +
add eax edx +
mov eax [eax+4] +
mov ecx eax +
lea edx [ecx+2] +
mov si [ecx] +
inc ecx  +
inc ecx  +
cmp si di +
jnz loc_1020E5D  +
sub ecx edx +
sar ecx 1 +
lea esi [ecx+1] +
cmp [ebp+arg_4] edi +
jz loc_1020E88  +
push esi  +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
call sub_1020CB5  +
test eax eax +
jge loc_1020E88  +
push 7Ah  +
jmp loc_1020E8E  +
mov eax esi +
jmp loc_1020E96  +
push 57h  +
call ds:SetLastError  +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_0] +
test ebx ebx +
jz loc_1020F0A  +
mov ecx [ebp+arg_4] +
test ecx ecx +
jz loc_1020F0A  +
push esi  +
push edi  +
xor eax eax +
mov edi ecx +
stos   +
mov eax [ebx] +
mov [ecx] eax +
mov eax [ebx+4] +
mov [ecx+4] eax +
mov eax [ebx+8] +
mov [ecx+8] eax +
mov eax [ebx+0Ch] +
mov [ecx+0Ch] eax +
lea esi [ebx+10h] +
lea edi [ecx+10h] +
movs   +
movs   +
movs   +
movs   +
mov eax [ebx+20h] +
pop edi  +
mov [ecx+20h] eax +
cmp eax 1 +
mov eax [ebx+24h] +
pop esi  +
jz loc_1020EF0  +
cdq   +
mov [ecx+2Ch] edx +
mov [ecx+28h] eax +
mov eax [ebx+28h] +
mov [ecx+30h] eax +
mov eax [ebx+2Ch] +
mov [ecx+34h] eax +
mov eax [ebx+30h] +
mov [ecx+38h] eax +
xor eax eax +
inc eax  +
jmp loc_1020F0C  +
xor eax eax +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
test esi esi +
jz loc_1020F3B  +
cmp [ebp+arg_4] 0 +
jz loc_1020F3B  +
push edi  +
mov edi [ebp+arg_4] +
xor eax eax +
stos   +
mov edi [ebp+arg_4] +
movs   +
movs   +
movs   +
movs   +
inc eax  +
pop edi  +
jmp loc_1020F3D  +
xor eax eax +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword_1026058 7D6h +
jl loc_1020F65  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push 0  +
call WinSqmIncrementDWORD  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push edi  +
mov edi [ebp+pvar] +
push edi  +
mov ebx ecx +
call ds:PropVariantClear  +
test eax eax +
jl loc_1020FA8  +
push esi  +
mov esi ebx +
movs   +
movs   +
movs   +
movs   +
xor eax eax +
mov [ebx] ax +
pop esi  +
pop edi  +
pop ebx  +
pop ebp  +
retn 4  +
***
push 20h  +
push 374h  +
lea eax [ebp-7C34h] +
push eax  +
call sub_100DB30  +
retn   +
***
lea ecx [ebp-198h] +
jmp sub_100EA04  +
***
push dword ptr [ebp-7C5Ch]  +
call sub_100A21D  +
pop ecx  +
retn   +
***
lea ecx [ebp-280h] +
jmp sub_1001F05  +
***
lea ecx [ebp-3C0h] +
jmp sub_100341D  +
***
lea ecx [ebp-320h] +
jmp sub_100341D  +
***
lea ecx [ebp-1ECh] +
jmp sub_1002011  +
***
lea ecx [ebp-7C74h] +
jmp sub_100DDA2  +
***
lea ecx [ebp-7C44h] +
jmp sub_1007653  +
***
lea ecx [ebp-68h] +
jmp sub_1002011  +
***
lea ecx [ebp-120h] +
jmp sub_100E1FF  +
***
lea ecx [ebp-0DB4h] +
jmp sub_1003290  +
***
lea ecx [ebp-7C4Ch] +
jmp sub_100DF1A  +
***
stos   +
mov edi edi +
jmp dword ptr [edx]  +
***
mov dword_10269C0 offset off_1001D4C +
retn   +
***
mov ecx offset dword_1026A08 +
jmp sub_100F30A  +
***
mov ecx offset dword_1026A18 +
jmp sub_100F30A  +
***
outs   +
popa   +
inc esi  +
popa   +
imul ebp [ebp+esi*2+72h] +
imul eax [eax] +
jmp near ptr 757098F7h  +
***
