mov edi edi +
push esi  +
mov esi eax +
xor eax eax +
mov ecx edx +
test edx edx +
jz loc_100141E  +
cmp [esi] al +
jz loc_100141A  +
inc esi  +
dec edx  +
jnz loc_1001412  +
test edx edx +
jnz loc_1001423  +
mov eax 80070057h +
pop esi  +
test edi edi +
jz locret_1001434  +
test eax eax +
jl loc_1001431  +
sub ecx edx +
mov [edi] ecx +
retn   +
and dword ptr [edi] 0 +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
mov edi eax +
xor eax eax +
test edx edx +
jz loc_100144D  +
cmp edx [ebp+arg_4] +
jbe loc_1001452  +
mov eax 80070057h +
test eax eax +
jl loc_1001460  +
mov eax [ebp+arg_0] +
call sub_1001405  +
jmp loc_1001463  +
and dword ptr [edi] 0 +
pop edi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1Ch +
lea eax [ebp+hObject] +
push eax  +
push 28h  +
call ds:GetCurrentProcess  +
push eax  +
call ds:OpenProcessToken  +
test eax eax +
jnz loc_1001490  +
xor eax eax +
leave   +
retn   +
lea eax [ebp+Luid] +
push eax  +
push offset Name  +
push 0  +
call ds:LookupPrivilegeValueA  +
test eax eax +
jnz loc_10014B0  +
push [ebp+hObject]  +
call ds:CloseHandle  +
jmp loc_100148C  +
mov eax [ebp+Luid.LowPart] +
push esi  +
push 0  +
mov [ebp+NewState.Privileges.Luid.LowPart] eax +
mov eax [ebp+Luid.HighPart] +
push 0  +
push 10h  +
mov [ebp+NewState.Privileges.Luid.HighPart] eax +
lea eax [ebp+NewState] +
push eax  +
push 0  +
push [ebp+hObject]  +
xor esi esi +
inc esi  +
mov [ebp+NewState.PrivilegeCount] esi +
mov [ebp+NewState.Privileges.Attributes] 2 +
call ds:AdjustTokenPrivileges  +
test eax eax +
jnz loc_10014E5  +
xor esi esi +
push [ebp+hObject]  +
call ds:CloseHandle  +
mov eax esi +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1Ch +
lea eax [ebp+hObject] +
push eax  +
push 28h  +
call ds:GetCurrentProcess  +
push eax  +
call ds:OpenProcessToken  +
test eax eax +
jnz loc_1001519  +
leave   +
retn   +
push esi  +
lea eax [ebp+Luid] +
push eax  +
push offset Name  +
xor esi esi +
push esi  +
call ds:LookupPrivilegeValueA  +
test eax eax +
jnz loc_100153E  +
push [ebp+hObject]  +
call ds:CloseHandle  +
xor eax eax +
pop esi  +
leave   +
retn   +
mov eax [ebp+Luid.LowPart] +
push esi  +
mov [ebp+NewState.Privileges.Luid.LowPart] eax +
mov eax [ebp+Luid.HighPart] +
push esi  +
push 10h  +
mov [ebp+NewState.Privileges.Luid.HighPart] eax +
lea eax [ebp+NewState] +
push eax  +
push esi  +
push [ebp+hObject]  +
mov [ebp+NewState.PrivilegeCount] esi +
mov [ebp+NewState.Privileges.Attributes] 2 +
call ds:AdjustTokenPrivileges  +
test eax eax +
jnz loc_1001577  +
push [ebp+hObject]  +
call ds:CloseHandle  +
mov eax esi +
jmp loc_100153B  +
xor esi esi +
inc esi  +
jmp loc_100156A  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
xor edi edi +
xor eax eax +
inc edi  +
cmp [ebp+arg_0] edi +
setnz al  +
add eax 277Ah +
push eax  +
call sub_1003D89  +
mov esi eax +
pop ecx  +
test esi esi +
jz loc_10015BB  +
push esi  +
push 2729h  +
push edi  +
call sub_1003CD9  +
add esp 0Ch +
push esi  +
call ds:LocalFree  +
mov esi [ebp+arg_4] +
push dword ptr [esi+10h]  +
push 272Ah  +
push edi  +
call sub_1003CD9  +
push dword ptr [esi+14h]  +
push 272Bh  +
push edi  +
call sub_1003CD9  +
push dword ptr [esi+18h]  +
push 272Ch  +
push edi  +
call sub_1003CD9  +
push dword ptr [esi+1Ch]  +
push 272Dh  +
push edi  +
call sub_1003CD9  +
push dword ptr [esi+20h]  +
push 272Eh  +
push edi  +
call sub_1003CD9  +
push dword ptr [esi+24h]  +
push 272Fh  +
push edi  +
call sub_1003CD9  +
add esp 48h +
push dword ptr [esi+28h]  +
push 2730h  +
push edi  +
call sub_1003CD9  +
push dword ptr [esi+2Ch]  +
push 2731h  +
push edi  +
call sub_1003CD9  +
push dword ptr [esi+30h]  +
push 2732h  +
push edi  +
call sub_1003CD9  +
push dword ptr [esi+34h]  +
push 2733h  +
push edi  +
call sub_1003CD9  +
push dword ptr [esi+38h]  +
push 2734h  +
push edi  +
call sub_1003CD9  +
push dword ptr [esi+40h]  +
push 2735h  +
push edi  +
call sub_1003CD9  +
add esp 48h +
push dword ptr [esi+44h]  +
push 2736h  +
push edi  +
call sub_1003CD9  +
push dword ptr [esi+48h]  +
push 2737h  +
push edi  +
call sub_1003CD9  +
push dword ptr [esi+4Ch]  +
push 2738h  +
push edi  +
call sub_1003CD9  +
push dword ptr [esi+50h]  +
push 2739h  +
push edi  +
call sub_1003CD9  +
push dword ptr [esi+54h]  +
push 273Ah  +
push edi  +
call sub_1003CD9  +
add esp 3Ch +
cmp [ebp+arg_8] 0 +
jz loc_10016E8  +
push dword ptr [esi+8]  +
push 273Bh  +
push edi  +
call sub_1003CD9  +
push dword ptr [esi+0Ch]  +
push 273Ch  +
push edi  +
call sub_1003CD9  +
push dword ptr [esi+3Ch]  +
push 273Dh  +
push edi  +
call sub_1003CD9  +
add esp 24h +
pop edi  +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
cmp [ebp+arg_0] 6 +
push esi  +
setnz al  +
push edi  +
add eax 277Ah +
push eax  +
call sub_1003D89  +
xor edi edi +
mov esi eax +
inc edi  +
pop ecx  +
test esi esi +
jz loc_100172E  +
push esi  +
push 273Eh  +
push edi  +
call sub_1003CD9  +
add esp 0Ch +
push esi  +
call ds:LocalFree  +
mov esi [ebp+arg_4] +
push dword ptr [esi+18h]  +
push 273Fh  +
push edi  +
call sub_1003CD9  +
push dword ptr [esi+1Ch]  +
push 2740h  +
push edi  +
call sub_1003CD9  +
push dword ptr [esi+20h]  +
push 2741h  +
push edi  +
call sub_1003CD9  +
push dword ptr [esi+24h]  +
push 2742h  +
push edi  +
call sub_1003CD9  +
push dword ptr [esi+28h]  +
push 2743h  +
push edi  +
call sub_1003CD9  +
push dword ptr [esi+2Ch]  +
push 2744h  +
push edi  +
call sub_1003CD9  +
add esp 48h +
push dword ptr [esi+30h]  +
push 2745h  +
push edi  +
call sub_1003CD9  +
push dword ptr [esi+34h]  +
push 2746h  +
push edi  +
call sub_1003CD9  +
add esp 18h +
cmp [ebp+arg_8] 0 +
jz loc_100181E  +
mov ecx [esi+8] +
mov eax ecx +
dec eax  +
jz loc_10017E4  +
dec eax  +
jz loc_10017DD  +
dec eax  +
jz loc_10017D6  +
dec eax  +
jz loc_10017CF  +
push ecx  +
push 274Bh  +
push edi  +
call sub_1003CD9  +
add esp 0Ch +
jmp loc_10017F1  +
push 274Ah  +
jmp loc_10017E9  +
push 2749h  +
jmp loc_10017E9  +
push 2748h  +
jmp loc_10017E9  +
push 2747h  +
push edi  +
call sub_1003CD9  +
pop ecx  +
pop ecx  +
push dword ptr [esi+0Ch]  +
push 274Ch  +
push edi  +
call sub_1003CD9  +
push dword ptr [esi+10h]  +
push 274Dh  +
push edi  +
call sub_1003CD9  +
push dword ptr [esi+14h]  +
push 274Eh  +
push edi  +
call sub_1003CD9  +
add esp 24h +
pop edi  +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
cmp [ebp+arg_0] 8 +
push esi  +
setnz al  +
add eax 277Ah +
push eax  +
call sub_1003D89  +
mov esi eax +
pop ecx  +
test esi esi +
jz loc_1001861  +
push esi  +
push 275Fh  +
push 1  +
call sub_1003CD9  +
add esp 0Ch +
push esi  +
call ds:LocalFree  +
mov esi [ebp+arg_4] +
push dword ptr [esi+8]  +
push 2760h  +
push 1  +
call sub_1003CD9  +
push dword ptr [esi+0Ch]  +
push 2761h  +
push 1  +
call sub_1003CD9  +
push dword ptr [esi+10h]  +
push 2762h  +
push 1  +
call sub_1003CD9  +
push dword ptr [esi+14h]  +
push 2763h  +
push 1  +
call sub_1003CD9  +
add esp 30h +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
push dword ptr [esi+410h]  +
push dword ptr [esi+8]  +
push 2765h  +
push 1  +
call sub_1003CD9  +
push dword ptr [esi+414h]  +
push dword ptr [esi+0Ch]  +
push 2766h  +
push 1  +
call sub_1003CD9  +
mov eax [ebp+arg_4] +
and [ebp+arg_0] 0 +
lea ecx [eax+4] +
add esp 20h +
cmp dword ptr [ecx] 0 +
jz loc_100192B  +
push ebx  +
mov eax [eax] +
lea edi [esi+eax*4+418h] +
push dword ptr [edi]  +
lea ebx [esi+eax*4+10h] +
push dword ptr [ebx]  +
push dword ptr [ecx]  +
push 1  +
call sub_1003CD9  +
mov eax [ebp+arg_4] +
xor edx edx +
add esp 10h +
inc [ebp+arg_0]  +
mov ecx [ebp+arg_0] +
lea eax [eax+ecx*8] +
lea ecx [eax+4] +
mov [ebx] edx +
mov [edi] edx +
cmp [ecx] edx +
jnz loc_10018F4  +
pop ebx  +
xor edi edi +
add esi 10h +
mov eax [esi] +
test eax eax +
jnz loc_100193E  +
cmp [esi+408h] eax +
jz loc_1001955  +
push dword ptr [esi+408h]  +
push eax  +
push edi  +
push 2785h  +
push 1  +
call sub_1003CD9  +
add esp 14h +
inc edi  +
add esi 4 +
cmp edi 100h +
jb loc_1001930  +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 2764h  +
push 1  +
call sub_1003CD9  +
pop ecx  +
pop ecx  +
push offset unk_1006000  +
push [ebp+arg_0]  +
call sub_10018AD  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 2786h  +
push 1  +
call sub_1003CD9  +
pop ecx  +
pop ecx  +
push offset unk_1006070  +
push [ebp+arg_0]  +
call sub_10018AD  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
and eax 6 +
cmp eax 6 +
jnz loc_10019D3  +
push 3  +
pop eax  +
jmp loc_10019E6  +
cmp eax 4 +
jnz loc_10019DC  +
push 2  +
jmp loc_10019D0  +
xor ecx ecx +
cmp eax 2 +
setz cl  +
mov eax ecx +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
sub eax 0 +
jz loc_1001A1A  +
dec eax  +
jz loc_1001A13  +
dec eax  +
jz loc_1001A0C  +
dec eax  +
jnz loc_1001A1A  +
push 278Ch  +
jmp loc_1001A1F  +
push 278Bh  +
jmp loc_1001A1F  +
push 278Ah  +
jmp loc_1001A1F  +
push 2789h  +
call sub_1003D89  +
pop ecx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 328h +
mov eax dword_10060F0 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
push edi  +
xor esi esi +
xor eax eax +
mov [ebp+var_328] esi +
lea edi [ebp+var_324] +
stos   +
stos   +
mov [ebp+var_318] ebx +
mov [ebp+hLibModule] esi +
stos   +
cmp [ebp+dwProcessId] esi +
jnz loc_1001A74  +
xor al al +
jmp loc_1001C42  +
push [ebp+dwProcessId]  +
push esi  +
push 410h  +
call ds:OpenProcess  +
mov [ebp+hObject] eax +
cmp eax esi +
jnz loc_1001AA0  +
push 278Fh  +
push 1  +
call sub_1003CD9  +
pop ecx  +
pop ecx  +
jmp loc_1001C18  +
cmp [ebp+arg_8] esi +
jnz loc_1001B3A  +
push 100h  +
lea ecx [ebp+String1] +
push ecx  +
push esi  +
push eax  +
call K32GetModuleBaseNameA  +
test eax eax +
jz loc_1001B3A  +
lea eax [ebp+String1] +
lea edx [eax+1] +
mov cl [eax] +
inc eax  +
test cl cl +
jnz loc_1001AC9  +
mov esi ds:CompareStringA +
sub eax edx +
mov ebx eax +
or edi 0FFFFFFFFh +
cmp ebx 0Bh +
jnz loc_1001AFB  +
push edi  +
push offset String2  +
push edi  +
lea eax [ebp+String1] +
push eax  +
push 1  +
push 7Fh  +
call esi  +
cmp eax 2 +
jz loc_1001B34  +
cmp ebx 0Ch +
jnz loc_1001B19  +
push edi  +
push offset aRundll32_exe  +
push edi  +
lea eax [ebp+String1] +
push eax  +
push 1  +
push 7Fh  +
call esi  +
cmp eax 2 +
jz loc_1001B34  +
lea eax [ebp+String1] +
push eax  +
push 2793h  +
push 1  +
call sub_1003CD9  +
add esp 0Ch +
jmp loc_1001BFE  +
mov ebx [ebp+var_318] +
mov eax [ebx] +
or eax [ebx+4] +
jz loc_1001BCF  +
push 104h  +
lea eax [ebp+LibFileName] +
push eax  +
call ds:GetSystemDirectoryW  +
test eax eax +
jz loc_1001BCF  +
push 7  +
lea edi [ebp+eax*2+LibFileName] +
pop ecx  +
lea eax [ebp+LibFileName] +
mov esi offset aAdvapi32_dll +
push eax  +
movs   +
call ds:LoadLibraryW  +
mov [ebp+hLibModule] eax +
test eax eax +
jz loc_1001BCF  +
push offset ProcName  +
push eax  +
call ds:GetProcAddress  +
mov dword_1006EB0 eax +
test eax eax +
jz loc_1001BCF  +
mov ecx [ebp+dwProcessId] +
mov [ebp+var_328] ecx +
mov ecx [ebx] +
mov [ebp+var_324] ecx +
lea ecx [ebp+var_328] +
push ecx  +
push 1  +
push 0  +
call eax  +
test eax eax +
jnz loc_1001BCF  +
push [ebp+hMem]  +
push 2792h  +
push 1  +
call sub_1003CD9  +
add esp 0Ch +
push 100h  +
lea eax [ebp+String1] +
push eax  +
push 0  +
push [ebp+hObject]  +
call K32GetModuleBaseNameA  +
test eax eax +
jnz loc_1001B19  +
push 2790h  +
push 1  +
call sub_1003CD9  +
pop ecx  +
pop ecx  +
push [ebp+hObject]  +
call ds:SymCleanup  +
push [ebp+hObject]  +
call ds:CloseHandle  +
xor esi esi +
cmp [ebp+hMem] esi +
jz loc_1001C2C  +
push [ebp+hMem]  +
call ds:LocalFree  +
cmp [ebp+hLibModule] esi +
jz loc_1001C40  +
push [ebp+hLibModule]  +
call ds:FreeLibrary  +
mov al 1 +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1003816  +
leave   +
retn 0Ch  +
***
push 2  +
call sub_1003CD9  +
add esp 0Ch +
push 1  +
call ds:exit  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_4] +
push esi  +
mov esi [ebp+arg_0] +
push 7FFFFFFFh  +
push esi  +
lea eax [ebp+arg_0] +
call sub_100143A  +
test eax eax +
jl loc_1001CE1  +
mov edx [ebp+arg_0] +
mov ecx [ebp+arg_4] +
sub ecx edx +
push ebx  +
push 0  +
lea eax [edx+esi] +
pop ebx  +
jz loc_1001CD5  +
mov esi ecx +
sub esi [ebp+arg_4] +
push edi  +
lea edi [esi+edx+7FFFFFFFh] +
mov esi [ebp+arg_8] +
sub esi eax +
test edi edi +
jz loc_1001CD0  +
mov dl [esi+eax] +
test dl dl +
jz loc_1001CD0  +
mov [eax] dl +
inc eax  +
dec ecx  +
dec edi  +
test ecx ecx +
jnz loc_1001CBC  +
pop edi  +
test ecx ecx +
jnz loc_1001CDB  +
dec eax  +
mov ebx 8007007Ah +
mov byte ptr [eax] 0 +
mov eax ebx +
pop ebx  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
xor eax eax +
test ecx ecx +
jz loc_1001D01  +
cmp ecx 7FFFFFFFh +
jbe loc_1001D06  +
mov eax 80070057h +
test eax eax +
jl loc_1001D43  +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
lea eax [ebp+arg_C] +
push eax  +
push [ebp+arg_8]  +
lea esi [ecx-1] +
push esi  +
push edi  +
xor ebx ebx +
call ds:_vsnwprintf  +
add esp 10h +
test eax eax +
jl loc_1001D33  +
cmp eax esi +
ja loc_1001D33  +
jnz loc_1001D3E  +
jmp loc_1001D38  +
mov ebx 8007007Ah +
xor eax eax +
mov [edi+esi*2] ax +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
xor eax eax +
test ecx ecx +
jz loc_1001D60  +
cmp ecx 7FFFFFFFh +
jbe loc_1001D65  +
mov eax 80070057h +
test eax eax +
jl loc_1001DA2  +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
lea eax [ebp+arg_C] +
push eax  +
push [ebp+arg_8]  +
lea esi [ecx-1] +
push esi  +
push edi  +
xor ebx ebx +
call ds:_vsnprintf  +
add esp 10h +
test eax eax +
jl loc_1001D95  +
cmp eax esi +
ja loc_1001D95  +
jnz loc_1001D9D  +
mov [esi+edi] bl +
jmp loc_1001D9D  +
mov [esi+edi] bl +
mov ebx 8007007Ah +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
lea eax [ebp+var_4] +
push eax  +
push [ebp+arg_0]  +
call sub_1004DF8  +
mov esi eax +
test esi esi +
jnz loc_1001DC7  +
mov eax [ebp+var_4] +
jmp loc_1001DDD  +
push esi  +
push [ebp+arg_4]  +
push dword ptr [esi]  +
push [ebp+arg_0]  +
call sub_1001581  +
push esi  +
call sub_1003E22  +
xor eax eax +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
lea eax [ebp+var_4] +
push eax  +
push [ebp+arg_0]  +
call sub_1004DF8  +
mov esi eax +
test esi esi +
jnz loc_1001E05  +
mov eax [ebp+var_4] +
jmp loc_1001E1B  +
push esi  +
push [ebp+arg_4]  +
push dword ptr [esi]  +
push [ebp+arg_0]  +
call sub_10016F3  +
push esi  +
call sub_1003E22  +
xor eax eax +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
lea eax [ebp+var_4] +
push eax  +
push [ebp+arg_0]  +
call sub_1004DF8  +
mov esi eax +
test esi esi +
jnz loc_1001E43  +
mov eax [ebp+var_4] +
jmp loc_1001E59  +
push esi  +
push [ebp+arg_4]  +
push dword ptr [esi]  +
push [ebp+arg_0]  +
call sub_1001829  +
push esi  +
call sub_1003E22  +
xor eax eax +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
lea eax [ebp+var_4] +
push eax  +
push [ebp+arg_0]  +
call sub_1004DF8  +
mov esi eax +
test esi esi +
jnz loc_1001E81  +
mov eax [ebp+var_4] +
jmp loc_1001EA2  +
cmp [ebp+arg_0] 5 +
mov eax [esi] +
push esi  +
push [ebp+arg_4]  +
push eax  +
jnz loc_1001E95  +
call sub_100196C  +
jmp loc_1001E9A  +
call sub_1001995  +
push esi  +
call sub_1003E22  +
xor eax eax +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 11Ch +
mov eax dword_10060F0 +
xor eax ebp +
mov [ebp+var_4] eax +
push 105h  +
lea eax [ebp-11Bh] +
push eax  +
mov [ebp+Buffer] 22h +
call ds:GetSystemDirectoryA  +
test eax eax +
jnz loc_1001EE6  +
call ds:GetLastError  +
jmp loc_1001F13  +
push offset aRoute_exePrint  +
push 117h  +
lea eax [ebp+Buffer] +
push eax  +
call sub_1001C7B  +
test eax eax +
jl loc_1001F10  +
lea eax [ebp+Buffer] +
push eax  +
call ds:system  +
pop ecx  +
jmp loc_1001F13  +
push 7Ah  +
pop eax  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_1003816  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 24h +
mov eax dword_10060F0 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
mov ebx [ebp+arg_8] +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
xor edi edi +
push 2718h  +
inc edi  +
push edi  +
call sub_1003CD9  +
push dword ptr [esi+48h]  +
push dword ptr [esi+30h]  +
push 2719h  +
push edi  +
call sub_1003CD9  +
push dword ptr [esi+4Ch]  +
push dword ptr [esi+34h]  +
push 271Ah  +
push edi  +
call sub_1003CD9  +
push dword ptr [esi+50h]  +
push dword ptr [esi+38h]  +
push 271Bh  +
push edi  +
call sub_1003CD9  +
push dword ptr [esi+54h]  +
push dword ptr [esi+3Ch]  +
push 271Ch  +
push edi  +
call sub_1003CD9  +
add esp 48h +
push dword ptr [esi+58h]  +
push dword ptr [esi+40h]  +
push 271Dh  +
push edi  +
call sub_1003CD9  +
push dword ptr [esi+44h]  +
push 271Eh  +
push edi  +
call sub_1003CD9  +
add esp 1Ch +
cmp [ebp+arg_4] 0 +
jz loc_100209B  +
mov esi [ebx] +
jmp loc_1002093  +
push dword ptr [esi+8]  +
push 271Fh  +
push edi  +
call sub_1003CD9  +
lea eax [esi+64h] +
push eax  +
push 2720h  +
push edi  +
call sub_1003CD9  +
push dword ptr [esi+0Ch]  +
push 2721h  +
push edi  +
call sub_1003CD9  +
push dword ptr [esi+10h]  +
push 2722h  +
push edi  +
call sub_1003CD9  +
push dword ptr [esi+14h]  +
push 2723h  +
push edi  +
call sub_1003CD9  +
movzx eax byte ptr [esi+21h] +
push eax  +
movzx eax byte ptr [esi+20h] +
push eax  +
movzx eax byte ptr [esi+1Fh] +
push eax  +
movzx eax byte ptr [esi+1Eh] +
push eax  +
movzx eax byte ptr [esi+1Dh] +
push eax  +
movzx eax byte ptr [esi+1Ch] +
push eax  +
push offset a02x02x02x02x02  +
lea eax [ebp+var_24] +
push 20h  +
push eax  +
call sub_1001D4A  +
add esp 60h +
test eax eax +
jge loc_1002047  +
mov byte ptr [ebp+var_24] 0 +
lea eax [ebp+var_24] +
push eax  +
push 2724h  +
push edi  +
call sub_1003CD9  +
push dword ptr [esi+24h]  +
push 2725h  +
push edi  +
call sub_1003CD9  +
push dword ptr [esi+28h]  +
push 2726h  +
push edi  +
call sub_1003CD9  +
push dword ptr [esi+2Ch]  +
push 2727h  +
push edi  +
call sub_1003CD9  +
push dword ptr [esi+5Ch]  +
push 2728h  +
push edi  +
call sub_1003CD9  +
mov esi [esi] +
add esp 3Ch +
cmp esi ebx +
jnz loc_1001FC7  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1003816  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1E4h +
mov eax dword_10060F0 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
mov [ebp+var_1E4] eax +
mov eax [ebp+arg_14] +
mov [ebp+var_1D4] eax +
xor eax eax +
push ebx  +
xor ebx ebx +
mov [ebp+var_1E0] ecx +
mov [ebp+var_1DC] eax +
cmp ecx eax +
jnz loc_10020F5  +
push 7Ah  +
pop eax  +
jmp loc_10022B8  +
xor edx edx +
mov [ecx] dx +
cmp [ebp+arg_4] eax +
jz loc_1002102  +
push 0Ah  +
pop ebx  +
cmp [ebp+arg_10] eax +
jz loc_100210A  +
or ebx 1 +
cmp [ebp+arg_C] eax +
jz loc_1002112  +
or ebx 10h +
push esi  +
mov esi ds:getnameinfo +
push edi  +
mov edi 104h +
cmp [ebp+arg_8] eax +
jz loc_100217B  +
cmp [ebp+arg_4] eax +
jnz loc_100217B  +
cmp dword_1006B54 eax +
jz loc_1002140  +
mov [ebp+var_1D8] offset name +
jmp loc_10021CD  +
push edi  +
push offset name  +
call ds:gethostname  +
test eax eax +
jnz loc_1002179  +
push 2Eh  +
mov edi offset name +
push edi  +
mov dword_1006B54 1 +
call ds:strchr  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1002171  +
mov byte ptr [eax] 0 +
mov [ebp+var_1D8] edi +
jmp loc_10021CB  +
xor eax eax +
push ebx  +
push eax  +
push eax  +
push edi  +
lea eax [ebp+var_1D0] +
push eax  +
push [ebp+arg_18]  +
push [ebp+var_1D4]  +
call esi  +
xor ecx ecx +
cmp eax ecx +
jz loc_10021BF  +
cmp [ebp+arg_4] ecx +
jnz loc_10021B7  +
mov eax ebx +
or eax 2 +
push eax  +
push ecx  +
push ecx  +
push edi  +
lea eax [ebp+var_1D0] +
push eax  +
push [ebp+arg_18]  +
push [ebp+var_1D4]  +
call esi  +
test eax eax +
jnz loc_10022B6  +
lea eax [ebp+var_1D0] +
mov [ebp+var_1D8] eax +
xor eax eax +
push ebx  +
mov edi 0C8h +
push edi  +
lea ecx [ebp+var_CC] +
push ecx  +
push eax  +
push eax  +
push [ebp+arg_18]  +
push [ebp+var_1D4]  +
call esi  +
cmp eax 2AFCh +
jnz loc_1002213  +
xor ecx ecx +
cmp [ebp+arg_4] ecx +
jnz loc_10022B6  +
or ebx 8 +
push ebx  +
push edi  +
lea eax [ebp+var_CC] +
push eax  +
push ecx  +
push ecx  +
push [ebp+arg_18]  +
push [ebp+var_1D4]  +
call esi  +
test eax eax +
jnz loc_10022B6  +
mov ebx [ebp+var_1D8] +
mov eax ebx +
lea edx [eax+1] +
mov cl [eax] +
inc eax  +
test cl cl +
jnz loc_1002226  +
sub eax edx +
mov ecx eax +
lea eax [ebp+var_CC] +
lea esi [eax+1] +
mov dl [eax] +
inc eax  +
test dl dl +
jnz loc_100223A  +
sub eax esi +
mov esi [ebp+var_1E4] +
lea edi [eax+ecx+4] +
cmp [esi] edi +
jge loc_100225D  +
mov [ebp+var_1DC] 7Ah +
jmp loc_10022AE  +
mov eax [ebp+var_1D4] +
cmp word ptr [eax] 17h +
jnz loc_1002287  +
push 3Ah  +
push ebx  +
call ds:strchr  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1002287  +
lea eax [ebp+var_CC] +
push eax  +
push ebx  +
push offset aSS  +
jmp loc_1002294  +
lea eax [ebp+var_CC] +
push eax  +
push ebx  +
push offset aSS_0  +
push dword ptr [esi]  +
mov ebx [ebp+var_1E0] +
push ebx  +
call sub_1001CEB  +
add esp 14h +
test eax eax +
jge loc_10022AE  +
xor eax eax +
mov [ebx] ax +
mov eax [ebp+var_1DC] +
mov [esi] edi +
pop edi  +
pop esi  +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop ebx  +
call sub_1003816  +
leave   +
retn 1Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
mov eax dword_10060F0 +
xor eax ebp +
mov [ebp+var_4] eax +
push edi  +
xor eax eax +
lea edi [ebp+var_14] +
stos   +
stos   +
stos   +
stos   +
push 2  +
pop eax  +
push dword ptr [ebp+hostshort]  +
mov word ptr [ebp+var_14] ax +
mov eax [ebp+arg_10] +
mov [ebp+var_10] eax +
call ds:htons  +
push 10h  +
mov word ptr [ebp+var_14+2] ax +
lea eax [ebp+var_14] +
push eax  +
push [ebp+arg_C]  +
mov ecx esi +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push ebx  +
call sub_10020B1  +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop edi  +
call sub_1003816  +
leave   +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 24h +
mov eax dword_10060F0 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push esi  +
push edi  +
push 7  +
mov esi ecx +
pop ecx  +
mov [ebp+var_24] eax +
xor eax eax +
push 17h  +
lea edi [ebp+var_20] +
stos   +
pop eax  +
push dword ptr [ebp+hostshort]  +
mov word ptr [ebp+var_20] ax +
mov eax [ebp+arg_14] +
lea edi [ebp+var_18] +
movs   +
movs   +
movs   +
movs   +
mov [ebp+var_8] eax +
call ds:htons  +
push 1Ch  +
mov word ptr [ebp+var_20+2] ax +
lea eax [ebp+var_20] +
push eax  +
push [ebp+arg_10]  +
mov ecx ebx +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+var_24]  +
call sub_10020B1  +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_1003816  +
leave   +
retn 1Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 740h +
mov eax dword_10060F0 +
xor eax ebp +
mov [ebp+var_4] eax +
push edi  +
mov edi [ebp+arg_0] +
push 275Ch  +
call sub_1003D89  +
pop ecx  +
mov [ebp+hMem] eax +
test eax eax +
jz loc_1002640  +
push ebx  +
push esi  +
push dword ptr [edi+8]  +
lea ebx [ebp+var_740] +
push dword ptr [edi+4]  +
lea esi [ebp+var_39C] +
push 1  +
push 0  +
push 1  +
push 1  +
mov [ebp+var_740] 1CCh +
call sub_10022CC  +
mov eax [edi] +
dec eax  +
cmp eax 0Ah +
ja loc_1002471  +
jmp ds:off_1002650[eax*4]  +
push 2751h  +
call sub_1003D89  +
pop ecx  +
mov [ebp+var_738] eax +
jmp loc_1002478  +
and dword ptr [edi+10h] 0 +
push 2752h  +
jmp loc_1002419  +
push 2753h  +
jmp loc_1002419  +
push 2754h  +
jmp loc_1002419  +
push 2755h  +
jmp loc_1002419  +
push 2756h  +
jmp loc_1002419  +
push 2757h  +
jmp loc_1002419  +
push 2758h  +
jmp loc_1002419  +
push 2759h  +
jmp loc_1002419  +
push 275Ah  +
jmp loc_1002419  +
push 275Bh  +
jmp loc_1002419  +
and [ebp+var_738] 0 +
push dword ptr [edi+10h]  +
xor eax eax +
push dword ptr [edi+0Ch]  +
xor ecx ecx +
cmp [ebp+arg_10] eax +
lea ebx [ebp+var_740] +
setz cl  +
lea esi [ebp+var_734] +
mov [ebp+var_740] 1CCh +
push ecx  +
push eax  +
push eax  +
push [ebp+arg_8]  +
call sub_10022CC  +
mov ecx [ebp+var_738] +
test ecx ecx +
jnz loc_10024C4  +
push [ebp+hMem]  +
call ds:LocalFree  +
jmp loc_100263E  +
mov ebx [ebp+arg_C] +
mov esi ds:LocalFree +
mov eax [ebp+arg_4] +
test bl 8 +
jz loc_1002548  +
sub eax 0 +
jz loc_100250C  +
dec eax  +
jz loc_10024E3  +
dec eax  +
jz loc_100250C  +
dec eax  +
jnz loc_1002530  +
push dword ptr [edi+14h]  +
lea eax [ebp+var_734] +
push ecx  +
push eax  +
lea eax [ebp+var_39C] +
push eax  +
push [ebp+hMem]  +
push 2779h  +
push 1  +
call sub_1003CD9  +
add esp 1Ch +
jmp loc_1002530  +
push ecx  +
lea eax [ebp+var_734] +
push eax  +
lea eax [ebp+var_39C] +
push eax  +
push [ebp+hMem]  +
push 2750h  +
push 1  +
call sub_1003CD9  +
add esp 18h +
shr ebx 4 +
and ebx 1 +
push ebx  +
push dword ptr [edi+14h]  +
add edi 20h +
push edi  +
call sub_1001A2E  +
jmp loc_100262E  +
sub eax 0 +
jz loc_100260A  +
dec eax  +
jz loc_10025E1  +
dec eax  +
jz loc_10025A4  +
dec eax  +
jnz loc_100262E  +
push dword ptr [edi+18h]  +
call sub_10019EF  +
mov ebx eax +
test ebx ebx +
jz loc_100262E  +
push ebx  +
push dword ptr [edi+14h]  +
lea eax [ebp+var_734] +
push [ebp+var_738]  +
push eax  +
lea eax [ebp+var_39C] +
push eax  +
push [ebp+hMem]  +
push 278Eh  +
push 1  +
call sub_1003CD9  +
add esp 20h +
push ebx  +
jmp loc_10025DD  +
push dword ptr [edi+18h]  +
call sub_10019EF  +
mov edi eax +
test edi edi +
jz loc_100262E  +
push edi  +
push [ebp+var_738]  +
lea eax [ebp+var_734] +
push eax  +
lea eax [ebp+var_39C] +
push eax  +
push [ebp+hMem]  +
push 2788h  +
push 1  +
call sub_1003CD9  +
add esp 1Ch +
push edi  +
call esi  +
jmp loc_100262E  +
push dword ptr [edi+14h]  +
lea eax [ebp+var_734] +
push ecx  +
push eax  +
lea eax [ebp+var_39C] +
push eax  +
push [ebp+hMem]  +
push 2779h  +
push 1  +
call sub_1003CD9  +
add esp 1Ch +
jmp loc_100262E  +
push ecx  +
lea eax [ebp+var_734] +
push eax  +
lea eax [ebp+var_39C] +
push eax  +
push [ebp+hMem]  +
push 2750h  +
push 1  +
call sub_1003CD9  +
add esp 18h +
push [ebp+hMem]  +
call esi  +
push [ebp+var_738]  +
call esi  +
pop esi  +
pop ebx  +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop edi  +
call sub_1003816  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 73Ch +
mov eax dword_10060F0 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
push 275Ch  +
call sub_1003D89  +
xor edi edi +
pop ecx  +
mov [ebp+hMem] eax +
cmp eax edi +
jz loc_1002908  +
push ebx  +
push dword ptr [esi+14h]  +
lea eax [ebp+var_73C] +
push dword ptr [esi+10h]  +
mov ecx esi +
push 1  +
push edi  +
push 1  +
push 1  +
push eax  +
lea ebx [ebp+var_734] +
mov [ebp+var_73C] 1CCh +
call sub_1002330  +
mov eax [esi+30h] +
dec eax  +
cmp eax 0Ah +
ja loc_1002748  +
jmp ds:off_1002919[eax*4]  +
push 2751h  +
jmp loc_1002740  +
mov [esi+2Ch] edi +
push 2752h  +
jmp loc_1002740  +
push 2753h  +
jmp loc_1002740  +
push 2754h  +
jmp loc_1002740  +
push 2755h  +
jmp loc_1002740  +
push 2756h  +
jmp loc_1002740  +
push 2757h  +
jmp loc_1002740  +
push 2758h  +
jmp loc_1002740  +
push 2759h  +
jmp loc_1002740  +
push 275Ah  +
jmp loc_1002740  +
push 275Bh  +
call sub_1003D89  +
mov edi eax +
pop ecx  +
push dword ptr [esi+2Ch]  +
xor eax eax +
push dword ptr [esi+28h]  +
xor edx edx +
cmp [ebp+arg_10] eax +
lea ecx [esi+18h] +
setz dl  +
lea ebx [ebp+var_39C] +
mov [ebp+var_73C] 1CCh +
push edx  +
push eax  +
push eax  +
push [ebp+arg_8]  +
lea eax [ebp+var_73C] +
push eax  +
call sub_1002330  +
test edi edi +
jnz loc_1002792  +
push [ebp+hMem]  +
call ds:LocalFree  +
jmp loc_1002907  +
test byte ptr [ebp+arg_C] 8 +
mov ebx ds:LocalFree +
mov eax [ebp+arg_4] +
jz loc_1002817  +
sub eax 0 +
jz loc_10027D8  +
dec eax  +
jz loc_10027AF  +
dec eax  +
jz loc_10027D8  +
dec eax  +
jnz loc_10027FC  +
push dword ptr [esi+34h]  +
lea eax [ebp+var_39C] +
push edi  +
push eax  +
lea eax [ebp+var_734] +
push eax  +
push [ebp+hMem]  +
push 2779h  +
push 1  +
call sub_1003CD9  +
add esp 1Ch +
jmp loc_10027FC  +
push edi  +
lea eax [ebp+var_39C] +
push eax  +
lea eax [ebp+var_734] +
push eax  +
push [ebp+hMem]  +
push 2750h  +
push 1  +
call sub_1003CD9  +
add esp 18h +
mov eax [ebp+arg_C] +
shr eax 4 +
and eax 1 +
push eax  +
push dword ptr [esi+34h]  +
add esi 40h +
push esi  +
call sub_1001A2E  +
jmp loc_10028FC  +
sub eax 0 +
jz loc_10028D8  +
dec eax  +
jz loc_10028AF  +
dec eax  +
jz loc_1002877  +
dec eax  +
jnz loc_10028FC  +
push dword ptr [esi+38h]  +
call sub_10019EF  +
mov [ebp+var_73C] eax +
test eax eax +
jz loc_10028FC  +
push eax  +
push dword ptr [esi+34h]  +
lea eax [ebp+var_39C] +
push edi  +
push eax  +
lea eax [ebp+var_734] +
push eax  +
push [ebp+hMem]  +
push 278Eh  +
push 1  +
call sub_1003CD9  +
add esp 20h +
push [ebp+var_73C]  +
jmp loc_10028AB  +
push dword ptr [esi+38h]  +
call sub_10019EF  +
mov esi eax +
test esi esi +
jz loc_10028FC  +
push esi  +
push edi  +
lea eax [ebp+var_39C] +
push eax  +
lea eax [ebp+var_734] +
push eax  +
push [ebp+hMem]  +
push 2788h  +
push 1  +
call sub_1003CD9  +
add esp 1Ch +
push esi  +
call ebx  +
jmp loc_10028FC  +
push dword ptr [esi+34h]  +
lea eax [ebp+var_39C] +
push edi  +
push eax  +
lea eax [ebp+var_734] +
push eax  +
push [ebp+hMem]  +
push 2779h  +
push 1  +
call sub_1003CD9  +
add esp 1Ch +
jmp loc_10028FC  +
push edi  +
lea eax [ebp+var_39C] +
push eax  +
lea eax [ebp+var_734] +
push eax  +
push [ebp+hMem]  +
push 2750h  +
push 1  +
call sub_1003CD9  +
add esp 18h +
push [ebp+hMem]  +
call ebx  +
push edi  +
call ebx  +
pop ebx  +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_1003816  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 3A4h +
mov eax dword_10060F0 +
xor eax ebp +
mov [ebp+var_4] eax +
push edi  +
mov edi [ebp+arg_0] +
push 275Dh  +
call sub_1003D89  +
pop ecx  +
mov [ebp+hMem] eax +
test eax eax +
jz loc_1002A97  +
push ebx  +
push esi  +
push dword ptr [edi+4]  +
xor eax eax +
push dword ptr [edi]  +
inc eax  +
push eax  +
push eax  +
push eax  +
push eax  +
lea ebx [ebp+var_3A4] +
lea esi [ebp+var_39C] +
mov [ebp+var_3A4] 1CCh +
call sub_10022CC  +
push 275Eh  +
call sub_1003D89  +
mov ebx eax +
pop ecx  +
test ebx ebx +
jnz loc_10029C7  +
push [ebp+hMem]  +
call ds:LocalFree  +
jmp loc_1002A95  +
mov eax [ebp+arg_4] +
sub eax 0 +
jz loc_1002A48  +
dec eax  +
jz loc_1002A21  +
dec eax  +
jz loc_1002A05  +
dec eax  +
jnz loc_1002A6A  +
mov eax offset dword_1001270 +
push eax  +
push dword ptr [edi+8]  +
push eax  +
push ebx  +
lea eax [ebp+var_39C] +
push eax  +
push [ebp+hMem]  +
push 278Eh  +
push 1  +
call sub_1003CD9  +
add esp 20h +
jmp loc_1002A6A  +
mov eax offset dword_1001270 +
push eax  +
push eax  +
push ebx  +
lea eax [ebp+var_39C] +
push eax  +
push [ebp+hMem]  +
push 2788h  +
jmp loc_1002A3C  +
push dword ptr [edi+8]  +
lea eax [ebp+var_39C] +
push offset dword_1001270  +
push ebx  +
push eax  +
push [ebp+hMem]  +
push 2779h  +
push 1  +
call sub_1003CD9  +
add esp 1Ch +
jmp loc_1002A6A  +
push offset dword_1001270  +
push ebx  +
lea eax [ebp+var_39C] +
push eax  +
push [ebp+hMem]  +
push 2750h  +
push 1  +
call sub_1003CD9  +
add esp 18h +
mov eax [ebp+arg_C] +
test al 8 +
jz loc_1002A84  +
shr eax 4 +
and eax 1 +
push eax  +
push dword ptr [edi+8]  +
add edi 20h +
push edi  +
call sub_1001A2E  +
push [ebp+hMem]  +
mov esi ds:LocalFree +
call esi  +
push ebx  +
call esi  +
pop esi  +
pop ebx  +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop edi  +
call sub_1003816  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 3A4h +
mov eax dword_10060F0 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
mov esi [ebp+arg_0] +
push 275Dh  +
call sub_1003D89  +
pop ecx  +
mov [ebp+hMem] eax +
test eax eax +
jz loc_1002BF8  +
push ebx  +
push edi  +
push dword ptr [esi+14h]  +
xor edi edi +
push dword ptr [esi+10h]  +
inc edi  +
push edi  +
push edi  +
push edi  +
push edi  +
lea eax [ebp+var_3A4] +
push eax  +
mov ecx esi +
lea ebx [ebp+var_39C] +
mov [ebp+var_3A4] 1CCh +
call sub_1002330  +
push 275Eh  +
call sub_1003D89  +
mov ebx eax +
pop ecx  +
test ebx ebx +
jnz loc_1002B2C  +
push [ebp+hMem]  +
call ds:LocalFree  +
jmp loc_1002BF6  +
mov eax [ebp+arg_4] +
sub eax 0 +
jz loc_1002BAB  +
dec eax  +
jz loc_1002B85  +
dec eax  +
jz loc_1002B69  +
dec eax  +
jnz loc_1002BCC  +
mov eax offset dword_1001270 +
push eax  +
push dword ptr [esi+18h]  +
push eax  +
push ebx  +
lea eax [ebp+var_39C] +
push eax  +
push [ebp+hMem]  +
push 278Eh  +
push edi  +
call sub_1003CD9  +
add esp 20h +
jmp loc_1002BCC  +
mov eax offset dword_1001270 +
push eax  +
push eax  +
push ebx  +
lea eax [ebp+var_39C] +
push eax  +
push [ebp+hMem]  +
push 2788h  +
jmp loc_1002BA0  +
push dword ptr [esi+18h]  +
lea eax [ebp+var_39C] +
push offset dword_1001270  +
push ebx  +
push eax  +
push [ebp+hMem]  +
push 2779h  +
push edi  +
call sub_1003CD9  +
add esp 1Ch +
jmp loc_1002BCC  +
push offset dword_1001270  +
push ebx  +
lea eax [ebp+var_39C] +
push eax  +
push [ebp+hMem]  +
push 2750h  +
push edi  +
call sub_1003CD9  +
add esp 18h +
mov eax [ebp+arg_C] +
test al 8 +
jz loc_1002BE5  +
shr eax 4 +
and eax edi +
push eax  +
push dword ptr [esi+18h]  +
add esi 30h +
push esi  +
call sub_1001A2E  +
push [ebp+hMem]  +
mov esi ds:LocalFree +
call esi  +
push ebx  +
call esi  +
pop edi  +
pop ebx  +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop esi  +
call sub_1003816  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 70h +
mov eax dword_10060F0 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
lea eax [ebp+var_70] +
push eax  +
push 0  +
call sub_1004DF8  +
mov esi eax +
test esi esi +
jnz loc_1002C35  +
mov eax [ebp+var_70] +
jmp loc_1002CA6  +
push 68h  +
lea eax [ebp+var_6C] +
push 0  +
push eax  +
call memset  +
mov eax [esi] +
add esp 0Ch +
jmp loc_1002C8D  +
mov ecx [eax+30h] +
add [ebp+var_3C] ecx +
mov ecx [eax+34h] +
add [ebp+var_38] ecx +
mov ecx [eax+38h] +
add [ebp+var_34] ecx +
mov ecx [eax+3Ch] +
add [ebp+var_30] ecx +
mov ecx [eax+40h] +
add [ebp+var_2C] ecx +
mov ecx [eax+44h] +
add [ebp+var_28] ecx +
mov ecx [eax+48h] +
add [ebp+var_24] ecx +
mov ecx [eax+4Ch] +
add [ebp+var_20] ecx +
mov ecx [eax+50h] +
add [ebp+var_1C] ecx +
mov ecx [eax+54h] +
add [ebp+var_18] ecx +
mov ecx [eax+58h] +
add [ebp+var_14] ecx +
mov eax [eax] +
cmp eax esi +
jnz loc_1002C49  +
push esi  +
push [ebp+arg_0]  +
lea eax [ebp+var_6C] +
push eax  +
call sub_1001F24  +
push esi  +
call sub_1003E22  +
xor eax eax +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop esi  +
call sub_1003816  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1Ch +
push ebx  +
push esi  +
push edi  +
xor edi edi +
mov [ebp+var_C] edi +
call ds:GetProcessHeap  +
mov edx [ebp+arg_8] +
mov [ebp+hHeap] eax +
xor ebx ebx +
mov eax edx +
inc ebx  +
and eax ebx +
push edx  +
mov [ebp+var_10] eax +
call sub_10019BE  +
mov [ebp+var_18] edx +
and [ebp+var_18] 8 +
mov [ebp+var_14] eax +
jz loc_1002CFE  +
test dl 2 +
jz loc_1002D16  +
push 2778h  +
jmp loc_1002D1B  +
sub eax edi +
jz loc_1002D16  +
dec eax  +
jz loc_1002CF7  +
dec eax  +
jz loc_1002D0F  +
push 278Dh  +
jmp loc_1002D1B  +
push 2787h  +
jmp loc_1002D1B  +
push 274Fh  +
push ebx  +
call sub_1003CD9  +
pop ecx  +
pop ecx  +
call sub_100146D  +
mov esi ds:ntohs +
cmp [ebp+arg_0] edi +
jz loc_1002D3C  +
cmp [ebp+arg_4] ebx +
jnz loc_1002E29  +
push edi  +
push [ebp+hHeap]  +
lea eax [ebp+lpMem] +
push eax  +
cmp [ebp+var_18] edi +
jz loc_1002DB9  +
call InternalGetTcpTableWithOwnerModule  +
mov [ebp+var_C] eax +
cmp eax edi +
jnz loc_1002E29  +
mov eax [ebp+lpMem] +
mov [ebp+var_4] edi +
cmp [eax] edi +
jbe loc_1002E1E  +
xor ebx ebx +
lea edi [ebx+eax+8] +
cmp dword ptr [edi] 2 +
jnz loc_1002D78  +
cmp [ebp+arg_C] 0 +
jz loc_1002DA7  +
movzx eax word ptr [edi+8] +
push eax  +
call esi  +
movzx eax ax +
mov [edi+8] eax +
movzx eax word ptr [edi+10h] +
push eax  +
call esi  +
push [ebp+arg_10]  +
movzx eax ax +
push [ebp+arg_8]  +
mov [edi+10h] eax +
push [ebp+var_10]  +
push [ebp+var_14]  +
push edi  +
call sub_10023A8  +
mov eax [ebp+lpMem] +
inc [ebp+var_4]  +
mov ecx [ebp+var_4] +
add ebx 0A0h +
cmp ecx [eax] +
jb loc_1002D69  +
jmp loc_1002E1C  +
call InternalGetTcpTable2  +
mov [ebp+var_C] eax +
cmp eax edi +
jnz loc_1002E29  +
mov eax [ebp+lpMem] +
mov [ebp+var_4] edi +
cmp [eax] edi +
jbe loc_1002E1E  +
xor ebx ebx +
lea edi [ebx+eax+4] +
cmp dword ptr [edi] 2 +
jnz loc_1002DE0  +
cmp [ebp+arg_C] 0 +
jz loc_1002E0F  +
movzx eax word ptr [edi+8] +
push eax  +
call esi  +
movzx eax ax +
mov [edi+8] eax +
movzx eax word ptr [edi+10h] +
push eax  +
call esi  +
push [ebp+arg_10]  +
movzx eax ax +
push [ebp+arg_8]  +
mov [edi+10h] eax +
push [ebp+var_10]  +
push [ebp+var_14]  +
push edi  +
call sub_10023A8  +
mov eax [ebp+lpMem] +
inc [ebp+var_4]  +
mov ecx [ebp+var_4] +
add ebx 1Ch +
cmp ecx [eax] +
jb loc_1002DD1  +
xor edi edi +
push eax  +
push edi  +
push [ebp+hHeap]  +
call ds:HeapFree  +
cmp [ebp+arg_0] edi +
jz loc_1002E38  +
cmp [ebp+arg_4] 10h +
jnz loc_1002F27  +
push edi  +
push [ebp+hHeap]  +
lea eax [ebp+lpMem] +
push eax  +
cmp [ebp+var_18] edi +
jz loc_1002EB6  +
call InternalGetTcp6TableWithOwnerModule  +
mov [ebp+var_C] eax +
cmp eax edi +
jnz loc_1002F27  +
mov eax [ebp+lpMem] +
mov [ebp+var_4] edi +
cmp [eax] edi +
jbe loc_1002F1C  +
xor ebx ebx +
lea edi [ebx+eax+8] +
cmp dword ptr [edi+30h] 2 +
jnz loc_1002E75  +
cmp [ebp+arg_C] 0 +
jz loc_1002EA4  +
movzx eax word ptr [edi+14h] +
push eax  +
call esi  +
movzx eax ax +
mov [edi+14h] eax +
movzx eax word ptr [edi+2Ch] +
push eax  +
call esi  +
push [ebp+arg_10]  +
movzx eax ax +
push [ebp+arg_8]  +
mov [edi+2Ch] eax +
push [ebp+var_10]  +
push [ebp+var_14]  +
push edi  +
call sub_1002681  +
mov eax [ebp+lpMem] +
inc [ebp+var_4]  +
mov ecx [ebp+var_4] +
add ebx 0C0h +
cmp ecx [eax] +
jb loc_1002E65  +
jmp loc_1002F1A  +
call InternalGetTcp6Table2  +
mov [ebp+var_C] eax +
cmp eax edi +
jnz loc_1002F27  +
mov eax [ebp+lpMem] +
mov [ebp+var_4] edi +
cmp [eax] edi +
jbe loc_1002F1C  +
xor ebx ebx +
lea edi [ebx+eax+4] +
cmp dword ptr [edi+30h] 2 +
jnz loc_1002EDE  +
cmp [ebp+arg_C] 0 +
jz loc_1002F0D  +
movzx eax word ptr [edi+14h] +
push eax  +
call esi  +
movzx eax ax +
mov [edi+14h] eax +
movzx eax word ptr [edi+2Ch] +
push eax  +
call esi  +
push [ebp+arg_10]  +
movzx eax ax +
push [ebp+arg_8]  +
mov [edi+2Ch] eax +
push [ebp+var_10]  +
push [ebp+var_14]  +
push edi  +
call sub_1002681  +
mov eax [ebp+lpMem] +
inc [ebp+var_4]  +
mov ecx [ebp+var_4] +
add ebx 3Ch +
cmp ecx [eax] +
jb loc_1002ECE  +
xor edi edi +
push eax  +
push edi  +
push [ebp+hHeap]  +
call ds:HeapFree  +
cmp [ebp+arg_0] edi +
jz loc_1002F32  +
cmp [ebp+arg_4] 2 +
jnz loc_1002F98  +
push edi  +
push [ebp+hHeap]  +
lea eax [ebp+arg_10] +
push eax  +
call InternalGetUdpTableWithOwnerModule  +
mov [ebp+var_C] eax +
cmp eax edi +
jnz loc_1002F98  +
mov eax [ebp+arg_10] +
mov [ebp+var_4] edi +
cmp [eax] edi +
jbe loc_1002F8D  +
xor ebx ebx +
cmp [ebp+arg_C] 0 +
lea edi [ebx+eax+8] +
jz loc_1002F7B  +
movzx eax word ptr [edi+4] +
push eax  +
call esi  +
push [ebp+arg_8]  +
movzx eax ax +
push [ebp+var_10]  +
mov [edi+4] eax +
push [ebp+var_14]  +
push edi  +
call sub_100294A  +
mov eax [ebp+arg_10] +
inc [ebp+var_4]  +
mov ecx [ebp+var_4] +
add ebx 0A0h +
cmp ecx [eax] +
jb loc_1002F52  +
xor edi edi +
push eax  +
push edi  +
push [ebp+hHeap]  +
call ds:HeapFree  +
cmp [ebp+arg_0] edi +
jz loc_1002FA3  +
cmp [ebp+arg_4] 20h +
jnz loc_1003009  +
push edi  +
push [ebp+hHeap]  +
lea eax [ebp+arg_10] +
push eax  +
call InternalGetUdp6TableWithOwnerModule  +
mov [ebp+var_C] eax +
cmp eax edi +
jnz loc_1003009  +
mov eax [ebp+arg_10] +
mov [ebp+var_4] edi +
cmp [eax] edi +
jbe loc_1002FFE  +
xor ebx ebx +
cmp [ebp+arg_C] 0 +
lea edi [ebx+eax+8] +
jz loc_1002FEC  +
movzx eax word ptr [edi+14h] +
push eax  +
call esi  +
push [ebp+arg_8]  +
movzx eax ax +
push [ebp+var_10]  +
mov [edi+14h] eax +
push [ebp+var_14]  +
push edi  +
call sub_1002AAB  +
mov eax [ebp+arg_10] +
inc [ebp+var_4]  +
mov ecx [ebp+var_4] +
add ebx 0B0h +
cmp ecx [eax] +
jb loc_1002FC3  +
xor edi edi +
push eax  +
push edi  +
push [ebp+hHeap]  +
call ds:HeapFree  +
call sub_10014F8  +
mov eax [ebp+var_C] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1C8h +
mov eax dword_10060F0 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
mov ebx [ebp+arg_4] +
push esi  +
xor esi esi +
push edi  +
push esi  +
push esi  +
xor edi edi +
inc edi  +
push edi  +
push esi  +
mov [ebp+var_1C0] esi +
mov [ebp+var_1C4] esi +
mov [ebp+var_1B8] esi +
mov [ebp+var_1A8] esi +
mov [ebp+var_1BC] esi +
mov [ebp+var_1C8] esi +
mov [ebp+var_19C] 0FFh +
mov [ebp+var_1B0] esi +
mov [ebp+hMem] esi +
mov [ebp+var_1AC] esi +
mov [ebp+var_1B4] esi +
mov [ebp+var_19D] 0 +
call ds:HeapSetInformation  +
push ebx  +
push [ebp+arg_0]  +
mov dword_1006EA8 esi +
call nullsub_1  +
call sub_1003DC4  +
mov eax [ebx] +
mov dword_1006EAC eax +
lea eax [ebp+WSAData] +
push eax  +
push 101h  +
call ds:WSAStartup  +
cmp eax esi +
jz loc_10030E2  +
push eax  +
push dword_1006EAC  +
push 2715h  +
push 2  +
call sub_1003CD9  +
add esp 10h +
push edi  +
call ds:exit  +
cmp [ebp+arg_0] edi +
mov [ebp+var_1A4] edi +
jle loc_100343F  +
cmp [ebp+var_1B4] 0 +
mov eax [ebp+var_1A4] +
jz loc_1003205  +
lea esi [ebx+eax*4] +
push dword ptr [esi]  +
call ds:_strupr  +
mov eax [esi] +
pop ecx  +
push 4  +
mov edi offset aTcp +
mov esi eax +
pop ecx  +
xor edx edx +
cmps   +
jnz loc_1003131  +
mov [ebp+var_19C] 1 +
jmp loc_10031F9  +
push 6  +
mov edi offset aTcpv6 +
mov esi eax +
pop ecx  +
xor edx edx +
cmps   +
jnz loc_1003150  +
mov [ebp+var_19C] 10h +
jmp loc_10031F9  +
push 4  +
mov edi offset aUdp +
mov esi eax +
pop ecx  +
xor edx edx +
cmps   +
jnz loc_100316F  +
mov [ebp+var_19C] 2 +
jmp loc_10031F9  +
push 6  +
mov edi offset aUdpv6 +
mov esi eax +
pop ecx  +
xor edx edx +
cmps   +
jnz loc_100318B  +
mov [ebp+var_19C] 20h +
jmp loc_10031F9  +
push 3  +
mov edi offset aIp +
mov esi eax +
pop ecx  +
xor edx edx +
cmps   +
jnz loc_10031A7  +
mov [ebp+var_19C] 4 +
jmp loc_10031F9  +
push 5  +
mov edi offset aIpv6 +
mov esi eax +
pop ecx  +
xor edx edx +
cmps   +
jnz loc_10031C3  +
mov [ebp+var_19C] 40h +
jmp loc_10031F9  +
push 5  +
mov edi offset aIcmp +
mov esi eax +
pop ecx  +
xor edx edx +
cmps   +
jnz loc_10031DF  +
mov [ebp+var_19C] 8 +
jmp loc_10031F9  +
mov esi eax +
push 7  +
mov edi offset aIcmpv6 +
pop ecx  +
xor eax eax +
cmps   +
jnz loc_100323C  +
mov [ebp+var_19C] 80h +
and [ebp+var_1B4] 0 +
jmp loc_100337D  +
mov eax [ebx+eax*4] +
mov cl [eax] +
cmp cl 2Dh +
jz loc_1003241  +
cmp cl 2Fh +
jz loc_1003241  +
cmp [ebp+var_1AC] 0 +
jnz loc_100323C  +
lea ecx [ebp+var_1AC] +
push ecx  +
push offset aD  +
push eax  +
call ds:sscanf  +
add esp 0Ch +
cmp eax 1 +
jz loc_100337D  +
call sub_1001C58  +
lea esi [eax+1] +
jmp loc_1003373  +
mov edi ds:toupper +
movsx eax al +
push eax  +
call edi  +
pop ecx  +
cmp eax 41h +
jnz loc_100326A  +
mov [ebp+var_1C4] 1 +
jmp loc_1003372  +
movsx eax byte ptr [esi] +
push eax  +
call edi  +
pop ecx  +
cmp eax 42h +
jnz loc_1003289  +
or [ebp+hMem] 8 +
mov [ebp+var_19D] 1 +
jmp loc_1003372  +
movsx eax byte ptr [esi] +
push eax  +
call edi  +
pop ecx  +
cmp eax 45h +
jnz loc_10032A1  +
mov [ebp+var_1B8] 1 +
jmp loc_1003317  +
movsx eax byte ptr [esi] +
push eax  +
call edi  +
pop ecx  +
cmp eax 46h +
jnz loc_10032BC  +
mov [ebp+var_1C8] 1 +
jmp loc_1003372  +
movsx eax byte ptr [esi] +
push eax  +
call edi  +
pop ecx  +
cmp eax 4Eh +
jnz loc_10032D4  +
or [ebp+hMem] 1 +
jmp loc_1003372  +
movsx eax byte ptr [esi] +
push eax  +
call edi  +
pop ecx  +
cmp eax 4Fh +
jnz loc_10032EC  +
or [ebp+hMem] 2 +
jmp loc_1003372  +
movsx eax byte ptr [esi] +
push eax  +
call edi  +
pop ecx  +
cmp eax 54h +
jnz loc_1003301  +
or [ebp+hMem] 4 +
jmp loc_1003372  +
movsx eax byte ptr [esi] +
push eax  +
call edi  +
pop ecx  +
cmp eax 53h +
jnz loc_1003323  +
mov [ebp+var_1A8] 1 +
mov [ebp+var_19C] 0FFh +
jmp loc_1003372  +
movsx eax byte ptr [esi] +
push eax  +
call edi  +
pop ecx  +
cmp eax 50h +
jnz loc_1003340  +
xor eax eax +
inc eax  +
mov [ebp+var_1BC] eax +
mov [ebp+var_1B4] eax +
jmp loc_1003372  +
movsx eax byte ptr [esi] +
push eax  +
call edi  +
pop ecx  +
cmp eax 52h +
jnz loc_1003358  +
mov [ebp+var_1B0] 1 +
jmp loc_1003372  +
movsx eax byte ptr [esi] +
push eax  +
call edi  +
pop ecx  +
cmp eax 56h +
jnz loc_100323C  +
mov [ebp+var_1C0] 1 +
inc esi  +
mov al [esi] +
test al al +
jnz loc_1003249  +
inc [ebp+var_1A4]  +
mov eax [ebp+var_1A4] +
cmp eax [ebp+arg_0] +
jl loc_10030F1  +
cmp [ebp+var_19D] 0 +
jz loc_100343F  +
call sub_1004F80  +
test al al +
jnz loc_100343F  +
mov esi ds:_iob +
xor eax eax +
push eax  +
push eax  +
lea ecx [ebp+hMem] +
push ecx  +
push eax  +
push 2E4h  +
push eax  +
push 1100h  +
mov [ebp+hMem] eax +
add esi 20h +
call ds:FormatMessageA  +
test eax eax +
jbe loc_100342C  +
push 8000h  +
push esi  +
call ds:_fileno  +
pop ecx  +
push eax  +
call ds:_setmode  +
mov eax [ebp+hMem] +
pop ecx  +
pop ecx  +
lea ecx [eax+1] +
mov dl [eax] +
inc eax  +
test dl dl +
jnz loc_10033FB  +
sub eax ecx +
push eax  +
push [ebp+hMem]  +
push [ebp+hMem]  +
call ds:CharToOemBuffA  +
push [ebp+hMem]  +
push offset aS  +
push esi  +
call ds:fprintf  +
add esp 0Ch +
push [ebp+hMem]  +
call ds:LocalFree  +
push 1  +
jmp loc_10030DC  +
call sub_100477A  +
xor edi edi +
cmp eax edi +
jz loc_100345C  +
push eax  +
push 2773h  +
push 2  +
call sub_1003CD9  +
add esp 0Ch +
jmp loc_1003438  +
mov esi [ebp+var_1C0] +
cmp [ebp+var_1B8] edi +
jz loc_1003470  +
push esi  +
call sub_1002C0C  +
mov ebx [ebp+var_19C] +
cmp [ebp+var_1A8] edi +
jz loc_10034E5  +
test bl 4 +
jz loc_100348B  +
push esi  +
push 1  +
call sub_1001DA9  +
test bl 40h +
jz loc_1003498  +
push esi  +
push 0Ah  +
call sub_1001DA9  +
test bl 8 +
jz loc_10034A5  +
push esi  +
push 5  +
call sub_1001E63  +
test bl bl +
jns loc_10034B1  +
push esi  +
push 0Fh  +
call sub_1001E63  +
test bl 1 +
jz loc_10034BE  +
push esi  +
push 6  +
call sub_1001DE7  +
test bl 10h +
jz loc_10034CB  +
push esi  +
push 0Bh  +
call sub_1001DE7  +
test bl 2 +
jz loc_10034D8  +
push esi  +
push 8  +
call sub_1001E25  +
test bl 20h +
jz loc_10034E5  +
push esi  +
push 0Dh  +
call sub_1001E25  +
cmp [ebp+var_1BC] edi +
jz loc_10034F2  +
test bl 33h +
jnz loc_100350A  +
cmp [ebp+var_1B8] edi +
jnz loc_1003528  +
cmp [ebp+var_1A8] edi +
jnz loc_1003528  +
cmp [ebp+var_1B0] edi +
jnz loc_1003530  +
push [ebp+var_1C8]  +
push [ebp+var_1C4]  +
push [ebp+hMem]  +
push ebx  +
push [ebp+var_1BC]  +
call sub_1002CBA  +
cmp [ebp+var_1B0] edi +
jz loc_1003535  +
call sub_1001EAC  +
mov eax [ebp+var_1AC] +
cmp eax edi +
jz loc_1003551  +
imul eax eax +
push eax  +
call ds:Sleep  +
jmp loc_1003462  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
xor eax eax +
pop ebx  +
call sub_1003816  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
xor eax eax +
jmp loc_100358F  +
test eax eax +
jnz loc_1003594  +
mov ecx [esi] +
test ecx ecx +
jz loc_100358C  +
call ecx  +
add esi 4 +
cmp esi [ebp+arg_4] +
jb loc_1003580  +
pop esi  +
pop ebp  +
retn   +
***
mov eax dword_1006B7C +
push offset dword_1006B6C  +
push dword_1006B78  +
mov dword_1006B6C eax +
push offset dword_1006B5C  +
push offset dword_1006B60  +
push offset dword_1006B58  +
call ds:__getmainargs  +
add esp 14h +
mov dword_1006B68 eax +
retn   +
***
call __SEH_prolog4  +
xor ebx ebx +
mov [ebp+ms_exc.disabled] ebx +
mov eax large fs:18h +
mov esi [eax+4] +
mov [ebp+var_1C] ebx +
mov edi offset Destination +
push ebx  +
push esi  +
push edi  +
call ds:InterlockedCompareExchange  +
cmp eax ebx +
jz loc_100361C  +
cmp eax esi +
jnz loc_100360F  +
xor esi esi +
inc esi  +
mov [ebp+var_1C] esi +
jmp loc_100361F  +
push 3E8h  +
call ds:Sleep  +
jmp loc_10035F6  +
xor esi esi +
inc esi  +
mov eax dword_1006EBC +
cmp eax esi +
jnz loc_1003632  +
push 1Fh  +
call _amsg_exit  +
pop ecx  +
jmp loc_100366D  +
mov eax dword_1006EBC +
test eax eax +
jnz loc_1003667  +
mov dword_1006EBC esi +
push offset dword_100119C  +
push offset dword_1001190  +
call sub_1003573  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_100366D  +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov eax 0FFh +
jmp loc_1003737  +
mov dword_1006B74 esi +
mov eax dword_1006EBC +
cmp eax esi +
jnz loc_1003691  +
push offset dword_100118C  +
push offset dword_1001184  +
call _initterm  +
pop ecx  +
pop ecx  +
mov dword_1006EBC 2 +
cmp [ebp+var_1C] ebx +
jnz loc_100369E  +
push ebx  +
push edi  +
call ds:InterlockedExchange  +
cmp dword_1006EC4 ebx +
jz loc_10036BF  +
push offset dword_1006EC4  +
call sub_1003929  +
pop ecx  +
test eax eax +
jz loc_10036BF  +
push ebx  +
push 2  +
push ebx  +
call dword_1006EC4  +
push dword_1006B5C  +
push dword_1006B60  +
push dword_1006B58  +
call sub_100301D  +
add esp 0Ch +
mov dword_1006B70 eax +
cmp dword_1006B64 ebx +
jnz loc_100371D  +
push eax  +
call ds:exit  +
mov eax [ebp-14h] +
mov ecx [eax] +
mov ecx [ecx] +
mov [ebp-20h] ecx +
push eax  +
push ecx  +
call _XcptFilter  +
pop ecx  +
pop ecx  +
retn   +
mov esp [ebp-18h] +
mov eax [ebp-20h] +
mov dword_1006B70 eax +
xor ebx ebx +
cmp dword_1006B64 ebx +
jnz loc_100371D  +
push eax  +
call ds:_exit  +
cmp dword_1006B74 ebx +
jnz loc_100372B  +
call ds:_cexit  +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov eax dword_1006B70 +
call __SEH_epilog4  +
retn   +
***
mov eax 5A4Dh +
cmp ds:1000000h ax +
jz loc_1003754  +
xor eax eax +
jmp loc_10037A1  +
mov eax ds:100003Ch +
lea eax [eax+1000000h] +
cmp dword ptr [eax] 4550h +
jnz loc_1003750  +
movzx ecx word ptr [eax+18h] +
cmp ecx 10Bh +
jz loc_100378E  +
cmp ecx 20Bh +
jnz loc_1003750  +
cmp dword ptr [eax+84h] 0Eh +
jbe loc_1003750  +
xor ecx ecx +
cmp [eax+0F8h] ecx +
jmp loc_100379C  +
cmp dword ptr [eax+74h] 0Eh +
jbe loc_1003750  +
xor ecx ecx +
cmp [eax+0E8h] ecx +
setnz cl  +
mov eax ecx +
push 1  +
mov dword_1006B64 eax +
call sub_1003AC2  +
push eax  +
call ds:__set_app_type  +
or dword_1006EB4 0FFFFFFFFh +
or dword_1006EB8 0FFFFFFFFh +
pop ecx  +
pop ecx  +
call ds:__p__fmode  +
mov ecx dword_1006B84 +
mov [eax] ecx +
call ds:__p__commode  +
mov ecx dword_1006B80 +
mov [eax] ecx +
call sub_1003A54  +
cmp dword_1006100 0 +
jnz loc_10037FA  +
push offset sub_1003A54  +
call ds:__setusermatherr  +
pop ecx  +
call sub_1003A3C  +
xor eax eax +
retn   +
***
call sub_1003B01  +
jmp sub_10035D4  +
***
cmp ecx dword_10060F0 +
jnz loc_1003821  +
retn 0  +
jmp loc_1003B97  +
***
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov eax [eax] +
cmp dword ptr [eax] 0E06D7363h +
jnz loc_1003874  +
cmp dword ptr [eax+10h] 3 +
jnz loc_1003874  +
mov eax [eax+14h] +
cmp eax 19930520h +
jz loc_100386E  +
cmp eax 19930521h +
jz loc_100386E  +
cmp eax 19930522h +
jz loc_100386E  +
cmp eax 1994000h +
jnz loc_1003874  +
call ds:?terminate@@YAXXZ  +
xor eax eax +
pop ebp  +
retn 4  +
***
push (offset dword_1003834+3)  +
call ds:SetUnhandledExceptionFilter  +
xor eax eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
mov eax 5A4Dh +
cmp [ecx] ax +
jz loc_10038B6  +
xor eax eax +
pop ebp  +
retn   +
mov eax [ecx+3Ch] +
add eax ecx +
cmp dword ptr [eax] 4550h +
jnz loc_10038B2  +
xor edx edx +
mov ecx 10Bh +
cmp [eax+18h] cx +
setz dl  +
mov eax edx +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [eax+3Ch] +
add ecx eax +
movzx eax word ptr [ecx+14h] +
push ebx  +
push esi  +
movzx esi word ptr [ecx+6] +
xor edx edx +
push edi  +
lea eax [eax+ecx+18h] +
test esi esi +
jbe loc_100391D  +
mov edi [ebp+arg_4] +
mov ecx [eax+0Ch] +
cmp edi ecx +
jb loc_1003915  +
mov ebx [eax+8] +
add ebx ecx +
cmp edi ebx +
jb loc_100391F  +
inc edx  +
add eax 28h +
cmp edx esi +
jb loc_1003905  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
call __SEH_prolog4  +
and [ebp+ms_exc.disabled] 0 +
mov esi 1000000h +
push esi  +
call sub_10038A0  +
pop ecx  +
test eax eax +
jz loc_1003986  +
mov eax [ebp+arg_0] +
sub eax esi +
push eax  +
push esi  +
call sub_10038E0  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1003986  +
mov eax [eax+24h] +
shr eax 1Fh +
not eax  +
and eax 1 +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
jmp loc_100398F  +
mov eax [ebp-14h] +
mov eax [eax] +
mov eax [eax] +
xor ecx ecx +
cmp eax 0C0000005h +
setz cl  +
mov eax ecx +
retn   +
mov esp [ebp-18h] +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
xor eax eax +
call __SEH_epilog4  +
retn   +
***
mov eax [esp+8+arg_4] +
mov ecx [ebp-10h] +
mov large fs:0 ecx +
pop ecx  +
pop edi  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
push ecx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push offset sub_1003816  +
push offset dword_10060F0  +
call _except_handler4_common  +
add esp 18h +
pop ebp  +
retn   +
***
call ds:_controlfp  +
pop ecx  +
pop ecx  +
retn   +
***
retn   +
***
call __SEH_prolog4  +
xor eax eax +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_1003AB5  +
cmp ecx 0FFFFFFFFh +
jz loc_1003AB5  +
and [ebp+ms_exc.disabled] eax +
mov edx 5A4Dh +
cmp [ecx] dx +
jnz loc_1003AAE  +
mov edx [ecx+3Ch] +
test edx edx +
jl loc_1003AAE  +
cmp edx 10000000h +
jnb loc_1003AAE  +
lea eax [edx+ecx] +
mov [ebp+var_1C] eax +
cmp dword ptr [eax] 4550h +
jz loc_1003AAE  +
jmp loc_1003AA9  +
xor eax eax +
inc eax  +
retn   +
mov esp [ebp-18h] +
xor eax eax +
mov [ebp+var_1C] eax +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
call __SEH_epilog4  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
call ds:GetModuleHandleA  +
test eax eax +
jz loc_1003AF7  +
push eax  +
call sub_1003A5C  +
test eax eax +
jz loc_1003AF7  +
movzx eax word ptr [eax+5Ch] +
cmp ax 2 +
jnz loc_1003AEC  +
push 2  +
pop eax  +
pop ebp  +
retn   +
cmp ax 3 +
jnz loc_1003AF7  +
xor eax eax +
inc eax  +
pop ebp  +
retn   +
mov eax [ebp+arg_0] +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov eax dword_10060F0 +
and [ebp+SystemTimeAsFileTime.dwLowDateTime] 0 +
and [ebp+SystemTimeAsFileTime.dwHighDateTime] 0 +
push ebx  +
push edi  +
mov edi 0BB40E64Eh +
mov ebx 0FFFF0000h +
cmp eax edi +
jz loc_1003B33  +
test eax ebx +
jz loc_1003B33  +
not eax  +
mov dword_10060F4 eax +
jmp loc_1003B8E  +
push esi  +
lea eax [ebp+SystemTimeAsFileTime] +
push eax  +
call ds:GetSystemTimeAsFileTime  +
mov esi [ebp+SystemTimeAsFileTime.dwHighDateTime] +
xor esi [ebp+SystemTimeAsFileTime.dwLowDateTime] +
call ds:GetCurrentProcessId  +
xor esi eax +
call ds:GetCurrentThreadId  +
xor esi eax +
call ds:GetTickCount  +
xor esi eax +
lea eax [ebp+PerformanceCount] +
push eax  +
call ds:QueryPerformanceCounter  +
mov eax dword ptr [ebp+PerformanceCount+4] +
xor eax dword ptr [ebp+PerformanceCount] +
xor esi eax +
cmp esi edi +
jz loc_1003B7A  +
test dword_10060F0 ebx +
jnz loc_1003B7F  +
mov esi 0BB40E64Fh +
mov dword_10060F0 esi +
not esi  +
mov dword_10060F4 esi +
pop esi  +
pop edi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 328h +
mov dword_1006C88 eax +
mov dword_1006C84 ecx +
mov dword_1006C80 edx +
mov dword_1006C7C ebx +
mov dword_1006C78 esi +
mov dword_1006C74 edi +
mov word_1006CA0 ss +
mov word_1006C94 cs +
mov word_1006C70 ds +
mov word_1006C6C es +
mov word_1006C68 fs +
mov word_1006C64 gs +
pushf   +
pop dword_1006C98  +
mov eax [ebp+0] +
mov dword_1006C8C eax +
mov eax [ebp+4] +
mov dword_1006C90 eax +
lea eax [ebp+8] +
mov dword_1006C9C eax +
mov eax [ebp-320h] +
mov dword_1006BD8 10001h +
mov eax dword_1006C90 +
mov dword_1006B94 eax +
mov dword_1006B88 0C0000409h +
mov dword_1006B8C 1 +
mov eax dword_10060F0 +
mov [ebp-328h] eax +
mov eax dword_10060F4 +
mov [ebp-324h] eax +
push 0  +
call ds:SetUnhandledExceptionFilter  +
push offset ExceptionInfo  +
call ds:UnhandledExceptionFilter  +
push 0C0000409h  +
call ds:GetCurrentProcess  +
push eax  +
call ds:TerminateProcess  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push edi  +
lea eax [ebp+arg_8] +
mov [ebp+Arguments] eax +
xor edi edi +
lea eax [ebp+Arguments] +
push eax  +
push edi  +
lea eax [ebp+hMem] +
push eax  +
push edi  +
push [ebp+dwMessageId]  +
mov [ebp+hMem] edi +
push edi  +
push 900h  +
call ds:FormatMessageW  +
mov ebx eax +
cmp ebx edi +
jbe loc_1003D70  +
cmp [ebp+hMem] edi +
jz loc_1003D7E  +
cmp [ebp+arg_0] 2 +
push esi  +
mov esi ds:_iob +
jnz loc_1003D23  +
add esi 40h +
jmp loc_1003D26  +
add esi 20h +
push 8000h  +
push esi  +
call ds:_fileno  +
pop ecx  +
push eax  +
call ds:_setmode  +
mov eax [ebp+hMem] +
pop ecx  +
pop ecx  +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
cmp cx di +
jnz loc_1003D42  +
sub eax edx +
sar eax 1 +
push eax  +
push [ebp+hMem]  +
push [ebp+hMem]  +
call ds:CharToOemBuffW  +
push [ebp+hMem]  +
push offset aWs  +
push esi  +
call ds:fprintf  +
add esp 0Ch +
pop esi  +
cmp [ebp+hMem] edi +
jz loc_1003D7E  +
push [ebp+hMem]  +
call ds:LocalFree  +
pop edi  +
mov eax ebx +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
lea ecx [ebp+arg_4] +
mov [ebp+Arguments] ecx +
xor eax eax +
lea ecx [ebp+Arguments] +
push ecx  +
push eax  +
lea ecx [ebp+Buffer] +
push ecx  +
push eax  +
push [ebp+dwMessageId]  +
mov dword ptr [ebp+Buffer] eax +
push eax  +
push 1900h  +
call ds:FormatMessageW  +
xor ecx ecx +
cmp ecx eax +
sbb eax eax +
and eax dword ptr [ebp+Buffer] +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1Ch +
mov eax dword_10060F0 +
xor eax ebp +
mov [ebp+var_4] eax +
call ds:GetConsoleOutputCP  +
push eax  +
push offset a_U  +
lea eax [ebp+var_1C] +
push 0Ch  +
push eax  +
call sub_1001CEB  +
add esp 10h +
test eax eax +
jnz loc_1003E02  +
lea eax [ebp+var_1C] +
push eax  +
push 0  +
call ds:_wsetlocale  +
pop ecx  +
pop ecx  +
push 0  +
push 0  +
push 100h  +
call ds:SetThreadPreferredUILanguages  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_1003816  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
jmp loc_1003E3C  +
mov ecx [esi] +
mov eax [ecx] +
mov [esi] eax +
push ecx  +
mov [eax+4] esi +
call SnmpUtilMemFree  +
cmp [esi] esi +
jnz loc_1003E2D  +
push esi  +
call SnmpUtilMemFree  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
sub eax 0 +
jz loc_1003E73  +
dec eax  +
jz loc_1003E6A  +
dec eax  +
jz loc_1003E6A  +
dec eax  +
jz loc_1003E6A  +
dec eax  +
jz loc_1003E6F  +
dec eax  +
push 57h  +
pop eax  +
jmp loc_1003E75  +
push 0Ch  +
jmp loc_1003E6C  +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_1C] +
mov eax [eax+0CCh] +
mov ecx [ebp+arg_8] +
mov eax [ecx+eax*4] +
dec eax  +
cmp eax 14h +
ja loc_1003FD9  +
jmp ds:off_1003FE0[eax*4]  +
mov eax [ebp+arg_10] +
mov ecx [ebp+arg_0] +
mov [ecx+8] eax +
jmp loc_1003FD9  +
mov edx [ebp+arg_14] +
mov ecx [ebp+arg_0] +
xor eax eax +
mov [ecx+60h] edx +
test edx edx +
jbe loc_1003FD9  +
mov edx [ebp+arg_10] +
mov dl [eax+edx] +
mov [ecx+eax+64h] dl +
inc eax  +
cmp eax [ecx+60h] +
jb loc_1003EC6  +
jmp loc_1003FD9  +
mov eax [ebp+arg_10] +
mov ecx [ebp+arg_0] +
mov [ecx+0Ch] eax +
jmp loc_1003FD9  +
mov eax [ebp+arg_10] +
mov ecx [ebp+arg_0] +
mov [ecx+10h] eax +
jmp loc_1003FD9  +
mov eax [ebp+arg_10] +
mov ecx [ebp+arg_0] +
mov [ecx+14h] eax +
jmp loc_1003FD9  +
mov edx [ebp+arg_14] +
mov ecx [ebp+arg_0] +
xor eax eax +
mov [ecx+18h] edx +
test edx edx +
jbe loc_1003FD9  +
mov edx [ebp+arg_10] +
mov dl [eax+edx] +
mov [ecx+eax+1Ch] dl +
inc eax  +
cmp eax [ecx+18h] +
jb loc_1003F18  +
jmp loc_1003FD9  +
mov eax [ebp+arg_10] +
mov ecx [ebp+arg_0] +
mov [ecx+24h] eax +
jmp loc_1003FD9  +
mov eax [ebp+arg_10] +
mov ecx [ebp+arg_0] +
mov [ecx+28h] eax +
jmp loc_1003FD9  +
mov eax [ebp+arg_10] +
mov ecx [ebp+arg_0] +
mov [ecx+2Ch] eax +
jmp loc_1003FD9  +
mov eax [ebp+arg_10] +
mov ecx [ebp+arg_0] +
mov [ecx+30h] eax +
jmp loc_1003FD9  +
mov eax [ebp+arg_10] +
mov ecx [ebp+arg_0] +
mov [ecx+34h] eax +
jmp loc_1003FD9  +
mov eax [ebp+arg_10] +
mov ecx [ebp+arg_0] +
mov [ecx+38h] eax +
jmp loc_1003FD9  +
mov eax [ebp+arg_10] +
mov ecx [ebp+arg_0] +
mov [ecx+3Ch] eax +
jmp loc_1003FD9  +
mov eax [ebp+arg_10] +
mov ecx [ebp+arg_0] +
mov [ecx+40h] eax +
jmp loc_1003FD9  +
mov eax [ebp+arg_10] +
mov ecx [ebp+arg_0] +
mov [ecx+44h] eax +
jmp loc_1003FD9  +
mov eax [ebp+arg_10] +
mov ecx [ebp+arg_0] +
mov [ecx+48h] eax +
jmp loc_1003FD9  +
mov eax [ebp+arg_10] +
mov ecx [ebp+arg_0] +
mov [ecx+4Ch] eax +
jmp loc_1003FD9  +
mov eax [ebp+arg_10] +
mov ecx [ebp+arg_0] +
mov [ecx+50h] eax +
jmp loc_1003FD9  +
mov eax [ebp+arg_10] +
mov ecx [ebp+arg_0] +
mov [ecx+54h] eax +
jmp loc_1003FD9  +
mov eax [ebp+arg_10] +
mov ecx [ebp+arg_0] +
mov [ecx+58h] eax +
jmp loc_1003FD9  +
mov eax [ebp+arg_10] +
mov ecx [ebp+arg_0] +
mov [ecx+5Ch] eax +
pop ebp  +
retn 20h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_1C] +
mov eax [eax+0CCh] +
mov ecx [ebp+arg_8] +
mov eax [ecx+eax*4] +
dec eax  +
cmp eax 12h +
ja loc_1004142  +
jmp ds:off_1004149[eax*4]  +
mov eax [ebp+arg_10] +
mov ecx [ebp+arg_0] +
mov [ecx+8] eax +
jmp loc_1004142  +
mov eax [ebp+arg_10] +
mov ecx [ebp+arg_0] +
mov [ecx+0Ch] eax +
jmp loc_1004142  +
mov eax [ebp+arg_10] +
mov ecx [ebp+arg_0] +
mov [ecx+10h] eax +
jmp loc_1004142  +
mov eax [ebp+arg_10] +
mov ecx [ebp+arg_0] +
mov [ecx+14h] eax +
jmp loc_1004142  +
mov eax [ebp+arg_10] +
mov ecx [ebp+arg_0] +
mov [ecx+18h] eax +
jmp loc_1004142  +
mov eax [ebp+arg_10] +
mov ecx [ebp+arg_0] +
mov [ecx+1Ch] eax +
jmp loc_1004142  +
mov eax [ebp+arg_10] +
mov ecx [ebp+arg_0] +
mov [ecx+20h] eax +
jmp loc_1004142  +
mov eax [ebp+arg_10] +
mov ecx [ebp+arg_0] +
mov [ecx+24h] eax +
jmp loc_1004142  +
mov eax [ebp+arg_10] +
mov ecx [ebp+arg_0] +
mov [ecx+28h] eax +
jmp loc_1004142  +
mov eax [ebp+arg_10] +
mov ecx [ebp+arg_0] +
mov [ecx+2Ch] eax +
jmp loc_1004142  +
mov eax [ebp+arg_10] +
mov ecx [ebp+arg_0] +
mov [ecx+34h] eax +
jmp loc_1004142  +
mov eax [ebp+arg_10] +
mov ecx [ebp+arg_0] +
mov [ecx+38h] eax +
jmp loc_1004142  +
mov eax [ebp+arg_10] +
mov ecx [ebp+arg_0] +
mov [ecx+3Ch] eax +
jmp loc_1004142  +
mov eax [ebp+arg_10] +
mov ecx [ebp+arg_0] +
mov [ecx+40h] eax +
jmp loc_1004142  +
mov eax [ebp+arg_10] +
mov ecx [ebp+arg_0] +
mov [ecx+44h] eax +
jmp loc_1004142  +
mov eax [ebp+arg_10] +
mov ecx [ebp+arg_0] +
mov [ecx+48h] eax +
jmp loc_1004142  +
mov eax [ebp+arg_10] +
mov ecx [ebp+arg_0] +
mov [ecx+4Ch] eax +
jmp loc_1004142  +
mov eax [ebp+arg_10] +
mov ecx [ebp+arg_0] +
mov [ecx+50h] eax +
jmp loc_1004142  +
mov eax [ebp+arg_10] +
mov ecx [ebp+arg_0] +
mov [ecx+54h] eax +
pop ebp  +
retn 20h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_1C] +
mov eax [eax+0CCh] +
mov ecx [ebp+arg_8] +
mov eax [ecx+eax*4] +
dec eax  +
jz loc_10041FD  +
dec eax  +
jz loc_10041F2  +
dec eax  +
jz loc_10041D3  +
dec eax  +
jz loc_10041C8  +
dec eax  +
jnz loc_100421A  +
mov eax [ebp+arg_10] +
mov ecx [ebp+arg_0] +
mov [ecx+18h] eax +
jmp loc_100421A  +
mov eax [ebp+arg_10] +
mov ecx [ebp+arg_0] +
mov [ecx+14h] eax +
jmp loc_100421A  +
mov ecx [ebp+arg_10] +
mov dl [ecx] +
mov eax [ebp+arg_0] +
mov [eax+10h] dl +
mov dl [ecx+1] +
mov [eax+11h] dl +
mov dl [ecx+2] +
mov [eax+12h] dl +
mov cl [ecx+3] +
mov [eax+13h] cl +
jmp loc_100421A  +
mov eax [ebp+arg_10] +
mov ecx [ebp+arg_0] +
mov [ecx+0Ch] eax +
jmp loc_100421A  +
mov ecx [ebp+arg_10] +
mov dl [ecx] +
mov eax [ebp+arg_0] +
mov [eax+8] dl +
mov dl [ecx+1] +
mov [eax+9] dl +
mov dl [ecx+2] +
mov [eax+0Ah] dl +
mov cl [ecx+3] +
mov [eax+0Bh] cl +
pop ebp  +
retn 20h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_1C] +
mov eax [eax+0CCh] +
mov ecx [ebp+arg_8] +
mov eax [ecx+eax*4] +
dec eax  +
cmp eax 0Bh +
ja loc_100430F  +
jmp ds:off_1004313[eax*4]  +
mov ecx [ebp+arg_10] +
mov dl [ecx] +
mov eax [ebp+arg_0] +
mov [eax+8] dl +
mov dl [ecx+1] +
mov [eax+9] dl +
mov dl [ecx+2] +
mov [eax+0Ah] dl +
mov cl [ecx+3] +
mov [eax+0Bh] cl +
jmp loc_100430F  +
mov eax [ebp+arg_10] +
mov ecx [ebp+arg_0] +
mov [ecx+0Ch] eax +
jmp loc_100430F  +
mov eax [ebp+arg_10] +
mov ecx [ebp+arg_0] +
mov [ecx+10h] eax +
jmp loc_100430F  +
mov eax [ebp+arg_10] +
mov ecx [ebp+arg_0] +
mov [ecx+14h] eax +
jmp loc_100430F  +
mov eax [ebp+arg_10] +
mov ecx [ebp+arg_0] +
mov [ecx+18h] eax +
jmp loc_100430F  +
mov eax [ebp+arg_10] +
mov ecx [ebp+arg_0] +
mov [ecx+1Ch] eax +
jmp loc_100430F  +
mov ecx [ebp+arg_10] +
mov dl [ecx] +
mov eax [ebp+arg_0] +
mov [eax+20h] dl +
mov dl [ecx+1] +
mov [eax+21h] dl +
mov dl [ecx+2] +
mov [eax+22h] dl +
mov cl [ecx+3] +
mov [eax+23h] cl +
jmp loc_100430F  +
mov eax [ebp+arg_10] +
mov ecx [ebp+arg_0] +
mov [ecx+24h] eax +
jmp loc_100430F  +
mov eax [ebp+arg_10] +
mov ecx [ebp+arg_0] +
mov [ecx+28h] eax +
jmp loc_100430F  +
mov eax [ebp+arg_10] +
mov ecx [ebp+arg_0] +
mov [ecx+2Ch] eax +
jmp loc_100430F  +
mov ecx [ebp+arg_10] +
mov dl [ecx] +
mov eax [ebp+arg_0] +
mov [eax+30h] dl +
mov dl [ecx+1] +
mov [eax+31h] dl +
mov dl [ecx+2] +
mov [eax+32h] dl +
mov cl [ecx+3] +
mov [eax+33h] cl +
jmp loc_100430F  +
mov eax [ebp+arg_10] +
mov ecx [ebp+arg_0] +
mov [ecx+34h] eax +
pop ebp  +
retn 20h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_1C] +
mov eax [eax+0CCh] +
mov ecx [ebp+arg_8] +
mov eax [ecx+eax*4] +
dec eax  +
jz loc_10043B3  +
dec eax  +
jz loc_1004392  +
dec eax  +
jz loc_1004373  +
dec eax  +
jnz loc_10043BC  +
mov eax [ebp+arg_10] +
mov ecx [ebp+arg_0] +
mov [ecx+1Ch] eax +
jmp loc_10043BC  +
mov ecx [ebp+arg_10] +
mov dl [ecx] +
mov eax [ebp+arg_0] +
mov [eax+18h] dl +
mov dl [ecx+1] +
mov [eax+19h] dl +
mov dl [ecx+2] +
mov [eax+1Ah] dl +
mov cl [ecx+3] +
mov [eax+1Bh] cl +
jmp loc_10043BC  +
mov edx [ebp+arg_14] +
mov ecx [ebp+arg_0] +
xor eax eax +
mov [ecx+0Ch] edx +
test edx edx +
jbe loc_10043BC  +
mov edx [ebp+arg_10] +
mov dl [eax+edx] +
mov [ecx+eax+10h] dl +
inc eax  +
cmp eax [ecx+0Ch] +
jb loc_10043A1  +
jmp loc_10043BC  +
mov eax [ebp+arg_10] +
mov ecx [ebp+arg_0] +
mov [ecx+8] eax +
pop ebp  +
retn 20h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_1C] +
mov eax [eax+0CCh] +
mov ecx [ebp+arg_8] +
mov eax [ecx+eax*4] +
dec eax  +
cmp eax 0Eh +
ja loc_1004488  +
jmp ds:off_100448D[eax*4]  +
mov eax [ebp+arg_10] +
mov ecx [ebp+arg_0] +
mov [ecx+8] eax +
jmp loc_1004488  +
mov eax [ebp+arg_10] +
mov ecx [ebp+arg_0] +
mov [ecx+0Ch] eax +
jmp loc_1004488  +
mov eax [ebp+arg_10] +
mov ecx [ebp+arg_0] +
mov [ecx+10h] eax +
jmp loc_1004488  +
mov eax [ebp+arg_10] +
mov ecx [ebp+arg_0] +
mov [ecx+14h] eax +
jmp loc_1004488  +
mov eax [ebp+arg_10] +
mov ecx [ebp+arg_0] +
mov [ecx+18h] eax +
jmp loc_1004488  +
mov eax [ebp+arg_10] +
mov ecx [ebp+arg_0] +
mov [ecx+1Ch] eax +
jmp loc_1004488  +
mov eax [ebp+arg_10] +
mov ecx [ebp+arg_0] +
mov [ecx+20h] eax +
jmp loc_1004488  +
mov eax [ebp+arg_10] +
mov ecx [ebp+arg_0] +
mov [ecx+24h] eax +
jmp loc_1004488  +
mov eax [ebp+arg_10] +
mov ecx [ebp+arg_0] +
mov [ecx+28h] eax +
jmp loc_1004488  +
mov eax [ebp+arg_10] +
mov ecx [ebp+arg_0] +
mov [ecx+2Ch] eax +
jmp loc_1004488  +
mov eax [ebp+arg_10] +
mov ecx [ebp+arg_0] +
mov [ecx+30h] eax +
jmp loc_1004488  +
mov eax [ebp+arg_10] +
mov ecx [ebp+arg_0] +
mov [ecx+34h] eax +
jmp loc_1004488  +
mov eax [ebp+arg_10] +
mov ecx [ebp+arg_0] +
mov [ecx+38h] eax +
jmp loc_1004488  +
mov eax [ebp+arg_10] +
mov ecx [ebp+arg_0] +
mov [ecx+3Ch] eax +
pop ebp  +
retn 20h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_1C] +
mov eax [eax+0CCh] +
mov ecx [ebp+arg_8] +
mov eax [ecx+eax*4] +
dec eax  +
jz loc_1004545  +
dec eax  +
jz loc_1004526  +
dec eax  +
jz loc_100451B  +
dec eax  +
jz loc_10044FC  +
dec eax  +
jnz loc_100454E  +
mov eax [ebp+arg_10] +
mov ecx [ebp+arg_0] +
mov [ecx+18h] eax +
jmp loc_100454E  +
mov ecx [ebp+arg_10] +
mov dl [ecx] +
mov eax [ebp+arg_0] +
mov [eax+14h] dl +
mov dl [ecx+1] +
mov [eax+15h] dl +
mov dl [ecx+2] +
mov [eax+16h] dl +
mov cl [ecx+3] +
mov [eax+17h] cl +
jmp loc_100454E  +
mov eax [ebp+arg_10] +
mov ecx [ebp+arg_0] +
mov [ecx+10h] eax +
jmp loc_100454E  +
mov ecx [ebp+arg_10] +
mov dl [ecx] +
mov eax [ebp+arg_0] +
mov [eax+0Ch] dl +
mov dl [ecx+1] +
mov [eax+0Dh] dl +
mov dl [ecx+2] +
mov [eax+0Eh] dl +
mov cl [ecx+3] +
mov [eax+0Fh] cl +
jmp loc_100454E  +
mov eax [ebp+arg_10] +
mov ecx [ebp+arg_0] +
mov [ecx+8] eax +
pop ebp  +
retn 20h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_1C] +
mov ecx [eax+0CCh] +
mov eax [ebp+arg_8] +
cmp dword ptr [eax+ecx*4] 7 +
jnz loc_1004601  +
mov edx [eax+2Ch] +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
push 0Ch  +
pop esi  +
xor ecx ecx +
push ebx  +
mov bl [eax+esi*4] +
inc esi  +
mov [edi+ecx+8] bl +
inc ecx  +
cmp ecx 10h +
jb loc_1004580  +
cmp edx 10h +
jbe loc_10045B2  +
xor ecx ecx +
mov dl [eax+esi*4] +
inc esi  +
mov [edi+ecx+18h] dl +
inc ecx  +
cmp ecx 4 +
jb loc_1004595  +
push dword ptr [edi+18h]  +
call ds:ntohl  +
mov [edi+18h] eax +
mov eax [ebp+arg_8] +
mov ecx [eax+esi*4] +
inc esi  +
inc esi  +
mov [edi+1Ch] ecx +
mov edx [eax+esi*4] +
inc esi  +
xor ecx ecx +
mov bl [eax+esi*4] +
inc esi  +
mov [edi+ecx+20h] bl +
inc ecx  +
cmp ecx 10h +
jb loc_10045C0  +
pop ebx  +
cmp edx 10h +
jbe loc_10045F3  +
xor ecx ecx +
mov dl [eax+esi*4] +
inc esi  +
mov [edi+ecx+30h] dl +
inc ecx  +
cmp ecx 4 +
jb loc_10045D6  +
push dword ptr [edi+30h]  +
call ds:ntohl  +
mov [edi+30h] eax +
mov eax [ebp+arg_8] +
mov eax [eax+esi*4] +
mov [edi+34h] eax +
mov eax [ebp+arg_10] +
mov [edi+38h] eax +
pop edi  +
pop esi  +
pop ebp  +
retn 20h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_1C] +
mov eax [eax+0CCh] +
mov ecx [ebp+arg_8] +
mov eax [ecx+eax*4] +
dec eax  +
jz loc_100464B  +
dec eax  +
jz loc_1004640  +
dec eax  +
jz loc_1004635  +
dec eax  +
jnz loc_1004654  +
mov eax [ebp+arg_10] +
mov ecx [ebp+arg_0] +
mov [ecx+14h] eax +
jmp loc_1004654  +
mov eax [ebp+arg_10] +
mov ecx [ebp+arg_0] +
mov [ecx+10h] eax +
jmp loc_1004654  +
mov eax [ebp+arg_10] +
mov ecx [ebp+arg_0] +
mov [ecx+0Ch] eax +
jmp loc_1004654  +
mov eax [ebp+arg_10] +
mov ecx [ebp+arg_0] +
mov [ecx+8] eax +
pop ebp  +
retn 20h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_1C] +
mov eax [eax+0CCh] +
mov ecx [ebp+arg_8] +
mov eax [ecx+eax*4] +
dec eax  +
jz loc_1004682  +
dec eax  +
jnz loc_100469F  +
mov eax [ebp+arg_10] +
mov ecx [ebp+arg_0] +
mov [ecx+0Ch] eax +
jmp loc_100469F  +
mov ecx [ebp+arg_10] +
mov dl [ecx] +
mov eax [ebp+arg_0] +
mov [eax+8] dl +
mov dl [ecx+1] +
mov [eax+9] dl +
mov dl [ecx+2] +
mov [eax+0Ah] dl +
mov cl [ecx+3] +
mov [eax+0Bh] cl +
pop ebp  +
retn 20h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_1C] +
mov ecx [eax+0CCh] +
mov eax [ebp+arg_8] +
cmp dword ptr [eax+ecx*4] 3 +
jnz loc_1004709  +
mov edx [eax+2Ch] +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
push 0Ch  +
pop ecx  +
xor esi esi +
mov bl [eax+ecx*4] +
inc ecx  +
mov [edi+esi+8] bl +
inc esi  +
cmp esi 10h +
jb loc_10046CD  +
cmp edx 10h +
jbe loc_1004700  +
xor edx edx +
lea eax [eax+ecx*4] +
mov cl [eax] +
add eax 4 +
mov [edi+edx+18h] cl +
inc edx  +
cmp edx 4 +
jb loc_10046E5  +
push dword ptr [edi+18h]  +
call ds:ntohl  +
mov [edi+18h] eax +
mov eax [ebp+arg_10] +
mov [edi+1Ch] eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 20h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
xor eax eax +
test ecx ecx +
jz loc_1004728  +
cmp ecx 7FFFFFFFh +
jbe loc_100472D  +
mov eax 80070057h +
test eax eax +
jl loc_1004771  +
mov eax [ebp+arg_0] +
push ebx  +
xor ebx ebx +
push esi  +
mov esi ecx +
test ecx ecx +
jz loc_1004764  +
mov edx [ebp+arg_8] +
push edi  +
mov edi 7FFFFFFEh +
sub edi ecx +
sub edx eax +
lea ecx [edi+esi] +
test ecx ecx +
jz loc_100475F  +
mov cl [edx+eax] +
test cl cl +
jz loc_100475F  +
mov [eax] cl +
inc eax  +
dec esi  +
jnz loc_100474B  +
pop edi  +
test esi esi +
jnz loc_100476A  +
dec eax  +
mov ebx 8007007Ah +
mov byte ptr [eax] 0 +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 128h +
mov eax dword_10060F0 +
xor eax ebp +
mov [ebp+var_4] eax +
push 0  +
call ds:time  +
mov [ebp+var_11C] eax +
lea eax [ebp+LibFileName] +
mov [esp+12Ch+var_12C] 104h +
push eax  +
call ds:GetSystemDirectoryA  +
test eax eax +
jnz loc_10047C0  +
call ds:GetLastError  +
jmp loc_100488E  +
lea eax [ebp+LibFileName] +
lea edx [eax+1] +
mov cl [eax] +
inc eax  +
test cl cl +
jnz loc_10047C9  +
push ebx  +
mov ebx ds:LoadLibraryA +
push esi  +
mov esi ds:GetProcAddress +
sub eax edx +
cmp dword_1006EA8 0 +
push edi  +
lea edi [ebp+eax+LibFileName] +
jz loc_1004820  +
push offset aMgmtapi_dll  +
lea eax [ebp+var_4] +
sub eax edi +
push eax  +
push edi  +
call sub_1004712  +
test eax eax +
jl loc_1004835  +
lea eax [ebp+LibFileName] +
push eax  +
call ebx  +
test eax eax +
jz loc_1004820  +
push offset aSnmpmgroidtost  +
push eax  +
call esi  +
mov dword_1006ED0 eax +
push offset aInetmib1_dll  +
lea eax [ebp+var_4] +
sub eax edi +
push eax  +
push edi  +
call sub_1004712  +
test eax eax +
jge loc_1004839  +
push 8  +
jmp loc_100486C  +
lea eax [ebp+LibFileName] +
push eax  +
call ebx  +
mov edi eax +
test edi edi +
jz loc_100486A  +
push offset aSnmpextensioni  +
push edi  +
call esi  +
mov dword_1006EC8 eax +
test eax eax +
jz loc_100486A  +
push offset aSnmpextensionq  +
push edi  +
call esi  +
mov dword_1006ECC eax +
test eax eax +
jnz loc_100486F  +
push 2  +
pop eax  +
jmp loc_100488B  +
lea eax [ebp+var_128] +
push eax  +
lea eax [ebp+var_120] +
push eax  +
push [ebp+var_11C]  +
call dword_1006EC8  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_1003816  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 3Ch +
push ebx  +
xor ebx ebx +
push esi  +
mov esi [ebp+arg_4] +
lea eax [ebp+pVb] +
push edi  +
mov edi ds:fprintf +
mov [ebp+var_1C] eax +
mov [ebp+var_18] 1 +
mov [ebp+var_10] ebx +
mov [ebp+var_14] ebx +
mov [ebp+var_C] ebx +
cmp dword_1006EA8 ebx +
jz loc_10048E7  +
mov eax ds:_iob +
push esi  +
add eax 40h +
push offset aReadtableTypeD  +
push eax  +
call edi  +
add esp 0Ch +
cmp esi 0Ah +
ja loc_1004937  +
jz loc_1004924  +
mov eax esi +
dec eax  +
jz loc_1004920  +
sub eax 4 +
jz loc_1004919  +
dec eax  +
jz loc_1004912  +
dec eax  +
dec eax  +
jnz loc_1004952  +
push 2  +
mov eax [ebp+arg_0] +
add eax 8 +
push eax  +
call GetUdpStatisticsEx  +
jmp loc_1004DAF  +
push 2  +
jmp loc_1004DA3  +
push 2  +
jmp loc_1004D8C  +
push 2  +
jmp loc_1004926  +
push 17h  +
mov eax [ebp+arg_0] +
add eax 8 +
push eax  +
call GetIpStatisticsEx  +
jmp loc_1004DAF  +
mov eax esi +
sub eax 0Bh +
jz loc_1004DA1  +
dec eax  +
dec eax  +
jz loc_1004D9A  +
dec eax  +
dec eax  +
jz loc_1004D8A  +
push 0C8h  +
call SnmpUtilMemAlloc  +
cmp eax ebx +
jnz loc_1004968  +
push 8  +
pop eax  +
jmp loc_1004DAF  +
xor ecx ecx +
mov [ebp+pVb.name.ids] eax +
cmp dword_1006108 ebx +
jbe loc_100498A  +
mov edx dword_100610C[ecx*4] +
mov [eax] edx +
add eax 4 +
inc ecx  +
cmp ecx dword_1006108 +
jb loc_1004975  +
cmp esi 4 +
ja loc_10049C3  +
jz loc_10049BC  +
mov ecx esi +
sub ecx ebx +
jz loc_10049B5  +
dec ecx  +
jz loc_10049AE  +
dec ecx  +
jz loc_10049A7  +
dec ecx  +
jnz loc_10049F3  +
mov ebx offset unk_1006468 +
jmp loc_10049F6  +
mov ebx offset unk_1006390 +
jmp loc_10049F6  +
mov ebx offset unk_10062B8 +
jmp loc_10049F6  +
mov ebx offset unk_10061E0 +
jmp loc_10049F6  +
mov ebx offset unk_1006540 +
jmp loc_10049F6  +
mov ecx esi +
sub ecx 7 +
jz loc_10049EC  +
dec ecx  +
dec ecx  +
jz loc_10049E5  +
sub ecx 3 +
jz loc_10049DE  +
dec ecx  +
dec ecx  +
jnz loc_10049F3  +
mov ebx offset unk_1006978 +
jmp loc_10049F6  +
mov ebx offset unk_10068A0 +
jmp loc_10049F6  +
mov ebx offset unk_10067C8 +
jmp loc_10049F6  +
mov ebx offset unk_10066F0 +
jmp loc_10049F6  +
mov ebx [ebp+arg_0] +
xor edx edx +
cmp [ebx] edx +
jbe loc_1004A0E  +
lea ecx [ebx+4] +
mov esi [ecx] +
mov [eax] esi +
add eax 4 +
inc edx  +
add ecx 4 +
cmp edx [ebx] +
jb loc_10049FF  +
mov eax [ebx] +
add eax dword_1006108 +
mov [ebp+pVb.value.asnType] 5 +
mov [ebp+pVb.name.idLength] eax +
mov eax [ebp+arg_0] +
mov [ebp+var_4] eax +
jmp loc_1004A2B  +
mov edi ds:fprintf +
lea eax [ebp+var_14] +
push eax  +
lea eax [ebp+var_10] +
push eax  +
lea eax [ebp+var_1C] +
push eax  +
push 0A1h  +
call dword_1006ECC  +
xor esi esi +
cmp dword_1006EA8 esi +
jz loc_1004AFF  +
push dword ptr [ebp+pVb.value.asnValue]  +
mov eax ds:_iob +
add eax 40h +
push offset aValue8dOid  +
push eax  +
call edi  +
mov eax dword_1006ED0 +
add esp 0Ch +
cmp eax esi +
jz loc_1004AAF  +
lea ecx [ebp+pMem] +
push ecx  +
lea ecx [ebp+pVb] +
push ecx  +
mov [ebp+pMem] esi +
call eax  +
test eax eax +
jz loc_1004A96  +
push [ebp+pMem]  +
mov eax ds:_iob +
add eax 40h +
push offset aS_0  +
push eax  +
call edi  +
add esp 0Ch +
push [ebp+pMem]  +
call SnmpUtilMemFree  +
cmp dword_1006ED0 esi +
jz loc_1004AAF  +
cmp dword_1006EA8 1 +
jbe loc_1004AED  +
xor esi esi +
cmp [ebp+pVb.name.idLength] esi +
jle loc_1004AED  +
cmp esi 6 +
mov eax [ebp+pVb.name.ids] +
push dword ptr [eax+esi*4]  +
jge loc_1004AC8  +
push offset aD_  +
jmp loc_1004AD9  +
cmp esi 9 +
jge loc_1004AD4  +
push offset a2d_  +
jmp loc_1004AD9  +
push offset a3d_  +
mov eax ds:_iob +
add eax 40h +
push eax  +
call edi  +
add esp 0Ch +
inc esi  +
cmp esi [ebp+pVb.name.idLength] +
jl loc_1004AB6  +
mov eax ds:_iob +
add eax 40h +
push offset asc_100131C  +
push eax  +
call edi  +
pop ecx  +
pop ecx  +
cmp [ebp+var_10] 0 +
jnz loc_1004D5C  +
mov ecx [ebx] +
mov eax dword_1006108 +
lea edx [ecx+eax] +
cmp [ebp+pVb.name.idLength] edx +
jb loc_1004D6F  +
sub ecx [ebx+0D0h] +
lea esi [ecx+eax] +
mov ecx [ebp+pVb.name.ids] +
cmp eax esi +
jnb loc_1004B47  +
mov edx eax +
sub edx eax +
lea edx [ebx+edx*4+4] +
mov edi [ecx+eax*4] +
cmp edi [edx] +
jnz loc_1004D6F  +
inc eax  +
add edx 4 +
cmp eax esi +
jb loc_1004B34  +
mov eax [ebp+arg_4] +
dec eax  +
jz loc_1004B85  +
sub eax 5 +
jz loc_1004B79  +
push 2  +
pop edx  +
sub eax edx +
jz loc_1004B6D  +
sub eax 4 +
jz loc_1004B62  +
sub eax edx +
jnz loc_1004BA9  +
cmp [ecx+28h] edx +
jnz loc_1004A25  +
jmp loc_1004BA9  +
mov eax [ebx+0CCh] +
cmp dword ptr [ecx+eax*4] 5 +
jmp loc_1004BA3  +
mov eax [ebx+0CCh] +
cmp dword ptr [ecx+eax*4] 0Dh +
jmp loc_1004BA3  +
mov eax [ebx+0CCh] +
mov eax [ecx+eax*4] +
cmp eax 14h +
jz loc_1004A25  +
cmp eax 15h +
jz loc_1004A25  +
cmp eax 16h +
jz loc_1004A25  +
mov eax [ebp+var_4] +
mov esi [ebp+arg_0] +
cmp eax esi +
jz loc_1004BDC  +
mov eax [eax] +
cmp eax esi +
jnz loc_1004BC7  +
mov edx [ebx+0CCh] +
mov edx [ecx+edx*4] +
cmp edx [ebp+var_C] +
jz loc_1004BDC  +
mov edx [ebx+0CCh] +
mov edi [ebp+var_C] +
cmp [ecx+edx*4] edi +
jz loc_1004BD7  +
mov eax [esi] +
mov [ebp+var_4] eax +
jmp loc_1004C01  +
push [ebp+nBytes]  +
call SnmpUtilMemAlloc  +
mov ecx eax +
mov [ebp+var_4] ecx +
test ecx ecx +
jz loc_1004D7C  +
mov eax [esi+4] +
mov [ecx] esi +
mov [ecx+4] eax +
mov [eax] ecx +
mov [esi+4] ecx +
mov ecx [ebp+pVb.name.ids] +
mov eax [ebx+0CCh] +
mov eax [ecx+eax*4] +
mov [ebp+var_C] eax +
mov eax [ebp+arg_4] +
cmp eax 0Eh +
ja loc_1004D35  +
jmp ds:off_1004DB7[eax*4]  +
push ebx  +
sub esp 18h +
push 6  +
pop ecx  +
mov edi esp +
push [ebp+var_4]  +
lea esi [ebp+pVb] +
movs   +
call sub_1003E80  +
jmp loc_1004D35  +
push ebx  +
sub esp 18h +
push 6  +
pop ecx  +
mov edi esp +
push [ebp+var_4]  +
lea esi [ebp+pVb] +
movs   +
call sub_1004039  +
jmp loc_1004D35  +
push ebx  +
sub esp 18h +
push 6  +
pop ecx  +
mov edi esp +
push [ebp+var_4]  +
lea esi [ebp+pVb] +
movs   +
call sub_100419A  +
jmp loc_1004D35  +
push ebx  +
sub esp 18h +
push 6  +
pop ecx  +
mov edi esp +
push [ebp+var_4]  +
lea esi [ebp+pVb] +
movs   +
call sub_1004223  +
jmp loc_1004D35  +
push ebx  +
sub esp 18h +
push 6  +
pop ecx  +
mov edi esp +
push [ebp+var_4]  +
lea esi [ebp+pVb] +
movs   +
call sub_1004348  +
jmp loc_1004D35  +
push ebx  +
sub esp 18h +
push 6  +
pop ecx  +
mov edi esp +
push [ebp+var_4]  +
lea esi [ebp+pVb] +
movs   +
call sub_10043C5  +
jmp loc_1004D35  +
push ebx  +
sub esp 18h +
push 6  +
pop ecx  +
mov edi esp +
push [ebp+var_4]  +
lea esi [ebp+pVb] +
movs   +
call sub_10044CE  +
jmp loc_1004D35  +
push ebx  +
sub esp 18h +
push 6  +
pop ecx  +
mov edi esp +
push [ebp+var_4]  +
lea esi [ebp+pVb] +
movs   +
call sub_1004557  +
jmp loc_1004D35  +
push ebx  +
sub esp 18h +
push 6  +
pop ecx  +
mov edi esp +
push [ebp+var_4]  +
lea esi [ebp+pVb] +
movs   +
call sub_100460A  +
jmp loc_1004D35  +
push ebx  +
sub esp 18h +
push 6  +
pop ecx  +
mov edi esp +
push [ebp+var_4]  +
lea esi [ebp+pVb] +
movs   +
call sub_100465D  +
jmp loc_1004D35  +
push ebx  +
sub esp 18h +
push 6  +
pop ecx  +
mov edi esp +
push [ebp+var_4]  +
lea esi [ebp+pVb] +
movs   +
call sub_10046A8  +
lea eax [ebp+pVb] +
push eax  +
lea eax [ebp+pOidDst] +
push eax  +
call SnmpUtilOidCpy  +
lea eax [ebp+pVb] +
push eax  +
call SnmpUtilVarBindFree  +
mov eax [ebp+pOidDst.idLength] +
mov [ebp+pVb.name.idLength] eax +
mov eax [ebp+pOidDst.ids] +
mov [ebp+pVb.name.ids] eax +
jmp loc_1004A25  +
lea eax [ebp+pVb] +
push eax  +
call SnmpUtilVarBindFree  +
push [ebp+var_10]  +
call sub_1003E50  +
jmp loc_1004DAF  +
lea eax [ebp+pVb] +
push eax  +
call SnmpUtilVarBindFree  +
xor eax eax +
jmp loc_1004DAF  +
lea eax [ebp+pVb] +
push eax  +
call SnmpUtilVarBindFree  +
jmp loc_1004960  +
push 17h  +
mov eax [ebp+arg_0] +
add eax 8 +
push eax  +
call GetIcmpStatisticsEx  +
jmp loc_1004DAF  +
push 17h  +
jmp loc_1004901  +
push 17h  +
mov eax [ebp+arg_0] +
add eax 8 +
push eax  +
call GetTcpStatisticsEx  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword_1006EA8 0 +
push ebx  +
mov ebx [ebp+arg_0] +
jz loc_1004E22  +
mov eax ds:_iob +
push ebx  +
add eax 40h +
push offset aGettableTypeD  +
push eax  +
call ds:fprintf  +
add esp 0Ch +
cmp ebx 0Fh +
jbe loc_1004E34  +
mov eax [ebp+arg_4] +
mov dword ptr [eax] 57h +
xor eax eax +
jmp loc_1004EAF  +
push edi  +
jmp ds:off_1004EB4[ebx*4]  +
mov edi 168h +
jmp loc_1004E6B  +
push 64h  +
pop edi  +
jmp loc_1004E6B  +
push 20h  +
jmp loc_1004E45  +
push 38h  +
jmp loc_1004E45  +
mov edi 818h +
jmp loc_1004E6B  +
push 44h  +
jmp loc_1004E45  +
push 1Ch  +
jmp loc_1004E45  +
push 40h  +
jmp loc_1004E45  +
push 10h  +
jmp loc_1004E45  +
push 24h  +
jmp loc_1004E45  +
push esi  +
push edi  +
call SnmpUtilMemAlloc  +
mov esi eax +
test esi esi +
jnz loc_1004E83  +
mov eax [ebp+arg_4] +
mov dword ptr [eax] 8 +
jmp loc_1004EA1  +
push edi  +
push ebx  +
push esi  +
mov [esi+4] esi +
mov [esi] esi +
call sub_100489F  +
mov edi eax +
test edi edi +
jz loc_1004EA5  +
push esi  +
call sub_1003E22  +
mov eax [ebp+arg_4] +
mov [eax] edi +
xor eax eax +
jmp loc_1004EAD  +
mov eax [ebp+arg_4] +
and dword ptr [eax] 0 +
mov eax esi +
pop esi  +
pop edi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
mov eax dword_10060F0 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
xor ebx ebx +
lea eax [ebp+pSid] +
push eax  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push [ebp+nSubAuthority1]  +
lea eax [ebp+pIdentifierAuthority] +
push 20h  +
push 2  +
push eax  +
mov [ebp+pIdentifierAuthority.Value] bl +
mov [ebp+pIdentifierAuthority.Value+1] bl +
mov [ebp+pIdentifierAuthority.Value+2] bl +
mov [ebp+pIdentifierAuthority.Value+3] bl +
mov [ebp+pIdentifierAuthority.Value+4] bl +
mov [ebp+pIdentifierAuthority.Value+5] 5 +
call ds:AllocateAndInitializeSid  +
mov [ebp+var_10] eax +
cmp eax ebx +
jz loc_1004F6A  +
lea eax [ebp+var_10] +
push eax  +
push [ebp+pSid]  +
push ebx  +
call ds:CheckTokenMembership  +
test eax eax +
jnz loc_1004F58  +
mov [ebp+var_10] ebx +
push [ebp+pSid]  +
call ds:FreeSid  +
cmp [ebp+var_10] ebx +
jz loc_1004F6A  +
mov al 1 +
jmp loc_1004F6C  +
xor al al +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop ebx  +
call sub_1003816  +
leave   +
retn 4  +
***
test al al +
jnz loc_1004F9F  +
push 22Ch  +
call sub_1004EF9  +
test al al +
jnz loc_1004F9F  +
xor eax eax +
retn   +
xor eax eax +
inc eax  +
retn   +
***
