sub [edx-1F74E83Ah] bl +
retn 874Dh  +
***
jmp loc_1005A4D  +
add ch al +
add eax [ecx] +
cmc   +
xlat   +
imul edi [ebx] +
xchg eax ecx +
retf 9379h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
mov ecx [ebp+arg_0] +
xor edx edx +
mov [ebp+var_4] edx +
cmp ecx edx +
jz loc_1009D1E  +
mov eax [ebp+arg_4] +
cmp eax edx +
jz loc_1009D1E  +
push ebx  +
push esi  +
push edi  +
mov ebx offset ValueName +
push ebx  +
mov edi offset aSoftwareMicr_0 +
push edi  +
mov esi 80000002h +
mov [ecx] edx +
push esi  +
mov [eax] edx +
call sub_100DD70  +
push offset aMustreboot  +
push edi  +
push esi  +
mov [ebp+var_8] eax +
call sub_100DD70  +
cmp [ebp+var_8] 1 +
mov [ebp+var_C] eax +
jnz loc_1009CDA  +
push ebx  +
push edi  +
push esi  +
call sub_100E063  +
mov ebx [ebp+arg_0] +
mov [ebx] eax +
test eax eax +
jz loc_1009C2F  +
push 20h  +
push eax  +
call sub_100E44A  +
test eax eax +
jnz loc_1009C73  +
call ds:GetLastError  +
mov ebx 80070000h +
test eax eax +
jle loc_1009C47  +
and eax 0FFFFh +
or eax ebx +
test eax eax +
jge loc_1009C5F  +
call ds:GetLastError  +
test eax eax +
jle loc_1009C5A  +
and eax 0FFFFh +
or eax ebx +
mov [ebp+var_4] eax +
jmp loc_1009C66  +
mov [ebp+var_4] 80004005h +
cmp [ebp+var_4] 0 +
mov ebx [ebp+arg_0] +
jl loc_1009CF6  +
mov eax [ebx] +
xor ecx ecx +
cmp cx [eax] +
jnz loc_1009C91  +
push offset aExtractsetting  +
push 1  +
mov [ebp+var_4] 80300008h +
call sub_1011312  +
pop ecx  +
pop ecx  +
cmp [ebp+var_4] 0 +
jl loc_1009CF6  +
cmp [ebp+var_C] 1 +
jnz loc_1009CB4  +
push offset aMustreboot  +
push edi  +
push esi  +
call sub_100E081  +
mov ecx [ebp+arg_4] +
neg eax  +
sbb eax eax +
neg eax  +
mov [ecx] eax +
mov eax [ebp+arg_4] +
cmp dword ptr [eax] 1 +
mov eax offset aTrue +
jz loc_1009CC6  +
mov eax offset aFalse +
push eax  +
push dword ptr [ebx]  +
push offset aExtractsetti_0  +
push 0  +
call sub_1011312  +
add esp 10h +
jmp loc_1009CF0  +
cmp eax 1 +
jnz loc_1009D16  +
push offset aExtractsetti_1  +
push 2  +
call sub_1011312  +
mov ebx [ebp+arg_0] +
pop ecx  +
pop ecx  +
cmp [ebp+var_4] 0 +
jge loc_1009D16  +
mov eax [ebx] +
test eax eax +
jz loc_1009D13  +
push eax  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
test eax eax +
jz loc_1009D13  +
and dword ptr [ebx] 0 +
and dword ptr [ebx] 0 +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
jmp locret_1009D23  +
mov eax 80070057h +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 24h +
mov eax dword_101908C +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
push edi  +
mov esi ecx +
xor ebx ebx +
push 6  +
xor eax eax +
mov [ebp+var_24] ebx +
pop ecx  +
lea edi [ebp+var_20] +
stos   +
stos   +
cmp esi ebx +
jnz loc_1009D5F  +
mov eax 80070057h +
jmp loc_1009DC6  +
push 0Eh  +
lea eax [ebp+var_24] +
push eax  +
mov [esi] ebx +
call sub_100E914  +
mov edi eax +
cmp edi ebx +
jl loc_1009DC4  +
lea eax [ebp+var_24] +
push eax  +
push offset aGeneratecomput  +
push ebx  +
call sub_1011312  +
add esp 0Ch +
lea eax [ebp+var_24] +
push eax  +
call sub_100E6F6  +
mov [esi] eax +
cmp eax ebx +
jnz loc_1009DC4  +
mov ebx ds:GetLastError +
call ebx  +
mov edi 0FFFFh +
mov esi 80070000h +
test eax eax +
jle loc_1009DAF  +
and eax edi +
or eax esi +
test eax eax +
jge loc_1009DBF  +
call ebx  +
test eax eax +
jle loc_1009DBB  +
and eax edi +
or eax esi +
mov edi eax +
jmp loc_1009DC4  +
mov edi 80004005h +
mov eax edi +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100D691  +
leave   +
retn   +
***
test edi edi +
jz loc_1009E77  +
xor eax eax +
cmp ax [edi] +
jz loc_1009E77  +
test esi esi +
jz loc_1009E77  +
and [esi] eax +
mov eax edi +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_1009DFC  +
sub eax edx +
sar eax 1 +
cmp eax 0Fh +
ja loc_1009E64  +
push 2  +
push edi  +
call DnsValidateName_W  +
sub eax 0 +
jz loc_1009E5C  +
sub eax 7Bh +
push edi  +
jz loc_1009E55  +
sub eax 24D9h +
jz loc_1009E46  +
sub eax 4 +
jz loc_1009E3F  +
dec eax  +
jz loc_1009E38  +
push offset aValidatecomput  +
jmp loc_1009E6A  +
push offset aValidatecomp_0  +
jmp loc_1009E6A  +
push offset aValidatecomp_1  +
jmp loc_1009E6A  +
push offset aValidatecomp_2  +
mov dword ptr [esi] 1 +
push 2  +
jmp loc_1009E6C  +
push offset aValidatecomp_3  +
jmp loc_1009E6A  +
mov dword ptr [esi] 1 +
jmp loc_1009E74  +
push edi  +
push offset aValidatecomp_4  +
push 1  +
call sub_1011312  +
add esp 0Ch +
xor eax eax +
retn   +
mov eax 80070057h +
retn   +
***
mov edi edi +
push ebx  +
push edi  +
mov edi eax +
xor ebx ebx +
cmp edi ebx +
jz loc_1009F55  +
xor eax eax +
cmp ax [edi] +
jz loc_1009F55  +
push esi  +
push edi  +
push offset aSetauditcomput  +
push ebx  +
call sub_1011312  +
mov esi ds:SetComputerNameExW +
add esp 0Ch +
push edi  +
push 4  +
call esi  +
cmp eax 1 +
jnz loc_1009F0F  +
push edi  +
push 5  +
call esi  +
cmp eax 1 +
jnz loc_1009ED6  +
push offset aSetauditcomp_0  +
push ebx  +
call sub_1011312  +
pop ecx  +
pop ecx  +
jmp loc_1009F50  +
mov ebx ds:GetLastError +
call ebx  +
mov edi 0FFFFh +
mov esi 80070000h +
test eax eax +
jle loc_1009EF2  +
and eax edi +
or eax esi +
test eax eax +
jge loc_1009F02  +
call ebx  +
test eax eax +
jle loc_1009EFE  +
and eax edi +
or eax esi +
mov ebx eax +
jmp loc_1009F07  +
mov ebx 80004005h +
push ebx  +
push offset aSetauditcomp_1  +
jmp loc_1009F46  +
mov ebx ds:GetLastError +
call ebx  +
mov edi 0FFFFh +
mov esi 80070000h +
test eax eax +
jle loc_1009F2B  +
and eax edi +
or eax esi +
test eax eax +
jge loc_1009F3B  +
call ebx  +
test eax eax +
jle loc_1009F37  +
and eax edi +
or eax esi +
mov ebx eax +
jmp loc_1009F40  +
mov ebx 80004005h +
push ebx  +
push offset aSetauditcomp_2  +
push 1  +
call sub_1011312  +
add esp 0Ch +
mov eax ebx +
pop esi  +
jmp loc_1009F5A  +
mov eax 80070057h +
pop edi  +
pop ebx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push esi  +
push edi  +
xor edi edi +
push offset aProcessingAudi  +
push edi  +
mov [ebp+lpMem] edi +
mov [ebp+var_C] edi +
call sub_1011312  +
mov esi [ebp+arg_4] +
pop ecx  +
pop ecx  +
cmp esi edi +
jnz loc_1009F92  +
mov eax 80070057h +
jmp loc_100A089  +
push ebx  +
push 4  +
pop ebx  +
lea eax [ebp+var_C] +
push eax  +
lea eax [ebp+lpMem] +
push eax  +
mov [esi] ebx +
call sub_1009BB5  +
cmp eax edi +
mov [ebp+var_8] eax +
jl loc_100A083  +
mov edi [ebp+lpMem] +
xor eax eax +
cmp edi eax +
jz loc_100A06C  +
mov [ebp+var_10] eax +
mov [ebp+lpMem] eax +
mov ecx offset asc_1001D84 +
mov eax edi +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_1009FEE  +
test dx dx +
jz loc_1009FEA  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_1009FEE  +
add eax ebx +
add ecx ebx +
test dx dx +
jnz loc_1009FCA  +
xor eax eax +
jmp loc_1009FF3  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
mov ebx ds:HeapFree +
test eax eax +
jnz loc_100A01C  +
lea ecx [ebp+lpMem] +
call sub_1009D2C  +
test eax eax +
jl loc_100A01C  +
push edi  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ebx  +
mov edi [ebp+lpMem] +
and [ebp+lpMem] 0 +
lea esi [ebp+var_10] +
call sub_1009DDA  +
mov [ebp+var_8] eax +
test eax eax +
jl loc_100A052  +
cmp [ebp+var_10] 1 +
jnz loc_100A03D  +
mov eax edi +
call sub_1009E82  +
mov [ebp+var_8] eax +
jmp loc_100A052  +
push offset aAuditcomputern  +
push 1  +
mov [ebp+var_8] 80300006h +
call sub_1011312  +
pop ecx  +
pop ecx  +
cmp [ebp+lpMem] 0 +
jz loc_100A066  +
push [ebp+lpMem]  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ebx  +
mov esi [ebp+arg_4] +
mov eax [ebp+var_C] +
cmp [ebp+var_8] 0 +
jl loc_100A080  +
dec eax  +
neg eax  +
sbb eax eax +
and eax 0FFFFFFFEh +
inc eax  +
inc eax  +
mov [esi] eax +
jmp loc_100A085  +
push 4  +
pop ebx  +
mov [esi] ebx +
mov eax [ebp+var_8] +
pop ebx  +
pop edi  +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov ecx [ebp+arg_0] +
xor eax eax +
mov [ebp+var_C] eax +
mov [ebp+var_8] eax +
cmp ecx eax +
jz loc_100A1B5  +
cmp ebx eax +
jz loc_100A1B5  +
push esi  +
push edi  +
push offset aSize  +
mov edi offset aSoftwareMicr_1 +
push edi  +
mov [ecx] eax +
mov esi 80000002h +
push esi  +
mov [ebx] eax +
mov [ebx+4] eax +
call sub_100DD70  +
push offset aExtend  +
push edi  +
push esi  +
mov [ebp+var_10] eax +
call sub_100DD70  +
mov [ebp+var_4] eax +
xor eax eax +
inc eax  +
cmp [ebp+var_4] eax +
jnz loc_100A102  +
push offset aExtend  +
push edi  +
push esi  +
call sub_100E081  +
mov [ebp+var_8] eax +
xor eax eax +
inc eax  +
cmp [ebp+var_10] eax +
jnz loc_100A184  +
cmp [ebp+var_4] eax +
jnz loc_100A129  +
cmp [ebp+var_8] 0 +
jz loc_100A129  +
push offset aExtractsetti_2  +
push eax  +
call sub_1011312  +
mov [ebp+var_C] 80300009h +
jmp loc_100A1AC  +
push offset aSize  +
push edi  +
push esi  +
call sub_100E081  +
mov esi eax +
xor edi edi +
cmp esi edi +
jnz loc_100A141  +
cmp edi edi +
jz loc_100A16F  +
mov eax [ebp+arg_0] +
push edi  +
push 100000h  +
push edi  +
push esi  +
mov dword ptr [eax] 1 +
call __allmul  +
push edi  +
push esi  +
push offset aExtractsetti_3  +
push 0  +
mov [ebx] eax +
mov [ebx+4] edx +
call sub_1011312  +
add esp 10h +
jmp loc_100A1AE  +
push offset aExtractsetti_4  +
push 1  +
call sub_1011312  +
mov [ebp+var_C] 80300008h +
jmp loc_100A1AC  +
cmp [ebp+var_4] eax +
jnz loc_100A1AE  +
xor ecx ecx +
cmp [ebp+var_8] ecx +
jz loc_100A1A1  +
mov edx [ebp+arg_0] +
mov [edx] eax +
mov [ebx] ecx +
mov [ebx+4] ecx +
push offset aExtractsetti_5  +
jmp loc_100A1A6  +
push offset aExtractsetti_6  +
push ecx  +
call sub_1011312  +
pop ecx  +
pop ecx  +
mov eax [ebp+var_C] +
pop edi  +
pop esi  +
jmp locret_100A1BA  +
mov eax 80070057h +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 210h +
mov eax dword_101908C +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
push edi  +
xor ebx ebx +
push 204h  +
lea eax [ebp+var_208] +
push ebx  +
push eax  +
mov edi ecx +
mov esi edx +
mov dword ptr [ebp+Buffer] ebx +
call memset  +
add esp 0Ch +
cmp edi ebx +
jz loc_100A29E  +
cmp esi ebx +
jz loc_100A29E  +
or dword ptr [edi] 0FFFFFFFFh +
push 104h  +
lea eax [ebp+Buffer] +
push eax  +
mov [esi] ebx +
mov [esi+4] ebx +
call ds:GetWindowsDirectoryW  +
test eax eax +
jz loc_100A269  +
mov eax dword ptr [ebp+Buffer] +
cmp ax 61h +
jb loc_100A23C  +
cmp ax 7Ah +
jbe loc_100A245  +
lea ecx [eax-41h] +
cmp cx 19h +
ja loc_100A269  +
push 3Ah  +
pop ecx  +
cmp cx [ebp-20Ah] +
jnz loc_100A269  +
push 5Ch  +
pop ecx  +
cmp cx word ptr [ebp+var_208] +
jnz loc_100A269  +
push esi  +
push edi  +
push eax  +
call sub_100F221  +
test eax eax +
jnz loc_100A29A  +
mov ebx ds:GetLastError +
call ebx  +
mov edi 0FFFFh +
mov esi 80070000h +
test eax eax +
jle loc_100A285  +
and eax edi +
or eax esi +
test eax eax +
jge loc_100A293  +
call ebx  +
test eax eax +
jle loc_100A2A3  +
and eax edi +
or eax esi +
jmp loc_100A2A3  +
mov eax 80004005h +
jmp loc_100A2A3  +
mov eax ebx +
jmp loc_100A2A3  +
mov eax 80070057h +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100D691  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 48h +
push esi  +
push edi  +
xor edi edi +
push 44h  +
mov esi eax +
lea eax [ebp+var_44] +
push edi  +
push eax  +
mov [ebp+var_48] edi +
call memset  +
add esp 0Ch +
cmp esi edi +
jl loc_100A37D  +
mov ecx [ebp+arg_0] +
mov eax [ebp+arg_4] +
cmp ecx edi +
jnz loc_100A2F1  +
cmp eax edi +
jz loc_100A37D  +
mov [ebp+var_3C] eax +
mov eax [ebp+arg_8] +
mov [ebp+var_40] ecx +
mov ecx [ebp+arg_C] +
mov [ebp+var_30] 8 +
mov [ebp+var_48] esi +
mov [ebp+var_38] 3 +
cmp eax edi +
jnz loc_100A31C  +
cmp ecx edi +
jnz loc_100A31C  +
mov [ebp+var_20] 1 +
jmp loc_100A322  +
mov [ebp+var_28] eax +
mov [ebp+var_24] ecx +
push edi  +
push edi  +
call ds:CoInitializeEx  +
mov esi eax +
cmp esi edi +
jl loc_100A369  +
lea eax [ebp+var_48] +
push eax  +
call sub_1013C3D  +
mov esi eax +
cmp esi edi +
jl loc_100A34E  +
push offset aPerformextendo  +
push edi  +
call sub_1011312  +
pop ecx  +
pop ecx  +
jmp loc_100A361  +
push esi  +
push offset aPerformexten_0  +
push 2  +
call sub_1011312  +
xor esi esi +
add esp 0Ch +
inc esi  +
call ds:CoUninitialize  +
jmp loc_100A379  +
push esi  +
push offset aPerformexten_1  +
push 1  +
call sub_1011312  +
add esp 0Ch +
mov eax esi +
jmp loc_100A382  +
mov eax 80070057h +
pop edi  +
pop esi  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push edi  +
xor edi edi +
push offset aProcessingExte  +
push edi  +
mov [ebp+var_4] edi +
mov [ebp+var_C] edi +
mov [ebp+var_8] edi +
call sub_1011312  +
mov eax [ebp+arg_4] +
pop ecx  +
pop ecx  +
cmp eax edi +
jnz loc_100A3BF  +
mov eax 80070057h +
jmp loc_100A480  +
push ebx  +
mov dword ptr [eax] 4 +
push esi  +
lea eax [ebp+var_4] +
push eax  +
lea ebx [ebp+var_C] +
call sub_100A094  +
mov esi eax +
cmp esi edi +
jl loc_100A474  +
cmp [ebp+var_4] 1 +
jnz loc_100A470  +
or [ebp+var_4] 0FFFFFFFFh +
mov [ebp+var_14] edi +
mov [ebp+var_10] edi +
cmp [ebp+var_C] edi +
jnz loc_100A40A  +
cmp [ebp+var_8] edi +
jnz loc_100A40A  +
push offset aExtendospartit  +
push edi  +
call sub_1011312  +
pop ecx  +
pop ecx  +
jmp loc_100A41E  +
push [ebp+var_8]  +
push [ebp+var_C]  +
push offset aExtendospart_0  +
push edi  +
call sub_1011312  +
add esp 10h +
lea edx [ebp+var_14] +
lea ecx [ebp+var_4] +
call sub_100A1C3  +
mov esi eax +
cmp esi edi +
jl loc_100A474  +
push [ebp+var_10]  +
push [ebp+var_14]  +
push [ebp+var_4]  +
push offset aExtendospart_1  +
push edi  +
call sub_1011312  +
mov eax [ebp+var_4] +
add esp 14h +
push [ebp+var_8]  +
push [ebp+var_C]  +
push [ebp+var_10]  +
push [ebp+var_14]  +
call sub_100A2B7  +
mov esi eax +
cmp esi edi +
jge loc_100A477  +
push esi  +
push offset aExtendospart_2  +
push 1  +
call sub_1011312  +
add esp 0Ch +
cmp esi edi +
jge loc_100A477  +
push 4  +
pop edi  +
mov eax [ebp+arg_4] +
mov [eax] edi +
mov eax esi +
pop esi  +
pop ebx  +
pop edi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ebp+8] 2000000h +
jz loc_100A4AA  +
cmp dword ptr [ebp+8] 3000000h +
jz loc_100A4A5  +
xor eax eax +
jmp loc_100A4AD  +
push 2  +
pop eax  +
jmp loc_100A4AD  +
xor eax eax +
inc eax  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push eax  +
call sub_101116C  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push esi  +
mov esi offset loc_100A48A +
push esi  +
call sub_1013F41  +
push esi  +
call sub_1013C97  +
pop esi  +
retn   +
***
push 0  +
call sub_1013C97  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax [ebp+arg_4] +
and [ebp+var_4] 0 +
test eax eax +
jnz loc_100A50D  +
mov eax 80070057h +
jmp locret_100A769  +
and dword ptr [eax] 0 +
push ebx  +
push esi  +
push edi  +
push offset Src  +
call sub_100FDED  +
mov ebx ds:GetLastError +
mov [ebp+var_8] eax +
mov edi 0FFFFh +
mov esi 80070000h +
test eax eax +
jnz loc_100A56F  +
call ebx  +
test eax eax +
jle loc_100A540  +
and eax edi +
or eax esi +
test eax eax +
jge loc_100A551  +
call ebx  +
test eax eax +
jle loc_100A54C  +
and eax edi +
or eax esi +
mov [ebp+var_4] eax +
jmp loc_100A558  +
mov [ebp+var_4] 80004005h +
push [ebp+var_4]  +
push offset Src  +
push offset aCouldnTExpandS  +
push 1  +
call sub_1011312  +
add esp 10h +
xor eax eax +
push eax  +
push eax  +
push eax  +
push eax  +
push eax  +
push eax  +
push offset aSetupugc  +
call WdsInitialize  +
test eax eax +
jnz loc_100A5BB  +
call ebx  +
test eax eax +
jle loc_100A591  +
and eax edi +
or eax esi +
test eax eax +
jge loc_100A5A2  +
call ebx  +
test eax eax +
jle loc_100A59D  +
and eax edi +
or eax esi +
mov [ebp+var_4] eax +
jmp loc_100A5A9  +
mov [ebp+var_4] 80004005h +
push [ebp+var_4]  +
push offset aCouldnTInitial  +
push 1  +
call sub_1011312  +
add esp 0Ch +
cmp [ebp+var_4] 0 +
jl loc_100A74B  +
cmp [ebp+lpFileName] 1 +
jnz loc_100A664  +
push [ebp+var_8]  +
call sub_100FD3E  +
cmp eax 1 +
jnz loc_100A626  +
push 0  +
push [ebp+var_8]  +
push 9  +
call WdsCreateBlackboard  +
mov ecx [ebp+arg_4] +
mov [ecx] eax +
test eax eax +
jnz loc_100A74B  +
call ebx  +
test eax eax +
jle loc_100A601  +
and eax edi +
or eax esi +
test eax eax +
jge loc_100A612  +
call ebx  +
test eax eax +
jle loc_100A60D  +
and eax edi +
or eax esi +
mov [ebp+var_4] eax +
jmp loc_100A619  +
mov [ebp+var_4] 80004005h +
push [ebp+var_4]  +
push [ebp+var_8]  +
push offset aCouldnTOpenBla  +
jmp loc_100A655  +
call ebx  +
test eax eax +
jle loc_100A632  +
and eax edi +
or eax esi +
test eax eax +
jge loc_100A643  +
call ebx  +
test eax eax +
jle loc_100A63E  +
and eax edi +
or eax esi +
mov [ebp+var_4] eax +
jmp loc_100A64A  +
mov [ebp+var_4] 80004005h +
push [ebp+var_4]  +
push [ebp+var_8]  +
push offset aCouldnTFindBla  +
push 1  +
call sub_1011312  +
add esp 10h +
jmp loc_100A74B  +
push offset aWindirPanthe_0  +
call sub_100FDED  +
mov [ebp+lpFileName] eax +
test eax eax +
jnz loc_100A699  +
call ebx  +
test eax eax +
jle loc_100A681  +
and eax edi +
or eax esi +
test eax eax +
jge loc_100A692  +
call ebx  +
test eax eax +
jle loc_100A68D  +
and eax edi +
or eax esi +
mov [ebp+var_4] eax +
jmp loc_100A699  +
mov [ebp+var_4] 80004005h +
cmp [ebp+var_4] 0 +
jl loc_100A733  +
push [ebp+lpFileName]  +
call sub_100FB35  +
test eax eax +
jnz loc_100A6DF  +
push [ebp+lpFileName]  +
call sub_100F735  +
test eax eax +
jnz loc_100A6DF  +
call ebx  +
test eax eax +
jle loc_100A6C7  +
and eax edi +
or eax esi +
test eax eax +
jge loc_100A6D8  +
call ebx  +
test eax eax +
jle loc_100A6D3  +
and eax edi +
or eax esi +
mov [ebp+var_4] eax +
jmp loc_100A6DF  +
mov [ebp+var_4] 80004005h +
cmp [ebp+var_4] 0 +
jl loc_100A733  +
push 0  +
push [ebp+var_8]  +
push 5  +
call WdsCreateBlackboard  +
mov ecx [ebp+arg_4] +
mov [ecx] eax +
test eax eax +
jnz loc_100A733  +
call ebx  +
test eax eax +
jle loc_100A706  +
and eax edi +
or eax esi +
test eax eax +
jge loc_100A717  +
call ebx  +
test eax eax +
jle loc_100A712  +
and eax edi +
or eax esi +
mov [ebp+var_4] eax +
jmp loc_100A71E  +
mov [ebp+var_4] 80004005h +
push [ebp+var_4]  +
push [ebp+var_8]  +
push offset aCouldnTCreateN  +
push 1  +
call sub_1011312  +
add esp 10h +
cmp [ebp+lpFileName] 0 +
jz loc_100A74B  +
push [ebp+lpFileName]  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
cmp [ebp+var_8] 0 +
pop edi  +
pop esi  +
pop ebx  +
jz loc_100A766  +
push [ebp+var_8]  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
mov eax [ebp+var_4] +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
push edi  +
push offset aWindirPanthe_0  +
xor esi esi +
call sub_100FDED  +
mov [ebp+lpMem] eax +
test eax eax +
jz loc_100A7DD  +
push eax  +
call sub_1010AF6  +
test eax eax +
jnz loc_100A7C9  +
mov ebx ds:GetLastError +
call ebx  +
mov edi 0FFFFh +
mov esi 80070000h +
test eax eax +
jle loc_100A7B4  +
and eax edi +
or eax esi +
test eax eax +
jge loc_100A7C4  +
call ebx  +
test eax eax +
jle loc_100A7C0  +
and eax edi +
or eax esi +
mov esi eax +
jmp loc_100A7C9  +
mov esi 80004005h +
push [ebp+lpMem]  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
jmp loc_100A80E  +
mov ebx ds:GetLastError +
call ebx  +
mov edi 0FFFFh +
mov esi 80070000h +
test eax eax +
jle loc_100A7F9  +
and eax edi +
or eax esi +
test eax eax +
jge loc_100A809  +
call ebx  +
test eax eax +
jle loc_100A805  +
and eax edi +
or eax esi +
mov esi eax +
jmp loc_100A80E  +
mov esi 80004005h +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
mov ebx [ebp+arg_4] +
push esi  +
xor esi esi +
push edi  +
mov [ebp+var_4] esi +
cmp ebx esi +
jz loc_100A8F8  +
mov edi [ebp+arg_8] +
cmp edi esi +
jz loc_100A8F8  +
mov [edi] esi +
mov [ebx] esi +
mov eax offset aRunasynchronou +
cmp [ebp+lpSubKey] esi +
jz loc_100A851  +
mov eax offset aRunsynchronous +
push eax  +
push offset aSoftwareMicr_2  +
call sub_1010B11  +
mov [ebp+lpSubKey] eax +
cmp eax esi +
jnz loc_100A8A5  +
mov ebx ds:GetLastError +
call ebx  +
mov edi 0FFFFh +
mov esi 80070000h +
test eax eax +
jle loc_100A87F  +
and eax edi +
or eax esi +
test eax eax +
jge loc_100A890  +
call ebx  +
test eax eax +
jle loc_100A88B  +
and eax edi +
or eax esi +
mov [ebp+var_4] eax +
jmp loc_100A897  +
mov [ebp+var_4] 80004005h +
cmp [ebp+var_4] 0 +
jl loc_100A8F3  +
mov ebx [ebp+arg_4] +
mov edi [ebp+arg_8] +
xor esi esi +
push esi  +
push [ebp+lpSubKey]  +
mov esi 80000002h +
push esi  +
call sub_100DD70  +
cmp eax 1 +
jnz loc_100A8DB  +
and [ebp+arg_4] 0 +
lea eax [ebp+arg_4] +
push eax  +
push [ebp+lpSubKey]  +
push esi  +
call sub_100B832  +
mov ecx [ebp+arg_4] +
mov [edi] ecx +
xor ecx ecx +
test eax eax +
setnl cl  +
mov [ebp+var_4] eax +
mov [ebx] ecx +
cmp [ebp+lpSubKey] 0 +
jz loc_100A8F3  +
push [ebp+lpSubKey]  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
mov eax [ebp+var_4] +
jmp loc_100A8FD  +
mov eax 80070057h +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
mov edx [ebp+arg_4] +
push ebx  +
xor ebx ebx +
mov [ebp+dwErrCode] ebx +
cmp edx ebx +
jz loc_100AB45  +
mov ecx [ebp+arg_8] +
cmp ecx ebx +
jz loc_100AB45  +
mov eax [ebp+arg_C] +
cmp eax ebx +
jz loc_100AB45  +
cmp [ebp+arg_14] ebx +
jz loc_100AB45  +
mov [edx] ebx +
mov [ecx] ebx +
mov ecx dword_1019004 +
mov [eax] ecx +
mov eax [ebp+lpMem] +
push 0Ch  +
pop ecx  +
mov [eax] bl +
inc eax  +
dec ecx  +
jnz loc_100A953  +
lea eax [ebp+dwErrCode] +
push eax  +
push [ebp+arg_14]  +
call sub_100B612  +
cmp eax ebx +
mov [ebp+var_10] eax +
jl loc_100AB40  +
cmp [ebp+dwErrCode] ebx +
jz loc_100AB40  +
mov eax off_1019008 +
push esi  +
mov esi dword_1019004 +
push edi  +
mov [ebp+var_C] eax +
push offset aPath  +
mov [ebp+var_20] ebx +
xor eax eax +
lea edi [ebp+var_1C] +
stos   +
push ebx  +
push [ebp+dwErrCode]  +
stos   +
call sub_100E063  +
push offset aDescription  +
push ebx  +
push [ebp+dwErrCode]  +
mov [ebp+var_8] eax +
call sub_100E063  +
mov edi eax +
lea eax [ebp+var_20] +
push eax  +
push offset aCredentials  +
push [ebp+dwErrCode]  +
mov [ebp+var_14] edi +
call sub_100B715  +
cmp edi ebx +
jz loc_100A9DB  +
push edi  +
push offset aFoundRunComman  +
push ebx  +
call sub_1011312  +
add esp 0Ch +
mov ecx offset aIsSpecified +
mov eax offset aIsNotSpecified +
mov edx ecx +
cmp [ebp+var_1C] ebx +
jnz loc_100A9EE  +
mov edx eax +
cmp [ebp+var_20] ebx +
jz loc_100A9F5  +
mov eax ecx +
push edx  +
push eax  +
push offset aFoundRunComm_0  +
push ebx  +
call sub_1011312  +
add esp 10h +
cmp [ebp+lpString1] 1 +
jnz loc_100AA9D  +
push offset aWillreboot  +
push ebx  +
push [ebp+dwErrCode]  +
call sub_100E063  +
mov [ebp+lpString1] eax +
cmp eax ebx +
jz loc_100AA89  +
push 20h  +
push eax  +
mov [ebp+arg_14] ebx +
call sub_100E44A  +
xor edi edi +
cmp [ebp+arg_14] ebx +
jnz loc_100AA89  +
push 0FFFFFFFFh  +
push off_1019000[edi]  +
push 0FFFFFFFFh  +
push [ebp+lpString1]  +
push 1  +
push 409h  +
call ds:CompareStringW  +
dec eax  +
dec eax  +
jnz loc_100AA6A  +
mov eax off_1019008[edi] +
mov esi dword_1019004[edi] +
mov [ebp+var_C] eax +
mov [ebp+arg_14] 1 +
add edi 0Ch +
cmp edi 24h +
jb loc_100AA31  +
cmp [ebp+arg_14] ebx +
jnz loc_100AA89  +
push [ebp+lpString1]  +
push offset aFoundInvalidRe  +
push 1  +
call sub_1011312  +
add esp 0Ch +
push [ebp+var_C]  +
push offset aFoundRunComm_1  +
push ebx  +
call sub_1011312  +
mov edi [ebp+var_14] +
add esp 0Ch +
cmp [ebp+var_8] ebx +
jz loc_100AB04  +
push [ebp+var_8]  +
push offset aFoundRunComm_2  +
push ebx  +
call sub_1011312  +
mov eax [ebp+arg_4] +
mov ecx [ebp+var_8] +
mov [eax] ecx +
mov eax [ebp+arg_8] +
mov [eax] edi +
mov eax [ebp+arg_C] +
add esp 0Ch +
mov [eax] esi +
cmp [ebp+var_1C] ebx +
jnz loc_100AAED  +
cmp [ebp+var_20] ebx +
jnz loc_100AAD4  +
cmp [ebp+var_18] ebx +
jz loc_100AAED  +
push offset aFoundRunComm_3  +
push 1  +
call sub_1011312  +
pop ecx  +
pop ecx  +
lea eax [ebp+var_20] +
push eax  +
call sub_1010C63  +
jmp loc_100AB35  +
mov edi [ebp+lpMem] +
lea esi [ebp+var_20] +
movs   +
movs   +
push 0Ch  +
movs   +
pop ecx  +
lea eax [ebp+var_20] +
mov [eax] bl +
inc eax  +
dec ecx  +
jnz loc_100AAFC  +
jmp loc_100AB35  +
cmp edi ebx +
jz loc_100AB17  +
push edi  +
push ebx  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
lea eax [ebp+var_20] +
push eax  +
call sub_1010C63  +
push offset aFoundRunComm_4  +
push 1  +
call sub_1011312  +
pop ecx  +
pop ecx  +
mov [ebp+var_10] 80300007h +
push [ebp+dwErrCode]  +
call ds:RegCloseKey  +
pop edi  +
pop esi  +
mov eax [ebp+var_10] +
jmp loc_100AB4A  +
mov eax 80070057h +
pop ebx  +
leave   +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 82Ch +
mov eax dword_101908C +
xor eax ebp +
mov [ebp-4] eax +
mov eax [ebp+10h] +
push ebx  +
mov ebx [ebp+0Ch] +
push esi  +
push edi  +
mov edi [ebp+8] +
xor esi esi +
push 80Ch  +
mov [ebp-818h] eax +
lea eax [ebp-810h] +
push esi  +
push eax  +
mov [ebp-824h] edi +
mov [ebp-814h] esi +
call memset  +
add esp 0Ch +
mov [ebp-82Ch] esi +
mov [ebp-828h] esi +
mov dword ptr [ebp-81Ch] 1 +
cmp edi esi +
jz loc_100ADF3  +
push edi  +
call WdsValidBlackboard  +
test eax eax +
jz loc_100ADF3  +
cmp ebx esi +
jz loc_100ADF3  +
xor eax eax +
cmp ax [ebx] +
jz loc_100ADF3  +
cmp [ebp-818h] esi +
jz loc_100ADF3  +
lea eax [ebp-81Ch] +
push eax  +
push ebx  +
push edi  +
call sub_10118E4  +
mov edi eax +
cmp edi esi +
jl loc_100AD8A  +
lea eax [ebp-82Ch] +
push eax  +
push ebx  +
push dword ptr [ebp-824h]  +
call sub_10120C8  +
mov edi eax +
cmp edi esi +
jl loc_100AD8A  +
cmp [ebp-81Ch] esi +
jnz loc_100AC7B  +
cmp dword ptr [ebp-82Ch] 1 +
jnz loc_100AC7B  +
lea eax [ebp-828h] +
push eax  +
call sub_1012C32  +
mov edi eax +
cmp edi esi +
jl loc_100AD8A  +
cmp [ebp-828h] esi +
jnz loc_100AC7B  +
push offset aCommandIsAssoc  +
push esi  +
call sub_1011312  +
pop ecx  +
pop ecx  +
call sub_1012CFA  +
mov edi eax +
cmp edi esi +
jl loc_100AC6D  +
push offset aSuccessfullySt  +
push esi  +
jmp loc_100AC74  +
push offset aUnableToStartS  +
push 1  +
call sub_1011312  +
pop ecx  +
pop ecx  +
cmp edi esi +
jl loc_100AD8A  +
lea eax [ebp-814h] +
push eax  +
push ebx  +
push dword ptr [ebp-824h]  +
call sub_1011C84  +
mov edi eax +
cmp edi esi +
jl loc_100AD73  +
mov eax [ebp-818h] +
mov eax [eax+8] +
cmp eax esi +
jz loc_100ACDE  +
mov ecx ebx +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_100ACD5  +
cmp dx si +
jz loc_100ACD1  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_100ACD5  +
add eax 4 +
add ecx 4 +
cmp dx si +
jnz loc_100ACAF  +
xor eax eax +
jmp loc_100ACDA  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
cmp eax esi +
jnz loc_100ACE9  +
xor ecx ecx +
inc ecx  +
cmp [ebp-810h] ecx +
jnz loc_100ACF6  +
mov eax [ebp-818h] +
xor ecx ecx +
inc ecx  +
mov [eax] ecx +
jmp loc_100ACFE  +
mov eax [ebp-818h] +
mov [eax] esi +
cmp [ebp-814h] ecx +
jnz loc_100AD0E  +
mov [eax+4] ecx +
mov edi 30000Eh +
cmp [ebp-81Ch] esi +
jnz loc_100AD5B  +
mov eax offset aAsynchronously +
cmp [ebp-80Ch] esi +
jz loc_100AD28  +
mov eax offset aSynchronously +
push eax  +
lea eax [ebp-804h] +
push eax  +
push offset aFinishedExecut  +
push esi  +
call sub_1011312  +
add esp 10h +
cmp dword ptr [ebp-80Ch] 1 +
jnz loc_100AD5B  +
push dword ptr [ebp-808h]  +
push offset aProcessReturne  +
push esi  +
call sub_1011312  +
add esp 0Ch +
cmp dword ptr [ebp-814h] 1 +
jnz loc_100AD8A  +
push offset aMustRebootNow_  +
push esi  +
call sub_1011312  +
pop ecx  +
pop ecx  +
jmp loc_100AD8A  +
lea eax [ebp-804h] +
push eax  +
push edi  +
push offset aHitAnErrorHr0x  +
push 1  +
call sub_1011312  +
add esp 10h +
mov eax [ebp-818h] +
cmp [eax+0Ch] esi +
jz loc_100ADEF  +
cmp [ebp-81Ch] esi +
jnz loc_100ADEF  +
lea eax [ebp-820h] +
push eax  +
push ebx  +
push dword ptr [ebp-824h]  +
mov [ebp-820h] esi +
call sub_1011929  +
test eax eax +
jge loc_100ADC0  +
mov [ebp-820h] esi +
cmp edi esi +
jl loc_100ADE0  +
cmp [ebp-808h] esi +
jnz loc_100ADD1  +
xor esi esi +
inc esi  +
jmp loc_100ADE0  +
cmp dword ptr [ebp-820h] 2 +
jnz loc_100ADE0  +
mov esi [ebp-814h] +
mov eax [ebp-818h] +
push esi  +
push dword ptr [eax+0Ch]  +
call sub_100C9C4  +
mov eax edi +
jmp loc_100ADF8  +
mov eax 80070057h +
mov ecx [ebp-4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100D691  +
leave   +
retn 0Ch  +
***
mov edi edi +
push esi  +
push 1  +
push offset aCommandexecinp  +
push offset aSoftwareMicros  +
push 80000002h  +
xor esi esi +
call sub_100E126  +
test eax eax +
jnz loc_100AE62  +
push ebx  +
mov ebx ds:GetLastError +
push edi  +
call ebx  +
mov edi 0FFFFh +
mov esi 80070000h +
test eax eax +
jle loc_100AE4B  +
and eax edi +
or eax esi +
test eax eax +
jge loc_100AE5B  +
call ebx  +
test eax eax +
jle loc_100AE57  +
and eax edi +
or eax esi +
mov esi eax +
jmp loc_100AE60  +
mov esi 80004005h +
pop edi  +
pop ebx  +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
push ebx  +
push esi  +
push edi  +
mov ebx offset aCommandexecinp +
push ebx  +
mov edi offset aSoftwareMicros +
push edi  +
mov esi 80000002h +
push esi  +
call sub_100DD70  +
cmp eax 1 +
jnz loc_100AED4  +
push ebx  +
push edi  +
push esi  +
call sub_100DDFC  +
test eax eax +
jnz loc_100AED4  +
mov ebx ds:GetLastError +
call ebx  +
mov edi 0FFFFh +
mov esi 80070000h +
test eax eax +
jle loc_100AEBC  +
and eax edi +
or eax esi +
test eax eax +
jge loc_100AECD  +
call ebx  +
test eax eax +
jle loc_100AEC8  +
and eax edi +
or eax esi +
mov [ebp+var_4] eax +
jmp loc_100AED4  +
mov [ebp+var_4] 80004005h +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
cmp [ebp+hWnd] 0 +
jnz loc_100AEF8  +
mov eax 80070057h +
jmp locret_100AF73  +
push ebx  +
push esi  +
push edi  +
push [ebp+hWnd]  +
call sub_100C9F8  +
mov ebx ds:GetLastError +
mov edi 0FFFFh +
mov esi 80070000h +
test eax eax +
jnz loc_100AF3B  +
call ebx  +
test eax eax +
jle loc_100AF23  +
and eax edi +
or eax esi +
test eax eax +
jge loc_100AF34  +
call ebx  +
test eax eax +
jle loc_100AF2F  +
and eax edi +
or eax esi +
mov [ebp+var_4] eax +
jmp loc_100AF3B  +
mov [ebp+var_4] 80004005h +
call sub_100C9B4  +
test eax eax +
jnz loc_100AF6D  +
cmp [ebp+var_4] eax +
jl loc_100AF6D  +
call ebx  +
test eax eax +
jle loc_100AF55  +
and eax edi +
or eax esi +
test eax eax +
jge loc_100AF66  +
call ebx  +
test eax eax +
jle loc_100AF61  +
and eax edi +
or eax esi +
mov [ebp+var_4] eax +
jmp loc_100AF6D  +
mov [ebp+var_4] 80004005h +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
mov ebx [ebp+8] +
push esi  +
xor esi esi +
push edi  +
mov [ebp-4] esi +
mov [ebp-8] esi +
cmp ebx esi +
jz loc_100B067  +
push ebx  +
call WdsValidBlackboard  +
test eax eax +
jz loc_100B067  +
mov edi [ebp+0Ch] +
cmp edi esi +
jz loc_100B067  +
xor eax eax +
cmp ax [edi] +
jz loc_100B067  +
cmp [ebp+10h] esi +
jz loc_100B067  +
lea eax [ebp-8] +
push eax  +
push edi  +
push ebx  +
call sub_10118E4  +
mov esi eax +
test esi esi +
jl loc_100B04B  +
cmp dword ptr [ebp-8] 0 +
jnz loc_100B001  +
lea eax [ebp-4] +
push eax  +
push edi  +
push ebx  +
call sub_10118A0  +
mov esi eax +
test esi esi +
jl loc_100B04B  +
cmp dword ptr [ebp-4] 0 +
jnz loc_100B001  +
lea eax [ebp-4] +
push eax  +
push edi  +
push ebx  +
call sub_101196E  +
mov esi eax +
test esi esi +
jl loc_100B04B  +
cmp dword ptr [ebp-4] 0 +
jz loc_100B063  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp-4]  +
call sub_100CC85  +
test eax eax +
jnz loc_100B04B  +
mov ebx ds:GetLastError +
call ebx  +
mov edi 0FFFFh +
mov esi 80070000h +
test eax eax +
jle loc_100B036  +
and eax edi +
or eax esi +
test eax eax +
jge loc_100B046  +
call ebx  +
test eax eax +
jle loc_100B042  +
and eax edi +
or eax esi +
mov esi eax +
jmp loc_100B04B  +
mov esi 80004005h +
cmp dword ptr [ebp-4] 0 +
jz loc_100B063  +
push dword ptr [ebp-4]  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
mov eax esi +
jmp loc_100B06C  +
mov eax 80070057h +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 44h +
push ebx  +
push esi  +
xor esi esi +
xor ebx ebx +
inc esi  +
mov [ebp+var_1C] esi +
mov [ebp+var_14] ebx +
mov [ebp+var_8] ebx +
cmp [ebp+arg_0] ebx +
jz loc_100B203  +
push [ebp+arg_0]  +
call WdsValidBlackboard  +
test eax eax +
jz loc_100B203  +
mov eax [ebp+arg_4] +
cmp eax ebx +
jz loc_100B203  +
xor ecx ecx +
cmp cx [eax] +
jz loc_100B203  +
lea eax [ebp+var_8] +
push eax  +
lea eax [ebp+var_14] +
push eax  +
push [ebp+lpString1]  +
call sub_100A81A  +
cmp eax ebx +
mov [ebp+var_C] eax +
jge loc_100B0E8  +
push offset aCouldnTLoadCom  +
push esi  +
call sub_1011312  +
pop ecx  +
pop ecx  +
jmp loc_100B1F1  +
push edi  +
jmp loc_100B0EE  +
xor esi esi +
inc esi  +
cmp [ebp+var_1C] esi +
jnz loc_100B1F0  +
cmp [ebp+var_14] esi +
jnz loc_100B1F0  +
push [ebp+var_8]  +
xor eax eax +
mov [ebp+Mem] ebx +
lea edi [ebp+var_24] +
stos   +
stos   +
lea eax [ebp+Mem] +
push eax  +
lea eax [ebp+var_18] +
push eax  +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+lpMem] +
push eax  +
push [ebp+lpString1]  +
mov [ebp+var_18] ebx +
mov [ebp+lpMem] ebx +
mov [ebp+var_4] ebx +
call sub_100A909  +
cmp eax ebx +
mov [ebp+var_C] eax +
jl loc_100B1D8  +
mov esi [ebp+lpMem] +
cmp esi ebx +
jz loc_100B1D3  +
mov eax offset aRunasynchronou +
cmp [ebp+lpString1] ebx +
jz loc_100B153  +
mov eax offset aRunsynchronous +
push esi  +
push eax  +
push offset aFoundSCommandS  +
push ebx  +
call sub_1011312  +
add esp 10h +
xor eax eax +
push 7  +
pop ecx  +
lea edi [ebp+var_44] +
stos   +
mov eax [ebp+var_4] +
mov [ebp+var_38] eax +
mov eax [ebp+var_18] +
mov [ebp+var_3C] esi +
mov [ebp+var_44] eax +
lea esi [ebp+Mem] +
lea edi [ebp+var_34] +
movs   +
movs   +
movs   +
cmp [ebp+lpString1] ebx +
jz loc_100B18E  +
or [ebp+var_40] 1 +
lea eax [ebp+var_44] +
push eax  +
push offset loc_10117A2  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_101210D  +
push [ebp+lpMem]  +
mov edi ds:GetProcessHeap +
push ebx  +
mov [ebp+var_C] eax +
call edi  +
mov esi ds:HeapFree +
push eax  +
call esi  +
cmp [ebp+var_4] ebx +
jz loc_100B1C8  +
push [ebp+var_4]  +
push ebx  +
call edi  +
push eax  +
call esi  +
lea eax [ebp+Mem] +
push eax  +
call sub_1010C63  +
jmp loc_100B1E7  +
mov [ebp+var_1C] ebx +
jmp loc_100B1E7  +
push eax  +
push offset aFailedToParseN  +
push esi  +
call sub_1011312  +
add esp 0Ch +
cmp [ebp+var_C] ebx +
jge loc_100B0EB  +
pop edi  +
cmp [ebp+var_8] ebx +
jz loc_100B1FE  +
push [ebp+var_8]  +
call sub_100B681  +
mov eax [ebp+var_C] +
jmp loc_100B208  +
mov eax 80070057h +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 228h +
mov eax dword_101908C +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_4] +
mov ebx ecx +
mov esi edx +
test eax eax +
jz loc_100B39C  +
test ebx ebx +
jz loc_100B39C  +
test esi esi +
jz loc_100B39C  +
xor ecx ecx +
cmp cx [esi] +
jz loc_100B39C  +
test edi edi +
jz loc_100B39C  +
and [edi] ecx +
push eax  +
call sub_100C996  +
cmp eax 1 +
jnz loc_100B367  +
and [ebp+var_224] 0 +
push 21Ch  +
lea eax [ebp+hObject] +
push 0  +
push eax  +
call memset  +
add esp 0Ch +
push 0Ah  +
pop eax  +
push 0D9h  +
push 0  +
mov [ebp+var_14] eax +
mov [ebp+var_10] eax +
call sub_1010108  +
mov [ebp+lpMem] eax +
test eax eax +
jz loc_100B2C9  +
xor ecx ecx +
cmp cx [eax] +
jz loc_100B2C9  +
push eax  +
lea eax [ebp+hObject] +
push 104h  +
push eax  +
call sub_100EDF4  +
add esp 0Ch +
lea eax [ebp+var_224] +
push eax  +
push offset loc_100AF7C  +
push esi  +
push ebx  +
call sub_1012527  +
mov esi eax +
test esi esi +
jl loc_100B32B  +
push [ebp+var_224]  +
lea eax [ebp+hObject] +
push eax  +
call sub_100D2D9  +
mov [edi] eax +
test eax eax +
jnz loc_100B32B  +
mov ebx ds:GetLastError +
call ebx  +
mov edi 0FFFFh +
mov esi 80070000h +
test eax eax +
jle loc_100B316  +
and eax edi +
or eax esi +
test eax eax +
jge loc_100B326  +
call ebx  +
test eax eax +
jle loc_100B322  +
and eax edi +
or eax esi +
mov esi eax +
jmp loc_100B32B  +
mov esi 80004005h +
xor edi edi +
cmp [ebp+var_224] edi +
jz loc_100B340  +
push [ebp+var_224]  +
call sub_100CBE5  +
cmp [ebp+lpMem] edi +
jz loc_100B35C  +
push [ebp+lpMem]  +
push edi  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
cmp esi edi +
jge loc_100B398  +
call sub_100C9B4  +
jmp loc_100B398  +
mov ebx ds:GetLastError +
call ebx  +
mov edi 0FFFFh +
mov esi 80070000h +
test eax eax +
jle loc_100B383  +
and eax edi +
or eax esi +
test eax eax +
jge loc_100B393  +
call ebx  +
test eax eax +
jle loc_100B38F  +
and eax edi +
or eax esi +
mov esi eax +
jmp loc_100B398  +
mov esi 80004005h +
mov eax esi +
jmp loc_100B3A1  +
mov eax 80070057h +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100D691  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
and [ebp+var_10] 0 +
push edi  +
xor eax eax +
lea edi [ebp+var_C] +
stos   +
stos   +
stos   +
test ebx ebx +
jz loc_100B497  +
push ebx  +
call WdsValidBlackboard  +
test eax eax +
jz loc_100B497  +
test esi esi +
jz loc_100B497  +
xor eax eax +
cmp ax [esi] +
jz loc_100B497  +
cmp [ebp+arg_4] eax +
jz loc_100B497  +
cmp [ebp+arg_8] eax +
jz loc_100B497  +
lea eax [ebp+lpMem] +
push eax  +
push esi  +
push ebx  +
call sub_10127CD  +
mov edi eax +
test edi edi +
jl loc_100B469  +
cmp [ebp+lpMem] 0 +
jz loc_100B44F  +
cmp [ebp+arg_0] 1 +
jnz loc_100B437  +
lea eax [ebp+hWnd] +
push eax  +
push dword_1019198  +
mov edx esi +
mov ecx ebx +
call sub_100B213  +
cmp [ebp+lpMem] 0 +
jz loc_100B44F  +
lea eax [ebp+var_10] +
push eax  +
push offset loc_100AB54  +
push esi  +
push ebx  +
call sub_1012527  +
mov edi eax +
test edi edi +
jl loc_100B469  +
mov ecx [ebp+arg_4] +
xor eax eax +
cmp [ebp+var_10] 1 +
setnz al  +
mov [ecx] eax +
mov eax [ebp+var_C] +
mov ecx [ebp+arg_8] +
mov [ecx] eax +
cmp [ebp+hWnd] 0 +
jz loc_100B47B  +
push [ebp+hWnd]  +
call sub_100AEE1  +
and [ebp+hWnd] 0 +
cmp [ebp+lpMem] 0 +
jz loc_100B493  +
push [ebp+lpMem]  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
mov eax edi +
jmp loc_100B49C  +
mov eax 80070057h +
pop edi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push ebx  +
xor ebx ebx +
push esi  +
mov esi [ebp+arg_4] +
mov [ebp+var_4] ebx +
mov [ebp+var_10] ebx +
mov [ebp+var_C] ebx +
cmp esi ebx +
jnz loc_100B4CC  +
mov eax 80070057h +
jmp loc_100B5B5  +
push offset aCommandexecinp  +
push offset aSoftwareMicros  +
push 80000002h  +
mov dword ptr [esi] 4 +
call sub_100DD70  +
mov [ebp+lpFileName] eax +
cmp eax 1 +
mov eax offset aAlready +
jz loc_100B4F8  +
mov eax offset aNotYet +
push edi  +
push eax  +
push offset aRunningCommand  +
push ebx  +
call sub_1011312  +
add esp 0Ch +
call sub_100AE0E  +
mov edi eax +
test edi edi +
jl loc_100B570  +
lea eax [ebp+var_4] +
push eax  +
push [ebp+lpFileName]  +
call sub_100A4F1  +
mov edi eax +
test edi edi +
jl loc_100B570  +
mov esi offset aCommandexecque +
cmp [ebp+lpFileName] ebx +
jnz loc_100B53D  +
push [ebp+lpSubKey]  +
push esi  +
push [ebp+var_4]  +
call sub_100B078  +
mov edi eax +
test edi edi +
jl loc_100B56D  +
xor eax eax +
inc eax  +
cmp [ebp+lpSubKey] eax +
jnz loc_100B555  +
cmp [ebp+arg_0] 5 +
jz loc_100B557  +
cmp [ebp+arg_0] 4 +
jz loc_100B557  +
xor eax eax +
mov ebx [ebp+var_4] +
lea ecx [ebp+var_C] +
push ecx  +
lea ecx [ebp+var_10] +
push ecx  +
push eax  +
call sub_100B3B7  +
mov ebx [ebp+var_C] +
mov edi eax +
mov esi [ebp+arg_4] +
push [ebp+var_4]  +
call sub_1011680  +
call WdsTerminate  +
test edi edi +
jl loc_100B5AC  +
cmp [ebp+var_10] 1 +
jnz loc_100B5A4  +
neg ebx  +
sbb ebx ebx +
and ebx 2 +
mov [esi] ebx +
call sub_100AE6B  +
mov edi eax +
test edi edi +
jl loc_100B5B2  +
call sub_100A772  +
mov edi eax +
jmp loc_100B5B2  +
mov dword ptr [esi] 3 +
jmp loc_100B5B2  +
mov dword ptr [esi] 4 +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push offset aProcessingAnyR  +
push 0  +
call sub_1011312  +
pop ecx  +
pop ecx  +
push 1  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_100B4A6  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push offset aProcessingAn_0  +
push 0  +
call sub_1011312  +
pop ecx  +
pop ecx  +
push 0  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_100B4A6  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
test esi esi +
jz loc_100B671  +
mov edi [ebp+phkResult] +
test edi edi +
jz loc_100B671  +
and dword ptr [edi] 0 +
mov eax [esi+0Ch] +
cmp eax [esi+4] +
jnb loc_100B66C  +
mov ecx [esi+8] +
push edi  +
push 2001Fh  +
push 0  +
push dword ptr [ecx+eax*4]  +
push dword ptr [esi]  +
call ds:RegOpenKeyExW  +
test eax eax +
jnz loc_100B659  +
inc dword ptr [esi+0Ch]  +
mov eax [ebp+var_4] +
jmp loc_100B676  +
and dword ptr [edi] 0 +
test eax eax +
jle loc_100B676  +
and eax 0FFFFh +
or eax 80070000h +
jmp loc_100B676  +
xor eax eax +
inc eax  +
jmp loc_100B676  +
mov eax 80070057h +
pop edi  +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
xor eax eax +
cmp esi eax +
jz loc_100B709  +
push ebx  +
mov ebx ds:GetProcessHeap +
push edi  +
mov edi ds:HeapFree +
cmp [esi+8] eax +
jz loc_100B6F2  +
mov [ebp+arg_0] eax +
cmp [esi+4] eax +
jbe loc_100B6DB  +
mov eax [esi+8] +
mov ecx [ebp+arg_0] +
lea eax [eax+ecx*4] +
cmp dword ptr [eax] 0 +
jz loc_100B6D0  +
push dword ptr [eax]  +
push 0  +
call ebx  +
push eax  +
call edi  +
test eax eax +
jz loc_100B6D0  +
mov eax [esi+8] +
mov ecx [ebp+arg_0] +
and dword ptr [eax+ecx*4] 0 +
inc [ebp+arg_0]  +
mov eax [ebp+arg_0] +
cmp eax [esi+4] +
jb loc_100B6AB  +
mov eax [esi+8] +
test eax eax +
jz loc_100B6F2  +
push eax  +
push 0  +
call ebx  +
push eax  +
call edi  +
test eax eax +
jz loc_100B6F2  +
and dword ptr [esi+8] 0 +
mov eax [esi] +
test eax eax +
jz loc_100B6FF  +
push eax  +
call ds:RegCloseKey  +
push esi  +
push 0  +
call ebx  +
push eax  +
call edi  +
pop edi  +
pop ebx  +
xor eax eax +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+dwErrCode] +
push esi  +
push edi  +
test ebx ebx +
jz loc_100B775  +
mov edi [ebp+lpSubKey] +
test edi edi +
jz loc_100B732  +
xor eax eax +
cmp ax [edi] +
jz loc_100B775  +
mov esi [ebp+arg_8] +
test esi esi +
jz loc_100B775  +
push 0Ch  +
pop ecx  +
mov eax esi +
mov byte ptr [eax] 0 +
inc eax  +
dec ecx  +
jnz loc_100B73E  +
push offset aDomain  +
push edi  +
push ebx  +
call sub_100E063  +
push offset aUsername  +
push edi  +
push ebx  +
mov [esi] eax +
call sub_100E063  +
push offset aPassword  +
push edi  +
push ebx  +
mov [esi+4] eax +
call sub_100E063  +
mov [esi+8] eax +
xor eax eax +
jmp loc_100B77A  +
mov eax 80070057h +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov [ebp+var_4] 1 +
test edi edi +
jz loc_100B7EF  +
xor eax eax +
cmp ax [edi] +
jz loc_100B7EF  +
mov eax edi +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_100B7A3  +
push ebx  +
push esi  +
sub eax edx +
sar eax 1 +
push 0  +
mov ebx eax +
pop esi  +
jz loc_100B7E8  +
cmp [ebp+var_4] 1 +
jnz loc_100B7E8  +
movzx eax word ptr [edi+esi*2] +
push eax  +
call ds:iswdigit  +
pop ecx  +
test eax eax +
jnz loc_100B7E3  +
movzx eax word ptr [edi+esi*2] +
push eax  +
call ds:iswspace  +
pop ecx  +
test eax eax +
jnz loc_100B7E3  +
and [ebp+var_4] eax +
inc esi  +
cmp esi ebx +
jb loc_100B7BA  +
mov eax [ebp+var_4] +
pop esi  +
pop ebx  +
leave   +
retn   +
xor eax eax +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
mov esi ds:_wtoi +
push edi  +
push dword ptr [eax]  +
call esi  +
mov edi eax +
mov eax [ebp+arg_4] +
push dword ptr [eax]  +
call esi  +
cmp edi eax +
pop ecx  +
pop ecx  +
jge loc_100B820  +
or eax 0FFFFFFFFh +
jmp loc_100B829  +
xor ecx ecx +
cmp edi eax +
setnle cl  +
mov eax ecx +
pop edi  +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 228h +
mov eax dword_101908C +
xor eax ebp +
mov [ebp+var_4] eax +
mov ecx [ebp+hKey] +
mov eax [ebp+lpSubKey] +
push ebx  +
xor ebx ebx +
push esi  +
mov esi [ebp+arg_8] +
mov [ebp+var_210] ebx +
mov [ebp+phkResult] ebx +
mov [ebp+cSubKeys] ebx +
mov [ebp+var_214] ebx +
cmp ecx ebx +
jz loc_100BB96  +
cmp eax ebx +
jz loc_100B883  +
xor edx edx +
cmp dx [eax] +
jz loc_100BB96  +
cmp esi ebx +
jz loc_100BB96  +
push edi  +
lea edx [ebp+phkResult] +
push edx  +
push 2001Fh  +
push ebx  +
push eax  +
push ecx  +
mov [esi] ebx +
call ds:RegOpenKeyExW  +
cmp eax ebx +
jz loc_100B8C1  +
jle loc_100B8B3  +
and eax 0FFFFh +
or eax 80070000h +
cmp eax ebx +
mov [ebp+var_210] eax +
jl loc_100BADF  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
lea eax [ebp+cSubKeys] +
push eax  +
push ebx  +
push ebx  +
push ebx  +
push [ebp+phkResult]  +
call ds:RegQueryInfoKeyW  +
cmp eax ebx +
jz loc_100B8F4  +
jle loc_100B8EE  +
and eax 0FFFFh +
or eax 80070000h +
mov [ebp+var_210] eax +
cmp [ebp+var_210] ebx +
jl loc_100BADF  +
push 10h  +
push 8  +
call ds:GetProcessHeap  +
mov edi ds:HeapAlloc +
push eax  +
call edi  +
mov [esi] eax +
cmp eax ebx +
jz loc_100B93E  +
mov eax [ebp+cSubKeys] +
cmp eax ebx +
jbe loc_100B97C  +
shl eax 2 +
push eax  +
push 8  +
call ds:GetProcessHeap  +
push eax  +
call edi  +
mov ecx [esi] +
mov [ecx+8] eax +
mov eax [esi] +
cmp [eax+8] ebx +
jnz loc_100B97C  +
mov edi ds:GetLastError +
call edi  +
cmp eax ebx +
jle loc_100B956  +
and eax 0FFFFh +
or eax 80070000h +
cmp eax ebx +
jge loc_100B972  +
call edi  +
cmp eax ebx +
jg loc_100B966  +
mov [ebp+var_210] eax +
jmp loc_100B97C  +
and eax 0FFFFh +
or eax 80070000h +
jmp loc_100B95E  +
mov [ebp+var_210] 80004005h +
cmp [ebp+var_210] ebx +
jl loc_100BADF  +
cmp [ebp+cSubKeys] ebx +
jbe loc_100BAA2  +
mov [ebp+var_224] 1 +
mov [ebp+dwIndex] ebx +
cmp [ebp+var_210] ebx +
jl loc_100BADF  +
cmp [ebp+var_224] 1 +
jnz loc_100BAA2  +
push 204h  +
lea eax [ebp+var_208] +
push ebx  +
push eax  +
mov dword ptr [ebp+Name] ebx +
call memset  +
add esp 0Ch +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
lea eax [ebp+cbName] +
push eax  +
lea eax [ebp+Name] +
push eax  +
push [ebp+dwIndex]  +
mov [ebp+cbName] 104h +
push [ebp+phkResult]  +
call ds:RegEnumKeyExW  +
cmp eax ebx +
jnz loc_100BA67  +
lea edi [ebp+Name] +
call sub_100B786  +
cmp eax 1 +
mov eax edi +
push eax  +
jnz loc_100BA56  +
call ds:_wtoi  +
test eax eax +
pop ecx  +
mov eax edi +
push eax  +
jle loc_100BA4F  +
mov eax [esi] +
mov eax [eax+8] +
mov ecx [ebp+dwIndex] +
inc [ebp+var_214]  +
lea eax [eax+ecx*4] +
push offset aS  +
push eax  +
call sub_100E8F9  +
add esp 0Ch +
jmp loc_100BA84  +
push offset aFoundOrderSubk  +
jmp loc_100BA5B  +
push offset aFoundOrderSu_0  +
push 2  +
call sub_1011312  +
add esp 0Ch +
jmp loc_100BA8A  +
cmp eax 103h +
jnz loc_100BA76  +
mov [ebp+var_224] ebx +
jmp loc_100BA8A  +
cmp eax ebx +
jle loc_100BA84  +
and eax 0FFFFh +
or eax 80070000h +
mov [ebp+var_210] eax +
inc [ebp+dwIndex]  +
mov eax [ebp+dwIndex] +
cmp eax [ebp+cSubKeys] +
jb loc_100B9A4  +
cmp [ebp+var_210] ebx +
jl loc_100BADF  +
mov edi [ebp+var_214] +
mov eax [esi] +
push offset sub_100B7F8  +
push 4  +
push edi  +
push dword ptr [eax+8]  +
call ds:qsort  +
mov eax [esi] +
mov ecx [ebp+phkResult] +
mov [eax] ecx +
mov eax [esi] +
mov [eax+4] edi +
mov eax [esi] +
add esp 10h +
mov [eax+0Ch] ebx +
jmp loc_100BB8D  +
mov eax [esi] +
cmp eax ebx +
jz loc_100BB79  +
mov edi ds:HeapFree +
cmp [eax+8] ebx +
jz loc_100BB60  +
xor eax eax +
mov [ebp+var_214] eax +
cmp [ebp+cSubKeys] ebx +
jbe loc_100BB43  +
mov ecx [esi] +
mov ecx [ecx+8] +
lea eax [ecx+eax*4] +
cmp [eax] ebx +
jz loc_100BB2E  +
push dword ptr [eax]  +
push ebx  +
call ds:GetProcessHeap  +
push eax  +
call edi  +
test eax eax +
jz loc_100BB2E  +
mov eax [esi] +
mov eax [eax+8] +
mov ecx [ebp+var_214] +
mov [eax+ecx*4] ebx +
mov eax [ebp+var_214] +
inc eax  +
mov [ebp+var_214] eax +
cmp eax [ebp+cSubKeys] +
jb loc_100BB04  +
mov eax [esi] +
mov eax [eax+8] +
cmp eax ebx +
jz loc_100BB60  +
push eax  +
push ebx  +
call ds:GetProcessHeap  +
push eax  +
call edi  +
test eax eax +
jz loc_100BB60  +
mov eax [esi] +
mov [eax+8] ebx +
mov eax [esi] +
cmp eax ebx +
jz loc_100BB77  +
push eax  +
push ebx  +
call ds:GetProcessHeap  +
push eax  +
call edi  +
test eax eax +
jz loc_100BB77  +
mov [esi] ebx +
mov [esi] ebx +
cmp [ebp+phkResult] ebx +
jz loc_100BB8D  +
push [ebp+phkResult]  +
call ds:RegCloseKey  +
mov eax [ebp+var_210] +
pop edi  +
jmp loc_100BB9B  +
mov eax 80070057h +
mov ecx [ebp+var_4] +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100D691  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+10h] +
xor edx edx +
push ebx  +
mov [eax] edx +
mov eax [ebp+8] +
sub eax 4 +
push esi  +
push edi  +
jz loc_100BBD9  +
dec eax  +
jz loc_100BBCF  +
push 57h  +
pop eax  +
jmp loc_100BC16  +
xor esi esi +
xor edi edi +
xor eax eax +
xor bl bl +
jmp loc_100BC02  +
push dword ptr [ebp+14h]  +
call ds:GetTraceLoggerHandle  +
mov edi edx +
mov esi eax +
push edi  +
push esi  +
call ds:GetTraceEnableLevel  +
push edi  +
push esi  +
mov bl al +
call ds:GetTraceEnableFlags  +
xor edx edx +
inc edx  +
test eax eax +
jnz loc_100BC02  +
or eax 0FFFFFFFFh +
mov ecx [ebp+0Ch] +
mov [ecx+20h] eax +
mov [ecx+8] esi +
mov [ecx+0Ch] edi +
mov [ecx+28h] bl +
mov [ecx+24h] edx +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+28h] +
xor ecx ecx +
cmp eax ecx +
jz loc_100BC70  +
mov edx [ebp+0Ch] +
sub edx ecx +
jz loc_100BC5E  +
dec edx  +
jnz loc_100BC70  +
mov cl [ebp+10h] +
mov [eax+28h] cl +
mov ecx [ebp+14h] +
mov [eax+10h] ecx +
mov ecx [ebp+18h] +
mov [eax+14h] ecx +
mov ecx [ebp+1Ch] +
mov [eax+18h] ecx +
mov ecx [ebp+20h] +
mov dword ptr [eax+24h] 1 +
jmp loc_100BC6D  +
mov [eax+24h] ecx +
mov [eax+28h] cl +
mov [eax+10h] ecx +
mov [eax+14h] ecx +
mov [eax+18h] ecx +
mov [eax+1Ch] ecx +
pop ebp  +
retn 24h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_10] +
sub esp 40h +
test ecx ecx +
jz loc_100BCA3  +
mov eax ecx +
push esi  +
lea esi [eax+2] +
mov dx [eax] +
inc eax  +
inc eax  +
test dx dx +
jnz loc_100BC8E  +
sub eax esi +
sar eax 1 +
lea eax [eax+eax+2] +
pop esi  +
jmp loc_100BCA6  +
push 0Ah  +
pop eax  +
test ecx ecx +
jnz loc_100BCAF  +
mov ecx offset aNull +
and [ebp+var_C] 0 +
and [ebp+var_4] 0 +
cmp byte_1019151 0 +
mov [ebp+var_10] ecx +
mov [ebp+var_8] eax +
jnz loc_100BCDD  +
lea eax [ebp+var_10] +
push eax  +
push 1  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call dword_1019154  +
jmp locret_100BD20  +
mov eax [ebp+arg_C] +
cdq   +
mov [ebp+var_28] eax +
mov eax [ebp+arg_8] +
movzx cx byte ptr [eax+2] +
mov [ebp+var_3A] cx +
mov cl [eax+4] +
mov al [eax+5] +
push 40h  +
mov [ebp+var_3C] al +
pop eax  +
mov word ptr [ebp+var_40] ax +
lea eax [ebp+var_40] +
push eax  +
mov eax [ebp+arg_0] +
push dword ptr [eax+0Ch]  +
mov [ebp+var_24] edx +
push dword ptr [eax+8]  +
mov [ebp+var_14] 1A0000h +
mov [ebp+var_3B] cl +
call ds:TraceEvent  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 40h +
lea eax [ebp+arg_10] +
mov [ebp+var_10] eax +
xor eax eax +
mov [ebp+var_C] eax +
mov [ebp+var_8] 4 +
mov [ebp+var_4] eax +
cmp byte_1019151 al +
jnz loc_100BD65  +
lea eax [ebp+var_10] +
push eax  +
push 1  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call dword_1019154  +
jmp locret_100BDA8  +
mov eax [ebp+arg_C] +
cdq   +
mov [ebp+var_28] eax +
mov eax [ebp+arg_8] +
movzx cx byte ptr [eax+2] +
mov [ebp+var_3A] cx +
mov cl [eax+4] +
mov al [eax+5] +
push 40h  +
mov [ebp+var_3C] al +
pop eax  +
mov word ptr [ebp+var_40] ax +
lea eax [ebp+var_40] +
push eax  +
mov eax [ebp+arg_0] +
push dword ptr [eax+0Ch]  +
mov [ebp+var_24] edx +
push dword ptr [eax+8]  +
mov [ebp+var_14] 1A0000h +
mov [ebp+var_3B] cl +
call ds:TraceEvent  +
leave   +
retn 14h  +
***
jz loc_100BE0B  +
mov eax dword_1019164 +
push esi  +
mov esi dword_1019160 +
mov ecx esi +
or ecx eax +
jz loc_100BE0A  +
cmp byte_1019151 bl +
jnz loc_100BDE2  +
push eax  +
push esi  +
call dword_1019158  +
jmp loc_100BDFE  +
push dword ptr [esi+4]  +
push dword ptr [esi]  +
call ds:UnregisterTraceGuids  +
mov [esi+20h] ebx +
mov [esi+28h] bl +
mov [esi+8] ebx +
mov [esi+0Ch] ebx +
mov [esi] ebx +
mov [esi+4] ebx +
mov dword_1019160 ebx +
mov dword_1019164 ebx +
pop esi  +
pop ebx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
push esi  +
test eax eax +
jz loc_100BEFD  +
xor ecx ecx +
cmp cx [eax] +
jz loc_100BEFD  +
cmp [ebp+arg_0] ecx +
jz loc_100BEFD  +
mov esi [ebp+arg_4] +
test esi esi +
jz loc_100BEFD  +
push ebx  +
push edi  +
push eax  +
call sub_100E6F6  +
mov ebx ds:GetLastError +
mov [esi] eax +
mov edi 0FFFFh +
mov esi 80070000h +
test eax eax +
jnz loc_100BE8C  +
call ebx  +
test eax eax +
jle loc_100BE6E  +
and eax edi +
or eax esi +
test eax eax +
jge loc_100BE7F  +
call ebx  +
test eax eax +
jle loc_100BE7A  +
and eax edi +
or eax esi +
mov [ebp+var_4] eax +
jmp loc_100BE86  +
mov [ebp+var_4] 80004005h +
cmp [ebp+var_4] 0 +
jl loc_100BED3  +
mov eax [ebp+arg_4] +
push 20h  +
push dword ptr [eax]  +
call sub_100E44A  +
push [ebp+arg_0]  +
mov eax [ebp+arg_4] +
push dword ptr [eax]  +
call sub_1012FD8  +
test eax eax +
jnz loc_100BECD  +
call ebx  +
test eax eax +
jle loc_100BEB5  +
and eax edi +
or eax esi +
test eax eax +
jge loc_100BEC6  +
call ebx  +
test eax eax +
jle loc_100BEC1  +
and eax edi +
or eax esi +
mov [ebp+var_4] eax +
jmp loc_100BECD  +
mov [ebp+var_4] 80004005h +
cmp [ebp+var_4] 0 +
jge loc_100BEF6  +
mov esi [ebp+arg_4] +
mov eax [esi] +
test eax eax +
jz loc_100BEF3  +
push eax  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
test eax eax +
jz loc_100BEF3  +
and dword ptr [esi] 0 +
and dword ptr [esi] 0 +
mov eax [ebp+var_4] +
pop edi  +
pop ebx  +
jmp loc_100BF10  +
push offset aSetupugcHasAnE  +
push 1  +
call sub_1011312  +
pop ecx  +
pop ecx  +
mov eax 80070057h +
pop esi  +
leave   +
retn 8  +
***
push 80000002h  +
call sub_100DD70  +
retn   +
***
mov edi edi +
push esi  +
push edi  +
mov edi eax +
xor esi esi +
test edi edi +
jnz loc_100BF47  +
mov eax 80070057h +
jmp loc_100BF9E  +
call sub_100BF1A  +
cmp eax 1 +
jnz loc_100BF69  +
push offset aInprogresscook  +
push offset aSoftwareMicros  +
push 80000002h  +
call sub_100E081  +
mov [edi] eax +
jmp loc_100BF9C  +
push ebx  +
mov ebx ds:GetLastError +
call ebx  +
mov edi 0FFFFh +
mov esi 80070000h +
test eax eax +
jle loc_100BF86  +
and eax edi +
or eax esi +
test eax eax +
jge loc_100BF96  +
call ebx  +
test eax eax +
jle loc_100BF92  +
and eax edi +
or eax esi +
mov esi eax +
jmp loc_100BF9B  +
mov esi 80004005h +
pop ebx  +
mov eax esi +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push dword ptr [ebp+Data]  +
xor esi esi +
push offset aInprogresscook  +
push offset aSoftwareMicros  +
push 80000002h  +
call sub_100E126  +
test eax eax +
jnz loc_100BFFE  +
push ebx  +
mov ebx ds:GetLastError +
push edi  +
call ebx  +
mov edi 0FFFFh +
mov esi 80070000h +
test eax eax +
jle loc_100BFE7  +
and eax edi +
or eax esi +
test eax eax +
jge loc_100BFF7  +
call ebx  +
test eax eax +
jle loc_100BFF3  +
and eax edi +
or eax esi +
mov esi eax +
jmp loc_100BFFC  +
mov esi 80004005h +
pop edi  +
pop ebx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
xor esi esi +
push esi  +
push offset aSoftwareMicros  +
mov ebx 80000002h +
push ebx  +
call sub_100DD70  +
test eax eax +
jnz loc_100C099  +
push edi  +
lea eax [ebp+hKey] +
push eax  +
mov edi 2001Fh +
push edi  +
push esi  +
push offset SubKey  +
push ebx  +
mov [ebp+hKey] esi +
call ds:RegOpenKeyExW  +
cmp eax esi +
jnz loc_100C08A  +
push esi  +
lea eax [ebp+phkResult] +
push eax  +
push esi  +
push edi  +
push esi  +
push esi  +
push esi  +
push offset aSetupUnattendS  +
push [ebp+hKey]  +
mov [ebp+phkResult] esi +
call ds:RegCreateKeyExW  +
mov edi ds:RegCloseKey +
cmp eax esi +
jnz loc_100C075  +
push [ebp+phkResult]  +
call edi  +
jmp loc_100C083  +
jle loc_100C081  +
and eax 0FFFFh +
or eax 80070000h +
mov esi eax +
push [ebp+hKey]  +
call edi  +
jmp loc_100C098  +
jle loc_100C096  +
and eax 0FFFFh +
or eax 80070000h +
mov esi eax +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebx  +
push esi  +
push edi  +
xor ebx ebx +
push ebx  +
mov edi offset aSoftwareMicros +
push edi  +
mov esi 80000002h +
push esi  +
call sub_100DD70  +
cmp eax 1 +
jnz loc_100C0FF  +
push ebx  +
push edi  +
push esi  +
call sub_100E14A  +
test eax eax +
jnz loc_100C0FF  +
mov ebx ds:GetLastError +
call ebx  +
mov edi 0FFFFh +
mov esi 80070000h +
test eax eax +
jle loc_100C0EA  +
and eax edi +
or eax esi +
test eax eax +
jge loc_100C0FA  +
call ebx  +
test eax eax +
jle loc_100C0F6  +
and eax edi +
or eax esi +
mov ebx eax +
jmp loc_100C0FF  +
mov ebx 80004005h +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
retn   +
***
cmp eax offset sub_100A38D +
jnz loc_100C117  +
mov eax offset aExtendospart_3 +
retn   +
cmp eax offset sub_100B5C0 +
jnz loc_100C124  +
mov eax offset aRunsynchronous +
retn   +
cmp eax offset sub_100B5E9 +
jnz loc_100C131  +
mov eax offset aRunasynchronou +
retn   +
cmp eax offset sub_1009F62 +
mov eax offset aAuditcompute_0 +
jz locret_100C142  +
mov eax offset aUnknownProcess +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 128h +
mov eax dword_101908C +
xor eax ebp +
mov [ebp+var_4] eax +
mov ecx [ebp+arg_0] +
push ebx  +
mov ebx [ebp+arg_4] +
push esi  +
mov esi [ebp+arg_8] +
push edi  +
mov edi [ebp+arg_C] +
xor eax eax +
mov [ebp+var_124] ecx +
mov [ebp+var_11C] ebx +
mov [ebp+var_128] esi +
test edi edi +
jz loc_100C265  +
mov edx [edi] +
or edx [edi+4] +
jnz loc_100C2A0  +
cmp byte_1019150 al +
jnz loc_100C241  +
lea eax [ebp+VersionInformation] +
push eax  +
mov [ebp+VersionInformation.dwOSVersionInfoSize] 114h +
call ds:GetVersionExW  +
test eax eax +
jz loc_100C1CD  +
cmp [ebp+VersionInformation.dwMajorVersion] 6 +
setb al  +
mov byte_1019151 al +
test al al +
jnz loc_100C228  +
push offset ModuleName  +
call ds:GetModuleHandleW  +
mov ebx eax +
test ebx ebx +
jz loc_100C221  +
mov esi ds:GetProcAddress +
push offset ProcName  +
push ebx  +
call esi  +
mov dword_1019154 eax +
test eax eax +
jz loc_100C221  +
push offset aEventregister  +
push ebx  +
call esi  +
mov off_1019024 eax +
test eax eax +
jz loc_100C217  +
push offset aEventunregiste  +
push ebx  +
call esi  +
mov dword_1019158 eax +
test eax eax +
jnz loc_100C228  +
mov off_1019024 offset sub_100C148 +
mov byte_1019151 1 +
mov esi [ebp+var_128] +
mov ecx [ebp+var_124] +
mov ebx [ebp+var_11C] +
mov byte_1019150 1 +
cmp byte_1019151 0 +
jnz loc_100C261  +
mov eax offset loc_100BC22 +
test ebx ebx +
jz loc_100C255  +
mov eax ebx +
push edi  +
push esi  +
push eax  +
push ecx  +
call off_1019024  +
jmp loc_100C2A0  +
test esi esi +
jnz loc_100C26A  +
push 57h  +
pop eax  +
jmp loc_100C2A0  +
mov eax esi +
cdq   +
mov [edi+4] edx +
xor edx edx +
mov [edi] eax +
mov [ebp+var_120] ecx +
mov [ebp+var_11C] edx +
mov eax offset loc_100BBB0 +
cmp ebx edx +
jz loc_100C28B  +
mov eax ebx +
push esi  +
push edx  +
push edx  +
lea edx [ebp+var_120] +
push edx  +
push 1  +
push ecx  +
push esi  +
push eax  +
call ds:RegisterTraceGuidsW  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100D691  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1Ch +
push esi  +
xor esi esi +
mov [ebp+var_8] esi +
mov [ebp+lpMem] esi +
cmp eax esi +
jnz loc_100C40F  +
push 4  +
pop eax  +
jmp loc_100C824  +
push ebx  +
lea ecx [ebp+lpMem] +
push ecx  +
lea ecx [ebp+var_1C] +
push ecx  +
call sub_100BE12  +
cmp eax esi +
mov [ebp+var_4] eax +
jl loc_100C803  +
xor ebx ebx +
inc ebx  +
push edi  +
mov [ebp+var_10] esi +
mov [ebp+var_14] esi +
mov [ebp+var_18] esi +
mov edi 80000000h +
cmp dword_101918C esi +
jz loc_100C4BD  +
cmp byte_1019151 0 +
mov al byte_1019190 +
jz loc_100C463  +
cmp al 4 +
jnb loc_100C458  +
test al al +
jnz loc_100C4BD  +
test byte_1019188 1 +
jnz loc_100C49B  +
jmp loc_100C4BD  +
cmp al 4 +
jnb loc_100C46B  +
test al al +
jnz loc_100C4BD  +
mov eax dword_1019178 +
mov ecx dword_101917C +
and eax ebx +
and ecx edi +
or eax ecx +
jz loc_100C4BD  +
mov eax dword_1019180 +
mov esi dword_1019184 +
mov ecx eax +
mov edx esi +
and ecx ebx +
and edx edi +
cmp ecx eax +
jnz loc_100C4BB  +
cmp edx esi +
jnz loc_100C4BB  +
xor esi esi +
push [ebp+lpMem]  +
push offset dword_10037EC  +
push offset dword_1003820  +
push dword_1019164  +
push dword_1019160  +
call sub_100BC79  +
jmp loc_100C4BD  +
xor esi esi +
push [ebp+lpMem]  +
push offset aSetupugcRunnin  +
push esi  +
call sub_1011312  +
mov ecx [ebp+var_1C] +
add esp 0Ch +
xor eax eax +
cmp [ebp+var_18] esi +
jnz loc_100C4FD  +
cmp ecx dword_101904C[eax] +
jnz loc_100C4F5  +
mov edx off_1019050[eax] +
mov [ebp+var_10] edx +
mov edx dword_1019054[eax] +
mov [ebp+var_14] edx +
mov [ebp+var_18] ebx +
add eax 0Ch +
cmp eax 3Ch +
jb loc_100C4D3  +
cmp [ebp+var_10] esi +
jz loc_100C752  +
mov [ebp+var_18] esi +
call sub_100BF1A  +
cmp eax ebx +
jnz loc_100C51F  +
lea eax [ebp+var_18] +
call sub_100BF34  +
mov esi [ebp+var_18] +
jmp loc_100C524  +
call sub_100C00A  +
mov [ebp+var_4] eax +
cmp esi [ebp+var_14] +
jnb loc_100C6A6  +
mov edi offset loc_10037FC +
cmp [ebp+var_4] 0 +
jl loc_100C764  +
mov ebx [ebp+var_8] +
cmp ebx 2 +
jz loc_100C6A6  +
cmp ebx 3 +
jz loc_100C6A6  +
cmp ebx 4 +
jz loc_100C6A6  +
cmp dword_101918C 0 +
jz loc_100C5EF  +
cmp byte_1019151 0 +
mov al byte_1019190 +
jz loc_100C58B  +
cmp al 4 +
jnb loc_100C580  +
test al al +
jnz loc_100C5EF  +
test byte_1019188 1 +
jnz loc_100C5CC  +
jmp loc_100C5EF  +
cmp al 4 +
jnb loc_100C593  +
test al al +
jnz loc_100C5EF  +
mov eax dword_1019178 +
mov ecx dword_101917C +
mov edx 80000000h +
and eax 1 +
and ecx edx +
or eax ecx +
jz loc_100C5EF  +
mov eax dword_1019180 +
mov ecx dword_1019184 +
and eax 1 +
and ecx edx +
cmp eax dword_1019180 +
jnz loc_100C5EF  +
cmp ecx dword_1019184 +
jnz loc_100C5EF  +
mov eax [ebp+var_10] +
mov eax [eax+esi*4] +
call sub_100C10A  +
push eax  +
push edi  +
push offset dword_1003840  +
push dword_1019164  +
push dword_1019160  +
call sub_100BC79  +
lea eax [ebp+var_8] +
push eax  +
push [ebp+var_1C]  +
mov eax [ebp+var_10] +
call dword ptr [eax+esi*4]  +
cmp dword_101918C 0 +
mov [ebp+var_4] eax +
jz loc_100C686  +
cmp byte_1019151 0 +
mov al byte_1019190 +
jz loc_100C629  +
cmp al 4 +
jnb loc_100C61E  +
test al al +
jnz loc_100C686  +
test byte_1019188 1 +
jnz loc_100C66C  +
jmp loc_100C686  +
cmp al 4 +
jnb loc_100C631  +
test al al +
jnz loc_100C686  +
mov eax dword_1019178 +
mov ecx dword_101917C +
and eax 1 +
and ecx 80000000h +
or eax ecx +
jz loc_100C686  +
mov edx dword_1019180 +
mov ecx dword_1019184 +
mov eax edx +
and eax 1 +
and ecx 80000000h +
cmp eax edx +
jnz loc_100C686  +
cmp ecx dword_1019184 +
jnz loc_100C686  +
push [ebp+var_4]  +
push edi  +
push offset dword_1003850  +
push dword_1019164  +
push dword_1019160  +
call sub_100BD29  +
cmp [ebp+var_4] 0 +
jl loc_100C69C  +
xor eax eax +
inc eax  +
cmp ebx eax +
jnz loc_100C69C  +
cmp [ebp+var_8] 0 +
jnz loc_100C69C  +
mov [ebp+var_8] eax +
inc esi  +
cmp esi [ebp+var_14] +
jb loc_100C535  +
cmp [ebp+var_4] 0 +
jl loc_100C764  +
cmp [ebp+var_8] 2 +
jnz loc_100C6D0  +
cmp esi [ebp+var_14] +
jnb loc_100C6ED  +
push offset aAProcessorNeed  +
push 0  +
mov [ebp+var_8] 3 +
call sub_1011312  +
jmp loc_100C6E3  +
cmp [ebp+var_8] 3 +
jnz loc_100C6ED  +
push offset aAProcessorNe_0  +
push 0  +
call sub_1011312  +
dec esi  +
pop ecx  +
pop ecx  +
push esi  +
call sub_100BFA6  +
jmp loc_100C74D  +
xor esi esi +
call sub_100BF1A  +
test eax eax +
jz loc_100C741  +
push offset aInprogresscook  +
push offset aSoftwareMicros  +
push 80000002h  +
call sub_100DDFC  +
test eax eax +
jnz loc_100C741  +
mov ebx ds:GetLastError +
call ebx  +
mov edi 0FFFFh +
mov esi 80070000h +
test eax eax +
jle loc_100C72C  +
and eax edi +
or eax esi +
test eax eax +
jge loc_100C73C  +
call ebx  +
test eax eax +
jle loc_100C738  +
and eax edi +
or eax esi +
mov esi eax +
jmp loc_100C741  +
mov esi 80004005h +
mov [ebp+var_4] esi +
test esi esi +
jl loc_100C764  +
call sub_100C0A4  +
mov [ebp+var_4] eax +
jmp loc_100C764  +
push ecx  +
push [ebp+lpMem]  +
push offset aSetupugcHasNoS  +
push esi  +
call sub_1011312  +
add esp 10h +
xor ebx ebx +
cmp dword_101918C ebx +
jz loc_100C7EA  +
mov al byte_1019190 +
cmp byte_1019151 bl +
jz loc_100C78E  +
cmp al 4 +
jnb loc_100C783  +
test al al +
jnz loc_100C7EA  +
test byte_1019188 1 +
jnz loc_100C7CC  +
jmp loc_100C7EA  +
cmp al 4 +
jnb loc_100C796  +
test al al +
jnz loc_100C7EA  +
mov eax dword_1019178 +
mov ecx dword_101917C +
mov edx 80000000h +
and eax 1 +
and ecx edx +
or eax ecx +
jz loc_100C7EA  +
mov esi dword_1019180 +
mov edi dword_1019184 +
mov eax esi +
mov ecx edi +
and eax 1 +
and ecx edx +
cmp eax esi +
jnz loc_100C7EA  +
cmp ecx edi +
jnz loc_100C7EA  +
push [ebp+var_4]  +
push offset dword_10037EC  +
push offset dword_1003830  +
push dword_1019164  +
push dword_1019160  +
call sub_100BD29  +
pop edi  +
cmp [ebp+lpMem] ebx +
jz loc_100C813  +
push [ebp+lpMem]  +
push ebx  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
jmp loc_100C813  +
push eax  +
push offset aSetupugcCouldn  +
push 1  +
call sub_1011312  +
add esp 0Ch +
cmp [ebp+var_4] 0 +
pop ebx  +
jge loc_100C821  +
mov [ebp+var_8] 4 +
mov eax [ebp+var_8] +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push ebx  +
xor ebx ebx +
push esi  +
inc ebx  +
cmp dword_101918C 0 +
push edi  +
mov dword_1019198 eax +
mov esi 80000000h +
jz loc_100C8C1  +
cmp byte_1019151 0 +
mov al byte_1019190 +
jz loc_100C86D  +
cmp al 4 +
jnb loc_100C863  +
test al al +
jnz loc_100C8C1  +
test byte_1019188 bl +
jnz loc_100C8A3  +
jmp loc_100C8C1  +
cmp al 4 +
jnb loc_100C875  +
test al al +
jnz loc_100C8C1  +
mov eax dword_1019178 +
mov ecx dword_101917C +
and eax ebx +
and ecx esi +
or eax ecx +
jz loc_100C8C1  +
mov eax dword_1019180 +
mov edi dword_1019184 +
mov ecx eax +
mov edx edi +
and ecx ebx +
and edx esi +
cmp ecx eax +
jnz loc_100C8C1  +
cmp edx edi +
jnz loc_100C8C1  +
push [ebp+arg_8]  +
push offset dword_10037DC  +
push offset dword_1005A18  +
push dword_1019164  +
push dword_1019160  +
call sub_100BC79  +
call sub_101115F  +
push [ebp+arg_8]  +
xor edi edi +
push offset aSetupugcLaunch  +
push edi  +
call sub_1011312  +
add esp 0Ch +
call sub_100A4C2  +
mov eax [ebp+arg_8] +
call sub_100C3F2  +
mov [ebp+arg_8] eax +
call sub_100A4DD  +
push [ebp+arg_8]  +
push offset aSetupugcReturn  +
push edi  +
call sub_1011312  +
add esp 0Ch +
call sub_1011090  +
cmp dword_101918C edi +
jz loc_100C980  +
cmp byte_1019151 0 +
mov al byte_1019190 +
jz loc_100C92C  +
cmp al 4 +
jnb loc_100C922  +
test al al +
jnz loc_100C980  +
test byte_1019188 bl +
jnz loc_100C962  +
jmp loc_100C980  +
cmp al 4 +
jnb loc_100C934  +
test al al +
jnz loc_100C980  +
mov eax dword_1019178 +
mov ecx dword_101917C +
and eax ebx +
and ecx esi +
or eax ecx +
jz loc_100C980  +
mov eax dword_1019180 +
mov edi dword_1019184 +
mov ecx eax +
mov edx edi +
and ecx ebx +
and edx esi +
cmp ecx eax +
jnz loc_100C980  +
cmp edx edi +
jnz loc_100C980  +
push [ebp+arg_8]  +
push offset dword_10037DC  +
push offset dword_1003810  +
push dword_1019164  +
push dword_1019160  +
call sub_100BD29  +
and dword_1019198 0 +
mov eax [ebp+arg_8] +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
xor eax eax +
test ecx ecx +
jz loc_100C9AB  +
mov hInstance ecx +
inc eax  +
pop ebp  +
retn 4  +
***
and hInstance 0 +
xor eax eax +
inc eax  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+hWnd]  +
xor esi esi +
call ds:IsWindow  +
test eax eax +
jz loc_100C9EC  +
push [ebp+lParam]  +
push esi  +
push 402h  +
push [ebp+hWnd]  +
call ds:SendMessageW  +
inc esi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+hWnd]  +
xor esi esi +
call ds:IsWindow  +
test eax eax +
jz loc_100CA1E  +
push esi  +
push esi  +
push 401h  +
push [ebp+hWnd]  +
call ds:SendMessageW  +
inc esi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 3Ch +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+hWnd] +
lea eax [ebp+nWidth] +
push eax  +
xor esi esi +
push 3E8h  +
push [ebp+hDlg]  +
mov [ebp+var_4] esi +
mov [ebp+wParam] esi +
mov [ebp+var_1C._cx] esi +
mov [ebp+var_1C.cy] esi +
call ds:GetDlgItem  +
push eax  +
call ds:GetWindowRect  +
mov eax [ebp+nWidth] +
sub [ebp-24h] eax +
mov ecx [ebp-28h] +
sub [ebp-20h] ecx +
mov ebx [ebp-24h] +
push 1  +
mov [ebp+X] eax +
lea eax [ebp+X] +
push eax  +
push [ebp+hDlg]  +
mov [ebp-10h] ecx +
push esi  +
call ds:MapWindowPoints  +
add dword ptr [ebp-10h] 7 +
jmp loc_100CB91  +
mov ecx [ebp-10h] +
mov eax [ebp-20h] +
push [ebp+hDlg]  +
lea eax [ecx+eax+7] +
mov [ebp-10h] eax +
call ds:GetWindowDC  +
mov [ebp+hWnd] eax +
cmp eax esi +
jz loc_100CAD4  +
lea eax [ebp+var_1C] +
push eax  +
push edi  +
call ds:lstrlenW  +
push eax  +
push edi  +
push [ebp+hWnd]  +
call ds:GetTextExtentPoint32W  +
cmp [ebp+var_1C._cx] ebx +
jle loc_100CAC8  +
mov ebx [ebp+var_1C._cx] +
push [ebp+hWnd]  +
push [ebp+hDlg]  +
call ds:ReleaseDC  +
mov eax [ebp-10h] +
push esi  +
push hInstance  +
add eax 0FFFFFFFEh +
push esi  +
push [ebp+hDlg]  +
push 10h  +
push 10h  +
push eax  +
mov eax [ebp+X] +
add eax 0FFFFFFF0h +
push eax  +
push 50000203h  +
push offset WindowName  +
push offset ClassName  +
push esi  +
call ds:CreateWindowExW  +
mov [ebp+var_C] eax +
mov eax [ebp+var_1C._cx] +
cmp [ebp-24h] eax +
jle loc_100CB15  +
mov eax [ebp-24h] +
push esi  +
push hInstance  +
push esi  +
push [ebp+hDlg]  +
push dword ptr [ebp-20h]  +
push eax  +
push dword ptr [ebp-10h]  +
push [ebp+X]  +
push 50000200h  +
push offset WindowName  +
push offset ClassName  +
push esi  +
call ds:CreateWindowExW  +
mov [ebp+hWnd] eax +
cmp [ebp+wParam] esi +
jnz loc_100CB5D  +
push esi  +
push esi  +
push 31h  +
push 3E8h  +
push [ebp+hDlg]  +
call ds:SendDlgItemMessageW  +
mov [ebp+wParam] eax +
push esi  +
push [ebp+wParam]  +
push 30h  +
push [ebp+hWnd]  +
call ds:SendMessageW  +
push edi  +
push [ebp+hWnd]  +
call ds:SetWindowTextW  +
mov eax [ebp+hWnd] +
inc [ebp+var_4]  +
mov [edi+208h] eax +
mov eax [ebp+var_C] +
mov [edi+20Ch] eax +
mov edi [edi+210h] +
cmp edi esi +
jnz loc_100CA8D  +
lea eax [ebp+Rect] +
push eax  +
push [ebp+hDlg]  +
call ds:GetWindowRect  +
mov ecx [ebp-20h] +
mov eax [ebp+Rect.bottom] +
sub eax [ebp+Rect.top] +
sub ebx [ebp+Rect.left] +
add ecx 7 +
imul ecx [ebp+var_4] +
sub ebx [ebp-24h] +
push 46h  +
add [ebp+Rect.right] ebx +
add ecx eax +
push ecx  +
push [ebp+Rect.right]  +
mov [ebp+Rect.bottom] eax +
push esi  +
push esi  +
push esi  +
push [ebp+hDlg]  +
call ds:SetWindowPos  +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+lpMem] +
jmp loc_100CC08  +
mov eax esi +
mov esi [esi+210h] +
push eax  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
test esi esi +
jnz loc_100CBF0  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
xor eax eax +
test ecx ecx +
jz loc_100CC2C  +
cmp ecx 7FFFFFFFh +
jbe loc_100CC31  +
mov eax 80070057h +
test eax eax +
jl loc_100CC7C  +
mov eax [ebp+arg_0] +
push ebx  +
xor ebx ebx +
push esi  +
mov esi ecx +
test ecx ecx +
jz loc_100CC6C  +
mov edx [ebp+arg_8] +
push edi  +
mov edi 7FFFFFFEh +
sub edi ecx +
sub edx eax +
lea ecx [edi+esi] +
test ecx ecx +
jz loc_100CC67  +
movzx ecx word ptr [edx+eax] +
test cx cx +
jz loc_100CC67  +
mov [eax] cx +
inc eax  +
inc eax  +
dec esi  +
jnz loc_100CC4F  +
pop edi  +
test esi esi +
jnz loc_100CC73  +
dec eax  +
dec eax  +
mov ebx 8007007Ah +
xor ecx ecx +
mov [eax] cx +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
push ebx  +
mov ebx [ebp+arg_0] +
test ebx ebx +
jz loc_100CCF6  +
xor eax eax +
cmp ax [ebx] +
jz loc_100CCF6  +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
jmp loc_100CCB1  +
mov eax [esi] +
test eax eax +
jz loc_100CCB5  +
lea esi [eax+210h] +
test esi esi +
jnz loc_100CCA5  +
push 214h  +
push 8  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov edi eax +
test edi edi +
jz loc_100CCEF  +
push ebx  +
push 104h  +
push edi  +
call sub_100CC16  +
and dword ptr [edi+210h] 0 +
test esi esi +
jz loc_100CCE8  +
mov [esi] edi +
mov [ebp+var_4] 1 +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
jmp loc_100CD00  +
push 57h  +
call ds:SetLastError  +
xor eax eax +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
xor ebx ebx +
xor ecx ecx +
push esi  +
mov esi eax +
cmp edi ebx +
jnz loc_100CD35  +
xor eax eax +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
cmp ecx ebx +
jnz loc_100CD39  +
mov eax [esi] +
cmp [eax] edi +
jnz loc_100CD32  +
xor ecx ecx +
inc ecx  +
jmp loc_100CD35  +
lea esi [eax+8] +
cmp [esi] ebx +
jnz loc_100CD23  +
cmp [ebp+arg_4] ebx +
jnz loc_100CD66  +
cmp ecx ebx +
jnz loc_100CD1B  +
push 0Ch  +
push 8  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
cmp eax ebx +
jz loc_100CD1B  +
mov ecx [ebp+arg_0] +
mov [eax] edi +
mov [eax+8] ebx +
mov [eax+4] ecx +
mov [esi] eax +
jmp loc_100CD97  +
cmp ecx ebx +
jz loc_100CD1B  +
mov eax [esi] +
cmp eax ebx +
jz loc_100CD1B  +
mov eax [eax+4] +
cmp eax ebx +
jz loc_100CD7D  +
push eax  +
call sub_100CBE5  +
mov eax [esi] +
mov ecx [eax+8] +
mov [esi] ecx +
cmp eax ebx +
jz loc_100CD97  +
push eax  +
push ebx  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
xor eax eax +
inc eax  +
jmp loc_100CD1D  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 60h +
mov eax dword_101908C +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
push edi  +
mov esi edx +
xor edi edi +
mov ebx ecx +
cmp esi edi +
jz loc_100CE11  +
cmp [esi] di +
jz loc_100CE11  +
push esi  +
call ds:lstrlenW  +
cmp eax 20h +
jnb loc_100CE94  +
push 5Ch  +
lea eax [ebp+var_60] +
push edi  +
push eax  +
call memset  +
add esp 0Ch +
push esi  +
push 20h  +
lea eax [ebp+var_60.lfFaceName] +
push eax  +
mov [ebp+var_60.lfCharSet] 1 +
call sub_100CC16  +
test eax eax +
jl loc_100CE94  +
cmp [esi] di +
jz loc_100CE11  +
lea eax [ebp+var_60] +
push eax  +
call ds:CreateFontIndirectW  +
mov esi eax +
cmp esi edi +
jnz loc_100CE27  +
cmp ebx edi +
jz loc_100CE94  +
push edi  +
push edi  +
push 31h  +
push ebx  +
call ds:SendMessageW  +
movzx esi ax +
cmp esi edi +
jz loc_100CE94  +
cmp [ebp+arg_4] edi +
jnz loc_100CE35  +
cmp [ebp+nNumber] edi +
jnz loc_100CE35  +
mov eax esi +
jmp loc_100CE96  +
lea eax [ebp+var_60] +
push eax  +
push 5Ch  +
push esi  +
call ds:GetObjectW  +
push esi  +
mov ebx eax +
call ds:DeleteObject  +
cmp ebx edi +
jz loc_100CE94  +
mov eax [ebp+arg_4] +
cmp eax edi +
jz loc_100CE59  +
mov [ebp+var_60.lfWeight] eax +
cmp [ebp+nNumber] edi +
jz loc_100CE7F  +
push 48h  +
push 5Ah  +
push edi  +
call ds:GetDC  +
push eax  +
call ds:GetDeviceCaps  +
push eax  +
push [ebp+nNumber]  +
call ds:MulDiv  +
neg eax  +
mov [ebp+var_60.lfHeight] eax +
cmp [ebp+arg_8] edi +
jz loc_100CE88  +
mov [ebp+var_60.lfCharSet] 2 +
lea eax [ebp+var_60] +
push eax  +
call ds:CreateFontIndirectW  +
jmp loc_100CE96  +
xor eax eax +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100D691  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
sub esp 2Ch +
sub eax 110h +
push ebx  +
push esi  +
push edi  +
jz loc_100D05A  +
sub eax 2F1h +
jz loc_100CFF8  +
dec eax  +
jnz loc_100D238  +
mov eax dword_10191B0 +
xor ebx ebx +
xor ecx ecx +
mov edi eax +
cmp eax ebx +
jz loc_100D238  +
cmp ecx ebx +
jnz loc_100CF09  +
mov eax [edi] +
cmp eax [ebp+hWnd] +
jnz loc_100CEFA  +
xor ecx ecx +
inc ecx  +
jmp loc_100CEFD  +
mov edi [edi+8] +
cmp edi ebx +
jnz loc_100CEEA  +
cmp ecx ebx +
jz loc_100D238  +
cmp edi ebx +
jz loc_100D238  +
mov ecx [edi+4] +
cmp ecx ebx +
jz loc_100D238  +
mov eax wParam +
cmp eax ebx +
jz loc_100CF36  +
push 1  +
push eax  +
push 30h  +
push dword ptr [ecx+208h]  +
call ds:SendMessageW  +
mov esi ds:LoadImageW +
cmp lParam ebx +
jnz loc_100CF5D  +
push ebx  +
push 10h  +
push 10h  +
push 1  +
push 0D8h  +
push hInstance  +
call esi  +
mov lParam eax +
mov eax dword_10191A4 +
cmp eax ebx +
jnz loc_100CF7F  +
push ebx  +
push 10h  +
push 10h  +
push 1  +
push 0D7h  +
push hInstance  +
call esi  +
mov dword_10191A4 eax +
mov ecx lParam +
cmp ecx ebx +
jz loc_100CFAB  +
cmp eax ebx +
jz loc_100CFAB  +
cmp [ebp+arg_C] ebx +
jz loc_100CF94  +
mov eax ecx +
push eax  +
mov eax [edi+4] +
push 1  +
push 172h  +
push dword ptr [eax+20Ch]  +
call ds:SendMessageW  +
mov eax [edi+4] +
mov ecx [eax+210h] +
mov [edi+4] ecx +
cmp eax ebx +
jz loc_100CFCA  +
push eax  +
push ebx  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
mov ecx [edi+4] +
cmp ecx ebx +
jz loc_100D238  +
mov eax dword_10191A0 +
cmp eax ebx +
jz loc_100D238  +
push 1  +
push eax  +
push 30h  +
push dword ptr [ecx+208h]  +
call ds:SendMessageW  +
jmp loc_100D238  +
mov edi [ebp+hWnd] +
xor ebx ebx +
cmp edi ebx +
jz loc_100D238  +
cmp dword_10191B0 ebx +
jz loc_100D022  +
push 1  +
push ebx  +
mov eax offset dword_10191B0 +
call sub_100CD0A  +
cmp dword_10191B0 ebx +
jnz loc_100D04C  +
mov eax wParam +
mov esi ds:DeleteObject +
cmp eax ebx +
jz loc_100D03A  +
push eax  +
call esi  +
mov wParam ebx +
mov eax dword_10191A0 +
cmp eax ebx +
jz loc_100D04C  +
push eax  +
call esi  +
mov dword_10191A0 ebx +
push 1  +
push edi  +
call ds:EndDialog  +
jmp loc_100D238  +
mov eax [ebp+arg_C] +
xor ebx ebx +
mov [ebp+arg_4] ebx +
cmp eax ebx +
jz loc_100D228  +
mov esi [eax] +
mov edi [eax+4] +
mov eax [eax+0Ch] +
mov [ebp+hEvent] eax +
cmp esi ebx +
jz loc_100D228  +
cmp edi ebx +
jz loc_100D228  +
cmp eax ebx +
jz loc_100D228  +
lea eax [ebp+arg_4] +
push eax  +
push edi  +
call sub_100CC85  +
mov edi [edi+210h] +
cmp edi ebx +
jnz loc_100D08D  +
mov edi [ebp+hWnd] +
push ebx  +
push [ebp+arg_4]  +
mov eax offset dword_10191B0 +
call sub_100CD0A  +
cmp [esi] bx +
jz loc_100D0BF  +
push esi  +
push edi  +
call ds:SetWindowTextW  +
mov eax [esi+208h] +
cmp eax ebx +
jz loc_100D0D6  +
push eax  +
push 3E8h  +
push edi  +
call ds:SetDlgItemTextW  +
mov eax [esi+214h] +
cmp eax ebx +
jz loc_100D0F3  +
push ebx  +
push eax  +
push 170h  +
push 0E0h  +
push edi  +
call ds:SendDlgItemMessageW  +
push [ebp+arg_4]  +
push edi  +
call sub_100CA2A  +
mov eax [esi+20Ch] +
cmp eax ebx +
jnz loc_100D114  +
cmp [esi+210h] ebx +
jz loc_100D1A1  +
cmp eax ebx +
jl loc_100D11E  +
cmp [esi+210h] ebx +
jge loc_100D189  +
push ebx  +
lea eax [ebp+pvParam] +
push eax  +
push ebx  +
push 30h  +
call ds:SystemParametersInfoW  +
test eax eax +
jz loc_100D189  +
lea eax [ebp+Rect] +
push eax  +
push edi  +
call ds:GetWindowRect  +
mov eax [ebp+Rect.left] +
sub eax [ebp+Rect.right] +
push 1  +
add eax [ebp+var_24] +
mov [ebp+Points.x] eax +
mov eax [ebp+Rect.top] +
sub eax [ebp+Rect.bottom] +
add eax [ebp+var_20] +
mov [ebp+Points.y] eax +
lea eax [ebp+Points] +
push eax  +
push edi  +
push ebx  +
call ds:MapWindowPoints  +
mov eax [esi+20Ch] +
cmp eax ebx +
jge loc_100D176  +
mov ecx [ebp+Points.x] +
add eax ecx +
mov [esi+20Ch] eax +
lea eax [esi+210h] +
mov ecx [eax] +
cmp ecx ebx +
jge loc_100D189  +
mov edx [ebp+Points.y] +
add ecx edx +
mov [eax] ecx +
push 5  +
push ebx  +
push ebx  +
push dword ptr [esi+210h]  +
push dword ptr [esi+20Ch]  +
push ebx  +
push edi  +
call ds:SetWindowPos  +
mov esi ds:GetDlgItem +
cmp wParam ebx +
jnz loc_100D1CC  +
push ebx  +
push 190h  +
push ebx  +
push 3E8h  +
push edi  +
call esi  +
xor edx edx +
mov ecx eax +
call sub_100CDA1  +
mov wParam eax +
mov eax dword_10191A0 +
cmp eax ebx +
jnz loc_100D1F2  +
push ebx  +
push 2BCh  +
push ebx  +
push 3E8h  +
push edi  +
call esi  +
xor edx edx +
mov ecx eax +
call sub_100CDA1  +
mov dword_10191A0 eax +
mov ecx [ebp+arg_4] +
cmp ecx ebx +
jz loc_100D20E  +
cmp eax ebx +
jz loc_100D20E  +
push 1  +
push eax  +
push 30h  +
push dword ptr [ecx+208h]  +
call ds:SendMessageW  +
push 5  +
push edi  +
call ds:ShowWindow  +
mov eax [ebp+arg_C] +
push [ebp+hEvent]  +
mov [eax+8] edi +
call ds:SetEvent  +
jmp loc_100D238  +
push ebx  +
push ebx  +
push 401h  +
push [ebp+hWnd]  +
call ds:PostMessageW  +
pop edi  +
pop esi  +
xor eax eax +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push ebx  +
mov ebx [ebp+hObject] +
mov eax [ebx+0Ch] +
push esi  +
push edi  +
push ebx  +
push offset DialogFunc  +
xor edi edi +
push edi  +
push 84h  +
push hInstance  +
mov [ebp+hObject] eax +
call ds:CreateDialogParamW  +
mov esi ds:GetMessageW +
push edi  +
push edi  +
mov [ebp+var_4] eax +
push eax  +
jmp loc_100D29B  +
lea eax [ebp+Msg] +
push eax  +
call ds:TranslateMessage  +
lea eax [ebp+Msg] +
push eax  +
call ds:DispatchMessageW  +
push edi  +
push edi  +
push [ebp+var_4]  +
lea eax [ebp+Msg] +
push eax  +
call esi  +
test eax eax +
jnz loc_100D282  +
push edi  +
push [ebp+hObject]  +
call ds:WaitForSingleObject  +
cmp eax 102h +
jnz loc_100D2C4  +
push dword ptr [ebx+0Ch]  +
mov [ebx+8] edi +
call ds:SetEvent  +
jmp loc_100D2CD  +
push [ebp+hObject]  +
call ds:CloseHandle  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push ebx  +
xor ebx ebx +
cmp [ebp+hObject] ebx +
jz loc_100D365  +
mov eax [ebp+arg_4] +
cmp eax ebx +
jz loc_100D365  +
xor ecx ecx +
cmp cx [eax] +
jz loc_100D365  +
push esi  +
push edi  +
xor eax eax +
lea edi [ebp+Parameter] +
stos   +
stos   +
push ebx  +
push ebx  +
stos   +
push 1  +
push ebx  +
stos   +
call ds:CreateEventW  +
mov esi eax +
cmp esi ebx +
jz loc_100D35E  +
mov eax [ebp+hObject] +
mov [ebp+Parameter] eax +
mov eax [ebp+arg_4] +
mov [ebp+var_10] eax +
lea eax [ebp+ThreadId] +
push eax  +
push ebx  +
lea eax [ebp+Parameter] +
push eax  +
push offset StartAddress  +
push ebx  +
push ebx  +
mov [ebp+var_C] ebx +
mov [ebp+var_8] esi +
call ds:CreateThread  +
mov edi ds:CloseHandle +
mov [ebp+hObject] eax +
cmp eax ebx +
jz loc_100D356  +
push 0FFFFFFFFh  +
push esi  +
call ds:WaitForSingleObject  +
push [ebp+hObject]  +
call edi  +
cmp [ebp+var_C] ebx +
jnz loc_100D35E  +
push esi  +
call edi  +
mov eax [ebp+var_C] +
pop edi  +
pop esi  +
jmp loc_100D36F  +
push 57h  +
call ds:SetLastError  +
xor eax eax +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
xor eax eax +
jmp loc_100D395  +
test eax eax +
jnz loc_100D39A  +
mov ecx [esi] +
test ecx ecx +
jz loc_100D392  +
call ecx  +
add esi 4 +
cmp esi [ebp+arg_4] +
jb loc_100D386  +
pop esi  +
pop ebp  +
retn   +
***
mov eax dword_10191D8 +
push offset dword_10191C8  +
push dword_10191D4  +
mov dword_10191C8 eax +
push offset unk_10191B8  +
push offset unk_10191BC  +
push offset unk_10191B4  +
call ds:__wgetmainargs  +
add esp 14h +
mov dword_10191C4 eax +
retn   +
***
call __SEH_prolog4  +
xor ebx ebx +
mov [ebp+var_1C] ebx +
mov [ebp+ms_exc.disabled] ebx +
lea eax [ebp+StartupInfo] +
push eax  +
call ds:GetStartupInfoW  +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov [ebp+ms_exc.disabled] 1 +
mov eax large fs:18h +
mov esi [eax+4] +
mov [ebp+var_20] ebx +
mov edi offset Destination +
push ebx  +
push esi  +
push edi  +
call ds:InterlockedCompareExchange  +
cmp eax ebx +
jz loc_100D43D  +
cmp eax esi +
jnz loc_100D430  +
xor esi esi +
inc esi  +
mov [ebp+var_20] esi +
jmp loc_100D440  +
push 3E8h  +
call ds:Sleep  +
jmp loc_100D417  +
xor esi esi +
inc esi  +
mov eax dword_10195D0 +
cmp eax esi +
jnz loc_100D453  +
push 1Fh  +
call _amsg_exit  +
pop ecx  +
jmp loc_100D482  +
mov eax dword_10195D0 +
test eax eax +
jnz loc_100D47C  +
mov dword_10195D0 esi +
push offset dword_10012FC  +
push offset dword_10012F0  +
call sub_100D379  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_100D482  +
jmp loc_100D5A6  +
mov dword_10191D0 esi +
mov eax dword_10195D0 +
cmp eax esi +
jnz loc_100D4A6  +
push offset dword_10012EC  +
push offset dword_10012D4  +
call _initterm  +
pop ecx  +
pop ecx  +
mov dword_10195D0 2 +
cmp [ebp+var_20] ebx +
jnz loc_100D4B3  +
push ebx  +
push edi  +
call ds:InterlockedExchange  +
cmp dword_10195E0 ebx +
jz loc_100D4D4  +
push offset dword_10195E0  +
call sub_100D899  +
pop ecx  +
test eax eax +
jz loc_100D4D4  +
push ebx  +
push 2  +
push ebx  +
call dword_10195E0  +
mov eax ds:_wcmdln +
cmp [eax] ebx +
jz loc_100D5A6  +
mov eax [eax] +
mov [ebp+var_24] eax +
movzx ecx word ptr [eax] +
cmp cx 20h +
ja $LN58  +
cmp cx bx +
jz loc_100D4F9  +
cmp [ebp+var_1C] ebx +
jnz $LN58  +
movzx ecx word ptr [eax] +
cmp cx bx +
jz loc_100D50E  +
cmp cx 20h +
ja loc_100D50E  +
inc eax  +
inc eax  +
mov [ebp+var_24] eax +
jmp loc_100D4F9  +
test byte ptr [ebp+StartupInfo.dwFlags] 1 +
jz loc_100D51A  +
movzx ecx [ebp+StartupInfo.wShowWindow] +
jmp loc_100D51D  +
push 0Ah  +
pop ecx  +
push ecx  +
push eax  +
push ebx  +
push 1000000h  +
call _wWinMain@16  +
mov dword_10191CC eax +
cmp dword_10191C0 ebx +
jnz $LN59  +
push eax  +
call ds:exit  +
cmp cx 22h +
jnz loc_100D54F  +
xor ecx ecx +
cmp [ebp+var_1C] ebx +
setz cl  +
mov [ebp+var_1C] ecx +
inc eax  +
inc eax  +
jmp loc_100D4E3  +
mov eax [ebp-14h] +
mov ecx [eax] +
mov ecx [ecx] +
mov [ebp-28h] ecx +
push eax  +
push ecx  +
call _XcptFilter  +
pop ecx  +
pop ecx  +
retn   +
mov esp [ebp-18h] +
mov eax [ebp-28h] +
mov dword_10191CC eax +
xor ebx ebx +
cmp dword_10191C0 ebx +
jnz $LN59  +
push eax  +
call ds:_exit  +
cmp dword_10191D0 ebx +
jnz loc_100D591  +
call ds:_cexit  +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov eax dword_10191CC +
jmp loc_100D5B2  +
xor eax eax +
inc eax  +
retn   +
mov esp [ebp-18h] +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov eax 0FFh +
call __SEH_epilog4  +
retn   +
***
mov eax 5A4Dh +
cmp ds:1000000h ax +
jz loc_100D5CF  +
xor eax eax +
jmp loc_100D61C  +
mov eax ds:100003Ch +
lea eax [eax+1000000h] +
cmp dword ptr [eax] 4550h +
jnz loc_100D5CB  +
movzx ecx word ptr [eax+18h] +
cmp ecx 10Bh +
jz loc_100D609  +
cmp ecx 20Bh +
jnz loc_100D5CB  +
cmp dword ptr [eax+84h] 0Eh +
jbe loc_100D5CB  +
xor ecx ecx +
cmp [eax+0F8h] ecx +
jmp loc_100D617  +
cmp dword ptr [eax+74h] 0Eh +
jbe loc_100D5CB  +
xor ecx ecx +
cmp [eax+0E8h] ecx +
setnz cl  +
mov eax ecx +
push 2  +
mov dword_10191C0 eax +
call sub_100DA32  +
push eax  +
call ds:__set_app_type  +
or dword_10195D8 0FFFFFFFFh +
or dword_10195DC 0FFFFFFFFh +
pop ecx  +
pop ecx  +
call ds:__p__fmode  +
mov ecx dword_10191E0 +
mov [eax] ecx +
call ds:__p__commode  +
mov ecx dword_10191DC +
mov [eax] ecx +
call sub_100D9C4  +
cmp dword_10190A8 0 +
jnz loc_100D675  +
push offset sub_100D9C4  +
call ds:__setusermatherr  +
pop ecx  +
call sub_100D9AC  +
xor eax eax +
retn   +
***
call sub_100DA71  +
jmp ___tmainCRTStartup  +
***
cmp ecx dword_101908C +
jnz loc_100D69C  +
retn 0  +
jmp loc_100DB07  +
***
mov eax [esp+arg_4] +
mov ecx [esp+arg_C] +
or ecx eax +
mov ecx [esp+arg_8] +
jnz loc_100D6C9  +
mov eax [esp+arg_0] +
mul  ecx +
retn 10h  +
push ebx  +
mul  ecx +
mov ebx eax +
mov eax [esp+4+arg_0] +
mul  [esp+4+arg_C] +
add ebx eax +
mov eax [esp+4+arg_0] +
mul  ecx +
add edx ebx +
pop ebx  +
retn 10h  +
***
call __SEH_prolog4  +
pop ecx  +
retn   +
***
push ebp  +
mov ebp esp +
push dword ptr [ebp+8]  +
call sub_100D6F5  +
neg eax  +
sbb eax eax +
neg eax  +
pop ecx  +
dec eax  +
pop ebp  +
retn   +
***
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov eax [eax] +
cmp dword ptr [eax] 0E06D7363h +
jnz loc_100D7D8  +
cmp dword ptr [eax+10h] 3 +
jnz loc_100D7D8  +
mov eax [eax+14h] +
cmp eax 19930520h +
jz loc_100D7D2  +
cmp eax 19930521h +
jz loc_100D7D2  +
cmp eax 19930522h +
jz loc_100D7D2  +
cmp eax 1994000h +
jnz loc_100D7D8  +
call ds:?terminate@@YAXXZ  +
xor eax eax +
pop ebp  +
retn 4  +
***
push (offset dword_100D798+3)  +
call ds:SetUnhandledExceptionFilter  +
xor eax eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
mov eax 5A4Dh +
cmp [ecx] ax +
jz loc_100D826  +
xor eax eax +
pop ebp  +
retn   +
mov eax [ecx+3Ch] +
add eax ecx +
cmp dword ptr [eax] 4550h +
jnz loc_100D822  +
xor edx edx +
mov ecx 10Bh +
cmp [eax+18h] cx +
setz dl  +
mov eax edx +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [eax+3Ch] +
add ecx eax +
movzx eax word ptr [ecx+14h] +
push ebx  +
push esi  +
movzx esi word ptr [ecx+6] +
xor edx edx +
push edi  +
lea eax [eax+ecx+18h] +
test esi esi +
jbe loc_100D88D  +
mov edi [ebp+arg_4] +
mov ecx [eax+0Ch] +
cmp edi ecx +
jb loc_100D885  +
mov ebx [eax+8] +
add ebx ecx +
cmp edi ebx +
jb loc_100D88F  +
inc edx  +
add eax 28h +
cmp edx esi +
jb loc_100D875  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
call __SEH_prolog4  +
and [ebp+ms_exc.disabled] 0 +
mov esi 1000000h +
push esi  +
call sub_100D810  +
pop ecx  +
test eax eax +
jz loc_100D8F6  +
mov eax [ebp+arg_0] +
sub eax esi +
push eax  +
push esi  +
call sub_100D850  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_100D8F6  +
mov eax [eax+24h] +
shr eax 1Fh +
not eax  +
and eax 1 +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
jmp loc_100D8FF  +
mov eax [ebp-14h] +
mov eax [eax] +
mov eax [eax] +
xor ecx ecx +
cmp eax 0C0000005h +
setz cl  +
mov eax ecx +
retn   +
mov esp [ebp-18h] +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
xor eax eax +
call __SEH_epilog4  +
retn   +
***
mov eax [esp+8+arg_4] +
mov ecx [ebp-10h] +
mov large fs:0 ecx +
pop ecx  +
pop edi  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
push ecx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push offset sub_100D691  +
push offset dword_101908C  +
call _except_handler4_common  +
add esp 18h +
pop ebp  +
retn   +
***
call ds:_controlfp  +
pop ecx  +
pop ecx  +
retn   +
***
retn   +
***
call __SEH_prolog4  +
xor eax eax +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_100DA25  +
cmp ecx 0FFFFFFFFh +
jz loc_100DA25  +
and [ebp+ms_exc.disabled] eax +
mov edx 5A4Dh +
cmp [ecx] dx +
jnz loc_100DA1E  +
mov edx [ecx+3Ch] +
test edx edx +
jl loc_100DA1E  +
cmp edx 10000000h +
jnb loc_100DA1E  +
lea eax [edx+ecx] +
mov [ebp+var_1C] eax +
cmp dword ptr [eax] 4550h +
jz loc_100DA1E  +
jmp loc_100DA19  +
xor eax eax +
inc eax  +
retn   +
mov esp [ebp-18h] +
xor eax eax +
mov [ebp+var_1C] eax +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
call __SEH_epilog4  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
call ds:GetModuleHandleA  +
test eax eax +
jz loc_100DA67  +
push eax  +
call sub_100D9CC  +
test eax eax +
jz loc_100DA67  +
movzx eax word ptr [eax+5Ch] +
cmp ax 2 +
jnz loc_100DA5C  +
push 2  +
pop eax  +
pop ebp  +
retn   +
cmp ax 3 +
jnz loc_100DA67  +
xor eax eax +
inc eax  +
pop ebp  +
retn   +
mov eax [ebp+arg_0] +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov eax dword_101908C +
and [ebp+SystemTimeAsFileTime.dwLowDateTime] 0 +
and [ebp+SystemTimeAsFileTime.dwHighDateTime] 0 +
push ebx  +
push edi  +
mov edi 0BB40E64Eh +
mov ebx 0FFFF0000h +
cmp eax edi +
jz loc_100DAA3  +
test eax ebx +
jz loc_100DAA3  +
not eax  +
mov dword_1019090 eax +
jmp loc_100DAFE  +
push esi  +
lea eax [ebp+SystemTimeAsFileTime] +
push eax  +
call ds:GetSystemTimeAsFileTime  +
mov esi [ebp+SystemTimeAsFileTime.dwHighDateTime] +
xor esi [ebp+SystemTimeAsFileTime.dwLowDateTime] +
call ds:GetCurrentProcessId  +
xor esi eax +
call ds:GetCurrentThreadId  +
xor esi eax +
call ds:GetTickCount  +
xor esi eax +
lea eax [ebp+PerformanceCount] +
push eax  +
call ds:QueryPerformanceCounter  +
mov eax dword ptr [ebp+PerformanceCount+4] +
xor eax dword ptr [ebp+PerformanceCount] +
xor esi eax +
cmp esi edi +
jz loc_100DAEA  +
test dword_101908C ebx +
jnz loc_100DAEF  +
mov esi 0BB40E64Fh +
mov dword_101908C esi +
not esi  +
mov dword_1019090 esi +
pop esi  +
pop edi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 328h +
mov dword_10192E8 eax +
mov dword_10192E4 ecx +
mov dword_10192E0 edx +
mov dword_10192DC ebx +
mov dword_10192D8 esi +
mov dword_10192D4 edi +
mov word_1019300 ss +
mov word_10192F4 cs +
mov word_10192D0 ds +
mov word_10192CC es +
mov word_10192C8 fs +
mov word_10192C4 gs +
pushf   +
pop dword_10192F8  +
mov eax [ebp+0] +
mov dword_10192EC eax +
mov eax [ebp+4] +
mov dword_10192F0 eax +
lea eax [ebp+8] +
mov dword_10192FC eax +
mov eax [ebp-320h] +
mov dword_1019238 10001h +
mov eax dword_10192F0 +
mov dword_10191F4 eax +
mov dword_10191E8 0C0000409h +
mov dword_10191EC 1 +
mov eax dword_101908C +
mov [ebp-328h] eax +
mov eax dword_1019090 +
mov [ebp-324h] eax +
push 0  +
call ds:SetUnhandledExceptionFilter  +
push offset ExceptionInfo  +
call ds:UnhandledExceptionFilter  +
push 0C0000409h  +
call ds:GetCurrentProcess  +
push eax  +
call ds:TerminateProcess  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_100DCBE  +
mov eax [eax] +
mov [ebp+arg_0] eax +
test eax eax +
jz loc_100DCBE  +
mov ecx [ebp+arg_4] +
push ebx  +
push esi  +
push edi  +
mov esi ecx +
and esi 4000000h +
mov edi ecx +
and edi 3000000h +
mov eax ecx +
and eax 2000000h +
push 0  +
pop edx  +
setnz dl  +
xor ebx ebx +
test edi edi +
setnz bl  +
add edx ebx +
xor ebx ebx +
test esi esi +
setnz bl  +
add edx ebx +
jz loc_100DCBB  +
or eax edi +
or eax esi +
lea edx [ebp+arg_C] +
push edx  +
push [ebp+arg_8]  +
mov edx eax +
not edx  +
and edx ecx +
push edx  +
push eax  +
call [ebp+arg_0]  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push esi  +
xor esi esi +
cmp [ebp+hKey] esi +
jz loc_100DD5C  +
cmp [ebp+lpData] esi +
jz loc_100DD5C  +
push edi  +
cmp [ebp+lpSubKey] esi +
jz loc_100DD33  +
lea eax [ebp+dwDisposition] +
push eax  +
lea eax [ebp+phkResult] +
push eax  +
push esi  +
push 20006h  +
push esi  +
push offset Class  +
push esi  +
push [ebp+lpSubKey]  +
mov [ebp+phkResult] esi +
push [ebp+hKey]  +
mov [ebp+dwDisposition] esi +
call ds:RegCreateKeyExW  +
mov edi eax +
cmp edi esi +
jnz loc_100DD4B  +
push [ebp+cbData]  +
push [ebp+lpData]  +
push [ebp+dwType]  +
push esi  +
push [ebp+lpValueName]  +
push [ebp+phkResult]  +
call ds:RegSetValueExW  +
push [ebp+phkResult]  +
mov edi eax +
call ds:RegCloseKey  +
jmp loc_100DD4B  +
push [ebp+cbData]  +
push [ebp+lpData]  +
push [ebp+dwType]  +
push esi  +
push [ebp+lpValueName]  +
push [ebp+hKey]  +
call ds:RegSetValueExW  +
mov edi eax +
push edi  +
call ds:SetLastError  +
xor eax eax +
cmp edi esi +
setz al  +
pop edi  +
jmp loc_100DD66  +
push 57h  +
call ds:SetLastError  +
xor eax eax +
pop esi  +
leave   +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ebp+arg_0] +
push edi  +
xor edi edi +
mov [ebp+hKey] edi +
cmp eax edi +
jnz loc_100DD92  +
push 57h  +
call ds:SetLastError  +
xor eax eax +
pop edi  +
leave   +
retn 0Ch  +
push esi  +
cmp [ebp+lpSubKey] edi +
jz loc_100DDC3  +
lea ecx [ebp+hKey] +
push ecx  +
push 20019h  +
push edi  +
push [ebp+lpSubKey]  +
push eax  +
call ds:RegOpenKeyExW  +
test eax eax +
jnz loc_100DDB5  +
cmp [ebp+hKey] edi +
jnz loc_100DDC6  +
xor esi esi +
push edi  +
call ds:SetLastError  +
mov eax esi +
pop esi  +
jmp loc_100DD8D  +
mov [ebp+hKey] eax +
cmp [ebp+lpValueName] edi +
jz loc_100DDE4  +
push edi  +
push edi  +
push edi  +
push edi  +
push [ebp+lpValueName]  +
push [ebp+hKey]  +
call ds:RegQueryValueExW  +
mov esi eax +
neg esi  +
sbb esi esi +
inc esi  +
jmp loc_100DDE7  +
xor esi esi +
inc esi  +
cmp [ebp+lpSubKey] edi +
jz loc_100DDB7  +
push [ebp+hKey]  +
call ds:RegCloseKey  +
jmp loc_100DDB7  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+hKey] +
push edi  +
xor edi edi +
cmp eax edi +
jnz loc_100DE17  +
push 57h  +
call ds:SetLastError  +
xor eax eax +
jmp loc_100DE89  +
push esi  +
cmp [ebp+lpValueName] edi +
jz loc_100DE64  +
cmp [ebp+lpSubKey] edi +
jz loc_100DE58  +
lea ecx [ebp+hKey] +
push ecx  +
push 20006h  +
push edi  +
push [ebp+lpSubKey]  +
mov [ebp+hKey] edi +
push eax  +
call ds:RegOpenKeyExW  +
mov esi eax +
cmp esi edi +
jnz loc_100DE7A  +
push [ebp+lpValueName]  +
push [ebp+hKey]  +
call ds:RegDeleteValueW  +
push [ebp+hKey]  +
mov esi eax +
call ds:RegCloseKey  +
jmp loc_100DE7A  +
push [ebp+lpValueName]  +
push eax  +
call ds:RegDeleteValueW  +
jmp loc_100DE73  +
cmp [ebp+lpSubKey] edi +
jz loc_100DE77  +
push [ebp+lpSubKey]  +
push eax  +
call ds:RegDeleteKeyW  +
mov esi eax +
jmp loc_100DE7A  +
push 57h  +
pop esi  +
push esi  +
call ds:SetLastError  +
xor eax eax +
cmp esi edi +
setz al  +
pop esi  +
pop edi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov eax [ebp+dwErrCode] +
push edi  +
xor edi edi +
mov [ebp+hKey] edi +
mov [ebp+lpMem] edi +
mov [ebp+nSize] edi +
mov [ebp+Type] edi +
cmp eax edi +
jnz loc_100DEC1  +
push 57h  +
call ds:SetLastError  +
xor eax eax +
pop edi  +
leave   +
retn 10h  +
cmp [ebp+lpSubKey] edi +
jz loc_100DEF3  +
lea ecx [ebp+hKey] +
push ecx  +
push 20019h  +
push edi  +
push [ebp+lpSubKey]  +
push eax  +
call ds:RegOpenKeyExW  +
mov [ebp+dwErrCode] eax +
cmp eax edi +
jnz loc_100DEE6  +
cmp [ebp+hKey] edi +
jnz loc_100DEF6  +
push [ebp+dwErrCode]  +
call ds:SetLastError  +
mov eax edi +
jmp loc_100DEBC  +
mov [ebp+hKey] eax +
push ebx  +
mov ebx ds:RegQueryValueExW +
lea eax [ebp+nSize] +
push eax  +
push edi  +
lea eax [ebp+Type] +
push eax  +
push edi  +
push [ebp+lpValueName]  +
push [ebp+hKey]  +
call ebx  +
mov [ebp+dwErrCode] eax +
cmp eax edi +
jnz loc_100E047  +
cmp [ebp+Type] 1 +
jz loc_100DF32  +
cmp [ebp+Type] 2 +
jz loc_100DF32  +
mov [ebp+dwErrCode] 0Dh +
jmp loc_100E047  +
push esi  +
push [ebp+nSize]  +
mov esi ds:GetProcessHeap +
push 8  +
call esi  +
push eax  +
call ds:HeapAlloc  +
mov [ebp+lpMem] eax +
cmp eax edi +
jz loc_100E03D  +
lea ecx [ebp+nSize] +
push ecx  +
push eax  +
push edi  +
push edi  +
push [ebp+lpValueName]  +
push [ebp+hKey]  +
call ebx  +
mov [ebp+dwErrCode] eax +
cmp eax edi +
jnz loc_100DF7B  +
cmp [ebp+Type] 1 +
jz loc_100DF90  +
cmp [ebp+Type] 2 +
jz loc_100DF90  +
mov [ebp+dwErrCode] 0Dh +
push [ebp+lpMem]  +
push edi  +
call esi  +
push eax  +
call ds:HeapFree  +
mov [ebp+lpMem] edi +
jmp loc_100E046  +
cmp [ebp+arg_C] 1 +
jnz loc_100E046  +
cmp [ebp+Type] 2 +
jnz loc_100E046  +
mov ebx ds:ExpandEnvironmentStringsW +
push edi  +
push edi  +
push [ebp+lpMem]  +
call ebx  +
mov [ebp+nSize] eax +
cmp eax edi +
jz loc_100E01E  +
add eax eax +
push eax  +
push 8  +
call esi  +
push eax  +
call ds:HeapAlloc  +
mov [ebp+lpValueName] eax +
cmp eax edi +
jz loc_100DFEF  +
push [ebp+nSize]  +
push eax  +
push [ebp+lpMem]  +
call ebx  +
test eax eax +
jz loc_100DFEF  +
push [ebp+lpMem]  +
push edi  +
call esi  +
push eax  +
call ds:HeapFree  +
mov eax [ebp+lpValueName] +
mov [ebp+lpMem] eax +
jmp loc_100E046  +
call ds:GetLastError  +
push [ebp+lpMem]  +
mov [ebp+dwErrCode] eax +
push edi  +
call esi  +
mov ebx ds:HeapFree +
push eax  +
call ebx  +
cmp [ebp+lpValueName] edi +
jz loc_100DF88  +
push [ebp+lpValueName]  +
push edi  +
call esi  +
push eax  +
call ebx  +
jmp loc_100DF88  +
call ds:GetLastError  +
push [ebp+lpMem]  +
mov [ebp+dwErrCode] eax +
push edi  +
call esi  +
push eax  +
call ds:HeapFree  +
test eax eax +
jz loc_100E046  +
jmp loc_100DF88  +
call ds:GetLastError  +
mov [ebp+dwErrCode] eax +
pop esi  +
pop ebx  +
cmp [ebp+lpSubKey] edi +
jz loc_100E056  +
push [ebp+hKey]  +
call ds:RegCloseKey  +
mov edi [ebp+lpMem] +
jmp loc_100DEE6  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+lpValueName]  +
push [ebp+lpSubKey]  +
push [ebp+dwErrCode]  +
call sub_100DE94  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov eax [ebp+arg_0] +
push esi  +
xor esi esi +
mov [ebp+hKey] esi +
mov dword ptr [ebp+Data] esi +
mov [ebp+cbData] 4 +
mov [ebp+Type] esi +
cmp eax esi +
jnz loc_100E0AF  +
push 57h  +
call ds:SetLastError  +
xor eax eax +
jmp loc_100E11C  +
cmp [ebp+lpSubKey] esi +
jz loc_100E0D4  +
lea ecx [ebp+hKey] +
push ecx  +
push 20019h  +
push esi  +
push [ebp+lpSubKey]  +
push eax  +
call ds:RegOpenKeyExW  +
cmp eax esi +
jnz loc_100E0D1  +
cmp [ebp+hKey] esi +
jnz loc_100E0D7  +
push eax  +
jmp loc_100E0A5  +
mov [ebp+hKey] eax +
push edi  +
lea eax [ebp+cbData] +
push eax  +
lea eax [ebp+Data] +
push eax  +
lea eax [ebp+Type] +
push eax  +
push esi  +
push [ebp+lpValueName]  +
push [ebp+hKey]  +
call ds:RegQueryValueExW  +
mov edi eax +
cmp edi esi +
jnz loc_100E100  +
cmp [ebp+cbData] 4 +
jz loc_100E103  +
push 0Dh  +
pop edi  +
mov dword ptr [ebp+Data] esi +
cmp [ebp+lpSubKey] esi +
jz loc_100E111  +
push [ebp+hKey]  +
call ds:RegCloseKey  +
push edi  +
call ds:SetLastError  +
mov eax dword ptr [ebp+Data] +
pop edi  +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 4  +
lea eax [ebp+Data] +
push eax  +
push 4  +
push [ebp+lpValueName]  +
push [ebp+lpSubKey]  +
push [ebp+hKey]  +
call sub_100DCC5  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 224h +
mov eax dword_101908C +
xor eax ebp +
mov [ebp+var_4] eax +
mov ecx [ebp+hKey] +
mov eax [ebp+lpSubKey] +
push edi  +
xor edi edi +
mov [ebp+var_220] ecx +
mov [ebp+var_224] eax +
mov [ebp+phkResult] edi +
cmp ecx edi +
jz loc_100E36B  +
cmp ecx 0FFFFFFFFh +
jz loc_100E36B  +
cmp eax edi +
jz loc_100E36B  +
xor edx edx +
cmp dx [eax] +
jz loc_100E36B  +
push esi  +
lea edx [ebp+phkResult] +
push edx  +
mov edx [ebp+arg_8] +
or edx 2000000h +
push edx  +
push edi  +
push eax  +
push ecx  +
call ds:RegOpenKeyExW  +
mov esi eax +
cmp esi edi +
jnz loc_100E35A  +
push ebx  +
push edi  +
push edi  +
push edi  +
push edi  +
push edi  +
push edi  +
push edi  +
lea eax [ebp+cSubKeys] +
push eax  +
push edi  +
push edi  +
push edi  +
push [ebp+phkResult]  +
mov [ebp+cSubKeys] edi +
call ds:RegQueryInfoKeyW  +
mov esi eax +
cmp esi edi +
jnz loc_100E2C2  +
mov ebx [ebp+cSubKeys] +
xor esi esi +
dec ebx  +
cmp ebx edi +
jl loc_100E260  +
cmp esi edi +
jnz loc_100E252  +
push 105h  +
lea eax [ebp+SubKey] +
push eax  +
push ebx  +
push [ebp+phkResult]  +
call ds:RegEnumKeyW  +
mov esi eax +
cmp esi edi +
jnz loc_100E24F  +
push [ebp+arg_8]  +
lea eax [ebp+SubKey] +
push eax  +
push [ebp+phkResult]  +
call sub_100E14A  +
test eax eax +
jnz loc_100E24F  +
mov esi ds:GetLastError +
call esi  +
test eax eax +
jz loc_100E24C  +
call esi  +
mov esi eax +
jmp loc_100E24F  +
push 1Fh  +
pop esi  +
dec ebx  +
jns loc_100E1FE  +
cmp esi 103h +
jnz loc_100E25C  +
xor esi esi +
cmp esi edi +
jnz loc_100E2C2  +
mov ebx ds:RegEnumValueW +
jmp loc_100E28D  +
lea eax [ebp+SubKey] +
push eax  +
push [ebp+phkResult]  +
call ds:RegDeleteValueW  +
test eax eax +
jnz loc_100E28D  +
mov esi ds:GetLastError +
call esi  +
test eax eax +
jz loc_100E28D  +
call esi  +
push edi  +
push edi  +
push edi  +
push edi  +
lea eax [ebp+var_218] +
push eax  +
lea eax [ebp+SubKey] +
push eax  +
push edi  +
push [ebp+phkResult]  +
mov [ebp+var_218] 105h +
call ebx  +
mov esi eax +
cmp esi edi +
jz loc_100E268  +
cmp esi 103h +
jnz loc_100E2C2  +
xor esi esi +
push [ebp+phkResult]  +
call ds:RegCloseKey  +
cmp esi edi +
jnz loc_100E359  +
cmp eax edi +
jz loc_100E2DE  +
mov esi eax +
jmp loc_100E359  +
mov esi offset ModuleName +
push esi  +
mov [ebp+var_218] edi +
call ds:GetModuleHandleW  +
mov ebx eax +
cmp ebx edi +
jnz loc_100E30D  +
push esi  +
call ds:LoadLibraryW  +
mov ebx eax +
cmp ebx edi +
jz loc_100E331  +
mov [ebp+var_218] 1 +
push offset aRegdeletekeyex  +
push ebx  +
call ds:GetProcAddress  +
cmp eax edi +
jz loc_100E331  +
push edi  +
push [ebp+arg_8]  +
push [ebp+var_224]  +
push [ebp+var_220]  +
call eax  +
jmp loc_100E343  +
push [ebp+var_224]  +
push [ebp+var_220]  +
call ds:RegDeleteKeyW  +
cmp [ebp+var_218] 1 +
mov esi eax +
jnz loc_100E359  +
cmp ebx edi +
jz loc_100E359  +
push ebx  +
call ds:FreeLibrary  +
pop ebx  +
push esi  +
call ds:SetLastError  +
xor eax eax +
cmp esi edi +
setz al  +
pop esi  +
jmp loc_100E375  +
push 57h  +
call ds:SetLastError  +
xor eax eax +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop edi  +
call sub_100D691  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov ebx eax +
mov esi edx +
xor eax eax +
xor edi edi +
test esi esi +
jz loc_100E3BE  +
cmp [ebp+arg_4] eax +
jz loc_100E3BA  +
movzx edx word ptr [ebx] +
test dx dx +
jz loc_100E3BA  +
mov [ecx] dx +
inc ecx  +
inc ecx  +
inc ebx  +
inc ebx  +
dec esi  +
dec [ebp+arg_4]  +
inc edi  +
test esi esi +
jnz loc_100E39D  +
test esi esi +
jnz loc_100E3C6  +
dec ecx  +
dec ecx  +
dec edi  +
mov eax 8007007Ah +
xor edx edx +
mov [ecx] dx +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_100E3D4  +
mov [ecx] edi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push edi  +
test eax eax +
jz loc_100E431  +
mov di [ebp+arg_4] +
xor ecx ecx +
cmp cx di +
jz loc_100E431  +
mov ecx eax +
push esi  +
lea esi [ecx+2] +
mov dx [ecx] +
inc ecx  +
inc ecx  +
test dx dx +
jnz loc_100E3FE  +
sub ecx esi +
sar ecx 1 +
lea ecx [eax+ecx*2] +
pop esi  +
jmp loc_100E41C  +
lea edx [ecx-2] +
cmp di [edx] +
jnz loc_100E420  +
mov ecx edx +
cmp ecx eax +
ja loc_100E412  +
xor edx edx +
mov [ecx] dx +
mov ecx large fs:18h +
and [ecx+34h] edx +
jmp loc_100E440  +
mov eax large fs:18h +
mov dword ptr [eax+34h] 57h +
xor eax eax +
pop edi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
test edi edi +
jz loc_100E4CD  +
mov eax [ebp+arg_4] +
xor ecx ecx +
cmp cx ax +
jz loc_100E4CD  +
mov esi edi +
cmp ax [edi] +
jnz loc_100E470  +
inc esi  +
inc esi  +
cmp ax [esi] +
jz loc_100E469  +
cmp [esi] cx +
jnz loc_100E487  +
xor eax eax +
mov [edi] ax +
mov eax large fs:18h +
and [eax+34h] ecx +
mov eax edi +
jmp loc_100E4DC  +
push eax  +
push esi  +
call sub_100E3E0  +
test eax eax +
jz loc_100E4DA  +
cmp esi edi +
jbe loc_100E483  +
mov eax esi +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_100E49B  +
sub eax edx +
sar eax 1 +
lea eax [eax+eax+2] +
push eax  +
push esi  +
push edi  +
call ds:memmove  +
add esp 0Ch +
test eax eax +
jz loc_100E4C9  +
mov eax large fs:18h +
and dword ptr [eax+34h] 0 +
jmp loc_100E483  +
xor edi edi +
jmp loc_100E483  +
mov eax large fs:18h +
mov dword ptr [eax+34h] 57h +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push edi  +
mov edi [ebp+arg_4] +
test edi edi +
jz loc_100E5F3  +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_100E5F3  +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_100E508  +
sub eax edx +
sar eax 1 +
mov [ebp+var_4] eax +
mov eax edi +
lea ecx [eax+2] +
mov dx [eax] +
inc eax  +
inc eax  +
test dx dx +
jnz loc_100E51E  +
sub eax ecx +
sar eax 1 +
cmp [ebp+arg_8] 0 +
push ebx  +
mov ebx eax +
push esi  +
mov [ebp+var_8] ebx +
jz loc_100E545  +
xor eax eax +
cmp [ebp+var_4] ebx +
setz al  +
mov esi eax +
jmp loc_100E54B  +
cmp [ebp+var_4] ebx +
sbb esi esi +
inc esi  +
test esi esi +
jz loc_100E5ED  +
cmp [ebp+arg_C] 0 +
jz loc_100E5D8  +
push 3Fh  +
push edi  +
call ds:wcschr  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_100E5D8  +
and [ebp+arg_4] 0 +
test ebx ebx +
jbe loc_100E5ED  +
mov ebx [ebp+arg_0] +
sub ebx edi +
mov eax [ebp+arg_4] +
cmp eax [ebp+var_4] +
jnb loc_100E5ED  +
test esi esi +
jz loc_100E5ED  +
movzx edx word ptr [edi] +
push 3Fh  +
pop eax  +
cmp ax dx +
jz loc_100E5C6  +
movzx eax word ptr [ebx+edi] +
cmp ax 61h +
jb loc_100E5A4  +
cmp ax 7Ah +
ja loc_100E5A4  +
movzx ecx ax +
sub ecx 20h +
jmp loc_100E5A7  +
movzx ecx ax +
cmp dx 61h +
jb loc_100E5BB  +
cmp dx 7Ah +
ja loc_100E5BB  +
movzx eax dx +
sub eax 20h +
jmp loc_100E5BE  +
movzx eax dx +
cmp ecx eax +
jz loc_100E5C6  +
xor esi esi +
jmp loc_100E5C9  +
xor esi esi +
inc esi  +
inc [ebp+arg_4]  +
mov eax [ebp+arg_4] +
inc edi  +
inc edi  +
cmp eax [ebp+var_8] +
jb loc_100E575  +
jmp loc_100E5ED  +
push ebx  +
push edi  +
push [ebp+arg_0]  +
call ds:_wcsnicmp  +
add esp 0Ch +
mov esi eax +
neg esi  +
sbb esi esi +
inc esi  +
mov eax esi +
pop esi  +
pop ebx  +
jmp loc_100E602  +
mov eax large fs:18h +
mov dword ptr [eax+34h] 57h +
xor eax eax +
pop edi  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_4] +
xor eax eax +
test edx edx +
jz loc_100E622  +
cmp edx 7FFFFFFFh +
jbe loc_100E627  +
mov eax 80070057h +
test eax eax +
jl loc_100E63D  +
mov eax [ebp+arg_8] +
mov ecx [ebp+arg_0] +
push 7FFFFFFEh  +
push 0  +
call sub_100E389  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_4] +
xor eax eax +
mov ecx 80070057h +
test edx edx +
jz loc_100E661  +
cmp edx 7FFFFFFFh +
jbe loc_100E663  +
mov eax ecx +
test eax eax +
jl loc_100E68C  +
cmp [ebp+arg_C] 7FFFFFFEh +
jbe loc_100E67C  +
mov edx [ebp+arg_0] +
mov eax ecx +
xor ecx ecx +
mov [edx] cx +
jmp loc_100E68C  +
push [ebp+arg_C]  +
mov eax [ebp+arg_8] +
mov ecx [ebp+arg_0] +
push 0  +
call sub_100E389  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
shr ecx 1 +
push 0  +
pop eax  +
jz loc_100E6AC  +
cmp ecx 7FFFFFFFh +
jbe loc_100E6B1  +
mov eax 80070057h +
test eax eax +
jl loc_100E6ED  +
push ebx  +
push esi  +
push edi  +
push [ebp+arg_C]  +
mov edi [ebp+arg_0] +
push [ebp+arg_8]  +
lea esi [ecx-1] +
push esi  +
push edi  +
xor ebx ebx +
call ds:_vsnwprintf  +
add esp 10h +
test eax eax +
jl loc_100E6DD  +
cmp eax esi +
ja loc_100E6DD  +
jnz loc_100E6E8  +
jmp loc_100E6E2  +
mov ebx 8007007Ah +
xor eax eax +
mov [edi+esi*2] ax +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
jnz loc_100E712  +
mov eax large fs:18h +
mov dword ptr [eax+34h] 57h +
xor eax eax +
jmp loc_100E781  +
mov eax [ebp+arg_0] +
lea ecx [eax+2] +
mov dx [eax] +
inc eax  +
inc eax  +
test dx dx +
jnz loc_100E718  +
sub eax ecx +
push esi  +
sar eax 1 +
lea esi [eax+1] +
mov eax large fs:18h +
mov eax [eax+30h] +
push edi  +
lea ecx [esi+esi] +
push ecx  +
push 8  +
push dword ptr [eax+18h]  +
call ds:RtlAllocateHeap  +
mov edi eax +
test edi edi +
jz loc_100E77D  +
push [ebp+arg_0]  +
push esi  +
push edi  +
call sub_100E60C  +
mov esi eax +
test esi esi +
jge loc_100E77D  +
mov eax large fs:18h +
mov eax [eax+30h] +
push edi  +
push 0  +
push dword ptr [eax+18h]  +
call ds:RtlFreeHeap  +
mov ecx large fs:18h +
movzx eax si +
xor edi edi +
mov [ecx+34h] eax +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ebp+arg_0] +
push ebx  +
push edi  +
mov [ebp+var_4] 8007000Eh +
test eax eax +
jz loc_100E809  +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_100E7A3  +
mov ebx [ebp+arg_C] +
sub eax edx +
sar eax 1 +
test ebx ebx +
jz loc_100E809  +
mov ecx [ebp+arg_8] +
mov edi [ebp+arg_4] +
cmp ecx edi +
jb loc_100E809  +
cmp edi eax +
ja loc_100E809  +
cmp ecx eax +
ja loc_100E809  +
mov eax large fs:18h +
mov eax [eax+30h] +
sub ecx edi +
push esi  +
inc ecx  +
mov esi ecx +
lea ecx [esi+esi] +
push ecx  +
push 8  +
push dword ptr [eax+18h]  +
call ds:RtlAllocateHeap  +
mov [ebx] eax +
test eax eax +
jz loc_100E803  +
lea ecx [esi-1] +
push ecx  +
mov ecx [ebp+arg_0] +
lea ecx [ecx+edi*2] +
push ecx  +
push esi  +
push eax  +
call sub_100E646  +
mov [ebp+var_4] eax +
mov eax [ebp+var_4] +
pop esi  +
jmp loc_100E80E  +
mov eax 80070057h +
pop edi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push 0  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_100E4E7  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ebp+arg_0] +
and [ebp+var_4] 0 +
test eax eax +
jz loc_100E8EB  +
cmp [ebp+arg_4] 0 +
jz loc_100E8EB  +
and dword ptr [eax] 0 +
push edi  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
call ds:_vscwprintf  +
pop ecx  +
pop ecx  +
test eax eax +
jge loc_100E872  +
mov edi 80004005h +
jmp loc_100E8E6  +
lea ecx [ebp+var_4] +
push ecx  +
push 2  +
pop ecx  +
inc eax  +
mul  ecx +
push edx  +
push eax  +
call sub_100F8E8  +
mov edi eax +
test edi edi +
jl loc_100E8E6  +
mov eax large fs:18h +
mov eax [eax+30h] +
push esi  +
push [ebp+var_4]  +
push 8  +
push dword ptr [eax+18h]  +
call ds:RtlAllocateHeap  +
mov esi eax +
test esi esi +
jnz loc_100E8AC  +
mov edi 8007000Eh +
test edi edi +
jl loc_100E8CC  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+var_4]  +
push esi  +
call sub_100E695  +
mov edi eax +
test edi edi +
jl loc_100E8CC  +
mov eax [ebp+arg_0] +
mov [eax] esi +
jmp loc_100E8E5  +
test esi esi +
jz loc_100E8E5  +
mov eax large fs:18h +
mov eax [eax+30h] +
push esi  +
push 0  +
push dword ptr [eax+18h]  +
call ds:RtlFreeHeap  +
pop esi  +
mov eax edi +
pop edi  +
jmp locret_100E8F0  +
mov eax 80070057h +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
lea eax [ebp+arg_8] +
push eax  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_100E836  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 50h +
mov eax dword_101908C +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
xor esi esi +
mov [ebp+var_28] ebx +
cmp ebx esi +
jz loc_100EAD3  +
cmp [ebp+arg_4] esi +
jz loc_100EAD3  +
cmp [ebp+arg_4] 10h +
jnb loc_100EAD3  +
lea eax [ebp+var_1C] +
push edi  +
mov [ebp+var_20] esi +
test eax eax +
jz loc_100E9D5  +
push offset aDeviceKsecdd  +
lea eax [ebp+var_48] +
push eax  +
call ds:RtlInitUnicodeString  +
push 18h  +
pop edi  +
push 10h  +
lea eax [ebp+var_48] +
mov [ebp+var_38] eax +
push 7  +
lea eax [ebp+var_50] +
push eax  +
lea eax [ebp+var_40] +
push eax  +
push 100001h  +
lea eax [ebp+var_20] +
push eax  +
mov [ebp+var_40] edi +
mov [ebp+var_3C] esi +
mov [ebp+var_34] 40h +
mov [ebp+var_30] esi +
mov [ebp+var_2C] esi +
call ds:NtOpenFile  +
cmp eax esi +
mov [ebp+var_24] eax +
jl loc_100E9CB  +
push edi  +
lea eax [ebp+var_1C] +
push eax  +
push esi  +
push esi  +
push 390008h  +
lea eax [ebp+var_50] +
push eax  +
push esi  +
push esi  +
push esi  +
push [ebp+var_20]  +
call ds:NtDeviceIoControlFile  +
push [ebp+var_20]  +
mov [ebp+var_24] eax +
call ds:NtClose  +
xor eax eax +
cmp [ebp+var_24] esi +
setnl al  +
jmp loc_100E9D7  +
xor eax eax +
cmp eax esi +
jl loc_100EAC7  +
mov [ebp+var_24] esi +
cmp [ebp+arg_4] esi +
jbe loc_100EABB  +
push 3  +
pop edi  +
xor eax eax +
mov [ebp+var_20] esi +
mov esi edi +
inc eax  +
lea ecx [edi+1] +
and ecx 7 +
mov edx eax +
shl edx cl +
push 0  +
lea ecx [esi+1] +
shr ecx 3 +
mov cl byte ptr [ebp+ecx+var_1C] +
test dl cl +
pop edx  +
setnz dl  +
mov ecx edi +
and ecx 7 +
mov ebx eax +
shl ebx cl +
mov ecx esi +
shr ecx 3 +
mov cl byte ptr [ebp+ecx+var_1C] +
add edx edx +
test bl cl +
push 0  +
pop ecx  +
setnz cl  +
mov ebx eax +
push 0  +
or edx ecx +
lea ecx [edi-1] +
and ecx 7 +
shl ebx cl +
add edx edx +
lea ecx [esi-1] +
shr ecx 3 +
mov cl byte ptr [ebp+ecx+var_1C] +
test bl cl +
pop ecx  +
setnz cl  +
mov ebx eax +
push 0  +
or edx ecx +
lea ecx [edi-2] +
and ecx 7 +
shl ebx cl +
add edx edx +
lea ecx [esi-2] +
shr ecx 3 +
mov cl byte ptr [ebp+ecx+var_1C] +
test bl cl +
pop ecx  +
setnz cl  +
mov ebx eax +
push 0  +
or edx ecx +
mov ecx [ebp+var_20] +
and ecx 7 +
shl ebx cl +
lea ecx [esi-3] +
shr ecx 3 +
mov cl byte ptr [ebp+ecx+var_1C] +
add edx edx +
test bl cl +
mov ebx [ebp+var_28] +
pop ecx  +
setnz cl  +
sub [ebp+var_20] 3 +
sub edi 3 +
add esi 5 +
or edx ecx +
mov ecx [ebp+var_24] +
mov dx ds:word_1004038[edx*2] +
mov [ebx+ecx*2] dx +
inc ecx  +
mov [ebp+var_24] ecx +
cmp ecx [ebp+arg_4] +
jb loc_100E9F6  +
xor esi esi +
mov ecx [ebp+arg_4] +
xor eax eax +
mov [ebx+ecx*2-2] ax +
jmp loc_100EACE  +
or eax 10000000h +
mov esi eax +
mov eax esi +
pop edi  +
jmp loc_100EAD8  +
mov eax 0C000000Dh +
mov ecx [ebp+var_4] +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100D691  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push ebx  +
xor ebx ebx +
cmp [ebp+hDevice] 0FFFFFFFFh +
mov [ebp+nOutBufferSize] ebx +
mov [ebp+BytesReturned] ebx +
mov [ebp+dwIoControlCode] 560000h +
jnz loc_100EB1A  +
push 57h  +
call ds:SetLastError  +
xor eax eax +
jmp loc_100EBA4  +
push esi  +
mov esi ds:GetProcessHeap +
push edi  +
add [ebp+nOutBufferSize] 400h +
push [ebp+nOutBufferSize]  +
push 8  +
call esi  +
push eax  +
call ds:HeapAlloc  +
mov edi eax +
cmp edi ebx +
jz loc_100EB22  +
push ebx  +
lea eax [ebp+BytesReturned] +
push eax  +
push [ebp+nOutBufferSize]  +
push edi  +
push ebx  +
push ebx  +
push [ebp+dwIoControlCode]  +
push [ebp+hDevice]  +
call ds:DeviceIoControl  +
test eax eax +
jnz loc_100EB94  +
call ds:GetLastError  +
mov [ebp+dwErrCode] eax +
cmp eax 0EAh +
jz loc_100EB78  +
cmp [ebp+dwIoControlCode] 560000h +
jnz loc_100EB78  +
mov [ebp+dwIoControlCode] 564000h +
push edi  +
push ebx  +
call esi  +
push eax  +
call ds:HeapFree  +
test eax eax +
jz loc_100EB89  +
xor edi edi +
cmp [ebp+dwErrCode] 0EAh +
jz loc_100EB22  +
jmp loc_100EB97  +
mov [ebp+dwErrCode] ebx +
push [ebp+dwErrCode]  +
call ds:SetLastError  +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
xor esi esi +
mov [ebp+BytesReturned] esi +
cmp [ebp+hDevice] esi +
jz loc_100EBEB  +
cmp [ebp+hDevice] 0FFFFFFFFh +
jz loc_100EBEB  +
push edi  +
push esi  +
lea eax [ebp+BytesReturned] +
push eax  +
push esi  +
push esi  +
push esi  +
push esi  +
push 560028h  +
push [ebp+hDevice]  +
call ds:DeviceIoControl  +
push esi  +
mov edi eax +
call ds:SetLastError  +
mov eax edi +
pop edi  +
jmp loc_100EBF5  +
push 57h  +
call ds:SetLastError  +
xor eax eax +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push ebx  +
push esi  +
mov esi ds:GetProcessHeap +
push edi  +
xor edi edi +
mov [ebp+var_8] edi +
mov [ebp+dwErrCode] 7Ah +
mov ebx 300h +
cmp [ebp+dwErrCode] 7Ah +
jz loc_100EC2D  +
cmp [ebp+dwErrCode] 18h +
jnz loc_100EC94  +
push ebx  +
push 8  +
call esi  +
push eax  +
call ds:HeapAlloc  +
mov [ebp+lpMem] eax +
cmp eax edi +
jz loc_100EC7C  +
push edi  +
lea ecx [ebp+BytesReturned] +
push ecx  +
push ebx  +
push eax  +
push edi  +
push edi  +
push 70050h  +
push [ebp+hDevice]  +
call ds:DeviceIoControl  +
test eax eax +
jnz loc_100EC88  +
call ds:GetLastError  +
push [ebp+lpMem]  +
mov [ebp+dwErrCode] eax +
push edi  +
call esi  +
push eax  +
call ds:HeapFree  +
mov [ebp+lpMem] edi +
add ebx 900h +
jmp loc_100EC21  +
mov [ebp+dwErrCode] 7Ah +
jmp loc_100EDDC  +
mov eax [ebp+nOutBufferSize] +
cmp eax edi +
jz loc_100EC91  +
mov [eax] ebx +
mov [ebp+dwErrCode] edi +
cmp [ebp+dwErrCode] edi +
jz loc_100EDDC  +
cmp [ebp+dwErrCode] 18h +
jz loc_100EDDC  +
push 7Ah  +
pop eax  +
cmp [ebp+dwErrCode] eax +
jz loc_100EDDC  +
mov [ebp+dwErrCode] eax +
mov [ebp+nOutBufferSize] 0A8h +
cmp [ebp+dwErrCode] 7Ah +
jz loc_100ECC9  +
cmp [ebp+dwErrCode] 18h +
jnz loc_100ED20  +
push [ebp+nOutBufferSize]  +
push 8  +
call esi  +
push eax  +
call ds:HeapAlloc  +
mov ebx eax +
mov [ebp+var_8] ebx +
cmp ebx edi +
jz loc_100ED51  +
push edi  +
lea eax [ebp+BytesReturned] +
push eax  +
push [ebp+nOutBufferSize]  +
push ebx  +
push edi  +
push edi  +
push 7400Ch  +
push [ebp+hDevice]  +
call ds:DeviceIoControl  +
test eax eax +
jnz loc_100ED1D  +
call ds:GetLastError  +
push ebx  +
push edi  +
mov [ebp+dwErrCode] eax +
call esi  +
push eax  +
call ds:HeapFree  +
add [ebp+nOutBufferSize] 200h +
mov [ebp+var_8] edi +
jmp loc_100ECBD  +
mov [ebp+dwErrCode] edi +
cmp [ebp+dwErrCode] edi +
jnz loc_100EDCA  +
mov eax [ebp+var_8] +
mov ebx [eax] +
lea eax [ebx-1] +
imul eax eax +
add eax 0C0h +
push eax  +
push 8  +
call esi  +
push eax  +
call ds:HeapAlloc  +
mov ecx eax +
mov [ebp+lpMem] ecx +
cmp ecx edi +
jnz loc_100ED5A  +
mov [ebp+dwErrCode] 7Ah +
jmp loc_100EDCA  +
mov eax [ebp+var_8] +
mov [ecx] edi +
mov edx [eax] +
mov [ecx+4] edx +
mov edx [eax+4] +
add eax 8 +
mov [ecx+8] edx +
lea edi [ecx+30h] +
test ebx ebx +
jbe loc_100EDC8  +
lea ecx [edi+10h] +
mov [ebp+hDevice] ebx +
mov edx 90h +
and dword ptr [edi] 0 +
mov ebx [eax] +
mov [ecx-8] ebx +
mov ebx [eax+4] +
mov [ecx-4] ebx +
mov ebx [eax+8] +
mov [ecx] ebx +
mov ebx [eax+0Ch] +
mov [ecx+4] ebx +
mov ebx [eax+14h] +
mov [ecx+8] ebx +
mov bl [eax+1Bh] +
mov [ecx+0Ch] bl +
mov bl [eax+18h] +
mov [ecx+10h] bl +
mov bl [eax+19h] +
mov [ecx+11h] bl +
mov bl [eax+1Ah] +
mov [ecx+12h] bl +
mov ebx [eax+10h] +
mov [ecx+14h] ebx +
add eax 20h +
add edi edx +
add ecx edx +
dec [ebp+hDevice]  +
jnz loc_100ED7F  +
xor edi edi +
cmp [ebp+var_8] edi +
jz loc_100EDDC  +
push [ebp+var_8]  +
push edi  +
call esi  +
push eax  +
call ds:HeapFree  +
push [ebp+dwErrCode]  +
call ds:SetLastError  +
mov eax [ebp+lpMem] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
xor eax eax +
test ecx ecx +
jz loc_100EE0A  +
cmp ecx 7FFFFFFFh +
jbe loc_100EE0F  +
mov eax 80070057h +
test eax eax +
jl loc_100EE4C  +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
lea eax [ebp+arg_C] +
push eax  +
push [ebp+arg_8]  +
lea esi [ecx-1] +
push esi  +
push edi  +
xor ebx ebx +
call ds:_vsnwprintf  +
add esp 10h +
test eax eax +
jl loc_100EE3C  +
cmp eax esi +
ja loc_100EE3C  +
jnz loc_100EE47  +
jmp loc_100EE41  +
mov ebx 8007007Ah +
xor eax eax +
mov [edi+esi*2] ax +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20Ch +
mov eax dword_101908C +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_4] +
xor eax eax +
push 206h  +
xor esi esi +
mov [ebp+FileName] ax +
lea eax [ebp-20Ah] +
push esi  +
push eax  +
xor ebx ebx +
call memset  +
add esp 0Ch +
cmp dword ptr [ebp+arg_0] esi +
jge loc_100EEA1  +
push 57h  +
call ds:SetLastError  +
xor eax eax +
jmp loc_100EF15  +
push dword ptr [ebp+arg_0]  +
lea eax [ebp+FileName] +
push offset a_Physicaldrive  +
push 104h  +
push eax  +
call sub_100EDF4  +
add esp 10h +
cmp eax esi +
jl loc_100EF09  +
push esi  +
push 80h  +
push 3  +
push esi  +
push 3  +
push 80000000h  +
lea eax [ebp+FileName] +
push eax  +
call ds:CreateFileW  +
mov esi eax +
cmp esi 0FFFFFFFFh +
jz loc_100EEFF  +
push edi  +
push esi  +
call sub_100EBFF  +
mov ebx eax +
call ds:GetLastError  +
push esi  +
mov edi eax +
call ds:CloseHandle  +
jmp loc_100EF0C  +
call ds:GetLastError  +
mov edi eax +
jmp loc_100EF0C  +
movzx edi ax +
push edi  +
call ds:SetLastError  +
mov eax ebx +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100D691  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push esi  +
push edi  +
xor edi edi +
xor esi esi +
mov [ebp+hLibModule.unused] edi +
mov [ebp+var_4] edi +
cmp [ebp+hDevice] edi +
jnz loc_100EF53  +
push 57h  +
call ds:SetLastError  +
xor eax eax +
jmp loc_100EFD4  +
lea eax [ebp+hLibModule] +
push eax  +
call sub_100FFE4  +
push edi  +
push 80h  +
push 3  +
push edi  +
push 3  +
push 80000000h  +
push [ebp+hDevice]  +
call ds:CreateFileW  +
mov [ebp+hDevice] eax +
cmp eax 0FFFFFFFFh +
jz loc_100EFC9  +
push ebx  +
push eax  +
call sub_100EAED  +
mov esi eax +
cmp esi edi +
jz loc_100EFDA  +
xor ebx ebx +
inc ebx  +
cmp [ebp+BytesReturned] edi +
jnz loc_100EFA2  +
cmp [esi] ebx +
jz loc_100EFA2  +
push [ebp+hDevice]  +
call sub_100EBAE  +
test eax eax +
jz loc_100EFA5  +
mov [ebp+var_4] ebx +
push [ebp+hDevice]  +
call ds:CloseHandle  +
pop ebx  +
cmp [ebp+var_4] edi +
jnz loc_100EFC9  +
cmp esi edi +
jz loc_100EFC9  +
push esi  +
push edi  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
xor esi esi +
push edi  +
push [ebp+hLibModule.unused]  +
call sub_1010080  +
mov eax esi +
pop edi  +
pop esi  +
leave   +
retn 0Ch  +
push 38h  +
push 8  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov esi eax +
cmp esi edi +
jz loc_100EFA5  +
push edi  +
lea eax [ebp+BytesReturned] +
push eax  +
push 0Ch  +
lea eax [ebp+OutBuffer] +
push eax  +
push edi  +
push edi  +
push 2D1080h  +
push [ebp+hDevice]  +
xor ebx ebx +
inc ebx  +
mov [ebp+BytesReturned] edi +
mov [esi] ebx +
call ds:DeviceIoControl  +
test eax eax +
jz loc_100EFA5  +
mov eax [ebp+var_10] +
mov [esi+8] eax +
cmp [ebp+arg_4] edi +
jz loc_100EFA2  +
cmp [ebp+var_C] edi +
jbe loc_100EFA5  +
push edi  +
push eax  +
call sub_100EE53  +
cmp eax edi +
jz loc_100EFA5  +
xor edx edx +
cmp [eax+4] edi +
jbe loc_100F080  +
lea ecx [eax+38h] +
cmp [ebp+var_4] edi +
jnz loc_100F080  +
mov ebx [ebp+var_C] +
cmp ebx [ecx+10h] +
jnz loc_100F074  +
mov ebx [ecx] +
mov [esi+10h] ebx +
mov ebx [ecx+4] +
mov [esi+14h] ebx +
mov ebx [ecx+8] +
mov [esi+18h] ebx +
mov ebx [ecx+0Ch] +
mov [ebp+var_4] 1 +
mov [esi+1Ch] ebx +
inc edx  +
add ecx 90h +
cmp edx [eax+4] +
jb loc_100F049  +
push eax  +
push edi  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
jmp loc_100EFA5  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
xor edi edi +
cmp [ebp+arg_0] edi +
jl loc_100F0FE  +
mov ebx [ebp+arg_4] +
cmp ebx edi +
jle loc_100F0FE  +
mov esi [ebp+arg_8] +
cmp esi edi +
jz loc_100F0FE  +
push edi  +
push [ebp+arg_0]  +
call sub_100EE53  +
test eax eax +
jz loc_100F0FA  +
xor edx edx +
lea ecx [eax+38h] +
cmp edx [eax+4] +
jnb loc_100F0EA  +
cmp ebx [ecx+10h] +
jnz loc_100F0DF  +
mov edi [ecx] +
mov [esi] edi +
mov edi [ecx+4] +
mov [esi+4] edi +
xor edi edi +
inc edi  +
inc edx  +
add ecx 90h +
test edi edi +
jz loc_100F0C8  +
push eax  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
mov eax edi +
jmp loc_100F108  +
push 57h  +
call ds:SetLastError  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
push edi  +
xor edi edi +
xor ebx ebx +
cmp [ebp+arg_0] edi +
mov [ebp+dwErrCode] edi +
jl loc_100F17F  +
mov esi [ebp+arg_4] +
cmp esi edi +
jz loc_100F17F  +
push edi  +
push [ebp+arg_0]  +
call sub_100EE53  +
cmp eax edi +
jz loc_100F169  +
mov ecx [eax] +
mov [esi] ecx +
cmp ecx edi +
jnz loc_100F155  +
cmp [eax+4] edi +
jnz loc_100F155  +
cmp [eax+8] edi +
jnz loc_100F155  +
mov dword ptr [esi] 2 +
push eax  +
xor ebx ebx +
push edi  +
inc ebx  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
jmp loc_100F172  +
call ds:GetLastError  +
mov [ebp+dwErrCode] eax +
push [ebp+dwErrCode]  +
call ds:SetLastError  +
mov eax ebx +
jmp loc_100F189  +
push 57h  +
call ds:SetLastError  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
xor ebx ebx +
push edi  +
xor esi esi +
xor edi edi +
cmp [ebp+arg_0] ebx +
mov [ebp+dwErrCode] ebx +
jl loc_100F20B  +
cmp [ebp+arg_4] ebx +
jz loc_100F20B  +
push ebx  +
push [ebp+arg_0]  +
call sub_100EE53  +
cmp eax ebx +
jz loc_100F1F5  +
mov edx [eax+4] +
cmp edx ebx +
jbe loc_100F1DC  +
lea ecx [eax+48h] +
cmp dword ptr [ecx-18h] 2 +
jz loc_100F1D2  +
cmp [ecx] ebx +
jz loc_100F1D3  +
inc edi  +
add ecx 90h +
dec edx  +
jnz loc_100F1C8  +
mov ecx [ebp+arg_4] +
push eax  +
xor esi esi +
push ebx  +
mov [ecx] edi +
inc esi  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
jmp loc_100F1FE  +
call ds:GetLastError  +
mov [ebp+dwErrCode] eax +
push [ebp+dwErrCode]  +
call ds:SetLastError  +
mov eax esi +
jmp loc_100F215  +
push 57h  +
call ds:SetLastError  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1Ch +
mov eax dword_101908C +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_4] +
and [ebp+var_18] 0 +
push ebx  +
mov ebx [ebp+arg_8] +
push esi  +
push edi  +
mov esi offset a_? +
lea edi [ebp+hDevice] +
movs   +
movs   +
movs   +
mov [ebp+var_1C] eax +
mov eax [ebp+arg_0] +
movs   +
cmp ax 61h +
jb loc_100F25F  +
cmp ax 7Ah +
jbe loc_100F272  +
lea ecx [eax-41h] +
cmp cx 19h +
jbe loc_100F272  +
push 57h  +
call ds:SetLastError  +
jmp loc_100F2C2  +
mov [ebp+var_C] ax +
xor eax eax +
test ebx ebx +
setnz al  +
push 0  +
push eax  +
lea eax [ebp+hDevice] +
push eax  +
call sub_100EF2B  +
test eax eax +
jz loc_100F2C2  +
xor ecx ecx +
inc ecx  +
cmp [eax] ecx +
jb loc_100F2B2  +
mov [ebp+var_18] ecx +
mov ecx [ebp+var_1C] +
test ecx ecx +
jz loc_100F2A3  +
mov edx [eax+8] +
mov [ecx] edx +
test ebx ebx +
jz loc_100F2B2  +
mov ecx [eax+10h] +
mov [ebx] ecx +
mov ecx [eax+14h] +
mov [ebx+4] ecx +
push eax  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
mov ecx [ebp+var_4] +
mov eax [ebp+var_18] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100D691  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_8] +
test esi esi +
jnz loc_100F2EF  +
mov eax 80070057h +
jmp loc_100F337  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1010B11  +
mov [esi] eax +
test eax eax +
jz loc_100F304  +
xor eax eax +
jmp loc_100F337  +
push ebx  +
mov ebx ds:GetLastError +
push edi  +
call ebx  +
mov edi 0FFFFh +
mov esi 80070000h +
test eax eax +
jle loc_100F322  +
and eax edi +
or eax esi +
test eax eax +
jge loc_100F330  +
call ebx  +
test eax eax +
jle loc_100F335  +
and eax edi +
or eax esi +
jmp loc_100F335  +
mov eax 80004005h +
pop edi  +
pop ebx  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
xor eax eax +
push ebx  +
mov ebx [ebp+lpFileName] +
mov [ebp+var_8] eax +
mov [ebp+dwErrCode] eax +
cmp ebx eax +
jz loc_100F3B2  +
xor ecx ecx +
cmp cx [ebx] +
jz loc_100F3B2  +
push esi  +
mov esi ds:GetFullPathNameW +
push edi  +
push eax  +
push eax  +
push eax  +
push ebx  +
call esi  +
mov edi eax +
test edi edi +
jz loc_100F399  +
lea eax [edi+edi] +
push eax  +
push 8  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov [ebp+var_8] eax +
test eax eax +
jz loc_100F3A2  +
push [ebp+lpFilePart]  +
push eax  +
push edi  +
push ebx  +
call esi  +
test eax eax +
jnz loc_100F3A2  +
call ds:GetLastError  +
mov [ebp+dwErrCode] eax +
push [ebp+dwErrCode]  +
call ds:SetLastError  +
mov eax [ebp+var_8] +
pop edi  +
pop esi  +
jmp loc_100F3BC  +
push 57h  +
call ds:SetLastError  +
xor eax eax +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
mov ebx [ebp+arg_0] +
push edi  +
xor edi edi +
cmp ebx edi +
jnz loc_100F3E2  +
mov eax 80070057h +
jmp loc_100F50A  +
push esi  +
push offset asc_1004424  +
push ebx  +
call sub_100E819  +
test eax eax +
jz loc_100F4E8  +
mov esi ds:wcschr +
lea eax [ebx+4] +
push 5Ch  +
push eax  +
call esi  +
pop ecx  +
pop ecx  +
cmp eax edi +
jnz loc_100F416  +
mov [ebp+arg_0] 8007000Dh +
jmp loc_100F506  +
mov ecx ebx +
mov [ebp+lpMem] edi +
mov [ebp+var_8] edi +
lea edx [ecx+2] +
mov di [ecx] +
inc ecx  +
inc ecx  +
test di di +
jnz loc_100F421  +
sub ecx edx +
add eax 2 +
sar ecx 1 +
push 5Ch  +
push eax  +
mov edi ecx +
call esi  +
pop ecx  +
pop ecx  +
xor ecx ecx +
cmp eax ecx +
jnz loc_100F445  +
mov esi edi +
jmp loc_100F44B  +
sub eax ebx +
sar eax 1 +
mov esi eax +
cmp [ebp+arg_8] ecx +
jz loc_100F463  +
lea eax [ebp+lpMem] +
push eax  +
push esi  +
push ecx  +
push ebx  +
call sub_100E78A  +
mov [ebp+arg_0] eax +
xor ecx ecx +
jmp loc_100F466  +
mov [ebp+arg_0] ecx +
cmp [ebp+arg_0] ecx +
jl loc_100F4B3  +
cmp [ebp+arg_C] ecx +
jz loc_100F483  +
lea eax [ebp+var_8] +
push eax  +
sub edi esi +
push edi  +
push esi  +
push ebx  +
call sub_100E78A  +
mov [ebp+arg_0] eax +
xor ecx ecx +
cmp [ebp+arg_0] ecx +
jl loc_100F4B3  +
mov eax [ebp+arg_8] +
cmp eax ecx +
jz loc_100F497  +
mov edx [ebp+lpMem] +
mov [eax] edx +
mov [ebp+lpMem] ecx +
mov eax [ebp+arg_C] +
cmp eax ecx +
jz loc_100F4A6  +
mov edx [ebp+var_8] +
mov [eax] edx +
mov [ebp+var_8] ecx +
mov eax [ebp+arg_4] +
cmp eax ecx +
jz loc_100F4B3  +
mov dword ptr [eax] 1 +
mov esi ds:HeapFree +
mov edi ds:GetProcessHeap +
cmp [ebp+lpMem] ecx +
jz loc_100F4D6  +
push [ebp+lpMem]  +
push 0  +
call edi  +
push eax  +
call esi  +
test eax eax +
jz loc_100F4D6  +
and [ebp+lpMem] 0 +
cmp [ebp+var_8] 0 +
jz loc_100F506  +
push [ebp+var_8]  +
push 0  +
call edi  +
push eax  +
call esi  +
jmp loc_100F506  +
mov eax [ebp+arg_4] +
mov [ebp+arg_0] edi +
cmp eax edi +
jz loc_100F4F4  +
mov [eax] edi +
mov eax [ebp+arg_8] +
cmp eax edi +
jz loc_100F4FD  +
mov [eax] edi +
mov eax [ebp+arg_C] +
cmp eax edi +
jz loc_100F506  +
mov [eax] edi +
mov eax [ebp+arg_0] +
pop esi  +
pop edi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_100F3C6  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 30h +
mov eax dword_101908C +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+lpFileName] +
mov ecx [ebp+arg_4] +
push esi  +
mov esi ds:dword_1004444 +
mov dword ptr [ebp+var_C] esi +
mov esi ds:dword_1004448 +
push edi  +
mov [ebp+var_8] esi +
mov esi offset a?Unc +
lea edi [ebp+var_1C] +
movs   +
movs   +
movs   +
xor edx edx +
mov [ebp+var_30] eax +
mov [ebp+var_28] ecx +
mov [ebp+var_20] edx +
movs   +
cmp eax edx +
jz loc_100F716  +
xor esi esi +
cmp si [eax] +
jz loc_100F716  +
cmp ecx edx +
jz loc_100F58F  +
mov [ecx] edx +
push ebx  +
push edx  +
push eax  +
call sub_100F341  +
mov [ebp+lpMem] eax +
mov ebx 0FFFFh +
mov edi 80070000h +
test eax eax +
jnz loc_100F5D7  +
mov esi ds:GetLastError +
call esi  +
test eax eax +
jle loc_100F5BA  +
and eax ebx +
or eax edi +
test eax eax +
jge loc_100F5CA  +
call esi  +
test eax eax +
jle loc_100F5C6  +
and eax ebx +
or eax edi +
mov esi eax +
jmp loc_100F5CF  +
mov esi 80004005h +
test esi esi +
jl loc_100F6EA  +
mov eax [ebp+lpMem] +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_100F5DD  +
sub eax edx +
sar eax 1 +
cmp eax 104h +
jb loc_100F69E  +
mov esi ds:_wcsnicmp +
push 3  +
lea eax [ebp+var_C] +
push eax  +
push [ebp+lpMem]  +
call esi  +
add esp 0Ch +
test eax eax +
jz loc_100F69E  +
push 7  +
lea eax [ebp+var_1C] +
push eax  +
push [ebp+lpMem]  +
call esi  +
add esp 0Ch +
test eax eax +
jz loc_100F69E  +
and [ebp+var_2C] 0 +
push 0  +
lea eax [ebp+var_2C] +
push eax  +
push [ebp+lpMem]  +
call sub_100F515  +
mov esi eax +
test esi esi +
jl loc_100F6EA  +
cmp [ebp+var_2C] 1 +
lea eax [ebp+var_20] +
push eax  +
jnz loc_100F675  +
mov eax [ebp+lpMem] +
add eax 2 +
push eax  +
lea eax [ebp+var_1C] +
push eax  +
call sub_100F2DB  +
mov esi eax +
test esi esi +
jl loc_100F6EA  +
mov eax [ebp+var_28] +
test eax eax +
jz loc_100F698  +
mov ecx [ebp+var_20] +
add ecx 10h +
mov [eax] ecx +
jmp loc_100F698  +
push [ebp+lpMem]  +
lea eax [ebp+var_C] +
push eax  +
call sub_100F2DB  +
mov esi eax +
test esi esi +
jl loc_100F6EA  +
cmp [ebp+var_28] 0 +
jz loc_100F698  +
mov eax [ebp+var_20] +
mov ecx [ebp+var_28] +
add eax 8 +
mov [ecx] eax +
cmp [ebp+var_20] 0 +
jnz loc_100F6EE  +
push [ebp+var_30]  +
call sub_100E6F6  +
mov [ebp+var_20] eax +
test eax eax +
jz loc_100F6B1  +
xor esi esi +
jmp loc_100F6DC  +
mov esi ds:GetLastError +
call esi  +
test eax eax +
jle loc_100F6C3  +
and eax ebx +
or eax edi +
test eax eax +
jge loc_100F6D3  +
call esi  +
test eax eax +
jle loc_100F6CF  +
and eax ebx +
or eax edi +
mov esi eax +
jmp loc_100F6D8  +
mov esi 80004005h +
test esi esi +
jl loc_100F6EA  +
mov eax [ebp+var_28] +
test eax eax +
jz loc_100F6EE  +
mov ecx [ebp+var_20] +
mov [eax] ecx +
jmp loc_100F6EE  +
and [ebp+var_20] 0 +
cmp [ebp+lpMem] 0 +
pop ebx  +
jz loc_100F707  +
push [ebp+lpMem]  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
movzx eax si +
push eax  +
call ds:SetLastError  +
mov eax [ebp+var_20] +
jmp loc_100F720  +
push 57h  +
call ds:SetLastError  +
xor eax eax +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_100D691  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
mov eax dword_101908C +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
xor ebx ebx +
push esi  +
mov esi [ebp+lpFileName] +
mov [ebp+var_20] esi +
mov [ebp+var_18] ebx +
mov [ebp+var_14] ebx +
mov [ebp+dwErrCode] ebx +
cmp esi ebx +
jz loc_100F8C9  +
xor eax eax +
cmp ax [esi] +
jz loc_100F8C9  +
lea eax [ebp+var_14] +
push eax  +
push esi  +
call sub_100F533  +
mov [ebp+lpPathName] eax +
cmp eax ebx +
jz loc_100F8B2  +
push edi  +
lea ecx [ebp+lpMem] +
push ecx  +
lea ecx [ebp+var_1C] +
push ecx  +
push eax  +
mov [ebp+lpMem] ebx +
mov [ebp+var_1C] ebx +
call sub_100F515  +
cmp eax ebx +
jl loc_100F846  +
cmp [ebp+var_1C] 1 +
jnz loc_100F811  +
mov eax [ebp+lpMem] +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
cmp cx bx +
jnz loc_100F7AB  +
mov ecx [ebp+var_14] +
sub eax edx +
sar eax 1 +
lea esi [ecx+eax*2] +
cmp [ebp+lpMem] ebx +
jz loc_100F7D5  +
push [ebp+lpMem]  +
push ebx  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
mov edi ds:CreateDirectoryW +
push 5Ch  +
push esi  +
call ds:wcschr  +
pop ecx  +
mov esi eax +
pop ecx  +
push [ebp+lpPathName]  +
cmp esi ebx +
jz loc_100F886  +
xor eax eax +
mov [esi] ax +
call sub_100FB35  +
test eax eax +
jnz loc_100F807  +
push ebx  +
push [ebp+lpPathName]  +
call edi  +
push 5Ch  +
pop eax  +
mov [esi] ax +
inc esi  +
inc esi  +
jmp loc_100F7DB  +
mov esi [ebp+var_14] +
movzx eax word ptr [esi] +
cmp ax 61h +
jb loc_100F823  +
cmp ax 7Ah +
jbe loc_100F82F  +
cmp ax 41h +
jb loc_100F7D5  +
cmp ax 5Ah +
ja loc_100F7D5  +
push 3Ah  +
pop eax  +
cmp ax [esi+2] +
jnz loc_100F7D5  +
push 5Ch  +
pop eax  +
cmp ax [esi+4] +
jnz loc_100F7D5  +
add esi 8 +
jmp loc_100F7D5  +
movzx eax ax +
push eax  +
call ds:SetLastError  +
call ds:GetLastError  +
push eax  +
push esi  +
push offset aCreatepathUnab  +
push 3000000h  +
push offset unk_1019504  +
mov [ebp+dwErrCode] eax +
call sub_100DC59  +
add esp 14h +
push [ebp+lpPathName]  +
push ebx  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
pop edi  +
jmp loc_100F8BB  +
call sub_100FB35  +
xor esi esi +
inc esi  +
cmp eax esi +
jz loc_100F8AD  +
push ebx  +
push [ebp+lpPathName]  +
call edi  +
cmp eax esi +
jz loc_100F8AD  +
call ds:GetLastError  +
push eax  +
push [ebp+var_20]  +
push offset aCreatepathUn_0  +
jmp loc_100F85D  +
mov [ebp+var_18] esi +
jmp loc_100F872  +
call ds:GetLastError  +
mov [ebp+dwErrCode] eax +
push [ebp+dwErrCode]  +
call ds:SetLastError  +
mov eax [ebp+var_18] +
jmp loc_100F8D3  +
push 57h  +
call ds:SetLastError  +
xor eax eax +
mov ecx [ebp+var_4] +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100D691  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_4] 0 +
ja loc_100F906  +
mov eax [ebp+arg_0] +
jb loc_100F8FD  +
cmp eax 0FFFFFFFFh +
ja loc_100F906  +
mov ecx [ebp+arg_8] +
mov [ecx] eax +
xor eax eax +
jmp loc_100F911  +
mov eax [ebp+arg_8] +
or dword ptr [eax] 0FFFFFFFFh +
mov eax 80070216h +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
mov eax [ebp+arg_4] +
add eax ecx +
cmp eax ecx +
jb loc_100F934  +
mov ecx [ebp+arg_8] +
mov [ecx] eax +
xor eax eax +
jmp loc_100F93F  +
mov eax [ebp+arg_8] +
or dword ptr [eax] 0FFFFFFFFh +
mov eax 80070216h +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push ebx  +
push edi  +
xor edi edi +
push edi  +
push [ebp+lpFileName]  +
mov [ebp+var_8] edi +
mov [ebp+dwErrCode] edi +
call sub_100F533  +
mov ebx eax +
cmp ebx edi +
jz loc_100FA29  +
push esi  +
push 2000h  +
push ebx  +
call ds:SetFileAttributesW  +
test eax eax +
jz loc_100F9F5  +
mov eax [ebp+arg_4] +
and al 1 +
movsx eax al +
push edi  +
push 2200000h  +
neg eax  +
push 3  +
sbb eax eax +
push edi  +
and eax 0FFFFFFF9h +
add eax 7 +
push eax  +
push 10000h  +
push ebx  +
call ds:CreateFileW  +
mov esi eax +
cmp esi 0FFFFFFFFh +
jz loc_100F9E4  +
push 0Dh  +
push 1  +
lea eax [ebp+lpFileName+3] +
push eax  +
lea eax [ebp+var_10] +
push eax  +
push esi  +
mov byte ptr [ebp+lpFileName+3] 1 +
call ds:NtSetInformationFile  +
cmp eax edi +
jge loc_100F9D4  +
push eax  +
call ds:RtlNtStatusToDosError  +
mov [ebp+dwErrCode] eax +
jmp loc_100F9DB  +
mov [ebp+var_8] 1 +
push esi  +
call ds:CloseHandle  +
jmp loc_100FA19  +
call ds:GetLastError  +
push eax  +
push [ebp+lpFileName]  +
push offset aDeletefileexUn  +
jmp loc_100FA04  +
call ds:GetLastError  +
push eax  +
push [ebp+lpFileName]  +
push offset aDeletefileex_0  +
push 3000000h  +
push offset unk_1019504  +
mov [ebp+dwErrCode] eax +
call sub_100DC59  +
add esp 14h +
push ebx  +
push edi  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
pop esi  +
push [ebp+dwErrCode]  +
call ds:SetLastError  +
mov eax [ebp+var_8] +
pop edi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push esi  +
mov esi [ebp+lpFileName] +
push edi  +
xor edi edi +
mov [ebp+var_8] edi +
mov [ebp+dwErrCode] edi +
cmp esi edi +
jz loc_100FB20  +
xor eax eax +
cmp ax [esi] +
jz loc_100FB20  +
push ebx  +
push edi  +
push esi  +
call sub_100F533  +
mov [ebp+lpFileName] eax +
cmp eax edi +
jz loc_100FAD7  +
push 80h  +
push eax  +
call ds:SetFileAttributesW  +
mov esi ds:GetLastError +
mov ebx 3000000h +
mov edi offset unk_1019504 +
test eax eax +
jnz loc_100FAAE  +
call esi  +
push eax  +
push [ebp+lpFileName]  +
mov [ebp+dwErrCode] eax +
push offset aWdsremovedirec  +
push ebx  +
push edi  +
call sub_100DC59  +
add esp 14h +
push [ebp+lpFileName]  +
call ds:RemoveDirectoryW  +
mov [ebp+var_8] eax +
test eax eax +
jnz loc_100FAF9  +
cmp [ebp+dwErrCode] eax +
jnz loc_100FAC8  +
call esi  +
mov [ebp+dwErrCode] eax +
call esi  +
push eax  +
push [ebp+lpFileName]  +
push offset aWdsremovedir_0  +
push ebx  +
push edi  +
jmp loc_100FAF1  +
call ds:GetLastError  +
push eax  +
push esi  +
push offset aWdsremovedir_1  +
push 3000000h  +
mov [ebp+dwErrCode] eax +
push offset unk_1019504  +
call sub_100DC59  +
add esp 14h +
cmp [ebp+lpFileName] 0 +
pop ebx  +
jz loc_100FB12  +
push [ebp+lpFileName]  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
push [ebp+dwErrCode]  +
call ds:SetLastError  +
mov eax [ebp+var_8] +
jmp loc_100FB2A  +
push 57h  +
call ds:SetLastError  +
xor eax eax +
pop edi  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+lpFileName] +
push ebx  +
push esi  +
xor esi esi +
xor ebx ebx +
cmp eax esi +
jz loc_100FBA6  +
xor ecx ecx +
cmp cx [eax] +
jz loc_100FBA6  +
push edi  +
push esi  +
push eax  +
call sub_100F533  +
mov edi eax +
cmp edi esi +
jz loc_100FBA1  +
push edi  +
call ds:GetFileAttributesW  +
cmp eax 0FFFFFFFFh +
jz loc_100FB6F  +
test al 10h +
jz loc_100FB6F  +
inc ebx  +
jmp loc_100FB8A  +
xor ebx ebx +
call ds:GetLastError  +
mov esi eax +
test esi esi +
jnz loc_100FB82  +
mov esi 10Bh +
cmp esi 2 +
jnz loc_100FB8A  +
push 3  +
pop esi  +
push edi  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
push esi  +
call ds:SetLastError  +
mov eax ebx +
pop edi  +
jmp loc_100FBB0  +
push 57h  +
call ds:SetLastError  +
xor eax eax +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+lpFileName] +
push ebx  +
xor ebx ebx +
cmp eax ebx +
jz loc_100FC19  +
xor ecx ecx +
cmp cx [eax] +
jz loc_100FC19  +
push esi  +
push ebx  +
push eax  +
call sub_100F533  +
mov esi eax +
cmp esi ebx +
jz loc_100FC14  +
push esi  +
call ds:GetFileAttributesW  +
cmp eax 0FFFFFFFFh +
jz loc_100FBF3  +
test eax 400h +
jz loc_100FBF3  +
inc ebx  +
push edi  +
call ds:GetLastError  +
push esi  +
push 0  +
mov edi eax +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
push edi  +
call ds:SetLastError  +
pop edi  +
mov eax ebx +
pop esi  +
jmp loc_100FC23  +
push 57h  +
call ds:SetLastError  +
xor eax eax +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
mov ebx [ebp+lpFileName] +
push esi  +
push edi  +
xor edi edi +
mov [ebp+dwErrCode] edi +
mov [ebp+BytesReturned] edi +
cmp ebx edi +
jz loc_100FD28  +
xor eax eax +
cmp ax [ebx] +
jz loc_100FD28  +
mov esi [ebp+arg_4] +
cmp esi edi +
jz loc_100FD28  +
push edi  +
push ebx  +
call sub_100F533  +
test eax eax +
jz loc_100FD01  +
push edi  +
push 2200000h  +
push 3  +
push edi  +
push 7  +
push edi  +
push ebx  +
mov [esi] edi +
call ds:CreateFileW  +
mov [ebp+lpFileName] eax +
cmp eax 0FFFFFFFFh +
jz loc_100FD15  +
mov esi 4000h +
push esi  +
push 8  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov ebx eax +
cmp ebx edi +
jz loc_100FCCF  +
push edi  +
lea eax [ebp+BytesReturned] +
push eax  +
push esi  +
push ebx  +
push edi  +
push edi  +
push 900A8h  +
push [ebp+lpFileName]  +
call ds:DeviceIoControl  +
test eax eax +
jz loc_100FCCF  +
mov eax [ebx] +
mov ecx [ebp+arg_4] +
mov [ecx] eax +
jmp loc_100FCE3  +
call ds:GetLastError  +
mov [ebp+dwErrCode] 1Fh +
cmp eax edi +
jz loc_100FCE3  +
mov [ebp+dwErrCode] eax +
cmp ebx edi +
jz loc_100FCF6  +
push ebx  +
push edi  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
push [ebp+lpFileName]  +
call ds:CloseHandle  +
jmp loc_100FD15  +
call ds:GetLastError  +
mov [ebp+dwErrCode] 1Fh +
cmp eax edi +
jz loc_100FD15  +
mov [ebp+dwErrCode] eax +
push [ebp+dwErrCode]  +
call ds:SetLastError  +
xor eax eax +
cmp [ebp+dwErrCode] edi +
setz al  +
jmp loc_100FD32  +
push 57h  +
call ds:SetLastError  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+lpFileName] +
push ebx  +
push edi  +
xor edi edi +
xor ebx ebx +
cmp eax edi +
jz loc_100FDAD  +
xor ecx ecx +
cmp cx [eax] +
jz loc_100FDAD  +
push esi  +
push edi  +
push eax  +
call sub_100F533  +
mov esi eax +
test esi esi +
jz loc_100FD99  +
push esi  +
call ds:GetFileAttributesW  +
cmp eax 0FFFFFFFFh +
jz loc_100FD7F  +
test al 10h +
jz loc_100FD7A  +
push 2  +
pop edi  +
jmp loc_100FD87  +
xor ebx ebx +
inc ebx  +
jmp loc_100FD87  +
call ds:GetLastError  +
mov edi eax +
push esi  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
jmp loc_100FDA1  +
call ds:GetLastError  +
mov edi eax +
push edi  +
call ds:SetLastError  +
mov eax ebx +
pop esi  +
jmp loc_100FDB7  +
push 57h  +
call ds:SetLastError  +
xor eax eax +
pop edi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
xor ecx ecx +
mov edx [ebp+arg_0] +
test dword_10190B0[ecx] edx +
jz loc_100FDDC  +
or eax dword_10190AC[ecx] +
add ecx 8 +
cmp ecx 18h +
jb loc_100FDCB  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi ds:ExpandEnvironmentStringsW +
push edi  +
xor edi edi +
push edi  +
push edi  +
push [ebp+lpSrc]  +
call esi  +
mov ebx eax +
test ebx ebx +
jz loc_100FE4B  +
lea eax [ebx+ebx] +
push eax  +
push 8  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov edi eax +
test edi edi +
jz loc_100FE4B  +
push ebx  +
push edi  +
push [ebp+lpSrc]  +
call esi  +
test eax eax +
jz loc_100FE35  +
xor eax eax +
cmp ax [edi] +
jnz loc_100FE4B  +
push edi  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
test eax eax +
jz loc_100FE4B  +
xor edi edi +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
and [ebp+var_4] 0 +
push ebx  +
push esi  +
mov esi ds:OpenEventW +
push edi  +
push 64h  +
xor eax eax +
cmp [ebp+arg_C] eax +
pop ebx  +
push [ebp+lpName]  +
setz al  +
push [ebp+bInheritHandle]  +
push [ebp+dwDesiredAccess]  +
mov [ebp+var_8] eax +
call esi  +
mov edi eax +
test edi edi +
jnz loc_100FEDA  +
cmp [ebp+var_8] 0 +
jnz loc_100FEC6  +
mov eax [ebp+arg_C] +
cmp eax 0FFFFFFFFh +
jz loc_100FEAE  +
add [ebp+var_4] ebx +
cmp [ebp+var_4] eax +
jb loc_100FEAE  +
sub eax [ebp+var_4] +
mov [ebp+var_8] 1 +
add ebx eax +
push ebx  +
call ds:Sleep  +
push [ebp+lpName]  +
push [ebp+bInheritHandle]  +
push [ebp+dwDesiredAccess]  +
call esi  +
mov edi eax +
test edi edi +
jz loc_100FE8C  +
test edi edi +
jnz loc_100FEDA  +
cmp [ebp+var_8] edi +
jz loc_100FEDA  +
push 102h  +
call ds:SetLastError  +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
test esi esi +
jz loc_100FF08  +
mov eax [esi+4] +
test eax eax +
jz loc_100FF08  +
push dword ptr [esi+8]  +
call eax  +
mov [esi] eax +
movzx eax ax +
jmp loc_100FF0B  +
push 57h  +
pop eax  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+hObject] +
sub esp 0Ch +
push esi  +
xor esi esi +
cmp eax esi +
jnz loc_100FF31  +
mov eax 80070057h +
jmp loc_100FFDA  +
push ebx  +
push edi  +
push esi  +
mov [ebp+var_8] eax +
mov eax [ebp+arg_4] +
push esi  +
mov [ebp+var_4] eax +
lea eax [ebp+Parameter] +
push eax  +
push offset sub_100FEE8  +
push esi  +
push esi  +
call ds:CreateThread  +
mov [ebp+hObject] eax +
cmp eax esi +
jz loc_100FFA5  +
push 0FFFFFFFFh  +
push eax  +
call ds:WaitForSingleObject  +
cmp eax 0FFFFFFFFh +
jz loc_100FF69  +
mov esi [ebp+Parameter] +
jmp loc_100FF9A  +
mov ebx ds:GetLastError +
call ebx  +
mov edi 0FFFFh +
mov esi 80070000h +
test eax eax +
jle loc_100FF85  +
and eax edi +
or eax esi +
test eax eax +
jge loc_100FF95  +
call ebx  +
test eax eax +
jle loc_100FF91  +
and eax edi +
or eax esi +
mov esi eax +
jmp loc_100FF9A  +
mov esi 80004005h +
push [ebp+hObject]  +
call ds:CloseHandle  +
jmp loc_100FFD6  +
mov ebx ds:GetLastError +
call ebx  +
mov edi 0FFFFh +
mov esi 80070000h +
test eax eax +
jle loc_100FFC1  +
and eax edi +
or eax esi +
test eax eax +
jge loc_100FFD1  +
call ebx  +
test eax eax +
jle loc_100FFCD  +
and eax edi +
or eax esi +
mov esi eax +
jmp loc_100FFD6  +
mov esi 80004005h +
pop edi  +
mov eax esi +
pop ebx  +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push edi  +
mov edi [ebp+hLibModule] +
mov [ebp+var_4] 80004005h +
test edi edi +
jnz loc_1010000  +
mov eax 80070057h +
jmp loc_1010076  +
push ebx  +
push esi  +
push offset LibFileName  +
call ds:LoadLibraryW  +
mov [ebp+hLibModule] eax +
test eax eax +
jz loc_101004E  +
mov esi ds:GetProcAddress +
push offset aRtlsetthreader  +
push eax  +
call esi  +
mov ebx eax +
test ebx ebx +
jz loc_101004E  +
push offset aRtlgetthreader  +
push [ebp+hLibModule]  +
call esi  +
test eax eax +
jz loc_101004E  +
call eax  +
mov esi eax +
push 0  +
or eax 10h +
push eax  +
call ebx  +
test eax eax +
jl loc_1010062  +
and [ebp+var_4] 0 +
mov [edi] esi +
jmp loc_1010062  +
and [ebp+var_4] 0 +
push 1  +
call ds:SetErrorMode  +
push eax  +
call sub_100FDC2  +
mov [edi] eax +
cmp [ebp+hLibModule] 0 +
pop esi  +
pop ebx  +
jz loc_1010073  +
push [ebp+hLibModule]  +
call ds:FreeLibrary  +
mov eax [ebp+var_4] +
pop edi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
push offset LibFileName  +
mov esi 80004005h +
call ds:LoadLibraryW  +
mov edi eax +
test edi edi +
jz loc_10100BB  +
push offset aRtlsetthreader  +
push edi  +
call ds:GetProcAddress  +
test eax eax +
jz loc_10100BB  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call eax  +
test eax eax +
jl loc_10100F0  +
jmp loc_10100EE  +
xor ecx ecx +
xor eax eax +
mov edx [ebp+arg_0] +
test dword_10190AC[eax] edx +
jz loc_10100D0  +
or ecx dword_10190B0[eax] +
add eax 8 +
cmp eax 18h +
jb loc_10100BF  +
push ecx  +
call ds:SetErrorMode  +
mov esi [ebp+arg_4] +
test esi esi +
jz loc_10100EE  +
push eax  +
call sub_100FDC2  +
mov [esi] eax +
xor esi esi +
test edi edi +
jz loc_10100FB  +
push edi  +
call ds:FreeLibrary  +
pop edi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20Ch +
mov eax dword_101908C +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+hInstance] +
push edi  +
push 100h  +
lea ecx [ebp+String] +
push ecx  +
push [ebp+uID]  +
xor edi edi +
and [ebp+var_208] edi +
and [ebp+dwBytes] edi +
push eax  +
call ds:LoadStringW  +
test eax eax +
jz loc_10101CE  +
lea eax [ebp+var_208] +
push eax  +
push 1  +
lea eax [ebp+String] +
push eax  +
call ds:lstrlenW  +
push eax  +
call sub_100F91A  +
test eax eax +
jl loc_10101CE  +
lea eax [ebp+dwBytes] +
push eax  +
mov eax [ebp+var_208] +
push 2  +
pop ecx  +
mul  ecx +
push edx  +
push eax  +
call sub_100F8E8  +
test eax eax +
jl loc_10101CE  +
push esi  +
push [ebp+dwBytes]  +
mov esi ds:GetProcessHeap +
push 8  +
call esi  +
push eax  +
call ds:HeapAlloc  +
mov edi eax +
test edi edi +
jz loc_10101CD  +
lea eax [ebp+String] +
push eax  +
push [ebp+var_208]  +
push edi  +
call sub_100E60C  +
test eax eax +
jge loc_10101CD  +
push edi  +
push 0  +
call esi  +
push eax  +
call ds:HeapFree  +
xor edi edi +
pop esi  +
mov ecx [ebp+var_4] +
mov eax edi +
xor ecx ebp +
pop edi  +
call sub_100D691  +
leave   +
retn 8  +
***
test esi esi +
jz loc_1010233  +
mov eax [esi+28h] +
push ebx  +
mov ebx ds:GetProcessHeap +
push edi  +
mov edi ds:HeapFree +
test eax eax +
jz loc_101020D  +
push eax  +
push 0  +
call ebx  +
push eax  +
call edi  +
test eax eax +
jz loc_101020D  +
and dword ptr [esi+28h] 0 +
mov eax [esi+30h] +
test eax eax +
jz loc_1010224  +
push eax  +
push 0  +
call ebx  +
push eax  +
call edi  +
test eax eax +
jz loc_1010224  +
and dword ptr [esi+30h] 0 +
push 38h  +
push 0  +
push esi  +
call memset  +
add esp 0Ch +
pop edi  +
pop ebx  +
xor eax eax +
inc eax  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+lpFileName] 0 +
jnz loc_1010253  +
push 57h  +
call ds:SetLastError  +
xor eax eax +
jmp loc_101026D  +
test [ebp+arg_4] 1 +
jz loc_1010265  +
push 1  +
push [ebp+lpFileName]  +
call sub_100F948  +
jmp loc_101026D  +
push [ebp+lpFileName]  +
call sub_100FA40  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi [ebp+0Ch] +
mov dword ptr [ebp-4] 1 +
test esi esi +
jnz loc_1010297  +
push 57h  +
call ds:SetLastError  +
xor eax eax +
jmp loc_10102F8  +
mov eax [esi+0Ch] +
push ebx  +
mov ebx ds:GetLastError +
push edi  +
mov edi [ebp+8] +
test eax eax +
jz loc_10102D8  +
push dword ptr [esi+10h]  +
push dword ptr [edi+28h]  +
call eax  +
mov [ebp-4] eax +
test eax eax +
jnz loc_10102C9  +
call ebx  +
test eax eax +
jnz loc_10102C9  +
push 4C7h  +
call ds:SetLastError  +
cmp dword ptr [esi] 0 +
jnz loc_10102D2  +
call ebx  +
mov [esi] eax +
cmp dword ptr [ebp-4] 0 +
jz loc_10102F3  +
push dword ptr [esi+8]  +
push dword ptr [edi+28h]  +
call sub_100F948  +
test eax eax +
jnz loc_10102EA  +
inc dword ptr [esi+4]  +
cmp dword ptr [esi] 0 +
jnz loc_10102F3  +
call ebx  +
mov [esi] eax +
mov eax [ebp-4] +
pop edi  +
pop ebx  +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
push edi  +
xor ebx ebx +
mov edi ecx +
mov esi eax +
mov [ebp+var_4] ebx +
cmp edi ebx +
jz loc_10103C0  +
cmp [ebp+arg_0] ebx +
jz loc_10103C0  +
cmp esi ebx +
jz loc_10103C0  +
push 38h  +
push ebx  +
push esi  +
call memset  +
mov eax [edi] +
mov [esi] eax +
mov eax [edi+4] +
mov [esi+4] eax +
mov eax [edi+8] +
mov [esi+8] eax +
mov eax [edi+0Ch] +
mov [esi+0Ch] eax +
mov eax [edi+10h] +
mov [esi+10h] eax +
mov eax [edi+14h] +
mov [esi+14h] eax +
mov eax [edi+18h] +
mov [esi+18h] eax +
mov eax [edi+1Ch] +
shl eax 4 +
add eax [edi+20h] +
add esp 0Ch +
add edi 2Ch +
push edi  +
push [ebp+arg_0]  +
mov [esi+20h] eax +
mov [esi+24h] ebx +
call sub_1010B11  +
mov [esi+28h] eax +
cmp eax ebx +
jz loc_10103B6  +
push 5Ch  +
push eax  +
call ds:wcsrchr  +
pop ecx  +
pop ecx  +
cmp eax ebx +
jz loc_1010397  +
add eax 2 +
jmp loc_101039A  +
mov eax [esi+28h] +
push ebx  +
push dword ptr [esi+28h]  +
mov [esi+2Ch] eax +
call sub_100F341  +
mov [esi+30h] eax +
cmp eax ebx +
jz loc_10103B6  +
mov [ebp+var_4] 1 +
jmp loc_10103BB  +
call sub_10101E4  +
mov eax [ebp+var_4] +
jmp loc_10103CA  +
push 57h  +
call ds:SetLastError  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2B8h +
mov eax dword_101908C +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_4] +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
mov [ebp+var_278] eax +
mov eax [ebp+arg_8] +
push edi  +
mov [ebp+var_264] eax +
mov eax [ebp+arg_C] +
xor ebx ebx +
push 24Ch  +
mov [ebp+var_268] eax +
lea eax [ebp-250h] +
push ebx  +
push eax  +
mov [ebp+var_280] esi +
mov [ebp+lpFileName] ebx +
mov [ebp+FindFileData] ebx +
call memset  +
add esp 0Ch +
mov [ebp+dwErrCode] ebx +
mov [ebp+var_26C] ebx +
mov [ebp+var_270] ebx +
cmp esi ebx +
jz loc_1010759  +
xor eax eax +
cmp ax [esi] +
jz loc_1010759  +
push esi  +
call sub_100FBBB  +
mov edi ds:GetLastError +
test eax eax +
jz loc_101049F  +
test [ebp+arg_10] 1 +
jz loc_1010482  +
push ebx  +
call ds:SetLastError  +
xor eax eax +
inc eax  +
jmp loc_1010763  +
lea eax [ebp+var_270] +
push eax  +
push esi  +
call sub_100FC2D  +
test eax eax +
jz loc_101050F  +
cmp [ebp+var_270] 80000008h +
jnz loc_1010473  +
push offset asc_1001D84  +
push esi  +
call sub_1010B11  +
mov [ebp+lpMem] eax +
cmp eax ebx +
jz loc_10106F0  +
push ebx  +
push eax  +
call sub_100F533  +
mov [ebp+lpFileName] eax +
cmp eax ebx +
jz loc_10106F0  +
lea eax [ebp+FindFileData] +
push eax  +
push [ebp+lpFileName]  +
call ds:FindFirstFileW  +
mov [ebp+hFindFile] eax +
cmp eax 0FFFFFFFFh +
jz loc_101068C  +
push 34h  +
lea eax [ebp+var_2B4] +
push ebx  +
push eax  +
mov [ebp+var_2B8] ebx +
call memset  +
mov ebx ds:CompareStringW +
add esp 0Ch +
jmp loc_1010553  +
call edi  +
push esi  +
mov [ebp+var_25C] eax +
call sub_100FBBB  +
test eax eax +
jz loc_101049F  +
push [ebp+var_25C]  +
push offset aEnumeratepathe  +
push 2000000h  +
push offset unk_1019504  +
call sub_100DC59  +
add esp 10h +
push [ebp+var_25C]  +
jmp loc_101075B  +
mov esi [ebp+var_280] +
push esi  +
lea eax [ebp+var_2B8] +
lea ecx [ebp+FindFileData] +
call sub_1010302  +
mov [ebp+var_25C] eax +
cmp eax 1 +
jnz loc_10105F7  +
test byte ptr [ebp+var_2B8] 10h +
jz loc_10105D5  +
cmp [ebp+var_278] 0 +
jz loc_10105F7  +
push 0FFFFFFFFh  +
push [ebp+var_28C]  +
mov esi 409h +
push 0FFFFFFFFh  +
push offset a_  +
push eax  +
push esi  +
call ebx  +
dec eax  +
dec eax  +
jz loc_10105F7  +
push 0FFFFFFFFh  +
push [ebp+var_28C]  +
push 0FFFFFFFFh  +
push offset a__  +
push 1  +
push esi  +
call ebx  +
dec eax  +
dec eax  +
jz loc_10105F7  +
push [ebp+var_268]  +
lea eax [ebp+var_2B8] +
push [ebp+var_264]  +
push eax  +
call [ebp+var_278]  +
jmp loc_10105F1  +
cmp [ebp+var_264] 0 +
jz loc_10105F7  +
push [ebp+var_268]  +
lea eax [ebp+var_2B8] +
push eax  +
call [ebp+var_264]  +
mov [ebp+var_25C] eax +
lea esi [ebp+var_2B8] +
call sub_10101E4  +
xor esi esi +
inc esi  +
cmp eax esi +
jnz loc_101062C  +
cmp [ebp+var_25C] esi +
jnz loc_1010653  +
lea eax [ebp+FindFileData] +
push eax  +
push [ebp+hFindFile]  +
call ds:FindNextFileW  +
cmp eax esi +
jz loc_101054D  +
cmp [ebp+var_25C] esi +
jnz loc_1010653  +
call edi  +
cmp eax 12h +
jnz loc_1010643  +
mov [ebp+var_26C] esi +
jmp loc_1010679  +
call edi  +
push eax  +
push [ebp+lpFileName]  +
push offset aEnumeratepat_0  +
jmp loc_1010661  +
call edi  +
push eax  +
push [ebp+lpFileName]  +
push offset aEnumeratepat_1  +
push 2000000h  +
push offset unk_1019504  +
mov [ebp+dwErrCode] eax +
call sub_100DC59  +
add esp 14h +
push [ebp+hFindFile]  +
call ds:FindClose  +
xor ebx ebx +
jmp loc_1010711  +
call edi  +
push eax  +
push [ebp+lpFileName]  +
mov esi offset unk_1019504 +
push offset aEnumeratepat_2  +
push 2000000h  +
push esi  +
mov [ebp+dwErrCode] eax +
call sub_100DC59  +
mov eax [ebp+lpFileName] +
add esp 14h +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
cmp cx bx +
jnz loc_10106BC  +
sub eax edx +
sar eax 1 +
cmp eax 104h +
jb loc_1010711  +
push offset aEnumeratepat_3  +
push 3000000h  +
push esi  +
call sub_100DC59  +
add esp 0Ch +
mov [ebp+dwErrCode] 0CEh +
jmp loc_1010711  +
call edi  +
push eax  +
push esi  +
push offset aEnumeratepat_4  +
push 2000000h  +
push offset unk_1019504  +
mov [ebp+dwErrCode] eax +
call sub_100DC59  +
add esp 14h +
mov esi ds:HeapFree +
mov edi ds:GetProcessHeap +
cmp [ebp+lpMem] ebx +
jz loc_1010731  +
push [ebp+lpMem]  +
push ebx  +
call edi  +
push eax  +
call esi  +
cmp [ebp+lpFileName] ebx +
jz loc_1010745  +
push [ebp+lpFileName]  +
push ebx  +
call edi  +
push eax  +
call esi  +
push [ebp+dwErrCode]  +
call ds:SetLastError  +
mov eax [ebp+var_26C] +
jmp loc_1010763  +
push 57h  +
call ds:SetLastError  +
xor eax eax +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100D691  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
xor ebx ebx +
push esi  +
mov esi [ebp+10h] +
inc ebx  +
mov [ebp-4] ebx +
test esi esi +
jnz loc_101079D  +
push 57h  +
call ds:SetLastError  +
xor eax eax +
jmp loc_101082B  +
mov eax [esi+0Ch] +
push edi  +
mov edi [ebp+8] +
test eax eax +
jz loc_10107CE  +
push dword ptr [esi+10h]  +
push dword ptr [edi+28h]  +
call eax  +
mov [ebp-4] eax +
test eax eax +
jnz loc_10107CE  +
call ds:GetLastError  +
test eax eax +
jnz loc_1010817  +
push 4C7h  +
call ds:SetLastError  +
jmp loc_1010817  +
test dword ptr [edi] 400h +
jz loc_10107E3  +
push dword ptr [esi+8]  +
push dword ptr [edi+28h]  +
call sub_101023C  +
jmp loc_1010813  +
push ebx  +
push esi  +
push dword ptr [ebp+0Ch]  +
push offset loc_1010779  +
push dword ptr [edi+28h]  +
call sub_10103D6  +
dec eax  +
neg eax  +
sbb eax eax +
inc eax  +
mov [ebp-4] eax +
cmp eax ebx +
jnz loc_1010813  +
push dword ptr [esi+8]  +
push dword ptr [edi+28h]  +
call sub_101023C  +
cmp eax ebx +
jz loc_1010827  +
xor eax eax +
test eax eax +
jnz loc_1010827  +
inc dword ptr [esi+4]  +
cmp dword ptr [esi] 0 +
jnz loc_1010827  +
call ds:GetLastError  +
mov [esi] eax +
mov eax [ebp-4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 224h +
mov eax dword_101908C +
xor eax ebp +
mov [ebp+var_4] eax +
push edi  +
xor eax eax +
lea edi [ebp+var_21C] +
stos   +
stos   +
stos   +
stos   +
push 1  +
lea eax [ebp+dwErrCode] +
push eax  +
push offset loc_1010276  +
push offset loc_1010779  +
xor edi edi +
push ebx  +
mov [ebp+dwErrCode] edi +
mov [ebp+var_21C] edi +
mov [ebp+var_218] esi +
mov [ebp+var_210] edx +
mov [ebp+var_214] ecx +
call sub_10103D6  +
push esi  +
push ebx  +
mov [ebp+var_224] eax +
call sub_101023C  +
test eax eax +
jnz loc_10108BC  +
inc [ebp+var_21C]  +
cmp [ebp+dwErrCode] edi +
jnz loc_10108BC  +
call ds:GetLastError  +
mov [ebp+dwErrCode] eax +
cmp [ebp+var_21C] edi +
jbe loc_1010969  +
push 204h  +
lea eax [ebp+var_208] +
push edi  +
push eax  +
mov dword ptr [ebp+Buffer] edi +
call memset  +
add esp 0Ch +
lea eax [ebp+Buffer] +
push eax  +
push 104h  +
call ds:GetCurrentDirectoryW  +
test eax eax +
jnz loc_1010900  +
mov [ebp+Buffer] ax +
xor eax eax +
lea ecx [ebp+Buffer] +
cmp ax [ebp+Buffer] +
jnz loc_1010916  +
mov ecx offset aUnavailable +
cmp [ebp+var_21C] 1 +
mov eax offset aS_0 +
jnz loc_1010929  +
mov eax offset WindowName +
push ecx  +
push [ebp+dwErrCode]  +
push ebx  +
push eax  +
push [ebp+var_21C]  +
push offset aDeletepathengi  +
push 4000000h  +
push offset unk_1019504  +
call sub_100DC59  +
add esp 20h +
cmp [ebp+dwErrCode] edi +
jz loc_1010963  +
push [ebp+dwErrCode]  +
call ds:SetLastError  +
mov [ebp+var_224] edi +
mov ecx [ebp+var_4] +
mov eax [ebp+var_224] +
xor ecx ebp +
pop edi  +
call sub_100D691  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
xor eax eax +
push ebx  +
mov ebx [ebp+lpFileName] +
mov [ebp+var_8] eax +
mov [ebp+dwErrCode] eax +
mov [ebp+var_C] eax +
mov [ebp+var_10] eax +
cmp ebx eax +
jz loc_1010ACB  +
cmp ax [ebx] +
jz loc_1010ACB  +
push ebx  +
call sub_100FB35  +
test eax eax +
jnz loc_10109D5  +
push ebx  +
push offset aDeletepathSDoe  +
push 2000000h  +
push offset unk_1019504  +
call sub_100DC59  +
add esp 10h +
push 3  +
jmp loc_1010AE4  +
push esi  +
push edi  +
lea eax [ebp+var_C] +
push eax  +
push 1  +
push offset aSebackupprivil  +
call sub_1010E08  +
mov [ebp+lpFileName] eax +
lea eax [ebp+var_10] +
push eax  +
push 1  +
push offset aSerestoreprivi  +
call sub_1010E08  +
mov [ebp+var_14] eax +
mov edi offset unk_1019504 +
mov eax [ebp+var_8] +
inc [ebp+var_8]  +
test eax eax +
jbe loc_1010A32  +
call ds:GetLastError  +
push eax  +
push ebx  +
push offset aDeletepathFail  +
push 4000000h  +
push edi  +
call sub_100DC59  +
add esp 14h +
push 3E8h  +
call ds:Sleep  +
mov edx [ebp+arg_C] +
mov ecx [ebp+arg_8] +
mov esi [ebp+arg_4] +
call sub_1010836  +
mov esi eax +
cmp esi 1 +
jz loc_1010A4D  +
cmp [ebp+dwErrCode] 0 +
jnz loc_1010A56  +
call ds:GetLastError  +
mov [ebp+dwErrCode] eax +
test esi esi +
jnz loc_1010A8C  +
cmp [ebp+var_8] 3 +
jnb loc_1010A72  +
cmp [ebp+dwErrCode] 4C7h +
jz loc_1010A72  +
cmp [ebp+dwErrCode] 800704C7h +
jnz loc_1010A02  +
push [ebp+dwErrCode]  +
push [ebp+var_8]  +
push ebx  +
push offset aDeletepathFa_0  +
push 2000000h  +
push edi  +
call sub_100DC59  +
add esp 18h +
cmp [ebp+lpFileName] 1 +
jnz loc_1010AA4  +
cmp [ebp+var_C] 0 +
jnz loc_1010AA4  +
push 0  +
push offset aSebackupprivil  +
call sub_1010EAE  +
cmp [ebp+var_14] 1 +
jnz loc_1010ABC  +
cmp [ebp+var_10] 0 +
jnz loc_1010ABC  +
push 0  +
push offset aSerestoreprivi  +
call sub_1010EAE  +
push [ebp+dwErrCode]  +
call ds:SetLastError  +
pop edi  +
mov eax esi +
pop esi  +
jmp loc_1010AEC  +
push offset aDeletepathCann  +
push 2000000h  +
push offset unk_1019504  +
call sub_100DC59  +
add esp 0Ch +
push 57h  +
call ds:SetLastError  +
xor eax eax +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
push eax  +
push eax  +
push eax  +
push [ebp+lpFileName]  +
call sub_1010981  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
push ebx  +
push esi  +
push edi  +
mov edi dword ptr [ebp+arg_0] +
test edi edi +
jz loc_1010BFF  +
mov ebx [ebp+arg_4] +
test ebx ebx +
jz loc_1010BFF  +
mov eax edi +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_1010B39  +
sub eax edx +
sar eax 1 +
mov ecx eax +
mov eax ebx +
lea edx [eax+2] +
mov si [eax] +
inc eax  +
inc eax  +
test si si +
jnz loc_1010B4E  +
sub eax edx +
sar eax 1 +
test ecx ecx +
jz loc_1010B82  +
push 5Ch  +
pop edx  +
cmp dx [edi+ecx*2-2] +
push edx  +
pop edx  +
jnz loc_1010B76  +
cmp dx [ebx] +
jnz loc_1010B82  +
inc ebx  +
inc ebx  +
dec eax  +
jmp loc_1010B82  +
cmp dx [ebx] +
jz loc_1010B82  +
mov [ebp+var_4] 1 +
mov edx [ebp+var_4] +
add edx eax +
mov eax large fs:18h +
mov eax [eax+30h] +
lea esi [edx+ecx+1] +
lea ecx [esi+esi] +
push ecx  +
push 8  +
push dword ptr [eax+18h]  +
call ds:RtlAllocateHeap  +
mov edi eax +
test edi edi +
jz loc_1010C0C  +
cmp [ebp+var_4] 0 +
mov eax offset asc_1001DF4 +
ja loc_1010BB9  +
mov eax offset WindowName +
push ebx  +
push eax  +
push dword ptr [ebp+arg_0]  +
push offset aSSS  +
push esi  +
push edi  +
call sub_100EDF4  +
mov esi eax +
mov eax large fs:18h +
add esp 18h +
test esi esi +
jge loc_1010BF7  +
mov eax [eax+30h] +
push edi  +
push 0  +
push dword ptr [eax+18h]  +
call ds:RtlFreeHeap  +
mov ecx large fs:18h +
movzx eax si +
mov [ecx+34h] eax +
jmp loc_1010C0C  +
and dword ptr [eax+34h] 0 +
mov eax edi +
jmp loc_1010C0E  +
mov eax large fs:18h +
mov dword ptr [eax+34h] 57h +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+lpName] 0 +
jnz loc_1010C2C  +
mov eax 80070057h +
jmp loc_1010C5A  +
push 0  +
push 0  +
push [ebp+lpName]  +
call WNetCancelConnection2W  +
test eax eax +
jz loc_1010C58  +
cmp eax 8CAh +
jz loc_1010C53  +
test eax eax +
jle loc_1010C5A  +
and eax 0FFFFh +
or eax 80070000h +
jmp loc_1010C5A  +
xor eax eax +
inc eax  +
jmp loc_1010C5A  +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
test esi esi +
jz loc_1010CCD  +
mov eax [esi] +
push ebx  +
mov ebx ds:GetProcessHeap +
push edi  +
mov edi ds:HeapFree +
test eax eax +
jz loc_1010C93  +
push eax  +
push 0  +
call ebx  +
push eax  +
call edi  +
test eax eax +
jz loc_1010C93  +
and dword ptr [esi] 0 +
mov eax [esi+4] +
test eax eax +
jz loc_1010CAA  +
push eax  +
push 0  +
call ebx  +
push eax  +
call edi  +
test eax eax +
jz loc_1010CAA  +
and dword ptr [esi+4] 0 +
mov eax [esi+8] +
test eax eax +
jz loc_1010CC1  +
push eax  +
push 0  +
call ebx  +
push eax  +
call edi  +
test eax eax +
jz loc_1010CC1  +
and dword ptr [esi+8] 0 +
push 0Ch  +
pop eax  +
pop edi  +
pop ebx  +
mov byte ptr [esi] 0 +
inc esi  +
dec eax  +
jnz loc_1010CC6  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push ebx  +
mov ebx [ebp+lpName] +
push edi  +
xor edi edi +
cmp ebx edi +
jz loc_1010DA3  +
cmp dword ptr [ebp+lpMem] edi +
jz loc_1010DA3  +
cmp [ebp+arg_8] edi +
jz loc_1010DA3  +
cmp [ebp+lpPassword] edi +
jz loc_1010DA3  +
push esi  +
push ebx  +
call sub_1010C1A  +
mov esi eax +
cmp esi edi +
jl loc_1010D9E  +
push 8  +
xor eax eax +
pop ecx  +
lea edi [ebp+NetResource] +
stos   +
mov eax dword ptr [ebp+lpMem] +
xor edi edi +
xor ecx ecx +
cmp cx [eax] +
mov [ebp+NetResource.dwType] edi +
mov [ebp+NetResource.lpLocalName] edi +
mov [ebp+NetResource.lpRemoteName] ebx +
mov [ebp+NetResource.lpProvider] edi +
mov ecx offset WindowName +
jz loc_1010D46  +
mov ecx offset asc_1001DF4 +
push [ebp+arg_8]  +
push ecx  +
push eax  +
lea eax [ebp+lpMem] +
push offset aSSS  +
push eax  +
call sub_100E8F9  +
mov esi eax +
add esp 14h +
cmp esi edi +
jl loc_1010D9E  +
push edi  +
push dword ptr [ebp+lpMem]  +
lea eax [ebp+NetResource] +
push [ebp+lpPassword]  +
push eax  +
call WNetAddConnection2W  +
cmp eax edi +
jnz loc_1010D7A  +
xor esi esi +
jmp loc_1010D88  +
jle loc_1010D86  +
and eax 0FFFFh +
or eax 80070000h +
mov esi eax +
cmp dword ptr [ebp+lpMem] edi +
jz loc_1010D9E  +
push dword ptr [ebp+lpMem]  +
push edi  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
mov eax esi +
pop esi  +
jmp loc_1010DA8  +
mov eax 80070057h +
pop edi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+lpName] +
test ecx ecx +
jz loc_1010DDD  +
xor eax eax +
cmp ax [ecx] +
jz loc_1010DDD  +
mov eax [ebp+arg_4] +
test eax eax +
jz loc_1010DDD  +
push dword ptr [eax+8]  +
push dword ptr [eax+4]  +
push dword ptr [eax]  +
push ecx  +
call sub_1010CD7  +
jmp loc_1010DE2  +
mov eax 80070057h +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_1010DFF  +
mov ecx [ebp+arg_4] +
mov [eax] ecx +
xor eax eax +
inc eax  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 28h +
push esi  +
lea eax [ebp+hObject] +
push eax  +
xor esi esi +
and [ebp+ReturnLength] esi +
push 28h  +
call ds:GetCurrentProcess  +
push eax  +
call ds:OpenProcessToken  +
test eax eax +
jz loc_1010EA2  +
lea eax [ebp+NewState.Privileges] +
push eax  +
push [ebp+lpName]  +
push esi  +
call ds:LookupPrivilegeValueW  +
test eax eax +
jz loc_1010E99  +
push ebx  +
mov ebx [ebp+arg_4] +
inc esi  +
mov eax ebx +
neg eax  +
sbb eax eax +
and eax 2 +
mov [ebp+NewState.Privileges.Attributes] eax +
lea eax [ebp+ReturnLength] +
push eax  +
lea eax [ebp+PreviousState] +
push eax  +
push 10h  +
lea eax [ebp+NewState] +
push eax  +
push 0  +
push [ebp+hObject]  +
mov [ebp+NewState.PrivilegeCount] esi +
call ds:AdjustTokenPrivileges  +
test eax eax +
jz loc_1010E7A  +
call ds:GetLastError  +
test eax eax +
jz loc_1010E7E  +
xor esi esi +
jmp loc_1010E98  +
mov eax [ebp+arg_8] +
test eax eax +
jz loc_1010E98  +
cmp [ebp+PreviousState.PrivilegeCount] 0 +
jnz loc_1010E8F  +
mov [eax] ebx +
jmp loc_1010E98  +
mov ecx [ebp+PreviousState.Privileges.Attributes] +
shr ecx 1 +
and ecx esi +
mov [eax] ecx +
pop ebx  +
push [ebp+hObject]  +
call ds:CloseHandle  +
mov eax esi +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+arg_4]  +
push [ebp+lpName]  +
call sub_1010E08  +
pop ebp  +
retn 8  +
***
mov eax hModule +
push esi  +
test eax eax +
jz loc_1010F7A  +
mov esi ds:GetProcAddress +
push offset aWdssetuplogini  +
push eax  +
call esi  +
mov dword_101951C eax +
test eax eax +
jz loc_1010F7A  +
push offset aWdssetuplogdes  +
push hModule  +
call esi  +
mov dword_1019520 eax +
test eax eax +
jz loc_1010F7A  +
push offset aWdssetuplogmes  +
push hModule  +
call esi  +
mov dword_1019524 eax +
test eax eax +
jz loc_1010F7A  +
push offset aWdssetuplogm_0  +
push hModule  +
call esi  +
mov dword_1019528 eax +
test eax eax +
jz loc_1010F7A  +
push offset aConstructparti  +
push hModule  +
call esi  +
mov dword_101952C eax +
test eax eax +
jz loc_1010F7A  +
push offset aConstructpar_0  +
push hModule  +
call esi  +
mov dword_1019530 eax +
test eax eax +
jz loc_1010F7A  +
push offset aCurrentip  +
push hModule  +
call esi  +
mov dword_1019534 eax +
test eax eax +
jz loc_1010F7A  +
xor eax eax +
pop esi  +
retn   +
push ebx  +
mov ebx ds:GetLastError +
push edi  +
call ebx  +
mov edi 0FFFFh +
mov esi 80070000h +
test eax eax +
jle loc_1010F98  +
and eax edi +
or eax esi +
test eax eax +
jge loc_1010FA6  +
call ebx  +
test eax eax +
jle loc_1010FAB  +
and eax edi +
or eax esi +
jmp loc_1010FAB  +
mov eax 80004005h +
pop edi  +
pop ebx  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov ebx offset CriticalSection +
push ebx  +
call ds:EnterCriticalSection  +
inc dword_101950C  +
xor esi esi +
cmp dword_1019510 esi +
jnz loc_101107E  +
push edi  +
xor edi edi +
mov hModule esi +
cmp [ebp+arg_0] esi +
jnz loc_1010FFF  +
push offset aWindirPantherU  +
call sub_100FDED  +
mov edi eax +
cmp edi esi +
jz loc_1010FFF  +
push edi  +
call sub_100F735  +
push offset aWdscore_dll  +
call ds:LoadLibraryW  +
mov hModule eax +
cmp eax esi +
jz loc_1011052  +
call sub_1010EC9  +
test eax eax +
jl loc_1011052  +
cmp [ebp+arg_0] esi +
jnz loc_1011042  +
mov eax dword_101951C +
cmp eax esi +
jz loc_1011052  +
push edi  +
push 300F000h  +
push esi  +
call eax  +
xor eax eax +
inc eax  +
mov dword_1019510 eax +
mov dword_1019514 eax +
jmp loc_1011052  +
mov dword_1019510 1 +
mov dword_1019514 esi +
cmp dword_1019510 esi +
jnz loc_101106A  +
mov eax hModule +
cmp eax esi +
jz loc_101106A  +
push eax  +
call ds:FreeLibrary  +
cmp edi esi +
jz loc_101107D  +
push edi  +
push esi  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
pop edi  +
push ebx  +
call ds:LeaveCriticalSection  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
push edi  +
mov edi offset CriticalSection +
push edi  +
call ds:EnterCriticalSection  +
dec dword_101950C  +
xor esi esi +
cmp dword_1019510 esi +
jz loc_10110F1  +
cmp dword_101950C esi +
jnz loc_10110F1  +
cmp hModule esi +
jz loc_10110F1  +
cmp dword_1019514 esi +
jz loc_10110D3  +
mov eax dword_1019520 +
cmp eax esi +
jz loc_10110D3  +
call eax  +
push hModule  +
call ds:FreeLibrary  +
mov hModule esi +
mov dword_1019510 esi +
mov dword_1019514 esi +
push edi  +
call ds:LeaveCriticalSection  +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
xor eax eax +
test ecx ecx +
jz loc_1011116  +
cmp ecx 7FFFFFFFh +
jbe loc_101111B  +
mov eax 80070057h +
test eax eax +
jl loc_1011158  +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
lea eax [ebp+arg_C] +
push eax  +
push [ebp+arg_8]  +
lea esi [ecx-1] +
push esi  +
push edi  +
xor ebx ebx +
call ds:_vsnprintf  +
add esp 10h +
test eax eax +
jl loc_101114B  +
cmp eax esi +
ja loc_101114B  +
jnz loc_1011153  +
mov [esi+edi] bl +
jmp loc_1011153  +
mov [esi+edi] bl +
mov ebx 8007007Ah +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn   +
***
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 218h +
mov eax dword_101908C +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_8] +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
xor edi edi +
mov [ebp+var_214] esi +
mov [ebp+var_218] eax +
cmp esi edi +
jz loc_10112FD  +
cmp eax edi +
jz loc_10112FD  +
push 204h  +
lea eax [ebp+var_208] +
push edi  +
push eax  +
mov dword ptr [ebp+Filename] edi +
call memset  +
add esp 0Ch +
push 104h  +
lea eax [ebp+Filename] +
push eax  +
push edi  +
mov dword ptr [ebp+var_210] offset aUnknown +
call ds:GetModuleFileNameW  +
test eax eax +
jz loc_1011208  +
lea eax [ebp+Filename] +
push 5Ch  +
push eax  +
call ds:wcsrchr  +
pop ecx  +
pop ecx  +
cmp eax edi +
jz loc_10111FC  +
inc eax  +
inc eax  +
jmp loc_1011202  +
lea eax [ebp+Filename] +
mov dword ptr [ebp+var_210] eax +
mov eax esi +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
cmp cx di +
jnz loc_101120D  +
sub eax edx +
sar eax 1 +
mov ecx eax +
lea eax [ebp+Filename] +
lea edx [eax+2] +
mov si [eax] +
inc eax  +
inc eax  +
cmp si di +
jnz loc_1011226  +
mov edi ds:GetProcessHeap +
sub eax edx +
sar eax 1 +
push ebx  +
lea esi [eax+ecx+4] +
push esi  +
push 8  +
call edi  +
push eax  +
call ds:HeapAlloc  +
mov ebx eax +
test ebx ebx +
jz loc_10112FC  +
push [ebp+var_214]  +
push dword ptr [ebp+var_210]  +
push offset aSS  +
push esi  +
push ebx  +
call sub_1011100  +
add esp 14h +
xor esi esi +
test eax eax +
jl loc_10112F1  +
mov eax [ebp+arg_0] +
sub eax esi +
jz loc_1011295  +
dec eax  +
jz loc_101128C  +
dec eax  +
jnz loc_101129C  +
mov [ebp+arg_0] 3000000h +
jmp loc_101129C  +
mov [ebp+arg_0] 2000000h +
jmp loc_101129C  +
mov [ebp+arg_0] 4000000h +
cmp dword_1019528 esi +
jz loc_10112F1  +
cmp dword_1019530 esi +
jz loc_10112F1  +
cmp dword_1019534 esi +
jz loc_10112F1  +
push esi  +
push esi  +
call ds:GetLastError  +
push eax  +
call dword_1019534  +
push eax  +
push offset aUnattendlogwv  +
push offset aDW7rtmBaseNtse  +
push 192h  +
push esi  +
push offset aD  +
push esi  +
push [ebp+var_218]  +
push ebx  +
push [ebp+arg_0]  +
call dword_1019530  +
push eax  +
call dword_1019528  +
push ebx  +
push esi  +
call edi  +
push eax  +
call ds:HeapFree  +
pop ebx  +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_100D691  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
lea eax [ebp+arg_8] +
push eax  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_101116C  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push esi  +
push edi  +
xor esi esi +
xor eax eax +
mov [ebp+var_10] esi +
lea edi [ebp+var_C] +
stos   +
stos   +
stos   +
cmp [ebp+arg_C] esi +
jz loc_101137B  +
push [ebp+arg_C]  +
lea eax [ebp+var_10] +
push eax  +
call WdsInitializeDataStringW  +
cmp eax 1 +
jnz loc_101137B  +
lea eax [ebp+var_10] +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call WdsSetBlackboardValue  +
cmp eax 1 +
jnz loc_1011372  +
inc esi  +
lea eax [ebp+var_10] +
push eax  +
call WdsFreeData  +
pop edi  +
mov eax esi +
pop esi  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push esi  +
mov esi [ebp+arg_C] +
push edi  +
xor edx edx +
xor eax eax +
mov [ebp+var_10] edx +
lea edi [ebp+var_C] +
stos   +
stos   +
stos   +
cmp [ebp+arg_0] edx +
jz loc_10113E4  +
mov ecx [ebp+arg_4] +
cmp ecx edx +
jz loc_10113E4  +
cmp [ecx] dx +
jz loc_10113E4  +
mov eax [ebp+arg_8] +
cmp eax edx +
jz loc_10113E4  +
cmp [eax] dx +
jz loc_10113E4  +
lea edx [ebp+var_10] +
push edx  +
push eax  +
push ecx  +
push [ebp+arg_0]  +
call WdsGetBlackboardValue  +
cmp eax 1 +
jnz loc_10113E4  +
cmp [ebp+var_10] 4 +
jnz loc_10113DB  +
mov esi [ebp+var_8] +
lea eax [ebp+var_10] +
push eax  +
call WdsFreeData  +
pop edi  +
mov eax esi +
pop esi  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push ebx  +
push edi  +
xor eax eax +
xor ebx ebx +
mov [ebp+var_10] ebx +
lea edi [ebp+var_C] +
stos   +
stos   +
stos   +
mov eax [ebp+arg_C] +
mov [ebp+arg_C] eax +
cmp [ebp+arg_0] ebx +
jz loc_10114D8  +
mov ecx [ebp+arg_4] +
cmp ecx ebx +
jz loc_10114D8  +
cmp [ecx] bx +
jz loc_10114D8  +
mov eax [ebp+arg_8] +
cmp eax ebx +
jz loc_10114D8  +
cmp [eax] bx +
jz loc_10114D8  +
lea edx [ebp+var_10] +
push edx  +
push eax  +
push ecx  +
push [ebp+arg_0]  +
call WdsGetBlackboardValue  +
cmp eax 1 +
jnz loc_10114D8  +
push esi  +
cmp [ebp+var_10] eax +
jnz loc_10114BD  +
mov esi ds:CompareStringW +
mov edi 409h +
cmp [ebp+arg_C] 0 +
jnz loc_1011492  +
push 0FFFFFFFFh  +
push off_10190C4[ebx]  +
push 0FFFFFFFFh  +
push [ebp+lpString1]  +
push 1  +
push edi  +
call esi  +
dec eax  +
dec eax  +
jnz loc_101148A  +
mov [ebp+arg_C] 1 +
add ebx 4 +
cmp ebx 14h +
jb loc_1011467  +
xor ebx ebx +
cmp [ebp+arg_C] 0 +
jz loc_10114CE  +
push 0FFFFFFFFh  +
push off_10190D8[ebx]  +
push 0FFFFFFFFh  +
push [ebp+lpString1]  +
push 1  +
push edi  +
call esi  +
dec eax  +
dec eax  +
jnz loc_10114B3  +
and [ebp+arg_C] eax +
add ebx 4 +
cmp ebx 14h +
jb loc_1011494  +
jmp loc_10114CE  +
cmp [ebp+var_10] 4 +
jnz loc_10114CE  +
xor eax eax +
cmp [ebp+lpString1] ebx +
setnz al  +
mov [ebp+arg_C] eax +
lea eax [ebp+var_10] +
push eax  +
call WdsFreeData  +
pop esi  +
mov eax [ebp+arg_C] +
pop edi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push esi  +
push edi  +
push [ebp+arg_C]  +
xor eax eax +
xor esi esi +
mov [ebp+var_10] esi +
lea edi [ebp+var_C] +
stos   +
stos   +
stos   +
lea eax [ebp+var_10] +
push eax  +
call WdsInitializeDataUInt32  +
lea eax [ebp+var_10] +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call WdsSetBlackboardValue  +
cmp eax 1 +
jnz loc_1011521  +
inc esi  +
lea eax [ebp+var_10] +
push eax  +
call WdsFreeData  +
pop edi  +
mov eax esi +
pop esi  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push esi  +
xor esi esi +
cmp [ebp+arg_0] esi +
jz loc_10115FB  +
push ebx  +
mov ebx [ebp+arg_4] +
cmp ebx esi +
jz loc_10115FA  +
push edi  +
xor eax eax +
mov [ebp+var_10] esi +
lea edi [ebp+var_C] +
stos   +
stos   +
stos   +
mov edi [ebp+arg_8] +
cmp edi esi +
jz loc_10115D4  +
lea eax [ebp+var_10] +
push eax  +
push edi  +
push ebx  +
push [ebp+arg_0]  +
call WdsGetBlackboardValue  +
cmp eax 1 +
jnz loc_10115D0  +
mov eax [ebp+var_10] +
dec eax  +
jz loc_10115AA  +
dec eax  +
jz loc_1011593  +
dec eax  +
jz loc_10115AA  +
push [ebp+var_C]  +
lea eax [ebp+var_8] +
push esi  +
push eax  +
jmp loc_10115A0  +
cmp [ebp+var_8] esi +
jz loc_10115BE  +
push [ebp+var_C]  +
push 0  +
push [ebp+var_8]  +
call memset  +
add esp 0Ch +
jmp loc_10115BE  +
mov eax [ebp+var_8] +
jmp loc_10115B7  +
push 20h  +
pop ecx  +
mov [eax] cx +
inc eax  +
inc eax  +
xor ecx ecx +
cmp cx [eax] +
jnz loc_10115AF  +
lea eax [ebp+var_10] +
push eax  +
push edi  +
push ebx  +
push [ebp+arg_0]  +
call WdsSetBlackboardValue  +
mov esi eax +
jmp loc_10115D7  +
xor esi esi +
jmp loc_10115D7  +
xor esi esi +
inc esi  +
push edi  +
push ebx  +
push [ebp+arg_0]  +
call WdsDeleteBlackboardValue  +
pop edi  +
test eax eax +
jz loc_10115EF  +
test esi esi +
jz loc_10115EF  +
xor esi esi +
inc esi  +
jmp loc_10115F1  +
xor esi esi +
lea eax [ebp+var_10] +
push eax  +
call WdsFreeData  +
pop ebx  +
mov eax esi +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
xor eax eax +
xor edx edx +
mov [ebp+var_14] edx +
lea edi [ebp+var_10] +
stos   +
stos   +
stos   +
xor ebx ebx +
stos   +
cmp esi edx +
jz loc_1011672  +
mov ecx [ebp+arg_4] +
cmp ecx edx +
jnz loc_101163A  +
push esi  +
call WdsValidBlackboard  +
mov ebx eax +
jmp loc_1011672  +
mov eax [ebp+arg_8] +
cmp eax edx +
jnz loc_101164F  +
cmp [ecx] dx +
jz loc_1011672  +
push 3  +
push offset asc_1001D84  +
jmp loc_1011657  +
cmp [eax] dx +
jz loc_1011672  +
push 2  +
push eax  +
push ecx  +
push esi  +
lea eax [ebp+var_14] +
push eax  +
call WdsEnumFirstBlackboardItem  +
test eax eax +
jz loc_1011672  +
lea eax [ebp+var_14] +
push eax  +
call WdsAbortBlackboardItemEnum  +
xor ebx ebx +
inc ebx  +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
cmp [ebp+arg_0] eax +
jz loc_1011692  +
pop ebp  +
jmp loc_10176A6  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push ebx  +
push edi  +
xor ebx ebx +
xor eax eax +
mov [ebp+var_10] ebx +
lea edi [ebp+var_C] +
stos   +
stos   +
stos   +
cmp [ebp+arg_0] ebx +
jz loc_1011734  +
mov ecx [ebp+arg_4] +
cmp ecx ebx +
jz loc_1011734  +
cmp [ecx] bx +
jz loc_1011734  +
mov eax [ebp+arg_8] +
cmp eax ebx +
jz loc_1011734  +
cmp [eax] bx +
jz loc_1011734  +
lea edx [ebp+var_10] +
push edx  +
push eax  +
push ecx  +
push [ebp+arg_0]  +
call WdsGetBlackboardValue  +
cmp eax 1 +
jnz loc_1011734  +
cmp [ebp+var_10] eax +
jnz loc_101172B  +
push esi  +
push [ebp+lpString]  +
call ds:lstrlenW  +
mov edi ds:GetProcessHeap +
mov esi eax +
inc esi  +
lea eax [esi+esi] +
push eax  +
push 8  +
call edi  +
push eax  +
call ds:HeapAlloc  +
mov ebx eax +
test ebx ebx +
jz loc_101172A  +
push [ebp+lpString]  +
push esi  +
push ebx  +
call sub_100CC16  +
test eax eax +
jge loc_101172A  +
push ebx  +
xor ebx ebx +
push ebx  +
call edi  +
push eax  +
call ds:HeapFree  +
pop esi  +
lea eax [ebp+var_10] +
push eax  +
call WdsFreeData  +
pop edi  +
mov eax ebx +
pop ebx  +
leave   +
retn 0Ch  +
***
jz loc_101179B  +
mov eax dword_101958C +
push esi  +
mov esi dword_1019588 +
mov ecx esi +
or ecx eax +
jz loc_101179A  +
cmp byte_1019151 bl +
jnz loc_1011772  +
push eax  +
push esi  +
call dword_1019158  +
jmp loc_101178E  +
push dword ptr [esi+4]  +
push dword ptr [esi]  +
call ds:UnregisterTraceGuids  +
mov [esi+20h] ebx +
mov [esi+28h] bl +
mov [esi+8] ebx +
mov [esi+0Ch] ebx +
mov [esi] ebx +
mov [esi+4] ebx +
mov dword_1019588 ebx +
mov dword_101958C ebx +
pop esi  +
pop ebx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ebp+8] 0 +
push esi  +
push edi  +
jz loc_1011890  +
mov edi [ebp+0Ch] +
test edi edi +
jz loc_1011890  +
xor eax eax +
cmp ax [edi] +
jz loc_1011890  +
mov esi [ebp+10h] +
test esi esi +
jz loc_1011890  +
push ebx  +
push dword ptr [esi]  +
push offset aMustRebootAfte  +
push edi  +
push dword ptr [ebp+8]  +
call sub_10114E6  +
xor ebx ebx +
inc ebx  +
cmp eax ebx +
jnz loc_101185E  +
push dword ptr [esi+4]  +
push offset aExecutionOptio  +
push edi  +
push dword ptr [ebp+8]  +
call sub_10114E6  +
cmp eax ebx +
jnz loc_101185E  +
push dword ptr [esi+8]  +
push offset aCommand  +
push edi  +
push dword ptr [ebp+8]  +
call sub_101132D  +
cmp eax ebx +
jnz loc_101185E  +
lea eax [esi+10h] +
push eax  +
push offset aCredentials  +
push edi  +
push dword ptr [ebp+8]  +
call sub_1012AB2  +
cmp eax ebx +
jnz loc_101185E  +
push 0  +
push offset aProcessedcomma  +
push edi  +
push dword ptr [ebp+8]  +
call sub_10114E6  +
cmp eax ebx +
jnz loc_101185E  +
mov esi [esi+0Ch] +
test esi esi +
jz loc_101185A  +
push esi  +
push offset aDescription  +
push edi  +
push dword ptr [ebp+8]  +
call sub_101132D  +
cmp eax ebx +
jnz loc_101185E  +
xor eax eax +
jmp loc_101188D  +
mov ebx ds:GetLastError +
call ebx  +
mov edi 0FFFFh +
mov esi 80070000h +
test eax eax +
jle loc_101187A  +
and eax edi +
or eax esi +
test eax eax +
jge loc_1011888  +
call ebx  +
test eax eax +
jle loc_101188D  +
and eax edi +
or eax esi +
jmp loc_101188D  +
mov eax 80004005h +
pop ebx  +
jmp loc_1011895  +
mov eax 80070057h +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
push esi  +
jz loc_10118D5  +
mov eax [ebp+arg_4] +
test eax eax +
jz loc_10118D5  +
xor ecx ecx +
cmp cx [eax] +
jz loc_10118D5  +
mov esi [ebp+arg_8] +
test esi esi +
jz loc_10118D5  +
push offset aDescription  +
push eax  +
push [ebp+arg_0]  +
call sub_101169B  +
mov [esi] eax +
xor eax eax +
jmp loc_10118DA  +
mov eax 80070057h +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
push esi  +
jz loc_101191A  +
mov eax [ebp+arg_4] +
test eax eax +
jz loc_101191A  +
xor ecx ecx +
cmp cx [eax] +
jz loc_101191A  +
mov esi [ebp+arg_8] +
test esi esi +
jz loc_101191A  +
push ecx  +
push offset aProcessedcomma  +
push eax  +
push [ebp+arg_0]  +
call sub_10113F1  +
mov [esi] eax +
xor eax eax +
jmp loc_101191F  +
mov eax 80070057h +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
push esi  +
jz loc_101195F  +
mov eax [ebp+arg_4] +
test eax eax +
jz loc_101195F  +
xor ecx ecx +
cmp cx [eax] +
jz loc_101195F  +
mov esi [ebp+arg_8] +
test esi esi +
jz loc_101195F  +
push ecx  +
push offset aMustRebootAfte  +
push eax  +
push [ebp+arg_0]  +
call sub_1011388  +
mov [esi] eax +
xor eax eax +
jmp loc_1011964  +
mov eax 80070057h +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
xor edi edi +
cmp [ebp+arg_0] edi +
jz loc_10119DC  +
mov eax [ebp+arg_4] +
cmp eax edi +
jz loc_10119DC  +
xor ecx ecx +
cmp cx [eax] +
jz loc_10119DC  +
mov esi [ebp+arg_8] +
cmp esi edi +
jz loc_10119DC  +
push offset aCommand  +
push eax  +
push [ebp+arg_0]  +
call sub_101169B  +
mov [esi] eax +
cmp eax edi +
jnz loc_10119D8  +
push ebx  +
mov ebx ds:GetLastError +
call ebx  +
mov edi 0FFFFh +
mov esi 80070000h +
test eax eax +
jle loc_10119C2  +
and eax edi +
or eax esi +
test eax eax +
jge loc_10119D2  +
call ebx  +
test eax eax +
jle loc_10119CE  +
and eax edi +
or eax esi +
mov edi eax +
jmp loc_10119D7  +
mov edi 80004005h +
pop ebx  +
mov eax edi +
jmp loc_10119E1  +
mov eax 80070057h +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1Ch +
mov eax dword_101908C +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push esi  +
push edi  +
mov esi offset asc_1005AD4 +
lea edi [ebp+var_10] +
movs   +
movs   +
movs   +
xor edi edi +
mov [ebp+var_1C] eax +
mov [ebp+var_14] edi +
mov [ebp+lpMem] edi +
cmp ebx edi +
jz loc_1011AB9  +
xor ecx ecx +
cmp cx [ebx] +
jz loc_1011AB9  +
cmp eax edi +
jz loc_1011AB9  +
mov [eax] edi +
lea eax [ebp+var_10] +
push eax  +
push ebx  +
call ds:wcsspn  +
pop ecx  +
mov esi eax +
mov eax ebx +
pop ecx  +
lea ecx [eax+2] +
mov dx [eax] +
inc eax  +
inc eax  +
cmp dx di +
jnz loc_1011A4B  +
sub eax ecx +
sar eax 1 +
cmp esi eax +
jnb loc_1011A84  +
lea eax [ebp+var_10] +
push eax  +
lea eax [ebx+esi*2] +
push eax  +
call ds:wcscspn  +
pop ecx  +
pop ecx  +
cmp eax esi +
jbe loc_1011A84  +
lea ecx [ebp+lpMem] +
push ecx  +
push eax  +
push esi  +
push ebx  +
call sub_100E78A  +
cmp eax edi +
mov [ebp+var_14] eax +
jl loc_1011A9E  +
cmp [ebp+lpMem] edi +
jz loc_1011AB4  +
push [ebp+var_1C]  +
lea eax [ebp+var_14] +
push eax  +
push [ebp+lpMem]  +
mov [ebp+var_14] edi +
call sub_100F515  +
mov [ebp+var_14] eax +
cmp [ebp+lpMem] edi +
jz loc_1011AB4  +
push [ebp+lpMem]  +
push edi  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
mov eax [ebp+var_14] +
jmp loc_1011ABE  +
mov eax 80070057h +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_100D691  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
xor ebx ebx +
push esi  +
mov esi eax +
cmp [ebp+arg_0] ebx +
jz loc_1011B30  +
push [ebp+arg_0]  +
call WdsValidBlackboard  +
test eax eax +
jz loc_1011B30  +
test edi edi +
jz loc_1011B30  +
xor eax eax +
cmp ax [edi] +
jz loc_1011B30  +
test esi esi +
jz loc_1011B30  +
cmp ax [esi] +
jz loc_1011B30  +
push esi  +
push edi  +
call sub_1010B11  +
mov esi eax +
test esi esi +
jz loc_1011B2C  +
push ebx  +
push esi  +
push [ebp+arg_0]  +
call sub_1011607  +
push esi  +
push 0  +
mov ebx eax +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
mov eax ebx +
jmp loc_1011B3A  +
push 57h  +
call ds:SetLastError  +
xor eax eax +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
push ebp  +
mov ebp esp +
sub esp 120h +
mov eax dword_101908C +
xor eax ebp +
mov [ebp-4] eax +
mov eax dword_1019588 +
or eax dword_101958C +
jnz loc_1011C70  +
push ebx  +
xor ebx ebx +
cmp byte_1019150 bl +
jnz loc_1011C0E  +
push esi  +
lea eax [ebp-118h] +
push eax  +
mov dword ptr [ebp-118h] 114h +
call ds:GetVersionExW  +
test eax eax +
jz loc_1011BA9  +
cmp dword ptr [ebp-114h] 6 +
setb al  +
mov byte_1019151 al +
cmp al bl +
jnz loc_1011C06  +
push edi  +
push offset ModuleName  +
call ds:GetModuleHandleW  +
mov edi eax +
cmp edi ebx +
jz loc_1011BFE  +
mov esi ds:GetProcAddress +
push offset ProcName  +
push edi  +
call esi  +
mov dword_1019154 eax +
cmp eax ebx +
jz loc_1011BFE  +
push offset aEventregister  +
push edi  +
call esi  +
mov off_1019024 eax +
cmp eax ebx +
jz loc_1011BF4  +
push offset aEventunregiste  +
push edi  +
call esi  +
mov dword_1019158 eax +
cmp eax ebx +
jnz loc_1011C05  +
mov off_1019024 offset sub_100C148 +
mov byte_1019151 1 +
pop edi  +
mov byte_1019150 1 +
pop esi  +
cmp byte_1019151 bl +
jnz loc_1011C32  +
push offset dword_1019588  +
push offset unk_1019590  +
push offset loc_100BC22  +
push offset dword_1005A28  +
call off_1019024  +
jmp loc_1011C6F  +
mov ecx offset unk_1019590 +
push ecx  +
push ebx  +
mov eax ecx +
cdq   +
push ebx  +
mov dword_101958C edx +
lea edx [ebp-120h] +
push edx  +
push 1  +
mov dword_1019588 eax +
mov eax offset dword_1005A28 +
push eax  +
push ecx  +
push offset loc_100BBB0  +
mov [ebp-120h] eax +
mov [ebp-11Ch] ebx +
call ds:RegisterTraceGuidsW  +
pop ebx  +
mov ecx [ebp-4] +
xor ecx ebp +
call sub_100D691  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 24h +
push ebx  +
push esi  +
xor esi esi +
push edi  +
cmp [ebp+arg_0] esi +
jz loc_10120B7  +
mov edi [ebp+arg_4] +
cmp edi esi +
jz loc_10120B7  +
xor eax eax +
cmp ax [edi] +
jz loc_10120B7  +
mov ebx [ebp+arg_8] +
cmp ebx esi +
jz loc_10120B7  +
push esi  +
push offset aProcessedcomma  +
push edi  +
push [ebp+arg_0]  +
call sub_10113F1  +
test eax eax +
jnz loc_10120AF  +
push offset aCommand  +
push edi  +
push [ebp+arg_0]  +
call sub_101169B  +
mov [ebp+var_C] eax +
cmp eax esi +
jz loc_10120A6  +
push esi  +
push offset aExecutionOptio  +
push [ebp+arg_4]  +
mov [ebp+var_24] esi +
push [ebp+arg_0]  +
xor eax eax +
lea edi [ebp+var_20] +
stos   +
stos   +
mov [ebp+lpName] esi +
mov [ebp+var_10] esi +
mov [ebp+var_14] esi +
call sub_1011388  +
push [ebp+arg_0]  +
mov edi [ebp+arg_4] +
mov esi eax +
and eax 2 +
mov [ebp+var_18] eax +
mov eax offset aCredentials +
and esi 1 +
call sub_1011AD3  +
cmp eax 1 +
jnz loc_1011D44  +
lea eax [ebp+var_24] +
push eax  +
push offset aCredentials  +
push edi  +
push [ebp+arg_0]  +
call sub_10129CA  +
mov [ebp+var_14] eax +
push [ebp+var_C]  +
lea eax [ebx+10h] +
push 400h  +
push eax  +
mov [ebx+8] esi +
call sub_100CC16  +
mov [ebp+var_4] eax +
test eax eax +
jl loc_101205F  +
cmp [ebp+var_14] 1 +
jnz loc_1011D9E  +
cmp [ebp+var_20] 0 +
jz loc_1011D9E  +
mov ebx [ebp+var_C] +
lea eax [ebp+lpName] +
push eax  +
call sub_10119EC  +
mov [ebp+var_4] eax +
test eax eax +
jl loc_101205F  +
cmp [ebp+lpName] 0 +
jz loc_1011D9B  +
lea eax [ebp+var_24] +
push eax  +
push [ebp+lpName]  +
call sub_1010DB3  +
mov [ebp+var_4] eax +
mov ebx [ebp+arg_8] +
cmp [ebp+var_4] 0 +
jl loc_101205F  +
cmp dword_10195B4 0 +
mov edi 80000000h +
jz loc_1011E2F  +
cmp byte_1019151 0 +
mov al byte_10195B8 +
jz loc_1011DD7  +
cmp al 4 +
jnb loc_1011DCC  +
test al al +
jnz loc_1011E2F  +
test byte_10195B0 1 +
jnz loc_1011E11  +
jmp loc_1011E2F  +
cmp al 4 +
jnb loc_1011DDF  +
test al al +
jnz loc_1011E2F  +
mov eax dword_10195A0 +
mov ecx dword_10195A4 +
and eax 1 +
and ecx edi +
or eax ecx +
jz loc_1011E2F  +
mov eax dword_10195A8 +
mov edx dword_10195AC +
mov ecx eax +
and ecx 1 +
and edx edi +
cmp ecx eax +
jnz loc_1011E2F  +
cmp edx dword_10195AC +
jnz loc_1011E2F  +
push [ebp+var_C]  +
push offset dword_1005A38  +
push offset dword_1005A18  +
push dword_101958C  +
push dword_1019588  +
call sub_100BC79  +
push 0  +
push [ebp+var_18]  +
mov eax esi +
neg eax  +
sbb eax eax +
push eax  +
neg esi  +
sbb esi esi +
lea eax [ebp+var_10] +
and esi eax +
push esi  +
push [ebp+var_C]  +
push 0  +
call sub_1013050  +
test eax eax +
jz loc_1011FA9  +
mov eax [ebp+var_10] +
push 0  +
push offset aMustRebootAfte  +
push [ebp+arg_4]  +
mov [ebx+0Ch] eax +
push [ebp+arg_0]  +
call sub_1011388  +
cmp dword_10195B4 0 +
mov [ebp+arg_8] eax +
jz loc_1011EFA  +
cmp byte_1019151 0 +
mov al byte_10195B8 +
jz loc_1011E9F  +
cmp al 4 +
jnb loc_1011E91  +
test al al +
jnz loc_1011EFA  +
xor esi esi +
inc esi  +
test byte_10195B0 1 +
jnz loc_1011EDA  +
jmp loc_1011EFD  +
cmp al 4 +
jnb loc_1011EA7  +
test al al +
jnz loc_1011EFA  +
mov eax dword_10195A0 +
mov ecx dword_10195A4 +
xor esi esi +
inc esi  +
and eax esi +
and ecx edi +
or eax ecx +
jz loc_1011EFD  +
mov eax dword_10195A8 +
mov edx dword_10195AC +
mov ecx eax +
and ecx esi +
and edx edi +
cmp ecx eax +
jnz loc_1011EFD  +
cmp edx dword_10195AC +
jnz loc_1011EFD  +
push [ebp+var_10]  +
push offset dword_1005A38  +
push offset dword_1003810  +
push dword_101958C  +
push dword_1019588  +
call sub_100BD29  +
jmp loc_1011EFD  +
xor esi esi +
inc esi  +
mov eax [ebx+8] +
xor edx edx +
xor ecx ecx +
cmp eax esi +
jnz loc_1011F45  +
cmp [ebp+arg_8] esi +
jnz loc_1011F18  +
mov [ebp+var_4] 30000Eh +
mov [ebx] esi +
jmp loc_1011F4A  +
cmp eax esi +
jnz loc_1011F45  +
cmp [ebp+arg_8] 2 +
jnz loc_1011F45  +
mov eax [ebx+0Ch] +
sub eax edx +
jz loc_1011F45  +
dec eax  +
jz loc_1011F0D  +
dec eax  +
jz loc_1011F38  +
mov [ebp+var_4] 80004005h +
jmp loc_1011F48  +
mov [ebp+var_4] 30000Eh +
mov [ebx] esi +
mov ecx esi +
jmp loc_1011F4A  +
mov [ebp+var_4] edx +
mov [ebx] edx +
xor eax eax +
cmp ecx edx +
setz al  +
mov [ebx+4] ecx +
push eax  +
push offset aProcessedcomma  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_10114E6  +
test eax eax +
jnz loc_101205F  +
mov edi ds:GetLastError +
call edi  +
mov ebx 0FFFFh +
mov esi 80070000h +
test eax eax +
jle loc_1011F89  +
and eax ebx +
or eax esi +
test eax eax +
jge loc_1011F9D  +
call edi  +
test eax eax +
jle loc_1011F95  +
and eax ebx +
or eax esi +
mov [ebp+var_4] eax +
jmp loc_101205F  +
mov [ebp+var_4] 80004005h +
jmp loc_101205F  +
call ds:GetLastError  +
mov ebx 0FFFFh +
mov esi 80070000h +
test eax eax +
jle loc_1011FC3  +
and eax ebx +
or eax esi +
test eax eax +
jge loc_1011FD8  +
call ds:GetLastError  +
test eax eax +
jle loc_1011FD3  +
and eax ebx +
or eax esi +
mov [ebp+var_4] eax +
jmp loc_1011FDF  +
mov [ebp+var_4] 80004005h +
cmp dword_10195B4 0 +
jz loc_101205F  +
cmp byte_1019151 0 +
mov al byte_10195B8 +
jz loc_1012009  +
cmp al 4 +
jnb loc_1011FFE  +
test al al +
jnz loc_101205F  +
test byte_10195B0 1 +
jnz loc_1012041  +
jmp loc_101205F  +
cmp al 4 +
jnb loc_1012011  +
test al al +
jnz loc_101205F  +
mov eax dword_10195A0 +
mov ecx dword_10195A4 +
and eax 1 +
and ecx edi +
or eax ecx +
jz loc_101205F  +
mov eax dword_10195A8 +
mov esi dword_10195AC +
mov ecx eax +
mov edx esi +
and ecx 1 +
and edx edi +
cmp ecx eax +
jnz loc_101205F  +
cmp edx esi +
jnz loc_101205F  +
push [ebp+var_4]  +
push offset dword_1005A38  +
push offset loc_1005A48  +
push dword_101958C  +
push dword_1019588  +
call sub_100BD29  +
cmp [ebp+lpName] 0 +
mov esi ds:HeapFree +
mov edi ds:GetProcessHeap +
jz loc_1012091  +
push [ebp+lpName]  +
call sub_1010C1A  +
cmp [ebp+lpName] 0 +
jz loc_1012091  +
push [ebp+lpName]  +
push 0  +
call edi  +
push eax  +
call esi  +
test eax eax +
jz loc_1012091  +
and [ebp+lpName] 0 +
push [ebp+var_C]  +
push 0  +
call edi  +
push eax  +
call esi  +
lea eax [ebp+var_24] +
push eax  +
call sub_1010C63  +
jmp loc_10120B2  +
mov [ebp+var_4] 8007000Dh +
jmp loc_10120B2  +
mov [ebp+var_4] esi +
mov eax [ebp+var_4] +
jmp loc_10120BC  +
mov eax 80070057h +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
push esi  +
push edi  +
jz loc_10120FD  +
mov edi [ebp+arg_4] +
test edi edi +
jz loc_10120FD  +
xor eax eax +
cmp ax [edi] +
jz loc_10120FD  +
mov esi [ebp+arg_8] +
test esi esi +
jz loc_10120FD  +
push [ebp+arg_0]  +
mov eax offset aCredentials +
call sub_1011AD3  +
mov [esi] eax +
xor eax eax +
jmp loc_1012102  +
mov eax 80070057h +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 240h +
mov eax dword_101908C +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_8] +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
xor edi edi +
mov [ebp+var_23C] eax +
mov eax [ebp+arg_C] +
mov [ebp+var_218] ebx +
mov [ebp+var_240] eax +
mov [ebp+var_220] edi +
mov [ebp+var_214] edi +
mov [ebp+var_21C] edi +
cmp ebx edi +
jz loc_101250C  +
push ebx  +
call WdsValidBlackboard  +
test eax eax +
jz loc_101250C  +
cmp esi edi +
jz loc_101250C  +
xor eax eax +
cmp ax [esi] +
jz loc_101250C  +
cmp [ebp+var_23C] edi +
jz loc_101250C  +
call sub_1013258  +
mov [ebp+lpMem] eax +
cmp eax edi +
jz loc_1012467  +
push offset aNodes  +
push esi  +
call sub_1010B11  +
mov [ebp+var_220] eax +
cmp eax edi +
jz loc_1012467  +
push offset aOrdering  +
push esi  +
call sub_1010B11  +
mov [ebp+var_214] eax +
cmp eax edi +
jz loc_1012467  +
push [ebp+lpMem]  +
push [ebp+var_220]  +
call sub_1010B11  +
mov [ebp+var_21C] eax +
cmp eax edi +
jz loc_1012467  +
mov esi offset aListHead +
push esi  +
push [ebp+var_214]  +
mov [ebp+var_22C] edi +
push ebx  +
mov [ebp+var_230] edi +
mov [ebp+var_234] edi +
call sub_1011607  +
test eax eax +
jnz loc_101224E  +
push offset aListTail  +
push [ebp+var_214]  +
push ebx  +
call sub_1011607  +
test eax eax +
jnz loc_101223F  +
mov [ebp+var_234] 1 +
mov [ebp+var_210] eax +
jmp loc_1012295  +
mov [ebp+var_210] 80300010h +
jmp loc_10124A1  +
mov edi offset aListTail +
push edi  +
push [ebp+var_214]  +
push ebx  +
call sub_1011607  +
test eax eax +
jz loc_101223F  +
push 0  +
push esi  +
push [ebp+var_214]  +
push ebx  +
call sub_1011388  +
push 0  +
push edi  +
push [ebp+var_214]  +
mov [ebp+var_22C] eax +
push ebx  +
mov [ebp+var_210] eax +
call sub_1011388  +
mov [ebp+var_230] eax +
inc eax  +
push [ebp+var_210]  +
mov dword ptr [ebp+var_238] eax +
push esi  +
push [ebp+var_214]  +
mov [ebp+var_228] eax +
push ebx  +
call sub_10114E6  +
mov ebx 0FFFFh +
mov edi 80070000h +
test eax eax +
jz loc_10122E2  +
push [ebp+var_228]  +
push offset aListTail  +
push [ebp+var_214]  +
push [ebp+var_218]  +
call sub_10114E6  +
test eax eax +
jnz loc_1012321  +
call ds:GetLastError  +
test eax eax +
jle loc_10122F2  +
and eax ebx +
or eax edi +
test eax eax +
jge loc_101230A  +
call ds:GetLastError  +
test eax eax +
jle loc_1012302  +
and eax ebx +
or eax edi +
mov [ebp+var_210] eax +
jmp loc_1012314  +
mov [ebp+var_210] 80004005h +
cmp [ebp+var_210] 0 +
jl loc_10123EB  +
and dword ptr [ebp+var_20C] 0 +
push 204h  +
lea eax [ebp+var_208] +
push 0  +
push eax  +
call memset  +
push dword ptr [ebp+var_238]  +
lea eax [ebp+var_20C] +
push offset aD_0  +
push 104h  +
push eax  +
call sub_100EDF4  +
add esp 1Ch +
mov [ebp+var_210] eax +
test eax eax +
jl loc_10123EB  +
push [ebp+lpMem]  +
lea eax [ebp+var_20C] +
push eax  +
push [ebp+var_214]  +
push [ebp+var_218]  +
call sub_101132D  +
test eax eax +
jnz loc_10123BC  +
call ds:GetLastError  +
test eax eax +
jle loc_101239A  +
and eax ebx +
or eax edi +
test eax eax +
jge loc_10123B2  +
call ds:GetLastError  +
test eax eax +
jle loc_10123AA  +
and eax ebx +
or eax edi +
mov [ebp+var_210] eax +
jmp loc_10123BC  +
mov [ebp+var_210] 80004005h +
cmp [ebp+var_210] 0 +
jl loc_10123EB  +
push [ebp+var_240]  +
push [ebp+var_21C]  +
push [ebp+var_218]  +
call [ebp+var_23C]  +
mov [ebp+var_210] eax +
test eax eax +
jge loc_10124A1  +
cmp [ebp+var_234] 1 +
jnz loc_101241E  +
push esi  +
push [ebp+var_214]  +
push [ebp+var_218]  +
call sub_1011537  +
push offset aListTail  +
push [ebp+var_214]  +
push [ebp+var_218]  +
call sub_1011537  +
jmp loc_1012452  +
push [ebp+var_22C]  +
push esi  +
push [ebp+var_214]  +
push [ebp+var_218]  +
call sub_10114E6  +
push [ebp+var_230]  +
push offset aListTail  +
push [ebp+var_214]  +
push [ebp+var_218]  +
call sub_10114E6  +
push 0  +
push [ebp+var_21C]  +
push [ebp+var_218]  +
call sub_1011537  +
jmp loc_10124A1  +
mov esi ds:GetLastError +
call esi  +
mov ebx 0FFFFh +
mov edi 80070000h +
test eax eax +
jle loc_1012483  +
and eax ebx +
or eax edi +
test eax eax +
jge loc_1012497  +
call esi  +
test eax eax +
jle loc_101248F  +
and eax ebx +
or eax edi +
mov [ebp+var_210] eax +
jmp loc_10124A1  +
mov [ebp+var_210] 80004005h +
cmp [ebp+lpMem] 0 +
mov esi ds:HeapFree +
mov edi ds:GetProcessHeap +
jz loc_10124C6  +
push [ebp+lpMem]  +
xor ebx ebx +
push ebx  +
call edi  +
push eax  +
call esi  +
jmp loc_10124C8  +
xor ebx ebx +
cmp [ebp+var_220] ebx +
jz loc_10124DC  +
push [ebp+var_220]  +
push ebx  +
call edi  +
push eax  +
call esi  +
cmp [ebp+var_214] ebx +
jz loc_10124F0  +
push [ebp+var_214]  +
push ebx  +
call edi  +
push eax  +
call esi  +
cmp [ebp+var_21C] ebx +
jz loc_1012504  +
push [ebp+var_21C]  +
push ebx  +
call edi  +
push eax  +
call esi  +
mov eax [ebp+var_210] +
jmp loc_1012511  +
mov eax 80070057h +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100D691  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 22Ch +
mov eax dword_101908C +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_8] +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
mov [ebp+var_220] eax +
mov eax [ebp+arg_C] +
xor ebx ebx +
push edi  +
mov edi [ebp+arg_4] +
mov [ebp+var_214] esi +
mov [ebp+var_224] eax +
test esi esi +
jz loc_10127B2  +
push esi  +
call WdsValidBlackboard  +
test eax eax +
jz loc_10127B2  +
test edi edi +
jz loc_10127B2  +
xor eax eax +
cmp ax [edi] +
jz loc_10127B2  +
cmp [ebp+var_220] eax +
jz loc_10127B2  +
push offset aNodes  +
push edi  +
call sub_1010B11  +
mov [ebp+var_21C] eax +
test eax eax +
jz loc_10127AE  +
push offset aOrdering  +
push edi  +
call sub_1010B11  +
mov [ebp+var_210] eax +
test eax eax +
jz loc_101277F  +
mov edi offset aListHead +
push edi  +
push eax  +
push esi  +
call sub_1011607  +
cmp eax 1 +
jnz loc_101275C  +
mov esi offset aListTail +
push esi  +
push [ebp+var_210]  +
push [ebp+var_214]  +
call sub_1011607  +
cmp eax 1 +
jnz loc_1012755  +
push ebx  +
push edi  +
push [ebp+var_210]  +
push [ebp+var_214]  +
call sub_1011388  +
push ebx  +
push esi  +
push [ebp+var_210]  +
mov edi eax +
push [ebp+var_214]  +
call sub_1011388  +
mov [ebp+var_22C] eax +
cmp edi eax +
ja loc_1012755  +
mov dword ptr [ebp+var_218] edi +
cmp ebx 30000Eh +
jz loc_101277F  +
mov eax [ebp+var_22C] +
cmp dword ptr [ebp+var_218] eax +
ja loc_101277F  +
xor edi edi +
push 204h  +
lea eax [ebp+var_208] +
push edi  +
push eax  +
mov dword ptr [ebp+var_20C] edi +
call memset  +
push dword ptr [ebp+var_218]  +
lea eax [ebp+var_20C] +
push offset aD_0  +
push 104h  +
push eax  +
call sub_100EDF4  +
mov ebx eax +
add esp 1Ch +
cmp ebx edi +
jl loc_1012745  +
lea eax [ebp+var_20C] +
push eax  +
push [ebp+var_210]  +
push [ebp+var_214]  +
call sub_101169B  +
mov [ebp+lpMem] eax +
cmp eax edi +
jz loc_1012740  +
push eax  +
push [ebp+var_21C]  +
call sub_1010B11  +
mov esi eax +
cmp esi edi +
jz loc_10126F7  +
push [ebp+var_224]  +
push esi  +
push [ebp+var_214]  +
call [ebp+var_220]  +
push esi  +
push edi  +
mov ebx eax +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
jmp loc_101272A  +
mov esi ds:GetLastError +
call esi  +
cmp eax edi +
jle loc_101270F  +
and eax 0FFFFh +
or eax 80070000h +
cmp eax edi +
jge loc_1012725  +
call esi  +
cmp eax edi +
jle loc_1012721  +
and eax 0FFFFh +
or eax 80070000h +
mov ebx eax +
jmp loc_101272A  +
mov ebx 80004005h +
push [ebp+lpMem]  +
push edi  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
jmp loc_1012745  +
mov ebx 80300010h +
inc dword ptr [ebp+var_218]  +
cmp ebx edi +
jge loc_1012638  +
jmp loc_101277F  +
mov ebx 80300010h +
jmp loc_101277F  +
push offset aListTail  +
push [ebp+var_210]  +
push esi  +
call sub_1011607  +
mov ebx eax +
neg ebx  +
sbb ebx ebx +
and ebx 80000001h +
add ebx 30000Fh +
push [ebp+var_21C]  +
mov edi ds:GetProcessHeap +
push 0  +
call edi  +
mov esi ds:HeapFree +
push eax  +
call esi  +
cmp [ebp+var_210] 0 +
jz loc_10127AE  +
push [ebp+var_210]  +
push 0  +
call edi  +
push eax  +
call esi  +
mov eax ebx +
jmp loc_10127B7  +
mov eax 80070057h +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100D691  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 218h +
mov eax dword_101908C +
xor eax ebp +
mov [ebp+var_4] eax +
and [ebp+var_210] 0 +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
mov edi [ebp+arg_8] +
test ebx ebx +
jz loc_10129AF  +
push ebx  +
call WdsValidBlackboard  +
test eax eax +
jz loc_10129AF  +
test esi esi +
jz loc_10129AF  +
xor eax eax +
cmp ax [esi] +
jz loc_10129AF  +
test edi edi +
jz loc_10129AF  +
and [edi] eax +
push offset aNodes  +
push esi  +
call sub_1010B11  +
mov [ebp+var_214] eax +
test eax eax +
jz loc_101293E  +
push offset aOrdering  +
push esi  +
call sub_1010B11  +
mov [ebp+var_210] eax +
test eax eax +
jz loc_101293E  +
mov esi offset aListTail +
push esi  +
push eax  +
push ebx  +
call sub_1011607  +
cmp eax 1 +
jnz loc_1012937  +
and dword ptr [ebp+var_20C] 0 +
push 204h  +
lea eax [ebp+var_208] +
push 0  +
push eax  +
call memset  +
add esp 0Ch +
push 0  +
push esi  +
push [ebp+var_210]  +
push ebx  +
call sub_1011388  +
push eax  +
push offset aD_0  +
lea eax [ebp+var_20C] +
push 104h  +
push eax  +
call sub_100EDF4  +
mov esi eax +
add esp 10h +
test esi esi +
jl loc_101296F  +
lea eax [ebp+var_20C] +
push eax  +
push [ebp+var_210]  +
push ebx  +
call sub_101169B  +
mov [ebp+lpMem] eax +
test eax eax +
jz loc_101293E  +
push eax  +
push [ebp+var_214]  +
call sub_1010B11  +
mov [edi] eax +
test eax eax +
jnz loc_1012920  +
mov ebx ds:GetLastError +
call ebx  +
mov edi 0FFFFh +
mov esi 80070000h +
test eax eax +
jle loc_101290B  +
and eax edi +
or eax esi +
test eax eax +
jge loc_101291B  +
call ebx  +
test eax eax +
jle loc_1012917  +
and eax edi +
or eax esi +
mov esi eax +
jmp loc_1012920  +
mov esi 80004005h +
push [ebp+lpMem]  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
jmp loc_101296F  +
mov esi 30000Fh +
jmp loc_101296F  +
mov ebx ds:GetLastError +
call ebx  +
mov esi 80070000h +
mov edi 0FFFFh +
test eax eax +
jle loc_101295A  +
and eax edi +
or eax esi +
test eax eax +
jge loc_101296A  +
call ebx  +
test eax eax +
jle loc_1012966  +
and eax edi +
or eax esi +
mov esi eax +
jmp loc_101296F  +
mov esi 80004005h +
cmp [ebp+var_214] 0 +
jz loc_101298D  +
push [ebp+var_214]  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
cmp [ebp+var_210] 0 +
jz loc_10129AB  +
push [ebp+var_210]  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
mov eax esi +
jmp loc_10129B4  +
mov eax 80070057h +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100D691  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
xor esi esi +
push edi  +
mov [ebp+var_C] esi +
mov [ebp+dwErrCode] esi +
mov [ebp+lpMem] esi +
cmp ebx esi +
jz loc_1012A9C  +
push ebx  +
call WdsValidBlackboard  +
test eax eax +
jz loc_1012A9C  +
mov edi [ebp+arg_4] +
cmp edi esi +
jz loc_1012A9C  +
xor eax eax +
cmp ax [edi] +
jz loc_1012A9C  +
mov eax [ebp+arg_8] +
cmp eax esi +
jz loc_1012A1D  +
xor ecx ecx +
cmp cx [eax] +
jz loc_1012A9C  +
mov esi [ebp+arg_C] +
test esi esi +
jz loc_1012A9C  +
test eax eax +
jz loc_1012A34  +
push eax  +
push edi  +
call sub_1010B11  +
mov edi eax +
mov [ebp+lpMem] edi +
test edi edi +
jz loc_1012A6D  +
push offset aCreddomain  +
push edi  +
push ebx  +
call sub_101169B  +
push offset aCreduser  +
push edi  +
push ebx  +
mov [esi] eax +
call sub_101169B  +
push offset aCredpassword  +
push edi  +
push ebx  +
mov [esi+4] eax +
call sub_101169B  +
mov [esi+8] eax +
mov [ebp+var_C] 1 +
jmp loc_1012A76  +
call ds:GetLastError  +
mov [ebp+dwErrCode] eax +
cmp [ebp+lpMem] 0 +
jz loc_1012A8E  +
push [ebp+lpMem]  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
push [ebp+dwErrCode]  +
call ds:SetLastError  +
mov eax [ebp+var_C] +
jmp loc_1012AA6  +
push 57h  +
call ds:SetLastError  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
push edi  +
xor edi edi +
mov [ebp+var_C] edi +
mov [ebp+dwErrCode] edi +
mov [ebp+lpMem] edi +
cmp ebx edi +
jz loc_1012C1C  +
push ebx  +
call WdsValidBlackboard  +
test eax eax +
jz loc_1012C1C  +
mov esi [ebp+arg_4] +
cmp esi edi +
jz loc_1012C1C  +
xor eax eax +
cmp ax [esi] +
jz loc_1012C1C  +
mov eax [ebp+arg_8] +
cmp eax edi +
jz loc_1012B09  +
xor ecx ecx +
cmp cx [eax] +
jz loc_1012C1C  +
cmp [ebp+arg_C] edi +
jz loc_1012C1C  +
cmp eax edi +
jz loc_1012B22  +
push eax  +
push esi  +
call sub_1010B11  +
mov esi eax +
mov [ebp+lpMem] esi +
cmp esi edi +
jz loc_1012BED  +
mov edi offset aCreddomain +
push edi  +
push esi  +
push ebx  +
call sub_1011607  +
test eax eax +
jz loc_1012B4C  +
push edi  +
push esi  +
push ebx  +
call sub_1011537  +
cmp eax 1 +
jnz loc_1012BED  +
mov ebx offset aCreduser +
push ebx  +
push esi  +
push [ebp+arg_0]  +
call sub_1011607  +
test eax eax +
jz loc_1012B6E  +
push ebx  +
push esi  +
push [ebp+arg_0]  +
call sub_1011537  +
cmp eax 1 +
jnz loc_1012BED  +
push offset aCredpassword  +
push esi  +
push [ebp+arg_0]  +
call sub_1011607  +
test eax eax +
jz loc_1012B93  +
push offset aCredpassword  +
push esi  +
push [ebp+arg_0]  +
call sub_1011537  +
cmp eax 1 +
jnz loc_1012BED  +
mov eax [ebp+arg_C] +
mov eax [eax] +
test eax eax +
jz loc_1012BAC  +
push eax  +
push edi  +
push esi  +
push [ebp+arg_0]  +
call sub_101132D  +
cmp eax 1 +
jnz loc_1012BED  +
mov eax [ebp+arg_C] +
mov eax [eax+4] +
test eax eax +
jz loc_1012BC6  +
push eax  +
push ebx  +
push esi  +
push [ebp+arg_0]  +
call sub_101132D  +
cmp eax 1 +
jnz loc_1012BED  +
mov eax [ebp+arg_C] +
mov eax [eax+8] +
test eax eax +
jz loc_1012BE4  +
push eax  +
push offset aCredpassword  +
push esi  +
push [ebp+arg_0]  +
call sub_101132D  +
cmp eax 1 +
jnz loc_1012BED  +
mov [ebp+var_C] 1 +
jmp loc_1012BF6  +
call ds:GetLastError  +
mov [ebp+dwErrCode] eax +
cmp [ebp+lpMem] 0 +
jz loc_1012C0E  +
push [ebp+lpMem]  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
push [ebp+dwErrCode]  +
call ds:SetLastError  +
mov eax [ebp+var_C] +
jmp loc_1012C26  +
push 57h  +
call ds:SetLastError  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
test esi esi +
jnz loc_1012C46  +
mov eax 80070057h +
jmp loc_1012C7F  +
and dword ptr [esi] 0 +
push edi  +
push offset Name  +
push 0  +
push 100000h  +
call ds:OpenEventW  +
mov edi eax +
test edi edi +
jz loc_1012C7C  +
push 0  +
push edi  +
call ds:WaitForSingleObject  +
test eax eax +
jnz loc_1012C75  +
mov dword ptr [esi] 1 +
push edi  +
call ds:CloseHandle  +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
sub esp 30h +
cmp byte_1019151 al +
jnz loc_1012CAE  +
push eax  +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call dword_1019154  +
jmp locret_1012CF1  +
mov eax [ebp+arg_C] +
cdq   +
mov [ebp+var_18] eax +
mov eax [ebp+arg_8] +
movzx cx byte ptr [eax+2] +
mov [ebp+var_2A] cx +
mov cl [eax+4] +
mov al [eax+5] +
push 30h  +
mov [ebp+var_2C] al +
pop eax  +
mov word ptr [ebp+var_30] ax +
lea eax [ebp+var_30] +
push eax  +
mov eax [ebp+arg_0] +
push dword ptr [eax+0Ch]  +
mov [ebp+var_14] edx +
push dword ptr [eax+8]  +
mov [ebp+var_4] 1A0000h +
mov [ebp+var_2B] cl +
call ds:TraceEvent  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
push edi  +
xor edi edi +
cmp dword_101957C edi +
jz loc_1012D87  +
cmp byte_1019151 0 +
mov al byte_1019580 +
jz loc_1012D2F  +
cmp al 4 +
jnb loc_1012D24  +
test al al +
jnz loc_1012D87  +
test byte_1019578 1 +
jnz loc_1012D6C  +
jmp loc_1012D87  +
cmp al 4 +
jnb loc_1012D37  +
test al al +
jnz loc_1012D87  +
mov eax dword_1019568 +
mov ecx dword_101956C +
mov ebx 80000000h +
and eax 1 +
and ecx ebx +
or eax ecx +
jz loc_1012D87  +
mov eax dword_1019570 +
mov esi dword_1019574 +
mov ecx eax +
mov edx esi +
and ecx 1 +
and edx ebx +
cmp ecx eax +
jnz loc_1012D87  +
cmp edx esi +
jnz loc_1012D87  +
push offset dword_1005A04  +
push offset dword_1005A18  +
push dword_1019554  +
push dword_1019550  +
call sub_1012C89  +
push offset aGlobalOobe_mac  +
xor ebx ebx +
inc ebx  +
push ebx  +
push ebx  +
push edi  +
call ds:CreateEventW  +
mov [ebp+var_8] eax +
cmp eax edi +
jz loc_1012F08  +
push eax  +
call ds:SetEvent  +
cmp eax ebx +
jnz loc_1012EBC  +
push 1D4C0h  +
push offset Name  +
push edi  +
push 100000h  +
call sub_100FE59  +
mov [ebp+hObject] eax +
cmp eax edi +
jz loc_1012E43  +
mov esi 124F80h +
push esi  +
push eax  +
call ds:WaitForSingleObject  +
cmp eax edi +
jz loc_1012E35  +
cmp eax 102h +
jz loc_1012E21  +
mov ebx ds:GetLastError +
call ebx  +
mov edi 0FFFFh +
mov esi 80070000h +
test eax eax +
jle loc_1012E02  +
and eax edi +
or eax esi +
test eax eax +
jge loc_1012E12  +
call ebx  +
test eax eax +
jle loc_1012E0E  +
and eax edi +
or eax esi +
mov edi eax +
jmp loc_1012E17  +
mov edi 80004005h +
push edi  +
push offset aOrchestratesta  +
push 1  +
jmp loc_1012E2D  +
push esi  +
push offset aOrchestrates_0  +
mov edi 80004005h +
push ebx  +
call sub_1011312  +
add esp 0Ch +
push [ebp+hObject]  +
call ds:CloseHandle  +
jmp loc_1012EFD  +
mov ebx ds:GetLastError +
call ebx  +
cmp eax 102h +
jnz loc_1012E89  +
call ebx  +
mov edi 0FFFFh +
mov esi 80070000h +
test eax eax +
jle loc_1012E68  +
and eax edi +
or eax esi +
test eax eax +
jge loc_1012E78  +
call ebx  +
test eax eax +
jle loc_1012E74  +
and eax edi +
or eax esi +
mov edi eax +
jmp loc_1012E7D  +
mov edi 80004005h +
push 1D4C0h  +
push offset aOrchestrates_1  +
jmp loc_1012EF3  +
call ebx  +
mov edi 0FFFFh +
mov esi 80070000h +
test eax eax +
jle loc_1012E9F  +
and eax edi +
or eax esi +
test eax eax +
jge loc_1012EAF  +
call ebx  +
test eax eax +
jle loc_1012EAB  +
and eax edi +
or eax esi +
mov edi eax +
jmp loc_1012EB4  +
mov edi 80004005h +
push edi  +
push offset aOrchestrates_2  +
jmp loc_1012EF3  +
mov ebx ds:GetLastError +
call ebx  +
mov edi 0FFFFh +
mov esi 80070000h +
test eax eax +
jle loc_1012ED8  +
and eax edi +
or eax esi +
test eax eax +
jge loc_1012EE8  +
call ebx  +
test eax eax +
jle loc_1012EE4  +
and eax edi +
or eax esi +
mov edi eax +
jmp loc_1012EED  +
mov edi 80004005h +
push edi  +
push offset aOrchestrates_3  +
push 1  +
call sub_1011312  +
add esp 0Ch +
push [ebp+var_8]  +
call ds:CloseHandle  +
jmp loc_1012F49  +
mov ebx ds:GetLastError +
call ebx  +
mov edi 0FFFFh +
mov esi 80070000h +
test eax eax +
jle loc_1012F24  +
and eax edi +
or eax esi +
test eax eax +
jge loc_1012F34  +
call ebx  +
test eax eax +
jle loc_1012F30  +
and eax edi +
or eax esi +
mov edi eax +
jmp loc_1012F39  +
mov edi 80004005h +
push edi  +
push offset aOrchestrates_4  +
push 1  +
call sub_1011312  +
add esp 0Ch +
cmp dword_101957C 0 +
jz loc_1012FCC  +
cmp byte_1019151 0 +
mov al byte_1019580 +
jz loc_1012F73  +
cmp al 4 +
jnb loc_1012F68  +
test al al +
jnz loc_1012FCC  +
test byte_1019578 1 +
jnz loc_1012FB0  +
jmp loc_1012FCC  +
cmp al 4 +
jnb loc_1012F7B  +
test al al +
jnz loc_1012FCC  +
mov eax dword_1019568 +
mov ecx dword_101956C +
mov ebx 80000000h +
and eax 1 +
and ecx ebx +
or eax ecx +
jz loc_1012FCC  +
mov eax dword_1019570 +
mov esi dword_1019574 +
mov ecx eax +
mov edx esi +
and ecx 1 +
and edx ebx +
cmp ecx eax +
jnz loc_1012FCC  +
cmp edx esi +
jnz loc_1012FCC  +
push edi  +
push offset dword_1005A04  +
push offset dword_1003810  +
push dword_1019554  +
push dword_1019550  +
call sub_100BD29  +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push edi  +
xor edi edi +
xor eax eax +
cmp [ebp+arg_0] edi +
jz loc_1013043  +
mov ebx [ebp+arg_4] +
cmp ebx edi +
jz loc_1013043  +
push esi  +
cmp eax 1 +
jz loc_1013040  +
mov edx [ebp+arg_0] +
mov ecx ds:off_10061B0[edi] +
mov si [ecx] +
cmp si [edx] +
jnz loc_1013024  +
test si si +
jz loc_1013020  +
mov si [ecx+2] +
cmp si [edx+2] +
jnz loc_1013024  +
add ecx 4 +
add edx 4 +
test si si +
jnz loc_1012FFE  +
xor ecx ecx +
jmp loc_1013029  +
sbb ecx ecx +
sbb ecx 0FFFFFFFFh +
test ecx ecx +
jnz loc_1013038  +
mov eax ds:dword_10061AC[edi] +
mov [ebx] eax +
xor eax eax +
inc eax  +
add edi 8 +
cmp edi 38h +
jb loc_1012FF0  +
pop esi  +
jmp loc_1013045  +
xor eax eax +
pop edi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 5Ch +
push ebx  +
xor ebx ebx +
mov [ebp+lpSrc] ebx +
mov [ebp+lpCommandLine] ebx +
cmp [ebp+arg_4] ebx +
jnz loc_1013075  +
push 57h  +
call ds:SetLastError  +
xor eax eax +
jmp loc_101324E  +
mov eax [ebp+lpExitCode] +
cmp eax ebx +
jz loc_101307E  +
mov [eax] ebx +
mov eax [ebp+arg_14] +
cmp eax ebx +
jz loc_1013087  +
mov [eax] ebx +
mov eax offset Class +
mov ecx offset dword_1006384 +
cmp dword ptr [ebp+arg_0] ebx +
jnz loc_101309A  +
mov ecx eax +
jmp loc_101309D  +
mov eax dword ptr [ebp+arg_0] +
push esi  +
push edi  +
push [ebp+arg_4]  +
push ecx  +
push eax  +
lea eax [ebp+lpSrc] +
push offset aSSS  +
push eax  +
call sub_100E8F9  +
add esp 14h +
cmp eax ebx +
mov dword ptr [ebp+arg_0] eax +
jl loc_10131BF  +
push [ebp+lpSrc]  +
call sub_100FDED  +
mov edi ds:GetLastError +
mov [ebp+lpCommandLine] eax +
mov esi 80070000h +
cmp eax ebx +
jz loc_10130E1  +
xor ecx ecx +
cmp cx [eax] +
jnz loc_101310B  +
call edi  +
cmp eax ebx +
jle loc_10130F0  +
and eax 0FFFFh +
or eax esi +
cmp eax ebx +
jge loc_1013104  +
call edi  +
cmp eax ebx +
jle loc_10130FF  +
and eax 0FFFFh +
or eax esi +
mov dword ptr [ebp+arg_0] eax +
jmp loc_101310B  +
mov dword ptr [ebp+arg_0] 80004005h +
cmp dword ptr [ebp+arg_0] ebx +
jl loc_10131BF  +
push 44h  +
pop ebx  +
push ebx  +
lea eax [ebp+StartupInfo] +
push 0  +
push eax  +
call memset  +
mov [ebp+StartupInfo.cb] ebx +
xor ebx ebx +
add esp 0Ch +
cmp [ebp+arg_10] ebx +
jz loc_101314B  +
lea eax [ebp+StartupInfo] +
push eax  +
call ds:GetStartupInfoW  +
or [ebp+StartupInfo.dwFlags] 1 +
xor eax eax +
mov [ebp+StartupInfo.wShowWindow] ax +
mov eax 8000000h +
jmp loc_101314E  +
push 10h  +
pop eax  +
lea ecx [ebp+hObject] +
push ecx  +
lea ecx [ebp+StartupInfo] +
push ecx  +
push ebx  +
push ebx  +
push eax  +
push ebx  +
push ebx  +
push ebx  +
push [ebp+lpCommandLine]  +
push ebx  +
call ds:CreateProcessW  +
test eax eax +
jnz loc_1013194  +
call edi  +
cmp eax ebx +
jle loc_1013179  +
and eax 0FFFFh +
or eax esi +
cmp eax ebx +
jge loc_101318D  +
call edi  +
cmp eax ebx +
jle loc_1013188  +
and eax 0FFFFh +
or eax esi +
mov dword ptr [ebp+arg_0] eax +
jmp loc_1013194  +
mov dword ptr [ebp+arg_0] 80004005h +
cmp dword ptr [ebp+arg_0] ebx +
jl loc_10131BD  +
cmp [ebp+lpExitCode] 0 +
jz loc_10131BD  +
cmp [ebp+dwMilliseconds] 0 +
jz loc_10131BD  +
push [ebp+dwMilliseconds]  +
push [ebp+hObject]  +
call ds:WaitForSingleObject  +
push [ebp+lpExitCode]  +
push [ebp+hObject]  +
call ds:GetExitCodeProcess  +
xor ebx ebx +
mov esi ds:CloseHandle +
cmp [ebp-14h] ebx +
jz loc_10131D5  +
cmp dword ptr [ebp-14h] 0FFFFFFFFh +
jz loc_10131D5  +
push dword ptr [ebp-14h]  +
call esi  +
mov ebx dword ptr [ebp+arg_0] +
test ebx ebx +
jl loc_10131EA  +
mov eax [ebp+arg_14] +
test eax eax +
jz loc_10131EA  +
mov ecx [ebp+hObject] +
mov [eax] ecx +
jmp loc_10131FB  +
cmp [ebp+hObject] 0 +
jz loc_10131FB  +
cmp [ebp+hObject] 0FFFFFFFFh +
jz loc_10131FB  +
push [ebp+hObject]  +
call esi  +
cmp [ebp+lpSrc] 0 +
mov esi ds:HeapFree +
mov edi ds:GetProcessHeap +
jz loc_101321F  +
push [ebp+lpSrc]  +
push 0  +
call edi  +
push eax  +
call esi  +
test eax eax +
jz loc_101321F  +
and [ebp+lpSrc] 0 +
cmp [ebp+lpCommandLine] 0 +
jz loc_101322F  +
push [ebp+lpCommandLine]  +
push 0  +
call edi  +
push eax  +
call esi  +
pop edi  +
pop esi  +
test ebx ebx +
jl loc_1013239  +
xor eax eax +
jmp loc_1013240  +
mov eax ebx +
and eax 0FFFFh +
push eax  +
call ds:SetLastError  +
xor eax eax +
test ebx ebx +
setnl al  +
pop ebx  +
leave   +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
mov eax dword_101908C +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push edi  +
xor ebx ebx +
xor eax eax +
mov [ebp+Uuid.Data1] ebx +
lea edi [ebp+Uuid.Data2] +
stos   +
stos   +
stos   +
lea eax [ebp+Uuid] +
push eax  +
mov [ebp+String] ebx +
mov [ebp+var_1C] ebx +
mov [ebp+dwBytes] ebx +
call ds:UuidCreate  +
test eax eax +
jnz loc_1013325  +
lea eax [ebp+String] +
push eax  +
lea eax [ebp+Uuid] +
push eax  +
call ds:UuidToStringW  +
test eax eax +
jnz loc_1013325  +
mov eax [ebp+String] +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
cmp cx bx +
jnz loc_10132AC  +
lea ecx [ebp+var_1C] +
push ecx  +
sub eax edx +
sar eax 1 +
push 1  +
push eax  +
call sub_100F91A  +
test eax eax +
jl loc_101331B  +
lea eax [ebp+dwBytes] +
push eax  +
mov eax [ebp+var_1C] +
push 2  +
pop ecx  +
mul  ecx +
push edx  +
push eax  +
call sub_100F8E8  +
test eax eax +
jl loc_101331B  +
push esi  +
push [ebp+dwBytes]  +
mov esi ds:GetProcessHeap +
push 8  +
call esi  +
push eax  +
call ds:HeapAlloc  +
mov ebx eax +
test ebx ebx +
jz loc_101331A  +
push [ebp+String]  +
push [ebp+var_1C]  +
push ebx  +
call sub_100CC16  +
test eax eax +
jge loc_101331A  +
push ebx  +
push 0  +
call esi  +
push eax  +
call ds:HeapFree  +
xor ebx ebx +
pop esi  +
lea eax [ebp+String] +
push eax  +
call ds:RpcStringFreeW  +
mov ecx [ebp+var_4] +
pop edi  +
mov eax ebx +
xor ecx ebp +
pop ebx  +
call sub_100D691  +
leave   +
retn   +
***
sbb eax offset byte_1019150 +
jz loc_1013394  +
mov eax dword_1019554 +
push esi  +
mov esi dword_1019550 +
mov ecx esi +
or ecx eax +
jz loc_1013393  +
cmp byte_1019151 bl +
jnz loc_101336B  +
push eax  +
push esi  +
call dword_1019158  +
jmp loc_1013387  +
push dword ptr [esi+4]  +
push dword ptr [esi]  +
call ds:UnregisterTraceGuids  +
mov [esi+20h] ebx +
mov [esi+28h] bl +
mov [esi+8] ebx +
mov [esi+0Ch] ebx +
mov [esi] ebx +
mov [esi+4] ebx +
mov dword_1019550 ebx +
mov dword_1019554 ebx +
pop esi  +
pop ebx  +
retn   +
***
push ebp  +
mov ebp esp +
sub esp 120h +
mov eax dword_101908C +
xor eax ebp +
mov [ebp-4] eax +
mov eax dword_1019550 +
or eax dword_1019554 +
jnz loc_10134C6  +
push ebx  +
xor ebx ebx +
cmp byte_1019150 bl +
jnz loc_1013464  +
push esi  +
lea eax [ebp-118h] +
push eax  +
mov dword ptr [ebp-118h] 114h +
call ds:GetVersionExW  +
test eax eax +
jz loc_10133FF  +
cmp dword ptr [ebp-114h] 6 +
setb al  +
mov byte_1019151 al +
cmp al bl +
jnz loc_101345C  +
push edi  +
push offset ModuleName  +
call ds:GetModuleHandleW  +
mov edi eax +
cmp edi ebx +
jz loc_1013454  +
mov esi ds:GetProcAddress +
push offset ProcName  +
push edi  +
call esi  +
mov dword_1019154 eax +
cmp eax ebx +
jz loc_1013454  +
push offset aEventregister  +
push edi  +
call esi  +
mov off_1019024 eax +
cmp eax ebx +
jz loc_101344A  +
push offset aEventunregiste  +
push edi  +
call esi  +
mov dword_1019158 eax +
cmp eax ebx +
jnz loc_101345B  +
mov off_1019024 offset sub_100C148 +
mov byte_1019151 1 +
pop edi  +
mov byte_1019150 1 +
pop esi  +
cmp byte_1019151 bl +
jnz loc_1013488  +
push offset dword_1019550  +
push offset unk_1019558  +
push offset loc_100BC22  +
push offset dword_10059F4  +
call off_1019024  +
jmp loc_10134C5  +
mov ecx offset unk_1019558 +
push ecx  +
push ebx  +
mov eax ecx +
cdq   +
push ebx  +
mov dword_1019554 edx +
lea edx [ebp-120h] +
push edx  +
push 1  +
mov dword_1019550 eax +
mov eax offset dword_10059F4 +
push eax  +
push ecx  +
push offset loc_100BBB0  +
mov [ebp-120h] eax +
mov [ebp-11Ch] ebx +
call ds:RegisterTraceGuidsW  +
pop ebx  +
mov ecx [ebp-4] +
xor ecx ebp +
call sub_100D691  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov eax [ebp+8] +
xor ecx ecx +
push ebx  +
push esi  +
push edi  +
mov [ebp-4] ecx +
mov [ebp-10h] ecx +
mov [ebp-0Ch] ecx +
cmp eax ecx +
jz loc_10134F8  +
mov ebx [eax] +
jmp loc_10134FA  +
xor ebx ebx +
cmp eax ecx +
jz loc_1013506  +
mov edi [eax+4] +
mov [ebp+8] edi +
jmp loc_101350B  +
mov [ebp+8] ecx +
mov edi ecx +
cmp eax ecx +
jz loc_1013BA2  +
cmp ebx ecx +
jz loc_1013BA2  +
cmp edi ecx +
jz loc_1013BA2  +
push ecx  +
push ecx  +
call ds:CoInitializeEx  +
mov esi eax +
test esi esi +
jge loc_1013550  +
push esi  +
push offset aApplydiskopera  +
push 2000000h  +
push offset unk_10195C4  +
call sub_100DC59  +
add esp 10h +
mov eax esi +
jmp loc_1013BA7  +
mov eax [ebx+18h] +
lea ecx [eax-1] +
cmp ecx 10h +
ja loc_1013B5B  +
jmp ds:off_1013BAF[ecx*4]  +
push dword ptr [ebx]  +
push offset aApplydiskope_0  +
push 4000000h  +
push offset unk_10195C4  +
call sub_100DC59  +
add esp 10h +
push dword ptr [ebx]  +
push edi  +
call sub_1013F5C  +
mov esi eax +
jmp loc_1013B78  +
push dword ptr [ebx]  +
mov edi offset unk_10195C4 +
push offset aApplydiskope_1  +
push 4000000h  +
push edi  +
call sub_100DC59  +
add esp 10h +
lea eax [ebp-4] +
push eax  +
push dword ptr [ebx]  +
push dword ptr [ebp+8]  +
call sub_1016E3B  +
mov esi eax +
test esi esi +
jl loc_1013619  +
cmp dword ptr [ebp-4] 1 +
jnz loc_10135FC  +
push dword ptr [ebx]  +
push offset aApplydiskope_2  +
push 4000000h  +
push edi  +
call sub_100DC59  +
add esp 10h +
push 40h  +
push dword ptr [ebx]  +
push dword ptr [ebp+8]  +
call sub_10152AA  +
mov esi eax +
test esi esi +
jl loc_10135F2  +
push dword ptr [ebx]  +
push offset aApplydiskope_3  +
jmp loc_1013609  +
push esi  +
push dword ptr [ebx]  +
push offset aApplydiskope_4  +
jmp loc_1013621  +
cmp dword ptr [ebp-4] 0 +
jnz loc_101363C  +
push dword ptr [ebx]  +
push offset aApplydiskope_5  +
push 4000000h  +
push edi  +
call sub_100DC59  +
add esp 10h +
jmp loc_101362F  +
push esi  +
push dword ptr [ebx]  +
push offset aApplydiskope_6  +
push 2000000h  +
push edi  +
call sub_100DC59  +
add esp 14h +
test esi esi +
jl loc_1013B7C  +
mov edi offset unk_10195C4 +
push dword ptr [ebx]  +
push offset aApplydiskope_7  +
push 4000000h  +
push edi  +
call sub_100DC59  +
add esp 10h +
push dword ptr [ebx]  +
push dword ptr [ebp+8]  +
call sub_1015256  +
mov esi eax +
test esi esi +
jl loc_1013678  +
push dword ptr [ebx]  +
push offset aApplydiskope_8  +
push 4000000h  +
push edi  +
call sub_100DC59  +
jmp loc_1013B75  +
push esi  +
push dword ptr [ebx]  +
push offset aApplydiskope_9  +
push 2000000h  +
push edi  +
call sub_100DC59  +
add esp 14h +
jmp loc_1013B78  +
push dword ptr [ebx]  +
push offset aApplydiskop_10  +
push 4000000h  +
push offset unk_10195C4  +
call sub_100DC59  +
add esp 10h +
push dword ptr [ebx]  +
push edi  +
call sub_1015271  +
jmp loc_1013587  +
***
push dword ptr [ebx+4]  +
push dword ptr [ebx]  +
push offset aApplydiskop_11  +
push 4000000h  +
push offset unk_10195C4  +
call sub_100DC59  +
add esp 14h +
push dword ptr [ebx+4]  +
push dword ptr [ebx]  +
push edi  +
call sub_101528C  +
jmp loc_1013587  +
***
push dword ptr [ebx+4]  +
push dword ptr [ebx]  +
push offset aApplydiskop_12  +
push 4000000h  +
push offset unk_10195C4  +
call sub_100DC59  +
add esp 14h +
push dword ptr [ebx+4]  +
push dword ptr [ebx]  +
push edi  +
call sub_10152AA  +
jmp loc_1013587  +
***
cmp dword ptr [ebx+10h] 0 +
jz loc_1013730  +
lea eax [ebp-10h] +
push eax  +
lea eax [ebx+8] +
push eax  +
push dword ptr [ebx]  +
call sub_1013E3C  +
mov esi eax +
test esi esi +
jl loc_1013B7C  +
cmp byte ptr [ebx+28h] 0 +
mov ecx offset aTrue +
mov eax offset aFalse +
mov edx ecx +
jnz loc_1013744  +
mov edx eax +
cmp byte ptr [ebx+29h] 0 +
jz loc_101374C  +
mov eax ecx +
push dword ptr [ebx+24h]  +
push dword ptr [ebx+20h]  +
push edx  +
push eax  +
push dword ptr [ebx+2Ch]  +
push dword ptr [ebp-0Ch]  +
push dword ptr [ebp-10h]  +
push dword ptr [ebx]  +
push offset aApplydiskop_13  +
push 4000000h  +
push offset unk_10195C4  +
call sub_100DC59  +
add esp 2Ch +
cmp byte ptr [ebx+28h] 1 +
jnz loc_1013782  +
xor eax eax +
xor ecx ecx +
jmp loc_1013788  +
mov eax [ebx+20h] +
mov ecx [ebx+24h] +
push ecx  +
push eax  +
lea eax [ebp-10h] +
push eax  +
movzx eax byte ptr [ebx+29h] +
push eax  +
push dword ptr [ebx+2Ch]  +
push dword ptr [ebx]  +
push edi  +
call sub_1015314  +
mov esi eax +
test esi esi +
jl loc_1013B7C  +
mov dword ptr [ebx+10h] 3 +
mov eax [ebp-10h] +
mov [ebx+8] eax +
mov eax [ebp-0Ch] +
mov [ebx+0Ch] eax +
jmp loc_1013B78  +
lea eax [ebp-10h] +
push eax  +
lea edi [ebx+8] +
push edi  +
push dword ptr [ebx]  +
call sub_1013E3C  +
mov esi eax +
test esi esi +
jl loc_1013B7C  +
push dword ptr [ebp-0Ch]  +
push dword ptr [ebp-10h]  +
push dword ptr [ebx]  +
push offset aApplydiskop_14  +
push 4000000h  +
push offset unk_10195C4  +
call sub_100DC59  +
add esp 18h +
cmp byte ptr [ebx+28h] 1 +
jnz loc_1013804  +
xor eax eax +
xor ecx ecx +
jmp loc_101380A  +
mov eax [ebx+20h] +
mov ecx [ebx+24h] +
push ecx  +
push eax  +
push dword ptr [ebp-0Ch]  +
push dword ptr [ebp-10h]  +
push dword ptr [ebx]  +
push dword ptr [ebp+8]  +
call sub_1014693  +
mov esi eax +
test esi esi +
jl loc_1013B7C  +
mov dword ptr [ebx+10h] 3 +
mov eax [ebp-10h] +
mov [edi] eax +
mov eax [ebp-0Ch] +
mov [edi+4] eax +
jmp loc_1013B78  +
lea eax [ebp-10h] +
push eax  +
lea edi [ebx+8] +
push edi  +
push dword ptr [ebx]  +
call sub_1013E3C  +
mov esi eax +
test esi esi +
jl loc_1013B7C  +
push dword ptr [ebp-0Ch]  +
push dword ptr [ebp-10h]  +
push dword ptr [ebx]  +
push offset aApplydiskop_15  +
push 4000000h  +
push offset unk_10195C4  +
call sub_100DC59  +
add esp 18h +
push dword ptr [ebp-0Ch]  +
push dword ptr [ebp-10h]  +
push dword ptr [ebx]  +
push dword ptr [ebp+8]  +
call sub_1014579  +
jmp loc_101381C  +
***
lea ecx [ebp-10h] +
push ecx  +
lea eax [ebx+8] +
push eax  +
push dword ptr [ebx]  +
call sub_1013E3C  +
mov esi eax +
test esi esi +
jl loc_1013B7C  +
movzx eax byte ptr [ebx+2Ah] +
push eax  +
push dword ptr [ebp-0Ch]  +
push dword ptr [ebp-10h]  +
push dword ptr [ebx]  +
push offset aApplydiskop_16  +
push 4000000h  +
push offset unk_10195C4  +
call sub_100DC59  +
movzx eax byte ptr [ebx+2Ah] +
add esp 1Ch +
push eax  +
sub esp 14h +
push 5  +
pop ecx  +
mov edi esp +
push dword ptr [ebp-0Ch]  +
lea esi [ebx+2Ch] +
push dword ptr [ebp-10h]  +
movs   +
push dword ptr [ebx]  +
push dword ptr [ebp+8]  +
call sub_1014CF0  +
jmp loc_101379E  +
***
lea eax [ebp-10h] +
push eax  +
lea edi [ebx+8] +
push edi  +
push dword ptr [ebx]  +
call sub_1013E3C  +
mov esi eax +
test esi esi +
jl loc_1013B7C  +
push dword ptr [ebp-0Ch]  +
push dword ptr [ebp-10h]  +
push dword ptr [ebx]  +
push offset aApplydiskop_17  +
push 4000000h  +
push offset unk_10195C4  +
call sub_100DC59  +
add esp 18h +
push dword ptr [ebp-0Ch]  +
push dword ptr [ebp-10h]  +
push dword ptr [ebx]  +
push dword ptr [ebp+8]  +
call sub_1014BBD  +
jmp loc_101381C  +
***
lea eax [ebp-10h] +
push eax  +
lea edi [ebx+8] +
push edi  +
push dword ptr [ebx]  +
call sub_1013E3C  +
mov esi eax +
test esi esi +
jl loc_1013B7C  +
push dword ptr [ebx+2Ch]  +
push dword ptr [ebp-0Ch]  +
push dword ptr [ebp-10h]  +
push dword ptr [ebx]  +
push offset aApplydiskop_18  +
push 4000000h  +
push offset unk_10195C4  +
call sub_100DC59  +
add esp 1Ch +
push dword ptr [ebx+2Ch]  +
push dword ptr [ebp-0Ch]  +
push dword ptr [ebp-10h]  +
push dword ptr [ebx]  +
push dword ptr [ebp+8]  +
call sub_1015D28  +
jmp loc_101381C  +
***
lea ecx [ebp-10h] +
push ecx  +
lea eax [ebx+8] +
push eax  +
push dword ptr [ebx]  +
call sub_1013E3C  +
mov esi eax +
test esi esi +
jl loc_1013B7C  +
lea esi [ebx+2Ch] +
movzx eax word ptr [esi] +
xor ecx ecx +
mov edx offset Class +
mov dword ptr [ebp-8] offset asc_1006B28 +
cmp cx ax +
jnz loc_10139C0  +
mov [ebp-8] edx +
xor ecx ecx +
cmp cx ax +
jz loc_10139CC  +
movzx ecx ax +
jmp loc_10139CF  +
push 20h  +
pop ecx  +
xor edi edi +
cmp di ax +
mov eax offset asc_1006B20 +
jnz loc_10139DD  +
mov eax edx +
push dword ptr [ebp-0Ch]  +
movzx ecx cx +
push dword ptr [ebp-10h]  +
push dword ptr [ebx]  +
push dword ptr [ebp-8]  +
push ecx  +
push eax  +
push offset aApplydiskop_19  +
push 4000000h  +
push offset unk_10195C4  +
call sub_100DC59  +
add esp 24h +
push esi  +
push dword ptr [ebp-0Ch]  +
push dword ptr [ebp-10h]  +
push dword ptr [ebx]  +
push dword ptr [ebp+8]  +
call sub_1015B39  +
jmp loc_101379E  +
***
lea eax [ebp-10h] +
push eax  +
lea edi [ebx+8] +
push edi  +
push dword ptr [ebx]  +
call sub_1013E3C  +
mov esi eax +
test esi esi +
jl loc_1013B7C  +
push dword ptr [ebp-0Ch]  +
movzx eax word ptr [ebx+2Ch] +
push dword ptr [ebp-10h]  +
push dword ptr [ebx]  +
push eax  +
push offset aApplydiskop_20  +
push 4000000h  +
push offset unk_10195C4  +
call sub_100DC59  +
add esp 1Ch +
jmp loc_1013826  +
***
lea eax [ebp-10h] +
push eax  +
lea edi [ebx+8] +
push edi  +
push dword ptr [ebx]  +
call sub_1013E3C  +
mov esi eax +
test esi esi +
jl loc_1013B7C  +
mov eax [ebx+40h] +
test eax eax +
jnz loc_1013A81  +
mov eax offset aNull_0 +
push dword ptr [ebp-0Ch]  +
push dword ptr [ebp-10h]  +
push dword ptr [ebx]  +
push eax  +
push offset aApplydiskop_21  +
push 4000000h  +
push offset unk_10195C4  +
call sub_100DC59  +
add esp 1Ch +
push dword ptr [ebx+40h]  +
push dword ptr [ebp-0Ch]  +
push dword ptr [ebp-10h]  +
push dword ptr [ebx]  +
push dword ptr [ebp+8]  +
call sub_101607B  +
jmp loc_101381C  +
***
lea eax [ebp-10h] +
push eax  +
lea eax [ebx+8] +
push eax  +
push dword ptr [ebx]  +
call sub_1013E3C  +
mov esi eax +
test esi esi +
jl loc_1013B7C  +
push dword ptr [ebx+4]  +
push dword ptr [ebp-0Ch]  +
push dword ptr [ebp-10h]  +
push dword ptr [ebx]  +
push offset aApplydiskop_22  +
push 4000000h  +
push offset unk_10195C4  +
call sub_100DC59  +
add esp 1Ch +
push dword ptr [ebx+4]  +
push dword ptr [ebp-0Ch]  +
push dword ptr [ebp-10h]  +
push dword ptr [ebx]  +
push edi  +
call sub_10152C8  +
jmp loc_1013587  +
***
lea eax [ebp-10h] +
push eax  +
lea eax [ebx+8] +
push eax  +
push dword ptr [ebx]  +
call sub_1013E3C  +
mov esi eax +
test esi esi +
jl loc_1013B7C  +
push dword ptr [ebx+4]  +
push dword ptr [ebp-0Ch]  +
push dword ptr [ebp-10h]  +
push dword ptr [ebx]  +
push offset aApplydiskop_23  +
push 4000000h  +
push offset unk_10195C4  +
call sub_100DC59  +
add esp 1Ch +
push dword ptr [ebx+4]  +
push dword ptr [ebp-0Ch]  +
push dword ptr [ebp-10h]  +
push dword ptr [ebx]  +
push edi  +
call sub_10152EE  +
jmp loc_1013587  +
***
xor esi esi +
jmp loc_1013B97  +
push eax  +
push offset aApplydiskop_24  +
push 2000000h  +
push offset unk_10195C4  +
call sub_100DC59  +
mov esi 80004005h +
add esp 10h +
test esi esi +
jge loc_1013B97  +
push esi  +
push dword ptr [ebx+18h]  +
push offset aApplydiskop_25  +
push 2000000h  +
push offset unk_10195C4  +
call sub_100DC59  +
add esp 14h +
call ds:CoUninitialize  +
jmp loc_1013549  +
***
mov eax 80070057h +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
and [ebp+var_8] 0 +
mov ecx [ebp+arg_0] +
push edi  +
xor eax eax +
lea edi [ebp+var_4] +
stos   +
pop edi  +
test ecx ecx +
jz loc_1013C2F  +
mov eax [ebp+arg_4] +
test eax eax +
jz loc_1013C2F  +
mov [ebp+var_4] eax +
lea eax [ebp+var_8] +
push eax  +
push offset loc_10134D7  +
mov [ebp+var_8] ecx +
call sub_100FF15  +
jmp locret_1013C34  +
mov eax 80070057h +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
cmp [ebp+arg_0] 0 +
jnz loc_1013C54  +
mov eax 80070057h +
jmp locret_1013C8E  +
push esi  +
lea eax [ebp+var_4] +
push eax  +
call sub_1016168  +
mov esi eax +
test esi esi +
jl loc_1013C7E  +
cmp [ebp+var_4] 0 +
jz loc_1013C79  +
push [ebp+var_4]  +
push [ebp+arg_0]  +
call sub_1013BF8  +
mov esi eax +
jmp loc_1013C7E  +
mov esi 8007000Dh +
mov eax [ebp+var_4] +
test eax eax +
jz loc_1013C8B  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax esi +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_0]  +
push offset unk_10195C4  +
call sub_1010DEB  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
push esi  +
test ecx ecx +
jz loc_1013CEE  +
mov eax [ebp+arg_4] +
test eax eax +
jz loc_1013CEE  +
mov edx [ecx] +
mov esi [eax] +
mov ecx [ecx+4] +
mov eax [eax+4] +
cmp ecx eax +
ja loc_1013CE9  +
jb loc_1013CDA  +
cmp edx esi +
jnb loc_1013CDF  +
or eax 0FFFFFFFFh +
jmp loc_1013CF0  +
cmp ecx eax +
jb loc_1013CEE  +
ja loc_1013CE9  +
cmp edx esi +
jbe loc_1013CEE  +
xor eax eax +
inc eax  +
jmp loc_1013CF0  +
xor eax eax +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
xor eax eax +
cmp [ebp+arg_0] eax +
mov [ebp+var_4] eax +
jl loc_1013E2E  +
cmp esi eax +
jz loc_1013E2E  +
cmp edi eax +
jz loc_1013E2E  +
push ebx  +
push eax  +
push [ebp+arg_0]  +
mov [esi] eax +
mov [edi] eax +
call sub_100EE53  +
mov ebx eax +
mov [ebp+lpMem] ebx +
test ebx ebx +
jz loc_1013DB3  +
mov eax [ebx+4] +
shl eax 3 +
push eax  +
push 8  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov [esi] eax +
test eax eax +
jz loc_1013DB3  +
and [ebp+arg_0] 0 +
cmp dword ptr [ebx+4] 0 +
jbe loc_1013D9D  +
lea edx [ebx+50h] +
mov eax [ebx] +
cmp eax 1 +
jz loc_1013D76  +
test eax eax +
jnz loc_1013D8C  +
mov al [edx] +
test al al +
jz loc_1013D8C  +
cmp al 5 +
jz loc_1013D8C  +
cmp al 0Fh +
jz loc_1013D8C  +
mov ebx [edx-18h] +
mov eax [esi] +
mov ecx [edi] +
mov [eax+ecx*8] ebx +
mov ebx [edx-14h] +
mov [eax+ecx*8+4] ebx +
inc dword ptr [edi]  +
mov ebx [ebp+lpMem] +
inc [ebp+arg_0]  +
mov eax [ebp+arg_0] +
add edx 90h +
cmp eax [ebx+4] +
jb loc_1013D5D  +
push offset sub_1013CB2  +
push 8  +
push dword ptr [edi]  +
push dword ptr [esi]  +
call ds:qsort  +
add esp 10h +
jmp loc_1013E14  +
call ds:GetLastError  +
mov ebx 80070000h +
test eax eax +
jle loc_1013DCB  +
and eax 0FFFFh +
or eax ebx +
test eax eax +
jge loc_1013DE3  +
call ds:GetLastError  +
test eax eax +
jle loc_1013DDE  +
and eax 0FFFFh +
or eax ebx +
mov [ebp+var_4] eax +
jmp loc_1013DEA  +
mov [ebp+var_4] 80004005h +
cmp [ebp+var_4] 0 +
jge loc_1013E11  +
mov eax [esi] +
xor ebx ebx +
cmp eax ebx +
jz loc_1013E0D  +
push eax  +
push ebx  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
test eax eax +
jz loc_1013E0D  +
mov [esi] ebx +
mov [esi] ebx +
mov [edi] ebx +
mov ebx [ebp+lpMem] +
test ebx ebx +
jz loc_1013E28  +
push ebx  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
mov eax [ebp+var_4] +
pop ebx  +
jmp locret_1013E33  +
mov eax 80070057h +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
xor esi esi +
cmp [ebp+arg_0] esi +
jl loc_1013F31  +
mov eax [ebp+arg_4] +
cmp eax esi +
jz loc_1013F31  +
mov ebx [ebp+lpMem] +
cmp ebx esi +
jz loc_1013F31  +
mov [ebx] esi +
mov [ebx+4] esi +
mov ecx [eax+8] +
dec ecx  +
push edi  +
jz loc_1013EEB  +
dec ecx  +
jz loc_1013E90  +
dec ecx  +
jz loc_1013E81  +
mov esi 80070057h +
jmp loc_1013F2C  +
mov ecx [eax] +
mov [ebx] ecx +
mov eax [eax+4] +
mov [ebx+4] eax +
jmp loc_1013F2C  +
push [ebp+arg_0]  +
mov [ebp+lpMem] esi +
mov [ebp+var_4] esi +
lea edi [ebp+var_4] +
lea esi [ebp+lpMem] +
call sub_1013CF8  +
mov ecx [ebp+lpMem] +
mov esi eax +
test esi esi +
jl loc_1013ED5  +
mov eax [ebp+arg_4] +
mov eax [eax] +
cmp eax 1 +
jl loc_1013ED0  +
lea edx [eax-1] +
cmp edx [ebp+var_4] +
jnb loc_1013ED0  +
mov edx [ecx+eax*8-8] +
mov [ebx] edx +
mov eax [ecx+eax*8-4] +
mov [ebx+4] eax +
xor esi esi +
jmp loc_1013ED5  +
mov esi 80070490h +
test ecx ecx +
jz loc_1013F2C  +
push ecx  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
jmp loc_1013F2C  +
push ebx  +
push dword ptr [eax]  +
push [ebp+arg_0]  +
call sub_100F099  +
cmp eax 1 +
jz loc_1013F2C  +
mov esi ds:GetLastError +
call esi  +
mov ebx 0FFFFh +
mov edi 80070000h +
test eax eax +
jle loc_1013F17  +
and eax ebx +
or eax edi +
test eax eax +
jge loc_1013F27  +
call esi  +
test eax eax +
jle loc_1013F23  +
and eax ebx +
or eax edi +
mov esi eax +
jmp loc_1013F2C  +
mov esi 80004005h +
mov eax esi +
pop edi  +
jmp loc_1013F36  +
mov eax 80070057h +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_0]  +
push offset unk_10195C8  +
call sub_1010DEB  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
push edi  +
xor edi edi +
mov [ebp+var_8] edi +
mov [ebp+var_4] edi +
cmp [ebp+arg_0] edi +
jz loc_101405F  +
cmp [ebp+arg_4] edi +
jl loc_101405F  +
push esi  +
push edi  +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_8] +
push eax  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_10167B3  +
mov esi eax +
cmp esi edi +
jl loc_101403D  +
mov eax [ebp+var_8] +
cmp eax edi +
jz loc_1014038  +
cmp [ebp+var_4] edi +
jz loc_1014038  +
lea edx [ebp+arg_4] +
push edx  +
mov [ebp+arg_4] edi +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+10h]  +
mov esi eax +
cmp esi edi +
jl loc_1014027  +
mov eax [ebp+var_4] +
lea edx [ebp+arg_0] +
push edx  +
push edi  +
push 1  +
push 1  +
mov [ebp+arg_0] edi +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+30h]  +
mov esi eax +
cmp esi edi +
jl loc_101400E  +
mov eax [ebp+arg_0] +
cmp eax edi +
jz loc_1014020  +
lea edx [ebp+var_2C] +
push edx  +
lea edx [ebp+var_C] +
push edx  +
mov [ebp+var_C] edi +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+10h]  +
mov esi eax +
cmp esi edi +
jl loc_1014001  +
mov esi [ebp+var_C] +
mov eax [ebp+arg_0] +
cmp eax edi +
jz loc_101400E  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
cmp [ebp+arg_4] edi +
jz loc_101403D  +
mov eax [ebp+arg_4] +
push [ebp+arg_4]  +
mov eax [eax] +
call dword ptr [eax+8]  +
jmp loc_101403D  +
mov esi 8007000Dh +
jmp loc_101400E  +
cmp esi 80042417h +
jnz loc_101400E  +
cmp [ebp+arg_4] edi +
jnz loc_1014013  +
xor esi esi +
jmp loc_101403D  +
mov esi 8007000Dh +
mov eax [ebp+var_4] +
cmp eax edi +
jz loc_101404D  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp+var_4] edi +
mov eax [ebp+var_8] +
cmp eax edi +
jz loc_101405A  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax esi +
pop esi  +
jmp loc_1014064  +
mov eax 80070057h +
pop edi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 7Ch +
mov eax dword_101908C +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
push edi  +
xor esi esi +
push 6Ch  +
lea eax [ebp+var_70] +
push esi  +
push eax  +
mov edi ecx +
mov [ebp+var_78] esi +
mov [ebp+var_7C] esi +
mov [ebp+var_74] esi +
call memset  +
add esp 0Ch +
cmp edi esi +
jz loc_1014151  +
cmp [ebp+arg_0] esi +
jl loc_1014151  +
push esi  +
push esi  +
lea eax [ebp+var_78] +
push eax  +
push [ebp+arg_0]  +
push edi  +
call sub_10167B3  +
mov edi eax +
cmp edi esi +
jl loc_1014127  +
mov eax [ebp+var_78] +
cmp eax esi +
jz loc_10140EE  +
mov ecx [eax] +
lea edx [ebp+var_74] +
push edx  +
push eax  +
call dword ptr [ecx+0Ch]  +
mov edi eax +
cmp edi esi +
jl loc_1014127  +
mov eax [ebp+var_78] +
mov ecx [eax] +
lea edx [ebp+var_7C] +
push edx  +
push offset dword_1009548  +
push eax  +
call dword ptr [ecx]  +
mov edi eax +
cmp edi esi +
jl loc_1014127  +
mov eax [ebp+var_7C] +
cmp eax esi +
jz loc_1014127  +
mov ecx [ebp+arg_4] +
dec ecx  +
jz loc_1014119  +
sub ecx 3 +
jz loc_101410B  +
mov edi 80042400h +
jmp loc_1014127  +
cmp [ebp+var_64] 1 +
jnz loc_1014127  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+10h]  +
jmp loc_1014125  +
cmp [ebp+var_64] 4 +
jnz loc_1014127  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+0Ch]  +
mov edi eax +
lea eax [ebp+var_74] +
push eax  +
call sub_1016574  +
mov eax [ebp+var_7C] +
cmp eax esi +
jz loc_1014140  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp+var_7C] esi +
mov eax [ebp+var_78] +
cmp eax esi +
jz loc_101414D  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax edi +
jmp loc_1014156  +
mov eax 80070057h +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_100D691  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push edi  +
xor edi edi +
mov [ebp+var_4] edi +
cmp [ebp+arg_0] edi +
jz loc_10141C8  +
cmp [ebp+arg_4] edi +
jl loc_10141C8  +
push esi  +
push edi  +
push edi  +
lea eax [ebp+var_4] +
push eax  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_10167B3  +
mov esi eax +
cmp esi edi +
jl loc_10141B6  +
mov eax [ebp+var_4] +
cmp eax edi +
jz loc_10141C3  +
cmp [ebp+arg_8] 1 +
push [ebp+arg_C]  +
mov ecx [eax] +
push eax  +
jnz loc_10141B1  +
call dword ptr [ecx+20h]  +
jmp loc_10141B4  +
call dword ptr [ecx+24h]  +
mov esi eax +
mov eax [ebp+var_4] +
cmp eax edi +
jz loc_10141C3  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax esi +
pop esi  +
jmp loc_10141CD  +
mov eax 80070057h +
pop edi  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
mov eax dword_101908C +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
push edi  +
xor esi esi +
xor eax eax +
mov [ebp+var_14] esi +
lea edi [ebp+var_10] +
stos   +
stos   +
stos   +
mov [ebp+var_1C] esi +
mov [ebp+var_20] esi +
cmp ebx esi +
jz loc_10142CA  +
cmp [ebp+arg_0] esi +
jl loc_10142CA  +
cmp [ebp+arg_4] esi +
jnz loc_101421D  +
cmp [ebp+arg_8] esi +
jz loc_10142CA  +
lea eax [ebp+var_14] +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push ebx  +
call sub_1016C12  +
cmp eax esi +
mov [ebp+var_18] eax +
jl loc_10142A7  +
push 4  +
pop ecx  +
lea edi [ebp+var_14] +
mov esi offset dword_1001E38 +
xor eax eax +
cmps   +
jz loc_10142A7  +
mov eax [ebx] +
lea ecx [ebp+var_1C] +
push ecx  +
push 0Bh  +
sub esp 10h +
mov edi esp +
lea esi [ebp+var_14] +
movs   +
movs   +
movs   +
push ebx  +
movs   +
call dword ptr [eax+24h]  +
mov [ebp+var_18] eax +
test eax eax +
jl loc_10142A7  +
mov eax [ebp+var_1C] +
test eax eax +
jz loc_10142B8  +
mov ecx [eax] +
lea edx [ebp+var_20] +
push edx  +
push offset dword_1009598  +
push eax  +
call dword ptr [ecx]  +
mov [ebp+var_18] eax +
test eax eax +
jl loc_10142A7  +
mov eax [ebp+var_20] +
test eax eax +
jz loc_10142A7  +
cmp [ebp+arg_C] 1 +
mov ecx [eax] +
jnz loc_101429D  +
push 0  +
push [ebp+arg_10]  +
push eax  +
call dword ptr [ecx+30h]  +
jmp loc_10142A4  +
push [ebp+arg_10]  +
push eax  +
call dword ptr [ecx+34h]  +
mov [ebp+var_18] eax +
mov eax [ebp+var_1C] +
test eax eax +
jz loc_10142B8  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
and [ebp+var_1C] 0 +
mov eax [ebp+var_20] +
test eax eax +
jz loc_10142C5  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+var_18] +
jmp loc_10142CF  +
mov eax 80070057h +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_100D691  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 90h +
mov eax dword_101908C +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
xor edi edi +
mov [ebp+var_78] edi +
mov [ebp+var_7C] edi +
cmp esi edi +
jz loc_101455F  +
cmp [ebp+arg_4] edi +
jl loc_101455F  +
cmp [ebp+arg_8] 1 +
jz loc_1014327  +
cmp [ebp+arg_8] 2 +
jnz loc_101455F  +
push ebx  +
push edi  +
lea eax [ebp+var_7C] +
push eax  +
lea eax [ebp+var_78] +
push eax  +
push [ebp+arg_4]  +
push esi  +
call sub_10167B3  +
mov ebx eax +
cmp ebx edi +
jl loc_101455A  +
cmp [ebp+var_78] edi +
jz loc_101455A  +
cmp [ebp+var_7C] edi +
jz loc_101455A  +
lea eax [ebp+var_90] +
push eax  +
push [ebp+var_78]  +
mov [ebp+var_90] edi +
call sub_1016514  +
mov ebx eax +
cmp ebx edi +
jl loc_101453D  +
cmp [ebp+var_90] edi +
jz loc_1014392  +
lea eax [ebp+var_7C] +
push eax  +
lea eax [ebp+var_78] +
push eax  +
push 2  +
push [ebp+arg_4]  +
push esi  +
call sub_101742B  +
mov ebx eax +
cmp ebx edi +
jl loc_101453D  +
mov esi [ebp+var_78] +
cmp esi edi +
jz loc_101453D  +
cmp [ebp+var_7C] edi +
jz loc_101454D  +
push 6Ch  +
lea eax [ebp+var_70] +
push edi  +
push eax  +
mov [ebp+var_74] edi +
call memset  +
mov eax [esi] +
add esp 0Ch +
lea ecx [ebp+var_74] +
push ecx  +
push esi  +
call dword ptr [eax+0Ch]  +
mov ebx eax +
cmp ebx edi +
jl loc_1014534  +
mov eax [ebp+arg_8] +
cmp eax [ebp+var_30] +
jz loc_1014531  +
mov [ebp+pv] edi +
mov [ebp+var_8C] edi +
mov ecx offset aMbr +
cmp eax 1 +
jz loc_10143F8  +
mov ecx offset aGpt +
cmp [ebp+var_30] 1 +
mov eax offset aMbr +
jz loc_1014408  +
mov eax offset aGpt +
push ecx  +
push eax  +
push [ebp+arg_4]  +
mov esi offset unk_10195C8 +
push offset aConvertdisksty  +
push 4000000h  +
push esi  +
call sub_100DC59  +
mov eax [ebp+var_78] +
mov ecx [eax] +
add esp 18h +
lea edx [ebp+var_8C] +
push edx  +
lea edx [ebp+pv] +
push edx  +
push eax  +
call dword ptr [ecx+18h]  +
mov ebx eax +
cmp ebx edi +
jl loc_1014521  +
cmp [ebp+var_8C] 0 +
mov [ebp+var_88] edi +
mov edi 2000000h +
jle loc_10144BC  +
and [ebp+var_84] 0 +
test ebx ebx +
jl loc_10144FB  +
mov eax [ebp+pv] +
mov ecx [ebp+var_84] +
add eax ecx +
mov eax [eax+10h] +
cmp eax 1 +
jz loc_10144A1  +
cmp eax 7FFFh +
jz loc_10144A1  +
cmp eax 6 +
jz loc_10144A1  +
cmp eax 5 +
jz loc_10144A1  +
push [ebp+arg_4]  +
mov ebx 80004005h +
push offset aConvertdisks_0  +
push edi  +
push esi  +
call sub_100DC59  +
add esp 10h +
inc [ebp+var_88]  +
mov eax [ebp+var_88] +
add [ebp+var_84] 50h +
cmp eax [ebp+var_8C] +
jl loc_101445E  +
test ebx ebx +
jl loc_10144FB  +
mov eax [ebp+var_78] +
push [ebp+arg_8]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+1Ch]  +
mov ebx eax +
test ebx ebx +
jl loc_10144FB  +
cmp [ebp+arg_8] 1 +
mov eax offset aMbr +
jz loc_10144E2  +
mov eax offset aGpt +
push eax  +
push [ebp+arg_4]  +
push offset aConvertdisks_1  +
push 4000000h  +
push esi  +
call sub_100DC59  +
add esp 14h +
jmp loc_101451F  +
cmp [ebp+arg_8] 1 +
mov eax offset aMbr +
jz loc_101450B  +
mov eax offset aGpt +
push ebx  +
push eax  +
push [ebp+arg_4]  +
push offset aConvertdisks_2  +
push edi  +
push esi  +
call sub_100DC59  +
add esp 18h +
xor edi edi +
cmp [ebp+pv] edi +
jz loc_1014534  +
push [ebp+pv]  +
call ds:CoTaskMemFree  +
jmp loc_1014534  +
xor ebx ebx +
inc ebx  +
lea eax [ebp+var_74] +
push eax  +
call sub_1016574  +
mov eax [ebp+var_7C] +
cmp eax edi +
jz loc_101454D  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp+var_7C] edi +
mov eax [ebp+var_78] +
cmp eax edi +
jz loc_101455A  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax ebx +
pop ebx  +
jmp loc_1014564  +
mov eax 80070057h +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_100D691  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push esi  +
xor esi esi +
push edi  +
cmp [ebp+arg_0] esi +
jz loc_1014681  +
cmp [ebp+arg_4] esi +
jl loc_1014681  +
cmp [ebp+arg_8] esi +
jnz loc_10145A5  +
cmp [ebp+arg_C] esi +
jz loc_1014681  +
push esi  +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+pv] +
push eax  +
push [ebp+arg_4]  +
mov [ebp+pv] esi +
push [ebp+arg_0]  +
mov [ebp+var_4] esi +
call sub_10167B3  +
mov edi eax +
cmp edi esi +
jl loc_1014686  +
cmp [ebp+pv] esi +
jz loc_1014686  +
mov eax [ebp+var_4] +
cmp eax esi +
jz loc_1014686  +
mov ecx [eax] +
push 1  +
push 1  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push eax  +
call dword ptr [ecx+18h]  +
mov edi eax +
cmp edi esi +
jl loc_1014662  +
lea eax [ebp+arg_4] +
push eax  +
push [ebp+arg_C]  +
mov [ebp+arg_4] esi +
push [ebp+arg_8]  +
push [ebp+pv]  +
call sub_101637C  +
mov edi eax +
cmp [ebp+arg_4] esi +
jz loc_1014662  +
lea eax [ebp+arg_0] +
push eax  +
push [ebp+var_4]  +
mov [ebp+arg_0] esi +
push [ebp+pv]  +
call sub_1016406  +
mov edi eax +
cmp edi esi +
jl loc_1014662  +
cmp [ebp+arg_0] esi +
jnz loc_1014662  +
lea eax [ebp+var_10] +
push eax  +
lea eax [ebp+arg_8] +
push eax  +
push esi  +
push [ebp+pv]  +
mov [ebp+arg_8] esi +
mov [ebp+arg_C] esi +
mov [ebp+var_10] esi +
mov [ebp+var_C] esi +
call sub_101626B  +
mov edi eax +
cmp edi esi +
jl loc_1014662  +
mov eax [ebp+var_4] +
mov ecx [eax] +
push esi  +
push esi  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push eax  +
call dword ptr [ecx+18h]  +
mov edi eax +
mov eax [ebp+var_4] +
cmp eax esi +
jz loc_1014672  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp+var_4] esi +
mov eax [ebp+pv] +
cmp eax esi +
jz loc_1014686  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_1014686  +
mov edi 80070057h +
mov eax edi +
pop edi  +
pop esi  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10Ch +
mov eax dword_101908C +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
xor ebx ebx +
push edi  +
mov [ebp+var_DC] esi +
mov [ebp+var_C0] ebx +
mov [ebp+var_D8] ebx +
cmp esi ebx +
jz loc_1014AE7  +
cmp [ebp+arg_4] ebx +
jl loc_1014AE7  +
cmp [ebp+arg_8] ebx +
jnz loc_10146E1  +
cmp [ebp+arg_C] ebx +
jz loc_1014AE7  +
push ebx  +
lea eax [ebp+var_D8] +
push eax  +
lea eax [ebp+var_C0] +
push eax  +
push [ebp+arg_4]  +
push esi  +
call sub_10167B3  +
cmp eax ebx +
mov [ebp+var_B8] eax +
jl loc_1014ADF  +
mov edi [ebp+var_C0] +
cmp edi ebx +
jz loc_1014ADF  +
cmp [ebp+var_D8] ebx +
jz loc_1014ADF  +
push 6Ch  +
lea eax [ebp+var_B0] +
push ebx  +
push eax  +
mov [ebp+var_B4] ebx +
call memset  +
mov eax [edi] +
add esp 0Ch +
lea ecx [ebp+var_B4] +
push ecx  +
push edi  +
call dword ptr [eax+0Ch]  +
cmp eax ebx +
mov [ebp+var_B8] eax +
jl loc_1014AB9  +
xor eax eax +
mov [ebp+var_14] ebx +
lea edi [ebp+var_10] +
stos   +
stos   +
stos   +
lea eax [ebp+var_14] +
push eax  +
push [ebp+arg_C]  +
mov [ebp+var_D0] ebx +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push esi  +
call sub_1016C12  +
cmp eax ebx +
mov [ebp+var_B8] eax +
jl loc_1014AAD  +
push 4  +
pop ecx  +
lea edi [ebp+var_14] +
mov esi offset dword_1001E38 +
xor eax eax +
cmps   +
jz loc_1014AAD  +
mov eax [ebp+var_DC] +
mov ecx [eax] +
lea edx [ebp+var_D0] +
push edx  +
push 0Bh  +
sub esp 10h +
mov edi esp +
lea esi [ebp+var_14] +
movs   +
movs   +
movs   +
push eax  +
movs   +
call dword ptr [ecx+24h]  +
cmp eax ebx +
mov [ebp+var_B8] eax +
jl loc_1014AAD  +
mov eax [ebp+var_D0] +
cmp eax ebx +
jz loc_1014AAD  +
lea edx [ebp+var_BC] +
push edx  +
push offset dword_1009598  +
mov [ebp+var_BC] ebx +
mov ecx [eax] +
push eax  +
call dword ptr [ecx]  +
cmp eax ebx +
mov [ebp+var_B8] eax +
jl loc_1014A97  +
cmp [ebp+var_BC] ebx +
jz loc_1014A97  +
lea eax [ebp+var_DC] +
push eax  +
push [ebp+var_BC]  +
mov [ebp+var_DC] ebx +
call sub_10173D0  +
cmp eax ebx +
mov [ebp+var_B8] eax +
jl loc_1014A81  +
cmp [ebp+var_DC] ebx +
jnz loc_1014A77  +
mov eax [ebp+var_C0] +
lea edx [ebp+var_D4] +
push edx  +
lea edx [ebp+pv] +
push edx  +
mov [ebp+var_D4] ebx +
mov [ebp+pv] ebx +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+18h]  +
cmp eax ebx +
mov [ebp+var_B8] eax +
jl loc_10148A2  +
cmp [ebp+var_D4] ebx +
jle loc_1014896  +
mov eax [ebp+pv] +
add eax 28h +
push 4  +
pop ecx  +
lea edi [ebp+var_14] +
mov esi eax +
xor edx edx +
cmps   +
jz loc_10148BF  +
inc ebx  +
add eax 50h +
cmp ebx [ebp+var_D4] +
jl loc_101487C  +
mov [ebp+var_B8] 8004240Eh +
xor ebx ebx +
cmp [ebp+pv] ebx +
jz loc_1014A81  +
push [ebp+pv]  +
call ds:CoTaskMemFree  +
jmp loc_1014A81  +
lea ecx [ebp+var_E8] +
push ecx  +
xor eax eax +
lea ecx [ebp+var_CC] +
push ecx  +
push eax  +
push [ebp+var_C0]  +
mov [ebp+var_CC] eax +
mov [ebp+var_C8] eax +
mov [ebp+var_E8] eax +
mov [ebp+var_E4] eax +
call sub_101626B  +
mov [ebp+var_B8] eax +
test eax eax +
jl loc_10148A0  +
mov esi [ebp+pv] +
mov eax ebx +
imul eax eax +
mov edi [eax+esi+18h] +
mov eax [eax+esi+1Ch] +
cmp eax [ebp+var_C8] +
jb loc_1014949  +
ja loc_1014922  +
cmp edi [ebp+var_CC] +
jb loc_1014949  +
mov edx [ebp+var_E8] +
add edx [ebp+var_CC] +
mov ecx [ebp+var_E4] +
adc ecx [ebp+var_C8] +
cmp eax ecx +
ja loc_1014949  +
jb loc_1014944  +
cmp edi edx +
jnb loc_1014949  +
xor edi edi +
inc edi  +
jmp loc_101494B  +
xor edi edi +
inc ebx  +
cmp ebx [ebp+var_D4] +
jge loc_10149D8  +
imul ebx ebx +
lea eax [ebx+esi] +
mov ecx [eax+10h] +
cmp ecx 1 +
jz loc_1014972  +
cmp ecx 7FFFh +
jnz loc_1014896  +
mov ebx [ebp+arg_10] +
test ebx ebx +
jnz loc_1014987  +
cmp [ebp+arg_14] ebx +
jnz loc_1014987  +
mov ecx [eax+24h] +
mov ebx [eax+20h] +
mov [ebp+arg_14] ecx +
mov esi [eax+18h] +
mov eax [eax+1Ch] +
cmp eax [ebp+var_C8] +
jb loc_10149C6  +
ja loc_101499F  +
cmp esi [ebp+var_CC] +
jb loc_10149C6  +
mov edx [ebp+var_E8] +
add edx [ebp+var_CC] +
mov ecx [ebp+var_E4] +
adc ecx [ebp+var_C8] +
cmp eax ecx +
ja loc_10149C6  +
jb loc_10149C1  +
cmp esi edx +
jnb loc_10149C6  +
xor eax eax +
inc eax  +
jmp loc_10149C8  +
xor eax eax +
test edi edi +
jz loc_10149D2  +
test eax eax +
jz loc_10149DB  +
jmp loc_10149E5  +
test eax eax +
jz loc_10149E5  +
jmp loc_10149DB  +
mov ebx [ebp+arg_10] +
mov [ebp+var_B8] 8004240Eh +
cmp [ebp+var_B8] 0 +
jl loc_10148A0  +
mov eax [ebp+arg_14] +
and [ebp+var_E0] 0 +
lea esi [ebp+var_B4] +
lea edi [ebp+var_44] +
movs   +
movs   +
movs   +
lea edx [ebp+var_E0] +
push edx  +
movs   +
push 1  +
mov [ebp+var_30] eax +
mov eax [ebp+var_BC] +
lea edx [ebp+var_44] +
push edx  +
mov [ebp+var_34] ebx +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+18h]  +
mov [ebp+var_B8] eax +
test eax eax +
jl loc_10148A0  +
mov eax [ebp+var_E0] +
test eax eax +
jz loc_10148A0  +
mov ecx [eax] +
lea edx [ebp+var_10C] +
push edx  +
lea edx [ebp+var_EC] +
push edx  +
push eax  +
call dword ptr [ecx+10h]  +
mov [ebp+var_B8] eax +
mov eax [ebp+var_E0] +
test eax eax +
jz loc_10148A0  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_10148A0  +
mov [ebp+var_B8] 80042415h +
mov eax [ebp+var_BC] +
cmp eax ebx +
jz loc_1014A97  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp+var_BC] ebx +
mov eax [ebp+var_D0] +
cmp eax ebx +
jz loc_1014AAD  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp+var_D0] ebx +
lea eax [ebp+var_B4] +
push eax  +
call sub_1016574  +
mov eax [ebp+var_D8] +
cmp eax ebx +
jz loc_1014ACF  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp+var_D8] ebx +
mov eax [ebp+var_C0] +
cmp eax ebx +
jz loc_1014ADF  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+var_B8] +
jmp loc_1014AEC  +
mov eax 80070057h +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100D691  +
leave   +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
mov edi [ebp+arg_0] +
test edi edi +
jz loc_1014BAE  +
mov eax [ebp+arg_4] +
test eax eax +
jz loc_1014BAE  +
push ebx  +
mov ebx ds:GetProcessHeap +
push esi  +
push 2A0h  +
xor ecx ecx +
push 8  +
mov [eax] cx +
call ebx  +
push eax  +
call ds:HeapAlloc  +
mov esi eax +
test esi esi +
jz loc_1014BA3  +
mov eax [edi] +
push esi  +
push 18h  +
push 43h  +
push edi  +
call dword ptr [eax+28h]  +
mov edi eax +
test edi edi +
jl loc_1014B95  +
xor eax eax +
lea ecx [esi+18h] +
cmp dword ptr [ecx] 1 +
jnz loc_1014B65  +
inc eax  +
add ecx 1Ch +
cmp eax 18h +
jb loc_1014B57  +
cmp eax 18h +
jnb loc_1014B90  +
imul eax eax +
movzx eax word ptr [eax+esi] +
cmp ax 61h +
jb loc_1014B85  +
cmp ax 7Ah +
ja loc_1014B85  +
movzx eax ax +
sub eax 20h +
jmp loc_1014B88  +
movzx eax ax +
mov ecx [ebp+arg_4] +
mov [ecx] ax +
jmp loc_1014B95  +
mov edi 80004005h +
push esi  +
push 0  +
call ebx  +
push eax  +
call ds:HeapFree  +
jmp loc_1014BA8  +
mov edi 8007000Eh +
pop esi  +
mov eax edi +
pop ebx  +
jmp loc_1014BB3  +
mov eax 80070057h +
pop edi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 90h +
mov eax dword_101908C +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push edi  +
xor edi edi +
mov [ebp+var_78] edi +
mov [ebp+var_7C] edi +
cmp eax edi +
jz loc_1014CD7  +
cmp [ebp+arg_4] edi +
jl loc_1014CD7  +
cmp [ebp+arg_8] edi +
jnz loc_1014BFD  +
cmp [ebp+arg_C] edi +
jz loc_1014CD7  +
push esi  +
push edi  +
lea ecx [ebp+var_7C] +
push ecx  +
lea ecx [ebp+var_78] +
push ecx  +
push [ebp+arg_4]  +
push eax  +
call sub_10167B3  +
mov esi eax +
cmp esi edi +
jl loc_1014CD2  +
cmp [ebp+var_78] edi +
jz loc_1014CCD  +
cmp [ebp+var_7C] edi +
jz loc_1014CCD  +
lea eax [ebp+var_80] +
push eax  +
push [ebp+var_78]  +
mov [ebp+var_80] edi +
call sub_1017371  +
mov esi eax +
cmp esi edi +
jl loc_1014CAE  +
cmp [ebp+var_80] edi +
jnz loc_1014CA9  +
push 6Ch  +
lea eax [ebp+var_70] +
push edi  +
push eax  +
mov [ebp+var_74] edi +
call memset  +
mov eax [ebp+var_78] +
mov ecx [eax] +
add esp 0Ch +
lea edx [ebp+var_74] +
push edx  +
push eax  +
call dword ptr [ecx+0Ch]  +
mov esi eax +
cmp esi edi +
jl loc_1014C9E  +
xor eax eax +
inc eax  +
cmp [ebp+var_30] eax +
jnz loc_1014C99  +
lea edx [ebp+var_90] +
push edx  +
push [ebp+arg_C]  +
mov [ebp+var_88] al +
push [ebp+arg_8]  +
mov [ebp+var_90] eax +
mov eax [ebp+var_7C] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+1Ch]  +
mov esi eax +
jmp loc_1014C9E  +
mov esi 80004005h +
lea eax [ebp+var_74] +
push eax  +
call sub_1016574  +
jmp loc_1014CAE  +
mov esi 80004005h +
mov eax [ebp+var_7C] +
cmp eax edi +
jz loc_1014CBE  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp+var_7C] edi +
mov eax [ebp+var_78] +
cmp eax edi +
jz loc_1014CD2  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_1014CD2  +
mov esi 8007000Dh +
mov eax esi +
pop esi  +
jmp loc_1014CDC  +
mov eax 80070057h +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop edi  +
call sub_100D691  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 90h +
mov eax dword_101908C +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
xor ebx ebx +
push 6Ch  +
lea eax [ebp+var_70] +
push ebx  +
push eax  +
mov [ebp+var_7C] ebx +
mov [ebp+var_78] ebx +
mov [ebp+var_74] ebx +
call memset  +
add esp 0Ch +
cmp edi ebx +
jz loc_1014E97  +
cmp [ebp+arg_4] ebx +
jl loc_1014E97  +
cmp [ebp+arg_8] ebx +
jnz loc_1014D44  +
cmp [ebp+arg_C] ebx +
jz loc_1014E97  +
xor esi esi +
inc esi  +
cmp [ebp+arg_10] esi +
jz loc_1014D56  +
cmp [ebp+arg_10] 2 +
jnz loc_1014E97  +
lea eax [ebp+var_78] +
push eax  +
push ebx  +
lea eax [ebp+var_7C] +
push eax  +
push [ebp+arg_4]  +
push edi  +
call sub_10167B3  +
mov ebx eax +
test ebx ebx +
jl loc_1014E6C  +
mov eax [ebp+var_7C] +
test eax eax +
jz loc_1014E67  +
cmp [ebp+var_78] 0 +
jz loc_1014E67  +
mov ecx [eax] +
lea edx [ebp+var_74] +
push edx  +
push eax  +
call dword ptr [ecx+0Ch]  +
mov ebx eax +
test ebx ebx +
jl loc_1014E6C  +
xor eax eax +
lea edi [ebp+var_90] +
stos   +
stos   +
stos   +
stos   +
stos   +
cmp [ebp+arg_10] esi +
jnz loc_1014DDA  +
cmp [ebp+var_30] esi +
jnz loc_1014E13  +
push offset aSetpartitionty  +
push 4000000h  +
push offset unk_10195C8  +
call sub_100DC59  +
mov al [ebp+arg_14] +
add esp 0Ch +
mov [ebp+var_90] esi +
mov byte ptr [ebp+var_8C] al +
jmp loc_1014E46  +
push 2  +
pop esi  +
cmp [ebp+arg_10] esi +
jnz loc_1014E21  +
cmp [ebp+var_30] esi +
jnz loc_1014E1A  +
push offset aSetpartition_0  +
push 4000000h  +
push offset unk_10195C8  +
call sub_100DC59  +
mov [ebp+var_90] esi +
lea esi [ebp+arg_14] +
lea edi [ebp+var_8C] +
movs   +
movs   +
movs   +
add esp 0Ch +
movs   +
jmp loc_1014E46  +
mov eax offset aMbr +
jmp loc_1014E26  +
mov eax offset aGpt +
jmp loc_1014E26  +
mov eax offset aUnk +
mov ecx eax +
push ecx  +
push eax  +
push offset aSetpartition_1  +
push 2000000h  +
push offset unk_10195C8  +
call sub_100DC59  +
add esp 14h +
mov ebx 80042565h +
test ebx ebx +
jl loc_1014E6C  +
mov eax [ebp+var_78] +
mov ecx [eax] +
lea edx [ebp+var_90] +
push edx  +
push [ebp+arg_24]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push eax  +
call dword ptr [ecx+0Ch]  +
mov ebx eax +
jmp loc_1014E6C  +
mov ebx 80004005h +
lea eax [ebp+var_74] +
push eax  +
call sub_1016574  +
mov eax [ebp+var_78] +
test eax eax +
jz loc_1014E86  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
and [ebp+var_78] 0 +
mov eax [ebp+var_7C] +
test eax eax +
jz loc_1014E93  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax ebx +
jmp loc_1014E9C  +
mov eax 80070057h +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100D691  +
leave   +
retn 28h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 90h +
push esi  +
mov esi eax +
test esi esi +
jz loc_1014F40  +
test ebx ebx +
jz loc_1014F40  +
push edi  +
push 90h  +
lea eax [ebp+var_90] +
push 0  +
push eax  +
call memset  +
xor eax eax +
mov edi ebx +
stos   +
stos   +
add esp 0Ch +
stos   +
lea ecx [ebp+var_90] +
push ecx  +
push [ebp+arg_4]  +
stos   +
push [ebp+arg_0]  +
stos   +
mov eax [esi] +
push esi  +
call dword ptr [eax+0Ch]  +
mov ecx eax +
test ecx ecx +
jl loc_1014F12  +
mov eax [ebp+var_90] +
dec eax  +
jz loc_1014F32  +
dec eax  +
jz loc_1014F20  +
mov ecx 8007000Dh +
xor eax eax +
mov edi ebx +
stos   +
stos   +
stos   +
stos   +
stos   +
mov eax ecx +
pop edi  +
jmp loc_1014F45  +
lea edi [ebx+4] +
lea esi [ebp+var_70] +
movs   +
movs   +
movs   +
mov dword ptr [ebx] 2 +
movs   +
jmp loc_1014F1B  +
mov al byte ptr [ebp+var_70] +
mov dword ptr [ebx] 1 +
mov [ebx+4] al +
jmp loc_1014F1B  +
mov eax 80070057h +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push edi  +
xor edi edi +
cmp [ebp+arg_0] edi +
jz loc_10150FC  +
cmp [ebp+arg_4] edi +
jl loc_10150FC  +
cmp [ebp+arg_8] edi +
jz loc_10150FC  +
cmp [ebp+arg_C] edi +
jz loc_10150FC  +
cmp [ebp+arg_14] edi +
jz loc_10150FC  +
cmp esi edi +
jz loc_10150FC  +
push ebx  +
lea eax [ebp+arg_18] +
push eax  +
push esi  +
push [ebp+arg_10]  +
push [ebp+arg_8]  +
call sub_1017056  +
cmp eax edi +
mov [ebp+arg_8] eax +
jl loc_10150F6  +
mov eax [esi+4] +
mov ecx [esi] +
cmp eax edi +
ja loc_1014FBC  +
cmp ecx edi +
jbe loc_10150D0  +
cmp [ebp+arg_1C] edi +
ja loc_1014FCE  +
cmp [ebp+arg_18] 100000h +
jb loc_10150D0  +
push [ebp+arg_1C]  +
mov [ebp+arg_0] edi +
push [ebp+arg_18]  +
mov ebx 4000000h +
push eax  +
push ecx  +
push offset aCreatepartitio  +
push ebx  +
mov edi offset unk_10195C8 +
push edi  +
call sub_100DC59  +
mov eax [ebp+arg_C] +
mov ecx [eax] +
add esp 1Ch +
lea edx [ebp+arg_0] +
push edx  +
push [ebp+arg_14]  +
push [ebp+arg_1C]  +
push [ebp+arg_18]  +
push dword ptr [esi+4]  +
push dword ptr [esi]  +
push eax  +
call dword ptr [ecx+14h]  +
mov [ebp+arg_8] eax +
test eax eax +
jl loc_10150C1  +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_10150F6  +
and [ebp+arg_C] 0 +
mov ecx [eax] +
lea edx [ebp+var_20] +
push edx  +
lea edx [ebp+arg_C] +
push edx  +
push eax  +
call dword ptr [ecx+10h]  +
mov [ebp+arg_8] eax +
test eax eax +
jl loc_1015093  +
cmp [ebp+arg_C] 0 +
jl loc_1015093  +
cmp [ebp+var_20] 0Ah +
jnz loc_1015093  +
mov eax [ebp+var_18] +
mov ecx [ebp+var_14] +
mov [esi] eax +
mov [esi+4] ecx +
test eax eax +
jnz loc_101505B  +
test ecx ecx +
jz loc_1015077  +
push [ebp+arg_1C]  +
push [ebp+arg_18]  +
push ecx  +
push eax  +
push [ebp+arg_4]  +
push offset aCreatepartit_0  +
push ebx  +
push edi  +
call sub_100DC59  +
add esp 20h +
jmp loc_10150C1  +
push offset aCreatepartit_1  +
push 2000000h  +
push edi  +
mov [ebp+arg_8] 80004005h +
call sub_100DC59  +
add esp 0Ch +
jmp loc_10150C1  +
push [ebp+arg_C]  +
push eax  +
push offset aCreatepartit_2  +
push 2000000h  +
push edi  +
call sub_100DC59  +
add esp 14h +
cmp [ebp+arg_8] 0 +
jl loc_10150C1  +
mov eax [ebp+arg_C] +
mov [ebp+arg_8] eax +
test eax eax +
jl loc_10150C1  +
mov [ebp+arg_8] 8007000Dh +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_10150F6  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_10150F6  +
push [ebp+arg_1C]  +
push [ebp+arg_18]  +
push eax  +
push ecx  +
push offset aCreatepartit_3  +
push 2000000h  +
push offset unk_10195C8  +
call sub_100DC59  +
add esp 1Ch +
mov [ebp+arg_8] 80004005h +
mov eax [ebp+arg_8] +
pop ebx  +
jmp loc_1015101  +
mov eax 80070057h +
pop edi  +
leave   +
retn 20h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
mov eax [ebp+arg_4] +
and [ebp+var_8] 0 +
push ebx  +
test eax eax +
jz loc_1015247  +
mov ebx [ebp+arg_0] +
test ebx ebx +
jl loc_1015247  +
push esi  +
push edi  +
xor edi edi +
inc edi  +
mov [eax] edi +
call sub_10176B1  +
mov esi eax +
dec esi  +
dec esi  +
neg esi  +
lea eax [ebp+var_8] +
sbb esi esi +
push eax  +
inc esi  +
push ebx  +
mov [ebp+var_C] esi +
call sub_100F114  +
cmp eax edi +
jnz loc_1015212  +
and [ebp+var_4] 0 +
lea eax [ebp+var_4] +
push eax  +
push ebx  +
call sub_100F195  +
mov esi offset unk_10195C8 +
test eax eax +
jz loc_101518F  +
push [ebp+var_4]  +
mov edi 4000000h +
push ebx  +
mov ebx offset aDiskconfigurat +
push ebx  +
push offset aResolvepartiti  +
push edi  +
push esi  +
call sub_100DC59  +
add esp 18h +
jmp loc_10151AD  +
push ebx  +
mov ebx offset aDiskconfigurat +
push ebx  +
mov [ebp+var_4] edi +
push offset aResolveparti_0  +
mov edi 4000000h +
push edi  +
push esi  +
call sub_100DC59  +
add esp 14h +
xor eax eax +
cmp [ebp+var_4] eax +
jz loc_10151CC  +
cmp [ebp+var_8] 1 +
jnz loc_10151CC  +
push offset aCreatepartit_4  +
push [ebp+arg_0]  +
push ebx  +
push offset aResolveparti_1  +
push edi  +
push esi  +
jmp loc_1015230  +
cmp [ebp+var_8] eax +
jnz loc_10151D6  +
cmp [ebp+var_4] eax +
jnz loc_1015241  +
cmp [ebp+var_C] 1 +
jnz loc_1015241  +
mov ecx [ebp+arg_4] +
mov dword ptr [ecx] 4 +
cmp [ebp+var_4] eax +
jnz loc_10151FC  +
push offset aCreatepartit_4  +
push [ebp+arg_0]  +
push ebx  +
push offset aResolveparti_2  +
push edi  +
push esi  +
jmp loc_1015239  +
cmp [ebp+var_8] 1 +
jz loc_1015241  +
push offset aCreatepartit_4  +
push [ebp+arg_0]  +
push ebx  +
push offset aResolveparti_3  +
jmp loc_10151F8  +
cmp esi edi +
jnz loc_1015241  +
push offset aCreatepartit_4  +
push ebx  +
push offset aDiskconfigurat  +
push offset aResolveparti_4  +
push 4000000h  +
push offset unk_10195C8  +
mov eax [ebp+arg_4] +
mov dword ptr [eax] 4 +
call sub_100DC59  +
add esp 18h +
pop edi  +
xor eax eax +
pop esi  +
jmp loc_101524C  +
mov eax 80070057h +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
push 1  +
push [ebp+arg_4]  +
call sub_101406E  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
push 4  +
push [ebp+arg_4]  +
call sub_101406E  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_8]  +
push 1  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_101416B  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_8]  +
push 0  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_101416B  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push [ebp+arg_10]  +
mov ebx [ebp+arg_0] +
push 1  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
call sub_10141D7  +
pop ebx  +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push [ebp+arg_10]  +
mov ebx [ebp+arg_0] +
push 0  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
call sub_10141D7  +
pop ebx  +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 108h +
mov eax dword_101908C +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
mov ecx [ebp+arg_10] +
push esi  +
xor esi esi +
mov [ebp+var_FC] eax +
mov [ebp+var_108] ecx +
mov [ebp+var_F4] esi +
mov [ebp+var_F8] esi +
cmp eax esi +
jz loc_1015719  +
cmp [ebp+pv] esi +
jl loc_1015719  +
cmp [ebp+arg_8] esi +
jz loc_1015719  +
cmp ecx esi +
jz loc_1015719  +
push ebx  +
push esi  +
lea ecx [ebp+var_F8] +
push ecx  +
lea ecx [ebp+var_F4] +
push ecx  +
push [ebp+pv]  +
push eax  +
call sub_10167B3  +
mov ebx eax +
cmp ebx esi +
jl loc_10156EE  +
cmp [ebp+var_F4] esi +
jz loc_10156EE  +
cmp [ebp+var_F8] esi +
jz loc_1015704  +
push edi  +
push 6Ch  +
lea eax [ebp+var_E8] +
push esi  +
push eax  +
mov [ebp+var_EC] esi +
call memset  +
add esp 0Ch +
cmp [ebp+arg_8] 1 +
mov [ebp+var_100] esi +
mov edi 2000000h +
mov esi offset unk_10195C8 +
jnz loc_1015426  +
cmp [ebp+arg_C] 1 +
jnz loc_1015426  +
and [ebp+var_F0] 0 +
push offset aCreatepartit_5  +
push 4000000h  +
push esi  +
call sub_100DC59  +
add esp 0Ch +
lea eax [ebp+var_F0] +
push eax  +
push [ebp+pv]  +
call sub_101510B  +
mov ebx eax +
test ebx ebx +
jl loc_1015416  +
mov eax [ebp+var_F0] +
mov [ebp+arg_8] eax +
jmp loc_1015426  +
push ebx  +
push offset aCreatepartit_6  +
push edi  +
push esi  +
call sub_100DC59  +
add esp 10h +
test ebx ebx +
jl loc_10156DF  +
mov eax [ebp+arg_8] +
cmp eax 4 +
jz loc_1015470  +
cmp eax 5 +
jz loc_1015470  +
cmp eax 6 +
jz loc_1015470  +
xor ecx ecx +
inc ecx  +
cmp eax ecx +
jz loc_1015468  +
cmp eax 2 +
jz loc_1015468  +
cmp eax 3 +
jz loc_1015468  +
push eax  +
push offset aCreatepartit_7  +
push edi  +
push esi  +
call sub_100DC59  +
mov ebx 80042565h +
jmp loc_10156DC  +
mov [ebp+var_F0] ecx +
jmp loc_101547A  +
mov [ebp+var_F0] 2 +
lea eax [ebp+var_100] +
push eax  +
push [ebp+var_F4]  +
call sub_1016514  +
mov ebx eax +
test ebx ebx +
jl loc_10156DF  +
cmp [ebp+var_100] 1 +
jnz loc_10154C8  +
lea eax [ebp+var_F8] +
push eax  +
lea eax [ebp+var_F4] +
push eax  +
push [ebp+var_F0]  +
push [ebp+pv]  +
push [ebp+var_FC]  +
call sub_101742B  +
mov ebx eax +
jmp loc_10155CE  +
xor eax eax +
cmp [ebp+var_100] eax +
jnz loc_10155CE  +
push 6Ch  +
push eax  +
mov [ebp+var_74] eax +
lea eax [ebp+var_70] +
push eax  +
call memset  +
mov eax [ebp+var_F4] +
and [ebp+var_104] 0 +
mov ecx [eax] +
add esp 0Ch +
lea edx [ebp+var_74] +
push edx  +
push eax  +
call dword ptr [ecx+0Ch]  +
mov ebx eax +
test ebx ebx +
jl loc_10155B2  +
lea eax [ebp+var_104] +
push eax  +
push [ebp+pv]  +
push [ebp+var_FC]  +
call sub_1016DA4  +
mov ebx eax +
test ebx ebx +
jl loc_10155B2  +
mov eax [ebp+var_F0] +
cmp [ebp+var_30] eax +
jz loc_10155C5  +
cmp [ebp+var_104] 0 +
jnz loc_10155C5  +
push eax  +
push [ebp+pv]  +
push [ebp+var_FC]  +
call sub_10142E4  +
mov ebx eax +
test ebx ebx +
jl loc_1015589  +
mov eax [ebp+var_108] +
and dword ptr [eax] 0 +
and dword ptr [eax+4] 0 +
cmp [ebp+var_F0] 1 +
mov eax offset aMbr +
jz loc_1015579  +
mov eax offset aGpt +
push eax  +
push [ebp+pv]  +
push offset aCreatepartit_8  +
push 4000000h  +
jmp loc_10155BC  +
cmp [ebp+var_F0] 1 +
mov eax offset aMbr +
jz loc_101559C  +
mov eax offset aGpt +
push ebx  +
push eax  +
push [ebp+pv]  +
push offset aCreatepartit_9  +
push edi  +
push esi  +
call sub_100DC59  +
add esp 18h +
jmp loc_10155C5  +
push ebx  +
push [ebp+pv]  +
push offset aCreateparti_10  +
push edi  +
push esi  +
call sub_100DC59  +
add esp 14h +
lea eax [ebp+var_74] +
push eax  +
call sub_1016574  +
test ebx ebx +
jl loc_10156DF  +
mov eax [ebp+var_F4] +
mov ecx [eax] +
lea edx [ebp+var_EC] +
push edx  +
push eax  +
call dword ptr [ecx+0Ch]  +
mov ebx eax +
test ebx ebx +
jl loc_10156DF  +
mov eax [ebp+var_F0] +
cmp [ebp+var_A8] eax +
jnz loc_10156C8  +
push 78h  +
lea eax [ebp+var_7C] +
push 0  +
push eax  +
call memset  +
mov eax [ebp+var_F0] +
add esp 0Ch +
mov [ebp+var_7C] eax +
cmp eax 1 +
jnz loc_1015635  +
cmp [ebp+arg_8] 3 +
mov byte ptr [ebp+var_74+1] 0 +
setnz al  +
add al 5 +
mov byte ptr [ebp+var_74] al +
jmp loc_101568C  +
cmp eax 2 +
jnz loc_1015687  +
and [ebp+var_54] 0 +
cmp [ebp+arg_8] 5 +
mov [ebp+var_50] 80000000h +
jnz loc_1015652  +
mov esi offset dword_1001E08 +
jmp loc_1015662  +
cmp [ebp+arg_8] 6 +
mov esi offset dword_1001DF8 +
jz loc_1015662  +
mov esi offset dword_1001E18 +
lea edi [ebp+var_74] +
movs   +
movs   +
movs   +
lea eax [ebp+Uuid] +
push eax  +
movs   +
call ds:UuidCreate  +
test eax eax +
jz loc_101568C  +
jle loc_1015683  +
and eax 0FFFFh +
or eax 80070000h +
mov ebx eax +
jmp loc_101568C  +
mov ebx 80004005h +
test ebx ebx +
jl loc_10156DF  +
push [ebp+arg_18]  +
mov esi [ebp+var_108] +
push [ebp+arg_14]  +
lea eax [ebp+var_7C] +
push eax  +
xor eax eax +
cmp [ebp+arg_8] 2 +
setz al  +
push eax  +
push [ebp+var_F8]  +
push [ebp+var_F4]  +
push [ebp+pv]  +
push [ebp+var_FC]  +
call sub_1014F4F  +
mov ebx eax +
jmp loc_10156DF  +
push [ebp+pv]  +
mov ebx 80042565h +
push offset aCreateparti_11  +
push edi  +
push esi  +
call sub_100DC59  +
add esp 10h +
lea eax [ebp+var_EC] +
push eax  +
call sub_1016574  +
xor esi esi +
pop edi  +
mov eax [ebp+var_F8] +
cmp eax esi +
jz loc_1015704  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp+var_F8] esi +
mov eax [ebp+var_F4] +
cmp eax esi +
jz loc_1015714  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax ebx +
pop ebx  +
jmp loc_101571E  +
mov eax 80070057h +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop esi  +
call sub_100D691  +
leave   +
retn 1Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 234h +
mov eax dword_101908C +
xor eax ebp +
mov [ebp+var_4] eax +
and [ebp+var_21C] 0 +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
mov esi [ebp+arg_10] +
push edi  +
xor eax eax +
lea edi [ebp+var_218] +
stos   +
stos   +
stos   +
xor eax eax +
mov [ebp+var_22C] ecx +
mov [ebp+var_228] edx +
mov [ebp+var_230] esi +
mov [ebp+var_234] eax +
cmp ebx eax +
jz loc_1015B1E  +
cmp ecx eax +
jz loc_1015B1E  +
cmp edx eax +
jz loc_1015B1E  +
cmp [ebp+arg_4] eax +
jl loc_1015B1E  +
cmp [ebp+arg_8] eax +
jnz loc_10157AB  +
cmp [ebp+arg_C] eax +
jz loc_1015B1E  +
cmp esi eax +
jz loc_1015B1E  +
movzx eax word ptr [esi] +
xor ecx ecx +
cmp cx ax +
jz loc_10157DD  +
cmp ax 61h +
jb loc_10157C9  +
cmp ax 7Ah +
jbe loc_10157DD  +
cmp ax 41h +
jb loc_1015B1E  +
cmp ax 5Ah +
ja loc_1015B1E  +
xor ecx ecx +
cmp cx ax +
jnz loc_10157F0  +
mov [ebp+var_234] 1 +
jmp loc_101580A  +
cmp ax 61h +
jb loc_1015804  +
cmp ax 7Ah +
ja loc_1015804  +
movzx eax ax +
sub eax 20h +
jmp loc_1015807  +
movzx eax ax +
mov [esi] ax +
lea eax [ebp+var_21C] +
push eax  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push ebx  +
call sub_1016C12  +
mov edi eax +
test edi edi +
jl loc_1015B1A  +
push 4  +
pop ecx  +
lea edi [ebp+var_21C] +
mov esi offset dword_1001E38 +
xor eax eax +
cmps   +
jz loc_1015A42  +
and [ebp+var_22C] eax +
mov eax [ebx] +
lea ecx [ebp+var_22C] +
push ecx  +
push 0Bh  +
sub esp 10h +
mov edi esp +
lea esi [ebp+var_21C] +
movs   +
movs   +
movs   +
push ebx  +
movs   +
call dword ptr [eax+24h]  +
mov edi eax +
xor ebx ebx +
cmp edi ebx +
jl loc_1015B1A  +
mov eax [ebp+var_22C] +
cmp eax ebx +
jz loc_1015A38  +
lea edx [ebp+var_224] +
push edx  +
push offset dword_1009868  +
mov [ebp+var_224] ebx +
mov ecx [eax] +
push eax  +
call dword ptr [ecx]  +
mov edi eax +
cmp edi ebx +
jl loc_1015A1F  +
mov eax [ebp+var_224] +
cmp eax ebx +
jz loc_1015A1A  +
lea edx [ebp+var_228] +
push edx  +
lea edx [ebp+pv] +
push edx  +
mov [ebp+pv] ebx +
mov [ebp+var_228] ebx +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+18h]  +
mov edi eax +
cmp edi ebx +
jl loc_10159E8  +
cmp [ebp+var_228] ebx +
jz loc_1015983  +
mov eax [ebp+pv] +
cmp eax ebx +
jz loc_1015983  +
mov ecx [eax] +
mov eax ecx +
lea esi [eax+2] +
mov dx [eax] +
inc eax  +
inc eax  +
cmp dx bx +
jnz loc_10158FA  +
sub eax esi +
sar eax 1 +
cmp eax 3 +
jnz loc_1015983  +
movzx eax word ptr [ecx] +
push eax  +
call ds:iswalpha  +
pop ecx  +
test eax eax +
jz loc_1015983  +
mov eax [ebp+pv] +
mov esi [eax] +
mov ecx offset asc_1007828 +
lea eax [esi+2] +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_1015952  +
cmp dx bx +
jz loc_101594E  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_1015952  +
add eax 4 +
add ecx 4 +
cmp dx bx +
jnz loc_101592C  +
xor eax eax +
jmp loc_1015957  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
cmp eax ebx +
jnz loc_1015983  +
cmp [ebp+var_234] 1 +
jnz loc_1015972  +
mov ax [esi] +
mov ecx [ebp+var_230] +
mov [ecx] ax +
jmp loc_1015983  +
mov eax [ebp+var_224] +
mov ecx [eax] +
push 1  +
push esi  +
push eax  +
call dword ptr [ecx+20h]  +
mov edi eax +
cmp edi ebx +
jl loc_10159E8  +
cmp [ebp+var_234] ebx +
jnz loc_10159E8  +
xor eax eax +
push 206h  +
mov [ebp+var_20C] ax +
lea eax [ebp-20Ah] +
push ebx  +
push eax  +
call memset  +
mov eax [ebp+var_230] +
movzx eax word ptr [eax] +
push eax  +
push offset aC  +
lea eax [ebp+var_20C] +
push 104h  +
push eax  +
call sub_100EDF4  +
mov edi eax +
add esp 1Ch +
cmp edi ebx +
jl loc_10159E8  +
mov eax [ebp+var_224] +
mov ecx [eax] +
lea edx [ebp+var_20C] +
push edx  +
push eax  +
call dword ptr [ecx+14h]  +
mov edi eax +
cmp [ebp+pv] ebx +
jz loc_1015A02  +
push [ebp+pv]  +
call ds:CoTaskMemFree  +
mov [ebp+pv] ebx +
mov eax [ebp+var_224] +
cmp eax ebx +
jz loc_1015A1F  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp+var_224] ebx +
jmp loc_1015A1F  +
mov edi 8007000Dh +
mov eax [ebp+var_22C] +
cmp eax ebx +
jz loc_1015B1A  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_1015B1A  +
mov edi 8007000Dh +
jmp loc_1015B1A  +
mov eax [ebp+var_22C] +
mov ecx [eax] +
lea edx [ebp+var_224] +
push edx  +
lea edx [ebp+pv] +
push edx  +
xor ebx ebx +
push eax  +
mov [ebp+pv] ebx +
mov [ebp+var_224] ebx +
call dword ptr [ecx+18h]  +
mov edi eax +
cmp edi ebx +
jl loc_1015B1A  +
mov esi [ebp+pv] +
cmp esi ebx +
jz loc_1015B15  +
xor eax eax +
cmp [ebp+var_224] ebx +
jle loc_1015AFA  +
lea ecx [esi+18h] +
mov edx [ebp+arg_8] +
cmp edx [ecx] +
jnz loc_1015A9E  +
mov edi [ebp+arg_C] +
cmp edi [ecx+4] +
jz loc_1015AAA  +
inc eax  +
add ecx 50h +
cmp eax [ebp+var_224] +
jl loc_1015A8F  +
cmp eax [ebp+var_224] +
jge loc_1015AFA  +
imul eax eax +
mov eax [eax+esi+10h] +
cmp eax 3 +
jz loc_1015AC3  +
cmp eax 4 +
jnz loc_1015AFA  +
cmp [ebp+var_234] 1 +
mov eax [ebp+var_228] +
mov ecx [eax] +
jnz loc_1015AE4  +
push [ebp+var_230]  +
push [ebp+arg_C]  +
push edx  +
push eax  +
call dword ptr [ecx+28h]  +
jmp loc_1015AF6  +
mov esi [ebp+var_230] +
movzx esi word ptr [esi] +
push esi  +
push [ebp+arg_C]  +
push edx  +
push eax  +
call dword ptr [ecx+20h]  +
mov edi eax +
jmp loc_1015AFF  +
mov edi 80004005h +
cmp [ebp+pv] ebx +
jz loc_1015B1A  +
push [ebp+pv]  +
call ds:CoTaskMemFree  +
jmp loc_1015B1A  +
mov edi 80004005h +
mov eax edi +
jmp loc_1015B23  +
mov eax 80070057h +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100D691  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push ebx  +
xor ebx ebx +
push esi  +
mov [ebp+var_C] ebx +
mov [ebp+var_4] ebx +
mov [ebp+var_8] ebx +
cmp [ebp+arg_0] ebx +
jz loc_1015D18  +
cmp [ebp+arg_4] ebx +
jl loc_1015D18  +
cmp [ebp+arg_8] ebx +
jnz loc_1015B6E  +
cmp [ebp+arg_C] ebx +
jz loc_1015D18  +
mov esi [ebp+arg_10] +
cmp esi ebx +
jz loc_1015D18  +
movzx eax word ptr [esi] +
xor ecx ecx +
cmp cx ax +
jz loc_1015BA3  +
cmp ax 61h +
jb loc_1015B8F  +
cmp ax 7Ah +
jbe loc_1015BA3  +
cmp ax 41h +
jb loc_1015D18  +
cmp ax 5Ah +
ja loc_1015D18  +
push edi  +
push ebx  +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_C] +
push eax  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_10167B3  +
mov edi eax +
cmp edi ebx +
jl loc_1015CF5  +
mov ecx [ebp+var_C] +
mov edx [ebp+var_4] +
cmp ecx ebx +
jz loc_1015CF0  +
cmp edx ebx +
jz loc_1015CF0  +
lea eax [ebp+var_8] +
push eax  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1015732  +
mov edi eax +
cmp edi ebx +
jl loc_1015CF5  +
mov ecx [ebp+var_8] +
push 19h  +
mov [ebp+arg_10] ebx +
lea eax [ecx-61h] +
pop ebx  +
cmp ax bx +
ja loc_1015C10  +
add ecx 0FFE0h +
jmp loc_1015C13  +
movzx ecx cx +
movzx eax word ptr [esi] +
mov [ebp+var_8] ecx +
cmp ax 61h +
jb loc_1015C2D  +
cmp ax 7Ah +
ja loc_1015C2D  +
movzx eax ax +
sub eax 20h +
jmp loc_1015C30  +
movzx eax ax +
lea edx [ecx-43h] +
mov [esi] ax +
cmp dx 17h +
ja loc_1015C52  +
xor edx edx +
cmp dx ax +
jz loc_1015C48  +
cmp cx ax +
jnz loc_1015C52  +
xor edi edi +
mov [esi] cx +
jmp loc_1015CF5  +
xor ecx ecx +
cmp cx ax +
jnz loc_1015CCB  +
lea eax [ebp+arg_10] +
push eax  +
push [ebp+arg_0]  +
call sub_1014B02  +
mov edi eax +
test edi edi +
jl loc_1015CF5  +
mov edx [ebp+arg_10] +
lea eax [edx-61h] +
cmp ax bx +
movzx eax dx +
lea ecx [eax-20h] +
jbe loc_1015C82  +
mov ecx eax +
mov [esi] cx +
cmp cx 61h +
jb loc_1015CA1  +
lea ecx [edx-61h] +
cmp cx bx +
lea ecx [eax-20h] +
jbe loc_1015C98  +
mov ecx eax +
mov [esi] cx +
cmp cx 7Ah +
jbe loc_1015CCB  +
lea ecx [edx-61h] +
cmp cx bx +
lea ecx [eax-20h] +
jbe loc_1015CAE  +
mov ecx eax +
mov [esi] cx +
cmp cx 41h +
jb loc_1015CF0  +
add edx 0FFFFFF9Fh +
cmp dx bx +
ja loc_1015CC2  +
add eax 0FFFFFFE0h +
mov [esi] ax +
cmp ax 5Ah +
ja loc_1015CF0  +
movzx eax word ptr [esi] +
mov edx [ebp+var_4] +
mov ecx [ebp+var_C] +
mov [ebp+arg_10] eax +
lea eax [ebp+arg_10] +
push eax  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1015732  +
mov edi eax +
jmp loc_1015CF5  +
mov edi 8007000Dh +
mov eax [ebp+var_4] +
test eax eax +
jz loc_1015D06  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
and [ebp+var_4] 0 +
mov eax [ebp+var_C] +
test eax eax +
jz loc_1015D13  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax edi +
pop edi  +
jmp loc_1015D1D  +
mov eax 80070057h +
pop esi  +
pop ebx  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 80h +
mov eax dword_101908C +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
xor ebx ebx +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
xor eax eax +
mov [ebp+var_14] ebx +
lea edi [ebp+var_10] +
stos   +
stos   +
mov [ebp+var_38] esi +
mov [ebp+var_34] ebx +
mov [ebp+var_20] ebx +
mov [ebp+var_24] ebx +
stos   +
mov [ebp+var_1C] ebx +
mov [ebp+var_30] ebx +
cmp esi ebx +
jz loc_1016060  +
cmp [ebp+arg_4] ebx +
jl loc_1016060  +
cmp [ebp+arg_8] ebx +
jnz loc_1015D81  +
cmp [ebp+arg_C] ebx +
jz loc_1016060  +
cmp [ebp+arg_10] ebx +
jz loc_1016060  +
push ebx  +
lea eax [ebp+var_20] +
push eax  +
lea eax [ebp+var_34] +
push eax  +
push [ebp+arg_4]  +
push esi  +
call sub_10167B3  +
cmp eax ebx +
mov [ebp+var_18] eax +
jl loc_101602E  +
mov eax [ebp+var_20] +
cmp [ebp+var_34] ebx +
jz loc_1015DB3  +
cmp eax ebx +
jnz loc_1015DBA  +
mov [ebp+var_18] 8007000Dh +
cmp [ebp+var_18] ebx +
jl loc_101602E  +
push [ebp+arg_C]  +
lea ebx [ebp+var_4C] +
push [ebp+arg_8]  +
call sub_1014EB2  +
test eax eax +
jl loc_1015E16  +
xor ecx ecx +
inc ecx  +
cmp [ebp+var_4C] ecx +
jnz loc_1015E35  +
mov al [ebp+var_48] +
cmp al 12h +
jz loc_1015DF8  +
cmp al 27h +
jz loc_1015DF8  +
cmp al 84h +
jz loc_1015DF8  +
cmp al 0A0h +
jz loc_1015DF8  +
cmp al 0DEh +
jz loc_1015DF8  +
cmp al 0FEh +
jnz loc_1015E35  +
movzx eax al +
push eax  +
push offset aFormatpartitio  +
push 4000000h  +
push offset unk_10195C8  +
mov [ebp+var_30] ecx +
call sub_100DC59  +
add esp 10h +
mov eax [ebp+arg_10] +
push 3  +
pop ecx  +
sub eax ecx +
push 4  +
pop edi  +
jz loc_1015E49  +
dec eax  +
jz loc_1015E44  +
dec eax  +
jz loc_1015E3B  +
mov [ebp+var_18] 80004005h +
jmp loc_1015FBA  +
and [ebp+var_30] 0 +
jmp loc_1015E16  +
mov [ebp+var_2C] 2 +
jmp loc_1015E4C  +
mov [ebp+var_2C] ecx +
jmp loc_1015E4C  +
mov [ebp+var_2C] edi +
lea eax [ebp+var_1C] +
push eax  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push esi  +
call sub_1015B39  +
mov [ebp+var_18] eax +
test eax eax +
jl loc_1015FBA  +
mov eax [ebp+var_1C] +
cmp ax 61h +
jb loc_1015E79  +
cmp ax 7Ah +
jbe loc_1015E89  +
add eax 0FFFFFFBFh +
cmp ax 19h +
jbe loc_1015E89  +
mov [ebp+var_18] 80004005h +
cmp [ebp+var_18] 0 +
jl loc_1015FBA  +
lea eax [ebp+var_14] +
push eax  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push esi  +
call sub_1016C12  +
mov [ebp+var_18] eax +
test eax eax +
jl loc_1015FBA  +
mov ecx edi +
lea edi [ebp+var_14] +
mov esi offset dword_1001E38 +
xor eax eax +
cmps   +
jz loc_1015F64  +
mov eax [ebp+var_38] +
mov ecx [eax] +
lea edx [ebp+var_1C] +
push edx  +
push 0Bh  +
sub esp 10h +
mov edi esp +
lea esi [ebp+var_14] +
movs   +
movs   +
movs   +
xor ebx ebx +
push eax  +
mov [ebp+var_1C] ebx +
mov [ebp+var_28] ebx +
movs   +
call dword ptr [ecx+24h]  +
cmp eax ebx +
mov [ebp+var_18] eax +
jl loc_1015F45  +
mov eax [ebp+var_1C] +
cmp eax ebx +
jnz loc_1015EFD  +
mov [ebp+var_18] 8007000Dh +
cmp [ebp+var_18] ebx +
jl loc_1015F45  +
mov ecx [eax] +
lea edx [ebp+var_28] +
push edx  +
push offset dword_1009868  +
push eax  +
call dword ptr [ecx]  +
cmp eax ebx +
mov [ebp+var_18] eax +
jl loc_1015F45  +
mov eax [ebp+var_28] +
cmp eax ebx +
jnz loc_1015F25  +
mov [ebp+var_18] 8007000Dh +
cmp [ebp+var_18] ebx +
jl loc_1015F45  +
mov ecx [eax] +
lea edx [ebp+var_24] +
push edx  +
push ebx  +
push 1  +
push 1  +
push ebx  +
push offset Class  +
push [ebp+var_2C]  +
push eax  +
call dword ptr [ecx+10h]  +
mov [ebp+var_18] eax +
mov eax [ebp+var_28] +
cmp eax ebx +
jz loc_1015F55  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp+var_28] ebx +
mov eax [ebp+var_1C] +
cmp eax ebx +
jz loc_1015F8C  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_1015F8C  +
mov eax [ebp+var_20] +
mov ecx [eax] +
lea edx [ebp+var_24] +
push edx  +
push 0  +
push 1  +
push 1  +
push 0  +
push offset Class  +
push [ebp+var_2C]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push eax  +
call dword ptr [ecx+2Ch]  +
mov [ebp+var_18] eax +
xor ebx ebx +
cmp [ebp+var_18] ebx +
jl loc_1015FBA  +
mov eax [ebp+var_24] +
test eax eax +
jz loc_1015FBA  +
lea edx [ebp+var_80] +
push edx  +
lea edx [ebp+var_1C] +
push edx  +
mov [ebp+var_1C] 80004005h +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+10h]  +
mov [ebp+var_18] eax +
test eax eax +
jl loc_1015FBA  +
mov eax [ebp+var_1C] +
mov [ebp+var_18] eax +
cmp [ebp+var_30] 0 +
jz loc_101602C  +
push [ebp+arg_C]  +
mov eax [ebp+var_20] +
push [ebp+arg_8]  +
lea ebx [ebp+var_60] +
call sub_1014EB2  +
mov esi eax +
test esi esi +
jl loc_1016020  +
mov eax ebx +
push eax  +
lea eax [ebp+var_4C] +
push eax  +
call sub_1016759  +
test eax eax +
jnz loc_1016020  +
push offset aFormatpartit_0  +
push 4000000h  +
push offset unk_10195C8  +
call sub_100DC59  +
add esp 0Ch +
push 1  +
sub esp 14h +
push 5  +
pop ecx  +
mov edi esp +
push [ebp+arg_C]  +
lea esi [ebp+var_4C] +
push [ebp+arg_8]  +
movs   +
push [ebp+arg_4]  +
push [ebp+var_38]  +
call sub_1014CF0  +
mov esi eax +
xor ebx ebx +
cmp [ebp+var_18] ebx +
jl loc_101602E  +
mov [ebp+var_18] esi +
jmp loc_101602E  +
xor ebx ebx +
mov eax [ebp+var_24] +
cmp eax ebx +
jz loc_101603E  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp+var_24] ebx +
mov eax [ebp+var_20] +
cmp eax ebx +
jz loc_101604E  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp+var_20] ebx +
mov eax [ebp+var_34] +
cmp eax ebx +
jz loc_101605B  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+var_18] +
jmp loc_1016065  +
mov eax 80070057h +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100D691  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
mov eax dword_101908C +
xor eax ebp +
mov [ebp+var_4] eax +
mov ecx ds:dword_100442C +
mov eax [ebp+arg_0] +
push ebx  +
mov dword ptr [ebp+RootPathName] ecx +
mov ecx ds:dword_1004430 +
xor ebx ebx +
push edi  +
mov edi [ebp+arg_10] +
mov [ebp+var_8] ecx +
cmp eax ebx +
jz loc_101614E  +
cmp [ebp+arg_4] ebx +
jl loc_101614E  +
cmp [ebp+arg_8] ebx +
jnz loc_10160C8  +
cmp [ebp+arg_C] ebx +
jz loc_101614E  +
push esi  +
xor ecx ecx +
mov [ebp+RootPathName] cx +
lea ecx [ebp+RootPathName] +
push ecx  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push eax  +
call sub_1015B39  +
mov esi eax +
cmp esi ebx +
jl loc_1016149  +
cmp [ebp+RootPathName] 61h +
jb loc_10160F6  +
cmp [ebp+RootPathName] 7Ah +
jbe loc_1016102  +
mov eax dword ptr [ebp+RootPathName] +
add eax 0FFFFFFBFh +
cmp ax 19h +
ja loc_1016144  +
push edi  +
lea eax [ebp+RootPathName] +
push eax  +
call ds:SetVolumeLabelW  +
test eax eax +
jnz loc_1016149  +
mov ebx ds:GetLastError +
call ebx  +
mov edi 0FFFFh +
mov esi 80070000h +
test eax eax +
jle loc_101612D  +
and eax edi +
or eax esi +
test eax eax +
jge loc_101613D  +
call ebx  +
test eax eax +
jle loc_1016139  +
and eax edi +
or eax esi +
mov esi eax +
jmp loc_1016149  +
mov esi 80004005h +
jmp loc_1016149  +
mov esi 8007000Dh +
mov eax esi +
pop esi  +
jmp loc_1016153  +
mov eax 80070057h +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop ebx  +
call sub_100D691  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+ppv] 0 +
push ebx  +
mov ebx [ebp+arg_0] +
test ebx ebx +
jnz loc_1016184  +
mov eax 80070057h +
jmp loc_1016261  +
mov eax dword_10195CC +
test eax eax +
jz loc_10161A1  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
mov eax dword_10195CC +
mov [ebx] eax +
xor eax eax +
jmp loc_1016261  +
and dword ptr [ebx] 0 +
push esi  +
push edi  +
push offset aInitvdsservice  +
mov edi 4000000h +
push edi  +
mov esi offset unk_10195C8 +
push esi  +
call sub_100DC59  +
add esp 0Ch +
lea eax [ebp+ppv] +
push eax  +
push offset riid  +
push 4  +
push 0  +
push offset rclsid  +
call ds:CoCreateInstance  +
mov [ebp+arg_0] eax +
test eax eax +
jl loc_1016239  +
push offset aInitvdsservi_0  +
push edi  +
push esi  +
call sub_100DC59  +
mov eax [ebp+ppv] +
mov ecx [eax] +
add esp 0Ch +
push offset dword_10195CC  +
push 0  +
push eax  +
call dword ptr [ecx+0Ch]  +
mov [ebp+arg_0] eax +
test eax eax +
jl loc_1016239  +
mov eax dword_10195CC +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+10h]  +
mov [ebp+arg_0] eax +
test eax eax +
jl loc_1016239  +
push offset aInitvdsservi_1  +
push edi  +
push esi  +
call sub_100DC59  +
mov eax dword_10195CC +
mov ecx [eax] +
add esp 0Ch +
push eax  +
call dword ptr [ecx+4]  +
mov eax dword_10195CC +
mov [ebx] eax +
jmp loc_101624F  +
push [ebp+arg_0]  +
push offset aInitvdsservi_2  +
push 2000000h  +
push esi  +
call sub_100DC59  +
add esp 10h +
mov eax [ebp+ppv] +
pop edi  +
pop esi  +
test eax eax +
jz loc_101625E  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+arg_0] +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax [ebp+pv] +
push ebx  +
xor ebx ebx +
push esi  +
push edi  +
mov [ebp+var_4] ebx +
cmp eax ebx +
jz loc_101636B  +
mov edi [ebp+arg_8] +
cmp edi ebx +
jz loc_101636B  +
mov esi [ebp+arg_C] +
cmp esi ebx +
jz loc_101636B  +
mov ecx [ebp+arg_4] +
cmp ecx ebx +
jz loc_10162A4  +
mov [ecx] ebx +
mov ecx [eax] +
lea edx [ebp+var_4] +
push edx  +
push offset dword_1009558  +
push eax  +
call dword ptr [ecx]  +
cmp eax ebx +
jl loc_1016370  +
mov eax [ebp+var_4] +
cmp eax ebx +
jz loc_1016364  +
lea edx [ebp+arg_C] +
push edx  +
lea edx [ebp+pv] +
push edx  +
mov [ebp+arg_C] ebx +
mov [ebp+pv] ebx +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+10h]  +
cmp eax ebx +
mov [ebp+var_8] eax +
jl loc_1016339  +
mov [ebp+arg_8] ebx +
mov ebx [ebp+arg_C] +
xor edx edx +
test ebx ebx +
jle loc_101632E  +
mov eax [ebp+pv] +
add eax 20h +
test edx edx +
jnz loc_101632E  +
cmp dword ptr [eax-20h] 1 +
jnz loc_1016321  +
mov cl [eax] +
cmp cl 5 +
jz loc_1016308  +
cmp cl 0Fh +
jnz loc_1016321  +
mov ecx [eax-10h] +
mov [edi] ecx +
mov ecx [eax-0Ch] +
mov [edi+4] ecx +
mov ecx [eax-8] +
mov [esi] ecx +
mov ecx [eax-4] +
xor edx edx +
mov [esi+4] ecx +
inc edx  +
inc [ebp+arg_8]  +
add eax 90h +
cmp [ebp+arg_8] ebx +
jl loc_10162F2  +
mov eax [ebp+arg_4] +
xor ebx ebx +
test eax eax +
jz loc_1016339  +
mov [eax] edx +
cmp [ebp+pv] ebx +
jz loc_101634A  +
push [ebp+pv]  +
call ds:CoTaskMemFree  +
mov [ebp+pv] ebx +
mov eax [ebp+var_4] +
cmp eax ebx +
jz loc_1016357  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+var_8] +
dec eax  +
neg eax  +
sbb eax eax +
and eax [ebp+var_8] +
jmp loc_1016370  +
mov eax 8007000Dh +
jmp loc_1016370  +
mov eax 80070057h +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push esi  +
push edi  +
xor edi edi +
mov [ebp+var_8] edi +
mov [ebp+var_4] edi +
mov [ebp+var_10] edi +
mov [ebp+var_C] edi +
cmp [ebp+pv] edi +
jz loc_10163F6  +
cmp [ebp+arg_4] edi +
jnz loc_10163A3  +
cmp [ebp+arg_8] edi +
jz loc_10163F6  +
mov esi [ebp+arg_C] +
cmp esi edi +
jz loc_10163F6  +
lea eax [ebp+var_10] +
push eax  +
lea eax [ebp+var_8] +
push eax  +
push edi  +
push [ebp+pv]  +
mov [esi] edi +
call sub_101626B  +
cmp eax edi +
jl loc_10163FB  +
push ebx  +
mov ebx [ebp+var_4] +
cmp [ebp+arg_8] ebx +
jb loc_10163EF  +
mov ecx [ebp+var_8] +
ja loc_10163D4  +
cmp [ebp+arg_4] ecx +
jb loc_10163EF  +
mov edx [ebp+var_10] +
add edx ecx +
mov ecx [ebp+var_C] +
adc ecx ebx +
cmp [ebp+arg_8] ecx +
ja loc_10163EF  +
jb loc_10163EA  +
cmp [ebp+arg_4] edx +
jnb loc_10163EF  +
xor ecx ecx +
inc ecx  +
jmp loc_10163F1  +
xor ecx ecx +
mov [esi] ecx +
pop ebx  +
jmp loc_10163FB  +
mov eax 80070057h +
pop edi  +
pop esi  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
push ebx  +
xor ebx ebx +
push esi  +
mov [ebp+var_10] ebx +
mov [ebp+var_C] ebx +
mov [ebp+var_18] ebx +
mov [ebp+var_14] ebx +
cmp [ebp+pv] ebx +
jz loc_1016504  +
mov esi [ebp+arg_4] +
cmp esi ebx +
jz loc_1016504  +
cmp [ebp+arg_8] ebx +
jz loc_1016504  +
lea eax [ebp+var_18] +
push eax  +
lea eax [ebp+var_10] +
push eax  +
push ebx  +
push [ebp+pv]  +
call sub_101626B  +
cmp eax ebx +
mov [ebp+arg_4] eax +
jl loc_10164FF  +
cmp [ebp+var_10] ebx +
jnz loc_1016465  +
cmp [ebp+var_C] ebx +
jz loc_10164FF  +
cmp [ebp+var_18] ebx +
jnz loc_1016473  +
cmp [ebp+var_14] ebx +
jz loc_10164FF  +
mov eax [esi] +
lea ecx [ebp+var_4] +
push ecx  +
lea ecx [ebp+pv] +
push ecx  +
push esi  +
mov [ebp+pv] ebx +
mov [ebp+var_4] ebx +
call dword ptr [eax+10h]  +
cmp eax ebx +
mov [ebp+arg_4] eax +
jl loc_10164F1  +
mov edx [ebp+pv] +
cmp edx ebx +
jz loc_10164EA  +
mov eax [ebp+var_4] +
cmp eax ebx +
jle loc_10164F1  +
add edx 10h +
mov [ebp+var_8] eax +
push edi  +
mov al [edx+10h] +
cmp al 5 +
jz loc_10164DC  +
cmp al 0Fh +
jz loc_10164DC  +
mov esi [edx+4] +
mov edi [edx] +
cmp esi [ebp+var_C] +
jb loc_10164DC  +
ja loc_10164BF  +
cmp edi [ebp+var_10] +
jb loc_10164DC  +
mov ecx [ebp+var_18] +
add ecx [ebp+var_10] +
mov eax [ebp+var_14] +
adc eax [ebp+var_C] +
cmp esi eax +
ja loc_10164DA  +
jb loc_10164D5  +
cmp edi ecx +
jnb loc_10164DA  +
mov eax [ebp+arg_8] +
inc dword ptr [eax]  +
xor ebx ebx +
add edx 90h +
dec [ebp+var_8]  +
jnz loc_10164A3  +
pop edi  +
jmp loc_10164F1  +
mov [ebp+arg_4] 8007000Dh +
cmp [ebp+pv] ebx +
jz loc_10164FF  +
push [ebp+pv]  +
call ds:CoTaskMemFree  +
mov eax [ebp+arg_4] +
jmp loc_1016509  +
mov eax 80070057h +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ebp+arg_0] +
and [ebp+var_4] 0 +
push esi  +
test eax eax +
jz loc_1016565  +
mov esi [ebp+arg_4] +
test esi esi +
jz loc_1016565  +
mov ecx [eax] +
push edi  +
lea edx [ebp+var_4] +
push edx  +
push eax  +
call dword ptr [ecx+10h]  +
mov edi eax +
mov eax [ebp+var_4] +
cmp edi 80042417h +
jnz loc_1016553  +
test eax eax +
jnz loc_1016553  +
mov dword ptr [esi] 1 +
xor edi edi +
jmp loc_1016560  +
and dword ptr [esi] 0 +
test eax eax +
jz loc_1016560  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax edi +
pop edi  +
jmp loc_101656A  +
mov eax 80070057h +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
xor ebx ebx +
cmp esi ebx +
jz loc_10165CD  +
mov eax [esi+58h] +
push edi  +
mov edi ds:CoTaskMemFree +
cmp eax ebx +
jz loc_1016598  +
push eax  +
call edi  +
mov [esi+58h] ebx +
mov eax [esi+5Ch] +
cmp eax ebx +
jz loc_10165A5  +
push eax  +
call edi  +
mov [esi+5Ch] ebx +
mov eax [esi+60h] +
cmp eax ebx +
jz loc_10165B2  +
push eax  +
call edi  +
mov [esi+60h] ebx +
mov eax [esi+64h] +
cmp eax ebx +
jz loc_10165BF  +
push eax  +
call edi  +
mov [esi+64h] ebx +
mov eax [esi+68h] +
cmp eax ebx +
jz loc_10165CC  +
push eax  +
call edi  +
mov [esi+68h] ebx +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
test esi esi +
jz loc_1016609  +
mov eax [esi+10h] +
push edi  +
mov edi ds:CoTaskMemFree +
test eax eax +
jz loc_10165FA  +
push eax  +
call edi  +
and dword ptr [esi+10h] 0 +
mov eax [esi+24h] +
test eax eax +
jz loc_1016608  +
push eax  +
call edi  +
and dword ptr [esi+24h] 0 +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 8Ch +
mov eax dword_101908C +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push edi  +
xor edi edi +
mov [ebp+var_84] ecx +
mov [ebp+lpString1] eax +
mov [ebp+var_78] edi +
mov [ebp+var_7C] edi +
mov [ebp+var_8C] edi +
cmp ecx edi +
jz loc_1016740  +
cmp eax edi +
jz loc_1016740  +
cmp ebx edi +
jz loc_1016740  +
push esi  +
jmp loc_1016667  +
mov ecx [ebp+var_84] +
cmp [ebp+var_7C] edi +
jnz loc_101673A  +
mov eax [ecx] +
lea edx [ebp+var_8C] +
push edx  +
lea edx [ebp+var_80] +
push edx  +
xor esi esi +
inc esi  +
push esi  +
push ecx  +
mov [ebp+var_80] edi +
call dword ptr [eax+0Ch]  +
mov [ebp+var_78] eax +
cmp eax esi +
jnz loc_1016692  +
mov [ebp+var_7C] esi +
cmp eax edi +
jl loc_101673A  +
mov eax [ebp+var_80] +
cmp eax edi +
jz loc_1016731  +
mov ecx [eax] +
push ebx  +
push offset dword_1009528  +
push eax  +
call dword ptr [ecx]  +
cmp eax edi +
mov [ebp+var_78] eax +
jl loc_1016724  +
mov esi [ebx] +
cmp esi edi +
jz loc_1016724  +
push 6Ch  +
lea eax [ebp+var_70] +
push edi  +
push eax  +
mov [ebp+var_74] edi +
call memset  +
mov eax [esi] +
add esp 0Ch +
lea ecx [ebp+var_74] +
push ecx  +
push esi  +
call dword ptr [eax+0Ch]  +
cmp eax edi +
mov [ebp+var_78] eax +
jl loc_1016711  +
cmp [ebp+lpString2] edi +
jz loc_1016708  +
push 0FFFFFFFFh  +
push [ebp+lpString2]  +
xor esi esi +
push 0FFFFFFFFh  +
push [ebp+lpString1]  +
inc esi  +
push esi  +
push 409h  +
call ds:CompareStringW  +
dec eax  +
dec eax  +
jnz loc_1016708  +
mov [ebp+var_7C] esi +
lea eax [ebp+var_74] +
push eax  +
call sub_1016574  +
cmp [ebp+var_7C] edi +
jnz loc_1016724  +
mov eax [ebx] +
cmp eax edi +
jz loc_1016724  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebx] edi +
mov eax [ebp+var_80] +
cmp eax edi +
jz loc_1016731  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
cmp [ebp+var_78] edi +
jge loc_1016661  +
mov eax [ebp+var_78] +
pop esi  +
jmp loc_1016745  +
mov eax 80070057h +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop edi  +
call sub_100D691  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
test edx edx +
jz loc_10167A0  +
mov eax [ebp+arg_4] +
test eax eax +
jz loc_10167A0  +
mov ecx [edx] +
cmp ecx 1 +
jnz loc_1016784  +
cmp [eax] ecx +
jnz loc_10167A8  +
mov cl [edx+4] +
cmp cl [eax+4] +
jnz loc_10167A8  +
xor eax eax +
inc eax  +
jmp loc_10167AA  +
cmp ecx 2 +
jnz loc_10167A8  +
cmp [eax] ecx +
jnz loc_10167A8  +
push esi  +
push edi  +
push 4  +
pop ecx  +
lea edi [eax+4] +
lea esi [edx+4] +
xor eax eax +
cmps   +
pop edi  +
pop esi  +
jmp loc_101677D  +
push 57h  +
call ds:SetLastError  +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 248h +
mov eax dword_101908C +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push ebx  +
mov ebx [ebp+arg_8] +
push esi  +
push edi  +
mov edi [ebp+arg_10] +
mov [ebp+var_230] eax +
mov eax [ebp+arg_C] +
xor esi esi +
push 204h  +
mov [ebp+var_21C] eax +
lea eax [ebp+var_208] +
push esi  +
push eax  +
mov [ebp+var_210] ebx +
mov [ebp+var_234] edi +
mov dword ptr [ebp+var_20C] esi +
call memset  +
add esp 0Ch +
cmp [ebp+var_230] esi +
jz loc_1016BF7  +
cmp dword ptr [ebp+arg_4] esi +
jl loc_1016BF7  +
cmp ebx esi +
jz loc_1016BF7  +
mov eax [ebp+var_21C] +
mov [ebx] esi +
cmp eax esi +
jz loc_1016837  +
mov [eax] esi +
cmp edi esi +
jz loc_101683D  +
mov [edi] esi +
push dword ptr [ebp+arg_4]  +
lea eax [ebp+var_20C] +
push offset a?Physicaldrive  +
push 104h  +
push eax  +
call sub_100EDF4  +
mov ebx eax +
add esp 10h +
cmp ebx esi +
jl loc_1016BAF  +
mov eax [ebp+var_210] +
mov edi offset unk_10195C8 +
cmp [eax] esi +
jnz loc_1016ACB  +
push offset aGetdiskQueryin  +
push 4000000h  +
push edi  +
mov [ebp+var_214] esi +
mov [ebp+var_23C] esi +
mov [ebp+var_248] esi +
call sub_100DC59  +
mov eax [ebp+var_230] +
mov ecx [eax] +
add esp 0Ch +
lea edx [ebp+var_214] +
push edx  +
push 1  +
push eax  +
call dword ptr [ecx+18h]  +
mov ebx eax +
cmp ebx esi +
jl loc_1016ABB  +
push offset aGetdiskFinishe  +
push 4000000h  +
push edi  +
call sub_100DC59  +
add esp 0Ch +
cmp [ebp+var_23C] esi +
jnz loc_1016ABB  +
mov eax [ebp+var_214] +
lea edx [ebp+var_248] +
push edx  +
lea edx [ebp+var_238] +
push edx  +
push 1  +
mov [ebp+var_238] esi +
mov [ebp+var_224] esi +
mov [ebp+var_218] esi +
mov [ebp+var_220] esi +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+0Ch]  +
mov ebx eax +
cmp ebx 1 +
jz loc_1016ABB  +
cmp ebx esi +
jl loc_1016A61  +
mov eax [ebp+var_238] +
mov ecx [eax] +
lea edx [ebp+var_224] +
push edx  +
push offset dword_10094D8  +
push eax  +
call dword ptr [ecx]  +
mov ebx eax +
cmp ebx esi +
jl loc_1016A61  +
mov eax [ebp+var_224] +
mov ecx [eax] +
lea edx [ebp+var_218] +
push edx  +
push offset dword_10094F8  +
push eax  +
call dword ptr [ecx]  +
mov ebx eax +
cmp ebx esi +
jl loc_1016A61  +
mov eax [ebp+var_218] +
mov ecx [eax] +
lea edx [ebp+var_220] +
push edx  +
push eax  +
call dword ptr [ecx+0Ch]  +
mov ebx eax +
jmp loc_1016A59  +
cmp [ebp+var_23C] esi +
jnz loc_1016A61  +
mov eax [ebp+var_220] +
lea edx [ebp+var_244] +
push edx  +
lea edx [ebp+var_240] +
push edx  +
push 1  +
mov [ebp+var_240] esi +
mov [ebp+var_244] esi +
mov [ebp+var_22C] esi +
mov [ebp+var_228] esi +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+0Ch]  +
mov ebx eax +
cmp ebx 1 +
jz loc_1016A61  +
cmp ebx esi +
jl loc_1016A33  +
mov eax [ebp+var_240] +
mov ecx [eax] +
lea edx [ebp+var_22C] +
push edx  +
push offset loc_1009508  +
push eax  +
call dword ptr [ecx]  +
mov ebx eax +
cmp ebx esi +
jl loc_1016A33  +
mov eax [ebp+var_22C] +
mov ecx [eax] +
lea edx [ebp+var_228] +
push edx  +
push eax  +
call dword ptr [ecx+18h]  +
mov ebx eax +
cmp ebx esi +
jl loc_1016A33  +
mov ebx [ebp+var_210] +
mov ecx [ebp+var_228] +
lea eax [ebp+var_20C] +
push eax  +
call sub_1016613  +
mov ebx eax +
cmp ebx esi +
jl loc_1016A33  +
mov eax [ebp+var_210] +
cmp [eax] esi +
jz loc_1016A33  +
mov [ebp+var_23C] 1 +
mov eax [ebp+var_228] +
cmp eax esi +
jz loc_1016A49  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp+var_228] esi +
mov eax [ebp+var_22C] +
cmp eax esi +
jz loc_1016A59  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
cmp ebx esi +
jge loc_101697C  +
mov eax [ebp+var_220] +
cmp eax esi +
jz loc_1016A77  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp+var_220] esi +
mov eax [ebp+var_218] +
cmp eax esi +
jz loc_1016A8D  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp+var_218] esi +
mov eax [ebp+var_224] +
cmp eax esi +
jz loc_1016AA3  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp+var_224] esi +
mov eax [ebp+var_238] +
cmp eax esi +
jz loc_1016AB3  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
cmp ebx esi +
jge loc_10168CD  +
mov eax [ebp+var_214] +
cmp eax esi +
jz loc_1016ACB  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
cmp ebx esi +
jl loc_1016BA9  +
mov eax [ebp+var_210] +
cmp [eax] esi +
jnz loc_1016B4C  +
push offset aGetdiskQuery_0  +
push 4000000h  +
push edi  +
mov [ebp+var_214] esi +
call sub_100DC59  +
mov eax [ebp+var_230] +
mov ecx [eax] +
add esp 0Ch +
lea edx [ebp+var_214] +
push edx  +
push eax  +
call dword ptr [ecx+20h]  +
mov ebx eax +
cmp ebx esi +
jl loc_1016B3C  +
push offset aGetdiskFinis_0  +
push 4000000h  +
push edi  +
call sub_100DC59  +
mov ebx [ebp+var_210] +
mov ecx [ebp+var_214] +
add esp 0Ch +
lea eax [ebp+var_20C] +
push eax  +
call sub_1016613  +
mov ebx eax +
mov eax [ebp+var_214] +
cmp eax esi +
jz loc_1016B4C  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
cmp ebx esi +
jl loc_1016BA9  +
mov eax [ebp+var_210] +
mov eax [eax] +
cmp eax esi +
jnz loc_1016B61  +
mov ebx 80042405h +
cmp ebx esi +
jl loc_1016BA9  +
cmp [ebp+var_21C] esi +
jz loc_1016B7F  +
push [ebp+var_21C]  +
mov ecx [eax] +
push offset dword_1009558  +
push eax  +
call dword ptr [ecx]  +
mov ebx eax +
cmp ebx esi +
jl loc_1016BA9  +
cmp [ebp+var_234] esi +
jz loc_1016BA5  +
push [ebp+var_234]  +
mov eax [ebp+var_210] +
mov eax [eax] +
mov ecx [eax] +
push offset dword_1009568  +
push eax  +
call dword ptr [ecx]  +
mov ebx eax +
cmp ebx esi +
jge loc_1016BF3  +
mov edi [ebp+var_234] +
cmp edi esi +
jz loc_1016BC3  +
mov eax [edi] +
cmp eax esi +
jz loc_1016BC1  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [edi] esi +
mov [edi] esi +
mov edi [ebp+var_21C] +
cmp edi esi +
jz loc_1016BDD  +
mov eax [edi] +
cmp eax esi +
jz loc_1016BDB  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [edi] esi +
mov [edi] esi +
mov edi [ebp+var_210] +
mov eax [edi] +
cmp eax esi +
jz loc_1016BF1  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [edi] esi +
mov [edi] esi +
mov eax ebx +
jmp loc_1016BFC  +
mov eax 80070057h +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100D691  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
push ebx  +
xor ebx ebx +
push esi  +
cmp [ebp+pv] ebx +
jz loc_1016D92  +
cmp [ebp+arg_4] ebx +
jl loc_1016D92  +
cmp [ebp+arg_8] ebx +
jnz loc_1016C3E  +
cmp [ebp+arg_C] ebx +
jz loc_1016D92  +
cmp [ebp+arg_10] ebx +
jz loc_1016D92  +
push ebx  +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_8] +
push eax  +
push [ebp+arg_4]  +
mov [ebp+var_8] ebx +
push [ebp+pv]  +
mov [ebp+var_4] ebx +
call sub_10167B3  +
mov esi eax +
cmp esi ebx +
jl loc_1016D97  +
cmp [ebp+var_8] ebx +
jz loc_1016D97  +
mov eax [ebp+var_4] +
cmp eax ebx +
jz loc_1016D97  +
lea edx [ebp+var_10] +
push edx  +
lea edx [ebp+arg_4] +
push edx  +
mov [ebp+arg_4] ebx +
mov [ebp+pv] ebx +
mov [ebp+var_C] ebx +
mov [ebp+var_10] ebx +
mov ecx [eax] +
push eax  +
mov [ebp+var_18] ebx +
mov [ebp+var_14] ebx +
call dword ptr [ecx+10h]  +
mov esi eax +
cmp esi ebx +
jl loc_1016D62  +
mov eax [ebp+arg_4] +
cmp eax ebx +
jz loc_1016D73  +
mov ecx [ebp+var_10] +
cmp ecx ebx +
jle loc_1016CE1  +
add eax 18h +
mov edx [eax-8] +
cmp edx [ebp+arg_8] +
jnz loc_1016CD9  +
mov edx [eax-4] +
cmp edx [ebp+arg_C] +
jnz loc_1016CD9  +
mov edx [eax] +
mov [ebp+var_18] edx +
mov edx [eax+4] +
mov [ebp+var_14] edx +
add eax 90h +
dec ecx  +
jnz loc_1016CBE  +
mov eax [ebp+var_8] +
mov ecx [eax] +
lea edx [ebp+var_C] +
push edx  +
lea edx [ebp+pv] +
push edx  +
push eax  +
call dword ptr [ecx+18h]  +
mov esi eax +
cmp esi ebx +
jl loc_1016D62  +
mov ecx [ebp+pv] +
cmp ecx ebx +
jz loc_1016D62  +
xor eax eax +
xor edx edx +
cmp [ebp+var_C] ebx +
jle loc_1016D46  +
add ecx 20h +
push edi  +
cmp eax ebx +
jnz loc_1016D45  +
mov esi [ecx-8] +
cmp esi [ebp+arg_8] +
jnz loc_1016D3C  +
mov esi [ecx-4] +
cmp esi [ebp+arg_C] +
jnz loc_1016D3C  +
mov esi [ecx] +
cmp esi [ebp+var_18] +
jnz loc_1016D3C  +
mov esi [ecx+4] +
cmp esi [ebp+var_14] +
jnz loc_1016D3C  +
mov edi [ebp+arg_10] +
lea esi [ecx+8] +
movs   +
movs   +
movs   +
xor eax eax +
movs   +
inc eax  +
inc edx  +
add ecx 50h +
cmp edx [ebp+var_C] +
jl loc_1016D0C  +
pop edi  +
push [ebp+pv]  +
neg eax  +
sbb eax eax +
and eax 7FFFBFFBh +
add eax 80004005h +
mov esi eax +
call ds:CoTaskMemFree  +
mov [ebp+pv] ebx +
cmp [ebp+arg_4] ebx +
jz loc_1016D73  +
push [ebp+arg_4]  +
call ds:CoTaskMemFree  +
mov [ebp+arg_4] ebx +
mov eax [ebp+var_4] +
cmp eax ebx +
jz loc_1016D83  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp+var_4] ebx +
mov eax [ebp+var_8] +
cmp eax ebx +
jz loc_1016D97  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_1016D97  +
mov esi 80070057h +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push esi  +
xor esi esi +
mov [ebp+var_8] esi +
mov [ebp+var_4] esi +
cmp [ebp+arg_0] esi +
jz loc_1016E2C  +
cmp [ebp+pv] esi +
jl loc_1016E2C  +
cmp [ebp+arg_8] esi +
jz loc_1016E2C  +
push edi  +
push esi  +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_8] +
push eax  +
push [ebp+pv]  +
push [ebp+arg_0]  +
call sub_10167B3  +
mov edi eax +
cmp edi esi +
jl loc_1016E0A  +
cmp [ebp+var_8] esi +
jz loc_1016E0A  +
mov eax [ebp+var_4] +
cmp eax esi +
jz loc_1016E1A  +
push [ebp+arg_8]  +
lea edx [ebp+pv] +
push edx  +
mov [ebp+pv] esi +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+10h]  +
mov edi eax +
cmp [ebp+pv] esi +
jz loc_1016E0A  +
push [ebp+pv]  +
call ds:CoTaskMemFree  +
mov eax [ebp+var_4] +
cmp eax esi +
jz loc_1016E1A  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp+var_4] esi +
mov eax [ebp+var_8] +
cmp eax esi +
jz loc_1016E27  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax edi +
pop edi  +
jmp loc_1016E31  +
mov eax 80070057h +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 7Ch +
mov eax dword_101908C +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
mov ecx [ebp+arg_8] +
push esi  +
xor esi esi +
mov [ebp+var_7C] ecx +
mov [ebp+var_78] esi +
cmp eax esi +
jz loc_1016ED3  +
cmp [ebp+arg_4] esi +
jl loc_1016ED3  +
cmp ecx esi +
jz loc_1016ED3  +
push ebx  +
push edi  +
push esi  +
push esi  +
lea ecx [ebp+var_78] +
push ecx  +
push [ebp+arg_4]  +
push eax  +
call sub_10167B3  +
mov ebx eax +
cmp ebx esi +
jl loc_1016EC0  +
mov edi [ebp+var_78] +
cmp edi esi +
jz loc_1016ECD  +
push 6Ch  +
lea eax [ebp+var_70] +
push esi  +
push eax  +
mov [ebp+var_74] esi +
call memset  +
mov eax [edi] +
add esp 0Ch +
lea ecx [ebp+var_74] +
push ecx  +
push edi  +
call dword ptr [eax+0Ch]  +
mov ebx eax +
cmp ebx esi +
jl loc_1016EC0  +
mov eax [ebp+var_38] +
mov ecx [ebp+var_7C] +
shr eax 6 +
and eax 1 +
mov [ecx] eax +
lea eax [ebp+var_74] +
push eax  +
call sub_1016574  +
mov eax [ebp+var_78] +
cmp eax esi +
jz loc_1016ECD  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
pop edi  +
mov eax ebx +
pop ebx  +
jmp loc_1016ED8  +
mov eax 80070057h +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop esi  +
call sub_100D691  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 50h +
mov eax dword_101908C +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push ebx  +
mov ebx [ebp+arg_8] +
push esi  +
xor esi esi +
mov [ebp+var_4C] esi +
mov [ebp+var_50] esi +
mov [ebp+var_48] esi +
mov [ebp+var_40] esi +
cmp eax esi +
jz loc_101703C  +
cmp [ebp+arg_4] esi +
jz loc_101703C  +
cmp ebx esi +
jz loc_101703C  +
push edi  +
lea edx [ebp+var_4C] +
push edx  +
push 1  +
mov [ebx] esi +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+18h]  +
mov edi eax +
cmp edi esi +
jl loc_101701A  +
cmp [ebp+var_40] esi +
jnz loc_1017001  +
mov eax [ebp+var_4C] +
mov ecx [eax] +
lea edx [ebp+var_50] +
push edx  +
lea edx [ebp+var_48] +
push edx  +
push 1  +
push eax  +
call dword ptr [ecx+0Ch]  +
mov edi eax +
cmp edi esi +
jl loc_101701A  +
cmp [ebp+var_50] 1 +
jnz loc_1017001  +
push 34h  +
lea eax [ebp+var_38] +
push esi  +
push eax  +
mov [ebp+var_44] esi +
mov [ebp+var_3C] esi +
call memset  +
mov eax [ebp+var_48] +
mov ecx [eax] +
add esp 0Ch +
lea edx [ebp+var_44] +
push edx  +
push offset dword_10094D8  +
push eax  +
call dword ptr [ecx]  +
mov edi eax +
cmp edi esi +
jl loc_1016FD0  +
mov eax [ebp+var_44] +
mov ecx [eax] +
lea edx [ebp+var_3C] +
push edx  +
push eax  +
call dword ptr [ecx+0Ch]  +
mov edi eax +
cmp edi esi +
jl loc_1016FD0  +
mov eax [ebp+arg_4] +
test [ebp+var_10] eax +
jz loc_1016FD0  +
mov eax [ebp+var_44] +
mov ecx [eax] +
lea edx [ebp+var_40] +
push edx  +
push offset dword_10094F8  +
push eax  +
call dword ptr [ecx]  +
mov edi eax +
lea eax [ebp+var_3C] +
push eax  +
call sub_10165D8  +
mov eax [ebp+var_44] +
cmp eax esi +
jz loc_1016FE9  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp+var_44] esi +
mov eax [ebp+var_48] +
cmp eax esi +
jz loc_1016FF9  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp+var_48] esi +
cmp edi esi +
jge loc_1016F46  +
cmp edi esi +
jl loc_101701A  +
mov eax [ebp+var_40] +
cmp eax esi +
jnz loc_1017011  +
mov edi 80070490h +
cmp edi esi +
jl loc_101701A  +
mov [ebx] eax +
mov [ebp+var_40] esi +
mov eax [ebp+var_40] +
cmp eax esi +
jz loc_101702A  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp+var_40] esi +
mov eax [ebp+var_4C] +
cmp eax esi +
jz loc_1017037  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax edi +
pop edi  +
jmp loc_1017041  +
mov eax 80070057h +
mov ecx [ebp+var_4] +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100D691  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 3Ch +
xor eax eax +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
push edi  +
mov [ebp+pv] eax +
mov [ebp+var_10] eax +
mov [ebp+var_1C] eax +
mov [ebp+var_18] eax +
mov [ebp+var_24] eax +
mov [ebp+var_20] eax +
mov [ebp+var_14] eax +
cmp ebx eax +
jz loc_10172D4  +
mov edi [ebp+arg_8] +
cmp edi eax +
jz loc_10172D4  +
mov esi [ebp+arg_C] +
cmp esi eax +
jz loc_10172D4  +
cmp [ebp+arg_4] eax +
mov eax offset aTrue +
jnz loc_10170A8  +
mov eax offset aFalse +
push dword ptr [edi+4]  +
push dword ptr [edi]  +
push dword ptr [esi+4]  +
push dword ptr [esi]  +
push eax  +
push offset aFindfreeextent  +
push 4000000h  +
push offset unk_10195C8  +
call sub_100DC59  +
add esp 20h +
lea eax [ebp+var_24] +
push eax  +
lea eax [ebp+var_1C] +
push eax  +
lea eax [ebp+var_14] +
push eax  +
push ebx  +
call sub_101626B  +
mov eax [ebx] +
lea ecx [ebp+var_10] +
push ecx  +
lea ecx [ebp+pv] +
push ecx  +
push ebx  +
call dword ptr [eax+18h]  +
mov ebx eax +
xor ecx ecx +
cmp ebx ecx +
jl loc_10172C1  +
mov [ebp+arg_0] ecx +
mov [ebp+var_8] ecx +
mov [ebp+var_C] ecx +
mov eax [ebp+var_8] +
cmp eax [ebp+var_10] +
jge loc_101729E  +
mov eax [ebp+pv] +
mov edx [ebp+var_C] +
add eax edx +
cmp [ebp+var_14] 1 +
mov [ebp+arg_C] ecx +
jnz loc_1017160  +
cmp [ebp+var_1C] ecx +
jnz loc_1017126  +
cmp [ebp+var_18] ecx +
jz loc_1017160  +
cmp [ebp+var_24] ecx +
jnz loc_1017130  +
cmp [ebp+var_20] ecx +
jz loc_1017160  +
mov ebx [eax+1Ch] +
mov ecx [eax+18h] +
cmp ebx [ebp+var_18] +
jb loc_1017160  +
ja loc_1017142  +
cmp ecx [ebp+var_1C] +
jb loc_1017160  +
mov edx [ebp+var_24] +
add edx [ebp+var_1C] +
mov ecx [ebp+var_20] +
adc ecx [ebp+var_18] +
cmp ebx ecx +
ja loc_1017160  +
jb loc_1017159  +
cmp [eax+18h] edx +
jnb loc_1017160  +
mov [ebp+arg_C] 1 +
cmp dword ptr [eax+10h] 1 +
jnz loc_101728C  +
cmp dword ptr [eax+24h] 0 +
jb loc_101728C  +
ja loc_1017183  +
cmp dword ptr [eax+20h] 100000h +
jb loc_101728C  +
mov ecx [ebp+arg_C] +
cmp ecx [ebp+arg_4] +
jnz loc_101728C  +
mov ecx [eax+24h] +
mov edx [eax+20h] +
mov ebx [esi] +
cmp ecx [esi+4] +
jb loc_101728C  +
ja loc_10171AA  +
cmp edx ebx +
jb loc_101728C  +
cmp dword ptr [edi] 0 +
mov ebx [edi+4] +
mov [ebp+var_28] ebx +
jnz loc_10171E1  +
test ebx ebx +
jnz loc_10171E1  +
mov ecx [eax+18h] +
mov [edi] ecx +
mov ecx [eax+1Ch] +
mov [edi+4] ecx +
cmp [esi] ebx +
jnz loc_10171D8  +
cmp [esi+4] ebx +
jnz loc_10171D8  +
mov ecx [eax+20h] +
mov [esi] ecx +
mov ecx [eax+24h] +
mov [esi+4] ecx +
mov [ebp+arg_0] 1 +
jmp loc_101724E  +
mov edi [ebp+var_28] +
cmp edi [eax+1Ch] +
jb loc_1017245  +
ja loc_10171F5  +
mov edi [ebp+arg_8] +
mov edi [edi] +
cmp edi [eax+18h] +
jb loc_1017245  +
add edx [eax+18h] +
mov edi [ebp+arg_8] +
adc ecx [eax+1Ch] +
mov [ebp+var_34] edx +
cmp [edi+4] ecx +
ja loc_1017248  +
jb loc_101720C  +
cmp [edi] edx +
jnb loc_1017248  +
mov edx [esi] +
add edx [edi] +
mov [ebp+var_3C] edx +
mov edx [esi+4] +
adc edx [edi+4] +
cmp edx ecx +
ja loc_1017248  +
mov edx [ebp+var_34] +
jb loc_1017227  +
cmp [ebp+var_3C] edx +
ja loc_1017248  +
cmp dword ptr [esi] 0 +
jnz loc_101723C  +
cmp dword ptr [esi+4] 0 +
jnz loc_101723C  +
sub edx [edi] +
sbb ecx [edi+4] +
mov [esi] edx +
mov [esi+4] ecx +
mov [ebp+arg_0] 1 +
jmp loc_1017248  +
mov edi [ebp+arg_8] +
cmp [ebp+arg_0] 0 +
jz loc_101728C  +
cmp [ebp+arg_C] 0 +
mov ecx offset aTrue +
jnz loc_101725E  +
mov ecx offset aFalse +
push dword ptr [edi+4]  +
push dword ptr [edi]  +
push dword ptr [esi+4]  +
push dword ptr [esi]  +
push dword ptr [eax+1Ch]  +
push dword ptr [eax+18h]  +
push dword ptr [eax+24h]  +
push dword ptr [eax+20h]  +
push ecx  +
push offset aFindfreeexte_0  +
push 4000000h  +
push offset unk_10195C8  +
call sub_100DC59  +
add esp 30h +
inc [ebp+var_8]  +
add [ebp+var_C] 50h +
xor ecx ecx +
cmp [ebp+arg_0] ecx +
jz loc_10170FF  +
cmp [ebp+arg_0] ecx +
jnz loc_10172BF  +
push offset aFindfreeexte_1  +
push 4000000h  +
push offset unk_10195C8  +
call sub_100DC59  +
xor ebx ebx +
add esp 0Ch +
inc ebx  +
jmp loc_10172C1  +
xor ebx ebx +
cmp [ebp+pv] 0 +
jz loc_10172D0  +
push [ebp+pv]  +
call ds:CoTaskMemFree  +
mov eax ebx +
jmp loc_10172D9  +
mov eax 80070057h +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 40h +
mov eax dword_101908C +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
and [ebp+var_40] 0 +
push esi  +
mov esi [ebp+arg_4] +
test eax eax +
jz loc_1017358  +
test esi esi +
jz loc_1017358  +
and dword ptr [esi] 0 +
mov ecx [eax] +
push edi  +
lea edx [ebp+var_40] +
push edx  +
push eax  +
call dword ptr [ecx+10h]  +
mov edi eax +
test edi edi +
jl loc_1017353  +
mov eax [ebp+var_40] +
test eax eax +
jz loc_1017353  +
mov ecx [eax] +
lea edx [ebp+var_3C] +
push edx  +
push eax  +
call dword ptr [ecx+0Ch]  +
mov edi eax +
test edi edi +
jl loc_1017346  +
mov eax [ebp+var_10] +
and eax 1 +
mov [esi] eax +
lea eax [ebp+var_3C] +
push eax  +
call sub_10165D8  +
mov eax [ebp+var_40] +
test eax eax +
jz loc_1017353  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax edi +
pop edi  +
jmp loc_101735D  +
mov eax 80070057h +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop esi  +
call sub_100D691  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ebp+arg_0] +
and [ebp+var_4] 0 +
push esi  +
test eax eax +
jz loc_10173C1  +
mov esi [ebp+arg_4] +
test esi esi +
jz loc_10173C1  +
and dword ptr [esi] 0 +
mov ecx [eax] +
push edi  +
lea edx [ebp+var_4] +
push edx  +
push eax  +
call dword ptr [ecx+10h]  +
mov edi eax +
test edi edi +
jl loc_10173BC  +
cmp [ebp+var_4] 0 +
jz loc_10173BC  +
push esi  +
push [ebp+var_4]  +
call sub_10172E5  +
mov edi eax +
mov eax [ebp+var_4] +
test eax eax +
jz loc_10173BC  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax edi +
pop edi  +
jmp loc_10173C6  +
mov eax 80070057h +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ebp+arg_0] +
and [ebp+var_4] 0 +
test eax eax +
jz loc_101741D  +
cmp [ebp+arg_4] 0 +
jz loc_101741D  +
mov ecx [eax] +
push esi  +
lea edx [ebp+var_4] +
push edx  +
push eax  +
call dword ptr [ecx+10h]  +
mov esi eax +
test esi esi +
jl loc_1017418  +
cmp [ebp+var_4] 0 +
jz loc_1017418  +
push [ebp+arg_4]  +
push [ebp+var_4]  +
call sub_10172E5  +
mov esi eax +
mov eax [ebp+var_4] +
test eax eax +
jz loc_1017418  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax esi +
pop esi  +
jmp locret_1017422  +
mov eax 80070057h +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 84h +
mov eax dword_101908C +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_10] +
and [ebp+var_78] 0 +
push ebx  +
mov ebx [ebp+arg_C] +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov [ebp+var_84] edi +
mov [ebp+var_80] eax +
test edi edi +
jz loc_101759F  +
test ebx ebx +
jz loc_101759F  +
mov eax [ebx] +
test eax eax +
jz loc_101759F  +
mov ecx [eax] +
lea edx [ebp+var_78] +
push edx  +
push eax  +
call dword ptr [ecx+10h]  +
mov esi eax +
xor eax eax +
cmp esi eax +
jge loc_101758A  +
cmp esi 80042417h +
jnz loc_101758A  +
cmp [ebp+var_78] eax +
jnz loc_1017590  +
lea ecx [ebp+var_78] +
mov [ebp+var_7C] eax +
test ecx ecx +
jz loc_10174D8  +
mov [ebp+var_78] eax +
lea eax [ebp+var_7C] +
push eax  +
push 4  +
push edi  +
call sub_1016EEC  +
mov edi [ebp+var_7C] +
mov esi eax +
test esi esi +
jl loc_10174CC  +
mov eax [edi] +
lea ecx [ebp+var_78] +
push ecx  +
push edi  +
call dword ptr [eax+10h]  +
mov esi eax +
test edi edi +
jz loc_10174DD  +
mov eax [edi] +
push edi  +
call dword ptr [eax+8]  +
jmp loc_10174DD  +
mov esi 80070057h +
test esi esi +
jl loc_101758A  +
mov eax [ebx] +
mov ecx [eax] +
lea edx [ebp+var_74] +
push edx  +
push eax  +
call dword ptr [ecx+0Ch]  +
mov esi eax +
test esi esi +
jl loc_101758A  +
mov ecx [ebp+arg_8] +
cmp ecx 1 +
jz loc_1017510  +
cmp ecx 2 +
jz loc_1017510  +
mov ecx [ebp+var_30] +
test ecx ecx +
jnz loc_1017510  +
inc ecx  +
mov eax [ebp+var_78] +
mov edx [eax] +
push 0  +
push ecx  +
sub esp 10h +
mov edi esp +
lea esi [ebp+var_74] +
movs   +
movs   +
movs   +
push eax  +
movs   +
call dword ptr [edx+20h]  +
mov esi eax +
xor edi edi +
cmp esi edi +
jl loc_1017581  +
push offset aConvertunalloc  +
push 4000000h  +
push offset unk_10195C8  +
call sub_100DC59  +
mov eax [ebx] +
add esp 0Ch +
cmp eax edi +
jz loc_1017555  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebx] edi +
mov esi [ebp+var_80] +
mov [ebx] edi +
cmp esi edi +
jz loc_101756E  +
mov eax [esi] +
cmp eax edi +
jz loc_101756C  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [esi] edi +
mov [esi] edi +
push edi  +
push esi  +
push ebx  +
push [ebp+arg_4]  +
push [ebp+var_84]  +
call sub_10167B3  +
mov esi eax +
lea eax [ebp+var_74] +
push eax  +
call sub_1016574  +
cmp [ebp+var_78] 0 +
jz loc_101759B  +
mov eax [ebp+var_78] +
push [ebp+var_78]  +
mov eax [eax] +
call dword ptr [eax+8]  +
mov eax esi +
jmp loc_10175A4  +
mov eax 80070057h +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100D691  +
leave   +
retn 14h  +
***
push ebx  +
push esi  +
mov eax [esp+18h] +
or eax eax +
jnz loc_10175E2  +
mov ecx [esp+14h] +
mov eax [esp+10h] +
xor edx edx +
div  ecx +
mov ebx eax +
mov eax [esp+0Ch] +
div  ecx +
mov edx ebx +
jmp loc_1017623  +
mov ecx eax +
mov ebx [esp+14h] +
mov edx [esp+10h] +
mov eax [esp+0Ch] +
shr ecx 1 +
rcr ebx 1 +
shr edx 1 +
rcr eax 1 +
or ecx ecx +
jnz loc_10175F0  +
div  ebx +
mov esi eax +
mul  dword ptr [esp+18h] +
mov ecx eax +
mov eax [esp+14h] +
mul  esi +
add edx ecx +
jb loc_101761E  +
cmp edx [esp+10h] +
ja loc_101761E  +
jb loc_101761F  +
cmp eax [esp+0Ch] +
jbe loc_101761F  +
dec esi  +
xor edx edx +
mov eax esi +
pop esi  +
pop ebx  +
retn 10h  +
***
jmp ds:WdsDestroyBlackboard  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
mov eax dword_101908C +
xor eax ebp +
mov [ebp+var_4] eax +
push 0  +
push 14h  +
lea eax [ebp+var_18] +
push eax  +
push 5Ah  +
call ds:NtQuerySystemInformation  +
test eax eax +
jl loc_10176E3  +
mov eax [ebp+var_8] +
cmp eax 3 +
jl loc_10176E6  +
xor eax eax +
jmp loc_10176E6  +
xor eax eax +
inc eax  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_100D691  +
leave   +
retn   +
***
sar ds:byte_100C2B6 74h +
add eax 0FF4BB1E8h +
jmp fword ptr [eax+70h]  +
***
mov eax off_1019088 +
test eax eax +
jz locret_101777B  +
jmp eax  +
***
retn   +
***
push offset CriticalSection  +
call ds:DeleteCriticalSection  +
retn   +
***
mov eax off_10190EC +
test eax eax +
jz locret_101779D  +
jmp eax  +
***
retn   +
***
mov eax off_10190F0 +
test eax eax +
jz locret_10177AE  +
jmp eax  +
***
retn   +
***
retf   +
***
retf   +
***
