mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+hMem] 0 +
jz loc_1002599  +
push [ebp+hMem]  +
call ds:LocalFree  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
imul eax [ebp+arg_8] +
push esi  +
mov esi [ebp+arg_0] +
add esi eax +
jmp loc_10025BC  +
sub esi [ebp+arg_4] +
mov ecx esi +
call [ebp+arg_C]  +
dec [ebp+arg_8]  +
jns loc_10025B4  +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
dec [ebp+arg_8]  +
js loc_10025E7  +
push esi  +
mov esi [ebp+arg_0] +
mov ecx esi +
call [ebp+arg_C]  +
add esi [ebp+arg_4] +
dec [ebp+arg_8]  +
jns loc_10025D9  +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 118h +
mov eax dword_100D608 +
xor eax ebp +
mov [ebp+var_4] eax +
push 114h  +
lea eax [ebp+VersionInformation] +
push 0  +
push eax  +
call memset  +
add esp 0Ch +
lea eax [ebp+VersionInformation] +
push eax  +
mov [ebp+VersionInformation.dwOSVersionInfoSize] 114h +
call ds:GetVersionExW  +
mov eax [ebp+VersionInformation.dwPlatformId] +
mov ecx [ebp+var_4] +
mov dword_100D85C eax +
xor eax eax +
xor ecx ebp +
inc eax  +
call sub_100A24F  +
leave   +
retn   +
***
push ebp  +
mov ebp esp +
sub esp 50h +
mov eax dword_100D608 +
xor eax ebp +
mov [ebp-4] eax +
test byte ptr dword_100D910 1 +
push ebx  +
push esi  +
push edi  +
jnz loc_1002680  +
or dword_100D910 1 +
call sub_10025F0  +
mov dword_100D90C eax +
push 4  +
pop eax  +
call __alloca_probe  +
mov esi esp +
push 1Ch  +
lea eax [ebp-2Ch] +
push eax  +
push esi  +
call ds:VirtualQuery  +
test eax eax +
jnz loc_10026A2  +
xor eax eax +
jmp loc_100275F  +
mov ebx [ebp-28h] +
lea eax [ebp-50h] +
push eax  +
call ds:GetSystemInfo  +
mov eax [ebp-4Ch] +
lea edi [eax-1] +
not edi  +
and edi esi +
sub edi eax +
mov [ebp-0Ch] eax +
mov eax dword_100D85C +
mov esi eax +
dec esi  +
neg esi  +
sbb esi esi +
and esi 0FFFF1000h +
add esi 11000h +
add esi ebx +
cmp edi esi +
jb loc_100269B  +
cmp eax 1 +
jz loc_1002740  +
mov [ebp-8] ebx +
mov ebx 1000h +
push 1Ch  +
lea eax [ebp-2Ch] +
push eax  +
push dword ptr [ebp-8]  +
call ds:VirtualQuery  +
test eax eax +
jz loc_100269B  +
mov eax [ebp-20h] +
add [ebp-8] eax +
test [ebp-1Ch] ebx +
jz loc_10026E9  +
test dword ptr [ebp-18h] 100h +
mov eax [ebp-2Ch] +
mov [ebp-8] eax +
jz loc_100271B  +
xor eax eax +
inc eax  +
jmp loc_100275F  +
cmp edi eax +
jb loc_100269B  +
cmp eax esi +
jnb loc_100272A  +
mov [ebp-8] esi +
push 4  +
push ebx  +
push dword ptr [ebp-0Ch]  +
push dword ptr [ebp-8]  +
call ds:VirtualAlloc  +
mov eax dword_100D85C +
jmp loc_1002743  +
mov [ebp-8] edi +
dec eax  +
neg eax  +
sbb eax eax +
and eax 103h +
lea ecx [ebp-10h] +
push ecx  +
inc eax  +
push eax  +
push dword ptr [ebp-0Ch]  +
push dword ptr [ebp-8]  +
call ds:VirtualProtect  +
lea esp [ebp-5Ch] +
pop edi  +
pop esi  +
pop ebx  +
mov ecx [ebp-4] +
xor ecx ebp +
call sub_100A24F  +
leave   +
retn   +
***
call __SEH_prolog4_GS  +
mov bl 1 +
mov ecx [ebp+arg_0] +
lea eax [ecx+2000h] +
cmp eax ecx +
jnb loc_1002795  +
xor al al +
jmp loc_10027CA  +
and [ebp+ms_exc.disabled] 0 +
call __alloca_probe_16  +
mov [ebp+ms_exc.old_esp] esp +
jmp loc_10027C1  +
mov eax [ebp-14h] +
mov eax [eax] +
mov eax [eax] +
xor ecx ecx +
cmp eax 0C00000FDh +
setz cl  +
mov eax ecx +
retn   +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov al bl +
lea esp [ebp-2Ch] +
call __SEH_epilog4_GS  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_0]  +
call ds:malloc  +
pop ecx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_0]  +
call ds:free  +
pop ecx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+lpWideCharStr] +
test esi esi +
jz loc_100283D  +
cmp [ebp+lpMultiByteStr] 0 +
jz loc_100283D  +
push [ebp+cchWideChar]  +
xor eax eax +
push esi  +
push 0FFFFFFFFh  +
push [ebp+lpMultiByteStr]  +
mov [esi] ax +
push eax  +
push [ebp+CodePage]  +
call ds:MultiByteToWideChar  +
neg eax  +
sbb eax eax +
and eax esi +
jmp loc_100283F  +
xor eax eax +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+cchWideChar]  +
push [ebp+lpMultiByteStr]  +
push [ebp+lpWideCharStr]  +
call sub_100280A  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebx  +
push esi  +
push edi  +
mov edi ds:WaitForSingleObject +
mov esi ecx +
xor ebx ebx +
push 0FFFFFFFFh  +
push dword ptr [esi+88h]  +
call edi  +
push 1388h  +
push dword ptr [esi+88h]  +
mov [esi+8Ch] bl +
call edi  +
test eax eax +
jz loc_1002880  +
cmp [esi+8Ch] bl +
jnz loc_1002876  +
cmp [esi+14h] ebx +
jnz loc_1002876  +
push dword ptr [esi+88h]  +
call ds:CloseHandle  +
push ebx  +
push ebx  +
push 12h  +
push dword ptr [esi+84h]  +
call ds:PostThreadMessageW  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
test edi edi +
jz loc_1002905  +
mov esi ds:CharNextW +
cmp word ptr [edi] 0 +
jz loc_1002905  +
mov eax [ebp+lpsz] +
jmp loc_10028F8  +
movzx ecx word ptr [eax] +
test cx cx +
jz loc_10028FC  +
cmp [edi] cx +
jz loc_100290D  +
push eax  +
call esi  +
test eax eax +
jnz loc_10028E8  +
push edi  +
call esi  +
mov edi eax +
test edi edi +
jnz loc_10028DD  +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
push edi  +
call esi  +
jmp loc_1002907  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push dword ptr [eax+14h]  +
call ds:CoRevokeClassObject  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+pUnk] 0 +
push esi  +
mov esi [ebp+arg_0] +
mov eax [esi+8] +
test eax eax +
jz loc_1002982  +
push edi  +
lea ecx [ebp+pUnk] +
push ecx  +
push offset dword_10019E4  +
push dword ptr [esi+0Ch]  +
call eax  +
mov edi eax +
test edi edi +
jl loc_1002972  +
lea eax [esi+14h] +
push eax  +
push [ebp+flags]  +
push [ebp+dwClsContext]  +
push [ebp+pUnk]  +
push dword ptr [esi]  +
call ds:CoRegisterClassObject  +
mov edi eax +
mov eax [ebp+pUnk] +
test eax eax +
jz loc_100297F  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax edi +
pop edi  +
pop esi  +
leave   +
retn 0Ch  +
***
call ds:GetLastError  +
test eax eax +
jle locret_10029A0  +
and eax 0FFFFh +
or eax 80070000h +
retn   +
***
call __SEH_prolog4  +
xor esi esi +
mov [ebp+ms_exc.disabled] esi +
push ecx  +
call ds:InitializeCriticalSection  +
jmp loc_10029EA  +
mov eax [ebp-14h] +
mov eax [eax] +
mov eax [eax] +
mov [ebp-1Ch] eax +
xor eax eax +
inc eax  +
retn   +
mov esp [ebp-18h] +
xor eax eax +
cmp dword ptr [ebp-1Ch] 0C0000017h +
setnz al  +
dec eax  +
and eax 6C009h +
add eax 80004005h +
mov esi eax +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov eax esi +
call __SEH_epilog4  +
retn   +
***
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_10029A6  +
test eax eax +
jl loc_1002A18  +
mov byte ptr [esi+18h] 1 +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
test ecx ecx +
jz loc_1002A32  +
mov edx [ebp+arg_0] +
test edx edx +
jnz loc_1002A50  +
mov eax 80070057h +
pop ebp  +
retn 8  +
mov [edx] ax +
inc edx  +
inc edx  +
cmp word ptr [ecx] 27h +
jnz loc_1002A4E  +
push 27h  +
pop eax  +
mov [edx] ax +
inc edx  +
inc edx  +
inc ecx  +
inc ecx  +
movzx eax word ptr [ecx] +
test ax ax +
jnz loc_1002A3B  +
xor eax eax +
mov [edx] ax +
jmp loc_1002A37  +
***
lea eax [ecx+4] +
cmp byte ptr [eax+18h] 0 +
jz locret_1002A78  +
push eax  +
mov byte ptr [eax+18h] 0 +
call ds:DeleteCriticalSection  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+lpString1] 0 +
jz loc_1002ABB  +
cmp [ebp+lpString2] 0 +
jz loc_1002AB1  +
push 0FFFFFFFFh  +
push [ebp+lpString2]  +
push 0FFFFFFFFh  +
push [ebp+lpString1]  +
push 1  +
push 400h  +
call ds:CompareStringW  +
dec eax  +
jz loc_1002AB6  +
dec eax  +
dec eax  +
jz loc_1002AB1  +
xor eax eax +
jmp loc_1002AC2  +
xor eax eax +
inc eax  +
jmp loc_1002AC2  +
or eax 0FFFFFFFFh +
jmp loc_1002AC2  +
mov eax [ebp+lpString2] +
neg eax  +
sbb eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
cmp dword ptr [esi+4] 0 +
jnz loc_1002B1D  +
cmp dword ptr [esi+8] 0 +
jnz loc_1002B1D  +
push offset ModuleName  +
call ds:GetModuleHandleW  +
test eax eax +
jz loc_1002AFF  +
push offset ProcName  +
push eax  +
call ds:GetProcAddress  +
mov [esi+4] eax +
jmp loc_1002B1D  +
push offset LibFileName  +
call ds:LoadLibraryW  +
test eax eax +
jz loc_1002B1D  +
push offset aRegdeletekeyw  +
push eax  +
call ds:GetProcAddress  +
mov [esi+8] eax +
mov eax [esi+4] +
test eax eax +
jz loc_1002B31  +
push 0  +
push 0  +
push [ebp+arg_0]  +
push dword ptr [esi]  +
call eax  +
jmp loc_1002B47  +
mov eax [esi+8] +
test eax eax +
jz loc_1002B41  +
push [ebp+arg_0]  +
push dword ptr [esi]  +
call eax  +
jmp loc_1002B47  +
call ds:GetLastError  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov ecx [esi] +
xor eax eax +
test ecx ecx +
jz loc_1002B68  +
push ecx  +
call ds:RegCloseKey  +
and dword ptr [esi] 0 +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
and [ebp+phkResult] 0 +
lea eax [ebp+dwDisposition] +
push eax  +
lea eax [ebp+phkResult] +
push eax  +
push [ebp+dwDisposition]  +
mov esi ecx +
push [ebp+samDesired]  +
push [ebp+dwOptions]  +
push [ebp+lpClass]  +
push 0  +
push [ebp+lpSubKey]  +
push [ebp+hKey]  +
call ds:RegCreateKeyExW  +
mov ecx [ebp+arg_18] +
test ecx ecx +
jz loc_1002BAA  +
mov edx [ebp+dwDisposition] +
mov [ecx] edx +
test eax eax +
jnz loc_1002BBA  +
mov ecx esi +
call sub_1002B51  +
mov ecx [ebp+phkResult] +
mov [esi] ecx +
pop esi  +
leave   +
retn 1Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+phkResult] 0 +
push esi  +
lea eax [ebp+phkResult] +
push eax  +
push [ebp+samDesired]  +
mov esi ecx +
push [ebp+ulOptions]  +
push [ebp+lpSubKey]  +
push [ebp+hKey]  +
call ds:RegOpenKeyExW  +
test eax eax +
jnz loc_1002BF7  +
mov ecx esi +
call sub_1002B51  +
mov ecx [ebp+phkResult] +
mov [esi] ecx +
pop esi  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 4  +
lea eax [ebp+Data] +
push eax  +
push 4  +
push 0  +
push [ebp+lpValueName]  +
push dword ptr [ecx]  +
call ds:RegSetValueExW  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+lpData]  +
mov esi ecx +
call ds:lstrlenW  +
lea eax [eax+eax+2] +
push eax  +
push [ebp+lpData]  +
push 1  +
push 0  +
push [ebp+lpValueName]  +
push dword ptr [esi]  +
call ds:RegSetValueExW  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push esi  +
mov esi ecx +
and dword ptr [esi+4] 0 +
push 28h  +
mov dword ptr [esi+8] 0Ah +
call ds:malloc  +
mov [esi] eax +
pop ecx  +
mov eax esi +
pop esi  +
retn   +
***
mov eax [ecx] +
push 27h  +
pop ecx  +
cmp cx [eax] +
jnz loc_1002C97  +
push eax  +
call ds:CharNextW  +
push 27h  +
pop ecx  +
cmp cx [eax] +
jz loc_1002C97  +
xor eax eax +
inc eax  +
retn   +
xor eax eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
mov esi ecx +
and dword ptr [esi] 0 +
mov [esi+4] eax +
add eax eax +
push eax  +
call ds:CoTaskMemAlloc  +
mov [esi+8] eax +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov ecx [esi] +
mov eax [esi+4] +
inc ecx  +
cmp ecx eax +
jle loc_1002CF1  +
shl eax 2 +
push eax  +
push dword ptr [esi+8]  +
call ds:CoTaskMemRealloc  +
test eax eax +
jz loc_1002D05  +
shl dword ptr [esi+4] 1 +
mov [esi+8] eax +
mov eax [esi] +
mov edx [ebp+arg_0] +
mov dx [edx] +
mov ecx [esi+8] +
mov [ecx+eax*2] dx +
inc dword ptr [esi]  +
xor eax eax +
inc eax  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
test byte ptr dword_100D92C 1 +
jnz loc_1002D5D  +
or dword_100D92C 1 +
push 8  +
pop eax  +
push 13h  +
mov word_100D918 ax +
pop eax  +
push 11h  +
mov word_100D920 ax +
pop eax  +
mov lpString2 offset aS +
mov dword_100D91C offset aD_0 +
mov dword_100D924 offset aB +
mov word_100D928 ax +
push esi  +
xor esi esi +
push lpString2[esi*8]  +
push [ebp+lpString1]  +
call ds:lstrcmpiW  +
test eax eax +
jz loc_1002D81  +
inc esi  +
cmp esi 3 +
jb loc_1002D60  +
xor eax eax +
pop esi  +
pop ebp  +
retn 8  +
mov ax word_100D918[esi*8] +
mov ecx [ebp+arg_4] +
mov [ecx] ax +
xor eax eax +
inc eax  +
jmp loc_1002D7C  +
***
mov edi edi +
push ebp  +
mov ebp esp +
movzx eax [ebp+arg_0] +
cmp eax 30h +
jl loc_1002DCD  +
cmp eax 39h +
jle loc_1002DC8  +
cmp eax 40h +
jle loc_1002DCD  +
cmp eax 46h +
jle loc_1002DC3  +
lea ecx [eax-61h] +
cmp ecx 5 +
ja loc_1002DCD  +
add eax 0FFFFFFA9h +
jmp loc_1002DCF  +
add eax 0FFFFFFC9h +
jmp loc_1002DCF  +
add eax 0FFFFFFD0h +
jmp loc_1002DCF  +
xor al al +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
xor esi esi +
push ds:off_1001468[esi*8]  +
push [ebp+lpString1]  +
call ds:lstrcmpiW  +
test eax eax +
jz loc_1002E01  +
inc esi  +
cmp esi 0Eh +
jb loc_1002DE0  +
xor eax eax +
pop esi  +
pop ebp  +
retn 4  +
mov eax ds:dword_100146C[esi*8] +
jmp loc_1002DFC  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+lpsz] +
push esi  +
xor esi esi +
test eax eax +
jnz loc_1002E2D  +
jmp loc_1002E3B  +
cmp cx [ebp+arg_4] +
jz loc_1002E37  +
push eax  +
call ds:CharNextW  +
movzx ecx word ptr [eax] +
test cx cx +
jnz loc_1002E20  +
jmp loc_1002E39  +
mov esi eax +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov ecx [ebp+arg_4] +
cmp word ptr [ecx] 0 +
mov eax [ebp+lpsz] +
mov [ebp+lpsz] eax +
jz locret_1002ED0  +
cmp word ptr [eax] 0 +
push ebx  +
push esi  +
push edi  +
jz loc_1002ECB  +
mov ebx ds:CharNextW +
mov esi [ebp+lpsz] +
mov edi [ebp+arg_4] +
jmp loc_1002EB1  +
movzx eax word ptr [edi] +
test ax ax +
jz loc_1002ED4  +
movzx ecx word ptr [esi] +
movzx eax ax +
sub ecx eax +
jnz loc_1002EB7  +
push esi  +
call ebx  +
push edi  +
mov [ebp+var_4] eax +
call ebx  +
mov ecx [ebp+var_4] +
sub eax edi +
sub ecx esi +
xor eax ecx +
test eax 0FFFFFFFEh +
jnz loc_1002EB7  +
jmp loc_1002EAC  +
inc esi  +
inc esi  +
movzx ecx word ptr [esi] +
inc edi  +
inc edi  +
movzx eax word ptr [edi] +
sub ecx eax +
jz loc_1002EB1  +
cmp esi [ebp+var_4] +
jb loc_1002E9E  +
cmp word ptr [esi] 0 +
jnz loc_1002E71  +
cmp word ptr [edi] 0 +
jz loc_1002ED4  +
push [ebp+lpsz]  +
call ebx  +
cmp word ptr [eax] 0 +
mov [ebp+lpsz] eax +
jnz loc_1002E69  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
mov eax [ebp+lpsz] +
jmp loc_1002ECD  +
***
mov edi edi +
push ebp  +
mov ebp esp +
movzx eax [ebp+arg_0] +
cmp eax 9 +
jl loc_1002F00  +
cmp eax 0Ah +
jle loc_1002EFB  +
cmp eax 0Dh +
jz loc_1002EFB  +
cmp eax 20h +
jnz loc_1002F00  +
xor eax eax +
inc eax  +
jmp loc_1002F02  +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
jmp loc_1002F1E  +
push dword ptr [esi]  +
call ds:CharNextW  +
mov [esi] eax +
mov ecx esi +
mov eax [esi] +
movzx eax word ptr [eax] +
push eax  +
call sub_1002EDE  +
test eax eax +
jnz loc_1002F12  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1002F0B  +
mov eax [esi] +
movzx ecx word ptr [eax] +
xor edx edx +
cmp dx cx +
jnz loc_1002F57  +
mov eax 80020009h +
jmp loc_1003042  +
push ebx  +
push edi  +
mov edi [ebp+arg_0] +
push 27h  +
pop edx  +
mov [ebp+arg_0] edi +
cmp dx cx +
jnz loc_1002FEE  +
push eax  +
call ds:CharNextW  +
mov [esi] eax +
jmp loc_1002FCD  +
mov ecx esi +
call sub_1002C7A  +
test eax eax +
jnz loc_1002FD4  +
mov eax [esi] +
push 27h  +
pop ecx  +
cmp cx [eax] +
jnz loc_1002F94  +
push eax  +
call ds:CharNextW  +
mov [esi] eax +
mov ebx [esi] +
push ebx  +
call ds:CharNextW  +
mov edx [ebp+arg_0] +
mov ecx eax +
sub ecx ebx +
sar ecx 1 +
lea ecx [edi+ecx*2] +
add edx 2000h +
mov [esi] eax +
cmp ecx edx +
jnb loc_1003047  +
cmp ebx eax +
jnb loc_1002FCB  +
mov ax [ebx] +
inc ebx  +
mov [edi] ax +
inc ebx  +
inc edi  +
inc edi  +
cmp ebx [esi] +
jb loc_1002FBD  +
mov eax [esi] +
xor ecx ecx +
cmp cx [eax] +
jnz loc_1002F76  +
mov eax [esi] +
xor ecx ecx +
cmp cx [eax] +
jz loc_1003047  +
xor eax eax +
mov [edi] ax +
push dword ptr [esi]  +
call ds:CharNextW  +
mov [esi] eax +
jmp loc_100303E  +
mov ebx [esi] +
movzx eax word ptr [ebx] +
push eax  +
mov ecx esi +
call sub_1002EDE  +
test eax eax +
jnz loc_1003039  +
push ebx  +
call ds:CharNextW  +
mov edx [ebp+arg_0] +
mov ecx eax +
sub ecx ebx +
sar ecx 1 +
lea ecx [edi+ecx*2] +
add edx 2000h +
mov [esi] eax +
cmp ecx edx +
jnb loc_1003047  +
cmp ebx eax +
jnb loc_1003030  +
mov ax [ebx] +
inc ebx  +
mov [edi] ax +
inc ebx  +
inc edi  +
inc edi  +
cmp ebx [esi] +
jb loc_1003022  +
mov eax [esi] +
xor ecx ecx +
cmp cx [eax] +
jnz loc_1002FEE  +
xor eax eax +
mov [edi] ax +
xor eax eax +
pop edi  +
pop ebx  +
pop esi  +
pop ebp  +
retn 4  +
mov eax 80020009h +
jmp loc_1003040  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi offset off_100D010 +
push dword ptr [esi]  +
push [ebp+lpString1]  +
call ds:lstrcmpiW  +
test eax eax +
jz loc_1003080  +
add esi 4 +
cmp esi offset off_100D018 +
jl loc_100305E  +
xor eax eax +
inc eax  +
pop esi  +
pop ebp  +
retn 4  +
xor eax eax +
jmp loc_100307B  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
xor eax eax +
push eax  +
push eax  +
push eax  +
push eax  +
push eax  +
push eax  +
push eax  +
lea ecx [ebp+cSubKeys] +
push ecx  +
push eax  +
push eax  +
push eax  +
push [ebp+hKey]  +
mov [ebp+cSubKeys] eax +
call ds:RegQueryInfoKeyW  +
test eax eax +
jge loc_10030B3  +
xor eax eax +
jmp locret_10030BC  +
xor eax eax +
cmp eax [ebp+cSubKeys] +
sbb eax eax +
neg eax  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push esi  +
push edi  +
xor esi esi +
push esi  +
push esi  +
push esi  +
push esi  +
lea eax [ebp+cValues] +
push eax  +
push esi  +
push esi  +
push esi  +
push esi  +
push esi  +
push esi  +
push [ebp+hKey]  +
mov [ebp+cValues] esi +
call ds:RegQueryInfoKeyW  +
test eax eax +
jz loc_10030F2  +
xor eax eax +
jmp loc_1003145  +
cmp [ebp+cValues] 1 +
jnz loc_100313C  +
push 2000h  +
mov [ebp+cbValueName] 1000h +
call ds:malloc  +
mov edi eax +
pop ecx  +
cmp edi esi +
jz loc_10030EE  +
push esi  +
push esi  +
push esi  +
push esi  +
lea eax [ebp+cbValueName] +
push eax  +
push edi  +
push esi  +
push [ebp+hKey]  +
call ds:RegEnumValueW  +
test eax eax +
jnz loc_1003130  +
cmp [edi] si +
jz loc_1003130  +
xor esi esi +
inc esi  +
push edi  +
call ds:free  +
pop ecx  +
mov eax esi +
jmp loc_1003145  +
xor eax eax +
cmp eax [ebp+cValues] +
sbb eax eax +
neg eax  +
pop edi  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push edi  +
push 2000h  +
mov edi ecx +
call ds:malloc  +
pop ecx  +
mov [ebp+var_4] eax +
test eax eax +
jnz loc_1003173  +
mov eax 8007000Eh +
jmp loc_10031C1  +
push ebx  +
mov ebx [ebp+arg_0] +
cmp word ptr [ebx] 3Dh +
push esi  +
jnz loc_10031B1  +
push ebx  +
mov ecx edi +
call sub_1002F34  +
mov esi eax +
test esi esi +
jl loc_10031B3  +
mov ecx edi +
call sub_1002F0B  +
push [ebp+var_4]  +
mov ecx edi +
call sub_1002F34  +
mov esi eax +
test esi esi +
jl loc_10031B3  +
push ebx  +
mov ecx edi +
call sub_1002F34  +
mov esi eax +
test esi esi +
jl loc_10031B3  +
xor esi esi +
push [ebp+var_4]  +
call ds:free  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebx  +
pop edi  +
leave   +
retn 4  +
***
test edi edi +
jnz loc_10031D2  +
xor eax eax +
retn   +
cmp word ptr [edi] 0 +
push ebx  +
push esi  +
mov ebx edi +
mov esi edi +
jz loc_1003204  +
push esi  +
call ds:CharNextW  +
movzx ecx word ptr [esi] +
cmp cx 5Ch +
jz loc_10031FA  +
cmp cx 2Fh +
jz loc_10031FA  +
cmp cx 3Ah +
jnz loc_10031FC  +
mov ebx eax +
cmp word ptr [eax] 0 +
mov esi eax +
jnz loc_10031DE  +
mov eax ebx +
sub eax edi +
pop esi  +
sar eax 1 +
pop ebx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
cmp dword ptr [eax] 64h +
mov eax [ebp+arg_4] +
jnz loc_1003227  +
add eax 1Ch +
jmp loc_100322A  +
add eax 24h +
pop ebp  +
retn 8  +
***
call __SEH_prolog4  +
mov esi [ebp+arg_0] +
xor ebx ebx +
cmp esi ebx +
jnz loc_1003252  +
mov eax 80070057h +
jmp loc_1003387  +
mov eax [ebp+arg_4] +
mov [esi+10h] eax +
mov eax [ebp+arg_8] +
mov [esi+8] eax +
mov [esi+0Ch] eax +
mov [esi+4] eax +
mov [esi+14h] ebx +
mov [esi+18h] ebx +
mov [ebp+ms_exc.disabled] ebx +
lea eax [esi+1Ch] +
push eax  +
mov edi ds:InitializeCriticalSection +
call edi  +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov [ebp+ms_exc.disabled] 1 +
lea eax [esi+34h] +
push eax  +
call edi  +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov [ebp+ms_exc.disabled] 2 +
lea eax [esi+4Ch] +
push eax  +
call edi  +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov [esi+68h] ebx +
mov byte ptr [esi+6Ch] 1 +
mov [esi+74h] ebx +
mov [esi+7Ch] ebx +
mov [esi+78h] ebx +
mov [esi+80h] ebx +
mov edi [esi+10h] +
cmp edi ebx +
jz loc_10032D9  +
jmp loc_10032D5  +
push 1  +
call dword ptr [edi+20h]  +
push edi  +
push esi  +
call sub_1003212  +
mov edi eax +
cmp [edi] ebx +
jnz loc_10032C7  +
xor eax eax +
jmp loc_1003387  +
mov eax [ebp-14h] +
mov eax [eax] +
mov eax [eax] +
xor ecx ecx +
cmp eax 0C0000017h +
setz cl  +
mov eax ecx +
retn   +
mov esp [ebp-18h] +
mov esi [ebp+8] +
lea ebx [esi+34h] +
push ebx  +
mov edi ds:DeleteCriticalSection +
call edi  +
lea eax [esi+1Ch] +
mov [ebp+arg_0] eax +
push eax  +
call edi  +
push 6  +
pop ecx  +
xor eax eax +
lea edi [esi+4Ch] +
stos   +
push 6  +
pop ecx  +
mov edi ebx +
stos   +
mov edi [ebp+arg_0] +
jmp loc_1003376  +
mov eax [ebp-14h] +
mov eax [eax] +
mov eax [eax] +
xor ecx ecx +
cmp eax 0C0000017h +
setz cl  +
mov eax ecx +
retn   +
mov esp [ebp-18h] +
mov esi [ebp+8] +
lea ebx [esi+1Ch] +
push ebx  +
call ds:DeleteCriticalSection  +
push 6  +
pop ecx  +
xor eax eax +
lea edi [esi+34h] +
stos   +
mov edi ebx +
jmp loc_1003376  +
mov eax [ebp-14h] +
mov eax [eax] +
mov eax [eax] +
xor ecx ecx +
cmp eax 0C0000017h +
setz cl  +
mov eax ecx +
retn   +
mov esp [ebp-18h] +
xor eax eax +
mov edi [ebp+8] +
add edi 1Ch +
push 6  +
pop ecx  +
stos   +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov eax 0C0000017h +
call __SEH_epilog4  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_0] +
push edi  +
xor edi edi +
cmp ebx edi +
jnz loc_10033AB  +
mov eax 80070057h +
jmp loc_10033DE  +
push esi  +
mov esi [ebx+10h] +
cmp esi edi +
jnz loc_10033B7  +
xor eax eax +
jmp loc_10033DD  +
cmp [esi] edi +
jz loc_10033DB  +
test edi edi +
jnz loc_10033DB  +
push [ebp+flags]  +
push [ebp+dwClsContext]  +
push esi  +
call sub_1002931  +
push esi  +
push ebx  +
mov edi eax +
call sub_1003212  +
mov esi eax +
cmp dword ptr [esi] 0 +
jnz loc_10033BB  +
mov eax edi +
pop esi  +
pop edi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_0] +
push edi  +
xor edi edi +
cmp ebx edi +
jnz loc_1003400  +
mov eax 80070057h +
jmp loc_100342D  +
push esi  +
mov esi [ebx+10h] +
cmp esi edi +
jnz loc_100340C  +
xor eax eax +
jmp loc_100342C  +
cmp [esi] edi +
jz loc_100342A  +
test edi edi +
jnz loc_100342A  +
push esi  +
call sub_1002917  +
push esi  +
push ebx  +
mov edi eax +
call sub_1003212  +
mov esi eax +
cmp dword ptr [esi] 0 +
jnz loc_1003410  +
mov eax edi +
pop esi  +
pop edi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi+4] +
test eax eax +
jz loc_100344F  +
push eax  +
call ds:SysFreeString  +
and dword ptr [esi+4] 0 +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_1001624 +
call sub_1003438  +
test byte ptr [ebp+8] 1 +
jz loc_1003476  +
push esi  +
call sub_1002585  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
jmp loc_100349D  +
mov eax [esi] +
mov ecx [eax] +
push eax  +
mov [esi] ecx +
call sub_10027F2  +
cmp dword ptr [esi] 0 +
jnz loc_1003491  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
jz loc_10034C9  +
mov eax [ebp+arg_0] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_10034B7  +
sub eax [ebp+arg_0] +
sar eax 1 +
dec eax  +
jmp loc_10034CB  +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
cmp [ebp+lpString1] eax +
jz loc_1003510  +
cmp [ebp+lpString2] eax +
jz loc_1003506  +
push 0FFFFFFFFh  +
push [ebp+lpString2]  +
push 0FFFFFFFFh  +
push [ebp+lpString1]  +
push eax  +
push 400h  +
call ds:CompareStringW  +
dec eax  +
jz loc_100350B  +
dec eax  +
dec eax  +
jz loc_1003506  +
xor eax eax +
jmp loc_1003517  +
xor eax eax +
inc eax  +
jmp loc_1003517  +
or eax 0FFFFFFFFh +
jmp loc_1003517  +
mov eax [ebp+lpString2] +
neg eax  +
sbb eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi+104h] +
test eax eax +
jz loc_100353D  +
lea ecx [esi+4] +
cmp eax ecx +
jz loc_100353D  +
push eax  +
call ??_V@YAXPAX@Z  +
pop ecx  +
and dword ptr [esi+104h] 0 +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
xor ecx ecx +
push 2  +
pop edx  +
mul  edx +
seto cl  +
neg ecx  +
or ecx eax +
push ecx  +
call ??_U@YAPAXI@Z  +
pop ecx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
call sub_1002867  +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
push edi  +
lea eax [esi+14h] +
push eax  +
call ds:InterlockedDecrement  +
mov edi eax +
test edi edi +
jnz loc_10035B2  +
push dword ptr [esi+88h]  +
mov byte ptr [esi+8Ch] 1 +
call ds:SetEvent  +
mov eax edi +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
xor ebx ebx +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
mov esi ecx +
call ds:CreateEventW  +
mov [esi+88h] eax +
cmp eax ebx +
jz loc_10035FC  +
lea eax [ebp+ThreadId] +
push eax  +
push ebx  +
push esi  +
push offset StartAddress  +
push ebx  +
push ebx  +
call ds:CreateThread  +
cmp eax ebx +
jz loc_10035FC  +
push eax  +
call ds:CloseHandle  +
mov bl 1 +
pop esi  +
mov al bl +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
mov dword ptr [ecx+70h] offset unk_100D000 +
push [ebp+arg_0]  +
mov dword_100D860 ecx +
push ecx  +
mov dword ptr [ecx] 84h +
mov dword ptr [ecx+64h] 300h +
call sub_1003233  +
test eax eax +
jl loc_100364C  +
push esi  +
mov esi [ebp+arg_8] +
test esi esi +
jz loc_1003649  +
push edi  +
mov edi offset unk_100D864 +
movs   +
movs   +
movs   +
movs   +
pop edi  +
xor eax eax +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push esi  +
push edi  +
mov edx ecx +
and dword ptr [edx] 0 +
lea esi [edx+4] +
push 6  +
pop ecx  +
xor eax eax +
mov edi esi +
stos   +
mov [esi+18h] al +
pop edi  +
mov eax edx +
pop esi  +
retn   +
***
mov dword ptr [ecx] offset off_100162C +
mov dword ptr [ecx+4] 1 +
mov ecx offset unk_100D878 +
jmp sub_1003589  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov edx [eax] +
mov ecx [ebp+arg_4] +
cmp edx [ecx] +
jnz loc_10036C1  +
mov edx [eax+4] +
cmp edx [ecx+4] +
jnz loc_10036C1  +
mov edx [eax+8] +
cmp edx [ecx+8] +
jnz loc_10036C1  +
mov eax [eax+0Ch] +
cmp eax [ecx+0Ch] +
jnz loc_10036C1  +
xor eax eax +
inc eax  +
jmp loc_10036C3  +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+lpPathName]  +
xor esi esi +
push 104h  +
call ds:GetTempPathW  +
test eax eax +
jz loc_1003704  +
push [ebp+pMore]  +
push [ebp+lpPathName]  +
call ds:PathAppendW  +
test eax eax +
jz loc_1003704  +
push esi  +
push [ebp+lpPathName]  +
call ds:CreateDirectoryW  +
test eax eax +
jnz loc_100371A  +
call ds:GetLastError  +
cmp eax esi +
jle loc_1003718  +
and eax 0FFFFh +
or eax 80070000h +
mov esi eax +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push edi  +
xor edi edi +
xor ebx ebx +
cmp [ebp+arg_0] edi +
jle loc_1003777  +
push esi  +
mov eax [ebp+arg_4] +
lea esi [eax+edi*4] +
push 80h  +
push dword ptr [esi]  +
call ds:SetFileAttributesW  +
test eax eax +
jz loc_100375A  +
push dword ptr [esi]  +
call ds:DeleteFileW  +
test eax eax +
jnz loc_1003770  +
call ds:GetLastError  +
test eax eax +
jle loc_100376E  +
and eax 0FFFFh +
or eax 80070000h +
mov ebx eax +
inc edi  +
cmp edi [ebp+arg_0] +
jl loc_1003737  +
pop esi  +
pop edi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
cmp dword ptr [eax] 0 +
jnz loc_10037AE  +
cmp dword ptr [eax+4] 0 +
jnz loc_10037AE  +
cmp dword ptr [eax+8] 0C0h +
jnz loc_10037AE  +
cmp dword ptr [eax+0Ch] 46000000h +
jnz loc_10037AE  +
xor eax eax +
inc eax  +
jmp loc_10037B0  +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call ds:SysAllocString  +
mov [esi] eax +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
push dword ptr [esi]  +
call ds:SysFreeString  +
push [ebp+arg_0]  +
call ds:SysAllocString  +
mov [esi] eax +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
push ebx  +
push esi  +
push edi  +
jz loc_1003894  +
mov esi [ebp+arg_4] +
test esi esi +
jz loc_1003894  +
mov ebx [ebp+arg_C] +
test ebx ebx +
jnz loc_1003826  +
mov eax 80004003h +
jmp loc_1003899  +
push [ebp+arg_8]  +
and dword ptr [ebx] 0 +
call sub_1003784  +
test eax eax +
jz loc_1003886  +
mov esi [esi+4] +
add esi [ebp+arg_0] +
mov eax [esi] +
push esi  +
call dword ptr [eax+4]  +
mov [ebx] esi +
xor eax eax +
jmp loc_1003899  +
mov eax [esi] +
xor ecx ecx +
test eax eax +
setz cl  +
mov [ebp+arg_4] ecx +
test ecx ecx +
jnz loc_1003864  +
push [ebp+arg_8]  +
push eax  +
call sub_1003693  +
test eax eax +
jz loc_1003883  +
cmp edi 1 +
jz loc_1003835  +
push dword ptr [esi+4]  +
push ebx  +
push [ebp+arg_8]  +
push [ebp+arg_0]  +
call edi  +
test eax eax +
jz loc_1003899  +
cmp [ebp+arg_4] 0 +
jnz loc_1003883  +
test eax eax +
jl loc_1003899  +
add esi 0Ch +
mov edi [esi+8] +
test edi edi +
jnz loc_1003847  +
mov eax 80004002h +
jmp loc_1003899  +
mov eax 80070057h +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov ebx eax +
mov esi edx +
xor eax eax +
xor edi edi +
test esi esi +
jz loc_10038DA  +
cmp [ebp+arg_4] eax +
jz loc_10038D6  +
movzx edx word ptr [ebx] +
test dx dx +
jz loc_10038D6  +
mov [ecx] dx +
inc ecx  +
inc ecx  +
inc ebx  +
inc ebx  +
dec esi  +
dec [ebp+arg_4]  +
inc edi  +
test esi esi +
jnz loc_10038B9  +
test esi esi +
jnz loc_10038E2  +
dec ecx  +
dec ecx  +
dec edi  +
mov eax 8007007Ah +
xor edx edx +
mov [ecx] dx +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_10038F0  +
mov [ecx] edi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 40Ch +
mov eax dword_100D608 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov esi ecx +
push dword ptr [esi]  +
mov [ebp+hInstance] edi +
call ds:SysFreeString  +
and dword ptr [esi] 0 +
mov ebx 200h +
push ebx  +
lea eax [ebp+Buffer] +
push eax  +
push [ebp+uID]  +
push edi  +
mov edi ds:LoadStringW +
call edi  +
test eax eax +
jnz loc_100394B  +
xor al al +
jmp loc_1003995  +
cmp eax 1FFh +
jnz loc_100396D  +
push 201h  +
lea eax [ebp+Buffer] +
push eax  +
push [ebp+uID]  +
push [ebp+hInstance]  +
call edi  +
cmp eax ebx +
jz loc_1003947  +
and [ebp+hInstance] 0 +
lea eax [ebp+Buffer] +
push eax  +
call ds:SysAllocString  +
test eax eax +
lea ecx [ebp+hInstance] +
mov [esi] eax +
setnz bl  +
call sub_100348A  +
mov al bl +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100A24F  +
leave   +
retn 8  +
***
mov edi edi +
push esi  +
mov esi ecx +
and dword ptr [esi+4] 0 +
push offset Addend  +
mov dword ptr [esi] offset off_1001650 +
call ds:InterlockedIncrement  +
mov eax esi +
pop esi  +
retn 4  +
***
mov edi edi +
push ebx  +
push esi  +
mov esi ecx +
mov eax [esi] +
xor ebx ebx +
push edi  +
mov edi ds:CloseHandle +
cmp eax ebx +
jz loc_1003A17  +
push 0FFFFFFFFh  +
push eax  +
call sub_100A814  +
test al al +
jz loc_1003A17  +
mov eax [esi+8] +
cmp eax ebx +
jz loc_1003A02  +
push eax  +
call ds:UnmapViewOfFile  +
mov [esi+8] ebx +
mov eax [esi+4] +
cmp eax ebx +
jz loc_1003A0F  +
push eax  +
call edi  +
mov [esi+4] ebx +
push dword ptr [esi]  +
call ds:ReleaseMutex  +
mov eax [esi+8] +
cmp eax ebx +
jz loc_1003A28  +
push eax  +
call ds:UnmapViewOfFile  +
mov [esi+8] ebx +
mov eax [esi+4] +
cmp eax ebx +
jz loc_1003A35  +
push eax  +
call edi  +
mov [esi+4] ebx +
mov eax [esi] +
cmp eax ebx +
jz loc_1003A40  +
push eax  +
call edi  +
mov [esi] ebx +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
push edi  +
mov edi [ebp+arg_0] +
cmp [ebp+arg_4] eax +
jz loc_1003A82  +
push esi  +
mov esi edi +
cmp [edi] ax +
jz loc_1003A68  +
inc esi  +
inc esi  +
cmp [esi] ax +
jnz loc_1003A61  +
push [ebp+arg_4]  +
call sub_10034A9  +
lea eax [eax+eax+2] +
push eax  +
push [ebp+arg_4]  +
push esi  +
call memcpy  +
add esp 0Ch +
pop esi  +
mov eax edi +
pop edi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push esi  +
push edi  +
mov esi ecx +
xor edi edi +
cmp [esi+8] edi +
jz loc_1003AAB  +
push 0FFFFFFFFh  +
push dword ptr [esi]  +
call sub_100A814  +
test al al +
jz loc_1003AAB  +
mov edi [esi+8] +
mov eax edi +
pop edi  +
pop esi  +
retn   +
***
mov dword ptr [ecx] offset off_1001650 +
mov dword ptr [ecx+4] 1 +
mov ecx offset unk_100D878 +
jmp sub_1003589  +
***
mov edi edi +
push esi  +
mov esi ecx +
and dword ptr [esi+4] 0 +
push offset Addend  +
mov dword ptr [esi] offset off_1001664 +
call ds:InterlockedIncrement  +
mov eax esi +
pop esi  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push offset off_1001674  +
push ecx  +
call sub_10037FF  +
pop ebp  +
retn 8  +
***
mov dword ptr [ecx] offset off_1001664 +
mov dword ptr [ecx+4] 1 +
mov ecx offset unk_100D878 +
jmp sub_1003589  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+10h]  +
mov ecx [ebp+8] +
push dword ptr [ebp+0Ch]  +
call sub_1003AF6  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push dword ptr [ebp+10h]  +
mov esi [ebp+8] +
mov eax [esi+4] +
push dword ptr [ebp+0Ch]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx]  +
test eax eax +
jge loc_1003B7A  +
cmp esi [esi+4] +
jz loc_1003B7A  +
push dword ptr [ebp+10h]  +
mov ecx esi +
push dword ptr [ebp+0Ch]  +
call sub_1003AF6  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov eax [eax+4] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_4] +
test ebx ebx +
jz loc_1003BE2  +
push esi  +
push edi  +
push ebx  +
call sub_10034A9  +
mov esi [ebp+arg_8] +
inc eax  +
cmp esi eax +
jb loc_1003BC4  +
push ebx  +
call sub_10034A9  +
mov esi eax +
inc esi  +
lea edi [esi+esi] +
push edi  +
push ebx  +
mov ebx [ebp+arg_0] +
push ebx  +
call memcpy  +
add esp 0Ch +
cmp esi [ebp+arg_8] +
jnb loc_1003BE0  +
xor eax eax +
mov [edi+ebx] ax +
pop edi  +
pop esi  +
mov eax [ebp+arg_0] +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 224h +
mov eax dword_100D608 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
push edi  +
xor esi esi +
mov eax ecx +
mov ecx [ebp+lpSubKey] +
push esi  +
push 2001Fh  +
push ecx  +
push dword ptr [eax]  +
mov [ebp+var_21C] ecx +
lea ecx [ebp+var_214] +
mov [ebp+var_218] eax +
mov [ebp+var_214] esi +
mov [ebp+var_210] esi +
mov [ebp+var_20C] esi +
call sub_1002BC4  +
mov edi eax +
cmp edi esi +
jz loc_1003C62  +
lea ecx [ebp+var_214] +
call sub_1002B51  +
mov eax edi +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_100A24F  +
leave   +
retn 4  +
mov edi ds:RegEnumKeyExW +
jmp loc_1003C80  +
lea eax [ebp+SubKey] +
push eax  +
lea ecx [ebp+var_214] +
call sub_1003BEF  +
cmp eax esi +
jnz loc_1003CCB  +
lea eax [ebp+var_224] +
push eax  +
push esi  +
push esi  +
push esi  +
lea eax [ebp+var_208] +
push eax  +
lea eax [ebp+SubKey] +
push eax  +
push esi  +
push [ebp+var_214]  +
mov [ebp+var_208] 100h +
call edi  +
test eax eax +
jz loc_1003C6A  +
lea ecx [ebp+var_214] +
call sub_1002B51  +
push [ebp+var_21C]  +
mov ecx [ebp+var_218] +
call sub_1002ACB  +
lea ecx [ebp+var_214] +
mov esi eax +
call sub_1002B51  +
mov eax esi +
jmp loc_1003C52  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
and [ebp+var_C] 0 +
push esi  +
push edi  +
push 8  +
push 40h  +
mov edi ecx +
call ds:LocalAlloc  +
mov esi eax +
test esi esi +
jnz loc_1003D0E  +
mov eax 8007000Eh +
jmp loc_1003DDF  +
push ebx  +
push [ebp+lpString]  +
mov ebx ds:lstrlenW +
call ebx  +
push [ebp+arg_4]  +
lea eax [eax+eax+2] +
mov [ebp+cb] eax +
call ebx  +
push [ebp+cb]  +
mov ebx ds:CoTaskMemAlloc +
lea eax [eax+eax+2] +
mov [ebp+var_8] eax +
call ebx  +
push [ebp+var_8]  +
mov [esi] eax +
call ebx  +
mov ecx [esi] +
mov [esi+4] eax +
test ecx ecx +
jz loc_1003DC4  +
test eax eax +
jz loc_1003DC4  +
push [ebp+cb]  +
push [ebp+lpString]  +
push ecx  +
call memcpy  +
push [ebp+var_8]  +
push [ebp+arg_4]  +
push dword ptr [esi+4]  +
call memcpy  +
mov eax [edi+8] +
add esp 18h +
cmp [edi+4] eax +
jnz loc_1003DB4  +
add eax eax +
mov [edi+8] eax +
shl eax 2 +
push eax  +
push dword ptr [edi]  +
call ds:realloc  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_1003DB2  +
push dword ptr [esi]  +
mov ebx ds:CoTaskMemFree +
call ebx  +
push dword ptr [esi+4]  +
call ebx  +
push esi  +
call sub_1002585  +
mov eax [edi+8] +
cdq   +
sub eax edx +
sar eax 1 +
pop ecx  +
mov [edi+8] eax +
mov [ebp+var_C] 8007000Eh +
jmp loc_1003DBF  +
mov [edi] eax +
mov eax [edi+4] +
mov ecx [edi] +
mov [ecx+eax*4] esi +
inc dword ptr [edi+4]  +
mov eax [ebp+var_C] +
jmp loc_1003DDE  +
mov edi ds:CoTaskMemFree +
push ecx  +
call edi  +
push dword ptr [esi+4]  +
call edi  +
push esi  +
call sub_1002585  +
pop ecx  +
mov eax 8007000Eh +
pop ebx  +
pop edi  +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
push esi  +
push edi  +
mov esi ecx +
xor edi edi +
cmp [esi+4] edi +
jle loc_1003E1A  +
mov eax [esi] +
mov eax [eax+edi*4] +
push [ebp+lpString2]  +
mov eax [eax] +
push eax  +
call ds:lstrcmpiW  +
test eax eax +
jz loc_1003E1E  +
inc edi  +
cmp edi [esi+4] +
jl loc_1003DFF  +
xor esi esi +
jmp loc_1003E26  +
mov eax [esi] +
mov eax [eax+edi*4] +
mov esi [eax+4] +
lea ecx [ebp+var_4] +
call sub_100348A  +
pop edi  +
mov eax esi +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
push esi  +
mov esi ecx +
cmp dword ptr [esi+4] 0 +
jle loc_1003E7B  +
push ebx  +
mov ebx ds:CoTaskMemFree +
push edi  +
mov eax [esi] +
mov ecx [ebp+var_4] +
mov edi [eax+ecx*4] +
push dword ptr [edi+4]  +
call ebx  +
push dword ptr [edi]  +
call ebx  +
push edi  +
call sub_1002585  +
inc [ebp+var_4]  +
mov eax [ebp+var_4] +
cmp eax [esi+4] +
pop ecx  +
jl loc_1003E56  +
pop edi  +
pop ebx  +
and dword ptr [esi+4] 0 +
xor eax eax +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ebp+arg_0] +
push ebx  +
push esi  +
push edi  +
xor edi edi +
mov ebx ecx +
mov [ebp+var_4] edi +
mov esi eax +
cmp eax edi +
jnz loc_1003EB3  +
lea ecx [ebp+var_4] +
call sub_100348A  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
cmp [eax] di +
jz loc_1003ECB  +
push esi  +
mov ecx ebx +
call sub_1002CC8  +
test eax eax +
jz loc_1003ECE  +
inc esi  +
inc esi  +
cmp [esi] di +
jnz loc_1003EB8  +
xor edi edi +
inc edi  +
lea ecx [ebp+var_4] +
call sub_100348A  +
mov eax edi +
jmp loc_1003EAC  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 58h +
mov eax dword_100D608 +
xor eax ebp +
mov [ebp+var_4] eax +
and [ebp+var_48] 0 +
push ebx  +
mov ebx [ebp+arg_4] +
push esi  +
push edi  +
mov edi [ebp+lpString] +
mov esi ecx +
mov [ebp+var_4C] ebx +
test edi edi +
jz loc_1004043  +
test ebx ebx +
jz loc_1004043  +
and dword ptr [ebx] 0 +
push edi  +
call ds:lstrlenW  +
lea eax [eax+eax+2] +
push eax  +
lea ecx [ebp+var_58] +
call sub_1002C9F  +
xor eax eax +
cmp [ebp+pv] eax +
jnz loc_1003F4A  +
push eax  +
call ds:CoTaskMemFree  +
lea ecx [ebp+var_48] +
call sub_100348A  +
mov eax 8007000Eh +
jmp loc_1004050  +
mov [esi] edi +
cmp [edi] ax +
jz loc_1004004  +
mov edi ds:CharNextW +
mov eax [esi] +
cmp word ptr [eax] 25h +
push eax  +
jnz loc_1003F6F  +
call edi  +
mov [esi] eax +
cmp word ptr [eax] 25h +
jnz loc_1003F98  +
push eax  +
lea ecx [ebp+var_58] +
call sub_1002CC8  +
test eax eax +
jnz loc_1003FF4  +
mov esi 8007000Eh +
push [ebp+pv]  +
call ds:CoTaskMemFree  +
lea ecx [ebp+var_48] +
call sub_100348A  +
mov eax esi +
jmp loc_1004050  +
push 25h  +
push eax  +
call sub_1002E0F  +
mov ebx eax +
test ebx ebx +
jz loc_100402F  +
mov ecx [esi] +
sub eax ecx +
sar eax 1 +
cmp eax 1Fh +
jg loc_1004039  +
inc eax  +
push eax  +
push ecx  +
lea eax [ebp+String2] +
push eax  +
call ds:lstrcpynW  +
mov ecx [esi+4] +
lea eax [ebp+String2] +
push eax  +
call sub_1003DEA  +
test eax eax +
jz loc_100402F  +
push eax  +
lea ecx [ebp+var_58] +
call sub_1003E89  +
test eax eax +
jz loc_1003F7B  +
cmp [esi] ebx +
jz loc_1003FF1  +
push dword ptr [esi]  +
call edi  +
mov [esi] eax +
cmp eax ebx +
jnz loc_1003FE7  +
mov ebx [ebp+var_4C] +
push dword ptr [esi]  +
call edi  +
mov [esi] eax +
cmp word ptr [eax] 0 +
jnz loc_1003F5B  +
push dword ptr [esi]  +
lea ecx [ebp+var_58] +
call sub_1002CC8  +
test eax eax +
jz loc_1003F7B  +
mov eax [ebp+pv] +
push 0  +
mov [ebx] eax +
call ds:CoTaskMemFree  +
lea ecx [ebp+var_48] +
call sub_100348A  +
xor eax eax +
jmp loc_1004050  +
mov esi 80020009h +
jmp loc_1003F80  +
mov esi 80004005h +
jmp loc_1003F80  +
lea ecx [ebp+var_48] +
call sub_100348A  +
mov eax 80004003h +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100A24F  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
push ebx  +
mov ebx [ebp+arg_0] +
test ebx ebx +
jnz loc_1004080  +
mov eax 80070057h +
jmp loc_100415A  +
push esi  +
mov esi [ebx+10h] +
push edi  +
test esi esi +
jz loc_10040AF  +
jmp loc_10040AA  +
mov eax [esi+10h] +
test eax eax +
jz loc_1004098  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
and dword ptr [esi+10h] 0 +
push 0  +
call dword ptr [esi+20h]  +
push esi  +
push ebx  +
call sub_1003212  +
mov esi eax +
cmp dword ptr [esi] 0 +
jnz loc_100408B  +
and [ebp+var_18] 0 +
xor eax eax +
lea edi [ebp+var_14] +
stos   +
stos   +
stos   +
stos   +
stos   +
lea eax [ebx+1Ch] +
push 6  +
pop ecx  +
lea edi [ebp+var_18] +
mov esi eax +
xor edx edx +
cmps   +
jz loc_10040D5  +
push eax  +
call ds:DeleteCriticalSection  +
lea eax [ebx+34h] +
push 6  +
pop ecx  +
lea edi [ebp+var_18] +
mov esi eax +
xor edx edx +
cmps   +
jz loc_10040ED  +
push eax  +
call ds:DeleteCriticalSection  +
lea eax [ebx+4Ch] +
push 6  +
pop ecx  +
lea edi [ebp+var_18] +
mov esi eax +
xor edx edx +
cmps   +
jz loc_1004105  +
push eax  +
call ds:DeleteCriticalSection  +
mov esi [ebx+80h] +
test esi esi +
jz loc_1004124  +
push dword ptr [esi+4]  +
call dword ptr [esi]  +
mov edi [esi+8] +
push esi  +
call sub_1002585  +
pop ecx  +
mov esi edi +
test edi edi +
jnz loc_100410F  +
xor esi esi +
cmp [ebx+18h] esi +
jz loc_1004156  +
cmp byte ptr [ebx+6Ch] 0 +
jz loc_1004156  +
mov edi ds:HeapDestroy +
cmp [ebx+78h] esi +
jz loc_1004151  +
mov eax [ebx+78h] +
lea eax [eax+esi*4] +
cmp dword ptr [eax] 0 +
jz loc_100414B  +
push dword ptr [eax]  +
call edi  +
inc esi  +
cmp esi [ebx+74h] +
jbe loc_100413C  +
push dword ptr [ebx+18h]  +
call edi  +
pop edi  +
xor eax eax +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1Ch +
mov eax dword_100D608 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
xor edi edi +
mov [ebp+var_1C] eax +
mov [ebp+ppv] edi +
cmp esi edi +
jnz loc_1004191  +
xor eax eax +
jmp loc_100422A  +
lea eax [ebp+ppv] +
push eax  +
push offset riid  +
push 1  +
push edi  +
push offset rclsid  +
call ds:CoCreateInstance  +
test eax eax +
jge loc_10041BB  +
mov eax [ebp+ppv] +
cmp eax edi +
jz loc_100418A  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_100418A  +
push ebx  +
mov ebx esi +
cmp [esi] edi +
jz loc_100421A  +
cmp [ebp+arg_8] 0 +
mov esi [ebx+4] +
mov eax [ebp+ppv] +
lea edi [ebp+var_14] +
movs   +
movs   +
lea edx [ebp+var_14] +
push edx  +
movs   +
push 1  +
push [ebp+var_1C]  +
movs   +
mov ecx [eax] +
push eax  +
jz loc_1004205  +
cmp dword ptr [ebx] 1 +
jnz loc_10041EB  +
call dword ptr [ecx+14h]  +
jmp loc_10041EE  +
call dword ptr [ecx+1Ch]  +
mov esi eax +
test esi esi +
jge loc_1004212  +
mov eax [ebp+ppv] +
test eax eax +
jz loc_1004201  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax esi +
jmp loc_1004229  +
cmp dword ptr [ebx] 1 +
jnz loc_100420F  +
call dword ptr [ecx+18h]  +
jmp loc_1004212  +
call dword ptr [ecx+20h]  +
add ebx 8 +
cmp dword ptr [ebx] 0 +
jnz loc_10041C2  +
mov eax [ebp+ppv] +
test eax eax +
jz loc_1004227  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
xor eax eax +
pop ebx  +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_100A24F  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 23Ch +
mov eax dword_100D608 +
xor eax ebp +
mov [ebp+var_4] eax +
mov ecx [ebp+arg_4] +
mov eax [ebp+arg_0] +
mov [ebp+lpString1] ecx +
mov ecx [ebp+arg_8] +
push edi  +
mov edi [ebp+arg_C] +
xor edx edx +
mov [ebp+var_23C] ecx +
mov [ebp+pptlib] edi +
cmp ecx edx +
jnz loc_100428D  +
mov eax 80004003h +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop edi  +
call sub_100A24F  +
leave   +
retn 10h  +
mov [ecx] edx +
cmp edi edx +
jz loc_1004279  +
mov [edi] edx +
cmp eax edx +
jnz loc_10042A0  +
mov eax 80070057h +
jmp loc_100427E  +
push ebx  +
push esi  +
mov ebx 104h +
push ebx  +
lea ecx [ebp+szFile] +
push ecx  +
push dword ptr [eax+0Ch]  +
mov [ebp+var_238] edx +
call ds:GetModuleFileNameW  +
mov esi eax +
cmp esi ebx +
jnz loc_10042DA  +
mov esi 8007006Fh +
lea ecx [ebp+var_238] +
call sub_100348A  +
mov eax esi +
pop esi  +
pop ebx  +
jmp loc_100427E  +
test esi esi +
jnz loc_10042E7  +
call sub_100298C  +
mov esi eax +
jmp loc_10042C9  +
cmp [ebp+lpString1] 0 +
jz loc_1004320  +
push [ebp+lpString1]  +
call ds:lstrlenW  +
add eax esi +
cmp eax 10Eh +
jl loc_100430C  +
mov esi 80004005h +
jmp loc_10042C9  +
push [ebp+lpString1]  +
lea eax [ebp+esi*2+szFile] +
push eax  +
call ds:lstrcpyW  +
mov ebx ds:LoadTypeLib +
push edi  +
lea eax [ebp+szFile] +
push eax  +
call ebx  +
mov esi eax +
xor edi edi +
cmp esi edi +
jge loc_10043E8  +
mov [ebp+lpString1] edi +
lea eax [ebp+szFile] +
cmp [ebp+szFile] di +
jz loc_100438F  +
movzx ecx [ebp+szFile] +
cmp cx 5Ch +
jz loc_1004372  +
cmp cx 2Fh +
jz loc_1004372  +
cmp cx 2Eh +
jnz loc_1004378  +
mov [ebp+lpString1] eax +
jmp loc_1004378  +
mov [ebp+lpString1] edi +
push eax  +
call ds:CharNextW  +
movzx ecx word ptr [eax] +
cmp cx di +
jnz loc_1004358  +
cmp [ebp+lpString1] edi +
jnz loc_1004395  +
mov [ebp+lpString1] eax +
mov eax [ebp+lpString1] +
mov esi offset a_tlb +
lea edi [ebp+String2] +
movs   +
lea ecx [ebp+szFile] +
sub eax ecx +
sar eax 1 +
movs   +
add eax 5 +
movs   +
cmp eax 104h +
ja loc_1004305  +
lea eax [ebp+String2] +
push eax  +
push [ebp+lpString1]  +
call ds:lstrcpyW  +
push [ebp+pptlib]  +
lea eax [ebp+szFile] +
push eax  +
call ebx  +
mov esi eax +
test esi esi +
jl loc_10042C9  +
lea eax [ebp+szFile] +
push eax  +
call ds:SysAllocString  +
mov ecx [ebp+var_23C] +
mov [ecx] eax +
jmp loc_10042C9  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
and [ebp+var_8] 0 +
and [ebp+var_4] 0 +
push edi  +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_8] +
push eax  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_100423F  +
mov edi eax +
test edi edi +
jl loc_1004491  +
mov eax [ebp+var_4] +
mov ecx [eax] +
lea edx [ebp+arg_4] +
push edx  +
push eax  +
call dword ptr [ecx+1Ch]  +
mov edi eax +
test edi edi +
jl loc_1004491  +
push esi  +
push offset aOleaut32_dll  +
call ds:LoadLibraryW  +
mov esi eax +
test esi esi +
jz loc_1004484  +
push offset aUnregistertype  +
push esi  +
call ds:GetProcAddress  +
test eax eax +
jz loc_100447D  +
mov ecx [ebp+arg_4] +
push dword ptr [ecx+14h]  +
movzx edx word ptr [ecx+1Ah] +
push dword ptr [ecx+10h]  +
push edx  +
movzx edx word ptr [ecx+18h] +
push edx  +
push ecx  +
call eax  +
mov edi eax +
push esi  +
call ds:FreeLibrary  +
mov eax [ebp+var_4] +
push [ebp+arg_4]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+30h]  +
pop esi  +
mov eax [ebp+var_4] +
test eax eax +
jz loc_100449E  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
push [ebp+var_8]  +
call ds:SysFreeString  +
mov eax edi +
pop edi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 218h +
mov eax dword_100D608 +
xor eax ebp +
mov [ebp+var_4] eax +
mov ecx [ebp+arg_4] +
mov eax [ebp+arg_0] +
push ebx  +
push esi  +
push edi  +
lea edx [ebp+ptlib] +
push edx  +
lea edx [ebp+var_214] +
push edx  +
push ecx  +
xor esi esi +
push eax  +
mov [ebp+var_214] esi +
mov [ebp+ptlib] esi +
call sub_100423F  +
mov ebx [ebp+var_214] +
mov edi eax +
cmp edi esi +
jl loc_10045CA  +
mov eax [ebp+ptlib] +
lea edx [ebp+var_214] +
push edx  +
push esi  +
push esi  +
push esi  +
push 0FFFFFFFFh  +
mov [ebp+var_214] esi +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+24h]  +
test eax eax +
jl loc_10045AE  +
cmp [ebp+var_214] esi +
jz loc_10045AE  +
push ebx  +
call ds:SysStringLen  +
cmp eax 104h +
jbe loc_100457B  +
push [ebp+var_214]  +
call ds:SysFreeString  +
mov eax [ebp+ptlib] +
cmp eax esi +
jz loc_100455C  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov edi 80010135h +
push ebx  +
call ds:SysFreeString  +
mov ecx [ebp+var_4] +
mov eax edi +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100A24F  +
leave   +
retn 8  +
push ebx  +
lea eax [ebp+String1] +
push eax  +
call ds:lstrcpyW  +
lea edi [ebp+String1] +
call sub_10031CB  +
cmp eax 105h +
jnb loc_10045A5  +
xor ecx ecx +
mov [ebp+eax*2+String1] cx +
lea eax [ebp+String1] +
push eax  +
jmp loc_10045AF  +
push esi  +
push ebx  +
push [ebp+ptlib]  +
call ds:RegisterTypeLib  +
push [ebp+var_214]  +
mov edi eax +
call ds:SysFreeString  +
mov eax [ebp+ptlib] +
cmp eax esi +
jz loc_1004561  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_1004561  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_4] +
xor eax eax +
test edx edx +
jz loc_10045F7  +
cmp edx 7FFFFFFFh +
jbe loc_10045FC  +
mov eax 80070057h +
test eax eax +
jl loc_1004612  +
mov eax [ebp+arg_8] +
mov ecx [ebp+arg_0] +
push 7FFFFFFEh  +
push 0  +
call sub_10038A5  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_4] +
push ebx  +
xor eax eax +
push edi  +
mov ebx 7FFFFFFFh +
test edx edx +
jz loc_1004634  +
cmp edx ebx +
jbe loc_1004639  +
mov eax 80070057h +
mov edi [ebp+arg_0] +
test eax eax +
jl loc_1004670  +
and [ebp+arg_4] 0 +
xor ecx ecx +
push esi  +
mov esi edx +
mov eax edi +
cmp edx ecx +
jz loc_100465D  +
cmp [eax] cx +
jz loc_1004659  +
inc eax  +
inc eax  +
dec esi  +
jnz loc_100464F  +
cmp esi ecx +
jnz loc_1004666  +
mov [ebp+arg_4] 80070057h +
jmp loc_100466A  +
mov ecx edx +
sub ecx esi +
mov eax [ebp+arg_4] +
pop esi  +
jmp loc_1004672  +
xor ecx ecx +
test eax eax +
jl loc_1004686  +
mov eax [ebp+arg_8] +
push ebx  +
sub edx ecx +
push 0  +
lea ecx [edi+ecx*2] +
call sub_10038A5  +
pop edi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1003438  +
cmp [ebp+arg_0] 0 +
jz loc_10046B0  +
push [ebp+arg_0]  +
call ds:SysAllocString  +
mov [esi+4] eax +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov ecx [ebp+arg_0] +
lea eax [ecx+8] +
cmp eax ecx +
jnb loc_10046D0  +
xor eax eax +
jmp loc_10046E3  +
push eax  +
call sub_10027DA  +
test eax eax +
jz loc_10046CC  +
mov ecx [esi] +
mov [eax] ecx +
mov [esi] eax +
add eax 8 +
pop esi  +
pop ebp  +
retn 4  +
***
mov eax [ecx+104h] +
test eax eax +
jz loc_10046FE  +
push eax  +
call sub_10034A9  +
retn   +
xor eax eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_4] 0 +
jz loc_100472C  +
push [ebp+arg_4]  +
call sub_10034A9  +
lea eax [eax+eax+2] +
push eax  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call memcpy  +
add esp 0Ch +
mov eax [ebp+arg_0] +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+lpString1] 0 +
push edi  +
jz loc_100479B  +
cmp [ebp+lpString2] 0 +
jz loc_1004791  +
mov edi [ebp+arg_8] +
test edi edi +
jnz loc_1004755  +
xor eax eax +
jmp loc_10047A2  +
push esi  +
push [ebp+lpString2]  +
call sub_10034A9  +
push [ebp+lpString1]  +
mov esi eax +
call sub_10034A9  +
cmp edi esi +
jnb loc_100476E  +
mov esi edi +
cmp edi eax +
jb loc_1004774  +
mov edi eax +
push esi  +
push [ebp+lpString2]  +
push edi  +
push [ebp+lpString1]  +
push 0  +
push 400h  +
call ds:CompareStringW  +
dec eax  +
pop esi  +
jz loc_1004796  +
dec eax  +
dec eax  +
jnz loc_1004751  +
xor eax eax +
inc eax  +
jmp loc_10047A2  +
or eax 0FFFFFFFFh +
jmp loc_10047A2  +
mov eax [ebp+lpString2] +
neg eax  +
sbb eax eax +
pop edi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push edi  +
mov edi ecx +
cmp [edi+108h] eax +
jb loc_10047C3  +
mov al 1 +
jmp loc_1004809  +
push esi  +
mov esi [edi+10Ch] +
add esi eax +
push esi  +
call sub_100354B  +
mov [ebp+arg_0] eax +
test eax eax +
jz loc_1004806  +
push ebx  +
lea ebx [edi+104h] +
mov eax [ebx] +
test eax eax +
jz loc_10047F6  +
push eax  +
push [ebp+arg_0]  +
call sub_1004706  +
mov ecx edi +
call sub_1003520  +
mov eax [ebp+arg_0] +
mov [ebx] eax +
mov [edi+108h] esi +
mov al 1 +
pop ebx  +
jmp loc_1004808  +
xor al al +
pop esi  +
pop edi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_1003520  +
and dword ptr [esi+108h] 0 +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_10039D0  +
test [ebp+arg_0] 1 +
jz loc_1004845  +
push esi  +
call sub_1002585  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov dword ptr [ecx] offset off_10016FC +
add ecx 4 +
mov dword ptr [ecx] 1 +
jmp loc_1002A64  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+14h] +
mov eax 80004003h +
test esi esi +
jz loc_10048A5  +
and dword ptr [esi] 0 +
cmp dword ptr [ebp+0Ch] 0 +
jz loc_1004898  +
push dword ptr [ebp+10h]  +
call sub_1003784  +
test eax eax +
jnz loc_1004898  +
mov eax 80040110h +
jmp loc_10048A5  +
mov eax [ebp+8] +
push esi  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
call dword ptr [eax+24h]  +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
add eax 4 +
push eax  +
call ds:InterlockedIncrement  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push offset off_1001710  +
push ecx  +
call sub_10037FF  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ebp+0Ch] 0 +
jz loc_1004901  +
push offset Addend  +
call ds:InterlockedIncrement  +
jmp loc_100490B  +
mov ecx offset unk_100D878 +
call sub_1003589  +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+10h]  +
mov ecx [ebp+8] +
push dword ptr [ebp+0Ch]  +
call sub_10048CA  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push esi  +
mov esi ecx +
lea ecx [esi+4] +
call sub_1003655  +
mov dword ptr [esi] offset off_100173C +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1003677  +
test [ebp+arg_0] 1 +
jz loc_1004968  +
push esi  +
call sub_1002585  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1003AB5  +
test [ebp+arg_0] 1 +
jz loc_100498E  +
push esi  +
call sub_1002585  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1003B15  +
test [ebp+arg_0] 1 +
jz loc_10049B4  +
push esi  +
call sub_1002585  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
and dword ptr [esi+4] 0 +
push offset Addend  +
mov dword ptr [esi] offset off_100162C +
call ds:InterlockedIncrement  +
mov eax esi +
pop esi  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+8] +
dec dword ptr [ecx+4]  +
push esi  +
mov esi [ecx+4] +
jnz loc_1004A01  +
test ecx ecx +
jz loc_1004A01  +
push 1  +
call sub_100494E  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov dword ptr [ecx] offset off_1001754 +
mov dword ptr [ecx+4] 1 +
mov ecx offset unk_100D878 +
jmp sub_1003589  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+8] +
dec dword ptr [ecx+4]  +
push esi  +
mov esi [ecx+4] +
jnz loc_1004A45  +
test ecx ecx +
jz loc_1004A45  +
push 1  +
call sub_1004974  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
mov esi ecx +
and dword ptr [esi+4] 0 +
mov dword ptr [esi] offset off_1001764 +
and dword ptr [esi+0Ch] 0 +
push offset Addend  +
mov dword ptr [esi+8] offset off_1001698 +
mov [esi+0Ch] eax +
call ds:InterlockedIncrement  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
inc dword ptr [eax+4]  +
mov eax [eax+4] +
pop ebp  +
retn 4  +
***
mov dword ptr [ecx] offset off_1001764 +
mov dword ptr [ecx+4] 1 +
mov ecx offset unk_100D878 +
jmp sub_1003589  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+8] +
dec dword ptr [ecx+4]  +
push esi  +
mov esi [ecx+4] +
jnz loc_1004ADA  +
test ecx ecx +
jz loc_1004ADA  +
push 1  +
call sub_100499A  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
mov esi ecx +
and dword ptr [esi+4] 0 +
mov dword ptr [esi] offset off_1001774 +
and dword ptr [esi+0Ch] 0 +
push offset Addend  +
mov dword ptr [esi+8] offset off_10016AC +
mov [esi+0Ch] eax +
call ds:InterlockedIncrement  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push dword ptr [ebp+0Ch]  +
xor esi esi +
call sub_1003784  +
test eax eax +
jz loc_1004B4F  +
mov ecx [ebp+10h] +
test ecx ecx +
jnz loc_1004B42  +
mov eax 80004003h +
jmp loc_1004B64  +
mov eax [ebp+8] +
mov [ecx] eax +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
jmp loc_1004B62  +
push dword ptr [ebp+10h]  +
mov ecx [ebp+8] +
push dword ptr [ebp+0Ch]  +
add ecx 8 +
call sub_1003AF6  +
mov esi eax +
mov eax esi +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov dword ptr [ecx] offset off_1001774 +
mov dword ptr [ecx+4] 1 +
mov ecx offset unk_100D878 +
jmp sub_1003589  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov eax [eax+4] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
push edi  +
mov edi [esi+104h] +
test edi edi +
jz loc_1004BC1  +
call sub_10046ED  +
push eax  +
push edi  +
call ds:CharUpperBuffW  +
pop edi  +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 28h +
mov eax dword_100D608 +
xor eax ebp +
mov [ebp+var_4] eax +
and [ebp+var_1C] 0 +
push ebx  +
push esi  +
mov esi ds:malloc +
push edi  +
mov edi 2000h +
push edi  +
mov [ebp+var_14] ecx +
call esi  +
mov ebx eax +
pop ecx  +
mov [ebp+var_10] ebx +
test ebx ebx +
jnz loc_1004C22  +
mov esi 8007000Eh +
lea ecx [ebp+var_1C] +
call sub_100348A  +
mov eax esi +
lea esp [ebp-34h] +
pop edi  +
pop esi  +
pop ebx  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_100A24F  +
leave   +
retn 10h  +
mov ecx [ebp+var_14] +
push ebx  +
call sub_1002F34  +
mov [ebp+lpString] eax +
test eax eax +
jge loc_1004C3F  +
push ebx  +
call ds:free  +
mov esi [ebp+lpString] +
pop ecx  +
jmp loc_1004C04  +
lea eax [ebp+lpData] +
push eax  +
push ebx  +
call sub_1002D0F  +
test eax eax +
jnz loc_1004C5C  +
push ebx  +
call ds:free  +
pop ecx  +
mov esi 80020009h +
jmp loc_1004C04  +
push edi  +
call esi  +
mov ebx eax +
xor edi edi +
pop ecx  +
mov [ebp+var_20] ebx +
cmp ebx edi +
jnz loc_1004C77  +
push [ebp+var_10]  +
call ds:free  +
pop ecx  +
jmp loc_1004BFF  +
mov ecx [ebp+var_14] +
call sub_1002F0B  +
mov ecx [ebp+var_14] +
push ebx  +
call sub_1002F34  +
cmp eax edi +
mov [ebp+lpString] eax +
jge loc_1004CA0  +
mov edi ds:free +
push ebx  +
call edi  +
push [ebp+var_10]  +
call edi  +
pop ecx  +
jmp loc_1004C39  +
movzx eax word ptr [ebp+lpData] +
sub eax 8 +
jz loc_1004D84  +
sub eax 9 +
jz loc_1004CDA  +
dec eax  +
dec eax  +
jnz loc_1004E7F  +
lea eax [ebp+Data] +
push eax  +
push edi  +
push edi  +
push ebx  +
call ds:VarUI4FromStr  +
push [ebp+lpValueName]  +
mov ecx [ebp+arg_0] +
push dword ptr [ebp+Data]  +
call sub_1002C01  +
jmp loc_1004E7F  +
push ebx  +
call ds:lstrlenW  +
mov [ebp+lpString] eax +
test al 1 +
jnz loc_1004D9F  +
cdq   +
sub eax edx +
mov esi eax +
sar esi 1 +
mov [ebp+cbData] esi +
cmp esi 400h +
ja loc_1004D14  +
push esi  +
call sub_1002776  +
test al al +
jz loc_1004D14  +
mov eax esi +
call __alloca_probe_16  +
mov [ebp+lpData] esp +
jmp loc_1004D20  +
push esi  +
lea ecx [ebp+var_1C] +
call sub_10046BA  +
mov [ebp+lpData] eax +
cmp [ebp+lpData] edi +
jz loc_1004D9F  +
push esi  +
push edi  +
push [ebp+lpData]  +
call memset  +
add esp 0Ch +
cmp [ebp+lpString] edi +
jle loc_1004D68  +
mov ecx [ebp+lpData] +
mov eax edi +
cdq   +
sub eax edx +
sar eax 1 +
lea esi [eax+ecx] +
movzx eax word ptr [ebx+edi*2] +
push eax  +
call sub_1002D99  +
mov edx edi +
and edx 1 +
shl edx 2 +
push 4  +
pop ecx  +
sub ecx edx +
shl al cl +
or [esi] al +
inc edi  +
cmp edi [ebp+lpString] +
jl loc_1004D37  +
mov esi [ebp+cbData] +
mov eax [ebp+arg_0] +
mov eax [eax] +
push esi  +
push [ebp+lpData]  +
push 3  +
push 0  +
push [ebp+lpValueName]  +
push eax  +
call ds:RegSetValueExW  +
jmp loc_1004E7F  +
cmp [ebp+arg_C] 0 +
mov [ebp+lpData] ebx +
jz loc_1004E65  +
push ebx  +
call ds:lstrlenW  +
cmp eax 0FFEh +
jle loc_1004DB9  +
mov esi ds:free +
push ebx  +
call esi  +
push [ebp+var_10]  +
call esi  +
pop ecx  +
pop ecx  +
mov esi 80004005h +
jmp loc_1004C04  +
push 2000h  +
call esi  +
mov edi eax +
pop ecx  +
test edi edi +
jnz loc_1004DDB  +
mov esi ds:free +
push ebx  +
call esi  +
push [ebp+var_10]  +
call esi  +
pop ecx  +
jmp loc_1004C74  +
mov eax [ebp+var_14] +
mov ecx [eax+4] +
and [ebp+var_28] 0 +
push offset aModule  +
call sub_1003DEA  +
mov [ebp+lpString] eax +
test eax eax +
jz loc_1004E5D  +
push eax  +
push ebx  +
call sub_1002E45  +
mov esi eax +
mov [ebp+cbData] esi +
test esi esi +
jz loc_1004E5D  +
cmp esi [ebp+arg_8] +
jz loc_1004E19  +
push esi  +
push ebx  +
call ds:CharPrevW  +
cmp word ptr [eax] 22h +
jz loc_1004E5D  +
sub esi ebx +
sar esi 1 +
push esi  +
push ebx  +
xor eax eax +
push edi  +
mov [edi] ax +
call ds:lstrcpynW  +
mov esi ds:lstrcatW +
mov ebx offset String2 +
push ebx  +
push edi  +
call esi  +
push [ebp+lpString]  +
push edi  +
call esi  +
push ebx  +
push edi  +
call esi  +
push [ebp+lpString]  +
call ds:lstrlenW  +
mov ecx [ebp+cbData] +
lea eax [ecx+eax*2] +
push eax  +
push edi  +
call esi  +
mov ebx [ebp+var_20] +
mov [ebp+lpData] edi +
lea ecx [ebp+var_28] +
call sub_100348A  +
push [ebp+lpValueName]  +
mov ecx [ebp+arg_0] +
push [ebp+lpData]  +
call sub_1002C24  +
test edi edi +
jz loc_1004E7F  +
push edi  +
call ds:free  +
pop ecx  +
push [ebp+arg_8]  +
mov ecx [ebp+var_14] +
call sub_1002F34  +
mov esi eax +
push ebx  +
test esi esi +
jge loc_1004EA5  +
mov edi ds:free +
call edi  +
push [ebp+var_10]  +
call edi  +
pop ecx  +
pop ecx  +
jmp loc_1004C04  +
mov esi ds:free +
call esi  +
push [ebp+var_10]  +
call esi  +
pop ecx  +
pop ecx  +
xor esi esi +
jmp loc_1004C04  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 268h +
mov eax dword_100D608 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_4] +
push ebx  +
xor ebx ebx +
push esi  +
mov [ebp+var_218] eax +
mov eax [ebp+arg_C] +
push edi  +
mov edi [ebp+arg_0] +
mov [ebp+var_210] ecx +
mov [ebp+var_238] ebx +
mov [ebp+var_224] ebx +
mov [ebp+var_220] ebx +
mov [ebp+var_21C] ebx +
mov [ebp+lpSubKey] ebx +
mov [ebp+var_234] 1 +
mov [ebp+var_268] eax +
push edi  +
call sub_1002F34  +
mov esi eax +
cmp esi ebx +
jge loc_1005499  +
lea ecx [ebp+var_224] +
call sub_1002B51  +
lea ecx [ebp+var_238] +
call sub_100348A  +
mov eax esi +
lea esp [ebp-274h] +
pop edi  +
pop esi  +
pop ebx  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_100A24F  +
leave   +
retn 10h  +
push offset aDelete  +
push edi  +
call ds:lstrcmpiW  +
mov esi eax +
neg esi  +
sbb esi esi +
push offset aForceremove  +
inc esi  +
push edi  +
mov [ebp+var_258] esi +
call ds:lstrcmpiW  +
test eax eax +
jz loc_1004F8D  +
cmp esi ebx +
jz loc_100503F  +
mov ecx [ebp+var_210] +
push edi  +
call sub_1002F34  +
mov esi eax +
cmp esi ebx +
jl loc_1004F2D  +
cmp [ebp+arg_8] ebx +
jz loc_100503F  +
push 5Ch  +
push edi  +
mov [ebp+var_230] ebx +
mov [ebp+var_22C] ebx +
mov [ebp+var_228] ebx +
call sub_1002E0F  +
test eax eax +
jnz loc_10054A8  +
mov ecx [ebp+var_210] +
push edi  +
call sub_1003053  +
test eax eax +
jz loc_1004FF8  +
mov eax [ebp+var_218] +
push edi  +
lea ecx [ebp+var_230] +
mov [ebp+var_230] eax +
call sub_1003BEF  +
mov [ebp+var_230] ebx +
cmp [ebp+var_258] ebx +
jz loc_1005034  +
mov ecx [ebp+var_210] +
push edi  +
call sub_1002F34  +
mov esi eax +
cmp esi ebx +
jl loc_10054BD  +
mov ecx [ebp+var_210] +
push edi  +
call sub_1003150  +
lea ecx [ebp+var_230] +
mov esi eax +
call sub_1002B51  +
jmp loc_100544F  +
lea ecx [ebp+var_230] +
call sub_1002B51  +
push offset aNoremove  +
push edi  +
call ds:lstrcmpiW  +
test eax eax +
jnz loc_100506B  +
mov ecx [ebp+var_210] +
push edi  +
mov [ebp+var_234] ebx +
call sub_1002F34  +
mov esi eax +
cmp esi ebx +
jl loc_1004F2D  +
mov esi ds:lstrcmpiW +
push offset aVal  +
push edi  +
call esi  +
test eax eax +
jnz loc_1005179  +
mov ecx [ebp+var_210] +
lea eax [ebp+ValueName] +
push eax  +
call sub_1002F34  +
mov esi eax +
cmp esi ebx +
jl loc_1004F2D  +
mov ecx [ebp+var_210] +
push edi  +
call sub_1002F34  +
mov esi eax +
cmp esi ebx +
jl loc_1004F2D  +
cmp word ptr [edi] 3Dh +
jnz loc_10054B3  +
cmp [ebp+arg_8] ebx +
jz loc_1005106  +
mov eax [ebp+var_218] +
mov ecx [ebp+var_210] +
push ebx  +
mov [ebp+var_254] eax +
push edi  +
lea eax [ebp+ValueName] +
push eax  +
lea eax [ebp+var_254] +
push eax  +
mov [ebp+var_250] ebx +
mov [ebp+var_24C] ebx +
call sub_1004BCB  +
mov [ebp+var_254] ebx +
lea ecx [ebp+var_254] +
jmp loc_1005028  +
cmp [ebp+arg_C] ebx +
jnz loc_1005168  +
push ebx  +
push 20006h  +
push ebx  +
push [ebp+var_218]  +
lea ecx [ebp+hKey] +
mov [ebp+hKey] ebx +
mov [ebp+var_244] ebx +
mov [ebp+var_240] ebx +
call sub_1002BC4  +
cmp eax ebx +
jnz loc_10054C7  +
lea eax [ebp+ValueName] +
push eax  +
push [ebp+hKey]  +
call ds:RegDeleteValueW  +
cmp eax ebx +
jz loc_100515D  +
cmp eax 2 +
jnz loc_10054C5  +
lea ecx [ebp+hKey] +
call sub_1002B51  +
mov ecx [ebp+var_210] +
push edi  +
call sub_1003150  +
jmp loc_1004F23  +
push 5Ch  +
push edi  +
call sub_1002E0F  +
test eax eax +
jnz loc_10054B3  +
cmp [ebp+arg_8] ebx +
jz loc_1005254  +
push ebx  +
push 0F003Fh  +
push edi  +
push [ebp+var_218]  +
lea ecx [ebp+var_224] +
call sub_1002BC4  +
test eax eax +
jz loc_10051ED  +
push ebx  +
push 20019h  +
push edi  +
push [ebp+var_218]  +
lea ecx [ebp+var_224] +
call sub_1002BC4  +
test eax eax +
jz loc_10051ED  +
push ebx  +
push ebx  +
push 2001Fh  +
push ebx  +
push ebx  +
push edi  +
push [ebp+var_218]  +
lea ecx [ebp+var_224] +
call sub_1002B6F  +
test eax eax +
jnz loc_10054B3  +
movzx eax word ptr [edi] +
mov [ebp+var_23C] bl +
cmp ax 4Ch +
jz loc_1005202  +
cmp ax 6Ch +
jnz loc_1005215  +
push offset aLocalserver32  +
push edi  +
call esi  +
test eax eax +
jnz loc_1005215  +
mov [ebp+var_23C] 1 +
mov ecx [ebp+var_210] +
push edi  +
call sub_1002F34  +
mov esi eax +
cmp esi ebx +
jl loc_1004F2D  +
cmp word ptr [edi] 3Dh +
jnz loc_1005457  +
push dword ptr [ebp+var_23C]  +
mov ecx [ebp+var_210] +
push edi  +
push ebx  +
lea eax [ebp+var_224] +
push eax  +
call sub_1004BCB  +
jmp loc_100544D  +
cmp [ebp+arg_C] ebx +
jnz loc_100527C  +
push ebx  +
push 20019h  +
push edi  +
push [ebp+var_218]  +
lea ecx [ebp+var_224] +
call sub_1002BC4  +
test eax eax +
jz loc_100527C  +
mov [ebp+arg_C] 1 +
cmp [ebp+lpSubKey] ebx +
jnz loc_10052C0  +
mov esi 208h +
push esi  +
call sub_1002776  +
test al al +
jz loc_10052A2  +
mov eax esi +
call __alloca_probe_16  +
mov [ebp+lpSubKey] esp +
jmp loc_10052B4  +
push esi  +
lea ecx [ebp+var_238] +
call sub_10046BA  +
mov [ebp+lpSubKey] eax +
cmp [ebp+lpSubKey] ebx +
jz loc_10054E5  +
push 104h  +
push edi  +
push [ebp+lpSubKey]  +
call ds:lstrcpynW  +
cmp [ebp+arg_C] ebx +
jnz loc_1005305  +
push [ebp+var_224]  +
mov ecx [ebp+var_210] +
call sub_1003089  +
test eax eax +
jnz loc_1005305  +
push [ebp+var_224]  +
mov ecx [ebp+var_210] +
call sub_10030C5  +
test eax eax +
jz loc_10053D6  +
mov ecx [ebp+var_210] +
push edi  +
call sub_1002F34  +
mov esi eax +
cmp esi ebx +
jl loc_1004F2D  +
mov ecx [ebp+var_210] +
push edi  +
call sub_1003150  +
mov esi eax +
cmp esi ebx +
jl loc_1004F2D  +
cmp word ptr [edi] 7Bh +
jnz loc_1005380  +
push [ebp+arg_C]  +
mov ecx [ebp+var_210] +
push ebx  +
push [ebp+var_224]  +
push edi  +
call sub_1004EC0  +
mov esi eax +
cmp esi ebx +
jl loc_1004F2D  +
cmp [ebp+arg_C] ebx +
jz loc_1005389  +
mov eax [ebp+var_268] +
mov ecx [ebp+var_210] +
push edi  +
mov [ebp+arg_C] eax +
call sub_1002F34  +
mov esi eax +
cmp esi ebx +
jl loc_1004F2D  +
jmp loc_1005168  +
cmp [ebp+arg_C] ebx +
jnz loc_1005499  +
push [ebp+var_224]  +
mov ecx [ebp+var_210] +
call sub_1003089  +
test eax eax +
jz loc_10053CD  +
push [ebp+lpSubKey]  +
mov ecx [ebp+var_210] +
call sub_1003053  +
test eax eax +
jz loc_100548E  +
push [ebp+lpSubKey]  +
lea ecx [ebp+var_224] +
call sub_1003BEF  +
jmp loc_100548E  +
cmp [ebp+arg_C] ebx +
jnz loc_1005499  +
lea ecx [ebp+var_224] +
call sub_1002B51  +
test eax eax +
jnz loc_10054B3  +
cmp [ebp+var_234] ebx +
jz loc_100542B  +
mov eax [ebp+var_218] +
push [ebp+lpSubKey]  +
lea ecx [ebp+var_264] +
mov [ebp+var_260] ebx +
mov [ebp+var_25C] ebx +
mov [ebp+var_264] eax +
call sub_1002ACB  +
lea ecx [ebp+var_264] +
mov [ebp+var_264] ebx +
call sub_1002B51  +
mov ecx [ebp+var_210] +
push edi  +
call sub_1002F34  +
mov esi eax +
cmp esi ebx +
jl loc_1004F2D  +
mov ecx [ebp+var_210] +
push edi  +
call sub_1003150  +
mov esi eax +
cmp esi ebx +
jl loc_1004F2D  +
cmp [ebp+arg_8] ebx +
jz loc_1005499  +
cmp word ptr [edi] 7Bh +
jnz loc_1005499  +
push edi  +
call ds:lstrlenW  +
cmp eax 1 +
jnz loc_1005499  +
mov ecx [ebp+var_210] +
push ebx  +
push [ebp+arg_8]  +
push [ebp+var_224]  +
push edi  +
call sub_1004EC0  +
mov esi eax +
cmp esi ebx +
jl loc_1004F2D  +
mov ecx [ebp+var_210] +
jmp loc_1004F1D  +
cmp word ptr [edi] 7Dh +
jnz loc_1004F5C  +
jmp loc_1004F2D  +
lea ecx [ebp+var_230] +
call sub_1002B51  +
mov esi 80020009h +
jmp loc_1004F2D  +
lea ecx [ebp+var_230] +
jmp loc_10054DB  +
cmp eax ebx +
jle loc_10054D3  +
and eax 0FFFFh +
or eax 80070000h +
mov esi eax +
lea ecx [ebp+hKey] +
call sub_1002B51  +
jmp loc_1004F2D  +
mov esi 8007000Eh +
jmp loc_1004F2D  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ebp+arg_0] +
test eax eax +
jnz loc_100550B  +
mov eax 80070057h +
jmp locret_100559D  +
push ebx  +
mov ebx [eax+10h] +
test ebx ebx +
jnz loc_100551A  +
xor eax eax +
jmp loc_100559C  +
and [ebp+var_4] 0 +
push esi  +
push edi  +
mov edi [ebx] +
test edi edi +
jz loc_1005584  +
mov esi [ebp+arg_8] +
test esi esi +
jnz loc_100553A  +
mov eax [ebx+18h] +
test eax eax +
jz loc_1005543  +
call eax  +
test eax eax +
jmp loc_1005541  +
push 4  +
pop ecx  +
xor eax eax +
cmps   +
jnz loc_100556E  +
push 1  +
call dword ptr [ebx+4]  +
mov [ebp+var_4] eax +
test eax eax +
jl loc_1005597  +
mov eax [ebp+arg_0] +
cmp dword ptr [eax] 84h +
jnz loc_100556E  +
push 1  +
call dword ptr [ebx+1Ch]  +
push eax  +
push dword ptr [ebx]  +
call sub_1004164  +
mov [ebp+var_4] eax +
test eax eax +
jl loc_1005597  +
push ebx  +
push [ebp+arg_0]  +
call sub_1003212  +
mov ebx eax +
mov edi [ebx] +
test edi edi +
jnz loc_1005526  +
cmp [ebp+var_4] edi +
jl loc_1005597  +
cmp [ebp+arg_4] 0 +
jz loc_1005597  +
push 0  +
push [ebp+arg_0]  +
call sub_10044B3  +
mov [ebp+var_4] eax +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jnz loc_10055B9  +
mov eax 80070057h +
jmp loc_100562F  +
push ebx  +
mov ebx [eax+10h] +
test ebx ebx +
jz loc_100562C  +
push edi  +
mov edi [ebx] +
test edi edi +
jz loc_100561B  +
push esi  +
mov esi [ebp+arg_8] +
test esi esi +
jnz loc_10055DD  +
mov eax [ebx+18h] +
test eax eax +
jz loc_10055E6  +
call eax  +
test eax eax +
jmp loc_10055E4  +
push 4  +
pop ecx  +
xor eax eax +
cmps   +
jnz loc_1005609  +
push 0  +
call dword ptr [ebx+4]  +
mov eax [ebp+arg_0] +
cmp dword ptr [eax] 84h +
jnz loc_1005609  +
mov eax [ebx+1Ch] +
test eax eax +
jz loc_1005609  +
push 0  +
call eax  +
push eax  +
push dword ptr [ebx]  +
call sub_1004164  +
push ebx  +
push [ebp+arg_0]  +
call sub_1003212  +
mov ebx eax +
mov edi [ebx] +
test edi edi +
jnz loc_10055C9  +
pop esi  +
cmp [ebp+arg_4] 0 +
pop edi  +
jz loc_100562C  +
push 0  +
push [ebp+arg_0]  +
call sub_1004407  +
xor eax eax +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
and dword ptr [esi+4] 0 +
mov dword ptr [esi] offset off_1001624 +
call sub_1004691  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov esi ecx +
mov ecx edi +
call sub_10046ED  +
mov ecx esi +
mov ebx eax +
call sub_10046ED  +
lea eax [ebx+eax+1] +
push eax  +
mov ecx esi +
call sub_10047AC  +
test al al +
jz loc_100569C  +
push dword ptr [edi+104h]  +
push dword ptr [esi+104h]  +
call sub_1003A49  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
push esi  +
mov esi ecx +
jz loc_10056DB  +
push [ebp+arg_0]  +
call sub_10034A9  +
inc eax  +
push eax  +
mov ecx esi +
call sub_10047AC  +
test al al +
jz loc_10056DB  +
push [ebp+arg_0]  +
push dword ptr [esi+104h]  +
call sub_1004706  +
jmp loc_10056FC  +
push 1  +
mov ecx esi +
call sub_10047AC  +
test al al +
jz loc_10056F5  +
mov eax [esi+104h] +
xor ecx ecx +
mov [eax] cx +
jmp loc_10056FC  +
mov ecx esi +
call sub_1004813  +
xor eax eax +
cmp [esi+104h] eax +
pop esi  +
setnz al  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
mov esi ecx +
cmp eax [esi+104h] +
jz loc_100572A  +
push eax  +
call sub_10056A8  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ecx+104h] +
mov eax [ebp+arg_0] +
test ecx ecx +
jnz loc_100575E  +
cmp dword ptr [eax+104h] 0 +
jnz loc_1005755  +
xor eax eax +
jmp loc_1005784  +
test ecx ecx +
jnz loc_100575E  +
or eax 0FFFFFFFFh +
jmp loc_1005784  +
mov eax [eax+104h] +
test eax eax +
jnz loc_100576B  +
inc eax  +
jmp loc_1005784  +
cmp [ebp+arg_4] 0 +
jge loc_100577A  +
push eax  +
push ecx  +
call sub_10034D4  +
jmp loc_1005784  +
push [ebp+arg_4]  +
push eax  +
push ecx  +
call sub_1004738  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_10017C8 +
call sub_1004813  +
test byte ptr [ebp+8] 1 +
jz loc_10057AD  +
push esi  +
call sub_1002585  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
push edi  +
mov edi ecx +
lea ecx [edi+340h] +
mov esi offset off_10017C8 +
mov [ecx] esi +
call sub_1004813  +
lea ecx [edi+230h] +
mov [ecx] esi +
call sub_1004813  +
lea ecx [edi+120h] +
mov [ecx] esi +
call sub_1004813  +
lea ecx [edi+10h] +
pop edi  +
mov [ecx] esi +
pop esi  +
jmp sub_1004813  +
***
mov edi edi +
push esi  +
mov esi ecx +
push edi  +
lea ecx [esi+110h] +
mov edi offset off_10017C8 +
mov [ecx] edi +
call sub_1004813  +
mov [esi] edi +
pop edi  +
mov ecx esi +
pop esi  +
jmp sub_1004813  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov ecx [esi+0Ch] +
test ecx ecx +
jz loc_1005837  +
push 1  +
call sub_100482B  +
mov esi [esi] +
test esi esi +
jz loc_1005844  +
push esi  +
call sub_1002585  +
pop ecx  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1005824  +
test [ebp+arg_0] 1 +
jz loc_1005865  +
push esi  +
call sub_1002585  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_10057B9  +
test [ebp+arg_0] 1 +
jz loc_100588B  +
push esi  +
call sub_1002585  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1004851  +
test [ebp+arg_0] 1 +
jz loc_10058B1  +
push esi  +
call sub_1002585  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_1004932  +
mov dword ptr [esi] offset off_10016FC +
mov eax esi +
pop esi  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+8] +
push edi  +
lea eax [esi+4] +
push eax  +
call ds:InterlockedDecrement  +
mov edi eax +
test edi edi +
jnz loc_10058FF  +
test esi esi +
jz loc_10058FF  +
push 1  +
mov ecx esi +
call sub_1005897  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_8] +
xor esi esi +
cmp edi esi +
jnz loc_1005923  +
mov eax 80004003h +
jmp loc_100596A  +
push ebx  +
push 8  +
push 40h  +
mov [edi] esi +
mov ebx 8007000Eh +
call ds:LocalAlloc  +
cmp eax esi +
jz loc_1005945  +
push [ebp+arg_0]  +
mov ecx eax +
call sub_10049C0  +
mov esi eax +
test esi esi +
jz loc_1005967  +
inc dword ptr [esi+4]  +
dec dword ptr [esi+4]  +
mov eax [esi] +
push edi  +
push [ebp+arg_4]  +
push esi  +
call dword ptr [eax]  +
mov ebx eax +
test ebx ebx +
jz loc_1005967  +
push 1  +
mov ecx esi +
call sub_100494E  +
mov eax ebx +
pop ebx  +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_8] +
xor esi esi +
cmp edi esi +
jnz loc_100598C  +
mov eax 80004003h +
jmp loc_10059D3  +
push ebx  +
push 8  +
push 40h  +
mov [edi] esi +
mov ebx 8007000Eh +
call ds:LocalAlloc  +
cmp eax esi +
jz loc_10059AE  +
push [ebp+arg_0]  +
mov ecx eax +
call sub_10039AB  +
mov esi eax +
test esi esi +
jz loc_10059D0  +
inc dword ptr [esi+4]  +
dec dword ptr [esi+4]  +
mov eax [esi] +
push edi  +
push [ebp+arg_4]  +
push esi  +
call dword ptr [eax]  +
mov ebx eax +
test ebx ebx +
jz loc_10059D0  +
push 1  +
mov ecx esi +
call sub_1004974  +
mov eax ebx +
pop ebx  +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_8] +
xor esi esi +
cmp edi esi +
jnz loc_10059F5  +
mov eax 80004003h +
jmp loc_1005A3C  +
push ebx  +
push 8  +
push 40h  +
mov [edi] esi +
mov ebx 8007000Eh +
call ds:LocalAlloc  +
cmp eax esi +
jz loc_1005A17  +
push [ebp+arg_0]  +
mov ecx eax +
call sub_1003AD1  +
mov esi eax +
test esi esi +
jz loc_1005A39  +
inc dword ptr [esi+4]  +
dec dword ptr [esi+4]  +
mov eax [esi] +
push edi  +
push [ebp+arg_4]  +
push esi  +
call dword ptr [eax]  +
mov ebx eax +
test ebx ebx +
jz loc_1005A39  +
push 1  +
mov ecx esi +
call sub_100499A  +
mov eax ebx +
pop ebx  +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
test [ebp+arg_0] 2 +
push edi  +
mov edi ecx +
jz loc_1005A7D  +
push esi  +
push offset sub_10057FC  +
lea esi [edi-4] +
push dword ptr [esi]  +
push 220h  +
push edi  +
call sub_10025A0  +
test [ebp+arg_0] 1 +
jz loc_1005A78  +
push esi  +
call ??_V@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
jmp loc_1005A91  +
call sub_10057FC  +
test [ebp+arg_0] 1 +
jz loc_1005A8F  +
push edi  +
call sub_1002585  +
pop ecx  +
mov eax edi +
pop edi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1004A0D  +
test [ebp+arg_0] 1 +
jz loc_1005AB5  +
push esi  +
call sub_1002585  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1004AA2  +
test [ebp+arg_0] 1 +
jz loc_1005ADB  +
push esi  +
call sub_1002585  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1004B6E  +
test [ebp+arg_0] 1 +
jz loc_1005B01  +
push esi  +
call sub_1002585  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
mov esi ecx +
and dword ptr [esi+4] 0 +
mov dword ptr [esi] offset off_1001754 +
and dword ptr [esi+0Ch] 0 +
push offset Addend  +
mov dword ptr [esi+8] offset off_1001784 +
mov [esi+0Ch] eax +
call ds:InterlockedIncrement  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+8] +
dec dword ptr [ecx+4]  +
push esi  +
mov esi [ecx+4] +
jnz loc_1005B63  +
test ecx ecx +
jz loc_1005B63  +
push 1  +
call sub_1005A9B  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+8] +
dec dword ptr [ecx+4]  +
push esi  +
mov esi [ecx+4] +
jnz loc_1005B8B  +
test ecx ecx +
jz loc_1005B8B  +
push 1  +
call sub_1005AC1  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+8] +
dec dword ptr [ecx+4]  +
push esi  +
mov esi [ecx+4] +
jnz loc_1005BB3  +
test ecx ecx +
jz loc_1005BB3  +
push 1  +
call sub_1005AE7  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
mov esi ecx +
cmp eax esi +
jz loc_1005BD9  +
push dword ptr [eax+104h]  +
call sub_10056A8  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
and [ebp+pv] 0 +
push ebx  +
push esi  +
push 2000h  +
mov esi ecx +
call ds:malloc  +
mov ebx eax +
pop ecx  +
mov [ebp+var_4] ebx +
test ebx ebx +
jnz loc_1005C13  +
mov eax 8007000Eh +
jmp loc_1005CE1  +
push edi  +
lea eax [ebp+pv] +
push eax  +
push [ebp+lpString]  +
mov ecx esi +
call sub_1003EDF  +
mov edi eax +
test edi edi +
jl loc_1005CD6  +
mov eax [ebp+pv] +
mov [esi] eax +
jmp loc_1005CA7  +
push ebx  +
mov ecx esi +
call sub_1002F34  +
mov edi eax +
test edi edi +
jl loc_1005CCD  +
push ebx  +
call sub_1002DD8  +
mov [ebp+lpString] eax +
test eax eax +
jz loc_1005CB0  +
push ebx  +
mov ecx esi +
call sub_1002F34  +
mov edi eax +
xor eax eax +
cmp edi eax +
jl loc_1005CCD  +
push 7Bh  +
pop ecx  +
cmp cx [ebx] +
jnz loc_1005CB0  +
mov ecx esi +
cmp [ebp+arg_4] eax +
jz loc_1005C8D  +
mov ebx [esi] +
push eax  +
push [ebp+arg_4]  +
push [ebp+lpString]  +
push [ebp+var_4]  +
call sub_1004EC0  +
mov edi eax +
test edi edi +
jl loc_1005CB7  +
mov ebx [ebp+var_4] +
jmp loc_1005C9E  +
push eax  +
push eax  +
push [ebp+lpString]  +
push ebx  +
call sub_1004EC0  +
mov edi eax +
test edi edi +
jl loc_1005CCD  +
mov ecx esi +
call sub_1002F0B  +
mov eax [esi] +
xor ecx ecx +
cmp cx [eax] +
jnz loc_1005C33  +
jmp loc_1005CCD  +
mov edi 80020009h +
jmp loc_1005CCD  +
push 0  +
push 0  +
push [ebp+lpString]  +
mov ecx esi +
push [ebp+var_4]  +
mov [esi] ebx +
call sub_1004EC0  +
mov ebx [ebp+var_4] +
push [ebp+pv]  +
call ds:CoTaskMemFree  +
push ebx  +
call ds:free  +
pop ecx  +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 804h +
mov eax dword_100D608 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
mov esi [ebp+lpModuleName] +
mov ebx ecx +
test esi esi +
jnz loc_1005D15  +
push esi  +
call ds:GetModuleHandleW  +
mov esi eax +
xor eax eax +
push 7FEh  +
push eax  +
mov [ebp+Buffer] ax +
lea eax [ebp-802h] +
push eax  +
call memset  +
add esp 0Ch +
push 400h  +
lea eax [ebp+Buffer] +
push eax  +
push [ebp+uID]  +
push esi  +
call ds:LoadStringW  +
mov ecx ebx +
test eax eax +
jz loc_1005D58  +
lea eax [ebp+Buffer] +
push eax  +
jmp loc_1005D5A  +
push 0  +
call sub_10056A8  +
mov ecx [ebp+var_4] +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100A24F  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
push 0FFFFFFFFh  +
push [ebp+arg_4]  +
call sub_1005736  +
neg eax  +
sbb eax eax +
inc eax  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
lea eax [esi+4] +
xor ecx ecx +
mov [eax] cx +
mov ecx esi +
mov dword ptr [esi] offset off_10017C8 +
mov [esi+104h] eax +
mov dword ptr [esi+108h] 80h +
mov dword ptr [esi+10Ch] 10h +
call sub_10056A8  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
lea eax [esi+4] +
xor ecx ecx +
mov [eax] cx +
mov [esi+104h] eax +
mov eax [ebp+arg_0] +
mov dword ptr [esi] offset off_10017C8 +
mov dword ptr [esi+108h] 80h +
mov dword ptr [esi+10Ch] 10h +
push dword ptr [eax+104h]  +
mov ecx esi +
call sub_10056A8  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
lea eax [esi+4] +
xor ecx ecx +
mov [eax] cx +
mov [esi+104h] eax +
xor eax eax +
mov word ptr [ebp+var_4] ax +
lea eax [ebp+var_4] +
push eax  +
mov ecx esi +
mov dword ptr [esi] offset off_10017C8 +
mov dword ptr [esi+108h] 80h +
mov dword ptr [esi+10Ch] 10h +
call sub_10056A8  +
mov eax esi +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push ebx  +
push esi  +
push edi  +
mov ebx ecx +
mov esi eax +
mov edi ebx +
movs   +
movs   +
movs   +
add eax 10h +
push eax  +
lea ecx [ebx+10h] +
movs   +
call sub_1005DDA  +
mov esi [ebp+arg_0] +
lea eax [esi+120h] +
push eax  +
lea ecx [ebx+120h] +
call sub_1005DDA  +
lea eax [esi+230h] +
push eax  +
lea ecx [ebx+230h] +
call sub_1005DDA  +
lea eax [esi+340h] +
push eax  +
lea ecx [ebx+340h] +
call sub_1005DDA  +
mov eax [esi+450h] +
mov [ebx+450h] eax +
mov eax [esi+454h] +
mov [ebx+454h] eax +
mov eax [esi+458h] +
mov [ebx+458h] eax +
mov eax [esi+45Ch] +
pop edi  +
mov [ebx+45Ch] eax +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebx  +
push esi  +
push edi  +
mov ebx ecx +
mov esi offset dword_1001A14 +
mov edi ebx +
movs   +
movs   +
movs   +
lea ecx [ebx+10h] +
movs   +
call sub_1005E26  +
lea ecx [ebx+120h] +
call sub_1005E26  +
lea ecx [ebx+230h] +
call sub_1005E26  +
lea ecx [ebx+340h] +
call sub_1005E26  +
xor eax eax +
pop edi  +
mov [ebx+450h] eax +
mov [ebx+454h] eax +
mov [ebx+458h] eax +
pop esi  +
mov eax ebx +
pop ebx  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_1005E26  +
lea ecx [esi+110h] +
call sub_1005E26  +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_1005DDA  +
push [ebp+arg_4]  +
lea ecx [esi+110h] +
call sub_1005DDA  +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
add ecx 110h +
push ecx  +
mov ecx [ebp+arg_0] +
call sub_1005DDA  +
mov eax [ebp+arg_0] +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_1005E72  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
push edi  +
lea eax [ebp+var_8] +
push eax  +
xor ebx ebx +
xor edi edi +
mov [ebp+var_8] 8 +
mov [ebp+var_4] 200h +
call ds:off_1001CF8  +
push 14h  +
push 40h  +
call ds:LocalAlloc  +
cmp eax ebx +
jz loc_1006031  +
mov ecx [ebp+arg_4] +
mov [eax] ebx +
mov [eax+4] ebx +
mov [eax+8] bl +
mov [eax+0Ch] ebx +
mov [eax+10h] ecx +
mov esi eax +
jmp loc_1006033  +
xor esi esi +
cmp esi ebx +
jnz loc_100603E  +
mov edi 8007000Eh +
jmp loc_1006076  +
push esi  +
push offset DialogFunc  +
push ebx  +
push 0D2h  +
push [ebp+hInstance]  +
call sub_100B0CC  +
cmp eax 0FFFFFFFFh +
jnz loc_100606D  +
call ds:GetLastError  +
cmp eax ebx +
jle loc_100606B  +
and eax 0FFFFh +
or eax 80070000h +
mov edi eax +
push 1  +
mov ecx esi +
call sub_100584B  +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push esi  +
push edi  +
push 0  +
mov edi ecx +
call ds:CoInitialize  +
mov esi eax +
test esi esi +
jl loc_10060AC  +
push edi  +
push hModule  +
call sub_1005FE8  +
mov esi eax +
call ds:CoUninitialize  +
pop edi  +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push offset Addend  +
call ds:InterlockedIncrement  +
cmp [ebp+arg_0] 0 +
mov esi 80004005h +
jz loc_10060E6  +
mov ecx [ebp+arg_0] +
call sub_1006084  +
mov ecx [ebp+arg_0] +
push 1  +
mov esi eax +
call sub_1005871  +
mov ecx offset unk_100D878 +
call sub_1003589  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push 460h  +
push 40h  +
xor ebx ebx +
call ds:LocalAlloc  +
test eax eax +
jz loc_1006124  +
push [ebp+ThreadId]  +
mov ecx eax +
call sub_1005FCC  +
mov esi eax +
jmp loc_1006126  +
xor esi esi +
test esi esi +
jz loc_100614F  +
lea eax [ebp+ThreadId] +
push eax  +
push 0  +
push esi  +
push offset sub_10060B6  +
push 0  +
push 0  +
call ds:CreateThread  +
mov ebx eax +
test ebx ebx +
jnz loc_100614F  +
push 1  +
mov ecx esi +
call sub_1005871  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_8] +
push esi  +
xor esi esi +
cmp eax esi +
jnz loc_1006172  +
mov eax 80004003h +
jmp loc_10061CF  +
push ebx  +
push edi  +
push 28h  +
push 40h  +
mov [eax] esi +
mov edi 8007000Eh +
call ds:LocalAlloc  +
mov ebx [ebp+arg_0] +
cmp eax esi +
jz loc_1006196  +
push ebx  +
mov ecx eax +
call sub_10058BD  +
mov esi eax +
test esi esi +
jz loc_10061CB  +
lea ecx [esi+8] +
mov [esi+24h] ebx +
call sub_1002A06  +
mov edi eax +
test edi edi +
jl loc_10061C2  +
xor edi edi +
test edi edi +
jnz loc_10061C2  +
push [ebp+arg_8]  +
mov eax [esi] +
push [ebp+arg_4]  +
push esi  +
call dword ptr [eax]  +
mov edi eax +
test edi edi +
jz loc_10061CB  +
push 1  +
mov ecx esi +
call sub_1005897  +
mov eax edi +
pop edi  +
pop ebx  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov ecx [esi+10h] +
test ecx ecx +
jz loc_10061F0  +
push 3  +
call sub_1005A47  +
and dword ptr [esi+10h] 0 +
and dword ptr [esi+8] 0 +
and dword ptr [esi+4] 0 +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+10h] +
xor esi esi +
cmp edi esi +
jnz loc_1006216  +
mov eax 80004003h +
jmp loc_1006257  +
push ebx  +
push 10h  +
push 40h  +
mov [edi] esi +
mov ebx 8007000Eh +
call ds:LocalAlloc  +
cmp eax esi +
jz loc_1006238  +
push dword ptr [ebp+8]  +
mov ecx eax +
call sub_1005B0D  +
mov esi eax +
test esi esi +
jz loc_1006254  +
mov eax [esi] +
push edi  +
push dword ptr [ebp+0Ch]  +
push esi  +
call dword ptr [eax]  +
mov ebx eax +
test ebx ebx +
jz loc_1006254  +
push 1  +
mov ecx esi +
call sub_1005A9B  +
mov eax ebx +
pop ebx  +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+10h] +
xor esi esi +
cmp edi esi +
jnz loc_1006279  +
mov eax 80004003h +
jmp loc_10062BA  +
push ebx  +
push 10h  +
push 40h  +
mov [edi] esi +
mov ebx 8007000Eh +
call ds:LocalAlloc  +
cmp eax esi +
jz loc_100629B  +
push dword ptr [ebp+8]  +
mov ecx eax +
call sub_1004A51  +
mov esi eax +
test esi esi +
jz loc_10062B7  +
mov eax [esi] +
push edi  +
push dword ptr [ebp+0Ch]  +
push esi  +
call dword ptr [eax]  +
mov ebx eax +
test ebx ebx +
jz loc_10062B7  +
push 1  +
mov ecx esi +
call sub_1005AC1  +
mov eax ebx +
pop ebx  +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_8] +
xor esi esi +
cmp edi esi +
jnz loc_10062DC  +
mov eax 80004003h +
jmp loc_100631D  +
push ebx  +
push 10h  +
push 40h  +
mov [edi] esi +
mov ebx 8007000Eh +
call ds:LocalAlloc  +
cmp eax esi +
jz loc_10062FE  +
push [ebp+arg_0]  +
mov ecx eax +
call sub_1004AE6  +
mov esi eax +
test esi esi +
jz loc_100631A  +
mov eax [esi] +
push edi  +
push [ebp+arg_4]  +
push esi  +
call dword ptr [eax]  +
mov ebx eax +
test ebx ebx +
jz loc_100631A  +
push 1  +
mov ecx esi +
call sub_1005AE7  +
mov eax ebx +
pop ebx  +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+lpModuleName]  +
mov esi ecx +
push [ebp+uID]  +
lea eax [esi+4] +
xor ecx ecx +
mov [eax] cx +
mov ecx esi +
mov dword ptr [esi] offset off_10017C8 +
mov [esi+104h] eax +
mov dword ptr [esi+108h] 80h +
mov dword ptr [esi+10Ch] 10h +
call sub_1005CEC  +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 110h +
mov eax [ebp+arg_0] +
push esi  +
push dword ptr [eax+104h]  +
mov esi ecx +
lea ecx [ebp+var_110] +
call sub_1005D94  +
lea eax [ebp+var_110] +
push eax  +
mov ecx esi +
call sub_100565E  +
lea ecx [ebp+var_110] +
mov [ebp+var_110] offset off_10017C8 +
call sub_1004813  +
mov eax esi +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push ecx  +
mov ecx esi +
call sub_1005DDA  +
mov ecx esi +
call sub_1004BA4  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 11Ch +
mov eax dword_100D608 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
mov esi [ebp+arg_0] +
mov [ebp+var_11C] ecx +
mov [ebp+var_118] esi +
call sub_10046ED  +
cmp [ebp+arg_4] eax +
jge loc_10064BA  +
cmp [ebp+arg_4] 0 +
jl loc_10064BA  +
mov esi [ebp+arg_8] +
test esi esi +
jge loc_100643A  +
mov ecx [ebp+var_11C] +
call sub_10046ED  +
mov esi eax +
sub esi [ebp+arg_4] +
push ebx  +
push edi  +
lea ecx [ebp+var_114] +
call sub_1005E26  +
lea ebx [esi+1] +
push ebx  +
call sub_100354B  +
mov edi eax +
test edi edi +
jz loc_1006489  +
mov eax [ebp+var_11C] +
mov eax [eax+104h] +
mov ecx [ebp+arg_4] +
push ebx  +
lea eax [eax+ecx*2] +
push eax  +
push edi  +
call sub_1003B9E  +
xor eax eax +
push edi  +
lea ecx [ebp+var_114] +
mov [edi+esi*2] ax +
call sub_1005711  +
push edi  +
call ??_V@YAXPAX@Z  +
pop ecx  +
mov ecx [ebp+var_118] +
lea eax [ebp+var_114] +
push eax  +
call sub_1005DDA  +
lea ecx [ebp+var_114] +
mov [ebp+var_114] offset off_10017C8 +
call sub_1004813  +
mov eax [ebp+var_118] +
pop edi  +
pop ebx  +
jmp loc_10064C3  +
mov ecx esi +
call sub_1005E26  +
mov eax esi +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop esi  +
call sub_100A24F  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 224h +
mov eax dword_100D608 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
xor edi edi +
cmp [ebp+arg_4] edi +
mov eax ecx +
jge loc_100653F  +
mov eax [eax+104h] +
cmp eax edi +
jnz loc_1006527  +
cmp [esi+104h] edi +
jnz loc_100651E  +
xor eax eax +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_100A24F  +
leave   +
retn 8  +
cmp eax edi +
jnz loc_1006527  +
or eax 0FFFFFFFFh +
jmp loc_100650E  +
mov esi [esi+104h] +
cmp esi edi +
jnz loc_1006536  +
xor eax eax +
inc eax  +
jmp loc_100650E  +
push esi  +
push eax  +
call sub_1002A7E  +
jmp loc_100650E  +
push eax  +
lea ecx [ebp+var_224] +
call sub_1005DDA  +
push esi  +
lea ecx [ebp+var_114] +
call sub_1005DDA  +
lea ecx [ebp+var_224] +
call sub_1004BA4  +
lea ecx [ebp+var_114] +
call sub_1004BA4  +
cmp [ebp+lpString1] edi +
jnz loc_10065AD  +
cmp [ebp+lpString2] edi +
jnz loc_10065A8  +
mov esi offset off_10017C8 +
lea ecx [ebp+var_114] +
mov [ebp+var_114] esi +
call sub_1004813  +
lea ecx [ebp+var_224] +
mov [ebp+var_224] esi +
call sub_1004813  +
mov eax edi +
jmp loc_100650E  +
or edi 0FFFFFFFFh +
jmp loc_100657A  +
cmp [ebp+lpString2] edi +
jnz loc_10065B7  +
xor edi edi +
inc edi  +
jmp loc_100657A  +
push [ebp+arg_4]  +
push [ebp+lpString2]  +
push [ebp+lpString1]  +
call sub_1004738  +
mov edi eax +
jmp loc_100657A  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
mov eax dword_100D608 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
push edi  +
xor edi edi +
push 2  +
push edi  +
push [ebp+lpLibFileName]  +
mov [ebp+var_8] edi +
mov [ebp+var_10] ecx +
mov [ebp+var_14] edi +
call ds:LoadLibraryExW  +
mov ebx eax +
mov [ebp+hLibModule] ebx +
cmp ebx edi +
jnz loc_1006623  +
call ds:GetLastError  +
cmp eax edi +
jg loc_1006617  +
mov esi eax +
jmp loc_1006717  +
and eax 0FFFFh +
or eax 80070000h +
jmp loc_1006610  +
push [ebp+lpType]  +
push [ebp+lpName]  +
push ebx  +
call ds:FindResourceW  +
mov esi eax +
cmp esi edi +
jnz loc_1006653  +
call ds:GetLastError  +
cmp eax edi +
jle loc_100670C  +
and eax 0FFFFh +
or eax 80070000h +
jmp loc_100670C  +
push esi  +
push ebx  +
call ds:LoadResource  +
mov ebx eax +
cmp ebx edi +
jz loc_1006636  +
push esi  +
push [ebp+hLibModule]  +
call ds:SizeofResource  +
mov esi eax +
cmp byte ptr [esi+ebx] 0 +
mov edi ebx +
jz loc_10066BD  +
lea edi [esi+1] +
cmp edi 400h +
ja loc_1006695  +
push edi  +
call sub_1002776  +
test al al +
jz loc_1006695  +
mov eax edi +
call __alloca_probe_16  +
mov edi esp +
jmp loc_10066A0  +
push edi  +
lea ecx [ebp+var_8] +
call sub_10046BA  +
mov edi eax +
test edi edi +
jnz loc_10066AB  +
mov esi 8007000Eh +
jmp loc_100670E  +
lea eax [esi+1] +
push eax  +
push ebx  +
push edi  +
call memcpy  +
add esp 0Ch +
mov byte ptr [edi+esi] 0 +
test edi edi +
jnz loc_10066C5  +
xor eax eax +
jmp loc_1006700  +
push edi  +
call ds:lstrlenA  +
mov esi eax +
inc esi  +
lea ebx [esi+esi] +
cmp ebx 400h +
ja loc_10066EF  +
push ebx  +
call sub_1002776  +
test al al +
jz loc_10066EF  +
mov eax ebx +
call __alloca_probe_16  +
mov eax esp +
jmp loc_10066F8  +
push ebx  +
lea ecx [ebp+var_8] +
call sub_10046BA  +
push esi  +
push edi  +
push eax  +
call sub_1002849  +
push [ebp+arg_C]  +
lea ecx [ebp+var_14] +
push eax  +
call sub_1005BE5  +
mov esi eax +
push [ebp+hLibModule]  +
call ds:FreeLibrary  +
lea ecx [ebp+var_8] +
call sub_100348A  +
mov eax esi +
lea esp [ebp-20h] +
pop edi  +
pop esi  +
pop ebx  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_100A24F  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
movzx eax [ebp+arg_8] +
mov ecx [ebp+arg_0] +
and [ebp+var_4] 0 +
push esi  +
push 1  +
push [ebp+lpType]  +
push eax  +
push [ebp+lpLibFileName]  +
call sub_10065D1  +
lea ecx [ebp+var_4] +
mov esi eax +
call sub_100348A  +
mov eax esi +
pop esi  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
movzx eax [ebp+arg_8] +
mov ecx [ebp+arg_0] +
and [ebp+var_4] 0 +
push esi  +
push 0  +
push [ebp+lpType]  +
push eax  +
push [ebp+lpLibFileName]  +
call sub_10065D1  +
lea ecx [ebp+var_4] +
mov esi eax +
call sub_100348A  +
mov eax esi +
pop esi  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 63Ch +
mov eax dword_100D608 +
xor eax ebp +
mov [ebp+var_4] eax +
and [ebp+var_62C] 0 +
push esi  +
mov esi [ebp+arg_C] +
push edi  +
lea ecx [ebp+var_63C] +
call sub_1002C56  +
xor eax eax +
push 208h  +
push eax  +
mov [ebp+LibFileName] ax +
lea eax [ebp-20Eh] +
push eax  +
call memset  +
mov eax dword_100D860 +
mov eax [eax+4] +
add esp 0Ch +
mov edi 104h +
push edi  +
lea ecx [ebp+LibFileName] +
push ecx  +
push eax  +
call ds:GetModuleFileNameW  +
cmp eax edi +
jnz loc_100684A  +
mov esi 8007006Fh +
lea ecx [ebp+var_63C] +
call sub_1003E3B  +
push [ebp+var_63C]  +
call ds:free  +
pop ecx  +
lea ecx [ebp+var_62C] +
call sub_100348A  +
mov ecx [ebp+var_4] +
pop edi  +
mov eax esi +
xor ecx ebp +
pop esi  +
call sub_100A24F  +
leave   +
retn 10h  +
test eax eax +
jnz loc_1006857  +
call sub_100298C  +
mov esi eax +
jmp loc_1006815  +
lea eax [ebp+LibFileName] +
push eax  +
lea eax [ebp+var_628] +
push eax  +
call sub_1002A1F  +
lea eax [ebp+var_628] +
push eax  +
push offset aModule  +
lea ecx [ebp+var_63C] +
call sub_1003CE4  +
test eax eax +
jl loc_1006853  +
test esi esi +
jz loc_10068A7  +
jmp loc_10068A1  +
push dword ptr [esi+4]  +
lea ecx [ebp+var_63C] +
push eax  +
call sub_1003CE4  +
test eax eax +
jl loc_1006853  +
add esi 8 +
mov eax [esi] +
test eax eax +
jnz loc_100688B  +
cmp [ebp+arg_8] 0 +
push offset Type  +
push dword ptr [ebp+arg_4]  +
lea eax [ebp+LibFileName] +
push eax  +
lea eax [ebp+var_63C] +
push eax  +
jz loc_10068CA  +
call sub_100673A  +
jmp loc_1006853  +
call sub_1006770  +
jmp loc_1006853  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
mov ecx [ebp+arg_0] +
call sub_1005DDA  +
mov eax [ebp+arg_0] +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 110h +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
and dword ptr [esi+4] 0 +
lea ecx [ebp+var_110] +
mov dword ptr [esi] offset off_1001624 +
call sub_1005DDA  +
push [ebp+var_C]  +
mov ecx esi +
call sub_1004691  +
lea ecx [ebp+var_110] +
mov [ebp+var_110] offset off_10017C8 +
call sub_1004813  +
mov eax esi +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 110h +
push edi  +
mov edi ecx +
cmp edi [ebp+arg_0] +
jz loc_10069B6  +
push esi  +
push [ebp+arg_0]  +
lea ecx [ebp+var_110] +
call sub_1005DDA  +
lea eax [ebp+var_110] +
push eax  +
mov ecx edi +
call sub_1005BBF  +
mov esi offset off_10017C8 +
lea ecx [ebp+var_110] +
mov [ebp+var_110] esi +
call sub_1004813  +
mov ecx [ebp+arg_0] +
lea eax [ebp+var_110] +
push eax  +
call sub_1005FAC  +
push eax  +
lea ecx [edi+110h] +
call sub_1005BBF  +
lea ecx [ebp+var_110] +
mov [ebp+var_110] esi +
call sub_1004813  +
pop esi  +
mov eax edi +
pop edi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0A24h +
mov eax dword_100D608 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
push edi  +
lea eax [ebp+ppv] +
push eax  +
push offset stru_1001898  +
push 4  +
xor ebx ebx +
push ebx  +
mov esi ecx +
push offset stru_1001AE4  +
mov [ebp+var_9E4] esi +
mov [ebp+ppv] ebx +
call ds:CoCreateInstance  +
cmp eax ebx +
mov [ebp+var_9D0] eax +
jge loc_1006A92  +
mov eax 80070422h +
cmp [ebp+var_9D0] eax +
jnz loc_1007202  +
push eax  +
lea eax [ebp+var_118] +
push eax  +
call sub_100A889  +
push hModule  +
mov edi [eax+104h] +
push 79h  +
lea ecx [ebp+var_7AC] +
call sub_1006328  +
push ebx  +
push 0FFFFh  +
push 20h  +
push ebx  +
push edi  +
push dword ptr [eax+104h]  +
push hModule  +
push dword ptr [esi+45Ch]  +
call ds:off_1001CFC  +
mov esi offset off_10017C8 +
lea ecx [ebp+var_7AC] +
mov [ebp+var_7AC] esi +
call sub_1004813  +
mov [ebp+var_118] esi +
lea ecx [ebp+var_118] +
jmp loc_10071FD  +
push ebx  +
push [ebp+ppv]  +
call ds:CoAllowSetForegroundWindow  +
lea eax [ebp+rguid] +
push eax  +
call ds:CoCreateGuid  +
cmp eax ebx +
mov [ebp+var_9D0] eax +
jl loc_1006AD2  +
push 32h  +
lea eax [ebp+sz] +
push eax  +
lea eax [ebp+rguid] +
push eax  +
call ds:StringFromGUID2  +
mov [ebp+var_9D0] eax +
xor eax eax +
push 206h  +
mov [ebp+PathName] ax +
lea eax [ebp-68Ah] +
push ebx  +
push eax  +
call memset  +
add esp 0Ch +
lea eax [ebp+sz] +
push eax  +
lea ecx [ebp+var_9CC] +
call sub_1005D94  +
lea ecx [ebp+var_8BC] +
call sub_1005E26  +
push hModule  +
lea ecx [ebp+var_8BC] +
push 119h  +
call sub_1005CEC  +
cmp [ebp+var_9D0] ebx +
jl loc_1007183  +
push [ebp+pMore]  +
lea eax [ebp+PathName] +
push eax  +
mov ecx esi +
call sub_10036CC  +
cmp eax ebx +
mov [ebp+var_9D0] eax +
jl loc_1007183  +
lea eax [ebp+PathName] +
push eax  +
mov [ebp+var_9D8] ebx +
mov [ebp+pv] ebx +
mov [ebp+var_9F0] ebx +
call ds:SysAllocString  +
push 118h  +
push hModule  +
lea ecx [ebp+var_9FC] +
mov [ebp+var_A04] eax +
mov [ebp+var_9FC] ebx +
call sub_10038FC  +
lea ecx [esi+230h] +
mov [ebp+var_9F8] ebx +
call sub_10046ED  +
test eax eax +
jbe loc_1006BB8  +
push dword ptr [esi+334h]  +
lea ecx [ebp+var_9F8] +
call sub_10037D8  +
test byte ptr dword_100D970 1 +
mov [ebp+var_9EC] ebx +
jnz loc_1006C0C  +
mov esi offset dword_1001A34 +
mov edi offset unk_100D930 +
movs   +
movs   +
movs   +
movs   +
mov esi offset dword_1001A44 +
mov edi offset unk_100D940 +
movs   +
movs   +
movs   +
movs   +
mov esi offset dword_1001A54 +
mov edi offset unk_100D950 +
movs   +
movs   +
or dword_100D970 1 +
movs   +
movs   +
mov esi offset dword_1001A64 +
mov edi offset unk_100D960 +
movs   +
movs   +
movs   +
movs   +
mov esi [ebp+var_9E4] +
mov eax offset unk_100D930 +
mov [ebp+var_9D4] ebx +
jmp loc_1006C1F  +
mov esi [ebp+var_9E4] +
push 4  +
pop ecx  +
mov edi eax +
xor edx edx +
cmps   +
jz loc_1006CD2  +
add [ebp+var_9D4] 10h +
add eax 10h +
cmp [ebp+var_9D4] 40h +
jb loc_1006C19  +
mov eax [ebp+ppv] +
mov ecx [eax] +
lea edx [ebp+var_9F0] +
push edx  +
lea edx [ebp+pv] +
push edx  +
lea edx [ebp+var_9D8] +
push edx  +
push [ebp+var_9FC]  +
mov edx [ebp+var_9E4] +
push [ebp+var_A04]  +
push dword ptr [edx+45Ch]  +
push [ebp+var_9F8]  +
push ebx  +
push eax  +
call dword ptr [ecx+28h]  +
mov esi ds:SysFreeString +
mov [ebp+var_9D0] eax +
cmp eax ebx +
jnz loc_1007090  +
cmp [ebp+var_9D8] ebx +
jle loc_100710C  +
xor edi edi +
cmp [ebp+var_9D8] ebx +
jle loc_1006D33  +
mov eax [ebp+pv] +
push 101h  +
push dword ptr [eax+edi*4]  +
call ds:SetFileAttributesW  +
test eax eax +
jz loc_1006D19  +
inc edi  +
cmp edi [ebp+var_9D8] +
jl loc_1006CAF  +
jmp loc_1006D33  +
mov eax [ebp+var_9E4] +
push dword ptr [eax+45Ch]  +
lea eax [ebp+pv] +
push eax  +
lea eax [ebp+var_9D8] +
push eax  +
lea eax [ebp+var_9F0] +
push eax  +
push [ebp+var_9FC]  +
mov [ebp+var_9EC] 1 +
push [ebp+var_A04]  +
push [ebp+var_9F8]  +
call GetDefaultProfileScan  +
jmp loc_1006C81  +
call ds:GetLastError  +
cmp eax ebx +
jle loc_1006D2D  +
and eax 0FFFFh +
or eax 80070000h +
mov [ebp+var_9D0] eax +
push offset dword_1001894  +
lea ecx [ebp+var_7AC] +
call sub_1005D94  +
cmp [ebp+var_9D0] ebx +
jl loc_1006DDF  +
mov eax [ebp+var_9F0] +
cmp eax ebx +
jz loc_1006DDF  +
lea edx [ebp+var_9D4] +
push edx  +
mov [ebp+var_9D4] ebx +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+3Ch]  +
test eax eax +
jl loc_1006DCF  +
push 7  +
lea ecx [ebp+var_120] +
call sub_100A9F1  +
lea eax [ebp+var_7AC] +
push eax  +
lea eax [ebp+var_120] +
push eax  +
push [ebp+var_9D4]  +
call sub_100AB06  +
neg al  +
sbb al al +
inc al  +
lea ecx [ebp+var_120] +
mov [ebp+var_9D9] al +
call sub_100A9E1  +
cmp [ebp+var_9D9] bl +
jz loc_1006DCF  +
push hModule  +
lea ecx [ebp+var_7AC] +
push 119h  +
call sub_1005CEC  +
mov eax [ebp+var_9D4] +
cmp eax ebx +
jz loc_1006DDF  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
xor eax eax +
push 206h  +
mov [ebp+FileName] ax +
lea eax [ebp-482h] +
push ebx  +
push eax  +
call memset  +
add esp 0Ch +
lea eax [ebp+PathName] +
push eax  +
push 104h  +
lea eax [ebp+FileName] +
push eax  +
call sub_10045E1  +
cmp eax ebx +
mov [ebp+var_9D0] eax +
jl loc_100704F  +
push offset pMore  +
lea eax [ebp+FileName] +
push eax  +
call ds:PathAppendW  +
test eax eax +
jz loc_1006EF2  +
mov edi ds:WritePrivateProfileStringW +
lea eax [ebp+FileName] +
push eax  +
push [ebp+lpString]  +
push offset KeyName  +
push offset AppName  +
call edi  +
lea eax [ebp+FileName] +
push eax  +
push offset String  +
push offset aDevicetype  +
push offset AppName  +
call edi  +
xor eax eax +
push 210h  +
mov [ebp+String] ax +
lea eax [ebp-216h] +
push ebx  +
push eax  +
call memset  +
add esp 0Ch +
push 109h  +
lea eax [ebp+String] +
push eax  +
push hModule  +
call ds:GetModuleFileNameW  +
dec eax  +
cmp eax 102h +
ja loc_1006EFC  +
push offset a2  +
push 109h  +
lea eax [ebp+String] +
push eax  +
call sub_100461B  +
cmp eax ebx +
mov [ebp+var_9D0] eax +
jl loc_100704F  +
lea eax [ebp+FileName] +
push eax  +
lea eax [ebp+String] +
push eax  +
push offset aDeviceicon  +
push offset AppName  +
call edi  +
jmp loc_1006EFC  +
mov [ebp+var_9D0] 80004005h +
cmp [ebp+var_9D0] ebx +
jl loc_100704F  +
lea eax [ebp+var_9D4] +
push eax  +
push offset stru_10017E0  +
push 3  +
push ebx  +
push offset stru_1001C9C  +
mov [ebp+var_9D4] ebx +
call ds:CoCreateInstance  +
mov edi eax +
cmp edi ebx +
jl loc_1007033  +
mov eax [ebp+var_9D4] +
lea edx [ebp+var_A00] +
push edx  +
lea edx [ebp+PathName] +
push edx  +
mov [ebp+var_A00] ebx +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+0Ch]  +
mov edi eax +
cmp edi ebx +
jl loc_1007023  +
mov eax [ebp+var_A00] +
lea edx [ebp+var_9F4] +
push edx  +
mov [ebp+var_9F4] ebx +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+20h]  +
mov edi eax +
cmp edi ebx +
jl loc_1007013  +
mov eax [ebp+var_9F4] +
lea edx [ebp+var_9D0] +
push edx  +
mov [ebp+var_9D0] ebx +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+28h]  +
mov edi eax +
cmp edi ebx +
jl loc_1007013  +
cmp [ebp+var_9EC] ebx +
jz loc_1006FB2  +
or [ebp+var_9D0] 408h +
jmp loc_1006FBC  +
or [ebp+var_9D0] 800h +
mov eax [ebp+var_9F4] +
push [ebp+var_9D0]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+10h]  +
mov edi eax +
cmp edi ebx +
jl loc_1007013  +
push 65h  +
push hModule  +
lea ecx [ebp+var_9D0] +
mov [ebp+var_9D0] ebx +
call sub_10038FC  +
mov eax [ebp+var_9D4] +
mov ecx [eax] +
push ebx  +
push [ebp+var_9D0]  +
push ebx  +
push 1  +
push [ebp+var_A00]  +
push eax  +
call dword ptr [ecx+10h]  +
push [ebp+var_9D0]  +
mov edi eax +
call esi  +
mov eax [ebp+var_9F4] +
cmp eax ebx +
jz loc_1007023  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+var_A00] +
cmp eax ebx +
jz loc_1007033  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+var_9D4] +
cmp eax ebx +
jz loc_1007043  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
cmp edi 8004A001h +
jz loc_1006F08  +
lea eax [ebp+FileName] +
push eax  +
call ds:SysAllocString  +
mov ecx [ebp+var_9E4] +
mov [ebp+var_9EC] eax +
lea eax [ebp+var_9EC] +
push eax  +
push 1  +
call sub_1003726  +
push [ebp+var_9EC]  +
mov [ebp+var_9D0] eax +
call esi  +
mov [ebp+var_7AC] offset off_10017C8 +
jmp loc_1007101  +
cmp [ebp+var_9D0] 80210015h +
jnz loc_100710C  +
push hModule  +
lea ecx [ebp+var_7AC] +
push 7Ah  +
call sub_1006328  +
push hModule  +
mov edi [eax+104h] +
push 79h  +
lea ecx [ebp+var_118] +
call sub_1006328  +
push ebx  +
push 0FFFEh  +
push 20h  +
push ebx  +
push edi  +
push dword ptr [eax+104h]  +
push hModule  +
push ebx  +
call ds:off_1001CFC  +
mov edi offset off_10017C8 +
lea ecx [ebp+var_118] +
mov [ebp+var_118] edi +
call sub_1004813  +
mov [ebp+var_7AC] edi +
lea ecx [ebp+var_7AC] +
call sub_1004813  +
cmp [ebp+pv] ebx +
jz loc_100715B  +
push [ebp+pv]  +
mov ecx [ebp+var_9E4] +
push [ebp+var_9D8]  +
call sub_1003726  +
xor edi edi +
cmp [ebp+var_9D8] ebx +
mov [ebp+var_9D0] eax +
jle loc_100714F  +
mov eax [ebp+pv] +
push dword ptr [eax+edi*4]  +
call esi  +
inc edi  +
cmp edi [ebp+var_9D8] +
jl loc_100713B  +
push [ebp+pv]  +
call ds:CoTaskMemFree  +
push [ebp+var_9F8]  +
call esi  +
push [ebp+var_9FC]  +
call esi  +
push [ebp+var_A04]  +
call esi  +
mov eax [ebp+var_9F0] +
cmp eax ebx +
jz loc_1007183  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
push 6  +
xor eax eax +
pop ecx  +
lea edi [ebp+FileOp.wFunc] +
stos   +
stos   +
lea eax [ebp+PathName] +
mov [ebp+FileOp.pFrom] eax +
mov eax 414h +
mov [ebp+FileOp.fFlags] ax +
lea eax [ebp+FileOp] +
push eax  +
mov [ebp+FileOp.hwnd] ebx +
mov [ebp+FileOp.wFunc] 3 +
mov [ebp+FileOp.pTo] ebx +
call ds:SHFileOperationW  +
test eax eax +
jz loc_10071DB  +
mov [ebp+var_9D0] 8000FFFFh +
mov esi offset off_10017C8 +
lea ecx [ebp+var_8BC] +
mov [ebp+var_8BC] esi +
call sub_1004813  +
mov [ebp+var_9CC] esi +
lea ecx [ebp+var_9CC] +
call sub_1004813  +
mov eax [ebp+ppv] +
cmp eax ebx +
jz loc_1007212  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov ecx [ebp+var_4] +
mov eax [ebp+var_9D0] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100A24F  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+arg_0]  +
push 65h  +
push offset unk_100D878  +
call sub_10067A6  +
pop ebp  +
retn 4  +
***
push ebp  +
mov ebp esp +
push 0  +
push dword ptr [ebp+8]  +
push 0DFh  +
push offset unk_100D878  +
call sub_10067A6  +
pop ebp  +
retn 4  +
***
push ebp  +
mov ebp esp +
push 0  +
push dword ptr [ebp+8]  +
push 0D3h  +
push offset unk_100D878  +
call sub_10067A6  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 134h +
and [ebp+ppv] 0 +
push ebx  +
push esi  +
mov esi eax +
lea eax [ebp+ppv] +
push eax  +
push offset stru_1001AA4  +
push 4004h  +
push 0  +
push offset stru_1001AD4  +
call ds:CoCreateInstance  +
mov ebx eax +
test ebx ebx +
jl loc_1007418  +
push edi  +
push esi  +
lea ecx [ebp+var_24] +
call sub_1005638  +
push lpModuleName  +
lea ecx [ebp+var_134] +
push [ebp+uID]  +
call sub_1006328  +
push eax  +
lea ecx [ebp+var_14] +
call sub_10068F2  +
mov edi offset off_10017C8 +
lea ecx [ebp+var_134] +
mov [ebp+var_134] edi +
call sub_1004813  +
push lpModuleName  +
lea ecx [ebp+var_134] +
push [ebp+arg_C]  +
call sub_1006328  +
push eax  +
lea ecx [ebp+var_C] +
call sub_10068F2  +
lea ecx [ebp+var_134] +
mov [ebp+var_134] edi +
call sub_1004813  +
push lpModuleName  +
lea ecx [ebp+var_134] +
push [ebp+arg_10]  +
call sub_1006328  +
push eax  +
lea ecx [ebp+var_1C] +
call sub_10068F2  +
lea ecx [ebp+var_134] +
mov [ebp+var_134] edi +
call sub_1004813  +
cmp [ebp+arg_18] 0 +
jz loc_10073C2  +
xor edi edi +
cmp [ebp+var_10] edi +
jz loc_10073E6  +
cmp [ebp+var_8] edi +
jz loc_10073E6  +
cmp [ebp+var_18] edi +
jz loc_10073E6  +
push [ebp+var_18]  +
mov ecx [ebp+ppv] +
push [ebp+var_8]  +
mov edx [ecx] +
push [ebp+var_10]  +
mov eax esi +
push [ebp+arg_0]  +
neg eax  +
push [ebp+arg_4]  +
sbb eax eax +
and eax [ebp+var_20] +
push eax  +
push 1  +
push ecx  +
call dword ptr [edx+28h]  +
mov ebx eax +
cmp ebx edi +
jl loc_10073E6  +
cmp [ebp+arg_14] 0 +
jz loc_10073E6  +
push [ebp+var_18]  +
neg esi  +
push [ebp+var_8]  +
sbb esi esi +
push [ebp+var_10]  +
and esi [ebp+var_20] +
push [ebp+arg_0]  +
push [ebp+arg_4]  +
push esi  +
push 4  +
jmp loc_10073DB  +
push [ebp+var_18]  +
neg esi  +
push [ebp+var_8]  +
sbb esi esi +
push [ebp+var_10]  +
and esi [ebp+var_20] +
push [ebp+arg_0]  +
push [ebp+arg_4]  +
push esi  +
push 2  +
mov eax [ebp+ppv] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+28h]  +
mov ebx eax +
mov esi offset off_1001624 +
lea ecx [ebp+var_1C] +
mov [ebp+var_1C] esi +
call sub_1003438  +
lea ecx [ebp+var_C] +
mov [ebp+var_C] esi +
call sub_1003438  +
lea ecx [ebp+var_14] +
mov [ebp+var_14] esi +
call sub_1003438  +
lea ecx [ebp+var_24] +
mov [ebp+var_24] esi +
call sub_1003438  +
pop edi  +
mov eax [ebp+ppv] +
test eax eax +
jz loc_1007425  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
pop esi  +
mov eax ebx +
pop ebx  +
leave   +
retn 1Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 338h +
mov eax dword_100D608 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov esi ecx +
call sub_10039D0  +
xor ebx ebx +
mov [ebp+var_228] ebx +
cmp edi ebx +
jz loc_10075BA  +
cmp [edi] bx +
jz loc_10075BA  +
push edi  +
lea ecx [ebp+var_114] +
call sub_1005D94  +
lea ecx [ebp+var_114] +
xor edi edi +
call sub_10046ED  +
test eax eax +
jle loc_10074AC  +
mov eax [ebp+var_10] +
lea eax [eax+edi*2] +
cmp word ptr [eax] 5Ch +
jnz loc_100749C  +
push 2Dh  +
pop ecx  +
mov [eax] cx +
lea ecx [ebp+var_114] +
inc edi  +
call sub_10046ED  +
cmp edi eax +
jl loc_100748A  +
lea eax [ebp+var_114] +
push eax  +
lea ecx [ebp+var_224] +
call sub_1005DDA  +
push offset aMutex  +
lea ecx [ebp+var_338] +
call sub_1005D94  +
lea eax [ebp+var_338] +
push eax  +
lea ecx [ebp+var_224] +
call sub_1006371  +
mov edi offset off_10017C8 +
lea ecx [ebp+var_338] +
mov [ebp+var_338] edi +
call sub_1004813  +
push [ebp+lpName]  +
push ebx  +
push ebx  +
call ds:CreateMutexW  +
mov [esi] eax +
cmp eax ebx +
jz loc_1007598  +
push 0FFFFFFFFh  +
push eax  +
call sub_100A814  +
test al al +
jz loc_1007598  +
push [ebp+var_10]  +
mov edi 0F001Fh +
push ebx  +
push edi  +
call ds:OpenFileMappingW  +
mov [esi+4] eax +
cmp eax ebx +
jz loc_100754C  +
push 4  +
push ebx  +
push ebx  +
push edi  +
push eax  +
call ds:MapViewOfFile  +
mov [esi+8] eax +
mov [ebp+var_228] 2 +
jmp loc_100758B  +
cmp [ebp+arg_4] bl +
jz loc_100758B  +
push [ebp+var_10]  +
push 4  +
push ebx  +
push 4  +
push ebx  +
push 0FFFFFFFFh  +
call ds:CreateFileMappingW  +
mov [esi+4] eax +
cmp eax ebx +
jz loc_100758B  +
push 4  +
push ebx  +
push ebx  +
push edi  +
push eax  +
call ds:MapViewOfFile  +
mov edi eax +
mov [esi+8] edi +
cmp edi ebx +
jz loc_100758B  +
xor eax eax +
stos   +
mov [ebp+var_228] 1 +
push dword ptr [esi]  +
call ds:ReleaseMutex  +
mov edi offset off_10017C8 +
lea ecx [ebp+var_224] +
mov [ebp+var_224] edi +
call sub_1004813  +
lea ecx [ebp+var_114] +
mov [ebp+var_114] edi +
call sub_1004813  +
cmp [esi+8] ebx +
jnz loc_10075C6  +
mov ecx esi +
call sub_10039D0  +
mov ecx [ebp+var_4] +
mov eax [ebp+var_228] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100A24F  +
leave   +
retn 8  +
***
push ebp  +
mov ebp esp +
cmp dword ptr [ebp+8] 0 +
jnz loc_10075FE  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push 0  +
call sub_100590C  +
pop ebp  +
retn 0Ch  +
***
pop ebp  +
jmp loc_10061FF  +
***
push ebp  +
mov ebp esp +
cmp dword ptr [ebp+8] 0 +
jnz loc_1007625  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push 0  +
call sub_1005975  +
pop ebp  +
retn 0Ch  +
***
pop ebp  +
jmp loc_1006262  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
jnz loc_100764C  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push 0  +
call sub_10059DE  +
pop ebp  +
retn 0Ch  +
pop ebp  +
jmp loc_10062C5  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_1001690 +
call sub_10061D9  +
test byte ptr [ebp+8] 1 +
jz loc_1007677  +
push esi  +
call sub_1002585  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
mov eax [esi+8] +
mov ecx [ebp+arg_0] +
cmp eax ecx +
mov [ebp+var_4] eax +
jle loc_10076A0  +
mov al 1 +
jmp loc_100774D  +
jge loc_10076AD  +
mov eax [esi+0Ch] +
add [esi+8] eax +
cmp [esi+8] ecx +
jl loc_10076A5  +
push ebx  +
mov ebx [esi+8] +
push edi  +
xor ecx ecx +
mov edi 220h +
mov eax ebx +
mov edx edi +
mul  edx +
seto cl  +
neg ecx  +
or ecx eax +
xor eax eax +
add ecx 4 +
setb al  +
neg eax  +
or eax ecx +
push eax  +
call ??_U@YAPAXI@Z  +
pop ecx  +
test eax eax +
jz loc_10076FA  +
push offset sub_1005F64  +
push ebx  +
mov [eax] ebx +
add eax 4 +
push edi  +
push eax  +
mov [ebp+arg_0] eax +
call sub_10025CB  +
mov eax [ebp+arg_0] +
mov [ebp+arg_0] eax +
jmp loc_10076FE  +
and [ebp+arg_0] 0 +
xor ebx ebx +
cmp [ebp+arg_0] ebx +
jz loc_1007743  +
cmp [esi+4] ebx +
mov [ebp+var_4] ebx +
jle loc_100772B  +
mov eax [esi+10h] +
add eax ebx +
push eax  +
mov eax [ebp+arg_0] +
lea ecx [ebx+eax] +
call sub_1006943  +
inc [ebp+var_4]  +
mov eax [ebp+var_4] +
add ebx edi +
cmp eax [esi+4] +
jl loc_100770D  +
mov ecx [esi+10h] +
test ecx ecx +
jz loc_1007739  +
push 3  +
call sub_1005A47  +
mov eax [ebp+arg_0] +
mov [esi+10h] eax +
mov al 1 +
jmp loc_100774B  +
mov eax [ebp+var_4] +
mov [esi+8] eax +
xor al al +
pop edi  +
pop ebx  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_10068D6  +
mov eax [ebp+arg_0] +
pop ebp  +
retn 8  +
***
mov edi edi +
push esi  +
mov esi ecx +
lea ecx [esi+34Ch] +
push edi  +
mov dword ptr [ecx] offset off_1001690 +
call sub_10061D9  +
lea ecx [esi+230h] +
mov edi offset off_10017C8 +
mov [ecx] edi +
call sub_1004813  +
lea ecx [esi+120h] +
mov [ecx] edi +
call sub_1004813  +
lea ecx [esi+10h] +
mov [ecx] edi +
pop edi  +
pop esi  +
jmp sub_1004813  +
***
mov edi edi +
push esi  +
push edi  +
push 0  +
mov edi ecx +
call ds:CoInitialize  +
mov esi eax +
test esi esi +
jl loc_10077DD  +
mov ecx edi +
call sub_10069C2  +
mov esi eax +
call ds:CoUninitialize  +
pop edi  +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push offset Addend  +
call ds:InterlockedIncrement  +
cmp [ebp+arg_0] 0 +
mov esi 80004005h +
jz loc_1007817  +
mov ecx [ebp+arg_0] +
call sub_10077BA  +
mov ecx [ebp+arg_0] +
push 1  +
mov esi eax +
call sub_1005871  +
mov ecx offset unk_100D878 +
call sub_1003589  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push 460h  +
push 40h  +
xor ebx ebx +
call ds:LocalAlloc  +
test eax eax +
jz loc_1007855  +
push [ebp+ThreadId]  +
mov ecx eax +
call sub_1005FCC  +
mov esi eax +
jmp loc_1007857  +
xor esi esi +
test esi esi +
jz loc_1007880  +
lea eax [ebp+ThreadId] +
push eax  +
push 0  +
push esi  +
push offset sub_10077E7  +
push 0  +
push 0  +
call ds:CreateThread  +
mov ebx eax +
test ebx ebx +
jnz loc_1007880  +
push 1  +
mov ecx esi +
call sub_1005871  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 694h +
mov eax dword_100D608 +
xor eax ebp +
mov [ebp-4] eax +
mov eax [ebp+10h] +
mov [ebp-468h] eax +
mov eax [ebp+14h] +
mov [ebp-474h] eax +
mov eax [ebp+18h] +
push ebx  +
mov ebx [ebp+0Ch] +
mov [ebp-470h] eax +
mov eax [ebp+24h] +
push esi  +
push edi  +
mov [ebp-46Ch] eax +
test ebx ebx +
jz loc_10078F0  +
push 4  +
pop ecx  +
mov edi offset dword_1001A24 +
mov esi ebx +
xor eax eax +
cmps   +
jnz loc_10078F0  +
mov ecx [ebp+1Ch] +
shr ecx 10h +
inc eax  +
cmp cx ax +
jz loc_10079D6  +
lea ecx [ebp-464h] +
call sub_1005F0A  +
push dword ptr [ebp-468h]  +
mov esi ebx +
lea edi [ebp-464h] +
movs   +
movs   +
movs   +
lea ecx [ebp-344h] +
movs   +
call sub_1005711  +
push dword ptr [ebp-474h]  +
lea ecx [ebp-234h] +
call sub_1005711  +
push dword ptr [ebp-470h]  +
lea ecx [ebp-124h] +
call sub_1005711  +
mov eax [ebp+28h] +
and dword ptr [ebp-8] 0 +
mov [ebp-0Ch] eax +
mov eax [ebp-46Ch] +
mov eax [eax] +
push 4  +
mov [ebp-10h] eax +
pop ecx  +
mov edi offset dword_1001A14 +
mov esi ebx +
xor eax eax +
cmps   +
jnz loc_10079B2  +
push dword ptr [ebp-468h]  +
lea ecx [ebp-694h] +
call sub_1005D94  +
push eax  +
lea eax [ebp-584h] +
push eax  +
call sub_1007757  +
push dword ptr [eax+104h]  +
call sub_100A7C7  +
mov esi offset off_10017C8 +
lea ecx [ebp-584h] +
mov [ebp-8] eax +
mov [ebp-584h] esi +
call sub_1004813  +
lea ecx [ebp-694h] +
mov [ebp-694h] esi +
call sub_1004813  +
lea eax [ebp-464h] +
push eax  +
call sub_100782D  +
test eax eax +
jz loc_10079C9  +
push eax  +
call ds:CloseHandle  +
lea ecx [ebp-464h] +
call sub_10057B9  +
xor eax eax +
mov ecx [ebp-4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100A24F  +
leave   +
retn 24h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 4DCh +
mov eax dword_100D608 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
xor edi edi +
push edi  +
push edi  +
push 1  +
push edi  +
call ds:HeapSetInformation  +
call ds:SetProcessDPIAware  +
mov hModule esi +
call ds:GetCommandLineW  +
push edi  +
push offset dword_1001894  +
mov [ebp+var_14] eax +
call ds:RegisterApplicationRestart  +
cmp eax edi +
jl loc_1007E60  +
push 7Bh  +
push esi  +
call sub_100AF33  +
push edi  +
mov [ebp+var_20] edi +
call ds:CoInitialize  +
test eax eax +
jl loc_1007E58  +
push ebx  +
push offset dword_1001384  +
push esi  +
mov ebx offset unk_100D878 +
push offset off_100D018  +
mov ecx ebx +
call sub_1003607  +
call ds:GetCurrentThreadId  +
mov esi offset asc_1001950 +
lea edi [ebp+sz] +
movs   +
mov dword_100D8FC eax +
lea eax [ebp+sz] +
push eax  +
push [ebp+var_14]  +
movs   +
xor esi esi +
mov [ebp+var_18] 1 +
mov [ebp+var_1C] esi +
call sub_10028C9  +
mov [ebp+var_14] eax +
mov edi offset off_10017C8 +
cmp eax esi +
jz loc_1007D6A  +
inc [ebp+var_1C]  +
push offset aRegserver  +
lea ecx [ebp+var_1AC] +
call sub_1005D94  +
push 0FFFFFFFFh  +
lea eax [ebp+var_1AC] +
push eax  +
push [ebp+var_14]  +
lea ecx [ebp+var_2BC] +
call sub_1005D94  +
mov ecx eax +
call sub_10064D7  +
neg eax  +
sbb al al +
inc al  +
lea ecx [ebp+var_2BC] +
mov [ebp+var_D] al +
mov [ebp+var_2BC] edi +
call sub_1004813  +
lea ecx [ebp+var_1AC] +
mov [ebp+var_1AC] edi +
call sub_1004813  +
cmp [ebp+var_D] 0 +
jnz loc_1007C2C  +
push offset aUnregserver  +
lea ecx [ebp+var_1AC] +
call sub_1005D94  +
push 0FFFFFFFFh  +
lea eax [ebp+var_1AC] +
push eax  +
push [ebp+var_14]  +
lea ecx [ebp+var_2BC] +
call sub_1005D94  +
mov ecx eax +
call sub_10064D7  +
neg eax  +
sbb al al +
inc al  +
lea ecx [ebp+var_2BC] +
mov [ebp+var_D] al +
mov [ebp+var_2BC] edi +
call sub_1004813  +
lea ecx [ebp+var_1AC] +
mov [ebp+var_1AC] edi +
call sub_1004813  +
cmp [ebp+var_D] 0 +
jnz loc_1007CA1  +
lea eax [ebp+var_2BC] +
push eax  +
push [ebp+var_14]  +
lea ecx [ebp+var_3CC] +
call sub_1005D94  +
mov ecx eax +
call sub_10063C2  +
push 0Ch  +
push esi  +
lea ecx [ebp+var_1AC] +
push ecx  +
mov ecx eax +
call sub_10063E6  +
push offset aSelectdevice  +
lea ecx [ebp+var_4DC] +
call sub_1005D94  +
push eax  +
lea eax [ebp+var_1AC] +
push eax  +
call sub_1005D74  +
lea ecx [ebp+var_1AC] +
mov [ebp+var_D] al +
mov [ebp+var_1AC] edi +
call sub_1004813  +
lea ecx [ebp+var_2BC] +
mov [ebp+var_2BC] edi +
call sub_1004813  +
lea ecx [ebp+var_3CC] +
mov [ebp+var_3CC] edi +
call sub_1004813  +
lea ecx [ebp+var_4DC] +
mov [ebp+var_4DC] edi +
call sub_1004813  +
cmp [ebp+var_D] 0 +
jnz loc_1007D6A  +
lea eax [ebp+sz] +
push eax  +
push [ebp+var_14]  +
call sub_10028C9  +
mov [ebp+var_14] eax +
cmp eax esi +
jnz loc_1007AAC  +
jmp loc_1007D1C  +
push esi  +
push 1  +
push 65h  +
push ebx  +
call sub_10067A6  +
push esi  +
push 1  +
push 0DFh  +
push ebx  +
call sub_10067A6  +
push esi  +
push 1  +
push ebx  +
call sub_10054F4  +
push 1  +
push 1  +
push 67h  +
push 66h  +
push 65h  +
push offset dword_1001A34  +
mov [ebp+var_20] eax +
mov esi offset dword_1001394 +
push esi  +
xor eax eax +
call sub_100728F  +
push 1  +
push 1  +
push 67h  +
push 66h  +
push 65h  +
push offset dword_1001A44  +
push esi  +
xor eax eax +
call sub_100728F  +
push 1  +
push 1  +
push 67h  +
push 66h  +
push 65h  +
push offset dword_1001A54  +
push esi  +
xor eax eax +
call sub_100728F  +
push 1  +
push 1  +
jmp loc_1007D03  +
push esi  +
push esi  +
push 65h  +
push ebx  +
call sub_10067A6  +
push esi  +
push 1  +
push ebx  +
call sub_10055A6  +
push esi  +
push esi  +
push 67h  +
push 66h  +
push 65h  +
push offset dword_1001A34  +
mov [ebp+var_20] eax +
mov esi offset dword_1001394 +
push esi  +
xor eax eax +
call sub_100728F  +
push 0  +
push 0  +
push 67h  +
push 66h  +
push 65h  +
push offset dword_1001A44  +
push esi  +
xor eax eax +
call sub_100728F  +
push 0  +
push 0  +
push 67h  +
push 66h  +
push 65h  +
push offset dword_1001A54  +
push esi  +
xor eax eax +
call sub_100728F  +
push 0  +
push 0  +
push 67h  +
push 66h  +
push 65h  +
push offset dword_1001A64  +
push esi  +
xor eax eax +
call sub_100728F  +
and [ebp+var_18] 0 +
xor esi esi +
cmp [ebp+var_1C] esi +
jz loc_1007D6A  +
cmp [ebp+var_18] esi +
jz loc_1007E4B  +
mov ecx ebx +
call sub_10035BC  +
push esi  +
push 4  +
push ebx  +
call sub_1003394  +
mov edi ds:GetMessageW +
jmp loc_1007D4F  +
lea eax [ebp+Msg] +
push eax  +
call ds:DispatchMessageW  +
push esi  +
push esi  +
push esi  +
lea eax [ebp+Msg] +
push eax  +
call edi  +
test eax eax +
jnz loc_1007D42  +
push ebx  +
call sub_10033E9  +
jmp loc_1007E4B  +
push offset aWiawizardsingl  +
push esi  +
push esi  +
call sub_100ABE7  +
cmp eax esi +
jge loc_1007E4B  +
mov ecx 80070422h +
cmp eax ecx +
jz loc_1007DE1  +
push 5Ch  +
lea eax [ebp+var_7C] +
push esi  +
push eax  +
call memset  +
mov eax hModule +
add esp 0Ch +
push esi  +
push esi  +
mov [ebp+var_78] eax +
push esi  +
lea eax [ebp+var_80] +
push eax  +
mov [ebp+var_80] 60h +
mov [ebp+var_7C] esi +
mov [ebp+var_74] 1 +
mov [ebp+var_70] 20h +
mov [ebp+var_6C] 79h +
mov [ebp+var_68] 0FFFFh +
mov [ebp+var_64] 99h +
mov [ebp+var_60] 98h +
call ds:off_1001D00  +
jmp loc_1007E4B  +
push ecx  +
lea eax [ebp+var_3CC] +
push eax  +
call sub_100A889  +
push hModule  +
mov eax [eax+104h] +
push 79h  +
lea ecx [ebp+var_4DC] +
mov [ebp+var_18] eax +
call sub_1006328  +
push esi  +
push 0FFFEh  +
push 20h  +
push esi  +
push [ebp+var_18]  +
push dword ptr [eax+104h]  +
push hModule  +
push esi  +
call ds:off_1001CFC  +
lea ecx [ebp+var_4DC] +
mov [ebp+var_4DC] edi +
call sub_1004813  +
lea ecx [ebp+var_3CC] +
mov [ebp+var_3CC] edi +
call sub_1004813  +
push ebx  +
call sub_1004066  +
call ds:CoUninitialize  +
pop ebx  +
call sub_100B011  +
mov eax [ebp+var_20] +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_100A24F  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov eax [esi+4] +
inc eax  +
push eax  +
call sub_1007683  +
test al al +
jz loc_1007EAA  +
mov ecx [esi+4] +
push [ebp+arg_0]  +
imul ecx ecx +
add ecx [esi+10h] +
call sub_1006943  +
mov eax [esi+4] +
lea ecx [eax+1] +
mov [esi+4] ecx +
jmp loc_1007EAD  +
or eax 0FFFFFFFFh +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_4]  +
mov esi ecx +
push [ebp+arg_0]  +
xor eax eax +
mov [esi] eax +
mov [esi+4] eax +
mov [esi+8] eax +
call sub_1007432  +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 450h +
mov eax dword_100D608 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_4] +
push ebx  +
mov ebx ecx +
mov ecx [ebp+arg_8] +
mov [ebp+var_22C] ecx +
mov ecx [ebp+arg_C] +
push esi  +
mov esi [ebp+arg_0] +
mov [ebp+var_230] ecx +
mov ecx [ebp+arg_14] +
push edi  +
mov [ebp+var_228] ecx +
test esi esi +
jnz loc_1007F24  +
mov esi offset dword_1001A14 +
mov edi ebx +
movs   +
movs   +
movs   +
push eax  +
lea ecx [ebx+10h] +
movs   +
call sub_1005D94  +
push [ebp+var_22C]  +
lea ecx [ebx+120h] +
call sub_1005D94  +
push [ebp+var_230]  +
lea ecx [ebx+230h] +
call sub_1005D94  +
mov eax [ebp+arg_10] +
mov [ebx+340h] eax +
mov eax [ebp+arg_18] +
xor ecx ecx +
cmp eax ecx +
jz loc_1007F6B  +
mov eax [eax] +
jmp loc_1007F6D  +
xor eax eax +
mov edi [ebp+var_228] +
mov [ebx+344h] eax +
mov eax [ebp+arg_1C] +
lea esi [ebx+34Ch] +
mov [ebx+348h] eax +
mov dword ptr [esi] offset off_1001690 +
mov [esi+4] ecx +
mov [esi+8] ecx +
mov dword ptr [esi+0Ch] 0Ah +
mov [esi+10h] ecx +
cmp edi ecx +
jz loc_100805A  +
cmp word ptr [edi] 0 +
jz loc_100805A  +
push edi  +
lea ecx [ebp+var_114] +
call sub_1005D94  +
push edi  +
call ds:lstrlenW  +
lea edi [edi+eax*2+2] +
push edi  +
lea ecx [ebp+var_224] +
call sub_1005D94  +
push edi  +
call ds:lstrlenW  +
lea ecx [ebp+var_114] +
lea edi [edi+eax*2+2] +
call sub_10046ED  +
test eax eax +
jz loc_1008028  +
lea ecx [ebp+var_224] +
call sub_10046ED  +
test eax eax +
jz loc_1008028  +
lea eax [ebp+var_224] +
push eax  +
lea eax [ebp+var_114] +
push eax  +
lea ecx [ebp+var_450] +
call sub_1005F82  +
push eax  +
mov ecx esi +
call sub_1007E75  +
lea ecx [ebp+var_450] +
call sub_10057FC  +
lea ecx [ebp+var_224] +
mov [ebp+var_224] offset off_10017C8 +
call sub_1004813  +
lea ecx [ebp+var_114] +
mov [ebp+var_114] offset off_10017C8 +
call sub_1004813  +
test edi edi +
jnz loc_1007FA6  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
mov eax ebx +
xor ecx ebp +
pop ebx  +
call sub_100A24F  +
leave   +
retn 20h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 364h +
mov eax dword_100D608 +
xor eax ebp +
mov [ebp-4] eax +
mov edx [ebp+18h] +
mov ecx [ebp+14h] +
mov eax [ebp+10h] +
push esi  +
push dword ptr [ebp+28h]  +
mov esi [ebp+20h] +
push dword ptr [ebp+24h]  +
push esi  +
push dword ptr [ebp+1Ch]  +
push edx  +
push ecx  +
push eax  +
push dword ptr [ebp+0Ch]  +
lea ecx [ebp-364h] +
call sub_1007EE0  +
lea eax [ebp-364h] +
push eax  +
call sub_10099C7  +
lea ecx [ebp-364h] +
mov esi eax +
call sub_1007773  +
mov ecx [ebp-4] +
mov eax esi +
xor ecx ebp +
pop esi  +
call sub_100A24F  +
leave   +
retn 24h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 6ACh +
mov eax dword_100D608 +
xor eax ebp +
mov [ebp-4] eax +
mov eax [ebp+10h] +
push ebx  +
mov ebx [ebp+14h] +
mov [ebp-59Ch] eax +
mov eax [ebp+18h] +
push esi  +
mov esi [ebp+0Ch] +
mov [ebp-598h] eax +
mov eax [ebp+20h] +
push edi  +
mov [ebp-594h] eax +
mov eax [ebp+24h] +
push 1  +
push 0  +
lea ecx [ebp-58Ch] +
mov [ebp-590h] ebx +
mov [ebp-580h] eax +
call sub_1007EB7  +
lea eax [ebp-57Ch] +
push eax  +
push esi  +
call ds:StringFromCLSID  +
push dword ptr [ebp-57Ch]  +
lea ecx [ebp-114h] +
call sub_1005D94  +
push ebx  +
lea ecx [ebp-6ACh] +
call sub_1005D94  +
push eax  +
lea ecx [ebp-114h] +
call sub_100565E  +
mov ebx offset off_10017C8 +
lea ecx [ebp-6ACh] +
mov [ebp-6ACh] ebx +
call sub_1004813  +
push dword ptr [ebp-57Ch]  +
call ds:CoTaskMemFree  +
lea eax [ebp-114h] +
push eax  +
lea eax [ebp-6ACh] +
push eax  +
call sub_1007757  +
mov eax [eax+104h] +
push 0  +
push eax  +
lea ecx [ebp-58Ch] +
call sub_1007432  +
cmp eax 2 +
lea ecx [ebp-6ACh] +
setz byte ptr [ebp-575h]  +
mov [ebp-6ACh] ebx +
call sub_1004813  +
cmp byte ptr [ebp-575h] 0 +
jz loc_1008221  +
lea ecx [ebp-58Ch] +
call sub_1003A8E  +
mov edi eax +
test edi edi +
jz loc_1008221  +
mov eax [edi] +
test eax eax +
jz loc_1008203  +
push eax  +
call ds:IsWindow  +
test eax eax +
jz loc_1008203  +
push dword ptr [edi]  +
call ds:SetForegroundWindow  +
cmp dword ptr [ebp-584h] 0 +
jz loc_10082B3  +
push dword ptr [ebp-58Ch]  +
call ds:ReleaseMutex  +
jmp loc_10082B3  +
lea ecx [ebp-574h] +
call sub_1005F0A  +
push dword ptr [ebp-59Ch]  +
lea edi [ebp-574h] +
movs   +
movs   +
movs   +
lea ecx [ebp-454h] +
movs   +
call sub_1005711  +
push dword ptr [ebp-590h]  +
lea ecx [ebp-344h] +
call sub_1005711  +
push dword ptr [ebp-598h]  +
lea ecx [ebp-234h] +
call sub_1005711  +
mov eax [ebp-580h] +
mov eax [eax] +
push dword ptr [ebp-594h]  +
mov [ebp-120h] eax +
mov eax [ebp+28h] +
lea ecx [ebp-564h] +
mov [ebp-11Ch] eax +
call sub_1005711  +
lea eax [ebp-574h] +
push eax  +
call sub_10060FC  +
test eax eax +
jz loc_10082A8  +
push eax  +
call ds:CloseHandle  +
lea ecx [ebp-574h] +
call sub_10057B9  +
lea ecx [ebp-114h] +
mov [ebp-114h] ebx +
call sub_1004813  +
lea ecx [ebp-58Ch] +
call sub_10039D0  +
mov ecx [ebp-4] +
pop edi  +
pop esi  +
xor ecx ebp +
xor eax eax +
pop ebx  +
call sub_100A24F  +
leave   +
retn 24h  +
***
mov edi edi +
push ebx  +
push esi  +
push 0  +
call ds:GetDC  +
mov ebx eax +
test ebx ebx +
jz loc_100833C  +
push edi  +
mov edi ds:GetDeviceCaps +
push 0Eh  +
push ebx  +
call edi  +
push 0Ch  +
push ebx  +
mov esi eax +
call edi  +
imul esi eax +
push ebx  +
push 0  +
call ds:ReleaseDC  +
pop edi  +
cmp esi 4 +
jz loc_100833C  +
cmp esi 8 +
jz loc_100833C  +
push 10h  +
pop eax  +
cmp esi eax +
jz loc_100833F  +
push 18h  +
pop eax  +
cmp esi eax +
jz loc_100833F  +
push 20h  +
pop eax  +
cmp esi eax +
jz loc_100833F  +
xor eax eax +
jmp loc_100833F  +
push 4  +
pop eax  +
pop esi  +
pop ebx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
push esi  +
xor esi esi +
test eax eax +
jz loc_100838B  +
mov edx [ebp+0Ch] +
test edx edx +
jz loc_100838B  +
mov ecx [eax+14h] +
test ecx ecx +
jz loc_100838B  +
mov eax [edx+14h] +
test eax eax +
jz loc_100838B  +
push 0FFFFFFFFh  +
push eax  +
push 0FFFFFFFFh  +
push ecx  +
push 1  +
push 400h  +
call ds:CompareStringW  +
dec eax  +
jz loc_1008388  +
dec eax  +
dec eax  +
jnz loc_100838B  +
inc esi  +
jmp loc_100838B  +
or esi 0FFFFFFFFh +
mov eax esi +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 40h +
and [ebp+var_4] 0 +
push ebx  +
push esi  +
mov esi ds:SendMessageW +
push edi  +
push 2  +
push 0FFFFFFFFh  +
mov edi ecx +
push 100Ch  +
push dword ptr [edi]  +
call esi  +
mov ebx eax +
cmp ebx 0FFFFFFFFh +
jz loc_10083F2  +
push 38h  +
lea eax [ebp+var_3C] +
push 0  +
push eax  +
call memset  +
add esp 0Ch +
lea eax [ebp+lParam] +
push eax  +
push 0  +
push 104Bh  +
push dword ptr [edi]  +
mov [ebp+lParam] 4 +
mov [ebp+var_3C] ebx +
call esi  +
test eax eax +
mov eax [ebp+var_20] +
jnz loc_10083F5  +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_1008416  +
cmp word ptr [eax] 0 +
jz loc_1008418  +
add eax 2 +
jmp loc_1008418  +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
push ebx  +
mov ebx [ebp+arg_C] +
and dword ptr [ebx] 0 +
push esi  +
mov esi [ebp+arg_0] +
mov eax [esi] +
push edi  +
lea ecx [ebp+var_4] +
push ecx  +
push offset dword_1001990  +
push esi  +
call dword ptr [eax]  +
mov edi eax +
cmp edi 80004002h +
jnz loc_1008488  +
mov eax [esi] +
and [ebp+arg_C] 0 +
lea ecx [ebp+arg_C] +
push ecx  +
push offset dword_1001980  +
push esi  +
call dword ptr [eax]  +
mov edi eax +
test edi edi +
jl loc_1008479  +
mov eax [ebp+arg_C] +
mov ecx [eax] +
push ebx  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push eax  +
call dword ptr [ecx+44h]  +
mov edi eax +
mov eax [ebp+arg_C] +
test eax eax +
jz loc_100849E  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_100849E  +
test edi edi +
jl loc_100849E  +
mov eax [ebp+var_4] +
mov ecx [eax] +
push ebx  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push eax  +
call dword ptr [ecx+20h]  +
mov edi eax +
mov eax [ebp+var_4] +
test eax eax +
jz loc_10084AB  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 488h +
mov eax dword_100D608 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push ebx  +
mov ebx [eax+20h] +
push esi  +
xor esi esi +
push edi  +
mov edi ecx +
mov [ebp+ppv] esi +
cmp ebx esi +
jz loc_100859A  +
xor eax eax +
mov [ebp+hObject] esi +
lea edi [ebp-440h] +
stos   +
stos   +
push 40h  +
stos   +
lea eax [ebp+StartupInfo.lpReserved] +
push esi  +
push eax  +
call memset  +
push 5  +
pop eax  +
mov [ebp+StartupInfo.wShowWindow] ax +
xor eax eax +
push 40Eh  +
mov [ebp+CommandLine] ax +
lea eax [ebp-412h] +
push esi  +
push eax  +
mov [ebp+StartupInfo.cb] 44h +
call memset  +
add esp 18h +
push ebx  +
push 208h  +
lea eax [ebp+CommandLine] +
push eax  +
call sub_10045E1  +
lea eax [ebp+hObject] +
push eax  +
lea eax [ebp+StartupInfo] +
push eax  +
push esi  +
push esi  +
push esi  +
push esi  +
push esi  +
push esi  +
lea eax [ebp+CommandLine] +
push eax  +
push esi  +
call ds:CreateProcessW  +
test eax eax +
jz loc_10086A0  +
push [ebp+hObject]  +
mov edi ds:CloseHandle +
call edi  +
push dword ptr [ebp-440h]  +
call edi  +
mov eax [ebp+ppv] +
cmp eax esi +
jmp loc_10086BC  +
lea ecx [ebp+ppv] +
push ecx  +
push offset stru_1001AB4  +
push 4  +
push esi  +
push eax  +
call ds:CoCreateInstance  +
cmp eax esi +
jl loc_1008686  +
mov eax [edi+10h] +
push dword ptr [eax+114h]  +
mov esi [ebp+ppv] +
lea ecx [ebp+var_424] +
call sub_10037B9  +
mov ebx [eax] +
mov eax [edi+10h] +
push dword ptr [eax+444h]  +
lea ecx [ebp+var_420] +
call sub_10037B9  +
mov eax [eax] +
mov [ebp+var_42C] eax +
mov eax [edi+10h] +
push dword ptr [eax+334h]  +
lea ecx [ebp+var_41C] +
call sub_10037B9  +
mov eax [eax] +
mov [ebp+var_430] eax +
mov eax [edi+10h] +
push dword ptr [eax+224h]  +
lea ecx [ebp+var_428] +
call sub_10037B9  +
mov eax [eax] +
mov ecx [esi] +
mov [ebp+var_434] eax +
mov eax [edi+10h] +
push dword ptr [eax+458h]  +
lea edx [eax+454h] +
push edx  +
push ebx  +
push dword ptr [eax+450h]  +
push [ebp+var_42C]  +
push [ebp+var_430]  +
push [ebp+var_434]  +
push eax  +
push esi  +
call dword ptr [ecx+0Ch]  +
push [ebp+var_428]  +
mov esi ds:SysFreeString +
mov ebx eax +
call esi  +
push [ebp+var_41C]  +
call esi  +
push [ebp+var_420]  +
call esi  +
push [ebp+var_424]  +
call esi  +
test ebx ebx +
jge loc_10086B4  +
xor esi esi +
push esi  +
push 0AEh  +
push 0ADh  +
push esi  +
push hModule  +
push dword ptr [edi+4]  +
call sub_100AD4F  +
mov eax [ebp+ppv] +
cmp eax esi +
jz loc_10086B0  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
xor al al +
jmp loc_10086C6  +
mov eax [ebp+ppv] +
test eax eax +
jz loc_10086C4  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov al 1 +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100A24F  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi [ecx+104h] +
mov [ebp+var_4] ecx +
test esi esi +
jnz loc_10086F5  +
or eax 0FFFFFFFFh +
jmp loc_1008756  +
call sub_10046ED  +
mov ecx [ebp+arg_4] +
cmp ecx eax +
ja loc_10086F0  +
push ebx  +
push edi  +
lea esi [esi+ecx*2] +
jmp loc_1008749  +
mov ecx [ebp+arg_0] +
mov edi [ecx+104h] +
mov ebx esi +
test ax ax +
jz loc_100873B  +
movzx eax word ptr [edi] +
test ax ax +
jz loc_100875B  +
cmp [ebx] ax +
jnz loc_100873B  +
push ebx  +
call sub_10083FF  +
push edi  +
mov ebx eax +
call sub_10083FF  +
cmp word ptr [ebx] 0 +
mov edi eax +
jnz loc_1008718  +
cmp word ptr [edi] 0 +
jz loc_100875B  +
push esi  +
call sub_10083FF  +
mov esi eax +
movzx eax word ptr [esi] +
test ax ax +
jnz loc_1008708  +
or eax 0FFFFFFFFh +
pop edi  +
pop ebx  +
pop esi  +
leave   +
retn 8  +
mov ecx [ebp+var_4] +
mov eax esi +
sub eax [ecx+104h] +
sar eax 1 +
jmp loc_1008754  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov ecx [esi] +
test ecx ecx +
jz loc_1008793  +
call sub_1008397  +
test eax eax +
jz loc_1008793  +
push eax  +
mov ecx esi +
call sub_10084B9  +
test al al +
jnz loc_1008793  +
xor eax eax +
pop esi  +
retn   +
xor eax eax +
inc eax  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov esi ecx +
or edi 0FFFFFFFFh +
push 0  +
jmp loc_10087B3  +
mov edi eax +
inc eax  +
push eax  +
mov ecx esi +
push [ebp+arg_0]  +
call sub_10086DC  +
test eax eax +
jge loc_10087AD  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
movzx eax [ebp+arg_4] +
push esi  +
push edi  +
xor edi edi +
inc edi  +
dec eax  +
mov esi ecx +
jz loc_10087E4  +
dec eax  +
jz loc_10087EF  +
jmp loc_10087FA  +
call sub_100876F  +
mov edi eax +
test edi edi +
jz loc_10087FA  +
push 1  +
push dword ptr [esi+4]  +
call ds:EndDialog  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 344h +
mov eax dword_100D608 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push ebx  +
mov [ebp+var_230] eax +
mov eax [ebp+arg_4] +
xor ebx ebx +
cmp eax ebx +
jnz loc_1008836  +
xor eax eax +
jmp loc_100899A  +
push esi  +
push eax  +
lea ecx [ebp+var_114] +
mov [ebp+var_22C] ebx +
call sub_1005D94  +
push eax  +
lea eax [ebp+var_224] +
push eax  +
call sub_1007757  +
mov esi offset off_10017C8 +
lea ecx [ebp+var_114] +
mov [ebp+var_114] esi +
call sub_1004813  +
lea ecx [ebp+var_224] +
call sub_10046ED  +
test eax eax +
jz loc_1008982  +
push edi  +
push offset dword_10019A0  +
lea ecx [ebp+var_114] +
call sub_1005D94  +
lea eax [ebp+var_114] +
push eax  +
lea ecx [ebp+var_224] +
call sub_100879D  +
lea ecx [ebp+var_114] +
mov edi eax +
mov [ebp+var_114] esi +
call sub_1004813  +
cmp edi 0FFFFFFFFh +
jz loc_1008981  +
push 0FFFFFFFFh  +
lea eax [edi+1] +
push eax  +
lea eax [ebp+var_344] +
push eax  +
lea ecx [ebp+var_224] +
call sub_10063E6  +
mov eax [eax+104h] +
push 0Ah  +
push ebx  +
push eax  +
call ds:wcstol  +
add esp 0Ch +
lea ecx [ebp+var_344] +
mov [ebp+nIconIndex] eax +
mov [ebp+var_344] esi +
call sub_1004813  +
push edi  +
push ebx  +
lea eax [ebp+var_114] +
push eax  +
lea ecx [ebp+var_224] +
call sub_10063E6  +
lea ecx [ebp+var_114] +
call sub_10046ED  +
test eax eax +
jz loc_1008970  +
push 1  +
push ebx  +
lea eax [ebp+hIcon] +
push eax  +
push [ebp+nIconIndex]  +
mov [ebp+hIcon] ebx +
push [ebp+lpszFile]  +
call ds:ExtractIconExW  +
cmp [ebp+hIcon] ebx +
jz loc_1008970  +
push [ebp+hIcon]  +
push 0FFFFFFFFh  +
push [ebp+var_230]  +
call ds:off_1001D04  +
push [ebp+hIcon]  +
mov [ebp+var_22C] eax +
call ds:DestroyIcon  +
lea ecx [ebp+var_114] +
mov [ebp+var_114] esi +
call sub_1004813  +
pop edi  +
lea ecx [ebp+var_224] +
mov [ebp+var_224] esi +
call sub_1004813  +
mov eax [ebp+var_22C] +
pop esi  +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop ebx  +
call sub_100A24F  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 53Ch +
mov eax dword_100D608 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_4] +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov [ebp+var_13C] eax +
mov eax [ebp+arg_8] +
mov [ebp+var_130] eax +
lea eax [ebp+ppv] +
push eax  +
push offset stru_1001898  +
xor esi esi +
push 4  +
push esi  +
push offset stru_1001AE4  +
mov [ebp+var_128] ecx +
mov [ebp+var_120] esi +
mov [ebp+var_138] esi +
mov [ebp+var_134] esi +
mov [ebp+ppv] esi +
call ds:CoCreateInstance  +
test eax eax +
jl loc_1008B5B  +
push dword ptr [edi+104h]  +
mov ebx [ebp+ppv] +
lea ecx [ebp+var_124] +
mov [ebp+var_12C] esi +
call sub_10037B9  +
mov eax [eax] +
mov ecx [ebx] +
lea edx [ebp+var_12C] +
push edx  +
push eax  +
push esi  +
push ebx  +
call dword ptr [ecx+10h]  +
push [ebp+var_124]  +
mov ebx ds:SysFreeString +
test eax eax +
setnl [ebp+var_115]  +
call ebx  +
cmp [ebp+var_115] 0 +
jz loc_1008A90  +
mov eax [ebp+var_12C] +
mov ecx [eax] +
lea edx [ebp+var_134] +
push edx  +
push offset dword_10019C8  +
push eax  +
call dword ptr [ecx]  +
mov eax [ebp+var_130] +
mov byte ptr [eax] 1 +
jmp loc_1008B4B  +
lea eax [ebp+var_124] +
push eax  +
push offset stru_10019B8  +
push 4  +
push esi  +
push offset stru_1001AD4  +
mov [ebp+var_124] esi +
call ds:CoCreateInstance  +
test eax eax +
jl loc_1008B3B  +
mov eax [ebp+var_124] +
push dword ptr [edi+104h]  +
lea ecx [ebp+var_144] +
mov [ebp+hMem] esi +
mov [ebp+var_148] eax +
call sub_10037B9  +
mov eax [eax] +
mov ecx [ebp+var_148] +
mov edx [ecx] +
lea edi [ebp+hMem] +
push edi  +
push eax  +
push ecx  +
call dword ptr [edx+10h]  +
push [ebp+var_144]  +
test eax eax +
setnl [ebp+var_115]  +
call ebx  +
cmp [ebp+var_115] 0 +
jz loc_1008B2B  +
mov eax [ebp+hMem] +
mov ecx [eax] +
lea edx [ebp+var_134] +
push edx  +
push offset dword_10019C8  +
push eax  +
call dword ptr [ecx]  +
mov eax [ebp+var_130] +
mov byte ptr [eax] 0 +
mov eax [ebp+hMem] +
cmp eax esi +
jz loc_1008B3B  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+var_124] +
cmp eax esi +
jz loc_1008B4B  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+var_12C] +
cmp eax esi +
jz loc_1008B5B  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+var_128] +
mov ebx ds:SendMessageW +
push esi  +
push esi  +
push 1009h  +
push dword ptr [eax]  +
call ebx  +
cmp [ebp+var_134] esi +
jz loc_10090C3  +
xor eax eax +
mov [ebp+Rect.left] esi +
lea edi [ebp+Rect.top] +
stos   +
stos   +
push 9  +
pop ecx  +
stos   +
push esi  +
xor eax eax +
push 4  +
mov [ebp+var_1D0] esi +
lea edi [ebp+var_1CC] +
stos   +
mov eax [ebp+var_128] +
push 108Eh  +
push dword ptr [eax]  +
call ebx  +
mov [ebp+hMem] esi +
push 0Ah  +
pop ecx  +
xor eax eax +
lea edi [ebp+var_194] +
stos   +
mov eax [ebp+hMem] +
mov ecx ds:dword_1001958[eax*4] +
mov [ebp+var_184] ecx +
lea ecx [ebp+lParam] +
push ecx  +
push eax  +
mov eax [ebp+var_128] +
push 1061h  +
push dword ptr [eax]  +
mov [ebp+lParam] 8 +
call ebx  +
inc [ebp+hMem]  +
cmp [ebp+hMem] 2 +
jb loc_1008BBA  +
lea eax [ebp+Rect] +
push eax  +
mov eax [ebp+var_128] +
push dword ptr [eax]  +
call ds:GetClientRect  +
mov edi ds:GetSystemMetrics +
push 2  +
mov [ebp+var_1D0] 28h +
mov [ebp+var_1CC] 3 +
mov [ebp+var_1C8] 1 +
call edi  +
mov ecx [ebp+Rect.right] +
sub ecx [ebp+Rect.left] +
mov [ebp+var_1BC] 1 +
sub ecx eax +
lea eax [ebp+var_1D0] +
push eax  +
mov eax [ebp+var_128] +
push esi  +
push 10A2h  +
push dword ptr [eax]  +
mov [ebp+var_1C4] ecx +
call ebx  +
lea eax [ebp+var_124] +
push eax  +
push [ebp+var_13C]  +
mov [ebp+var_124] esi +
push esi  +
push [ebp+var_134]  +
call sub_1008421  +
test eax eax +
jl loc_10090B3  +
push 38h  +
lea eax [ebp+var_1A4] +
push esi  +
push eax  +
mov [ebp+var_1A8] esi +
call memset  +
add esp 0Ch +
lea ecx [ebp+var_114] +
call sub_1005E26  +
push 2  +
push 2  +
call sub_10082E7  +
or eax 1 +
push eax  +
push 0Ch  +
call edi  +
push eax  +
push 0Bh  +
call edi  +
push eax  +
call ds:off_1001D08  +
push 8000h  +
push 0Ch  +
mov [ebp+var_12C] eax +
call edi  +
push eax  +
push 0Bh  +
call edi  +
push eax  +
push 1  +
push 2  +
push hModule  +
call ds:LoadImageW  +
push eax  +
push 0FFFFFFFFh  +
push [ebp+var_12C]  +
call ds:off_1001D04  +
push [ebp+var_12C]  +
mov eax [ebp+var_128] +
push esi  +
push 1003h  +
push dword ptr [eax]  +
call ebx  +
mov [ebp+var_1A8] 7 +
jmp loc_1008D3B  +
xor esi esi +
push 24h  +
push 40h  +
call ds:LocalAlloc  +
mov [ebp+hMem] eax +
cmp eax esi +
jz loc_1009049  +
mov eax [ebp+var_124] +
mov ecx [eax] +
lea edx [ebp+var_144] +
push edx  +
push [ebp+hMem]  +
push 1  +
push eax  +
call dword ptr [ecx+0Ch]  +
mov esi [ebp+hMem] +
push 4  +
mov [ebp+var_130] eax +
pop ecx  +
mov edi offset dword_10013A4 +
xor eax eax +
cmps   +
jz loc_1008DF6  +
mov esi [ebp+hMem] +
push 4  +
pop ecx  +
mov edi offset dword_1001A74 +
xor eax eax +
cmps   +
jz loc_1008DF6  +
mov esi [ebp+hMem] +
push 4  +
pop ecx  +
mov edi offset dword_1001A84 +
xor eax eax +
cmps   +
jz loc_1008DF6  +
push offset aInternal  +
lea ecx [ebp+var_31C] +
call sub_1005D94  +
or [ebp+var_120] 3 +
push 0FFFFFFFFh  +
lea eax [ebp+var_31C] +
push eax  +
mov eax [ebp+hMem] +
push dword ptr [eax+14h]  +
lea ecx [ebp+var_42C] +
call sub_1005D94  +
mov ecx eax +
call sub_10064D7  +
mov [ebp+var_115] 0 +
test eax eax +
jnz loc_1008DFD  +
mov [ebp+var_115] 1 +
test byte ptr [ebp+var_120] 2 +
mov esi offset off_10017C8 +
jz loc_1008E23  +
and [ebp+var_120] 0FFFFFFFDh +
lea ecx [ebp+var_42C] +
mov [ebp+var_42C] esi +
call sub_1004813  +
test byte ptr [ebp+var_120] 1 +
jz loc_1008E44  +
and [ebp+var_120] 0FFFFFFFEh +
lea ecx [ebp+var_31C] +
mov [ebp+var_31C] esi +
call sub_1004813  +
cmp [ebp+var_115] 0 +
jz loc_1008E5F  +
push [ebp+hMem]  +
call sub_1002585  +
xor edi edi +
jmp loc_100903A  +
xor edi edi +
cmp [ebp+var_130] edi +
jnz loc_100902F  +
mov eax [ebp+hMem] +
push dword ptr [eax+14h]  +
lea ecx [ebp+var_53C] +
call sub_1005D94  +
push eax  +
lea eax [ebp+var_31C] +
push eax  +
call sub_1007757  +
push dword ptr [eax+104h]  +
lea eax [ebp+var_42C] +
push eax  +
call sub_100A8DF  +
push eax  +
lea ecx [ebp+var_114] +
call sub_1005BBF  +
lea ecx [ebp+var_42C] +
mov [ebp+var_42C] esi +
call sub_1004813  +
lea ecx [ebp+var_31C] +
mov [ebp+var_31C] esi +
call sub_1004813  +
lea ecx [ebp+var_53C] +
mov [ebp+var_53C] esi +
call sub_1004813  +
mov eax [ebp+var_10] +
mov [ebp+var_194] eax +
mov eax [ebp+hMem] +
mov [ebp+var_188] eax +
push dword ptr [eax+1Ch]  +
push [ebp+var_12C]  +
call sub_1008807  +
mov esi [ebp+var_128] +
push edi  +
push edi  +
push 1004h  +
push dword ptr [esi]  +
mov [ebp+var_18C] eax +
call ebx  +
mov [ebp+var_1A4] eax +
lea eax [ebp+var_1A8] +
push eax  +
push edi  +
push 104Dh  +
push dword ptr [esi]  +
call ebx  +
mov esi eax +
mov [ebp+var_13C] esi +
cmp esi 0FFFFFFFFh +
jz loc_1008D39  +
mov eax [ebp+hMem] +
push dword ptr [eax+18h]  +
lea ecx [ebp+var_31C] +
call sub_1005D94  +
push eax  +
lea eax [ebp+var_42C] +
push eax  +
call sub_1007757  +
push dword ptr [eax+104h]  +
lea eax [ebp+var_53C] +
push eax  +
call sub_100A8DF  +
push eax  +
lea ecx [ebp+var_114] +
call sub_1005BBF  +
mov edi offset off_10017C8 +
lea ecx [ebp+var_53C] +
mov [ebp+var_53C] edi +
call sub_1004813  +
lea ecx [ebp+var_42C] +
mov [ebp+var_42C] edi +
call sub_1004813  +
lea ecx [ebp+var_31C] +
mov [ebp+var_31C] edi +
call sub_1004813  +
xor eax eax +
lea edi [ebp+var_168] +
stos   +
stos   +
stos   +
stos   +
mov edi [ebp+var_128] +
lea eax [ebp+var_16C] +
push eax  +
push 0  +
mov [ebp+var_168] esi +
push 10A4h  +
push dword ptr [edi]  +
xor esi esi +
inc esi  +
mov [ebp+var_16C] 14h +
mov [ebp+var_164] esi +
mov [ebp+var_160] offset dword_1001960 +
call ebx  +
mov eax [ebp+var_10] +
mov [ebp+var_1F8] eax +
lea eax [ebp+var_20C] +
push eax  +
push [ebp+var_13C]  +
mov [ebp+var_204] esi +
push 1074h  +
push dword ptr [edi]  +
call ebx  +
inc [ebp+var_138]  +
jmp loc_1008D39  +
push [ebp+hMem]  +
call sub_1002585  +
pop ecx  +
cmp [ebp+var_130] edi +
jz loc_1008D39  +
xor esi esi +
mov edi [ebp+var_128] +
push offset loc_1008347  +
push esi  +
push 1030h  +
push dword ptr [edi]  +
call ebx  +
push 3  +
pop eax  +
mov [ebp+lParam] eax +
mov [ebp+var_19C] eax +
lea eax [ebp+var_1A8] +
push eax  +
push esi  +
push 104Ch  +
push dword ptr [edi]  +
mov [ebp+var_1A4] esi +
mov [ebp+var_1A8] 8 +
call ebx  +
push esi  +
push [ebp+var_1A4]  +
push 1013h  +
push dword ptr [edi]  +
call ebx  +
lea ecx [ebp+var_114] +
mov [ebp+var_114] offset off_10017C8 +
call sub_1004813  +
mov eax [ebp+var_124] +
cmp eax esi +
jz loc_10090C3  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+ppv] +
cmp eax esi +
jz loc_10090D3  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+var_134] +
pop edi  +
cmp eax esi +
pop esi  +
pop ebx  +
jz loc_10090E6  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov ecx [ebp+var_4] +
mov eax [ebp+var_138] +
xor ecx ebp +
call sub_100A24F  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 22Ch +
mov eax dword_100D608 +
xor eax ebp +
mov [ebp+var_4] eax +
and [ebp+var_118] 0 +
push ebx  +
push esi  +
push edi  +
lea eax [ebp+pv] +
mov esi ecx +
push eax  +
push dword ptr [esi+10h]  +
call ds:StringFromCLSID  +
push [ebp+pv]  +
lea ecx [ebp+var_114] +
call sub_1005D94  +
mov eax [esi+10h] +
add eax 230h +
push eax  +
lea ecx [ebp+var_114] +
call sub_100565E  +
push [ebp+pv]  +
call ds:CoTaskMemFree  +
mov ebx ds:LocalAlloc +
push 0Ch  +
push 40h  +
call ebx  +
mov edi eax +
test edi edi +
jz loc_10091A2  +
lea eax [ebp+var_114] +
push eax  +
lea eax [ebp+var_22C] +
push eax  +
mov [ebp+var_118] 1 +
call sub_1007757  +
mov eax [eax+104h] +
push 1  +
push eax  +
mov ecx edi +
call sub_1007EB7  +
jmp loc_10091A4  +
xor eax eax +
test byte ptr [ebp+var_118] 1 +
mov [esi+0Ch] eax +
mov edi offset off_10017C8 +
jz loc_10091C6  +
lea ecx [ebp+var_22C] +
mov [ebp+var_22C] edi +
call sub_1004813  +
mov ecx [esi+0Ch] +
test ecx ecx +
jz loc_10091EC  +
call sub_1003A8E  +
test eax eax +
jz loc_10091EC  +
mov ecx [esi+4] +
mov [eax] ecx +
mov eax [esi+0Ch] +
cmp dword ptr [eax+8] 0 +
jz loc_10091EC  +
push dword ptr [eax]  +
call ds:ReleaseMutex  +
push 4  +
push 40h  +
call ebx  +
mov ebx eax +
test ebx ebx +
jz loc_100920C  +
push 0EDh  +
push dword ptr [esi+4]  +
call ds:GetDlgItem  +
mov [ebx] eax +
mov ecx ebx +
jmp loc_100920E  +
xor ecx ecx +
mov [esi] ecx +
test ecx ecx +
jz loc_1009227  +
mov eax [esi+10h] +
lea edx [esi+8] +
push edx  +
push eax  +
add eax 230h +
push eax  +
call sub_10089AE  +
mov eax [esi+10h] +
add eax 340h +
push eax  +
lea eax [ebp+var_22C] +
push eax  +
call sub_1007757  +
push dword ptr [eax+104h]  +
push dword ptr [esi+4]  +
call ds:SetWindowTextW  +
lea ecx [ebp+var_22C] +
mov [ebp+var_22C] edi +
call sub_1004813  +
mov eax [esi+10h] +
add eax 120h +
push eax  +
lea eax [ebp+var_22C] +
push eax  +
call sub_1007757  +
push dword ptr [eax+104h]  +
push 0EFh  +
push dword ptr [esi+4]  +
call ds:SetDlgItemTextW  +
lea ecx [ebp+var_22C] +
mov [ebp+var_22C] edi +
call sub_1004813  +
lea ecx [ebp+var_114] +
mov [ebp+var_114] edi +
call sub_1004813  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100A24F  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+hWnd] +
push esi  +
push edi  +
push 8  +
push ebx  +
call ds:GetWindowLongW  +
mov edi eax +
mov eax [ebp+arg_4] +
dec eax  +
dec eax  +
jz loc_1009434  +
sub eax 4Ch +
jz loc_100935D  +
sub eax 5 +
jz loc_1009353  +
sub eax 0BDh +
jz loc_1009308  +
dec eax  +
jnz loc_1009430  +
test edi edi +
jz loc_1009430  +
mov eax [ebp+arg_8] +
push eax  +
shr eax 10h +
push eax  +
mov ecx edi +
jmp loc_1009349  +
mov esi [ebp+dwNewLong] +
push esi  +
push 8  +
push ebx  +
call ds:SetWindowLongW  +
mov ecx esi +
mov [esi+4] ebx +
call sub_10090FF  +
mov edi ds:GetDlgItem +
push 0  +
push 0  +
push 1004h  +
mov esi 0EDh +
push esi  +
push ebx  +
call edi  +
push eax  +
call ds:SendMessageW  +
cmp eax 1 +
jnz loc_100939D  +
mov ecx [ebp+dwNewLong] +
push eax  +
push 0  +
call sub_10087CC  +
jmp loc_1009474  +
call sub_100AE61  +
jmp loc_1009471  +
mov eax [ebp+dwNewLong] +
xor edi edi +
cmp eax edi +
jz loc_1009430  +
mov esi 0EDh +
cmp [eax+4] esi +
jnz loc_1009430  +
mov ecx [eax+8] +
cmp ecx 0FFFFFF9Bh +
jnz loc_10093C9  +
test byte ptr [eax+1Ch] 8 +
jz loc_1009430  +
push edi  +
push edi  +
mov edi ds:GetDlgItem +
push esi  +
push ebx  +
call edi  +
push eax  +
call ds:InvalidateRect  +
push 0  +
push 0  +
push 1032h  +
push esi  +
push ebx  +
call edi  +
push eax  +
call ds:SendMessageW  +
neg eax  +
sbb eax eax +
neg eax  +
push eax  +
push 1  +
push ebx  +
call edi  +
push eax  +
call ds:EnableWindow  +
jmp loc_1009471  +
cmp ecx 0FFFFFFFDh +
jnz loc_10093F7  +
push edi  +
push edi  +
push 1032h  +
push esi  +
push ebx  +
call ds:GetDlgItem  +
mov esi ds:SendMessageW +
push eax  +
call esi  +
test eax eax +
jz loc_1009430  +
push edi  +
push 1  +
push 111h  +
push ebx  +
call esi  +
jmp loc_1009471  +
cmp ecx 0FFFFFF99h +
jnz loc_1009430  +
mov esi [eax+28h] +
cmp esi edi +
jz loc_1009471  +
mov eax [esi+18h] +
mov ebx ds:SysFreeString +
cmp eax edi +
jz loc_1009413  +
push eax  +
call ebx  +
mov eax [esi+1Ch] +
cmp eax edi +
jz loc_100941D  +
push eax  +
call ebx  +
mov eax [esi+14h] +
cmp eax edi +
jz loc_1009427  +
push eax  +
call ebx  +
push esi  +
call sub_1002585  +
pop ecx  +
jmp loc_1009471  +
xor eax eax +
jmp loc_1009474  +
xor esi esi +
push esi  +
push esi  +
push 1003h  +
push 0EDh  +
push ebx  +
call ds:GetDlgItem  +
push eax  +
call ds:SendMessageW  +
cmp eax esi +
jz loc_100945B  +
push eax  +
call ds:off_1001D0C  +
cmp edi esi +
jz loc_1009467  +
mov ecx [edi+0Ch] +
call sub_10039D0  +
push esi  +
push 8  +
push ebx  +
call ds:SetWindowLongW  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
or [ebp+var_4] 0FFFFFFFFh +
push esi  +
mov esi ecx +
mov eax [esi+4] +
xor ecx ecx +
cmp eax ecx +
jz loc_10094DB  +
cmp [eax] ecx +
jz loc_10094DB  +
push ebx  +
push edi  +
mov edi ds:SendDlgItemMessageW +
push ecx  +
push ecx  +
push 188h  +
mov ebx 3EAh +
push ebx  +
push dword ptr [esi]  +
call edi  +
cmp eax 0FFFFFFFFh +
jz loc_10094D9  +
push 0  +
push eax  +
push 199h  +
push ebx  +
push dword ptr [esi]  +
call edi  +
test eax eax +
jl loc_10094D9  +
mov ecx [esi+4] +
mov ecx [ecx] +
cmp eax [ecx+350h] +
jge loc_10094D9  +
mov [ebp+var_4] eax +
pop edi  +
pop ebx  +
mov eax [ebp+var_4] +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_1009480  +
xor ecx ecx +
cmp eax 0FFFFFFFFh +
setnz cl  +
push ecx  +
push 1  +
push dword ptr [esi]  +
call ds:GetDlgItem  +
push eax  +
call ds:EnableWindow  +
pop esi  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
and dword ptr [esi] 0 +
and dword ptr [esi+4] 0 +
test [ebp+arg_0] 1 +
jz loc_100952F  +
push esi  +
call sub_1002585  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
xor eax eax +
test ecx ecx +
jz loc_1009551  +
cmp ecx 7FFFFFFFh +
jbe loc_1009556  +
mov eax 80070057h +
test eax eax +
jl loc_1009592  +
push ebx  +
push esi  +
push edi  +
push [ebp+arg_C]  +
mov edi [ebp+arg_0] +
push [ebp+arg_8]  +
lea esi [ecx-1] +
push esi  +
push edi  +
xor ebx ebx +
call ds:_vsnwprintf  +
add esp 10h +
test eax eax +
jl loc_1009582  +
cmp eax esi +
ja loc_1009582  +
jnz loc_100958D  +
jmp loc_1009587  +
mov ebx 8007007Ah +
xor eax eax +
mov [edi+esi*2] ax +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_10046ED  +
test eax eax +
jz loc_10095BD  +
lea ecx [esi+110h] +
call sub_10046ED  +
test eax eax +
jz loc_10095BD  +
xor eax eax +
inc eax  +
pop esi  +
retn   +
xor eax eax +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
add ecx 120h +
push ecx  +
mov ecx [ebp+arg_0] +
call sub_1005DDA  +
mov eax [ebp+arg_0] +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 914h +
mov eax dword_100D608 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
mov esi [ebp+arg_0] +
lea ecx [ebp+var_914] +
call sub_1005E26  +
push [ebp+lpModuleName]  +
lea ecx [ebp+var_914] +
push [ebp+uID]  +
call sub_1005CEC  +
test al al +
jz loc_1009661  +
xor eax eax +
push 7FEh  +
push eax  +
mov [ebp+var_804] ax +
lea eax [ebp-802h] +
push eax  +
call memset  +
add esp 0Ch +
lea eax [ebp+arg_C] +
push eax  +
push [ebp+var_810]  +
lea eax [ebp+var_804] +
push 400h  +
push eax  +
call sub_100953B  +
lea eax [ebp+var_804] +
push eax  +
jmp loc_1009663  +
push 0  +
mov ecx esi +
call sub_10056A8  +
lea ecx [ebp+var_914] +
mov [ebp+var_914] offset off_10017C8 +
call sub_1004813  +
mov ecx [ebp+var_4] +
mov eax esi +
xor ecx ebp +
pop esi  +
call sub_100A24F  +
leave   +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_1009480  +
cmp eax 0FFFFFFFFh +
jz loc_10096C6  +
mov ecx [esi+4] +
imul eax eax +
mov edx [ecx] +
add eax [edx+35Ch] +
add ecx 4 +
push eax  +
call sub_1006943  +
push 1  +
push dword ptr [esi]  +
call ds:EndDialog  +
pop esi  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push 2  +
pop edx  +
cmp dx ax +
jnz loc_10096EA  +
push edx  +
push dword ptr [ecx]  +
call ds:EndDialog  +
jmp loc_1009743  +
xor edx edx +
inc edx  +
cmp dx ax +
jnz loc_10096FD  +
push [ebp+arg_4]  +
push eax  +
call sub_1009693  +
jmp loc_1009743  +
push esi  +
push edi  +
mov edx eax +
push 2  +
shr edx 10h +
pop edi  +
mov esi 3EAh +
cmp di dx +
jnz loc_100972B  +
mov edi esi +
cmp di ax +
jnz loc_100972B  +
push 0  +
push 1  +
push 111h  +
push dword ptr [ecx]  +
call ds:SendMessageW  +
jmp loc_1009741  +
xor edi edi +
inc edi  +
cmp di dx +
jnz loc_1009741  +
cmp si ax +
jnz loc_1009741  +
push [ebp+arg_4]  +
push eax  +
call sub_10094E6  +
pop edi  +
pop esi  +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 33Ch +
mov eax dword_100D608 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_4] +
push esi  +
push edi  +
xor edi edi +
mov esi ecx +
mov [esi+4] eax +
cmp eax edi +
jz loc_10098E6  +
cmp [eax] edi +
jz loc_10098E6  +
mov eax [eax+224h] +
cmp eax edi +
jz loc_10097AE  +
mov ecx eax +
call sub_1003A8E  +
cmp eax edi +
jz loc_10097AE  +
mov ecx [esi] +
mov [eax] ecx +
mov eax [esi+4] +
mov eax [eax+224h] +
cmp [eax+8] edi +
jz loc_10097AE  +
push dword ptr [eax]  +
call ds:ReleaseMutex  +
mov eax [esi+4] +
mov eax [eax] +
cmp [eax+350h] edi +
push ebx  +
mov [ebp+var_118] edi +
mov edi ds:SendDlgItemMessageW +
mov ebx 3EAh +
jle loc_10098B4  +
and [ebp+var_11C] 0 +
mov eax [esi+4] +
mov eax [eax] +
mov eax [eax+35Ch] +
add eax [ebp+var_11C] +
lea ecx [ebp+var_22C] +
push eax  +
call sub_1005DDA  +
lea eax [ebp+var_22C] +
push eax  +
lea eax [ebp+var_33C] +
push eax  +
call sub_1007757  +
push dword ptr [eax+104h]  +
lea eax [ebp+var_114] +
push eax  +
call sub_100A8DF  +
lea ecx [ebp+var_33C] +
mov [ebp+var_33C] offset off_10017C8 +
call sub_1004813  +
lea ecx [ebp+var_22C] +
mov [ebp+var_22C] offset off_10017C8 +
call sub_1004813  +
lea ecx [ebp+var_114] +
call sub_10046ED  +
test eax eax +
jz loc_1009878  +
push [ebp+lParam]  +
push 0  +
push 180h  +
push ebx  +
push dword ptr [esi]  +
call edi  +
cmp eax 0FFFFFFFFh +
jz loc_1009878  +
push [ebp+var_118]  +
push eax  +
push 19Ah  +
push ebx  +
push dword ptr [esi]  +
call edi  +
lea ecx [ebp+var_114] +
mov [ebp+var_114] offset off_10017C8 +
call sub_1004813  +
inc [ebp+var_118]  +
mov eax [esi+4] +
mov eax [eax] +
mov ecx [ebp+var_118] +
add [ebp+var_11C] 220h +
cmp ecx [eax+350h] +
jl loc_10097D8  +
push 0  +
push 0  +
push 186h  +
push ebx  +
push dword ptr [esi]  +
call edi  +
mov ecx esi +
call sub_1009480  +
xor ecx ecx +
cmp eax 0FFFFFFFFh +
setnz cl  +
push ecx  +
push 1  +
push dword ptr [esi]  +
call ds:GetDlgItem  +
push eax  +
call ds:EnableWindow  +
pop ebx  +
jmp loc_10098F8  +
push 0FFFFFFFFh  +
push dword ptr [esi]  +
call ds:EndDialog  +
push 57h  +
call ds:SetLastError  +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
xor eax eax +
pop esi  +
call sub_100A24F  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
push ebx  +
mov ebx [ebp+hWnd] +
push esi  +
push edi  +
push 8  +
push ebx  +
call ds:GetWindowLongW  +
cmp [ebp+arg_4] 110h +
mov esi ds:SetWindowLongW +
mov edi eax +
jnz loc_1009952  +
push 8  +
push 40h  +
call ds:LocalAlloc  +
xor edi edi +
cmp eax edi +
jz loc_100996A  +
mov [eax+4] edi +
mov [eax] ebx +
mov edi eax +
jmp loc_100996A  +
cmp [ebp+arg_4] 82h +
jnz loc_1009970  +
test edi edi +
jz loc_1009968  +
push 1  +
mov ecx edi +
call sub_1009513  +
xor edi edi +
push edi  +
push 8  +
push ebx  +
call esi  +
mov eax [ebp+arg_4] +
sub eax 110h +
jz loc_1009997  +
dec eax  +
jnz loc_10099B8  +
test edi edi +
jz loc_10099B8  +
push [ebp+arg_C]  +
mov ecx edi +
push [ebp+arg_8]  +
call sub_10096CF  +
mov [ebp+var_4] 1 +
jmp loc_10099B2  +
test edi edi +
jz loc_10099B8  +
push [ebp+arg_C]  +
mov ecx edi +
push [ebp+arg_8]  +
call sub_100974E  +
xor ecx ecx +
test eax eax +
setz cl  +
mov [ebp+var_4] ecx +
push eax  +
push 0  +
push ebx  +
call esi  +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0A08h +
mov eax dword_100D608 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
xor esi esi +
push edi  +
mov [ebp+dwMessageId] esi +
cmp [ebx+350h] esi +
jnz loc_1009A7F  +
push hModule  +
lea ecx [ebp+var_114] +
push 112h  +
call sub_1006328  +
push hModule  +
mov edi [eax+104h] +
push 113h  +
lea ecx [ebp+var_9C4] +
call sub_1006328  +
push esi  +
push 0FFFDh  +
push 20h  +
push esi  +
push edi  +
push dword ptr [eax+104h]  +
push hModule  +
push esi  +
call ds:off_1001CFC  +
mov esi offset off_10017C8 +
lea ecx [ebp+var_9C4] +
mov [ebp+var_9C4] esi +
call sub_1004813  +
lea ecx [ebp+var_114] +
mov [ebp+var_114] esi +
call sub_1004813  +
xor eax eax +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100A24F  +
leave   +
retn 4  +
lea eax [ebp+var_444] +
push eax  +
mov ecx ebx +
call sub_10095C6  +
mov [ebp+pv] esi +
mov esi ebx +
lea edi [ebp+hObject] +
movs   +
movs   +
lea eax [ebp+pv] +
movs   +
push eax  +
lea eax [ebp+hObject] +
push eax  +
movs   +
call ds:StringFromIID  +
mov esi offset off_10017C8 +
test eax eax +
jl loc_1009AFF  +
cmp [ebp+pv] 0 +
jz loc_1009AFF  +
push [ebp+pv]  +
lea ecx [ebp+var_9C4] +
call sub_1005D94  +
push eax  +
lea ecx [ebp+var_444] +
call sub_1006371  +
lea ecx [ebp+var_9C4] +
mov [ebp+var_9C4] esi +
call sub_1004813  +
push [ebp+pv]  +
call ds:CoTaskMemFree  +
xor edi edi +
inc edi  +
push edi  +
push 0  +
lea ecx [ebp+hMutex] +
call sub_1007EB7  +
lea eax [ebp+var_444] +
push eax  +
lea ecx [ebp+var_114] +
call sub_1005DDA  +
push eax  +
lea eax [ebp+var_9C4] +
push eax  +
call sub_1007757  +
mov eax [eax+104h] +
push edi  +
push eax  +
lea ecx [ebp+hMutex] +
call sub_1007432  +
cmp eax 2 +
lea ecx [ebp+var_9C4] +
setz [ebp+var_891]  +
mov [ebp+var_9C4] esi +
call sub_1004813  +
lea ecx [ebp+var_114] +
mov [ebp+var_114] esi +
call sub_1004813  +
cmp [ebp+var_891] 0 +
jz loc_1009BC3  +
lea ecx [ebp+hMutex] +
call sub_1003A8E  +
mov edi eax +
test edi edi +
jz loc_1009F1C  +
mov eax [edi] +
test eax eax +
jz loc_1009BA5  +
push eax  +
call ds:IsWindow  +
test eax eax +
jz loc_1009BA5  +
push dword ptr [edi]  +
call ds:SetForegroundWindow  +
cmp [ebp+var_89C] 0 +
jz loc_1009F1C  +
push [ebp+hMutex]  +
call ds:ReleaseMutex  +
jmp loc_1009F1C  +
lea ecx [ebp+var_664] +
call sub_1005F64  +
cmp [ebx+350h] edi +
jnz loc_1009BEC  +
push dword ptr [ebx+35Ch]  +
lea ecx [ebp+var_664] +
call sub_1006943  +
jmp loc_1009CBD  +
lea ecx [ebp+var_888] +
call sub_1005F64  +
lea eax [ebp+hMutex] +
mov [ebp+var_668] eax +
lea eax [ebp+dwInitParam] +
push eax  +
push offset sub_100990F  +
mov [ebp+dwInitParam] ebx +
xor ebx ebx +
push ebx  +
push 67h  +
push hModule  +
call sub_100B0CC  +
cmp eax edi +
jnz loc_1009C3D  +
lea eax [ebp+var_888] +
push eax  +
lea ecx [ebp+var_664] +
call sub_1006943  +
jmp loc_1009CA6  +
cmp eax 2 +
jnz loc_1009C7B  +
lea ecx [ebp+var_888] +
call sub_10057FC  +
lea ecx [ebp+var_664] +
call sub_10057FC  +
lea ecx [ebp+hMutex] +
call sub_10039D0  +
lea ecx [ebp+var_444] +
mov [ebp+var_444] esi +
call sub_1004813  +
mov eax edi +
jmp loc_1009A6E  +
cmp eax 0FFFFFFFFh +
jnz loc_1009C9C  +
call ds:GetLastError  +
cmp eax ebx +
jle loc_1009C94  +
and eax 0FFFFh +
or eax 80070000h +
mov [ebp+dwMessageId] eax +
jmp loc_1009CA6  +
mov [ebp+dwMessageId] 80004005h +
lea ecx [ebp+var_888] +
call sub_10057FC  +
cmp [ebp+dwMessageId] ebx +
jl loc_1009DCE  +
lea ecx [ebp+var_664] +
call sub_100959B  +
test al al +
jz loc_1009DB6  +
push 40h  +
lea eax [ebp+StartupInfo.lpReserved] +
push 0  +
push eax  +
call memset  +
add esp 0Ch +
lea eax [ebp+var_9C4] +
push eax  +
lea ecx [ebp+var_664] +
mov [ebp+StartupInfo.cb] 44h +
call sub_1005FAC  +
push eax  +
lea eax [ebp+var_224] +
push eax  +
call sub_1007757  +
lea ecx [ebp+var_9C4] +
mov [ebp+var_9C4] esi +
call sub_1004813  +
lea ecx [ebp+var_224] +
call sub_10046ED  +
test eax eax +
jz loc_1009D99  +
and [ebp+hObject] 0 +
xor eax eax +
lea edi [ebp-8B0h] +
stos   +
stos   +
stos   +
lea eax [ebp+hObject] +
push eax  +
xor edi edi +
lea eax [ebp+StartupInfo] +
push eax  +
push edi  +
push edi  +
push edi  +
push edi  +
push edi  +
push edi  +
push [ebp+lpCommandLine]  +
push edi  +
call ds:CreateProcessW  +
test eax eax +
jz loc_1009D7D  +
push [ebp+hObject]  +
mov edi ds:CloseHandle +
call edi  +
push dword ptr [ebp-8B0h]  +
call edi  +
jmp loc_1009DA3  +
call ds:GetLastError  +
cmp eax edi +
jle loc_1009D91  +
and eax 0FFFFh +
or eax 80070000h +
mov [ebp+dwMessageId] eax +
jmp loc_1009DA3  +
mov [ebp+dwMessageId] 8007000Eh +
lea ecx [ebp+var_224] +
mov [ebp+var_224] esi +
call sub_1004813  +
jmp loc_1009DC0  +
mov [ebp+dwMessageId] 80004005h +
xor ebx ebx +
cmp [ebp+dwMessageId] ebx +
jge loc_1009F11  +
lea ecx [ebp+var_224] +
call sub_1005E26  +
push [ebp+dwMessageId]  +
lea eax [ebp+var_114] +
push eax  +
call sub_100A889  +
lea eax [ebp+var_664] +
push eax  +
lea ecx [ebp+var_9C4] +
call sub_1005DDA  +
lea eax [ebp+var_9C4] +
push eax  +
lea eax [ebp+var_334] +
push eax  +
call sub_1007757  +
lea ecx [ebp+var_9C4] +
mov [ebp+var_9C4] esi +
call sub_1004813  +
lea ecx [ebp+var_334] +
call sub_10046ED  +
test eax eax +
jnz loc_1009E46  +
push hModule  +
lea ecx [ebp+var_334] +
push 111h  +
call sub_1005CEC  +
lea ecx [ebp+var_114] +
call sub_10046ED  +
test eax eax +
lea eax [ebp+var_224] +
jz loc_1009E7A  +
push [ebp+var_10]  +
push dword ptr [ebp+var_230]  +
push hModule  +
push 10Fh  +
push eax  +
call sub_10095E6  +
add esp 14h +
jmp loc_1009E94  +
push dword ptr [ebp+var_230]  +
push hModule  +
push 110h  +
push eax  +
call sub_10095E6  +
add esp 10h +
push hModule  +
mov edi [ebp+lpCommandLine] +
push 10Eh  +
lea ecx [ebp+var_9C4] +
call sub_1006328  +
push ebx  +
push 0FFFEh  +
push 20h  +
push ebx  +
push edi  +
push dword ptr [eax+104h]  +
push hModule  +
push ebx  +
call ds:off_1001CFC  +
lea ecx [ebp+var_9C4] +
mov [ebp+var_9C4] esi +
call sub_1004813  +
lea ecx [ebp+var_334] +
mov [ebp+var_334] esi +
call sub_1004813  +
lea ecx [ebp+var_114] +
mov [ebp+var_114] esi +
call sub_1004813  +
lea ecx [ebp+var_224] +
mov [ebp+var_224] esi +
call sub_1004813  +
lea ecx [ebp+var_664] +
call sub_10057FC  +
mov edi [ebp+dwMessageId] +
jmp loc_1009C58  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
xor eax eax +
jmp loc_1009F48  +
test eax eax +
jnz loc_1009F4D  +
mov ecx [esi] +
test ecx ecx +
jz loc_1009F45  +
call ecx  +
add esi 4 +
cmp esi [ebp+arg_4] +
jb loc_1009F39  +
pop esi  +
pop ebp  +
retn   +
***
mov eax dword_100D998 +
push offset dword_100D988  +
push dword_100D994  +
mov dword_100D988 eax +
push offset unk_100D978  +
push offset unk_100D97C  +
push offset unk_100D974  +
call ds:__wgetmainargs  +
add esp 14h +
mov dword_100D984 eax +
retn   +
***
call __SEH_prolog4  +
xor ebx ebx +
mov [ebp+var_1C] ebx +
mov [ebp+ms_exc.disabled] ebx +
lea eax [ebp+StartupInfo] +
push eax  +
call ds:GetStartupInfoW  +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov [ebp+ms_exc.disabled] 1 +
mov eax large fs:18h +
mov esi [eax+4] +
mov [ebp+var_20] ebx +
mov edi offset Destination +
push ebx  +
push esi  +
push edi  +
call ds:InterlockedCompareExchange  +
cmp eax ebx +
jz loc_1009FF0  +
cmp eax esi +
jnz loc_1009FE3  +
xor esi esi +
inc esi  +
mov [ebp+var_20] esi +
jmp loc_1009FF3  +
push 3E8h  +
call ds:Sleep  +
jmp loc_1009FCA  +
xor esi esi +
inc esi  +
mov eax dword_100DD50 +
cmp eax esi +
jnz loc_100A006  +
push 1Fh  +
call _amsg_exit  +
pop ecx  +
jmp loc_100A035  +
mov eax dword_100DD50 +
test eax eax +
jnz loc_100A02F  +
mov dword_100DD50 esi +
push offset dword_10012C4  +
push offset dword_10012B8  +
call sub_1009F2C  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_100A035  +
jmp loc_100A159  +
mov dword_100D990 esi +
mov eax dword_100DD50 +
cmp eax esi +
jnz loc_100A059  +
push offset dword_10012B4  +
push offset dword_10012AC  +
call _initterm  +
pop ecx  +
pop ecx  +
mov dword_100DD50 2 +
cmp [ebp+var_20] ebx +
jnz loc_100A066  +
push ebx  +
push edi  +
call ds:InterlockedExchange  +
cmp dword_100DD58 ebx +
jz loc_100A087  +
push offset dword_100DD58  +
call sub_100A4F9  +
pop ecx  +
test eax eax +
jz loc_100A087  +
push ebx  +
push 2  +
push ebx  +
call dword_100DD58  +
mov eax ds:_wcmdln +
cmp [eax] ebx +
jz loc_100A159  +
mov eax [eax] +
mov [ebp+var_24] eax +
movzx ecx word ptr [eax] +
cmp cx 20h +
ja $LN58  +
cmp cx bx +
jz loc_100A0AC  +
cmp [ebp+var_1C] ebx +
jnz $LN58  +
movzx ecx word ptr [eax] +
cmp cx bx +
jz loc_100A0C1  +
cmp cx 20h +
ja loc_100A0C1  +
inc eax  +
inc eax  +
mov [ebp+var_24] eax +
jmp loc_100A0AC  +
test byte ptr [ebp+StartupInfo.dwFlags] 1 +
jz loc_100A0CD  +
movzx ecx [ebp+StartupInfo.wShowWindow] +
jmp loc_100A0D0  +
push 0Ah  +
pop ecx  +
push ecx  +
push eax  +
push ebx  +
push 1000000h  +
call _wWinMain@16  +
mov dword_100D98C eax +
cmp dword_100D980 ebx +
jnz $LN59  +
push eax  +
call ds:exit  +
cmp cx 22h +
jnz loc_100A102  +
xor ecx ecx +
cmp [ebp+var_1C] ebx +
setz cl  +
mov [ebp+var_1C] ecx +
inc eax  +
inc eax  +
jmp loc_100A096  +
mov eax [ebp-14h] +
mov ecx [eax] +
mov ecx [ecx] +
mov [ebp-28h] ecx +
push eax  +
push ecx  +
call _XcptFilter  +
pop ecx  +
pop ecx  +
retn   +
mov esp [ebp-18h] +
mov eax [ebp-28h] +
mov dword_100D98C eax +
xor ebx ebx +
cmp dword_100D980 ebx +
jnz $LN59  +
push eax  +
call ds:_exit  +
cmp dword_100D990 ebx +
jnz loc_100A144  +
call ds:_cexit  +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov eax dword_100D98C +
jmp loc_100A165  +
xor eax eax +
inc eax  +
retn   +
mov esp [ebp-18h] +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov eax 0FFh +
call __SEH_epilog4  +
retn   +
***
mov eax 5A4Dh +
cmp ds:1000000h ax +
jz loc_100A182  +
xor eax eax +
jmp loc_100A1CF  +
mov eax ds:100003Ch +
lea eax [eax+1000000h] +
cmp dword ptr [eax] 4550h +
jnz loc_100A17E  +
movzx ecx word ptr [eax+18h] +
cmp ecx 10Bh +
jz loc_100A1BC  +
cmp ecx 20Bh +
jnz loc_100A17E  +
cmp dword ptr [eax+84h] 0Eh +
jbe loc_100A17E  +
xor ecx ecx +
cmp [eax+0F8h] ecx +
jmp loc_100A1CA  +
cmp dword ptr [eax+74h] 0Eh +
jbe loc_100A17E  +
xor ecx ecx +
cmp [eax+0E8h] ecx +
setnz cl  +
mov eax ecx +
push 2  +
mov dword_100D980 eax +
call sub_100A5FF  +
push eax  +
call ds:__set_app_type  +
or dword_100DD48 0FFFFFFFFh +
or dword_100DD4C 0FFFFFFFFh +
pop ecx  +
pop ecx  +
call ds:__p__fmode  +
mov ecx dword_100D9A0 +
mov [eax] ecx +
call ds:__p__commode  +
mov ecx dword_100D99C +
mov [eax] ecx +
call sub_10029FE  +
cmp dword_100D618 0 +
jnz loc_100A228  +
push offset sub_10029FE  +
call ds:__setusermatherr  +
pop ecx  +
call sub_100A581  +
xor eax eax +
retn   +
***
call sub_100A63E  +
jmp ___tmainCRTStartup  +
***
cmp ecx dword_100D608 +
jnz loc_100A25A  +
retn 0  +
jmp loc_100A6D4  +
***
sub ecx eax +
sbb eax eax +
not eax  +
and ecx eax +
mov eax esp +
and eax 0FFFFF000h +
cmp ecx eax +
jb cs20  +
mov eax ecx +
pop ecx  +
xchg eax esp +
mov eax [eax] +
mov [esp+0] eax +
retn   +
sub eax 1000h +
test [eax] eax +
jmp cs10  +
***
mov eax [esp+8+arg_4] +
mov ecx [ebp-1Ch] +
xor ecx ebp +
call sub_100A24F  +
jmp __SEH_epilog4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push offset sub_100A24F  +
push offset dword_100D608  +
call _except_handler4_common  +
add esp 18h +
pop ebp  +
retn   +
***
sub ecx eax +
and ecx 0Fh +
add eax ecx +
sbb ecx ecx +
or eax ecx +
pop ecx  +
jmp __alloca_probe  +
***
push ecx  +
lea ecx [esp+8] +
sub ecx eax +
and ecx 7 +
add eax ecx +
sbb ecx ecx +
or eax ecx +
pop ecx  +
jmp __alloca_probe  +
***
mov eax [esp+8+arg_4] +
mov ecx [ebp-10h] +
mov large fs:0 ecx +
pop ecx  +
pop edi  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
push ecx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call ds:??1type_info@@UAE@XZ  +
test byte ptr [ebp+8] 1 +
jz loc_100A3DD  +
push esi  +
call sub_1002585  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov eax [eax] +
cmp dword ptr [eax] 0E06D7363h +
jnz loc_100A43E  +
cmp dword ptr [eax+10h] 3 +
jnz loc_100A43E  +
mov eax [eax+14h] +
cmp eax 19930520h +
jz loc_100A438  +
cmp eax 19930521h +
jz loc_100A438  +
cmp eax 19930522h +
jz loc_100A438  +
cmp eax 1994000h +
jnz loc_100A43E  +
call ds:?terminate@@YAXXZ  +
xor eax eax +
pop ebp  +
retn 4  +
***
push (offset byte_100A400+1)  +
call ds:SetUnhandledExceptionFilter  +
xor eax eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
mov eax 5A4Dh +
cmp [ecx] ax +
jz loc_100A486  +
xor eax eax +
pop ebp  +
retn   +
mov eax [ecx+3Ch] +
add eax ecx +
cmp dword ptr [eax] 4550h +
jnz loc_100A482  +
xor edx edx +
mov ecx 10Bh +
cmp [eax+18h] cx +
setz dl  +
mov eax edx +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [eax+3Ch] +
add ecx eax +
movzx eax word ptr [ecx+14h] +
push ebx  +
push esi  +
movzx esi word ptr [ecx+6] +
xor edx edx +
push edi  +
lea eax [eax+ecx+18h] +
test esi esi +
jbe loc_100A4ED  +
mov edi [ebp+arg_4] +
mov ecx [eax+0Ch] +
cmp edi ecx +
jb loc_100A4E5  +
mov ebx [eax+8] +
add ebx ecx +
cmp edi ebx +
jb loc_100A4EF  +
inc edx  +
add eax 28h +
cmp edx esi +
jb loc_100A4D5  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
call __SEH_prolog4  +
and [ebp+ms_exc.disabled] 0 +
mov esi 1000000h +
push esi  +
call sub_100A470  +
pop ecx  +
test eax eax +
jz loc_100A556  +
mov eax [ebp+arg_0] +
sub eax esi +
push eax  +
push esi  +
call sub_100A4B0  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_100A556  +
mov eax [eax+24h] +
shr eax 1Fh +
not eax  +
and eax 1 +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
jmp loc_100A55F  +
mov eax [ebp-14h] +
mov eax [eax] +
mov eax [eax] +
xor ecx ecx +
cmp eax 0C0000005h +
setz cl  +
mov eax ecx +
retn   +
mov esp [ebp-18h] +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
xor eax eax +
call __SEH_epilog4  +
retn   +
***
call ds:_controlfp  +
pop ecx  +
pop ecx  +
retn   +
***
call __SEH_prolog4  +
xor eax eax +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_100A5F2  +
cmp ecx 0FFFFFFFFh +
jz loc_100A5F2  +
and [ebp+ms_exc.disabled] eax +
mov edx 5A4Dh +
cmp [ecx] dx +
jnz loc_100A5EB  +
mov edx [ecx+3Ch] +
test edx edx +
jl loc_100A5EB  +
cmp edx 10000000h +
jnb loc_100A5EB  +
lea eax [edx+ecx] +
mov [ebp+var_1C] eax +
cmp dword ptr [eax] 4550h +
jz loc_100A5EB  +
jmp loc_100A5E6  +
xor eax eax +
inc eax  +
retn   +
mov esp [ebp-18h] +
xor eax eax +
mov [ebp+var_1C] eax +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
call __SEH_epilog4  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
call ds:GetModuleHandleA  +
test eax eax +
jz loc_100A634  +
push eax  +
call sub_100A599  +
test eax eax +
jz loc_100A634  +
movzx eax word ptr [eax+5Ch] +
cmp ax 2 +
jnz loc_100A629  +
push 2  +
pop eax  +
pop ebp  +
retn   +
cmp ax 3 +
jnz loc_100A634  +
xor eax eax +
inc eax  +
pop ebp  +
retn   +
mov eax [ebp+arg_0] +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov eax dword_100D608 +
and [ebp+SystemTimeAsFileTime.dwLowDateTime] 0 +
and [ebp+SystemTimeAsFileTime.dwHighDateTime] 0 +
push ebx  +
push edi  +
mov edi 0BB40E64Eh +
mov ebx 0FFFF0000h +
cmp eax edi +
jz loc_100A670  +
test eax ebx +
jz loc_100A670  +
not eax  +
mov dword_100D60C eax +
jmp loc_100A6CB  +
push esi  +
lea eax [ebp+SystemTimeAsFileTime] +
push eax  +
call ds:GetSystemTimeAsFileTime  +
mov esi [ebp+SystemTimeAsFileTime.dwHighDateTime] +
xor esi [ebp+SystemTimeAsFileTime.dwLowDateTime] +
call ds:GetCurrentProcessId  +
xor esi eax +
call ds:GetCurrentThreadId  +
xor esi eax +
call ds:GetTickCount  +
xor esi eax +
lea eax [ebp+PerformanceCount] +
push eax  +
call ds:QueryPerformanceCounter  +
mov eax dword ptr [ebp+PerformanceCount+4] +
xor eax dword ptr [ebp+PerformanceCount] +
xor esi eax +
cmp esi edi +
jz loc_100A6B7  +
test dword_100D608 ebx +
jnz loc_100A6BC  +
mov esi 0BB40E64Fh +
mov dword_100D608 esi +
not esi  +
mov dword_100D60C esi +
pop esi  +
pop edi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 328h +
mov dword_100DAA8 eax +
mov dword_100DAA4 ecx +
mov dword_100DAA0 edx +
mov dword_100DA9C ebx +
mov dword_100DA98 esi +
mov dword_100DA94 edi +
mov word_100DAC0 ss +
mov word_100DAB4 cs +
mov word_100DA90 ds +
mov word_100DA8C es +
mov word_100DA88 fs +
mov word_100DA84 gs +
pushf   +
pop dword_100DAB8  +
mov eax [ebp+0] +
mov dword_100DAAC eax +
mov eax [ebp+4] +
mov dword_100DAB0 eax +
lea eax [ebp+8] +
mov dword_100DABC eax +
mov eax [ebp-320h] +
mov dword_100D9F8 10001h +
mov eax dword_100DAB0 +
mov dword_100D9B4 eax +
mov dword_100D9A8 0C0000409h +
mov dword_100D9AC 1 +
mov eax dword_100D608 +
mov [ebp-328h] eax +
mov eax dword_100D60C +
mov [ebp-324h] eax +
push 0  +
call ds:SetUnhandledExceptionFilter  +
push offset ExceptionInfo  +
call ds:UnhandledExceptionFilter  +
push 0C0000409h  +
call ds:GetCurrentProcess  +
push eax  +
call ds:TerminateProcess  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
cmp word ptr [ecx] 2Dh +
push ebx  +
setz bl  +
test bl bl +
jz loc_100A7DE  +
add ecx 2 +
xor edx edx +
jmp loc_100A7FA  +
cmp ax 30h +
jb loc_100A802  +
cmp ax 39h +
ja loc_100A802  +
imul edx edx +
movzx eax ax +
inc ecx  +
lea edx [edx+eax-30h] +
inc ecx  +
movzx eax word ptr [ecx] +
test ax ax +
jnz loc_100A7E2  +
test bl bl +
pop ebx  +
jz loc_100A809  +
neg edx  +
mov eax edx +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push ebx  +
push esi  +
mov esi ds:MsgWaitForMultipleObjects +
xor ebx ebx +
push edi  +
mov [ebp+var_1] bl +
mov edi 5FFh +
jmp loc_100A865  +
cmp eax 1 +
jnz loc_100A87A  +
jmp loc_100A852  +
cmp [ebp+Msg.message] 12h +
jz loc_100A865  +
lea eax [ebp+Msg] +
push eax  +
call ds:TranslateMessage  +
lea eax [ebp+Msg] +
push eax  +
call ds:DispatchMessageW  +
push 1  +
push ebx  +
push ebx  +
push ebx  +
lea eax [ebp+Msg] +
push eax  +
call ds:PeekMessageW  +
test eax eax +
jnz loc_100A838  +
push edi  +
push [ebp+arg_4]  +
lea eax [ebp+arg_0] +
push ebx  +
push eax  +
push 1  +
call esi  +
cmp eax ebx +
jnz loc_100A831  +
mov [ebp+var_1] 1 +
mov al [ebp+var_1] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov ecx esi +
call sub_1005E26  +
xor edi edi +
push edi  +
push edi  +
lea eax [ebp+hMem] +
push eax  +
push 400h  +
push [ebp+dwMessageId]  +
mov [ebp+hMem] edi +
push edi  +
push 1300h  +
call ds:FormatMessageW  +
cmp [ebp+hMem] edi +
jz loc_100A8D2  +
push [ebp+hMem]  +
mov ecx esi +
call sub_1005711  +
push [ebp+hMem]  +
call ds:LocalFree  +
pop edi  +
mov eax esi +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 228h +
mov eax dword_100D608 +
xor eax ebp +
mov [ebp+var_4] eax +
mov ecx [ebp+arg_0] +
push esi  +
mov esi [ebp+arg_4] +
push esi  +
mov [ebp+var_228] ecx +
call sub_1005D94  +
test esi esi +
jz loc_100A9C7  +
push esi  +
call ds:lstrlenW  +
cmp eax 1 +
jle loc_100A9C7  +
cmp word ptr [esi] 40h +
jnz loc_100A9C7  +
push ebx  +
push esi  +
lea ecx [ebp+var_224] +
call sub_1005D94  +
push [ebp+pszIconFile]  +
call ds:PathParseIconLocationW  +
mov esi eax +
mov ebx offset off_10017C8 +
test esi esi +
jz loc_100A9B5  +
mov eax [ebp+pszIconFile] +
push edi  +
push 2  +
push 0  +
add eax 2 +
push eax  +
call ds:LoadLibraryExW  +
mov edi eax +
test edi edi +
jz loc_100A9B4  +
test esi esi +
jge loc_100A96E  +
neg esi  +
push edi  +
push esi  +
lea ecx [ebp+var_114] +
call sub_1006328  +
lea ecx [ebp+var_114] +
call sub_10046ED  +
test eax eax +
jz loc_100A99C  +
mov ecx [ebp+var_228] +
lea eax [ebp+var_114] +
push eax  +
call sub_1005BBF  +
push edi  +
call ds:FreeLibrary  +
lea ecx [ebp+var_114] +
mov [ebp+var_114] ebx +
call sub_1004813  +
pop edi  +
lea ecx [ebp+var_224] +
mov [ebp+var_224] ebx +
call sub_1004813  +
pop ebx  +
mov ecx [ebp+var_4] +
mov eax [ebp+var_228] +
xor ecx ebp +
pop esi  +
call sub_100A24F  +
leave   +
retn 8  +
***
mov dword ptr [ecx] offset off_10017C8 +
jmp sub_1004813  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push offset dword_1001894  +
mov esi ecx +
call sub_1005D94  +
mov eax [ebp+arg_0] +
mov [esi+110h] eax +
mov byte ptr [esi+114h] 0 +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov ecx [ebp+arg_0] +
call sub_1005DDA  +
mov eax [ebp+arg_0] +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 118h +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov edi [ebp+arg_8] +
xor eax eax +
stos   +
stos   +
stos   +
stos   +
test esi esi +
jz loc_100AAF9  +
mov ecx [ebp+arg_4] +
xor eax eax +
lea edi [ebp+var_4] +
stos   +
cmp [ecx+114h] al +
jz loc_100AA9A  +
and [ebp+var_8] eax +
lea eax [ebp+var_118] +
push eax  +
call sub_100AA1F  +
mov eax [eax+104h] +
lea ecx [ebp+var_118] +
mov [ebp+var_4] eax +
mov [ebp+var_118] offset off_10017C8 +
call sub_1004813  +
jmp loc_100AAAA  +
mov eax [ecx+110h] +
mov [ebp+var_8] 1 +
mov [ebp+var_4] eax +
mov eax [esi] +
and [ebp+arg_0] 0 +
lea ecx [ebp+arg_0] +
push ecx  +
push offset dword_1001AC4  +
push esi  +
call dword ptr [eax]  +
test eax eax +
mov eax [ebp+arg_0] +
jl loc_100AAEF  +
push [ebp+arg_8]  +
mov ecx [eax] +
lea edx [ebp+var_8] +
push edx  +
push 1  +
push eax  +
call dword ptr [ecx+0Ch]  +
test eax eax +
jl loc_100AAEC  +
cmp eax 1 +
jz loc_100AAEC  +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_100AAE8  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov al 1 +
jmp loc_100AAFB  +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_100AAF9  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
xor al al +
pop edi  +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_8] +
sub esp 10h +
push offset dword_1001894  +
call sub_1005711  +
lea eax [ebp+pvar] +
push eax  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_100AA39  +
test al al +
jnz loc_100AB3E  +
lea eax [ebp+pvar] +
push eax  +
call ds:PropVariantClear  +
xor al al +
leave   +
retn 0Ch  +
push ebx  +
push 1Fh  +
pop eax  +
cmp ax word ptr [ebp+pvar] +
jz loc_100AB62  +
push 8  +
pop eax  +
cmp ax word ptr [ebp+pvar] +
jz loc_100AB62  +
xor bl bl +
lea eax [ebp+pvar] +
push eax  +
call ds:PropVariantClear  +
mov al bl +
pop ebx  +
jmp locret_100AB3A  +
push dword ptr [ebp-8]  +
mov ecx [ebp+arg_8] +
call sub_1005711  +
mov bl 1 +
jmp loc_100AB53  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 804h +
mov eax dword_100D608 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
mov esi [ebp+arg_0] +
xor eax eax +
push 7FEh  +
push eax  +
mov [ebp+var_804] ax +
lea eax [ebp-802h] +
push eax  +
call memset  +
add esp 0Ch +
lea eax [ebp+arg_8] +
push eax  +
push [ebp+arg_4]  +
lea eax [ebp+var_804] +
push 400h  +
push eax  +
call sub_100953B  +
lea eax [ebp+var_804] +
push eax  +
mov ecx esi +
call sub_10056A8  +
mov ecx [ebp+var_4] +
mov eax esi +
xor ecx ebp +
pop esi  +
call sub_100A24F  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 240h +
mov eax dword_100D608 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push ebx  +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
push eax  +
lea ecx [ebp+var_240] +
call sub_1005D94  +
push eax  +
lea ecx [ebp+var_114] +
call sub_1005DDA  +
mov edi offset off_10017C8 +
lea ecx [ebp+var_240] +
mov [ebp+var_240] edi +
call sub_1004813  +
lea eax [ebp+ppv] +
push eax  +
push offset stru_1001AB4  +
push 4  +
xor ebx ebx +
push ebx  +
push offset stru_1001B30  +
mov [ebp+ppv] ebx +
call ds:CoCreateInstance  +
cmp eax ebx +
mov [ebp+var_11C] eax +
jl loc_100AD12  +
push esi  +
push offset aD  +
lea ecx [ebp+var_240] +
call sub_1005E26  +
push eax  +
call sub_100AB76  +
add esp 0Ch +
push eax  +
lea ecx [ebp+var_124] +
call sub_10068F2  +
lea ecx [ebp+var_240] +
mov [ebp+var_240] edi +
call sub_1004813  +
push ebx  +
push [ebp+ppv]  +
call ds:CoAllowSetForegroundWindow  +
mov esi [ebp+ppv] +
lea eax [ebp+var_114] +
push eax  +
lea ecx [ebp+var_130] +
mov [ebp+var_128] ebx +
call sub_10068F2  +
mov eax [eax+4] +
mov ecx [esi] +
push ebx  +
lea edx [ebp+var_128] +
push edx  +
push ebx  +
push ebx  +
push ebx  +
push eax  +
push [ebp+var_120]  +
push offset dword_1001A14  +
push esi  +
call dword ptr [ecx+0Ch]  +
mov esi offset off_1001624 +
lea ecx [ebp+var_130] +
mov [ebp+var_11C] eax +
mov [ebp+var_130] esi +
call sub_1003438  +
lea ecx [ebp+var_124] +
mov [ebp+var_124] esi +
call sub_1003438  +
mov eax [ebp+ppv] +
cmp eax ebx +
jz loc_100AD22  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
lea ecx [ebp+var_114] +
mov [ebp+var_114] edi +
call sub_1004813  +
mov ecx [ebp+var_4] +
mov eax [ebp+var_11C] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100A24F  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 28h +
push edi  +
xor eax eax +
push 9  +
pop ecx  +
lea edi [ebp+var_28.hwndOwner] +
stos   +
mov eax [ebp+arg_0] +
mov ecx [ebp+arg_8] +
mov [ebp+var_28.hwndOwner] eax +
mov eax [ebp+arg_4] +
mov [ebp+var_28.hInstance] eax +
mov eax [ebp+arg_10] +
mov [ebp+var_28.lpszText] eax +
mov eax [ebp+arg_C] +
mov [ebp+var_28.lpszCaption] eax +
mov eax [ebp+arg_14] +
xor edx edx +
mov [ebp+var_28.cbSize] 28h +
mov [ebp+var_28.dwStyle] eax +
pop edi  +
cmp ecx edx +
jz loc_100AD9E  +
or eax 80h +
mov [ebp+var_28.dwStyle] eax +
mov [ebp+var_28.lpszIcon] ecx +
jmp loc_100ADA1  +
mov [ebp+var_28.lpszIcon] edx +
lea eax [ebp+var_28] +
push eax  +
mov [ebp+var_28.dwContextHelpId] edx +
mov [ebp+var_28.lpfnMsgBoxCallback] edx +
mov [ebp+var_28.dwLanguageId] 400h +
call sub_100B114  +
leave   +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
push edi  +
xor edi edi +
cmp [ebp+lpMultiByteStr] edi +
jz loc_100AE26  +
cmp [ebp+cchMultiByte] edi +
jz loc_100AE26  +
mov esi ds:MultiByteToWideChar +
push edi  +
push edi  +
push [ebp+cchMultiByte]  +
mov [ebp+var_4] edi +
push [ebp+lpMultiByteStr]  +
push edi  +
push edi  +
call esi  +
cmp [ebp+cchMultiByte] 0FFFFFFFFh +
mov ebx eax +
jnz loc_100ADF6  +
lea eax [ebx-1] +
push eax  +
push edi  +
call ds:SysAllocStringLen  +
mov [ebp+var_8] eax +
cmp eax edi +
jz loc_100AE2F  +
push ebx  +
push eax  +
push [ebp+cchMultiByte]  +
push [ebp+lpMultiByteStr]  +
push edi  +
push edi  +
call esi  +
cmp eax ebx +
jz loc_100AE2F  +
push [ebp+var_8]  +
call ds:SysFreeString  +
lea ecx [ebp+var_4] +
call sub_100348A  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
lea ecx [ebp+var_4] +
call sub_100348A  +
mov eax [ebp+var_8] +
jmp loc_100AE28  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push 0FFFFFFFFh  +
push [ebp+lpMultiByteStr]  +
mov esi ecx +
call sub_100ADC0  +
mov [esi] eax +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push edi  +
push 0  +
call ds:CoInitialize  +
and [ebp+ppv] 0 +
mov edi eax +
lea eax [ebp+ppv] +
push eax  +
push offset stru_1001B84  +
push 1  +
push 0  +
push offset stru_1001BE0  +
call ds:CoCreateInstance  +
test eax eax +
jl loc_100AEBD  +
push offset MultiByteStr  +
lea ecx [ebp+var_8] +
call sub_100AE41  +
mov ecx [ebp+ppv] +
push dword ptr [eax]  +
mov edx [ecx] +
push ecx  +
call dword ptr [edx+0Ch]  +
push [ebp+var_8]  +
call ds:SysFreeString  +
mov eax [ebp+ppv] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
test edi edi +
pop edi  +
jl loc_100AEC8  +
call ds:CoUninitialize  +
xor eax eax +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:ReleaseActCtx  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
and dword ptr [eax] 0 +
push eax  +
push [ebp+arg_0]  +
call ds:ActivateActCtx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_0]  +
push 0  +
call ds:DeactivateActCtx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
jz loc_100AF2A  +
pop ebp  +
jmp loc_100AF00  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 22Ch +
mov eax dword_100D608 +
xor eax ebp +
mov [ebp+var_4] eax +
cmp dword_100D648 0FFFFFFFFh +
push esi  +
mov esi [ebp+arg_0] +
jnz loc_100AFF1  +
and [ebp+var_22C] 0 +
push edi  +
push 7  +
pop ecx  +
xor eax eax +
lea edi [ebp+var_228] +
stos   +
pop edi  +
test esi esi +
jnz loc_100AF7C  +
push eax  +
call ds:GetModuleHandleW  +
mov esi eax +
push 104h  +
lea eax [ebp+Filename] +
push eax  +
push esi  +
call ds:GetModuleFileNameW  +
lea eax [ebp+Filename] +
mov [ebp+var_224] eax +
movzx eax [ebp+arg_4] +
mov [ebp+var_218] eax +
lea eax [ebp+var_22C] +
push eax  +
mov [ebp+var_22C] 20h +
mov [ebp+var_228] 88h +
mov [ebp+var_210] esi +
call ds:CreateActCtxW  +
mov esi eax +
cmp esi 0FFFFFFFFh +
jz loc_100AFF1  +
push 0FFFFFFFFh  +
push esi  +
push offset dword_100D648  +
call ds:InterlockedCompareExchange  +
cmp eax 0FFFFFFFFh +
jz loc_100AFEC  +
push esi  +
call sub_100AED1  +
call sub_100B150  +
mov ecx [ebp+var_4] +
xor eax eax +
cmp dword_100D648 0FFFFFFFFh +
pop esi  +
setnz al  +
xor ecx ebp +
call sub_100A24F  +
leave   +
retn 8  +
***
mov eax dword_100D648 +
cmp eax 0FFFFFFFFh +
jz loc_100B028  +
push eax  +
call sub_100AED1  +
or dword_100D648 0FFFFFFFFh +
cmp dword_100DCCC 0 +
jz locret_100B038  +
or dword_100DCCC 0FFFFFFFFh +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
and dword ptr [esi] 0 +
cmp dword_100D648 0FFFFFFFFh +
jnz loc_100B07A  +
mov eax dword_100DCCC +
test eax eax +
jz loc_100B088  +
cmp eax 0FFFFFFFFh +
jnz loc_100B065  +
xor eax eax +
jmp loc_100B08B  +
push dword_100DCC8  +
push eax  +
call sub_100AF33  +
cmp dword_100D648 0FFFFFFFFh +
jz loc_100B088  +
push esi  +
push dword_100D648  +
call sub_100AEE2  +
jmp loc_100B08B  +
xor eax eax +
inc eax  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
lea eax [ebp+var_4] +
push eax  +
call sub_100B03E  +
test eax eax +
jz locret_100B0C3  +
push esi  +
push [ebp+lpLibFileName]  +
call ds:LoadLibraryW  +
push [ebp+var_4]  +
mov esi eax +
call sub_100AF19  +
mov eax esi +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
lea eax [ebp+var_4] +
push eax  +
call sub_100B03E  +
test eax eax +
jz locret_100B10B  +
push esi  +
call sub_100B150  +
push [ebp+dwInitParam]  +
push [ebp+lpDialogFunc]  +
push [ebp+hWndParent]  +
push [ebp+lpTemplateName]  +
push [ebp+hInstance]  +
call ds:DialogBoxParamW  +
push [ebp+var_4]  +
mov esi eax +
call sub_100AF19  +
mov eax esi +
pop esi  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
lea eax [ebp+var_4] +
push eax  +
call sub_100B03E  +
test eax eax +
jz locret_100B147  +
push esi  +
call sub_100B150  +
push [ebp+arg_0]  +
call ds:MessageBoxIndirectW  +
push [ebp+var_4]  +
mov esi eax +
call sub_100AF19  +
mov eax esi +
pop esi  +
leave   +
retn 4  +
***
mov eax dword_100DCE8 +
test eax eax +
jnz loc_100B180  +
push esi  +
mov esi offset aComctl32_dll +
push esi  +
call sub_100B095  +
mov dword_100DCE8 eax +
test eax eax +
jnz loc_100B17F  +
call sub_100B011  +
push esi  +
call ds:LoadLibraryW  +
mov dword_100DCE8 eax +
pop esi  +
xor ecx ecx +
test eax eax +
setnz cl  +
mov eax ecx +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword_100DCE8 0 +
jnz loc_100B1AB  +
call sub_100B150  +
cmp dword_100DCE8 0 +
jz loc_100B1C1  +
push [ebp+lpProcName]  +
push dword_100DCE8  +
call ds:GetProcAddress  +
mov ecx [ebp+arg_0] +
mov [ecx] eax +
jmp loc_100B1C7  +
mov eax [ebp+arg_0] +
and dword ptr [eax] 0 +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword_100D654 0FFFFFFFFh +
jnz loc_100B1ED  +
push offset aInitcommoncont  +
push offset dword_100D654  +
call sub_100B18F  +
mov eax dword_100D654 +
test eax eax +
jz loc_100B1F9  +
pop ebp  +
jmp eax  +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword_100D65C 0FFFFFFFFh +
jnz loc_100B221  +
push offset aImagelist_crea  +
push offset dword_100D65C  +
call sub_100B18F  +
mov eax dword_100D65C +
test eax eax +
jz loc_100B22D  +
pop ebp  +
jmp eax  +
xor eax eax +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword_100D660 0FFFFFFFFh +
jnz loc_100B255  +
push offset aImagelist_dest  +
push offset dword_100D660  +
call sub_100B18F  +
mov eax dword_100D660 +
test eax eax +
jz loc_100B261  +
pop ebp  +
jmp eax  +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword_100D674 0FFFFFFFFh +
jnz loc_100B289  +
push offset aImagelist_repl  +
push offset dword_100D674  +
call sub_100B18F  +
mov eax dword_100D674 +
test eax eax +
jz loc_100B295  +
pop ebp  +
jmp eax  +
or eax 0FFFFFFFFh +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword_100D6D4 0FFFFFFFFh +
jnz loc_100B2BE  +
push offset aImagelist_geti  +
push offset dword_100D6D4  +
call sub_100B18F  +
mov eax dword_100D6D4 +
test eax eax +
jz loc_100B2CA  +
pop ebp  +
jmp eax  +
xor eax eax +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword_100D714 0FFFFFFFFh +
jnz loc_100B2F2  +
push offset aTaskdialogindi  +
push offset dword_100D714  +
call sub_100B18F  +
mov eax dword_100D714 +
test eax eax +
jz loc_100B2FE  +
pop ebp  +
jmp eax  +
mov eax 80004005h +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword_100D718 0FFFFFFFFh +
jnz loc_100B329  +
push offset aTaskdialog  +
push offset dword_100D718  +
call sub_100B18F  +
mov eax dword_100D718 +
test eax eax +
jz loc_100B335  +
pop ebp  +
jmp eax  +
mov eax 80004005h +
pop ebp  +
retn 20h  +
***
movs   +
retn 0  +
***
retf   +
***
push 65676E61h  +
add [edx+656C5304h] dh +
jo $+3  +
jmp near ptr 756F09D7h  +
***
