mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
inc dword ptr [eax+4]  +
mov eax [eax+4] +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+8] +
dec dword ptr [ecx+4]  +
mov eax [ecx+4] +
jnz loc_1002095  +
push ecx  +
call sub_100E22D  +
pop ecx  +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
mov eax dword_1010060 +
xor eax ebp +
mov [ebp-4] eax +
mov ecx [ebp+28h] +
and dword ptr [ecx] 0 +
mov eax [ebp+8] +
push ebx  +
mov ebx [ebp+24h] +
push esi  +
push edi  +
lea esi [ebp+14h] +
lea edi [ebp-14h] +
movs   +
movs   +
movs   +
mov [ebp-18h] ecx +
xor ecx ecx +
movs   +
mov [ebx] cx +
push 4  +
pop ecx  +
mov edi offset dword_10013BC +
lea esi [ebp-14h] +
xor edx edx +
cmps   +
jnz loc_100210D  +
push 0FFFFFFEBh  +
push dword ptr [eax+8]  +
call ds:GetWindowLongW  +
mov ecx eax +
call sub_1005238  +
push eax  +
call ds:SysAllocString  +
mov [ebx+8] eax +
push 8  +
pop eax  +
mov [ebx] ax +
mov eax [ebp-18h] +
mov dword ptr [eax] 1 +
mov ecx [ebp-4] +
pop edi  +
pop esi  +
xor ecx ebp +
xor eax eax +
pop ebx  +
call sub_100E5C6  +
leave   +
retn 24h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax ecx +
mov ecx [ebp+arg_0] +
and dword ptr [eax+4] 0 +
mov dword ptr [eax] offset off_1001450 +
mov [eax+8] ecx +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+0Ch] +
push edi  +
push 4  +
pop ecx  +
mov edi offset dword_1001FC0 +
xor eax eax +
cmps   +
jz loc_100216E  +
mov esi [ebp+0Ch] +
push 4  +
pop ecx  +
mov edi offset dword_100138C +
xor eax eax +
cmps   +
jnz loc_1002180  +
mov eax [ebp+8] +
mov ecx [ebp+10h] +
mov [ecx] eax +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
xor eax eax +
jmp loc_100218B  +
mov eax [ebp+10h] +
and dword ptr [eax] 0 +
mov eax 80004002h +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
mov eax dword_1010060 +
xor eax ebp +
mov [ebp-4] eax +
mov ecx [ebp+28h] +
and dword ptr [ecx] 0 +
mov eax [ebp+8] +
push ebx  +
mov ebx [ebp+24h] +
push esi  +
push edi  +
lea esi [ebp+14h] +
lea edi [ebp-14h] +
movs   +
movs   +
movs   +
mov [ebp-18h] ecx +
xor ecx ecx +
movs   +
mov [ebx] cx +
push 4  +
pop ecx  +
mov edi offset dword_10013BC +
lea esi [ebp-14h] +
xor edx edx +
cmps   +
jz loc_10021EB  +
push 4  +
pop ecx  +
mov edi offset dword_10013EC +
lea esi [ebp-14h] +
xor edx edx +
cmps   +
jnz loc_100223F  +
push 0FFFFFFEBh  +
push dword ptr [eax+8]  +
call ds:GetWindowLongW  +
push 4  +
pop ecx  +
mov edi offset dword_10013BC +
lea esi [ebp-14h] +
xor edx edx +
cmps   +
jnz loc_100221C  +
mov ecx eax +
call sub_1005238  +
push eax  +
call ds:SysAllocString  +
mov [ebx+8] eax +
push 8  +
jmp loc_1002232  +
mov dword ptr [ebx+8] 100000h +
cmp byte ptr [eax+2Ch] 0 +
jz loc_1002230  +
mov dword ptr [ebx+8] 100014h +
push 3  +
pop eax  +
mov [ebx] ax +
mov eax [ebp-18h] +
mov dword ptr [eax] 1 +
mov ecx [ebp-4] +
pop edi  +
pop esi  +
xor ecx ebp +
xor eax eax +
pop ebx  +
call sub_100E5C6  +
leave   +
retn 24h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax ecx +
mov ecx [ebp+arg_0] +
and dword ptr [eax+4] 0 +
mov dword ptr [eax] offset off_1001460 +
mov [eax+8] ecx +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 64h +
mov eax dword_1010060 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
mov esi [ebp+arg_4] +
mov [ebp+var_64] esi +
test ebx ebx +
jz loc_10022BF  +
push edi  +
lea eax [ebp+var_60] +
push eax  +
push 5Ch  +
push ebx  +
call ds:GetObjectW  +
push 17h  +
pop ecx  +
lea edi [ebp+var_60] +
xor eax eax +
cmps   +
pop edi  +
jz loc_10022C8  +
push ebx  +
call ds:DeleteObject  +
push [ebp+var_64]  +
jmp loc_10022C0  +
push esi  +
call ds:CreateFontIndirectW  +
mov ebx eax +
mov ecx [ebp+var_4] +
pop esi  +
mov eax ebx +
xor ecx ebp +
pop ebx  +
call sub_100E5C6  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 6Ch +
mov eax dword_1010060 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
xor ebx ebx +
push edi  +
mov esi ecx +
mov [ebp+var_68] ebx +
mov [ebp+var_64] ebx +
call ds:IsThemeActive  +
mov edi ds:GetThemeSysColor +
test eax eax +
jz loc_10023BA  +
push offset aTaskdialog  +
push ebx  +
call ds:OpenThemeData  +
lea ecx [ebp+var_60] +
push ecx  +
push 0D2h  +
push ebx  +
push 2  +
push ebx  +
push eax  +
mov [ebp+var_68] eax +
call ds:GetThemeFont  +
test eax eax +
jl loc_1002357  +
mov eax [ebp+var_60] +
imul eax eax +
push 64h  +
cdq   +
pop ecx  +
idiv  ecx +
mov [ebp+var_60] eax +
lea eax [ebp+var_60] +
push eax  +
push dword ptr [esi+8]  +
call sub_1002277  +
mov [esi+8] eax +
lea eax [ebp+var_60] +
push eax  +
push 0D2h  +
push ebx  +
push 4  +
push ebx  +
push [ebp+var_68]  +
call ds:GetThemeFont  +
test eax eax +
jl loc_100238F  +
mov eax [ebp+var_60] +
imul eax eax +
push 0Ah  +
cdq   +
pop ecx  +
idiv  ecx +
mov [ebp+var_60] eax +
lea eax [ebp+var_60] +
push eax  +
push dword ptr [esi+4]  +
call sub_1002277  +
mov [esi+4] eax +
push offset aControlpanelst  +
push ebx  +
call ds:OpenThemeData  +
lea ecx [ebp+var_6C] +
push ecx  +
push 0EDBh  +
push ebx  +
push 5  +
push eax  +
mov [ebp+var_64] eax +
call ds:GetThemeColor  +
test eax eax +
jl loc_100240F  +
mov eax [ebp+var_6C] +
jmp loc_1002414  +
lea eax [ebp+var_60] +
push eax  +
push 323h  +
push ebx  +
call ds:GetThemeSysFont  +
test eax eax +
jl loc_10023EC  +
mov eax [ebp+var_60] +
shl eax 2 +
push 3  +
cdq   +
pop ecx  +
idiv  ecx +
mov [ebp+var_60] eax +
lea eax [ebp+var_60] +
push eax  +
push dword ptr [esi+8]  +
call sub_1002277  +
mov [esi+8] eax +
lea eax [ebp+var_60] +
push eax  +
push 323h  +
push ebx  +
call ds:GetThemeSysFont  +
test eax eax +
jl loc_100240F  +
lea eax [ebp+var_60] +
push eax  +
push dword ptr [esi+4]  +
call sub_1002277  +
mov [esi+4] eax +
push 8  +
push ebx  +
call edi  +
push 8  +
push [ebp+var_64]  +
mov [esi+1Ch] eax +
call edi  +
push 5  +
push [ebp+var_64]  +
mov [esi+10h] eax +
call edi  +
push 0Dh  +
push [ebp+var_64]  +
mov [esi+14h] eax +
call edi  +
mov edi ds:CloseThemeData +
mov [esi+18h] eax +
cmp [ebp+var_68] ebx +
jz loc_1002445  +
push [ebp+var_68]  +
call edi  +
cmp [ebp+var_64] ebx +
jz loc_100244F  +
push [ebp+var_64]  +
call edi  +
mov edi ds:CreateFontIndirectW +
cmp [esi+8] ebx +
jnz loc_1002486  +
lea eax [ebp+var_60] +
push eax  +
push 323h  +
push ebx  +
call ds:GetThemeSysFont  +
test eax eax +
jl loc_1002486  +
mov eax [ebp+var_60] +
shl eax 2 +
push 3  +
cdq   +
pop ecx  +
idiv  ecx +
mov [ebp+var_60] eax +
lea eax [ebp+var_60] +
push eax  +
call edi  +
mov [esi+8] eax +
cmp [esi+4] ebx +
jnz loc_10024A8  +
lea eax [ebp+var_60] +
push eax  +
push 323h  +
push ebx  +
call ds:GetThemeSysFont  +
test eax eax +
jl loc_10024A8  +
lea eax [ebp+var_60] +
push eax  +
call edi  +
mov [esi+4] eax +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
mov al 1 +
pop ebx  +
call sub_100E5C6  +
leave   +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi+4] +
push edi  +
mov edi ds:DeleteObject +
test eax eax +
jz loc_10024D8  +
push eax  +
call edi  +
and dword ptr [esi+4] 0 +
mov eax [esi+8] +
test eax eax +
jz loc_10024E6  +
push eax  +
call edi  +
and dword ptr [esi+8] 0 +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push ebx  +
push 1000h  +
mov ebx ecx +
call ds:GetSystemMetrics  +
test eax eax +
jz loc_1002566  +
lea eax [ebp+hKey] +
push eax  +
push 20019h  +
push 0  +
push offset SubKey  +
push 80000002h  +
call ds:RegOpenKeyExW  +
test eax eax +
jnz loc_1002566  +
lea eax [ebp+cbData] +
push eax  +
lea eax [ebp+Data] +
push eax  +
lea eax [ebp+Type] +
push eax  +
push 0  +
push offset ValueName  +
push [ebp+hKey]  +
mov [ebp+cbData] 4 +
call ds:RegQueryValueExW  +
test eax eax +
jnz loc_100255D  +
cmp [ebp+Type] 4 +
jnz loc_100255D  +
cmp dword ptr [ebp+Data] eax +
jz loc_100255D  +
mov byte ptr [ebx+28h] 1 +
push [ebp+hKey]  +
call ds:RegCloseKey  +
pop ebx  +
leave   +
retn   +
***
mov eax ecx +
xor ecx ecx +
xor edx edx +
mov [eax] cl +
mov [eax+10h] ecx +
mov [eax+18h] ecx +
mov [eax+14h] ecx +
mov [eax+1Ch] ecx +
mov [eax+20h] ecx +
mov [eax+24h] dx +
mov [eax+26h] dx +
mov [eax+8] ecx +
mov [eax+0Ch] ecx +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
imul eax [ebp+arg_8] +
push esi  +
mov esi [ebp+arg_0] +
add esi eax +
jmp loc_10025B5  +
sub esi [ebp+arg_4] +
mov ecx esi +
call [ebp+arg_C]  +
dec [ebp+arg_8]  +
jns loc_10025AD  +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
dec [ebp+arg_8]  +
js loc_10025E0  +
push esi  +
mov esi [ebp+arg_0] +
mov ecx esi +
call [ebp+arg_C]  +
add esi [ebp+arg_4] +
dec [ebp+arg_8]  +
jns loc_10025D2  +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ecx+18h] +
test ecx ecx +
jnz loc_10025FB  +
xor al al +
pop ebp  +
retn 4  +
pop ebp  +
jmp sub_100939E  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
lea eax [ebp+var_4] +
push eax  +
call sub_10025E9  +
test al al +
jz locret_1002628  +
mov edx [ebp+arg_0] +
xor eax eax +
inc eax  +
cmp word ptr [ebp+var_4] ax +
setnbe cl  +
mov [edx] cl +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
mov ecx [esi+18h] +
lea eax [ebp+var_4] +
push eax  +
call sub_100939E  +
test al al +
jnz loc_100264E  +
xor eax eax +
jmp loc_1002661  +
mov ax [ebp+arg_0] +
cmp ax word ptr [ebp+var_4] +
jnb loc_100264A  +
mov ecx [esi+20h] +
movzx eax ax +
mov eax [ecx+eax*4] +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
mov ecx [esi+18h] +
lea eax [ebp+var_4] +
push eax  +
call sub_100939E  +
test al al +
jz loc_100269F  +
movzx eax word ptr [esi+24h] +
movzx edx word ptr [ebp+var_4] +
movzx ecx ax +
inc ecx  +
cmp ecx edx +
jl loc_1002698  +
xor eax eax +
jmp loc_1002699  +
inc eax  +
mov [esi+24h] ax +
mov al 1 +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
mov ecx [esi+18h] +
lea eax [ebp+var_4] +
push eax  +
call sub_100939E  +
test al al +
jz loc_10026DD  +
movzx eax word ptr [esi+24h] +
movzx edx word ptr [ebp+var_4] +
movzx ecx ax +
inc ecx  +
cmp ecx edx +
mov ecx [ebp+arg_0] +
jl loc_10026D7  +
xor eax eax +
jmp loc_10026D8  +
inc eax  +
mov [ecx] ax +
mov al 1 +
pop esi  +
leave   +
retn 4  +
***
test byte ptr [ecx+28h] 2 +
jz loc_10026F8  +
mov eax [ecx+8] +
cmp eax [ecx+0Ch] +
jnz loc_10026F8  +
xor eax eax +
retn   +
xor eax eax +
inc eax  +
retn   +
***
test byte ptr [ecx+28h] 4 +
jz loc_1002712  +
mov eax [ecx+10h] +
cmp eax [ecx+14h] +
jnz loc_1002712  +
xor eax eax +
retn   +
xor eax eax +
inc eax  +
retn   +
***
test byte ptr [ecx+28h] 8 +
jz loc_100272C  +
mov eax [ecx+18h] +
cmp eax [ecx+1Ch] +
jnz loc_100272C  +
xor eax eax +
retn   +
xor eax eax +
inc eax  +
retn   +
***
test byte ptr [ecx+28h] 10h +
jz loc_1002746  +
mov eax [ecx+20h] +
cmp eax [ecx+24h] +
jnz loc_1002746  +
xor eax eax +
retn   +
xor eax eax +
inc eax  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
test byte ptr [esi+28h] 1 +
jz loc_100278F  +
mov eax [esi] +
cmp eax [esi+4] +
jnz loc_100278F  +
call sub_10026E7  +
test al al +
jnz loc_100278F  +
mov ecx esi +
call sub_1002735  +
test al al +
jnz loc_100278F  +
mov ecx esi +
call sub_100271B  +
test al al +
jnz loc_100278F  +
mov ecx esi +
call sub_1002701  +
test al al +
jnz loc_100278F  +
xor eax eax +
pop esi  +
retn   +
xor eax eax +
inc eax  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push 0  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call ds:EventWrite  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
test [ebp+arg_0] 2 +
push edi  +
mov edi ecx +
jz loc_10027F0  +
push esi  +
push offset nullsub_1  +
lea esi [edi-4] +
push dword ptr [esi]  +
push 12Ch  +
push edi  +
call sub_1002599  +
test [ebp+arg_0] 1 +
jz loc_10027EB  +
push esi  +
call sub_100E22D  +
pop ecx  +
mov eax esi +
pop esi  +
jmp loc_1002804  +
call nullsub_1  +
test [ebp+arg_0] 1 +
jz loc_1002802  +
push edi  +
call sub_100E22D  +
pop ecx  +
mov eax edi +
pop edi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 30h +
push edi  +
lea eax [ebp+Rect] +
push eax  +
push hWnd  +
mov edi ecx +
mov [ebp+var_1] 0 +
call ds:GetWindowRect  +
mov eax [ebp+Rect.left] +
mov ecx [edi+18h] +
mov [ebp+pt.x] eax +
mov eax [ebp+Rect.top] +
mov [ebp+pt.y] eax +
lea eax [ebp+var_8] +
push eax  +
call sub_100939E  +
test al al +
jz loc_10028C8  +
push ebx  +
xor eax eax +
xor ebx ebx +
push esi  +
cmp ax word ptr [ebp+var_8] +
jnb loc_10028C4  +
cmp [ebp+var_1] 0 +
jnz loc_10028C4  +
push ebx  +
mov ecx edi +
call sub_1002631  +
test eax eax +
jz loc_10028CB  +
mov eax [eax] +
test eax eax +
jz loc_10028CB  +
mov ecx [eax+420h] +
movzx esi word ptr [eax+210h] +
mov edx [eax+424h] +
movzx eax word ptr [eax+212h] +
push [ebp+pt.y]  +
movzx eax ax +
push [ebp+pt.x]  +
add eax edx +
movzx esi si +
mov [ebp+rc.bottom] eax +
lea eax [ebp+rc] +
add esi ecx +
push eax  +
mov [ebp+rc.left] ecx +
mov [ebp+rc.top] edx +
mov [ebp+rc.right] esi +
call ds:PtInRect  +
cmp eax 1 +
jnz loc_10028BD  +
mov [edi+26h] bx +
mov [edi+24h] bx +
mov [ebp+var_1] al +
inc ebx  +
cmp bx word ptr [ebp+var_8] +
jb loc_1002855  +
mov al 1 +
pop esi  +
pop ebx  +
pop edi  +
leave   +
retn   +
xor al al +
jmp loc_10028C6  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 28h +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
lea eax [ebp+Rect] +
push eax  +
mov byte ptr [esi] 1 +
push hWnd  +
mov edi ecx +
call ds:GetWindowRect  +
mov eax [ebp+Rect.top] +
mov ebx [ebp+Rect.left] +
mov [ebp+var_4] eax +
movzx eax word ptr [edi+24h] +
push eax  +
mov ecx edi +
call sub_1002631  +
test eax eax +
jnz loc_1002914  +
xor al al +
jmp loc_1002963  +
mov eax [eax] +
test eax eax +
jz loc_1002910  +
mov ecx [eax+420h] +
movzx edi word ptr [eax+210h] +
mov edx [eax+424h] +
movzx eax word ptr [eax+212h] +
push [ebp+var_4]  +
movzx eax ax +
add eax edx +
movzx edi di +
mov [ebp+rc.bottom] eax +
push ebx  +
lea eax [ebp+rc] +
add edi ecx +
push eax  +
mov [ebp+rc.left] ecx +
mov [ebp+rc.top] edx +
mov [ebp+rc.right] edi +
call ds:PtInRect  +
dec eax  +
neg eax  +
sbb al al +
inc al  +
mov [esi] al +
mov al 1 +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push esi  +
lea eax [ebp+Rect] +
push eax  +
push hWnd  +
mov esi ecx +
call ds:GetWindowRect  +
movzx eax word ptr [esi+24h] +
push eax  +
mov ecx esi +
call sub_1002631  +
test eax eax +
jnz loc_100299E  +
xor al al +
jmp loc_10029F2  +
mov ecx [eax] +
test ecx ecx +
jz loc_100299A  +
movzx eax word ptr [ecx+212h] +
sub eax [ebp+Rect.bottom] +
mov esi [ecx+420h] +
add eax [ebp+Rect.top] +
push edi  +
mov edi [ecx+424h] +
cdq   +
sub eax edx +
push 45h  +
sar eax 1 +
add eax edi +
push 0  +
push 0  +
push eax  +
movzx eax word ptr [ecx+210h] +
sub eax [ebp+Rect.right] +
add eax [ebp+Rect.left] +
cdq   +
sub eax edx +
sar eax 1 +
add eax esi +
push eax  +
push 0  +
push hWnd  +
call ds:SetWindowPos  +
mov al 1 +
pop edi  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push edi  +
lea eax [ebp+var_8] +
push eax  +
mov edi ecx +
mov [ebp+var_1] 0 +
call sub_10025E9  +
test al al +
jz loc_1002A69  +
cmp byte ptr [edi] 0 +
push ebx  +
push esi  +
jz loc_1002A64  +
xor eax eax +
xor ebx ebx +
cmp ax word ptr [ebp+var_8] +
jnb loc_1002A64  +
cmp [ebp+var_1] 0 +
jnz loc_1002A64  +
push ebx  +
mov ecx edi +
call sub_1002631  +
test eax eax +
jz loc_1002A6C  +
cmp byte ptr [eax+0Ch] 0 +
jz loc_1002A5D  +
mov esi [eax+8] +
mov ecx esi +
call sub_10026E7  +
test al al +
jnz loc_1002A59  +
test byte ptr [esi+28h] 1 +
jz loc_1002A59  +
mov eax [esi] +
cmp eax [esi+4] +
jz loc_1002A5D  +
mov [ebp+var_1] 1 +
inc ebx  +
cmp bx word ptr [ebp+var_8] +
jb loc_1002A26  +
mov al [ebp+var_1] +
pop esi  +
pop ebx  +
pop edi  +
leave   +
retn   +
xor al al +
jmp loc_1002A67  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 8Ch +
push ebx  +
push esi  +
xor ebx ebx +
lea eax [ebp+var_C] +
mov esi ecx +
inc ebx  +
push eax  +
mov [ebp+var_18] esi +
mov byte ptr [ebp-1] 0 +
mov [ebp+var_2] bl +
mov [ebp+var_3] 0 +
call sub_10025E9  +
test al al +
jz loc_1002B74  +
cmp byte ptr [esi] 0 +
push edi  +
jz loc_1002AF7  +
xor eax eax +
xor edi edi +
cmp ax word ptr [ebp+var_C] +
jnb loc_1002AF7  +
cmp byte ptr [ebp-1] 0 +
jnz loc_1002AF7  +
mov ecx [ebp+var_18] +
push edi  +
call sub_1002631  +
test eax eax +
jz loc_1002B71  +
cmp byte ptr [eax+0Ch] 0 +
jz loc_1002AF0  +
mov esi [eax+8] +
mov ecx esi +
call sub_10026E7  +
test al al +
jnz loc_1002AED  +
test [esi+28h] bl +
jz loc_1002AED  +
mov eax [esi] +
cmp eax [esi+4] +
jz loc_1002AF0  +
mov [ebp-1] bl +
inc edi  +
cmp di word ptr [ebp+var_C] +
jb loc_1002AB6  +
and [ebp+var_1C] 0 +
cmp byte ptr [ebp-1] 0 +
jz loc_1002B09  +
lea ecx [ebp+var_1C] +
call sub_100CDC6  +
cmp dword_10100B4 0 +
jz loc_1002B78  +
mov al byte_10100B8 +
cmp al 4 +
jnb loc_1002B1F  +
test al al +
jnz loc_1002B78  +
mov eax dword_10100A0 +
mov ecx dword_10100A4 +
mov edi 10000h +
mov esi 80000000h +
and eax edi +
and ecx esi +
or eax ecx +
jz loc_1002B82  +
mov eax dword_10100A8 +
mov edx dword_10100AC +
mov ecx eax +
and ecx edi +
and edx esi +
cmp ecx eax +
jnz loc_1002B82  +
cmp edx dword_10100AC +
jnz loc_1002B82  +
push offset dword_1001430  +
push dword_101008C  +
push dword_1010088  +
call sub_1002799  +
jmp loc_1002B82  +
xor al al +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
mov edi 10000h +
mov esi 80000000h +
and [ebp+var_10] 0 +
xor eax eax +
cmp ax word ptr [ebp+var_C] +
jnb loc_1002D8F  +
push [ebp+var_10]  +
mov ecx [ebp+var_18] +
call sub_1002631  +
mov esi eax +
test esi esi +
jz loc_1002E51  +
cmp byte ptr [esi+0Ch] 0 +
jz loc_1002D79  +
mov edi [esi+8] +
mov ecx edi +
call sub_100274F  +
test al al +
jz loc_1002BC2  +
mov [ebp+var_3] bl +
lea eax [ebp+var_1C] +
push eax  +
mov ecx edi +
call sub_100CB5F  +
mov edi [esi] +
cmp byte ptr [edi+428h] 0 +
jz loc_1002C7F  +
and [ebp+var_54] 0 +
push 34h  +
lea eax [ebp+var_50] +
push 0  +
push eax  +
call memset  +
mov eax [esi+4] +
xor edx edx +
add esp 0Ch +
cmp [eax+4] edx +
jz loc_1002BFF  +
mov ecx [eax+14h] +
jmp loc_1002C01  +
xor ecx ecx +
mov [ebp+var_50] ecx +
mov [ebp+var_54] ebx +
cmp [eax] edx +
jz loc_1002C10  +
mov eax [eax+10h] +
jmp loc_1002C12  +
xor eax eax +
mov [ebp+var_48] eax +
mov eax [esi+4] +
mov [ebp+var_4C] ebx +
mov ecx [eax+1Ch] +
mov [ebp+var_40] ecx +
mov [ebp+var_44] ebx +
mov ecx [eax+18h] +
mov [ebp+var_38] ecx +
mov [ebp+var_3C] ebx +
mov ecx [eax+0Ch] +
mov [ebp+var_30] ecx +
mov [ebp+var_34] ebx +
mov eax [eax+8] +
mov [ebp+var_28] eax +
mov [ebp+var_2C] ebx +
cmp byte ptr [edi+20Fh] 0 +
jz loc_1002C68  +
cmp byte ptr [edi+20Eh] 0 +
jz loc_1002C68  +
movzx ax byte ptr [edi+20Ch] +
add ax 64h +
movzx eax ax +
imul eax eax +
mov [ebp+var_20] eax +
jmp loc_1002C6B  +
mov [ebp+var_20] edx +
lea eax [ebp+var_54] +
push eax  +
push 7  +
push 0E67h  +
push edx  +
mov [ebp+var_24] ebx +
call WinSqmAddToStream  +
xor edi edi +
push 34h  +
lea eax [ebp+var_88] +
push edi  +
push eax  +
mov [ebp+var_8C] edi +
call memset  +
mov eax [esi+8] +
mov eax [eax+4] +
mov [ebp+var_88] eax +
mov eax [esi] +
add esp 0Ch +
mov [ebp+var_8C] ebx +
cmp byte ptr [eax+20Fh] 0 +
mov [ebp+var_8] edi +
jz loc_1002CC2  +
movzx ecx byte ptr [eax+20Dh] +
jmp loc_1002CC4  +
xor ecx ecx +
mov esi [esi+8] +
mov [ebp+var_80] ecx +
mov [ebp+var_84] ebx +
mov ecx [esi+0Ch] +
mov [ebp+var_78] ecx +
mov [ebp+var_7C] ebx +
mov ecx [esi+14h] +
mov [ebp+var_70] ecx +
mov [ebp+var_74] ebx +
mov ecx [esi+1Ch] +
mov [ebp+var_68] ecx +
mov [ebp+var_6C] ebx +
cmp byte ptr [eax+428h] 0 +
jz loc_1002CF7  +
mov [ebp+var_8] ebx +
cmp [eax+4] edi +
jz loc_1002D32  +
movzx edx word ptr [eax+8] +
movzx ecx word ptr [eax+210h] +
movzx edi word ptr [eax+212h] +
or [ebp+var_8] 2 +
movzx esi word ptr [eax+0Ah] +
mov [ebp+dwResult] edi +
cmp cx dx +
jnz loc_1002D23  +
cmp di si +
jz loc_1002D2E  +
cmp cx si +
jnz loc_1002D32  +
cmp word ptr [ebp+dwResult] dx +
jnz loc_1002D32  +
or [ebp+var_8] 4 +
cmp byte ptr [eax+429h] 0 +
jz loc_1002D3F  +
or [ebp+var_8] 8 +
cmp byte ptr [eax+20Fh] 0 +
jz loc_1002D4C  +
or [ebp+var_8] 10h +
mov eax [ebp+var_8] +
mov [ebp+var_60] eax +
movzx eax word ptr [ebp+var_10] +
mov [ebp+var_58] eax +
lea eax [ebp+var_8C] +
push eax  +
push 7  +
push 0E6Ah  +
push 0  +
mov [ebp+var_64] ebx +
mov [ebp+var_5C] ebx +
call WinSqmAddToStream  +
mov edi 10000h +
inc [ebp+var_10]  +
mov ax word ptr [ebp+var_10] +
cmp ax word ptr [ebp+var_C] +
jb loc_1002B92  +
mov esi 80000000h +
lea eax [ebp+var_2] +
push eax  +
mov eax [ebp+var_18] +
mov ecx [eax+14h] +
call sub_100C989  +
cmp [ebp+var_3] 0 +
jz loc_1002DC6  +
cmp [ebp+var_2] 0 +
jnz loc_1002DC6  +
lea ecx [ebp+dwResult] +
push ecx  +
push 64h  +
push 2  +
xor eax eax +
push eax  +
push eax  +
push 1Ah  +
push 0FFFFh  +
mov [ebp+dwResult] eax +
call ds:SendMessageTimeoutW  +
push ebx  +
push 0E66h  +
push 0  +
call WinSqmIncrementDWORD  +
call ds:GetTickCount64  +
mov ecx [ebp+var_18] +
sub eax [ecx+8] +
xor edx edx +
mov ecx 3E8h +
div  ecx +
push eax  +
push 0E68h  +
push 0  +
call WinSqmIncrementDWORD  +
cmp dword_10100B4 0 +
jz loc_1002E53  +
mov al byte_10100B8 +
cmp al 4 +
jnb loc_1002E0B  +
test al al +
jnz loc_1002E53  +
mov eax dword_10100A0 +
mov ecx dword_10100A4 +
and eax edi +
and ecx esi +
or eax ecx +
jz loc_1002E53  +
mov eax dword_10100A8 +
mov ecx eax +
and ecx edi +
mov edi dword_10100AC +
mov edx edi +
and edx esi +
cmp ecx eax +
jnz loc_1002E53  +
cmp edx edi +
jnz loc_1002E53  +
push offset dword_1001440  +
push dword_101008C  +
push dword_1010088  +
call sub_1002799  +
jmp loc_1002E53  +
xor bl bl +
lea ecx [ebp+var_1C] +
call sub_100C51E  +
mov al bl +
jmp loc_1002B73  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
shr ecx 1 +
push 0  +
pop eax  +
jz loc_1002E7E  +
cmp ecx 7FFFFFFFh +
jbe loc_1002E83  +
mov eax 80070057h +
test eax eax +
jl loc_1002ECE  +
mov eax [ebp+arg_0] +
push ebx  +
xor ebx ebx +
push esi  +
mov esi ecx +
test ecx ecx +
jz loc_1002EBE  +
mov edx [ebp+arg_8] +
push edi  +
mov edi 7FFFFFFEh +
sub edi ecx +
sub edx eax +
lea ecx [edi+esi] +
test ecx ecx +
jz loc_1002EB9  +
movzx ecx word ptr [edx+eax] +
test cx cx +
jz loc_1002EB9  +
mov [eax] cx +
inc eax  +
inc eax  +
dec esi  +
jnz loc_1002EA1  +
pop edi  +
test esi esi +
jnz loc_1002EC5  +
dec eax  +
dec eax  +
mov ebx 8007007Ah +
xor ecx ecx +
mov [eax] cx +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0F8h +
mov eax dword_1010060 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push edi  +
xor ebx ebx +
push ebx  +
mov edi ecx +
call ds:GetDC  +
mov [ebp+hDC] eax +
cmp eax ebx +
jnz loc_1002F0A  +
xor al al +
jmp loc_100309A  +
push esi  +
push 5Ch  +
lea eax [ebp+var_E0] +
push ebx  +
push eax  +
call memset  +
add esp 0Ch +
mov esi ds:LoadStringW +
push 20h  +
lea eax [ebp+Buffer] +
push eax  +
xor eax eax +
cmp [ebp+arg_0] bl +
mov [ebp+var_E0.lfWeight] 190h +
setz al  +
mov [ebp+var_E0.lfCharSet] bl +
mov [ebp+var_E0.lfOutPrecision] 7 +
dec eax  +
and eax 0FFFFFFFAh +
add eax 86h +
push eax  +
push hInstance  +
call esi  +
test eax eax +
jle loc_1002F70  +
lea eax [ebp+Buffer] +
push eax  +
push 40h  +
lea eax [ebp+var_E0.lfFaceName] +
push eax  +
call sub_1002E67  +
push 20h  +
lea eax [ebp+var_84] +
push eax  +
xor eax eax +
cmp [ebp+arg_0] bl +
setz al  +
lea eax [eax+eax+85h] +
push eax  +
push hInstance  +
call esi  +
test eax eax +
jle loc_1002FCE  +
lea eax [ebp+var_84] +
push eax  +
call ds:_wtoi  +
pop ecx  +
push 48h  +
push 5Ah  +
push [ebp+hDC]  +
mov [ebp+nNumber] eax +
call ds:GetDeviceCaps  +
push eax  +
push [ebp+nNumber]  +
call ds:MulDiv  +
neg eax  +
mov [ebp+var_E0.lfHeight] eax +
push [ebp+hDC]  +
push ebx  +
call ds:ReleaseDC  +
lea eax [ebp+var_E0] +
push eax  +
call ds:CreateFontIndirectW  +
mov [edi] eax +
cmp eax ebx +
jz loc_1003035  +
fild  [ebp+nNumber] +
mov eax dword_10100CC +
mov ecx [eax] +
lea esi [edi+0Ch] +
fdiv  ds:dbl_1001558 +
push esi  +
push offset dword_1001550  +
push ecx  +
lea edx [ebp+Buffer] +
fmul  ds:dbl_1001548 +
fstp  [ebp+nNumber] +
fld  [ebp+nNumber] +
fstp  [esp+110h+var_110] +
push 5  +
push ebx  +
push 190h  +
push ebx  +
push edx  +
push eax  +
call dword ptr [ecx+3Ch]  +
test eax eax +
jge loc_1003039  +
xor al al +
jmp loc_1003099  +
lea eax [ebp+var_EC] +
push eax  +
call ds:GetProcessDefaultLayout  +
test eax eax +
jz loc_1003065  +
mov ecx [ebp+var_EC] +
mov eax [esi] +
mov eax [eax] +
xor edx edx +
and cl 1 +
cmp cl 1 +
setz dl  +
push edx  +
push dword ptr [esi]  +
call dword ptr [eax+18h]  +
mov esi [esi] +
push ebx  +
lea ecx [ebp+var_F8] +
push ecx  +
mov [ebp+var_F8] 1 +
mov [ebp+var_F4] ebx +
mov [ebp+var_F0] ebx +
mov eax [esi] +
push esi  +
call dword ptr [eax+24h]  +
mov ecx edi +
call sub_10024EE  +
mov ecx edi +
call sub_10022DF  +
pop esi  +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop ebx  +
call sub_100E5C6  +
leave   +
retn 4  +
***
mov eax ecx +
xor ecx ecx +
mov [eax+0Ch] ecx +
mov [eax] ecx +
mov [eax+4] ecx +
mov [eax+8] ecx +
mov [eax+24h] ecx +
mov byte ptr [eax+20h] 1 +
mov [eax+10h] ecx +
mov dword ptr [eax+14h] 0FFFFFFh +
mov [eax+18h] ecx +
mov [eax+1Ch] ecx +
mov [eax+28h] cl +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi] +
test eax eax +
jz loc_10030F3  +
push eax  +
call ds:DeleteObject  +
and dword ptr [esi] 0 +
mov ecx esi +
call sub_10024BE  +
mov esi [esi+0Ch] +
test esi esi +
jz loc_1003107  +
mov eax [esi] +
push esi  +
call dword ptr [eax+8]  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_10030DE  +
test [ebp+arg_0] 1 +
jz loc_1003128  +
push esi  +
call sub_100E22D  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 130h +
mov eax dword_1010060 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
push edi  +
mov edi 11Ch +
push edi  +
xor ebx ebx +
lea eax [ebp+var_120] +
push ebx  +
push eax  +
mov esi ecx +
call memset  +
add esp 0Ch +
push 3  +
push 2  +
push ebx  +
mov [ebp+var_120] edi +
mov edi ds:VerSetConditionMask +
xor eax eax +
push ebx  +
mov [ebp+var_11C] 6 +
mov [ebp+var_118] ebx +
mov [ebp+var_C] ax +
call edi  +
push 3  +
push 1  +
push edx  +
push eax  +
call edi  +
push 3  +
push 20h  +
push edx  +
push eax  +
call edi  +
push edx  +
push eax  +
push 23h  +
lea eax [ebp+var_120] +
push eax  +
call ds:VerifyVersionInfoW  +
test eax eax +
setnz al  +
mov [esi] al +
call ds:GetTickCount64  +
push 2Ch  +
mov [esi+8] eax +
mov [esi+0Ch] edx +
call loc_100E1BE  +
pop ecx  +
cmp eax ebx +
jz loc_10031D9  +
mov ecx eax +
call sub_10030AF  +
jmp loc_10031DB  +
xor eax eax +
mov [esi+10h] eax +
cmp eax ebx +
jnz loc_10031E9  +
xor al al +
jmp loc_10033D7  +
movzx ecx byte ptr [esi] +
push ecx  +
mov ecx eax +
call sub_1002ED7  +
test al al +
jz loc_10031E2  +
push 24h  +
call loc_100E1BE  +
pop ecx  +
cmp eax ebx +
jz loc_100320D  +
mov ecx eax +
call sub_100C890  +
jmp loc_100320F  +
xor eax eax +
mov [esi+14h] eax +
cmp eax ebx +
jz loc_10031E2  +
mov ecx eax +
call sub_100C8B4  +
test al al +
jz loc_10031E2  +
push 434h  +
call loc_100E1BE  +
pop ecx  +
cmp eax ebx +
jz loc_100323A  +
push ebx  +
mov ecx eax +
call sub_1008E2A  +
jmp loc_100323C  +
xor eax eax +
mov [esi+18h] eax +
cmp eax ebx +
jz loc_10031E2  +
movzx ecx byte ptr [esi] +
push ecx  +
mov ecx eax +
call sub_1009005  +
test al al +
jz loc_10031E2  +
mov ecx [esi+18h] +
lea eax [ebp+var_124] +
push eax  +
call sub_100939E  +
test al al +
jz loc_10031E2  +
movzx edi word ptr [ebp+var_124] +
xor ecx ecx +
mov eax edi +
mov edx 12Ch +
mul  edx +
seto cl  +
neg ecx  +
or ecx eax +
xor eax eax +
add ecx 4 +
setb al  +
neg eax  +
or eax ecx +
push eax  +
call loc_100E23E  +
pop ecx  +
cmp eax ebx +
jz loc_10032BD  +
push offset loc_100CDE5  +
push edi  +
mov [eax] edi +
add eax 4 +
push 12Ch  +
push eax  +
mov [ebp+var_12C] eax +
call sub_10025C4  +
mov eax [ebp+var_12C] +
jmp loc_10032BF  +
xor eax eax +
mov [esi+1Ch] eax +
cmp eax ebx +
jz loc_10031E2  +
xor eax eax +
xor edi edi +
cmp ax word ptr [ebp+var_124] +
jnb loc_1003313  +
mov [ebp+var_128] ebx +
mov ecx [esi+18h] +
push edi  +
call sub_1008F0A  +
mov ecx [esi+1Ch] +
add ecx [ebp+var_128] +
push eax  +
call sub_100CE35  +
test al al +
jz loc_10031E2  +
movzx eax word ptr [ebp+var_124] +
add [ebp+var_128] 12Ch +
inc edi  +
cmp edi eax +
jl loc_10032DD  +
movzx eax word ptr [ebp+var_124] +
xor ecx ecx +
push 4  +
pop edx  +
mul  edx +
seto cl  +
neg ecx  +
or ecx eax +
push ecx  +
call loc_100E23E  +
pop ecx  +
mov [esi+20h] eax +
cmp eax ebx +
jz loc_10031E2  +
xor eax eax +
mov [ebp+var_128] ebx +
cmp ax word ptr [ebp+var_124] +
jnb loc_10033D5  +
mov [ebp+var_12C] ebx +
push 10h  +
call loc_100E1BE  +
mov edi eax +
pop ecx  +
cmp edi ebx +
jz loc_1003399  +
mov ebx [esi+1Ch] +
mov eax [esi+14h] +
push [ebp+var_128]  +
mov ecx [esi+18h] +
add ebx [ebp+var_12C] +
mov [ebp+var_130] eax +
call sub_1008F0A  +
mov [edi] eax +
mov eax [ebp+var_130] +
mov [edi+8] ebx +
mov [edi+4] eax +
mov byte ptr [edi+0Ch] 1 +
xor ebx ebx +
jmp loc_100339B  +
xor edi edi +
mov eax [ebp+var_128] +
mov ecx [esi+20h] +
shl eax 2 +
mov [eax+ecx] edi +
mov ecx [esi+20h] +
cmp [eax+ecx] ebx +
jz loc_10031E2  +
movzx eax word ptr [ebp+var_124] +
inc [ebp+var_128]  +
add [ebp+var_12C] 12Ch +
cmp [ebp+var_128] eax +
jl loc_1003355  +
mov al 1 +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100E5C6  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
push edi  +
mov esi ecx +
xor edi edi +
cmp [esi+20h] edi +
jz loc_1003447  +
lea eax [ebp+var_4] +
push eax  +
call sub_10025E9  +
test al al +
jz loc_100343B  +
push ebx  +
xor eax eax +
xor ebx ebx +
cmp ax word ptr [ebp+var_4] +
jnb loc_100343A  +
mov eax [esi+20h] +
lea eax [eax+ebx*4] +
cmp [eax] edi +
jz loc_1003431  +
mov eax [eax] +
cmp eax edi +
jz loc_100342B  +
push eax  +
call sub_100E22D  +
pop ecx  +
mov eax [esi+20h] +
mov [eax+ebx*4] edi +
movzx eax word ptr [ebp+var_4] +
inc ebx  +
cmp ebx eax +
jl loc_1003414  +
pop ebx  +
push dword ptr [esi+20h]  +
call sub_100E22D  +
pop ecx  +
mov [esi+20h] edi +
mov ecx [esi+10h] +
cmp ecx edi +
jz loc_1003458  +
push 1  +
call sub_100310E  +
mov [esi+10h] edi +
mov ecx [esi+18h] +
cmp ecx edi +
jz loc_1003474  +
call sub_1008A57  +
mov ecx [esi+18h] +
cmp ecx edi +
jz loc_1003471  +
mov eax [ecx] +
push 1  +
call dword ptr [eax]  +
mov [esi+18h] edi +
mov ecx [esi+14h] +
cmp ecx edi +
jz loc_1003485  +
push 1  +
call sub_100786A  +
mov [esi+14h] edi +
mov ecx [esi+1Ch] +
cmp ecx edi +
jz loc_1003496  +
push 3  +
call sub_10027BA  +
mov [esi+1Ch] edi +
pop edi  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebx  +
push esi  +
mov esi ds:SendDlgItemMessageW +
push edi  +
push 0  +
push 0  +
mov edi 402h +
push edi  +
mov ebx ecx +
push 3F3h  +
push dword ptr [ebx+8]  +
call esi  +
push 0  +
push 0  +
push edi  +
push 3F4h  +
push dword ptr [ebx+8]  +
call esi  +
push 0  +
push 0  +
push edi  +
push 3F5h  +
push dword ptr [ebx+8]  +
call esi  +
push 0  +
push 0  +
push edi  +
push 3F6h  +
push dword ptr [ebx+8]  +
call esi  +
push 0  +
push 0  +
push edi  +
push 3F7h  +
push dword ptr [ebx+8]  +
call esi  +
push 0  +
push 0  +
push edi  +
push 3F8h  +
push dword ptr [ebx+8]  +
call esi  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_1006934  +
push 1  +
mov dword ptr [esi] offset off_1001560 +
call loc_100E1BE  +
mov [esi+20h] eax +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
call sub_100349F  +
mov eax [esi+10h] +
mov eax [eax+8] +
mov eax [eax+1Ch] +
lea ecx [ebp+nIDDlgItem] +
push ecx  +
mov ecx [esi+20h] +
push eax  +
call sub_100665C  +
test al al +
jz loc_100357E  +
push 0  +
push 1  +
push 402h  +
push [ebp+nIDDlgItem]  +
push dword ptr [esi+8]  +
call ds:SendDlgItemMessageW  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push ebx  +
mov ebx [ebp+8] +
push esi  +
push edi  +
push 0FFFFFFEBh  +
push ebx  +
call ds:GetWindowLongW  +
mov esi eax +
mov eax [ebp+0Ch] +
dec eax  +
dec eax  +
mov [ebp-4] esi +
jz loc_10039F0  +
sub eax 4Ch +
jz loc_100381B  +
sub eax 0C2h +
jz loc_10037CF  +
dec eax  +
jz loc_100360F  +
sub eax 27h +
jz loc_10035EB  +
sub eax 1E2h +
jnz loc_10037ED  +
mov eax [esi+0Ch] +
mov ecx [eax+10h] +
call sub_10022DF  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+0Ch]  +
jmp loc_10039FC  +
push 404h  +
push ebx  +
call ds:GetDlgItem  +
cmp [ebp+14h] eax +
jnz loc_10037ED  +
push dword ptr [ebp+10h]  +
mov ecx esi +
call sub_1006A32  +
jmp loc_10037ED  +
mov ebx [ebp+10h] +
movzx edi bx +
lea eax [edi-3F3h] +
cmp eax 5 +
ja loc_10037ED  +
shr ebx 10h +
push ebx  +
call sub_100501A  +
test al al +
jz loc_1003743  +
mov esi 3F3h +
sub edi esi +
jz loc_100370A  +
dec edi  +
jz loc_10036E1  +
dec edi  +
jz loc_10036C2  +
dec edi  +
jz loc_10036A7  +
dec edi  +
jz loc_100367F  +
dec edi  +
jnz loc_10039FC  +
push ebx  +
call sub_10050A0  +
test al al +
jnz loc_1003703  +
push ebx  +
call sub_1005052  +
test al al +
jz loc_10039FC  +
push 3F5h  +
jmp loc_100372E  +
push ebx  +
call sub_1005086  +
test al al +
jnz loc_10036DA  +
push ebx  +
call sub_10050A0  +
test al al +
jnz loc_1003729  +
push ebx  +
call sub_1005052  +
test al al +
jz loc_10039FC  +
jmp loc_1003714  +
push ebx  +
call sub_1005086  +
test al al +
jnz loc_1003703  +
push ebx  +
call sub_1005052  +
test al al +
jz loc_10039FC  +
push esi  +
jmp loc_100372E  +
push ebx  +
call sub_10050A0  +
test al al +
jnz loc_1003714  +
push ebx  +
call sub_100506C  +
test al al +
jz loc_10039FC  +
push 3F8h  +
jmp loc_100372E  +
push ebx  +
call sub_1005086  +
test al al +
jnz loc_1003675  +
push ebx  +
call sub_10050A0  +
test al al +
jnz loc_10036BF  +
push ebx  +
call sub_100506C  +
test al al +
jz loc_10039FC  +
push 3F7h  +
jmp loc_100372E  +
push ebx  +
call sub_1005086  +
test al al +
jz loc_100371B  +
push 3F4h  +
jmp loc_100372E  +
push ebx  +
call sub_100506C  +
test al al +
jz loc_10039FC  +
push 3F6h  +
push dword ptr [ebp+8]  +
call ds:GetDlgItem  +
push eax  +
call ds:SetFocus  +
jmp loc_10039FC  +
mov ecx esi +
call sub_100349F  +
mov eax edi +
mov esi 3F3h +
sub eax esi +
jz loc_10037B7  +
dec eax  +
jz loc_10037A7  +
dec eax  +
jz loc_1003797  +
dec eax  +
jz loc_1003787  +
dec eax  +
jz loc_1003777  +
dec eax  +
jnz loc_10039FC  +
push eax  +
push 1  +
push 402h  +
push 3F8h  +
jmp loc_10037C1  +
push 0  +
push 1  +
push 402h  +
push 3F7h  +
jmp loc_10037C1  +
push 0  +
push 1  +
push 402h  +
push 3F6h  +
jmp loc_10037C1  +
push 0  +
push 1  +
push 402h  +
push 3F5h  +
jmp loc_10037C1  +
push 0  +
push 1  +
push 402h  +
push 3F4h  +
jmp loc_10037C1  +
push 0  +
push 1  +
push 402h  +
push esi  +
push dword ptr [ebp+8]  +
call ds:SendDlgItemMessageW  +
jmp loc_10039FC  +
push 28h  +
call loc_100E1BE  +
pop ecx  +
test eax eax +
jz loc_10037E7  +
push ebx  +
mov ecx eax +
call sub_1003514  +
mov esi eax +
jmp loc_10037E9  +
xor esi esi +
test esi esi +
jnz loc_10037F4  +
xor eax eax +
jmp loc_10039FF  +
push dword ptr [ebp+14h]  +
mov ecx esi +
call sub_1006B03  +
test al al +
jnz loc_100380C  +
mov eax [esi] +
push 1  +
mov ecx esi +
call dword ptr [eax]  +
jmp loc_10037ED  +
***
push esi  +
push 0FFFFFFEBh  +
push ebx  +
call ds:SetWindowLongW  +
jmp loc_10039FC  +
mov eax [ebp+14h] +
mov eax [eax+8] +
cmp eax 0FFFFFF2Fh +
jz loc_10039DB  +
cmp eax 0FFFFFF31h +
jz loc_10038A4  +
cmp eax 0FFFFFF32h +
jz loc_100387A  +
cmp eax 0FFFFFF38h +
jnz loc_10037ED  +
mov ecx esi +
call sub_1006A01  +
test al al +
jz loc_10037ED  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+0Ch]  +
test al al +
jz loc_10037ED  +
mov ecx esi +
call sub_1003541  +
push 3  +
push 0  +
push 470h  +
push ebx  +
call ds:GetParent  +
push eax  +
call ds:PostMessageW  +
jmp loc_10039FC  +
push 3  +
push 0  +
push 0Bh  +
mov ecx esi +
call sub_1006A52  +
mov eax [esi] +
lea ecx [ebp+8] +
push ecx  +
mov ecx esi +
call dword ptr [eax+8]  +
test al al +
jz loc_10039FC  +
push dword ptr [ebp+8]  +
push 0  +
jmp loc_100380F  +
***
mov esi [esi+20h] +
mov [ebp+0Ch] esi +
mov byte ptr [ebp+17h] 0 +
mov byte ptr [ebp+13h] 0 +
test esi esi +
jz loc_10037ED  +
mov edi ds:SendDlgItemMessageW +
push 0  +
push 0  +
mov ebx 404h +
push ebx  +
lea esi [ebx-11h] +
push esi  +
push dword ptr [ebp+8]  +
call edi  +
test eax eax +
jz loc_1003949  +
mov ecx [ebp+0Ch] +
lea eax [ebp-8] +
push eax  +
push esi  +
call sub_1006692  +
mov ecx [ebp+0Ch] +
mov [ebp+17h] al +
lea eax [ebp-0Ch] +
push eax  +
push esi  +
call sub_10066C8  +
mov [ebp+13h] al +
push 2  +
push esi  +
mov ecx [ebp-4] +
push 0Bh  +
call sub_1006A52  +
cmp byte ptr [ebp+17h] 0 +
mov ecx [ebp-4] +
jz loc_1003919  +
mov eax [ecx+10h] +
mov eax [eax+8] +
mov edx [ebp-8] +
mov [eax+1Ch] edx +
cmp byte ptr [ebp+13h] 0 +
jz loc_100392B  +
mov eax [ecx+10h] +
mov eax [eax+8] +
mov edx [ebp-0Ch] +
mov [eax+24h] edx +
mov eax [ecx] +
lea edx [ebp-10h] +
push edx  +
call dword ptr [eax+4]  +
test al al +
jz loc_10039FC  +
push dword ptr [ebp-10h]  +
push 0  +
push dword ptr [ebp+8]  +
jmp loc_1003810  +
***
push 0  +
push 0  +
push ebx  +
mov esi 3F4h +
push esi  +
push dword ptr [ebp+8]  +
call edi  +
test eax eax +
jnz loc_10038D7  +
push eax  +
push eax  +
push ebx  +
inc esi  +
push esi  +
push dword ptr [ebp+8]  +
call edi  +
test eax eax +
jnz loc_10038D7  +
push eax  +
push eax  +
push ebx  +
mov esi 3F6h +
push esi  +
push dword ptr [ebp+8]  +
call edi  +
test eax eax +
jnz loc_10038D7  +
push eax  +
push eax  +
push ebx  +
inc esi  +
push esi  +
push dword ptr [ebp+8]  +
call edi  +
test eax eax +
jnz loc_10038D7  +
xor esi esi +
push esi  +
push esi  +
push ebx  +
mov ebx 3F8h +
push ebx  +
push dword ptr [ebp+8]  +
call edi  +
test eax eax +
jz loc_10038F7  +
mov ecx [ebp+0Ch] +
lea eax [ebp-8] +
push eax  +
push ebx  +
call sub_1006692  +
mov ecx [ebp+0Ch] +
mov [ebp+17h] al +
lea eax [ebp-0Ch] +
push eax  +
push ebx  +
call sub_10066C8  +
push 2  +
mov [ebp+13h] al +
push ebx  +
jmp loc_10038FA  +
***
push 1  +
xor edi edi +
push edi  +
push 0Bh  +
mov ecx esi +
call sub_1006A52  +
push edi  +
push edi  +
jmp loc_100380F  +
***
test esi esi +
jz loc_10039FC  +
mov eax [esi] +
push 1  +
mov ecx esi +
call dword ptr [eax]  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
shr ecx 1 +
push 0  +
pop eax  +
jz loc_1003A22  +
cmp ecx 7FFFFFFFh +
jbe loc_1003A27  +
mov eax 80070057h +
test eax eax +
jl loc_1003A64  +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
lea eax [ebp+arg_C] +
push eax  +
push [ebp+arg_8]  +
lea esi [ecx-1] +
push esi  +
push edi  +
xor ebx ebx +
call ds:_vsnwprintf  +
add esp 10h +
test eax eax +
jl loc_1003A54  +
cmp eax esi +
ja loc_1003A54  +
jnz loc_1003A5F  +
jmp loc_1003A59  +
mov ebx 8007007Ah +
xor eax eax +
mov [edi+esi*2] ax +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
push esi  +
mov esi [ebp+arg_8] +
test ecx ecx +
jz loc_1003AB7  +
mov eax [ebp+arg_4] +
cmp eax 7FFFFFFFh +
ja loc_1003AB7  +
push edi  +
xor edi edi +
mov edx eax +
test eax eax +
jz loc_1003A9C  +
cmp [ecx] di +
jz loc_1003A98  +
inc ecx  +
inc ecx  +
dec edx  +
jnz loc_1003A8E  +
test edx edx +
jnz loc_1003AA1  +
mov edi 80070057h +
test esi esi +
jz loc_1003AB2  +
test edi edi +
jl loc_1003AAF  +
sub eax edx +
mov [esi] eax +
jmp loc_1003AB2  +
and dword ptr [esi] 0 +
mov eax edi +
pop edi  +
jmp loc_1003ABC  +
mov eax 80070057h +
test eax eax +
jge loc_1003AC7  +
test esi esi +
jz loc_1003AC7  +
and dword ptr [esi] 0 +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi+20h] +
mov dword ptr [esi] offset off_1001560 +
test eax eax +
jz loc_1003AEA  +
push eax  +
call sub_100E22D  +
pop ecx  +
mov ecx esi +
pop esi  +
jmp sub_100695E  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1003AD1  +
test byte ptr [ebp+8] 1 +
jz loc_1003B11  +
push esi  +
call sub_100E22D  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
lea ecx [ebp+arg_0] +
call sub_1005EE9  +
mov eax [esi] +
mov ecx [ebp+arg_0] +
mov [esi] ecx +
pop esi  +
test eax eax +
jz loc_1003B42  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 448h +
mov eax dword_1010060 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
mov esi ecx +
xor ebx ebx +
cmp [esi+20h] ebx +
jnz loc_1003B72  +
xor al al +
jmp loc_1003E5D  +
push edi  +
mov edi 200h +
push edi  +
lea eax [ebp+Buffer] +
push eax  +
push 69h  +
push hInstance  +
call ds:LoadStringW  +
test eax eax +
jz loc_1003E75  +
lea eax [ebp+var_438] +
push eax  +
push edi  +
lea eax [ebp+Buffer] +
push eax  +
call sub_1003A6B  +
test eax eax +
jl loc_1003E75  +
push 4  +
pop eax  +
push 2  +
pop edi  +
mov [ebp+Rect.left] eax +
mov [ebp+Rect.right] eax +
lea eax [ebp+Rect] +
push eax  +
push dword ptr [esi+8]  +
mov [ebp+Rect.top] 5 +
mov [ebp+Rect.bottom] edi +
call ds:MapDialogRect  +
test eax eax +
jz loc_1003E75  +
push dword ptr [esi+8]  +
call ds:GetDC  +
mov [ebp+hDC] eax +
cmp eax ebx +
jz loc_1003E75  +
mov eax [esi+10h] +
mov eax [eax+8] +
mov eax [eax+4] +
xor ecx ecx +
inc ecx  +
cmp eax ecx +
jnz loc_1003C1B  +
mov [ebp+var_414] ecx +
jmp loc_1003C2B  +
mov [ebp+var_414] edi +
cmp eax edi +
jz loc_1003C2B  +
mov [ebp+var_414] ebx +
mov ecx [esi+20h] +
mov [ebp+var_40C] ebx +
call sub_100659B  +
test eax eax +
jle loc_1003E4B  +
mov ecx [esi+20h] +
lea eax [ebp+rc] +
push eax  +
push [ebp+var_40C]  +
call sub_1006644  +
push eax  +
push dword ptr [esi+8]  +
call ds:GetDlgItem  +
push eax  +
call ds:GetClientRect  +
and [ebp+var_408] 0 +
push 28h  +
call loc_100E1BE  +
pop ecx  +
test eax eax +
jz loc_1003C89  +
push dword_10100CC  +
mov ecx eax +
call sub_1005F0C  +
jmp loc_1003C8B  +
xor eax eax +
push eax  +
lea ecx [ebp+var_408] +
call sub_1003B1D  +
mov eax [ebp+rc.bottom] +
sub eax [ebp+rc.top] +
mov edi [ebp+var_408] +
push eax  +
mov eax [ebp+rc.right] +
sub eax [ebp+rc.left] +
mov ecx edi +
push eax  +
push [ebp+hDC]  +
call sub_1005DB0  +
test eax eax +
jl loc_1003E6B  +
mov eax [esi+10h] +
mov eax [eax+8] +
mov ecx [eax+14h] +
mov ebx [eax+0Ch] +
push 0  +
push [ebp+var_414]  +
mov [ebp+var_408] ecx +
fild  [ebp+var_408] +
test ecx ecx +
jge loc_1003CF6  +
fadd  ds:flt_1001580 +
fdiv  ds:dbl_1001578 +
push ecx  +
mov ecx [esi+20h] +
fstp  [ebp+var_408] +
fld  [ebp+var_408] +
fstp  [esp+460h+var_460] +
push [ebp+var_40C]  +
call sub_100662C  +
mov [ebp+var_408] eax +
fild  [ebp+var_408] +
test eax eax +
jge loc_1003D30  +
fadd  ds:flt_1001580 +
fdiv  ds:dbl_1001578 +
push ecx  +
push ecx  +
fstp  [ebp+var_408] +
fld  [ebp+var_408] +
fstp  [esp+468h+var_464] +
mov [ebp+var_408] ebx +
fild  [ebp+var_408] +
test ebx ebx +
jge loc_1003D5E  +
fadd  ds:flt_1001580 +
fdiv  ds:dbl_1001570 +
mov ecx edi +
fstp  [ebp+var_408] +
fld  [ebp+var_408] +
fstp  [esp+468h+var_468] +
call sub_1005E6D  +
test eax eax +
jl loc_1003E6B  +
mov eax [ebp+Rect.left] +
mov ecx [ebp+rc.left] +
add ecx eax +
mov eax [ebp+Rect.top] +
mov [ebp+var_448] ecx +
mov ecx [ebp+rc.top] +
add ecx eax +
mov eax [ebp+rc.right] +
sub eax [ebp+Rect.right] +
mov [ebp+var_444] ecx +
mov [ebp+var_440] eax +
mov eax [ebp+rc.bottom] +
sub eax [ebp+Rect.bottom] +
mov [ebp+var_43C] eax +
mov eax [esi+0Ch] +
mov eax [eax+10h] +
mov ecx [eax+14h] +
mov edx [eax+10h] +
mov eax [eax+0Ch] +
push ecx  +
push edx  +
push [ebp+var_438]  +
lea ecx [ebp+Buffer] +
push ecx  +
lea ecx [ebp+var_448] +
push ecx  +
lea ecx [ebp+rc] +
push ecx  +
push edi  +
push eax  +
push [ebp+hDC]  +
call sub_100C25C  +
mov ecx [esi+20h] +
push eax  +
push 0  +
push 401h  +
push [ebp+var_40C]  +
call sub_1006644  +
push eax  +
push dword ptr [esi+8]  +
call ds:SendDlgItemMessageW  +
test edi edi +
jz loc_1003E31  +
mov eax [edi] +
push edi  +
call dword ptr [eax+8]  +
mov ecx [esi+20h] +
inc [ebp+var_40C]  +
call sub_100659B  +
cmp [ebp+var_40C] eax +
jl loc_1003C41  +
push [ebp+hDC]  +
push dword ptr [esi+8]  +
call ds:ReleaseDC  +
mov al 1 +
pop edi  +
mov ecx [ebp+var_4] +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100E5C6  +
leave   +
retn   +
test edi edi +
jz loc_1003E75  +
mov eax [edi] +
push edi  +
call dword ptr [eax+8]  +
xor al al +
jmp loc_1003E5C  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 504h +
mov eax dword_1010060 +
xor eax ebp +
mov [ebp-4] eax +
push ebx  +
push esi  +
push edi  +
mov edi ds:LoadStringW +
push 100h  +
lea eax [ebp-304h] +
push eax  +
push 96h  +
push hInstance  +
mov esi ecx +
call edi  +
mov ebx 404h +
test eax eax +
jz loc_1003F29  +
mov eax [esi+10h] +
mov eax [eax] +
mov al [eax+428h] +
push 80h  +
lea ecx [ebp-104h] +
push ecx  +
xor ecx ecx +
test al al +
setnz cl  +
lea ecx [ecx+ecx+9Bh] +
push ecx  +
push hInstance  +
call edi  +
test eax eax +
jz loc_1003F29  +
lea eax [ebp-104h] +
push eax  +
lea eax [ebp-304h] +
push eax  +
lea eax [ebp-504h] +
push 200h  +
push eax  +
call sub_1003A0B  +
add esp 10h +
test eax eax +
jl loc_1003F29  +
lea eax [ebp-504h] +
push eax  +
push ebx  +
push dword ptr [esi+8]  +
call ds:SetDlgItemTextW  +
mov eax [esi+0Ch] +
mov eax [eax+10h] +
push 1  +
push dword ptr [eax+8]  +
push 30h  +
push ebx  +
push dword ptr [esi+8]  +
call ds:SendDlgItemMessageW  +
mov ecx esi +
call sub_1003B4B  +
mov ecx [ebp-4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100E5C6  +
leave   +
retn   +
***
mov edi edi +
push ebx  +
push esi  +
mov esi ds:SendDlgItemMessageW +
push edi  +
push 0  +
push 0  +
mov edi 402h +
push edi  +
mov ebx ecx +
push 3F3h  +
push dword ptr [ebx+8]  +
call esi  +
push 0  +
push 0  +
push edi  +
push 3F4h  +
push dword ptr [ebx+8]  +
call esi  +
push 0  +
push 0  +
push edi  +
push 3F5h  +
push dword ptr [ebx+8]  +
call esi  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_1006934  +
push 1  +
mov dword ptr [esi] offset off_1001584 +
call loc_100E1BE  +
mov [esi+20h] eax +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
call sub_1003F5B  +
mov eax [esi+10h] +
mov eax [eax+8] +
mov eax [eax+14h] +
lea ecx [ebp+nIDDlgItem] +
push ecx  +
mov ecx [esi+20h] +
push eax  +
call sub_100671F  +
test al al +
jz loc_100400D  +
push 0  +
push 1  +
push 402h  +
push [ebp+nIDDlgItem]  +
push dword ptr [esi+8]  +
call ds:SendDlgItemMessageW  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx+10h] +
mov eax [eax] +
xor ecx ecx +
cmp [eax+428h] cl +
mov eax [ebp+8] +
setz cl  +
dec ecx  +
and ecx 5 +
add ecx 8 +
mov [eax] ecx +
mov al 1 +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+8] +
push 0FFFFFFEBh  +
push edi  +
call ds:GetWindowLongW  +
mov esi eax +
mov eax [ebp+0Ch] +
dec eax  +
dec eax  +
mov [ebp-4] esi +
jz loc_10042AE  +
sub eax 4Ch +
jz loc_1004170  +
sub eax 0C2h +
jz loc_1004124  +
dec eax  +
jz loc_10040C6  +
sub eax 27h +
jz loc_10040A5  +
sub eax 1E2h +
jnz loc_1004142  +
mov eax [esi+0Ch] +
mov ecx [eax+10h] +
call sub_10022DF  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+0Ch]  +
jmp loc_10042BA  +
push 404h  +
push edi  +
call ds:GetDlgItem  +
cmp [ebp+14h] eax +
jnz loc_1004142  +
push dword ptr [ebp+10h]  +
mov ecx esi +
call sub_1006A32  +
jmp loc_1004142  +
movzx ebx word ptr [ebp+10h] +
lea eax [ebx-3F3h] +
cmp eax 2 +
ja loc_1004142  +
mov ecx esi +
call sub_1003F5B  +
mov esi 3F3h +
sub ebx esi +
jz loc_100410E  +
dec ebx  +
jz loc_10040FE  +
dec ebx  +
jnz loc_10042BA  +
push ebx  +
push 1  +
push 402h  +
push 3F5h  +
jmp loc_1004118  +
push 0  +
push 1  +
push 402h  +
push 3F4h  +
jmp loc_1004118  +
push 0  +
push 1  +
push 402h  +
push esi  +
push edi  +
call ds:SendDlgItemMessageW  +
jmp loc_10042BA  +
push 28h  +
call loc_100E1BE  +
pop ecx  +
test eax eax +
jz loc_100413C  +
push edi  +
mov ecx eax +
call sub_1003FA3  +
mov esi eax +
jmp loc_100413E  +
xor esi esi +
test esi esi +
jnz loc_1004149  +
xor eax eax +
jmp loc_10042BD  +
push dword ptr [ebp+14h]  +
mov ecx esi +
call sub_1006B03  +
test al al +
jnz loc_1004161  +
mov eax [esi] +
push 1  +
mov ecx esi +
call dword ptr [eax]  +
jmp loc_1004142  +
***
push esi  +
push 0FFFFFFEBh  +
push edi  +
call ds:SetWindowLongW  +
jmp loc_10042BA  +
mov eax [ebp+14h] +
mov eax [eax+8] +
cmp eax 0FFFFFF2Fh +
jz loc_1004299  +
cmp eax 0FFFFFF31h +
jz loc_10041F9  +
cmp eax 0FFFFFF32h +
jz loc_10041CF  +
cmp eax 0FFFFFF38h +
jnz loc_1004142  +
mov ecx esi +
call sub_1006A01  +
test al al +
jz loc_1004142  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+0Ch]  +
test al al +
jz loc_1004142  +
mov ecx esi +
call sub_1003FD0  +
push 3  +
push 0  +
push 470h  +
push edi  +
call ds:GetParent  +
push eax  +
call ds:PostMessageW  +
jmp loc_10042BA  +
push 3  +
push 0  +
push 0Ah  +
mov ecx esi +
call sub_1006A52  +
mov eax [esi] +
lea ecx [ebp+8] +
push ecx  +
mov ecx esi +
call dword ptr [eax+8]  +
test al al +
jz loc_10042BA  +
push dword ptr [ebp+8]  +
push 0  +
jmp loc_1004164  +
***
mov esi [esi+20h] +
mov [ebp+10h] esi +
mov byte ptr [ebp+17h] 0 +
test esi esi +
jz loc_1004142  +
push 0  +
push 0  +
mov ebx 404h +
push ebx  +
lea esi [ebx-11h] +
push esi  +
push edi  +
mov edi ds:SendDlgItemMessageW +
call edi  +
test eax eax +
jz loc_100423B  +
mov ecx [ebp+10h] +
lea eax [ebp+0Ch] +
push eax  +
push esi  +
call sub_1006755  +
push 2  +
mov [ebp+17h] al +
push esi  +
jmp loc_1004260  +
push 0  +
push 0  +
push ebx  +
mov esi 3F4h +
push esi  +
push dword ptr [ebp+8]  +
call edi  +
test eax eax +
jnz loc_1004226  +
push eax  +
push eax  +
push ebx  +
inc esi  +
push esi  +
push dword ptr [ebp+8]  +
call edi  +
test eax eax +
jnz loc_1004226  +
push 2  +
push eax  +
mov ecx [ebp-4] +
push 0Ah  +
call sub_1006A52  +
cmp byte ptr [ebp+17h] 0 +
jz loc_10042BA  +
mov ecx [ebp-4] +
mov eax [ecx+10h] +
mov eax [eax+8] +
mov edx [ebp+0Ch] +
mov [eax+14h] edx +
mov eax [ecx] +
lea edx [ebp-8] +
push edx  +
call dword ptr [eax+4]  +
test al al +
jz loc_10042BA  +
push dword ptr [ebp-8]  +
push 0  +
push dword ptr [ebp+8]  +
jmp loc_1004165  +
***
push 1  +
xor ebx ebx +
push ebx  +
push 0Ah  +
mov ecx esi +
call sub_1006A52  +
push ebx  +
push ebx  +
jmp loc_1004164  +
***
test esi esi +
jz loc_10042BA  +
mov eax [esi] +
push 1  +
mov ecx esi +
call dword ptr [eax]  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi+20h] +
mov dword ptr [esi] offset off_1001584 +
test eax eax +
jz loc_10042E2  +
push eax  +
call sub_100E22D  +
pop ecx  +
mov ecx esi +
pop esi  +
jmp sub_100695E  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_10042C9  +
test byte ptr [ebp+8] 1 +
jz loc_1004309  +
push esi  +
call sub_100E22D  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 44Ch +
mov eax dword_1010060 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
push edi  +
mov edi 200h +
push edi  +
lea eax [ebp+Buffer] +
push eax  +
push 69h  +
push hInstance  +
mov esi ecx +
call ds:LoadStringW  +
test eax eax +
jnz loc_1004354  +
xor al al +
jmp loc_100461B  +
lea eax [ebp+var_43C] +
push eax  +
push edi  +
lea eax [ebp+Buffer] +
push eax  +
call sub_1003A6B  +
test eax eax +
jl loc_100434D  +
push 4  +
pop eax  +
push 2  +
pop edi  +
mov [ebp+Rect.left] eax +
mov [ebp+Rect.right] eax +
lea eax [ebp+Rect] +
push eax  +
push dword ptr [esi+8]  +
mov [ebp+Rect.top] 5 +
mov [ebp+Rect.bottom] edi +
call ds:MapDialogRect  +
test eax eax +
jz loc_100434D  +
push dword ptr [esi+8]  +
call ds:GetDC  +
mov [ebp+hDC] eax +
test eax eax +
jz loc_100434D  +
mov eax [esi+10h] +
mov eax [eax+8] +
mov eax [eax+4] +
xor ecx ecx +
inc ecx  +
cmp eax ecx +
jnz loc_10043CD  +
mov [ebp+var_414] ecx +
jmp loc_10043E0  +
cmp eax edi +
jnz loc_10043D9  +
mov [ebp+var_414] edi +
jmp loc_10043E0  +
and [ebp+var_414] 0 +
mov ecx [esi+20h] +
and [ebp+var_40C] 0 +
push ebx  +
call sub_10066FE  +
test eax eax +
jle loc_1004609  +
mov ecx [esi+20h] +
lea eax [ebp+rc] +
push eax  +
push [ebp+var_40C]  +
call sub_1006644  +
push eax  +
push dword ptr [esi+8]  +
call ds:GetDlgItem  +
push eax  +
call ds:GetClientRect  +
and [ebp+var_408] 0 +
push 28h  +
call loc_100E1BE  +
pop ecx  +
test eax eax +
jz loc_1004440  +
push dword_10100CC  +
mov ecx eax +
call sub_1005F0C  +
jmp loc_1004442  +
xor eax eax +
push eax  +
lea ecx [ebp+var_408] +
call sub_1003B1D  +
mov eax [ebp+rc.bottom] +
sub eax [ebp+rc.top] +
mov edi [ebp+var_408] +
push eax  +
mov eax [ebp+rc.right] +
sub eax [ebp+rc.left] +
mov ecx edi +
push eax  +
push [ebp+hDC]  +
call sub_1005DB0  +
test eax eax +
jl loc_1004629  +
mov eax [esi+10h] +
mov eax [eax+8] +
mov ebx [eax+1Ch] +
mov eax [eax+0Ch] +
mov ecx [esi+20h] +
push 0  +
push [ebp+var_414]  +
mov [ebp+var_410] eax +
push [ebp+var_40C]  +
call sub_1006707  +
mov [ebp+var_408] eax +
fild  [ebp+var_408] +
test eax eax +
jge loc_10044C1  +
fadd  ds:flt_1001580 +
fld  ds:dbl_1001578 +
sub esp 0Ch +
fdiv st(1) st +
fxch  st(1) +
fstp  [ebp+var_408] +
fld  [ebp+var_408] +
fstp  [esp+46Ch+var_464] +
mov [ebp+var_408] ebx +
fild  [ebp+var_408] +
test ebx ebx +
jge loc_10044F4  +
fadd  ds:flt_1001580 +
fdivrp st(1) st +
mov eax [ebp+var_410] +
fstp  [ebp+var_408] +
fld  [ebp+var_408] +
fstp  [esp+46Ch+var_468] +
fild  [ebp+var_410] +
test eax eax +
jge loc_100451C  +
fadd  ds:flt_1001580 +
fdiv  ds:dbl_1001570 +
mov ecx edi +
fstp  [ebp+var_410] +
fld  [ebp+var_410] +
fstp  [esp+46Ch+var_46C] +
call sub_1005E6D  +
test eax eax +
jl loc_1004629  +
mov eax [ebp+Rect.left] +
mov ecx [ebp+rc.left] +
add ecx eax +
mov eax [ebp+Rect.top] +
mov [ebp+var_44C] ecx +
mov ecx [ebp+rc.top] +
add ecx eax +
mov eax [ebp+rc.right] +
sub eax [ebp+Rect.right] +
mov [ebp+var_448] ecx +
mov [ebp+var_444] eax +
mov eax [ebp+rc.bottom] +
sub eax [ebp+Rect.bottom] +
mov [ebp+var_440] eax +
mov eax [esi+0Ch] +
mov eax [eax+10h] +
mov ecx [eax+14h] +
mov edx [eax+10h] +
mov eax [eax+0Ch] +
push ecx  +
push edx  +
push [ebp+var_43C]  +
lea ecx [ebp+Buffer] +
push ecx  +
lea ecx [ebp+var_44C] +
push ecx  +
lea ecx [ebp+rc] +
push ecx  +
push edi  +
push eax  +
push [ebp+hDC]  +
call sub_100C25C  +
mov ecx [esi+20h] +
push eax  +
push 0  +
push 401h  +
push [ebp+var_40C]  +
call sub_1006644  +
push eax  +
push dword ptr [esi+8]  +
call ds:SendDlgItemMessageW  +
test edi edi +
jz loc_10045EF  +
mov eax [edi] +
push edi  +
call dword ptr [eax+8]  +
mov ecx [esi+20h] +
inc [ebp+var_40C]  +
call sub_10066FE  +
cmp [ebp+var_40C] eax +
jl loc_10043F8  +
push [ebp+hDC]  +
push dword ptr [esi+8]  +
call ds:ReleaseDC  +
mov al 1 +
pop ebx  +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_100E5C6  +
leave   +
retn   +
test edi edi +
jz loc_1004633  +
mov eax [edi] +
push edi  +
call dword ptr [eax+8]  +
xor al al +
jmp loc_100461A  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 504h +
mov eax dword_1010060 +
xor eax ebp +
mov [ebp-4] eax +
push ebx  +
push esi  +
push edi  +
mov edi ds:LoadStringW +
push 100h  +
lea eax [ebp-304h] +
push eax  +
push 96h  +
push hInstance  +
mov esi ecx +
call edi  +
mov ebx 404h +
test eax eax +
jz loc_10046EA  +
mov eax [esi+10h] +
mov eax [eax] +
mov al [eax+428h] +
push 80h  +
lea ecx [ebp-104h] +
push ecx  +
xor ecx ecx +
test al al +
setz cl  +
dec ecx  +
and ecx 3 +
add ecx 99h +
push ecx  +
push hInstance  +
call edi  +
test eax eax +
jz loc_10046EA  +
lea eax [ebp-104h] +
push eax  +
lea eax [ebp-304h] +
push eax  +
lea eax [ebp-504h] +
push 200h  +
push eax  +
call sub_1003A0B  +
add esp 10h +
test eax eax +
jl loc_10046EA  +
lea eax [ebp-504h] +
push eax  +
push ebx  +
push dword ptr [esi+8]  +
call ds:SetDlgItemTextW  +
mov eax [esi+0Ch] +
mov eax [eax+10h] +
push 1  +
push dword ptr [eax+8]  +
push 30h  +
push ebx  +
push dword ptr [esi+8]  +
call ds:SendDlgItemMessageW  +
mov ecx esi +
call sub_1004315  +
mov ecx [ebp-4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100E5C6  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_1006934  +
mov dword ptr [esi] offset off_1001594 +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_1001594 +
call sub_100695E  +
test byte ptr [ebp+8] 1 +
jz loc_100475E  +
push esi  +
call sub_100E22D  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebx  +
push esi  +
mov esi ds:SendDlgItemMessageW +
push edi  +
push 0  +
push 0  +
mov edi 402h +
push edi  +
mov ebx ecx +
push 3F3h  +
push dword ptr [ebx+8]  +
call esi  +
push 0  +
push 0  +
push edi  +
push 3F4h  +
push dword ptr [ebx+8]  +
call esi  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
mov ecx [esi+0Ch] +
lea eax [ebp-1] +
push eax  +
call sub_1002606  +
test al al +
jz loc_10047E2  +
mov ecx esi +
call sub_1006ABD  +
test al al +
jz loc_10047CF  +
mov eax [ebp+8] +
and dword ptr [eax] 0 +
jmp loc_10047E0  +
mov ecx [ebp+8] +
xor eax eax +
cmp [ebp-1] al +
setz al  +
lea eax [eax+eax+0Ch] +
mov [ecx] eax +
mov al 1 +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx+10h] +
mov eax [eax] +
xor ecx ecx +
cmp [eax+428h] cl +
mov eax [ebp+8] +
setz cl  +
dec ecx  +
and ecx 3 +
add ecx 0Ah +
mov [eax] ecx +
mov al 1 +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_100476A  +
mov eax [esi+10h] +
mov edx [eax] +
xor ecx ecx +
push ecx  +
push 1  +
push 402h  +
cmp [edx+428h] cl +
jz loc_1004849  +
mov eax [eax+4] +
cmp dword ptr [eax+0Ch] 1 +
jz loc_1004852  +
push 3F4h  +
jmp loc_1004857  +
mov eax [eax+8] +
cmp dword ptr [eax+4] 2 +
jz loc_1004842  +
push 3F3h  +
push dword ptr [esi+8]  +
call ds:SendDlgItemMessageW  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 450h +
mov eax dword_1010060 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push 200h  +
lea eax [ebp+String] +
push eax  +
push 69h  +
push hInstance  +
mov ebx ecx +
call ds:LoadStringW  +
test eax eax +
jnz loc_10048A4  +
xor al al +
jmp loc_1004BEC  +
push esi  +
mov esi ds:SystemParametersInfoW +
push edi  +
xor edi edi +
push edi  +
lea eax [ebp+pvParam] +
push eax  +
push edi  +
push 4Ah  +
call esi  +
test eax eax +
jz loc_1004BE8  +
cmp [ebp+pvParam] edi +
jnz loc_10048DB  +
push edi  +
push edi  +
push 1  +
push 4Bh  +
call esi  +
test eax eax +
jz loc_1004BE8  +
push edi  +
lea eax [ebp+var_414] +
push eax  +
push edi  +
push 200Ah  +
call esi  +
test eax eax +
jz loc_1004BE8  +
cmp [ebp+var_414] 2 +
jz loc_100490F  +
push edi  +
push 2  +
push edi  +
push 200Bh  +
call esi  +
test eax eax +
jz loc_1004BE8  +
push edi  +
lea eax [ebp+var_418] +
push eax  +
push edi  +
push 200Ch  +
call esi  +
test eax eax +
jz loc_1004BE8  +
push edi  +
lea eax [ebp+var_40C] +
push eax  +
push edi  +
push 2012h  +
call esi  +
test eax eax +
jz loc_1004BE8  +
push 4  +
pop eax  +
mov [ebp+Rect.left] eax +
mov [ebp+Rect.right] eax +
lea eax [ebp+Rect] +
push eax  +
push dword ptr [ebx+8]  +
mov [ebp+Rect.top] 5 +
mov [ebp+Rect.bottom] 2 +
call ds:MapDialogRect  +
test eax eax +
jz loc_1004BE8  +
lea eax [ebp+var_440] +
push eax  +
push 3F3h  +
push dword ptr [ebx+8]  +
call ds:GetDlgItem  +
push eax  +
call ds:GetClientRect  +
test eax eax +
jz loc_1004BE8  +
mov ecx [ebp+Rect.left] +
mov eax [ebp+var_440] +
push dword ptr [ebx+8]  +
add eax ecx +
mov ecx [ebp+Rect.top] +
mov [ebp+var_450] eax +
mov eax [ebp+var_43C] +
add eax ecx +
mov [ebp+var_44C] eax +
mov eax [ebp+var_438] +
sub eax [ebp+Rect.right] +
mov [ebp+var_448] eax +
mov eax [ebp+var_434] +
sub eax [ebp+Rect.bottom] +
mov [ebp+var_444] eax +
call ds:GetDC  +
mov [ebp+hDC] eax +
cmp eax edi +
jz loc_1004BE8  +
push edi  +
xor eax eax +
mov edi 640h +
cmp [ebp+var_418] edi +
setnz al  +
dec eax  +
and eax 0FFFFFF9Ch +
add eax edi +
push eax  +
push 0  +
push 200Dh  +
call esi  +
mov eax [ebx+0Ch] +
mov eax [eax+10h] +
mov ecx [eax+14h] +
mov edx [eax+10h] +
mov eax [eax] +
push ecx  +
push edx  +
lea ecx [ebp+String] +
push ecx  +
lea ecx [ebp+var_450] +
push ecx  +
lea ecx [ebp+var_440] +
push ecx  +
push eax  +
push [ebp+hDC]  +
call sub_100C157  +
mov [ebp+lParam] eax +
xor eax eax +
cmp [ebp+var_40C] 1 +
push 0  +
setnz al  +
push eax  +
push 0  +
push 2013h  +
call esi  +
test eax eax +
jnz loc_1004A95  +
push [ebp+lParam]  +
call ds:DeleteObject  +
push [ebp+hDC]  +
push dword ptr [ebx+8]  +
call ds:ReleaseDC  +
jmp loc_1004BE8  +
xor eax eax +
cmp [ebp+var_418] edi +
push 0  +
setz al  +
dec eax  +
and eax 0FFFFFF9Ch +
add eax edi +
push eax  +
push 0  +
push 200Dh  +
call esi  +
mov eax [ebx+0Ch] +
mov eax [eax+10h] +
mov ecx [eax+14h] +
mov edx [eax+10h] +
mov eax [eax] +
push ecx  +
push edx  +
lea ecx [ebp+String] +
push ecx  +
lea ecx [ebp+var_450] +
push ecx  +
lea ecx [ebp+var_440] +
push ecx  +
push eax  +
push [ebp+hDC]  +
call sub_100C157  +
mov edi eax +
xor eax eax +
mov [ebp+var_430] edi +
cmp [ebp+lParam] eax +
jz loc_1004BB4  +
cmp edi eax +
jz loc_1004BC1  +
cmp [ebp+var_40C] 1 +
jnz loc_1004B2D  +
push [ebp+lParam]  +
mov edi 401h +
push eax  +
push edi  +
push 3F3h  +
push dword ptr [ebx+8]  +
call ds:SendDlgItemMessageW  +
push [ebp+var_430]  +
jmp loc_1004B49  +
push edi  +
push eax  +
mov edi 401h +
push edi  +
push 3F3h  +
push dword ptr [ebx+8]  +
call ds:SendDlgItemMessageW  +
push [ebp+lParam]  +
push 0  +
push edi  +
push 3F4h  +
push dword ptr [ebx+8]  +
call ds:SendDlgItemMessageW  +
push [ebp+hDC]  +
push dword ptr [ebx+8]  +
call ds:ReleaseDC  +
xor edi edi +
push edi  +
push [ebp+var_40C]  +
push edi  +
push 2013h  +
call esi  +
push edi  +
push [ebp+var_418]  +
push edi  +
push 200Dh  +
call esi  +
cmp [ebp+pvParam] edi +
jnz loc_1004B98  +
push edi  +
push edi  +
push edi  +
push 4Bh  +
call esi  +
cmp [ebp+var_414] 2 +
jz loc_1004BB0  +
push edi  +
push [ebp+var_414]  +
push edi  +
push 200Bh  +
call esi  +
mov al 1 +
jmp loc_1004BEA  +
push eax  +
call ds:DeleteObject  +
test edi edi +
jnz loc_1004BC8  +
xor eax eax +
push eax  +
call ds:DeleteObject  +
push [ebp+hDC]  +
push dword ptr [ebx+8]  +
call ds:ReleaseDC  +
push 0  +
push [ebp+var_40C]  +
push 0  +
push 2013h  +
call esi  +
xor al al +
pop edi  +
pop esi  +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop ebx  +
call sub_100E5C6  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+8] +
push 0FFFFFFEBh  +
push edi  +
call ds:GetWindowLongW  +
mov esi eax +
mov eax [ebp+0Ch] +
push 2  +
pop ebx  +
sub eax ebx +
jz loc_1004EB1  +
sub eax 4Ch +
jz loc_1004D18  +
sub eax 0C2h +
jz loc_1004CCA  +
dec eax  +
jz loc_1004C7D  +
sub eax 27h +
jz loc_1004C60  +
sub eax 1E2h +
jnz loc_1004CEA  +
mov eax [esi+0Ch] +
mov ecx [eax+10h] +
call sub_10022DF  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+0Ch]  +
jmp loc_1004EBD  +
push 404h  +
push edi  +
call ds:GetDlgItem  +
cmp [ebp+14h] eax +
jnz loc_1004CEA  +
push dword ptr [ebp+10h]  +
mov ecx esi +
call sub_1006A32  +
jmp loc_1004CEA  +
movzx edi word ptr [ebp+10h] +
xor ebx ebx +
lea eax [edi-3F3h] +
inc ebx  +
cmp eax ebx +
ja loc_1004CEA  +
mov ecx esi +
call sub_100476A  +
mov eax edi +
mov edi 3F3h +
sub eax edi +
jz loc_1004CB1  +
dec eax  +
jnz loc_1004CC3  +
push eax  +
push ebx  +
push 402h  +
push 3F4h  +
jmp loc_1004CBA  +
push 0  +
push ebx  +
push 402h  +
push edi  +
push dword ptr [ebp+8]  +
call ds:SendDlgItemMessageW  +
mov eax ebx +
jmp loc_1004EC0  +
push 20h  +
call loc_100E1BE  +
xor ebx ebx +
pop ecx  +
cmp eax ebx +
jz loc_1004CE4  +
push edi  +
mov ecx eax +
call sub_100471C  +
mov esi eax +
jmp loc_1004CE6  +
xor esi esi +
cmp esi ebx +
jnz loc_1004CF1  +
xor eax eax +
jmp loc_1004EC0  +
push dword ptr [ebp+14h]  +
mov ecx esi +
call sub_1006B03  +
test al al +
jnz loc_1004D09  +
mov eax [esi] +
push 1  +
mov ecx esi +
call dword ptr [eax]  +
jmp loc_1004CEA  +
***
push esi  +
push 0FFFFFFEBh  +
push edi  +
call ds:SetWindowLongW  +
jmp loc_1004EBD  +
mov eax [ebp+14h] +
mov eax [eax+8] +
cmp eax 0FFFFFF2Fh +
jz loc_1004E8D  +
cmp eax 0FFFFFF31h +
jz loc_1004DBB  +
cmp eax 0FFFFFF32h +
jz loc_1004D91  +
cmp eax 0FFFFFF38h +
jnz loc_1004CEA  +
mov ecx esi +
call sub_1006A01  +
test al al +
jz loc_1004CEA  +
mov ecx esi +
call sub_1006ABD  +
test al al +
jnz loc_1004D65  +
mov eax [esi+0Ch] +
mov cx [eax+24h] +
cmp cx [eax+26h] +
jnz loc_1004D68  +
push 3  +
pop ebx  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+0Ch]  +
mov ecx esi +
call sub_1004818  +
push ebx  +
push 0  +
push 470h  +
push edi  +
call ds:GetParent  +
push eax  +
call ds:PostMessageW  +
jmp loc_1004EBD  +
push 3  +
xor ebx ebx +
push ebx  +
push 8  +
mov ecx esi +
call sub_1006A52  +
mov eax [esi] +
lea ecx [ebp+8] +
push ecx  +
mov ecx esi +
call dword ptr [eax+8]  +
test al al +
jz loc_1004EBD  +
push dword ptr [ebp+8]  +
push ebx  +
jmp loc_1004D0C  +
***
xor ebx ebx +
push ebx  +
push ebx  +
push 404h  +
mov edi 3F3h +
push edi  +
push dword ptr [ebp+8]  +
call ds:SendDlgItemMessageW  +
test eax eax +
jz loc_1004E09  +
push 2  +
push edi  +
push 8  +
mov ecx esi +
call sub_1006A52  +
mov eax [esi+10h] +
mov ecx [eax] +
cmp [ecx+428h] bl +
jz loc_1004DFA  +
mov ecx [eax+4] +
push 1  +
call sub_100CA32  +
mov eax [esi+10h] +
mov eax [eax+8] +
mov dword ptr [eax+4] 1 +
jmp loc_1004E5C  +
push ebx  +
push ebx  +
push 404h  +
mov edi 3F4h +
push edi  +
push dword ptr [ebp+8]  +
call ds:SendDlgItemMessageW  +
push 2  +
mov ecx esi +
test eax eax +
jz loc_1004E54  +
push edi  +
push 8  +
call sub_1006A52  +
mov eax [esi+10h] +
mov ecx [eax] +
cmp [ecx+428h] bl +
jz loc_1004E45  +
mov ecx [eax+4] +
push ebx  +
call sub_100CA32  +
mov eax [esi+10h] +
mov eax [eax+8] +
mov dword ptr [eax+4] 2 +
jmp loc_1004E5C  +
push ebx  +
push 8  +
call sub_1006A52  +
mov eax [esi+10h] +
mov ecx [eax] +
cmp [ecx+428h] bl +
jz loc_1004E72  +
mov ecx [eax+4] +
push ebx  +
call sub_100C929  +
mov eax [esi] +
lea ecx [ebp+14h] +
push ecx  +
mov ecx esi +
call dword ptr [eax+4]  +
test al al +
jz loc_1004EBD  +
push dword ptr [ebp+14h]  +
push ebx  +
push dword ptr [ebp+8]  +
jmp loc_1004D0D  +
***
push 1  +
xor ebx ebx +
push ebx  +
push 8  +
mov ecx esi +
call sub_1006A52  +
push ebx  +
push ebx  +
push edi  +
call ds:SetWindowLongW  +
mov eax [esi+10h] +
mov ecx [eax+4] +
call sub_100C9D3  +
jmp loc_1004EBD  +
test esi esi +
jz loc_1004EBD  +
mov eax [esi] +
push 1  +
mov ecx esi +
call dword ptr [eax]  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 638h +
mov eax dword_1010060 +
xor eax ebp +
mov [ebp-4] eax +
push ebx  +
push esi  +
mov esi ds:LoadStringW +
push edi  +
mov ebx 100h +
push ebx  +
lea eax [ebp-438h] +
push eax  +
push 96h  +
push hInstance  +
mov edi ecx +
call esi  +
test eax eax +
jz loc_1004F76  +
mov eax [edi+10h] +
mov eax [eax] +
mov al [eax+428h] +
push 80h  +
lea ecx [ebp-138h] +
push ecx  +
xor ecx ecx +
test al al +
setnz cl  +
add ecx 97h +
push ecx  +
push hInstance  +
call esi  +
test eax eax +
jz loc_1004F76  +
lea eax [ebp-138h] +
push eax  +
lea eax [ebp-438h] +
push eax  +
lea eax [ebp-638h] +
push 200h  +
push eax  +
call sub_1003A0B  +
add esp 10h +
test eax eax +
jl loc_1004F76  +
lea eax [ebp-638h] +
push eax  +
push 404h  +
push dword ptr [edi+8]  +
call ds:SetDlgItemTextW  +
mov eax [edi+0Ch] +
mov eax [eax+10h] +
push 1  +
push dword ptr [eax+8]  +
push 30h  +
push 404h  +
push dword ptr [edi+8]  +
call ds:SendDlgItemMessageW  +
mov ecx edi +
call sub_1004867  +
test al al +
jnz loc_1005004  +
xor eax eax +
push 30h  +
push eax  +
mov [ebp-38h] ax +
lea eax [ebp-36h] +
push eax  +
call memset  +
xor eax eax +
push 1FEh  +
push eax  +
mov [ebp-238h] ax +
lea eax [ebp-236h] +
push eax  +
call memset  +
add esp 18h +
push 19h  +
lea eax [ebp-38h] +
push eax  +
push 72h  +
push hInstance  +
call esi  +
push ebx  +
lea eax [ebp-238h] +
push eax  +
push 74h  +
push hInstance  +
call esi  +
push 0  +
lea eax [ebp-38h] +
push eax  +
lea eax [ebp-238h] +
push eax  +
push dword ptr [edi+8]  +
call ds:MessageBoxW  +
mov ecx [ebp-4] +
pop edi  +
pop esi  +
xor ecx ebp +
mov al 1 +
pop ebx  +
call sub_100E5C6  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ax [ebp+arg_0] +
mov ecx 409h +
cmp ax cx +
jz loc_1005047  +
dec ecx  +
cmp ax cx +
jz loc_1005047  +
mov ecx 406h +
cmp ax cx +
jz loc_1005047  +
inc ecx  +
cmp ax cx +
jz loc_1005047  +
xor al al +
jmp loc_1005049  +
mov al 1 +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax 406h +
cmp [ebp+arg_0] ax +
setz al  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax 407h +
cmp [ebp+arg_0] ax +
setz al  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax 408h +
cmp [ebp+arg_0] ax +
setz al  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax 409h +
cmp [ebp+arg_0] ax +
setz al  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 204h +
mov eax dword_1010060 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
push 100h  +
lea eax [ebp+String] +
push eax  +
mov esi ecx +
push 83h  +
mov dword ptr [esi] offset off_10015A4 +
push hInstance  +
call ds:LoadStringW  +
test eax eax +
jnz loc_10050FE  +
and [esi+28h] eax +
jmp loc_100511E  +
lea eax [ebp+String] +
push eax  +
call ds:SysAllocString  +
mov [esi+28h] eax +
lea eax [ebp+String] +
push eax  +
push dword ptr [esi+24h]  +
call ds:SetWindowTextW  +
mov eax [ebp+arg_0] +
mov ecx [ebp+var_4] +
and dword ptr [esi+4] 0 +
mov [esi+24h] eax +
mov byte ptr [esi+20h] 0 +
mov eax esi +
xor ecx ebp +
pop esi  +
call sub_100E5C6  +
leave   +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi+4] +
mov dword ptr [esi] offset off_10015A4 +
test eax eax +
jz loc_100515F  +
push eax  +
call ds:DeleteObject  +
and dword ptr [esi+4] 0 +
push dword ptr [esi+28h]  +
call ds:SysFreeString  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov eax [esi+4] +
test eax eax +
jz loc_1005185  +
push eax  +
call ds:DeleteObject  +
mov cl [ebp+arg_4] +
mov eax [ebp+arg_0] +
mov [esi+20h] cl +
lea ecx [esi+8] +
push ecx  +
push 18h  +
push eax  +
mov [esi+4] eax +
call ds:GetObjectW  +
test eax eax +
jnz loc_10051A6  +
xor al al +
jmp loc_10051CC  +
push 16h  +
push dword ptr [esi+10h]  +
push dword ptr [esi+0Ch]  +
push 0  +
push 0  +
push 0  +
push dword ptr [esi+24h]  +
call ds:SetWindowPos  +
push 1  +
push 0  +
push dword ptr [esi+24h]  +
call ds:InvalidateRect  +
mov al 1 +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
push dword ptr [esi+28h]  +
call ds:SysFreeString  +
push [ebp+lpString]  +
call ds:SysAllocString  +
push [ebp+lpString]  +
mov [esi+28h] eax +
push dword ptr [esi+24h]  +
call ds:SetWindowTextW  +
xor eax eax +
cmp [esi+28h] eax +
pop esi  +
setnz al  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
mov edi [ebp+arg_0] +
test edi edi +
jnz loc_1005222  +
xor al al +
jmp loc_100522E  +
push esi  +
push 6  +
lea esi [ecx+8] +
pop ecx  +
movs   +
mov al 1 +
pop esi  +
pop edi  +
pop ebp  +
retn 4  +
***
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov al [ebp+arg_0] +
cmp [ecx+20h] al +
jz loc_100525E  +
push 1  +
push 0  +
push dword ptr [ecx+24h]  +
mov [ecx+20h] al +
call ds:InvalidateRect  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_10050BA  +
xor al al +
mov [esi+2Ch] al +
mov [esi+2Dh] al +
mov [esi+2Fh] al +
mov al [ebp+arg_4] +
mov [esi+2Eh] al +
mov dword ptr [esi] offset off_10015A8 +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
cmp byte ptr [esi+20h] 0 +
jnz loc_10052F8  +
push ebx  +
mov bl [ebp+arg_0] +
cmp [esi+2Ch] bl +
jz loc_10052F7  +
push edi  +
push 0FFFFFFF0h  +
push dword ptr [esi+24h]  +
mov [esi+2Ch] bl +
call ds:GetWindowLongW  +
mov edi eax +
test bl bl +
jz loc_10052D7  +
push dword ptr [esi+24h]  +
or edi 10000h +
call ds:SetFocus  +
jmp loc_10052DD  +
and edi 0FFFEFFFFh +
push edi  +
push 0FFFFFFF0h  +
push dword ptr [esi+24h]  +
call ds:SetWindowLongW  +
push 1  +
push 0  +
push dword ptr [esi+24h]  +
call ds:InvalidateRect  +
pop edi  +
pop ebx  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 38h +
mov eax dword_1010060 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
push edi  +
mov esi offset dword_10013BC +
lea edi [ebp+var_24] +
movs   +
movs   +
and [ebp+ppv] 0 +
movs   +
movs   +
mov esi offset dword_10013EC +
lea edi [ebp+var_14] +
movs   +
movs   +
lea eax [ebp+ppv] +
push eax  +
push offset riid  +
push 15h  +
movs   +
push 0  +
push offset rclsid  +
mov ebx ecx +
movs   +
call ds:CoCreateInstance  +
mov esi eax +
test esi esi +
jl loc_10053DC  +
push 3  +
pop eax  +
sub esp 10h +
mov edi esp +
mov word ptr [ebp+var_38] ax +
mov [ebp+var_30] 2Dh +
mov eax [ebp+ppv] +
lea esi [ebp+var_38] +
movs   +
movs   +
mov ecx [eax] +
movs   +
sub esp 10h +
movs   +
mov edi esp +
mov esi offset dword_10013DC +
movs   +
movs   +
push 0  +
push 0FFFFFFFCh  +
push dword ptr [ebx+24h]  +
movs   +
push eax  +
movs   +
call dword ptr [ecx+18h]  +
test eax eax +
jl loc_10053D1  +
push 0Ch  +
call loc_100E1BE  +
pop ecx  +
test eax eax +
jz loc_10053AB  +
push dword ptr [ebx+24h]  +
mov ecx eax +
call sub_1002125  +
jmp loc_10053AD  +
xor eax eax +
test eax eax +
jnz loc_10053B8  +
mov esi 8007000Eh +
jmp loc_10053D3  +
mov ecx [ebp+ppv] +
mov edx [ecx] +
push 0  +
push eax  +
push 2  +
lea eax [ebp+var_24] +
push eax  +
push 0  +
push 0FFFFFFFCh  +
push dword ptr [ebx+24h]  +
push ecx  +
call dword ptr [edx+20h]  +
mov esi eax +
mov eax [ebp+ppv] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov ecx [ebp+var_4] +
pop edi  +
mov eax esi +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100E5C6  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 38h +
mov eax dword_1010060 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
push edi  +
mov esi offset dword_10013BC +
lea edi [ebp+var_34] +
movs   +
movs   +
movs   +
movs   +
mov esi offset dword_10013DC +
lea edi [ebp+var_24] +
movs   +
movs   +
movs   +
movs   +
mov esi offset dword_10013EC +
lea edi [ebp+var_14] +
movs   +
movs   +
movs   +
lea eax [ebp+ppv] +
push eax  +
push offset riid  +
movs   +
push 15h  +
xor edi edi +
push edi  +
push offset rclsid  +
mov ebx ecx +
mov [ebp+ppv] edi +
call ds:CoCreateInstance  +
mov esi eax +
cmp esi edi +
jl loc_100546F  +
mov eax [ebp+ppv] +
mov ecx [eax] +
push 3  +
lea edx [ebp+var_34] +
push edx  +
push edi  +
push 0FFFFFFFCh  +
push dword ptr [ebx+24h]  +
push eax  +
call dword ptr [ecx+24h]  +
mov esi eax +
mov eax [ebp+ppv] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov ecx [ebp+var_4] +
pop edi  +
mov eax esi +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100E5C6  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_10050BA  +
mov dword ptr [esi] offset off_10015A8 +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 28h +
mov eax dword_1010060 +
xor eax ebp +
mov [ebp+var_4] eax +
and [ebp+ppv] 0 +
push ebx  +
push esi  +
push edi  +
mov esi offset dword_10013BC +
lea edi [ebp+var_14] +
movs   +
movs   +
lea eax [ebp+ppv] +
push eax  +
push offset riid  +
push 15h  +
movs   +
push 0  +
push offset rclsid  +
mov ebx ecx +
movs   +
call ds:CoCreateInstance  +
mov esi eax +
test esi esi +
jl loc_10055AC  +
push 3  +
pop eax  +
sub esp 10h +
mov edi esp +
mov word ptr [ebp+var_28] ax +
mov [ebp+var_20] 29h +
mov eax [ebp+ppv] +
lea esi [ebp+var_28] +
movs   +
movs   +
mov ecx [eax] +
movs   +
sub esp 10h +
movs   +
mov edi esp +
mov esi offset dword_10013DC +
movs   +
movs   +
push 0  +
push 0FFFFFFFCh  +
push dword ptr [ebx+24h]  +
movs   +
push eax  +
movs   +
call dword ptr [ecx+18h]  +
mov esi eax +
mov eax [ebp+ppv] +
mov ecx [eax] +
test esi esi +
jl loc_10055A8  +
sub esp 10h +
mov edi esp +
mov [ebp+var_20] 40h +
lea esi [ebp+var_28] +
movs   +
movs   +
movs   +
sub esp 10h +
movs   +
mov edi esp +
mov esi offset dword_10013EC +
movs   +
movs   +
push 0  +
push 0FFFFFFFCh  +
push dword ptr [ebx+24h]  +
movs   +
push eax  +
movs   +
call dword ptr [ecx+18h]  +
test eax eax +
jl loc_10055A1  +
push 0Ch  +
call loc_100E1BE  +
pop ecx  +
test eax eax +
jz loc_100557B  +
push dword ptr [ebx+24h]  +
mov ecx eax +
call sub_1002257  +
jmp loc_100557D  +
xor eax eax +
test eax eax +
jnz loc_1005588  +
mov esi 8007000Eh +
jmp loc_10055A3  +
mov ecx [ebp+ppv] +
mov edx [ecx] +
push 0  +
push eax  +
push 1  +
lea eax [ebp+var_14] +
push eax  +
push 0  +
push 0FFFFFFFCh  +
push dword ptr [ebx+24h]  +
push ecx  +
call dword ptr [edx+20h]  +
mov esi eax +
mov eax [ebp+ppv] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov ecx [ebp+var_4] +
pop edi  +
mov eax esi +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100E5C6  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 48h +
mov eax dword_1010060 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
push edi  +
mov esi offset dword_10013BC +
lea edi [ebp+var_44] +
movs   +
movs   +
movs   +
movs   +
mov esi offset dword_10013DC +
lea edi [ebp+var_34] +
movs   +
movs   +
movs   +
movs   +
mov esi offset dword_10013EC +
lea edi [ebp+var_24] +
movs   +
movs   +
movs   +
movs   +
mov esi offset dword_10013CC +
lea edi [ebp+var_14] +
movs   +
movs   +
movs   +
lea eax [ebp+ppv] +
push eax  +
push offset riid  +
movs   +
push 15h  +
xor edi edi +
push edi  +
push offset rclsid  +
mov ebx ecx +
mov [ebp+ppv] edi +
call ds:CoCreateInstance  +
mov esi eax +
cmp esi edi +
jl loc_100564B  +
mov eax [ebp+ppv] +
mov ecx [eax] +
push 4  +
lea edx [ebp+var_44] +
push edx  +
push edi  +
push 0FFFFFFFCh  +
push dword ptr [ebx+24h]  +
push eax  +
call dword ptr [ecx+24h]  +
mov esi eax +
mov eax [ebp+ppv] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov ecx [ebp+var_4] +
pop edi  +
mov eax esi +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100E5C6  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1005142  +
test byte ptr [ebp+8] 1 +
jz loc_100567B  +
push esi  +
call sub_100E22D  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_10015A8 +
call sub_1005142  +
test byte ptr [ebp+8] 1 +
jz loc_10056A7  +
push esi  +
call sub_100E22D  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 7Ch +
mov eax dword_1010060 +
xor eax ebp +
mov [ebp-4] eax +
mov eax [ebp+14h] +
push ebx  +
mov ebx [ebp+8] +
push esi  +
push edi  +
mov edi ds:GetWindowLongW +
push 0FFFFFFEBh  +
push ebx  +
mov [ebp-4Ch] ebx +
mov [ebp-48h] eax +
call edi  +
mov ecx [ebp+0Ch] +
mov esi eax +
mov eax 200h +
cmp ecx eax +
ja loc_10059D8  +
jz loc_1005995  +
cmp ecx 0Ah +
ja loc_1005806  +
jz loc_10057EF  +
mov eax ecx +
dec eax  +
jz loc_100579A  +
dec eax  +
jz loc_100577E  +
sub eax 5 +
jz loc_100574E  +
dec eax  +
jnz loc_1005A04  +
lea eax [ebp-60h] +
push eax  +
push ebx  +
call ds:GetClientRect  +
push ebx  +
call ds:GetDC  +
mov edi eax +
lea eax [ebp-60h] +
push eax  +
push edi  +
call ds:DrawFocusRect  +
push edi  +
push ebx  +
call ds:ReleaseDC  +
mov byte ptr [esi+2Dh] 0 +
jmp loc_1005A9E  +
lea eax [ebp-60h] +
push eax  +
push ebx  +
call ds:GetClientRect  +
push ebx  +
call ds:GetDC  +
mov edi eax +
lea eax [ebp-60h] +
push eax  +
push edi  +
call ds:DrawFocusRect  +
push edi  +
push ebx  +
call ds:ReleaseDC  +
mov byte ptr [esi+2Dh] 1 +
jmp loc_1005A9E  +
test esi esi +
jz loc_1005A9E  +
mov ecx esi +
call sub_10053F2  +
mov eax [esi] +
push 1  +
mov ecx esi +
call dword ptr [eax]  +
jmp loc_1005A9E  +
push 30h  +
call loc_100E1BE  +
mov esi eax +
xor ebx ebx +
pop ecx  +
cmp esi ebx +
jz loc_10057CD  +
push 0FFFFFFF0h  +
push dword ptr [ebp-4Ch]  +
call edi  +
and al 1 +
dec al  +
neg al  +
sbb al al +
inc al  +
movzx eax al +
push eax  +
push dword ptr [ebp-4Ch]  +
mov ecx esi +
call sub_1005267  +
mov esi eax +
jmp loc_10057CF  +
xor esi esi +
cmp esi ebx +
jz loc_1005A48  +
push esi  +
push 0FFFFFFEBh  +
push dword ptr [ebp-4Ch]  +
call ds:SetWindowLongW  +
mov ecx esi +
call sub_1005302  +
jmp loc_1005A9E  +
cmp dword ptr [ebp+10h] 0 +
mov ecx esi +
setz al  +
movzx eax al +
push eax  +
call sub_1005241  +
jmp loc_1005A9E  +
mov eax ecx +
sub eax 0Fh +
jz loc_1005891  +
sub eax 78h +
jz loc_100587F  +
sub eax 79h +
jnz loc_1005A04  +
push 0FFFFFFF4h  +
push ebx  +
call edi  +
mov ecx [ebp+10h] +
movzx eax ax +
cmp ecx 20h +
jz loc_1005A81  +
cmp ecx 25h +
jnz loc_1005845  +
movzx eax ax +
or eax 4090000h +
jmp loc_1005A89  +
cmp ecx 27h +
jnz loc_1005857  +
movzx eax ax +
or eax 4080000h +
jmp loc_1005A89  +
cmp ecx 26h +
jnz loc_1005869  +
movzx eax ax +
or eax 4060000h +
jmp loc_1005A89  +
cmp ecx 28h +
jnz loc_1005A9E  +
movzx eax ax +
or eax 4070000h +
jmp loc_1005A89  +
cmp byte ptr [esi+2Eh] 0 +
jz loc_1005A9E  +
xor eax eax +
inc eax  +
jmp loc_1005AA0  +
lea eax [ebp-44h] +
push eax  +
push ebx  +
call ds:BeginPaint  +
xor ebx ebx +
mov [ebp-50h] eax +
cmp [esi+4] ebx +
jz loc_1005964  +
push eax  +
call ds:CreateCompatibleDC  +
push dword ptr [esi+4]  +
mov edi eax +
push edi  +
call ds:SelectObject  +
mov [ebp-7Ch] eax +
lea eax [ebp-78h] +
push eax  +
mov ecx esi +
call sub_1005211  +
cmp [esi+20h] bl +
jz loc_10058FC  +
mov [ebp-48h] bl +
mov [ebp-47h] bl +
mov byte ptr [ebp-46h] 64h +
mov [ebp-45h] bl +
push dword ptr [ebp-48h]  +
push dword ptr [ebp-70h]  +
push dword ptr [ebp-74h]  +
push ebx  +
push ebx  +
push edi  +
push dword ptr [ebp-70h]  +
push dword ptr [ebp-74h]  +
push ebx  +
push ebx  +
push dword ptr [ebp-50h]  +
call ds:GdiAlphaBlend  +
jmp loc_1005953  +
push 0CC0020h  +
push ebx  +
push ebx  +
push edi  +
push dword ptr [ebp-70h]  +
push dword ptr [ebp-74h]  +
push ebx  +
push ebx  +
push dword ptr [ebp-50h]  +
call ds:BitBlt  +
mov eax [ebp-74h] +
mov [ebp-58h] eax +
mov eax [ebp-70h] +
mov [ebp-5Ch] ebx +
mov [ebp-60h] ebx +
mov [ebp-54h] eax +
cmp [esi+2Ch] bl +
jz loc_1005938  +
lea eax [ebp-60h] +
push eax  +
push dword ptr [ebp-50h]  +
call sub_100C0AF  +
cmp [esi+2Fh] bl +
jz loc_1005953  +
push 0Dh  +
call ds:GetSysColorBrush  +
push eax  +
lea eax [ebp-60h] +
push eax  +
push dword ptr [ebp-50h]  +
call ds:FrameRect  +
push dword ptr [ebp-7Ch]  +
push edi  +
call ds:SelectObject  +
push edi  +
call ds:DeleteDC  +
cmp [esi+2Dh] bl +
jz loc_1005983  +
lea eax [ebp-60h] +
push eax  +
push dword ptr [ebp-4Ch]  +
call ds:GetClientRect  +
lea eax [ebp-60h] +
push eax  +
push dword ptr [ebp-50h]  +
call ds:DrawFocusRect  +
lea eax [ebp-44h] +
push eax  +
push dword ptr [ebp-4Ch]  +
call ds:EndPaint  +
jmp loc_1005A9E  +
xor ebx ebx +
cmp [esi+2Fh] bl +
jnz loc_1005A9E  +
xor eax eax +
lea edi [ebp-6Ch] +
stos   +
stos   +
stos   +
mov byte ptr [esi+2Fh] 1 +
mov esi [ebp-4Ch] +
lea eax [ebp-70h] +
push eax  +
mov dword ptr [ebp-70h] 10h +
mov dword ptr [ebp-6Ch] 2 +
mov [ebp-68h] esi +
call ds:TrackMouseEvent  +
push ebx  +
push ebx  +
push esi  +
call ds:InvalidateRect  +
jmp loc_1005A9E  +
mov eax ecx +
sub eax 201h +
jz loc_1005A79  +
dec eax  +
jz loc_1005A9E  +
sub eax 0A1h +
jz loc_1005A67  +
sub eax 15Eh +
jz loc_1005A41  +
dec eax  +
jz loc_1005A2D  +
dec eax  +
dec eax  +
jz loc_1005A23  +
dec eax  +
jz loc_1005A17  +
push dword ptr [ebp-48h]  +
push dword ptr [ebp+10h]  +
push ecx  +
push ebx  +
call ds:DefWindowProcW  +
jmp loc_1005AA0  +
push dword ptr [ebp-48h]  +
mov ecx esi +
call sub_10051D6  +
jmp loc_1005A9E  +
xor eax eax +
cmp [esi+2Ch] al +
setnz al  +
jmp loc_1005AA0  +
cmp dword ptr [ebp+10h] 1 +
mov ecx esi +
setz al  +
movzx eax al +
push eax  +
call sub_100529A  +
jmp loc_1005A9E  +
xor ebx ebx +
cmp [ebp-48h] ebx +
jnz loc_1005A4D  +
or eax 0FFFFFFFFh +
jmp loc_1005AA0  +
cmp [ebp+10h] ebx +
mov ecx esi +
setnz al  +
movzx eax al +
push eax  +
push dword ptr [ebp-48h]  +
call sub_100516F  +
test al al +
jnz loc_1005A9E  +
jmp loc_1005A48  +
***
xor ebx ebx +
push ebx  +
push ebx  +
push dword ptr [ebp-4Ch]  +
call ds:InvalidateRect  +
mov [esi+2Fh] bl +
jmp loc_1005A9E  +
push 0FFFFFFF4h  +
push ebx  +
call edi  +
movzx eax ax +
movzx eax ax +
or eax 4050000h +
push ebx  +
push eax  +
push 111h  +
push ebx  +
call ds:GetParent  +
push eax  +
call ds:SendMessageW  +
xor eax eax +
mov ecx [ebp-4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100E5C6  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 70h +
mov eax dword_1010060 +
xor eax ebp +
mov [ebp-4] eax +
push ebx  +
mov ebx [ebp+14h] +
push esi  +
push edi  +
mov edi [ebp+8] +
push 0FFFFFFEBh  +
push edi  +
mov [ebp-58h] edi +
mov [ebp-48h] ebx +
call ds:GetWindowLongW  +
mov esi eax +
mov eax [ebp+0Ch] +
dec eax  +
jz loc_1005C2E  +
dec eax  +
jz loc_1005C19  +
sub eax 8 +
jz loc_1005C05  +
sub eax 5 +
jz loc_1005B59  +
sub eax 3F2h +
jz loc_1005B2C  +
sub eax 4 +
push ebx  +
jz loc_1005B20  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push edi  +
call ds:DefWindowProcW  +
jmp loc_1005C65  +
mov ecx esi +
call sub_10051D6  +
jmp loc_1005C63  +
xor ebx ebx +
cmp [ebp-48h] ebx +
jnz loc_1005B3B  +
or eax 0FFFFFFFFh +
jmp loc_1005C65  +
cmp [ebp+10h] ebx +
mov ecx esi +
setnz al  +
movzx eax al +
push eax  +
push dword ptr [ebp-48h]  +
call sub_100516F  +
test al al +
jnz loc_1005C63  +
jmp loc_1005B33  +
***
lea eax [ebp-44h] +
push eax  +
push edi  +
call ds:BeginPaint  +
xor ebx ebx +
mov [ebp-50h] eax +
cmp [esi+4] ebx +
jz loc_1005BF8  +
push eax  +
call ds:CreateCompatibleDC  +
push dword ptr [esi+4]  +
mov edi ds:SelectObject +
push eax  +
mov [ebp-48h] eax +
call edi  +
mov [ebp-54h] eax +
lea eax [ebp-70h] +
push eax  +
mov ecx esi +
call sub_1005211  +
cmp [esi+20h] bl +
jz loc_1005BC9  +
mov [ebp-4Ch] bl +
mov [ebp-4Bh] bl +
mov byte ptr [ebp-4Ah] 64h +
mov [ebp-49h] bl +
push dword ptr [ebp-4Ch]  +
push dword ptr [ebp-68h]  +
push dword ptr [ebp-6Ch]  +
push ebx  +
push ebx  +
push dword ptr [ebp-48h]  +
push dword ptr [ebp-68h]  +
push dword ptr [ebp-6Ch]  +
push ebx  +
push ebx  +
push dword ptr [ebp-50h]  +
call ds:GdiAlphaBlend  +
jmp loc_1005BE4  +
push 0CC0020h  +
push ebx  +
push ebx  +
push dword ptr [ebp-48h]  +
push dword ptr [ebp-68h]  +
push dword ptr [ebp-6Ch]  +
push ebx  +
push ebx  +
push dword ptr [ebp-50h]  +
call ds:BitBlt  +
push dword ptr [ebp-54h]  +
push dword ptr [ebp-48h]  +
call edi  +
push dword ptr [ebp-48h]  +
call ds:DeleteDC  +
mov edi [ebp-58h] +
lea eax [ebp-44h] +
push eax  +
push edi  +
call ds:EndPaint  +
jmp loc_1005C63  +
cmp dword ptr [ebp+10h] 0 +
mov ecx esi +
setz al  +
movzx eax al +
push eax  +
call sub_1005241  +
jmp loc_1005C63  +
test esi esi +
jz loc_1005C63  +
mov ecx esi +
call sub_10055C2  +
mov eax [esi] +
push 1  +
mov ecx esi +
call dword ptr [eax]  +
jmp loc_1005C63  +
push 2Ch  +
call loc_100E1BE  +
xor ebx ebx +
pop ecx  +
cmp eax ebx +
jz loc_1005C48  +
push edi  +
mov ecx eax +
call sub_1005485  +
mov esi eax +
jmp loc_1005C4A  +
xor esi esi +
cmp esi ebx +
jz loc_1005B33  +
push esi  +
push 0FFFFFFEBh  +
push edi  +
call ds:SetWindowLongW  +
mov ecx esi +
call sub_10054A7  +
xor eax eax +
mov ecx [ebp-4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100E5C6  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 30h +
mov eax [ebp+arg_0] +
push esi  +
xor esi esi +
push 7F00h  +
push esi  +
mov dword_10100C0 eax +
mov [ebp+var_30.cbSize] 30h +
mov [ebp+var_30.style] 3 +
mov [ebp+var_30.lpfnWndProc] offset loc_10056B3 +
mov [ebp+var_30.cbClsExtra] esi +
mov [ebp+var_30.cbWndExtra] 4 +
mov [ebp+var_30.hInstance] eax +
mov [ebp+var_30.hIcon] esi +
call ds:LoadCursorW  +
push esi  +
mov [ebp+var_30.hCursor] eax +
call ds:GetStockObject  +
mov [ebp+var_30.hbrBackground] eax +
lea eax [ebp+var_30] +
push eax  +
mov [ebp+var_30.lpszMenuName] esi +
mov [ebp+var_30.lpszClassName] offset aBitmapswitchcl +
mov [ebp+var_30.hIconSm] esi +
call ds:RegisterClassExW  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 30h +
mov eax [ebp+arg_0] +
push esi  +
xor esi esi +
push 7F00h  +
push esi  +
mov dword_10100C0 eax +
mov [ebp+var_30.cbSize] 30h +
mov [ebp+var_30.style] 3 +
mov [ebp+var_30.lpfnWndProc] offset loc_1005AB6 +
mov [ebp+var_30.cbClsExtra] esi +
mov [ebp+var_30.cbWndExtra] 4 +
mov [ebp+var_30.hInstance] eax +
mov [ebp+var_30.hIcon] esi +
call ds:LoadCursorW  +
push esi  +
mov [ebp+var_30.hCursor] eax +
call ds:GetStockObject  +
mov [ebp+var_30.hbrBackground] eax +
lea eax [ebp+var_30] +
push eax  +
mov [ebp+var_30.lpszMenuName] esi +
mov [ebp+var_30.lpszClassName] offset aBitmapdisplayc +
mov [ebp+var_30.hIconSm] esi +
call ds:RegisterClassExW  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+0Ch] +
push edi  +
push 4  +
pop ecx  +
mov edi offset dword_1001FC0 +
xor eax eax +
cmps   +
jz loc_1005D88  +
mov esi [ebp+0Ch] +
push 4  +
pop ecx  +
mov edi offset dword_10015F8 +
xor eax eax +
cmps   +
jnz loc_1005D9A  +
mov eax [ebp+8] +
mov ecx [ebp+10h] +
mov [ecx] eax +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
xor eax eax +
jmp loc_1005DA5  +
mov eax [ebp+10h] +
and dword ptr [eax] 0 +
mov eax 80004002h +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
push esi  +
mov esi ecx +
mov [esi+0Ch] eax +
mov eax [ebp+arg_8] +
mov [esi+10h] eax +
mov eax [esi+18h] +
mov ecx [eax] +
lea edx [esi+24h] +
push edx  +
push eax  +
call dword ptr [ecx+28h]  +
test eax eax +
jl loc_1005E0E  +
mov eax [esi+18h] +
mov ecx [eax] +
push edi  +
lea edi [esi+1Ch] +
push edi  +
push eax  +
call dword ptr [ecx+44h]  +
test eax eax +
jl loc_1005E0D  +
mov eax [edi] +
mov ecx [eax] +
lea edi [esi+20h] +
push edi  +
push dword ptr [esi+10h]  +
push dword ptr [esi+0Ch]  +
push [ebp+arg_0]  +
push eax  +
call dword ptr [ecx+1Ch]  +
test eax eax +
jl loc_1005E0D  +
mov edi [edi] +
mov eax [edi] +
push edi  +
call dword ptr [eax+10h]  +
mov [esi+14h] eax +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
fld  dword ptr [ebp+14h] +
mov edx [eax+24h] +
mov ecx [eax+20h] +
push esi  +
mov esi [ecx] +
push 0  +
push dword ptr [eax+8]  +
push edx  +
push dword ptr [ebp+1Ch]  +
push dword ptr [ebp+18h]  +
push ecx  +
push ecx  +
fstp  dword ptr [esp+4] +
fld  dword ptr [ebp+10h] +
fstp  dword ptr [esp] +
push ecx  +
call dword ptr [esi+0Ch]  +
pop esi  +
pop ebp  +
retn 20h  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi] +
test eax eax +
jz loc_1005E63  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
and dword ptr [esi] 0 +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
push edi  +
lea edi [esi+24h] +
mov eax [edi] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+0Ch]  +
fstp  [ebp+var_4] +
mov ecx edi +
call sub_1005E52  +
fld  [ebp+arg_8] +
mov eax [esi+18h] +
mov ecx [eax] +
push edi  +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
sub esp 0Ch +
fstp  [esp+28h+var_20] +
fld  [ebp+arg_4] +
fstp  [esp+28h+var_24] +
fld  [ebp+arg_0] +
fstp  [esp+28h+var_28] +
push eax  +
call dword ptr [ecx+30h]  +
test eax eax +
jge loc_1005EDE  +
fld  [ebp+arg_8] +
mov esi [esi+18h] +
mov eax [esi] +
push edi  +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
sub esp 0Ch +
fstp  [esp+44h+var_3C] +
fld  [ebp+arg_4] +
fstp  [esp+44h+var_40] +
fld  [ebp+var_4] +
fstp  [esp+44h+var_44] +
push esi  +
call dword ptr [eax+30h]  +
pop edi  +
pop esi  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
mov esi ecx +
mov [esi] eax +
test eax eax +
jz loc_1005F00  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
push edi  +
push [ebp+arg_0]  +
xor edi edi +
lea ecx [esi+18h] +
mov dword ptr [esi] offset off_1001608 +
mov [esi+4] edi +
mov [esi+8] edi +
mov [esi+0Ch] edi +
mov [esi+10h] edi +
mov [esi+14h] edi +
call sub_1005EE9  +
mov [esi+1Ch] edi +
mov [esi+20h] edi +
mov [esi+24h] edi +
pop edi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov eax 80004001h +
retn 20h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+10h] +
and dword ptr [eax] 0 +
xor eax eax +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+10h] +
push 6  +
pop ecx  +
mov esi offset dword_1001630 +
movs   +
pop edi  +
xor eax eax +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov eax [eax+20h] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+14h]  +
mov eax [ebp+10h] +
fstp  dword ptr [eax] +
xor eax eax +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi+24h] +
test eax eax +
jz loc_1005FC4  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [esi+20h] +
test eax eax +
jz loc_1005FD1  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [esi+1Ch] +
test eax eax +
jz loc_1005FDE  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov esi [esi+18h] +
test esi esi +
jz loc_1005FEB  +
mov eax [esi] +
push esi  +
call dword ptr [eax+8]  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
push ebx  +
push esi  +
mov esi ecx +
mov eax [esi+24h] +
mov ecx [eax] +
push edi  +
push eax  +
call dword ptr [ecx+1Ch]  +
dec eax  +
dec eax  +
jz loc_1006040  +
dec eax  +
jz loc_1006038  +
mov eax [esi+18h] +
fld  [ebp+arg_18] +
mov ecx [eax] +
lea edx [ebp+var_4] +
push edx  +
push ecx  +
push ecx  +
fstp  [esp+20h+var_1C] +
fld  [ebp+arg_14] +
fstp  [esp+20h+var_20] +
push [ebp+arg_0]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push eax  +
call dword ptr [ecx+48h]  +
jmp loc_1006079  +
lea ecx [ebp+var_4] +
push ecx  +
push 1  +
jmp loc_1006046  +
lea ecx [ebp+var_4] +
push ecx  +
push 0  +
mov ebx [esi+18h] +
mov eax [esi+20h] +
mov edi [ebx] +
mov ecx [eax] +
push 0  +
push eax  +
add edi 4Ch +
call dword ptr [ecx+14h]  +
sub esp 0Ch +
fstp  [esp+30h+var_28] +
fld  [ebp+arg_18] +
fstp  [esp+30h+var_2C] +
fld  [ebp+arg_14] +
fstp  [esp+30h+var_30] +
push [ebp+arg_0]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push ebx  +
call dword ptr [edi]  +
mov edi eax +
mov eax [ebp+var_4] +
test edi edi +
jge loc_1006090  +
test eax eax +
jz loc_100608C  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax edi +
jmp loc_10060BC  +
mov ecx [eax] +
fld  [ebp+arg_10] +
push ecx  +
push ecx  +
fstp  [esp+48h+var_44] +
fld  [ebp+arg_C] +
fstp  [esp+48h+var_48] +
push esi  +
push 0  +
push eax  +
call dword ptr [ecx+0E8h]  +
mov esi eax +
mov eax [ebp+var_4] +
test eax eax +
jz loc_10060BA  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax esi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 1Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1005FB2  +
test [ebp+arg_0] 1 +
jz loc_10060E2  +
push esi  +
call sub_100E22D  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+8] +
dec dword ptr [ecx+4]  +
mov eax [ecx+4] +
jnz loc_1006107  +
push 1  +
call sub_10060C8  +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 238h +
mov eax dword_1010060 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
mov esi ds:LoadStringW +
push 19h  +
lea eax [ebp+Caption] +
push eax  +
push 72h  +
push hInstance  +
call esi  +
test eax eax +
jnz loc_1006144  +
xor al al +
jmp loc_1006178  +
push 100h  +
lea eax [ebp+Text] +
push eax  +
push 73h  +
push hInstance  +
call esi  +
test eax eax +
jz loc_1006140  +
push 0  +
lea eax [ebp+Caption] +
push eax  +
lea eax [ebp+Text] +
push eax  +
push 0  +
call ds:MessageBoxW  +
test eax eax +
setnz al  +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop esi  +
call sub_100E5C6  +
leave   +
retn   +
***
test ax ax +
jnz loc_10061A0  +
mov eax 80004005h +
retn   +
push hInstance  +
call sub_1005C7B  +
test ax ax +
jz loc_100619A  +
push hInstance  +
call sub_100A1C6  +
test ax ax +
jz loc_100619A  +
push hInstance  +
call sub_100AF1A  +
movzx eax ax +
neg eax  +
sbb eax eax +
and eax 7FFFBFFBh +
add eax 80004005h +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_10033EB  +
test [ebp+arg_0] 1 +
jz loc_10061FC  +
push esi  +
call sub_100E22D  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+28h] +
xor ecx ecx +
cmp eax ecx +
jz loc_1006256  +
mov edx [ebp+0Ch] +
sub edx ecx +
jz loc_1006244  +
dec edx  +
jnz loc_1006256  +
mov cl [ebp+10h] +
mov [eax+28h] cl +
mov ecx [ebp+14h] +
mov [eax+10h] ecx +
mov ecx [ebp+18h] +
mov [eax+14h] ecx +
mov ecx [ebp+1Ch] +
mov [eax+18h] ecx +
mov ecx [ebp+20h] +
mov dword ptr [eax+24h] 1 +
jmp loc_1006253  +
mov [eax+24h] ecx +
mov [eax+28h] cl +
mov [eax+10h] ecx +
mov [eax+14h] ecx +
mov [eax+18h] ecx +
mov [eax+1Ch] ecx +
pop ebp  +
retn 24h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_C] +
mov ecx [eax] +
or ecx [eax+4] +
jz loc_1006272  +
xor eax eax +
jmp loc_1006282  +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call ds:EventRegister  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
mov eax [esi] +
mov ecx [esi+4] +
mov edx eax +
or edx ecx +
jnz loc_10062A3  +
xor eax eax +
jmp loc_10062B2  +
push ecx  +
push eax  +
call ds:EventUnregister  +
and dword ptr [esi] 0 +
and dword ptr [esi+4] 0 +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 214h +
mov eax dword_1010060 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+hInstance] +
push ebx  +
push esi  +
push edi  +
push offset Name  +
xor ebx ebx +
push 1  +
push ebx  +
mov [ebp+var_205] bl +
mov hInstance eax +
call ds:CreateMutexW  +
mov edi eax +
mov [ebp+var_20C] edi +
cmp edi ebx +
jz loc_1006365  +
call ds:GetLastError  +
cmp eax 0B7h +
jnz loc_1006365  +
push 100h  +
lea eax [ebp+WindowName] +
push eax  +
push 66h  +
push hInstance  +
call ds:LoadStringW  +
test eax eax +
jnz loc_1006337  +
push edi  +
call ds:CloseHandle  +
xor eax eax +
jmp loc_10064E4  +
lea eax [ebp+WindowName] +
push eax  +
push offset ClassName  +
call ds:FindWindowW  +
mov esi eax +
cmp esi ebx +
jz loc_1006365  +
push edi  +
call ds:CloseHandle  +
push esi  +
call ds:SetForegroundWindow  +
xor eax eax +
inc eax  +
jmp loc_10064E4  +
push 2  +
push ebx  +
call ds:CoInitializeEx  +
test eax eax +
jl loc_1006379  +
mov [ebp+var_205] 1 +
lea eax [ebp+var_214] +
push eax  +
mov [ebp+var_214.dwSize] 8 +
mov [ebp+var_214.dwICC] 0FFh +
call ds:InitCommonControlsEx  +
push offset dword_1010088  +
push offset unk_1010090  +
push offset loc_1006208  +
push offset dword_1001400  +
call sub_100625F  +
cmp dword_10100B4 ebx +
jz loc_100641C  +
mov al byte_10100B8 +
cmp al 4 +
jnb loc_10063C8  +
cmp al bl +
jnz loc_100641C  +
mov eax dword_10100A0 +
mov ecx dword_10100A4 +
mov edx 10000h +
mov esi 80000000h +
and eax edx +
and ecx esi +
or eax ecx +
jz loc_100641C  +
mov eax dword_10100A8 +
mov edi dword_10100AC +
mov ecx eax +
and ecx edx +
mov edx edi +
and edx esi +
cmp ecx eax +
jnz loc_1006416  +
cmp edx edi +
jnz loc_1006416  +
push offset dword_1001410  +
push dword_101008C  +
push dword_1010088  +
call sub_1002799  +
mov edi [ebp+var_20C] +
call sub_100618A  +
test eax eax +
jge loc_100643A  +
cmp edi ebx +
jz loc_1006430  +
push edi  +
call ds:CloseHandle  +
call sub_1006110  +
jmp loc_1006330  +
xor esi esi +
inc esi  +
push esi  +
call ds:GdiSetBatchLimit  +
push offset dword_10100CC  +
push offset dword_1001648  +
push ebx  +
call ds:DWriteCreateFactory  +
test eax eax +
jl loc_1006425  +
push 28h  +
call loc_100E1BE  +
pop ecx  +
cmp eax ebx +
jz loc_100646E  +
mov ecx eax +
call sub_100256E  +
jmp loc_1006470  +
xor eax eax +
mov dword_10100C8 eax +
cmp eax ebx +
jz loc_1006425  +
push esi  +
push 0E65h  +
push ebx  +
call WinSqmIncrementDWORD  +
mov ecx dword_10100C8 +
call sub_1003134  +
test al al +
jz loc_10064A4  +
push dword_10100C8  +
push ebx  +
call sub_100CFE9  +
test al al +
jnz loc_10064A9  +
call sub_1006110  +
mov ecx dword_10100C8 +
cmp ecx ebx +
jz loc_10064BF  +
push esi  +
call sub_10061E2  +
mov dword_10100C8 ebx +
push offset dword_1010088  +
call sub_100628B  +
cmp [ebp+var_205] bl +
jz loc_10064D7  +
call ds:CoUninitialize  +
cmp edi ebx +
jz loc_10064E2  +
push edi  +
call ds:CloseHandle  +
mov eax esi +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100E5C6  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
push 64h  +
xor edx edx +
pop esi  +
div  esi +
pop esi  +
test al 1 +
jnz loc_1006567  +
mov eax 708h +
cmp [ebp+arg_0] eax +
jnb loc_1006540  +
mov dword ptr [ecx] 3E8h +
mov dword ptr [ecx+4] 4B0h +
mov dword ptr [ecx+8] 578h +
mov dword ptr [ecx+0Ch] 640h +
mov [ecx+10h] eax +
mov dword ptr [ecx+14h] 7D0h +
jmp loc_1006590  +
mov dword ptr [ecx] 4B0h +
mov dword ptr [ecx+4] 578h +
mov dword ptr [ecx+8] 640h +
mov [ecx+0Ch] eax +
mov dword ptr [ecx+10h] 7D0h +
mov dword ptr [ecx+14h] 898h +
jmp loc_1006590  +
mov dword ptr [ecx] 44Ch +
mov dword ptr [ecx+4] 514h +
mov dword ptr [ecx+8] 5DCh +
mov dword ptr [ecx+0Ch] 6A4h +
mov dword ptr [ecx+10h] 76Ch +
mov dword ptr [ecx+14h] 834h +
mov eax ecx +
pop ebp  +
retn 4  +
***
pop eax  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [ecx+eax*4] +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx offset dword_10016AC +
xor al al +
sub ecx edx +
push esi  +
test al al +
jnz loc_10065E7  +
mov esi [ebp+arg_0] +
cmp esi [ecx+edx] +
jnz loc_10065DC  +
mov eax [edx] +
mov esi [ebp+arg_4] +
mov [esi] eax +
mov al 1 +
add edx 4 +
cmp edx offset dword_10016C4 +
jl loc_10065C7  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov edx offset dword_10016AC +
xor al al +
xor esi esi +
push edi  +
sub edx ecx +
test al al +
jnz loc_1006621  +
mov edi [ebp+arg_0] +
cmp edi [edx+ecx] +
jnz loc_1006618  +
mov eax [ecx] +
mov edi [ebp+arg_4] +
mov [edi] eax +
mov al 1 +
inc esi  +
add ecx 4 +
cmp esi 6 +
jl loc_1006603  +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax ds:dword_10016C4[eax*4] +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax ds:dword_10016AC[eax*4] +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor al al +
xor ecx ecx +
test al al +
jnz loc_1006689  +
mov edx [ebp+arg_0] +
cmp edx ds:dword_10016C4[ecx] +
jnz loc_1006681  +
mov eax ds:dword_10016AC[ecx] +
mov edx [ebp+arg_4] +
mov [edx] eax +
mov al 1 +
add ecx 4 +
cmp ecx 18h +
jl loc_1006665  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor al al +
xor ecx ecx +
test al al +
jnz loc_10066BF  +
mov edx [ebp+arg_0] +
cmp edx ds:dword_10016AC[ecx] +
jnz loc_10066B7  +
mov eax ds:dword_10016C4[ecx] +
mov edx [ebp+arg_4] +
mov [edx] eax +
mov al 1 +
add ecx 4 +
cmp ecx 18h +
jl loc_100669B  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor al al +
xor ecx ecx +
test al al +
jnz loc_10066F5  +
mov edx [ebp+arg_0] +
cmp edx ds:dword_10016AC[ecx] +
jnz loc_10066ED  +
mov eax ds:dword_10016DC[ecx] +
mov edx [ebp+arg_4] +
mov [edx] eax +
mov al 1 +
add ecx 4 +
cmp ecx 18h +
jl loc_10066D1  +
pop ebp  +
retn 8  +
***
pop eax  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax ds:dword_10016F4[eax*4] +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor al al +
xor ecx ecx +
test al al +
jnz loc_100674C  +
mov edx [ebp+arg_0] +
cmp edx ds:dword_10016F4[ecx] +
jnz loc_1006744  +
mov eax ds:dword_10016AC[ecx] +
mov edx [ebp+arg_4] +
mov [edx] eax +
mov al 1 +
add ecx 4 +
cmp ecx 0Ch +
jl loc_1006728  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor al al +
xor ecx ecx +
test al al +
jnz loc_1006782  +
mov edx [ebp+arg_0] +
cmp edx ds:dword_10016AC[ecx] +
jnz loc_100677A  +
mov eax ds:dword_10016F4[ecx] +
mov edx [ebp+arg_4] +
mov [edx] eax +
mov al 1 +
add ecx 4 +
cmp ecx 0Ch +
jl loc_100675E  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 204h +
mov eax dword_1010060 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
push edi  +
mov edi [ebp+hWnd] +
push 0FFFFFFEBh  +
push edi  +
call ds:GetWindowLongW  +
mov esi eax +
mov eax [ebp+arg_4] +
dec eax  +
dec eax  +
jz loc_10068D9  +
sub eax 10Eh +
jz loc_100684D  +
dec eax  +
jz loc_1006831  +
dec eax  +
dec eax  +
jnz loc_10067F6  +
cmp [ebp+arg_8] 18h +
jnz loc_10068F6  +
push dword ptr [esi+200h]  +
lea eax [ebp+String] +
push esi  +
push 200h  +
push eax  +
call sub_1003A0B  +
add esp 10h +
test eax eax +
jge loc_10067FD  +
xor eax eax +
jmp loc_10068F9  +
mov eax [esi+200h] +
lea ecx [eax-1] +
mov [esi+200h] ecx +
test eax eax +
jg loc_1006819  +
push 7  +
push edi  +
call ds:EndDialog  +
lea eax [ebp+String] +
push eax  +
push 432h  +
push edi  +
call ds:SetDlgItemTextW  +
jmp loc_10068F6  +
movzx eax word ptr [ebp+arg_8] +
dec eax  +
jz loc_1006849  +
dec eax  +
jnz loc_10067F6  +
push 7  +
push edi  +
call ds:EndDialog  +
jmp loc_10068F6  +
push 6  +
jmp loc_100683D  +
push 204h  +
push 8  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov esi eax +
test esi esi +
jz loc_10067F6  +
push esi  +
push 0FFFFFFEBh  +
push edi  +
call ds:SetWindowLongW  +
push 100h  +
push esi  +
push 76h  +
push hInstance  +
call ds:LoadStringW  +
test eax eax +
jz loc_10067F6  +
push 14h  +
pop eax  +
push eax  +
push esi  +
mov [esi+200h] eax +
lea eax [ebp+String] +
push 200h  +
push eax  +
call sub_1003A0B  +
add esp 10h +
test eax eax +
jl loc_10067F6  +
lea eax [ebp+String] +
push eax  +
push 432h  +
push edi  +
call ds:SetDlgItemTextW  +
push 0  +
push 3E8h  +
push 18h  +
push edi  +
call ds:SetTimer  +
jmp loc_10068F6  +
push 18h  +
push edi  +
call ds:KillTimer  +
test esi esi +
jz loc_10068F6  +
push esi  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
xor eax eax +
inc eax  +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_100E5C6  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push offset DialogFunc  +
push [ebp+hWndParent]  +
push 9  +
push hInstance  +
call ds:DialogBoxParamW  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax ecx +
mov ecx [ebp+arg_0] +
mov [eax+8] ecx +
xor ecx ecx +
mov dword ptr [eax] offset off_1001700 +
mov [eax+0Ch] ecx +
mov [eax+10h] ecx +
mov [eax+18h] ecx +
mov [eax+1Ch] ecx +
pop ebp  +
retn 4  +
***
and dword ptr [ecx+8] 0 +
mov dword ptr [ecx] offset off_1001700 +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
and dword ptr [eax] 0 +
mov al 1 +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
call ds:GetTickCount64  +
mov [esi+18h] eax +
mov [esi+1Ch] edx +
pop esi  +
retn   +
***
movzx eax word ptr [ecx+210h] +
movzx edx word ptr [ecx+8] +
cmp ax dx +
jnz loc_10069BB  +
push esi  +
mov si [ecx+212h] +
cmp si [ecx+0Ah] +
pop esi  +
jz loc_10069CA  +
cmp ax [ecx+0Ah] +
jnz loc_10069CE  +
cmp [ecx+212h] dx +
jnz loc_10069CE  +
xor eax eax +
inc eax  +
retn   +
xor eax eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
and dword ptr [esi+8] 0 +
test byte ptr [ebp+8] 1 +
mov dword ptr [esi] offset off_1001700 +
jz loc_10069F5  +
push esi  +
call sub_100E22D  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov ecx [esi+0Ch] +
test ecx ecx +
jnz loc_1006A11  +
xor al al +
pop esi  +
retn   +
movzx eax word ptr [ecx+24h] +
push eax  +
call sub_1002631  +
mov [esi+10h] eax +
test eax eax +
jz loc_1006A0D  +
mov ecx esi +
call sub_1006984  +
mov al 1 +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx+0Ch] +
mov eax [eax+10h] +
push dword ptr [eax+1Ch]  +
push [ebp+arg_0]  +
call ds:SetTextColor  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push ebx  +
push esi  +
push edi  +
mov ebx ecx +
push 7  +
xor eax eax +
pop ecx  +
lea edi [ebp+var_1C] +
stos   +
mov eax [ebp+arg_0] +
xor esi esi +
inc esi  +
mov [ebp+var_1C] eax +
mov [ebp+var_20] esi +
call ds:GetTickCount64  +
sub eax [ebx+18h] +
xor edx edx +
mov ecx 3E8h +
div  ecx +
mov [ebp+var_18] esi +
mov [ebp+var_10] esi +
mov [ebp+var_8] esi +
mov [ebp+var_14] eax +
mov eax [ebp+arg_8] +
mov [ebp+var_C] eax +
mov eax [ebp+arg_4] +
mov [ebp+var_4] eax +
lea eax [ebp+var_20] +
push eax  +
push 4  +
push 0E69h  +
push 0  +
call WinSqmAddToStream  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov ecx [ecx+0Ch] +
movzx eax word ptr [ecx+24h] +
push eax  +
call sub_1002631  +
test eax eax +
jnz loc_1006AD1  +
xor al al +
retn   +
push esi  +
mov esi [eax] +
test esi esi +
jnz loc_1006ADC  +
xor al al +
pop esi  +
retn   +
cmp dword ptr [esi+4] 0 +
jz loc_1006AFA  +
mov ecx esi +
call sub_100699C  +
test al al +
jnz loc_1006AF5  +
cmp [esi+42Ah] al +
jz loc_1006AFA  +
xor eax eax +
inc eax  +
pop esi  +
retn   +
xor eax eax +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax+1Ch] +
mov [ecx+0Ch] eax +
test eax eax +
jnz loc_1006B19  +
xor al al +
jmp loc_1006B1E  +
call sub_1006A01  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_1006934  +
mov dword ptr [esi] offset off_1001710 +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_1001710 +
call sub_100695E  +
test byte ptr [ebp+8] 1 +
jz loc_1006B69  +
push esi  +
call sub_100E22D  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
call sub_1006ABD  +
xor ecx ecx +
test al al +
mov eax [ebp+8] +
setnz cl  +
lea ecx ds:8[ecx*8] +
mov [eax] ecx +
mov al 1 +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 220h +
mov eax dword_1010060 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push edi  +
mov [ebp+hWnd] eax +
mov edi ecx +
mov ecx [edi+0Ch] +
lea eax [ebp+var_21C] +
push eax  +
call sub_10025E9  +
test al al +
jz loc_1006CA0  +
push ebx  +
mov ebx ds:SendMessageW +
push esi  +
xor eax eax +
xor esi esi +
cmp ax word ptr [ebp+var_21C] +
jnb loc_1006C8B  +
mov ecx [edi+0Ch] +
push esi  +
call sub_1002631  +
test eax eax +
jz loc_1006CAF  +
mov ecx [eax] +
test ecx ecx +
jz loc_1006CAF  +
movzx eax si +
mov [ebp+lParam] eax +
mov eax [ecx+420h] +
mov [ebp+var_214] eax +
mov eax [ecx+424h] +
mov [ebp+var_210] eax +
mov ax [ecx+210h] +
mov [ebp+var_20A] ax +
mov ax [ecx+212h] +
mov [ebp+var_20C] ax +
mov al [ecx+428h] +
mov [ebp+var_208] al +
push 100h  +
lea eax [ebp+Buffer] +
push eax  +
call sub_10093D3  +
test eax eax +
jl loc_1006CAF  +
lea eax [ebp+lParam] +
push eax  +
push 0  +
push 401h  +
push [ebp+hWnd]  +
call ebx  +
inc esi  +
cmp si word ptr [ebp+var_21C] +
jb loc_1006BEE  +
push 0  +
push 0  +
push 402h  +
push [ebp+hWnd]  +
call ebx  +
mov al 1 +
pop esi  +
pop ebx  +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop edi  +
call sub_100E5C6  +
leave   +
retn 4  +
xor al al +
jmp loc_1006C9E  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 228h +
mov eax dword_1010060 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push edi  +
mov edi ecx +
mov ecx [edi+0Ch] +
mov [ebp+hWnd] eax +
lea eax [ebp+var_220] +
push eax  +
mov [ebp+var_228] edi +
call sub_10025E9  +
test al al +
jz loc_1006D21  +
and [ebp+var_21C] 0 +
push ebx  +
xor eax eax +
push esi  +
mov esi ds:SendMessageW +
cmp ax word ptr [ebp+var_220] +
jb loc_1006D36  +
push 0  +
push 0  +
push 402h  +
push [ebp+hWnd]  +
call esi  +
mov al 1 +
pop esi  +
pop ebx  +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop edi  +
call sub_100E5C6  +
leave   +
retn 4  +
mov edi [ebp+var_228] +
mov edi [edi+0Ch] +
push [ebp+var_21C]  +
mov ecx edi +
call sub_1002631  +
mov ebx eax +
test ebx ebx +
jz loc_1006DED  +
mov eax [ebx] +
test eax eax +
jz loc_1006DED  +
movzx edi word ptr [ebp+var_21C] +
mov [ebp+var_218] edi +
mov ecx [eax+420h] +
mov [ebp+var_214] ecx +
mov ecx [eax+424h] +
mov [ebp+var_210] ecx +
mov cx [eax+210h] +
mov [ebp+var_20A] cx +
mov ax [eax+212h] +
mov [ebp+var_20C] ax +
lea eax [ebp+var_218] +
push eax  +
push 0  +
push 409h  +
push [ebp+hWnd]  +
call esi  +
cmp byte ptr [ebx+0Ch] 0 +
push edi  +
push 0  +
jz loc_1006DC1  +
push 40Ah  +
jmp loc_1006DC6  +
push 40Bh  +
push [ebp+hWnd]  +
call esi  +
inc [ebp+var_21C]  +
mov ax word ptr [ebp+var_21C] +
cmp ax word ptr [ebp+var_220] +
jb loc_1006D30  +
jmp loc_1006D0C  +
xor al al +
jmp loc_1006D1F  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
mov ecx [esi+0Ch] +
mov eax [ecx+10h] +
cmp byte ptr [eax+20h] 0 +
jz loc_1006E33  +
lea eax [ebp+var_4] +
push eax  +
call sub_10026A7  +
test al al +
jnz loc_1006E1F  +
inc al  +
jmp loc_1006E44  +
mov eax [esi+0Ch] +
mov ax [eax+26h] +
xor ecx ecx +
cmp ax word ptr [ebp+var_4] +
setz cl  +
mov al cl +
jmp loc_1006E44  +
mov eax ecx +
mov ecx [eax+10h] +
movzx eax word ptr [eax+24h] +
sub eax [ecx+24h] +
neg eax  +
sbb eax eax +
inc eax  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx+10h] +
cmp byte ptr [eax+0Ch] 0 +
mov eax [ebp+8] +
jz loc_1006E62  +
and dword ptr [eax] 0 +
jmp loc_1006E68  +
mov dword ptr [eax] 0Ch +
mov al 1 +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 308h +
mov eax dword_1010060 +
xor eax ebp +
mov [ebp-4] eax +
mov eax [ebp+10h] +
push ebx  +
mov ebx [ebp+14h] +
push esi  +
push edi  +
mov edi [ebp+8] +
push 0FFFFFFEBh  +
push edi  +
mov [ebp-308h] eax +
call ds:GetWindowLongW  +
mov esi eax +
mov eax [ebp+0Ch] +
dec eax  +
dec eax  +
jz loc_100710D  +
sub eax 4Ch +
jz loc_1006F60  +
sub eax 0C2h +
jz loc_1006F02  +
sub eax 28h +
jz loc_1006EE3  +
sub eax 1E2h +
jnz loc_1006F20  +
mov eax [esi+0Ch] +
mov ecx [eax+10h] +
call sub_10022DF  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+0Ch]  +
jmp loc_1007119  +
push 404h  +
push edi  +
call ds:GetDlgItem  +
cmp ebx eax +
jnz loc_1006F20  +
push dword ptr [ebp-308h]  +
mov ecx esi +
call sub_1006A32  +
jmp loc_1006F20  +
push 20h  +
call loc_100E1BE  +
pop ecx  +
test eax eax +
jz loc_1006F1A  +
push edi  +
mov ecx eax +
call sub_1006B27  +
mov esi eax +
jmp loc_1006F1C  +
xor esi esi +
test esi esi +
jnz loc_1006F27  +
xor eax eax +
jmp loc_100711C  +
push esi  +
push 0FFFFFFEBh  +
push edi  +
call ds:SetWindowLongW  +
push ebx  +
mov ecx esi +
call sub_1006B03  +
test al al +
jnz loc_1006F47  +
mov eax [esi] +
push 1  +
mov ecx esi +
call dword ptr [eax]  +
jmp loc_1006F20  +
***
push 43Ah  +
push edi  +
call ds:GetDlgItem  +
push eax  +
mov ecx esi +
call sub_1006B9D  +
jmp loc_1007119  +
mov ebx [ebx+8] +
cmp ebx 0FFFFFF2Fh +
jz loc_10070E9  +
cmp ebx 0FFFFFF30h +
jz loc_100706C  +
cmp ebx 0FFFFFF31h +
jz loc_1007033  +
cmp ebx 0FFFFFF32h +
jz loc_1006FFC  +
cmp ebx 0FFFFFF38h +
jnz loc_1006F20  +
and dword ptr [ebp-308h] 0 +
mov ecx esi +
call sub_1006A01  +
test al al +
jz loc_1006F20  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+0Ch]  +
mov ecx esi +
call sub_1006DF9  +
test al al +
jz loc_1006FDA  +
mov ecx [esi+0Ch] +
push 5  +
pop ebx  +
call sub_10029FA  +
test al al +
jz loc_1006FDD  +
mov dword ptr [ebp-308h] 1 +
jmp loc_1006FDD  +
push 3  +
pop ebx  +
push ebx  +
push dword ptr [ebp-308h]  +
push 470h  +
push edi  +
call ds:GetParent  +
push eax  +
call ds:SendMessageW  +
jmp loc_1006F20  +
***
push 3  +
push 0  +
push 0Fh  +
mov ecx esi +
call sub_1006A52  +
mov eax [esi] +
lea ecx [ebp-308h] +
push ecx  +
mov ecx esi +
call dword ptr [eax+8]  +
test al al +
jz loc_1007119  +
push dword ptr [ebp-308h]  +
push 0  +
push edi  +
call ds:SetWindowLongW  +
jmp loc_1007119  +
push 2  +
push 0  +
push 0Fh  +
mov ecx esi +
call sub_1006A52  +
mov eax [esi+10h] +
mov ecx [eax+4] +
push edi  +
call sub_100C959  +
mov ecx [esi+0Ch] +
call sub_100266B  +
mov ecx [esi+0Ch] +
call sub_100296F  +
mov eax [esi] +
lea ecx [ebp-308h] +
push ecx  +
mov ecx esi +
call dword ptr [eax+4]  +
jmp loc_1007017  +
***
push 4  +
xor ebx ebx +
push ebx  +
push 0Fh  +
mov ecx esi +
call sub_1006A52  +
push ebx  +
push ebx  +
push edi  +
call ds:SetWindowLongW  +
mov ecx [esi+0Ch] +
call sub_1002A75  +
test al al +
jnz loc_1007119  +
mov esi ds:LoadStringW +
push 80h  +
lea eax [ebp-104h] +
push eax  +
push 66h  +
push hInstance  +
call esi  +
test eax eax +
jz loc_1007119  +
push 100h  +
lea eax [ebp-304h] +
push eax  +
push 77h  +
push hInstance  +
call esi  +
test eax eax +
jz loc_1007119  +
push 30h  +
lea eax [ebp-104h] +
push eax  +
lea eax [ebp-304h] +
push eax  +
push edi  +
call ds:MessageBoxW  +
jmp loc_1006F20  +
***
push 1  +
xor ebx ebx +
push ebx  +
push 0Fh  +
mov ecx esi +
call sub_1006A52  +
push ebx  +
push ebx  +
push edi  +
call ds:SetWindowLongW  +
mov eax [esi+10h] +
mov ecx [eax+4] +
call sub_100C9D3  +
jmp loc_1007119  +
test esi esi +
jz loc_1007119  +
mov eax [esi] +
push 1  +
mov ecx esi +
call dword ptr [eax]  +
xor eax eax +
inc eax  +
mov ecx [ebp-4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100E5C6  +
leave   +
retn 10h  +
***
push ebp  +
mov ebp esp +
sub esp 208h +
mov eax dword_1010060 +
xor eax ebp +
mov [ebp-4] eax +
push ebx  +
push esi  +
push edi  +
mov esi ecx +
call sub_1006DF9  +
test al al +
jz loc_10071ED  +
mov ecx [esi+0Ch] +
lea eax [ebp-205h] +
push eax  +
call sub_1002606  +
test al al +
jnz loc_1007173  +
xor al al +
jmp loc_1007219  +
cmp byte ptr [ebp-205h] 0 +
jz loc_10071DA  +
mov eax [esi+0Ch] +
mov eax [eax+10h] +
cmp byte ptr [eax+20h] 0 +
jz loc_10071DA  +
push 100h  +
lea eax [ebp-204h] +
push eax  +
push 68h  +
push hInstance  +
call ds:LoadStringW  +
test eax eax +
jz loc_100716C  +
lea eax [ebp-204h] +
push eax  +
push 404h  +
push dword ptr [esi+8]  +
call ds:SetDlgItemTextW  +
mov edi ds:GetDlgItem +
push 5  +
push 43Ah  +
push dword ptr [esi+8]  +
call edi  +
mov ebx ds:ShowWindow +
push eax  +
call ebx  +
push 0  +
jmp loc_100720A  +
push 100h  +
lea eax [ebp-204h] +
push eax  +
push 81h  +
jmp loc_1007196  +
***
mov edi ds:GetDlgItem +
push 0  +
push 43Ah  +
push dword ptr [esi+8]  +
call edi  +
mov ebx ds:ShowWindow +
push eax  +
call ebx  +
push 5  +
push 41Eh  +
push dword ptr [esi+8]  +
call edi  +
push eax  +
call ebx  +
mov al 1 +
mov ecx [ebp-4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100E5C6  +
leave   +
retn   +
***
push eax  +
mov ecx esi +
call sub_1006CB8  +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_1006934  +
mov dword ptr [esi] offset off_1001720 +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_1001720 +
call sub_100695E  +
test byte ptr [ebp+8] 1 +
jz loc_10072D2  +
push esi  +
call sub_100E22D  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
movzx esi [ebp+arg_0] +
neg esi  +
push edi  +
mov edi ds:GetDlgItem +
sbb esi esi +
and esi 5 +
push esi  +
push 43Dh  +
push dword ptr [ecx+8]  +
mov [ebp+var_4] ecx +
call edi  +
mov ebx ds:ShowWindow +
push eax  +
call ebx  +
mov eax [ebp+var_4] +
push esi  +
push 43Bh  +
push dword ptr [eax+8]  +
call edi  +
push eax  +
call ebx  +
mov eax [ebp+var_4] +
push esi  +
push 43Ch  +
push dword ptr [eax+8]  +
call edi  +
push eax  +
call ebx  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
mov ecx [esi+0Ch] +
lea eax [ebp-1] +
push eax  +
call sub_1002606  +
test al al +
jz loc_1007383  +
cmp byte ptr [ebp-1] 0 +
jz loc_1007367  +
mov eax [ebp+8] +
mov dword ptr [eax] 0Ch +
jmp loc_1007381  +
mov ecx esi +
call sub_1006ABD  +
xor ecx ecx +
test al al +
mov eax [ebp+8] +
setnz cl  +
lea ecx ds:8[ecx*8] +
mov [eax] ecx +
mov al 1 +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 438h +
mov eax dword_1010060 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
push 200h  +
lea eax [ebp+String] +
push eax  +
push 6Ah  +
push hInstance  +
mov esi ecx +
call ds:LoadStringW  +
test eax eax +
jnz loc_10073CA  +
xor al al +
jmp loc_10074F7  +
push ebx  +
lea eax [ebp+Rect] +
push eax  +
mov ebx 407h +
push ebx  +
push dword ptr [esi+8]  +
call ds:GetDlgItem  +
push eax  +
call ds:GetClientRect  +
test eax eax +
jz loc_1007486  +
push 0Ah  +
pop eax  +
mov [ebp+var_410] eax +
mov [ebp+var_418] eax +
lea eax [ebp+var_418] +
push eax  +
push dword ptr [esi+8]  +
mov [ebp+var_414] 5 +
mov [ebp+var_40C] 4 +
call ds:MapDialogRect  +
test eax eax +
jz loc_1007486  +
mov ecx [ebp+var_418] +
mov eax [ebp+Rect.left] +
push dword ptr [esi+8]  +
add eax ecx +
mov ecx [ebp+Rect.top] +
mov [ebp+var_438] eax +
mov eax [ebp+var_414] +
add ecx eax +
mov eax [ebp+Rect.right] +
sub eax [ebp+var_410] +
mov [ebp+var_434] ecx +
mov [ebp+var_430] eax +
mov eax [ebp+Rect.bottom] +
sub eax [ebp+var_40C] +
mov [ebp+var_42C] eax +
call ds:GetDC  +
mov [ebp+hDC] eax +
test eax eax +
jnz loc_100748A  +
xor al al +
jmp loc_10074F6  +
mov eax [esi+0Ch] +
mov eax [eax+10h] +
mov ecx [eax+14h] +
mov edx [eax+10h] +
mov eax [eax] +
push edi  +
push ecx  +
push edx  +
lea ecx [ebp+String] +
push ecx  +
lea ecx [ebp+var_438] +
push ecx  +
lea ecx [ebp+Rect] +
push ecx  +
push eax  +
push [ebp+hDC]  +
call sub_100C157  +
mov edi ds:SendDlgItemMessageW +
push eax  +
push 0  +
push 401h  +
push ebx  +
push dword ptr [esi+8]  +
call edi  +
lea eax [ebp+String] +
push eax  +
push 0  +
push 405h  +
push ebx  +
push dword ptr [esi+8]  +
call edi  +
push [ebp+hDC]  +
push dword ptr [esi+8]  +
call ds:ReleaseDC  +
mov al 1 +
pop edi  +
pop ebx  +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop esi  +
call sub_100E5C6  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push ebx  +
push esi  +
push edi  +
mov edi ds:SendDlgItemMessageW +
mov esi ecx +
mov eax [esi+0Ch] +
mov eax [eax+10h] +
push 1  +
push dword ptr [eax+8]  +
push 30h  +
push 404h  +
push dword ptr [esi+8]  +
call edi  +
mov eax [esi+0Ch] +
mov eax [eax+10h] +
push 1  +
push dword ptr [eax+4]  +
mov ebx 3F9h +
push 30h  +
push ebx  +
push dword ptr [esi+8]  +
call edi  +
mov eax [esi+0Ch] +
mov eax [eax+10h] +
push 1  +
push dword ptr [eax+4]  +
push 30h  +
push 43Bh  +
push dword ptr [esi+8]  +
call edi  +
mov eax [esi+10h] +
mov eax [eax+4] +
xor ecx ecx +
cmp [eax+4] ecx +
jz loc_1007575  +
cmp dword ptr [eax+14h] 2 +
jz loc_10075E5  +
mov eax [esi+0Ch] +
mov eax [eax+10h] +
cmp [eax+28h] cl +
jz loc_10075E5  +
push 0Ah  +
pop eax  +
mov [ebp-8] eax +
mov [ebp-0Ch] eax +
lea eax [ebp-14h] +
push eax  +
push dword ptr [esi+8]  +
mov [ebp-10h] ecx +
mov [ebp-14h] ecx +
call ds:MapDialogRect  +
test eax eax +
jz loc_10075CE  +
lea eax [ebp-4] +
push eax  +
push dword ptr [ebp-8]  +
push dword ptr [ebp-0Ch]  +
push 7F04h  +
push 0  +
call ds:COMCTL32_381  +
test eax eax +
jnz loc_10075CE  +
push eax  +
push dword ptr [ebp-4]  +
push 170h  +
push 43Ch  +
push dword ptr [esi+8]  +
call edi  +
push 0  +
push ebx  +
push dword ptr [esi+8]  +
call ds:GetDlgItem  +
push eax  +
call ds:EnableWindow  +
push 1  +
jmp loc_10075FA  +
push 1  +
push ebx  +
push dword ptr [esi+8]  +
call ds:GetDlgItem  +
push eax  +
call ds:EnableWindow  +
push 0  +
mov ecx esi +
call sub_10072DE  +
mov ecx esi +
call sub_100738D  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+8] +
push esi  +
push edi  +
push 0FFFFFFEBh  +
push ebx  +
call ds:GetWindowLongW  +
mov esi eax +
mov eax [ebp+0Ch] +
dec eax  +
dec eax  +
jz loc_1007829  +
sub eax 4Ch +
jz loc_100775F  +
sub eax 0C2h +
jz loc_1007713  +
dec eax  +
jz loc_1007695  +
sub eax 27h +
jz loc_1007671  +
sub eax 1E2h +
jnz loc_1007731  +
mov eax [esi+0Ch] +
mov ecx [eax+10h] +
call sub_10022DF  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+0Ch]  +
jmp loc_1007835  +
push 404h  +
push ebx  +
call ds:GetDlgItem  +
cmp [ebp+14h] eax +
jnz loc_1007731  +
push dword ptr [ebp+10h]  +
mov ecx esi +
call sub_1006A32  +
jmp loc_1007731  +
mov eax [ebp+10h] +
mov edi 3F9h +
mov ecx edi +
cmp ax cx +
jnz loc_1007731  +
shr eax 10h +
test ax ax +
jnz loc_1007835  +
push edi  +
push ebx  +
call ds:IsDlgButtonChecked  +
xor edi edi +
inc edi  +
cmp eax edi +
mov eax [esi+10h] +
mov ecx [eax+4] +
push edi  +
jz loc_10076D2  +
call sub_100CA10  +
push edi  +
jmp loc_10076D9  +
call sub_100CA10  +
push 2  +
mov eax [esi+10h] +
mov ecx [eax+4] +
call sub_100CA4F  +
push 0  +
push ebx  +
push 468h  +
push ebx  +
call ds:GetParent  +
push eax  +
call ds:SendMessageW  +
mov eax [esi+10h] +
mov ecx [eax+4] +
push 0  +
call sub_100C929  +
mov ecx esi +
call sub_100738D  +
jmp loc_1007835  +
push 20h  +
call loc_100E1BE  +
pop ecx  +
test eax eax +
jz loc_100772B  +
push ebx  +
mov ecx eax +
call sub_1007290  +
mov esi eax +
jmp loc_100772D  +
xor esi esi +
test esi esi +
jnz loc_1007738  +
xor eax eax +
jmp loc_1007838  +
push dword ptr [ebp+14h]  +
mov ecx esi +
call sub_1006B03  +
test al al +
jnz loc_1007750  +
mov eax [esi] +
push 1  +
mov ecx esi +
call dword ptr [eax]  +
jmp loc_1007731  +
***
push esi  +
push 0FFFFFFEBh  +
push ebx  +
call ds:SetWindowLongW  +
jmp loc_1007835  +
mov eax [ebp+14h] +
mov eax [eax+8] +
cmp eax 0FFFFFF2Fh +
jz loc_100780F  +
cmp eax 0FFFFFF31h +
jz loc_10077CC  +
cmp eax 0FFFFFF38h +
jnz loc_1007731  +
mov ecx esi +
call sub_1006A01  +
test al al +
jz loc_1007731  +
push 2  +
xor edi edi +
push edi  +
push 470h  +
push ebx  +
call ds:GetParent  +
push eax  +
call ds:PostMessageW  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+0Ch]  +
mov eax [esi+10h] +
mov eax [eax+4] +
cmp [eax+4] edi +
jz loc_10077BD  +
cmp dword ptr [eax+14h] 2 +
jnz loc_10077BD  +
push 1  +
jmp loc_10077BE  +
push edi  +
push 3F9h  +
push ebx  +
call ds:CheckDlgButton  +
jmp loc_1007835  +
mov ecx [esi+0Ch] +
call sub_100280E  +
mov edi 3F9h +
push edi  +
push ebx  +
call ds:IsDlgButtonChecked  +
push 2  +
mov ecx esi +
cmp eax 1 +
jnz loc_10077ED  +
push edi  +
jmp loc_10077EF  +
push 0  +
push 0Eh  +
call sub_1006A52  +
mov eax [esi] +
lea ecx [ebp+14h] +
push ecx  +
mov ecx esi +
call dword ptr [eax+4]  +
test al al +
jz loc_1007835  +
push dword ptr [ebp+14h]  +
push 0  +
jmp loc_1007753  +
***
push 1  +
push 0  +
push 0Eh  +
mov ecx esi +
call sub_1006A52  +
mov eax [esi+10h] +
mov ecx [eax+4] +
call sub_100C9D3  +
jmp loc_1007835  +
test esi esi +
jz loc_1007835  +
mov eax [esi] +
push 1  +
mov ecx esi +
call dword ptr [eax]  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_1006934  +
and dword ptr [esi+20h] 0 +
mov dword ptr [esi] offset off_1001730 +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call nullsub_1  +
test [ebp+arg_0] 1 +
jz loc_1007884  +
push esi  +
call sub_100E22D  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push 18h  +
mov esi ecx +
call loc_100E1BE  +
pop ecx  +
test eax eax +
jz loc_10078B0  +
push [ebp+arg_0]  +
mov ecx eax +
call sub_10064FA  +
jmp loc_10078B2  +
xor eax eax +
mov [esi+20h] eax +
test eax eax +
setnz al  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov ecx [esi+20h] +
mov dword ptr [esi] offset off_1001730 +
test ecx ecx +
jz loc_10078DD  +
push 1  +
call sub_100786A  +
mov ecx esi +
pop esi  +
jmp sub_100695E  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_10078C4  +
test byte ptr [ebp+8] 1 +
jz loc_1007904  +
push esi  +
call sub_100E22D  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
call sub_100349F  +
mov eax [esi+10h] +
mov eax [eax+4] +
mov eax [eax+1Ch] +
lea ecx [ebp+nIDDlgItem] +
push ecx  +
mov ecx [esi+20h] +
push eax  +
call sub_10065B8  +
test al al +
jz loc_100794D  +
push 0  +
push 1  +
push 402h  +
push [ebp+nIDDlgItem]  +
push dword ptr [esi+8]  +
call ds:SendDlgItemMessageW  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 448h +
mov eax dword_1010060 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
push 200h  +
lea eax [ebp+String] +
push eax  +
push 69h  +
push hInstance  +
mov esi ecx +
call ds:LoadStringW  +
test eax eax +
jnz loc_1007992  +
xor al al +
jmp loc_1007BC6  +
push ebx  +
push edi  +
mov edi ds:SystemParametersInfoW +
xor ebx ebx +
push ebx  +
lea eax [ebp+pvParam] +
push eax  +
push ebx  +
push 4Ah  +
call edi  +
test eax eax +
jz loc_1007BBE  +
cmp [ebp+pvParam] ebx +
jnz loc_10079C9  +
push ebx  +
push ebx  +
push 1  +
push 4Bh  +
call edi  +
test eax eax +
jz loc_1007BBE  +
push ebx  +
lea eax [ebp+var_40C] +
push eax  +
push ebx  +
push 200Ah  +
call edi  +
test eax eax +
jz loc_1007BBE  +
cmp [ebp+var_40C] 2 +
jz loc_10079FD  +
push ebx  +
push 2  +
push ebx  +
push 200Bh  +
call edi  +
test eax eax +
jz loc_1007BBE  +
push ebx  +
lea eax [ebp+var_428] +
push eax  +
push ebx  +
push 200Ch  +
call edi  +
test eax eax +
jz loc_1007BBE  +
push 4  +
pop eax  +
mov [ebp+Rect.left] eax +
mov [ebp+Rect.right] eax +
lea eax [ebp+Rect] +
push eax  +
push dword ptr [esi+8]  +
mov [ebp+Rect.top] 5 +
mov [ebp+Rect.bottom] 2 +
call ds:MapDialogRect  +
test eax eax +
jz loc_1007BBE  +
push dword ptr [esi+8]  +
call ds:GetDC  +
mov [ebp+hDC] eax +
cmp eax ebx +
jz loc_1007BBE  +
mov ecx [esi+20h] +
mov [ebp+var_408] ebx +
call sub_100659B  +
test eax eax +
jle loc_1007B71  +
mov ecx [esi+20h] +
lea eax [ebp+var_438] +
push eax  +
push [ebp+var_408]  +
call sub_1006644  +
push eax  +
push dword ptr [esi+8]  +
call ds:GetDlgItem  +
push eax  +
call ds:GetClientRect  +
mov ecx [ebp+Rect.left] +
mov eax [ebp+var_438] +
add eax ecx +
mov ecx [ebp+var_434] +
mov [ebp+var_448] eax +
mov eax [ebp+Rect.top] +
add ecx eax +
mov eax [ebp+var_430] +
sub eax [ebp+Rect.right] +
push ebx  +
push [ebp+var_408]  +
mov [ebp+var_440] eax +
mov eax [ebp+var_42C] +
sub eax [ebp+Rect.bottom] +
mov [ebp+var_444] ecx +
mov ecx [esi+20h] +
mov [ebp+var_43C] eax +
call sub_10065A4  +
push eax  +
push ebx  +
push 200Dh  +
call edi  +
mov eax [esi+0Ch] +
mov eax [eax+10h] +
mov ecx [eax+14h] +
mov edx [eax+10h] +
mov eax [eax] +
push ecx  +
push edx  +
lea ecx [ebp+String] +
push ecx  +
lea ecx [ebp+var_448] +
push ecx  +
lea ecx [ebp+var_438] +
push ecx  +
push eax  +
push [ebp+hDC]  +
call sub_100C157  +
mov ecx [esi+20h] +
push eax  +
push ebx  +
push 401h  +
push [ebp+var_408]  +
call sub_1006644  +
push eax  +
push dword ptr [esi+8]  +
call ds:SendDlgItemMessageW  +
mov ecx [esi+20h] +
inc [ebp+var_408]  +
call sub_100659B  +
cmp [ebp+var_408] eax +
jl loc_1007A7D  +
push [ebp+hDC]  +
push dword ptr [esi+8]  +
call ds:ReleaseDC  +
push ebx  +
push [ebp+var_428]  +
push ebx  +
push 200Dh  +
call edi  +
cmp [ebp+pvParam] ebx +
jnz loc_1007BA2  +
push ebx  +
push ebx  +
push ebx  +
push 4Bh  +
call edi  +
test eax eax +
jz loc_1007BBE  +
cmp [ebp+var_40C] 2 +
jz loc_1007BC2  +
push ebx  +
push [ebp+var_40C]  +
push ebx  +
push 200Bh  +
call edi  +
test eax eax +
jnz loc_1007BC2  +
xor al al +
jmp loc_1007BC4  +
mov al 1 +
pop edi  +
pop ebx  +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop esi  +
call sub_100E5C6  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
mov ebx [ebp+8] +
push esi  +
push edi  +
push 0FFFFFFEBh  +
push ebx  +
call ds:GetWindowLongW  +
mov esi eax +
mov eax [ebp+0Ch] +
dec eax  +
dec eax  +
mov [ebp-4] esi +
jz loc_1008061  +
sub eax 4Ch +
jz loc_1007E9A  +
sub eax 0C2h +
jz loc_1007E35  +
dec eax  +
jz loc_1007C60  +
sub eax 27h +
jz loc_1007C3C  +
sub eax 1E2h +
jnz loc_1007E53  +
mov eax [esi+0Ch] +
mov ecx [eax+10h] +
call sub_10022DF  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+0Ch]  +
jmp loc_100806D  +
push 404h  +
push ebx  +
call ds:GetDlgItem  +
cmp [ebp+14h] eax +
jnz loc_1007E53  +
push dword ptr [ebp+10h]  +
mov ecx esi +
call sub_1006A32  +
jmp loc_1007E53  +
mov edi [ebp+10h] +
movzx ebx di +
lea eax [ebx-3F3h] +
cmp eax 5 +
ja loc_1007E53  +
shr edi 10h +
push edi  +
call sub_100501A  +
test al al +
jz loc_1007D94  +
mov esi 3F3h +
sub ebx esi +
jz loc_1007D5B  +
dec ebx  +
jz loc_1007D32  +
dec ebx  +
jz loc_1007D13  +
dec ebx  +
jz loc_1007CF8  +
dec ebx  +
jz loc_1007CD0  +
dec ebx  +
jnz loc_100806D  +
push edi  +
call sub_10050A0  +
test al al +
jnz loc_1007D54  +
push edi  +
call sub_1005052  +
test al al +
jz loc_100806D  +
push 3F5h  +
jmp loc_1007D7F  +
push edi  +
call sub_1005086  +
test al al +
jnz loc_1007D2B  +
push edi  +
call sub_10050A0  +
test al al +
jnz loc_1007D7A  +
push edi  +
call sub_1005052  +
test al al +
jz loc_100806D  +
jmp loc_1007D65  +
push edi  +
call sub_1005086  +
test al al +
jnz loc_1007D54  +
push edi  +
call sub_1005052  +
test al al +
jz loc_100806D  +
push esi  +
jmp loc_1007D7F  +
push edi  +
call sub_10050A0  +
test al al +
jnz loc_1007D65  +
push edi  +
call sub_100506C  +
test al al +
jz loc_100806D  +
push 3F8h  +
jmp loc_1007D7F  +
push edi  +
call sub_1005086  +
test al al +
jnz loc_1007CC6  +
push edi  +
call sub_10050A0  +
test al al +
jnz loc_1007D10  +
push edi  +
call sub_100506C  +
test al al +
jz loc_100806D  +
push 3F7h  +
jmp loc_1007D7F  +
push edi  +
call sub_1005086  +
test al al +
jz loc_1007D6C  +
push 3F4h  +
jmp loc_1007D7F  +
push edi  +
call sub_100506C  +
test al al +
jz loc_100806D  +
push 3F6h  +
push dword ptr [ebp+8]  +
call ds:GetDlgItem  +
push eax  +
call ds:SetFocus  +
jmp loc_100806D  +
push 3  +
xor edi edi +
push edi  +
push 470h  +
push dword ptr [ebp+8]  +
call ds:GetParent  +
push eax  +
call ds:PostMessageW  +
mov ecx esi +
call sub_100349F  +
mov eax ebx +
mov esi 3F3h +
sub eax esi +
jz loc_1007E1E  +
dec eax  +
jz loc_1007E0F  +
dec eax  +
jz loc_1007E00  +
dec eax  +
jz loc_1007DF1  +
dec eax  +
jz loc_1007DE2  +
dec eax  +
jnz loc_100806D  +
push edi  +
push 1  +
push 402h  +
push 3F8h  +
jmp loc_1007E27  +
push edi  +
push 1  +
push 402h  +
push 3F7h  +
jmp loc_1007E27  +
push edi  +
push 1  +
push 402h  +
push 3F6h  +
jmp loc_1007E27  +
push edi  +
push 1  +
push 402h  +
push 3F5h  +
jmp loc_1007E27  +
push edi  +
push 1  +
push 402h  +
push 3F4h  +
jmp loc_1007E27  +
push edi  +
push 1  +
push 402h  +
push esi  +
push dword ptr [ebp+8]  +
call ds:SendDlgItemMessageW  +
jmp loc_100806D  +
push 28h  +
call loc_100E1BE  +
pop ecx  +
test eax eax +
jz loc_1007E4D  +
push ebx  +
mov ecx eax +
call sub_1007844  +
mov esi eax +
jmp loc_1007E4F  +
xor esi esi +
test esi esi +
jnz loc_1007E5A  +
xor eax eax +
jmp loc_1008070  +
push dword ptr [ebp+14h]  +
mov ecx esi +
call sub_1006B03  +
test al al +
jnz loc_1007E72  +
mov eax [esi] +
push 1  +
mov ecx esi +
call dword ptr [eax]  +
jmp loc_1007E53  +
***
push esi  +
push 0FFFFFFEBh  +
push ebx  +
call ds:SetWindowLongW  +
mov eax [esi+10h] +
mov eax [eax+4] +
push dword ptr [eax+1Ch]  +
mov ecx esi +
call sub_1007890  +
xor ecx ecx +
test al al +
setnz cl  +
mov eax ecx +
jmp loc_1008070  +
mov eax [ebp+14h] +
mov eax [eax+8] +
cmp eax 0FFFFFF2Fh +
jz loc_100803D  +
cmp eax 0FFFFFF31h +
jz loc_1007F26  +
cmp eax 0FFFFFF32h +
jz loc_1007EF5  +
cmp eax 0FFFFFF38h +
jnz loc_1007E53  +
mov ecx esi +
call sub_1006A01  +
test al al +
jz loc_1007E53  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+0Ch]  +
mov ecx esi +
call sub_1007910  +
push 3  +
push 0  +
push 470h  +
push ebx  +
call ds:GetParent  +
push eax  +
call ds:PostMessageW  +
jmp loc_100806D  +
push 3  +
push 0  +
push 0Dh  +
mov ecx esi +
call sub_1006A52  +
mov eax [esi] +
lea ecx [ebp+8] +
push ecx  +
mov ecx esi +
call dword ptr [eax+8]  +
test al al +
jz loc_100806D  +
push dword ptr [ebp+8]  +
push 0  +
push ebx  +
call ds:SetWindowLongW  +
jmp loc_100806D  +
mov esi [esi+20h] +
mov [ebp+10h] esi +
mov byte ptr [ebp+17h] 0 +
test esi esi +
jz loc_1007E53  +
mov edi ds:SendDlgItemMessageW +
push 0  +
push 0  +
mov ebx 404h +
push ebx  +
lea esi [ebx-11h] +
push esi  +
push dword ptr [ebp+8]  +
call edi  +
test eax eax +
jz loc_1007FBF  +
mov ecx [ebp+10h] +
lea eax [ebp+0Ch] +
push eax  +
push esi  +
call sub_10065F1  +
mov [ebp+17h] al +
push 2  +
push esi  +
mov ecx [ebp-4] +
push 0Dh  +
call sub_1006A52  +
cmp byte ptr [ebp+17h] 0 +
jz loc_1007E53  +
mov esi [ebp-4] +
mov eax [esi+10h] +
push dword ptr [ebp+0Ch]  +
mov ecx [eax+4] +
call sub_100CA6C  +
mov eax [esi] +
lea ecx [ebp-8] +
push ecx  +
mov ecx esi +
call dword ptr [eax+4]  +
test al al +
jz loc_1007FAA  +
push dword ptr [ebp-8]  +
push 0  +
push dword ptr [ebp+8]  +
call ds:SetWindowLongW  +
mov eax [esi+10h] +
mov ecx [eax+4] +
push 0  +
call sub_100C929  +
movzx eax al +
jmp loc_1008070  +
push 0  +
push 0  +
push ebx  +
mov esi 3F4h +
push esi  +
push dword ptr [ebp+8]  +
call edi  +
test eax eax +
jnz loc_1007F55  +
push eax  +
push eax  +
push ebx  +
inc esi  +
push esi  +
push dword ptr [ebp+8]  +
call edi  +
test eax eax +
jnz loc_1007F55  +
push eax  +
push eax  +
push ebx  +
mov esi 3F6h +
push esi  +
push dword ptr [ebp+8]  +
call edi  +
test eax eax +
jnz loc_1007F55  +
push eax  +
push eax  +
push ebx  +
inc esi  +
push esi  +
push dword ptr [ebp+8]  +
call edi  +
test eax eax +
jnz loc_1007F55  +
xor esi esi +
push esi  +
push esi  +
push ebx  +
mov ebx 3F8h +
push ebx  +
push dword ptr [ebp+8]  +
call edi  +
test eax eax +
jz loc_1007F65  +
mov ecx [ebp+10h] +
lea eax [ebp+0Ch] +
push eax  +
push ebx  +
call sub_10065F1  +
push 2  +
mov [ebp+17h] al +
push ebx  +
jmp loc_1007F68  +
***
push 1  +
xor edi edi +
push edi  +
push 0Dh  +
mov ecx esi +
call sub_1006A52  +
push edi  +
push edi  +
push ebx  +
call ds:SetWindowLongW  +
mov eax [esi+10h] +
mov ecx [eax+4] +
call sub_100C9D3  +
jmp loc_100806D  +
test esi esi +
jz loc_100806D  +
mov eax [esi] +
push 1  +
mov ecx esi +
call dword ptr [eax]  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 504h +
mov eax dword_1010060 +
xor eax ebp +
mov [ebp-4] eax +
push ebx  +
push esi  +
push edi  +
mov edi ds:LoadStringW +
push 100h  +
lea eax [ebp-304h] +
push eax  +
push 96h  +
push hInstance  +
mov esi ecx +
call edi  +
mov ebx 404h +
test eax eax +
jz loc_1008112  +
push 80h  +
lea eax [ebp-104h] +
push eax  +
push 9Ah  +
push hInstance  +
call edi  +
test eax eax +
jz loc_1008112  +
lea eax [ebp-104h] +
push eax  +
lea eax [ebp-304h] +
push eax  +
lea eax [ebp-504h] +
push 200h  +
push eax  +
call sub_1003A0B  +
add esp 10h +
test eax eax +
jl loc_1008112  +
lea eax [ebp-504h] +
push eax  +
push ebx  +
push dword ptr [esi+8]  +
call ds:SetDlgItemTextW  +
mov eax [esi+0Ch] +
mov eax [eax+10h] +
push 1  +
push dword ptr [eax+8]  +
push 30h  +
push ebx  +
push dword ptr [esi+8]  +
call ds:SendDlgItemMessageW  +
mov ecx esi +
call sub_1007955  +
mov ecx [ebp-4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100E5C6  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_1006934  +
mov dword ptr [esi] offset off_1001740 +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_1001740 +
call sub_100695E  +
test byte ptr [ebp+8] 1 +
jz loc_1008186  +
push esi  +
call sub_100E22D  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 220h +
mov eax dword_1010060 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push ebx  +
mov [ebp+hWnd] eax +
mov ebx ecx +
mov ecx [ebx+0Ch] +
lea eax [ebp+var_21C] +
push eax  +
call sub_10025E9  +
test al al +
jz loc_100826C  +
push esi  +
xor eax eax +
xor esi esi +
push edi  +
mov edi ds:SendMessageW +
cmp ax word ptr [ebp+var_21C] +
jnb loc_1008257  +
mov ecx [ebx+0Ch] +
push esi  +
call sub_1002631  +
test eax eax +
jz loc_100827B  +
mov eax [eax] +
test eax eax +
jz loc_100827B  +
movzx ecx si +
mov [ebp+lParam] ecx +
mov ecx [eax+420h] +
mov [ebp+var_214] ecx +
mov ecx [eax+424h] +
mov [ebp+var_210] ecx +
mov cx [eax+210h] +
mov [ebp+var_20A] cx +
mov ax [eax+212h] +
mov [ebp+var_20C] ax +
lea eax [ebp+lParam] +
push eax  +
push 0  +
push 409h  +
push [ebp+hWnd]  +
call edi  +
inc esi  +
cmp si word ptr [ebp+var_21C] +
jb loc_10081DF  +
push 0  +
push 0  +
push 402h  +
push [ebp+hWnd]  +
call edi  +
mov al 1 +
pop edi  +
pop esi  +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop ebx  +
call sub_100E5C6  +
leave   +
retn 4  +
xor al al +
jmp loc_100826A  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx+0Ch] +
mov eax [eax+10h] +
cmp byte ptr [eax+20h] 0 +
jnz loc_10082AF  +
mov eax [ecx+0Ch] +
mov edx [eax+10h] +
movzx eax word ptr [eax+24h] +
cmp [edx+24h] eax +
jz loc_10082AF  +
mov eax [ebp+8] +
mov dword ptr [eax] 0Fh +
jmp loc_10082C7  +
call sub_1006ABD  +
xor ecx ecx +
test al al +
mov eax [ebp+8] +
setnz cl  +
lea ecx ds:8[ecx*8] +
mov [eax] ecx +
mov al 1 +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
push edi  +
mov edi ds:SendDlgItemMessageW +
mov esi ecx +
mov eax [esi+0Ch] +
mov eax [eax+10h] +
push 1  +
push dword ptr [eax+8]  +
push 30h  +
push 433h  +
push dword ptr [esi+8]  +
call edi  +
mov eax [esi+0Ch] +
mov eax [eax+10h] +
push 1  +
push dword ptr [eax+4]  +
push 30h  +
push 434h  +
push dword ptr [esi+8]  +
call edi  +
mov eax [esi+0Ch] +
mov eax [eax+10h] +
push 1  +
push dword ptr [eax+4]  +
push 30h  +
push 435h  +
push dword ptr [esi+8]  +
call edi  +
mov eax [esi+0Ch] +
mov eax [eax+10h] +
push 1  +
push dword ptr [eax+4]  +
push 30h  +
push 436h  +
push dword ptr [esi+8]  +
call edi  +
pop edi  +
mov al 1 +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push esi  +
mov esi ecx +
mov ecx [esi+0Ch] +
lea eax [ebp+var_4] +
push eax  +
call sub_10025E9  +
test al al +
jz loc_10083A6  +
mov eax [esi+0Ch] +
mov eax [eax+10h] +
push ebx  +
mov bl [eax+20h] +
mov eax [eax+24h] +
mov [ebp+var_8] eax +
push edi  +
xor eax eax +
xor edi edi +
cmp ax word ptr [ebp+var_4] +
jnb loc_10083A2  +
mov ecx [esi+0Ch] +
push edi  +
call sub_1002631  +
test eax eax +
jz loc_10083A9  +
test bl bl +
jnz loc_1008396  +
movzx ecx di +
cmp [ebp+var_8] ecx +
jz loc_1008396  +
xor cl cl +
jmp loc_1008398  +
mov cl 1 +
inc edi  +
mov [eax+0Ch] cl +
cmp di word ptr [ebp+var_4] +
jb loc_1008379  +
mov al 1 +
pop edi  +
pop ebx  +
pop esi  +
leave   +
retn   +
xor al al +
jmp loc_10083A4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 210h +
mov eax dword_1010060 +
xor eax ebp +
mov [ebp-4] eax +
mov eax [ebp+10h] +
push ebx  +
mov ebx [ebp+14h] +
push esi  +
push edi  +
mov edi [ebp+8] +
push 0FFFFFFEBh  +
push edi  +
mov [ebp-20Ch] eax +
mov dword ptr [ebp-208h] 1 +
call ds:GetWindowLongW  +
mov esi eax +
mov eax [ebp+0Ch] +
dec eax  +
dec eax  +
jz loc_1008785  +
sub eax 4Ch +
jz loc_10085BB  +
sub eax 0C2h +
jz loc_10084F2  +
dec eax  +
jz loc_100845D  +
sub eax 27h +
jz loc_1008437  +
sub eax 1E2h +
jnz loc_1008510  +
mov eax [esi+0Ch] +
mov ecx [eax+10h] +
call sub_10022DF  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+0Ch]  +
jmp loc_1008791  +
push 433h  +
push edi  +
call ds:GetDlgItem  +
cmp ebx eax +
jnz loc_1008510  +
push dword ptr [ebp-20Ch]  +
mov ecx esi +
call sub_1006A32  +
jmp loc_1008510  +
movzx eax word ptr [ebp-20Ch] +
sub eax 435h +
jz loc_10084D8  +
dec eax  +
jz loc_1008493  +
sub eax 4 +
jnz loc_1008510  +
push 3  +
push 0  +
push 470h  +
push edi  +
call ds:GetParent  +
push eax  +
call ds:PostMessageW  +
jmp loc_1008791  +
mov esi ds:SendDlgItemMessageW +
lea eax [ebp-20Ch] +
push eax  +
push 0  +
push 403h  +
mov ebx 43Ah +
push ebx  +
push edi  +
call esi  +
cmp dword ptr [ebp-20Ch] 0FFFFFFFFh +
jz loc_10084C3  +
mov dword ptr [ebp-208h] 3 +
push 0  +
push 0  +
push 408h  +
push ebx  +
push edi  +
call esi  +
push dword ptr [ebp-208h]  +
jmp loc_1008479  +
***
xor esi esi +
push esi  +
push esi  +
push 407h  +
push 43Ah  +
push edi  +
call ds:SendDlgItemMessageW  +
push 3  +
push esi  +
jmp loc_100847B  +
***
push 20h  +
call loc_100E1BE  +
pop ecx  +
test eax eax +
jz loc_100850A  +
push edi  +
mov ecx eax +
call sub_1008144  +
mov esi eax +
jmp loc_100850C  +
xor esi esi +
test esi esi +
jnz loc_1008517  +
xor eax eax +
jmp loc_1008794  +
push esi  +
push 0FFFFFFEBh  +
push edi  +
call ds:SetWindowLongW  +
push ebx  +
mov ecx esi +
call sub_1006B03  +
test al al +
jnz loc_1008537  +
mov eax [esi] +
push 1  +
mov ecx esi +
call dword ptr [eax]  +
jmp loc_1008510  +
***
push 80h  +
lea eax [ebp-104h] +
push eax  +
push 78h  +
push hInstance  +
call ds:LoadStringW  +
test eax eax +
jz loc_100852D  +
mov ecx [esi+0Ch] +
lea eax [ebp-20Ch] +
push eax  +
call sub_10025E9  +
test al al +
jz loc_100852D  +
movzx eax word ptr [ebp-20Ch] +
push eax  +
lea eax [ebp-104h] +
push eax  +
lea eax [ebp-204h] +
push 100h  +
push eax  +
call sub_1003A0B  +
add esp 10h +
test eax eax +
jl loc_100852D  +
lea eax [ebp-204h] +
push eax  +
push 434h  +
push edi  +
call ds:SetDlgItemTextW  +
push 43Ah  +
push edi  +
call ds:GetDlgItem  +
push eax  +
mov ecx esi +
call sub_1006B9D  +
jmp loc_1008791  +
mov ebx [ebx+8] +
cmp ebx 0FFFFFF2Fh +
jz loc_1008770  +
cmp ebx 0FFFFFF31h +
jz loc_10086C4  +
cmp ebx 0FFFFFF32h +
jz loc_100868D  +
cmp ebx 0FFFFFF38h +
jnz loc_1008510  +
mov ecx esi +
call sub_1006A01  +
test al al +
jz loc_1008510  +
mov ebx 43Ah +
push ebx  +
push edi  +
call ds:GetDlgItem  +
push eax  +
mov ecx esi +
call sub_1008192  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+0Ch]  +
mov eax [esi+0Ch] +
mov eax [eax+10h] +
cmp byte ptr [eax+20h] 0 +
push 0  +
push 0  +
jz loc_100864C  +
push 407h  +
push ebx  +
push edi  +
call ds:SendDlgItemMessageW  +
lea eax [ebx-5] +
push eax  +
push 436h  +
push eax  +
push edi  +
call ds:CheckRadioButton  +
jmp loc_1008477  +
***
mov eax [eax+24h] +
mov esi ds:SendDlgItemMessageW +
push 408h  +
push ebx  +
push edi  +
mov [ebp-208h] eax +
call esi  +
mov eax 436h +
push eax  +
push eax  +
push 435h  +
push edi  +
call ds:CheckRadioButton  +
push dword ptr [ebp-208h]  +
push 0  +
push 404h  +
push ebx  +
push edi  +
call esi  +
jmp loc_1008477  +
***
push 3  +
push 0  +
push 0Ch  +
mov ecx esi +
call sub_1006A52  +
mov eax [esi] +
lea ecx [ebp-208h] +
push ecx  +
mov ecx esi +
call dword ptr [eax+8]  +
test al al +
jz loc_1008791  +
push dword ptr [ebp-208h]  +
push 0  +
push edi  +
call ds:SetWindowLongW  +
jmp loc_1008791  +
lea eax [ebp-208h] +
push eax  +
push 0  +
push 403h  +
push 43Ah  +
push edi  +
call ds:SendDlgItemMessageW  +
mov eax [ebp-208h] +
cmp eax 0FFFFFFFFh +
jz loc_10086F2  +
mov ecx [esi+0Ch] +
mov ecx [ecx+10h] +
mov [ecx+24h] eax +
push 435h  +
push edi  +
call ds:IsDlgButtonChecked  +
mov ebx eax +
mov eax [esi+0Ch] +
mov eax [eax+10h] +
dec ebx  +
neg ebx  +
sbb bl bl +
inc bl  +
mov ecx esi +
mov [eax+20h] bl +
call sub_1008344  +
xor eax eax +
test bl bl +
setz al  +
push 2  +
mov ecx esi +
add eax 435h +
push eax  +
push 0Ch  +
call sub_1006A52  +
mov ecx [esi+0Ch] +
lea eax [ebp-209h] +
push eax  +
call sub_10028D4  +
test al al +
jz loc_1008753  +
cmp byte ptr [ebp-209h] 0 +
jnz loc_1008753  +
mov ecx [esi+0Ch] +
call sub_100296F  +
mov eax [esi] +
lea ecx [ebp-210h] +
push ecx  +
mov ecx esi +
call dword ptr [eax+4]  +
test al al +
jz loc_1008791  +
push dword ptr [ebp-210h]  +
jmp loc_10086B6  +
***
push 1  +
xor ebx ebx +
push ebx  +
push 0Ch  +
mov ecx esi +
call sub_1006A52  +
push ebx  +
push ebx  +
jmp loc_10086B8  +
***
test esi esi +
jz loc_1008791  +
mov eax [esi] +
push 1  +
mov ecx esi +
call dword ptr [eax]  +
xor eax eax +
inc eax  +
mov ecx [ebp-4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100E5C6  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 50h +
mov eax dword_1010060 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_4] +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
push edi  +
xor edi edi +
mov [ebp+var_50] eax +
mov eax [ebp+arg_8] +
mov esi 80004005h +
mov [ebp+var_4C] eax +
mov [ebp+RequiredSize] edi +
mov [ebp+var_48] esi +
cmp ebx edi +
jz loc_10088C9  +
cmp eax edi +
jz loc_10088C9  +
push 4  +
push edi  +
push offset Enumerator  +
push edi  +
call ds:SetupDiGetClassDevsW  +
mov [ebp+DeviceInfoSet] eax +
cmp eax 0FFFFFFFFh +
jnz loc_1008809  +
mov eax esi +
jmp loc_10088CE  +
push 1Ch  +
pop esi  +
lea ecx [ebp+DeviceInterfaceData] +
push ecx  +
push edi  +
push ebx  +
push eax  +
mov [ebp+DeviceInterfaceData.cbSize] esi +
call ds:SetupDiOpenDeviceInterfaceW  +
test eax eax +
jz loc_10088B9  +
lea eax [ebp+DeviceInfoData] +
push eax  +
push edi  +
push edi  +
push edi  +
lea eax [ebp+DeviceInterfaceData] +
push eax  +
push [ebp+DeviceInfoSet]  +
mov [ebp+DeviceInfoData.cbSize] esi +
call ds:SetupDiGetDeviceInterfaceDetailW  +
mov ebx ds:GetLastError +
test eax eax +
jnz loc_100884C  +
call ebx  +
cmp eax 7Ah +
jnz loc_10088B9  +
mov esi ds:SetupDiGetDeviceInstanceIdW +
lea eax [ebp+RequiredSize] +
push eax  +
push edi  +
push edi  +
lea eax [ebp+DeviceInfoData] +
push eax  +
push [ebp+DeviceInfoSet]  +
call esi  +
test eax eax +
jnz loc_100887F  +
call ebx  +
cmp eax 7Ah +
jnz loc_10088B9  +
mov eax [ebp+RequiredSize] +
mov edx [ebp+var_50] +
mov ecx [ebp+var_4C] +
inc eax  +
mov [ebp+RequiredSize] eax +
cmp edx edi +
jnz loc_100888D  +
mov [ecx] eax +
push [ebp+DeviceInfoSet]  +
call ds:SetupDiDestroyDeviceInfoList  +
mov eax [ebp+var_48] +
jmp loc_10088CE  +
cmp [ecx] eax +
jnb loc_10088A1  +
mov [ecx] eax +
xor eax eax +
mov [edx] ax +
mov [ebp+var_48] 1 +
jmp loc_100887F  +
lea ecx [ebp+RequiredSize] +
push ecx  +
push eax  +
push edx  +
lea eax [ebp+DeviceInfoData] +
push eax  +
push [ebp+DeviceInfoSet]  +
call esi  +
test eax eax +
jz loc_10088B9  +
mov [ebp+var_48] edi +
jmp loc_100887F  +
push [ebp+DeviceInfoSet]  +
call ds:SetupDiDestroyDeviceInfoList  +
mov eax 80004005h +
jmp loc_10088CE  +
mov eax 80070057h +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100E5C6  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov ecx [ebp+arg_0] +
lea eax [ebp+var_4] +
push eax  +
call sub_100D640  +
test al al +
jnz loc_10088FF  +
xor al al +
jmp locret_1008927  +
mov ecx [ebp+arg_0] +
lea eax [ebp+var_8] +
push eax  +
call sub_100D65B  +
test al al +
jz loc_10088FB  +
mov eax [ebp+var_8] +
cmp ax word ptr [ebp+var_4] +
jnb loc_10088FB  +
push [ebp+arg_8]  +
mov ecx [ebp+arg_0] +
push [ebp+arg_4]  +
push eax  +
call sub_100D676  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0E8h +
mov eax dword_1010060 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
mov esi ecx +
xor eax eax +
cmp [esi+4] eax +
jz loc_1008A43  +
push ebx  +
push edi  +
mov edi ds:EnumDisplaySettingsW +
lea ecx [ebp+DevMode] +
push ecx  +
push eax  +
lea ebx [esi+220h] +
push ebx  +
mov [ebp+var_E2] al +
mov [ebp+var_E1] al +
mov [ebp+iModeNum] eax +
call edi  +
test eax eax +
jz loc_1008A33  +
movzx eax word ptr [esi+8] +
mov edx [ebp+DevMode.dmPelsWidth] +
inc [ebp+iModeNum]  +
mov ecx [ebp+DevMode.dmPelsHeight] +
cmp ax dx +
jnz loc_10089B1  +
cmp [esi+0Ah] cx +
jnz loc_10089B1  +
mov byte ptr [esi+42Bh] 0 +
mov [ebp+var_E2] 1 +
jmp loc_10089CA  +
cmp ax cx +
jnz loc_10089D1  +
cmp [esi+0Ah] dx +
jnz loc_10089D1  +
mov byte ptr [esi+42Bh] 1 +
mov [ebp+var_E1] 1 +
mov byte ptr [esi+42Ah] 1 +
lea eax [ebp+DevMode] +
push eax  +
push [ebp+iModeNum]  +
push ebx  +
call edi  +
test eax eax +
jnz loc_1008986  +
cmp [ebp+var_E2] al +
jz loc_1008A2A  +
cmp [ebp+var_E1] al +
jz loc_1008A41  +
movzx eax word ptr [esi+210h] +
movzx ecx word ptr [esi+212h] +
cmp ax cx +
jb loc_1008A17  +
mov dx [esi+8] +
cmp dx [esi+0Ah] +
jnb loc_1008A3A  +
cmp ax cx +
jnb loc_1008A21  +
mov ax [esi+8] +
cmp ax [esi+0Ah] +
jb loc_1008A3A  +
mov byte ptr [esi+42Bh] 1 +
jmp loc_1008A41  +
cmp [ebp+var_E1] 0 +
jnz loc_1008A41  +
mov byte ptr [esi+42Ah] 0 +
mov byte ptr [esi+42Bh] 0 +
pop edi  +
pop ebx  +
mov ecx [ebp+var_4] +
xor ecx ebp +
mov al 1 +
pop esi  +
call sub_100E5C6  +
leave   +
retn   +
***
mov edi edi +
push edi  +
mov edi ecx +
mov eax [edi+42Ch] +
mov ecx [eax+430h] +
test ecx ecx +
jz loc_1008A80  +
push esi  +
mov eax [ecx] +
mov esi [ecx+430h] +
push 1  +
call dword ptr [eax]  +
mov ecx esi +
test esi esi +
jnz loc_1008A6D  +
pop esi  +
mov eax [edi+42Ch] +
and dword ptr [eax+430h] 0 +
pop edi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0E0h +
mov eax dword_1010060 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
push edi  +
mov edi 0DCh +
push edi  +
lea eax [ebp+DevMode] +
push 0  +
push eax  +
mov esi ecx +
call memset  +
mov [ebp+DevMode.dmSize] di +
mov di [ebp+arg_0] +
add esp 0Ch +
movzx eax di +
mov [ebp+DevMode.dmPelsWidth] eax +
movzx eax [ebp+arg_4] +
push 0  +
push 0  +
mov [ebp+DevMode.dmPelsHeight] eax +
push 0  +
lea eax [ebp+DevMode] +
push eax  +
lea eax [esi+220h] +
push eax  +
mov [ebp+DevMode.dmFields] 180000h +
call ds:ChangeDisplaySettingsExW  +
test eax eax +
jz loc_1008B08  +
xor al al +
jmp loc_1008B34  +
lea eax [esi+210h] +
mov cx [eax] +
mov [esi+21Ch] cx +
lea ecx [esi+212h] +
mov dx [ecx] +
mov [eax] di +
mov ax [ebp+arg_4] +
mov [ecx] ax +
mov [esi+21Eh] dx +
mov al 1 +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_100E5C6  +
leave   +
retn 8  +
***
mov edi edi +
push esi  +
xor eax eax +
push eax  +
push eax  +
push eax  +
mov esi ecx +
push eax  +
lea eax [esi+220h] +
push eax  +
call ds:ChangeDisplaySettingsExW  +
test eax eax +
jz loc_1008B69  +
xor al al +
pop esi  +
retn   +
mov ax [esi+21Ch] +
mov [esi+210h] ax +
mov ax [esi+21Eh] +
mov [esi+212h] ax +
mov al 1 +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi eax +
xor eax eax +
mov ecx edx +
test edx edx +
jz loc_1008BA9  +
cmp [esi] ax +
jz loc_1008BA5  +
inc esi  +
inc esi  +
dec edx  +
jnz loc_1008B9B  +
test edx edx +
jnz loc_1008BAE  +
mov eax 80070057h +
pop esi  +
test edi edi +
jz locret_1008BBF  +
test eax eax +
jl loc_1008BBC  +
sub ecx edx +
mov [edi] ecx +
retn   +
and dword ptr [edi] 0 +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov ebx eax +
mov esi edx +
xor eax eax +
xor edi edi +
test esi esi +
jz loc_1008BFA  +
cmp [ebp+arg_4] eax +
jz loc_1008BF6  +
movzx edx word ptr [ebx] +
test dx dx +
jz loc_1008BF6  +
mov [ecx] dx +
inc ecx  +
inc ecx  +
inc ebx  +
inc ebx  +
dec esi  +
dec [ebp+arg_4]  +
inc edi  +
test esi esi +
jnz loc_1008BD9  +
test esi esi +
jnz loc_1008C02  +
dec ecx  +
dec ecx  +
dec edi  +
mov eax 8007007Ah +
xor edx edx +
mov [ecx] dx +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_1008C10  +
mov [ecx] edi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jnz loc_1008C30  +
mov eax [ecx+42Ch] +
jmp loc_1008C36  +
mov eax [eax+430h] +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
and dword ptr [esi+42Ch] 0 +
and dword ptr [esi+430h] 0 +
test byte ptr [ebp+8] 1 +
mov dword ptr [esi] offset off_1001760 +
jz loc_1008C68  +
push esi  +
call sub_100E22D  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_4] +
xor eax eax +
test edx edx +
jz loc_1008C8A  +
cmp edx 7FFFFFFFh +
jbe loc_1008C8F  +
mov eax 80070057h +
test eax eax +
jl loc_1008CA5  +
mov eax [ebp+arg_8] +
mov ecx [ebp+arg_0] +
push 7FFFFFFEh  +
push 0  +
call sub_1008BC5  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_4] +
push ebx  +
xor eax eax +
push esi  +
mov esi 7FFFFFFFh +
test edx edx +
jz loc_1008CC7  +
cmp edx esi +
jbe loc_1008CCC  +
mov eax 80070057h +
mov ebx [ebp+arg_0] +
test eax eax +
jl loc_1008CE4  +
push edi  +
lea edi [ebp+arg_0] +
mov eax ebx +
call sub_1008B8E  +
mov ecx [ebp+arg_0] +
pop edi  +
jmp loc_1008CE6  +
xor ecx ecx +
test eax eax +
jl loc_1008CFD  +
mov edx [ebp+arg_4] +
mov eax [ebp+arg_8] +
push esi  +
sub edx ecx +
push 0  +
lea ecx [ebx+ecx*2] +
call sub_1008BC5  +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20Ch +
mov eax dword_1010060 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
mov ebx [ebp+arg_0] +
push edi  +
push dword ptr [ebp+arg_C]  +
mov edi [ebp+arg_8] +
push offset a_D  +
lea eax [ebp+var_20C] +
push 208h  +
push eax  +
call sub_1003A0B  +
add esp 10h +
test eax eax +
jl loc_1008DA6  +
lea eax [ebp+var_20C] +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_1008D4E  +
sub eax edx +
sar eax 1 +
mov edx eax +
mov eax edi +
lea ecx [eax+2] +
push esi  +
mov si [eax] +
inc eax  +
inc eax  +
test si si +
jnz loc_1008D64  +
sub eax ecx +
sar eax 1 +
lea eax [eax+edx+1] +
pop esi  +
cmp eax [ebp+arg_4] +
ja loc_1008DA6  +
test ebx ebx +
jz loc_1008DA6  +
push edi  +
push [ebp+arg_4]  +
push ebx  +
call sub_1008C74  +
test eax eax +
jl loc_1008DA6  +
lea eax [ebp+var_20C] +
push eax  +
push [ebp+arg_4]  +
push ebx  +
call sub_1008CAE  +
test eax eax +
jl loc_1008DA6  +
xor eax eax +
jmp loc_1008DAB  +
mov eax 80004005h +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop ebx  +
call sub_100E5C6  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 408h +
mov eax dword_1010060 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push esi  +
mov esi [ebp+arg_4] +
lea ecx [ebp+var_408] +
push ecx  +
lea ecx [ebp+var_404] +
push ecx  +
push eax  +
mov [ebp+var_408] 200h +
call sub_10087AA  +
test eax eax +
jnz loc_1008E11  +
push eax  +
lea eax [ebp+var_404] +
push eax  +
push [ebp+arg_8]  +
push esi  +
call sub_1008D08  +
jmp loc_1008E16  +
mov eax 80004005h +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop esi  +
call sub_100E5C6  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov esi ecx +
xor eax eax +
push offset dword_1001550  +
mov [esi+0Ah] ax +
mov [esi+8] ax +
mov edi 100h +
push edi  +
lea eax [esi+0Ch] +
xor ebx ebx +
push eax  +
mov dword ptr [esi] offset off_1001760 +
mov [esi+4] ebx +
call sub_1008C74  +
xor eax eax +
push offset dword_1001550  +
mov [esi+212h] ax +
mov [esi+210h] ax +
mov [esi+21Eh] ax +
mov [esi+21Ch] ax +
push edi  +
lea eax [esi+220h] +
push eax  +
mov [esi+20Ch] bl +
mov [esi+20Dh] bl +
mov [esi+20Eh] bl +
mov [esi+20Fh] bl +
mov [esi+214h] ebx +
mov [esi+218h] ebx +
mov [esi+424h] ebx +
mov [esi+420h] ebx +
call sub_1008C74  +
mov eax [ebp+arg_0] +
mov [esi+428h] bl +
mov [esi+429h] bl +
mov [esi+42Ah] bl +
mov [esi+42Bh] bl +
cmp eax ebx +
jnz loc_1008EE4  +
mov [esi+42Ch] esi +
jmp loc_1008EF6  +
mov [eax+430h] esi +
mov eax [eax+42Ch] +
mov [esi+42Ch] eax +
pop edi  +
mov [esi+430h] ebx +
mov eax esi +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
push edi  +
mov edi ecx +
mov esi [edi+42Ch] +
test ebx ebx +
jle loc_1008F32  +
push esi  +
mov ecx edi +
call sub_1008C1C  +
test eax eax +
jz loc_1008F2F  +
mov esi eax +
dec ebx  +
jnz loc_1008F21  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0E0h +
mov eax dword_1010060 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
push edi  +
mov edi ecx +
mov esi [edi+42Ch] +
jmp loc_1008FE4  +
mov eax 0DCh +
mov [ebp+DevMode.dmSize] ax +
xor eax eax +
mov [ebp+DevMode.dmDriverExtra] ax +
lea eax [ebp+DevMode] +
push eax  +
push 0FFFFFFFFh  +
lea eax [esi+220h] +
push eax  +
call ds:EnumDisplaySettingsW  +
test eax eax +
jz loc_1008FFC  +
mov ax word ptr [ebp+DevMode.dmPelsWidth] +
mov [esi+210h] ax +
mov ax word ptr [ebp+DevMode.dmPelsHeight] +
mov [esi+212h] ax +
mov eax dword ptr [ebp+DevMode.anonymous_0] +
mov [esi+420h] eax +
mov eax dword ptr [ebp+DevMode.anonymous_0+4] +
mov [esi+424h] eax +
mov eax [ebp+DevMode.dmDisplayFrequency] +
mov [esi+214h] eax +
mov eax [ebp+DevMode.dmBitsPerPel] +
mov ecx esi +
mov [esi+218h] eax +
call sub_1008930  +
push esi  +
mov ecx edi +
call sub_1008C1C  +
mov esi eax +
test esi esi +
jnz loc_1008F64  +
mov al 1 +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_100E5C6  +
leave   +
retn   +
xor al al +
jmp loc_1008FEE  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0ADCh +
mov eax dword_1010060 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
push edi  +
mov esi ecx +
xor edi edi +
lea ecx [ebp+var_ADC] +
mov [ebp+var_AA0] edi +
call sub_100D4F4  +
cmp [ebp+arg_0] 0 +
jz loc_1009043  +
lea ecx [ebp+var_ADC] +
call sub_100D5AE  +
mov esi [esi+42Ch] +
push edi  +
lea eax [ebp+var_754] +
push eax  +
mov [ebp+var_AA8] edi +
mov [ebp+var_754] 348h +
push edi  +
jmp loc_10092BD  +
mov eax [ebp+var_610] +
inc [ebp+var_AA8]  +
test al 1 +
jz loc_10092AF  +
test al 8 +
jnz loc_10092AF  +
cmp [ebp+var_AA0] edi +
jbe loc_10090B6  +
push 434h  +
call loc_100E1BE  +
pop ecx  +
cmp eax edi +
jz loc_10090A6  +
push esi  +
mov ecx eax +
call sub_1008E2A  +
mov esi eax +
jmp loc_10090A8  +
xor esi esi +
cmp esi edi +
jz loc_10092D0  +
mov eax [ebp+var_610] +
inc [ebp+var_AA0]  +
shr eax 2 +
and al 1 +
mov [esi+428h] al +
mov eax 0DCh +
mov [ebp+DevMode.dmSize] ax +
xor eax eax +
mov [ebp+DevMode.dmDriverExtra] ax +
lea eax [ebp+DevMode] +
push eax  +
push 0FFFFFFFFh  +
lea eax [ebp+Unused] +
push eax  +
call ds:EnumDisplaySettingsW  +
test eax eax +
jz loc_10092D0  +
mov ax word ptr [ebp+DevMode.dmPelsWidth] +
mov [esi+210h] ax +
mov ax word ptr [ebp+DevMode.dmPelsHeight] +
mov [esi+212h] ax +
mov eax dword ptr [ebp+DevMode.anonymous_0] +
mov [esi+420h] eax +
mov eax dword ptr [ebp+DevMode.anonymous_0+4] +
mov [esi+424h] eax +
mov eax [ebp+DevMode.dmDisplayFrequency] +
mov [esi+214h] eax +
mov eax [ebp+DevMode.dmBitsPerPel] +
mov [esi+218h] eax +
lea eax [ebp+Unused] +
push eax  +
push 200h  +
lea eax [esi+220h] +
push eax  +
call sub_1002E67  +
test eax eax +
jl loc_10092EE  +
cmp [ebp+arg_0] 0 +
jz loc_10092AF  +
xor bl bl +
mov [ebp+iDevNum] edi +
mov [ebp+DisplayDevice.cb] 348h +
push 1  +
lea eax [ebp+DisplayDevice] +
push eax  +
push [ebp+iDevNum]  +
lea eax [ebp+Unused] +
push eax  +
call ds:EnumDisplayDevicesW  +
inc [ebp+iDevNum]  +
test eax eax +
jz loc_10091B7  +
test byte ptr [ebp+DisplayDevice.StateFlags] 1 +
jz loc_10091B3  +
mov bl 1 +
test bl bl +
jz loc_1009182  +
test bl bl +
jz loc_10092AF  +
push 196h  +
lea eax [ebp+var_330] +
push eax  +
lea eax [ebp+var_954] +
push eax  +
call sub_1008DC0  +
test eax eax +
jl loc_10092AF  +
lea eax [ebp+var_330] +
push eax  +
lea ecx [ebp+var_ADC] +
call sub_100DF74  +
test al al +
jz loc_10092AF  +
lea edi [esi+20Dh] +
push edi  +
lea ecx [ebp+var_ADC] +
call sub_100D6C3  +
test al al +
jnz loc_1009211  +
mov [edi] al +
lea edi [esi+20Ch] +
push edi  +
lea ecx [ebp+var_ADC] +
call sub_100D6DC  +
mov [esi+20Eh] al +
test al al +
jnz loc_100922F  +
mov [edi] al +
lea edi [esi+4] +
push edi  +
lea ecx [ebp+var_ADC] +
call sub_100D6F5  +
test al al +
jnz loc_1009245  +
and dword ptr [edi] 0 +
cmp dword ptr [edi] 0 +
jz loc_100927A  +
lea ebx [esi+0Ah] +
push ebx  +
lea edi [esi+8] +
push edi  +
lea eax [ebp+var_ADC] +
push eax  +
call sub_10088E4  +
test al al +
jnz loc_100926A  +
xor eax eax +
mov [ebx] ax +
mov [edi] ax +
cmp word ptr [edi] 0 +
jz loc_1009276  +
cmp word ptr [ebx] 0 +
jnz loc_100927A  +
and dword ptr [esi+4] 0 +
mov ecx esi +
call sub_1008930  +
mov edi 100h +
push edi  +
lea ebx [esi+0Ch] +
push ebx  +
lea ecx [ebp+var_ADC] +
call sub_100DFD0  +
test al al +
jnz loc_10092A6  +
push offset dword_1001550  +
push edi  +
push ebx  +
call sub_1008C74  +
mov byte ptr [esi+20Fh] 1 +
xor edi edi +
push edi  +
lea eax [ebp+var_754] +
push eax  +
push [ebp+var_AA8]  +
push edi  +
call ds:EnumDisplayDevicesW  +
test eax eax +
jnz loc_1009067  +
mov bl 1 +
jmp loc_10092F0  +
lea ecx [ebp+var_ADC] +
call sub_100D536  +
xor al al +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100E5C6  +
leave   +
retn 4  +
xor bl bl +
lea ecx [ebp+var_ADC] +
call sub_100D536  +
mov al bl +
jmp loc_10092DD  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0E0h +
mov eax dword_1010060 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
push edi  +
mov edi 0DCh +
push edi  +
lea eax [ebp+DevMode] +
push 0  +
push eax  +
mov esi ecx +
call memset  +
movzx eax word ptr [esi+210h] +
add esp 0Ch +
mov [ebp+DevMode.dmPelsWidth] eax +
movzx eax word ptr [esi+212h] +
push 0  +
push 1  +
mov [ebp+DevMode.dmPelsHeight] eax +
push 0  +
lea eax [ebp+DevMode] +
push eax  +
lea eax [esi+220h] +
push eax  +
mov [ebp+DevMode.dmSize] di +
mov [ebp+DevMode.dmFields] 180000h +
call ds:ChangeDisplaySettingsExW  +
test eax eax +
jz loc_100937B  +
xor al al +
jmp loc_100938B  +
mov ecx esi +
mov byte ptr [esi+429h] 1 +
call sub_1008F40  +
mov al 1 +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_100E5C6  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
xor eax eax +
push edi  +
mov edi ecx +
mov [esi] ax +
mov eax [edi+42Ch] +
jmp loc_10093C2  +
inc word ptr [esi]  +
push eax  +
mov ecx edi +
call sub_1008C1C  +
test eax eax +
jnz loc_10093B7  +
pop edi  +
mov al 1 +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
lea eax [ebp+var_4] +
push eax  +
lea esi [ecx+0Ch] +
push 100h  +
push esi  +
call sub_1003A6B  +
test eax eax +
jl loc_1009428  +
cmp [ebp+var_4] 2 +
movzx eax [ebp+arg_4] +
jnb loc_100941E  +
push eax  +
push [ebp+lpBuffer]  +
push 8Eh  +
push hInstance  +
call ds:LoadStringW  +
test eax eax +
jle loc_1009417  +
xor eax eax +
jmp loc_1009428  +
mov eax 80004005h +
jmp loc_1009428  +
push esi  +
push eax  +
push [ebp+lpBuffer]  +
call sub_1008C74  +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
fld1   +
push ebx  +
push esi  +
push edi  +
mov ebx ecx +
mov [ebx+6] ax +
fstp  qword ptr [ebx+58h] +
mov [ebx+4] ax +
mov eax offset dword_100176C +
mov esi eax +
lea edi [ebx+38h] +
movs   +
movs   +
movs   +
movs   +
mov esi eax +
lea edi [ebx+28h] +
movs   +
movs   +
movs   +
movs   +
mov esi eax +
lea edi [ebx+18h] +
movs   +
movs   +
movs   +
movs   +
mov esi eax +
mov al [ebp+arg_4] +
lea edi [ebx+8] +
movs   +
movs   +
mov [ebx+60h] al +
mov eax [ebp+arg_0] +
xor ecx ecx +
movs   +
mov [ebx+6Ch] eax +
lea eax [ebp+arg_4] +
push eax  +
mov [ebx] ecx +
movs   +
mov [ebx+64h] ecx +
mov [ebx+68h] cl +
mov [ebx+74h] ecx +
call ds:GetProcessDefaultLayout  +
test eax eax +
jz loc_10094AD  +
mov eax dword ptr [ebp+arg_4] +
and al 1 +
dec al  +
neg al  +
sbb al al +
inc al  +
mov [ebx+70h] al +
jmp loc_10094B1  +
mov byte ptr [ebx+70h] 0 +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_100A35D  +
test [ebp+arg_0] 1 +
jz loc_10094D9  +
push esi  +
call sub_100E22D  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
movzx ecx word ptr [esi+6] +
movzx eax word ptr [esi+4] +
inc ecx  +
cmp ecx eax +
jle loc_100951B  +
lea eax ds:0Ch[eax*4] +
push eax  +
push dword ptr [esi]  +
call ds:realloc  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_1009514  +
xor al al +
jmp loc_100956B  +
add word ptr [esi+4] 3 +
mov [esi] eax +
push 23Ch  +
call loc_100E1BE  +
pop ecx  +
test eax eax +
jz loc_1009546  +
movzx ecx byte ptr [esi+60h] +
push 0ADh  +
push dword ptr [esi+64h]  +
push dword ptr [ebp+arg_4]  +
push ecx  +
push [ebp+arg_0]  +
mov ecx eax +
call sub_100A2B0  +
jmp loc_1009548  +
xor eax eax +
movzx ecx word ptr [esi+6] +
mov edx [esi] +
mov [edx+ecx*4] eax +
movzx eax word ptr [esi+6] +
mov edx [esi] +
movzx ecx ax +
cmp dword ptr [edx+ecx*4] 0 +
jz loc_1009510  +
inc eax  +
mov [esi+6] ax +
mov byte ptr [esi+68h] 1 +
mov al 1 +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx] +
test eax eax +
jnz loc_1009584  +
xor eax eax +
jmp loc_1009594  +
mov dx [ebp+arg_0] +
cmp dx [ecx+6] +
jnb loc_1009580  +
movzx ecx dx +
mov eax [eax+ecx*4] +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
mov esi ecx +
mov eax [esi+18h] +
push edi  +
xor edi edi +
xor ebx ebx +
cmp eax edi +
mov [ebp+var_4] edi +
jge loc_10095BB  +
neg eax  +
mov [ebp+var_4] eax +
mov eax [esi+1Ch] +
cmp eax edi +
jge loc_10095C6  +
neg eax  +
mov ebx eax +
xor eax eax +
cmp ax [esi+6] +
jnb loc_10095EC  +
push edi  +
mov ecx esi +
call sub_1009575  +
test eax eax +
jz loc_1009615  +
push ebx  +
push [ebp+var_4]  +
mov ecx eax +
call sub_100A4A2  +
inc edi  +
cmp di [esi+6] +
jb loc_10095CE  +
mov eax [esi+18h] +
add eax [ebp+var_4] +
mov [esi+28h] eax +
mov eax [esi+1Ch] +
add eax ebx +
mov [esi+2Ch] eax +
mov eax [esi+20h] +
add eax [ebp+var_4] +
mov [esi+30h] eax +
mov eax [esi+24h] +
add eax ebx +
mov [esi+34h] eax +
mov al 1 +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
xor al al +
jmp loc_1009610  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
mov eax [ebp+arg_0] +
cmp ecx [eax] +
jl loc_1009644  +
cmp ecx [eax+8] +
jg loc_1009644  +
mov ecx [ebp+arg_8] +
cmp ecx [eax+4] +
jl loc_1009644  +
cmp ecx [eax+0Ch] +
jg loc_1009644  +
xor eax eax +
inc eax  +
jmp loc_1009646  +
xor eax eax +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
mov esi ecx +
mov ecx [esi+30h] +
push edi  +
mov [ebp+var_4] ecx +
test ecx ecx +
jz loc_10096DF  +
mov eax [esi+34h] +
mov [ebp+var_8] eax +
test eax eax +
jz loc_10096DF  +
push eax  +
push ecx  +
lea edi [esi+8] +
push edi  +
call sub_100961E  +
test al al +
jz loc_1009687  +
fld1   +
fstp  qword ptr [esi+58h] +
mov al 1 +
jmp loc_10096E1  +
fild  [ebp+var_4] +
fild  dword ptr [esi+10h] +
fdiv st st(1) +
fld  st(1) +
fmul st st(1) +
call _ftol2_sse  +
fild  [ebp+var_8] +
mov ebx eax +
fld  st +
fmul st st(2) +
call _ftol2_sse  +
push eax  +
push ebx  +
push edi  +
call sub_100961E  +
test al al +
jz loc_10096B8  +
fstp  st(2) +
fstp  st(1) +
jmp loc_1009680  +
fstp  st(1) +
fild  dword ptr [esi+14h] +
fdiv st st(1) +
fmul st(2) st +
fxch  st(2) +
call _ftol2_sse  +
fmul st st(1) +
mov ebx eax +
call _ftol2_sse  +
push eax  +
push ebx  +
push edi  +
call sub_100961E  +
test al al +
jnz loc_1009680  +
fstp  st +
xor al al +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
fild  dword ptr [esi+28h] +
push edi  +
fmul  qword ptr [esi+58h] +
call _ftol2_sse  +
fild  dword ptr [esi+2Ch] +
mov [esi+38h] eax +
fmul  qword ptr [esi+58h] +
call _ftol2_sse  +
fild  dword ptr [esi+30h] +
mov [esi+3Ch] eax +
fmul  qword ptr [esi+58h] +
call _ftol2_sse  +
fild  dword ptr [esi+34h] +
mov [esi+40h] eax +
fmul  qword ptr [esi+58h] +
call _ftol2_sse  +
mov [esi+44h] eax +
xor eax eax +
xor edi edi +
cmp ax [esi+6] +
jnb loc_1009755  +
push edi  +
mov ecx esi +
call sub_1009575  +
test eax eax +
jz loc_100975A  +
fld  qword ptr [esi+58h] +
push ecx  +
push ecx  +
mov ecx eax +
fstp  [esp+0Ch+var_C] +
call sub_100A4C8  +
inc edi  +
cmp di [esi+6] +
jb loc_1009733  +
mov al 1 +
pop edi  +
pop esi  +
retn   +
xor al al +
jmp loc_1009757  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
push ebx  +
push esi  +
mov esi ecx +
mov eax [esi+10h] +
sub eax [esi+40h] +
push edi  +
cdq   +
sub eax edx +
mov edi eax +
mov eax [esi+14h] +
sub eax [esi+44h] +
sar edi 1 +
cdq   +
sub eax edx +
mov ebx eax +
sar ebx 1 +
xor eax eax +
jmp loc_10097AE  +
push [ebp+var_4]  +
mov ecx esi +
call sub_1009575  +
test eax eax +
jz loc_10097DB  +
push ebx  +
push edi  +
mov ecx eax +
call sub_100A535  +
inc [ebp+var_4]  +
mov ax word ptr [ebp+var_4] +
cmp ax [esi+6] +
jb loc_1009790  +
mov eax [esi+38h] +
add eax edi +
mov [esi+48h] eax +
mov eax [esi+3Ch] +
add eax ebx +
mov [esi+4Ch] eax +
mov eax [esi+40h] +
add eax edi +
mov [esi+50h] eax +
mov eax [esi+44h] +
add eax ebx +
mov [esi+54h] eax +
mov al 1 +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
xor al al +
jmp loc_10097D6  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
and dword ptr [edi] 0 +
lea esi [ecx+74h] +
cmp dword ptr [esi] 0 +
jnz loc_1009806  +
push esi  +
push dword ptr [ecx+6Ch]  +
call sub_100B71E  +
test eax eax +
jl loc_100980C  +
mov eax [esi] +
mov [edi] eax +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov ecx [esi+74h] +
test ecx ecx +
jz loc_1009835  +
call sub_100AF99  +
mov eax [esi+74h] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
and dword ptr [esi+74h] 0 +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
mov esi ecx +
push edi  +
cmp [esi+60h] bl +
jz loc_1009876  +
xor eax eax +
xor edi edi +
mov [esi+60h] bl +
cmp ax [esi+6] +
jnb loc_1009876  +
push edi  +
mov ecx esi +
call sub_1009575  +
test eax eax +
jz loc_100987F  +
push ebx  +
mov ecx eax +
call sub_100A434  +
inc edi  +
cmp di [esi+6] +
jb loc_100985B  +
mov al 1 +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
xor al al +
jmp loc_1009878  +
***
mov edi edi +
push esi  +
mov esi ecx +
cmp dword ptr [esi] 0 +
jz loc_10098C3  +
push edi  +
xor eax eax +
xor edi edi +
cmp ax [esi+6] +
jnb loc_10098B6  +
mov eax [esi] +
mov ecx [eax+edi*4] +
test ecx ecx +
jz loc_10098AD  +
push 1  +
call sub_10094BF  +
movzx eax word ptr [esi+6] +
inc edi  +
cmp edi eax +
jl loc_100989D  +
push dword ptr [esi]  +
call ds:free  +
and dword ptr [esi] 0 +
pop ecx  +
pop edi  +
cmp dword ptr [esi+74h] 0 +
jz loc_10098D1  +
mov ecx esi +
pop esi  +
jmp loc_1009817  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
push edi  +
mov edi ecx +
xor eax eax +
xor ebx ebx +
cmp ax [edi+6] +
jnb loc_1009960  +
mov esi [ebp+arg_0] +
push ebx  +
mov ecx edi +
call sub_1009575  +
test eax eax +
jz loc_1009969  +
mov ecx [eax] +
cmp ecx [esi] +
jnz loc_1009959  +
mov ecx [eax+4] +
mov edx [eax+8] +
mov [ebp+var_4] edx +
cmp ecx [esi+4] +
jnz loc_100991B  +
mov [ebp+var_8] ecx +
mov ecx edx +
cmp ecx [esi+8] +
jz loc_100992B  +
mov ecx [esi+4] +
mov [eax+4] ecx +
mov ecx [esi+8] +
mov [eax+8] ecx +
mov byte ptr [edi+68h] 1 +
movzx ecx word ptr [esi+0Ch] +
cmp [eax+0Ch] cx +
jz loc_100993D  +
mov [eax+0Ch] cx +
mov byte ptr [edi+68h] 1 +
movzx ecx word ptr [esi+0Eh] +
cmp [eax+0Eh] cx +
jz loc_100994F  +
mov [eax+0Eh] cx +
mov byte ptr [edi+68h] 1 +
push [ebp+arg_4]  +
mov ecx eax +
call sub_100A407  +
inc ebx  +
cmp bx [edi+6] +
jb loc_10098F1  +
mov al 1 +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
xor al al +
jmp loc_1009962  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
mov esi ecx +
push edi  +
xor eax eax +
xor edi edi +
mov [esi+64h] ebx +
cmp ax [esi+6] +
jnb loc_10099A5  +
push edi  +
mov ecx esi +
call sub_1009575  +
test eax eax +
jz loc_10099AE  +
inc edi  +
mov [eax+230h] ebx +
cmp di [esi+6] +
jb loc_100998C  +
mov al 1 +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
xor al al +
jmp loc_10099A7  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push esi  +
mov esi ecx +
push edi  +
movzx edi word ptr [esi+6] +
test di di +
jnz loc_10099D2  +
xor al al +
jmp loc_1009AC9  +
push 0  +
call sub_1009575  +
test eax eax +
jz loc_10099CB  +
mov ecx [eax+4] +
mov edx [eax+8] +
mov [esi+18h] ecx +
mov ecx [eax+4] +
mov [ebp+var_8] ecx +
mov ecx [eax+8] +
mov [esi+1Ch] ecx +
mov ecx [eax+4] +
mov [ebp+var_4] edx +
mov edx [eax+8] +
mov [ebp+var_4] edx +
movzx edx word ptr [eax+0Eh] +
add edx ecx +
mov [esi+20h] edx +
mov ecx [eax+4] +
mov [ebp+var_8] ecx +
mov ecx [eax+8] +
movzx eax word ptr [eax+0Ch] +
push ebx  +
add eax ecx +
xor ebx ebx +
inc ebx  +
mov [esi+24h] eax +
mov eax ebx +
cmp ax di +
jnb loc_1009AC6  +
push ebx  +
mov ecx esi +
call sub_1009575  +
test eax eax +
jz loc_1009ACD  +
mov ecx [eax+8] +
mov edx [eax+4] +
mov [ebp+var_4] ecx +
mov ecx [esi+18h] +
cmp ecx edx +
jl loc_1009A50  +
mov ecx edx +
mov edx [eax+8] +
mov [ebp+var_4] edx +
mov [esi+18h] ecx +
mov ecx [eax+4] +
mov edx [eax+8] +
mov [ebp+var_8] ecx +
mov ecx [esi+1Ch] +
cmp ecx edx +
jl loc_1009A6B  +
mov ecx [eax+4] +
mov [ebp+var_8] ecx +
mov ecx edx +
mov edi [esi+20h] +
mov [esi+1Ch] ecx +
mov ecx [eax+8] +
mov edx [eax+4] +
mov [ebp+var_4] ecx +
movzx ecx word ptr [eax+0Eh] +
add edx ecx +
cmp edi edx +
jle loc_1009A88  +
mov ecx edi +
jmp loc_1009A93  +
mov edx [eax+4] +
mov edi [eax+8] +
mov [ebp+var_4] edi +
add ecx edx +
mov edi [esi+24h] +
mov [esi+20h] ecx +
mov ecx [eax+4] +
mov edx [eax+8] +
mov [ebp+var_8] ecx +
movzx ecx word ptr [eax+0Ch] +
add edx ecx +
cmp edi edx +
jg loc_1009AB8  +
mov edx [eax+4] +
mov eax [eax+8] +
mov [ebp+var_8] edx +
lea edi [ecx+eax] +
inc ebx  +
mov [esi+24h] edi +
cmp bx [esi+6] +
jb loc_1009A28  +
mov al 1 +
pop ebx  +
pop edi  +
pop esi  +
leave   +
retn   +
xor al al +
jmp loc_1009AC8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov esi ecx +
xor eax eax +
xor edi edi +
cmp ax [esi+6] +
jnb loc_1009B0F  +
push edi  +
mov ecx esi +
call sub_1009575  +
test eax eax +
jz loc_1009B17  +
mov ecx [ebp+arg_0] +
cmp ecx [eax] +
setz cl  +
movzx ecx cl +
push ecx  +
mov ecx eax +
call sub_100A386  +
inc edi  +
cmp di [esi+6] +
jb loc_1009AE9  +
mov al 1 +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
xor al al +
jmp loc_1009B11  +
***
mov edi edi +
push ebx  +
push esi  +
mov esi ecx +
push edi  +
movzx edi word ptr [esi+6] +
xor eax eax +
xor ebx ebx +
cmp ax di +
jnb loc_1009B4F  +
push ebx  +
mov ecx esi +
call sub_1009575  +
test eax eax +
jz loc_1009B4F  +
cmp byte ptr [eax+22Ch] 0 +
jnz loc_1009B56  +
inc ebx  +
cmp bx di +
jb loc_1009B34  +
or eax 0FFFFFFFFh +
pop edi  +
pop esi  +
pop ebx  +
retn   +
mov eax [eax] +
jmp loc_1009B52  +
***
mov edi edi +
push ebx  +
push esi  +
mov esi ecx +
push edi  +
movzx edi word ptr [esi+6] +
xor eax eax +
xor ebx ebx +
cmp ax di +
jnb loc_1009B8E  +
push ebx  +
mov ecx esi +
call sub_1009575  +
test eax eax +
jz loc_1009B8E  +
cmp byte ptr [eax+22Fh] 0 +
jnz loc_1009B95  +
inc ebx  +
cmp bx di +
jb loc_1009B73  +
or eax 0FFFFFFFFh +
pop edi  +
pop esi  +
pop ebx  +
retn   +
mov eax [eax] +
jmp loc_1009B91  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov esi ecx +
xor eax eax +
xor edi edi +
cmp ax [esi+6] +
jnb loc_1009BD5  +
push edi  +
mov ecx esi +
call sub_1009575  +
test eax eax +
jz loc_1009BDD  +
mov ecx [ebp+arg_0] +
cmp ecx [eax] +
jnz loc_1009BCE  +
push [ebp+arg_4]  +
mov ecx eax +
call sub_100A407  +
inc edi  +
cmp di [esi+6] +
jb loc_1009BB1  +
mov al 1 +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
xor al al +
jmp loc_1009BD7  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov esi ecx +
xor eax eax +
xor edi edi +
cmp ax [esi+6] +
jnb loc_1009C1C  +
push edi  +
mov ecx esi +
call sub_1009575  +
test eax eax +
jz loc_1009C24  +
mov ecx [ebp+arg_0] +
cmp ecx [eax] +
jnz loc_1009C15  +
mov cl [ebp+arg_4] +
mov [eax+239h] cl +
inc edi  +
cmp di [esi+6] +
jb loc_1009BF9  +
mov al 1 +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
xor al al +
jmp loc_1009C1E  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi ecx +
push edi  +
movzx edi word ptr [esi+6] +
xor eax eax +
xor ebx ebx +
cmp ax di +
jnb loc_1009C5D  +
push ebx  +
mov ecx esi +
call sub_1009575  +
test eax eax +
jz loc_1009C5D  +
mov ecx [ebp+arg_0] +
cmp ecx [eax] +
jz loc_1009C66  +
inc ebx  +
cmp bx di +
jb loc_1009C44  +
xor al al +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
mov al [eax+239h] +
jmp loc_1009C5F  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
and [ebp+var_4] 0 +
push ebx  +
push esi  +
mov esi ecx +
push edi  +
movzx edi word ptr [esi+6] +
xor eax eax +
cmp ax di +
jnb loc_1009CE5  +
push [ebp+var_4]  +
mov ecx esi +
call sub_1009575  +
mov edx eax +
test edx edx +
jz loc_1009CE5  +
mov eax [edx+21Ch] +
movzx ebx word ptr [edx+224h] +
mov ecx [edx+220h] +
push [ebp+arg_4]  +
add ebx eax +
push [ebp+arg_0]  +
mov [ebp+var_14] eax +
movzx eax word ptr [edx+226h] +
add eax ecx +
mov [ebp+var_8] eax +
lea eax [ebp+var_14] +
push eax  +
mov [ebp+var_10] ecx +
mov [ebp+var_C] ebx +
call sub_100961E  +
test al al +
jnz loc_1009CEF  +
inc [ebp+var_4]  +
cmp word ptr [ebp+var_4] di +
jb loc_1009C8F  +
or eax 0FFFFFFFFh +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
mov eax [edx] +
jmp loc_1009CE8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1009888  +
test [ebp+arg_0] 1 +
jz loc_1009D12  +
push esi  +
call sub_100E22D  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_10099B7  +
test al al +
jnz loc_1009D30  +
xor al al +
pop esi  +
retn   +
mov ecx esi +
call sub_100959D  +
test al al +
jz loc_1009D2C  +
mov ecx esi +
call sub_100964F  +
test al al +
jz loc_1009D2C  +
mov ecx esi +
call sub_10096EB  +
test al al +
jz loc_1009D2C  +
mov ecx esi +
call sub_1009763  +
test al al +
setnz al  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
cmp byte ptr [esi+68h] 0 +
push edi  +
jz loc_1009DC8  +
lea eax [esi+8] +
push eax  +
push [ebp+hWndParent]  +
call ds:GetClientRect  +
test eax eax +
jnz loc_1009D88  +
xor al al +
jmp loc_1009DCA  +
mov ecx esi +
call sub_1009D1E  +
test al al +
jz loc_1009D84  +
xor eax eax +
xor edi edi +
cmp ax [esi+6] +
jnb loc_1009DC4  +
push edi  +
mov ecx esi +
call sub_1009575  +
test eax eax +
jz loc_1009D84  +
test di di +
setz cl  +
movzx ecx cl +
push ecx  +
push [ebp+hWndParent]  +
mov ecx eax +
call sub_100A555  +
inc edi  +
cmp di [esi+6] +
jb loc_1009D9D  +
mov byte ptr [esi+68h] 0 +
mov al 1 +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 60h +
mov eax dword_1010060 +
xor eax ebp +
mov [ebp-4] eax +
mov eax [ebp+10h] +
push ebx  +
mov ebx [ebp+14h] +
push esi  +
mov esi ds:GetWindowLongW +
push edi  +
mov edi [ebp+8] +
push 0FFFFFFEBh  +
push edi  +
mov [ebp-50h] eax +
mov [ebp-4Ch] ebx +
call esi  +
mov edx [ebp+0Ch] +
mov ecx eax +
mov eax 403h +
mov [ebp-48h] ecx +
cmp edx eax +
ja loc_100A0A7  +
jz loc_100A09B  +
cmp edx 3Dh +
ja loc_1009FFA  +
jz loc_1009FA8  +
mov eax edx +
dec eax  +
jz loc_1009EFD  +
dec eax  +
jz loc_1009EF0  +
sub eax 0Dh +
jz loc_1009EB0  +
sub eax 5 +
jnz loc_100A184  +
lea eax [ebp-60h] +
push eax  +
push edi  +
call ds:GetClientRect  +
call ds:IsThemeActive  +
test eax eax +
jz loc_1009E71  +
lea eax [ebp-60h] +
push eax  +
push dword ptr [ebp-50h]  +
push edi  +
call ds:DrawThemeParentBackground  +
jmp loc_1009EA8  +
mov eax [ebp-48h] +
push dword ptr [eax+64h]  +
call ds:CreateSolidBrush  +
mov esi eax +
push esi  +
push dword ptr [ebp-50h]  +
call ds:SelectObject  +
push 0F00021h  +
push dword ptr [ebp-54h]  +
push dword ptr [ebp-58h]  +
push 0  +
push 0  +
push dword ptr [ebp-50h]  +
call ds:PatBlt  +
push esi  +
call ds:DeleteObject  +
xor eax eax +
inc eax  +
jmp loc_100A190  +
***
lea eax [ebp-44h] +
push eax  +
push edi  +
call ds:BeginPaint  +
mov esi eax +
lea eax [ebp-60h] +
push eax  +
push edi  +
call ds:GetClientRect  +
call ds:IsThemeActive  +
test eax eax +
jz loc_1009EDE  +
lea eax [ebp-60h] +
push eax  +
push esi  +
push edi  +
call ds:DrawThemeParentBackground  +
lea eax [ebp-44h] +
push eax  +
push edi  +
call ds:EndPaint  +
***
xor eax eax +
jmp loc_100A190  +
***
test ecx ecx +
jz loc_1009EE9  +
push 1  +
call sub_1009CF8  +
jmp loc_1009EE9  +
***
push 0FFFFFFF0h  +
push edi  +
call esi  +
push 0FFFFFFECh  +
push edi  +
mov ebx eax +
call esi  +
push 78h  +
mov esi eax +
call loc_100E1BE  +
pop ecx  +
test eax eax +
jz loc_1009F34  +
mov edx 10000h +
and ebx edx +
cmp ebx edx +
setnz cl  +
movzx ecx cl +
push ecx  +
push edi  +
mov ecx eax +
call sub_1009432  +
mov [ebp-48h] eax +
jmp loc_1009F38  +
and dword ptr [ebp-48h] 0 +
cmp dword ptr [ebp-48h] 0 +
jz loc_100A034  +
push dword ptr [ebp-48h]  +
mov ebx ds:SetWindowLongW +
push 0FFFFFFEBh  +
push edi  +
call ebx  +
test esi 400000h +
jz loc_1009F64  +
and esi 0FFBFFFFFh +
push esi  +
push 0FFFFFFECh  +
push edi  +
call ebx  +
push offset aTabstyle  +
push 0  +
call ds:OpenThemeData  +
test eax eax +
jz loc_1009F8D  +
lea ecx [ebp-4Ch] +
push ecx  +
push 0EEDh  +
push 0  +
push 0Bh  +
push eax  +
call ds:GetThemeColor  +
test eax eax +
jge loc_1009F98  +
push 0Fh  +
call ds:GetSysColor  +
mov [ebp-4Ch] eax +
push dword ptr [ebp-4Ch]  +
mov ecx [ebp-48h] +
call sub_1009972  +
jmp loc_1009EE9  +
***
cmp ebx 0FFFFFFFCh +
jnz loc_1009EE9  +
lea eax [ebp-48h] +
push eax  +
call sub_10097E4  +
test eax eax +
jl loc_100A190  +
mov eax [ebp-48h] +
mov ecx [eax] +
lea edx [ebp-4Ch] +
push edx  +
mov esi offset stru_100177C +
push esi  +
push eax  +
call dword ptr [ecx]  +
test eax eax +
jl loc_1009EE9  +
push dword ptr [ebp-4Ch]  +
push dword ptr [ebp-50h]  +
push esi  +
call LresultFromObject  +
mov esi eax +
mov eax [ebp-4Ch] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax esi +
jmp loc_100A190  +
***
mov eax edx +
mov ebx 111h +
sub eax ebx +
jz loc_100A054  +
sub eax 209h +
jz loc_1009F64  +
sub eax 0E7h +
jz loc_100A02E  +
dec eax  +
jnz loc_100A181  +
push edi  +
call sub_1009D64  +
test al al +
jnz loc_1009EE9  +
jmp loc_100A034  +
cmp dword ptr [ebp-4Ch] 0 +
jnz loc_100A03C  +
or eax 0FFFFFFFFh +
jmp loc_100A190  +
***
cmp dword ptr [ebp-50h] 1 +
setz al  +
movzx eax al +
push eax  +
push dword ptr [ebp-4Ch]  +
call sub_10094E5  +
jmp loc_1009EE9  +
***
mov eax [ebp-50h] +
shr eax 10h +
mov ecx 405h +
cmp ax cx +
jnz loc_1009EE9  +
push 0FFFFFFF4h  +
push edi  +
call esi  +
mov ecx [ebp-48h] +
movzx esi ax +
movzx eax word ptr [ebp-50h] +
push eax  +
call sub_1009AD6  +
movzx eax si +
push edi  +
or eax 4140000h +
push eax  +
push ebx  +
push edi  +
call ds:GetParent  +
push eax  +
call ds:SendMessageW  +
jmp loc_1009EE9  +
***
call sub_1009B20  +
mov [ebx] eax +
jmp loc_1009EE9  +
***
jmp loc_1009EE9  +
***
push 0  +
push ebx  +
call sub_1009B9E  +
jmp loc_1009EE9  +
***
push 1  +
jmp loc_100A0E8  +
***
cmp byte ptr [ecx+60h] 0 +
jz loc_1009EE9  +
push 0FFFFFFF0h  +
push edi  +
call esi  +
push 0FFFFFFECh  +
push edi  +
mov ebx eax +
call esi  +
mov edx 10000h +
or ebx edx +
push ebx  +
mov ebx ds:SetWindowLongW +
push 0FFFFFFF0h  +
mov esi eax +
push edi  +
or esi edx +
call ebx  +
push esi  +
push 0FFFFFFECh  +
push edi  +
call ebx  +
push 0  +
mov ecx [ebp-48h] +
call sub_100983C  +
jmp loc_1009EE9  +
***
cmp byte ptr [ecx+60h] 0 +
jnz loc_1009EE9  +
push 0FFFFFFF0h  +
push edi  +
call esi  +
push 0FFFFFFECh  +
push edi  +
mov ebx eax +
call esi  +
mov esi eax +
mov eax 0FFFEFFFFh +
and ebx eax +
push ebx  +
mov ebx ds:SetWindowLongW +
push 0FFFFFFF0h  +
push edi  +
and esi eax +
call ebx  +
push esi  +
push 0FFFFFFECh  +
push edi  +
call ebx  +
push 1  +
jmp loc_100A12C  +
***
push 1  +
jmp loc_100A176  +
push 0  +
push ebx  +
call sub_1009BE6  +
jmp loc_1009EE9  +
***
mov ebx [ebp-4Ch] +
push ebx  +
push dword ptr [ebp-50h]  +
push edx  +
push edi  +
call ds:DefWindowProcW  +
***
mov ecx [ebp-4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100E5C6  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 30h +
mov eax [ebp+arg_0] +
push esi  +
xor esi esi +
push 7F00h  +
push esi  +
mov dword_10100D0 eax +
mov [ebp+var_30.cbSize] 30h +
mov [ebp+var_30.style] 3 +
mov [ebp+var_30.lpfnWndProc] offset loc_1009DD5 +
mov [ebp+var_30.cbClsExtra] esi +
mov [ebp+var_30.cbWndExtra] 4 +
mov [ebp+var_30.hInstance] eax +
mov [ebp+var_30.hIcon] esi +
call ds:LoadCursorW  +
mov [ebp+var_30.hCursor] eax +
lea eax [ebp+var_30] +
push eax  +
mov [ebp+var_30.hbrBackground] 10h +
mov [ebp+var_30.lpszMenuName] esi +
mov [ebp+var_30.lpszClassName] offset aMonitorpalette +
mov [ebp+var_30.hIconSm] esi +
call ds:RegisterClassExW  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
imul eax [ebp+arg_4] +
test eax eax +
jle loc_100A2A7  +
mov ecx [ebp+arg_8] +
push ebx  +
push esi  +
mov esi 80h +
push edi  +
add ecx 3 +
mov [ebp+arg_4] eax +
lea edi [esi+7Fh] +
mov al [ecx] +
test al al +
jz loc_100A298  +
movzx edx al +
movzx eax byte ptr [ecx-1] +
imul eax edx +
add eax esi +
mov [ebp+arg_0] edx +
cdq   +
mov ebx edi +
idiv  ebx +
mov [ecx-1] al +
movzx eax byte ptr [ecx-2] +
imul eax [ebp+arg_0] +
add eax esi +
cdq   +
idiv  ebx +
mov [ecx-2] al +
movzx eax byte ptr [ecx-3] +
imul eax [ebp+arg_0] +
add eax esi +
cdq   +
idiv  ebx +
mov [ecx-3] al +
jmp loc_100A29C  +
and dword ptr [ecx-3] 0 +
add ecx 4 +
dec [ebp+arg_4]  +
jnz loc_100A259  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
xor eax eax +
mov ebx ecx +
cmp esi eax +
jz loc_100A2CF  +
push edi  +
mov ecx 85h +
mov edi ebx +
movs   +
pop edi  +
jmp loc_100A2E0  +
push 214h  +
push eax  +
push ebx  +
call memset  +
add esp 0Ch +
xor eax eax +
mov [ebx+228h] eax +
mov [ebx+218h] eax +
mov [ebx+214h] eax +
mov [ebx+220h] eax +
mov [ebx+21Ch] eax +
xor eax eax +
mov [ebx+226h] ax +
mov [ebx+224h] ax +
mov al [ebx+10h] +
mov [ebx+22Ch] al +
mov al [ebp+arg_4] +
mov [ebx+22Dh] al +
mov al [ebp+arg_8] +
mov [ebx+22Eh] al +
mov eax [ebp+arg_C] +
mov [ebx+230h] eax +
mov eax [ebp+arg_10] +
mov [ebx+234h] eax +
pop esi  +
mov byte ptr [ebx+22Fh] 0 +
mov byte ptr [ebx+238h] 0 +
mov byte ptr [ebx+239h] 0 +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 14h  +
***
mov edi edi +
push esi  +
lea esi [ecx+228h] +
mov eax [esi] +
test eax eax +
jz loc_100A376  +
push eax  +
call ds:DestroyWindow  +
and dword ptr [esi] 0 +
pop esi  +
retn   +
***
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
cmp byte ptr [esi+22Dh] 0 +
jnz loc_100A3FD  +
push ebx  +
mov bl [ebp+arg_0] +
lea eax [esi+22Ch] +
cmp [eax] bl +
jz loc_100A3FC  +
push edi  +
push 0FFFFFFF0h  +
push dword ptr [esi+228h]  +
mov [eax] bl +
call ds:GetWindowLongW  +
mov edi eax +
test bl bl +
jz loc_100A3D0  +
push dword ptr [esi+228h]  +
or edi 10000h +
call ds:SetFocus  +
jmp loc_100A3D6  +
and edi 0FFFEFFFFh +
push edi  +
push 0FFFFFFF0h  +
push dword ptr [esi+228h]  +
call ds:SetWindowLongW  +
xor eax eax +
test bl bl +
setz al  +
push eax  +
push 0  +
push dword ptr [esi+228h]  +
call ds:InvalidateRect  +
pop edi  +
pop ebx  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov dl [ebp+arg_0] +
lea eax [ecx+22Eh] +
cmp [eax] dl +
jz loc_100A42B  +
push 1  +
push 0  +
push dword ptr [ecx+228h]  +
mov [eax] dl +
call ds:InvalidateRect  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov al [ebp+arg_0] +
push esi  +
mov esi ecx +
cmp [esi+22Dh] al +
jz loc_100A498  +
push 0FFFFFFF0h  +
push dword ptr [esi+228h]  +
mov [esi+22Dh] al +
call ds:GetWindowLongW  +
cmp byte ptr [esi+22Dh] 0 +
jnz loc_100A474  +
cmp byte ptr [esi+22Ch] 0 +
jz loc_100A474  +
or eax 10000h +
jmp loc_100A479  +
and eax 0FFFEFFFFh +
push eax  +
push 0FFFFFFF0h  +
push dword ptr [esi+228h]  +
call ds:SetWindowLongW  +
push 1  +
push 0  +
push dword ptr [esi+228h]  +
call ds:InvalidateRect  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx+4] +
add eax [ebp+arg_0] +
mov [ecx+214h] eax +
mov eax [ecx+8] +
add eax [ebp+arg_4] +
mov [ecx+218h] eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
fild  dword ptr [esi+214h] +
fld  [ebp+arg_0] +
fmul st(1) st +
fxch  st(1) +
call _ftol2_sse  +
fild  dword ptr [esi+218h] +
mov [esi+21Ch] eax +
fmul st st(1) +
call _ftol2_sse  +
mov [esi+220h] eax +
movzx eax word ptr [esi+0Eh] +
mov dword ptr [ebp+arg_0+4] eax +
fild  dword ptr [ebp+arg_0+4] +
fmul st st(1) +
call _ftol2  +
mov [esi+224h] ax +
movzx eax word ptr [esi+0Ch] +
mov dword ptr [ebp+arg_0+4] eax +
fild  dword ptr [ebp+arg_0+4] +
fmulp st(1) st +
call _ftol2  +
mov [esi+226h] ax +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
add [ecx+21Ch] eax +
mov eax [ebp+arg_4] +
add [ecx+220h] eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov eax [esi+228h] +
test eax eax +
jnz loc_100A5C0  +
cmp [ebp+arg_4] 0 +
mov eax 50000000h +
jz loc_100A577  +
mov eax 50020000h +
movzx ecx word ptr [esi+226h] +
push esi  +
push hInstance  +
push dword ptr [esi]  +
push [ebp+hWndParent]  +
push ecx  +
movzx ecx word ptr [esi+224h] +
push ecx  +
push dword ptr [esi+220h]  +
push dword ptr [esi+21Ch]  +
push eax  +
push offset WindowName  +
push offset aMonitorpalet_0  +
push 0  +
call ds:CreateWindowExW  +
mov [esi+228h] eax +
test eax eax +
jnz loc_100A5E9  +
xor al al +
jmp loc_100A5EB  +
movzx ecx word ptr [esi+226h] +
push 4  +
push ecx  +
movzx ecx word ptr [esi+224h] +
push ecx  +
push dword ptr [esi+220h]  +
push dword ptr [esi+21Ch]  +
push 0  +
push eax  +
call ds:SetWindowPos  +
jmp loc_100A5B8  +
mov al 1 +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call ds:IsThemeActive  +
test eax eax +
jz loc_100A622  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push dword ptr [esi+228h]  +
call ds:GetParent  +
push eax  +
call ds:DrawThemeParentBackground  +
jmp loc_100A663  +
push dword ptr [esi+230h]  +
call ds:CreateSolidBrush  +
mov esi eax +
push esi  +
push [ebp+arg_0]  +
call ds:SelectObject  +
mov eax [ebp+arg_4] +
mov ecx [eax+0Ch] +
sub ecx [eax+4] +
push 0F00021h  +
push ecx  +
mov ecx [eax+8] +
sub ecx [eax] +
push ecx  +
push 0  +
push 0  +
push [ebp+arg_0]  +
call ds:PatBlt  +
push esi  +
call ds:DeleteObject  +
mov al 1 +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_4] 0 +
ja loc_100A68D  +
mov eax [ebp+arg_0] +
jb loc_100A684  +
cmp eax 0FFFFFFFFh +
ja loc_100A68D  +
mov ecx [ebp+arg_8] +
mov [ecx] eax +
xor eax eax +
jmp loc_100A698  +
mov eax [ebp+arg_8] +
or dword ptr [eax] 0FFFFFFFFh +
mov eax 80070216h +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
lea eax [ebp+arg_0] +
push eax  +
mov eax [ebp+arg_0] +
mul  [ebp+arg_4] +
push edx  +
push eax  +
call sub_100A66F  +
test eax eax +
jl loc_100A6D6  +
xor ecx ecx +
cmp [ebp+arg_0] ecx +
jbe loc_100A6D6  +
mov eax [ebp+arg_8] +
add eax 3 +
cmp byte ptr [eax] 0 +
jnz loc_100A6DC  +
inc ecx  +
add eax 4 +
cmp ecx [ebp+arg_0] +
jb loc_100A6C8  +
xor eax eax +
pop ebp  +
retn 0Ch  +
xor eax eax +
inc eax  +
jmp loc_100A6D8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
push edi  +
push 2000h  +
push 0  +
push 0  +
push 0  +
push [ebp+arg_0]  +
call ds:CopyImage  +
mov edi eax +
test edi edi +
jz loc_100A749  +
lea eax [ebp+var_18] +
push eax  +
push 18h  +
push edi  +
call ds:GetObjectW  +
test eax eax +
jz loc_100A749  +
cmp [ebp+var_4] 0 +
jz loc_100A749  +
push 20h  +
pop eax  +
cmp ax [ebp+var_6] +
jnz loc_100A749  +
push [ebp+var_4]  +
push [ebp+var_10]  +
push [ebp+var_14]  +
call sub_100A6A1  +
test eax eax +
jz loc_100A749  +
push [ebp+var_4]  +
push [ebp+var_10]  +
push [ebp+var_14]  +
call sub_100A235  +
mov eax edi +
pop edi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
fld  [ebp+arg_14] +
sub esp 28h +
fcomp  ds:dbl_1001830 +
fnstsw  ax +
test ah 41h +
jnz loc_100A792  +
fld  ds:dbl_1001828 +
fcomp  [ebp+arg_14] +
fnstsw  ax +
test ah 1 +
jnz loc_100A792  +
push 0AFh  +
push hInstance  +
call ds:LoadBitmapW  +
fld1   +
jmp loc_100A7A9  +
push 0B0h  +
push hInstance  +
call ds:LoadBitmapW  +
fld  ds:dbl_1001830 +
push edi  +
fstp  [ebp+var_10] +
mov edi eax +
mov [ebp+var_4] eax +
test edi edi +
jnz loc_100A7BD  +
xor al al +
pop edi  +
leave   +
retn 1Ch  +
lea eax [ebp+var_28] +
push eax  +
push 18h  +
push edi  +
call ds:GetObjectW  +
test eax eax +
jnz loc_100A7D7  +
push edi  +
call ds:DeleteObject  +
jmp loc_100A7B6  +
push ebx  +
push esi  +
push edi  +
call sub_100A6E6  +
mov esi eax +
test esi esi +
jz loc_100A7EF  +
push edi  +
call ds:DeleteObject  +
mov [ebp+var_4] esi +
push [ebp+arg_0]  +
call ds:CreateCompatibleDC  +
mov [ebp+var_8] eax +
test eax eax +
jnz loc_100A810  +
xor bl bl +
push [ebp+var_4]  +
call ds:DeleteObject  +
pop esi  +
mov al bl +
pop ebx  +
jmp loc_100A7B8  +
push [ebp+var_4]  +
push eax  +
call ds:SelectObject  +
fld  ds:dbl_1001820 +
fld  [ebp+arg_14] +
fcom  st(1) +
fnstsw  ax +
fstp  st(1) +
test ah 5 +
jnp loc_100A87A  +
fld  ds:dbl_1001830 +
fcom  st(1) +
fnstsw  ax +
test ah 1 +
jz loc_100A87C  +
fstp  st +
fld  ds:dbl_1001828 +
fcom  st(1) +
fnstsw  ax +
test ah 1 +
jnz loc_100A854  +
fstp  st +
fld1   +
jmp loc_100A87C  +
fld  ds:dbl_1001818 +
fcom  st(2) +
fnstsw  ax +
test ah 1 +
jnz loc_100A867  +
fstp  st +
jmp loc_100A87C  +
fstp  st(1) +
fld  ds:dbl_1001810 +
fcomp  st(2) +
fnstsw  ax +
test ah 1 +
jz loc_100A87C  +
fstp  st +
fld  st +
mov esi [ebp+arg_C] +
fmul  [ebp+var_10] +
mov eax esi +
fild  [ebp+var_24] +
cdq   +
push 0Ah  +
pop ecx  +
fld  st +
idiv  ecx +
fmul st st(2) +
mov dword ptr [ebp+arg_14+4] eax +
call _ftol2_sse  +
add eax dword ptr [ebp+arg_14+4] +
mov edi [ebp+arg_4] +
lea ecx [edi+esi] +
mov esi [ebp+arg_8] +
add eax edi +
cmp eax ecx +
jge loc_100A8CB  +
fild  [ebp+var_20] +
fmul st st(2) +
call _ftol2_sse  +
mov ecx eax +
mov eax [ebp+arg_10] +
cdq   +
push 0FFFFFFF6h  +
pop ebx  +
idiv  ebx +
sub eax ecx +
add eax esi +
add eax [ebp+arg_10] +
cmp eax esi +
jg loc_100A939  +
fstp  st(1) +
fld  [ebp+var_10] +
fmulp st(2) st +
fxch  st(1) +
fild  [ebp+var_20] +
mov byte ptr [ebp+arg_C] 0 +
mov byte ptr [ebp+arg_C+1] 0 +
mov byte ptr [ebp+arg_C+2] 0FFh +
fmul st st(1) +
mov byte ptr [ebp+arg_C+3] 1 +
call _ftol2_sse  +
fmulp st(1) st +
push [ebp+arg_C]  +
mov ebx eax +
push [ebp+var_20]  +
push [ebp+var_24]  +
push 0  +
push 0  +
push [ebp+var_8]  +
push ebx  +
call _ftol2_sse  +
push eax  +
mov eax [ebp+arg_10] +
push 0Ah  +
cdq   +
pop ecx  +
idiv  ecx +
sub esi eax +
mov eax dword ptr [ebp+arg_14+4] +
sub esi ebx +
add esi [ebp+arg_10] +
add eax edi +
push esi  +
push eax  +
push [ebp+arg_0]  +
call ds:GdiAlphaBlend  +
push [ebp+var_8]  +
call ds:DeleteDC  +
mov bl 1 +
jmp loc_100A801  +
fstp  st(2) +
jmp loc_100A8D4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0F0h +
mov eax dword_1010060 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
mov edi [ebp+arg_0] +
xor ebx ebx +
push edi  +
mov [ebp+var_74] ecx +
mov [ebp+var_70] edi +
mov [ebp+var_78] ebx +
call ds:CreateCompatibleDC  +
mov [ebp+hDC] eax +
cmp eax ebx +
jnz loc_100A98C  +
xor al al +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100E5C6  +
leave   +
retn 8  +
mov eax [esi+0Ch] +
sub eax [esi+4] +
push eax  +
mov eax [esi+8] +
sub eax [esi] +
push eax  +
push edi  +
call ds:CreateCompatibleBitmap  +
mov [ebp+var_6C] eax +
cmp eax ebx +
jnz loc_100A9B2  +
push [ebp+hDC]  +
call ds:DeleteDC  +
jmp loc_100A979  +
mov edi ds:SelectObject +
push eax  +
push [ebp+hDC]  +
call edi  +
push [ebp+var_70]  +
call ds:CreateCompatibleDC  +
mov [ebp+var_68] eax +
cmp eax ebx +
jnz loc_100A9D9  +
push [ebp+var_6C]  +
call ds:DeleteObject  +
jmp loc_100A9A7  +
mov eax [ebp+var_74] +
movzx eax word ptr [eax+234h] +
push eax  +
push hInstance  +
call ds:LoadBitmapW  +
mov [ebp+var_84] eax +
cmp eax ebx +
jnz loc_100AA18  +
push [ebp+var_68]  +
mov esi ds:DeleteDC +
call esi  +
push [ebp+var_6C]  +
call ds:DeleteObject  +
push [ebp+hDC]  +
call esi  +
jmp loc_100A979  +
lea ecx [ebp+var_B4] +
push ecx  +
push 18h  +
push eax  +
call ds:GetObjectW  +
test eax eax +
jnz loc_100AA4E  +
push [ebp+var_68]  +
call ds:DeleteDC  +
push [ebp+var_6C]  +
call ds:DeleteObject  +
push [ebp+hDC]  +
call ds:DeleteDC  +
mov al bl +
jmp loc_100A97B  +
push [ebp+var_84]  +
push [ebp+var_68]  +
call edi  +
call ds:IsThemeActive  +
test eax eax +
mov eax [ebp+var_74] +
jz loc_100AA7F  +
push ebx  +
push [ebp+hDC]  +
push dword ptr [eax+228h]  +
call ds:GetParent  +
push eax  +
call ds:DrawThemeParentBackground  +
jmp loc_100AAB3  +
push dword ptr [eax+230h]  +
call ds:CreateSolidBrush  +
push eax  +
push [ebp+hDC]  +
mov [ebp+var_6C] eax +
call edi  +
push 0F00021h  +
push dword ptr [esi+0Ch]  +
push dword ptr [esi+8]  +
push ebx  +
push ebx  +
push [ebp+hDC]  +
call ds:PatBlt  +
push [ebp+var_6C]  +
call ds:DeleteObject  +
mov edi [esi+8] +
mov ecx [esi+0Ch] +
mov eax edi +
cdq   +
and edx 3 +
add eax edx +
sar eax 2 +
sub edi eax +
mov eax ecx +
cdq   +
and edx 3 +
add edx eax +
sar edx 2 +
mov eax ecx +
sub eax edx +
mov [ebp+var_88] eax +
mov eax [esi+8] +
sub ecx [ebp+var_88] +
sub eax edi +
cdq   +
push 3  +
sub eax edx +
push 2  +
sar eax 1 +
push ecx  +
mov [ebp+var_80] eax +
call ds:MulDiv  +
push 3  +
push [ebp+hDC]  +
mov [ebp+var_7C] eax +
call ds:SetStretchBltMode  +
push 0CC0020h  +
push [ebp+var_AC]  +
mov [ebp+var_6C] eax +
push [ebp+var_B0]  +
push ebx  +
push ebx  +
push [ebp+var_68]  +
push [ebp+var_88]  +
push edi  +
push [ebp+var_7C]  +
push [ebp+var_80]  +
push [ebp+hDC]  +
call ds:StretchBlt  +
mov eax [ebp+var_74] +
cmp [eax+239h] bl +
jz loc_100AB6A  +
fild  [ebp+var_88] +
push ecx  +
push ecx  +
fidiv  [ebp+var_AC] +
fstp  [esp+104h+var_104] +
push [ebp+var_88]  +
push edi  +
mov edi [ebp+var_7C] +
push edi  +
push [ebp+var_80]  +
push [ebp+hDC]  +
call sub_100A755  +
jmp loc_100AB6D  +
mov edi [ebp+var_7C] +
push [ebp+var_6C]  +
push [ebp+hDC]  +
call ds:SetStretchBltMode  +
mov eax [esi+8] +
mov [ebp+Rect.right] eax +
lea eax [ebp+var_60] +
push eax  +
push 326h  +
push ebx  +
mov [ebp+Rect.left] ebx +
mov [ebp+Rect.top] ebx +
mov [ebp+Rect.bottom] edi +
call ds:GetThemeSysFont  +
test eax eax +
jl loc_100ABB5  +
lea eax [ebp+var_60] +
push eax  +
call ds:CreateFontIndirectW  +
mov [ebp+var_78] eax +
push [ebp+var_78]  +
push [ebp+hDC]  +
call ds:SelectObject  +
push 1  +
push [ebp+hDC]  +
mov [ebp+var_6C] eax +
call ds:SetBkMode  +
lea eax [ebp+var_F0] +
push eax  +
push [ebp+hDC]  +
call ds:GetTextMetricsW  +
test eax eax +
jz loc_100AC1D  +
cmp [ebp+var_F0.tmAscent] edi +
jge loc_100AC1D  +
push 8  +
call ds:GetSysColor  +
push eax  +
push [ebp+hDC]  +
call ds:SetTextColor  +
mov edi [ebp+var_74] +
push 40025h  +
lea eax [ebp+Rect] +
push eax  +
push 0FFFFFFFFh  +
lea eax [edi+12h] +
push eax  +
push [ebp+hDC]  +
call ds:DrawTextW  +
jmp loc_100AC20  +
mov edi [ebp+var_74] +
cmp [ebp+var_6C] ebx +
jz loc_100AC31  +
push [ebp+var_6C]  +
push [ebp+hDC]  +
call ds:SelectObject  +
push [ebp+var_78]  +
call ds:DeleteObject  +
push [ebp+var_68]  +
call ds:DeleteDC  +
push [ebp+var_84]  +
call ds:DeleteObject  +
mov eax [esi+0Ch] +
sub eax [esi+4] +
cmp [edi+22Eh] bl +
jz loc_100AC88  +
mov ecx [esi+8] +
sub ecx [esi] +
mov byte ptr [ebp+var_68] bl +
mov byte ptr [ebp+var_68+1] bl +
mov byte ptr [ebp+var_68+2] 64h +
mov byte ptr [ebp+var_68+3] bl +
push [ebp+var_68]  +
push eax  +
push ecx  +
push ebx  +
push ebx  +
push [ebp+hDC]  +
push eax  +
push ecx  +
push ebx  +
push ebx  +
push [ebp+var_70]  +
call ds:GdiAlphaBlend  +
jmp loc_100ACE0  +
push 0CC0020h  +
push ebx  +
push ebx  +
push [ebp+hDC]  +
push eax  +
mov eax [esi+8] +
sub eax [esi] +
push eax  +
push ebx  +
push ebx  +
push [ebp+var_70]  +
call ds:BitBlt  +
cmp [edi+22Ch] bl +
jz loc_100ACBD  +
cmp [edi+22Dh] bl +
jnz loc_100ACBD  +
push esi  +
push [ebp+var_70]  +
call sub_100C0AF  +
cmp [edi+238h] bl +
jz loc_100ACE0  +
cmp [edi+22Dh] bl +
jnz loc_100ACE0  +
push 0Dh  +
call ds:GetSysColorBrush  +
push eax  +
push esi  +
push [ebp+var_70]  +
call ds:FrameRect  +
cmp [edi+22Eh] bl +
jnz loc_100AD02  +
cmp [edi+22Dh] bl +
jnz loc_100AD02  +
cmp [edi+22Fh] bl +
jz loc_100AD02  +
push esi  +
push [ebp+var_70]  +
call ds:DrawFocusRect  +
mov bl 1 +
jmp loc_100AA3E  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 6Ch +
mov eax dword_1010060 +
xor eax ebp +
mov [ebp-4] eax +
mov eax [ebp+10h] +
push ebx  +
mov ebx ds:GetWindowLongW +
push esi  +
mov esi [ebp+8] +
push edi  +
mov [ebp-48h] eax +
mov eax [ebp+14h] +
push 0FFFFFFEBh  +
push esi  +
mov [ebp-4Ch] eax +
call ebx  +
mov edx [ebp+0Ch] +
mov edi eax +
cmp edx 14h +
ja loc_100AE39  +
jz loc_100AE18  +
mov eax edx +
dec eax  +
jz loc_100AE05  +
sub eax 6 +
jz loc_100ADD2  +
dec eax  +
jz loc_100AD9F  +
sub eax 7 +
jnz loc_100AE57  +
lea eax [ebp-44h] +
push eax  +
push esi  +
call ds:BeginPaint  +
mov ebx eax +
lea eax [ebp-5Ch] +
push eax  +
push esi  +
call ds:GetClientRect  +
lea eax [ebp-5Ch] +
push eax  +
push ebx  +
mov ecx edi +
call sub_100A942  +
lea eax [ebp-44h] +
push eax  +
push esi  +
call ds:EndPaint  +
jmp loc_100AF02  +
lea eax [ebp-5Ch] +
push eax  +
push esi  +
call ds:GetClientRect  +
push esi  +
call ds:GetDC  +
mov ebx eax +
lea eax [ebp-5Ch] +
push eax  +
push ebx  +
call ds:DrawFocusRect  +
push ebx  +
push esi  +
call ds:ReleaseDC  +
mov byte ptr [edi+22Fh] 0 +
jmp loc_100AF02  +
lea eax [ebp-5Ch] +
push eax  +
push esi  +
call ds:GetClientRect  +
push esi  +
call ds:GetDC  +
mov ebx eax +
lea eax [ebp-5Ch] +
push eax  +
push ebx  +
call ds:DrawFocusRect  +
push ebx  +
push esi  +
call ds:ReleaseDC  +
mov byte ptr [edi+22Fh] 1 +
jmp loc_100AF02  +
mov eax [ebp-4Ch] +
push dword ptr [eax]  +
push 0FFFFFFEBh  +
push esi  +
call ds:SetWindowLongW  +
jmp loc_100AF02  +
lea eax [ebp-5Ch] +
push eax  +
push esi  +
call ds:GetClientRect  +
lea eax [ebp-5Ch] +
push eax  +
push dword ptr [ebp-48h]  +
mov ecx edi +
call sub_100A5F5  +
xor eax eax +
inc eax  +
jmp loc_100AF04  +
mov ecx edx +
mov eax 100h +
sub ecx eax +
jz loc_100AECE  +
sub ecx eax +
jz loc_100AE89  +
dec ecx  +
jz loc_100AE80  +
sub ecx 0A2h +
jz loc_100AE6A  +
push dword ptr [ebp-4Ch]  +
push dword ptr [ebp-48h]  +
push edx  +
push esi  +
call ds:DefWindowProcW  +
jmp loc_100AF04  +
xor ebx ebx +
push ebx  +
push ebx  +
push esi  +
call ds:InvalidateRect  +
mov [edi+238h] bl +
jmp loc_100AF02  +
cmp byte ptr [edi+22Dh] 0 +
jmp loc_100AEDB  +
xor ebx ebx +
cmp [edi+22Dh] bl +
jnz loc_100AF02  +
lea eax [edi+238h] +
cmp [eax] bl +
jnz loc_100AF02  +
mov byte ptr [eax] 1 +
xor eax eax +
lea edi [ebp-68h] +
stos   +
stos   +
stos   +
lea eax [ebp-6Ch] +
push eax  +
mov dword ptr [ebp-6Ch] 10h +
mov dword ptr [ebp-68h] 2 +
mov [ebp-64h] esi +
call ds:TrackMouseEvent  +
push ebx  +
push ebx  +
push esi  +
call ds:InvalidateRect  +
jmp loc_100AF02  +
cmp byte ptr [edi+22Dh] 0 +
jnz loc_100AF02  +
cmp dword ptr [ebp-48h] 20h +
jnz loc_100AF02  +
push 0FFFFFFF4h  +
push esi  +
call ebx  +
movzx eax ax +
movzx eax ax +
push esi  +
or eax 4050000h +
push eax  +
push 111h  +
push esi  +
call ds:GetParent  +
push eax  +
call ds:SendMessageW  +
xor eax eax +
mov ecx [ebp-4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100E5C6  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 30h +
mov eax [ebp+arg_0] +
push esi  +
xor esi esi +
push 7F00h  +
push esi  +
mov [ebp+var_30.cbSize] 30h +
mov [ebp+var_30.style] 3 +
mov [ebp+var_30.lpfnWndProc] offset loc_100AD0E +
mov [ebp+var_30.cbClsExtra] esi +
mov [ebp+var_30.cbWndExtra] 4 +
mov [ebp+var_30.hInstance] eax +
mov [ebp+var_30.hIcon] esi +
call ds:LoadCursorW  +
mov [ebp+var_30.hCursor] eax +
lea eax [ebp+var_30] +
push eax  +
mov [ebp+var_30.hbrBackground] 10h +
mov [ebp+var_30.lpszMenuName] esi +
mov [ebp+var_30.lpszClassName] offset aMonitorpalet_0 +
mov [ebp+var_30.hIconSm] esi +
call ds:RegisterClassExW  +
pop esi  +
leave   +
retn 4  +
***
mov dword ptr [ecx] offset off_1001838 +
mov ecx [ecx+8] +
mov eax [ecx] +
push ecx  +
call dword ptr [eax+8]  +
retn   +
***
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_100AF84  +
test [ebp+arg_0] 1 +
jz loc_100AFBD  +
push esi  +
call sub_100E22D  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+0Ch] +
and dword ptr [eax] 0 +
mov eax 80004001h +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+14h] +
and dword ptr [eax] 0 +
mov eax 80004001h +
pop ebp  +
retn 10h  +
***
mov eax 80004001h +
retn 18h  +
***
mov eax 80004001h +
retn 24h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov eax [eax+8] +
push dword ptr [ebp+0Ch]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+1Ch]  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+8] +
push esi  +
xor eax eax +
push edi  +
mov edi [ebp+0Ch] +
mov [edi] ax +
mov esi [ebx+0Ch] +
neg esi  +
sbb esi esi +
and esi 7FFEFEF8h +
add esi 80010108h +
js loc_100B079  +
mov ecx [ebx+10h] +
call sub_1009B5F  +
cmp eax 0FFFFFFFFh +
jz loc_100B079  +
push 3  +
pop eax  +
mov [edi] ax +
mov ecx [ebx+10h] +
call sub_1009B5F  +
inc eax  +
mov [edi+8] eax +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
push esi  +
mov esi [eax+0Ch] +
neg esi  +
sbb esi esi +
and esi 7FFEFEF8h +
add esi 80010108h +
js loc_100B0C6  +
mov ecx [eax+10h] +
call sub_1009B20  +
cmp eax 0FFFFFFFFh +
mov ecx [ebp+0Ch] +
jle loc_100B0C1  +
push 3  +
pop edx  +
inc eax  +
mov [ecx] dx +
mov [ecx+8] eax +
jmp loc_100B0C6  +
xor eax eax +
mov [ecx] ax +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx+0Ch] +
neg eax  +
sbb eax eax +
and eax 7FFEFEF8h +
add eax 80010108h +
js loc_100B10B  +
mov edx [ebp+arg_0] +
cmp word ptr [edx] 3 +
jnz loc_100B106  +
mov edx [edx+8] +
test edx edx +
jz loc_100B10B  +
mov ecx [ecx+10h] +
movzx ecx word ptr [ecx+6] +
dec edx  +
cmp edx ecx +
jb loc_100B10B  +
mov eax 80070057h +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+0Ch] +
push edi  +
xor ebx ebx +
push 4  +
pop ecx  +
mov edi offset dword_1001FC0 +
xor eax eax +
cmps   +
jnz loc_100B146  +
mov eax [ebp+8] +
mov ecx [ebp+10h] +
mov [ecx] eax +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov esi [ebp+0Ch] +
push 4  +
pop ecx  +
mov edi offset dword_1001FD0 +
xor eax eax +
cmps   +
jz loc_100B12F  +
mov esi [ebp+0Ch] +
push 4  +
pop ecx  +
mov edi offset dword_100137C +
xor eax eax +
cmps   +
jz loc_100B12F  +
mov eax [ebp+10h] +
mov [eax] ebx +
mov ebx 80004002h +
jmp loc_100B13D  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+8] +
dec dword ptr [ecx+4]  +
mov eax [ecx+4] +
jnz loc_100B192  +
push 1  +
call sub_100AFA3  +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+20h] +
xor eax eax +
push edi  +
mov edi [ebp+8] +
mov [esi] ax +
lea eax [ebp+10h] +
push eax  +
mov ecx edi +
call sub_100B0D2  +
test eax eax +
jl loc_100B261  +
mov edx [ebp+18h] +
test edx edx +
jnz loc_100B212  +
cmp dword ptr [ebp+0Ch] 7 +
jnz loc_100B1DF  +
push 3  +
pop ecx  +
mov [esi] cx +
mov dword ptr [esi+8] 1 +
jmp loc_100B261  +
cmp dword ptr [ebp+0Ch] 8 +
jnz loc_100B1F7  +
push 3  +
pop ecx  +
mov [esi] cx +
mov ecx [edi+10h] +
movzx ecx word ptr [ecx+6] +
mov [esi+8] ecx +
jmp loc_100B261  +
mov eax [edi+8] +
mov ecx [eax] +
push esi  +
sub esp 10h +
mov edi esp +
push dword ptr [ebp+0Ch]  +
lea esi [ebp+10h] +
movs   +
movs   +
movs   +
push eax  +
movs   +
call dword ptr [ecx+5Ch]  +
jmp loc_100B261  +
mov ecx [ebp+0Ch] +
cmp ecx 2 +
jz loc_100B242  +
cmp ecx 5 +
jz loc_100B242  +
cmp ecx 6 +
jz loc_100B23A  +
cmp ecx 1 +
jz loc_100B23A  +
cmp ecx 3 +
jz loc_100B25E  +
cmp ecx 4 +
jz loc_100B25E  +
mov eax 80070057h +
jmp loc_100B261  +
cmp edx 1 +
jle loc_100B25E  +
dec edx  +
jmp loc_100B253  +
mov ecx [edi+10h] +
movzx ecx word ptr [ecx+6] +
cmp ecx 1 +
jbe loc_100B25E  +
cmp edx ecx +
jnb loc_100B25E  +
inc edx  +
push 3  +
pop ecx  +
mov [esi+8] edx +
mov [esi] cx +
jmp loc_100B261  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebp  +
retn 1Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+1Ch] +
and dword ptr [eax] 0 +
mov ecx [ebp+8] +
lea eax [ebp+0Ch] +
push eax  +
call sub_100B0D2  +
test eax eax +
jl loc_100B28A  +
xor eax eax +
inc eax  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+8] +
mov eax [ecx+0Ch] +
neg eax  +
sbb eax eax +
and eax 7FFEFEF8h +
add eax 80010108h +
js loc_100B2BA  +
mov ecx [ecx+10h] +
movzx ecx word ptr [ecx+6] +
mov edx [ebp+0Ch] +
mov [edx] ecx +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+8] +
lea eax [ebp+0Ch] +
push eax  +
call sub_100B0D2  +
test eax eax +
jl loc_100B2DD  +
mov eax 80020003h +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+0Ch] +
and dword ptr [eax] 0 +
mov eax [ebp+20h] +
and dword ptr [eax] 0 +
mov ecx [ebp+8] +
lea eax [ebp+10h] +
push eax  +
call sub_100B0D2  +
test eax eax +
jl loc_100B30C  +
mov eax 80020003h +
pop ebp  +
retn 1Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+1Ch] +
and dword ptr [esi] 0 +
push edi  +
mov edi [ebp+8] +
lea eax [ebp+0Ch] +
push eax  +
mov ecx edi +
call sub_100B0D2  +
test eax eax +
jl loc_100B357  +
cmp dword ptr [ebp+14h] 0 +
jnz loc_100B352  +
mov eax [edi+8] +
mov ecx [eax] +
push esi  +
sub esp 10h +
mov edi esp +
lea esi [ebp+0Ch] +
movs   +
movs   +
movs   +
push eax  +
movs   +
call dword ptr [ecx+44h]  +
jmp loc_100B357  +
mov eax 80020003h +
pop edi  +
pop esi  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+8] +
push edi  +
mov edi [ebp+1Ch] +
and dword ptr [edi] 0 +
lea eax [ebp+0Ch] +
push eax  +
mov ecx esi +
call sub_100B0D2  +
mov ebx eax +
test ebx ebx +
jl loc_100B3D3  +
mov eax [ebp+14h] +
test eax eax +
jnz loc_100B3A5  +
mov eax [esi+8] +
mov ecx [eax] +
push edi  +
sub esp 10h +
mov edi esp +
lea esi [ebp+0Ch] +
movs   +
movs   +
movs   +
push eax  +
movs   +
call dword ptr [ecx+28h]  +
mov ebx eax +
jmp loc_100B3D3  +
mov ecx [esi+10h] +
dec eax  +
push eax  +
call sub_1009575  +
test eax eax +
jnz loc_100B3BA  +
mov eax 8000FFFFh +
jmp loc_100B3D5  +
mov ecx eax +
call sub_100A37D  +
push eax  +
call ds:SysAllocString  +
mov [edi] eax +
test eax eax +
jnz loc_100B3D3  +
mov ebx 8007000Eh +
mov eax ebx +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+1Ch] +
xor eax eax +
push edi  +
mov edi [ebp+8] +
mov [esi] ax +
lea eax [ebp+0Ch] +
push eax  +
mov ecx edi +
call sub_100B0D2  +
test eax eax +
jl loc_100B42C  +
cmp dword ptr [ebp+14h] 0 +
push 3  +
pop ecx  +
mov [esi] cx +
jnz loc_100B417  +
mov dword ptr [esi+8] 13h +
jmp loc_100B42C  +
mov ecx [edi+10h] +
xor edx edx +
cmp [ecx+60h] dl +
setz dl  +
lea edx ds:29h[edx*4] +
mov [esi+8] edx +
pop edi  +
pop esi  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+1Ch] +
xor eax eax +
push edi  +
mov edi [ebp+8] +
mov [esi] ax +
lea eax [ebp+0Ch] +
push eax  +
mov ecx edi +
call sub_100B0D2  +
mov ebx eax +
test ebx ebx +
jl loc_100B4E9  +
mov eax [ebp+14h] +
test eax eax +
jnz loc_100B480  +
mov eax [edi+8] +
mov ecx [eax] +
push esi  +
sub esp 10h +
mov edi esp +
lea esi [ebp+0Ch] +
movs   +
movs   +
movs   +
push eax  +
movs   +
call dword ptr [ecx+38h]  +
mov ebx eax +
jmp loc_100B4E9  +
push 3  +
pop ecx  +
mov [esi] cx +
mov ecx [edi+10h] +
cmp byte ptr [ecx+60h] 0 +
jz loc_100B4AA  +
dec eax  +
mov dword ptr [esi+8] 40h +
mov ecx [edi+10h] +
push eax  +
call sub_1009C2D  +
test al al +
jz loc_100B4E9  +
or dword ptr [esi+8] 10h +
jmp loc_100B4E9  +
call sub_1009B20  +
mov ecx [ebp+14h] +
lea edx [ecx-1] +
mov dword ptr [esi+8] 300000h +
cmp eax edx +
jnz loc_100B4E9  +
dec ecx  +
mov dword ptr [esi+8] 300002h +
push ecx  +
mov ecx [edi+10h] +
call sub_1009575  +
test eax eax +
jz loc_100B4E9  +
mov edi [eax+228h] +
call ds:GetFocus  +
cmp eax edi +
jnz loc_100B4E9  +
or dword ptr [esi+8] 4 +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+1Ch] +
and dword ptr [eax] 0 +
mov ecx [ebp+8] +
lea eax [ebp+0Ch] +
push eax  +
call sub_100B0D2  +
test eax eax +
jl loc_100B517  +
mov eax 80020003h +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+8] +
push edi  +
lea eax [ebp+10h] +
push eax  +
mov ecx esi +
call sub_100B0D2  +
mov edi eax +
test edi edi +
jl loc_100B585  +
mov eax [ebp+18h] +
test eax eax +
jnz loc_100B54C  +
sub esp 10h +
mov edi esp +
push dword ptr [ebp+0Ch]  +
jmp loc_100B573  +
test dword ptr [ebp+0Ch] 0FFFFFFFCh +
jz loc_100B55C  +
mov edi 80070057h +
jmp loc_100B585  +
mov ecx [esi+10h] +
dec eax  +
push eax  +
call sub_1009AD6  +
test byte ptr [ebp+0Ch] 1 +
jz loc_100B585  +
sub esp 10h +
mov edi esp +
push 1  +
mov eax [esi+8] +
mov ecx [eax] +
lea esi [ebp+10h] +
movs   +
movs   +
movs   +
push eax  +
movs   +
call dword ptr [ecx+54h]  +
mov edi eax +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov ecx [ebp+10h] +
push ebx  +
mov ebx [ebp+18h] +
push esi  +
mov esi [ebp+8] +
xor eax eax +
push edi  +
mov edi [ebp+14h] +
mov [ebx] eax +
mov [edi] eax +
mov [ecx] eax +
mov ecx [ebp+0Ch] +
mov [ecx] eax +
lea eax [ebp+1Ch] +
push eax  +
mov ecx esi +
call sub_100B0D2  +
mov [ebp+18h] eax +
test eax eax +
jl loc_100B661  +
mov eax [ebp+24h] +
test eax eax +
jnz loc_100B5F6  +
mov eax [esi+8] +
mov ecx [eax] +
sub esp 10h +
mov edi esp +
lea esi [ebp+1Ch] +
movs   +
push ebx  +
push dword ptr [ebp+14h]  +
movs   +
push dword ptr [ebp+10h]  +
movs   +
push dword ptr [ebp+0Ch]  +
movs   +
push eax  +
call dword ptr [ecx+58h]  +
mov [ebp+18h] eax +
jmp loc_100B661  +
mov ecx [esi+10h] +
dec eax  +
push eax  +
call sub_1009575  +
test eax eax +
jnz loc_100B60B  +
mov eax 8000FFFFh +
jmp loc_100B664  +
mov ecx [eax+21Ch] +
mov [ebp-8] ecx +
mov ecx [eax+220h] +
mov [ebp-4] ecx +
movzx ecx word ptr [eax+226h] +
movzx eax word ptr [eax+224h] +
mov [ebp+14h] eax +
push 1  +
lea eax [ebp-8] +
push eax  +
mov eax [esi+10h] +
push 0  +
push dword ptr [eax+6Ch]  +
mov [ebp+8] ecx +
call ds:MapWindowPoints  +
mov eax [ebp-8] +
mov ecx [ebp+0Ch] +
mov [ecx] eax +
mov eax [ebp-4] +
mov ecx [ebp+10h] +
mov [ecx] eax +
movzx eax word ptr [ebp+14h] +
mov [edi] eax +
movzx eax word ptr [ebp+8] +
mov [ebx] eax +
mov eax [ebp+18h] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 24h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
mov ebx [ebp+8] +
push esi  +
xor eax eax +
push edi  +
mov edi [ebp+14h] +
mov [edi] ax +
mov esi [ebx+0Ch] +
neg esi  +
sbb esi esi +
and esi 7FFEFEF8h +
add esi 80010108h +
js loc_100B6DB  +
mov eax [ebp+0Ch] +
and dword ptr [edi+8] 0 +
mov [ebp-8] eax +
mov eax [ebp+10h] +
push 3  +
mov [ebp-4] eax +
pop eax  +
mov [edi] ax +
push 1  +
lea eax [ebp-8] +
push eax  +
mov eax [ebx+10h] +
push dword ptr [eax+6Ch]  +
push 0  +
call ds:MapWindowPoints  +
push dword ptr [ebp-4]  +
mov ecx [ebx+10h] +
push dword ptr [ebp-8]  +
call sub_1009C73  +
cmp eax 0FFFFFFFFh +
jz loc_100B6DB  +
inc eax  +
mov [edi+8] eax +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
push esi  +
mov esi ecx +
xor ecx ecx +
inc ecx  +
mov [esi+4] ecx +
mov [esi+0Ch] ecx +
mov ecx [ebp+arg_0] +
mov dword ptr [esi] offset off_1001838 +
mov [esi+8] eax +
mov [esi+10h] ecx +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+ppvObject] +
and dword ptr [esi] 0 +
lea eax [ebp+ppvObject] +
push eax  +
push offset stru_100177C  +
push 0FFFFFFFCh  +
push [ebp+hWnd]  +
call CreateStdAccessibleObject  +
mov ebx eax +
test ebx ebx +
jl loc_100B782  +
push edi  +
push 0FFFFFFEBh  +
push [ebp+hWnd]  +
call ds:GetWindowLongW  +
push 14h  +
mov edi eax +
call loc_100E1BE  +
pop ecx  +
test eax eax +
jz loc_100B76B  +
push [ebp+ppvObject]  +
mov ecx eax +
push edi  +
call sub_100B6E9  +
jmp loc_100B76D  +
xor eax eax +
mov [esi] eax +
pop edi  +
test eax eax +
jnz loc_100B779  +
mov ebx 8007000Eh +
mov eax [ebp+ppvObject] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_1006934  +
mov dword ptr [esi] offset off_10018A8 +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_10018A8 +
call sub_100695E  +
test byte ptr [ebp+8] 1 +
jz loc_100B7D1  +
push esi  +
call sub_100E22D  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 220h +
mov eax dword_1010060 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push edi  +
mov [ebp+hWnd] eax +
mov edi ecx +
mov ecx [edi+0Ch] +
lea eax [ebp+var_21C] +
push eax  +
call sub_10025E9  +
test al al +
jz loc_100B8EB  +
push ebx  +
mov ebx ds:SendMessageW +
push esi  +
xor eax eax +
xor esi esi +
cmp ax word ptr [ebp+var_21C] +
jnb loc_100B8D6  +
mov ecx [edi+0Ch] +
push esi  +
call sub_1002631  +
test eax eax +
jz loc_100B8FA  +
mov ecx [eax] +
test ecx ecx +
jz loc_100B8FA  +
movzx eax si +
mov [ebp+lParam] eax +
mov eax [ecx+420h] +
mov [ebp+var_214] eax +
mov eax [ecx+424h] +
mov [ebp+var_210] eax +
mov ax [ecx+210h] +
mov [ebp+var_20A] ax +
mov ax [ecx+212h] +
mov [ebp+var_20C] ax +
mov al [ecx+428h] +
mov [ebp+var_208] al +
push 100h  +
lea eax [ebp+Buffer] +
push eax  +
call sub_10093D3  +
test eax eax +
jl loc_100B8FA  +
lea eax [ebp+lParam] +
push eax  +
mov eax [edi+0Ch] +
xor ecx ecx +
cmp [eax+24h] si +
setnz cl  +
push ecx  +
push 401h  +
push [ebp+hWnd]  +
call ebx  +
inc esi  +
cmp si word ptr [ebp+var_21C] +
jb loc_100B82E  +
push 0  +
push 0  +
push 402h  +
push [ebp+hWnd]  +
call ebx  +
mov al 1 +
pop esi  +
pop ebx  +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop edi  +
call sub_100E5C6  +
leave   +
retn 4  +
xor al al +
jmp loc_100B8E9  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 220h +
mov eax dword_1010060 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push edi  +
mov [ebp+hWnd] eax +
mov edi ecx +
mov ecx [edi+0Ch] +
lea eax [ebp+var_21C] +
push eax  +
call sub_10025E9  +
test al al +
jz loc_100B9F0  +
push ebx  +
mov ebx ds:SendMessageW +
push esi  +
xor eax eax +
xor esi esi +
cmp ax word ptr [ebp+var_21C] +
jnb loc_100B9DB  +
mov ecx [edi+0Ch] +
push esi  +
call sub_1002631  +
test eax eax +
jz loc_100B9FF  +
mov eax [eax] +
test eax eax +
jz loc_100B9FF  +
movzx ecx si +
mov [ebp+lParam] ecx +
mov ecx [eax+420h] +
mov [ebp+var_214] ecx +
mov ecx [eax+424h] +
mov [ebp+var_210] ecx +
mov cx [eax+210h] +
mov [ebp+var_20A] cx +
mov ax [eax+212h] +
mov [ebp+var_20C] ax +
lea eax [ebp+lParam] +
push eax  +
mov eax [edi+0Ch] +
xor ecx ecx +
cmp [eax+24h] si +
setnz cl  +
push ecx  +
push 409h  +
push [ebp+hWnd]  +
call ebx  +
inc esi  +
cmp si word ptr [ebp+var_21C] +
jb loc_100B954  +
push 0  +
push 0  +
push 402h  +
push [ebp+hWnd]  +
call ebx  +
mov al 1 +
pop esi  +
pop ebx  +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop edi  +
call sub_100E5C6  +
leave   +
retn 4  +
xor al al +
jmp loc_100B9EE  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 304h +
mov eax dword_1010060 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
mov esi ecx +
mov eax [esi+10h] +
mov ecx [eax] +
xor bl bl +
cmp dword ptr [ecx+4] 0 +
push edi  +
jnz loc_100BA31  +
inc bl  +
mov eax [eax] +
cmp byte ptr [eax+42Ah] 0 +
movzx edx word ptr [eax+8] +
movzx edi word ptr [eax+0Ah] +
jnz loc_100BA46  +
mov bl 1 +
test bl bl +
jnz loc_100BA66  +
cmp [ecx+42Bh] bl +
jz loc_100BA5B  +
movzx eax dx +
movzx edx di +
movzx edi ax +
push edi  +
push edx  +
call sub_1008A94  +
test al al +
jnz loc_100BABB  +
mov edi ds:LoadStringW +
push 80h  +
lea eax [ebp+Caption] +
push eax  +
push 66h  +
push hInstance  +
call edi  +
test eax eax +
jz loc_100BADB  +
push 100h  +
lea eax [ebp+Text] +
push eax  +
push 77h  +
push hInstance  +
call edi  +
test eax eax +
jz loc_100BADB  +
push 30h  +
lea eax [ebp+Caption] +
push eax  +
lea eax [ebp+Text] +
push eax  +
push dword ptr [esi+8]  +
call ds:MessageBoxW  +
jmp loc_100BADB  +
push dword ptr [esi+8]  +
call sub_100690E  +
cmp eax 6 +
mov eax [esi+10h] +
mov ecx [eax] +
jnz loc_100BAD6  +
call sub_1009304  +
mov al 1 +
jmp loc_100BADD  +
call sub_1008B49  +
xor al al +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100E5C6  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+8] +
push esi  +
push edi  +
push 0FFFFFFEBh  +
push ebx  +
call ds:GetWindowLongW  +
mov esi eax +
mov eax [ebp+0Ch] +
push 2  +
pop edi  +
sub eax edi +
jz loc_100BCCB  +
sub eax 4Ch +
jz loc_100BBC5  +
sub eax 0C2h +
jz loc_100BB65  +
sub eax 28h +
jz loc_100BB48  +
sub eax 1E2h +
jnz loc_100BB83  +
mov eax [esi+0Ch] +
mov ecx [eax+10h] +
call sub_10022DF  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+0Ch]  +
jmp loc_100BCD7  +
push 437h  +
push ebx  +
call ds:GetDlgItem  +
cmp [ebp+14h] eax +
jnz loc_100BB83  +
push dword ptr [ebp+10h]  +
mov ecx esi +
call sub_1006A32  +
jmp loc_100BB83  +
push 20h  +
call loc_100E1BE  +
pop ecx  +
test eax eax +
jz loc_100BB7D  +
push ebx  +
mov ecx eax +
call sub_100B78F  +
mov esi eax +
jmp loc_100BB7F  +
xor esi esi +
test esi esi +
jnz loc_100BB8A  +
xor eax eax +
jmp loc_100BCDA  +
push esi  +
push 0FFFFFFEBh  +
push ebx  +
call ds:SetWindowLongW  +
push dword ptr [ebp+14h]  +
mov ecx esi +
call sub_1006B03  +
test al al +
jnz loc_100BBAC  +
mov eax [esi] +
push 1  +
mov ecx esi +
call dword ptr [eax]  +
jmp loc_100BB83  +
***
push 43Ah  +
push ebx  +
call ds:GetDlgItem  +
push eax  +
mov ecx esi +
call sub_100B7DD  +
jmp loc_100BCD7  +
mov eax [ebp+14h] +
mov eax [eax+8] +
cmp eax 0FFFFFF2Fh +
jz loc_100BCBA  +
cmp eax 0FFFFFF31h +
jz loc_100BC6A  +
cmp eax 0FFFFFF32h +
jz loc_100BC40  +
cmp eax 0FFFFFF38h +
jnz loc_100BB83  +
mov ecx esi +
call sub_1006A01  +
test al al +
jz loc_100BB83  +
push 43Ah  +
push ebx  +
call ds:GetDlgItem  +
push eax  +
mov ecx esi +
call sub_100B903  +
mov eax [esi+0Ch] +
mov cx [eax+24h] +
cmp cx [eax+26h] +
jnz loc_100BC1E  +
push 3  +
pop edi  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+0Ch]  +
push edi  +
push 0  +
push 470h  +
push ebx  +
call ds:GetParent  +
push eax  +
call ds:PostMessageW  +
jmp loc_100BCD7  +
push 3  +
push 0  +
push 10h  +
mov ecx esi +
call sub_1006A52  +
mov eax [esi] +
lea ecx [ebp+14h] +
push ecx  +
mov ecx esi +
call dword ptr [eax+8]  +
test al al +
jz loc_100BCD7  +
push dword ptr [ebp+14h]  +
push 0  +
push ebx  +
call ds:SetWindowLongW  +
jmp loc_100BCD7  +
mov edi 435h +
push edi  +
push ebx  +
call ds:IsDlgButtonChecked  +
mov ecx esi +
cmp eax 1 +
jnz loc_100BCAD  +
call sub_100BA08  +
test al al +
jnz loc_100BC8B  +
push 0FFFFFFFFh  +
jmp loc_100BC9D  +
mov eax [esi] +
lea ecx [ebp+14h] +
push ecx  +
mov ecx esi +
call dword ptr [eax+4]  +
test al al +
jz loc_100BCA6  +
push dword ptr [ebp+14h]  +
push 0  +
push ebx  +
call ds:SetWindowLongW  +
push 2  +
push edi  +
mov ecx esi +
jmp loc_100BCB1  +
push 2  +
push 0  +
push 10h  +
call sub_1006A52  +
jmp loc_100BCD7  +
push 1  +
push 0  +
push 10h  +
mov ecx esi +
call sub_1006A52  +
push 0  +
jmp loc_100BC5F  +
***
test esi esi +
jz loc_100BCD7  +
mov eax [esi] +
push 1  +
mov ecx esi +
call dword ptr [eax]  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax 2218h +
call __alloca_probe  +
mov eax dword_1010060 +
xor eax ebp +
mov [ebp-4] eax +
push ebx  +
push esi  +
push edi  +
mov edi ds:SendDlgItemMessageW +
mov esi ecx +
mov eax [esi+0Ch] +
mov eax [eax+10h] +
push 1  +
push dword ptr [eax+8]  +
mov byte ptr [ebp-2205h] 0 +
push 30h  +
pop ebx  +
push ebx  +
push 437h  +
push dword ptr [esi+8]  +
call edi  +
mov eax [esi+0Ch] +
mov eax [eax+10h] +
push 1  +
push dword ptr [eax+4]  +
push ebx  +
push 438h  +
push dword ptr [esi+8]  +
call edi  +
mov eax [esi+0Ch] +
mov eax [eax+10h] +
push 1  +
push dword ptr [eax+4]  +
push ebx  +
push 439h  +
push dword ptr [esi+8]  +
call edi  +
mov eax [esi+0Ch] +
mov eax [eax+10h] +
push 1  +
push dword ptr [eax+4]  +
push ebx  +
mov ebx 435h +
push ebx  +
push dword ptr [esi+8]  +
call edi  +
mov eax [esi+0Ch] +
mov eax [eax+10h] +
push 1  +
push dword ptr [eax+4]  +
push 30h  +
push 436h  +
push dword ptr [esi+8]  +
call edi  +
mov eax [esi+10h] +
mov ecx [eax] +
cmp dword ptr [ecx+4] 0 +
jnz loc_100BD96  +
mov byte ptr [ebp-2205h] 1 +
push 100h  +
lea eax [ebp-204h] +
push eax  +
call sub_10093D3  +
test eax eax +
jge loc_100BDB4  +
xor eax eax +
mov [ebp-204h] ax +
mov eax [esi+10h] +
mov edi [eax] +
mov ecx edi +
call sub_100699C  +
test al al +
jnz loc_100BFE4  +
cmp [edi+42Ah] al +
jz loc_100BFE4  +
cmp [ebp-2205h] al +
jnz loc_100BFE4  +
mov eax [esi+10h] +
mov eax [eax] +
movzx ecx word ptr [eax+8] +
mov [ebp-2210h] ecx +
movzx ecx word ptr [eax+0Ah] +
mov [ebp-220Ch] ecx +
movzx ecx word ptr [eax+210h] +
movzx eax word ptr [eax+212h] +
push 400h  +
mov [ebp-2218h] eax +
lea eax [ebp-1204h] +
push eax  +
push 79h  +
push hInstance  +
mov [ebp-2214h] ecx +
call ds:LoadStringW  +
test eax eax +
jnz loc_100BE3F  +
mov [ebp-1204h] ax +
mov byte ptr [ebp-2205h] 1 +
lea eax [ebp-204h] +
push eax  +
lea eax [ebp-1204h] +
push eax  +
lea eax [ebp-0A04h] +
push 800h  +
push eax  +
call sub_1003A0B  +
add esp 10h +
test eax eax +
jge loc_100BE75  +
xor eax eax +
mov [ebp-0A04h] ax +
mov byte ptr [ebp-2205h] 1 +
lea eax [ebp-0A04h] +
push eax  +
push 439h  +
push dword ptr [esi+8]  +
call ds:SetDlgItemTextW  +
mov edi ds:GetDlgItem +
push 5  +
push ebx  +
push dword ptr [esi+8]  +
call edi  +
push eax  +
call ds:ShowWindow  +
push 5  +
push 436h  +
push dword ptr [esi+8]  +
call edi  +
push eax  +
call ds:ShowWindow  +
push ebx  +
push 436h  +
push ebx  +
push dword ptr [esi+8]  +
call ds:CheckRadioButton  +
mov edi ds:LoadStringW +
push 400h  +
lea eax [ebp-1A04h] +
push eax  +
push 7Bh  +
push hInstance  +
call edi  +
test eax eax +
jnz loc_100BEF0  +
mov [ebp-1A04h] ax +
mov byte ptr [ebp-2205h] 1 +
mov eax [esi+10h] +
mov eax [eax] +
cmp byte ptr [eax+42Bh] 0 +
jz loc_100BF11  +
movzx eax word ptr [ebp-2210h] +
movzx ecx word ptr [ebp-220Ch] +
movzx eax ax +
jmp loc_100BF1D  +
mov ecx [ebp-2210h] +
mov eax [ebp-220Ch] +
movzx eax ax +
push eax  +
movzx eax cx +
push eax  +
lea eax [ebp-1A04h] +
push eax  +
lea eax [ebp-0A04h] +
push 800h  +
push eax  +
call sub_1003A0B  +
add esp 14h +
test eax eax +
jge loc_100BF54  +
xor eax eax +
mov [ebp-0A04h] ax +
mov byte ptr [ebp-2205h] 1 +
lea eax [ebp-0A04h] +
push eax  +
push ebx  +
push dword ptr [esi+8]  +
mov ebx ds:SetDlgItemTextW +
call ebx  +
push 400h  +
lea eax [ebp-2204h] +
push eax  +
push 7Ch  +
push hInstance  +
call edi  +
test eax eax +
jnz loc_100BF8F  +
mov [ebp-2204h] ax +
mov byte ptr [ebp-2205h] 1 +
movzx eax word ptr [ebp-2218h] +
push eax  +
movzx eax word ptr [ebp-2214h] +
push eax  +
lea eax [ebp-2204h] +
push eax  +
lea eax [ebp-0A04h] +
push 800h  +
push eax  +
call sub_1003A0B  +
add esp 14h +
test eax eax +
jge loc_100BFCE  +
xor eax eax +
mov [ebp-0A04h] ax +
mov byte ptr [ebp-2205h] 1 +
lea eax [ebp-0A04h] +
push eax  +
push 436h  +
push dword ptr [esi+8]  +
call ebx  +
jmp loc_100C090  +
push 400h  +
lea eax [ebp-1204h] +
push eax  +
push 7Ah  +
push hInstance  +
call ds:LoadStringW  +
test eax eax +
jnz loc_100C010  +
mov [ebp-1204h] ax +
mov byte ptr [ebp-2205h] 1 +
lea eax [ebp-204h] +
push eax  +
lea eax [ebp-1204h] +
push eax  +
lea eax [ebp-0A04h] +
push 800h  +
push eax  +
call sub_1003A0B  +
add esp 10h +
test eax eax +
jge loc_100C046  +
xor eax eax +
mov [ebp-0A04h] ax +
mov byte ptr [ebp-2205h] 1 +
lea eax [ebp-0A04h] +
push eax  +
push 439h  +
push dword ptr [esi+8]  +
call ds:SetDlgItemTextW  +
mov edi 436h +
push edi  +
push edi  +
push ebx  +
push dword ptr [esi+8]  +
call ds:CheckRadioButton  +
push 0  +
push ebx  +
push dword ptr [esi+8]  +
mov ebx ds:GetDlgItem +
call ebx  +
push eax  +
call ds:ShowWindow  +
push 0  +
push edi  +
push dword ptr [esi+8]  +
call ebx  +
push eax  +
call ds:ShowWindow  +
mov ecx [ebp-4] +
xor eax eax +
cmp [ebp-2205h] al +
pop edi  +
setz al  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100E5C6  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 30h +
push ebx  +
push esi  +
push edi  +
push 0Dh  +
call ds:GetSysColor  +
push eax  +
push 3  +
push 0  +
call ds:CreatePen  +
push 5  +
mov [ebp+var_4] eax +
call ds:GetStockObject  +
push [ebp+var_4]  +
mov ebx [ebp+arg_0] +
mov esi ds:SelectObject +
push ebx  +
mov edi eax +
call esi  +
push edi  +
push ebx  +
mov [ebp+arg_0] eax +
call esi  +
mov [ebp+var_8] eax +
mov eax [ebp+arg_4] +
mov ecx [eax] +
mov edx [eax+4] +
mov edi [eax+8] +
mov eax [eax+0Ch] +
add eax 0FFFFFFFEh +
inc ecx  +
mov [ebp+var_1C] eax +
mov [ebp+var_14] eax +
push 5  +
lea eax [ebp+var_30] +
inc edx  +
push eax  +
add edi 0FFFFFFFEh +
push ebx  +
mov [ebp+var_30.x] ecx +
mov [ebp+var_30.y] edx +
mov [ebp+var_28] edi +
mov [ebp+var_24] edx +
mov [ebp+var_20] edi +
mov [ebp+var_18] ecx +
mov [ebp+var_10] ecx +
mov [ebp+var_C] edx +
call ds:Polyline  +
push [ebp+arg_0]  +
push ebx  +
call esi  +
push [ebp+var_4]  +
call ds:DeleteObject  +
push [ebp+var_8]  +
push ebx  +
call esi  +
pop edi  +
pop esi  +
mov al 1 +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push [ebp+arg_18]  +
call ds:CreateSolidBrush  +
mov [ebp+hbr] eax +
test eax eax +
jz locret_100C228  +
push edi  +
push [ebp+arg_0]  +
call ds:CreateCompatibleDC  +
mov edi eax +
test edi edi +
jz loc_100C227  +
push ebx  +
mov ebx [ebp+arg_8] +
push dword ptr [ebx+0Ch]  +
push dword ptr [ebx+8]  +
push [ebp+arg_0]  +
call ds:CreateCompatibleBitmap  +
mov [ebp+var_8] eax +
test eax eax +
jnz loc_100C1AB  +
push edi  +
call ds:DeleteDC  +
xor eax eax +
jmp loc_100C226  +
push esi  +
mov esi ds:SelectObject +
push eax  +
push edi  +
call esi  +
push [ebp+arg_4]  +
mov [ebp+arg_8] eax +
push edi  +
call esi  +
push [ebp+arg_14]  +
mov [ebp+arg_0] eax +
push edi  +
call ds:SetTextColor  +
push [ebp+arg_18]  +
push edi  +
call ds:SetBkColor  +
push [ebp+hbr]  +
push ebx  +
push edi  +
call ds:FillRect  +
push 2010h  +
push [ebp+lpRect]  +
push 0FFFFFFFFh  +
push [ebp+lpString]  +
push edi  +
call ds:DrawTextW  +
push 1  +
call ds:GetStockObject  +
push eax  +
push ebx  +
push edi  +
call ds:FrameRect  +
push [ebp+arg_0]  +
push edi  +
call esi  +
push [ebp+arg_8]  +
push edi  +
call esi  +
push edi  +
call ds:DeleteDC  +
push [ebp+hbr]  +
call ds:DeleteObject  +
mov eax [ebp+var_8] +
pop esi  +
pop ebx  +
pop edi  +
leave   +
retn 1Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0CC0020h  +
xor eax eax +
push eax  +
push eax  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
push dword ptr [ecx+0Ch]  +
push eax  +
push eax  +
push [ebp+arg_0]  +
call ds:BitBlt  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov eax [ebp+arg_1C] +
mov ecx [ebp+arg_8] +
push [ebp+arg_20]  +
mov [ecx+8] eax +
call ds:CreateSolidBrush  +
mov [ebp+arg_1C] eax +
test eax eax +
jz locret_100C3D0  +
push ebx  +
push esi  +
mov esi ds:GetDeviceCaps +
push edi  +
push 5Ah  +
push [ebp+arg_0]  +
call esi  +
mov [ebp+arg_20] eax +
fild  [ebp+arg_20] +
mov edi [ebp+arg_10] +
fdivr  ds:dbl_1001548 +
fimul  dword ptr [edi] +
call _ftol2_sse  +
push 5Ah  +
push [ebp+arg_0]  +
mov [ebp+var_10] eax +
call esi  +
mov [ebp+arg_20] eax +
fild  [ebp+arg_20] +
fdivr  ds:dbl_1001548 +
fimul  dword ptr [edi+4] +
call _ftol2_sse  +
push 5Ah  +
push [ebp+arg_0]  +
mov [ebp+var_C] eax +
call esi  +
mov [ebp+arg_20] eax +
fild  [ebp+arg_20] +
fdivr  ds:dbl_1001548 +
fimul  dword ptr [edi+8] +
call _ftol2_sse  +
push 5Ah  +
push [ebp+arg_0]  +
mov ebx eax +
call esi  +
mov [ebp+arg_20] eax +
fild  [ebp+arg_20] +
fdivr  ds:dbl_1001548 +
fimul  dword ptr [edi+0Ch] +
call _ftol2_sse  +
push [ebp+arg_1C]  +
mov edi [ebp+arg_8] +
push [ebp+lprc]  +
mov esi eax +
mov eax [edi+20h] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+10h]  +
push eax  +
call ds:FillRect  +
sub esi [ebp+var_C] +
sub ebx [ebp+var_10] +
sub esp 10h +
mov [ebp+arg_8] esi +
fild  [ebp+arg_8] +
mov [ebp+arg_8] ebx +
mov ecx edi +
fstp  [esp+30h+var_24] +
fild  [ebp+arg_8] +
fstp  [esp+30h+var_28] +
fild  [ebp+var_C] +
fstp  [esp+30h+var_2C] +
fild  [ebp+var_10] +
fstp  [esp+30h+var_30] +
push [ebp+arg_18]  +
push [ebp+arg_14]  +
push [ebp+arg_4]  +
call sub_1005FF2  +
test eax eax +
jl loc_100C388  +
push [ebp+arg_0]  +
call ds:CreateCompatibleDC  +
mov ebx eax +
test ebx ebx +
jz loc_100C388  +
mov eax [ebp+lprc] +
push dword ptr [eax+0Ch]  +
push dword ptr [eax+8]  +
push [ebp+arg_0]  +
call ds:CreateCompatibleBitmap  +
mov [ebp+arg_8] eax +
test eax eax +
jnz loc_100C38C  +
push ebx  +
call ds:DeleteDC  +
xor eax eax +
jmp loc_100C3CD  +
mov esi ds:SelectObject +
push eax  +
push ebx  +
call esi  +
push ebx  +
mov ecx edi +
mov [ebp+arg_0] eax +
call sub_100C231  +
push 1  +
call ds:GetStockObject  +
push eax  +
push [ebp+lprc]  +
push ebx  +
call ds:FrameRect  +
push [ebp+arg_0]  +
push ebx  +
call esi  +
push ebx  +
call ds:DeleteDC  +
push [ebp+arg_1C]  +
call ds:DeleteObject  +
mov eax [ebp+arg_8] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 24h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
lea eax [ebp+var_4] +
push eax  +
call ds:GetCurrentProcess  +
push eax  +
call ds:IsWow64Process  +
test eax eax +
jz loc_100C403  +
cmp [ebp+var_4] 0 +
jz loc_100C403  +
xor eax eax +
inc eax  +
leave   +
retn   +
xor eax eax +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
mov esi ds:RegCreateKeyExW +
push edi  +
lea eax [ebp+dwDisposition] +
push eax  +
xor ebx ebx +
lea eax [ebp+hKey] +
push eax  +
push ebx  +
push [ebp+samDesired]  +
mov edi ecx +
push ebx  +
push ebx  +
push ebx  +
push offset aSoftwareMicros  +
push [ebp+dwDisposition]  +
mov [ebp+hKey] ebx +
mov [edi] bl +
call esi  +
test eax eax +
jnz loc_100C46A  +
lea eax [ebp+dwDisposition] +
push eax  +
lea eax [edi+4] +
push eax  +
push ebx  +
push [ebp+samDesired]  +
push ebx  +
push ebx  +
push ebx  +
push [ebp+lpSubKey]  +
push [ebp+hKey]  +
call esi  +
push [ebp+hKey]  +
mov esi eax +
call ds:RegCloseKey  +
cmp esi ebx +
jnz loc_100C46A  +
mov byte ptr [edi] 1 +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push esi  +
mov esi ecx +
cmp byte ptr [esi] 0 +
jz loc_100C48E  +
push dword ptr [esi+4]  +
call ds:RegCloseKey  +
mov byte ptr [esi] 0 +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
xor eax eax +
xor bl bl +
cmp [ecx] al +
jz loc_100C4D9  +
lea edx [ebp+cbData] +
push edx  +
lea edx [ebp+Data] +
push edx  +
push eax  +
push eax  +
push [ebp+lpValueName]  +
mov dword ptr [ebp+Data] eax +
push dword ptr [ecx+4]  +
mov [ebp+cbData] 4 +
call ds:RegQueryValueExW  +
test eax eax +
jnz loc_100C4D9  +
cmp [ebp+cbData] 4 +
jnz loc_100C4D9  +
mov eax [ebp+arg_4] +
mov ecx dword ptr [ebp+Data] +
mov [eax] ecx +
inc bl  +
mov al bl +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
xor ebx ebx +
cmp [ecx] bl +
jz loc_100C512  +
mov eax dword ptr [ebp+Data] +
push 4  +
mov dword ptr [ebp+Data] eax +
lea eax [ebp+Data] +
push eax  +
push 4  +
push ebx  +
push [ebp+lpValueName]  +
push dword ptr [ecx+4]  +
call ds:RegSetValueExW  +
test eax eax +
jnz loc_100C512  +
mov bl 1 +
mov al bl +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi] +
test eax eax +
jz loc_100C532  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
and dword ptr [esi] 0 +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push esi  +
mov esi ecx +
cmp dword ptr [esi] 0 +
push edi  +
jz loc_100C57C  +
push [ebp+lpSubKey]  +
call ds:SysAllocString  +
mov edi eax +
test edi edi +
jnz loc_100C560  +
xor al al +
jmp loc_100C61F  +
push dword ptr [ebp+Data]  +
mov eax [esi] +
mov ecx [eax] +
push edi  +
push eax  +
call dword ptr [ecx+24h]  +
test eax eax +
jnz loc_100C559  +
push edi  +
call ds:SysFreeString  +
jmp loc_100C61D  +
call sub_100C3D9  +
push [ebp+lpSubKey]  +
test eax eax +
jz loc_100C5EF  +
push 2021Fh  +
mov edi 80000002h +
push edi  +
lea ecx [ebp+var_8] +
call sub_100C40C  +
push dword ptr [ebp+Data]  +
mov esi offset aGammalevel +
push esi  +
lea ecx [ebp+var_8] +
call sub_100C4E5  +
test al al +
jnz loc_100C5BA  +
lea ecx [ebp+var_8] +
call sub_100C478  +
jmp loc_100C559  +
push [ebp+lpSubKey]  +
lea ecx [ebp+var_10] +
push 2011Fh  +
push edi  +
call sub_100C40C  +
push dword ptr [ebp+Data]  +
lea ecx [ebp+var_10] +
push esi  +
call sub_100C4E5  +
lea ecx [ebp+var_10] +
test al al +
jnz loc_100C5E5  +
call sub_100C478  +
jmp loc_100C5B0  +
call sub_100C478  +
lea ecx [ebp+var_8] +
jmp loc_100C618  +
push 2001Fh  +
push 80000002h  +
lea ecx [ebp+var_10] +
call sub_100C40C  +
push dword ptr [ebp+Data]  +
lea ecx [ebp+var_10] +
push offset aGammalevel  +
call sub_100C4E5  +
lea ecx [ebp+var_10] +
test al al +
jz loc_100C5B3  +
call sub_100C478  +
mov al 1 +
pop edi  +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push esi  +
mov esi ecx +
cmp dword ptr [esi] 0 +
push edi  +
jz loc_100C66D  +
push [ebp+lpSubKey]  +
call ds:SysAllocString  +
mov edi eax +
test edi edi +
jnz loc_100C651  +
xor al al +
jmp loc_100C710  +
push dword ptr [ebp+Data]  +
mov eax [esi] +
mov ecx [eax] +
push edi  +
push eax  +
call dword ptr [ecx+20h]  +
test eax eax +
jnz loc_100C64A  +
push edi  +
call ds:SysFreeString  +
jmp loc_100C70E  +
call sub_100C3D9  +
push [ebp+lpSubKey]  +
test eax eax +
jz loc_100C6E0  +
push 2021Fh  +
mov edi 80000002h +
push edi  +
lea ecx [ebp+var_8] +
call sub_100C40C  +
push dword ptr [ebp+Data]  +
mov esi offset aPixelstructure +
push esi  +
lea ecx [ebp+var_8] +
call sub_100C4E5  +
test al al +
jnz loc_100C6AB  +
lea ecx [ebp+var_8] +
call sub_100C478  +
jmp loc_100C64A  +
push [ebp+lpSubKey]  +
lea ecx [ebp+var_10] +
push 2011Fh  +
push edi  +
call sub_100C40C  +
push dword ptr [ebp+Data]  +
lea ecx [ebp+var_10] +
push esi  +
call sub_100C4E5  +
lea ecx [ebp+var_10] +
test al al +
jnz loc_100C6D6  +
call sub_100C478  +
jmp loc_100C6A1  +
call sub_100C478  +
lea ecx [ebp+var_8] +
jmp loc_100C709  +
push 2001Fh  +
push 80000002h  +
lea ecx [ebp+var_10] +
call sub_100C40C  +
push dword ptr [ebp+Data]  +
lea ecx [ebp+var_10] +
push offset aPixelstructure  +
call sub_100C4E5  +
lea ecx [ebp+var_10] +
test al al +
jz loc_100C6A4  +
call sub_100C478  +
mov al 1 +
pop edi  +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push [ebp+lpSubKey]  +
lea ecx [ebp+var_8] +
push 2001Fh  +
push 80000001h  +
call sub_100C40C  +
push dword ptr [ebp+Data]  +
lea ecx [ebp+var_8] +
push offset aCleartypelevel  +
call sub_100C4E5  +
test al al +
jnz loc_100C75D  +
xor bl bl +
lea ecx [ebp+var_8] +
call sub_100C478  +
mov al bl +
pop ebx  +
leave   +
retn 8  +
mov bl 1 +
jmp loc_100C74E  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push [ebp+lpSubKey]  +
lea ecx [ebp+var_8] +
push 2001Fh  +
push 80000001h  +
call sub_100C40C  +
push dword ptr [ebp+Data]  +
lea ecx [ebp+var_8] +
push offset aTextcontrastle  +
call sub_100C4E5  +
test al al +
jnz loc_100C7A8  +
xor bl bl +
lea ecx [ebp+var_8] +
call sub_100C478  +
mov al bl +
pop ebx  +
leave   +
retn 8  +
mov bl 1 +
jmp loc_100C799  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push [ebp+lpSubKey]  +
lea ecx [ebp+var_8] +
push 2001Fh  +
push 80000001h  +
call sub_100C40C  +
push dword ptr [ebp+Data]  +
lea ecx [ebp+var_8] +
push offset aEnhancedcontra  +
call sub_100C4E5  +
test al al +
jnz loc_100C7F3  +
xor bl bl +
lea ecx [ebp+var_8] +
call sub_100C478  +
mov al bl +
pop ebx  +
leave   +
retn 8  +
mov bl 1 +
jmp loc_100C7E4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
and [ebp+fWinIni] 0 +
cmp [ebp+arg_4] 0 +
push ebx  +
push esi  +
push edi  +
mov edi ecx +
mov [ebp+var_1] 1 +
jz loc_100C81D  +
mov [ebp+fWinIni] 1 +
push [ebp+fWinIni]  +
mov ebx [ebp+arg_0] +
mov esi ds:SystemParametersInfoW +
push 0  +
push dword ptr [edi+ebx*4]  +
push 4Bh  +
call esi  +
test eax eax +
jnz loc_100C839  +
mov [ebp+var_1] al +
push [ebp+fWinIni]  +
push dword ptr [edi+ebx*4+10h]  +
push 0  +
push 200Bh  +
call esi  +
test eax eax +
jnz loc_100C850  +
mov [ebp+var_1] al +
push [ebp+fWinIni]  +
push dword ptr [edi+ebx*4+18h]  +
push 0  +
push 200Dh  +
call esi  +
test eax eax +
jnz loc_100C867  +
mov [ebp+var_1] al +
cmp [ebp+arg_8] 0 +
jz loc_100C871  +
or [ebp+fWinIni] 2 +
push [ebp+fWinIni]  +
push dword ptr [edi+ebx*4+8]  +
push 0  +
push 2013h  +
call esi  +
mov al [ebp+var_1] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov eax ecx +
xor ecx ecx +
mov [eax+4] ecx +
mov [eax] ecx +
mov [eax+0Ch] ecx +
mov [eax+8] ecx +
mov [eax+14h] ecx +
mov [eax+10h] ecx +
mov [eax+1Ch] ecx +
mov [eax+18h] ecx +
mov [eax+20h] cl +
retn   +
***
mov edi edi +
push ebx  +
push esi  +
push edi  +
mov edi ds:SystemParametersInfoW +
mov esi ecx +
xor ebx ebx +
push ebx  +
lea eax [esi+4] +
push eax  +
push ebx  +
push 4Ah  +
call edi  +
test eax eax +
jnz loc_100C8D5  +
xor al al +
jmp loc_100C920  +
mov eax [esi+4] +
push ebx  +
mov [esi] eax +
lea eax [esi+14h] +
push eax  +
push ebx  +
push 200Ah  +
call edi  +
test eax eax +
jz loc_100C8D1  +
mov eax [esi+14h] +
push ebx  +
mov [esi+10h] eax +
lea eax [esi+1Ch] +
push eax  +
push ebx  +
push 200Ch  +
call edi  +
test eax eax +
jz loc_100C8D1  +
mov eax [esi+1Ch] +
push ebx  +
mov [esi+18h] eax +
lea eax [esi+0Ch] +
push eax  +
push ebx  +
push 2012h  +
call edi  +
mov eax [esi+0Ch] +
mov [esi+8] eax +
mov [esi+20h] bl +
mov al 1 +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push 0  +
push 1  +
call sub_100C7FC  +
push 85h  +
push 0  +
push 0  +
push [ebp+hWnd]  +
call ds:RedrawWindow  +
test eax eax +
setnz al  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push 1  +
push 1  +
call sub_100C7FC  +
push 85h  +
push 0  +
push 0  +
push [ebp+hWnd]  +
call ds:RedrawWindow  +
test eax eax +
setnz al  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov al [ecx+20h] +
mov edx [ebp+arg_0] +
push ebx  +
xor ebx ebx +
mov [edx] al +
mov [ebp+var_1] 1 +
cmp [ecx+20h] bl +
jz loc_100C9B8  +
push 1  +
push 1  +
push 1  +
mov [ecx+20h] bl +
call sub_100C7FC  +
test al al +
jnz loc_100C9B8  +
mov [ebp+var_1] bl +
push 85h  +
push ebx  +
push ebx  +
push ebx  +
call ds:RedrawWindow  +
mov al [ebp+var_1] +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
xor ebx ebx +
mov [ebp+var_1] 1 +
cmp [ecx+20h] bl +
jz loc_100CA05  +
push ebx  +
push ebx  +
push ebx  +
mov [ecx+20h] bl +
call sub_100C7FC  +
test al al +
jnz loc_100C9F7  +
mov [ebp+var_1] bl +
push 85h  +
push ebx  +
push ebx  +
push ebx  +
call ds:RedrawWindow  +
mov al [ebp+var_1] +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
cmp [ebp+arg_0] al +
setnz al  +
cmp [ecx+4] eax +
jz loc_100CA29  +
mov [ecx+4] eax +
mov byte ptr [ecx+20h] 1 +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
cmp [ecx+0Ch] eax +
jz loc_100CA46  +
mov [ecx+0Ch] eax +
mov byte ptr [ecx+20h] 1 +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
cmp [ecx+14h] eax +
jz loc_100CA63  +
mov [ecx+14h] eax +
mov byte ptr [ecx+20h] 1 +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
cmp [ecx+1Ch] eax +
jz loc_100CA80  +
mov [ecx+1Ch] eax +
mov byte ptr [ecx+20h] 1 +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push edi  +
mov edi ecx +
mov eax [edi+4] +
test eax eax +
jz loc_100CAAF  +
xor ecx ecx +
inc ecx  +
cmp eax ecx +
jz loc_100CAAF  +
cmp eax 2 +
jz loc_100CAAF  +
mov [edi+4] ecx +
push esi  +
lea esi [edi+0Ch] +
mov eax 3E8h +
cmp [esi] eax +
jnb loc_100CABE  +
mov [esi] eax +
mov eax 1388h +
cmp [esi] eax +
jbe loc_100CAC9  +
mov [esi] eax +
mov eax [esi] +
fild  dword ptr [esi] +
test eax eax +
jge loc_100CAD7  +
fadd  ds:dbl_10019F0 +
fmul  ds:dbl_10019E8 +
mov cl 0Eh +
fld  ds:dbl_1001820 +
fadd st(1) st +
fld  ds:dbl_10018E8 +
fadd st(2) st +
fxch  st(2) +
fstp  [ebp+var_8] +
mov eax dword ptr [ebp+var_8] +
mov edx dword ptr [ebp+var_8+4] +
shld edx eax +
shl eax 0Dh +
call __allshr  +
imul eax eax +
mov [esi] eax +
push 64h  +
lea esi [edi+14h] +
pop eax  +
cmp [esi] eax +
jbe loc_100CB17  +
mov [esi] eax +
mov eax [esi] +
fild  dword ptr [esi] +
test eax eax +
jge loc_100CB25  +
fadd  ds:dbl_10019F0 +
fmul  ds:dbl_10019E0 +
mov cl 0Eh +
faddp st(1) st +
faddp st(1) st +
fstp  [ebp+var_8] +
mov eax dword ptr [ebp+var_8] +
mov edx dword ptr [ebp+var_8+4] +
shld edx eax +
shl eax 0Dh +
call __allshr  +
imul eax eax +
push 6  +
mov [esi] eax +
pop eax  +
pop esi  +
cmp [edi+24h] eax +
jbe loc_100CB57  +
mov [edi+24h] eax +
pop edi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov esi ecx +
mov bl 1 +
call sub_100CA8F  +
mov edi [ebp+arg_0] +
test edi edi +
jnz loc_100CB7E  +
xor al al +
jmp loc_100CC1C  +
test [esi+28h] bl +
jz loc_100CB8A  +
mov eax [esi] +
cmp eax [esi+4] +
jz loc_100CB9E  +
lea eax [esi+2Ch] +
push eax  +
push dword ptr [esi+4]  +
mov ecx edi +
call sub_100C62A  +
test al al +
jnz loc_100CB9E  +
xor bl bl +
mov ecx esi +
call sub_10026E7  +
test al al +
jz loc_100CBBD  +
lea eax [esi+2Ch] +
push eax  +
push dword ptr [esi+0Ch]  +
mov ecx edi +
call sub_100C539  +
test al al +
jnz loc_100CBBD  +
xor bl bl +
mov ecx esi +
call sub_1002701  +
test al al +
jz loc_100CBDC  +
lea eax [esi+2Ch] +
push eax  +
push dword ptr [esi+14h]  +
mov ecx edi +
call sub_100C71B  +
test al al +
jnz loc_100CBDC  +
xor bl bl +
mov ecx esi +
call sub_100271B  +
test al al +
jz loc_100CBFB  +
lea eax [esi+2Ch] +
push eax  +
push dword ptr [esi+1Ch]  +
mov ecx edi +
call sub_100C7B1  +
test al al +
jnz loc_100CBFB  +
xor bl bl +
mov ecx esi +
call sub_1002735  +
test al al +
jz loc_100CC1A  +
lea eax [esi+2Ch] +
push eax  +
push dword ptr [esi+24h]  +
mov ecx edi +
call sub_100C766  +
test al al +
jnz loc_100CC1A  +
xor bl bl +
mov al bl +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
xor eax eax +
test ecx ecx +
jz loc_100CC3E  +
cmp ecx 7FFFFFFFh +
jbe loc_100CC43  +
mov eax 80070057h +
test eax eax +
jl loc_100CC80  +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
lea eax [ebp+arg_C] +
push eax  +
push [ebp+arg_8]  +
lea esi [ecx-1] +
push esi  +
push edi  +
xor ebx ebx +
call ds:_vsnwprintf  +
add esp 10h +
test eax eax +
jl loc_100CC70  +
cmp eax esi +
ja loc_100CC70  +
jnz loc_100CC7B  +
jmp loc_100CC75  +
mov ebx 8007007Ah +
xor eax eax +
mov [edi+esi*2] ax +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
movzx eax [ebp+arg_4] +
add ecx 220h +
push ecx  +
push eax  +
push [ebp+arg_0]  +
call sub_1008C74  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 408h +
mov eax dword_1010060 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_8] +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
push edi  +
mov edi [ebp+arg_4] +
mov [ebp+riid] eax +
mov eax [ebp+arg_C] +
mov esi 11Ch +
push esi  +
mov [ebp+ppv] eax +
lea eax [ebp+var_3DC] +
push 0  +
push eax  +
call memset  +
add esp 0Ch +
push 3  +
mov [ebp+var_3DC] esi +
push 2  +
xor esi esi +
push esi  +
push esi  +
mov [ebp+var_3D8] 6 +
call ds:VerSetConditionMask  +
push edx  +
push eax  +
push 2  +
lea eax [ebp+var_3DC] +
push eax  +
call ds:VerifyVersionInfoW  +
test eax eax +
jz loc_100CD9A  +
push 32h  +
lea eax [ebp+sz] +
push eax  +
push edi  +
call ds:StringFromGUID2  +
lea eax [ebp+sz] +
push eax  +
push offset aElevationAdmin  +
lea eax [ebp+pszName] +
push 12Ch  +
push eax  +
call sub_100CC28  +
add esp 10h +
cmp eax esi +
jl loc_100CDB0  +
push 9  +
pop ecx  +
push [ebp+ppv]  +
xor eax eax +
push [ebp+riid]  +
lea edi [ebp+pBindOptions] +
stos   +
lea eax [ebp+pBindOptions] +
push eax  +
lea eax [ebp+pszName] +
push eax  +
mov [ebp+pBindOptions.cbStruct] 24h +
mov [ebp+var_3E8] ebx +
mov [ebp+var_3F4] 4 +
call ds:CoGetObject  +
jmp loc_100CDB0  +
push [ebp+ppv]  +
push [ebp+riid]  +
push 4  +
push esi  +
push edi  +
call ds:CoCreateInstance  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100E5C6  +
leave   +
retn 10h  +
***
mov edi edi +
push ecx  +
push offset dword_10018B8  +
push offset dword_10018D8  +
push 0  +
call sub_100CCA9  +
test eax eax +
setnl al  +
retn   +
***
mov edi edi +
push esi  +
push offset dword_1001550  +
mov esi ecx +
push 80h  +
lea eax [esi+2Ch] +
push eax  +
call sub_1008C74  +
and dword ptr [esi+28h] 0 +
mov ecx 708h +
push 64h  +
xor eax eax +
inc eax  +
mov [esi+0Ch] ecx +
mov [esi+8] ecx +
pop ecx  +
mov [esi+4] eax +
mov [esi] eax +
mov [esi+24h] eax +
mov [esi+20h] eax +
push 32h  +
pop eax  +
mov [esi+1Ch] eax +
mov [esi+18h] eax +
mov [esi+14h] ecx +
mov [esi+10h] ecx +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 118h +
mov eax dword_1010060 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
mov ebx 80h +
mov esi ecx +
mov ecx [ebp+arg_0] +
push ebx  +
lea eax [ebp+var_104] +
push eax  +
mov [ebp+var_118] ecx +
call sub_100CC87  +
test eax eax +
jge loc_100CE74  +
xor al al +
jmp loc_100CFB6  +
push edi  +
lea edi [ebp+var_104] +
movzx eax word ptr [edi] +
test ax ax +
jz loc_100CE92  +
push eax  +
call ds:IsCharAlphaNumericW  +
test eax eax +
jnz loc_100CE92  +
inc edi  +
inc edi  +
jnz loc_100CE7B  +
test edi edi +
jz loc_100CFB3  +
cmp word ptr [edi] 0 +
jz loc_100CFB3  +
push edi  +
lea eax [esi+2Ch] +
push ebx  +
push eax  +
call sub_1008C74  +
test eax eax +
jl loc_100CFB3  +
mov eax [ebp+var_118] +
cmp byte ptr [eax+20Fh] 0 +
jz loc_100CEE4  +
cmp byte ptr [eax+20Eh] 0 +
jz loc_100CEE4  +
movzx ax byte ptr [eax+20Ch] +
add ax 64h +
movzx eax ax +
imul eax eax +
mov [esi+0Ch] eax +
lea ebx [esi+2Ch] +
push ebx  +
mov edi 20019h +
push edi  +
push 80000002h  +
lea ecx [ebp+var_114] +
call sub_100C40C  +
push esi  +
push offset aPixelstructure  +
lea ecx [ebp+var_114] +
call sub_100C495  +
test al al +
jz loc_100CF17  +
or dword ptr [esi+28h] 1 +
lea eax [esi+8] +
push eax  +
push offset aGammalevel  +
lea ecx [ebp+var_114] +
call sub_100C495  +
test al al +
jz loc_100CF33  +
or dword ptr [esi+28h] 2 +
push ebx  +
push edi  +
push 80000001h  +
lea ecx [ebp+var_10C] +
call sub_100C40C  +
lea eax [esi+10h] +
push eax  +
push offset aCleartypelevel  +
lea ecx [ebp+var_10C] +
call sub_100C495  +
test al al +
jz loc_100CF61  +
or dword ptr [esi+28h] 4 +
lea eax [esi+18h] +
push eax  +
push offset aEnhancedcontra  +
lea ecx [ebp+var_10C] +
call sub_100C495  +
test al al +
jz loc_100CF7D  +
or dword ptr [esi+28h] 8 +
lea eax [esi+20h] +
push eax  +
push offset aTextcontrastle  +
lea ecx [ebp+var_10C] +
call sub_100C495  +
test al al +
jz loc_100CF99  +
or dword ptr [esi+28h] 10h +
lea ecx [ebp+var_10C] +
call sub_100C478  +
lea ecx [ebp+var_114] +
call sub_100C478  +
mov al 1 +
jmp loc_100CFB5  +
xor al al +
pop edi  +
mov ecx [ebp+var_4] +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100E5C6  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+0Ch] +
dec eax  +
jnz loc_100CFDE  +
mov eax [ebp+8] +
mov hWnd eax +
xor eax eax +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 474h +
mov eax dword_1010060 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push edi  +
mov edi [ebp+arg_4] +
push 100h  +
mov [ebp+var_210] eax +
lea eax [ebp+Buffer] +
push eax  +
push 66h  +
push hInstance  +
call ds:LoadStringW  +
test eax eax +
jnz loc_100D030  +
xor al al +
jmp loc_100D3E0  +
lea eax [ebp+var_20C] +
push eax  +
mov ecx edi +
call sub_10025E9  +
test al al +
jz loc_100D029  +
push ebx  +
lea eax [ebp+Buffer] +
push esi  +
mov esi hInstance +
mov [ebp+var_460] eax +
xor eax eax +
xor ebx ebx +
push 38h  +
inc eax  +
pop ecx  +
mov [ebp+var_474] ecx +
mov [ebp+var_470] ebx +
mov [ebp+var_46C] esi +
mov [ebp+var_468] 0Eh +
mov [ebp+var_464] ebx +
mov [ebp+var_45C] offset loc_1007612 +
mov [ebp+var_458] edi +
mov [ebp+var_454] ebx +
mov [ebp+var_208] eax +
cmp word ptr [ebp+var_20C] ax +
jbe loc_100D0F3  +
lea eax [ebp+Buffer] +
mov [ebp+var_43C] ecx +
mov [ebp+var_438] ebx +
mov [ebp+var_434] esi +
mov [ebp+var_430] 0Ch +
mov [ebp+var_42C] ebx +
mov [ebp+var_424] offset loc_10083B2 +
mov [ebp+var_428] eax +
mov [ebp+var_420] edi +
mov [ebp+var_41C] ebx +
mov [ebp+var_208] 2 +
mov eax [ebp+var_208] +
imul eax eax +
mov [ebp+eax+var_474] ecx +
mov [ebp+eax+var_458] edi +
mov [ebp+eax+var_470] ebx +
mov [ebp+eax+var_46C] esi +
mov [ebp+eax+var_468] 10h +
mov [ebp+eax+var_464] ebx +
mov [ebp+eax+var_45C] offset loc_100BAF1 +
mov [ebp+eax+var_454] ebx +
inc [ebp+var_208]  +
lea edx [ebp+Buffer] +
mov [ebp+eax+var_460] edx +
mov eax [ebp+var_208] +
imul eax eax +
mov [ebp+eax+var_474] ecx +
mov [ebp+eax+var_458] edi +
mov [ebp+eax+var_470] ebx +
mov [ebp+eax+var_46C] esi +
mov [ebp+eax+var_468] 8 +
mov [ebp+eax+var_464] ebx +
mov [ebp+eax+var_45C] offset loc_1004BFE +
mov [ebp+eax+var_460] edx +
mov [ebp+eax+var_454] ebx +
inc [ebp+var_208]  +
mov eax [ebp+var_208] +
imul eax eax +
mov [ebp+eax+var_474] ecx +
mov [ebp+eax+var_458] edi +
inc [ebp+var_208]  +
mov [ebp+eax+var_470] ebx +
mov [ebp+eax+var_46C] esi +
mov [ebp+eax+var_468] 0Dh +
mov [ebp+eax+var_464] ebx +
mov [ebp+eax+var_45C] offset loc_1007BD8 +
mov [ebp+eax+var_460] edx +
mov [ebp+eax+var_454] ebx +
mov eax [ebp+var_208] +
imul eax eax +
inc [ebp+var_208]  +
mov [ebp+eax+var_474] ecx +
mov [ebp+eax+var_458] edi +
mov [ebp+eax+var_470] ebx +
mov [ebp+eax+var_46C] esi +
mov [ebp+eax+var_468] 0Ah +
mov [ebp+eax+var_464] ebx +
mov [ebp+eax+var_45C] offset loc_1004041 +
mov [ebp+eax+var_460] edx +
mov [ebp+eax+var_454] ebx +
mov eax [ebp+var_208] +
imul eax eax +
inc [ebp+var_208]  +
mov [ebp+eax+var_474] ecx +
mov [ebp+eax+var_458] edi +
mov [ebp+eax+var_470] ebx +
mov [ebp+eax+var_46C] esi +
mov [ebp+eax+var_468] 0Bh +
mov [ebp+eax+var_464] ebx +
mov [ebp+eax+var_45C] offset loc_1003586 +
mov [ebp+eax+var_460] edx +
mov [ebp+eax+var_454] ebx +
mov eax [ebp+var_208] +
imul eax eax +
push 34h  +
mov [ebp+eax+var_458] edi +
mov [ebp+eax+var_474] ecx +
pop edi  +
mov ecx edx +
push edi  +
mov [ebp+eax+var_470] ebx +
mov [ebp+eax+var_46C] esi +
mov [ebp+eax+var_468] 0Fh +
mov [ebp+eax+var_464] ebx +
mov [ebp+eax+var_45C] offset loc_1006E73 +
mov [ebp+eax+var_460] ecx +
mov [ebp+eax+var_454] ebx +
lea eax [ebp+var_244] +
push ebx  +
push eax  +
call memset  +
add esp 0Ch +
mov eax [ebp+var_210] +
mov [ebp+var_244.hwndParent] eax +
lea eax [ebp+Buffer] +
mov [ebp+var_244.pszCaption] eax +
mov eax [ebp+var_208] +
inc eax  +
mov [ebp+var_244.nPages] eax +
lea eax [ebp+var_474] +
mov [ebp+var_244.dwSize] edi +
mov [ebp+var_244.dwFlags] 412Ch +
mov [ebp+var_244.hInstance] esi +
mov dword ptr [ebp+var_244.anonymous_0] 9Fh +
mov dword ptr [ebp+var_244.anonymous_2] eax +
mov [ebp+var_244.pfnCallback] offset loc_100CFCB +
cmp dword_10100B4 ebx +
jz loc_100D3CB  +
mov al byte_10100B8 +
cmp al 4 +
jnb loc_100D37D  +
cmp al bl +
jnz loc_100D3CB  +
mov eax dword_10100A0 +
mov ecx dword_10100A4 +
mov edx 10000h +
mov esi 80000000h +
and eax edx +
and ecx esi +
or eax ecx +
jz loc_100D3CB  +
mov eax dword_10100A8 +
mov edi dword_10100AC +
mov ecx eax +
and ecx edx +
mov edx edi +
and edx esi +
cmp ecx eax +
jnz loc_100D3CB  +
cmp edx edi +
jnz loc_100D3CB  +
push offset dword_1001420  +
push dword_101008C  +
push dword_1010088  +
call sub_1002799  +
lea eax [ebp+var_244] +
push eax  +
call ds:PropertySheetW  +
cmp eax 0FFFFFFFFh +
pop esi  +
setnz al  +
pop ebx  +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop edi  +
call sub_100E5C6  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push esi  +
xor esi esi +
mov [ebp+plUbound] esi +
mov [ebp+plLbound] esi +
cmp [ebp+arg_4] esi +
jnz loc_100D414  +
mov eax 80070057h +
jmp loc_100D4EA  +
push ebx  +
mov ebx [ebp+arg_0] +
mov ax [ebx] +
mov ecx 0F000h +
and ax cx +
mov ecx 2000h +
cmp ax cx +
jz loc_100D437  +
mov eax 80070057h +
jmp loc_100D4E9  +
push edi  +
mov edi [ebx+8] +
lea eax [ebp+plLbound] +
push eax  +
push 1  +
push edi  +
call ds:SafeArrayGetLBound  +
cmp eax esi +
jl loc_100D4E8  +
lea eax [ebp+plUbound] +
push eax  +
push 1  +
push edi  +
call ds:SafeArrayGetUBound  +
cmp eax esi +
jl loc_100D4E8  +
mov edx [ebp+plUbound] +
mov ecx [ebp+plLbound] +
sub edx ecx +
inc edx  +
cmp edx [ebp+rgIndices] +
jg loc_100D4E3  +
cmp ecx [ebp+plUbound] +
mov [ebp+rgIndices] ecx +
jg loc_100D4E8  +
mov esi ds:SafeArrayGetElement +
movzx eax word ptr [ebx] +
and eax 0FFFh +
cmp eax 3 +
jz loc_100D4B3  +
cmp eax 11h +
jnz loc_100D4E3  +
lea eax [ebp-1] +
push eax  +
lea eax [ebp+rgIndices] +
push eax  +
push edi  +
call esi  +
test eax eax +
jl loc_100D4E8  +
mov ecx [ebp+rgIndices] +
sub ecx [ebp+plLbound] +
mov dl [ebp+var_1] +
mov ebx [ebp+arg_4] +
mov [ecx+ebx] dl +
jmp loc_100D4D3  +
lea eax [ebp+pv] +
push eax  +
lea eax [ebp+rgIndices] +
push eax  +
push edi  +
call esi  +
test eax eax +
jl loc_100D4E8  +
mov ecx [ebp+rgIndices] +
sub ecx [ebp+plLbound] +
mov dx word ptr [ebp+pv] +
mov ebx [ebp+arg_4] +
mov [ebx+ecx*2] dx +
inc [ebp+rgIndices]  +
mov ecx [ebp+rgIndices] +
cmp ecx [ebp+plUbound] +
jg loc_100D4E8  +
mov ebx [ebp+arg_0] +
jmp loc_100D481  +
mov eax 80070057h +
pop edi  +
pop ebx  +
pop esi  +
leave   +
retn 0Ch  +
***
mov eax ecx +
xor ecx ecx +
xor edx edx +
mov dword ptr [eax] offset off_1001A54 +
mov [eax+4] ecx +
mov [eax+8] ecx +
mov [eax+0Ch] ecx +
mov [eax+10h] ecx +
mov [eax+14h] cl +
mov [eax+15h] cl +
mov [eax+18h] ecx +
mov [eax+1Ch] cl +
mov [eax+20h] ecx +
mov [eax+24h] dx +
mov [eax+26h] cl +
mov [eax+28h] dx +
mov [eax+2Ah] dx +
mov [eax+2Ch] ecx +
mov [eax+30h] cl +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi+2Ch] +
push edi  +
xor edi edi +
mov dword ptr [esi] offset off_1001A54 +
cmp eax edi +
jz loc_100D55B  +
push eax  +
call sub_100E22D  +
xor eax eax +
pop ecx  +
mov [esi+2Ch] edi +
mov [esi+28h] ax +
mov eax [esi+20h] +
cmp eax edi +
jz loc_100D572  +
push eax  +
call sub_100E22D  +
xor eax eax +
pop ecx  +
mov [esi+20h] edi +
mov [esi+24h] ax +
mov eax [esi+0Ch] +
cmp eax edi +
jz loc_100D586  +
push eax  +
call sub_100E22D  +
pop ecx  +
mov [esi+0Ch] edi +
mov [esi+10h] edi +
mov eax [esi+8] +
cmp eax edi +
jz loc_100D596  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [esi+8] edi +
mov eax [esi+4] +
cmp eax edi +
jz loc_100D5A6  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [esi+4] edi +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push ebx  +
push esi  +
xor esi esi +
push esi  +
push esi  +
push esi  +
push 3  +
push esi  +
push esi  +
push esi  +
push 0FFFFFFFFh  +
push esi  +
mov ebx ecx +
call ds:CoInitializeSecurity  +
test eax eax +
jge loc_100D5CF  +
xor al al +
jmp loc_100D638  +
push edi  +
lea edi [ebx+4] +
push edi  +
push offset stru_1001E30  +
push 1  +
push esi  +
push offset stru_1001F00  +
call ds:CoCreateInstance  +
test eax eax +
jl loc_100D631  +
mov eax [edi] +
mov ecx [eax] +
add ebx 8 +
push ebx  +
push esi  +
push esi  +
push esi  +
push esi  +
push esi  +
push esi  +
push offset aRootWmi  +
push eax  +
call dword ptr [ecx+0Ch]  +
test eax eax +
jl loc_100D627  +
push esi  +
push esi  +
push 3  +
push 3  +
push 0FFFFFFFFh  +
push esi  +
push 0FFFFFFFFh  +
push dword ptr [ebx]  +
call ds:CoSetProxyBlanket  +
test eax eax +
jge loc_100D635  +
mov eax [ebx] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebx] esi +
mov eax [edi] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [edi] esi +
xor al al +
jmp loc_100D637  +
mov al 1 +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ax [ecx+28h] +
mov edx [ebp+arg_0] +
mov [edx] ax +
mov al [ecx+30h] +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ax [ecx+2Ah] +
mov edx [ebp+arg_0] +
mov [edx] ax +
mov al [ecx+30h] +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp byte ptr [ecx+30h] 0 +
jz loc_100D6B8  +
cmp dword ptr [ecx+2Ch] 0 +
jz loc_100D6B8  +
mov ax [ebp+arg_0] +
cmp ax [ecx+28h] +
jnb loc_100D6B8  +
mov edx [ecx+2Ch] +
movzx eax ax +
shl eax 2 +
mov dx [eax+edx+2] +
push esi  +
mov esi [ebp+arg_8] +
mov [esi] dx +
mov ecx [ecx+2Ch] +
mov ax [eax+ecx] +
mov ecx [ebp+arg_4] +
mov [ecx] ax +
mov al 1 +
pop esi  +
jmp loc_100D6BA  +
xor al al +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov al [ecx+15h] +
mov edx [ebp+arg_0] +
mov [edx] al +
mov al [ecx+1Ch] +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov al [ecx+14h] +
mov edx [ebp+arg_0] +
mov [edx] al +
mov al [ecx+1Ch] +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx+18h] +
mov edx [ebp+arg_0] +
mov [edx] eax +
mov al [ecx+1Ch] +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
cmp dword ptr [esi] 0 +
jnz loc_100D722  +
push 80004003h  +
call sub_100E006  +
mov eax [esi] +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
jge loc_100D73C  +
pop ebp  +
jmp sub_100E006  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push esi  +
push edi  +
lea eax [ebp+pvarg] +
push eax  +
call ds:VariantInit  +
mov eax [ebp+arg_0] +
xor esi esi +
cmp eax esi +
jz loc_100D83E  +
cmp [ebp+arg_4] esi +
jz loc_100D83E  +
mov edi [ebp+arg_10] +
cmp edi esi +
jz loc_100D83E  +
mov ecx [eax] +
push esi  +
push esi  +
lea edx [ebp+pvarg] +
push edx  +
push esi  +
push [ebp+arg_4]  +
push eax  +
call dword ptr [ecx+10h]  +
cmp eax esi +
jge loc_100D7A7  +
mov esi eax +
lea eax [ebp+pvarg] +
push eax  +
call ds:VariantClear  +
push eax  +
call sub_100D72B  +
mov eax esi +
jmp loc_100D853  +
mov eax [ebp+pvarg] +
test eax 2000h +
jz loc_100D7C0  +
push edi  +
push [ebp+arg_C]  +
lea eax [ebp+pvarg] +
push eax  +
call sub_100D3F4  +
jmp loc_100D82A  +
and eax 0FFFh +
sub eax 3 +
jz loc_100D800  +
sub eax 8 +
jz loc_100D7EA  +
sub eax 6 +
jz loc_100D7E0  +
dec eax  +
jnz loc_100D82A  +
jmp loc_100D806  +
mov esi 80070057h +
jmp loc_100D790  +
mov eax [ebp+arg_C] +
mov cl [ebp-8] +
mov [eax] cl +
jmp loc_100D82A  +
cmp edi 4 +
jb loc_100D7D9  +
mov ecx [ebp+arg_C] +
xor eax eax +
cmp word ptr [ebp-8] 0FFFFh +
setz al  +
mov [ecx] eax +
jmp loc_100D82A  +
cmp [ebp+arg_8] 1 +
jnz loc_100D817  +
cmp edi 2 +
jb loc_100D7D9  +
mov eax [ebp+arg_C] +
mov cx [ebp-8] +
mov [eax] cx +
jmp loc_100D82A  +
cmp [ebp+arg_8] 4 +
jnz loc_100D82A  +
cmp edi 4 +
jb loc_100D7D9  +
mov eax [ebp+arg_C] +
mov ecx [ebp-8] +
mov [eax] ecx +
lea eax [ebp+pvarg] +
push eax  +
call ds:VariantClear  +
push eax  +
call sub_100D72B  +
xor eax eax +
jmp loc_100D853  +
lea eax [ebp+pvarg] +
push eax  +
call ds:VariantClear  +
push eax  +
call sub_100D72B  +
mov eax 80070057h +
pop edi  +
pop esi  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_100D536  +
test byte ptr [ebp+8] 1 +
jz loc_100D878  +
push esi  +
call sub_100E22D  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi] +
test eax eax +
jz loc_100D895  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
and dword ptr [esi] 0 +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push ebx  +
xor ebx ebx +
push esi  +
push edi  +
mov [ebp+var_8] ebx +
mov [ebp+var_C] ebx +
mov [ebp+var_4] ebx +
mov [ebp+var_10] ebx +
cmp [ebp+arg_0] ebx +
jz loc_100DA4B  +
cmp [ebp+arg_4] ebx +
jz loc_100DA4B  +
cmp dword ptr [ebp+arg_8] ebx +
jz loc_100DA4B  +
cmp [ebp+arg_C] ebx +
jz loc_100DA4B  +
lea eax [ebp+var_C] +
push eax  +
mov esi 7FFFFFFFh +
push esi  +
push offset aSelectFromWher  +
call sub_1003A6B  +
cmp eax ebx +
jl loc_100DA50  +
lea eax [ebp+var_8] +
push eax  +
push esi  +
push [ebp+arg_C]  +
call sub_1003A6B  +
cmp eax ebx +
jl loc_100DA50  +
mov edi [ebp+var_C] +
add edi [ebp+var_8] +
lea eax [ebp+var_8] +
push eax  +
push esi  +
push dword ptr [ebp+arg_8]  +
call sub_1003A6B  +
cmp eax ebx +
jl loc_100DA50  +
mov eax [ebp+var_8] +
lea esi [edi+eax+1] +
xor ecx ecx +
push 2  +
pop edx  +
mov eax esi +
mul  edx +
seto cl  +
neg ecx  +
or ecx eax +
push ecx  +
call loc_100E23E  +
mov edi eax +
pop ecx  +
mov [ebp+var_C] edi +
cmp edi ebx +
jnz loc_100D968  +
mov eax [ebp+var_4] +
cmp eax ebx +
jz loc_100D95E  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax 8007000Eh +
jmp loc_100DA50  +
push [ebp+arg_C]  +
push dword ptr [ebp+arg_8]  +
push offset aSelectFromSWhe  +
push esi  +
push edi  +
call sub_100CC28  +
mov esi eax +
add esp 14h +
cmp esi ebx +
jge loc_100D997  +
mov eax [ebp+var_4] +
cmp eax ebx +
jz loc_100D990  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax esi +
jmp loc_100DA50  +
mov esi ds:SysAllocString +
push edi  +
call esi  +
mov ebx eax +
test ebx ebx +
jnz loc_100D9AF  +
mov [ebp+arg_C] 8007000Eh +
jmp loc_100DA1E  +
push offset aWql  +
call esi  +
mov edi eax +
test edi edi +
jz loc_100D9A6  +
mov eax [ebp+arg_0] +
mov esi [eax] +
lea ecx [ebp+var_4] +
call sub_100D884  +
push eax  +
push 0  +
push 30h  +
push ebx  +
push edi  +
push [ebp+arg_0]  +
call dword ptr [esi+50h]  +
mov esi ds:SysFreeString +
push edi  +
mov [ebp+arg_C] eax +
call esi  +
push ebx  +
call esi  +
cmp [ebp+arg_C] 0 +
jl loc_100DA1E  +
lea ecx [ebp+var_4] +
call sub_100D70E  +
mov esi [ebp+arg_4] +
mov ecx [eax] +
lea edx [ebp+var_10] +
push edx  +
push esi  +
push 1  +
push 0FFFFFFFFh  +
push eax  +
call dword ptr [ecx+10h]  +
mov [ebp+arg_C] eax +
test eax eax +
jl loc_100DA1E  +
cmp dword ptr [esi] 0 +
jnz loc_100DA18  +
mov [ebp+arg_C] 80004005h +
cmp [ebp+arg_C] 0 +
jge loc_100DA30  +
mov esi [ebp+arg_4] +
mov eax [esi] +
test eax eax +
jz loc_100DA30  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
and dword ptr [esi] 0 +
push [ebp+var_C]  +
call sub_100E22D  +
mov eax [ebp+var_4] +
pop ecx  +
test eax eax +
jz loc_100DA46  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+arg_C] +
jmp loc_100DA50  +
mov eax 80070057h +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
mov esi ds:wcschr +
push edi  +
xor ebx ebx +
push 5Ch  +
push [ebp+arg_0]  +
xor edi edi +
mov [ebp+var_4] ebx +
jmp loc_100DA80  +
inc edi  +
push 5Ch  +
add eax 2 +
push eax  +
call esi  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_100DA79  +
lea eax [ebp+var_4] +
push eax  +
push 7FFFFFFFh  +
push [ebp+arg_0]  +
call sub_1003A6B  +
test eax eax +
jge loc_100DAA1  +
xor al al +
jmp loc_100DB11  +
inc [ebp+var_4]  +
mov eax [ebp+var_4] +
add edi eax +
xor ecx ecx +
push 2  +
pop edx  +
mov eax edi +
mul  edx +
seto cl  +
neg ecx  +
or ecx eax +
push ecx  +
call loc_100E23E  +
mov esi eax +
pop ecx  +
test esi esi +
jz loc_100DA9D  +
lea eax [edi+edi] +
push eax  +
push 0  +
push esi  +
call memset  +
xor eax eax +
add esp 0Ch +
cmp [ebp+var_4] eax +
jbe loc_100DB05  +
lea ecx [edi-1] +
cmp ebx ecx +
jnb loc_100DB05  +
mov ecx [ebp+arg_0] +
lea ecx [ecx+eax*2] +
mov dx [ecx] +
mov [esi+ebx*2] dx +
inc ebx  +
cmp word ptr [ecx] 5Ch +
jnz loc_100DAFF  +
push 5Ch  +
pop ecx  +
mov [esi+ebx*2] cx +
inc ebx  +
inc eax  +
cmp eax [ebp+var_4] +
jb loc_100DADC  +
mov eax [ebp+arg_4] +
mov [eax] esi +
mov eax [ebp+arg_8] +
mov [eax] edi +
mov al 1 +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
and [ebp+var_4] 0 +
push esi  +
lea eax [ebp+pvarg] +
push eax  +
mov esi ecx +
call ds:VariantInit  +
push dword ptr [esi+0Ch]  +
lea ecx [ebp+var_4] +
push offset aWmimonitorbasi  +
call sub_100D884  +
push eax  +
push dword ptr [esi+8]  +
call sub_100D8A1  +
test eax eax +
jge loc_100DB77  +
lea eax [ebp+pvarg] +
push eax  +
call ds:VariantClear  +
push eax  +
call sub_100D72B  +
mov eax [ebp+var_4] +
test eax eax +
jz loc_100DB70  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
xor al al +
jmp loc_100DC26  +
push 1  +
lea eax [esi+14h] +
push eax  +
push 2  +
push offset aDisplaytransfe  +
push [ebp+var_4]  +
call sub_100D745  +
test eax eax +
jl loc_100DB53  +
lea ecx [ebp+var_4] +
call sub_100D70E  +
mov ecx [eax] +
push 0  +
push 0  +
lea edx [ebp+pvarg] +
push edx  +
push 0  +
push offset aSupporteddispl  +
push eax  +
call dword ptr [ecx+10h]  +
test eax eax +
jl loc_100DB53  +
push edi  +
mov edi dword ptr [ebp+pvarg.anonymous_0+8] +
push 1  +
lea eax [esi+15h] +
push eax  +
push 2  +
push offset aDisplaytype  +
push edi  +
call sub_100D745  +
test eax eax +
jge loc_100DBD2  +
lea eax [ebp+pvarg] +
push eax  +
jmp loc_100DBED  +
push 4  +
add esi 18h +
push esi  +
push 3  +
push offset aHaspreferredti  +
push edi  +
call sub_100D745  +
test eax eax +
lea eax [ebp+pvarg] +
push eax  +
jge loc_100DC0A  +
call ds:VariantClear  +
push eax  +
call sub_100D72B  +
mov eax [ebp+var_4] +
test eax eax +
jz loc_100DC06  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
xor al al +
jmp loc_100DC25  +
call ds:VariantClear  +
push eax  +
call sub_100D72B  +
mov eax [ebp+var_4] +
test eax eax +
jz loc_100DC23  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov al 1 +
pop edi  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
push esi  +
mov esi ecx +
mov eax [esi+20h] +
test eax eax +
jz loc_100DC53  +
push eax  +
call sub_100E22D  +
and dword ptr [esi+20h] 0 +
xor eax eax +
pop ecx  +
mov [esi+24h] ax +
push dword ptr [esi+0Ch]  +
lea ecx [ebp+var_4] +
push offset aWmimonitorid  +
call sub_100D884  +
push eax  +
push dword ptr [esi+8]  +
call sub_100D8A1  +
test eax eax +
jge loc_100DC84  +
mov eax [ebp+var_4] +
test eax eax +
jz loc_100DC7D  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
xor al al +
jmp loc_100DD21  +
push edi  +
push 2  +
lea edi [esi+24h] +
push edi  +
push 1  +
push offset aUserfriendlyna  +
push [ebp+var_4]  +
call sub_100D745  +
test eax eax +
jl loc_100DD00  +
movzx eax word ptr [edi] +
test ax ax +
jbe loc_100DD11  +
movzx eax ax +
xor ecx ecx +
push 2  +
inc eax  +
pop edx  +
mul  edx +
seto cl  +
neg ecx  +
or ecx eax +
push ecx  +
call loc_100E23E  +
pop ecx  +
mov [esi+20h] eax +
test eax eax +
jz loc_100DD00  +
movzx ecx word ptr [edi] +
lea ecx [ecx+ecx+2] +
push ecx  +
push 0  +
push eax  +
call memset  +
movzx eax word ptr [edi] +
add esp 0Ch +
push eax  +
push dword ptr [esi+20h]  +
push 1  +
push offset aUserfriendly_0  +
push [ebp+var_4]  +
call sub_100D745  +
test eax eax +
jge loc_100DD11  +
push dword ptr [esi+20h]  +
call sub_100E22D  +
and dword ptr [esi+20h] 0 +
pop ecx  +
mov eax [ebp+var_4] +
test eax eax +
jz loc_100DD0D  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
xor al al +
jmp loc_100DD20  +
mov eax [ebp+var_4] +
test eax eax +
jz loc_100DD1E  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov al 1 +
pop edi  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 48h +
and [ebp+var_4] 0 +
push esi  +
mov esi ecx +
mov eax [esi+2Ch] +
test eax eax +
jz loc_100DD50  +
push eax  +
call sub_100E22D  +
and dword ptr [esi+2Ch] 0 +
xor eax eax +
pop ecx  +
mov [esi+28h] ax +
push dword ptr [esi+0Ch]  +
lea ecx [ebp+var_4] +
push offset aWmimonitorlist  +
call sub_100D884  +
push eax  +
push dword ptr [esi+8]  +
call sub_100D8A1  +
test eax eax +
jge loc_100DD81  +
mov eax [ebp+var_4] +
test eax eax +
jz loc_100DD7A  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
xor al al +
jmp loc_100DF2D  +
xor eax eax +
inc eax  +
and [ebp+rgIndices] 0 +
push ebx  +
push edi  +
mov [ebp+var_44] eax +
mov [ebp+var_34] eax +
lea eax [esi+2Ah] +
push 2  +
pop ebx  +
mov [ebp+var_30] eax +
lea edi [esi+28h] +
lea eax [ebp+var_40] +
mov [ebp+var_48] offset aNumofmonitorso +
mov [ebp+var_40] edi +
mov [ebp+var_3C] ebx +
mov [ebp+var_38] offset aPreferredmonit +
mov [ebp+var_2C] ebx +
mov [ebp+var_C] eax +
jmp loc_100DDBE  +
mov eax [ebp+var_C] +
push dword ptr [eax+4]  +
push dword ptr [eax]  +
push dword ptr [eax-4]  +
push dword ptr [eax-8]  +
push [ebp+var_4]  +
call sub_100D745  +
test eax eax +
jl loc_100DF5E  +
inc [ebp+rgIndices]  +
add [ebp+var_C] 10h +
cmp [ebp+rgIndices] ebx +
jl loc_100DDBB  +
lea eax [ebp+pvarg] +
push eax  +
call ds:VariantInit  +
lea ecx [ebp+var_4] +
call sub_100D70E  +
mov ecx [eax] +
push 0  +
push 0  +
lea edx [ebp+pvarg] +
push edx  +
push 0  +
push offset aMonitorsourcem  +
push eax  +
call dword ptr [ecx+10h]  +
test eax eax +
jl loc_100DF4E  +
mov eax 200Dh +
cmp word ptr [ebp+pvarg.anonymous_0] ax +
jnz loc_100DF4E  +
mov eax dword ptr [ebp+pvarg.anonymous_0+8] +
mov [ebp+psa] eax +
movzx eax word ptr [edi] +
xor ecx ecx +
push 4  +
pop edx  +
mul  edx +
seto cl  +
neg ecx  +
or ecx eax +
push ecx  +
call loc_100E23E  +
pop ecx  +
mov [esi+2Ch] eax +
test eax eax +
jz loc_100DF4E  +
movzx ecx word ptr [edi] +
shl ecx 2 +
push ecx  +
push 0  +
push eax  +
call memset  +
and [ebp+rgIndices] 0 +
xor eax eax +
add esp 0Ch +
cmp ax [edi] +
jnb loc_100DF0C  +
and [ebp+var_C] 0 +
lea ecx [ebp+var_C] +
call sub_100D884  +
push eax  +
lea eax [ebp+rgIndices] +
push eax  +
push [ebp+psa]  +
call ds:SafeArrayGetElement  +
test eax eax +
jl loc_100DF30  +
mov eax [esi+2Ch] +
mov edx [ebp+rgIndices] +
lea eax [eax+edx*4] +
mov [ebp+var_40] eax +
add eax 2 +
xor ecx ecx +
inc ecx  +
and [ebp+var_14] 0 +
mov [ebp+var_30] eax +
lea eax [ebp+var_40] +
mov [ebp+var_48] offset aHorizontalacti +
mov [ebp+var_44] ecx +
mov [ebp+var_3C] ebx +
mov [ebp+var_38] offset aVerticalactive +
mov [ebp+var_34] ecx +
mov [ebp+var_2C] ebx +
mov [ebp+var_10] eax +
jmp loc_100DECD  +
mov eax [ebp+var_10] +
push dword ptr [eax+4]  +
push dword ptr [eax]  +
push dword ptr [eax-4]  +
push dword ptr [eax-8]  +
push [ebp+var_C]  +
call sub_100D745  +
test eax eax +
jl loc_100DF30  +
inc [ebp+var_14]  +
add [ebp+var_10] 10h +
cmp [ebp+var_14] ebx +
jl loc_100DECA  +
mov eax [ebp+var_C] +
test eax eax +
jz loc_100DEFD  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
movzx eax word ptr [edi] +
inc [ebp+rgIndices]  +
cmp [ebp+rgIndices] eax +
jl loc_100DE6D  +
lea eax [ebp+pvarg] +
push eax  +
call ds:VariantClear  +
push eax  +
call sub_100D72B  +
mov eax [ebp+var_4] +
test eax eax +
jz loc_100DF29  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov al 1 +
pop edi  +
pop ebx  +
pop esi  +
leave   +
retn   +
push dword ptr [esi+2Ch]  +
call sub_100E22D  +
xor eax eax +
and [esi+2Ch] eax +
mov [edi] ax +
mov eax [ebp+var_C] +
pop ecx  +
test eax eax +
jz loc_100DF4E  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
lea eax [ebp+pvarg] +
push eax  +
call ds:VariantClear  +
push eax  +
call sub_100D72B  +
mov eax [ebp+var_4] +
test eax eax +
jz loc_100DF6B  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
xor al al +
jmp loc_100DF2B  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
push edi  +
lea edi [esi+0Ch] +
mov eax [edi] +
test eax eax +
jz loc_100DF94  +
push eax  +
call sub_100E22D  +
and dword ptr [edi] 0 +
and dword ptr [esi+10h] 0 +
pop ecx  +
lea eax [esi+10h] +
push eax  +
push edi  +
push [ebp+arg_0]  +
call sub_100DA5C  +
test al al +
jz loc_100DFC5  +
mov ecx esi +
call sub_100DB1D  +
mov ecx esi +
mov [esi+1Ch] al +
call sub_100DC2E  +
mov ecx esi +
mov [esi+26h] al +
call sub_100DD29  +
mov [esi+30h] al +
mov al 1 +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp byte ptr [ecx+26h] 0 +
jz loc_100DFFB  +
mov ecx [ecx+20h] +
test ecx ecx +
jz loc_100DFFB  +
movzx eax [ebp+arg_4] +
push ecx  +
push eax  +
push [ebp+arg_0]  +
call sub_1008C74  +
xor ecx ecx +
test eax eax +
setnl cl  +
mov al cl +
jmp loc_100DFFD  +
xor al al +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+arg_0]  +
call loc_100E085  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
mov esi ecx +
and dword ptr [esi+0Ch] 0 +
mov [esi+4] eax +
mov eax [ebp+arg_4] +
mov dword ptr [esi] offset off_1001DC4 +
mov [esi+8] eax +
test eax eax +
jz loc_100E04C  +
cmp [ebp+arg_8] 0 +
jz loc_100E04C  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
mov eax esi +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi+8] +
mov dword ptr [esi] offset off_1001DC4 +
test eax eax +
jz loc_100E070  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov esi [esi+0Ch] +
test esi esi +
jz loc_100E07E  +
push esi  +
call ds:LocalFree  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push 0  +
push dword ptr [ebp+0Ch]  +
lea ecx [ebp-10h] +
push dword ptr [ebp+8]  +
call sub_100E01E  +
push offset dword_100ECC0  +
lea eax [ebp-10h] +
push eax  +
call _CxxThrowException  +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_1001DC4 +
mov ecx [eax+4] +
mov [esi+4] ecx +
mov eax [eax+8] +
and dword ptr [esi+0Ch] 0 +
mov [esi+8] eax +
test eax eax +
jz loc_100E0DC  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_100E058  +
test byte ptr [ebp+8] 1 +
jz loc_100E102  +
push esi  +
call sub_100E22D  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
call ??0exception@@QAE@XZ  +
cmp dword ptr [esi+4] 0 +
mov dword ptr [esi] offset off_1001DC8 +
jnz loc_100E132  +
cmp dword ptr [esi+8] 0 +
jnz loc_100E132  +
mov eax off_1010024 +
mov [esi+4] eax +
mov eax esi +
pop esi  +
retn   +
***
jmp ??1exception@@UAE@XZ  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call ??0exception@@QAE@ABV0@@Z  +
mov dword ptr [esi] offset off_1001DC8 +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push ecx  +
lea ecx [ebp-0Ch] +
call sub_100E14B  +
push offset dword_100ECF4  +
lea eax [ebp-0Ch] +
push eax  +
call _CxxThrowException  +
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_1001DC8 +
call ??1exception@@UAE@XZ  +
test byte ptr [ebp+8] 1 +
jz loc_100E1B2  +
push esi  +
call sub_100E22D  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push esi  +
mov esi ds:malloc +
jmp loc_100E1DC  +
push dword ptr [ebp+8]  +
call _callnewh  +
pop ecx  +
test eax eax +
jz loc_100E1E9  +
push dword ptr [ebp+8]  +
call esi  +
pop ecx  +
test eax eax +
jz loc_100E1CF  +
pop esi  +
leave   +
retn   +
***
test byte ptr dword_10100E4 1 +
mov esi offset dword_10100D8 +
jnz loc_100E210  +
or dword_10100E4 1 +
mov ecx esi +
call sub_100E10E  +
push offset loc_100EC93  +
call sub_100E67F  +
pop ecx  +
push esi  +
lea ecx [ebp-0Ch] +
call sub_100E14B  +
push offset dword_100ECF4  +
lea eax [ebp-0Ch] +
push eax  +
call _CxxThrowException  +
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp ds:free  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push esi  +
mov esi ds:malloc +
jmp loc_100E25C  +
push dword ptr [ebp+8]  +
call _callnewh  +
pop ecx  +
test eax eax +
jz loc_100E269  +
push dword ptr [ebp+8]  +
call esi  +
pop ecx  +
test eax eax +
jz loc_100E24F  +
pop esi  +
leave   +
retn   +
***
test byte ptr dword_10100F4 1 +
mov esi offset dword_10100E8 +
jnz loc_100E290  +
or dword_10100F4 1 +
mov ecx esi +
call sub_100E10E  +
push offset loc_100ECAC  +
call sub_100E67F  +
pop ecx  +
push esi  +
lea ecx [ebp-0Ch] +
call sub_100E14B  +
push offset dword_100ECF4  +
lea eax [ebp-0Ch] +
push eax  +
call _CxxThrowException  +
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
xor eax eax +
jmp loc_100E2C9  +
test eax eax +
jnz loc_100E2CE  +
mov ecx [esi] +
test ecx ecx +
jz loc_100E2C6  +
call ecx  +
add esi 4 +
cmp esi [ebp+arg_4] +
jb loc_100E2BA  +
pop esi  +
pop ebp  +
retn   +
***
mov eax dword_101011C +
push offset dword_101010C  +
push dword_1010118  +
mov dword_101010C eax +
push offset unk_10100FC  +
push offset unk_1010100  +
push offset unk_10100F8  +
call ds:__getmainargs  +
add esp 14h +
mov dword_1010108 eax +
retn   +
***
call __SEH_prolog4  +
xor ebx ebx +
mov [ebp+var_1C] ebx +
mov [ebp+ms_exc.disabled] ebx +
lea eax [ebp+StartupInfo] +
push eax  +
call ds:GetStartupInfoA  +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov [ebp+ms_exc.disabled] 1 +
mov eax large fs:18h +
mov esi [eax+4] +
mov edi offset Destination +
push 0  +
push esi  +
push edi  +
call ds:InterlockedCompareExchange  +
test eax eax +
jz loc_100E36E  +
cmp eax esi +
jnz loc_100E361  +
xor esi esi +
inc esi  +
mov ebx esi +
jmp loc_100E371  +
push 3E8h  +
call ds:Sleep  +
jmp loc_100E348  +
xor esi esi +
inc esi  +
mov eax dword_1010444 +
cmp eax esi +
jnz loc_100E384  +
push 1Fh  +
call _amsg_exit  +
pop ecx  +
jmp loc_100E3B3  +
mov eax dword_1010444 +
test eax eax +
jnz loc_100E3AD  +
mov dword_1010444 esi +
push offset dword_1001338  +
push offset dword_100132C  +
call sub_100E2AD  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_100E3B3  +
jmp loc_100E4DB  +
mov dword_1010114 esi +
mov eax dword_1010444 +
cmp eax esi +
jnz loc_100E3D7  +
push offset dword_1001328  +
push offset dword_100131C  +
call _initterm  +
pop ecx  +
pop ecx  +
mov dword_1010444 2 +
test ebx ebx +
jnz loc_100E3E3  +
push ebx  +
push edi  +
call ds:InterlockedExchange  +
cmp dword_1010454 0 +
jz loc_100E407  +
push offset dword_1010454  +
call sub_100E8B9  +
pop ecx  +
test eax eax +
jz loc_100E407  +
push 0  +
push 2  +
push 0  +
call dword_1010454  +
mov eax ds:_acmdln +
mov esi [eax] +
mov [ebp+var_20] esi +
mov al [esi] +
cmp al 20h +
ja $LN61  +
test al al +
jz loc_100E421  +
cmp [ebp+var_1C] 0 +
jnz $LN61  +
mov al [esi] +
test al al +
jz loc_100E431  +
cmp al 20h +
ja loc_100E431  +
inc esi  +
mov [ebp+var_20] esi +
jmp loc_100E421  +
test byte ptr [ebp+StartupInfo.dwFlags] 1 +
jz loc_100E43D  +
movzx eax [ebp+StartupInfo.wShowWindow] +
jmp loc_100E440  +
push 0Ah  +
pop eax  +
push eax  +
push esi  +
push 0  +
push 1000000h  +
call _WinMain@16  +
mov dword_1010110 eax +
cmp dword_1010104 0 +
jnz $LN62  +
push eax  +
call ds:exit  +
cmp al 22h +
jnz loc_100E472  +
xor ecx ecx +
cmp [ebp+var_1C] ecx +
setz cl  +
mov [ebp+var_1C] ecx +
movzx eax al +
push eax  +
call ds:_ismbblead  +
pop ecx  +
test eax eax +
jz loc_100E485  +
inc esi  +
mov [ebp+var_20] esi +
inc esi  +
jmp loc_100E40E  +
mov eax [ebp-14h] +
mov ecx [eax] +
mov ecx [ecx] +
mov [ebp-24h] ecx +
push eax  +
push ecx  +
call _XcptFilter  +
pop ecx  +
pop ecx  +
retn   +
mov esp [ebp-18h] +
mov eax [ebp-24h] +
mov dword_1010110 eax +
cmp dword_1010104 0 +
jnz $LN62  +
push eax  +
call ds:_exit  +
cmp dword_1010114 0 +
jnz loc_100E4C6  +
call ds:_cexit  +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov eax dword_1010110 +
jmp loc_100E4E7  +
xor eax eax +
inc eax  +
retn   +
mov esp [ebp-18h] +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov eax 0FFh +
call __SEH_epilog4  +
retn   +
***
mov eax 5A4Dh +
cmp ds:1000000h ax +
jz loc_100E504  +
xor eax eax +
jmp loc_100E551  +
mov eax ds:100003Ch +
lea eax [eax+1000000h] +
cmp dword ptr [eax] 4550h +
jnz loc_100E500  +
movzx ecx word ptr [eax+18h] +
cmp ecx 10Bh +
jz loc_100E53E  +
cmp ecx 20Bh +
jnz loc_100E500  +
cmp dword ptr [eax+84h] 0Eh +
jbe loc_100E500  +
xor ecx ecx +
cmp [eax+0F8h] ecx +
jmp loc_100E54C  +
cmp dword ptr [eax+74h] 0Eh +
jbe loc_100E500  +
xor ecx ecx +
cmp [eax+0E8h] ecx +
setnz cl  +
mov eax ecx +
push 2  +
mov dword_1010104 eax +
call sub_100EA52  +
push eax  +
call ds:__set_app_type  +
or dword_101044C 0FFFFFFFFh +
or dword_1010450 0FFFFFFFFh +
pop ecx  +
pop ecx  +
call ds:__p__fmode  +
mov ecx dword_1010124 +
mov [eax] ecx +
call ds:__p__commode  +
mov ecx dword_1010120 +
mov [eax] ecx +
call sub_100E9E4  +
cmp dword_1010078 0 +
jnz loc_100E5AA  +
push offset sub_100E9E4  +
call ds:__setusermatherr  +
pop ecx  +
call sub_100E9CC  +
xor eax eax +
retn   +
***
call sub_100EA91  +
jmp ___tmainCRTStartup  +
***
cmp ecx dword_1010060 +
jnz loc_100E5D1  +
retn 0  +
jmp loc_100EB27  +
***
call __SEH_prolog4  +
pop ecx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_0]  +
call sub_100E5F5  +
neg eax  +
sbb eax eax +
neg eax  +
pop ecx  +
dec eax  +
pop ebp  +
retn   +
***
jmp ds:_purecall  +
***
sub ecx eax +
sbb eax eax +
not eax  +
and ecx eax +
mov eax esp +
and eax 0FFFFF000h +
cmp ecx eax +
jb cs20  +
mov eax ecx +
pop ecx  +
xchg eax esp +
mov eax [eax] +
mov [esp+0] eax +
retn   +
sub eax 1000h +
test [eax] eax +
jmp cs10  +
***
cmp cl 40h +
jnb loc_100E70B  +
cmp cl 20h +
jnb loc_100E700  +
shrd eax edx +
sar edx cl +
retn   +
mov eax edx +
sar edx 1Fh +
and cl 1Fh +
sar eax cl +
retn   +
sar edx 1Fh +
mov eax edx +
retn   +
***
push ecx  +
lea ecx [esp+8] +
sub ecx eax +
and ecx 0Fh +
add eax ecx +
sbb ecx ecx +
or eax ecx +
pop ecx  +
jmp __alloca_probe  +
***
push ecx  +
lea ecx [esp+8] +
sub ecx eax +
and ecx 7 +
add eax ecx +
sbb ecx ecx +
or eax ecx +
pop ecx  +
jmp __alloca_probe  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call ds:??1type_info@@UAE@XZ  +
test byte ptr [ebp+8] 1 +
jz loc_100E778  +
push esi  +
call sub_100E22D  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
jmp ds:?what@exception@@UBEPBDXZ  +
***
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov eax [eax] +
cmp dword ptr [eax] 0E06D7363h +
jnz loc_100E7FC  +
cmp dword ptr [eax+10h] 3 +
jnz loc_100E7FC  +
mov eax [eax+14h] +
cmp eax 19930520h +
jz loc_100E7F6  +
cmp eax 19930521h +
jz loc_100E7F6  +
cmp eax 19930522h +
jz loc_100E7F6  +
cmp eax 1994000h +
jnz loc_100E7FC  +
call ds:?terminate@@YAXXZ  +
xor eax eax +
pop ebp  +
retn 4  +
***
push (offset dword_100E7BC+3)  +
call ds:SetUnhandledExceptionFilter  +
xor eax eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
mov eax 5A4Dh +
cmp [ecx] ax +
jz loc_100E846  +
xor eax eax +
pop ebp  +
retn   +
mov eax [ecx+3Ch] +
add eax ecx +
cmp dword ptr [eax] 4550h +
jnz loc_100E842  +
xor edx edx +
mov ecx 10Bh +
cmp [eax+18h] cx +
setz dl  +
mov eax edx +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [eax+3Ch] +
add ecx eax +
movzx eax word ptr [ecx+14h] +
push ebx  +
push esi  +
movzx esi word ptr [ecx+6] +
xor edx edx +
push edi  +
lea eax [eax+ecx+18h] +
test esi esi +
jbe loc_100E8AD  +
mov edi [ebp+arg_4] +
mov ecx [eax+0Ch] +
cmp edi ecx +
jb loc_100E8A5  +
mov ebx [eax+8] +
add ebx ecx +
cmp edi ebx +
jb loc_100E8AF  +
inc edx  +
add eax 28h +
cmp edx esi +
jb loc_100E895  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
call __SEH_prolog4  +
and [ebp+ms_exc.disabled] 0 +
mov esi 1000000h +
push esi  +
call sub_100E830  +
pop ecx  +
test eax eax +
jz loc_100E916  +
mov eax [ebp+arg_0] +
sub eax esi +
push eax  +
push esi  +
call sub_100E870  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_100E916  +
mov eax [eax+24h] +
shr eax 1Fh +
not eax  +
and eax 1 +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
jmp loc_100E91F  +
mov eax [ebp-14h] +
mov eax [eax] +
mov eax [eax] +
xor ecx ecx +
cmp eax 0C0000005h +
setz cl  +
mov eax ecx +
retn   +
mov esp [ebp-18h] +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
xor eax eax +
call __SEH_epilog4  +
retn   +
***
mov eax [esp+8+arg_4] +
mov ecx [ebp-10h] +
mov large fs:0 ecx +
pop ecx  +
pop edi  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
push ecx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push offset sub_100E5C6  +
push offset dword_1010060  +
call _except_handler4_common  +
add esp 18h +
pop ebp  +
retn   +
***
call ds:_controlfp  +
pop ecx  +
pop ecx  +
retn   +
***
retn   +
***
call __SEH_prolog4  +
xor eax eax +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_100EA45  +
cmp ecx 0FFFFFFFFh +
jz loc_100EA45  +
and [ebp+ms_exc.disabled] eax +
mov edx 5A4Dh +
cmp [ecx] dx +
jnz loc_100EA3E  +
mov edx [ecx+3Ch] +
test edx edx +
jl loc_100EA3E  +
cmp edx 10000000h +
jnb loc_100EA3E  +
lea eax [edx+ecx] +
mov [ebp+var_1C] eax +
cmp dword ptr [eax] 4550h +
jz loc_100EA3E  +
jmp loc_100EA39  +
xor eax eax +
inc eax  +
retn   +
mov esp [ebp-18h] +
xor eax eax +
mov [ebp+var_1C] eax +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
call __SEH_epilog4  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
call ds:GetModuleHandleA  +
test eax eax +
jz loc_100EA87  +
push eax  +
call sub_100E9EC  +
test eax eax +
jz loc_100EA87  +
movzx eax word ptr [eax+5Ch] +
cmp ax 2 +
jnz loc_100EA7C  +
push 2  +
pop eax  +
pop ebp  +
retn   +
cmp ax 3 +
jnz loc_100EA87  +
xor eax eax +
inc eax  +
pop ebp  +
retn   +
mov eax [ebp+arg_0] +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov eax dword_1010060 +
and [ebp+SystemTimeAsFileTime.dwLowDateTime] 0 +
and [ebp+SystemTimeAsFileTime.dwHighDateTime] 0 +
push ebx  +
push edi  +
mov edi 0BB40E64Eh +
mov ebx 0FFFF0000h +
cmp eax edi +
jz loc_100EAC3  +
test eax ebx +
jz loc_100EAC3  +
not eax  +
mov dword_1010064 eax +
jmp loc_100EB1E  +
push esi  +
lea eax [ebp+SystemTimeAsFileTime] +
push eax  +
call ds:GetSystemTimeAsFileTime  +
mov esi [ebp+SystemTimeAsFileTime.dwHighDateTime] +
xor esi [ebp+SystemTimeAsFileTime.dwLowDateTime] +
call ds:GetCurrentProcessId  +
xor esi eax +
call ds:GetCurrentThreadId  +
xor esi eax +
call ds:GetTickCount  +
xor esi eax +
lea eax [ebp+PerformanceCount] +
push eax  +
call ds:QueryPerformanceCounter  +
mov eax dword ptr [ebp+PerformanceCount+4] +
xor eax dword ptr [ebp+PerformanceCount] +
xor esi eax +
cmp esi edi +
jz loc_100EB0A  +
test dword_1010060 ebx +
jnz loc_100EB0F  +
mov esi 0BB40E64Fh +
mov dword_1010060 esi +
not esi  +
mov dword_1010064 esi +
pop esi  +
pop edi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 328h +
mov dword_1010228 eax +
mov dword_1010224 ecx +
mov dword_1010220 edx +
mov dword_101021C ebx +
mov dword_1010218 esi +
mov dword_1010214 edi +
mov word_1010240 ss +
mov word_1010234 cs +
mov word_1010210 ds +
mov word_101020C es +
mov word_1010208 fs +
mov word_1010204 gs +
pushf   +
pop dword_1010238  +
mov eax [ebp+0] +
mov dword_101022C eax +
mov eax [ebp+4] +
mov dword_1010230 eax +
lea eax [ebp+8] +
mov dword_101023C eax +
mov eax [ebp-320h] +
mov dword_1010178 10001h +
mov eax dword_1010230 +
mov dword_1010134 eax +
mov dword_1010128 0C0000409h +
mov dword_101012C 1 +
mov eax dword_1010060 +
mov [ebp-328h] eax +
mov eax dword_1010064 +
mov [ebp-324h] eax +
push 0  +
call ds:SetUnhandledExceptionFilter  +
push offset ExceptionInfo  +
call ds:UnhandledExceptionFilter  +
push 0C0000409h  +
call ds:GetCurrentProcess  +
push eax  +
call ds:TerminateProcess  +
leave   +
retn   +
***
push offset loc_100EC7E  +
call sub_100E67F  +
pop ecx  +
retn   +
***
mov eax dword_10100CC +
test eax eax +
jz locret_100EC8D  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
retn   +
***
mov dword_10100D8 offset off_1001DC8 +
mov ecx offset dword_10100D8 +
jmp ??1exception@@UAE@XZ  +
***
mov dword_10100E8 offset off_1001DC8 +
mov ecx offset dword_10100E8 +
jmp ??1exception@@UAE@XZ  +
***
add gs:[eax] al +
retf   +
***
imul ebp [esi+64h] +
retn   +
***
