mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
lea edx [eax+2] +
nop   +
nop   +
nop   +
nop   +
nop   +
nop   +
nop   +
nop   +
nop   +
nop   +
nop   +
nop   +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_1001180  +
sub eax edx +
sar eax 1 +
pop ebp  +
retn 4  +
***
mov eax [ecx+4] +
cmp eax [ecx+8] +
jnb loc_1002507  +
mov ax [eax] +
retn   +
***
push edi  +
call ds:iswalpha  +
pop ecx  +
test eax eax +
jz loc_1001AAF  +
jmp loc_1002524  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi] +
test al 1 +
jz loc_100256A  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ecx+8] +
mov eax [ecx+4] +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov edi edx +
sub edi eax +
sar edi 1 +
cmp esi edi +
jbe loc_1002686  +
mov [ecx+4] edx +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
add edi 4 +
cmp edi 8 +
jb loc_1001C4B  +
push 4  +
push ebx  +
call ds:CoInitializeEx  +
jmp loc_100274F  +
***
lea ecx [ebp-350h] +
call sub_1001E37  +
push eax  +
push ebx  +
push esi  +
call ds:OpenEventW  +
jmp loc_10027A6  +
mov ecx [ebp-6A0h] +
lea eax [ebp-14h] +
push eax  +
call sub_1002931  +
mov esi eax +
cmp [ebp-6A4h] ebx +
jz loc_1001256  +
push dword ptr [ebp-6A4h]  +
call ds:SetEvent  +
cmp esi ebx +
jl loc_10027B6  +
push 0FFFFFFFFh  +
push ebx  +
lea eax [ebp-6ACh] +
push eax  +
push 2  +
call ds:WaitForMultipleObjects  +
jmp loc_10027B6  +
***
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+8] +
push edi  +
lea eax [esi+0Ch] +
push eax  +
call ds:InterlockedDecrement  +
mov edi eax +
test edi edi +
jz loc_10028B0  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
lea eax [ebp+pv] +
push eax  +
push [ebp+rclsid]  +
call ds:StringFromCLSID  +
jmp loc_1001C8F  +
***
lea eax [ebp-0Ch] +
push eax  +
push dword ptr [ebp-4]  +
push offset dword_10012D0  +
call ds:CreateItemMoniker  +
jmp loc_1001C9B  +
***
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push esi  +
mov esi [ebp+8] +
lea eax [esi+0Ch] +
push eax  +
lea ecx [ebp-8] +
call sub_10041FA  +
mov eax [esi+30h] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+0Ch]  +
mov ecx [ebp-8] +
push 1  +
call sub_1004098  +
xor eax eax +
pop esi  +
leave   +
retn 4  +
***
push offset dword_1006048  +
push dword_100604C  +
mov dword_1006048 eax +
push offset unk_1006038  +
push offset unk_100603C  +
push offset unk_1006034  +
call ds:__wgetmainargs  +
add esp 14h +
mov dword_1006044 eax +
retn   +
***
sub esp 28h +
cmp al 2 +
jnz loc_10013AC  +
mov dword ptr [esp] 0 +
mov cl byte_100601C +
cmp cl al +
jnz loc_10013AC  +
lea edx [esp+4] +
push edx  +
call ds:GetSystemInfo  +
mov ecx 1 +
cmp [esp+18h] ecx +
jbe loc_1002B44  +
lea eax [esp] +
push eax  +
mov byte_100601C cl +
call ds:InterlockedIncrement  +
add esp 28h +
retn   +
***
setz al  +
test al al +
jz loc_100311E  +
cmp [ebp+var_4] 0 +
jnz loc_100317D  +
mov eax [ebp+arg_0] +
cmp dword ptr [eax+0Ch] 0 +
jl loc_10013D7  +
mov ecx [ebp+arg_4] +
mov edx [ebp+var_C] +
mov [ecx+8] edx +
pop edi  +
pop esi  +
xor eax eax +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 20h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
test esi esi +
jz loc_1003ECA  +
mov eax [esi+8] +
cmp eax 4C66506Ch +
jnz loc_1003ECA  +
mov ebx [ebp+arg_4] +
mov [ebp+var_4] ebx +
test ebx ebx +
jz loc_1003ECA  +
test bl 3 +
jnz loc_1003ECA  +
mov cl byte_100601C +
cmp cl 2 +
jz loc_1003D7A  +
cmp [ebp+arg_8] 0 +
push edi  +
jz loc_1003D84  +
cmp dword ptr [esi+0Ch] 0 +
jl loc_1001464  +
call ds:GetCurrentThreadId  +
mov edx [ebx+8] +
cmp edx eax +
jnz loc_1003E2D  +
mov eax [ebx+0Ch] +
test eax eax +
jnz loc_1003E1C  +
mov dword ptr [ebx+8] 0 +
mov eax [ebx] +
mov edi [ebx+4] +
mov [ebp+var_8] edi +
mov [ebp+var_14] eax +
mov [ebp+var_10] edi +
test eax 10000h +
jz loc_1003E2D  +
and eax 0FFFEFFFFh +
mov [ebp+var_C] eax +
mov eax [ebp+var_14] +
mov edx [ebp+var_10] +
mov ebx [ebp+var_C] +
mov ecx [ebp+var_8] +
cmp byte_100601C 0 +
mov esi [ebp+var_4] +
jle loc_10014D6  +
cmpxchg8b qword ptr [esi]  +
setz al  +
test al al +
jz loc_1003E25  +
mov ebx [ebp+var_C] +
mov esi ebx +
and esi 0FFFE0000h +
jnz loc_1003E3B  +
mov esi edi +
and esi 7FFFh +
jnz loc_1003E76  +
pop edi  +
pop esi  +
xor eax eax +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 10h  +
cmpxchg8b qword ptr [esi]  +
jmp loc_10014A1  +
***
mov eax esi +
neg eax  +
sbb eax eax +
and eax ecx +
mov [ebx] eax +
jmp loc_1001532  +
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+10h] +
test ebx ebx +
jz loc_10028C6  +
and dword ptr [ebp+10h] 0 +
and dword ptr [ebx] 0 +
mov eax [ebp+0Ch] +
push esi  +
push edi  +
push 4  +
pop ecx  +
mov edi offset dword_1001544 +
mov esi eax +
xor edx edx +
cmps   +
jz loc_100152D  +
push 4  +
pop ecx  +
mov edi offset dword_1001554 +
mov esi eax +
xor edx edx +
cmps   +
jnz loc_10028D0  +
mov esi [ebp+8] +
mov [ebx] esi +
mov eax [esi] +
push esi  +
call dword ptr [eax+4]  +
mov eax [ebp+10h] +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
push 4  +
pop ecx  +
mov edi offset dword_100159C +
mov esi eax +
xor edx edx +
cmps   +
mov esi [ebp+8] +
jz loc_10028EF  +
lea edi [esi+30h] +
push eax  +
mov ecx edi +
call sub_10020F5  +
test eax eax +
jnz loc_10015AC  +
mov dword ptr [ebp+10h] 80004002h +
cmp dword ptr [ebp+10h] 0 +
jl loc_1001538  +
jmp loc_1001532  +
***
push ebx  +
push esi  +
mov ecx edi +
call sub_10015BF  +
mov [ebp+10h] eax +
jmp loc_1001591  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov ecx [esi] +
test ecx ecx +
jnz loc_10015DD  +
push esi  +
push [ebp+punkOuter]  +
call ds:CoCreateFreeThreadedMarshaler  +
mov ecx [esi] +
test ecx ecx +
jz loc_10015EA  +
push [ebp+arg_4]  +
mov eax [ecx] +
push offset dword_1002114  +
push ecx  +
call dword ptr [eax]  +
pop esi  +
pop ebp  +
retn 8  +
***
mov [ecx+4] eax +
xor eax eax +
inc eax  +
jmp loc_100163A  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx+4] +
mov edx [ecx+8] +
push esi  +
cmp eax edx +
jnb loc_100162F  +
cmp [ebp+arg_4] 0 +
jz loc_100163F  +
nop   +
nop   +
nop   +
nop   +
nop   +
nop   +
nop   +
nop   +
nop   +
nop   +
nop   +
nop   +
nop   +
nop   +
mov si [eax] +
cmp si [ebp+arg_0] +
jz loc_10015EF  +
inc eax  +
inc eax  +
cmp eax edx +
jb loc_1001620  +
cmp [ebp+arg_8] 0 +
jz loc_1001638  +
mov [ecx+4] edx +
xor eax eax +
pop esi  +
pop ebp  +
retn 0Ch  +
mov si [eax] +
cmp si [ebp+arg_0] +
jnz loc_10015EF  +
inc eax  +
inc eax  +
cmp eax edx +
jb loc_100163F  +
jmp loc_100162F  +
***
xor eax eax +
pop edi  +
jmp loc_100166D  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov eax [esi+4] +
test eax eax +
jge loc_10025ED  +
pop esi  +
pop ebp  +
retn 4  +
***
call sub_1001CFB  +
push 5Ch  +
push offset dword_1001790  +
call sub_10022D4  +
xor ebx ebx +
mov [ebp-1Ch] ebx +
mov [ebp-4] ebx +
lea eax [ebp-6Ch] +
push eax  +
call ds:GetStartupInfoW  +
mov dword ptr [ebp-4] 0FFFFFFFEh +
mov dword ptr [ebp-4] 1 +
mov eax large fs:18h +
mov esi [eax+4] +
mov [ebp-20h] ebx +
mov edi offset Destination +
push ebx  +
push esi  +
push edi  +
call ds:InterlockedCompareExchange  +
cmp eax ebx +
jnz loc_1002974  +
xor esi esi +
inc esi  +
mov eax dword_1006010 +
cmp eax esi +
jz loc_1002993  +
mov eax dword_1006010 +
test eax eax +
jnz loc_10017C4  +
mov dword_1006010 esi +
push offset dword_1001788  +
push offset dword_100177C  +
call sub_1001BEF  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_1002A42  +
mov eax dword_1006010 +
cmp eax esi +
jnz loc_100172A  +
push offset dword_1001778  +
push offset dword_100176C  +
call _initterm  +
pop ecx  +
pop ecx  +
mov dword_1006010 2 +
cmp [ebp-20h] ebx +
jnz loc_1001737  +
push ebx  +
push edi  +
call ds:InterlockedExchange  +
cmp dword_100605C ebx +
jnz loc_10029A0  +
mov eax ds:_wcmdln +
cmp [eax] ebx +
jz loc_1002A42  +
mov eax [eax] +
mov [ebp-24h] eax +
movzx ecx word ptr [eax] +
cmp cx 20h +
jbe loc_10017B8  +
cmp cx 22h +
jz loc_10029DF  +
inc eax  +
inc eax  +
jmp loc_1001752  +
cmp cx bx +
jz loc_10017CF  +
cmp [ebp-1Ch] ebx +
jz loc_10017CF  +
jmp loc_100175E  +
mov dword_1006064 esi +
jmp loc_1001706  +
movzx ecx word ptr [eax] +
cmp cx bx +
jz loc_10017E4  +
cmp cx 20h +
ja loc_10017E4  +
inc eax  +
inc eax  +
mov [ebp-24h] eax +
jmp loc_10017CF  +
test byte ptr [ebp-40h] 1 +
jnz loc_10029C2  +
push 0Ah  +
pop ecx  +
push ecx  +
push eax  +
push ebx  +
push 1000000h  +
call sub_1001808  +
jmp loc_10029CB  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 6B0h +
mov eax dword_1006000 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
xor ebx ebx +
push edi  +
lea ecx [ebp+var_23C] +
mov [ebp+var_6A0] ebx +
call sub_1001F3C  +
lea ecx [ebp+var_464] +
call sub_1001F3C  +
lea ecx [ebp+var_128] +
call sub_1001F3C  +
mov esi offset dword_1001894 +
lea edi [ebp+var_14] +
movs   +
movs   +
movs   +
lea ecx [ebp+var_350] +
movs   +
call sub_1001F3C  +
lea ecx [ebp+var_578] +
mov [ebp+var_6A4] ebx +
mov [ebp+var_698] ebx +
mov [ebp+var_694] ebx +
mov [ebp+var_69C] ebx +
call sub_1001F3C  +
lea ecx [ebp+var_68C] +
call sub_1001F3C  +
jmp loc_10026E3  +
***
push esi  +
push ebx  +
call ds:HeapSetInformation  +
mov [ebp-6ACh] ebx +
mov [ebp-6A8h] ebx +
call ds:GetCommandLineW  +
cmp eax ebx +
jz loc_100200A  +
mov ecx eax +
lea edi [ecx+2] +
nop   +
nop   +
nop   +
mov dx [ecx] +
inc ecx  +
inc ecx  +
cmp dx bx +
jnz loc_10018D0  +
push esi  +
push esi  +
sub ecx edi +
push 20h  +
sar ecx 1 +
mov [ebp-698h] eax +
lea eax [eax+ecx*2] +
pop edi  +
push edi  +
lea ecx [ebp-69Ch] +
mov [ebp-694h] eax +
call sub_10015FC  +
mov eax [ebp-698h] +
cmp eax [ebp-694h] +
jnb loc_100200A  +
push esi  +
push ebx  +
push edi  +
lea ecx [ebp-69Ch] +
call sub_10015FC  +
mov eax [ebp-698h] +
push esi  +
push esi  +
push edi  +
lea ecx [ebp-69Ch] +
mov [ebp-690h] eax +
call sub_10015FC  +
mov eax [ebp-698h] +
sub eax [ebp-690h] +
lea ecx [ebp-23Ch] +
sar eax 1 +
push eax  +
push dword ptr [ebp-690h]  +
call sub_1001962  +
jmp loc_1002704  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push 0  +
call sub_100197D  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_4] 0 +
push esi  +
mov esi ecx +
jz loc_10019B6  +
mov eax [ebp+arg_8] +
lea ecx [eax+1] +
cmp ecx 4000001h +
jbe loc_10019AF  +
jmp loc_100269F  +
lea eax [ebp+arg_8] +
push eax  +
push [ebp+arg_4]  +
call sub_1001169  +
jmp loc_1002691  +
cmp eax 0FFFFFFFFh +
jz loc_100199E  +
jmp loc_10019BA  +
xor eax eax +
jmp loc_10019C7  +
push [ebp+arg_8]  +
mov ecx esi +
push [ebp+arg_4]  +
call sub_10019D1  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov eax [esi+4] +
test eax eax +
jl loc_1001A28  +
push edi  +
mov edi [ebp+arg_4] +
cmp edi 4000000h +
ja loc_1001A2D  +
mov eax [esi+8] +
add eax edi +
push eax  +
call sub_100165A  +
test eax eax +
jl loc_100267E  +
mov ecx [esi+10h] +
lea eax [edi+edi] +
push eax  +
mov eax [esi+8] +
push [ebp+arg_0]  +
lea eax [ecx+eax*2] +
push eax  +
call memcpy  +
mov eax [esi+8] +
add esp 0Ch +
add eax edi +
push eax  +
mov ecx esi +
call sub_1001A3C  +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
mov eax 8007006Fh +
mov [esi+4] eax +
jmp loc_1001A27  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov eax [esi+4] +
test eax eax +
jl loc_1001A67  +
mov eax [ebp+arg_0] +
test eax eax +
jl loc_10025B1  +
cmp eax [esi+0Ch] +
jl loc_10025A6  +
mov eax 8007006Fh +
mov [esi+4] eax +
pop esi  +
pop ebp  +
retn 4  +
***
mov eax [esi+4] +
movzx edi word ptr [eax] +
push edi  +
call ds:iswdigit  +
pop ecx  +
test eax eax +
jz loc_10011A7  +
movzx edi di +
sub edi 30h +
cmp edi [ebp+arg_4] +
jnb loc_1001AAF  +
mov eax [ebp+var_4] +
mul  [ebp+arg_4] +
lea ecx [ebp+var_4] +
push ecx  +
push edx  +
push eax  +
call sub_1003F55  +
jmp loc_1002537  +
add dword ptr [esi+4] 2 +
mov eax [esi+4] +
cmp eax [esi+8] +
jb loc_1001A6C  +
cmp ebx [esi+4] +
jz loc_1002552  +
mov eax [ebp+var_4] +
mov ecx [ebp+arg_0] +
mov [ecx] eax +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 11Ch +
mov eax dword_1006000 +
xor eax ebp +
mov [ebp+var_4] eax +
and [ebp+var_11C] 0 +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
mov esi [ebp+arg_4] +
lea ecx [ebp+var_118] +
call sub_1001F3C  +
mov ecx esi +
call sub_1001197  +
cmp ax 3Dh +
jnz loc_10026B3  +
push edi  +
push 1  +
mov ecx esi +
call sub_10011D7  +
mov edi [esi+4] +
push 1  +
push 1  +
push 3Dh  +
mov ecx esi +
call sub_10015FC  +
mov eax [esi+4] +
sub eax edi +
sar eax 1 +
push eax  +
push edi  +
lea ecx [ebp+var_118] +
call sub_1001962  +
lea ecx [ebp+var_118] +
call sub_1001E37  +
push eax  +
push ebx  +
call ds:SetEnvironmentVariableW  +
pop edi  +
test eax eax +
jz loc_10026BF  +
jmp loc_10026DC  +
***
mov [ebp+var_11C] eax +
jmp loc_10026DC  +
cmp [ebp+var_108] 0 +
jz loc_1001B7D  +
lea ecx [ebp+var_118] +
call sub_10011C1  +
mov ecx [ebp+var_4] +
mov eax [ebp+var_11C] +
xor ecx ebp +
call sub_1001B96  +
leave   +
retn 8  +
***
cmp ecx dword_1006000 +
jnz loc_1004491  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push esi  +
mov esi [ebp+8] +
lea eax [esi+8] +
push eax  +
lea ecx [ebp-8] +
call sub_10041FA  +
cmp dword ptr [esi+28h] 0 +
jnz loc_1001BE1  +
push dword ptr [esi+2Ch]  +
call ds:ResetEvent  +
jmp loc_1001BE1  +
mov ecx [ebp-8] +
push 1  +
call sub_1004098  +
xor eax eax +
pop esi  +
leave   +
retn 4  +
***
inc dword ptr [esi+28h]  +
jmp loc_1001BD0  +
***
call ecx  +
jmp loc_1001C09  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
xor eax eax +
cmp esi [ebp+arg_4] +
jnb loc_1001C0E  +
test eax eax +
jnz loc_1001C0E  +
mov ecx [esi] +
test ecx ecx +
jnz loc_1001BE6  +
add esi 4 +
jmp loc_1001BFA  +
pop esi  +
pop ebp  +
retn   +
***
push esi  +
push ebx  +
push edi  +
lea ecx [ebp-69Ch] +
call sub_10015FC  +
push 0Ah  +
lea eax [ebp-6B0h] +
push eax  +
lea ecx [ebp-69Ch] +
call sub_10024DD  +
test eax eax +
jz loc_10027B6  +
push esi  +
push ebx  +
push edi  +
lea ecx [ebp-69Ch] +
call sub_10015FC  +
xor edi edi +
lea eax [ebp-69Ch] +
push eax  +
push ds:off_1001C64[edi]  +
call sub_1001ACF  +
jmp loc_1002745  +
***
lea eax [ebp-8] +
push eax  +
push esi  +
call ds:GetRunningObjectTable  +
jmp loc_1001CA3  +
***
mov ecx eax +
call sub_1001E71  +
jmp loc_1002958  +
mov edi eax +
cmp edi esi +
jge loc_10012B8  +
jmp loc_1001CCC  +
***
mov edi eax +
cmp edi esi +
jge loc_1001C76  +
jmp loc_1001CCC  +
***
mov edi eax +
cmp edi esi +
jge loc_1001CB4  +
jmp loc_1001CCC  +
***
mov eax [ebp+var_C] +
cmp eax esi +
jnz loc_1001CE7  +
jmp loc_1001CED  +
***
mov eax [ebp-8] +
mov ecx [eax] +
lea edx [ebx+38h] +
push edx  +
push dword ptr [ebp-0Ch]  +
push ebx  +
push 1  +
push eax  +
call dword ptr [ecx+0Ch]  +
jmp loc_100296D  +
***
push [ebp+pv]  +
call ds:CoTaskMemFree  +
mov eax [ebp+var_8] +
mov [ebp+pv] esi +
cmp eax esi +
jz loc_1001CAB  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_1001CAB  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov eax dword_1006000 +
and [ebp+SystemTimeAsFileTime.dwLowDateTime] 0 +
and [ebp+SystemTimeAsFileTime.dwHighDateTime] 0 +
push ebx  +
push edi  +
mov edi 0BB40E64Eh +
mov ebx 0FFFF0000h +
cmp eax edi +
jnz loc_1002B0F  +
push esi  +
lea eax [ebp+SystemTimeAsFileTime] +
push eax  +
call ds:GetSystemTimeAsFileTime  +
mov esi [ebp+SystemTimeAsFileTime.dwHighDateTime] +
xor esi [ebp+SystemTimeAsFileTime.dwLowDateTime] +
call ds:GetCurrentProcessId  +
xor esi eax +
call ds:GetCurrentThreadId  +
xor esi eax +
call ds:GetTickCount  +
xor esi eax +
lea eax [ebp+PerformanceCount] +
push eax  +
call ds:QueryPerformanceCounter  +
mov eax dword ptr [ebp+PerformanceCount+4] +
xor eax dword ptr [ebp+PerformanceCount] +
xor esi eax +
cmp esi edi +
jnz loc_1002B23  +
jmp loc_1002B2B  +
***
pop edi  +
pop ebx  +
leave   +
retn   +
***
push 0FFFFFFFFh  +
lea ecx [ebp-23Ch] +
call sub_1001E37  +
push eax  +
lea ecx [ebp-128h] +
call sub_1001962  +
push 0FFFFFFFFh  +
push offset aStart  +
push ebx  +
lea ecx [ebp-128h] +
call sub_100197D  +
lea ecx [ebp-128h] +
call sub_1001E37  +
push eax  +
push ebx  +
push esi  +
push ebx  +
call ds:CreateEventW  +
mov edi ds:GetLastError +
mov [ebp-6A4h] eax +
cmp eax ebx +
jz loc_1002777  +
push 0FFFFFFFFh  +
lea ecx [ebp-23Ch] +
call sub_1001E37  +
push eax  +
lea ecx [ebp-350h] +
call sub_1001962  +
push 0FFFFFFFFh  +
push offset aTermevent  +
push ebx  +
lea ecx [ebp-350h] +
call sub_100197D  +
push dword ptr [ebp-690h]  +
mov esi 100000h +
push ebx  +
push esi  +
call ds:OpenProcess  +
jmp loc_1002794  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_1001E57  +
test eax eax +
mov eax offset dword_1001E50 +
jnz loc_1001E4D  +
mov eax [esi+10h] +
pop esi  +
retn   +
***
cmp dword ptr [ecx+4] 0 +
jl loc_10026AC  +
mov ecx [ecx+8] +
xor eax eax +
test ecx ecx +
setz al  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
push edi  +
xor edi edi +
lea ecx [esi+8] +
mov dword ptr [esi] offset off_1001EAC +
mov [esi+4] edi +
call sub_100403E  +
push edi  +
push 1  +
push 1  +
push edi  +
mov [esi+28h] edi +
mov [esi+2Ch] edi +
call ds:CreateEventW  +
mov [esi+2Ch] eax +
cmp eax edi +
jz loc_1002921  +
pop edi  +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
add eax 4 +
push eax  +
call ds:InterlockedIncrement  +
pop ebp  +
retn 4  +
***
sub dword ptr [esp+4] 4 +
jmp loc_10014EC  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
add eax 0Ch +
push eax  +
call ds:InterlockedIncrement  +
pop ebp  +
retn 4  +
***
xor eax eax +
push esi  +
mov esi ecx +
and dword ptr [esi] 0FFFFFFF8h +
mov [esi+4] eax +
mov [esi+10h] eax +
mov [esi+0Ch] eax +
mov [esi+8] eax +
call sub_1001F5E  +
mov eax esi +
pop esi  +
retn   +
***
mov eax [ecx] +
and dword ptr [ecx+4] 0 +
and dword ptr [ecx+8] 0 +
and eax 0FFFFFFF9h +
or eax 1 +
mov [ecx] eax +
lea eax [ecx+14h] +
mov [ecx+10h] eax +
mov dword ptr [ecx+0Ch] 80h +
retn   +
***
push ebx  +
push 3  +
push 4  +
push ebx  +
push ebx  +
push 0FFFFFFFFh  +
push ebx  +
call ds:CoInitializeSecurity  +
jmp loc_1002759  +
***
cmp [ebp-67Ch] ebx +
jnz loc_1002833  +
jmp loc_100283E  +
***
push esi  +
push dword ptr [ebp-6B0h]  +
call MFStartup  +
jmp loc_1002763  +
***
lea eax [ebp-6A0h] +
push eax  +
call sub_100204D  +
jmp loc_100276D  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push 0  +
push 0  +
push 0  +
push 40h  +
call MFHeapAlloc  +
test eax eax +
jz loc_1002085  +
mov ecx eax +
call sub_100208E  +
mov ecx [ebp+arg_0] +
mov [ecx] eax +
test eax eax +
jz loc_1002917  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
xor eax eax +
pop ebp  +
retn 4  +
xor eax eax +
jmp loc_100206C  +
***
mov edi edi +
push esi  +
mov esi ecx +
and dword ptr [esi+0Ch] 0 +
lea ecx [esi+10h] +
mov dword ptr [esi] offset off_1001F04 +
mov dword ptr [esi+4] offset off_1001EDC +
mov dword ptr [esi+8] offset off_10020E0 +
call sub_100403E  +
mov eax dword_1006030 +
and dword ptr [esi+30h] 0 +
and dword ptr [esi+34h] 0 +
and dword ptr [esi+38h] 0 +
mov ecx eax +
and ecx 3 +
inc eax  +
and eax 3 +
mov dword_1006030 eax +
mov dword_1006020[ecx*4] esi +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
push 4  +
pop ecx  +
xor eax eax +
mov edi offset dword_1002114 +
cmps   +
pop edi  +
setz al  +
pop esi  +
pop ebp  +
retn 4  +
***
push dword ptr [ebp+10h]  +
mov eax [ebp+8] +
push dword ptr [ebp+0Ch]  +
push dword ptr [eax+2Ch]  +
call MFCreatePMPHost  +
pop ebp  +
retn 0Ch  +
***
push esi  +
push esi  +
push esi  +
push esi  +
push 30h  +
call MFHeapAlloc  +
jmp loc_100294E  +
***
cmp dword_1006018 0 +
jz loc_1002A7A  +
call sub_100220E  +
xor eax eax +
retn   +
***
call ds:_controlfp  +
pop ecx  +
pop ecx  +
retn   +
***
push ebp  +
mov ebp esp +
push 0  +
call ds:GetModuleHandleA  +
test eax eax +
jz loc_1002254  +
push eax  +
call sub_100225E  +
test eax eax +
jz loc_1002254  +
movzx eax word ptr [eax+5Ch] +
cmp ax 2 +
jnz loc_1002B00  +
push 2  +
pop eax  +
pop ebp  +
retn   +
***
mov eax [ebp+8] +
pop ebp  +
retn   +
***
call sub_10022D4  +
xor eax eax +
mov ecx [ebp+8] +
test ecx ecx +
jz loc_10022AD  +
cmp ecx 0FFFFFFFFh +
jz loc_10022AD  +
and [ebp-4] eax +
mov edx 5A4Dh +
cmp [ecx] dx +
jnz loc_10022A6  +
mov edx [ecx+3Ch] +
test edx edx +
jl loc_10022A6  +
cmp edx 10000000h +
jnb loc_10022A6  +
lea eax [edx+ecx] +
mov [ebp-1Ch] eax +
cmp dword ptr [eax] 4550h +
jnz loc_1002AF6  +
mov dword ptr [ebp-4] 0FFFFFFFEh +
call sub_1002384  +
retn 4  +
***
mov eax [esp+8+arg_4] +
mov [esp+8+arg_4] ebp +
lea ebp [esp+8+arg_4] +
sub esp eax +
push ebx  +
push esi  +
push edi  +
mov eax dword_1006000 +
xor [ebp-4] eax +
xor eax ebp +
push eax  +
mov [ebp-18h] esp +
push dword ptr [ebp-8]  +
mov eax [ebp-4] +
mov dword ptr [ebp-4] 0FFFFFFFEh +
mov [ebp-8] eax +
lea eax [ebp-10h] +
mov large fs:0 eax +
retn   +
***
push ebp  +
mov ebp esp +
push dword ptr [ebp+8]  +
call sub_100233A  +
neg eax  +
sbb eax eax +
neg eax  +
pop ecx  +
dec eax  +
pop ebp  +
retn   +
***
call sub_10022D4  +
mov eax dword_100600C +
mov [ebp-1Ch] eax +
cmp eax 0FFFFFFFFh +
jnz loc_1002A8B  +
push dword ptr [ebp+8]  +
call ds:_onexit  +
pop ecx  +
call sub_1002384  +
retn   +
***
mov ecx [ebp-10h] +
mov large fs:0 ecx +
pop ecx  +
pop edi  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
push ecx  +
retn   +
***
mov eax [esp+arg_0] +
xor ecx ecx +
cmp eax ecx +
jz loc_10023EB  +
mov eax [eax+8] +
cmp eax 4C66506Ch +
jnz loc_10023EB  +
mov eax [esp+arg_4] +
cmp eax ecx +
jz loc_10023EB  +
test al 7 +
jnz loc_10023EB  +
mov [eax] ecx +
mov [eax+4] ecx +
or dword ptr [eax+4] 10000h +
mov [eax+8] ecx +
mov [eax+0Ch] ecx +
mov cl byte_100601C +
cmp cl 2 +
jz loc_1002B68  +
call sub_10023F5  +
mov eax 1 +
retn 8  +
xor eax eax +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 8 +
lea eax [ebp+var_4] +
mov [ebp+var_8] eax +
mov eax 1 +
mov edx [ebp+var_8] +
cmp byte_100601C ah +
jle loc_100241C  +
xadd [edx] eax +
inc eax  +
mov esp ebp +
pop ebp  +
retn   +
xadd [edx] eax +
jmp loc_1002417  +
***
mov eax [esp+bAlertable] +
mov ecx [esp+arg_10] +
mov edx [esp+arg_C] +
push eax  +
mov eax [esp+4+arg_8] +
push ecx  +
mov ecx [esp+8+arg_4] +
push edx  +
mov edx [esp+0Ch+arg_0] +
push 0  +
push 0  +
push eax  +
push ecx  +
push edx  +
call sub_1002455  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 24h +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
xor edi edi +
cmp esi edi +
jz loc_10039A0  +
mov eax [esi+8] +
cmp eax 4C66506Ch +
jnz loc_10039A0  +
mov ebx [ebp+arg_4] +
mov [ebp+var_8] ebx +
cmp ebx edi +
jz loc_10039A0  +
test bl 3 +
jnz loc_10039A0  +
mov cl byte_100601C +
cmp cl 2 +
jz loc_1002B72  +
mov ecx [ebp+arg_8] +
mov [ebp+var_4] edi +
test ecx 0FFFFFFF7h +
jz loc_1002B7C  +
lea eax [ecx-1] +
test eax 0FFFFFFF7h +
jnz loc_1003605  +
cmp [esi+0Ch] edi +
mov [ebp+var_C] edi +
jl loc_1003121  +
call ds:GetCurrentThreadId  +
jmp loc_10030A6  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
xor eax eax +
push esi  +
mov esi ecx +
mov ebx [esi+4] +
mov [ebp+var_4] eax +
mov [esi] eax +
cmp [ebp+arg_0] eax +
jz loc_1002510  +
jmp loc_100251D  +
push edi  +
cmp ebx [esi+8] +
jb loc_1001A6C  +
jmp loc_1001AAF  +
mov dword ptr [ecx] 80004005h +
xor eax eax +
retn   +
mov dword ptr [esi] 80070057h +
xor eax eax +
jmp loc_1001AC4  +
cmp [ebp+arg_4] eax +
ja loc_10024F8  +
jmp loc_1002510  +
***
push edi  +
call ds:towupper  +
movzx edi ax +
pop ecx  +
sub edi 37h +
jmp loc_1001A88  +
test eax eax +
jl loc_100255F  +
lea eax [ebp+var_4] +
push eax  +
push edi  +
push [ebp+var_4]  +
call sub_1003F87  +
test eax eax +
jge loc_1001AA3  +
jmp loc_100255F  +
mov dword ptr [esi] 80004005h +
xor eax eax +
jmp loc_1001AC3  +
mov dword ptr [esi] 80070216h +
mov [esi+4] ebx +
jmp loc_1002558  +
***
shr eax 1 +
and eax 3 +
jnz loc_1002584  +
push dword ptr [esi+10h]  +
push eax  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
jmp loc_1002592  +
cmp eax 1 +
jnz loc_1002592  +
push dword ptr [esi+10h]  +
call ds:CoTaskMemFree  +
and dword ptr [esi] 0FFFFFFF9h +
and dword ptr [esi+10h] 0 +
and dword ptr [esi+0Ch] 0 +
and dword ptr [esi+8] 0 +
jmp loc_10011D0  +
***
mov ecx [esi+10h] +
xor edx edx +
mov [ecx+eax*2] dx +
jmp loc_10025DF  +
mov eax [esi+0Ch] +
test eax eax +
jle loc_10025E9  +
mov ecx [esi+10h] +
xor edx edx +
mov [ecx+eax*2-2] dx +
lea eax [ebp+arg_0] +
push eax  +
push dword ptr [esi+10h]  +
call sub_1001169  +
push eax  +
call sub_1003F29  +
test eax eax +
jl loc_1001A5F  +
mov eax [ebp+arg_0] +
mov [esi+8] eax +
xor eax eax +
jmp loc_1001A67  +
xor eax eax +
jmp loc_10025DF  +
***
push edi  +
mov edi [ebp+arg_0] +
inc edi  +
lea eax [edi-1] +
cmp eax 3FFFFFFh +
ja loc_1002671  +
cmp edi [esi+0Ch] +
jle loc_1001650  +
mov eax [esi] +
and al 6 +
cmp al 4 +
jnz loc_1002614  +
mov eax 8007007Ah +
jmp loc_1002676  +
lea eax [edi+edi] +
push eax  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov [ebp+arg_0] eax +
test eax eax +
jnz loc_1002638  +
and [esi+8] eax +
mov eax 8007000Eh +
jmp loc_1002676  +
mov eax [esi+10h] +
test eax eax +
jz loc_1002663  +
mov ecx [esi+8] +
push ebx  +
add ecx ecx +
push ecx  +
push eax  +
push [ebp+arg_0]  +
call memcpy  +
mov ebx [esi+8] +
add esp 0Ch +
mov ecx esi +
call sub_10011C1  +
and dword ptr [esi] 0FFFFFFFEh +
mov [esi+8] ebx +
pop ebx  +
mov eax [ebp+arg_0] +
mov [esi+10h] eax +
mov [esi+0Ch] edi +
jmp loc_1001650  +
mov eax 8007006Fh +
mov [esi+4] eax +
jmp loc_1001652  +
***
mov eax [esi+4] +
jmp loc_1001A27  +
***
lea eax [eax+esi*2] +
mov [ecx+4] eax +
jmp loc_10011F8  +
***
push eax  +
call sub_1003F29  +
test eax eax +
jge loc_10019BA  +
mov eax 8007006Fh +
mov [esi+4] eax +
jmp loc_10019C7  +
***
xor ecx ecx +
jmp loc_1001E64  +
***
mov [ebp+var_11C] 80070057h +
jmp loc_10026DC  +
call ds:GetLastError  +
test eax eax +
jle loc_1001B5E  +
and eax 0FFFFh +
or eax 80070000h +
jmp loc_1001B5E  +
pop esi  +
pop ebx  +
jmp loc_1001B69  +
***
mov [ebp+var_6B0] 20070h +
call ds:GetErrorMode  +
xor esi esi +
inc esi  +
or eax esi +
push eax  +
call ds:SetErrorMode  +
jmp sub_10018A4  +
***
test eax eax +
jge loc_1001F82  +
jmp loc_10027B6  +
test eax eax +
jl loc_10027B6  +
push esi  +
push ebx  +
push edi  +
lea ecx [ebp-69Ch] +
call sub_10015FC  +
push 0Ah  +
lea eax [ebp-690h] +
push eax  +
lea ecx [ebp-69Ch] +
call sub_10024DD  +
test eax eax +
jnz loc_1001C11  +
jmp loc_10027B6  +
test eax eax +
jge loc_10011FE  +
jmp loc_10027B6  +
test eax eax +
jge sub_1001FF3  +
jmp loc_10027B6  +
***
test eax eax +
jge loc_100201B  +
jmp loc_10027B6  +
test eax eax +
jge loc_1002037  +
jmp loc_10027B6  +
test eax eax +
jge loc_1001D70  +
jmp loc_10027B6  +
call edi  +
cmp eax ebx +
jle loc_1002787  +
and eax 0FFFFh +
or eax 80070000h +
cmp eax 800700B7h +
jz loc_1001DC5  +
jmp loc_10027B6  +
mov [ebp-6ACh] eax +
cmp eax ebx +
jnz loc_1001218  +
call edi  +
jmp loc_10027B6  +
mov [ebp-6A8h] eax +
cmp eax ebx +
jnz loc_1001231  +
jmp loc_10027A2  +
***
mov ecx [ebp-6A0h] +
cmp ecx ebx +
jz loc_10027C5  +
call sub_100419E  +
call ds:CoFreeUnusedLibraries  +
call ds:CoUninitialize  +
mov eax [ebp-6A0h] +
cmp eax ebx +
jz loc_10027E7  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp-6A0h] ebx +
mov esi ds:CloseHandle +
cmp [ebp-6A4h] ebx +
jz loc_10027FD  +
push dword ptr [ebp-6A4h]  +
call esi  +
cmp [ebp-6ACh] ebx +
jz loc_1002813  +
push dword ptr [ebp-6ACh]  +
call esi  +
mov [ebp-6ACh] ebx +
cmp [ebp-6A8h] ebx +
jz loc_1002829  +
push dword ptr [ebp-6A8h]  +
call esi  +
mov [ebp-6A8h] ebx +
call MFShutdown  +
jmp loc_100200A  +
lea ecx [ebp-68Ch] +
call sub_10011C1  +
cmp [ebp-568h] ebx +
jz loc_1002851  +
lea ecx [ebp-578h] +
call sub_10011C1  +
cmp [ebp-340h] ebx +
jz loc_1002864  +
lea ecx [ebp-350h] +
call sub_10011C1  +
cmp [ebp-118h] ebx +
jz loc_1002877  +
lea ecx [ebp-128h] +
call sub_10011C1  +
cmp [ebp-454h] ebx +
jz loc_100288A  +
lea ecx [ebp-464h] +
call sub_10011C1  +
cmp [ebp-22Ch] ebx +
pop edi  +
pop esi  +
pop ebx  +
jz loc_10028A0  +
lea ecx [ebp-23Ch] +
call sub_10011C1  +
mov ecx [ebp-4] +
xor ecx ebp +
xor eax eax +
call sub_1001B96  +
leave   +
retn 10h  +
***
test esi esi +
jz loc_1001298  +
mov eax [esi] +
push 1  +
mov ecx esi +
call dword ptr [eax+14h]  +
jmp loc_1001298  +
***
mov eax 80070057h +
jmp loc_100153D  +
***
push 4  +
pop ecx  +
mov edi offset loc_10028F8 +
mov esi eax +
xor edx edx +
cmps   +
jnz loc_1001564  +
mov esi [ebp+8] +
lea ecx [esi+4] +
jmp loc_10014DB  +
***
lea ecx [esi+8] +
jmp loc_10014DB  +
***
scas   +
and ecx [esi-67h] +
retn 3C1Ch  +
***
dec ecx  +
mov ecx 0CBF146FAh +
add al 0Fh +
movs   +
nop   +
nop   +
nop   +
nop   +
nop   +
mov edi edi +
push ebp  +
mov ebp esp +
jmp loc_1002124  +
***
mov eax 8007000Eh +
jmp loc_1002081  +
***
call ds:GetLastError  +
jmp loc_1001EA7  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push ebx  +
push esi  +
xor esi esi +
push edi  +
mov ebx ecx +
mov [ebp+pv] esi +
mov [ebp+var_C] esi +
mov [ebp+var_8] esi +
jmp loc_1002144  +
***
cmp eax esi +
jnz loc_1001C83  +
xor eax eax +
mov [ebx+34h] eax +
cmp eax esi +
jnz loc_10012A0  +
mov edi 8007000Eh +
jmp loc_1001CCC  +
***
mov edi eax +
jmp loc_1001CCC  +
***
mov eax [ebp-14h] +
mov esp [ebp-18h] +
mov eax [ebp-28h] +
mov dword_1006060 eax +
xor ebx ebx +
cmp dword_1006040 ebx +
jnz loc_1002A1F  +
push eax  +
call ds:_exit  +
***
mov dword ptr [ebp-4] 0FFFFFFFEh +
mov eax 0FFh +
call sub_1002384  +
retn   +
***
push (offset dword_1001358+5)  +
call ds:__setusermatherr  +
pop ecx  +
jmp loc_10021FD  +
***
push 8  +
call _lock  +
pop ecx  +
and dword ptr [ebp-4] 0 +
mov eax dword_100600C +
mov [ebp-1Ch] eax +
mov eax dword_1006008 +
mov [ebp-20h] eax +
lea eax [ebp-20h] +
push eax  +
lea eax [ebp-1Ch] +
push eax  +
push dword ptr [ebp+8]  +
call __dllonexit  +
add esp 0Ch +
mov [ebp-24h] eax +
mov eax [ebp-1Ch] +
mov dword_100600C eax +
mov eax [ebp-20h] +
mov dword_1006008 eax +
mov dword ptr [ebp-4] 0FFFFFFFEh +
call sub_1002AE6  +
mov eax [ebp-24h] +
jmp loc_1002361  +
***
pop ecx  +
xor eax eax +
mov [ebp-1Ch] eax +
jmp loc_10022A6  +
***
cmp ax 3 +
jnz loc_1002254  +
xor eax eax +
inc eax  +
pop ebp  +
retn   +
***
test eax ebx +
jz loc_1001D24  +
not eax  +
mov dword_1006004 eax +
jmp loc_1001D6C  +
test dword_1006000 ebx +
jnz loc_1002B30  +
mov esi 0BB40E64Fh +
mov dword_1006000 esi +
not esi  +
mov dword_1006004 esi +
pop esi  +
jmp loc_1001D6C  +
***
mov eax [esp+14h] +
lea edx [eax-1] +
test edx eax +
jnz loc_100139C  +
lea eax [esp] +
push eax  +
mov byte_100601C 0FFh +
call ds:InterlockedIncrement  +
add esp 28h +
retn   +
***
call sub_10045A9  +
jmp loc_10023DE  +
***
call sub_10045A9  +
jmp loc_10024A1  +
cmp [esi+0Ch] edi +
jl loc_1002C11  +
call ds:GetCurrentThreadId  +
mov edx [ebx+8] +
cmp edx eax +
jnz loc_1002C11  +
cmp [esi+0Ch] edi +
jnz loc_1002BA5  +
pop edi  +
pop esi  +
mov eax 0E0000004h +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 20h  +
mov edi [ebp+arg_14] +
jmp loc_1002BAD  +
mov ebx [ebp+arg_4] +
mov eax [ebx] +
mov ebx [ebx+4] +
mov [ebp+var_18] ebx +
mov [ebp+var_24] eax +
mov [ebp+var_20] ebx +
test edi edi +
jnz loc_1002BC7  +
and ebx 0FFFF7FFFh +
jmp loc_1002BD4  +
test eax 7FFFh +
jnz loc_1002BD7  +
or ebx 8000h +
mov [ebp+var_18] ebx +
inc eax  +
mov [ebp+var_1C] eax +
mov eax [ebp+var_24] +
mov edx [ebp+var_20] +
mov ebx [ebp+var_1C] +
mov ecx [ebp+var_18] +
cmp byte_100601C 0 +
mov esi [ebp+var_8] +
jle loc_1002BF9  +
cmpxchg8b qword ptr [esi]  +
jmp loc_1002BFC  +
cmpxchg8b qword ptr [esi]  +
setz al  +
test al al +
jz loc_1002BAA  +
pop edi  +
pop esi  +
xor eax eax +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 20h  +
mov ebx [ebp+arg_4] +
mov eax [ebx] +
mov edi [ebx+4] +
mov [ebp+var_1C] eax +
mov [ebp+var_18] edi +
mov [ebp+var_24] eax +
mov [ebp+var_20] edi +
test eax 0FFFF0000h +
jnz loc_1002CB2  +
cmp [ebp+arg_14] 0 +
jnz loc_1002C3B  +
and edi 0FFFF7FFFh +
jmp loc_1002C48  +
test eax 7FFFh +
jnz loc_1002C4B  +
or edi 8000h +
mov [ebp+var_18] edi +
inc eax  +
mov [ebp+var_1C] eax +
mov eax [ebp+var_24] +
mov edx [ebp+var_20] +
mov ebx [ebp+var_1C] +
mov ecx [ebp+var_18] +
cmp byte_100601C 0 +
mov esi [ebp+var_8] +
jle loc_1002C6D  +
cmpxchg8b qword ptr [esi]  +
jmp loc_1002C70  +
cmpxchg8b qword ptr [esi]  +
setz al  +
test al al +
jz loc_1002C0E  +
cmp [ebp+var_4] 0 +
jz loc_1002CA7  +
mov edx [ebp+arg_0] +
mov [ebp+arg_0] edx +
mov esi [ebp+arg_0] +
mov ebx [ebp+var_4] +
cmp byte_100601C 0 +
mov eax [esi] +
jl loc_1002C9F  +
mov [ebx+0Ch] eax +
cmpxchg [esi] ebx +
jnz loc_1002C94  +
jmp loc_1002CA7  +
mov [ebx+0Ch] eax +
cmpxchg [esi] ebx +
jnz loc_1002C9F  +
pop edi  +
pop esi  +
xor eax eax +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 20h  +
test byte ptr [ebp+arg_8] 8 +
jnz loc_1003068  +
mov al byte_100601C +
test al al +
jle loc_1002CD6  +
mov ecx edi +
and ecx 8000h +
or ecx [ebp+arg_18] +
jz loc_1003068  +
test edi 0FFFE0000h +
jnz loc_1002D4C  +
mov eax [ebp+var_4] +
test eax eax +
jnz loc_1002D44  +
mov edx [ebp+arg_0] +
mov [ebp+var_C] edx +
mov esi [ebp+var_C] +
mov edx [esi+4] +
cmp byte_100601C 0 +
mov eax [esi] +
jl loc_1002D0E  +
test eax eax +
lea ecx [edx+1] +
jz loc_1002D1D  +
mov ebx [eax+0Ch] +
cmpxchg8b qword ptr [esi]  +
jnz loc_1002CFC  +
jmp loc_1002D1D  +
test eax eax +
lea ecx [edx+1] +
jz loc_1002D1D  +
mov ebx [eax+0Ch] +
cmpxchg8b qword ptr [esi]  +
jnz loc_1002D0E  +
mov [ebp+var_4] eax +
mov eax [ebp+var_4] +
test eax eax +
jnz loc_1002D44  +
mov eax [ebp+arg_0] +
push eax  +
call sub_1004AD2  +
mov [ebp+var_4] eax +
test eax eax +
jnz loc_1002D44  +
push 1  +
call ds:Sleep  +
jmp loc_1002C0E  +
mov ecx [eax+8] +
shl ecx 11h +
add edi ecx +
inc edi  +
mov [ebp+var_18] edi +
mov eax [ebp+var_24] +
mov edx [ebp+var_20] +
mov ebx [ebp+var_1C] +
mov ecx [ebp+var_18] +
cmp byte_100601C 0 +
mov esi [ebp+var_8] +
jle loc_1002D6E  +
cmpxchg8b qword ptr [esi]  +
jmp loc_1002D71  +
cmpxchg8b qword ptr [esi]  +
setz al  +
test al al +
jz loc_1002C0E  +
mov eax [ebp+var_4] +
test eax eax +
jnz loc_1002D93  +
mov ecx [ebp+arg_0] +
mov edx [ecx+10h] +
mov eax edi +
shr eax 11h +
mov eax [edx+eax*4] +
jmp loc_1002DCD  +
mov ecx edi +
shr ecx 11h +
cmp [eax+8] ecx +
jz loc_1002DD0  +
mov edx [ebp+arg_0] +
mov [ebp+arg_8] edx +
mov esi [ebp+arg_8] +
mov ebx [ebp+var_4] +
cmp byte_100601C 0 +
mov eax [esi] +
jl loc_1002DBF  +
mov [ebx+0Ch] eax +
cmpxchg [esi] ebx +
jnz loc_1002DB4  +
jmp loc_1002DC7  +
mov [ebx+0Ch] eax +
cmpxchg [esi] ebx +
jnz loc_1002DBF  +
mov edx [edx+10h] +
mov eax [edx+ecx*4] +
mov [ebp+var_4] eax +
mov cl byte_100601C +
test cl cl +
jle loc_1002EC0  +
test edi 8000h +
jz loc_1002EC0  +
mov [ebp+arg_8] 3E8h +
pause   +
mov esi [ebp+arg_4] +
mov eax [esi] +
mov edi [esi+4] +
mov [ebp+var_24] eax +
mov [ebp+var_20] edi +
test eax 0FFFF0000h +
jnz loc_1002E70  +
cmp [ebp+arg_14] 0 +
jnz loc_1002E16  +
and edi 0FFFF7FFFh +
jmp loc_1002E23  +
test eax 7FFFh +
jnz loc_1002E23  +
or edi 8000h +
dec edi  +
inc eax  +
mov [ebp+var_1C] eax +
mov edx edi +
and eax 0FFFE0000h +
and edx 7FFFh +
or eax edx +
mov [ebp+var_18] edi +
jnz loc_1002E45  +
and edi 1FFFFh +
mov [ebp+var_18] edi +
mov eax [ebp+var_24] +
mov edx [ebp+var_20] +
mov ebx [ebp+var_1C] +
mov ecx [ebp+var_18] +
cmp byte_100601C 0 +
mov esi [ebp+var_8] +
jle loc_1002E63  +
cmpxchg8b qword ptr [esi]  +
jmp loc_1002E66  +
cmpxchg8b qword ptr [esi]  +
setz al  +
test al al +
jnz loc_1002E83  +
mov esi [ebp+arg_4] +
sub [ebp+arg_8] 1 +
jz loc_1002EC3  +
test edi 8000h +
jz loc_1002EC3  +
jmp loc_1002DF1  +
test edi 0FFFE0000h +
jnz loc_1002EB5  +
mov eax [ebp+arg_0] +
mov [ebp+arg_0] eax +
mov esi [ebp+arg_0] +
mov ebx [ebp+var_4] +
cmp byte_100601C 0 +
mov eax [esi] +
jl loc_1002EAD  +
mov [ebx+0Ch] eax +
cmpxchg [esi] ebx +
jnz loc_1002EA2  +
jmp loc_1002EB5  +
mov [ebx+0Ch] eax +
cmpxchg [esi] ebx +
jnz loc_1002EAD  +
pop edi  +
pop esi  +
xor eax eax +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 20h  +
mov esi [ebp+arg_4] +
mov ebx [ebp+bAlertable] +
mov edi edi +
mov eax [ebp+arg_10] +
test eax eax +
jnz loc_1002EE1  +
mov ecx [ebp+var_4] +
mov edx [ecx] +
mov eax [ebp+arg_18] +
push edx  +
mov ecx ebx +
call sub_100460B  +
jmp loc_1002EF2  +
mov ecx [ebp+arg_18] +
mov edx [ebp+var_4] +
push ebx  +
push ecx  +
mov ecx [edx] +
mov edx [ebp+arg_C] +
push ecx  +
push edx  +
call eax  +
mov [ebp+arg_8] eax +
test eax eax +
jnz loc_1002F99  +
mov eax [esi] +
mov edi [esi+4] +
mov [ebp+var_24] eax +
mov [ebp+var_20] edi +
test eax 0FFFF0000h +
jnz loc_1002EC8  +
cmp [ebp+arg_14] 0 +
jnz loc_1002F1D  +
and edi 0FFFF7FFFh +
jmp loc_1002F2A  +
test eax 7FFFh +
jnz loc_1002F2A  +
or edi 8000h +
dec edi  +
inc eax  +
mov [ebp+var_1C] eax +
mov ecx edi +
and eax 0FFFE0000h +
and ecx 7FFFh +
or eax ecx +
mov [ebp+var_18] edi +
jnz loc_1002F4C  +
and edi 1FFFFh +
mov [ebp+var_18] edi +
mov eax [ebp+var_24] +
mov edx [ebp+var_20] +
mov ebx [ebp+var_1C] +
mov ecx [ebp+var_18] +
cmp byte_100601C 0 +
mov esi [ebp+var_8] +
jle loc_1002F6A  +
cmpxchg8b qword ptr [esi]  +
jmp loc_1002F6D  +
cmpxchg8b qword ptr [esi]  +
setz al  +
test al al +
jnz loc_100302B  +
mov ecx [ebp+arg_4] +
mov eax [ecx] +
mov edi [ecx+4] +
mov [ebp+var_24] eax +
mov [ebp+var_20] edi +
test eax 0FFFF0000h +
jnz loc_1002EC0  +
jmp loc_1002F0F  +
mov esi [ebp+arg_4] +
mov eax [esi] +
mov edi [esi+4] +
mov [ebp+var_20] edi +
dec edi  +
mov [ebp+var_1C] eax +
mov [ebp+var_24] eax +
mov edx edi +
and eax 0FFFE0000h +
and edx 7FFFh +
or eax edx +
mov [ebp+var_18] edi +
jnz loc_1002FC5  +
and edi 1FFFFh +
mov [ebp+var_18] edi +
mov eax [ebp+var_24] +
mov edx [ebp+var_20] +
mov ebx [ebp+var_1C] +
mov ecx [ebp+var_18] +
cmp byte_100601C 0 +
mov esi [ebp+var_8] +
jle loc_1002FE3  +
cmpxchg8b qword ptr [esi]  +
jmp loc_1002FE6  +
cmpxchg8b qword ptr [esi]  +
setz al  +
test al al +
jz loc_1002F96  +
test edi 0FFFE0000h +
jnz loc_100301F  +
mov eax [ebp+arg_0] +
mov [ebp+arg_0] eax +
mov esi [ebp+arg_0] +
mov ebx [ebp+var_4] +
cmp byte_100601C 0 +
mov eax [esi] +
jl loc_1003017  +
mov [ebx+0Ch] eax +
cmpxchg [esi] ebx +
jnz loc_100300C  +
jmp loc_100301F  +
mov [ebx+0Ch] eax +
cmpxchg [esi] ebx +
jnz loc_1003017  +
mov eax [ebp+arg_8] +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 20h  +
test edi 0FFFE0000h +
jnz loc_100305D  +
mov ecx [ebp+arg_0] +
mov [ebp+arg_0] ecx +
mov esi [ebp+arg_0] +
mov ebx [ebp+var_4] +
cmp byte_100601C 0 +
mov eax [esi] +
jl loc_1003055  +
mov [ebx+0Ch] eax +
cmpxchg [esi] ebx +
jnz loc_100304A  +
jmp loc_100305D  +
mov [ebx+0Ch] eax +
cmpxchg [esi] ebx +
jnz loc_1003055  +
pop edi  +
pop esi  +
xor eax eax +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 20h  +
cmp [ebp+var_4] 0 +
jz loc_1003098  +
mov edx [ebp+arg_0] +
mov [ebp+arg_0] edx +
mov esi [ebp+arg_0] +
mov ebx [ebp+var_4] +
cmp byte_100601C 0 +
mov eax [esi] +
jl loc_1003090  +
mov [ebx+0Ch] eax +
cmpxchg [esi] ebx +
jnz loc_1003085  +
jmp loc_1003098  +
mov [ebx+0Ch] eax +
cmpxchg [esi] ebx +
jnz loc_1003090  +
pop edi  +
pop esi  +
mov eax 102h +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 20h  +
mov ecx [ebx+8] +
mov [ebp+var_C] eax +
cmp ecx eax +
jnz loc_1003121  +
cmp [esi+0Ch] edi +
jz loc_1002B97  +
inc dword ptr [ebx+0Ch]  +
cmp [ebp+arg_14] edi +
jnz loc_1003113  +
mov edx [ebx+4] +
test edx 8000h +
jnz loc_10030D1  +
jmp loc_1003113  +
mov ebx [ebp+arg_4] +
mov eax [ebx] +
mov ebx [ebx+4] +
mov [ebp+var_20] ebx +
mov [ebp+var_18] ebx +
and ebx 0FFFF7FFFh +
mov [ebp+var_1C] eax +
mov [ebp+var_24] eax +
mov [ebp+var_20] ebx +
mov eax [ebp+var_24] +
mov edx [ebp+var_20] +
mov ebx [ebp+var_1C] +
mov ecx [ebp+var_18] +
cmp byte_100601C 0 +
mov esi [ebp+var_8] +
jle loc_1003109  +
cmpxchg8b qword ptr [esi]  +
jmp loc_100310C  +
cmpxchg8b qword ptr [esi]  +
setz al  +
test al al +
jz loc_10030CE  +
pop edi  +
pop esi  +
xor eax eax +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 20h  +
mov ebx [ebp+arg_4] +
mov eax [ebx] +
mov edi [ebx+4] +
mov [ebp+var_1C] eax +
mov [ebp+var_18] edi +
mov [ebp+var_24] eax +
mov [ebp+var_20] edi +
test eax eax +
jnz loc_10031B0  +
and edi 0FFFF7FFFh +
mov [ebp+var_1C] 10000h +
mov [ebp+var_18] edi +
cmp [ebp+arg_14] eax +
jz loc_1003154  +
or edi 8000h +
mov [ebp+var_18] edi +
mov eax [ebp+var_24] +
mov edx [ebp+var_20] +
mov ebx [ebp+var_1C] +
mov ecx [ebp+var_18] +
cmp byte_100601C 0 +
mov esi [ebp+var_8] +
jle loc_1003175  +
cmpxchg8b qword ptr [esi]  +
jmp loc_10013B0  +
cmpxchg8b qword ptr [esi]  +
jmp loc_10013B0  +
mov edx [ebp+arg_0] +
mov [ebp+arg_14] edx +
mov esi [ebp+arg_14] +
mov ebx [ebp+var_4] +
cmp byte_100601C 0 +
mov eax [esi] +
jl loc_10031A2  +
mov [ebx+0Ch] eax +
cmpxchg [esi] ebx +
jnz loc_1003194  +
jmp loc_10013C5  +
mov [ebx+0Ch] eax +
cmpxchg [esi] ebx +
jz loc_10013C5  +
jmp loc_10031A2  +
test byte ptr [ebp+arg_8] 8 +
jnz loc_10035C7  +
mov al byte_100601C +
test al al +
jle loc_10031D4  +
mov ecx edi +
and ecx 8000h +
or ecx [ebp+arg_18] +
jz loc_10035C7  +
test edi 0FFFE0000h +
jnz loc_1003240  +
mov eax [ebp+var_4] +
test eax eax +
jnz loc_1003235  +
mov edx [ebp+arg_0] +
mov [ebp+var_10] edx +
mov esi [ebp+var_10] +
mov edx [esi+4] +
cmp byte_100601C 0 +
mov eax [esi] +
jl loc_100320C  +
test eax eax +
lea ecx [edx+1] +
jz loc_100321B  +
mov ebx [eax+0Ch] +
cmpxchg8b qword ptr [esi]  +
jnz loc_10031FA  +
jmp loc_100321B  +
test eax eax +
lea ecx [edx+1] +
jz loc_100321B  +
mov ebx [eax+0Ch] +
cmpxchg8b qword ptr [esi]  +
jnz loc_100320C  +
mov [ebp+var_4] eax +
mov eax [ebp+var_4] +
test eax eax +
jnz loc_1003235  +
mov eax [ebp+arg_0] +
push eax  +
call sub_1004AD2  +
mov [ebp+var_4] eax +
test eax eax +
jz loc_100328A  +
mov ecx [eax+8] +
shl ecx 11h +
add edi ecx +
mov [ebp+var_18] edi +
add [ebp+var_1C] 20000h +
mov eax [ebp+var_24] +
mov edx [ebp+var_20] +
mov ebx [ebp+var_1C] +
mov ecx [ebp+var_18] +
cmp byte_100601C 0 +
mov esi [ebp+var_8] +
jle loc_1003265  +
cmpxchg8b qword ptr [esi]  +
jmp loc_1003268  +
cmpxchg8b qword ptr [esi]  +
setz al  +
test al al +
jz loc_100311E  +
mov eax [ebp+var_4] +
test eax eax +
jnz loc_1003298  +
mov ecx [ebp+arg_0] +
mov edx [ecx+10h] +
mov eax edi +
shr eax 11h +
mov eax [edx+eax*4] +
jmp loc_10032D2  +
pop edi  +
pop esi  +
mov eax 8 +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 20h  +
mov ecx edi +
shr ecx 11h +
cmp [eax+8] ecx +
jz loc_10032D5  +
mov edx [ebp+arg_0] +
mov [ebp+arg_8] edx +
mov esi [ebp+arg_8] +
mov ebx [ebp+var_4] +
cmp byte_100601C 0 +
mov eax [esi] +
jl loc_10032C4  +
mov [ebx+0Ch] eax +
cmpxchg [esi] ebx +
jnz loc_10032B9  +
jmp loc_10032CC  +
mov [ebx+0Ch] eax +
cmpxchg [esi] ebx +
jnz loc_10032C4  +
mov edx [edx+10h] +
mov eax [edx+ecx*4] +
mov [ebp+var_4] eax +
mov cl byte_100601C +
test cl cl +
jle loc_10033D9  +
test edi 8000h +
jz loc_10033D9  +
mov [ebp+arg_8] 3E8h +
pause   +
mov esi [ebp+arg_4] +
mov eax [esi] +
mov edi [esi+4] +
mov [ebp+var_24] eax +
mov [ebp+var_20] edi +
test eax 1FFFFh +
jnz loc_1003377  +
or eax 10000h +
sub eax 20000h +
and edi 0FFFF7FFFh +
cmp [ebp+arg_14] 0 +
mov [ebp+var_1C] eax +
mov [ebp+var_18] edi +
jz loc_1003332  +
or edi 8000h +
mov [ebp+var_18] edi +
mov edx edi +
and eax 0FFFE0000h +
and edx 7FFFh +
or eax edx +
jnz loc_100334C  +
and edi 1FFFFh +
mov [ebp+var_18] edi +
mov eax [ebp+var_24] +
mov edx [ebp+var_20] +
mov ebx [ebp+var_1C] +
mov ecx [ebp+var_18] +
cmp byte_100601C 0 +
mov esi [ebp+var_8] +
jle loc_100336A  +
cmpxchg8b qword ptr [esi]  +
jmp loc_100336D  +
cmpxchg8b qword ptr [esi]  +
setz al  +
test al al +
jnz loc_100338A  +
mov esi [ebp+arg_4] +
sub [ebp+arg_8] 1 +
jz loc_10033DF  +
test edi 8000h +
jz loc_10033DF  +
jmp loc_10032F6  +
test edi 0FFFE0000h +
jnz loc_10033BC  +
mov eax [ebp+arg_0] +
mov [ebp+arg_14] eax +
mov esi [ebp+arg_14] +
mov ebx [ebp+var_4] +
cmp byte_100601C 0 +
mov eax [esi] +
jl loc_10033B4  +
mov [ebx+0Ch] eax +
cmpxchg [esi] ebx +
jnz loc_10033A9  +
jmp loc_10033BC  +
mov [ebx+0Ch] eax +
cmpxchg [esi] ebx +
jnz loc_10033B4  +
mov ecx [ebp+arg_0] +
cmp dword ptr [ecx+0Ch] 0 +
jl loc_10033CE  +
mov edx [ebp+arg_4] +
mov eax [ebp+var_C] +
mov [edx+8] eax +
pop edi  +
pop esi  +
xor eax eax +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 20h  +
mov esi [ebp+arg_4] +
lea esp [esp+30h+var_30] +
mov eax [ebp+arg_10] +
test eax eax +
jnz loc_10033FA  +
mov ecx [ebp+var_4] +
mov edx [ecx+4] +
mov ecx [ebp+bAlertable] +
mov eax [ebp+arg_18] +
push edx  +
call sub_100460B  +
jmp loc_100340F  +
mov ecx [ebp+bAlertable] +
mov edx [ebp+arg_18] +
push ecx  +
mov ecx [ebp+var_4] +
push edx  +
mov edx [ecx+4] +
mov ecx [ebp+arg_C] +
push edx  +
push ecx  +
call eax  +
mov [ebp+arg_8] eax +
test eax eax +
jnz loc_10034CC  +
mov eax [esi] +
mov edi [esi+4] +
test eax 1FFFFh +
jnz loc_10034AC  +
mov [ebp+var_24] eax +
or eax 10000h +
mov [ebp+var_20] edi +
sub eax 20000h +
and edi 0FFFF7FFFh +
cmp [ebp+arg_14] 0 +
mov [ebp+var_1C] eax +
mov [ebp+var_18] edi +
jz loc_1003455  +
or edi 8000h +
mov [ebp+var_18] edi +
mov edx edi +
and eax 0FFFE0000h +
and edx 7FFFh +
or eax edx +
jnz loc_100346F  +
and edi 1FFFFh +
mov [ebp+var_18] edi +
mov eax [ebp+var_24] +
mov edx [ebp+var_20] +
mov ebx [ebp+var_1C] +
mov ecx [ebp+var_18] +
cmp byte_100601C 0 +
mov esi [ebp+var_8] +
jle loc_100348D  +
cmpxchg8b qword ptr [esi]  +
jmp loc_1003490  +
cmpxchg8b qword ptr [esi]  +
setz al  +
test al al +
jnz loc_1003588  +
mov ecx [ebp+arg_4] +
mov eax [ecx] +
mov edi [ecx+4] +
test eax 1FFFFh +
jz loc_100342A  +
mov esi ecx +
test eax 8000h +
jz loc_10033DF  +
mov eax [ebp+var_4] +
mov ecx [eax+4] +
push ecx  +
call ds:SetEvent  +
jmp loc_10033DF  +
mov esi [ebp+arg_4] +
mov edi [esi] +
mov esi [esi+4] +
mov [ebp+var_24] edi +
sub edi 20000h +
mov edx edi +
mov eax esi +
and edx 0FFFE0000h +
and eax 7FFFh +
or edx eax +
mov [ebp+var_18] esi +
mov [ebp+var_20] esi +
mov [ebp+var_1C] edi +
jnz loc_10034FF  +
and esi 1FFFFh +
mov [ebp+var_18] esi +
mov eax [ebp+var_24] +
mov edx [ebp+var_20] +
mov ebx [ebp+var_1C] +
mov ecx [ebp+var_18] +
cmp byte_100601C 0 +
mov esi [ebp+var_8] +
jle loc_100351D  +
cmpxchg8b qword ptr [esi]  +
jmp loc_1003520  +
cmpxchg8b qword ptr [esi]  +
setz al  +
test al al +
jz loc_10034C9  +
mov ecx [ebp+var_18] +
test ecx 0FFFE0000h +
jnz loc_100355C  +
mov edx [ebp+arg_0] +
mov [ebp+arg_0] edx +
mov esi [ebp+arg_0] +
mov ebx [ebp+var_4] +
cmp byte_100601C 0 +
mov eax [esi] +
jl loc_1003554  +
mov [ebx+0Ch] eax +
cmpxchg [esi] ebx +
jnz loc_1003549  +
jmp loc_100355C  +
mov [ebx+0Ch] eax +
cmpxchg [esi] ebx +
jnz loc_1003554  +
test edi 0FFFF0000h +
jnz loc_100357C  +
mov eax ecx +
and eax 7FFFh +
jz loc_100357C  +
push 0  +
push eax  +
mov eax [ebp+var_4] +
mov ecx [eax] +
push ecx  +
call ds:ReleaseSemaphore  +
mov eax [ebp+arg_8] +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 20h  +
test edi 0FFFE0000h +
jnz loc_10013C5  +
mov edx [ebp+arg_0] +
mov [ebp+arg_14] edx +
mov esi [ebp+arg_14] +
mov ebx [ebp+var_4] +
cmp byte_100601C 0 +
mov eax [esi] +
jl loc_10035B9  +
mov [ebx+0Ch] eax +
cmpxchg [esi] ebx +
jnz loc_10035AB  +
jmp loc_10013C5  +
mov [ebx+0Ch] eax +
cmpxchg [esi] ebx +
jz loc_10013C5  +
jmp loc_10035B9  +
cmp [ebp+var_4] 0 +
jz loc_10035F7  +
mov eax [ebp+arg_0] +
mov [ebp+arg_0] eax +
mov esi [ebp+arg_0] +
mov ebx [ebp+var_4] +
cmp byte_100601C 0 +
mov eax [esi] +
jl loc_10035EF  +
mov [ebx+0Ch] eax +
cmpxchg [esi] ebx +
jnz loc_10035E4  +
jmp loc_10035F7  +
mov [ebx+0Ch] eax +
cmpxchg [esi] ebx +
jnz loc_10035EF  +
pop edi  +
pop esi  +
mov eax 102h +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 20h  +
lea edx [ecx-2] +
test edx 0FFFFFFF7h +
jnz loc_10036FC  +
cmp [esi+0Ch] edi +
jl loc_100363D  +
call ds:GetCurrentThreadId  +
mov ecx [ebx+8] +
cmp ecx eax +
jz loc_1003634  +
pop edi  +
pop esi  +
mov eax 0E0000001h +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 20h  +
cmp [ebx+0Ch] edi +
jnz loc_100363D  +
mov [ebx+8] edi +
nop   +
mov eax [ebx] +
mov edi [ebx+4] +
cmp dword ptr [ebx+0Ch] 0 +
mov [ebp+var_24] eax +
mov [ebp+var_20] edi +
jnz loc_100365A  +
test eax 10000h +
jz loc_1003626  +
and eax 0FFFEFFFFh +
and edi 0FFFF7FFFh +
cmp [ebp+arg_14] 0 +
mov [ebp+var_18] edi +
jz loc_1003672  +
or edi 8000h +
mov [ebp+var_18] edi +
inc eax  +
mov [ebp+var_1C] eax +
mov eax [ebp+var_24] +
mov edx [ebp+var_20] +
mov ebx [ebp+var_1C] +
mov ecx [ebp+var_18] +
cmp byte_100601C 0 +
mov esi [ebp+var_8] +
jle loc_1003694  +
cmpxchg8b qword ptr [esi]  +
jmp loc_1003697  +
cmpxchg8b qword ptr [esi]  +
setz al  +
test al al +
jnz loc_10036A3  +
mov ebx [ebp+arg_4] +
jmp loc_100363D  +
mov ecx [ebp+arg_4] +
mov eax [ecx+0Ch] +
test eax eax +
jz loc_10036BC  +
pop edi  +
dec eax  +
pop esi  +
mov [ecx+0Ch] eax +
xor eax eax +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 20h  +
test [ebp+var_1C] 0FFFE0000h +
jnz loc_10013D7  +
mov eax edi +
and eax 7FFFh +
jz loc_10013D7  +
mov edx [ebp+arg_0] +
mov ecx [edx+10h] +
shr edi 11h +
mov edi [ecx+edi*4] +
push 0  +
mov [ebp+var_4] edi +
mov edx [edi] +
push eax  +
push edx  +
call ds:ReleaseSemaphore  +
pop edi  +
pop esi  +
xor eax eax +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 20h  +
lea eax [ecx-3] +
and eax 0FFFFFFF7h +
mov [ebp+var_10] eax +
jz loc_1003716  +
add ecx 0FFFFFFFCh +
test ecx 0FFFFFFF7h +
jnz loc_10039A0  +
cmp [esi+0Ch] edi +
mov [ebp+var_C] edi +
jl loc_1003799  +
call ds:GetCurrentThreadId  +
mov ecx [ebx+8] +
mov [ebp+var_C] eax +
cmp ecx eax +
jnz loc_1003799  +
mov edi [ebp+arg_14] +
mov eax [ebx] +
mov ebx [ebx+4] +
mov [ebp+var_18] ebx +
mov [ebp+var_24] eax +
mov [ebp+var_20] ebx +
test eax 7FFFh +
jz loc_10039A0  +
dec eax  +
mov [ebp+var_1C] eax +
test edi edi +
jnz loc_100375B  +
and ebx 0FFFF7FFFh +
mov [ebp+var_18] ebx +
mov eax [ebp+var_24] +
mov edx [ebp+var_20] +
mov ebx [ebp+var_1C] +
mov ecx [ebp+var_18] +
cmp byte_100601C 0 +
mov esi [ebp+var_8] +
jle loc_1003779  +
cmpxchg8b qword ptr [esi]  +
jmp loc_100377C  +
cmpxchg8b qword ptr [esi]  +
setz al  +
test al al +
jnz loc_1003788  +
mov ebx [ebp+arg_4] +
jmp loc_1003731  +
mov eax [ebp+arg_4] +
inc dword ptr [eax+0Ch]  +
pop edi  +
pop esi  +
xor eax eax +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 20h  +
mov edi [ebx] +
mov ebx [ebx+4] +
mov [ebp+var_18] ebx +
mov [ebp+var_24] edi +
mov [ebp+var_20] ebx +
test edi 7FFFh +
jz loc_1003970  +
mov ecx ebx +
lea esp [esp+30h+var_30] +
test edi 8000h +
jnz loc_10039AE  +
test edi 0FFFE0000h +
jz loc_10037D6  +
cmp [ebp+var_10] 0 +
jz loc_10039EC  +
dec edi  +
test edi 17FFFh +
jnz loc_1003881  +
or edi 10000h +
and ecx 0FFFF7FFFh +
cmp [ebp+arg_14] 0 +
mov [ebp+var_1C] edi +
mov [ebp+var_18] ecx +
jz loc_1003804  +
or ecx 8000h +
mov [ebp+var_18] ecx +
mov eax [ebp+var_24] +
mov edx [ebp+var_20] +
mov ebx [ebp+var_1C] +
mov ecx [ebp+var_18] +
cmp byte_100601C 0 +
mov esi [ebp+var_8] +
jle loc_1003822  +
cmpxchg8b qword ptr [esi]  +
jmp loc_1003825  +
cmpxchg8b qword ptr [esi]  +
setz al  +
test al al +
jz loc_1003953  +
cmp [ebp+var_4] 0 +
jz loc_1003860  +
mov ecx [ebp+arg_0] +
mov [ebp+arg_14] ecx +
mov esi [ebp+arg_14] +
mov ebx [ebp+var_4] +
cmp byte_100601C 0 +
mov eax [esi] +
jl loc_1003858  +
mov [ebx+0Ch] eax +
cmpxchg [esi] ebx +
jnz loc_100384D  +
jmp loc_1003860  +
mov [ebx+0Ch] eax +
cmpxchg [esi] ebx +
jnz loc_1003858  +
mov edx [ebp+arg_0] +
cmp dword ptr [edx+0Ch] 0 +
jl loc_10013D7  +
mov eax [ebp+arg_4] +
mov ecx [ebp+var_C] +
pop edi  +
pop esi  +
mov [eax+8] ecx +
xor eax eax +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 20h  +
test byte ptr [ebp+arg_8] 8 +
jnz loc_1003D3C  +
mov dl byte_100601C +
test dl dl +
jle loc_10038A5  +
mov eax ecx +
and eax 8000h +
or eax [ebp+arg_18] +
jz loc_1003D3C  +
test ecx 0FFFE0000h +
jnz loc_1003918  +
mov eax [ebp+var_4] +
test eax eax +
jnz loc_100390D  +
mov ecx [ebp+arg_0] +
mov [ebp+var_14] ecx +
mov esi [ebp+var_14] +
mov edx [esi+4] +
cmp byte_100601C 0 +
mov eax [esi] +
jl loc_10038DD  +
test eax eax +
lea ecx [edx+1] +
jz loc_10038EC  +
mov ebx [eax+0Ch] +
cmpxchg8b qword ptr [esi]  +
jnz loc_10038CB  +
jmp loc_10038EC  +
test eax eax +
lea ecx [edx+1] +
jz loc_10038EC  +
mov ebx [eax+0Ch] +
cmpxchg8b qword ptr [esi]  +
jnz loc_10038DD  +
mov [ebp+var_4] eax +
mov eax [ebp+var_4] +
test eax eax +
jnz loc_100390A  +
mov edx [ebp+arg_0] +
push edx  +
call sub_1004AD2  +
mov [ebp+var_4] eax +
test eax eax +
jz loc_100328A  +
mov ecx [ebp+var_18] +
mov eax [eax+8] +
shl eax 11h +
add ecx eax +
mov [ebp+var_18] ecx +
or edi 8000h +
add edi 20000h +
mov [ebp+var_1C] edi +
mov eax [ebp+var_24] +
mov edx [ebp+var_20] +
mov ebx [ebp+var_1C] +
mov ecx [ebp+var_18] +
cmp byte_100601C 0 +
mov esi [ebp+var_8] +
jle loc_1003945  +
cmpxchg8b qword ptr [esi]  +
jmp loc_1003948  +
cmpxchg8b qword ptr [esi]  +
setz al  +
test al al +
jnz loc_1003A2A  +
mov eax [ebp+arg_4] +
mov edi [eax] +
mov ecx [eax+4] +
mov [ebp+var_18] ecx +
mov [ebp+var_24] edi +
mov [ebp+var_20] ecx +
test edi 7FFFh +
jnz loc_10037B8  +
cmp [ebp+var_4] 0 +
jz loc_10039A0  +
mov ecx [ebp+arg_0] +
mov [ebp+arg_0] ecx +
mov esi [ebp+arg_0] +
mov ebx [ebp+var_4] +
cmp byte_100601C 0 +
mov eax [esi] +
jl loc_1003998  +
mov [ebx+0Ch] eax +
cmpxchg [esi] ebx +
jnz loc_100398D  +
jmp loc_10039A0  +
mov [ebx+0Ch] eax +
cmpxchg [esi] ebx +
jnz loc_1003998  +
pop edi  +
pop esi  +
mov eax 57h +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 20h  +
cmp [ebp+var_4] 0 +
jz loc_10039DE  +
mov edx [ebp+arg_0] +
mov [ebp+arg_0] edx +
mov esi [ebp+arg_0] +
mov ebx [ebp+var_4] +
cmp byte_100601C 0 +
mov eax [esi] +
jl loc_10039D6  +
mov [ebx+0Ch] eax +
cmpxchg [esi] ebx +
jnz loc_10039CB  +
jmp loc_10039DE  +
mov [ebx+0Ch] eax +
cmpxchg [esi] ebx +
jnz loc_10039D6  +
pop edi  +
pop esi  +
mov eax 0E0000002h +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 20h  +
cmp [ebp+var_4] 0 +
jz loc_1003A1C  +
mov eax [ebp+arg_0] +
mov [ebp+arg_0] eax +
mov esi [ebp+arg_0] +
mov ebx [ebp+var_4] +
cmp byte_100601C 0 +
mov eax [esi] +
jl loc_1003A14  +
mov [ebx+0Ch] eax +
cmpxchg [esi] ebx +
jnz loc_1003A09  +
jmp loc_1003A1C  +
mov [ebx+0Ch] eax +
cmpxchg [esi] ebx +
jnz loc_1003A14  +
pop edi  +
pop esi  +
mov eax 0E0000003h +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 20h  +
mov eax [ebp+var_4] +
mov edx [ebp+var_18] +
test eax eax +
jnz loc_1003A47  +
mov ecx [ebp+arg_0] +
mov ecx [ecx+10h] +
mov eax edx +
shr eax 11h +
mov eax [ecx+eax*4] +
mov [ebp+var_4] eax +
jmp loc_1003A84  +
mov ecx edx +
shr ecx 11h +
cmp [eax+8] ecx +
jz loc_1003A84  +
mov edi [ebp+arg_0] +
mov [ebp+arg_8] edi +
mov esi [ebp+arg_8] +
mov ebx [ebp+var_4] +
cmp byte_100601C 0 +
mov eax [esi] +
jl loc_1003A73  +
mov [ebx+0Ch] eax +
cmpxchg [esi] ebx +
jnz loc_1003A68  +
jmp loc_1003A7B  +
mov [ebx+0Ch] eax +
cmpxchg [esi] ebx +
jnz loc_1003A73  +
mov eax [edi+10h] +
mov ecx [eax+ecx*4] +
mov [ebp+var_4] ecx +
mov al byte_100601C +
test al al +
jle loc_1003B7F  +
test edx 8000h +
jz loc_1003B7F  +
mov [ebp+arg_8] 3E8h +
lea esp [esp+30h+var_30] +
pause   +
mov esi [ebp+arg_4] +
mov eax [esi] +
mov edi [esi+4] +
mov [ebp+var_24] eax +
mov [ebp+var_20] edi +
test eax 17FFFh +
jnz loc_1003B2D  +
or eax 10000h +
sub eax 20000h +
and eax 0FFFF7FFFh +
and edi 0FFFF7FFFh +
cmp [ebp+arg_14] 0 +
mov [ebp+var_1C] eax +
mov [ebp+var_18] edi +
jz loc_1003AE8  +
or edi 8000h +
mov [ebp+var_18] edi +
mov ecx edi +
and eax 0FFFE0000h +
and ecx 7FFFh +
or eax ecx +
jnz loc_1003B02  +
and edi 1FFFFh +
mov [ebp+var_18] edi +
mov eax [ebp+var_24] +
mov edx [ebp+var_20] +
mov ebx [ebp+var_1C] +
mov ecx [ebp+var_18] +
cmp byte_100601C 0 +
mov esi [ebp+var_8] +
jle loc_1003B20  +
cmpxchg8b qword ptr [esi]  +
jmp loc_1003B23  +
cmpxchg8b qword ptr [esi]  +
setz al  +
test al al +
jnz loc_1003B40  +
mov esi [ebp+arg_4] +
sub [ebp+arg_8] 1 +
jz loc_1003B82  +
test edi 8000h +
jz loc_1003B82  +
jmp loc_1003AA7  +
test edi 0FFFE0000h +
jnz loc_10013C5  +
mov edx [ebp+arg_0] +
mov [ebp+arg_14] edx +
mov esi [ebp+arg_14] +
mov ebx [ebp+var_4] +
cmp byte_100601C 0 +
mov eax [esi] +
jl loc_1003B71  +
mov [ebx+0Ch] eax +
cmpxchg [esi] ebx +
jnz loc_1003B63  +
jmp loc_10013C5  +
mov [ebx+0Ch] eax +
cmpxchg [esi] ebx +
jz loc_10013C5  +
jmp loc_1003B71  +
mov esi [ebp+arg_4] +
mov ebx [ebp+bAlertable] +
mov eax [ebp+arg_10] +
test eax eax +
jnz loc_1003B9F  +
mov eax [ebp+var_4] +
mov ecx [eax+4] +
mov eax [ebp+arg_18] +
push ecx  +
mov ecx ebx +
call sub_100460B  +
jmp loc_1003BB1  +
mov edx [ebp+arg_18] +
mov ecx [ebp+var_4] +
push ebx  +
push edx  +
mov edx [ecx+4] +
mov ecx [ebp+arg_C] +
push edx  +
push ecx  +
call eax  +
mov [ebp+arg_8] eax +
test eax eax +
jnz loc_1003C59  +
mov eax [esi] +
mov edi [esi+4] +
test eax 17FFFh +
jnz loc_1003B85  +
mov [ebp+var_24] eax +
or eax 10000h +
sub eax 20000h +
mov [ebp+var_20] edi +
and eax 0FFFF7FFFh +
and edi 0FFFF7FFFh +
cmp [ebp+arg_14] 0 +
mov [ebp+var_1C] eax +
mov [ebp+var_18] edi +
jz loc_1003BF8  +
or edi 8000h +
mov [ebp+var_18] edi +
mov edx edi +
and eax 0FFFE0000h +
and edx 7FFFh +
or eax edx +
jnz loc_1003C12  +
and edi 1FFFFh +
mov [ebp+var_18] edi +
mov eax [ebp+var_24] +
mov edx [ebp+var_20] +
mov ebx [ebp+var_1C] +
mov ecx [ebp+var_18] +
cmp byte_100601C 0 +
mov esi [ebp+var_8] +
jle loc_1003C30  +
cmpxchg8b qword ptr [esi]  +
jmp loc_1003C33  +
cmpxchg8b qword ptr [esi]  +
setz al  +
test al al +
jnz loc_1003CFD  +
mov ecx [ebp+arg_4] +
mov eax [ecx] +
mov edi [ecx+4] +
test eax 17FFFh +
jnz loc_1003B7F  +
jmp loc_1003BC8  +
mov esi [ebp+arg_4] +
mov edi [esi] +
mov esi [esi+4] +
mov [ebp+var_24] edi +
add edi 0FFFE0000h +
and edi 0FFFF7FFFh +
inc edi  +
mov eax edi +
mov ecx esi +
and eax 0FFFE0000h +
and ecx 7FFFh +
or eax ecx +
mov [ebp+var_18] esi +
mov [ebp+var_20] esi +
mov [ebp+var_1C] edi +
jnz loc_1003C93  +
and esi 1FFFFh +
mov [ebp+var_18] esi +
mov eax [ebp+var_24] +
mov edx [ebp+var_20] +
mov ebx [ebp+var_1C] +
mov ecx [ebp+var_18] +
cmp byte_100601C 0 +
mov esi [ebp+var_8] +
jle loc_1003CB1  +
cmpxchg8b qword ptr [esi]  +
jmp loc_1003CB4  +
cmpxchg8b qword ptr [esi]  +
setz al  +
test al al +
jz loc_1003C56  +
mov ecx [ebp+var_18] +
test ecx 0FFFE0000h +
jnz loc_100355C  +
mov edx [ebp+arg_0] +
mov [ebp+arg_0] edx +
mov esi [ebp+arg_0] +
mov ebx [ebp+var_4] +
cmp byte_100601C 0 +
mov eax [esi] +
jl loc_1003CEF  +
mov [ebx+0Ch] eax +
cmpxchg [esi] ebx +
jnz loc_1003CE1  +
jmp loc_100355C  +
mov [ebx+0Ch] eax +
cmpxchg [esi] ebx +
jz loc_100355C  +
jmp loc_1003CEF  +
test edi 0FFFE0000h +
jnz loc_10013C5  +
mov edx [ebp+arg_0] +
mov [ebp+arg_14] edx +
mov esi [ebp+arg_14] +
mov ebx [ebp+var_4] +
cmp byte_100601C 0 +
mov eax [esi] +
jl loc_1003D2E  +
mov [ebx+0Ch] eax +
cmpxchg [esi] ebx +
jnz loc_1003D20  +
jmp loc_10013C5  +
mov [ebx+0Ch] eax +
cmpxchg [esi] ebx +
jz loc_10013C5  +
jmp loc_1003D2E  +
cmp [ebp+var_4] 0 +
jz loc_1003D6C  +
mov eax [ebp+arg_0] +
mov [ebp+arg_0] eax +
mov esi [ebp+arg_0] +
mov ebx [ebp+var_4] +
cmp byte_100601C 0 +
mov eax [esi] +
jl loc_1003D64  +
mov [ebx+0Ch] eax +
cmpxchg [esi] ebx +
jnz loc_1003D59  +
jmp loc_1003D6C  +
mov [ebx+0Ch] eax +
cmpxchg [esi] ebx +
jnz loc_1003D64  +
pop edi  +
pop esi  +
mov eax 102h +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 20h  +
***
call sub_10045A9  +
jmp loc_1001430  +
mov edi [ebx] +
mov ebx [ebx+4] +
mov [ebp+var_8] ebx +
mov [ebp+var_14] edi +
mov [ebp+var_10] ebx +
test edi 7FFFh +
jz loc_1003E2D  +
dec edi  +
mov [ebp+var_C] edi +
mov eax [ebp+var_14] +
mov edx [ebp+var_10] +
mov ebx [ebp+var_C] +
mov ecx [ebp+var_8] +
cmp byte_100601C 0 +
mov esi [ebp+var_4] +
jle loc_1003DC0  +
cmpxchg8b qword ptr [esi]  +
jmp loc_1003DC3  +
cmpxchg8b qword ptr [esi]  +
setz al  +
test al al +
jnz loc_1003DCF  +
mov ebx [ebp+arg_4] +
jmp loc_1003D84  +
test edi 17FFFh +
jnz loc_10014CB  +
and edi 0FFFE0000h +
jz loc_10014CB  +
mov edx [ebp+arg_0] +
mov eax [ebp+var_8] +
mov ecx [edx+10h] +
shr eax 11h +
mov eax [ecx+eax*4] +
mov edx [eax+4] +
push edx  +
call ds:SetEvent  +
cmp [ebp+arg_C] 0 +
jz loc_10014CB  +
mov eax [ebp+arg_4] +
mov ecx [eax] +
and ecx 0FFFE0000h +
cmp ecx edi +
jmp loc_1003EB1  +
dec eax  +
mov [ebx+0Ch] eax +
jmp loc_10014CB  +
mov ebx [ebp+arg_4] +
jmp loc_1001464  +
pop edi  +
pop esi  +
mov eax 0E0000001h +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 10h  +
test ebx 7FFFh +
jnz loc_10014CB  +
mov eax [ebp+arg_0] +
mov ecx [eax+10h] +
shr edi 11h +
mov edi [ecx+edi*4] +
mov edx [edi+4] +
push edx  +
call ds:SetEvent  +
cmp [ebp+arg_C] 0 +
jz loc_10014CB  +
mov eax [ebp+arg_4] +
mov ecx [eax] +
and ecx 0FFFE0000h +
cmp ecx esi +
jmp loc_1003EB1  +
mov edx [ebp+arg_0] +
mov eax [edx+10h] +
shr edi 11h +
mov edi [eax+edi*4] +
mov ecx [edi] +
push 0  +
push esi  +
push ecx  +
call ds:ReleaseSemaphore  +
cmp [ebp+arg_C] 0 +
jz loc_10014CB  +
test ebx 7FFFh +
jnz loc_10014CB  +
mov edx [ebp+arg_4] +
mov eax [edx+4] +
and eax 7FFFh +
cmp eax esi +
jnz loc_10014CB  +
push 1  +
call ds:Sleep  +
pop edi  +
pop esi  +
xor eax eax +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 10h  +
pop esi  +
mov eax 57h +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
cmp eax 7FFFFFFFh +
ja loc_1003F41  +
mov ecx [ebp+arg_4] +
mov [ecx] eax +
xor eax eax +
jmp loc_1003F4C  +
mov eax [ebp+arg_4] +
or dword ptr [eax] 0FFFFFFFFh +
mov eax 80070216h +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_4] 0 +
ja loc_1003F73  +
mov eax [ebp+arg_0] +
jb loc_1003F6A  +
cmp eax 0FFFFFFFFh +
ja loc_1003F73  +
mov ecx [ebp+arg_8] +
mov [ecx] eax +
xor eax eax +
jmp loc_1003F7E  +
mov eax [ebp+arg_8] +
or dword ptr [eax] 0FFFFFFFFh +
mov eax 80070216h +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
mov eax [ebp+arg_4] +
add eax ecx +
cmp eax ecx +
jb loc_1003FA1  +
mov ecx [ebp+arg_8] +
mov [ecx] eax +
xor eax eax +
jmp loc_1003FAC  +
mov eax [ebp+arg_8] +
or dword ptr [eax] 0FFFFFFFFh +
mov eax 80070216h +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi] +
test eax eax +
jz loc_1003FC9  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
and dword ptr [esi] 0 +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+10h] +
test eax eax +
jz loc_1003FDF  +
and dword ptr [eax] 0 +
mov eax 80004002h +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+dwMilliseconds]  +
push dword ptr [ecx+2Ch]  +
call ds:WaitForSingleObject  +
xor eax eax +
pop ebp  +
retn 4  +
***
xor eax eax +
retn 10h  +
***
xor eax eax +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push 1  +
push 0  +
push dword ptr [ebp+0Ch]  +
call ds:CoCreateInstance  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push esi  +
mov esi ecx +
and dword ptr [esi+18h] 0 +
call sub_1004D94  +
mov eax [eax] +
push esi  +
push eax  +
call sub_100239D  +
test eax eax +
jz loc_1004060  +
mov dword ptr [esi+18h] 1 +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1004D94  +
mov eax [eax] +
xor ecx ecx +
xor edx edx +
cmp [ebp+arg_0] ecx +
push ecx  +
setnz dl  +
push 0FFFFFFFFh  +
push ecx  +
push edx  +
push esi  +
push eax  +
call sub_1002426  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1004D94  +
mov eax [eax] +
push 0  +
push [ebp+arg_0]  +
push esi  +
push eax  +
call sub_10013E7  +
pop esi  +
pop ebp  +
retn 4  +
***
mov dword ptr [ecx] offset off_1001EAC +
mov ecx [ecx+2Ch] +
test ecx ecx +
jz locret_10040D1  +
push ecx  +
call ds:CloseHandle  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_10040BD  +
test [ebp+arg_0] 1 +
jz loc_10040F4  +
test esi esi +
jz loc_10040F4  +
push esi  +
call MFHeapFree  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
sub dword ptr [esp+4] 4 +
jmp loc_1001F21  +
***
sub dword ptr [esp+4] 8 +
jmp loc_1001F21  +
***
sub dword ptr [esp+4] 8 +
jmp loc_10014EC  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi+34h] +
mov dword ptr [esi] offset off_1001F04 +
mov dword ptr [esi+4] offset off_1001EDC +
mov dword ptr [esi+8] offset off_10020E0 +
test eax eax +
jz loc_1004175  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
and dword ptr [esi+34h] 0 +
xor eax eax +
cmp dword_1006020[eax*4] esi +
jz loc_1004188  +
inc eax  +
cmp eax 4 +
jnb loc_1004190  +
jmp loc_1004177  +
and dword_1006020[eax*4] 0 +
lea ecx [esi+30h] +
pop esi  +
jmp loc_1003FB5  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+pprot] 0 +
push esi  +
mov esi ecx +
mov ecx [esi+34h] +
test ecx ecx +
jz loc_10041C9  +
push 0BB8h  +
call sub_1003FED  +
mov eax [esi+34h] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
and dword ptr [esi+34h] 0 +
lea eax [ebp+pprot] +
push eax  +
push 0  +
call ds:GetRunningObjectTable  +
test eax eax +
jl loc_10041E5  +
mov eax [ebp+pprot] +
push dword ptr [esi+38h]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+10h]  +
mov eax [ebp+pprot] +
pop esi  +
test eax eax +
jz locret_10041F3  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov ecx [ebp+arg_0] +
push 1  +
mov [esi] ecx +
call sub_1004069  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+8] +
push edi  +
lea eax [esi+4] +
push eax  +
call ds:InterlockedDecrement  +
mov edi eax +
test edi edi +
jnz loc_1004241  +
test esi esi +
jz loc_1004241  +
push 1  +
mov ecx esi +
call sub_10040D7  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push esi  +
mov esi [ebp+8] +
lea eax [esi+8] +
push eax  +
lea ecx [ebp-8] +
call sub_10041FA  +
dec dword ptr [esi+28h]  +
jnz loc_1004273  +
push dword ptr [esi+2Ch]  +
call ds:SetEvent  +
mov ecx [ebp-8] +
push 1  +
call sub_1004098  +
xor eax eax +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_100414B  +
test byte ptr [ebp+8] 1 +
jz loc_10042A6  +
test esi esi +
jz loc_10042A6  +
push esi  +
call MFHeapFree  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push esi  +
mov esi [ebp+8] +
lea eax [esi+0Ch] +
push eax  +
lea ecx [ebp-8] +
call sub_10041FA  +
mov eax [esi+30h] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+10h]  +
mov ecx [ebp-8] +
push 1  +
call sub_1004098  +
xor eax eax +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov eax [eax] +
cmp dword ptr [eax] 0E06D7363h +
jnz loc_1004325  +
cmp dword ptr [eax+10h] 3 +
jnz loc_1004325  +
mov eax [eax+14h] +
cmp eax 19930520h +
jz loc_100431F  +
cmp eax 19930521h +
jz loc_100431F  +
cmp eax 19930522h +
jz loc_100431F  +
cmp eax 1994000h +
jnz loc_1004325  +
call ds:?terminate@@YAXXZ  +
xor eax eax +
pop ebp  +
retn 4  +
***
push offset loc_10042E8  +
call ds:SetUnhandledExceptionFilter  +
xor eax eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
mov eax 5A4Dh +
cmp [ecx] ax +
jz loc_1004364  +
xor eax eax +
pop ebp  +
retn   +
mov eax [ecx+3Ch] +
add eax ecx +
cmp dword ptr [eax] 4550h +
jnz loc_1004360  +
xor edx edx +
mov ecx 10Bh +
cmp [eax+18h] cx +
setz dl  +
mov eax edx +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [eax+3Ch] +
add ecx eax +
movzx eax word ptr [ecx+14h] +
push ebx  +
push esi  +
movzx esi word ptr [ecx+6] +
xor edx edx +
push edi  +
lea eax [eax+ecx+18h] +
test esi esi +
jbe loc_10043C5  +
mov edi [ebp+arg_4] +
mov ecx [eax+0Ch] +
cmp edi ecx +
jb loc_10043BD  +
mov ebx [eax+8] +
add ebx ecx +
cmp edi ebx +
jb loc_10043C7  +
inc edx  +
add eax 28h +
cmp edx esi +
jb loc_10043AD  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
call sub_10022D4  +
and dword ptr [ebp-4] 0 +
mov esi 1000000h +
push esi  +
call sub_100434E  +
pop ecx  +
test eax eax +
jz loc_100442E  +
mov eax [ebp+8] +
sub eax esi +
push eax  +
push esi  +
call sub_1004388  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_100442E  +
mov eax [eax+24h] +
shr eax 1Fh +
not eax  +
and eax 1 +
mov dword ptr [ebp-4] 0FFFFFFFEh +
jmp loc_1004437  +
mov eax [ebp-14h] +
mov eax [eax] +
mov eax [eax] +
xor ecx ecx +
cmp eax 0C0000005h +
setz cl  +
mov eax ecx +
retn   +
mov esp [ebp-18h] +
mov dword ptr [ebp-4] 0FFFFFFFEh +
xor eax eax +
call sub_1002384  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push offset sub_1001B96  +
push offset dword_1006000  +
call _except_handler4_common  +
add esp 18h +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 328h +
mov dword_1006168 eax +
mov dword_1006164 ecx +
mov dword_1006160 edx +
mov dword_100615C ebx +
mov dword_1006158 esi +
mov dword_1006154 edi +
mov word_1006180 ss +
mov word_1006174 cs +
mov word_1006150 ds +
mov word_100614C es +
mov word_1006148 fs +
mov word_1006144 gs +
pushf   +
pop dword_1006178  +
mov eax [ebp+0] +
mov dword_100616C eax +
mov eax [ebp+4] +
mov dword_1006170 eax +
lea eax [ebp+8] +
mov dword_100617C eax +
mov eax [ebp-320h] +
mov dword_10060B8 10001h +
mov eax dword_1006170 +
mov dword_1006074 eax +
mov dword_1006068 0C0000409h +
mov dword_100606C 1 +
mov eax dword_1006000 +
mov [ebp-328h] eax +
mov eax dword_1006004 +
mov [ebp-324h] eax +
push 0  +
call ds:SetUnhandledExceptionFilter  +
push offset ExceptionInfo  +
call ds:UnhandledExceptionFilter  +
push 0C0000409h  +
call ds:GetCurrentProcess  +
push eax  +
call ds:TerminateProcess  +
leave   +
retn   +
***
sub esp 28h +
mov [esp+28h+var_28] 0 +
mov al byte_100601C +
cmp al 2 +
jnz loc_1004602  +
lea ecx [esp+28h+SystemInfo] +
push ecx  +
call ds:GetSystemInfo  +
mov ecx 1 +
cmp [esp+28h+SystemInfo.dwNumberOfProcessors] ecx +
ja loc_10045F2  +
mov eax [esp+28h+SystemInfo.dwActiveProcessorMask] +
lea edx [eax-1] +
test edx eax +
jnz loc_10045F2  +
lea eax [esp+28h+var_28] +
push eax  +
mov byte_100601C 0FFh +
call ds:InterlockedIncrement  +
add esp 28h +
retn   +
lea eax [esp+28h+var_28] +
push eax  +
mov byte_100601C cl +
call ds:InterlockedIncrement  +
add esp 28h +
retn   +
***
test eax eax +
jnz loc_1004617  +
mov eax 102h +
retn 4  +
mov edx [esp+hHandle] +
push ecx  +
push eax  +
push edx  +
call ds:WaitForSingleObjectEx  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_4] +
push esi  +
mov esi [ebp+arg_0] +
test esi esi +
jg loc_1004645  +
pop esi  +
xor eax eax +
pop ebx  +
pop ebp  +
retn 8  +
test eax eax +
jz loc_1004679  +
mov ecx [eax+4] +
mov edx [eax+8] +
push esi  +
push ecx  +
call edx  +
mov esi eax +
test ebx ebx +
jz loc_10046C0  +
mov eax [ebp+arg_0] +
mov edx [ebp+arg_4] +
cmp byte_100601C 0 +
jle loc_100466E  +
xadd [edx] eax +
jmp loc_1004671  +
xadd [edx] eax +
mov eax esi +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
push edi  +
call ds:GetProcessHeap  +
push esi  +
mov edi eax +
push 0  +
push edi  +
call ds:HeapAlloc  +
mov esi eax +
test esi esi +
jz loc_10046BF  +
test ebx ebx +
jz loc_10046BF  +
push esi  +
push 0  +
push edi  +
call ds:HeapSize  +
mov [ebp+arg_0] eax +
test eax eax +
jle loc_10046BF  +
mov eax [ebp+arg_0] +
mov edx [ebp+arg_4] +
cmp byte_100601C 0 +
jle loc_10046BC  +
xadd [edx] eax +
jmp loc_10046BF  +
xadd [edx] eax +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
test eax eax +
jz loc_10046E7  +
mov ecx [eax+4] +
mov edx [eax+0Ch] +
push esi  +
push ecx  +
call edx  +
mov esp ebp +
pop ebp  +
retn 4  +
push edi  +
mov edi ds:GetProcessHeap +
call edi  +
cmp [ebp+arg_0] 0 +
jz loc_1004721  +
push esi  +
push 0  +
push eax  +
call ds:HeapSize  +
test eax eax +
jle loc_1004721  +
neg eax  +
mov [ebp+var_4] eax +
mov eax [ebp+var_4] +
mov edx [ebp+arg_0] +
cmp byte_100601C 0 +
jle loc_100471E  +
xadd [edx] eax +
jmp loc_1004721  +
xadd [edx] eax +
push esi  +
push 0  +
call edi  +
push eax  +
call ds:HeapFree  +
pop edi  +
mov esp ebp +
pop ebp  +
retn 4  +
***
test edx edx +
jg loc_1004748  +
mov dword ptr [edi] 0 +
xor eax eax +
retn 4  +
push esi  +
mov esi 40h +
cmp edx 20h +
ja loc_1004761  +
mov ecx 20h +
nop   +
mov esi ecx +
shr ecx 1 +
cmp edx ecx +
jbe loc_1004759  +
mov ecx 8 +
test eax eax +
jz loc_100476C  +
mov ecx [eax] +
cmp esi ecx +
ja loc_1004775  +
mov esi 1 +
mov ecx [esp+4+arg_0] +
push ecx  +
lea edx [esi+edx-1] +
push edx  +
call sub_100462C  +
mov ecx eax +
mov eax esi +
sub eax ecx +
dec esi  +
and eax esi +
mov [edi] ecx +
add eax ecx +
pop esi  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push ebx  +
push esi  +
push edi  +
mov edi ds:GetProcessHeap +
mov [ebp+var_8] eax +
mov esi [ebp+var_8] +
mov edx [esi+4] +
cmp byte_100601C 0 +
mov eax [esi] +
jl loc_10047D0  +
test eax eax +
lea ecx [edx+1] +
jz loc_10047DE  +
mov ebx [eax] +
cmpxchg8b qword ptr [esi]  +
jnz loc_10047BF  +
jmp loc_10047DE  +
test eax eax +
lea ecx [edx+1] +
jz loc_10047DE  +
mov ebx [eax] +
cmpxchg8b qword ptr [esi]  +
jnz loc_10047D0  +
mov [ebp+var_4] eax +
mov eax [ebp+var_4] +
test eax eax +
jz loc_1004842  +
mov esi [eax+4] +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_10047FE  +
mov ecx [eax+4] +
mov edx [eax+0Ch] +
push esi  +
push ecx  +
call edx  +
jmp loc_10047AE  +
call edi  +
cmp [ebp+arg_4] 0 +
jz loc_1004831  +
push esi  +
push 0  +
push eax  +
call ds:HeapSize  +
test eax eax +
jle loc_1004831  +
neg eax  +
mov [ebp+var_C] eax +
mov eax [ebp+var_C] +
mov edx [ebp+arg_4] +
cmp byte_100601C 0 +
jle loc_100482E  +
xadd [edx] eax +
jmp loc_1004831  +
xadd [edx] eax +
push esi  +
push 0  +
call edi  +
push eax  +
call ds:HeapFree  +
jmp loc_10047AE  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 34h +
push ebx  +
mov ebx [ebp+14h] +
mov edx ebx +
neg edx  +
push esi  +
sbb edx edx +
push edi  +
lea eax [ebp-4] +
and edx 10h +
push eax  +
add edx 0F8h +
lea edi [ebp-0Ch] +
mov eax ebx +
mov dword ptr [ebp-4] 0 +
call sub_1004739  +
mov esi eax +
xor edi edi +
cmp esi edi +
jnz loc_1004895  +
pop edi  +
pop esi  +
xor eax eax +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 10h  +
***
push 0F8h  +
push edi  +
push esi  +
call memset  +
mov ecx [ebp-0Ch] +
mov [esi+0F0h] ecx +
mov edx [ebp-4] +
add esp 0Ch +
mov [esi+28h] edx +
cmp ebx edi +
jnz loc_10048BF  +
mov [esi+0F4h] edi +
jmp loc_10048E1  +
lea eax [esi+0F8h] +
mov [esi+0F4h] eax +
mov ecx [ebx] +
mov [eax] ecx +
mov edx [ebx+4] +
mov [eax+4] edx +
mov ecx [ebx+8] +
mov [eax+8] ecx +
mov edx [ebx+0Ch] +
mov [eax+0Ch] edx +
mov dword ptr [esi+0Ch] 0FFFFFFFFh +
mov ebx 1 +
cmp [ebp+10h] edi +
jz loc_10048F7  +
mov [esi+0Ch] ebx +
jmp loc_10048FF  +
cmp [ebp+0Ch] edi +
jz loc_10048FF  +
mov [esi+0Ch] edi +
mov eax [ebp+8] +
cmp eax 10h +
jge loc_100490E  +
mov eax 10h +
jmp loc_100491A  +
cmp eax 100h +
jle loc_100491A  +
mov eax 100h +
mov [esi+30h] eax +
lea eax [esi+70h] +
mov [eax] edi +
mov [esi+10h] eax +
mov [esi+14h] ebx +
mov dword ptr [esi+8] 4C66506Ch +
mov al byte_100601C +
cmp al 2 +
jnz loc_1004977  +
mov [ebp-10h] edi +
mov cl byte_100601C +
cmp cl al +
jnz loc_1004977  +
lea edx [ebp-34h] +
push edx  +
call ds:GetSystemInfo  +
cmp [ebp-20h] ebx +
ja loc_1004967  +
mov eax [ebp-24h] +
lea ecx [eax-1] +
test ecx eax +
jnz loc_1004967  +
mov byte_100601C 0FFh +
jmp loc_100496D  +
mov byte_100601C bl +
lea edx [ebp-10h] +
push edx  +
call ds:InterlockedIncrement  +
lea eax [ebp-8] +
mov [ebp+14h] eax +
mov eax 1 +
mov edx [ebp+14h] +
cmp byte_100601C ah +
jle loc_1004993  +
xadd [edx] eax +
jmp loc_1004996  +
xadd [edx] eax +
inc eax  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 10h  +
***
push ebp  +
mov ebp esp +
sub esp 8 +
push edi  +
mov edi [ebp+8] +
test edi edi +
jz loc_1004AC4  +
push 0  +
lea eax [edi+8] +
push eax  +
call ds:InterlockedExchange  +
cmp eax 4C66506Ch +
jnz loc_1004AC4  +
mov cl byte_100601C +
cmp cl 2 +
jnz loc_1004A00  +
call sub_10045A9  +
mov edx [edi+10h] +
push ebx  +
mov ebx [edi+14h] +
sub ebx 1 +
push esi  +
mov [ebp-4] edx +
js loc_1004A41  +
mov eax [ebp-4] +
mov esi [eax+ebx*4] +
test esi esi +
jz loc_1004A3C  +
mov ecx [esi] +
push ecx  +
call ds:CloseHandle  +
mov edx [esi+4] +
push edx  +
call ds:CloseHandle  +
lea eax [edi+28h] +
push eax  +
mov eax [edi+0F4h] +
call sub_10046CD  +
sub ebx 1 +
jns loc_1004A10  +
lea ebx [edi+34h] +
mov dword ptr [ebp-4] 0Fh +
mov esi [ebx] +
test esi esi +
jz loc_1004A60  +
mov eax [edi+0F4h] +
lea ecx [edi+28h] +
push ecx  +
call sub_10046CD  +
add ebx 4 +
sub dword ptr [ebp-4] 1 +
jnz loc_1004A4B  +
mov edx [edi+0F4h] +
lea esi [edi+28h] +
push esi  +
lea eax [edi+20h] +
push edx  +
call sub_100479A  +
mov eax [esi] +
mov esi [edi+0F0h] +
lea ecx [ebp+8] +
mov [ebp+8] eax +
mov eax [edi+0F4h] +
push ecx  +
call sub_10046CD  +
lea edx [ebp-8] +
mov [ebp-4] edx +
mov eax 1 +
mov edx [ebp-4] +
cmp byte_100601C ah +
jle loc_1004AB2  +
xadd [edx] eax +
jmp loc_1004AB5  +
xadd [edx] eax +
inc eax  +
pop esi  +
pop ebx  +
mov eax 1 +
pop edi  +
mov esp ebp +
pop ebp  +
retn 4  +
***
xor eax eax +
pop edi  +
mov esp ebp +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push ebx  +
mov ebx [ebp+arg_0] +
mov eax [ebx+14h] +
cmp eax 8000h +
jnz loc_1004AF1  +
xor eax eax +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 4  +
push esi  +
push edi  +
lea eax [ebx+28h] +
push eax  +
mov eax [ebx+0F4h] +
push 10h  +
call sub_100462C  +
mov esi eax +
mov [ebp+var_4] esi +
test esi esi +
jz loc_1004CCD  +
push 0  +
push 7FFFFFFFh  +
push 0  +
push 0  +
call ds:CreateSemaphoreW  +
mov [esi] eax +
test eax eax +
jz loc_1004CBE  +
push 0  +
push 0  +
push 0  +
push 0  +
call ds:CreateEventW  +
mov [esi+4] eax +
test eax eax +
jz loc_1004CB5  +
mov edi [ebx+14h] +
mov eax [ebx+10h] +
lea ecx [ebx+10h] +
mov [ebp+var_14] edi +
mov [ebp+var_8] ecx +
mov [ebp+var_18] eax +
cmp edi 8000h +
jnz loc_1004B69  +
jmp loc_1004CA5  +
mov eax [ebp+var_18] +
mov ecx edx +
cmp edi 20h +
jb loc_1004C28  +
lea edx [edi-1] +
test edx edi +
jnz loc_1004C28  +
lea eax [ebx+28h] +
push eax  +
mov eax [ebx+0F4h] +
lea ecx ds:0[edi*8] +
push ecx  +
call sub_100462C  +
mov esi eax +
mov [ebp+Value] esi +
test esi esi +
jz loc_1004CA5  +
mov edx [ebp+var_18] +
lea ebx ds:0[edi*4] +
push ebx  +
push edx  +
push esi  +
call memcpy  +
mov eax [ebp+var_4] +
mov [ebx+esi] eax +
lea eax [edi-1] +
lea ecx ds:0[eax*4] +
push ecx  +
lea edx [ebx+esi+4] +
push 0  +
push edx  +
call memset  +
mov ecx [ebp+var_8] +
lea eax [edi+1] +
add esp 18h +
mov [ebp+var_20] esi +
mov [ebp+var_1C] eax +
mov [ebp+var_10] ecx +
mov eax [ebp+var_18] +
mov edx [ebp+var_14] +
mov ebx [ebp+var_20] +
mov ecx [ebp+var_1C] +
cmp byte_100601C 0 +
mov esi [ebp+var_10] +
jle loc_1004C00  +
cmpxchg8b qword ptr [esi]  +
jmp loc_1004C03  +
cmpxchg8b qword ptr [esi]  +
setz al  +
test al al +
jnz loc_1004D23  +
mov eax [ebp+arg_0] +
mov edx [ebp+arg_0] +
mov esi [ebp+Value] +
add eax 28h +
push eax  +
mov eax [edx+0F4h] +
call sub_10046CD  +
jmp loc_1004C86  +
mov [ebp+var_20] eax +
lea edx [edi+1] +
lea eax [eax+edi*4] +
mov [ebp+var_1C] edx +
mov [ebp+var_10] eax +
mov eax 0 +
mov edx [ebp+var_4] +
cmp byte_100601C 0 +
mov ebx [ebp+var_10] +
jle loc_1004C51  +
cmpxchg [ebx] edx +
jmp loc_1004C54  +
cmpxchg [ebx] edx +
setz al  +
test al al +
jnz loc_1004D56  +
mov [ebp+var_10] ecx +
mov eax [ebp+var_18] +
mov edx [ebp+var_14] +
mov ebx [ebp+var_20] +
mov ecx [ebp+var_1C] +
cmp byte_100601C 0 +
mov esi [ebp+var_10] +
jle loc_1004C80  +
cmpxchg8b qword ptr [esi]  +
jmp loc_1004C83  +
cmpxchg8b qword ptr [esi]  +
setz al  +
mov ecx [ebp+arg_0] +
mov edi [ecx+14h] +
mov edx [ebp+var_8] +
mov eax [edx] +
mov [ebp+var_14] edi +
mov [ebp+var_18] eax +
mov ebx ecx +
cmp edi 8000h +
jnz loc_1004B64  +
mov ecx [ebp+var_4] +
mov edx [ecx+4] +
push edx  +
call ds:CloseHandle  +
mov esi [ebp+var_4] +
mov eax [esi] +
push eax  +
call ds:CloseHandle  +
lea eax [ebx+28h] +
push eax  +
mov eax [ebx+0F4h] +
call sub_10046CD  +
mov [ebp+var_1C] 8000h +
lea edi [ebx+10h] +
mov eax [edi] +
mov ecx [edi+4] +
mov [ebp+var_18] eax +
mov [ebp+var_14] ecx +
mov [ebp+var_20] eax +
cmp ecx 8000h +
jz loc_1004D18  +
mov [ebp+arg_0] edi +
mov eax [ebp+var_18] +
mov edx [ebp+var_14] +
mov ebx [ebp+var_20] +
mov ecx [ebp+var_1C] +
cmp byte_100601C 0 +
mov esi [ebp+arg_0] +
jle loc_1004D0E  +
cmpxchg8b qword ptr [esi]  +
jmp loc_1004D11  +
cmpxchg8b qword ptr [esi]  +
setz al  +
test al al +
jz loc_1004CD7  +
pop edi  +
pop esi  +
xor eax eax +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 4  +
mov esi [ebp+var_4] +
xor ecx ecx +
lea eax [ecx+1] +
mov [esi+8] edi +
cmp edi eax +
jz loc_1004D39  +
inc ecx  +
rol eax 1 +
cmp edi eax +
jnz loc_1004D32  +
mov edx [ebp+Value] +
mov eax [ebp+arg_0] +
push edx  +
lea ecx [eax+ecx*4+34h] +
push ecx  +
call ds:InterlockedExchange  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 4  +
mov edx [ebp+var_4] +
mov [edx+8] edi +
mov [ebp+arg_0] ecx +
mov eax [ebp+var_18] +
mov edx [ebp+var_14] +
mov ebx [ebp+var_20] +
mov ecx [ebp+var_1C] +
cmp byte_100601C 0 +
mov esi [ebp+arg_0] +
jle loc_1004D7D  +
cmpxchg8b qword ptr [esi]  +
jmp loc_1004D80  +
cmpxchg8b qword ptr [esi]  +
setz al  +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 4  +
***
retn   +
***
