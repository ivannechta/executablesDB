sbb [ecx+eax] cl +
dec ecx  +
adc [ecx+4790421Ah] dh +
lods   +
retf 1C42h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
mul  [ebp+arg_8] +
test edx edx +
ja loc_1003E59  +
cmp eax 0FFFFFFFFh +
jbe loc_1003E60  +
mov eax 80070057h +
jmp loc_1003E67  +
mov ecx [ebp+arg_0] +
mov [ecx] eax +
xor eax eax +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push [ebp+arg_4]  +
and [ebp+cb] 0 +
push [ebp+arg_0]  +
lea eax [ebp+cb] +
push eax  +
call sub_1003E45  +
test eax eax +
jge loc_1003E91  +
xor eax eax +
jmp locret_1003E9A  +
push [ebp+cb]  +
call ds:CoTaskMemAlloc  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push [ebp+arg_8]  +
and [ebp+cb] 0 +
push [ebp+arg_4]  +
lea eax [ebp+cb] +
push eax  +
call sub_1003E45  +
test eax eax +
jge loc_1003EC4  +
xor eax eax +
jmp locret_1003ED0  +
push [ebp+cb]  +
push [ebp+pv]  +
call ds:CoTaskMemRealloc  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_0]  +
call ds:malloc  +
pop ecx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_0]  +
call ds:__imp_free  +
pop ecx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+lpString]  +
call ds:lstrlenW  +
lea eax [eax+eax+2] +
push eax  +
push [ebp+lpString]  +
mov eax [ebp+arg_4] +
add eax eax +
push eax  +
push [ebp+arg_0]  +
call memcpy_s  +
add esp 10h +
neg eax  +
sbb eax eax +
inc eax  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov [ebp+8] eax +
push offset dword_1012378  +
lea eax [ebp+8] +
push eax  +
call _CxxThrowException  +
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_1003F95  +
cmp eax 0Ch +
jz loc_1003F8E  +
cmp eax 16h +
jz loc_1003F87  +
cmp eax 22h +
jz loc_1003F87  +
cmp eax 50h +
jz loc_1003F95  +
push 80004005h  +
call loc_1003F3E  +
push 80070057h  +
jmp loc_1003F82  +
push 8007000Eh  +
jmp loc_1003F82  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call memcpy_s  +
add esp 10h +
push eax  +
call sub_1003F5D  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call wcsncpy_s  +
add esp 10h +
push eax  +
call sub_1003F5D  +
pop ebp  +
retn   +
***
mov edi edi +
push edi  +
mov edx ecx +
push 6  +
pop ecx  +
xor eax eax +
mov edi edx +
stos   +
mov eax edx +
pop edi  +
retn   +
***
call __SEH_prolog4  +
and [ebp+ms_exc.disabled] 0 +
push ecx  +
call ds:InitializeCriticalSection  +
and [ebp+var_1C] 0 +
jmp loc_100403C  +
mov eax [ebp-14h] +
mov eax [eax] +
mov eax [eax] +
xor ecx ecx +
cmp eax 0C0000017h +
setz cl  +
mov eax ecx +
retn   +
mov esp [ebp-18h] +
mov dword ptr [ebp-1Ch] 8007000Eh +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov eax [ebp+var_1C] +
call __SEH_epilog4  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_1004001  +
test eax eax +
jl loc_1004063  +
mov byte ptr [esi+18h] 1 +
pop esi  +
retn   +
***
call ds:__imp_GetLastError  +
test eax eax +
jle locret_100407E  +
and eax 0FFFFh +
or eax 80070000h +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jle loc_100409A  +
and eax 0FFFFh +
or eax 80070000h +
pop ebp  +
retn 4  +
***
push dword ptr [ecx]  +
call ds:SysFreeString  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_4] +
test ebx ebx +
jz loc_10040FF  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
lea edi [ebx-1] +
xor eax eax +
test edi edi +
jbe loc_10040F7  +
mov edx [ebp+arg_8] +
movzx ecx word ptr [edx] +
test cx cx +
jz loc_10040F7  +
mov [esi+eax*2] cx +
cmp word ptr [edx] 27h +
jnz loc_10040F0  +
lea ecx [ebx-2] +
cmp eax ecx +
jnb loc_10040F0  +
push 27h  +
inc eax  +
pop ecx  +
mov [esi+eax*2] cx +
inc edx  +
inc edx  +
inc eax  +
cmp eax edi +
jb loc_10040CF  +
xor ecx ecx +
pop edi  +
mov [esi+eax*2] cx +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
cmp dword ptr [esi+4] 0 +
jnz loc_100415B  +
cmp dword ptr [esi+8] 0 +
jnz loc_100415B  +
push offset ModuleName  +
call ds:GetModuleHandleW  +
test eax eax +
jz loc_100413D  +
push offset ProcName  +
push eax  +
call ds:__imp_GetProcAddress  +
mov [esi+4] eax +
jmp loc_100415B  +
push offset LibFileName  +
call ds:LoadLibraryW  +
test eax eax +
jz loc_100415B  +
push offset aRegdeletekeyw  +
push eax  +
call ds:__imp_GetProcAddress  +
mov [esi+8] eax +
mov eax [esi+4] +
test eax eax +
jz loc_100416F  +
push 0  +
push 0  +
push [ebp+arg_0]  +
push dword ptr [esi]  +
call eax  +
jmp loc_1004185  +
mov eax [esi+8] +
test eax eax +
jz loc_100417F  +
push [ebp+arg_0]  +
push dword ptr [esi]  +
call eax  +
jmp loc_1004185  +
call ds:__imp_GetLastError  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov ecx [esi] +
xor eax eax +
test ecx ecx +
jz loc_10041A6  +
push ecx  +
call ds:RegCloseKey  +
and dword ptr [esi] 0 +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
and [ebp+phkResult] 0 +
lea eax [ebp+dwDisposition] +
push eax  +
lea eax [ebp+phkResult] +
push eax  +
push [ebp+dwDisposition]  +
mov esi ecx +
push [ebp+samDesired]  +
push [ebp+dwOptions]  +
push [ebp+lpClass]  +
push 0  +
push [ebp+lpSubKey]  +
push [ebp+hKey]  +
call ds:RegCreateKeyExW  +
mov ecx [ebp+arg_18] +
test ecx ecx +
jz loc_10041E8  +
mov edx [ebp+dwDisposition] +
mov [ecx] edx +
test eax eax +
jnz loc_10041F8  +
mov ecx esi +
call sub_100418F  +
mov ecx [ebp+phkResult] +
mov [esi] ecx +
pop esi  +
leave   +
retn 1Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+phkResult] 0 +
push esi  +
lea eax [ebp+phkResult] +
push eax  +
push [ebp+samDesired]  +
mov esi ecx +
push 0  +
push [ebp+lpSubKey]  +
push [ebp+hKey]  +
call ds:RegOpenKeyExW  +
test eax eax +
jnz loc_1004234  +
mov ecx esi +
call sub_100418F  +
mov ecx [ebp+phkResult] +
mov [esi] ecx +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 4  +
lea eax [ebp+Data] +
push eax  +
push 4  +
push 0  +
push [ebp+lpValueName]  +
push dword ptr [ecx]  +
call ds:RegSetValueExW  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+lpData] 0 +
push esi  +
mov esi ecx +
jnz loc_1004279  +
push 80004005h  +
call loc_1003F3E  +
push [ebp+lpData]  +
call ds:lstrlenW  +
lea eax [eax+eax+2] +
push eax  +
push [ebp+lpData]  +
push [ebp+dwType]  +
push 0  +
push [ebp+lpValueName]  +
push dword ptr [esi]  +
call ds:RegSetValueExW  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+lpData] +
push edi  +
mov ebx ecx +
test esi esi +
jnz loc_10042BF  +
push 80004005h  +
call loc_1003F3E  +
xor edi edi +
push esi  +
call ds:lstrlenW  +
inc eax  +
lea ecx [eax+eax] +
add esi ecx +
add edi ecx +
cmp eax 1 +
jnz loc_10042C1  +
push edi  +
push [ebp+lpData]  +
push 7  +
push 0  +
push [ebp+lpValueName]  +
push dword ptr [ebx]  +
call ds:RegSetValueExW  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+lpString2]  +
push [ebp+lpString1]  +
call ds:lstrcmpiW  +
neg eax  +
sbb al al +
inc al  +
pop ebp  +
retn 8  +
***
mov eax [ecx] +
push 27h  +
pop ecx  +
cmp cx [eax] +
jnz loc_1004331  +
push eax  +
call ds:CharNextW  +
push 27h  +
pop ecx  +
cmp cx [eax] +
jz loc_1004331  +
xor eax eax +
inc eax  +
retn   +
xor eax eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
cmp eax 64h +
push esi  +
mov esi ecx +
jge loc_100434E  +
mov eax 3E8h +
and dword ptr [esi] 0 +
push 2  +
push eax  +
mov [esi+4] eax +
call sub_1003E70  +
mov [esi+8] eax +
test eax eax +
jz loc_1004368  +
xor ecx ecx +
mov [eax] cx +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
adc eax offset CoTaskMemFree +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_4] +
push esi  +
mov esi ecx +
mov eax [esi] +
lea ecx [eax+ebx+1] +
cmp ecx eax +
push edi  +
jle loc_1004408  +
cmp ecx ebx +
jle loc_1004408  +
mov edi [esi+4] +
cmp ecx edi +
jl loc_10043C8  +
cmp edi 3FFFFFFFh +
jg loc_1004408  +
add edi edi +
cmp ecx edi +
jge loc_10043A5  +
push 2  +
push edi  +
push dword ptr [esi+8]  +
call sub_1003EA3  +
test eax eax +
jz loc_1004408  +
mov [esi+8] eax +
mov [esi+4] edi +
mov eax [esi] +
test eax eax +
jl loc_1004408  +
mov edx [esi+4] +
cmp eax edx +
jge loc_1004408  +
mov ecx edx +
sub ecx eax +
cmp ecx edx +
jg loc_1004408  +
lea edx [ebx+ebx] +
push edx  +
push [ebp+arg_0]  +
add ecx ecx +
push ecx  +
mov ecx [esi+8] +
lea eax [ecx+eax*2] +
push eax  +
call sub_1003F9E  +
add [esi] ebx +
mov eax [esi] +
mov ecx [esi+8] +
xor edx edx +
mov [ecx+eax*2] dx +
xor eax eax +
add esp 10h +
inc eax  +
jmp loc_100440A  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
add bh bh +
adc eax offset DeleteCriticalSection +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
test byte ptr dword_1015234 1 +
jnz loc_1004490  +
or dword_1015234 1 +
push 8  +
pop eax  +
mov word_1015218 ax +
mov eax 4008h +
push 13h  +
mov word_1015220 ax +
pop eax  +
push 11h  +
mov word_1015228 ax +
pop eax  +
mov lpString2 offset aS +
mov dword_101521C offset aM +
mov dword_1015224 offset aD_0 +
mov dword_101522C offset aB +
mov word_1015230 ax +
push esi  +
xor esi esi +
push lpString2[esi*8]  +
push [ebp+lpString1]  +
call ds:lstrcmpiW  +
test eax eax +
jz loc_10044B4  +
inc esi  +
cmp esi 4 +
jb loc_1004493  +
xor eax eax +
pop esi  +
pop ebp  +
retn 8  +
mov ax word_1015218[esi*8] +
mov ecx [ebp+arg_4] +
mov [ecx] ax +
xor eax eax +
inc eax  +
jmp loc_10044AF  +
***
mov edi edi +
push ebp  +
mov ebp esp +
movzx eax [ebp+arg_0] +
cmp eax 30h +
jl loc_1004500  +
cmp eax 39h +
jle loc_10044FB  +
cmp eax 40h +
jle loc_1004500  +
cmp eax 46h +
jle loc_10044F6  +
lea ecx [eax-61h] +
cmp ecx 5 +
ja loc_1004500  +
add eax 0FFFFFFA9h +
jmp loc_1004502  +
add eax 0FFFFFFC9h +
jmp loc_1004502  +
add eax 0FFFFFFD0h +
jmp loc_1004502  +
xor al al +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
xor esi esi +
push ds:off_1001678[esi*8]  +
push [ebp+lpString1]  +
call ds:lstrcmpiW  +
test eax eax +
jz loc_1004534  +
inc esi  +
cmp esi 0Eh +
jb loc_1004513  +
xor eax eax +
pop esi  +
pop ebp  +
retn 4  +
mov eax ds:dword_100167C[esi*8] +
jmp loc_100452F  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+lpsz] +
push esi  +
xor esi esi +
test eax eax +
jnz loc_1004560  +
jmp loc_100456E  +
cmp cx [ebp+arg_4] +
jz loc_100456A  +
push eax  +
call ds:CharNextW  +
movzx ecx word ptr [eax] +
test cx cx +
jnz loc_1004553  +
jmp loc_100456C  +
mov esi eax +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
movzx eax [ebp+arg_0] +
cmp eax 9 +
jl loc_100459A  +
cmp eax 0Ah +
jle loc_1004595  +
cmp eax 0Dh +
jz loc_1004595  +
cmp eax 20h +
jnz loc_100459A  +
xor eax eax +
inc eax  +
jmp loc_100459C  +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
jmp loc_10045B8  +
push dword ptr [esi]  +
call ds:CharNextW  +
mov [esi] eax +
mov ecx esi +
mov eax [esi] +
movzx eax word ptr [eax] +
push eax  +
call sub_1004578  +
test eax eax +
jnz loc_10045AC  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
call sub_10045A5  +
mov eax [esi] +
movzx ecx word ptr [eax] +
xor edx edx +
cmp dx cx +
jnz loc_10045F2  +
mov eax 80020009h +
jmp loc_10046D2  +
push ebx  +
push edi  +
mov edi [ebp+arg_0] +
push 27h  +
pop edx  +
mov [ebp+var_4] edi +
cmp dx cx +
jnz loc_1004680  +
mov ebx ds:CharNextW +
push eax  +
call ebx  +
mov [esi] eax +
jmp loc_1004663  +
mov ecx esi +
call sub_1004314  +
test eax eax +
jnz loc_100466A  +
mov eax [esi] +
push 27h  +
pop ecx  +
cmp cx [eax] +
jnz loc_1004629  +
push eax  +
call ebx  +
mov [esi] eax +
mov eax [esi] +
push eax  +
mov [ebp+arg_0] eax +
call ebx  +
mov edx [ebp+var_4] +
mov [esi] eax +
sub eax [ebp+arg_0] +
add edx 2000h +
sar eax 1 +
lea ecx [edi+eax*2+2] +
cmp ecx edx +
jnb loc_10046D7  +
test eax eax +
jle loc_1004661  +
mov ecx [ebp+arg_0] +
mov dx [ecx] +
mov [edi] dx +
inc edi  +
inc edi  +
inc ecx  +
inc ecx  +
dec eax  +
jnz loc_1004654  +
mov eax [esi] +
xor ecx ecx +
cmp cx [eax] +
jnz loc_100460F  +
mov eax [esi] +
xor ecx ecx +
cmp cx [eax] +
jz loc_10046D7  +
xor eax eax +
mov [edi] ax +
push dword ptr [esi]  +
call ebx  +
mov [esi] eax +
jmp loc_10046CE  +
mov ebx [esi] +
movzx eax word ptr [ebx] +
push eax  +
mov ecx esi +
call sub_1004578  +
test eax eax +
jnz loc_10046C9  +
push ebx  +
call ds:CharNextW  +
mov edx [ebp+var_4] +
mov [esi] eax +
sub eax ebx +
sar eax 1 +
lea ecx [edi+eax*2+2] +
add edx 2000h +
cmp ecx edx +
jnb loc_10046D7  +
test eax eax +
jle loc_10046C0  +
mov cx [ebx] +
mov [edi] cx +
inc edi  +
inc edi  +
inc ebx  +
inc ebx  +
dec eax  +
jnz loc_10046B3  +
mov eax [esi] +
xor ecx ecx +
cmp cx [eax] +
jnz loc_1004680  +
xor eax eax +
mov [edi] ax +
xor eax eax +
pop edi  +
pop ebx  +
pop esi  +
leave   +
retn 4  +
mov eax 80020009h +
jmp loc_10046D0  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi offset off_100152C +
push dword ptr [esi]  +
push [ebp+lpString1]  +
call ds:lstrcmpiW  +
test eax eax +
jz loc_1004710  +
add esi 4 +
cmp esi offset dword_100155C +
jl loc_10046EE  +
xor eax eax +
inc eax  +
pop esi  +
pop ebp  +
retn 4  +
xor eax eax +
jmp loc_100470B  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
xor eax eax +
push eax  +
push eax  +
push eax  +
push eax  +
push eax  +
push eax  +
push eax  +
lea ecx [ebp+cSubKeys] +
push ecx  +
push eax  +
push eax  +
push eax  +
push [ebp+hKey]  +
mov [ebp+cSubKeys] eax +
call ds:RegQueryInfoKeyW  +
test eax eax +
jz loc_1004743  +
xor eax eax +
jmp locret_100474C  +
xor eax eax +
cmp eax [ebp+cSubKeys] +
sbb eax eax +
neg eax  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax 2004h +
call __alloca_probe  +
mov eax dword_1015184 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
mov esi [ebp+arg_0] +
cmp word ptr [esi] 3Dh +
push edi  +
mov edi ecx +
jnz loc_10047AA  +
push esi  +
call sub_10045CE  +
test eax eax +
jl loc_10047AC  +
mov ecx edi +
call sub_10045A5  +
lea eax [ebp+var_2004] +
push eax  +
mov ecx edi +
call sub_10045CE  +
test eax eax +
jl loc_10047AC  +
push esi  +
mov ecx edi +
call sub_10045CE  +
test eax eax +
jl loc_10047AC  +
xor eax eax +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_1010988  +
leave   +
retn 4  +
***
mov edi edi +
push esi  +
push edi  +
mov edx ecx +
and dword ptr [edx] 0 +
lea esi [edx+4] +
push 6  +
pop ecx  +
xor eax eax +
mov edi esi +
stos   +
mov [esi+18h] al +
pop edi  +
mov eax edx +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
jmp loc_10047FE  +
mov eax [esi] +
mov ecx [eax] +
push eax  +
mov [esi] ecx +
call sub_1003EF1  +
cmp dword ptr [esi] 0 +
jnz loc_10047F2  +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi] +
push edi  +
mov edi ds:__imp_free +
test eax eax +
jz loc_1004823  +
push eax  +
call edi  +
and dword ptr [esi] 0 +
pop ecx  +
mov eax [esi+4] +
test eax eax +
jz loc_1004832  +
push eax  +
call edi  +
and dword ptr [esi+4] 0 +
pop ecx  +
and dword ptr [esi+8] 0 +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
test eax eax +
jl loc_1004858  +
cmp eax [ecx+8] +
jge loc_1004858  +
mov ecx [ecx] +
lea eax [ecx+eax*4] +
pop ebp  +
retn 4  +
***
push 0  +
push 0  +
push 1  +
push 0C000008Ch  +
call ds:RaiseException  +
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
test eax eax +
jl loc_100488A  +
cmp eax [ecx+8] +
jge loc_100488A  +
mov ecx [ecx+4] +
lea eax [ecx+eax*4] +
pop ebp  +
retn 4  +
***
push 0  +
push 0  +
push 1  +
push 0C000008Ch  +
call ds:RaiseException  +
lea eax [ecx+4] +
cmp byte ptr [eax+18h] 0 +
jz locret_10048B5  +
push eax  +
mov byte ptr [eax+18h] 0 +
call ds:DeleteCriticalSection  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov esi ecx +
xor edi edi +
cmp [esi+8] edi +
jle loc_10048EC  +
mov eax [ebp+arg_0] +
push dword ptr [eax]  +
mov eax [esi] +
push dword ptr [eax+edi*4]  +
call sub_10042F4  +
test al al +
jnz loc_10048F5  +
inc edi  +
cmp edi [esi+8] +
jl loc_10048D3  +
or eax 0FFFFFFFFh +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
mov eax edi +
jmp loc_10048EF  +
***
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+10h] +
test eax eax +
jnz loc_100491E  +
mov eax 80004003h +
jmp loc_1004926  +
and dword ptr [eax] 0 +
mov eax 80040110h +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_1003ED9  +
test eax eax +
jnz loc_100494D  +
push 8007000Eh  +
call loc_1003F3E  +
mov [esi] eax +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_100CF7A  +
mov dword ptr [esi] offset off_1001830 +
mov ecx dword_1015200 +
mov eax [ecx] +
call dword ptr [eax+4]  +
mov eax esi +
pop esi  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov edx [eax] +
mov ecx [ebp+arg_4] +
cmp edx [ecx] +
jnz loc_10049AD  +
mov edx [eax+4] +
cmp edx [ecx+4] +
jnz loc_10049AD  +
mov edx [eax+8] +
cmp edx [ecx+8] +
jnz loc_10049AD  +
mov eax [eax+0Ch] +
cmp eax [ecx+0Ch] +
jnz loc_10049AD  +
xor eax eax +
inc eax  +
jmp loc_10049AF  +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
cmp dword ptr [eax] 0 +
jnz loc_10049E2  +
cmp dword ptr [eax+4] 0 +
jnz loc_10049E2  +
cmp dword ptr [eax+8] 0C0h +
jnz loc_10049E2  +
cmp dword ptr [eax+0Ch] 46000000h +
jnz loc_10049E2  +
xor eax eax +
inc eax  +
jmp loc_10049E4  +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
push ebx  +
push esi  +
push edi  +
jz loc_1004A82  +
mov esi [ebp+arg_4] +
test esi esi +
jz loc_1004A82  +
mov ebx [ebp+arg_C] +
test ebx ebx +
jnz loc_1004A14  +
mov eax 80004003h +
jmp loc_1004A87  +
push [ebp+arg_8]  +
and dword ptr [ebx] 0 +
call sub_10049B8  +
test eax eax +
jz loc_1004A74  +
mov esi [esi+4] +
add esi [ebp+arg_0] +
mov eax [esi] +
push esi  +
call dword ptr [eax+4]  +
mov [ebx] esi +
xor eax eax +
jmp loc_1004A87  +
mov eax [esi] +
xor ecx ecx +
test eax eax +
setz cl  +
mov [ebp+arg_4] ecx +
test ecx ecx +
jnz loc_1004A52  +
push [ebp+arg_8]  +
push eax  +
call sub_100497F  +
test eax eax +
jz loc_1004A71  +
cmp edi 1 +
jz loc_1004A23  +
push dword ptr [esi+4]  +
push ebx  +
push [ebp+arg_8]  +
push [ebp+arg_0]  +
call edi  +
test eax eax +
jz loc_1004A87  +
cmp [ebp+arg_4] 0 +
jnz loc_1004A71  +
test eax eax +
jl loc_1004A87  +
add esi 0Ch +
mov edi [esi+8] +
test edi edi +
jnz loc_1004A35  +
mov eax 80004002h +
jmp loc_1004A87  +
mov eax 80070057h +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_1001830 +
mov dword ptr [esi+4] 0C0000001h +
mov ecx dword_1015200 +
mov eax [ecx] +
call dword ptr [eax+8]  +
mov ecx esi +
pop esi  +
jmp loc_100CC3E  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+8] +
dec dword ptr [ecx+4]  +
push esi  +
mov esi [ecx+4] +
jnz loc_1004AD9  +
test ecx ecx +
jz loc_1004AD9  +
mov eax [ecx] +
push 1  +
call dword ptr [eax+28h]  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_100E325  +
mov dword ptr [esi] offset off_10018A8 +
mov ecx dword_1015200 +
mov eax [ecx] +
call dword ptr [eax+4]  +
mov eax esi +
pop esi  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_10018A8 +
mov dword ptr [esi+4] 0C0000001h +
mov ecx dword_1015200 +
mov eax [ecx] +
call dword ptr [eax+8]  +
mov ecx esi +
pop esi  +
jmp loc_100DFFD  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
inc dword ptr [eax+4]  +
mov eax [eax+4] +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1004A93  +
test byte ptr [ebp+8] 1 +
jz loc_1004B7D  +
push esi  +
call sub_101044F  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1004B0B  +
test byte ptr [ebp+8] 1 +
jz loc_1004BA3  +
push esi  +
call sub_101044F  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
lea eax [ebp+arg_4] +
push [ebp+arg_0]  +
push eax  +
call sub_1003E45  +
test eax eax +
jge loc_1004BCD  +
push eax  +
call loc_1003F3E  +
mov eax [ebp+arg_4] +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 224h +
mov eax dword_1015184 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
push edi  +
mov eax ecx +
mov ecx [ebp+lpSubKey] +
push 2001Fh  +
push ecx  +
push dword ptr [eax]  +
xor esi esi +
mov [ebp+var_21C] ecx +
lea ecx [ebp+var_214] +
mov [ebp+var_218] eax +
mov [ebp+var_214] esi +
mov [ebp+var_210] esi +
mov [ebp+var_20C] esi +
call sub_1004202  +
mov edi eax +
cmp edi esi +
jz loc_1004C55  +
lea ecx [ebp+var_214] +
call sub_100418F  +
mov eax edi +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_1010988  +
leave   +
retn 4  +
mov edi ds:RegEnumKeyExW +
jmp loc_1004C73  +
lea eax [ebp+SubKey] +
push eax  +
lea ecx [ebp+var_214] +
call sub_1004BE3  +
cmp eax esi +
jnz loc_1004CBE  +
lea eax [ebp+var_224] +
push eax  +
push esi  +
push esi  +
push esi  +
lea eax [ebp+var_208] +
push eax  +
lea eax [ebp+SubKey] +
push eax  +
push esi  +
push [ebp+var_214]  +
mov [ebp+var_208] 100h +
call edi  +
test eax eax +
jz loc_1004C5D  +
lea ecx [ebp+var_214] +
call sub_100418F  +
push [ebp+var_21C]  +
mov ecx [ebp+var_218] +
call sub_1004109  +
lea ecx [ebp+var_214] +
mov esi eax +
call sub_100418F  +
mov eax esi +
jmp loc_1004C45  +
***
mov edi edi +
push esi  +
push edi  +
mov esi ecx +
xor edi edi +
cmp [esi+8] edi +
jle loc_1004D0A  +
push edi  +
mov ecx esi +
call loc_100483E  +
push dword ptr [eax]  +
call sub_101044F  +
pop ecx  +
push edi  +
mov ecx esi +
call loc_100486F  +
push dword ptr [eax]  +
call sub_101044F  +
inc edi  +
cmp edi [esi+8] +
pop ecx  +
jl loc_1004CE4  +
mov ecx esi +
call sub_100480A  +
pop edi  +
xor eax eax +
pop esi  +
retn   +
***
call __EH_prolog3  +
mov esi ecx +
xor eax eax +
cmp [ebp+8] eax +
jz loc_1004D56  +
mov [ebp-10h] eax +
push dword ptr [ebp+8]  +
mov [ebp-4] eax +
call ds:lstrlenW  +
push eax  +
push dword ptr [ebp+8]  +
mov ecx esi +
call sub_1004383  +
lea ecx [ebp-10h] +
mov esi eax +
call sub_10047EB  +
mov eax esi +
call __EH_epilog3  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
lea edi [esi+10h] +
push edi  +
call ds:EnterCriticalSection  +
lea ecx [esi+4] +
call sub_1004CD7  +
push edi  +
mov esi eax +
call ds:LeaveCriticalSection  +
pop edi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_C] +
mov eax 80004003h +
test esi esi +
jz loc_1004DD0  +
and dword ptr [esi] 0 +
cmp [ebp+arg_4] 0 +
jz loc_1004DC3  +
push [ebp+arg_8]  +
call sub_10049B8  +
test eax eax +
jnz loc_1004DC3  +
mov eax 80040110h +
jmp loc_1004DD0  +
mov eax [ebp+arg_0] +
push esi  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
call dword ptr [eax+24h]  +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_4] 0 +
mov ecx dword_1015200 +
mov eax [ecx] +
jz loc_1004DF2  +
call dword ptr [eax+4]  +
jmp loc_1004DF5  +
call dword ptr [eax+8]  +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
test [ebp+arg_0] 2 +
push esi  +
mov esi ecx +
jz loc_1004E33  +
push edi  +
push offset loc_10040A3  +
lea edi [esi-4] +
push dword ptr [edi]  +
push 0Ch  +
push esi  +
call ??_M@YGXPAXIHP6EX0@Z@Z  +
test [ebp+arg_0] 1 +
jz loc_1004E2E  +
push edi  +
call sub_101044F  +
pop ecx  +
mov eax edi +
pop edi  +
jmp loc_1004E4A  +
push dword ptr [esi]  +
call ds:SysFreeString  +
test [ebp+arg_0] 1 +
jz loc_1004E48  +
push esi  +
call sub_101044F  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi+30h] +
push edi  +
mov edi ds:CloseHandle +
test eax eax +
jz loc_1004E6E  +
push eax  +
call edi  +
and dword ptr [esi+30h] 0 +
mov eax [esi+34h] +
test eax eax +
jz loc_1004E7C  +
push eax  +
call edi  +
and dword ptr [esi+34h] 0 +
push dword ptr [esi+3Ch]  +
mov edi ds:SysFreeString +
call edi  +
push dword ptr [esi+38h]  +
call edi  +
push dword ptr [esi+28h]  +
call edi  +
pop edi  +
lea ecx [esi+8] +
pop esi  +
jmp sub_10048A1  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push offset off_1001864  +
push ecx  +
call sub_10049ED  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push offset off_10018D4  +
push ecx  +
call sub_10049ED  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_10048C3  +
cmp eax 0FFFFFFFFh +
jnz loc_1004F01  +
xor eax eax +
jmp loc_1004F0B  +
push eax  +
mov ecx esi +
call loc_100486F  +
mov eax [eax] +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
mov eax [ecx] +
shl edx 2 +
add eax edx +
jz loc_1004F58  +
push esi  +
mov esi [ebp+arg_4] +
mov esi [esi] +
mov [eax] esi +
pop esi  +
mov eax [ecx+4] +
add eax edx +
jz loc_1004F66  +
mov ecx [ebp+arg_8] +
mov ecx [ecx] +
mov [eax] ecx +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 400h +
push esi  +
mov esi ecx +
jbe loc_1004F8A  +
push [ebp+arg_0]  +
call sub_100492F  +
jmp loc_1004F8F  +
lea eax [esi+4] +
mov [esi] eax +
mov eax [esi] +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 100h +
push esi  +
mov esi ecx +
jbe loc_1004FB6  +
push [ebp+arg_0]  +
call sub_100492F  +
jmp loc_1004FBB  +
lea eax [esi+4] +
mov [esi] eax +
mov eax [esi] +
pop esi  +
pop ebp  +
retn 4  +
***
mov eax ecx +
lea ecx [eax+4] +
mov dword ptr [ecx] 0C0000001h +
mov dword ptr [eax] offset off_1001908 +
jmp sub_10048A1  +
***
call __EH_prolog3_catch  +
mov eax [ebp+10h] +
xor esi esi +
cmp eax esi +
jnz loc_1004FFE  +
mov eax 80004003h +
jmp loc_1005060  +
push 28h  +
mov [eax] esi +
mov dword ptr [ebp-14h] 8007000Eh +
mov [ebp-18h] esi +
mov [ebp-4] esi +
call loc_10104B1  +
pop ecx  +
cmp eax esi +
jz loc_1005025  +
push dword ptr [ebp+8]  +
mov ecx eax +
call sub_1004959  +
mov esi eax +
or dword ptr [ebp-4] 0FFFFFFFFh +
jmp loc_1005038  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov eax offset loc_1005035 +
retn   +
mov esi [ebp-18h] +
test esi esi +
jz loc_100505D  +
push dword ptr [ebp+10h]  +
inc dword ptr [esi+4]  +
push dword ptr [ebp+0Ch]  +
dec dword ptr [esi+4]  +
mov eax [esi] +
push esi  +
call dword ptr [eax]  +
mov [ebp-14h] eax +
test eax eax +
jz loc_100505D  +
mov eax [esi] +
push 1  +
mov ecx esi +
call dword ptr [eax+28h]  +
mov eax [ebp-14h] +
call __EH_epilog3  +
retn 0Ch  +
***
call __EH_prolog3_catch  +
mov eax [ebp+10h] +
xor esi esi +
cmp eax esi +
jnz loc_1005089  +
mov eax 80004003h +
jmp loc_10050EB  +
push 20h  +
mov [eax] esi +
mov dword ptr [ebp-14h] 8007000Eh +
mov [ebp-18h] esi +
mov [ebp-4] esi +
call loc_10104B1  +
pop ecx  +
cmp eax esi +
jz loc_10050B0  +
push dword ptr [ebp+8]  +
mov ecx eax +
call sub_1004AE5  +
mov esi eax +
or dword ptr [ebp-4] 0FFFFFFFFh +
jmp loc_10050C3  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov eax offset loc_10050C0 +
retn   +
mov esi [ebp-18h] +
test esi esi +
jz loc_10050E8  +
push dword ptr [ebp+10h]  +
inc dword ptr [esi+4]  +
push dword ptr [ebp+0Ch]  +
dec dword ptr [esi+4]  +
mov eax [esi] +
push esi  +
call dword ptr [eax]  +
mov [ebp-14h] eax +
test eax eax +
jz loc_10050E8  +
mov eax [esi] +
push 1  +
mov ecx esi +
call dword ptr [eax+28h]  +
mov eax [ebp-14h] +
call __EH_epilog3  +
retn 0Ch  +
***
mov eax esi +
pop esi  +
retn   +
***
and dword ptr [esi+2Ch] 0 +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_100191C +
mov eax [esi+2Ch] +
test eax eax +
jz loc_100514D  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov dword ptr [esi] offset off_1001908 +
lea ecx [esi+4] +
pop esi  +
jmp sub_10048A1  +
***
mov dword ptr [ecx] offset off_100197C +
mov dword ptr [ecx+4] offset off_1001930 +
mov dword ptr [ecx+8] 0C0000001h +
jmp loc_1004E54  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
test esi esi +
jnz loc_1005190  +
xor eax eax +
jmp loc_10051B3  +
mov eax [ebp+arg_4] +
push edi  +
mov edi [esi] +
and dword ptr [esi] 0 +
test eax eax +
jz loc_10051A6  +
mov ecx [eax] +
push esi  +
push [ebp+arg_8]  +
push eax  +
call dword ptr [ecx]  +
test edi edi +
jz loc_10051B0  +
mov eax [edi] +
push edi  +
call dword ptr [eax+8]  +
mov eax [esi] +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov eax [esi] +
push edi  +
mov edi [ebp+arg_0] +
cmp eax edi +
jz loc_10051D8  +
push eax  +
call ds:SysFreeString  +
mov [esi] edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov eax ecx +
and dword ptr [eax] 0 +
and dword ptr [eax+4] 0 +
or dword ptr [eax+8] 0FFFFFFFFh +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
mov esi ecx +
mov [esi] eax +
test eax eax +
jz loc_100520D  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
push esi  +
add eax 8 +
push eax  +
call ds:InterlockedIncrement  +
mov esi eax +
cmp esi 2 +
jnz loc_100523E  +
mov ecx dword_1015200 +
mov eax [ecx] +
call dword ptr [eax+4]  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
mov eax [ebp+arg_0] +
mov ecx [eax] +
push offset dword_10019EC  +
push eax  +
call dword ptr [ecx]  +
pop ebp  +
retn 8  +
***
adc eax offset LeaveCriticalSection +
mov byte ptr [esi+4] 0 +
pop esi  +
retn   +
***
sub dword ptr [esp+4] 4 +
jmp loc_1005219  +
***
call __EH_prolog3_catch  +
mov ebx ecx +
mov [ebp-18h] ebx +
mov edi [ebp+8] +
mov eax [edi] +
lea ecx [ebp-24h] +
push ecx  +
push edi  +
call dword ptr [eax+0Ch]  +
xor ecx ecx +
cmp eax ecx +
jl loc_100540F  +
mov eax [ebp-24h] +
movzx eax word ptr [eax+2Ch] +
mov esi eax +
mov [ebp-1Ch] ecx +
mov [ebx+18h] eax +
mov [ebx+14h] ecx +
cmp esi ecx +
jz loc_1005363  +
push 0Ch  +
pop edx  +
mul  edx +
mov [ebp-4] ecx +
seto cl  +
neg ecx  +
or ecx eax +
xor eax eax +
add ecx 4 +
setb al  +
neg eax  +
or eax ecx +
push eax  +
call loc_1010520  +
pop ecx  +
mov [ebp-20h] eax +
mov byte ptr [ebp-4] 1 +
test eax eax +
jz loc_100532A  +
push offset loc_10040A3  +
push offset loc_10051E3  +
push esi  +
lea edi [eax+4] +
push 0Ch  +
push edi  +
mov [eax] esi +
call ??_L@YGXPAXIHP6EX0@Z1@Z  +
jmp loc_100532C  +
xor edi edi +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov [ebp-1Ch] edi +
jmp loc_1005342  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov eax offset loc_100533F +
retn   +
mov ebx [ebp-18h] +
cmp dword ptr [ebp-1Ch] 0 +
jnz loc_100535E  +
mov eax [ebp+8] +
push dword ptr [ebp-24h]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4Ch]  +
mov eax 8007000Eh +
jmp loc_1005411  +
mov edi [ebp+8] +
xor ecx ecx +
cmp [ebx+18h] ecx +
mov [ebp-18h] ecx +
jle loc_1005400  +
mov esi [ebp-1Ch] +
add esi 8 +
jmp loc_1005379  +
xor ecx ecx +
mov [esi-4] ecx +
mov [esi] ecx +
mov eax [edi] +
lea ecx [ebp-20h] +
push ecx  +
push dword ptr [ebp-18h]  +
push edi  +
call dword ptr [eax+14h]  +
test eax eax +
jl loc_10053EE  +
xor eax eax +
mov [ebp-14h] eax +
mov ecx [edi] +
push eax  +
push eax  +
push eax  +
lea eax [ebp-14h] +
push eax  +
mov eax [ebp-20h] +
push dword ptr [eax]  +
mov dword ptr [ebp-4] 3 +
push edi  +
call dword ptr [ecx+30h]  +
test eax eax +
jl loc_10053D8  +
mov eax [ebp-14h] +
and dword ptr [ebp-14h] 0 +
lea edi [esi-8] +
push eax  +
mov ecx edi +
call sub_10051BD  +
push dword ptr [edi]  +
call ds:SysStringLen  +
mov edi [ebp+8] +
mov [esi-4] eax +
mov eax [ebp-20h] +
mov eax [eax] +
mov [esi] eax +
push dword ptr [ebp-20h]  +
mov eax [edi] +
push edi  +
call dword ptr [eax+50h]  +
push dword ptr [ebp-14h]  +
or dword ptr [ebp-4] 0FFFFFFFFh +
call ds:SysFreeString  +
inc dword ptr [ebp-18h]  +
mov eax [ebp-18h] +
add esi 0Ch +
cmp eax [ebx+18h] +
jl loc_1005377  +
mov eax [ebp-1Ch] +
push dword ptr [ebp-24h]  +
mov [ebx+14h] eax +
mov eax [edi] +
push edi  +
call dword ptr [eax+4Ch]  +
xor eax eax +
call __EH_epilog3  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+8] +
test esi esi +
jz loc_100544E  +
mov eax [esi+0Ch] +
test eax eax +
jz loc_1005438  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov ecx [esi+14h] +
and dword ptr [esi+0Ch] 0 +
test ecx ecx +
jz loc_100544A  +
push 3  +
call sub_1004E00  +
and dword ptr [esi+14h] 0 +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push offset off_100198C  +
push ecx  +
call sub_10049ED  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+10h]  +
mov ecx [ebp+8] +
push dword ptr [ebp+0Ch]  +
call sub_1005458  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+10h]  +
mov ecx [ebp+8] +
push dword ptr [ebp+0Ch]  +
call sub_1004EA0  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+10h]  +
mov ecx [ebp+8] +
push dword ptr [ebp+0Ch]  +
call sub_1004EBF  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax [ecx] +
push edi  +
test eax eax +
jnz loc_10054F3  +
cmp [ebp+arg_0] eax +
jnz loc_1005543  +
mov al 1 +
jmp loc_1005545  +
mov edi [ebp+arg_0] +
test edi edi +
jz loc_1005543  +
and [ebp+var_4] 0 +
and [ebp+var_8] 0 +
mov ecx [eax] +
push esi  +
lea edx [ebp+var_4] +
push edx  +
mov esi offset dword_10019FC +
push esi  +
push eax  +
call dword ptr [ecx]  +
mov eax [edi] +
lea ecx [ebp+var_8] +
push ecx  +
push esi  +
push edi  +
call dword ptr [eax]  +
mov eax [ebp+var_8] +
cmp [ebp+var_4] eax +
pop esi  +
setz byte ptr [ebp+arg_0+3]  +
test eax eax +
jz loc_1005531  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+var_4] +
test eax eax +
jz loc_100553E  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov al byte ptr [ebp+arg_0+3] +
jmp loc_1005545  +
xor al al +
pop edi  +
leave   +
retn 4  +
***
sub dword ptr [esp+4] 4 +
jmp loc_1005477  +
***
call __EH_prolog3  +
mov [ebp-10h] ecx +
and dword ptr [ebp-4] 0 +
call sub_1004CD7  +
mov ecx [ebp-10h] +
call sub_100480A  +
call __EH_epilog3  +
retn   +
***
call __EH_prolog3  +
mov esi ecx +
mov [ebp-10h] esi +
mov dword ptr [esi] offset off_1001A0C +
push esi  +
mov dword ptr [ebp-4] 1 +
call sub_1004D63  +
lea eax [esi+10h] +
cmp byte ptr [eax+18h] 0 +
jz loc_10055C1  +
push eax  +
mov byte ptr [eax+18h] 0 +
call ds:DeleteCriticalSection  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [esi+4] +
call sub_100555E  +
call __EH_epilog3  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+10h] +
test eax eax +
jz loc_10055E7  +
and dword ptr [eax] 0 +
mov eax 80004001h +
pop ebp  +
retn 0Ch  +
***
xor eax eax +
inc eax  +
retn 4  +
***
xor eax eax +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call ??1_Locimp@locale@std@@MAE@XZ  +
test [ebp+arg_0] 1 +
jz loc_1005624  +
push esi  +
call sub_101044F  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov esi ecx +
lea edi [esi+10h] +
push edi  +
call ds:EnterCriticalSection  +
lea eax [ebp+arg_0] +
push eax  +
lea ecx [esi+4] +
call sub_1004EE8  +
push edi  +
mov esi eax +
call ds:LeaveCriticalSection  +
pop edi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call __EH_prolog3_GS  +
mov edi [ebp+8] +
mov ebx [ebp+0Ch] +
mov esi ecx +
mov [ebp-64h] ebx +
test edi edi +
jz loc_1005796  +
test ebx ebx +
jz loc_1005796  +
and dword ptr [ebx] 0 +
push edi  +
call ds:lstrlenW  +
add eax eax +
push eax  +
lea ecx [ebp-60h] +
call sub_1004339  +
xor ecx ecx +
mov [ebp-4] ecx +
cmp [ebp-58h] ecx +
jnz loc_10056BC  +
push ecx  +
call ds:CoTaskMemFree  +
mov eax 8007000Eh +
jmp loc_100579B  +
mov [esi] edi +
mov [ebp-54h] ecx +
cmp [edi] cx +
jz loc_1005765  +
mov ebx ds:CharNextW +
mov eax [esi] +
cmp word ptr [eax] 25h +
jnz loc_1005741  +
push eax  +
call ebx  +
mov [esi] eax +
cmp word ptr [eax] 25h +
jz loc_1005741  +
push 25h  +
push eax  +
call sub_1004542  +
mov edi eax +
test edi edi +
jz loc_100577B  +
mov ecx [esi] +
sub eax ecx +
sar eax 1 +
cmp eax 1Fh +
jg loc_1005784  +
push eax  +
push ecx  +
lea eax [ebp-50h] +
push 20h  +
push eax  +
call sub_1003FC4  +
mov ecx [esi+4] +
add esp 10h +
lea eax [ebp-50h] +
push eax  +
call sub_1005630  +
test eax eax +
jz loc_100577B  +
push eax  +
lea ecx [ebp-60h] +
call sub_1004D1B  +
test eax eax +
jz loc_100578D  +
cmp [esi] edi +
jz loc_1005750  +
push dword ptr [esi]  +
call ebx  +
mov [esi] eax +
cmp eax edi +
jnz loc_1005735  +
jmp loc_1005750  +
push 1  +
push eax  +
lea ecx [ebp-60h] +
call sub_1004383  +
test eax eax +
jz loc_100578D  +
push dword ptr [esi]  +
call ebx  +
mov [esi] eax +
cmp word ptr [eax] 0 +
jnz loc_10056D0  +
mov ebx [ebp-64h] +
xor ecx ecx +
mov eax [ebp-58h] +
mov [ebp-58h] ecx +
mov [ebx] eax +
push dword ptr [ebp-58h]  +
call ds:CoTaskMemFree  +
mov eax [ebp-54h] +
jmp loc_100579B  +
mov dword ptr [ebp-54h] 80020009h +
jmp loc_100576D  +
mov dword ptr [ebp-54h] 80004005h +
jmp loc_100576D  +
mov dword ptr [ebp-54h] 8007000Eh +
jmp loc_100576D  +
mov eax 80004003h +
call sub_1010AE0  +
retn 8  +
***
call __EH_prolog3_catch  +
mov edi [ebp+8] +
test edi edi +
jnz loc_10057C2  +
mov eax 80070057h +
jmp loc_100581B  +
and dword ptr [ebp-14h] 0 +
and dword ptr [ebp-4] 0 +
push 0Ch  +
call loc_10104B1  +
pop ecx  +
mov esi eax +
jmp loc_10057E2  +
mov eax offset loc_10057DC +
retn   +
mov edi [ebp+8] +
mov esi [ebp-14h] +
test esi esi +
jnz loc_10057EF  +
mov dword ptr [ebp+8] 8007000Eh +
jmp loc_1005818  +
mov eax [ebp+0Ch] +
mov [esi] eax +
mov eax [ebp+10h] +
mov [esi+4] eax +
lea ebx [edi+0Ch] +
push ebx  +
call ds:EnterCriticalSection  +
mov eax [edi+8] +
and dword ptr [ebp+8] 0 +
mov [esi+8] eax +
push ebx  +
mov [edi+8] esi +
call ds:LeaveCriticalSection  +
mov eax [ebp+8] +
call __EH_epilog3  +
retn 0Ch  +
***
mov eax ecx +
xor ecx ecx +
mov [eax+8] ecx +
mov [eax+430h] ecx +
mov [eax+434h] ecx +
mov [eax+438h] ecx +
mov [eax+42Ch] ecx +
mov [eax+0Ch] ecx +
mov [eax+10h] ecx +
mov [eax+14h] ecx +
mov [eax+428h] ecx +
mov [eax+18h] cx +
mov [eax+220h] cx +
retn   +
***
mov edi edi +
push ebx  +
push esi  +
mov esi ecx +
push edi  +
lea ecx [esi+8] +
call sub_10047C9  +
mov ebx ds:CreateEventW +
xor edi edi +
push edi  +
push edi  +
mov [esi+28h] edi +
mov [esi+38h] edi +
push 1  +
mov [esi+3Ch] edi +
push edi  +
mov [esi+2Ch] edi +
call ebx  +
push edi  +
push edi  +
push 1  +
push edi  +
mov [esi+30h] eax +
call ebx  +
mov [esi+34h] eax +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov eax [esi+8] +
push edi  +
mov edi off_1015190 +
push 4  +
inc eax  +
push eax  +
push dword ptr [esi]  +
call edi  +
add esp 0Ch +
test eax eax +
jnz loc_10058CE  +
xor eax eax +
jmp loc_10058FC  +
mov [esi] eax +
mov eax [esi+8] +
push 4  +
inc eax  +
push eax  +
push dword ptr [esi+4]  +
call edi  +
add esp 0Ch +
test eax eax +
jz loc_10058CA  +
push [ebp+arg_4]  +
mov ecx esi +
push [ebp+arg_0]  +
mov [esi+4] eax +
push dword ptr [esi+8]  +
call sub_1004F3E  +
inc dword ptr [esi+8]  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push 2  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_1004BAF  +
push eax  +
mov ecx esi +
call sub_1004F6F  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push 2  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_1004BAF  +
push eax  +
mov ecx esi +
call sub_1004F9B  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push 1  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_1004BAF  +
push eax  +
mov ecx esi +
call sub_1004F9B  +
pop esi  +
pop ebp  +
retn 4  +
***
push ebp  +
mov ebp esp +
cmp dword ptr [ebp+8] 0 +
jnz loc_100598F  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push 0  +
call sub_1004FE2  +
pop ebp  +
retn 0Ch  +
***
pop ebp  +
jmp loc_100490B  +
***
push ebp  +
mov ebp esp +
cmp dword ptr [ebp+8] 0 +
jnz loc_10059B6  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push 0  +
call sub_100506D  +
pop ebp  +
retn 0Ch  +
***
pop ebp  +
jmp loc_100490B  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1004FC7  +
test [ebp+arg_0] 1 +
jz loc_10059DB  +
push esi  +
call sub_101044F  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov eax esi +
pop esi  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
add eax 4 +
push eax  +
call ds:InterlockedIncrement  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push offset off_1001A38  +
push ecx  +
call sub_10049ED  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
lea eax [esi+4] +
push eax  +
call ds:InterlockedDecrement  +
mov edi eax +
test edi edi +
jnz loc_1005A63  +
test esi esi +
jz loc_1005A63  +
push 1  +
mov ecx esi +
call sub_10059C1  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov eax esi +
pop esi  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_8]  +
mov ecx [ebp+arg_0] +
push [ebp+arg_4]  +
call sub_1005A1D  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1005161  +
test [ebp+arg_0] 1 +
jz loc_1005AC1  +
push esi  +
call sub_101044F  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_1005828  +
mov dword ptr [esi] offset off_1001AB8 +
mov dword ptr [esi+4] offset off_1001A78 +
mov ecx dword_1015200 +
mov eax [ecx] +
call dword ptr [eax+4]  +
mov eax esi +
pop esi  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+0Ch] +
test eax eax +
jnz loc_1005B0D  +
mov eax 80004003h +
jmp loc_1005B15  +
mov dword ptr [eax] 1 +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_1001AB8 +
mov dword ptr [esi+4] offset off_1001A78 +
mov dword ptr [esi+8] 0C0000001h +
mov ecx dword_1015200 +
mov eax [ecx] +
call dword ptr [eax+8]  +
mov ecx esi +
pop esi  +
jmp sub_100815D  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
inc dword ptr [eax+8]  +
mov eax [eax+8] +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+8] +
dec dword ptr [ecx+8]  +
push esi  +
mov esi [ecx+8] +
jnz loc_1005B82  +
test ecx ecx +
jz loc_1005B82  +
mov eax [ecx] +
push 1  +
call dword ptr [eax+10h]  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1005B1E  +
test byte ptr [ebp+8] 1 +
jz loc_1005BA8  +
push esi  +
call sub_101044F  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
sub dword ptr [esp+4] 4 +
jmp loc_1005B66  +
***
sub dword ptr [esp+4] 4 +
jmp loc_1005B4F  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push offset off_1001ACC  +
push ecx  +
call sub_10049ED  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+10h]  +
mov ecx [ebp+8] +
push dword ptr [ebp+0Ch]  +
call sub_1005BD2  +
pop ebp  +
retn 0Ch  +
***
sub dword ptr [esp+4] 4 +
jmp loc_1005BF1  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+8] +
push edi  +
lea eax [esi+8] +
push eax  +
call ds:InterlockedDecrement  +
mov edi eax +
test edi edi +
jnz loc_1005C45  +
test esi esi +
jz loc_1005C55  +
push 1  +
mov ecx esi +
call sub_1005AA7  +
jmp loc_1005C55  +
cmp edi 1 +
jnz loc_1005C55  +
mov ecx dword_1015200 +
mov eax [ecx] +
call dword ptr [eax+8]  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_1005867  +
mov dword ptr [esi] offset off_1001B5C +
mov dword ptr [esi+4] offset off_1001B10 +
mov ecx dword_1015200 +
mov eax [ecx] +
call dword ptr [eax+4]  +
mov eax esi +
pop esi  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+8] +
push edi  +
lea eax [esi+8] +
push eax  +
call ds:InterlockedDecrement  +
mov edi eax +
test edi edi +
jnz loc_1005CB6  +
test esi esi +
jz loc_1005CB6  +
mov eax [esi] +
push 1  +
mov ecx esi +
call dword ptr [eax+10h]  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
sub dword ptr [esp+4] 4 +
jmp loc_1005C8F  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_1001B5C +
mov dword ptr [esi+4] offset off_1001B10 +
mov dword ptr [esi+8] 0C0000001h +
mov ecx dword_1015200 +
mov eax [ecx] +
call dword ptr [eax+8]  +
mov ecx esi +
pop esi  +
jmp loc_1004E54  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1005CD2  +
test byte ptr [ebp+8] 1 +
jz loc_1005D1D  +
push esi  +
call sub_101044F  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1005828  +
mov eax [ebp+arg_0] +
mov [esi+8] eax +
mov dword ptr [esi] offset off_1001BB0 +
mov dword ptr [esi+4] offset off_1001B70 +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov eax [eax+8] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
pop ebp  +
retn 4  +
***
sub dword ptr [esp+4] 4 +
jmp loc_1005D55  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
push dword ptr [esi]  +
mov edi ecx +
call sub_10054DC  +
test al al +
jnz loc_1005DA5  +
mov esi [esi] +
push offset dword_1001BC0  +
push esi  +
push edi  +
call sub_100517F  +
jmp loc_1005DA7  +
mov eax [edi] +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_1005867  +
mov dword ptr [esi] offset off_100197C +
mov dword ptr [esi+4] offset off_1001930 +
mov eax esi +
pop esi  +
retn 4  +
***
sub dword ptr [esp+4] 4 +
jmp loc_1005C1C  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
mov eax ecx +
push [ebp+arg_0]  +
add ecx 4 +
neg eax  +
sbb eax eax +
and eax ecx +
push eax  +
call sub_10057A8  +
pop ebp  +
retn 8  +
***
call __EH_prolog3_catch  +
mov [ebp-30h] ecx +
xor edi edi +
cmp [ebp+8] edi +
jz loc_1005F35  +
cmp [ebp+0Ch] edi +
jz loc_1005F35  +
push dword ptr [ebp+8]  +
mov [ebp-1Ch] edi +
call ds:lstrlenW  +
lea eax [eax+eax+2] +
xor ecx ecx +
push 2  +
pop edx  +
mov [ebp-20h] eax +
mul  edx +
seto cl  +
mov [ebp-14h] edi +
mov [ebp-4] edi +
neg ecx  +
or ecx eax +
push ecx  +
call loc_1010520  +
pop ecx  +
mov [ebp-14h] eax +
jmp loc_1005E66  +
mov eax offset loc_1005E64 +
retn   +
xor edi edi +
mov eax [ebp-14h] +
push 2  +
pop esi  +
push dword ptr [ebp+0Ch]  +
mov [ebp-4] esi +
mov [ebp-2Ch] eax +
call ds:lstrlenW  +
lea eax [eax+eax+2] +
xor ecx ecx +
mov [ebp-24h] eax +
mov edx esi +
mul  edx +
seto cl  +
mov [ebp-18h] edi +
mov byte ptr [ebp-4] 3 +
neg ecx  +
or ecx eax +
push ecx  +
call loc_1010520  +
pop ecx  +
mov [ebp-18h] eax +
mov [ebp-4] esi +
jmp loc_1005EB4  +
mov dword ptr [ebp-4] 2 +
mov eax offset loc_1005EB2 +
retn   +
xor edi edi +
mov esi [ebp-18h] +
mov byte ptr [ebp-4] 5 +
mov [ebp-28h] esi +
cmp [ebp-14h] edi +
jz loc_1005EFE  +
cmp esi edi +
jz loc_1005EFE  +
push dword ptr [ebp-20h]  +
push dword ptr [ebp+8]  +
push dword ptr [ebp-20h]  +
push dword ptr [ebp-14h]  +
call sub_1003F9E  +
push dword ptr [ebp-24h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp-24h]  +
push esi  +
call sub_1003F9E  +
mov ecx [ebp-30h] +
add esp 20h +
lea eax [ebp-18h] +
push eax  +
lea eax [ebp-14h] +
push eax  +
call sub_10058A9  +
test eax eax +
jnz loc_1005F07  +
mov dword ptr [ebp-1Ch] 8007000Eh +
jmp loc_1005F0D  +
mov [ebp-2Ch] edi +
mov [ebp-28h] edi +
push dword ptr [ebp-28h]  +
xor eax eax +
cmp [ebp-1Ch] edi +
mov byte ptr [ebp-4] 2 +
setnl al  +
mov esi eax +
call sub_101044F  +
push dword ptr [ebp-2Ch]  +
or dword ptr [ebp-4] 0FFFFFFFFh +
call sub_101044F  +
pop ecx  +
pop ecx  +
mov eax esi +
jmp loc_1005F37  +
xor eax eax +
call __EH_epilog3  +
retn 8  +
***
call __EH_prolog3  +
cmp dword ptr [ebp+0Ch] 0 +
jz loc_1005FA2  +
cmp dword ptr [ebp+10h] 0 +
jz loc_1005FA2  +
mov esi [ebp+8] +
lea edi [esi+10h] +
push edi  +
call ds:EnterCriticalSection  +
and dword ptr [ebp+8] 0 +
push dword ptr [ebp+10h]  +
and dword ptr [ebp-4] 0 +
push dword ptr [ebp+0Ch]  +
lea ecx [esi+4] +
call sub_1005E08  +
push edi  +
mov esi eax +
call ds:LeaveCriticalSection  +
lea ecx [ebp+8] +
call sub_10047EB  +
mov eax esi +
neg eax  +
sbb eax eax +
and eax 7FF8FFF2h +
add eax 8007000Eh +
jmp loc_1005FA7  +
mov eax 80070057h +
call __EH_epilog3  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0FFFFFFFFh  +
push offset loc_1011C4B  +
mov eax large fs:0 +
push eax  +
push ecx  +
mov eax 2120h +
call __alloca_probe  +
mov eax dword_1015184 +
xor eax ebp +
mov [ebp+var_14] eax +
push ebx  +
push esi  +
push edi  +
push eax  +
lea eax [ebp+var_C] +
mov large fs:0 eax +
mov [ebp+var_10] esp +
mov eax [ebp+arg_8] +
mov esi [ebp+arg_0] +
mov ebx [ebp+arg_4] +
mov [ebp+var_212C] eax +
lea eax [ebp+String] +
xor edi edi +
push eax  +
mov [ebp+var_2128] ecx +
mov [ebp+var_2124] esi +
mov dword ptr [ebp+Data] ebx +
mov [ebp+var_211C] edi +
call sub_10045CE  +
cmp eax edi +
jl loc_10062E6  +
lea eax [ebp+var_211C] +
push eax  +
lea eax [ebp+String] +
push eax  +
call sub_100442D  +
test eax eax +
jnz loc_100604A  +
mov eax 80020009h +
jmp loc_10062E6  +
mov ecx [ebp+var_2128] +
call sub_10045A5  +
mov ecx [ebp+var_2128] +
lea eax [ebp+String] +
push eax  +
call sub_10045CE  +
cmp eax edi +
jl loc_10062E6  +
movzx eax word ptr [ebp+var_211C] +
sub eax 8 +
jz loc_10062B0  +
sub eax 9 +
jz loc_10061A8  +
dec eax  +
dec eax  +
jz loc_100616C  +
sub eax 3FF5h +
jnz loc_10062CF  +
lea eax [ebp+String] +
push eax  +
call ds:lstrlenW  +
inc eax  +
inc eax  +
mov [ebp+lpData] edi +
mov [ebp+var_4] edi +
push eax  +
lea ecx [ebp+lpData] +
mov byte ptr [ebp+var_4] 1 +
call sub_100592B  +
mov [ebp+var_4] edi +
jmp loc_10060D4  +
and dword ptr [ebp-4] 0 +
mov eax offset loc_10060D2 +
retn   +
xor edi edi +
mov esi [ebp+lpData] +
cmp esi edi +
jz loc_1006147  +
cmp word ptr [ebp+String] 0 +
lea edi [ebp+String] +
jz loc_1006121  +
mov ebx ds:CharNextW +
push edi  +
call ebx  +
movzx ecx word ptr [edi] +
cmp cx 5Ch +
jnz loc_1006114  +
cmp word ptr [eax] 30h +
jnz loc_1006114  +
xor ecx ecx +
mov [esi] cx +
inc esi  +
push eax  +
inc esi  +
call ebx  +
mov edi eax +
jmp loc_100611B  +
mov [esi] cx +
inc esi  +
inc esi  +
inc edi  +
inc edi  +
cmp word ptr [edi] 0 +
jnz loc_10060F4  +
mov ecx [ebp+var_2124] +
xor eax eax +
mov [esi] ax +
mov [esi+2] ax +
push [ebp+lpData]  +
push dword ptr [ebp+Data]  +
call sub_10042A4  +
mov esi eax +
xor edi edi +
jmp loc_100614A  +
push 0Eh  +
pop esi  +
lea eax [ebp+var_2114] +
cmp [ebp+lpData] eax +
jz loc_10062C3  +
lea ecx [ebp+lpData] +
call sub_10048FE  +
jmp loc_10062C3  +
lea eax [ebp+Data] +
push eax  +
push edi  +
push edi  +
lea eax [ebp+String] +
push eax  +
mov [ebp+var_2124] edi +
call ds:VarUI4FromStr  +
push dword ptr [ebp+Data]  +
mov ecx esi +
push ebx  +
call sub_100423E  +
lea ecx [ebp+var_2124] +
mov esi eax +
call sub_10047EB  +
jmp loc_10062C3  +
lea eax [ebp+String] +
push eax  +
call ds:lstrlenW  +
mov [ebp+var_211C] eax +
test al 1 +
jz loc_10061C9  +
mov eax 80004005h +
jmp loc_10062E6  +
cdq   +
sub eax edx +
mov ebx eax +
sar ebx 1 +
mov [ebp+var_2130] ebx +
mov [ebp+lpData] edi +
mov [ebp+var_4] 3 +
push ebx  +
lea ecx [ebp+lpData] +
mov byte ptr [ebp+var_4] 4 +
call sub_100594F  +
jmp loc_1006203  +
mov eax offset loc_10061FB +
retn   +
mov ebx [ebp-2130h] +
xor edi edi +
cmp [ebp+lpData] edi +
jnz loc_1006222  +
lea eax [ebp+var_2114] +
test eax eax +
jz loc_10061BF  +
lea ecx [ebp+lpData] +
call sub_10048FE  +
jmp loc_10061BF  +
push ebx  +
push edi  +
push [ebp+lpData]  +
call memset  +
add esp 0Ch +
cmp [ebp+var_211C] edi +
jle loc_1006274  +
mov ecx [ebp+lpData] +
mov eax edi +
cdq   +
sub eax edx +
sar eax 1 +
lea esi [eax+ecx] +
movzx eax word ptr [ebp+edi*2+String] +
push eax  +
call sub_10044CC  +
mov edx edi +
and edx 1 +
shl edx 2 +
push 4  +
pop ecx  +
sub ecx edx +
shl al cl +
or [esi] al +
inc edi  +
cmp edi [ebp+var_211C] +
jl loc_100623A  +
xor edi edi +
mov eax [ebp+var_2124] +
mov eax [eax] +
push ebx  +
push [ebp+lpData]  +
push 3  +
push edi  +
push dword ptr [ebp+Data]  +
push eax  +
call ds:RegSetValueExW  +
mov esi eax +
lea eax [ebp+var_2114] +
cmp [ebp+lpData] eax +
jz loc_10062C3  +
lea ecx [ebp+lpData] +
call sub_10048FE  +
jmp loc_10062C3  +
push 1  +
lea eax [ebp+String] +
push eax  +
push ebx  +
mov ecx esi +
call sub_1004261  +
mov esi eax +
cmp esi edi +
jz loc_10062CF  +
push esi  +
call sub_1004084  +
jmp loc_10062E6  +
push [ebp+var_212C]  +
mov ecx [ebp+var_2128] +
call sub_10045CE  +
cmp eax edi +
jl loc_10062E6  +
xor eax eax +
mov ecx [ebp+var_C] +
mov large fs:0 ecx +
pop ecx  +
pop edi  +
pop esi  +
pop ebx  +
mov ecx [ebp+var_14] +
xor ecx ebp +
call sub_1010988  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0FFFFFFFFh  +
push offset loc_1011C8E  +
mov eax large fs:0 +
push eax  +
mov eax 225Ch +
call __alloca_probe  +
mov eax dword_1015184 +
xor eax ebp +
mov [ebp+var_10] eax +
push ebx  +
push esi  +
push edi  +
push eax  +
lea eax [ebp+var_C] +
mov large fs:0 eax +
mov eax [ebp+arg_4] +
mov edi [ebp+arg_0] +
xor ebx ebx +
mov [ebp+var_221C] ecx +
mov [ebp+var_2220] eax +
mov [ebp+var_222C] ebx +
mov [ebp+var_2228] ebx +
mov [ebp+var_2224] ebx +
mov eax [ebp+arg_C] +
push edi  +
mov [ebp+var_4] ebx +
mov [ebp+var_2264] eax +
call sub_10045CE  +
mov esi eax +
cmp esi ebx +
jmp loc_1006884  +
mov esi ds:lstrcmpiW +
push offset String2  +
push edi  +
mov [ebp+var_2230] 1 +
call esi  +
mov ebx eax +
neg ebx  +
push offset aForceremove  +
sbb ebx ebx +
push edi  +
inc ebx  +
call esi  +
test eax eax +
jz loc_10063AF  +
test ebx ebx +
jz loc_100646C  +
mov ecx [ebp+var_221C] +
push edi  +
call sub_10045CE  +
mov esi eax +
test esi esi +
jl loc_10068EE  +
cmp [ebp+arg_8] 0 +
jz loc_100646C  +
xor esi esi +
push 5Ch  +
push edi  +
mov [ebp+var_223C] esi +
mov [ebp+var_2238] esi +
mov [ebp+var_2234] esi +
call sub_1004542  +
test eax eax +
jnz loc_1006892  +
mov ecx [ebp+var_221C] +
push edi  +
call sub_10046E3  +
test eax eax +
jz loc_1006421  +
mov eax [ebp+var_2220] +
push edi  +
lea ecx [ebp+var_223C] +
mov [ebp+var_223C] eax +
call sub_1004BE3  +
mov [ebp+var_223C] esi +
cmp ebx esi +
jz loc_1006461  +
mov ecx [ebp+var_221C] +
push edi  +
call sub_10045CE  +
mov esi eax +
test esi esi +
jl loc_10068A4  +
mov ecx [ebp+var_221C] +
push edi  +
call sub_1004755  +
lea ecx [ebp+var_223C] +
mov esi eax +
call sub_100418F  +
test esi esi +
jl loc_10068EE  +
jmp loc_100683F  +
lea ecx [ebp+var_223C] +
call sub_100418F  +
push offset aNoremove  +
push edi  +
call ds:lstrcmpiW  +
test eax eax +
jnz loc_1006498  +
mov ecx [ebp+var_221C] +
and [ebp+var_2230] eax +
push edi  +
call sub_10045CE  +
mov esi eax +
test esi esi +
jl loc_10068EE  +
push offset aVal  +
push edi  +
call ds:lstrcmpiW  +
test eax eax +
jnz loc_10065BD  +
mov ecx [ebp+var_221C] +
lea eax [ebp+ValueName] +
push eax  +
call sub_10045CE  +
mov esi eax +
xor ebx ebx +
cmp esi ebx +
jl loc_10068EE  +
mov ecx [ebp+var_221C] +
push edi  +
call sub_10045CE  +
mov esi eax +
cmp esi ebx +
jl loc_10068EE  +
cmp word ptr [edi] 3Dh +
jnz loc_100689D  +
cmp [ebp+arg_8] ebx +
jz loc_1006543  +
mov [ebp+var_2250] ebx +
mov [ebp+var_224C] ebx +
mov eax [ebp+var_2220] +
mov ecx [ebp+var_221C] +
mov [ebp+var_2254] eax +
push edi  +
lea eax [ebp+ValueName] +
push eax  +
lea eax [ebp+var_2254] +
push eax  +
mov byte ptr [ebp+var_4] 1 +
call sub_1005FB4  +
mov esi eax +
cmp esi ebx +
mov [ebp+var_2254] ebx +
lea ecx [ebp+var_2254] +
jl loc_10068E9  +
mov byte ptr [ebp+var_4] bl +
jmp loc_100683A  +
cmp [ebp+arg_C] ebx +
jnz loc_10065AC  +
cmp [ebp+var_2230] ebx +
jz loc_10065AC  +
push 20006h  +
push ebx  +
push [ebp+var_2220]  +
lea ecx [ebp+hKey] +
mov [ebp+hKey] ebx +
mov [ebp+var_2244] ebx +
mov [ebp+var_2240] ebx +
call sub_1004202  +
cmp eax ebx +
jnz loc_10068AC  +
lea eax [ebp+ValueName] +
push eax  +
push [ebp+hKey]  +
call ds:RegDeleteValueW  +
cmp eax ebx +
jz loc_10065A1  +
cmp eax 2 +
jnz loc_10068AC  +
lea ecx [ebp+hKey] +
call sub_100418F  +
mov ecx [ebp+var_221C] +
push edi  +
call sub_1004755  +
jmp loc_1006373  +
push 5Ch  +
push edi  +
call sub_1004542  +
test eax eax +
jnz loc_100689D  +
cmp [ebp+arg_8] eax +
jz loc_100666C  +
mov esi 2001Fh +
push esi  +
push edi  +
push [ebp+var_2220]  +
lea ecx [ebp+var_222C] +
call sub_1004202  +
test eax eax +
jz loc_1006630  +
push 20019h  +
push edi  +
push [ebp+var_2220]  +
lea ecx [ebp+var_222C] +
call sub_1004202  +
test eax eax +
jz loc_1006630  +
xor ebx ebx +
push ebx  +
push ebx  +
push esi  +
push ebx  +
push ebx  +
push edi  +
push [ebp+var_2220]  +
lea ecx [ebp+var_222C] +
call sub_10041AD  +
mov esi eax +
cmp esi ebx +
jnz loc_10068BA  +
mov ecx [ebp+var_221C] +
push edi  +
call sub_10045CE  +
mov esi eax +
test esi esi +
jl loc_10068EE  +
cmp word ptr [edi] 3Dh +
jnz loc_100683F  +
mov ecx [ebp+var_221C] +
push edi  +
push 0  +
lea eax [ebp+var_222C] +
push eax  +
call sub_1005FB4  +
mov esi eax +
jmp loc_1006454  +
cmp [ebp+arg_C] 0 +
jnz loc_100668D  +
push 20019h  +
push edi  +
push [ebp+var_2220]  +
lea ecx [ebp+var_222C] +
call sub_1004202  +
mov ebx eax +
jmp loc_1006690  +
push 2  +
pop ebx  +
test ebx ebx +
jz loc_100669B  +
mov [ebp+arg_C] 1 +
push 0FFFFFFFFh  +
push edi  +
lea eax [ebp+SubKey] +
push 104h  +
push eax  +
call wcsncpy_s  +
add esp 10h +
push eax  +
call sub_1003F5D  +
mov ecx [ebp+var_221C] +
push edi  +
call sub_10045CE  +
mov esi eax +
test esi esi +
jl loc_10068EE  +
mov ecx [ebp+var_221C] +
push edi  +
call sub_1004755  +
mov esi eax +
test esi esi +
jl loc_10068EE  +
cmp word ptr [edi] 7Bh +
jnz loc_1006733  +
push edi  +
call ds:lstrlenW  +
cmp eax 1 +
jnz loc_1006733  +
push [ebp+arg_C]  +
mov ecx [ebp+var_221C] +
push 0  +
push [ebp+var_222C]  +
push edi  +
call sub_1006307  +
mov esi eax +
test esi esi +
jge loc_100671D  +
cmp [ebp+arg_C] 0 +
jz loc_10068EE  +
mov ecx [ebp+var_221C] +
push edi  +
call sub_10045CE  +
mov esi eax +
test esi esi +
jl loc_10068EE  +
mov eax [ebp+var_2264] +
mov [ebp+arg_C] eax +
cmp ebx 2 +
jz loc_1006886  +
test ebx ebx +
jz loc_100675E  +
test eax eax +
jnz loc_1006886  +
push ebx  +
call sub_1004084  +
mov esi eax +
jmp loc_10068EE  +
test eax eax +
jz loc_10067B5  +
push [ebp+var_222C]  +
mov ecx [ebp+var_221C] +
call sub_1004719  +
test eax eax +
jz loc_10067B5  +
mov ecx [ebp+var_221C] +
lea eax [ebp+SubKey] +
push eax  +
call sub_10046E3  +
test eax eax +
jz loc_1006886  +
cmp [ebp+var_2230] 0 +
jz loc_1006886  +
lea eax [ebp+SubKey] +
push eax  +
lea ecx [ebp+var_222C] +
call sub_1004BE3  +
jmp loc_1006886  +
push [ebp+var_222C]  +
mov ecx [ebp+var_221C] +
call sub_1004719  +
lea ecx [ebp+var_222C] +
mov [ebp+var_2268] eax +
call sub_100418F  +
mov ebx eax +
xor eax eax +
cmp ebx eax +
jnz loc_10068CD  +
cmp [ebp+var_2230] eax +
jz loc_1006886  +
cmp [ebp+var_2268] eax +
jnz loc_1006886  +
mov [ebp+var_225C] eax +
mov [ebp+var_2258] eax +
mov eax [ebp+var_2220] +
mov [ebp+var_2260] eax +
lea eax [ebp+SubKey] +
push eax  +
lea ecx [ebp+var_2260] +
call sub_1004109  +
and [ebp+var_2260] 0 +
test eax eax +
jnz loc_10068DB  +
lea ecx [ebp+var_2260] +
call sub_100418F  +
cmp [ebp+arg_8] 0 +
jz loc_1006886  +
cmp word ptr [edi] 7Bh +
jnz loc_1006886  +
push edi  +
call ds:lstrlenW  +
cmp eax 1 +
jnz loc_1006886  +
mov ecx [ebp+var_221C] +
push 0  +
push [ebp+arg_8]  +
push [ebp+var_222C]  +
push edi  +
call sub_1006307  +
mov esi eax +
test esi esi +
jl loc_10068EE  +
mov ecx [ebp+var_221C] +
push edi  +
call sub_10045CE  +
mov esi eax +
test esi esi +
jl loc_10068EE  +
cmp word ptr [edi] 7Dh +
jnz loc_100637C  +
jmp loc_10068EE  +
lea ecx [ebp+var_223C] +
call sub_100418F  +
mov esi 80020009h +
jmp loc_10068EE  +
lea ecx [ebp+var_223C] +
jmp loc_10068E9  +
push eax  +
call sub_1004084  +
lea ecx [ebp+hKey] +
jmp loc_10068E7  +
lea ecx [ebp+var_222C] +
call sub_100418F  +
push esi  +
call sub_1004084  +
jmp loc_10068FB  +
lea ecx [ebp+var_222C] +
call sub_100418F  +
push ebx  +
jmp loc_10068C6  +
push eax  +
call sub_1004084  +
lea ecx [ebp+var_2260] +
mov esi eax +
call sub_100418F  +
lea ecx [ebp+var_222C] +
call sub_100418F  +
mov eax esi +
mov ecx [ebp+var_C] +
mov large fs:0 ecx +
pop ecx  +
pop edi  +
pop esi  +
pop ebx  +
mov ecx [ebp+var_10] +
xor ecx ebp +
call sub_1010988  +
leave   +
retn 10h  +
***
mov edi edi +
push esi  +
mov edx ecx +
push edi  +
mov dword ptr [edx] offset off_1001A0C +
and dword ptr [edx+4] 0 +
and dword ptr [edx+8] 0 +
and dword ptr [edx+0Ch] 0 +
lea esi [edx+10h] +
push 6  +
pop ecx  +
xor eax eax +
mov edi esi +
stos   +
mov [esi+18h] al +
pop edi  +
mov eax edx +
pop esi  +
retn   +
***
call __EH_prolog3_GS  +
mov esi ecx +
xor ebx ebx +
cmp [esi+0Ch] ebx +
jz loc_1006971  +
cmp [esi+14h] ebx +
jz loc_1006971  +
xor eax eax +
jmp loc_1006B5C  +
mov eax dword_1015200 +
add eax 10h +
mov [ebp-234h] eax +
push eax  +
mov [ebp-4] ebx +
call ds:EnterCriticalSection  +
mov byte ptr [ebp-230h] 1 +
mov dword ptr [ebp-21Ch] 80004005h +
cmp [esi+0Ch] ebx +
jnz loc_1006B2A  +
mov edi [esi+4] +
push edi  +
push offset unk_1015204  +
mov [ebp-22Ch] ebx +
call sub_100497F  +
test eax eax +
jz loc_1006A24  +
mov eax 0FFFFh +
mov ecx eax +
cmp [esi+8] cx +
jnz loc_1006A24  +
cmp [esi+0Ah] ax +
jnz loc_1006A24  +
mov edi 104h +
push edi  +
lea eax [ebp-218h] +
push eax  +
push hModule  +
call ds:GetModuleFileNameW  +
cmp eax ebx +
jz loc_1006B30  +
cmp eax edi +
jz loc_1006B30  +
lea eax [ebp-22Ch] +
push eax  +
lea eax [ebp-218h] +
push eax  +
mov [ebp-220h] ebx +
call ds:LoadTypeLib  +
lea ecx [ebp-220h] +
mov [ebp-21Ch] eax +
call sub_10047EB  +
jmp loc_1006A45  +
lea eax [ebp-22Ch] +
push eax  +
push dword ptr [ebp+8]  +
movzx eax word ptr [esi+0Ah] +
push eax  +
movzx eax word ptr [esi+8] +
push eax  +
push edi  +
call ds:LoadRegTypeLib  +
mov [ebp-21Ch] eax +
cmp [ebp-21Ch] ebx +
jl loc_1006B30  +
mov [ebp-224h] ebx +
mov eax [ebp-22Ch] +
mov ecx [eax] +
lea edx [ebp-224h] +
push edx  +
push dword ptr [esi]  +
mov byte ptr [ebp-4] 1 +
push eax  +
call dword ptr [ecx+18h]  +
cmp eax ebx +
mov [ebp-21Ch] eax +
jl loc_1006B09  +
push dword ptr [ebp-224h]  +
lea ecx [ebp-228h] +
call sub_10051F6  +
mov [ebp-220h] ebx +
lea eax [ebp-220h] +
push eax  +
push dword ptr [ebp-224h]  +
mov byte ptr [ebp-4] 3 +
call sub_100524A  +
test eax eax +
jl loc_1006AC1  +
lea eax [ebp-220h] +
push eax  +
lea ecx [ebp-228h] +
call sub_1005D7E  +
mov eax [ebp-228h] +
push esi  +
mov [esi+0Ch] eax +
mov ecx dword_1015200 +
push offset loc_100541E  +
mov [ebp-228h] ebx +
call sub_1005DE3  +
mov eax [ebp-220h] +
mov byte ptr [ebp-4] 2 +
cmp eax ebx +
jz loc_1006AF5  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-228h] +
mov byte ptr [ebp-4] 1 +
cmp eax ebx +
jz loc_1006B09  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-22Ch] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-224h] +
mov [ebp-4] bl +
cmp eax ebx +
jz loc_1006B30  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_1006B30  +
mov [ebp-21Ch] ebx +
mov eax [esi+0Ch] +
cmp eax ebx +
jz loc_1006B4A  +
cmp [esi+14h] ebx +
jnz loc_1006B4A  +
push eax  +
mov ecx esi +
call sub_10052A1  +
mov [ebp-21Ch] eax +
push dword ptr [ebp-234h]  +
call ds:LeaveCriticalSection  +
mov eax [ebp-21Ch] +
call sub_1010AE0  +
retn 4  +
***
call __EH_prolog3_catch  +
mov eax [ebp+10h] +
xor esi esi +
cmp eax esi +
jnz loc_1006B85  +
mov eax 80004003h +
jmp loc_1006C01  +
mov edi 8007000Eh +
push 28h  +
mov [eax] esi +
mov [ebp-14h] edi +
mov [ebp-18h] esi +
mov [ebp-4] esi +
call loc_10104B1  +
pop ecx  +
cmp eax esi +
jz loc_1006BAD  +
push dword ptr [ebp+8]  +
mov ecx eax +
call near ptr dword_10059E4+3  +
jmp loc_1006BAF  +
xor eax eax +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov esi eax +
jmp loc_1006BC7  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov eax offset loc_1006BC1 +
retn   +
***
mov edi [ebp-14h] +
mov esi [ebp-18h] +
test esi esi +
jz loc_1006BFF  +
mov eax [ebp+8] +
lea ecx [esi+8] +
mov [esi+24h] eax +
call sub_1004051  +
mov edi eax +
test edi edi +
jl loc_1006BF6  +
xor edi edi +
test edi edi +
jnz loc_1006BF6  +
push dword ptr [ebp+10h]  +
mov eax [esi] +
push dword ptr [ebp+0Ch]  +
push esi  +
call dword ptr [eax]  +
mov edi eax +
test edi edi +
jz loc_1006BFF  +
push 1  +
mov ecx esi +
call sub_10059C1  +
mov eax edi +
call __EH_epilog3  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_1001A60 +
mov dword ptr [esi+4] 0C0000001h +
call sub_1005135  +
test [ebp+arg_0] 1 +
jz loc_1006C35  +
push esi  +
call sub_101044F  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call __EH_prolog3_catch  +
mov eax [ebp+10h] +
xor esi esi +
cmp eax esi +
jnz loc_1006C5D  +
mov eax 80004003h +
jmp loc_1006CC2  +
push 43Ch  +
mov [eax] esi +
mov dword ptr [ebp-14h] 8007000Eh +
mov [ebp-18h] esi +
mov [ebp-4] esi +
call loc_10104B1  +
pop ecx  +
cmp eax esi +
jz loc_1006C87  +
push dword ptr [ebp+8]  +
mov ecx eax +
call sub_1005ACD  +
mov esi eax +
or dword ptr [ebp-4] 0FFFFFFFFh +
jmp loc_1006C9A  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov eax offset loc_1006C97 +
retn   +
mov esi [ebp-18h] +
test esi esi +
jz loc_1006CBF  +
push dword ptr [ebp+10h]  +
inc dword ptr [esi+8]  +
push dword ptr [ebp+0Ch]  +
dec dword ptr [esi+8]  +
mov eax [esi] +
push esi  +
call dword ptr [eax]  +
mov [ebp-14h] eax +
test eax eax +
jz loc_1006CBF  +
mov eax [esi] +
push 1  +
mov ecx esi +
call dword ptr [eax+10h]  +
mov eax [ebp-14h] +
call __EH_epilog3  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
lea eax [esi+4] +
push eax  +
call ds:InterlockedDecrement  +
mov edi eax +
test edi edi +
jnz loc_1006CF6  +
test esi esi +
jz loc_1006CF6  +
push 1  +
mov ecx esi +
call sub_1006C0E  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
call __EH_prolog3_catch  +
mov eax [ebp+10h] +
xor esi esi +
cmp eax esi +
jnz loc_1006D22  +
mov eax 80004003h +
jmp loc_1006DA5  +
mov ebx 8007000Eh +
push 40h  +
mov [eax] esi +
mov [ebp-14h] ebx +
mov [ebp-18h] esi +
mov [ebp-4] esi +
call loc_10104B1  +
pop ecx  +
cmp eax esi +
jz loc_1006D4A  +
push dword ptr [ebp+8]  +
mov ecx eax +
call sub_1005C62  +
mov esi eax +
or dword ptr [ebp-4] 0FFFFFFFFh +
jmp loc_1006D60  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov eax offset loc_1006D5A +
retn   +
mov ebx [ebp-14h] +
mov esi [ebp-18h] +
test esi esi +
jz loc_1006DA3  +
lea edi [esi+8] +
push edi  +
call ds:InterlockedIncrement  +
lea ecx [esi+0Ch] +
call sub_1004051  +
mov ebx eax +
test ebx ebx +
jl loc_1006D7E  +
xor ebx ebx +
push edi  +
call ds:InterlockedDecrement  +
test ebx ebx +
jnz loc_1006D9A  +
push dword ptr [ebp+10h]  +
mov eax [esi] +
push dword ptr [ebp+0Ch]  +
push esi  +
call dword ptr [eax]  +
mov ebx eax +
test ebx ebx +
jz loc_1006DA3  +
mov eax [esi] +
push 1  +
mov ecx esi +
call dword ptr [eax+10h]  +
mov eax ebx +
call __EH_epilog3  +
retn 0Ch  +
***
mov edi edi +
push esi  +
mov esi ecx +
lea ecx [esi+8] +
call sub_10047C9  +
mov dword ptr [esi] offset off_1001BE0 +
mov dword ptr [esi+4] offset off_1001BD0 +
mov ecx dword_1015200 +
mov eax [ecx] +
call dword ptr [eax+4]  +
mov eax esi +
pop esi  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
add eax 8 +
push eax  +
call ds:InterlockedIncrement  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+8] +
push edi  +
lea eax [esi+8] +
push eax  +
call ds:InterlockedDecrement  +
mov edi eax +
test edi edi +
jnz loc_1006E24  +
test esi esi +
jz loc_1006E24  +
mov eax [esi] +
push 1  +
mov ecx esi +
call dword ptr [eax+24h]  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
sub dword ptr [esp+4] 4 +
jmp loc_1006DFD  +
***
sub dword ptr [esp+4] 4 +
jmp loc_1006DE2  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push offset off_1001C08  +
push ecx  +
call sub_10049ED  +
pop ebp  +
retn 8  +
***
mov edi edi +
push esi  +
lea esi [ecx+8] +
mov dword ptr [ecx] offset off_1001BE0 +
mov dword ptr [ecx+4] offset off_1001BD0 +
mov dword ptr [esi] 0C0000001h +
mov ecx dword_1015200 +
mov eax [ecx] +
call dword ptr [eax+8]  +
mov ecx esi +
pop esi  +
jmp sub_10048A1  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+10h]  +
mov ecx [ebp+8] +
push dword ptr [ebp+0Ch]  +
call sub_1006E4F  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1006E6E  +
test byte ptr [ebp+8] 1 +
jz loc_1006ED5  +
push esi  +
call sub_101044F  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
sub dword ptr [esp+4] 4 +
jmp loc_1006E9F  +
***
call __EH_prolog3  +
mov esi ecx +
mov [ebp-10h] esi +
and dword ptr [esi+4] 0 +
push dword ptr [ebp+8]  +
lea ecx [esi+8] +
mov dword ptr [esi] offset off_1001C48 +
call sub_1005D29  +
mov ecx dword_1015200 +
mov eax [ecx] +
and dword ptr [ebp-4] 0 +
call dword ptr [eax+4]  +
mov eax esi +
call __EH_epilog3  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+8] +
dec dword ptr [ecx+4]  +
push esi  +
mov esi [ecx+4] +
jnz loc_1006F50  +
test ecx ecx +
jz loc_1006F50  +
mov eax [ecx] +
push 1  +
call dword ptr [eax+0Ch]  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call __EH_prolog3  +
mov esi ecx +
mov [ebp-10h] esi +
mov dword ptr [esi] offset off_1001C48 +
and dword ptr [ebp-4] 0 +
mov dword ptr [esi+4] 0C0000001h +
mov ecx dword_1015200 +
mov eax [ecx] +
call dword ptr [eax+8]  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [esi+8] +
call sub_100815D  +
call __EH_epilog3  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+10h] +
push edi  +
xor edi edi +
cmp esi edi +
jnz loc_1006FB7  +
mov eax 80004003h +
jmp loc_1006FE5  +
push dword ptr [ebp+0Ch]  +
mov [esi] edi +
call sub_10049B8  +
test eax eax +
jz loc_1006FD2  +
mov eax [ebp+8] +
mov [esi] eax +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
jmp loc_1006FE3  +
mov ecx [ebp+8] +
push esi  +
push dword ptr [ebp+0Ch]  +
add ecx 8 +
call sub_1005BD2  +
mov edi eax +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1006F5C  +
test byte ptr [ebp+8] 1 +
jz loc_100700A  +
push esi  +
call sub_101044F  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
push edi  +
lea edi [esi+8] +
mov ecx edi +
call sub_10047C9  +
mov eax [ebp+arg_0] +
mov [edi] eax +
pop edi  +
mov dword ptr [esi] offset off_1001C68 +
mov dword ptr [esi+4] offset off_1001C58 +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov eax [eax+8] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+10h]  +
mov eax [ebp+8] +
mov eax [eax+8] +
push dword ptr [ebp+0Ch]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx]  +
pop ebp  +
retn 0Ch  +
***
sub dword ptr [esp+4] 4 +
jmp loc_1007048  +
***
sub dword ptr [esp+4] 4 +
jmp loc_1007062  +
***
call __EH_prolog3_catch  +
mov ebx [ebp+8] +
xor esi esi +
cmp ebx esi +
jnz loc_10070BB  +
mov eax 80004003h +
jmp loc_1007138  +
push 40h  +
mov [ebx] esi +
mov dword ptr [ebp-14h] 8007000Eh +
mov [ebp-18h] esi +
mov [ebp-4] esi +
call loc_10104B1  +
pop ecx  +
cmp eax esi +
jz loc_10070E0  +
push esi  +
mov ecx eax +
call sub_1005DB2  +
jmp loc_10070E2  +
xor eax eax +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov esi eax +
jmp loc_10070FA  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov eax offset loc_10070F4 +
retn   +
mov ebx [ebp+8] +
mov esi [ebp-18h] +
test esi esi +
jz loc_1007133  +
lea edi [esi+8] +
push edi  +
call ds:InterlockedIncrement  +
lea ecx [esi+0Ch] +
call sub_1004051  +
mov [ebp-14h] eax +
test eax eax +
jl loc_100711B  +
and dword ptr [ebp-14h] 0 +
push edi  +
call ds:InterlockedDecrement  +
cmp dword ptr [ebp-14h] 0 +
jz loc_1007133  +
push 1  +
mov ecx esi +
call sub_1005AA7  +
xor esi esi +
mov eax [ebp-14h] +
mov [ebx] esi +
call __EH_epilog3  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax 200Ch +
call __alloca_probe  +
mov eax dword_1015184 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
and [ebp+pv] 0 +
push esi  +
mov esi ecx +
push edi  +
lea ecx [ebp+pv] +
push ecx  +
push eax  +
mov ecx esi +
call sub_1005665  +
mov edi eax +
test edi edi +
jl loc_100723C  +
mov eax [ebp+pv] +
xor ecx ecx +
mov [esi] eax +
cmp cx [eax] +
jz loc_100722E  +
push ebx  +
lea eax [ebp+String1] +
push eax  +
mov ecx esi +
call sub_10045CE  +
mov edi eax +
xor ebx ebx +
cmp edi ebx +
jl loc_100722D  +
lea eax [ebp+String1] +
push eax  +
call sub_100450B  +
mov [ebp+var_200C] eax +
cmp eax ebx +
jz loc_1007276  +
lea eax [ebp+String1] +
push eax  +
mov ecx esi +
call sub_10045CE  +
mov edi eax +
cmp edi ebx +
jl loc_100722D  +
push 7Bh  +
pop eax  +
cmp ax [ebp+String1] +
jnz loc_1007276  +
lea eax [ebp+String1] +
mov ecx esi +
cmp [ebp+arg_4] ebx +
jz loc_100724C  +
mov ebx [esi] +
push 0  +
push [ebp+arg_4]  +
push [ebp+var_200C]  +
push eax  +
call sub_1006307  +
mov edi eax +
test edi edi +
jge loc_1007260  +
push 0  +
push 0  +
push [ebp+var_200C]  +
lea eax [ebp+String1] +
push eax  +
mov ecx esi +
mov [esi] ebx +
call sub_1006307  +
pop ebx  +
push [ebp+pv]  +
call ds:CoTaskMemFree  +
mov eax edi +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_1010988  +
leave   +
retn 8  +
push ebx  +
push ebx  +
push [ebp+var_200C]  +
push eax  +
call sub_1006307  +
mov edi eax +
cmp edi ebx +
jl loc_100722D  +
mov ecx esi +
call sub_10045A5  +
mov eax [esi] +
xor ecx ecx +
cmp cx [eax] +
jnz loc_1007199  +
jmp loc_100722D  +
mov edi 80020009h +
jmp loc_100722D  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_4] +
mov esi ecx +
test edi edi +
jnz loc_1007299  +
mov eax 80004003h +
jmp loc_10072BE  +
xor eax eax +
cmp [esi+0Ch] eax +
jnz loc_10072A8  +
push [ebp+arg_0]  +
call sub_100694D  +
mov ecx [esi+0Ch] +
mov [edi] ecx +
cmp dword ptr [esi+0Ch] 0 +
jz loc_10072BE  +
mov esi [esi+0Ch] +
mov eax [esi] +
push esi  +
call dword ptr [eax+4]  +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
cmp [ecx+0Ch] eax +
jz loc_10072DA  +
cmp [ecx+14h] eax +
jnz loc_10072E0  +
pop ebp  +
jmp sub_100694D  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
jz loc_10072FB  +
mov eax 8002000Bh +
jmp loc_1007306  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
call sub_1007282  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push ebx  +
push [ebp+arg_C]  +
mov ebx ecx +
call sub_10072C9  +
cmp dword ptr [ebx+0Ch] 0 +
jz loc_10073A6  +
cmp dword ptr [ebx+14h] 0 +
push esi  +
push edi  +
jz loc_1007392  +
cmp [ebp+arg_8] 1 +
jnz loc_1007392  +
mov eax [ebp+arg_4] +
push dword ptr [eax]  +
call ds:lstrlenW  +
mov edx [ebx+18h] +
dec edx  +
mov [ebp+var_8] eax +
js loc_1007392  +
mov ecx [ebx+14h] +
mov eax edx +
imul eax eax +
mov [ebp+var_C] ecx +
lea ecx [eax+ecx+4] +
mov [ebp+arg_C] eax +
mov [ebp+var_4] ecx +
mov eax [ebp+var_8] +
cmp eax [ecx] +
jnz loc_1007380  +
mov ecx [ebp+arg_C] +
mov eax [ebx+14h] +
mov esi [ebp+arg_4] +
mov edi [esi] +
add eax ecx +
mov ecx [eax+4] +
mov esi [eax] +
add ecx ecx +
xor eax eax +
cmps   +
jz loc_10073AB  +
mov ecx [ebp+var_4] +
sub [ebp+arg_C] 0Ch +
dec edx  +
sub ecx 0Ch +
mov [ebp+var_4] ecx +
test edx edx +
jge loc_100735F  +
push [ebp+arg_10]  +
mov ebx [ebx+0Ch] +
push [ebp+arg_8]  +
mov eax [ebx] +
push [ebp+arg_4]  +
push ebx  +
call dword ptr [eax+28h]  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 14h  +
mov eax [ebp+var_C] +
imul edx edx +
mov eax [edx+eax+8] +
mov ecx [ebp+arg_10] +
mov [ecx] eax +
xor eax eax +
jmp loc_10073A4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push dword ptr [ebp+14h]  +
mov esi ecx +
call sub_10072C9  +
cmp dword ptr [esi+0Ch] 0 +
jz loc_10073F7  +
push dword ptr [ebp+28h]  +
mov eax [esi+0Ch] +
push dword ptr [ebp+24h]  +
mov ecx [eax] +
push dword ptr [ebp+20h]  +
push dword ptr [ebp+1Ch]  +
push dword ptr [ebp+18h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push eax  +
call dword ptr [ecx+2Ch]  +
pop esi  +
pop ebp  +
retn 24h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+14h]  +
mov ecx offset off_10150E4 +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
call sub_10072E9  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+1Ch]  +
mov ecx offset off_10150E4 +
push dword ptr [ebp+18h]  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
call sub_100730F  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx offset off_10150E4 +
pop ebp  +
jmp loc_10073C3  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+14h]  +
mov ecx offset off_1015100 +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
call sub_10072E9  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+1Ch]  +
mov ecx offset off_1015100 +
push dword ptr [ebp+18h]  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
call sub_100730F  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx offset off_1015100 +
pop ebp  +
jmp loc_10073C3  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+14h]  +
mov ecx offset off_101511C +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
call sub_10072E9  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+1Ch]  +
mov ecx offset off_101511C +
push dword ptr [ebp+18h]  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
call sub_100730F  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx offset off_101511C +
pop ebp  +
jmp loc_10073C3  +
***
call __EH_prolog3_catch  +
mov eax [ebp+10h] +
xor esi esi +
cmp eax esi +
jnz loc_1007534  +
mov eax 80004003h +
jmp loc_10075B0  +
mov edi 8007000Eh +
push 30h  +
mov [eax] esi +
mov [ebp-14h] edi +
mov [ebp-18h] esi +
mov [ebp-4] esi +
call loc_10104B1  +
pop ecx  +
cmp eax esi +
jz loc_100755C  +
push dword ptr [ebp+8]  +
mov ecx eax +
call near ptr dword_1005A6C+4  +
jmp loc_100755E  +
xor eax eax +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov esi eax +
jmp loc_1007576  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov eax offset loc_1007570 +
retn   +
mov edi [ebp-14h] +
mov esi [ebp-18h] +
test esi esi +
jz loc_10075AE  +
mov eax [ebp+8] +
lea ecx [esi+8] +
mov [esi+24h] eax +
call sub_1004051  +
mov edi eax +
test edi edi +
jl loc_10075A5  +
xor edi edi +
test edi edi +
jnz loc_10075A5  +
push dword ptr [ebp+10h]  +
mov eax [esi] +
push dword ptr [ebp+0Ch]  +
push esi  +
call dword ptr [eax]  +
mov edi eax +
test edi edi +
jz loc_10075AE  +
push 1  +
mov ecx esi +
call sub_1006C0E  +
mov eax edi +
call __EH_epilog3  +
retn 0Ch  +
***
push ebp  +
mov ebp esp +
cmp dword ptr [ebp+8] 0 +
jnz loc_10075D9  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push 0  +
call sub_1006D03  +
pop ebp  +
retn 0Ch  +
***
pop ebp  +
jmp loc_100490B  +
***
call __EH_prolog3_catch  +
mov eax [ebp+10h] +
xor esi esi +
cmp eax esi +
jnz loc_1007603  +
mov eax 80004003h +
jmp loc_1007686  +
mov ebx 8007000Eh +
push 28h  +
mov [eax] esi +
mov [ebp-14h] ebx +
mov [ebp-18h] esi +
mov [ebp-4] esi +
call loc_10104B1  +
pop ecx  +
cmp eax esi +
jz loc_100762B  +
push dword ptr [ebp+8]  +
mov ecx eax +
call sub_1006DB2  +
mov esi eax +
or dword ptr [ebp-4] 0FFFFFFFFh +
jmp loc_1007641  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov eax offset loc_100763B +
retn   +
mov ebx [ebp-14h] +
mov esi [ebp-18h] +
test esi esi +
jz loc_1007684  +
lea edi [esi+8] +
push edi  +
call ds:InterlockedIncrement  +
lea ecx [esi+0Ch] +
call sub_1004051  +
mov ebx eax +
test ebx ebx +
jl loc_100765F  +
xor ebx ebx +
push edi  +
call ds:InterlockedDecrement  +
test ebx ebx +
jnz loc_100767B  +
push dword ptr [ebp+10h]  +
mov eax [esi] +
push dword ptr [ebp+0Ch]  +
push esi  +
call dword ptr [eax]  +
mov ebx eax +
test ebx ebx +
jz loc_1007684  +
mov eax [esi] +
push 1  +
mov ecx esi +
call dword ptr [eax+24h]  +
mov eax ebx +
call __EH_epilog3  +
retn 0Ch  +
***
push 10h  +
mov eax offset loc_1011E09 +
call __EH_prolog3_catch  +
mov eax [ebp+10h] +
xor esi esi +
cmp eax esi +
jnz loc_10076AF  +
mov eax 80004003h +
jmp loc_1007715  +
push 444h  +
mov [eax] esi +
mov dword ptr [ebp-14h] 8007000Eh +
mov [ebp-18h] esi +
mov [ebp-4] esi +
call loc_10104B1  +
pop ecx  +
mov ecx eax +
mov [ebp-1Ch] ecx +
mov byte ptr [ebp-4] 1 +
cmp ecx esi +
jz loc_10076E0  +
push dword ptr [ebp+8]  +
call sub_1006EF0  +
mov esi eax +
or dword ptr [ebp-4] 0FFFFFFFFh +
jmp loc_10076F3  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov eax offset loc_10076F0 +
retn   +
***
mov esi [ebp-18h] +
test esi esi +
jz loc_1007712  +
push dword ptr [ebp+10h]  +
mov eax [esi] +
push dword ptr [ebp+0Ch]  +
push esi  +
call dword ptr [eax]  +
mov [ebp-14h] eax +
test eax eax +
jz loc_1007712  +
mov eax [esi] +
push 1  +
mov ecx esi +
call dword ptr [eax+0Ch]  +
mov eax [ebp-14h] +
call __EH_epilog3  +
retn 0Ch  +
***
call __SEH_prolog4  +
lea eax [esi+8] +
push eax  +
call ds:LeaveCriticalSection  +
xor ebx ebx +
retn   +
***
call __EH_prolog3  +
mov esi ecx +
mov [ebp-10h] esi +
and dword ptr [esi+4] 0 +
push dword ptr [ebp+8]  +
lea ecx [esi+0Ch] +
mov dword ptr [esi] offset off_1001C8C +
call sub_1007016  +
mov ecx dword_1015200 +
mov eax [ecx] +
and dword ptr [ebp-4] 0 +
call dword ptr [eax+4]  +
mov eax esi +
call __EH_epilog3  +
retn 4  +
***
call __EH_prolog3  +
mov esi ecx +
mov [ebp-10h] esi +
mov dword ptr [esi] offset off_1001C8C +
and dword ptr [ebp-4] 0 +
mov dword ptr [esi+4] 0C0000001h +
mov ecx dword_1015200 +
mov eax [ecx] +
call dword ptr [eax+8]  +
lea ecx [esi+14h] +
call sub_10048A1  +
call __EH_epilog3  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
lea eax [esi+4] +
push eax  +
call ds:InterlockedDecrement  +
mov edi eax +
test edi edi +
jnz loc_100788A  +
test esi esi +
jz loc_100788A  +
mov eax [esi] +
push 1  +
mov ecx esi +
call dword ptr [eax+0Ch]  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+10h] +
push edi  +
xor edi edi +
cmp esi edi +
jnz loc_10078AE  +
mov eax 80004003h +
jmp loc_10078DC  +
push dword ptr [ebp+0Ch]  +
mov [esi] edi +
call sub_10049B8  +
test eax eax +
jz loc_10078C9  +
mov eax [ebp+8] +
mov [esi] eax +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
jmp loc_10078DA  +
mov ecx [ebp+8] +
push esi  +
push dword ptr [ebp+0Ch]  +
add ecx 0Ch +
call sub_1006E4F  +
mov edi eax +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1007823  +
test [ebp+arg_0] 1 +
jz loc_1007901  +
push esi  +
call sub_101044F  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call __EH_prolog3_catch_GS  +
mov eax [ebp+8] +
mov edi [ebp+0Ch] +
mov ebx [ebp+10h] +
xor esi esi +
mov [ebp-424h] esi +
mov [ebp-4] esi +
mov [ebp-42Ch] ecx +
mov [ebp-430h] esi +
mov [ebp-418h] esi +
push 2  +
push esi  +
push eax  +
mov byte ptr [ebp-4] 1 +
call ds:LoadLibraryExW  +
mov [ebp-41Ch] eax +
cmp eax esi +
jnz loc_1007966  +
call sub_100406A  +
mov esi eax +
jmp loc_1007A6F  +
push ebx  +
push edi  +
push eax  +
call ds:FindResourceW  +
mov edi eax +
cmp edi esi +
jnz loc_100797F  +
call sub_100406A  +
jmp loc_1007A61  +
push edi  +
push dword ptr [ebp-41Ch]  +
call ds:LoadResource  +
mov [ebp-428h] eax +
cmp eax esi +
jz loc_1007975  +
push edi  +
push dword ptr [ebp-41Ch]  +
call ds:SizeofResource  +
mov edi eax +
lea eax [edi+1] +
mov [ebp-420h] edi +
cmp eax edi +
jnb loc_10079E5  +
lea eax [ebp-414h] +
cmp [ebp-418h] eax +
jz loc_10079CB  +
lea ecx [ebp-418h] +
call sub_10048FE  +
mov esi 8007000Eh +
lea ecx [ebp-424h] +
call sub_10047EB  +
mov eax esi +
call sub_1010AF4  +
retn 10h  +
push eax  +
lea ecx [ebp-418h] +
mov byte ptr [ebp-4] 2 +
call sub_1005907  +
mov dword ptr [ebp-4] 1 +
jmp loc_1007A13  +
mov dword ptr [ebp-4] 1 +
mov eax offset loc_1007A0B +
retn   +
mov edi [ebp-420h] +
xor esi esi +
cmp [ebp-418h] esi +
jnz loc_1007A22  +
mov esi 8007000Eh +
jmp loc_1007A63  +
push edi  +
push dword ptr [ebp-418h]  +
push edi  +
push dword ptr [ebp-428h]  +
push esi  +
push 3  +
call ds:MultiByteToWideChar  +
cmp eax esi +
jz loc_1007975  +
mov edx [ebp-418h] +
push dword ptr [ebp+14h]  +
xor ecx ecx +
mov [edx+eax*2] cx +
push dword ptr [ebp-418h]  +
lea ecx [ebp-430h] +
call sub_1007145  +
mov esi eax +
push dword ptr [ebp-41Ch]  +
call ds:__imp_FreeLibrary  +
lea eax [ebp-414h] +
cmp [ebp-418h] eax +
jz loc_10079D0  +
lea ecx [ebp-418h] +
call sub_10048FE  +
jmp loc_10079D0  +
***
call __EH_prolog3  +
and dword ptr [ebp-10h] 0 +
movzx eax word ptr [ebp+10h] +
mov ecx [ebp+8] +
and dword ptr [ebp-4] 0 +
push 1  +
push dword ptr [ebp+14h]  +
push eax  +
push dword ptr [ebp+0Ch]  +
call sub_100790D  +
lea ecx [ebp-10h] +
mov esi eax +
call sub_10047EB  +
mov eax esi +
call __EH_epilog3  +
retn 10h  +
***
call __EH_prolog3  +
xor eax eax +
mov [ebp-10h] eax +
mov ecx [ebp+8] +
push eax  +
push dword ptr [ebp+14h]  +
mov [ebp-4] eax +
movzx eax word ptr [ebp+10h] +
push eax  +
push dword ptr [ebp+0Ch]  +
call sub_100790D  +
lea ecx [ebp-10h] +
mov esi eax +
call sub_10047EB  +
mov eax esi +
call __EH_epilog3  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0A64h +
mov eax dword_1015184 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
mov esi [ebp+arg_C] +
push edi  +
mov edi [ebp+arg_0] +
lea ecx [ebp+var_A64] +
call sub_100691C  +
lea ecx [ebp+var_A54] +
call sub_1004051  +
mov ebx eax +
test ebx ebx +
jge loc_1007B71  +
lea ecx [ebp+var_A64] +
call ??1_Locimp@locale@std@@MAE@XZ  +
mov eax ebx +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1010988  +
leave   +
retn 10h  +
test esi esi +
jz loc_1007B90  +
jmp loc_1007B8A  +
push dword ptr [esi+4]  +
push eax  +
lea eax [ebp+var_A64] +
push eax  +
call sub_1005F44  +
add esi 8 +
mov eax [esi] +
test eax eax +
jnz loc_1007B77  +
mov eax [edi] +
lea ecx [ebp+var_A64] +
push ecx  +
mov ecx edi +
call dword ptr [eax+14h]  +
xor ebx ebx +
cmp eax ebx +
jge loc_1007BB5  +
mov esi eax +
lea ecx [ebp+var_A64] +
call ??1_Locimp@locale@std@@MAE@XZ  +
mov eax esi +
jmp loc_1007B60  +
mov edi hModule +
mov esi 104h +
push esi  +
lea eax [ebp+Filename] +
push eax  +
push edi  +
mov [ebp+var_A38] ebx +
call ds:GetModuleFileNameW  +
cmp eax ebx +
jnz loc_1007BED  +
call sub_100406A  +
mov esi eax +
lea ecx [ebp+var_A38] +
call sub_10047EB  +
jmp loc_1007BA6  +
cmp eax esi +
jnz loc_1007C03  +
lea ecx [ebp+var_A38] +
call sub_10047EB  +
mov esi 8007007Ah +
jmp loc_1007BA6  +
lea eax [ebp+Filename] +
push eax  +
push 208h  +
lea eax [ebp+var_A34] +
push eax  +
call sub_10040B1  +
cmp edi ebx +
jz loc_1007C32  +
push ebx  +
call ds:GetModuleHandleW  +
cmp edi eax +
jz loc_1007C32  +
lea eax [ebp+var_A34] +
jmp loc_1007C97  +
push 22h  +
pop eax  +
mov [ebp+String] ax +
lea eax [ebp+var_A34] +
push eax  +
push 20Bh  +
lea eax [ebp-622h] +
push eax  +
call sub_1003F09  +
test al al +
jnz loc_1007C6D  +
lea ecx [ebp+var_A38] +
call sub_10047EB  +
mov esi 80004005h +
jmp loc_1007BA6  +
lea eax [ebp+String] +
push eax  +
call ds:lstrlenW  +
add eax eax +
push 22h  +
pop ecx  +
mov [ebp+eax+String] cx +
xor ecx ecx +
mov [ebp+eax-622h] cx +
lea eax [ebp+String] +
push eax  +
push offset aModule  +
lea eax [ebp+var_A64] +
push eax  +
call sub_1005F44  +
mov esi eax +
cmp esi ebx +
jl loc_1007BE0  +
lea eax [ebp+var_A34] +
push eax  +
push offset aModule_raw  +
lea eax [ebp+var_A64] +
push eax  +
call sub_1005F44  +
mov esi eax +
cmp esi ebx +
jl loc_1007BE0  +
push offset aRegistry  +
push [ebp+arg_4]  +
lea eax [ebp+Filename] +
push eax  +
lea eax [ebp+var_A64] +
push eax  +
cmp [ebp+arg_8] ebx +
jz loc_1007CFA  +
call sub_1007A96  +
jmp loc_1007BDE  +
call sub_1007AD8  +
jmp loc_1007BDE  +
***
push ebp  +
mov ebp esp +
push 0  +
push dword ptr [ebp+8]  +
push 66h  +
push dword_1015200  +
call sub_1007B19  +
pop ebp  +
retn 4  +
***
push ebp  +
mov ebp esp +
push 0  +
push dword ptr [ebp+8]  +
push 67h  +
push dword_1015200  +
call sub_1007B19  +
pop ebp  +
retn 4  +
***
push ebp  +
mov ebp esp +
push 0  +
push dword ptr [ebp+8]  +
push 68h  +
push dword_1015200  +
call sub_1007B19  +
pop ebp  +
retn 4  +
***
push ebp  +
mov ebp esp +
push 0  +
push dword ptr [ebp+8]  +
push 69h  +
push dword_1015200  +
call sub_1007B19  +
pop ebp  +
retn 4  +
***
push ebp  +
mov ebp esp +
push 0  +
push dword ptr [ebp+8]  +
push 6Ah  +
push dword_1015200  +
call sub_1007B19  +
pop ebp  +
retn 4  +
***
push ebp  +
mov ebp esp +
cmp dword ptr [ebp+8] 0 +
jnz loc_1007DC5  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push 0  +
call sub_1006C41  +
pop ebp  +
retn 0Ch  +
***
pop ebp  +
jmp loc_1007693  +
***
push 10h  +
mov eax offset loc_1011EA1 +
call __EH_prolog3_catch  +
mov eax [ebp+arg_8] +
xor esi esi +
cmp eax esi +
jnz loc_1007DEC  +
mov eax 80004003h +
jmp loc_1007E6B  +
mov edi 8007000Eh +
push 34h  +
mov [eax] esi +
mov [ebp+var_14] edi +
mov [ebp+var_18] esi +
mov [ebp+var_4] esi +
call loc_10104B1  +
pop ecx  +
mov ecx eax +
mov [ebp+var_1C] ecx +
mov byte ptr [ebp+var_4] 1 +
cmp ecx esi +
jz loc_1007E1B  +
push [ebp+arg_0]  +
call sub_10077DF  +
mov esi eax +
or [ebp+var_4] 0FFFFFFFFh +
jmp loc_1007E31  +
***
or dword ptr [ebp-4] 0FFFFFFFFh +
mov eax offset loc_1007E2B +
retn   +
***
mov edi [ebp-14h] +
mov esi [ebp-18h] +
***
test esi esi +
jz loc_1007E69  +
lea ecx [esi+18h] +
call sub_1004051  +
test eax eax +
jl loc_1007E43  +
xor eax eax +
mov edi eax +
test eax eax +
jl loc_1007E4B  +
xor edi edi +
test edi edi +
jnz loc_1007E60  +
push [ebp+arg_8]  +
mov eax [esi] +
push [ebp+arg_4]  +
push esi  +
call dword ptr [eax]  +
mov edi eax +
test edi edi +
jz loc_1007E69  +
mov eax [esi] +
push 1  +
mov ecx esi +
call dword ptr [eax+0Ch]  +
mov eax edi +
call __EH_epilog3  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
jnz loc_1007E94  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push 0  +
call sub_10075E4  +
pop ebp  +
retn 0Ch  +
pop ebp  +
jmp loc_1007DD0  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push ebx  +
push esi  +
push edi  +
xor edi edi +
cmp [ebp+CodePage] 0FDE9h +
mov [ebp+var_10] edi +
mov [ebp+lpMem] edi +
mov [ebp+var_8] edi +
lea ebx [ebp+var_8] +
mov [ebp+dwFlags] 400h +
jnz loc_1007ED1  +
xor ebx ebx +
mov [ebp+dwFlags] 80h +
mov esi ds:WideCharToMultiByte +
push ebx  +
push edi  +
push edi  +
push edi  +
push 0FFFFFFFFh  +
push [ebp+lpWideCharStr]  +
push [ebp+dwFlags]  +
push [ebp+CodePage]  +
call esi  +
mov [ebp+cchMultiByte] eax +
cmp eax edi +
jnz loc_1007F13  +
push edi  +
push offset aFormatmapistri  +
push 71h  +
push offset aDW7rtmBaseDiag  +
push offset dword_1001570  +
mov ecx offset unk_10156C0 +
call sub_1011507  +
xor esi esi +
inc esi  +
mov [ebp+var_8] esi +
jmp loc_1007F91  +
push eax  +
push 8  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov [ebp+lpMem] eax +
cmp eax edi +
jnz loc_1007F50  +
mov eax 8007000Eh +
push eax  +
push offset aFormatmapistri  +
push 76h  +
push offset aDW7rtmBaseDiag  +
push offset dword_1001570  +
mov ecx offset unk_10156C0 +
mov [ebp+var_10] eax +
call sub_1011507  +
jmp loc_1007FA6  +
push ebx  +
push edi  +
push [ebp+cchMultiByte]  +
push eax  +
push 0FFFFFFFFh  +
push [ebp+lpWideCharStr]  +
push [ebp+dwFlags]  +
push [ebp+CodePage]  +
call esi  +
xor esi esi +
inc esi  +
test eax eax +
jnz loc_1007F8C  +
push edi  +
push offset aFormatmapistri  +
push 83h  +
push offset aDW7rtmBaseDiag  +
push offset dword_1001570  +
mov ecx offset unk_10156C0 +
call sub_1011507  +
mov [ebp+var_8] esi +
cmp [ebp+var_8] esi +
jnz loc_1007F9B  +
mov eax [ebp+arg_8] +
mov [ebp+var_10] esi +
mov [eax] edi +
jmp loc_1007FA6  +
mov ecx [ebp+lpMem] +
mov eax [ebp+arg_8] +
mov [eax] ecx +
mov [ebp+lpMem] edi +
cmp [ebp+lpMem] edi +
jz loc_1007FBC  +
push [ebp+lpMem]  +
push edi  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
mov eax [ebp+var_10] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
add eax 428h +
cmp dword ptr [eax] 0 +
jz loc_1007FE0  +
and dword ptr [eax] 0 +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
xor esi esi +
push dword ptr [ebp+0Ch]  +
push off_1015138[esi]  +
call sub_100497F  +
test eax eax +
jnz loc_1008013  +
add esi 4 +
cmp esi 4 +
jb loc_1007FF3  +
inc eax  +
pop esi  +
pop ebp  +
retn 8  +
***
xor eax eax +
jmp loc_100800E  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
test esi esi +
jz loc_10080D5  +
mov eax [esi] +
test eax eax +
jz loc_10080D5  +
mov eax [eax+2Ch] +
mov eax [eax+10h] +
push ebx  +
mov ebx ds:GetProcessHeap +
push edi  +
mov edi ds:HeapFree +
test eax eax +
jz loc_1008060  +
push eax  +
push 0  +
call ebx  +
push eax  +
call edi  +
mov eax [esi] +
mov eax [eax+2Ch] +
and dword ptr [eax+10h] 0 +
mov eax [esi] +
mov eax [eax+2Ch] +
mov eax [eax+0Ch] +
test eax eax +
jz loc_100807D  +
push eax  +
push 0  +
call ebx  +
push eax  +
call edi  +
mov eax [esi] +
mov eax [eax+2Ch] +
and dword ptr [eax+0Ch] 0 +
mov eax [esi] +
mov eax [eax+2Ch] +
test eax eax +
jz loc_1008094  +
push eax  +
push 0  +
call ebx  +
push eax  +
call edi  +
mov eax [esi] +
and dword ptr [eax+2Ch] 0 +
mov eax [esi] +
mov eax [eax+4] +
test eax eax +
jz loc_10080AB  +
push eax  +
push 0  +
call ebx  +
push eax  +
call edi  +
mov eax [esi] +
and dword ptr [eax+4] 0 +
mov eax [esi] +
mov eax [eax+8] +
test eax eax +
jz loc_10080C2  +
push eax  +
push 0  +
call ebx  +
push eax  +
call edi  +
mov eax [esi] +
and dword ptr [eax+8] 0 +
mov eax [esi] +
test eax eax +
jz loc_10080D3  +
push eax  +
push 0  +
call ebx  +
push eax  +
call edi  +
and dword ptr [esi] 0 +
pop edi  +
pop ebx  +
xor eax eax +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
push eax  +
push 49h  +
push dword ptr [ebp+8]  +
push eax  +
push eax  +
call dword_101523C  +
mov dword_1015238 eax +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov ebx eax +
mov esi edx +
xor eax eax +
xor edi edi +
test esi esi +
jz loc_100813B  +
cmp [ebp+arg_4] eax +
jz loc_1008137  +
movzx edx word ptr [ebx] +
test dx dx +
jz loc_1008137  +
mov [ecx] dx +
inc ecx  +
inc ecx  +
inc ebx  +
inc ebx  +
dec esi  +
dec [ebp+arg_4]  +
inc edi  +
test esi esi +
jnz loc_100811A  +
test esi esi +
jnz loc_1008143  +
dec ecx  +
dec ecx  +
dec edi  +
mov eax 8007007Ah +
xor edx edx +
mov [ecx] dx +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_1008151  +
mov [ecx] edi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push esi  +
mov esi ecx +
cmp dword ptr [esi+42Ch] 0 +
push edi  +
jz loc_1008175  +
lea eax [esi+4] +
push eax  +
call sub_1007FCB  +
mov eax [esi+0Ch] +
test eax eax +
jz loc_1008183  +
push eax  +
call ds:__imp_FreeLibrary  +
push dword ptr [esi+438h]  +
mov edi ds:SysFreeString +
call edi  +
push dword ptr [esi+434h]  +
call edi  +
push dword ptr [esi+430h]  +
call edi  +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax [ebp+arg_0] +
push ebx  +
mov ebx ds:GetProcessHeap +
push esi  +
push edi  +
push 30h  +
xor edi edi +
push 8  +
mov [ebp+var_8] ecx +
mov [eax] edi +
call ebx  +
push eax  +
call ds:HeapAlloc  +
mov esi eax +
mov [ebp+var_4] esi +
cmp esi edi +
jnz loc_10081EB  +
mov eax 8007000Eh +
push eax  +
push offset aCrasmapiBuildd  +
push 283h  +
jmp loc_100820C  +
push 18h  +
push 8  +
call ebx  +
push eax  +
call ds:HeapAlloc  +
cmp eax edi +
jnz loc_1008224  +
mov eax 8007000Eh +
push eax  +
push offset aCrasmapiBuildd  +
push 284h  +
push offset aDW7rtmBaseDiag  +
push offset dword_1001570  +
mov ecx offset unk_10156C0 +
mov edi eax +
call sub_1011507  +
jmp loc_1008265  +
or dword ptr [eax+8] 0FFFFFFFFh +
mov [eax] edi +
mov [eax+4] edi +
mov [eax+0Ch] edi +
mov [eax+10h] edi +
mov [eax+14h] edi +
mov [esi] edi +
mov [esi+4] edi +
mov [esi+8] edi +
mov [esi+0Ch] edi +
mov [esi+10h] edi +
mov [esi+14h] edi +
mov [esi+18h] edi +
mov [esi+1Ch] edi +
mov [esi+20h] edi +
mov [esi+24h] edi +
mov dword ptr [esi+28h] 1 +
mov [esi+2Ch] eax +
mov eax [ebp+arg_0] +
mov [eax] esi +
mov [ebp+var_4] edi +
mov ecx [ebp+var_8] +
lea eax [ebp+var_4] +
push eax  +
call sub_100801C  +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov eax [esi] +
cmp [ebp+arg_0] eax +
jz loc_10082B7  +
push eax  +
call ds:SysFreeString  +
cmp [ebp+arg_0] 0 +
jz loc_10082B4  +
push [ebp+arg_0]  +
call ds:SysAllocString  +
mov [esi] eax +
test eax eax +
jnz loc_10082B7  +
push 8007000Eh  +
call loc_1003F3E  +
and dword ptr [esi] 0 +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi] +
test eax eax +
jnz loc_10082D0  +
pop esi  +
retn   +
push eax  +
call ds:SysStringByteLen  +
push eax  +
push dword ptr [esi]  +
call ds:SysAllocStringByteLen  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
xor eax eax +
test ecx ecx +
jz loc_10082FD  +
cmp ecx 7FFFFFFFh +
jbe loc_1008302  +
mov eax 80070057h +
test eax eax +
jl loc_1008346  +
mov eax [ebp+arg_0] +
push ebx  +
xor ebx ebx +
push esi  +
mov esi ecx +
test ecx ecx +
jz loc_1008339  +
mov edx [ebp+arg_8] +
push edi  +
mov edi 7FFFFFFEh +
sub edi ecx +
sub edx eax +
lea ecx [edi+esi] +
test ecx ecx +
jz loc_1008334  +
mov cl [edx+eax] +
test cl cl +
jz loc_1008334  +
mov [eax] cl +
inc eax  +
dec esi  +
jnz loc_1008320  +
pop edi  +
test esi esi +
jnz loc_100833F  +
dec eax  +
mov ebx 8007007Ah +
mov byte ptr [eax] 0 +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_4] +
xor eax eax +
test edx edx +
jz loc_1008365  +
cmp edx 7FFFFFFFh +
jbe loc_100836A  +
mov eax 80070057h +
test eax eax +
jl loc_1008380  +
mov eax [ebp+arg_8] +
mov ecx [ebp+arg_0] +
push 7FFFFFFEh  +
push 0  +
call sub_1008106  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_4] +
push ebx  +
xor eax eax +
push edi  +
mov ebx 7FFFFFFFh +
test edx edx +
jz loc_10083A2  +
cmp edx ebx +
jbe loc_10083A7  +
mov eax 80070057h +
mov edi [ebp+arg_0] +
test eax eax +
jl loc_10083DE  +
and [ebp+arg_4] 0 +
xor ecx ecx +
push esi  +
mov esi edx +
mov eax edi +
cmp edx ecx +
jz loc_10083CB  +
cmp [eax] cx +
jz loc_10083C7  +
inc eax  +
inc eax  +
dec esi  +
jnz loc_10083BD  +
cmp esi ecx +
jnz loc_10083D4  +
mov [ebp+arg_4] 80070057h +
jmp loc_10083D8  +
mov ecx edx +
sub ecx esi +
mov eax [ebp+arg_4] +
pop esi  +
jmp loc_10083E0  +
xor ecx ecx +
test eax eax +
jl loc_10083F4  +
mov eax [ebp+arg_8] +
push ebx  +
sub edx ecx +
push 0  +
lea ecx [edi+ecx*2] +
call sub_1008106  +
pop edi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax [ebp+arg_8] +
push edi  +
push 208h  +
xor edi edi +
push 8  +
mov [ebp+var_8] edi +
mov [eax] edi +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov [ebp+lpMem] eax +
cmp eax edi +
jnz loc_1008455  +
mov eax 8007000Eh +
push eax  +
push offset aLoadmapistring  +
push 34h  +
push offset aDW7rtmBaseDiag  +
push offset dword_1001570  +
mov ecx offset unk_10156C0 +
mov [ebp+var_8] eax +
call sub_1011507  +
jmp loc_10084F1  +
push ebx  +
push esi  +
mov esi 104h +
push esi  +
push eax  +
push [ebp+uID]  +
push edi  +
call ds:GetModuleHandleW  +
push eax  +
call ds:LoadStringW  +
test eax eax +
jnz loc_10084CE  +
push edi  +
push offset aLoadmapistring  +
push 3Ch  +
push offset aDW7rtmBaseDiag  +
mov ebx offset dword_1001570 +
mov edi offset unk_10156C0 +
push ebx  +
mov ecx edi +
call sub_1011507  +
push esi  +
push 0  +
push [ebp+lpMem]  +
call memset  +
add esp 0Ch +
push [ebp+arg_4]  +
push esi  +
push [ebp+lpMem]  +
call sub_100834F  +
mov [ebp+var_8] eax +
test eax eax +
jge loc_10084CC  +
push eax  +
push offset aLoadmapistring  +
push 41h  +
push offset aDW7rtmBaseDiag  +
push ebx  +
mov ecx edi +
call sub_1011507  +
xor edi edi +
jmp loc_10084D9  +
xor edi edi +
mov eax [ebp+lpMem] +
mov ecx [ebp+arg_8] +
mov [ecx] eax +
mov [ebp+lpMem] edi +
pop esi  +
pop ebx  +
cmp [ebp+lpMem] edi +
jz loc_10084F1  +
push [ebp+lpMem]  +
push edi  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
mov eax [ebp+var_8] +
pop edi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 214h +
mov eax dword_1015184 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
push edi  +
xor eax eax +
push 206h  +
xor edi edi +
mov [ebp+LibFileName] ax +
lea eax [ebp-20Ah] +
push edi  +
push eax  +
mov esi ecx +
call memset  +
add esp 0Ch +
cmp ebx edi +
jnz loc_1008554  +
mov esi 80004003h +
push esi  +
push offset aCrasmapiGet_re  +
push 0C4h  +
jmp loc_10085D5  +
mov [ebx] edi +
mov [esi+428h] edi +
cmp [esi+42Ch] edi +
jz loc_100856D  +
lea eax [esi+4] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+38h]  +
mov eax [esi+0Ch] +
cmp eax edi +
jz loc_1008584  +
push eax  +
call ds:__imp_FreeLibrary  +
mov [esi+10h] edi +
mov [esi+14h] edi +
mov [esi+0Ch] edi +
push edi  +
push 25h  +
lea eax [ebp+LibFileName] +
push eax  +
push edi  +
call ds:SHGetSpecialFolderPathW  +
test eax eax +
jnz loc_10085AB  +
mov esi 80004005h +
push esi  +
push offset aCrasmapiGet_re  +
push 0E4h  +
jmp loc_10085D5  +
push offset aMapi32_dll  +
push 104h  +
lea eax [ebp+LibFileName] +
push eax  +
call sub_1008389  +
test eax eax +
jge loc_10085EB  +
mov esi 80004005h +
push esi  +
push offset aCrasmapiGet_re  +
push 0ECh  +
push offset aDW7rtmBaseDiag  +
push offset dword_1001570  +
mov ecx offset unk_10156C0 +
call sub_1011507  +
jmp loc_1008649  +
lea eax [ebp+LibFileName] +
push eax  +
call ds:LoadLibraryW  +
mov [ebp+var_214] eax +
cmp eax edi +
jnz loc_1008628  +
push edi  +
push offset aCrasmapiGet_re  +
push 0F7h  +
push offset aDW7rtmBaseDiag  +
push offset dword_1001570  +
mov ecx offset unk_10156C0 +
call sub_1011507  +
mov esi 80004005h +
jmp loc_1008649  +
push offset aMapilogon  +
push eax  +
call ds:__imp_GetProcAddress  +
test eax eax +
jz loc_1008641  +
mov eax [ebp+var_214] +
mov [esi+0Ch] eax +
mov dword ptr [ebx] 1 +
mov esi edi +
mov ecx [ebp+var_4] +
pop edi  +
mov eax esi +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1010988  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+arg_4] +
xor ebx ebx +
cmp esi ebx +
jnz loc_100869A  +
push ebx  +
push offset aCrasmapiLogon  +
push 12Bh  +
push offset aDW7rtmBaseDiag  +
push offset dword_1001570  +
mov ecx offset unk_10156C0 +
call sub_1011507  +
mov eax 80004003h +
jmp loc_1008739  +
push edi  +
mov edi [ebp+arg_0] +
mov [esi] ebx +
mov [ebp+arg_4] 80004005h +
cmp [edi+428h] ebx +
jz loc_10086E6  +
mov ebx offset aDW7rtmBaseDiag +
push ebx  +
push 13Ah  +
mov edi offset unk_10156C0 +
push offset dword_1001590  +
mov ecx edi +
call sub_101148D  +
and [ebp+arg_4] 0 +
and dword ptr [esi] 0 +
push ebx  +
push 13Dh  +
push offset dword_10015A0  +
mov ecx edi +
call sub_101148D  +
jmp loc_1008735  +
cmp [edi+8] ebx +
jnz loc_1008726  +
lea eax [ebp+arg_0] +
push eax  +
lea ecx [edi-4] +
mov [ebp+arg_0] ebx +
call sub_10084FE  +
cmp [ebp+arg_0] ebx +
jnz loc_1008726  +
push ebx  +
push offset aCrasmapiLogon  +
push 14Eh  +
push offset aDW7rtmBaseDiag  +
push offset dword_1001570  +
mov ecx offset unk_10156C0 +
mov dword ptr [esi] 1 +
call sub_1011507  +
jmp loc_1008735  +
mov dword ptr [edi+428h] 1 +
mov [esi] ebx +
mov [ebp+arg_4] ebx +
mov eax [ebp+arg_4] +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+0Ch] +
test esi esi +
jnz loc_1008758  +
mov eax 80004003h +
jmp loc_100876A  +
mov ecx [ebp+8] +
add ecx 42Ch +
call sub_10082C3  +
mov [esi] eax +
xor eax eax +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+8] +
push dword ptr [ebp+0Ch]  +
add ecx 42Ch +
call sub_100827F  +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+0Ch] +
test esi esi +
jnz loc_10087A9  +
mov eax 80004003h +
jmp loc_10087BB  +
mov ecx [ebp+8] +
add ecx 430h +
call sub_10082C3  +
mov [esi] eax +
xor eax eax +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+8] +
push dword ptr [ebp+0Ch]  +
add ecx 430h +
call sub_100827F  +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+0Ch] +
test esi esi +
jnz loc_10087FA  +
mov eax 80004003h +
jmp loc_100880C  +
mov ecx [ebp+8] +
add ecx 434h +
call sub_10082C3  +
mov [esi] eax +
xor eax eax +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+8] +
push dword ptr [ebp+0Ch]  +
add ecx 434h +
call sub_100827F  +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push ebx  +
push esi  +
xor esi esi +
push edi  +
mov [ebp+var_C] ecx +
mov [ebp+var_4] esi +
call ds:GetACP  +
mov ecx [ebp+var_C] +
mov [ebp+CodePage] eax +
mov eax [ebp+arg_0] +
mov [eax] esi +
lea eax [ebp+var_4] +
push eax  +
mov [ebp+lpWideCharStr] esi +
call sub_10081A9  +
cmp eax esi +
mov [ebp+var_8] eax +
jge loc_100887B  +
push eax  +
push offset aCrasmapiBuildm  +
push 2B5h  +
jmp loc_10088A0  +
lea eax [ebp+lpWideCharStr] +
push eax  +
push offset aInvitation_msr  +
push 12Eh  +
call sub_10083FF  +
cmp eax esi +
mov [ebp+var_8] eax +
jge loc_10088B4  +
push eax  +
push offset aCrasmapiBuildm  +
push 2BAh  +
push offset aDW7rtmBaseDiag  +
push offset dword_1001570  +
mov ecx offset unk_10156C0 +
jmp loc_1008A09  +
mov eax [ebp+var_4] +
mov eax [eax+2Ch] +
add eax 10h +
push eax  +
push [ebp+CodePage]  +
push [ebp+lpWideCharStr]  +
call sub_1007E9F  +
mov ebx offset aDW7rtmBaseDiag +
mov edi offset dword_1001570 +
mov esi offset unk_10156C0 +
test eax eax +
jge loc_10089A1  +
push eax  +
push offset aCrasmapiBuildm  +
push 2C2h  +
push ebx  +
push edi  +
mov ecx esi +
call sub_1011507  +
push 104h  +
push 8  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov ecx [ebp+var_4] +
mov edx [ecx+2Ch] +
mov [edx+10h] eax +
mov eax [ecx+2Ch] +
cmp dword ptr [eax+10h] 0 +
jnz loc_1008964  +
mov eax 8007000Eh +
push eax  +
push offset aCrasmapiBuildm  +
push 2C6h  +
push ebx  +
push edi  +
mov ecx esi +
mov [ebp+var_8] eax +
call sub_1011507  +
mov ecx [ebp+var_C] +
lea eax [ebp+var_4] +
push eax  +
call sub_100801C  +
cmp [ebp+lpWideCharStr] 0 +
pop edi  +
pop esi  +
pop ebx  +
jz loc_100895D  +
push [ebp+lpWideCharStr]  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
mov eax [ebp+var_8] +
leave   +
retn 4  +
mov eax [eax+10h] +
test eax eax +
jnz loc_100897D  +
mov eax 8007000Eh +
push eax  +
push offset aCrasmapiBuildm  +
push 2C7h  +
jmp loc_100892A  +
push offset aInvitation_m_0  +
push 104h  +
push eax  +
call sub_10082E7  +
mov [ebp+var_8] eax +
test eax eax +
jge loc_10089A1  +
push eax  +
push offset aCrasmapiBuildm  +
push 2CBh  +
jmp loc_1008A05  +
mov ecx [ebp+var_4] +
mov ecx [ecx+2Ch] +
mov eax [ebp+var_C] +
mov eax [eax+438h] +
add ecx 0Ch +
push ecx  +
push [ebp+CodePage]  +
push eax  +
call sub_1007E9F  +
test eax eax +
jge loc_1008A13  +
push eax  +
push offset aCrasmapiBuildm  +
push 2D5h  +
push ebx  +
push edi  +
mov ecx esi +
call sub_1011507  +
mov ecx [ebp+var_4] +
mov ecx [ecx+2Ch] +
mov eax [ebp+var_C] +
mov eax [eax+438h] +
add ecx 0Ch +
push ecx  +
push 0FDE9h  +
push eax  +
call sub_1007E9F  +
mov [ebp+var_8] eax +
test eax eax +
jge loc_1008A13  +
push eax  +
push offset aCrasmapiBuildm  +
push 2DCh  +
push ebx  +
push edi  +
mov ecx esi +
call sub_1011507  +
jmp loc_1008A99  +
mov ecx [ebp+var_4] +
mov eax [ebp+var_C] +
mov eax [eax+430h] +
add ecx 4 +
push ecx  +
push [ebp+CodePage]  +
push eax  +
call sub_1007E9F  +
mov [ebp+var_8] eax +
test eax eax +
jge loc_1008A47  +
push eax  +
push offset aCrasmapiBuildm  +
push 2E6h  +
push ebx  +
push edi  +
mov ecx esi +
call sub_1011507  +
cmp [ebp+var_8] 0 +
jz loc_1008A56  +
mov eax [ebp+var_4] +
add eax 4 +
and dword ptr [eax] 0 +
mov ecx [ebp+var_4] +
mov eax [ebp+var_C] +
mov eax [eax+434h] +
add ecx 8 +
push ecx  +
push [ebp+CodePage]  +
push eax  +
call sub_1007E9F  +
mov [ebp+var_8] eax +
test eax eax +
jge loc_1008A8A  +
push eax  +
push offset aCrasmapiBuildm  +
push 2F1h  +
push ebx  +
push edi  +
mov ecx esi +
call sub_1011507  +
cmp [ebp+var_8] 0 +
jz loc_1008AA3  +
mov eax [ebp+var_4] +
add eax 8 +
and dword ptr [eax] 0 +
cmp [ebp+var_8] 0 +
jl loc_1008936  +
mov eax [ebp+var_4] +
mov ecx [ebp+arg_0] +
mov [ecx] eax +
jmp loc_1008942  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax [ebp+0Ch] +
push ebx  +
xor ebx ebx +
push esi  +
mov [ebp-8] ebx +
mov dword_101523C ebx +
cmp eax ebx +
jnz loc_1008AFC  +
mov eax 80004003h +
push eax  +
push offset aCrasmapiSendma  +
push 1A1h  +
push offset aDW7rtmBaseDiag  +
push offset dword_1001570  +
mov ecx offset unk_10156C0 +
mov [ebp-4] eax +
call sub_1011507  +
jmp loc_1008C1A  +
mov esi [ebp+8] +
mov [eax] ebx +
cmp [esi+428h] ebx +
jnz loc_1008B1C  +
xor eax eax +
inc eax  +
push eax  +
push offset aCrasmapiSendma  +
mov [ebp-4] eax +
push 1ABh  +
jmp loc_1008B88  +
push offset aMapisendmail  +
push dword ptr [esi+8]  +
call ds:__imp_GetProcAddress  +
mov dword_101523C eax +
cmp eax ebx +
jnz loc_1008B40  +
push ebx  +
push offset aCrasmapiSendma  +
push 1B4h  +
jmp loc_1008B81  +
lea eax [ebp-8] +
push eax  +
lea ecx [esi-4] +
call sub_1008837  +
cmp eax ebx +
mov [ebp-4] eax +
jge loc_1008B60  +
push eax  +
push offset aCrasmapiSendma  +
push 1BAh  +
jmp loc_1008B88  +
push ebx  +
push ebx  +
push dword ptr [ebp-8]  +
push offset loc_10080E1  +
push ebx  +
push ebx  +
call ds:CreateThread  +
cmp eax ebx +
jnz loc_1008B9E  +
push ebx  +
push offset aCrasmapiSendma  +
push 1C8h  +
mov dword ptr [ebp-4] 80004005h +
push offset aDW7rtmBaseDiag  +
push offset dword_1001570  +
mov ecx offset unk_10156C0 +
call sub_1011507  +
jmp loc_1008C1D  +
push 0FFFFFFFFh  +
push eax  +
call ds:WaitForSingleObject  +
test eax eax +
jnz loc_1008C1D  +
push edi  +
mov edi offset aDW7rtmBaseDiag +
push edi  +
push 1D0h  +
mov esi offset unk_10156C0 +
push offset dword_1001590  +
mov ecx esi +
call sub_101148D  +
mov eax dword_1015238 +
mov ecx [ebp+10h] +
mov [ecx] eax +
cmp dword_1015238 ebx +
jnz loc_1008BE8  +
mov eax [ebp+0Ch] +
mov dword ptr [eax] 1 +
mov [ebp-4] ebx +
jmp loc_1008C07  +
push ebx  +
push offset aCrasmapiSendma  +
push 1DDh  +
push edi  +
push offset dword_1001570  +
mov ecx esi +
mov dword ptr [ebp-4] 80004005h +
call sub_1011507  +
push edi  +
push 1E1h  +
push offset dword_10015A0  +
mov ecx esi +
call sub_101148D  +
pop edi  +
mov esi [ebp+8] +
lea eax [ebp-8] +
push eax  +
lea ecx [esi-4] +
call sub_100801C  +
mov eax [ebp-4] +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1Ch +
push esi  +
mov esi ds:GetMessageW +
push edi  +
xor edi edi +
jmp loc_1008C5F  +
lea eax [ebp+Msg] +
push eax  +
call ds:TranslateMessage  +
lea eax [ebp+Msg] +
push eax  +
call ds:DispatchMessageW  +
push edi  +
push edi  +
push edi  +
lea eax [ebp+Msg] +
push eax  +
call esi  +
test eax eax +
jg loc_1008C4B  +
pop edi  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebx  +
push esi  +
push edi  +
mov edi ds:WaitForSingleObject +
mov esi ecx +
xor ebx ebx +
push 0FFFFFFFFh  +
push dword ptr [esi+30h]  +
call edi  +
push dword ptr [esi+34h]  +
mov [esi+3Dh] bl +
push dword ptr [esi+30h]  +
call edi  +
test eax eax +
jz loc_1008C8B  +
cmp [esi+3Dh] bl +
jnz loc_1008C84  +
cmp [esi+8] ebx +
jnz loc_1008C84  +
call ds:CoSuspendClassObjects  +
cmp [esi+8] ebx +
jnz loc_1008C84  +
push dword ptr [esi+30h]  +
call ds:CloseHandle  +
push ebx  +
push ebx  +
push 12h  +
push dword ptr [esi+2Ch]  +
call ds:PostThreadMessageW  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call wcscpy_s  +
add esp 0Ch +
push eax  +
call sub_1003F5D  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call wcscat_s  +
add esp 0Ch +
push eax  +
call sub_1003F5D  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax+14h] +
test eax eax +
jz loc_1008D2A  +
push eax  +
call ds:CoRevokeClassObject  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+pUnk] 0 +
push esi  +
mov esi [ebp+arg_0] +
mov eax [esi+8] +
test eax eax +
jz loc_1008D84  +
push edi  +
lea ecx [ebp+pUnk] +
push ecx  +
push offset dword_10019FC  +
push dword ptr [esi+0Ch]  +
call eax  +
mov edi eax +
test edi edi +
jl loc_1008D74  +
lea eax [esi+14h] +
push eax  +
push [ebp+flags]  +
push [ebp+dwClsContext]  +
push [ebp+pUnk]  +
push dword ptr [esi]  +
call ds:CoRegisterClassObject  +
mov edi eax +
mov eax [ebp+pUnk] +
test eax eax +
jz loc_1008D81  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax edi +
pop edi  +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi] +
test eax eax +
jz loc_1008DA3  +
push eax  +
call ds:CloseHandle  +
and dword ptr [esi] 0 +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
cmp dword ptr [esi] 0 +
jz loc_1008DEC  +
push ebx  +
mov ebx [esi+8] +
cmp ebx [esi+0Ch] +
jnb loc_1008DDE  +
push edi  +
mov edi [ebx] +
test edi edi +
jz loc_1008DD5  +
mov eax [edi+10h] +
test eax eax +
jz loc_1008DD1  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
and dword ptr [edi+10h] 0 +
add ebx 4 +
cmp ebx [esi+0Ch] +
jb loc_1008DBE  +
pop edi  +
lea eax [esi+10h] +
push eax  +
call ds:DeleteCriticalSection  +
and dword ptr [esi] 0 +
pop ebx  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi ecx +
mov esi [edi+8] +
jmp loc_1008E10  +
mov eax [esi] +
test eax eax +
jz loc_1008E0D  +
push [ebp+arg_0]  +
call dword ptr [eax+20h]  +
add esi 4 +
cmp esi [edi+0Ch] +
jb loc_1008E01  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
test edi edi +
jz loc_1008E5C  +
mov esi ds:CharNextW +
cmp word ptr [edi] 0 +
jz loc_1008E5C  +
mov eax [ebp+lpsz] +
jmp loc_1008E4F  +
movzx ecx word ptr [eax] +
test cx cx +
jz loc_1008E53  +
cmp [edi] cx +
jz loc_1008E64  +
push eax  +
call esi  +
test eax eax +
jnz loc_1008E3F  +
push edi  +
call esi  +
mov edi eax +
test edi edi +
jnz loc_1008E34  +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
push edi  +
call esi  +
jmp loc_1008E5E  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_0] +
movzx eax word ptr [ebx] +
push esi  +
mov esi ds:CharUpperW +
push edi  +
push eax  +
call esi  +
movzx edi ax +
mov eax [ebp+lpsz] +
movzx eax word ptr [eax] +
push eax  +
call esi  +
movzx eax ax +
test di di +
jz loc_1008EE8  +
cmp di ax +
jnz loc_1008ED7  +
cmp di 20h +
jz loc_1008ED7  +
cmp di 9 +
jz loc_1008ED7  +
mov edi ds:CharNextW +
push ebx  +
call edi  +
push [ebp+lpsz]  +
mov ebx eax +
call edi  +
mov [ebp+lpsz] eax +
movzx eax word ptr [ebx] +
push eax  +
call esi  +
movzx edi ax +
mov eax [ebp+lpsz] +
movzx eax word ptr [eax] +
push eax  +
call esi  +
movzx eax ax +
test di di +
jnz loc_1008E99  +
test di di +
jz loc_1008EE8  +
cmp di 20h +
jz loc_1008EE8  +
cmp di 9 +
jnz loc_1008EF9  +
test ax ax +
jz loc_1008F04  +
cmp ax 20h +
jz loc_1008F04  +
cmp ax 9 +
jz loc_1008F04  +
cmp di ax +
sbb eax eax +
and eax 0FFFFFFFEh +
inc eax  +
jmp loc_1008F06  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
mov edi [ebp+arg_0] +
test edi edi +
jnz loc_1008F26  +
mov eax 80070057h +
jmp loc_1008F4E  +
xor eax eax +
push esi  +
mov esi [edi+8] +
inc eax  +
jmp loc_1008F48  +
test eax eax +
jl loc_1008F4D  +
mov ecx [esi] +
test ecx ecx +
jz loc_1008F45  +
push [ebp+flags]  +
push [ebp+dwClsContext]  +
push ecx  +
call sub_1008D33  +
add esi 4 +
cmp esi [edi+0Ch] +
jb loc_1008F2F  +
pop esi  +
pop edi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
mov edi [ebp+arg_0] +
test edi edi +
jnz loc_1008F6C  +
mov eax 80070057h +
jmp loc_1008F8D  +
push esi  +
mov esi [edi+8] +
xor eax eax +
jmp loc_1008F87  +
test eax eax +
jnz loc_1008F8C  +
mov ecx [esi] +
test ecx ecx +
jz loc_1008F84  +
push ecx  +
call sub_1008D14  +
add esi 4 +
cmp esi [edi+0Ch] +
jb loc_1008F74  +
pop esi  +
pop edi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+lpArguments] +
push esi  +
test ebx ebx +
jnz loc_1008FB4  +
push ebx  +
push ebx  +
push 1  +
push 0C0000005h  +
call ds:RaiseException  +
mov esi [ebx+8] +
test esi esi +
jz loc_1008FD2  +
push edi  +
push dword ptr [esi+4]  +
call dword ptr [esi]  +
mov edi [esi+8] +
push esi  +
call sub_101044F  +
pop ecx  +
mov esi edi +
test edi edi +
jnz loc_1008FBC  +
pop edi  +
and dword ptr [ebx+8] 0 +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
call sub_1008C75  +
xor eax eax +
pop ebp  +
retn 4  +
***
mov dword_1015200 esi +
mov ecx edx +
mov [esi+28h] eax +
call sub_1004001  +
test eax eax +
jge loc_1009031  +
mov byte_10151F4 1 +
jmp loc_1009038  +
mov dword ptr [esi+4] 24h +
pop edi  +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
push edi  +
lea edi [esi+4] +
cmp dword ptr [edi] 0 +
jz loc_100907A  +
cmp dword ptr [esi+0Ch] 0 +
jz loc_1009060  +
push edi  +
call sub_1008F97  +
and dword ptr [esi+0Ch] 0 +
mov eax [esi+28h] +
test eax eax +
jz loc_100906D  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
add esi 10h +
push esi  +
call ds:DeleteCriticalSection  +
and dword ptr [edi] 0 +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 240h +
mov eax dword_1015184 +
xor eax ebp +
mov [ebp+var_4] eax +
mov ecx [ebp+arg_4] +
mov eax [ebp+hModule] +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_8] +
mov [ebp+lpString] ecx +
mov ecx [ebp+arg_C] +
xor edx edx +
mov [ebp+var_240] edi +
mov [ebp+pptlib] ecx +
cmp edi edx +
jz loc_1009252  +
cmp ecx edx +
jz loc_1009252  +
mov [edi] edx +
mov [ecx] edx +
mov esi 104h +
push esi  +
lea ecx [ebp+szFile] +
push ecx  +
push eax  +
mov [ebp+var_238] edx +
call ds:GetModuleFileNameW  +
mov ebx eax +
test ebx ebx +
jnz loc_1009107  +
call sub_100406A  +
mov esi eax +
lea ecx [ebp+var_238] +
call sub_10047EB  +
mov eax esi +
jmp loc_1009257  +
cmp ebx esi +
jnz loc_1009112  +
mov esi 8007007Ah +
jmp loc_10090F5  +
xor esi esi +
lea eax [ebp+szFile] +
cmp [ebp+szFile] si +
jz loc_1009150  +
movzx ecx [ebp+szFile] +
movzx ecx cx +
cmp ecx 2Eh +
jz loc_100913B  +
cmp ecx 5Ch +
jnz loc_100913D  +
xor esi esi +
jmp loc_100913D  +
mov esi eax +
push eax  +
call ds:CharNextW  +
movzx ecx word ptr [eax] +
test cx cx +
jnz loc_100912A  +
test esi esi +
jnz loc_1009158  +
mov [ebp+var_230] eax +
jmp loc_100915E  +
mov [ebp+var_230] esi +
cmp [ebp+lpString] 0 +
jz loc_10091AC  +
push [ebp+lpString]  +
call ds:lstrlenW  +
lea ecx [eax+ebx] +
cmp ecx ebx +
jb loc_1009248  +
cmp ecx eax +
jb loc_1009248  +
mov eax 10Eh +
cmp ecx eax +
jnb loc_1009248  +
push [ebp+lpString]  +
sub eax ebx +
push eax  +
lea eax [ebp+ebx*2+szFile] +
push eax  +
call sub_1008CCE  +
add esp 0Ch +
push [ebp+pptlib]  +
mov ebx ds:LoadTypeLib +
lea eax [ebp+szFile] +
push eax  +
call ebx  +
mov esi eax +
test esi esi +
jge loc_1009227  +
mov eax [ebp+var_230] +
mov esi offset a_tlb +
lea edi [ebp+var_10] +
movs   +
lea ecx [ebp+szFile] +
sub eax ecx +
sar eax 1 +
movs   +
lea ecx [eax+5] +
movs   +
cmp ecx 104h +
ja loc_1009248  +
lea ecx [ebp+var_10] +
push ecx  +
mov ecx 10Eh +
sub ecx eax +
push ecx  +
push [ebp+var_230]  +
call sub_1008CCE  +
add esp 0Ch +
push [ebp+pptlib]  +
lea eax [ebp+szFile] +
push eax  +
call ebx  +
mov esi eax +
test esi esi +
jl loc_10090F5  +
mov edi [ebp+var_240] +
lea eax [ebp+szFile] +
push eax  +
call ds:SysAllocString  +
mov [edi] eax +
test eax eax +
jnz loc_10090F5  +
mov esi 8007000Eh +
jmp loc_10090F5  +
mov esi 80004005h +
jmp loc_10090F5  +
mov eax 80004003h +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1010988  +
leave   +
retn 10h  +
***
mov edi offset unk_1015204 +
movs   +
movs   +
movs   +
movs   +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
retn   +
***
mov edi edi +
push esi  +
push edi  +
push offset unk_10152E8  +
mov esi ecx +
call sub_1008F58  +
cmp byte ptr [esi+3Ch] 0 +
mov edi eax +
jz loc_10092B3  +
push dword ptr [esi+38h]  +
call ds:Sleep  +
mov eax edi +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
push edi  +
xor esi esi +
push esi  +
push esi  +
push esi  +
push esi  +
mov edi ecx +
call ds:CreateEventW  +
mov [edi+30h] eax +
cmp eax esi +
jnz loc_10092DE  +
xor eax eax +
jmp loc_1009304  +
push ebx  +
lea eax [ebp+ThreadId] +
push eax  +
push esi  +
push edi  +
push offset StartAddress  +
push esi  +
push esi  +
call ds:CreateThread  +
mov ebx eax +
cmp ebx esi +
jnz loc_1009301  +
push dword ptr [edi+30h]  +
call ds:CloseHandle  +
mov eax ebx +
pop ebx  +
pop edi  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
and [ebp+var_8] 0 +
and [ebp+var_4] 0 +
push esi  +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_8] +
push eax  +
push [ebp+libID]  +
push [ebp+hModule]  +
call sub_1009082  +
mov esi eax +
test esi esi +
jl loc_1009371  +
mov eax [ebp+var_4] +
mov ecx [eax] +
lea edx [ebp+libID] +
push edx  +
push eax  +
call dword ptr [ecx+1Ch]  +
mov esi eax +
test esi esi +
jl loc_1009371  +
mov eax [ebp+libID] +
push dword ptr [eax+14h]  +
movzx ecx word ptr [eax+1Ah] +
push dword ptr [eax+10h]  +
push ecx  +
movzx ecx word ptr [eax+18h] +
push ecx  +
push eax  +
call ds:UnRegisterTypeLib  +
push [ebp+libID]  +
mov esi eax +
mov eax [ebp+var_4] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+30h]  +
mov eax [ebp+var_4] +
test eax eax +
jz loc_100937E  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
push [ebp+var_8]  +
call ds:SysFreeString  +
mov eax esi +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 218h +
mov eax dword_1015184 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+hModule] +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_4] +
lea ecx [ebp+ptlib] +
push ecx  +
lea ecx [ebp+szFullPath] +
push ecx  +
push edi  +
xor ebx ebx +
push eax  +
mov [ebp+szFullPath] ebx +
mov [ebp+ptlib] ebx +
call sub_1009082  +
mov esi eax +
cmp esi ebx +
jl loc_10094F5  +
mov eax [ebp+ptlib] +
lea edx [ebp+var_218] +
push edx  +
push ebx  +
push ebx  +
push ebx  +
push 0FFFFFFFFh  +
mov [ebp+var_218] ebx +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+24h]  +
test eax eax +
jl loc_10094D4  +
cmp [ebp+var_218] ebx +
jz loc_10094D4  +
push [ebp+szFullPath]  +
call ds:SysStringLen  +
push eax  +
push [ebp+szFullPath]  +
lea eax [ebp+sz] +
push 104h  +
push eax  +
call sub_1003FC4  +
xor eax eax +
add esp 10h +
mov [ebp+var_6] ax +
cmp edi ebx +
jz loc_1009479  +
mov esi ds:lstrlenW +
lea eax [ebp+sz] +
push eax  +
call esi  +
push edi  +
mov ebx eax +
call esi  +
mov ecx eax +
mov edx ebx +
sub edx ecx +
lea eax [ebp+edx*2+sz] +
mov esi eax +
xor ebx ebx +
cmps   +
jnz loc_1009477  +
cmp edx 104h +
jnb loc_1009477  +
xor ecx ecx +
mov [eax] cx +
xor ebx ebx +
lea edi [ebp+sz] +
mov esi edi +
cmp [ebp+sz] bx +
jz loc_10094AF  +
push esi  +
call ds:CharNextW  +
movzx ecx word ptr [esi] +
cmp cx 5Ch +
jz loc_10094A6  +
cmp cx 2Fh +
jz loc_10094A6  +
cmp cx 3Ah +
jnz loc_10094A8  +
mov edi eax +
mov esi eax +
cmp [eax] bx +
jnz loc_100948A  +
lea eax [ebp+sz] +
sub edi eax +
sar edi 1 +
cmp edi 104h +
jnb loc_10094CB  +
xor eax eax +
mov [ebp+edi*2+sz] ax +
lea eax [ebp+sz] +
push eax  +
jmp loc_10094D5  +
push ebx  +
push [ebp+szFullPath]  +
push [ebp+ptlib]  +
call ds:RegisterTypeLib  +
push [ebp+var_218]  +
mov esi eax +
call ds:SysFreeString  +
mov eax [ebp+ptlib] +
cmp eax ebx +
jz loc_1009505  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
push [ebp+szFullPath]  +
call ds:SysFreeString  +
mov ecx [ebp+var_4] +
pop edi  +
mov eax esi +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1010988  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1BCh +
mov eax dword_1015184 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push ebx  +
push esi  +
mov esi [ebp+arg_4] +
xor ebx ebx +
mov [ebp+rguid] eax +
mov [ebp+ppv] ebx +
cmp esi ebx +
jnz loc_100955F  +
xor eax eax +
jmp loc_10097A1  +
push offset dword_1003B1C  +
push eax  +
call sub_100497F  +
test eax eax +
jnz loc_1009558  +
lea eax [ebp+ppv] +
push eax  +
push offset riid  +
push 1  +
push ebx  +
push offset rclsid  +
call ds:CoCreateInstance  +
test eax eax +
jge loc_100959E  +
mov eax [ebp+ppv] +
cmp eax ebx +
jz loc_1009558  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_1009558  +
mov eax esi +
push edi  +
mov [ebp+cSubKeys] eax +
cmp [esi] ebx +
jnz loc_10097B7  +
cmp [ebp+arg_8] ebx +
jnz loc_100978E  +
push 40h  +
lea eax [ebp+sz] +
push eax  +
push [ebp+rguid]  +
call ds:StringFromGUID2  +
push offset aClsid  +
mov esi 80h +
lea eax [ebp+SubKey] +
push esi  +
push eax  +
mov [ebp+var_1BC] ebx +
call wcscpy_s  +
add esp 0Ch +
push eax  +
call sub_1003F5D  +
lea eax [ebp+sz] +
push eax  +
lea eax [ebp+SubKey] +
push esi  +
push eax  +
call sub_1008CF1  +
push offset aRequiredCatego  +
lea eax [ebp+SubKey] +
push esi  +
push eax  +
call wcscat_s  +
add esp 18h +
push eax  +
call sub_1003F5D  +
mov edi 20019h +
push edi  +
lea ecx [ebp+SubKey] +
mov eax 80000000h +
push ecx  +
push eax  +
lea ecx [ebp+hKey] +
mov [ebp+var_1B8] eax +
mov [ebp+var_1B4] ebx +
mov [ebp+var_1B0] ebx +
mov [ebp+hKey] ebx +
mov [ebp+var_1A8] ebx +
mov [ebp+var_1A4] ebx +
mov [ebp+cSubKeys] ebx +
call sub_1004202  +
test eax eax +
jnz loc_10096BE  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
lea eax [ebp+cSubKeys] +
push eax  +
push ebx  +
push ebx  +
push ebx  +
push [ebp+hKey]  +
call ds:RegQueryInfoKeyW  +
lea ecx [ebp+hKey] +
mov [ebp+rguid] eax +
call sub_100418F  +
cmp [ebp+rguid] ebx +
jnz loc_10096BE  +
cmp [ebp+cSubKeys] ebx +
jnz loc_10096BE  +
lea eax [ebp+SubKey] +
push eax  +
lea ecx [ebp+var_1B8] +
call sub_1004109  +
push offset aClsid  +
lea eax [ebp+SubKey] +
push esi  +
push eax  +
call wcscpy_s  +
add esp 0Ch +
push eax  +
call sub_1003F5D  +
lea eax [ebp+sz] +
push eax  +
lea eax [ebp+SubKey] +
push esi  +
push eax  +
call sub_1008CF1  +
push offset aImplementedCat  +
lea eax [ebp+SubKey] +
push esi  +
push eax  +
call wcscat_s  +
add esp 18h +
push eax  +
call sub_1003F5D  +
push edi  +
lea eax [ebp+SubKey] +
push eax  +
push [ebp+var_1B8]  +
lea ecx [ebp+hKey] +
call sub_1004202  +
test eax eax +
jnz loc_100976D  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
lea eax [ebp+cSubKeys] +
push eax  +
push ebx  +
push ebx  +
push ebx  +
push [ebp+hKey]  +
call ds:RegQueryInfoKeyW  +
lea ecx [ebp+hKey] +
mov esi eax +
call sub_100418F  +
cmp esi ebx +
jnz loc_100976D  +
cmp [ebp+cSubKeys] ebx +
jnz loc_100976D  +
lea eax [ebp+SubKey] +
push eax  +
lea ecx [ebp+var_1B8] +
call sub_1004109  +
lea ecx [ebp+hKey] +
call sub_100418F  +
lea ecx [ebp+var_1B8] +
call sub_100418F  +
lea ecx [ebp+var_1BC] +
call sub_10047EB  +
mov eax [ebp+ppv] +
cmp eax ebx +
jz loc_100979E  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
xor eax eax +
pop edi  +
mov ecx [ebp+var_4] +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1010988  +
leave   +
retn 0Ch  +
mov eax [ebp+cSubKeys] +
mov esi [eax+4] +
lea edi [ebp+var_194] +
movs   +
movs   +
lea edx [ebp+var_194] +
movs   +
push edx  +
push 1  +
push [ebp+rguid]  +
movs   +
cmp [ebp+arg_8] ebx +
jz loc_1009808  +
cmp dword ptr [eax] 1 +
mov eax [ebp+ppv] +
mov ecx [eax] +
push eax  +
jnz loc_10097EB  +
call dword ptr [ecx+14h]  +
jmp loc_10097EE  +
call dword ptr [ecx+1Ch]  +
mov esi eax +
cmp esi ebx +
jge loc_100981E  +
mov eax [ebp+ppv] +
cmp eax ebx +
jz loc_1009804  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax esi +
jmp loc_10097A0  +
cmp dword ptr [eax] 1 +
mov eax [ebp+ppv] +
mov ecx [eax] +
push eax  +
jnz loc_100981B  +
call dword ptr [ecx+18h]  +
jmp loc_100981E  +
call dword ptr [ecx+20h]  +
add [ebp+cSubKeys] 8 +
mov eax [ebp+cSubKeys] +
cmp [eax] ebx +
jnz loc_10097B1  +
jmp loc_10095AF  +
***
adc eax offset GetCurrentThreadId +
and dword ptr [esi+30h] 0 +
push 0  +
push 0  +
mov [esi+2Ch] eax +
mov dword ptr [esi+34h] 1388h +
mov dword ptr [esi+38h] 3E8h +
mov byte ptr [esi+3Ch] 1 +
mov byte ptr [esi+3Eh] 0 +
call ds:CoInitializeEx  +
test eax eax +
jge loc_1009893  +
cmp eax 80010106h +
jnz loc_100988A  +
push offset aMscoree_dll  +
call ds:GetModuleHandleW  +
test eax eax +
jnz loc_1009897  +
mov byte_10151F4 1 +
jmp loc_10098A3  +
mov byte ptr [esi+3Eh] 1 +
push 1  +
mov ecx offset unk_10152E8 +
call sub_1008DF3  +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
push edi  +
mov edi ecx +
mov esi offset unk_10152E8 +
push 0  +
mov ecx esi +
call sub_1008DF3  +
mov ecx edi +
call sub_1009042  +
mov ecx esi +
call sub_1008DAA  +
cmp byte ptr [edi+3Eh] 0 +
jz loc_10098DA  +
call ds:CoUninitialize  +
mov ecx edi +
pop edi  +
pop esi  +
jmp sub_1009042  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
push edi  +
push 5  +
push 4  +
mov ebx offset unk_10152E8 +
push ebx  +
mov esi ecx +
call sub_1008F12  +
mov edi eax +
test edi edi +
jl loc_100996D  +
jnz loc_1009967  +
cmp byte ptr [esi+3Ch] 0 +
jz loc_1009953  +
mov ecx esi +
call sub_10092BD  +
mov [ebp+hHandle] eax +
test eax eax +
jnz loc_1009925  +
mov edi 80004005h +
jmp loc_100995F  +
call ds:CoResumeClassObjects  +
mov edi eax +
test edi edi +
jge loc_1009949  +
push dword ptr [esi+30h]  +
call ds:SetEvent  +
mov eax [esi+34h] +
add eax eax +
push eax  +
push [ebp+hHandle]  +
call ds:WaitForSingleObject  +
lea ecx [ebp+hHandle] +
call sub_1008D8E  +
jmp loc_100995B  +
call ds:CoResumeClassObjects  +
mov edi eax +
test edi edi +
jge loc_100996B  +
push ebx  +
call sub_1008F58  +
jmp loc_100996B  +
mov byte ptr [esi+3Ch] 0 +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push esi  +
mov esi [ebp+arg_0] +
test esi esi +
jnz loc_100998F  +
mov eax 80070057h +
jmp loc_1009A02  +
mov edx [esi+8] +
xor eax eax +
push ebx  +
push edi  +
mov [ebp+var_8] eax +
mov [ebp+var_4] edx +
cmp edx [esi+0Ch] +
jnb loc_10099F0  +
mov ebx [edx] +
test ebx ebx +
jz loc_10099DE  +
cmp [ebp+arg_8] 0 +
jz loc_10099BE  +
mov edi [ebx] +
mov esi [ebp+arg_8] +
push 4  +
pop ecx  +
xor eax eax +
cmps   +
mov esi [ebp+arg_0] +
jnz loc_10099DE  +
push 1  +
call dword ptr [ebx+4]  +
test eax eax +
jl loc_1009A00  +
push 1  +
call dword ptr [ebx+1Ch]  +
push eax  +
push dword ptr [ebx]  +
call sub_1009529  +
mov [ebp+var_8] eax +
test eax eax +
jl loc_1009A00  +
mov edx [ebp+var_4] +
add edx 4 +
mov [ebp+var_4] edx +
cmp edx [esi+0Ch] +
jb loc_10099A1  +
mov eax [ebp+var_8] +
test eax eax +
jl loc_1009A00  +
cmp [ebp+arg_4] 0 +
jz loc_1009A00  +
push 0  +
push dword ptr [esi+4]  +
call sub_1009393  +
pop edi  +
pop ebx  +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push esi  +
mov esi [ebp+arg_0] +
test esi esi +
jnz loc_1009A22  +
mov eax 80070057h +
jmp loc_1009A95  +
mov edx [esi+8] +
xor eax eax +
push ebx  +
push edi  +
mov [ebp+var_8] eax +
mov [ebp+var_4] edx +
cmp edx [esi+0Ch] +
jnb loc_1009A83  +
mov ebx [edx] +
test ebx ebx +
jz loc_1009A71  +
cmp [ebp+arg_8] 0 +
jz loc_1009A51  +
mov edi [ebx] +
mov esi [ebp+arg_8] +
push 4  +
pop ecx  +
xor eax eax +
cmps   +
mov esi [ebp+arg_0] +
jnz loc_1009A71  +
push 0  +
call dword ptr [ebx+1Ch]  +
push eax  +
push dword ptr [ebx]  +
call sub_1009529  +
test eax eax +
jl loc_1009A93  +
push 0  +
call dword ptr [ebx+4]  +
mov [ebp+var_8] eax +
test eax eax +
jl loc_1009A93  +
mov edx [ebp+var_4] +
add edx 4 +
mov [ebp+var_4] edx +
cmp edx [esi+0Ch] +
jb loc_1009A34  +
mov eax [ebp+var_8] +
test eax eax +
jl loc_1009A93  +
cmp [ebp+arg_4] 0 +
jz loc_1009A93  +
push 0  +
push dword ptr [esi+4]  +
call sub_100930D  +
pop edi  +
pop ebx  +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov ecx [eax] +
push offset aF8fd03a6Ddd94c  +
push offset aAppid  +
push eax  +
call dword ptr [ecx+0Ch]  +
pop ebp  +
retn 4  +
***
add ecx 8 +
push ecx  +
call ds:InterlockedIncrement  +
retn   +
***
mov eax [ecx+8] +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+8] +
push edi  +
xor edi edi +
cmp ebx edi +
jnz loc_1009AF0  +
mov eax 80004003h +
jmp loc_1009B21  +
push esi  +
lea esi [ecx+28h] +
cmp [esi] edi +
jnz loc_1009B12  +
push esi  +
push offset dword_10020D4  +
push 1  +
push edi  +
push offset dword_10014FC  +
call ds:CoCreateInstance  +
mov edi eax +
test edi edi +
jl loc_1009B1E  +
mov eax [esi] +
mov [ebx] eax +
mov esi [esi] +
mov eax [esi] +
push esi  +
call dword ptr [eax+4]  +
mov eax edi +
pop esi  +
pop edi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
push edi  +
lea eax [esi+8] +
push eax  +
call ds:InterlockedDecrement  +
mov edi eax +
xor eax eax +
cmp edi eax +
jnz loc_1009B65  +
cmp [esi+3Ch] al +
jz loc_1009B58  +
push dword ptr [esi+30h]  +
mov byte ptr [esi+3Dh] 1 +
call ds:SetEvent  +
jmp loc_1009B65  +
push eax  +
push eax  +
push 12h  +
push dword ptr [esi+2Ch]  +
call ds:PostThreadMessageW  +
mov eax edi +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_10098AC  +
test byte ptr [ebp+8] 1 +
jz loc_1009B89  +
push esi  +
call sub_101044F  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
push [ebp+arg_0]  +
mov edi ecx +
call sub_10098E8  +
mov esi eax +
test esi esi +
jnz loc_1009BB5  +
mov ecx edi +
call sub_1008C37  +
test esi esi +
jl loc_1009BC0  +
mov ecx edi +
call sub_1009292  +
mov esi eax +
pop edi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push offset unk_10152E8  +
call sub_1009979  +
test eax eax +
jl loc_1009BF8  +
mov ecx dword_10151F8 +
test ecx ecx +
jz loc_1009BF8  +
push hModule  +
call ecx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax dword_10151FC +
test eax eax +
jz loc_1009C15  +
call eax  +
test eax eax +
jl loc_1009C25  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push offset unk_10152E8  +
call sub_1009A0C  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
and [ebp+var_8] 0 +
and [ebp+var_4] 0 +
lea eax [ebp+var_10] +
push eax  +
push [ebp+arg_0]  +
mov [ebp+var_10] offset aAppid +
push 65h  +
push dword_1015200  +
mov [ebp+var_C] offset aF8fd03a6Ddd94c +
call sub_1007B19  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov eax dword_1015184 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push ebx  +
mov ebx [ebp+arg_4] +
and dword ptr [ebx] 0 +
push esi  +
push edi  +
mov [ebp+var_10] ecx +
mov esi offset asc_1002110 +
lea edi [ebp+sz] +
movs   +
lea ecx [ebp+sz] +
push ecx  +
push eax  +
movs   +
call sub_1008E20  +
xor edi edi +
jmp loc_1009CCB  +
push offset sz  +
push esi  +
call sub_1008E6E  +
test eax eax +
jz loc_1009CE4  +
push offset aRegserver  +
push esi  +
call sub_1008E6E  +
test eax eax +
jz loc_1009D01  +
lea eax [ebp+sz] +
push eax  +
push esi  +
call sub_1008E20  +
mov esi eax +
cmp esi edi +
jnz loc_1009CA3  +
mov al 1 +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1010988  +
leave   +
retn 8  +
mov ecx [ebp+var_10] +
push edi  +
push 1  +
call sub_1009C01  +
cmp eax edi +
mov [ebx] eax +
jl loc_1009CFD  +
push edi  +
call sub_1009C2E  +
mov [ebx] eax +
xor al al +
jmp loc_1009CD3  +
push 1  +
call sub_1009C2E  +
cmp eax edi +
mov [ebx] eax +
jl loc_1009CFD  +
mov ecx [ebp+var_10] +
push edi  +
push 1  +
call sub_1009BCD  +
jmp loc_1009CFB  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
cmp byte_10151F4 0 +
push esi  +
mov esi ecx +
jz loc_1009D37  +
or eax 0FFFFFFFFh +
jmp loc_1009D61  +
and [ebp+var_4] 0 +
call ds:GetCommandLineW  +
lea ecx [ebp+var_4] +
push ecx  +
push eax  +
mov ecx esi +
call sub_1009C69  +
cmp al 1 +
jnz loc_1009D5E  +
push [ebp+arg_0]  +
mov ecx esi +
call sub_1009B95  +
mov [ebp+var_4] eax +
mov eax [ebp+var_4] +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi offset unk_10156C0 +
push edi  +
mov ecx esi +
call sub_101132F  +
push offset dword_10015C0  +
mov ecx esi +
xor edi edi +
call sub_1011350  +
push edi  +
push edi  +
push 1  +
push edi  +
call ds:HeapSetInformation  +
mov eax [ebp+arg_8] +
cmp eax edi +
jz loc_1009DD3  +
movzx ecx word ptr [eax] +
cmp cx 2Dh +
jz loc_1009DAD  +
cmp cx 2Fh +
jnz loc_1009DD3  +
push 0FFFFFFFFh  +
push offset aOfferraupdate  +
push 0FFFFFFFFh  +
add eax 2 +
push eax  +
push 1  +
push 7Fh  +
call ds:CompareStringW  +
cmp eax 2 +
jnz loc_1009DD3  +
lea ecx [ebp+arg_8+3] +
call sub_100CB04  +
jmp loc_1009DE2  +
push [ebp+arg_C]  +
mov ecx offset dword_1015240 +
call sub_1009D20  +
mov edi eax +
push offset dword_10015D0  +
mov ecx esi +
call sub_1011350  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
xor esi esi +
push dword ptr [ebp+0Ch]  +
push off_101513C[esi]  +
call sub_100497F  +
test eax eax +
jnz loc_1009E23  +
add esi 4 +
cmp esi 4 +
jb loc_1009E03  +
inc eax  +
pop esi  +
pop ebp  +
retn 8  +
***
xor eax eax +
jmp loc_1009E1E  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
xor eax eax +
test ecx ecx +
jz loc_1009E42  +
cmp ecx 7FFFFFFFh +
jbe loc_1009E47  +
mov eax 80070057h +
test eax eax +
jl loc_1009E84  +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
lea eax [ebp+arg_C] +
push eax  +
push [ebp+arg_8]  +
lea esi [ecx-1] +
push esi  +
push edi  +
xor ebx ebx +
call ds:_vsnwprintf  +
add esp 10h +
test eax eax +
jl loc_1009E74  +
cmp eax esi +
ja loc_1009E74  +
jnz loc_1009E7F  +
jmp loc_1009E79  +
mov ebx 8007007Ah +
xor eax eax +
mov [edi+esi*2] ax +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
push esi  +
mov esi [ebp+arg_8] +
test ecx ecx +
jz loc_1009ED7  +
mov eax [ebp+arg_4] +
cmp eax 7FFFFFFFh +
ja loc_1009ED7  +
push edi  +
xor edi edi +
mov edx eax +
test eax eax +
jz loc_1009EBC  +
cmp [ecx] di +
jz loc_1009EB8  +
inc ecx  +
inc ecx  +
dec edx  +
jnz loc_1009EAE  +
test edx edx +
jnz loc_1009EC1  +
mov edi 80070057h +
test esi esi +
jz loc_1009ED2  +
test edi edi +
jl loc_1009ECF  +
sub eax edx +
mov [esi] eax +
jmp loc_1009ED2  +
and dword ptr [esi] 0 +
mov eax edi +
pop edi  +
jmp loc_1009EDC  +
mov eax 80070057h +
test eax eax +
jge loc_1009EE7  +
test esi esi +
jz loc_1009EE7  +
and dword ptr [esi] 0 +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push ebx  +
mov ebx [ebp+0Ch] +
push esi  +
push edi  +
xor edi edi +
cmp ebx edi +
jnz loc_1009F2B  +
mov esi 80004003h +
push esi  +
push offset aCrasrvGetnovic  +
push 38h  +
push offset aDW7rtmBaseDi_0  +
push offset dword_1001570  +
mov ecx offset unk_10156C0 +
call sub_1011507  +
jmp loc_100A094  +
lea eax [ebp+0Ch] +
push eax  +
push offset stru_10019BC  +
push 4  +
push edi  +
push offset stru_1001D58  +
mov [ebp-4] edi +
mov [ebp-0Ch] edi +
mov [ebp-8] edi +
mov [ebp+0Ch] edi +
mov [ebx] edi +
call ds:CoCreateInstance  +
mov esi eax +
cmp esi edi +
jge loc_1009F6F  +
push offset a6912764425114d  +
push offset dword_10015B0  +
mov ecx offset unk_10156C0 +
call sub_101139F  +
jmp loc_100A06F  +
mov eax [ebp+0Ch] +
mov ecx [eax] +
push edi  +
push edi  +
push 1  +
push eax  +
call dword ptr [ecx+1Ch]  +
mov esi eax +
cmp esi edi +
jge loc_1009F8F  +
push esi  +
push offset aCrasrvGetnovic  +
push 5Fh  +
jmp loc_100A05B  +
mov eax [ebp+0Ch] +
mov ecx [eax] +
push edi  +
lea edx [ebp-8] +
push edx  +
push eax  +
call dword ptr [ecx+2Ch]  +
mov esi eax +
cmp esi edi +
jge loc_1009FB0  +
push esi  +
push offset aCrasrvGetnovic  +
push 64h  +
jmp loc_100A05B  +
cmp [ebp-8] edi +
jnz loc_1009FC7  +
mov esi 80070052h +
push esi  +
push offset aCrasrvGetnovic  +
push 6Bh  +
jmp loc_100A05B  +
mov eax [ebp+0Ch] +
mov ecx [eax] +
lea edx [ebp-4] +
push edx  +
push eax  +
call dword ptr [ecx+20h]  +
mov esi eax +
cmp esi edi +
jge loc_1009FE4  +
push esi  +
push offset aCrasrvGetnovic  +
push 72h  +
jmp loc_100A05B  +
mov eax [ebp-4] +
mov [ebp-10h] eax +
cmp eax edi +
jnz loc_1009FFD  +
mov esi 8007000Eh +
push esi  +
push offset aCrasrvGetnovic  +
push 78h  +
jmp loc_100A05B  +
lea ecx [ebp-0Ch] +
push ecx  +
push 7FFFFFFFh  +
push eax  +
call sub_1009E8B  +
mov esi eax +
cmp esi edi +
jge loc_100A01C  +
push esi  +
push offset aCrasrvGetnovic  +
push 7Ch  +
jmp loc_100A05B  +
mov esi [ebp-0Ch] +
lea eax [esi+esi+2] +
push eax  +
call ds:CoTaskMemAlloc  +
mov [ebx] eax +
cmp eax edi +
jnz loc_100A03F  +
mov esi 8007000Eh +
push esi  +
push offset aCrasrvGetnovic  +
push 7Fh  +
jmp loc_100A05B  +
push dword ptr [ebp-10h]  +
inc esi  +
push esi  +
push eax  +
call sub_100834F  +
mov esi eax +
cmp esi edi +
jge loc_100A07E  +
push esi  +
push offset aCrasrvGetnovic  +
push 83h  +
push offset aDW7rtmBaseDi_0  +
push offset dword_1001570  +
mov ecx offset unk_10156C0 +
call sub_1011507  +
mov eax [ebx] +
cmp eax edi +
jz loc_100A07E  +
push eax  +
call ds:CoTaskMemFree  +
mov [ebx] edi +
mov eax [ebp+0Ch] +
cmp eax edi +
jz loc_100A08B  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
push dword ptr [ebp-4]  +
call ds:SysFreeString  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 30h +
mov ecx [ebp+0Ch] +
push ebx  +
push esi  +
push edi  +
xor edi edi +
mov [ebp-4] edi +
mov [ebp-18h] edi +
mov [ebp-8] edi +
mov [ebp-0Ch] edi +
mov [ebp-10h] edi +
mov [ebp-14h] edi +
mov [ebp-20h] edi +
cmp ecx edi +
jnz loc_100A0F7  +
mov eax 80004003h +
push eax  +
push offset aCrasrvGetsessi  +
push 0A9h  +
mov [ebp-4] eax +
push offset aDW7rtmBaseDi_0  +
push offset dword_1001570  +
mov ecx offset unk_10156C0 +
call sub_1011507  +
jmp loc_100A3CC  +
