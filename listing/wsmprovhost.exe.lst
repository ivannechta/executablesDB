mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push 0  +
lea eax [ebp-1] +
push eax  +
push [ebp+arg_0]  +
call ?Alloc@WSManMemory@@SGPAXIABVCallSite@TestSystem@@W4Mode@3@@Z  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
lea eax [ebp-1] +
push eax  +
push [ebp+arg_0]  +
call ?Free@WSManMemory@@SGXPAXABVCallSite@TestSystem@@@Z  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0B4h +
mov eax [ebp+arg_C] +
mov ecx [ebp+arg_14] +
cdq   +
mov [ebp+var_9C] eax +
mov [ebp+var_98] edx +
lea eax [ebp+arg_10] +
cdq   +
push ebx  +
push esi  +
xor esi esi +
mov [ebp+var_84] eax +
mov eax [ecx] +
mov [ebp+var_80] edx +
xor edx edx +
push edi  +
mov [ebp+hMem] esi +
mov [ebp+var_88] 1A0000h +
mov [ebp+var_B0] 0FFh +
mov [ebp+var_7C] 2 +
cmp eax esi +
jz loc_1001480  +
lea edi [ebp+var_7C] +
add ecx 4 +
mov ebx [ecx] +
add esi ebx +
cmp esi ebx +
jb loc_10014AF  +
inc edx  +
add edi 10h +
mov [ebp+arg_C] edx +
cmp edx 7 +
ja loc_100141A  +
cdq   +
mov [edi-4] edx +
mov edx [ebp+arg_C] +
mov [edi-8] eax +
mov [edi] ebx +
add ecx 4 +
mov eax [ecx] +
test eax eax +
jnz loc_10013F3  +
cmp esi 2000h +
ja loc_10014AF  +
cmp edx 7 +
jbe loc_1001480  +
push esi  +
xor ebx ebx +
push ebx  +
call ds:LocalAlloc  +
mov [ebp+hMem] eax +
cmp eax ebx +
jz loc_10014AF  +
cdq   +
mov [ebp+var_6C] esi +
mov esi [ebp+arg_14] +
mov [ebp+var_74] eax +
mov [ebp+var_70] edx +
jmp loc_100146E  +
add esi 4 +
mov edi [esi] +
push edi  +
push eax  +
mov eax [ebp+hMem] +
add eax ebx +
push eax  +
call memcpy  +
add esp 0Ch +
add ebx edi +
add esi 4 +
mov eax [esi] +
test eax eax +
jnz loc_1001454  +
push 50h  +
pop eax  +
mov word ptr [ebp+var_B4] ax +
jmp loc_100148D  +
add edx 4 +
shl edx 4 +
mov word ptr [ebp+var_B4] dx +
lea eax [ebp+var_B4] +
push eax  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call ds:EtwLogTraceEvent  +
cmp [ebp+hMem] 0 +
jz loc_10014AF  +
push [ebp+hMem]  +
call ds:LocalFree  +
pop edi  +
pop esi  +
xor eax eax +
pop ebx  +
leave   +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
lea eax [ebp+1Ch] +
push eax  +
push dword ptr [ebp+18h]  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call sub_1001399  +
pop ebp  +
retn   +
***
mov edi edi +
push edi  +
push offset LibFileName  +
call ds:LoadLibraryW  +
mov edi eax +
test edi edi +
jz loc_100154E  +
push esi  +
mov esi ds:GetProcAddress +
push offset ProcName  +
push edi  +
call esi  +
mov off_1003004 eax +
test eax eax +
jnz loc_100151F  +
and dword_1003080 eax +
mov off_1003004 offset loc_10014BD +
jmp loc_100153A  +
push (offset aAgsusquE_?mTra+10h)  +
push edi  +
mov dword_1003080 1 +
call esi  +
mov off_1003008 eax +
test eax eax +
jnz loc_1001544  +
mov off_1003008 offset sub_1001399 +
push edi  +
call ds:FreeLibrary  +
pop esi  +
pop edi  +
retn   +
and dword_1003080 0 +
mov off_1003004 offset loc_10014BD +
mov off_1003008 offset sub_1001399 +
pop edi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
call sub_10014E1  +
lea eax [ebp+arg_14] +
push eax  +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call off_1003008  +
xor eax eax +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+arg_8]  +
push [ebp+arg_C]  +
push 2Bh  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call off_1003004  +
add esp 18h +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
xor ecx ecx +
xor edx edx +
mov [eax+10h] ecx +
mov [eax] ecx +
mov byte ptr [eax+18h] 1 +
mov [eax+19h] cl +
mov [eax+1Ah] dx +
mov [eax+1Ch] ecx +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax [ebp+10h] +
xor edx edx +
push ebx  +
mov [eax] edx +
mov eax [ebp+8] +
sub eax 4 +
push esi  +
mov esi [ebp+0Ch] +
push edi  +
mov edi esi +
jz loc_100161A  +
dec eax  +
jz loc_1001611  +
push 57h  +
pop eax  +
jmp loc_1001688  +
xor ebx ebx +
xor eax eax +
mov [ebp+0Fh] al +
jmp loc_1001640  +
push dword ptr [ebp+14h]  +
call ds:EtwGetTraceLoggerHandle  +
mov ebx eax +
push edx  +
push ebx  +
mov [ebp-4] edx +
call ds:EtwGetTraceEnableLevel  +
push dword ptr [ebp-4]  +
mov [ebp+0Fh] al +
push ebx  +
call ds:EtwGetTraceEnableFlags  +
mov edx [ebp-4] +
movzx ecx word ptr [esi+1Ah] +
test cl 1 +
jz loc_1001669  +
cmp dword ptr [esi+10h] 0 +
jz loc_1001669  +
mov ecx [esi+10h] +
mov [ecx] ebx +
mov [ecx+4] edx +
movzx ecx byte ptr [ebp+0Fh] +
mov edx [esi+10h] +
mov [edx+0Ch] ecx +
mov ecx [esi+10h] +
mov [ecx+8] eax +
jmp loc_1001686  +
test cl 2 +
jz loc_1001677  +
mov esi [esi+10h] +
test esi esi +
jz loc_1001677  +
mov edi esi +
mov cl [ebp+0Fh] +
mov [edi+10h] ebx +
mov [edi+14h] edx +
mov [edi+19h] cl +
mov [edi+1Ch] eax +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push esi  +
mov esi off_100300C +
push edi  +
mov edi offset dword_1003068 +
jmp loc_10016D3  +
mov eax [edi] +
and [ebp+var_4] 0 +
lea ecx [esi+8] +
push ecx  +
push 0  +
push 0  +
lea ecx [ebp+var_8] +
push ecx  +
push 1  +
push eax  +
push esi  +
push offset loc_10015EB  +
add edi 4 +
mov [ebp+var_8] eax +
call ds:EtwRegisterTraceGuidsW  +
mov esi [esi] +
test esi esi +
jnz loc_10016AA  +
pop edi  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push esi  +
mov esi off_100300C +
push edi  +
mov edi offset off_100300C +
cmp esi edi +
jz loc_100171F  +
jmp loc_1001715  +
mov eax [esi+8] +
mov ecx [esi+0Ch] +
mov edx eax +
or edx ecx +
jz loc_1001713  +
push ecx  +
push eax  +
call ds:EtwUnregisterTraceGuids  +
and dword ptr [esi+8] 0 +
and dword ptr [esi+0Ch] 0 +
mov esi [esi] +
test esi esi +
jnz loc_10016F7  +
mov off_100300C edi +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+0Ch] +
push esi  +
xor esi esi +
dec eax  +
dec eax  +
jz loc_100174C  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call ds:DefWindowProcW  +
mov esi eax +
jmp loc_1001759  +
push esi  +
push esi  +
push 12h  +
push dword ptr [ebp+8]  +
call ds:PostMessageW  +
mov eax esi +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 28h +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
xor esi esi +
push 7F01h  +
push esi  +
mov [ebp+WndClass.style] 3 +
mov [ebp+WndClass.lpfnWndProc] offset loc_1001727 +
mov [ebp+WndClass.cbClsExtra] esi +
mov [ebp+WndClass.cbWndExtra] esi +
mov [ebp+WndClass.hInstance] edi +
call ds:LoadIconW  +
push 7F00h  +
push esi  +
mov [ebp+WndClass.hIcon] eax +
call ds:LoadCursorW  +
mov [ebp+WndClass.hCursor] eax +
mov eax lpClassName +
mov [ebp+WndClass.lpszClassName] eax +
lea eax [ebp+WndClass] +
push eax  +
mov [ebp+WndClass.hbrBackground] 6 +
mov [ebp+WndClass.lpszMenuName] esi +
call ds:RegisterClassW  +
push esi  +
push edi  +
push esi  +
push esi  +
mov eax 80000000h +
push eax  +
push eax  +
push eax  +
push eax  +
mov eax lpClassName +
push 20CF0000h  +
push eax  +
push eax  +
push esi  +
call ds:CreateWindowExW  +
mov edi eax +
push esi  +
push edi  +
call ds:ShowWindow  +
push edi  +
call ds:UpdateWindow  +
push esi  +
push edi  +
call ds:GetSystemMenu  +
cmp eax esi +
jz loc_100180F  +
push esi  +
push 0F120h  +
push eax  +
call ds:DeleteMenu  +
mov eax edi +
pop edi  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+hWnd]  +
call ds:DestroyWindow  +
push [ebp+hInstance]  +
push lpClassName  +
call ds:UnregisterClassW  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1Ch +
push esi  +
mov esi ds:GetMessageW +
push edi  +
xor edi edi +
jmp loc_100186A  +
lea eax [ebp+Msg] +
push eax  +
call ds:TranslateMessage  +
lea eax [ebp+Msg] +
push eax  +
call ds:DispatchMessageW  +
push edi  +
push edi  +
push edi  +
lea eax [ebp+Msg] +
push eax  +
call esi  +
cmp eax 1 +
jz loc_1001856  +
pop edi  +
pop esi  +
leave   +
retn   +
***
mov eax dwRegister +
push esi  +
mov esi ds:CoRevokeClassObject +
test eax eax +
jz loc_100189B  +
push eax  +
call esi  +
and dwRegister 0 +
mov eax dword_1003078 +
test eax eax +
jz loc_10018AE  +
push eax  +
call esi  +
and dword_1003078 0 +
xor eax eax +
pop esi  +
retn   +
***
call sub_1001881  +
call ds:CoUninitialize  +
xor eax eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 124h +
mov eax dword_1003014 +
xor eax ebp +
mov [ebp+var_4] eax +
push edi  +
xor edi edi +
push edi  +
push edi  +
call ds:CoInitializeEx  +
cmp eax edi +
jl loc_10019B5  +
push ebx  +
push edi  +
push 40h  +
push edi  +
push [ebp+dwImpLevel]  +
push [ebp+dwAuthnLevel]  +
push edi  +
push edi  +
push 0FFFFFFFFh  +
push edi  +
call ds:CoInitializeSecurity  +
mov ebx eax +
cmp ebx edi +
jge loc_100191B  +
call ds:CoUninitialize  +
mov eax ebx +
jmp loc_10019B4  +
push esi  +
mov esi 11Ch +
push esi  +
lea eax [ebp+VersionInformation] +
push edi  +
push eax  +
call memset  +
add esp 0Ch +
lea eax [ebp+VersionInformation] +
push eax  +
mov [ebp+VersionInformation.dwOSVersionInfoSize] esi +
call ds:GetVersionExW  +
xor esi esi +
inc esi  +
cmp [ebp+VersionInformation.dwMajorVersion] 5 +
jnz loc_1001959  +
cmp [ebp+VersionInformation.dwMinorVersion] esi +
jz loc_10019B1  +
lea eax [ebp+ppv] +
push eax  +
push offset riid  +
push esi  +
push edi  +
push offset rclsid  +
mov [ebp+ppv] edi +
call ds:CoCreateInstance  +
test eax eax +
jl loc_10019A6  +
mov eax [ebp+ppv] +
mov ecx [eax] +
push esi  +
push esi  +
push eax  +
call dword ptr [ecx+0Ch]  +
mov esi eax +
mov eax [ebp+ppv] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
cmp esi edi +
jge loc_10019A2  +
call ds:CoUninitialize  +
mov eax esi +
jmp loc_10019B3  +
call ds:CoUninitialize  +
mov ebx 8007000Eh +
mov eax ebx +
pop esi  +
pop ebx  +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop edi  +
call sub_1002055  +
leave   +
retn 8  +
***
call __EH_prolog3  +
push 8  +
call sub_1001365  +
pop ecx  +
mov ecx eax +
mov [ebp-10h] ecx +
xor edi edi +
mov [ebp-4] edi +
cmp ecx edi +
jz loc_10019F2  +
call sub_1001D0D  +
jmp loc_10019F4  +
xor eax eax +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov pUnk eax +
cmp eax edi +
jnz loc_1001A06  +
push 0Eh  +
pop eax  +
jmp loc_1001A77  +
mov esi ds:CoRegisterClassObject +
push offset dwRegister  +
push edi  +
push 4  +
push eax  +
push offset stru_10012C4  +
call esi  +
mov ebx eax +
cmp ebx edi +
jge loc_1001A37  +
mov eax pUnk +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov pUnk edi +
mov eax ebx +
jmp loc_1001A77  +
push offset dword_1003078  +
push edi  +
push 4  +
push pUnk  +
push offset stru_10012B4  +
call esi  +
mov esi eax +
cmp esi edi +
jge loc_1001A75  +
push dwRegister  +
call ds:CoRevokeClassObject  +
mov eax pUnk +
mov dwRegister edi +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov pUnk edi +
mov eax esi +
call __EH_epilog3  +
retn   +
***
call sub_10018CA  +
test eax eax +
jl locret_1001AAD  +
push esi  +
call sub_10019C9  +
mov esi eax +
test esi esi +
jl loc_1001AA5  +
call sub_1001842  +
call sub_1001881  +
call sub_10018B7  +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ebp+hInstance] +
mov dword_100306C eax +
xor eax eax +
push eax  +
push eax  +
push 1  +
push eax  +
call ds:HeapSetInformation  +
test eax eax +
jnz loc_1001ADD  +
call ds:GetLastError  +
jmp locret_1001B9D  +
push ebx  +
push esi  +
push edi  +
mov edi offset CriticalSection +
push edi  +
call ds:InitializeCriticalSection  +
call sub_10014E1  +
mov esi offset unk_1003048 +
push esi  +
call sub_10015C3  +
push offset aMicrosoftWinrm  +
mov dword_1003068 offset dword_10011B4 +
mov off_100300C esi +
call sub_1001694  +
mov eax off_100300C +
mov esi offset off_100300C +
mov ebx 100h +
cmp eax esi +
jz loc_1001B40  +
test [eax+1Ch] ebx +
jz loc_1001B40  +
push offset aAgsusquE_?mTra  +
push 0Dh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100159C  +
push [ebp+hInstance]  +
and [ebp+var_4] 0 +
call sub_1001765  +
mov hWnd eax +
test eax eax +
jz loc_1001B6B  +
call sub_1001A82  +
push hWnd  +
mov [ebp+var_4] eax +
push [ebp+hInstance]  +
call sub_100181C  +
push edi  +
call ds:DeleteCriticalSection  +
mov eax off_100300C +
cmp eax esi +
jz loc_1001B92  +
test [eax+1Ch] ebx +
jz loc_1001B92  +
push offset aAgsusquE_?mTra  +
push 0Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100159C  +
call sub_10016E2  +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
call ds:InterlockedDecrement  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
add eax 4 +
push eax  +
call ds:InterlockedIncrement  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ebp+0Ch] 0 +
push offset unk_1003088  +
jz loc_1001BF0  +
call ds:InterlockedIncrement  +
jmp loc_1001BF6  +
call ds:InterlockedDecrement  +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1001BA6  +
test [ebp+arg_0] 1 +
jz loc_1001C1B  +
push esi  +
call sub_1001380  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+10h] +
and dword ptr [eax] 0 +
push esi  +
mov esi [ebp+0Ch] +
push edi  +
push 4  +
pop ecx  +
mov edi offset dword_1001264 +
xor edx edx +
cmps   +
jz loc_1001C56  +
mov esi [ebp+0Ch] +
push 4  +
pop ecx  +
mov edi offset dword_1001274 +
xor edx edx +
cmps   +
jnz loc_1001C69  +
mov ecx [ebp+8] +
mov [eax] ecx +
test ecx ecx +
jz loc_1001C69  +
mov eax [ecx] +
push ecx  +
call dword ptr [eax+4]  +
xor eax eax +
jmp loc_1001C6E  +
mov eax 80004002h +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+8] +
lea eax [esi+4] +
push eax  +
call ds:InterlockedDecrement  +
test eax eax +
jnz loc_1001C9F  +
test esi esi +
jz loc_1001C9D  +
push 1  +
mov ecx esi +
call sub_1001C01  +
xor eax eax +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
mov edi [ebp+14h] +
and dword ptr [edi] 0 +
cmp dword ptr [ebp+0Ch] 0 +
jz loc_1001CC2  +
mov edi 80040110h +
jmp loc_1001D01  +
push esi  +
push offset Addend  +
push offset dword_1003078  +
push offset dwRegister  +
push hWnd  +
call CreateProvHost  +
mov esi eax +
test esi esi +
jnz loc_1001CEA  +
mov edi 8007000Eh +
jmp loc_1001D00  +
mov eax [esi] +
push edi  +
push dword ptr [ebp+10h]  +
push esi  +
call dword ptr [eax]  +
mov edi eax +
test edi edi +
jge loc_1001D00  +
push esi  +
call sub_1001380  +
pop ecx  +
pop esi  +
mov eax edi +
pop edi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push esi  +
mov esi ecx +
and dword ptr [esi+4] 0 +
push offset Addend  +
mov dword ptr [esi] offset off_1001228 +
call ds:InterlockedIncrement  +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
xor eax eax +
jmp loc_1001D4C  +
test eax eax +
jnz loc_1001D51  +
mov ecx [esi] +
test ecx ecx +
jz loc_1001D49  +
call ecx  +
add esi 4 +
cmp esi [ebp+arg_4] +
jb loc_1001D3D  +
pop esi  +
pop ebp  +
retn   +
***
mov eax dword_10030B0 +
push offset dword_10030A0  +
push dword_10030AC  +
mov dword_10030A0 eax +
push offset unk_1003090  +
push offset unk_1003094  +
push offset unk_100308C  +
call ds:__getmainargs  +
add esp 14h +
mov dword_100309C eax +
retn   +
***
call __SEH_prolog4  +
xor ebx ebx +
mov [ebp+var_1C] ebx +
mov [ebp+ms_exc.disabled] ebx +
lea eax [ebp+StartupInfo] +
push eax  +
call ds:GetStartupInfoA  +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov [ebp+ms_exc.disabled] 1 +
mov eax large fs:18h +
mov esi [eax+4] +
mov edi offset Destination +
push 0  +
push esi  +
push edi  +
call ds:InterlockedCompareExchange  +
test eax eax +
jz loc_1001DF1  +
cmp eax esi +
jnz loc_1001DE4  +
xor esi esi +
inc esi  +
mov ebx esi +
jmp loc_1001DF4  +
push 3E8h  +
call ds:Sleep  +
jmp loc_1001DCB  +
xor esi esi +
inc esi  +
mov eax dword_10033E4 +
cmp eax esi +
jnz loc_1001E07  +
push 1Fh  +
call _amsg_exit  +
pop ecx  +
jmp loc_1001E36  +
mov eax dword_10033E4 +
test eax eax +
jnz loc_1001E30  +
mov dword_10033E4 esi +
push offset dword_100115C  +
push offset dword_1001150  +
call sub_1001D30  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1001E36  +
jmp loc_1001F5E  +
mov dword_10030A8 esi +
mov eax dword_10033E4 +
cmp eax esi +
jnz loc_1001E5A  +
push offset dword_100114C  +
push offset dword_1001144  +
call _initterm  +
pop ecx  +
pop ecx  +
mov dword_10033E4 2 +
test ebx ebx +
jnz loc_1001E66  +
push ebx  +
push edi  +
call ds:InterlockedExchange  +
cmp dword_10033EC 0 +
jz loc_1001E8A  +
push offset dword_10033EC  +
call sub_10021C9  +
pop ecx  +
test eax eax +
jz loc_1001E8A  +
push 0  +
push 2  +
push 0  +
call dword_10033EC  +
mov eax ds:_acmdln +
mov esi [eax] +
mov [ebp+var_20] esi +
mov al [esi] +
cmp al 20h +
ja $LN61  +
test al al +
jz loc_1001EA4  +
cmp [ebp+var_1C] 0 +
jnz $LN61  +
mov al [esi] +
test al al +
jz loc_1001EB4  +
cmp al 20h +
ja loc_1001EB4  +
inc esi  +
mov [ebp+var_20] esi +
jmp loc_1001EA4  +
test byte ptr [ebp+StartupInfo.dwFlags] 1 +
jz loc_1001EC0  +
movzx eax [ebp+StartupInfo.wShowWindow] +
jmp loc_1001EC3  +
push 0Ah  +
pop eax  +
push eax  +
push esi  +
push 0  +
push 1000000h  +
call _WinMain@16  +
mov dword_10030A4 eax +
cmp dword_1003098 0 +
jnz $LN62  +
push eax  +
call ds:exit  +
cmp al 22h +
jnz loc_1001EF5  +
xor ecx ecx +
cmp [ebp+var_1C] ecx +
setz cl  +
mov [ebp+var_1C] ecx +
movzx eax al +
push eax  +
call ds:_ismbblead  +
pop ecx  +
test eax eax +
jz loc_1001F08  +
inc esi  +
mov [ebp+var_20] esi +
inc esi  +
jmp loc_1001E91  +
mov eax [ebp-14h] +
mov ecx [eax] +
mov ecx [ecx] +
mov [ebp-24h] ecx +
push eax  +
push ecx  +
call _XcptFilter  +
pop ecx  +
pop ecx  +
retn   +
mov esp [ebp-18h] +
mov eax [ebp-24h] +
mov dword_10030A4 eax +
cmp dword_1003098 0 +
jnz $LN62  +
push eax  +
call ds:_exit  +
cmp dword_10030A8 0 +
jnz loc_1001F49  +
call ds:_cexit  +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov eax dword_10030A4 +
jmp loc_1001F6A  +
xor eax eax +
inc eax  +
retn   +
mov esp [ebp-18h] +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov eax 0FFh +
call __SEH_epilog4  +
retn   +
***
mov eax 5A4Dh +
cmp ds:1000000h ax +
jz loc_1001F88  +
xor eax eax +
jmp loc_1001FD5  +
mov eax ds:100003Ch +
lea eax [eax+1000000h] +
cmp dword ptr [eax] 4550h +
jnz loc_1001F84  +
movzx ecx word ptr [eax+18h] +
cmp ecx 10Bh +
jz loc_1001FC2  +
cmp ecx 20Bh +
jnz loc_1001F84  +
cmp dword ptr [eax+84h] 0Eh +
jbe loc_1001F84  +
xor ecx ecx +
cmp [eax+0F8h] ecx +
jmp loc_1001FD0  +
cmp dword ptr [eax+74h] 0Eh +
jbe loc_1001F84  +
xor ecx ecx +
cmp [eax+0E8h] ecx +
setnz cl  +
mov eax ecx +
push 2  +
mov dword_1003098 eax +
call sub_1002362  +
push eax  +
call ds:__set_app_type  +
or dword_10033DC 0FFFFFFFFh +
or dword_10033E0 0FFFFFFFFh +
pop ecx  +
pop ecx  +
call ds:__p__fmode  +
mov ecx dword_10030B8 +
mov [eax] ecx +
call ds:__p__commode  +
mov ecx dword_10030B4 +
mov [eax] ecx +
call sub_10022F4  +
cmp dword_1003024 0 +
jnz loc_100202E  +
push offset sub_10022F4  +
call ds:__setusermatherr  +
pop ecx  +
call sub_10022DC  +
xor eax eax +
retn   +
***
call sub_10023A1  +
jmp ___tmainCRTStartup  +
***
cmp ecx dword_1003014 +
jnz loc_1002060  +
retn 0  +
jmp loc_1002437  +
***
lea eax [esp+4+arg_0] +
sub esp [esp+0Ch] +
push ebx  +
push esi  +
push edi  +
mov [eax] ebp +
mov ebp eax +
mov eax dword_1003014 +
xor eax ebp +
push eax  +
push dword ptr [ebp-4]  +
mov dword ptr [ebp-4] 0FFFFFFFFh +
lea eax [ebp-0Ch] +
mov large fs:0 eax +
retn   +
***
mov ecx [ebp-0Ch] +
mov large fs:0 ecx +
pop ecx  +
pop edi  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
push ecx  +
retn   +
***
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov eax [eax] +
cmp dword ptr [eax] 0E06D7363h +
jnz loc_100210F  +
cmp dword ptr [eax+10h] 3 +
jnz loc_100210F  +
mov eax [eax+14h] +
cmp eax 19930520h +
jz loc_1002109  +
cmp eax 19930521h +
jz loc_1002109  +
cmp eax 19930522h +
jz loc_1002109  +
cmp eax 1994000h +
jnz loc_100210F  +
call ds:?terminate@@YAXXZ  +
xor eax eax +
pop ebp  +
retn 4  +
***
push (offset dword_10020D0+2)  +
call ds:SetUnhandledExceptionFilter  +
xor eax eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
mov eax 5A4Dh +
cmp [ecx] ax +
jz loc_1002156  +
xor eax eax +
pop ebp  +
retn   +
mov eax [ecx+3Ch] +
add eax ecx +
cmp dword ptr [eax] 4550h +
jnz loc_1002152  +
xor edx edx +
mov ecx 10Bh +
cmp [eax+18h] cx +
setz dl  +
mov eax edx +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [eax+3Ch] +
add ecx eax +
movzx eax word ptr [ecx+14h] +
push ebx  +
push esi  +
movzx esi word ptr [ecx+6] +
xor edx edx +
push edi  +
lea eax [eax+ecx+18h] +
test esi esi +
jbe loc_10021BD  +
mov edi [ebp+arg_4] +
mov ecx [eax+0Ch] +
cmp edi ecx +
jb loc_10021B5  +
mov ebx [eax+8] +
add ebx ecx +
cmp edi ebx +
jb loc_10021BF  +
inc edx  +
add eax 28h +
cmp edx esi +
jb loc_10021A5  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
call __SEH_prolog4  +
and [ebp+ms_exc.disabled] 0 +
mov esi 1000000h +
push esi  +
call sub_1002140  +
pop ecx  +
test eax eax +
jz loc_1002226  +
mov eax [ebp+arg_0] +
sub eax esi +
push eax  +
push esi  +
call sub_1002180  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1002226  +
mov eax [eax+24h] +
shr eax 1Fh +
not eax  +
and eax 1 +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
jmp loc_100222F  +
mov eax [ebp-14h] +
mov eax [eax] +
mov eax [eax] +
xor ecx ecx +
cmp eax 0C0000005h +
setz cl  +
mov eax ecx +
retn   +
mov esp [ebp-18h] +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
xor eax eax +
call __SEH_epilog4  +
retn   +
***
mov eax [esp+8+arg_4] +
mov ecx [ebp-10h] +
mov large fs:0 ecx +
pop ecx  +
pop edi  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
push ecx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push offset sub_1002055  +
push offset dword_1003014  +
call _except_handler4_common  +
add esp 18h +
pop ebp  +
retn   +
***
call ds:_controlfp  +
pop ecx  +
pop ecx  +
retn   +
***
retn   +
***
call __SEH_prolog4  +
xor eax eax +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_1002355  +
cmp ecx 0FFFFFFFFh +
jz loc_1002355  +
and [ebp+ms_exc.disabled] eax +
mov edx 5A4Dh +
cmp [ecx] dx +
jnz loc_100234E  +
mov edx [ecx+3Ch] +
test edx edx +
jl loc_100234E  +
cmp edx 10000000h +
jnb loc_100234E  +
lea eax [edx+ecx] +
mov [ebp+var_1C] eax +
cmp dword ptr [eax] 4550h +
jz loc_100234E  +
jmp loc_1002349  +
xor eax eax +
inc eax  +
retn   +
mov esp [ebp-18h] +
xor eax eax +
mov [ebp+var_1C] eax +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
call __SEH_epilog4  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
call ds:GetModuleHandleA  +
test eax eax +
jz loc_1002397  +
push eax  +
call sub_10022FC  +
test eax eax +
jz loc_1002397  +
movzx eax word ptr [eax+5Ch] +
cmp ax 2 +
jnz loc_100238C  +
push 2  +
pop eax  +
pop ebp  +
retn   +
cmp ax 3 +
jnz loc_1002397  +
xor eax eax +
inc eax  +
pop ebp  +
retn   +
mov eax [ebp+arg_0] +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov eax dword_1003014 +
and [ebp+SystemTimeAsFileTime.dwLowDateTime] 0 +
and [ebp+SystemTimeAsFileTime.dwHighDateTime] 0 +
push ebx  +
push edi  +
mov edi 0BB40E64Eh +
mov ebx 0FFFF0000h +
cmp eax edi +
jz loc_10023D3  +
test eax ebx +
jz loc_10023D3  +
not eax  +
mov dword_1003018 eax +
jmp loc_100242E  +
push esi  +
lea eax [ebp+SystemTimeAsFileTime] +
push eax  +
call ds:GetSystemTimeAsFileTime  +
mov esi [ebp+SystemTimeAsFileTime.dwHighDateTime] +
xor esi [ebp+SystemTimeAsFileTime.dwLowDateTime] +
call ds:GetCurrentProcessId  +
xor esi eax +
call ds:GetCurrentThreadId  +
xor esi eax +
call ds:GetTickCount  +
xor esi eax +
lea eax [ebp+PerformanceCount] +
push eax  +
call ds:QueryPerformanceCounter  +
mov eax dword ptr [ebp+PerformanceCount+4] +
xor eax dword ptr [ebp+PerformanceCount] +
xor esi eax +
cmp esi edi +
jz loc_100241A  +
test dword_1003014 ebx +
jnz loc_100241F  +
mov esi 0BB40E64Fh +
mov dword_1003014 esi +
not esi  +
mov dword_1003018 esi +
pop esi  +
pop edi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 328h +
mov dword_10031C0 eax +
mov dword_10031BC ecx +
mov dword_10031B8 edx +
mov dword_10031B4 ebx +
mov dword_10031B0 esi +
mov dword_10031AC edi +
mov word_10031D8 ss +
mov word_10031CC cs +
mov word_10031A8 ds +
mov word_10031A4 es +
mov word_10031A0 fs +
mov word_100319C gs +
pushf   +
pop dword_10031D0  +
mov eax [ebp+0] +
mov dword_10031C4 eax +
mov eax [ebp+4] +
mov dword_10031C8 eax +
lea eax [ebp+8] +
mov dword_10031D4 eax +
mov eax [ebp-320h] +
mov dword_1003110 10001h +
mov eax dword_10031C8 +
mov dword_10030CC eax +
mov dword_10030C0 0C0000409h +
mov dword_10030C4 1 +
mov eax dword_1003014 +
mov [ebp-328h] eax +
mov eax dword_1003018 +
mov [ebp-324h] eax +
push 0  +
call ds:SetUnhandledExceptionFilter  +
push offset ExceptionInfo  +
call ds:UnhandledExceptionFilter  +
push 0C0000409h  +
call ds:GetCurrentProcess  +
push eax  +
call ds:TerminateProcess  +
leave   +
retn   +
***
push dword ptr [ebp-10h]  +
call sub_1001380  +
pop ecx  +
retn   +
***
retf 2Ch  +
***
retn 2Dh  +
***
push 65676E61h  +
add [edx+656C5304h] dh +
jo $+3  +
jmp near ptr 756E752Fh  +
***
