mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
mov edi [ebp+8] +
test edi edi +
jz loc_10040D8  +
mov eax [edi] +
push esi  +
mov esi ds:free +
test eax eax +
jz loc_10040D3  +
push eax  +
call esi  +
pop ecx  +
push edi  +
call esi  +
pop ecx  +
pop esi  +
pop edi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push 4  +
call ds:malloc  +
mov esi eax +
pop ecx  +
test esi esi +
jnz loc_10040FB  +
xor eax eax +
jmp loc_1004119  +
mov eax [ebp+8] +
push dword ptr [eax]  +
call ds:_strdup  +
pop ecx  +
mov [esi] eax +
test eax eax +
jnz loc_1004117  +
push esi  +
call ds:free  +
pop ecx  +
jmp loc_10040F7  +
***
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
or ecx 0FFFFFFFFh +
sub ecx [ebp+arg_8] +
cmp [ebp+arg_4] 0 +
jz loc_1004155  +
mov eax [ebp+arg_0] +
push esi  +
movzx edx byte ptr [eax] +
dec [ebp+arg_4]  +
movzx esi cl +
xor edx esi +
shr ecx 8 +
xor ecx dword_1016000[edx*4] +
inc eax  +
cmp [ebp+arg_4] 0 +
jnz loc_1004138  +
pop esi  +
or eax 0FFFFFFFFh +
sub eax ecx +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov ebx eax +
mov esi edx +
xor eax eax +
xor edi edi +
test esi esi +
jz loc_1004193  +
cmp [ebp+arg_4] eax +
jz loc_100418F  +
mov dl [ebx] +
test dl dl +
jz loc_100418F  +
mov [ecx] dl +
inc ecx  +
inc ebx  +
dec esi  +
dec [ebp+arg_4]  +
inc edi  +
test esi esi +
jnz loc_1004177  +
test esi esi +
jnz loc_100419A  +
dec ecx  +
dec edi  +
mov eax 8007007Ah +
mov byte ptr [ecx] 0 +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_10041A6  +
mov [ecx] edi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
lea edx [eax+1] +
mov cl [eax] +
inc eax  +
test cl cl +
jnz loc_10041BD  +
push esi  +
mov esi [ebp+arg_0] +
sub eax edx +
push edi  +
mov edi eax +
mov eax [esi+58h] +
cmp edi eax +
jl loc_10041DC  +
lea eax [esi+0A03h] +
jmp loc_10041E7  +
mov ecx edi +
sub ecx eax +
lea eax [ecx+esi+0A03h] +
cmp [ebp+arg_8] 0 +
push eax  +
push [ebp+arg_4]  +
jz loc_1004203  +
push offset aSS_2  +
call ds:printf  +
add esp 0Ch +
xor edi edi +
jmp loc_1004211  +
push offset aSS_1  +
call ds:printf  +
add esp 0Ch +
xor eax eax +
cmp [ebp+arg_8] eax +
mov [esi+58h] edi +
setz al  +
pop edi  +
mov [esi+54h] eax +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push edi  +
mov edi [ebp+arg_8] +
mov bl [edi] +
test bl bl +
jnz loc_1004246  +
mov eax [ebp+arg_0] +
mov [eax] bl +
mov eax edi +
jmp loc_1004316  +
mov eax [ebp+arg_C] +
jmp loc_1004250  +
cmp cl bl +
jz loc_1004256  +
inc eax  +
mov cl [eax] +
test cl cl +
jnz loc_100424B  +
cmp byte ptr [eax] 0 +
push esi  +
jnz loc_10042B5  +
push offset asc_1001888  +
push edi  +
call ds:strpbrk  +
mov ebx eax +
pop ecx  +
pop ecx  +
test ebx ebx +
jnz loc_1004283  +
mov esi edi +
lea ecx [esi+1] +
mov al [esi] +
inc esi  +
test al al +
jnz loc_1004275  +
sub esi ecx +
lea ebx [esi+edi] +
jmp loc_1004287  +
mov esi ebx +
sub esi edi +
mov eax [ebp+arg_4] +
cmp esi eax +
jl loc_100429F  +
dec eax  +
push eax  +
push [ebp+arg_10]  +
push offset aSD  +
push offset a1ExceededMaxim  +
jmp loc_1004308  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
push edi  +
call memcpy  +
add esp 0Ch +
mov byte ptr [esi+edi] 0 +
mov eax ebx +
jmp loc_1004315  +
mov esi [ebp+arg_0] +
mov edx [ebp+arg_4] +
lea eax [edi+1] +
mov cl [eax] +
test cl cl +
jz loc_10042E6  +
xor edi edi +
cmp edi edx +
jge loc_10042E6  +
cmp cl bl +
jnz loc_10042DB  +
cmp [eax+1] bl +
jnz loc_10042F1  +
mov [esi] cl +
inc esi  +
inc edi  +
inc eax  +
inc eax  +
jmp loc_10042E0  +
mov [esi] cl +
inc esi  +
inc edi  +
inc eax  +
mov cl [eax] +
test cl cl +
jnz loc_10042C6  +
sub esi [ebp+arg_0] +
cmp esi edx +
jl loc_10042F7  +
dec edx  +
push edx  +
jmp loc_1004290  +
mov byte ptr [esi] 0 +
inc eax  +
jmp loc_1004315  +
push [ebp+arg_10]  +
movsx eax bl +
push eax  +
push offset aCS  +
push offset aMissingClosing  +
push [ebp+arg_14]  +
call sub_1009022  +
add esp 14h +
xor eax eax +
pop esi  +
pop edi  +
pop ebx  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
xor esi esi +
cmp off_10167D8 esi +
jz loc_1004354  +
mov eax offset off_10167D8 +
push [ebp+arg_0]  +
push dword ptr [eax]  +
call ds:_stricmp  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1004373  +
inc esi  +
lea eax off_10167D8[esi*8] +
cmp dword ptr [eax] 0 +
jnz loc_1004336  +
push [ebp+arg_0]  +
push offset aS_1  +
push offset aUnknownCommand  +
push [ebp+arg_4]  +
call sub_1009022  +
add esp 10h +
xor eax eax +
pop esi  +
pop ebp  +
retn 8  +
mov eax dword_10167DC[esi*8] +
jmp loc_100436E  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 434h +
mov eax dword_1016A90 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_C] +
push ebx  +
mov ebx [ebp+arg_4] +
push esi  +
mov esi [ebp+arg_0] +
cmp dword ptr [esi] 0 +
push edi  +
mov edi [ebp+arg_8] +
mov [ebp+var_434] esi +
mov [ebp+var_428] edi +
mov [ebp+var_430] eax +
jnz loc_10043DB  +
push edi  +
push offset aFileParameter  +
push offset loc_10040B5  +
push 0  +
call sub_100A4C9  +
mov [esi] eax +
test eax eax +
jnz loc_10043DB  +
xor eax eax +
jmp loc_100459A  +
inc ebx  +
cmp byte ptr [ebx] 0 +
jnz loc_10043F0  +
push offset aMissingParamet  +
push edi  +
call sub_1009022  +
pop ecx  +
pop ecx  +
jmp loc_10043D4  +
push offset asc_1001930  +
push ebx  +
call ds:strpbrk  +
mov edi eax +
pop ecx  +
pop ecx  +
mov [ebp+var_42C] edi +
test edi edi +
jnz loc_1004464  +
mov eax ebx +
lea edx [eax+1] +
mov cl [eax] +
inc eax  +
test cl cl +
jnz loc_100440F  +
sub eax edx +
cmp eax 3 +
jnz loc_1004445  +
push eax  +
push offset aRun  +
push ebx  +
call ds:strncmp  +
add esp 0Ch +
test eax eax +
jnz loc_1004445  +
mov eax [ebp+var_430] +
mov dword ptr [eax] 1 +
lea eax [ebx+3] +
jmp loc_100459A  +
push 3Dh  +
push offset aC  +
push offset a1AssignmentOpe  +
push [ebp+var_428]  +
call sub_1009022  +
add esp 10h +
jmp loc_10043D4  +
mov esi edi +
sub esi ebx +
cmp esi 20h +
jb loc_100448D  +
push ebx  +
push 1Fh  +
push offset aDS  +
push offset aParameterNameE  +
push [ebp+var_428]  +
call sub_1009022  +
add esp 14h +
jmp loc_10043D4  +
push esi  +
lea eax [ebp+var_24] +
push ebx  +
push eax  +
call memcpy  +
mov ebx offset asc_1001888 +
push ebx  +
push edi  +
mov edi ds:strspn +
mov [ebp+esi+var_24] 0 +
call edi  +
mov esi eax +
add esi [ebp+var_42C] +
add esp 14h +
cmp byte ptr [esi] 3Dh +
jnz loc_1004445  +
inc esi  +
push ebx  +
push esi  +
mov [ebp+var_42C] esi +
call edi  +
add esi eax +
cmp byte ptr [esi] 2Fh +
pop ecx  +
pop ecx  +
mov ebx offset aParameterValue +
jnz loc_10044E6  +
cmp esi [ebp+var_42C] +
jbe loc_10044E6  +
mov [ebp+var_424] 0 +
jmp loc_100450E  +
push [ebp+var_428]  +
lea eax [ebp+var_424] +
push ebx  +
push offset asc_10018BC  +
push esi  +
push 400h  +
push eax  +
call sub_100422A  +
mov esi eax +
test esi esi +
jz loc_10043D4  +
push 4  +
call ds:malloc  +
mov edi eax +
pop ecx  +
test edi edi +
jnz loc_100452D  +
push ebx  +
push offset aS_1  +
push offset aOutOfMemorySav  +
jmp loc_1004451  +
lea eax [ebp+var_424] +
push eax  +
call ds:_strdup  +
pop ecx  +
mov [edi] eax +
test eax eax +
jnz loc_1004563  +
push ebx  +
push offset aS_1  +
push offset aOutOfMemorySav  +
push [ebp+var_428]  +
call sub_1009022  +
push edi  +
call ds:free  +
jmp loc_1004485  +
push [ebp+var_428]  +
lea eax [ebp+var_24] +
push 1  +
push offset aFileParameter  +
push edi  +
push eax  +
mov eax [ebp+var_434] +
push dword ptr [eax]  +
call sub_100A789  +
test eax eax +
jnz loc_1004598  +
push dword ptr [edi]  +
mov esi ds:free +
call esi  +
push edi  +
call esi  +
jmp loc_10043EC  +
mov eax esi +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100DC5B  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
test esi esi +
jz loc_10045F5  +
push edi  +
mov edi offset asc_1001888 +
cmp byte ptr [esi] 0 +
jz loc_10045F4  +
push edi  +
push esi  +
call ds:strpbrk  +
mov esi eax +
pop ecx  +
pop ecx  +
test esi esi +
jz loc_10045F4  +
push edi  +
push esi  +
call ds:strspn  +
add eax esi +
cmp byte ptr [eax] 0 +
pop ecx  +
pop ecx  +
jnz loc_10045EE  +
mov byte ptr [esi] 0 +
jmp loc_10045F0  +
mov esi eax +
test esi esi +
jnz loc_10045C3  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 3Ch +
mov eax dword_1016A90 +
xor eax ebp +
mov [ebp+var_4] eax +
mov ecx [ebp+arg_C] +
mov eax [ebp+arg_0] +
push ebx  +
push esi  +
mov esi [ebp+arg_8] +
mov [ebp+var_3C] ecx +
mov ecx [ebp+arg_10] +
push edi  +
mov [ebp+var_28] eax +
mov [ebp+var_2C] esi +
mov [ebp+var_30] ecx +
mov [ebp+var_38] eax +
jmp loc_1004720  +
movsx eax cl +
sub eax 22h +
jz loc_10046EA  +
sub eax 3 +
jz loc_100465D  +
dec eax  +
dec eax  +
jz loc_10046EA  +
sub eax 14h +
jz loc_100472A  +
push 1  +
jmp loc_1004708  +
mov ebx esi +
inc esi  +
mov [ebp+var_2C] esi +
cmp byte ptr [esi] 25h +
jz loc_1004656  +
push 25h  +
push esi  +
call ds:strchr  +
pop ecx  +
pop ecx  +
mov [ebp+var_34] eax +
test eax eax +
jz loc_100473F  +
lea edi [eax+1] +
sub eax [ebp+var_2C] +
mov esi eax +
cmp esi 20h +
jge loc_100475B  +
push esi  +
push [ebp+var_2C]  +
lea eax [ebp+var_24] +
push eax  +
call memcpy  +
add esp 0Ch +
push [ebp+var_30]  +
lea eax [ebp+var_24] +
push eax  +
push [ebp+var_3C]  +
mov byte ptr [ebp+esi+var_24] 0 +
call sub_100D5E6  +
test eax eax +
jz loc_100476A  +
push eax  +
call sub_100A540  +
mov [ebp+var_34] eax +
push 0  +
lea eax [ebp+var_34] +
push eax  +
lea eax [ebp+arg_4] +
push eax  +
lea eax [ebp+var_28] +
push eax  +
call sub_100CC60  +
test eax eax +
jz loc_1004782  +
dec [ebp+var_28]  +
inc [ebp+arg_4]  +
mov [ebp+var_2C] edi +
jmp loc_100471D  +
lea eax [esi+1] +
jmp loc_10046FC  +
cmp dl cl +
jnz loc_10046FB  +
inc eax  +
mov [ebp+var_34] eax +
cmp [eax] cl +
jnz loc_1004705  +
inc eax  +
mov [ebp+var_34] eax +
mov dl [eax] +
test dl dl +
jnz loc_10046EF  +
sub eax esi +
push eax  +
lea eax [ebp+var_2C] +
push eax  +
lea eax [ebp+arg_4] +
push eax  +
lea eax [ebp+var_28] +
push eax  +
call sub_100CC60  +
test eax eax +
jz loc_1004730  +
mov esi [ebp+var_2C] +
mov cl [esi] +
test cl cl +
jnz loc_1004634  +
cmp [ebp+arg_4] 0 +
jnz loc_100478F  +
push [ebp+var_2C]  +
push offset aS_1  +
push offset aBufferOverflow  +
jmp loc_1004775  +
push ebx  +
push 25h  +
push offset aCS  +
push offset aMissing1AfterV  +
push [ebp+var_30]  +
call sub_1009022  +
add esp 14h +
xor eax eax +
jmp loc_10047A3  +
push ebx  +
push 1Fh  +
push offset aDS  +
push offset aVariableNameEx  +
jmp loc_100474C  +
push ebx  +
push offset aS_1  +
push offset aVariableNotDef  +
push [ebp+var_30]  +
call sub_1009022  +
add esp 10h +
jmp loc_1004757  +
push ebx  +
push offset aS_1  +
push offset aBufferOverfl_0  +
jmp loc_1004775  +
mov eax [ebp+var_28] +
push [ebp+var_38]  +
mov byte ptr [eax] 0 +
inc [ebp+var_28]  +
call sub_10045B0  +
xor eax eax +
inc eax  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100DC5B  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
push 2  +
mov edi offset a0 +
pop ecx  +
xor eax eax +
cmps   +
jz loc_1004866  +
mov ebx ds:_stricmp +
push offset aNo  +
push [ebp+arg_0]  +
call ebx  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1004866  +
mov esi [ebp+arg_0] +
push offset aOff  +
push esi  +
call ebx  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1004866  +
push offset aFalse  +
push esi  +
call ebx  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1004866  +
push 2  +
mov edi offset a1 +
pop ecx  +
xor eax eax +
cmps   +
jz loc_1004861  +
mov esi [ebp+arg_0] +
push offset aYes  +
push esi  +
call ebx  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1004861  +
push offset aOn  +
push esi  +
call ebx  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1004861  +
push offset aTrue  +
push esi  +
call ebx  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1004861  +
push esi  +
push offset aS_1  +
push offset aInvalidBoolean  +
push [ebp+arg_4]  +
call sub_1009022  +
add esp 10h +
or eax 0FFFFFFFFh +
jmp loc_1004868  +
xor eax eax +
inc eax  +
jmp loc_1004868  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
mov esi ds:atoi +
push edi  +
push [ebp+arg_0]  +
call esi  +
mov ebx offset a1 +
push ebx  +
mov [ebp+var_4] eax +
call esi  +
mov edi offset a8 +
push edi  +
mov [ebp+var_8] eax +
call esi  +
mov ecx [ebp+var_4] +
add esp 0Ch +
cmp [ebp+var_8] ecx +
jg loc_10048B2  +
cmp ecx eax +
jg loc_10048B2  +
mov eax ecx +
jmp loc_10048CF  +
push [ebp+arg_0]  +
push edi  +
push ebx  +
push offset aSSS  +
push offset aChecksumWidthN  +
push [ebp+arg_4]  +
call sub_1009022  +
add esp 18h +
or eax 0FFFFFFFFh +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ds:_stricmp +
push offset aMszip  +
push [ebp+arg_0]  +
call esi  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_10048FA  +
inc eax  +
jmp loc_100492A  +
push offset aLzx  +
push [ebp+arg_0]  +
call esi  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_100490F  +
push 3  +
pop eax  +
jmp loc_100492A  +
push [ebp+arg_0]  +
push offset aS_1  +
push offset aInvalidCompres  +
push [ebp+arg_4]  +
call sub_1009022  +
add esp 10h +
or eax 0FFFFFFFFh +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
mov esi ds:atoi +
push edi  +
push [ebp+arg_0]  +
call esi  +
mov ebx offset a1 +
push ebx  +
mov [ebp+var_4] eax +
call esi  +
mov edi offset a7 +
push edi  +
mov [ebp+var_8] eax +
call esi  +
mov ecx [ebp+var_4] +
add esp 0Ch +
cmp [ebp+var_8] ecx +
jg loc_1004972  +
cmp ecx eax +
jg loc_1004972  +
mov eax ecx +
jmp loc_100498F  +
push [ebp+arg_0]  +
push edi  +
push ebx  +
push offset aSSS  +
push offset aCompressionLev  +
push [ebp+arg_4]  +
call sub_1009022  +
add esp 18h +
or eax 0FFFFFFFFh +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
lea ecx [eax-1] +
push esi  +
mov esi eax +
test ecx eax +
jz loc_10049C5  +
xor ecx ecx +
jmp loc_10049B4  +
sar eax 1 +
inc ecx  +
test eax eax +
jnz loc_10049B1  +
xor edx edx +
inc edx  +
shl edx cl +
dec edx  +
lea eax [edx+esi] +
not edx  +
and eax edx +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
mov esi ds:atoi +
push edi  +
push [ebp+arg_0]  +
call esi  +
mov [ebp+var_8] eax +
mov [esp+18h+var_18] offset a10 +
call esi  +
mov ebx offset a21 +
push ebx  +
mov [ebp+var_4] eax +
call esi  +
xor edi edi +
inc edi  +
pop ecx  +
pop ecx  +
mov ecx [ebp+var_4] +
mov esi edi +
shl esi cl +
mov ecx eax +
shl edi cl +
mov ecx [ebp+var_8] +
cmp [ebp+var_4] ecx +
jg loc_1004A1B  +
cmp ecx eax +
jg loc_1004A1B  +
mov eax ecx +
jmp loc_1004A65  +
cmp ecx esi +
jge loc_1004A2F  +
push [ebp+arg_0]  +
push ebx  +
push offset a10  +
push offset aSSS  +
jmp loc_1004A52  +
push ecx  +
call sub_100499B  +
cmp esi eax +
jg loc_1004A48  +
cmp eax edi +
jg loc_1004A48  +
xor ecx ecx +
jmp loc_1004A42  +
inc ecx  +
sar eax 1 +
jnz loc_1004A41  +
jmp loc_1004A17  +
push [ebp+arg_0]  +
push edi  +
push esi  +
push offset aDDS  +
push offset aCompressionMem  +
push [ebp+arg_4]  +
call sub_1009022  +
add esp 18h +
or eax 0FFFFFFFFh +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
push ebx  +
push esi  +
push edi  +
mov edi ds:atol +
mov esi offset off_1016844 +
push dword ptr [esi-0Ch]  +
push [ebp+arg_0]  +
call ds:_stricmp  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1004AB8  +
push dword ptr [esi]  +
call edi  +
push [ebp+arg_0]  +
mov ebx eax +
call edi  +
pop ecx  +
pop ecx  +
cmp eax ebx +
jz loc_1004AB8  +
inc [ebp+var_4]  +
add esi 10h +
cmp [ebp+var_4] 8 +
jb loc_1004A89  +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
cmp eax 8 +
jb locret_1004AC6  +
or eax 0FFFFFFFFh +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_4] +
xor eax eax +
test edx edx +
jz loc_1004AE5  +
cmp edx 7FFFFFFFh +
jbe loc_1004AEA  +
mov eax 80070057h +
test eax eax +
jl loc_1004B00  +
mov eax [ebp+arg_8] +
mov ecx [ebp+arg_0] +
push 7FFFFFFEh  +
push 0  +
call sub_1004163  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_4] +
push ebx  +
xor eax eax +
push esi  +
mov esi 7FFFFFFFh +
test edx edx +
jz loc_1004B22  +
cmp edx esi +
jbe loc_1004B27  +
mov eax 80070057h +
mov ebx [ebp+arg_0] +
test eax eax +
jl loc_1004B3F  +
push edi  +
lea edi [ebp+arg_0] +
mov eax ebx +
call sub_1009222  +
mov ecx [ebp+arg_0] +
pop edi  +
jmp loc_1004B41  +
xor ecx ecx +
test eax eax +
jl loc_1004B57  +
mov edx [ebp+arg_4] +
mov eax [ebp+arg_8] +
push esi  +
sub edx ecx +
push 0  +
add ecx ebx +
call sub_1004163  +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_4] +
push ebx  +
call sub_100D497  +
mov [ebp+arg_4] eax +
test eax eax +
jz loc_1004BBA  +
push esi  +
push edi  +
xor edi edi +
xor esi esi +
push ebx  +
push off_1016410[esi]  +
push dword_101640C[esi]  +
push dword_1016408[esi]  +
push off_1016404[esi]  +
push off_1016400[esi]  +
push [ebp+arg_4]  +
call sub_100D720  +
test eax eax +
jz loc_1004BBF  +
add esi 14h +
inc edi  +
cmp esi 3D4h +
jb loc_1004B7E  +
mov eax [ebp+arg_4] +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
mov esi [ebp+arg_0] +
push ebx  +
push 800h  +
add esi 1B4h +
push esi  +
call sub_1004ACF  +
imul edi edi +
push esi  +
push off_1016400[edi]  +
push offset aSS  +
push offset aFailureCreatin  +
push ebx  +
call sub_1009022  +
add esp 14h +
xor eax eax +
jmp loc_1004BB8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
call sub_1004A71  +
cmp eax 0FFFFFFFFh +
jz loc_1004C1E  +
shl eax 4 +
push off_1016844[eax]  +
call ds:atol  +
pop ecx  +
jmp loc_1004C20  +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
mov esi [ebp+arg_8] +
push edi  +
mov byte ptr [ebx] 0 +
jmp loc_1004C98  +
mov eax ebx +
lea edi [eax+1] +
mov cl [eax] +
inc eax  +
test cl cl +
jnz loc_1004C41  +
push [ebp+arg_14]  +
mov ecx [ebp+arg_4] +
push offset aInfwriteString  +
push offset asc_10018BC  +
sub eax edi +
push esi  +
sub ecx eax +
push ecx  +
add eax ebx +
push eax  +
call sub_100422A  +
mov esi eax +
test esi esi +
jz loc_1004CE3  +
mov eax ebx +
lea edi [eax+1] +
mov cl [eax] +
inc eax  +
test cl cl +
jnz loc_1004C71  +
sub eax edi +
push offset asc_1001888  +
push esi  +
mov [ebp+arg_0] eax +
lea edi [eax+ebx] +
call ds:strspn  +
pop ecx  +
pop ecx  +
lea ecx [eax+esi] +
cmp byte ptr [ecx] 0 +
jnz loc_1004CB6  +
mov esi ecx +
cmp byte ptr [esi] 0 +
jnz loc_1004C3C  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 18h  +
cmp [ebp+arg_0] ecx +
jge loc_1004CC7  +
mov cl [esi] +
mov [edi] cl +
inc edi  +
inc esi  +
inc [ebp+arg_0]  +
dec eax  +
mov ecx [ebp+arg_4] +
test eax eax +
jg loc_1004CA7  +
cmp [ebp+arg_0] ecx +
jge loc_1004CC7  +
mov byte ptr [edi] 0 +
jmp loc_1004C98  +
dec ecx  +
push ecx  +
push offset aInfwriteString  +
push offset aSD  +
push offset a1ExceededMaxim  +
push [ebp+arg_14]  +
call sub_1009022  +
add esp 14h +
xor eax eax +
jmp loc_1004CA0  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax [ebp+arg_0] +
push ebx  +
xor ebx ebx +
push esi  +
lea ecx [eax+4] +
push edi  +
mov edi [ebp+arg_8] +
lea esi [eax+104h] +
mov dword ptr [eax] 0Dh +
mov [ecx] bl +
mov [esi] ebx +
mov [ebp+var_4] ebx +
mov [ebp+var_8] ebx +
mov [ebp+arg_0] ecx +
cmp [edi] bl +
jz loc_1004DAD  +
push offset asc_1001888  +
push edi  +
call ds:strspn  +
add edi eax +
mov al [edi] +
pop ecx  +
pop ecx  +
cmp al bl +
jz loc_1004DA8  +
cmp al 2Fh +
jnz loc_1004D62  +
lea eax [ebp+var_8] +
push eax  +
push [ebp+arg_C]  +
push edi  +
push esi  +
call sub_1004381  +
mov edi eax +
cmp [ebp+var_8] ebx +
jz loc_1004D88  +
push offset aRunDirectiveOn  +
push [ebp+arg_C]  +
call sub_1009022  +
pop ecx  +
pop ecx  +
jmp loc_1004DA8  +
inc [ebp+var_4]  +
cmp [ebp+var_4] 1 +
jg loc_1004D92  +
push [ebp+arg_C]  +
push offset aDestinationFil  +
push offset asc_10018BC  +
push edi  +
push 100h  +
push [ebp+arg_0]  +
call sub_100422A  +
mov edi eax +
cmp edi ebx +
jz loc_1004DA8  +
cmp [edi] bl +
jnz loc_1004D22  +
jmp loc_1004DA8  +
push edi  +
push offset aS_1  +
push offset aUnexpectedText  +
push [ebp+arg_C]  +
call sub_1009022  +
add esp 10h +
cmp [ebp+var_4] ebx +
jnz loc_1004DC9  +
mov eax [ebp+arg_C] +
cmp [eax+200h] ebx +
jnz loc_1004DD4  +
push offset aMissingDestina  +
push eax  +
call sub_1009022  +
pop ecx  +
pop ecx  +
xor eax eax +
jmp loc_1004E1D  +
mov eax [ebp+arg_C] +
cmp [eax+200h] ebx +
jz loc_1004DE4  +
mov eax [esi] +
cmp eax ebx +
jz loc_1004DC5  +
push eax  +
call sub_100A679  +
mov [esi] ebx +
jmp loc_1004DC5  +
mov eax [ebp+arg_4] +
cmp dword ptr [eax+40h] 3 +
jl loc_1004E1A  +
push [ebp+arg_0]  +
lea esi [eax+1B4h] +
push offset aS_1  +
push offset aReferenceDst1  +
push 800h  +
push esi  +
call sub_100CC3F  +
push esi  +
push offset aS  +
call ds:printf  +
add esp 1Ch +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push ebx  +
xor ecx ecx +
push esi  +
mov esi [ebp+arg_0] +
lea eax [esi+4] +
mov [eax] cl +
mov [ebp+var_C] eax +
lea eax [esi+104h] +
push edi  +
mov edi [ebp+arg_8] +
lea ebx [esi+204h] +
mov dword ptr [esi] 5 +
mov [eax] cl +
mov [ebx] ecx +
mov [esi+208h] ecx +
mov [ebp+var_4] ecx +
mov [ebp+var_8] ecx +
mov [ebp+arg_0] eax +
cmp [edi] cl +
jz loc_1004F3A  +
push offset asc_1001888  +
push edi  +
call ds:strspn  +
add edi eax +
mov al [edi] +
pop ecx  +
pop ecx  +
test al al +
jz loc_1004F34  +
cmp al 2Fh +
jnz loc_1004EBD  +
lea eax [ebp+var_8] +
push eax  +
push [ebp+arg_C]  +
push edi  +
push ebx  +
call sub_1004381  +
xor ecx ecx +
inc ecx  +
mov edi eax +
cmp [ebp+var_8] ecx +
jnz loc_1004EFE  +
mov eax [ebp+arg_4] +
add eax 0B0h +
cmp [eax] ecx +
jz loc_1004F0D  +
mov [eax] ecx +
mov [esi+208h] ecx +
jmp loc_1004EFE  +
inc [ebp+var_4]  +
cmp [ebp+var_4] 2 +
jg loc_1004F1E  +
cmp [ebp+var_4] 1 +
push [ebp+arg_C]  +
jnz loc_1004EE4  +
push offset aSourceFileName  +
push offset asc_10018BC  +
push edi  +
push 100h  +
push [ebp+var_C]  +
jmp loc_1004EF7  +
push offset aDestinationFil  +
push offset asc_10018BC  +
push edi  +
push 100h  +
push [ebp+arg_0]  +
call sub_100422A  +
mov edi eax +
test edi edi +
jz loc_1004F34  +
cmp byte ptr [edi] 0 +
jnz loc_1004E71  +
jmp loc_1004F34  +
push offset aMultipleFileLi  +
push [ebp+arg_C]  +
call sub_1009022  +
pop ecx  +
pop ecx  +
jmp loc_1004F34  +
push edi  +
push offset aS_1  +
push offset aUnexpectedText  +
push [ebp+arg_C]  +
call sub_1009022  +
add esp 10h +
cmp [ebp+var_4] 0 +
jnz loc_1004F57  +
mov eax [ebp+arg_C] +
cmp dword ptr [eax+200h] 0 +
jnz loc_1004F63  +
push offset aMissingSourceF  +
push eax  +
call sub_1009022  +
pop ecx  +
pop ecx  +
xor eax eax +
jmp loc_1004FB0  +
mov eax [ebp+arg_C] +
cmp dword ptr [eax+200h] 0 +
jz loc_1004F74  +
mov eax [ebx] +
test eax eax +
jz loc_1004F53  +
push eax  +
call sub_100A679  +
and dword ptr [ebx] 0 +
jmp loc_1004F53  +
mov esi [ebp+arg_4] +
cmp dword ptr [esi+40h] 3 +
jl loc_1004FAD  +
push [ebp+arg_0]  +
add esi 1B4h +
push [ebp+var_C]  +
push offset aSS  +
push offset aFilespecSrc1Ds  +
push 800h  +
push esi  +
call sub_100CC3F  +
push esi  +
push offset aS  +
call ds:printf  +
add esp 20h +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_14]  +
push [ebp+arg_8]  +
call sub_10047B9  +
cmp eax 0FFFFFFFFh +
jnz loc_1004FD5  +
xor eax eax +
jmp loc_1004FF3  +
test eax eax +
jnz loc_1004FE0  +
push offset a0  +
jmp loc_1004FE5  +
push offset a1  +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
call sub_1004ACF  +
xor eax eax +
inc eax  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_14]  +
push [ebp+arg_8]  +
call sub_1004874  +
cmp eax 0FFFFFFFFh +
jnz loc_1005015  +
xor eax eax +
jmp loc_1005026  +
push [ebp+arg_8]  +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
call sub_1004ACF  +
xor eax eax +
inc eax  +
pop ebp  +
retn 18h  +
***
push ebp  +
mov ebp esp +
push dword ptr [ebp+1Ch]  +
push dword ptr [ebp+10h]  +
call sub_10048DB  +
cmp eax 0FFFFFFFFh +
jnz loc_1005048  +
xor eax eax +
jmp loc_1005059  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+18h]  +
push dword ptr [ebp+14h]  +
call sub_1004ACF  +
xor eax eax +
inc eax  +
pop ebp  +
retn 18h  +
***
push ebp  +
mov ebp esp +
push dword ptr [ebp+1Ch]  +
push dword ptr [ebp+10h]  +
call sub_1004934  +
cmp eax 0FFFFFFFFh +
jnz loc_100507B  +
xor eax eax +
jmp loc_100508C  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+18h]  +
push dword ptr [ebp+14h]  +
call sub_1004ACF  +
xor eax eax +
inc eax  +
pop ebp  +
retn 18h  +
***
push ebp  +
mov ebp esp +
push dword ptr [ebp+1Ch]  +
push dword ptr [ebp+10h]  +
call sub_10049CF  +
cmp eax 0FFFFFFFFh +
jnz loc_10050AE  +
xor eax eax +
jmp loc_10050BF  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+18h]  +
push dword ptr [ebp+14h]  +
call sub_1004ACF  +
xor eax eax +
inc eax  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ds:_stricmp +
push offset aMmDdYy  +
push [ebp+arg_8]  +
call esi  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_10050F8  +
push offset aYyyyMmDd  +
push [ebp+arg_8]  +
call esi  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_10050F8  +
xor eax eax +
jmp loc_1005109  +
push [ebp+arg_8]  +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
call sub_1004ACF  +
xor eax eax +
inc eax  +
pop esi  +
pop ebp  +
retn 18h  +
***
push ebp  +
mov ebp esp +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+18h]  +
push dword ptr [ebp+14h]  +
call sub_1004ACF  +
xor eax eax +
inc eax  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_8] +
cmp byte ptr [edi] 0 +
mov esi edi +
jz loc_1005158  +
movzx eax byte ptr [esi] +
push eax  +
call ds:isdigit  +
pop ecx  +
test eax eax +
jz loc_1005158  +
inc esi  +
cmp byte ptr [esi] 0 +
jnz loc_1005143  +
cmp byte ptr [esi] 0 +
push edi  +
jz loc_100517A  +
push [ebp+arg_4]  +
push offset aSS  +
push offset aValueOfVariabl  +
push [ebp+arg_14]  +
call sub_1009022  +
add esp 14h +
xor eax eax +
jmp loc_1005188  +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
call sub_1004ACF  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebp  +
retn 18h  +
***
push ebp  +
mov ebp esp +
push dword ptr [ebp+10h]  +
call sub_1004A71  +
cmp eax 0FFFFFFFFh +
jz loc_10051C0  +
shl eax 4 +
push off_101683C[eax]  +
push dword ptr [ebp+18h]  +
push dword ptr [ebp+14h]  +
call sub_1004ACF  +
xor eax eax +
inc eax  +
pop ebp  +
retn 18h  +
***
pop ebp  +
jmp sub_1005132  +
***
push ebp  +
mov ebp esp +
push dword ptr [ebp+10h]  +
call sub_1004A71  +
cmp eax 0FFFFFFFFh +
jz loc_10051F8  +
shl eax 4 +
push off_1016844[eax]  +
push dword ptr [ebp+18h]  +
push dword ptr [ebp+14h]  +
call sub_1004ACF  +
xor eax eax +
inc eax  +
pop ebp  +
retn 18h  +
***
pop ebp  +
jmp sub_1005132  +
***
push ebp  +
mov ebp esp +
push edi  +
mov edi [ebp+10h] +
mov eax edi +
lea edx [eax+1] +
mov cl [eax] +
inc eax  +
test cl cl +
jnz loc_1005211  +
sub eax edx +
cmp eax 3 +
jbe loc_1005239  +
push edi  +
push offset aS_1  +
push offset aSectionOrderTo  +
push dword ptr [ebp+1Ch]  +
call sub_1009022  +
add esp 10h +
xor eax eax +
jmp loc_1005286  +
push ebx  +
xor ebx ebx +
push esi  +
mov esi edi +
cmp [edi] bl +
jz loc_1005275  +
movsx eax byte ptr [esi] +
push eax  +
call ds:toupper  +
movsx eax al +
sub eax 43h +
pop ecx  +
jz loc_1005266  +
dec eax  +
jz loc_1005261  +
dec eax  +
dec eax  +
jnz loc_100528B  +
push 4  +
jmp loc_1005268  +
xor eax eax +
inc eax  +
jmp loc_1005269  +
push 2  +
pop eax  +
test eax ebx +
jnz loc_100529C  +
or ebx eax +
inc esi  +
cmp byte ptr [esi] 0 +
jnz loc_1005243  +
push edi  +
push dword ptr [ebp+18h]  +
push dword ptr [ebp+14h]  +
call sub_1004ACF  +
xor eax eax +
inc eax  +
pop esi  +
pop ebx  +
pop edi  +
pop ebp  +
retn 18h  +
***
movsx eax byte ptr [esi] +
push edi  +
push eax  +
push offset aCS  +
push offset aBadSectionOrde  +
jmp loc_10052AB  +
movsx eax byte ptr [esi] +
push edi  +
push eax  +
push offset aCS  +
push offset aDuplicateSecti  +
push dword ptr [ebp+1Ch]  +
call sub_1009022  +
add esp 14h +
xor eax eax +
jmp loc_1005284  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
mov edi [ebp+arg_8] +
cmp byte ptr [edi] 0 +
jnz loc_10052EE  +
push offset aSet  +
push offset aS_1  +
push offset aNoVariableName  +
push [ebp+arg_C]  +
call sub_1009022  +
add esp 10h +
xor eax eax +
jmp loc_10053BC  +
push ebx  +
push offset asc_1001930  +
push edi  +
call ds:strpbrk  +
mov ebx eax +
pop ecx  +
pop ecx  +
mov [ebp+arg_8] ebx +
test ebx ebx +
jnz loc_1005324  +
push 3Dh  +
push offset aC  +
push offset a1AssignmentOpe  +
push [ebp+arg_C]  +
call sub_1009022  +
add esp 10h +
xor eax eax +
jmp loc_10053BB  +
push esi  +
mov esi ebx +
sub esi edi +
cmp esi 20h +
jl loc_1005348  +
push edi  +
push 1Fh  +
push offset aDS  +
push offset aVariableNameEx  +
push [ebp+arg_C]  +
call sub_1009022  +
add esp 14h +
jmp loc_100538D  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
lea eax [edi+4] +
push eax  +
call memcpy  +
push offset asc_1001888  +
push ebx  +
mov ebx ds:strspn +
mov byte ptr [esi+edi+4] 0 +
call ebx  +
mov esi eax +
add esi [ebp+arg_8] +
add esp 14h +
cmp byte ptr [esi] 3Dh +
jz loc_1005391  +
push 3Dh  +
push offset aC  +
push offset a1AssignmentOpe  +
push [ebp+arg_C]  +
call sub_1009022  +
add esp 10h +
xor eax eax +
jmp loc_10053BA  +
inc esi  +
push offset asc_1001888  +
push esi  +
call ebx  +
pop ecx  +
pop ecx  +
push [ebp+arg_C]  +
add esi eax +
push offset aVariableValue  +
push offset asc_10018BC  +
push esi  +
push 100h  +
add edi 24h +
push edi  +
call sub_1004C29  +
pop esi  +
pop ebx  +
pop edi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
push [ebp+arg_C]  +
mov edi [ebp+arg_4] +
push [ebp+arg_8]  +
push edi  +
push esi  +
call sub_10052BF  +
test eax eax +
jz loc_100541F  +
cmp dword ptr [edi+40h] 3 +
jl loc_100541C  +
lea eax [esi+24h] +
push eax  +
add esi 4 +
push esi  +
push offset aSS  +
push offset aSettingVariabl  +
add edi 1B4h +
push 800h  +
push edi  +
call sub_100CC3F  +
push edi  +
push offset aS  +
call ds:printf  +
add esp 20h +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebp  +
retn 10h  +
***
push ebp  +
mov ebp esp +
push dword ptr [ebp+10h]  +
call sub_1004A71  +
cmp eax 0FFFFFFFFh +
jz loc_1005457  +
shl eax 4 +
push off_1016840[eax]  +
push dword ptr [ebp+18h]  +
push dword ptr [ebp+14h]  +
call sub_1004ACF  +
xor eax eax +
inc eax  +
pop ebp  +
retn 18h  +
***
pop ebp  +
jmp sub_1005132  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 54h +
mov eax dword_1016A90 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_4] +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov edi [ebp+arg_8] +
mov ebx offset asc_1001888 +
mov [ebp+var_40] eax +
mov eax [ebp+arg_C] +
push ebx  +
push edi  +
mov [ebp+var_44] edi +
mov [ebp+var_3C] eax +
call ds:strspn  +
lea edi [eax+edi+1] +
push ebx  +
push edi  +
call ds:strpbrk  +
add esp 10h +
test eax eax +
jnz loc_10054BC  +
mov eax edi +
lea edx [eax+1] +
mov cl [eax] +
inc eax  +
test cl cl +
jnz loc_10054B1  +
sub eax edx +
jmp loc_10054BE  +
sub eax edi +
mov [ebp+var_48] eax +
cmp eax 32h +
jb loc_10054F1  +
push [ebp+var_44]  +
push offset aS_1  +
push offset aCommandNameToo  +
push [ebp+var_3C]  +
call sub_1009022  +
add esp 10h +
xor eax eax +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100DC5B  +
leave   +
retn 10h  +
push [ebp+var_48]  +
lea eax [ebp+var_38] +
push edi  +
push eax  +
call memcpy  +
mov eax [ebp+var_48] +
add esp 0Ch +
push [ebp+var_3C]  +
mov [ebp+eax+var_38] 0 +
lea eax [ebp+var_38] +
push eax  +
call sub_1004321  +
mov [ebp+var_44] eax +
test eax eax +
jz loc_10054DE  +
add edi [ebp+var_48] +
push ebx  +
push edi  +
mov [esi] eax +
call ds:strspn  +
add edi eax +
mov eax [ebp+var_44] +
dec eax  +
pop ecx  +
pop ecx  +
cmp eax 0Dh +
ja loc_10054DE  +
jmp ds:off_10057C6[eax*4]  +
xor eax eax +
inc eax  +
jmp loc_10054E0  +
push [ebp+var_3C]  +
push edi  +
push [ebp+var_40]  +
push esi  +
call sub_10053C6  +
jmp loc_10054E0  +
cmp byte ptr [edi] 0 +
jnz loc_100556A  +
push offset aDelete  +
push offset aS_1  +
push offset aNoVariableName  +
jmp loc_10054D3  +
push ebx  +
push edi  +
call ds:strpbrk  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1005598  +
push edi  +
push offset aDelete  +
push offset aSS  +
push offset aUnexpectedPara  +
push [ebp+var_3C]  +
call sub_1009022  +
add esp 14h +
jmp loc_10054DE  +
push 0  +
lea eax [ebp+var_54] +
push eax  +
lea eax [ebp+var_4C] +
push eax  +
lea eax [ebp+var_50] +
add esi 4 +
push eax  +
mov [ebp+var_50] esi +
mov [ebp+var_4C] 20h +
mov [ebp+var_54] edi +
call sub_100CC60  +
neg eax  +
sbb eax eax +
neg eax  +
jmp loc_10054E0  +
mov esi ds:_stricmp +
push offset aFile  +
push edi  +
call esi  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_10055E9  +
mov eax [ebp+var_40] +
mov dword ptr [eax+9Ch] 3 +
jmp loc_1005621  +
push offset aCabinet  +
push edi  +
call esi  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_1005606  +
mov eax [ebp+var_40] +
mov dword ptr [eax+9Ch] 2 +
jmp loc_1005621  +
push offset aDisk  +
push edi  +
call esi  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_1005632  +
mov eax [ebp+var_40] +
mov dword ptr [eax+9Ch] 1 +
mov ecx [ebp+var_40] +
xor eax eax +
inc eax  +
mov [ecx+98h] eax +
jmp loc_10054E0  +
push edi  +
push offset aInfbegin  +
push offset aSS  +
push offset aUnknownKeyword  +
jmp loc_1005588  +
mov eax [ebp+var_40] +
xor ecx ecx +
cmp [eax+98h] ecx +
jnz loc_100566D  +
push offset aInfbegin  +
push offset aInfend  +
push offset aSS  +
push offset a1CommandWithou  +
jmp loc_1005588  +
mov [eax+98h] ecx +
mov [eax+9Ch] ecx +
jmp loc_100553D  +
push [ebp+var_3C]  +
lea eax [esi+8] +
push offset aInfwriteString  +
push offset asc_10018BC  +
push edi  +
push 200h  +
push eax  +
call sub_1004C29  +
test eax eax +
jz loc_10054DE  +
mov eax [ebp+var_44] +
push 8  +
pop ecx  +
sub eax ecx +
jz loc_10056C4  +
dec eax  +
jz loc_10056BB  +
dec eax  +
jnz loc_10056CB  +
mov dword ptr [esi+4] 1 +
jmp loc_10056CB  +
mov dword ptr [esi+4] 2 +
jmp loc_10056CB  +
mov dword ptr [esi+4] 3 +
mov [esi] ecx +
jmp loc_100553D  +
mov ebx ds:_stricmp +
push offset aFolder  +
push edi  +
call ebx  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_10056F2  +
mov dword ptr [esi+4] 1 +
jmp loc_100553D  +
push offset aCabinet  +
push edi  +
call ebx  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_100570C  +
mov dword ptr [esi+4] 2 +
jmp loc_100553D  +
push offset aDisk  +
push edi  +
call ebx  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_1005726  +
mov dword ptr [esi+4] 3 +
jmp loc_100553D  +
push edi  +
push offset aNew  +
push offset aSS  +
push offset aUnknownKeyword  +
push [ebp+var_3C]  +
call sub_1009022  +
add esp 14h +
and dword ptr [esi+4] 0 +
jmp loc_10054DE  +
xor eax eax +
mov [esi+4] ax +
mov [esi+6] ax +
mov eax [ebp+var_40] +
push offset aNo  +
add eax 1B4h +
push 800h  +
push eax  +
mov [ebp+var_44] eax +
call sub_1004ACF  +
mov ebx offset aExplicit +
push ebx  +
push 800h  +
push [ebp+var_44]  +
call sub_1004B09  +
push ebx  +
mov ebx ds:_stricmp +
push edi  +
call ebx  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_1005799  +
or word ptr [esi+4] 1 +
jmp loc_10057AE  +
push [ebp+var_44]  +
push edi  +
call ebx  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_10057B8  +
mov eax 0FFFEh +
and [esi+4] ax +
or word ptr [esi+6] 1 +
jmp loc_100553D  +
push edi  +
push offset aOption  +
jmp loc_100572C  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 414h +
mov eax dword_1016A90 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_C] +
push ebx  +
mov ebx [ebp+arg_8] +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
mov edi [ebp+arg_0] +
push 3FFh  +
mov [ebp+var_408] eax +
lea eax [ebp-403h] +
push 0  +
push eax  +
mov [ebp+var_404] 0 +
call memset  +
add esp 0Ch +
cmp dword ptr [esi+98h] 0 +
lea eax [ebp+var_404] +
jz loc_1005896  +
mov [ebp+var_410] eax +
push 0  +
lea eax [ebp+var_414] +
push eax  +
lea eax [ebp+var_40C] +
push eax  +
lea eax [ebp+var_410] +
push eax  +
mov [ebp+var_40C] 400h +
mov [ebp+var_414] ebx +
call sub_100CC60  +
test eax eax +
jnz loc_10058AD  +
xor eax eax +
jmp loc_100598F  +
push [ebp+var_408]  +
push dword ptr [esi+8]  +
push ebx  +
push 400h  +
push eax  +
call sub_10045FF  +
jmp loc_100588B  +
lea eax [ebp+var_404] +
push offset asc_1001888  +
xor ebx ebx +
push eax  +
mov [edi] ebx +
call ds:strspn  +
pop ecx  +
lea eax [ebp+eax+var_404] +
pop ecx  +
mov cl [eax] +
cmp cl 3Bh +
jz loc_100598A  +
test cl cl +
jz loc_100598A  +
cmp cl 2Eh +
jnz loc_100590F  +
mov al [eax+1] +
cmp al cl +
jz loc_100590F  +
cmp al 5Ch +
jz loc_100590F  +
push [ebp+var_408]  +
lea eax [ebp+var_404] +
push eax  +
push esi  +
push edi  +
call sub_1005462  +
test eax eax +
jz loc_100588F  +
xor eax eax +
inc eax  +
jmp loc_100598F  +
cmp [esi+98h] ebx +
jz loc_1005962  +
mov dword ptr [edi] 8 +
mov eax [esi+9Ch] +
mov [edi+4] eax +
lea eax [ebp+var_404] +
mov [ebp+var_414] eax +
push ebx  +
lea eax [ebp+var_414] +
push eax  +
lea eax [ebp+var_40C] +
push eax  +
lea eax [ebp+var_410] +
add edi 8 +
push eax  +
mov [ebp+var_410] edi +
mov [ebp+var_40C] 200h +
call sub_100CC60  +
jmp loc_1005903  +
push [ebp+var_408]  +
lea eax [ebp+var_404] +
push eax  +
push esi  +
push edi  +
cmp [esi+94h] ebx +
jz loc_1005980  +
call sub_1004E29  +
jmp loc_1005903  +
call sub_1004CEC  +
jmp loc_1005903  +
xor eax eax +
inc eax  +
mov [edi] eax +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100DC5B  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 618h +
mov eax dword_1016A90 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_8] +
push ebx  +
mov ebx [ebp+arg_4] +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov edi [ebp+arg_C] +
push ebx  +
mov [ebp+var_40C] eax +
call sub_100D0D9  +
or [esi+0C0Ch] eax +
and [ebp+var_408] 0 +
jmp loc_1005A71  +
push edi  +
push 400h  +
lea eax [ebp+var_404] +
push eax  +
push ebx  +
call sub_100CF9B  +
test eax eax +
jz loc_1005A93  +
inc [ebp+var_408]  +
mov eax [ebp+var_408] +
mov [edi+208h] eax +
lea eax [ebp+var_404] +
mov [edi+20Ch] eax +
cmp dword ptr [esi+40h] 2 +
jl loc_1005A3B  +
push eax  +
push [ebp+var_408]  +
push offset aDS_0  +
call ds:printf  +
add esp 0Ch +
push edi  +
lea eax [ebp+var_404] +
push eax  +
push esi  +
lea eax [ebp+var_618] +
push eax  +
call sub_1005803  +
push edi  +
push [ebp+var_408]  +
lea eax [ebp+var_404] +
push eax  +
push ebx  +
lea eax [ebp+var_618] +
push eax  +
push esi  +
call [ebp+var_40C]  +
test eax eax +
jz loc_1005AA1  +
push ebx  +
call sub_100D08C  +
test eax eax +
jz loc_10059E7  +
xor eax eax +
inc eax  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100DC5B  +
leave   +
retn 10h  +
push ebx  +
call sub_100D08C  +
neg eax  +
sbb eax eax +
neg eax  +
jmp loc_1005A82  +
xor eax eax +
jmp loc_1005A82  +
***
call ds:GetVersion  +
test eax eax +
jns loc_1005AB7  +
xor eax eax +
retn   +
movzx eax al +
retn   +
***
call sub_1005AAA  +
cmp eax 6 +
jb locret_1005AF3  +
push offset ModuleName  +
call ds:GetModuleHandleW  +
test eax eax +
jz locret_1005AF3  +
push offset ProcName  +
push eax  +
call ds:GetProcAddress  +
test eax eax +
jz locret_1005AF3  +
push 0  +
push 0  +
push 1  +
push 0  +
call eax  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+10h] +
mov ecx [eax] +
push esi  +
push dword ptr [ecx+4]  +
mov esi [eax+4] +
call sub_100A519  +
push eax  +
call sub_100A519  +
push eax  +
push offset aS_1  +
push offset aInterrGetnextc  +
push esi  +
call sub_1009022  +
add esp 10h +
xor eax eax +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ds:printf +
push edi  +
push offset aMakecabVariabl  +
push offset aS_2  +
call esi  +
push offset asc_1001FD8  +
push offset aS  +
call esi  +
mov eax [ebp+arg_0] +
add esp 10h +
push dword ptr [eax+8]  +
call sub_100A519  +
mov edi eax +
test edi edi +
jz loc_1005BE0  +
push ebx  +
push edi  +
call sub_100A52C  +
push edi  +
mov ebx eax +
call sub_100A519  +
push edi  +
mov [ebp+arg_0] eax +
call sub_100A540  +
push [ebp+arg_0]  +
mov [ebp+var_4] eax +
push offset aS_4  +
call esi  +
pop ecx  +
pop ecx  +
test ebx ebx +
jz loc_1005BC7  +
push offset asc_1001FCC  +
call esi  +
pop ecx  +
test bl 1 +
jz loc_1005BAC  +
push offset aStandard  +
jmp loc_1005BB6  +
test bl 2 +
jz loc_1005BBF  +
push offset aDefined  +
push offset aS_1  +
call esi  +
pop ecx  +
pop ecx  +
push offset asc_1001FB4  +
call esi  +
pop ecx  +
push [ebp+var_4]  +
push offset aS_0  +
call esi  +
pop ecx  +
pop ecx  +
push edi  +
call sub_100D542  +
mov edi eax +
test edi edi +
jnz loc_1005B6E  +
pop ebx  +
xor eax eax +
pop edi  +
inc eax  +
pop esi  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_C]  +
mov eax [ebp+arg_4] +
add eax 4 +
push eax  +
mov eax [ebp+arg_0] +
push dword ptr [eax+8]  +
call sub_100D5E6  +
test eax eax +
jz loc_1005C15  +
push eax  +
call sub_100D435  +
xor eax eax +
inc eax  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
test byte ptr [eax+6] 1 +
jz loc_1005C3C  +
movzx eax word ptr [eax+4] +
mov ecx [ebp+arg_0] +
and eax 1 +
mov [ecx+0A0h] eax +
xor eax eax +
inc eax  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
mov al [ecx] +
test al al +
jz loc_1005C69  +
mov edx [ebp+arg_0] +
cbw   +
add [edx+80h] ax +
inc ecx  +
mov al [ecx] +
test al al +
jnz loc_1005C59  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
mov eax [ebp+arg_0] +
push offset aCabinet  +
push dword ptr [eax+8]  +
call sub_100D5E6  +
test eax eax +
jnz loc_1005C9C  +
push offset aOn  +
call ds:atoi  +
pop ecx  +
jmp loc_1005CA2  +
push eax  +
call sub_100D50C  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
mov eax [ebp+arg_0] +
lea eax [eax+ecx-1] +
cdq   +
idiv  ecx +
imul eax ecx +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
push [ebp+arg_8]  +
mov edi [ebp+arg_4] +
push offset aReservepercabi  +
push dword ptr [edi+8]  +
call sub_100D5E6  +
mov ebx ds:atol +
test eax eax +
jnz loc_1005CF8  +
push offset a0  +
call ebx  +
pop ecx  +
jmp loc_1005CFE  +
push eax  +
call sub_100D527  +
push [ebp+arg_8]  +
mov esi [ebp+arg_0] +
push offset aReserveperfold  +
mov [esi+8] eax +
push dword ptr [edi+8]  +
call sub_100D5E6  +
test eax eax +
jnz loc_1005D22  +
push offset a0  +
call ebx  +
pop ecx  +
jmp loc_1005D28  +
push eax  +
call sub_100D527  +
push [ebp+arg_8]  +
mov [esi+0Ch] eax +
push offset aReserveperdata  +
push dword ptr [edi+8]  +
call sub_100D5E6  +
test eax eax +
jnz loc_1005D49  +
push offset a0  +
call ebx  +
pop ecx  +
jmp loc_1005D4F  +
push eax  +
call sub_100D527  +
mov [esi+10h] eax +
pop edi  +
xor eax eax +
pop esi  +
inc eax  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov edi [ebp+arg_4] +
push edi  +
push offset aCompress  +
push dword ptr [esi+8]  +
call sub_100D5E6  +
test eax eax +
jnz loc_1005D8E  +
push offset aOn  +
call ds:atoi  +
pop ecx  +
jmp loc_1005D94  +
push eax  +
call sub_100D50C  +
test eax eax +
jz loc_1005E67  +
push edi  +
push offset aCompressiontyp  +
push dword ptr [esi+8]  +
call sub_100D5E6  +
push edi  +
test eax eax +
jnz loc_1005DB6  +
push offset aMszip  +
jmp loc_1005DBD  +
push eax  +
call sub_100A540  +
push eax  +
call sub_10048DB  +
dec eax  +
jz loc_1005E62  +
dec eax  +
jz loc_1005E05  +
dec eax  +
jz loc_1005DD7  +
push 0Fh  +
pop eax  +
jmp loc_1005E69  +
push edi  +
push offset aCompressionmem  +
push dword ptr [esi+8]  +
call sub_100D5E6  +
push edi  +
test eax eax +
jnz loc_1005DF1  +
push offset a18  +
jmp loc_1005DF8  +
push eax  +
call sub_100A540  +
push eax  +
call sub_10049CF  +
shl eax 8 +
or eax 3 +
jmp loc_1005E69  +
push ebx  +
push edi  +
push offset aCompressionlev  +
push dword ptr [esi+8]  +
call sub_100D5E6  +
push edi  +
test eax eax +
jnz loc_1005E20  +
push offset a2  +
jmp loc_1005E27  +
push eax  +
call sub_100A540  +
push eax  +
call sub_1004934  +
push edi  +
push offset aCompressionmem  +
push dword ptr [esi+8]  +
mov ebx eax +
call sub_100D5E6  +
push edi  +
test eax eax +
jnz loc_1005E48  +
push offset a18  +
jmp loc_1005E4F  +
push eax  +
call sub_100A540  +
push eax  +
call sub_10049CF  +
shl eax 4 +
or eax ebx +
shl eax 4 +
or eax 2 +
pop ebx  +
jmp loc_1005E69  +
xor eax eax +
inc eax  +
jmp loc_1005E69  +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
push [ebp+arg_4]  +
mov edi offset aMaxdisksize +
push edi  +
push dword ptr [esi+14h]  +
lea ebx [esi+1B4h] +
push offset aMaxdisksize_0  +
push 800h  +
push ebx  +
call sub_100CCCC  +
test eax eax +
jz loc_1005EE1  +
push [ebp+arg_4]  +
push ebx  +
push dword ptr [esi+8]  +
call sub_100D5E6  +
test eax eax +
jnz loc_1005EDB  +
push [ebp+arg_4]  +
call sub_1009052  +
push [ebp+arg_4]  +
push edi  +
push dword ptr [esi+8]  +
call sub_100D5E6  +
test eax eax +
jnz loc_1005EDB  +
push offset a1_44m  +
call ds:atol  +
pop ecx  +
jmp loc_1005EE1  +
push eax  +
call sub_100D527  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 22Ch +
mov eax dword_1016A90 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_4] +
mov ecx [ebp+arg_C] +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
mov [ebp+var_22C] ecx +
test eax eax +
jnz loc_1005F2D  +
push 0Ah  +
push 0Ch  +
lea eax [ebp+var_10] +
push eax  +
push [ebp+arg_8]  +
call _ltoa_s  +
add esp 10h +
lea eax [ebp+var_10] +
push eax  +
push esi  +
call sub_1004BFA  +
mov ebx eax +
test ebx ebx +
jnz loc_1005F3D  +
inc eax  +
jmp loc_1005FA0  +
push edi  +
lea eax [ebp+var_228] +
push eax  +
mov edi offset aClustersize +
push edi  +
push dword ptr [esi+8]  +
call sub_100D5E6  +
test eax eax +
jz loc_1005F6B  +
push [ebp+var_22C]  +
push ebx  +
push edi  +
push dword ptr [esi+8]  +
call sub_100D953  +
test eax eax +
jz loc_1005F98  +
lea eax [ebp+var_228] +
push eax  +
mov edi offset aMaxdiskfilecou +
push edi  +
push dword ptr [esi+8]  +
call sub_100D5E6  +
test eax eax +
jz loc_1005F9C  +
push [ebp+var_22C]  +
push ebx  +
push edi  +
push dword ptr [esi+8]  +
call sub_100D953  +
test eax eax +
jnz loc_1005F9C  +
xor eax eax +
jmp loc_1005F9F  +
xor eax eax +
inc eax  +
pop edi  +
mov ecx [ebp+var_4] +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100DC5B  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
cmp dword ptr [eax+7Ch] 0 +
jz loc_1006017  +
push dword ptr [eax+8Ch]  +
call sub_100A540  +
test byte ptr [eax+18h] 4 +
mov ecx [ebp+arg_0] +
jz loc_1005FE0  +
mov dx [eax+1Ch] +
mov [ecx] dx +
jmp loc_1005FE7  +
mov dx [ecx] +
mov [eax+1Ch] dx +
test byte ptr [eax+18h] 8 +
jz loc_1005FF7  +
mov dx [eax+1Eh] +
mov [ecx+2] dx +
jmp loc_1005FFF  +
mov dx [ecx+2] +
mov [eax+1Eh] dx +
test byte ptr [eax+18h] 10h +
jz loc_100600F  +
mov ax [eax+20h] +
mov [ecx+4] ax +
jmp loc_1006017  +
mov cx [ecx+4] +
mov [eax+20h] cx +
xor eax eax +
inc eax  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_C] +
push ebx  +
push esi  +
mov esi [eax] +
mov eax [ebp+arg_0] +
xor ebx ebx +
sub eax ebx +
push edi  +
jz loc_10060D3  +
dec eax  +
jz loc_1006077  +
dec eax  +
jnz loc_100617B  +
cmp [esi+30h] ebx +
jz loc_100606F  +
mov edi [esi+34h] +
push edi  +
push [ebp+arg_8]  +
call sub_1005CAB  +
push edi  +
push [ebp+arg_4]  +
mov ebx eax +
call sub_1005CAB  +
sub eax ebx +
add [esi+20h] eax +
mov eax ebx +
jmp loc_100617E  +
mov eax [ebp+arg_8] +
jmp loc_100617E  +
mov [esi+24h] ebx +
cmp [ebp+arg_8] ebx +
jbe loc_100617B  +
mov eax [ebp+arg_4] +
fild  [ebp+arg_4] +
lea edi [esi+1B4h] +
test eax eax +
jge loc_1006099  +
fadd  ds:flt_10020D0 +
mov eax [ebp+arg_8] +
fild  [ebp+arg_8] +
test eax eax +
jge loc_10060A9  +
fadd  ds:flt_10020D0 +
fdivp st(1) st +
push ecx  +
push ecx  +
fmul  ds:dbl_10020C8 +
fstp  [esp+14h+var_14] +
push offset a6_2f  +
push offset a1FlushingCurre  +
push 800h  +
push edi  +
call sub_100CC3F  +
add esp 18h +
jmp loc_1006173  +
mov eax [ebp+arg_8] +
add [esi+60h] eax +
mov eax [ebp+arg_4] +
add [esi+64h] eax +
mov eax [esi+5Ch] +
mov ecx [esi+60h] +
mov edx [esi+64h] +
cmp eax ebx +
jbe loc_1006118  +
mov edi ecx +
mov [ebp+arg_C] edi +
fild  [ebp+arg_C] +
test edi edi +
jge loc_10060FE  +
fadd  ds:flt_10020D0 +
mov [ebp+arg_C] eax +
fild  [ebp+arg_C] +
test eax eax +
jge loc_100610E  +
fadd  ds:flt_10020D0 +
fdivp st(1) st +
fmul  ds:dbl_10020C8 +
jmp loc_100611A  +
fldz   +
cmp dword ptr [esi+40h] 3 +
lea edi [esi+1B4h] +
jl loc_1006149  +
push edx  +
push ecx  +
push ecx  +
push ecx  +
fstp  [esp+1Ch+var_1C] +
push offset a6_2fLdLd  +
push offset a1Raw2Compresse  +
push 800h  +
push edi  +
call sub_100CC3F  +
add esp 20h +
push 1  +
jmp loc_1006174  +
push dword ptr [esi+68h]  +
lea eax [esi+0B4h] +
push dword ptr [esi+6Ch]  +
push eax  +
push ecx  +
push ecx  +
fstp  qword ptr [esp] +
push offset a6_2fSLdLd  +
push offset a123Of4  +
push 800h  +
push edi  +
call sub_100CC3F  +
add esp 24h +
push ebx  +
push edi  +
push esi  +
call sub_10041B2  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 24h +
mov eax [ebp+arg_4] +
or [ebp+var_20] 0FFFFFFFFh +
mov [ebp+dwShareMode] 4 +
mov [ebp+dwFlagsAndAttributes] 80h +
test al 2 +
jz loc_10061DF  +
mov [ebp+dwDesiredAccess] 0C0000000h +
jmp loc_10061FA  +
test al 1 +
jz loc_10061EC  +
mov [ebp+dwDesiredAccess] 40000000h +
jmp loc_10061FA  +
mov [ebp+dwDesiredAccess] 80000000h +
mov [ebp+dwShareMode] 5 +
test al 10h +
jz loc_1006207  +
mov [ebp+dwFlagsAndAttributes] 10000080h +
jmp loc_1006212  +
test al 20h +
jz loc_1006212  +
mov [ebp+dwFlagsAndAttributes] 8000080h +
push ebx  +
push esi  +
mov ecx 100h +
push edi  +
mov esi eax +
test eax ecx +
jz loc_100622E  +
and esi 400h +
neg esi  +
sbb esi esi +
inc esi  +
inc esi  +
jmp loc_100623E  +
and esi 200h +
neg esi  +
sbb esi esi +
and esi 2 +
add esi 3 +
test al 40h +
jz loc_1006249  +
or [ebp+dwFlagsAndAttributes] 4000000h +
test eax 1000h +
jz loc_1006253  +
or [ebp+dwFlagsAndAttributes] ecx +
mov edi ds:CreateFileA +
push 0  +
push [ebp+dwFlagsAndAttributes]  +
push esi  +
push 0  +
push [ebp+dwShareMode]  +
push [ebp+dwDesiredAccess]  +
push [ebp+lpFileName]  +
call edi  +
mov ebx ds:GetLastError +
mov [ebp+hObject] eax +
call ebx  +
cmp [ebp+hObject] 0FFFFFFFFh +
mov [ebp+var_18] eax +
jnz loc_100631C  +
push 0  +
mov [ebp+dwMilliseconds] 19h +
call ds:time  +
mov [ebp+var_1C] eax +
add eax 46h +
pop ecx  +
mov [ebp+var_24] eax +
push [ebp+lpFileName]  +
lea eax [ebp+var_1C] +
push [ebp+var_18]  +
push eax  +
call ds:ctime  +
pop ecx  +
push eax  +
push offset a_19sFileOpenEr  +
call ds:printf  +
add esp 10h +
push [ebp+dwMilliseconds]  +
call ds:Sleep  +
mov eax [ebp+dwMilliseconds] +
add eax eax +
mov ecx 1388h +
mov [ebp+dwMilliseconds] eax +
cmp eax ecx +
jb loc_10062DA  +
mov [ebp+dwMilliseconds] ecx +
push 0  +
push [ebp+dwFlagsAndAttributes]  +
push esi  +
push 0  +
push [ebp+dwShareMode]  +
push [ebp+dwDesiredAccess]  +
push [ebp+lpFileName]  +
call edi  +
mov [ebp+hObject] eax +
call ebx  +
push 0  +
mov [ebp+var_18] eax +
call ds:time  +
cmp [ebp+hObject] 0FFFFFFFFh +
pop ecx  +
mov [ebp+var_1C] eax +
jnz loc_100631C  +
cmp eax [ebp+var_24] +
jl loc_100629D  +
mov eax [ebp+arg_C] +
mov ecx [ebp+var_18] +
mov [eax] ecx +
mov eax [ebp+var_20] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
mov eax [ebp+arg_4] +
or eax 8080h +
push eax  +
push [ebp+hObject]  +
call ds:_open_osfhandle  +
pop ecx  +
pop ecx  +
mov [ebp+var_20] eax +
cmp eax 0FFFFFFFFh +
jnz loc_1006314  +
call ds:_errno  +
mov eax [eax] +
mov ecx [ebp+arg_C] +
push eax  +
push [ebp+lpFileName]  +
mov [ecx] eax +
push offset a_open_osfhandl  +
call ds:printf  +
add esp 0Ch +
push [ebp+hObject]  +
call ds:CloseHandle  +
jmp loc_1006314  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call ds:_read  +
mov esi eax +
add esp 0Ch +
cmp esi [ebp+10h] +
jz loc_1006393  +
call ds:_errno  +
mov eax [eax] +
mov ecx [ebp+14h] +
mov [ecx] eax +
mov eax esi +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call ds:_write  +
mov esi eax +
add esp 0Ch +
cmp esi [ebp+10h] +
jz loc_10063C9  +
call ds:_errno  +
mov eax [eax] +
mov ecx [ebp+14h] +
mov [ecx] eax +
mov eax esi +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push dword ptr [ebp+8]  +
call ds:_close  +
mov esi eax +
pop ecx  +
test esi esi +
jz loc_10063F6  +
call ds:_errno  +
mov eax [eax] +
mov ecx [ebp+0Ch] +
mov [ecx] eax +
mov eax esi +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call ds:_lseek  +
mov esi eax +
add esp 0Ch +
cmp esi 0FFFFFFFFh +
jnz loc_100642C  +
call ds:_errno  +
mov eax [eax] +
mov ecx [ebp+14h] +
mov [ecx] eax +
mov eax esi +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push dword ptr [ebp+8]  +
call ds:remove  +
mov esi eax +
pop ecx  +
test esi esi +
jz loc_1006459  +
call ds:_errno  +
mov eax [eax] +
mov ecx [ebp+0Ch] +
mov [ecx] eax +
mov eax esi +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
or dword ptr [eax+20h] 0FFFFFFFFh +
or dword ptr [eax+88h] 0FFFFFFFFh +
xor ecx ecx +
xor edx edx +
inc edx  +
or dword ptr [eax+8Ch] 0FFFFFFFFh +
mov [eax] ecx +
mov [eax+14h] ecx +
mov [eax+18h] ecx +
mov [eax+1Ch] ecx +
mov [eax+38h] ecx +
mov [eax+3Ch] ecx +
mov [eax+60h] ecx +
mov [eax+64h] ecx +
mov [eax+6Ch] ecx +
mov [eax+0B0h] ecx +
mov [eax+24h] ecx +
mov [eax+28h] ecx +
mov [eax+2Ch] ecx +
mov [eax+30h] ecx +
mov [eax+90h] edx +
mov [eax+94h] edx +
mov [eax+98h] ecx +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
call sub_100938D  +
cmp eax 0FFFFFFFFh +
jnz loc_10064E2  +
xor eax eax +
jmp loc_100650C  +
push esi  +
mov esi [ebp+arg_0] +
cmp dword ptr [esi+4] 0 +
jnz loc_10064FB  +
push [ebp+arg_8]  +
call sub_100912A  +
mov [esi+4] eax +
test eax eax +
jz loc_100650B  +
push [ebp+arg_8]  +
push 0  +
push [ebp+arg_4]  +
push dword ptr [esi+4]  +
call sub_1009079  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
mov edi [ebp+arg_0] +
test edi edi +
jz loc_100656F  +
cmp dword ptr [edi+54h] 0 +
push esi  +
mov esi ds:printf +
jz loc_100653B  +
push offset asc_1002154  +
call esi  +
and dword ptr [edi+54h] 0 +
pop ecx  +
mov eax [ebp+arg_4] +
mov ecx [eax+204h] +
push eax  +
push offset aError  +
test ecx ecx +
jz loc_1006561  +
push dword ptr [eax+208h]  +
push ecx  +
push offset aSDSS  +
call esi  +
add esp 14h +
jmp loc_100656B  +
push offset aSS_0  +
call esi  +
add esp 0Ch +
inc dword ptr [edi+38h]  +
pop esi  +
pop edi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
cmp eax 11h +
jg loc_10065F4  +
jz loc_10065ED  +
cmp eax 0Ah +
jg loc_10065CD  +
jz loc_10065C6  +
dec eax  +
dec eax  +
jz loc_10065BC  +
sub eax 5 +
jz loc_10065B2  +
dec eax  +
jz loc_10065A8  +
dec eax  +
jnz loc_1006613  +
mov eax offset aBadFileHandleI +
jmp loc_1006649  +
mov eax offset aInvalidExecuta +
jmp loc_1006649  +
mov eax offset aArgListTooLong +
jmp loc_1006649  +
mov eax offset aFilePathDoesNo +
jmp loc_1006649  +
mov eax offset aNoChildProcess +
jmp loc_1006649  +
sub eax 0Bh +
jz loc_10065E6  +
dec eax  +
jz loc_10065DF  +
dec eax  +
jnz loc_1006613  +
mov eax offset aPermissionDeni +
jmp loc_1006649  +
mov eax offset aOutOfMemory +
jmp loc_1006649  +
mov eax offset aCreateProcessF +
jmp loc_1006649  +
mov eax offset aFileAlreadyExi +
jmp loc_1006649  +
sub eax 12h +
jz loc_1006644  +
sub eax 4 +
jz loc_100663D  +
dec eax  +
dec eax  +
jz loc_1006636  +
sub eax 4 +
jz loc_100662F  +
sub eax 5 +
jz loc_1006628  +
dec eax  +
jz loc_1006621  +
dec eax  +
dec eax  +
jz loc_100661A  +
mov eax offset aUnknownCRunTim +
jmp loc_1006649  +
mov eax offset aDeadlockWouldO +
jmp loc_1006649  +
mov eax offset aMathArgumentOu +
jmp loc_1006649  +
mov eax offset aBadArgumentToM +
jmp loc_1006649  +
mov eax offset aOutOfDiskSpace +
jmp loc_1006649  +
mov eax offset aOutOfFileHandl +
jmp loc_1006649  +
mov eax offset aInvalidArgumen +
jmp loc_1006649  +
mov eax offset aCannotMoveFile +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
lea esi [eax+8Ch] +
mov ecx [esi] +
cmp ecx 0FFFFFFFFh +
jnz loc_1006675  +
push dword ptr [eax+84h]  +
call sub_100A519  +
jmp loc_100667B  +
push ecx  +
call sub_100A52C  +
mov [esi] eax +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
lea esi [ebx+88h] +
cmp dword ptr [esi] 0FFFFFFFFh +
jnz loc_10066A9  +
push dword ptr [ebx+84h]  +
call sub_100A519  +
mov [esi] eax +
push edi  +
mov edi [esi] +
push edi  +
call sub_100A52C  +
push edi  +
mov [esi] eax +
call sub_100A540  +
mov esi eax +
mov eax [ebp+arg_8] +
push offset aSize  +
push dword ptr [esi+24h]  +
mov [esi+0Ch] eax +
mov eax [ebp+arg_C] +
mov [esi+10h] eax +
call sub_100A978  +
pop edi  +
test eax eax +
jz loc_10066E5  +
push dword ptr [eax]  +
call ds:atol  +
pop ecx  +
mov [esi] eax +
cmp dword ptr [ebx+90h] 2 +
jnz loc_1006702  +
push [ebp+arg_10]  +
push dword ptr [esi+24h]  +
push esi  +
push [ebp+arg_4]  +
push ebx  +
call sub_100C186  +
test eax eax +
jz loc_1006705  +
xor eax eax +
inc eax  +
pop esi  +
pop ebx  +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
push [ebp+arg_C]  +
push offset aGenerateinf  +
push dword ptr [esi+8]  +
call sub_100D5E6  +
push eax  +
call sub_100D50C  +
mov ecx [esi+90h] +
push 3  +
pop ebx  +
cmp ecx ebx +
jnz loc_100675D  +
test eax eax +
jnz loc_100675D  +
cmp [ebp+arg_4] ebx +
jnz loc_100675D  +
push offset aIllegalToWrite  +
push [ebp+arg_C]  +
call sub_1009022  +
pop ecx  +
pop ecx  +
xor eax eax +
jmp loc_1006871  +
cmp dword ptr [esi+10h] 0 +
jnz loc_100676B  +
xor eax eax +
inc eax  +
jmp loc_1006871  +
cmp ecx 2 +
jnz loc_1006860  +
cmp [ebp+arg_4] ebx +
jnz loc_1006860  +
cmp dword ptr [esi+6Ch] 0 +
jle loc_1006860  +
push dword ptr [esi+8Ch]  +
call sub_100A540  +
mov edi eax +
test byte ptr [edi+18h] 1 +
jz loc_10067A6  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push ebx  +
jmp loc_1006869  +
cmp dword ptr [edi+28h] 0 +
mov ebx offset aInfFileLine +
jnz loc_10067C8  +
push [ebp+arg_C]  +
push ebx  +
push offset loc_100AE89  +
push 0  +
call sub_100A4C9  +
mov [edi+28h] eax +
test eax eax +
jz loc_1006756  +
push 8  +
call ds:malloc  +
mov esi eax +
pop ecx  +
test esi esi +
jnz loc_10067F6  +
push offset aTrackingInfFil  +
push offset aS_1  +
push offset aOutOfMemory1  +
push [ebp+arg_C]  +
call sub_1009022  +
add esp 10h +
jmp loc_1006756  +
push [ebp+arg_8]  +
call ds:_strdup  +
pop ecx  +
mov [esi+4] eax +
test eax eax +
jnz loc_100682D  +
push offset aTrackingInfFil  +
push offset aS_1  +
push offset aOutOfMemory1  +
push [ebp+arg_C]  +
call sub_1009022  +
push esi  +
call ds:free  +
add esp 14h +
jmp loc_1006756  +
push [ebp+arg_C]  +
push 0  +
push ebx  +
push esi  +
push 0  +
push dword ptr [edi+28h]  +
call sub_100A789  +
test eax eax +
jnz loc_1006855  +
push dword ptr [esi+4]  +
mov edi ds:free +
call edi  +
push esi  +
call edi  +
jmp loc_1006754  +
mov dword ptr [esi] 3 +
jmp loc_1006763  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push dword ptr [esi+70h]  +
call sub_100A9F5  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_14] +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
push ebx  +
push offset aUniquefiles  +
push dword ptr [edi+8]  +
call sub_100D5E6  +
push eax  +
call sub_100D50C  +
mov [ebp+arg_14] eax +
mov eax [ebp+arg_10] +
push offset aUnique  +
push dword ptr [eax+204h]  +
call sub_100A978  +
xor esi esi +
cmp eax esi +
jz loc_10068D2  +
push ebx  +
push dword ptr [eax]  +
call sub_10047B9  +
mov [ebp+arg_14] eax +
cmp eax 0FFFFFFFFh +
jnz loc_10068D2  +
xor eax eax +
jmp loc_1006A28  +
cmp dword ptr [edi+90h] 3 +
jnz loc_10068EF  +
cmp [ebp+arg_14] esi +
jnz loc_10068EF  +
push offset aUniqueOffNotAl  +
push ebx  +
call sub_1009022  +
pop ecx  +
pop ecx  +
jmp loc_10068CB  +
cmp [edi+84h] esi +
jnz loc_1006912  +
push ebx  +
push offset aFileInfo  +
push offset loc_100AE41  +
push esi  +
call sub_100A4C9  +
mov [edi+84h] eax +
cmp eax esi +
jz loc_10068CB  +
push 40h  +
call ds:malloc  +
mov esi eax +
pop ecx  +
test esi esi +
jnz loc_100693B  +
push offset aTrackingFiles  +
push offset aS_1  +
push offset aOutOfMemory1  +
push ebx  +
call sub_1009022  +
add esp 10h +
jmp loc_10068CB  +
push dword ptr [ebx+204h]  +
call ds:_strdup  +
pop ecx  +
mov [esi+4] eax +
test eax eax +
jnz loc_1006973  +
push offset aTrackingFiles  +
push offset aS_1  +
push offset aOutOfMemory1  +
push ebx  +
call sub_1009022  +
push esi  +
call ds:free  +
add esp 14h +
jmp loc_10068CB  +
push ebx  +
push [ebp+arg_14]  +
push offset aFile_0  +
push esi  +
push [ebp+arg_8]  +
push dword ptr [edi+84h]  +
call sub_100A789  +
xor ecx ecx +
cmp eax ecx +
jnz loc_10069D7  +
cmp dword ptr [ebx+210h] 101h +
jnz loc_10069C4  +
push dword ptr [ebx+214h]  +
call sub_100A540  +
push dword ptr [eax+8]  +
push dword ptr [eax+4]  +
push [ebp+arg_8]  +
push offset aSSD  +
push offset aDuplicateFileN  +
push ebx  +
call sub_1009022  +
add esp 18h +
push dword ptr [esi+4]  +
mov edi ds:free +
call edi  +
push esi  +
call edi  +
jmp loc_10068EB  +
mov edx [ebx+208h] +
or dword ptr [esi+0Ch] 0FFFFFFFFh +
or dword ptr [esi+10h] 0FFFFFFFFh +
mov [esi+8] edx +
mov edx [ebp+arg_C] +
mov [esi] edx +
mov edx [edi+68h] +
mov [esi+14h] edx +
xor edx edx +
mov [esi+1Ch] dx +
mov [esi+1Eh] dx +
mov [esi+20h] dx +
mov edx [ebp+arg_10] +
mov [esi+28h] ecx +
mov [esi+18h] ecx +
mov edi [edx+204h] +
mov [esi+24h] edi +
mov [esi+2Ch] ecx +
mov [esi+30h] ecx +
mov [esi+34h] ecx +
mov [esi+38h] ecx +
mov [esi+3Ch] ecx +
mov [edx+204h] ecx +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax [ebp+arg_0] +
cmp dword ptr [eax+90h] 3 +
jz loc_1006A4F  +
xor eax eax +
inc eax  +
jmp locret_1006B15  +
push ebx  +
push esi  +
push edi  +
push dword ptr [eax+84h]  +
xor edi edi +
inc edi  +
call sub_100A519  +
mov [ebp+var_4] eax +
test eax eax +
jz loc_1006B10  +
mov esi [ebp+arg_4] +
push [ebp+var_4]  +
call sub_100A540  +
mov ebx eax +
test byte ptr [ebx+18h] 2 +
jnz loc_1006AFD  +
push offset aInf  +
push dword ptr [ebx+24h]  +
call sub_100A978  +
test eax eax +
jz loc_1006AA0  +
push esi  +
push dword ptr [eax]  +
call sub_10047B9  +
cmp eax 0FFFFFFFFh +
jz loc_1006B19  +
test eax eax +
jz loc_1006AFD  +
push [ebp+var_4]  +
call sub_100A519  +
push eax  +
push offset aS_1  +
push offset aFileInLayoutSe  +
push esi  +
call sub_1009022  +
mov eax [esi+204h] +
mov [ebp+arg_4] eax +
lea edi [esi+208h] +
mov eax [edi] +
add esp 10h +
mov [ebp+var_8] eax +
mov eax [ebx+4] +
push esi  +
push [ebp+arg_0]  +
mov [esi+204h] eax +
mov eax [ebx+8] +
mov [edi] eax +
call sub_1006515  +
mov eax [ebp+arg_4] +
mov [esi+204h] eax +
mov eax [ebp+var_8] +
push esi  +
mov [edi] eax +
call sub_1009052  +
xor edi edi +
push [ebp+var_4]  +
call sub_100A52C  +
mov [ebp+var_4] eax +
test eax eax +
jnz loc_1006A6E  +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
xor eax eax +
jmp loc_1006B12  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax [ebp+arg_0] +
push dword ptr [eax+8]  +
mov [ebp+var_8] 1 +
call sub_100A519  +
mov [ebp+var_4] eax +
test eax eax +
jz loc_1006C4C  +
push ebx  +
push esi  +
push edi  +
push [ebp+var_4]  +
call sub_100A52C  +
test al 3 +
jnz loc_1006C36  +
push [ebp+var_4]  +
call sub_100A519  +
cmp off_10168B8 0 +
mov edi eax +
mov ebx offset off_10168B8 +
jz loc_1006BC3  +
mov ecx [ebx] +
mov eax ecx +
lea esi [eax+1] +
mov dl [eax] +
inc eax  +
test dl dl +
jnz loc_1006B78  +
sub eax esi +
lea esi [eax-1] +
push esi  +
push ecx  +
push edi  +
call ds:_strnicmp  +
add esp 0Ch +
test eax eax +
jz loc_1006B9E  +
add ebx 4 +
cmp dword ptr [ebx] 0 +
jnz loc_1006B71  +
jmp loc_1006BC3  +
add esi edi +
jmp loc_1006BB2  +
movzx eax al +
push eax  +
call ds:isdigit  +
pop ecx  +
test eax eax +
jz loc_1006BB8  +
inc esi  +
mov al [esi] +
test al al +
jnz loc_1006BA2  +
xor eax eax +
cmp [esi] al +
setz al  +
test eax eax +
jnz loc_1006C36  +
push 3  +
push offset aInf  +
push edi  +
call ds:_strnicmp  +
add esp 0Ch +
test eax eax +
jnz loc_1006BFF  +
lea ebx [edi+3] +
mov esi offset off_10168F0 +
cmp off_10168F0 eax +
jz loc_1006BFF  +
push dword ptr [esi]  +
push ebx  +
call ds:_stricmp  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1006C36  +
add esi 4 +
cmp dword ptr [esi] 0 +
jnz loc_1006BE8  +
push edi  +
push offset aExplicit  +
push offset aOption  +
push offset aSSS  +
push offset a12AndVariableN  +
push [ebp+arg_4]  +
call sub_1009022  +
add esp 18h +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1006515  +
push [ebp+arg_4]  +
call sub_1009052  +
and [ebp+var_8] 0 +
push [ebp+var_4]  +
call sub_100D542  +
mov [ebp+var_4] eax +
test eax eax +
jnz loc_1006B49  +
pop edi  +
pop esi  +
pop ebx  +
mov eax [ebp+var_8] +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_4] +
xor ebx ebx +
mov esi 1000h +
push esi  +
mov [ebp+var_4] ebx +
mov [ebp+var_8] ebx +
mov [edi] ebx +
call ds:malloc  +
pop ecx  +
mov [ebp+arg_4] eax +
cmp eax ebx +
jnz loc_1006CA3  +
push [ebp+arg_0]  +
push offset aS_1  +
push offset aOutOfMemoryDoi  +
push [ebp+arg_8]  +
call sub_1009022  +
add esp 10h +
xor eax eax +
jmp loc_1006D2C  +
lea eax [ebp+var_C] +
push eax  +
push 8000h  +
push [ebp+arg_0]  +
call ds:_open  +
mov ebx eax +
add esp 0Ch +
cmp ebx 0FFFFFFFFh +
jnz loc_1006CFF  +
push [ebp+arg_0]  +
push offset aS_1  +
push offset aCouldNotOpenFi  +
push [ebp+arg_8]  +
call sub_1009022  +
add esp 10h +
jmp loc_1006D1F  +
push esi  +
push [ebp+arg_4]  +
push ebx  +
call ds:_read  +
add esp 0Ch +
cmp eax 0FFFFFFFFh +
jz loc_1006D33  +
test eax eax +
jz loc_1006CFF  +
push [ebp+var_4]  +
push eax  +
push [ebp+arg_4]  +
call sub_1004123  +
mov [ebp+var_4] eax +
push ebx  +
call ds:_eof  +
pop ecx  +
test eax eax +
jz loc_1006CD9  +
mov eax [ebp+var_4] +
mov [ebp+var_8] 1 +
mov [edi] eax +
push ebx  +
call ds:_close  +
pop ecx  +
push [ebp+arg_4]  +
call ds:free  +
mov eax [ebp+var_8] +
pop ecx  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
push [ebp+arg_0]  +
push offset aS_1  +
push offset aReadFailureDoi  +
push [ebp+arg_8]  +
call sub_1009022  +
add esp 10h +
jmp loc_1006D17  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 24h +
push ebx  +
push edi  +
mov edi [ebp+arg_0] +
mov eax [edi+78h] +
sub eax [edi+74h] +
mov [ebp+arg_0] eax +
fild  [ebp+arg_0] +
fdiv  ds:dbl_1002638 +
fstp  [ebp+var_14] +
fldz   +
fcomp  [ebp+var_14] +
fnstsw  ax +
test ah 44h +
jp loc_1006D85  +
fld1   +
fstp  [ebp+var_14] +
mov eax [edi+60h] +
fild  dword ptr [edi+60h] +
test eax eax +
jge loc_1006D95  +
fadd  ds:dbl_1002630 +
fdiv  [ebp+var_14] +
fmul  ds:dbl_1002628 +
fstp  [ebp+var_24] +
fld  [ebp+var_14] +
fdiv  ds:dbl_1002620 +
call _ftol2_sse  +
mov [ebp+var_C] eax +
imul eax eax +
mov [ebp+arg_0] eax +
fild  [ebp+arg_0] +
fsubr  [ebp+var_14] +
fld  ds:dbl_1002618 +
fdivr st st(1) +
call _ftol2_sse  +
mov [ebp+var_8] eax +
imul eax eax +
mov [ebp+arg_0] eax +
lea eax [ebp+var_4] +
push eax  +
fild  [ebp+arg_0] +
fsubp st(1) st +
fstp  [ebp+var_1C] +
call ds:time  +
mov ebx [ebp+arg_4] +
pop ecx  +
push ebx  +
push offset aInffilename  +
push dword ptr [edi+8]  +
call sub_100D5E6  +
test eax eax +
jnz loc_1006E06  +
mov eax offset aSetup_inf +
jmp loc_1006E0C  +
push eax  +
call sub_100A540  +
push ebx  +
push offset a6_1_7600_16385  +
lea ecx [ebp+var_4] +
push ecx  +
push eax  +
push edi  +
call sub_100B4AF  +
test eax eax +
jnz loc_1006E28  +
xor eax eax +
jmp loc_1007081  +
push ebx  +
push dword ptr [edi+70h]  +
call sub_100B45E  +
test eax eax +
jz loc_1006E21  +
and dword ptr [edi+70h] 0 +
push ebx  +
push offset aRptfilename  +
push dword ptr [edi+8]  +
call sub_100D5E6  +
test eax eax +
jnz loc_1006E54  +
mov [ebp+arg_4] offset aSetup_rpt +
jmp loc_1006E5D  +
push eax  +
call sub_100A540  +
mov [ebp+arg_4] eax +
push esi  +
push offset aWt  +
push [ebp+arg_4]  +
call ds:fopen  +
pop ecx  +
pop ecx  +
mov [ebp+arg_0] eax +
mov esi offset aS_1 +
test eax eax +
jnz loc_1006E99  +
push [ebp+arg_4]  +
push esi  +
push offset aCannotCreateRe  +
push ebx  +
call sub_1009022  +
add esp 10h +
push ebx  +
push edi  +
call sub_1006515  +
push ebx  +
call sub_1009052  +
lea eax [ebp+var_4] +
push eax  +
lea ebx [edi+1B4h] +
call ds:ctime  +
push eax  +
push esi  +
push offset aMakecabReport1  +
mov esi 800h +
push esi  +
push ebx  +
call sub_100CC3F  +
add esp 18h +
cmp [ebp+arg_0] 0 +
jz loc_1006ED7  +
push ebx  +
push offset aS  +
push [ebp+arg_0]  +
call ds:fprintf  +
add esp 0Ch +
push dword ptr [edi+68h]  +
push offset a13ld  +
push offset aTotalFiles1  +
push esi  +
push ebx  +
call sub_100CC3F  +
add esp 14h +
push 1  +
push ebx  +
push edi  +
call sub_10041B2  +
cmp [ebp+arg_0] 0 +
jz loc_1006F0F  +
push ebx  +
push offset aS  +
push [ebp+arg_0]  +
call ds:fprintf  +
add esp 0Ch +
push dword ptr [edi+60h]  +
push offset a13ld  +
push offset aBytesBefore1  +
push esi  +
push ebx  +
call sub_100CC3F  +
add esp 14h +
push 1  +
push ebx  +
push edi  +
call sub_10041B2  +
cmp [ebp+arg_0] 0 +
jz loc_1006F47  +
push ebx  +
push offset aS  +
push [ebp+arg_0]  +
call ds:fprintf  +
add esp 0Ch +
push dword ptr [edi+64h]  +
push offset a13ld  +
push offset aBytesAfter1  +
push esi  +
push ebx  +
call sub_100CC3F  +
add esp 14h +
push 1  +
push ebx  +
push edi  +
call sub_10041B2  +
cmp [ebp+arg_0] 0 +
jz loc_1006F7F  +
push ebx  +
push offset aS  +
push [ebp+arg_0]  +
call ds:fprintf  +
add esp 0Ch +
mov eax [edi+60h] +
test eax eax +
jbe loc_1006FB0  +
mov ecx [edi+64h] +
fild  dword ptr [edi+64h] +
test ecx ecx +
jge loc_1006F96  +
fadd  ds:flt_10020D0 +
mov [ebp+arg_4] eax +
fild  [ebp+arg_4] +
test eax eax +
jge loc_1006FA6  +
fadd  ds:flt_10020D0 +
fdivp st(1) st +
fmul  ds:dbl_10020C8 +
jmp loc_1006FB2  +
fldz   +
push ecx  +
push ecx  +
fstp  [esp+38h+var_38] +
push offset a6_2f  +
push offset aAfterBefore1Co  +
push esi  +
push ebx  +
call sub_100CC3F  +
add esp 18h +
push 1  +
push ebx  +
push edi  +
call sub_10041B2  +
cmp [ebp+arg_0] 0 +
jz loc_1006FEC  +
push ebx  +
push offset aS  +
push [ebp+arg_0]  +
call ds:fprintf  +
add esp 0Ch +
fld  [ebp+var_1C] +
push ecx  +
push ecx  +
fstp  [esp+38h+var_38] +
push [ebp+var_8]  +
fld  [ebp+var_14] +
push [ebp+var_C]  +
push ecx  +
push ecx  +
fstp  [esp+48h+var_48] +
push offset a9_2f2d2d5_2f  +
push offset aTime1Seconds2H  +
push esi  +
push ebx  +
call sub_100CC3F  +
add esp 28h +
push 1  +
push ebx  +
push edi  +
call sub_10041B2  +
cmp [ebp+arg_0] 0 +
jz loc_1007037  +
push ebx  +
push offset aS  +
push [ebp+arg_0]  +
call ds:fprintf  +
add esp 0Ch +
fld  [ebp+var_24] +
push ecx  +
push ecx  +
fstp  [esp+38h+var_38] +
push offset a9_2f  +
push offset aThroughput1KbS  +
push esi  +
push ebx  +
call sub_100CC3F  +
add esp 18h +
push 1  +
push ebx  +
push edi  +
call sub_10041B2  +
cmp [ebp+arg_0] 0 +
pop esi  +
jz loc_100707E  +
push ebx  +
push offset aS  +
push [ebp+arg_0]  +
call ds:fprintf  +
push [ebp+arg_0]  +
call ds:fclose  +
add esp 10h +
xor eax eax +
inc eax  +
pop edi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
mov eax dword_1016A90 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_C] +
push ebx  +
mov ebx [ebp+arg_4] +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov edi [ebp+arg_8] +
push edi  +
push esi  +
mov [ebp+var_14] eax +
call sub_1004BFA  +
test eax eax +
jz loc_10070CF  +
push 0Ah  +
push 0Ch  +
lea ecx [ebp+var_10] +
push ecx  +
push eax  +
call _ltoa_s  +
add esp 10h +
lea edi [ebp+var_10] +
push [ebp+var_14]  +
push edi  +
push ebx  +
push dword ptr [esi+8]  +
call sub_100D8F2  +
test eax eax +
jnz loc_10070E7  +
xor eax eax +
jmp loc_1007181  +
cmp dword ptr [esi+10h] 0 +
jnz loc_100710E  +
cmp dword ptr [esi+0Ch] 0 +
jz loc_100710E  +
push eax  +
call sub_100A52C  +
test al 4 +
jz loc_100710E  +
push [ebp+var_14]  +
push edi  +
push ebx  +
push dword ptr [esi+0Ch]  +
call sub_100D8F2  +
test eax eax +
jz loc_10070E0  +
push offset aMaxdisksize  +
push ebx  +
call ds:_stricmp  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_100712D  +
push [ebp+var_14]  +
push eax  +
push edi  +
push esi  +
call sub_1005EED  +
jmp loc_1007181  +
mov edi offset aGenerateinf +
push edi  +
push ebx  +
call ds:_stricmp  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_100717E  +
mov eax [esi+90h] +
dec eax  +
jz loc_100717E  +
dec eax  +
jz loc_1007192  +
dec eax  +
jnz loc_10070E0  +
push [ebp+var_14]  +
push edi  +
push dword ptr [esi+8]  +
call sub_100D5E6  +
test eax eax +
jnz loc_100716D  +
push offset aOn  +
call ds:atoi  +
pop ecx  +
jmp loc_1007173  +
push eax  +
call sub_100D50C  +
test eax eax +
jz loc_1007192  +
and dword ptr [esi+94h] 0 +
xor eax eax +
inc eax  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100DC5B  +
leave   +
retn 10h  +
push offset aCannotChangeIn  +
push [ebp+var_14]  +
call sub_1009022  +
pop ecx  +
pop ecx  +
jmp loc_10070E0  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_4] +
push esi  +
push edi  +
push [ebp+arg_C]  +
mov edi [ebp+arg_0] +
lea esi [ebx+4] +
push esi  +
push dword ptr [edi+8]  +
call sub_100D5E6  +
test eax eax +
jnz loc_10071EA  +
push [ebp+arg_C]  +
push eax  +
push 2  +
push 5  +
push offset word_1001732  +
push esi  +
push dword ptr [edi+8]  +
call sub_100D720  +
test eax eax +
jnz loc_1007227  +
xor eax eax +
jmp loc_1007235  +
push eax  +
call sub_100A52C  +
test al 2 +
jz loc_1007211  +
push esi  +
push offset aDefine  +
push offset aSS  +
push offset aCannot1AVariab  +
push [ebp+arg_C]  +
call sub_1009022  +
add esp 14h +
jmp loc_10071E6  +
test al 1 +
jz loc_1007227  +
push esi  +
push offset aDefine  +
push offset aSS  +
push offset aCannot1AStanda  +
jmp loc_1007204  +
push [ebp+arg_C]  +
add ebx 24h +
push ebx  +
push esi  +
push edi  +
call sub_100708C  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
push [ebp+arg_4]  +
push esi  +
call sub_1005E74  +
mov edi eax +
cmp edi 0FFFFFFFFh +
jz loc_10072AD  +
push [ebp+arg_4]  +
push offset aClustersize  +
push dword ptr [esi+8]  +
call sub_100D5E6  +
test eax eax +
jnz loc_100727D  +
push offset a1_44m  +
call ds:atol  +
pop ecx  +
jmp loc_1007283  +
push eax  +
call sub_100D527  +
mov ecx eax +
mov eax edi +
cdq   +
idiv  ecx +
imul eax ecx +
cmp edi eax +
jnz loc_1007296  +
xor eax eax +
inc eax  +
jmp loc_10072AF  +
push ecx  +
push edi  +
push offset aLdLd  +
push offset aMaxdisksize1Is  +
push [ebp+arg_4]  +
call sub_1009022  +
add esp 14h +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
mov ebx [ebp+1Ch] +
push esi  +
mov esi [ebx] +
push edi  +
xor eax eax +
mov [ebp-8] ax +
lea edi [ebp-6] +
stos   +
mov eax [ebx+4] +
mov edi [ebp+18h] +
and dword ptr [edi] 0 +
push eax  +
push dword ptr [ebp+8]  +
mov [ebp+1Ch] eax +
lea eax [ebp-8] +
push eax  +
call sub_1009A59  +
test eax eax +
jz loc_100737E  +
push dword ptr [ebp+1Ch]  +
lea eax [ebp-8] +
push esi  +
push eax  +
call sub_1005FB5  +
test eax eax +
jz loc_100737E  +
xor edx edx +
cmp [esi+0C0Ch] edx +
jz loc_100732E  +
lea eax [esi+0B4h] +
jmp loc_100731D  +
cmp cl 7Fh +
ja loc_1007325  +
inc eax  +
mov cl [eax] +
test cl cl +
jnz loc_1007317  +
jmp loc_100732E  +
mov eax 80h +
or [ebp-4] ax +
mov cx [ebp-8] +
mov eax [ebp+0Ch] +
mov [eax] cx +
mov cx [ebp-6] +
mov eax [ebp+10h] +
push ebx  +
push edi  +
mov [eax] cx +
mov eax [ebp+14h] +
mov cx [ebp-4] +
push edx  +
push 8000h  +
push dword ptr [ebp+8]  +
mov [eax] cx +
mov [edi] edx +
call sub_10061B5  +
add esp 14h +
cmp eax 0FFFFFFFFh +
jnz loc_1007381  +
push dword ptr [ebp+8]  +
push offset aS_1  +
push offset aCouldNotOpenFi  +
push dword ptr [ebp+1Ch]  +
call sub_1009022  +
add esp 10h +
or eax 0FFFFFFFFh +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+18h] +
push esi  +
mov esi [ebp+8] +
push edi  +
mov edi [eax] +
cmp dword ptr [edi+40h] 2 +
mov eax [eax+4] +
mov [ebp+18h] eax +
jl loc_10073ED  +
cmp dword ptr [ebp+14h] 0 +
push ebx  +
lea eax [esi+22h] +
push eax  +
push dword ptr [esi+14h]  +
lea eax [esi+122h] +
push eax  +
push dword ptr [ebp+0Ch]  +
lea ebx [edi+1B4h] +
push offset aSSDS  +
jz loc_10073D0  +
push offset a1PlacedInCabin  +
jmp loc_10073D5  +
push offset a1PlacedInCab_0  +
push 800h  +
push ebx  +
call sub_100CC3F  +
add esp 20h +
push 1  +
push ebx  +
push edi  +
call sub_10041B2  +
pop ebx  +
cmp dword ptr [edi+7Ch] 0 +
jz loc_1007414  +
cmp dword ptr [ebp+14h] 0 +
jnz loc_1007414  +
push dword ptr [ebp+18h]  +
push dword ptr [esi+14h]  +
push dword ptr [esi+18h]  +
push dword ptr [ebp+0Ch]  +
push edi  +
call sub_1006687  +
test eax eax +
jnz loc_1007414  +
or eax 0FFFFFFFFh +
jmp loc_1007416  +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push offset aCab  +
push offset word_1001732  +
call sub_1009D69  +
mov esi eax +
pop ecx  +
pop ecx  +
test esi esi +
jz loc_100746D  +
lea edx [eax+1] +
mov cl [eax] +
inc eax  +
test cl cl +
jnz loc_100743F  +
sub eax edx +
push esi  +
cmp eax [ebp+0Ch] +
jnb loc_1007466  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call sub_1004ACF  +
push esi  +
call ds:free  +
xor eax eax +
pop ecx  +
inc eax  +
jmp loc_100746F  +
call ds:free  +
pop ecx  +
xor eax eax +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push edi  +
push [ebp+arg_10]  +
push offset aCompressedfile  +
push dword ptr [eax+8]  +
call sub_100D5E6  +
push eax  +
call sub_100A540  +
push [ebp+arg_10]  +
mov al [eax] +
push [ebp+lpCurrentChar]  +
mov byte ptr [ebp+arg_0+3] al +
call sub_100941F  +
mov edi eax +
test edi edi +
jz loc_100756F  +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
push [ebp+arg_8]  +
push esi  +
call sub_1004ACF  +
test eax eax +
jl loc_1007546  +
mov eax edi +
lea ecx [eax+1] +
mov dl [eax] +
inc eax  +
test dl dl +
jnz loc_10074CB  +
sub eax ecx +
mov cl [esi] +
push ebx  +
mov ebx eax +
lea edi [ebx+esi] +
mov eax esi +
jmp loc_1007508  +
cmp cl 2Eh +
jnz loc_10074FB  +
lea ecx [eax+1] +
mov dl [ecx] +
cmp dl 2Eh +
jz loc_10074FB  +
cmp dl 5Ch +
jz loc_10074FB  +
cmp dl 2Fh +
jz loc_10074FB  +
mov edi ecx +
push 0  +
push eax  +
push 0  +
call ds:CharNextExA  +
mov cl [eax] +
test cl cl +
jnz loc_10074E0  +
mov eax edi +
lea edx [eax+1] +
mov cl [eax] +
inc eax  +
test cl cl +
jnz loc_1007511  +
sub eax edx +
cmp eax 3 +
jnb loc_1007520  +
inc ebx  +
cmp byte ptr [edi] 0 +
jnz loc_1007532  +
cmp byte ptr [edi-1] 2Eh +
jz loc_1007540  +
mov byte ptr [edi] 2Eh +
inc edi  +
inc ebx  +
jmp loc_1007540  +
xor eax eax +
cmp byte ptr [edi] 0 +
jz loc_1007540  +
inc edi  +
inc eax  +
cmp eax 2 +
jl loc_1007534  +
cmp ebx [ebp+arg_8] +
pop ebx  +
jl loc_1007562  +
push [ebp+lpCurrentChar]  +
push offset aS_1  +
push offset aFileNameTooLon  +
push [ebp+arg_10]  +
call sub_1009022  +
add esp 10h +
xor eax eax +
jmp loc_100756E  +
mov al byte ptr [ebp+arg_0+3] +
mov [edi] al +
xor eax eax +
mov byte ptr [edi+1] 0 +
inc eax  +
pop esi  +
pop edi  +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20Ch +
push [ebp+arg_8]  +
lea eax [ebp+var_20C] +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push eax  +
call sub_10052BF  +
test eax eax +
jz locret_10075B6  +
push [ebp+arg_8]  +
lea eax [ebp+var_1E8] +
push eax  +
lea eax [ebp+var_208] +
push eax  +
push [ebp+arg_0]  +
call sub_100708C  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_C] +
push dword ptr [ecx+4]  +
call sub_1006579  +
mov ecx [ecx] +
cmp ecx 9 +
ja loc_10076A6  +
jmp ds:off_10076C3[ecx*4]  +
push [ebp+arg_8]  +
push offset aS_1  +
push offset a1OutOfMemory  +
push [ebp+arg_0]  +
call sub_1009022  +
add esp 10h +
jmp loc_10076BF  +
push [ebp+arg_8]  +
push offset aS_1  +
push offset a1UnknownCompre  +
jmp loc_10075EE  +
mov eax [ebp+arg_4] +
add eax 0B4h +
push eax  +
push [ebp+arg_8]  +
push offset aSS  +
push offset a1FailureCompre  +
jmp loc_10076B4  +
push [ebp+arg_8]  +
push offset aS_1  +
push offset a1UserAborted  +
jmp loc_10075EE  +
push eax  +
mov eax [ebp+arg_4] +
add eax 0B4h +
push eax  +
push [ebp+arg_8]  +
push offset aSSS  +
push offset a1FailureOpenin  +
push [ebp+arg_0]  +
call sub_1009022  +
add esp 18h +
jmp loc_10076BF  +
push eax  +
mov eax [ebp+arg_4] +
add eax 0B4h +
push eax  +
push [ebp+arg_8]  +
push offset aSSS  +
push offset a1FailureReadin  +
jmp loc_100764E  +
push eax  +
push [ebp+arg_8]  +
push offset aSS  +
push offset a1FailureOnTemp  +
jmp loc_10076B4  +
push eax  +
push [ebp+arg_8]  +
push offset aSS  +
push offset a1FailureCreati  +
jmp loc_10076B4  +
push [ebp+arg_8]  +
push offset aS_1  +
push offset a1DataSizeOrFil  +
jmp loc_10075EE  +
push ecx  +
push [ebp+arg_8]  +
push offset aSD  +
push offset a1UnknownError2  +
push [ebp+arg_0]  +
call sub_1009022  +
add esp 14h +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_1C] +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
push ebx  +
push [ebp+arg_18]  +
lea edi [esi+1B4h] +
push [ebp+arg_14]  +
push [ebp+arg_C]  +
push 800h  +
push edi  +
call sub_100CCCC  +
test eax eax +
jnz loc_1007724  +
xor eax eax +
jmp loc_10077A9  +
push ebx  +
push edi  +
push dword ptr [esi+8]  +
call sub_100D5E6  +
test eax eax +
jz loc_1007773  +
push eax  +
call sub_100A540  +
mov ecx eax +
lea esi [ecx+1] +
mov dl [ecx] +
inc ecx  +
test dl dl +
jnz loc_100773D  +
mov edx [ebp+arg_8] +
sub ecx esi +
push eax  +
cmp ecx edx +
jb loc_1007768  +
dec edx  +
push edx  +
push [ebp+arg_18]  +
push offset aSDS  +
push offset a1ExceedsMaximu  +
push ebx  +
call sub_1009022  +
add esp 18h +
jmp loc_100771D  +
push edx  +
push [ebp+arg_4]  +
call sub_1004ACF  +
jmp loc_10077A6  +
push ebx  +
call sub_1009052  +
push ebx  +
push [ebp+arg_10]  +
push dword ptr [esi+8]  +
call sub_100D5E6  +
push eax  +
call sub_100A540  +
push ebx  +
push [ebp+arg_18]  +
push [ebp+arg_14]  +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
call sub_100CCCC  +
test eax eax +
jz loc_100771D  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 20h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 534h +
mov eax dword_1016A90 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov edi [ebp+arg_4] +
push dword ptr [esi+4]  +
mov [esi+0C04h] esi +
mov [esi+0C08h] edi +
call sub_100A519  +
mov ebx eax +
push ebx  +
call sub_100A519  +
push ebx  +
mov [ebp+lpCurrentChar] eax +
call sub_100A540  +
mov ebx 100h +
test eax eax +
jz loc_1007809  +
cmp byte ptr [eax] 0 +
jnz loc_100782F  +
push edi  +
push [ebp+lpCurrentChar]  +
lea eax [ebp+var_104] +
push ebx  +
push eax  +
push esi  +
call sub_1007477  +
test eax eax +
jnz loc_1007829  +
xor eax eax +
jmp loc_1007A26  +
lea eax [ebp+var_104] +
push edi  +
push offset word_1001732  +
push eax  +
lea eax [esi+0B04h] +
push eax  +
push ebx  +
lea eax [ebp+var_204] +
push eax  +
call sub_10095A3  +
test eax eax +
jz loc_1007822  +
push edi  +
push [ebp+lpCurrentChar]  +
call sub_100938D  +
cmp eax 0FFFFFFFFh +
jz loc_1007822  +
push edi  +
push [ebp+lpCurrentChar]  +
mov [esi+5Ch] eax +
call sub_100941F  +
mov [ebp+var_530] eax +
test eax eax +
jz loc_1007822  +
lea eax [ebp+var_204] +
push eax  +
push ebx  +
lea eax [ebp+var_406] +
push eax  +
mov [ebp+var_506] 0 +
call sub_1004ACF  +
xor eax eax +
push edi  +
mov [ebp+var_528] eax +
mov [ebp+var_524] eax +
mov [ebp+var_50C] eax +
push esi  +
lea eax [ebp+var_528] +
xor ecx ecx +
push eax  +
mov [ebp+var_306] 0 +
mov [ebp+var_508] cx +
call sub_1005CC9  +
test eax eax +
jz loc_1007822  +
and dword ptr [esi+7Ch] 0 +
lea ecx [esi+0C04h] +
push ecx  +
lea ecx [ebp+var_528] +
push ecx  +
push offset loc_100741F  +
push offset loc_1006436  +
push offset loc_1006400  +
push offset loc_10063D3  +
push offset loc_100639D  +
push offset loc_1006367  +
push offset sub_10061B5  +
push offset loc_10061A4  +
push offset loc_1006188  +
lea eax [esi+48h] +
push offset loc_100738B  +
push eax  +
call sub_100E2DA  +
add esp 34h +
mov [esi+44h] eax +
test eax eax +
jnz loc_1007939  +
lea eax [esi+48h] +
push eax  +
push offset aFcicreate  +
push esi  +
push edi  +
call sub_10075BF  +
jmp loc_1007822  +
push edi  +
push esi  +
call sub_1005D61  +
push [ebp+var_530]  +
movzx eax ax +
mov [ebp+var_534] eax +
push ebx  +
lea eax [esi+0B4h] +
push eax  +
call sub_1004ACF  +
lea eax [esi+0C04h] +
push eax  +
xor eax eax +
push eax  +
xor ebx ebx +
push eax  +
inc ebx  +
push eax  +
mov [esi+68h] ebx +
mov [esi+6Ch] ebx +
call sub_1006023  +
push [ebp+var_534]  +
push offset loc_10072BA  +
push offset sub_1006023  +
push offset loc_1005AF9  +
push 0  +
push [ebp+var_530]  +
push [ebp+lpCurrentChar]  +
push dword ptr [esi+44h]  +
call sub_100E11D  +
add esp 30h +
test eax eax +
jnz loc_10079C9  +
mov eax [esi+0C08h] +
cmp dword ptr [eax+200h] 0 +
jnz loc_1007822  +
lea eax [esi+48h] +
push eax  +
push offset aFciaddfile  +
jmp loc_100792D  +
push offset sub_1006023  +
push offset loc_1005AF9  +
push 0  +
push dword ptr [esi+44h]  +
call sub_100E201  +
add esp 10h +
test eax eax +
jnz loc_1007A05  +
mov eax [esi+0C08h] +
cmp dword ptr [eax+200h] 0 +
jnz loc_1007822  +
lea eax [esi+48h] +
push eax  +
push offset aFciflushcabine  +
jmp loc_100792D  +
push dword ptr [esi+44h]  +
call sub_100E28F  +
pop ecx  +
test eax eax +
jnz loc_1007A20  +
lea eax [esi+48h] +
push eax  +
push offset aFcidestroy  +
jmp loc_100792D  +
and dword ptr [esi+44h] 0 +
mov eax ebx +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100DC5B  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
push [ebp+arg_C]  +
push offset aClustersize  +
push dword ptr [esi+8]  +
call sub_100D5E6  +
mov edi ds:atoi +
mov ebx offset a1_44m +
test eax eax +
jnz loc_1007A6D  +
push ebx  +
call edi  +
pop ecx  +
jmp loc_1007A73  +
push eax  +
call sub_100D527  +
push [ebp+arg_C]  +
mov [ebp+arg_0] eax +
push offset aMaxdiskfilecou  +
push dword ptr [esi+8]  +
mov [esi+34h] eax +
call sub_100D5E6  +
test eax eax +
jnz loc_1007A93  +
push ebx  +
call edi  +
pop ecx  +
jmp loc_1007A99  +
push eax  +
call sub_100D527  +
xor ebx ebx +
cmp [ebp+arg_4] 0FFFFFFFFh +
mov [ebp+var_4] eax +
jz loc_1007AEE  +
cmp [esi+0ACh] ebx +
jnz loc_1007AEE  +
push [ebp+arg_0]  +
push [ebp+arg_4]  +
call sub_1005CAB  +
mov edi eax +
cmp edi [esi+20h] +
jg loc_1007AEE  +
push [ebp+arg_C]  +
push esi  +
call sub_1005C72  +
test eax eax +
jnz loc_1007AD3  +
mov eax [ebp+var_4] +
cmp [esi+2Ch] eax +
jge loc_1007AEE  +
push [ebp+arg_C]  +
sub [esi+20h] edi +
push esi  +
call sub_1005C72  +
test eax eax +
jnz loc_1007AE6  +
inc dword ptr [esi+2Ch]  +
xor eax eax +
inc eax  +
jmp loc_1007BD0  +
push [ebp+arg_C]  +
inc dword ptr [esi+14h]  +
push esi  +
mov [esi+0ACh] ebx +
call sub_1005E74  +
mov [esi+20h] eax +
cmp eax 0FFFFFFFFh +
jnz loc_1007B0F  +
xor eax eax +
jmp loc_1007BD0  +
push [ebp+arg_C]  +
push eax  +
push ebx  +
push esi  +
call sub_1005EED  +
test eax eax +
jz loc_1007B08  +
cmp [ebp+arg_8] ebx +
jz loc_1007B31  +
push [ebp+arg_0]  +
push [ebp+arg_4]  +
call sub_1005CAB  +
sub [esi+20h] eax +
push [ebp+arg_C]  +
mov [esi+30h] ebx +
push offset aDiskDirectoryN  +
push dword ptr [esi+14h]  +
mov ebx 100h +
push offset aDiskdirectoryt  +
push offset aDiskdirectory  +
push ebx  +
lea edi [esi+0B04h] +
push edi  +
push esi  +
mov dword ptr [esi+2Ch] 1 +
call sub_10076F0  +
test eax eax +
jz loc_1007B08  +
push [ebp+arg_C]  +
push 0  +
push edi  +
call sub_100963D  +
test eax eax +
jz loc_1007B08  +
mov eax edi +
lea edx [eax+1] +
mov cl [eax] +
inc eax  +
test cl cl +
jnz loc_1007B7B  +
sub eax edx +
test eax eax +
jle loc_1007B92  +
lea eax [eax+edi-1] +
push eax  +
call sub_10093EA  +
push [ebp+arg_C]  +
lea edi [esi+0A04h] +
push offset aDiskLabelName  +
push dword ptr [esi+14h]  +
push offset aDisklabeltempl  +
push offset aDisklabel  +
push ebx  +
push edi  +
push esi  +
call sub_10076F0  +
test eax eax +
jz loc_1007B08  +
push [ebp+arg_C]  +
push edi  +
push dword ptr [esi+14h]  +
push esi  +
call sub_100C04A  +
neg eax  +
sbb eax eax +
neg eax  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push ebx  +
push esi  +
push edi  +
xor eax eax +
xor edi edi +
inc edi  +
cmp [ebp+arg_4] edi +
mov [ebp+var_4] eax +
mov [ebp+var_14] eax +
mov [ebp+var_8] eax +
mov [ebp+var_C] eax +
mov [ebp+var_10] eax +
jle loc_1007EAD  +
mov ebx [ebp+arg_8] +
lea edx [ebp+var_20] +
sub edx 4 +
mov [ebp+var_18] edx +
lea esi [ebx+edi*4] +
mov eax [esi] +
mov cl [eax] +
cmp cl 2Fh +
jz loc_1007CDB  +
cmp cl 2Dh +
jz loc_1007CDB  +
xor ecx ecx +
cmp [ebp+var_C] ecx +
jz loc_1007C4D  +
push [ebp+arg_C]  +
push eax  +
push [ebp+arg_0]  +
call sub_10064C9  +
test eax eax +
jz loc_1007DF4  +
and [ebp+var_C] 0 +
jmp loc_1007DA6  +
cmp [ebp+var_8] ecx +
jz loc_1007C6F  +
push [ebp+arg_C]  +
push eax  +
push [ebp+arg_0]  +
call sub_1007579  +
test eax eax +
jz loc_1007DF4  +
and [ebp+var_8] 0 +
jmp loc_1007DA6  +
cmp [ebp+var_10] ecx +
jz loc_1007CAD  +
mov esi [ebp+arg_0] +
push eax  +
push 100h  +
add esi 0B04h +
push esi  +
call sub_1004ACF  +
test eax eax +
jl loc_1007DB8  +
push [ebp+arg_C]  +
push 0  +
push esi  +
call sub_100963D  +
test eax eax +
jz loc_1007DF4  +
and [ebp+var_10] 0 +
jmp loc_1007DA6  +
cmp [ebp+var_4] ecx +
jz loc_1007CBC  +
cmp [ebp+var_4] 2 +
jnz loc_1007DC7  +
inc [ebp+var_14]  +
push 2  +
pop ecx  +
add edx 4 +
cmp [ebp+var_14] ecx +
mov [ebp+var_4] ecx +
mov [ebp+var_18] edx +
jg loc_1007DD6  +
mov [edx] eax +
jmp loc_1007DA6  +
xor ecx ecx +
cmp [ebp+var_8] ecx +
jnz loc_1007DE5  +
cmp [ebp+var_C] ecx +
jnz loc_1007DFB  +
cmp [ebp+var_10] ecx +
jnz loc_1007E02  +
movsx eax byte ptr [eax+1] +
push eax  +
call ds:toupper  +
sub eax 3Fh +
pop ecx  +
jz loc_1007E1D  +
sub eax 5 +
jz loc_1007D8B  +
dec eax  +
dec eax  +
jz loc_1007D5F  +
sub eax 6 +
jz loc_1007D4A  +
sub eax 0Ah +
jnz loc_1007E09  +
mov esi [esi] +
lea eax [esi+2] +
cmp byte ptr [eax] 0 +
jz loc_1007D3E  +
push eax  +
call ds:atoi  +
pop ecx  +
mov ecx [ebp+arg_0] +
mov [ecx+40h] eax +
jmp loc_1007DA6  +
mov eax [ebp+arg_0] +
mov dword ptr [eax+40h] 3 +
jmp loc_1007DA6  +
mov eax [esi] +
cmp byte ptr [eax+2] 0 +
jnz loc_1007E09  +
mov [ebp+var_10] 1 +
jmp loc_1007DA6  +
mov eax [esi] +
cmp byte ptr [eax+2] 0 +
jnz loc_1007E09  +
cmp [ebp+var_4] 0 +
jz loc_1007D7B  +
cmp [ebp+var_4] 3 +
jnz loc_1007E0E  +
mov [ebp+var_4] 3 +
mov [ebp+var_C] 1 +
jmp loc_1007DA6  +
mov eax [esi] +
cmp byte ptr [eax+2] 0 +
jnz loc_1007E09  +
cmp [ebp+var_4] 0 +
jz loc_1007D9F  +
cmp [ebp+var_4] 3 +
jnz loc_1007E0E  +
mov [ebp+var_8] 1 +
inc edi  +
cmp edi [ebp+arg_4] +
jge loc_1007E48  +
mov edx [ebp+var_18] +
jmp loc_1007C10  +
push dword ptr [ebx+edi*4]  +
push offset aS_1  +
push offset aLocationTooLon  +
jmp loc_1007E31  +
push dword ptr [ebx+edi*4]  +
push offset aS_1  +
push offset aInvalidParamet  +
jmp loc_1007E31  +
push dword ptr [ebx+edi*4]  +
push offset aS_1  +
push offset aTooManyParamet  +
jmp loc_1007E31  +
push offset aVariableDefini  +
push [ebp+arg_C]  +
call sub_1009022  +
pop ecx  +
pop ecx  +
xor eax eax +
jmp loc_1007EB9  +
push offset aDirectiveFileN  +
jmp loc_1007DEA  +
push offset aLocationMissin  +
jmp loc_1007DEA  +
push dword ptr [ebx+edi*4]  +
jmp loc_1007E27  +
push dword ptr [ebx+edi*4]  +
push offset aS_1  +
push offset aSwitchNotExpec  +
jmp loc_1007E31  +
mov edi [ebx+edi*4] +
cmp byte ptr [edi+2] 0 +
jz loc_1007E3E  +
push edi  +
push offset aS_1  +
push offset aInvalidSwitch1  +
push [ebp+arg_C]  +
call sub_1009022  +
add esp 10h +
jmp loc_1007DF4  +
mov ecx [ebp+arg_0] +
xor eax eax +
inc eax  +
mov [ecx] eax +
jmp loc_1007EB9  +
xor ecx ecx +
cmp [ebp+var_8] ecx +
jnz loc_1007DE5  +
cmp [ebp+var_C] ecx +
jnz loc_1007DFB  +
cmp [ebp+var_10] ecx +
jnz loc_1007E02  +
mov eax [ebp+var_4] +
cmp eax ecx +
jl loc_1007EB6  +
cmp eax 1 +
jle loc_1007EAD  +
push 2  +
pop esi  +
cmp eax esi +
jz loc_1007E7A  +
push 3  +
pop ecx  +
cmp eax ecx +
jnz loc_1007EB6  +
mov eax [ebp+arg_0] +
mov [eax] ecx +
jmp loc_1007EB6  +
push [ebp+arg_C]  +
mov eax [ebp+arg_0] +
push [ebp+var_20]  +
mov [eax] esi +
push eax  +
call sub_10064C9  +
test eax eax +
jz loc_1007DF4  +
cmp [ebp+var_14] esi +
jnz loc_1007EB6  +
push [ebp+arg_C]  +
push [ebp+var_1C]  +
push eax  +
call sub_10091CC  +
test eax eax +
jnz loc_1007EB6  +
jmp loc_1007DF4  +
mov eax [ebp+arg_0] +
mov dword ptr [eax] 1 +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_8] +
push esi  +
push [ebp+arg_C]  +
mov esi [ebp+arg_4] +
push 0  +
push eax  +
push esi  +
mov [esi+30h] eax +
call sub_1007A3C  +
test eax eax +
jz loc_1007FE9  +
inc dword ptr [esi+18h]  +
mov eax [esi+18h] +
push ebx  +
push edi  +
mov edi [ebp+arg_0] +
push [ebp+arg_C]  +
mov [edi+14h] eax +
mov eax [esi+14h] +
push offset aCabinetFileNam  +
mov [edi+18h] eax +
mov ax [esi+80h] +
and dword ptr [edi+1Ch] 0 +
mov [edi+20h] ax +
push dword ptr [esi+18h]  +
lea eax [edi+122h] +
push offset aCabinetnametem  +
push offset aCabinetname  +
mov ebx 100h +
push ebx  +
push eax  +
push esi  +
mov [ebp+arg_8] eax +
call sub_10076F0  +
test eax eax +
jz loc_1007FE7  +
lea eax [esi+0B04h] +
push eax  +
push ebx  +
lea eax [edi+222h] +
push eax  +
call sub_1004ACF  +
push [ebp+arg_C]  +
push offset aMaxcabinetsize  +
push dword ptr [esi+8]  +
call sub_100D5E6  +
test eax eax +
jnz loc_1007F74  +
push offset a0  +
call ds:atoi  +
pop ecx  +
jmp loc_1007F7A  +
push eax  +
call sub_100D527  +
mov [edi] eax +
test eax eax +
jz loc_1007F85  +
cmp eax [esi+20h] +
jbe loc_1007F8A  +
mov eax [esi+20h] +
mov [edi] eax +
push [ebp+arg_C]  +
push offset aFoldersizethre  +
push dword ptr [esi+8]  +
call sub_100D5E6  +
test eax eax +
jnz loc_1007FAC  +
push offset a0  +
call ds:atoi  +
pop ecx  +
jmp loc_1007FB2  +
push eax  +
call sub_100D527  +
mov [edi+4] eax +
test eax eax +
jnz loc_1007FBE  +
mov eax [edi] +
mov [edi+4] eax +
lea eax [esi+0A04h] +
push eax  +
push ebx  +
add edi 22h +
push edi  +
call sub_1004ACF  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push dword ptr [esi+14h]  +
push dword ptr [esi+18h]  +
push esi  +
call sub_100C0E4  +
neg eax  +
sbb eax eax +
neg eax  +
pop edi  +
pop ebx  +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+10h] +
push esi  +
push dword ptr [eax+4]  +
mov esi [eax] +
push dword ptr [ebp+0Ch]  +
push esi  +
push dword ptr [ebp+8]  +
call sub_1007EC5  +
test eax eax +
jz loc_100801C  +
and dword ptr [esi+24h] 0 +
and dword ptr [esi+28h] 0 +
xor eax eax +
inc eax  +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_8] 0 +
push esi  +
jnz loc_10080B9  +
mov ecx [ebp+arg_0] +
cmp dword ptr [ecx+94h] 0 +
jnz loc_1008061  +
push offset aNew  +
push offset aS_1  +
push offset aDirective1NotV  +
push [ebp+arg_C]  +
call sub_1009022  +
add esp 10h +
xor eax eax +
jmp loc_1008187  +
mov esi [ebp+arg_4] +
mov eax [esi+4] +
test eax eax +
jle loc_100805A  +
cmp eax 2 +
jle loc_1008077  +
cmp eax 3 +
jnz loc_100805A  +
jmp loc_1008084  +
push [ebp+arg_C]  +
push ecx  +
call sub_1005C72  +
test eax eax +
jz loc_100808C  +
xor eax eax +
inc eax  +
jmp loc_1008187  +
cmp dword ptr [esi+4] 1 +
mov eax offset aFolder +
jz loc_100809C  +
mov eax offset aCabinet +
push eax  +
push offset aNew  +
push offset aSS  +
push offset aDirective12Not  +
push [ebp+arg_C]  +
call sub_1009022  +
add esp 14h +
jmp loc_100805A  +
mov esi [ebp+arg_0] +
mov eax [ebp+arg_4] +
push ebx  +
push edi  +
mov edi [ebp+arg_C] +
mov [esi+0C04h] esi +
mov [esi+0C08h] edi +
mov eax [eax+4] +
dec eax  +
push 1  +
pop ebx  +
jz loc_100813B  +
dec eax  +
jz loc_10080F8  +
dec eax  +
jnz loc_100817B  +
push edi  +
push esi  +
mov [esi+0ACh] ebx +
call sub_1005C72  +
test eax eax +
jz loc_1008183  +
mov eax [esi+44h] +
test eax eax +
jz loc_1008183  +
push offset sub_1006023  +
push offset loc_1007FF3  +
push ebx  +
push eax  +
call sub_100E201  +
add esp 10h +
test eax eax +
jnz loc_1008135  +
mov eax [esi+0C08h] +
cmp dword ptr [eax+200h] 0 +
jnz loc_100817B  +
lea eax [esi+48h] +
push eax  +
push offset aFciflushcabine  +
jmp loc_1008174  +
and dword ptr [esi+28h] 0 +
jmp loc_1008183  +
mov eax [esi+44h] +
test eax eax +
jnz loc_1008145  +
inc eax  +
jmp loc_1008185  +
push offset sub_1006023  +
push offset loc_1007FF3  +
push eax  +
call sub_100E25F  +
add esp 0Ch +
test eax eax +
jnz loc_100817F  +
mov eax [esi+0C08h] +
cmp dword ptr [eax+200h] 0 +
jnz loc_100817B  +
lea eax [esi+48h] +
push eax  +
push offset aFciflushfolder  +
push esi  +
push edi  +
call sub_10075BF  +
xor eax eax +
jmp loc_1008185  +
and dword ptr [esi+24h] 0 +
mov eax ebx +
pop edi  +
pop ebx  +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
mov eax [esi+44h] +
test eax eax +
jnz loc_10081A4  +
inc eax  +
jmp loc_1008210  +
push edi  +
mov edi [ebp+arg_4] +
push offset sub_1006023  +
push offset loc_1007FF3  +
push 0  +
push eax  +
mov [esi+0C04h] esi +
mov [esi+0C08h] edi +
call sub_100E201  +
add esp 10h +
test eax eax +
jnz loc_10081E7  +
mov eax [esi+0C08h] +
cmp dword ptr [eax+200h] 0 +
jnz loc_1008204  +
lea eax [esi+48h] +
push eax  +
push offset aFciflushcabine  +
jmp loc_10081FD  +
push dword ptr [esi+44h]  +
call sub_100E28F  +
pop ecx  +
test eax eax +
jnz loc_1008208  +
lea eax [esi+48h] +
push eax  +
push offset aFcidestroy  +
push esi  +
push edi  +
call sub_10075BF  +
xor eax eax +
jmp loc_100820F  +
and dword ptr [esi+44h] 0 +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 328h +
mov eax dword_1016A90 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
mov ebx [ebp+arg_4] +
push esi  +
mov esi [ebp+arg_0] +
cmp dword ptr [esi+44h] 0 +
push edi  +
jnz loc_10082CE  +
push ebx  +
push 0  +
push esi  +
lea eax [ebp+var_328] +
push eax  +
call sub_1007EC5  +
test eax eax +
jnz loc_100825A  +
xor eax eax +
jmp loc_10082D1  +
push ebx  +
push esi  +
lea eax [ebp+var_328] +
push eax  +
call sub_1005CC9  +
test eax eax +
jz loc_1008256  +
lea eax [esi+0C04h] +
push eax  +
lea eax [ebp+var_328] +
push eax  +
push offset loc_100741F  +
push offset loc_1006436  +
push offset loc_1006400  +
push offset loc_10063D3  +
push offset loc_100639D  +
push offset loc_1006367  +
push offset sub_10061B5  +
push offset loc_10061A4  +
push offset loc_1006188  +
lea edi [esi+48h] +
push offset loc_100738B  +
push edi  +
call sub_100E2DA  +
add esp 34h +
mov [esi+44h] eax +
test eax eax +
jnz loc_10082CE  +
push edi  +
push offset aFcicreate  +
push esi  +
push ebx  +
call sub_10075BF  +
jmp loc_1008256  +
xor eax eax +
inc eax  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100DC5B  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
sub esp 40h +
push ebx  +
mov ebx [ebp+arg_4] +
push edi  +
push [ebp+arg_C]  +
lea edi [ebx+4] +
push offset word_1001732  +
push edi  +
push dword ptr [eax+84h]  +
call sub_100A93C  +
test eax eax +
jnz loc_100832F  +
push edi  +
push offset aS_1  +
push offset aNoSuchFileInLa  +
push [ebp+arg_C]  +
call sub_1009022  +
add esp 10h +
xor eax eax +
jmp loc_10083B3  +
push esi  +
push eax  +
call sub_100A540  +
push [ebp+arg_C]  +
mov esi eax +
push offset aFileParameter  +
push offset loc_10040E2  +
push dword ptr [esi+24h]  +
add ebx 104h +
push ebx  +
mov [ebp+arg_4] esi +
call sub_100A879  +
test eax eax +
jz loc_1008399  +
cmp [ebp+arg_8] 0 +
jnz loc_100838A  +
push 10h  +
pop ecx  +
push [ebp+arg_C]  +
lea eax [ebp+var_40] +
push eax  +
push dword ptr [ebx]  +
lea edi [ebp+var_40] +
push [ebp+arg_0]  +
movs   +
call sub_100BDF8  +
test eax eax +
jz loc_1008399  +
mov eax [ebp+arg_4] +
or dword ptr [eax+18h] 2 +
xor eax eax +
inc eax  +
jmp loc_10083B2  +
push [ebp+arg_C]  +
push [ebp+arg_0]  +
call sub_1008191  +
test eax eax +
jnz loc_100839D  +
xor eax eax +
jmp loc_10083B2  +
push [ebp+arg_C]  +
push dword ptr [ebx]  +
push esi  +
push edi  +
push [ebp+arg_0]  +
call sub_100C186  +
neg eax  +
sbb eax eax +
neg eax  +
pop esi  +
pop edi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
cmp dword ptr [esi+90h] 1 +
push edi  +
mov edi [ebp+arg_C] +
jnz loc_100840B  +
push edi  +
push offset aGenerateinf  +
push dword ptr [esi+8]  +
call sub_100D5E6  +
mov ebx offset aOn +
test eax eax +
jnz loc_10083F7  +
push ebx  +
call ds:atoi  +
pop ecx  +
jmp loc_10083FD  +
push eax  +
call sub_100D50C  +
test eax eax +
jz loc_1008430  +
mov dword ptr [esi+90h] 2 +
push edi  +
push offset aSourcedir  +
push dword ptr [esi+8]  +
mov [esi+0C04h] esi +
mov [esi+0C08h] edi +
call sub_100D5E6  +
test eax eax +
jnz loc_1008474  +
mov eax offset word_1001732 +
jmp loc_100847A  +
push edi  +
push offset aUniquefiles  +
push dword ptr [esi+8]  +
mov dword ptr [esi+90h] 3 +
call sub_100D5E6  +
test eax eax +
jnz loc_1008456  +
push ebx  +
call ds:atoi  +
pop ecx  +
jmp loc_100845C  +
push eax  +
call sub_100D50C  +
test eax eax +
jnz loc_100840B  +
push offset aUniquefilesMus  +
push edi  +
call sub_1009022  +
pop ecx  +
pop ecx  +
xor eax eax +
jmp loc_1008860  +
push eax  +
call sub_100A540  +
mov ecx [ebp+arg_4] +
push edi  +
push 0  +
add ecx 4 +
push ecx  +
push eax  +
mov edi 100h +
push edi  +
mov ebx offset unk_1016AB0 +
push ebx  +
mov [ebp+lpCurrentChar] ecx +
call sub_10095A3  +
test eax eax +
jz loc_100846D  +
push [ebp+arg_C]  +
push offset aDestinationdir  +
push dword ptr [esi+8]  +
call sub_100D5E6  +
test eax eax +
jnz loc_10084B8  +
mov eax offset word_1001732 +
jmp loc_10084BE  +
push eax  +
call sub_100A540  +
push [ebp+arg_C]  +
mov ecx [ebp+arg_4] +
push [ebp+lpCurrentChar]  +
add ecx 104h +
push ecx  +
push eax  +
push edi  +
mov edi offset unk_1016BB0 +
push edi  +
call sub_10095A3  +
test eax eax +
jz loc_100846D  +
cmp [ebp+arg_8] 0 +
jnz loc_100859D  +
cmp dword ptr [esi+40h] 3 +
jl loc_100851E  +
push edi  +
push ebx  +
push offset aSS  +
push offset aCopycommand1To  +
lea eax [esi+1B4h] +
push 800h  +
push eax  +
call sub_100CC3F  +
add esp 18h +
push 1  +
lea eax [esi+1B4h] +
push eax  +
push esi  +
call sub_10041B2  +
push [ebp+arg_C]  +
push esi  +
call sub_1007241  +
test eax eax +
jz loc_100846D  +
push [ebp+arg_C]  +
push ebx  +
call sub_100938D  +
mov [ebp+arg_0] eax +
cmp eax 0FFFFFFFFh +
jz loc_100846D  +
push edi  +
push esi  +
call sub_1005C48  +
push [ebp+arg_C]  +
mov eax [ebp+arg_0] +
push [ebp+arg_4]  +
add [esi+5Ch] eax +
inc dword ptr [esi+68h]  +
push eax  +
push edi  +
push ebx  +
push esi  +
call sub_100687D  +
test eax eax +
jz loc_100846D  +
push eax  +
call sub_100A540  +
push [ebp+arg_C]  +
mov edi eax +
push edi  +
push dword ptr [edi+24h]  +
push esi  +
call sub_100BDF8  +
test eax eax +
jz loc_100846D  +
push [ebp+arg_C]  +
push edi  +
push esi  +
call sub_100BD9F  +
neg eax  +
sbb eax eax +
neg eax  +
jmp loc_1008860  +
push edi  +
push 100h  +
lea eax [esi+0B4h] +
push eax  +
call sub_1004ACF  +
inc dword ptr [esi+6Ch]  +
lea eax [esi+0C04h] +
push eax  +
xor eax eax +
push eax  +
push eax  +
push eax  +
call sub_1006023  +
add esp 10h +
push edi  +
push esi  +
call sub_1006652  +
cmp dword ptr [esi+0A4h] 0 +
jz loc_1008602  +
push dword ptr [esi+8Ch]  +
call sub_100A540  +
push [ebp+arg_C]  +
lea ecx [eax+3Ch] +
push ecx  +
lea ecx [eax+38h] +
push ecx  +
lea ecx [eax+34h] +
push ecx  +
add eax 30h +
push eax  +
push ebx  +
call sub_1009FBD  +
test eax eax +
jz loc_100846D  +
cmp dword ptr [esi+0A8h] 0 +
jz loc_100862B  +
push dword ptr [esi+8Ch]  +
call sub_100A540  +
push [ebp+arg_C]  +
add eax 2Ch +
push eax  +
push ebx  +
call sub_1006C58  +
test eax eax +
jz loc_100846D  +
push [ebp+arg_C]  +
push esi  +
call sub_1005D61  +
push [ebp+arg_C]  +
movzx eax ax +
push esi  +
mov [ebp+arg_0] eax +
call sub_1005C72  +
test eax eax +
jz loc_100873D  +
push [ebp+arg_C]  +
push esi  +
call sub_100821A  +
test eax eax +
jz loc_100846D  +
push [ebp+arg_C]  +
push esi  +
call sub_1007241  +
test eax eax +
jz loc_100846D  +
push [ebp+arg_C]  +
push offset aFolderfilecoun  +
push dword ptr [esi+8]  +
call sub_100D5E6  +
test eax eax +
jnz loc_100868F  +
push offset a0  +
call ds:atoi  +
pop ecx  +
jmp loc_1008695  +
push eax  +
call sub_100D527  +
test eax eax +
jle loc_10086E5  +
cmp [esi+24h] eax +
jl loc_10086E5  +
push offset sub_1006023  +
push offset loc_1007FF3  +
push dword ptr [esi+44h]  +
call sub_100E25F  +
add esp 0Ch +
test eax eax +
jnz loc_10086E1  +
mov eax [esi+0C08h] +
cmp dword ptr [eax+200h] 0 +
jnz loc_100846D  +
lea eax [esi+48h] +
push eax  +
push offset aFciflushfolder  +
push esi  +
push [ebp+arg_C]  +
call sub_10075BF  +
jmp loc_100846D  +
and dword ptr [esi+24h] 0 +
push [ebp+arg_0]  +
mov eax [ebp+arg_4] +
push offset loc_10072BA  +
push offset sub_1006023  +
push offset loc_1007FF3  +
push dword ptr [eax+208h]  +
push edi  +
push ebx  +
push dword ptr [esi+44h]  +
call sub_100E11D  +
add esp 20h +
test eax eax +
jnz loc_100872F  +
mov eax [esi+0C08h] +
cmp dword ptr [eax+200h] 0 +
jnz loc_100846D  +
lea eax [esi+48h] +
push eax  +
push offset aFciaddfile  +
jmp loc_10086D3  +
inc dword ptr [esi+24h]  +
inc dword ptr [esi+28h]  +
xor eax eax +
inc eax  +
jmp loc_1008860  +
mov eax [ebp+arg_C] +
cmp dword ptr [eax+200h] 0 +
jnz loc_100846D  +
cmp word ptr [ebp+arg_0] 0 +
jz loc_100876F  +
push [ebp+lpCurrentChar]  +
push offset aS_1  +
push offset aNotImplemented  +
push eax  +
call sub_1009022  +
add esp 10h +
jmp loc_100846D  +
push eax  +
push offset aDonotcopyfiles  +
push dword ptr [esi+8]  +
call sub_100D5E6  +
test eax eax +
jnz loc_100878F  +
push offset aOff  +
call ds:atoi  +
pop ecx  +
jmp loc_1008795  +
push eax  +
call sub_100D50C  +
push dword ptr [esi+8Ch]  +
neg eax  +
sbb eax eax +
inc eax  +
mov [ebp+arg_4] eax +
call sub_100A540  +
push [ebp+arg_C]  +
mov [ebp+arg_0] eax +
push 1  +
push dword ptr [eax]  +
push esi  +
call sub_1007A3C  +
test eax eax +
jz loc_100846D  +
push [ebp+arg_C]  +
push esi  +
call sub_1007241  +
test eax eax +
jz loc_100846D  +
push [ebp+arg_C]  +
lea eax [esi+0B04h] +
push offset word_1001732  +
push edi  +
push eax  +
push 100h  +
push offset FileName  +
call sub_10095A3  +
test eax eax +
jz loc_100846D  +
cmp [ebp+arg_4] 0 +
jz loc_1008815  +
push [ebp+arg_C]  +
push 1  +
push offset FileName  +
call sub_100963D  +
test eax eax +
jz loc_100846D  +
push [ebp+arg_C]  +
push esi  +
push offset sub_1005FB5  +
push 8000h  +
push [ebp+arg_4]  +
push ebx  +
push offset FileName  +
call sub_1009B9F  +
mov ebx eax +
mov eax [ebp+arg_0] +
mov eax [eax] +
lea ecx [esi+0C04h] +
push ecx  +
push eax  +
push eax  +
push 0  +
call sub_1006023  +
add esp 10h +
push [ebp+arg_C]  +
push 0  +
push dword ptr [esi+14h]  +
push edi  +
push esi  +
call sub_1006687  +
neg eax  +
sbb eax eax +
and eax ebx +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_4] +
mov eax [esi] +
dec eax  +
cmp eax 0Dh +
ja loc_1008911  +
jmp ds:off_1008964[eax*4]  +
xor eax eax +
inc eax  +
jmp loc_1008913  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push esi  +
push [ebp+arg_0]  +
call sub_1005BEE  +
jmp loc_1008913  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push esi  +
push [ebp+arg_0]  +
call sub_1005B33  +
jmp loc_1008913  +
push [ebp+arg_C]  +
lea eax [esi+8] +
push eax  +
push dword ptr [esi+4]  +
push [ebp+arg_0]  +
call sub_1006710  +
jmp loc_1008913  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push esi  +
push [ebp+arg_0]  +
call sub_1008024  +
jmp loc_1008913  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push esi  +
push [ebp+arg_0]  +
call sub_1005C1E  +
jmp loc_1008913  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push esi  +
push [ebp+arg_0]  +
call sub_10083BE  +
test eax eax +
jz loc_1008901  +
cmp [ebp+arg_8] 0 +
jnz loc_1008888  +
mov esi [esi+204h] +
test esi esi +
jz loc_1008911  +
push esi  +
call sub_100A679  +
xor eax eax +
pop esi  +
pop ebp  +
retn 10h  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push esi  +
push [ebp+arg_0]  +
call sub_10082E7  +
test eax eax +
jz loc_1008935  +
cmp [ebp+arg_8] 0 +
jnz loc_1008888  +
mov esi [esi+104h] +
jmp loc_1008907  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push esi  +
push [ebp+arg_0]  +
call sub_10071AB  +
jmp loc_1008913  +
push [ebp+arg_C]  +
lea eax [esi+24h] +
push eax  +
add esi 4 +
push esi  +
push [ebp+arg_0]  +
call sub_100708C  +
jmp loc_1008913  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+1Ch] +
push edi  +
mov edi [ebp+8] +
cmp dword ptr [edi+40h] 0 +
jnz loc_1008A34  +
mov eax [esi+208h] +
push 32h  +
cdq   +
pop ecx  +
idiv  ecx +
test edx edx +
jz loc_10089DC  +
push dword ptr [esi+204h]  +
push offset unk_1016DB0  +
call ds:_stricmp  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1008A34  +
push dword ptr [esi+208h]  +
lea ebx [edi+1B4h] +
push dword ptr [esi+204h]  +
push offset aSD  +
push offset aParsingDirecti  +
push 800h  +
push ebx  +
call sub_100CC3F  +
add esp 18h +
push 0  +
push ebx  +
push edi  +
call sub_10041B2  +
mov eax [esi+208h] +
push 32h  +
cdq   +
pop ecx  +
idiv  ecx +
test edx edx +
jz loc_1008A34  +
push dword ptr [esi+204h]  +
push 100h  +
push offset unk_1016DB0  +
call sub_1004ACF  +
lea ebx [esi+200h] +
cmp dword ptr [ebx] 0 +
jnz loc_1008A50  +
push esi  +
push 0  +
push dword ptr [ebp+0Ch]  +
push edi  +
call sub_100886C  +
cmp dword ptr [ebx] 0 +
jz loc_1008AB3  +
push esi  +
push edi  +
call sub_1006515  +
push esi  +
call sub_1009052  +
push esi  +
push offset aMaxerrors  +
push dword ptr [edi+8]  +
call sub_100D5E6  +
test eax eax +
jnz loc_1008A7D  +
push offset a20  +
call ds:atol  +
pop ecx  +
jmp loc_1008A83  +
push eax  +
call sub_100D527  +
test eax eax +
jz loc_1008AAD  +
mov edi [edi+38h] +
cmp edi eax +
jl loc_1008AAD  +
push edi  +
push offset aD  +
push offset aMakecabAborted  +
push esi  +
call sub_1009022  +
and dword ptr [esi+204h] 0 +
add esp 10h +
xor eax eax +
jmp loc_1008AB6  +
push esi  +
call sub_1009052  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+1Ch] +
cmp dword ptr [esi+200h] 0 +
jnz loc_1008AEB  +
push esi  +
push 1  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call sub_100886C  +
cmp dword ptr [esi+200h] 0 +
jz loc_1008B05  +
push esi  +
push dword ptr [ebp+8]  +
call sub_1006515  +
push offset aMakecabAbort_0  +
push esi  +
call sub_1009022  +
pop ecx  +
pop ecx  +
xor eax eax +
jmp loc_1008B08  +
xor eax eax +
inc eax  +
pop esi  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 220h +
mov eax dword_1016A90 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
xor ebx ebx +
push edi  +
mov edi [ebp+arg_4] +
mov [ebp+var_220] ebx +
cmp [esi+40h] ebx +
jnz loc_1008B45  +
push ebx  +
push offset aParsingDirec_0  +
jmp loc_1008B59  +
push 1  +
push offset aPass1CheckingD  +
push esi  +
call sub_10041B2  +
push 1  +
push offset asc_1002C88  +
push esi  +
call sub_10041B2  +
push edi  +
push dword ptr [esi+8]  +
call sub_100D879  +
mov [esi+0Ch] eax +
cmp eax ebx +
jz loc_1008D8D  +
push dword ptr [esi+4]  +
call sub_100A519  +
jmp loc_1008BD2  +
push ebx  +
call sub_100A519  +
push edi  +
push 1000h  +
push 0  +
push eax  +
mov [edi+204h] eax +
call sub_100CDB3  +
mov [ebp+var_220] eax +
test eax eax +
jz loc_1008D8D  +
push edi  +
push offset loc_10089A1  +
push eax  +
push esi  +
call sub_10059A5  +
test eax eax +
jz loc_1008D8D  +
push [ebp+var_220]  +
call sub_100D0A0  +
and [ebp+var_220] 0 +
push ebx  +
call sub_10091B8  +
mov ebx eax +
test ebx ebx +
jnz loc_1008B7D  +
and [edi+204h] eax +
cmp [esi+0A0h] eax +
jz loc_1008BED  +
push edi  +
push esi  +
call sub_1006B22  +
push edi  +
push esi  +
call sub_1006A34  +
mov eax [esi+38h] +
test eax eax +
jle loc_1008C1B  +
push eax  +
push offset aD  +
push offset aMakecabAbort_1  +
push edi  +
call sub_1009022  +
add esp 10h +
and dword ptr [edi+204h] 0 +
jmp loc_1008D8D  +
push edi  +
push offset aInffilename  +
push dword ptr [esi+8]  +
call sub_100D5E6  +
test eax eax +
jnz loc_1008C34  +
mov eax offset aSetup_inf +
jmp loc_1008C3A  +
push eax  +
call sub_100A540  +
push edi  +
push offset aInfFile  +
push eax  +
call sub_10099CC  +
test eax eax +
jz loc_1008D8D  +
push edi  +
push offset aRptfilename  +
push dword ptr [esi+8]  +
call sub_100D5E6  +
test eax eax +
jnz loc_1008C67  +
mov eax offset aSetup_rpt +
jmp loc_1008C6D  +
push eax  +
call sub_100A540  +
push edi  +
push offset aRptFile  +
push eax  +
call sub_10099CC  +
test eax eax +
jz loc_1008D8D  +
push edi  +
push esi  +
call sub_100C43B  +
test eax eax +
jz loc_1008D8D  +
xor ebx ebx +
inc ebx  +
cmp dword ptr [esi+40h] 0 +
mov [esi+10h] ebx +
jnz loc_1008CD2  +
push dword ptr [esi+68h]  +
lea ebx [esi+1B4h] +
push dword ptr [esi+5Ch]  +
push offset aLdLd_0  +
push offset a1BytesIn2Files  +
push 800h  +
push ebx  +
call sub_100CC3F  +
add esp 18h +
push 1  +
push ebx  +
push esi  +
call sub_10041B2  +
push 0  +
push offset aExecutingDirec  +
jmp loc_1008CE4  +
push ebx  +
push offset aPass2Processin  +
push esi  +
call sub_10041B2  +
push ebx  +
push offset asc_1002BBC  +
push esi  +
call sub_10041B2  +
push edi  +
push dword ptr [esi+8]  +
call sub_100D4D7  +
test eax eax +
jz loc_1008D8D  +
mov eax [esi+0Ch] +
and dword ptr [esi+0Ch] 0 +
push esi  +
mov [esi+8] eax +
call sub_1006463  +
push dword ptr [esi+4]  +
call sub_100A519  +
jmp loc_1008D62  +
push ebx  +
call sub_100A519  +
push edi  +
push 1000h  +
push 0  +
push eax  +
mov [edi+204h] eax +
call sub_100CDB3  +
mov [ebp+var_220] eax +
test eax eax +
jz loc_1008D8D  +
push edi  +
push offset loc_1008AC2  +
push eax  +
push esi  +
call sub_10059A5  +
test eax eax +
jz loc_1008D8D  +
push [ebp+var_220]  +
call sub_100D0A0  +
and [ebp+var_220] 0 +
push ebx  +
call sub_10091B8  +
mov ebx eax +
test ebx ebx +
jnz loc_1008D15  +
and [edi+204h] eax +
push edi  +
push esi  +
call sub_1008191  +
test eax eax +
jz loc_1008D8D  +
call ds:clock  +
push edi  +
push esi  +
mov [esi+78h] eax +
call sub_1006D52  +
test eax eax +
jnz loc_1008DCD  +
mov eax [esi+70h] +
test eax eax +
jz loc_1008DA1  +
lea ecx [ebp+var_21C] +
push ecx  +
push eax  +
call sub_100B45E  +
cmp [ebp+var_220] 0 +
jz loc_1008DB5  +
push [ebp+var_220]  +
call sub_100D0A0  +
mov esi [esi+0Ch] +
test esi esi +
jz loc_1008DC9  +
lea eax [ebp+var_21C] +
push eax  +
push esi  +
call sub_100D4D7  +
xor eax eax +
jmp loc_1008DD0  +
xor eax eax +
inc eax  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100DC5B  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 220h +
mov eax dword_1016A90 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_4] +
push ebx  +
push esi  +
push edi  +
mov [ebp+var_220] eax +
call sub_1005AC0  +
mov eax ds:_iob +
mov esi ds:setvbuf +
xor ebx ebx +
push ebx  +
push 4  +
add eax 20h +
push ebx  +
push eax  +
call esi  +
mov eax ds:_iob +
push ebx  +
push 4  +
add eax 40h +
push ebx  +
push eax  +
call esi  +
add esp 20h +
lea eax [ebp+var_21C] +
push eax  +
call sub_1009052  +
push 0C10h  +
mov [ebp+var_18] ebx +
call ds:malloc  +
mov esi eax +
pop ecx  +
cmp esi ebx +
jnz loc_1008E7E  +
lea eax [ebp+var_21C] +
push offset aCouldNotAlloca  +
push eax  +
call sub_1009022  +
pop ecx  +
pop ecx  +
lea eax [ebp+var_21C] +
push eax  +
push ebx  +
call sub_1006515  +
push 1  +
call ds:exit  +
xor eax eax +
push 4Fh  +
mov [esi+80h] ax +
lea eax [esi+9B4h] +
push 20h  +
push eax  +
mov [esi+0A0h] ebx +
mov [esi+0A4h] ebx +
mov [esi+0A8h] ebx +
mov [esi+10h] ebx +
mov [esi+4] ebx +
mov [esi+8] ebx +
mov [esi+0Ch] ebx +
mov [esi+40h] ebx +
mov [esi+44h] ebx +
mov [esi+5Ch] ebx +
mov [esi+68h] ebx +
mov [esi+54h] ebx +
mov [esi+58h] ebx +
mov [esi+70h] ebx +
mov [esi+84h] ebx +
mov [esi+0B04h] bl +
mov [esi+0ACh] ebx +
mov [esi+0C0Ch] ebx +
call memset  +
add esp 0Ch +
push esi  +
mov [esi+0A03h] bl +
call sub_1006463  +
push offset a6_1_7600_16385  +
mov edi offset aS_1 +
push edi  +
push offset aCabinetMakerLo  +
lea eax [esi+1B4h] +
push 800h  +
push eax  +
call sub_100CC3F  +
lea eax [esi+1B4h] +
push eax  +
push edi  +
mov edi ds:printf +
call edi  +
add esp 1Ch +
lea eax [ebp+var_21C] +
push eax  +
push esi  +
call sub_1004B62  +
cmp eax ebx +
jnz loc_1008F4B  +
lea eax [ebp+var_21C] +
push eax  +
push esi  +
call sub_1006515  +
xor eax eax +
inc eax  +
jmp loc_100900E  +
mov [esi+8] eax +
lea eax [ebp+var_21C] +
push eax  +
push [ebp+var_220]  +
push [ebp+arg_0]  +
push esi  +
call sub_1007BDC  +
test eax eax +
jz loc_1008F36  +
cmp dword ptr [esi] 1 +
jnz loc_1008F7B  +
push offset aMakecabVNDVarV  +
call edi  +
xor eax eax +
jmp loc_100900D  +
call ds:clock  +
mov [esi+74h] eax +
mov eax [esi] +
dec eax  +
dec eax  +
jz loc_1008F9C  +
dec eax  +
jnz loc_1008FC2  +
lea eax [ebp+var_21C] +
push eax  +
push esi  +
call sub_1008B12  +
jmp loc_1008FBA  +
lea eax [ebp+var_21C] +
push eax  +
push esi  +
call sub_1006B22  +
test eax eax +
jz loc_1008F43  +
lea eax [ebp+var_21C] +
push eax  +
push esi  +
call sub_10077B5  +
test eax eax +
jz loc_1008F36  +
xor eax eax +
cmp [esi+38h] ebx +
setnle al  +
mov edi eax +
mov eax [esi+8] +
cmp eax ebx +
jz loc_1008FE0  +
lea ecx [ebp+var_21C] +
push ecx  +
push eax  +
call sub_100D4D7  +
mov eax [esi+84h] +
cmp eax ebx +
jz loc_1008FF0  +
push eax  +
call sub_100A679  +
mov eax [esi+4] +
cmp eax ebx +
jz loc_1009004  +
lea ecx [ebp+var_21C] +
push ecx  +
push eax  +
call sub_100916A  +
push esi  +
call ds:free  +
mov eax edi +
pop ecx  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100DC5B  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
lea eax [ebp+arg_C] +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push 200h  +
push esi  +
call sub_100C979  +
mov dword ptr [esi+200h] 1 +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
xor ecx ecx +
mov [eax+200h] ecx +
mov [eax] cl +
mov [eax+210h] ecx +
mov [eax+214h] ecx +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
push 14h  +
call ds:malloc  +
mov esi eax +
xor ebx ebx +
pop ecx  +
cmp esi ebx +
jz loc_10090F7  +
push [ebp+arg_4]  +
mov edi ds:_strdup +
mov [esi] ebx +
mov [esi+4] ebx +
call edi  +
pop ecx  +
mov [esi] eax +
cmp eax ebx +
jz loc_10090D8  +
cmp [ebp+arg_8] ebx +
jnz loc_10090CB  +
mov [esi+4] ebx +
mov ecx [ebp+arg_0] +
or dword ptr [esi+8] 0FFFFFFFFh +
mov [esi+10h] ebx +
lea eax [ecx+4] +
mov edx [eax] +
mov [esi+0Ch] edx +
cmp [ecx] ebx +
jnz loc_1009115  +
mov [ecx] esi +
jmp loc_100911A  +
push [ebp+arg_8]  +
call edi  +
pop ecx  +
mov [esi+4] eax +
cmp eax ebx +
jnz loc_10090B1  +
mov eax [esi] +
mov edi ds:free +
cmp eax ebx +
jz loc_10090E8  +
push eax  +
call edi  +
pop ecx  +
mov eax [esi+4] +
cmp eax ebx +
jz loc_10090F3  +
push eax  +
call edi  +
pop ecx  +
push esi  +
call edi  +
pop ecx  +
push offset aAddingAFile  +
push offset aS_1  +
push offset aOutOfMemory1_0  +
push [ebp+arg_C]  +
call sub_1009022  +
add esp 10h +
xor eax eax +
jmp loc_100911E  +
mov ecx [eax] +
mov [ecx+10h] esi +
mov [eax] esi +
mov eax esi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 8  +
call ds:malloc  +
pop ecx  +
test eax eax +
jnz loc_100915A  +
push offset aCreatingFileLi  +
push offset aS_1  +
push offset aOutOfMemory1_0  +
push [ebp+arg_0]  +
call sub_1009022  +
add esp 10h +
xor eax eax +
jmp loc_1009161  +
and dword ptr [eax] 0 +
and dword ptr [eax+4] 0 +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
mov esi [eax] +
push edi  +
mov edi ds:free +
test esi esi +
jz loc_10091A4  +
push ebx  +
mov eax [esi] +
test eax eax +
jz loc_100918B  +
push eax  +
call edi  +
pop ecx  +
mov eax [esi+4] +
test eax eax +
jz loc_1009196  +
push eax  +
call edi  +
pop ecx  +
mov ebx [esi+10h] +
push esi  +
call edi  +
pop ecx  +
mov esi ebx +
test ebx ebx +
jnz loc_1009181  +
pop ebx  +
push [ebp+arg_0]  +
call edi  +
pop ecx  +
xor eax eax +
pop edi  +
inc eax  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax+10h] +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
push [ebp+arg_4]  +
mov edi [esi+4] +
call ds:_strdup  +
pop ecx  +
mov [esi+4] eax +
test eax eax +
jnz loc_1009208  +
push offset aChangingDestin  +
push offset aS_1  +
push offset aOutOfMemory1_0  +
push [ebp+arg_8]  +
call sub_1009022  +
add esp 10h +
xor eax eax +
jmp loc_1009217  +
test edi edi +
jz loc_1009214  +
push edi  +
call ds:free  +
pop ecx  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push esi  +
mov esi eax +
xor eax eax +
mov ecx edx +
test edx edx +
jz loc_100923B  +
cmp [esi] al +
jz loc_1009237  +
inc esi  +
dec edx  +
jnz loc_100922F  +
test edx edx +
jnz loc_1009240  +
mov eax 80070057h +
pop esi  +
test edi edi +
jz locret_1009251  +
test eax eax +
jl loc_100924E  +
sub ecx edx +
mov [edi] ecx +
retn   +
and dword ptr [edi] 0 +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax] +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax+8] +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax+4] +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
mov eax [esi] +
test eax eax +
jz loc_10092C8  +
push eax  +
call ds:fclose  +
pop ecx  +
cmp eax 0FFFFFFFFh +
jnz loc_10092C5  +
push dword ptr [esi+8]  +
push offset aCannotClose1  +
push [ebp+arg_4]  +
call sub_1009022  +
add esp 0Ch +
xor eax eax +
jmp loc_10092CB  +
and dword ptr [esi] 0 +
xor eax eax +
inc eax  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_4]  +
mov esi [ebp+arg_0] +
push dword ptr [esi+4]  +
call ds:fopen  +
pop ecx  +
pop ecx  +
mov [esi] eax +
test eax eax +
jnz loc_100930D  +
push dword ptr [esi+4]  +
push dword ptr [esi+8]  +
push offset aSS  +
push offset aCannotOpen12  +
push [ebp+arg_8]  +
call sub_1009022  +
add esp 14h +
xor eax eax +
cmp [esi] eax +
pop esi  +
setnz al  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
mov eax [esi] +
push edi  +
test eax eax +
jz loc_1009336  +
push eax  +
call ds:fclose  +
pop ecx  +
push dword ptr [esi+4]  +
call ds:remove  +
pop ecx  +
test eax eax +
jz loc_100935F  +
push dword ptr [esi+4]  +
push dword ptr [esi+8]  +
push offset aSS  +
push offset aCannotDelete12  +
push [ebp+arg_4]  +
call sub_1009022  +
add esp 14h +
mov eax [esi+8] +
mov edi ds:free +
test eax eax +
jz loc_1009370  +
push eax  +
call edi  +
pop ecx  +
mov eax [esi+4] +
test eax eax +
jz loc_100937B  +
push eax  +
call edi  +
pop ecx  +
push esi  +
call edi  +
pop ecx  +
xor eax eax +
pop edi  +
inc eax  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 24h +
lea eax [ebp+var_24] +
push eax  +
push [ebp+arg_0]  +
call ds:_stat  +
pop ecx  +
pop ecx  +
cmp eax 0FFFFFFFFh +
jnz loc_10093C6  +
push [ebp+arg_0]  +
push offset aS_1  +
push offset aCouldNotFindFi  +
push [ebp+arg_4]  +
call sub_1009022  +
add esp 10h +
or eax 0FFFFFFFFh +
jmp locret_10093E1  +
test dword ptr [ebp+var_24.st_mode] 6000h +
jz loc_10093DE  +
push [ebp+arg_0]  +
push offset aS_1  +
push offset a1IsNotAFile  +
jmp loc_10093B6  +
mov eax [ebp+var_24.st_size] +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov cl [eax] +
test cl cl +
jz loc_1009414  +
cmp cl 5Ch +
jz loc_1009414  +
cmp cl 2Fh +
jz loc_1009414  +
cmp cl 3Ah +
jz loc_1009414  +
inc eax  +
mov byte ptr [eax] 5Ch +
mov byte ptr [eax+1] 0 +
xor eax eax +
inc eax  +
jmp loc_1009416  +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+lpCurrentChar] +
mov cl [esi] +
push edi  +
mov eax esi +
mov edi esi +
jmp loc_1009450  +
cmp cl 2Fh +
jz loc_1009440  +
cmp cl 3Ah +
jz loc_1009440  +
cmp cl 5Ch +
jnz loc_1009443  +
lea edi [eax+1] +
push 0  +
push eax  +
push 0  +
call ds:CharNextExA  +
mov cl [eax] +
test cl cl +
jnz loc_1009431  +
cmp [edi] cl +
jnz loc_1009472  +
push esi  +
push offset aS_1  +
push offset aMissingFileNam  +
push [ebp+arg_4]  +
call sub_1009022  +
add esp 10h +
xor eax eax +
jmp loc_1009474  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test ax ax +
jnz loc_1009493  +
mov eax 80h +
jmp loc_1009496  +
and eax 27h +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test al al +
jns loc_10094AF  +
xor eax eax +
jmp loc_10094B2  +
and eax 27h +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_4] +
xor eax eax +
mov ecx 80070057h +
test edx edx +
jz loc_10094D6  +
cmp edx 7FFFFFFFh +
jbe loc_10094D8  +
mov eax ecx +
test eax eax +
jl loc_10094FF  +
cmp [ebp+arg_C] 7FFFFFFEh +
jbe loc_10094EF  +
mov eax ecx +
mov ecx [ebp+arg_0] +
mov byte ptr [ecx] 0 +
jmp loc_10094FF  +
push [ebp+arg_C]  +
mov eax [ebp+arg_8] +
mov ecx [ebp+arg_0] +
push 0  +
call sub_1004163  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
xor eax eax +
test ecx ecx +
jz loc_100951E  +
cmp ecx 7FFFFFFFh +
jbe loc_1009523  +
mov eax 80070057h +
test eax eax +
jl loc_1009560  +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
lea eax [ebp+arg_C] +
push eax  +
push [ebp+arg_8]  +
lea esi [ecx-1] +
push esi  +
push edi  +
xor ebx ebx +
call ds:_vsnprintf  +
add esp 10h +
test eax eax +
jl loc_1009553  +
cmp eax esi +
ja loc_1009553  +
jnz loc_100955B  +
mov [esi+edi] bl +
jmp loc_100955B  +
mov [esi+edi] bl +
mov ebx 8007007Ah +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push edi  +
mov edi [ebp+arg_8] +
test eax eax +
jz loc_1009589  +
mov edx [ebp+arg_4] +
cmp edx 7FFFFFFFh +
ja loc_1009589  +
call sub_1009222  +
jmp loc_100958E  +
mov eax 80070057h +
test eax eax +
jge loc_1009599  +
test edi edi +
jz loc_1009599  +
and dword ptr [edi] 0 +
pop edi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_8] +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov byte ptr [edi] 0 +
lea ecx [eax+1] +
mov dl [eax] +
inc eax  +
test dl dl +
jnz loc_10095B6  +
sub eax ecx +
mov esi eax +
jz loc_10095FB  +
push [ebp+arg_8]  +
mov eax [ebp+arg_4] +
dec eax  +
push eax  +
push edi  +
call sub_1004ACF  +
test eax eax +
jge loc_10095F1  +
push [ebp+arg_8]  +
push offset aS_1  +
push offset aFileNameTooLon  +
push [ebp+arg_14]  +
call sub_1009022  +
add esp 10h +
xor eax eax +
jmp loc_1009632  +
lea eax [esi+edi-1] +
push eax  +
call sub_10093EA  +
mov esi [ebp+arg_C] +
cmp byte ptr [esi] 0 +
jnz loc_100961E  +
mov eax [ebp+lpCurrentChar] +
test eax eax +
jz loc_100962F  +
cmp byte ptr [eax] 0 +
jz loc_100962F  +
push [ebp+arg_14]  +
push eax  +
call sub_100941F  +
mov esi eax +
test esi esi +
jz loc_10095ED  +
push esi  +
push [ebp+arg_4]  +
push edi  +
call sub_1004B09  +
test eax eax +
jge loc_100962F  +
push esi  +
jmp loc_10095D8  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 11Ch +
mov eax dword_1016A90 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_8] +
push ebx  +
mov ebx ds:CharNextExA +
push esi  +
push edi  +
mov edi [ebp+lpCurrentChar] +
mov cl [edi] +
mov [ebp+var_108] eax +
mov [ebp+var_11C] edi +
mov eax edi +
jmp loc_1009698  +
cmp cl 5Ch +
jz loc_100969C  +
cmp cl 2Fh +
jz loc_100969C  +
cmp cl 3Ah +
jnz loc_100968F  +
mov cl [eax+1] +
cmp cl 5Ch +
jz loc_100968F  +
cmp cl 2Fh +
jnz loc_100969C  +
push 0  +
push eax  +
push 0  +
call ebx  +
mov cl [eax] +
test cl cl +
jnz loc_1009673  +
mov [ebp+var_104] 0 +
cmp byte ptr [eax] 0 +
jnz loc_10096AE  +
cmp [ebp+arg_4] 0 +
jnz loc_10096B0  +
mov eax edi +
cmp byte ptr [eax] 0 +
jz loc_100973E  +
mov cl [eax] +
test cl cl +
jz loc_100973E  +
mov esi eax +
mov al cl +
cmp al 5Ch +
jz loc_10096E9  +
cmp al 2Fh +
jz loc_10096E9  +
cmp al 3Ah +
jnz loc_10096DA  +
mov al [esi+1] +
cmp al 5Ch +
jz loc_10096DA  +
cmp al 2Fh +
jnz loc_10096E9  +
push 0  +
push esi  +
push 0  +
call ebx  +
mov esi eax +
mov al [esi] +
test al al +
jnz loc_10096C3  +
mov cl [esi] +
test cl cl +
jnz loc_10096F5  +
cmp [ebp+arg_4] 0 +
jnz loc_1009732  +
mov eax esi +
sub eax edi +
test eax eax +
jle loc_1009709  +
cmp cl 3Ah +
jz loc_1009708  +
cmp byte ptr [esi-1] 3Ah +
jnz loc_1009709  +
inc eax  +
push eax  +
push edi  +
push 100h  +
lea eax [ebp+var_104] +
push eax  +
call sub_10094BB  +
test eax eax +
jl loc_10098C4  +
lea eax [ebp+var_104] +
push eax  +
call ds:_mkdir  +
pop ecx  +
cmp byte ptr [esi] 0 +
lea eax [esi+1] +
jnz loc_10096B9  +
lea eax [ebp+var_104] +
lea edx [eax+1] +
mov cl [eax] +
inc eax  +
test cl cl +
jnz loc_1009747  +
sub eax edx +
jnz loc_1009779  +
mov eax edi +
lea edx [eax+1] +
mov cl [eax] +
inc eax  +
test cl cl +
jnz loc_1009757  +
sub eax edx +
jz loc_1009779  +
mov al [edi] +
cmp al 5Ch +
jz loc_100976C  +
cmp al 2Fh +
jnz loc_1009779  +
mov [ebp+var_104] al +
mov byte ptr [ebp-103h] 0 +
lea eax [ebp+var_104] +
lea edx [eax+1] +
mov cl [eax] +
inc eax  +
test cl cl +
jnz loc_1009782  +
sub eax edx +
mov edx eax +
mov [ebp+var_114] edx +
test edx edx +
jle loc_10097B2  +
cmp edx 0FEh +
ja loc_10098C4  +
lea eax [ebp+edx+var_108+3] +
push eax  +
call sub_10093EA  +
add edx eax +
and [ebp+var_110] 0 +
and [ebp+var_10C] 0 +
mov esi ds:_errno +
mov edi ds:__doserrno +
mov [ebp+var_118] 100h +
sub [ebp+var_118] edx +
lea ebx [ebp+edx+var_104] +
call ds:GetCurrentProcessId  +
add eax [ebp+var_10C] +
push eax  +
push offset aCab5_5d_tmp  +
push [ebp+var_118]  +
push ebx  +
call sub_1009508  +
add esp 10h +
test eax eax +
jl loc_100997A  +
push 180h  +
lea eax [ebp+var_104] +
push 502h  +
push eax  +
call ds:_open  +
add esp 0Ch +
cmp eax 0FFFFFFFFh +
jnz loc_10099A9  +
call esi  +
mov eax [eax] +
sub eax 0Dh +
jz loc_10098DF  +
sub eax 4 +
jz loc_10098F2  +
sub eax 5 +
jnz loc_100994E  +
call edi  +
cmp dword ptr [eax] 12Fh +
jz loc_10098F2  +
call edi  +
mov ebx eax +
call esi  +
mov [ebp+var_11C] eax +
call ds:GetLastError  +
push eax  +
push dword ptr [ebx]  +
mov eax [ebp+var_11C] +
push dword ptr [eax]  +
lea eax [ebp+var_104] +
push eax  +
push offset aEnsuredirector  +
call ds:printf  +
mov eax [ebp+var_114] +
mov [ebp+eax+var_104] 0 +
call edi  +
mov edi eax +
call esi  +
push dword ptr [edi]  +
push dword ptr [eax]  +
lea eax [ebp+var_104] +
push eax  +
push offset aSDD  +
push offset aPathIsInvalid1  +
push [ebp+var_108]  +
call sub_1009022  +
add esp 2Ch +
jmp loc_100993B  +
push edi  +
push offset aS_1  +
push offset aFileNameTooLon  +
push [ebp+var_108]  +
call sub_1009022  +
add esp 10h +
jmp loc_100993B  +
inc [ebp+var_110]  +
cmp [ebp+var_110] 5 +
jge loc_1009985  +
inc [ebp+var_10C]  +
cmp [ebp+var_10C] 3E7h +
jl loc_10097E3  +
mov eax [ebp+var_114] +
mov [ebp+eax+var_104] 0 +
lea eax [ebp+var_104] +
push eax  +
push [ebp+var_10C]  +
push offset aDS  +
push offset aRanOutOfTempFi  +
push [ebp+var_108]  +
call sub_1009022  +
add esp 14h +
xor eax eax +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100DC5B  +
leave   +
retn 0Ch  +
dec eax  +
dec eax  +
jnz loc_100985C  +
mov eax [ebp+var_114] +
mov [ebp+eax+var_104] 0 +
lea eax [ebp+var_104] +
push eax  +
push offset aS_1  +
push offset aNoMoreFileHand  +
jmp loc_10098CF  +
push [ebp+var_11C]  +
jmp loc_10098C5  +
mov eax [ebp+var_114] +
mov [ebp+eax+var_104] 0 +
lea eax [ebp+var_104] +
push eax  +
push offset aS_1  +
push offset aCouldNotCreate  +
jmp loc_10098CF  +
push eax  +
call ds:_close  +
lea eax [ebp+var_104] +
push eax  +
call ds:_unlink  +
pop ecx  +
xor eax eax +
pop ecx  +
inc eax  +
jmp loc_100993D  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+lpCurrentChar] +
push edi  +
mov edi [ebp+arg_8] +
push edi  +
push 1  +
push esi  +
call sub_100963D  +
test eax eax +
jnz loc_1009A01  +
push esi  +
push [ebp+arg_4]  +
push offset aSS  +
push offset aCannotCreate12  +
push edi  +
call sub_1009022  +
add esp 14h +
xor eax eax +
jmp loc_1009A4E  +
push 180h  +
push 102h  +
push esi  +
call ds:_open  +
add esp 0Ch +
cmp eax 0FFFFFFFFh +
jnz loc_1009A3B  +
call ds:_errno  +
cmp dword ptr [eax] 18h +
push esi  +
jnz loc_10099E7  +
push offset aS_1  +
push offset aNoMoreFileHand  +
push edi  +
call sub_1009022  +
add esp 10h +
jmp loc_10099FD  +
push eax  +
call ds:_close  +
push esi  +
call ds:_unlink  +
pop ecx  +
xor eax eax +
pop ecx  +
inc eax  +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
push esi  +
lea eax [ebp+FileInformation] +
push eax  +
push 0  +
push [ebp+lpFileName]  +
call ds:GetFileAttributesExA  +
test eax eax +
jz loc_1009AAE  +
lea eax [ebp+LocalFileTime] +
push eax  +
lea eax [ebp+FileTime] +
push eax  +
call ds:FileTimeToLocalFileTime  +
test eax eax +
jz loc_1009AAE  +
mov esi [ebp+lpFatDate] +
lea eax [esi+2] +
push eax  +
push esi  +
lea eax [ebp+LocalFileTime] +
push eax  +
call ds:FileTimeToDosDateTime  +
test eax eax +
jz loc_1009AAE  +
push [ebp+FileInformation]  +
call sub_100949F  +
mov [esi+4] ax +
xor eax eax +
inc eax  +
jmp loc_1009AC8  +
push [ebp+lpFileName]  +
push offset aS_1  +
push offset aCannotGetDateT  +
push [ebp+arg_8]  +
call sub_1009022  +
add esp 10h +
xor eax eax +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push ebx  +
push esi  +
push edi  +
mov edi ds:CreateFileA +
xor esi esi +
push esi  +
push esi  +
push 3  +
push esi  +
push esi  +
mov ebx 40000000h +
push ebx  +
push [ebp+lpFileName]  +
call edi  +
mov [ebp+hObject] eax +
cmp eax 0FFFFFFFFh +
jnz loc_1009B1A  +
push 64h  +
call ds:Sleep  +
push esi  +
push esi  +
push 3  +
push esi  +
push esi  +
push ebx  +
push [ebp+lpFileName]  +
call edi  +
mov [ebp+hObject] eax +
cmp eax 0FFFFFFFFh +
jz loc_1009B90  +
mov edi [ebp+arg_4] +
lea eax [ebp+LocalFileTime] +
push eax  +
movzx eax word ptr [edi+2] +
push eax  +
movzx eax word ptr [edi] +
push eax  +
call ds:DosDateTimeToFileTime  +
mov ebx eax +
lea eax [ebp+LastWriteTime] +
push eax  +
lea eax [ebp+LocalFileTime] +
push eax  +
call ds:LocalFileTimeToFileTime  +
or ebx eax +
lea eax [ebp+LastWriteTime] +
push eax  +
push esi  +
push esi  +
push [ebp+hObject]  +
call ds:SetFileTime  +
push [ebp+hObject]  +
or ebx eax +
call ds:CloseHandle  +
movzx eax word ptr [edi+4] +
push eax  +
call sub_100947F  +
push eax  +
push [ebp+lpFileName]  +
call ds:SetFileAttributesA  +
or eax ebx +
jnz loc_1009B90  +
push [ebp+lpFileName]  +
push offset aS_1  +
push offset aCannotSetDateT  +
push [ebp+arg_8]  +
call sub_1009022  +
add esp 10h +
xor eax eax +
jmp loc_1009B93  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
and [ebp+var_C] 0 +
and [ebp+var_4] 0 +
push esi  +
mov esi ds:_open +
push edi  +
mov edi [ebp+arg_4] +
push 8000h  +
push edi  +
call esi  +
pop ecx  +
pop ecx  +
mov [ebp+var_8] eax +
cmp eax 0FFFFFFFFh +
jnz loc_1009BE7  +
push edi  +
push offset aS_1  +
push offset aCannotOpenFile  +
push [ebp+arg_18]  +
call sub_1009022  +
add esp 10h +
jmp loc_1009D37  +
push ebx  +
mov ebx [ebp+arg_18] +
push ebx  +
push edi  +
lea eax [ebp+FatDate] +
push eax  +
call sub_1009A59  +
test eax eax +
jz loc_1009D1C  +
cmp [ebp+arg_10] 0 +
jz loc_1009C17  +
push ebx  +
push [ebp+arg_14]  +
lea eax [ebp+FatDate] +
push eax  +
call [ebp+arg_10]  +
test eax eax +
jz loc_1009D1C  +
cmp [ebp+arg_8] 0 +
jnz loc_1009C29  +
mov [ebp+var_C] 1 +
jmp loc_1009D1C  +
mov ecx [ebp+arg_C] +
xor edx edx +
inc edx  +
cmp ecx edx +
ja loc_1009C35  +
mov ecx edx +
mov eax 100000h +
cmp ecx eax +
jnb loc_1009C48  +
cmp [ebp+arg_C] edx +
ja loc_1009C4B  +
mov [ebp+arg_C] edx +
jmp loc_1009C4B  +
mov [ebp+arg_C] eax +
push [ebp+arg_C]  +
call ds:malloc  +
pop ecx  +
mov [ebp+var_4] eax +
test eax eax +
jnz loc_1009C78  +
push [ebp+lpFileName]  +
push edi  +
push offset aSS  +
push offset aCouldNotAllo_0  +
push ebx  +
call sub_1009022  +
add esp 14h +
jmp loc_1009D1C  +
push 180h  +
push 8301h  +
push [ebp+lpFileName]  +
call esi  +
mov edi eax +
add esp 0Ch +
cmp edi 0FFFFFFFFh +
jnz loc_1009CA9  +
push [ebp+lpFileName]  +
push offset aS_1  +
push offset aCannotOpenFile  +
push ebx  +
call sub_1009022  +
add esp 10h +
jmp loc_1009D0F  +
mov ebx ds:_eof +
jmp loc_1009CE0  +
push [ebp+arg_C]  +
push [ebp+var_4]  +
push [ebp+var_8]  +
call ds:_read  +
mov esi eax +
add esp 0Ch +
cmp esi 0FFFFFFFFh +
jz loc_1009D40  +
test esi esi +
jz loc_1009CE0  +
push esi  +
push [ebp+var_4]  +
push edi  +
call ds:_write  +
add esp 0Ch +
cmp eax esi +
jnz loc_1009D55  +
push [ebp+var_8]  +
call ebx  +
pop ecx  +
test eax eax +
jz loc_1009CB1  +
push edi  +
call ds:_close  +
pop ecx  +
push [ebp+arg_18]  +
lea eax [ebp+FatDate] +
push eax  +
push [ebp+lpFileName]  +
or edi 0FFFFFFFFh +
call sub_1009AD2  +
test eax eax +
jz loc_1009D1C  +
mov [ebp+var_C] 1 +
cmp edi 0FFFFFFFFh +
jz loc_1009D1C  +
push edi  +
call ds:_close  +
pop ecx  +
push [ebp+var_8]  +
call ds:_close  +
cmp [ebp+var_4] 0 +
pop ecx  +
pop ebx  +
jz loc_1009D37  +
push [ebp+var_4]  +
call ds:free  +
pop ecx  +
mov eax [ebp+var_C] +
pop edi  +
pop esi  +
leave   +
retn 1Ch  +
push [ebp+arg_4]  +
push offset aS_1  +
push offset aCannotReadFile  +
push [ebp+arg_18]  +
jmp loc_1009C9F  +
push [ebp+arg_4]  +
push offset aS_1  +
push offset aCannotWriteFil  +
jmp loc_1009D4D  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
mov eax dword_1016A90 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_4] +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push eax  +
push 0Ah  +
lea eax [ebp+var_1C] +
xor ebx ebx +
push eax  +
mov [ebp+var_20] ebx +
call sub_1004ACF  +
test eax eax +
jnz loc_1009DE3  +
lea eax [ebp+var_20] +
push eax  +
push 15h  +
lea eax [ebp+var_1C] +
push eax  +
call sub_1009567  +
test eax eax +
jnz loc_1009DE3  +
push edi  +
mov edi [ebp+var_20] +
cmp edi 15h +
jnb loc_1009DE2  +
call ds:GetCurrentProcessId  +
push eax  +
push offset a_U_  +
lea eax [ebp+edi+var_1C] +
push 0Bh  +
push eax  +
call sub_1009508  +
add esp 10h +
test eax eax +
jnz loc_1009DE2  +
lea eax [ebp+var_1C] +
push eax  +
push esi  +
call ds:_tempnam  +
pop ecx  +
pop ecx  +
mov ebx eax +
pop edi  +
mov ecx [ebp+var_4] +
pop esi  +
mov eax ebx +
xor ecx ebp +
pop ebx  +
call sub_100DC5B  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
mov ebx ds:free +
push esi  +
push edi  +
xor esi esi +
push [ebp+arg_4]  +
push offset word_1001732  +
call sub_1009D69  +
mov edi eax +
pop ecx  +
pop ecx  +
mov [ebp+var_8] edi +
test edi edi +
jz loc_1009E35  +
push [ebp+arg_8]  +
push edi  +
call ds:fopen  +
pop ecx  +
pop ecx  +
mov [ebp+var_4] eax +
test eax eax +
jnz loc_1009E86  +
inc esi  +
cmp esi 64h +
jg loc_1009E45  +
test edi edi +
jz loc_1009E0A  +
push edi  +
call ebx  +
pop ecx  +
jmp loc_1009E0A  +
test edi edi +
jnz loc_1009E63  +
push [ebp+arg_0]  +
push offset aS_1  +
push offset aCannotCreate1  +
push [ebp+arg_C]  +
call sub_1009022  +
add esp 10h +
jmp loc_1009E7F  +
push edi  +
push [ebp+arg_0]  +
push offset aSS  +
push offset aCannotCreate12  +
push [ebp+arg_C]  +
call sub_1009022  +
push edi  +
call ebx  +
add esp 18h +
xor eax eax +
jmp loc_1009F28  +
push 0Ch  +
call ds:malloc  +
mov esi eax +
pop ecx  +
test esi esi +
jnz loc_1009EAF  +
push [ebp+arg_0]  +
push offset aS_1  +
push offset aOutOfMemorying  +
push [ebp+arg_C]  +
call sub_1009022  +
add esp 10h +
jmp loc_1009F0A  +
and dword ptr [esi+8] 0 +
push edi  +
mov edi ds:_strdup +
call edi  +
pop ecx  +
push [ebp+arg_0]  +
mov [ebp+arg_4] eax +
mov [esi+4] eax +
test eax eax +
jz loc_1009ED7  +
call edi  +
pop ecx  +
mov [esi+8] eax +
test eax eax +
jnz loc_1009F1B  +
push [ebp+arg_0]  +
push offset aS_1  +
push offset aOutOfMemorying  +
push [ebp+arg_C]  +
call sub_1009022  +
mov eax [esi+8] +
add esp 10h +
test eax eax +
jz loc_1009EF7  +
push eax  +
call ebx  +
pop ecx  +
cmp [ebp+arg_4] 0 +
jz loc_1009F03  +
push [ebp+arg_4]  +
call ebx  +
pop ecx  +
push esi  +
call ebx  +
mov edi [ebp+var_8] +
pop ecx  +
push [ebp+var_4]  +
call ds:fclose  +
push edi  +
call ebx  +
pop ecx  +
xor eax eax +
jmp loc_1009F27  +
mov eax [ebp+var_4] +
push [ebp+var_8]  +
mov [esi] eax +
call ebx  +
mov eax esi +
pop ecx  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+lplpBuffer] +
push edi  +
mov edi [ebp+puLen] +
push edi  +
push esi  +
push [ebp+lpSubBlock]  +
push [ebp+pBlock]  +
call VerQueryValueA  +
test eax eax +
jnz loc_1009F8D  +
call ds:GetLastError  +
test eax eax +
jz loc_1009F86  +
cmp eax 713h +
jle loc_1009F6A  +
cmp eax 715h +
jle loc_1009F86  +
push [ebp+arg_10]  +
push [ebp+lpSubBlock]  +
push eax  +
push offset aDSS  +
push offset aVerqueryvalueO  +
push [ebp+arg_14]  +
call sub_1009022  +
add esp 18h +
and dword ptr [esi] 0 +
xor eax eax +
jmp loc_1009FB2  +
cmp dword ptr [edi] 0 +
jnz loc_1009FAF  +
push [ebp+arg_10]  +
push [ebp+lpSubBlock]  +
push offset aSS  +
push offset aNoValueForKey1  +
push [ebp+arg_14]  +
call sub_1009022  +
add esp 14h +
jmp loc_1009F86  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 250h +
mov eax dword_1016A90 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_4] +
mov [ebp+var_234] eax +
mov eax [ebp+arg_8] +
push ebx  +
mov ebx [ebp+lptstrFilename] +
push esi  +
mov esi [ebp+arg_C] +
mov dword ptr [ebp+var_220] eax +
mov eax [ebp+arg_14] +
push edi  +
mov edi [ebp+arg_10] +
mov [ebp+var_218] eax +
lea eax [ebp+dwHandle] +
push eax  +
push ebx  +
mov [ebp+var_248] esi +
mov [ebp+var_230] edi +
call GetFileVersionInfoSizeA  +
mov [ebp+dwLen] eax +
test eax eax +
jnz loc_100A04F  +
lea eax [ebp+var_240] +
push eax  +
push ebx  +
call sub_100D14A  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_100A2BE  +
mov eax [ebp+var_240] +
mov ecx [ebp+var_234] +
mov [ecx] eax +
mov eax dword ptr [ebp+var_220] +
and dword ptr [eax] 0 +
jmp loc_100A2BE  +
and dword ptr [esi] 0 +
and dword ptr [edi] 0 +
push eax  +
call ds:malloc  +
mov esi eax +
pop ecx  +
mov [ebp+pBlock] esi +
test esi esi +
jnz loc_100A087  +
push ebx  +
push offset aS_1  +
push offset aOutOfMemoryAll  +
push [ebp+var_218]  +
call sub_1009022  +
add esp 10h +
jmp loc_100A2AD  +
push esi  +
push [ebp+dwLen]  +
push [ebp+dwHandle]  +
push ebx  +
call GetFileVersionInfoA  +
test eax eax +
jnz loc_100A0C3  +
call ds:GetLastError  +
push ebx  +
push eax  +
push offset aDS  +
push offset aGetfileversion  +
push [ebp+var_218]  +
call sub_1009022  +
add esp 14h +
jmp loc_100A2A0  +
push [ebp+var_218]  +
lea eax [ebp+puLen] +
push ebx  +
push eax  +
lea eax [ebp+lpBuffer] +
push eax  +
push offset SubBlock  +
push esi  +
call sub_1009F34  +
test eax eax +
jz loc_100A103  +
mov eax [ebp+lpBuffer] +
mov ecx [eax+8] +
mov edx [ebp+var_234] +
mov [edx] ecx +
mov eax [eax+0Ch] +
mov ecx dword ptr [ebp+var_220] +
mov [ecx] eax +
push [ebp+var_218]  +
lea eax [ebp+var_228] +
push ebx  +
push eax  +
lea eax [ebp+var_21C] +
push eax  +
push offset aVarfileinfoTra  +
push esi  +
call sub_1009F34  +
test eax eax +
jz loc_100A2B1  +
mov eax [ebp+var_21C] +
mov edi [eax] +
movzx eax di +
push eax  +
push offset aD  +
mov dword ptr [ebp+var_220] eax +
mov esi 100h +
lea eax [ebp+var_214] +
push esi  +
push eax  +
call sub_1009508  +
add esp 10h +
jmp loc_100A196  +
mov eax [ebp+var_21C] +
movzx eax word ptr [eax] +
push eax  +
push offset aD_0  +
lea eax [ebp+var_14] +
push 10h  +
push eax  +
call sub_1009508  +
add esp 10h +
test eax eax +
jl loc_100A1A6  +
lea eax [ebp+var_14] +
push eax  +
push esi  +
lea eax [ebp+var_214] +
push eax  +
call sub_1004B09  +
test eax eax +
jl loc_100A1A6  +
sub [ebp+var_228] 4 +
add [ebp+var_21C] 4 +
cmp [ebp+var_228] 4 +
ja loc_100A159  +
lea eax [ebp+var_214] +
push eax  +
call ds:_strdup  +
pop ecx  +
mov ecx [ebp+var_230] +
mov [ecx] eax +
test eax eax +
jnz loc_100A1D0  +
push ebx  +
push offset aS_1  +
push offset aOutOfMemoryDup  +
jmp loc_100A292  +
push dword ptr [ebp+var_220]  +
shr edi 10h +
push edi  +
mov [ebp+var_230] edi +
mov edi offset aStringfileinfo +
push edi  +
lea eax [ebp+SubBlock] +
push esi  +
push eax  +
call sub_1009508  +
add esp 14h +
push [ebp+var_218]  +
lea eax [ebp+var_23C] +
push ebx  +
push eax  +
lea eax [ebp+var_22C] +
push eax  +
lea eax [ebp+SubBlock] +
push eax  +
push [ebp+pBlock]  +
call sub_1009F34  +
test eax eax +
jnz loc_100A265  +
push [ebp+var_230]  +
lea eax [ebp+SubBlock] +
push dword ptr [ebp+var_220]  +
push edi  +
push esi  +
push eax  +
call sub_1009508  +
add esp 14h +
push [ebp+var_218]  +
lea eax [ebp+var_23C] +
push ebx  +
push eax  +
lea eax [ebp+var_22C] +
push eax  +
lea eax [ebp+SubBlock] +
push eax  +
push [ebp+pBlock]  +
call sub_1009F34  +
cmp [ebp+var_22C] 0 +
jz loc_100A2B1  +
push [ebp+var_22C]  +
call ds:_strdup  +
pop ecx  +
mov ecx [ebp+var_248] +
mov [ecx] eax +
test eax eax +
jnz loc_100A2B1  +
push ebx  +
push offset aS_1  +
push offset aOutOfMemoryD_0  +
push [ebp+var_218]  +
call sub_1009022  +
add esp 10h +
push [ebp+pBlock]  +
call ds:free  +
pop ecx  +
xor eax eax +
jmp loc_100A2C1  +
push [ebp+pBlock]  +
call ds:free  +
pop ecx  +
xor eax eax +
inc eax  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100DC5B  +
leave   +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 44h +
mov eax dword_1016A90 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_C] +
mov ecx [ebp+arg_8] +
mov edx [ebp+arg_0] +
push ebx  +
mov [ebp+var_40] eax +
mov eax [ebp+arg_10] +
push esi  +
mov esi [ebp+arg_14] +
mov [ebp+var_2C] edx +
mov [ebp+var_28] ecx +
mov [ebp+var_44] eax +
mov al [ecx] +
push edi  +
xor ebx ebx +
xor edi edi +
mov [ebp+var_34] esi +
mov [ebp+var_30] ebx +
test al al +
jz loc_100A499  +
jmp loc_100A323  +
mov ebx [ebp+var_30] +
mov edx [ebp+var_2C] +
movsx eax al +
sub eax 2Ah +
jz loc_100A382  +
sub eax 51h +
jz loc_100A35F  +
dec eax  +
dec eax  +
jnz loc_100A38D  +
inc ecx  +
mov [ebp+var_28] ecx +
cmp byte ptr [ecx] 7Dh +
jz loc_100A38D  +
cmp ebx edi +
jz loc_100A441  +
cmp [ebp+var_38] edi +
jz loc_100A357  +
cmp [ebp+var_3C] edi +
jz loc_100A357  +
sub edx ebx +
add [ebp+arg_4] edx +
mov [ebp+var_2C] ebx +
mov [ebp+var_30] edi +
jmp loc_100A418  +
inc ecx  +
mov [ebp+var_28] ecx +
cmp byte ptr [ecx] 7Bh +
jz loc_100A38D  +
cmp ebx edi +
jnz loc_100A45B  +
mov [ebp+var_30] edx +
mov [ebp+var_38] edi +
mov [ebp+var_3C] 1 +
jmp loc_100A418  +
mov ebx ecx +
inc ecx  +
mov [ebp+var_28] ecx +
cmp byte ptr [ecx] 2Ah +
jnz loc_100A3AA  +
push 1  +
lea eax [ebp+var_28] +
push eax  +
lea eax [ebp+arg_4] +
push eax  +
lea eax [ebp+var_2C] +
push eax  +
call sub_100CC60  +
test eax eax +
jz loc_100A49E  +
jmp loc_100A418  +
push 2Ah  +
push ecx  +
call ds:strchr  +
pop ecx  +
pop ecx  +
cmp eax edi +
jz loc_100A475  +
lea edi [eax+1] +
sub eax [ebp+var_28] +
mov esi eax +
cmp esi 20h +
jnb loc_100A484  +
push esi  +
push [ebp+var_28]  +
lea eax [ebp+var_24] +
push eax  +
call memcpy  +
add esp 0Ch +
push [ebp+var_34]  +
lea eax [ebp+var_24] +
push [ebp+var_44]  +
mov byte ptr [ebp+esi+var_24] 0 +
push eax  +
push [ebp+arg_4]  +
push [ebp+var_2C]  +
call [ebp+var_40]  +
cmp eax 0FFFFFFFFh +
jz loc_100A471  +
add [ebp+var_2C] eax +
sub [ebp+arg_4] eax +
mov [ebp+var_38] 1 +
test eax eax +
jle loc_100A410  +
and [ebp+var_3C] 0 +
mov esi [ebp+var_34] +
mov [ebp+var_28] edi +
xor edi edi +
mov ecx [ebp+var_28] +
mov al [ecx] +
test al al +
jnz loc_100A31D  +
cmp [ebp+var_30] edi +
jz loc_100A496  +
push 7Dh  +
push offset aC  +
push offset aMissingRightBr  +
push esi  +
call sub_1009022  +
add esp 10h +
jmp loc_100A471  +
push ecx  +
push 7Bh  +
push 7Dh  +
push offset aCCS  +
push offset aRightBrace1Wit  +
push esi  +
call sub_1009022  +
add esp 18h +
jmp loc_100A471  +
push ecx  +
push 7Bh  +
push offset aCS  +
push offset aNestedBraces1N  +
push esi  +
call sub_1009022  +
add esp 14h +
xor eax eax +
jmp loc_100A4B3  +
push ebx  +
push 2Ah  +
push offset aCS  +
push offset aMissing1AfterP  +
jmp loc_100A468  +
push ebx  +
push 1Fh  +
push offset aDS  +
push offset aParameterNameE  +
push [ebp+var_34]  +
jmp loc_100A469  +
mov edx [ebp+var_2C] +
cmp [ebp+arg_4] edi +
jnz loc_100A4AD  +
push [ebp+var_28]  +
push offset aS_1  +
push offset aBufferOverflow  +
jmp loc_100A436  +
xor eax eax +
mov byte ptr [edx] 0 +
inc eax  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100DC5B  +
leave   +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 18h  +
call ds:malloc  +
pop ecx  +
xor ecx ecx +
cmp eax ecx +
jnz loc_100A4F9  +
push [ebp+arg_8]  +
push offset aS_1  +
push offset aOutOfMemoryCre  +
push [ebp+arg_C]  +
call sub_1009022  +
add esp 10h +
xor eax eax +
jmp loc_100A510  +
mov edx [ebp+arg_0] +
mov [eax+8] edx +
mov edx [ebp+arg_4] +
mov [eax] ecx +
mov [eax+4] ecx +
mov [eax+0Ch] edx +
mov [eax+10h] ecx +
mov [eax+14h] ecx +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax] +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax+0Ch] +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax+4] +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
mov al [esi] +
movzx eax al +
push edi  +
mov edi ds:toupper +
push eax  +
inc esi  +
call edi  +
pop ecx  +
jmp loc_100A58C  +
movzx eax al +
push eax  +
inc esi  +
call edi  +
pop ecx  +
movzx ecx bl +
shl ecx 3 +
shr ebx 8 +
or ecx ebx +
and ecx 0FFFFFFh +
xor eax ecx +
mov ebx eax +
mov al [esi] +
test al al +
jnz loc_100A571  +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_4] +
mov ecx [esi] +
xor eax eax +
test ecx ecx +
jz loc_100A5B9  +
push ecx  +
call sub_100A554  +
mov ecx [ebp+arg_0] +
mov edx [ecx+14h] +
shl eax 2 +
mov edx [eax+edx] +
mov [esi+8] edx +
mov ecx [ecx+14h] +
mov [eax+ecx] esi +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov edi [esi+14h] +
mov eax [edi+0Ch] +
test eax eax +
jz loc_100A5F2  +
push dword ptr [esi+4]  +
call eax  +
mov eax [esi] +
mov ebx ds:free +
test eax eax +
jz loc_100A602  +
push eax  +
call ebx  +
pop ecx  +
mov eax [esi+10h] +
test eax eax +
jnz loc_100A610  +
mov eax [esi+0Ch] +
mov [edi] eax +
jmp loc_100A616  +
mov ecx [esi+0Ch] +
mov [eax+0Ch] ecx +
mov eax [esi+0Ch] +
test eax eax +
jnz loc_100A625  +
mov eax [esi+10h] +
mov [edi+4] eax +
jmp loc_100A62B  +
mov ecx [esi+10h] +
mov [eax+10h] ecx +
cmp dword ptr [edi+14h] 0 +
jz loc_100A666  +
push dword ptr [esi]  +
call sub_100A554  +
mov ecx [edi+14h] +
lea eax [ecx+eax*4] +
cmp esi [eax] +
jnz loc_100A649  +
mov ecx [esi+8] +
mov [eax] ecx +
jmp loc_100A666  +
mov eax [eax] +
test eax eax +
jz loc_100A666  +
mov ecx [eax+8] +
cmp ecx esi +
jz loc_100A65C  +
mov eax ecx +
test eax eax +
jnz loc_100A64F  +
test eax eax +
jz loc_100A666  +
mov ecx [esi+8] +
mov [eax+8] ecx +
push esi  +
call ebx  +
dec dword ptr [edi+10h]  +
pop ecx  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
mov eax [esi+14h] +
push edi  +
mov edi ds:free +
test eax eax +
jz loc_100A698  +
push eax  +
call edi  +
and dword ptr [esi+14h] 0 +
pop ecx  +
mov eax [esi] +
test eax eax +
jz loc_100A6AF  +
push ebx  +
mov ebx [eax+0Ch] +
push eax  +
call sub_100A5D8  +
mov eax ebx +
test ebx ebx +
jnz loc_100A69F  +
pop ebx  +
push esi  +
call edi  +
pop ecx  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_0] +
test ebx ebx +
jnz loc_100A6D2  +
xor eax eax +
jmp loc_100A77B  +
push esi  +
mov esi [ebx+14h] +
cmp dword ptr [esi+14h] 0 +
jz loc_100A70C  +
push [ebp+arg_4]  +
call sub_100A554  +
mov ecx [esi+14h] +
mov esi [ecx+eax*4] +
jmp loc_100A700  +
push [ebp+arg_4]  +
push dword ptr [esi]  +
call ds:_stricmp  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_100A708  +
mov esi [esi+8] +
test esi esi +
jnz loc_100A6EC  +
xor eax eax +
jmp loc_100A77A  +
mov eax esi +
jmp loc_100A77A  +
cmp dword ptr [esi+10h] 32h +
push edi  +
jl loc_100A74F  +
cmp [ebp+arg_4] 0 +
jz loc_100A74F  +
mov edi 2000h +
push edi  +
call ds:malloc  +
pop ecx  +
mov [esi+14h] eax +
test eax eax +
jz loc_100A74F  +
xor eax eax +
mov ecx [esi+14h] +
and dword ptr [eax+ecx] 0 +
add eax 4 +
cmp eax edi +
jl loc_100A72F  +
mov edi [esi] +
jmp loc_100A74B  +
push edi  +
push esi  +
call sub_100A5A2  +
mov edi [edi+0Ch] +
test edi edi +
jnz loc_100A741  +
mov edi [ebp+arg_4] +
mov esi ebx +
test edi edi +
jz loc_100A76C  +
mov eax [esi] +
test eax eax +
jz loc_100A76C  +
push edi  +
push eax  +
call ds:_stricmp  +
pop ecx  +
pop ecx  +
test eax eax +
jmp loc_100A76E  +
cmp edi [esi] +
jz loc_100A780  +
mov esi [esi+0Ch] +
test esi esi +
jnz loc_100A754  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
mov eax esi +
jmp loc_100A779  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
xor ebx ebx +
push edi  +
mov edi [ebp+arg_0] +
cmp [ebp+arg_10] ebx +
jz loc_100A7E2  +
push [ebp+arg_4]  +
push dword ptr [edi]  +
call sub_100A6BE  +
mov [ebp+arg_10] eax +
cmp eax ebx +
jz loc_100A7E2  +
push [ebp+arg_4]  +
mov esi [ebp+arg_14] +
push [ebp+arg_C]  +
push offset aSS  +
push offset a1AlreadyExists  +
push esi  +
call sub_1009022  +
mov eax [ebp+arg_10] +
mov dword ptr [esi+210h] 101h +
mov [esi+214h] eax +
add esp 14h +
xor eax eax +
jmp loc_100A86D  +
push 18h  +
call ds:malloc  +
mov esi eax +
pop ecx  +
cmp esi ebx +
jz loc_100A813  +
mov [esi] ebx +
mov [esi+4] ebx +
cmp [ebp+arg_4] ebx +
jz loc_100A836  +
push [ebp+arg_4]  +
call ds:_strdup  +
pop ecx  +
mov [esi] eax +
cmp eax ebx +
jnz loc_100A836  +
push esi  +
call ds:free  +
pop ecx  +
mov eax [ebp+arg_14] +
cmp [eax+200h] ebx +
jnz loc_100A7DB  +
push [ebp+arg_4]  +
push [ebp+arg_C]  +
push offset aSS  +
push offset aOutOfMemoryAdd  +
push eax  +
call sub_1009022  +
jmp loc_100A7D8  +
mov eax [ebp+arg_8] +
mov [esi+4] eax +
mov [esi+8] ebx +
mov [esi+0Ch] ebx +
lea eax [edi+4] +
mov ecx [eax] +
mov [esi+10h] ecx +
cmp [edi] ebx +
jnz loc_100A852  +
mov [edi] esi +
jmp loc_100A857  +
mov ecx [eax] +
mov [ecx+0Ch] esi +
mov [eax] esi +
mov [esi+14h] edi +
inc dword ptr [edi+10h]  +
cmp [edi+14h] ebx +
jz loc_100A86B  +
push esi  +
push edi  +
call sub_100A5A2  +
mov eax esi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
mov edi [ebp+arg_4] +
test edi edi +
jnz loc_100A88E  +
xor eax eax +
inc eax  +
jmp loc_100A924  +
mov eax [ebp+arg_0] +
push ebx  +
test eax eax +
jz loc_100A89A  +
mov ebx [eax] +
jmp loc_100A89C  +
xor ebx ebx +
push esi  +
mov esi [edi] +
jmp loc_100A91B  +
test ebx ebx +
jnz loc_100A8C1  +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
push dword ptr [edi+0Ch]  +
push dword ptr [edi+8]  +
call sub_100A4C9  +
mov ebx eax +
test ebx ebx +
jz loc_100A933  +
mov eax [ebp+arg_0] +
mov [eax] ebx +
push dword ptr [esi]  +
push dword ptr [ebx]  +
call sub_100A6BE  +
test eax eax +
jnz loc_100A918  +
cmp [ebp+arg_8] eax +
jz loc_100A8F9  +
push dword ptr [esi+4]  +
call [ebp+arg_8]  +
mov edi eax +
test edi edi +
jnz loc_100A8FC  +
push [ebp+arg_C]  +
push offset aS_1  +
push offset aOutOfMemoryD_1  +
push [ebp+arg_10]  +
call sub_1009022  +
add esp 10h +
jmp loc_100A933  +
mov edi [esi+4] +
push [ebp+arg_10]  +
mov eax [ebp+arg_0] +
push 0  +
push [ebp+arg_C]  +
push edi  +
push dword ptr [esi]  +
push dword ptr [eax]  +
call sub_100A789  +
test eax eax +
jz loc_100A929  +
mov edi [ebp+arg_4] +
mov esi [esi+0Ch] +
test esi esi +
jnz loc_100A8A1  +
xor eax eax +
inc eax  +
pop esi  +
pop ebx  +
pop edi  +
pop ebp  +
retn 14h  +
mov ebx [ebx+0Ch] +
test ebx ebx +
jz loc_100A933  +
push edi  +
call ebx  +
xor eax eax +
jmp loc_100A922  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
mov eax [ebp+arg_0] +
push dword ptr [eax]  +
call sub_100A6BE  +
test eax eax +
jnz loc_100A96F  +
push [ebp+arg_4]  +
push [ebp+arg_8]  +
push offset aSS  +
push offset aUndefined12  +
push [ebp+arg_C]  +
call sub_1009022  +
add esp 14h +
xor eax eax +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
test esi esi +
jnz loc_100A989  +
xor eax eax +
jmp loc_100A99F  +
push [ebp+arg_4]  +
push dword ptr [esi]  +
call sub_100A6BE  +
test eax eax +
jz loc_100A99C  +
mov eax [eax+4] +
jmp loc_100A99F  +
mov eax [esi+8] +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push [ebp+arg_8]  +
mov esi eax +
push [ebp+arg_4]  +
xor ebx ebx +
dec esi  +
push esi  +
push edi  +
call ds:_vsnprintf  +
add esp 10h +
test eax eax +
jl loc_100A9D5  +
cmp eax esi +
ja loc_100A9D5  +
jnz loc_100A9DF  +
mov [esi+edi] bl +
jmp loc_100A9DD  +
mov [esi+edi] bl +
mov ebx 8007007Ah +
mov eax esi +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_100A9E8  +
mov [ecx] eax +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
dec eax  +
jz loc_100AA14  +
dec eax  +
jz loc_100AA0F  +
dec eax  +
jz loc_100AA0A  +
xor eax eax +
jmp loc_100AA3F  +
push 2  +
pop eax  +
jmp loc_100AA16  +
xor eax eax +
inc eax  +
jmp loc_100AA16  +
xor eax eax +
push [ebp+arg_C]  +
mov ecx [ebp+arg_0] +
push dword ptr [ecx+eax*4]  +
call sub_1009257  +
push [ebp+arg_8]  +
push offset aS  +
push eax  +
call ds:fprintf  +
xor ecx ecx +
add esp 0Ch +
test eax eax +
setnle cl  +
mov eax ecx +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
xor esi esi +
mov eax [ebp+arg_0] +
mov eax [eax+esi*4] +
test eax eax +
jz loc_100AA67  +
push [ebp+arg_4]  +
push eax  +
call sub_1009292  +
test eax eax +
jz loc_100AA75  +
inc esi  +
cmp esi 3 +
jl loc_100AA50  +
xor eax eax +
inc eax  +
pop esi  +
pop ebp  +
retn 8  +
xor eax eax +
jmp loc_100AA70  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 44h +
mov eax dword_1016A90 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_4] +
mov ecx [ebp+arg_10] +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov edi [ebp+arg_20] +
mov [ebp+var_2C] eax +
mov eax [ebp+arg_8] +
mov [ebp+var_30] ecx +
mov ecx [ebp+arg_14] +
mov [ebp+var_34] eax +
mov eax [ebp+arg_C] +
mov [ebp+var_40] ecx +
mov ecx [ebp+arg_18] +
push edi  +
push eax  +
push dword ptr [esi+8]  +
mov [ebp+var_44] ecx +
mov ecx [ebp+arg_1C] +
mov [ebp+var_3C] eax +
mov [ebp+var_38] ecx +
call sub_100D5E6  +
test eax eax +
jnz loc_100AAD6  +
inc eax  +
jmp loc_100AB79  +
push ebx  +
push eax  +
call sub_100A540  +
mov ecx eax +
lea ebx [ecx+1] +
mov dl [ecx] +
inc ecx  +
test dl dl +
jnz loc_100AAE2  +
sub ecx ebx +
jz loc_100AB75  +
mov ecx [esi+70h] +
mov [ebp+var_28] 1 +
test eax eax +
jz loc_100AB75  +
lea ebx [ecx+0Ch] +
push [ebp+var_38]  +
push [ebp+var_44]  +
push [ebp+var_40]  +
push offset aSSS  +
push eax  +
push 200h  +
push ebx  +
call sub_100CC3F  +
push ebx  +
push offset aS_3  +
push [ebp+var_2C]  +
call ds:fprintf  +
add esp 28h +
test eax eax +
jl loc_100AB89  +
push edi  +
push offset aInfHeaderVaria  +
push [ebp+var_28]  +
lea eax [ebp+var_24] +
push [ebp+var_30]  +
push 20h  +
push eax  +
call sub_100CCCC  +
test eax eax +
jz loc_100ABA2  +
push edi  +
lea eax [ebp+var_24] +
push eax  +
push dword ptr [esi+8]  +
call sub_100D5E6  +
test eax eax +
jz loc_100AB69  +
push eax  +
call sub_100A540  +
inc [ebp+var_28]  +
jmp loc_100AB71  +
push edi  +
call sub_1009052  +
xor eax eax +
test eax eax +
jnz loc_100AB02  +
xor eax eax +
inc eax  +
pop ebx  +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_100DC5B  +
leave   +
retn 24h  +
push [ebp+var_34]  +
push [ebp+var_3C]  +
push offset aSS  +
push offset aWriteOf1Failed  +
push edi  +
call sub_1009022  +
add esp 14h +
xor eax eax +
jmp loc_100AB78  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 23Ch +
mov eax dword_1016A90 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_8] +
push ebx  +
mov ebx [ebp+arg_4] +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
lea ecx [ebp+var_23C] +
push ecx  +
mov edi offset word_1001732 +
push edi  +
push [ebp+arg_C]  +
push eax  +
push 20h  +
lea eax [ebp+var_24] +
push eax  +
call sub_100CCCC  +
test eax eax +
jz loc_100AC03  +
lea eax [ebp+var_23C] +
push eax  +
lea eax [ebp+var_24] +
push eax  +
push dword ptr [esi+8]  +
call sub_100D5E6  +
test eax eax +
jnz loc_100AC27  +
lea eax [ebp+var_23C] +
push eax  +
call sub_1009052  +
lea eax [ebp+var_23C] +
push eax  +
push ebx  +
push dword ptr [esi+8]  +
call sub_100D5E6  +
test eax eax +
jnz loc_100AC27  +
mov eax edi +
jmp loc_100AC2D  +
push eax  +
call sub_100A540  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100DC5B  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 23Ch +
mov eax dword_1016A90 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
and [ebp+var_220] 0 +
mov [ebp+var_23C] eax +
mov eax [ebp+arg_4] +
push ebx  +
mov ebx [ebp+arg_8] +
mov [ebp+var_234] eax +
mov eax [ebp+arg_C] +
push esi  +
push edi  +
mov edi [ebp+arg_10] +
mov [ebp+var_228] eax +
lea eax [ebp+var_21C] +
push eax  +
push ebx  +
mov [ebp+var_238] edi +
call sub_100926A  +
mov [ebp+var_22C] eax +
lea eax [ebp+var_21C] +
push eax  +
push ebx  +
call sub_100927E  +
mov esi 800h +
push esi  +
mov [ebp+var_230] eax +
call ds:malloc  +
pop ecx  +
mov [ebp+var_224] eax +
test eax eax +
jnz loc_100ACF2  +
push [ebp+var_234]  +
push [ebp+var_230]  +
push [ebp+var_22C]  +
push offset aSSS  +
push offset aOutOfMemoryCop  +
push edi  +
call sub_1009022  +
add esp 18h +
xor eax eax +
jmp loc_100ADB7  +
push edi  +
push [ebp+var_228]  +
push ebx  +
call sub_10092D5  +
test eax eax +
jz loc_100AE10  +
push edi  +
push ebx  +
call sub_1009257  +
mov [ebp+var_220] eax +
test eax eax +
jz loc_100AE10  +
push eax  +
call ds:feof  +
pop ecx  +
test eax eax +
jnz loc_100ADA0  +
mov edi ds:ferror +
push [ebp+var_220]  +
push esi  +
push 1  +
push [ebp+var_224]  +
call ds:fread  +
push [ebp+var_220]  +
mov [ebp+var_228] eax +
call edi  +
add esp 14h +
test eax eax +
jnz loc_100ADC8  +
cmp [ebp+var_228] eax +
jle loc_100AD89  +
push [ebp+var_23C]  +
push [ebp+var_228]  +
push 1  +
push [ebp+var_224]  +
call ds:fwrite  +
push [ebp+var_23C]  +
call edi  +
add esp 14h +
test eax eax +
jnz loc_100ADE6  +
push [ebp+var_220]  +
call ds:feof  +
pop ecx  +
test eax eax +
jz loc_100AD2E  +
mov edi [ebp+var_238] +
push edi  +
push ebx  +
call sub_1009292  +
push [ebp+var_224]  +
call ds:free  +
xor eax eax +
pop ecx  +
inc eax  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100DC5B  +
leave   +
retn 14h  +
push [ebp+var_234]  +
push [ebp+var_230]  +
push [ebp+var_22C]  +
push offset aSSS  +
push offset aReadFailedCopy  +
jmp loc_100AE02  +
push [ebp+var_234]  +
push [ebp+var_230]  +
push [ebp+var_22C]  +
push offset aSSS  +
push offset aWriteFailedCop  +
push [ebp+var_238]  +
call sub_1009022  +
add esp 18h +
push [ebp+var_224]  +
call ds:free  +
cmp [ebp+var_220] 0 +
pop ecx  +
jz loc_100ACEB  +
push [ebp+var_220]  +
call ds:fclose  +
pop ecx  +
jmp loc_100ACEB  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+8] +
test esi esi +
jz loc_100AE7F  +
mov eax [esi+4] +
push edi  +
mov edi ds:free +
test eax eax +
jz loc_100AE60  +
push eax  +
call edi  +
pop ecx  +
mov eax [esi+24h] +
test eax eax +
jz loc_100AE6D  +
push eax  +
call sub_100A679  +
mov eax [esi+28h] +
test eax eax +
jz loc_100AE7A  +
push eax  +
call sub_100A679  +
push esi  +
call edi  +
pop ecx  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
mov edi [ebp+8] +
test edi edi +
jz loc_100AEAD  +
mov eax [edi+4] +
push esi  +
mov esi ds:free +
test eax eax +
jz loc_100AEA8  +
push eax  +
call esi  +
pop ecx  +
push edi  +
call esi  +
pop ecx  +
pop esi  +
pop edi  +
pop ebp  +
retn 4  +
***
push ebp  +
mov ebp esp +
push dword ptr [ebp+18h]  +
push dword ptr [ebp+10h]  +
call sub_10047B9  +
xor ecx ecx +
cmp eax 0FFFFFFFFh +
setnz cl  +
mov eax ecx +
pop ebp  +
retn 14h  +
***
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+10h] +
cmp byte ptr [edi] 0 +
mov esi edi +
jz loc_100AF00  +
movzx eax byte ptr [esi] +
push eax  +
call ds:isdigit  +
pop ecx  +
test eax eax +
jz loc_100AF00  +
inc esi  +
cmp byte ptr [esi] 0 +
jnz loc_100AEEB  +
cmp byte ptr [esi] 0 +
jz loc_100AF22  +
push edi  +
push dword ptr [ebp+0Ch]  +
push offset aSS  +
push offset aValueOfParamte  +
push dword ptr [ebp+18h]  +
call sub_1009022  +
add esp 14h +
xor eax eax +
jmp loc_100AF25  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_8] +
cmp byte ptr [edi] 0 +
mov esi edi +
jz loc_100AF56  +
movzx eax byte ptr [esi] +
push eax  +
call ds:isdigit  +
pop ecx  +
test eax eax +
jz loc_100AF56  +
inc esi  +
cmp byte ptr [esi] 0 +
jnz loc_100AF41  +
cmp byte ptr [esi] 0 +
push edi  +
jz loc_100AF6B  +
push [ebp+arg_4]  +
push offset aSS  +
push offset aValueOfParamte  +
jmp loc_100AF91  +
call ds:atol  +
add eax 8000h +
pop ecx  +
cmp eax 0FFFFh +
ja loc_100AF83  +
xor eax eax +
inc eax  +
jmp loc_100AF9E  +
push edi  +
push [ebp+arg_4]  +
push offset aSS  +
push offset aValueOfParam_0  +
push [ebp+arg_10]  +
call sub_1009022  +
add esp 14h +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
movzx eax [ebp+arg_8] +
mov ecx eax +
mov edx eax +
shr ecx 5 +
shr eax 9 +
and edx 1Fh +
and ecx 0Fh +
add eax 7BCh +
cmp [ebp+arg_C] 0 +
jz loc_100B010  +
push esi  +
mov esi 7D0h +
cmp eax esi +
jge loc_100AFE9  +
sub eax 76Ch +
jmp loc_100AFF2  +
cmp eax 820h +
jge loc_100AFF2  +
sub eax esi +
push eax  +
push edx  +
push ecx  +
push offset a02d02d02d  +
push offset a123_0  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_100CC3F  +
add esp 1Ch +
pop esi  +
jmp loc_100B02B  +
push edx  +
push ecx  +
push eax  +
push offset a04d02d02d  +
push offset a123  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_100CC3F  +
add esp 1Ch +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov eax edi +
lea edx [eax+1] +
mov cl [eax] +
inc eax  +
test cl cl +
jnz loc_100B047  +
sub eax edx +
cmp eax 5 +
jb loc_100B19E  +
cmp byte ptr [edi+2] 2Fh +
jnz loc_100B065  +
mov [ebp+var_1] 2Fh +
jmp loc_100B073  +
cmp byte ptr [edi+4] 2Dh +
jnz loc_100B19E  +
mov [ebp+var_1] 2Dh +
mov esi ds:atoi +
push edi  +
call esi  +
movsx ebx [ebp+var_1] +
push ebx  +
push edi  +
mov edi ds:strchr +
mov [ebp+var_8] eax +
call edi  +
add esp 0Ch +
test eax eax +
jnz loc_100B0B2  +
push [ebp+arg_0]  +
push ebx  +
push offset aCS  +
push offset aMissingSeparat  +
push [ebp+arg_4]  +
call sub_1009022  +
add esp 14h +
jmp loc_100B1B4  +
inc eax  +
push eax  +
mov [ebp+var_10] eax +
call esi  +
push ebx  +
push [ebp+var_10]  +
mov [ebp+var_C] eax +
call edi  +
add esp 0Ch +
test eax eax +
jz loc_100B094  +
inc eax  +
push eax  +
call esi  +
cmp [ebp+var_1] 2Dh +
pop ecx  +
mov esi eax +
jnz loc_100B0E2  +
mov eax [ebp+var_C] +
mov edi esi +
mov esi [ebp+var_8] +
mov ebx eax +
jmp loc_100B0E8  +
mov ebx [ebp+var_8] +
mov edi [ebp+var_C] +
lea eax [edi-1] +
cmp eax 1Eh +
ja loc_100B18B  +
cmp ebx 2 +
jnz loc_100B102  +
cmp edi 1Dh +
jg loc_100B18B  +
lea eax [ebx-1] +
cmp eax 0Bh +
ja loc_100B178  +
cmp esi 64h +
jge loc_100B122  +
cmp esi 50h +
jge loc_100B11C  +
add esi 7D0h +
jmp loc_100B122  +
add esi 76Ch +
mov eax 7BCh +
cmp esi eax +
jge loc_100B147  +
push [ebp+arg_0]  +
push eax  +
push esi  +
push offset aDDS  +
push offset aYear1LowerThan  +
push [ebp+arg_4]  +
call sub_1009022  +
add esp 18h +
jmp loc_100B1B4  +
mov eax 83Bh +
cmp esi eax +
jle loc_100B161  +
push [ebp+arg_0]  +
push eax  +
push esi  +
push offset aDDS  +
push offset aYear1HigherTha  +
jmp loc_100B13A  +
push [ebp+arg_4]  +
call sub_1009052  +
lea eax [esi-3Ch] +
shl eax 4 +
or eax ebx +
shl eax 5 +
or eax edi +
jmp loc_100B1B6  +
push [ebp+arg_0]  +
push edi  +
push offset aDS  +
push offset aBadMonth1InDat  +
jmp loc_100B0A2  +
push [ebp+arg_0]  +
push edi  +
push offset aDS  +
push offset aBadDay1InDate2  +
jmp loc_100B0A2  +
push edi  +
push offset aS_1  +
push offset aBadDateFormat1  +
push [ebp+arg_4]  +
call sub_1009022  +
add esp 10h +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
movzx eax [ebp+arg_8] +
mov ecx eax +
mov edx eax +
shr eax 0Bh +
and ecx 1Fh +
shr edx 5 +
push esi  +
mov esi eax +
add ecx ecx +
and edx 3Fh +
cmp esi 0Ch +
jl loc_100B1EC  +
mov al 70h +
sub esi 0Ch +
jmp loc_100B1EE  +
mov al 61h +
test esi esi +
jnz loc_100B1F5  +
push 0Ch  +
pop esi  +
movsx eax al +
push eax  +
push ecx  +
push edx  +
push esi  +
push offset a02d02d02dC  +
push offset a1234  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_100CC3F  +
add esp 20h +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
mov esi ds:atoi +
push edi  +
push [ebp+arg_0]  +
call esi  +
mov edi ds:strchr +
push 3Ah  +
push [ebp+arg_0]  +
mov [ebp+var_4] eax +
call edi  +
mov ebx eax +
add esp 0Ch +
test ebx ebx +
jnz loc_100B260  +
push [ebp+arg_0]  +
push 3Ah  +
push offset aCS  +
push offset aMissingSepar_0  +
jmp loc_100B349  +
inc ebx  +
push ebx  +
call esi  +
push 3Ah  +
push ebx  +
mov [ebp+var_8] eax +
call edi  +
mov edi eax +
add esp 0Ch +
test edi edi +
jz loc_100B24C  +
inc edi  +
push edi  +
call esi  +
mov esi eax +
movsx eax byte ptr [edi+2] +
push eax  +
call ds:tolower  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_100B2C6  +
cmp eax 61h +
jz loc_100B2A9  +
cmp eax 70h +
jz loc_100B2A9  +
push [ebp+arg_0]  +
push eax  +
push offset aCS  +
push offset aBadAmPmCharact  +
jmp loc_100B349  +
mov ecx [ebp+var_4] +
lea edx [ecx-1] +
cmp edx 0Bh +
ja loc_100B2EB  +
cmp ecx 0Ch +
jnz loc_100B2BD  +
and [ebp+var_4] 0 +
cmp eax 70h +
jnz loc_100B2C6  +
add [ebp+var_4] 0Ch +
cmp esi 3Bh +
ja loc_100B33B  +
mov eax esi +
and eax 80000001h +
jns loc_100B2D9  +
dec eax  +
or eax 0FFFFFFFEh +
inc eax  +
jz loc_100B2FB  +
push [ebp+arg_0]  +
push esi  +
push offset aDS  +
push offset aOddSecond1InTi  +
jmp loc_100B349  +
push [ebp+arg_0]  +
push ecx  +
push offset aDS  +
push offset aBadHour1InTime  +
jmp loc_100B349  +
cmp [ebp+var_8] 3Bh +
ja loc_100B329  +
cmp [ebp+var_4] 17h +
ja loc_100B321  +
push [ebp+arg_4]  +
call sub_1009052  +
mov eax [ebp+var_4] +
shl eax 6 +
or eax [ebp+var_8] +
sar esi 1 +
shl eax 5 +
or eax esi +
jmp loc_100B356  +
push [ebp+arg_0]  +
push [ebp+var_4]  +
jmp loc_100B2EF  +
push [ebp+arg_0]  +
push [ebp+var_8]  +
push offset aDS  +
push offset aBadMinute1InTi  +
jmp loc_100B349  +
push [ebp+arg_0]  +
push esi  +
push offset aDS  +
push offset aBadSecond1InTi  +
push [ebp+arg_4]  +
call sub_1009022  +
add esp 14h +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_4] 5 +
mov ecx [ebp+arg_0] +
mov eax ecx +
jge loc_100B377  +
or eax 0FFFFFFFFh +
jmp loc_100B3A5  +
mov dl [ebp+arg_8] +
test dl 20h +
jz loc_100B385  +
mov byte ptr [ecx] 41h +
lea eax [ecx+1] +
test dl 2 +
jz loc_100B38E  +
mov byte ptr [eax] 48h +
inc eax  +
test dl 1 +
jz loc_100B397  +
mov byte ptr [eax] 52h +
inc eax  +
test dl 4 +
jz loc_100B3A0  +
mov byte ptr [eax] 53h +
inc eax  +
mov byte ptr [eax] 0 +
sub eax ecx +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
xor ebx ebx +
mov esi edi +
cmp [edi] bl +
jz loc_100B3F6  +
movsx eax byte ptr [esi] +
push eax  +
call ds:toupper  +
sub eax 41h +
pop ecx  +
jz loc_100B3ED  +
sub eax 7 +
jz loc_100B3E8  +
sub eax 0Ah +
jz loc_100B3E3  +
dec eax  +
jnz loc_100B400  +
or ebx 4 +
jmp loc_100B3F0  +
or ebx 1 +
jmp loc_100B3F0  +
or ebx 2 +
jmp loc_100B3F0  +
or ebx 20h +
inc esi  +
cmp byte ptr [esi] 0 +
jnz loc_100B3C1  +
mov ax bx +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
movsx eax byte ptr [esi] +
push edi  +
push eax  +
push offset aCS  +
push offset aBadCharacter1I  +
push [ebp+arg_4]  +
call sub_1009022  +
add esp 14h +
xor eax eax +
jmp loc_100B3F9  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
cmp [ebp+arg_4] eax +
jz loc_100B438  +
cmp [ebp+arg_4] 7FFFFFFFh +
jbe loc_100B43D  +
mov eax 80070057h +
test eax eax +
jl loc_100B457  +
push edi  +
mov edi [ebp+arg_0] +
lea eax [ebp+arg_C] +
push eax  +
push [ebp+arg_8]  +
mov eax [ebp+arg_4] +
push 0  +
call sub_100A9A9  +
pop edi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
push [ebp+arg_4]  +
mov edi [ebp+arg_0] +
push edi  +
call sub_100AA48  +
test eax eax +
jz loc_100B4A1  +
push esi  +
xor esi esi +
mov eax [edi+esi*4] +
test eax eax +
jz loc_100B48F  +
push [ebp+arg_4]  +
push eax  +
call sub_100931E  +
test eax eax +
jz loc_100B4A6  +
and dword ptr [edi+esi*4] 0 +
inc esi  +
cmp esi 3 +
jl loc_100B477  +
push edi  +
call ds:free  +
xor eax eax +
pop ecx  +
inc eax  +
pop esi  +
pop edi  +
pop ebp  +
retn 8  +
xor eax eax +
jmp loc_100B4A0  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 50h +
mov eax dword_1016A90 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_8] +
push ebx  +
mov ebx [ebp+arg_4] +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov edi [ebp+arg_10] +
mov [ebp+var_50] eax +
mov eax [ebp+arg_C] +
mov [ebp+var_48] eax +
mov eax [esi+70h] +
push edi  +
push eax  +
mov [ebp+var_44] ebx +
mov [ebp+var_4C] eax +
call sub_100AA48  +
test eax eax +
jnz loc_100B4F4  +
xor eax eax +
jmp loc_100B643  +
push offset aWb  +
push ebx  +
call ds:fopen  +
pop ecx  +
pop ecx  +
mov [ebp+var_3C] eax +
test eax eax +
jnz loc_100B51F  +
push ebx  +
push offset aS_1  +
push offset aCannotCreateIn  +
push edi  +
call sub_1009022  +
add esp 10h +
jmp loc_100B4ED  +
push edi  +
push offset aInfcommentstri  +
push dword ptr [esi+8]  +
call sub_100D5E6  +
test eax eax +
jnz loc_100B53A  +
mov [ebp+var_40] offset asc_1001638 +
jmp loc_100B543  +
push eax  +
call sub_100A540  +
mov [ebp+var_40] eax +
push [ebp+var_50]  +
call ds:ctime  +
pop ecx  +
push eax  +
push 32h  +
lea eax [ebp+var_38] +
push eax  +
call sub_1004ACF  +
test eax eax +
jl loc_100B629  +
lea eax [ebp+var_38] +
lea ecx [eax+1] +
mov dl [eax] +
inc eax  +
test dl dl +
jnz loc_100B567  +
push edi  +
push [ebp+var_48]  +
sub eax ecx +
mov byte ptr [ebp+eax+var_3C+3] dl +
lea eax [ebp+var_38] +
push eax  +
push [ebp+var_40]  +
push offset aInfheader_0  +
push offset aInfheader  +
push ebx  +
push [ebp+var_3C]  +
push esi  +
call sub_100AA7E  +
test eax eax +
jz loc_100B629  +
push edi  +
push offset aInfsectionorde  +
push dword ptr [esi+8]  +
call sub_100D5E6  +
test eax eax +
jnz loc_100B5D2  +
mov ebx offset aDcf +
movsx eax byte ptr [ebx] +
push eax  +
call ds:toupper  +
sub eax 43h +
pop ecx  +
jz loc_100B5E0  +
dec eax  +
jz loc_100B5DC  +
dec eax  +
dec eax  +
jnz loc_100B4ED  +
push 2  +
pop eax  +
jmp loc_100B5E3  +
push eax  +
call sub_100A540  +
mov ebx eax +
jmp loc_100B5FF  +
xor eax eax +
jmp loc_100B5E3  +
xor eax eax +
inc eax  +
mov ecx [ebp+var_4C] +
push edi  +
push offset aRb  +
push dword ptr [ecx+eax*4]  +
push [ebp+var_44]  +
push [ebp+var_3C]  +
call sub_100AC43  +
test eax eax +
jz loc_100B629  +
inc ebx  +
cmp byte ptr [ebx] 0 +
jnz loc_100B5B2  +
push edi  +
push [ebp+var_48]  +
lea eax [ebp+var_38] +
push eax  +
push [ebp+var_40]  +
push offset aInffooter_0  +
push offset aInffooter  +
push [ebp+var_44]  +
push [ebp+var_3C]  +
push esi  +
call sub_100AA7E  +
test eax eax +
jnz loc_100B636  +
push [ebp+var_3C]  +
call ds:fclose  +
xor eax eax +
jmp loc_100B642  +
push [ebp+var_3C]  +
call ds:fclose  +
xor eax eax +
inc eax  +
pop ecx  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100DC5B  +
leave   +
retn 14h  +
***
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+18h] +
push esi  +
push dword ptr [ebp+10h]  +
call sub_100B3AE  +
cmp dword ptr [esi+200h] 0 +
movzx edx ax +
pop esi  +
jz loc_100B67C  +
xor eax eax +
jmp loc_100B693  +
mov ecx [ebp+14h] +
mov eax [ecx+18h] +
test al 10h +
jnz loc_100B690  +
or eax 10h +
mov [ecx+20h] dx +
mov [ecx+18h] eax +
xor eax eax +
inc eax  +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_10] +
push esi  +
push [ebp+arg_8]  +
call sub_100B034  +
cmp dword ptr [esi+200h] 0 +
movzx edx ax +
pop esi  +
jz loc_100B6BF  +
xor eax eax +
jmp loc_100B6D6  +
mov ecx [ebp+arg_C] +
mov eax [ecx+18h] +
test al 4 +
jnz loc_100B6D3  +
or eax 4 +
mov [ecx+1Ch] dx +
mov [ecx+18h] eax +
xor eax eax +
inc eax  +
pop ebp  +
retn 14h  +
***
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+18h] +
push esi  +
push dword ptr [ebp+10h]  +
call sub_100B21E  +
cmp dword ptr [esi+200h] 0 +
movzx edx ax +
pop esi  +
jz loc_100B702  +
xor eax eax +
jmp loc_100B719  +
mov ecx [ebp+14h] +
mov eax [ecx+18h] +
test al 8 +
jnz loc_100B716  +
or eax 8 +
mov [ecx+1Eh] dx +
mov [ecx+18h] eax +
xor eax eax +
inc eax  +
pop ebp  +
retn 14h  +
***
push ebp  +
mov ebp esp +
mov eax [ebp+18h] +
push esi  +
mov esi [eax+0Ch] +
push dword ptr [esi]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
call sub_1004ACF  +
test eax eax +
jge loc_100B75E  +
push dword ptr [esi]  +
push dword ptr [ebp+14h]  +
push offset aSS  +
push offset aBufferOverfl_1  +
push dword ptr [ebp+1Ch]  +
call sub_1009022  +
add esp 14h +
or eax 0FFFFFFFFh +
jmp loc_100B76D  +
mov eax [ebp+0Ch] +
lea ecx [eax+1] +
mov dl [eax] +
inc eax  +
test dl dl +
jnz loc_100B764  +
sub eax ecx +
pop esi  +
pop ebp  +
retn 18h  +
***
push ebp  +
mov ebp esp +
mov eax [ebp+18h] +
mov ecx [eax+8] +
push esi  +
cmp ecx offset off_1016A70 +
jz loc_100B793  +
cmp ecx offset off_1016A58 +
jnz loc_100B79A  +
mov eax [eax+0Ch] +
mov esi [eax] +
jmp loc_100B7AB  +
cmp ecx offset off_10169F0 +
jnz loc_100B7DC  +
mov eax [eax+0Ch] +
mov eax [eax+4] +
mov esi [eax+0Ch] +
push esi  +
push offset aD  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
call sub_100B423  +
add esp 10h +
test eax eax +
jge loc_100B7E4  +
push esi  +
push dword ptr [ebp+14h]  +
push offset aSD  +
push offset aBufferOverfl_1  +
push dword ptr [ebp+1Ch]  +
call sub_1009022  +
add esp 14h +
or eax 0FFFFFFFFh +
pop esi  +
pop ebp  +
retn 18h  +
***
mov eax [ebp+0Ch] +
lea ecx [eax+1] +
mov dl [eax] +
inc eax  +
test dl dl +
jnz loc_100B7EA  +
sub eax ecx +
jmp loc_100B7DF  +
***
push ebp  +
mov ebp esp +
mov eax [ebp+18h] +
mov ecx [eax+8] +
push esi  +
cmp ecx offset off_1016A70 +
jnz loc_100B816  +
mov eax [eax+0Ch] +
mov esi [eax+4] +
jmp loc_100B827  +
cmp ecx offset off_10169F0 +
jnz loc_100B85B  +
mov eax [eax+0Ch] +
mov eax [eax+4] +
mov esi [eax+10h] +
push esi  +
push offset aD  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
call sub_100B423  +
add esp 10h +
test eax eax +
jge loc_100B84A  +
push esi  +
push dword ptr [ebp+14h]  +
push offset aSD  +
jmp loc_100B868  +
mov eax [ebp+0Ch] +
lea ecx [eax+1] +
mov dl [eax] +
inc eax  +
test dl dl +
jnz loc_100B850  +
sub eax ecx +
jmp loc_100B87B  +
push offset aNull  +
push dword ptr [ebp+14h]  +
push offset aSS  +
push offset aBufferOverfl_1  +
push dword ptr [ebp+1Ch]  +
call sub_1009022  +
add esp 14h +
or eax 0FFFFFFFFh +
pop esi  +
pop ebp  +
retn 18h  +
***
push ebp  +
mov ebp esp +
mov eax [ebp+18h] +
mov eax [eax+0Ch] +
push esi  +
mov esi [eax+4] +
push dword ptr [esi+14h]  +
push offset aD  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
call sub_100B423  +
add esp 10h +
test eax eax +
jge loc_100B8CE  +
push dword ptr [esi+14h]  +
push dword ptr [ebp+14h]  +
push offset aSD  +
push offset aBufferOverfl_1  +
push dword ptr [ebp+1Ch]  +
call sub_1009022  +
add esp 14h +
or eax 0FFFFFFFFh +
jmp loc_100B8DD  +
mov eax [ebp+0Ch] +
lea ecx [eax+1] +
mov dl [eax] +
inc eax  +
test dl dl +
jnz loc_100B8D4  +
sub eax ecx +
pop esi  +
pop ebp  +
retn 18h  +
***
push ebp  +
mov ebp esp +
mov eax [ebp+18h] +
mov eax [eax+0Ch] +
push esi  +
mov esi [eax+4] +
push dword ptr [esi]  +
push offset aLd  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
call sub_100B423  +
add esp 10h +
test eax eax +
jge loc_100B92E  +
push dword ptr [esi]  +
push dword ptr [ebp+14h]  +
push offset aSD  +
push offset aBufferOverfl_1  +
push dword ptr [ebp+1Ch]  +
call sub_1009022  +
add esp 14h +
or eax 0FFFFFFFFh +
jmp loc_100B93D  +
mov eax [ebp+0Ch] +
lea ecx [eax+1] +
mov dl [eax] +
inc eax  +
test dl dl +
jnz loc_100B934  +
sub eax ecx +
pop esi  +
pop ebp  +
retn 18h  +
***
push ebp  +
mov ebp esp +
mov eax [ebp+18h] +
mov eax [eax+0Ch] +
mov eax [eax+4] +
movzx eax word ptr [eax+20h] +
push eax  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
call sub_100B362  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 21Ch +
mov eax dword_1016A90 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_10] +
mov eax [eax+0Ch] +
push ebx  +
mov ebx [ebp+arg_4] +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov edi [eax+4] +
lea eax [ebp+var_21C] +
push eax  +
call sub_1009052  +
lea eax [ebp+var_21C] +
push eax  +
push offset aInfdateformat  +
push dword ptr [esi+8]  +
call sub_100D5E6  +
mov esi offset aMmDdYy +
test eax eax +
jnz loc_100B9C2  +
mov eax esi +
jmp loc_100B9C8  +
push eax  +
call sub_100A540  +
push esi  +
push eax  +
call ds:_stricmp  +
pop ecx  +
neg eax  +
pop ecx  +
sbb eax eax +
inc eax  +
push eax  +
movzx eax word ptr [edi+1Ch] +
push eax  +
push [ebp+arg_8]  +
push ebx  +
call sub_100AFB4  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100DC5B  +
leave   +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_10] +
mov eax [eax+0Ch] +
mov eax [eax+4] +
movzx eax word ptr [eax+1Eh] +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
call sub_100B1C2  +
pop ebp  +
retn 18h  +
***
push ebp  +
mov ebp esp +
mov eax [ebp+18h] +
push esi  +
mov esi [eax+0Ch] +
push dword ptr [esi+8]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
call sub_1004ACF  +
test eax eax +
jge loc_100BA61  +
push dword ptr [esi+8]  +
push dword ptr [ebp+14h]  +
push offset aSS  +
push offset aBufferOverfl_1  +
push dword ptr [ebp+1Ch]  +
call sub_1009022  +
add esp 14h +
or eax 0FFFFFFFFh +
jmp loc_100BA70  +
mov eax [ebp+0Ch] +
lea ecx [eax+1] +
mov dl [eax] +
inc eax  +
test dl dl +
jnz loc_100BA67  +
sub eax ecx +
pop esi  +
pop ebp  +
retn 18h  +
***
push ebp  +
mov ebp esp +
mov eax [ebp+18h] +
push esi  +
mov esi [eax+0Ch] +
push dword ptr [esi+4]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
call sub_1004ACF  +
test eax eax +
jge loc_100BAB8  +
push dword ptr [esi+4]  +
push dword ptr [ebp+14h]  +
push offset aSS  +
push offset aBufferOverfl_1  +
push dword ptr [ebp+1Ch]  +
call sub_1009022  +
add esp 14h +
or eax 0FFFFFFFFh +
jmp loc_100BAC7  +
mov eax [ebp+0Ch] +
lea ecx [eax+1] +
mov dl [eax] +
inc eax  +
test dl dl +
jnz loc_100BABE  +
sub eax ecx +
pop esi  +
pop ebp  +
retn 18h  +
***
push ebp  +
mov ebp esp +
mov ecx [ebp+8] +
mov eax [ebp+18h] +
mov dword ptr [ecx+0A4h] 1 +
mov eax [eax+0Ch] +
mov eax [eax+4] +
cmp dword ptr [eax+30h] 0 +
jnz loc_100BAFC  +
cmp dword ptr [eax+34h] 0 +
jnz loc_100BAFC  +
xor eax eax +
jmp loc_100BB68  +
push esi  +
lea esi [ecx+1B4h] +
movzx ecx word ptr [eax+34h] +
push ecx  +
movzx ecx word ptr [eax+36h] +
push ecx  +
movzx ecx word ptr [eax+30h] +
movzx eax word ptr [eax+32h] +
push ecx  +
push eax  +
push offset aD_D_D_D  +
push 800h  +
push esi  +
call sub_1009508  +
add esp 1Ch +
push esi  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
call sub_1004ACF  +
test eax eax +
jge loc_100BB58  +
push esi  +
push dword ptr [ebp+14h]  +
push offset aSS  +
push offset aBufferOverfl_1  +
push dword ptr [ebp+1Ch]  +
call sub_1009022  +
add esp 14h +
or eax 0FFFFFFFFh +
jmp loc_100BB67  +
mov eax [ebp+0Ch] +
lea edx [eax+1] +
mov cl [eax] +
inc eax  +
test cl cl +
jnz loc_100BB5E  +
sub eax edx +
pop esi  +
pop ebp  +
retn 18h  +
***
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov dword ptr [eax+0A4h] 1 +
mov eax [ebp+18h] +
mov eax [eax+0Ch] +
push esi  +
mov esi [eax+4] +
mov eax [esi+38h] +
test eax eax +
jz loc_100BBD3  +
push eax  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
call sub_1004ACF  +
test eax eax +
jge loc_100BBC4  +
push dword ptr [esi+38h]  +
push dword ptr [ebp+14h]  +
push offset aSS  +
push offset aBufferOverfl_1  +
push dword ptr [ebp+1Ch]  +
call sub_1009022  +
add esp 14h +
or eax 0FFFFFFFFh +
jmp loc_100BBD3  +
mov eax [ebp+0Ch] +
lea edx [eax+1] +
mov cl [eax] +
inc eax  +
test cl cl +
jnz loc_100BBCA  +
sub eax edx +
pop esi  +
pop ebp  +
retn 18h  +
***
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov ecx [ebp+18h] +
push esi  +
push edi  +
push dword ptr [ebp+1Ch]  +
xor edi edi +
inc edi  +
mov [eax+0A8h] edi +
mov ecx [ecx+0Ch] +
mov esi [ecx+4] +
push offset aChecksumwidth  +
push dword ptr [eax+8]  +
call sub_100D5E6  +
test eax eax +
jnz loc_100BC1B  +
push offset a8  +
call ds:atoi  +
pop ecx  +
jmp loc_100BC21  +
push eax  +
call sub_100D527  +
mov esi [esi+2Ch] +
cmp eax 8 +
jz loc_100BC33  +
mov ecx eax +
shl ecx 2 +
shl edi cl +
dec edi  +
and esi edi +
push esi  +
push offset aLx  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
call sub_100B423  +
add esp 10h +
test eax eax +
jge loc_100BC69  +
push esi  +
push dword ptr [ebp+14h]  +
push offset aSLx  +
push offset aBufferOverfl_1  +
push dword ptr [ebp+1Ch]  +
call sub_1009022  +
add esp 14h +
or eax 0FFFFFFFFh +
jmp loc_100BC78  +
mov eax [ebp+0Ch] +
lea edx [eax+1] +
mov cl [eax] +
inc eax  +
test cl cl +
jnz loc_100BC6F  +
sub eax edx +
pop edi  +
pop esi  +
pop ebp  +
retn 18h  +
***
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov dword ptr [eax+0A4h] 1 +
mov eax [ebp+18h] +
mov eax [eax+0Ch] +
push esi  +
mov esi [eax+4] +
mov eax [esi+3Ch] +
test eax eax +
jz loc_100BCE5  +
push eax  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
call sub_1004ACF  +
test eax eax +
jge loc_100BCD6  +
push dword ptr [esi+3Ch]  +
push dword ptr [ebp+14h]  +
push offset aSS  +
push offset aBufferOverfl_1  +
push dword ptr [ebp+1Ch]  +
call sub_1009022  +
add esp 14h +
or eax 0FFFFFFFFh +
jmp loc_100BCE5  +
mov eax [ebp+0Ch] +
lea edx [eax+1] +
mov cl [eax] +
inc eax  +
test cl cl +
jnz loc_100BCDC  +
sub eax edx +
pop esi  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 23Ch +
mov eax dword_1016A90 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
mov ebx [ebp+arg_C] +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov edi [ebp+arg_4] +
push offset aInf  +
push 20h  +
lea eax [ebp+var_24] +
push eax  +
call sub_1004ACF  +
push edi  +
push 20h  +
lea eax [ebp+var_24] +
push eax  +
call sub_1004B09  +
test eax eax +
jge loc_100BD4A  +
push edi  +
push 1Fh  +
push offset aDS  +
push offset aParameterNameE  +
push ebx  +
call sub_1009022  +
add esp 14h +
xor eax eax +
jmp loc_100BD89  +
lea eax [ebp+var_23C] +
push eax  +
lea eax [ebp+var_24] +
push eax  +
push dword ptr [esi+8]  +
call sub_100D5E6  +
cmp [ebp+arg_8] 0 +
mov edi eax +
jz loc_100BD87  +
test edi edi +
jz loc_100BD87  +
cmp dword ptr [esi+10h] 0 +
jnz loc_100BD87  +
push edi  +
call sub_100A540  +
push ebx  +
push eax  +
lea eax [ebp+var_24] +
push eax  +
push dword ptr [esi+0Ch]  +
call sub_100D8F2  +
test eax eax +
jz loc_100BD46  +
mov eax edi +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100DC5B  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp off_1016954 0 +
push esi  +
mov esi offset off_1016954 +
jz loc_100BDE7  +
push [ebp+arg_8]  +
push 0  +
push dword ptr [esi]  +
push [ebp+arg_0]  +
call sub_100BCEF  +
test eax eax +
jz loc_100BDDF  +
push eax  +
call sub_100A540  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push eax  +
push dword ptr [esi]  +
push [ebp+arg_0]  +
call dword ptr [esi+4]  +
test eax eax +
jz loc_100BDEF  +
add esi 8 +
cmp dword ptr [esi] 0 +
jnz loc_100BDB3  +
xor eax eax +
inc eax  +
pop esi  +
pop ebp  +
retn 0Ch  +
xor eax eax +
jmp loc_100BDEA  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_4] 0 +
jnz loc_100BE0B  +
xor eax eax +
inc eax  +
jmp loc_100BE91  +
push ebx  +
push esi  +
push edi  +
push [ebp+arg_4]  +
call sub_100A519  +
jmp loc_100BE84  +
push [ebp+arg_4]  +
call sub_100A519  +
push [ebp+arg_4]  +
mov edi eax +
call sub_100A540  +
cmp off_1016978 0 +
mov ebx [eax] +
mov esi offset off_1016978 +
jz loc_100BE6A  +
push edi  +
push dword ptr [esi]  +
call ds:_stricmp  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_100BE51  +
add esi 8 +
cmp dword ptr [esi] 0 +
jnz loc_100BE3A  +
cmp dword ptr [esi] 0 +
jz loc_100BE6A  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push ebx  +
push edi  +
push [ebp+arg_0]  +
call dword ptr [esi+4]  +
test eax eax +
jz loc_100BEAB  +
jmp loc_100BE7C  +
push [ebp+arg_C]  +
push 0  +
push edi  +
push [ebp+arg_0]  +
call sub_100BCEF  +
test eax eax +
jz loc_100BE95  +
push [ebp+arg_4]  +
call sub_100A52C  +
mov [ebp+arg_4] eax +
test eax eax +
jnz loc_100BE18  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 10h  +
push edi  +
push offset aS_1  +
push offset aUndeclaredPara  +
push [ebp+arg_C]  +
call sub_1009022  +
add esp 10h +
xor eax eax +
jmp loc_100BE8E  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
mov eax dword_1016A90 +
xor eax ebp +
mov [ebp-4] eax +
mov eax [ebp+8] +
mov ecx [ebp+18h] +
push ebx  +
push esi  +
mov esi [ebp+14h] +
mov ebx [esi] +
push edi  +
mov [ebp-2Ch] eax +
mov eax [ebp+10h] +
push eax  +
push dword ptr [esi+4]  +
mov [ebp-20h] eax +
mov [ebp-1Ch] ecx +
xor edi edi +
call sub_100A978  +
push dword ptr [ebp-1Ch]  +
mov [ebp-28h] eax +
push 1  +
push dword ptr [ebp-20h]  +
push ebx  +
call sub_100BCEF  +
mov [ebp-24h] eax +
test eax eax +
jnz loc_100BF2C  +
mov edi [esi+8] +
mov eax [edi] +
test eax eax +
jz loc_100BF2A  +
push dword ptr [ebp-20h]  +
push eax  +
call ds:_stricmp  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_100BF25  +
add edi 8 +
mov eax [edi] +
test eax eax +
jnz loc_100BF0C  +
cmp dword ptr [edi] 0 +
jnz loc_100BF2C  +
xor edi edi +
mov eax [ebp-28h] +
test eax eax +
jnz loc_100BF6D  +
cmp [ebp-24h] eax +
jnz loc_100BF83  +
test edi edi +
jz loc_100BF53  +
push dword ptr [ebp-1Ch]  +
push esi  +
push dword ptr [ebp-20h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp-2Ch]  +
push dword ptr [esi]  +
call dword ptr [edi+4]  +
jmp loc_100C034  +
push dword ptr [ebp-20h]  +
push offset aS_1  +
push offset aUndefinedParam  +
push dword ptr [ebp-1Ch]  +
call sub_1009022  +
add esp 10h +
jmp loc_100BF77  +
cmp dword ptr [ebp-24h] 0 +
jnz loc_100BF7F  +
test edi edi +
jnz loc_100BF7F  +
or eax 0FFFFFFFFh +
jmp loc_100C034  +
mov esi [eax] +
jmp loc_100BF8D  +
push dword ptr [ebp-24h]  +
call sub_100A540  +
mov esi eax +
mov edi ds:_stricmp +
push offset aDate  +
push dword ptr [ebp-20h]  +
call edi  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_100BFF7  +
push dword ptr [ebp-1Ch]  +
push esi  +
call sub_100B034  +
push dword ptr [ebp-1Ch]  +
movzx eax ax +
push offset aInfdateformat  +
push dword ptr [ebx+8]  +
mov [ebp-28h] eax +
call sub_100D5E6  +
mov esi offset aMmDdYy +
test eax eax +
jnz loc_100BFCF  +
mov eax esi +
jmp loc_100BFD5  +
push eax  +
call sub_100A540  +
push esi  +
push eax  +
call edi  +
pop ecx  +
neg eax  +
pop ecx  +
sbb eax eax +
inc eax  +
push eax  +
push dword ptr [ebp-28h]  +
lea eax [ebp-18h] +
push 14h  +
push eax  +
call sub_100AFB4  +
cmp eax 0FFFFFFFFh +
jz loc_100BF77  +
lea esi [ebp-18h] +
push esi  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp-2Ch]  +
call sub_1004ACF  +
test eax eax +
jge loc_100C025  +
push esi  +
push dword ptr [ebp-20h]  +
push offset aSS  +
push offset aBufferOverfl_1  +
push dword ptr [ebp-1Ch]  +
call sub_1009022  +
add esp 14h +
jmp loc_100BF77  +
***
mov eax [ebp-2Ch] +
lea edx [eax+1] +
mov cl [eax] +
inc eax  +
test cl cl +
jnz loc_100C02B  +
sub eax edx +
mov ecx [ebp-4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100DC5B  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov esi [edi+70h] +
cmp dword ptr [esi] 0 +
jnz loc_100C064  +
xor eax eax +
inc eax  +
jmp loc_100C0D9  +
push ebx  +
mov ebx [ebp+arg_4] +
push ebx  +
push offset aInfdisklinefor  +
push offset aInfdisklinef_0  +
push edi  +
call sub_100ABAB  +
mov ecx [ebp+arg_8] +
push [ebp+arg_C]  +
and [ebp+var_14] 0 +
mov [ebp+var_4] ecx +
lea ecx [ebp+var_8] +
mov [ebp+var_C] ecx +
lea ecx [ebp+var_18] +
push ecx  +
push offset loc_100BEB4  +
push eax  +
mov [ebp+var_18] edi +
push 200h  +
lea edi [esi+0Ch] +
push edi  +
mov [ebp+var_8] ebx +
mov [ebp+var_10] offset off_1016A58 +
call sub_100A2D7  +
pop ebx  +
test eax eax +
jz loc_100C0D9  +
push [ebp+arg_C]  +
push dword ptr [esi]  +
call sub_1009257  +
push edi  +
push offset aS  +
push eax  +
call ds:fprintf  +
xor ecx ecx +
add esp 0Ch +
test eax eax +
setnl cl  +
mov eax ecx +
pop edi  +
pop esi  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1Ch +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov esi [edi+70h] +
cmp dword ptr [esi+4] 0 +
jnz loc_100C0FF  +
xor eax eax +
inc eax  +
jmp loc_100C17B  +
push ebx  +
mov ebx [ebp+arg_4] +
push ebx  +
push offset aInfcabinetline  +
push offset aInfcabinetli_0  +
push edi  +
call sub_100ABAB  +
mov ecx [ebp+arg_8] +
push [ebp+arg_10]  +
and [ebp+var_18] 0 +
mov [ebp+var_C] ecx +
mov ecx [ebp+arg_C] +
mov [ebp+var_4] ecx +
lea ecx [ebp+var_C] +
mov [ebp+var_10] ecx +
lea ecx [ebp+var_1C] +
push ecx  +
push offset loc_100BEB4  +
push eax  +
mov [ebp+var_1C] edi +
push 200h  +
lea edi [esi+0Ch] +
push edi  +
mov [ebp+var_8] ebx +
mov [ebp+var_14] offset off_1016A70 +
call sub_100A2D7  +
pop ebx  +
test eax eax +
jz loc_100C17B  +
push [ebp+arg_10]  +
push dword ptr [esi+4]  +
call sub_1009257  +
push edi  +
push offset aS  +
push eax  +
call ds:fprintf  +
xor ecx ecx +
add esp 0Ch +
test eax eax +
setnl cl  +
mov eax ecx +
pop edi  +
pop esi  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
push ebx  +
mov ebx [ebp+arg_0] +
push edi  +
mov edi [ebx+70h] +
cmp dword ptr [edi+8] 0 +
jnz loc_100C1A4  +
xor eax eax +
inc eax  +
jmp loc_100C265  +
push esi  +
mov esi [ebp+arg_8] +
push dword ptr [esi+14h]  +
push offset aInffilelinefor  +
push offset aInffilelinef_0  +
push ebx  +
call sub_100ABAB  +
push [ebp+arg_10]  +
mov ecx [ebp+arg_4] +
mov [ebp+var_8] ecx +
mov ecx [ebp+arg_C] +
lea edx [ebp+var_18] +
push edx  +
push offset loc_100BEB4  +
mov [ebp+var_14] ecx +
lea ecx [ebp+var_8] +
push eax  +
mov [ebp+var_C] ecx +
lea ecx [edi+0Ch] +
push 200h  +
push ecx  +
mov [ebp+var_4] esi +
mov [ebp+var_18] ebx +
mov [ebp+var_10] offset off_10169F0 +
mov [ebp+arg_0] ecx +
call sub_100A2D7  +
test eax eax +
jz loc_100C26B  +
push [ebp+arg_10]  +
push dword ptr [edi+8]  +
call sub_1009257  +
push [ebp+arg_0]  +
push offset aS  +
push eax  +
call ds:fprintf  +
add esp 0Ch +
test eax eax +
jl loc_100C26B  +
mov eax [esi+28h] +
or dword ptr [esi+18h] 1 +
test eax eax +
jz loc_100C261  +
push eax  +
call sub_100A519  +
jmp loc_100C250  +
push edi  +
call sub_100A540  +
push [ebp+arg_10]  +
push dword ptr [eax+4]  +
push dword ptr [eax]  +
push dword ptr [ebx+70h]  +
call sub_100A9F5  +
test eax eax +
jz loc_100C26B  +
push edi  +
call sub_100A52C  +
mov edi eax +
test edi edi +
jnz loc_100C230  +
push dword ptr [esi+28h]  +
call sub_100A679  +
and [esi+28h] edi +
xor eax eax +
inc eax  +
pop esi  +
pop edi  +
pop ebx  +
leave   +
retn 14h  +
xor eax eax +
jmp loc_100C264  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 70h +
mov eax [ebp+arg_0] +
and [ebp+var_2C] 0 +
push ebx  +
push esi  +
push edi  +
push [ebp+arg_4]  +
mov edi [eax+70h] +
push offset aInfdisklinef_0  +
push dword ptr [eax+8]  +
mov [ebp+var_30] eax +
call sub_100D5E6  +
test eax eax +
jnz loc_100C2A7  +
mov eax offset aDiskLabel +
jmp loc_100C2AD  +
push eax  +
call sub_100A540  +
push [ebp+arg_4]  +
lea edx [ebp+var_30] +
push edx  +
lea ecx [ebp+var_C] +
push offset loc_100BEB4  +
mov [ebp+var_24] ecx +
lea ecx [edi+0Ch] +
push eax  +
mov edi 200h +
xor esi esi +
push edi  +
inc esi  +
mov ebx offset aTest +
push ecx  +
mov [ebp+var_C] esi +
mov [ebp+var_8] ebx +
mov [ebp+var_28] offset off_1016A58 +
mov [ebp+var_4] ecx +
call sub_100A2D7  +
push [ebp+arg_4]  +
test eax eax +
jnz loc_100C31B  +
push edi  +
push [ebp+var_4]  +
call sub_1004ACF  +
push [ebp+var_4]  +
push offset aInfdisklinef_0  +
push offset aSS  +
push offset aBadFormatIn12  +
push [ebp+arg_4]  +
call sub_1009022  +
add esp 14h +
xor eax eax +
jmp loc_100C42F  +
mov eax [ebp+arg_0] +
push offset aInfcabinetli_0  +
push dword ptr [eax+8]  +
call sub_100D5E6  +
test eax eax +
jnz loc_100C336  +
mov eax offset aCabDiskCabfile +
jmp loc_100C33C  +
push eax  +
call sub_100A540  +
push [ebp+arg_4]  +
lea ecx [ebp+var_20] +
mov [ebp+var_24] ecx +
lea ecx [ebp+var_30] +
push ecx  +
push offset loc_100BEB4  +
push eax  +
push edi  +
push [ebp+var_4]  +
mov [ebp+var_1C] esi +
mov [ebp+var_20] esi +
mov [ebp+var_18] ebx +
mov [ebp+var_28] offset off_1016A70 +
call sub_100A2D7  +
push [ebp+arg_4]  +
test eax eax +
jnz loc_100C385  +
push edi  +
push [ebp+var_4]  +
call sub_1004ACF  +
push [ebp+var_4]  +
push offset aInfcabinetli_0  +
jmp loc_100C2FF  +
xor eax eax +
mov [ebp+var_54] ax +
mov [ebp+var_52] ax +
mov [ebp+var_50] ax +
mov eax [ebp+arg_0] +
push offset aInffilelinef_0  +
push dword ptr [eax+8]  +
mov [ebp+var_6C] ebx +
xor ebx ebx +
mov [ebp+var_68] esi +
mov [ebp+var_70] esi +
mov [ebp+var_64] esi +
mov [ebp+var_60] esi +
mov [ebp+var_5C] esi +
mov [ebp+var_48] ebx +
mov [ebp+var_58] ebx +
mov [ebp+var_4C] ebx +
mov [ebp+var_44] ebx +
mov [ebp+var_40] ebx +
mov [ebp+var_3C] ebx +
mov [ebp+var_38] ebx +
mov [ebp+var_34] ebx +
call sub_100D5E6  +
cmp eax ebx +
jnz loc_100C3DA  +
mov eax offset aDiskCabFileSiz +
jmp loc_100C3E0  +
push eax  +
call sub_100A540  +
push [ebp+arg_4]  +
lea ecx [ebp+var_70] +
mov [ebp+var_10] ecx +
lea ecx [ebp+var_14] +
mov [ebp+var_24] ecx +
lea ecx [ebp+var_30] +
push ecx  +
push offset loc_100BEB4  +
push eax  +
push edi  +
push [ebp+var_4]  +
mov [ebp+var_14] offset aATest +
mov [ebp+var_28] offset off_10169F0 +
call sub_100A2D7  +
test eax eax +
jnz loc_100C42D  +
push [ebp+arg_4]  +
push edi  +
push [ebp+var_4]  +
call sub_1004ACF  +
push [ebp+var_4]  +
push offset aInffilelinef_0  +
jmp loc_100C2FF  +
mov eax esi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 38h +
mov eax dword_1016A90 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
mov esi [ebp+arg_4] +
push 20Ch  +
mov [ebp+var_28] esi +
call ds:malloc  +
pop ecx  +
mov ecx eax +
mov [ebp+var_34] ecx +
test ecx ecx +
jnz loc_100C481  +
push offset aOutOfMemoryC_0  +
push esi  +
call sub_1009022  +
pop ecx  +
pop ecx  +
xor eax eax +
jmp loc_100C5D0  +
push edi  +
xor eax eax +
mov edi ecx +
stos   +
stos   +
push esi  +
stos   +
push ebx  +
mov [ebx+70h] ecx +
call sub_100C274  +
test eax eax +
jz loc_100C5EB  +
push esi  +
push offset aInfsectionorde  +
push dword ptr [ebx+8]  +
call sub_100D5E6  +
test eax eax +
jnz loc_100C4D7  +
mov [ebp+var_30] offset aDcf +
mov eax [ebp+var_30] +
movsx eax byte ptr [eax] +
push eax  +
call ds:toupper  +
sub eax 43h +
pop ecx  +
jz loc_100C4E9  +
dec eax  +
jz loc_100C4E5  +
push 2  +
pop edi  +
sub eax edi +
jnz loc_100C5EB  +
jmp loc_100C4EC  +
push eax  +
call sub_100A540  +
mov [ebp+var_30] eax +
jmp loc_100C5BC  +
xor edi edi +
jmp loc_100C4EC  +
xor edi edi +
inc edi  +
push [ebp+var_28]  +
mov esi edi +
imul esi esi +
push off_1016934[esi]  +
push dword ptr [ebx+8]  +
call sub_100D5E6  +
test eax eax +
jnz loc_100C50F  +
mov [ebp+var_2C] offset asc_1001638 +
jmp loc_100C518  +
push eax  +
call sub_100A540  +
mov [ebp+var_2C] eax +
push [ebp+var_28]  +
push offset aWt  +
push offset aInf_0  +
push off_1016930[esi]  +
call sub_1009DF8  +
mov ecx [ebp+var_34] +
mov [ecx+edi*4] eax +
test eax eax +
jz loc_100C5E0  +
push [ebp+var_28]  +
push eax  +
call sub_1009257  +
xor edi edi +
mov [ebp+var_38] eax +
inc edi  +
jmp loc_100C5B0  +
push [ebp+var_2C]  +
push offset aS  +
push [ebp+var_38]  +
call ds:fprintf  +
add esp 0Ch +
test eax eax +
jl loc_100C5E0  +
push [ebp+var_28]  +
lea eax [ebp+var_24] +
push offset aInfHeaderVaria  +
push edi  +
push off_1016938[esi]  +
push 20h  +
push eax  +
call sub_100CCCC  +
test eax eax +
jz loc_100C5E0  +
push [ebp+var_28]  +
lea eax [ebp+var_24] +
push eax  +
push dword ptr [ebx+8]  +
call sub_100D5E6  +
test eax eax +
jz loc_100C5A4  +
push eax  +
call sub_100A540  +
mov [ebp+var_2C] eax +
inc edi  +
jmp loc_100C5B0  +
push [ebp+var_28]  +
call sub_1009052  +
and [ebp+var_2C] 0 +
cmp [ebp+var_2C] 0 +
jnz loc_100C54F  +
inc [ebp+var_30]  +
mov eax [ebp+var_30] +
cmp byte ptr [eax] 0 +
jnz loc_100C4B4  +
mov eax [ebp+var_34] +
mov dword ptr [ebx+7Ch] 1 +
pop edi  +
mov ecx [ebp+var_4] +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100DC5B  +
leave   +
retn 8  +
push [ebp+var_28]  +
push [ebp+var_34]  +
call sub_100B45E  +
xor eax eax +
jmp loc_100C5CF  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 24h +
mov eax dword_1016A90 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
push edi  +
mov esi offset asc_10039E4 +
push esi  +
push ebx  +
call ds:strspn  +
mov [ebp+var_1C] eax +
add eax ebx +
push esi  +
push eax  +
call ds:strpbrk  +
mov edi eax +
add esp 10h +
test edi edi +
jz loc_100C645  +
push esi  +
push edi  +
call ds:strspn  +
mov esi [ebp+var_1C] +
pop ecx  +
sub edi ebx +
pop ecx  +
mov [ebp+var_24] eax +
sub edi esi +
jmp loc_100C65E  +
mov eax [ebp+var_1C] +
and [ebp+var_24] 0 +
lea edi [ebx+eax] +
lea eax [edi+1] +
mov cl [edi] +
inc edi  +
test cl cl +
jnz loc_100C652  +
mov esi [ebp+var_1C] +
sub edi eax +
cmp edi 3 +
jle loc_100C702  +
lea eax [edi-1] +
cdq   +
push 3  +
pop ecx  +
idiv  ecx +
mov [ebp+var_20] eax +
add eax edi +
cmp eax [ebp+arg_4] +
jg loc_100C702  +
lea eax [edi+esi] +
cmp eax 14h +
jnb loc_100C702  +
push edi  +
lea eax [ebx+esi] +
push eax  +
lea eax [ebp+var_18] +
push eax  +
call memcpy  +
add esp 0Ch +
test esi esi +
jle loc_100C6A5  +
cmp esi [ebp+var_20] +
jl loc_100C6A5  +
sub ebx [ebp+var_20] +
add ebx esi +
mov eax edi +
push 3  +
cdq   +
pop ecx  +
idiv  ecx +
mov esi edx +
test esi esi +
jnz loc_100C6B5  +
push ecx  +
pop esi  +
push esi  +
lea eax [ebp+var_18] +
push eax  +
push ebx  +
call memcpy  +
sub edi esi +
add esp 0Ch +
add ebx esi +
lea ecx [ebp+esi+var_18] +
test edi edi +
jle loc_100C6EE  +
push 3  +
xor edx edx +
lea eax [edi-1] +
pop esi  +
div  esi +
inc eax  +
mov byte ptr [ebx] 2Ch +
inc ebx  +
mov esi ecx +
mov edi ebx +
movs   +
add ebx 3 +
add ecx 3 +
dec eax  +
movs   +
jnz loc_100C6DA  +
mov eax [ebp+var_24] +
mov ecx [ebp+var_1C] +
add ecx eax +
mov eax [ebp+var_20] +
cmp ecx eax +
jg loc_100C704  +
mov byte ptr [ebx] 0 +
jmp loc_100C704  +
xor eax eax +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100DC5B  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
movsx eax byte ptr [ecx] +
cmp eax 69h +
jg loc_100C758  +
jz loc_100C77E  +
cmp eax 45h +
jz loc_100C74A  +
cmp eax 47h +
jz loc_100C74A  +
cmp eax 58h +
jz loc_100C77E  +
cmp eax 62h +
jle loc_100C76B  +
cmp eax 64h +
jle loc_100C77E  +
cmp eax 67h +
jg loc_100C76B  +
xor eax eax +
cmp byte ptr [ecx-1] 4Ch +
setz al  +
add eax 5 +
jmp loc_100C790  +
sub eax 6Fh +
jz loc_100C77E  +
sub eax 4 +
jz loc_100C76F  +
dec eax  +
dec eax  +
jz loc_100C77E  +
sub eax 3 +
jz loc_100C77E  +
xor eax eax +
jmp loc_100C790  +
cmp byte ptr [ecx-1] 46h +
jz loc_100C779  +
push 7  +
jmp loc_100C77B  +
push 8  +
pop eax  +
jmp loc_100C790  +
mov cl [ecx-1] +
xor eax eax +
cmp cl 68h +
jz loc_100C78F  +
cmp cl 6Ch +
setz al  +
inc eax  +
inc eax  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
xor ebx ebx +
cmp [esi] bl +
jz loc_100C7F0  +
push edi  +
mov edi ds:isdigit +
cmp byte ptr [esi] 25h +
jnz loc_100C7E9  +
inc esi  +
movzx eax byte ptr [esi] +
push eax  +
call edi  +
pop ecx  +
test eax eax +
jz loc_100C7E9  +
push esi  +
call ds:atoi  +
cmp eax ebx +
pop ecx  +
jle loc_100C7CF  +
mov ebx eax +
mov al [esi] +
test al al +
jz loc_100C7EF  +
movzx eax al +
push eax  +
call edi  +
pop ecx  +
test eax eax +
jz loc_100C7EA  +
inc esi  +
mov al [esi] +
test al al +
jnz loc_100C7D5  +
jmp loc_100C7EA  +
inc esi  +
cmp byte ptr [esi] 0 +
jnz loc_100C7B0  +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
xor eax eax +
test ecx ecx +
jz loc_100C813  +
cmp ecx 7FFFFFFFh +
jbe loc_100C818  +
mov eax 80070057h +
test eax eax +
jl loc_100C854  +
push ebx  +
push esi  +
push edi  +
push [ebp+arg_C]  +
mov edi [ebp+arg_0] +
push [ebp+arg_8]  +
lea esi [ecx-1] +
push esi  +
push edi  +
xor ebx ebx +
call ds:_vsnprintf  +
add esp 10h +
test eax eax +
jl loc_100C847  +
cmp eax esi +
ja loc_100C847  +
jnz loc_100C84F  +
mov [esi+edi] bl +
jmp loc_100C84F  +
mov [esi+edi] bl +
mov ebx 8007007Ah +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
push esi  +
mov esi [ebp+arg_C] +
push edi  +
xor edi edi +
cmp esi eax +
jb loc_100C8A8  +
mov ecx esi +
sub ecx eax +
cmp [ebp+arg_8] ecx +
jb loc_100C8A8  +
lea ecx [ebp+arg_14] +
push ecx  +
push [ebp+arg_10]  +
sub eax esi +
add eax [ebp+arg_8] +
push eax  +
push esi  +
call sub_100C7FD  +
test eax eax +
jl loc_100C8A8  +
mov eax esi +
lea edx [eax+1] +
mov cl [eax] +
inc eax  +
test cl cl +
jnz loc_100C895  +
sub eax edx +
mov edi eax +
mov eax [ebp+arg_0] +
and dword ptr [eax] 0 +
jmp loc_100C8B1  +
mov eax [ebp+arg_0] +
mov dword ptr [eax] 1 +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_0] +
push edi  +
mov edi [ebp+arg_8] +
cmp byte ptr [edi] 0 +
jz loc_100C966  +
push esi  +
cmp [ebp+arg_4] 1 +
jle loc_100C965  +
mov al [edi] +
cmp al 25h +
jnz loc_100C955  +
inc edi  +
movzx eax byte ptr [edi] +
push eax  +
call ds:isdigit  +
pop ecx  +
test eax eax +
jz loc_100C945  +
push edi  +
call ds:atoi  +
pop ecx  +
mov esi eax +
jmp loc_100C90F  +
movzx eax al +
push eax  +
call ds:isdigit  +
pop ecx  +
test eax eax +
jz loc_100C915  +
inc edi  +
mov al [edi] +
test al al +
jnz loc_100C8FF  +
mov eax [ebp+arg_C] +
lea esi [eax+esi*4-4] +
push dword ptr [esi]  +
push [ebp+arg_4]  +
push ebx  +
call sub_1004ACF  +
mov eax [esi] +
lea esi [eax+1] +
mov cl [eax] +
inc eax  +
test cl cl +
jnz loc_100C92C  +
sub eax esi +
cmp eax [ebp+arg_4] +
jl loc_100C93E  +
mov eax [ebp+arg_4] +
dec eax  +
add ebx eax +
sub [ebp+arg_4] eax +
jmp loc_100C95C  +
mov byte ptr [ebx] 25h +
mov al [edi] +
inc ebx  +
dec [ebp+arg_4]  +
cmp al 25h +
jnz loc_100C955  +
inc edi  +
jmp loc_100C95C  +
mov [ebx] al +
inc ebx  +
inc edi  +
dec [ebp+arg_4]  +
cmp byte ptr [edi] 0 +
jnz loc_100C8D3  +
pop esi  +
mov eax ebx +
sub eax [ebp+arg_0] +
pop edi  +
mov byte ptr [ebx] 0 +
pop ebx  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 274h +
mov eax dword_1016A90 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push ebx  +
mov ebx [ebp+arg_C] +
push esi  +
push edi  +
mov edi [ebp+arg_10] +
mov [ebp+var_234] eax +
mov eax [ebp+arg_8] +
push eax  +
mov [ebp+var_24C] eax +
call sub_100C799  +
mov [ebp+var_248] eax +
test eax eax +
jle loc_100CBE9  +
and [ebp+var_238] 0 +
cmp [ebp+var_248] 0 +
lea esi [ebp+var_224] +
mov eax ebx +
jle loc_100CBE9  +
lea ebx [edi-4] +
add edi 0FFFFFFF8h +
mov [ebp+var_228] edi +
mov edi 200h +
jmp loc_100C9F2  +
mov eax [ebp+var_23C] +
cmp byte ptr [eax] 25h +
mov ecx [ebp+var_238] +
mov [ebp+ecx*4+var_274] esi +
mov [ebp+var_22C] eax +
jnz loc_100CC15  +
lea edx [eax+1] +
mov eax edx +
jmp loc_100CA1B  +
cmp cl 25h +
jz loc_100CA27  +
inc eax  +
mov cl [eax] +
mov [ebp+var_23C] eax +
test cl cl +
jnz loc_100CA15  +
sub eax [ebp+var_22C] +
cmp eax 2 +
mov [ebp+var_230] eax +
jl loc_100CC33  +
cmp eax 20h +
jnb loc_100CC33  +
xor ecx ecx +
cmp byte ptr [edx] 2Ch +
setz cl  +
mov [ebp+var_240] ecx +
test ecx ecx +
jz loc_100CA80  +
mov ecx [ebp+var_22C] +
mov dl [ecx] +
add eax 0FFFFFFFEh +
push eax  +
add ecx 2 +
push ecx  +
lea eax [ebp-23h] +
push eax  +
mov [ebp+var_24] dl +
call memcpy  +
mov eax [ebp+var_230] +
mov [ebp+eax+var_25] 0 +
jmp loc_100CA9B  +
push eax  +
push [ebp+var_22C]  +
lea eax [ebp+var_24] +
push eax  +
call memcpy  +
mov eax [ebp+var_230] +
mov [ebp+eax+var_24] 0 +
mov eax [ebp+var_23C] +
add esp 0Ch +
dec eax  +
push eax  +
call sub_100C71A  +
xor ecx ecx +
inc ecx  +
mov [ebp+var_244] eax +
mov [ebp+var_230] esi +
mov [ebp+var_22C] ecx +
cmp eax ecx +
jz loc_100CB39  +
cmp eax 2 +
jz loc_100CB2D  +
cmp eax 3 +
jz loc_100CB2D  +
push 4  +
pop ecx  +
cmp eax ecx +
jle loc_100CC2C  +
cmp eax 6 +
jle loc_100CAF8  +
cmp eax 7 +
jz loc_100CAEC  +
cmp eax 8 +
jnz loc_100CC2C  +
add [ebp+var_228] ecx +
add ebx ecx +
push dword ptr [ebx]  +
jmp loc_100CB47  +
add [ebp+var_228] 8 +
mov eax [ebp+var_228] +
fld  qword ptr [eax] +
push ecx  +
push ecx  +
fstp  [esp+288h+var_288] +
lea eax [ebp+var_24] +
push eax  +
push esi  +
push edi  +
lea eax [ebp+var_224] +
push eax  +
lea eax [ebp+var_22C] +
push eax  +
add ebx 8 +
call sub_100C85D  +
add esp 1Ch +
jmp loc_100CB63  +
add [ebp+var_228] 4 +
add ebx 4 +
jmp loc_100CAF4  +
add [ebp+var_228] 4 +
add ebx 4 +
movzx eax word ptr [ebx] +
push eax  +
lea eax [ebp+var_24] +
push eax  +
push esi  +
push edi  +
lea eax [ebp+var_224] +
push eax  +
lea eax [ebp+var_22C] +
push eax  +
call sub_100C85D  +
add esp 18h +
cmp [ebp+var_22C] 0 +
lea eax [esi+eax+1] +
jnz loc_100CC28  +
mov ecx eax +
mov [ebp+var_25] 0 +
lea esi [ecx+1] +
mov dl [ecx] +
inc ecx  +
test dl dl +
jnz loc_100CB7D  +
sub ecx esi +
cmp [ebp+var_240] 0 +
lea esi [eax+ecx+1] +
jz loc_100CBD1  +
mov eax [ebp+var_230] +
lea ecx [ebp+var_224] +
sub eax ecx +
cmp eax 1ECh +
jge loc_100CBD1  +
cmp [ebp+var_244] 0 +
jle loc_100CBD1  +
cmp [ebp+var_244] 3 +
jg loc_100CBD1  +
lea eax [ebp+var_24] +
sub eax [ebp+var_230] +
push eax  +
push [ebp+var_230]  +
call sub_100C5F4  +
add esi eax +
inc [ebp+var_238]  +
mov eax [ebp+var_238] +
cmp eax [ebp+var_248] +
jl loc_100C9EC  +
lea eax [ebp+var_274] +
push eax  +
push [ebp+var_24C]  +
push [ebp+arg_4]  +
push [ebp+var_234]  +
call sub_100C8BC  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100DC5B  +
leave   +
retn 14h  +
push offset aInterrFormatSp  +
push [ebp+arg_4]  +
push [ebp+var_234]  +
call sub_1004ACF  +
xor eax eax +
jmp loc_100CC04  +
push offset aInterrFormat_0  +
jmp loc_100CC1A  +
push offset aInterrFormat_1  +
jmp loc_100CC1A  +
***
mov edi edi +
push ebp  +
mov ebp esp +
lea eax [ebp+arg_10] +
push eax  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_100C979  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_C] 0 +
mov eax [ebp+arg_8] +
mov eax [eax] +
push ebx  +
mov ebx [ebp+arg_4] +
push esi  +
mov esi [ebx] +
push edi  +
mov edi [ebp+arg_0] +
mov ecx [edi] +
jnz loc_100CC9A  +
test esi esi +
jle loc_100CC8C  +
mov dl [eax] +
dec esi  +
mov [ecx] dl +
inc ecx  +
inc eax  +
test dl dl +
jnz loc_100CC7D  +
cmp byte ptr [eax-1] 0 +
jz loc_100CCB4  +
xor eax eax +
jmp loc_100CCC0  +
cmp [ebp+arg_C] 0 +
jle loc_100CCB4  +
test esi esi +
jle loc_100CCAE  +
dec [ebp+arg_C]  +
mov dl [eax] +
dec esi  +
mov [ecx] dl +
inc ecx  +
inc eax  +
test dl dl +
jnz loc_100CC96  +
cmp [ebp+arg_C] 0 +
jg loc_100CC92  +
mov [edi] ecx +
mov ecx [ebp+arg_8] +
mov [ebx] esi +
mov [ecx] eax +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10Ch +
mov eax dword_1016A90 +
xor eax ebp +
mov [ebp+var_4] eax +
mov ecx [ebp+arg_8] +
mov edx [ebp+arg_0] +
and [ebp+var_108] 0 +
push ebx  +
push esi  +
mov esi [ebp+arg_10] +
push edi  +
mov edi [ebp+arg_14] +
lea eax [ebp+var_104] +
mov [ebp+var_10C] ecx +
jmp loc_100CD37  +
cmp cl 2Ah +
jnz loc_100CD21  +
lea ecx [ebp-6] +
cmp eax ecx +
jnb loc_100CD3D  +
mov byte ptr [eax] 25h +
inc eax  +
mov byte ptr [eax] 64h +
inc eax  +
inc [ebp+var_108]  +
jmp loc_100CD2B  +
lea ebx [ebp-5] +
cmp eax ebx +
jnb loc_100CD3D  +
mov [eax] cl +
inc eax  +
inc [ebp+var_10C]  +
mov ecx [ebp+var_10C] +
mov cl [ecx] +
test cl cl +
jnz loc_100CD05  +
cmp [ebp+var_108] 4 +
mov byte ptr [eax] 0 +
jle loc_100CD65  +
push esi  +
push 4  +
push 2Ah  +
push offset aCDS  +
push offset aWildcard1Limit  +
push edi  +
call sub_1009022  +
add esp 18h +
xor eax eax +
jmp loc_100CD9D  +
mov eax dword ptr [ebp+arg_C] +
mov ebx [ebp+arg_4] +
push eax  +
push eax  +
push eax  +
push eax  +
lea eax [ebp+var_104] +
push eax  +
push ebx  +
push edx  +
call sub_1009508  +
add esp 1Ch +
test eax eax +
jge loc_100CD9A  +
lea eax [ebp+var_104] +
push eax  +
dec ebx  +
push ebx  +
push esi  +
push offset aSDS  +
push offset a1LengthExceede  +
jmp loc_100CD58  +
xor eax eax +
inc eax  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100DC5B  +
leave   +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_8] +
mov eax 400h +
sub esp 0Ch +
cmp [ebp+arg_8] eax +
jg loc_100CDCA  +
mov edx eax +
mov ecx 4000h +
cmp edx ecx +
jge loc_100CDDD  +
cmp [ebp+arg_8] eax +
jg loc_100CDE0  +
mov [ebp+arg_8] eax +
jmp loc_100CDE0  +
mov [ebp+arg_8] ecx +
mov eax [ebp+arg_4] +
push edi  +
xor edi edi +
sub eax edi +
jz loc_100CE1B  +
dec eax  +
jz loc_100CE0F  +
push [ebp+arg_0]  +
push [ebp+arg_4]  +
push offset aDS  +
push offset aInvalidOpenMod  +
push [ebp+arg_C]  +
call sub_1009022  +
add esp 14h +
xor eax eax +
jmp loc_100CF51  +
mov eax 8102h +
mov ecx 180h +
jmp loc_100CE22  +
mov eax 8000h +
xor ecx ecx +
push ecx  +
push eax  +
push [ebp+arg_0]  +
call ds:_open  +
add esp 0Ch +
mov [ebp+var_8] eax +
cmp eax 0FFFFFFFFh +
jnz loc_100CE52  +
push [ebp+arg_0]  +
push offset aS_1  +
push offset aCouldNotOpen_0  +
push [ebp+arg_C]  +
call sub_1009022  +
add esp 10h +
jmp loc_100CE08  +
push ebx  +
mov ebx ds:malloc +
push esi  +
push 428h  +
call ebx  +
mov esi eax +
pop ecx  +
cmp esi edi +
jnz loc_100CE85  +
push [ebp+arg_0]  +
push offset aS_1  +
push offset aOutOfMemoryOpe  +
push [ebp+arg_C]  +
call sub_1009022  +
add esp 10h +
jmp loc_100CF92  +
push [ebp+arg_8]  +
call ebx  +
mov ebx eax +
pop ecx  +
mov [esi+0Ch] ebx +
cmp ebx edi +
jnz loc_100CEB8  +
push esi  +
call ds:free  +
push [ebp+arg_0]  +
push offset aS_1  +
push offset aOutOfMemoryOpe  +
push [ebp+arg_C]  +
call sub_1009022  +
add esp 14h +
jmp loc_100CF92  +
push [ebp+arg_0]  +
call ds:_strdup  +
pop ecx  +
mov [ebp+var_C] eax +
mov [esi] eax +
cmp eax edi +
jnz loc_100CEF4  +
push ebx  +
mov ebx ds:free +
call ebx  +
push esi  +
call ebx  +
push [ebp+arg_0]  +
push offset aS_1  +
push offset aOutOfMemoryOpe  +
push [ebp+arg_C]  +
call sub_1009022  +
add esp 18h +
jmp loc_100CF92  +
mov ecx [ebp+arg_8] +
mov eax [ebp+var_8] +
mov [esi+8] ecx +
xor ecx ecx +
cmp [ebp+arg_4] edi +
mov [esi+4] eax +
setz cl  +
mov [esi+10h] ebx +
mov [esi+14h] edi +
mov [esi+18h] edi +
mov [esi+1Ch] edi +
mov [esi+24h] edi +
mov [esi+20h] ecx +
cmp [ebp+arg_4] edi +
jnz loc_100CF4D  +
push 3  +
lea ecx [ebp+var_4] +
push ecx  +
push eax  +
call ds:_read  +
add esp 0Ch +
cmp eax 3 +
jnz loc_100CF56  +
cmp byte ptr [ebp+var_4] 0EFh +
jnz loc_100CF56  +
cmp byte ptr [ebp+var_4+1] 0BBh +
jnz loc_100CF56  +
cmp byte ptr [ebp+var_4+2] 0BFh +
jnz loc_100CF56  +
mov dword ptr [esi+24h] 1 +
mov eax esi +
pop esi  +
pop ebx  +
pop edi  +
leave   +
retn 10h  +
push edi  +
push edi  +
push [ebp+var_8]  +
call ds:_lseek  +
add esp 0Ch +
cmp eax 0FFFFFFFFh +
jnz loc_100CF4D  +
push [ebp+var_C]  +
mov edi ds:free +
call edi  +
push ebx  +
call edi  +
push esi  +
call edi  +
push [ebp+arg_0]  +
push offset aS_1  +
push offset aCouldNotOpen_0  +
push [ebp+arg_C]  +
call sub_1009022  +
add esp 1Ch +
xor eax eax +
jmp loc_100CF4F  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
cmp dword ptr [esi+20h] 0 +
push edi  +
mov edi [ebp+arg_4] +
jnz loc_100CFCC  +
push dword ptr [esi]  +
push offset aS_1  +
push offset aTriedToReadFro  +
push [ebp+arg_C]  +
call sub_1009022  +
add esp 10h +
xor eax eax +
jmp loc_100D081  +
cmp [ebp+arg_8] 0 +
push ebx  +
jle loc_100D07E  +
xor ebx ebx +
inc ebx  +
jmp loc_100D001  +
mov ecx [esi+10h] +
mov al [ecx] +
cmp al 0Ah +
jz loc_100D063  +
cmp al 0Dh +
jz loc_100CFFD  +
cmp al 1Ah +
jz loc_100D043  +
cmp [ebp+arg_8] ebx +
jle loc_100D03E  +
dec [ebp+arg_8]  +
mov [edi] al +
inc edi  +
inc dword ptr [esi+10h]  +
jmp loc_100D001  +
inc ecx  +
mov [esi+10h] ecx +
mov eax [esi+10h] +
cmp eax [esi+14h] +
jbe loc_100CFDC  +
cmp dword ptr [esi+18h] 0 +
jnz loc_100D06B  +
push dword ptr [esi+8]  +
push dword ptr [esi+0Ch]  +
push dword ptr [esi+4]  +
call ds:_read  +
add esp 0Ch +
cmp eax [esi+8] +
jz loc_100D029  +
mov [esi+18h] ebx +
cmp [ebp+arg_8] 0 +
mov ecx [esi+0Ch] +
lea eax [ecx+eax-1] +
mov [esi+10h] ecx +
mov [esi+14h] eax +
jg loc_100D001  +
jmp loc_100D07E  +
mov byte ptr [edi] 0 +
jmp loc_100D07E  +
mov eax [esi+0Ch] +
and dword ptr [esi+14h] 0 +
mov [esi+18h] ebx +
mov [esi+10h] eax +
mov byte ptr [edi] 0 +
cmp edi [ebp+arg_4] +
ja loc_100D05B  +
mov [esi+1Ch] ebx +
inc edi  +
mov eax edi +
sub eax [ebp+arg_4] +
jmp loc_100D080  +
inc dword ptr [esi+10h]  +
mov byte ptr [edi] 0 +
jmp loc_100D073  +
mov byte ptr [edi] 0 +
cmp edi [ebp+arg_4] +
jbe loc_100D07B  +
mov eax edi +
sub eax [ebp+arg_4] +
inc eax  +
jmp loc_100D080  +
mov [esi+1Ch] ebx +
xor eax eax +
pop ebx  +
pop edi  +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax+1Ch] +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
push dword ptr [edi+4]  +
call ds:_close  +
push dword ptr [edi]  +
mov esi ds:free +
mov ebx eax +
call esi  +
push dword ptr [edi+0Ch]  +
call esi  +
push edi  +
call esi  +
add esp 10h +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax+24h] +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push offset a0123456789  +
push [ebp+arg_0]  +
call ds:strpbrk  +
mov esi eax +
pop ecx  +
pop ecx  +
test esi esi +
jz loc_100D140  +
push ebx  +
mov ebx ds:atol +
push edi  +
push esi  +
call ebx  +
mov edi eax +
mov [esp+10h+var_10] offset a0123456789 +
push esi  +
shl edi 10h +
call ds:strspn  +
add esi eax +
cmp byte ptr [esi] 2Eh +
pop ecx  +
pop ecx  +
jnz loc_100D13C  +
inc esi  +
push esi  +
call ebx  +
and eax 0FFFFh +
pop ecx  +
add edi eax +
mov eax edi +
pop edi  +
pop ebx  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 150h +
mov eax dword_1016A90 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_4] +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov [ebp+var_11C] eax +
test esi esi +
jz loc_100D24A  +
test eax eax +
jz loc_100D24A  +
mov eax esi +
lea edx [eax+1] +
mov cl [eax] +
inc eax  +
test cl cl +
jnz loc_100D183  +
sub eax edx +
cmp eax 5 +
jb loc_100D24A  +
mov eax esi +
lea edx [eax+1] +
mov cl [eax] +
inc eax  +
test cl cl +
jnz loc_100D19A  +
sub eax edx +
lea eax [esi+eax-4] +
push eax  +
push offset a_ttf  +
call ds:_stricmp  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_100D24A  +
push 8000h  +
push esi  +
call ds:_open  +
pop ecx  +
pop ecx  +
mov [ebp+var_108] eax +
cmp eax 0FFFFFFFFh +
jz loc_100D24A  +
mov edi ds:_read +
push 0Ch  +
lea ecx [ebp+var_150] +
push ecx  +
push eax  +
call edi  +
add esp 0Ch +
cmp eax 0Ch +
jnz loc_100D23D  +
mov eax [ebp+var_14C] +
movzx cx al +
shl cx 8 +
shr eax 8 +
movzx esi cx +
movzx eax al +
or esi eax +
push 0  +
pop ebx  +
jbe loc_100D23D  +
cmp ebx 28h +
jnb loc_100D23D  +
push 10h  +
lea eax [ebp+var_134] +
push eax  +
push [ebp+var_108]  +
call edi  +
add esp 0Ch +
cmp eax 10h +
jnz loc_100D23D  +
cmp [ebp+var_134] 656D616Eh +
jz loc_100D25B  +
inc ebx  +
cmp ebx esi +
jb loc_100D20E  +
push [ebp+var_108]  +
call ds:_close  +
pop ecx  +
xor eax eax +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100DC5B  +
leave   +
retn   +
mov eax [ebp+var_12C] +
mov ebx ds:_lseek +
mov esi eax +
mov ecx eax +
shr ecx 10h +
and esi 0FF0000h +
or esi ecx +
mov ecx eax +
shl ecx 10h +
mov edi 0FF00h +
and eax edi +
or ecx eax +
shl ecx 8 +
shr esi 8 +
or esi ecx +
push 0  +
push esi  +
push [ebp+var_108]  +
call ebx  +
add esp 0Ch +
cmp eax esi +
jnz loc_100D23D  +
push 6  +
lea eax [ebp+var_124] +
push eax  +
push [ebp+var_108]  +
call ds:_read  +
add esp 0Ch +
cmp eax 6 +
jnz loc_100D23D  +
mov eax [ebp+var_124+2] +
movzx cx al +
shl cx 8 +
shr eax 8 +
movzx esi cx +
movzx eax al +
or esi eax +
jz loc_100D23D  +
push 0Ch  +
lea eax [ebp+var_118] +
push eax  +
push [ebp+var_108]  +
dec esi  +
call ds:_read  +
add esp 0Ch +
cmp eax 0Ch +
jnz loc_100D23D  +
mov eax [ebp+var_118] +
movzx cx byte ptr [ebp+var_118] +
shr eax 8 +
movzx ax al +
shl cx 8 +
or ax cx +
cmp ax 1 +
jnz loc_100D340  +
mov eax [ebp+var_112] +
movzx cx byte ptr [ebp+var_112] +
shr eax 8 +
movzx ax al +
shl cx 8 +
or ax cx +
cmp ax 5 +
jz loc_100D349  +
test esi esi +
jnz loc_100D2DA  +
jmp loc_100D23D  +
mov eax [ebp+var_12C] +
mov esi eax +
mov ecx eax +
shr ecx 10h +
and esi 0FF0000h +
or esi ecx +
mov ecx eax +
shl ecx 10h +
and eax edi +
or ecx eax +
mov eax [ebp+var_120] +
shl ecx 8 +
shr esi 8 +
or esi ecx +
movzx cx al +
shl cx 8 +
shr eax 8 +
movzx ecx cx +
movzx eax al +
or ecx eax +
mov eax [ebp+var_10E] +
add esi ecx +
movzx cx al +
shl cx 8 +
shr eax 8 +
movzx eax al +
movzx ecx cx +
or ecx eax +
mov eax [ebp+var_112+2] +
add esi ecx +
movzx cx al +
shl cx 8 +
shr eax 8 +
push 0  +
movzx edi cx +
movzx eax al +
push esi  +
push [ebp+var_108]  +
or edi eax +
call ebx  +
add esp 0Ch +
cmp eax esi +
jnz loc_100D23D  +
cmp edi 0FFh +
ja loc_100D23D  +
push edi  +
lea eax [ebp+var_104] +
push eax  +
push [ebp+var_108]  +
call ds:_read  +
add esp 0Ch +
cmp eax edi +
jnz loc_100D23D  +
push [ebp+var_108]  +
mov [ebp+edi+var_104] 0 +
call ds:_close  +
pop ecx  +
lea eax [ebp+var_104] +
push eax  +
call sub_100D0ED  +
mov ecx [ebp+var_11C] +
mov [ecx] eax +
xor eax eax +
inc eax  +
jmp loc_100D24C  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx ds:free +
push esi  +
mov esi [ebp+arg_0] +
mov eax [esi] +
push edi  +
mov edi [esi+1Ch] +
test eax eax +
jz loc_100D453  +
push eax  +
call ebx  +
pop ecx  +
mov eax [esi+4] +
test eax eax +
jz loc_100D45E  +
push eax  +
call ebx  +
pop ecx  +
mov eax [esi+18h] +
test eax eax +
jnz loc_100D46C  +
mov eax [esi+14h] +
mov [edi] eax +
jmp loc_100D472  +
mov ecx [esi+14h] +
mov [eax+14h] ecx +
mov eax [esi+14h] +
test eax eax +
jnz loc_100D481  +
mov eax [esi+18h] +
mov [edi+4] eax +
jmp loc_100D487  +
mov ecx [esi+18h] +
mov [eax+18h] ecx +
push esi  +
call ebx  +
pop ecx  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 8  +
call ds:malloc  +
pop ecx  +
test eax eax +
jnz loc_100D4C7  +
push offset aAttemptingToCr  +
push offset aS_1  +
push offset aOutOfMemory1_0  +
push [ebp+arg_0]  +
call sub_1009022  +
add esp 10h +
xor eax eax +
jmp loc_100D4CE  +
and dword ptr [eax] 0 +
and dword ptr [eax+4] 0 +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
mov edi [ebp+arg_0] +
mov eax [edi] +
test eax eax +
jz loc_100D4F7  +
push esi  +
mov esi [eax+14h] +
push eax  +
call sub_100D435  +
mov eax esi +
test esi esi +
jnz loc_100D4E7  +
pop esi  +
push edi  +
call ds:free  +
pop ecx  +
xor eax eax +
inc eax  +
pop edi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push dword ptr [eax+4]  +
call ds:atoi  +
pop ecx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push dword ptr [eax+4]  +
call ds:atol  +
pop ecx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax+14h] +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
lea ecx [eax+1] +
mov dl [eax] +
inc eax  +
test dl dl +
jnz loc_100D561  +
sub eax ecx +
cmp eax 20h +
jb loc_100D58D  +
push [ebp+arg_0]  +
push 20h  +
push offset aDS  +
push offset aVariableNameIs  +
push [ebp+arg_4]  +
call sub_1009022  +
add esp 14h +
xor eax eax +
jmp loc_100D590  +
xor eax eax +
inc eax  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
mov esi [eax] +
jmp loc_100D5BA  +
push [ebp+arg_4]  +
push dword ptr [esi]  +
call ds:_stricmp  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_100D5DD  +
mov esi [esi+14h] +
test esi esi +
jnz loc_100D5A6  +
push [ebp+arg_4]  +
push offset aS_1  +
push offset aUndefinedVaria  +
push [ebp+arg_8]  +
call sub_1009022  +
add esp 10h +
xor eax eax +
pop esi  +
pop ebp  +
retn 0Ch  +
mov eax esi +
jmp loc_100D5D8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
call sub_100D556  +
test eax eax +
jnz loc_100D5FE  +
pop ebp  +
retn 0Ch  +
pop ebp  +
jmp sub_100D599  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 304h +
mov eax dword_1016A90 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
mov ebx [ebp+arg_8] +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov edi [ebp+arg_4] +
push 0FFh  +
lea eax [ebp-103h] +
push 0  +
push eax  +
mov [ebp+var_104] 0 +
call memset  +
mov eax edi +
add esp 0Ch +
lea ecx [eax+1] +
mov dl [eax] +
inc eax  +
test dl dl +
jnz loc_100D64C  +
sub eax ecx +
mov ecx 100h +
cmp eax ecx +
jb loc_100D67B  +
push dword ptr [esi]  +
push ecx  +
push offset aDS  +
push offset aVariableValueI  +
push ebx  +
call sub_1009022  +
add esp 14h +
xor eax eax +
jmp loc_100D70A  +
mov eax [esi+10h] +
test eax eax +
jnz loc_100D692  +
push edi  +
push ecx  +
lea eax [ebp+var_104] +
push eax  +
call sub_1004ACF  +
jmp loc_100D6A7  +
push ebx  +
push ecx  +
lea ecx [ebp+var_104] +
push ecx  +
push edi  +
push dword ptr [esi]  +
push dword ptr [esi+1Ch]  +
call eax  +
test eax eax +
jz loc_100D674  +
mov edi [esi+4] +
lea eax [ebp+var_104] +
push eax  +
call ds:_strdup  +
pop ecx  +
mov [esi+4] eax +
test eax eax +
jnz loc_100D6FB  +
push dword ptr [esi]  +
mov [esi+4] edi +
mov esi offset aS_1 +
push esi  +
push offset aAttemptingToSe  +
lea eax [ebp+var_304] +
push 200h  +
push eax  +
call sub_100CC3F  +
lea eax [ebp+var_304] +
push eax  +
push esi  +
push offset aOutOfMemory1_0  +
push ebx  +
call sub_1009022  +
add esp 24h +
jmp loc_100D674  +
test edi edi +
jz loc_100D707  +
push edi  +
call ds:free  +
pop ecx  +
xor eax eax +
inc eax  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100DC5B  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20Ch +
mov eax dword_1016A90 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_8] +
push ebx  +
mov ebx [ebp+arg_18] +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
mov edi [ebp+arg_0] +
push ebx  +
push esi  +
mov [ebp+var_208] esi +
mov [ebp+var_20C] eax +
call sub_100D556  +
test eax eax +
jnz loc_100D762  +
xor eax eax +
jmp loc_100D863  +
push ebx  +
push esi  +
push edi  +
call sub_100D599  +
test eax eax +
jz loc_100D784  +
push esi  +
push offset aS_1  +
push offset aInterrVariable  +
push ebx  +
call sub_1009022  +
add esp 10h +
jmp loc_100D75B  +
push ebx  +
call sub_1009052  +
push 20h  +
call ds:malloc  +
mov esi eax +
xor eax eax +
pop ecx  +
cmp esi eax +
jz loc_100D7F8  +
mov ecx [ebp+arg_C] +
push [ebp+var_208]  +
mov [esi+8] ecx +
mov ecx [ebp+arg_10] +
mov [esi+0Ch] ecx +
mov ecx [ebp+arg_14] +
mov [esi] eax +
mov [esi+4] eax +
mov [esi+10h] ecx +
mov [esi+1Ch] eax +
call ds:_strdup  +
pop ecx  +
mov [esi] eax +
test eax eax +
jz loc_100D7D9  +
push ebx  +
push [ebp+var_20C]  +
push esi  +
call sub_100D609  +
test eax eax +
jnz loc_100D842  +
mov eax [esi] +
mov edi ds:free +
test eax eax +
jz loc_100D7E9  +
push eax  +
call edi  +
pop ecx  +
mov eax [esi+4] +
test eax eax +
jz loc_100D7F4  +
push eax  +
call edi  +
pop ecx  +
push esi  +
call edi  +
pop ecx  +
cmp dword ptr [ebx+200h] 0 +
jnz loc_100D75B  +
push [ebp+var_208]  +
mov esi offset aS_1 +
push esi  +
push offset aAttemptingTo_0  +
lea eax [ebp+var_204] +
push 200h  +
push eax  +
call sub_100CC3F  +
lea eax [ebp+var_204] +
push eax  +
push esi  +
push offset aOutOfMemory1_0  +
push ebx  +
call sub_1009022  +
add esp 24h +
jmp loc_100D75B  +
and dword ptr [esi+14h] 0 +
lea eax [edi+4] +
mov ecx [eax] +
mov [esi+18h] ecx +
cmp dword ptr [edi] 0 +
jnz loc_100D857  +
mov [edi] esi +
jmp loc_100D85C  +
mov ecx [eax] +
mov [ecx+14h] esi +
mov [eax] esi +
mov [esi+1Ch] edi +
mov eax esi +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100DC5B  +
leave   +
retn 1Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 21Ch +
mov eax dword_1016A90 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov edi [ebp+arg_4] +
push edi  +
call sub_100D497  +
mov ebx eax +
test ebx ebx +
jnz loc_100D8A7  +
xor eax eax +
jmp loc_100D8CD  +
mov esi [esi] +
jmp loc_100D8C7  +
push edi  +
push dword ptr [esi+10h]  +
push dword ptr [esi+0Ch]  +
push dword ptr [esi+8]  +
push dword ptr [esi+4]  +
push dword ptr [esi]  +
push ebx  +
call sub_100D720  +
test eax eax +
jz loc_100D8DE  +
mov esi [esi+14h] +
test esi esi +
jnz loc_100D8AB  +
mov eax ebx +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100DC5B  +
leave   +
retn 8  +
lea eax [ebp+var_21C] +
push eax  +
push ebx  +
call sub_100D4D7  +
jmp loc_100D8A3  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_C] +
push edi  +
push [ebp+arg_4]  +
call sub_100D556  +
test eax eax +
jz loc_100D91B  +
push edi  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_100D599  +
mov esi eax +
test esi esi +
jnz loc_100D938  +
push edi  +
push 0  +
push 0  +
push 5  +
push offset word_1001732  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_100D720  +
mov esi eax +
test esi esi +
jz loc_100D948  +
push edi  +
push [ebp+arg_8]  +
push esi  +
call sub_100D609  +
neg eax  +
sbb eax eax +
and eax esi +
pop edi  +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov eax dword_1016A90 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
mov ebx [ebp+arg_C] +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov edi [ebp+arg_4] +
push 0Ah  +
push 0Ch  +
lea eax [ebp+var_10] +
push eax  +
push [ebp+arg_8]  +
call _ltoa_s  +
add esp 10h +
push ebx  +
lea eax [ebp+var_10] +
push eax  +
push edi  +
push esi  +
call sub_100D8F2  +
mov ecx [ebp+var_4] +
neg eax  +
pop edi  +
sbb eax eax +
pop esi  +
xor ecx ebp +
neg eax  +
pop ebx  +
call sub_100DC5B  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
xor eax eax +
jmp loc_100D9C8  +
test eax eax +
jnz loc_100D9CD  +
mov ecx [esi] +
test ecx ecx +
jz loc_100D9C5  +
call ecx  +
add esi 4 +
cmp esi [ebp+arg_4] +
jb loc_100D9B9  +
pop esi  +
pop ebp  +
retn   +
***
mov eax dword_1016ED4 +
push offset dword_1016EC4  +
push dword_1016ED0  +
mov dword_1016EC4 eax +
push offset dword_1016EB4  +
push offset dword_1016EB8  +
push offset dword_1016EB0  +
call ds:__getmainargs  +
add esp 14h +
mov dword_1016EC0 eax +
retn   +
***
call __SEH_prolog4  +
xor ebx ebx +
mov [ebp+ms_exc.disabled] ebx +
mov eax large fs:18h +
mov esi [eax+4] +
mov [ebp+var_1C] ebx +
mov edi offset Destination +
push ebx  +
push esi  +
push edi  +
call ds:InterlockedCompareExchange  +
cmp eax ebx +
jz loc_100DA55  +
cmp eax esi +
jnz loc_100DA48  +
xor esi esi +
inc esi  +
mov [ebp+var_1C] esi +
jmp loc_100DA58  +
push 3E8h  +
call ds:Sleep  +
jmp loc_100DA2F  +
xor esi esi +
inc esi  +
mov eax dword_1017204 +
cmp eax esi +
jnz loc_100DA6B  +
push 1Fh  +
call _amsg_exit  +
pop ecx  +
jmp loc_100DAA6  +
mov eax dword_1017204 +
test eax eax +
jnz loc_100DAA0  +
mov dword_1017204 esi +
push offset dword_1001194  +
push offset dword_1001188  +
call sub_100D9AC  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_100DAA6  +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov eax 0FFh +
jmp loc_100DB70  +
mov dword_1016ECC esi +
mov eax dword_1017204 +
cmp eax esi +
jnz loc_100DACA  +
push offset dword_1001184  +
push offset dword_100117C  +
call _initterm  +
pop ecx  +
pop ecx  +
mov dword_1017204 2 +
cmp [ebp+var_1C] ebx +
jnz loc_100DAD7  +
push ebx  +
push edi  +
call ds:InterlockedExchange  +
cmp dword_101720C ebx +
jz loc_100DAF8  +
push offset dword_101720C  +
call sub_100DD99  +
pop ecx  +
test eax eax +
jz loc_100DAF8  +
push ebx  +
push 2  +
push ebx  +
call dword_101720C  +
push dword_1016EB4  +
push dword_1016EB8  +
push dword_1016EB0  +
call sub_1008DE6  +
add esp 0Ch +
mov dword_1016EC8 eax +
cmp dword_1016EBC ebx +
jnz loc_100DB56  +
push eax  +
call ds:exit  +
mov eax [ebp-14h] +
mov ecx [eax] +
mov ecx [ecx] +
mov [ebp-20h] ecx +
push eax  +
push ecx  +
call _XcptFilter  +
pop ecx  +
pop ecx  +
retn   +
mov esp [ebp-18h] +
mov eax [ebp-20h] +
mov dword_1016EC8 eax +
xor ebx ebx +
cmp dword_1016EBC ebx +
jnz loc_100DB56  +
push eax  +
call ds:_exit  +
cmp dword_1016ECC ebx +
jnz loc_100DB64  +
call ds:_cexit  +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov eax dword_1016EC8 +
call __SEH_epilog4  +
retn   +
***
mov eax 5A4Dh +
cmp ds:1000000h ax +
jz loc_100DB8D  +
xor eax eax +
jmp loc_100DBDA  +
mov eax ds:100003Ch +
lea eax [eax+1000000h] +
cmp dword ptr [eax] 4550h +
jnz loc_100DB89  +
movzx ecx word ptr [eax+18h] +
cmp ecx 10Bh +
jz loc_100DBC7  +
cmp ecx 20Bh +
jnz loc_100DB89  +
cmp dword ptr [eax+84h] 0Eh +
jbe loc_100DB89  +
xor ecx ecx +
cmp [eax+0F8h] ecx +
jmp loc_100DBD5  +
cmp dword ptr [eax+74h] 0Eh +
jbe loc_100DB89  +
xor ecx ecx +
cmp [eax+0E8h] ecx +
setnz cl  +
mov eax ecx +
push 1  +
mov dword_1016EBC eax +
call sub_100DF32  +
push eax  +
call ds:__set_app_type  +
or dword_10171FC 0FFFFFFFFh +
or dword_1017200 0FFFFFFFFh +
pop ecx  +
pop ecx  +
call ds:__p__fmode  +
mov ecx dword_1016EDC +
mov [eax] ecx +
call ds:__p__commode  +
mov ecx dword_1016ED8 +
mov [eax] ecx +
call sub_100DEC4  +
cmp dword_1016AA8 0 +
jnz loc_100DC33  +
push offset sub_100DEC4  +
call ds:__setusermatherr  +
pop ecx  +
call sub_100DEAC  +
xor eax eax +
retn   +
***
call sub_100DF71  +
jmp sub_100DA0D  +
***
cmp ecx dword_1016A90 +
jnz loc_100DC66  +
retn 0  +
jmp loc_100E007  +
***
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov eax [eax] +
cmp dword ptr [eax] 0E06D7363h +
jnz loc_100DCDE  +
cmp dword ptr [eax+10h] 3 +
jnz loc_100DCDE  +
mov eax [eax+14h] +
cmp eax 19930520h +
jz loc_100DCD8  +
cmp eax 19930521h +
jz loc_100DCD8  +
cmp eax 19930522h +
jz loc_100DCD8  +
cmp eax 1994000h +
jnz loc_100DCDE  +
call ds:?terminate@@YAXXZ  +
xor eax eax +
pop ebp  +
retn 4  +
***
push (offset byte_100DCA0+1)  +
call ds:SetUnhandledExceptionFilter  +
xor eax eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
mov eax 5A4Dh +
cmp [ecx] ax +
jz loc_100DD26  +
xor eax eax +
pop ebp  +
retn   +
mov eax [ecx+3Ch] +
add eax ecx +
cmp dword ptr [eax] 4550h +
jnz loc_100DD22  +
xor edx edx +
mov ecx 10Bh +
cmp [eax+18h] cx +
setz dl  +
mov eax edx +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [eax+3Ch] +
add ecx eax +
movzx eax word ptr [ecx+14h] +
push ebx  +
push esi  +
movzx esi word ptr [ecx+6] +
xor edx edx +
push edi  +
lea eax [eax+ecx+18h] +
test esi esi +
jbe loc_100DD8D  +
mov edi [ebp+arg_4] +
mov ecx [eax+0Ch] +
cmp edi ecx +
jb loc_100DD85  +
mov ebx [eax+8] +
add ebx ecx +
cmp edi ebx +
jb loc_100DD8F  +
inc edx  +
add eax 28h +
cmp edx esi +
jb loc_100DD75  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
call __SEH_prolog4  +
and [ebp+ms_exc.disabled] 0 +
mov esi 1000000h +
push esi  +
call sub_100DD10  +
pop ecx  +
test eax eax +
jz loc_100DDF6  +
mov eax [ebp+arg_0] +
sub eax esi +
push eax  +
push esi  +
call sub_100DD50  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_100DDF6  +
mov eax [eax+24h] +
shr eax 1Fh +
not eax  +
and eax 1 +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
jmp loc_100DDFF  +
mov eax [ebp-14h] +
mov eax [eax] +
mov eax [eax] +
xor ecx ecx +
cmp eax 0C0000005h +
setz cl  +
mov eax ecx +
retn   +
mov esp [ebp-18h] +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
xor eax eax +
call __SEH_epilog4  +
retn   +
***
mov eax [esp+8+arg_4] +
mov ecx [ebp-10h] +
mov large fs:0 ecx +
pop ecx  +
pop edi  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
push ecx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push offset sub_100DC5B  +
push offset dword_1016A90  +
call _except_handler4_common  +
add esp 18h +
pop ebp  +
retn   +
***
call ds:_controlfp  +
pop ecx  +
pop ecx  +
retn   +
***
retn   +
***
call __SEH_prolog4  +
xor eax eax +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_100DF25  +
cmp ecx 0FFFFFFFFh +
jz loc_100DF25  +
and [ebp+ms_exc.disabled] eax +
mov edx 5A4Dh +
cmp [ecx] dx +
jnz loc_100DF1E  +
mov edx [ecx+3Ch] +
test edx edx +
jl loc_100DF1E  +
cmp edx 10000000h +
jnb loc_100DF1E  +
lea eax [edx+ecx] +
mov [ebp+var_1C] eax +
cmp dword ptr [eax] 4550h +
jz loc_100DF1E  +
jmp loc_100DF19  +
xor eax eax +
inc eax  +
retn   +
mov esp [ebp-18h] +
xor eax eax +
mov [ebp+var_1C] eax +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
call __SEH_epilog4  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
call ds:GetModuleHandleA  +
test eax eax +
jz loc_100DF67  +
push eax  +
call sub_100DECC  +
test eax eax +
jz loc_100DF67  +
movzx eax word ptr [eax+5Ch] +
cmp ax 2 +
jnz loc_100DF5C  +
push 2  +
pop eax  +
pop ebp  +
retn   +
cmp ax 3 +
jnz loc_100DF67  +
xor eax eax +
inc eax  +
pop ebp  +
retn   +
mov eax [ebp+arg_0] +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov eax dword_1016A90 +
and [ebp+SystemTimeAsFileTime.dwLowDateTime] 0 +
and [ebp+SystemTimeAsFileTime.dwHighDateTime] 0 +
push ebx  +
push edi  +
mov edi 0BB40E64Eh +
mov ebx 0FFFF0000h +
cmp eax edi +
jz loc_100DFA3  +
test eax ebx +
jz loc_100DFA3  +
not eax  +
mov dword_1016A94 eax +
jmp loc_100DFFE  +
push esi  +
lea eax [ebp+SystemTimeAsFileTime] +
push eax  +
call ds:GetSystemTimeAsFileTime  +
mov esi [ebp+SystemTimeAsFileTime.dwHighDateTime] +
xor esi [ebp+SystemTimeAsFileTime.dwLowDateTime] +
call ds:GetCurrentProcessId  +
xor esi eax +
call ds:GetCurrentThreadId  +
xor esi eax +
call ds:GetTickCount  +
xor esi eax +
lea eax [ebp+PerformanceCount] +
push eax  +
call ds:QueryPerformanceCounter  +
mov eax dword ptr [ebp+PerformanceCount+4] +
xor eax dword ptr [ebp+PerformanceCount] +
xor esi eax +
cmp esi edi +
jz loc_100DFEA  +
test dword_1016A90 ebx +
jnz loc_100DFEF  +
mov esi 0BB40E64Fh +
mov dword_1016A90 esi +
not esi  +
mov dword_1016A94 esi +
pop esi  +
pop edi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 328h +
mov dword_1016FE0 eax +
mov dword_1016FDC ecx +
mov dword_1016FD8 edx +
mov dword_1016FD4 ebx +
mov dword_1016FD0 esi +
mov dword_1016FCC edi +
mov word_1016FF8 ss +
mov word_1016FEC cs +
mov word_1016FC8 ds +
mov word_1016FC4 es +
mov word_1016FC0 fs +
mov word_1016FBC gs +
pushf   +
pop dword_1016FF0  +
mov eax [ebp+0] +
mov dword_1016FE4 eax +
mov eax [ebp+4] +
mov dword_1016FE8 eax +
lea eax [ebp+8] +
mov dword_1016FF4 eax +
mov eax [ebp-320h] +
mov dword_1016F30 10001h +
mov eax dword_1016FE8 +
mov dword_1016EEC eax +
mov dword_1016EE0 0C0000409h +
mov dword_1016EE4 1 +
mov eax dword_1016A90 +
mov [ebp-328h] eax +
mov eax dword_1016A94 +
mov [ebp-324h] eax +
push 0  +
call ds:SetUnhandledExceptionFilter  +
push offset ExceptionInfo  +
call ds:UnhandledExceptionFilter  +
push 0C0000409h  +
call ds:GetCurrentProcess  +
push eax  +
call ds:TerminateProcess  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
test esi esi +
jz loc_100E1F6  +
cmp [ebp+arg_8] 0 +
jz loc_100E1F6  +
mov eax [esi+4] +
mov edi [ebp+arg_1C] +
cmp di [eax+25Ch] +
jz loc_100E174  +
push dword ptr [esi+10h]  +
push [ebp+arg_14]  +
push [ebp+arg_10]  +
push 0  +
push eax  +
push dword ptr [esi]  +
call sub_100FA6B  +
test eax eax +
jz loc_100E1F6  +
push dword ptr [esi+4]  +
push edi  +
call sub_100EE07  +
test eax eax +
jz loc_100E1F6  +
push dword ptr [esi+10h]  +
push edi  +
push [ebp+arg_18]  +
push [ebp+arg_14]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push dword ptr [esi+4]  +
call sub_100EB30  +
test eax eax +
jz loc_100E1F6  +
mov ecx [esi+4] +
mov edx [ecx+240h] +
add edx [ecx+30h] +
mov eax [esi] +
cmp [eax+350h] edx +
jb loc_100E1E0  +
mov edx [eax+0AD0h] +
add edx [eax+0ACCh] +
add edx [ecx+240h] +
add edx [ecx+138h] +
add edx [ecx+30h] +
add edx [eax+244h] +
add edx [eax+13Ch] +
add edx [eax+34h] +
cmp [eax+34Ch] edx +
jb loc_100E1E0  +
xor eax eax +
inc eax  +
jmp loc_100E1F8  +
push dword ptr [esi+10h]  +
push [ebp+arg_14]  +
push [ebp+arg_10]  +
push 0  +
push dword ptr [esi+4]  +
push eax  +
call sub_100FA6B  +
jmp loc_100E1F8  +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
test esi esi +
jnz loc_100E212  +
xor eax eax +
jmp loc_100E257  +
push dword ptr [esi+10h]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push dword ptr [esi+4]  +
push dword ptr [esi]  +
call sub_100FA6B  +
test eax eax +
jz loc_100E20E  +
cmp [ebp+arg_4] 0 +
jz loc_100E237  +
xor eax eax +
inc eax  +
jmp loc_100E257  +
mov eax [esi] +
and [ebp+arg_0] 0 +
push dword ptr [esi+10h]  +
mov ecx [eax+13Ch] +
add ecx [eax+34h] +
push ecx  +
lea ecx [ebp+arg_0] +
push ecx  +
push [ebp+arg_C]  +
push eax  +
call sub_100F3D5  +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jnz loc_100E26D  +
pop ebp  +
retn   +
push dword ptr [eax+10h]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push 0  +
push dword ptr [eax+4]  +
push dword ptr [eax]  +
call sub_100FA6B  +
neg eax  +
sbb eax eax +
neg eax  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
xor edi edi +
inc edi  +
test esi esi +
jnz loc_100E2A4  +
xor eax eax +
jmp loc_100E2D1  +
mov eax [esi+4] +
test eax eax +
jz loc_100E2B9  +
push dword ptr [esi+10h]  +
push eax  +
call sub_100EE4A  +
mov edi eax +
and edi 1 +
mov eax [esi] +
test eax eax +
jz loc_100E2CA  +
push dword ptr [esi+10h]  +
push eax  +
call sub_100EF4B  +
and edi eax +
push esi  +
call dword ptr [esi+0Ch]  +
pop ecx  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
xor esi esi +
cmp edi esi +
jz loc_100E444  +
push 14h  +
mov [edi] esi +
mov [edi+4] esi +
mov [edi+8] esi +
call [ebp+arg_8]  +
mov ebx eax +
pop ecx  +
cmp ebx esi +
jnz loc_100E311  +
push esi  +
push 3  +
push edi  +
call sub_10104BF  +
jmp loc_100E444  +
mov eax [ebp+arg_30] +
mov edi [ebp+arg_C] +
push eax  +
mov [ebx] esi +
mov esi [ebp+arg_2C] +
mov [ebx+10h] eax +
mov [ebx+0Ch] edi +
mov eax [esi+10h] +
add eax 8 +
push eax  +
push [ebp+arg_28]  +
push [ebp+arg_24]  +
push [ebp+arg_20]  +
push [ebp+arg_1C]  +
push [ebp+arg_18]  +
push [ebp+arg_14]  +
push [ebp+arg_10]  +
push edi  +
push [ebp+arg_8]  +
push [ebp+arg_0]  +
call sub_100EE87  +
mov [ebx+4] eax +
test eax eax +
jz loc_100E43D  +
push [ebp+arg_30]  +
mov ecx [esi+1Ch] +
push [ebp+arg_28]  +
mov [eax+258h] ecx +
push [ebp+arg_24]  +
push [ebp+arg_20]  +
push [ebp+arg_1C]  +
push [ebp+arg_18]  +
push [ebp+arg_14]  +
push [ebp+arg_10]  +
push edi  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push 0  +
call sub_100F275  +
mov [ebx] eax +
test eax eax +
jz loc_100E43D  +
lea edi [eax+34Ch] +
mov eax [ebp+arg_2C] +
mov ecx 0C9h +
movs   +
mov ecx [ebx] +
mov dx [eax+20h] +
mov [ecx+0ADAh] dx +
mov ecx [ebx] +
xor edx edx +
mov [ecx+0ADCh] dx +
mov edx [eax+8] +
cmp edx 0EA60h +
ja loc_100E43D  +
mov edi [eax+0Ch] +
mov ecx 0FFh +
cmp edi ecx +
ja loc_100E43D  +
mov esi [eax+10h] +
cmp esi ecx +
ja loc_100E43D  +
test edx edx +
ja loc_100E3EF  +
test edi edi +
ja loc_100E3EF  +
test esi esi +
ja loc_100E3EF  +
mov ecx [ebx] +
and dword ptr [ecx+0AC8h] 0 +
jmp loc_100E3FA  +
mov ecx [ebx] +
add edx 4 +
mov [ecx+0AC8h] edx +
mov ecx [ebx] +
mov edx [ecx+0AC8h] +
add edx 24h +
mov [ecx+0ACCh] edx +
mov ecx [eax+0Ch] +
mov edx [ebx] +
add ecx 8 +
mov [edx+0AD0h] ecx +
mov eax [eax+10h] +
mov ecx [ebx] +
add eax 8 +
mov [ecx+0AD4h] eax +
mov eax [ebx] +
add eax 34Ch +
cmp dword ptr [eax] 0 +
jnz loc_100E439  +
mov dword ptr [eax] 7FFFFFFFh +
mov eax ebx +
jmp loc_100E446  +
push ebx  +
call sub_100E28F  +
pop ecx  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
mov eax [ecx] +
mov edx [ebp+arg_4] +
push esi  +
mov esi [ecx+250h] +
imul esi esi +
add edx eax +
cmp esi edx +
pop esi  +
jb loc_100E479  +
cmp eax edx +
ja loc_100E479  +
xor eax eax +
jmp loc_100E488  +
push 0  +
push 9  +
push dword ptr [ecx+2Ch]  +
call sub_10104BF  +
xor eax eax +
inc eax  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
mov edx [ebp+arg_0] +
push ebx  +
push esi  +
xor esi esi +
cmp [ebp+arg_4] esi +
push edi  +
mov [ebp+var_4] esi +
mov ebx 108h +
jle loc_100E4BE  +
mov ecx [ebp+arg_4] +
mov eax edx +
or dword ptr [eax+4] 0FFFFFFFFh +
mov [eax] esi +
add eax ebx +
dec ecx  +
jnz loc_100E4B3  +
cmp [ebp+arg_4] esi +
mov [ebp+var_8] esi +
jle loc_100E52F  +
add edx 4 +
mov [ebp+var_C] edx +
mov edi edx +
cmp dword ptr [edi] 0FFFFFFFFh +
mov [ebp+arg_0] 65h +
jnz loc_100E522  +
mov eax [ebp+arg_0] +
dec [ebp+arg_0]  +
test eax eax +
jz loc_100E51D  +
push [ebp+arg_1C]  +
lea esi [edi+4] +
push 100h  +
push esi  +
call [ebp+arg_14]  +
add esp 0Ch +
test eax eax +
jz loc_100E518  +
push [ebp+arg_1C]  +
and [ebp+var_4] 0 +
lea eax [ebp+var_4] +
push eax  +
push 180h  +
push 8502h  +
push esi  +
call [ebp+arg_8]  +
add esp 14h +
mov [edi] eax +
cmp dword ptr [edi] 0FFFFFFFFh +
jz loc_100E4DA  +
cmp dword ptr [edi] 0FFFFFFFFh +
jz loc_100E539  +
inc [ebp+var_8]  +
mov eax [ebp+var_8] +
add edi ebx +
cmp eax [ebp+arg_4] +
jl loc_100E4CE  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 20h  +
push [ebp+var_4]  +
push 4  +
push [ebp+arg_18]  +
call sub_10104BF  +
mov esi [ebp+var_C] +
mov edi [ebp+arg_4] +
mov eax [esi] +
cmp eax 0FFFFFFFFh +
jz loc_100E57A  +
push [ebp+arg_1C]  +
and [ebp+var_4] 0 +
lea ecx [ebp+var_4] +
push ecx  +
push eax  +
call [ebp+arg_C]  +
push [ebp+arg_1C]  +
and [ebp+var_4] 0 +
lea eax [ebp+var_4] +
push eax  +
lea eax [esi+4] +
push eax  +
call [ebp+arg_10]  +
add esp 18h +
or dword ptr [esi] 0FFFFFFFFh +
add esi ebx +
dec edi  +
jnz loc_100E54C  +
xor eax eax +
jmp loc_100E532  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_4] +
push edi  +
xor edi edi +
inc edi  +
test ebx ebx +
jle loc_100E602  +
push esi  +
mov esi [ebp+arg_0] +
add esi 4 +
mov eax [esi] +
cmp eax 0FFFFFFFFh +
jz loc_100E5F8  +
push [ebp+arg_14]  +
and [ebp+arg_4] 0 +
lea ecx [ebp+arg_4] +
push ecx  +
push eax  +
call [ebp+arg_8]  +
add esp 0Ch +
test eax eax +
jz loc_100E5CC  +
push [ebp+arg_4]  +
push 4  +
push [ebp+arg_10]  +
call sub_10104BF  +
xor edi edi +
push [ebp+arg_14]  +
or dword ptr [esi] 0FFFFFFFFh +
and [ebp+arg_4] 0 +
lea eax [ebp+arg_4] +
push eax  +
lea eax [esi+4] +
push eax  +
call [ebp+arg_C]  +
add esp 0Ch +
cmp eax 0FFFFFFFFh +
jnz loc_100E5F8  +
push [ebp+arg_4]  +
push 4  +
push [ebp+arg_10]  +
call sub_10104BF  +
xor edi edi +
add esi 108h +
dec ebx  +
jnz loc_100E5A0  +
pop esi  +
mov eax edi +
pop edi  +
pop ebx  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [eax] +
push esi  +
mov esi [ebp+arg_8] +
lea edx [ecx+esi] +
cmp ecx edx +
jbe loc_100E634  +
push 0  +
push 9  +
push [ebp+arg_10]  +
call sub_10104BF  +
xor eax eax +
jmp loc_100E65C  +
push [ebp+arg_14]  +
and [ebp+arg_0] 0 +
lea ecx [ebp+arg_0] +
push ecx  +
push esi  +
push [ebp+arg_4]  +
mov [eax] edx +
push dword ptr [eax+4]  +
call [ebp+arg_C]  +
add esp 14h +
cmp esi eax +
jz loc_100E659  +
push [ebp+arg_0]  +
push 4  +
jmp loc_100E628  +
xor eax eax +
inc eax  +
pop esi  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
lea ecx [eax+1] +
mov dl [eax] +
inc eax  +
test dl dl +
jnz loc_100E671  +
push [ebp+arg_10]  +
sub eax ecx +
push [ebp+arg_C]  +
inc eax  +
push [ebp+arg_8]  +
push eax  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_100E60F  +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
movzx eax word ptr [esi+25Ch] +
and eax 0Fh +
xor ebx ebx +
sub eax ebx +
push edi  +
mov [ebp+var_4] 1 +
jz loc_100E6FA  +
dec eax  +
jz loc_100E6DF  +
dec eax  +
dec eax  +
jz loc_100E6D5  +
sub eax 0Ch +
jz loc_100E6FA  +
push ebx  +
push 5  +
push dword ptr [esi+2Ch]  +
call sub_10104BF  +
jmp loc_100E6FA  +
push dword ptr [esi+4]  +
call sub_101084B  +
jmp loc_100E6E7  +
push dword ptr [esi+4]  +
call sub_10105AE  +
pop ecx  +
test eax eax +
jz loc_100E6FA  +
push ebx  +
push 8  +
push dword ptr [esi+2Ch]  +
call sub_10104BF  +
mov [ebp+var_4] ebx +
lea edi [esi+264h] +
mov eax [edi] +
cmp eax ebx +
jz loc_100E70D  +
push eax  +
call dword ptr [esi+0Ch]  +
pop ecx  +
mov [edi] ebx +
lea edi [esi+260h] +
mov eax [edi] +
cmp eax ebx +
jz loc_100E720  +
push eax  +
call dword ptr [esi+0Ch]  +
pop ecx  +
mov [edi] ebx +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
movzx eax word ptr [esi+25Ch] +
and eax 0Fh +
sub eax 0 +
jz loc_100E780  +
dec eax  +
jz loc_100E763  +
dec eax  +
dec eax  +
jz loc_100E759  +
sub eax 0Ch +
jz loc_100E780  +
push 0  +
push 5  +
jmp loc_100E774  +
push dword ptr [esi+4]  +
call sub_1010825  +
jmp loc_100E76B  +
push dword ptr [esi+4]  +
call sub_101058C  +
pop ecx  +
test eax eax +
jz loc_100E780  +
push 0  +
push 8  +
push dword ptr [esi+2Ch]  +
call sub_10104BF  +
xor eax eax +
jmp loc_100E783  +
xor eax eax +
inc eax  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
movzx eax word ptr [esi+25Ch] +
push edi  +
and eax 0Fh +
xor edi edi +
sub eax edi +
jz loc_100E822  +
dec eax  +
jz loc_100E7EB  +
dec eax  +
dec eax  +
jz loc_100E7B6  +
push edi  +
push 5  +
jmp loc_100E85B  +
lea eax [ebp+arg_0] +
push eax  +
push dword ptr [esi+24Ch]  +
push dword ptr [esi+264h]  +
push dword ptr [esi+254h]  +
push dword ptr [esi+260h]  +
push dword ptr [esi+4]  +
call sub_10107A6  +
add esp 18h +
test eax eax +
jnz loc_100E858  +
mov eax [ebp+arg_4] +
mov ecx [ebp+arg_0] +
mov [eax] ecx +
jmp loc_100E853  +
lea eax [ebp+arg_0] +
push eax  +
push dword ptr [esi+24Ch]  +
push dword ptr [esi+264h]  +
push dword ptr [esi+254h]  +
push dword ptr [esi+260h]  +
push dword ptr [esi+4]  +
call sub_10104E2  +
add esp 18h +
test eax eax +
jnz loc_100E858  +
mov eax [ebp+arg_4] +
mov cx word ptr [ebp+arg_0] +
mov [eax] cx +
jmp loc_100E853  +
mov ecx [esi+24Ch] +
lea eax [esi+254h] +
cmp ecx [eax] +
jb loc_100E858  +
movzx eax word ptr [eax] +
mov ecx [ebp+arg_4] +
mov [ecx] ax +
movzx eax ax +
push eax  +
push dword ptr [esi+260h]  +
push dword ptr [esi+264h]  +
call memcpy  +
add esp 0Ch +
xor eax eax +
inc eax  +
jmp loc_100E865  +
push edi  +
push 8  +
push dword ptr [esi+2Ch]  +
call sub_10104BF  +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 118h +
mov eax dword_1016A90 +
xor eax ebp +
mov [ebp-4] eax +
mov eax [ebp+0Ch] +
push ebx  +
push esi  +
mov esi [ebp+8] +
push edi  +
mov [ebp-118h] eax +
mov eax [esi+248h] +
lea edi [ebp-10Dh] +
and edi 0FFFFFFFCh +
cmp eax 10Bh +
jnb loc_100E8E4  +
push eax  +
push 0  +
push edi  +
call memset  +
push dword ptr [esi+244h]  +
mov ebx [ebp+10h] +
mov ax [ebp+14h] +
push 0  +
push ebx  +
push 0  +
mov [edi+6] ax +
mov [edi+4] bx +
call dword ptr [esi+28h]  +
add esp 1Ch +
cmp eax 0FFFFFFFFh +
jnz loc_100E8F6  +
push 0  +
push 7  +
push dword ptr [esi+2Ch]  +
call sub_10104BF  +
xor eax eax +
inc eax  +
mov ecx [ebp-4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100DC5B  +
leave   +
retn   +
***
push dword ptr [esi+244h]  +
lea eax [esi+30h] +
push dword ptr [esi+2Ch]  +
mov [ebp-114h] eax +
push dword ptr [esi+18h]  +
push dword ptr [esi+248h]  +
push edi  +
push eax  +
call sub_100E60F  +
test eax eax +
jz loc_100E8E4  +
push dword ptr [esi+244h]  +
push dword ptr [esi+2Ch]  +
push dword ptr [esi+18h]  +
push ebx  +
push dword ptr [ebp-118h]  +
push dword ptr [ebp-114h]  +
call sub_100E60F  +
test eax eax +
jz loc_100E8E4  +
xor eax eax +
jmp loc_100E8E7  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
xor edi edi +
cmp [esi+254h] edi +
jnz loc_100E960  +
xor eax eax +
inc eax  +
jmp loc_100E97F  +
push ebx  +
push dword ptr [esi+248h]  +
call dword ptr [esi+8]  +
mov ebx eax +
pop ecx  +
cmp ebx edi +
jnz loc_100E985  +
push edi  +
push 3  +
push dword ptr [esi+2Ch]  +
call sub_10104BF  +
xor eax eax +
pop ebx  +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
push dword ptr [esi+248h]  +
push edi  +
push ebx  +
call memset  +
add esp 0Ch +
lea edi [ebx+4] +
push edi  +
push esi  +
call sub_100E78D  +
test eax eax +
jz loc_100EA11  +
push [ebp+arg_8]  +
mov ax [esi+254h] +
mov [ebx+6] ax +
push dword ptr [esi+2Ch]  +
lea eax [esi+30h] +
push dword ptr [esi+18h]  +
push dword ptr [esi+248h]  +
push ebx  +
push eax  +
call sub_100E60F  +
test eax eax +
jz loc_100EA11  +
push [ebp+arg_8]  +
movzx eax word ptr [edi] +
push dword ptr [esi+2Ch]  +
push dword ptr [esi+18h]  +
push eax  +
push dword ptr [esi+264h]  +
lea eax [esi+30h] +
push eax  +
call sub_100E60F  +
test eax eax +
jz loc_100EA11  +
push [ebp+arg_8]  +
movzx eax word ptr [edi] +
push dword ptr [esi+254h]  +
xor edi edi +
push eax  +
push edi  +
call [ebp+arg_4]  +
add esp 10h +
cmp eax 0FFFFFFFFh +
jnz loc_100EA15  +
push edi  +
push 7  +
push dword ptr [esi+2Ch]  +
call sub_10104BF  +
xor edi edi +
jmp loc_100EA1E  +
mov [esi+254h] edi +
xor edi edi +
inc edi  +
push ebx  +
call dword ptr [esi+0Ch]  +
pop ecx  +
mov eax edi +
jmp loc_100E97E  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
movzx ecx word ptr [esi+25Ch] +
mov eax ecx +
push edi  +
xor edi edi +
and eax 0Fh +
sub eax edi +
lea ebx [esi+250h] +
mov edx 8000h +
mov [ebx] edx +
mov [esi+264h] edi +
mov [esi+260h] edi +
jz loc_100EAE5  +
dec eax  +
jz loc_100EAB7  +
dec eax  +
dec eax  +
jz loc_100EA7C  +
sub eax 0Ch +
jz loc_100EB21  +
push edi  +
push 5  +
jmp loc_100EAD9  +
xor eax eax +
shr ecx 8 +
inc eax  +
and ecx 1Fh +
shl eax cl +
push esi  +
push offset loc_100E870  +
lea edi [esi+24Ch] +
mov [ebp+var_8] eax +
lea eax [esi+4] +
push eax  +
push edi  +
push dword ptr [esi+0Ch]  +
lea eax [ebp+var_8] +
push dword ptr [esi+8]  +
mov [ebp+var_4] 10000h +
push eax  +
push ebx  +
call sub_101070A  +
add esp 20h +
jmp loc_100EAD1  +
lea eax [esi+4] +
push eax  +
lea edi [esi+24Ch] +
push edi  +
push dword ptr [esi+0Ch]  +
push dword ptr [esi+8]  +
push ebx  +
call sub_101061A  +
add esp 14h +
test eax eax +
jz loc_100EAED  +
push 0  +
push 8  +
push dword ptr [esi+2Ch]  +
call sub_10104BF  +
xor eax eax +
jmp loc_100EB24  +
lea edi [esi+24Ch] +
mov [edi] edx +
push dword ptr [edi]  +
call dword ptr [esi+8]  +
pop ecx  +
mov [esi+264h] eax +
test eax eax +
jz loc_100EB0D  +
push dword ptr [ebx]  +
call dword ptr [esi+8]  +
pop ecx  +
mov [esi+260h] eax +
test eax eax +
jnz loc_100EB21  +
push 0  +
push 3  +
push dword ptr [esi+2Ch]  +
call sub_10104BF  +
push esi  +
call sub_100E699  +
jmp loc_100EAE1  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
mov eax [esi] +
mov [ebp+var_C] eax +
xor eax eax +
push edi  +
mov edi [ebp+arg_1C] +
mov [ebp+var_8] ax +
mov eax [ebp+arg_10] +
mov [esi+28h] eax +
push edi  +
lea eax [ebp+arg_0] +
push eax  +
lea eax [ebp-2] +
push eax  +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp-6] +
push eax  +
push [ebp+arg_4]  +
xor ebx ebx +
mov [ebp+arg_0] ebx +
call [ebp+arg_14]  +
add esp 18h +
mov [ebp+arg_1C] eax +
cmp eax 0FFFFFFFFh +
jnz loc_100EB8B  +
push [ebp+arg_0]  +
push 1  +
push dword ptr [esi+2Ch]  +
call sub_10104BF  +
jmp loc_100EC89  +
cmp [ebp+arg_C] ebx +
jz loc_100EB95  +
or word ptr [ebp+var_4+2] 40h +
mov cl byte ptr [ebp+arg_18] +
and cl 0Fh +
lea edx [ebp+arg_0] +
push edi  +
push edx  +
mov edx [esi+250h] +
cmp cl 3 +
mov ecx [esi+254h] +
mov [ebp+arg_0] ebx +
jnz loc_100EC97  +
sub edx ecx +
push edx  +
mov edx [esi+260h] +
add edx ecx +
push edx  +
mov [esi+244h] edi +
push eax  +
jmp loc_100EC55  +
cmp ebx 0FFFFFFFFh +
jz loc_100EC6A  +
and [ebp+arg_0] 0 +
push ebx  +
push esi  +
call sub_100E450  +
test eax eax +
jnz loc_100EC77  +
add [esi+254h] ebx +
mov eax [esi+254h] +
add [esi] ebx +
cmp eax [esi+250h] +
jnz loc_100EC35  +
lea eax [ebp+arg_18] +
push eax  +
push esi  +
call sub_100E78D  +
test eax eax +
jz loc_100EC77  +
push edi  +
push dword ptr [esi+254h]  +
xor ebx ebx +
push ebx  +
push ebx  +
call [ebp+arg_10]  +
add esp 10h +
cmp eax 0FFFFFFFFh +
jz loc_100EC92  +
mov eax [ebp+arg_18] +
mov [esi+240h] eax +
mov [esi+254h] ebx +
mov eax [esi+254h] +
push edi  +
lea ecx [ebp+arg_0] +
push ecx  +
mov ecx [esi+250h] +
sub ecx eax +
push ecx  +
mov ecx [esi+260h] +
add ecx eax +
push ecx  +
push [ebp+arg_1C]  +
call dword ptr [esi+14h]  +
mov ebx eax +
add esp 14h +
test ebx ebx +
jnz loc_100EBD0  +
jmp loc_100ED0A  +
push [ebp+arg_0]  +
push 2  +
push dword ptr [esi+2Ch]  +
call sub_10104BF  +
and [ebp+arg_0] 0 +
push edi  +
lea eax [ebp+arg_0] +
push eax  +
push [ebp+arg_1C]  +
call dword ptr [esi+1Ch]  +
add esp 0Ch +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 20h  +
push ebx  +
push 7  +
jmp loc_100EC6F  +
sub edx ecx +
push edx  +
mov edx [esi+260h] +
add edx ecx +
push edx  +
push eax  +
jmp loc_100ECFE  +
cmp ebx 0FFFFFFFFh +
jz loc_100EC6A  +
and [ebp+arg_0] 0 +
push ebx  +
push esi  +
call sub_100E450  +
test eax eax +
jnz loc_100EC77  +
add [esi+254h] ebx +
mov eax [esi+254h] +
add [esi] ebx +
cmp eax [esi+250h] +
jnz loc_100ECDE  +
push edi  +
push [ebp+arg_10]  +
push esi  +
call sub_100E947  +
test eax eax +
jz loc_100EC77  +
mov eax [esi+254h] +
push edi  +
lea ecx [ebp+arg_0] +
push ecx  +
mov ecx [esi+250h] +
sub ecx eax +
push ecx  +
mov ecx [esi+260h] +
add ecx eax +
push ecx  +
push [ebp+arg_1C]  +
call dword ptr [esi+14h]  +
mov ebx eax +
add esp 14h +
test ebx ebx +
jnz loc_100ECA6  +
and [ebp+arg_0] 0 +
push edi  +
lea eax [ebp+arg_0] +
push eax  +
push [ebp+arg_1C]  +
call dword ptr [esi+1Ch]  +
mov eax [esi] +
sub eax [ebp+var_C] +
add esp 0Ch +
push edi  +
push dword ptr [esi+2Ch]  +
mov [ebp+var_10] eax +
push dword ptr [esi+18h]  +
lea eax [ebp+var_10] +
push 10h  +
push eax  +
lea ebx [esi+138h] +
push ebx  +
call sub_100E60F  +
test eax eax +
jz loc_100EC89  +
push edi  +
push dword ptr [esi+2Ch]  +
push dword ptr [esi+18h]  +
push [ebp+arg_8]  +
push ebx  +
call sub_100E666  +
test eax eax +
jz loc_100EC89  +
xor eax eax +
inc eax  +
jmp loc_100EC8B  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
mov al [esi+25Ch] +
and al 0Fh +
push edi  +
cmp al 3 +
jnz loc_100EDE4  +
mov eax [esi+254h] +
xor edi edi +
cmp eax edi +
jz loc_100EDC4  +
push [ebp+arg_8]  +
push eax  +
push edi  +
push edi  +
call [ebp+arg_4]  +
add esp 10h +
cmp eax 0FFFFFFFFh +
jnz loc_100EDB0  +
push edi  +
push 7  +
push dword ptr [esi+2Ch]  +
call sub_10104BF  +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
lea eax [ebp+arg_8] +
push eax  +
push esi  +
call sub_100E78D  +
test eax eax +
jz loc_100EDA8  +
mov [esi+254h] edi +
push dword ptr [esi+4]  +
call sub_10107FF  +
pop ecx  +
push esi  +
mov [esi+240h] edi +
call sub_100E72F  +
test eax eax +
jz loc_100EDA8  +
xor eax eax +
inc eax  +
mov [esi] edi +
jmp loc_100EDAA  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push esi  +
call sub_100E947  +
push esi  +
mov edi eax +
call sub_100E72F  +
test eax eax +
jz loc_100EDA8  +
mov eax edi +
xor edi edi +
jmp loc_100EDE0  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
mov edi [ebp+arg_4] +
push edi  +
call sub_100E699  +
test eax eax +
jz loc_100EE40  +
mov ax [ebp+arg_0] +
push esi  +
lea esi [edi+25Ch] +
push edi  +
mov [esi] ax +
call sub_100EA2F  +
test eax eax +
jnz loc_100EE3C  +
push 0Fh  +
pop eax  +
mov [esi] ax +
xor eax eax +
jmp loc_100EE3F  +
xor eax eax +
inc eax  +
pop esi  +
pop edi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
push esi  +
push 0Fh  +
call sub_100EE07  +
push [ebp+arg_4]  +
lea eax [esi+30h] +
push dword ptr [esi+2Ch]  +
push dword ptr [esi+24h]  +
push dword ptr [esi+1Ch]  +
push 2  +
push eax  +
call sub_100E588  +
push esi  +
mov edi eax +
call dword ptr [esi+0Ch]  +
pop ecx  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_4] +
push 268h  +
call edi  +
mov esi eax +
xor ebx ebx +
pop ecx  +
cmp esi ebx +
jnz loc_100EEB4  +
push ebx  +
push 3  +
push [ebp+arg_0]  +
call sub_10104BF  +
xor eax eax +
jmp loc_100EF3F  +
mov eax [ebp+arg_0] +
mov edx [ebp+arg_10] +
mov ecx [ebp+arg_8] +
push 0Fh  +
mov [esi+28h] ebx +
mov [esi+264h] ebx +
mov [esi+260h] ebx +
pop ebx  +
push [ebp+arg_2C]  +
mov [esi+8] edi +
mov edi [ebp+arg_1C] +
push eax  +
push [ebp+arg_24]  +
mov [esi+14h] edx +
mov edx [ebp+arg_14] +
mov [esi+20h] edi +
mov edi [ebp+arg_20] +
push edi  +
mov [esi+18h] edx +
mov edx [ebp+arg_18] +
push edx  +
mov [esi+0Ch] ecx +
mov ecx [ebp+arg_C] +
push ecx  +
mov [esi+2Ch] eax +
mov [esi+25Ch] bx +
mov ebx [ebp+arg_28] +
push 2  +
lea eax [esi+30h] +
push eax  +
mov [esi+10h] ecx +
mov [esi+1Ch] edx +
mov [esi+24h] edi +
mov [esi+248h] ebx +
call sub_100E491  +
test eax eax +
jnz loc_100EF2D  +
push [ebp+arg_2C]  +
push esi  +
call sub_100EE4A  +
jmp loc_100EEAD  +
xor eax eax +
mov [esi] eax +
mov [esi+254h] eax +
mov [esi+240h] eax +
mov eax esi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 30h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
push [ebp+arg_4]  +
lea eax [esi+34h] +
push dword ptr [esi+2Ch]  +
push dword ptr [esi+28h]  +
push dword ptr [esi+20h]  +
push 3  +
push eax  +
call sub_100E588  +
push esi  +
mov edi eax +
call dword ptr [esi+10h]  +
pop ecx  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ebp+arg_10] +
and dword ptr [eax] 0 +
and [ebp+var_4] 0 +
push ebx  +
mov ebx [ebp+arg_4] +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
push [ebp+arg_C]  +
mov edi [ebp+arg_8] +
lea eax [ebp+var_4] +
push eax  +
push dword ptr [esi+0AD4h]  +
push ebx  +
push dword ptr [edi+34h]  +
call dword ptr [esi+18h]  +
mov ecx [esi+0AD4h] +
add esp 14h +
cmp eax ecx +
jz loc_100EFD9  +
jbe loc_100EFD5  +
push [ebp+var_4]  +
push 4  +
push dword ptr [edi+2Ch]  +
call sub_10104BF  +
mov eax [ebp+arg_10] +
mov dword ptr [eax] 1 +
xor eax eax +
jmp loc_100F00F  +
movzx eax word ptr [ebx+4] +
cmp eax [edi+24Ch] +
ja loc_100EFCC  +
push [ebp+arg_C]  +
and [ebp+var_4] 0 +
lea eax [ebp+var_4] +
push eax  +
movzx eax word ptr [ebx+4] +
push eax  +
push dword ptr [edi+264h]  +
push dword ptr [edi+34h]  +
call dword ptr [esi+18h]  +
movzx ecx word ptr [ebx+4] +
add esp 14h +
cmp ecx eax +
jnz loc_100EFBF  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
mov esi [ebp+arg_C] +
push edi  +
push [ebp+arg_14]  +
lea eax [ebp+var_4] +
push eax  +
xor ebx ebx +
push 1  +
push ebx  +
push [ebp+arg_0]  +
mov [ebp+var_4] ebx +
call dword ptr [esi+24h]  +
push [ebp+arg_14]  +
mov edi [ebp+arg_4] +
mov [ebp+arg_C] eax +
lea eax [ebp+var_4] +
push eax  +
push [ebp+arg_8]  +
mov [ebp+var_4] ebx +
push edi  +
push [ebp+arg_0]  +
call dword ptr [esi+18h]  +
add esp 28h +
cmp eax ebx +
jle loc_100F0AA  +
mov ecx [ebp+arg_8] +
cmp eax ecx +
jg loc_100F0AA  +
mov al [edi+ecx-1] +
mov byte ptr [ebp+arg_8+3] al +
mov eax edi +
mov [edi+ecx-1] bl +
lea edi [eax+1] +
mov dl [eax] +
inc eax  +
cmp dl bl +
jnz loc_100F074  +
sub eax edi +
lea edx [eax+1] +
cmp edx ecx +
jl loc_100F089  +
cmp byte ptr [ebp+arg_8+3] bl +
jnz loc_100F0AA  +
push [ebp+arg_14]  +
lea ecx [ebp+var_4] +
push ecx  +
mov ecx [ebp+arg_C] +
push ebx  +
lea eax [eax+ecx+1] +
push eax  +
push [ebp+arg_0]  +
mov [ebp+var_4] ebx +
call dword ptr [esi+24h]  +
xor eax eax +
add esp 14h +
inc eax  +
jmp loc_100F0B9  +
push [ebp+var_4]  +
push 4  +
push [ebp+arg_10]  +
call sub_10104BF  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
mov esi [ebp+arg_18] +
push edi  +
mov edi 8000h +
push edi  +
call dword ptr [esi+0Ch]  +
xor ebx ebx +
pop ecx  +
mov [ebp+var_4] eax +
cmp eax ebx +
jnz loc_100F0F6  +
push ebx  +
push 3  +
push [ebp+arg_1C]  +
call sub_10104BF  +
xor eax eax +
jmp loc_100F1A6  +
push [ebp+arg_14]  +
lea eax [ebp+arg_18] +
push eax  +
push ebx  +
push ebx  +
push [ebp+arg_4]  +
mov [ebp+arg_18] ebx +
call dword ptr [esi+24h]  +
add esp 14h +
cmp eax 0FFFFFFFFh +
jnz loc_100F11E  +
push [ebp+var_4]  +
call dword ptr [esi+10h]  +
pop ecx  +
push [ebp+arg_18]  +
push 4  +
jmp loc_100F0E7  +
push [ebp+arg_14]  +
lea eax [ebp+arg_18] +
push eax  +
push edi  +
push [ebp+var_4]  +
mov [ebp+arg_18] ebx +
push [ebp+arg_4]  +
call dword ptr [esi+18h]  +
mov edi eax +
add esp 14h +
cmp edi ebx +
jz loc_100F19C  +
mov ebx [ebp+arg_C] +
cmp edi 8000h +
ja loc_100F1AD  +
push [ebp+arg_14]  +
and [ebp+arg_18] 0 +
lea eax [ebp+arg_18] +
push eax  +
push edi  +
push [ebp+var_4]  +
push [ebp+arg_0]  +
call dword ptr [esi+1Ch]  +
add esp 14h +
cmp edi eax +
jnz loc_100F1AD  +
push [ebp+arg_14]  +
add [ebx] edi +
push [ebp+arg_10]  +
mov eax [ebx] +
and [ebp+arg_18] 0 +
push eax  +
push 1  +
call [ebp+arg_8]  +
add esp 10h +
cmp eax 0FFFFFFFFh +
jz loc_100F1BE  +
push [ebp+arg_14]  +
lea eax [ebp+arg_18] +
push eax  +
push 8000h  +
push [ebp+var_4]  +
push [ebp+arg_4]  +
call dword ptr [esi+18h]  +
mov edi eax +
add esp 14h +
test edi edi +
jnz loc_100F13E  +
push [ebp+var_4]  +
call dword ptr [esi+10h]  +
xor eax eax +
pop ecx  +
inc eax  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 20h  +
push [ebp+var_4]  +
call dword ptr [esi+10h]  +
pop ecx  +
push [ebp+arg_18]  +
push 6  +
jmp loc_100F0E7  +
push [ebp+var_4]  +
call dword ptr [esi+10h]  +
pop ecx  +
push 0  +
push 7  +
jmp loc_100F0E7  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
xor ecx ecx +
mov edx 103h +
mov [eax+18h] dx +
xor edx edx +
mov dword ptr [eax] 42414321h +
mov [eax+4] ecx +
mov [eax+8] ecx +
mov [eax+1Ah] dx +
mov [eax+1Ch] dx +
mov [eax+1Eh] dx +
mov [eax+0Ch] ecx +
mov [eax+10h] ecx +
mov [eax+14h] ecx +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ebp+arg_4] +
and [ebp+var_4] 0 +
lea ecx [eax+1] +
mov dl [eax] +
inc eax  +
test dl dl +
jnz loc_100F222  +
sub eax ecx +
push esi  +
mov esi eax +
mov eax [ebp+arg_4] +
lea ecx [eax+1] +
mov dl [eax] +
inc eax  +
test dl dl +
jnz loc_100F234  +
push [ebp+arg_10]  +
sub eax ecx +
lea ecx [ebp+var_4] +
push ecx  +
inc eax  +
push eax  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call [ebp+arg_8]  +
add esp 14h +
inc esi  +
cmp esi eax +
pop esi  +
jz loc_100F269  +
push [ebp+var_4]  +
push 6  +
push [ebp+arg_C]  +
call sub_10104BF  +
xor eax eax +
jmp locret_100F26C  +
xor eax eax +
inc eax  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_C] +
push 11E8h  +
call edi  +
mov esi eax +
xor ebx ebx +
pop ecx  +
cmp esi ebx +
jnz loc_100F2A2  +
push ebx  +
push 3  +
push [ebp+arg_4]  +
call sub_10104BF  +
xor eax eax +
jmp loc_100F342  +
push [ebp+arg_30]  +
mov eax [ebp+arg_4] +
mov edx [ebp+arg_18] +
mov ecx [ebp+arg_8] +
mov [esi+0Ch] edi +
mov edi [ebp+arg_24] +
push eax  +
mov [esi+24h] edi +
mov edi [ebp+arg_28] +
mov [esi+28h] edi +
mov edi [ebp+arg_2C] +
push edi  +
push [ebp+arg_28]  +
mov [esi+18h] edx +
mov edx [ebp+arg_1C] +
mov [esi+4] ecx +
mov ecx [ebp+arg_10] +
mov [esi+1Ch] edx +
mov edx [ebp+arg_20] +
push edx  +
mov [esi+10h] ecx +
mov ecx [ebp+arg_14] +
push ecx  +
mov [esi+2Ch] eax +
push 3  +
lea eax [esi+34h] +
push eax  +
mov [esi+14h] ecx +
mov [esi+20h] edx +
mov [esi+8] edi +
mov [esi+0BDFh] bl +
mov [esi+0CE0h] bl +
mov [esi+0DE1h] bl +
mov [esi+0EE2h] bl +
mov [esi+0FE3h] bl +
mov [esi+10E4h] bl +
call sub_100E491  +
test eax eax +
jnz loc_100F328  +
push esi  +
call dword ptr [esi+10h]  +
pop ecx  +
jmp loc_100F29B  +
lea eax [esi+994h] +
push eax  +
call sub_100F1D3  +
xor eax eax +
mov [esi+0AD8h] ax +
mov [esi+30h] ebx +
mov eax esi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 34h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_C] +
and dword ptr [ebx] 0 +
and [ebp+arg_C] 0 +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
push [ebp+arg_8]  +
mov edi [ebp+arg_4] +
lea eax [ebp+arg_C] +
push eax  +
push 10h  +
lea eax [esi+9B8h] +
push eax  +
push dword ptr [edi+13Ch]  +
call dword ptr [esi+18h]  +
add esp 14h +
test eax eax +
jnz loc_100F38A  +
xor eax eax +
jmp loc_100F3C9  +
cmp eax 10h +
jz loc_100F3A4  +
push [ebp+arg_C]  +
push 4  +
push dword ptr [edi+2Ch]  +
call sub_10104BF  +
mov dword ptr [ebx] 1 +
jmp loc_100F386  +
push [ebp+arg_8]  +
push dword ptr [edi+2Ch]  +
push esi  +
push 100h  +
add esi 0ADEh +
push esi  +
push dword ptr [edi+13Ch]  +
call sub_100F01B  +
test eax eax +
jz loc_100F39C  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 128h +
mov eax dword_1016A90 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_4] +
mov [ebp+var_128] eax +
mov eax [ebp+arg_8] +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
mov [ebp+var_120] eax +
mov eax [ebp+arg_10] +
push edi  +
mov [ebp+var_10C] eax +
lea eax [esi+56Eh] +
push eax  +
mov edi 100h +
push edi  +
lea eax [ebp+var_104] +
push eax  +
call sub_1004ACF  +
lea eax [esi+46Eh] +
push eax  +
push edi  +
lea eax [ebp+var_104] +
push eax  +
call sub_1004B09  +
push [ebp+var_10C]  +
lea eax [ebp+var_108] +
push eax  +
push 180h  +
lea eax [ebp+var_104] +
push 8302h  +
xor ebx ebx +
push eax  +
mov [ebp+var_108] ebx +
call dword ptr [esi+14h]  +
add esp 14h +
mov [ebp+var_110] eax +
cmp eax 0FFFFFFFFh +
jnz loc_100F484  +
push [ebp+var_108]  +
push 6  +
push dword ptr [esi+2Ch]  +
call sub_10104BF  +
jmp loc_100FA53  +
push dword ptr [esi+0AD0h]  +
call dword ptr [esi+0Ch]  +
pop ecx  +
mov [ebp+var_124] eax +
cmp eax ebx +
jz loc_100FA0E  +
mov ecx [esi+0ACCh] +
lea eax [esi+0BDFh] +
mov [ebp+var_118] ecx +
cmp [eax] bl +
jz loc_100F4F2  +
or word ptr [esi+9B2h] 1 +
lea edi [eax+1] +
mov dl [eax] +
inc eax  +
cmp dl bl +
jnz loc_100F4BD  +
sub eax edi +
mov [ebp+var_114] eax +
lea eax [esi+0CE0h] +
lea edi [eax+1] +
mov dl [eax] +
inc eax  +
cmp dl bl +
jnz loc_100F4D5  +
mov edx [ebp+var_114] +
sub eax edi +
add eax edx +
lea eax [ecx+eax+2] +
mov [ebp+var_118] eax +
mov ecx eax +
lea eax [esi+0FE3h] +
cmp [eax] bl +
jz loc_100F53C  +
or word ptr [esi+9B2h] 2 +
lea edi [eax+1] +
mov dl [eax] +
inc eax  +
cmp dl bl +
jnz loc_100F507  +
sub eax edi +
mov [ebp+var_114] eax +
lea eax [esi+10E4h] +
lea edi [eax+1] +
mov dl [eax] +
inc eax  +
cmp dl bl +
jnz loc_100F51F  +
mov edx [ebp+var_114] +
sub eax edi +
add eax edx +
lea eax [ecx+eax+2] +
mov [ebp+var_118] eax +
mov ecx eax +
mov eax [esi+244h] +
add eax ecx +
cmp ecx eax +
ja loc_100F9F9  +
mov ecx [esi+13Ch] +
add ecx eax +
mov [esi+9A4h] eax +
cmp eax ecx +
ja loc_100F9F9  +
mov eax [esi+34h] +
add eax ecx +
cmp eax ebx +
mov [esi+99Ch] eax +
jl loc_100F9F9  +
cmp eax ecx +
jb loc_100F9F9  +
cmp [esi+0AC8h] ebx +
jbe loc_100F58D  +
or word ptr [esi+9B2h] 4 +
mov ax [esi+0ADAh] +
push [ebp+var_10C]  +
mov [esi+9B4h] ax +
lea eax [esi+0ADCh] +
movzx ecx word ptr [eax] +
mov [esi+9B6h] cx +
inc ecx  +
mov [eax] cx +
lea ecx [ebp+var_108] +
push ecx  +
lea eax [esi+994h] +
push 24h  +
push eax  +
push [ebp+var_110]  +
mov [ebp+var_108] ebx +
call dword ptr [esi+1Ch]  +
add esp 14h +
cmp eax 24h +
jz loc_100F5E9  +
push [ebp+var_108]  +
push 6  +
jmp loc_100F9FC  +
cmp [esi+0AC8h] ebx +
jbe loc_100F6C9  +
mov ax [esi+354h] +
push [ebp+var_10C]  +
lea edi [esi+9C8h] +
mov [edi] ax +
mov al [esi+358h] +
mov [edi+2] al +
mov al [esi+35Ch] +
mov [edi+3] al +
lea eax [ebp+var_108] +
push eax  +
push 4  +
push edi  +
push [ebp+var_110]  +
mov [ebp+var_108] ebx +
call dword ptr [esi+1Ch]  +
add esp 14h +
cmp eax 4 +
jnz loc_100F5DC  +
push 100h  +
push ebx  +
push edi  +
call memset  +
mov ax [esi+0AC8h] +
sub ax 4 +
movzx eax ax +
add esp 0Ch +
mov [ebp+var_11C] eax +
cmp ax bx +
jbe loc_100F6C9  +
mov eax 100h +
mov ecx eax +
cmp word ptr [ebp+var_11C] cx +
ja loc_100F67D  +
movzx eax word ptr [ebp+var_11C] +
push [ebp+var_10C]  +
mov [ebp+var_114] eax +
lea eax [ebp+var_108] +
push eax  +
movzx eax word ptr [ebp+var_114] +
push eax  +
push edi  +
push [ebp+var_110]  +
mov [ebp+var_108] ebx +
call dword ptr [esi+1Ch]  +
mov ecx [ebp+var_114] +
add esp 14h +
cmp cx ax +
jnz loc_100F5DC  +
sub [ebp+var_11C] ecx +
cmp word ptr [ebp+var_11C] bx +
ja loc_100F666  +
test byte ptr [esi+9B2h] 1 +
jz loc_100F71E  +
push [ebp+var_10C]  +
lea eax [esi+0BDFh] +
push dword ptr [esi+2Ch]  +
push dword ptr [esi+1Ch]  +
push eax  +
push [ebp+var_110]  +
call sub_100F212  +
test eax eax +
jz loc_100FA04  +
push [ebp+var_10C]  +
lea eax [esi+0CE0h] +
push dword ptr [esi+2Ch]  +
push dword ptr [esi+1Ch]  +
push eax  +
push [ebp+var_110]  +
call sub_100F212  +
test eax eax +
jz loc_100FA04  +
test byte ptr [esi+9B2h] 2 +
jz loc_100F773  +
push [ebp+var_10C]  +
lea eax [esi+0FE3h] +
push dword ptr [esi+2Ch]  +
push dword ptr [esi+1Ch]  +
push eax  +
push [ebp+var_110]  +
call sub_100F212  +
test eax eax +
jz loc_100FA04  +
push [ebp+var_10C]  +
lea eax [esi+10E4h] +
push dword ptr [esi+2Ch]  +
push dword ptr [esi+1Ch]  +
push eax  +
push [ebp+var_110]  +
call sub_100F212  +
test eax eax +
jz loc_100FA04  +
lea eax [esi+0DE1h] +
push eax  +
mov edi 101h +
push edi  +
lea eax [esi+0BDFh] +
push eax  +
mov [esi+0FE3h] bl +
mov [esi+10E4h] bl +
call sub_1004ACF  +
lea eax [esi+0EE2h] +
push eax  +
push edi  +
lea eax [esi+0CE0h] +
push eax  +
call sub_1004ACF  +
push [ebp+var_10C]  +
lea eax [ebp+var_108] +
push eax  +
push ebx  +
push ebx  +
push dword ptr [esi+248h]  +
mov [ebp+var_108] ebx +
call dword ptr [esi+24h]  +
add esp 14h +
cmp eax 0FFFFFFFFh +
jnz loc_100F7DF  +
push [ebp+var_108]  +
push 4  +
jmp loc_100F9FC  +
mov edi [ebp+var_124] +
jmp loc_100F82D  +
mov eax [esi+13Ch] +
add eax [ebp+var_118] +
push [ebp+var_10C]  +
add eax [esi+244h] +
add [edi] eax +
lea eax [ebp+var_108] +
push eax  +
push dword ptr [esi+0AD0h]  +
mov [ebp+var_108] ebx +
push edi  +
push [ebp+var_110]  +
call dword ptr [esi+1Ch]  +
add esp 14h +
cmp [esi+0AD0h] eax +
jnz loc_100F5DC  +
push [ebp+var_10C]  +
lea eax [ebp+var_108] +
push eax  +
push dword ptr [esi+0AD0h]  +
mov [ebp+var_108] ebx +
push edi  +
push dword ptr [esi+248h]  +
call dword ptr [esi+18h]  +
add esp 14h +
cmp eax [esi+0AD0h] +
jz loc_100F7E7  +
ja loc_100F7D2  +
push dword ptr [esi+2Ch]  +
push esi  +
push [ebp+var_10C]  +
push [ebp+arg_C]  +
push [ebp+var_120]  +
push [ebp+var_128]  +
push dword ptr [esi+140h]  +
push [ebp+var_110]  +
call sub_100F0C5  +
test eax eax +
jz loc_100FA04  +
push dword ptr [esi+2Ch]  +
push esi  +
push [ebp+var_10C]  +
push [ebp+arg_C]  +
push [ebp+var_120]  +
push [ebp+var_128]  +
push dword ptr [esi+38h]  +
push [ebp+var_110]  +
call sub_100F0C5  +
test eax eax +
jz loc_100FA04  +
mov edi [ebp+var_10C] +
push edi  +
lea eax [ebp+var_108] +
push eax  +
push 2  +
push ebx  +
push [ebp+var_110]  +
mov [ebp+var_108] ebx +
call dword ptr [esi+24h]  +
add esp 14h +
mov [ebp+var_120] eax +
cmp eax 0FFFFFFFFh +
jnz loc_100F900  +
push [ebp+var_108]  +
push 6  +
push dword ptr [esi+2Ch]  +
jmp loc_100F9FF  +
push edi  +
lea eax [ebp+var_108] +
push eax  +
push ebx  +
push ebx  +
push [ebp+var_110]  +
mov [ebp+var_108] ebx +
mov dword ptr [esi+994h] 4643534Dh +
call dword ptr [esi+24h]  +
add esp 14h +
cmp eax 0FFFFFFFFh +
jz loc_100F8F0  +
push edi  +
lea eax [ebp+var_108] +
push eax  +
push 4  +
lea eax [esi+994h] +
push eax  +
push [ebp+var_110]  +
call dword ptr [esi+1Ch]  +
add esp 14h +
cmp eax 4 +
jnz loc_100F8F0  +
push edi  +
lea eax [ebp+var_108] +
push eax  +
push [ebp+var_110]  +
mov [ebp+var_108] ebx +
call dword ptr [esi+20h]  +
or [ebp+var_110] 0FFFFFFFFh +
add esp 0Ch +
cmp eax 0FFFFFFFFh +
jz loc_100F8F0  +
push edi  +
push dword ptr [esi+2Ch]  +
lea edi [esi+34h] +
push dword ptr [esi+28h]  +
push dword ptr [esi+20h]  +
push 3  +
push edi  +
call sub_100E588  +
test eax eax +
jz loc_100FA04  +
push [ebp+var_10C]  +
push dword ptr [esi+2Ch]  +
push dword ptr [esi+8]  +
push dword ptr [esi+28h]  +
push dword ptr [esi+20h]  +
push dword ptr [esi+14h]  +
push 3  +
push edi  +
call sub_100E491  +
test eax eax +
jz loc_100FA04  +
push [ebp+var_10C]  +
push [ebp+var_120]  +
push dword ptr [esi+30h]  +
push 2  +
call [ebp+var_128]  +
add esp 10h +
cmp eax 0FFFFFFFFh +
jnz loc_100F9D8  +
push ebx  +
push 7  +
jmp loc_100F8F8  +
sub [esi+34Ch] eax +
lea eax [esi+994h] +
push eax  +
call sub_100F1D3  +
push [ebp+var_124]  +
call dword ptr [esi+10h]  +
xor eax eax +
pop ecx  +
inc eax  +
jmp loc_100FA55  +
push ebx  +
push 9  +
push dword ptr [esi+2Ch]  +
call sub_10104BF  +
push [ebp+var_124]  +
call dword ptr [esi+10h]  +
pop ecx  +
cmp [ebp+var_110] 0FFFFFFFFh +
jz loc_100FA53  +
push [ebp+var_10C]  +
lea eax [ebp+var_108] +
push eax  +
push [ebp+var_110]  +
mov [ebp+var_108] ebx +
call dword ptr [esi+20h]  +
push [ebp+var_10C]  +
lea eax [ebp+var_108] +
push eax  +
lea eax [ebp+var_104] +
push eax  +
mov [ebp+var_108] ebx +
call dword ptr [esi+28h]  +
add esp 18h +
xor eax eax +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100DC5B  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 258h +
mov eax dword_1016A90 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_C] +
mov ecx [ebp+arg_14] +
and [ebp+var_22C] 0 +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
mov [ebp+var_258] eax +
mov eax [ebp+arg_10] +
push ecx  +
push eax  +
push esi  +
mov [ebp+var_21C] esi +
mov [ebp+var_244] eax +
mov [ebp+var_218] ecx +
mov byte ptr [ebx+0DE1h] 0 +
mov byte ptr [ebx+0EE2h] 0 +
call sub_100ED6A  +
test eax eax +
jz loc_1010088  +
and [ebp+var_240] 0 +
lea edi [esi+138h] +
add esi 30h +
mov eax [esi] +
add eax [edi] +
jnz loc_100FAED  +
xor eax eax +
inc eax  +
jmp loc_101008A  +
push dword ptr [ebx+0AD4h]  +
call dword ptr [ebx+0Ch]  +
pop ecx  +
mov [ebp+var_228] eax +
test eax eax +
jz loc_1010088  +
push dword ptr [ebx+0AD4h]  +
call dword ptr [ebx+0Ch]  +
pop ecx  +
mov [ebp+var_230] eax +
test eax eax +
jz loc_1010058  +
push dword ptr [ebx+0AD0h]  +
call dword ptr [ebx+0Ch]  +
pop ecx  +
mov [ebp+var_22C] eax +
test eax eax +
jz loc_1010058  +
push dword ptr [ebx+0AD4h]  +
push 0  +
push [ebp+var_228]  +
call memset  +
push dword ptr [ebx+0AD4h]  +
push 0  +
push [ebp+var_230]  +
call memset  +
push dword ptr [ebx+0AD0h]  +
push 0  +
push [ebp+var_22C]  +
call memset  +
mov eax [esi] +
add esp 24h +
add eax [edi] +
jz loc_101045D  +
mov esi [ebx+13Ch] +
add esi [ebx+0ACCh] +
mov eax [ebp+var_21C] +
add esi [ebx+244h] +
add eax 138h +
add esi [eax-108h] +
add esi [ebx+0AD0h] +
add esi [eax] +
lea eax [ebx+0BDFh] +
add esi [ebx+34h] +
cmp byte ptr [eax] 0 +
mov [ebp+var_220] esi +
jz loc_100FBE6  +
lea edx [eax+1] +
mov cl [eax] +
inc eax  +
test cl cl +
jnz loc_100FBBD  +
sub eax edx +
mov ecx eax +
lea eax [ebx+0CE0h] +
lea edi [eax+1] +
mov dl [eax] +
inc eax  +
test dl dl +
jnz loc_100FBD1  +
sub eax edi +
add eax ecx +
lea esi [esi+eax+2] +
mov [ebp+var_220] esi +
lea eax [ebx+0FE3h] +
cmp byte ptr [eax] 0 +
jz loc_100FC1D  +
lea edx [eax+1] +
mov cl [eax] +
inc eax  +
test cl cl +
jnz loc_100FBF4  +
sub eax edx +
mov ecx eax +
lea eax [ebx+10E4h] +
lea edi [eax+1] +
mov dl [eax] +
inc eax  +
test dl dl +
jnz loc_100FC08  +
sub eax edi +
add eax ecx +
lea esi [esi+eax+2] +
mov [ebp+var_220] esi +
push [ebp+var_218]  +
xor edi edi +
push esi  +
push edi  +
push 1  +
mov [ebp+var_254] esi +
mov [ebp+var_238] edi +
call [ebp+var_244]  +
add esp 10h +
cmp eax 0FFFFFFFFh +
jz loc_101048D  +
push [ebp+var_218]  +
mov edi [ebx+34Ch] +
push dword ptr [ebx+2Ch]  +
lea eax [ebp+var_214] +
push dword ptr [ebx+8]  +
sub edi esi +
push dword ptr [ebx+28h]  +
mov [ebp+var_234] edi +
push dword ptr [ebx+20h]  +
push dword ptr [ebx+14h]  +
push 2  +
push eax  +
call sub_100E491  +
test eax eax +
jz loc_1010058  +
test edi edi +
jl loc_100FC96  +
cmp [ebp+arg_8] 0 +
jnz loc_100FC96  +
and [ebp+var_250] 0 +
jmp loc_100FDC8  +
cmp byte ptr [ebx+0DE1h] 0 +
mov [ebp+var_250] 1 +
jnz loc_100FCD6  +
lea eax [ebx+36Eh] +
push eax  +
mov edi 101h +
push edi  +
lea eax [ebx+0EE2h] +
push eax  +
call sub_1004ACF  +
lea eax [ebx+46Eh] +
push eax  +
push edi  +
lea eax [ebx+0DE1h] +
push eax  +
call sub_1004ACF  +
lea eax [ebx+0FE3h] +
cmp byte ptr [eax] 0 +
jz loc_100FD10  +
lea edx [eax+1] +
mov cl [eax] +
inc eax  +
test cl cl +
jnz loc_100FCE4  +
sub eax edx +
mov edx eax +
lea eax [ebx+10E4h] +
lea edi [eax+1] +
mov cl [eax] +
inc eax  +
test cl cl +
jnz loc_100FCF8  +
push 0FFFFFFFEh  +
sub eax edi +
pop ecx  +
sub ecx eax +
sub ecx edx +
add esi ecx +
mov [ebp+var_220] esi +
push [ebp+var_218]  +
lea eax [ebx+670h] +
mov edi eax +
mov ecx 0C9h +
lea esi [ebx+34Ch] +
movs   +
mov ecx [ebp+var_220] +
inc dword ptr [ebx+684h]  +
push ecx  +
push eax  +
mov [ebx+30h] ecx +
call [ebp+var_258]  +
add esp 0Ch +
cmp eax 0FFFFFFFFh +
jz loc_101049D  +
lea edi [ebx+792h] +
push edi  +
mov esi 101h +
push esi  +
lea eax [ebx+0FE3h] +
push eax  +
call sub_1004ACF  +
lea eax [ebx+692h] +
push eax  +
push esi  +
lea eax [ebx+10E4h] +
push eax  +
call sub_1004ACF  +
mov eax edi +
lea esi [eax+1] +
mov cl [eax] +
inc eax  +
test cl cl +
jnz loc_100FD80  +
sub eax esi +
mov edi eax +
lea eax [ebx+692h] +
lea esi [eax+1] +
mov cl [eax] +
inc eax  +
test cl cl +
jnz loc_100FD94  +
sub eax esi +
mov ecx eax +
mov eax [ebx+34Ch] +
sub eax ecx +
sub eax edi +
sub eax [ebp+var_220] +
dec eax  +
dec eax  +
mov [ebp+var_234] eax +
lea eax [ebx+670h] +
cmp dword ptr [eax] 0 +
jnz loc_100FDC8  +
mov dword ptr [eax] 7FFFFFFFh +
mov edi [ebp+var_21C] +
mov ax [edi+25Ch] +
mov esi [ebp+var_22C] +
push [ebp+var_218]  +
mov [esi+6] ax +
xor eax eax +
mov [esi+4] ax +
mov eax [ebx+34h] +
mov [esi] eax +
xor eax eax +
lea ecx [ebp+var_224] +
push ecx  +
push eax  +
push eax  +
push dword ptr [edi+34h]  +
mov [ebp+var_23C] eax +
mov [ebp+var_224] eax +
call dword ptr [ebx+24h]  +
add esp 14h +
cmp eax 0FFFFFFFFh +
jz loc_10104A1  +
and [ebp+var_224] 0 +
lea eax [ebp+var_224] +
push eax  +
push [ebp+var_218]  +
push edi  +
push [ebp+var_228]  +
push ebx  +
call sub_100EF80  +
test eax eax +
jz loc_101015C  +
mov eax [ebp+var_228] +
add eax 4 +
mov [ebp+var_220] eax +
jmp loc_100FE59  +
mov esi [ebp+var_22C] +
mov eax [ebp+var_23C] +
mov ecx [ebp+var_220] +
movzx ecx word ptr [ecx] +
and [ebp+var_248] 0 +
mov [ebp+var_24C] eax +
mov eax [ebx+0AD4h] +
add ecx eax +
add [ebp+var_23C] ecx +
mov eax [edi+30h] +
mov ecx [ebp+var_234] +
add ecx eax +
cmp [ebp+var_23C] ecx +
jnb loc_100FF31  +
mov eax [ebp+var_228] +
movzx eax word ptr [eax+6] +
add [ebp+var_240] eax +
inc word ptr [esi+4]  +
mov eax [ebp+var_220] +
movzx eax word ptr [eax] +
push 0  +
push eax  +
push dword ptr [edi+264h]  +
call sub_1010882  +
push eax  +
mov eax [ebx+0AD4h] +
sub eax 4 +
push eax  +
push [ebp+var_220]  +
call sub_1010882  +
push [ebp+var_218]  +
mov ecx [ebp+var_228] +
mov [ecx] eax +
push dword ptr [ebx+2Ch]  +
lea eax [ebx+34h] +
push dword ptr [ebx+1Ch]  +
push dword ptr [ebx+0AD4h]  +
push ecx  +
push eax  +
call sub_100E60F  +
test eax eax +
jz loc_1010058  +
push [ebp+var_218]  +
mov eax [ebp+var_220] +
push dword ptr [ebx+2Ch]  +
movzx eax word ptr [eax] +
push dword ptr [ebx+1Ch]  +
push eax  +
mov eax [ebp+var_21C] +
push dword ptr [eax+264h]  +
lea eax [ebx+34h] +
jmp loc_10100EB  +
mov ecx [ebx+0AD4h] +
mov edx [ebp+var_24C] +
add edx ecx +
mov ecx [ebp+var_234] +
add ecx eax +
cmp edx ecx +
jnb loc_101009B  +
sub eax [ebx+0AD4h] +
xor ecx ecx +
sub eax [ebp+var_24C] +
push ecx  +
add eax [ebp+var_234] +
inc word ptr [esi+4]  +
mov esi [ebp+var_230] +
push eax  +
mov [esi+6] cx +
mov [esi+4] ax +
push dword ptr [edi+264h]  +
mov [ebp+var_248] eax +
call sub_1010882  +
push eax  +
mov eax [ebx+0AD4h] +
sub eax 4 +
push eax  +
lea eax [esi+4] +
push eax  +
call sub_1010882  +
push [ebp+var_218]  +
mov [esi] eax +
push dword ptr [ebx+2Ch]  +
lea eax [ebx+34h] +
push dword ptr [ebx+1Ch]  +
push dword ptr [ebx+0AD4h]  +
push esi  +
push eax  +
call sub_100E60F  +
test eax eax +
jz loc_1010058  +
push [ebp+var_218]  +
mov edi [ebp+var_248] +
push dword ptr [ebx+2Ch]  +
mov eax [ebp+var_21C] +
push dword ptr [ebx+1Ch]  +
push edi  +
push dword ptr [eax+264h]  +
lea eax [ebx+34h] +
push eax  +
call sub_100E60F  +
test eax eax +
jz loc_1010058  +
push [ebp+var_218]  +
mov esi [ebp+var_220] +
sub [esi] di +
mov eax [ebp+var_21C] +
push dword ptr [eax+2Ch]  +
lea eax [ebp+var_214] +
push dword ptr [ebx+1Ch]  +
push dword ptr [ebx+0AD4h]  +
push [ebp+var_228]  +
push eax  +
call sub_100E60F  +
test eax eax +
jz loc_1010058  +
push [ebp+var_218]  +
mov eax [ebp+var_21C] +
push dword ptr [eax+2Ch]  +
movzx ecx word ptr [esi] +
push dword ptr [ebx+1Ch]  +
mov eax [eax+264h] +
push ecx  +
add eax edi +
push eax  +
lea eax [ebp+var_214] +
push eax  +
call sub_100E60F  +
test eax eax +
jnz loc_10100FF  +
push [ebp+var_228]  +
call dword ptr [ebx+10h]  +
cmp [ebp+var_230] 0 +
pop ecx  +
jz loc_1010075  +
push [ebp+var_230]  +
call dword ptr [ebx+10h]  +
pop ecx  +
cmp [ebp+var_22C] 0 +
jz loc_1010088  +
push [ebp+var_22C]  +
call dword ptr [ebx+10h]  +
pop ecx  +
xor eax eax +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100DC5B  +
leave   +
retn 18h  +
push [ebp+var_218]  +
lea eax [ebp+var_214] +
push dword ptr [edi+2Ch]  +
push dword ptr [ebx+1Ch]  +
push dword ptr [ebx+0AD4h]  +
push [ebp+var_228]  +
push eax  +
call sub_100E60F  +
test eax eax +
jz loc_1010058  +
push [ebp+var_218]  +
mov eax [ebp+var_21C] +
push dword ptr [eax+2Ch]  +
mov ecx [ebp+var_220] +
push dword ptr [ebx+1Ch]  +
movzx ecx word ptr [ecx] +
push ecx  +
push dword ptr [eax+264h]  +
lea eax [ebp+var_214] +
push eax  +
call sub_100E60F  +
test eax eax +
jz loc_1010058  +
mov esi [ebp+var_220] +
movzx eax word ptr [esi] +
push [ebp+var_218]  +
add eax [ebp+var_248] +
push [ebp+var_254]  +
add [ebp+var_238] eax +
push [ebp+var_238]  +
push 1  +
call [ebp+var_244]  +
add esp 10h +
cmp eax 0FFFFFFFFh +
jz loc_101049D  +
mov edi [ebp+var_21C] +
lea eax [ebp+var_224] +
push eax  +
push [ebp+var_218]  +
push edi  +
push [ebp+var_228]  +
push ebx  +
call sub_100EF80  +
test eax eax +
jnz loc_100FE53  +
cmp [ebp+var_224] 0 +
jnz loc_1010058  +
lea eax [ebx+9AEh] +
inc word ptr [eax]  +
movzx eax word ptr [eax] +
mov ecx 0FFFCh +
cmp cx ax +
jb loc_10104AB  +
push [ebp+var_218]  +
lea eax [ebx+244h] +
push dword ptr [ebx+2Ch]  +
push dword ptr [ebx+1Ch]  +
push dword ptr [ebx+0AD0h]  +
push [ebp+var_22C]  +
push eax  +
call sub_100E60F  +
test eax eax +
jz loc_1010058  +
push [ebp+var_218]  +
mov esi [ebp+var_21C] +
lea eax [ebp+var_224] +
push eax  +
xor edi edi +
push edi  +
push edi  +
push dword ptr [esi+13Ch]  +
mov [ebp+var_224] edi +
call dword ptr [ebx+24h]  +
add esp 14h +
cmp eax 0FFFFFFFFh +
jz loc_10104A1  +
lea eax [ebp+var_224] +
push eax  +
push [ebp+var_218]  +
mov [ebp+var_224] edi +
push esi  +
push ebx  +
call sub_100F34E  +
test eax eax +
jz loc_1010383  +
lea edi [ebx+9B8h] +
mov ax [ebx+9C0h] +
push [ebp+var_218]  +
mov esi 0FFFDh +
mov ecx esi +
and ax cx +
xor edx edx +
cmp ax cx +
setz dl  +
lea eax [ebx+0ADEh] +
push edx  +
push dword ptr [edi]  +
push eax  +
lea eax [ebx+34Ch] +
push eax  +
call dword ptr [ebx+4]  +
add esp 14h +
cmp eax 0FFFFFFFFh +
jz loc_101049D  +
mov ax [ebx+9C0h] +
mov ecx esi +
and ax cx +
cmp ax cx +
jz loc_1010267  +
mov ax [ebx+0AD8h] +
mov [ebx+9C0h] ax +
mov eax [ebx+9BCh] +
add eax [edi] +
cmp eax [ebp+var_240] +
jbe loc_1010293  +
mov ax [ebx+9C0h] +
and ax cx +
cmp ax si +
mov eax 0FFFFh +
jz loc_101028C  +
dec eax  +
mov [ebx+9C0h] ax +
push [ebp+var_218]  +
lea eax [ebx+13Ch] +
push dword ptr [ebx+2Ch]  +
push dword ptr [ebx+1Ch]  +
push 10h  +
push edi  +
push eax  +
call sub_100E60F  +
test eax eax +
jz loc_1010058  +
push [ebp+var_218]  +
lea esi [ebx+0ADEh] +
push dword ptr [ebx+2Ch]  +
lea eax [ebx+13Ch] +
push dword ptr [ebx+1Ch]  +
push esi  +
push eax  +
call sub_100E666  +
test eax eax +
jz loc_1010058  +
lea eax [ebx+9B0h] +
inc word ptr [eax]  +
movzx eax word ptr [eax] +
xor ecx ecx +
cmp cx ax +
jz loc_10104AB  +
mov cx [ebx+9C0h] +
mov eax 0FFFEh +
mov edx eax +
and cx dx +
cmp cx ax +
jnz loc_1010362  +
push [ebp+var_218]  +
dec eax  +
mov [ebx+9C0h] ax +
mov eax [ebp+var_21C] +
push dword ptr [eax+2Ch]  +
lea eax [ebp+var_10C] +
push dword ptr [ebx+1Ch]  +
push 10h  +
push edi  +
push eax  +
call sub_100E60F  +
test eax eax +
jz loc_1010058  +
push [ebp+var_218]  +
mov eax [ebp+var_21C] +
push dword ptr [eax+2Ch]  +
lea eax [ebp+var_10C] +
push dword ptr [ebx+1Ch]  +
push esi  +
push eax  +
call sub_100E666  +
test eax eax +
jz loc_1010058  +
lea eax [ebp+var_224] +
push eax  +
push [ebp+var_218]  +
push [ebp+var_21C]  +
push ebx  +
call sub_100F34E  +
test eax eax +
jnz loc_1010209  +
cmp [ebp+var_224] 0 +
jnz loc_1010058  +
push [ebp+var_218]  +
mov eax [ebp+var_21C] +
push dword ptr [eax+2Ch]  +
add eax 30h +
push dword ptr [eax-0Ch]  +
push dword ptr [eax-14h]  +
push 2  +
push eax  +
call sub_100E588  +
test eax eax +
jz loc_1010058  +
cmp [ebp+var_250] 0 +
mov eax [ebp+var_21C] +
push 42h  +
pop ecx  +
lea esi [ebp+var_214] +
lea edi [eax+30h] +
movs   +
push 42h  +
pop ecx  +
lea esi [ebp+var_10C] +
lea edi [eax+138h] +
movs   +
jz loc_101044D  +
push [ebp+var_218]  +
lea eax [ebp+var_238] +
push [ebp+var_254]  +
push eax  +
push [ebp+var_244]  +
push ebx  +
call sub_100F3D5  +
test eax eax +
jz loc_1010058  +
mov eax [ebx+34Ch] +
test eax eax +
jbe loc_101042B  +
mov ecx [ebx+364h] +
cmp ecx [ebx+688h] +
jnz loc_101042B  +
mov [ebx+670h] eax +
xor eax eax +
lea esi [ebx+670h] +
mov ecx 0C9h +
lea edi [ebx+34Ch] +
mov [ebx+0AD8h] ax +
mov eax [ebp+var_21C] +
movs   +
mov ecx [eax+30h] +
add eax 138h +
add ecx [eax] +
jnz loc_100FB7B  +
cmp [ebp+arg_8] 0 +
jnz loc_101046A  +
inc word ptr [ebx+0AD8h]  +
push [ebp+var_228]  +
call dword ptr [ebx+10h]  +
push [ebp+var_230]  +
call dword ptr [ebx+10h]  +
push [ebp+var_22C]  +
call dword ptr [ebx+10h]  +
add esp 0Ch +
jmp loc_100FAE5  +
push edi  +
push 7  +
push dword ptr [ebx+2Ch]  +
call sub_10104BF  +
jmp loc_1010058  +
push 0  +
jmp loc_101048E  +
push [ebp+var_224]  +
push 4  +
jmp loc_1010490  +
mov eax [ebp+var_21C] +
push 0  +
push 9  +
push dword ptr [eax+2Ch]  +
jmp loc_1010493  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [ebp+arg_4] +
mov [eax] ecx +
mov ecx [ebp+arg_8] +
mov [eax+4] ecx +
mov dword ptr [eax+8] 1 +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
cmp dword ptr [esi] 4349434Dh +
jz loc_10104FB  +
push 2  +
pop eax  +
jmp loc_1010584  +
mov eax [esi+8] +
cmp [ebp+arg_8] eax +
ja loc_10104F3  +
add eax 0Ch +
cmp [ebp+arg_10] eax +
jb loc_10104F3  +
cmp byte ptr [esi+20h] 0 +
push ebx  +
mov ebx [esi+1Ch] +
push edi  +
mov edi 8000h +
jz loc_101051D  +
add ebx edi +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push ebx  +
call memcpy  +
mov edx [ebp+arg_8] +
add esp 0Ch +
cmp edx edi +
jnb loc_1010550  +
mov ecx edi +
sub ecx edx +
mov eax 109h +
cmp ecx eax +
jnb loc_1010542  +
mov eax ecx +
push eax  +
add ebx edx +
push 0  +
push ebx  +
call memset  +
add esp 0Ch +
push [ebp+arg_14]  +
movzx eax byte ptr [esi+20h] +
push eax  +
push dword ptr [esi+18h]  +
push dword ptr [esi+14h]  +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push dword ptr [esi+1Ch]  +
push dword ptr [esi+24h]  +
call sub_1011DD6  +
cmp [ebp+arg_8] edi +
pop edi  +
setz cl  +
neg eax  +
sbb eax eax +
mov [esi+20h] cl +
and eax 4 +
pop ebx  +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
cmp dword ptr [eax] 4349434Dh +
jz loc_10105A1  +
push 2  +
pop eax  +
pop ebp  +
retn   +
mov byte ptr [eax+20h] 0 +
xor eax eax +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
cmp dword ptr [esi] 4349434Dh +
jz loc_10105C4  +
push 2  +
pop eax  +
jmp loc_1010612  +
mov eax [esi+0Ch] +
and dword ptr [esi] 0 +
push edi  +
mov edi [esi+4] +
test eax eax +
jz loc_10105D6  +
push eax  +
call edi  +
pop ecx  +
mov eax [esi+10h] +
test eax eax +
jz loc_10105E1  +
push eax  +
call edi  +
pop ecx  +
mov eax [esi+14h] +
test eax eax +
jz loc_10105EC  +
push eax  +
call edi  +
pop ecx  +
mov eax [esi+18h] +
test eax eax +
jz loc_10105F7  +
push eax  +
call edi  +
pop ecx  +
mov eax [esi+1Ch] +
test eax eax +
jz loc_1010602  +
push eax  +
call edi  +
pop ecx  +
push edi  +
push dword ptr [esi+24h]  +
call sub_10109CE  +
push esi  +
call edi  +
pop ecx  +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_10] +
and dword ptr [eax] 0 +
push ebx  +
mov ebx [ebp+arg_0] +
mov eax [ebx] +
push esi  +
push edi  +
mov edi 8000h +
test eax eax +
jz loc_101063A  +
cmp eax edi +
jbe loc_101063C  +
mov [ebx] edi +
push 28h  +
call [ebp+arg_4]  +
mov esi eax +
pop ecx  +
test esi esi +
jz loc_10106FD  +
push [ebp+arg_4]  +
call sub_10108F3  +
mov [esi+24h] eax +
test eax eax +
jnz loc_1010664  +
push esi  +
call [ebp+arg_8]  +
jmp loc_10106FC  +
mov eax [ebp+arg_8] +
mov ecx [ebp+arg_C] +
mov [esi+4] eax +
mov dword ptr [esi] 4349434Dh +
mov byte ptr [esi+20h] 0 +
mov eax [ebx] +
mov [esi+8] eax +
mov eax [ebx] +
mov ebx [ebp+arg_4] +
add eax 0Ch +
push edi  +
mov [ecx] eax +
call ebx  +
push edi  +
mov [esi+0Ch] eax +
call ebx  +
mov edi 10000h +
push edi  +
mov [esi+10h] eax +
call ebx  +
push edi  +
mov [esi+14h] eax +
call ebx  +
push 10122h  +
mov [esi+18h] eax +
call ebx  +
xor ecx ecx +
add esp 14h +
mov [esi+1Ch] eax +
cmp [esi+0Ch] ecx +
jz loc_10106F6  +
cmp [esi+10h] ecx +
jz loc_10106F6  +
cmp [esi+14h] ecx +
jz loc_10106F6  +
cmp [esi+18h] ecx +
jz loc_10106F6  +
cmp eax ecx +
jz loc_10106F6  +
push 122h  +
push ecx  +
add eax edi +
push eax  +
call memset  +
add esp 0Ch +
push dword ptr [esi+10h]  +
push dword ptr [esi+0Ch]  +
push dword ptr [esi+24h]  +
call sub_10109E3  +
test eax eax +
jnz loc_10106F6  +
mov eax [ebp+arg_10] +
mov [eax] esi +
xor eax eax +
jmp loc_1010700  +
push esi  +
call sub_10105AE  +
pop ecx  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_14] +
and dword ptr [eax] 0 +
push esi  +
push edi  +
mov edi [ebp+arg_8] +
push 18h  +
call edi  +
mov esi eax +
pop ecx  +
test esi esi +
jnz loc_1010728  +
inc eax  +
jmp loc_101079D  +
push ebx  +
push 4354h  +
mov dword ptr [esi+10h] 0B71B00h +
call edi  +
mov ebx [ebp+arg_C] +
pop ecx  +
mov [esi+14h] eax +
test eax eax +
jnz loc_101074D  +
xor edi edi +
inc edi  +
push esi  +
call ebx  +
pop ecx  +
mov eax edi +
jmp loc_101079C  +
push [ebp+arg_1C]  +
mov ecx [ebp+arg_4] +
push [ebp+arg_18]  +
push ebx  +
push edi  +
push dword ptr [ecx+4]  +
push dword ptr [ecx]  +
push eax  +
call sub_1011F69  +
mov [ebp+arg_8] eax +
test eax eax +
jz loc_1010775  +
push dword ptr [esi+14h]  +
call ebx  +
mov edi [ebp+arg_8] +
pop ecx  +
jmp loc_1010745  +
mov eax [ebp+arg_0] +
mov [esi+4] edi +
mov [esi+8] ebx +
mov ecx [eax] +
mov [esi+0Ch] ecx +
mov ecx [ebp+arg_10] +
mov dword ptr [esi] 4349434Ch +
mov eax [eax] +
add eax 1800h +
mov [ecx] eax +
mov eax [ebp+arg_14] +
mov [eax] esi +
xor eax eax +
pop ebx  +
pop edi  +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
cmp dword ptr [eax] 4349434Ch +
jz loc_10107BA  +
push 2  +
jmp loc_10107F7  +
mov ecx [eax+0Ch] +
cmp [ebp+arg_8] ecx +
ja loc_10107B6  +
add ecx 1800h +
cmp [ebp+arg_10] ecx +
jb loc_10107B6  +
push dword ptr [eax+10h]  +
lea ecx [ebp+arg_0] +
push ecx  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push dword ptr [eax+14h]  +
call sub_1011EF6  +
test eax eax +
mov eax [ebp+arg_14] +
jnz loc_10107F2  +
mov ecx [ebp+arg_0] +
mov [eax] ecx +
xor eax eax +
pop ebp  +
retn   +
and dword ptr [eax] 0 +
push 4  +
pop eax  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
cmp dword ptr [eax] 4349434Ch +
jz loc_1010814  +
push 2  +
pop eax  +
pop ebp  +
retn   +
push dword ptr [eax+14h]  +
call sub_1011F48  +
xor eax eax +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
cmp dword ptr [eax] 4349434Ch +
jz loc_101083A  +
push 2  +
pop eax  +
pop ebp  +
retn   +
push dword ptr [eax+14h]  +
call sub_1011EE6  +
xor eax eax +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
cmp dword ptr [esi] 4349434Ch +
jz loc_1010861  +
push 2  +
pop eax  +
jmp loc_101087A  +
push dword ptr [esi+14h]  +
call sub_1011ED6  +
push dword ptr [esi+14h]  +
call dword ptr [esi+8]  +
and dword ptr [esi] 0 +
push esi  +
call dword ptr [esi+8]  +
pop ecx  +
pop ecx  +
xor eax eax +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
push esi  +
mov esi [ebp+arg_4] +
mov eax esi +
shr eax 2 +
push edi  +
mov edi [ebp+arg_8] +
test eax eax +
jle loc_10108C3  +
push ebx  +
movzx edx byte ptr [ecx] +
dec eax  +
inc ecx  +
movzx ebx byte ptr [ecx] +
shl ebx 8 +
or edx ebx +
inc ecx  +
movzx ebx byte ptr [ecx] +
shl ebx 10h +
or edx ebx +
inc ecx  +
movzx ebx byte ptr [ecx] +
shl ebx 18h +
or edx ebx +
inc ecx  +
xor edi edx +
test eax eax +
jg loc_101089C  +
pop ebx  +
and esi 3 +
xor eax eax +
dec esi  +
jz loc_10108E1  +
dec esi  +
jz loc_10108D8  +
dec esi  +
jnz loc_10108E6  +
movzx eax byte ptr [ecx] +
shl eax 10h +
inc ecx  +
movzx edx byte ptr [ecx] +
shl edx 8 +
or eax edx +
inc ecx  +
movzx ecx byte ptr [ecx] +
or eax ecx +
xor eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov ebx 2F6Ch +
push ebx  +
call [ebp+arg_0]  +
mov esi eax +
xor edi edi +
pop ecx  +
cmp esi edi +
jz loc_10109C0  +
push ebx  +
push edi  +
push esi  +
call memset  +
lea eax [esi+0B0h] +
mov [esi+5Ch] eax +
add esp 0Ch +
lea eax [esi+0A98h] +
mov [esi+60h] eax +
push 0Fh  +
pop eax  +
lea ecx [esi+9A4h] +
mov [esi+70h] eax +
mov [esi+78h] ecx +
mov [esi+8Ch] eax +
lea ecx [esi+0F18h] +
lea eax [esi+0F90h] +
mov dword ptr [esi+64h] offset dword_1003C70 +
mov dword ptr [esi+68h] 101h +
mov dword ptr [esi+6Ch] 11Eh +
mov [esi+74h] edi +
mov [esi+7Ch] ecx +
mov dword ptr [esi+80h] offset dword_1003CF8 +
mov [esi+84h] edi +
mov dword ptr [esi+88h] 1Eh +
mov [esi+90h] edi +
mov [esi+94h] eax +
mov [esi+98h] edi +
mov dword ptr [esi+9Ch] offset dword_1003D70 +
mov [esi+0A0h] edi +
mov dword ptr [esi+0A4h] 13h +
mov dword ptr [esi+0A8h] 7 +
mov [esi+0ACh] edi +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_0]  +
call [ebp+arg_4]  +
pop ecx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
mov eax [ebp+arg_0] +
mov edx [ebp+arg_8] +
mov [eax] ecx +
mov [eax+8] edx +
test ecx ecx +
jz loc_1010A02  +
test edx edx +
jz loc_1010A02  +
xor eax eax +
jmp loc_1010A05  +
or eax 0FFFFFFFFh +
pop ebp  +
retn 0Ch  +
***
mov ecx [eax+30h] +
push esi  +
push 10h  +
pop esi  +
sub esi edi +
cmp ecx esi +
jle loc_1010AA0  +
mov esi edx +
shl esi cl +
mov ecx [eax+10h] +
push ebx  +
lea ebx [ecx-2] +
or [eax+2Ch] si +
movzx esi word ptr [eax+0Ch] +
cmp esi ebx +
jnb loc_1010A52  +
mov ecx [eax+4] +
mov bl [eax+2Ch] +
mov [esi+ecx] bl +
inc word ptr [eax+0Ch]  +
movzx ecx word ptr [eax+0Ch] +
mov esi [eax+4] +
mov bl [eax+2Dh] +
mov [ecx+esi] bl +
jmp loc_1010A87  +
cmp esi ecx +
jb loc_1010A5F  +
mov dword ptr [eax+28h] 1 +
jmp loc_1010A6C  +
mov ecx [eax+4] +
mov bl [eax+2Ch] +
mov [esi+ecx] bl +
inc word ptr [eax+0Ch]  +
movzx esi word ptr [eax+0Ch] +
cmp esi [eax+10h] +
jb loc_1010A7E  +
mov dword ptr [eax+28h] 1 +
jmp loc_1010A8B  +
mov ecx [eax+4] +
mov bl [eax+2Dh] +
mov [esi+ecx] bl +
inc word ptr [eax+0Ch]  +
mov esi [eax+30h] +
push 10h  +
pop ecx  +
sub ecx esi +
sar edx cl +
lea ecx [esi+edi-10h] +
pop ebx  +
mov [eax+2Ch] dx +
jmp loc_1010AA8  +
shl edx cl +
or [eax+2Ch] dx +
add ecx edi +
mov [eax+30h] ecx +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
mov ecx [ebp+arg_0] +
sar [ebp+arg_0] 1 +
and ecx 1 +
or eax ecx +
add eax eax +
dec [ebp+arg_4]  +
cmp [ebp+arg_4] 0 +
jg loc_1010AB9  +
movzx eax ax +
shr eax 1 +
pop ebp  +
retn 8  +
***
mov ecx [eax+30h] +
cmp ecx 8 +
push ebx  +
push esi  +
jle loc_1010B32  +
mov edx [eax+10h] +
movzx ecx word ptr [eax+0Ch] +
lea esi [edx-2] +
cmp ecx esi +
jnb loc_1010B0B  +
mov edx [eax+4] +
mov bl [eax+2Ch] +
mov [ecx+edx] bl +
inc word ptr [eax+0Ch]  +
movzx ecx word ptr [eax+0Ch] +
mov bl [eax+2Dh] +
jmp loc_1010B4B  +
xor esi esi +
inc esi  +
cmp ecx edx +
jb loc_1010B17  +
mov [eax+28h] esi +
jmp loc_1010B24  +
mov edx [eax+4] +
mov bl [eax+2Ch] +
mov [ecx+edx] bl +
inc word ptr [eax+0Ch]  +
movzx ecx word ptr [eax+0Ch] +
cmp ecx [eax+10h] +
jb loc_1010B06  +
mov [eax+28h] esi +
jmp loc_1010B55  +
test ecx ecx +
jle loc_1010B55  +
movzx ecx word ptr [eax+0Ch] +
cmp ecx [eax+10h] +
jb loc_1010B48  +
mov dword ptr [eax+28h] 1 +
jmp loc_1010B55  +
mov bl [eax+2Ch] +
mov edx [eax+4] +
mov [ecx+edx] bl +
inc word ptr [eax+0Ch]  +
xor ecx ecx +
and [eax+30h] ecx +
pop esi  +
mov [eax+2Ch] cx +
pop ebx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov ebx ecx +
call sub_1010ADD  +
xor edi edi +
inc edi  +
cmp [ebp+arg_4] 0 +
jz loc_1010C6F  +
mov edx [eax+10h] +
movzx ecx word ptr [eax+0Ch] +
lea esi [edx-2] +
cmp ecx esi +
jnb loc_1010BAE  +
mov edx [eax+4] +
mov [ecx+edx] bl +
inc word ptr [eax+0Ch]  +
movzx esi word ptr [eax+0Ch] +
movzx edx si +
mov esi [eax+4] +
mov ecx ebx +
shr ecx 8 +
mov [edx+esi] cl +
jmp loc_1010BDA  +
cmp ecx edx +
jb loc_1010BB7  +
mov [eax+28h] edi +
jmp loc_1010BC1  +
mov edx [eax+4] +
mov [ecx+edx] bl +
inc word ptr [eax+0Ch]  +
movzx esi word ptr [eax+0Ch] +
cmp esi [eax+10h] +
jb loc_1010BCF  +
mov [eax+28h] edi +
jmp loc_1010BDE  +
mov edx [eax+4] +
mov ecx ebx +
shr ecx 8 +
mov [esi+edx] cl +
inc word ptr [eax+0Ch]  +
mov edx [eax+10h] +
movzx ecx word ptr [eax+0Ch] +
lea esi [edx-2] +
cmp ecx esi +
jnb loc_1010C10  +
mov esi [eax+4] +
mov dl bl +
not dl  +
mov [ecx+esi] dl +
inc word ptr [eax+0Ch]  +
movzx esi word ptr [eax+0Ch] +
mov ecx ebx +
movzx edx si +
mov esi [eax+4] +
not ecx  +
shr ecx 8 +
mov [edx+esi] cl +
jmp loc_1010C3D  +
cmp ecx edx +
jb loc_1010C19  +
mov [eax+28h] edi +
jmp loc_1010C27  +
mov esi [eax+4] +
mov dl bl +
not dl  +
mov [ecx+esi] dl +
inc word ptr [eax+0Ch]  +
movzx esi word ptr [eax+0Ch] +
cmp esi [eax+10h] +
jnb loc_1010C52  +
mov edx [eax+4] +
mov ecx ebx +
not ecx  +
shr ecx 8 +
mov [esi+edx] cl +
inc word ptr [eax+0Ch]  +
jmp loc_1010C6F  +
movzx ecx word ptr [eax+0Ch] +
add ebx 0FFFFh +
cmp ecx [eax+10h] +
jb loc_1010C57  +
mov [eax+28h] edi +
jmp loc_1010C6F  +
mov esi [ebp+arg_0] +
mov edx [eax+4] +
mov [ebp+arg_4] ebx +
mov bl [esi] +
mov [ecx+edx] bl +
inc word ptr [eax+0Ch]  +
inc [ebp+arg_0]  +
mov ebx [ebp+arg_4] +
test bx bx +
jnz loc_1010C43  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
lea ecx [eax+0B0h] +
mov edx 11Eh +
push esi  +
xor esi esi +
mov [ecx] si +
add ecx 4 +
dec edx  +
jnz loc_1010C8C  +
push 1Eh  +
lea ecx [eax+9A4h] +
pop edx  +
xor esi esi +
mov [ecx] si +
add ecx 4 +
dec edx  +
jnz loc_1010CA0  +
push 13h  +
lea ecx [eax+0F90h] +
pop edx  +
xor esi esi +
mov [ecx] si +
add ecx 4 +
dec edx  +
jnz loc_1010CB4  +
xor ecx ecx +
inc ecx  +
mov [eax+4B0h] cx +
xor ecx ecx +
mov [eax+54h] ecx +
mov [eax+50h] ecx +
mov [eax+4Ch] dx +
mov [eax+4Ah] dx +
mov [eax+48h] dx +
mov [eax+4Eh] cl +
mov byte ptr [eax+4Fh] 1 +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov ecx [ebp+arg_0] +
mov edx [eax+ecx*4+104Ch] +
mov [ebp+var_4] edx +
mov edx [eax+40h] +
add ecx ecx +
cmp ecx edx +
jg loc_1010D84  +
push ebx  +
push esi  +
jge loc_1010D40  +
mov esi [eax+ecx*4+1050h] +
mov edx [eax+ecx*4+104Ch] +
movzx ebx word ptr [edi+esi*4] +
movzx edx word ptr [edi+edx*4] +
cmp bx dx +
jb loc_1010D3F  +
jnz loc_1010D40  +
mov dl [esi+eax+1940h] +
mov esi [eax+ecx*4+104Ch] +
cmp dl [esi+eax+1940h] +
ja loc_1010D40  +
inc ecx  +
mov esi [eax+ecx*4+104Ch] +
mov edx [ebp+var_4] +
movzx edx word ptr [edi+edx*4] +
movzx ebx word ptr [edi+esi*4] +
cmp dx bx +
jb loc_1010D82  +
jnz loc_1010D6C  +
mov edx [ebp+var_4] +
mov dl [edx+eax+1940h] +
cmp dl [esi+eax+1940h] +
jbe loc_1010D82  +
mov edx [ebp+arg_0] +
mov [eax+edx*4+104Ch] esi +
mov edx [eax+40h] +
mov [ebp+arg_0] ecx +
add ecx ecx +
cmp ecx edx +
jle loc_1010D09  +
pop esi  +
pop ebx  +
mov ecx [ebp+var_4] +
mov edx [ebp+arg_0] +
mov [eax+edx*4+104Ch] ecx +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
mov ecx [eax+8] +
mov [ebp+var_20] ecx +
mov ecx [eax+0Ch] +
and [ebp+var_4] 0 +
mov [ebp+var_14] ecx +
mov ecx [eax+18h] +
push ebx  +
mov ebx [eax] +
mov [ebp+var_1C] ecx +
mov ecx [eax+14h] +
mov eax [eax+4] +
mov [ebp+var_24] eax +
xor eax eax +
push esi  +
movzx esi ax +
push edi  +
mov eax esi +
shl esi 10h +
or eax esi +
mov [ebp+var_8] ecx +
push 8  +
lea edi [edx+102Ch] +
pop ecx  +
stos   +
mov eax [edx+44h] +
mov eax [edx+eax*4+104Ch] +
xor ecx ecx +
mov [ebx+eax*4+2] cx +
mov esi [edx+44h] +
inc esi  +
mov eax 23Dh +
cmp esi eax +
mov [ebp+var_2C] ebx +
jge loc_1010F54  +
lea ecx [edx+esi*4+104Ch] +
sub eax esi +
mov [ebp+var_10] ecx +
mov [ebp+var_18] eax +
add esi eax +
mov eax [ebp+var_10] +
mov ecx [eax] +
mov eax ecx +
shl eax 2 +
mov [ebp+var_C] eax +
movzx eax word ptr [eax+ebx+2] +
movzx eax word ptr [ebx+eax*4+2] +
inc eax  +
cmp eax [ebp+var_8] +
jle loc_1010E39  +
mov eax [ebp+var_8] +
inc [ebp+var_4]  +
cmp ecx [ebp+var_1C] +
mov edi [ebp+var_C] +
mov [edi+ebx+2] ax +
jg loc_1010E88  +
inc word ptr [edx+eax*2+102Ch]  +
xor edi edi +
cmp ecx [ebp+var_14] +
jl loc_1010E5E  +
sub ecx [ebp+var_14] +
mov edi [ebp+var_20] +
mov edi [edi+ecx*4] +
mov ecx [ebp+var_C] +
movzx ecx word ptr [ecx+ebx] +
add eax edi +
imul eax ecx +
add [edx+50h] eax +
mov eax [ebp+var_24] +
mov [ebp+var_28] ecx +
test eax eax +
jz loc_1010E88  +
mov ecx [ebp+var_C] +
movzx eax word ptr [ecx+eax+2] +
add eax edi +
imul eax [ebp+var_28] +
add [edx+54h] eax +
add [ebp+var_10] 4 +
dec [ebp+var_18]  +
jnz loc_1010E16  +
cmp [ebp+var_4] 0 +
jz loc_1010F54  +
mov eax [ebp+var_8] +
lea ecx [edx+eax*2+102Ch] +
mov edi 0FFFFh +
mov eax [ebp+var_8] +
dec eax  +
lea ebx [edx+eax*2+102Ch] +
jmp loc_1010EBA  +
dec eax  +
dec ebx  +
dec ebx  +
cmp word ptr [ebx] 0 +
jz loc_1010EB7  +
sub [ebp+var_4] 2 +
mov ebx edi +
add [edx+eax*2+102Ch] bx +
lea eax [edx+eax*2+102Eh] +
add word ptr [eax] 2 +
mov eax edi +
add [ecx] ax +
cmp [ebp+var_4] 0 +
jg loc_1010EAA  +
mov eax [ebp+var_8] +
mov [ebp+var_8] eax +
test eax eax +
jz loc_1010F54  +
mov [ebp+var_C] ecx +
mov eax [ebp+var_C] +
movzx eax word ptr [eax] +
mov [ebp+var_10] eax +
test eax eax +
jz loc_1010F47  +
lea ebx [edx+esi*4+104Ch] +
sub ebx 4 +
mov eax [ebx] +
dec esi  +
cmp eax [ebp+var_1C] +
mov [ebp+var_28] ebx +
jg loc_1010F41  +
mov ecx [ebp+var_2C] +
movzx edi word ptr [ebp+var_8] +
lea eax [ecx+eax*4] +
movzx ecx word ptr [eax+2] +
cmp cx di +
jz loc_1010F3E  +
mov ebx [ebp+var_8] +
movzx ecx cx +
sub ebx ecx +
movzx ecx word ptr [eax] +
imul ebx ecx +
add [edx+50h] ebx +
mov ebx [ebp+var_28] +
mov [eax+2] di +
dec [ebp+var_10]  +
cmp [ebp+var_10] 0 +
jnz loc_1010F05  +
dec [ebp+var_8]  +
sub [ebp+var_C] 2 +
cmp [ebp+var_8] 0 +
jnz loc_1010EF1  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 24h +
mov eax dword_1016A90 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
xor edx edx +
push ebx  +
xor ebx ebx +
xor ecx ecx +
inc edx  +
push edi  +
add eax 102Ch +
mov di [eax] +
add di cx +
add di di +
movzx ecx di +
mov word ptr [ebp+edx*2+var_24] cx +
inc edx  +
inc eax  +
inc eax  +
cmp edx 0Fh +
jle loc_1010F81  +
cmp [ebp+arg_4] ebx +
jl loc_1010FCB  +
movzx ecx word ptr [esi+ebx*4+2] +
lea eax [ecx-1] +
cmp eax 0Eh +
ja loc_1010FC5  +
lea eax [ebp+ecx*2+var_24] +
movzx edx word ptr [eax] +
movzx edi dx +
push ecx  +
inc edx  +
push edi  +
mov [eax] dx +
call sub_1010AB2  +
mov [esi+ebx*4] ax +
inc ebx  +
cmp ebx [ebp+arg_4] +
jle loc_1010F9F  +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop ebx  +
call sub_100DC5B  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
or [ebp+var_8] 0FFFFFFFFh +
push esi  +
mov esi [ebp+arg_0] +
mov eax [esi+4] +
mov ecx [esi+10h] +
mov [ebp+var_4] eax +
xor eax eax +
cmp ecx eax +
push edi  +
mov edi [esi] +
mov [ebp+var_C] ecx +
mov [ebx+40h] eax +
mov dword ptr [ebx+44h] 23Dh +
jle loc_1011081  +
cmp word ptr [edi+eax*4] 0 +
jz loc_1011030  +
inc dword ptr [ebx+40h]  +
mov edx [ebx+40h] +
mov [ebx+edx*4+104Ch] eax +
mov [ebp+var_8] eax +
mov byte ptr [eax+ebx+1940h] 0 +
jmp loc_1011037  +
xor edx edx +
mov [edi+eax*4+2] dx +
inc eax  +
cmp eax ecx +
jl loc_101100F  +
jmp loc_1011081  +
cmp [ebp+var_8] 2 +
jge loc_101104C  +
inc [ebp+var_8]  +
mov eax [ebp+var_8] +
jmp loc_101104E  +
xor eax eax +
inc dword ptr [ebx+40h]  +
mov ecx [ebx+40h] +
mov [ebx+ecx*4+104Ch] eax +
xor edx edx +
mov ecx eax +
shl ecx 2 +
inc edx  +
mov [ecx+edi] dx +
mov byte ptr [ebx+eax+1940h] 0 +
mov eax [ebp+var_4] +
dec dword ptr [ebx+50h]  +
test eax eax +
jz loc_1011081  +
movzx eax word ptr [ecx+eax+2] +
sub [ebx+54h] eax +
cmp dword ptr [ebx+40h] 2 +
jl loc_101103E  +
mov eax [ebp+var_8] +
mov [esi+18h] eax +
mov eax [ebx+40h] +
cdq   +
sub eax edx +
mov esi eax +
sar esi 1 +
jmp loc_10110A2  +
push esi  +
mov eax ebx +
call sub_1010CEB  +
dec esi  +
cmp esi 1 +
jge loc_1011099  +
mov eax [ebx+40h] +
mov ecx [ebx+eax*4+104Ch] +
mov esi [ebx+1050h] +
dec eax  +
mov [ebx+40h] eax +
push 1  +
mov eax ebx +
mov [ebx+1050h] ecx +
call sub_1010CEB  +
dec dword ptr [ebx+44h]  +
mov ecx [ebx+44h] +
mov eax [ebx+1050h] +
mov [ebx+ecx*4+104Ch] esi +
dec dword ptr [ebx+44h]  +
mov ecx [ebx+44h] +
mov [ebx+ecx*4+104Ch] eax +
lea ecx [edi+eax*4] +
mov [ebp+var_10] ecx +
mov cx [ecx] +
lea edx [edi+esi*4] +
add cx [edx] +
mov [ebp+var_14] edx +
mov dx cx +
mov ecx [ebp+var_C] +
mov [edi+ecx*4] dx +
mov dl [ebx+esi+1940h] +
mov al [ebx+eax+1940h] +
cmp dl al +
jb loc_101111D  +
movzx eax dl +
jmp loc_1011120  +
movzx eax al +
mov edx [ebp+var_10] +
inc al  +
mov [ebx+ecx+1940h] al +
movzx eax cx +
mov [edx+2] ax +
mov edx [ebp+var_14] +
mov [edx+2] ax +
mov [ebx+1050h] ecx +
inc ecx  +
push 1  +
mov eax ebx +
mov [ebp+var_C] ecx +
call sub_1010CEB  +
cmp dword ptr [ebx+40h] 2 +
jge loc_10110A7  +
dec dword ptr [ebx+44h]  +
mov eax [ebx+44h] +
mov ecx [ebx+1050h] +
mov [ebx+eax*4+104Ch] ecx +
mov eax [ebp+arg_0] +
mov edx ebx +
call sub_1010D9A  +
push [ebp+var_8]  +
mov esi edi +
push ebx  +
call sub_1010F5E  +
pop edi  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
or [ebp+var_8] 0FFFFFFFFh +
and [ebp+var_10] 0 +
push ebx  +
push esi  +
push edi  +
push 7  +
mov esi ecx +
movzx ecx word ptr [eax+2] +
pop edx  +
push 4  +
pop edi  +
test ecx ecx +
jnz loc_10111B5  +
push 3  +
mov edx 8Ah +
pop edi  +
mov ebx 0FFFFh +
mov [eax+esi*4+6] bx +
test esi esi +
jl loc_101124F  +
mov ebx [ebp+arg_0] +
add eax 6 +
inc esi  +
mov [ebp+var_C] esi +
mov esi [ebp+var_10] +
mov [ebp+var_4] eax +
mov eax ecx +
mov ecx [ebp+var_4] +
movzx ecx word ptr [ecx] +
inc esi  +
cmp esi edx +
jge loc_10111E8  +
cmp eax ecx +
jz loc_1011246  +
cmp esi edi +
jge loc_10111F6  +
add [ebx+eax*4+0F90h] si +
jmp loc_1011225  +
test eax eax +
jz loc_1011210  +
cmp eax [ebp+var_8] +
jz loc_1011207  +
inc word ptr [ebx+eax*4+0F90h]  +
inc word ptr [ebx+0FD0h]  +
jmp loc_1011225  +
cmp esi 0Ah +
jg loc_101121E  +
inc word ptr [ebx+0FD4h]  +
jmp loc_1011225  +
inc word ptr [ebx+0FD8h]  +
xor esi esi +
mov [ebp+var_8] eax +
test ecx ecx +
jnz loc_1011237  +
mov edx 8Ah +
push 3  +
jmp loc_1011245  +
cmp eax ecx +
jnz loc_1011240  +
push 6  +
pop edx  +
jmp loc_1011233  +
push 7  +
pop edx  +
push 4  +
pop edi  +
add [ebp+var_4] 4 +
dec [ebp+var_C]  +
jnz loc_10111D7  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
or [ebp+var_C] 0FFFFFFFFh +
push ebx  +
push esi  +
movzx esi word ptr [ecx+2] +
push edi  +
xor ebx ebx +
push 7  +
pop edx  +
mov [ebp+var_8] 4 +
test esi esi +
jnz loc_101128A  +
mov edx 8Ah +
mov [ebp+var_8] 3 +
mov edi [ebp+arg_0] +
test edi edi +
jl loc_1011381  +
add ecx 6 +
inc edi  +
mov [ebp+var_4] ecx +
mov ecx [ebp+var_8] +
mov [ebp+var_10] edi +
jmp loc_10112A7  +
mov esi [ebp+arg_0] +
mov edi [ebp+var_4] +
movzx edi word ptr [edi] +
inc ebx  +
cmp ebx edx +
mov [ebp+arg_0] edi +
jge loc_10112BD  +
cmp esi edi +
jz loc_1011374  +
cmp ebx ecx +
jge loc_10112DB  +
movzx edi word ptr [eax+esi*4+0F92h] +
movzx edx word ptr [eax+esi*4+0F90h] +
call sub_1010A0E  +
dec ebx  +
jnz loc_10112C1  +
jmp loc_1011351  +
test esi esi +
jz loc_1011314  +
cmp esi [ebp+var_C] +
jz loc_10112FA  +
movzx edi word ptr [eax+esi*4+0F92h] +
movzx edx word ptr [eax+esi*4+0F90h] +
call sub_1010A0E  +
dec ebx  +
movzx edi word ptr [eax+0FD2h] +
movzx edx word ptr [eax+0FD0h] +
call sub_1010A0E  +
lea edx [ebx-3] +
push 2  +
jmp loc_101134B  +
cmp ebx 0Ah +
jg loc_1011333  +
movzx edi word ptr [eax+0FD6h] +
movzx edx word ptr [eax+0FD4h] +
call sub_1010A0E  +
lea edx [ebx-3] +
push 3  +
jmp loc_101134B  +
movzx edi word ptr [eax+0FDAh] +
movzx edx word ptr [eax+0FD8h] +
call sub_1010A0E  +
lea edx [ebx-0Bh] +
push 7  +
pop edi  +
call sub_1010A0E  +
xor ebx ebx +
mov [ebp+var_C] esi +
cmp [ebp+arg_0] ebx +
jnz loc_1011364  +
mov edx 8Ah +
push 3  +
jmp loc_1011373  +
cmp esi [ebp+arg_0] +
jnz loc_101136E  +
push 6  +
pop edx  +
jmp loc_1011360  +
push 7  +
pop edx  +
push 4  +
pop ecx  +
add [ebp+var_4] 4 +
dec [ebp+var_10]  +
jnz loc_10112A4  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
push ebx  +
push edi  +
push 5  +
add edx 0FFFFFEFFh +
pop edi  +
call sub_1010A0E  +
mov ebx [ebp+arg_4] +
dec ebx  +
mov edx ebx +
call sub_1010A0E  +
push 4  +
lea edx [esi-4] +
pop edi  +
call sub_1010A0E  +
and [ebp+arg_4] 0 +
test esi esi +
jle loc_10113E5  +
mov ecx [ebp+arg_4] +
movzx ecx ds:byte_1003CE4[ecx] +
movzx edx word ptr [eax+ecx*4+0F92h] +
push 3  +
pop edi  +
call sub_1010A0E  +
inc [ebp+arg_4]  +
cmp [ebp+arg_4] esi +
jl loc_10113C3  +
mov ecx [ebp+arg_0] +
dec ecx  +
push ecx  +
lea ecx [eax+0B0h] +
call sub_101125B  +
push ebx  +
lea ecx [eax+9A4h] +
call sub_101125B  +
pop edi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
movzx esi word ptr [eax+48h] +
push edi  +
mov edi [eax] +
mov [esi+edi] cl +
inc word ptr [eax+48h]  +
test edx edx +
jnz loc_1011431  +
lea ecx [eax+ecx*4+0B0h] +
inc word ptr [ecx]  +
jmp loc_1011482  +
movzx ecx byte ptr [eax+ecx+1B7Dh] +
dec edx  +
lea ecx [eax+ecx*4+4B4h] +
inc word ptr [ecx]  +
cmp edx 100h +
jge loc_1011456  +
movzx ecx byte ptr [eax+edx+1C7Dh] +
jmp loc_1011463  +
mov ecx edx +
sar ecx 7 +
movzx ecx byte ptr [ecx+eax+1D7Dh] +
lea ecx [eax+ecx*4+9A4h] +
inc word ptr [ecx]  +
movzx ecx word ptr [eax+4Ah] +
mov esi [eax+8] +
mov [esi+ecx*2] dx +
mov cl [eax+4Fh] +
inc word ptr [eax+4Ah]  +
or [eax+4Eh] cl +
shl byte ptr [eax+4Fh] 1 +
test byte ptr [eax+48h] 7 +
jnz loc_10114A5  +
movzx ecx word ptr [eax+4Ch] +
mov dl [eax+4Eh] +
mov [ecx+eax+1F6Ch] dl +
inc word ptr [eax+4Ch]  +
mov byte ptr [eax+4Eh] 0 +
mov byte ptr [eax+4Fh] 1 +
movzx esi word ptr [eax+48h] +
test esi 0FFFh +
jnz loc_101150D  +
movzx edx word ptr [eax+3Ch] +
movzx ecx si +
shl ecx 3 +
sub edx [eax+34h] +
mov [ebp+var_4] offset dword_1003CF8 +
lea esi [eax+9A4h] +
push ebx  +
mov edi [ebp+var_4] +
mov edi [edi] +
movzx ebx word ptr [esi] +
add [ebp+var_4] 4 +
add edi 5 +
imul edi ebx +
add ecx edi +
add esi 4 +
cmp [ebp+var_4] offset dword_1003D70 +
jl loc_10114CC  +
movzx esi word ptr [eax+48h] +
mov di si +
shr di 1 +
pop ebx  +
cmp [eax+4Ah] di +
jnb loc_101150D  +
shr ecx 2 +
and ecx 3FFFFFFEh +
and edx 0FFFFFFFEh +
cmp ecx edx +
jb loc_1011522  +
mov ecx 7FFFh +
cmp si cx +
jz loc_1011522  +
inc ecx  +
cmp [eax+4Ah] cx +
jz loc_1011522  +
xor eax eax +
jmp loc_1011525  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
xor ecx ecx +
push edi  +
mov [ebp+var_8] ecx +
mov [ebp+var_10] ecx +
mov [ebp+var_C] ecx +
mov [ebp+var_1] cl +
cmp [eax+48h] cx +
jz loc_101162E  +
push ebx  +
push esi  +
test byte ptr [ebp+var_8] 7 +
jnz loc_1011568  +
movzx ecx word ptr [ebp+var_C] +
mov cl [ecx+eax+1F6Ch] +
inc [ebp+var_C]  +
mov [ebp+var_1] cl +
movzx ecx word ptr [ebp+var_8] +
mov edx [eax] +
inc [ebp+var_8]  +
test [ebp+var_1] 1 +
movzx ebx byte ptr [ecx+edx] +
mov ecx [ebp+arg_0] +
jnz loc_101158D  +
lea ebx [ecx+ebx*4] +
movzx edi word ptr [ebx+2] +
movzx edx word ptr [ebx] +
jmp loc_1011616  +
movzx esi byte ptr [ebx+eax+1B7Dh] +
movzx edi word ptr [ecx+esi*4+406h] +
movzx edx word ptr [ecx+esi*4+404h] +
call sub_1010A0E  +
mov edi ds:dword_1003C70[esi*4] +
test edi edi +
jz loc_10115C3  +
mov edx ebx +
sub edx [eax+esi*4+1E80h] +
call sub_1010A0E  +
movzx ecx word ptr [ebp+var_10] +
mov edx [eax+8] +
movzx ebx word ptr [edx+ecx*2] +
inc [ebp+var_10]  +
cmp ebx 100h +
jge loc_10115E3  +
movzx esi byte ptr [ebx+eax+1C7Dh] +
jmp loc_10115F0  +
mov ecx ebx +
sar ecx 7 +
movzx esi byte ptr [ecx+eax+1D7Dh] +
mov ecx [ebp+arg_4] +
lea ecx [ecx+esi*4] +
movzx edi word ptr [ecx+2] +
movzx edx word ptr [ecx] +
call sub_1010A0E  +
mov edi ds:dword_1003CF8[esi*4] +
test edi edi +
jz loc_101161B  +
mov edx ebx +
sub edx [eax+esi*4+1EF4h] +
call sub_1010A0E  +
mov cx word ptr [ebp+var_8] +
shr [ebp+var_1] 1 +
cmp cx [eax+48h] +
jb loc_1011551  +
pop esi  +
pop ebx  +
mov ecx [ebp+arg_0] +
movzx edi word ptr [ecx+402h] +
movzx edx word ptr [ecx+400h] +
call sub_1010A0E  +
pop edi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
mov eax 8000h +
push esi  +
xor esi esi +
mov [ebp+var_4] eax +
mov ecx [edi+18h] +
lea edx [ecx+esi] +
movzx ecx word ptr [edx] +
mov ebx eax +
cmp cx bx +
jb loc_1011677  +
movzx ecx cx +
sub ecx eax +
jmp loc_1011679  +
xor ecx ecx +
inc esi  +
inc esi  +
dec [ebp+var_4]  +
mov [edx] cx +
jnz loc_1011660  +
xor esi esi +
mov [ebp+var_4] eax +
mov ecx [edi+1Ch] +
lea edx [ecx+esi] +
movzx ecx word ptr [edx] +
mov ebx eax +
cmp cx bx +
jb loc_101169F  +
movzx ecx cx +
sub ecx eax +
jmp loc_10116A1  +
xor ecx ecx +
inc esi  +
inc esi  +
dec [ebp+var_4]  +
mov [edx] cx +
jnz loc_1011688  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
movzx edx word ptr [esi+3Ch] +
mov eax [esi+14h] +
movzx ecx dx +
add ecx eax +
push ebx  +
mov ebx [ebp+arg_0] +
lea eax [ecx+102h] +
push edi  +
mov edi [esi+38h] +
mov [ebp+var_10] eax +
mov al [edi+ecx-1] +
mov [ebp+var_1] al +
mov al [edi+ecx] +
mov [ebp+var_2] al +
mov eax 7EFAh +
mov [ebp+var_8] 1000h +
cmp dx ax +
jbe loc_1011705  +
add edx 0FFFF8106h +
movzx eax dx +
mov [ebp+var_C] eax +
jmp loc_1011709  +
and [ebp+var_C] 0 +
cmp edi 102h +
jl loc_1011718  +
mov [ebp+var_8] 400h +
mov eax [esi+14h] +
movzx edx bx +
mov [ebp+var_14] edx +
add edx eax +
mov al [ebp+var_2] +
cmp [edx+edi] al +
jnz loc_10117D6  +
mov al [ebp+var_1] +
cmp [edx+edi-1] al +
jnz loc_10117D6  +
mov al [edx] +
cmp al [ecx] +
jnz loc_10117D6  +
inc edx  +
mov al [edx] +
cmp al [ecx+1] +
jnz loc_10117D6  +
inc edx  +
mov bl [edx] +
lea eax [ecx+2] +
cmp bl [eax] +
jnz loc_10117D6  +
mov ebx [ebp+var_10] +
mov ecx eax +
inc ecx  +
mov al [ecx] +
inc edx  +
cmp al [edx] +
jnz loc_10117A5  +
inc ecx  +
mov al [ecx] +
inc edx  +
cmp al [edx] +
jnz loc_10117A5  +
inc ecx  +
mov al [ecx] +
inc edx  +
cmp al [edx] +
jnz loc_10117A5  +
inc ecx  +
mov al [ecx] +
inc edx  +
cmp al [edx] +
jnz loc_10117A5  +
inc ecx  +
mov al [ecx] +
inc edx  +
cmp al [edx] +
jnz loc_10117A5  +
inc ecx  +
mov al [ecx] +
inc edx  +
cmp al [edx] +
jnz loc_10117A5  +
inc ecx  +
mov al [ecx] +
inc edx  +
cmp al [edx] +
jnz loc_10117A5  +
inc ecx  +
mov al [ecx] +
inc edx  +
cmp al [edx] +
jnz loc_10117A5  +
cmp ecx ebx +
jb loc_1011761  +
sub ecx ebx +
mov eax 102h +
add ecx eax +
mov edx ecx +
cmp edx edi +
lea ecx [ebx-102h] +
jle loc_10117D6  +
cmp edx eax +
mov di word ptr [ebp+arg_0] +
mov [esi+3Eh] di +
mov edi edx +
jge loc_1011800  +
lea eax [edx+ecx] +
mov dl [eax-1] +
mov al [eax] +
mov [ebp+var_1] dl +
mov [ebp+var_2] al +
mov eax [ebp+var_14] +
mov edx [esi+1Ch] +
and eax 7FFFh +
movzx ebx word ptr [edx+eax*2] +
mov [ebp+arg_0] ebx +
cmp bx word ptr [ebp+var_C] +
jbe loc_1011800  +
add [ebp+var_8] 0FFFFh +
cmp word ptr [ebp+var_8] 0 +
jnz loc_1011718  +
mov eax edi +
pop edi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
xor edx edx +
mov [ebx+58h] edx +
cmp [ebx+0F1Ah] dx +
jnz locret_10119EA  +
push esi  +
lea ecx [ebx+1E80h] +
xor eax eax +
mov esi offset dword_1003C70 +
mov [ebp+var_8] ecx +
push edi  +
mov ecx [ebp+var_8] +
and [ebp+var_4] 0 +
xor edi edi +
mov [ecx] eax +
mov ecx [esi] +
inc edi  +
shl edi cl +
test edi edi +
jle loc_1011863  +
xor edi edi +
mov [ebx+eax+1B7Dh] dl +
mov ecx [esi] +
inc edi  +
shl edi cl +
inc eax  +
inc [ebp+var_4]  +
cmp [ebp+var_4] edi +
jl loc_101184C  +
add [ebp+var_8] 4 +
add esi 4 +
inc edx  +
cmp esi offset dword_1003CE0 +
jl loc_1011838  +
mov [eax+ebx+1B7Ch] dl +
lea ecx [ebx+1EF4h] +
xor eax eax +
xor edx edx +
mov esi offset dword_1003CF8 +
mov [ebp+var_8] ecx +
mov ecx [ebp+var_8] +
and [ebp+var_4] 0 +
xor edi edi +
mov [ecx] eax +
mov ecx [esi] +
inc edi  +
shl edi cl +
test edi edi +
jle loc_10118B7  +
xor edi edi +
mov [ebx+eax+1C7Dh] dl +
mov ecx [esi] +
inc edi  +
shl edi cl +
inc eax  +
inc [ebp+var_4]  +
cmp [ebp+var_4] edi +
jl loc_10118A0  +
add [ebp+var_8] 4 +
add esi 4 +
inc edx  +
cmp esi offset dword_1003D38 +
jl loc_101188C  +
sar eax 7 +
cmp edx 1Eh +
jge loc_1011926  +
lea ecx [ebx+edx*4+1EF4h] +
lea esi dword_1003CF8[edx*4] +
mov [ebp+var_8] ecx +
mov edi [ebp+var_8] +
and [ebp+var_4] 0 +
mov ecx eax +
shl ecx 7 +
mov [edi] ecx +
mov ecx [esi] +
xor edi edi +
sub ecx 7 +
inc edi  +
shl edi cl +
test edi edi +
jle loc_1011916  +
mov [ebx+eax+1D7Dh] dl +
mov ecx [esi] +
xor edi edi +
sub ecx 7 +
inc edi  +
shl edi cl +
inc eax  +
inc [ebp+var_4]  +
cmp [ebp+var_4] edi +
jl loc_10118FC  +
add [ebp+var_8] 4 +
add esi 4 +
inc edx  +
cmp esi offset dword_1003D70 +
jl loc_10118E0  +
xor eax eax +
movzx esi ax +
push 8  +
mov eax esi +
pop edx  +
shl esi 10h +
or eax esi +
lea edi [ebx+102Ch] +
mov ecx edx +
stos   +
lea eax [ebx+0A9Ah] +
mov ecx 90h +
pop edi  +
mov esi edx +
mov [eax] si +
add eax 4 +
inc word ptr [ebx+103Ch]  +
dec ecx  +
jnz loc_101194B  +
push 70h  +
lea eax [ebx+0CDAh] +
pop ecx  +
push 9  +
pop esi  +
mov [eax] si +
add eax 4 +
inc word ptr [ebx+103Eh]  +
dec ecx  +
jnz loc_1011966  +
push 18h  +
lea eax [ebx+0E9Ah] +
pop ecx  +
push 7  +
pop esi  +
mov [eax] si +
add eax 4 +
inc word ptr [ebx+103Ah]  +
dec ecx  +
jnz loc_1011982  +
lea eax [ebx+0EFAh] +
mov ecx edx +
mov esi edx +
mov [eax] si +
add eax 4 +
inc word ptr [ebx+103Ch]  +
dec ecx  +
jnz loc_101199D  +
push 11Fh  +
lea esi [ebx+0A98h] +
push ebx  +
call sub_1010F5E  +
xor esi esi +
lea edx [ebx+0F18h] +
push 5  +
pop eax  +
push eax  +
push esi  +
mov [edx+2] ax +
call sub_1010AB2  +
mov [edx] ax +
inc esi  +
add edx 4 +
cmp esi 1Eh +
jl loc_10119C8  +
mov eax ebx +
call sub_1010C80  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
mov ebx eax +
movzx eax word ptr [ebx+4Ch] +
mov cl [ebx+4Eh] +
push esi  +
mov [eax+ebx+1F6Ch] cl +
push edi  +
lea eax [ebx+5Ch] +
push eax  +
call sub_1010FE0  +
lea eax [ebx+78h] +
push eax  +
call sub_1010FE0  +
mov ecx [ebx+74h] +
lea eax [ebx+0B0h] +
push ebx  +
mov [ebp+var_8] eax +
call sub_101118A  +
mov ecx [ebx+90h] +
lea eax [ebx+9A4h] +
push ebx  +
mov [ebp+var_4] eax +
call sub_101118A  +
lea eax [ebx+94h] +
push eax  +
call sub_1010FE0  +
push 12h  +
pop esi  +
push 3  +
pop edi  +
movzx eax ds:byte_1003CE4[esi] +
cmp word ptr [ebx+eax*4+0F92h] 0 +
jnz loc_1011A6D  +
dec esi  +
cmp esi edi +
jge loc_1011A56  +
mov ecx [ebx+54h] +
mov eax esi +
imul eax eax +
add eax 11h +
add [ebx+50h] eax +
mov eax [ebx+50h] +
add eax 0Ah +
add ecx 0Ah +
shr eax 3 +
shr ecx 3 +
cmp ecx eax +
ja loc_1011A90  +
mov eax ecx +
mov edx [ebp+arg_4] +
add edx 4 +
cmp edx eax +
ja loc_1011AD0  +
cmp [ebp+arg_0] 0 +
jz loc_1011AD0  +
mov edx [ebp+arg_8] +
mov eax ebx +
call sub_1010A0E  +
mov ecx [ebx+58h] +
mov eax [ebp+arg_4] +
add ecx 0Ah +
and ecx 0FFFFFFF8h +
add eax 4 +
lea eax [ecx+eax*8] +
mov ecx [ebp+arg_4] +
push 1  +
push [ebp+arg_0]  +
mov [ebx+58h] eax +
mov eax ebx +
call sub_1010B66  +
jmp loc_1011B2B  +
mov edx [ebp+arg_8] +
cmp ecx eax +
mov eax ebx +
jnz loc_1011AFB  +
add edx 2 +
call sub_1010A0E  +
lea eax [ebx+0F18h] +
push eax  +
lea eax [ebx+0A98h] +
push eax  +
mov eax ebx +
call sub_101152E  +
mov eax [ebx+54h] +
jmp loc_1011B26  +
add edx 4 +
call sub_1010A0E  +
mov eax [ebx+90h] +
inc esi  +
inc eax  +
push eax  +
mov eax [ebx+74h] +
inc eax  +
push eax  +
mov eax ebx +
call sub_101138D  +
push [ebp+var_4]  +
push [ebp+var_8]  +
call sub_101152E  +
mov eax [ebx+50h] +
add eax edi +
add [ebx+58h] eax +
mov eax ebx +
call sub_1010C80  +
cmp [ebp+arg_8] 0 +
jz loc_1011B41  +
call sub_1010ADD  +
add dword ptr [ebx+58h] 7 +
mov eax [ebx+58h] +
pop edi  +
pop esi  +
shr eax 3 +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push ebx  +
push esi  +
xor ebx ebx +
mov esi eax +
mov [ebp+var_8] ebx +
mov [ebp+var_4] 2 +
cmp [esi+24h] ebx +
jz loc_1011D9B  +
push edi  +
mov edi 7FFFh +
cmp dword ptr [esi+24h] 2 +
jle loc_1011BB9  +
movzx ecx word ptr [esi+3Ch] +
mov eax [esi+14h] +
movzx eax byte ptr [eax+ecx+2] +
mov edx [esi+20h] +
shl edx 5 +
xor eax edx +
mov edx [esi+18h] +
and eax edi +
mov [esi+20h] eax +
movzx eax word ptr [edx+eax*2] +
mov edx [esi+1Ch] +
and ecx edi +
mov [edx+ecx*2] ax +
mov ecx [esi+20h] +
mov edx [esi+18h] +
mov bx [esi+3Ch] +
mov [edx+ecx*2] bx +
jmp loc_1011BBE  +
xor eax eax +
mov [esi+38h] ebx +
mov ecx [ebp+var_4] +
mov [esi+38h] ecx +
movzx ecx word ptr [esi+3Eh] +
mov [ebp+var_C] ecx +
mov [ebp+var_4] 2 +
test ax ax +
jz loc_1011C2E  +
cmp dword ptr [esi+38h] 20h +
jge loc_1011C2E  +
movzx ecx word ptr [esi+3Ch] +
movzx edx cx +
movzx ebx ax +
sub edx ebx +
cmp edx 7EFAh +
jg loc_1011C2E  +
mov edx 0FFFDh +
cmp cx dx +
jnb loc_1011C2E  +
push eax  +
call sub_10116B4  +
mov [ebp+var_4] eax +
mov eax [esi+24h] +
cmp [ebp+var_4] eax +
jle loc_1011C0F  +
mov [ebp+var_4] eax +
cmp [ebp+var_4] 3 +
jnz loc_1011C2E  +
movzx eax word ptr [esi+3Eh] +
movzx ecx word ptr [esi+3Ch] +
sub ecx eax +
cmp ecx 1000h +
jle loc_1011C2E  +
mov [ebp+var_4] 2 +
mov eax [esi+38h] +
cmp eax 3 +
jl loc_1011D07  +
cmp [ebp+var_4] eax +
jg loc_1011D07  +
movzx edx word ptr [esi+3Ch] +
lea ecx [eax-3] +
movzx eax word ptr [ebp+var_C] +
sub edx eax +
dec edx  +
mov eax esi +
call sub_101140C  +
mov ecx [esi+38h] +
xor edx edx +
inc edx  +
sub edx ecx +
add [esi+24h] edx +
add ecx 0FFFFFFFEh +
mov [esi+38h] ecx +
inc word ptr [esi+3Ch]  +
cmp dword ptr [esi+24h] 2 +
movzx ecx word ptr [esi+3Ch] +
jle loc_1011CB2  +
mov ebx [esi+20h] +
movzx edx cx +
mov ecx [esi+14h] +
movzx ecx byte ptr [ecx+edx+2] +
shl ebx 5 +
xor ecx ebx +
mov ebx [esi+18h] +
and ecx edi +
and edx edi +
mov edi [esi+1Ch] +
mov [esi+20h] ecx +
mov cx [ebx+ecx*2] +
mov [edi+edx*2] cx +
mov di [esi+3Ch] +
mov ecx [esi+20h] +
mov edx [esi+18h] +
mov [edx+ecx*2] di +
mov edi 7FFFh +
dec dword ptr [esi+38h]  +
jnz loc_1011C69  +
xor ebx ebx +
inc word ptr [esi+3Ch]  +
movzx edx word ptr [esi+3Ch] +
mov [ebp+var_8] ebx +
mov [ebp+var_4] 2 +
cmp eax ebx +
jz loc_1011D73  +
mov ecx [esi+34h] +
mov eax 10000h +
cmp dx bx +
jz loc_1011CE3  +
movzx eax dx +
sub eax ecx +
cmp ecx ebx +
jl loc_1011CF2  +
movzx ecx word ptr [esi+34h] +
add ecx [esi+14h] +
jmp loc_1011CF4  +
xor ecx ecx +
push ebx  +
push eax  +
push ecx  +
mov eax esi +
call sub_10119F1  +
movzx eax word ptr [esi+3Ch] +
mov [esi+34h] eax +
jmp loc_1011D73  +
xor ebx ebx +
cmp [ebp+var_8] ebx +
jz loc_1011D65  +
mov ax [esi+3Ch] +
mov ecx [esi+14h] +
dec ax  +
movzx eax ax +
movzx ecx byte ptr [eax+ecx] +
xor edx edx +
mov eax esi +
call sub_101140C  +
test eax eax +
jz loc_1011D6C  +
movzx eax word ptr [esi+3Ch] +
mov ecx [esi+34h] +
cmp ax bx +
jnz loc_1011D3E  +
mov eax 10000h +
jmp loc_1011D41  +
movzx eax ax +
sub eax ecx +
cmp ecx ebx +
jl loc_1011D50  +
movzx ecx word ptr [esi+34h] +
add ecx [esi+14h] +
jmp loc_1011D52  +
xor ecx ecx +
push ebx  +
push eax  +
push ecx  +
mov eax esi +
call sub_10119F1  +
movzx eax word ptr [esi+3Ch] +
mov [esi+34h] eax +
jmp loc_1011D6C  +
mov [ebp+var_8] 1 +
inc word ptr [esi+3Ch]  +
dec dword ptr [esi+24h]  +
cmp [esi+24h] ebx +
jnz loc_1011B7A  +
pop edi  +
cmp [ebp+var_8] ebx +
jz loc_1011D9B  +
mov ax [esi+3Ch] +
mov ecx [esi+14h] +
dec ax  +
movzx eax ax +
movzx ecx byte ptr [eax+ecx] +
xor edx edx +
mov eax esi +
call sub_101140C  +
movzx eax word ptr [esi+3Ch] +
mov ecx [esi+34h] +
cmp ax bx +
jnz loc_1011DAE  +
mov eax 10000h +
jmp loc_1011DB1  +
movzx eax ax +
sub eax ecx +
cmp ecx ebx +
jl loc_1011DC0  +
movzx ecx word ptr [esi+34h] +
add ecx [esi+14h] +
jmp loc_1011DC2  +
xor ecx ecx +
push 1  +
push eax  +
push ecx  +
mov eax esi +
call sub_10119F1  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_18] +
mov ecx [ebp+arg_8] +
push ebx  +
mov ebx [ebp+arg_0] +
and dword ptr [ebx+28h] 0 +
mov [ebx+18h] eax +
mov eax [ebp+arg_14] +
mov [ebx+1Ch] eax +
mov eax [ebp+arg_C] +
mov [ebx+4] eax +
xor eax eax +
cmp [ebp+arg_1C] 0 +
mov [ebx+0Ch] ax +
mov eax [ebp+arg_10] +
mov [ebx+10h] eax +
mov eax [ebp+arg_4] +
push esi  +
mov [ebx+14h] eax +
mov [ebx+24h] ecx +
mov esi 8000h +
jnz loc_1011E26  +
push esi  +
push eax  +
add eax esi +
push eax  +
call memcpy  +
add esp 0Ch +
xor eax eax +
and [ebx+30h] eax +
mov [ebx+2Ch] ax +
call sub_101180D  +
and dword ptr [ebx+20h] 0 +
mov eax esi +
push 2  +
mov [ebx+3Ch] ax +
mov eax [ebx+14h] +
pop ecx  +
mov [ebx+34h] esi +
add eax esi +
push edi  +
movzx edi byte ptr [eax] +
mov edx [ebx+20h] +
shl edx 5 +
xor edx edi +
and edx 7FFFh +
inc eax  +
dec ecx  +
mov [ebx+20h] edx +
jnz loc_1011E4A  +
cmp [ebp+arg_1C] cl +
jz loc_1011E70  +
mov edi ebx +
call sub_101164E  +
jmp loc_1011E82  +
xor eax eax +
mov ecx esi +
mov edx [ebx+18h] +
xor edi edi +
mov [eax+edx] di +
inc eax  +
inc eax  +
dec ecx  +
jnz loc_1011E74  +
push 8  +
pop edi  +
push 43h  +
pop edx  +
mov eax ebx +
call sub_1010A0E  +
push 4Bh  +
pop edx  +
call sub_1010A0E  +
call sub_1011B53  +
mov ecx [ebp+arg_20] +
inc eax  +
inc eax  +
cmp [ebp+arg_1C] 0 +
movzx eax ax +
mov [ecx] eax +
pop edi  +
jz loc_1011EC1  +
mov eax [ebx+14h] +
push esi  +
lea ecx [eax+8000h] +
push ecx  +
push eax  +
call memcpy  +
add esp 0Ch +
mov eax [ebx+28h] +
neg eax  +
sbb eax eax +
pop esi  +
and eax 3 +
pop ebx  +
pop ebp  +
retn 24h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp sub_10121FC  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp sub_1012052  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
push esi  +
mov esi [ebp+arg_0] +
mov [esi+998h] eax +
mov eax [ebp+arg_8] +
mov [esi+99Ch] eax +
mov eax [ebp+arg_10] +
push esi  +
mov [esi+874h] eax +
call sub_101303B  +
cmp dword ptr [esi+1Ch] 0 +
jz loc_1011F31  +
mov eax [ebp+arg_C] +
and dword ptr [eax] 0 +
push 2  +
pop eax  +
jmp loc_1011F3E  +
push esi  +
call sub_1012690  +
mov ecx [ebp+arg_C] +
mov [ecx] eax +
xor eax eax +
pop esi  +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push esi  +
call sub_10126FF  +
xor eax eax +
cmp [esi+1Ch] eax +
pop esi  +
setz al  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_18] +
push esi  +
mov esi [ebp+arg_0] +
mov [esi+4344h] eax +
mov eax [ebp+arg_4] +
lea ecx [eax-1] +
mov [esi+4] eax +
test ecx eax +
jnz loc_1011FE5  +
mov ecx 8000h +
cmp eax ecx +
jb loc_1011FE5  +
cmp eax 200000h +
ja loc_1011FE5  +
mov eax [ebp+arg_8] +
test eax 7FFFh +
jz loc_1011FA7  +
and eax 0FFFF8000h +
cmp eax ecx +
jge loc_1011FAD  +
mov eax ecx +
mov [esi+98Ch] eax +
mov eax [ebp+arg_14] +
mov [esi+4350h] eax +
mov eax [ebp+arg_C] +
mov [esi+4348h] eax +
mov eax [ebp+arg_10] +
push esi  +
mov [esi+434Ch] eax +
call sub_10122C3  +
test eax eax +
jnz loc_1011FDB  +
inc eax  +
jmp loc_1011FE8  +
push esi  +
call sub_1012052  +
xor eax eax +
jmp loc_1011FE8  +
push 5  +
pop eax  +
pop esi  +
pop ebp  +
retn 1Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_4] 0 +
ja loc_1012010  +
mov eax [ebp+arg_0] +
jb loc_1012007  +
cmp eax 0FFFFFFFFh +
ja loc_1012010  +
mov ecx [ebp+arg_8] +
mov [ecx] eax +
xor eax eax +
jmp loc_101201B  +
mov eax [ebp+arg_8] +
or dword ptr [eax] 0FFFFFFFFh +
mov eax 80070216h +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
mov eax [ebp+arg_4] +
add eax ecx +
cmp eax ecx +
jb loc_101203E  +
mov ecx [ebp+arg_8] +
mov [ecx] eax +
xor eax eax +
jmp loc_1012049  +
mov eax [ebp+arg_8] +
or dword ptr [eax] 0FFFFFFFFh +
mov eax 80070216h +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
push 40000h  +
xor edi edi +
push edi  +
push dword ptr [esi+8]  +
call memset  +
mov eax [esi+4] +
mov ecx [esi+4334h] +
mov edx [esi+4338h] +
sub ecx eax +
mov [esi] ecx +
mov ecx eax +
mov [esi+458h] eax +
mov [esi+86Ch] eax +
mov eax [esi+870h] +
shl ecx 2 +
sub edx ecx +
lea eax ds:100h[eax*8] +
push eax  +
mov [esi+0Ch] edx +
mov edx [esi+433Ch] +
xor ebx ebx +
inc ebx  +
lea eax [esi+3964h] +
sub edx ecx +
push edi  +
push eax  +
mov [esi+10h] edx +
mov [esi+44h] ebx +
mov [esi+48h] ebx +
mov [esi+4Ch] ebx +
mov [esi+38h] ebx +
mov [esi+3Ch] ebx +
mov [esi+40h] ebx +
mov [esi+981h] bl +
mov [esi+984h] ebx +
mov byte ptr [esi+18h] 20h +
mov [esi+14h] edi +
mov [esi+1Ch] edi +
call memset  +
mov edi 0F9h +
push edi  +
lea eax [esi+41F8h] +
push 0  +
push eax  +
call memset  +
push 100h  +
lea eax [esi+2544h] +
push 8  +
push eax  +
call memset  +
mov eax [esi+870h] +
shl eax 3 +
push eax  +
lea eax [esi+2644h] +
push 9  +
push eax  +
call memset  +
push edi  +
lea eax [esi+2801h] +
push 6  +
push eax  +
call memset  +
mov eax 3030303h +
lea edi [esi+4322h] +
stos   +
add esp 48h +
push esi  +
stos   +
call sub_1013691  +
mov eax [esi+458h] +
xor edi edi +
push 2000h  +
mov [esi+994h] eax +
mov [esi+990h] eax +
mov [esi+868h] edi +
mov [esi+988h] ebx +
push edi  +
push dword ptr [esi+34h]  +
call memset  +
add esp 0Ch +
push esi  +
mov [esi+24h] edi +
mov [esi+28h] edi +
mov byte ptr [esi+880h] 0 +
mov [esi+38h] ebx +
mov [esi+3Ch] ebx +
mov [esi+40h] ebx +
call sub_1013216  +
push 0AF0h  +
lea eax [esi+28FCh] +
push edi  +
push eax  +
mov [esi+4340h] edi +
call memset  +
push 3E4h  +
lea eax [esi+3C22h] +
push edi  +
push eax  +
call memset  +
push 8  +
pop ecx  +
xor eax eax +
lea edi [esi+42F2h] +
stos   +
mov eax [esi+98Ch] +
mov ecx [esi+4] +
lea eax [eax+ecx+1101h] +
push eax  +
push 0  +
push dword ptr [esi+4334h]  +
call memset  +
add esp 24h +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
mov eax [esi+8] +
xor ebx ebx +
push edi  +
cmp eax ebx +
jz loc_101221B  +
push eax  +
call dword ptr [esi+434Ch]  +
pop ecx  +
mov [esi+8] ebx +
lea edi [esi+4338h] +
mov eax [edi] +
cmp eax ebx +
jz loc_1012231  +
push eax  +
call dword ptr [esi+434Ch]  +
pop ecx  +
mov [edi] ebx +
lea edi [esi+433Ch] +
mov eax [edi] +
cmp eax ebx +
jz loc_1012247  +
push eax  +
call dword ptr [esi+434Ch]  +
pop ecx  +
mov [edi] ebx +
lea edi [esi+4334h] +
mov eax [edi] +
cmp eax ebx +
jz loc_101225F  +
push eax  +
call dword ptr [esi+434Ch]  +
pop ecx  +
mov [edi] ebx +
mov [esi] ebx +
mov eax [esi+30h] +
cmp eax ebx +
jz loc_1012271  +
push eax  +
call dword ptr [esi+434Ch]  +
pop ecx  +
mov [esi+30h] ebx +
mov eax [esi+2Ch] +
cmp eax ebx +
jz loc_1012283  +
push eax  +
call dword ptr [esi+434Ch]  +
pop ecx  +
mov [esi+2Ch] ebx +
mov eax [esi+34h] +
cmp eax ebx +
jz loc_1012295  +
push eax  +
call dword ptr [esi+434Ch]  +
pop ecx  +
mov [esi+34h] ebx +
lea edi [esi+2540h] +
mov eax [edi] +
cmp eax ebx +
jz loc_10122AB  +
push eax  +
call dword ptr [esi+434Ch]  +
pop ecx  +
mov [edi] ebx +
push esi  +
call sub_10131EC  +
pop edi  +
mov [esi+87Ch] ebx +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi [ebp+arg_0] +
mov edx [esi+4] +
push edi  +
xor edi edi +
push 4  +
pop eax  +
mov [esi+8] edi +
mov [esi+4338h] edi +
mov [esi+433Ch] edi +
mov [esi] edi +
mov [esi+4334h] edi +
mov [esi+2540h] edi +
mov [esi+30h] edi +
mov [esi+2Ch] edi +
mov [esi+34h] edi +
mov [esi+85Ch] edi +
mov [esi+870h] eax +
mov [ebp+arg_0] eax +
push ebx  +
mov eax [esi+870h] +
mov cl ds:byte_1003E8C[eax] +
xor ebx ebx +
inc ebx  +
shl ebx cl +
add [ebp+arg_0] ebx +
inc eax  +
mov [esi+870h] eax +
cmp [ebp+arg_0] edx +
jb loc_101230C  +
push 40000h  +
call dword ptr [esi+4348h]  +
pop ecx  +
mov [esi+8] eax +
pop ebx  +
cmp eax edi +
jnz loc_101234E  +
push esi  +
call sub_10121FC  +
xor eax eax +
pop edi  +
pop esi  +
leave   +
retn 4  +
lea eax [ebp+arg_0] +
push eax  +
push 1101h  +
push dword ptr [esi+4]  +
call sub_1012024  +
test eax eax +
jnz loc_1012346  +
lea eax [ebp+arg_0] +
push eax  +
push dword ptr [esi+98Ch]  +
push [ebp+arg_0]  +
call sub_1012024  +
test eax eax +
jnz loc_1012346  +
lea eax [ebp+var_4] +
push eax  +
mov eax [ebp+arg_0] +
push 4  +
pop ecx  +
mul  ecx +
push edx  +
push eax  +
call sub_1011FF2  +
test eax eax +
jnz loc_1012346  +
push [ebp+var_4]  +
call dword ptr [esi+4348h]  +
pop ecx  +
mov [esi+4338h] eax +
cmp eax edi +
jz loc_1012340  +
push [ebp+var_4]  +
call dword ptr [esi+4348h]  +
pop ecx  +
mov [esi+433Ch] eax +
cmp eax edi +
jz loc_1012340  +
push [ebp+arg_0]  +
call dword ptr [esi+4348h]  +
pop ecx  +
mov [esi+4334h] eax +
cmp eax edi +
jz loc_1012340  +
push 10000h  +
mov [esi] eax +
call dword ptr [esi+4348h]  +
pop ecx  +
mov [esi+30h] eax +
cmp eax edi +
jz loc_1012340  +
push 20000h  +
call dword ptr [esi+4348h]  +
pop ecx  +
mov [esi+2Ch] eax +
cmp eax edi +
jz loc_1012340  +
push 2000h  +
call dword ptr [esi+4348h]  +
pop ecx  +
mov [esi+34h] eax +
push esi  +
cmp eax edi +
jz loc_1012341  +
call sub_10137FD  +
push esi  +
call sub_101387D  +
push esi  +
call sub_10131AF  +
test eax eax +
jz loc_1012340  +
push 18150h  +
call dword ptr [esi+4348h]  +
pop ecx  +
mov [esi+2540h] eax +
cmp eax edi +
jz loc_1012340  +
xor eax eax +
inc eax  +
mov [esi+87Ch] eax +
jmp loc_1012348  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push [ebp+arg_0]  +
push 0  +
push 0  +
push esi  +
call sub_10143C1  +
push [ebp+arg_4]  +
mov ebx eax +
push esi  +
call sub_101427A  +
push 1  +
push esi  +
mov [ebp+var_4] eax +
call sub_1013610  +
push esi  +
call sub_1013934  +
cmp eax ebx +
jb loc_10124A7  +
mov eax [esi+994h] +
cmp eax [esi+990h] +
jb loc_10124A7  +
mov [ebp+var_4] 3 +
movzx eax byte ptr [ebp+var_4] +
push edi  +
push eax  +
push 3  +
push esi  +
call sub_101312D  +
mov eax ebx +
shr eax 10h +
mov edi 0FFh +
and eax edi +
push eax  +
push 8  +
push esi  +
call sub_101312D  +
mov eax ebx +
shr eax 8 +
and eax edi +
push eax  +
push 8  +
push esi  +
call sub_101312D  +
movzx eax bl +
push eax  +
push 8  +
push esi  +
call sub_101312D  +
cmp [ebp+var_4] 1 +
pop edi  +
jnz loc_10124FE  +
push esi  +
call sub_10136DF  +
push [ebp+arg_0]  +
push esi  +
call sub_1013B13  +
jmp loc_1012519  +
cmp [ebp+var_4] 2 +
jnz loc_1012524  +
push esi  +
call sub_1013747  +
push esi  +
call sub_10136DF  +
push [ebp+arg_0]  +
push esi  +
call sub_1013E35  +
push [ebp+arg_4]  +
push esi  +
call sub_10138B2  +
jmp loc_1012540  +
cmp [ebp+var_4] 3 +
jnz loc_1012540  +
push [ebp+arg_4]  +
push esi  +
call sub_10138B2  +
push ebx  +
push dword ptr [esi+994h]  +
push esi  +
call sub_1013A62  +
add [esi+994h] ebx +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+arg_0] +
push eax  +
push dword ptr [esi+28h]  +
xor ebx ebx +
push dword ptr [esi+24h]  +
mov [esi+981h] bl +
push ebx  +
push esi  +
call sub_1014677  +
push [ebp+var_4]  +
push [ebp+arg_0]  +
call sub_101245E  +
mov eax [esi+24h] +
cmp [ebp+arg_0] eax +
jnz loc_10125A7  +
push 2000h  +
push ebx  +
push dword ptr [esi+34h]  +
call memset  +
add esp 0Ch +
mov [esi+24h] ebx +
mov [esi+28h] ebx +
jmp loc_1012659  +
mov ecx [ebp+arg_0] +
shr eax 3 +
shr ecx 3 +
sub eax ecx +
push edi  +
lea edi [eax+1] +
mov eax [ebp+arg_0] +
cdq   +
and edx 7 +
add edx eax +
sar edx 3 +
mov eax 2000h +
sub eax edx +
cmp edi eax +
jl loc_10125CF  +
mov edi eax +
mov eax [esi+34h] +
push edi  +
add ecx eax +
push ecx  +
push eax  +
call memmove  +
mov eax [esi+24h] +
sub eax [ebp+arg_0] +
mov ecx 1FFFh +
shr eax 3 +
sub ecx eax +
push ecx  +
mov ecx [esi+34h] +
lea eax [eax+ecx+1] +
push ebx  +
push eax  +
call memset  +
mov ecx [ebp+arg_0] +
mov eax [esi+24h] +
mov edx 10000h +
add esp 18h +
sub eax ecx +
sub edx ecx +
pop edi  +
cmp eax edx +
jnb loc_1012614  +
mov edx eax +
mov eax [esi+30h] +
push edx  +
add ecx eax +
push ecx  +
push eax  +
call memmove  +
mov edx [ebp+var_4] +
mov eax [esi+28h] +
mov ecx 8000h +
sub eax edx +
sub ecx edx +
add esp 0Ch +
cmp eax ecx +
jb loc_1012639  +
mov eax ecx +
mov ecx [esi+2Ch] +
shl eax 2 +
push eax  +
lea eax [ecx+edx*4] +
push eax  +
push ecx  +
call memmove  +
mov eax [ebp+arg_0] +
sub [esi+24h] eax +
mov eax [ebp+var_4] +
add esp 0Ch +
sub [esi+28h] eax +
push esi  +
call sub_1013792  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
mov al [ecx+18h] +
cmp al 20h +
jge loc_1012687  +
sub al 10h +
movzx eax al +
push 0  +
push eax  +
push ecx  +
call sub_101312D  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push 0  +
push [ebp+arg_0]  +
call sub_1013610  +
push [ebp+arg_0]  +
call sub_1013934  +
push [ebp+arg_0]  +
mov esi eax +
call sub_1013792  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
cmp eax 400h +
jge loc_10126D9  +
mov ecx [ebp+arg_0] +
mov al [ecx+eax+45Ch] +
jmp loc_10126F6  +
cmp eax 80000h +
jge loc_10126F1  +
mov ecx [ebp+arg_0] +
sar eax 9 +
mov al [eax+ecx+45Ch] +
add al 12h +
jmp loc_10126F6  +
sar eax 11h +
add al 22h +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
jmp loc_101270F  +
call sub_1012550  +
cmp dword ptr [esi+24h] 0 +
push esi  +
ja loc_101270A  +
call sub_10139FC  +
pop esi  +
pop ebp  +
retn 4  +
***
mov eax [esi+24h] +
push ebx  +
xor ebx ebx +
cmp eax ebx +
jz loc_1012779  +
push edi  +
lea edi [esi+984h] +
push eax  +
cmp [edi] ebx +
jz loc_1012747  +
push ebx  +
push ebx  +
push esi  +
call sub_10143C1  +
mov [edi] ebx +
jmp loc_1012759  +
push dword ptr [esi+253Ch]  +
push dword ptr [esi+2538h]  +
push esi  +
call sub_1014413  +
push ebx  +
push esi  +
call sub_1013610  +
push esi  +
call sub_1013792  +
mov eax [esi+24h] +
mov [esi+2538h] eax +
mov eax [esi+28h] +
mov [esi+253Ch] eax +
pop edi  +
pop ebx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov byte ptr [esi+981h] 0 +
mov dword ptr [esi+984h] 1 +
call sub_1012550  +
mov eax [esi+24h] +
mov ecx 1000h +
cmp eax ecx +
jnb loc_10127B0  +
mov [esi+2534h] ecx +
jmp loc_10127BB  +
add eax 1000h +
mov [esi+2534h] eax +
mov eax [ebp+arg_0] +
mov [esi+86Ch] eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ebp+arg_0] +
mov ecx [esi+4] +
push ebx  +
push edi  +
mov edi [esi+86Ch] +
xor ebx ebx +
mov [esi+981h] bl +
mov eax [eax] +
mov edx edi +
sub edx ecx +
sub eax edi +
cmp edx ecx +
jnb loc_10127F9  +
add eax edx +
jmp loc_10127FB  +
add eax ecx +
mov ecx [esi] +
sub ecx [esi+4334h] +
mov edx [ebp+arg_0] +
add ecx [edx] +
cmp eax ecx +
ja loc_1012890  +
push ebx  +
lea eax [ebp+var_4] +
push eax  +
push dword ptr [esi+28h]  +
push dword ptr [esi+24h]  +
push ebx  +
push esi  +
call sub_1014677  +
push [ebp+var_4]  +
push ebx  +
push ebx  +
push esi  +
call sub_10143C1  +
push ebx  +
push esi  +
call sub_1013610  +
push esi  +
call sub_1013792  +
push 40000h  +
push ebx  +
push dword ptr [esi+8]  +
call memset  +
push 2000h  +
push ebx  +
push dword ptr [esi+34h]  +
call memset  +
mov ecx [ebp+var_4] +
xor eax eax +
add esp 18h +
inc eax  +
mov [esi+2534h] ecx +
mov ecx [ebp+arg_0] +
mov [esi+44h] eax +
mov [esi+48h] eax +
mov [esi+4Ch] eax +
mov [esi+38h] eax +
mov [esi+3Ch] eax +
mov [esi+40h] eax +
mov [esi+868h] ebx +
mov [esi+24h] ebx +
mov [esi+28h] ebx +
mov [esi+984h] eax +
mov [ecx] edi +
jmp loc_1012892  +
xor eax eax +
pop edi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 30h +
mov eax [ebp+arg_4] +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
mov ebx [esi+458h] +
add eax ebx +
mov [ebp+var_14] eax +
lea eax [esi+988h] +
xor ecx ecx +
push edi  +
mov [ebp+arg_0] ebx +
cmp [eax] ecx +
jz loc_101290D  +
mov [eax] ecx +
mov dword ptr [esi+2534h] 2710h +
cmp [esi+874h] ecx +
jz loc_1012902  +
push 1  +
push 1  +
push esi  +
call sub_101312D  +
movzx eax word ptr [esi+876h] +
push eax  +
push 10h  +
push esi  +
call sub_101312D  +
movzx eax word ptr [esi+874h] +
push eax  +
push 10h  +
jmp loc_1012905  +
push ecx  +
push 1  +
push esi  +
call sub_101312D  +
jmp loc_101292C  +
push 32h  +
pop edi  +
mov eax ebx +
sub eax [esi+4] +
add eax 4 +
push eax  +
mov eax ebx +
sub eax edi +
push eax  +
push esi  +
call sub_1014BC2  +
dec edi  +
jnz loc_1012910  +
jmp loc_101292C  +
mov ebx [ebp+arg_0] +
lea eax [ebx+8000h] +
mov [ebp+var_10] eax +
cmp ebx [ebp+var_14] +
jnb loc_1012F21  +
mov edi [ebp+var_10] +
and edi 0FFFF8000h +
mov [ebp+var_1C] edi +
cmp edi [ebp+var_14] +
ja loc_1012953  +
cmp edi ebx +
jnb loc_1012959  +
mov edi [ebp+var_14] +
mov [ebp+var_1C] edi +
push ebx  +
push esi  +
call sub_1014928  +
cmp eax 2 +
mov [ebp+var_4] eax +
jl loc_101297B  +
lea ecx [eax+ebx] +
cmp ecx edi +
jbe loc_10129A8  +
mov eax edi +
sub eax ebx +
cmp eax 2 +
mov [ebp+var_4] eax +
jge loc_10129A5  +
mov eax [esi] +
mov al [ebx+eax] +
mov edx [esi+24h] +
mov ecx [esi+30h] +
mov [ecx+edx] al +
inc dword ptr [esi+24h]  +
mov eax [esi+24h] +
inc ebx  +
inc [ebp+var_10]  +
mov [ebp+arg_0] ebx +
cmp eax 0FFF8h +
jb loc_1012935  +
push ebx  +
call sub_1012780  +
jmp loc_1012935  +
mov eax [ebp+var_4] +
cmp eax 32h +
jge loc_1012E4D  +
mov edx [esi+2540h] +
lea ecx [eax+ebx] +
mov [ebp+var_C] ecx +
lea ecx [ebx+0EFDh] +
mov [ebp+var_30] ecx +
mov ecx [esi] +
movzx ecx byte ptr [ecx+ebx] +
movzx ecx byte ptr [ecx+esi+2544h] +
mov [edx+2Ch] ecx +
mov ecx [esi+2540h] +
push 2  +
mov [ecx+1Ch] ebx +
pop ecx  +
mov [ebp+var_24] ebx +
mov [ebp+arg_0] ecx +
cmp eax ecx +
jb loc_1012A87  +
push 30h  +
lea eax [esi+58h] +
pop edi  +
mov [ebp+var_8] eax +
mov eax [ebp+var_8] +
push dword ptr [eax]  +
push esi  +
call sub_10126BE  +
mov ecx [ebp+arg_0] +
movzx eax al +
cmp ecx 9 +
jnb loc_1012A30  +
lea edx [ecx+eax*8] +
movzx eax ds:byte_1003E8C[eax] +
movzx edx byte ptr [edx+esi+2642h] +
add edx eax +
mov eax [esi+2540h] +
mov [eax+edi+14h] edx +
jmp loc_1012A5B  +
movzx edx byte ptr [ecx+esi+27F8h] +
mov [ebp+arg_0] eax +
movzx eax byte ptr [esi+eax*8+264Bh] +
add eax edx +
mov edx [ebp+arg_0] +
movzx edx ds:byte_1003E8C[edx] +
add eax edx +
mov edx [esi+2540h] +
mov [edx+edi+14h] eax +
mov eax [esi+2540h] +
mov edx [ebp+var_8] +
add [ebp+var_8] 4 +
mov [eax+edi+4] ebx +
mov eax [esi+2540h] +
mov edx [edx] +
inc ecx  +
mov [edi+eax] edx +
add edi 18h +
mov [ebp+arg_0] ecx +
cmp ecx [ebp+var_4] +
jbe loc_10129FA  +
mov eax [esi+2540h] +
and dword ptr [eax+14h] 0 +
mov eax [esi+2540h] +
mov ecx [esi+44h] +
mov [eax+8] ecx +
mov eax [esi+2540h] +
mov ecx [esi+48h] +
mov [eax+0Ch] ecx +
mov eax [esi+2540h] +
mov ecx [esi+4Ch] +
mov [eax+10h] ecx +
mov edi [esi+2540h] +
mov eax ebx +
imul eax eax +
lea ecx [ebx-1] +
mov [ebp+var_18] ecx +
mov ecx [ebp+var_1C] +
sub edi eax +
sub ecx ebx +
lea eax [eax+edi+4] +
mov [ebp+var_20] ecx +
mov [ebp+var_8] eax +
mov ecx [ebp+var_8] +
add ecx 18h +
mov eax [ecx] +
inc ebx  +
inc [ebp+var_18]  +
dec [ebp+var_20]  +
mov [ebp+var_8] ecx +
cmp eax [ebp+var_18] +
jz loc_1012B45  +
mov edx [ecx-4] +
imul eax eax +
cmp edx 3 +
jb loc_1012B0C  +
add edx 0FFFFFFFEh +
add eax edi +
mov [esi+44h] edx +
mov edx [eax+8] +
mov [esi+48h] edx +
mov eax [eax+0Ch] +
jmp loc_1012B42  +
add eax edi +
test edx edx +
jnz loc_1012B23  +
mov edx [eax+8] +
mov [esi+44h] edx +
mov edx [eax+0Ch] +
mov [esi+48h] edx +
mov eax [eax+10h] +
jmp loc_1012B42  +
cmp edx 1 +
jnz loc_1012B33  +
mov edx [eax+0Ch] +
mov [esi+44h] edx +
mov edx [eax+8] +
jmp loc_1012B1B  +
mov edx [eax+10h] +
mov [esi+44h] edx +
mov edx [eax+0Ch] +
mov [esi+48h] edx +
mov eax [eax+8] +
mov [esi+4Ch] eax +
mov eax [esi+44h] +
mov [ecx+4] eax +
mov eax [esi+48h] +
mov [ecx+8] eax +
mov eax [esi+4Ch] +
mov [ecx+0Ch] eax +
cmp [ebp+var_C] ebx +
jz loc_1012D38  +
push ebx  +
push esi  +
call sub_1014928  +
mov [ebp+var_4] eax +
add eax ebx +
cmp eax [ebp+var_1C] +
jbe loc_1012B83  +
mov edx [ebp+var_20] +
cmp edx 2 +
mov [ebp+var_4] edx +
jge loc_1012B86  +
xor edx edx +
mov [ebp+var_4] edx +
jmp loc_1012B86  +
mov edx [ebp+var_4] +
cmp edx 32h +
jg loc_1012CA8  +
lea eax [edx+ebx] +
cmp eax [ebp+var_30] +
jnb loc_1012CA8  +
cmp edx 2 +
jg loc_1012BAB  +
jnz loc_1012BF3  +
cmp dword ptr [esi+58h] 800h +
jnb loc_1012BF3  +
cmp [ebp+var_C] eax +
jnb loc_1012BF3  +
mov eax edx +
sub eax [ebp+var_24] +
mov ecx 0EFCh +
add eax ebx +
cmp eax ecx +
jnb loc_1012BC2  +
mov ecx eax +
mov eax [ebp+var_C] +
sub eax [ebp+var_24] +
inc eax  +
cmp eax ecx +
mov [ebp+arg_0] eax +
jg loc_1012BED  +
sub ecx [ebp+arg_0] +
imul eax eax +
inc ecx  +
mov [ebp+arg_0] ecx +
mov ecx [esi+2540h] +
or dword ptr [ecx+eax+14h] 0FFFFFFFFh +
add eax 18h +
dec [ebp+arg_0]  +
jnz loc_1012BDA  +
lea eax [edx+ebx] +
mov [ebp+var_C] eax +
mov ecx [ebp+var_8] +
mov eax [ecx+10h] +
mov [ebp+var_28] eax +
mov eax [esi] +
movzx eax byte ptr [eax+ebx] +
movzx eax byte ptr [eax+esi+2544h] +
add eax [ebp+var_28] +
cmp eax [ecx+28h] +
jnb loc_1012C18  +
mov [ecx+28h] eax +
mov [ecx+18h] ebx +
push 2  +
pop eax  +
mov [ebp+arg_0] eax +
cmp edx eax +
jb loc_1012AD7  +
lea eax [esi+58h] +
mov [ebp+var_10] eax +
mov eax [ebp+var_8] +
add eax 40h +
mov [ebp+var_2C] eax +
mov eax [ebp+var_10] +
push dword ptr [eax]  +
push esi  +
call sub_10126BE  +
cmp [ebp+arg_0] 9 +
movzx ecx al +
jnb loc_1012C59  +
mov eax [ebp+arg_0] +
lea eax [eax+ecx*8] +
movzx eax byte ptr [eax+esi+2642h] +
jmp loc_1012C6E  +
mov edx [ebp+arg_0] +
movzx eax byte ptr [esi+ecx*8+264Bh] +
movzx edx byte ptr [edx+esi+27F8h] +
add eax edx +
movzx ecx ds:byte_1003E8C[ecx] +
add eax ecx +
add eax [ebp+var_28] +
mov ecx [ebp+var_2C] +
cmp eax [ecx] +
jnb loc_1012C8E  +
mov [ecx] eax +
mov eax [ebp+var_10] +
mov [ecx-10h] ebx +
mov eax [eax] +
mov [ecx-14h] eax +
inc [ebp+arg_0]  +
mov eax [ebp+arg_0] +
add [ebp+var_10] 4 +
add ecx 18h +
mov [ebp+var_2C] ecx +
cmp eax [ebp+var_4] +
jbe loc_1012C35  +
jmp loc_1012AD7  +
mov ecx [esi+edx*4+50h] +
lea eax [edx+ebx] +
mov [ebp+var_30] eax +
imul eax eax +
add eax edi +
mov [ebp+var_8] ecx +
mov [eax] ecx +
mov [eax+4] ebx +
cmp ecx 3 +
jnz loc_1012CDC  +
cmp edx 10h +
jle loc_1012CDC  +
mov eax ebx +
sub eax [esi+4] +
add eax 5 +
push eax  +
inc ebx  +
push ebx  +
push esi  +
call sub_1014BC2  +
jmp loc_1012D07  +
xor eax eax +
inc eax  +
mov [ebp+arg_0] eax +
cmp edx eax +
jbe loc_1012D07  +
mov eax [ebp+arg_0] +
mov ecx eax +
sub ecx [esi+4] +
add eax ebx +
lea ecx [ecx+ebx+4] +
push ecx  +
push eax  +
push esi  +
call sub_1014BC2  +
inc [ebp+arg_0]  +
mov eax [ebp+arg_0] +
cmp eax [ebp+var_4] +
jb loc_1012CE6  +
mov eax [ebp+var_8] +
mov ebx [ebp+var_30] +
cmp eax 3 +
jb loc_1012D26  +
mov ecx [esi+48h] +
mov [esi+4Ch] ecx +
mov ecx [esi+44h] +
add eax 0FFFFFFFEh +
mov [esi+48h] ecx +
mov [esi+44h] eax +
jmp loc_1012D38  +
test eax eax +
jz loc_1012D38  +
mov ecx [esi+44h] +
lea eax [esi+eax*4+44h] +
mov edx [eax] +
mov [esi+44h] edx +
mov [eax] ecx +
and [ebp+arg_0] 0 +
mov eax ebx +
imul eax eax +
mov ecx [eax+edi+4] +
mov eax ecx +
imul eax eax +
inc [ebp+arg_0]  +
mov edx ecx +
mov ecx [eax+edi+4] +
mov [eax+edi+4] ebx +
mov [ebp+var_30] edx +
mov ebx edx +
cmp edx [ebp+var_24] +
jnz loc_1012D45  +
mov eax [esi+24h] +
add eax [ebp+arg_0] +
cmp eax 0FFF8h +
jnb loc_1012D7B  +
mov eax [esi+28h] +
add eax [ebp+arg_0] +
cmp eax 7FF8h +
jb loc_1012D85  +
push [ebp+var_30]  +
call sub_1012780  +
jmp loc_1012D61  +
mov eax ebx +
imul eax eax +
lea ecx [ebx+1] +
lea eax [eax+edi+4] +
cmp [eax] ecx +
mov [ebp+var_30] ecx +
mov ecx [esi+24h] +
jbe loc_1012DE0  +
mov edx [esi+34h] +
shr ecx 3 +
add ecx edx +
mov [ebp+var_30] ecx +
mov ecx [esi+24h] +
and ecx 7 +
mov dl 1 +
shl dl cl +
mov ecx [ebp+var_30] +
or [ecx] dl +
mov cl [eax] +
mov edx [esi+24h] +
sub cl bl +
mov ebx [esi+30h] +
sub cl 2 +
mov [edx+ebx] cl +
inc dword ptr [esi+24h]  +
mov ecx [eax] +
mov edx [esi+28h] +
imul ecx ecx +
mov ebx [esi+2Ch] +
mov ecx [ecx+edi] +
mov [ebx+edx*4] ecx +
inc dword ptr [esi+28h]  +
mov ebx [eax] +
jmp loc_1012DF1  +
mov eax [esi] +
mov al [ebx+eax] +
mov edx [esi+30h] +
mov ebx [ebp+var_30] +
mov [ecx+edx] al +
inc dword ptr [esi+24h]  +
dec [ebp+arg_0]  +
jnz loc_1012D85  +
mov eax [esi+24h] +
lea edi [esi+2534h] +
mov [ebp+arg_0] ebx +
cmp eax [edi] +
jb loc_1012E11  +
call sub_1012725  +
add dword ptr [edi] 1000h +
cmp byte ptr [esi+981h] 0 +
jz loc_101292C  +
cmp dword ptr [esi+24h] 0FE00h +
jnb loc_1012E34  +
cmp dword ptr [esi+28h] 7E00h +
jb loc_101292C  +
lea eax [ebp+arg_0] +
push eax  +
call sub_10127CD  +
test eax eax +
jnz loc_1012929  +
mov ebx [ebp+arg_0] +
jmp loc_1012F16  +
mov ecx [esi+eax*4+50h] +
mov [ebp+var_8] ecx +
cmp ecx 3 +
jnz loc_1012E73  +
cmp eax 10h +
jle loc_1012E73  +
mov eax ebx +
sub eax [esi+4] +
add eax 5 +
push eax  +
lea eax [ebx+1] +
push eax  +
push esi  +
call sub_1014BC2  +
jmp loc_1012E94  +
xor edi edi +
inc edi  +
cmp eax edi +
jbe loc_1012E97  +
mov eax edi +
sub eax [esi+4] +
lea eax [eax+ebx+4] +
push eax  +
lea eax [edi+ebx] +
push eax  +
push esi  +
call sub_1014BC2  +
inc edi  +
cmp edi [ebp+var_4] +
jb loc_1012E7A  +
mov eax [ebp+var_4] +
mov ecx [esi+24h] +
mov edi [esi+34h] +
mov edx ecx +
shr edx 3 +
add edi edx +
and ecx 7 +
mov dl 1 +
shl dl cl +
add ebx eax +
sub al 2 +
mov [ebp+arg_0] ebx +
or [edi] dl +
mov edx [esi+24h] +
mov ecx [esi+30h] +
mov [ecx+edx] al +
inc dword ptr [esi+24h]  +
mov ecx [esi+28h] +
mov eax [ebp+var_8] +
mov edx [esi+2Ch] +
mov [edx+ecx*4] eax +
inc dword ptr [esi+28h]  +
cmp eax 3 +
jb loc_1012EEB  +
mov eax [esi+48h] +
mov [esi+4Ch] eax +
mov eax [esi+44h] +
mov [esi+48h] eax +
mov eax [ebp+var_8] +
add eax 0FFFFFFFEh +
mov [esi+44h] eax +
jmp loc_1012F00  +
mov eax [ebp+var_8] +
test eax eax +
jz loc_1012F00  +
mov ecx [esi+44h] +
lea eax [esi+eax*4+44h] +
mov edx [eax] +
mov [esi+44h] edx +
mov [eax] ecx +
cmp dword ptr [esi+24h] 0FFF8h +
jnb loc_1012F16  +
cmp dword ptr [esi+28h] 7FF8h +
jb loc_101292C  +
push ebx  +
call sub_1012780  +
jmp loc_101292C  +
mov eax ebx +
sub eax [esi+4] +
cmp [ebp+arg_4] 8000h +
mov [esi+990h] eax +
jge loc_1012F5B  +
cmp byte ptr [esi+981h] 0 +
jz loc_1013029  +
lea eax [ebp+arg_0] +
push eax  +
call sub_10127CD  +
mov ebx [ebp+arg_0] +
test eax eax +
jz loc_1013029  +
jmp loc_101292C  +
add eax 36h +
xor edi edi +
mov [ebp+var_30] eax +
inc edi  +
push [ebp+var_30]  +
mov eax ebx +
sub eax edi +
push eax  +
push esi  +
call sub_1014CF0  +
inc edi  +
cmp edi 32h +
jbe loc_1012F64  +
mov eax [esi] +
sub eax [esi+4334h] +
mov ecx [esi+4] +
add eax ebx +
cmp eax ecx +
jb loc_1013029  +
sub eax ecx +
cmp eax [esi+98Ch] +
jb loc_1013029  +
cmp byte ptr [esi+981h] 0 +
jz loc_1012FB8  +
lea eax [ebp+arg_0] +
push eax  +
call sub_10127CD  +
test eax eax +
jnz loc_1012929  +
mov ebx [ebp+arg_0] +
mov eax [esi+4334h] +
push dword ptr [esi+4]  +
mov ecx [esi+98Ch] +
add ecx eax +
push ecx  +
push eax  +
call memmove  +
mov ecx [esi+4] +
mov eax [esi+4338h] +
shl ecx 2 +
push ecx  +
mov ecx [esi+98Ch] +
lea ecx [eax+ecx*4] +
push ecx  +
push eax  +
call memmove  +
mov ecx [esi+4] +
mov eax [esi+433Ch] +
shl ecx 2 +
push ecx  +
mov ecx [esi+98Ch] +
lea ecx [eax+ecx*4] +
push ecx  +
push eax  +
call memmove  +
mov eax ebx +
sub eax [esi+4] +
add esp 24h +
mov [esi+990h] eax +
mov eax [esi+98Ch] +
sub [esi] eax +
shl eax 2 +
sub [esi+0Ch] eax +
sub [esi+10h] eax +
pop edi  +
mov [esi+458h] ebx +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
mov eax [esi+458h] +
sub eax [esi+4334h] +
push 8000h  +
add eax [esi] +
push eax  +
push esi  +
call sub_1013378  +
xor ebx ebx +
cmp eax ebx +
mov [ebp+arg_0] eax +
jle loc_1013122  +
mov edx [esi+458h] +
add eax edx +
cmp eax edx +
jnb loc_1013119  +
mov ecx [esi+4] +
add ecx ecx +
sub edx ecx +
sub [esi+994h] edx +
sub [esi+990h] edx +
push edi  +
mov [esi+458h] ecx +
xor edi edi +
mov eax [esi+8] +
lea ecx [edi+eax] +
cmp [ecx] edx +
jbe loc_10130A6  +
sub [ecx] edx +
jmp loc_10130A8  +
mov [ecx] ebx +
add edi 4 +
cmp edi 40000h +
jb loc_1013098  +
mov eax [esi+98Ch] +
mov ecx [esi+4] +
lea eax [eax+ecx+1101h] +
test eax eax +
jbe loc_10130E6  +
mov ecx [esi+4338h] +
lea ecx [ecx+ebx*4] +
mov edi [ecx] +
test edi edi +
jz loc_10130E1  +
cmp edi edx +
jbe loc_10130DE  +
sub [ecx] edx +
jmp loc_10130E1  +
and dword ptr [ecx] 0 +
inc ebx  +
cmp ebx eax +
jb loc_10130C7  +
xor ebx ebx +
test eax eax +
jbe loc_101310B  +
mov ecx [esi+433Ch] +
lea ecx [ecx+ebx*4] +
mov edi [ecx] +
test edi edi +
jz loc_1013106  +
cmp edi edx +
jbe loc_1013103  +
sub [ecx] edx +
jmp loc_1013106  +
and dword ptr [ecx] 0 +
inc ebx  +
cmp ebx eax +
jb loc_10130EC  +
add [esi] edx +
mov ecx edx +
shl ecx 2 +
add [esi+0Ch] ecx +
add [esi+10h] ecx +
pop edi  +
push [ebp+arg_0]  +
push esi  +
call sub_101289D  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov dl [eax+18h] +
movsx ecx dl +
sub ecx [ebp+arg_4] +
push esi  +
mov esi [ebp+arg_8] +
shl esi cl +
mov cl dl +
sub cl byte ptr [ebp+arg_4] +
or [eax+14h] esi +
cmp cl 10h +
mov [eax+18h] cl +
pop esi  +
jg loc_10131A6  +
mov ecx [eax+860h] +
cmp ecx [eax+864h] +
jb loc_1013176  +
mov ecx [eax+85Ch] +
mov dword ptr [eax+1Ch] 1 +
mov [eax+860h] ecx +
mov ecx [eax+860h] +
mov dl [eax+16h] +
mov [ecx] dl +
inc dword ptr [eax+860h]  +
mov ecx [eax+860h] +
mov dl [eax+17h] +
mov [ecx] dl +
inc dword ptr [eax+860h]  +
shl dword ptr [eax+14h] 10h +
add byte ptr [eax+18h] 10h +
cmp byte ptr [eax+18h] 10h +
jle loc_1013155  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push 9800h  +
call dword ptr [esi+4348h]  +
pop ecx  +
mov [esi+85Ch] eax +
test eax eax +
jz loc_10131E2  +
mov [esi+860h] eax +
add eax 97C0h +
mov [esi+864h] eax +
xor eax eax +
inc eax  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
lea esi [eax+85Ch] +
mov ecx [esi] +
test ecx ecx +
jz loc_101320C  +
push ecx  +
call dword ptr [eax+434Ch]  +
and dword ptr [esi] 0 +
pop ecx  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
and dword ptr [eax+9A0h] 0 +
and dword ptr [eax+878h] 0 +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [edi+99Ch] +
test ebx ebx +
jg loc_1013249  +
xor eax eax +
jmp loc_1013271  +
cmp [ebp+arg_4] ebx +
jge loc_1013251  +
mov ebx [ebp+arg_4] +
push esi  +
push ebx  +
lea esi [edi+998h] +
push dword ptr [esi]  +
push [ebp+arg_0]  +
call memcpy  +
sub [edi+99Ch] ebx +
add esp 0Ch +
add [esi] ebx +
mov eax ebx +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
mov eax dword_1016A90 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
xor esi esi +
cmp [ecx+878h] esi +
jz loc_10132A7  +
mov [ecx+874h] esi +
jmp loc_1013363  +
mov eax [ecx+9A0h] +
add eax ebx +
cmp eax 0Ah +
jnb loc_10132C9  +
mov [ecx+874h] esi +
mov dword ptr [ecx+878h] 1 +
jmp loc_1013363  +
cmp ebx 6 +
jg loc_10132D9  +
mov [ecx+9A0h] eax +
jmp loc_1013363  +
push edi  +
lea eax [edx+ebx] +
mov [ebp+var_10] eax +
add eax 0FFFFFFFAh +
mov esi eax +
lea edi [ebp+var_C] +
movs   +
movs   +
mov edi [ebp+var_10] +
add edi 0FFFFFFFAh +
mov eax 0E8E8E8E8h +
stos   +
stos   +
mov eax [ecx+9A0h] +
lea ebx [eax+ebx-0Ah] +
mov [ebp+var_14] ebx +
jmp loc_101330F  +
inc edx  +
inc dword ptr [ecx+9A0h]  +
cmp byte ptr [edx] 0E8h +
jnz loc_1013308  +
mov esi [ecx+9A0h] +
inc edx  +
cmp esi ebx +
jnb loc_101334D  +
mov eax [edx] +
lea edi [esi+eax] +
test edi edi +
jl loc_101333E  +
mov ebx [ecx+874h] +
add esi ebx +
cmp edi esi +
jnb loc_101333E  +
cmp edi ebx +
jb loc_101333C  +
sub eax ebx +
mov edi eax +
mov [edx] edi +
mov ebx [ebp+var_14] +
add edx 4 +
add dword ptr [ecx+9A0h] 5 +
jmp loc_101330F  +
mov edi [ebp+var_10] +
add edi 0FFFFFFFAh +
lea esi [ebp+var_C] +
movs   +
movs   +
add ebx 0Ah +
mov [ecx+9A0h] ebx +
pop edi  +
mov ecx [ebp+var_4] +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100DC5B  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_8] 0 +
jg loc_1013387  +
xor eax eax +
jmp loc_10133D8  +
push ebx  +
push edi  +
mov edi [ebp+arg_0] +
mov eax [edi+4334h] +
push [ebp+arg_8]  +
add eax [ebp+arg_4] +
push eax  +
call sub_1013235  +
mov ebx eax +
test ebx ebx +
jge loc_10133A8  +
xor eax eax +
jmp loc_10133D6  +
cmp dword ptr [edi+874h] 0 +
push esi  +
jz loc_10133D5  +
lea esi [edi+4340h] +
cmp dword ptr [esi] 8000h +
jnb loc_10133D5  +
mov edx [edi+4334h] +
add edx [ebp+arg_4] +
push ebx  +
mov ecx edi +
call sub_101327B  +
inc dword ptr [esi]  +
mov eax ebx +
pop esi  +
pop edi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0B8h +
mov eax dword_1016A90 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push ebx  +
push esi  +
push edi  +
push 60h  +
mov [ebp+var_B0] eax +
lea eax [ebp+var_7C] +
mov ebx ecx +
mov edi edx +
push 0  +
push eax  +
mov [ebp+var_B8] ebx +
mov [ebp+var_B4] edi +
call memset  +
xor eax eax +
add esp 0Ch +
cmp [ebp+arg_4] eax +
jle loc_10134B4  +
lea esi [eax+1] +
xor edx edx +
cmp esi [ebp+arg_4] +
jge loc_1013492  +
mov cl [ebx+eax] +
cmp [ebx+esi] cl +
jnz loc_1013446  +
inc edx  +
inc esi  +
cmp esi [ebp+arg_4] +
jl loc_101343A  +
cmp edx 4 +
jl loc_1013492  +
test cl cl +
jnz loc_1013468  +
cmp edx 33h +
jle loc_1013457  +
push 33h  +
pop edx  +
cmp edx 13h +
jg loc_1013462  +
inc [ebp+var_5A]  +
jmp loc_101348C  +
inc [ebp+var_58]  +
jmp loc_101348C  +
cmp edx 5 +
jle loc_1013470  +
push 5  +
pop edx  +
movzx ecx byte ptr [edi+eax] +
movzx esi byte ptr [ebx+eax] +
sub ecx esi +
movzx ecx ds:byte_1003ED1[ecx] +
lea ecx [ebp+ecx*2+var_7C] +
inc word ptr [ecx]  +
inc [ebp+var_56]  +
lea eax [eax+edx-1] +
jmp loc_10134AA  +
movzx ecx byte ptr [edi+eax] +
movzx edx byte ptr [ebx+eax] +
sub ecx edx +
movzx ecx ds:byte_1003ED1[ecx] +
lea ecx [ebp+ecx*2+var_7C] +
inc word ptr [ecx]  +
inc eax  +
cmp eax [ebp+arg_4] +
jl loc_101342D  +
push 1  +
lea eax [ebp+var_AC] +
push eax  +
lea eax [ebp+var_1C] +
push eax  +
lea eax [ebp+var_7C] +
push eax  +
push 14h  +
push [ebp+var_B0]  +
call sub_1015118  +
xor esi esi +
movsx eax byte ptr [ebp+esi+var_1C] +
push eax  +
push 4  +
push [ebp+var_B0]  +
call sub_101312D  +
inc esi  +
cmp esi 14h +
jl loc_10134D4  +
xor esi esi +
cmp [ebp+arg_4] esi +
jle loc_10135ED  +
lea eax [esi+1] +
xor edi edi +
cmp eax [ebp+arg_4] +
jge loc_1013539  +
mov cl [ebx+esi] +
cmp [ebx+eax] cl +
jnz loc_1013511  +
inc edi  +
inc eax  +
cmp eax [ebp+arg_4] +
jl loc_1013505  +
cmp edi 4 +
jl loc_1013539  +
test cl cl +
jnz loc_101352D  +
cmp edi 33h +
jle loc_1013522  +
push 33h  +
pop edi  +
cmp edi 13h +
setnle bl  +
add bl 11h +
jmp loc_101354F  +
cmp edi 5 +
jle loc_1013535  +
push 5  +
pop edi  +
mov bl 13h +
jmp loc_101354F  +
mov eax [ebp+var_B4] +
movzx ecx byte ptr [ebx+esi] +
movzx eax byte ptr [eax+esi] +
sub eax ecx +
mov bl ds:byte_1003ED1[eax] +
movsx eax bl +
movzx ecx word ptr [ebp+eax*2+var_AC] +
movsx eax byte ptr [ebp+eax+var_1C] +
push ecx  +
push eax  +
push [ebp+var_B0]  +
call sub_101312D  +
cmp bl 11h +
jnz loc_1013579  +
lea eax [edi-4] +
push eax  +
push 4  +
jmp loc_10135C8  +
cmp bl 12h +
jnz loc_1013586  +
lea eax [edi-14h] +
push eax  +
push 5  +
jmp loc_10135C8  +
cmp bl 13h +
jnz loc_10135D7  +
lea eax [edi-4] +
push eax  +
push 1  +
push [ebp+var_B0]  +
call sub_101312D  +
mov eax [ebp+var_B4] +
movzx eax byte ptr [eax+esi] +
mov ecx [ebp+var_B8] +
movzx ecx byte ptr [ecx+esi] +
sub eax ecx +
movsx eax ds:byte_1003ED1[eax] +
movzx ecx word ptr [ebp+eax*2+var_AC] +
movsx eax byte ptr [ebp+eax+var_1C] +
push ecx  +
push eax  +
push [ebp+var_B0]  +
call sub_101312D  +
lea esi [esi+edi-1] +
mov ebx [ebp+var_B8] +
inc esi  +
cmp esi [ebp+arg_4] +
jl loc_10134F8  +
mov edi [ebp+var_B4] +
push [ebp+arg_4]  +
push ebx  +
push edi  +
call memcpy  +
mov ecx [ebp+var_4] +
add esp 0Ch +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100DC5B  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_4]  +
mov esi [ebp+arg_0] +
lea eax [esi+33ECh] +
push eax  +
lea eax [esi+2544h] +
push eax  +
lea eax [esi+28FCh] +
push eax  +
mov eax [esi+870h] +
lea eax ds:100h[eax*8] +
push eax  +
push esi  +
call sub_1015118  +
push [ebp+arg_4]  +
lea eax [esi+4006h] +
push eax  +
lea eax [esi+2801h] +
push eax  +
lea eax [esi+3C22h] +
push eax  +
push 0F9h  +
push esi  +
call sub_1015118  +
push 1  +
lea eax [esi+4312h] +
push eax  +
lea eax [esi+4322h] +
push eax  +
lea eax [esi+42F2h] +
push eax  +
push 8  +
push esi  +
call sub_1015118  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
mov al [ecx+55Ch] +
add al 12h +
movzx eax al +
cmp eax [ecx+870h] +
jnb loc_10136D6  +
push esi  +
lea esi ds:100h[eax*8] +
lea edx [ecx+eax*8+2644h] +
cmp esi 2BDh +
jnb loc_10136C6  +
mov byte ptr [edx] 64h +
inc eax  +
add esi 8 +
add edx 8 +
cmp eax [ecx+870h] +
jb loc_10136BB  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push 100h  +
lea edx [esi+3964h] +
lea ecx [esi+2544h] +
push esi  +
call sub_10133E1  +
mov ecx [esi+870h] +
shl ecx 3 +
mov eax 1BCh +
cmp ecx eax +
jnb loc_1013713  +
mov eax ecx +
push eax  +
lea edx [esi+3A64h] +
lea ecx [esi+2644h] +
push esi  +
call sub_10133E1  +
push 0F9h  +
lea edx [esi+41F8h] +
lea ecx [esi+2801h] +
push esi  +
call sub_10133E1  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
push 1  +
lea eax [esi+4312h] +
push eax  +
lea edi [esi+4322h] +
push edi  +
lea eax [esi+42F2h] +
push eax  +
push 8  +
push esi  +
call sub_1015118  +
xor ebx ebx +
movzx eax byte ptr [edi+ebx] +
push eax  +
push 3  +
push esi  +
call sub_101312D  +
inc ebx  +
cmp ebx 8 +
jl loc_1013773  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
xor ecx ecx +
lea edx [eax+ecx+2544h] +
cmp byte ptr [edx] 0 +
jnz loc_10137AB  +
mov byte ptr [edx] 0Bh +
inc ecx  +
cmp ecx 100h +
jb loc_101379C  +
jmp loc_10137C6  +
lea edx [eax+ecx+2544h] +
cmp byte ptr [edx] 0 +
jnz loc_10137C5  +
mov byte ptr [edx] 0Ch +
inc ecx  +
mov edx [eax+870h] +
lea edx ds:100h[edx*8] +
cmp ecx edx +
jb loc_10137B6  +
lea ecx [eax+2801h] +
mov edx 0F9h +
cmp byte ptr [ecx] 0 +
jnz loc_10137EA  +
mov byte ptr [ecx] 8 +
inc ecx  +
dec edx  +
jnz loc_10137E2  +
push eax  +
call sub_1013691  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
push 2  +
pop ebx  +
push 4  +
mov byte ptr [esi+45Ch] 0 +
mov byte ptr [esi+45Dh] 1 +
mov [esi+45Eh] bl +
mov byte ptr [esi+45Fh] 3 +
mov byte ptr [ebp+arg_0] 4 +
pop edi  +
test ebx ebx +
jle loc_1013847  +
push ebx  +
push [ebp+arg_0]  +
lea eax [edi+esi+45Ch] +
push eax  +
call memset  +
add esp 0Ch +
add edi ebx +
inc byte ptr [ebp+arg_0]  +
test ebx ebx +
jle loc_1013864  +
push ebx  +
push [ebp+arg_0]  +
lea eax [edi+esi+45Ch] +
push eax  +
call memset  +
add esp 0Ch +
add edi ebx +
inc byte ptr [ebp+arg_0]  +
add ebx ebx +
cmp edi 400h +
jl loc_101382D  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
xor cl cl +
mov edx eax +
test eax eax +
jz loc_1013897  +
test dl 1 +
jz loc_1013893  +
inc cl  +
sar edx 1 +
jnz loc_101388C  +
mov edx [ebp+arg_0] +
mov [edx+eax+881h] cl +
inc eax  +
cmp eax 100h +
jl loc_1013884  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
push edi  +
mov edi [ebp+arg_4] +
lea ecx [edi-1] +
xor dl dl +
test ecx ecx +
jl loc_10138EB  +
mov esi [eax+2Ch] +
lea esi [esi+ecx*4] +
cmp dword ptr [esi] 2 +
jbe loc_10138DC  +
inc dl  +
cmp dl 3 +
jnb loc_10138ED  +
jmp loc_10138DE  +
xor dl dl +
dec ecx  +
sub esi 4 +
test ecx ecx +
jge loc_10138CE  +
cmp dl 3 +
jnb loc_10138ED  +
xor ecx ecx +
cmp ecx edi +
jge loc_1013929  +
push ebx  +
mov edx [eax+2Ch] +
mov edx [edx+ecx*4] +
test edx edx +
jz loc_1013923  +
cmp edx 2 +
ja loc_1013911  +
mov ebx [eax+38h] +
lea edx [eax+edx*4+38h] +
mov esi [edx] +
mov [edx] ebx +
mov [eax+38h] esi +
jmp loc_1013923  +
mov esi [eax+3Ch] +
mov [eax+40h] esi +
mov esi [eax+38h] +
add edx 0FFFFFFFEh +
mov [eax+3Ch] esi +
mov [eax+38h] edx +
inc ecx  +
cmp ecx edi +
jl loc_10138F2  +
pop ebx  +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax [ebp+arg_0] +
push esi  +
mov [ebp+var_4] 4B0h +
xor edx edx +
lea ecx [eax+28FCh] +
push edi  +
movzx edi word ptr [ecx] +
movzx esi byte ptr [eax+edx+2544h] +
imul esi edi +
add [ebp+var_4] esi +
inc edx  +
inc ecx  +
inc ecx  +
cmp edx 100h +
jb loc_101394F  +
cmp dword ptr [eax+870h] 0 +
mov byte ptr [ebp+arg_0+3] 0 +
jbe loc_10139C4  +
xor edx edx +
push ebx  +
movzx esi ds:byte_1003E8C[edx] +
lea ecx ds:100h[edx*8] +
lea edx [ecx+eax+2544h] +
lea ecx [eax+ecx*2+28FCh] +
mov [ebp+var_8] 8 +
movzx edi byte ptr [edx] +
movzx ebx word ptr [ecx] +
add edi esi +
imul edi ebx +
add [ebp+var_4] edi +
inc ecx  +
inc ecx  +
inc edx  +
dec [ebp+var_8]  +
jnz loc_101399E  +
inc byte ptr [ebp+arg_0+3]  +
movzx edx byte ptr [ebp+arg_0+3] +
cmp edx [eax+870h] +
jb loc_101397B  +
pop ebx  +
xor edx edx +
lea ecx [eax+3C22h] +
movzx edi word ptr [ecx] +
movzx esi byte ptr [eax+edx+2801h] +
imul esi edi +
add [ebp+var_4] esi +
inc edx  +
inc ecx  +
inc ecx  +
cmp edx 0F9h +
jb loc_10139CC  +
mov eax [ebp+var_4] +
add eax 7 +
pop edi  +
shr eax 3 +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
cmp dword ptr [esi+868h] 0 +
jbe loc_1013A3D  +
push esi  +
call sub_101266A  +
mov ecx [esi+85Ch] +
mov eax [esi+860h] +
sub eax ecx +
test eax eax +
jle loc_1013A3D  +
push dword ptr [esi+868h]  +
push eax  +
push ecx  +
push dword ptr [esi+4344h]  +
call dword ptr [esi+4350h]  +
add esp 10h +
mov eax [esi+85Ch] +
and dword ptr [esi+868h] 0 +
and dword ptr [esi+14h] 0 +
mov [esi+860h] eax +
mov byte ptr [esi+18h] 20h +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
movsx eax byte ptr [esi+18h] +
push edi  +
push 0  +
sub eax 10h +
push eax  +
push esi  +
call sub_101312D  +
push 3  +
pop edi  +
lea ecx [esi+38h] +
push ebx  +
mov eax [ecx] +
push 4  +
pop edx  +
mov ebx [esi+860h] +
mov [ebx] al +
inc dword ptr [esi+860h]  +
shr eax 8 +
dec edx  +
jnz loc_1013A88  +
add ecx 4 +
dec edi  +
jnz loc_1013A83  +
mov edi [ebp+arg_8] +
and edi 1 +
cmp [ebp+arg_8] edx +
jbe loc_1013AEC  +
mov ebx [ebp+arg_4] +
mov eax [esi] +
mov al [ebx+eax] +
mov ecx [esi+860h] +
mov [ecx] al +
inc dword ptr [esi+860h]  +
inc ebx  +
dec [ebp+arg_8]  +
inc dword ptr [esi+868h]  +
cmp dword ptr [esi+868h] 8000h +
jnz loc_1013AE6  +
push esi  +
call sub_10139FC  +
mov byte ptr [esi+880h] 0 +
cmp [ebp+arg_8] 0 +
ja loc_1013AB0  +
pop ebx  +
test edi edi +
jz loc_1013B00  +
mov eax [esi+860h] +
mov byte ptr [eax] 0 +
inc dword ptr [esi+860h]  +
and dword ptr [esi+14h] 0 +
pop edi  +
mov byte ptr [esi+18h] 20h +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push edi  +
xor edi edi +
cmp [ebp+arg_4] edi +
jbe loc_1013E2B  +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
mov [ebp+var_4] edi +
mov edx [esi+34h] +
xor eax eax +
mov ecx edi +
and ecx 7 +
inc eax  +
shl eax cl +
mov ecx edi +
shr ecx 3 +
mov cl [ecx+edx] +
test al cl +
mov eax [esi+30h] +
jnz loc_1013BD4  +
movzx eax byte ptr [edi+eax] +
movsx ecx byte ptr [esi+18h] +
lea edx [eax+esi+2544h] +
movzx ebx byte ptr [edx] +
movzx eax word ptr [esi+eax*2+33ECh] +
sub ecx ebx +
shl eax cl +
or [esi+14h] eax +
mov al [edx] +
sub [esi+18h] al +
jmp loc_1013BC2  +
mov eax [esi+860h] +
cmp eax [esi+864h] +
jb loc_1013B98  +
mov eax [esi+85Ch] +
mov dword ptr [esi+1Ch] 1 +
mov [esi+860h] eax +
mov eax [esi+860h] +
mov cl [esi+16h] +
mov [eax] cl +
inc dword ptr [esi+860h]  +
mov eax [esi+860h] +
mov cl [esi+17h] +
mov [eax] cl +
inc dword ptr [esi+860h]  +
shl dword ptr [esi+14h] 10h +
add byte ptr [esi+18h] 10h +
cmp byte ptr [esi+18h] 10h +
jle loc_1013B77  +
inc edi  +
inc dword ptr [esi+868h]  +
jmp loc_1013E07  +
mov bl [edi+eax] +
mov ecx [ebp+var_4] +
mov eax [esi+2Ch] +
mov eax [ecx+eax] +
add [ebp+var_4] 4 +
push eax  +
inc edi  +
push esi  +
mov byte ptr [ebp+arg_0+3] bl +
mov [ebp+var_C] edi +
mov [ebp+var_8] eax +
call sub_10126BE  +
movzx eax al +
cmp bl 7 +
jnb loc_1013C87  +
movzx edx bl +
lea ecx [edx+eax*8] +
movzx ebx word ptr [esi+ecx*2+35ECh] +
lea edi [ecx+esi+2644h] +
movsx ecx byte ptr [esi+18h] +
mov [ebp+arg_0] edi +
movzx edi byte ptr [edi] +
sub ecx edi +
shl ebx cl +
mov ecx [ebp+arg_0] +
or [esi+14h] ebx +
mov cl [ecx] +
sub [esi+18h] cl +
jmp loc_1013C7C  +
mov ecx [esi+860h] +
cmp ecx [esi+864h] +
jb loc_1013C52  +
mov ecx [esi+85Ch] +
mov dword ptr [esi+1Ch] 1 +
mov [esi+860h] ecx +
mov ecx [esi+860h] +
mov bl [esi+16h] +
mov [ecx] bl +
inc dword ptr [esi+860h]  +
mov edi [esi+860h] +
mov cl [esi+17h] +
mov [edi] cl +
inc dword ptr [esi+860h]  +
shl dword ptr [esi+14h] 10h +
add byte ptr [esi+18h] 10h +
cmp byte ptr [esi+18h] 10h +
jle loc_1013C31  +
jmp loc_1013D7D  +
mov ecx eax +
shl ecx 4 +
movzx edi word ptr [ecx+esi+35FAh] +
movsx ecx byte ptr [esi+18h] +
lea edx [esi+eax*8+264Bh] +
movzx ebx byte ptr [edx] +
sub ecx ebx +
shl edi cl +
or [esi+14h] edi +
mov cl [edx] +
sub [esi+18h] cl +
jmp loc_1013CFB  +
mov ecx [esi+860h] +
cmp ecx [esi+864h] +
jb loc_1013CD1  +
mov ecx [esi+85Ch] +
mov dword ptr [esi+1Ch] 1 +
mov [esi+860h] ecx +
mov ecx [esi+860h] +
mov dl [esi+16h] +
mov [ecx] dl +
inc dword ptr [esi+860h]  +
mov ecx [esi+860h] +
mov dl [esi+17h] +
mov [ecx] dl +
inc dword ptr [esi+860h]  +
shl dword ptr [esi+14h] 10h +
add byte ptr [esi+18h] 10h +
cmp byte ptr [esi+18h] 10h +
jle loc_1013CB0  +
movzx edx byte ptr [ebp+arg_0+3] +
movzx ebx byte ptr [edx+esi+27FAh] +
movsx ecx byte ptr [esi+18h] +
movzx edi word ptr [esi+edx*2+3FF8h] +
sub ecx ebx +
shl edi cl +
or [esi+14h] edi +
mov cl [edx+esi+27FAh] +
sub [esi+18h] cl +
jmp loc_1013D77  +
mov ecx [esi+860h] +
cmp ecx [esi+864h] +
jb loc_1013D4D  +
mov ecx [esi+85Ch] +
mov dword ptr [esi+1Ch] 1 +
mov [esi+860h] ecx +
mov ecx [esi+860h] +
mov bl [esi+16h] +
mov [ecx] bl +
inc dword ptr [esi+860h]  +
mov edi [esi+860h] +
mov cl [esi+17h] +
mov [edi] cl +
inc dword ptr [esi+860h]  +
shl dword ptr [esi+14h] 10h +
add byte ptr [esi+18h] 10h +
cmp byte ptr [esi+18h] 10h +
jle loc_1013D2C  +
mov cl ds:byte_1003E8C[eax] +
test cl cl +
jz loc_1013DFB  +
mov edi ds:dword_1003DC0[eax*4] +
and edi [ebp+var_8] +
movzx ebx cl +
movsx ecx byte ptr [esi+18h] +
sub ecx ebx +
shl edi cl +
or [esi+14h] edi +
mov al ds:byte_1003E8C[eax] +
sub [esi+18h] al +
jmp loc_1013DF5  +
mov eax [esi+860h] +
cmp eax [esi+864h] +
jb loc_1013DCB  +
mov eax [esi+85Ch] +
mov dword ptr [esi+1Ch] 1 +
mov [esi+860h] eax +
mov eax [esi+860h] +
mov cl [esi+16h] +
mov [eax] cl +
inc dword ptr [esi+860h]  +
mov eax [esi+860h] +
mov cl [esi+17h] +
mov [eax] cl +
inc dword ptr [esi+860h]  +
shl dword ptr [esi+14h] 10h +
add byte ptr [esi+18h] 10h +
cmp byte ptr [esi+18h] 10h +
jle loc_1013DAA  +
mov edi [ebp+var_C] +
add edx 2 +
add [esi+868h] edx +
cmp dword ptr [esi+868h] 8000h +
jnz loc_1013E20  +
push esi  +
call sub_10139FC  +
mov byte ptr [esi+880h] 0 +
cmp edi [ebp+arg_4] +
jb loc_1013B2F  +
pop esi  +
pop ebx  +
pop edi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
xor eax eax +
mov [ebp+var_4] eax +
cmp [ebp+arg_4] eax +
jbe locret_1014271  +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov [ebp+var_8] eax +
jmp loc_1013E59  +
mov eax [ebp+var_4] +
mov ebx [esi+34h] +
xor edi edi +
inc edi  +
mov ecx eax +
and ecx 7 +
mov edx edi +
shl edx cl +
mov ecx eax +
shr ecx 3 +
mov cl [ecx+ebx] +
test dl cl +
mov ecx [esi+30h] +
jnz loc_1013EFE  +
movzx eax byte ptr [eax+ecx] +
movsx ecx byte ptr [esi+18h] +
lea edx [eax+esi+2544h] +
movzx ebx byte ptr [edx] +
movzx eax word ptr [esi+eax*2+33ECh] +
sub ecx ebx +
shl eax cl +
or [esi+14h] eax +
mov al [edx] +
sub [esi+18h] al +
jmp loc_1013EEA  +
mov eax [esi+860h] +
cmp eax [esi+864h] +
jb loc_1013EC0  +
mov eax [esi+85Ch] +
mov [esi+1Ch] edi +
mov [esi+860h] eax +
mov eax [esi+860h] +
mov cl [esi+16h] +
mov [eax] cl +
inc dword ptr [esi+860h]  +
mov eax [esi+860h] +
mov cl [esi+17h] +
mov [eax] cl +
inc dword ptr [esi+860h]  +
shl dword ptr [esi+14h] 10h +
add byte ptr [esi+18h] 10h +
cmp byte ptr [esi+18h] 10h +
jle loc_1013EA3  +
inc [ebp+var_4]  +
inc dword ptr [esi+868h]  +
jmp loc_1014249  +
mov cl [eax+ecx] +
inc eax  +
mov byte ptr [ebp+arg_0+3] cl +
mov ecx [ebp+var_8] +
add [ebp+var_8] 4 +
mov [ebp+var_4] eax +
mov eax [esi+2Ch] +
mov ebx [ecx+eax] +
push ebx  +
push esi  +
mov [ebp+var_C] ebx +
call sub_10126BE  +
cmp byte ptr [ebp+arg_0+3] 7 +
movzx eax al +
jnb loc_1013FF4  +
movzx ecx byte ptr [ebp+arg_0+3] +
mov [ebp+arg_0] ecx +
lea ecx [ecx+eax*8] +
movzx edi word ptr [esi+ecx*2+35ECh] +
lea edx [ecx+esi+2644h] +
movzx ebx byte ptr [edx] +
movsx ecx byte ptr [esi+18h] +
sub ecx ebx +
shl edi cl +
or [esi+14h] edi +
mov cl [edx] +
sub [esi+18h] cl +
jmp loc_1013FA5  +
mov ecx [esi+860h] +
cmp ecx [esi+864h] +
jb loc_1013F7B  +
mov ecx [esi+85Ch] +
mov dword ptr [esi+1Ch] 1 +
mov [esi+860h] ecx +
mov ecx [esi+860h] +
mov dl [esi+16h] +
mov [ecx] dl +
inc dword ptr [esi+860h]  +
mov ecx [esi+860h] +
mov dl [esi+17h] +
mov [ecx] dl +
inc dword ptr [esi+860h]  +
shl dword ptr [esi+14h] 10h +
add byte ptr [esi+18h] 10h +
cmp byte ptr [esi+18h] 10h +
jle loc_1013F5A  +
mov ebx [ebp+var_C] +
mov cl ds:byte_1003E8C[eax] +
cmp cl 3 +
jb loc_10141C6  +
jbe loc_1014149  +
movzx edx cl +
xor edi edi +
inc edi  +
lea ecx [edx-3] +
shl edi cl +
mov ecx ebx +
shr ecx 3 +
dec edi  +
and edi ecx +
movsx ecx byte ptr [esi+18h] +
sub ecx edx +
add ecx 3 +
shl edi cl +
mov cl 3 +
or [esi+14h] edi +
sub cl ds:byte_1003E8C[eax] +
add [esi+18h] cl +
jmp loc_1014143  +
movzx edi byte ptr [esi+eax*8+264Bh] +
mov ecx eax +
shl ecx 4 +
movzx edx word ptr [ecx+esi+35FAh] +
movsx ecx byte ptr [esi+18h] +
sub ecx edi +
shl edx cl +
or [esi+14h] edx +
mov cl [esi+eax*8+264Bh] +
sub [esi+18h] cl +
jmp loc_101406B  +
mov ecx [esi+860h] +
cmp ecx [esi+864h] +
jb loc_1014041  +
mov ecx [esi+85Ch] +
mov dword ptr [esi+1Ch] 1 +
mov [esi+860h] ecx +
mov ecx [esi+860h] +
mov dl [esi+16h] +
mov [ecx] dl +
inc dword ptr [esi+860h]  +
mov edi [esi+860h] +
mov cl [esi+17h] +
mov [edi] cl +
inc dword ptr [esi+860h]  +
shl dword ptr [esi+14h] 10h +
add byte ptr [esi+18h] 10h +
cmp byte ptr [esi+18h] 10h +
jle loc_1014020  +
movzx ecx byte ptr [ebp+arg_0+3] +
movzx edx word ptr [esi+ecx*2+3FF8h] +
movzx edi byte ptr [ecx+esi+27FAh] +
mov [ebp+arg_0] ecx +
movsx ecx byte ptr [esi+18h] +
sub ecx edi +
shl edx cl +
mov ecx [ebp+arg_0] +
or [esi+14h] edx +
mov cl [ecx+esi+27FAh] +
sub [esi+18h] cl +
jmp loc_10140ED  +
mov ecx [esi+860h] +
cmp ecx [esi+864h] +
jb loc_10140C3  +
mov ecx [esi+85Ch] +
mov dword ptr [esi+1Ch] 1 +
mov [esi+860h] ecx +
mov ecx [esi+860h] +
mov dl [esi+16h] +
mov [ecx] dl +
inc dword ptr [esi+860h]  +
mov edi [esi+860h] +
mov cl [esi+17h] +
mov [edi] cl +
inc dword ptr [esi+860h]  +
shl dword ptr [esi+14h] 10h +
add byte ptr [esi+18h] 10h +
cmp byte ptr [esi+18h] 10h +
jle loc_10140A2  +
jmp loc_1013FAE  +
mov eax [esi+860h] +
cmp eax [esi+864h] +
jb loc_1014119  +
mov eax [esi+85Ch] +
mov dword ptr [esi+1Ch] 1 +
mov [esi+860h] eax +
mov eax [esi+860h] +
mov cl [esi+16h] +
mov [eax] cl +
inc dword ptr [esi+860h]  +
mov eax [esi+860h] +
mov cl [esi+17h] +
mov [eax] cl +
inc dword ptr [esi+860h]  +
shl dword ptr [esi+14h] 10h +
add byte ptr [esi+18h] 10h +
cmp byte ptr [esi+18h] 10h +
jle loc_10140F8  +
movsx ecx byte ptr [esi+18h] +
and bl 7 +
movzx eax bl +
lea edx [eax+esi+4322h] +
movzx edi byte ptr [edx] +
movzx eax word ptr [esi+eax*2+4312h] +
sub ecx edi +
shl eax cl +
or [esi+14h] eax +
mov al [edx] +
sub [esi+18h] al +
jmp loc_10141BE  +
mov eax [esi+860h] +
cmp eax [esi+864h] +
jb loc_1014194  +
mov eax [esi+85Ch] +
mov dword ptr [esi+1Ch] 1 +
mov [esi+860h] eax +
mov eax [esi+860h] +
mov cl [esi+16h] +
mov [eax] cl +
inc dword ptr [esi+860h]  +
mov eax [esi+860h] +
mov cl [esi+17h] +
mov [eax] cl +
inc dword ptr [esi+860h]  +
shl dword ptr [esi+14h] 10h +
add byte ptr [esi+18h] 10h +
cmp byte ptr [esi+18h] 10h +
jle loc_1014173  +
jmp loc_101423D  +
test cl cl +
jz loc_101423D  +
mov edx ds:dword_1003DC0[eax*4] +
movzx edi cl +
movsx ecx byte ptr [esi+18h] +
and edx ebx +
sub ecx edi +
shl edx cl +
or [esi+14h] edx +
mov al ds:byte_1003E8C[eax] +
sub [esi+18h] al +
jmp loc_1014237  +
mov eax [esi+860h] +
cmp eax [esi+864h] +
jb loc_101420D  +
mov eax [esi+85Ch] +
mov dword ptr [esi+1Ch] 1 +
mov [esi+860h] eax +
mov eax [esi+860h] +
mov cl [esi+16h] +
mov [eax] cl +
inc dword ptr [esi+860h]  +
mov eax [esi+860h] +
mov cl [esi+17h] +
mov [eax] cl +
inc dword ptr [esi+860h]  +
shl dword ptr [esi+14h] 10h +
add byte ptr [esi+18h] 10h +
cmp byte ptr [esi+18h] 10h +
jle loc_10141EC  +
mov eax [ebp+arg_0] +
add eax 2 +
add [esi+868h] eax +
cmp dword ptr [esi+868h] 8000h +
jnz loc_1014262  +
push esi  +
call sub_10139FC  +
mov byte ptr [esi+880h] 0 +
mov eax [ebp+var_4] +
cmp eax [ebp+arg_4] +
jb loc_1013E56  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov ecx [ebp+arg_0] +
push ebx  +
push esi  +
push edi  +
xor eax eax +
lea edx [ecx+42F2h] +
mov edi edx +
stos   +
stos   +
stos   +
stos   +
mov edi [ebp+arg_4] +
mov esi [ecx+2Ch] +
xor ebx ebx +
mov [ebp+var_4] ebx +
test edi edi +
jbe loc_10142BD  +
mov eax [esi] +
add esi 4 +
cmp eax 10h +
jb loc_10142BA  +
and eax 7 +
lea eax [ecx+eax*2+42F2h] +
inc word ptr [eax]  +
dec edi  +
jnz loc_10142A3  +
push 8  +
pop ecx  +
movzx eax word ptr [edx] +
cmp eax [ebp+var_4] +
jbe loc_10142CB  +
mov [ebp+var_4] eax +
add ebx eax +
inc edx  +
inc edx  +
dec ecx  +
jnz loc_10142C0  +
push 5  +
pop ecx  +
mov eax ebx +
xor edx edx +
div  ecx +
pop edi  +
pop esi  +
pop ebx  +
cmp [ebp+var_4] eax +
jbe loc_10142EE  +
cmp [ebp+arg_4] 64h +
jb loc_10142EE  +
push 2  +
pop eax  +
jmp locret_10142F1  +
xor eax eax +
inc eax  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
and [ebp+var_8] 0 +
push edi  +
mov edi eax +
cmp edi [ebp+arg_0] +
jnb loc_10143B4  +
push ebx  +
mov ebx ecx +
shl ebx 2 +
mov edx [esi+34h] +
xor eax eax +
mov ecx edi +
and ecx 7 +
inc eax  +
shl eax cl +
mov ecx edi +
shr ecx 3 +
mov cl [ecx+edx] +
test al cl +
mov eax [esi+30h] +
jnz loc_1014346  +
movzx eax byte ptr [eax+edi] +
lea eax [esi+eax*2+28FCh] +
inc word ptr [eax]  +
inc [ebp+var_8]  +
jmp loc_10143A9  +
mov al [edi+eax] +
mov [ebp+var_1] al +
cmp al 7 +
mov eax [esi+2Ch] +
push dword ptr [eax+ebx]  +
push esi  +
jnb loc_101436F  +
call sub_10126BE  +
movzx ecx [ebp+var_1] +
movzx eax al +
lea eax [ecx+eax*8] +
lea eax [esi+eax*2+2AFCh] +
jmp loc_1014392  +
call sub_10126BE  +
movzx eax al +
shl eax 4 +
lea eax [eax+esi+2B0Ah] +
inc word ptr [eax]  +
mov eax [esi+30h] +
movzx eax byte ptr [eax+edi] +
lea eax [esi+eax*2+3C14h] +
inc word ptr [eax]  +
mov eax [esi+30h] +
movzx eax byte ptr [eax+edi] +
mov ecx [ebp+var_8] +
lea eax [ecx+eax+2] +
mov [ebp+var_8] eax +
add ebx 4 +
inc edi  +
cmp edi [ebp+arg_0] +
jb loc_1014317  +
pop ebx  +
mov eax [ebp+var_8] +
pop edi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
mov eax [esi+870h] +
add eax 20h +
shl eax 4 +
push eax  +
lea eax [esi+28FCh] +
push 0  +
push eax  +
call memset  +
push 1F2h  +
lea eax [esi+3C22h] +
push 0  +
push eax  +
call memset  +
mov ecx [ebp+arg_8] +
mov eax [ebp+arg_4] +
add esp 18h +
push [ebp+arg_C]  +
call sub_10142FA  +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_8] +
mov eax [ebp+arg_4] +
push esi  +
push [ebp+arg_C]  +
mov esi [ebp+arg_0] +
call sub_10142FA  +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0C9Ch +
mov eax dword_1016A90 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
mov [ebp+var_C88] eax +
mov eax [ebp+arg_4] +
push esi  +
mov esi ecx +
mov [ebp+var_C8C] eax +
mov eax [esi+870h] +
add eax 20h +
mov ecx eax +
shl ecx 3 +
mov [ebp+var_C9C] ecx +
cmp ecx 320h +
jb loc_1014481  +
xor eax eax +
jmp loc_1014663  +
push ebx  +
push edi  +
mov edi eax +
shl edi 4 +
push edi  +
lea eax [ebp+var_C84] +
push 0  +
push eax  +
call memset  +
push edi  +
lea eax [ebp+var_644] +
push 0  +
push eax  +
call memset  +
mov ecx [ebp+arg_10] +
add esp 18h +
test ecx ecx +
jbe loc_10145E0  +
mov eax [ebp+arg_C] +
mov ebx [esi+34h] +
mov edi [esi+30h] +
shl eax 2 +
mov [ebp+var_C90] eax +
mov eax [ebp+arg_8] +
shl eax 2 +
mov [ebp+var_C94] eax +
mov [ebp+var_C98] ecx +
jmp loc_10144E0  +
mov eax [ebp+var_C94] +
mov ecx [ebp+var_C88] +
and ecx 7 +
xor edx edx +
inc edx  +
shl edx cl +
mov ecx [ebp+var_C88] +
shr ecx 3 +
mov cl [ecx+ebx] +
test dl cl +
jnz loc_101450A  +
mov eax [ebp+var_C88] +
movzx eax byte ptr [edi+eax] +
jmp loc_101454E  +
mov ecx [ebp+var_C88] +
cmp byte ptr [edi+ecx] 7 +
mov ecx [esi+2Ch] +
push dword ptr [ecx+eax]  +
push esi  +
jnb loc_1014538  +
call sub_10126BE  +
mov ecx [ebp+var_C88] +
movzx ecx byte ptr [edi+ecx] +
movzx eax al +
lea eax [ecx+eax*8+100h] +
jmp loc_1014547  +
call sub_10126BE  +
movzx eax al +
lea eax ds:107h[eax*8] +
add [ebp+var_C94] 4 +
inc [ebp+var_C88]  +
lea eax [ebp+eax*2+var_C84] +
inc word ptr [eax]  +
mov eax [ebp+var_C8C] +
xor edx edx +
mov ecx eax +
and ecx 7 +
inc edx  +
shl edx cl +
mov ecx eax +
shr ecx 3 +
mov cl [ecx+ebx] +
test dl cl +
jnz loc_1014580  +
movzx eax byte ptr [edi+eax] +
jmp loc_10145C4  +
cmp byte ptr [edi+eax] 7 +
mov ecx [ebp+var_C90] +
mov eax [esi+2Ch] +
push dword ptr [eax+ecx]  +
push esi  +
jnb loc_10145AE  +
call sub_10126BE  +
mov ecx [ebp+var_C8C] +
movzx ecx byte ptr [edi+ecx] +
movzx eax al +
lea eax [ecx+eax*8+100h] +
jmp loc_10145BD  +
call sub_10126BE  +
movzx eax al +
lea eax ds:107h[eax*8] +
add [ebp+var_C90] 4 +
inc [ebp+var_C8C]  +
lea eax [ebp+eax*2+var_644] +
inc word ptr [eax]  +
dec [ebp+var_C98]  +
jnz loc_10144DA  +
xor esi esi +
xor ebx ebx +
cmp [ebp+var_C9C] esi +
jbe loc_101465F  +
mov edi 100h +
movzx eax word ptr [ebp+esi*2+var_C84] +
mov ecx edi +
cmp ax cx +
movzx eax ax +
jnb loc_101460C  +
movzx eax ds:byte_1003F30[eax] +
jmp loc_1014619  +
shr eax 8 +
movzx eax ds:byte_1003F30[eax] +
add eax 8 +
movzx ecx word ptr [ebp+esi*2+var_644] +
mov edx edi +
cmp cx dx +
movzx ecx cx +
jnb loc_1014634  +
movzx ecx ds:byte_1003F30[ecx] +
jmp loc_1014641  +
shr ecx 8 +
movzx ecx ds:byte_1003F30[ecx] +
add ecx 8 +
mov eax ds:dword_1003EE8[eax*4] +
sub eax ds:dword_1003EE8[ecx*4] +
cdq   +
xor eax edx +
sub eax edx +
add ebx eax +
inc esi  +
cmp esi [ebp+var_C9C] +
jb loc_10145F1  +
pop edi  +
mov eax ebx +
pop ebx  +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop esi  +
call sub_100DC5B  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 838h +
mov eax dword_1016A90 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_10] +
mov ecx [ebp+arg_0] +
mov edx [ebp+arg_8] +
push esi  +
mov esi [ebp+arg_14] +
push edi  +
xor edi edi +
mov [ebp+var_820] ecx +
mov [ebp+var_82C] eax +
mov [ebp+var_830] esi +
mov [eax] edx +
cmp esi edi +
jz loc_10146B9  +
mov eax [ebp+arg_C] +
mov [esi] eax +
mov eax edx +
sub eax [ebp+arg_4] +
cmp eax 1800h +
jnb loc_10146CC  +
xor eax eax +
jmp loc_10148DB  +
mov al [ecx+880h] +
mov [ebp+var_819] al +
cmp al 4 +
jnb loc_10146C5  +
mov esi edx +
shr esi 3 +
xor eax eax +
push ebx  +
mov [ebp+var_818] edi +
cmp esi edi +
jbe loc_101472C  +
test al 7 +
jnz loc_1014716  +
cmp [ebp+var_818] 408h +
jnb loc_10148D8  +
mov ebx [ebp+var_818] +
inc [ebp+var_818]  +
mov [ebp+ebx*2+var_814] di +
mov ebx [ecx+34h] +
movzx ebx byte ptr [ebx+eax] +
movzx ebx byte ptr [ebx+ecx+881h] +
add edi ebx +
inc eax  +
cmp eax esi +
jb loc_10146EE  +
mov eax [ebp+arg_4] +
add eax 3Fh +
and eax 0FFFFFFC0h +
mov [ebp+arg_4] eax +
add eax 800h +
add edx 0FFFFF000h +
mov [ebp+var_824] eax +
mov [ebp+var_834] edx +
cmp eax edx +
jnb loc_10148D8  +
lea esi [eax+400h] +
mov edi 400h +
jmp loc_1014770  +
mov ecx [ebp+var_820] +
mov eax [ebp+var_824] +
mov edx esi +
shr edx 6 +
movzx edx [ebp+edx*2+var_814] +
push edi  +
push edx  +
mov edx eax +
shr edx 6 +
movzx edx [ebp+edx*2+var_814] +
push edx  +
push esi  +
push eax  +
call sub_1014434  +
mov ebx 578h +
cmp eax ebx +
jbe loc_10148BE  +
lea eax [esi+400h] +
mov edx eax +
shr edx 6 +
movzx edx [ebp+edx*2+var_814] +
push edi  +
push edx  +
lea ecx [esi-800h] +
mov edx ecx +
shr edx 6 +
movzx edx [ebp+edx*2+var_814] +
push edx  +
push eax  +
push ecx  +
mov ecx [ebp+var_820] +
call sub_1014434  +
cmp eax ebx +
jbe loc_10148BE  +
lea eax [esi+800h] +
mov edx eax +
shr edx 6 +
movzx edx [ebp+edx*2+var_814] +
push edi  +
push edx  +
lea ecx [esi-0C00h] +
mov edx ecx +
shr edx 6 +
movzx edx [ebp+edx*2+var_814] +
push edx  +
push eax  +
push ecx  +
mov ecx [ebp+var_820] +
call sub_1014434  +
cmp eax ebx +
jbe loc_10148BE  +
and [ebp+var_828] 0 +
lea ebx [esi-200h] +
lea eax [esi+600h] +
cmp ebx eax +
jnb loc_10148BE  +
lea eax [esi-600h] +
mov [ebp+var_818] eax +
mov ecx [ebp+var_820] +
mov eax ebx +
shr eax 6 +
movzx eax [ebp+eax*2+var_814] +
push edi  +
push eax  +
mov eax [ebp+var_818] +
shr eax 6 +
movzx eax [ebp+eax*2+var_814] +
push eax  +
push ebx  +
push [ebp+var_818]  +
call sub_1014434  +
cmp eax [ebp+var_828] +
jbe loc_101488B  +
mov [ebp+var_828] eax +
mov [ebp+var_838] ebx +
add [ebp+var_818] 40h +
add ebx 40h +
lea eax [esi+600h] +
cmp ebx eax +
jb loc_1014844  +
cmp [ebp+var_828] 6A4h +
jb loc_10148BE  +
mov eax [ebp+var_838] +
mov ecx eax +
sub ecx [ebp+arg_4] +
cmp ecx 1000h +
jnb loc_10148EB  +
add [ebp+var_824] edi +
mov eax [ebp+var_824] +
add esi edi +
cmp eax [ebp+var_834] +
jb loc_1014764  +
xor eax eax +
pop ebx  +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_100DC5B  +
leave   +
retn 18h  +
mov cl [ebp+var_819] +
mov edx [ebp+var_820] +
inc cl  +
mov [edx+880h] cl +
mov ecx [ebp+var_82C] +
mov [ecx] eax +
mov ecx [ebp+var_830] +
test ecx ecx +
jz loc_101491E  +
shr eax 6 +
movzx eax [ebp+eax*2+var_814] +
mov [ecx] eax +
xor eax eax +
inc eax  +
jmp loc_10148DA  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 24h +
mov ecx [ebp+arg_0] +
mov eax [ecx] +
mov edx [ecx+8] +
push ebx  +
push esi  +
mov esi [ebp+arg_4] +
movzx eax word ptr [esi+eax] +
lea eax [edx+eax*4] +
mov edx [eax] +
mov [eax] esi +
mov ebx [ecx+10h] +
mov eax esi +
sub eax [ecx+4] +
push edi  +
mov edi [ecx+0Ch] +
add eax 4 +
mov [ebp+var_24] eax +
mov [ebp+var_1C] edi +
mov [ebp+var_C] ebx +
cmp edx eax +
ja loc_1014976  +
shl esi 2 +
and dword ptr [esi+ebx] 0 +
and dword ptr [esi+edi] 0 +
xor eax eax +
jmp loc_1014B41  +
push 2  +
pop eax  +
mov ebx esi +
mov [ebp+arg_4] eax +
mov [ebp+arg_0] eax +
mov [ebp+var_18] eax +
mov [ebp+var_14] eax +
sub ebx edx +
add ebx eax +
lea eax [edi+esi*4] +
mov [ebp+var_4] eax +
mov eax [ebp+var_C] +
lea eax [eax+esi*4] +
mov [ecx+58h] ebx +
mov [ebp+var_8] eax +
mov eax [ebp+arg_4] +
mov [ebp+var_20] eax +
mov eax [ecx] +
lea ebx [eax+edx] +
lea edi [eax+esi] +
mov eax [ebp+arg_4] +
mov al [ebx+eax] +
mov [ebp+var_10] ebx +
mov ebx [ebp+arg_4] +
cmp al [edi+ebx] +
mov ebx [ebp+var_20] +
jnz loc_10149E7  +
inc ebx  +
cmp ebx 101h +
jge loc_1014A00  +
mov eax [ebp+var_10] +
mov al [eax+ebx] +
cmp al [edi+ebx] +
jnz loc_10149E7  +
inc ebx  +
cmp ebx 101h +
jge loc_1014A00  +
mov eax [ebp+var_10] +
mov al [eax+ebx] +
cmp al [edi+ebx] +
jz loc_10149BF  +
mov eax [ebp+var_10] +
mov al [eax+ebx] +
cmp al [edi+ebx] +
jge loc_1014B48  +
cmp ebx [ebp+var_14] +
jle loc_1014A3A  +
cmp ebx [ebp+arg_0] +
jle loc_1014A2A  +
mov eax esi +
sub eax edx +
add eax 2 +
mov [ebp+arg_4] eax +
mov eax [ebp+arg_0] +
lea eax [ecx+eax*4+50h] +
inc [ebp+arg_0]  +
mov edi [ebp+arg_4] +
add eax 4 +
cmp [ebp+arg_0] ebx +
mov [eax] edi +
jl loc_1014A11  +
cmp ebx 32h +
jge loc_1014B9F  +
mov eax [ebp+var_18] +
cmp eax ebx +
mov [ebp+var_14] ebx +
mov [ebp+arg_4] eax +
jl loc_1014A3A  +
mov [ebp+arg_4] ebx +
mov eax [ebp+var_8] +
mov edi [ebp+var_4] +
mov [eax] edx +
mov eax [ebp+var_1C] +
lea eax [eax+edx*4] +
mov edx [eax] +
mov [ebp+var_8] eax +
cmp edx [ebp+var_24] +
ja loc_101499D  +
and dword ptr [edi] 0 +
and dword ptr [eax] 0 +
xor edi edi +
cmp [ebp+arg_0] edi +
jle loc_1014A7C  +
mov eax [ecx] +
mov edx eax +
sub edx [ecx+44h] +
add edx esi +
add eax esi +
mov bl [eax+edi] +
cmp bl [edx] +
jnz loc_1014A7C  +
inc edi  +
inc edx  +
cmp edi [ebp+arg_0] +
jl loc_1014A6E  +
cmp edi 2 +
mov ebx edi +
jl loc_1014A9C  +
lea eax [ecx+edi*4+50h] +
and dword ptr [eax] 0 +
dec edi  +
sub eax 4 +
cmp edi 2 +
jge loc_1014A87  +
cmp ebx 32h +
jg loc_1014B24  +
and [ebp+arg_4] 0 +
cmp [ebp+arg_0] 0 +
jle loc_1014AC8  +
mov eax [ecx] +
mov edx eax +
sub edx [ecx+48h] +
lea edi [eax+esi] +
add edx esi +
mov eax [ebp+arg_4] +
mov al [edi+eax] +
cmp al [edx] +
jnz loc_1014AC8  +
inc [ebp+arg_4]  +
mov eax [ebp+arg_0] +
inc edx  +
cmp [ebp+arg_4] eax +
jl loc_1014AB2  +
cmp [ebp+arg_4] ebx +
jle loc_1014AE0  +
lea eax [ecx+ebx*4+50h] +
inc ebx  +
add eax 4 +
cmp ebx [ebp+arg_4] +
mov dword ptr [eax] 1 +
jl loc_1014AD1  +
and [ebp+arg_4] 0 +
cmp [ebp+arg_0] 0 +
jle loc_1014B0C  +
mov eax [ecx] +
mov edx eax +
sub edx [ecx+4Ch] +
lea edi [eax+esi] +
add edx esi +
mov eax [ebp+arg_4] +
mov al [edi+eax] +
cmp al [edx] +
jnz loc_1014B0C  +
inc [ebp+arg_4]  +
mov eax [ebp+arg_0] +
inc edx  +
cmp [ebp+arg_4] eax +
jl loc_1014AF6  +
cmp [ebp+arg_4] ebx +
jle loc_1014B24  +
lea ecx [ecx+ebx*4+50h] +
inc ebx  +
add ecx 4 +
cmp ebx [ebp+arg_4] +
mov dword ptr [ecx] 2 +
jl loc_1014B15  +
mov eax 7FFFh +
and esi eax +
sub eax esi +
cmp [ebp+arg_0] eax +
jle loc_1014B3E  +
cmp eax 2 +
mov [ebp+arg_0] eax +
jge loc_1014B3E  +
and [ebp+arg_0] 0 +
mov eax [ebp+arg_0] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
cmp ebx [ebp+var_18] +
jle loc_1014B87  +
mov eax [ebp+arg_0] +
cmp ebx eax +
jle loc_1014B77  +
mov edi esi +
sub edi edx +
add edi 2 +
mov [ebp+arg_4] edi +
lea eax [ecx+eax*4+50h] +
inc [ebp+arg_0]  +
mov edi [ebp+arg_4] +
add eax 4 +
cmp [ebp+arg_0] ebx +
mov [eax] edi +
jl loc_1014B62  +
cmp ebx 32h +
jge loc_1014B9F  +
mov eax [ebp+var_14] +
cmp ebx eax +
mov [ebp+var_18] ebx +
mov [ebp+arg_4] ebx +
jl loc_1014B87  +
mov [ebp+arg_4] eax +
mov eax [ebp+var_4] +
mov [eax] edx +
mov eax [ebp+var_C] +
lea edi [eax+edx*4] +
mov edx [edi] +
mov eax [ebp+var_8] +
mov [ebp+var_4] edi +
jmp loc_1014A4D  +
mov eax [ebp+var_1C] +
mov edi [ebp+var_4] +
shl edx 2 +
mov eax [edx+eax] +
mov [edi] eax +
mov eax [ebp+var_C] +
mov eax [edx+eax] +
mov edx [ebp+var_8] +
mov [edx] eax +
jmp loc_1014A5C  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
mov edx [ebp+arg_0] +
mov eax [edx] +
mov ecx [edx+8] +
push esi  +
mov esi [ebp+arg_4] +
movzx eax word ptr [esi+eax] +
lea ecx [ecx+eax*4] +
mov eax [ecx] +
mov [ecx] esi +
mov ecx [edx+0Ch] +
push edi  +
mov edi [edx+10h] +
mov [ebp+var_14] ecx +
mov [ebp+var_18] edi +
cmp eax [ebp+arg_8] +
ja loc_1014C03  +
shl esi 2 +
and dword ptr [esi+edi] 0 +
and dword ptr [esi+ecx] 0 +
jmp loc_1014CE5  +
push ebx  +
lea ecx [ecx+esi*4] +
push 2  +
pop ebx  +
mov [ebp+arg_4] ecx +
lea ecx [edi+esi*4] +
mov [ebp+var_C] ebx +
mov [ebp+var_10] ebx +
mov [ebp+var_4] ecx +
mov edx [edx] +
lea edi [edx+eax] +
mov [ebp+var_8] edi +
lea edi [edx+esi] +
mov edx [ebp+var_8] +
mov dl [edx+ebx] +
mov ecx ebx +
cmp dl [edi+ebx] +
jnz loc_1014C57  +
inc ecx  +
cmp ecx 32h +
jge loc_1014CCB  +
mov edx [ebp+var_8] +
mov dl [edx+ecx] +
cmp dl [edi+ecx] +
jnz loc_1014C57  +
inc ecx  +
cmp ecx 32h +
jge loc_1014CCB  +
mov edx [ebp+var_8] +
mov dl [edx+ecx] +
cmp dl [edi+ecx] +
jz loc_1014C31  +
mov edx [ebp+var_8] +
mov dl [edx+ecx] +
cmp dl [edi+ecx] +
jge loc_1014C8D  +
cmp ecx [ebp+var_10] +
jle loc_1014C78  +
cmp ecx 32h +
jge loc_1014CCB  +
mov ebx [ebp+var_C] +
cmp ebx ecx +
mov [ebp+var_10] ecx +
jl loc_1014C78  +
mov ebx ecx +
mov ecx [ebp+var_4] +
mov [ecx] eax +
mov ecx [ebp+var_14] +
lea edx [ecx+eax*4] +
mov eax [edx] +
mov ecx [ebp+arg_4] +
mov [ebp+var_4] edx +
jmp loc_1014CB6  +
cmp ecx [ebp+var_C] +
jle loc_1014CA3  +
cmp ecx 32h +
jge loc_1014CCB  +
mov ebx [ebp+var_10] +
cmp ecx ebx +
mov [ebp+var_C] ecx +
jge loc_1014CA3  +
mov ebx ecx +
mov ecx [ebp+arg_4] +
mov edx [ebp+var_4] +
mov [ecx] eax +
mov ecx [ebp+var_18] +
lea ecx [ecx+eax*4] +
mov eax [ecx] +
mov [ebp+arg_4] ecx +
cmp eax [ebp+arg_8] +
jbe loc_1014CC3  +
mov edx [ebp+arg_0] +
jmp loc_1014C19  +
and dword ptr [ecx] 0 +
and dword ptr [edx] 0 +
jmp loc_1014CE4  +
mov ecx [ebp+var_14] +
mov edx [ebp+arg_4] +
shl eax 2 +
mov ecx [eax+ecx] +
mov [edx] ecx +
mov ecx [ebp+var_18] +
mov eax [eax+ecx] +
mov ecx [ebp+var_4] +
mov [ecx] eax +
pop ebx  +
pop edi  +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [ebp+arg_4] +
mov edx [eax] +
movzx edx word ptr [ecx+edx] +
push esi  +
mov esi [eax+8] +
lea edx [esi+edx*4] +
cmp [edx] ecx +
jnz loc_1014D2A  +
push ebx  +
mov ebx [ebp+arg_8] +
push edi  +
mov edi [eax+0Ch] +
mov eax [eax+10h] +
cmp [edx] ebx +
ja loc_1014D2F  +
xor esi esi +
shl ecx 2 +
mov [edx] esi +
mov [ecx+eax] esi +
mov [ecx+edi] esi +
pop edi  +
pop ebx  +
pop esi  +
pop ebp  +
retn 0Ch  +
shl ecx 2 +
mov esi [ecx+edi] +
cmp esi ebx +
ja loc_1014D3F  +
and dword ptr [ecx+edi] 0 +
xor esi esi +
add ecx eax +
mov [ebp+arg_0] ecx +
mov ecx [ecx] +
cmp ecx ebx +
ja loc_1014D52  +
mov ecx [ebp+arg_0] +
and dword ptr [ecx] 0 +
xor ecx ecx +
cmp esi ecx +
jbe loc_1014D6E  +
cmp esi ebx +
ja loc_1014D5C  +
xor esi esi +
mov [edx] esi +
test esi esi +
jz loc_1014D28  +
mov edx esi +
shl edx 2 +
mov esi [edx+eax] +
add edx eax +
jmp loc_1014D52  +
cmp ecx ebx +
ja loc_1014D74  +
xor ecx ecx +
mov [edx] ecx +
test ecx ecx +
jz loc_1014D28  +
mov edx ecx +
shl edx 2 +
mov ecx [edx+edi] +
add edx edi +
jmp loc_1014D52  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
movsx ebx [ebp+arg_4] +
push esi  +
mov esi [ebp+arg_0] +
cmp ebx [esi+252Ch] +
jge loc_1014DBF  +
mov al [esi+2532h] +
cmp al 10h +
jge loc_1014DB0  +
movsx eax al +
jmp loc_1014DB3  +
push 10h  +
pop eax  +
lea eax [esi+eax*2+2508h] +
inc word ptr [eax]  +
jmp loc_1014DE9  +
push edi  +
lea edi [esi+2532h] +
inc byte ptr [edi]  +
movzx eax word ptr [esi+ebx*4+0F2Ch] +
push eax  +
push esi  +
call sub_1014D8B  +
movzx eax word ptr [esi+ebx*4+0F2Eh] +
push eax  +
push esi  +
call sub_1014D8B  +
dec byte ptr [edi]  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
xor eax eax +
push edi  +
movzx esi ax +
push 8  +
mov eax esi +
pop ecx  +
push [ebp+arg_0]  +
shl esi 10h +
or eax esi +
lea edi [edx+2508h] +
stos   +
push edx  +
stos   +
call sub_1014D8B  +
and [ebp+arg_0] 0 +
and [ebp+var_4] 0 +
lea esi [edx+2528h] +
mov bl 10h +
mov eax esi +
mov di [eax] +
mov ecx [ebp+var_4] +
shl di cl +
add word ptr [ebp+arg_0] di +
dec bl  +
dec eax  +
dec eax  +
inc [ebp+var_4]  +
test bl bl +
ja loc_1014E31  +
xor edi edi +
cmp word ptr [ebp+arg_0] di +
jz loc_1014E91  +
mov ecx 0FFFFh +
mov eax ecx +
add [esi] ax +
mov al 0Fh +
movzx ebx al +
cmp [edx+ebx*2+2508h] di +
jnz loc_1014E70  +
dec al  +
jnz loc_1014E5D  +
jmp loc_1014E88  +
movzx eax al +
mov ebx ecx +
add [edx+eax*2+2508h] bx +
lea eax [edx+eax*2+250Ah] +
add word ptr [eax] 2 +
add [ebp+arg_0] ecx +
cmp word ptr [ebp+arg_0] di +
jnz loc_1014E56  +
mov cl 10h +
mov [ebp+arg_0] esi +
mov eax [ebp+arg_0] +
mov ax [eax] +
dec ax  +
movzx edi ax +
test di di +
jl loc_1014EC3  +
lea eax [edx+9A8h] +
mov esi [eax] +
movzx esi word ptr [esi] +
mov ebx [edx+9ACh] +
mov [esi+ebx] cl +
add dword ptr [eax] 2 +
dec edi  +
test di di +
jge loc_1014EAC  +
sub [ebp+arg_0] 2 +
dec cl  +
test cl cl +
ja loc_1014E96  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov ecx [ebp+arg_0] +
movsx edx cx +
movzx edx word ptr [eax+edx*2+9B0h] +
add ecx ecx +
mov [ebp+var_4] edx +
movzx edx word ptr [eax+2530h] +
movzx ecx cx +
cmp cx dx +
jg loc_1014F79  +
push ebx  +
push esi  +
push edi  +
jge loc_1014F2A  +
mov esi [eax+9A4h] +
movsx edx cx +
movsx edi word ptr [eax+edx*2+9B2h] +
movsx edx word ptr [eax+edx*2+9B0h] +
mov dx [esi+edx*2] +
cmp dx [esi+edi*2] +
jbe loc_1014F2A  +
inc ecx  +
mov edx 2BEh +
cmp cx dx +
jge loc_1014F76  +
movsx ebx word ptr [ebp+var_4] +
movsx edx cx +
movzx esi word ptr [eax+edx*2+9B0h] +
mov edx [eax+9A4h] +
mov bx [edx+ebx*2] +
movsx edi si +
cmp bx [edx+edi*2] +
jbe loc_1014F76  +
movsx edx word ptr [ebp+arg_0] +
mov [eax+edx*2+9B0h] si +
movzx edx cx +
mov [ebp+arg_0] edx +
movzx edx word ptr [eax+2530h] +
add ecx ecx +
cmp cx dx +
jle loc_1014F04  +
pop edi  +
pop esi  +
pop ebx  +
movsx ecx word ptr [ebp+arg_0] +
mov dx word ptr [ebp+var_4] +
mov [eax+ecx*2+9B0h] dx +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 28h +
mov eax dword_1016A90 +
xor eax ebp +
mov [ebp+var_4] eax +
xor eax eax +
mov word ptr [ebp+var_28] ax +
mov word ptr [ebp+var_28+2] ax +
mov eax [ebp+arg_0] +
xor ecx ecx +
inc ecx  +
add eax 250Ah +
push edi  +
mov di word ptr [ebp+ecx*2+var_28] +
add di [eax] +
add di di +
mov word ptr [ebp+ecx*2+var_28+2] di +
inc ecx  +
inc eax  +
inc eax  +
cmp ecx 10h +
jle loc_1014FBA  +
xor ecx ecx +
cmp [ebp+arg_4] ecx +
pop edi  +
jle loc_1014FF8  +
movsx eax byte ptr [edx+ecx] +
mov ax word ptr [ebp+eax*2+var_28] +
mov [esi+ecx*2] ax +
movsx eax byte ptr [edx+ecx] +
lea eax [ebp+eax*2+var_28] +
inc word ptr [eax]  +
inc ecx  +
cmp ecx [ebp+arg_4] +
jl loc_1014FDA  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_100DC5B  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov cx [eax+2530h] +
sub esp 0Ch +
push esi  +
sar cx 1 +
push edi  +
movzx esi cx +
jmp loc_101502B  +
push esi  +
call sub_1014ED9  +
dec esi  +
cmp si 1 +
jge loc_1015024  +
mov ecx [ebp+arg_4] +
mov [eax+9A8h] ecx +
movzx ecx word ptr [eax+9B2h] +
movsx edx cx +
cmp edx [eax+252Ch] +
mov [ebp+var_8] ecx +
mov [ebp+var_4] edx +
jge loc_1015062  +
mov edx [eax+9A8h] +
mov [edx] cx +
add dword ptr [eax+9A8h] 2 +
movzx ecx word ptr [eax+2530h] +
movsx edx cx +
mov dx [eax+edx*2+9B0h] +
dec ecx  +
push 1  +
mov [eax+9B2h] dx +
mov [eax+2530h] cx +
call sub_1014ED9  +
movzx edx word ptr [eax+9B2h] +
movsx ecx dx +
cmp ecx [eax+252Ch] +
mov [ebp+var_C] edx +
jge loc_10150AF  +
mov esi [eax+9A8h] +
mov [esi] dx +
add dword ptr [eax+9A8h] 2 +
movzx edi word ptr [ebp+arg_0] +
mov cx [ebx+ecx*2] +
mov edx [ebp+var_4] +
add cx [ebx+edx*2] +
inc [ebp+arg_0]  +
movsx esi di +
mov [ebx+esi*2] cx +
push 1  +
mov [eax+9B2h] di +
call sub_1014ED9  +
mov cx word ptr [ebp+var_8] +
mov [eax+esi*4+0F2Ch] cx +
mov cx word ptr [ebp+var_C] +
mov [eax+esi*4+0F2Eh] cx +
cmp word ptr [eax+2530h] 1 +
jg loc_101503A  +
mov ecx [ebp+arg_4] +
push edi  +
mov edx eax +
mov [eax+9A8h] ecx +
call sub_1014DF4  +
pop edi  +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_8] +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov eax [ebp+arg_4] +
mov [esi+252Ch] eax +
mov eax [ebp+arg_C] +
movzx edx word ptr [esi+252Ch] +
mov [esi+9ACh] eax +
xor eax eax +
xor ecx ecx +
cmp [ebp+arg_4] eax +
mov [esi+9A4h] ebx +
mov byte ptr [esi+2532h] 0 +
mov [esi+2530h] ax +
mov [esi+9B2h] ax +
jle loc_10151C4  +
mov edi [esi+9ACh] +
mov byte ptr [eax+edi] 0 +
cmp word ptr [ebx+eax*2] 0 +
jz loc_101518B  +
inc word ptr [esi+2530h]  +
movzx eax word ptr [esi+2530h] +
cwde   +
mov [esi+eax*2+9B0h] cx +
inc ecx  +
movsx eax cx +
cmp eax [ebp+arg_4] +
jl loc_1015163  +
movzx eax word ptr [esi+2530h] +
cmp ax 2 +
jge loc_10151D6  +
test ax ax +
jz loc_10151C4  +
xor eax eax +
inc eax  +
cmp word ptr [esi+9B2h] 0 +
jnz loc_10151BC  +
mov [ebx+2] ax +
jmp loc_1015126  +
mov [ebx] ax +
jmp loc_1015126  +
movsx eax word ptr [esi+9B2h] +
mov edx [ebp+arg_10] +
xor ecx ecx +
mov [edx+eax*2] cx +
jmp loc_10151F6  +
push [ebp+arg_10]  +
mov eax esi +
push edx  +
call sub_101500B  +
cmp [ebp+arg_14] 0 +
jz loc_10151F6  +
push [ebp+arg_4]  +
mov edx [ebp+arg_C] +
push esi  +
mov esi [ebp+arg_10] +
call sub_1014F92  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 18h  +
***
