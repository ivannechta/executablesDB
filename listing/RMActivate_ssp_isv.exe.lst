push edi  +
pushf   +
push ebp  +
mov ebp esp +
sub esp 24h +
mov [ebp-14h] eax +
mov [ebp-18h] ecx +
mov [ebp-20h] edx +
mov [ebp-10h] ebx +
mov [ebp-24h] esi +
mov [ebp-1Ch] edi +
lea esi [ebp+4] +
mov edi offset Address +
mov eax [esi+8] +
sub esi 4 +
mov ebx [eax] +
shr ebx 1 +
lea ecx [eax+4] +
lea eax [ecx-1] +
and ebx 0FFFFFFFh +
add ebx offset __ImageBase +
mov [ebp-0Ch] ebx +
cmp eax edi +
mov [ebp-8] eax +
jb loc_1001219  +
mov edx ds:dword_102543C +
mov eax ds:dword_101A35C +
imul eax edx +
lea edx Address[eax] +
mov eax [ebp-8] +
cmp eax edx +
jnb loc_1001219  +
mov ebx ds:dword_102543C +
sub eax edi +
xor edx edx +
div  ebx +
mov ebx [ebp-0Ch] +
mov edx ds:dword_102543C +
imul edx eax +
lea eax Address[edx] +
mov [ebp-4] eax +
mov eax [ebp-8] +
jmp loc_100121D  +
and dword ptr [ebp-4] 0 +
cmp dword ptr [ebp-4] 0 +
jnz loc_100122B  +
and eax 0FFFF0000h +
mov [ebp-4] eax +
mov edx [ebp-4] +
sub ecx edx +
lea eax [ecx-40h] +
test eax eax +
jge loc_1001239  +
xor eax eax +
push 40h  +
add eax edx +
pop ecx  +
mov byte ptr [eax] 0 +
inc eax  +
dec ecx  +
jnz loc_100123E  +
mov eax 9856958Fh +
cmp [ebp-4] edi +
jb loc_1001288  +
mov eax ds:dword_101A35C +
mov ecx ds:dword_102543C +
imul eax ecx +
lea eax Address[eax] +
cmp [ebp-4] eax +
jnb loc_1001288  +
mov ecx ds:dword_102543C +
mov eax [ebp-4] +
sub eax edi +
xor edx edx +
div  ecx +
mov ecx ds:dword_102543C +
imul ecx eax +
lea ecx Address[ecx] +
jmp loc_100128A  +
xor ecx ecx +
test ecx ecx +
jz loc_10012B0  +
mov ecx ds:dword_102543C +
mov eax [ebp-4] +
sub eax edi +
xor edx edx +
div  ecx +
mov ecx ds:dword_101A35C +
mov dword_1042454[eax*4] 0E941h +
jmp loc_10012CF  +
call ds:__imp_GetLastError  +
push 8000h  +
push 0  +
push dword ptr [ebp-4]  +
mov edi eax +
call ds:VirtualFree  +
push edi  +
call ds:SetLastError  +
mov [esi+8] ebx +
add dword ptr [esi+0Ch] 4 +
mov edx [ebp-20h] +
mov ecx [ebp-18h] +
mov esi [ebp-24h] +
mov ebx [ebp-10h] +
mov eax [ebp-14h] +
mov edi [ebp-1Ch] +
mov esp ebp +
pop ebp  +
popf   +
retn   +
***
pushf   +
push ebp  +
mov ebp esp +
sub esp 24h +
mov [ebp-14h] eax +
mov [ebp-18h] ecx +
mov [ebp-20h] edx +
mov [ebp-10h] ebx +
lea ebx [ebp+4] +
mov [ebp-24h] esi +
mov [ebp-1Ch] edi +
mov eax [ebx+4] +
sub ebx 4 +
mov esi offset Address +
mov ecx [eax] +
shr ecx 1 +
and ecx 0FFFFFFFh +
add ecx offset __ImageBase +
mov [ebp-0Ch] ecx +
mov [ebp-8] ebx +
lea ecx [eax+4] +
lea edi [ecx-1] +
cmp edi esi +
jb loc_1001371  +
mov edx ds:dword_102543C +
mov eax ds:dword_101A35C +
imul eax edx +
lea eax Address[eax] +
cmp edi eax +
jnb loc_1001371  +
mov eax edi +
mov ebx ds:dword_102543C +
sub eax esi +
xor edx edx +
div  ebx +
mov edx ds:dword_102543C +
imul edx eax +
mov ebx [ebp-8] +
lea eax Address[edx] +
mov [ebp-4] eax +
jmp loc_1001375  +
and dword ptr [ebp-4] 0 +
cmp dword ptr [ebp-4] 0 +
jnz loc_1001384  +
and edi 0FFFF0000h +
mov [ebp-4] edi +
mov edx [ebp-4] +
sub ecx edx +
lea eax [ecx-40h] +
test eax eax +
jge loc_1001392  +
xor eax eax +
push 40h  +
add eax edx +
pop ecx  +
mov byte ptr [eax] 0 +
inc eax  +
dec ecx  +
jnz loc_1001397  +
mov eax 25CDF0CFh +
mov edi [ebp-4] +
cmp edi esi +
jb loc_10013E1  +
mov eax ds:dword_101A35C +
mov ecx ds:dword_102543C +
imul eax ecx +
lea eax Address[eax] +
cmp edi eax +
jnb loc_10013E1  +
mov eax edi +
mov ecx ds:dword_102543C +
sub eax esi +
xor edx edx +
div  ecx +
mov ecx ds:dword_102543C +
imul ecx eax +
lea ecx Address[ecx] +
jmp loc_10013E3  +
xor ecx ecx +
test ecx ecx +
jz loc_1001408  +
mov eax edi +
mov ecx ds:dword_102543C +
sub eax esi +
xor edx edx +
div  ecx +
mov ecx ds:dword_101A35C +
mov dword_1042454[eax*4] 0E941h +
jmp loc_1001425  +
call ds:__imp_GetLastError  +
push 8000h  +
mov esi eax +
push 0  +
push edi  +
call ds:VirtualFree  +
push esi  +
call ds:SetLastError  +
mov eax [ebp-0Ch] +
mov [ebx+8] eax +
mov ebx [ebp-10h] +
mov eax [ebp-14h] +
mov edi [ebp-1Ch] +
mov ecx [ebp-18h] +
mov esi [ebp-24h] +
mov edx [ebp-20h] +
mov esp ebp +
pop ebp  +
popf   +
retn   +
***
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ebp+8] +
mov eax [eax+0Ch] +
mov ecx [eax] +
push ebx  +
shr ecx 2 +
push esi  +
and ecx 0FFFFFFFh +
mov esi offset Address +
add ecx offset __ImageBase +
mov [ebp-4] ecx +
lea ecx [eax+4] +
push edi  +
lea edi [ecx-1] +
cmp edi esi +
jb loc_10014AB  +
mov edx ds:dword_102543C +
mov eax ds:dword_101A35C +
imul eax edx +
lea eax Address[eax] +
cmp edi eax +
jnb loc_10014AB  +
xor edx edx +
mov eax edi +
sub eax esi +
mov ebx ds:dword_102543C +
div  ebx +
mov edx ds:dword_102543C +
imul edx eax +
lea ebx Address[edx] +
jmp loc_10014AD  +
xor ebx ebx +
test ebx ebx +
jnz loc_10014B9  +
and edi 0FFFF0000h +
mov ebx edi +
sub ecx ebx +
lea eax [ecx-40h] +
test eax eax +
jge loc_10014C4  +
xor eax eax +
push 40h  +
add eax ebx +
pop ecx  +
mov byte ptr [eax] 0 +
inc eax  +
dec ecx  +
jnz loc_10014C9  +
mov eax 51E60939h +
cmp ebx esi +
jb loc_1001510  +
mov ecx ds:dword_102543C +
mov eax ds:dword_101A35C +
imul eax ecx +
lea eax Address[eax] +
cmp ebx eax +
jnb loc_1001510  +
mov ecx ds:dword_102543C +
mov eax ebx +
sub eax esi +
xor edx edx +
div  ecx +
mov ecx ds:dword_102543C +
imul ecx eax +
lea ecx Address[ecx] +
jmp loc_1001512  +
xor ecx ecx +
test ecx ecx +
jz loc_1001537  +
mov eax ebx +
sub eax esi +
xor edx edx +
mov ecx ds:dword_102543C +
div  ecx +
mov ecx ds:dword_101A35C +
mov dword_1042454[eax*4] 0E941h +
jmp loc_1001554  +
call ds:__imp_GetLastError  +
mov esi eax +
push 8000h  +
push 0  +
push ebx  +
call ds:VirtualFree  +
push esi  +
call ds:SetLastError  +
mov eax [ebp+8] +
mov ecx [ebp-4] +
pop edi  +
pop esi  +
mov [eax+8] ecx +
add dword ptr [eax+0Ch] 4 +
pop ebx  +
leave   +
retn 8  +
***
xor edi edi +
jmp loc_1001838  +
***
mov eax edi +
inc edi  +
mov [ebp-0E4h] edi +
mov edi 0F000h +
test [ebx+eax*2+8] di +
jz loc_1001818  +
movzx eax word ptr [ebx+eax*2+8] +
and eax edx +
mov edx [ebx] +
xor edi edi +
lea eax __ImageBase[eax+edx] +
mov [ebp-70h] eax +
sub [ebp-70h] esi +
mov [ebp-0D8h] eax +
jz loc_10018EB  +
movzx edx byte ptr [edi+esi] +
add edx ecx +
add [ebp-68h] edx +
add edx [ebp-64h] +
mov eax edx +
imul eax eax +
rol eax 0Ch +
ror edx 0Ch +
xor eax edx +
mov edx ecx +
mul  edx +
add eax edx +
mov edx ecx +
mul  edx +
add eax edx +
add [ebp-68h] eax +
inc edi  +
mov [ebp-64h] eax +
cmp edi [ebp-70h] +
jb loc_10018B7  +
mov esi [ebp-0D8h] +
mov eax [esi] +
sub eax [ebp-104h] +
mov [ebp-10Ch] eax +
xor edi edi +
movzx edx byte ptr [ebp+edi-10Ch] +
add edx ecx +
add [ebp-68h] edx +
add edx [ebp-64h] +
mov eax edx +
imul eax eax +
rol eax 0Ch +
ror edx 0Ch +
xor eax edx +
mov edx ecx +
mul  edx +
add eax edx +
mov edx ecx +
mul  edx +
add eax edx +
add [ebp-68h] eax +
inc edi  +
cmp edi 4 +
mov [ebp-64h] eax +
jb loc_1001901  +
add esi 4 +
mov edx 0FFFh +
jmp loc_1001818  +
***
mov esi [ebp-6Ch] +
mov eax [ebp-0E0h] +
lea edi [esi+eax] +
lea ecx [ebp+edx-48h] +
mov al [ecx+edi] +
xor al [ecx] +
xor [ebp-59h] al +
mov [ecx+esi] al +
inc edx  +
cmp edx ebx +
jb loc_1001D20  +
sub [ebp-0C8h] ebx +
add [ebp-78h] ebx +
add esi ebx +
add [ebp-0DCh] ebx +
mov [ebp-6Ch] esi +
jmp loc_1001A41  +
***
xor eax eax +
retn   +
***
pushf   +
push ebp  +
mov ebp esp +
sub esp 4Ch +
mov [ebp+var_3C] eax +
mov [ebp+var_40] ecx +
mov [ebp+var_48] edx +
mov [ebp+var_38] ebx +
mov [ebp+var_4C] esi +
lea ebx [ebp+arg_0] +
mov [ebp+var_44] edi +
mov edi [ebx+4] +
sub ebx 4 +
push edi  +
mov [ebp+var_C] edi +
mov eax edi +
mov eax 0E8F3A2AAh +
mov edx ds:off_1004F44 +
mov eax 0FFFFFFFh +
mov esi [edi] +
and [ebp+var_20] 0 +
and [ebp+var_1C] 0 +
pop ecx  +
mov ecx [edi+4] +
and esi eax +
and ecx eax +
add esi offset __ImageBase +
mov eax offset __ImageBase +
sub eax edx +
mov [ebp+var_14] eax +
jnz loc_1001FFF  +
and [ebp+var_4] 0 +
test ecx ecx +
jbe loc_10021BD  +
mov edi 187C22BFh +
mov edx edi +
mov eax [ebp+var_4] +
movzx eax byte ptr [eax+esi] +
add eax edi +
add [ebp+var_20] eax +
add eax [ebp+var_1C] +
mul  edx +
add eax edx +
add [ebp+var_20] eax +
inc [ebp+var_4]  +
mov [ebp+var_1C] eax +
cmp [ebp+var_4] ecx +
jb loc_1001FD7  +
jmp loc_10021BA  +
mov edx esi +
sub edx offset __ImageBase +
mov edi edx +
lea eax [ecx+esi] +
and edi 0FFFFF000h +
add ecx edx +
mov [ebp+var_4] edi +
mov edi edx +
sub edi [ebp+var_4] +
mov [ebp+var_18] eax +
mov edx ecx +
and edx 0FFFFF000h +
sub ecx edx +
mov eax ds:dword_100003C +
mov [ebp+var_30] ecx +
mov ecx ds:dword_10000A0[eax] +
mov eax ds:dword_10000A4[eax] +
add ecx offset __ImageBase +
mov [ebp+var_34] edx +
add eax ecx +
mov [ebp+var_2C] eax +
jmp loc_1002057  +
mov edx [ecx] +
cmp edx [ebp+var_4] +
jnb loc_100205B  +
add ecx [ecx+4] +
cmp ecx eax +
jnz loc_100204D  +
and [ebp+var_24] 0 +
cmp ecx eax +
jz loc_100209C  +
mov edx [ebp+var_4] +
cmp [ecx] edx +
jnz loc_100209C  +
mov edx [ecx+4] +
sub edx 8 +
shr edx 1 +
mov [ebp+var_10] edx +
jz loc_100209C  +
lea edx [ecx+8] +
mov [ebp+var_4] edx +
mov edx [ebp+var_4] +
movzx edx word ptr [edx] +
and edx 0FFFh +
cmp edx edi +
jnb loc_100209C  +
inc [ebp+var_24]  +
mov edx [ebp+var_10] +
add [ebp+var_4] 2 +
cmp [ebp+var_24] edx +
jnz loc_100207D  +
mov edi 187C22BFh +
jmp loc_10020A6  +
mov eax [ebp+var_2C] +
cmp ecx eax +
jz loc_1002190  +
mov eax [ecx] +
cmp eax [ebp+var_34] +
ja loc_1002190  +
mov eax [ecx+4] +
lea edx [eax-8] +
shr edx 1 +
mov eax [ebp+var_24] +
cmp eax edx +
jnz loc_10020E5  +
add ecx [ecx+4] +
cmp ecx [ebp+var_2C] +
jz loc_1002190  +
mov eax [ebp+var_34] +
cmp [ecx] eax +
ja loc_1002190  +
and [ebp+var_24] 0 +
jmp loc_10020B9  +
mov edx [ebp+var_34] +
cmp [ecx] edx +
jnz loc_10020FF  +
movzx eax word ptr [ecx+eax*2+8] +
and eax 0FFFh +
cmp eax [ebp+var_30] +
jnb loc_1002190  +
mov eax [ebp+var_24] +
mov edx 0F000h +
inc [ebp+var_24]  +
test [ecx+eax*2+8] dx +
jz loc_10020A3  +
mov edx [ecx] +
movzx eax word ptr [ecx+eax*2+8] +
and [ebp+var_4] 0 +
and eax 0FFFh +
lea eax __ImageBase[eax+edx] +
mov [ebp+var_8] eax +
sub [ebp+var_8] esi +
mov [ebp+var_10] eax +
jz loc_100215C  +
mov edx edi +
mov eax [ebp+var_4] +
movzx eax byte ptr [eax+esi] +
add eax edi +
add [ebp+var_20] eax +
add eax [ebp+var_1C] +
mul  edx +
add eax edx +
add [ebp+var_20] eax +
inc [ebp+var_4]  +
mov [ebp+var_1C] eax +
mov eax [ebp+var_4] +
cmp eax [ebp+var_8] +
jb loc_1002133  +
mov eax [ebp+var_10] +
mov eax [eax] +
sub eax [ebp+var_14] +
xor esi esi +
mov [ebp+var_8] eax +
movzx eax byte ptr [ebp+esi+var_8] +
mov edx edi +
add eax edi +
add [ebp+var_20] eax +
add eax [ebp+var_1C] +
mul  edx +
add eax edx +
add [ebp+var_20] eax +
inc esi  +
cmp esi 4 +
mov [ebp+var_1C] eax +
jb loc_1002166  +
mov esi [ebp+var_10] +
add esi 4 +
jmp loc_10020A3  +
mov eax [ebp+var_18] +
xor ecx ecx +
sub eax esi +
mov [ebp+var_18] eax +
jz loc_10021BA  +
movzx eax byte ptr [ecx+esi] +
mov edx edi +
add eax edi +
add [ebp+var_20] eax +
add eax [ebp+var_1C] +
mul  edx +
add eax edx +
add [ebp+var_20] eax +
inc ecx  +
mov [ebp+var_1C] eax +
cmp ecx [ebp+var_18] +
jb loc_100219C  +
mov edi [ebp+var_C] +
add dword ptr [ebx+8] 10h +
mov edx [ebp+var_1C] +
mov ecx [ebp+var_20] +
mov eax [edi+0Ch] +
and eax 0FFFFFFFh +
sub ecx ds:__ImageBase[eax] +
sbb edx ds:dword_1000004[eax] +
mov eax ecx +
mov ecx edx +
or eax ecx +
jz loc_1002295  +
call sub_100CD3B  +
lea ecx [ebx+0Ch] +
mov edx 0FFFFF000h +
and eax edx +
and ecx 0FFFFFFFCh +
mov [ebp+var_18] eax +
lea eax [ecx+0FFFh] +
and eax edx +
mov [ebp+var_10] eax +
xor eax eax +
mov edx 0FFFFh +
mov dword ptr [ebx+8] offset sub_1023648 +
mov esi dword_10410FC +
imul esi esi +
add esi 269EC3h +
mov dword_10410FC esi +
shr esi 10h +
shl eax 10h +
shr edx 10h +
or eax esi +
test edx edx +
jnz loc_1002215  +
mov esi 0FFFFh +
div  esi +
mov eax [ebp+var_18] +
inc edx  +
mov [ebp+var_48] eax +
mov [ebp+var_40] edx +
mov [ebp+var_18] 0 +
jmp loc_100225E  +
mov eax [ebp+var_18] +
mov [ecx] eax +
add ecx 4 +
cmp ecx [ebp+var_10] +
jb loc_1002256  +
mov dword ptr [ebx+8] offset sub_1023648 +
mov edi [edi+8] +
mov eax [ebp+var_40] +
and edi 0FFFFFFFh +
mov [ebp+var_44] eax +
mov ecx eax +
shl ecx 10h +
add edi offset __ImageBase +
xor ecx [edi] +
xor ecx dword_10410BC +
xor ecx eax +
and [ebp+var_40] 0 +
mov [ebp+var_4C] ecx +
mov eax 0F2606D46h +
mov eax [ebp+var_3C] +
mov edx [ebp+var_48] +
mov ecx [ebp+var_40] +
mov edi [ebp+var_44] +
mov ebx [ebp+var_38] +
mov esi [ebp+var_4C] +
mov esp ebp +
pop ebp  +
popf   +
retn   +
***
and al 94h +
cli   +
xchg eax eax +
xor [edi] ebx +
jmp dword ptr [esp+ebp*4]  +
***
imul eax [esi-473066D4h] +
xchg eax ecx +
retn 1973h  +
***
push ss  +
les esp [ecx-6] +
add [ecx] ebx +
retn 0BF58h  +
***
pop ss  +
retf 0A5DDh  +
***
xor bl ah +
push esp  +
retn   +
***
pop ss  +
jmp loc_1004BC1  +
sahf   +
or eax 8C73FB8Eh +
or al ds:4A4F3145h[ebx] +
and eax esi +
adc eax 29D46BDBh +
outs   +
add al 0B6h +
dec ecx  +
push 0FFFFFFCDh  +
mov edx 1408ADC9h +
mov edi [esi+59h] +
or ds:6F5C3CEBh edx +
push 66h  +
dec eax  +
stos   +
sub al 0Dh +
adc esi ecx +
dec ecx  +
mov bh 0EDh +
push ss  +
pop edi  +
add al 75h +
mov esp [ebx-3Ah] +
jz loc_1004C3B  +
cmc   +
xchg eax ebx +
hlt   +
***
add al 0DFh +
retn 1E22h  +
***
adc esi esp +
popa   +
add al 0F7h +
das   +
jnp loc_1004D1B  +
adc [ebp+edi*2+3C081B96h] bl +
retf 0DE85h  +
***
rcl eax cl +
pop edi  +
bound eax [ebp+0Eh] +
sub dl cl +
jnz near ptr loc_1004D08+1  +
fdiv  qword ptr [ebx] +
das   +
xor eax edx +
das   +
int 6Dh  +
cld   +
mov eax 4D9CC101h +
mov bl 85h +
ror dword ptr [esi+ebp*8] 1 +
sbb dword ptr [edi+2Bh] 74h +
mov edi 0E190DCE4h +
daa   +
and [ebp-4AB2214Bh] bh +
sub [eax] ch +
xchg edx [esi+38h] +
sub [eax+7] ch +
push esi  +
add esi es:[eax-6Dh] +
jmp loc_1004CB3  +
***
dec eax  +
mov byte ptr [edx+11h] 38h +
dec ecx  +
cmp eax 0DA93DBEh +
push ss  +
adc byte ptr [edx-3Dh] 0D7h +
xchg al [ecx-3Ch] +
add al 7Dh +
jl loc_1004CA8  +
popf   +
cmp esp [edi+1E5BD9AFh] +
pop es  +
and ch cl +
xchg esi [edx+2DBFA75Dh] +
push ecx  +
jo near ptr loc_1004D26+2  +
adc al 91h +
cmp ecx [ebp+315AF9A5h] +
dec esp  +
rol eax 1 +
pop ss  +
jecxz loc_1004CD0  +
push ss  +
push ebx  +
jg loc_1004D65  +
and dh 23h +
ja loc_1004D63  +
adc [esi+10B82B67h] bl +
ffreep  st(7) +
mov al 0D2h +
xchg eax edx +
mov ch 12h +
sub esi 0E098BE0Bh +
out 0C2h al +
sar byte ptr [ebx+4Dh] 1 +
into   +
adc cl 1Ch +
mov gs [esi] +
bound edx [eax] +
retn   +
***
ja loc_1004CF5  +
nop   +
nop   +
nop   +
and [eax] eax +
add [eax] dl +
add al 68h +
xor eax 1 +
add [ecx] bl +
push esp  +
pop ds  +
mov bh 19h +
retf   +
***
add al 0A7h +
popa   +
mov [ecx-449DD1FBh] esp +
push ebx  +
shr dword ptr [edi+1AF5A37h] cl +
mov [edi+51C461FCh] cl +
dec eax  +
test [eax+4A909090h] edx +
retn 0C29Dh  +
***
adc [edi-77h] ecx +
retf 84C6h  +
***
pop ss  +
sub dl [eax+59407CA6h] +
scas   +
push edx  +
das   +
dec eax  +
or eax 0AEC17109h +
sub dl dl +
mov dword ptr [ecx] 0AB2DD6C7h +
or cl bl +
or eax 0F2F69669h +
fsub st st(3) +
dec edx  +
retf 1115h  +
***
pop ss  +
stos   +
retf   +
***
daa   +
rcr ch cl +
mov dword ptr [esi+2246FAAAh] 0AB1FEE72h +
dec edi  +
and edx [ebp-8] +
jz near ptr loc_10051E7+4  +
sub eax 6C3C21AEh +
aaa   +
adc cl bl +
retn 8AF7h  +
***
sbb eax 14BBF0FEh +
retf 6CC9h  +
***
cmp eax esi +
adc al 0 +
or esp [edx] +
sub eax 91E80BCEh +
push 29h  +
dec ebp  +
retf   +
***
aaa   +
inc ebp  +
mov ebx 0C2B75DF7h +
inc ecx  +
jmp dword ptr [ecx-6Dh]  +
***
or eax 0CF0B3AE8h +
cld   +
scas   +
fcom  dword ptr [esp+eax*4-64h] +
mov byte ptr [ecx] 45h +
jp loc_100559B  +
cli   +
retn 0A5D1h  +
***
adc [eax-38h] ebx +
arpl [ebx] cx +
push ebp  +
cli   +
add ebx [eax] +
sbb [ecx+5Eh] ebx +
add [ebp+29D1A90Ch] ch +
adc al 8Eh +
inc esi  +
test eax 83DD7F60h +
xchg eax esi +
std   +
sub bh ch +
and al 68h +
sub eax esi +
fistp  word ptr [edx-45h] +
jecxz near ptr loc_10055A4+5  +
out 2Fh eax +
pop ebp  +
mov cl 0EDh +
jge near ptr 562Ch  +
jbe near ptr loc_10055B6+1  +
clc   +
lds esp [ebp+esi*8+1AB6B609h] +
mov ds:688B5EA5h eax +
add bl ch +
push ebx  +
mov bh 6 +
xor [esi+esi] ah +
inc ebp  +
dec edx  +
xor al 0CCh +
test eax 2C7DAE44h +
mov word ptr [edx] fs +
clc   +
jl near ptr loc_1005648+1  +
xchg eax edi +
xchg eax ebp +
cmp esp esi +
cld   +
stc   +
add dword ptr ds:0A1B65172h 41414FC3h +
lahf   +
inc eax  +
scas   +
add al 0B3h +
push ebp  +
stos   +
xchg eax ecx +
pop ebx  +
pop esi  +
xchg eax ecx +
lods   +
out 5Bh eax +
call near ptr 886C3F21h  +
jl loc_10055AA  +
pushf   +
jno loc_1005641  +
jp near ptr loc_100566A+4  +
jz near ptr loc_1005636+3  +
outs   +
lea edi [edx-9] +
adc ebp [esi-6375E826h] +
out dx al +
cmps   +
add ah [ebp+5Bh] +
push 0A8284956h  +
jp loc_100566A  +
jz near ptr loc_100565D+3  +
in al 30h +
jecxz near ptr loc_1005684+1  +
in eax dx +
xor ds:8CC66989h dh +
das   +
cmp al 8Eh +
test ch bh +
or [ecx+48DB0E49h] ecx +
cmps   +
add [edx] ch +
add [esi+edx*2-74h] bh +
jb near ptr loc_10055D1+4  +
rcr byte ptr [ebx] 32h +
push eax  +
sub eax 41002F87h +
xchg eax esp +
fsubr  qword ptr [edi+4Fh] +
or eax 6904500Dh +
ror dword ptr [esi+3FA95117h] cl +
fcmovu st st(7) +
and dword ptr [ecx+487AFD12h] 0D9C3282Dh +
or [edx+eax*8] edi +
clc   +
and [ecx] al +
inc ebp  +
xchg eax esp +
inc ebp  +
clc   +
jecxz loc_1005641  +
sub [esi-32h] al +
stc   +
mov edi 1B90F241h +
std   +
jge locret_10056FB  +
loope loc_10056E5  +
push edi  +
and [edx-29h] ebp +
wait   +
sub [edx+579ECB30h] esp +
adc eax 0DC70B3Bh +
sub eax 3CF660BCh +
ror dword ptr [ecx-7688026h] 1 +
into   +
cdq   +
sbb al 5Fh +
sbb cl ch +
jo near ptr loc_10056A4+3  +
pop esi  +
and [ecx-35h] edx +
push es  +
sub al 17h +
jb loc_1005705  +
sub esi edi +
or [ecx-0Ah] esi +
mov dh 0D1h +
retn 0B0D6h  +
***
push ebp  +
adc ah [edi+edi*4] +
and [ecx] bh +
aam  14h +
xor bh bl +
xchg eax esp +
xchg eax esp +
ror byte ptr [edi+29h] cl +
push ecx  +
aaa   +
lea eax [esi] +
mov edi 0A4446B0Bh +
mov bl 2Dh +
jp loc_1005738  +
adc [esi] esp +
das   +
push 9B451A06h  +
add al 32h +
scas   +
add eax 281A325Fh +
retn 59E4h  +
***
leave   +
dec edi  +
popf   +
ja near ptr loc_1005700+4  +
add eax 818A820Bh +
inc ax  +
loopne loc_100572E  +
pop ebp  +
and eax 0FDE533ABh +
cmp al 2Fh +
and eax 3330DF6Eh +
xlat   +
xchg eax edi +
add cl ch +
loopne loc_10056FC  +
ja loc_100576B  +
mov ebp 2353563Bh +
fst  dword ptr [edi] +
and eax 62419D2h +
cdq   +
xor al 0AEh +
pop ebx  +
fsubr  qword ptr [esi+61h] +
mov edi edx +
sub esi ebp +
xor eax esp +
and eax ebx +
jg near ptr loc_1005725+1  +
mov esi 0E1B16375h +
adc byte ptr [ebx+337E08BEh] 69h +
xchg eax edi +
push ss  +
sub al 54h +
sal byte ptr [esi-17h] cl +
sbb eax 600BE92Fh +
outs   +
jp near ptr loc_1005763+1  +
lahf   +
loopne loc_1005711  +
sbb eax 0B7B21CDAh +
add [edx] dl +
sbb esp ecx +
cmp dword ptr [ecx-50h] 511CCE14h +
pop ss  +
add al 11h +
mov eax ds:0EAA7C587h +
xchg eax edi +
movs   +
add [esi+edx] ch +
out dx al +
iret   +
***
xor [esi+12h] ch +
sub ah dh +
sbb byte ptr [esi] 6Bh +
or [esi+2F0779FAh] dh +
retf   +
***
or ebp 5C0EF70Fh +
mov esp 58297394h +
or eax [ecx] +
dec edi  +
stos   +
sbb al 4Fh +
js loc_10057F6  +
add [edi+2Fh] dl +
mov ss word ptr [edi-4097025Bh] +
inc ebx  +
push cs  +
xchg eax ecx +
pusha   +
scas   +
and ch [ecx-3Dh] +
mov esi 11B606FEh +
int 3  +
lds ebx [ebx+ebp*8-28B928FFh] +
dec esi  +
fimul  dword ptr [ebx-18623F4h] +
push ds  +
mov esi 0B6AB91A4h +
test eax 0B1CCFBD5h +
lods   +
cmp ecx dword_1041530 +
jnz loc_100928D  +
retn   +
jmp sub_1013997  +
***
cmp bl bl +
add [eax-5FFF2488h] ah +
test ebx ebx +
add [eax-4FFF242Fh] ah +
fcompp st(3) st +
add [eax-5FFF2415h] dh +
das   +
fadd  qword ptr [eax] +
mov al 36h +
fadd  qword ptr [eax] +
mov al ds:0B000DC69h +
jo loc_10092D6  +
add [eax-5FFF2358h] ah +
int 3  +
fadd  qword ptr [eax] +
mov al ds:0B000DCE7h +
fadd  qword ptr [eax] +
***
mov ecx [ebp-10h] +
mov large fs:0 ecx +
pop ecx  +
pop edi  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
push ecx  +
retn   +
***
pushf   +
push ebp  +
mov ebp esp +
sub esp 24h +
mov [ebp-14h] eax +
mov [ebp-18h] ecx +
mov [ebp-20h] edx +
mov [ebp-10h] ebx +
mov [ebp-24h] esi +
lea esi [ebp+4] +
mov [ebp-1Ch] edi +
mov ecx [esi+8] +
mov edi offset Address +
mov eax [esi+4] +
sub esi 4 +
mov [ebp-0Ch] ecx +
movzx ecx byte ptr [eax] +
and ecx 0Fh +
mov [ebp-8] ecx +
lea ecx [eax+1] +
lea eax [ecx-1] +
mov [ebp-4] eax +
cmp eax edi +
jb loc_10098A1  +
mov edx ds:dword_101A35C +
mov ebx ds:dword_102543C +
imul edx ebx +
lea edx Address[edx] +
cmp eax edx +
jnb loc_10098A1  +
sub eax edi +
mov ebx ds:dword_102543C +
xor edx edx +
div  ebx +
mov edx ds:dword_102543C +
imul edx eax +
lea ebx Address[edx] +
mov eax [ebp-4] +
jmp loc_10098A3  +
xor ebx ebx +
test ebx ebx +
jnz loc_10098AE  +
and eax 0FFFF0000h +
mov ebx eax +
sub ecx ebx +
lea eax [ecx-40h] +
test eax eax +
jge loc_10098B9  +
xor eax eax +
push 40h  +
add eax ebx +
pop ecx  +
mov byte ptr [eax] 0 +
inc eax  +
dec ecx  +
jnz loc_10098BE  +
mov eax 0B1CB3DD6h +
cmp ebx edi +
jb loc_1009905  +
mov eax ds:dword_101A35C +
mov ecx ds:dword_102543C +
imul eax ecx +
lea eax Address[eax] +
cmp ebx eax +
jnb loc_1009905  +
mov eax ebx +
mov ecx ds:dword_102543C +
sub eax edi +
xor edx edx +
div  ecx +
mov ecx ds:dword_102543C +
imul ecx eax +
lea ecx Address[ecx] +
jmp loc_1009907  +
xor ecx ecx +
test ecx ecx +
jz loc_100992C  +
mov ecx ds:dword_102543C +
mov eax ebx +
sub eax edi +
xor edx edx +
div  ecx +
mov ecx ds:dword_101A35C +
mov dword_1042454[eax*4] 0E941h +
jmp loc_1009949  +
call ds:__imp_GetLastError  +
mov edi eax +
push 8000h  +
push 0  +
push ebx  +
call ds:VirtualFree  +
push edi  +
call ds:SetLastError  +
mov eax [ebp-8] +
mov eax ds:off_1005500[eax*4] +
mov [esi+8] eax +
mov eax [ebp-0Ch] +
mov [esi+0Ch] eax +
mov esi [ebp-24h] +
mov edi [ebp-1Ch] +
mov edx [ebp-20h] +
mov eax [ebp-14h] +
mov ebx [ebp-10h] +
mov ecx [ebp-18h] +
mov esp ebp +
pop ebp  +
popf   +
retn   +
***
pushf   +
push ebp  +
mov ebp esp +
sub esp 24h +
mov [ebp-10h] eax +
mov [ebp-24h] ecx +
mov [ebp-8] edx +
mov [ebp-1Ch] ebx +
lea ebx [ebp+4] +
sub ebx 4 +
mov [ebp-0Ch] esi +
mov [ebp-20h] edi +
mov [ebp-14h] ebx +
mov eax [ebx] +
mov [ebp-18h] eax +
mov eax [ebx+8] +
test byte ptr [eax+1Ch] 1 +
jz loc_10099E4  +
xor esi esi +
cmp [eax+18h] esi +
jz loc_10099BD  +
mov edi [eax] +
mov ecx [eax+14h] +
mov edx ds:dword_102F808[ecx*4] +
imul edx [ebp+edi*4-24h] +
jmp loc_10099BF  +
xor edx edx +
cmp [eax+0Ch] esi +
jz loc_10099CB  +
mov ecx [eax+10h] +
mov esi [ebp+ecx*4-24h] +
mov edi [eax+20h] +
mov ecx [eax+8] +
neg ecx  +
sbb ecx ecx +
and ecx offset __ImageBase +
add edi ecx +
add edi esi +
mov ecx [edi+edx] +
jmp loc_10099EB  +
mov ecx [eax+10h] +
mov ecx [ebp+ecx*4-24h] +
mov edx offset Address +
mov [ebp-4] ecx +
lea esi [eax+24h] +
lea edi [esi-1] +
cmp edi edx +
jb loc_1009A34  +
mov ecx ds:dword_102543C +
mov eax ds:dword_101A35C +
imul eax ecx +
lea eax Address[eax] +
cmp edi eax +
jnb loc_1009A34  +
mov ecx ds:dword_102543C +
mov eax edi +
sub eax edx +
xor edx edx +
div  ecx +
mov edx ds:dword_102543C +
imul edx eax +
lea eax Address[edx] +
jmp loc_1009A36  +
xor eax eax +
test eax eax +
jnz loc_1009A42  +
and edi 0FFFF0000h +
mov eax edi +
sub esi eax +
lea edx [esi-40h] +
test edx edx +
jge loc_1009A4D  +
xor edx edx +
push 40h  +
pop ecx  +
add edx eax +
mov byte ptr [edx] 0 +
inc edx  +
dec ecx  +
jnz loc_1009A52  +
mov ecx [ebp-4] +
push eax  +
lea eax [ebp-24h] +
push eax  +
push ebx  +
call sub_101C275  +
mov [ebx+8] eax +
mov esi [ebp-0Ch] +
mov ebx [ebp-1Ch] +
mov eax [ebp-10h] +
mov ecx [ebp-24h] +
mov edx [ebp-8] +
mov edi [ebp-20h] +
mov esp ebp +
pop ebp  +
popf   +
retn   +
***
pushf   +
push ebp  +
mov ebp esp +
sub esp 18h +
mov [ebp-8] eax +
mov [ebp-0Ch] ecx +
mov [ebp-14h] edx +
mov [ebp-4] ebx +
lea edx [ebp+4] +
mov [ebp-18h] esi +
mov [ebp-10h] edi +
push 4  +
pop ebx  +
sub edx ebx +
mov esi [edx+8] +
mov edi [esi+8] +
mov eax [edx+4] +
mov ecx edi +
and ecx 1Fh +
cmp ecx 7 +
jnz loc_1009AC3  +
and al 1 +
xor ecx ecx +
cmp al 1 +
setz cl  +
jmp loc_1009CC0  +
cmp ecx 0Ah +
jnz loc_1009B0C  +
test al 40h +
jnz loc_1009ADC  +
mov ecx eax +
shr ecx 2 +
xor ecx eax +
test cl 1 +
jz loc_1009CC8  +
add dword ptr [edx+8] 0Ch +
mov eax [esi] +
shr eax 1 +
and eax 0FFFFFFFh +
lea ecx [ebp-18h] +
push ecx  +
push edx  +
add eax offset __ImageBase +
call eax  +
mov ecx [ebp-0Ch] +
mov edx [ebp-14h] +
mov edi [ebp-10h] +
mov eax [ebp-8] +
mov esi [ebp-18h] +
mov ebx [ebp-4] +
mov esp ebp +
pop ebp  +
popf   +
retn   +
***
cmp ecx 0Fh +
jnz loc_1009B19  +
and al 40h +
xor ecx ecx +
cmp al 40h +
jmp loc_1009ABB  +
***
cmp ecx ebx +
jz loc_1009B11  +
cmp ecx 8 +
jnz loc_1009B33  +
test al al +
js loc_1009ADC  +
test eax 800h +
jnz loc_1009CC8  +
jmp loc_1009ADC  +
***
test ecx ecx +
jnz loc_1009B46  +
shr eax 6 +
not eax  +
and eax 1 +
mov ecx eax +
jmp loc_1009CC0  +
cmp ecx 14h +
jnz loc_1009B5D  +
test al 1 +
jnz loc_1009CC8  +
test eax 800h +
jmp loc_1009CC2  +
cmp ecx 0Dh +
jnz loc_1009B7E  +
test al 40h +
jnz loc_1009ADC  +
mov ecx eax +
shr ecx 4 +
xor ecx eax +
test cl cl +
jns loc_1009CC8  +
jmp loc_1009ADC  +
***
cmp ecx 0Bh +
jnz loc_1009B93  +
mov ecx 800h +
and eax ecx +
sub eax ecx +
neg eax  +
sbb eax eax +
inc eax  +
jmp loc_1009B3F  +
***
cmp ecx 0Eh +
jnz loc_1009B9D  +
shr eax 2 +
jmp loc_1009B3A  +
***
cmp ecx 15h +
jnz loc_1009BAD  +
and al bl +
xor ecx ecx +
cmp al bl +
jmp loc_1009ABB  +
***
cmp ecx 9 +
jnz loc_1009BB7  +
shr eax 0Ah +
jmp loc_1009B3A  +
***
cmp ecx 5 +
jnz loc_1009BD3  +
test al bl +
jz loc_1009CC8  +
mov ecx eax +
shr ecx 5 +
xor ecx eax +
test cl 40h +
jmp loc_1009CC2  +
cmp ecx 19h +
jnz loc_1009BE7  +
test al 1 +
jnz loc_1009CC8  +
test al 40h +
jmp loc_1009CC2  +
cmp ecx 11h +
jz loc_1009B37  +
cmp ecx 17h +
jnz loc_1009C09  +
mov ecx eax +
shr ecx 4 +
xor ecx eax +
shr ecx 7 +
not ecx  +
and ecx 1 +
jmp loc_1009CC0  +
cmp ecx 6 +
jnz loc_1009C19  +
and al 80h +
xor ecx ecx +
cmp al 80h +
jmp loc_1009ABB  +
***
cmp ecx 18h +
jnz loc_1009C2D  +
test al 40h +
jz loc_1009ADC  +
test al bl +
jmp loc_1009AD6  +
***
cmp ecx 3 +
jnz loc_1009C41  +
test al 1 +
jnz loc_1009ADC  +
test al 40h +
jmp loc_1009AD6  +
***
cmp ecx 13h +
jnz loc_1009C52  +
mov ecx eax +
shr ecx 4 +
xor ecx eax +
shr ecx 7 +
jmp loc_1009C01  +
***
cmp ecx 12h +
jnz loc_1009C5F  +
shr eax 0Bh +
jmp loc_1009B3A  +
***
cmp ecx 0Ch +
jnz loc_1009C6C  +
shr eax 4 +
jmp loc_1009B3C  +
***
cmp ecx 16h +
jnz loc_1009C7B  +
xor ecx ecx +
cmp [ebp-0Ch] ecx +
jmp loc_1009ABB  +
***
cmp ecx 2 +
jz loc_1009B3A  +
cmp ecx 10h +
jnz loc_1009C91  +
shr eax 7 +
jmp loc_1009B3A  +
***
cmp ecx 1Ah +
jnz loc_1009CA4  +
test al 1 +
jnz loc_1009CC8  +
test al bl +
jnz loc_1009ADC  +
jmp loc_1009CC8  +
cmp ecx 1 +
jnz loc_1009CBE  +
test al 40h +
jnz loc_1009CC8  +
mov ecx eax +
shr ecx 4 +
xor ecx eax +
test cl cl +
jns loc_1009ADC  +
jmp loc_1009CC8  +
xor ecx ecx +
test ecx ecx +
jz loc_1009ADC  +
shr edi 5 +
and edi 3Fh +
add [edx+8] edi +
mov eax [esi+4] +
jmp loc_1009AE4  +
***
pushf   +
push ebp  +
mov ebp esp +
sub esp 18h +
mov [ebp-8] eax +
mov [ebp-0Ch] ecx +
mov [ebp-14h] edx +
lea edx [ebp+4] +
mov [ebp-4] ebx +
mov [ebp-18h] esi +
mov [ebp-10h] edi +
mov esi [edx+4] +
mov edi [esi+4] +
mov ecx edi +
mov eax [edx] +
sub edx 4 +
and ecx 1Fh +
cmp ecx 0Bh +
jnz loc_1009D19  +
shr eax 2 +
not eax  +
and eax 1 +
mov ecx eax +
jmp loc_1009F17  +
cmp ecx 19h +
jnz loc_1009D23  +
shr eax 4 +
jmp loc_1009D0F  +
***
cmp ecx 9 +
jz loc_1009D0D  +
cmp ecx 14h +
jnz loc_1009D71  +
test al 40h +
jnz loc_1009D40  +
mov ecx eax +
shr ecx 4 +
xor ecx eax +
test cl cl +
jns loc_1009F1F  +
add dword ptr [edx+8] 0Ch +
mov eax [esi] +
shr eax 2 +
and eax 0FFFFFFFh +
add eax offset __ImageBase +
lea ecx [ebp-18h] +
push ecx  +
push edx  +
call eax  +
mov edi [ebp-10h] +
mov edx [ebp-14h] +
mov ebx [ebp-4] +
mov ecx [ebp-0Ch] +
mov esi [ebp-18h] +
mov eax [ebp-8] +
mov esp ebp +
pop ebp  +
popf   +
retn   +
***
test ecx ecx +
jnz loc_1009D7A  +
shr eax 0Ah +
jmp loc_1009D0D  +
***
cmp ecx 12h +
jnz loc_1009D90  +
test al al +
js loc_1009D40  +
test eax 800h +
jnz loc_1009F1F  +
jmp loc_1009D40  +
***
cmp ecx 1Ah +
jnz loc_1009DA3  +
test al 40h +
jz loc_1009D40  +
test al 4 +
jz loc_1009F1F  +
jmp loc_1009D40  +
***
cmp ecx 0Fh +
jnz loc_1009DB0  +
test al 1 +
jnz loc_1009D40  +
test al 40h +
jmp loc_1009D9B  +
***
cmp ecx 11h +
jnz loc_1009DCC  +
test al 4 +
jz loc_1009F1F  +
mov ecx eax +
shr ecx 5 +
xor ecx eax +
test cl 40h +
jmp loc_1009F19  +
cmp ecx 15h +
jnz loc_1009DDE  +
xor ecx ecx +
cmp [ebp-0Ch] ecx +
setz cl  +
jmp loc_1009F17  +
cmp ecx 18h +
jnz loc_1009DEB  +
shr eax 0Bh +
jmp loc_1009D0D  +
***
cmp ecx 3 +
jnz loc_1009E02  +
mov ecx eax +
shr ecx 4 +
xor ecx eax +
shr ecx 7 +
and ecx 1 +
jmp loc_1009F17  +
cmp ecx 6 +
jnz loc_1009E1C  +
test al 1 +
jnz loc_1009F1F  +
test al 4 +
jnz loc_1009D40  +
jmp loc_1009F1F  +
cmp ecx 0Ch +
jnz loc_1009E38  +
test al 40h +
jnz loc_1009D40  +
mov ecx eax +
shr ecx 2 +
xor ecx eax +
test cl 1 +
jmp loc_1009D9B  +
***
cmp ecx 5 +
jnz loc_1009E45  +
and al 40h +
xor ecx ecx +
cmp al 40h +
jmp loc_1009DD6  +
***
cmp ecx 16h +
jnz loc_1009E59  +
test al 1 +
jnz loc_1009F1F  +
test al 40h +
jmp loc_1009F19  +
cmp ecx 2 +
jnz loc_1009E7A  +
test al 40h +
jnz loc_1009F1F  +
mov ecx eax +
shr ecx 4 +
xor ecx eax +
test cl cl +
jns loc_1009D40  +
jmp loc_1009F1F  +
cmp ecx 7 +
jnz loc_1009E8D  +
xor ebx ebx +
inc ebx  +
and al bl +
xor ecx ecx +
cmp al bl +
jmp loc_1009DD6  +
***
cmp ecx 13h +
jnz loc_1009EA1  +
test al 1 +
jnz loc_1009F1F  +
test eax 800h +
jmp loc_1009F19  +
cmp ecx 0Dh +
jz loc_1009E3D  +
xor ebx ebx +
inc ebx  +
cmp ecx ebx +
jnz loc_1009EBD  +
mov ecx eax +
shr ecx 4 +
xor ecx eax +
shr ecx 7 +
not ecx  +
and ecx ebx +
jmp loc_1009F17  +
cmp ecx 8 +
jnz loc_1009ECE  +
shr eax 6 +
not eax  +
and eax ebx +
jmp loc_1009D12  +
***
cmp ecx 0Ah +
jnz loc_1009EE6  +
mov ecx 800h +
and eax ecx +
sub eax ecx +
neg eax  +
sbb eax eax +
inc eax  +
jmp loc_1009D12  +
***
cmp ecx 4 +
jnz loc_1009EF6  +
and al cl +
xor ecx ecx +
cmp al 4 +
jmp loc_1009DD6  +
***
cmp ecx 17h +
jnz loc_1009F06  +
and al 80h +
xor ecx ecx +
cmp al 80h +
jmp loc_1009DD6  +
***
cmp ecx 10h +
jz loc_1009EC2  +
cmp ecx 0Eh +
jnz loc_1009F15  +
shr eax 7 +
jmp loc_1009EC5  +
***
xor ecx ecx +
test ecx ecx +
jz loc_1009D40  +
shr edi 5 +
and edi 3Fh +
add [edx+8] edi +
mov eax [esi+8] +
jmp loc_1009D49  +
***
pushf   +
push ebp  +
mov ebp esp +
sub esp 24h +
mov [ebp-14h] eax +
mov [ebp-18h] ecx +
mov [ebp-20h] edx +
mov [ebp-10h] ebx +
lea ebx [ebp+4] +
mov [ebp-24h] esi +
mov [ebp-1Ch] edi +
mov esi offset Address +
mov eax [ebx+4] +
sub ebx 4 +
mov ecx [eax] +
shr ecx 2 +
and ecx 0FFFFFFFh +
add ecx offset __ImageBase +
mov [ebp-0Ch] ecx +
lea ecx [eax+4] +
lea edi [ecx-1] +
cmp edi esi +
mov [ebp-8] ebx +
jb loc_1009FB5  +
mov edx ds:dword_102543C +
mov eax ds:dword_101A35C +
imul eax edx +
lea eax Address[eax] +
cmp edi eax +
jnb loc_1009FB5  +
mov ebx ds:dword_102543C +
mov eax edi +
sub eax esi +
xor edx edx +
div  ebx +
mov edx ds:dword_102543C +
imul edx eax +
lea eax Address[edx] +
mov ebx [ebp-8] +
mov [ebp-4] eax +
jmp loc_1009FB9  +
and dword ptr [ebp-4] 0 +
cmp dword ptr [ebp-4] 0 +
jnz loc_1009FC8  +
and edi 0FFFF0000h +
mov [ebp-4] edi +
mov edx [ebp-4] +
sub ecx edx +
lea eax [ecx-40h] +
test eax eax +
jge loc_1009FD6  +
xor eax eax +
push 40h  +
add eax edx +
pop ecx  +
mov byte ptr [eax] 0 +
inc eax  +
dec ecx  +
jnz loc_1009FDB  +
mov eax 7440B5D7h +
mov edi [ebp-4] +
cmp edi esi +
jb loc_100A025  +
mov ecx ds:dword_102543C +
mov eax ds:dword_101A35C +
imul eax ecx +
lea eax Address[eax] +
cmp edi eax +
jnb loc_100A025  +
mov ecx ds:dword_102543C +
mov eax edi +
sub eax esi +
xor edx edx +
div  ecx +
mov ecx ds:dword_102543C +
imul ecx eax +
lea ecx Address[ecx] +
jmp loc_100A027  +
xor ecx ecx +
test ecx ecx +
jz loc_100A04C  +
mov eax edi +
sub eax esi +
mov ecx ds:dword_102543C +
xor edx edx +
div  ecx +
mov ecx ds:dword_101A35C +
mov dword_1042454[eax*4] 0E941h +
jmp loc_100A069  +
call ds:__imp_GetLastError  +
push 8000h  +
push 0  +
push edi  +
mov esi eax +
call ds:VirtualFree  +
push esi  +
call ds:SetLastError  +
mov eax [ebp-0Ch] +
mov [ebx+8] eax +
mov esi [ebp-24h] +
mov edi [ebp-1Ch] +
mov edx [ebp-20h] +
mov ebx [ebp-10h] +
mov eax [ebp-14h] +
mov ecx [ebp-18h] +
mov esp ebp +
pop ebp  +
popf   +
retn   +
***
push edi  +
pushf   +
push ebp  +
mov ebp esp +
sub esp 158h +
mov [ebp-148h] eax +
mov [ebp-14Ch] ecx +
lea eax [ebp+4] +
mov [ebp-154h] edx +
mov [ebp-144h] ebx +
mov ecx 0FFFFFFFh +
sub eax 4 +
mov [ebp-158h] esi +
mov [ebp-150h] edi +
mov edi offset __ImageBase +
mov [ebp-0ECh] eax +
add eax 0Ch +
mov [ebp-0E8h] eax +
mov eax [eax] +
mov edx [eax] +
shr edx 1 +
mov ebx [eax+8] +
and edx ecx +
mov esi [eax+4] +
add eax 0Ch +
and ebx ecx +
mov [ebp-0FCh] edx +
lea edx [eax-1] +
add ebx edi +
and esi ecx +
cmp edx offset Address +
mov [ebp-0C8h] ebx +
mov [ebp-0C0h] esi +
mov [ebp-6Ch] eax +
mov [ebp-74h] edx +
jb loc_100A152  +
mov edx ds:dword_102543C +
mov ecx ds:dword_101A35C +
imul ecx edx +
mov edx [ebp-74h] +
lea ecx Address[ecx] +
cmp edx ecx +
jnb loc_100A152  +
mov eax edx +
sub eax offset Address +
xor edx edx +
mov ecx ds:dword_102543C +
div  ecx +
mov edx [ebp-74h] +
mov ecx ds:dword_102543C +
imul ecx eax +
lea ecx Address[ecx] +
mov eax [ebp-6Ch] +
jmp loc_100A154  +
xor ecx ecx +
test ecx ecx +
jnz loc_100A160  +
and edx 0FFFF0000h +
mov ecx edx +
sub eax ecx +
add eax 0FFFFFFC0h +
jns loc_100A169  +
xor eax eax +
add eax ecx +
push 40h  +
pop edx  +
mov byte ptr [eax] 0 +
inc eax  +
dec edx  +
jnz loc_100A16E  +
lea eax [esi+ebx] +
mov [ebp-6Ch] eax +
mov eax ds:dword_102543C +
mov [ebp-78h] ebx +
sub eax esi +
sub [ebp-78h] edi +
lea ebx [eax+1] +
mov [ebp-64h] ebx +
xor eax eax +
test ebx ebx +
jz loc_100A1BE  +
mov edx dword_10410FC +
shr dword ptr [ebp-64h] 10h +
imul edx edx +
add edx 269EC3h +
mov dword_10410FC edx +
shr edx 10h +
shl eax 10h +
or eax edx +
cmp dword ptr [ebp-64h] 0 +
jnz loc_100A194  +
xor edx edx +
div  ebx +
lea ebx [edx+ecx] +
push esi  +
mov eax ebx +
push dword ptr [ebp-78h]  +
mov [ebp-0C4h] ebx +
mov eax 7261498Eh +
mov eax [ebp-6Ch] +
pop ecx  +
pop ecx  +
test esi esi +
mov ecx [eax] +
mov eax [eax+4] +
mov [ebp-0F0h] eax +
mov eax [ebp-0C8h] +
mov [ebp-74h] ebx +
mov ebx 0FFFFF000h +
mov [ebp-0F4h] ecx +
mov byte ptr [ebp-55h] 0 +
mov [ebp-0BCh] esi +
mov [ebp-0CCh] eax +
jz loc_100A89A  +
lea esi [ebp-0F4h] +
mov eax 994152h +
mov ecx 0FFFFFFFh +
mov esi [ebp-0F4h] +
mov eax [ebp-0F0h] +
and dword ptr [ebp-60h] 0 +
and dword ptr [ebp-5Ch] 0 +
and eax ecx +
and esi ecx +
add esi edi +
mov ecx ds:off_1004F44 +
mov [ebp-64h] eax +
mov eax edi +
sub eax ecx +
mov [ebp-100h] eax +
jnz loc_100A29A  +
xor edi edi +
cmp [ebp-64h] edi +
jbe loc_100A4B6  +
mov ecx 637CE67Ch +
movzx edx byte ptr [edi+esi] +
add edx ecx +
add [ebp-60h] edx +
add edx [ebp-5Ch] +
mov eax edx +
imul eax eax +
rol eax 0Ch +
ror edx 0Ch +
xor eax edx +
mov edx ecx +
mul  edx +
add eax edx +
mov edx ecx +
mul  edx +
add eax edx +
add [ebp-60h] eax +
mov [ebp-5Ch] eax +
inc edi  +
cmp edi [ebp-64h] +
jb loc_100A261  +
jmp loc_100A4B6  +
mov ecx esi +
mov eax [ebp-64h] +
add eax esi +
mov edx ds:dword_100003C +
lea edx dword_10000A0[edx] +
mov [ebp-70h] eax +
mov eax [edx] +
add eax edi +
sub ecx edi +
mov edi ecx +
mov edx [edx+4] +
and edi ebx +
mov [ebp-68h] edi +
mov edi ecx +
sub edi [ebp-68h] +
add edx eax +
mov [ebp-0D0h] edi +
mov edi [ebp-64h] +
add ecx edi +
mov edi ecx +
and edi ebx +
sub ecx edi +
mov [ebp-0E4h] edi +
mov ebx eax +
mov [ebp-0E0h] ecx +
cmp eax edx +
mov [ebp-0DCh] edx +
jz loc_100A302  +
mov eax [ebp-68h] +
cmp [ebx] eax +
jnb loc_100A302  +
add ebx [ebx+4] +
cmp ebx [ebp-0DCh] +
jnz loc_100A2F0  +
mov edx 0FFFh +
and dword ptr [ebp-0D4h] 0 +
cmp ebx [ebp-0DCh] +
jz loc_100A347  +
mov eax [ebp-68h] +
cmp [ebx] eax +
jnz loc_100A347  +
mov ecx [ebx+4] +
sub ecx 8 +
shr ecx 1 +
jz loc_100A347  +
lea eax [ebx+8] +
movzx edi word ptr [eax] +
and edi edx +
cmp edi [ebp-0D0h] +
jnb loc_100A347  +
inc dword ptr [ebp-0D4h]  +
inc eax  +
inc eax  +
cmp [ebp-0D4h] ecx +
jnz loc_100A32A  +
mov ecx 637CE67Ch +
cmp ebx [ebp-0DCh] +
jz loc_100A47A  +
mov eax [ebx] +
cmp eax [ebp-0E4h] +
ja loc_100A47A  +
mov edi [ebp-0D4h] +
mov eax [ebx+4] +
add eax 0FFFFFFF8h +
shr eax 1 +
cmp edi eax +
jnz loc_100A399  +
add ebx [ebx+4] +
cmp ebx [ebp-0DCh] +
jz loc_100A47A  +
mov eax [ebp-0E4h] +
cmp [ebx] eax +
ja loc_100A47A  +
xor edi edi +
jmp loc_100A36C  +
***
mov eax [ebp-0E4h] +
cmp [ebx] eax +
jnz loc_100A3B6  +
movzx eax word ptr [ebx+edi*2+8] +
and eax edx +
cmp eax [ebp-0E0h] +
jnb loc_100A47A  +
mov eax edi +
inc edi  +
mov [ebp-0D4h] edi +
mov edi 0F000h +
test [ebx+eax*2+8] di +
jz loc_100A34C  +
movzx eax word ptr [ebx+eax*2+8] +
and eax edx +
xor edi edi +
mov edx [ebx] +
lea eax __ImageBase[eax+edx] +
mov [ebp-68h] eax +
sub [ebp-68h] esi +
mov [ebp-0D0h] eax +
jz loc_100A41F  +
movzx edx byte ptr [edi+esi] +
add edx ecx +
add [ebp-60h] edx +
add edx [ebp-5Ch] +
mov eax edx +
imul eax eax +
rol eax 0Ch +
ror edx 0Ch +
xor eax edx +
mov edx ecx +
mul  edx +
add eax edx +
mov edx ecx +
mul  edx +
add eax edx +
add [ebp-60h] eax +
inc edi  +
mov [ebp-5Ch] eax +
cmp edi [ebp-68h] +
jb loc_100A3EB  +
mov esi [ebp-0D0h] +
mov eax [esi] +
sub eax [ebp-100h] +
xor edi edi +
mov [ebp-0F8h] eax +
movzx edx byte ptr [ebp+edi-0F8h] +
add edx ecx +
add [ebp-60h] edx +
add edx [ebp-5Ch] +
mov eax edx +
imul eax eax +
rol eax 0Ch +
ror edx 0Ch +
xor eax edx +
mov edx ecx +
mul  edx +
add eax edx +
mov edx ecx +
mul  edx +
add eax edx +
add [ebp-60h] eax +
inc edi  +
mov [ebp-5Ch] eax +
cmp edi 4 +
jb loc_100A435  +
add esi 4 +
mov edx 0FFFh +
jmp loc_100A34C  +
***
xor edi edi +
mov ebx [ebp-70h] +
sub ebx esi +
jz loc_100A4B6  +
movzx edx byte ptr [edi+esi] +
add edx ecx +
add [ebp-60h] edx +
add edx [ebp-5Ch] +
mov eax edx +
imul eax eax +
rol eax 0Ch +
ror edx 0Ch +
xor eax edx +
mov edx ecx +
mul  edx +
add eax edx +
mov edx ecx +
mul  edx +
add eax edx +
add [ebp-60h] eax +
inc edi  +
cmp edi ebx +
mov [ebp-5Ch] eax +
jb loc_100A483  +
xor edi edi +
xor eax eax +
mov ecx eax +
and ecx 7 +
mov cl [ebp+ecx-60h] +
mov [ebp+eax-54h] cl +
inc eax  +
cmp eax 10h +
jb loc_100A4BA  +
mov eax 7FE267BFh +
mov eax [ebp-54h] +
mov ecx [ebp-50h] +
mov edx [ebp-4Ch] +
mov esi [ebp-48h] +
mov [ebp-13Ch] eax +
mov [ebp-114h] eax +
mov eax ds:dword_101BE7C +
mov [ebp-140h] eax +
mov eax ds:dword_101BE80 +
mov [ebp-12Ch] eax +
mov eax ds:dword_101BE84 +
mov [ebp-118h] eax +
mov eax ds:dword_101BE88 +
mov [ebp-104h] eax +
mov eax [ebp-0C4h] +
mov [ebp-138h] ecx +
mov [ebp-110h] ecx +
lea ecx [ebp-44h] +
sub eax ecx +
mov [ebp-64h] eax +
mov eax [ebp-0C8h] +
sub eax [ebp-0C4h] +
mov [ebp-134h] edx +
mov [ebp-130h] esi +
mov [ebp-10Ch] edx +
mov [ebp-108h] esi +
mov [ebp-128h] edi +
mov [ebp-124h] edi +
mov [ebp-120h] edi +
mov [ebp-11Ch] edi +
mov [ebp-70h] eax +
lea edi [ebp-0B8h] +
push 10h  +
lea esi [ebp-140h] +
pop ecx  +
movs   +
mov ecx [ebp-98h] +
mov eax [ebp-0A8h] +
mov esi [ebp-0B8h] +
mov edx [ebp-88h] +
mov dword ptr [ebp-68h] 2 +
mov ebx [ebp-0B4h] +
lea edi [esi+edx] +
rol edi 7 +
xor eax edi +
lea edi [esi+eax] +
rol edi 9 +
xor ecx edi +
lea edi [ecx+eax] +
rol edi 0Dh +
xor edx edi +
lea edi [ecx+edx] +
ror edi 0Eh +
xor esi edi +
mov edi [ebp-0A4h] +
add ebx edi +
rol ebx 7 +
xor [ebp-94h] ebx +
mov ebx [ebp-94h] +
add edi ebx +
rol edi 9 +
xor [ebp-84h] edi +
mov edi ebx +
mov ebx [ebp-84h] +
add ebx edi +
rol ebx 0Dh +
mov edi [ebp-84h] +
xor [ebp-0B4h] ebx +
mov ebx [ebp-0B4h] +
add edi ebx +
ror edi 0Eh +
mov ebx [ebp-90h] +
xor [ebp-0A4h] edi +
mov edi [ebp-0A0h] +
add edi ebx +
rol edi 7 +
xor [ebp-80h] edi +
mov edi ebx +
mov ebx [ebp-80h] +
add edi ebx +
rol edi 9 +
xor [ebp-0B0h] edi +
mov edi ebx +
mov ebx [ebp-0B0h] +
add ebx edi +
mov edi [ebp-0B0h] +
rol ebx 0Dh +
xor [ebp-0A0h] ebx +
mov ebx [ebp-0A0h] +
add edi ebx +
mov ebx [ebp-7Ch] +
ror edi 0Eh +
xor [ebp-90h] edi +
mov edi [ebp-8Ch] +
add edi ebx +
rol edi 7 +
xor [ebp-0ACh] edi +
mov edi ebx +
mov ebx [ebp-0ACh] +
add edi ebx +
rol edi 9 +
xor [ebp-9Ch] edi +
mov edi ebx +
mov ebx [ebp-9Ch] +
add ebx edi +
rol ebx 0Dh +
mov edi [ebp-9Ch] +
xor [ebp-8Ch] ebx +
mov ebx [ebp-8Ch] +
add edi ebx +
ror edi 0Eh +
xor [ebp-7Ch] edi +
mov edi [ebp-0ACh] +
add edi esi +
rol edi 7 +
xor [ebp-0B4h] edi +
mov edi [ebp-0B4h] +
add edi esi +
rol edi 9 +
xor [ebp-0B0h] edi +
mov edi [ebp-0B4h] +
mov ebx [ebp-0B0h] +
add ebx edi +
rol ebx 0Dh +
mov edi [ebp-0B0h] +
xor [ebp-0ACh] ebx +
mov ebx [ebp-0ACh] +
add ebx edi +
mov edi [ebp-0A4h] +
add edi eax +
ror ebx 0Eh +
xor esi ebx +
rol edi 7 +
xor [ebp-0A0h] edi +
mov edi [ebp-0A4h] +
mov ebx [ebp-0A0h] +
add ebx edi +
rol ebx 9 +
mov edi [ebp-0A0h] +
xor [ebp-9Ch] ebx +
mov ebx [ebp-9Ch] +
add ebx edi +
mov edi [ebp-9Ch] +
rol ebx 0Dh +
xor eax ebx +
add edi eax +
ror edi 0Eh +
mov ebx [ebp-94h] +
xor [ebp-0A4h] edi +
mov edi [ebp-90h] +
add edi ebx +
rol edi 7 +
xor [ebp-8Ch] edi +
mov ebx [ebp-8Ch] +
mov edi [ebp-90h] +
add ebx edi +
rol ebx 9 +
mov edi [ebp-8Ch] +
xor ecx ebx +
add edi ecx +
rol edi 0Dh +
mov ebx [ebp-80h] +
xor [ebp-94h] edi +
mov edi [ebp-94h] +
add edi ecx +
ror edi 0Eh +
xor [ebp-90h] edi +
mov edi [ebp-7Ch] +
add edi ebx +
rol edi 7 +
xor edx edi +
mov edi [ebp-7Ch] +
add edi edx +
rol edi 9 +
xor [ebp-84h] edi +
mov edi [ebp-84h] +
add edi edx +
rol edi 0Dh +
xor [ebp-80h] edi +
mov ebx [ebp-80h] +
mov edi [ebp-84h] +
add ebx edi +
ror ebx 0Eh +
xor [ebp-7Ch] ebx +
dec dword ptr [ebp-68h]  +
jnz loc_100A59F  +
mov [ebp-88h] edx +
xor edx edx +
push 40h  +
mov [ebp-0A8h] eax +
mov [ebp-98h] ecx +
xor eax eax +
mov [ebp-0B8h] esi +
pop ebx  +
mov ecx [ebp+eax-140h] +
add [ebp+eax-0B8h] ecx +
add eax 4 +
cmp eax ebx +
jl loc_100A7F3  +
lea esi [ebp-0B8h] +
inc dword ptr [ebp-120h]  +
lea edi [ebp-44h] +
push 10h  +
pop ecx  +
movs   +
cmp [ebp-0BCh] ebx +
jbe loc_100A85A  +
mov eax [ebp-70h] +
mov esi [ebp-64h] +
lea edi [esi+eax] +
lea ecx [ebp+edx-44h] +
mov al [ecx+edi] +
xor al [ecx] +
xor [ebp-55h] al +
inc edx  +
mov [ecx+esi] al +
cmp edx ebx +
jb loc_100A82D  +
sub [ebp-0BCh] ebx +
add [ebp-74h] ebx +
add esi ebx +
add [ebp-0CCh] ebx +
mov [ebp-64h] esi +
jmp loc_100A56F  +
***
cmp [ebp-0BCh] edx +
jbe loc_100A88A  +
lea eax [ebp-44h] +
mov esi [ebp-0CCh] +
sub esi eax +
mov edi [ebp-74h] +
sub edi eax +
lea ecx [ebp+edx-44h] +
mov al [ecx+esi] +
xor al [ecx] +
xor [ebp-55h] al +
mov [ecx+edi] al +
inc edx  +
cmp edx [ebp-0BCh] +
jb loc_100A872  +
mov edi offset __ImageBase +
mov esi [ebp-0C0h] +
mov ebx 0FFFFF000h +
movzx eax byte ptr [ebp-55h] +
mov ecx [ebp-6Ch] +
movzx ecx byte ptr [ecx+8] +
sub eax ecx +
jz loc_100A939  +
call sub_100CD3B  +
mov edx 0FFFFh +
mov ecx [ebp-0E8h] +
mov edi eax +
and ecx 0FFFFFFFCh +
lea esi [ecx+0FFFh] +
and edi ebx +
and esi ebx +
mov eax [ebp-0ECh] +
mov dword ptr [eax+8] offset sub_1023648 +
xor eax eax +
mov ebx dword_10410FC +
imul ebx ebx +
add ebx 269EC3h +
mov dword_10410FC ebx +
shr ebx 10h +
shl eax 10h +
shr edx 10h +
or eax ebx +
test edx edx +
jnz loc_100A8DB  +
mov ebx 0FFFFh +
div  ebx +
inc edx  +
mov eax ecx +
mov [ebp-154h] edi +
cmp ecx esi +
mov [ebp-14Ch] edx +
mov dword ptr [ebp-70h] 0 +
jnb loc_100A92F  +
mov ecx [ebp-70h] +
mov [eax] ecx +
add eax 4 +
cmp eax esi +
jb loc_100A923  +
mov eax offset sub_1023648 +
jmp loc_100AA23  +
mov eax [ebp-0C8h] +
sub eax [ebp-0C4h] +
mov ecx ds:off_1004F44 +
sub edi ecx +
mov [ebp-0C0h] eax +
mov [ebp-6Ch] edi +
jnz loc_100A960  +
test eax eax +
jz loc_100AA0B  +
mov eax [ebp-78h] +
mov ecx ds:dword_1009298 +
mov edi [ebp-0C4h] +
sub edi [ebp-0C8h] +
add eax esi +
xor esi esi +
dec ecx  +
mov [ebp-70h] eax +
js loc_100A9A7  +
lea eax [ecx+esi] +
cdq   +
sub eax edx +
sar eax 1 +
mov edx ds:dword_100929C[eax*4] +
and edx 0FFFFFFFh +
cmp [ebp-78h] edx +
jnb loc_100A99E  +
lea ecx [eax-1] +
jmp loc_100A9A3  +
jbe loc_100A9AB  +
lea esi [eax+1] +
cmp ecx esi +
jge loc_100A97F  +
mov ebx esi +
jmp loc_100AA03  +
mov ebx eax +
jmp loc_100AA03  +
mov eax ds:dword_100929C[ebx*4] +
mov ecx eax +
and ecx 0FFFFFFFh +
cmp ecx [ebp-70h] +
jnb loc_100AA0B  +
lea esi __ImageBase[ecx+edi] +
mov ecx eax +
shl ecx 2 +
sar ecx 1Eh +
sar eax 1Eh +
and ecx 3 +
and eax 3 +
xor edx edx +
dec ecx  +
jz loc_100A9F3  +
dec ecx  +
jz loc_100A9EB  +
dec ecx  +
jnz loc_100A9FC  +
mov edx [ebp-6Ch] +
jmp loc_100A9FC  +
mov edx [ebp-0C0h] +
jmp loc_100A9FC  +
mov edx [ebp-6Ch] +
sub edx [ebp-0C0h] +
dec eax  +
dec eax  +
jnz loc_100AA02  +
add [esi] edx +
inc ebx  +
cmp ebx ds:dword_1009298 +
jb loc_100A9AF  +
mov eax ds:dword_102543C +
mov eax 1C3C02DAh +
mov ecx [ebp-0FCh] +
mov eax [ebp-0C4h] +
add eax ecx +
mov ecx [ebp-0ECh] +
mov [ecx+8] eax +
mov eax [ebp-0E8h] +
add dword ptr [eax] 0Ch +
mov esi [ebp-158h] +
mov ebx [ebp-144h] +
mov edi [ebp-150h] +
mov ecx [ebp-14Ch] +
mov edx [ebp-154h] +
mov eax [ebp-148h] +
mov esp ebp +
pop ebp  +
popf   +
retn   +
***
mov eax ds:dword_102543C +
imul eax [ebp-60h] +
lea eax Address[eax] +
mov [ebp-5Ch] eax +
jmp loc_100AB8A  +
***
mov [ebp-5Ch] eax +
jmp loc_100ABD2  +
***
xor ebx ebx +
jmp loc_100AE4A  +
***
mov eax ebx +
inc ebx  +
mov [ebp-0D4h] ebx +
mov ebx 0F000h +
test [esi+eax*2+8] bx +
jz loc_100AE2A  +
movzx eax word ptr [esi+eax*2+8] +
and eax ecx +
mov ecx [esi] +
lea eax __ImageBase[eax+ecx] +
xor ecx ecx +
mov [ebp-64h] eax +
sub [ebp-64h] edx +
mov [ebp-78h] eax +
jz loc_100AEF7  +
movzx ebx byte ptr [ecx+edx] +
sub ebx edi +
add [ebp-6Ch] ebx +
add ebx [ebp-68h] +
mov eax ebx +
imul eax eax +
rol eax 0Ah +
ror ebx 0Ah +
xor eax ebx +
imul eax eax +
ror eax 2 +
add [ebp-6Ch] eax +
mov [ebp-68h] eax +
inc ecx  +
cmp ecx [ebp-64h] +
jb loc_100AEC6  +
mov ebx [ebp-78h] +
mov eax [ebx] +
sub eax [ebp-0F4h] +
mov [ebp-0F8h] eax +
xor ecx ecx +
movzx edx byte ptr [ebp+ecx-0F8h] +
sub edx edi +
add [ebp-6Ch] edx +
add edx [ebp-68h] +
mov eax edx +
imul eax eax +
rol eax 0Ah +
ror edx 0Ah +
xor eax edx +
imul eax eax +
ror eax 2 +
add [ebp-6Ch] eax +
inc ecx  +
mov [ebp-68h] eax +
cmp ecx 4 +
jb loc_100AF0A  +
mov ecx 0FFFh +
lea edx [ebx+4] +
jmp loc_100AE2A  +
***
mov esi [ebp-78h] +
mov eax [ebp-0D0h] +
lea edi [esi+eax] +
lea ecx [ebp+edx-44h] +
mov al [ecx+edi] +
xor al [ecx] +
xor [ebp-55h] al +
inc edx  +
cmp edx ebx +
mov [ecx+esi] al +
jb loc_100B31C  +
sub [ebp-5Ch] ebx +
add [ebp-80h] ebx +
add esi ebx +
add [ebp-84h] ebx +
mov [ebp-78h] esi +
jmp loc_100B03E  +
***
pushf   +
pushf   +
push ebp  +
mov ebp esp +
sub esp 54h +
mov [ebp+var_44] eax +
mov [ebp+var_48] ecx +
mov [ebp+var_50] edx +
mov [ebp+var_40] ebx +
mov [ebp+var_54] esi +
lea esi [ebp+arg_0] +
mov [ebp+var_4C] edi +
mov edi [esi+4] +
push edi  +
mov eax edi +
sub esi 4 +
mov [ebp+var_C] esi +
mov [ebp+var_14] edi +
mov eax 89773AF1h +
mov edx ds:off_1004F44 +
mov ebx [edi+4] +
mov eax 0FFFFFFFh +
mov edi [edi+0Ch] +
and [ebp+var_28] 0 +
and [ebp+var_24] 0 +
pop ecx  +
and edi eax +
and ebx eax +
mov eax offset __ImageBase +
mov ecx eax +
add edi eax +
sub ecx edx +
mov [ebp+var_18] ecx +
jnz loc_100BA08  +
and [ebp+var_4] 0 +
test ebx ebx +
jbe loc_100BC78  +
mov ecx 7FFFFFFFh +
mov esi 0D2BD56A2h +
mov edx esi +
mov eax [ebp+var_4] +
movzx eax byte ptr [eax+edi] +
sub eax 2D42A95Eh +
add [ebp+var_28] eax +
add eax [ebp+var_24] +
mul  edx +
lea edx [eax+edx*2-7FFFFFFFh] +
sar eax 1Fh +
and eax ecx +
sub edx eax +
mov eax edx +
sar eax 1Fh +
and eax ecx +
add eax edx +
mov edx esi +
mul  edx +
lea edx [eax+edx*2-7FFFFFFFh] +
sar eax 1Fh +
and eax ecx +
sub edx eax +
mov eax edx +
sar eax 1Fh +
and eax ecx +
add eax edx +
mov edx esi +
mul  edx +
add eax edx +
add [ebp+var_28] eax +
inc [ebp+var_4]  +
mov [ebp+var_24] eax +
cmp [ebp+var_4] ebx +
jb loc_100B9A7  +
jmp loc_100BC75  +
mov edx edi +
lea ecx [edi+ebx] +
sub edx eax +
mov esi edx +
and esi 0FFFFF000h +
add ebx edx +
mov [ebp+var_4] esi +
mov esi edx +
sub esi [ebp+var_4] +
mov edx ebx +
and edx 0FFFFF000h +
mov [ebp+var_20] ecx +
sub ebx edx +
mov ecx ds:dword_100003C +
mov [ebp+var_38] ebx +
mov ebx ds:dword_10000A0[ecx] +
add ebx eax +
mov eax ds:dword_10000A4[ecx] +
mov [ebp+var_10] esi +
add eax ebx +
mov [ebp+var_3C] edx +
mov [ebp+var_34] eax +
jmp loc_100BA5C  +
mov ecx [ebp+var_4] +
cmp [ebx] ecx +
jnb loc_100BA60  +
add ebx [ebx+4] +
cmp ebx eax +
jnz loc_100BA52  +
and [ebp+var_2C] 0 +
cmp ebx eax +
jz loc_100BAA6  +
mov ecx [ebp+var_4] +
cmp [ebx] ecx +
jnz loc_100BAA6  +
mov ecx [ebx+4] +
sub ecx 8 +
shr ecx 1 +
mov [ebp+var_8] ecx +
jz loc_100BAA6  +
lea ecx [ebx+8] +
mov [ebp+var_4] ecx +
jmp loc_100BA87  +
mov esi [ebp+var_10] +
mov ecx [ebp+var_4] +
movzx ecx word ptr [ecx] +
and ecx 0FFFh +
cmp ecx esi +
jnb loc_100BAA6  +
inc [ebp+var_2C]  +
mov ecx [ebp+var_2C] +
add [ebp+var_4] 2 +
cmp ecx [ebp+var_8] +
jnz loc_100BA84  +
mov esi 0D2BD56A2h +
mov ecx 7FFFFFFFh +
jmp loc_100BAB8  +
mov edx [ebp+var_3C] +
mov eax [ebp+var_34] +
cmp ebx eax +
jz loc_100BC12  +
cmp [ebx] edx +
ja loc_100BC12  +
mov eax [ebx+4] +
add eax 0FFFFFFF8h +
shr eax 1 +
cmp [ebp+var_2C] eax +
jnz loc_100BAF2  +
add ebx [ebx+4] +
cmp ebx [ebp+var_34] +
jz loc_100BC12  +
mov eax [ebp+var_3C] +
cmp [ebx] eax +
ja loc_100BC12  +
and [ebp+var_2C] 0 +
jmp loc_100BAC8  +
mov eax [ebp+var_3C] +
cmp [ebx] eax +
jnz loc_100BB0F  +
mov eax [ebp+var_2C] +
movzx eax word ptr [ebx+eax*2+8] +
and eax 0FFFh +
cmp eax [ebp+var_38] +
jnb loc_100BC12  +
mov eax [ebp+var_2C] +
inc [ebp+var_2C]  +
mov edx 0F000h +
test [ebx+eax*2+8] dx +
jz loc_100BAB2  +
movzx eax word ptr [ebx+eax*2+8] +
mov edx [ebx] +
and [ebp+var_4] 0 +
and eax 0FFFh +
lea eax __ImageBase[eax+edx] +
mov [ebp+var_8] eax +
sub [ebp+var_8] edi +
mov [ebp+var_10] eax +
jz loc_100BBA5  +
mov eax [ebp+var_4] +
movzx eax byte ptr [eax+edi] +
sub eax 2D42A95Eh +
add [ebp+var_28] eax +
add eax [ebp+var_24] +
mov edx esi +
mul  edx +
lea edx [eax+edx*2-7FFFFFFFh] +
sar eax 1Fh +
and eax ecx +
sub edx eax +
mov eax edx +
sar eax 1Fh +
and eax ecx +
add eax edx +
mov edx esi +
mul  edx +
lea edx [eax+edx*2-7FFFFFFFh] +
sar eax 1Fh +
and eax ecx +
sub edx eax +
mov eax edx +
sar eax 1Fh +
and eax ecx +
add eax edx +
mov edx esi +
mul  edx +
add eax edx +
add [ebp+var_28] eax +
inc [ebp+var_4]  +
mov [ebp+var_24] eax +
mov eax [ebp+var_4] +
cmp eax [ebp+var_8] +
jb loc_100BB43  +
mov eax [ebp+var_10] +
mov eax [eax] +
sub eax [ebp+var_18] +
xor edi edi +
mov [ebp+var_1C] eax +
movzx eax byte ptr [ebp+edi+var_1C] +
mov edx esi +
sub eax 2D42A95Eh +
add [ebp+var_28] eax +
add eax [ebp+var_24] +
mul  edx +
lea edx [eax+edx*2-7FFFFFFFh] +
sar eax 1Fh +
and eax ecx +
sub edx eax +
mov eax edx +
sar eax 1Fh +
and eax ecx +
add eax edx +
mov edx esi +
mul  edx +
lea edx [eax+edx*2-7FFFFFFFh] +
sar eax 1Fh +
and eax ecx +
sub edx eax +
mov eax edx +
sar eax 1Fh +
and eax ecx +
add eax edx +
mov edx esi +
mul  edx +
add eax edx +
add [ebp+var_28] eax +
mov [ebp+var_24] eax +
inc edi  +
cmp edi 4 +
jb loc_100BBAF  +
mov edi [ebp+var_10] +
add edi 4 +
jmp loc_100BAB2  +
xor ebx ebx +
mov eax [ebp+var_20] +
sub eax edi +
mov [ebp+var_20] eax +
jz loc_100BC75  +
mov edx esi +
movzx eax byte ptr [ebx+edi] +
sub eax 2D42A95Eh +
add [ebp+var_28] eax +
add eax [ebp+var_24] +
mul  edx +
lea edx [eax+edx*2-7FFFFFFFh] +
sar eax 1Fh +
and eax ecx +
sub edx eax +
mov eax edx +
sar eax 1Fh +
and eax ecx +
add eax edx +
mov edx esi +
mul  edx +
lea edx [eax+edx*2-7FFFFFFFh] +
sar eax 1Fh +
and eax ecx +
sub edx eax +
mov eax edx +
sar eax 1Fh +
and eax ecx +
add eax edx +
mov edx esi +
mul  edx +
add eax edx +
add [ebp+var_28] eax +
mov [ebp+var_24] eax +
inc ebx  +
cmp ebx [ebp+var_20] +
jb loc_100BC1E  +
mov esi [ebp+var_C] +
add dword ptr [esi+8] 10h +
mov ecx [ebp+var_28] +
mov edx [ebp+var_24] +
mov eax [ebp+var_14] +
mov eax [eax] +
and eax 0FFFFFFFh +
sub ecx ds:__ImageBase[eax] +
sbb edx ds:dword_1000004[eax] +
mov eax ecx +
or eax edx +
jz loc_100BD51  +
call sub_100CD3B  +
mov edx 0FFFFF000h +
lea ecx [esi+0Ch] +
and ecx 0FFFFFFFCh +
lea edi [ecx+0FFFh] +
and eax edx +
mov [ebp+var_20] eax +
and edi edx +
mov dword ptr [esi+8] offset sub_1023648 +
mov edx 0FFFFh +
xor eax eax +
mov ebx dword_10410FC +
imul ebx ebx +
add ebx 269EC3h +
mov dword_10410FC ebx +
shr ebx 10h +
shl eax 10h +
shr edx 10h +
or eax ebx +
test edx edx +
jnz loc_100BCCD  +
mov ebx 0FFFFh +
div  ebx +
inc edx  +
cmp ecx edi +
mov eax [ebp+var_20] +
mov [ebp+var_50] eax +
mov [ebp+var_48] edx +
mov eax ecx +
mov [ebp+var_20] 0 +
jnb loc_100BD1E  +
mov ecx [ebp+var_20] +
mov [eax] ecx +
add eax 4 +
cmp eax edi +
jb loc_100BD12  +
mov eax [ebp+var_14] +
mov dword ptr [esi+8] offset sub_1023648 +
mov eax [eax+8] +
and eax 0FFFFFFFh +
mov ecx [ebp+var_48] +
mov [ebp+var_4C] ecx +
mov edx ecx +
shl edx 10h +
add eax offset __ImageBase +
xor edx [eax] +
xor edx dword_1042400 +
xor edx ecx +
and [ebp+var_48] 0 +
mov [ebp+var_54] edx +
mov eax 0DC525528h +
mov edi [ebp+var_4C] +
mov eax [ebp+var_44] +
mov ecx [ebp+var_48] +
mov esi [ebp+var_54] +
mov ebx [ebp+var_40] +
mov edx [ebp+var_50] +
mov esp ebp +
pop ebp  +
popf   +
retn   +
***
push ebp  +
mov edi edi +
mov ebp esp +
push ecx  +
mov eax [ebp+8] +
mov eax [eax+8] +
mov ecx [eax] +
shr ecx 2 +
push ebx  +
push esi  +
and ecx 0FFFFFFFh +
add ecx offset __ImageBase +
mov esi offset Address +
mov [ebp-4] ecx +
lea ecx [eax+4] +
push edi  +
lea edi [ecx-1] +
cmp edi esi +
jb loc_100BDD6  +
mov eax ds:dword_101A35C +
mov edx ds:dword_102543C +
imul eax edx +
lea eax Address[eax] +
cmp edi eax +
jnb loc_100BDD6  +
mov ebx ds:dword_102543C +
xor edx edx +
mov eax edi +
sub eax esi +
div  ebx +
mov edx ds:dword_102543C +
imul edx eax +
lea ebx Address[edx] +
jmp loc_100BDD8  +
xor ebx ebx +
test ebx ebx +
jnz loc_100BDE4  +
and edi 0FFFF0000h +
mov ebx edi +
sub ecx ebx +
lea eax [ecx-40h] +
test eax eax +
jge loc_100BDEF  +
xor eax eax +
add eax ebx +
push 40h  +
pop ecx  +
mov byte ptr [eax] 0 +
inc eax  +
dec ecx  +
jnz loc_100BDF4  +
mov eax 2868392Ah +
cmp ebx esi +
jb loc_100BE3B  +
mov ecx ds:dword_102543C +
mov eax ds:dword_101A35C +
imul eax ecx +
lea eax Address[eax] +
cmp ebx eax +
jnb loc_100BE3B  +
mov ecx ds:dword_102543C +
mov eax ebx +
sub eax esi +
xor edx edx +
div  ecx +
mov ecx ds:dword_102543C +
imul ecx eax +
lea ecx Address[ecx] +
jmp loc_100BE3D  +
xor ecx ecx +
test ecx ecx +
jz loc_100BE62  +
mov ecx ds:dword_102543C +
mov eax ebx +
sub eax esi +
xor edx edx +
div  ecx +
mov ecx ds:dword_101A35C +
mov dword_1042454[eax*4] 0E941h +
jmp loc_100BE7F  +
call ds:__imp_GetLastError  +
push 8000h  +
push 0  +
push ebx  +
mov esi eax +
call ds:VirtualFree  +
push esi  +
call ds:SetLastError  +
mov eax [ebp-4] +
mov ecx [ebp+8] +
pop edi  +
pop esi  +
mov [ecx+8] eax +
pop ebx  +
leave   +
retn 8  +
***
push ebp  +
mov edx 0FFFFFFFh +
mov ebp esp +
mov edi edi +
sub esp 14Ch +
mov eax dword_1041530 +
xor eax ebp +
mov [ebp-4] eax +
mov eax [ebp+8] +
mov ecx [ebp+0Ch] +
push ebx  +
push esi  +
mov [ebp-0F0h] eax +
mov eax [eax+8] +
mov esi [eax+4] +
mov [ebp-0CCh] ecx +
mov ecx [eax] +
and esi edx +
mov [ebp-100h] esi +
shr ecx 2 +
mov esi [eax+8] +
add eax 0Ch +
push edi  +
and ecx edx +
mov edi offset __ImageBase +
and esi edx +
lea edx [eax-1] +
add ecx edi +
mov [ebp-0D0h] ecx +
mov [ebp-0C8h] esi +
cmp edx offset Address +
mov [ebp-74h] eax +
mov [ebp-78h] edx +
jb loc_100BF43  +
mov edx ds:dword_101A35C +
mov ebx ds:dword_102543C +
imul edx ebx +
lea ebx Address[edx] +
mov edx [ebp-78h] +
cmp edx ebx +
jnb loc_100BF43  +
mov eax edx +
sub eax offset Address +
mov ebx ds:dword_102543C +
xor edx edx +
div  ebx +
mov ebx ds:dword_102543C +
mov edx [ebp-78h] +
imul ebx eax +
mov eax [ebp-74h] +
lea ebx Address[ebx] +
jmp loc_100BF45  +
xor ebx ebx +
test ebx ebx +
jnz loc_100BF51  +
and edx 0FFFF0000h +
mov ebx edx +
sub eax ebx +
add eax 0FFFFFFC0h +
jns loc_100BF5A  +
xor eax eax +
push 40h  +
add eax ebx +
pop edx  +
mov byte ptr [eax] 0 +
inc eax  +
dec edx  +
jnz loc_100BF5F  +
lea eax [ecx+esi] +
mov [ebp-74h] eax +
mov eax ds:dword_102543C +
mov [ebp-7Ch] ecx +
sub eax esi +
lea ecx [eax+1] +
sub [ebp-7Ch] edi +
mov [ebp-6Ch] ecx +
xor eax eax +
test ecx ecx +
jz loc_100BFAF  +
mov edx dword_10410FC +
shr dword ptr [ebp-6Ch] 10h +
imul edx edx +
add edx 269EC3h +
mov dword_10410FC edx +
shr edx 10h +
shl eax 10h +
or eax edx +
cmp dword ptr [ebp-6Ch] 0 +
jnz loc_100BF85  +
xor edx edx +
div  ecx +
add ebx edx +
mov eax ebx +
push esi  +
push dword ptr [ebp-7Ch]  +
mov [ebp-6Ch] ebx +
mov eax 0D0555525h +
test esi esi +
mov eax [ebp-74h] +
pop ecx  +
pop ecx  +
mov ecx [eax] +
mov eax [eax+4] +
mov [ebp-0F4h] eax +
mov eax [ebp-0D0h] +
mov [ebp-78h] ebx +
mov [ebp-0F8h] ecx +
mov byte ptr [ebp-59h] 0 +
mov [ebp-0C4h] esi +
mov [ebp-0D8h] eax +
mov ebx 0FFFFF000h +
jz loc_100C698  +
lea esi [ebp-0F8h] +
mov eax 0C5C6F2C0h +
mov edx [ebp-0F8h] +
mov esi [ebp-0F4h] +
mov eax 0FFFFFFFh +
mov ecx ds:off_1004F44 +
and dword ptr [ebp-68h] 0 +
and dword ptr [ebp-64h] 0 +
and edx eax +
and esi eax +
mov eax edi +
add edx edi +
sub eax ecx +
mov [ebp-0FCh] eax +
jnz loc_100C07F  +
xor ebx ebx +
test esi esi +
jbe loc_100C296  +
mov edi 1BBD2D76h +
movzx ecx byte ptr [ebx+edx] +
sub ecx edi +
add [ebp-68h] ecx +
add ecx [ebp-64h] +
mov eax ecx +
imul eax eax +
rol eax 0Ah +
ror ecx 0Ah +
xor eax ecx +
imul eax eax +
ror eax 2 +
add [ebp-68h] eax +
mov [ebp-64h] eax +
inc ebx  +
cmp ebx esi +
jb loc_100C04A  +
jmp loc_100C296  +
lea eax [edx+esi] +
mov [ebp-0D4h] eax +
mov eax ds:dword_100003C +
mov ecx edx +
lea eax dword_10000A0[eax] +
mov [ebp-70h] eax +
mov eax [eax] +
add eax edi +
sub ecx edi +
mov edi [ebp-70h] +
mov edi [edi+4] +
mov [ebp-70h] edi +
mov edi ecx +
and edi ebx +
mov [ebp-60h] edi +
mov edi ecx +
sub edi [ebp-60h] +
add ecx esi +
mov esi ecx +
and esi ebx +
sub ecx esi +
mov [ebp-0E8h] ecx +
mov ecx [ebp-70h] +
mov [ebp-0ECh] esi +
mov esi eax +
add ecx eax +
mov [ebp-0E4h] ecx +
cmp eax ecx +
jz loc_100C0EA  +
mov eax [ebp-60h] +
cmp [esi] eax +
jnb loc_100C0EA  +
add esi [esi+4] +
cmp esi [ebp-0E4h] +
jnz loc_100C0D8  +
and dword ptr [ebp-0DCh] 0 +
cmp esi [ebp-0E4h] +
mov ecx 0FFFh +
jz loc_100C133  +
mov eax [ebp-60h] +
cmp [esi] eax +
jnz loc_100C133  +
mov eax [esi+4] +
sub eax 8 +
shr eax 1 +
jz loc_100C133  +
lea ebx [esi+8] +
mov [ebp-60h] ebx +
mov ebx [ebp-60h] +
movzx ebx word ptr [ebx] +
and ebx ecx +
cmp ebx edi +
jnb loc_100C133  +
inc dword ptr [ebp-0DCh]  +
add dword ptr [ebp-60h] 2 +
cmp [ebp-0DCh] eax +
jnz loc_100C115  +
mov edi 1BBD2D76h +
cmp esi [ebp-0E4h] +
jz loc_100C25A  +
mov eax [esi] +
cmp eax [ebp-0ECh] +
ja loc_100C25A  +
mov ebx [ebp-0DCh] +
mov eax [esi+4] +
add eax 0FFFFFFF8h +
shr eax 1 +
cmp ebx eax +
jnz loc_100C185  +
add esi [esi+4] +
cmp esi [ebp-0E4h] +
jz loc_100C25A  +
mov eax [ebp-0ECh] +
cmp [esi] eax +
ja loc_100C25A  +
xor ebx ebx +
jmp loc_100C158  +
***
mov eax [ebp-0ECh] +
cmp [esi] eax +
jnz loc_100C1A2  +
movzx eax word ptr [esi+ebx*2+8] +
and eax ecx +
cmp eax [ebp-0E8h] +
jnb loc_100C25A  +
mov eax ebx +
inc ebx  +
mov [ebp-0DCh] ebx +
mov ebx 0F000h +
test [esi+eax*2+8] bx +
jz loc_100C138  +
movzx eax word ptr [esi+eax*2+8] +
and eax ecx +
mov ecx [esi] +
lea eax __ImageBase[eax+ecx] +
xor ecx ecx +
mov [ebp-60h] eax +
sub [ebp-60h] edx +
mov [ebp-70h] eax +
jz loc_100C205  +
movzx ebx byte ptr [ecx+edx] +
sub ebx edi +
add [ebp-68h] ebx +
add ebx [ebp-64h] +
mov eax ebx +
imul eax eax +
rol eax 0Ah +
ror ebx 0Ah +
xor eax ebx +
imul eax eax +
ror eax 2 +
add [ebp-68h] eax +
inc ecx  +
mov [ebp-64h] eax +
cmp ecx [ebp-60h] +
jb loc_100C1D4  +
mov ebx [ebp-70h] +
mov eax [ebx] +
sub eax [ebp-0FCh] +
xor ecx ecx +
mov [ebp-104h] eax +
movzx edx byte ptr [ebp+ecx-104h] +
sub edx edi +
add [ebp-68h] edx +
add edx [ebp-64h] +
mov eax edx +
imul eax eax +
rol eax 0Ah +
ror edx 0Ah +
xor eax edx +
imul eax eax +
ror eax 2 +
add [ebp-68h] eax +
mov [ebp-64h] eax +
inc ecx  +
cmp ecx 4 +
jb loc_100C218  +
mov ecx 0FFFh +
lea edx [ebx+4] +
jmp loc_100C138  +
***
mov ebx [ebp-0D4h] +
xor esi esi +
sub ebx edx +
jz loc_100C296  +
movzx ecx byte ptr [esi+edx] +
sub ecx edi +
add [ebp-68h] ecx +
add ecx [ebp-64h] +
mov eax ecx +
imul eax eax +
rol eax 0Ah +
ror ecx 0Ah +
xor eax ecx +
imul eax eax +
ror eax 2 +
add [ebp-68h] eax +
inc esi  +
cmp esi ebx +
mov [ebp-64h] eax +
jb loc_100C266  +
xor edi edi +
xor eax eax +
mov ecx eax +
and ecx 7 +
mov cl [ebp+ecx-68h] +
mov [ebp+eax-58h] cl +
inc eax  +
cmp eax 10h +
jb loc_100C29A  +
mov eax 81587AE3h +
mov edx [ebp-50h] +
mov esi [ebp-4Ch] +
mov ecx [ebp-54h] +
mov eax [ebp-58h] +
mov [ebp-144h] eax +
mov [ebp-11Ch] eax +
mov eax ds:dword_101BE7C +
mov [ebp-148h] eax +
mov eax ds:dword_101BE80 +
mov [ebp-134h] eax +
mov eax ds:dword_101BE84 +
mov [ebp-120h] eax +
mov eax ds:dword_101BE88 +
mov [ebp-10Ch] eax +
mov eax [ebp-6Ch] +
mov [ebp-140h] ecx +
mov [ebp-118h] ecx +
lea ecx [ebp-48h] +
sub eax ecx +
mov [ebp-70h] eax +
mov eax [ebp-0D0h] +
sub eax [ebp-6Ch] +
mov [ebp-13Ch] edx +
mov [ebp-138h] esi +
mov [ebp-114h] edx +
mov [ebp-110h] esi +
mov [ebp-130h] edi +
mov [ebp-12Ch] edi +
mov [ebp-128h] edi +
mov [ebp-124h] edi +
mov [ebp-0D4h] eax +
lea edi [ebp-0C0h] +
lea esi [ebp-148h] +
push 10h  +
pop ecx  +
movs   +
mov ecx [ebp-0A0h] +
mov eax [ebp-0B0h] +
mov esi [ebp-0C0h] +
mov edx [ebp-90h] +
mov dword ptr [ebp-60h] 2 +
mov ebx [ebp-0BCh] +
lea edi [esi+edx] +
rol edi 7 +
xor eax edi +
lea edi [esi+eax] +
rol edi 9 +
xor ecx edi +
lea edi [ecx+eax] +
rol edi 0Dh +
xor edx edi +
lea edi [ecx+edx] +
ror edi 0Eh +
xor esi edi +
mov edi [ebp-0ACh] +
add ebx edi +
rol ebx 7 +
xor [ebp-9Ch] ebx +
mov ebx [ebp-9Ch] +
add edi ebx +
rol edi 9 +
xor [ebp-8Ch] edi +
mov edi ebx +
mov ebx [ebp-8Ch] +
add ebx edi +
rol ebx 0Dh +
mov edi [ebp-8Ch] +
xor [ebp-0BCh] ebx +
mov ebx [ebp-0BCh] +
add edi ebx +
mov ebx [ebp-98h] +
ror edi 0Eh +
xor [ebp-0ACh] edi +
mov edi [ebp-0A8h] +
add edi ebx +
rol edi 7 +
xor [ebp-88h] edi +
mov edi ebx +
mov ebx [ebp-88h] +
add edi ebx +
rol edi 9 +
xor [ebp-0B8h] edi +
mov edi ebx +
mov ebx [ebp-0B8h] +
add ebx edi +
rol ebx 0Dh +
mov edi [ebp-0B8h] +
xor [ebp-0A8h] ebx +
mov ebx [ebp-0A8h] +
add edi ebx +
mov ebx [ebp-84h] +
ror edi 0Eh +
xor [ebp-98h] edi +
mov edi [ebp-94h] +
add edi ebx +
rol edi 7 +
xor [ebp-0B4h] edi +
mov edi ebx +
mov ebx [ebp-0B4h] +
add edi ebx +
rol edi 9 +
xor [ebp-0A4h] edi +
mov edi ebx +
mov ebx [ebp-0A4h] +
add ebx edi +
rol ebx 0Dh +
mov edi [ebp-0A4h] +
xor [ebp-94h] ebx +
mov ebx [ebp-94h] +
add edi ebx +
ror edi 0Eh +
xor [ebp-84h] edi +
mov edi [ebp-0B4h] +
add edi esi +
rol edi 7 +
xor [ebp-0BCh] edi +
mov edi [ebp-0BCh] +
add edi esi +
rol edi 9 +
xor [ebp-0B8h] edi +
mov edi [ebp-0BCh] +
mov ebx [ebp-0B8h] +
add ebx edi +
mov edi [ebp-0B8h] +
rol ebx 0Dh +
xor [ebp-0B4h] ebx +
mov ebx [ebp-0B4h] +
add ebx edi +
mov edi [ebp-0ACh] +
add edi eax +
ror ebx 0Eh +
xor esi ebx +
rol edi 7 +
xor [ebp-0A8h] edi +
mov edi [ebp-0ACh] +
mov ebx [ebp-0A8h] +
add ebx edi +
mov edi [ebp-0A8h] +
rol ebx 9 +
xor [ebp-0A4h] ebx +
mov ebx [ebp-0A4h] +
add ebx edi +
mov edi [ebp-0A4h] +
rol ebx 0Dh +
xor eax ebx +
add edi eax +
ror edi 0Eh +
mov ebx [ebp-9Ch] +
xor [ebp-0ACh] edi +
mov edi [ebp-98h] +
add edi ebx +
rol edi 7 +
xor [ebp-94h] edi +
mov ebx [ebp-94h] +
mov edi [ebp-98h] +
add ebx edi +
mov edi [ebp-94h] +
rol ebx 9 +
xor ecx ebx +
add edi ecx +
mov ebx [ebp-88h] +
rol edi 0Dh +
xor [ebp-9Ch] edi +
mov edi [ebp-9Ch] +
add edi ecx +
ror edi 0Eh +
xor [ebp-98h] edi +
mov edi [ebp-84h] +
add edi ebx +
rol edi 7 +
xor edx edi +
mov edi [ebp-84h] +
add edi edx +
rol edi 9 +
xor [ebp-8Ch] edi +
mov edi [ebp-8Ch] +
add edi edx +
rol edi 0Dh +
xor [ebp-88h] edi +
mov edi [ebp-8Ch] +
mov ebx [ebp-88h] +
add ebx edi +
ror ebx 0Eh +
xor [ebp-84h] ebx +
dec dword ptr [ebp-60h]  +
jnz loc_100C37C  +
mov [ebp-90h] edx +
xor edx edx +
push 40h  +
mov [ebp-0B0h] eax +
mov [ebp-0A0h] ecx +
xor eax eax +
mov [ebp-0C0h] esi +
pop ebx  +
mov ecx [ebp+eax-148h] +
add [ebp+eax-0C0h] ecx +
add eax 4 +
cmp eax ebx +
jl loc_100C5EE  +
lea esi [ebp-0C0h] +
lea edi [ebp-48h] +
inc dword ptr [ebp-128h]  +
push 10h  +
pop ecx  +
movs   +
cmp [ebp-0C4h] ebx +
jbe loc_100C658  +
mov eax [ebp-0D4h] +
mov esi [ebp-70h] +
lea edi [esi+eax] +
lea ecx [ebp+edx-48h] +
mov al [ecx+edi] +
xor al [ecx] +
xor [ebp-59h] al +
inc edx  +
mov [ecx+esi] al +
cmp edx ebx +
jb loc_100C62B  +
sub [ebp-0C4h] ebx +
add [ebp-78h] ebx +
add esi ebx +
add [ebp-0D8h] ebx +
mov [ebp-70h] esi +
jmp loc_100C34C  +
***
cmp [ebp-0C4h] edx +
jbe loc_100C688  +
mov edi [ebp-78h] +
lea eax [ebp-48h] +
mov esi [ebp-0D8h] +
sub esi eax +
sub edi eax +
lea ecx [ebp+edx-48h] +
mov al [ecx+esi] +
xor al [ecx] +
xor [ebp-59h] al +
mov [ecx+edi] al +
inc edx  +
cmp edx [ebp-0C4h] +
jb loc_100C670  +
mov esi [ebp-0C8h] +
mov edi offset __ImageBase +
mov ebx 0FFFFF000h +
mov ecx [ebp-74h] +
movzx ecx byte ptr [ecx+8] +
movzx eax byte ptr [ebp-59h] +
sub eax ecx +
jz loc_100C73A  +
call sub_100CD3B  +
mov edi eax +
mov eax [ebp-0F0h] +
lea ecx [eax+0Ch] +
mov edx 0FFFFh +
mov dword ptr [eax+8] offset sub_1023648 +
and ecx 0FFFFFFFCh +
and edi ebx +
lea esi [ecx+0FFFh] +
and esi ebx +
xor eax eax +
mov ebx dword_10410FC +
imul ebx ebx +
add ebx 269EC3h +
mov dword_10410FC ebx +
shr ebx 10h +
shl eax 10h +
shr edx 10h +
or eax ebx +
test edx edx +
jnz loc_100C6D6  +
mov ebx 0FFFFh +
div  ebx +
mov eax [ebp-0CCh] +
mov [eax+4] edi +
inc edx  +
cmp ecx esi +
mov [eax+0Ch] edx +
mov dword ptr [ebp-0CCh] 0 +
mov eax ecx +
jnb loc_100C730  +
mov ecx [ebp-0CCh] +
mov [eax] ecx +
add eax 4 +
cmp eax esi +
jb loc_100C721  +
mov eax offset sub_1023648 +
jmp loc_100C821  +
mov eax [ebp-0D0h] +
sub eax [ebp-6Ch] +
mov ecx ds:off_1004F44 +
sub edi ecx +
mov [ebp-0C8h] eax +
mov [ebp-74h] edi +
jnz loc_100C75E  +
test eax eax +
jz loc_100C80C  +
mov eax [ebp-7Ch] +
mov edi [ebp-6Ch] +
mov ecx ds:dword_1009298 +
sub edi [ebp-0D0h] +
add eax esi +
mov [ebp-0CCh] eax +
xor esi esi +
dec ecx  +
js loc_100C7A5  +
lea eax [ecx+esi] +
cdq   +
sub eax edx +
sar eax 1 +
mov edx ds:dword_100929C[eax*4] +
and edx 0FFFFFFFh +
cmp [ebp-7Ch] edx +
jnb loc_100C79C  +
lea ecx [eax-1] +
jmp loc_100C7A1  +
jbe loc_100C7A9  +
lea esi [eax+1] +
cmp ecx esi +
jge loc_100C77D  +
mov ebx esi +
jmp loc_100C804  +
mov ebx eax +
jmp loc_100C804  +
mov eax ds:dword_100929C[ebx*4] +
mov ecx eax +
and ecx 0FFFFFFFh +
cmp ecx [ebp-0CCh] +
jnb loc_100C80C  +
lea esi __ImageBase[ecx+edi] +
mov ecx eax +
shl ecx 2 +
sar ecx 1Eh +
sar eax 1Eh +
and ecx 3 +
and eax 3 +
xor edx edx +
dec ecx  +
jz loc_100C7F4  +
dec ecx  +
jz loc_100C7EC  +
dec ecx  +
jnz loc_100C7FD  +
mov edx [ebp-74h] +
jmp loc_100C7FD  +
mov edx [ebp-0C8h] +
jmp loc_100C7FD  +
mov edx [ebp-74h] +
sub edx [ebp-0C8h] +
dec eax  +
dec eax  +
jnz loc_100C803  +
add [esi] edx +
inc ebx  +
cmp ebx ds:dword_1009298 +
jb loc_100C7AD  +
mov eax ds:dword_102543C +
mov eax 0F8E5227Fh +
mov eax [ebp-6Ch] +
mov ecx [ebp-100h] +
add eax ecx +
mov ecx [ebp-0F0h] +
mov [ecx+8] eax +
mov ecx [ebp-4] +
pop edi  +
xor ecx ebp +
pop esi  +
pop ebx  +
call sub_1009284  +
leave   +
retn 8  +
***
pushf   +
mov edi edi +
lea eax [ebp+4] +
pop ebp  +
add eax 4 +
retn   +
***
push ebp  +
mov ebp esp +
mov edi edi +
mov eax dword_1041470 +
or eax dword_1041474 +
jz loc_100CD66  +
xor eax eax +
jmp loc_100CD7E  +
push offset dword_1041470  +
push dword ptr [ebp+8]  +
push offset sub_1033120  +
push offset dword_10303AC  +
call dword_10424F0  +
pop ebp  +
retn 4  +
***
pushf   +
push ebp  +
mov ebp esp +
sub esp 50h +
mov [ebp-40h] eax +
mov [ebp-44h] ecx +
mov [ebp-4Ch] edx +
mov [ebp-3Ch] ebx +
mov [ebp-50h] esi +
lea esi [ebp+4] +
mov [ebp-48h] edi +
mov ebx [esi+4] +
mov eax ebx +
sub esi 4 +
push ebx  +
mov [ebp-0Ch] esi +
mov [ebp-14h] ebx +
mov eax 0ACCC0794h +
mov edx ds:off_1004F44 +
mov eax 0FFFFFFFh +
mov edi [ebx] +
mov ebx [ebx+8] +
and dword ptr [ebp-24h] 0 +
and dword ptr [ebp-20h] 0 +
and ebx eax +
and edi eax +
mov eax offset __ImageBase +
add ebx eax +
pop ecx  +
mov ecx eax +
sub ecx edx +
mov [ebp-18h] ecx +
jnz loc_100CE44  +
and dword ptr [ebp-4] 0 +
test edi edi +
jbe loc_100D075  +
mov esi 0AFF3F1F5h +
mov ecx 7FFFFFFFh +
mov edx esi +
mov eax [ebp-4] +
movzx eax byte ptr [eax+ebx] +
sub eax 500C0E0Bh +
add [ebp-24h] eax +
add eax [ebp-20h] +
mul  edx +
add eax edx +
mov edx esi +
imul eax eax +
ror eax 1Bh +
mul  edx +
lea edx [eax+edx*2-7FFFFFFFh] +
sar eax 1Fh +
and eax ecx +
sub edx eax +
mov eax edx +
sar eax 1Fh +
and eax ecx +
add eax edx +
add [ebp-24h] eax +
inc dword ptr [ebp-4]  +
mov [ebp-20h] eax +
cmp [ebp-4] edi +
jb loc_100CDF5  +
jmp loc_100D072  +
lea ecx [edi+ebx] +
mov edx ebx +
sub edx eax +
mov esi edx +
and esi 0FFFFF000h +
mov [ebp-4] esi +
add edi edx +
mov esi edx +
mov edx edi +
sub esi [ebp-4] +
mov [ebp-1Ch] ecx +
and edx 0FFFFF000h +
sub edi edx +
mov ecx ds:dword_100003C +
mov [ebp-34h] edi +
mov edi ds:dword_10000A0[ecx] +
add edi eax +
mov eax ds:dword_10000A4[ecx] +
mov [ebp-38h] edx +
add eax edi +
mov [ebp-30h] eax +
jmp loc_100CE95  +
mov ecx [ebp-4] +
cmp [edi] ecx +
jnb loc_100CE99  +
add edi [edi+4] +
cmp edi eax +
jnz loc_100CE8B  +
and dword ptr [ebp-28h] 0 +
cmp edi eax +
jz loc_100CEDA  +
mov ecx [ebp-4] +
cmp [edi] ecx +
jnz loc_100CEDA  +
mov ecx [edi+4] +
sub ecx 8 +
shr ecx 1 +
mov [ebp-10h] ecx +
jz loc_100CEDA  +
lea ecx [edi+8] +
mov [ebp-4] ecx +
mov ecx [ebp-4] +
movzx ecx word ptr [ecx] +
and ecx 0FFFh +
cmp ecx esi +
jnb loc_100CEDA  +
inc dword ptr [ebp-28h]  +
mov ecx [ebp-10h] +
add dword ptr [ebp-4] 2 +
cmp [ebp-28h] ecx +
jnz loc_100CEBB  +
mov ecx 7FFFFFFFh +
mov esi 0AFF3F1F5h +
jmp loc_100CEEC  +
mov eax [ebp-30h] +
mov edx [ebp-38h] +
cmp edi eax +
jz loc_100D021  +
cmp [edi] edx +
ja loc_100D021  +
mov eax [edi+4] +
lea edx [eax-8] +
mov eax [ebp-28h] +
shr edx 1 +
cmp eax edx +
jnz loc_100CF28  +
add edi [edi+4] +
cmp edi [ebp-30h] +
jz loc_100D021  +
mov eax [ebp-38h] +
cmp [edi] eax +
ja loc_100D021  +
and dword ptr [ebp-28h] 0 +
jmp loc_100CEFC  +
***
mov edx [ebp-38h] +
cmp [edi] edx +
jnz loc_100CF42  +
movzx eax word ptr [edi+eax*2+8] +
and eax 0FFFh +
cmp eax [ebp-34h] +
jnb loc_100D021  +
mov eax [ebp-28h] +
inc dword ptr [ebp-28h]  +
mov edx 0F000h +
test [edi+eax*2+8] dx +
jz loc_100CEE6  +
movzx eax word ptr [edi+eax*2+8] +
mov edx [edi] +
and dword ptr [ebp-4] 0 +
and eax 0FFFh +
lea eax __ImageBase[eax+edx] +
mov [ebp-8] eax +
sub [ebp-8] ebx +
mov [ebp-10h] eax +
jz loc_100CFC6  +
mov edx esi +
mov eax [ebp-4] +
movzx eax byte ptr [eax+ebx] +
sub eax 500C0E0Bh +
add [ebp-24h] eax +
add eax [ebp-20h] +
mul  edx +
add eax edx +
mov edx esi +
imul eax eax +
ror eax 1Bh +
mul  edx +
lea edx [eax+edx*2-7FFFFFFFh] +
sar eax 1Fh +
and eax ecx +
sub edx eax +
mov eax edx +
sar eax 1Fh +
and eax ecx +
add eax edx +
add [ebp-24h] eax +
inc dword ptr [ebp-4]  +
mov [ebp-20h] eax +
mov eax [ebp-4] +
cmp eax [ebp-8] +
jb loc_100CF76  +
mov eax [ebp-10h] +
mov eax [eax] +
sub eax [ebp-18h] +
xor ebx ebx +
mov [ebp-8] eax +
mov edx esi +
movzx eax byte ptr [ebp+ebx-8] +
sub eax 500C0E0Bh +
add [ebp-24h] eax +
add eax [ebp-20h] +
mul  edx +
add eax edx +
mov edx esi +
imul eax eax +
ror eax 1Bh +
mul  edx +
lea edx [eax+edx*2-7FFFFFFFh] +
sar eax 1Fh +
and eax ecx +
sub edx eax +
mov eax edx +
sar eax 1Fh +
and eax ecx +
add eax edx +
add [ebp-24h] eax +
inc ebx  +
mov [ebp-20h] eax +
cmp ebx 4 +
jb loc_100CFD0  +
mov ebx [ebp-10h] +
add ebx 4 +
jmp loc_100CEE6  +
***
xor edi edi +
mov eax [ebp-1Ch] +
sub eax ebx +
mov [ebp-1Ch] eax +
jz loc_100D072  +
mov edx esi +
movzx eax byte ptr [ebx+edi] +
sub eax 500C0E0Bh +
add [ebp-24h] eax +
add eax [ebp-20h] +
mul  edx +
add eax edx +
imul eax eax +
ror eax 1Bh +
mov edx esi +
mul  edx +
lea edx [eax+edx*2-7FFFFFFFh] +
sar eax 1Fh +
and eax ecx +
sub edx eax +
mov eax edx +
sar eax 1Fh +
and eax ecx +
add eax edx +
add [ebp-24h] eax +
inc edi  +
mov [ebp-20h] eax +
cmp edi [ebp-1Ch] +
jb loc_100D02D  +
mov esi [ebp-0Ch] +
add dword ptr [esi+8] 10h +
mov ecx [ebp-24h] +
mov edx [ebp-20h] +
mov eax [ebp-14h] +
mov eax [eax+0Ch] +
and eax 0FFFFFFFh +
sub ecx ds:__ImageBase[eax] +
sbb edx ds:dword_1000004[eax] +
mov eax ecx +
or eax edx +
jz loc_100D14F  +
call sub_100CD3B  +
mov edx 0FFFFF000h +
lea ecx [esi+0Ch] +
and ecx 0FFFFFFFCh +
and eax edx +
lea edi [ecx+0FFFh] +
and edi edx +
mov [ebp-1Ch] eax +
xor eax eax +
mov dword ptr [esi+8] offset sub_1023648 +
mov edx 0FFFFh +
mov ebx dword_10410FC +
imul ebx ebx +
add ebx 269EC3h +
mov dword_10410FC ebx +
shr ebx 10h +
shl eax 10h +
shr edx 10h +
or eax ebx +
test edx edx +
jnz loc_100D0CB  +
mov ebx 0FFFFh +
div  ebx +
inc edx  +
mov eax [ebp-1Ch] +
mov [ebp-4Ch] eax +
mov [ebp-44h] edx +
mov eax ecx +
cmp ecx edi +
mov dword ptr [ebp-1Ch] 0 +
jnb loc_100D11C  +
mov ecx [ebp-1Ch] +
mov [eax] ecx +
add eax 4 +
cmp eax edi +
jb loc_100D110  +
mov eax [ebp-14h] +
mov dword ptr [esi+8] offset sub_1023648 +
mov ecx [ebp-44h] +
mov edx ecx +
mov eax [eax+4] +
mov [ebp-48h] ecx +
and eax 0FFFFFFFh +
shl edx 10h +
add eax offset __ImageBase +
xor edx [eax] +
xor edx dword_104100C +
xor edx ecx +
and dword ptr [ebp-44h] 0 +
mov [ebp-50h] edx +
mov eax 515FC965h +
mov edi [ebp-48h] +
mov ebx [ebp-3Ch] +
mov edx [ebp-4Ch] +
mov eax [ebp-40h] +
mov ecx [ebp-44h] +
mov esi [ebp-50h] +
mov esp ebp +
pop ebp  +
popf   +
retn   +
***
mov edi edi +
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push 4  +
lea eax [ebp+arg_8] +
push eax  +
push 0Ch  +
push offset dword_1005950  +
push 2Bh  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call TraceMessage  +
add esp 20h +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push esi  +
mov esi off_1041010 +
push edi  +
mov edi offset dword_1041144 +
jmp loc_100D2EE  +
mov eax [edi] +
and [ebp+var_4] 0 +
lea ecx [esi+8] +
push ecx  +
push 0  +
push 0  +
lea ecx [ebp+var_8] +
push ecx  +
push 1  +
push eax  +
push esi  +
push offset loc_100D20B  +
add edi 4 +
mov [ebp+var_8] eax +
call ds:RegisterTraceGuidsA  +
mov esi [esi] +
test esi esi +
jnz loc_100D2C5  +
pop edi  +
pop esi  +
leave   +
retn   +
***
call sub_100C966  +
or ds:59D08004h ah +
add al dh +
add al 25h +
add al 0 +
cwde   +
or al 0 +
mov al ds:169F5E8h +
add [edx+8] cl +
sub byte ptr [eax+66h] 0 +
inc eax  +
dec eax  +
add al [eax] +
inc eax  +
adc fs:[eax] al +
call sub_100B933  +
pop esp  +
adc [eax+esi*2] al +
and [eax] ch +
add [eax] dh +
cld   +
and al 4 +
add al 68h +
add [eax] ah +
mov edi edi +
push ebp  +
mov ebp esp +
and esp 0FFFFFFF8h +
sub esp 2Ch +
push ebx  +
push esi  +
xor ebx ebx +
push edi  +
push ebx  +
push ebx  +
push 1  +
push ebx  +
mov [esp+24h] ebx +
mov [esp+28h] ebx +
mov [esp+30h] bl +
mov [esp+1Fh] bl +
call ds:HeapSetInformation  +
call sub_100B933  +
pop esp  +
adc [eax+esi*8] al +
and [eax] ch +
add [eax-4] dl +
and al 4 +
rol al 68h +
add al ah +
test eax eax +
jnz loc_100D3EA  +
call ds:__imp_GetLastError  +
call sub_1001F6A  +
pusha   +
pop ecx  +
add al ah +
cmp al 0 +
add [eax] dl +
sbb al 25h +
add al 10h +
and ds:0D1E84004h ah +
dec ebx  +
jmp dword ptr [eax+59h]  +
***
xor eax eax +
mov dword_1041130 ebx +
mov dword_1041120 ebx +
mov byte_1041138 1 +
mov byte_1041139 bl +
mov word_104113A ax +
mov dword_104113C ebx +
mov dword_1041144 offset dword_1009130 +
mov off_1041010 offset dword_1041120 +
call sub_100D2AF  +
call sub_100C966  +
or ds:59D07004h ah +
add [eax+4] dl +
and eax 0C985004h +
add al ah +
mov eax off_1041010 +
cmp eax offset off_1041010 +
jz loc_100D46D  +
call sub_1001F6A  +
pusha   +
pop ecx  +
add [eax+3Ch] dl +
sbb al 25h +
add al 60h +
and ds:0A6A7004h ah +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100D1C0  +
call sub_1023D05  +
add [edx+8] ecx +
add [eax+66h] ch +
add [eax] dh +
dec eax  +
add al [eax] +
loopne loc_100D4E3  +
adc [eax+eax*8] al +
cmp dword ptr [ebp+8] 1 +
mov dword ptr [esp+10h] offset loc_100D482 +
mov eax [esp+10h] +
jle near ptr loc_100D4D8+1  +
mov eax [ebp+0Ch] +
push offset dword_1009140  +
push dword ptr [eax+4]  +
call _stricmp  +
call sub_100B933  +
pop esp  +
adc [eax+edx*2] al +
and [eax] ch +
add [eax-0FFBDB04h] ah +
shr byte ptr [eax+0] 0C0h +
pop ecx  +
pop ecx  +
test eax eax +
jnz near ptr loc_100D4D8+1  +
call sub_100B52A  +
pushf   +
pop ecx  +
add [eax+14h] ah +
and eax 25100004h +
add al 0E0h +
xor al 0 +
add [eax-3Ah] ah +
inc esp  +
and al 0Fh +
add [edx+6A0F2444h] ecx +
or al 88h +
inc esp  +
and al 24h +
call sub_101278A  +
call sub_100C966  +
or ds:59D0D004h ah +
add [eax+50042504h] ah +
cwde   +
or al 0 +
pusha   +
call sub_100B933  +
pop esp  +
adc [eax+eax*2] al +
and [eax] ch +
mov dword ptr [eax] offset off_1009150 +
mov [eax+8] ebx +
mov [eax+4] cl +
mov esi eax +
jmp loc_100D542  +
xor esi esi +
call sub_1023D05  +
add [edx+8] ecx +
inc eax  +
push 48B00066h  +
add al [eax] +
mov al 64h +
adc [eax] al +
cmp esi ebx +
jnz loc_100D57A  +
call sub_100B52A  +
pushf   +
pop ecx  +
add [eax] dl +
adc al 25h +
add al 80h +
adc ds:34B004h ah +
add [eax+7000EBFh] dh +
sub cl 8Fh +
call sub_1001F6A  +
pusha   +
pop ecx  +
add al al +
cmp al 0 +
add [eax+3004251Ch] dl +
and ds:0D2E85004h ah +
jl loc_100D849  +
mov eax off_1041010 +
cmp eax offset off_1041010 +
jz loc_100D82E  +
push 0Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100D1C0  +
call sub_100B52A  +
pushf   +
pop ecx  +
add [eax+14h] dh +
and eax 25101004h +
add al 0B0h +
xor al 0 +
add [eax-1EE518h] dh +
call fword ptr [eax+edx+4]  +
adc [eax] ah +
sub [eax] al +
loopne loc_100D81E  +
and al 4 +
rol al 1 +
push 10A17000h  +
adc [ecx+eax] al +
call sub_100C966  +
or ds:59D01004h ah +
add [eax+4] ah +
and eax 0C982004h +
add [eax+3Bh] dh +
sti   +
jge loc_100D890  +
jmp loc_100D84E  +
mov eax off_1041010 +
call sub_100B933  +
pop esp  +
adc [eax+eax*8] al +
and [eax] ch +
add al ah +
cld   +
and al 4 +
add al 68h +
jz loc_100D8DA  +
push edi  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100D1E3  +
call sub_100B52A  +
pushf   +
pop ecx  +
add [eax] dl +
adc al 25h +
add al 0C0h +
adc ds:34C004h ah +
add [eax] dh +
mov eax off_1041010 +
cmp eax offset off_1041010 +
jz loc_100D8DA  +
mov esi eax +
jmp loc_100D8B7  +
mov eax [esi+8] +
mov ecx [esi+0Ch] +
mov edx eax +
or edx ecx +
jz loc_100D8B5  +
push ecx  +
push eax  +
call ds:UnregisterTraceGuids  +
mov [esi+8] ebx +
mov [esi+0Ch] ebx +
mov esi [esi] +
cmp esi ebx +
jnz loc_100D89B  +
call sub_100B52A  +
pushf   +
pop ecx  +
add [eax+14h] al +
and eax 2510B004h +
add al 0 +
xor al 0 +
add [eax-39h] dl +
add eax offset off_1041010 +
adc [eax+0] dl +
add al 1 +
call sub_1001F6A  +
pusha   +
pop ecx  +
add al dl +
cmp al 0 +
add al al +
sbb al 25h +
add al 50h +
and ds:72E84004h ah +
push ebp  +
mov ebp esp +
sub esp 10h +
push ebx  +
xor ebx ebx +
push esi  +
mov [ebp-4] ebx +
mov [ebp-0Ch] ebx +
call ds:GetProcessHeap  +
mov [ebp-10h] eax +
lea eax [ebp-4] +
push eax  +
push 20008h  +
call ds:GetCurrentProcess  +
push eax  +
call ds:OpenProcessToken  +
test eax eax +
jnz loc_1010BF6  +
call ds:__imp_GetLastError  +
cmp eax ebx +
jle loc_1010BF2  +
and eax 0FFFFh +
or eax 80070000h +
mov esi eax +
jmp loc_1010C71  +
push edi  +
mov edi ds:GetTokenInformation +
lea eax [ebp-8] +
push eax  +
push ebx  +
push ebx  +
push 1  +
push dword ptr [ebp-4]  +
call edi  +
mov esi ds:__imp_GetLastError +
cmp eax ebx +
jnz loc_1010C1B  +
call esi  +
cmp eax 7Ah +
jnz loc_1010C49  +
push dword ptr [ebp-8]  +
push ebx  +
push dword ptr [ebp-10h]  +
call ds:HeapAlloc  +
mov [ebp-0Ch] eax +
cmp eax ebx +
jnz loc_1010C36  +
mov esi 8007000Eh +
jmp loc_1010C70  +
lea ecx [ebp-8] +
push ecx  +
push dword ptr [ebp-8]  +
push eax  +
push 1  +
push dword ptr [ebp-4]  +
call edi  +
test eax eax +
jnz loc_1010C5D  +
call esi  +
cmp eax ebx +
jle loc_1010C59  +
and eax 0FFFFh +
or eax 80070000h +
mov esi eax +
jmp loc_1010C70  +
push dword ptr [ebp+8]  +
mov eax [ebp-0Ch] +
push dword ptr [eax]  +
call ConvertSidToStringSidW  +
test eax eax +
jz loc_1010C49  +
xor esi esi +
pop edi  +
push dword ptr [ebp-0Ch]  +
push ebx  +
push dword ptr [ebp-10h]  +
call ds:HeapFree  +
cmp [ebp-4] ebx +
jz loc_1010C8C  +
push dword ptr [ebp-4]  +
call ds:CloseHandle  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push ebx  +
mov ebx eax +
xor eax eax +
push esi  +
push edi  +
mov edi edx +
mov [ebp-8] eax +
cmp ecx eax +
jz loc_1010DB2  +
cmp [ebp+8] eax +
jz loc_1010DB2  +
cmp edi eax +
jz loc_1010DB2  +
cmp ebx eax +
jz loc_1010CCD  +
mov eax [edi] +
mov [ebp-0Ch] eax +
mov eax ecx +
push 6  +
shl eax 3 +
xor edx edx +
pop esi  +
div  esi +
mov esi eax +
add esi 3 +
and esi 0FFFFFFFCh +
mov [edi] esi +
cmp esi [ebp-0Ch] +
jbe loc_1010CFD  +
neg ebx  +
sbb ebx ebx +
and ebx 8007007Ah +
mov [ebp-8] ebx +
jmp loc_1010DB9  +
mov eax ecx +
push 3  +
xor edx edx +
pop edi  +
div  edi +
mov byte ptr [ebp-2] 0 +
mov byte ptr [ebp-3] 0 +
mov byte ptr [ebp-4] 40h +
mov byte ptr [ebp-1] 40h +
lea eax [ebx+esi*2-8] +
sub ecx edx +
add ecx [ebp+8] +
sub edx 0 +
mov edi ecx +
jz loc_1010DA5  +
dec edx  +
jz loc_1010D49  +
dec edx  +
jnz loc_1010DB9  +
mov dl [ebp-3] +
mov bl [ebp-1] +
mov cl [edi+1] +
mov [ebp-2] cl +
and cl 0Fh +
shl cl 2 +
shr dl 6 +
or cl dl +
jmp loc_1010D4E  +
mov cl [ebp-4] +
mov bl cl +
mov dl [edi] +
movzx esi dl +
shr esi 2 +
movsx si ds:byte_10058A8[esi] +
and dl 3 +
mov [eax] si +
movzx esi byte ptr [ebp-2] +
shl dl 4 +
movzx edx dl +
shr esi 4 +
or edx esi +
movsx dx ds:byte_10058A8[edx] +
movzx ecx cl +
mov [eax+2] dx +
movsx cx ds:byte_10058A8[ecx] +
mov [eax+4] cx +
movzx ecx bl +
movsx cx ds:byte_10058A8[ecx] +
mov [eax+6] cx +
cmp edi [ebp+8] +
jz loc_1010DB9  +
sub eax 8 +
mov dl [edi-1] +
sub edi 3 +
mov bl dl +
and bl 3Fh +
jmp loc_1010D36  +
***
mov dword ptr [ebp-8] 80070057h +
mov eax [ebp-8] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
lea eax [ebp-4] +
push eax  +
lea eax [ebp-8] +
push eax  +
call sub_103379B  +
mov eax [ebp-4] +
cmp [ebx] eax +
jnb loc_1011462  +
mov eax 80070057h +
jmp locret_10114A9  +
push dword ptr [ebp+0Ch]  +
mov byte ptr [eax+esi-1] 0 +
push dword ptr [ebp+8]  +
mov eax [ebp-4] +
mov ecx esi +
call sub_101150E  +
test eax eax +
jz loc_1011489  +
jle locret_10114A9  +
and eax 0FFFFh +
or eax 80070000h +
jmp locret_10114A9  +
push esi  +
push esi  +
call sub_10337E9  +
test eax eax +
jnz loc_101149B  +
mov eax 8007000Eh +
jmp locret_10114A9  +
mov ecx [ebp-4] +
mov eax esi +
mov [ebx] ecx +
call sub_10114F5  +
xor eax eax +
leave   +
retn 8  +
***
lea ecx [eax+ecx-1] +
mov edi edi +
mov ebp esp +
mov edi edi +
push ebp  +
mov ebp esp +
rdtsc   +
sub esp 2Ch +
mov dword_10410FC eax +
call ds:GetVersion  +
and eax 80000000h +
cmp dword_10424F8 0 +
mov dword_10410F4 eax +
jnz loc_1011642  +
push offset CriticalSection  +
call sub_102E01B  +
test eax eax +
jl locret_10117E5  +
mov dword_10424F8 1 +
lea eax [ebp+SystemInfo] +
push esi  +
push eax  +
call ds:GetSystemInfo  +
mov eax ds:dword_100003C +
mov edx offset __ImageBase +
mov ecx ds:dword_1000050[eax] +
add ecx edx +
mov eax [ebp+SystemInfo.lpMinimumApplicationAddress] +
lea esi [eax-80000000h] +
cmp ecx esi +
jb loc_1011672  +
lea eax [ecx-80000000h] +
add eax 0FFFFh +
mov ecx [ebp+SystemInfo.lpMaximumApplicationAddress] +
and eax 0FFFF0000h +
mov dword_104114C eax +
lea esi [ecx-80000000h] +
cmp esi edx +
pop esi  +
jb loc_1011694  +
mov ecx 81000000h +
mov dword_1041538 ecx +
xor ecx ecx +
mov word ptr dword_1041538 cx +
mov ecx dword_1041538 +
sub ecx eax +
shr ecx 10h +
mov dword_1041150 ecx +
xor eax eax +
test eax eax +
jl locret_10117E5  +
mov ecx dword_1041560 +
jmp loc_10116E6  +
imul ecx ecx +
add ecx offset unk_1041440 +
push ecx  +
call sub_102E01B  +
test eax eax +
jl loc_10116EB  +
mov ecx dword_1041560 +
inc ecx  +
mov dword_1041560 ecx +
cmp ecx 2 +
jb loc_10116C6  +
test eax eax +
mov [ebp+var_4] eax +
jl locret_10117E5  +
mov eax ds:dword_101A35C +
test eax eax +
jz loc_1011785  +
lea eax [ebp+flOldProtect] +
push eax  +
mov ecx ds:dword_101A35C +
mov eax ds:dword_102543C +
imul eax ecx +
push 40h  +
push eax  +
push offset Address  +
call ds:VirtualProtect  +
test eax eax +
jnz loc_1011746  +
call ds:__imp_GetLastError  +
test eax eax +
jnz loc_1011738  +
mov eax 54Fh +
test eax eax +
jle loc_1011787  +
and eax 0FFFFh +
or eax 80070000h +
jmp loc_1011787  +
xor edx edx +
mov eax ds:dword_101A35C +
test eax eax +
jbe loc_1011785  +
mov ecx ds:dword_102543C +
mov eax ds:dword_102543C +
imul eax edx +
test ecx ecx +
lea eax Address[eax] +
jz loc_1011770  +
mov byte ptr [eax] 0 +
inc eax  +
dec ecx  +
jnz loc_1011769  +
mov eax ds:dword_101A35C +
mov dword_1042454[edx*4] 0E941h +
inc edx  +
cmp edx eax +
jb loc_1011751  +
xor eax eax +
test eax eax +
jl locret_10117E5  +
mov ecx dword_10423C8 +
test ecx ecx +
jz loc_10117CE  +
mov eax dword_10423C0 +
lea edx dword_10423F0[eax] +
add eax dword_10423C4 +
mov dword_10423D8 edx +
lea edx dword_10423F0[eax] +
mov dword_10423D0 offset dword_10423F0 +
mov dword_10423E0 edx +
lea eax dword_10423F0[eax+ecx] +
mov dword_10423E8 eax +
and [ebp+var_4] 0 +
push edi  +
lea edi [ebp+var_4] +
mov eax 0DCCA73F3h +
mov eax [ebp+var_4] +
test eax eax +
pop edi  +
jl locret_10117E5  +
xor eax eax +
leave   +
retn   +
***
mov ebx ds:dword_102543C +
imul ebx edx +
lea ebx Address[ebx] +
jmp loc_10118E5  +
***
mov ebx eax +
jmp loc_1011920  +
***
xor ebx ebx +
jmp loc_1011B90  +
***
mov eax ebx +
inc ebx  +
mov [ebp-0D0h] ebx +
mov ebx 0F000h +
test [esi+eax*2+8] bx +
jz loc_1011B70  +
movzx eax word ptr [esi+eax*2+8] +
and eax ecx +
mov ecx [esi] +
lea eax __ImageBase[eax+ecx] +
mov [ebp-5Ch] eax +
xor ecx ecx +
sub [ebp-5Ch] edx +
mov [ebp-6Ch] eax +
jz loc_1011C3D  +
movzx ebx byte ptr [ecx+edx] +
sub ebx edi +
add [ebp-64h] ebx +
add ebx [ebp-60h] +
mov eax ebx +
imul eax eax +
rol eax 0Ah +
ror ebx 0Ah +
xor eax ebx +
imul eax eax +
ror eax 2 +
add [ebp-64h] eax +
inc ecx  +
mov [ebp-60h] eax +
cmp ecx [ebp-5Ch] +
jb loc_1011C0C  +
mov ebx [ebp-6Ch] +
mov eax [ebx] +
sub eax [ebp-0F4h] +
mov [ebp-0F0h] eax +
xor ecx ecx +
movzx edx byte ptr [ebp+ecx-0F0h] +
sub edx edi +
add [ebp-64h] edx +
add edx [ebp-60h] +
mov eax edx +
imul eax eax +
rol eax 0Ah +
ror edx 0Ah +
xor eax edx +
imul eax eax +
ror eax 2 +
add [ebp-64h] eax +
mov [ebp-60h] eax +
inc ecx  +
cmp ecx 4 +
jb loc_1011C50  +
mov ecx 0FFFh +
lea edx [ebx+4] +
jmp loc_1011B70  +
***
mov eax [ebp-74h] +
mov esi [ebp-6Ch] +
lea edi [esi+eax] +
lea ecx [ebp+edx-44h] +
mov al [ecx+edi] +
xor al [ecx] +
xor [ebp-55h] al +
mov [ecx+esi] al +
inc edx  +
cmp edx ebx +
jb loc_1012059  +
sub [ebp-0C8h] ebx +
add [ebp-80h] ebx +
add esi ebx +
add [ebp-84h] ebx +
mov [ebp-6Ch] esi +
jmp loc_1011D7B  +
***
mov esi ds:DeleteCriticalSection +
jmp loc_1012288  +
dec dword_1041560  +
mov eax dword_1041560 +
imul eax eax +
add eax offset unk_1041440 +
push eax  +
call esi  +
cmp dword_1041560 0 +
ja loc_1012272  +
cmp dword_10424F8 0 +
jz loc_10122A1  +
push offset CriticalSection  +
call esi  +
and dword_10424F8 0 +
pop esi  +
retn   +
***
and dword ptr [ebp-24h] 0 +
jmp loc_1012415  +
***
mov edx [ebp-24h] +
mov ebx 0F000h +
inc dword ptr [ebp-24h]  +
test [eax+edx*2+8] bx +
jz loc_1012402  +
mov ebx [eax] +
movzx edx word ptr [eax+edx*2+8] +
and edx 0FFFh +
lea edx __ImageBase[edx+ebx] +
xor ebx ebx +
mov [ebp-4] edx +
sub [ebp-4] ecx +
mov [ebp-8] edx +
jz loc_10124CF  +
movzx esi byte ptr [ebx+ecx] +
sub esi 5092316Ah +
add [ebp-20h] esi +
add esi [ebp-1Ch] +
mov edx esi +
imul edx edx +
rol edx 6 +
ror esi 6 +
xor edx esi +
imul edx edx +
ror edx 1Ah +
imul edx edx +
ror edx 1Ah +
add [ebp-20h] edx +
inc ebx  +
mov [ebp-1Ch] edx +
cmp ebx [ebp-4] +
jb loc_101248E  +
mov esi [ebp-2Ch] +
mov ecx [ebp-8] +
mov ecx [ecx] +
sub ecx [ebp-10h] +
xor ebx ebx +
mov [ebp-14h] ecx +
movzx edx byte ptr [ebp+ebx-14h] +
sub edx 5092316Ah +
add [ebp-20h] edx +
add edx [ebp-1Ch] +
mov ecx edx +
imul ecx ecx +
rol ecx 6 +
ror edx 6 +
xor ecx edx +
imul ecx ecx +
ror ecx 1Ah +
imul ecx ecx +
ror ecx 1Ah +
add [ebp-20h] ecx +
mov [ebp-1Ch] ecx +
inc ebx  +
cmp ebx 4 +
jb loc_10124DC  +
mov ecx [ebp-8] +
add ecx 4 +
jmp loc_1012402  +
***
mov edi edi +
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
jmp loc_101279F  +
push [ebp+arg_0]  +
call _callnewh  +
pop ecx  +
test eax eax +
jz loc_10127AE  +
push [ebp+arg_0]  +
call malloc  +
mov esi eax +
pop ecx  +
test esi esi +
jz loc_1012792  +
mov eax esi +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp sub_101278A  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp free  +
***
push ebp  +
mov ebp esp +
pop ebp  +
jmp free  +
***
and dword ptr [ebp-28h] 0 +
jmp loc_101294D  +
***
mov edx 0F000h +
mov eax [ebp-28h] +
inc dword ptr [ebp-28h]  +
test [esi+eax*2+8] dx +
jz loc_1012937  +
mov edx [esi] +
movzx eax word ptr [esi+eax*2+8] +
and dword ptr [ebp-4] 0 +
and eax 0FFFh +
lea eax __ImageBase[eax+edx] +
mov [ebp-8] eax +
sub [ebp-8] edi +
mov [ebp-10h] eax +
jz loc_1012A1A  +
mov eax [ebp-4] +
movzx eax byte ptr [eax+edi] +
mov edx 0E4B5F4FCh +
sub eax ebx +
add [ebp-24h] eax +
add eax [ebp-20h] +
mul  edx +
lea edx [eax+edx*2-7FFFFFFFh] +
sar eax 1Fh +
and eax ecx +
sub edx eax +
mov eax edx +
sar eax 1Fh +
and eax ecx +
add eax edx +
mov edx eax +
imul edx edx +
rol edx 0Ch +
ror eax 0Ch +
xor edx eax +
mov eax edx +
add [ebp-24h] eax +
inc dword ptr [ebp-4]  +
mov eax [ebp-4] +
mov [ebp-20h] edx +
cmp eax [ebp-8] +
jb loc_10129C7  +
mov eax [ebp-10h] +
mov eax [eax] +
sub eax [ebp-18h] +
mov [ebp-8] eax +
xor edi edi +
movzx eax byte ptr [ebp+edi-8] +
sub eax ebx +
mov edx 0E4B5F4FCh +
add [ebp-24h] eax +
add eax [ebp-20h] +
mul  edx +
lea edx [eax+edx*2-7FFFFFFFh] +
sar eax 1Fh +
and eax ecx +
sub edx eax +
mov eax edx +
sar eax 1Fh +
and eax ecx +
add eax edx +
mov edx eax +
imul edx edx +
rol edx 0Ch +
ror eax 0Ch +
xor edx eax +
add [ebp-24h] edx +
inc edi  +
cmp edi 4 +
mov [ebp-20h] edx +
jb loc_1012A24  +
mov edi [ebp-10h] +
add edi 4 +
jmp loc_1012937  +
***
mov edi edi +
mov eax dword_10410D8 +
push offset dword_10410C0  +
push dword_10410D4  +
mov dword_10410C0 eax +
push offset dword_10410A8  +
push offset dword_10410AC  +
push offset dword_10410A0  +
call ds:__getmainargs  +
add esp 14h +
mov dword_10410B8 eax +
retn   +
***
mov eax [ebp-14h] +
mov esp [ebp-18h] +
mov eax [ebp-20h] +
mov dword_10410C4 eax +
xor ebx ebx +
cmp dword_10410B0 ebx +
jnz loc_1012D93  +
push eax  +
call ds:_exit  +
***
mov eax 5A4Dh +
call sub_1013B29  +
mov edi edi +
xor eax eax +
mov edi edi +
mov edi edi +
call sub_1020EF3  +
xor ebx ebx +
jmp loc_10132AD  +
***
mov eax ebx +
inc ebx  +
mov [ebp-0D0h] ebx +
mov ebx 0F000h +
test [esi+eax*2+8] bx +
jz loc_101328D  +
movzx eax word ptr [esi+eax*2+8] +
and eax ecx +
mov ecx [esi] +
lea eax __ImageBase[eax+ecx] +
xor ecx ecx +
mov [ebp-5Ch] eax +
sub [ebp-5Ch] edx +
mov [ebp-6Ch] eax +
jz loc_101335A  +
movzx ebx byte ptr [ecx+edx] +
sub ebx edi +
add [ebp-64h] ebx +
add ebx [ebp-60h] +
mov eax ebx +
imul eax eax +
rol eax 0Ah +
ror ebx 0Ah +
xor eax ebx +
imul eax eax +
ror eax 2 +
add [ebp-64h] eax +
mov [ebp-60h] eax +
inc ecx  +
cmp ecx [ebp-5Ch] +
jb loc_1013329  +
mov ebx [ebp-6Ch] +
mov eax [ebx] +
sub eax [ebp-0F0h] +
xor ecx ecx +
mov [ebp-0F4h] eax +
movzx edx byte ptr [ebp+ecx-0F4h] +
sub edx edi +
add [ebp-64h] edx +
add edx [ebp-60h] +
mov eax edx +
imul eax eax +
rol eax 0Ah +
ror edx 0Ah +
xor eax edx +
imul eax eax +
ror eax 2 +
add [ebp-64h] eax +
inc ecx  +
cmp ecx 4 +
mov [ebp-60h] eax +
jb loc_101336D  +
lea edx [ebx+4] +
mov ecx 0FFFh +
jmp loc_101328D  +
***
mov eax [ebp-74h] +
mov esi [ebp-6Ch] +
lea edi [esi+eax] +
lea ecx [ebp+edx-44h] +
mov al [ecx+edi] +
xor al [ecx] +
xor [ebp-55h] al +
mov [ecx+esi] al +
inc edx  +
cmp edx ebx +
jb loc_1013768  +
sub [ebp-0C4h] ebx +
add [ebp-7Ch] ebx +
add esi ebx +
add [ebp-0CCh] ebx +
mov [ebp-6Ch] esi +
jmp loc_101349B  +
***
call ds:_controlfp  +
sub esp 328h +
mov edi edi +
mov dword_1041208 eax +
mov dword_1041204 ecx +
mov dword_1041200 edx +
mov dword_10411FC ebx +
mov dword_10411F8 esi +
mov dword_10411F4 edi +
mov word_1041220 ss +
mov word_1041214 cs +
mov word_10411F0 ds +
mov word_10411EC es +
mov word_10411E8 fs +
mov word_10411E4 gs +
pushf   +
pop dword_1041218  +
mov eax [ebp+0] +
mov dword_104120C eax +
mov eax [ebp+4] +
mov dword_1041210 eax +
lea eax [ebp+arg_0] +
mov dword_104121C eax +
mov eax [ebp+var_320] +
mov dword_1041158 10001h +
mov eax dword_1041210 +
mov dword_104148C eax +
mov dword_1041480 0C0000409h +
mov dword_1041484 1 +
mov eax dword_1041530 +
mov [ebp+var_328] eax +
mov eax dword_1041148 +
mov [ebp+var_324] eax +
push 0  +
call ds:SetUnhandledExceptionFilter  +
push offset ExceptionInfo  +
call ds:UnhandledExceptionFilter  +
push 0C0000409h  +
call ds:GetCurrentProcess  +
push eax  +
call ds:TerminateProcess  +
leave   +
retn   +
***
call sub_1020EF3  +
mov edi edi +
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov eax dword_1041530 +
and [ebp+SystemTimeAsFileTime.dwLowDateTime] 0 +
and [ebp+SystemTimeAsFileTime.dwHighDateTime] 0 +
push ebx  +
push edi  +
mov edi 0BB40E64Eh +
mov ebx 0FFFF0000h +
cmp eax edi +
jz loc_1013B5B  +
test eax ebx +
jz loc_1013B5B  +
not eax  +
mov dword_1041148 eax +
jmp loc_1013BB6  +
push esi  +
lea eax [ebp+SystemTimeAsFileTime] +
push eax  +
call ds:GetSystemTimeAsFileTime  +
mov esi [ebp+SystemTimeAsFileTime.dwHighDateTime] +
xor esi [ebp+SystemTimeAsFileTime.dwLowDateTime] +
call ds:GetCurrentProcessId  +
xor esi eax +
call ds:GetCurrentThreadId  +
xor esi eax +
call ds:GetTickCount  +
xor esi eax +
lea eax [ebp+PerformanceCount] +
push eax  +
call ds:QueryPerformanceCounter  +
mov eax dword ptr [ebp+PerformanceCount+4] +
xor eax dword ptr [ebp+PerformanceCount] +
xor esi eax +
cmp esi edi +
jz loc_1013BA2  +
test dword_1041530 ebx +
jnz loc_1013BA7  +
mov esi 0BB40E64Fh +
mov dword_1041530 esi +
not esi  +
mov dword_1041148 esi +
pop esi  +
pop edi  +
pop ebx  +
leave   +
retn   +
***
mov eax offset __AddMachineCertToLicenseStore +
jmp $+2  +
push ecx  +
push edx  +
push eax  +
push offset msdrm_dll_import_table  +
call sub_1012660  +
pop edx  +
pop ecx  +
jmp eax  +
***
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1Ch +
push ebx  +
push esi  +
push edi  +
mov eax ecx +
mov [ebp+var_1C] eax +
mov ecx [ebp+arg_4] +
mov edx ecx +
mov edi [ebp+arg_0] +
sub edx edi +
lea ebx [ecx-61E692E4h] +
mov esi edx +
mov [ebp+var_4] esi +
mov [ebp+var_18] esi +
and [ebp+var_C] 0 +
mov esi edi +
sub esi ecx +
shl ecx 4 +
and [ebp+arg_4] 0 +
shr edi 4 +
add edi ecx +
xor esi ebx +
mov [ebp+var_14] ebx +
mov ecx edi +
xor ecx edx +
xor ecx ebx +
mov [ebp+var_8] ecx +
movzx ebx bl +
movzx ecx cl +
xor ebx 0D6h +
mov ebx [ebx+eax] +
mov ecx [ebx+ecx-4Bh] +
mov [ebp+arg_0] ecx +
mov ecx edx +
xor esi 1C627E75h +
xor edx esi +
xor edx [ebp+var_4] +
add ecx 7E51553Fh +
mov [ebp+var_C] edx +
add edx 0C3B45557h +
mov ecx esi +
xor ecx 11F77830h +
push edx  +
xor ebx ebx +
mov edx offset dword_1004954 +
or ebx ecx +
call sub_1015D2A  +
mov ecx [ebp+arg_0] +
sub ecx ebx +
neg ecx  +
sbb cl cl +
inc cl  +
cmp ebx [ebp+arg_0] +
mov eax edi +
setnbe byte ptr [ebp+arg_4+3]  +
xor eax [ebp+var_8] +
xor edi [ebp+var_C] +
xor eax esi +
xor edi [ebp+var_8] +
mov edx eax +
xor edx [ebp+var_C] +
xor edx [ebp+var_14] +
xor edx 39A98D1Bh +
mov ebx edx +
xor ebx edi +
xor ebx esi +
xor [ebp+var_4] ebx +
cmp byte ptr [ebp+arg_4+3] 1 +
jnz loc_101916F  +
lea esi [eax-22D20511h] +
xor eax eax +
xor edi 38F6E931h +
xor edx edx +
jmp loc_1019189  +
xor edi eax +
xor edi [ebp+var_18] +
xor esi esi +
xor edi [ebp+var_14] +
xor edx 0AEC4F839h +
add edi 4515CAEBh +
mov eax edi +
xor edi edi +
or esi edx +
or eax edi +
mov edi [ebp+var_1C] +
test cl cl +
mov ecx [ebp+var_4] +
setnz dl  +
movzx ebx cl +
xor ebx 0E4h +
cmp byte ptr [ebp+arg_4+3] 0 +
mov [ebx+edi] dl +
setnz dl  +
shr ecx 8 +
movzx ecx cl +
mov [ecx+edi+2Eh] dl +
pop edi  +
mov edx esi +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov edx [ebp+arg_4] +
push ebx  +
push esi  +
mov esi ecx +
mov ecx [ebp+arg_0] +
push edi  +
mov edi edx +
mov eax ecx +
shl eax 4 +
sub ecx edx +
shr edi 4 +
lea ebx [eax+edi] +
add edx 72334749h +
xor ecx 4B35CB1Fh +
movzx eax bl +
xor edx ecx +
xor eax 0CFh +
mov edi [esi+eax*8] +
mov eax [esi+eax*8+4] +
xor edx ebx +
xor edx 0ED7EE9B8h +
push edx  +
mov [ebp+var_4] eax +
mov edx offset dword_1004960 +
mov eax esi +
mov [ebp+var_8] edi +
mov [ebp+arg_4] ecx +
call sub_1015D2A  +
mov eax ebx +
shr eax 10h +
xor al 33h +
movzx eax al +
cdq   +
mov ecx eax +
mov eax ebx +
shr eax 8 +
xor al 15h +
movzx eax al +
mov edi edx +
cdq   +
sub eax ecx +
sbb edx edi +
add eax [ebp+var_8] +
mov ecx ebx +
adc edx [ebp+var_4] +
mov [esi+1B8h] eax +
mov [esi+1BCh] edx +
mov edx [ebp+arg_4] +
xor ecx ebx +
xor eax eax +
xor ecx 0E0919F2Ah +
xor esi esi +
xor edx 7ECD9A8Ah +
pop edi  +
or eax ecx +
or edx esi +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
and dword ptr [ebp-28h] 0 +
jmp loc_10193E0  +
***
mov ebx 0F000h +
mov esi [ebp-28h] +
inc dword ptr [ebp-28h]  +
test [eax+esi*2+8] bx +
jz loc_10193CD  +
mov ebx [eax] +
movzx esi word ptr [eax+esi*2+8] +
and esi 0FFFh +
lea ebx __ImageBase[esi+ebx] +
xor esi esi +
mov [ebp-4] ebx +
sub [ebp-4] ecx +
mov [ebp-0Ch] ebx +
mov [ebp-8] esi +
jz loc_1019499  +
movzx esi byte ptr [esi+ecx] +
sub esi 2424F18h +
add [ebp-24h] esi +
add esi [ebp-20h] +
imul esi esi +
ror esi 1Bh +
mov ebx esi +
imul ebx ebx +
rol ebx 8 +
ror esi 8 +
xor ebx esi +
mov esi ebx +
add [ebp-24h] esi +
mov esi [ebp-8] +
inc esi  +
mov [ebp-20h] ebx +
mov [ebp-8] esi +
cmp esi [ebp-4] +
jb loc_101945C  +
mov ecx [ebp-0Ch] +
mov ecx [ecx] +
sub ecx [ebp-14h] +
xor ebx ebx +
mov [ebp-18h] ecx +
movzx ecx byte ptr [ebp+ebx-18h] +
sub ecx 2424F18h +
add [ebp-24h] ecx +
add ecx [ebp-20h] +
imul ecx ecx +
ror ecx 1Bh +
mov esi ecx +
imul esi esi +
rol esi 8 +
ror ecx 8 +
xor esi ecx +
add [ebp-24h] esi +
mov [ebp-20h] esi +
inc ebx  +
cmp ebx 4 +
jb loc_10194A6  +
mov ecx [ebp-0Ch] +
add ecx 4 +
jmp loc_10193CD  +
***
mov edi edi +
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push ebx  +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
mov edi ecx +
mov ecx [ebp+arg_0] +
lea ebx [ecx+esi] +
lea eax [ebx+490B589Eh] +
mov [ebp+var_8] eax +
movzx eax al +
xor eax 42h +
mov edx [edi+eax*8] +
mov eax [edi+eax*8+4] +
mov [ebp+var_10] eax +
lea eax [ecx-57DC1857h] +
mov [ebp+var_4] eax +
add eax 0F7634D45h +
mov [ebp+var_14] edx +
push eax  +
mov edx offset dword_1004980 +
mov eax edi +
call sub_1015D2A  +
add esi 0DD08913Ch +
xor esi [ebp+var_8] +
lea ecx [ebx+58B19E63h] +
xor ecx esi +
xor ecx [ebp+var_4] +
mov eax ecx +
shr eax 8 +
add al 38h +
movzx eax al +
cdq   +
mov ebx eax +
mov eax edx +
mov [ebp+var_C] eax +
xor cl 14h +
movzx eax cl +
cdq   +
sub eax ebx +
mov ebx [ebp+var_C] +
sbb edx ebx +
add eax [ebp+var_14] +
adc edx [ebp+var_10] +
mov [edi+1B8h] eax +
mov eax [ebp+arg_0] +
sub eax [ebp+arg_4] +
mov [edi+1BCh] edx +
xor eax [ebp+var_4] +
xor ecx ecx +
xor eax [ebp+var_8] +
xor esi 0C9B80DAh +
xor eax 1F5983D8h +
xor edx edx +
pop edi  +
or eax ecx +
or edx esi +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push ebx  +
mov ebx [ebp+arg_0] +
mov eax ecx +
push esi  +
mov esi [ebp+arg_4] +
lea edx [ebx+esi+531122BFh] +
movzx ecx dl +
shr edx 8 +
push edi  +
movzx edi dl +
xor ecx 0F8h +
xor edx edx +
sub edi 0C3h +
add edi [ecx+eax] +
mov ecx [ecx+eax+4] +
adc ecx edx +
mov [ebp+arg_4] ecx +
lea ecx [ebx-2DCC90D2h] +
mov [ebp+var_4] ecx +
add ecx 0F87E8EE8h +
push ecx  +
mov edx offset dword_10049FC +
mov [ebp+var_C] eax +
call sub_1015D2A  +
and [ebp+arg_4] 0 +
mov edi [edi] +
and [ebp+arg_4] 0 +
mov edx ebx +
shl edx 4 +
mov eax esi +
shr eax 4 +
add edx eax +
lea eax [ebx+esi+531122BFh] +
xor edx eax +
lea eax [edx-19DC569h] +
cmp eax edi +
setnbe byte ptr [ebp+arg_4+3]  +
mov ecx edi +
sub ecx eax +
neg ecx  +
sbb cl cl +
lea edi [esi-119E25FCh] +
xor edi [ebp+var_4] +
lea eax [ebx+esi+531122BFh] +
xor edi eax +
lea eax [ebx+esi-7FF54ABFh] +
xor eax edx +
xor eax [ebp+var_4] +
inc cl  +
mov [ebp+var_4] eax +
mov eax ebx +
xor eax edi +
xor eax edx +
xor eax esi +
mov [ebp+var_8] eax +
xor eax [ebp+var_4] +
lea edx [ebx+esi+531122BFh] +
xor eax edx +
xor eax 0D136EF8Eh +
cmp byte ptr [ebp+arg_4+3] 1 +
jnz loc_101A304  +
mov edx [ebp+var_4] +
xor ebx ebx +
add edx 25245ED2h +
xor edi 0B74F5589h +
xor esi esi +
or ebx edx +
or edi esi +
jmp loc_101A328  +
mov edx [ebp+var_8] +
shr ebx 4 +
shl esi 4 +
add ebx esi +
xor ebx [ebp+var_4] +
xor esi esi +
xor ebx edi +
add ebx 6B1C4236h +
xor edi edi +
add edx 5BEEC7CCh +
or ebx esi +
or edi edx +
mov esi [ebp+var_C] +
movzx edx al +
test cl cl +
setnz cl  +
cmp byte ptr [ebp+arg_4+3] 0 +
mov [edx+esi+0C3h] cl +
setnz cl  +
shr eax 8 +
movzx eax al +
xor eax 0F1h +
mov edx edi +
pop edi  +
mov [esi+eax] cl +
pop esi  +
mov eax ebx +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
push edi  +
mov edi [ebp+arg_4] +
xor ebx edi +
movzx eax bl +
mov esi ecx +
xor eax 28h +
mov ecx [esi+eax*8] +
mov eax [esi+eax*8+4] +
mov [ebp+var_C] eax +
lea eax [ebx-5B65B200h] +
push eax  +
mov edx offset dword_1004B48 +
mov eax esi +
mov [ebp+var_4] ebx +
mov [ebp+var_10] ecx +
call sub_1015D2A  +
mov eax [ebp+arg_0] +
shl eax 4 +
shr edi 4 +
add edi eax +
mov ecx edi +
xor ecx ebx +
mov eax ecx +
shr eax 8 +
xor al 0CBh +
movzx eax al +
mov [ebp+var_8] ecx +
cdq   +
movzx ecx cl +
xor ebx ebx +
sub ecx 32h +
sub ecx eax +
mov eax [ebp+arg_4] +
sbb ebx edx +
add ecx [ebp+var_10] +
adc ebx [ebp+var_C] +
sub eax [ebp+arg_0] +
xor edi [ebp+var_4] +
xor eax [ebp+var_8] +
xor edi [ebp+var_4] +
xor eax [ebp+var_4] +
mov [esi+1B8h] ecx +
xor eax 8012BE4Ch +
xor ecx ecx +
xor edi 39F2B3FCh +
xor edx edx +
or eax ecx +
or edx edi +
pop edi  +
mov [esi+1BCh] ebx +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1Ch +
mov edx [ebp+arg_0] +
push ebx  +
push esi  +
mov esi ecx +
push edi  +
mov edi [ebp+arg_4] +
lea eax [edx+edi] +
lea ecx [eax+5888B4D7h] +
mov [ebp+var_8] eax +
movzx eax cl +
mov ebx [eax+esi-33h] +
mov eax [eax+esi-2Fh] +
mov [ebp+var_4] esi +
mov [ebp+var_14] ebx +
mov [ebp+var_10] eax +
mov eax edx +
and [ebp+var_18] 0 +
mov ebx ecx +
mov esi edi +
shl esi 4 +
shr ebx 8 +
shr eax 4 +
add eax esi +
movzx esi bl +
mov ebx [ebp+var_14] +
mov esi [esi+ebx-0BBh] +
lea ebx [edx+37B77929h] +
mov [ebp+arg_4] ecx +
xor ebx ecx +
shl edx 4 +
mov ecx edi +
shr ecx 4 +
add edx ecx +
xor edx eax +
xor edx [ebp+arg_4] +
xor esi eax +
mov [ebp+arg_4] edx +
xor edx 1647789Ah +
push edx  +
mov [ebp+var_C] eax +
mov eax [ebp+var_4] +
mov edx offset dword_1004C30 +
xor esi 0B6EEB481h +
call sub_1015D2A  +
mov ecx [ebp+var_14] +
mov edx [ebp+var_8] +
add edi 68B67B34h +
xor edi [ebp+arg_4] +
movzx eax bl +
add edx 0F273226Ah +
xor edi ebx +
mov [eax+ecx-61h] esi +
xor edx ebx +
xor edx [ebp+var_C] +
sub edi 3B09479Ch +
xor eax eax +
or eax edi +
pop edi  +
xor edx 310F1A15h +
xor ecx ecx +
pop esi  +
or edx ecx +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov eax [esp+8+arg_4] +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 44h +
mov eax [ebp+arg_4] +
push ebx  +
push esi  +
mov esi ecx +
lea ecx [eax+691BF154h] +
mov [ebp+arg_4] ecx +
push edi  +
mov edi [ebp+arg_0] +
lea ebx [edi+eax+7C2004AAh] +
mov ecx ebx +
shr ecx 8 +
movzx ecx cl +
mov edx [esi+ecx*8-358h] +
mov ecx [esi+ecx*8-354h] +
mov [ebp+var_28] ecx +
movzx ecx byte ptr [ebp+arg_4] +
mov [ebp+var_24] ecx +
mov [ebp+var_2C] edx +
mov edx ebx +
shr edx 18h +
mov edx [edx+esi+0Dh] +
mov ecx [edx+ecx+1] +
mov [ebp+var_44] ecx +
movzx ecx bl +
xor ecx 0DCh +
mov edx [esi+ecx*8] +
mov ecx [esi+ecx*8+4] +
mov [ebp+var_38] ecx +
mov ecx ebx +
shr ecx 10h +
movzx ecx cl +
xor ecx 12h +
mov [ebp+var_3C] edx +
mov edx [esi+ecx*8] +
mov ecx [esi+ecx*8+4] +
mov [ebp+var_30] ecx +
mov ecx edi +
xor ecx [ebp+arg_4] +
mov [ebp+var_34] edx +
xor ecx ebx +
xor ecx eax +
lea edx [eax+45058D89h] +
xor edx ebx +
mov [ebp+var_C] ecx +
xor edi [ebp+var_C] +
lea ecx [eax+522A70Fh] +
xor ecx edx +
xor ecx [ebp+arg_4] +
xor edi edx +
xor edi eax +
mov [ebp+var_8] ebx +
lea ebx [eax-22664FBCh] +
mov eax ecx +
shr eax 8 +
xor al 8Eh +
movzx eax al +
mov [ebp+var_4] edi +
xor ebx ecx +
xor ebx [ebp+var_C] +
mov [ebp+var_20] edx +
cdq   +
mov [ebp+var_14] eax +
movzx edi cl +
xor eax eax +
mov [ebp+var_1C] ecx +
mov ecx [ebp+var_14] +
sub edi 6Eh +
sub edi ecx +
sbb eax edx +
add edi [ebp+var_2C] +
mov [ebp+var_10] ebx +
adc eax [ebp+var_28] +
xor ecx ecx +
mov [ebp+var_14] eax +
mov eax [ebp+var_4] +
xor ebx 2063BA6Ch +
or ecx ebx +
xor eax 82C944F5h +
xor edx edx +
or eax edx +
mov [edi] ecx +
mov [edi+4] eax +
mov eax [ebp+var_4] +
xor eax [ebp+var_1C] +
mov edx (offset loc_1004D26+6) +
xor eax [ebp+var_8] +
xor eax 5276C8D3h +
mov [ebp+var_1C] eax +
add eax 0B14C2CE5h +
push eax  +
mov eax esi +
call sub_1015D2A  +
mov ecx [ebp+var_10] +
xor ecx [ebp+var_4] +
mov eax [ebp+arg_4] +
xor ecx eax +
xor ecx [ebp+var_8] +
shr eax 8 +
xor eax 0E644h +
movzx eax ax +
cdq   +
mov ebx eax +
add ebx [ebp+var_2C] +
movzx eax cl +
adc edx [ebp+var_28] +
mov [eax+esi+8Dh] ebx +
mov [eax+esi+91h] edx +
mov edx [ebp+var_44] +
mov eax ecx +
shr eax 8 +
movzx eax al +
xor eax 0B3h +
mov [esi+eax*8] edx +
xor edx edx +
mov [esi+eax*8+4] edx +
mov edx [ebp+var_34] +
mov eax ecx +
shr eax 10h +
movzx eax al +
xor eax 7 +
mov [esi+eax*8] edx +
mov edx [ebp+var_30] +
mov [esi+eax*8+4] edx +
mov eax [ebp+var_14] +
movzx edx byte ptr [ebp+var_10] +
shr ecx 18h +
xor ecx 7Bh +
mov [esi+ecx*8+4] eax +
mov [esi+ecx*8] edi +
mov ecx [ebp+var_20] +
movzx eax cl +
xor eax edx +
movzx edx byte ptr [ebp+var_1C] +
xor eax edx +
mov edx [ebp+var_3C] +
xor eax 0FDh +
xor eax [ebp+var_24] +
pop edi  +
mov [eax+esi] edx +
mov edx [ebp+var_38] +
mov [eax+esi+4] edx +
lea edx [ecx+39C57584h] +
mov ecx [ebp+var_C] +
xor eax eax +
add ecx 0A564A1ACh +
xor esi esi +
or eax ecx +
or edx esi +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
push ebp  +
mov edi edi +
mov ebp esp +
sub esp 154h +
mov eax dword_1041530 +
xor eax ebp +
mov [ebp-4] eax +
mov eax [ebp+8] +
mov ecx [ebp+0Ch] +
mov [ebp-0FCh] eax +
add eax 0Ch +
mov [ebp-0F8h] eax +
mov eax [eax] +
mov edx [eax] +
push ebx  +
shr edx 1 +
mov ebx [eax+8] +
push esi  +
mov esi [eax+4] +
mov [ebp-0C8h] ecx +
push edi  +
mov ecx 0FFFFFFFh +
mov edi offset __ImageBase +
and edx ecx +
add eax 0Ch +
mov [ebp-110h] edx +
and ebx ecx +
lea edx [eax-1] +
add ebx edi +
and esi ecx +
mov [ebp-0D4h] ebx +
mov [ebp-0C4h] esi +
mov [ebp-74h] eax +
cmp edx offset Address +
mov [ebp-78h] edx +
jb loc_1021949  +
mov edx ds:dword_102543C +
mov ecx ds:dword_101A35C +
imul ecx edx +
mov edx [ebp-78h] +
lea ecx Address[ecx] +
cmp edx ecx +
jnb loc_1021949  +
mov ecx ds:dword_102543C +
mov eax edx +
sub eax offset Address +
xor edx edx +
div  ecx +
mov ecx ds:dword_102543C +
mov edx [ebp-78h] +
imul ecx eax +
lea ecx Address[ecx] +
mov eax [ebp-74h] +
jmp loc_102194B  +
xor ecx ecx +
test ecx ecx +
jnz loc_1021957  +
and edx 0FFFF0000h +
mov ecx edx +
sub eax ecx +
add eax 0FFFFFFC0h +
jns loc_1021960  +
xor eax eax +
push 40h  +
pop edx  +
add eax ecx +
mov byte ptr [eax] 0 +
inc eax  +
dec edx  +
jnz loc_1021965  +
lea eax [esi+ebx] +
mov [ebp-74h] eax +
mov eax ds:dword_102543C +
mov [ebp-7Ch] ebx +
sub eax esi +
lea ebx [eax+1] +
sub [ebp-7Ch] edi +
mov [ebp-6Ch] ebx +
xor eax eax +
test ebx ebx +
jz loc_10219B5  +
mov edx dword_10410FC +
shr dword ptr [ebp-6Ch] 10h +
imul edx edx +
add edx 269EC3h +
mov dword_10410FC edx +
shr edx 10h +
shl eax 10h +
or eax edx +
cmp dword ptr [ebp-6Ch] 0 +
jnz loc_102198B  +
xor edx edx +
div  ebx +
push esi  +
lea ebx [edx+ecx] +
mov eax ebx +
push dword ptr [ebp-7Ch]  +
mov [ebp-0D0h] ebx +
mov eax 238D5A57h +
mov eax [ebp-74h] +
test esi esi +
pop ecx  +
pop ecx  +
mov ecx [eax] +
mov eax [eax+4] +
mov [ebp-100h] eax +
mov eax [ebp-0D4h] +
mov [ebp-78h] ebx +
mov ebx 0FFFFF000h +
mov [ebp-104h] ecx +
mov byte ptr [ebp-59h] 0 +
mov [ebp-0CCh] esi +
mov [ebp-0E0h] eax +
jz loc_10220BB  +
lea esi [ebp-104h] +
mov eax 0E3410850h +
mov ecx 0FFFFFFFh +
mov eax [ebp-100h] +
mov esi [ebp-104h] +
and dword ptr [ebp-68h] 0 +
and dword ptr [ebp-64h] 0 +
and eax ecx +
and esi ecx +
mov ecx ds:off_1004F44 +
add esi edi +
mov [ebp-6Ch] eax +
mov eax edi +
sub eax ecx +
mov [ebp-108h] eax +
jnz loc_1021A91  +
xor edi edi +
cmp [ebp-6Ch] edi +
jbe loc_1021CB3  +
mov ecx 637CE67Ch +
movzx edx byte ptr [edi+esi] +
add edx ecx +
add [ebp-68h] edx +
add edx [ebp-64h] +
mov eax edx +
imul eax eax +
rol eax 0Ch +
ror edx 0Ch +
xor eax edx +
mov edx ecx +
mul  edx +
add eax edx +
mov edx ecx +
mul  edx +
add eax edx +
add [ebp-68h] eax +
mov [ebp-64h] eax +
inc edi  +
cmp edi [ebp-6Ch] +
jb loc_1021A58  +
jmp loc_1021CB3  +
mov edx ds:dword_100003C +
mov eax [ebp-6Ch] +
lea edx dword_10000A0[edx] +
add eax esi +
mov ecx esi +
mov [ebp-0DCh] eax +
mov eax [edx] +
add eax edi +
sub ecx edi +
mov edx [edx+4] +
mov edi ecx +
and edi ebx +
mov [ebp-70h] edi +
mov edi ecx +
sub edi [ebp-70h] +
mov [ebp-0D8h] edi +
add edx eax +
mov edi [ebp-6Ch] +
add ecx edi +
mov edi ecx +
and edi ebx +
mov ebx eax +
mov [ebp-0F4h] edi +
sub ecx edi +
cmp eax edx +
mov [ebp-0F0h] ecx +
mov [ebp-0ECh] edx +
jz loc_1021AFC  +
mov eax [ebp-70h] +
cmp [ebx] eax +
jnb loc_1021AFC  +
add ebx [ebx+4] +
cmp ebx [ebp-0ECh] +
jnz loc_1021AEA  +
and dword ptr [ebp-0E4h] 0 +
cmp ebx [ebp-0ECh] +
mov edx 0FFFh +
jz loc_1021B41  +
mov eax [ebp-70h] +
cmp [ebx] eax +
jnz loc_1021B41  +
mov ecx [ebx+4] +
sub ecx 8 +
shr ecx 1 +
jz loc_1021B41  +
lea eax [ebx+8] +
movzx edi word ptr [eax] +
and edi edx +
cmp edi [ebp-0D8h] +
jnb loc_1021B41  +
inc dword ptr [ebp-0E4h]  +
inc eax  +
inc eax  +
cmp [ebp-0E4h] ecx +
jnz loc_1021B24  +
mov ecx 637CE67Ch +
cmp ebx [ebp-0ECh] +
jz loc_1021C74  +
mov eax [ebx] +
cmp eax [ebp-0F4h] +
ja loc_1021C74  +
mov edi [ebp-0E4h] +
mov eax [ebx+4] +
add eax 0FFFFFFF8h +
shr eax 1 +
cmp edi eax +
jnz loc_1021B93  +
add ebx [ebx+4] +
cmp ebx [ebp-0ECh] +
jz loc_1021C74  +
mov eax [ebp-0F4h] +
cmp [ebx] eax +
ja loc_1021C74  +
xor edi edi +
jmp loc_1021B66  +
***
mov eax [ebp-0F4h] +
cmp [ebx] eax +
jnz loc_1021BB0  +
movzx eax word ptr [ebx+edi*2+8] +
and eax edx +
cmp eax [ebp-0F0h] +
jnb loc_1021C74  +
mov eax edi +
inc edi  +
mov [ebp-0E4h] edi +
mov edi 0F000h +
test [ebx+eax*2+8] di +
jz loc_1021B46  +
movzx eax word ptr [ebx+eax*2+8] +
and eax edx +
xor edi edi +
mov edx [ebx] +
lea eax __ImageBase[eax+edx] +
mov [ebp-70h] eax +
sub [ebp-70h] esi +
mov [ebp-0D8h] eax +
jz loc_1021C19  +
movzx edx byte ptr [edi+esi] +
add edx ecx +
add [ebp-68h] edx +
add edx [ebp-64h] +
mov eax edx +
imul eax eax +
rol eax 0Ch +
ror edx 0Ch +
xor eax edx +
mov edx ecx +
mul  edx +
add eax edx +
mov edx ecx +
mul  edx +
add eax edx +
add [ebp-68h] eax +
mov [ebp-64h] eax +
inc edi  +
cmp edi [ebp-70h] +
jb loc_1021BE5  +
mov esi [ebp-0D8h] +
mov eax [esi] +
sub eax [ebp-108h] +
xor edi edi +
mov [ebp-10Ch] eax +
movzx edx byte ptr [ebp+edi-10Ch] +
add edx ecx +
add [ebp-68h] edx +
add edx [ebp-64h] +
mov eax edx +
imul eax eax +
rol eax 0Ch +
ror edx 0Ch +
xor eax edx +
mov edx ecx +
mul  edx +
add eax edx +
mov edx ecx +
mul  edx +
add eax edx +
add [ebp-68h] eax +
mov [ebp-64h] eax +
inc edi  +
cmp edi 4 +
jb loc_1021C2F  +
add esi 4 +
mov edx 0FFFh +
jmp loc_1021B46  +
***
mov ebx [ebp-0DCh] +
xor edi edi +
sub ebx esi +
jz loc_1021CB3  +
movzx edx byte ptr [edi+esi] +
add edx ecx +
add [ebp-68h] edx +
add edx [ebp-64h] +
mov eax edx +
imul eax eax +
rol eax 0Ch +
ror edx 0Ch +
xor eax edx +
mov edx ecx +
mul  edx +
add eax edx +
mov edx ecx +
mul  edx +
add eax edx +
add [ebp-68h] eax +
mov [ebp-64h] eax +
inc edi  +
cmp edi ebx +
jb loc_1021C80  +
xor edi edi +
xor eax eax +
mov ecx eax +
and ecx 7 +
mov cl [ebp+ecx-68h] +
mov [ebp+eax-58h] cl +
inc eax  +
cmp eax 10h +
jb loc_1021CB7  +
mov eax 0BCC2F3A3h +
mov esi [ebp-4Ch] +
mov eax [ebp-58h] +
mov ecx [ebp-54h] +
mov edx [ebp-50h] +
mov [ebp-14Ch] eax +
mov [ebp-124h] eax +
mov eax ds:dword_101BE7C +
mov [ebp-150h] eax +
mov eax ds:dword_101BE80 +
mov [ebp-13Ch] eax +
mov eax ds:dword_101BE84 +
mov [ebp-128h] eax +
mov eax ds:dword_101BE88 +
mov [ebp-114h] eax +
mov eax [ebp-0D0h] +
mov [ebp-148h] ecx +
mov [ebp-120h] ecx +
lea ecx [ebp-48h] +
sub eax ecx +
mov [ebp-6Ch] eax +
mov eax [ebp-0D4h] +
sub eax [ebp-0D0h] +
mov [ebp-144h] edx +
mov [ebp-140h] esi +
mov [ebp-11Ch] edx +
mov [ebp-118h] esi +
mov [ebp-138h] edi +
mov [ebp-134h] edi +
mov [ebp-130h] edi +
mov [ebp-12Ch] edi +
mov [ebp-0DCh] eax +
push 10h  +
lea esi [ebp-150h] +
pop ecx  +
lea edi [ebp-0C0h] +
movs   +
mov ecx [ebp-0A0h] +
mov edx [ebp-90h] +
mov esi [ebp-0C0h] +
mov eax [ebp-0B0h] +
mov dword ptr [ebp-70h] 2 +
mov ebx [ebp-0BCh] +
lea edi [esi+edx] +
rol edi 7 +
xor eax edi +
lea edi [esi+eax] +
rol edi 9 +
xor ecx edi +
lea edi [ecx+eax] +
rol edi 0Dh +
xor edx edi +
lea edi [ecx+edx] +
ror edi 0Eh +
xor esi edi +
mov edi [ebp-0ACh] +
add ebx edi +
rol ebx 7 +
xor [ebp-9Ch] ebx +
mov ebx [ebp-9Ch] +
add edi ebx +
rol edi 9 +
xor [ebp-8Ch] edi +
mov edi ebx +
mov ebx [ebp-8Ch] +
add ebx edi +
mov edi [ebp-8Ch] +
rol ebx 0Dh +
xor [ebp-0BCh] ebx +
mov ebx [ebp-0BCh] +
add edi ebx +
mov ebx [ebp-98h] +
ror edi 0Eh +
xor [ebp-0ACh] edi +
mov edi [ebp-0A8h] +
add edi ebx +
rol edi 7 +
xor [ebp-88h] edi +
mov edi ebx +
mov ebx [ebp-88h] +
add edi ebx +
rol edi 9 +
xor [ebp-0B8h] edi +
mov edi ebx +
mov ebx [ebp-0B8h] +
add ebx edi +
rol ebx 0Dh +
mov edi [ebp-0B8h] +
xor [ebp-0A8h] ebx +
mov ebx [ebp-0A8h] +
add edi ebx +
ror edi 0Eh +
mov ebx [ebp-84h] +
xor [ebp-98h] edi +
mov edi [ebp-94h] +
add edi ebx +
rol edi 7 +
xor [ebp-0B4h] edi +
mov edi ebx +
mov ebx [ebp-0B4h] +
add edi ebx +
rol edi 9 +
xor [ebp-0A4h] edi +
mov edi ebx +
mov ebx [ebp-0A4h] +
add ebx edi +
mov edi [ebp-0A4h] +
rol ebx 0Dh +
xor [ebp-94h] ebx +
mov ebx [ebp-94h] +
add edi ebx +
ror edi 0Eh +
xor [ebp-84h] edi +
mov edi [ebp-0B4h] +
add edi esi +
rol edi 7 +
xor [ebp-0BCh] edi +
mov edi [ebp-0BCh] +
add edi esi +
rol edi 9 +
xor [ebp-0B8h] edi +
mov edi [ebp-0BCh] +
mov ebx [ebp-0B8h] +
add ebx edi +
mov edi [ebp-0B8h] +
rol ebx 0Dh +
xor [ebp-0B4h] ebx +
mov ebx [ebp-0B4h] +
add ebx edi +
mov edi [ebp-0ACh] +
add edi eax +
ror ebx 0Eh +
xor esi ebx +
rol edi 7 +
xor [ebp-0A8h] edi +
mov edi [ebp-0ACh] +
mov ebx [ebp-0A8h] +
add ebx edi +
mov edi [ebp-0A8h] +
rol ebx 9 +
xor [ebp-0A4h] ebx +
mov ebx [ebp-0A4h] +
add ebx edi +
mov edi [ebp-0A4h] +
rol ebx 0Dh +
xor eax ebx +
add edi eax +
mov ebx [ebp-9Ch] +
ror edi 0Eh +
xor [ebp-0ACh] edi +
mov edi [ebp-98h] +
add edi ebx +
rol edi 7 +
xor [ebp-94h] edi +
mov ebx [ebp-94h] +
mov edi [ebp-98h] +
add ebx edi +
mov edi [ebp-94h] +
rol ebx 9 +
xor ecx ebx +
add edi ecx +
mov ebx [ebp-88h] +
rol edi 0Dh +
xor [ebp-9Ch] edi +
mov edi [ebp-9Ch] +
add edi ecx +
ror edi 0Eh +
xor [ebp-98h] edi +
mov edi [ebp-84h] +
add edi ebx +
rol edi 7 +
xor edx edi +
mov edi [ebp-84h] +
add edi edx +
rol edi 9 +
xor [ebp-8Ch] edi +
mov edi [ebp-8Ch] +
add edi edx +
rol edi 0Dh +
xor [ebp-88h] edi +
mov edi [ebp-8Ch] +
mov ebx [ebp-88h] +
add ebx edi +
ror ebx 0Eh +
xor [ebp-84h] ebx +
dec dword ptr [ebp-70h]  +
jnz loc_1021D9F  +
mov [ebp-90h] edx +
push 40h  +
mov [ebp-0B0h] eax +
mov [ebp-0A0h] ecx +
xor edx edx +
xor eax eax +
mov [ebp-0C0h] esi +
pop ebx  +
mov ecx [ebp+eax-150h] +
add [ebp+eax-0C0h] ecx +
add eax 4 +
cmp eax ebx +
jl loc_1022011  +
lea edi [ebp-48h] +
lea esi [ebp-0C0h] +
inc dword ptr [ebp-130h]  +
push 10h  +
pop ecx  +
movs   +
cmp [ebp-0CCh] ebx +
jbe loc_102207B  +
mov eax [ebp-0DCh] +
mov esi [ebp-6Ch] +
lea edi [esi+eax] +
lea ecx [ebp+edx-48h] +
mov al [ecx+edi] +
xor al [ecx] +
xor [ebp-59h] al +
inc edx  +
mov [ecx+esi] al +
cmp edx ebx +
jb loc_102204E  +
sub [ebp-0CCh] ebx +
add [ebp-78h] ebx +
add esi ebx +
add [ebp-0E0h] ebx +
mov [ebp-6Ch] esi +
jmp loc_1021D6F  +
***
cmp [ebp-0CCh] edx +
jbe loc_10220AB  +
mov esi [ebp-0E0h] +
lea eax [ebp-48h] +
sub esi eax +
mov edi [ebp-78h] +
sub edi eax +
lea ecx [ebp+edx-48h] +
mov al [ecx+esi] +
xor al [ecx] +
xor [ebp-59h] al +
mov [ecx+edi] al +
inc edx  +
cmp edx [ebp-0CCh] +
jb loc_1022093  +
mov esi [ebp-0C4h] +
mov ebx 0FFFFF000h +
mov edi offset __ImageBase +
movzx eax byte ptr [ebp-59h] +
mov ecx [ebp-74h] +
movzx ecx byte ptr [ecx+8] +
sub eax ecx +
jz loc_1022160  +
call sub_100CD3B  +
mov ecx [ebp-0F8h] +
and ecx 0FFFFFFFCh +
mov edx 0FFFFh +
lea esi [ecx+0FFFh] +
mov edi eax +
and edi ebx +
and esi ebx +
mov eax [ebp-0FCh] +
mov dword ptr [eax+8] offset sub_1023648 +
xor eax eax +
mov ebx dword_10410FC +
imul ebx ebx +
add ebx 269EC3h +
mov dword_10410FC ebx +
shr ebx 10h +
shl eax 10h +
shr edx 10h +
or eax ebx +
test edx edx +
jnz loc_10220FC  +
mov ebx 0FFFFh +
div  ebx +
mov eax [ebp-0C8h] +
inc edx  +
cmp ecx esi +
mov [eax+4] edi +
mov [eax+0Ch] edx +
mov dword ptr [ebp-0C8h] 0 +
mov eax ecx +
jnb loc_1022156  +
mov ecx [ebp-0C8h] +
mov [eax] ecx +
add eax 4 +
cmp eax esi +
jb loc_1022147  +
mov eax offset sub_1023648 +
jmp loc_1022250  +
mov ecx ds:off_1004F44 +
mov eax [ebp-0D4h] +
sub eax [ebp-0D0h] +
sub edi ecx +
mov [ebp-0C4h] eax +
mov [ebp-74h] edi +
jnz loc_1022187  +
test eax eax +
jz loc_1022238  +
mov edi [ebp-0D0h] +
mov eax [ebp-7Ch] +
mov ecx ds:dword_1009298 +
sub edi [ebp-0D4h] +
add eax esi +
xor esi esi +
mov [ebp-0C8h] eax +
dec ecx  +
js loc_10221D1  +
lea eax [ecx+esi] +
cdq   +
sub eax edx +
sar eax 1 +
mov edx ds:dword_100929C[eax*4] +
and edx 0FFFFFFFh +
cmp [ebp-7Ch] edx +
jnb loc_10221C8  +
lea ecx [eax-1] +
jmp loc_10221CD  +
jbe loc_10221D5  +
lea esi [eax+1] +
cmp ecx esi +
jge loc_10221A9  +
mov ebx esi +
jmp loc_1022230  +
mov ebx eax +
jmp loc_1022230  +
mov eax ds:dword_100929C[ebx*4] +
mov ecx eax +
and ecx 0FFFFFFFh +
cmp ecx [ebp-0C8h] +
jnb loc_1022238  +
lea esi __ImageBase[ecx+edi] +
mov ecx eax +
shl ecx 2 +
sar ecx 1Eh +
sar eax 1Eh +
and ecx 3 +
and eax 3 +
xor edx edx +
dec ecx  +
jz loc_1022220  +
dec ecx  +
jz loc_1022218  +
dec ecx  +
jnz loc_1022229  +
mov edx [ebp-74h] +
jmp loc_1022229  +
mov edx [ebp-0C4h] +
jmp loc_1022229  +
mov edx [ebp-74h] +
sub edx [ebp-0C4h] +
dec eax  +
dec eax  +
jnz loc_102222F  +
add [esi] edx +
inc ebx  +
cmp ebx ds:dword_1009298 +
jb loc_10221D9  +
mov eax ds:dword_102543C +
mov eax 0AD02F955h +
mov ecx [ebp-110h] +
mov eax [ebp-0D0h] +
add eax ecx +
mov ecx [ebp-0FCh] +
mov [ecx+8] eax +
mov eax [ebp-0F8h] +
mov ecx [ebp-4] +
add dword ptr [eax] 0Ch +
xor ecx ebp +
pop edi  +
pop esi  +
pop ebx  +
call sub_1009284  +
leave   +
retn 8  +
***
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
mov edx [ebp+arg_4] +
and [ebp+var_8] 0 +
and [ebp+var_8] 0 +
push ebx  +
mov eax edx +
push esi  +
mov esi [ebp+arg_0] +
sub eax esi +
push edi  +
mov edi ecx +
shr edx 4 +
movzx ecx al +
xor ecx 0FDh +
mov ecx [ecx+edi] +
mov ebx eax +
shr ebx 8 +
movzx ebx bl +
mov ecx [ecx+ebx-8Bh] +
mov [ebp+var_14] edi +
mov edi esi +
shl edi 4 +
add edi edx +
mov ebx ecx +
lea edx [edi+66A8AB68h] +
sub ebx edx +
neg ebx  +
sbb bl bl +
inc bl  +
cmp edx ecx +
mov ecx [ebp+arg_4] +
setnbe [ebp+var_1]  +
mov edx esi +
shr edx 4 +
shl ecx 4 +
add edx ecx +
xor edx eax +
mov [ebp+var_8] edx +
xor edx 138B4923h +
push edx  +
mov [ebp+var_10] eax +
mov eax [ebp+var_14] +
mov edx (offset loc_1004D56+2) +
call sub_1015D2A  +
mov eax [ebp+arg_4] +
mov ecx esi +
sub ecx eax +
mov [ebp+arg_4] ecx +
xor ecx edi +
xor ecx [ebp+var_10] +
lea edx [esi+eax+1A3CB826h] +
xor edx [ebp+var_8] +
xor ecx 0F51278A5h +
xor esi ecx +
xor esi [ebp+var_8] +
xor edx edi +
xor esi eax +
mov edi esi +
xor edi edx +
xor edi [ebp+var_10] +
xor edi 4ADED74Eh +
cmp [ebp+var_1] 1 +
mov [ebp+var_10] edi +
jnz loc_1022931  +
xor ecx 7A296E3Bh +
xor eax eax +
mov edi ecx +
add edx 6155E71Fh +
xor ecx ecx +
or eax edx +
or edi ecx +
jmp loc_1022950  +
mov eax [ebp+arg_4] +
xor eax edx +
xor eax ecx +
xor eax 8DE2F7AEh +
add eax 12C358C2h +
xor ecx ecx +
xor edi edi +
xor esi 0B2DD9815h +
or eax ecx +
or edi esi +
mov ecx [ebp+var_10] +
mov esi [ebp+var_14] +
test bl bl +
setnz dl  +
movzx ebx cl +
xor ebx 0D2h +
cmp [ebp+var_1] 0 +
mov [ebx+esi] dl +
setnz dl  +
shr ecx 8 +
movzx ecx cl +
xor ecx 52h +
mov [ecx+esi] dl +
mov edx edi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
xor ebx ebx +
jmp loc_1022C54  +
***
mov eax ebx +
inc ebx  +
mov [ebp-0DCh] ebx +
mov ebx 0F000h +
test [esi+eax*2+8] bx +
jz loc_1022C34  +
movzx eax word ptr [esi+eax*2+8] +
and eax ecx +
mov ecx [esi] +
lea eax __ImageBase[eax+ecx] +
xor ecx ecx +
mov [ebp-60h] eax +
sub [ebp-60h] edx +
mov [ebp-70h] eax +
jz loc_1022D01  +
movzx ebx byte ptr [ecx+edx] +
sub ebx edi +
add [ebp-68h] ebx +
add ebx [ebp-64h] +
mov eax ebx +
imul eax eax +
rol eax 0Ah +
ror ebx 0Ah +
xor eax ebx +
imul eax eax +
ror eax 2 +
add [ebp-68h] eax +
inc ecx  +
mov [ebp-64h] eax +
cmp ecx [ebp-60h] +
jb loc_1022CD0  +
mov ebx [ebp-70h] +
mov eax [ebx] +
sub eax [ebp-100h] +
xor ecx ecx +
mov [ebp-104h] eax +
movzx edx byte ptr [ebp+ecx-104h] +
sub edx edi +
add [ebp-68h] edx +
add edx [ebp-64h] +
mov eax edx +
imul eax eax +
rol eax 0Ah +
ror edx 0Ah +
xor eax edx +
imul eax eax +
ror eax 2 +
add [ebp-68h] eax +
mov [ebp-64h] eax +
inc ecx  +
cmp ecx 4 +
jb loc_1022D14  +
lea edx [ebx+4] +
mov ecx 0FFFh +
jmp loc_1022C34  +
***
mov eax [ebp-0D4h] +
mov esi [ebp-70h] +
lea edi [esi+eax] +
lea ecx [ebp+edx-48h] +
mov al [ecx+edi] +
xor al [ecx] +
xor [ebp-59h] al +
inc edx  +
cmp edx ebx +
mov [ecx+esi] al +
jb loc_1023127  +
sub [ebp-0C4h] ebx +
add [ebp-78h] ebx +
add esi ebx +
add [ebp-0D8h] ebx +
mov [ebp-70h] esi +
jmp loc_1022E48  +
***
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
sub eax eax +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
pushf   +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
mov eax [ebp+arg_4] +
push ebx  +
and [ebp+var_8] 0 +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov edi eax +
mov edx esi +
shr edx 4 +
shl edi 4 +
lea ebx [edx+edi] +
movzx edx bl +
mov edi [edx+ecx-54h] +
mov edx [edx+ecx-50h] +
mov [ebp+var_10] edx +
mov edx ebx +
shr edx 8 +
lea eax [esi+eax-13F0173Bh] +
movzx edx dl +
mov [ebp+var_4] eax +
add eax 3F06F53Fh +
mov [ebp+var_14] edi +
mov edi [edx+edi-4Ah] +
push eax  +
mov edx offset dword_1004EC0 +
mov eax ecx +
call sub_1015D2A  +
mov edx [ebp+arg_4] +
mov ecx edx +
shl esi 4 +
shr ecx 4 +
add esi ecx +
xor esi [ebp+var_4] +
mov eax ebx +
xor esi ebx +
xor eax ebx +
mov [ebp+arg_4] esi +
xor ebx [ebp+arg_4] +
movzx ecx byte ptr [ebp+arg_4] +
mov esi [ebp+var_14] +
xor edi eax +
add edx 8D18287Ah +
xor edx eax +
xor edx [ebp+var_4] +
mov [ebp+var_8] eax +
xor ebx [ebp+var_8] +
xor edi 5CC11BACh +
xor ecx 32h +
mov [ecx+esi] edi +
add ebx 405BF78Eh +
pop edi  +
xor eax eax +
sub edx 637B38ECh +
xor ecx ecx +
or eax ebx +
pop esi  +
or edx ecx +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 40h +
push ebx  +
push esi  +
mov esi ecx +
mov ecx [ebp+arg_0] +
push edi  +
mov edi [ebp+arg_4] +
mov ebx ecx +
xor ebx edi +
movzx eax bl +
xor eax 41h +
mov edx [esi+eax*8] +
mov eax [esi+eax*8+4] +
mov [ebp+var_2C] eax +
mov [ebp+var_30] edx +
mov eax ebx +
shr eax 8 +
movzx eax al +
mov edx [esi+eax*8-150h] +
mov eax [esi+eax*8-14Ch] +
mov [ebp+var_24] eax +
mov [ebp+var_28] edx +
mov eax ebx +
shr eax 18h +
xor eax 1Eh +
mov edx [eax+esi] +
mov eax [eax+esi+4] +
mov [ebp+var_38] edx +
mov [ebp+var_34] eax +
movzx eax bl +
mov [ebp+var_1C] eax +
xor eax 43h +
mov eax [esi+eax*8] +
mov edx ebx +
shr edx 8 +
movzx edx dl +
add eax edx +
mov edx ebx +
shr edx 10h +
movzx edx dl +
xor edx 0E9h +
mov edx [edx+esi] +
mov eax [edx+eax*4-108h] +
mov [ebp+var_40] eax +
lea eax [ecx+edi+0E1B5D67h] +
xor eax ebx +
mov [ebp+var_4] eax +
xor eax 824CF5AAh +
push eax  +
mov edx offset dword_1004F2C +
mov eax esi +
call sub_1015D2A  +
mov eax edi +
sub eax [ebp+arg_0] +
mov edx eax +
xor eax [ebp+var_4] +
xor edx ebx +
xor eax ebx +
mov [ebp+var_8] eax +
mov eax [ebp+arg_0] +
sub eax edi +
mov ecx eax +
xor eax [ebp+var_8] +
xor edx ebx +
xor eax edx +
xor eax 75286F8Ch +
xor ecx edx +
xor ecx [ebp+var_4] +
mov [ebp+arg_4] eax +
xor ecx 0A98D35CCh +
mov eax ecx +
xor eax [ebp+var_8] +
mov [ebp+var_20] edx +
xor eax ebx +
xor eax 0F2E5F1A6h +
mov [ebp+var_C] eax +
mov eax ecx +
shr eax 8 +
xor al 84h +
movzx eax al +
mov [ebp+var_18] ecx +
cdq   +
mov edi eax +
xor cl 9Bh +
mov eax edx +
mov [ebp+var_10] eax +
movzx eax cl +
cdq   +
sub eax edi +
mov edi [ebp+var_10] +
sbb edx edi +
add eax [ebp+var_28] +
adc edx [ebp+var_24] +
mov [ebp+var_14] eax +
mov eax [ebp+arg_4] +
xor ecx ecx +
add eax 35378F4Dh +
mov [ebp+var_10] edx +
mov edx [ebp+var_C] +
add edx 0D4E848BAh +
or ecx edx +
mov edx [ebp+var_40] +
xor edi edi +
or eax edi +
mov edi [ebp+var_14] +
mov [edi] ecx +
mov [edi+4] eax +
mov eax [ebp+arg_4] +
xor eax [ebp+var_18] +
xor eax ebx +
xor eax ebx +
movzx ecx al +
xor ecx 86h +
mov [esi+ecx*8] edx +
xor edx edx +
mov [esi+ecx*8+4] edx +
mov edx [ebp+var_10] +
mov ecx eax +
shr ecx 8 +
movzx ecx cl +
xor ecx 74h +
mov [esi+ecx*8+4] edx +
mov edx [ebp+var_30] +
mov [esi+ecx*8] edi +
mov ecx eax +
shr ecx 10h +
movzx ecx cl +
mov [esi+ecx*8-288h] edx +
mov edx [ebp+var_2C] +
mov [esi+ecx*8-284h] edx +
shr ebx 10h +
movzx ecx bl +
add ecx 3Fh +
xor edx edx +
add ecx [ebp+var_28] +
pop edi  +
adc edx [ebp+var_24] +
shr eax 18h +
xor eax 94h +
mov [eax+esi] ecx +
movzx ecx byte ptr [ebp+arg_4] +
mov [eax+esi+4] edx +
movzx eax byte ptr [ebp+var_4] +
mov edx [ebp+var_20] +
xor eax ecx +
movzx ecx byte ptr [ebp+var_C] +
xor eax ecx +
mov ecx [ebp+var_38] +
xor eax 0Eh +
xor eax [ebp+var_1C] +
add edx 2BAB76A6h +
mov [eax+esi] ecx +
mov ecx [ebp+var_34] +
mov [eax+esi+4] ecx +
mov ecx [ebp+var_8] +
xor eax eax +
add ecx 3CFF0226h +
xor esi esi +
or eax ecx +
or edx esi +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
mov eax ecx +
push edi  +
mov edi [ebp+arg_4] +
lea ecx [esi+edi+1852FC65h] +
movzx edx cl +
xor edx 99h +
cmp byte ptr [edx+eax] 0 +
lea ebx [esi+edi+4570F507h] +
setnz [ebp+var_1]  +
shr ecx 8 +
movzx ecx cl +
cmp byte ptr [ecx+eax+47h] 0 +
lea ecx [ebx-588854E0h] +
push ecx  +
mov edx offset dword_10050D4 +
setnz byte ptr [ebp+arg_4+3]  +
call sub_1015D2A  +
lea edx [esi+edi+1852FC65h] +
lea ecx [esi+edi-76F98AD9h] +
mov eax esi +
xor ecx edx +
xor eax ebx +
xor eax edx +
mov edx edi +
shl esi 4 +
xor eax edi +
shr edx 4 +
add esi edx +
add edi 8422363Dh +
xor esi ecx +
xor edi eax +
xor esi ebx +
xor edi ecx +
xor esi 8032494Fh +
xor edx edx +
xor edi 0BB56D901h +
xor ebx ebx +
or edx edi +
or esi ebx +
cmp byte ptr [ebp+arg_4+3] bl +
jnz loc_102868D  +
cmp [ebp+var_1] bl +
jnz loc_102868D  +
xor edx edx +
add eax 0ADECC217h +
xor ecx 3849EED9h +
xor esi esi +
or edx eax +
or ecx esi +
jmp loc_102868F  +
mov ecx esi +
pop edi  +
pop esi  +
mov eax edx +
mov edx ecx +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
mov edi edi +
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
mov esi ecx +
push edi  +
mov edi [ebp+arg_4] +
mov ecx ebx +
shr ecx 4 +
mov eax edi +
shl eax 4 +
add ecx eax +
mov eax ecx +
shr eax 18h +
xor eax 13h +
mov edx [esi+eax*8] +
mov eax [esi+eax*8+4] +
mov [ebp+var_18] eax +
mov [ebp+var_1C] edx +
lea eax [ebx+edi-6240177h] +
mov [ebp+arg_4] eax +
movzx eax cl +
mov edx [esi+eax*8-630h] +
mov eax [esi+eax*8-62Ch] +
mov [ebp+var_28] eax +
mov eax ecx +
mov [ebp+var_2C] edx +
shr eax 10h +
movzx eax al +
mov edx [eax+esi+2Eh] +
mov eax [eax+esi+32h] +
mov [ebp+var_4] ecx +
mov [ebp+var_24] edx +
mov [ebp+var_20] eax +
mov eax [ebp+arg_4] +
shr ecx 8 +
movzx ecx cl +
mov edx [esi+ecx*8-368h] +
shr eax 10h +
mov [ebp+var_10] ecx +
mov ecx [ebp+var_1C] +
movzx eax al +
mov [eax+ecx-0BEh] edx +
mov edx [ebp+var_10] +
mov edx [esi+edx*8-364h] +
mov [eax+ecx-0BAh] edx +
mov ecx edi +
sub ecx ebx +
xor ecx [ebp+var_4] +
lea edx [edi+39CAFFECh] +
xor edx ecx +
xor edx [ebp+arg_4] +
lea eax [ebx+edi-48C45D7Bh] +
xor eax [ebp+arg_4] +
mov [ebp+var_8] edx +
xor eax [ebp+var_4] +
mov edx ebx +
xor edx eax +
xor edx ecx +
xor edx edi +
mov [ebp+var_C] edx +
xor edx 0BE48B24Ah +
push edx  +
mov [ebp+var_10] eax +
mov edx offset dword_10050F8 +
mov eax esi +
mov [ebp+var_14] ecx +
call sub_1015D2A  +
mov ecx [ebp+var_8] +
shl ebx 4 +
shr edi 4 +
add ebx edi +
xor ebx ecx +
xor ebx [ebp+var_10] +
mov eax ecx +
shr eax 8 +
xor al 35h +
movzx eax al +
cdq   +
mov [ebp+var_8] ebx +
mov edi eax +
mov ebx edx +
mov al cl +
xor al 90h +
movzx eax al +
cdq   +
sub eax edi +
sbb edx ebx +
add eax [ebp+var_1C] +
mov edi [ebp+var_8] +
adc edx [ebp+var_18] +
xor ebx ebx +
mov [ebp+var_18] edx +
mov edx [ebp+var_C] +
xor edx ecx +
xor edx [ebp+var_4] +
xor ecx ecx +
xor edx 5E5C6E46h +
or edx ebx +
mov [eax] edx +
xor edi 4740E08Dh +
or ecx edi +
mov [eax+4] ecx +
mov ecx [ebp+var_8] +
xor ecx [ebp+var_C] +
pop edi  +
xor ecx [ebp+arg_4] +
xor ecx [ebp+var_4] +
mov edx ecx +
movzx ecx dl +
xor ecx 0A9h +
mov [esi+ecx*8] eax +
mov eax [ebp+var_18] +
mov [esi+ecx*8+4] eax +
movzx ecx byte ptr [ebp+arg_4] +
mov eax edx +
shr eax 8 +
movzx eax al +
and [eax+esi+9] ebx +
sub ecx 88h +
mov [eax+esi+5] ecx +
mov ecx [ebp+var_24] +
mov eax edx +
shr eax 10h +
movzx eax al +
mov [esi+eax*8] ecx +
mov ecx [ebp+var_20] +
mov [esi+eax*8+4] ecx +
mov eax [ebp+var_2C] +
mov ecx [ebp+var_10] +
shr edx 18h +
mov [edx+esi-2Ah] eax +
mov eax [ebp+var_28] +
mov [edx+esi-26h] eax +
mov edx [ebp+var_14] +
xor eax eax +
add ecx 9304214Bh +
xor esi esi +
add edx 0C29AD5A7h +
or eax ecx +
or edx esi +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
and dword ptr [ebp-24h] 0 +
jmp loc_1028C42  +
***
mov eax [ebp-24h] +
inc dword ptr [ebp-24h]  +
mov edx 0F000h +
test [ecx+eax*2+8] dx +
jz loc_1028C2C  +
mov edx [ecx] +
movzx eax word ptr [ecx+eax*2+8] +
and dword ptr [ebp-4] 0 +
and eax 0FFFh +
lea eax __ImageBase[eax+edx] +
mov [ebp-8] eax +
sub [ebp-8] edi +
mov [ebp-10h] eax +
jz loc_1028CF7  +
mov eax [ebp-4] +
movzx eax byte ptr [eax+edi] +
add eax esi +
mov edx esi +
add [ebp-20h] eax +
add eax [ebp-1Ch] +
mul  edx +
add eax edx +
mov edx eax +
imul edx edx +
rol edx 5 +
ror eax 5 +
xor edx eax +
mov eax edx +
add [ebp-20h] eax +
inc dword ptr [ebp-4]  +
mov eax [ebp-4] +
mov [ebp-1Ch] edx +
cmp eax [ebp-8] +
jb loc_1028CBC  +
mov eax [ebp-10h] +
mov eax [eax] +
sub eax [ebp-14h] +
xor edi edi +
mov [ebp-8] eax +
mov edx esi +
movzx eax byte ptr [ebp+edi-8] +
add eax esi +
add [ebp-20h] eax +
add eax [ebp-1Ch] +
mul  edx +
add eax edx +
mov edx eax +
imul edx edx +
rol edx 5 +
ror eax 5 +
xor edx eax +
add [ebp-20h] edx +
inc edi  +
cmp edi 4 +
mov [ebp-1Ch] edx +
jb loc_1028D01  +
mov edi [ebp-10h] +
add edi 4 +
jmp loc_1028C2C  +
***
mov edi edi +
mov edi edi +
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1Ch +
mov eax [ebp+arg_0] +
and [ebp+var_18] 0 +
push ebx  +
lea ebx [eax-0C3B63AEh] +
push esi  +
movzx edx bl +
mov [ebp+var_8] ebx +
shr ebx 8 +
xor edx 0F0h +
mov edx [edx+ecx] +
movzx esi bl +
push edi  +
mov edi [ebp+arg_4] +
xor esi 0FBh +
mov edx [edx+esi] +
mov esi edi +
sub esi eax +
mov eax esi +
xor eax 0FE4F4C5Ah +
mov [ebp+var_1C] edx +
push eax  +
mov edx offset dword_1005118 +
mov eax ecx +
mov [ebp+var_14] ecx +
mov [ebp+var_10] esi +
call sub_1015D2A  +
mov ebx [ebp+var_8] +
mov edx [ebp+arg_0] +
and [ebp+var_8] 0 +
mov ecx [ebp+var_1C] +
xor edx ebx +
xor edx edi +
lea eax [edx-40777428h] +
sub ecx eax +
mov [ebp+var_C] eax +
mov eax [ebp+var_1C] +
neg ecx  +
sbb cl cl +
inc cl  +
cmp [ebp+var_C] eax +
mov eax [ebp+arg_0] +
setnbe [ebp+var_1]  +
shr edi 4 +
shl eax 4 +
add edi eax +
mov eax edi +
xor eax esi +
mov esi [ebp+arg_0] +
xor eax ebx +
add esi 2E0674EBh +
xor esi edx +
xor esi [ebp+var_10] +
xor edi eax +
xor edi edx +
mov edx edi +
mov [ebp+var_10] edi +
mov edi [ebp+arg_0] +
xor edx esi +
add edi 0F3C49C52h +
xor edx edi +
xor edx 0DE20CB57h +
cmp [ebp+var_1] 1 +
jnz loc_10290FA  +
xor edi edi +
add esi 1B06151h +
xor eax 0AE46ECFFh +
xor ebx ebx +
or edi esi +
or eax ebx +
jmp loc_1029122  +
mov ebx [ebp+arg_0] +
mov edi [ebp+arg_4] +
lea edi [ebx+edi+1F9D31D1h] +
xor edi esi +
mov esi [ebp+var_10] +
xor edi eax +
add edi 74875C5Eh +
xor ebx ebx +
xor eax eax +
xor esi 0A847290Dh +
or edi ebx +
or eax esi +
cmp [ebp+var_1] 0 +
mov esi [ebp+var_14] +
movzx ebx dl +
mov [ebp+arg_4] eax +
setnz al  +
xor ebx 0EEh +
mov [ebx+esi] al +
test cl cl +
setnz al  +
shr edx 8 +
movzx ecx dl +
mov edx [ebp+arg_4] +
mov [ecx+esi+31h] al +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov edx [ebp+arg_0] +
push ebx  +
push esi  +
mov esi [ebp+arg_4] +
lea ebx [esi-11AD324Fh] +
movzx eax bl +
xor eax 0D8h +
cmp byte ptr [eax+ecx] 0 +
mov eax ebx +
setnz [ebp+var_1]  +
shr eax 8 +
movzx eax al +
xor eax 6Eh +
cmp byte ptr [eax+ecx] 0 +
mov [ebp+var_8] ecx +
setnz [ebp+var_2]  +
and [ebp+var_C] 0 +
mov ecx edx +
xor ecx esi +
lea eax [esi+45B66DBEh] +
push edi  +
lea edi [edx-652E1369h] +
xor eax ecx +
xor eax ebx +
xor edi ebx +
shr edx 4 +
mov ebx esi +
shl ebx 4 +
add edx ebx +
xor edx edi +
xor edx ecx +
xor edx 1D65416Fh +
mov ebx edx +
xor edx edx +
mov [ebp+arg_4] ecx +
add esi 55FDA45Eh +
or ebx edx +
mov edx [ebp+var_C] +
mov ecx eax +
xor esi eax +
mov eax [ebp+var_8] +
xor ecx 5EFC1D87h +
or edx ecx +
xor esi edi +
mov [ebp+var_C] edx +
xor esi 8A2E2DCDh +
push esi  +
mov edx offset dword_1005234 +
call sub_1015D2A  +
cmp [ebp+var_1] 0 +
jnz loc_102AB1D  +
cmp [ebp+var_2] 0 +
jnz loc_102AB1D  +
mov edx [ebp+arg_4] +
xor eax eax +
xor edi 0A541CEB3h +
xor edx 0C1D5B2B7h +
xor ecx ecx +
or eax edi +
or edx ecx +
jmp loc_102AB22  +
mov edx [ebp+var_C] +
mov eax ebx +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 4Ch +
mov edx [ebp+arg_0] +
push ebx  +
push esi  +
mov esi ecx +
push edi  +
mov edi [ebp+arg_4] +
lea ecx [edi+4809987Fh] +
mov eax ecx +
shr eax 8 +
movzx eax al +
xor eax 0A1h +
mov ebx [eax+esi] +
mov eax [eax+esi+4] +
mov [ebp+var_28] eax +
xor edx edi +
movzx eax dl +
mov [ebp+var_4] edx +
mov [ebp+var_24] eax +
mov edx ecx +
shr edx 18h +
mov edx [edx+esi-20h] +
mov eax [edx+eax-5Bh] +
mov [ebp+var_4C] eax +
mov eax ecx +
shr eax 10h +
movzx eax al +
mov edx [esi+eax*8-2C0h] +
mov eax [esi+eax*8-2BCh] +
mov [ebp+var_40] eax +
movzx eax cl +
xor eax 0D9h +
mov [ebp+var_2C] ebx +
mov ebx [ebp+arg_0] +
mov [ebp+var_44] edx +
mov edx [esi+eax*8] +
mov eax [esi+eax*8+4] +
add ebx 0F2726799h +
xor ebx ecx +
mov [ebp+var_38] eax +
mov eax ebx +
xor eax 10013898h +
mov [ebp+var_3C] edx +
push eax  +
mov edx offset dword_1005344 +
mov eax esi +
mov [ebp+var_8] ecx +
mov [ebp+var_1C] ebx +
call sub_1015D2A  +
mov eax [ebp+arg_0] +
lea ecx [eax+edi+0A602802h] +
xor ecx [ebp+var_4] +
sub eax edi +
xor ecx [ebp+var_8] +
mov [ebp+var_C] ecx +
lea ecx [edi-11E4D9E1h] +
xor ecx ebx +
xor ecx [ebp+var_4] +
mov edi eax +
xor edi [ebp+var_C] +
xor eax ecx +
xor eax [ebp+var_C] +
xor edi ebx +
xor eax 0B010D98Ah +
xor edi 0D7591476h +
mov [ebp+arg_4] eax +
mov eax edi +
shr eax 8 +
add al 20h +
movzx eax al +
cdq   +
mov ebx edi +
mov [ebp+var_10] edi +
xor ebx ecx +
xor ebx [ebp+var_8] +
mov edi eax +
mov eax edx +
movzx edx byte ptr [ebp+var_10] +
xor ebx 8FFDFD6Fh +
sub edx 0A3h +
mov [ebp+var_20] ebx +
mov [ebp+var_34] edx +
and [ebp+var_30] 0 +
mov [ebp+var_14] eax +
mov eax edx +
mov edx [ebp+var_30] +
sub eax edi +
mov edi [ebp+var_14] +
sbb edx edi +
add eax [ebp+var_2C] +
adc edx [ebp+var_28] +
mov [ebp+var_18] eax +
mov eax [ebp+arg_4] +
mov [ebp+var_14] edx +
xor edx edx +
xor eax 92CC12F1h +
mov edi eax +
xor eax eax +
or edi eax +
mov eax [ebp+var_18] +
xor ebx 17E88803h +
or edx ebx +
mov [eax] edx +
mov edx [ebp+var_4] +
mov [eax+4] edi +
mov eax [ebp+arg_4] +
xor eax [ebp+var_10] +
xor ebx ebx +
xor eax edx +
xor eax [ebp+var_8] +
shr edx 8 +
movzx edx dl +
sub edx 63h +
mov edi edx +
add edi [ebp+var_2C] +
movzx edx al +
adc ebx [ebp+var_28] +
mov [edx+esi+0Ch] edi +
mov [edx+esi+10h] ebx +
mov edi [ebp+var_3C] +
mov edx eax +
shr edx 8 +
movzx edx dl +
xor edx 77h +
mov [esi+edx*8] edi +
mov edi [ebp+var_38] +
mov [esi+edx*8+4] edi +
mov edi [ebp+var_18] +
mov edx eax +
shr edx 10h +
movzx edx dl +
mov [esi+edx*8-178h] edi +
mov edi [ebp+var_14] +
mov [esi+edx*8-174h] edi +
mov edx [ebp+var_4C] +
shr eax 18h +
xor eax 0E5h +
mov [esi+eax*8] edx +
xor edx edx +
mov [esi+eax*8+4] edx +
movzx edx byte ptr [ebp+arg_4] +
movzx eax byte ptr [ebp+var_1C] +
xor eax edx +
movzx edx byte ptr [ebp+var_20] +
xor eax edx +
xor eax [ebp+var_24] +
mov edx [ebp+var_44] +
mov [eax+esi+15h] edx +
mov edx [ebp+var_40] +
mov [eax+esi+19h] edx +
mov edx [ebp+var_C] +
xor eax eax +
xor ecx 0E046DCCAh +
xor esi esi +
xor edx 6E090F32h +
pop edi  +
or eax ecx +
or edx esi +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov edi [ebp+arg_4] +
mov ebx esi +
xor ebx edi +
movzx edx bl +
mov eax [edx+ecx-79h] +
mov [ebp+var_C] eax +
mov eax [edx+ecx-75h] +
mov [ebp+var_8] eax +
lea eax [edi-378CF97Fh] +
mov [ebp+var_4] eax +
xor eax 34B62350h +
push eax  +
mov edx offset dword_10053F4 +
mov eax ecx +
call sub_1015D2A  +
mov eax [ebp+var_C] +
lea ecx [esi-1B909933h] +
xor ecx [ebp+var_4] +
lea edi [esi+edi+4A23CB4h] +
xor edi ebx +
xor ecx ebx +
shr ebx 8 +
movzx edx bl +
xor edx 2Fh +
lea ebx [edi+283BF8Dh] +
xor ebx [edx+eax] +
movzx edx cl +
xor edx 62h +
mov [edx+eax] ebx +
mov ebx [ebp+arg_4] +
mov edx esi +
xor esi ecx +
shr edx 4 +
mov eax ebx +
shl eax 4 +
add edx eax +
xor esi edi +
xor edx edi +
xor edx [ebp+var_4] +
xor esi ebx +
sub esi 0BBFC7Fh +
xor eax eax +
pop edi  +
or eax esi +
xor edx 0D15AC2E4h +
xor ecx ecx +
pop esi  +
or edx ecx +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
call sub_1020EF3  +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 3Ch +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
mov esi ecx +
push edi  +
mov edi [ebp+arg_4] +
lea ecx [ebx+edi-1D5D523Ah] +
movzx eax cl +
mov edx [esi+eax*8-498h] +
mov eax [esi+eax*8-494h] +
mov [ebp+var_30] eax +
mov eax ecx +
shr eax 8 +
movzx eax al +
xor eax 1Ah +
mov [ebp+var_34] edx +
mov edx [esi+eax*8] +
mov eax [esi+eax*8+4] +
mov [ebp+var_18] eax +
mov eax ecx +
shr eax 10h +
movzx eax al +
mov [ebp+var_1C] edx +
mov edx [eax+esi+8Ah] +
mov eax [eax+esi+8Eh] +
mov [ebp+var_38] eax +
mov [ebp+var_3C] edx +
mov eax ecx +
shr eax 18h +
mov edx [eax+esi-3Dh] +
mov eax [eax+esi-39h] +
mov [ebp+var_20] eax +
lea eax [ebx+edi+1B956566h] +
mov [ebp+arg_4] eax +
movzx eax al +
mov [ebp+var_24] edx +
mov edx [esi+eax*8-118h] +
mov eax [esi+eax*8-114h] +
mov [ebp+var_28] eax +
mov [ebp+var_2C] edx +
mov eax ebx +
shl eax 4 +
mov edx edi +
shr edx 4 +
add eax edx +
mov [ebp+var_C] eax +
xor eax ecx +
mov [ebp+var_8] eax +
add eax 280CF305h +
push eax  +
mov edx offset dword_1005574 +
mov eax esi +
mov [ebp+var_4] ecx +
call sub_1015D2A  +
mov eax [ebp+var_1C] +
sub eax [ebp+var_34] +
shr ebx 4 +
mov [ebp+var_1C] eax +
mov eax [ebp+var_C] +
mov ecx eax +
xor ecx [ebp+arg_4] +
mov edx eax +
xor ecx [ebp+var_4] +
xor edx [ebp+var_8] +
xor eax ecx +
xor edx [ebp+arg_4] +
xor eax [ebp+var_8] +
shl edi 4 +
add ebx edi +
mov [ebp+var_10] ecx +
xor ebx edx +
xor ebx ecx +
mov ecx eax +
xor ecx edx +
xor ecx [ebp+var_4] +
mov [ebp+var_C] eax +
xor ecx 837B1F3Bh +
mov eax ecx +
mov [ebp+var_14] edx +
mov [ebp+var_8] ebx +
shr eax 8 +
add al 68h +
movzx eax al +
cdq   +
mov edi eax +
mov al cl +
xor al 71h +
movzx eax al +
mov ebx edx +
cdq   +
sub eax edi +
sbb edx ebx +
add eax [ebp+var_24] +
adc edx [ebp+var_20] +
mov [ebp+var_34] eax +
mov eax [ebp+var_C] +
add eax 6E33151Eh +
mov [ebp+var_30] edx +
mov edx [ebp+var_8] +
xor edx 4A7EB9FEh +
xor edi edi +
or edi edx +
mov edx [ebp+var_34] +
mov [edx] edi +
mov edi [ebp+var_1C] +
xor ebx ebx +
or eax ebx +
mov [edx+4] eax +
mov eax ecx +
shr eax 10h +
movzx eax al +
xor eax 0B8h +
mov [esi+eax*8+4] ebx +
mov [esi+eax*8] edi +
mov eax [ebp+var_2C] +
mov ebx [ebp+var_3C] +
shr ecx 18h +
mov [esi+ecx*8+28h] eax +
mov eax [ebp+var_28] +
mov [esi+ecx*8+2Ch] eax +
mov eax [ebp+var_8] +
xor eax [ebp+var_C] +
xor eax [ebp+arg_4] +
xor eax [ebp+var_4] +
movzx ecx al +
xor ecx 0C8h +
and dword ptr [ecx+esi+4] 0 +
mov [ecx+esi] ebx +
mov ecx eax +
shr ecx 8 +
movzx ecx cl +
and dword ptr [esi+ecx*8-37Ch] 0 +
mov [esi+ecx*8-380h] edi +
mov ecx [ebp+var_30] +
shr eax 10h +
movzx eax al +
mov [eax+esi-0B8h] edx +
mov edx [ebp+var_10] +
mov [eax+esi-0B4h] ecx +
mov ecx [ebp+var_14] +
xor eax eax +
xor ecx 28857C38h +
xor esi esi +
add edx 0FF1DC59Dh +
pop edi  +
or eax ecx +
or edx esi +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov edx [ebp+arg_0] +
push ebx  +
push esi  +
mov esi ecx +
mov ecx [ebp+arg_4] +
mov ebx edx +
mov eax ecx +
shl eax 4 +
shr ebx 4 +
add ebx eax +
movzx eax bl +
push edi  +
mov edi [eax+esi-0Dh] +
mov eax [eax+esi-9] +
mov [ebp+var_C] eax +
lea eax [ecx+edx] +
mov [ebp+var_4] eax +
add eax 0C14EF498h +
mov [ebp+var_8] eax +
xor eax 9A789186h +
push eax  +
mov edx offset dword_1005580 +
mov eax esi +
mov [ebp+var_10] edi +
call sub_1015D2A  +
mov eax ebx +
shr eax 8 +
xor al 0B8h +
movzx eax al +
cdq   +
mov ecx eax +
mov eax ebx +
shr eax 10h +
xor al 3Fh +
mov edi edx +
movzx eax al +
cdq   +
sub ecx eax +
sbb edi edx +
add ecx [ebp+var_10] +
mov edx [ebp+var_4] +
adc edi [ebp+var_C] +
mov [esi+1B8h] ecx +
mov ecx [ebp+arg_0] +
add ecx 898E8D03h +
xor ecx [ebp+var_8] +
add edx 0A9B199C0h +
xor ecx ebx +
xor edx ebx +
mov [esi+1BCh] edi +
xor eax eax +
sub ecx 16BC0A9Ah +
xor esi esi +
sub edx 1E7F81BAh +
pop edi  +
or eax ecx +
or edx esi +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
mov eax [ebp+arg_0] +
mov edx eax +
push ebx  +
push esi  +
push edi  +
mov edi ecx +
mov ecx [ebp+arg_4] +
mov esi ecx +
shr edx 4 +
shl esi 4 +
add edx esi +
mov esi ecx +
sub esi eax +
sub eax ecx +
lea ebx [ecx+2FAC3671h] +
xor eax ebx +
xor eax edx +
xor eax 0E98EF6B3h +
mov [ebp+var_8] eax +
shr eax 8 +
xor al 46h +
movzx eax al +
movzx ecx dl +
xor esi edx +
cdq   +
xor ecx 0B5h +
mov [ebp+var_4] ebx +
mov ebx [edi+ecx*8] +
mov ecx [edi+ecx*8+4] +
sub ebx eax +
movzx eax byte ptr [ebp+var_8] +
sbb ecx edx +
sub eax 0C9h +
xor edx edx +
add ebx eax +
mov eax [ebp+arg_0] +
adc ecx edx +
xor eax esi +
xor eax [ebp+var_4] +
mov edx (offset loc_10055BF+1) +
xor eax [ebp+arg_4] +
mov [ebp+var_8] ecx +
xor eax 0C07C741Ch +
push eax  +
mov eax edi +
call sub_1015D2A  +
mov eax [ebp+var_8] +
mov edx [ebp+var_4] +
mov [edi+1BCh] eax +
xor esi 148F1F70h +
mov [edi+1B8h] ebx +
xor eax eax +
pop edi  +
or eax esi +
add edx 0D2F7D67Fh +
xor ecx ecx +
pop esi  +
or edx ecx +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
mov eax [ebp+arg_4] +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
sub esi eax +
mov ebx esi +
xor ebx 0FC1422F5h +
push edi  +
movzx edx bl +
mov edi [ecx+edx*8+0B8h] +
mov edx [ecx+edx*8+0BCh] +
mov [ebp+var_C] edi +
mov edi [ebp+arg_0] +
xor edi eax +
mov eax edi +
xor eax 99D1A715h +
mov [ebp+var_8] edx +
push eax  +
mov edx (offset loc_10055CA+6) +
mov eax ecx +
mov [ebp+var_4] edi +
call sub_1015D2A  +
mov ecx [ebp+arg_4] +
sub ecx [ebp+arg_0] +
mov eax [ebp+var_C] +
mov edx esi +
xor edx edi +
xor ecx ebx +
xor edx ebx +
shr ebx 8 +
movzx edi bl +
xor edi 11h +
xor edx 0DC6D95D4h +
lea ebx [ecx-31A3D54Eh] +
xor ebx [edi+eax] +
movzx edi dl +
xor edi 0Fh +
mov [eax+edi] ebx +
mov eax [ebp+arg_4] +
xor esi ecx +
xor esi [ebp+var_4] +
add eax 5DFF90Ch +
xor eax edx +
xor eax ecx +
xor esi 5CF5B81Eh +
sub eax 7470B952h +
xor ecx ecx +
sub esi 5B99BEE5h +
xor edx edx +
pop edi  +
or eax ecx +
or edx esi +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 44h +
mov eax [ebp+arg_4] +
push ebx  +
push esi  +
mov esi ecx +
push edi  +
mov edi [ebp+arg_0] +
lea ebx [eax+edi] +
lea edx [ebx-463B9F12h] +
mov ecx edi +
xor ecx eax +
movzx eax dl +
xor eax 0D5h +
mov [ebp+var_4] edx +
mov edx [eax+esi] +
mov eax [eax+esi+4] +
mov [ebp+var_20] eax +
mov eax [ebp+var_4] +
shr eax 8 +
movzx eax al +
xor eax 6Ch +
mov [ebp+var_24] edx +
mov edx [eax+esi] +
mov eax [eax+esi+4] +
mov [ebp+var_30] eax +
mov eax [ebp+var_4] +
shr eax 10h +
movzx eax al +
xor eax 0Ch +
mov [ebp+var_34] edx +
mov edx [eax+esi] +
mov eax [eax+esi+4] +
mov [ebp+var_8] ecx +
add ecx 575824E4h +
mov [ebp+var_2C] edx +
mov [ebp+var_28] eax +
push ecx  +
mov edx (offset loc_100562F+1) +
mov eax esi +
call sub_1015D2A  +
mov eax [ebp+arg_4] +
mov edx [ebp+var_2C] +
shl eax 4 +
mov ecx edi +
shr ecx 4 +
add ecx eax +
xor ecx [ebp+var_4] +
movzx eax cl +
mov [ebp+var_18] eax +
mov eax [edx+eax*2+0AEh] +
mov edx [ebp+arg_4] +
mov [ebp+var_44] eax +
lea eax [ebx+456F00D6h] +
xor eax [ebp+var_8] +
add ebx 6ECDC202h +
xor eax [ebp+var_4] +
mov [ebp+var_C] eax +
mov eax edi +
sub edi edx +
xor edi [ebp+var_C] +
xor eax ecx +
xor eax [ebp+var_8] +
xor edi ecx +
xor eax edx +
xor edi 4C7BDD27h +
xor ebx eax +
xor ebx [ebp+var_C] +
mov [ebp+var_1C] eax +
mov edx edi +
xor edx eax +
xor edx [ebp+var_4] +
mov eax edi +
shr eax 8 +
xor edx 0A11E8B1Bh +
xor al 4 +
movzx eax al +
mov [ebp+var_14] edx +
cdq   +
mov [ebp+var_10] edi +
mov [ebp+arg_4] ebx +
mov edi eax +
mov ebx edx +
mov al byte ptr [ebp+var_10] +
xor al 0F8h +
movzx eax al +
cdq   +
sub eax edi +
sbb edx ebx +
add eax [ebp+var_24] +
mov edi [ebp+var_14] +
adc edx [ebp+var_20] +
mov [ebp+var_3C] eax +
mov eax [ebp+arg_4] +
xor eax 712BAD48h +
xor ebx ebx +
or eax ebx +
mov ebx [ebp+arg_4] +
xor ebx [ebp+var_10] +
mov [ebp+var_38] edx +
xor ebx [ebp+var_8] +
xor edx edx +
xor ebx [ebp+var_4] +
add edi 91718010h +
or edx edi +
mov edi [ebp+var_3C] +
mov [edi] edx +
mov edx [ebp+var_34] +
mov [edi+4] eax +
shr ecx 8 +
movzx eax bl +
mov [eax+esi-17h] edx +
mov edx [ebp+var_30] +
mov [eax+esi-13h] edx +
xor cl 4Eh +
movzx eax cl +
cdq   +
mov ecx eax +
add ecx [ebp+var_24] +
mov eax ebx +
adc edx [ebp+var_20] +
shr eax 8 +
movzx eax al +
xor eax 53h +
mov [eax+esi] ecx +
mov ecx [ebp+var_2C] +
mov [eax+esi+4] edx +
mov eax ebx +
shr eax 10h +
movzx eax al +
xor eax 48h +
mov [esi+eax*8] ecx +
mov ecx [ebp+var_28] +
mov [esi+eax*8+4] ecx +
mov eax [ebp+var_38] +
movzx ecx byte ptr [ebp+arg_4] +
mov edx [ebp+var_C] +
shr ebx 18h +
xor ebx 1Eh +
mov [esi+ebx*8+4] eax +
movzx eax byte ptr [ebp+var_8] +
xor eax ecx +
movzx ecx byte ptr [ebp+var_14] +
xor eax ecx +
mov ecx [ebp+var_44] +
xor eax 0C0h +
xor eax [ebp+var_18] +
mov [esi+ebx*8] edi +
mov [esi+eax*8] ecx +
xor ecx ecx +
mov [esi+eax*8+4] ecx +
mov ecx [ebp+var_1C] +
xor eax eax +
add ecx 0CD5F0D1Eh +
xor esi esi +
xor edx 3CE06550h +
pop edi  +
or eax ecx +
or edx esi +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 3Ch +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
mov esi ecx +
push edi  +
mov edi [ebp+arg_4] +
lea ecx [ebx+edi+7A634294h] +
movzx eax cl +
mov [ebp+var_14] eax +
xor eax 0B4h +
mov edx [esi+eax*8] +
mov eax [esi+eax*8+4] +
mov [ebp+var_18] eax +
mov eax ecx +
shr eax 8 +
movzx eax al +
xor eax 0F4h +
mov [ebp+var_1C] edx +
mov edx [esi+eax*8] +
mov eax [esi+eax*8+4] +
mov [ebp+var_28] eax +
mov eax ecx +
shr eax 10h +
movzx eax al +
xor eax 0E8h +
mov [ebp+var_2C] edx +
mov edx [esi+eax*8] +
mov eax [esi+eax*8+4] +
mov [ebp+var_30] eax +
and [ebp+var_20] 0 +
mov eax ecx +
shr eax 18h +
mov [ebp+var_34] edx +
mov edx [eax+esi+77h] +
mov eax [eax+esi+7Bh] +
mov [ebp+var_C] eax +
lea eax [edi-6CB92054h] +
movzx eax al +
mov [ebp+var_10] edx +
mov edx [ebp+var_1C] +
xor eax 5Ah +
mov eax [edx+eax] +
add ebx 9DF927E6h +
xor ebx ecx +
mov [ebp+var_24] eax +
lea eax [ebx-1ABC3AD2h] +
push eax  +
mov edx (offset loc_100566A+2) +
mov eax esi +
mov [ebp+var_8] ecx +
call sub_1015D2A  +
mov eax [ebp+var_1C] +
mov eax [eax] +
mov ecx [ebp+var_10] +
mov eax [eax+ecx*4] +
mov edx [ebp+var_24] +
and [ebp+var_38] 0 +
mov [ebp+var_3C] eax +
mov eax [ebp+arg_0] +
and [ebp+var_38] 0 +
shl eax 4 +
mov ecx edi +
shr ecx 4 +
add eax ecx +
mov [ebp+var_C] eax +
lea ecx [edi-6CB92054h] +
xor eax ecx +
xor eax [ebp+var_8] +
mov ecx [ebp+var_2C] +
mov [ebp+var_4] eax +
movzx eax al +
add ecx edx +
mov edx [ebp+var_1C] +
xor eax 7Fh +
mov [eax+edx] ecx +
lea eax [edi-2AB0E22Eh] +
xor eax ebx +
lea ecx [edi-6CB92054h] +
xor eax ecx +
mov [ebp+var_8] eax +
mov eax [ebp+var_C] +
xor eax [ebp+var_4] +
xor edx edx +
xor eax ebx +
mov [ebp+var_C] eax +
mov eax [ebp+var_4] +
shr eax 8 +
movzx ecx al +
movzx eax byte ptr [ebp+var_24] +
xor ecx 0BEh +
and ecx eax +
mov eax [ebp+var_34] +
xor eax [ebp+var_3C] +
call sub_1034CF9  +
movzx ecx byte ptr [ebp+var_2C] +
mov ebx eax +
mov eax [ebp+var_4] +
shr eax 18h +
sub eax 5 +
xor edx edx +
call sub_1034CDA  +
movzx ecx word ptr [ebp+var_8] +
sub eax ecx +
mov ecx [ebp+var_C] +
add eax 63FDh +
and ebx eax +
movzx eax byte ptr [ebp+var_8] +
movzx edx cl +
xor eax edx +
xor eax 51h +
xor eax [ebp+var_14] +
xor edx edx +
and dword ptr [esi+eax*8+4] 0 +
mov [esi+eax*8] ebx +
mov eax [ebp+arg_0] +
sub eax edi +
xor eax [ebp+var_8] +
xor esi esi +
xor eax [ebp+var_4] +
pop edi  +
xor eax 4013997h +
or eax esi +
xor ecx 0D9136DB7h +
pop esi  +
or edx ecx +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
xor ecx ecx +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
mov edi edi +
xor al 57h +
jmp ds:ConvertStringSecurityDescriptorToSecurityDescriptorW  +
***
mov ebx ds:dword_102543C +
imul ebx edx +
lea ebx Address[ebx] +
jmp loc_103393D  +
***
mov ebx eax +
jmp loc_1033975  +
***
xor edi edi +
jmp loc_1033BE6  +
***
mov eax edi +
inc edi  +
mov [ebp-0D4h] edi +
mov edi 0F000h +
test [ebx+eax*2+8] di +
jz loc_1033BC6  +
movzx eax word ptr [ebx+eax*2+8] +
and eax edx +
mov edx [ebx] +
lea eax __ImageBase[eax+edx] +
xor edi edi +
mov [ebp-68h] eax +
sub [ebp-68h] esi +
mov [ebp-0D0h] eax +
jz loc_1033C99  +
movzx edx byte ptr [edi+esi] +
add edx ecx +
add [ebp-60h] edx +
add edx [ebp-5Ch] +
mov eax edx +
imul eax eax +
rol eax 0Ch +
ror edx 0Ch +
xor eax edx +
mov edx ecx +
mul  edx +
add eax edx +
mov edx ecx +
mul  edx +
add eax edx +
add [ebp-60h] eax +
mov [ebp-5Ch] eax +
inc edi  +
cmp edi [ebp-68h] +
jb loc_1033C65  +
mov esi [ebp-0D0h] +
mov eax [esi] +
sub eax [ebp-0F8h] +
mov [ebp-0F4h] eax +
xor edi edi +
movzx edx byte ptr [ebp+edi-0F4h] +
add edx ecx +
add [ebp-60h] edx +
add edx [ebp-5Ch] +
mov eax edx +
imul eax eax +
rol eax 0Ch +
ror edx 0Ch +
xor eax edx +
mov edx ecx +
mul  edx +
add eax edx +
mov edx ecx +
mul  edx +
add eax edx +
add [ebp-60h] eax +
inc edi  +
cmp edi 4 +
mov [ebp-5Ch] eax +
jb loc_1033CAF  +
add esi 4 +
mov edx 0FFFh +
jmp loc_1033BC6  +
***
mov esi [ebp-64h] +
mov eax [ebp-74h] +
lea edi [esi+eax] +
lea ecx [ebp+edx-44h] +
mov al [ecx+edi] +
xor al [ecx] +
xor [ebp-55h] al +
inc edx  +
mov [ecx+esi] al +
cmp edx ebx +
jb loc_10340C2  +
sub [ebp-0CCh] ebx +
add [ebp-78h] ebx +
add esi ebx +
add [ebp-7Ch] ebx +
mov [ebp-64h] esi +
jmp loc_1033DE6  +
***
mov edi edi +
push esi  +
call sub_10115FE  +
test eax eax +
jge loc_10342FC  +
mov esi eax +
call sub_1012267  +
mov eax esi +
pop esi  +
retn   +
mov eax ds:off_1004E74 +
call eax  +
jmp loc_10342F1  +
***
xor edi edi +
jmp loc_10345EE  +
***
mov eax edi +
inc edi  +
mov [ebp-0D4h] edi +
mov edi 0F000h +
test [ebx+eax*2+8] di +
jz loc_10345CE  +
movzx eax word ptr [ebx+eax*2+8] +
and eax edx +
mov edx [ebx] +
xor edi edi +
lea eax __ImageBase[eax+edx] +
mov [ebp-68h] eax +
sub [ebp-68h] esi +
mov [ebp-0CCh] eax +
jz loc_10346A1  +
movzx edx byte ptr [edi+esi] +
add edx ecx +
add [ebp-60h] edx +
add edx [ebp-5Ch] +
mov eax edx +
imul eax eax +
rol eax 0Ch +
ror edx 0Ch +
xor eax edx +
mov edx ecx +
mul  edx +
add eax edx +
mov edx ecx +
mul  edx +
add eax edx +
add [ebp-60h] eax +
inc edi  +
mov [ebp-5Ch] eax +
cmp edi [ebp-68h] +
jb loc_103466D  +
mov esi [ebp-0CCh] +
mov eax [esi] +
sub eax [ebp-0FCh] +
mov [ebp-0F8h] eax +
xor edi edi +
movzx edx byte ptr [ebp+edi-0F8h] +
add edx ecx +
add [ebp-60h] edx +
add edx [ebp-5Ch] +
mov eax edx +
imul eax eax +
rol eax 0Ch +
ror edx 0Ch +
xor eax edx +
mov edx ecx +
mul  edx +
add eax edx +
mov edx ecx +
mul  edx +
add eax edx +
add [ebp-60h] eax +
mov [ebp-5Ch] eax +
inc edi  +
cmp edi 4 +
jb loc_10346B7  +
add esi 4 +
mov edx 0FFFh +
jmp loc_10345CE  +
***
mov eax [ebp-70h] +
mov esi [ebp-64h] +
lea edi [esi+eax] +
lea ecx [ebp+edx-44h] +
mov al [ecx+edi] +
xor al [ecx] +
xor [ebp-55h] al +
mov [ecx+esi] al +
inc edx  +
cmp edx ebx +
jb loc_1034AAF  +
sub [ebp-0BCh] ebx +
add [ebp-74h] ebx +
add esi ebx +
add [ebp-0D0h] ebx +
mov [ebp-64h] esi +
jmp loc_10347F1  +
***
cmp cl 40h +
cmp cl 40h +
mov eax [esp+arg_4] +
sub ecx eax +
sub ecx eax +
mov eax offset loc_1005830 +
mov eax offset loc_1005830 +
mov eax offset loc_1005830 +
shr eax 8 +
mov cl al +
xor cl 5Ch +
mov dl al +
xor dl 2Eh +
mov byte_10424C8 cl +
mov byte_10424C9 cl +
mov byte_10424CA dl +
mov byte_10424CB cl +
mov cl al +
mov dl al +
xor cl 53h +
xor dl 57h +
mov byte_10424CC cl +
mov byte_10424CE dl +
mov cl al +
mov dl al +
xor cl 49h +
xor dl 56h +
xor al 44h +
mov byte_10424CD cl +
mov byte_10424CF dl +
mov byte_10424D0 cl +
mov byte_10424D1 al +
retn   +
***
xchg bl [ebx] +
add ah al +
add eax 576E06B3h +
pushf   +
push ebp  +
mov ebp esp +
sub esp 154h +
mov [ebp-144h] eax +
lea eax [ebp+4] +
mov [ebp-148h] ecx +
sub eax 4 +
mov [ebp-150h] edx +
mov edx 0FFFFFFFh +
mov [ebp-140h] ebx +
mov [ebp-154h] esi +
mov [ebp-14Ch] edi +
mov edi offset __ImageBase +
mov [ebp-0E8h] eax +
add eax 0Ch +
mov [ebp-0E4h] eax +
mov eax [eax] +
mov ecx [eax] +
mov esi [eax+4] +
and esi edx +
mov [ebp-0F8h] esi +
shr ecx 2 +
mov esi [eax+8] +
add eax 0Ch +
and ecx edx +
and esi edx +
add ecx edi +
mov [ebp-0C8h] ecx +
mov [ebp-0C0h] esi +
lea edx [eax-1] +
cmp edx offset Address +
mov [ebp-70h] eax +
mov [ebp-7Ch] edx +
jb loc_1034FD1  +
mov edx ds:dword_101A35C +
mov ebx ds:dword_102543C +
imul edx ebx +
lea ebx Address[edx] +
mov edx [ebp-7Ch] +
cmp edx ebx +
jnb loc_1034FD1  +
mov ebx ds:dword_102543C +
mov eax edx +
xor edx edx +
sub eax offset Address +
div  ebx +
mov edx ds:dword_102543C +
imul edx eax +
mov eax [ebp-70h] +
lea ebx Address[edx] +
mov edx [ebp-7Ch] +
jmp loc_1034FD3  +
xor ebx ebx +
test ebx ebx +
jnz loc_1034FDF  +
and edx 0FFFF0000h +
mov ebx edx +
sub eax ebx +
add eax 0FFFFFFC0h +
jns loc_1034FE8  +
xor eax eax +
add eax ebx +
push 40h  +
pop edx  +
mov byte ptr [eax] 0 +
inc eax  +
dec edx  +
jnz loc_1034FED  +
lea eax [ecx+esi] +
mov [ebp-70h] eax +
mov eax ds:dword_102543C +
mov [ebp-78h] ecx +
sub eax esi +
lea ecx [eax+1] +
sub [ebp-78h] edi +
xor eax eax +
mov [ebp-68h] ecx +
test ecx ecx +
jz loc_103503D  +
mov edx dword_10410FC +
shr dword ptr [ebp-68h] 10h +
imul edx edx +
add edx 269EC3h +
mov dword_10410FC edx +
shr edx 10h +
shl eax 10h +
or eax edx +
cmp dword ptr [ebp-68h] 0 +
jnz loc_1035013  +
xor edx edx +
div  ecx +
add ebx edx +
push esi  +
push dword ptr [ebp-78h]  +
mov [ebp-68h] ebx +
mov eax ebx +
mov eax 282A709Dh +
mov eax [ebp-70h] +
pop ecx  +
test esi esi +
pop ecx  +
mov ecx [eax] +
mov eax [eax+4] +
mov [ebp-0ECh] eax +
mov eax [ebp-0C8h] +
mov [ebp-7Ch] ebx +
mov ebx 0FFFFF000h +
mov [ebp-0F0h] ecx +
mov byte ptr [ebp-55h] 0 +
mov [ebp-0C4h] esi +
mov [ebp-0CCh] eax +
jz loc_103570B  +
lea esi [ebp-0F0h] +
mov eax 83D90969h +
mov eax 0FFFFFFFh +
mov esi [ebp-0ECh] +
mov ecx ds:off_1004F44 +
mov edx [ebp-0F0h] +
and dword ptr [ebp-64h] 0 +
and dword ptr [ebp-60h] 0 +
and edx eax +
and esi eax +
mov eax edi +
add edx edi +
sub eax ecx +
mov [ebp-0FCh] eax +
jnz loc_103510D  +
xor ebx ebx +
test esi esi +
jbe loc_103531E  +
mov edi 1BBD2D76h +
movzx ecx byte ptr [ebx+edx] +
sub ecx edi +
add [ebp-64h] ecx +
add ecx [ebp-60h] +
mov eax ecx +
imul eax eax +
rol eax 0Ah +
ror ecx 0Ah +
xor eax ecx +
imul eax eax +
ror eax 2 +
add [ebp-64h] eax +
inc ebx  +
cmp ebx esi +
mov [ebp-60h] eax +
jb loc_10350D8  +
jmp loc_103531E  +
lea eax [edx+esi] +
mov ecx edx +
mov [ebp-74h] eax +
mov eax ds:dword_100003C +
lea eax dword_10000A0[eax] +
mov [ebp-6Ch] eax +
mov eax [eax] +
add eax edi +
sub ecx edi +
mov edi [ebp-6Ch] +
mov edi [edi+4] +
mov [ebp-6Ch] edi +
mov edi ecx +
and edi ebx +
mov [ebp-5Ch] edi +
mov edi ecx +
sub edi [ebp-5Ch] +
add ecx esi +
mov esi ecx +
and esi ebx +
sub ecx esi +
mov [ebp-0DCh] ecx +
mov ecx [ebp-6Ch] +
mov [ebp-0E0h] esi +
mov esi eax +
add ecx eax +
mov [ebp-0D8h] ecx +
cmp eax ecx +
jz loc_1035175  +
mov eax [ebp-5Ch] +
cmp [esi] eax +
jnb loc_1035175  +
add esi [esi+4] +
cmp esi [ebp-0D8h] +
jnz loc_1035163  +
mov ecx 0FFFh +
and dword ptr [ebp-0D0h] 0 +
cmp esi [ebp-0D8h] +
jz loc_10351BE  +
mov eax [ebp-5Ch] +
cmp [esi] eax +
jnz loc_10351BE  +
mov eax [esi+4] +
sub eax 8 +
shr eax 1 +
jz loc_10351BE  +
lea ebx [esi+8] +
mov [ebp-5Ch] ebx +
mov ebx [ebp-5Ch] +
movzx ebx word ptr [ebx] +
and ebx ecx +
cmp ebx edi +
jnb loc_10351BE  +
inc dword ptr [ebp-0D0h]  +
add dword ptr [ebp-5Ch] 2 +
cmp [ebp-0D0h] eax +
jnz loc_10351A0  +
mov edi 1BBD2D76h +
cmp esi [ebp-0D8h] +
jz loc_10352E5  +
mov eax [esi] +
cmp eax [ebp-0E0h] +
ja loc_10352E5  +
mov ebx [ebp-0D0h] +
mov eax [esi+4] +
add eax 0FFFFFFF8h +
shr eax 1 +
cmp ebx eax +
jnz loc_1035210  +
add esi [esi+4] +
cmp esi [ebp-0D8h] +
jz loc_10352E5  +
mov eax [ebp-0E0h] +
cmp [esi] eax +
ja loc_10352E5  +
xor ebx ebx +
jmp loc_10351E3  +
***
mov eax [ebp-0E0h] +
cmp [esi] eax +
jnz loc_103522D  +
movzx eax word ptr [esi+ebx*2+8] +
and eax ecx +
cmp eax [ebp-0DCh] +
jnb loc_10352E5  +
mov eax ebx +
inc ebx  +
mov [ebp-0D0h] ebx +
mov ebx 0F000h +
test [esi+eax*2+8] bx +
jz loc_10351C3  +
movzx eax word ptr [esi+eax*2+8] +
and eax ecx +
mov ecx [esi] +
lea eax __ImageBase[eax+ecx] +
mov [ebp-5Ch] eax +
xor ecx ecx +
sub [ebp-5Ch] edx +
mov [ebp-6Ch] eax +
jz loc_1035290  +
movzx ebx byte ptr [ecx+edx] +
sub ebx edi +
add [ebp-64h] ebx +
add ebx [ebp-60h] +
mov eax ebx +
imul eax eax +
rol eax 0Ah +
ror ebx 0Ah +
xor eax ebx +
imul eax eax +
ror eax 2 +
add [ebp-64h] eax +
mov [ebp-60h] eax +
inc ecx  +
cmp ecx [ebp-5Ch] +
jb loc_103525F  +
mov ebx [ebp-6Ch] +
mov eax [ebx] +
sub eax [ebp-0FCh] +
xor ecx ecx +
mov [ebp-0F4h] eax +
movzx edx byte ptr [ebp+ecx-0F4h] +
sub edx edi +
add [ebp-64h] edx +
add edx [ebp-60h] +
mov eax edx +
imul eax eax +
rol eax 0Ah +
ror edx 0Ah +
xor eax edx +
imul eax eax +
ror eax 2 +
add [ebp-64h] eax +
inc ecx  +
mov [ebp-60h] eax +
cmp ecx 4 +
jb loc_10352A3  +
mov ecx 0FFFh +
lea edx [ebx+4] +
jmp loc_10351C3  +
***
xor esi esi +
mov ebx [ebp-74h] +
sub ebx edx +
jz loc_103531E  +
movzx ecx byte ptr [esi+edx] +
sub ecx edi +
add [ebp-64h] ecx +
add ecx [ebp-60h] +
mov eax ecx +
imul eax eax +
rol eax 0Ah +
ror ecx 0Ah +
xor eax ecx +
imul eax eax +
ror eax 2 +
add [ebp-64h] eax +
mov [ebp-60h] eax +
inc esi  +
cmp esi ebx +
jb loc_10352EE  +
xor edi edi +
xor eax eax +
mov ecx eax +
and ecx 7 +
mov cl [ebp+ecx-64h] +
mov [ebp+eax-54h] cl +
inc eax  +
cmp eax 10h +
jb loc_1035322  +
mov eax 49D9D9A7h +
mov edx [ebp-4Ch] +
mov eax [ebp-54h] +
mov esi [ebp-48h] +
mov ecx [ebp-50h] +
mov [ebp-138h] eax +
mov [ebp-110h] eax +
mov eax ds:dword_101BE7C +
mov [ebp-13Ch] eax +
mov eax ds:dword_101BE80 +
mov [ebp-128h] eax +
mov eax ds:dword_101BE84 +
mov [ebp-114h] eax +
mov eax ds:dword_101BE88 +
mov [ebp-100h] eax +
mov eax [ebp-68h] +
mov [ebp-134h] ecx +
mov [ebp-10Ch] ecx +
lea ecx [ebp-44h] +
sub eax ecx +
mov [ebp-6Ch] eax +
mov eax [ebp-0C8h] +
sub eax [ebp-68h] +
mov [ebp-130h] edx +
mov [ebp-12Ch] esi +
mov [ebp-108h] edx +
mov [ebp-104h] esi +
mov [ebp-124h] edi +
mov [ebp-120h] edi +
mov [ebp-11Ch] edi +
mov [ebp-118h] edi +
mov [ebp-74h] eax +
lea esi [ebp-13Ch] +
lea edi [ebp-0BCh] +
push 10h  +
pop ecx  +
movs   +
mov ecx [ebp-9Ch] +
mov edx [ebp-8Ch] +
mov eax [ebp-0ACh] +
mov esi [ebp-0BCh] +
mov dword ptr [ebp-5Ch] 2 +
lea edi [esi+edx] +
rol edi 7 +
mov ebx [ebp-0B8h] +
xor eax edi +
lea edi [esi+eax] +
rol edi 9 +
xor ecx edi +
lea edi [ecx+eax] +
rol edi 0Dh +
xor edx edi +
lea edi [ecx+edx] +
ror edi 0Eh +
xor esi edi +
mov edi [ebp-0A8h] +
add ebx edi +
rol ebx 7 +
xor [ebp-98h] ebx +
mov ebx [ebp-98h] +
add edi ebx +
rol edi 9 +
xor [ebp-88h] edi +
mov edi ebx +
mov ebx [ebp-88h] +
add ebx edi +
mov edi [ebp-88h] +
rol ebx 0Dh +
xor [ebp-0B8h] ebx +
mov ebx [ebp-0B8h] +
add edi ebx +
ror edi 0Eh +
mov ebx [ebp-94h] +
xor [ebp-0A8h] edi +
mov edi [ebp-0A4h] +
add edi ebx +
rol edi 7 +
xor [ebp-84h] edi +
mov edi ebx +
mov ebx [ebp-84h] +
add edi ebx +
rol edi 9 +
xor [ebp-0B4h] edi +
mov edi ebx +
mov ebx [ebp-0B4h] +
add ebx edi +
mov edi [ebp-0B4h] +
rol ebx 0Dh +
xor [ebp-0A4h] ebx +
mov ebx [ebp-0A4h] +
add edi ebx +
mov ebx [ebp-80h] +
ror edi 0Eh +
xor [ebp-94h] edi +
mov edi [ebp-90h] +
add edi ebx +
rol edi 7 +
xor [ebp-0B0h] edi +
mov edi ebx +
mov ebx [ebp-0B0h] +
add edi ebx +
rol edi 9 +
xor [ebp-0A0h] edi +
mov edi ebx +
mov ebx [ebp-0A0h] +
add ebx edi +
mov edi [ebp-0A0h] +
rol ebx 0Dh +
xor [ebp-90h] ebx +
mov ebx [ebp-90h] +
add edi ebx +
ror edi 0Eh +
xor [ebp-80h] edi +
mov edi [ebp-0B0h] +
add edi esi +
rol edi 7 +
xor [ebp-0B8h] edi +
mov edi [ebp-0B8h] +
add edi esi +
rol edi 9 +
xor [ebp-0B4h] edi +
mov ebx [ebp-0B4h] +
mov edi [ebp-0B8h] +
add ebx edi +
mov edi [ebp-0B4h] +
rol ebx 0Dh +
xor [ebp-0B0h] ebx +
mov ebx [ebp-0B0h] +
add ebx edi +
mov edi [ebp-0A8h] +
add edi eax +
ror ebx 0Eh +
xor esi ebx +
rol edi 7 +
xor [ebp-0A4h] edi +
mov ebx [ebp-0A4h] +
mov edi [ebp-0A8h] +
add ebx edi +
mov edi [ebp-0A4h] +
rol ebx 9 +
xor [ebp-0A0h] ebx +
mov ebx [ebp-0A0h] +
add ebx edi +
mov edi [ebp-0A0h] +
rol ebx 0Dh +
xor eax ebx +
add edi eax +
mov ebx [ebp-98h] +
ror edi 0Eh +
xor [ebp-0A8h] edi +
mov edi [ebp-94h] +
add edi ebx +
rol edi 7 +
xor [ebp-90h] edi +
mov ebx [ebp-90h] +
mov edi [ebp-94h] +
add ebx edi +
rol ebx 9 +
mov edi [ebp-90h] +
xor ecx ebx +
add edi ecx +
mov ebx [ebp-84h] +
rol edi 0Dh +
xor [ebp-98h] edi +
mov edi [ebp-98h] +
add edi ecx +
ror edi 0Eh +
xor [ebp-94h] edi +
mov edi [ebp-80h] +
add edi ebx +
rol edi 7 +
xor edx edi +
mov edi [ebp-80h] +
add edi edx +
rol edi 9 +
xor [ebp-88h] edi +
mov edi [ebp-88h] +
add edi edx +
rol edi 0Dh +
xor [ebp-84h] edi +
mov ebx [ebp-84h] +
mov edi [ebp-88h] +
add ebx edi +
ror ebx 0Eh +
xor [ebp-80h] ebx +
dec dword ptr [ebp-5Ch]  +
jnz loc_1035401  +
mov [ebp-8Ch] edx +
xor edx edx +
push 40h  +
mov [ebp-0ACh] eax +
mov [ebp-9Ch] ecx +
mov [ebp-0BCh] esi +
pop ebx  +
xor eax eax +
mov ecx [ebp+eax-13Ch] +
add [ebp+eax-0BCh] ecx +
add eax 4 +
cmp eax ebx +
jl loc_1035664  +
lea edi [ebp-44h] +
inc dword ptr [ebp-11Ch]  +
lea esi [ebp-0BCh] +
push 10h  +
pop ecx  +
movs   +
cmp [ebp-0C4h] ebx +
jbe loc_10356CB  +
mov esi [ebp-6Ch] +
mov eax [ebp-74h] +
lea edi [esi+eax] +
lea ecx [ebp+edx-44h] +
mov al [ecx+edi] +
xor al [ecx] +
xor [ebp-55h] al +
mov [ecx+esi] al +
inc edx  +
cmp edx ebx +
jb loc_103569E  +
sub [ebp-0C4h] ebx +
add [ebp-7Ch] ebx +
add esi ebx +
add [ebp-0CCh] ebx +
mov [ebp-6Ch] esi +
jmp loc_10353D1  +
***
cmp [ebp-0C4h] edx +
jbe loc_10356FB  +
mov esi [ebp-0CCh] +
mov edi [ebp-7Ch] +
lea eax [ebp-44h] +
sub esi eax +
sub edi eax +
lea ecx [ebp+edx-44h] +
mov al [ecx+esi] +
xor al [ecx] +
xor [ebp-55h] al +
inc edx  +
mov [ecx+edi] al +
cmp edx [ebp-0C4h] +
jb loc_10356E3  +
mov esi [ebp-0C0h] +
mov ebx 0FFFFF000h +
mov edi offset __ImageBase +
mov ecx [ebp-70h] +
movzx ecx byte ptr [ecx+8] +
movzx eax byte ptr [ebp-55h] +
sub eax ecx +
jz loc_10357AA  +
call sub_100CD3B  +
mov ecx [ebp-0E4h] +
mov edi eax +
mov eax [ebp-0E8h] +
mov dword ptr [eax+8] offset sub_1023648 +
and ecx 0FFFFFFFCh +
mov edx 0FFFFh +
lea esi [ecx+0FFFh] +
and edi ebx +
and esi ebx +
xor eax eax +
mov ebx dword_10410FC +
imul ebx ebx +
add ebx 269EC3h +
mov dword_10410FC ebx +
shr ebx 10h +
shl eax 10h +
shr edx 10h +
or eax ebx +
test edx edx +
jnz loc_103574C  +
mov ebx 0FFFFh +
div  ebx +
inc edx  +
cmp ecx esi +
mov eax ecx +
mov [ebp-150h] edi +
mov [ebp-148h] edx +
mov dword ptr [ebp-74h] 0 +
jnb loc_10357A0  +
mov ecx [ebp-74h] +
mov [eax] ecx +
add eax 4 +
cmp eax esi +
jb loc_1035794  +
mov eax offset sub_1023648 +
jmp loc_103588B  +
mov eax [ebp-0C8h] +
mov ecx ds:off_1004F44 +
sub eax [ebp-68h] +
mov [ebp-0C0h] eax +
sub edi ecx +
mov [ebp-70h] edi +
jnz loc_10357CE  +
test eax eax +
jz loc_1035876  +
mov ecx ds:dword_1009298 +
mov eax [ebp-78h] +
mov edi [ebp-68h] +
sub edi [ebp-0C8h] +
add eax esi +
mov [ebp-74h] eax +
xor esi esi +
dec ecx  +
js loc_1035812  +
lea eax [ecx+esi] +
cdq   +
sub eax edx +
sar eax 1 +
mov edx ds:dword_100929C[eax*4] +
and edx 0FFFFFFFh +
cmp [ebp-78h] edx +
jnb loc_1035809  +
lea ecx [eax-1] +
jmp loc_103580E  +
jbe loc_1035816  +
lea esi [eax+1] +
cmp ecx esi +
jge loc_10357EA  +
mov ebx esi +
jmp loc_103586E  +
mov ebx eax +
jmp loc_103586E  +
mov eax ds:dword_100929C[ebx*4] +
mov ecx eax +
and ecx 0FFFFFFFh +
cmp ecx [ebp-74h] +
jnb loc_1035876  +
lea esi __ImageBase[ecx+edi] +
mov ecx eax +
shl ecx 2 +
sar ecx 1Eh +
sar eax 1Eh +
and ecx 3 +
and eax 3 +
xor edx edx +
dec ecx  +
jz loc_103585E  +
dec ecx  +
jz loc_1035856  +
dec ecx  +
jnz loc_1035867  +
mov edx [ebp-70h] +
jmp loc_1035867  +
mov edx [ebp-0C0h] +
jmp loc_1035867  +
mov edx [ebp-70h] +
sub edx [ebp-0C0h] +
dec eax  +
dec eax  +
jnz loc_103586D  +
add [esi] edx +
inc ebx  +
cmp ebx ds:dword_1009298 +
jb loc_103581A  +
mov eax ds:dword_102543C +
mov eax 0F45F7E67h +
mov ecx [ebp-0F8h] +
mov eax [ebp-68h] +
add eax ecx +
mov ecx [ebp-0E8h] +
mov [ecx+8] eax +
mov eax [ebp-0E4h] +
add dword ptr [eax] 0Ch +
mov eax [ebp-144h] +
mov edi [ebp-14Ch] +
mov ecx [ebp-148h] +
mov edx [ebp-150h] +
mov esi [ebp-154h] +
mov ebx [ebp-140h] +
mov esp ebp +
pop ebp  +
popf   +
retn   +
***
push edi  +
pushf   +
push ebp  +
mov ebp esp +
sub esp 154h +
mov [ebp-144h] eax +
mov [ebp-148h] ecx +
lea eax [ebp+4] +
sub eax 4 +
mov ecx 0FFFFFFFh +
mov [ebp-150h] edx +
mov [ebp-140h] ebx +
mov [ebp-154h] esi +
lea esi [eax+0Ch] +
mov [ebp-14Ch] edi +
mov [ebp-0ECh] eax +
mov eax [esi] +
mov ebx [eax] +
shr ebx 2 +
mov [ebp-78h] eax +
mov eax [eax+4] +
and eax ecx +
and ebx ecx +
mov ecx ds:dword_102543C +
xor edx edx +
mov [ebp-74h] ecx +
lea ecx [eax+ecx-1] +
mov eax ecx +
div  dword ptr [ebp-74h] +
mov eax ds:dword_102543C +
mov edi offset __ImageBase +
add ebx edi +
mov [ebp-0C8h] esi +
mov [ebp-0CCh] ebx +
sub ecx edx +
mov [ebp-7Ch] ecx +
mov eax ds:dword_101A35C +
mov [ebp-84h] eax +
mov eax ds:dword_102543C +
mov eax ds:dword_101A35C +
test eax eax +
jz loc_1035A05  +
and dword ptr [ebp-70h] 0 +
mov eax ds:dword_101A35C +
dec eax  +
lea ecx [eax+1] +
mov [ebp-5Ch] ecx +
xor eax eax +
test ecx ecx +
jz loc_10359A8  +
mov edx dword_10410FC +
shr dword ptr [ebp-5Ch] 10h +
imul edx edx +
add edx 269EC3h +
mov dword_10410FC edx +
shr edx 10h +
shl eax 10h +
or eax edx +
cmp dword ptr [ebp-5Ch] 0 +
jnz loc_103597E  +
xor edx edx +
div  ecx +
cmp dword ptr [ebp-84h] 0 +
mov [ebp-5Ch] edx +
jbe loc_10359F7  +
inc dword ptr [ebp-70h]  +
lea edx dword_1042454[edx*4] +
mov ecx 0FFFF16BEh +
mov eax 0E941h +
cmpxchg [edx] ecx +
cmp eax 0E941h +
jz loc_1035BC5  +
mov ecx ds:dword_101A35C +
mov eax [ebp-5Ch] +
inc eax  +
xor edx edx +
div  ecx +
mov eax [ebp-70h] +
mov [ebp-5Ch] edx +
cmp eax [ebp-84h] +
jb loc_10359B8  +
and dword ptr [ebp-60h] 0 +
cmp dword ptr [ebp-60h] 0 +
jnz loc_1035A90  +
call ds:__imp_GetLastError  +
and dword ptr [ebp-5Ch] 0 +
mov [ebp-74h] eax +
inc dword ptr [ebp-5Ch]  +
push 40h  +
push 1000h  +
push dword ptr [ebp-7Ch]  +
push 0  +
call ds:VirtualAlloc  +
test eax eax +
jnz loc_1035BDC  +
push eax  +
call ds:Sleep  +
cmp dword ptr [ebp-5Ch] 11h +
jb loc_1035A12  +
and dword ptr [ebp-60h] 0 +
cmp dword ptr [ebp-60h] 10000h +
jb loc_1035A52  +
test dword ptr [ebp-60h] 3 +
jz loc_1035A6C  +
cmp dword ptr [ebp-60h] 0 +
jz loc_1035A68  +
push 8000h  +
push 0  +
push dword ptr [ebp-60h]  +
call ds:VirtualFree  +
and dword ptr [ebp-60h] 0 +
push dword ptr [ebp-74h]  +
call ds:SetLastError  +
cmp dword ptr [ebp-60h] 0 +
jz loc_103594B  +
mov eax [ebp-60h] +
mov ecx [ebp-7Ch] +
test ecx ecx +
jz loc_1035A90  +
mov byte ptr [eax] 0 +
inc eax  +
dec ecx  +
jnz loc_1035A89  +
mov eax 0BA17A17Ch +
mov eax [ebp-78h] +
add dword ptr [esi] 8 +
mov esi [eax+4] +
and esi 0FFFFFFFh +
lea eax [esi+ebx] +
mov [ebp-74h] eax +
mov eax ds:dword_102543C +
sub eax esi +
lea ecx [eax+1] +
mov edx ecx +
mov [ebp-80h] ebx +
sub [ebp-80h] edi +
mov [ebp-78h] esi +
xor eax eax +
test ecx ecx +
jz loc_1035AEC  +
mov ebx dword_10410FC +
imul ebx ebx +
add ebx 269EC3h +
mov dword_10410FC ebx +
shr ebx 10h +
shl eax 10h +
shr edx 10h +
or eax ebx +
test edx edx +
jnz loc_1035AC5  +
xor edx edx +
div  ecx +
mov eax [ebp-60h] +
lea ebx [edx+eax] +
mov eax ebx +
push esi  +
push dword ptr [ebp-80h]  +
mov [ebp-70h] ebx +
mov eax 0BF7FAD8h +
mov eax [ebp-74h] +
test esi esi +
pop ecx  +
pop ecx  +
mov ecx [eax] +
mov eax [eax+4] +
mov [ebp-0F0h] eax +
mov eax [ebp-0CCh] +
mov [ebp-84h] ebx +
mov ebx 0FFFFF000h +
mov [ebp-0F4h] ecx +
mov byte ptr [ebp-55h] 0 +
mov [ebp-60h] esi +
mov [ebp-7Ch] eax +
jz loc_10361F9  +
lea esi [ebp-0F4h] +
mov eax 3A6EF608h +
mov esi [ebp-0F4h] +
mov eax [ebp-0F0h] +
mov ecx 0FFFFFFFh +
and dword ptr [ebp-68h] 0 +
and dword ptr [ebp-64h] 0 +
and eax ecx +
and esi ecx +
add esi edi +
mov ecx ds:off_1004F44 +
mov [ebp-5Ch] eax +
mov eax edi +
sub eax ecx +
mov [ebp-0FCh] eax +
jnz loc_1035BE4  +
xor edi edi +
cmp [ebp-5Ch] edi +
jbe loc_1035E06  +
mov ecx 637CE67Ch +
movzx edx byte ptr [edi+esi] +
add edx ecx +
add [ebp-68h] edx +
add edx [ebp-64h] +
mov eax edx +
imul eax eax +
rol eax 0Ch +
ror edx 0Ch +
xor eax edx +
mov edx ecx +
mul  edx +
add eax edx +
mov edx ecx +
mul  edx +
add eax edx +
add [ebp-68h] eax +
mov [ebp-64h] eax +
inc edi  +
cmp edi [ebp-5Ch] +
jb loc_1035B8C  +
jmp loc_1035E06  +
mov eax ds:dword_102543C +
imul eax [ebp-5Ch] +
lea eax Address[eax] +
mov [ebp-60h] eax +
jmp loc_10359FB  +
***
mov [ebp-60h] eax +
jmp loc_1035A40  +
***
mov edx ds:dword_100003C +
lea edx dword_10000A0[edx] +
mov eax [ebp-5Ch] +
mov ecx esi +
add eax esi +
mov [ebp-0D4h] eax +
mov eax [edx] +
add eax edi +
sub ecx edi +
mov edx [edx+4] +
mov edi ecx +
and edi ebx +
mov [ebp-6Ch] edi +
mov edi ecx +
sub edi [ebp-6Ch] +
mov [ebp-0D0h] edi +
mov edi [ebp-5Ch] +
add edx eax +
add ecx edi +
mov edi ecx +
and edi ebx +
sub ecx edi +
mov ebx eax +
cmp eax edx +
mov [ebp-0E8h] edi +
mov [ebp-0E4h] ecx +
mov [ebp-0E0h] edx +
jz loc_1035C4F  +
mov eax [ebp-6Ch] +
cmp [ebx] eax +
jnb loc_1035C4F  +
add ebx [ebx+4] +
cmp ebx [ebp-0E0h] +
jnz loc_1035C3D  +
and dword ptr [ebp-0D8h] 0 +
cmp ebx [ebp-0E0h] +
mov edx 0FFFh +
jz loc_1035C94  +
mov eax [ebp-6Ch] +
cmp [ebx] eax +
jnz loc_1035C94  +
mov eax [ebx+4] +
sub eax 8 +
shr eax 1 +
jz loc_1035C94  +
lea ecx [ebx+8] +
movzx edi word ptr [ecx] +
and edi edx +
cmp edi [ebp-0D0h] +
jnb loc_1035C94  +
inc dword ptr [ebp-0D8h]  +
inc ecx  +
inc ecx  +
cmp [ebp-0D8h] eax +
jnz loc_1035C77  +
mov ecx 637CE67Ch +
cmp ebx [ebp-0E0h] +
jz loc_1035DC7  +
mov eax [ebx] +
cmp eax [ebp-0E8h] +
ja loc_1035DC7  +
mov edi [ebp-0D8h] +
mov eax [ebx+4] +
add eax 0FFFFFFF8h +
shr eax 1 +
cmp edi eax +
jnz loc_1035CE6  +
add ebx [ebx+4] +
cmp ebx [ebp-0E0h] +
jz loc_1035DC7  +
mov eax [ebp-0E8h] +
cmp [ebx] eax +
ja loc_1035DC7  +
xor edi edi +
jmp loc_1035CB9  +
***
mov eax [ebp-0E8h] +
cmp [ebx] eax +
jnz loc_1035D03  +
movzx eax word ptr [ebx+edi*2+8] +
and eax edx +
cmp eax [ebp-0E4h] +
jnb loc_1035DC7  +
mov eax edi +
inc edi  +
mov [ebp-0D8h] edi +
mov edi 0F000h +
test [ebx+eax*2+8] di +
jz loc_1035C99  +
movzx eax word ptr [ebx+eax*2+8] +
and eax edx +
mov edx [ebx] +
lea eax __ImageBase[eax+edx] +
mov [ebp-6Ch] eax +
xor edi edi +
sub [ebp-6Ch] esi +
mov [ebp-0D0h] eax +
jz loc_1035D6C  +
movzx edx byte ptr [edi+esi] +
add edx ecx +
add [ebp-68h] edx +
add edx [ebp-64h] +
mov eax edx +
imul eax eax +
rol eax 0Ch +
ror edx 0Ch +
xor eax edx +
mov edx ecx +
mul  edx +
add eax edx +
mov edx ecx +
mul  edx +
add eax edx +
add [ebp-68h] eax +
inc edi  +
mov [ebp-64h] eax +
cmp edi [ebp-6Ch] +
jb loc_1035D38  +
mov esi [ebp-0D0h] +
mov eax [esi] +
sub eax [ebp-0FCh] +
mov [ebp-0F8h] eax +
xor edi edi +
movzx edx byte ptr [ebp+edi-0F8h] +
add edx ecx +
add [ebp-68h] edx +
add edx [ebp-64h] +
mov eax edx +
imul eax eax +
rol eax 0Ch +
ror edx 0Ch +
xor eax edx +
mov edx ecx +
mul  edx +
add eax edx +
mov edx ecx +
mul  edx +
add eax edx +
add [ebp-68h] eax +
mov [ebp-64h] eax +
inc edi  +
cmp edi 4 +
jb loc_1035D82  +
mov edx 0FFFh +
add esi 4 +
jmp loc_1035C99  +
***
xor edi edi +
mov ebx [ebp-0D4h] +
sub ebx esi +
jz loc_1035E06  +
movzx edx byte ptr [edi+esi] +
add edx ecx +
add [ebp-68h] edx +
add edx [ebp-64h] +
mov eax edx +
imul eax eax +
rol eax 0Ch +
ror edx 0Ch +
xor eax edx +
mov edx ecx +
mul  edx +
add eax edx +
mov edx ecx +
mul  edx +
add eax edx +
add [ebp-68h] eax +
mov [ebp-64h] eax +
inc edi  +
cmp edi ebx +
jb loc_1035DD3  +
xor edi edi +
xor eax eax +
mov ecx eax +
and ecx 7 +
mov cl [ebp+ecx-68h] +
mov [ebp+eax-54h] cl +
inc eax  +
cmp eax 10h +
jb loc_1035E0A  +
mov eax 7659CE55h +
mov edx [ebp-4Ch] +
mov ecx [ebp-50h] +
mov esi [ebp-48h] +
mov eax [ebp-54h] +
mov [ebp-138h] eax +
mov [ebp-110h] eax +
mov eax ds:dword_101BE7C +
mov [ebp-13Ch] eax +
mov eax ds:dword_101BE80 +
mov [ebp-128h] eax +
mov eax ds:dword_101BE84 +
mov [ebp-114h] eax +
mov eax ds:dword_101BE88 +
mov [ebp-100h] eax +
mov eax [ebp-70h] +
mov [ebp-134h] ecx +
mov [ebp-10Ch] ecx +
lea ecx [ebp-44h] +
sub eax ecx +
mov [ebp-5Ch] eax +
mov eax [ebp-0CCh] +
sub eax [ebp-70h] +
mov [ebp-130h] edx +
mov [ebp-12Ch] esi +
mov [ebp-108h] edx +
mov [ebp-104h] esi +
mov [ebp-124h] edi +
mov [ebp-120h] edi +
mov [ebp-11Ch] edi +
mov [ebp-118h] edi +
mov [ebp-0D4h] eax +
lea esi [ebp-13Ch] +
lea edi [ebp-0C4h] +
push 10h  +
pop ecx  +
movs   +
mov edx [ebp-94h] +
mov ecx [ebp-0A4h] +
mov eax [ebp-0B4h] +
mov esi [ebp-0C4h] +
mov dword ptr [ebp-6Ch] 2 +
lea edi [esi+edx] +
rol edi 7 +
mov ebx [ebp-0C0h] +
xor eax edi +
lea edi [esi+eax] +
rol edi 9 +
xor ecx edi +
lea edi [ecx+eax] +
rol edi 0Dh +
xor edx edi +
lea edi [ecx+edx] +
ror edi 0Eh +
xor esi edi +
mov edi [ebp-0B0h] +
add ebx edi +
rol ebx 7 +
xor [ebp-0A0h] ebx +
mov ebx [ebp-0A0h] +
add edi ebx +
rol edi 9 +
xor [ebp-90h] edi +
mov edi ebx +
mov ebx [ebp-90h] +
add ebx edi +
rol ebx 0Dh +
mov edi [ebp-90h] +
xor [ebp-0C0h] ebx +
mov ebx [ebp-0C0h] +
add edi ebx +
mov ebx [ebp-9Ch] +
ror edi 0Eh +
xor [ebp-0B0h] edi +
mov edi [ebp-0ACh] +
add edi ebx +
rol edi 7 +
xor [ebp-8Ch] edi +
mov edi ebx +
mov ebx [ebp-8Ch] +
add edi ebx +
rol edi 9 +
xor [ebp-0BCh] edi +
mov edi ebx +
mov ebx [ebp-0BCh] +
add ebx edi +
rol ebx 0Dh +
mov edi [ebp-0BCh] +
xor [ebp-0ACh] ebx +
mov ebx [ebp-0ACh] +
add edi ebx +
mov ebx [ebp-88h] +
ror edi 0Eh +
xor [ebp-9Ch] edi +
mov edi [ebp-98h] +
add edi ebx +
rol edi 7 +
xor [ebp-0B8h] edi +
mov edi ebx +
mov ebx [ebp-0B8h] +
add edi ebx +
rol edi 9 +
xor [ebp-0A8h] edi +
mov edi ebx +
mov ebx [ebp-0A8h] +
add ebx edi +
mov edi [ebp-0A8h] +
rol ebx 0Dh +
xor [ebp-98h] ebx +
mov ebx [ebp-98h] +
add edi ebx +
ror edi 0Eh +
xor [ebp-88h] edi +
mov edi [ebp-0B8h] +
add edi esi +
rol edi 7 +
xor [ebp-0C0h] edi +
mov edi [ebp-0C0h] +
add edi esi +
rol edi 9 +
xor [ebp-0BCh] edi +
mov edi [ebp-0C0h] +
mov ebx [ebp-0BCh] +
add ebx edi +
rol ebx 0Dh +
mov edi [ebp-0BCh] +
xor [ebp-0B8h] ebx +
mov ebx [ebp-0B8h] +
add ebx edi +
mov edi [ebp-0B0h] +
add edi eax +
ror ebx 0Eh +
xor esi ebx +
rol edi 7 +
xor [ebp-0ACh] edi +
mov edi [ebp-0B0h] +
mov ebx [ebp-0ACh] +
add ebx edi +
mov edi [ebp-0ACh] +
rol ebx 9 +
xor [ebp-0A8h] ebx +
mov ebx [ebp-0A8h] +
add ebx edi +
mov edi [ebp-0A8h] +
rol ebx 0Dh +
xor eax ebx +
add edi eax +
ror edi 0Eh +
mov ebx [ebp-0A0h] +
xor [ebp-0B0h] edi +
mov edi [ebp-9Ch] +
add edi ebx +
rol edi 7 +
xor [ebp-98h] edi +
mov edi [ebp-9Ch] +
mov ebx [ebp-98h] +
add ebx edi +
mov edi [ebp-98h] +
rol ebx 9 +
xor ecx ebx +
add edi ecx +
mov ebx [ebp-8Ch] +
rol edi 0Dh +
xor [ebp-0A0h] edi +
mov edi [ebp-0A0h] +
add edi ecx +
ror edi 0Eh +
xor [ebp-9Ch] edi +
mov edi [ebp-88h] +
add edi ebx +
rol edi 7 +
xor edx edi +
mov edi [ebp-88h] +
add edi edx +
rol edi 9 +
xor [ebp-90h] edi +
mov edi [ebp-90h] +
add edi edx +
rol edi 0Dh +
xor [ebp-8Ch] edi +
mov ebx [ebp-8Ch] +
mov edi [ebp-90h] +
add ebx edi +
ror ebx 0Eh +
xor [ebp-88h] ebx +
dec dword ptr [ebp-6Ch]  +
jnz loc_1035EEC  +
mov [ebp-94h] edx +
push 40h  +
xor edx edx +
mov [ebp-0B4h] eax +
mov [ebp-0A4h] ecx +
xor eax eax +
mov [ebp-0C4h] esi +
pop ebx  +
mov ecx [ebp+eax-13Ch] +
add [ebp+eax-0C4h] ecx +
add eax 4 +
cmp eax ebx +
jl loc_103615E  +
lea esi [ebp-0C4h] +
inc dword ptr [ebp-11Ch]  +
lea edi [ebp-44h] +
push 10h  +
pop ecx  +
movs   +
cmp [ebp-60h] ebx +
jbe loc_10361C2  +
mov eax [ebp-0D4h] +
mov esi [ebp-5Ch] +
lea edi [esi+eax] +
lea ecx [ebp+edx-44h] +
mov al [ecx+edi] +
xor al [ecx] +
xor [ebp-55h] al +
inc edx  +
mov [ecx+esi] al +
cmp edx ebx +
jb loc_1036198  +
sub [ebp-60h] ebx +
add [ebp-84h] ebx +
add esi ebx +
add [ebp-7Ch] ebx +
mov [ebp-5Ch] esi +
jmp loc_1035EBC  +
***
cmp [ebp-60h] edx +
jbe loc_10361EC  +
mov esi [ebp-7Ch] +
lea eax [ebp-44h] +
mov edi [ebp-84h] +
sub esi eax +
sub edi eax +
lea ecx [ebp+edx-44h] +
mov al [ecx+esi] +
xor al [ecx] +
xor [ebp-55h] al +
inc edx  +
mov [ecx+edi] al +
cmp edx [ebp-60h] +
jb loc_10361D7  +
mov esi [ebp-78h] +
mov edi offset __ImageBase +
mov ebx 0FFFFF000h +
mov eax [ebp-74h] +
movzx eax byte ptr [eax+8] +
movzx ecx byte ptr [ebp-55h] +
sub ecx eax +
jz loc_103629E  +
call sub_100CD3B  +
mov edi [ebp-0C8h] +
mov esi eax +
and edi 0FFFFFFFCh +
mov edx 0FFFFh +
mov eax [ebp-0ECh] +
and esi ebx +
mov dword ptr [eax+8] offset sub_1023648 +
lea ecx [edi+0FFFh] +
and ecx ebx +
xor eax eax +
mov ebx dword_10410FC +
imul ebx ebx +
add ebx 269EC3h +
mov dword_10410FC ebx +
shr ebx 10h +
shl eax 10h +
shr edx 10h +
or eax ebx +
test edx edx +
jnz loc_103623A  +
mov ebx 0FFFFh +
div  ebx +
mov eax edi +
inc edx  +
cmp edi ecx +
mov [ebp-150h] esi +
mov [ebp-148h] edx +
mov dword ptr [ebp-0C8h] 0 +
jnb loc_1036294  +
mov edx [ebp-0C8h] +
mov [eax] edx +
add eax 4 +
cmp eax ecx +
jb loc_1036285  +
mov eax offset sub_1023648 +
jmp loc_1036374  +
mov ecx ds:off_1004F44 +
mov eax [ebp-0CCh] +
sub eax [ebp-70h] +
sub edi ecx +
mov [ebp-78h] eax +
mov [ebp-74h] edi +
jnz loc_10362BF  +
test eax eax +
jz loc_1036367  +
mov eax [ebp-80h] +
mov ecx ds:dword_1009298 +
mov edi [ebp-70h] +
sub edi [ebp-0CCh] +
add eax esi +
xor esi esi +
dec ecx  +
mov [ebp-0C8h] eax +
js loc_1036306  +
lea eax [ecx+esi] +
cdq   +
sub eax edx +
sar eax 1 +
mov edx ds:dword_100929C[eax*4] +
and edx 0FFFFFFFh +
cmp [ebp-80h] edx +
jnb loc_10362FD  +
lea ecx [eax-1] +
jmp loc_1036302  +
jbe loc_103630A  +
lea esi [eax+1] +
cmp ecx esi +
jge loc_10362DE  +
mov ebx esi +
jmp loc_103635F  +
mov ebx eax +
jmp loc_103635F  +
mov eax ds:dword_100929C[ebx*4] +
mov ecx eax +
and ecx 0FFFFFFFh +
cmp ecx [ebp-0C8h] +
jnb loc_1036367  +
lea esi __ImageBase[ecx+edi] +
mov ecx eax +
shl ecx 2 +
sar ecx 1Eh +
sar eax 1Eh +
and ecx 3 +
and eax 3 +
xor edx edx +
dec ecx  +
jz loc_1036352  +
dec ecx  +
jz loc_103634D  +
dec ecx  +
jnz loc_1036358  +
mov edx [ebp-74h] +
jmp loc_1036358  +
mov edx [ebp-78h] +
jmp loc_1036358  +
mov edx [ebp-74h] +
sub edx [ebp-78h] +
dec eax  +
dec eax  +
jnz loc_103635E  +
add [esi] edx +
inc ebx  +
cmp ebx ds:dword_1009298 +
jb loc_103630E  +
mov eax ds:dword_102543C +
mov eax 4643A3C5h +
mov eax [ebp-70h] +
mov ecx [ebp-0ECh] +
mov [ecx+8] eax +
mov esi [ebp-154h] +
mov edx [ebp-150h] +
mov ecx [ebp-148h] +
mov eax [ebp-144h] +
mov edi [ebp-14Ch] +
mov ebx [ebp-140h] +
mov esp ebp +
pop ebp  +
popf   +
retn   +
***
