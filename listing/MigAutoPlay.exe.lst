mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
mov eax [esi] +
test eax eax +
jz loc_100171C  +
push eax  +
call ds:CoRevokeClassObject  +
and dword ptr [esi] 0 +
mov esi [ebp+arg_4] +
mov eax [esi] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
and dword ptr [esi] 0 +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax ecx +
mov ecx [ebp+arg_0] +
mov dword ptr [eax] offset off_1001170 +
mov dword ptr [eax+4] offset off_100115C +
mov dword ptr [eax+8] 1 +
mov [eax+0Ch] ecx +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and dword ptr [ebp-4] 0 +
push ebx  +
mov ebx [ebp+10h] +
test ebx ebx +
jnz loc_1001769  +
mov eax 80070057h +
jmp loc_10017D7  +
mov eax [ebp+0Ch] +
push esi  +
push edi  +
push 4  +
pop ecx  +
mov edi offset dword_10014F4 +
mov esi eax +
xor edx edx +
cmps   +
jz loc_10017B9  +
push 4  +
pop ecx  +
mov edi offset dword_1001514 +
mov esi eax +
xor edx edx +
cmps   +
jz loc_100179E  +
push 4  +
pop ecx  +
mov edi offset dword_1001524 +
mov esi eax +
xor edx edx +
cmps   +
jnz loc_10017A9  +
mov esi [ebp+8] +
mov eax [esi] +
push esi  +
call dword ptr [eax+4]  +
jmp loc_10017C5  +
push 4  +
mov esi eax +
pop ecx  +
mov edi offset dword_1001504 +
xor eax eax +
cmps   +
jnz loc_10017C9  +
mov esi [ebp+8] +
mov eax [esi] +
push esi  +
call dword ptr [eax+4]  +
add esi 4 +
mov [ebx] esi +
jmp loc_10017D2  +
and [ebx] eax +
mov dword ptr [ebp-4] 80004002h +
mov eax [ebp-4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+8] +
add esi 8 +
push esi  +
call ds:InterlockedIncrement  +
mov eax [esi] +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+8] +
push edi  +
lea eax [esi+8] +
push eax  +
call ds:InterlockedDecrement  +
mov edi eax +
test edi edi +
jnz loc_1001827  +
test esi esi +
jz loc_1001827  +
mov eax [esi] +
push 1  +
mov ecx esi +
call dword ptr [eax+1Ch]  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+14h] +
test ecx ecx +
jnz loc_1001847  +
mov eax 80070057h +
jmp loc_1001866  +
cmp dword ptr [ebp+0Ch] 0 +
jz loc_1001857  +
and dword ptr [ecx] 0 +
mov eax 80040110h +
jmp loc_1001866  +
mov eax [ebp+8] +
push ecx  +
push dword ptr [ebp+10h]  +
add eax 0FFFFFFFCh +
mov edx [eax] +
push eax  +
call dword ptr [edx]  +
pop ebp  +
retn 10h  +
***
xor eax eax +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+14h] +
mov edx offset aDevicearrival +
mov cx [eax] +
cmp cx [edx] +
jnz loc_10018AC  +
test cx cx +
jz loc_10018A8  +
mov cx [eax+2] +
cmp cx [edx+2] +
jnz loc_10018AC  +
add eax 4 +
add edx 4 +
test cx cx +
jnz loc_1001886  +
xor eax eax +
jmp loc_10018B1  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
test eax eax +
jnz loc_10018C8  +
push eax  +
push eax  +
call sub_1001ED5  +
mov eax [ebp+8] +
push dword ptr [eax+0Ch]  +
call ds:SetEvent  +
xor eax eax +
pop ebp  +
retn 10h  +
***
xor eax eax +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+14h] +
mov edx offset aDevicearrival +
mov cx [eax] +
cmp cx [edx] +
jnz loc_1001910  +
test cx cx +
jz loc_100190C  +
mov cx [eax+2] +
cmp cx [edx+2] +
jnz loc_1001910  +
add eax 4 +
add edx 4 +
test cx cx +
jnz loc_10018EA  +
xor eax eax +
jmp loc_1001915  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
test eax eax +
jnz loc_100192E  +
push eax  +
push dword ptr [ebp+18h]  +
call sub_1001ED5  +
mov eax [ebp+8] +
push dword ptr [eax+0Ch]  +
call ds:SetEvent  +
xor eax eax +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
test byte ptr [ebp+8] 1 +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_1001170 +
mov dword ptr [esi+4] offset off_100115C +
jz loc_100195B  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
sub dword ptr [esp+4] 4 +
jmp loc_1001800  +
***
sub dword ptr [esp+4] 4 +
jmp loc_10017E1  +
***
sub dword ptr [esp+4] 4 +
jmp loc_1001750  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
push 10h  +
mov edi 80004005h +
call ??2@YAPAXI@Z  +
pop ecx  +
test eax eax +
jz loc_10019B8  +
push [ebp+arg_0]  +
mov ecx eax +
call sub_1001726  +
jmp loc_10019BA  +
xor eax eax +
mov esi eax +
add eax 4 +
neg esi  +
sbb esi esi +
and esi eax +
jz loc_10019F5  +
push [ebp+lpdwRegister]  +
push 0  +
push 4  +
push esi  +
push offset rclsid  +
call ds:CoRegisterClassObject  +
mov edi eax +
test edi edi +
jl loc_10019EF  +
push [ebp+arg_8]  +
mov eax [esi] +
push offset dword_1001504  +
push esi  +
call dword ptr [eax]  +
mov edi eax +
mov eax [esi] +
push esi  +
call dword ptr [eax+8]  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push esi  +
xor esi esi +
push esi  +
push esi  +
mov [ebp+var_4] esi +
mov [ebp+dwRegister] esi +
call ds:CoInitializeEx  +
test eax eax +
jl loc_1001A68  +
push edi  +
push esi  +
push esi  +
push esi  +
push esi  +
call ds:CreateEventW  +
mov edi eax +
cmp edi esi +
jz loc_1001A61  +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+dwRegister] +
push eax  +
push edi  +
call sub_1001994  +
test eax eax +
jl loc_1001A5A  +
push 1D4C0h  +
push edi  +
call ds:WaitForSingleObject  +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+dwRegister] +
push eax  +
call sub_10016F5  +
push edi  +
call ds:CloseHandle  +
call ds:CoUninitialize  +
pop edi  +
xor eax eax +
pop esi  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
xor eax eax +
test ecx ecx +
jz loc_1001A8A  +
cmp ecx 7FFFFFFFh +
jbe loc_1001A8F  +
mov eax 80070057h +
test eax eax +
jl loc_1001ADA  +
mov eax [ebp+arg_0] +
push ebx  +
xor ebx ebx +
push esi  +
mov esi ecx +
test ecx ecx +
jz loc_1001ACA  +
mov edx [ebp+arg_8] +
push edi  +
mov edi 7FFFFFFEh +
sub edi ecx +
sub edx eax +
lea ecx [edi+esi] +
test ecx ecx +
jz loc_1001AC5  +
movzx ecx word ptr [edx+eax] +
test cx cx +
jz loc_1001AC5  +
mov [eax] cx +
inc eax  +
inc eax  +
dec esi  +
jnz loc_1001AAD  +
pop edi  +
test esi esi +
jnz loc_1001AD1  +
dec eax  +
dec eax  +
mov ebx 8007007Ah +
xor ecx ecx +
mov [eax] cx +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
xor eax eax +
test ecx ecx +
jz loc_1001AF9  +
cmp ecx 7FFFFFFFh +
jbe loc_1001AFE  +
mov eax 80070057h +
test eax eax +
jl loc_1001B3B  +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
lea eax [ebp+arg_C] +
push eax  +
push [ebp+arg_8]  +
lea esi [ecx-1] +
push esi  +
push edi  +
xor ebx ebx +
call ds:_vsnwprintf  +
add esp 10h +
test eax eax +
jl loc_1001B2B  +
cmp eax esi +
ja loc_1001B2B  +
jnz loc_1001B36  +
jmp loc_1001B30  +
mov ebx 8007007Ah +
xor eax eax +
mov [edi+esi*2] ax +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 218h +
mov eax dword_1004000 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
lea eax [ebp+hKey] +
push eax  +
push 20019h  +
xor esi esi +
push esi  +
push offset SubKey  +
push 80000002h  +
mov [ebp+hKey] esi +
call ds:RegOpenKeyExW  +
test eax eax +
jnz loc_1001BF6  +
lea eax [ebp+cbData] +
push eax  +
lea eax [ebp+Src] +
push eax  +
lea eax [ebp+Type] +
push eax  +
push esi  +
push offset ValueName  +
push [ebp+hKey]  +
mov [ebp+cbData] 104h +
mov [ebp+Type] esi +
call ds:RegQueryValueExW  +
test eax eax +
jnz loc_1001BEA  +
cmp [ebp+Type] 2 +
jz loc_1001BD2  +
cmp [ebp+Type] 1 +
jnz loc_1001BEA  +
push [ebp+nSize]  +
lea eax [ebp+Src] +
push edi  +
push eax  +
call ds:ExpandEnvironmentStringsW  +
test eax eax +
jz loc_1001BEA  +
xor esi esi +
inc esi  +
push [ebp+hKey]  +
call ds:RegCloseKey  +
mov ecx [ebp+var_4] +
pop edi  +
mov eax esi +
xor ecx ebp +
pop esi  +
call sub_1002317  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ebp+8] 0 +
jbe loc_1001C23  +
push dword ptr [ebp+8]  +
call ??2@YAPAXI@Z  +
pop ecx  +
jmp loc_1001C25  +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+8]  +
call ??3@YAXPAX@Z  +
pop ecx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
jz loc_1001C57  +
pop ebp  +
jmp ds:CloseHandle  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 26Ch +
mov eax dword_1004000 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
push edi  +
xor eax eax +
lea edi [ebp+ProcessInformation] +
stos   +
stos   +
stos   +
xor esi esi +
push 44h  +
stos   +
lea eax [ebp+StartupInfo] +
push esi  +
push eax  +
mov [ebp+var_218] esi +
mov [ebp+hToken] esi +
mov [ebp+lpEnvironment] esi +
call memset  +
add esp 0Ch +
push 0Bh  +
push offset aWinsta0  +
call sub_1002BD1  +
mov edi eax +
cmp edi esi +
jnz loc_1001CC9  +
push offset aLaunchincurren  +
jmp loc_1001D7B  +
lea eax [ebp+hToken] +
push eax  +
push 1  +
push 2  +
push esi  +
push 0Bh  +
push edi  +
call ds:DuplicateTokenEx  +
test eax eax +
jnz loc_1001CEC  +
push offset aLaunchincurr_0  +
jmp loc_1001D7B  +
push esi  +
push [ebp+hToken]  +
lea eax [ebp+lpEnvironment] +
push eax  +
mov [ebp+StartupInfo.cb] 44h +
mov [ebp+StartupInfo.lpDesktop] offset aWinsta0Default +
call CreateEnvironmentBlock  +
test eax eax +
jnz loc_1001D25  +
call ds:GetLastError  +
push eax  +
push offset aLaunchincurr_1  +
jmp loc_1001D60  +
lea eax [ebp+ProcessInformation] +
push eax  +
lea eax [ebp+StartupInfo] +
push eax  +
push esi  +
push [ebp+lpEnvironment]  +
push 408h  +
push esi  +
push esi  +
push esi  +
push ebx  +
push esi  +
push [ebp+hToken]  +
call ds:CreateProcessAsUserW  +
test eax eax +
jnz loc_1001D83  +
call ds:GetLastError  +
push eax  +
push offset aLaunchincurr_2  +
lea eax [ebp+OutputString] +
push 104h  +
push eax  +
call sub_1001AE3  +
add esp 10h +
lea eax [ebp+OutputString] +
push eax  +
call ds:OutputDebugStringW  +
jmp loc_1001D8D  +
mov [ebp+var_218] 1 +
cmp [ebp+lpEnvironment] esi +
jz loc_1001DA0  +
push [ebp+lpEnvironment]  +
call DestroyEnvironmentBlock  +
push [ebp+ProcessInformation.hThread]  +
call sub_1001C45  +
push edi  +
call sub_1001C45  +
push [ebp+hToken]  +
call sub_1001C45  +
mov ecx [ebp+var_4] +
mov eax [ebp+var_218] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1002317  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 218h +
mov eax dword_1004000 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_4] +
push ebx  +
push esi  +
mov [ebp+var_218] eax +
mov eax [ebp+arg_8] +
push edi  +
mov edi [ebp+arg_0] +
mov [ebp+var_214] eax +
xor eax eax +
push 206h  +
push eax  +
mov [ebp+var_20C] ax +
lea eax [ebp-20Ah] +
push eax  +
call memset  +
and [ebp+var_210] 0 +
lea esi [ebp+var_20C] +
mov ebx edi +
mov eax esi +
add esp 0Ch +
sub ebx eax +
mov edi 104h +
movzx eax word ptr [ebx+esi] +
test ax ax +
jz loc_1001E5F  +
push eax  +
call ds:towlower  +
mov [esi] ax +
inc esi  +
inc esi  +
inc [ebp+var_210]  +
pop ecx  +
cmp [ebp+var_210] edi +
jb loc_1001E3B  +
xor eax eax +
mov [esi] ax +
lea eax [ebp+var_20C] +
push offset a_exe  +
push eax  +
call ds:wcsstr  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1001EBD  +
lea esi [eax+8] +
mov eax esi +
lea ecx [ebp+var_20C] +
sub eax ecx +
and eax 0FFFFFFFEh +
cmp eax 208h +
jge loc_1001EBD  +
push esi  +
push edi  +
push [ebp+var_214]  +
call sub_1001A74  +
xor eax eax +
mov [esi] ax +
lea eax [ebp+var_20C] +
push eax  +
push edi  +
push [ebp+var_218]  +
call sub_1001A74  +
xor eax eax +
inc eax  +
jmp loc_1001EBF  +
xor eax eax +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1002317  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 61Ch +
mov eax dword_1004000 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
push edi  +
mov esi 104h +
push esi  +
lea eax [ebp+OutputString] +
push eax  +
xor edi edi +
call sub_1001B42  +
test eax eax +
jz loc_1001FD0  +
cmp [ebp+arg_4] edi +
jz loc_1001F41  +
mov esi ds:OutputDebugStringW +
push offset OutputString  +
call esi  +
lea eax [ebp+OutputString] +
push eax  +
call esi  +
push offset asc_10011AC  +
call esi  +
lea eax [ebp+OutputString] +
push eax  +
call sub_1001C60  +
mov edi eax +
jmp loc_1001FD0  +
xor eax eax +
mov edi 206h +
push edi  +
push eax  +
mov [ebp+File] ax +
lea eax [ebp-61Ah] +
push eax  +
call memset  +
xor eax eax +
push edi  +
push eax  +
mov [ebp+Parameters] ax +
lea eax [ebp-20Ah] +
push eax  +
call memset  +
add esp 18h +
lea eax [ebp+Parameters] +
push eax  +
lea eax [ebp+File] +
push eax  +
lea eax [ebp+OutputString] +
push eax  +
call sub_1001DD8  +
test eax eax +
jnz loc_1001FB0  +
mov [ebp+Parameters] ax +
lea eax [ebp+OutputString] +
push eax  +
push esi  +
lea eax [ebp+File] +
push eax  +
call sub_1001A74  +
xor edi edi +
inc edi  +
push edi  +
push 0  +
lea eax [ebp+Parameters] +
push eax  +
lea eax [ebp+File] +
push eax  +
push offset Operation  +
push ebx  +
call ds:ShellExecuteW  +
mov ecx [ebp+var_4] +
mov eax edi +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1002317  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
xor eax eax +
jmp loc_1002004  +
test eax eax +
jnz loc_1002009  +
mov ecx [esi] +
test ecx ecx +
jz loc_1002001  +
call ecx  +
add esi 4 +
cmp esi [ebp+arg_4] +
jb loc_1001FF5  +
pop esi  +
pop ebp  +
retn   +
***
mov eax dword_100436C +
push offset dword_100435C  +
push dword_1004368  +
mov dword_100435C eax +
push offset unk_100434C  +
push offset unk_1004350  +
push offset unk_1004348  +
call ds:__wgetmainargs  +
add esp 14h +
mov dword_1004358 eax +
retn   +
***
call __SEH_prolog4  +
xor ebx ebx +
mov [ebp+var_1C] ebx +
mov [ebp+ms_exc.disabled] ebx +
lea eax [ebp+StartupInfo] +
push eax  +
call ds:GetStartupInfoW  +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov [ebp+ms_exc.disabled] 1 +
mov eax large fs:18h +
mov esi [eax+4] +
mov [ebp+var_20] ebx +
mov edi offset Destination +
push ebx  +
push esi  +
push edi  +
call ds:InterlockedCompareExchange  +
cmp eax ebx +
jz loc_10020AC  +
cmp eax esi +
jnz loc_100209F  +
xor esi esi +
inc esi  +
mov [ebp+var_20] esi +
jmp loc_10020AF  +
push 3E8h  +
call ds:Sleep  +
jmp loc_1002086  +
xor esi esi +
inc esi  +
mov eax dword_10046A0 +
cmp eax esi +
jnz loc_10020C2  +
push 1Fh  +
call _amsg_exit  +
pop ecx  +
jmp loc_10020F1  +
mov eax dword_10046A0 +
test eax eax +
jnz loc_10020EB  +
mov dword_10046A0 esi +
push offset dword_1001128  +
push offset dword_100111C  +
call sub_1001FE8  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_10020F1  +
jmp loc_1002215  +
mov dword_1004364 esi +
mov eax dword_10046A0 +
cmp eax esi +
jnz loc_1002115  +
push offset dword_1001118  +
push offset dword_1001110  +
call _initterm  +
pop ecx  +
pop ecx  +
mov dword_10046A0 2 +
cmp [ebp+var_20] ebx +
jnz loc_1002122  +
push ebx  +
push edi  +
call ds:InterlockedExchange  +
cmp dword_10046AC ebx +
jz loc_1002143  +
push offset dword_10046AC  +
call sub_1002759  +
pop ecx  +
test eax eax +
jz loc_1002143  +
push ebx  +
push 2  +
push ebx  +
call dword_10046AC  +
mov eax ds:_wcmdln +
cmp [eax] ebx +
jz loc_1002215  +
mov eax [eax] +
mov [ebp+var_24] eax +
movzx ecx word ptr [eax] +
cmp cx 20h +
ja $LN58  +
cmp cx bx +
jz loc_1002168  +
cmp [ebp+var_1C] ebx +
jnz $LN58  +
movzx ecx word ptr [eax] +
cmp cx bx +
jz loc_100217D  +
cmp cx 20h +
ja loc_100217D  +
inc eax  +
inc eax  +
mov [ebp+var_24] eax +
jmp loc_1002168  +
test byte ptr [ebp+StartupInfo.dwFlags] 1 +
jz loc_1002189  +
movzx ecx [ebp+StartupInfo.wShowWindow] +
jmp loc_100218C  +
push 0Ah  +
pop ecx  +
push ecx  +
push eax  +
push ebx  +
push 1000000h  +
call _wWinMain@16  +
mov dword_1004360 eax +
cmp dword_1004354 ebx +
jnz $LN59  +
push eax  +
call ds:exit  +
cmp cx 22h +
jnz loc_10021BE  +
xor ecx ecx +
cmp [ebp+var_1C] ebx +
setz cl  +
mov [ebp+var_1C] ecx +
inc eax  +
inc eax  +
jmp loc_1002152  +
mov eax [ebp-14h] +
mov ecx [eax] +
mov ecx [ecx] +
mov [ebp-28h] ecx +
push eax  +
push ecx  +
call _XcptFilter  +
pop ecx  +
pop ecx  +
retn   +
mov esp [ebp-18h] +
mov eax [ebp-28h] +
mov dword_1004360 eax +
xor ebx ebx +
cmp dword_1004354 ebx +
jnz $LN59  +
push eax  +
call ds:_exit  +
cmp dword_1004364 ebx +
jnz loc_1002200  +
call ds:_cexit  +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov eax dword_1004360 +
jmp loc_1002221  +
xor eax eax +
inc eax  +
retn   +
mov esp [ebp-18h] +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov eax 0FFh +
call __SEH_epilog4  +
retn   +
***
mov eax 5A4Dh +
cmp ds:1000000h ax +
jz loc_100223E  +
xor eax eax +
jmp loc_100228B  +
mov eax ds:100003Ch +
lea eax [eax+1000000h] +
cmp dword ptr [eax] 4550h +
jnz loc_100223A  +
movzx ecx word ptr [eax+18h] +
cmp ecx 10Bh +
jz loc_1002278  +
cmp ecx 20Bh +
jnz loc_100223A  +
cmp dword ptr [eax+84h] 0Eh +
jbe loc_100223A  +
xor ecx ecx +
cmp [eax+0F8h] ecx +
jmp loc_1002286  +
cmp dword ptr [eax+74h] 0Eh +
jbe loc_100223A  +
xor ecx ecx +
cmp [eax+0E8h] ecx +
setnz cl  +
mov eax ecx +
push 2  +
mov dword_1004354 eax +
call sub_10028F2  +
push eax  +
call ds:__set_app_type  +
or dword_1004698 0FFFFFFFFh +
or dword_100469C 0FFFFFFFFh +
pop ecx  +
pop ecx  +
call ds:__p__fmode  +
mov ecx dword_1004374 +
mov [eax] ecx +
call ds:__p__commode  +
mov ecx dword_1004370 +
mov [eax] ecx +
call sub_1002884  +
cmp dword_1004018 0 +
jnz loc_10022E4  +
push offset sub_1002884  +
call ds:__setusermatherr  +
pop ecx  +
call sub_100286C  +
xor eax eax +
retn   +
***
call sub_1002931  +
jmp ___tmainCRTStartup  +
***
cmp ecx dword_1004000 +
jnz loc_1002322  +
retn 0  +
jmp loc_10029C7  +
***
push ecx  +
lea ecx [esp+4] +
sub ecx eax +
sbb eax eax +
not eax  +
and ecx eax +
mov eax esp +
and eax 0FFFFF000h +
cmp ecx eax +
jb cs20  +
mov eax ecx +
pop ecx  +
xchg eax esp +
mov eax [eax] +
mov [esp] eax +
retn   +
***
sub eax 1000h +
test [eax] eax +
jmp cs10  +
***
push edi  +
mov ebp [ecx] +
push edi  +
mov ebp edx +
push ebx  +
push edx  +
push ecx  +
push [esp+8+arg_4]  +
call __local_unwind4  +
add esp 0Ch +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
mov eax [ebp+arg_0] +
push ebx  +
mov ebx [ebp+arg_C] +
push esi  +
mov esi [ebx+8] +
xor esi [eax] +
push edi  +
mov eax [esi] +
mov [ebp+var_1] 0 +
mov [ebp+var_C] 1 +
lea edi [ebx+10h] +
cmp eax 0FFFFFFFEh +
jz loc_1002516  +
mov ecx [esi+4] +
add ecx edi +
xor ecx [eax+edi] +
call [ebp+arg_4]  +
mov ecx [esi+0Ch] +
mov edx [esi+8] +
add ecx edi +
xor ecx [edx+edi] +
call [ebp+arg_4]  +
mov eax [ebp+arg_8] +
test byte ptr [eax+4] 66h +
jnz loc_1002643  +
lea ecx [ebp+var_18] +
mov [ebx-4] ecx +
mov ebx [ebx+0Ch] +
mov [ebp+var_18] eax +
mov eax [ebp+arg_10] +
mov [ebp+var_14] eax +
cmp ebx 0FFFFFFFEh +
jz loc_10025A8  +
jmp loc_1002550  +
lea edx [ebx+ebx*2] +
mov ecx [esi+edx*4+14h] +
lea eax [esi+edx*4+10h] +
mov [ebp+var_10] eax +
mov eax [eax] +
mov [ebp+var_8] eax +
test ecx ecx +
jz loc_100257B  +
mov edx edi +
call @_EH4_CallFilterFunc@8  +
mov [ebp+var_1] 1 +
test eax eax +
jl loc_10025B2  +
jg loc_10025BB  +
mov eax [ebp+var_8] +
mov ebx eax +
cmp eax 0FFFFFFFEh +
jnz loc_1002550  +
cmp [ebp+var_1] 0 +
jz loc_10025A8  +
mov eax [esi] +
cmp eax 0FFFFFFFEh +
jz loc_100259A  +
mov ecx [esi+4] +
add ecx edi +
xor ecx [eax+edi] +
call [ebp+arg_4]  +
mov ecx [esi+0Ch] +
mov edx [esi+8] +
add ecx edi +
xor ecx [edx+edi] +
call [ebp+arg_4]  +
mov eax [ebp+var_C] +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
mov [ebp+var_C] 0 +
jmp loc_1002588  +
mov eax [ebp+arg_8] +
cmp dword ptr [eax] 0E06D7363h +
jnz loc_10025EF  +
cmp dword_10046A8 0 +
jz loc_10025EF  +
push offset dword_10046A8  +
call sub_1002759  +
add esp 4 +
test eax eax +
jz loc_10025EF  +
mov ecx [ebp+arg_8] +
push 1  +
push ecx  +
call dword_10046A8  +
add esp 8 +
mov ecx [ebp+arg_C] +
call @_EH4_GlobalUnwind@4  +
mov eax [ebp+arg_C] +
cmp [eax+0Ch] ebx +
jz loc_1002610  +
mov edx [ebp+arg_0] +
push edx  +
push edi  +
mov edx ebx +
mov ecx eax +
call @_EH4_LocalUnwind@16  +
mov eax [ebp+arg_C] +
mov ecx [ebp+var_8] +
mov [eax+0Ch] ecx +
mov eax [esi] +
cmp eax 0FFFFFFFEh +
jz loc_1002628  +
mov ecx [esi+4] +
add ecx edi +
xor ecx [eax+edi] +
call [ebp+arg_4]  +
mov ecx [esi+0Ch] +
mov edx [esi+8] +
add ecx edi +
xor ecx [edx+edi] +
call [ebp+arg_4]  +
mov eax [ebp+var_10] +
mov ecx [eax+8] +
mov edx edi +
call @_EH4_TransferToHandler@8  +
mov edx 0FFFFFFFEh +
cmp [ebx+0Ch] edx +
jz loc_10025A8  +
mov ecx [ebp+arg_0] +
push ecx  +
push edi  +
mov ecx ebx +
call @_EH4_LocalUnwind@16  +
jmp loc_1002588  +
***
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov eax [eax] +
cmp dword ptr [eax] 0E06D7363h +
jnz loc_10026A4  +
cmp dword ptr [eax+10h] 3 +
jnz loc_10026A4  +
mov eax [eax+14h] +
cmp eax 19930520h +
jz loc_100269E  +
cmp eax 19930521h +
jz loc_100269E  +
cmp eax 19930522h +
jz loc_100269E  +
cmp eax 1994000h +
jnz loc_10026A4  +
call ds:?terminate@@YAXXZ  +
xor eax eax +
pop ebp  +
retn 4  +
***
push (offset dword_1002664+3)  +
call ds:SetUnhandledExceptionFilter  +
xor eax eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
mov eax 5A4Dh +
cmp [ecx] ax +
jz loc_10026E6  +
xor eax eax +
pop ebp  +
retn   +
mov eax [ecx+3Ch] +
add eax ecx +
cmp dword ptr [eax] 4550h +
jnz loc_10026E2  +
xor edx edx +
mov ecx 10Bh +
cmp [eax+18h] cx +
setz dl  +
mov eax edx +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [eax+3Ch] +
add ecx eax +
movzx eax word ptr [ecx+14h] +
push ebx  +
push esi  +
movzx esi word ptr [ecx+6] +
xor edx edx +
push edi  +
lea eax [eax+ecx+18h] +
test esi esi +
jbe loc_100274D  +
mov edi [ebp+arg_4] +
mov ecx [eax+0Ch] +
cmp edi ecx +
jb loc_1002745  +
mov ebx [eax+8] +
add ebx ecx +
cmp edi ebx +
jb loc_100274F  +
inc edx  +
add eax 28h +
cmp edx esi +
jb loc_1002735  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
call __SEH_prolog4  +
and [ebp+ms_exc.disabled] 0 +
mov esi 1000000h +
push esi  +
call sub_10026D0  +
pop ecx  +
test eax eax +
jz loc_10027B6  +
mov eax [ebp+arg_0] +
sub eax esi +
push eax  +
push esi  +
call sub_1002710  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_10027B6  +
mov eax [eax+24h] +
shr eax 1Fh +
not eax  +
and eax 1 +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
jmp loc_10027BF  +
mov eax [ebp-14h] +
mov eax [eax] +
mov eax [eax] +
xor ecx ecx +
cmp eax 0C0000005h +
setz cl  +
mov eax ecx +
retn   +
mov esp [ebp-18h] +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
xor eax eax +
call __SEH_epilog4  +
retn   +
***
mov eax [esp+8+arg_4] +
mov ecx [ebp-10h] +
mov large fs:0 ecx +
pop ecx  +
pop edi  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
push ecx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push offset sub_1002317  +
push offset dword_1004000  +
call sub_10024E0  +
add esp 18h +
pop ebp  +
retn   +
***
call ds:_controlfp  +
pop ecx  +
pop ecx  +
retn   +
***
retn   +
***
call __SEH_prolog4  +
xor eax eax +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_10028E5  +
cmp ecx 0FFFFFFFFh +
jz loc_10028E5  +
and [ebp+ms_exc.disabled] eax +
mov edx 5A4Dh +
cmp [ecx] dx +
jnz loc_10028DE  +
mov edx [ecx+3Ch] +
test edx edx +
jl loc_10028DE  +
cmp edx 10000000h +
jnb loc_10028DE  +
lea eax [edx+ecx] +
mov [ebp+var_1C] eax +
cmp dword ptr [eax] 4550h +
jz loc_10028DE  +
jmp loc_10028D9  +
xor eax eax +
inc eax  +
retn   +
mov esp [ebp-18h] +
xor eax eax +
mov [ebp+var_1C] eax +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
call __SEH_epilog4  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
call ds:GetModuleHandleA  +
test eax eax +
jz loc_1002927  +
push eax  +
call sub_100288C  +
test eax eax +
jz loc_1002927  +
movzx eax word ptr [eax+5Ch] +
cmp ax 2 +
jnz loc_100291C  +
push 2  +
pop eax  +
pop ebp  +
retn   +
cmp ax 3 +
jnz loc_1002927  +
xor eax eax +
inc eax  +
pop ebp  +
retn   +
mov eax [ebp+arg_0] +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov eax dword_1004000 +
and [ebp+SystemTimeAsFileTime.dwLowDateTime] 0 +
and [ebp+SystemTimeAsFileTime.dwHighDateTime] 0 +
push ebx  +
push edi  +
mov edi 0BB40E64Eh +
mov ebx 0FFFF0000h +
cmp eax edi +
jz loc_1002963  +
test eax ebx +
jz loc_1002963  +
not eax  +
mov dword_1004004 eax +
jmp loc_10029BE  +
push esi  +
lea eax [ebp+SystemTimeAsFileTime] +
push eax  +
call ds:GetSystemTimeAsFileTime  +
mov esi [ebp+SystemTimeAsFileTime.dwHighDateTime] +
xor esi [ebp+SystemTimeAsFileTime.dwLowDateTime] +
call ds:GetCurrentProcessId  +
xor esi eax +
call ds:GetCurrentThreadId  +
xor esi eax +
call ds:GetTickCount  +
xor esi eax +
lea eax [ebp+PerformanceCount] +
push eax  +
call ds:QueryPerformanceCounter  +
mov eax dword ptr [ebp+PerformanceCount+4] +
xor eax dword ptr [ebp+PerformanceCount] +
xor esi eax +
cmp esi edi +
jz loc_10029AA  +
test dword_1004000 ebx +
jnz loc_10029AF  +
mov esi 0BB40E64Fh +
mov dword_1004000 esi +
not esi  +
mov dword_1004004 esi +
pop esi  +
pop edi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 328h +
mov dword_1004478 eax +
mov dword_1004474 ecx +
mov dword_1004470 edx +
mov dword_100446C ebx +
mov dword_1004468 esi +
mov dword_1004464 edi +
mov word_1004490 ss +
mov word_1004484 cs +
mov word_1004460 ds +
mov word_100445C es +
mov word_1004458 fs +
mov word_1004454 gs +
pushf   +
pop dword_1004488  +
mov eax [ebp+0] +
mov dword_100447C eax +
mov eax [ebp+4] +
mov dword_1004480 eax +
lea eax [ebp+8] +
mov dword_100448C eax +
mov eax [ebp-320h] +
mov dword_10043C8 10001h +
mov eax dword_1004480 +
mov dword_1004384 eax +
mov dword_1004378 0C0000409h +
mov dword_100437C 1 +
mov eax dword_1004000 +
mov [ebp-328h] eax +
mov eax dword_1004004 +
mov [ebp-324h] eax +
push 0  +
call ds:SetUnhandledExceptionFilter  +
push offset ExceptionInfo  +
call ds:UnhandledExceptionFilter  +
push 0C0000409h  +
call ds:GetCurrentProcess  +
push eax  +
call ds:TerminateProcess  +
leave   +
retn   +
***
push esi  +
mov eax [esp+14h] +
or eax eax +
jnz loc_1002AE1  +
mov ecx [esp+10h] +
mov eax [esp+0Ch] +
xor edx edx +
div  ecx +
mov ebx eax +
mov eax [esp+8] +
div  ecx +
mov esi eax +
mov eax ebx +
mul  dword ptr [esp+10h] +
mov ecx eax +
mov eax esi +
mul  dword ptr [esp+10h] +
add edx ecx +
jmp loc_1002B28  +
mov ecx eax +
mov ebx [esp+10h] +
mov edx [esp+0Ch] +
mov eax [esp+8] +
shr ecx 1 +
rcr ebx 1 +
shr edx 1 +
rcr eax 1 +
or ecx ecx +
jnz loc_1002AEF  +
div  ebx +
mov esi eax +
mul  dword ptr [esp+14h] +
mov ecx eax +
mov eax [esp+10h] +
mul  esi +
add edx ecx +
jb loc_1002B1D  +
cmp edx [esp+0Ch] +
ja loc_1002B1D  +
jb loc_1002B26  +
cmp eax [esp+8] +
jbe loc_1002B26  +
dec esi  +
sub eax [esp+10h] +
sbb edx [esp+14h] +
xor ebx ebx +
sub eax [esp+8] +
sbb edx [esp+0Ch] +
neg edx  +
neg eax  +
sbb edx 0 +
mov ecx edx +
mov edx ebx +
mov ebx ecx +
mov ecx eax +
mov eax esi +
pop esi  +
retn 10h  +
***
mov ebx offset unk_1004020 +
retn   +
***
mov eax [esp+8] +
mov ecx [esp+10h] +
or ecx eax +
mov ecx [esp+0Ch] +
jnz loc_1002B99  +
mov eax [esp+4] +
mul  ecx +
retn 10h  +
***
push ebx  +
mul  ecx +
mov ebx eax +
mov eax [esp+8] +
mul  dword ptr [esp+14h] +
add ebx eax +
mov eax [esp+8] +
mul  ecx +
add edx ebx +
pop ebx  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
push esi  +
lea eax [ebp+Binding] +
push eax  +
xor esi esi +
push offset StringBinding  +
mov [ebp+var_8] esi +
call ds:RpcBindingFromStringBindingW  +
cmp eax esi +
jz loc_1002C00  +
push eax  +
call ds:SetLastError  +
xor eax eax +
jmp loc_1002C8F  +
push edi  +
xor eax eax +
inc eax  +
mov [ebp+SecurityQOS.Version] eax +
mov [ebp+SecurityQOS.IdentityTracking] eax +
lea eax [ebp+SecurityQOS] +
push eax  +
push esi  +
push esi  +
push 0Ah  +
push 5  +
push esi  +
push [ebp+Binding]  +
mov [ebp+SecurityQOS.Capabilities] esi +
mov [ebp+SecurityQOS.ImpersonationType] 3 +
call ds:RpcBindingSetAuthInfoExW  +
mov edi eax +
cmp edi esi +
jz loc_1002C3A  +
lea eax [ebp+Binding] +
push eax  +
call ds:RpcBindingFree  +
jmp loc_1002C80  +
push [ebp+arg_4]  +
lea eax [ebp+var_8] +
push eax  +
call ds:GetCurrentProcessId  +
push eax  +
push [ebp+arg_0]  +
push [ebp+Binding]  +
call sub_1002C99  +
mov edi eax +
lea eax [ebp+Binding] +
push eax  +
call ds:RpcBindingFree  +
cmp edi esi +
jz loc_1002C8B  +
cmp edi 6D3h +
jz loc_1002C7B  +
cmp edi 6BAh +
jz loc_1002C7B  +
cmp edi 6BEh +
jnz loc_1002C80  +
mov edi 4DDh +
push edi  +
call ds:SetLastError  +
xor eax eax +
jmp loc_1002C8E  +
mov eax [ebp+var_8] +
pop edi  +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
lea eax [ebp+arg_0] +
push eax  +
push offset pFormat  +
push offset pStubDescriptor  +
call NdrClientCall2  +
add esp 0Ch +
mov [ebp+var_4] eax +
mov eax [ebp+var_4] +
leave   +
retn 14h  +
***
push 65676E61h  +
add [edx+656C5304h] dh +
jo $+3  +
jmp near ptr 756E7B13h  +
***
