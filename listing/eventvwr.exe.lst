pop edx  +
retn   +
***
mov eax ecx +
and dword ptr [eax+4] 0 +
mov dword ptr [eax] offset off_100113C +
retn   +
***
mov dword ptr [ecx] offset off_100113C +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+hWnd] +
push esi  +
push edi  +
push 8  +
xor edi edi +
push ebx  +
inc edi  +
call ds:GetWindowLongW  +
mov esi eax +
mov eax [ebp+arg_4] +
cmp eax 53h +
ja loc_10013A8  +
jz loc_1001400  +
dec eax  +
dec eax  +
jz loc_1001397  +
sub eax 3 +
jz loc_1001388  +
sub eax 1Fh +
jz loc_100137C  +
sub eax 2Ah +
jnz loc_10013BA  +
push [ebp+dwNewLong]  +
mov eax [esi] +
push [ebp+arg_8]  +
mov ecx esi +
call dword ptr [eax+18h]  +
jmp loc_10013CB  +
push [ebp+dwNewLong]  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+10h]  +
jmp loc_10013CB  +
push [ebp+dwNewLong]  +
mov eax [esi] +
push [ebp+arg_8]  +
mov ecx esi +
call dword ptr [eax+1Ch]  +
jmp loc_10013CB  +
test esi esi +
jz loc_100140E  +
mov eax [esi] +
mov ecx esi +
call dword ptr [eax+28h]  +
and dword ptr [esi+4] 0 +
jmp loc_100140E  +
mov ecx eax +
sub ecx 7Bh +
jz loc_1001400  +
sub ecx 95h +
jz loc_10013D0  +
dec ecx  +
jz loc_10013BE  +
xor edi edi +
jmp loc_100140E  +
push [ebp+dwNewLong]  +
mov eax [esi] +
push [ebp+arg_8]  +
mov ecx esi +
call dword ptr [eax+0Ch]  +
movzx edi al +
jmp loc_100140E  +
mov esi [ebp+dwNewLong] +
push esi  +
push 8  +
push ebx  +
call ds:SetWindowLongW  +
mov eax [esi] +
lea ecx [ebp+dwNewLong+3] +
push ecx  +
mov ecx esi +
mov [esi+4] ebx +
mov byte ptr [ebp+dwNewLong+3] 1 +
call dword ptr [eax+8]  +
movzx edi byte ptr [ebp+dwNewLong+3] +
test eax eax +
jge loc_100140E  +
push ebx  +
call ds:DestroyWindow  +
jmp loc_100140E  +
push [ebp+dwNewLong]  +
mov edx [esi] +
push [ebp+arg_8]  +
mov ecx esi +
push eax  +
call dword ptr [edx+4]  +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 10h  +
***
retn 4  +
***
retn 8  +
***
retn 4  +
***
retn 8  +
***
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
test byte ptr [ebp+8] 1 +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_100113C +
jz loc_1001477  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
movzx eax [ebp+arg_4] +
push ecx  +
push offset DialogFunc  +
push [ebp+hWndParent]  +
push eax  +
push 0  +
call ds:GetModuleHandleW  +
push eax  +
call ds:DialogBoxParamW  +
pop ebp  +
retn 8  +
***
mov edi edi +
push esi  +
mov esi ecx +
call ??0DNameNode@@IAE@XZ  +
xor eax eax +
mov [esi+8] eax +
mov [esi+10h] eax +
mov [esi+258h] eax +
mov [esi+14h] ax +
mov dword ptr [esi] offset off_1001168 +
mov dword ptr [esi+0Ch] 7F01h +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
push dword ptr [esi+10h]  +
mov dword ptr [esi] offset off_1001168 +
call ??3@YAXPAX@Z  +
push dword ptr [esi+258h]  +
call ??3@YAXPAX@Z  +
pop ecx  +
pop ecx  +
mov ecx esi +
pop esi  +
jmp loc_1001327  +
***
mov edi edi +
push esi  +
mov esi eax +
xor eax eax +
mov ecx edx +
test edx edx +
jz loc_1001528  +
cmp [esi] ax +
jz loc_1001524  +
inc esi  +
inc esi  +
dec edx  +
jnz loc_100151A  +
test edx edx +
jnz loc_100152D  +
mov eax 80070057h +
pop esi  +
test edi edi +
jz locret_100153E  +
test eax eax +
jl loc_100153B  +
sub ecx edx +
mov [edi] ecx +
retn   +
and dword ptr [edi] 0 +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov ebx eax +
mov esi edx +
xor eax eax +
xor edi edi +
test esi esi +
jz loc_1001579  +
cmp [ebp+arg_4] eax +
jz loc_1001575  +
movzx edx word ptr [ebx] +
test dx dx +
jz loc_1001575  +
mov [ecx] dx +
inc ecx  +
inc ecx  +
inc ebx  +
inc ebx  +
dec esi  +
dec [ebp+arg_4]  +
inc edi  +
test esi esi +
jnz loc_1001558  +
test esi esi +
jnz loc_1001581  +
dec ecx  +
dec ecx  +
dec edi  +
mov eax 8007007Ah +
xor edx edx +
mov [ecx] dx +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_100158F  +
mov [ecx] edi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push esi  +
mov esi ecx +
push dword ptr [esi+0Ch]  +
push dword ptr [esi+8]  +
call ds:LoadIconW  +
test eax eax +
jz loc_10015C3  +
push 0  +
push eax  +
push 170h  +
push 69h  +
push dword ptr [esi+4]  +
call ds:SendDlgItemMessageW  +
push ebx  +
push edi  +
mov edi ds:GetDlgItem +
push 6Ah  +
push dword ptr [esi+4]  +
call edi  +
push dword ptr [esi+10h]  +
mov ebx ds:SetWindowTextW +
push eax  +
call ebx  +
cmp word ptr [esi+14h] 0 +
jz loc_10015F2  +
push 68h  +
push dword ptr [esi+4]  +
call edi  +
lea ecx [esi+14h] +
push ecx  +
jmp loc_100162B  +
push 6Ch  +
push dword ptr [esi+4]  +
call edi  +
mov ebx ds:EnableWindow +
push 0  +
push eax  +
call ebx  +
push 68h  +
push dword ptr [esi+4]  +
call edi  +
push 0  +
push eax  +
call ebx  +
push 6Ch  +
push dword ptr [esi+4]  +
call edi  +
mov ebx ds:ShowWindow +
push 0  +
push eax  +
call ebx  +
push 68h  +
push dword ptr [esi+4]  +
call edi  +
push 0  +
push eax  +
call ebx  +
mov eax [esi+258h] +
pop edi  +
pop ebx  +
test eax eax +
jz loc_1001648  +
push eax  +
push 0  +
push 0Ch  +
push dword ptr [esi+4]  +
call ds:SendMessageW  +
xor eax eax +
pop esi  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
movzx eax [ebp+arg_0] +
push ebx  +
xor ebx ebx +
dec eax  +
dec eax  +
jz loc_1001667  +
mov bl 1 +
jmp loc_1001671  +
push ebx  +
push dword ptr [ecx+4]  +
call ds:EndDialog  +
mov al bl +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_4] +
xor eax eax +
test edx edx +
jz loc_1001693  +
cmp edx 7FFFFFFFh +
jbe loc_1001698  +
mov eax 80070057h +
test eax eax +
jl loc_10016AE  +
mov eax [ebp+arg_8] +
mov ecx [ebp+arg_0] +
push 7FFFFFFEh  +
push 0  +
call sub_1001544  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_10014E0  +
test byte ptr [ebp+8] 1 +
jz loc_10016D1  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_4] +
push ebx  +
xor eax eax +
push esi  +
mov esi 7FFFFFFFh +
test edx edx +
jz loc_10016F6  +
cmp edx esi +
jbe loc_10016FB  +
mov eax 80070057h +
mov ebx [ebp+arg_0] +
test eax eax +
jl loc_1001713  +
push edi  +
lea edi [ebp+arg_0] +
mov eax ebx +
call sub_100150D  +
mov ecx [ebp+arg_0] +
pop edi  +
jmp loc_1001715  +
xor ecx ecx +
test eax eax +
jl loc_100172C  +
mov edx [ebp+arg_4] +
mov eax [ebp+arg_8] +
push esi  +
sub edx ecx +
push 0  +
lea ecx [ebx+ecx*2] +
call sub_1001544  +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
xor eax eax +
test ecx ecx +
jz loc_100174D  +
cmp ecx 7FFFFFFFh +
jbe loc_1001752  +
mov eax 80070057h +
test eax eax +
jl loc_100178F  +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
lea eax [ebp+arg_C] +
push eax  +
push [ebp+arg_8]  +
lea esi [ecx-1] +
push esi  +
push edi  +
xor ebx ebx +
call ds:_vsnwprintf  +
add esp 10h +
test eax eax +
jl loc_100177F  +
cmp eax esi +
ja loc_100177F  +
jnz loc_100178A  +
jmp loc_1001784  +
mov ebx 8007007Ah +
xor eax eax +
mov [edi+esi*2] ax +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
xor eax eax +
push eax  +
push eax  +
lea ecx [ebp+hMem] +
push ecx  +
push eax  +
push [ebp+dwMessageId]  +
mov [ebp+hMem] eax +
push eax  +
push 1100h  +
call ds:FormatMessageW  +
test eax eax +
jz loc_10017D4  +
push [ebp+hMem]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
call sub_100167D  +
push [ebp+hMem]  +
call ds:LocalFree  +
jmp locret_10017E4  +
push offset aErrorMessageNo  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
call sub_100167D  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
push [ebp+nBufferMax]  +
mov edi [ebp+lpBuffer] +
push edi  +
push [ebp+uID]  +
xor esi esi +
push esi  +
call ds:GetModuleHandleW  +
push eax  +
call ds:LoadStringW  +
test eax eax +
jnz loc_1001841  +
call ds:GetLastError  +
test eax eax +
jle loc_1001826  +
and eax 0FFFFh +
or eax 80070000h +
cmp [ebp+arg_C] 0 +
mov esi eax +
jz loc_100183C  +
push [ebp+arg_C]  +
push [ebp+nBufferMax]  +
push edi  +
call sub_100167D  +
jmp loc_1001841  +
xor eax eax +
mov [edi] ax +
pop edi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 41Ch +
mov eax dword_1004000 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_8] +
push ebx  +
push esi  +
push edi  +
mov edi ecx +
mov ecx [ebp+arg_18] +
mov [ebp+Arguments] ecx +
mov ecx [ebp+arg_0] +
mov [edi+8] ecx +
mov ecx [ebp+arg_4] +
xor ebx ebx +
mov [edi+0Ch] ecx +
cmp eax ebx +
jz loc_10018F6  +
push eax  +
mov esi 122h +
push esi  +
lea ebx [edi+14h] +
push ebx  +
call sub_100167D  +
push offset asc_10011CC  +
push esi  +
push ebx  +
call sub_10016DD  +
push 0Ah  +
lea eax [ebp+var_20C] +
push eax  +
push [ebp+arg_C]  +
call ds:_ultow  +
add esp 0Ch +
lea eax [ebp+var_20C] +
push eax  +
push esi  +
push ebx  +
call sub_10016DD  +
push offset asc_10011CC  +
push esi  +
push ebx  +
call sub_10016DD  +
push 0Ah  +
lea eax [ebp+var_20C] +
push eax  +
push [ebp+arg_10]  +
call ds:_ultow  +
add esp 0Ch +
lea eax [ebp+var_20C] +
push eax  +
push esi  +
push ebx  +
call sub_10016DD  +
xor ebx ebx +
push offset dword_10011C8  +
push 104h  +
lea eax [ebp+Buffer] +
push eax  +
push [ebp+uID]  +
call sub_10017ED  +
lea eax [ebp+Arguments] +
push eax  +
push ebx  +
lea eax [ebp+hMem] +
push eax  +
push ebx  +
push ebx  +
lea eax [ebp+Buffer] +
push eax  +
push 500h  +
mov [ebp+hMem] ebx +
call ds:FormatMessageW  +
test eax eax +
jz loc_100197E  +
push [ebp+hMem]  +
call ds:lstrlenW  +
mov esi eax +
inc esi  +
xor ecx ecx +
push 2  +
pop edx  +
mov eax esi +
mul  edx +
seto cl  +
neg ecx  +
or ecx eax +
push ecx  +
call ??2@YAPAXI@Z  +
pop ecx  +
push [ebp+hMem]  +
mov [edi+10h] eax +
push esi  +
push eax  +
call sub_100167D  +
push [ebp+hMem]  +
call ds:LocalFree  +
push 6Bh  +
push ebx  +
mov ecx edi +
call sub_1001483  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_10025D5  +
leave   +
retn 1Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0FA4h +
mov eax dword_1004000 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push ebx  +
push esi  +
push edi  +
mov esi ecx +
mov [esi+8] eax +
mov eax [ebp+arg_8] +
push offset dword_10011C8  +
mov [esi+0Ch] eax +
push 7D0h  +
lea eax [ebp+Buffer] +
push eax  +
push [ebp+uID]  +
call sub_10017ED  +
mov ebx ds:lstrlenW +
lea eax [ebp+Buffer] +
push eax  +
call ebx  +
mov edi eax +
inc edi  +
xor ecx ecx +
push 2  +
pop edx  +
mov eax edi +
mul  edx +
seto cl  +
neg ecx  +
or ecx eax +
push ecx  +
call ??2@YAPAXI@Z  +
pop ecx  +
lea ecx [ebp+Buffer] +
push ecx  +
push edi  +
push eax  +
mov [esi+10h] eax +
call sub_100167D  +
cmp [ebp+arg_C] 0 +
jbe loc_1001A6D  +
push offset dword_10011C8  +
push 7D0h  +
lea eax [ebp+Buffer] +
push eax  +
push [ebp+arg_C]  +
call sub_10017ED  +
lea eax [ebp+Buffer] +
push eax  +
call ebx  +
mov edi eax +
inc edi  +
xor ecx ecx +
push 2  +
pop edx  +
mov eax edi +
mul  edx +
seto cl  +
neg ecx  +
or ecx eax +
push ecx  +
call ??2@YAPAXI@Z  +
pop ecx  +
lea ecx [ebp+Buffer] +
push ecx  +
push edi  +
push eax  +
mov [esi+258h] eax +
call sub_100167D  +
push 70h  +
push 0  +
mov ecx esi +
call sub_1001483  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_10025D5  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push ebx  +
push esi  +
mov esi ecx +
push edi  +
push [ebp+lpString]  +
mov edi ds:lstrlenW +
mov [esi+8] eax +
mov eax [ebp+arg_8] +
mov [esi+0Ch] eax +
call edi  +
lea ebx [eax+1] +
xor ecx ecx +
push 2  +
pop edx  +
mov eax ebx +
mul  edx +
seto cl  +
neg ecx  +
or ecx eax +
push ecx  +
call ??2@YAPAXI@Z  +
pop ecx  +
push [ebp+lpString]  +
mov [esi+10h] eax +
push ebx  +
push eax  +
call sub_100167D  +
cmp [ebp+arg_C] 0 +
jz loc_1001B0B  +
push [ebp+arg_C]  +
call edi  +
lea edi [eax+1] +
xor ecx ecx +
push 2  +
pop edx  +
mov eax edi +
mul  edx +
seto cl  +
neg ecx  +
or ecx eax +
push ecx  +
call ??2@YAPAXI@Z  +
pop ecx  +
push [ebp+arg_C]  +
mov [esi+258h] eax +
push edi  +
push eax  +
call sub_100167D  +
push 6Bh  +
push 0  +
mov ecx esi +
call sub_1001483  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 260h +
mov eax dword_1004000 +
xor eax ebp +
mov [ebp+var_4] eax +
lea ecx [ebp+var_260] +
call sub_10014AE  +
lea eax [ebp+arg_4] +
push eax  +
push [ebp+uID]  +
xor eax eax +
push eax  +
push eax  +
push eax  +
push 7F01h  +
push eax  +
lea ecx [ebp+var_260] +
call sub_100184E  +
lea ecx [ebp+var_260] +
call sub_10014E0  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_10025D5  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 260h +
mov eax dword_1004000 +
xor eax ebp +
mov [ebp+var_4] eax +
lea ecx [ebp+var_260] +
call sub_10014AE  +
push [ebp+arg_8]  +
lea ecx [ebp+var_260] +
push [ebp+arg_4]  +
push [ebp+uID]  +
push 0  +
call sub_100199E  +
lea ecx [ebp+var_260] +
call sub_10014E0  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_10025D5  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0B34h +
mov eax dword_1004000 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
lea ecx [ebp+var_B34] +
call sub_10014AE  +
mov esi 122h +
push esi  +
lea eax [ebp+var_8D8] +
push eax  +
push [ebp+dwMessageId]  +
call sub_1001796  +
push offset aS  +
push esi  +
lea eax [ebp+Buffer] +
push eax  +
push 72h  +
call sub_10017ED  +
push offset dword_10011C8  +
push 104h  +
lea eax [ebp+var_450] +
push eax  +
push 6Dh  +
call sub_10017ED  +
lea eax [ebp+var_8D8] +
push eax  +
lea eax [ebp+Buffer] +
push eax  +
lea eax [ebp+String] +
push esi  +
push eax  +
call sub_1001737  +
add esp 10h +
lea eax [ebp+var_450] +
push eax  +
push 7F01h  +
lea eax [ebp+String] +
push eax  +
push 0  +
lea ecx [ebp+var_B34] +
call sub_1001A8E  +
lea ecx [ebp+var_B34] +
call sub_10014E0  +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop esi  +
call sub_10025D5  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 438h +
mov eax dword_1004000 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
push edi  +
xor ebx ebx +
push ebx  +
push ebx  +
push 1  +
push ebx  +
call ds:HeapSetInformation  +
push 20Ah  +
lea eax [ebp+Buffer] +
push ebx  +
push eax  +
call memset  +
add esp 0Ch +
mov esi 104h +
push esi  +
lea eax [ebp+Buffer] +
push eax  +
call ds:GetSystemDirectoryW  +
cmp eax ebx +
jz loc_10022FD  +
cmp eax esi +
jnb loc_10022FD  +
lea eax [ebp+eax*2+Buffer] +
cmp word ptr [eax-2] 5Ch +
jz loc_1001CFF  +
push 5Ch  +
pop ecx  +
mov [eax] cx +
mov [ebp+var_42C] ebx +
mov [ebp+var_438] ebx +
mov [ebp+var_428] ebx +
mov [ebp+var_41C] ebx +
mov [ebp+var_420] ebx +
call ds:GetCommandLineW  +
lea ecx [ebp+pNumArgs] +
push ecx  +
push eax  +
call ds:CommandLineToArgvW  +
mov edi eax +
mov [ebp+var_434] edi +
cmp edi ebx +
jnz loc_1001D49  +
push 71h  +
call sub_1001B22  +
xor eax eax +
inc eax  +
jmp loc_1002306  +
xor eax eax +
cmp [ebp+pNumArgs] ebx +
jle loc_1001D5B  +
cmp [edi+eax*4] ebx +
jz loc_1001D3A  +
inc eax  +
cmp eax [ebp+pNumArgs] +
jl loc_1001D50  +
cmp [ebp+pNumArgs] 2 +
mov esi ds:lstrlenW +
jnz loc_1001DAD  +
mov ebx offset String +
push ebx  +
call esi  +
push eax  +
push ebx  +
push dword ptr [edi+4]  +
mov ebx ds:StrCmpNIW +
call ebx  +
test eax eax +
jz loc_1001D96  +
push offset a?_0  +
call esi  +
push eax  +
push offset a?_0  +
push dword ptr [edi+4]  +
call ebx  +
test eax eax +
jnz loc_1001DAB  +
push 6Dh  +
push 7F04h  +
push 6Eh  +
call sub_1001B7B  +
xor eax eax +
jmp loc_1002307  +
xor ebx ebx +
xor eax eax +
inc eax  +
cmp [ebp+pNumArgs] eax +
mov [ebp+var_424] ebx +
mov [ebp+var_430] eax +
jle loc_1001FEF  +
jmp loc_1001DCD  +
mov edi [ebp+var_434] +
mov eax [ebp+var_430] +
mov ebx offset aV +
push ebx  +
lea edi [edi+eax*4] +
call esi  +
push eax  +
push ebx  +
push dword ptr [edi]  +
call ds:StrCmpNIW  +
test eax eax +
jz loc_1001F98  +
push offset Str2  +
call esi  +
push eax  +
push offset Str2  +
push dword ptr [edi]  +
call ds:StrCmpNIW  +
test eax eax +
jnz loc_1001E1A  +
push ebx  +
call esi  +
push dword ptr [edi]  +
mov ebx eax +
call esi  +
cmp ebx eax +
jl loc_1001F93  +
mov ebx offset aF +
push ebx  +
call esi  +
push eax  +
push ebx  +
push dword ptr [edi]  +
mov ebx ds:StrCmpNIW +
call ebx  +
test eax eax +
jz loc_1001F7F  +
push offset aF_0  +
call esi  +
push eax  +
push offset aF_0  +
push dword ptr [edi]  +
call ebx  +
test eax eax +
jnz loc_1001E66  +
push offset aF  +
call esi  +
push dword ptr [edi]  +
mov ebx eax +
call esi  +
cmp ebx eax +
jl loc_1001F7F  +
mov ebx ds:StrCmpNIW +
push offset aC  +
call esi  +
push eax  +
push offset aC  +
push dword ptr [edi]  +
call ebx  +
test eax eax +
jz loc_1001F6B  +
push offset aC_0  +
call esi  +
push eax  +
push offset aC_0  +
push dword ptr [edi]  +
call ebx  +
test eax eax +
jnz loc_1001EAF  +
push offset aC  +
call esi  +
push dword ptr [edi]  +
mov ebx eax +
call esi  +
cmp ebx eax +
jl loc_1001F6B  +
mov ebx ds:StrCmpNIW +
push offset asc_1001224  +
call esi  +
push eax  +
push offset asc_1001224  +
push dword ptr [edi]  +
call ebx  +
test eax eax +
jz loc_1001F57  +
push offset asc_1001264  +
call esi  +
push eax  +
push offset asc_1001264  +
push dword ptr [edi]  +
call ebx  +
test eax eax +
jnz loc_1001EF4  +
push offset asc_1001224  +
call esi  +
push dword ptr [edi]  +
mov ebx eax +
call esi  +
cmp ebx eax +
jl loc_1001F57  +
mov ebx ds:StrCmpNIW +
push offset aComputer  +
call esi  +
push eax  +
push offset aComputer  +
push dword ptr [edi]  +
call ebx  +
test eax eax +
jz loc_1001F49  +
push offset aComputer_0  +
call esi  +
push eax  +
push offset aComputer_0  +
push dword ptr [edi]  +
call ebx  +
test eax eax +
jnz loc_1001F2F  +
push offset aComputer  +
call esi  +
push dword ptr [edi]  +
mov ebx eax +
call esi  +
cmp ebx eax +
jl loc_1001F49  +
cmp [ebp+var_430] 1 +
jnz loc_1001FAC  +
mov eax [ebp+var_434] +
mov eax [eax+4] +
mov [ebp+var_42C] eax +
jmp loc_1001FAC  +
push offset aComputer_0  +
call esi  +
mov ecx [edi] +
lea eax [ecx+eax*2] +
jmp loc_1001F41  +
push offset asc_1001224  +
call esi  +
mov ecx [edi] +
lea eax [ecx+eax*2] +
mov [ebp+var_420] eax +
jmp loc_1001FA6  +
push offset aC  +
call esi  +
mov ecx [edi] +
lea eax [ecx+eax*2] +
mov [ebp+var_428] eax +
jmp loc_1001FA6  +
push offset aF  +
call esi  +
mov ecx [edi] +
lea eax [ecx+eax*2] +
mov [ebp+var_41C] eax +
jmp loc_1001FAC  +
mov ebx offset aV +
push ebx  +
call esi  +
mov ecx [edi] +
lea eax [ecx+eax*2] +
mov [ebp+var_438] eax +
inc [ebp+var_424]  +
inc [ebp+var_430]  +
mov eax [ebp+var_430] +
cmp eax [ebp+pNumArgs] +
jl loc_1001DC7  +
cmp [ebp+var_424] 1 +
jg loc_1001D96  +
cmp [ebp+var_41C] 0 +
jz loc_1001FED  +
cmp [ebp+var_428] 0 +
jz loc_1001FED  +
cmp [ebp+var_420] 0 +
jnz loc_1001D96  +
xor ebx ebx +
push 208h  +
lea eax [ebp+File] +
push ebx  +
push eax  +
call memset  +
add esp 0Ch +
lea eax [ebp+Buffer] +
push eax  +
mov edi 104h +
push edi  +
lea eax [ebp+File] +
push eax  +
call sub_100167D  +
push offset aEventvwr_msc  +
push edi  +
lea eax [ebp+File] +
push eax  +
call sub_10016DD  +
push ebx  +
push 80h  +
push 3  +
push ebx  +
push 3  +
push ebx  +
lea eax [ebp+File] +
push eax  +
call ds:CreateFileW  +
cmp eax 0FFFFFFFFh +
jnz loc_1002061  +
lea eax [ebp+File] +
push eax  +
push 64h  +
call sub_1001B22  +
pop ecx  +
jmp loc_1002304  +
push eax  +
call ds:CloseHandle  +
xor edi edi +
cmp [ebp+var_42C] edi +
jz loc_100207C  +
push [ebp+var_42C]  +
call esi  +
mov ebx eax +
cmp [ebp+var_438] edi +
jz loc_1002090  +
push [ebp+var_438]  +
call esi  +
lea ebx [ebx+eax+4] +
cmp [ebp+var_428] edi +
jz loc_10020A2  +
push [ebp+var_428]  +
call esi  +
add ebx eax +
cmp [ebp+var_41C] edi +
jz loc_10020B4  +
push [ebp+var_41C]  +
call esi  +
add ebx eax +
cmp [ebp+var_420] edi +
jz loc_10020C8  +
push [ebp+var_420]  +
call esi  +
lea ebx [ebx+eax+4] +
add ebx 22Ah +
xor ecx ecx +
push 2  +
pop edx  +
mov eax ebx +
mul  edx +
seto cl  +
neg ecx  +
or ecx eax +
push ecx  +
call ??2@YAPAXI@Z  +
mov esi eax +
pop ecx  +
mov [ebp+var_434] esi +
test esi esi +
jz loc_1001DA4  +
xor eax eax +
mov edi esi +
stos   +
cmp [ebp+var_42C] eax +
jz loc_1002127  +
push offset asc_10011CC  +
push ebx  +
push esi  +
call sub_10016DD  +
push offset aComputer  +
push ebx  +
push esi  +
call sub_10016DD  +
push [ebp+var_42C]  +
push ebx  +
push esi  +
call sub_10016DD  +
cmp [ebp+var_438] 0 +
mov edi [ebp+var_434] +
mov esi offset asc_1001284 +
jz loc_1002170  +
push offset asc_10011CC  +
push ebx  +
push edi  +
call sub_10016DD  +
push offset aV  +
push ebx  +
push edi  +
call sub_10016DD  +
push esi  +
push ebx  +
push edi  +
call sub_10016DD  +
push [ebp+var_438]  +
push ebx  +
push edi  +
call sub_10016DD  +
push esi  +
push ebx  +
push edi  +
call sub_10016DD  +
cmp [ebp+var_428] 0 +
jz loc_10021EC  +
push offset asc_10011CC  +
push ebx  +
push edi  +
call sub_10016DD  +
push offset aC  +
push ebx  +
push edi  +
call sub_10016DD  +
push esi  +
push ebx  +
push edi  +
call sub_10016DD  +
push [ebp+var_428]  +
push ebx  +
push edi  +
call sub_10016DD  +
push esi  +
push ebx  +
push edi  +
call sub_10016DD  +
cmp [ebp+var_41C] 0 +
jz loc_10021EC  +
push offset asc_10011CC  +
push ebx  +
push edi  +
call sub_10016DD  +
push offset aF  +
push ebx  +
push edi  +
call sub_10016DD  +
push esi  +
push ebx  +
push edi  +
call sub_10016DD  +
push [ebp+var_41C]  +
push ebx  +
push edi  +
call sub_10016DD  +
push esi  +
push ebx  +
push edi  +
call sub_10016DD  +
cmp [ebp+var_420] 0 +
jz loc_100226C  +
push offset asc_10011CC  +
push ebx  +
push edi  +
call sub_10016DD  +
push offset asc_1001224  +
push ebx  +
push edi  +
call sub_10016DD  +
push esi  +
push ebx  +
push edi  +
call sub_10016DD  +
push [ebp+var_420]  +
push ebx  +
push edi  +
call sub_10016DD  +
push esi  +
push ebx  +
push edi  +
call sub_10016DD  +
cmp [ebp+var_41C] 0 +
jz loc_10022BB  +
push offset asc_10011CC  +
push ebx  +
push edi  +
call sub_10016DD  +
push offset aF  +
push ebx  +
push edi  +
call sub_10016DD  +
push esi  +
push ebx  +
push edi  +
call sub_10016DD  +
push [ebp+var_41C]  +
push ebx  +
push edi  +
call sub_10016DD  +
push esi  +
push ebx  +
push edi  +
call sub_10016DD  +
xor eax eax +
cmp [ebp+var_41C] eax +
jz loc_10022BB  +
cmp [ebp+var_420] eax +
jnz loc_10022BB  +
cmp [ebp+var_428] eax +
jnz loc_10022BB  +
push offset asc_10011CC  +
push ebx  +
push edi  +
call sub_10016DD  +
push offset aF  +
push ebx  +
push edi  +
call sub_10016DD  +
push esi  +
push ebx  +
push edi  +
call sub_10016DD  +
push [ebp+var_41C]  +
push ebx  +
push edi  +
call sub_10016DD  +
push esi  +
push ebx  +
push edi  +
call sub_10016DD  +
push 0  +
push offset Directory  +
push edi  +
lea eax [ebp+File] +
push eax  +
push offset Operation  +
push 0  +
call ds:ShellExecuteW  +
cmp eax 20h +
jg loc_10022F1  +
call ds:GetLastError  +
cmp eax 4C7h +
jz loc_10022F1  +
push 72h  +
push eax  +
call sub_1001BCF  +
push edi  +
call ??3@YAXPAX@Z  +
pop ecx  +
jmp loc_1001DA4  +
push 66h  +
call sub_1001B22  +
xor eax eax +
pop ecx  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_10025D5  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
xor eax eax +
jmp loc_1002337  +
test eax eax +
jnz loc_100233C  +
mov ecx [esi] +
test ecx ecx +
jz loc_1002334  +
call ecx  +
add esi 4 +
cmp esi [ebp+arg_4] +
jb loc_1002328  +
pop esi  +
pop ebp  +
retn   +
***
mov eax dword_1004040 +
push offset dword_1004030  +
push dword_100403C  +
mov dword_1004030 eax +
push offset dword_1004020  +
push offset dword_1004024  +
push offset pNumArgs  +
call ds:__getmainargs  +
add esp 14h +
mov dword_100402C eax +
retn   +
***
call __SEH_prolog4  +
xor ebx ebx +
mov [ebp+ms_exc.disabled] ebx +
mov eax large fs:18h +
mov esi [eax+4] +
mov [ebp+var_1C] ebx +
mov edi offset Destination +
push ebx  +
push esi  +
push edi  +
call ds:InterlockedCompareExchange  +
cmp eax ebx +
jz loc_10023C4  +
cmp eax esi +
jnz loc_10023B7  +
xor esi esi +
inc esi  +
mov [ebp+var_1C] esi +
jmp loc_10023C7  +
push 3E8h  +
call ds:Sleep  +
jmp loc_100239E  +
xor esi esi +
inc esi  +
mov eax dword_1004374 +
cmp eax esi +
jnz loc_10023DA  +
push 1Fh  +
call _amsg_exit  +
pop ecx  +
jmp loc_1002415  +
mov eax dword_1004374 +
test eax eax +
jnz loc_100240F  +
mov dword_1004374 esi +
push offset dword_1001114  +
push offset dword_1001108  +
call sub_100231B  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1002415  +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov eax 0FFh +
jmp loc_10024DF  +
mov dword_1004038 esi +
mov eax dword_1004374 +
cmp eax esi +
jnz loc_1002439  +
push offset dword_1001104  +
push offset dword_10010FC  +
call _initterm  +
pop ecx  +
pop ecx  +
mov dword_1004374 2 +
cmp [ebp+var_1C] ebx +
jnz loc_1002446  +
push ebx  +
push edi  +
call ds:InterlockedExchange  +
cmp dword_100437C ebx +
jz loc_1002467  +
push offset dword_100437C  +
call sub_10026E9  +
pop ecx  +
test eax eax +
jz loc_1002467  +
push ebx  +
push 2  +
push ebx  +
call dword_100437C  +
push dword_1004020  +
push dword_1004024  +
push pNumArgs  +
call sub_1001C8E  +
add esp 0Ch +
mov dword_1004034 eax +
cmp dword_1004028 ebx +
jnz loc_10024C5  +
push eax  +
call ds:exit  +
mov eax [ebp-14h] +
mov ecx [eax] +
mov ecx [ecx] +
mov [ebp-20h] ecx +
push eax  +
push ecx  +
call _XcptFilter  +
pop ecx  +
pop ecx  +
retn   +
mov esp [ebp-18h] +
mov eax [ebp-20h] +
mov dword_1004034 eax +
xor ebx ebx +
cmp dword_1004028 ebx +
jnz loc_10024C5  +
push eax  +
call ds:_exit  +
cmp dword_1004038 ebx +
jnz loc_10024D3  +
call ds:_cexit  +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov eax dword_1004034 +
call __SEH_epilog4  +
retn   +
***
mov eax 5A4Dh +
cmp ds:1000000h ax +
jz loc_10024FC  +
xor eax eax +
jmp loc_1002549  +
mov eax ds:100003Ch +
lea eax [eax+1000000h] +
cmp dword ptr [eax] 4550h +
jnz loc_10024F8  +
movzx ecx word ptr [eax+18h] +
cmp ecx 10Bh +
jz loc_1002536  +
cmp ecx 20Bh +
jnz loc_10024F8  +
cmp dword ptr [eax+84h] 0Eh +
jbe loc_10024F8  +
xor ecx ecx +
cmp [eax+0F8h] ecx +
jmp loc_1002544  +
cmp dword ptr [eax+74h] 0Eh +
jbe loc_10024F8  +
xor ecx ecx +
cmp [eax+0E8h] ecx +
setnz cl  +
mov eax ecx +
push 1  +
mov dword_1004028 eax +
call sub_1002882  +
push eax  +
call ds:__set_app_type  +
or dword_100436C 0FFFFFFFFh +
or dword_1004370 0FFFFFFFFh +
pop ecx  +
pop ecx  +
call ds:__p__fmode  +
mov ecx dword_1004048 +
mov [eax] ecx +
call ds:__p__commode  +
mov ecx dword_1004044 +
mov [eax] ecx +
call sub_1002814  +
cmp dword_1004010 0 +
jnz loc_10025A2  +
push offset sub_1002814  +
call ds:__setusermatherr  +
pop ecx  +
call sub_10027FC  +
xor eax eax +
retn   +
***
call sub_10028C1  +
jmp sub_100237C  +
***
cmp ecx dword_1004000 +
jnz loc_10025E0  +
retn 0  +
jmp loc_1002957  +
***
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov eax [eax] +
cmp dword ptr [eax] 0E06D7363h +
jnz loc_1002632  +
cmp dword ptr [eax+10h] 3 +
jnz loc_1002632  +
mov eax [eax+14h] +
cmp eax 19930520h +
jz loc_100262C  +
cmp eax 19930521h +
jz loc_100262C  +
cmp eax 19930522h +
jz loc_100262C  +
cmp eax 1994000h +
jnz loc_1002632  +
call ds:?terminate@@YAXXZ  +
xor eax eax +
pop ebp  +
retn 4  +
***
push (offset byte_10025F4+1)  +
call ds:SetUnhandledExceptionFilter  +
xor eax eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
mov eax 5A4Dh +
cmp [ecx] ax +
jz loc_1002676  +
xor eax eax +
pop ebp  +
retn   +
mov eax [ecx+3Ch] +
add eax ecx +
cmp dword ptr [eax] 4550h +
jnz loc_1002672  +
xor edx edx +
mov ecx 10Bh +
cmp [eax+18h] cx +
setz dl  +
mov eax edx +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [eax+3Ch] +
add ecx eax +
movzx eax word ptr [ecx+14h] +
push ebx  +
push esi  +
movzx esi word ptr [ecx+6] +
xor edx edx +
push edi  +
lea eax [eax+ecx+18h] +
test esi esi +
jbe loc_10026DD  +
mov edi [ebp+arg_4] +
mov ecx [eax+0Ch] +
cmp edi ecx +
jb loc_10026D5  +
mov ebx [eax+8] +
add ebx ecx +
cmp edi ebx +
jb loc_10026DF  +
inc edx  +
add eax 28h +
cmp edx esi +
jb loc_10026C5  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
call __SEH_prolog4  +
and [ebp+ms_exc.disabled] 0 +
mov esi 1000000h +
push esi  +
call sub_1002660  +
pop ecx  +
test eax eax +
jz loc_1002746  +
mov eax [ebp+arg_0] +
sub eax esi +
push eax  +
push esi  +
call sub_10026A0  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1002746  +
mov eax [eax+24h] +
shr eax 1Fh +
not eax  +
and eax 1 +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
jmp loc_100274F  +
mov eax [ebp-14h] +
mov eax [eax] +
mov eax [eax] +
xor ecx ecx +
cmp eax 0C0000005h +
setz cl  +
mov eax ecx +
retn   +
mov esp [ebp-18h] +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
xor eax eax +
call __SEH_epilog4  +
retn   +
***
mov eax [esp+8+arg_4] +
mov ecx [ebp-10h] +
mov large fs:0 ecx +
pop ecx  +
pop edi  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
push ecx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push offset sub_10025D5  +
push offset dword_1004000  +
call _except_handler4_common  +
add esp 18h +
pop ebp  +
retn   +
***
call ds:_controlfp  +
pop ecx  +
pop ecx  +
retn   +
***
retn   +
***
call __SEH_prolog4  +
xor eax eax +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_1002875  +
cmp ecx 0FFFFFFFFh +
jz loc_1002875  +
and [ebp+ms_exc.disabled] eax +
mov edx 5A4Dh +
cmp [ecx] dx +
jnz loc_100286E  +
mov edx [ecx+3Ch] +
test edx edx +
jl loc_100286E  +
cmp edx 10000000h +
jnb loc_100286E  +
lea eax [edx+ecx] +
mov [ebp+var_1C] eax +
cmp dword ptr [eax] 4550h +
jz loc_100286E  +
jmp loc_1002869  +
xor eax eax +
inc eax  +
retn   +
mov esp [ebp-18h] +
xor eax eax +
mov [ebp+var_1C] eax +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
call __SEH_epilog4  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
call ds:GetModuleHandleA  +
test eax eax +
jz loc_10028B7  +
push eax  +
call sub_100281C  +
test eax eax +
jz loc_10028B7  +
movzx eax word ptr [eax+5Ch] +
cmp ax 2 +
jnz loc_10028AC  +
push 2  +
pop eax  +
pop ebp  +
retn   +
cmp ax 3 +
jnz loc_10028B7  +
xor eax eax +
inc eax  +
pop ebp  +
retn   +
mov eax [ebp+arg_0] +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov eax dword_1004000 +
and [ebp+SystemTimeAsFileTime.dwLowDateTime] 0 +
and [ebp+SystemTimeAsFileTime.dwHighDateTime] 0 +
push ebx  +
push edi  +
mov edi 0BB40E64Eh +
mov ebx 0FFFF0000h +
cmp eax edi +
jz loc_10028F3  +
test eax ebx +
jz loc_10028F3  +
not eax  +
mov dword_1004004 eax +
jmp loc_100294E  +
push esi  +
lea eax [ebp+SystemTimeAsFileTime] +
push eax  +
call ds:GetSystemTimeAsFileTime  +
mov esi [ebp+SystemTimeAsFileTime.dwHighDateTime] +
xor esi [ebp+SystemTimeAsFileTime.dwLowDateTime] +
call ds:GetCurrentProcessId  +
xor esi eax +
call ds:GetCurrentThreadId  +
xor esi eax +
call ds:GetTickCount  +
xor esi eax +
lea eax [ebp+PerformanceCount] +
push eax  +
call ds:QueryPerformanceCounter  +
mov eax dword ptr [ebp+PerformanceCount+4] +
xor eax dword ptr [ebp+PerformanceCount] +
xor esi eax +
cmp esi edi +
jz loc_100293A  +
test dword_1004000 ebx +
jnz loc_100293F  +
mov esi 0BB40E64Fh +
mov dword_1004000 esi +
not esi  +
mov dword_1004004 esi +
pop esi  +
pop edi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 328h +
mov dword_1004150 eax +
mov dword_100414C ecx +
mov dword_1004148 edx +
mov dword_1004144 ebx +
mov dword_1004140 esi +
mov dword_100413C edi +
mov word_1004168 ss +
mov word_100415C cs +
mov word_1004138 ds +
mov word_1004134 es +
mov word_1004130 fs +
mov word_100412C gs +
pushf   +
pop dword_1004160  +
mov eax [ebp+0] +
mov dword_1004154 eax +
mov eax [ebp+4] +
mov dword_1004158 eax +
lea eax [ebp+8] +
mov dword_1004164 eax +
mov eax [ebp-320h] +
mov dword_10040A0 10001h +
mov eax dword_1004158 +
mov dword_100405C eax +
mov dword_1004050 0C0000409h +
mov dword_1004054 1 +
mov eax dword_1004000 +
mov [ebp-328h] eax +
mov eax dword_1004004 +
mov [ebp-324h] eax +
push 0  +
call ds:SetUnhandledExceptionFilter  +
push offset ExceptionInfo  +
call ds:UnhandledExceptionFilter  +
push 0C0000409h  +
call ds:GetCurrentProcess  +
push eax  +
call ds:TerminateProcess  +
leave   +
retn   +
***
retf 2Eh  +
***
