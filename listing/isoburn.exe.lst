push eax  +
jecxz loc_10018A2  +
sbb al 29h +
retf   +
***
pusha   +
arpl [eax-6BFEFFEEh] bx +
adc al [eax] +
add [eax-77FEFFEEh] edx +
adc al [eax] +
add [eax+12h] esi +
add [ecx] al +
pop esp  +
adc al [eax] +
add [edx+edx+0] ecx +
call __SEH_prolog4  +
xor esi esi +
mov [ebp+ms_exc.disabled] esi +
push ecx  +
call ds:InitializeCriticalSection  +
jmp loc_1001B09  +
mov eax [ebp-14h] +
mov eax [eax] +
mov eax [eax] +
mov [ebp-1Ch] eax +
xor eax eax +
inc eax  +
retn   +
mov esp [ebp-18h] +
xor eax eax +
cmp dword ptr [ebp-1Ch] 0C0000017h +
setnz al  +
dec eax  +
and eax 6C009h +
add eax 80004005h +
mov esi eax +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov eax esi +
call __SEH_epilog4  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_1001AC5  +
test eax eax +
jl loc_1001B2F  +
mov byte ptr [esi+18h] 1 +
pop esi  +
retn   +
***
mov eax 0FFFh +
cmp [ecx] ax +
jnz loc_1001B46  +
push 8  +
pop eax  +
mov [ecx] ax +
push ecx  +
call ds:VariantClear  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
test esi esi +
jnz loc_1001B64  +
xor eax eax +
jmp loc_1001B83  +
push edi  +
mov edi [ebp+arg_4] +
test edi edi +
jz loc_1001B72  +
mov eax [edi] +
push edi  +
call dword ptr [eax+4]  +
mov eax [esi] +
test eax eax +
jz loc_1001B7E  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [esi] edi +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
push dword ptr [ecx]  +
call ds:SysFreeString  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
imul eax [ebp+arg_8] +
push esi  +
mov esi [ebp+arg_0] +
add esi eax +
jmp loc_1001BB7  +
sub esi [ebp+arg_4] +
mov ecx esi +
call [ebp+arg_C]  +
dec [ebp+arg_8]  +
jns loc_1001BAF  +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
dec [ebp+arg_8]  +
js loc_1001BE2  +
push esi  +
mov esi [ebp+arg_0] +
mov ecx esi +
call [ebp+arg_C]  +
add esi [ebp+arg_4] +
dec [ebp+arg_8]  +
jns loc_1001BD4  +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
cmp ecx eax +
jz loc_1001C06  +
push esi  +
mov esi [ecx] +
cmp esi [ebp+arg_0] +
pop esi  +
jb loc_1001C06  +
mov eax 80070057h +
jmp loc_1001C1F  +
test [ebp+arg_4] 100h +
jz loc_1001C1F  +
cmp [edx] eax +
jnz loc_1001C1F  +
mov dword ptr [edx] offset dword_1001308 +
cmp ecx eax +
jz loc_1001C1F  +
mov [ecx] eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
test [ebp+arg_8] 100h +
jz loc_1001C43  +
cmp [ebp+arg_0] eax +
jnz loc_1001C47  +
cmp ecx eax +
jnz loc_1001C4C  +
jmp loc_1001C47  +
cmp ecx eax +
jz loc_1001C4C  +
cmp ecx [ebp+arg_4] +
jbe loc_1001C51  +
mov eax 80070057h +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov ebx eax +
mov esi edx +
xor eax eax +
xor edi edi +
test esi esi +
jz loc_1001C8F  +
cmp [ebp+arg_4] eax +
jz loc_1001C8B  +
movzx edx word ptr [ebx] +
test dx dx +
jz loc_1001C8B  +
mov [ecx] dx +
inc ecx  +
inc ecx  +
inc ebx  +
inc ebx  +
dec esi  +
dec [ebp+arg_4]  +
inc edi  +
test esi esi +
jnz loc_1001C6E  +
test esi esi +
jnz loc_1001C97  +
dec ecx  +
dec ecx  +
dec edi  +
mov eax 8007007Ah +
xor edx edx +
mov [ecx] dx +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_1001CA5  +
mov [ecx] edi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp ecx 2 +
jbe loc_1001CD4  +
add ecx 0FFFFFFFEh +
and eax 0FFh +
push ecx  +
push eax  +
mov eax [ebp+arg_0] +
add eax 2 +
push eax  +
call memset  +
add esp 0Ch +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi [ebp+arg_0] +
shr esi 1 +
jz loc_1001D09  +
test [ebp+arg_8] 1000h +
jz loc_1001D09  +
mov edx [ebp+arg_4] +
lea eax [edi+ecx*2] +
mov [edx] eax +
mov edx esi +
sub edx ecx +
xor ecx ecx +
mov [ebx] edx +
mov [eax] cx +
test [ebp+arg_8] 400h +
jz loc_1001D51  +
mov eax [ebp+arg_8] +
push [ebp+arg_0]  +
and eax 0FFh +
push eax  +
push edi  +
mov [ebp+var_4] eax +
call memset  +
add esp 0Ch +
cmp [ebp+var_4] 0 +
jnz loc_1001D39  +
mov eax [ebp+arg_4] +
mov [eax] edi +
mov [ebx] esi +
jmp loc_1001D51  +
test esi esi +
jbe loc_1001D6A  +
mov ecx [ebp+arg_4] +
lea eax [edi+esi*2-2] +
mov [ecx] eax +
xor ecx ecx +
mov dword ptr [ebx] 1 +
mov [eax] cx +
test esi esi +
jbe loc_1001D6A  +
test [ebp+arg_8] 800h +
jz loc_1001D6A  +
mov eax [ebp+arg_4] +
mov [eax] edi +
xor eax eax +
mov [ebx] esi +
mov [edi] ax +
xor eax eax +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_4] 0 +
ja loc_1001D94  +
mov eax [ebp+arg_0] +
jb loc_1001D8B  +
cmp eax 0FFFFFFFFh +
ja loc_1001D94  +
mov ecx [ebp+arg_8] +
mov [ecx] eax +
xor eax eax +
jmp loc_1001D9F  +
mov eax [ebp+arg_8] +
or dword ptr [eax] 0FFFFFFFFh +
mov eax 80070216h +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
mov eax [ebp+arg_4] +
add eax ecx +
cmp eax ecx +
jb loc_1001DC2  +
mov ecx [ebp+arg_8] +
mov [ecx] eax +
xor eax eax +
jmp loc_1001DCD  +
mov eax [ebp+arg_8] +
or dword ptr [eax] 0FFFFFFFFh +
mov eax 80070216h +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
lea eax [ebp+ppMalloc] +
push eax  +
push 1  +
xor esi esi +
call ds:CoGetMalloc  +
test eax eax +
jl loc_1001E06  +
mov eax [ebp+ppMalloc] +
push [ebp+arg_0]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+18h]  +
mov esi eax +
mov eax [ebp+ppMalloc] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax esi +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+cb]  +
call ds:CoTaskMemAlloc  +
mov esi [ebp+arg_C] +
mov [esi] eax +
test eax eax +
jz loc_1001E47  +
test [ebp+arg_4] 1 +
jz loc_1001E43  +
push eax  +
call sub_1001DD6  +
push eax  +
push 0  +
push dword ptr [esi]  +
call memset  +
add esp 0Ch +
xor eax eax +
jmp loc_1001E4C  +
mov eax 8007000Eh +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push 0  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call ds:EventWrite  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 48h +
push [ebp+arg_0]  +
push dword_100814C  +
push dword_1008148  +
call ds:EventEnabled  +
test al al +
jz locret_1001F17  +
push esi  +
push 38h  +
xor esi esi +
lea eax [ebp+var_40] +
push esi  +
push eax  +
call memset  +
add esp 0Ch +
push 4  +
lea ecx [ebp+var_4] +
mov [ebp+var_28] ecx +
lea eax [ebp+arg_4] +
lea ecx [ebp+var_8] +
mov [ebp+var_38] eax +
pop eax  +
mov [ebp+var_18] ecx +
lea ecx [ebp+var_48] +
push ecx  +
push eax  +
push [ebp+arg_0]  +
mov [ebp+var_4] 6 +
push dword_100814C  +
mov [ebp+var_8] 1 +
push dword_1008148  +
mov [ebp+var_48] offset unk_1008010 +
mov [ebp+var_44] esi +
mov [ebp+var_40] 10h +
mov [ebp+var_3C] esi +
mov [ebp+var_34] esi +
mov [ebp+var_30] eax +
mov [ebp+var_2C] esi +
mov [ebp+var_24] esi +
mov [ebp+var_20] eax +
mov [ebp+var_1C] esi +
mov [ebp+var_14] esi +
mov [ebp+var_10] eax +
mov [ebp+var_C] esi +
call ds:EventWrite  +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push esi  +
push edi  +
mov edx ecx +
and dword ptr [edx] 0 +
lea esi [edx+4] +
push 6  +
pop ecx  +
xor eax eax +
mov edi esi +
stos   +
mov [esi+18h] al +
pop edi  +
mov eax edx +
pop esi  +
retn   +
***
lea eax [ecx+4] +
cmp byte ptr [eax+18h] 0 +
jz locret_1001F56  +
push eax  +
mov byte ptr [eax+18h] 0 +
call ds:DeleteCriticalSection  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
push esi  +
mov esi [ebp+arg_0] +
mov eax [esi] +
lea ecx [ebp+var_4] +
push ecx  +
push esi  +
call dword ptr [eax+28h]  +
test eax eax +
jl loc_1001FB3  +
cmp word ptr [ebp+var_4] 0 +
jnz loc_1001FB3  +
and [ebp+arg_0] 0 +
push edi  +
mov edi [ebp+arg_4] +
lea ecx [ebp+arg_0] +
push ecx  +
mov byte ptr [edi] 0 +
mov eax [esi] +
push esi  +
call dword ptr [eax+74h]  +
test eax eax +
jl loc_1001FAD  +
cmp [ebp+arg_0] 3 +
jz loc_1001FAA  +
cmp [ebp+arg_0] 7 +
jz loc_1001FAA  +
cmp [ebp+arg_0] 0Ah +
jnz loc_1001FAD  +
mov byte ptr [edi] 1 +
mov eax 0C0AAF004h +
pop edi  +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi+50h] +
test eax eax +
jz loc_1001FCF  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
lea ecx [esi+30h] +
pop esi  +
jmp sub_1001F42  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
mov eax [ebp+arg_0] +
mov ecx [eax] +
push offset dword_100130C  +
push eax  +
call dword ptr [ecx]  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
mov eax [ebp+arg_0] +
mov ecx [eax] +
push offset dword_100131C  +
push eax  +
call dword ptr [ecx]  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
mov eax [ebp+arg_0] +
mov ecx [eax] +
push offset stru_100132C  +
push eax  +
call dword ptr [ecx]  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+cb] +
and dword ptr [esi] 0 +
lea eax [ebp+cb] +
push eax  +
mov eax [ebp+arg_8] +
push 2  +
pop ecx  +
mul  ecx +
push edx  +
push eax  +
call sub_1001D76  +
test eax eax +
jl loc_1002069  +
push esi  +
push [ebp+cb]  +
push dword ptr [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1001E12  +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ebp+arg_0] +
test eax eax +
jnz loc_1002087  +
mov eax 80070057h +
jmp locret_10020E8  +
mov ecx [eax] +
and [ebp+var_4] 0 +
and [ebp+arg_0] 0 +
push esi  +
lea edx [ebp+var_4] +
push edx  +
push offset dword_1001950  +
push eax  +
call dword ptr [ecx]  +
mov esi eax +
test esi esi +
jl loc_10020CB  +
mov eax [ebp+var_4] +
mov ecx [eax] +
lea edx [ebp+arg_0] +
push edx  +
push [ebp+arg_8]  +
push eax  +
call dword ptr [ecx+10h]  +
mov esi eax +
test esi esi +
jl loc_10020CB  +
push [ebp+arg_C]  +
mov eax [ebp+arg_0] +
push [ebp+arg_4]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+14h]  +
mov esi eax +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_10020D8  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+var_4] +
test eax eax +
jz loc_10020E5  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax esi +
pop esi  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
test [ebp+arg_0] 2 +
push esi  +
mov esi ecx +
jz loc_1002124  +
push edi  +
push offset loc_1001B8D  +
lea edi [esi-4] +
push dword ptr [edi]  +
push 0Ch  +
push esi  +
call sub_1001B9B  +
test [ebp+arg_0] 1 +
jz loc_100211F  +
push edi  +
call ??_V@YAXPAX@Z  +
pop ecx  +
mov eax edi +
pop edi  +
jmp loc_100213B  +
push dword ptr [esi]  +
call ds:SysFreeString  +
test [ebp+arg_0] 1 +
jz loc_1002139  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
push [ebp+arg_18]  +
mov edi [ebp+arg_4] +
mov edx 7FFFFFFFh +
push edx  +
push esi  +
mov ecx edi +
call sub_1001C28  +
mov [ebp+arg_0] eax +
test eax eax +
jl loc_100227E  +
push ebx  +
push [ebp+arg_18]  +
mov ebx edi +
push edx  +
lea ecx [ebp+arg_C] +
lea edx [ebp+arg_8] +
mov [ebp+var_4] esi +
mov [ebp+arg_4] ebx +
call sub_1001BEB  +
xor ecx ecx +
cmp eax ecx +
mov [ebp+arg_0] eax +
jl loc_1002223  +
test [ebp+arg_18] 0FFFFE000h +
jz loc_10021B3  +
mov [ebp+arg_0] 80070057h +
cmp edi ecx +
jz loc_1002232  +
xor eax eax +
mov [esi] ax +
jmp loc_1002232  +
cmp edi ecx +
jnz loc_10021DA  +
cmp [ebp+arg_C] ecx +
jz loc_100222C  +
mov eax [ebp+arg_8] +
cmp [eax] cx +
jz loc_100222C  +
cmp esi ecx +
jnz loc_10021D1  +
mov [ebp+arg_0] 80070057h +
jmp loc_1002232  +
mov [ebp+arg_0] 8007007Ah +
jmp loc_100222C  +
push [ebp+arg_C]  +
lea eax [ebp+arg_4] +
mov [ebp+arg_4] ecx +
push eax  +
mov eax [ebp+arg_8] +
mov edx edi +
mov ecx esi +
call sub_1001C5A  +
mov [ebp+arg_0] eax +
mov eax [ebp+arg_4] +
sub ebx eax +
cmp [ebp+arg_0] 0 +
lea edx [esi+eax*2] +
mov [ebp+var_4] edx +
mov [ebp+arg_4] ebx +
jl loc_1002232  +
test [ebp+arg_18] 200h +
jz loc_100222C  +
cmp ebx 1 +
jbe loc_100222C  +
mov eax [ebp+arg_18] +
lea ecx [ebx+ebx] +
push edx  +
call sub_1001CB1  +
jmp loc_100222C  +
cmp edi ecx +
jz loc_100222C  +
xor eax eax +
mov [esi] ax +
cmp [ebp+arg_0] 0 +
jge loc_1002268  +
test [ebp+arg_18] 1C00h +
jz loc_1002259  +
test edi edi +
jz loc_1002259  +
push [ebp+arg_18]  +
lea eax [ebp+var_4] +
push eax  +
lea eax [edi+edi] +
push eax  +
lea ebx [ebp+arg_4] +
xor ecx ecx +
mov edi esi +
call sub_1001CDF  +
mov ebx [ebp+arg_4] +
cmp [ebp+arg_0] 0 +
jge loc_1002268  +
cmp [ebp+arg_0] 8007007Ah +
jnz loc_100227D  +
mov eax [ebp+arg_10] +
test eax eax +
jz loc_1002274  +
mov ecx [ebp+var_4] +
mov [eax] ecx +
mov eax [ebp+arg_14] +
test eax eax +
jz loc_100227D  +
mov [eax] ebx +
pop ebx  +
mov eax [ebp+arg_0] +
pop edi  +
pop esi  +
leave   +
retn 1Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov eax [eax+50h] +
test eax eax +
jz loc_10022AD  +
cmp dword ptr [ebp+14h] 0 +
jle loc_10022AD  +
push dword ptr [ebp+14h]  +
mov ecx [eax] +
push dword ptr [ebp+10h]  +
push eax  +
call dword ptr [ecx+10h]  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push esi  +
push edi  +
mov edi ds:CoTaskMemFree +
mov esi ecx +
push dword ptr [esi+54h]  +
call edi  +
push dword ptr [esi+58h]  +
call edi  +
mov eax [esi+64h] +
test eax eax +
jz loc_10022DA  +
push eax  +
call ds:CloseHandle  +
mov eax [esi+68h] +
test eax eax +
jz loc_10022E7  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
pop edi  +
lea ecx [esi+34h] +
pop esi  +
jmp sub_1001F42  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push edi  +
lea eax [ebp-4] +
push eax  +
push dword ptr [ebp+10h]  +
xor edi edi +
mov [ebp-8] edi +
mov [ebp-4] edi +
call sub_1001FFB  +
cmp eax edi +
jl loc_1002475  +
mov eax [ebp-4] +
mov ecx [eax] +
lea edx [ebp-8] +
push edx  +
push eax  +
call dword ptr [ecx+44h]  +
cmp eax edi +
jl loc_1002475  +
cmp dword ptr [ebp-8] 4 +
push esi  +
mov esi [ebp+8] +
jnz loc_10023A4  +
mov eax [ebp-4] +
lea edx [ebp-0Ch] +
push edx  +
mov [ebp-0Ch] edi +
mov [ebp+8] edi +
mov [ebp+10h] edi +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+1Ch]  +
cmp eax edi +
jl loc_1002474  +
mov eax [ebp-4] +
mov ecx [eax] +
lea edx [ebp+8] +
push edx  +
push eax  +
call dword ptr [ecx+28h]  +
cmp eax edi +
jl loc_1002474  +
mov eax [ebp-4] +
mov ecx [eax] +
lea edx [ebp+10h] +
push edx  +
push eax  +
call dword ptr [ecx+20h]  +
cmp eax edi +
jl loc_1002474  +
cmp [ebp+10h] edi +
jle loc_1002433  +
mov edx [ebp+8] +
sub edx [ebp-0Ch] +
push dword ptr [ebp+10h]  +
mov eax [esi+68h] +
mov ecx [eax] +
inc edx  +
push edx  +
push eax  +
call dword ptr [ecx+10h]  +
jmp loc_1002433  +
cmp dword ptr [ebp-8] 5 +
jnz loc_10023BA  +
mov eax [esi+68h] +
mov ecx [eax] +
push 3  +
push eax  +
call dword ptr [ecx+0Ch]  +
mov [esi+6Ch] edi +
jmp loc_1002433  +
cmp dword ptr [ebp-8] 7 +
jnz loc_1002433  +
mov eax [ebp-4] +
lea edx [ebp+10h] +
push edx  +
mov [ebp+8] edi +
mov [ebp+10h] edi +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+38h]  +
mov eax [ebp-4] +
mov ecx [eax] +
lea edx [ebp+8] +
push edx  +
push eax  +
call dword ptr [ecx+40h]  +
cmp [esi+6Ch] edi +
jnz loc_10023FD  +
mov eax [esi+68h] +
mov ecx [eax] +
push 4  +
push eax  +
call dword ptr [ecx+0Ch]  +
mov eax [ebp+10h] +
mov dword ptr [esi+6Ch] 1 +
mov [esi+70h] eax +
mov eax [esi+70h] +
mov ecx [ebp+8] +
sub ecx eax +
cmp ecx edi +
jle loc_1002433  +
sub [ebp+10h] eax +
push ebx  +
lea eax [ecx+63h] +
push 64h  +
cdq   +
pop ebx  +
idiv  ebx +
mov edx ecx +
mov [ebp+8] ecx +
pop ebx  +
sub edx eax +
cmp [ebp+10h] edx +
jl loc_1002426  +
mov [ebp+10h] edx +
mov eax [esi+68h] +
mov edx [eax] +
push ecx  +
push dword ptr [ebp+10h]  +
push eax  +
call dword ptr [edx+10h]  +
lea eax [ebp+10h] +
push eax  +
push dword ptr [ebp+0Ch]  +
mov [ebp+10h] edi +
call sub_1002019  +
test eax eax +
jl loc_1002467  +
mov esi [esi+68h] +
lea ecx [ebp+8] +
push ecx  +
mov [ebp+8] edi +
mov eax [esi] +
push esi  +
call dword ptr [eax+18h]  +
cmp [ebp+8] edi +
jz loc_1002467  +
mov eax [ebp+10h] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+0A8h]  +
mov eax [ebp+10h] +
cmp eax edi +
jz loc_1002474  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
pop esi  +
mov eax [ebp-4] +
cmp eax edi +
pop edi  +
jz locret_1002483  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+ppv] 0 +
push esi  +
lea eax [ebp+ppv] +
push eax  +
push offset riid  +
push 17h  +
push 0  +
push offset rclsid  +
call ds:CoCreateInstance  +
mov esi eax +
test esi esi +
jl loc_1002501  +
push edi  +
push [ebp+arg_0]  +
call ds:SysAllocString  +
mov edi eax +
test edi edi +
jz loc_10024DA  +
mov eax [ebp+ppv] +
mov ecx [eax] +
push edi  +
push eax  +
call dword ptr [ecx+24h]  +
push edi  +
mov esi eax +
call ds:SysFreeString  +
jmp loc_10024DF  +
mov esi 8007000Eh +
pop edi  +
test esi esi +
jl loc_1002501  +
mov eax [ebp+ppv] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+2Ch]  +
mov esi eax +
test esi esi +
jl loc_1002501  +
mov eax [ebp+ppv] +
push [ebp+arg_4]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+20h]  +
mov esi eax +
mov eax [ebp+ppv] +
test eax eax +
jz loc_100250E  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax esi +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 24h +
push ebx  +
push esi  +
lea eax [ebp+ppv] +
push eax  +
push offset stru_1001370  +
xor ebx ebx +
push 17h  +
push ebx  +
push offset stru_1001990  +
mov [ebp+ppv] ebx +
mov [ebp+var_8] ebx +
mov [ebp+var_14] ebx +
call ds:CoCreateInstance  +
mov esi eax +
cmp esi ebx +
jl loc_1002657  +
mov eax [ebp+ppv] +
mov ecx [eax] +
lea edx [ebp+var_8] +
push edx  +
push eax  +
call dword ptr [ecx+1Ch]  +
mov esi eax +
cmp esi ebx +
jl loc_1002657  +
push edi  +
xor eax eax +
lea edi [ebp+pvarg] +
stos   +
stos   +
stos   +
stos   +
push ebx  +
xor eax eax +
lea edx [ebp+pvarg] +
push edx  +
xor edi edi +
mov word ptr [ebp+pvarg.anonymous_0] ax +
mov eax [ebp+var_8] +
inc edi  +
push edi  +
mov [ebp+var_4] ebx +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+0Ch]  +
test eax eax +
jnz loc_100262F  +
cmp word ptr [ebp+pvarg.anonymous_0] 8 +
jz loc_10025A2  +
mov esi 8000FFFFh +
jmp loc_1002610  +
lea eax [ebp+var_4] +
push eax  +
push offset stru_1001360  +
push 17h  +
push ebx  +
push offset stru_10019A0  +
call ds:CoCreateInstance  +
mov esi eax +
cmp esi ebx +
jl loc_100260B  +
mov eax [ebp+var_4] +
push dword ptr [ebp+pvarg.anonymous_0+8]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+34h]  +
cmp eax ebx +
jge loc_10025D6  +
mov esi 0C0AAF002h +
jmp loc_100260B  +
mov eax [ebp+var_4] +
mov ecx [eax] +
lea edx [ebp+var_10] +
push edx  +
push eax  +
call dword ptr [ecx+48h]  +
mov esi eax +
cmp esi ebx +
jl loc_100260B  +
push edi  +
push 0FFFFFFFFh  +
push [ebp+var_10]  +
push 0FFFFFFFFh  +
push [ebp+arg_0]  +
call ds:CompareStringOrdinal  +
cmp eax 2 +
jnz loc_1002602  +
mov [ebp+var_14] edi +
push [ebp+var_10]  +
call ds:SysFreeString  +
cmp [ebp+var_14] ebx +
jnz loc_1002643  +
mov eax [ebp+var_4] +
cmp eax ebx +
jz loc_100261D  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
lea ecx [ebp+pvarg] +
call sub_1001B36  +
cmp esi ebx +
jge loc_1002568  +
jmp loc_1002656  +
mov eax [ebp+var_4] +
mov esi 0C0AAF001h +
cmp eax ebx +
jz loc_100264E  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_100264E  +
mov eax [ebp+var_4] +
mov ecx [ebp+arg_4] +
mov [ebp+var_4] ebx +
mov [ecx] eax +
lea ecx [ebp+pvarg] +
call sub_1001B36  +
pop edi  +
mov eax [ebp+var_8] +
cmp eax ebx +
jz loc_1002664  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+ppv] +
cmp eax ebx +
jz loc_1002671  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
lea eax [ecx+28h] +
push eax  +
push offset dword_1001960  +
push ecx  +
push [ebp+arg_0]  +
call sub_1002073  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
lea eax [ecx+28h] +
push eax  +
push offset dword_1001970  +
push ecx  +
push [ebp+arg_0]  +
call sub_1002073  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
push offset Addend  +
mov dword ptr [esi] offset off_10013B4 +
mov dword ptr [esi+4] offset off_1001394 +
mov dword ptr [esi+30h] offset off_1001380 +
mov dword ptr [esi+34h] 1 +
call ds:InterlockedDecrement  +
mov ecx esi +
pop esi  +
jmp loc_10022B6  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov edx [eax] +
mov ecx [ebp+arg_4] +
cmp edx [ecx] +
jnz loc_1002724  +
mov edx [eax+4] +
cmp edx [ecx+4] +
jnz loc_1002724  +
mov edx [eax+8] +
cmp edx [ecx+8] +
jnz loc_1002724  +
mov eax [eax+0Ch] +
cmp eax [ecx+0Ch] +
jnz loc_1002724  +
xor eax eax +
inc eax  +
jmp loc_1002726  +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
cmp dword ptr [eax] 0 +
jnz loc_1002759  +
cmp dword ptr [eax+4] 0 +
jnz loc_1002759  +
cmp dword ptr [eax+8] 0C0h +
jnz loc_1002759  +
cmp dword ptr [eax+0Ch] 46000000h +
jnz loc_1002759  +
xor eax eax +
inc eax  +
jmp loc_100275B  +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
push ebx  +
push esi  +
push edi  +
jz loc_10027F9  +
mov esi [ebp+arg_4] +
test esi esi +
jz loc_10027F9  +
mov ebx [ebp+arg_C] +
test ebx ebx +
jnz loc_100278B  +
mov eax 80004003h +
jmp loc_10027FE  +
push [ebp+arg_8]  +
and dword ptr [ebx] 0 +
call sub_100272F  +
test eax eax +
jz loc_10027EB  +
mov esi [esi+4] +
add esi [ebp+arg_0] +
mov eax [esi] +
push esi  +
call dword ptr [eax+4]  +
mov [ebx] esi +
xor eax eax +
jmp loc_10027FE  +
mov eax [esi] +
xor ecx ecx +
test eax eax +
setz cl  +
mov [ebp+arg_4] ecx +
test ecx ecx +
jnz loc_10027C9  +
push [ebp+arg_8]  +
push eax  +
call sub_10026F6  +
test eax eax +
jz loc_10027E8  +
cmp edi 1 +
jz loc_100279A  +
push dword ptr [esi+4]  +
push ebx  +
push [ebp+arg_8]  +
push [ebp+arg_0]  +
call edi  +
test eax eax +
jz loc_10027FE  +
cmp [ebp+arg_4] 0 +
jnz loc_10027E8  +
test eax eax +
jl loc_10027FE  +
add esi 0Ch +
mov edi [esi+8] +
test edi edi +
jnz loc_10027AC  +
mov eax 80004002h +
jmp loc_10027FE  +
mov eax 80070057h +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
mov edi [ebp+arg_0] +
test edi edi +
jnz loc_100281E  +
mov eax 80070057h +
jmp loc_1002869  +
and [ebp+arg_0] 0 +
push esi  +
push 0Ch  +
call ??2@YAPAXI@Z  +
mov esi eax +
pop ecx  +
test esi esi +
jnz loc_100283A  +
mov [ebp+arg_0] 8007000Eh +
jmp loc_1002865  +
mov eax [ebp+arg_4] +
push ebx  +
mov [esi] eax +
mov eax [ebp+arg_8] +
lea ebx [edi+1Ch] +
push ebx  +
mov [esi+4] eax +
call ds:EnterCriticalSection  +
lea eax [edi+80h] +
mov ecx [eax] +
mov [esi+8] ecx +
push ebx  +
mov [eax] esi +
call ds:LeaveCriticalSection  +
pop ebx  +
mov eax [ebp+arg_0] +
pop esi  +
pop edi  +
pop ebp  +
retn 0Ch  +
***
mov eax ecx +
and dword ptr [eax] 0 +
and dword ptr [eax+4] 0 +
or dword ptr [eax+8] 0FFFFFFFFh +
retn   +
***
mov eax [esp+4] +
mov edx [eax+4] +
mov [esp+4] edx +
mov eax [eax+8] +
jmp eax  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax] +
push esi  +
mov esi ecx +
mov [esi] eax +
test eax eax +
jz loc_10028B4  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+0Ch] +
test eax eax +
jnz loc_10028D3  +
mov eax 80070057h +
jmp loc_10028DB  +
mov dword ptr [eax] 1 +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
mov edi [ebp+10h] +
test edi edi +
jnz loc_10028F8  +
mov eax 80004003h +
jmp loc_100294C  +
and dword ptr [edi] 0 +
push ebx  +
mov ebx [ebp+0Ch] +
push esi  +
push offset dword_1001970  +
push ebx  +
call sub_10026F6  +
mov esi [ebp+8] +
test eax eax +
jnz loc_1002940  +
push ebx  +
call sub_100272F  +
test eax eax +
jnz loc_1002940  +
push offset dword_10019E0  +
push ebx  +
call sub_10026F6  +
test eax eax +
jnz loc_1002940  +
lea eax [esi+14h] +
push eax  +
push ebx  +
call sub_10026F6  +
test eax eax +
jnz loc_1002940  +
mov eax 80004002h +
jmp loc_100294A  +
mov [edi] esi +
mov eax [esi] +
push esi  +
call dword ptr [eax+4]  +
xor eax eax +
pop esi  +
pop ebx  +
pop edi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
add eax 34h +
push eax  +
call ds:InterlockedIncrement  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push edi  +
mov edi ecx +
test eax eax +
jnz loc_1002988  +
push 1Dh  +
pop eax  +
jmp loc_1002A0A  +
mov ecx [eax] +
and [ebp+arg_0] 0 +
push esi  +
push 1Dh  +
pop esi  +
lea edx [ebp+arg_0] +
push edx  +
push [ebp+arg_4]  +
push eax  +
call dword ptr [ecx+38h]  +
test eax eax +
mov eax [ebp+arg_0] +
jge loc_10029B2  +
test eax eax +
jz loc_10029AE  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax esi +
jmp loc_1002A09  +
and [ebp+arg_4] 0 +
mov ecx [eax] +
lea edx [ebp+arg_4] +
push edx  +
push eax  +
call dword ptr [ecx+0Ch]  +
mov eax [ebp+arg_4] +
test eax eax +
jz loc_10029F9  +
cmp dword ptr [eax+28h] 6 +
jnz loc_10029EB  +
movzx ecx word ptr [eax+40h] +
cmp cx si +
jnz loc_10029E8  +
push dword ptr [eax+3Ch]  +
mov ecx edi +
push [ebp+arg_0]  +
call sub_1002971  +
mov eax [ebp+arg_4] +
jmp loc_10029EB  +
movzx esi cx +
test eax eax +
jz loc_10029F9  +
mov ecx [ebp+arg_0] +
mov edx [ecx] +
push eax  +
push ecx  +
call dword ptr [edx+4Ch]  +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_1002A06  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov ax si +
pop esi  +
pop edi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
mov esi ecx +
and dword ptr [esi] 0 +
test eax eax +
jz loc_1002A31  +
mov ecx [eax] +
push esi  +
push offset dword_10019F0  +
push eax  +
call dword ptr [ecx]  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
mov eax [ebp+arg_0] +
mov ecx [eax] +
push offset dword_1001418  +
push eax  +
call dword ptr [ecx]  +
pop ebp  +
retn 8  +
***
sub dword ptr [esp+4] 30h +
jmp loc_1002956  +
***
mov eax [esp+4] +
mov eax [eax] +
jmp dword ptr [eax+1Ch]  +
***
sub dword ptr [esp+4] 4 +
jmp loc_1002956  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push offset off_10013D4  +
push ecx  +
call sub_1002764  +
pop ebp  +
retn 8  +
***
test byte ptr dword_1008180 1 +
jnz loc_1002AF3  +
or dword_1008180 1 +
xor eax eax +
mov ecx offset loc_1002A6A +
mov dword_1008030 ecx +
xor ecx ecx +
mov dword_1008034 eax +
mov dword_1008038 eax +
mov dword_1008040 eax +
mov dword_1008044 eax +
mov dword_1008048 eax +
mov dword_100804C eax +
mov dword_1008050 eax +
mov dword_1008054 ecx +
mov dword_1008058 eax +
mov eax offset unk_1008020 +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+10h]  +
mov ecx [ebp+8] +
push dword ptr [ebp+0Ch]  +
call sub_1002A87  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax ecx +
lea ecx [eax-4] +
sub esp 48h +
neg eax  +
sbb eax eax +
push ebx  +
mov ebx [ebp+arg_8] +
and eax ecx +
movzx ecx word ptr [ebx+6] +
cmp cx 8 +
jle loc_1002B45  +
mov eax 80004005h +
jmp loc_1002BCE  +
push esi  +
movsx esi cx +
neg esi  +
sbb esi esi +
and [ebp+arg_8] 0 +
movsx ecx cx +
lea edx [ebp+var_48] +
and esi edx +
push edi  +
test ecx ecx +
jle loc_1002B7A  +
mov edi [ebp+arg_C] +
mov edi [edi] +
mov edx ecx +
shl edx 4 +
lea edx [edx+edi-10h] +
mov edi [ebp+arg_8] +
mov [esi+edi*4] edx +
inc edi  +
sub edx 10h +
cmp edi ecx +
jl loc_1002B6F  +
push eax  +
push [ebp+arg_4]  +
lea ecx [ebp+pvInstance] +
push [ebp+arg_0]  +
call sub_1002C96  +
xor eax eax +
lea edi [ebp+pvarg] +
stos   +
stos   +
stos   +
stos   +
xor eax eax +
mov word ptr [ebp+pvarg.anonymous_0] ax +
mov eax [ebp+arg_10] +
test eax eax +
jnz loc_1002BA2  +
lea eax [ebp+pvarg] +
push eax  +
push esi  +
lea eax [ebx+8] +
push eax  +
movsx eax word ptr [ebx+6] +
push eax  +
movzx eax word ptr [ebx+4] +
push eax  +
push dword ptr [ebx]  +
lea eax [ebp+pvInstance] +
push 0  +
push eax  +
call ds:DispCallFunc  +
lea ecx [ebp+pvarg] +
mov esi eax +
call sub_1001B36  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 14h  +
***
mov edi edi +
push esi  +
mov esi ecx +
push offset Addend  +
mov dword ptr [esi] offset off_1001448 +
mov dword ptr [esi+4] offset off_1001428 +
mov dword ptr [esi+30h] 1 +
call ds:InterlockedDecrement  +
mov ecx esi +
pop esi  +
jmp loc_1001FBD  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
mov edi [ebp+10h] +
test edi edi +
jnz loc_1002C1D  +
mov eax 80004003h +
jmp loc_1002C71  +
and dword ptr [edi] 0 +
push ebx  +
mov ebx [ebp+0Ch] +
push esi  +
push offset dword_1001960  +
push ebx  +
call sub_10026F6  +
mov esi [ebp+8] +
test eax eax +
jnz loc_1002C65  +
push ebx  +
call sub_100272F  +
test eax eax +
jnz loc_1002C65  +
push offset dword_10019E0  +
push ebx  +
call sub_10026F6  +
test eax eax +
jnz loc_1002C65  +
lea eax [esi+14h] +
push eax  +
push ebx  +
call sub_10026F6  +
test eax eax +
jnz loc_1002C65  +
mov eax 80004002h +
jmp loc_1002C6F  +
mov [edi] esi +
mov eax [esi] +
push esi  +
call dword ptr [eax+4]  +
xor eax eax +
pop esi  +
pop ebx  +
pop edi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
add eax 30h +
push eax  +
call ds:InterlockedIncrement  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
lea eax [ecx+10h] +
mov dword ptr [eax] offset loc_1002886 +
mov [ecx] eax +
mov eax [ebp+arg_8] +
mov [ecx+4] eax +
mov eax [ebp+arg_0] +
mov [ecx+8] eax +
mov eax [ebp+arg_4] +
mov [ecx+0Ch] eax +
pop ebp  +
retn 0Ch  +
***
sub dword ptr [esp+4] 4 +
jmp loc_1002C7B  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push offset off_1001468  +
push ecx  +
call sub_1002764  +
pop ebp  +
retn 8  +
***
test byte ptr dword_1008184 1 +
jnz loc_1002D3C  +
or dword_1008184 1 +
xor eax eax +
mov ecx offset loc_1002A6A +
mov dword_1008070 ecx +
xor ecx ecx +
mov dword_1008074 eax +
mov dword_1008078 eax +
mov dword_1008080 eax +
mov dword_1008084 eax +
mov dword_1008088 eax +
mov dword_100808C eax +
mov dword_1008090 eax +
mov dword_1008094 ecx +
mov dword_1008098 eax +
mov eax offset unk_1008060 +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+10h]  +
mov ecx [ebp+8] +
push dword ptr [ebp+0Ch]  +
call sub_1002CD0  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_14] +
and dword ptr [esi] 0 +
push edi  +
lea eax [ebp+arg_14] +
push eax  +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
call sub_1001DA8  +
mov edi eax +
test edi edi +
jl loc_1002DB3  +
push esi  +
push [ebp+arg_14]  +
push dword ptr [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1002037  +
mov edi eax +
test edi edi +
jl loc_1002DB3  +
push 300h  +
push 0  +
push 0  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_14]  +
push dword ptr [esi]  +
call sub_1002145  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 18h  +
***
sub dword ptr [esp+4] 30h +
jmp loc_1002AFE  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+8] +
test esi esi +
jz loc_1002DFF  +
mov eax [esi+0Ch] +
test eax eax +
jz loc_1002DE9  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov ecx [esi+14h] +
and dword ptr [esi+0Ch] 0 +
test ecx ecx +
jz loc_1002DFB  +
push 3  +
call sub_10020F1  +
and dword ptr [esi+14h] 0 +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov eax [edi] +
mov ebx ecx +
lea ecx [ebp+var_14] +
push ecx  +
push edi  +
call dword ptr [eax+0Ch]  +
mov [ebp+var_C] eax +
test eax eax +
jl loc_1002F76  +
mov eax [ebp+var_14] +
movzx esi word ptr [eax+2Ch] +
and [ebp+arg_0] 0 +
mov [ebx+18h] esi +
test esi esi +
jz loc_1002E89  +
xor ecx ecx +
push 0Ch  +
pop edx  +
mov eax esi +
mul  edx +
seto cl  +
neg ecx  +
or ecx eax +
xor eax eax +
add ecx 4 +
setb al  +
neg eax  +
or eax ecx +
push eax  +
call ??_U@YAPAXI@Z  +
pop ecx  +
test eax eax +
jz loc_1002E85  +
push offset loc_1002873  +
push esi  +
mov [eax] esi +
add eax 4 +
push 0Ch  +
push eax  +
mov [ebp+arg_0] eax +
call sub_1001BC6  +
mov eax [ebp+arg_0] +
mov [ebp+arg_0] eax +
jmp loc_1002E89  +
and [ebp+arg_0] 0 +
mov eax [ebx+18h] +
xor ecx ecx +
cmp eax ecx +
jz loc_1002EA4  +
cmp [ebp+arg_0] ecx +
jnz loc_1002EA4  +
mov [ebx+18h] ecx +
mov eax 8007000Eh +
jmp loc_1002F79  +
cmp eax ecx +
mov [ebp+var_8] ecx +
jle loc_1002F67  +
mov esi [ebp+arg_0] +
add esi 8 +
mov eax [edi] +
lea ecx [ebp+var_10] +
push ecx  +
push [ebp+var_8]  +
push edi  +
call dword ptr [eax+14h]  +
mov [ebp+var_C] eax +
xor eax eax +
cmp [ebp+var_C] eax +
jl loc_1002F51  +
mov ecx [edi] +
push eax  +
push eax  +
push eax  +
mov [ebp+var_4] eax +
lea eax [ebp+var_4] +
push eax  +
mov eax [ebp+var_10] +
push dword ptr [eax]  +
push edi  +
call dword ptr [ecx+30h]  +
mov [ebp+var_C] eax +
test eax eax +
jl loc_1002F27  +
mov eax [ebp+var_4] +
and [ebp+var_4] 0 +
push eax  +
mov [esi-8] eax +
call ds:SysStringLen  +
mov [esi-4] eax +
mov eax [ebp+var_10] +
mov ecx [eax] +
push eax  +
mov [esi] ecx +
mov ecx [edi] +
push edi  +
call dword ptr [ecx+50h]  +
push [ebp+var_4]  +
call ds:SysFreeString  +
inc [ebp+var_8]  +
mov eax [ebp+var_8] +
add esi 0Ch +
cmp eax [ebx+18h] +
jl loc_1002EB5  +
jmp loc_1002F67  +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_1002F35  +
push 3  +
call sub_10020F1  +
push [ebp+var_10]  +
and dword ptr [ebx+18h] 0 +
mov eax [edi] +
and [ebp+arg_0] 0 +
push edi  +
call dword ptr [eax+50h]  +
push [ebp+var_4]  +
call ds:SysFreeString  +
jmp loc_1002F67  +
mov ecx [ebp+arg_0] +
cmp ecx eax +
jz loc_1002F61  +
push 3  +
call sub_10020F1  +
xor eax eax +
mov [ebp+arg_0] eax +
mov [ebx+18h] eax +
mov eax [ebp+arg_0] +
push [ebp+var_14]  +
mov [ebx+14h] eax +
mov eax [edi] +
push edi  +
call dword ptr [eax+4Ch]  +
mov eax [ebp+var_C] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push esi  +
push edi  +
mov esi ecx +
xor edi edi +
cmp [esi+0Ch] edi +
jz loc_1002FA4  +
cmp [esi+14h] edi +
jz loc_1002FA4  +
xor eax eax +
jmp loc_100307B  +
push ebx  +
push offset CriticalSection  +
xor ebx ebx +
call ds:EnterCriticalSection  +
cmp [esi+0Ch] edi +
jnz loc_1003057  +
lea eax [ebp+pptlib] +
push eax  +
push [ebp+lcid]  +
movzx eax word ptr [esi+0Ah] +
push eax  +
movzx eax word ptr [esi+8] +
push eax  +
push dword ptr [esi+4]  +
call ds:LoadRegTypeLib  +
mov ebx eax +
cmp ebx edi +
jl loc_1003057  +
mov eax [ebp+pptlib] +
lea edx [ebp+lcid] +
push edx  +
push dword ptr [esi]  +
mov [ebp+lcid] edi +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+18h]  +
mov ebx eax +
cmp ebx edi +
jl loc_1003041  +
lea eax [ebp+lcid] +
push eax  +
lea ecx [ebp+var_8] +
call sub_100289B  +
lea eax [ebp+var_4] +
push eax  +
push [ebp+lcid]  +
mov [ebp+var_4] edi +
call sub_1002A3D  +
test eax eax +
jl loc_100301E  +
push [ebp+var_4]  +
lea eax [ebp+var_8] +
push eax  +
call sub_1001B53  +
mov eax [ebp+var_8] +
push esi  +
push offset loc_1002DCF  +
push offset unk_1008188  +
mov [esi+0Ch] eax +
call sub_100280A  +
mov eax [ebp+var_4] +
cmp eax edi +
jz loc_1003041  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+pptlib] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+lcid] +
cmp eax edi +
jz loc_1003057  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [esi+0Ch] +
cmp eax edi +
jz loc_100306D  +
cmp [esi+14h] edi +
jnz loc_100306D  +
push eax  +
mov ecx esi +
call sub_1002E09  +
mov ebx eax +
push offset CriticalSection  +
call ds:LeaveCriticalSection  +
mov eax ebx +
pop ebx  +
pop edi  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_4]  +
mov esi ecx +
lea eax [esi+50h] +
push eax  +
call sub_1001B53  +
push [ebp+arg_0]  +
lea ecx [esi+4] +
call sub_100267E  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and dword ptr [ebp-4] 0 +
push esi  +
lea eax [ebp-4] +
push eax  +
push dword ptr [ebp+0Ch]  +
call sub_100251A  +
mov esi [ebp-4] +
test eax eax +
jl loc_10030D3  +
mov eax [esi] +
push esi  +
call dword ptr [eax+1Ch]  +
test esi esi +
jz loc_10030DD  +
mov eax [esi] +
push esi  +
call dword ptr [eax+8]  +
xor eax eax +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 24h +
mov eax dword_1008110 +
xor eax ebp +
mov [ebp-4] eax +
mov eax [ebp+1Ch] +
push esi  +
mov [ebp-20h] eax +
mov eax [ebp+20h] +
push edi  +
mov edi [ebp+8] +
mov [ebp-24h] eax +
call sub_1002CEF  +
mov esi eax +
mov eax [esi+4] +
test eax eax +
jz loc_100313A  +
mov ecx offset dword_1001960 +
cmp dword ptr [esi] 1 +
jnz loc_1003130  +
mov edx [esi+0Ch] +
cmp edx [ebp+0Ch] +
jnz loc_1003130  +
cmp eax ecx +
jz loc_100313E  +
mov eax [esi+24h] +
add esi 20h +
test eax eax +
jnz loc_100311F  +
xor eax eax +
jmp loc_1003177  +
push ebx  +
mov ebx [esi+18h] +
test ebx ebx +
jnz loc_1003162  +
mov eax [edi] +
lea ebx [ebp-1Ch] +
mov edx ebx +
push edx  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+0Ch]  +
push ecx  +
mov ecx edi +
call dword ptr [eax+1Ch]  +
test eax eax +
jge loc_1003162  +
xor eax eax +
jmp loc_1003176  +
push dword ptr [ebp-24h]  +
mov ecx edi +
push dword ptr [ebp-20h]  +
push ebx  +
push dword ptr [esi+14h]  +
push dword ptr [esi+10h]  +
call sub_1002B1A  +
pop ebx  +
mov ecx [ebp-4] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_100677B  +
leave   +
retn 24h  +
***
mov edi edi +
push esi  +
push edi  +
mov eax ecx +
mov dword ptr [eax+28h] 0FEFEFEFEh +
lea edi [eax+4] +
mov esi offset dword_1001980 +
movs   +
movs   +
movs   +
movs   +
lea edi [eax+14h] +
mov esi offset dword_1001970 +
movs   +
movs   +
movs   +
xor ecx ecx +
movs   +
inc ecx  +
mov [eax+24h] cx +
xor ecx ecx +
pop edi  +
mov [eax+26h] cx +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 24h +
mov eax dword_1008110 +
xor eax ebp +
mov [ebp-4] eax +
mov eax [ebp+1Ch] +
push esi  +
mov [ebp-20h] eax +
mov eax [ebp+20h] +
push edi  +
mov edi [ebp+8] +
mov [ebp-24h] eax +
call sub_1002AA6  +
mov esi eax +
mov eax [esi+4] +
test eax eax +
jz loc_1003217  +
mov ecx offset dword_1001970 +
cmp dword ptr [esi] 1 +
jnz loc_100320D  +
mov edx [esi+0Ch] +
cmp edx [ebp+0Ch] +
jnz loc_100320D  +
cmp eax ecx +
jz loc_100321B  +
mov eax [esi+24h] +
add esi 20h +
test eax eax +
jnz loc_10031FC  +
xor eax eax +
jmp loc_1003254  +
push ebx  +
mov ebx [esi+18h] +
test ebx ebx +
jnz loc_100323F  +
mov eax [edi] +
lea ebx [ebp-1Ch] +
mov edx ebx +
push edx  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+0Ch]  +
push ecx  +
mov ecx edi +
call dword ptr [eax+1Ch]  +
test eax eax +
jge loc_100323F  +
xor eax eax +
jmp loc_1003253  +
push dword ptr [ebp-24h]  +
mov ecx edi +
push dword ptr [ebp-20h]  +
push ebx  +
push dword ptr [esi+14h]  +
push dword ptr [esi+10h]  +
call sub_1002B1A  +
pop ebx  +
mov ecx [ebp-4] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_100677B  +
leave   +
retn 24h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_10026BE  +
test [ebp+arg_0] 1 +
jz loc_1003283  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1002BD8  +
test [ebp+arg_0] 1 +
jz loc_10032A9  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_8] +
lea ecx [eax+2] +
mov dx [eax] +
inc eax  +
inc eax  +
test dx dx +
jnz loc_10032C0  +
push [ebp+arg_C]  +
sub eax ecx +
push 1  +
sar eax 1 +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1002D63  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push esi  +
push edi  +
mov eax ecx +
mov dword ptr [eax+28h] 0FEFEFEFEh +
lea edi [eax+4] +
mov esi offset dword_1001980 +
movs   +
movs   +
movs   +
movs   +
lea edi [eax+14h] +
mov esi offset dword_1001960 +
movs   +
movs   +
movs   +
xor ecx ecx +
movs   +
inc ecx  +
mov [eax+24h] cx +
xor ecx ecx +
pop edi  +
mov [eax+26h] cx +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_4] +
mov esi ecx +
test edi edi +
jnz loc_100333C  +
mov eax 80004003h +
jmp loc_1003364  +
and dword ptr [edi] 0 +
xor eax eax +
cmp [esi+0Ch] eax +
jnz loc_100334E  +
push [ebp+lcid]  +
call sub_1002F85  +
mov ecx [esi+0Ch] +
mov [edi] ecx +
cmp dword ptr [esi+0Ch] 0 +
jz loc_1003364  +
mov esi [esi+0Ch] +
mov eax [esi] +
push esi  +
call dword ptr [eax+4]  +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
cmp [ecx+0Ch] eax +
jz loc_1003380  +
cmp [ecx+14h] eax +
jnz loc_1003386  +
pop ebp  +
jmp sub_1002F85  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
jz loc_10033A1  +
mov eax 8002000Bh +
jmp loc_10033AC  +
push [ebp+arg_8]  +
push [ebp+lcid]  +
call sub_1003325  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push ebx  +
push [ebp+arg_C]  +
mov ebx ecx +
call sub_100336F  +
cmp dword ptr [ebx+0Ch] 0 +
jz loc_100344C  +
cmp dword ptr [ebx+14h] 0 +
push esi  +
push edi  +
jz loc_1003438  +
cmp [ebp+arg_8] 1 +
jnz loc_1003438  +
mov eax [ebp+arg_4] +
push dword ptr [eax]  +
call ds:lstrlenW  +
mov edx [ebx+18h] +
dec edx  +
mov [ebp+var_8] eax +
js loc_1003438  +
mov ecx [ebx+14h] +
mov eax edx +
imul eax eax +
mov [ebp+var_C] ecx +
lea ecx [eax+ecx+4] +
mov [ebp+arg_C] eax +
mov [ebp+var_4] ecx +
mov eax [ebp+var_8] +
cmp eax [ecx] +
jnz loc_1003426  +
mov ecx [ebp+arg_C] +
mov eax [ebx+14h] +
mov esi [ebp+arg_4] +
mov edi [esi] +
add eax ecx +
mov ecx [eax+4] +
mov esi [eax] +
add ecx ecx +
xor eax eax +
cmps   +
jz loc_1003451  +
mov ecx [ebp+var_4] +
sub [ebp+arg_C] 0Ch +
dec edx  +
sub ecx 0Ch +
mov [ebp+var_4] ecx +
test edx edx +
jge loc_1003405  +
push [ebp+arg_10]  +
mov ebx [ebx+0Ch] +
push [ebp+arg_8]  +
mov eax [ebx] +
push [ebp+arg_4]  +
push ebx  +
call dword ptr [eax+28h]  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 14h  +
mov eax [ebp+var_C] +
imul edx edx +
mov eax [edx+eax+8] +
mov ecx [ebp+arg_10] +
mov [ecx] eax +
xor eax eax +
jmp loc_100344A  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push dword ptr [ebp+14h]  +
mov esi ecx +
call sub_100336F  +
cmp dword ptr [esi+0Ch] 0 +
jz loc_100349D  +
push dword ptr [ebp+28h]  +
mov eax [esi+0Ch] +
push dword ptr [ebp+24h]  +
mov ecx [eax] +
push dword ptr [ebp+20h]  +
push dword ptr [ebp+1Ch]  +
push dword ptr [ebp+18h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push eax  +
call dword ptr [ecx+2Ch]  +
pop esi  +
pop ebp  +
retn 24h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push 0  +
push 0  +
call sub_10032B5  +
pop ebp  +
retn 8  +
***
mov edi edi +
push esi  +
mov esi ecx +
lea ecx [esi+34h] +
call sub_1001F20  +
lea ecx [esi+4] +
call sub_100318C  +
xor eax eax +
mov dword ptr [esi+30h] offset off_100133C +
mov [esi+54h] eax +
mov [esi+58h] eax +
mov [esi+5Ch] eax +
mov [esi+60h] eax +
mov [esi+64h] eax +
mov [esi+68h] eax +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+14h]  +
mov ecx offset off_10080A0 +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
call sub_100338F  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+1Ch]  +
mov ecx offset off_10080A0 +
push dword ptr [ebp+18h]  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
call sub_10033B5  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx offset off_10080A0 +
pop ebp  +
jmp loc_1003469  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+14h]  +
mov ecx offset off_10080BC +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
call sub_100338F  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+1Ch]  +
mov ecx offset off_10080BC +
push dword ptr [ebp+18h]  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
call sub_10033B5  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push ebx  +
push esi  +
push offset dword_1001A00  +
push off_10080C0  +
mov esi ecx +
xor ebx ebx +
mov [ebp-0Ch] esi +
mov [ebp-8] ebx +
call sub_10026F6  +
test eax eax +
jz loc_10035EE  +
lea eax [esi+4] +
mov off_10080C0 eax +
lea eax [esi+14h] +
mov off_10080BC eax +
mov ax [esi+24h] +
mov word_10080C4 ax +
mov ax [esi+26h] +
mov word_10080C6 ax +
lea eax [ebp-8] +
push eax  +
push dword ptr [ebp+10h]  +
mov ecx offset off_10080BC +
call sub_1003325  +
mov esi eax +
cmp esi ebx +
jge loc_1003616  +
mov eax [ebp-8] +
cmp eax ebx +
jz loc_1003612  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax esi +
jmp loc_1003694  +
mov esi [ebp-8] +
push edi  +
push esi  +
lea ecx [ebp+10h] +
call sub_1002A14  +
mov eax [ebp+10h] +
mov [ebp-4] ebx +
cmp eax ebx +
jz loc_100369A  +
mov ecx [eax] +
lea edx [ebp+0Ch] +
push edx  +
push 1  +
push dword ptr [ebp+0Ch]  +
push eax  +
call dword ptr [ecx+60h]  +
mov edi eax +
cmp edi ebx +
jge loc_1003655  +
mov eax [ebp+10h] +
cmp eax ebx +
jz loc_100364F  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
cmp esi ebx +
jz loc_1003691  +
jmp loc_100368B  +
mov eax [esi] +
lea ecx [ebp-4] +
push ecx  +
push dword ptr [ebp+0Ch]  +
push esi  +
call dword ptr [eax+14h]  +
mov edi eax +
cmp edi ebx +
jl loc_10036AA  +
mov eax [ebp-4] +
movzx ecx word ptr [eax+18h] +
cmp cx 8 +
jle loc_100373C  +
mov eax [ebp+10h] +
cmp eax ebx +
jz loc_1003686  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov edi 80004005h +
mov eax [esi] +
push esi  +
call dword ptr [eax+8]  +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
mov eax [esi] +
lea ecx [ebp-8] +
push ecx  +
push esi  +
call dword ptr [eax+0Ch]  +
mov edi eax +
cmp edi ebx +
jge loc_10036B9  +
mov eax [ebp+10h] +
cmp eax ebx +
jz loc_100368B  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_100368B  +
***
mov ecx [ebp-8] +
xor eax eax +
xor edi edi +
cmp ax [ecx+2Ch] +
jnb loc_10036F8  +
mov eax [esi] +
lea ecx [ebp-4] +
push ecx  +
push edi  +
push esi  +
call dword ptr [eax+14h]  +
mov ebx eax +
test ebx ebx +
jl loc_1003722  +
mov eax [ebp-4] +
mov ecx [eax] +
cmp ecx [ebp+0Ch] +
jz loc_10036F8  +
mov ecx [esi] +
push eax  +
push esi  +
call dword ptr [ecx+50h]  +
and dword ptr [ebp-4] 0 +
mov eax [ebp-8] +
movzx eax word ptr [eax+2Ch] +
inc edi  +
cmp edi eax +
jl loc_10036C6  +
push dword ptr [ebp-8]  +
mov eax [esi] +
push esi  +
call dword ptr [eax+4Ch]  +
mov eax [ebp-4] +
xor ebx ebx +
cmp eax ebx +
jnz loc_100366B  +
mov eax [ebp+10h] +
cmp eax ebx +
jz loc_100371B  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov ebx 80004005h +
jmp loc_100372F  +
mov eax [ebp+10h] +
test eax eax +
jz loc_100372F  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [esi] +
push esi  +
call dword ptr [eax+8]  +
mov eax ebx +
jmp loc_1003693  +
***
xor edx edx +
cmp dx cx +
mov [ebp+0Ch] ebx +
jge loc_100379B  +
mov edi [ebp+14h] +
add edi 8 +
mov ecx [eax+8] +
movzx ecx word ptr [ecx+ebx+4] +
mov [edi] cx +
cmp cx 1Ah +
jnz loc_100376F  +
mov ecx [eax+8] +
mov ecx [ecx+ebx] +
mov edx 4000h +
or dx [ecx+4] +
mov [edi] dx +
cmp word ptr [edi] 1Dh +
jnz loc_100378A  +
mov eax [eax+8] +
push dword ptr [eax+ebx]  +
mov ecx [ebp-0Ch] +
push esi  +
call sub_1002971  +
mov [edi] ax +
mov eax [ebp-4] +
inc dword ptr [ebp+0Ch]  +
movsx ecx word ptr [eax+18h] +
inc edi  +
inc edi  +
add ebx 10h +
cmp [ebp+0Ch] ecx +
jl loc_100374C  +
movzx edx word ptr [eax+24h] +
movzx ecx dx +
sub ecx 16h +
jz loc_10037BC  +
dec ecx  +
jz loc_10037B8  +
dec ecx  +
jz loc_10037B4  +
dec ecx  +
jnz loc_10037BF  +
push 0Ah  +
jmp loc_10037BE  +
xor edx edx +
jmp loc_10037BF  +
push 13h  +
jmp loc_10037BE  +
push 3  +
pop edx  +
mov ecx [ebp+14h] +
mov [ecx+4] dx +
mov edx [eax+14h] +
mov [ecx] edx +
mov dx [eax+18h] +
push eax  +
mov [ecx+6] dx +
mov ecx [esi] +
push esi  +
call dword ptr [ecx+50h]  +
mov eax [ebp+10h] +
test eax eax +
jz loc_10037E7  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
xor edi edi +
jmp loc_100368B  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+14h]  +
mov ecx offset off_10080D8 +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
call sub_100338F  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+1Ch]  +
mov ecx offset off_10080D8 +
push dword ptr [ebp+18h]  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
call sub_10033B5  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx offset off_10080D8 +
pop ebp  +
jmp loc_1003469  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+14h]  +
mov ecx offset off_10080F4 +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
call sub_100338F  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+1Ch]  +
mov ecx offset off_10080F4 +
push dword ptr [ebp+18h]  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
call sub_10033B5  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push ebx  +
push esi  +
push offset dword_1001A00  +
push off_10080F8  +
mov esi ecx +
xor ebx ebx +
mov [ebp-0Ch] esi +
mov [ebp-8] ebx +
call sub_10026F6  +
test eax eax +
jz loc_10038E4  +
lea eax [esi+4] +
mov off_10080F8 eax +
lea eax [esi+14h] +
mov off_10080F4 eax +
mov ax [esi+24h] +
mov word_10080FC ax +
mov ax [esi+26h] +
mov word_10080FE ax +
lea eax [ebp-8] +
push eax  +
push dword ptr [ebp+10h]  +
mov ecx offset off_10080F4 +
call sub_1003325  +
mov esi eax +
cmp esi ebx +
jge loc_100390C  +
mov eax [ebp-8] +
cmp eax ebx +
jz loc_1003908  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax esi +
jmp loc_100398A  +
mov esi [ebp-8] +
push edi  +
push esi  +
lea ecx [ebp+10h] +
call sub_1002A14  +
mov eax [ebp+10h] +
mov [ebp-4] ebx +
cmp eax ebx +
jz loc_1003990  +
mov ecx [eax] +
lea edx [ebp+0Ch] +
push edx  +
push 1  +
push dword ptr [ebp+0Ch]  +
push eax  +
call dword ptr [ecx+60h]  +
mov edi eax +
cmp edi ebx +
jge loc_100394B  +
mov eax [ebp+10h] +
cmp eax ebx +
jz loc_1003945  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
cmp esi ebx +
jz loc_1003987  +
jmp loc_1003981  +
mov eax [esi] +
lea ecx [ebp-4] +
push ecx  +
push dword ptr [ebp+0Ch]  +
push esi  +
call dword ptr [eax+14h]  +
mov edi eax +
cmp edi ebx +
jl loc_10039A0  +
mov eax [ebp-4] +
movzx ecx word ptr [eax+18h] +
cmp cx 8 +
jle loc_1003A32  +
mov eax [ebp+10h] +
cmp eax ebx +
jz loc_100397C  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov edi 80004005h +
mov eax [esi] +
push esi  +
call dword ptr [eax+8]  +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
mov eax [esi] +
lea ecx [ebp-8] +
push ecx  +
push esi  +
call dword ptr [eax+0Ch]  +
mov edi eax +
cmp edi ebx +
jge loc_10039AF  +
mov eax [ebp+10h] +
cmp eax ebx +
jz loc_1003981  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_1003981  +
***
mov ecx [ebp-8] +
xor eax eax +
xor edi edi +
cmp ax [ecx+2Ch] +
jnb loc_10039EE  +
mov eax [esi] +
lea ecx [ebp-4] +
push ecx  +
push edi  +
push esi  +
call dword ptr [eax+14h]  +
mov ebx eax +
test ebx ebx +
jl loc_1003A18  +
mov eax [ebp-4] +
mov ecx [eax] +
cmp ecx [ebp+0Ch] +
jz loc_10039EE  +
mov ecx [esi] +
push eax  +
push esi  +
call dword ptr [ecx+50h]  +
and dword ptr [ebp-4] 0 +
mov eax [ebp-8] +
movzx eax word ptr [eax+2Ch] +
inc edi  +
cmp edi eax +
jl loc_10039BC  +
push dword ptr [ebp-8]  +
mov eax [esi] +
push esi  +
call dword ptr [eax+4Ch]  +
mov eax [ebp-4] +
xor ebx ebx +
cmp eax ebx +
jnz loc_1003961  +
mov eax [ebp+10h] +
cmp eax ebx +
jz loc_1003A11  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov ebx 80004005h +
jmp loc_1003A25  +
mov eax [ebp+10h] +
test eax eax +
jz loc_1003A25  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [esi] +
push esi  +
call dword ptr [eax+8]  +
mov eax ebx +
jmp loc_1003989  +
***
xor edx edx +
cmp dx cx +
mov [ebp+0Ch] ebx +
jge loc_1003A91  +
mov edi [ebp+14h] +
add edi 8 +
mov ecx [eax+8] +
movzx ecx word ptr [ecx+ebx+4] +
mov [edi] cx +
cmp cx 1Ah +
jnz loc_1003A65  +
mov ecx [eax+8] +
mov ecx [ecx+ebx] +
mov edx 4000h +
or dx [ecx+4] +
mov [edi] dx +
cmp word ptr [edi] 1Dh +
jnz loc_1003A80  +
mov eax [eax+8] +
push dword ptr [eax+ebx]  +
mov ecx [ebp-0Ch] +
push esi  +
call sub_1002971  +
mov [edi] ax +
mov eax [ebp-4] +
inc dword ptr [ebp+0Ch]  +
movsx ecx word ptr [eax+18h] +
inc edi  +
inc edi  +
add ebx 10h +
cmp [ebp+0Ch] ecx +
jl loc_1003A42  +
movzx edx word ptr [eax+24h] +
movzx ecx dx +
sub ecx 16h +
jz loc_1003AB2  +
dec ecx  +
jz loc_1003AAE  +
dec ecx  +
jz loc_1003AAA  +
dec ecx  +
jnz loc_1003AB5  +
push 0Ah  +
jmp loc_1003AB4  +
xor edx edx +
jmp loc_1003AB5  +
push 13h  +
jmp loc_1003AB4  +
push 3  +
pop edx  +
mov ecx [ebp+14h] +
mov [ecx+4] dx +
mov edx [eax+14h] +
mov [ecx] edx +
mov dx [eax+18h] +
push eax  +
mov [ecx+6] dx +
mov ecx [esi] +
push esi  +
call dword ptr [ecx+50h]  +
mov eax [ebp+10h] +
test eax eax +
jz loc_1003ADD  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
xor edi edi +
jmp loc_1003981  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+8] +
push edi  +
lea eax [esi+34h] +
push eax  +
call ds:InterlockedDecrement  +
mov edi eax +
test edi edi +
jnz loc_1003B10  +
test esi esi +
jz loc_1003B10  +
push 1  +
mov ecx esi +
call sub_1003269  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+8] +
push edi  +
lea eax [esi+30h] +
push eax  +
call ds:InterlockedDecrement  +
mov edi eax +
test edi edi +
jnz loc_1003B44  +
test esi esi +
jz loc_1003B44  +
push 1  +
mov ecx esi +
call sub_100328F  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_10034C4  +
push offset Addend  +
mov dword ptr [esi] offset off_10013B4 +
mov dword ptr [esi+4] offset off_1001394 +
mov dword ptr [esi+30h] offset off_1001380 +
call ds:InterlockedIncrement  +
mov eax esi +
pop esi  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
lea ecx [esi+30h] +
call sub_1001F20  +
lea ecx [esi+4] +
call sub_10032EB  +
and dword ptr [esi+50h] 0 +
mov eax esi +
pop esi  +
retn   +
***
sub dword ptr [esp+4] 30h +
jmp loc_1003AE9  +
***
sub dword ptr [esp+4] 4 +
jmp loc_1003AE9  +
***
sub dword ptr [esp+4] 4 +
jmp loc_1003B1D  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jnz loc_1003BE7  +
mov eax 80004003h +
jmp loc_1003C4B  +
and dword ptr [eax] 0 +
push ebx  +
push esi  +
push 74h  +
mov ebx 8007000Eh +
call ??2@YAPAXI@Z  +
pop ecx  +
test eax eax +
jz loc_1003C0A  +
push 0  +
mov ecx eax +
call sub_1003B51  +
mov esi eax +
jmp loc_1003C0C  +
xor esi esi +
test esi esi +
jz loc_1003C42  +
push edi  +
lea edi [esi+34h] +
push edi  +
call ds:InterlockedIncrement  +
lea ecx [esi+38h] +
call sub_1001B1D  +
mov ebx eax +
test ebx ebx +
jl loc_1003C2B  +
xor ebx ebx +
push edi  +
call ds:InterlockedDecrement  +
pop edi  +
test ebx ebx +
jz loc_1003C42  +
push 1  +
mov ecx esi +
call sub_1003269  +
xor esi esi +
mov eax [ebp+arg_0] +
mov [eax] esi +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_1003B85  +
push offset Addend  +
mov dword ptr [esi] offset off_1001448 +
mov dword ptr [esi+4] offset off_1001428 +
call ds:InterlockedIncrement  +
mov eax esi +
pop esi  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
cmp [ebp+arg_0] 0 +
jz loc_1003C94  +
mov eax 80040110h +
jmp locret_1003CE3  +
and [ebp+arg_0] 0 +
and [ebp+var_4] 0 +
push esi  +
push edi  +
lea eax [ebp+arg_0] +
push eax  +
call sub_1003BD4  +
mov esi [ebp+arg_0] +
mov edi eax +
mov eax esi +
neg eax  +
sbb eax eax +
lea ecx [esi+30h] +
and eax ecx +
push eax  +
lea eax [ebp+var_4] +
push eax  +
call sub_1001B53  +
test edi edi +
jl loc_1003CD2  +
push [ebp+arg_8]  +
mov eax [esi] +
push [ebp+arg_4]  +
push esi  +
call dword ptr [eax]  +
mov edi eax +
mov eax [ebp+var_4] +
test eax eax +
jz loc_1003CDF  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax edi +
pop edi  +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
xor esi esi +
cmp ebx esi +
jnz loc_1003D03  +
mov eax 80004003h +
jmp loc_1003D49  +
push edi  +
push 54h  +
mov [ebx] esi +
mov edi 8007000Eh +
call ??2@YAPAXI@Z  +
pop ecx  +
cmp eax esi +
jz loc_1003D21  +
push esi  +
mov ecx eax +
call sub_1003C54  +
mov esi eax +
test esi esi +
jz loc_1003D44  +
lea ecx [esi+34h] +
call sub_1001B1D  +
mov edi eax +
test edi edi +
jl loc_1003D39  +
xor edi edi +
test edi edi +
jz loc_1003D44  +
push 1  +
mov ecx esi +
call sub_100328F  +
xor esi esi +
mov eax edi +
mov [ebx] esi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
and [ebp+var_8] 0 +
and [ebp+ppv] 0 +
push esi  +
lea eax [ebp+ppv] +
push eax  +
push offset stru_1001490  +
push 17h  +
push 0  +
push offset stru_10019B0  +
call ds:CoCreateInstance  +
mov esi eax +
test esi esi +
jl loc_1003E14  +
push ebx  +
lea eax [ebp+var_8] +
push eax  +
call sub_1003CEC  +
mov ebx [ebp+var_8] +
mov esi eax +
test esi esi +
jl loc_1003E09  +
mov eax [ebx] +
push edi  +
push ebx  +
call dword ptr [eax+4]  +
mov edi [ebp+arg_4] +
push edi  +
push [ebp+ppv]  +
mov ecx ebx +
call sub_1003086  +
mov esi eax +
test esi esi +
jl loc_1003E08  +
push offset aIsoburn  +
call ds:SysAllocString  +
mov esi eax +
mov eax [ebp+ppv] +
mov ecx [eax] +
push esi  +
push eax  +
call dword ptr [ecx+44h]  +
push esi  +
call ds:SysFreeString  +
mov eax [ebp+ppv] +
push [ebp+arg_0]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+30h]  +
mov esi eax +
test esi esi +
jl loc_1003E08  +
mov eax [edi] +
push 1  +
push edi  +
call dword ptr [eax+0Ch]  +
mov eax [ebp+ppv] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4Ch]  +
mov esi eax +
test esi esi +
jl loc_1003E08  +
mov eax [ebp+ppv] +
mov ecx [eax] +
push 0  +
push eax  +
call dword ptr [ecx+30h]  +
mov esi eax +
pop edi  +
test ebx ebx +
jz loc_1003E13  +
mov eax [ebx] +
push ebx  +
call dword ptr [eax+8]  +
pop ebx  +
mov eax [ebp+ppv] +
test eax eax +
jz loc_1003E21  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax esi +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 38h +
mov eax hInstance +
push ebx  +
push esi  +
push edi  +
push 2  +
xor edi edi +
pop esi  +
mov [ebp+var_30] eax +
lea eax [ebp+var_38] +
push eax  +
mov ebx ecx +
mov [ebp+var_20] edi +
mov [ebp+var_14] edi +
mov byte ptr [ebp+var_1] 0 +
mov [ebp+var_2] 0 +
mov [ebp+var_38] edi +
mov [ebp+var_34] esi +
mov [ebp+var_2C] 0FDh +
mov [ebp+var_28] edi +
mov [ebp+var_24] edi +
call ds:PowerCreateRequest  +
mov [ebp+hObject] eax +
cmp eax 0FFFFFFFFh +
jz loc_1003E84  +
push 1  +
push eax  +
call ds:PowerSetRequest  +
lea eax [ebp+var_20] +
push eax  +
push dword ptr [ebx+54h]  +
call sub_100248C  +
test eax eax +
jl loc_1004127  +
lea eax [ebp+var_10] +
push eax  +
push dword ptr [ebx+58h]  +
mov [ebp+var_10] edi +
call sub_100251A  +
cmp eax edi +
mov [ebp+var_8] eax +
jl loc_10040FE  +
lea eax [ebp+ppv] +
push eax  +
push offset stru_100132C  +
push 17h  +
push edi  +
push offset stru_10019C0  +
mov [ebp+ppv] edi +
call ds:CoCreateInstance  +
cmp eax edi +
mov [ebp+var_8] eax +
jl loc_10040C5  +
lea eax [ebp+var_18] +
push eax  +
push [ebp+ppv]  +
mov [ebp+var_18] edi +
call sub_1001FDD  +
cmp eax edi +
mov [ebp+var_8] eax +
jl loc_1003F03  +
mov edx [ebx+5Ch] +
mov eax [ebp+var_18] +
mov ecx [eax] +
neg edx  +
sbb edx edx +
and edx esi +
push edx  +
push eax  +
call dword ptr [ecx+0Ch]  +
mov [ebp+var_8] eax +
mov eax [ebp+var_18] +
cmp eax edi +
jz loc_1003F10  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
cmp [ebp+var_8] edi +
jl loc_10040C5  +
mov eax [ebx+68h] +
mov ecx [eax] +
push edi  +
push eax  +
call dword ptr [ecx+0Ch]  +
push offset aIsoburn  +
call ds:SysAllocString  +
mov esi eax +
mov eax [ebp+ppv] +
mov ecx [eax] +
push esi  +
push eax  +
call dword ptr [ecx+78h]  +
push esi  +
call ds:SysFreeString  +
mov eax [ebp+ppv] +
push [ebp+var_10]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+30h]  +
cmp eax edi +
mov [ebp+var_8] eax +
jl loc_10040C5  +
lea eax [ebp+var_1] +
push eax  +
push [ebp+ppv]  +
call sub_1001F5C  +
mov esi eax +
mov [ebp+var_8] esi +
cmp esi 0C0AAF004h +
jnz loc_1003F97  +
cmp byte ptr [ebp+var_1] 0 +
jz loc_10040BC  +
cmp [ebx+60h] edi +
jz loc_10040AB  +
push dword ptr [ebx+68h]  +
push [ebp+var_10]  +
call sub_1003D54  +
test eax eax +
jge loc_1003FAB  +
mov byte ptr [ebp+var_1] 0 +
cmp esi 0C0AA0205h +
jnz loc_1003FA3  +
mov [ebp+var_2] 1 +
cmp esi edi +
jl loc_10040AB  +
push [ebp+ppv]  +
lea ecx [ebx+4] +
call sub_100269E  +
cmp eax edi +
mov [ebp+var_8] eax +
jl loc_10040C5  +
mov eax [ebx+68h] +
mov ecx [eax] +
push 2  +
push eax  +
call dword ptr [ecx+0Ch]  +
cmp dword_1008174 0 +
mov edi 10000h +
mov esi 80000000h +
jz loc_1004032  +
mov al byte_1008178 +
cmp al 4 +
jnb loc_1003FEC  +
test al al +
jnz loc_1004032  +
mov eax dword_1008160 +
mov ecx dword_1008164 +
and eax edi +
and ecx esi +
or eax ecx +
jz loc_1004032  +
mov eax dword_1008168 +
mov edx dword_100816C +
mov ecx eax +
and ecx edi +
and edx esi +
cmp ecx eax +
jnz loc_1004032  +
cmp edx dword_100816C +
jnz loc_1004032  +
push offset dword_10012E8  +
push dword_100814C  +
push dword_1008148  +
call sub_1001E56  +
mov eax [ebp+ppv] +
push [ebp+var_20]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+0A4h]  +
cmp dword_1008174 0 +
mov [ebp+var_8] eax +
jz loc_100409E  +
mov al byte_1008178 +
cmp al 4 +
jnb loc_100405A  +
test al al +
jnz loc_100409E  +
mov eax dword_1008160 +
mov ecx dword_1008164 +
and eax edi +
and ecx esi +
or eax ecx +
jz loc_100409E  +
mov eax dword_1008168 +
mov ecx eax +
and ecx edi +
mov edi dword_100816C +
mov edx edi +
and edx esi +
cmp ecx eax +
jnz loc_100409E  +
cmp edx edi +
jnz loc_100409E  +
push offset dword_10012F8  +
push dword_100814C  +
push dword_1008148  +
call sub_1001E56  +
mov eax [ebp+var_10] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+1Ch]  +
xor edi edi +
jmp loc_10040C5  +
cmp byte ptr [ebp+var_1] 0 +
jz loc_10040B6  +
cmp [ebx+60h] edi +
jz loc_10040C5  +
cmp [ebp+var_2] 0 +
jnz loc_10040C5  +
mov eax [ebp+var_10] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+1Ch]  +
mov eax [ebp+ppv] +
cmp eax edi +
jz loc_10040D2  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
cmp [ebp+var_8] edi +
jl loc_10040EF  +
push 10E6h  +
push offset dword_10012C8  +
mov [ebp+var_14] 0Ah +
call sub_1001E77  +
jmp loc_1004118  +
cmp [ebp+var_2] 0 +
jz loc_10040FE  +
mov [ebp+var_14] 5 +
jmp loc_1004115  +
cmp [ebp+var_8] 0C0AAF004h +
jnz loc_1004118  +
xor eax eax +
cmp byte ptr [ebp+var_1] al +
setz al  +
add eax 3 +
mov [ebp+var_14] eax +
mov [ebp+var_8] edi +
mov eax [ebp+var_10] +
cmp eax edi +
jz loc_100412E  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_100412E  +
mov [ebp+var_8] 0C0AAF003h +
cmp [ebp+var_8] edi +
jge loc_100413A  +
mov [ebp+var_14] 1 +
cmp [ebp+hObject] 0FFFFFFFFh +
jz loc_1004154  +
push 1  +
push [ebp+hObject]  +
call ds:PowerClearRequest  +
push [ebp+hObject]  +
call ds:CloseHandle  +
push [ebp+var_8]  +
mov eax [ebx+68h] +
push [ebp+var_14]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+14h]  +
mov eax [ebp+var_20] +
cmp eax edi +
pop edi  +
pop esi  +
pop ebx  +
jz locret_1004173  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push 0  +
call ds:CoInitializeEx  +
test eax eax +
jl loc_10041B0  +
push esi  +
mov esi [ebp+arg_0] +
mov ecx esi +
call sub_1003E2E  +
mov eax [esi+68h] +
test eax eax +
jz loc_10041A9  +
and dword ptr [esi+68h] 0 +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
call ds:CoUninitialize  +
pop esi  +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+8] +
mov eax [esi] +
push esi  +
call dword ptr [eax+4]  +
push esi  +
call sub_100417A  +
mov eax [esi] +
push esi  +
call dword ptr [eax+8]  +
xor eax eax +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
xor edi edi +
cmp [ebp+0Ch] edi +
jz loc_1004264  +
cmp [ebp+10h] edi +
jz loc_1004264  +
cmp [ebp+1Ch] edi +
jz loc_1004264  +
push ebx  +
push esi  +
mov esi [ebp+8] +
lea eax [esi+24h] +
push eax  +
push dword ptr [ebp+0Ch]  +
call sub_10034A7  +
mov ebx eax +
cmp ebx edi +
jl loc_100425E  +
lea eax [esi+28h] +
push eax  +
push dword ptr [ebp+10h]  +
call sub_10034A7  +
mov ebx eax +
cmp ebx edi +
jl loc_100425E  +
mov eax [esi+34h] +
cmp eax edi +
jz loc_1004230  +
push eax  +
call ds:CloseHandle  +
mov eax [ebp+14h] +
push dword ptr [ebp+1Ch]  +
mov [esi+2Ch] eax +
mov eax [ebp+18h] +
mov [esi+30h] eax +
lea eax [esi+38h] +
push eax  +
call sub_1001B53  +
push edi  +
push edi  +
lea eax [esi-30h] +
push eax  +
push offset loc_10041BB  +
push edi  +
push edi  +
call ds:CreateThread  +
mov [esi+34h] eax +
pop esi  +
mov eax ebx +
pop ebx  +
jmp loc_1004269  +
mov eax 80070057h +
pop edi  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
mov [ecx+4] eax +
mov eax [ebp+arg_0] +
sub eax ecx +
push 0Dh  +
sub eax 0Dh +
push ecx  +
mov dword ptr [ecx] 42444C7h +
mov byte ptr [ecx+8] 0E9h +
mov [ecx+9] eax +
call ds:GetCurrentProcess  +
push eax  +
call ds:FlushInstructionCache  +
xor eax eax +
inc eax  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
cmp dword ptr [esi] 0 +
jnz loc_10042C7  +
call sub_1006386  +
mov [esi] eax +
test eax eax +
jz loc_10042E5  +
cmp [ebp+arg_0] 0 +
jnz loc_10042D8  +
cmp [ebp+arg_4] 0 +
jnz loc_10042D8  +
xor eax eax +
inc eax  +
jmp loc_10042E5  +
push [ebp+arg_4]  +
mov ecx [esi] +
push [ebp+arg_0]  +
call sub_1004273  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+0Ch] +
push edi  +
test esi esi +
jz loc_1004334  +
mov eax [ebp+10h] +
test eax eax +
jz loc_1004334  +
mov [esi] eax +
call ds:GetCurrentThreadId  +
mov edi [ebp+8] +
lea ebx [edi+34h] +
push ebx  +
mov [esi+4] eax +
call ds:EnterCriticalSection  +
mov eax [edi+68h] +
mov [esi+8] eax +
push ebx  +
mov [edi+68h] esi +
call ds:LeaveCriticalSection  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
push 0  +
push 0  +
push 1  +
push 0C0000005h  +
call ds:RaiseException  +
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
lea ebx [edi+34h] +
push ebx  +
call ds:EnterCriticalSection  +
mov esi [edi+68h] +
test esi esi +
jz loc_1004398  +
call ds:GetCurrentThreadId  +
xor ecx ecx +
cmp [esi+4] eax +
jz loc_1004384  +
mov ecx esi +
mov esi [esi+8] +
test esi esi +
jnz loc_1004374  +
jmp loc_1004398  +
mov eax [esi+8] +
test ecx ecx +
jnz loc_1004390  +
mov [edi+68h] eax +
jmp loc_1004393  +
mov [ecx+8] eax +
mov eax [esi] +
mov [ebp+var_4] eax +
push ebx  +
call ds:LeaveCriticalSection  +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+lParam]  +
push [ebp+wParam]  +
push 80h  +
push dword ptr [ecx]  +
call ds:SendMessageW  +
pop ebp  +
retn 8  +
***
mov edi edi +
push esi  +
mov esi eax +
xor eax eax +
mov ecx edx +
test edx edx +
jz loc_10043EA  +
cmp [esi] ax +
jz loc_10043E6  +
inc esi  +
inc esi  +
dec edx  +
jnz loc_10043DC  +
test edx edx +
jnz loc_10043EF  +
mov eax 80070057h +
pop esi  +
test edi edi +
jz locret_1004400  +
test eax eax +
jl loc_10043FD  +
sub ecx edx +
mov [edi] ecx +
retn   +
and dword ptr [edi] 0 +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+wParam]  +
push 402h  +
push 0CAh  +
push dword ptr [ecx+4]  +
call ds:GetDlgItem  +
push eax  +
call ds:SendMessageW  +
xor eax eax +
pop ebp  +
retn 10h  +
***
mov edi edi +
push esi  +
mov esi ecx +
call ds:GetTickCount64  +
sub eax [esi+58h] +
cmp dword ptr [esi+54h] 7 +
jnz loc_100447C  +
imul eax eax +
xor edx edx +
mov ecx 15F90h +
div  ecx +
cmp eax 5Fh +
jb loc_100445D  +
push 5Fh  +
pop eax  +
push 0  +
push eax  +
push 402h  +
push 0CAh  +
push dword ptr [esi+4]  +
call ds:GetDlgItem  +
push eax  +
call ds:SendMessageW  +
jmp loc_1004487  +
push 1  +
push dword ptr [esi+4]  +
call ds:KillTimer  +
xor eax eax +
pop esi  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+0Ch] +
sub eax 0 +
jz loc_10044BB  +
dec eax  +
jz loc_10044B7  +
dec eax  +
jz loc_10044B3  +
dec eax  +
jz loc_10044AF  +
dec eax  +
jnz loc_10044D2  +
push 8  +
jmp loc_10044BD  +
push 7  +
jmp loc_10044BD  +
push 9  +
jmp loc_10044BD  +
push 6  +
jmp loc_10044BD  +
push 2  +
pop eax  +
push 0  +
push eax  +
mov eax [ebp+8] +
push 8001h  +
push dword ptr [eax-18h]  +
call ds:SendMessageW  +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+10h] +
cmp [ebp+0Ch] eax +
ja loc_1004535  +
test eax eax +
jbe loc_1004535  +
mov ecx [ebp+0Ch] +
fild  dword ptr [ebp+0Ch] +
test ecx ecx +
jge loc_10044FE  +
fadd  ds:flt_1001640 +
fmul  ds:dbl_1001638 +
mov [ebp+0Ch] eax +
fild  dword ptr [ebp+0Ch] +
test eax eax +
jge loc_1004514  +
fadd  ds:flt_1001640 +
fdivp st(1) st +
fadd  ds:dbl_1001630 +
call _ftol2  +
push eax  +
mov eax [ebp+8] +
push 0  +
push 8002h  +
push dword ptr [eax-18h]  +
call ds:PostMessageW  +
xor eax eax +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+10h]  +
mov eax [ebp+8] +
push dword ptr [ebp+0Ch]  +
push 8001h  +
push dword ptr [eax-18h]  +
call ds:PostMessageW  +
xor eax eax +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+0Ch] +
test eax eax +
jz loc_1004576  +
and dword ptr [eax] 0 +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push esi  +
mov esi ds:GetVolumePathNamesForVolumeNameW +
push edi  +
lea eax [ebp+var_4] +
push eax  +
xor edi edi +
push edi  +
push edi  +
push [ebp+arg_0]  +
mov [ebp+var_4] edi +
mov [ebp+var_8] 80004005h +
call esi  +
test eax eax +
jnz loc_100466B  +
call ds:GetLastError  +
cmp eax 0EAh +
jnz loc_100466B  +
mov eax [ebp+var_4] +
cmp eax edi +
jbe loc_100466B  +
push ebx  +
add eax eax +
push eax  +
call ds:CoTaskMemAlloc  +
mov ebx eax +
cmp ebx edi +
jz loc_100466A  +
xor eax eax +
mov [ebx] ax +
lea eax [ebp+var_4] +
push eax  +
push [ebp+var_4]  +
push ebx  +
push [ebp+arg_0]  +
call esi  +
test eax eax +
jz loc_1004663  +
mov esi ebx +
cmp [ebx] di +
jz loc_1004663  +
mov eax esi +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
cmp cx di +
jnz loc_1004601  +
sub eax edx +
sar eax 1 +
cmp eax 3 +
jnz loc_1004631  +
movzx eax word ptr [esi] +
push eax  +
call ds:isalpha  +
pop ecx  +
test eax eax +
jz loc_1004631  +
cmp word ptr [esi+2] 3Ah +
jnz loc_1004631  +
cmp word ptr [esi+4] 5Ch +
jz loc_100464F  +
mov eax esi +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
cmp cx di +
jnz loc_1004636  +
sub eax edx +
sar eax 1 +
lea esi [esi+eax*2+2] +
cmp [esi] di +
jnz loc_10045FC  +
jmp loc_1004663  +
movzx eax word ptr [esi] +
push eax  +
call ds:toupper  +
pop ecx  +
mov ecx [ebp+arg_4] +
mov [ecx] ax +
mov [ebp+var_8] edi +
push ebx  +
call ds:CoTaskMemFree  +
pop ebx  +
mov eax [ebp+var_8] +
pop edi  +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
mov ecx [ebp+arg_0] +
test eax eax +
jbe loc_100468D  +
xor edx edx +
mov [ecx] dx +
add eax eax +
mov [ebp+arg_4] eax +
lea eax [ebp+arg_4] +
push eax  +
push ecx  +
push 0  +
push 2  +
push offset aCdRecorderDriv  +
push offset aSoftwareMicr_0  +
push 80000001h  +
call ds:SHRegGetValueW  +
neg eax  +
sbb eax eax +
and eax 80004005h +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call ds:COMCTL32_328  +
xor ecx ecx +
test eax eax +
setnz cl  +
mov [esi] eax +
pop esi  +
mov eax ecx +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+8]  +
call ds:CoTaskMemFree  +
xor eax eax +
inc eax  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov eax [esi] +
test eax eax +
jz loc_1004720  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push eax  +
call ds:COMCTL32_386  +
and dword ptr [esi] 0 +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_0]  +
push 7FFFFFFFh  +
push dword ptr [ecx]  +
call ds:COMCTL32_334  +
mov ecx [ebp+arg_4] +
test ecx ecx +
jz loc_1004748  +
mov [ecx] eax +
cmp eax 0FFFFFFFFh +
jz loc_1004751  +
xor eax eax +
jmp loc_1004756  +
mov eax 8007000Eh +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_4] +
xor eax eax +
test edx edx +
jz loc_1004775  +
cmp edx 7FFFFFFFh +
jbe loc_100477A  +
mov eax 80070057h +
test eax eax +
jl loc_1004790  +
mov eax [ebp+arg_8] +
mov ecx [ebp+arg_0] +
push 7FFFFFFEh  +
push 0  +
call sub_1001C5A  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_4] +
push ebx  +
xor eax eax +
push esi  +
mov esi 7FFFFFFFh +
test edx edx +
jz loc_10047B2  +
cmp edx esi +
jbe loc_10047B7  +
mov eax 80070057h +
mov ebx [ebp+arg_0] +
test eax eax +
jl loc_10047CF  +
push edi  +
lea edi [ebp+arg_0] +
mov eax ebx +
call sub_10043CF  +
mov ecx [ebp+arg_0] +
pop edi  +
jmp loc_10047D1  +
xor ecx ecx +
test eax eax +
jl loc_10047E8  +
mov edx [ebp+arg_4] +
mov eax [ebp+arg_8] +
push esi  +
sub edx ecx +
push 0  +
lea ecx [ebx+ecx*2] +
call sub_1001C5A  +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
xor eax eax +
test ecx ecx +
jz loc_1004809  +
cmp ecx 7FFFFFFFh +
jbe loc_100480E  +
mov eax 80070057h +
test eax eax +
jl loc_100484B  +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
lea eax [ebp+arg_C] +
push eax  +
push [ebp+arg_8]  +
lea esi [ecx-1] +
push esi  +
push edi  +
xor ebx ebx +
call ds:_vsnwprintf  +
add esp 10h +
test eax eax +
jl loc_100483B  +
cmp eax esi +
ja loc_100483B  +
jnz loc_1004846  +
jmp loc_1004840  +
mov ebx 8007007Ah +
xor eax eax +
mov [edi+esi*2] ax +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
push edi  +
xor edi edi +
push edi  +
push edi  +
push 147h  +
mov esi ecx +
push 0C9h  +
push dword ptr [esi+4]  +
call ds:SendDlgItemMessageW  +
push 0CFh  +
push dword ptr [esi+4]  +
mov [ebp+var_4] eax +
call ds:IsDlgButtonChecked  +
dec eax  +
push edi  +
mov edi ds:GetDlgItem +
neg eax  +
sbb eax eax +
push 0CDh  +
push dword ptr [esi+4]  +
inc eax  +
mov [ebp+var_8] eax +
call edi  +
mov ebx ds:EnableWindow +
push eax  +
call ebx  +
push 0  +
push 0CFh  +
push dword ptr [esi+4]  +
call edi  +
push eax  +
call ebx  +
xor ecx ecx +
cmp [esi+50h] ecx +
jz loc_1004932  +
cmp [esi+4Ch] ecx +
jz loc_1004932  +
cmp [ebp+var_4] ecx +
jl loc_1004932  +
mov eax [esi+4Ch] +
cmp eax ecx +
jz loc_10048D4  +
mov eax [eax] +
jmp loc_10048D6  +
xor eax eax +
cmp [ebp+var_4] eax +
jge loc_1004932  +
push ecx  +
push 2  +
push dword ptr [esi+4]  +
call edi  +
push eax  +
call ebx  +
push 0  +
push 0C9h  +
push dword ptr [esi+4]  +
call edi  +
push eax  +
call ebx  +
push 0  +
push 0  +
push 402h  +
push 0CAh  +
push dword ptr [esi+4]  +
call edi  +
push eax  +
call ds:SendMessageW  +
push [ebp+var_4]  +
mov edi [esi+50h] +
push dword ptr [esi+4Ch]  +
call ds:COMCTL32_332  +
mov ecx [edi] +
lea edx [esi+1Ch] +
push edx  +
push [ebp+arg_0]  +
push [ebp+var_8]  +
push eax  +
push dword ptr [esi+40h]  +
push edi  +
call dword ptr [ecx+0Ch]  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push esi  +
push edi  +
push 0  +
push 0  +
push 147h  +
mov esi ecx +
push 0C9h  +
push dword ptr [esi+4]  +
call ds:SendDlgItemMessageW  +
mov edi [esi+50h] +
test edi edi +
jz loc_100498C  +
mov ecx [esi+4Ch] +
test ecx ecx +
jz loc_100498C  +
test eax eax +
jl loc_100498C  +
mov esi ecx +
test esi esi +
jz loc_1004977  +
mov esi [esi] +
jmp loc_1004979  +
xor esi esi +
cmp eax esi +
jge loc_100498C  +
push eax  +
push ecx  +
call ds:COMCTL32_332  +
mov ecx [edi] +
push eax  +
push edi  +
call dword ptr [ecx+10h]  +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
lea eax [ebp+ppv] +
push eax  +
push offset stru_1001714  +
push 1  +
push 0  +
push offset stru_1001704  +
call ds:CoCreateInstance  +
test eax eax +
jl loc_10049E3  +
push esi  +
push offset aMshelpWindows?  +
call ds:SysAllocString  +
mov esi eax +
test esi esi +
jz loc_10049D9  +
mov eax [ebp+ppv] +
mov ecx [eax] +
push esi  +
push eax  +
call dword ptr [ecx+0Ch]  +
push esi  +
call ds:SysFreeString  +
mov eax [ebp+ppv] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
pop esi  +
mov eax [ebp+arg_C] +
mov dword ptr [eax] 1 +
xor eax eax +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
push edi  +
xor edi edi +
push edi  +
push edi  +
push 147h  +
mov esi ecx +
push 0C9h  +
push dword ptr [esi+4]  +
call ds:SendDlgItemMessageW  +
mov ecx [esi+4Ch] +
cmp ecx edi +
jz loc_1004A5A  +
cmp eax edi +
jl loc_1004A5A  +
mov esi ecx +
cmp esi edi +
jz loc_1004A2D  +
mov esi [esi] +
jmp loc_1004A2F  +
xor esi esi +
cmp eax esi +
jge loc_1004A5A  +
push eax  +
push ecx  +
call ds:COMCTL32_332  +
lea ecx [ebp+var_4] +
push ecx  +
push eax  +
call sub_1004581  +
test eax eax +
jl loc_1004A5A  +
mov eax [ebp+arg_4] +
movzx ecx word ptr [ebp+var_4] +
add eax 41h +
cmp ecx eax +
jnz loc_1004A5A  +
xor edi edi +
inc edi  +
mov eax edi +
pop edi  +
pop esi  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 414h +
mov eax dword_1008110 +
xor eax ebp +
mov [ebp+var_4] eax +
cmp [ebp+arg_C] 0 +
push ebx  +
mov ebx [ebp+arg_8] +
jbe loc_1004A8B  +
xor eax eax +
mov [ebx] ax +
push esi  +
xor eax eax +
push edi  +
mov ecx ds:dword_10015B0[eax*8] +
mov edx ecx +
and edx [ebp+arg_0] +
cmp edx ecx +
jz loc_1004AE6  +
inc eax  +
cmp eax 10h +
jb loc_1004A8F  +
mov ax [ebp+arg_4] +
test ax ax +
jbe loc_1004AC4  +
cmp [ebp+arg_C] 3 +
jb loc_1004AC4  +
mov [ebx] ax +
push 3Ah  +
pop eax  +
mov [ebx+2] ax +
xor eax eax +
mov [ebx+4] ax +
xor eax eax +
pop edi  +
pop esi  +
cmp [ebp+arg_C] eax +
jbe loc_1004AD2  +
cmp [ebx] ax +
jnz loc_1004AD7  +
mov eax 80004005h +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop ebx  +
call sub_100677B  +
leave   +
retn 10h  +
mov eax ds:uID[eax*8] +
test eax eax +
jbe loc_1004AA5  +
mov esi ds:LoadStringW +
mov edi 104h +
push edi  +
lea ecx [ebp+Buffer] +
push ecx  +
push eax  +
push hInstance  +
call esi  +
cmp [ebp+arg_4] 0 +
jbe loc_1004B4D  +
push edi  +
lea eax [ebp+var_414] +
push eax  +
push 150h  +
push hInstance  +
call esi  +
movzx eax [ebp+arg_4] +
push eax  +
lea eax [ebp+Buffer] +
push eax  +
lea eax [ebp+var_414] +
push eax  +
push [ebp+arg_C]  +
push ebx  +
call sub_10047F3  +
add esp 14h +
jmp loc_1004AC4  +
lea eax [ebp+Buffer] +
push eax  +
push [ebp+arg_C]  +
push ebx  +
call sub_100475F  +
jmp loc_1004AC4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push offset a?  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
call sub_100475F  +
test eax eax +
jl loc_1004BA2  +
push [ebp+arg_0]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
call sub_1004799  +
test eax eax +
jl loc_1004BA2  +
push offset dword_1001724  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
call sub_1004799  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 21Ch +
mov eax dword_1008110 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
mov ebx [ebp+arg_4] +
push esi  +
xor esi esi +
mov [ebp+var_21C] 80004005h +
cmp [ebp+arg_8] esi +
jbe loc_1004BDB  +
xor eax eax +
mov [ebx] ax +
cmp [ebp+arg_0] si +
jbe loc_1004C92  +
lea eax [ebp+hKey] +
push eax  +
push 20019h  +
push esi  +
push offset SubKey  +
push 80000001h  +
call ds:RegOpenKeyExW  +
test eax eax +
jnz loc_1004C92  +
push edi  +
mov edi 104h +
push edi  +
lea eax [ebp+var_20C] +
push eax  +
mov [ebp+var_214] esi +
push esi  +
mov esi ds:RegEnumKeyW +
jmp loc_1004C70  +
push [ebp+arg_8]  +
lea eax [ebp+var_20C] +
push ebx  +
push eax  +
call sub_1004B67  +
and [ebp+var_218] 0 +
lea eax [ebp+var_218] +
push eax  +
push ebx  +
call sub_1004581  +
mov eax [ebp+var_218] +
test ax ax +
jz loc_1004C5C  +
cmp ax [ebp+arg_0] +
jz loc_1004C7E  +
inc [ebp+var_214]  +
push edi  +
lea eax [ebp+var_20C] +
push eax  +
push [ebp+var_214]  +
push [ebp+hKey]  +
call esi  +
test eax eax +
jz loc_1004C27  +
jmp loc_1004C85  +
and [ebp+var_21C] 0 +
push [ebp+hKey]  +
call ds:RegCloseKey  +
pop edi  +
mov ecx [ebp+var_4] +
mov eax [ebp+var_21C] +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100677B  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 808h +
mov eax dword_1008110 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
mov ebx [ebp+arg_4] +
push esi  +
xor esi esi +
push edi  +
cmp [ebp+nBufferMax] esi +
jbe loc_1004CD4  +
xor eax eax +
mov [ebx] ax +
mov edi [ebp+dwMessageId] +
xor eax eax +
cmp ds:dword_1001560[eax*8] edi +
jz loc_1004D3A  +
inc eax  +
cmp eax 0Ah +
jb loc_1004CD9  +
push esi  +
push esi  +
lea eax [ebp+hMem] +
push eax  +
push esi  +
push edi  +
push offset ModuleName  +
mov dword ptr [ebp+hMem] esi +
call ds:GetModuleHandleW  +
push eax  +
push 900h  +
call ds:FormatMessageW  +
xor ecx ecx +
mov [ebp+Buffer] cx +
cmp eax esi +
jz loc_1004DC7  +
mov eax dword ptr [ebp+hMem] +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
cmp cx si +
jnz loc_1004D2A  +
sub eax edx +
sar eax 1 +
jmp loc_1004D75  +
push [ebp+nBufferMax]  +
push ebx  +
push ds:dword_1001564[eax*8]  +
push hInstance  +
call ds:LoadStringW  +
jmp loc_1004E01  +
mov ecx dword ptr [ebp+hMem] +
lea ecx [ecx+eax*2-2] +
movzx edx word ptr [ecx] +
cmp dx 0Ah +
jz loc_1004D6F  +
cmp dx 0Dh +
jnz loc_1004D74  +
xor edx edx +
mov [ecx] dx +
dec eax  +
cmp eax esi +
jg loc_1004D56  +
push 400h  +
lea eax [ebp+Buffer] +
push eax  +
push 118h  +
push hInstance  +
call ds:LoadStringW  +
cmp [ebp+Buffer] si +
jz loc_1004DB9  +
push edi  +
push dword ptr [ebp+hMem]  +
lea eax [ebp+Buffer] +
push eax  +
push [ebp+nBufferMax]  +
push ebx  +
call sub_10047F3  +
add esp 14h +
push dword ptr [ebp+hMem]  +
call ds:LocalFree  +
jmp loc_1004E01  +
push 400h  +
lea eax [ebp+Buffer] +
push eax  +
push 119h  +
push hInstance  +
call ds:LoadStringW  +
cmp [ebp+Buffer] si +
jz loc_1004E01  +
push edi  +
lea eax [ebp+Buffer] +
push eax  +
push [ebp+nBufferMax]  +
push ebx  +
call sub_10047F3  +
add esp 10h +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100677B  +
leave   +
retn 0Ch  +
***
xor eax eax +
push esi  +
mov esi ecx +
inc eax  +
cmp dword ptr [esi] 0 +
jz loc_1004E39  +
push 0  +
push offset loc_10046E8  +
call sub_1004702  +
push dword ptr [esi]  +
call ds:COMCTL32_329  +
and dword ptr [esi] 0 +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
push offset unk_1008188  +
call sub_100434B  +
mov ebx [ebp+arg_0] +
mov esi eax +
mov eax [esi] +
mov ecx esi +
mov [esi+4] ebx +
call dword ptr [eax+4]  +
push esi  +
lea edi [esi+14h] +
push eax  +
mov ecx edi +
call sub_10042AF  +
mov edi [edi] +
push edi  +
push 4  +
push ebx  +
call ds:SetWindowLongW  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push ebx  +
call edi  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax 1008h +
call __alloca_probe  +
mov eax dword_1008110 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
push edi  +
mov edi [ebp+arg_4] +
cmp edi 0Bh +
mov esi ecx +
mov [ebp+var_1008] edi +
jge loc_1005154  +
cmp edi 3 +
jnz loc_1004F0D  +
push 134h  +
push 103h  +
push 102h  +
push 0  +
push hInstance  +
call ds:ShellMessageBoxW  +
add esp 14h +
mov ecx esi +
cmp eax 6 +
jnz loc_1004EF8  +
push 1  +
call sub_1004852  +
jmp loc_1005154  +
call sub_100493E  +
mov [ebp+var_1008] 4 +
mov edi [ebp+var_1008] +
push ebx  +
xor ebx ebx +
inc ebx  +
push 400h  +
lea eax [ebp+String] +
push eax  +
cmp edi ebx +
jnz loc_1004F2B  +
push [ebp+dwMessageId]  +
call sub_1004CAD  +
jmp loc_1004F3E  +
push ds:dword_10014BC[edi*4]  +
push hInstance  +
call ds:LoadStringW  +
lea eax [ebp+String] +
push eax  +
push 0CCh  +
push dword ptr [esi+4]  +
call ds:SetDlgItemTextW  +
lea eax [edi-1] +
mov [esi+54h] edi +
cmp eax 9 +
ja loc_1005153  +
jmp ds:off_1005169[eax*4]  +
push 5  +
push 0CAh  +
push dword ptr [esi+4]  +
call ds:GetDlgItem  +
jmp loc_100514C  +
push 0  +
push 0  +
push 402h  +
push 0CAh  +
push dword ptr [esi+4]  +
call ds:GetDlgItem  +
push eax  +
call ds:SendMessageW  +
jmp loc_1005153  +
xor edi edi +
push edi  +
push edi  +
push 402h  +
push 0CAh  +
push dword ptr [esi+4]  +
call ds:GetDlgItem  +
push eax  +
call ds:SendMessageW  +
call ds:GetTickCount64  +
push edi  +
push 7D0h  +
push ebx  +
push dword ptr [esi+4]  +
mov [esi+58h] eax +
mov [esi+5Ch] edx +
call ds:SetTimer  +
jmp loc_1005153  +
push 0  +
push 0  +
push 402h  +
push 0CAh  +
push dword ptr [esi+4]  +
call ds:GetDlgItem  +
push eax  +
call ds:SendMessageW  +
push ebx  +
push dword ptr [esi+4]  +
call ds:KillTimer  +
jmp loc_1005153  +
mov edi ds:GetDlgItem +
push ebx  +
push 0C9h  +
push dword ptr [esi+4]  +
call edi  +
mov ebx ds:EnableWindow +
push eax  +
call ebx  +
push 1  +
push 0CDh  +
push dword ptr [esi+4]  +
call edi  +
push eax  +
call ebx  +
push 1  +
push 2  +
push dword ptr [esi+4]  +
call edi  +
push eax  +
call ebx  +
push 1  +
push 0CFh  +
push dword ptr [esi+4]  +
call edi  +
push eax  +
call ebx  +
jmp loc_1005153  +
push ebx  +
push dword ptr [esi+4]  +
call ds:KillTimer  +
mov edi ds:GetDlgItem +
push ebx  +
push 0C9h  +
push dword ptr [esi+4]  +
call edi  +
mov ebx ds:EnableWindow +
push eax  +
call ebx  +
push 1  +
push 0CDh  +
push dword ptr [esi+4]  +
call edi  +
push eax  +
call ebx  +
push 1  +
push 2  +
push dword ptr [esi+4]  +
call edi  +
push eax  +
call ebx  +
push 1  +
push 0CFh  +
push dword ptr [esi+4]  +
call edi  +
push eax  +
call ebx  +
cmp [ebp+var_1008] 0Ah +
jnz loc_1005129  +
push 400h  +
lea eax [ebp+Buffer] +
push eax  +
push 101h  +
push hInstance  +
call ds:LoadStringW  +
lea eax [ebp+Buffer] +
push eax  +
push 2  +
push dword ptr [esi+4]  +
call edi  +
push eax  +
call ds:SetWindowTextW  +
mov ebx ds:SendMessageW +
push 0  +
push 2  +
push 401h  +
push dword ptr [esi+4]  +
call ebx  +
push 2  +
push dword ptr [esi+4]  +
call edi  +
push eax  +
call ds:SetFocus  +
push 5  +
push 2  +
push dword ptr [esi+4]  +
call edi  +
push eax  +
call ds:ShowWindow  +
push 0  +
push 64h  +
push 402h  +
push 0CAh  +
push dword ptr [esi+4]  +
call edi  +
push eax  +
call ebx  +
jmp loc_1005153  +
push 0  +
push 0  +
push 402h  +
mov ebx 0CAh +
push ebx  +
push dword ptr [esi+4]  +
call edi  +
push eax  +
call ds:SendMessageW  +
push 0  +
push ebx  +
push dword ptr [esi+4]  +
call edi  +
push eax  +
call ds:ShowWindow  +
pop ebx  +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
xor eax eax +
pop esi  +
call sub_100677B  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
push 0  +
push 0  +
lea ecx [esi+14h] +
call sub_10042AF  +
test eax eax +
jnz loc_10051BB  +
push 0Eh  +
call ds:SetLastError  +
or eax 0FFFFFFFFh +
jmp loc_10051E6  +
push esi  +
add esi 8 +
push esi  +
push offset unk_1008188  +
call loc_10042EF  +
push [ebp+dwInitParam]  +
push offset DialogFunc  +
push [ebp+hWndParent]  +
push 0C8h  +
push hInstance  +
call ds:DialogBoxParamW  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push esi  +
mov esi ecx +
cmp dword ptr [esi] 0 +
jz loc_100520B  +
call sub_1006BAE  +
test al al +
jnz loc_100520B  +
mov ecx esi +
pop esi  +
jmp loc_1004E17  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20Ch +
mov eax dword_1008110 +
xor eax ebp +
mov [ebp+var_4] eax +
mov ecx [ebp+arg_C] +
mov eax [ebp+arg_4] +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
mov [esi+44h] ecx +
lea ecx [esi+40h] +
push ecx  +
push eax  +
call sub_10034A7  +
mov ebx eax +
test ebx ebx +
jl loc_10052CA  +
xor eax eax +
cmp word ptr [ebp+arg_8] ax +
mov word ptr [ebp+var_20C] ax +
push 104h  +
lea eax [ebp+var_20C] +
push eax  +
jbe loc_100526E  +
push [ebp+arg_8]  +
call sub_1004BAB  +
jmp loc_1005273  +
call sub_1004679  +
cmp word ptr [ebp+var_20C] 0 +
jz loc_100528F  +
lea eax [esi+48h] +
push eax  +
lea eax [ebp+var_20C] +
push eax  +
call sub_10034A7  +
mov ebx eax +
test ebx ebx +
jl loc_10052CA  +
push edi  +
lea edi [esi+50h] +
push edi  +
push offset dword_10013F8  +
push 0  +
call sub_1003C81  +
mov ebx eax +
test ebx ebx +
jl loc_10052C9  +
push 0  +
call ds:GetDesktopWindow  +
push eax  +
mov ecx esi +
call sub_1005196  +
mov eax [edi] +
test eax eax +
jz loc_10052C9  +
and dword ptr [edi] 0 +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
pop edi  +
mov ecx [ebp+var_4] +
pop esi  +
mov eax ebx +
xor ecx ebp +
pop ebx  +
call sub_100677B  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 640h +
mov eax dword_1008110 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
push edi  +
mov edi ecx +
xor esi esi +
lea ecx [edi+4Ch] +
push 8  +
mov [ebp+var_640] esi +
mov [ebp+var_624] esi +
call sub_10046C2  +
lea eax [ebp+hKey] +
push eax  +
push 20019h  +
push esi  +
push offset SubKey  +
push 80000001h  +
call ds:RegOpenKeyExW  +
test eax eax +
jnz loc_1005569  +
mov ebx ds:SendDlgItemMessageW +
mov [ebp+dwIndex] esi +
push 104h  +
lea eax [ebp+Name] +
push eax  +
push [ebp+dwIndex]  +
push [ebp+hKey]  +
call ds:RegEnumKeyW  +
test eax eax +
jnz loc_1005525  +
lea eax [ebp+var_630] +
push eax  +
lea eax [ebp+var_638] +
push eax  +
push esi  +
push 18h  +
push offset aIsimapidatabur  +
lea eax [ebp+Name] +
push eax  +
push [ebp+hKey]  +
mov [ebp+var_638] esi +
mov [ebp+var_630] 4 +
call ds:SHRegGetValueW  +
test eax eax +
jnz loc_1005513  +
cmp [ebp+var_638] esi +
jz loc_1005513  +
mov word ptr [ebp+var_20C] ax +
push 104h  +
lea eax [ebp+var_20C] +
push eax  +
lea eax [ebp+Name] +
push eax  +
call sub_1004B67  +
lea eax [ebp+wParam] +
push eax  +
lea eax [ebp+var_20C] +
push eax  +
mov [ebp+wParam] esi +
call sub_1004581  +
lea eax [ebp+var_630] +
push eax  +
lea eax [ebp+var_63C] +
push eax  +
push esi  +
push 18h  +
push offset aDriveType  +
lea eax [ebp+Name] +
push eax  +
push [ebp+hKey]  +
mov [ebp+var_63C] esi +
mov [ebp+var_630] 4 +
call ds:SHRegGetValueW  +
push 104h  +
lea eax [ebp+lParam] +
push eax  +
push [ebp+wParam]  +
push [ebp+var_63C]  +
call sub_1004A67  +
cmp word ptr [ebp+lParam] si +
jz loc_1005513  +
cmp [edi+4Ch] esi +
jz loc_1005513  +
lea eax [ebp+lParam] +
push eax  +
push esi  +
push 143h  +
push 0C9h  +
push dword ptr [edi+4]  +
call ebx  +
mov [ebp+wParam] eax +
cmp eax 0FFFFFFFFh +
jz loc_1005509  +
lea eax [ebp+pv] +
push eax  +
lea eax [ebp+var_20C] +
push eax  +
push esi  +
push esi  +
call sub_10032B5  +
cmp eax esi +
mov [ebp+var_624] eax +
jl loc_10054DB  +
push esi  +
push [ebp+pv]  +
lea ecx [edi+4Ch] +
call sub_100472A  +
cmp eax esi +
mov [ebp+var_624] eax +
jge loc_10054DB  +
push [ebp+pv]  +
call ds:CoTaskMemFree  +
push esi  +
push [ebp+wParam]  +
push 144h  +
push 0C9h  +
push dword ptr [edi+4]  +
call ebx  +
mov eax [edi+48h] +
cmp eax esi +
jz loc_1005513  +
push 1  +
push 0FFFFFFFFh  +
lea ecx [ebp+var_20C] +
push ecx  +
push 0FFFFFFFFh  +
push eax  +
call ds:CompareStringOrdinal  +
cmp eax 2 +
jnz loc_1005513  +
mov eax [ebp+wParam] +
mov [ebp+var_640] eax +
jmp loc_1005513  +
mov [ebp+var_624] 80004005h +
inc [ebp+dwIndex]  +
cmp [ebp+var_624] esi +
jge loc_1005344  +
push [ebp+hKey]  +
call ds:RegCloseKey  +
cmp [ebp+var_624] esi +
jl loc_1005569  +
cmp [edi+4Ch] esi +
jz loc_1005569  +
mov eax [edi+4Ch] +
cmp eax esi +
jz loc_1005549  +
mov eax [eax] +
jmp loc_100554B  +
xor eax eax +
cmp eax esi +
jle loc_1005569  +
push esi  +
push [ebp+var_640]  +
push 14Eh  +
push 0C9h  +
push dword ptr [edi+4]  +
call ebx  +
xor eax eax +
jmp loc_100556E  +
mov eax 80004005h +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_100677B  +
leave   +
retn   +
***
cmp dword_1008174 0 +
push ebx  +
push esi  +
push edi  +
mov edi ecx +
jz loc_10055EB  +
mov al byte_1008178 +
cmp al 4 +
jnb loc_100559D  +
test al al +
jnz loc_10055EB  +
mov eax dword_1008160 +
mov ecx dword_1008164 +
mov edx 10000h +
mov esi 80000000h +
and eax edx +
and ecx esi +
or eax ecx +
jz loc_10055EB  +
mov eax dword_1008168 +
mov ebx dword_100816C +
mov ecx eax +
and ecx edx +
mov edx ebx +
and edx esi +
cmp ecx eax +
jnz loc_10055EB  +
cmp edx ebx +
jnz loc_10055EB  +
push offset dword_10012D8  +
push dword_100814C  +
push dword_1008148  +
call sub_1001E56  +
push 0Ah  +
lea esi [edi+4] +
push dword ptr [esi]  +
call ds:EnableThemeDialogTexture  +
push 65h  +
push hInstance  +
call ds:LoadIconW  +
push 0  +
push eax  +
mov ecx esi +
call sub_10043AE  +
push offset String  +
call ds:RegisterWindowMessageW  +
push dword ptr [edi+40h]  +
mov [edi+60h] eax +
call ds:PathFindFileNameW  +
push eax  +
push 0CBh  +
push dword ptr [esi]  +
call ds:SetDlgItemTextW  +
mov ecx edi +
call sub_10052E1  +
test eax eax +
jl loc_100566D  +
mov ebx 0CDh +
push ebx  +
push dword ptr [esi]  +
call ds:GetDlgItem  +
push eax  +
call ds:SetFocus  +
cmp dword ptr [edi+44h] 0 +
jz loc_1005681  +
push ebx  +
push dword ptr [esi]  +
call ds:GetDlgItem  +
push eax  +
push ebx  +
push 111h  +
jmp loc_1005679  +
push 0C0AAF001h  +
push 1  +
push 8001h  +
push dword ptr [esi]  +
call ds:PostMessageW  +
pop edi  +
xor eax eax +
pop esi  +
inc eax  +
pop ebx  +
retn 10h  +
***
mov edi edi +
push esi  +
push edi  +
mov edi ds:CoTaskMemFree +
mov esi ecx +
push dword ptr [esi+40h]  +
call edi  +
push dword ptr [esi+48h]  +
call edi  +
mov eax [esi+50h] +
test eax eax +
jz loc_10056B2  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
lea ecx [esi+4Ch] +
call sub_10051F0  +
lea ecx [esi+20h] +
call sub_1001F42  +
mov esi [esi+14h] +
test esi esi +
jz loc_10056CF  +
push esi  +
call sub_10062D1  +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
push offset Addend  +
mov dword ptr [esi] offset off_100186C +
mov dword ptr [esi+1Ch] offset off_1001850 +
mov dword ptr [esi+20h] 1 +
call ds:InterlockedDecrement  +
mov ecx esi +
pop esi  +
jmp loc_100568F  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
add eax 4 +
push eax  +
call ds:InterlockedIncrement  +
pop ebp  +
retn 4  +
***
push ebp  +
mov ebp esp +
sub esp 1Ch +
mov ecx [ebp+10h] +
push ebx  +
mov ebx [ebp+0Ch] +
push esi  +
mov esi [ebp+8] +
mov eax [esi+4] +
mov [ebp-14h] ecx +
mov ecx [ebp+14h] +
push edi  +
mov edi [esi+18h] +
mov [ebp-10h] ecx +
xor ecx ecx +
push ecx  +
mov [ebp-0Ch] ecx +
mov [ebp-8] ecx +
mov [ebp-4] ecx +
lea ecx [ebp+14h] +
push ecx  +
push dword ptr [ebp+14h]  +
lea edx [ebp-1Ch] +
push dword ptr [ebp+10h]  +
mov [esi+18h] edx +
mov edx [esi] +
push ebx  +
push eax  +
mov ecx esi +
mov [ebp-1Ch] eax +
mov [ebp-18h] ebx +
call dword ptr [edx]  +
mov [esi+18h] edi +
test eax eax +
jz loc_10057C3  +
cmp ebx 2Eh +
jb loc_10057B0  +
cmp ebx 2Fh +
jbe loc_10057AB  +
cmp ebx 37h +
jz loc_10057AB  +
cmp ebx 39h +
jz loc_10057AB  +
cmp ebx 110h +
jz loc_10057AB  +
cmp ebx 131h +
jbe loc_10057B0  +
cmp ebx 138h +
ja loc_10057B0  +
mov eax [ebp+14h] +
jmp loc_10057DC  +
push dword ptr [ebp+14h]  +
push 0  +
push dword ptr [esi+4]  +
call ds:SetWindowLongW  +
xor eax eax +
inc eax  +
jmp loc_10057DC  +
cmp ebx 82h +
jnz loc_10057DA  +
mov eax [esi+4] +
mov edx [esi] +
and dword ptr [esi+4] 0 +
push eax  +
mov ecx esi +
call dword ptr [edx+8]  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push offset off_100187C  +
push ecx  +
call sub_1002764  +
pop ebp  +
retn 8  +
***
mov eax (offset dword_1005728+3) +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+10h]  +
mov ecx [ebp+8] +
push dword ptr [ebp+0Ch]  +
add ecx 0FFFFFFE4h +
call sub_10057E8  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ebp+1Ch] 0 +
push esi  +
push edi  +
mov edi ecx +
jnz loc_1005956  +
mov ecx [ebp+0Ch] +
mov eax 110h +
cmp ecx eax +
jnz loc_100586F  +
lea ecx [ebp+18h] +
push ecx  +
push dword ptr [ebp+14h]  +
mov ecx edi +
push dword ptr [ebp+10h]  +
push eax  +
call sub_1005582  +
mov ecx [ebp+18h] +
mov [ecx] eax +
xor eax eax +
inc eax  +
jmp loc_1005958  +
mov eax 8001h +
cmp ecx eax +
jnz loc_100588C  +
lea ecx [ebp+18h] +
push ecx  +
push dword ptr [ebp+14h]  +
mov ecx edi +
push dword ptr [ebp+10h]  +
push eax  +
call sub_1004E91  +
jmp loc_1005862  +
***
mov eax 8002h +
cmp ecx eax +
jnz loc_10058A9  +
lea ecx [ebp+18h] +
push ecx  +
push dword ptr [ebp+14h]  +
mov ecx edi +
push dword ptr [ebp+10h]  +
push eax  +
call sub_1004406  +
jmp loc_1005862  +
***
mov eax 113h +
cmp ecx eax +
jnz loc_10058C6  +
lea ecx [ebp+18h] +
push ecx  +
push dword ptr [ebp+14h]  +
mov ecx edi +
push dword ptr [ebp+10h]  +
push eax  +
call sub_1004435  +
jmp loc_1005862  +
***
mov esi [ebp+18h] +
cmp ecx 111h +
jnz loc_1005905  +
mov eax 0CDh +
cmp ax [ebp+10h] +
jnz loc_10058EF  +
push 0  +
mov ecx edi +
call sub_1004852  +
mov eax esi +
and dword ptr [eax] 0 +
jmp loc_1005867  +
***
push 2  +
pop eax  +
cmp ax [ebp+10h] +
jnz loc_1005932  +
push 0  +
push dword ptr [edi+4]  +
call ds:EndDialog  +
jmp loc_10058E5  +
***
cmp ecx 53h +
jnz loc_1005932  +
lea eax [ebp+18h] +
push eax  +
push dword ptr [ebp+14h]  +
mov dword ptr [ebp+18h] 1 +
push dword ptr [ebp+10h]  +
push ecx  +
mov ecx edi +
call sub_1004994  +
cmp dword ptr [ebp+18h] 0 +
mov [esi] eax +
jnz loc_1005867  +
mov ecx [ebp+0Ch] +
mov eax [edi+60h] +
test eax eax +
jz loc_1005956  +
cmp ecx eax +
jnz loc_1005956  +
lea eax [ebp+18h] +
push eax  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push ecx  +
mov ecx edi +
call sub_10049F7  +
mov [esi] eax +
jmp loc_1005867  +
***
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push esi  +
mov esi ecx +
push edi  +
xor edi edi +
mov [esi+4] edi +
mov [esi+14h] edi +
mov [esi+18h] edi +
lea ecx [esi+20h] +
mov dword ptr [esi+1Ch] offset off_10016E8 +
call sub_1001F20  +
mov [esi+40h] edi +
mov [esi+44h] edi +
mov [esi+48h] edi +
mov [esi+4Ch] edi +
mov [esi+50h] edi +
mov [esi+54h] edi +
mov [esi+58h] edi +
mov [esi+5Ch] edi +
mov [esi+60h] edi +
pop edi  +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_10056D7  +
test [ebp+arg_0] 1 +
jz loc_10059C2  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_1005963  +
push offset Addend  +
mov dword ptr [esi] offset off_100186C +
mov dword ptr [esi+1Ch] offset off_1001850 +
call ds:InterlockedIncrement  +
mov eax esi +
pop esi  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+8] +
push edi  +
lea eax [esi+4] +
push eax  +
call ds:InterlockedDecrement  +
mov edi eax +
test edi edi +
jnz loc_1005A23  +
lea ecx [esi-1Ch] +
test ecx ecx +
jz loc_1005A23  +
push 1  +
call sub_10059A8  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jnz loc_1005A43  +
mov eax 80004003h +
jmp loc_1005AA7  +
and dword ptr [eax] 0 +
push ebx  +
push esi  +
push 68h  +
mov ebx 8007000Eh +
call ??2@YAPAXI@Z  +
pop ecx  +
test eax eax +
jz loc_1005A66  +
push 0  +
mov ecx eax +
call sub_10059CE  +
mov esi eax +
jmp loc_1005A68  +
xor esi esi +
test esi esi +
jz loc_1005A9E  +
push edi  +
lea edi [esi+20h] +
push edi  +
call ds:InterlockedIncrement  +
lea ecx [esi+24h] +
call sub_1001B1D  +
mov ebx eax +
test ebx ebx +
jl loc_1005A87  +
xor ebx ebx +
push edi  +
call ds:InterlockedDecrement  +
pop edi  +
test ebx ebx +
jz loc_1005A9E  +
push 1  +
mov ecx esi +
call sub_10059A8  +
xor esi esi +
mov eax [ebp+arg_0] +
mov [eax] esi +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
and [ebp+var_4] 0 +
and [ebp+var_8] 0 +
push esi  +
push edi  +
lea eax [ebp+var_4] +
push eax  +
call sub_1005A30  +
mov esi [ebp+var_4] +
mov edi eax +
mov eax esi +
neg eax  +
sbb eax eax +
lea ecx [esi+1Ch] +
and eax ecx +
push eax  +
lea eax [ebp+var_8] +
push eax  +
call sub_1001B53  +
test edi edi +
jl loc_1005AF9  +
push [ebp+arg_8]  +
mov eax [esi] +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push esi  +
call dword ptr [eax+0Ch]  +
mov edi eax +
mov eax [ebp+var_8] +
test eax eax +
jz loc_1005B06  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax edi +
pop edi  +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
cmp dword ptr [eax] 64h +
mov eax [ebp+arg_4] +
jnz loc_1005B28  +
add eax 1Ch +
jmp loc_1005B2B  +
add eax 24h +
pop ebp  +
retn 8  +
***
call __SEH_prolog4  +
mov esi [ebp+arg_0] +
xor ebx ebx +
cmp esi ebx +
jnz loc_1005B53  +
mov eax 80070057h +
jmp loc_1005C88  +
mov eax [ebp+arg_4] +
mov [esi+10h] eax +
mov eax [ebp+arg_8] +
mov [esi+8] eax +
mov [esi+0Ch] eax +
mov [esi+4] eax +
mov [esi+14h] ebx +
mov [esi+18h] ebx +
mov [ebp+ms_exc.disabled] ebx +
lea eax [esi+1Ch] +
push eax  +
mov edi ds:InitializeCriticalSection +
call edi  +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov [ebp+ms_exc.disabled] 1 +
lea eax [esi+34h] +
push eax  +
call edi  +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov [ebp+ms_exc.disabled] 2 +
lea eax [esi+4Ch] +
push eax  +
call edi  +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov [esi+68h] ebx +
mov byte ptr [esi+6Ch] 1 +
mov [esi+74h] ebx +
mov [esi+7Ch] ebx +
mov [esi+78h] ebx +
mov [esi+80h] ebx +
mov edi [esi+10h] +
cmp edi ebx +
jz loc_1005BDA  +
jmp loc_1005BD6  +
push 1  +
call dword ptr [edi+20h]  +
push edi  +
push esi  +
call sub_1005B13  +
mov edi eax +
cmp [edi] ebx +
jnz loc_1005BC8  +
xor eax eax +
jmp loc_1005C88  +
mov eax [ebp-14h] +
mov eax [eax] +
mov eax [eax] +
xor ecx ecx +
cmp eax 0C0000017h +
setz cl  +
mov eax ecx +
retn   +
mov esp [ebp-18h] +
mov esi [ebp+8] +
lea ebx [esi+34h] +
push ebx  +
mov edi ds:DeleteCriticalSection +
call edi  +
lea eax [esi+1Ch] +
mov [ebp+arg_0] eax +
push eax  +
call edi  +
push 6  +
pop ecx  +
xor eax eax +
lea edi [esi+4Ch] +
stos   +
push 6  +
pop ecx  +
mov edi ebx +
stos   +
mov edi [ebp+arg_0] +
jmp loc_1005C77  +
mov eax [ebp-14h] +
mov eax [eax] +
mov eax [eax] +
xor ecx ecx +
cmp eax 0C0000017h +
setz cl  +
mov eax ecx +
retn   +
mov esp [ebp-18h] +
mov esi [ebp+8] +
lea ebx [esi+1Ch] +
push ebx  +
call ds:DeleteCriticalSection  +
push 6  +
pop ecx  +
xor eax eax +
lea edi [esi+34h] +
stos   +
mov edi ebx +
jmp loc_1005C77  +
mov eax [ebp-14h] +
mov eax [eax] +
mov eax [eax] +
xor ecx ecx +
cmp eax 0C0000017h +
setz cl  +
mov eax ecx +
retn   +
mov esp [ebp-18h] +
xor eax eax +
mov edi [ebp+8] +
add edi 1Ch +
push 6  +
pop ecx  +
stos   +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov eax 0C0000017h +
call __SEH_epilog4  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
push ebx  +
mov ebx [ebp+arg_0] +
test ebx ebx +
jnz loc_1005CAF  +
mov eax 80070057h +
jmp loc_1005D89  +
push esi  +
mov esi [ebx+10h] +
push edi  +
test esi esi +
jz loc_1005CDE  +
jmp loc_1005CD9  +
mov eax [esi+10h] +
test eax eax +
jz loc_1005CC7  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
and dword ptr [esi+10h] 0 +
push 0  +
call dword ptr [esi+20h]  +
push esi  +
push ebx  +
call sub_1005B13  +
mov esi eax +
cmp dword ptr [esi] 0 +
jnz loc_1005CBA  +
and [ebp+var_18] 0 +
xor eax eax +
lea edi [ebp+var_14] +
stos   +
stos   +
stos   +
stos   +
stos   +
lea eax [ebx+1Ch] +
push 6  +
pop ecx  +
lea edi [ebp+var_18] +
mov esi eax +
xor edx edx +
cmps   +
jz loc_1005D04  +
push eax  +
call ds:DeleteCriticalSection  +
lea eax [ebx+34h] +
push 6  +
pop ecx  +
lea edi [ebp+var_18] +
mov esi eax +
xor edx edx +
cmps   +
jz loc_1005D1C  +
push eax  +
call ds:DeleteCriticalSection  +
lea eax [ebx+4Ch] +
push 6  +
pop ecx  +
lea edi [ebp+var_18] +
mov esi eax +
xor edx edx +
cmps   +
jz loc_1005D34  +
push eax  +
call ds:DeleteCriticalSection  +
mov esi [ebx+80h] +
test esi esi +
jz loc_1005D53  +
push dword ptr [esi+4]  +
call dword ptr [esi]  +
mov edi [esi+8] +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov esi edi +
test edi edi +
jnz loc_1005D3E  +
xor esi esi +
cmp [ebx+18h] esi +
jz loc_1005D85  +
cmp byte ptr [ebx+6Ch] 0 +
jz loc_1005D85  +
mov edi ds:HeapDestroy +
cmp [ebx+78h] esi +
jz loc_1005D80  +
mov eax [ebx+78h] +
lea eax [eax+esi*4] +
cmp dword ptr [eax] 0 +
jz loc_1005D7A  +
push dword ptr [eax]  +
call edi  +
inc esi  +
cmp esi [ebx+74h] +
jbe loc_1005D6B  +
push dword ptr [ebx+18h]  +
call edi  +
pop edi  +
xor eax eax +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+28h] +
xor ecx ecx +
cmp eax ecx +
jz loc_1005DE1  +
mov edx [ebp+0Ch] +
sub edx ecx +
jz loc_1005DCF  +
dec edx  +
jnz loc_1005DE1  +
mov cl [ebp+10h] +
mov [eax+28h] cl +
mov ecx [ebp+14h] +
mov [eax+10h] ecx +
mov ecx [ebp+18h] +
mov [eax+14h] ecx +
mov ecx [ebp+1Ch] +
mov [eax+18h] ecx +
mov ecx [ebp+20h] +
mov dword ptr [eax+24h] 1 +
jmp loc_1005DDE  +
mov [eax+24h] ecx +
mov [eax+28h] cl +
mov [eax+10h] ecx +
mov [eax+14h] ecx +
mov [eax+18h] ecx +
mov [eax+1Ch] ecx +
pop ebp  +
retn 24h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_C] +
mov ecx [eax] +
or ecx [eax+4] +
jz loc_1005DFD  +
xor eax eax +
jmp loc_1005E0D  +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call ds:EventRegister  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
mov eax [esi] +
mov ecx [esi+4] +
mov edx eax +
or edx ecx +
jnz loc_1005E2E  +
xor eax eax +
jmp loc_1005E3D  +
push ecx  +
push eax  +
call ds:EventUnregister  +
and dword ptr [esi] 0 +
and dword ptr [esi+4] 0 +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
mov ecx [esi] +
push edi  +
xor edi edi +
xor eax eax +
cmp ecx edi +
jz loc_1005EC5  +
jmp loc_1005E5F  +
inc ecx  +
inc ecx  +
push 20h  +
pop edx  +
cmp dx [ecx] +
jz loc_1005E5D  +
movzx edx word ptr [ecx] +
cmp dx di +
jz loc_1005EC3  +
push 22h  +
pop eax  +
cmp ax dx +
jnz loc_1005E9C  +
inc ecx  +
inc ecx  +
mov eax ecx +
cmp [ecx] di +
jz loc_1005E8F  +
push 22h  +
pop edx  +
cmp dx [eax] +
jz loc_1005E8F  +
inc eax  +
inc eax  +
cmp [eax] di +
jnz loc_1005E80  +
cmp [eax] di +
jnz loc_1005EB7  +
xor ecx ecx +
mov [esi] edi +
mov eax ecx +
jmp loc_1005EC5  +
mov eax ecx +
cmp [ecx] di +
jz loc_1005EB2  +
push 20h  +
pop edx  +
cmp dx [eax] +
jz loc_1005EB2  +
inc eax  +
inc eax  +
cmp [eax] di +
jnz loc_1005EA3  +
cmp [eax] di +
jz loc_1005E96  +
xor edx edx +
mov [eax] dx +
add eax 2 +
mov [esi] eax +
jmp loc_1005E98  +
mov [esi] edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
mov dword ptr [ecx+70h] offset unk_1008000 +
push [ebp+arg_0]  +
mov dword_1008130 ecx +
push ecx  +
mov dword ptr [ecx] 84h +
mov dword ptr [ecx+64h] 300h +
call sub_1005B34  +
test eax eax +
jl loc_1005F15  +
push esi  +
mov esi [ebp+arg_8] +
test esi esi +
jz loc_1005F12  +
push edi  +
mov edi offset unk_1008134 +
movs   +
movs   +
movs   +
movs   +
pop edi  +
xor eax eax +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 630h +
mov eax dword_1008110 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
mov esi [ebp+arg_8] +
push edi  +
push offset dword_1008148  +
push offset unk_1008150  +
xor edi edi +
push offset loc_1005D93  +
push offset dword_10012B8  +
mov [ebp+var_62C] edi +
mov [ebp+var_624] edi +
mov [ebp+var_628] edi +
call sub_1005DEA  +
push edi  +
push edi  +
call ds:CoInitializeEx  +
test eax eax +
jl loc_10060FB  +
push ebx  +
push edi  +
push [ebp+arg_0]  +
mov ecx offset unk_1008188 +
push offset unk_100820C  +
call sub_1005ED0  +
lea eax [ebp+var_620] +
push eax  +
push esi  +
call sub_10034A7  +
cmp eax edi +
mov ebx ds:CoTaskMemFree +
jl loc_1006093  +
mov eax [ebp+var_620] +
mov [ebp+pv] eax +
lea eax [ebp+var_620] +
push eax  +
call sub_1005E47  +
mov esi eax +
cmp esi edi +
jz loc_1006069  +
push offset aQ  +
push esi  +
call ds:StrCmpICW  +
test eax eax +
jnz loc_1005FEE  +
lea eax [ebp+var_620] +
push eax  +
mov [ebp+var_62C] 1 +
call sub_1005E47  +
mov esi eax +
cmp esi edi +
jz loc_1006069  +
mov eax esi +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
cmp cx di +
jnz loc_1005FF7  +
sub eax edx +
sar eax 1 +
cmp eax 2 +
jnz loc_1006042  +
movzx eax word ptr [esi] +
push eax  +
call ds:isalpha  +
pop ecx  +
test eax eax +
jz loc_1006042  +
cmp word ptr [esi+2] 3Ah +
jnz loc_1006042  +
movzx eax word ptr [esi] +
push eax  +
call ds:toupper  +
movzx eax ax +
mov [ebp+var_628] eax +
pop ecx  +
lea eax [ebp+var_620] +
push eax  +
call sub_1005E47  +
mov esi eax +
cmp esi edi +
jz loc_1006069  +
lea eax [ebp+var_624] +
push eax  +
push esi  +
call sub_10034A7  +
mov esi eax +
cmp esi edi +
jl loc_100606E  +
lea eax [ebp+var_620] +
push eax  +
call sub_1005E47  +
test eax eax +
jz loc_100606E  +
mov esi 80070057h +
push [ebp+pv]  +
call ebx  +
cmp esi edi +
jl loc_1006093  +
push [ebp+var_62C]  +
push [ebp+var_628]  +
push [ebp+var_624]  +
call sub_1005AB0  +
jmp loc_10060E2  +
mov esi ds:LoadStringW +
push 104h  +
lea eax [ebp+Caption] +
push eax  +
push 0FFh  +
push hInstance  +
call esi  +
push 208h  +
lea eax [ebp+Text] +
push eax  +
push 100h  +
push hInstance  +
call esi  +
push 40h  +
lea eax [ebp+Caption] +
push eax  +
lea eax [ebp+Text] +
push eax  +
push edi  +
call ds:MessageBoxW  +
push [ebp+var_624]  +
call ebx  +
push offset unk_1008188  +
call sub_1005C95  +
call ds:CoUninitialize  +
pop ebx  +
push offset dword_1008148  +
call sub_1005E16  +
mov ecx [ebp+var_4] +
xor eax eax +
pop edi  +
xor ecx ebp +
inc eax  +
pop esi  +
call sub_100677B  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 44h +
push esi  +
call ds:GetCommandLineW  +
mov esi eax +
movzx eax word ptr [esi] +
push 2  +
pop ecx  +
cmp ax 22h +
jnz loc_1006152  +
add esi ecx +
movzx eax word ptr [esi] +
test ax ax +
jz loc_100614A  +
cmp ax 22h +
jnz loc_100613A  +
cmp word ptr [esi] 22h +
jnz loc_1006160  +
jmp loc_100616F  +
cmp ax 20h +
jbe loc_1006160  +
add esi ecx +
cmp word ptr [esi] 20h +
ja loc_1006158  +
movzx eax word ptr [esi] +
cmp ax 20h +
jz loc_100616F  +
cmp ax 9 +
jnz loc_1006173  +
add esi ecx +
jmp loc_1006160  +
push 44h  +
lea eax [ebp+StartupInfo] +
push 0  +
push eax  +
call memset  +
add esp 0Ch +
lea eax [ebp+StartupInfo] +
push eax  +
call ds:GetStartupInfoW  +
test byte ptr [ebp+StartupInfo.dwFlags] 1 +
jz loc_1006199  +
movzx eax [ebp+StartupInfo.wShowWindow] +
jmp loc_100619C  +
push 0Ah  +
pop eax  +
push eax  +
push esi  +
push 0  +
push 0  +
call ds:GetModuleHandleW  +
push eax  +
call sub_1005F1E  +
pop esi  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax dword_1008230 +
push [ebp+lpMem]  +
cmp eax 1 +
jnz loc_10061DB  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
jmp loc_10061E2  +
push eax  +
call dword_1008234  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebx  +
push edi  +
push offset LibFileName  +
call ds:LoadLibraryA  +
mov edi eax +
xor ebx ebx +
cmp edi ebx +
jnz loc_1006209  +
xor eax eax +
jmp loc_10062C9  +
push esi  +
mov esi ds:GetProcAddress +
push offset ProcName  +
push edi  +
call esi  +
cmp eax ebx +
jz loc_1006222  +
push 0Ch  +
call eax  +
jmp loc_1006224  +
xor eax eax +
cmp eax ebx +
jnz loc_1006235  +
xor eax eax +
inc eax  +
mov dword_1008230 eax +
jmp loc_10062C8  +
push offset aInterlockedpop  +
push edi  +
call esi  +
push offset aInterlockedpus  +
push edi  +
mov dword_1008238 eax +
call esi  +
push offset aInterlockedcom  +
push edi  +
mov dword_1008234 eax +
call esi  +
mov dword_100823C eax +
cmp dword_1008234 ebx +
jz loc_10062C6  +
cmp dword_1008238 ebx +
jz loc_10062C6  +
cmp eax ebx +
jz loc_10062C6  +
mov eax large fs:18h +
mov esi [eax+30h] +
add esi 34h +
mov eax [esi] +
cmp eax ebx +
jnz loc_10062BC  +
push 8  +
push ebx  +
mov ebx ds:GetProcessHeap +
call ebx  +
push eax  +
call ds:HeapAlloc  +
mov edi eax +
xor eax eax +
cmp edi eax +
jz loc_10062C6  +
push eax  +
push edi  +
push esi  +
mov [edi] eax +
mov [edi+4] eax +
call dword_100823C  +
test eax eax +
jz loc_10062BA  +
push edi  +
push 0  +
call ebx  +
push eax  +
call ds:HeapFree  +
mov eax [esi] +
mov dword_1008230 eax +
xor eax eax +
inc eax  +
jmp loc_10062C8  +
xor eax eax +
pop esi  +
pop edi  +
pop ebx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp loc_10061B8  +
***
cmp dword_1008230 0 +
push esi  +
jnz loc_10062F4  +
call sub_10061EB  +
test eax eax +
jz loc_1006337  +
mov eax dword_1008230 +
cmp eax 1 +
jnz loc_1006315  +
push 0Dh  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
test eax eax +
jz loc_1006337  +
pop esi  +
retn   +
push eax  +
call dword_1008238  +
test eax eax +
jnz loc_100637F  +
push 40h  +
mov eax 1000h +
push eax  +
push eax  +
push 0  +
call ds:VirtualAlloc  +
mov esi eax +
test esi esi +
jnz loc_100633B  +
xor eax eax +
pop esi  +
retn   +
mov eax [esi] +
push edi  +
push dword_1008230  +
call dword_1008238  +
mov edi eax +
test edi edi +
jz loc_1006360  +
push 8000h  +
push 0  +
push esi  +
call ds:VirtualFree  +
jmp loc_100637C  +
mov edi esi +
add esi 0FF0h +
push edi  +
push dword_1008230  +
call dword_1008234  +
add edi 10h +
cmp edi esi +
jb loc_1006368  +
mov eax edi +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
xor eax eax +
jmp loc_10063AC  +
test eax eax +
jnz loc_10063B1  +
mov ecx [esi] +
test ecx ecx +
jz loc_10063A9  +
call ecx  +
add esi 4 +
cmp esi [ebp+arg_4] +
jb loc_100639D  +
pop esi  +
pop ebp  +
retn   +
***
mov eax dword_1008264 +
push offset dword_1008254  +
push dword_1008260  +
mov dword_1008254 eax +
push offset unk_1008244  +
push offset unk_1008248  +
push offset unk_1008240  +
call ds:__getmainargs  +
add esp 14h +
mov dword_1008250 eax +
retn   +
***
call __SEH_prolog4  +
xor ebx ebx +
mov [ebp+var_1C] ebx +
mov [ebp+ms_exc.disabled] ebx +
lea eax [ebp+StartupInfo] +
push eax  +
call ds:GetStartupInfoA  +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov [ebp+ms_exc.disabled] 1 +
mov eax large fs:18h +
mov esi [eax+4] +
mov edi offset Destination +
push 0  +
push esi  +
push edi  +
call ds:InterlockedCompareExchange  +
test eax eax +
jz loc_1006451  +
cmp eax esi +
jnz loc_1006444  +
xor esi esi +
inc esi  +
mov ebx esi +
jmp loc_1006454  +
push 3E8h  +
call ds:Sleep  +
jmp loc_100642B  +
xor esi esi +
inc esi  +
mov eax dword_100859C +
cmp eax esi +
jnz loc_1006467  +
push 1Fh  +
call _amsg_exit  +
pop ecx  +
jmp loc_1006496  +
mov eax dword_100859C +
test eax eax +
jnz loc_1006490  +
mov dword_100859C esi +
push offset dword_1001220  +
push offset dword_1001214  +
call sub_1006390  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1006496  +
jmp loc_10065BE  +
mov dword_100825C esi +
mov eax dword_100859C +
cmp eax esi +
jnz loc_10064BA  +
push offset dword_1001210  +
push offset dword_1001208  +
call _initterm  +
pop ecx  +
pop ecx  +
mov dword_100859C 2 +
test ebx ebx +
jnz loc_10064C6  +
push ebx  +
push edi  +
call ds:InterlockedExchange  +
cmp dword_10085A4 0 +
jz loc_10064EA  +
push offset dword_10085A4  +
call sub_10068D9  +
pop ecx  +
test eax eax +
jz loc_10064EA  +
push 0  +
push 2  +
push 0  +
call dword_10085A4  +
mov eax ds:_acmdln +
mov esi [eax] +
mov [ebp+var_20] esi +
mov al [esi] +
cmp al 20h +
ja $LN61  +
test al al +
jz loc_1006504  +
cmp [ebp+var_1C] 0 +
jnz $LN61  +
mov al [esi] +
test al al +
jz loc_1006514  +
cmp al 20h +
ja loc_1006514  +
inc esi  +
mov [ebp+var_20] esi +
jmp loc_1006504  +
test byte ptr [ebp+StartupInfo.dwFlags] 1 +
jz loc_1006520  +
movzx eax [ebp+StartupInfo.wShowWindow] +
jmp loc_1006523  +
push 0Ah  +
pop eax  +
push eax  +
push esi  +
push 0  +
push 1000000h  +
call _WinMain@16  +
mov dword_1008258 eax +
cmp dword_100824C 0 +
jnz $LN62  +
push eax  +
call ds:exit  +
cmp al 22h +
jnz loc_1006555  +
xor ecx ecx +
cmp [ebp+var_1C] ecx +
setz cl  +
mov [ebp+var_1C] ecx +
movzx eax al +
push eax  +
call ds:_ismbblead  +
pop ecx  +
test eax eax +
jz loc_1006568  +
inc esi  +
mov [ebp+var_20] esi +
inc esi  +
jmp loc_10064F1  +
mov eax [ebp-14h] +
mov ecx [eax] +
mov ecx [ecx] +
mov [ebp-24h] ecx +
push eax  +
push ecx  +
call _XcptFilter  +
pop ecx  +
pop ecx  +
retn   +
mov esp [ebp-18h] +
mov eax [ebp-24h] +
mov dword_1008258 eax +
cmp dword_100824C 0 +
jnz $LN62  +
push eax  +
call ds:_exit  +
cmp dword_100825C 0 +
jnz loc_10065A9  +
call ds:_cexit  +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov eax dword_1008258 +
jmp loc_10065CA  +
xor eax eax +
inc eax  +
retn   +
mov esp [ebp-18h] +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov eax 0FFh +
call __SEH_epilog4  +
retn   +
***
mov eax 5A4Dh +
cmp ds:1000000h ax +
jz loc_10065E7  +
xor eax eax +
jmp loc_1006634  +
mov eax ds:100003Ch +
lea eax [eax+1000000h] +
cmp dword ptr [eax] 4550h +
jnz loc_10065E3  +
movzx ecx word ptr [eax+18h] +
cmp ecx 10Bh +
jz loc_1006621  +
cmp ecx 20Bh +
jnz loc_10065E3  +
cmp dword ptr [eax+84h] 0Eh +
jbe loc_10065E3  +
xor ecx ecx +
cmp [eax+0F8h] ecx +
jmp loc_100662F  +
cmp dword ptr [eax+74h] 0Eh +
jbe loc_10065E3  +
xor ecx ecx +
cmp [eax+0E8h] ecx +
setnz cl  +
mov eax ecx +
push 2  +
mov dword_100824C eax +
call sub_10069E7  +
push eax  +
call ds:__set_app_type  +
or dword_1008594 0FFFFFFFFh +
or dword_1008598 0FFFFFFFFh +
pop ecx  +
pop ecx  +
call ds:__p__fmode  +
mov ecx dword_100826C +
mov [eax] ecx +
call ds:__p__commode  +
mov ecx dword_1008268 +
mov [eax] ecx +
call sub_1006979  +
cmp dword_1008128 0 +
jnz loc_100668D  +
push offset sub_1006979  +
call ds:__setusermatherr  +
pop ecx  +
call sub_1006961  +
xor eax eax +
retn   +
***
call sub_1006A26  +
jmp ___tmainCRTStartup  +
***
mov eax [esp+8+arg_4] +
mov ecx [ebp-10h] +
mov large fs:0 ecx +
pop ecx  +
pop edi  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
push ecx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push offset sub_100677B  +
push offset dword_1008110  +
call _except_handler4_common  +
add esp 18h +
pop ebp  +
retn   +
***
jmp ds:_purecall  +
***
cmp ecx dword_1008110 +
jnz loc_1006786  +
retn 0  +
jmp loc_1006AC7  +
***
sub ecx eax +
sbb eax eax +
not eax  +
and ecx eax +
mov eax esp +
and eax 0FFFFF000h +
cmp ecx eax +
jb cs20  +
mov eax ecx +
pop ecx  +
xchg eax esp +
mov eax [eax] +
mov [esp+0] eax +
retn   +
sub eax 1000h +
test [eax] eax +
jmp cs10  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov eax [eax] +
cmp dword ptr [eax] 0E06D7363h +
jnz loc_100681D  +
cmp dword ptr [eax+10h] 3 +
jnz loc_100681D  +
mov eax [eax+14h] +
cmp eax 19930520h +
jz loc_1006817  +
cmp eax 19930521h +
jz loc_1006817  +
cmp eax 19930522h +
jz loc_1006817  +
cmp eax 1994000h +
jnz loc_100681D  +
call ds:?terminate@@YAXXZ  +
xor eax eax +
pop ebp  +
retn 4  +
***
push offset loc_10067E0  +
call ds:SetUnhandledExceptionFilter  +
xor eax eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
mov eax 5A4Dh +
cmp [ecx] ax +
jz loc_1006866  +
xor eax eax +
pop ebp  +
retn   +
mov eax [ecx+3Ch] +
add eax ecx +
cmp dword ptr [eax] 4550h +
jnz loc_1006862  +
xor edx edx +
mov ecx 10Bh +
cmp [eax+18h] cx +
setz dl  +
mov eax edx +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [eax+3Ch] +
add ecx eax +
movzx eax word ptr [ecx+14h] +
push ebx  +
push esi  +
movzx esi word ptr [ecx+6] +
xor edx edx +
push edi  +
lea eax [eax+ecx+18h] +
test esi esi +
jbe loc_10068CD  +
mov edi [ebp+arg_4] +
mov ecx [eax+0Ch] +
cmp edi ecx +
jb loc_10068C5  +
mov ebx [eax+8] +
add ebx ecx +
cmp edi ebx +
jb loc_10068CF  +
inc edx  +
add eax 28h +
cmp edx esi +
jb loc_10068B5  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
call __SEH_prolog4  +
and [ebp+ms_exc.disabled] 0 +
mov esi 1000000h +
push esi  +
call sub_1006850  +
pop ecx  +
test eax eax +
jz loc_1006936  +
mov eax [ebp+arg_0] +
sub eax esi +
push eax  +
push esi  +
call sub_1006890  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1006936  +
mov eax [eax+24h] +
shr eax 1Fh +
not eax  +
and eax 1 +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
jmp loc_100693F  +
mov eax [ebp-14h] +
mov eax [eax] +
mov eax [eax] +
xor ecx ecx +
cmp eax 0C0000005h +
setz cl  +
mov eax ecx +
retn   +
mov esp [ebp-18h] +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
xor eax eax +
call __SEH_epilog4  +
retn   +
***
call ds:_controlfp  +
pop ecx  +
pop ecx  +
retn   +
***
retn   +
***
call __SEH_prolog4  +
xor eax eax +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_10069DA  +
cmp ecx 0FFFFFFFFh +
jz loc_10069DA  +
and [ebp+ms_exc.disabled] eax +
mov edx 5A4Dh +
cmp [ecx] dx +
jnz loc_10069D3  +
mov edx [ecx+3Ch] +
test edx edx +
jl loc_10069D3  +
cmp edx 10000000h +
jnb loc_10069D3  +
lea eax [edx+ecx] +
mov [ebp+var_1C] eax +
cmp dword ptr [eax] 4550h +
jz loc_10069D3  +
jmp loc_10069CE  +
xor eax eax +
inc eax  +
retn   +
mov esp [ebp-18h] +
xor eax eax +
mov [ebp+var_1C] eax +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
call __SEH_epilog4  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
call ds:GetModuleHandleA  +
test eax eax +
jz loc_1006A1C  +
push eax  +
call sub_1006981  +
test eax eax +
jz loc_1006A1C  +
movzx eax word ptr [eax+5Ch] +
cmp ax 2 +
jnz loc_1006A11  +
push 2  +
pop eax  +
pop ebp  +
retn   +
cmp ax 3 +
jnz loc_1006A1C  +
xor eax eax +
inc eax  +
pop ebp  +
retn   +
mov eax [ebp+arg_0] +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov eax dword_1008110 +
and [ebp+SystemTimeAsFileTime.dwLowDateTime] 0 +
and [ebp+SystemTimeAsFileTime.dwHighDateTime] 0 +
push ebx  +
push edi  +
mov edi 0BB40E64Eh +
mov ebx 0FFFF0000h +
cmp eax edi +
jz loc_1006A58  +
test eax ebx +
jz loc_1006A58  +
not eax  +
mov dword_1008114 eax +
jmp loc_1006AB3  +
push esi  +
lea eax [ebp+SystemTimeAsFileTime] +
push eax  +
call ds:GetSystemTimeAsFileTime  +
mov esi [ebp+SystemTimeAsFileTime.dwHighDateTime] +
xor esi [ebp+SystemTimeAsFileTime.dwLowDateTime] +
call ds:GetCurrentProcessId  +
xor esi eax +
call ds:GetCurrentThreadId  +
xor esi eax +
call ds:GetTickCount  +
xor esi eax +
lea eax [ebp+PerformanceCount] +
push eax  +
call ds:QueryPerformanceCounter  +
mov eax dword ptr [ebp+PerformanceCount+4] +
xor eax dword ptr [ebp+PerformanceCount] +
xor esi eax +
cmp esi edi +
jz loc_1006A9F  +
test dword_1008110 ebx +
jnz loc_1006AA4  +
mov esi 0BB40E64Fh +
mov dword_1008110 esi +
not esi  +
mov dword_1008114 esi +
pop esi  +
pop edi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 328h +
mov dword_1008370 eax +
mov dword_100836C ecx +
mov dword_1008368 edx +
mov dword_1008364 ebx +
mov dword_1008360 esi +
mov dword_100835C edi +
mov word_1008388 ss +
mov word_100837C cs +
mov word_1008358 ds +
mov word_1008354 es +
mov word_1008350 fs +
mov word_100834C gs +
pushf   +
pop dword_1008380  +
mov eax [ebp+0] +
mov dword_1008374 eax +
mov eax [ebp+4] +
mov dword_1008378 eax +
lea eax [ebp+8] +
mov dword_1008384 eax +
mov eax [ebp-320h] +
mov dword_10082C0 10001h +
mov eax dword_1008378 +
mov dword_100827C eax +
mov dword_1008270 0C0000409h +
mov dword_1008274 1 +
mov eax dword_1008110 +
mov [ebp-328h] eax +
mov eax dword_1008114 +
mov [ebp-324h] eax +
push 0  +
call ds:SetUnhandledExceptionFilter  +
push offset ExceptionInfo  +
call ds:UnhandledExceptionFilter  +
push 0C0000409h  +
call ds:GetCurrentProcess  +
push eax  +
call ds:TerminateProcess  +
leave   +
retn   +
***
mov edi edi +
push ebx  +
xor ebx ebx +
cmp dword_100858C ebx +
jnz loc_1006BE3  +
push offset aNtdll_dll  +
call ds:GetModuleHandleW  +
cmp eax ebx +
jz loc_1006BDB  +
push offset aRtldllshutdown  +
push eax  +
call ds:GetProcAddress  +
mov dword_100858C eax +
cmp dword_100858C ebx +
jz loc_1006BEE  +
call dword_100858C  +
test al al +
setnz bl  +
mov al bl +
pop ebx  +
retn   +
***
push 65676E61h  +
add [edx+656C5304h] dh +
jo $+3  +
jmp near ptr 756EBF6Dh  +
***
