retn   +
***
retn 2  +
***
add bh bh +
xor edi edi +
adc eax offset SysFreeString +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
test [ebp+arg_0] 2 +
push esi  +
mov esi ecx +
jz loc_1005496  +
push edi  +
push (offset loc_1005454+1)  +
lea edi [esi-4] +
push dword ptr [edi]  +
push 0Ch  +
push esi  +
call ??_M@YGXPAXIHP6EX0@Z@Z  +
test [ebp+arg_0] 1 +
jz loc_1005491  +
push edi  +
call sub_101B5A8  +
pop ecx  +
mov eax edi +
pop edi  +
jmp loc_10054AD  +
push dword ptr [esi]  +
call ds:SysFreeString  +
test [ebp+arg_0] 1 +
jz loc_10054AB  +
push esi  +
call sub_101B5A8  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+arg_8]  +
push [ebp+arg_C]  +
push 2Bh  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call TraceMessage  +
add esp 18h +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 2  +
push 0  +
call ds:CoInitializeEx  +
push dword ptr [ebp+8]  +
call sub_101CAFC  +
call ds:CoUninitialize  +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi offset CriticalSection +
push esi  +
call ds:EnterCriticalSection  +
mov eax [ebp+arg_0] +
inc dword_1030004  +
push esi  +
mov dword_1031658 eax +
call ds:LeaveCriticalSection  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi eax +
xor eax eax +
mov ecx edx +
test edx edx +
jz loc_1005551  +
cmp [esi] ax +
jz loc_100554D  +
inc esi  +
inc esi  +
dec edx  +
jnz loc_1005543  +
test edx edx +
jnz loc_1005556  +
mov eax 80070057h +
pop esi  +
test edi edi +
jz locret_1005567  +
test eax eax +
jl loc_1005564  +
sub ecx edx +
mov [edi] ecx +
retn   +
and dword ptr [edi] 0 +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
xor ebx ebx +
push edi  +
xor edi edi +
inc ebx  +
cmp esi edi +
jnz loc_10055AC  +
push offset CriticalSection  +
call ds:InitializeCriticalSection  +
mov eax offset dword_1031678 +
mov dword_103167C eax +
mov dword_1031678 eax +
mov dword_1030008 esi +
mov edi ebx +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
cmp esi ebx +
jnz loc_10055A3  +
push edi  +
push offset loc_10054DD  +
push offset dword_103165C  +
call sub_101CC79  +
test eax eax +
jz loc_10055DE  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_10055A3  +
test [eax+1Ch] bl +
jz loc_10055A3  +
push offset dword_1001910  +
push 0Ah  +
jmp loc_1005642  +
push 2  +
push dword_103165C  +
call sub_101C7AA  +
test eax eax +
jz loc_1005609  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_10055A3  +
test [eax+1Ch] bl +
jz loc_10055A3  +
push offset dword_1001910  +
push 0Bh  +
jmp loc_1005642  +
push 80h  +
push ebx  +
push dword_103165C  +
call sub_101CE7A  +
test eax eax +
jz loc_100559B  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_10055A3  +
test [eax+1Ch] bl +
jz loc_10055A3  +
push offset dword_1001910  +
push 0Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10054B7  +
jmp loc_10055A3  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov eax [ebp+arg_14] +
push esi  +
and eax 100h +
push edi  +
mov [ebp+var_10] eax +
jz loc_100573A  +
xor eax eax +
cmp [ebp+arg_0] eax +
jnz loc_1005680  +
mov edx [ebp+arg_4] +
test edx edx +
jnz loc_100568B  +
mov edx [ebp+arg_4] +
cmp edx 7FFFFFFFh +
jbe loc_1005690  +
mov eax 80070057h +
test eax eax +
jl loc_100569C  +
test edx edx +
jnz loc_1005758  +
and [ebp+var_4] 0 +
mov esi eax +
test eax eax +
jl loc_1005732  +
mov eax [ebp+var_4] +
mov ecx [ebp+arg_0] +
mov edi [ebp+arg_4] +
push ebx  +
sub edi eax +
xor edx edx +
lea ebx [ecx+eax*2] +
mov [ebp+var_8] ebx +
mov [ebp+var_C] edi +
cmp [ebp+var_10] edx +
jz loc_10056D2  +
cmp [ebp+arg_8] edx +
jnz loc_10056D2  +
mov [ebp+arg_8] offset WindowName +
mov ecx [ebp+arg_14] +
xor esi esi +
test ecx 0FFFFE000h +
jz loc_1005768  +
mov esi 80070057h +
test ecx 1C00h +
jz loc_1005713  +
mov eax [ebp+arg_4] +
test eax eax +
jz loc_1005713  +
mov edi [ebp+arg_0] +
push ecx  +
lea ecx [ebp+var_8] +
push ecx  +
mov ecx [ebp+var_4] +
add eax eax +
push eax  +
lea ebx [ebp+var_C] +
call sub_1007F5D  +
mov ebx [ebp+var_8] +
mov edi [ebp+var_C] +
test esi esi +
jge loc_100571F  +
cmp esi 8007007Ah +
jnz loc_1005731  +
mov eax [ebp+arg_C] +
test eax eax +
jz loc_1005728  +
mov [eax] ebx +
mov eax [ebp+arg_10] +
test eax eax +
jz loc_1005731  +
mov [eax] edi +
pop ebx  +
pop edi  +
mov eax esi +
pop esi  +
leave   +
retn 18h  +
mov edx [ebp+arg_4] +
xor eax eax +
test edx edx +
jz loc_100574B  +
cmp edx 7FFFFFFFh +
jbe loc_1005750  +
mov eax 80070057h +
test eax eax +
jl loc_100569C  +
mov eax [ebp+arg_0] +
lea edi [ebp+var_4] +
call sub_1005536  +
jmp loc_10056A0  +
cmp edi 1 +
ja loc_100578A  +
mov eax [ebp+arg_8] +
cmp [eax] dx +
jz loc_100571F  +
mov esi [ebp+arg_0] +
neg esi  +
sbb esi esi +
and esi 23h +
add esi 80070057h +
jmp loc_10056E8  +
mov [ebp+var_C] edx +
xor edx edx +
mov esi edi +
mov eax ebx +
test edi edi +
jz loc_10057CE  +
mov ecx [ebp+arg_8] +
mov [ebp+var_8] 7FFFFFFEh +
sub [ebp+var_8] edi +
sub ecx ebx +
mov [ebp+arg_8] ecx +
mov ecx [ebp+var_8] +
add ecx esi +
jz loc_10057C7  +
mov ecx [ebp+arg_8] +
movzx ecx word ptr [ecx+eax] +
test cx cx +
jz loc_10057C7  +
mov [eax] cx +
inc eax  +
inc eax  +
dec esi  +
inc edx  +
test esi esi +
jnz loc_10057A9  +
mov ecx [ebp+arg_14] +
test esi esi +
jnz loc_10057D8  +
dec eax  +
dec eax  +
dec edx  +
mov [ebp+var_C] 8007007Ah +
xor esi esi +
mov [eax] si +
mov esi [ebp+var_C] +
sub edi edx +
lea ebx [ebx+edx*2] +
mov [ebp+var_8] ebx +
mov [ebp+var_C] edi +
test esi esi +
jl loc_10056E8  +
test ecx 200h +
jz loc_100571F  +
cmp edi 1 +
jbe loc_100571F  +
lea eax [edi+edi] +
cmp eax 2 +
jbe loc_100571F  +
add eax 0FFFFFFFEh +
push eax  +
and ecx 0FFh +
push ecx  +
lea eax [ebx+2] +
push eax  +
call memset  +
add esp 0Ch +
jmp loc_100571F  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
cmp [ebp+arg_4] eax +
jz loc_100584A  +
cmp [ebp+arg_4] 7FFFFFFFh +
jbe loc_100584F  +
mov eax 80070057h +
test eax eax +
jl loc_1005869  +
push edi  +
mov edi [ebp+arg_0] +
lea eax [ebp+arg_C] +
push eax  +
push [ebp+arg_8]  +
mov eax [ebp+arg_4] +
push 0  +
call sub_1007EE3  +
pop edi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax 4040h +
call __alloca_probe  +
mov eax dword_1030118 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_8] +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
push edi  +
mov [ebp+var_4020] eax +
xor eax eax +
xor edi edi +
mov esi 1FFEh +
push esi  +
mov [ebp+szRole] ax +
lea eax [ebp-4002h] +
push edi  +
push eax  +
mov [ebp+var_4008] edi +
mov [ebp+phwnd] edi +
call memset  +
xor eax eax +
push esi  +
mov word ptr [ebp+var_2004] ax +
lea eax [ebp+var_2004+2] +
push edi  +
push eax  +
call memset  +
mov esi ds:VariantInit +
mov [ebp+var_401C] edi +
xor eax eax +
lea edi [ebp+var_4018] +
stos   +
stos   +
stos   +
add esp 18h +
lea eax [ebp+pvarg] +
push eax  +
call esi  +
lea eax [ebp+var_4030] +
push eax  +
call esi  +
push 3  +
pop eax  +
mov word ptr [ebp+pvarg.anonymous_0] ax +
mov eax [ebp+arg_4] +
lea ecx [ebp+var_4008] +
push ecx  +
mov dword ptr [ebp+pvarg.anonymous_0+8] eax +
mov eax [ebx] +
sub esp 10h +
mov edi esp +
lea esi [ebp+pvarg] +
movs   +
movs   +
movs   +
push ebx  +
movs   +
call dword ptr [eax+28h]  +
test eax eax +
jz loc_100596B  +
cmp eax 1 +
jz loc_1005964  +
mov ecx off_1030000 +
cmp ecx offset off_1030000 +
jz loc_1005964  +
test byte ptr [ecx+1Ch] 1 +
jz loc_1005964  +
push eax  +
push offset dword_1001910  +
push 18h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10062BE  +
and [ebp+var_4008] 0 +
mov eax [ebx] +
lea ecx [ebp+var_4030] +
push ecx  +
sub esp 10h +
mov edi esp +
lea esi [ebp+pvarg] +
movs   +
movs   +
movs   +
push ebx  +
movs   +
call dword ptr [eax+34h]  +
xor edi edi +
cmp eax edi +
jz loc_10059C1  +
mov ecx off_1030000 +
cmp ecx offset off_1030000 +
jz loc_10059B7  +
test byte ptr [ecx+1Ch] 1 +
jz loc_10059B7  +
movzx eax ax +
push eax  +
push offset dword_1001910  +
push 19h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10062BE  +
mov edi 80004005h +
jmp loc_1005C03  +
push 1000h  +
lea eax [ebp+szRole] +
push eax  +
push [ebp+lRole]  +
call GetRoleTextW  +
test eax eax +
jnz loc_1005A12  +
mov eax off_1030000 +
mov esi offset off_1030000 +
cmp eax esi +
jz loc_1005A07  +
test byte ptr [eax+1Ch] 1 +
jz loc_1005A07  +
push offset dword_1001910  +
push 1Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10054B7  +
mov eax off_1030000 +
xor ecx ecx +
mov [ebp+szRole] cx +
jmp loc_1005A1C  +
mov eax off_1030000 +
mov esi offset off_1030000 +
cmp [ebp+lRole] 0Ah +
jnz loc_1005A4E  +
cmp eax esi +
jz loc_1005C03  +
test byte ptr [eax+1Ch] 4 +
jz loc_1005C03  +
push offset dword_1001910  +
push 1Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10054B7  +
jmp loc_1005C03  +
cmp [ebp+lRole] 9 +
jnz loc_1005AC0  +
lea eax [ebp+phwnd] +
push eax  +
push ebx  +
call WindowFromAccessibleObject  +
test eax eax +
jnz loc_1005A9F  +
cmp [ebp+phwnd] edi +
jz loc_1005A9F  +
call ds:GetDesktopWindow  +
mov ecx [ebp+phwnd] +
cmp ecx eax +
jz loc_1005A97  +
xor eax eax +
cmp [ebp+arg_14] edi +
jbe loc_1005AC0  +
mov edx [ebp+arg_10] +
cmp ecx [edx+eax*4] +
jz loc_1005A97  +
inc eax  +
cmp eax [ebp+arg_14] +
jb loc_1005A87  +
jmp loc_1005AC0  +
xor edi edi +
inc edi  +
jmp loc_1005C03  +
mov eax off_1030000 +
cmp eax esi +
jz loc_1005AC0  +
test byte ptr [eax+1Ch] 1 +
jz loc_1005AC0  +
push offset dword_1001910  +
push 1Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10054B7  +
mov eax [ebx] +
sub esp 10h +
mov edi esp +
lea esi [ebp+pvarg] +
movs   +
lea ecx [ebp+var_4010] +
push ecx  +
movs   +
lea ecx [ebp+var_4014] +
push ecx  +
lea ecx [ebp+var_401C] +
push ecx  +
movs   +
lea ecx [ebp+var_4018] +
push ecx  +
push ebx  +
movs   +
call dword ptr [eax+58h]  +
mov ecx eax +
test ecx ecx +
jz loc_1005B2C  +
xor eax eax +
lea edi [ebp+var_401C] +
stos   +
stos   +
stos   +
stos   +
mov eax off_1030000 +
mov ebx offset off_1030000 +
cmp eax ebx +
jz loc_1005B31  +
test byte ptr [eax+1Ch] 1 +
jz loc_1005B31  +
push ecx  +
push offset dword_1001910  +
push 1Dh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10062BE  +
jmp loc_1005B31  +
mov ebx offset off_1030000 +
mov eax [ebp+var_4008] +
test eax eax +
jnz loc_1005B40  +
mov eax offset WindowName +
push [ebp+var_4010]  +
lea ecx [ebp+szRole] +
push [ebp+var_4014]  +
mov esi 1000h +
push [ebp+var_4018]  +
push [ebp+var_401C]  +
push ecx  +
push [ebp+lRole]  +
push eax  +
push offset aLevelNameLsRol  +
lea eax [ebp+var_2004] +
push esi  +
push eax  +
call sub_1005835  +
mov edi eax +
add esp 28h +
test edi edi +
jge loc_1005BAD  +
mov eax off_1030000 +
cmp eax ebx +
jz loc_1005C03  +
test byte ptr [eax+1Ch] 1 +
jz loc_1005C03  +
movzx ecx di +
push ecx  +
push offset dword_1001910  +
push 1Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10062BE  +
jmp loc_1005C03  +
push esi  +
lea eax [ebp+var_2004] +
push eax  +
call sub_10064D4  +
push esi  +
xor edi edi +
push edi  +
push edi  +
lea eax [ebp+var_2004] +
push eax  +
push [ebp+arg_C]  +
push [ebp+var_4020]  +
call sub_1005657  +
cmp eax edi +
jge loc_1005C03  +
mov ecx off_1030000 +
cmp ecx ebx +
jz loc_1005BFE  +
test byte ptr [ecx+1Ch] 1 +
jz loc_1005BFE  +
movzx eax ax +
push eax  +
push offset dword_1001910  +
push 1Fh  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10062BE  +
mov edi 8007000Eh +
mov esi ds:VariantClear +
lea eax [ebp+pvarg] +
push eax  +
call esi  +
lea eax [ebp+var_4030] +
push eax  +
call esi  +
cmp [ebp+var_4008] 0 +
jz loc_1005C30  +
push [ebp+var_4008]  +
call ds:SysFreeString  +
mov ecx [ebp+var_4] +
mov eax edi +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_101BC5D  +
leave   +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
and [ebp+var_8] 0 +
and [ebp+ppacc] 0 +
push ebx  +
mov ebx [ebp+arg_4] +
push esi  +
mov esi ds:GetTickCount +
push edi  +
mov edi [ebp+arg_0] +
mov dword ptr [edi+0C0h] 1 +
call esi  +
cmp [ebp+hwnd] 0 +
mov [edi+0BCh] eax +
jz loc_1005CB0  +
lea eax [ebp+ppacc] +
push eax  +
push offset riid  +
push 0  +
push [ebp+hwnd]  +
call AccessibleObjectFromWindow  +
xor ebx ebx +
mov [ebp+hwnd] eax +
test eax eax +
jnz loc_1005CA0  +
cmp [ebp+ppacc] ebx +
jnz loc_1005CC7  +
lea eax [ebp+pvarg] +
push eax  +
lea eax [ebp+ppacc] +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
jmp loc_1005CBC  +
lea eax [ebp+pvarg] +
push eax  +
lea eax [ebp+ppacc] +
push eax  +
push [ebp+arg_8]  +
push ebx  +
call AccessibleObjectFromPoint  +
mov ebx dword ptr [ebp+pvarg.anonymous_0+8] +
mov [ebp+hwnd] eax +
call esi  +
cmp [ebp+hwnd] 0 +
mov [edi+0BCh] eax +
jnz loc_1005E01  +
cmp [ebp+ppacc] 0 +
jz loc_1005E01  +
push 8  +
lea eax [edi+84h] +
push eax  +
push [ebp+arg_14]  +
push [ebp+arg_10]  +
push ebx  +
push [ebp+ppacc]  +
call sub_1005870  +
cmp eax 8007000Eh +
jz loc_1005D7A  +
cmp eax 1 +
jz loc_1005D7A  +
call esi  +
mov [edi+0BCh] eax +
test ebx ebx +
jz loc_1005D17  +
xor ebx ebx +
jmp loc_1005D70  +
mov eax [ebp+ppacc] +
mov ecx [eax] +
lea edx [ebp+var_8] +
push edx  +
push eax  +
call dword ptr [ecx+1Ch]  +
mov ebx eax +
test ebx ebx +
jnz loc_1005D81  +
call esi  +
mov [edi+0BCh] eax +
cmp [ebp+var_8] ebx +
jz loc_1005DAF  +
mov eax [ebp+ppacc] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+var_8] +
and [ebp+ppacc] ebx +
mov ecx [eax] +
lea edx [ebp+ppacc] +
push edx  +
push offset riid  +
push eax  +
call dword ptr [ecx]  +
mov ebx eax +
test ebx ebx +
jl loc_1005DD7  +
call esi  +
mov [edi+0BCh] eax +
mov eax [ebp+var_8] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
xor ebx ebx +
mov [ebp+var_8] ebx +
cmp [ebp+ppacc] 0 +
jnz loc_1005CE3  +
xor ebx ebx +
jmp loc_1005E33  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_1005DA9  +
test byte ptr [eax+1Ch] 1 +
jz loc_1005DA9  +
movzx ecx bx +
push ecx  +
push offset dword_1001910  +
push 15h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10062BE  +
and [ebp+var_8] 0 +
jmp loc_1005D7A  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_1005E33  +
test byte ptr [eax+1Ch] 1 +
jz loc_1005E33  +
push 0  +
push offset dword_1001910  +
push 16h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10062BE  +
jmp loc_1005E33  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_1005E2F  +
test byte ptr [eax+1Ch] 1 +
jz loc_1005E2F  +
movzx ecx bx +
push ecx  +
push offset dword_1001910  +
push 17h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10062BE  +
jmp loc_1005E2F  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_1005E2A  +
test byte ptr [eax+1Ch] 1 +
jz loc_1005E2A  +
movzx ecx word ptr [ebp+hwnd] +
push ecx  +
push offset dword_1001910  +
push 14h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10062BE  +
mov ebx 80004005h +
and [ebp+ppacc] 0 +
lea eax [ebp+pvarg] +
push eax  +
call ds:VariantClear  +
mov eax [ebp+ppacc] +
test eax eax +
jz loc_1005E4E  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
and [ebp+ppacc] 0 +
mov eax [ebp+var_8] +
test eax eax +
jz loc_1005E5B  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
and dword ptr [edi+0C0h] 0 +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
leave   +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax 1201Ch +
call __alloca_probe  +
mov eax dword_1030118 +
xor eax ebp +
mov [ebp-4] eax +
push ebx  +
mov ebx ds:EnterCriticalSection +
push esi  +
mov esi [ebp+8] +
push edi  +
xor eax eax +
mov edi offset CriticalSection +
push edi  +
mov [ebp-12018h] eax +
mov dword ptr [ebp-12010h] 80004005h +
mov [ebp-1200Ch] eax +
mov [ebp-12004h] ax +
mov [ebp-10004h] ax +
call ebx  +
mov eax [esi+0B4h] +
push edi  +
cmp eax dword_1030004 +
jnz loc_1006113  +
call ds:LeaveCriticalSection  +
call ds:GetTickCount  +
sub eax [esi+0A8h] +
cmp eax 1F4h +
ja loc_1006119  +
push dword ptr [esi+80h]  +
call ds:IsHungAppWindow  +
test eax eax +
jz loc_1005F34  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_1006119  +
test byte ptr [eax+1Ch] 1 +
jz loc_1006119  +
push offset dword_1001910  +
push 0Dh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10054B7  +
jmp loc_1006119  +
call ds:GetTickCount  +
push edi  +
mov [ebp-12014h] eax +
mov [esi+0BCh] eax +
call ebx  +
and dword ptr [ebp-12008h] 0 +
mov eax dword_1031678 +
mov ecx offset dword_1031678 +
jmp loc_1005F83  +
cmp dword ptr [eax+0C0h] 1 +
jnz loc_1005F81  +
mov edx [esi+78h] +
cmp edx [eax+78h] +
jnz loc_1005F81  +
mov edx [ebp-12014h] +
sub edx [eax+0BCh] +
cmp edx 0C8h +
jnb loc_1005FD9  +
mov eax [eax] +
cmp eax ecx +
jnz loc_1005F5C  +
mov eax dword_103167C +
mov [esi] ecx +
mov [esi+4] eax +
mov [eax] esi +
mov dword_103167C esi +
mov dword ptr [ebp-1200Ch] 1 +
push edi  +
call ds:LeaveCriticalSection  +
cmp dword ptr [ebp-12008h] 0 +
jz loc_1005FE1  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_10060FC  +
test byte ptr [eax+1Ch] 1 +
jz loc_10060FC  +
push offset dword_1001910  +
push 0Eh  +
jmp loc_1006091  +
mov [ebp-12008h] eax +
jmp loc_1005FA3  +
***
cmp dword ptr [esi+0B8h] 0 +
jz loc_1005FF9  +
mov eax [esi+8] +
mov ecx [esi+0Ch] +
and dword ptr [ebp-12008h] 0 +
jmp loc_100600D  +
mov eax [esi+80h] +
mov ecx [ebp-12018h] +
mov [ebp-12008h] eax +
mov eax ecx +
push 1000h  +
lea edx [ebp-12004h] +
push edx  +
push dword ptr [ebp-12008h]  +
push ecx  +
push eax  +
push esi  +
call sub_1005C48  +
test eax eax +
jge loc_100604E  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_10060FC  +
test byte ptr [eax+1Ch] 1 +
jz loc_10060FC  +
push offset dword_1001910  +
push 0Fh  +
jmp loc_1006091  +
lea eax [ebp-12004h] +
push eax  +
push dword ptr [esi+0ACh]  +
lea eax [ebp-10004h] +
push offset aDUipathLsUipat  +
push 8000h  +
push eax  +
call sub_1005835  +
add esp 14h +
test eax eax +
jge loc_100609E  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_10060FC  +
test byte ptr [eax+1Ch] 1 +
jz loc_10060FC  +
push offset dword_1001910  +
push 10h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10054B7  +
jmp loc_10060FC  +
push edi  +
call ebx  +
mov eax [esi] +
mov ecx [esi+4] +
and dword ptr [ebp-1200Ch] 0 +
mov [ecx] eax +
mov [eax+4] ecx +
mov eax [esi+0B4h] +
cmp eax dword_1030004 +
jnz loc_1006112  +
mov ecx dword_1031658 +
test ecx ecx +
jz loc_10060EE  +
push 9  +
lea eax [ebp-10004h] +
push eax  +
call sub_1009EB3  +
mov ecx dword_1031658 +
push offset aMsaaEventProce  +
push dword ptr [esi+0A8h]  +
call sub_100A3EA  +
push edi  +
call ds:LeaveCriticalSection  +
and dword ptr [ebp-12010h] 0 +
cmp dword ptr [ebp-1200Ch] 0 +
jz loc_1006119  +
push edi  +
call ebx  +
mov eax [esi] +
mov esi [esi+4] +
mov [esi] eax +
mov [eax+4] esi +
push edi  +
call ds:LeaveCriticalSection  +
mov ecx [ebp-4] +
mov eax [ebp-12010h] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_101BC5D  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push esi  +
push 80h  +
push 1  +
push dword_103165C  +
xor esi esi +
mov [ebp+var_C] esi +
mov [ebp+hHandle] esi +
mov [ebp+var_4] esi +
call sub_101CE7A  +
test eax eax +
jz loc_1006190  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_10062B1  +
test byte ptr [eax+1Ch] 1 +
jz loc_10062B1  +
push offset dword_1001910  +
push 11h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10054B7  +
jmp loc_10062B1  +
push ebx  +
mov ebx ds:GetProcessHeap +
push edi  +
push 0CCh  +
push 8  +
call ebx  +
push eax  +
call ds:HeapAlloc  +
mov edi eax +
mov [ebp+var_10] edi +
cmp edi esi +
jnz loc_10061E2  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_10062AF  +
test byte ptr [eax+1Ch] 1 +
jz loc_10062AF  +
push offset dword_1001910  +
push 12h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10054B7  +
jmp loc_10062AF  +
push 33h  +
pop ecx  +
lea esi [ebp+arg_0] +
movs   +
mov esi offset CriticalSection +
push esi  +
call ds:EnterCriticalSection  +
mov eax dword_1030004 +
mov edi [ebp+var_10] +
push esi  +
mov [edi+0B4h] eax +
call ds:LeaveCriticalSection  +
push edi  +
push offset loc_1007B70  +
push offset loc_1005E70  +
lea eax [ebp+var_4] +
push eax  +
push dword_103165C  +
call sub_101CB97  +
test eax eax +
jz loc_100625B  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_100624D  +
test byte ptr [eax+1Ch] 1 +
jz loc_100624D  +
push offset dword_1001910  +
push 13h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10054B7  +
push edi  +
push 0  +
call ebx  +
push eax  +
call ds:HeapFree  +
jmp loc_10062AF  +
push [ebp+var_4]  +
push dword_103165C  +
call sub_101CEFE  +
lea eax [ebp+hHandle] +
push eax  +
push [ebp+var_4]  +
push dword_103165C  +
call sub_101C9BD  +
push 0C8h  +
push [ebp+hHandle]  +
call ds:WaitForSingleObject  +
push [ebp+hHandle]  +
push [ebp+var_4]  +
push dword_103165C  +
call sub_101C9E2  +
push [ebp+var_4]  +
push dword_103165C  +
call sub_101C94E  +
mov [ebp+var_C] 1 +
pop edi  +
pop ebx  +
mov eax [ebp+var_C] +
pop esi  +
leave   +
retn 0CCh  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push 4  +
lea eax [ebp+arg_10] +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_C]  +
push 2Bh  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call TraceMessage  +
add esp 20h +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
push 454h  +
xor edi edi +
push edi  +
push esi  +
call memset  +
add esp 0Ch +
xor eax eax +
inc eax  +
or dword ptr [esi+38h] 0FFFFFFFFh +
mov [esi+10h] edi +
mov [esi+14h] edi +
mov [esi+18h] edi +
mov [esi+1Ch] edi +
mov [esi+24h] edi +
mov [esi+28h] edi +
mov [esi+30h] edi +
mov [esi+2Ch] edi +
mov [esi+34h] edi +
pop edi  +
mov [esi] eax +
mov [esi+4] eax +
mov [esi+0Ch] eax +
mov [esi+20h] eax +
mov dword ptr [esi+40h] 19h +
mov dword ptr [esi+3Ch] 2 +
pop esi  +
pop ebp  +
retn 4  +
***
call ShellExecuteA  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax 4008h +
call __alloca_probe  +
mov eax dword_1030118 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push ebx  +
push esi  +
push edi  +
mov [ebp+hWnd] eax +
xor eax eax +
mov esi 1FFEh +
push esi  +
mov [ebp+Text] ax +
xor edi edi +
lea eax [ebp-4002h] +
push edi  +
push eax  +
call memset  +
xor eax eax +
push esi  +
mov [ebp+Caption] ax +
lea eax [ebp-2002h] +
push edi  +
push eax  +
call memset  +
add esp 18h +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_10063DE  +
test byte ptr [eax+1Ch] 4 +
jz loc_10063DE  +
push offset dword_1001A14  +
push 0Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10054B7  +
mov esi ds:GetModuleHandleW +
mov ebx 1000h +
push ebx  +
lea eax [ebp+Text] +
push eax  +
push [ebp+uID]  +
push edi  +
call esi  +
mov edi ds:LoadStringW +
push eax  +
call edi  +
test eax eax +
jnz loc_100642D  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_1006428  +
test byte ptr [eax+1Ch] 1 +
jz loc_1006428  +
push offset dword_1001A14  +
push 0Dh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10054B7  +
or eax 0FFFFFFFFh +
jmp loc_100647F  +
push ebx  +
lea eax [ebp+Caption] +
push eax  +
push [ebp+arg_8]  +
push 0  +
call esi  +
push eax  +
call edi  +
test eax eax +
jnz loc_100645E  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_1006428  +
test byte ptr [eax+1Ch] 1 +
jz loc_1006428  +
push offset dword_1001A14  +
push 0Eh  +
jmp loc_100641D  +
mov eax [ebp+arg_C] +
or eax [ebp+arg_10] +
push eax  +
lea eax [ebp+Caption] +
push eax  +
lea eax [ebp+Text] +
push eax  +
push [ebp+hWnd]  +
call ds:MessageBoxW  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_101BC5D  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 10h  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+uID]  +
push [ebp+arg_0]  +
call sub_100635D  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+arg_8]  +
push [ebp+uID]  +
push [ebp+arg_0]  +
call sub_1006495  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
mov eax esi +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_10064E2  +
sub eax edx +
sar eax 1 +
push 0  +
pop ecx  +
jz loc_100650A  +
push 22h  +
pop edx  +
cmp dx [esi+ecx*2] +
jnz loc_1006505  +
push 27h  +
pop edx  +
mov [esi+ecx*2] dx +
inc ecx  +
cmp ecx eax +
jb loc_10064F5  +
xor eax eax +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+lpMem]  +
call sub_101D57D  +
cmp [ebp+lpMem] 0 +
jz loc_100653B  +
push [ebp+lpMem]  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push esi  +
call ds:GetTickCount  +
xor esi esi +
mov [ebp+var_8] eax +
cmp Destination esi +
jnz loc_100669A  +
push edi  +
mov edi offset aLocalEa35c8acB +
push edi  +
push 1  +
push 1  +
push esi  +
mov esi ds:CreateEventW +
jmp loc_10065EE  +
call ds:GetLastError  +
test eax eax +
jz loc_100663F  +
cmp eax 0B7h +
jnz loc_1006685  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_10065B4  +
test byte ptr [eax+1Ch] 4 +
jz loc_10065B4  +
push offset dword_1001A14  +
push 0Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10054B7  +
cmp [ebp+arg_C] 0 +
jz loc_1006665  +
call ds:GetTickCount  +
sub eax [ebp+var_8] +
cmp eax [ebp+arg_C] +
jnb loc_1006665  +
cmp [ebp+hObject] 0 +
jz loc_10065DF  +
push [ebp+hObject]  +
call ds:CloseHandle  +
push 64h  +
call ds:Sleep  +
push edi  +
push 1  +
push 1  +
push 0  +
call esi  +
mov [ebp+hObject] eax +
test eax eax +
jnz loc_1006577  +
call ds:GetLastError  +
mov esi eax +
test esi esi +
jnz loc_1006608  +
mov esi 54Fh +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_100662D  +
test byte ptr [eax+1Ch] 1 +
jz loc_100662D  +
push esi  +
push offset dword_1001A14  +
push 0Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10062BE  +
test esi esi +
jle loc_100668A  +
and esi 0FFFFh +
or esi 80070000h +
jmp loc_100668A  +
cmp [ebp+arg_8] 0 +
jz loc_100664A  +
call sub_1014899  +
push 0  +
push [ebp+hObject]  +
push offset Destination  +
call ds:InterlockedCompareExchange  +
test eax eax +
jnz loc_1006661  +
and [ebp+hObject] eax +
xor esi esi +
jmp loc_100668A  +
xor eax eax +
cmp [ebp+arg_4] eax +
jz loc_100667E  +
mov ecx [ebp+arg_0] +
cmp [ecx+4] eax +
jz loc_100667E  +
push 6Ah  +
push 69h  +
push eax  +
call sub_10064B6  +
mov esi 800700B7h +
jmp loc_100668A  +
mov esi 80004005h +
cmp [ebp+hObject] 0 +
pop edi  +
jz loc_100669A  +
push [ebp+hObject]  +
call ds:CloseHandle  +
mov eax esi +
pop esi  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push 248h  +
push 8  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov esi eax +
test esi esi +
jnz loc_10066CD  +
mov eax 8007000Eh +
jmp loc_10066DA  +
push esi  +
call sub_101D563  +
mov eax [ebp+arg_0] +
mov [eax] esi +
xor eax eax +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_4] +
xor eax eax +
test edx edx +
jz loc_10066FA  +
cmp edx 7FFFFFFFh +
jbe loc_10066FF  +
mov eax 80070057h +
test eax eax +
jl loc_1006715  +
mov eax [ebp+arg_8] +
mov ecx [ebp+arg_0] +
push 7FFFFFFEh  +
push 0  +
call sub_100BDBF  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_4] +
shr edx 1 +
push 0  +
pop eax  +
jz loc_1006735  +
cmp edx 7FFFFFFFh +
jbe loc_100673A  +
mov eax 80070057h +
test eax eax +
jl loc_1006750  +
mov eax [ebp+arg_8] +
mov ecx [ebp+arg_0] +
push 7FFFFFFEh  +
push 0  +
call sub_100BDBF  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_4] +
shr edx 1 +
push 0  +
pop eax  +
mov ecx 80070057h +
jz loc_1006775  +
cmp edx 7FFFFFFFh +
jbe loc_1006777  +
mov eax ecx +
test eax eax +
jl loc_10067A1  +
mov eax [ebp+arg_C] +
shr eax 1 +
cmp eax 7FFFFFFEh +
jbe loc_1006793  +
mov edx [ebp+arg_0] +
mov eax ecx +
xor ecx ecx +
mov [edx] cx +
jmp loc_10067A1  +
mov ecx [ebp+arg_0] +
push eax  +
mov eax [ebp+arg_8] +
push 0  +
call sub_100BDBF  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
shr ecx 1 +
push 0  +
pop eax  +
jz loc_10067C1  +
cmp ecx 7FFFFFFFh +
jbe loc_10067C6  +
mov eax 80070057h +
test eax eax +
jl loc_10067DF  +
push edi  +
mov edi [ebp+arg_0] +
lea eax [ebp+arg_C] +
push eax  +
push [ebp+arg_8]  +
mov eax ecx +
push 0  +
call sub_1007EE3  +
pop edi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax [ebp+arg_10] +
push ebx  +
mov ebx [ebp+arg_4] +
push esi  +
shr ebx 1 +
xor edx edx +
xor esi esi +
and eax 100h +
push edi  +
mov edi [ebp+arg_0] +
mov ecx 80070057h +
jz loc_1006815  +
cmp edi edx +
jnz loc_100681B  +
cmp ebx edx +
jnz loc_1006823  +
jmp loc_100681B  +
xor esi esi +
cmp ebx edx +
jz loc_1006823  +
cmp ebx 7FFFFFFFh +
jbe loc_1006825  +
mov esi ecx +
cmp esi edx +
jl loc_10068A5  +
mov [ebp+var_4] edi +
mov [ebp+var_8] ebx +
cmp eax edx +
jz loc_100683F  +
cmp [ebp+arg_14] edx +
jnz loc_100683F  +
mov [ebp+arg_14] offset WindowName +
xor esi esi +
test [ebp+arg_10] 0FFFFE000h +
jz loc_10068AC  +
mov esi ecx +
cmp ebx edx +
jz loc_1006855  +
xor eax eax +
mov [edi] ax +
test [ebp+arg_10] 1C00h +
jz loc_1006878  +
cmp [ebp+arg_4] 0 +
jz loc_1006878  +
push [ebp+arg_10]  +
lea eax [ebp+var_4] +
push eax  +
push [ebp+arg_4]  +
lea ebx [ebp+var_8] +
xor ecx ecx +
call sub_1007F5D  +
test esi esi +
jge loc_1006884  +
cmp esi 8007007Ah +
jnz loc_10068A5  +
mov eax [ebp+arg_8] +
test eax eax +
jz loc_1006890  +
mov ecx [ebp+var_4] +
mov [eax] ecx +
mov eax [ebp+arg_C] +
test eax eax +
jz loc_10068A5  +
mov ecx [ebp+arg_4] +
mov edx [ebp+var_8] +
and ecx 1 +
lea ecx [ecx+edx*2] +
mov [eax] ecx +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn   +
cmp ebx edx +
jnz loc_10068C5  +
mov eax [ebp+arg_14] +
cmp [eax] dx +
jz loc_1006884  +
mov esi edi +
neg esi  +
sbb esi esi +
and esi 23h +
add esi ecx +
jmp loc_1006855  +
lea eax [ebp+arg_18] +
push eax  +
push [ebp+arg_14]  +
lea eax [ebp+var_8] +
push eax  +
mov eax ebx +
mov [ebp+var_8] edx +
call sub_1007EE3  +
mov esi eax +
mov eax [ebp+var_8] +
sub ebx eax +
lea edx [edi+eax*2] +
mov [ebp+var_4] edx +
mov [ebp+var_8] ebx +
test esi esi +
jl loc_1006855  +
mov eax [ebp+arg_10] +
test eax 200h +
jz loc_1006884  +
mov ecx [ebp+arg_4] +
and ecx 1 +
lea ecx [ecx+ebx*2] +
cmp ecx 2 +
jbe loc_1006884  +
add ecx 0FFFFFFFEh +
push ecx  +
and eax 0FFh +
push eax  +
add edx 2 +
push edx  +
call memset  +
add esp 0Ch +
jmp loc_1006884  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 468h +
mov eax dword_1030118 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
lea eax [ebp+var_458] +
push eax  +
mov [ebp+var_468] ebx +
mov [ebp+var_464] esi +
call sub_10062EA  +
mov eax [ebp+arg_8] +
xor edi edi +
lea ecx [eax+eax] +
mov [ebp+var_45C] esi +
mov [ebp+var_460] ecx +
cmp eax edi +
jz loc_1006981  +
xor eax eax +
mov [esi] ax +
mov eax [ebx] +
mov esi offset aWsD +
cmp [ebp+var_458] eax +
jz loc_10069BD  +
push eax  +
push offset aSc  +
push esi  +
push edi  +
lea eax [ebp+var_460] +
push eax  +
lea eax [ebp+var_45C] +
push eax  +
push ecx  +
push [ebp+var_464]  +
call sub_10067E6  +
add esp 20h +
cmp eax edi +
jl loc_1006D7B  +
mov eax [ebx+4] +
cmp [ebp+var_454] eax +
jz loc_10069FA  +
push eax  +
push offset aGui  +
push esi  +
push edi  +
lea eax [ebp+var_460] +
push eax  +
lea eax [ebp+var_45C] +
push eax  +
push [ebp+var_460]  +
push [ebp+var_45C]  +
call sub_10067E6  +
add esp 20h +
cmp eax edi +
jl loc_1006D7B  +
mov eax [ebx+14h] +
cmp [ebp+var_444] eax +
jz loc_1006A37  +
push eax  +
push offset aNoarc  +
push esi  +
push edi  +
lea eax [ebp+var_460] +
push eax  +
lea eax [ebp+var_45C] +
push eax  +
push [ebp+var_460]  +
push [ebp+var_45C]  +
call sub_10067E6  +
add esp 20h +
cmp eax edi +
jl loc_1006D7B  +
mov eax [ebx+8] +
cmp [ebp+var_450] eax +
jz loc_1006A74  +
push eax  +
push offset aSketch  +
push esi  +
push edi  +
lea eax [ebp+var_460] +
push eax  +
lea eax [ebp+var_45C] +
push eax  +
push [ebp+var_460]  +
push [ebp+var_45C]  +
call sub_10067E6  +
add esp 20h +
cmp eax edi +
jl loc_1006D7B  +
mov eax [ebx+0Ch] +
cmp [ebp+var_44C] eax +
jz loc_1006AB1  +
push eax  +
push offset aSlides  +
push esi  +
push edi  +
lea eax [ebp+var_460] +
push eax  +
lea eax [ebp+var_45C] +
push eax  +
push [ebp+var_460]  +
push [ebp+var_45C]  +
call sub_10067E6  +
add esp 20h +
cmp eax edi +
jl loc_1006D7B  +
mov eax [ebx+34h] +
cmp [ebp+var_424] eax +
jz loc_1006AEE  +
push eax  +
push offset aExitonsave  +
push esi  +
push edi  +
lea eax [ebp+var_460] +
push eax  +
lea eax [ebp+var_45C] +
push eax  +
push [ebp+var_460]  +
push [ebp+var_45C]  +
call sub_10067E6  +
add esp 20h +
cmp eax edi +
jl loc_1006D7B  +
mov eax [ebx+10h] +
cmp [ebp+var_448] eax +
jz loc_1006B2B  +
push eax  +
push offset aMultiok  +
push esi  +
push edi  +
lea eax [ebp+var_460] +
push eax  +
lea eax [ebp+var_45C] +
push eax  +
push [ebp+var_460]  +
push [ebp+var_45C]  +
call sub_10067E6  +
add esp 20h +
cmp eax edi +
jl loc_1006D7B  +
mov eax [ebx+18h] +
cmp [ebp+var_440] eax +
jz loc_1006B68  +
push eax  +
push offset aArcetl  +
push esi  +
push edi  +
lea eax [ebp+var_460] +
push eax  +
lea eax [ebp+var_45C] +
push eax  +
push [ebp+var_460]  +
push [ebp+var_45C]  +
call sub_10067E6  +
add esp 20h +
cmp eax edi +
jl loc_1006D7B  +
mov eax [ebx+1Ch] +
cmp [ebp+var_43C] eax +
jz loc_1006BA5  +
push eax  +
push offset aArcxml  +
push esi  +
push edi  +
lea eax [ebp+var_460] +
push eax  +
lea eax [ebp+var_45C] +
push eax  +
push [ebp+var_460]  +
push [ebp+var_45C]  +
call sub_10067E6  +
add esp 20h +
cmp eax edi +
jl loc_1006D7B  +
mov eax [ebx+20h] +
cmp [ebp+var_438] eax +
jz loc_1006BE2  +
push eax  +
push offset aArcmht  +
push esi  +
push edi  +
lea eax [ebp+var_460] +
push eax  +
lea eax [ebp+var_45C] +
push eax  +
push [ebp+var_460]  +
push [ebp+var_45C]  +
call sub_10067E6  +
add esp 20h +
cmp eax edi +
jl loc_1006D7B  +
mov eax [ebx+38h] +
cmp [ebp+var_420] eax +
jz loc_1006C1F  +
push eax  +
push offset aRecordpid  +
push esi  +
push edi  +
lea eax [ebp+var_460] +
push eax  +
lea eax [ebp+var_45C] +
push eax  +
push [ebp+var_460]  +
push [ebp+var_45C]  +
call sub_10067E6  +
add esp 20h +
cmp eax edi +
jl loc_1006D7B  +
mov eax [ebx+3Ch] +
cmp [ebp+var_41C] eax +
jz loc_1006C5C  +
push eax  +
push offset aMaxlogsize  +
push esi  +
push edi  +
lea eax [ebp+var_460] +
push eax  +
lea eax [ebp+var_45C] +
push eax  +
push [ebp+var_460]  +
push [ebp+var_45C]  +
call sub_10067E6  +
add esp 20h +
cmp eax edi +
jl loc_1006D7B  +
mov eax [ebx+40h] +
cmp [ebp+var_418] eax +
jz loc_1006C99  +
push eax  +
push offset aMaxsc  +
push esi  +
push edi  +
lea eax [ebp+var_460] +
push eax  +
lea eax [ebp+var_45C] +
push eax  +
push [ebp+var_460]  +
push [ebp+var_45C]  +
call sub_10067E6  +
add esp 20h +
cmp eax edi +
jl loc_1006D7B  +
add ebx 44h +
mov ecx ebx +
lea eax [ebp+var_414] +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_1006CCA  +
cmp dx di +
jz loc_1006CC6  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_1006CCA  +
add eax 4 +
add ecx 4 +
cmp dx di +
jnz loc_1006CA4  +
xor eax eax +
jmp loc_1006CCF  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
mov esi offset aWsWs +
cmp eax edi +
jz loc_1006D06  +
push ebx  +
push offset aOutput  +
push esi  +
push edi  +
lea eax [ebp+var_460] +
push eax  +
lea eax [ebp+var_45C] +
push eax  +
push [ebp+var_460]  +
push [ebp+var_45C]  +
call sub_10067E6  +
add esp 20h +
cmp eax edi +
jl loc_1006D7B  +
mov ebx [ebp+var_468] +
add ebx 24Ch +
mov ecx ebx +
lea eax [ebp+var_20C] +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_1006D40  +
cmp dx di +
jz loc_1006D3C  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_1006D40  +
add eax 4 +
add ecx 4 +
cmp dx di +
jnz loc_1006D1A  +
xor eax eax +
jmp loc_1006D45  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
cmp eax edi +
jz loc_1006D77  +
push ebx  +
push offset aUisavedir  +
push esi  +
push edi  +
lea eax [ebp+var_460] +
push eax  +
lea eax [ebp+var_45C] +
push eax  +
push [ebp+var_460]  +
push [ebp+var_45C]  +
call sub_10067E6  +
add esp 20h +
cmp eax edi +
jl loc_1006D7B  +
xor eax eax +
jmp loc_1006D8B  +
cmp [ebp+arg_8] edi +
jz loc_1006D8B  +
mov edx [ebp+var_464] +
xor ecx ecx +
mov [edx] cx +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_101BC5D  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+lpMem] +
push edi  +
mov edi ds:GetProcessHeap +
add esi esi +
lea ebx [esi+2] +
push ebx  +
push 8  +
call edi  +
push eax  +
call ds:HeapAlloc  +
mov [ebp+lpMem] eax +
test eax eax +
jnz loc_1006DD7  +
mov eax [ebp+arg_0] +
and dword ptr [eax] 0 +
mov eax 8007000Eh +
jmp loc_1006E07  +
push esi  +
push [ebp+arg_4]  +
push ebx  +
push eax  +
call sub_1006759  +
mov esi eax +
mov eax [ebp+arg_0] +
test esi esi +
jge loc_1006E00  +
push [ebp+lpMem]  +
and dword ptr [eax] 0 +
push 0  +
call edi  +
push eax  +
call ds:HeapFree  +
mov eax esi +
jmp loc_1006E07  +
mov ecx [ebp+lpMem] +
mov [eax] ecx +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20Ch +
mov eax dword_1030118 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push ebx  +
push esi  +
push eax  +
push 208h  +
lea eax [ebp+FileName] +
push eax  +
or esi 0FFFFFFFFh +
xor bl bl +
call sub_100671E  +
test eax eax +
jl loc_1006E83  +
lea eax [ebp+FileName] +
push eax  +
call ds:PathRemoveFileSpecW  +
test eax eax +
jz loc_1006E83  +
push 0  +
push 2000000h  +
push 3  +
push 0  +
push 3  +
push [ebp+dwDesiredAccess]  +
lea eax [ebp+FileName] +
push eax  +
call ds:CreateFileW  +
mov esi eax +
cmp esi 0FFFFFFFFh +
jz loc_1006E7F  +
inc bl  +
test esi esi +
jz loc_1006E8A  +
push esi  +
call ds:CloseHandle  +
mov ecx [ebp+var_4] +
pop esi  +
mov al bl +
xor ecx ebp +
pop ebx  +
call sub_101BC5D  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax 6008h +
call __alloca_probe  +
mov eax dword_1030118 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push ebx  +
push esi  +
push edi  +
mov [ebp+hWnd] eax +
xor eax eax +
mov esi 1FFEh +
push esi  +
mov word ptr [ebp+Buffer] ax +
xor edi edi +
lea eax [ebp-2002h] +
push edi  +
push eax  +
call memset  +
xor eax eax +
push esi  +
mov word ptr [ebp+String] ax +
lea eax [ebp+String+2] +
push edi  +
push eax  +
call memset  +
xor eax eax +
push esi  +
mov [ebp+var_4004] ax +
lea eax [ebp-4002h] +
push edi  +
push eax  +
call memset  +
mov esi ds:GetModuleHandleW +
add esp 24h +
mov ebx 1000h +
push ebx  +
lea eax [ebp+Buffer] +
push eax  +
push 66h  +
push edi  +
call esi  +
mov edi ds:LoadStringW +
push eax  +
call edi  +
test eax eax +
jnz loc_1006F5D  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_1006FE0  +
test byte ptr [eax+1Ch] 1 +
jz loc_1006FE0  +
push offset dword_1001A14  +
push 15h  +
jmp loc_1006F9A  +
cmp [ebp+uID] 66h +
jnz loc_1006F6B  +
lea eax [ebp+Buffer] +
jmp loc_1006FD3  +
push ebx  +
lea eax [ebp+var_4004] +
push eax  +
push [ebp+uID]  +
push 0  +
call esi  +
push eax  +
call edi  +
test eax eax +
jnz loc_1006FA7  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_1006FE0  +
test byte ptr [eax+1Ch] 1 +
jz loc_1006FE0  +
push offset dword_1001A14  +
push 16h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10054B7  +
jmp loc_1006FE0  +
lea eax [ebp+Buffer] +
push eax  +
lea eax [ebp+var_4004] +
push eax  +
lea eax [ebp+String] +
push 2000h  +
push eax  +
call sub_10067AA  +
add esp 10h +
test eax eax +
jl loc_1006FE0  +
lea eax [ebp+String] +
push eax  +
push [ebp+hWnd]  +
call ds:SetWindowTextW  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_101BC5D  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 41Ch +
mov eax dword_1030118 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
mov ebx [ebp+arg_0] +
push edi  +
push ebx  +
mov edi 104h +
push edi  +
lea eax [ebp+pszPath] +
push eax  +
mov [ebp+var_418] 5 +
call sub_10066E4  +
test eax eax +
jge loc_1007068  +
mov ecx off_1030000 +
cmp ecx offset off_1030000 +
jz loc_100722D  +
test byte ptr [ecx+1Ch] 1 +
jz loc_100722D  +
movzx eax ax +
push eax  +
push offset dword_1001A14  +
push 0Fh  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10062BE  +
jmp loc_100722D  +
lea eax [ebp+pszPath] +
push eax  +
call ds:PathRemoveFileSpecW  +
lea eax [ebp+pszPath] +
push eax  +
call ds:PathFileExistsW  +
test eax eax +
jnz loc_10070B7  +
mov eax off_1030000 +
xor ebx ebx +
inc ebx  +
cmp eax offset off_1030000 +
jz loc_10070AC  +
test [eax+1Ch] bl +
jz loc_10070AC  +
push offset dword_1001A14  +
push 10h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10054B7  +
mov [ebp+var_418] ebx +
jmp loc_100722D  +
push 40000000h  +
push ebx  +
call sub_1006E13  +
test al al +
jnz loc_10070F9  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_10070EA  +
test byte ptr [eax+1Ch] 1 +
jz loc_10070EA  +
push offset dword_1001A14  +
push 11h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10054B7  +
mov [ebp+var_418] 2 +
jmp loc_100722D  +
push esi  +
push ebx  +
call ds:PathFindExtensionW  +
mov [ebp+var_41C] eax +
test eax eax +
jz loc_10071FE  +
mov esi ds:_wcsicmp +
push offset a_xml  +
push eax  +
call esi  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1007160  +
push offset a_mht  +
push [ebp+var_41C]  +
call esi  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1007160  +
push offset a_etl  +
push [ebp+var_41C]  +
call esi  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1007160  +
push offset a_zip  +
push [ebp+var_41C]  +
call esi  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_10071FE  +
push ebx  +
call ds:PathFindFileNameW  +
push eax  +
push edi  +
lea eax [ebp+var_414] +
push eax  +
call sub_10066E4  +
test eax eax +
jge loc_10071AD  +
mov ecx off_1030000 +
cmp ecx offset off_1030000 +
jz loc_100722C  +
test byte ptr [ecx+1Ch] 1 +
jz loc_100722C  +
movzx eax ax +
push eax  +
push offset dword_1001A14  +
push 13h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10062BE  +
jmp loc_100722C  +
lea eax [ebp+var_414] +
push eax  +
lea eax [ebp+pszPath] +
push eax  +
call ds:SHELL32_171  +
test eax eax +
jz loc_10071F5  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_10071E9  +
test byte ptr [eax+1Ch] 1 +
jz loc_10071E9  +
push offset dword_1001A14  +
push 14h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10054B7  +
mov [ebp+var_418] 4 +
jmp loc_100722C  +
and [ebp+var_418] 0 +
jmp loc_100722C  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_1007222  +
test byte ptr [eax+1Ch] 1 +
jz loc_1007222  +
push offset dword_1001A14  +
push 12h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10054B7  +
mov [ebp+var_418] 3 +
pop esi  +
mov ecx [ebp+var_4] +
mov eax [ebp+var_418] +
pop edi  +
xor ecx ebp +
pop ebx  +
call sub_101BC5D  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
mov eax [esi+40h] +
cmp eax 1 +
push edi  +
jl loc_10074B7  +
cmp eax 64h +
jg loc_10074B7  +
mov eax [esi+3Ch] +
xor edi edi +
cmp eax edi +
jle loc_10074AC  +
cmp eax 0Ah +
jg loc_10074AC  +
mov eax [esi+38h] +
cmp eax edi +
jnz loc_1007297  +
cmp [esi+4] edi +
jz loc_10074C8  +
push 6Ah  +
push 73h  +
jmp loc_10074C2  +
cmp [esi+2Ch] edi +
jz loc_10072C9  +
push eax  +
push edi  +
push 100000h  +
call ds:OpenProcess  +
cmp eax edi +
jnz loc_10072C2  +
cmp [esi+4] edi +
jz loc_10074C8  +
push 6Ah  +
push 0B3h  +
jmp loc_10074C2  +
push eax  +
call ds:CloseHandle  +
cmp [esi+34h] edi +
jz loc_10072E8  +
xor eax eax +
cmp ax [esi+44h] +
jnz loc_10072E8  +
cmp [esi+4] edi +
jz loc_10074C8  +
push 6Ah  +
push 71h  +
jmp loc_10074C2  +
lea eax [esi+24Ch] +
xor ecx ecx +
cmp cx [eax] +
jz loc_1007359  +
push eax  +
call ds:GetFileAttributesW  +
cmp eax 0FFFFFFFFh +
jnz loc_1007339  +
cmp [esi+4] edi +
jz loc_1007313  +
push 6Ah  +
push 0B9h  +
push edi  +
call sub_10064B6  +
call ds:GetLastError  +
cmp eax edi +
jnz loc_1007324  +
mov eax 54Fh +
cmp eax edi +
jle loc_10074CD  +
and eax 0FFFFh +
or eax 80070000h +
jmp loc_10074CD  +
test al 10h +
jnz loc_1007359  +
cmp [esi+4] edi +
jz loc_100734F  +
push 6Ah  +
push 0B9h  +
push edi  +
call sub_10064B6  +
mov eax 8007010Bh +
jmp loc_10074CD  +
lea ebx [esi+44h] +
xor eax eax +
cmp ax [ebx] +
jz loc_10074A8  +
push ebx  +
call sub_1006FF6  +
cmp eax 2 +
jnz loc_100738E  +
cmp [esi+4] edi +
jz loc_1007384  +
push 6Ah  +
push 0B0h  +
push edi  +
call sub_10064B6  +
mov eax 80070005h +
jmp loc_10074CD  +
cmp eax edi +
jz loc_10073AB  +
cmp [esi+4] edi +
jz loc_10073A1  +
push 6Ah  +
push 71h  +
push edi  +
call sub_10064B6  +
mov eax 80004005h +
jmp loc_10074CD  +
push ebx  +
call ds:PathFindExtensionW  +
mov [ebp+arg_0] eax +
cmp [esi+14h] edi +
jz loc_1007449  +
cmp [esi+18h] edi +
jnz loc_1007437  +
cmp [esi+24h] edi +
jnz loc_1007437  +
cmp [esi+1Ch] edi +
jnz loc_1007437  +
mov ebx ds:_wcsicmp +
push offset a_xml  +
push eax  +
call ebx  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_100741A  +
push offset a_etl  +
push [ebp+arg_0]  +
call ebx  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_100741A  +
push offset a_mht  +
push [ebp+arg_0]  +
call ebx  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_10074A8  +
cmp [esi+4] edi +
jz loc_10074C8  +
push 6Ah  +
push 0B6h  +
jmp loc_10074C2  +
cmp [esi] edi +
jz loc_10074A8  +
cmp [esi+4] edi +
jz loc_10074C8  +
push 6Ah  +
push 0B5h  +
jmp loc_10074C2  +
cmp [esi+4] edi +
jz loc_10074C8  +
push 6Ah  +
push 0B4h  +
jmp loc_10074C2  +
mov ebx ds:_wcsicmp +
push offset a_xml  +
push eax  +
call ebx  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_100749A  +
push offset a_mht  +
push [ebp+arg_0]  +
call ebx  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_100749A  +
push offset a_etl  +
push [ebp+arg_0]  +
call ebx  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_100749A  +
cmp [esi+18h] edi +
jnz loc_10074A8  +
cmp [esi+1Ch] edi +
jnz loc_10074A8  +
cmp [esi+20h] edi +
jnz loc_10074A8  +
cmp [esi+4] edi +
jz loc_10074C8  +
push 6Ah  +
push 0B8h  +
jmp loc_10074C2  +
cmp [esi+4] edi +
jz loc_10074C8  +
push 6Ah  +
push 0B7h  +
jmp loc_10074C2  +
xor eax eax +
jmp loc_10074CD  +
cmp [esi+4] edi +
jz loc_10074C8  +
push 6Ah  +
push 65h  +
jmp loc_10074C2  +
xor edi edi +
cmp [esi+4] edi +
jz loc_10074C8  +
push 6Ah  +
push 72h  +
push edi  +
call sub_10064B6  +
mov eax 80070057h +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
push edi  +
mov esi ecx +
push 3Ch  +
xor eax eax +
inc eax  +
lea edi [esi+3C4Ch] +
push 0  +
push edi  +
mov [esi+1Ch] eax +
mov [esi+20h] eax +
call memset  +
add esp 0Ch +
xor eax eax +
mov [edi] eax +
inc eax  +
add edi 14h +
cmp eax 3 +
jl loc_10074FD  +
push 6  +
pop ecx  +
lea edi [esi+3C88h] +
xor eax eax +
stos   +
pop edi  +
pop esi  +
retn   +
***
inc dword ptr [ecx+20h]  +
mov eax [ecx+20h] +
mov edx [ecx] +
cmp eax [edx+40h] +
jbe locret_1007531  +
mov dword ptr [ecx+20h] 1 +
retn   +
***
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
mov eax [edx+8] +
push ebx  +
mov ebx [edx+0Ch] +
push esi  +
mov esi [edx+18h] +
push edi  +
mov edi [ebp+arg_4] +
test edi edi +
jz loc_1007561  +
mov dword ptr [edi] 81h +
cmp dword ptr [edx+0B8h] 0 +
jz loc_10075E4  +
mov edx [edx+0A4h] +
mov edi edx +
sub edi 201h +
jz loc_100758F  +
sub edi 3 +
jz loc_100758B  +
sub edi 3 +
jnz loc_10075E4  +
mov edi 2BDh +
jmp loc_1007592  +
push 7Bh  +
jmp loc_1007591  +
push 7Ah  +
pop edi  +
cmp edx [ecx+13CA8h] +
jnz loc_10075E4  +
mov edx [ecx+13CACh] +
test edx edx +
jz loc_10075E4  +
sub esi edx +
cmp esi [ecx+1C48h] +
ja loc_10075E4  +
sub eax [ecx+13CB4h] +
cdq   +
xor eax edx +
sub eax edx +
cmp eax [ecx+1C40h] +
jg loc_10075E4  +
mov eax ebx +
sub eax [ecx+13CB8h] +
cdq   +
xor eax edx +
sub eax edx +
cmp eax [ecx+1C44h] +
jg loc_10075E4  +
mov eax [ebp+arg_4] +
test eax eax +
jz loc_10075DF  +
mov [eax] edi +
xor eax eax +
inc eax  +
jmp loc_10075E6  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax+80h] +
sub eax [ecx+33CBCh] +
neg eax  +
sbb eax eax +
inc eax  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 504h +
push ebx  +
push esi  +
push edi  +
xor ebx ebx +
push 247h  +
lea eax [ebp+Buffer+1] +
push ebx  +
push eax  +
mov byte ptr [ebp+Buffer] bl +
call memset  +
xor eax eax +
mov [ebp+var_24] ebx +
lea edi [ebp+lpBaseAddress] +
stos   +
stos   +
stos   +
stos   +
push 294h  +
stos   +
lea eax [ebp+var_2B8] +
push ebx  +
push eax  +
mov [ebp+var_C] ebx +
mov [ebp+nSize] ebx +
mov [ebp+var_8] 80004005h +
mov [ebp+var_2BC] ebx +
call memset  +
add esp 18h +
lea eax [ebp+var_C] +
push eax  +
push 18h  +
lea eax [ebp+var_24] +
push eax  +
push ebx  +
push [ebp+hProcess]  +
call ds:NtQueryInformationProcess  +
cmp eax ebx +
jl loc_10078B3  +
cmp [ebp+var_C] 18h +
jnz loc_10078B3  +
cmp [ebp+lpBaseAddress] ebx +
jz loc_10078B3  +
mov esi ds:ReadProcessMemory +
lea eax [ebp+nSize] +
push eax  +
mov edi 248h +
push edi  +
lea eax [ebp+Buffer] +
push eax  +
push [ebp+lpBaseAddress]  +
push [ebp+hProcess]  +
call esi  +
test eax eax +
jnz loc_10076E9  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_10078DA  +
test byte ptr [eax+1Ch] 1 +
jz loc_10078DA  +
push offset dword_1001BD0  +
push 1Dh  +
jmp loc_1007868  +
cmp [ebp+nSize] edi +
jz loc_1007714  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_10078DA  +
test byte ptr [eax+1Ch] 1 +
jz loc_10078DA  +
push offset dword_1001BD0  +
push 1Eh  +
jmp loc_1007868  +
lea eax [ebp+nSize] +
push eax  +
mov edi 298h +
push edi  +
lea eax [ebp+var_2BC] +
push eax  +
push [ebp+var_4F4]  +
push [ebp+hProcess]  +
call esi  +
test eax eax +
jnz loc_100775A  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_10078DA  +
test byte ptr [eax+1Ch] 1 +
jz loc_10078DA  +
push offset dword_1001BD0  +
push 1Fh  +
jmp loc_1007868  +
cmp [ebp+nSize] edi +
jz loc_1007785  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_10078DA  +
test byte ptr [eax+1Ch] 1 +
jz loc_10078DA  +
push offset dword_1001BD0  +
push 20h  +
jmp loc_1007868  +
mov eax [ebp+arg_8] +
movzx ecx [ebp+var_27C] +
lea eax [eax+eax-2] +
mov [ebp+nSize] eax +
cmp eax ecx +
jb loc_100779D  +
mov [ebp+nSize] ecx +
mov edi [ebp+lpBuffer] +
push ebx  +
push [ebp+nSize]  +
push edi  +
push [ebp+var_278]  +
push [ebp+hProcess]  +
call esi  +
test eax eax +
jnz loc_10077DA  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_10078DA  +
test byte ptr [eax+1Ch] 1 +
jz loc_10078DA  +
push offset dword_1001BD0  +
push 21h  +
jmp loc_1007868  +
mov eax [ebp+nSize] +
shr eax 1 +
xor ecx ecx +
mov [edi+eax*2] cx +
mov eax [ebp+arg_10] +
movzx ecx [ebp+var_284] +
lea eax [eax+eax-2] +
mov [ebp+nSize] eax +
cmp eax ecx +
jb loc_10077FD  +
mov [ebp+nSize] ecx +
mov edi [ebp+arg_C] +
push ebx  +
push [ebp+nSize]  +
push edi  +
push [ebp+var_280]  +
push [ebp+hProcess]  +
call esi  +
test eax eax +
jnz loc_1007837  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_10078DA  +
test byte ptr [eax+1Ch] 1 +
jz loc_10078DA  +
push offset dword_1001BD0  +
push 22h  +
jmp loc_1007868  +
mov eax [ebp+nSize] +
push [ebp+arg_10]  +
shr eax 1 +
xor ecx ecx +
push edi  +
mov [edi+eax*2] cx +
call sub_10064D4  +
test eax eax +
jge loc_1007875  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_10078DA  +
test byte ptr [eax+1Ch] 1 +
jz loc_10078DA  +
push offset dword_1001BD0  +
push 23h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10054B7  +
jmp loc_10078DA  +
push [ebp+arg_8]  +
mov esi [ebp+lpBuffer] +
push esi  +
call sub_10064D4  +
test eax eax +
jge loc_10078AE  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_10078A9  +
test byte ptr [eax+1Ch] 1 +
jz loc_10078A9  +
push offset dword_1001BD0  +
push 24h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10054B7  +
xor eax eax +
mov [esi] ax +
mov [ebp+var_8] ebx +
jmp loc_10078DA  +
mov ecx off_1030000 +
cmp ecx offset off_1030000 +
jz loc_10078DA  +
test byte ptr [ecx+1Ch] 1 +
jz loc_10078DA  +
push eax  +
push offset dword_1001BD0  +
push 1Ch  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10062BE  +
mov eax [ebp+var_8] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
mov ecx [esi+0A4h] +
mov edx 204h +
mov eax 80004005h +
cmp ecx edx +
ja loc_1007978  +
jz loc_100796D  +
cmp ecx 100h +
jb loc_100794C  +
cmp ecx 101h +
jbe loc_100795C  +
cmp ecx 103h +
jbe loc_100794C  +
cmp ecx 105h +
jbe loc_100795C  +
cmp ecx 201h +
jz loc_1007951  +
cmp ecx 202h +
jnz loc_100794C  +
mov eax [ebp+arg_4] +
mov dword ptr [eax] 7Eh +
mov eax [ebp+arg_8] +
mov dword ptr [eax] 1 +
xor eax eax +
pop esi  +
pop ebp  +
retn 0Ch  +
mov eax [ebp+arg_4] +
mov dword ptr [eax] 78h +
jmp loc_1007941  +
mov eax [ebp+arg_4] +
mov dword ptr [eax] 7Ch +
mov eax [ebp+arg_8] +
and dword ptr [eax] 0 +
jmp loc_100794A  +
mov eax [ebp+arg_4] +
mov dword ptr [eax] 79h +
jmp loc_1007941  +
sub ecx 205h +
jz loc_1007938  +
dec ecx  +
dec ecx  +
jz loc_100799E  +
dec ecx  +
jz loc_1007938  +
dec ecx  +
dec ecx  +
jnz loc_100794C  +
mov ecx [ebp+arg_4] +
xor eax eax +
cmp [esi+12h] ax +
setl al  +
add eax 7Fh +
mov [ecx] eax +
jmp loc_1007941  +
mov eax [ebp+arg_4] +
mov dword ptr [eax] 2BCh +
jmp loc_1007941  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0A4h +
and dword ptr [ebp-4] 0 +
push esi  +
push edi  +
call ds:GetTickCount  +
mov ecx [ebp+8] +
sub eax [ecx+18h] +
mov edx [ecx+14h] +
mov esi [ecx+10h] +
mov [ebp+8] edx +
cmp eax 96h +
jb loc_1007A09  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_10079FF  +
test byte ptr [eax+1Ch] 1 +
jz loc_10079FF  +
push offset dword_1001BD0  +
push 2Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10054B7  +
mov edi 80070079h +
jmp loc_1007B4F  +
push ebx  +
push 0Ah  +
pop ecx  +
xor eax eax +
push 78h  +
lea edi [ebp-2Ch] +
push eax  +
stos   +
lea eax [ebp-0A4h] +
push eax  +
call memset  +
add esp 0Ch +
lea eax [ebp-2Ch] +
push eax  +
call sub_101E1F2  +
mov eax dword_1031680 +
or dword ptr [ebp-0Ch] 2 +
mov [ebp-8] eax +
mov eax [ebp+8] +
add eax 0FFFFFFF6h +
push 14h  +
mov [ebp-28h] eax +
pop eax  +
mov [ebp-20h] eax +
mov [ebp-1Ch] eax +
lea eax [ebp-4] +
push eax  +
lea eax [ebp-2Ch] +
push eax  +
push dword_1031684  +
xor ebx ebx +
inc ebx  +
add esi 0FFFFFFF6h +
mov [ebp-2Ch] ebx +
mov [ebp-24h] esi +
call sub_101ECD9  +
mov edi eax +
test edi edi +
jz loc_1007A97  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_1007B36  +
test [eax+1Ch] bl +
jz loc_1007B36  +
push offset dword_1001BD0  +
push 2Dh  +
jmp loc_1007B2B  +
or [ebp-8Ch] ebx +
mov ecx [ebp-4] +
or dword ptr [ebp-50h] 2 +
and dword ptr [ebp-0A4h] 0 +
or [ebp-50h] ebx +
push 8  +
pop eax  +
or [ebp-8Ch] eax +
or dword ptr [ebp-8Ch] 20h +
push 0FFFFFFF0h  +
mov [ebp-4Ch] eax +
mov [ebp-48h] eax +
pop eax  +
mov [ebp-40h] eax +
mov [ebp-44h] eax +
push 2  +
lea eax [ebp-0A4h] +
push eax  +
push dword_1031684  +
mov edx 4B0h +
mov [ebp-0A0h] ecx +
mov [ebp-9Ch] edx +
mov byte ptr [ebp-88h] 0DCh +
mov byte ptr [ebp-87h] 0 +
mov dword ptr [ebp-68h] 3 +
mov [ebp-64h] ecx +
mov [ebp-60h] edx +
call sub_101F19A  +
mov edi eax +
test edi edi +
jz loc_1007B48  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_1007B36  +
test [eax+1Ch] bl +
jz loc_1007B36  +
push offset dword_1001BD0  +
push 2Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10054B7  +
test edi edi +
jle loc_1007B4E  +
and edi 0FFFFh +
or edi 80070000h +
jmp loc_1007B4E  +
and dword ptr [ebp-4] 0 +
xor edi edi +
pop ebx  +
cmp dword ptr [ebp-4] 0 +
jz loc_1007B63  +
push dword ptr [ebp-4]  +
push dword_1031684  +
call sub_101ED19  +
mov eax edi +
pop edi  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ebp+8] 0 +
jz loc_1007B8D  +
push dword ptr [ebp+8]  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
push ebx  +
push esi  +
push edi  +
mov edi ds:GetProcessHeap +
push 1Ch  +
push 8  +
mov ebx ecx +
call edi  +
push eax  +
call ds:HeapAlloc  +
mov esi eax +
test esi esi +
jnz loc_1007BE4  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_1007C47  +
test byte ptr [eax+1Ch] 1 +
jz loc_1007C47  +
push offset dword_1001BD0  +
push 2Fh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10054B7  +
jmp loc_1007C47  +
mov eax [ebp+arg_0] +
mov [esi+10h] eax +
mov eax [ebp+arg_4] +
mov [esi+14h] eax +
call ds:GetTickCount  +
push esi  +
push offset loc_1007B70  +
mov [esi+18h] eax +
push offset loc_10079AE  +
lea eax [ebp+var_4] +
push eax  +
push dword ptr [ebx+1C3Ch]  +
call sub_101CB97  +
test eax eax +
jz loc_1007C4E  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_1007C3B  +
test byte ptr [eax+1Ch] 1 +
jz loc_1007C3B  +
push offset dword_1001BD0  +
push 30h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10054B7  +
push esi  +
push 0  +
call edi  +
push eax  +
call ds:HeapFree  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
push [ebp+var_4]  +
push dword ptr [ebx+1C3Ch]  +
call sub_101CEFE  +
push [ebp+var_4]  +
push dword ptr [ebx+1C3Ch]  +
call sub_101C94E  +
jmp loc_1007C47  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 48h +
push ebx  +
xor ecx ecx +
push esi  +
push edi  +
mov [ebp+piconinfo] ecx +
xor eax eax +
lea edi [ebp-44h] +
stos   +
stos   +
stos   +
stos   +
mov esi 80004005h +
mov [ebp+hDC] ecx +
mov [ebp+var_10] ecx +
mov [ebp+var_C] ecx +
mov [ebp+var_14] ecx +
mov [ebp+var_8] ecx +
call ds:GetDesktopWindow  +
mov ebx [ebp+arg_0] +
lea ecx [ebp+var_10] +
push ecx  +
lea ecx [ebp+hDC] +
push ecx  +
push eax  +
push dword ptr [ebx]  +
call sub_101D4EE  +
test eax eax +
jz loc_1007CEF  +
mov ecx off_1030000 +
cmp ecx offset off_1030000 +
jz loc_1007E4D  +
test byte ptr [ecx+1Ch] 1 +
jz loc_1007E4D  +
push eax  +
push offset dword_1001BD0  +
push 36h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10062BE  +
jmp loc_1007E4D  +
sub esp 10h +
mov edi esp +
lea esi [ebx+28h] +
movs   +
movs   +
movs   +
lea eax [ebp+var_34] +
push eax  +
movs   +
call sub_101D5E4  +
mov esi eax +
lea edi [ebp+var_24] +
movs   +
movs   +
movs   +
movs   +
mov eax [ebp+var_1C] +
sub eax [ebp+var_24] +
mov esi ds:GetLastError +
mov edi offset dword_1001BD0 +
jz loc_1007D97  +
push 1EFF0Ah  +
push 6  +
push 0  +
call ds:CreatePen  +
mov [ebp+var_14] eax +
test eax eax +
jz loc_1007D6F  +
push eax  +
push [ebp+hDC]  +
call ds:SelectObject  +
push 5  +
mov [ebp+var_8] eax +
call ds:GetStockObject  +
push eax  +
push [ebp+hDC]  +
call ds:SelectObject  +
push [ebp+var_18]  +
mov [ebp+var_C] eax +
push [ebp+var_1C]  +
push [ebp+var_20]  +
push [ebp+var_24]  +
push [ebp+hDC]  +
call ds:Rectangle  +
jmp loc_1007D97  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_1007D97  +
test byte ptr [eax+1Ch] 1 +
jz loc_1007D97  +
call esi  +
push eax  +
mov eax off_1030000 +
push edi  +
push 37h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10062BE  +
mov eax [ebx+0Ch] +
test eax eax +
jz loc_1007E22  +
test byte ptr [ebx+8] 1 +
jz loc_1007E22  +
lea ecx [ebp+piconinfo] +
push ecx  +
push eax  +
call ds:GetIconInfo  +
test eax eax +
jz loc_1007DDD  +
mov eax [ebp-44h] +
sub [ebx+10h] eax +
mov eax [ebp-40h] +
push dword ptr [ebp-3Ch]  +
sub [ebx+14h] eax +
call ds:DeleteObject  +
push dword ptr [ebp-38h]  +
call ds:DeleteObject  +
and dword ptr [ebp-3Ch] 0 +
and dword ptr [ebp-38h] 0 +
push dword ptr [ebx+14h]  +
push dword ptr [ebx+10h]  +
call sub_101D644  +
push dword ptr [ebx+0Ch]  +
push edx  +
push eax  +
push [ebp+hDC]  +
call ds:DrawIcon  +
test eax eax +
jnz loc_1007E22  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_1007E22  +
test byte ptr [eax+1Ch] 1 +
jz loc_1007E22  +
call esi  +
push eax  +
mov eax off_1030000 +
push edi  +
push 38h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10062BE  +
and dword ptr [ebx+244h] 0FFFFFFFEh +
xor esi esi +
cmp [ebp+var_8] esi +
jz loc_1007E3C  +
push [ebp+var_8]  +
push [ebp+hDC]  +
call ds:SelectObject  +
cmp [ebp+var_C] esi +
jz loc_1007E4D  +
push [ebp+var_C]  +
push [ebp+hDC]  +
call ds:SelectObject  +
xor edi edi +
cmp [ebp+var_10] edi +
jz loc_1007E60  +
push [ebp+var_10]  +
push [ebp+hDC]  +
call ds:SelectObject  +
cmp [ebp+hDC] edi +
jz loc_1007E6E  +
push [ebp+hDC]  +
call ds:DeleteDC  +
cmp [ebp+var_14] edi +
jz loc_1007E7C  +
push [ebp+var_14]  +
call ds:DeleteObject  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push ebx  +
push esi  +
mov esi [eax+7Ch] +
push edi  +
xor ebx ebx +
mov edi ecx +
inc ebx  +
call ds:GetCurrentProcessId  +
cmp esi eax +
jz loc_1007EB7  +
mov eax [edi] +
mov eax [eax+38h] +
cmp eax 0FFFFFFFFh +
jz loc_1007EB5  +
cmp eax esi +
jnz loc_1007EB7  +
xor ebx ebx +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
test ecx ecx +
jz loc_1007ED5  +
cmp ecx [ebp+arg_0] +
jbe loc_1007EDA  +
mov eax 80070057h +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push [ebp+arg_8]  +
mov esi eax +
push [ebp+arg_4]  +
xor ebx ebx +
dec esi  +
push esi  +
push edi  +
call ds:_vsnwprintf  +
add esp 10h +
test eax eax +
jl loc_1007F0C  +
cmp eax esi +
ja loc_1007F0C  +
jz loc_1007F11  +
jmp loc_1007F19  +
mov ebx 8007007Ah +
xor eax eax +
mov [edi+esi*2] ax +
mov eax esi +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_1007F22  +
mov [ecx] eax +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp ecx 2 +
jbe loc_1007F52  +
add ecx 0FFFFFFFEh +
and eax 0FFh +
push ecx  +
push eax  +
mov eax [ebp+arg_0] +
add eax 2 +
push eax  +
call memset  +
add esp 0Ch +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi [ebp+arg_0] +
shr esi 1 +
jz loc_1007F87  +
test [ebp+arg_8] 1000h +
jz loc_1007F87  +
mov edx [ebp+arg_4] +
lea eax [edi+ecx*2] +
mov [edx] eax +
mov edx esi +
sub edx ecx +
xor ecx ecx +
mov [ebx] edx +
mov [eax] cx +
test [ebp+arg_8] 400h +
jz loc_1007FCF  +
mov eax [ebp+arg_8] +
push [ebp+arg_0]  +
and eax 0FFh +
push eax  +
push edi  +
mov [ebp+var_4] eax +
call memset  +
add esp 0Ch +
cmp [ebp+var_4] 0 +
jnz loc_1007FB7  +
mov eax [ebp+arg_4] +
mov [eax] edi +
mov [ebx] esi +
jmp loc_1007FCF  +
test esi esi +
jbe loc_1007FE8  +
mov ecx [ebp+arg_4] +
lea eax [edi+esi*2-2] +
mov [ecx] eax +
xor ecx ecx +
mov dword ptr [ebx] 1 +
mov [eax] cx +
test esi esi +
jbe loc_1007FE8  +
test [ebp+arg_8] 800h +
jz loc_1007FE8  +
mov eax [ebp+arg_4] +
mov [eax] edi +
xor eax eax +
mov [ebx] esi +
mov [edi] ax +
xor eax eax +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_1008005  +
mov [ecx+8] eax +
jmp loc_1008007  +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_8]  +
mov esi ecx +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push dword ptr [esi+4]  +
call GdipSaveImageToFile  +
push eax  +
mov ecx esi +
call sub_1007FF4  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
push esi  +
lea eax [ebp+var_4] +
push eax  +
push [ebp+arg_4]  +
mov esi ecx +
push [ebp+arg_0]  +
mov dword ptr [esi] offset off_1001C0C +
call GdipCreateBitmapFromHBITMAP  +
mov [esi+8] eax +
mov eax [ebp+var_4] +
mov [esi+4] eax +
mov eax esi +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 10h  +
call GdipAlloc  +
test eax eax +
jz loc_100808A  +
mov ecx eax +
pop ebp  +
jmp loc_100803B  +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
or [ebp+var_C] 0FFFFFFFFh +
push esi  +
lea eax [ebp+dwBytes] +
push eax  +
lea eax [ebp+var_8] +
xor esi esi +
push eax  +
mov [ebp+var_8] esi +
mov [ebp+dwBytes] esi +
call GdipGetImageEncodersSize  +
cmp [ebp+dwBytes] esi +
jnz loc_10080E8  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_10080E0  +
test byte ptr [eax+1Ch] 1 +
jz loc_10080E0  +
push offset dword_1001BD0  +
push 14h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10054B7  +
or eax 0FFFFFFFFh +
jmp loc_1008180  +
push ebx  +
push [ebp+dwBytes]  +
push 8  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov ebx eax +
cmp ebx esi +
jnz loc_100812A  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_1008125  +
test byte ptr [eax+1Ch] 1 +
jz loc_1008125  +
push offset dword_1001BD0  +
push 15h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10054B7  +
or eax 0FFFFFFFFh +
jmp loc_100817F  +
push ebx  +
push [ebp+dwBytes]  +
push [ebp+var_8]  +
call GdipGetImageEncoders  +
cmp [ebp+var_8] esi +
jbe loc_100816C  +
push edi  +
lea edi [ebx+30h] +
push [ebp+arg_0]  +
push dword ptr [edi]  +
call ds:_wcsicmp  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_100815B  +
inc esi  +
add edi 4Ch +
cmp esi [ebp+var_8] +
jb loc_100813F  +
jmp loc_100816B  +
mov edi [ebp+arg_4] +
imul esi esi +
add esi ebx +
and [ebp+var_C] 0 +
movs   +
movs   +
movs   +
movs   +
pop edi  +
push ebx  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
mov eax [ebp+var_C] +
pop ebx  +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 48h +
mov eax dword_1030118 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
push edi  +
mov [ebp+var_44] ecx +
xor ecx ecx +
mov [ebp+var_34] ecx +
xor eax eax +
lea edi [ebp+var_30] +
stos   +
stos   +
stos   +
mov [ebp+var_40] ecx +
mov [ebp+var_24] ecx +
push 7  +
pop ecx  +
xor eax eax +
lea edi [ebp+var_20] +
stos   +
call ds:GetDesktopWindow  +
test byte ptr [ebx+244h] 1 +
mov [ebp+hWnd] eax +
jz loc_100820A  +
mov ecx [ebp+var_44] +
push ebx  +
call sub_1007C71  +
test eax eax +
jge loc_100820A  +
mov eax off_1030000 +
mov esi offset off_1030000 +
cmp eax esi +
jz loc_100820F  +
test byte ptr [eax+1Ch] 1 +
jz loc_100820F  +
mov edi offset dword_1001BD0 +
push edi  +
push 39h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10054B7  +
jmp loc_1008214  +
mov esi offset off_1030000 +
mov edi offset dword_1001BD0 +
push [ebp+hWnd]  +
call ds:GetDC  +
mov [ebp+hDC] eax +
test eax eax +
jnz loc_100824D  +
mov eax off_1030000 +
cmp eax esi +
jz loc_100824D  +
test byte ptr [eax+1Ch] 1 +
jz loc_100824D  +
call ds:GetLastError  +
push eax  +
mov eax off_1030000 +
push edi  +
push 3Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10062BE  +
push 5  +
push [ebp+hDC]  +
call ds:GetCurrentObject  +
mov [ebp+var_38] eax +
test eax eax +
jnz loc_1008288  +
mov eax off_1030000 +
cmp eax esi +
jz loc_1008288  +
test byte ptr [eax+1Ch] 1 +
jz loc_1008288  +
call ds:GetLastError  +
push eax  +
mov eax off_1030000 +
push edi  +
push 3Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10062BE  +
push [ebp+var_38]  +
push dword ptr [ebx]  +
call sub_1008072  +
mov [ebp+var_38] eax +
test eax eax +
jnz loc_10082B5  +
mov eax off_1030000 +
cmp eax esi +
jz loc_1008347  +
test byte ptr [eax+1Ch] 1 +
jz loc_1008347  +
push edi  +
push 3Ch  +
jmp loc_1008333  +
mov ecx [ebp+var_44] +
lea eax [ebp+var_34] +
push eax  +
push offset aImageJpeg  +
call sub_1008095  +
cmp eax 0FFFFFFFFh +
jnz loc_10082DF  +
mov eax off_1030000 +
cmp eax esi +
jz loc_1008347  +
test byte ptr [eax+1Ch] 1 +
jz loc_1008347  +
push edi  +
push 3Dh  +
jmp loc_1008333  +
xor eax eax +
mov ecx [ebp+var_38] +
inc eax  +
mov [ebp+var_24] eax +
mov esi offset dword_10037CC +
lea edi [ebp+var_20] +
movs   +
movs   +
movs   +
movs   +
mov [ebp+var_10] eax +
lea eax [ebp+var_24] +
push eax  +
lea eax [ebp+var_34] +
push eax  +
add ebx 38h +
push ebx  +
mov [ebp+var_C] 4 +
mov [ebp+var_8] offset unk_103000C +
call sub_1008010  +
test eax eax +
jz loc_1008340  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_1008347  +
test byte ptr [eax+1Ch] 1 +
jz loc_1008347  +
push offset dword_1001BD0  +
push 3Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10054B7  +
jmp loc_1008347  +
mov [ebp+var_40] 1 +
cmp [ebp+hDC] 0 +
pop edi  +
pop esi  +
pop ebx  +
jz loc_100835C  +
push [ebp+hDC]  +
push [ebp+hWnd]  +
call ds:ReleaseDC  +
mov ecx [ebp+var_38] +
test ecx ecx +
jz loc_1008369  +
mov eax [ecx] +
push 1  +
call dword ptr [eax]  +
mov ecx [ebp+var_4] +
mov eax [ebp+var_40] +
xor ecx ebp +
call sub_101BC5D  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_4] +
push ebx  +
xor eax eax +
push esi  +
mov esi 7FFFFFFFh +
test edx edx +
jz loc_1008398  +
cmp edx esi +
jbe loc_100839D  +
mov eax 80070057h +
mov ebx [ebp+arg_0] +
test eax eax +
jl loc_10083B5  +
push edi  +
lea edi [ebp+arg_0] +
mov eax ebx +
call sub_1005536  +
mov ecx [ebp+arg_0] +
pop edi  +
jmp loc_10083B7  +
xor ecx ecx +
test eax eax +
jl loc_10083CE  +
mov edx [ebp+arg_4] +
mov eax [ebp+arg_8] +
push esi  +
sub edx ecx +
push 0  +
lea ecx [ebx+ecx*2] +
call sub_100BDBF  +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov ecx [ebp+arg_4] +
push esi  +
push edi  +
push [ebp+arg_10]  +
mov edi [ebp+arg_0] +
push 7FFFFFFFh  +
push edi  +
call sub_101F383  +
mov esi eax +
xor eax eax +
cmp esi eax +
jl loc_10084E9  +
test [ebp+arg_10] 100h +
push ebx  +
mov ebx ecx +
mov [ebp+var_8] edi +
mov [ebp+var_4] ebx +
jz loc_1008420  +
cmp [ebp+arg_14] eax +
jnz loc_1008420  +
mov [ebp+arg_14] offset WindowName +
xor esi esi +
test [ebp+arg_10] 0FFFFE000h +
jz loc_100843B  +
mov esi 80070057h +
cmp ecx eax +
jz loc_10084A2  +
xor eax eax +
mov [edi] ax +
jmp loc_10084A2  +
cmp ecx eax +
jnz loc_100845C  +
mov edx [ebp+arg_14] +
cmp [edx] ax +
jz loc_10084D3  +
mov esi edi +
neg esi  +
sbb esi esi +
and esi 23h +
add esi 80070057h +
jmp loc_10084A2  +
mov [ebp+var_8] eax +
lea eax [ebp+arg_18] +
push eax  +
push [ebp+arg_14]  +
lea eax [ebp+var_8] +
push eax  +
mov eax ecx +
call sub_1007EE3  +
mov esi eax +
mov eax [ebp+var_8] +
sub ebx eax +
lea edx [edi+eax*2] +
mov [ebp+var_8] edx +
mov [ebp+var_4] ebx +
test esi esi +
jl loc_100849F  +
mov eax [ebp+arg_10] +
test eax 200h +
jz loc_10084D3  +
cmp ebx 1 +
jbe loc_10084D3  +
lea ecx [ebx+ebx] +
push edx  +
call sub_1007F2F  +
jmp loc_10084D3  +
mov ecx [ebp+arg_4] +
test [ebp+arg_10] 1C00h +
jz loc_10084C7  +
test ecx ecx +
jz loc_10084C7  +
push [ebp+arg_10]  +
lea eax [ebp+var_8] +
push eax  +
lea eax [ecx+ecx] +
push eax  +
lea ebx [ebp+var_4] +
xor ecx ecx +
call sub_1007F5D  +
mov ebx [ebp+var_4] +
test esi esi +
jge loc_10084D3  +
cmp esi 8007007Ah +
jnz loc_10084E8  +
mov eax [ebp+arg_8] +
test eax eax +
jz loc_10084DF  +
mov ecx [ebp+var_8] +
mov [eax] ecx +
mov eax [ebp+arg_C] +
test eax eax +
jz loc_10084E8  +
mov [eax] ebx +
pop ebx  +
pop edi  +
mov eax esi +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
push dword ptr [esi+4]  +
mov dword ptr [esi] offset off_1001C0C +
call GdipDisposeImage  +
test byte ptr [ebp+8] 1 +
jz loc_1008516  +
push esi  +
call GdipFree  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
push [ebp+arg_0]  +
mov esi ecx +
push 104h  +
lea eax [esi+122Ch] +
push eax  +
call sub_10066E4  +
mov edi eax +
test edi edi +
jge loc_100856F  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_1008578  +
test byte ptr [eax+1Ch] 1 +
jz loc_1008578  +
movzx ecx di +
push ecx  +
push offset dword_1001BD0  +
push 10h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10062BE  +
jmp loc_1008578  +
mov dword ptr [esi+14h] 1 +
xor edi edi +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
add ecx 122Ch +
push ecx  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_10066E4  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
mov esi [ebp+lpCmdLine] +
push edi  +
lea eax [ebp+pNumArgs] +
push eax  +
xor edi edi +
push esi  +
mov [ebp+pNumArgs] edi +
call ds:CommandLineToArgvW  +
mov ebx eax +
cmp ebx edi +
jnz loc_10085EB  +
call ds:GetLastError  +
cmp eax edi +
jnz loc_10085D9  +
mov eax 54Fh +
cmp eax edi +
jg loc_10085DF  +
mov esi eax +
jmp loc_1008645  +
and eax 0FFFFh +
or eax 80070000h +
jmp loc_10085DB  +
mov eax [ebp+pNumArgs] +
cmp eax [ebp+arg_8] +
jg loc_10085FA  +
mov esi 8007054Fh +
jmp loc_100863E  +
mov ecx [ebp+arg_4] +
mov [ebp+var_8] esi +
mov [ebp+lpCmdLine] ecx +
test eax eax +
jle loc_100863C  +
mov eax [ebp+arg_C] +
cmp edi [ebp+arg_8] +
jz loc_1008612  +
mov eax [ebx+edi*4] +
push eax  +
push offset aWs  +
push 0  +
lea eax [ebp+lpCmdLine] +
push eax  +
lea eax [ebp+var_8] +
push eax  +
push [ebp+lpCmdLine]  +
push [ebp+var_8]  +
call sub_10083D9  +
mov esi eax +
add esp 1Ch +
test esi esi +
jl loc_100863E  +
inc edi  +
cmp edi [ebp+pNumArgs] +
jl loc_1008607  +
xor esi esi +
push ebx  +
call ds:LocalFree  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax 10004h +
call __alloca_probe  +
mov eax dword_1030118 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
mov esi ecx +
cmp dword ptr [esi+13CACh] 0 +
push edi  +
jz loc_10086F7  +
push offset WindowName  +
lea edi [esi+3CA0h] +
push edi  +
push offset aLsLs  +
lea eax [ebp+var_10004] +
push 8000h  +
push eax  +
call sub_1005835  +
add esp 14h +
test eax eax +
jge loc_10086D6  +
mov ecx off_1030000 +
cmp ecx offset off_1030000 +
jz loc_10086CC  +
test byte ptr [ecx+1Ch] 1 +
jz loc_10086CC  +
movzx eax ax +
push eax  +
push offset dword_1001BD0  +
push 1Ah  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10062BE  +
push 1001Ch  +
push 0  +
push edi  +
jmp loc_1008705  +
test byte ptr [esi+13CA0h] 1 +
mov ecx [esi+1C34h] +
lea eax [ebp+var_10004] +
jz loc_10086EF  +
push 0Ch  +
jmp loc_10086F1  +
push 0Ah  +
push eax  +
call sub_1009EB3  +
push 1001Ch  +
push 0  +
add esi 3CA0h +
push esi  +
call memset  +
mov ecx [ebp+var_4] +
add esp 0Ch +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_101BC5D  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax 10004h +
call __alloca_probe  +
mov eax dword_1030118 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
mov esi ecx +
cmp dword ptr [esi+33CBCh] 0 +
push edi  +
jz loc_10087CA  +
lea eax [esi+23CBCh] +
push eax  +
lea edi [esi+13CBCh] +
push edi  +
push offset aLsLs  +
lea eax [ebp+var_10004] +
push 8000h  +
push eax  +
call sub_1005835  +
add esp 14h +
test eax eax +
jge loc_10087A9  +
mov ecx off_1030000 +
cmp ecx offset off_1030000 +
jz loc_100879F  +
test byte ptr [ecx+1Ch] 1 +
jz loc_100879F  +
movzx eax ax +
push eax  +
push offset dword_1001BD0  +
push 1Bh  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10062BE  +
push 2000Ch  +
push 0  +
push edi  +
jmp loc_10087D8  +
test byte ptr [esi+33CC4h] 1 +
mov ecx [esi+1C34h] +
lea eax [ebp+var_10004] +
jz loc_10087C2  +
push 0Dh  +
jmp loc_10087C4  +
push 0Bh  +
push eax  +
call sub_1009EB3  +
push 2000Ch  +
push 0  +
add esi 13CBCh +
push esi  +
call memset  +
mov ecx [ebp+var_4] +
add esp 0Ch +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_101BC5D  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+uCode] 5Bh +
push ebx  +
push esi  +
push edi  +
jz loc_10088BE  +
cmp [ebp+uCode] 5Ch +
jz loc_10088BE  +
mov eax [ebp+arg_4] +
xor ebx ebx +
cmp eax ebx +
jnz loc_1008830  +
push ebx  +
push [ebp+uCode]  +
call ds:MapVirtualKeyW  +
cmp eax ebx +
jnz loc_1008830  +
mov eax 80004005h +
jmp loc_10088CE  +
shl eax 10h +
cmp [ebp+arg_8] ebx +
jnz loc_100883D  +
or eax 2000000h +
cmp [ebp+arg_C] ebx +
jz loc_1008847  +
or eax 1000000h +
mov edi [ebp+nSize] +
mov esi [ebp+lpString] +
push edi  +
push esi  +
push eax  +
call ds:GetKeyNameTextW  +
test eax eax +
jg loc_1008879  +
call ds:GetLastError  +
cmp eax ebx +
jnz loc_100886B  +
mov eax 54Fh +
cmp eax ebx +
jle loc_10088CE  +
and eax 0FFFFh +
or eax 80070000h +
jmp loc_10088CE  +
cmp edi ebx +
jz loc_10088BA  +
xor eax eax +
mov [esi+edi*2-2] ax +
mov [ebp+uCode] ebx +
cmp [esi] bx +
jz loc_10088BA  +
mov ecx esi +
cmp word ptr [ecx] 20h +
jnz loc_10088B0  +
mov edx [ebp+uCode] +
cmp [ecx] bx +
jz loc_10088BA  +
mov eax ecx +
mov di [eax+2] +
inc edx  +
mov [eax] di +
lea eax [esi+edx*2] +
cmp [eax] bx +
jnz loc_100889E  +
jmp loc_10088B5  +
inc [ebp+uCode]  +
inc ecx  +
inc ecx  +
cmp [ecx] bx +
jnz loc_100888E  +
xor eax eax +
jmp loc_10088CE  +
push offset aWin  +
push [ebp+nSize]  +
push [ebp+lpString]  +
call sub_10066E4  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax 184Ch +
call __alloca_probe  +
mov eax dword_1030118 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
mov esi [ebp+arg_20] +
xor eax eax +
push edi  +
mov [ebp+var_1810] ecx +
xor ecx ecx +
push 12h  +
mov word ptr [ebp+var_804] cx +
mov word ptr [ebp+var_1004] cx +
pop ebx  +
lea ecx [ebp+var_1004] +
mov [ebp+var_1818] eax +
mov [ebp+var_1814] eax +
mov [ebp+var_1824] eax +
mov [ebp+var_181C] eax +
mov [ebp+nVirtKey] 11h +
mov dword ptr [ebp+var_1848] offset word_1031688 +
mov [ebp+var_1844] ebx +
mov [ebp+var_1840] offset word_1031788 +
mov [ebp+var_183C] 10h +
mov [ebp+var_1838] offset word_1031888 +
mov [ebp+var_1834] 5Bh +
mov [ebp+var_1830] offset unk_1031988 +
mov [ebp+var_182C] 5Ch +
mov [ebp+var_1828] offset unk_1031A88 +
mov [ebp+var_1820] 400h +
mov [ebp+var_1808] ecx +
mov [ebp+var_180C] eax +
mov eax [ebp+var_180C] +
mov edi [ebp+eax*8+nVirtKey] +
push edi  +
call ds:GetKeyState  +
mov ecx 8000h +
test ax cx +
jz loc_1008A35  +
cmp esi edi +
jz loc_1008A35  +
cmp edi 11h +
jnz loc_10089DB  +
mov [ebp+var_1818] 1 +
jmp loc_10089FF  +
cmp edi ebx +
jnz loc_10089EB  +
mov [ebp+var_1814] 1 +
jmp loc_10089FF  +
cmp edi 5Bh +
jz loc_10089F5  +
cmp edi 5Ch +
jnz loc_10089FF  +
mov [ebp+var_1824] 1 +
mov eax [ebp+var_180C] +
push dword ptr [ebp+eax*8+var_1848]  +
lea eax [ebp+var_1820] +
push offset aWs_0  +
push 0  +
push eax  +
lea eax [ebp+var_1808] +
push eax  +
push [ebp+var_1820]  +
push [ebp+var_1808]  +
call sub_10067E6  +
add esp 1Ch +
inc [ebp+var_180C]  +
cmp [ebp+var_180C] 5 +
jb loc_10089A8  +
xor edi edi +
inc edi  +
xor ebx ebx +
xor eax eax +
xor edx edx +
cmp [ebp+arg_A4] 105h +
mov [ebp+var_1808] edi +
jz loc_1008A71  +
cmp [ebp+arg_A4] 101h +
jz loc_1008A71  +
xor edi edi +
xor ecx ecx +
cmp esi ds:dword_1001BE0[ecx] +
jnz loc_1008A9C  +
cmp edi ebx +
jz loc_1008B8F  +
and [ebp+var_1808] 0 +
xor eax eax +
inc eax  +
cmp esi 5Bh +
jz loc_1008A97  +
cmp esi 5Ch +
jnz loc_1008A9A  +
xor edx edx +
inc edx  +
xor ebx ebx +
add ecx 4 +
cmp ecx 2Ch +
jb loc_1008A73  +
cmp eax ebx +
jnz loc_1008BD7  +
lea eax [esi-70h] +
cmp eax 17h +
jbe loc_1008BD7  +
cmp esi 2Eh +
ja loc_1008ADC  +
cmp esi 2Dh +
jnb loc_1008BD0  +
lea eax [esi-8] +
cmp eax 24h +
ja loc_1008B23  +
movzx eax ds:byte_1008CC2[eax] +
jmp ds:off_1008CB6[eax*4]  +
cmp esi 2Fh +
jz loc_1008BD5  +
cmp esi 5Dh +
jz loc_1008BD5  +
cmp esi 5Fh +
jz loc_1008BD5  +
cmp esi 90h +
jz loc_1008BD0  +
cmp esi 91h +
jz loc_1008BD5  +
cmp esi 0A5h +
jbe loc_1008B23  +
cmp esi 0B5h +
jbe loc_1008BD5  +
mov edi 400h +
xor eax eax +
cmp ax word ptr [ebp+var_804] +
jnz loc_1008C1E  +
cmp [ebp+var_1818] ebx +
jnz loc_1008B4F  +
cmp [ebp+var_1814] ebx +
jnz loc_1008B4F  +
cmp [ebp+var_1824] ebx +
jz loc_1008B9E  +
cmp [ebp+arg_24] ebx +
jz loc_1008B9E  +
push edi  +
lea eax [ebp+String] +
push eax  +
push ebx  +
push 1  +
push [ebp+arg_24]  +
push ebx  +
call sub_10087F3  +
test eax eax +
jl loc_1008B8F  +
lea eax [ebp+String] +
push eax  +
lea eax [ebp+var_1004] +
push eax  +
push offset aWsWs_0  +
lea eax [ebp+var_804] +
push edi  +
push eax  +
call sub_1005835  +
add esp 14h +
xor eax eax +
cmp ax word ptr [ebp+var_804] +
jnz loc_1008C1E  +
mov esi [ebp+var_1810] +
add esi 33CC0h +
cmp [esi] ebx +
jnz loc_1008C95  +
push offset a___  +
push 800h  +
lea eax [ebp+var_804] +
push eax  +
call sub_100671E  +
mov dword ptr [esi] 1 +
jmp loc_1008C2A  +
xor edx edx +
inc edx  +
jmp loc_1008BD7  +
xor edx edx +
mov edi 400h +
push edi  +
lea eax [ebp+String] +
push eax  +
push edx  +
push [ebp+var_1808]  +
push ebx  +
push esi  +
call sub_10087F3  +
test eax eax +
jl loc_1008B8F  +
lea eax [ebp+String] +
push eax  +
lea eax [ebp+var_1004] +
push eax  +
push offset aWsWs_0  +
lea eax [ebp+var_804] +
push edi  +
push eax  +
call sub_10067AA  +
add esp 14h +
jmp loc_1008B28  +
mov eax [ebp+var_1810] +
mov [eax+33CC0h] ebx +
xor eax eax +
cmp ax word ptr [ebp+var_804] +
jz loc_1008C95  +
mov esi [ebp+var_1810] +
add esi 23CBCh +
cmp ax [esi] +
jz loc_1008C56  +
push offset asc_1001C58  +
push 8000h  +
push esi  +
call sub_100837F  +
lea eax [ebp+var_804] +
push eax  +
push 8000h  +
push esi  +
call sub_100837F  +
cmp eax ebx +
jge loc_1008C95  +
mov ecx off_1030000 +
cmp ecx offset off_1030000 +
jz loc_1008C9F  +
test byte ptr [ecx+1Ch] 1 +
jz loc_1008C9F  +
push eax  +
push offset dword_1001BD0  +
push 26h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10062BE  +
jmp loc_1008C9F  +
mov [ebp+var_181C] 1 +
mov ecx [ebp+var_4] +
mov eax [ebp+var_181C] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_101BC5D  +
leave   +
retn 0CCh  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax 6030h +
call __alloca_probe  +
mov eax dword_1030118 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_4] +
and [ebp+Rect.left] 0 +
and [ebp+var_6020] 0 +
mov [ebp+var_600C] eax +
xor eax eax +
push ebx  +
mov ebx [ebp+arg_0] +
push edi  +
lea edi [ebp+Rect.top] +
stos   +
stos   +
stos   +
xor eax eax +
lea edi [ebp+var_601C] +
stos   +
stos   +
stos   +
xor eax eax +
mov [ebp+var_6010] ecx +
mov [ebp+var_6008] 80004005h +
mov word ptr [ebp+var_4004] ax +
mov [ebp+ClassName] ax +
mov word ptr [ebp+var_2004] ax +
test ebx ebx +
jnz loc_1008D93  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_1008EDF  +
test byte ptr [eax+1Ch] 1 +
jz loc_1008EDF  +
push offset dword_1001BD0  +
push 27h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10054B7  +
jmp loc_1008EDF  +
push esi  +
mov esi 1000h +
push esi  +
lea eax [ebp+var_4004] +
push eax  +
push ebx  +
call ds:InternalGetWindowText  +
test eax eax +
jnz loc_1008DB3  +
mov word ptr [ebp+var_4004] ax +
push esi  +
lea eax [ebp+ClassName] +
push eax  +
push ebx  +
call ds:GetClassNameW  +
mov edi offset off_1030000 +
test eax eax +
jnz loc_1008DEC  +
mov eax off_1030000 +
cmp eax edi +
jz loc_1008DEC  +
test byte ptr [eax+1Ch] 1 +
jz loc_1008DEC  +
push offset dword_1001BD0  +
push 28h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10054B7  +
lea eax [ebp+Rect] +
push eax  +
push ebx  +
call ds:GetWindowRect  +
test eax eax +
jnz loc_1008E22  +
mov eax off_1030000 +
cmp eax edi +
jz loc_1008E22  +
test byte ptr [eax+1Ch] 1 +
jz loc_1008E22  +
mov ebx offset dword_1001BD0 +
push ebx  +
push 29h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10054B7  +
jmp loc_1008E27  +
mov ebx offset dword_1001BD0 +
lea eax [ebp+Rect] +
push eax  +
lea eax [ebp+var_6020] +
push eax  +
call sub_101E7E9  +
push [ebp+var_6014]  +
lea eax [ebp+ClassName] +
push [ebp+var_6018]  +
push [ebp+var_601C]  +
push [ebp+var_6020]  +
push eax  +
mov eax [ebp+var_6010] +
add eax 1434h +
push eax  +
push 9  +
lea eax [ebp+var_4004] +
push eax  +
push offset aLevelNameLsR_0  +
lea eax [ebp+var_2004] +
push esi  +
push eax  +
call sub_1005835  +
add esp 2Ch +
test eax eax +
jge loc_1008E9B  +
mov eax off_1030000 +
cmp eax edi +
jz loc_1008EDE  +
test byte ptr [eax+1Ch] 1 +
jz loc_1008EDE  +
push ebx  +
push 2Ah  +
jmp loc_1008ECB  +
push esi  +
xor esi esi +
push esi  +
push esi  +
lea eax [ebp+var_2004] +
push eax  +
push [ebp+arg_8]  +
push [ebp+var_600C]  +
call sub_1005657  +
test eax eax +
jge loc_1008ED8  +
mov eax off_1030000 +
cmp eax edi +
jz loc_1008EDE  +
test byte ptr [eax+1Ch] 1 +
jz loc_1008EDE  +
push ebx  +
push 2Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10054B7  +
jmp loc_1008EDE  +
mov [ebp+var_6008] esi +
pop esi  +
mov ecx [ebp+var_4] +
mov eax [ebp+var_6008] +
pop edi  +
xor ecx ebp +
pop ebx  +
call sub_101BC5D  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
xor eax eax +
mov ebx ecx +
xor ecx ecx +
mov [ebp+pci.cbSize] ecx +
lea edi [ebp+pci.flags] +
stos   +
stos   +
stos   +
stos   +
mov edi [esi+0B0h] +
mov [ebp+lpMem] ecx +
cmp [esi+0B8h] ecx +
jz loc_1008F7A  +
mov eax [ebx] +
cmp [eax+4] ecx +
jz loc_1008F7A  +
lea eax [ebp+pci] +
push eax  +
mov [ebp+pci.cbSize] 14h +
call ds:GetCursorInfo  +
test eax eax +
jnz loc_1008F6B  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_10090B0  +
test byte ptr [eax+1Ch] 1 +
jz loc_10090B0  +
push offset dword_1001BD0  +
push 31h  +
jmp loc_10090A5  +
push [ebp+pci.ptScreenPos.y]  +
mov ecx ebx +
push [ebp+pci.ptScreenPos.x]  +
call sub_1007B96  +
xor ecx ecx +
mov eax [ebx] +
cmp [eax] ecx +
jz loc_100908C  +
cmp [ebx+14h] ecx +
jz loc_100908C  +
lea eax [ebp+lpMem] +
push eax  +
call sub_10066A6  +
mov [ebp+arg_0] eax +
test eax eax +
jge loc_1008FC3  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_1009079  +
test byte ptr [eax+1Ch] 1 +
jz loc_1009079  +
push offset dword_1001BD0  +
push 33h  +
jmp loc_1009053  +
mov eax [ebp+lpMem] +
or dword ptr [eax+244h] 1 +
mov eax [ebp+lpMem] +
add eax 28h +
push eax  +
push dword ptr [esi+80h]  +
call ds:GetWindowRect  +
push [ebp+lpMem]  +
call sub_101DA40  +
test eax eax +
jz loc_1009015  +
mov ecx off_1030000 +
cmp ecx offset off_1030000 +
jz loc_1009079  +
test byte ptr [ecx+1Ch] 1 +
jz loc_1009079  +
push eax  +
push offset dword_1001BD0  +
push 34h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10062BE  +
jmp loc_1009079  +
mov eax [ebp+lpMem] +
push edi  +
add ebx 122Ch +
push ebx  +
push offset aLsScreenshot04  +
add eax 38h +
push 104h  +
push eax  +
call sub_1005835  +
add esp 14h +
test eax eax +
jge loc_1009060  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_1009079  +
test byte ptr [eax+1Ch] 1 +
jz loc_1009079  +
push offset dword_1001BD0  +
push 35h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10054B7  +
jmp loc_1009079  +
mov eax [ebp+lpMem] +
mov ecx [ebp+arg_4] +
mov [eax+240h] edi +
mov eax [ebp+lpMem] +
and [ebp+lpMem] 0 +
and [ebp+arg_0] 0 +
mov [ecx] eax +
cmp [ebp+lpMem] 0 +
jz loc_1009087  +
push [ebp+lpMem]  +
call sub_1006516  +
mov eax [ebp+arg_0] +
jmp loc_10090B5  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_10090B0  +
test byte ptr [eax+1Ch] 1 +
jz loc_10090B0  +
push offset dword_1001BD0  +
push 32h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10054B7  +
mov eax 80004005h +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and dword ptr [ebp-4] 0 +
push esi  +
lea eax [ebp-4] +
mov esi ecx +
push eax  +
push dword ptr [esi+4]  +
call GdipCloneImage  +
push eax  +
mov ecx esi +
call sub_1007FF4  +
push 10h  +
call GdipAlloc  +
test eax eax +
jz loc_1009101  +
mov ecx [esi+8] +
mov edx [ebp-4] +
mov dword ptr [eax] offset off_1001C0C +
mov [eax+4] edx +
mov [eax+8] ecx +
jmp loc_1009103  +
xor eax eax +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
push ebx  +
push esi  +
push edi  +
xor ebx ebx +
mov esi 80h +
push esi  +
push offset word_1031688  +
push ebx  +
push ebx  +
push ebx  +
push 11h  +
mov [ebp+var_8] ecx +
mov [ebp+var_4] ebx +
mov [ebp+var_18] 1 +
mov [ebp+var_14] ebx +
mov [ebp+var_10] ebx +
mov [ebp+var_C] ebx +
call sub_10087F3  +
mov edi offset unk_1031988 +
test eax eax +
jge loc_100915C  +
push offset aCtrl  +
push 100h  +
push edi  +
call sub_100671E  +
push esi  +
push offset word_1031788  +
push ebx  +
push ebx  +
push ebx  +
push 12h  +
call sub_10087F3  +
test eax eax +
jge loc_1009180  +
push offset aAlt  +
push 100h  +
push edi  +
call sub_100671E  +
push esi  +
push offset word_1031888  +
push ebx  +
push ebx  +
push ebx  +
push 10h  +
call sub_10087F3  +
test eax eax +
jge loc_10091A4  +
push offset aShift  +
push 100h  +
push edi  +
call sub_100671E  +
mov ebx offset aWin +
push ebx  +
push esi  +
push edi  +
call sub_10066E4  +
test eax eax +
jge loc_10091C1  +
push ebx  +
push 100h  +
push edi  +
call sub_100671E  +
push ebx  +
push esi  +
push offset unk_1031A88  +
call sub_10066E4  +
test eax eax +
jge loc_10091DD  +
push ebx  +
push 100h  +
push edi  +
call sub_100671E  +
mov ebx [ebp+var_8] +
push 400h  +
lea esi [ebx+1434h] +
push esi  +
push 9  +
call GetRoleTextW  +
test eax eax +
jnz loc_10091FA  +
mov [esi] ax +
xor edi edi +
push edi  +
lea eax [ebp+var_18] +
push eax  +
lea eax [ebx+1C38h] +
push eax  +
call GdiplusStartup  +
test eax eax +
jz loc_100927C  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_1009235  +
test byte ptr [eax+1Ch] 1 +
jz loc_1009235  +
push offset dword_1001BD0  +
push 0Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10054B7  +
lea esi [ebx+1C3Ch] +
mov eax [esi] +
cmp eax edi +
jz loc_1009249  +
push eax  +
call sub_101C9FD  +
mov [esi] edi +
mov eax dword_1031684 +
cmp eax edi +
jz loc_100925E  +
push eax  +
call sub_101DED9  +
mov dword_1031684 edi +
mov eax dword_1031680 +
cmp eax edi +
jz loc_1009274  +
push eax  +
call ds:DeleteObject  +
mov dword_1031680 edi +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
mov esi ds:GetModuleHandleW +
push edi  +
push edi  +
push edi  +
push edi  +
push 12Fh  +
push edi  +
call esi  +
push eax  +
call ds:LoadImageW  +
mov dword_1031680 eax +
cmp eax edi +
jnz loc_10092BC  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_1009235  +
test byte ptr [eax+1Ch] 1 +
jz loc_1009235  +
push offset dword_1001BD0  +
push 0Bh  +
jmp loc_100922A  +
push edi  +
call esi  +
push eax  +
push offset dword_1031684  +
call sub_101F1D6  +
test eax eax +
jz loc_10092F4  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_1009235  +
test byte ptr [eax+1Ch] 1 +
jz loc_1009235  +
push offset dword_1001BD0  +
push 0Ch  +
jmp loc_100922A  +
push edi  +
push edi  +
lea esi [ebx+1C3Ch] +
push esi  +
call sub_101CC79  +
test eax eax +
jz loc_100932C  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_1009235  +
test byte ptr [eax+1Ch] 1 +
jz loc_1009235  +
push offset dword_1001BD0  +
push 0Dh  +
jmp loc_100922A  +
push 0FFFFFFFFh  +
push dword ptr [esi]  +
call sub_101C7AA  +
test eax eax +
jz loc_100935F  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_1009235  +
test byte ptr [eax+1Ch] 1 +
jz loc_1009235  +
push offset dword_1001BD0  +
push 0Eh  +
jmp loc_100922A  +
push 1  +
push 1  +
push dword ptr [esi]  +
call sub_101CE7A  +
test eax eax +
jz loc_1009394  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_1009235  +
test byte ptr [eax+1Ch] 1 +
jz loc_1009235  +
push offset dword_1001BD0  +
push 0Fh  +
jmp loc_100922A  +
mov [ebp+var_4] 1 +
jmp loc_1009274  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 54h +
mov eax dword_1030118 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
mov esi [ebp+arg_0] +
test byte ptr [esi+0Ch] 2 +
push edi  +
mov edi ecx +
jnz loc_10094BF  +
mov eax [ebp+arg_4] +
sub eax [esi+10h] +
cmp eax 0C8h +
jb loc_100944B  +
push 17h  +
call ds:GetSystemMetrics  +
mov ecx [esi] +
sub ecx 0 +
jz loc_10093F8  +
dec ecx  +
jz loc_10093EF  +
dec ecx  +
jnz loc_100944B  +
push 4  +
pop eax  +
jmp loc_1009402  +
xor ecx ecx +
test eax eax +
setz cl  +
jmp loc_10093FF  +
xor ecx ecx +
test eax eax +
setnz cl  +
inc ecx  +
mov eax ecx +
push eax  +
call ds:GetAsyncKeyState  +
mov ecx 8000h +
test ax cx +
jnz loc_1009419  +
and dword ptr [esi+0Ch] 0FFFFFFFEh +
jmp loc_100944B  +
mov eax [esi+8] +
push [ebp+pt.y]  +
lea ecx [eax-5] +
push [ebp+pt.x]  +
add eax 5 +
mov [ebp+rc.bottom] eax +
mov eax [esi+4] +
mov [ebp+rc.top] ecx +
lea ecx [eax-5] +
add eax 5 +
mov [ebp+rc.right] eax +
lea eax [ebp+rc] +
push eax  +
mov [ebp+rc.left] ecx +
call ds:PtInRect  +
test eax eax +
jz loc_1009450  +
xor eax eax +
inc eax  +
jmp loc_10094C1  +
or dword ptr [esi+0Ch] 2 +
mov eax [edi+13CACh] +
cmp eax [esi+10h] +
jnz loc_10094BF  +
mov esi [esi] +
test esi esi +
jnz loc_1009470  +
cmp dword ptr [edi+13CA4h] 78h +
jz loc_100948F  +
jmp loc_10094BF  +
cmp esi 1 +
jnz loc_100947E  +
cmp dword ptr [edi+13CA4h] 79h +
jmp loc_100946C  +
cmp esi 2 +
jnz loc_10094BF  +
cmp dword ptr [edi+13CA4h] 2BCh +
jnz loc_10094BF  +
push 7Dh  +
push offset aD  +
lea eax [ebp+var_44] +
push 40h  +
push eax  +
call sub_10067AA  +
add esp 10h +
lea eax [ebp+var_44] +
push eax  +
push 2  +
push 8000h  +
add edi 3CA0h +
push edi  +
call sub_10085A5  +
test eax eax +
jl loc_10094C1  +
xor eax eax +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_101BC5D  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
xor esi esi +
mov ebx ecx +
lea edx [ebx+3C4Ch] +
cmp [edi+0B8h] esi +
jnz loc_100954C  +
mov eax [edi+0A4h] +
cmp eax 100h +
jz loc_1009531  +
cmp eax 104h +
jz loc_1009531  +
xor eax eax +
xor edx edx +
inc eax  +
cmp [ebx+3C9Ch] esi +
jz loc_1009536  +
mov ecx [edi+20h] +
cmp [ebx+3C88h] ecx +
jnz loc_1009536  +
cmp ds:dword_1001BE0[esi] ecx +
jz loc_1009534  +
add esi 4 +
cmp esi 2Ch +
jb loc_100951F  +
jmp loc_1009536  +
xor edx edx +
inc edx  +
xor eax eax +
lea esi [edi+20h] +
push 5  +
lea edi [ebx+3C88h] +
pop ecx  +
movs   +
mov [ebx+3C9Ch] edx +
jmp loc_1009585  +
mov ecx [edi+0A4h] +
cmp ecx 200h +
jnz loc_100958C  +
mov esi edx +
mov [ebp+arg_0] 3 +
test byte ptr [esi+0Ch] 1 +
jz loc_100957A  +
push dword ptr [edi+44h]  +
mov ecx ebx +
push dword ptr [edi+40h]  +
push dword ptr [edi+18h]  +
push esi  +
call sub_10093A5  +
add esi 14h +
dec [ebp+arg_0]  +
jnz loc_1009563  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
mov eax ecx +
sub eax 201h +
jz loc_10095CC  +
dec eax  +
jz loc_10095C1  +
push 2  +
pop esi  +
sub eax esi +
jz loc_10095C5  +
dec eax  +
jz loc_10095BE  +
sub eax esi +
jz loc_10095CC  +
dec eax  +
jz loc_10095C1  +
mov eax 20Ah +
cmp ecx eax +
jnz loc_1009582  +
cmp [ebx+13CA8h] eax +
jz loc_1009626  +
xor eax eax +
jmp loc_1009585  +
xor esi esi +
inc esi  +
xor eax eax +
jmp loc_10095CF  +
xor eax eax +
inc eax  +
mov esi eax +
jmp loc_10095CF  +
xor eax eax +
inc eax  +
imul esi esi +
add esi edx +
test eax eax +
jz loc_10095F8  +
mov eax [esi+0Ch] +
and eax 0FFFFFFFDh +
or eax 1 +
mov [esi+0Ch] eax +
mov eax [edi+18h] +
mov [esi+10h] eax +
mov eax [edi+8] +
mov [esi+4] eax +
mov eax [edi+0Ch] +
mov [esi+8] eax +
jmp loc_10095BA  +
test byte ptr [esi+0Ch] 1 +
jz loc_100960F  +
push dword ptr [edi+44h]  +
mov ecx ebx +
push dword ptr [edi+40h]  +
push dword ptr [edi+18h]  +
push esi  +
call sub_10093A5  +
and dword ptr [esi+0Ch] 0FFFFFFFEh +
mov eax [esi+0Ch] +
test al 2 +
jz loc_1009582  +
and eax 0FFFFFFFDh +
mov [esi+0Ch] eax +
jmp loc_10095BA  +
xor eax eax +
cmp [edi+12h] ax +
setl al  +
xor ecx ecx +
add eax 7Fh +
cmp [ebx+13CA4h] eax +
setz cl  +
mov eax ecx +
jmp loc_1009585  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
push edi  +
xor edi edi +
mov [ebp+var_4] ecx +
cmp [ebp+arg_8] edi +
jz loc_1009664  +
mov ecx [ebp+arg_4] +
xor eax eax +
mov [ecx] ax +
mov esi [ebp+arg_0] +
mov ebx esi +
cmp esi edi +
jz loc_10096A7  +
push [ebp+arg_8]  +
mov ecx [ebp+var_4] +
push [ebp+arg_4]  +
mov ebx esi +
push esi  +
call sub_1008CEC  +
cmp edi [ebp+arg_10] +
jnb loc_100968A  +
mov eax [ebp+arg_C] +
mov [eax+edi*4] esi +
inc edi  +
push 0FFFFFFF0h  +
push esi  +
call ds:GetWindowLongW  +
test eax 40000000h +
jz loc_10096A7  +
push esi  +
call ds:GetParent  +
mov esi eax +
test esi esi +
jnz loc_100966D  +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax 222Ch +
call __alloca_probe  +
mov eax dword_1030118 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_1C] +
and [ebp+var_222C] 0 +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
push edi  +
push [ebp+arg_28]  +
and [ebp+hProcess] 0 +
mov [ebp+var_2214] eax +
xor eax eax +
lea edi [ebp+var_2228] +
stos   +
stos   +
stos   +
xor eax eax +
mov esi ecx +
mov ecx [ebp+arg_24] +
push ecx  +
lea edi [ebp+var_2218] +
stos   +
mov word ptr [ebp+var_20C] ax +
mov word ptr [ebp+var_220C] ax +
mov edi 1000h +
push edi  +
lea eax [ebp+var_220C] +
push eax  +
push dword ptr [ebx+80h]  +
mov ecx esi +
mov [ebp+var_2218] 104h +
call sub_1009649  +
mov eax [ebx+7Ch] +
cmp eax [esi+18h] +
jz loc_1009810  +
push eax  +
push 0  +
push 410h  +
call ds:OpenProcess  +
mov [ebp+hProcess] eax +
test eax eax +
lea eax [esi+24h] +
jz loc_10097F1  +
push [ebp+var_2218]  +
lea ecx [esi+22Ch] +
push eax  +
push 800h  +
push ecx  +
push [ebp+hProcess]  +
mov ecx esi +
call sub_1007614  +
test eax eax +
jge loc_1009810  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_10097B1  +
test byte ptr [eax+1Ch] 1 +
jz loc_10097B1  +
push offset dword_1001BD0  +
push 25h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10054B7  +
push edi  +
lea eax [esi+22Ch] +
push 0  +
push eax  +
call memset  +
add esp 0Ch +
lea eax [ebp+var_2218] +
push eax  +
lea edi [esi+24h] +
push edi  +
push 0  +
push [ebp+hProcess]  +
call ds:QueryFullProcessImageNameW  +
test eax eax +
jnz loc_1009810  +
push 208h  +
push eax  +
push edi  +
call memset  +
add esp 0Ch +
jmp loc_1009810  +
push 208h  +
push 0  +
push eax  +
call memset  +
push edi  +
lea eax [esi+22Ch] +
push 0  +
push eax  +
call memset  +
add esp 18h +
mov eax [ebx+7Ch] +
mov [esi+18h] eax +
lea eax [ebp+var_222C] +
push eax  +
call sub_101D59B  +
mov eax [esi] +
cmp dword ptr [eax] 0 +
jz loc_1009858  +
test byte ptr [ebx+0C8h] 1 +
jz loc_1009858  +
push dword ptr [ebx+0B0h]  +
lea eax [esi+122Ch] +
push eax  +
push offset aLsScreenshot04  +
lea eax [ebp+var_20C] +
push 104h  +
push eax  +
call sub_1005835  +
add esp 14h +
mov ecx [ebp+arg_10] +
mov eax [ebp+arg_C] +
lea edx [ebp+var_20C] +
push edx  +
lea edx [ebp+var_220C] +
push edx  +
push [ebp+var_2220]  +
lea edx [esi+22Ch] +
push [ebp+var_2224]  +
add esi 24h +
push [ebp+var_2228]  +
push [ebp+var_222C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push edx  +
push esi  +
push ecx  +
push eax  +
push [ebp+arg_18]  +
push [ebp+arg_14]  +
push dword ptr [ebx+7Ch]  +
push offset aDDDI64xLsLsDDD  +
push [ebp+arg_20]  +
push [ebp+var_2214]  +
call sub_1005835  +
add esp 48h +
cmp [ebp+hProcess] 0 +
mov esi eax +
jz loc_10098CD  +
push [ebp+hProcess]  +
call ds:CloseHandle  +
mov ecx [ebp+var_4] +
pop edi  +
mov eax esi +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_101BC5D  +
leave   +
retn 2Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 60h +
mov eax dword_1030118 +
xor eax ebp +
mov [ebp+var_4] eax +
and [ebp+SystemTimeAsFileTime.dwLowDateTime] 0 +
push ebx  +
push esi  +
mov esi [ebp+arg_8] +
push edi  +
xor eax eax +
lea edi [ebp+SystemTimeAsFileTime.dwHighDateTime] +
stos   +
mov edi [ebp+arg_C] +
mov word ptr [ebp+var_44] ax +
mov eax [ebp+arg_18] +
mov [ebp+var_60] eax +
lea eax [ebp+SystemTimeAsFileTime] +
push eax  +
mov ebx ecx +
mov dword ptr [ebp+var_48] 81h +
mov [ebp+var_5C] esi +
mov [ebp+var_58] edi +
call ds:GetSystemTimeAsFileTime  +
mov ecx ebx +
call sub_1008720  +
lea eax [ebp+var_48] +
push eax  +
lea eax [ebp+arg_0] +
push eax  +
mov ecx ebx +
call sub_1007540  +
test eax eax +
jz loc_10099BE  +
mov eax dword ptr [ebp+var_48] +
push eax  +
push offset aD  +
mov [ebp+arg_C4] eax +
lea eax [ebp+var_44] +
push 40h  +
push eax  +
call sub_10067AA  +
add esp 10h +
lea ecx [ebp+var_44] +
push ecx  +
push 2  +
lea eax [ebx+3CA0h] +
push 8000h  +
push eax  +
mov [ebp+var_4C] eax +
call sub_10085A5  +
mov dword ptr [ebp+var_48] eax +
test eax eax +
jge loc_10099AE  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_1009A91  +
test byte ptr [eax+1Ch] 1 +
jz loc_1009A91  +
push dword ptr [ebp+var_48]  +
push offset dword_1001BD0  +
push 16h  +
jmp loc_1009A86  +
mov ecx ebx +
call sub_1008653  +
and dword ptr [ebp+var_48] 0 +
jmp loc_1009AA9  +
call sub_1008653  +
push 8  +
lea ecx [ebp+arg_84] +
push ecx  +
push 8000h  +
lea eax [ebx+3CA0h] +
push eax  +
push [ebp+arg_C4]  +
mov [ebp+var_4C] eax +
push dword ptr [ebx+1Ch]  +
lea eax [ebp+arg_0] +
push [ebp+SystemTimeAsFileTime.dwHighDateTime]  +
mov ecx ebx +
push [ebp+SystemTimeAsFileTime.dwLowDateTime]  +
push edi  +
push esi  +
push eax  +
call sub_10096B5  +
mov dword ptr [ebp+var_48] eax +
test eax eax +
jl loc_1009A6A  +
mov eax [ebx+1Ch] +
sub esp 0CCh +
push 33h  +
pop ecx  +
mov edi esp +
mov [ebp+arg_AC] eax +
lea esi [ebp+arg_0] +
mov [ebx+13CB0h] eax +
movs   +
call sub_1006135  +
inc dword ptr [ebx+1Ch]  +
test [ebp+arg_C8] 1 +
jz loc_1009A35  +
or dword ptr [ebx+13CA0h] 1 +
mov eax [ebp+arg_C4] +
mov [ebx+13CA4h] eax +
mov eax [ebp+arg_A4] +
mov [ebx+13CA8h] eax +
mov eax [ebp+var_5C] +
mov [ebx+13CB4h] eax +
mov eax [ebp+var_58] +
mov [ebx+13CB8h] eax +
mov eax [ebp+var_60] +
mov [ebx+13CACh] eax +
jmp loc_1009A91  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_1009A91  +
test byte ptr [eax+1Ch] 1 +
jz loc_1009A91  +
push dword ptr [ebp+var_48]  +
push offset dword_1001BD0  +
push 17h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10062BE  +
cmp dword ptr [ebp+var_48] 0 +
jge loc_1009AA9  +
push 1001Ch  +
push 0  +
push [ebp+var_4C]  +
call memset  +
add esp 0Ch +
mov ecx [ebp+var_4] +
mov eax dword ptr [ebp+var_48] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_101BC5D  +
leave   +
retn 0CCh  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 48h +
push ebx  +
push esi  +
push edi  +
mov ebx ecx +
xor ecx ecx +
xor eax eax +
mov [ebp+SystemTimeAsFileTime.dwLowDateTime] ecx +
lea edi [ebp+SystemTimeAsFileTime.dwHighDateTime] +
push 38h  +
stos   +
push ecx  +
lea eax [ebp+pwi.rcWindow] +
push eax  +
mov esi 80004005h +
mov [ebp+pwi.cbSize] ecx +
call memset  +
add esp 0Ch +
mov ecx ebx +
call sub_1008653  +
lea eax [ebp+SystemTimeAsFileTime] +
push eax  +
call ds:GetSystemTimeAsFileTime  +
mov eax [ebp+arg_80] +
mov [ebp+hwnd] eax +
lea eax [ebx+23CBCh] +
lea ecx [eax+2] +
mov dx [eax] +
inc eax  +
inc eax  +
test dx dx +
jnz loc_1009B14  +
sub eax ecx +
sar eax 1 +
add eax 400h +
mov edi 8000h +
cmp eax edi +
jbe loc_1009B37  +
mov ecx ebx +
call sub_1008720  +
mov eax [ebp+hwnd] +
cmp eax [ebx+33CBCh] +
jz loc_1009C20  +
mov ecx ebx +
call sub_1008720  +
lea eax [ebp+pwi] +
push eax  +
push [ebp+hwnd]  +
call ds:GetWindowInfo  +
test eax eax +
jnz loc_1009B8F  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_1009C39  +
test byte ptr [eax+1Ch] 1 +
jz loc_1009C39  +
push offset dword_1001BD0  +
push 18h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10054B7  +
jmp loc_1009C39  +
mov ecx [ebp+pwi.rcWindow.left] +
mov eax [ebp+pwi.rcWindow.right] +
add eax ecx +
cdq   +
sub eax edx +
mov edx [ebp+pwi.rcWindow.top] +
mov ecx eax +
mov eax [ebp+pwi.rcWindow.bottom] +
add eax edx +
push 8  +
cdq   +
sub eax edx +
lea edx [ebp+arg_84] +
push edx  +
push edi  +
lea edx [ebx+13CBCh] +
push edx  +
push [ebp+arg_C4]  +
sar eax 1 +
push 0FFFFFFFFh  +
push [ebp+SystemTimeAsFileTime.dwHighDateTime]  +
sar ecx 1 +
push [ebp+SystemTimeAsFileTime.dwLowDateTime]  +
push eax  +
push ecx  +
lea eax [ebp+arg_0] +
push eax  +
mov ecx ebx +
call sub_10096B5  +
mov esi eax +
test esi esi +
jge loc_1009C07  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_1009C39  +
test byte ptr [eax+1Ch] 1 +
jz loc_1009C39  +
movzx ecx si +
push ecx  +
push offset dword_1001BD0  +
push 19h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10062BE  +
jmp loc_1009C39  +
test [ebp+arg_C8] 1 +
jz loc_1009C17  +
or dword ptr [ebx+33CC4h] 1 +
mov eax [ebp+hwnd] +
mov [ebx+33CBCh] eax +
sub esp 0CCh +
push 33h  +
pop ecx  +
mov edi esp +
lea esi [ebp+arg_0] +
movs   +
mov ecx ebx +
call sub_10088DA  +
xor esi esi +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 0CCh  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
mov ebx ecx +
cmp dword ptr [ebx+1C34h] 0 +
push esi  +
push edi  +
mov [ebp+var_4] 1 +
jnz loc_1009C90  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_1009C86  +
test byte ptr [eax+1Ch] 1 +
jz loc_1009C86  +
push offset dword_1001BD0  +
push 11h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10054B7  +
mov edi 80004005h +
jmp loc_1009D27  +
mov esi [ebp+arg_0] +
lea eax [ebp+var_4] +
push eax  +
lea eax [esi+0C4h] +
push eax  +
push esi  +
call sub_10078E9  +
mov edi eax +
test edi edi +
jge loc_1009CD0  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_1009D23  +
test byte ptr [eax+1Ch] 4 +
jz loc_1009D23  +
push offset dword_1001BD0  +
push 12h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10054B7  +
jmp loc_1009D23  +
sub esp 0CCh +
cmp [ebp+var_4] 0 +
push 33h  +
pop ecx  +
mov edi esp +
movs   +
mov ecx ebx +
jz loc_1009CEC  +
call sub_10098E5  +
jmp loc_1009CF1  +
call sub_1009AC2  +
mov edi eax +
test edi edi +
jge loc_1009D21  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_1009D23  +
test byte ptr [eax+1Ch] 1 +
jz loc_1009D23  +
movzx ecx di +
push ecx  +
push offset dword_1001BD0  +
push 13h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10062BE  +
jmp loc_1009D23  +
xor edi edi +
test edi edi +
jge loc_1009D39  +
mov ecx [ebx+1C34h] +
push 2  +
push offset aMissedEventErr  +
call sub_1009EB3  +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push esi  +
lea esi [ecx+18h] +
push esi  +
push 0  +
push 0  +
add ecx 4 +
push ecx  +
call ds:EventRegister  +
test eax eax +
jz loc_1009D9B  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_1009D90  +
test byte ptr [eax+1Ch] 1 +
jz loc_1009D90  +
call ds:GetLastError  +
push eax  +
mov eax off_1030000 +
push offset dword_1001E68  +
push 0Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10062BE  +
and dword ptr [esi] 0 +
and dword ptr [esi+4] 0 +
xor eax eax +
pop esi  +
retn   +
xor eax eax +
inc eax  +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi+18h] +
mov ecx [esi+1Ch] +
test eax eax +
jnz loc_1009DB8  +
test ecx ecx +
jz loc_1009DCD  +
push ecx  +
push eax  +
call ds:EventUnregister  +
and dword ptr [esi+18h] 0 +
and dword ptr [esi+1Ch] 0 +
xor eax eax +
inc eax  +
pop esi  +
retn   +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_1009DF1  +
test byte ptr [eax+1Ch] 1 +
jz loc_1009DF1  +
push offset dword_1001E68  +
push 0Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10054B7  +
xor eax eax +
pop esi  +
retn   +
***
mov edi edi +
push ebx  +
push esi  +
mov esi ecx +
mov edx [esi+28h] +
push edi  +
xor edi edi +
mov ebx 80004005h +
cmp edx edi +
jz loc_1009E84  +
mov eax [esi+20h] +
mov ecx [esi+24h] +
cmp eax edi +
jnz loc_1009E1D  +
cmp ecx edi +
jz loc_1009E84  +
push 1  +
push edx  +
push edi  +
push ecx  +
push eax  +
call ds:ControlTraceW  +
test eax eax +
jz loc_1009E5F  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_1009EA8  +
test byte ptr [eax+1Ch] 1 +
jz loc_1009EA8  +
call ds:GetLastError  +
push eax  +
mov eax off_1030000 +
push offset dword_1001E68  +
push 16h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10062BE  +
jmp loc_1009EA8  +
mov eax [esi+28h] +
mov [esi+20h] edi +
mov [esi+24h] edi +
cmp eax edi +
jz loc_1009E7E  +
push eax  +
push edi  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
mov [esi+28h] edi +
inc dword ptr [esi]  +
xor ebx ebx +
jmp loc_1009EA8  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_1009EA8  +
test byte ptr [eax+1Ch] 1 +
jz loc_1009EA8  +
push offset dword_1001E68  +
push 15h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10054B7  +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ecx+18h] +
mov ecx [ecx+1Ch] +
push esi  +
mov esi 80004005h +
test eax eax +
jnz loc_1009EF2  +
test ecx ecx +
jnz loc_1009EF2  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_1009F3C  +
test byte ptr [eax+1Ch] 1 +
jz loc_1009F3C  +
push offset dword_1001E68  +
push 17h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10054B7  +
jmp loc_1009F3C  +
push [ebp+arg_0]  +
push 0  +
push 0  +
push [ebp+arg_4]  +
push ecx  +
push eax  +
call ds:EventWriteString  +
test eax eax +
jz loc_1009F3A  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_1009F3C  +
test byte ptr [eax+1Ch] 1 +
jz loc_1009F3C  +
call ds:GetLastError  +
push eax  +
mov eax off_1030000 +
push offset dword_1001E68  +
push 18h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10062BE  +
jmp loc_1009F3C  +
xor esi esi +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 70h +
push ebx  +
xor eax eax +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
lea edi [ebp+FileTime.dwHighDateTime] +
stos   +
lea edi [ebp+var_C] +
stos   +
xor ebx ebx +
mov [ebp+LocalFileTime.dwLowDateTime] ebx +
lea edi [ebp+LocalFileTime.dwHighDateTime] +
stos   +
mov [ebp+var_20] ebx +
lea edi [ebp+var_1C] +
stos   +
mov eax [esi] +
mov edi ds:FileTimeToLocalFileTime +
mov [ebp+FileTime.dwLowDateTime] eax +
mov eax [esi+4] +
mov [ebp+FileTime.dwHighDateTime] eax +
mov eax [esi+8] +
mov [ebp+var_10] eax +
mov eax [esi+0Ch] +
mov [ebp+var_C] eax +
lea eax [ebp+LocalFileTime] +
push eax  +
lea eax [ebp+FileTime] +
push eax  +
call edi  +
lea eax [ebp+var_20] +
push eax  +
lea eax [ebp+var_10] +
push eax  +
call edi  +
lea eax [ebp+LocalFileTime] +
push 8  +
mov [ebp+var_70] eax +
pop eax  +
mov [ebp+var_68] eax +
mov [ebp+var_58] eax +
lea eax [esi+10h] +
add esi 14h +
push 4  +
mov [ebp+var_40] esi +
mov esi [ebp+arg_4] +
mov [ebp+var_50] eax +
pop eax  +
lea ecx [ebp+var_20] +
mov [ebp+var_6C] ebx +
mov [ebp+var_64] ebx +
mov [ebp+var_60] ecx +
mov [ebp+var_5C] ebx +
mov [ebp+var_54] ebx +
mov [ebp+var_4C] ebx +
mov [ebp+var_48] eax +
mov [ebp+var_44] ebx +
mov [ebp+var_3C] ebx +
mov [ebp+var_38] eax +
mov [ebp+var_34] ebx +
cmp esi ebx +
jz loc_100A00D  +
mov eax esi +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
cmp cx bx +
jnz loc_1009FF9  +
sub eax edx +
sar eax 1 +
lea eax [eax+eax+2] +
jmp loc_100A00F  +
xor eax eax +
mov [ebp+var_28] eax +
lea eax [ebp+var_70] +
push eax  +
push 5  +
push offset dword_10018E0  +
mov [ebp+var_30] esi +
mov [ebp+var_2C] ebx +
mov [ebp+var_24] ebx +
call sub_101C745  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
and [ebp+var_C] 0 +
and [ebp+var_4] 0 +
lea eax [ebp+arg_0] +
mov [ebp+var_10] eax +
lea eax [ebp+var_10] +
push eax  +
push 1  +
push offset dword_10018F0  +
mov [ebp+var_8] 4 +
call sub_101C745  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 41Ch +
mov eax dword_1030118 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov ebx ecx +
mov [ebp+var_418] 80004005h +
test edi edi +
jnz loc_100A0CB  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_100A0BC  +
test byte ptr [eax+1Ch] 1 +
jz loc_100A0BC  +
push offset dword_1001E68  +
push 0Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10054B7  +
mov [ebp+var_418] 80070057h +
jmp loc_100A3B3  +
cmp dword ptr [ebx+28h] 0 +
jz loc_100A102  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_100A3B3  +
test byte ptr [eax+1Ch] 1 +
jz loc_100A3B3  +
push offset dword_1001E68  +
push 0Dh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10054B7  +
jmp loc_100A3B3  +
mov esi 104h +
push esi  +
lea ecx [ebp+sz] +
lea eax [ebx+4] +
push ecx  +
push eax  +
call ds:StringFromGUID2  +
test eax eax +
jnz loc_100A140  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_100A3B3  +
test byte ptr [eax+1Ch] 1 +
jz loc_100A3B3  +
push offset dword_1001E68  +
push 0Eh  +
jmp loc_100A0F2  +
push dword ptr [ebx]  +
lea eax [ebp+sz] +
push eax  +
push edi  +
push offset aLsLs_D_etl  +
lea eax [ebp+var_414] +
push esi  +
push eax  +
call sub_1005835  +
add esp 18h +
mov [ebp+var_418] eax +
test eax eax +
jge loc_100A197  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_100A3AA  +
test byte ptr [eax+1Ch] 1 +
jz loc_100A3AA  +
movzx ecx word ptr [ebp+var_418] +
push ecx  +
push offset dword_1001E68  +
push 0Fh  +
jmp loc_100A2FB  +
lea eax [ebp+sz] +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_100A1A0  +
sub eax edx +
sar eax 1 +
lea ecx [eax+eax+2] +
lea eax [ebp+var_414] +
mov [ebp+var_418] ecx +
lea edx [eax+2] +
mov si [eax] +
inc eax  +
inc eax  +
test si si +
jnz loc_100A1C1  +
sub eax edx +
sar eax 1 +
lea eax [eax+eax+2] +
lea esi [eax+ecx+78h] +
push esi  +
push 8  +
mov [ebp+var_41C] eax +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov [ebx+28h] eax +
test eax eax +
jnz loc_100A227  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_100A218  +
test byte ptr [eax+1Ch] 1 +
jz loc_100A218  +
push offset dword_1001E68  +
push 10h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10054B7  +
mov [ebp+var_418] 80004005h +
jmp loc_100A3B3  +
mov [eax] esi +
mov eax [ebx+28h] +
mov dword ptr [eax+2Ch] 20000h +
mov edi [ebx+28h] +
mov ecx [ebp+arg_4] +
add edi 18h +
lea esi [ebx+4] +
movs   +
movs   +
movs   +
movs   +
mov eax [ebx+28h] +
mov edi [ebp+var_418] +
mov dword ptr [eax+40h] 20802h +
mov eax [ebx+28h] +
mov [eax+3Ch] ecx +
mov ecx [ebx+28h] +
push 78h  +
pop eax  +
mov [ecx+70h] eax +
mov edx [ebx+28h] +
lea ecx [edi+78h] +
mov [edx+6Ch] ecx +
mov esi [ebx+28h] +
add esi eax +
lea eax [ebp+sz] +
push eax  +
push edi  +
push esi  +
call sub_100671E  +
mov [ebp+var_418] eax +
test eax eax +
jge loc_100A2B3  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_100A3AA  +
test byte ptr [eax+1Ch] 1 +
jz loc_100A3AA  +
movzx ecx word ptr [ebp+var_418] +
push ecx  +
push offset dword_1001E68  +
push 11h  +
jmp loc_100A2FB  +
lea eax [ebp+var_414] +
push eax  +
push [ebp+var_41C]  +
add edi esi +
push edi  +
call sub_100671E  +
mov [ebp+var_418] eax +
test eax eax +
jge loc_100A30B  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_100A3AA  +
test byte ptr [eax+1Ch] 1 +
jz loc_100A3AA  +
movzx ecx word ptr [ebp+var_418] +
push ecx  +
push offset dword_1001E68  +
push 12h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10062BE  +
jmp loc_100A3AA  +
push dword ptr [ebx+28h]  +
lea eax [ebp+sz] +
push eax  +
lea esi [ebx+20h] +
push esi  +
call ds:StartTraceW  +
test eax eax +
jz loc_100A360  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_100A218  +
test byte ptr [eax+1Ch] 1 +
jz loc_100A218  +
call ds:GetLastError  +
push eax  +
push offset dword_1001E68  +
push 13h  +
mov eax off_1030000 +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10062BE  +
jmp loc_100A218  +
push dword ptr [esi+4]  +
lea eax [ebx+4] +
push dword ptr [esi]  +
push eax  +
push 0Fh  +
push 0  +
push 1  +
call ds:EnableTrace  +
test eax eax +
jz loc_100A3A3  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_100A218  +
test byte ptr [eax+1Ch] 1 +
jz loc_100A218  +
call ds:GetLastError  +
push eax  +
push offset dword_1001E68  +
push 14h  +
jmp loc_100A34B  +
and [ebp+var_418] 0 +
cmp [ebp+var_418] 0 +
jge loc_100A3CE  +
mov eax [ebx+28h] +
test eax eax +
jz loc_100A3CE  +
push eax  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
and dword ptr [ebx+28h] 0 +
mov ecx [ebp+var_4] +
mov eax [ebp+var_418] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_101BC5D  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax 2004h +
call __alloca_probe  +
mov eax dword_1030118 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
mov edi ecx +
call ds:GetTickCount  +
sub eax [ebp+arg_0] +
push esi  +
push eax  +
push offset aDLs_  +
lea eax [ebp+var_2004] +
push 1000h  +
push eax  +
call sub_1005835  +
add esp 14h +
test eax eax +
jl loc_100A442  +
push 0  +
lea eax [ebp+var_2004] +
push eax  +
mov ecx edi +
call sub_1009EB3  +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_101BC5D  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
mov eax dword_1030118 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
push edi  +
lea esi [ebp+arg_0] +
lea edi [ebp+var_14] +
movs   +
movs   +
movs   +
mov eax ecx +
movs   +
lea edi [eax+4] +
lea esi [ebp+var_14] +
movs   +
movs   +
xor ecx ecx +
movs   +
mov [eax] ecx +
mov [eax+18h] ecx +
mov [eax+1Ch] ecx +
mov [eax+20h] ecx +
mov [eax+24h] ecx +
mov [eax+28h] ecx +
mov ecx [ebp+var_4] +
movs   +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_101BC5D  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
mov eax dword_1030118 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
push edi  +
mov eax [ebp+arg_0] +
lea esi [ebp+arg_8] +
lea edi [ebp+var_14] +
movs   +
movs   +
movs   +
mov ebx ecx +
or dword ptr [ebx+18h] 0FFFFFFFFh +
movs   +
lea edi [ebx+4] +
lea esi [ebp+var_14] +
movs   +
movs   +
mov [ebx] eax +
movs   +
xor eax eax +
inc eax  +
movs   +
xor esi esi +
mov [ebx+20h] eax +
mov [ebx+1Ch] eax +
mov eax [ebp+arg_4] +
mov [ebx+14h] esi +
mov [ebx+1C34h] eax +
mov [ebx+1C3Ch] esi +
mov [ebx+1C38h] esi +
call ds:GetDoubleClickTime  +
mov edi ds:GetSystemMetrics +
push 24h  +
mov [ebx+1C48h] eax +
call edi  +
push 25h  +
mov [ebx+1C40h] eax +
call edi  +
push 2000h  +
mov [ebx+1C44h] eax +
lea eax [ebx+1C4Ch] +
push esi  +
push eax  +
call memset  +
push 208h  +
lea eax [ebx+24h] +
push esi  +
push eax  +
call memset  +
push 1000h  +
lea eax [ebx+22Ch] +
push esi  +
push eax  +
call memset  +
push 2000Ch  +
lea eax [ebx+13CBCh] +
push esi  +
push eax  +
call memset  +
push 1001Ch  +
lea eax [ebx+3CA0h] +
push esi  +
push eax  +
call memset  +
push 3Ch  +
lea eax [ebx+3C4Ch] +
push esi  +
push eax  +
call memset  +
add esp 48h +
push 6  +
pop ecx  +
xor eax eax +
lea edi [ebx+3C88h] +
stos   +
mov ecx ebx +
call sub_10074D9  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
xor ecx ebp +
call sub_101BC5D  +
leave   +
retn 18h  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi+1C38h] +
test eax eax +
jz loc_100A5D0  +
push eax  +
call GdiplusShutdown  +
mov eax dword_1031680 +
test eax eax +
jz loc_100A5E7  +
push eax  +
call ds:DeleteObject  +
and dword_1031680 0 +
add esi 1C3Ch +
mov eax [esi] +
test eax eax +
jz loc_100A5FC  +
push eax  +
call sub_101C9FD  +
and dword ptr [esi] 0 +
mov eax dword_1031684 +
pop esi  +
test eax eax +
jz locret_100A613  +
push eax  +
call sub_101DED9  +
and dword_1031684 0 +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1009DA5  +
test [ebp+arg_0] 1 +
jz loc_100A633  +
push esi  +
call sub_101B5A8  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_100A5BB  +
test [ebp+arg_0] 1 +
jz loc_100A659  +
push esi  +
call sub_101B5A8  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov eax dword_1031BA4 +
test eax eax +
jz loc_100A686  +
push eax  +
call sub_101C86D  +
push dword_1031BA4  +
call sub_101C9FD  +
and dword_1031BA4 0 +
mov eax dword_1031BA8 +
test eax eax +
jz loc_100A6A7  +
push eax  +
call sub_101C86D  +
push dword_1031BA8  +
call sub_101C9FD  +
and dword_1031BA8 0 +
mov eax dword_1031BAC +
test eax eax +
jz locret_100A6D5  +
push 0  +
push eax  +
call sub_101C7AA  +
push dword_1031BAC  +
call sub_101C86D  +
push dword_1031BAC  +
call sub_101C9FD  +
and dword_1031BAC 0 +
retn   +
***
mov edi edi +
push ebx  +
push esi  +
mov esi ecx +
mov eax [esi+14h] +
xor ebx ebx +
push edi  +
mov edi ds:UnhookWindowsHookEx +
cmp eax ebx +
jz loc_100A6F7  +
push eax  +
call edi  +
mov [esi+14h] ebx +
mov eax [esi+18h] +
cmp eax ebx +
jz loc_100A704  +
push eax  +
call edi  +
mov [esi+18h] ebx +
push dword_1031BA4  +
call sub_101C86D  +
push dword_1031BA8  +
call sub_101C86D  +
push dword_1031BAC  +
call sub_101C86D  +
mov ecx dword_1031B98 +
call sub_1008653  +
mov ecx dword_1031B98 +
call sub_1008720  +
mov ecx dword_1031B98 +
call sub_10074D9  +
mov ecx dword_1031B94 +
push ebx  +
push offset aStoppingEtwSes  +
call sub_1009EB3  +
push 0FAh  +
call ds:Sleep  +
push ebx  +
call sub_1005505  +
mov ecx dword_1031B94 +
call sub_1009DFA  +
mov eax hObject +
cmp eax ebx +
jz loc_100A789  +
push eax  +
call ds:CloseHandle  +
mov hObject ebx +
mov eax Addend +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov dword_1031B90 1 +
retn   +
***
and dword_1031B90 0 +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
push esi  +
call ds:GetTickCount  +
mov esi eax +
lea eax [ebp+var_4] +
push eax  +
call ds:GetDesktopWindow  +
push eax  +
call DRMIsWindowProtected  +
test eax eax +
jge loc_100A7DF  +
xor eax eax +
jmp loc_100A804  +
cmp [ebp+var_4] 0 +
jz loc_100A7F0  +
mov ecx dword_1031B8C +
call sub_10144A9  +
mov ecx dword_1031B94 +
push offset aIsThereAProtec  +
push esi  +
call sub_100A3EA  +
mov eax [ebp+var_4] +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
call ds:GetTickCount  +
mov esi [ebp+8] +
sub eax [esi+0A8h] +
cmp eax 96h +
jb loc_100A841  +
mov ecx dword_1031B94 +
push 2  +
push offset aMissedEventToo  +
call sub_1009EB3  +
mov eax 80004005h +
jmp loc_100A878  +
mov ecx dword_1031B98 +
push edi  +
push esi  +
call sub_1009C47  +
mov edi eax +
test edi edi +
jl loc_100A85F  +
push offset dword_1031B9C  +
call ds:InterlockedIncrement  +
mov ecx dword_1031B94 +
push offset aBasicInfoProce  +
push dword ptr [esi+0A8h]  +
call sub_100A3EA  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+8]  +
mov ecx dword_1031B98 +
call sub_100818A  +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp sub_1006516  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
push edi  +
xor esi esi +
push esi  +
push esi  +
push offset dword_1031BA4  +
mov [ebp+var_4] ecx +
mov edi 80004005h +
call sub_101CC79  +
test eax eax +
jz loc_100A906  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_100A8F7  +
test byte ptr [eax+1Ch] 1 +
jz loc_100A8F7  +
push offset dword_1001EAC  +
push 0Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10054B7  +
mov ecx [ebp+var_4] +
call sub_100A665  +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
push esi  +
push esi  +
push offset dword_1031BA8  +
call sub_101CC79  +
test eax eax +
jz loc_100A931  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_100A8F7  +
test byte ptr [eax+1Ch] 1 +
jz loc_100A8F7  +
push offset dword_1001EAC  +
push 0Bh  +
jmp loc_100A8EC  +
push esi  +
push esi  +
push offset dword_1031BAC  +
call sub_101CC79  +
test eax eax +
jz loc_100A95C  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_100A8F7  +
test byte ptr [eax+1Ch] 1 +
jz loc_100A8F7  +
push offset dword_1001EAC  +
push 0Ch  +
jmp loc_100A8EC  +
push 2  +
push dword_1031BA4  +
call sub_101C7AA  +
test eax eax +
jz loc_100A993  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_100A8F7  +
test byte ptr [eax+1Ch] 1 +
jz loc_100A8F7  +
push offset dword_1001EAC  +
push 0Dh  +
jmp loc_100A8EC  +
push 2  +
push dword_1031BA8  +
call sub_101C7AA  +
test eax eax +
jz loc_100A9CA  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_100A8F7  +
test byte ptr [eax+1Ch] 1 +
jz loc_100A8F7  +
push offset dword_1001EAC  +
push 0Eh  +
jmp loc_100A8EC  +
push 0FFFFFFFFh  +
push dword_1031BAC  +
call sub_101C7AA  +
test eax eax +
jz loc_100AA01  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_100A8F7  +
test byte ptr [eax+1Ch] 1 +
jz loc_100A8F7  +
push offset dword_1001EAC  +
push 0Fh  +
jmp loc_100A8EC  +
xor ebx ebx +
inc ebx  +
push ebx  +
push ebx  +
push dword_1031BA4  +
call sub_101CE7A  +
test eax eax +
jz loc_100AA3A  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_100A8F7  +
test [eax+1Ch] bl +
jz loc_100A8F7  +
push offset dword_1001EAC  +
push 10h  +
jmp loc_100A8EC  +
push ebx  +
push ebx  +
push dword_1031BA8  +
call sub_101CE7A  +
test eax eax +
jz loc_100AA70  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_100A8F7  +
test [eax+1Ch] bl +
jz loc_100A8F7  +
push offset dword_1001EAC  +
push 11h  +
jmp loc_100A8EC  +
push ebx  +
push ebx  +
push dword_1031BAC  +
call sub_101CE7A  +
test eax eax +
jz loc_100AAA6  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_100A8F7  +
test [eax+1Ch] bl +
jz loc_100A8F7  +
push offset dword_1001EAC  +
push 12h  +
jmp loc_100A8EC  +
xor edi edi +
jmp loc_100A8FF  +
***
call __EH_prolog3  +
mov ebx ecx +
mov eax [ebp+8] +
xor esi esi +
push esi  +
mov dword ptr [ebp-10h] 80004005h +
mov [ebx+10h] eax +
call sub_100556D  +
push 30h  +
call sub_101B56A  +
pop ecx  +
cmp eax esi +
jz loc_100AAF7  +
sub esp 10h +
mov edi esp +
mov esi ebx +
movs   +
movs   +
movs   +
mov ecx eax +
movs   +
call sub_100A457  +
xor esi esi +
jmp loc_100AAF9  +
xor eax eax +
mov dword_1031B94 eax +
cmp eax esi +
jnz loc_100AB33  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_100AC55  +
test byte ptr [eax+1Ch] 1 +
jz loc_100AC55  +
push offset dword_1001EAC  +
push 13h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10054B7  +
jmp loc_100AC55  +
mov ecx eax +
call sub_1009F48  +
test eax eax +
jnz loc_100AB61  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_100AC55  +
test byte ptr [eax+1Ch] 1 +
jz loc_100AC55  +
push offset dword_1001EAC  +
push 14h  +
jmp loc_100AB23  +
push 33CC8h  +
call sub_101B56A  +
pop ecx  +
mov ecx eax +
mov [ebp+8] ecx +
mov [ebp-4] esi +
cmp ecx esi +
jz loc_100AB95  +
sub esp 10h +
mov edi esp +
push dword_1031B94  +
mov esi ebx +
push dword ptr [ebx+10h]  +
movs   +
movs   +
movs   +
movs   +
call sub_100A4A9  +
xor esi esi +
jmp loc_100AB97  +
xor eax eax +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov dword_1031B98 eax +
cmp eax esi +
jnz loc_100ABCA  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_100AC55  +
test byte ptr [eax+1Ch] 1 +
jz loc_100AC55  +
push offset dword_1001EAC  +
push 15h  +
jmp loc_100AB23  +
mov ecx eax +
call sub_100910B  +
test eax eax +
jnz loc_100ABF3  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_100AC55  +
test byte ptr [eax+1Ch] 1 +
jz loc_100AC55  +
push offset dword_1001EAC  +
push 16h  +
jmp loc_100AB23  +
mov ecx ebx +
call sub_100A8B0  +
cmp eax esi +
mov [ebp-10h] eax +
jge loc_100AC27  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_100AC50  +
test byte ptr [eax+1Ch] 1 +
jz loc_100AC50  +
push offset dword_1001EAC  +
push 17h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10054B7  +
jmp loc_100AC50  +
push 1  +
call sub_100556D  +
test eax eax +
jnz loc_100AC4D  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_100AC50  +
test byte ptr [eax+1Ch] 1 +
jz loc_100AC50  +
push offset dword_1001EAC  +
push 18h  +
jmp loc_100AC1A  +
mov [ebp-10h] esi +
cmp [ebp-10h] esi +
jge loc_100AC90  +
mov ecx ebx +
call sub_100A665  +
mov ecx dword_1031B98 +
cmp ecx esi +
jz loc_100AC73  +
push 1  +
call sub_100A63F  +
mov dword_1031B98 esi +
push esi  +
call sub_1005505  +
mov ecx dword_1031B94 +
cmp ecx esi +
jz loc_100AC90  +
push 1  +
call sub_100A619  +
mov dword_1031B94 esi +
mov eax [ebp-10h] +
call __EH_epilog3  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push esi  +
push edi  +
call ds:GetTickCount  +
mov esi [ebp+8] +
sub eax [esi+0A8h] +
xor edi edi +
mov [ebp-4] edi +
mov [ebp-8] edi +
cmp eax 96h +
jb loc_100ACE2  +
mov ecx dword_1031B94 +
push edi  +
push offset aMissedScreensh  +
call sub_1009EB3  +
mov eax 80004005h +
jmp loc_100AD81  +
mov ecx dword_1031B98 +
lea eax [ebp-4] +
push eax  +
push esi  +
call sub_1008EFA  +
cmp [ebp-4] edi +
jz loc_100AD5C  +
push dword ptr [ebp-4]  +
lea eax [ebp-8] +
push offset loc_100A8A0  +
push offset loc_100A882  +
push eax  +
push dword_1031BAC  +
call sub_101CB97  +
test eax eax +
jz loc_100AD3D  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_100AD72  +
test byte ptr [eax+1Ch] 1 +
jz loc_100AD72  +
push offset dword_1001EAC  +
push 20h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10054B7  +
jmp loc_100AD72  +
push dword ptr [ebp-8]  +
mov [ebp-4] edi +
push dword_1031BAC  +
call sub_101CEFE  +
push dword ptr [ebp-8]  +
push dword_1031BAC  +
call sub_101C94E  +
mov ecx dword_1031B94 +
push offset aScreenCaptureP  +
push dword ptr [esi+0A8h]  +
call sub_100A3EA  +
cmp [ebp-4] edi +
jz loc_100AD7F  +
push dword ptr [ebp-4]  +
call sub_1006516  +
xor eax eax +
pop edi  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0DCh +
push esi  +
push edi  +
xor esi esi +
xor eax eax +
lea edi [ebp+hHandle] +
push 0C8h  +
mov [ebp+Handles] esi +
stos   +
lea eax [ebp+var_D8] +
push esi  +
push eax  +
mov [ebp+var_8] esi +
mov [ebp+var_4] esi +
mov [ebp+var_DC] esi +
call memset  +
add esp 0Ch +
cmp dword_1031B90 esi +
jnz loc_100AE8D  +
cmp [ebp+arg_0] esi +
jl loc_100AE8D  +
push esi  +
push hObject  +
call ds:WaitForSingleObject  +
test eax eax +
jnz loc_100ADF7  +
push esi  +
call ds:PostQuitMessage  +
jmp loc_100AE8D  +
push ebx  +
mov ebx [ebp+arg_C] +
cmp ebx esi +
mov esi [ebp+lpMem] +
jz loc_100AE0C  +
push 6  +
lea edi [ebp+Point] +
jmp loc_100AE14  +
push 5  +
lea edi [ebp+var_BC] +
pop ecx  +
movs   +
call ds:GetTickCount  +
mov [ebp+var_34] eax +
mov eax [ebp+arg_4] +
mov [ebp+var_38] eax +
lea eax [ebp+pci] +
push eax  +
mov [ebp+var_24] ebx +
mov [ebp+pci.cbSize] 14h +
call ds:GetCursorInfo  +
test eax eax +
jnz loc_100AE93  +
call ds:GetLastError  +
test eax eax +
jnz loc_100AE53  +
mov eax 54Fh +
mov ecx off_1030000 +
cmp ecx offset off_1030000 +
jz loc_100AE7A  +
test byte ptr [ecx+1Ch] 1 +
jz loc_100AE7A  +
push eax  +
push offset dword_1001EAC  +
push 21h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10062BE  +
mov ecx dword_1031B94 +
push 2  +
push offset aMissedEventE_0  +
call sub_1009EB3  +
pop ebx  +
pop edi  +
pop esi  +
leave   +
retn 10h  +
mov ecx dword_1031B98 +
lea eax [ebp+var_DC] +
push eax  +
call sub_10094D6  +
test eax eax +
jnz loc_100AE8C  +
lea eax [ebp+pgui] +
push eax  +
xor edi edi +
push edi  +
mov [ebp+pgui.cbSize] 30h +
call ds:GetGUIThreadInfo  +
test eax eax +
jnz loc_100AEF7  +
call ds:GetLastError  +
cmp eax edi +
jnz loc_100AED6  +
mov eax 54Fh +
mov ecx off_1030000 +
cmp ecx offset off_1030000 +
jz loc_100AE7A  +
test byte ptr [ecx+1Ch] 1 +
jz loc_100AE7A  +
push eax  +
push offset dword_1001EAC  +
push 22h  +
jmp loc_100AE6F  +
cmp ebx edi +
jz loc_100AF12  +
push [ebp+Point.y]  +
push [ebp+Point.x]  +
call ds:WindowFromPoint  +
mov [ebp+var_5C] eax +
jmp loc_100AF41  +
mov eax [ebp+pgui.hwndFocus] +
mov [ebp+var_5C] eax +
cmp eax edi +
jnz loc_100AF76  +
mov eax [ebp+pgui.hwndActive] +
mov [ebp+var_5C] eax +
cmp eax edi +
jnz loc_100AF3B  +
call ds:GetDesktopWindow  +
mov [ebp+var_5C] eax +
mov [ebp+pgui.hwndActive] eax +
mov [ebp+pgui.hwndFocus] eax +
cmp eax edi +
jnz loc_100AF76  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_100AE7A  +
test byte ptr [eax+1Ch] 1 +
jz loc_100AE7A  +
push offset dword_1001EAC  +
push 23h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10054B7  +
jmp loc_100AE7A  +
lea ecx [ebp+dwProcessId] +
push ecx  +
push eax  +
call ds:GetWindowThreadProcessId  +
mov [ebp+var_64] eax +
cmp eax edi +
jnz loc_100AFC0  +
call ds:GetLastError  +
cmp eax edi +
jnz loc_100AF97  +
mov eax 54Fh +
mov ecx off_1030000 +
cmp ecx offset off_1030000 +
jz loc_100AE7A  +
test byte ptr [ecx+1Ch] 1 +
jz loc_100AE7A  +
push eax  +
push offset dword_1001EAC  +
push 24h  +
jmp loc_100AE6F  +
mov ecx dword_1031B98 +
lea eax [ebp+var_DC] +
push eax  +
call sub_1007E8A  +
test eax eax +
jz loc_100B007  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_100AE8C  +
test byte ptr [eax+1Ch] 4 +
jz loc_100AE8C  +
push offset dword_1001EAC  +
push 25h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10054B7  +
jmp loc_100AE8C  +
push offset Addend  +
call ds:InterlockedIncrement  +
mov ecx dword_1031B98 +
xor esi esi +
lea eax [ebp+var_DC] +
cmp [ebp+var_24] edi +
jz loc_100B02E  +
push edi  +
push eax  +
call sub_1007540  +
jmp loc_100B034  +
push eax  +
call sub_10075F2  +
test eax eax +
jnz loc_100B03B  +
xor esi esi +
inc esi  +
call sub_100A7B4  +
test eax eax +
jz loc_100B046  +
xor esi esi +
mov ebx ds:GetProcessHeap +
cmp esi edi +
jz loc_100B130  +
mov ecx dword_1031B98 +
call sub_1007537  +
mov ecx dword_1031B98 +
mov [ebp+var_2C] eax +
call sub_100751D  +
or [ebp+var_14] 1 +
push 0CCh  +
push 8  +
call ebx  +
push eax  +
call ds:HeapAlloc  +
mov [ebp+lpMem] eax +
test eax eax +
jnz loc_100B0AE  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_100AE7A  +
test byte ptr [eax+1Ch] 1 +
jz loc_100AE7A  +
push offset dword_1001EAC  +
push 26h  +
jmp loc_100AF66  +
push 33h  +
pop ecx  +
push eax  +
push offset loc_1007B70  +
mov edi eax +
push offset loc_100ACA0  +
lea eax [ebp+var_4] +
lea esi [ebp+var_DC] +
push eax  +
movs   +
push dword_1031BA8  +
call sub_101CB97  +
test eax eax +
jz loc_100B110  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_100B0FD  +
test byte ptr [eax+1Ch] 1 +
jz loc_100B0FD  +
push offset dword_1001EAC  +
push 27h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10054B7  +
push [ebp+lpMem]  +
push 0  +
call ebx  +
push eax  +
call ds:HeapFree  +
jmp loc_100AE7A  +
push [ebp+var_4]  +
push dword_1031BA8  +
call sub_101CEFE  +
lea eax [ebp+Handles] +
push eax  +
push [ebp+var_4]  +
push dword_1031BA8  +
call sub_101C9BD  +
push 0CCh  +
push 8  +
call ebx  +
push eax  +
call ds:HeapAlloc  +
mov [ebp+lpMem] eax +
test eax eax +
jnz loc_100B16D  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_100AE7A  +
test byte ptr [eax+1Ch] 1 +
jz loc_100AE7A  +
push offset dword_1001EAC  +
push 28h  +
jmp loc_100AF66  +
push 33h  +
pop ecx  +
push eax  +
push offset loc_1007B70  +
mov edi eax +
push offset loc_100A80C  +
lea eax [ebp+var_8] +
lea esi [ebp+var_DC] +
push eax  +
movs   +
push dword_1031BA4  +
call sub_101CB97  +
test eax eax +
jz loc_100B1BE  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_100B0FD  +
test byte ptr [eax+1Ch] 1 +
jz loc_100B0FD  +
push offset dword_1001EAC  +
push 29h  +
jmp loc_100B0F2  +
push [ebp+var_8]  +
push dword_1031BA4  +
call sub_101CEFE  +
lea eax [ebp+hHandle] +
push eax  +
push [ebp+var_8]  +
push dword_1031BA4  +
call sub_101C9BD  +
xor esi esi +
push 0FAh  +
cmp [ebp+Handles] esi +
jz loc_100B1FA  +
push 1  +
lea eax [ebp+Handles] +
push eax  +
push 2  +
call ds:WaitForMultipleObjects  +
jmp loc_100B203  +
push [ebp+hHandle]  +
call ds:WaitForSingleObject  +
push [ebp+hHandle]  +
push [ebp+var_8]  +
push dword_1031BA4  +
call sub_101C9E2  +
push [ebp+var_8]  +
push dword_1031BA4  +
call sub_101C94E  +
cmp [ebp+Handles] esi +
jz loc_100B24B  +
cmp [ebp+var_4] esi +
jz loc_100B24B  +
push [ebp+Handles]  +
push [ebp+var_4]  +
push dword_1031BA8  +
call sub_101C9E2  +
push [ebp+var_4]  +
push dword_1031BA8  +
call sub_101C94E  +
mov ecx dword_1031B94 +
push offset aHookEventProce  +
push [ebp+var_34]  +
call sub_100A3EA  +
jmp loc_100AE8C  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax 20234h +
call __alloca_probe  +
mov eax dword_1030118 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
push edi  +
xor ecx ecx +
xor eax eax +
mov [ebp+SystemTimeAsFileTime.dwLowDateTime] ecx +
lea edi [ebp+SystemTimeAsFileTime.dwHighDateTime] +
stos   +
mov [ebp+var_20224] ecx +
lea edi [ebp+var_20220] +
stos   +
lea eax [ebp+SystemTimeAsFileTime] +
push eax  +
mov [ebp+lpMem] ecx +
mov [ebp+var_20214] ecx +
call ds:GetSystemTimeAsFileTime  +
mov esi ds:InterlockedIncrement +
push offset dword_1031BB0  +
call esi  +
push offset Addend  +
mov [ebp+var_20220] eax +
call esi  +
mov ecx dword_1031B98 +
call sub_1008653  +
mov ecx dword_1031B98 +
call sub_1008720  +
push dword ptr [ebx+38h]  +
mov esi 8000h +
push esi  +
lea eax [ebp+var_2020C] +
push eax  +
call sub_10066E4  +
test eax eax +
jge loc_100B310  +
xor eax eax +
mov [ebp+var_1020E] ax +
push esi  +
lea eax [ebp+var_2020C] +
push eax  +
call sub_10064D4  +
mov ecx dword_1031B98 +
push 104h  +
lea eax [ebp+var_20C] +
push eax  +
call sub_1008585  +
mov esi eax +
test esi esi +
jl loc_100B4A1  +
lea eax [ebp+lpMem] +
push eax  +
call sub_10066A6  +
mov esi eax +
test esi esi +
jl loc_100B4A1  +
mov edi [ebp+lpMem] +
push 0Ah  +
pop ecx  +
mov esi ebx +
push ebx  +
movs   +
call sub_101D563  +
push [ebp+var_20220]  +
lea eax [ebp+var_20C] +
push eax  +
mov eax [ebp+lpMem] +
push offset aLsComment04d_j  +
add eax 38h +
push 104h  +
push eax  +
call sub_1005835  +
mov esi eax +
add esp 14h +
test esi esi +
jl loc_100B4A1  +
add ebx 28h +
push ebx  +
lea eax [ebp+var_20234] +
push eax  +
call sub_101E7E9  +
push [ebp+var_20228]  +
mov ecx [ebp+SystemTimeAsFileTime.dwHighDateTime] +
push [ebp+var_2022C]  +
mov eax [ebp+SystemTimeAsFileTime.dwLowDateTime] +
push [ebp+var_20230]  +
push [ebp+var_20234]  +
push ecx  +
push eax  +
mov eax [ebp+lpMem] +
push dword ptr [eax+24h]  +
add eax 38h +
push dword ptr [eax-18h]  +
push dword ptr [eax-1Ch]  +
push dword ptr [eax-20h]  +
push eax  +
lea eax [ebp+var_2020C] +
push eax  +
push offset aWsWsDDDDI64xDD  +
lea eax [ebp+var_1020C] +
push 8000h  +
push eax  +
call sub_1005835  +
mov esi eax +
add esp 3Ch +
test esi esi +
jl loc_100B4A1  +
push [ebp+lpMem]  +
lea eax [ebp+var_20214] +
push offset loc_100A8A0  +
push offset loc_100A882  +
push eax  +
push dword_1031BAC  +
call sub_101CB97  +
test eax eax +
jz loc_100B446  +
jle loc_100B442  +
and eax 0FFFFh +
or eax 80070000h +
mov esi eax +
jmp loc_100B49D  +
push [ebp+var_20214]  +
and [ebp+lpMem] 0 +
push dword_1031BAC  +
call sub_101CEFE  +
push [ebp+var_20214]  +
push dword_1031BAC  +
call sub_101C94E  +
mov ecx dword_1031B94 +
and [ebp+var_20214] 0 +
push 0Eh  +
lea eax [ebp+var_1020C] +
push eax  +
call sub_1009EB3  +
mov esi eax +
test esi esi +
jl loc_100B4A1  +
push offset dword_1031B9C  +
call ds:InterlockedIncrement  +
xor esi esi +
test esi esi +
jge loc_100B4D8  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_100B4C6  +
test byte ptr [eax+1Ch] 1 +
jz loc_100B4C6  +
push esi  +
push offset dword_1001EAC  +
push 1Fh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10062BE  +
mov ecx dword_1031B94 +
push 2  +
push offset aMissedEventFai  +
call sub_1009EB3  +
cmp [ebp+var_20214] 0 +
jz loc_100B4F2  +
push [ebp+var_20214]  +
push dword_1031BAC  +
call sub_101C94E  +
cmp [ebp+lpMem] 0 +
jz loc_100B506  +
push [ebp+lpMem]  +
call sub_1006516  +
mov ecx [ebp+var_4] +
pop edi  +
mov eax esi +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_101BC5D  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 1  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call sub_100AD8C  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push 0  +
call ds:CallNextHookEx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+lpMem]  +
push [ebp+wParam]  +
push [ebp+nCode]  +
call sub_100AD8C  +
push [ebp+lpMem]  +
push [ebp+wParam]  +
push [ebp+nCode]  +
push 0  +
call ds:CallNextHookEx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov ebx ecx +
xor edi edi +
mov esi 80004005h +
cmp [ebx+14h] edi +
jnz loc_100B704  +
cmp [ebx+18h] edi +
jnz loc_100B704  +
push offset Name  +
push edi  +
push 1  +
push edi  +
mov dword_1031B90 edi +
mov dword_1031B9C edi +
mov Addend edi +
call ds:CreateEventW  +
mov hObject eax +
cmp eax edi +
jnz loc_100B5FA  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_100B72C  +
test byte ptr [eax+1Ch] 1 +
jz loc_100B72C  +
push offset dword_1001EAC  +
push 1Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10054B7  +
jmp loc_100B72C  +
mov eax [ebx+10h] +
push dword ptr [eax+3Ch]  +
mov ecx dword_1031B94 +
push [ebp+arg_0]  +
call sub_100A06D  +
mov esi eax +
cmp esi edi +
jge loc_100B63A  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_100B728  +
test byte ptr [eax+1Ch] 1 +
jz loc_100B728  +
push offset dword_1001EAC  +
push 1Bh  +
jmp loc_100B71D  +
push dword_1031B94  +
call sub_1005505  +
mov ecx dword_1031B94 +
push edi  +
push offset aStartingEtwSes  +
call sub_1009EB3  +
push [ebp+arg_0]  +
mov ecx dword_1031B98 +
call sub_1008522  +
mov esi eax +
cmp esi edi +
jge loc_100B690  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_100B728  +
test byte ptr [eax+1Ch] 1 +
jz loc_100B728  +
push offset dword_1001EAC  +
push 1Ch  +
jmp loc_100B71D  +
mov esi ds:SetWindowsHookExW +
push edi  +
push edi  +
push offset fn  +
push 0Dh  +
call esi  +
mov [ebx+14h] eax +
cmp eax edi +
jnz loc_100B6D3  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_100B6CC  +
test byte ptr [eax+1Ch] 1 +
jz loc_100B6CC  +
push offset dword_1001EAC  +
push 1Dh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10054B7  +
mov esi 80004005h +
jmp loc_100B72C  +
push edi  +
push edi  +
push offset loc_100B51E  +
push 0Eh  +
call esi  +
mov [ebx+18h] eax +
cmp eax edi +
jnz loc_100B700  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_100B6CC  +
test byte ptr [eax+1Ch] 1 +
jz loc_100B6CC  +
push offset dword_1001EAC  +
push 1Eh  +
jmp loc_100B6C1  +
xor esi esi +
jmp loc_100B733  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_100B72C  +
test byte ptr [eax+1Ch] 1 +
jz loc_100B72C  +
push offset dword_1001EAC  +
push 19h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10054B7  +
cmp esi edi +
jge loc_100B733  +
mov ecx ebx +
call sub_100A6DB  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx ecx +
push ebx  +
push edi  +
xor ebx ebx +
push 0Ah  +
xor eax eax +
mov [edx] ebx +
pop ecx  +
lea edi [edx+8] +
stos   +
mov eax [ebp+arg_0] +
mov [edx+30h] eax +
mov eax [ebp+arg_4] +
mov [edx+34h] eax +
lea eax [edx+3Ch] +
mov [edx+38h] ebx +
mov [eax+4] eax +
mov [eax] eax +
pop edi  +
mov [edx+44h] ebx +
mov [edx+48h] ebx +
mov [edx+4Ch] ebx +
mov [edx+50h] ebx +
mov [edx+54h] bl +
mov eax edx +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push esi  +
lea esi [ecx+3Ch] +
jmp loc_100B7A2  +
mov ecx [esi] +
mov eax [ecx] +
mov [esi] eax +
push ecx  +
mov [eax+4] esi +
call sub_102066D  +
cmp [esi] esi +
jnz loc_100B793  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push 4  +
lea eax [ebp+arg_18] +
push eax  +
push 4  +
lea eax [ebp+arg_14] +
push eax  +
push 4  +
lea eax [ebp+arg_10] +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_C]  +
push 2Bh  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call TraceMessage  +
add esp 30h +
pop ebp  +
retn 1Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_10] +
test edx edx +
jz loc_100B816  +
cmp word ptr [edx] 0 +
jnz loc_100B7FB  +
push 0Eh  +
jmp loc_100B818  +
mov eax edx +
push esi  +
lea esi [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_100B801  +
sub eax esi +
sar eax 1 +
lea eax [eax+eax+2] +
pop esi  +
jmp loc_100B819  +
push 0Ah  +
pop eax  +
test edx edx +
jz loc_100B82A  +
cmp word ptr [edx] 0 +
jnz loc_100B82F  +
mov edx offset aNull +
jmp loc_100B82F  +
mov edx offset aNull_0 +
push 0  +
push eax  +
push edx  +
push [ebp+arg_8]  +
push [ebp+arg_C]  +
push 2Bh  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call TraceMessage  +
add esp 20h +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_14] +
push ebx  +
push esi  +
push edi  +
test edx edx +
jz loc_100B88C  +
cmp word ptr [edx] 0 +
jnz loc_100B870  +
mov [ebp+arg_14] 0Eh +
jmp loc_100B893  +
mov eax edx +
lea esi [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_100B875  +
sub eax esi +
sar eax 1 +
lea eax [eax+eax+2] +
mov [ebp+arg_14] eax +
jmp loc_100B893  +
mov [ebp+arg_14] 0Ah +
mov ebx offset aNull_0 +
test edx edx +
jz loc_100B8A9  +
cmp word ptr [edx] 0 +
jnz loc_100B8AB  +
mov edx offset aNull +
jmp loc_100B8AB  +
mov edx ebx +
mov edi [ebp+arg_10] +
test edi edi +
jz loc_100B8D5  +
cmp word ptr [edi] 0 +
jnz loc_100B8BC  +
push 0Eh  +
jmp loc_100B8D7  +
mov eax edi +
lea esi [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_100B8C1  +
sub eax esi +
sar eax 1 +
lea ecx [eax+eax+2] +
jmp loc_100B8D8  +
push 0Ah  +
pop ecx  +
test edi edi +
jz loc_100B8ED  +
cmp word ptr [edi] 0 +
jnz loc_100B8E9  +
mov eax offset aNull +
jmp loc_100B8EF  +
mov eax edi +
jmp loc_100B8EF  +
mov eax ebx +
push 0  +
push 4  +
lea esi [ebp+arg_18] +
push esi  +
push [ebp+arg_14]  +
push edx  +
push ecx  +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_C]  +
push 2Bh  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call TraceMessage  +
add esp 30h +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 1Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_100B78B  +
test [ebp+arg_0] 1 +
jz loc_100B939  +
push esi  +
call sub_101B5A8  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 214h +
mov eax dword_1030118 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_C] +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
mov esi [ebp+pszPath] +
push edi  +
mov edi [ebp+arg_8] +
push esi  +
mov [ebp+lpszFile] eax +
mov [ebp+var_210] 80004005h +
call ds:PathFindExtensionW  +
test eax eax +
jnz loc_100B9A7  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_100BA35  +
test byte ptr [eax+1Ch] 1 +
jz loc_100BA35  +
push offset dword_10022B4  +
push 17h  +
jmp loc_100BA21  +
push edi  +
push eax  +
call ds:_wcsicmp  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_100B9C1  +
mov [ebp+var_210] 1 +
jmp loc_100BA35  +
push [ebp+lpszFile]  +
lea eax [ebp+ExistingFileName] +
push ebx  +
push eax  +
call ds:PathCombineW  +
test eax eax +
jnz loc_100B9F4  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_100BA35  +
test byte ptr [eax+1Ch] 1 +
jz loc_100BA35  +
push offset dword_10022B4  +
push 18h  +
jmp loc_100BA21  +
push 3  +
push esi  +
lea eax [ebp+ExistingFileName] +
push eax  +
call ds:MoveFileExW  +
test eax eax +
jnz loc_100BA2E  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_100BA35  +
test byte ptr [eax+1Ch] 1 +
jz loc_100BA35  +
push offset dword_10022B4  +
push 19h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10054B7  +
jmp loc_100BA35  +
and [ebp+var_210] 0 +
mov ecx [ebp+var_4] +
mov eax [ebp+var_210] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_101BC5D  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 128h +
mov eax dword_1030118 +
xor eax ebp +
mov [ebp+var_4] eax +
and [ebp+var_128] 0 +
push esi  +
push 118h  +
lea eax [ebp+VersionInformation.dwMajorVersion] +
push 0  +
push eax  +
mov esi ecx +
mov [ebp+var_124] 80004005h +
call memset  +
add esp 0Ch +
lea eax [ebp+VersionInformation] +
push eax  +
mov [ebp+VersionInformation.dwOSVersionInfoSize] 11Ch +
call ds:GetVersionExW  +
test eax eax +
jnz loc_100BACE  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_100BB4C  +
test byte ptr [eax+1Ch] 1 +
jz loc_100BB4C  +
push offset dword_10022B4  +
push 21h  +
jmp loc_100BB2F  +
mov eax [ebp+VersionInformation.dwBuildNumber] +
movzx ecx [ebp+var_A] +
mov edx [ebp+VersionInformation.dwMinorVersion] +
push ebx  +
push edi  +
mov edi [ebp+VersionInformation.dwMajorVersion] +
mov [esi+10h] eax +
movzx eax [ebp+var_C] +
lea ebx [ebp+var_128] +
push ebx  +
push ecx  +
push eax  +
push edx  +
push edi  +
mov [esi+4] edx +
mov [esi] edi +
mov [esi+8] eax +
mov [esi+0Ch] ecx +
mov dword ptr [esi+18h] 1 +
call ds:GetProductInfo  +
pop edi  +
pop ebx  +
test eax eax +
jnz loc_100BB3C  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_100BB4C  +
test byte ptr [eax+1Ch] 1 +
jz loc_100BB4C  +
push offset dword_10022B4  +
push 22h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10054B7  +
jmp loc_100BB4C  +
mov eax [ebp+var_128] +
and [ebp+var_124] 0 +
mov [esi+14h] eax +
mov ecx [ebp+var_4] +
mov eax [ebp+var_124] +
xor ecx ebp +
pop esi  +
call sub_101BC5D  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax 2004h +
call __alloca_probe  +
mov eax dword_1030118 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov edi [ebp+arg_4] +
push 0Ah  +
push 1000h  +
lea eax [ebp+var_2004] +
push eax  +
push [ebp+arg_8]  +
mov ebx 80004005h +
call _itow_s  +
add esp 10h +
test eax eax +
jz loc_100BBCE  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_100BC11  +
test byte ptr [eax+1Ch] 1 +
jz loc_100BC11  +
push offset dword_10022B4  +
push 33h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10054B7  +
jmp loc_100BC11  +
mov eax [esi] +
lea ecx [ebp+var_2004] +
push ecx  +
push 0  +
push edi  +
push 0  +
push esi  +
call dword ptr [eax+1Ch]  +
test eax eax +
jge loc_100BC0F  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_100BC11  +
test byte ptr [eax+1Ch] 1 +
jz loc_100BC11  +
push 4005h  +
push offset dword_10022B4  +
push 34h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10062BE  +
jmp loc_100BC11  +
xor ebx ebx +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
mov eax ebx +
xor ecx ebp +
pop ebx  +
call sub_101BC5D  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax 2030h +
call __alloca_probe  +
mov eax dword_1030118 +
xor eax ebp +
mov [ebp+var_4] eax +
xor eax eax +
push ebx  +
mov [ebp+UniversalTime.wYear] ax +
push esi  +
push edi  +
lea edi [ebp+FileTime.dwHighDateTime] +
stos   +
lea edi [ebp+UniversalTime.wMonth] +
stos   +
stos   +
stos   +
stos   +
xor eax eax +
mov [ebp+Time.wYear] ax +
mov esi [ebp+arg_0] +
mov ebx [ebp+arg_4] +
lea edi [ebp+Time.wMonth] +
stos   +
stos   +
stos   +
stos   +
mov eax [ebp+arg_8] +
mov [ebp+FileTime.dwLowDateTime] eax +
mov eax [ebp+arg_C] +
mov [ebp+FileTime.dwHighDateTime] eax +
lea eax [ebp+UniversalTime] +
push eax  +
lea eax [ebp+FileTime] +
push eax  +
mov [ebp+var_2008] 80004005h +
call ds:FileTimeToSystemTime  +
test eax eax +
jnz loc_100BCD1  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_100BDA3  +
test byte ptr [eax+1Ch] 1 +
jz loc_100BDA3  +
push offset dword_10022B4  +
push 35h  +
jmp loc_100BD48  +
lea eax [ebp+Time] +
push eax  +
lea eax [ebp+UniversalTime] +
push eax  +
xor edi edi +
push edi  +
call ds:SystemTimeToTzSpecificLocalTime  +
test eax eax +
jnz loc_100BD0F  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_100BDA3  +
test byte ptr [eax+1Ch] 1 +
jz loc_100BDA3  +
push offset dword_10022B4  +
push 36h  +
jmp loc_100BD48  +
push 1000h  +
lea eax [ebp+TimeStr] +
push eax  +
push edi  +
lea eax [ebp+Time] +
push eax  +
push edi  +
push edi  +
call ds:GetTimeFormatW  +
test eax eax +
jnz loc_100BD55  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_100BDA3  +
test byte ptr [eax+1Ch] 1 +
jz loc_100BDA3  +
push offset dword_10022B4  +
push 37h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10054B7  +
jmp loc_100BDA3  +
mov eax [esi] +
lea ecx [ebp+TimeStr] +
push ecx  +
push edi  +
push ebx  +
push edi  +
push esi  +
call dword ptr [eax+1Ch]  +
cmp eax edi +
mov [ebp+var_2008] eax +
jge loc_100BD9D  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_100BDA3  +
test byte ptr [eax+1Ch] 1 +
jz loc_100BDA3  +
movzx ecx word ptr [ebp+var_2008] +
push ecx  +
push offset dword_10022B4  +
push 38h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10062BE  +
jmp loc_100BDA3  +
mov [ebp+var_2008] edi +
mov ecx [ebp+var_4] +
mov eax [ebp+var_2008] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_101BC5D  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov ebx eax +
mov esi edx +
xor eax eax +
xor edi edi +
test esi esi +
jz loc_100BDF4  +
cmp [ebp+arg_4] eax +
jz loc_100BDF0  +
movzx edx word ptr [ebx] +
test dx dx +
jz loc_100BDF0  +
mov [ecx] dx +
inc ecx  +
inc ecx  +
inc ebx  +
inc ebx  +
dec esi  +
dec [ebp+arg_4]  +
inc edi  +
test esi esi +
jnz loc_100BDD3  +
test esi esi +
jnz loc_100BDFC  +
dec ecx  +
dec ecx  +
dec edi  +
mov eax 8007007Ah +
xor edx edx +
mov [ecx] dx +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_100BE0A  +
mov [ecx] edi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push ebx  +
push esi  +
push edi  +
push 0  +
push offset aSystem  +
push 0  +
mov edi ecx +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+6Ch]  +
mov esi [ebp+arg_4] +
mov ebx eax +
test ebx ebx +
jge loc_100BE70  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_100C099  +
test byte ptr [eax+1Ch] 1 +
jz loc_100C099  +
movzx ecx bx +
push ecx  +
push offset dword_10022B4  +
push 2Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10062BE  +
jmp loc_100C099  +
push dword ptr [edi]  +
push offset aMajorversion  +
push [ebp+arg_0]  +
call sub_100BB64  +
mov [ebp+arg_4] eax +
test eax eax +
jge loc_100BEC2  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_100BEB2  +
test byte ptr [eax+1Ch] 1 +
jz loc_100BEB2  +
movzx ecx word ptr [ebp+arg_4] +
push ecx  +
mov ebx offset dword_10022B4 +
push ebx  +
push 2Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10062BE  +
jmp loc_100BEB7  +
mov ebx offset dword_10022B4 +
mov eax [ebp+arg_4] +
inc dword ptr [esi+4Ch]  +
mov [esi+48h] eax +
jmp loc_100BEC7  +
mov ebx offset dword_10022B4 +
push dword ptr [edi+4]  +
push offset aMinorversion  +
push [ebp+arg_0]  +
call sub_100BB64  +
mov [ebp+arg_4] eax +
test eax eax +
jge loc_100BF0C  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_100BF03  +
test byte ptr [eax+1Ch] 1 +
jz loc_100BF03  +
movzx ecx word ptr [ebp+arg_4] +
push ecx  +
push ebx  +
push 2Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10062BE  +
mov eax [ebp+arg_4] +
inc dword ptr [esi+4Ch]  +
mov [esi+48h] eax +
push dword ptr [edi+8]  +
push offset aServicepackmaj  +
push [ebp+arg_0]  +
call sub_100BB64  +
mov [ebp+arg_4] eax +
test eax eax +
jge loc_100BF51  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_100BF48  +
test byte ptr [eax+1Ch] 1 +
jz loc_100BF48  +
movzx ecx word ptr [ebp+arg_4] +
push ecx  +
push ebx  +
push 2Dh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10062BE  +
mov eax [ebp+arg_4] +
inc dword ptr [esi+4Ch]  +
mov [esi+48h] eax +
push dword ptr [edi+0Ch]  +
push offset aServicepackmin  +
push [ebp+arg_0]  +
call sub_100BB64  +
mov [ebp+arg_4] eax +
test eax eax +
jge loc_100BF96  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_100BF8D  +
test byte ptr [eax+1Ch] 1 +
jz loc_100BF8D  +
movzx ecx word ptr [ebp+arg_4] +
push ecx  +
push ebx  +
push 2Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10062BE  +
mov eax [ebp+arg_4] +
inc dword ptr [esi+4Ch]  +
mov [esi+48h] eax +
push dword ptr [edi+10h]  +
push offset aBuildnumber  +
push [ebp+arg_0]  +
call sub_100BB64  +
mov [ebp+arg_4] eax +
test eax eax +
jge loc_100BFDB  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_100BFD2  +
test byte ptr [eax+1Ch] 1 +
jz loc_100BFD2  +
movzx ecx word ptr [ebp+arg_4] +
push ecx  +
push ebx  +
push 2Fh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10062BE  +
mov eax [ebp+arg_4] +
inc dword ptr [esi+4Ch]  +
mov [esi+48h] eax +
push dword ptr [edi+14h]  +
push offset aSku  +
push [ebp+arg_0]  +
call sub_100BB64  +
mov [ebp+arg_4] eax +
test eax eax +
jge loc_100C020  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_100C017  +
test byte ptr [eax+1Ch] 1 +
jz loc_100C017  +
movzx ecx word ptr [ebp+arg_4] +
push ecx  +
push ebx  +
push 30h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10062BE  +
mov eax [ebp+arg_4] +
inc dword ptr [esi+4Ch]  +
mov [esi+48h] eax +
push dword ptr [edi+18h]  +
push offset aPlatform  +
push [ebp+arg_0]  +
call sub_100BB64  +
mov edi eax +
test edi edi +
jge loc_100C060  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_100C05A  +
test byte ptr [eax+1Ch] 1 +
jz loc_100C05A  +
movzx ecx di +
push ecx  +
push ebx  +
push 31h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10062BE  +
inc dword ptr [esi+4Ch]  +
mov [esi+48h] edi +
mov eax [ebp+arg_0] +
mov ecx [eax] +
push eax  +
xor ebx ebx +
call dword ptr [ecx+3Ch]  +
test eax eax +
jge loc_100C0A3  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_100C094  +
test byte ptr [eax+1Ch] 1 +
jz loc_100C094  +
push ebx  +
push offset dword_10022B4  +
push 32h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10062BE  +
mov ebx 80004005h +
test ebx ebx +
jge loc_100C0A3  +
inc dword ptr [esi+4Ch]  +
mov [esi+48h] ebx +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax dword_1031FF4 +
sub esp 30h +
push edi  +
test eax 0FFFFFFE0h +
jnz loc_100C0FA  +
and dword_1031FF0 0 +
and eax 1Fh +
or eax 800h +
and eax 0FFFFFFE0h +
mov dword_1031FF4 eax +
mov edi offset unk_1032000 +
mov eax offset dword_1031FF0 +
push 40h  +
or eax 1 +
pop ecx  +
mov dword_1031FF8 edi +
stos   +
jmp loc_100C32B  +
push ebx  +
push esi  +
mov esi dword_1031FF8 +
mov edi esi +
mov [ebp+var_1C] edi +
mov ebx 80000002h +
test edi edi +
jz loc_100C132  +
mov ecx [edi] +
and ecx ebx +
cmp ecx ebx +
jnz loc_100C12B  +
mov eax large ds:0 +
mov edi [ebp+var_1C] +
mov esi dword_1031FF8 +
mov eax dword_1031FF4 +
mov ecx [edi] +
test cl 1 +
jz loc_100C14D  +
mov edx eax +
shr edx 5 +
lea ecx [edi+4] +
lea edx [esi+edx*4] +
jmp loc_100C147  +
test byte ptr [ecx] 1 +
jz loc_100C159  +
add ecx 4 +
cmp ecx edx +
jb loc_100C13F  +
xor ecx ecx +
mov edi ecx +
test ecx ecx +
jz loc_100C329  +
jmp loc_100C170  +
mov ecx [ecx] +
jmp loc_100C14D  +
mov esi dword_1031FF8 +
mov eax dword_1031FF4 +
mov edi [ebp+var_C] +
mov ebx 80000002h +
test edi edi +
jz loc_100C1C0  +
or edx 0FFFFFFFFh +
mov ecx eax +
and ecx 1Fh +
shl edx cl +
mov ebx eax +
shr ebx 5 +
mov [ebp+var_14] edi +
and edx [edi+4] +
movzx ecx dl +
add ecx 0B15DCBh +
imul ecx ecx +
mov [ebp+var_4] edx +
movzx edx dh +
add ecx edx +
movzx edx byte ptr [ebp+var_4+2] +
imul ecx ecx +
add ecx edx +
movzx edx byte ptr [ebp+var_4+3] +
imul ecx ecx +
add ecx edx +
mov edx ecx +
lea ecx [ebx-1] +
and ecx edx +
lea ecx [esi+ecx*4] +
mov ebx 80000002h +
jmp loc_100C1C5  +
mov ecx esi +
mov [ebp+var_14] ecx +
mov edx [ebp+var_14] +
mov [ebp+var_10] ecx +
test edx edx +
jz loc_100C1F9  +
mov ecx [edx] +
and ecx ebx +
cmp ecx ebx +
jnz loc_100C1E7  +
mov eax large ds:0 +
mov esi dword_1031FF8 +
mov eax dword_1031FF4 +
mov ecx [ebp+var_14] +
mov ecx [ecx] +
test cl 1 +
jnz loc_100C1F6  +
mov [ebp+var_4] ecx +
jmp loc_100C216  +
mov ecx [ebp+var_10] +
mov edx eax +
add ecx 4 +
shr edx 5 +
lea edx [esi+edx*4] +
jmp loc_100C20E  +
test byte ptr [ecx] 1 +
jz loc_100C26D  +
add ecx 4 +
cmp ecx edx +
jb loc_100C206  +
and [ebp+var_4] 0 +
mov ecx [ebp+var_4] +
mov [ebp+var_C] ecx +
mov ecx eax +
and ecx 1Fh +
or edx 0FFFFFFFFh +
shl edx cl +
shr eax 5 +
and edx [edi+4] +
movzx ecx dl +
add ecx 0B15DCBh +
imul ecx ecx +
mov [ebp+var_8] edx +
movzx edx dh +
add ecx edx +
movzx edx byte ptr [ebp+var_8+2] +
imul ecx ecx +
add ecx edx +
movzx edx byte ptr [ebp+var_8+3] +
imul ecx ecx +
add ecx edx +
dec eax  +
and eax ecx +
mov ecx [edi] +
and ecx ebx +
lea eax [esi+eax*4] +
mov [ebp+var_28] eax +
cmp ecx ebx +
jnz loc_100C279  +
mov eax large ds:0 +
mov eax [ebp+var_28] +
jmp loc_100C279  +
mov ecx [ecx] +
jmp loc_100C1F1  +
mov ecx [eax] +
cmp ecx edi +
jz loc_100C2A4  +
mov eax ecx +
test byte ptr [eax] 1 +
jz loc_100C271  +
mov eax large ds:0 +
mov eax [edi+8] +
mov ebx ds:GetProcessHeap +
test eax eax +
jz loc_100C2B2  +
push eax  +
push 0  +
call ebx  +
mov esi ds:HeapFree +
push eax  +
call esi  +
and dword ptr [edi+8] 0 +
jmp loc_100C2B8  +
mov ecx [edi] +
mov [eax] ecx +
dec dword_1031FF0  +
or [edi] ebx +
jmp loc_100C283  +
mov esi ds:HeapFree +
mov eax [edi+0Ch] +
test eax eax +
jz loc_100C2CB  +
push eax  +
push 0  +
call ebx  +
push eax  +
call esi  +
and dword ptr [edi+0Ch] 0 +
mov eax [edi+10h] +
test eax eax +
jz loc_100C2DE  +
push eax  +
push 0  +
call ebx  +
push eax  +
call esi  +
and dword ptr [edi+10h] 0 +
mov eax [edi+14h] +
test eax eax +
jz loc_100C2F1  +
push eax  +
push 0  +
call ebx  +
push eax  +
call esi  +
and dword ptr [edi+14h] 0 +
mov eax [edi+18h] +
test eax eax +
jz loc_100C304  +
push eax  +
push 0  +
call ebx  +
push eax  +
call esi  +
and dword ptr [edi+18h] 0 +
mov eax [edi+1Ch] +
test eax eax +
jz loc_100C317  +
push eax  +
push 0  +
call ebx  +
push eax  +
call esi  +
and dword ptr [edi+1Ch] 0 +
push edi  +
push 0  +
call ebx  +
push eax  +
call esi  +
cmp [ebp+var_4] 0 +
jnz loc_100C15D  +
pop esi  +
pop ebx  +
pop edi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax dword_1031BE8 +
sub esp 30h +
push edi  +
test eax 0FFFFFFE0h +
jnz loc_100C37E  +
and dword_1031BE4 0 +
and eax 1Fh +
or eax 2000h +
and eax 0FFFFFFE0h +
mov dword_1031BE8 eax +
mov edi offset unk_1031BF0 +
mov eax offset dword_1031BE4 +
or eax 1 +
mov ecx 100h +
mov dword_1031BEC edi +
stos   +
jmp loc_100C53E  +
push esi  +
mov esi dword_1031BEC +
mov ecx esi +
mov [ebp+var_1C] ecx +
mov edi 80000002h +
test ecx ecx +
jz loc_100C3B9  +
mov edx [ecx] +
and edx edi +
cmp edx edi +
jnz loc_100C3AE  +
mov eax large ds:0 +
mov ecx [ebp+var_1C] +
mov esi dword_1031BEC +
mov eax dword_1031BE8 +
mov edx [ecx] +
test dl 1 +
jnz loc_100C3B9  +
mov ecx edx +
jmp loc_100C3D4  +
mov edx eax +
add ecx 4 +
shr edx 5 +
lea edx [esi+edx*4] +
jmp loc_100C3CE  +
test byte ptr [ecx] 1 +
jz loc_100C3E2  +
add ecx 4 +
cmp ecx edx +
jb loc_100C3C6  +
xor ecx ecx +
mov [ebp+var_8] ecx +
test ecx ecx +
jz loc_100C53D  +
push ebx  +
jmp loc_100C3F1  +
mov ecx [ecx] +
jmp loc_100C3D4  +
mov esi dword_1031BEC +
mov eax dword_1031BE8 +
mov ebx [ebp+var_8] +
test ebx ebx +
jz loc_100C446  +
or edx 0FFFFFFFFh +
mov ecx eax +
and ecx 1Fh +
shl edx cl +
mov ecx ebx +
mov edi eax +
shr edi 5 +
and edx [ecx+4] +
mov [ebp+var_14] ebx +
movzx ecx dl +
add ecx 0B15DCBh +
imul ecx ecx +
mov [ebp+var_8] edx +
movzx edx dh +
add ecx edx +
movzx edx byte ptr [ebp+var_8+2] +
imul ecx ecx +
add ecx edx +
movzx edx byte ptr [ebp+var_8+3] +
imul ecx ecx +
add ecx edx +
mov edx ecx +
lea ecx [edi-1] +
and ecx edx +
lea ecx [esi+ecx*4] +
mov edi 80000002h +
jmp loc_100C44B  +
mov ecx esi +
mov [ebp+var_14] ecx +
mov edx [ebp+var_14] +
mov [ebp+var_10] ecx +
test edx edx +
jz loc_100C47F  +
mov ecx [edx] +
and ecx edi +
cmp ecx edi +
jnz loc_100C46D  +
mov eax large ds:0 +
mov esi dword_1031BEC +
mov eax dword_1031BE8 +
mov ecx [ebp+var_14] +
mov ecx [ecx] +
test cl 1 +
jnz loc_100C47C  +
mov [ebp+var_4] ecx +
jmp loc_100C49C  +
mov ecx [ebp+var_10] +
mov edx eax +
add ecx 4 +
shr edx 5 +
lea edx [esi+edx*4] +
jmp loc_100C494  +
test byte ptr [ecx] 1 +
jz loc_100C4F3  +
add ecx 4 +
cmp ecx edx +
jb loc_100C48C  +
and [ebp+var_4] 0 +
mov ecx [ebp+var_4] +
mov [ebp+var_8] ecx +
mov ecx eax +
and ecx 1Fh +
or edx 0FFFFFFFFh +
shl edx cl +
shr eax 5 +
and edx [ebx+4] +
movzx ecx dl +
add ecx 0B15DCBh +
imul ecx ecx +
mov [ebp+var_C] edx +
movzx edx dh +
add ecx edx +
movzx edx byte ptr [ebp+var_C+2] +
imul ecx ecx +
add ecx edx +
movzx edx byte ptr [ebp+var_C+3] +
imul ecx ecx +
add ecx edx +
dec eax  +
and eax ecx +
mov ecx [ebx] +
and ecx edi +
lea eax [esi+eax*4] +
mov [ebp+var_28] eax +
cmp ecx edi +
jnz loc_100C4FF  +
mov eax large ds:0 +
mov eax [ebp+var_28] +
jmp loc_100C4FF  +
mov ecx [ecx] +
jmp loc_100C477  +
mov ecx [eax] +
cmp ecx ebx +
jz loc_100C541  +
mov eax ecx +
test byte ptr [eax] 1 +
jz loc_100C4F7  +
mov eax large ds:0 +
mov eax [ebx+8] +
xor esi esi +
cmp eax esi +
jz loc_100C524  +
push eax  +
push esi  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
mov [ebx+8] esi +
push ebx  +
push esi  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
cmp [ebp+var_4] esi +
jnz loc_100C3E6  +
pop ebx  +
pop esi  +
pop edi  +
leave   +
retn   +
mov ecx [ebx] +
mov [eax] ecx +
dec dword_1031BE4  +
or [ebx] edi +
jmp loc_100C509  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi ds:GetProcessHeap +
push 0Ch  +
push 8  +
call edi  +
push eax  +
call ds:HeapAlloc  +
mov esi eax +
test esi esi +
jnz loc_100C580  +
mov [ebp+arg_4] 8007000Eh +
jmp loc_100C62C  +
mov eax [ebp+arg_0] +
mov [esi+4] eax +
mov eax [ebp+arg_4] +
lea ecx [eax+2] +
mov dx [eax] +
inc eax  +
inc eax  +
test dx dx +
jnz loc_100C58C  +
sub eax ecx +
push ebx  +
sar eax 1 +
push eax  +
push [ebp+arg_4]  +
lea eax [esi+8] +
push eax  +
call sub_1006DA1  +
mov [ebp+arg_4] eax +
test eax eax +
jl loc_100C606  +
mov ecx dword_1031BE8 +
mov edx ecx +
and ecx 1Fh +
or ebx 0FFFFFFFFh +
shl ebx cl +
shr edx 5 +
and ebx [esi+4] +
movzx eax bl +
add eax 0B15DCBh +
imul eax eax +
movzx ecx bh +
add eax ecx +
imul eax eax +
mov [ebp+arg_4] ebx +
movzx ecx byte ptr [ebp+arg_4+2] +
add eax ecx +
movzx ecx byte ptr [ebp+arg_4+3] +
imul eax eax +
add eax ecx +
dec edx  +
and edx eax +
mov eax dword_1031BEC +
lea eax [eax+edx*4] +
mov ecx [eax] +
mov [esi] ecx +
mov [eax] esi +
inc dword_1031BE4  +
xor esi esi +
mov [ebp+arg_4] esi +
test esi esi +
jz loc_100C62B  +
mov eax [esi+8] +
mov ebx ds:HeapFree +
test eax eax +
jz loc_100C623  +
push eax  +
push 0  +
call edi  +
push eax  +
call ebx  +
and dword ptr [esi+8] 0 +
push esi  +
push 0  +
call edi  +
push eax  +
call ebx  +
pop ebx  +
mov eax [ebp+arg_4] +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx dword_1031BE8 +
mov ecx edx +
and ecx 1Fh +
push esi  +
or esi 0FFFFFFFFh +
shl esi cl +
shr edx 5 +
mov ecx esi +
and ecx [ebp+arg_0] +
mov [ebp+arg_0] ecx +
test edx edx +
jz loc_100C6A5  +
movzx eax cl +
add eax 0B15DCBh +
imul eax eax +
push edi  +
movzx edi ch +
add eax edi +
movzx edi byte ptr [ebp+arg_0+2] +
imul eax eax +
add eax edi +
movzx edi byte ptr [ebp+arg_0+3] +
imul eax eax +
add eax edi +
dec edx  +
and edx eax +
mov eax dword_1031BEC +
lea eax [eax+edx*4] +
pop edi  +
jmp loc_100C699  +
mov edx [eax+4] +
and edx esi +
cmp ecx edx +
jz loc_100C6A1  +
mov eax [eax] +
test al 1 +
jz loc_100C690  +
xor eax eax +
test eax eax +
jnz loc_100C6A9  +
xor eax eax +
jmp loc_100C6AC  +
mov eax [eax+8] +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_4] +
xor eax eax +
mov ecx 80070057h +
test edx edx +
jz loc_100C6D1  +
cmp edx 7FFFFFFFh +
jbe loc_100C6D3  +
mov eax ecx +
test eax eax +
jl loc_100C6FC  +
cmp [ebp+arg_C] 7FFFFFFEh +
jbe loc_100C6EC  +
mov edx [ebp+arg_0] +
mov eax ecx +
xor ecx ecx +
mov [edx] cx +
jmp loc_100C6FC  +
push [ebp+arg_C]  +
mov eax [ebp+arg_8] +
mov ecx [ebp+arg_0] +
push 0  +
call sub_100BDBF  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
xor eax eax +
test ecx ecx +
jz loc_100C71B  +
cmp ecx 7FFFFFFFh +
jbe loc_100C720  +
mov eax 80070057h +
test eax eax +
jl loc_100C75D  +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
lea eax [ebp+arg_C] +
push eax  +
push [ebp+arg_8]  +
lea esi [ecx-1] +
push esi  +
push edi  +
xor ebx ebx +
call ds:__imp__vsnprintf  +
add esp 10h +
test eax eax +
jl loc_100C750  +
cmp eax esi +
ja loc_100C750  +
jnz loc_100C758  +
mov [esi+edi] bl +
jmp loc_100C758  +
mov [esi+edi] bl +
mov ebx 8007007Ah +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 40h +
mov eax dword_1030118 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov edi ecx +
push dword ptr [edi+4Ch]  +
lea eax [ebp+var_40] +
push offset aD  +
push 3Ch  +
push eax  +
call sub_10067AA  +
mov eax [esi] +
add esp 10h +
lea ecx [ebp+var_40] +
push ecx  +
push 0  +
push offset aFailurecount  +
push 0  +
push esi  +
call dword ptr [eax+34h]  +
push dword ptr [edi+48h]  +
lea eax [ebp+var_40] +
push offset a0x08x  +
push 3Ch  +
push eax  +
call sub_10067AA  +
mov eax [esi] +
add esp 10h +
lea ecx [ebp+var_40] +
push ecx  +
push 0  +
push offset aFailurelast  +
push 0  +
push esi  +
call dword ptr [eax+34h]  +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_101BC5D  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 420h +
mov eax dword_1030118 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push ebx  +
push esi  +
mov esi [ebp+arg_4] +
mov ecx [esi+8] +
push edi  +
mov [ebp+var_420] eax +
mov eax [ebp+arg_8] +
mov [ebp+var_418] ecx +
xor ecx ecx +
push eax  +
mov [ebp+lpExistingFileName] eax +
mov edi 104h +
mov word ptr [ebp+pszPath] cx +
mov word ptr [ebp+NewFileName] cx +
mov ecx [ebp+arg_C] +
push edi  +
lea eax [ebp+pszPath] +
push eax  +
mov [esi+0B8h] ecx +
call sub_10066E4  +
mov ebx eax +
test ebx ebx +
jge loc_100C872  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_100CA2C  +
test byte ptr [eax+1Ch] 1 +
jz loc_100CA2C  +
push offset dword_10022B4  +
push 4Dh  +
jmp loc_100CA1D  +
lea eax [ebp+pszPath] +
push eax  +
call ds:PathRemoveFileSpecW  +
lea eax [ebp+pszPath] +
push eax  +
call ds:PathRemoveBackslashW  +
push [ebp+arg_C]  +
lea eax [ebp+pszPath] +
push eax  +
push offset aLsScreenshot_0  +
lea eax [ebp+NewFileName] +
push edi  +
push eax  +
call sub_1005835  +
mov ebx eax +
add esp 14h +
test ebx ebx +
jge loc_100C8D7  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_100CA2C  +
test byte ptr [eax+1Ch] 1 +
jz loc_100CA2C  +
push offset dword_10022B4  +
push 4Eh  +
jmp loc_100CA1D  +
push 3  +
lea eax [ebp+NewFileName] +
push eax  +
push [ebp+lpExistingFileName]  +
call ds:MoveFileExW  +
test eax eax +
jnz loc_100C952  +
call ds:GetLastError  +
test eax eax +
jnz loc_100C901  +
mov eax 54Fh +
test eax eax +
mov ebx eax +
jle loc_100C911  +
and ebx 0FFFFh +
or ebx 80070000h +
mov ecx off_1030000 +
cmp ecx offset off_1030000 +
jz loc_100CA2C  +
test byte ptr [ecx+1Ch] 1 +
jz loc_100CA2C  +
push eax  +
lea eax [ebp+NewFileName] +
push eax  +
push [ebp+lpExistingFileName]  +
push offset dword_10022B4  +
push 4Fh  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_100B852  +
jmp loc_100CA2C  +
lea edx [ebp+NewFileName] +
mov eax edx +
lea edi [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_100C95D  +
sub eax edi +
sar eax 1 +
push eax  +
push edx  +
lea eax [esi+60h] +
push eax  +
call sub_101F899  +
mov ebx 80070000h +
test eax eax +
jz loc_100C996  +
jle loc_100C988  +
and eax 0FFFFh +
or eax ebx +
mov edi [ebp+var_418] +
inc dword ptr [edi+4Ch]  +
mov [edi+48h] eax +
jmp loc_100C99C  +
mov edi [ebp+var_418] +
lea eax [ebp+NewFileName] +
push eax  +
call ds:PathFindFileNameW  +
mov [ebp+var_418] eax +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_100C9B2  +
sub eax edx +
sar eax 1 +
push eax  +
push [ebp+var_418]  +
add esi 54h +
push esi  +
call sub_101F899  +
test eax eax +
jz loc_100C9E3  +
jle loc_100C9DD  +
and eax 0FFFFh +
or eax ebx +
inc dword ptr [edi+4Ch]  +
mov [edi+48h] eax +
push [ebp+var_418]  +
mov eax [ebp+var_420] +
mov ecx [eax] +
push 0  +
push offset aScreenshotfile  +
push 0  +
push eax  +
call dword ptr [ecx+34h]  +
mov ebx eax +
test ebx ebx +
jge loc_100CA2A  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_100CA2C  +
test byte ptr [eax+1Ch] 1 +
jz loc_100CA2C  +
push offset dword_10022B4  +
push 50h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10054B7  +
jmp loc_100CA2C  +
xor ebx ebx +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
mov eax ebx +
xor ecx ebp +
pop ebx  +
call sub_101BC5D  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax 1218h +
call __alloca_probe  +
mov eax dword_1030118 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push ebx  +
mov ebx [ebp+arg_8] +
push esi  +
push edi  +
mov edi [ebp+arg_4] +
mov ecx [edi+8] +
mov [ebp+var_1214] eax +
mov eax [ebp+arg_C] +
mov [ebp+var_1210] ecx +
xor ecx ecx +
mov [ebp+var_1218] edi +
cmp cx [eax] +
jz loc_100CC98  +
push eax  +
push 1000h  +
lea eax [ebp+pszPath] +
push eax  +
call sub_100671E  +
mov esi eax +
test esi esi +
jge loc_100CACA  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_100CC9A  +
test byte ptr [eax+1Ch] 1 +
jz loc_100CC9A  +
push offset dword_10022B4  +
push 6Eh  +
jmp loc_100CC8B  +
lea eax [ebp+pszPath] +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_100CAD3  +
sub eax edx +
sar eax 1 +
push 0  +
pop edx  +
jz loc_100CB00  +
push 27h  +
lea ecx [ebp+edx*2+pszPath] +
pop esi  +
cmp si [ecx] +
jnz loc_100CAFB  +
push 20h  +
pop esi  +
mov [ecx] si +
inc edx  +
cmp edx eax +
jb loc_100CAE6  +
lea eax [ebp+pszPath] +
push eax  +
call ds:PathRemoveBlanksW  +
push ebx  +
call ds:PathFindFileNameW  +
mov ebx eax +
lea ecx [eax+2] +
mov dx [eax] +
inc eax  +
inc eax  +
test dx dx +
jnz loc_100CB19  +
sub eax ecx +
sar eax 1 +
push eax  +
push ebx  +
add edi 24h +
push edi  +
call sub_101F899  +
test eax eax +
jz loc_100CB4E  +
jle loc_100CB42  +
and eax 0FFFFh +
or eax 80070000h +
mov ecx [ebp+var_1210] +
inc dword ptr [ecx+4Ch]  +
mov [ecx+48h] eax +
mov esi ds:wcsstr +
lea eax [ebp+pszPath] +
push ebx  +
push eax  +
call esi  +
mov edi eax +
pop ecx  +
pop ecx  +
test edi edi +
jnz loc_100CC14  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_100CB8E  +
test byte ptr [eax+1Ch] 1 +
jz loc_100CB8E  +
push offset dword_10022B4  +
push 6Fh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10054B7  +
push ebx  +
push 208h  +
lea eax [ebp+var_20C] +
push eax  +
call sub_100671E  +
lea eax [ebp+var_20C] +
push eax  +
call ds:PathRemoveExtensionW  +
lea eax [ebp+var_20C] +
push eax  +
lea eax [ebp+pszPath] +
push eax  +
call esi  +
mov edi eax +
pop ecx  +
pop ecx  +
test edi edi +
jnz loc_100CC14  +
mov eax off_1030000 +
mov ebx offset off_1030000 +
cmp eax ebx +
jz loc_100CC0C  +
test byte ptr [eax+1Ch] 1 +
jz loc_100CBF0  +
push offset dword_10022B4  +
push 70h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10054B7  +
mov eax off_1030000 +
cmp eax ebx +
jz loc_100CC0C  +
test byte ptr [eax+1Ch] 1 +
jz loc_100CC0C  +
push offset dword_10022B4  +
push 71h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10054B7  +
lea edi [ebp+pszPath] +
jmp loc_100CC19  +
mov ebx offset off_1030000 +
mov eax edi +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_100CC1E  +
sub eax edx +
sar eax 1 +
push eax  +
mov eax [ebp+var_1218] +
push edi  +
add eax 18h +
push eax  +
call sub_101F899  +
test eax eax +
jz loc_100CC59  +
jle loc_100CC4D  +
and eax 0FFFFh +
or eax 80070000h +
mov ecx [ebp+var_1210] +
inc dword ptr [ecx+4Ch]  +
mov [ecx+48h] eax +
mov eax [ebp+var_1214] +
mov ecx [eax] +
push edi  +
push 0  +
push offset aCommandline  +
push 0  +
push eax  +
call dword ptr [ecx+1Ch]  +
mov esi eax +
test esi esi +
jge loc_100CC98  +
mov eax off_1030000 +
cmp eax ebx +
jz loc_100CC9A  +
test byte ptr [eax+1Ch] 1 +
jz loc_100CC9A  +
push offset dword_10022B4  +
push 72h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10054B7  +
jmp loc_100CC9A  +
xor esi esi +
mov ecx [ebp+var_4] +
pop edi  +
mov eax esi +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_101BC5D  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2E8h +
mov eax dword_1030118 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_4] +
mov ecx [ebp+arg_8] +
mov edx [ebp+arg_C] +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
push 34h  +
mov [ebp+var_2AC] eax +
lea eax [ebp+var_2E8] +
push 0  +
push eax  +
mov [ebp+var_2B0] offset aFileversion +
mov [ebp+var_2A8] offset aFiledescriptio +
mov [ebp+var_2A4] ecx +
mov [ebp+var_2A0] offset aCompanyname +
mov [ebp+var_29C] edx +
mov [ebp+var_294] 409h +
call memset  +
add esp 0Ch +
lea eax [ebp+dwHandle] +
push eax  +
push esi  +
call GetFileVersionInfoSizeW  +
mov edi eax +
test edi edi +
jnz loc_100CD4B  +
call ds:GetLastError  +
test eax eax +
jnz loc_100CD44  +
mov eax 54Fh +
mov esi eax +
jmp loc_100CE87  +
push ebx  +
push edi  +
push 8  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov ebx eax +
test ebx ebx +
jnz loc_100CD6A  +
push 8  +
pop esi  +
jmp loc_100CE72  +
push ebx  +
push edi  +
push 0  +
push esi  +
call GetFileVersionInfoW  +
test eax eax +
jnz loc_100CD8E  +
call ds:GetLastError  +
test eax eax +
jnz loc_100CD87  +
mov eax 54Fh +
mov esi eax +
jmp loc_100CE72  +
lea eax [ebp+lpMem] +
push eax  +
lea eax [ebp+lpBuffer] +
push eax  +
push offset SubBlock  +
push ebx  +
call VerQueryValueW  +
test eax eax +
jnz loc_100CDB7  +
lea eax [ebp+var_2E8] +
mov [ebp+lpBuffer] eax +
lea eax [ebp+lpMem] +
push eax  +
lea eax [ebp+var_28C] +
push eax  +
push offset aVarfileinfoTra  +
push ebx  +
call VerQueryValueW  +
test eax eax +
jnz loc_100CDE2  +
lea eax [ebp+var_294] +
mov [ebp+var_28C] eax +
jmp loc_100CDE8  +
mov eax [ebp+var_28C] +
movzx ecx word ptr [eax+2] +
movzx eax word ptr [eax] +
push ecx  +
push eax  +
push offset aStringfileinfo  +
lea eax [ebp+var_84] +
push 80h  +
push eax  +
call sub_10067AA  +
add esp 14h +
xor esi esi +
push [ebp+esi*8+var_2B0]  +
lea eax [ebp+var_84] +
push eax  +
push offset aWsWs_1  +
lea eax [ebp+SubBlock] +
push 200h  +
push eax  +
call sub_10067AA  +
add esp 14h +
lea eax [ebp+lpMem] +
push eax  +
lea eax [ebp+var_290] +
push eax  +
lea eax [ebp+SubBlock] +
push eax  +
push ebx  +
call VerQueryValueW  +
test eax eax +
jz loc_100CE6A  +
push [ebp+lpMem]  +
push [ebp+var_290]  +
push [ebp+esi*8+var_2AC]  +
call sub_1006DA1  +
inc esi  +
cmp esi 3 +
jb loc_100CE0C  +
xor esi esi +
test ebx ebx +
jz loc_100CE86  +
push ebx  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
pop ebx  +
mov ecx [ebp+var_4] +
pop edi  +
mov eax esi +
xor ecx ebp +
pop esi  +
call sub_101BC5D  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
mov eax esi +
push edi  +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_100CEB3  +
sub eax edx +
sar eax 1 +
mov ebx eax +
mov eax [ebp+arg_8] +
lea ecx [eax+2] +
mov dx [eax] +
inc eax  +
inc eax  +
test dx dx +
jnz loc_100CEC9  +
sub eax ecx +
sar eax 1 +
cmp [ebp+arg_14] 0 +
mov edi eax +
jz loc_100CEE7  +
mov ecx [ebp+arg_10] +
xor eax eax +
mov [ecx] ax +
mov eax [ebp+arg_4] +
cmp eax ebx +
jbe loc_100CF14  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_100CF94  +
test byte ptr [eax+1Ch] 1 +
jz loc_100CF94  +
push offset dword_10022B4  +
push 87h  +
jmp loc_100CF76  +
push [ebp+arg_8]  +
lea eax [esi+eax*2] +
mov esi ds:wcsstr +
push eax  +
call esi  +
mov ebx eax +
pop ecx  +
pop ecx  +
test ebx ebx +
jz loc_100CF94  +
push [ebp+arg_C]  +
add edi edi +
lea eax [edi+ebx] +
push eax  +
mov [ebp+arg_8] eax +
call esi  +
mov esi eax +
pop ecx  +
pop ecx  +
test esi esi +
jz loc_100CF94  +
sub eax edi +
sub eax ebx +
sar eax 1 +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_14]  +
push [ebp+arg_10]  +
call sub_100C6B6  +
test eax eax +
jge loc_100CF83  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_100CF94  +
test byte ptr [eax+1Ch] 1 +
jz loc_100CF94  +
push offset dword_10022B4  +
push 88h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10054B7  +
jmp loc_100CF94  +
sub esi [ebp+arg_0] +
mov eax [ebp+arg_18] +
sar esi 1 +
mov [eax] esi +
mov [ebp+var_4] 1 +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 1Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax 201Ch +
call __alloca_probe  +
mov eax dword_1030118 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
mov ecx [ebp+arg_4] +
push ebx  +
push esi  +
push eax  +
push 1000h  +
lea eax [ebp+var_2004] +
push eax  +
mov [ebp+var_2014] ecx +
xor esi esi +
call sub_10066E4  +
mov ebx eax +
test ebx ebx +
jl loc_100D215  +
lea eax [ebp+var_2004] +
push eax  +
call ds:_wcsupr  +
lea eax [ebp+var_2004] +
pop ecx  +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_100CFFF  +
sub eax edx +
sar eax 1 +
mov ecx eax +
mov [ebp+lpMem] ecx +
push edi  +
add ecx ecx +
cmp ecx 8 +
mov edi 4CB2Fh +
lea eax [ebp+var_2004] +
mov [ebp+var_2010] edi +
jl loc_100D099  +
mov edx ecx +
shr edx 3 +
mov edi edx +
imul edi edi +
add ecx edi +
movzx edi byte ptr [eax+1] +
movzx ebx byte ptr [eax+2] +
imul edi edi +
add edi ebx +
movzx ebx byte ptr [eax+3] +
imul edi edi +
add edi ebx +
movzx ebx byte ptr [eax+4] +
imul edi edi +
add edi ebx +
movzx ebx byte ptr [eax+5] +
imul edi edi +
add edi ebx +
movzx ebx byte ptr [eax+6] +
imul edi edi +
add edi ebx +
mov ebx [ebp+var_2010] +
imul edi edi +
imul ebx ebx +
sub edi ebx +
movzx ebx byte ptr [eax] +
imul ebx ebx +
add edi ebx +
movzx ebx byte ptr [eax+7] +
add edi ebx +
add eax 8 +
dec edx  +
mov [ebp+var_2010] edi +
jnz loc_100D03A  +
dec ecx  +
jz loc_100D0E4  +
dec ecx  +
jz loc_100D0DB  +
dec ecx  +
jz loc_100D0D2  +
dec ecx  +
jz loc_100D0C9  +
dec ecx  +
jz loc_100D0C0  +
dec ecx  +
jz loc_100D0B7  +
dec ecx  +
jnz loc_100D0F2  +
movzx ecx byte ptr [eax] +
imul edi edi +
add edi ecx +
inc eax  +
movzx ecx byte ptr [eax] +
imul edi edi +
add edi ecx +
inc eax  +
movzx ecx byte ptr [eax] +
imul edi edi +
add edi ecx +
inc eax  +
movzx ecx byte ptr [eax] +
imul edi edi +
add edi ecx +
inc eax  +
movzx ecx byte ptr [eax] +
imul edi edi +
add edi ecx +
inc eax  +
movzx ecx byte ptr [eax] +
imul edi edi +
add edi ecx +
inc eax  +
movzx eax byte ptr [eax] +
imul edi edi +
add edi eax +
mov [ebp+var_2010] edi +
mov ecx dword_1031FF4 +
and [ebp+var_2008] esi +
and ecx 1Fh +
or eax 0FFFFFFFFh +
shl eax cl +
mov edx edi +
mov edi 0B15DCBh +
and edx eax +
mov [ebp+var_201C] eax +
mov [ebp+var_200C] edx +
mov eax [ebp+var_2008] +
test eax eax +
jnz loc_100D175  +
mov ecx dword_1031FF4 +
shr ecx 5 +
test ecx ecx +
jz loc_100D227  +
movzx eax dl +
add eax edi +
imul eax eax +
movzx ebx dh +
add eax ebx +
movzx ebx byte ptr [ebp+var_200C+2] +
imul eax eax +
add eax ebx +
movzx ebx byte ptr [ebp+var_200C+3] +
imul eax eax +
add eax ebx +
dec ecx  +
and ecx eax +
mov eax dword_1031FF8 +
lea eax [eax+ecx*4] +
jmp loc_100D175  +
mov ecx [eax+4] +
and ecx [ebp+var_201C] +
cmp edx ecx +
jz loc_100D1C2  +
mov eax [eax] +
test al 1 +
jz loc_100D168  +
and [ebp+var_2008] esi +
cmp [ebp+var_2008] esi +
jz loc_100D227  +
mov ecx [ebp+var_2008] +
mov ecx [ecx+8] +
lea eax [ebp+var_2004] +
mov bx [ecx] +
cmp bx [eax] +
jnz loc_100D1CA  +
test bx bx +
jz loc_100D1BE  +
mov bx [ecx+2] +
cmp bx [eax+2] +
jnz loc_100D1CA  +
add ecx 4 +
add eax 4 +
test bx bx +
jnz loc_100D19C  +
xor eax eax +
jmp loc_100D1CF  +
mov [ebp+var_2008] eax +
jmp loc_100D181  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
test eax eax +
jnz loc_100D11B  +
mov eax [ebp+var_2008] +
mov ecx [ebp+var_2014] +
mov [ecx] eax +
xor ebx ebx +
test esi esi +
jz loc_100D214  +
mov eax [esi+8] +
mov edi ds:HeapFree +
test eax eax +
jz loc_100D208  +
push eax  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call edi  +
and dword ptr [esi+8] 0 +
push esi  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call edi  +
pop edi  +
mov ecx [ebp+var_4] +
pop esi  +
mov eax ebx +
xor ecx ebp +
pop ebx  +
call sub_101BC5D  +
leave   +
retn 8  +
push 24h  +
push 8  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov esi eax +
test esi esi +
jnz loc_100D245  +
mov ebx 8007000Eh +
jmp loc_100D1E7  +
mov eax [ebp+var_2010] +
push [ebp+lpMem]  +
mov [esi+4] eax +
lea eax [ebp+var_2004] +
push eax  +
lea eax [esi+8] +
push eax  +
call sub_1006DA1  +
mov ebx eax +
test ebx ebx +
jl loc_100D1E7  +
mov ecx dword_1031FF4 +
mov edx ecx +
and ecx 1Fh +
or ebx 0FFFFFFFFh +
shl ebx cl +
shr edx 5 +
and ebx [esi+4] +
movzx eax bl +
add eax edi +
imul eax eax +
movzx ecx bh +
add eax ecx +
imul eax eax +
mov [ebp+var_200C] ebx +
movzx ecx byte ptr [ebp+var_200C+2] +
add eax ecx +
movzx ecx byte ptr [ebp+var_200C+3] +
imul eax eax +
add eax ecx +
dec edx  +
and edx eax +
mov eax dword_1031FF8 +
lea eax [eax+edx*4] +
mov ecx [eax] +
mov [esi] ecx +
mov [eax] esi +
inc dword_1031FF0  +
mov eax [ebp+var_2014] +
mov [eax] esi +
xor ebx ebx +
jmp loc_100D214  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 22Ch +
mov eax dword_1030118 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
xor eax eax +
push esi  +
push edi  +
mov [ebp+UniversalTime.wYear] ax +
mov esi [ebp+arg_0] +
lea edi [ebp+UniversalTime.wMonth] +
stos   +
stos   +
mov ebx [ebp+arg_4] +
stos   +
stos   +
xor eax eax +
mov [ebp+LocalTime.wYear] ax +
lea edi [ebp+LocalTime.wMonth] +
stos   +
stos   +
stos   +
push esi  +
stos   +
push 208h  +
lea eax [ebp+pszPath] +
push eax  +
call sub_100671E  +
mov edi eax +
test edi edi +
jge loc_100D365  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_100D442  +
test byte ptr [eax+1Ch] 1 +
jz loc_100D442  +
movzx ecx di +
push ecx  +
push offset dword_10022B4  +
push 89h  +
jmp loc_100D437  +
lea eax [ebp+pszPath] +
push eax  +
call ds:PathRemoveExtensionW  +
push esi  +
call ds:PathFindExtensionW  +
mov esi eax +
lea eax [ebp+UniversalTime] +
push eax  +
call ds:GetSystemTime  +
lea eax [ebp+LocalTime] +
push eax  +
lea eax [ebp+UniversalTime] +
push eax  +
push 0  +
call ds:SystemTimeToTzSpecificLocalTime  +
test eax eax +
jnz loc_100D3D0  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_100D3C9  +
test byte ptr [eax+1Ch] 1 +
jz loc_100D3C9  +
push offset dword_10022B4  +
push 8Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10054B7  +
mov edi 80004005h +
jmp loc_100D442  +
movzx eax [ebp+LocalTime.wMinute] +
push esi  +
push eax  +
movzx eax [ebp+LocalTime.wHour] +
push eax  +
movzx eax [ebp+LocalTime.wDay] +
push eax  +
movzx eax [ebp+LocalTime.wMonth] +
push eax  +
movzx eax [ebp+LocalTime.wYear] +
push eax  +
lea eax [ebp+pszPath] +
push eax  +
push offset aLs_02hu02hu02h  +
push [ebp+arg_8]  +
push ebx  +
call sub_1005835  +
mov edi eax +
add esp 28h +
test edi edi +
jge loc_100D442  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_100D442  +
test byte ptr [eax+1Ch] 1 +
jz loc_100D442  +
movzx ecx di +
push ecx  +
push offset dword_10022B4  +
push 8Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10062BE  +
mov ecx [ebp+var_4] +
mov eax edi +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_101BC5D  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 624h +
mov eax dword_1030118 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_4] +
mov ecx dword ptr [ebp+arg_8] +
mov edx [ebp+arg_C] +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
push edi  +
push eax  +
push ecx  +
push offset aWsS  +
mov esi 208h +
mov dword ptr [ebp+var_620] edx +
mov edx [ebp+arg_10] +
lea eax [ebp+ExistingFileName] +
push esi  +
push eax  +
mov [ebp+lpMultiByteStr] edx +
call sub_10067AA  +
mov edi eax +
add esp 14h +
test edi edi +
jge loc_100D4DC  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_100D620  +
test byte ptr [eax+1Ch] 1 +
jz loc_100D620  +
movzx ecx di +
push ecx  +
push offset dword_10022B4  +
push 8Ch  +
jmp loc_100D570  +
push 104h  +
lea eax [ebp+var_61C] +
push eax  +
push ebx  +
call sub_100D2DA  +
mov edi eax +
xor ebx ebx +
cmp edi ebx +
jge loc_100D520  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_100D620  +
test byte ptr [eax+1Ch] 1 +
jz loc_100D620  +
movzx ecx di +
push ecx  +
push offset dword_10022B4  +
push 8Dh  +
jmp loc_100D570  +
lea eax [ebp+var_61C] +
push eax  +
push dword ptr [ebp+var_620]  +
lea eax [ebp+pszPath] +
push offset aLsLs_0  +
push esi  +
push eax  +
call sub_10067AA  +
mov edi eax +
add esp 14h +
cmp edi ebx +
jge loc_100D580  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_100D620  +
test byte ptr [eax+1Ch] 1 +
jz loc_100D620  +
movzx ecx di +
push ecx  +
push offset dword_10022B4  +
push 8Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10062BE  +
jmp loc_100D620  +
push 0Bh  +
lea eax [ebp+pszPath] +
push eax  +
lea eax [ebp+ExistingFileName] +
push eax  +
call ds:MoveFileExW  +
test eax eax +
jnz loc_100D5D9  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_100D5C1  +
test byte ptr [eax+1Ch] 1 +
jz loc_100D5C1  +
push offset dword_10022B4  +
push 8Fh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10054B7  +
call ds:GetLastError  +
cmp eax ebx +
jle loc_100D5D5  +
and eax 0FFFFh +
or eax 80070000h +
mov edi eax +
jmp loc_100D620  +
lea eax [ebp+pszPath] +
push eax  +
call ds:PathFindFileNameW  +
push ebx  +
push ebx  +
push [ebp+cchMultiByte]  +
push [ebp+lpMultiByteStr]  +
push 0FFFFFFFFh  +
push eax  +
push ebx  +
push ebx  +
call ds:WideCharToMultiByte  +
test eax eax +
jnz loc_100D61E  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_100D5C1  +
test byte ptr [eax+1Ch] 1 +
jz loc_100D5C1  +
push offset dword_10022B4  +
push 90h  +
jmp loc_100D5B6  +
xor edi edi +
mov ecx [ebp+var_4] +
mov eax edi +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_101BC5D  +
leave   +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax [ebp+arg_4] +
push ebx  +
mov ebx [eax+8] +
push esi  +
push edi  +
lea eax [ebp+var_8] +
push eax  +
push [ebp+arg_8]  +
xor edi edi +
mov [ebp+var_4] edi +
call sub_100CFA3  +
mov esi eax +
cmp esi edi +
jge loc_100D691  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_100D8D5  +
test byte ptr [eax+1Ch] 1 +
jz loc_100D8D5  +
push esi  +
push offset dword_10022B4  +
push 73h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10062BE  +
jmp loc_100D8D5  +
mov esi [ebp+var_8] +
cmp dword_1031BDC edi +
jz loc_100D753  +
cmp dword_1031BE0 edi +
jz loc_100D753  +
test byte ptr [esi+20h] 1 +
jnz loc_100D753  +
or dword ptr [esi+20h] 1 +
lea eax [ebp+var_4] +
push eax  +
push 100h  +
push [ebp+arg_8]  +
call dword_1031BDC  +
cmp eax edi +
jl loc_100D71B  +
mov eax [ebp+var_4] +
mov edx [eax+4] +
mov eax edx +
lea edi [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_100D6DB  +
sub eax edi +
sar eax 1 +
push eax  +
push edx  +
lea eax [esi+10h] +
push eax  +
call sub_1006DA1  +
mov eax [ebp+var_4] +
mov ecx [eax] +
mov eax ecx +
lea edx [eax+2] +
mov di [eax] +
inc eax  +
inc eax  +
test di di +
jnz loc_100D6FE  +
sub eax edx +
sar eax 1 +
push eax  +
push ecx  +
lea eax [esi+0Ch] +
push eax  +
call sub_1006DA1  +
xor edi edi +
jmp loc_100D742  +
mov ecx off_1030000 +
cmp ecx offset off_1030000 +
jz loc_100D742  +
test byte ptr [ecx+1Ch] 1 +
jz loc_100D742  +
push eax  +
push offset dword_10022B4  +
push 74h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10062BE  +
cmp [ebp+var_4] edi +
jz loc_100D753  +
push [ebp+var_4]  +
call dword_1031BE0  +
mov [ebp+var_4] edi +
cmp [esi+10h] edi +
mov edi [ebp+arg_0] +
jz loc_100D777  +
push dword ptr [esi+10h]  +
mov eax [edi] +
push 0  +
push offset aProgramid  +
push 0  +
push edi  +
call dword ptr [eax+1Ch]  +
test eax eax +
jge loc_100D777  +
inc dword ptr [ebx+4Ch]  +
mov [ebx+48h] eax +
xor eax eax +
cmp [esi+0Ch] eax +
jz loc_100D798  +
push dword ptr [esi+0Ch]  +
mov ecx [edi] +
push eax  +
push offset aFileid  +
push eax  +
push edi  +
call dword ptr [ecx+1Ch]  +
test eax eax +
jge loc_100D798  +
inc dword ptr [ebx+4Ch]  +
mov [ebx+48h] eax +
test byte ptr [esi+20h] 2 +
jnz loc_100D7B6  +
or dword ptr [esi+20h] 2 +
lea eax [esi+1Ch] +
push eax  +
lea eax [esi+18h] +
push eax  +
lea eax [esi+14h] +
push eax  +
push [ebp+arg_8]  +
call sub_100CCB2  +
cmp dword ptr [esi+14h] 0 +
jz loc_100D815  +
mov ecx [esi+14h] +
mov eax ecx +
lea edi [eax+2] +
mov dx [eax] +
inc eax  +
inc eax  +
test dx dx +
jnz loc_100D7C4  +
sub eax edi +
sar eax 1 +
push eax  +
mov eax [ebp+arg_4] +
push ecx  +
add eax 30h +
push eax  +
call sub_101F899  +
test eax eax +
jz loc_100D7F6  +
jle loc_100D7F0  +
and eax 0FFFFh +
or eax 80070000h +
inc dword ptr [ebx+4Ch]  +
mov [ebx+48h] eax +
push dword ptr [esi+14h]  +
mov eax [ebp+arg_0] +
mov ecx [eax] +
push 0  +
push offset aFileversion  +
push 0  +
push eax  +
call dword ptr [ecx+1Ch]  +
test eax eax +
jge loc_100D815  +
inc dword ptr [ebx+4Ch]  +
mov [ebx+48h] eax +
cmp dword ptr [esi+18h] 0 +
jz loc_100D874  +
mov ecx [esi+18h] +
mov eax ecx +
lea edi [eax+2] +
mov dx [eax] +
inc eax  +
inc eax  +
test dx dx +
jnz loc_100D823  +
sub eax edi +
sar eax 1 +
push eax  +
mov eax [ebp+arg_4] +
push ecx  +
add eax 3Ch +
push eax  +
call sub_101F899  +
test eax eax +
jz loc_100D855  +
jle loc_100D84F  +
and eax 0FFFFh +
or eax 80070000h +
inc dword ptr [ebx+4Ch]  +
mov [ebx+48h] eax +
push dword ptr [esi+18h]  +
mov eax [ebp+arg_0] +
mov ecx [eax] +
push 0  +
push offset aFiledescriptio  +
push 0  +
push eax  +
call dword ptr [ecx+1Ch]  +
test eax eax +
jge loc_100D874  +
inc dword ptr [ebx+4Ch]  +
mov [ebx+48h] eax +
cmp dword ptr [esi+1Ch] 0 +
jz loc_100D8D3  +
mov ecx [esi+1Ch] +
mov eax ecx +
lea edi [eax+2] +
mov dx [eax] +
inc eax  +
inc eax  +
test dx dx +
jnz loc_100D882  +
sub eax edi +
sar eax 1 +
push eax  +
mov eax [ebp+arg_4] +
push ecx  +
add eax 48h +
push eax  +
call sub_101F899  +
test eax eax +
jz loc_100D8B4  +
jle loc_100D8AE  +
and eax 0FFFFh +
or eax 80070000h +
inc dword ptr [ebx+4Ch]  +
mov [ebx+48h] eax +
push dword ptr [esi+1Ch]  +
mov eax [ebp+arg_0] +
mov ecx [eax] +
push 0  +
push offset aFilecompany  +
push 0  +
push eax  +
call dword ptr [ecx+1Ch]  +
test eax eax +
jge loc_100D8D3  +
inc dword ptr [ebx+4Ch]  +
mov [ebx+48h] eax +
xor esi esi +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax 10070h +
call __alloca_probe  +
mov eax dword_1030118 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_4] +
and [ebp+var_10070] 0 +
and [ebp+var_10008] 0 +
push ebx  +
mov ebx [ebp+arg_8] +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov [ebp+var_10018] eax +
mov eax [ebp+arg_C] +
push 0Ah  +
mov [ebp+var_1000C] eax +
pop ecx  +
xor eax eax +
lea edi [ebp+var_1006C] +
stos   +
lea eax [ebp+var_10030] +
push eax  +
mov [ebp+var_10040] esi +
mov [ebp+var_10044] ebx +
call sub_101F727  +
lea eax [ebp+var_10024] +
push eax  +
call sub_101F727  +
lea eax [ebp+var_1003C] +
push eax  +
call sub_101F727  +
mov ebx [ebx+8] +
xor eax eax +
mov [ebp+var_10004] ax +
mov eax esi +
lea ecx [eax+2] +
mov dx [eax] +
inc eax  +
inc eax  +
test dx dx +
jnz loc_100D973  +
sub eax ecx +
sar eax 1 +
jnz loc_100D9A5  +
mov esi [ebp+var_10018] +
mov eax esi +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_100D98E  +
sub eax edx +
sar eax 1 +
jnz loc_100D9A5  +
xor esi esi +
jmp loc_100E0B4  +
mov edi [ebp+var_1000C] +
mov eax [edi] +
push 0  +
push offset aUistack  +
push 0  +
push edi  +
mov [ebp+var_10010] esi +
call dword ptr [eax+6Ch]  +
mov esi eax +
test esi esi +
jge loc_100D9F7  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_100E0B4  +
test byte ptr [eax+1Ch] 1 +
jz loc_100E0B4  +
push offset dword_10022B4  +
push 75h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10054B7  +
jmp loc_100E0B4  +
push 2Ch  +
lea eax [ebp+var_10070] +
push 0  +
push eax  +
call memset  +
add esp 0Ch +
lea eax [ebp+var_10030] +
push eax  +
call sub_101F76F  +
lea eax [ebp+var_1003C] +
push eax  +
call sub_101F76F  +
lea eax [ebp+var_10024] +
push eax  +
call sub_101F76F  +
mov esi [ebp+var_10010] +
mov [ebp+var_10014] offset aCoordinates +
cmp esi [ebp+var_10040] +
jz loc_100DA50  +
mov [ebp+var_10014] offset aClassname +
lea eax [ebp+var_10008] +
push eax  +
push 8000h  +
lea eax [ebp+var_10004] +
push eax  +
push offset aRoleid  +
push offset aLevelName  +
push [ebp+var_10008]  +
push esi  +
call sub_100CE9E  +
test eax eax +
jnz loc_100DAA1  +
cmp [ebp+var_10040] esi +
jnz loc_100DFB8  +
mov eax [ebp+var_10018] +
and [ebp+var_10008] 0 +
mov [ebp+var_10010] eax +
jmp loc_100D9F7  +
mov eax [edi] +
push 0  +
push offset aLevel  +
push 0  +
push edi  +
call dword ptr [eax+6Ch]  +
mov esi eax +
test esi esi +
jl loc_100DFBF  +
lea edx [ebp+var_10004] +
mov eax edx +
lea edi [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_100DAC5  +
sub eax edi +
sar eax 1 +
push eax  +
push edx  +
lea eax [ebp+var_10030] +
push eax  +
call sub_101F899  +
test eax eax +
jz loc_100DB05  +
jle loc_100DAF1  +
and eax 0FFFFh +
or eax 80070000h +
inc dword ptr [ebx+4Ch]  +
mov esi eax +
lea eax [ebp+var_10030] +
push eax  +
mov [ebx+48h] esi +
call sub_101F76F  +
xor edi edi +
cmp [ebp+var_1002C] edi +
jz loc_100DB5C  +
push [ebp+var_10030]  +
mov eax [ebp+var_1000C] +
mov ecx [eax] +
push edi  +
push offset aName  +
push edi  +
push eax  +
call dword ptr [ecx+1Ch]  +
mov esi eax +
cmp esi edi +
jge loc_100DB5C  +
mov eax off_1030000 +
mov edi offset off_1030000 +
cmp eax edi +
jz loc_100DB54  +
test byte ptr [eax+1Ch] 1 +
jz loc_100DB54  +
push offset dword_10022B4  +
push 77h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10054B7  +
inc dword ptr [ebx+4Ch]  +
mov [ebx+48h] esi +
jmp loc_100DB61  +
mov edi offset off_1030000 +
lea eax [ebp+var_10008] +
push eax  +
push 8000h  +
lea eax [ebp+var_10004] +
push eax  +
push offset aRole  +
push offset aRoleid_0  +
push [ebp+var_10008]  +
push [ebp+var_10010]  +
call sub_100CE9E  +
test eax eax +
jz loc_100DFF0  +
push 0  +
lea eax [ebp+var_10004] +
push 0  +
push eax  +
call ds:wcstoul  +
mov [ebp+var_10048] eax +
xor eax eax +
add esp 0Ch +
cmp ax [ebp+var_10004] +
jz loc_100DC05  +
mov eax [ebp+var_1000C] +
mov ecx [eax] +
lea edx [ebp+var_10004] +
push edx  +
push 0  +
push offset aRoleid_1  +
push 0  +
push eax  +
call dword ptr [ecx+1Ch]  +
mov esi eax +
test esi esi +
jge loc_100DC05  +
mov eax off_1030000 +
cmp eax edi +
jz loc_100DBFF  +
test byte ptr [eax+1Ch] 1 +
jz loc_100DBFF  +
push offset dword_10022B4  +
push 79h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10054B7  +
inc dword ptr [ebx+4Ch]  +
mov [ebx+48h] esi +
lea eax [ebp+var_10008] +
push eax  +
push 8000h  +
lea eax [ebp+var_10004] +
push eax  +
push [ebp+var_10014]  +
push offset aRole_0  +
push [ebp+var_10008]  +
push [ebp+var_10010]  +
call sub_100CE9E  +
test eax eax +
jz loc_100E018  +
lea edx [ebp+var_10004] +
mov eax edx +
lea edi [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_100DC47  +
sub eax edi +
sar eax 1 +
push eax  +
push edx  +
lea eax [ebp+var_1003C] +
push eax  +
call sub_101F899  +
test eax eax +
jz loc_100DC87  +
jle loc_100DC73  +
and eax 0FFFFh +
or eax 80070000h +
inc dword ptr [ebx+4Ch]  +
mov esi eax +
lea eax [ebp+var_1003C] +
push eax  +
mov [ebx+48h] esi +
call sub_101F76F  +
xor edi edi +
cmp [ebp+var_10038] edi +
jz loc_100DCDA  +
push [ebp+var_1003C]  +
mov eax [ebp+var_1000C] +
mov ecx [eax] +
push edi  +
push offset aRole_1  +
push edi  +
push eax  +
call dword ptr [ecx+1Ch]  +
mov esi eax +
cmp esi edi +
jge loc_100DCDA  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_100DCD4  +
test byte ptr [eax+1Ch] 1 +
jz loc_100DCD4  +
push offset dword_10022B4  +
push 7Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10054B7  +
inc dword ptr [ebx+4Ch]  +
mov [ebx+48h] esi +
mov eax [ebp+var_10010] +
cmp [ebp+var_10018] eax +
jnz loc_100DE14  +
lea eax [ebp+var_10008] +
push eax  +
push 8000h  +
lea eax [ebp+var_10004] +
push eax  +
push offset aCoordinates  +
push offset aClassname_0  +
push [ebp+var_10008]  +
push [ebp+var_10010]  +
call sub_100CE9E  +
test eax eax +
jz loc_100E030  +
lea edx [ebp+var_10004] +
mov eax edx +
lea edi [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_100DD2D  +
sub eax edi +
sar eax 1 +
push eax  +
push edx  +
lea eax [ebp+var_10024] +
push eax  +
call sub_101F899  +
test eax eax +
jz loc_100DD6D  +
jle loc_100DD59  +
and eax 0FFFFh +
or eax 80070000h +
inc dword ptr [ebx+4Ch]  +
mov esi eax +
lea eax [ebp+var_10024] +
push eax  +
mov [ebx+48h] esi +
call sub_101F76F  +
cmp [ebp+var_10020] 0 +
jz loc_100DE14  +
mov edi [ebp+var_10024] +
xor esi esi +
mov eax ds:off_1002624[esi*4] +
mov ecx [ebp+var_10024] +
mov dx [ecx] +
cmp dx [eax] +
jnz loc_100DDB5  +
test dx dx +
jz loc_100DDB1  +
mov dx [ecx+2] +
cmp dx [eax+2] +
jnz loc_100DDB5  +
add ecx 4 +
add eax 4 +
test dx dx +
jnz loc_100DD8F  +
xor eax eax +
jmp loc_100DDBA  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
test eax eax +
jz loc_100DDC7  +
inc esi  +
inc esi  +
cmp esi 0Ah +
jb loc_100DD82  +
jmp loc_100DDCE  +
mov edi ds:off_1002628[esi*4] +
mov eax [ebp+var_1000C] +
mov ecx [eax] +
push edi  +
push 0  +
push offset aClassname_1  +
push 0  +
push eax  +
call dword ptr [ecx+1Ch]  +
mov esi eax +
test esi esi +
jge loc_100DE14  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_100DE0E  +
test byte ptr [eax+1Ch] 1 +
jz loc_100DE0E  +
push offset dword_10022B4  +
push 7Dh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10054B7  +
inc dword ptr [ebx+4Ch]  +
mov [ebx+48h] esi +
lea eax [ebp+var_10008] +
push eax  +
push 8000h  +
lea eax [ebp+var_10004] +
push eax  +
push offset aLevel_0  +
push offset aCoordinates_0  +
push [ebp+var_10008]  +
push [ebp+var_10010]  +
call sub_100CE9E  +
test eax eax +
jz loc_100E04B  +
lea eax [ebp+var_10004] +
push eax  +
lea eax [ebp+var_10058] +
push eax  +
call sub_101E818  +
test eax eax +
jz loc_100DEA1  +
mov ecx eax +
jle loc_100DE71  +
and ecx 0FFFFh +
or ecx 80070000h +
inc dword ptr [ebx+4Ch]  +
mov [ebx+48h] ecx +
mov ecx off_1030000 +
mov edi offset off_1030000 +
cmp ecx edi +
jz loc_100DEA6  +
test byte ptr [ecx+1Ch] 1 +
jz loc_100DEA6  +
push eax  +
push offset dword_10022B4  +
push 7Fh  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10062BE  +
jmp loc_100DEA6  +
mov edi offset off_1030000 +
xor eax eax +
cmp ax [ebp+var_10004] +
jz loc_100DEFD  +
mov eax [ebp+var_1000C] +
mov ecx [eax] +
lea edx [ebp+var_10004] +
push edx  +
push 0  +
push offset aCoordinates_1  +
push 0  +
push eax  +
call dword ptr [ecx+1Ch]  +
mov esi eax +
test esi esi +
jge loc_100DEFD  +
mov eax off_1030000 +
cmp eax edi +
jz loc_100DEF7  +
test byte ptr [eax+1Ch] 1 +
jz loc_100DEF7  +
push offset dword_10022B4  +
push 80h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10054B7  +
inc dword ptr [ebx+4Ch]  +
mov [ebx+48h] esi +
mov eax [ebp+var_10030] +
mov [ebp+var_10070] eax +
mov eax [ebp+var_1002C] +
mov [ebp+var_1006C] eax +
mov eax [ebp+var_1003C] +
mov [ebp+var_10068] eax +
mov eax [ebp+var_10038] +
mov [ebp+var_10064] eax +
mov eax [ebp+var_10024] +
mov [ebp+var_10060] eax +
mov eax [ebp+var_10020] +
mov [ebp+var_1005C] eax +
lea eax [ebp+var_10070] +
push eax  +
push [ebp+var_10044]  +
call sub_10205AA  +
test eax eax +
jz loc_100DF97  +
mov ecx eax +
jle loc_100DF6B  +
and ecx 0FFFFh +
or ecx 80070000h +
inc dword ptr [ebx+4Ch]  +
mov [ebx+48h] ecx +
mov ecx off_1030000 +
cmp ecx edi +
jz loc_100DF97  +
test byte ptr [ecx+1Ch] 1 +
jz loc_100DF97  +
push eax  +
push offset dword_10022B4  +
push 81h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10062BE  +
mov eax [ebp+var_1000C] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+3Ch]  +
mov esi eax +
test esi esi +
jl loc_100E066  +
mov edi [ebp+var_1000C] +
jmp loc_100D9F7  +
xor esi esi +
jmp loc_100E09F  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_100E09F  +
test byte ptr [eax+1Ch] 1 +
jz loc_100E09F  +
push offset dword_10022B4  +
push 76h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10054B7  +
jmp loc_100E09F  +
mov eax off_1030000 +
cmp eax edi +
jz loc_100E011  +
test byte ptr [eax+1Ch] 1 +
jz loc_100E011  +
push offset dword_10022B4  +
push 78h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10054B7  +
mov esi 8007000Bh +
jmp loc_100E08A  +
mov eax off_1030000 +
cmp eax edi +
jz loc_100E011  +
test byte ptr [eax+1Ch] 1 +
jz loc_100E011  +
push offset dword_10022B4  +
push 7Ah  +
jmp loc_100E006  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_100E011  +
test byte ptr [eax+1Ch] 1 +
jz loc_100E011  +
push offset dword_10022B4  +
push 7Ch  +
jmp loc_100E006  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_100E08A  +
test byte ptr [eax+1Ch] 1 +
jz loc_100E08A  +
push offset dword_10022B4  +
push 7Eh  +
jmp loc_100E07F  +
mov eax off_1030000 +
cmp eax edi +
jz loc_100E08A  +
test byte ptr [eax+1Ch] 1 +
jz loc_100E08A  +
push offset dword_10022B4  +
push 82h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10054B7  +
mov eax [ebp+var_1000C] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+3Ch]  +
test eax eax +
jge loc_100E09F  +
mov esi 80004005h +
mov eax [ebp+var_1000C] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+3Ch]  +
test eax eax +
jge loc_100E0B4  +
mov esi 80004005h +
lea eax [ebp+var_10030] +
push eax  +
call sub_101F747  +
lea eax [ebp+var_10024] +
push eax  +
call sub_101F747  +
lea eax [ebp+var_1003C] +
push eax  +
call sub_101F747  +
mov ecx [ebp+var_4] +
pop edi  +
mov eax esi +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_101BC5D  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax 18018h +
call __alloca_probe  +
mov eax dword_1030118 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_8] +
mov ecx [ebp+arg_10] +
push ebx  +
mov [ebp+var_1800C] eax +
mov eax [ebp+arg_C] +
push esi  +
xor ebx ebx +
mov [ebp+var_18014] eax +
mov eax [eax+8] +
mov [ebp+var_18010] ecx +
xor ecx ecx +
push edi  +
mov edi [ebp+arg_4] +
mov [ebp+var_18008] ebx +
mov word ptr [ebp+var_2004] cx +
mov word ptr [ebp+var_18004] cx +
mov [ebp+var_18018] eax +
mov esi 8000h +
lea eax [ebp+var_18008] +
push eax  +
push esi  +
lea eax [ebp+var_12004] +
push eax  +
push offset aRoleid  +
push offset aLevelName  +
push [ebp+var_18008]  +
push edi  +
call sub_100CE9E  +
test eax eax +
jz loc_100E234  +
xor eax eax +
cmp ax word ptr [ebp+var_12004] +
jz loc_100E150  +
lea eax [ebp+var_12004] +
push eax  +
push 1000h  +
lea eax [ebp+var_2004] +
push eax  +
call sub_10066E4  +
lea eax [ebp+var_18008] +
push eax  +
push esi  +
lea eax [ebp+var_12004] +
push eax  +
push offset aCoordinates  +
push offset aRole_0  +
push [ebp+var_18008]  +
push edi  +
call sub_100CE9E  +
test eax eax +
jnz loc_100E1F9  +
mov word ptr [ebp+var_2004] ax +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_100E3DC  +
test byte ptr [eax+1Ch] 1 +
jz loc_100E3DC  +
push offset dword_10022B4  +
push 83h  +
jmp loc_100E3D1  +
lea eax [ebp+var_2004] +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_100E202  +
sub eax edx +
lea ecx [ebp+var_12004] +
push ecx  +
sar eax 1 +
mov ecx 1000h +
sub ecx eax +
push offset aWs_1  +
push ecx  +
lea eax [ebp+eax*2+var_2004] +
push eax  +
call sub_1005835  +
add esp 10h +
and [ebp+var_18008] ebx +
lea eax [ebp+var_18008] +
push eax  +
push esi  +
lea eax [ebp+var_12004] +
push eax  +
push offset aRoleid  +
push offset aLevelName  +
push [ebp+var_18008]  +
push [ebp+var_1800C]  +
call sub_100CE9E  +
test eax eax +
jz loc_100E2C3  +
xor eax eax +
cmp ax word ptr [ebp+var_12004] +
jz loc_100E23A  +
mov edi [ebp+var_1800C] +
mov eax edi +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_100E27E  +
mov ecx [ebp+var_18008] +
sub eax edx +
sar eax 1 +
cmp ecx eax +
ja loc_100E2C3  +
lea eax [edi+ecx*2] +
push offset aLevel_1  +
push eax  +
call ds:wcsstr  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_100E23A  +
lea eax [ebp+var_12004] +
push eax  +
push 2000h  +
lea eax [ebp+var_18004] +
push eax  +
call sub_100671E  +
xor eax eax +
xor ecx ecx +
cmp ax word ptr [ebp+var_18004] +
jz loc_100E2DE  +
cmp ax word ptr [ebp+var_2004] +
setnz cl  +
inc ecx  +
inc ecx  +
jmp loc_100E2EA  +
xor eax eax +
cmp ax word ptr [ebp+var_2004] +
setnz cl  +
mov eax [ebp+arg_0] +
mov esi ecx +
cmp eax 7Ch +
jnz loc_100E300  +
mov ebx ds:dword_10028FC[esi*4] +
jmp loc_100E393  +
cmp eax 7Ah +
jnz loc_100E311  +
mov ebx ds:dword_10028EC[esi*4] +
jmp loc_100E393  +
cmp eax 7Bh +
jnz loc_100E31F  +
mov ebx ds:dword_10028DC[esi*4] +
jmp loc_100E393  +
cmp eax 2BDh +
jnz loc_100E32F  +
mov ebx ds:dword_10028CC[esi*4] +
jmp loc_100E393  +
cmp eax 78h +
jnz loc_100E33D  +
mov ebx ds:dword_10028BC[esi*4] +
jmp loc_100E393  +
cmp eax 79h +
jnz loc_100E34B  +
mov ebx ds:dword_10028AC[esi*4] +
jmp loc_100E393  +
cmp eax 2BCh +
jnz loc_100E35B  +
mov ebx ds:dword_100289C[esi*4] +
jmp loc_100E393  +
cmp eax 7Dh +
jnz loc_100E369  +
mov ebx ds:dword_100288C[esi*4] +
jmp loc_100E393  +
cmp eax 7Eh +
jnz loc_100E377  +
mov ebx ds:dword_100287C[esi*4] +
jmp loc_100E393  +
cmp eax 80h +
jnz loc_100E387  +
mov ebx ds:dword_100286C[esi*4] +
jmp loc_100E393  +
cmp eax 7Fh +
jnz loc_100E393  +
mov ebx ds:uID[esi*4] +
mov edi 1000h +
push edi  +
lea eax [ebp+Buffer] +
push eax  +
push ebx  +
xor ebx ebx +
push ebx  +
call ds:GetModuleHandleW  +
push eax  +
call ds:LoadStringW  +
test eax eax +
jnz loc_100E3E6  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_100E3DC  +
test byte ptr [eax+1Ch] 1 +
jz loc_100E3DC  +
push offset dword_10022B4  +
push 84h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10054B7  +
mov esi 80004005h +
jmp loc_100E518  +
cmp esi 3 +
jnz loc_100E412  +
lea eax [ebp+var_18004] +
push eax  +
lea eax [ebp+var_2004] +
push eax  +
lea eax [ebp+Buffer] +
push eax  +
lea eax [ebp+var_14004] +
push edi  +
push eax  +
call sub_1005835  +
add esp 14h +
jmp loc_100E458  +
cmp esi 2 +
jnz loc_100E437  +
lea eax [ebp+var_18004] +
push eax  +
lea eax [ebp+Buffer] +
push eax  +
lea eax [ebp+var_14004] +
push edi  +
push eax  +
call sub_1005835  +
add esp 10h +
jmp loc_100E458  +
cmp esi 1 +
jnz loc_100E444  +
lea eax [ebp+var_2004] +
jmp loc_100E41D  +
lea eax [ebp+Buffer] +
push eax  +
push edi  +
lea eax [ebp+var_14004] +
push eax  +
call sub_10066E4  +
mov esi eax +
cmp esi ebx +
jge loc_100E487  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_100E518  +
test byte ptr [eax+1Ch] 1 +
jz loc_100E518  +
push offset dword_10022B4  +
push 85h  +
jmp loc_100E509  +
lea edx [ebp+var_14004] +
mov eax edx +
lea esi [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
cmp cx bx +
jnz loc_100E492  +
sub eax esi +
sar eax 1 +
push eax  +
mov eax [ebp+var_18014] +
push edx  +
add eax 0Ch +
push eax  +
call sub_101F899  +
cmp eax ebx +
jz loc_100E4CD  +
jle loc_100E4C1  +
and eax 0FFFFh +
or eax 80070000h +
mov ecx [ebp+var_18018] +
inc dword ptr [ecx+4Ch]  +
mov [ecx+48h] eax +
mov eax [ebp+var_18010] +
mov ecx [eax] +
lea edx [ebp+var_14004] +
push edx  +
push ebx  +
push offset aDescription  +
push ebx  +
push eax  +
call dword ptr [ecx+34h]  +
mov esi eax +
cmp esi ebx +
jge loc_100E516  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_100E518  +
test byte ptr [eax+1Ch] 1 +
jz loc_100E518  +
push offset dword_10022B4  +
push 86h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10054B7  +
jmp loc_100E518  +
xor esi esi +
mov ecx [ebp+var_4] +
pop edi  +
mov eax esi +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_101BC5D  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax 2830h +
call __alloca_probe  +
mov eax dword_1030118 +
xor eax ebp +
mov [ebp-4] eax +
xor eax eax +
push ebx  +
mov ebx [ebp+8] +
push esi  +
mov [ebp-2814h] eax +
mov [ebp-2820h] eax +
mov [ebp-2810h] eax +
mov [ebp-2808h] eax +
mov [ebp-2804h] ax +
mov [ebp-804h] ax +
push edi  +
lea eax [ebp-2830h] +
push eax  +
call sub_101F727  +
mov ecx dword_1031BD8 +
mov al [ebx+2Ch] +
add ecx 8 +
mov [ebp-281Ch] ecx +
push 4  +
pop ecx  +
mov edi offset unk_1031BB8 +
lea esi [ebx+18h] +
xor edx edx +
cmps   +
mov [ebp-2809h] al +
jz loc_100E5B3  +
xor esi esi +
jmp loc_100F25B  +
mov ecx [ebp-281Ch] +
xor edi edi +
cmp dword_1030010 edi +
jz loc_100E5D4  +
mov edx [ebx+10h] +
mov [ecx] edx +
mov edx [ebx+14h] +
mov [ecx+4] edx +
mov dword_1030010 edi +
cmp dword_1030014 edi +
jz loc_100E6F3  +
mov edx [ebx+10h] +
movzx eax al +
mov [ecx+8] edx +
mov edx [ebx+14h] +
dec eax  +
dec eax  +
mov [ecx+0Ch] edx +
jz loc_100E6EB  +
sub eax 7 +
jz loc_100E623  +
dec eax  +
jz loc_100E61B  +
dec eax  +
jz loc_100E613  +
dec eax  +
jz loc_100E618  +
dec eax  +
jz loc_100E610  +
dec eax  +
jnz loc_100E5AC  +
inc dword ptr [ecx+24h]  +
jmp loc_100E61E  +
inc dword ptr [ecx+20h]  +
inc dword ptr [ecx+1Ch]  +
jmp loc_100E61E  +
inc dword ptr [ecx+20h]  +
inc dword ptr [ecx+18h]  +
inc dword ptr [ecx+10h]  +
jmp loc_100E5AC  +
***
movzx ecx word ptr [ebx+56h] +
mov eax [ebx+5Ch] +
shr ecx 1 +
xor edx edx +
mov [eax+ecx*2-2] dx +
lea ecx [ebp-2814h] +
push ecx  +
push eax  +
call ds:CommandLineToArgvW  +
mov ebx eax +
mov [ebp-2810h] ebx +
cmp ebx edi +
jz loc_100E6B3  +
cmp dword ptr [ebp-2814h] 2 +
jnz loc_100E6B3  +
push edi  +
push edi  +
push dword ptr [ebx]  +
call ds:wcstoul  +
add esp 0Ch +
push dword ptr [ebx+4]  +
push eax  +
call sub_100C554  +
mov esi eax +
cmp esi edi +
jge loc_100E6A1  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_100E696  +
test byte ptr [eax+1Ch] 1 +
jz loc_100E696  +
push offset dword_10022B4  +
push 52h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10054B7  +
mov eax dword_1031BD8 +
inc dword ptr [eax+4Ch]  +
mov [eax+48h] esi +
push ebx  +
call ds:LocalFree  +
mov [ebp-2810h] edi +
jmp loc_100E5AC  +
***
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_100E6D7  +
test byte ptr [eax+1Ch] 1 +
jz loc_100E6D7  +
push offset dword_10022B4  +
push 51h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10054B7  +
mov eax dword_1031BD8 +
inc dword ptr [eax+4Ch]  +
mov dword ptr [eax+48h] 8007000Bh +
jmp loc_100E5AC  +
***
inc dword ptr [ecx+14h]  +
jmp loc_100E5AC  +
***
cmp dword_1031BD4 edi +
jz loc_100E5AC  +
cmp al 0Ah +
jb loc_100E5AC  +
inc dword_1031BC8  +
movzx eax word ptr [ebx+56h] +
mov esi [ebx+5Ch] +
shr eax 1 +
xor ecx ecx +
mov [esi+eax*2-2] cx +
mov eax off_1030000 +
mov ebx offset off_1030000 +
cmp eax ebx +
jz loc_100E744  +
test byte ptr [eax+1Ch] 4 +
jz loc_100E744  +
push esi  +
push offset dword_10022B4  +
push 53h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100B7E5  +
lea eax [ebp-2808h] +
push eax  +
call sub_10212F7  +
cmp eax edi +
jz loc_100E769  +
jg loc_100E75D  +
mov esi eax +
jmp loc_100F25B  +
and eax 0FFFFh +
or eax 80070000h +
jmp loc_100E756  +
***
mov eax dword_1031BD8 +
mov ecx [ebp-2808h] +
mov [ecx+8] eax +
mov eax dword_1031BD8 +
mov eax [eax+50h] +
mov ecx [ebp-2808h] +
mov [ecx+0C0h] eax +
mov eax [ebp-2808h] +
mov ecx dword_1031BC8 +
mov [eax+0BCh] ecx +
lea eax [ebp-2814h] +
push eax  +
push esi  +
call ds:CommandLineToArgvW  +
mov [ebp-2810h] eax +
cmp eax edi +
jnz loc_100E802  +
call ds:GetLastError  +
cmp eax edi +
jnz loc_100E7C6  +
mov eax 54Fh +
cmp eax edi +
jle loc_100E7D2  +
and eax 0FFFFh +
or eax 80070000h +
mov esi eax +
mov eax off_1030000 +
cmp eax ebx +
jz loc_100F25B  +
test byte ptr [eax+1Ch] 1 +
jz loc_100F25B  +
push offset dword_10022B4  +
push 54h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10054B7  +
jmp loc_100F25B  +
mov eax [ebp-2810h] +
push 10h  +
xor esi esi +
push esi  +
push dword ptr [eax+0Ch]  +
call ds:_wcstoui64  +
add esp 0Ch +
push esi  +
push offset aEachaction  +
mov ebx eax +
mov eax dword_1031BD4 +
mov ecx [eax] +
push esi  +
push eax  +
mov edi edx +
call dword ptr [ecx+6Ch]  +
mov esi eax +
test esi esi +
jge loc_100E858  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_100F25B  +
test byte ptr [eax+1Ch] 1 +
jz loc_100F25B  +
push offset dword_10022B4  +
push 55h  +
jmp loc_100E7F2  +
***
push dword_1031BC8  +
push offset aActionnumber  +
push dword_1031BD4  +
call sub_100BB64  +
mov esi eax +
test esi esi +
jge loc_100E8A3  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_100E898  +
test byte ptr [eax+1Ch] 1 +
jz loc_100E898  +
push offset dword_10022B4  +
push 56h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10054B7  +
mov eax dword_1031BD8 +
inc dword ptr [eax+4Ch]  +
mov [eax+48h] esi +
push edi  +
push ebx  +
push offset aTime  +
push dword_1031BD4  +
call sub_100BC29  +
mov esi eax +
test esi esi +
jge loc_100E8EA  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_100E8DF  +
test byte ptr [eax+1Ch] 1 +
jz loc_100E8DF  +
push offset dword_10022B4  +
push 57h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10054B7  +
mov eax dword_1031BD8 +
inc dword ptr [eax+4Ch]  +
mov [eax+48h] esi +
cmp byte ptr [ebp-2809h] 0Eh +
mov eax [ebp-2808h] +
mov [eax+0C4h] ebx +
mov eax [ebp-2808h] +
mov [eax+0C8h] edi +
mov eax [ebp-2808h] +
jnz loc_100EBD0  +
or dword ptr [eax+0CCh] 2 +
cmp dword ptr [ebp-2814h] 5 +
jge loc_100E953  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_100E949  +
test byte ptr [eax+1Ch] 1 +
jz loc_100E949  +
push offset dword_10022B4  +
push 58h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10054B7  +
mov esi 8007000Bh +
jmp loc_100F250  +
push 400h  +
lea eax [ebp-804h] +
push eax  +
push 0ACh  +
push 0  +
call ds:GetModuleHandleW  +
push eax  +
call ds:LoadStringW  +
mov esi 0FFFFh +
test eax eax +
jnz loc_100E9D4  +
call ds:GetLastError  +
test eax eax +
jnz loc_100E98D  +
mov eax 54Fh +
test eax eax +
jle loc_100E996  +
and eax esi +
or eax 80070000h +
mov ecx eax +
mov eax dword_1031BD8 +
inc dword ptr [eax+4Ch]  +
mov [eax+48h] ecx +
mov eax off_1030000 +
mov ebx offset off_1030000 +
cmp eax ebx +
jz loc_100E9C9  +
test byte ptr [eax+1Ch] 1 +
jz loc_100E9C9  +
push offset dword_10022B4  +
push 59h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10054B7  +
xor eax eax +
mov [ebp-804h] ax +
jmp loc_100E9D9  +
mov ebx offset off_1030000 +
mov edi [ebp-2810h] +
push dword ptr [edi]  +
lea eax [ebp-804h] +
push eax  +
push offset aWsWs_2  +
lea eax [ebp-2830h] +
push 0  +
push eax  +
call sub_102049D  +
add esp 14h +
test eax eax +
jz loc_100EA17  +
jle loc_100EA0B  +
and eax esi +
or eax 80070000h +
mov ecx dword_1031BD8 +
inc dword ptr [ecx+4Ch]  +
mov [ecx+48h] eax +
push dword ptr [ebp-282Ch]  +
mov eax [ebp-2808h] +
push dword ptr [ebp-2830h]  +
add eax 0Ch +
push eax  +
call sub_101F899  +
test eax eax +
jz loc_100EA4B  +
jle loc_100EA3F  +
and eax esi +
or eax 80070000h +
mov ecx dword_1031BD8 +
inc dword ptr [ecx+4Ch]  +
mov [ecx+48h] eax +
push dword ptr [ebp-2830h]  +
mov eax dword_1031BD4 +
mov ecx [eax] +
push 0  +
push offset aUsercomment  +
push 0  +
push eax  +
call dword ptr [ecx+34h]  +
mov esi eax +
test esi esi +
jge loc_100EA97  +
mov eax off_1030000 +
cmp eax ebx +
jz loc_100EA8C  +
test byte ptr [eax+1Ch] 1 +
jz loc_100EA8C  +
push offset dword_10022B4  +
push 5Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10054B7  +
mov eax dword_1031BD8 +
inc dword ptr [eax+4Ch]  +
mov [eax+48h] esi +
mov eax [ebp-2808h] +
push dword ptr [edi+8]  +
add eax 84h +
push eax  +
call sub_101E818  +
test eax eax +
jz loc_100EAC7  +
jle loc_100EABB  +
and eax 0FFFFh +
or eax 80070000h +
mov ecx dword_1031BD8 +
inc dword ptr [ecx+4Ch]  +
mov [ecx+48h] eax +
push dword ptr [edi+8]  +
mov eax dword_1031BD4 +
mov ecx [eax] +
push 0  +
push offset aScreencoordsxy  +
push 0  +
push eax  +
call dword ptr [ecx+34h]  +
mov esi eax +
test esi esi +
jge loc_100EB10  +
mov eax off_1030000 +
cmp eax ebx +
jz loc_100EB05  +
test byte ptr [eax+1Ch] 1 +
jz loc_100EB05  +
push offset dword_10022B4  +
push 5Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10054B7  +
mov eax dword_1031BD8 +
inc dword ptr [eax+4Ch]  +
mov [eax+48h] esi +
mov eax [ebp-2808h] +
push dword ptr [edi+10h]  +
add eax 94h +
push eax  +
call sub_101E818  +
test eax eax +
jz loc_100EB40  +
jle loc_100EB34  +
and eax 0FFFFh +
or eax 80070000h +
mov ecx dword_1031BD8 +
inc dword ptr [ecx+4Ch]  +
mov [ecx+48h] eax +
push dword ptr [edi+10h]  +
mov eax dword_1031BD4 +
mov ecx [eax] +
push 0  +
push offset aHighlightxywh  +
push 0  +
push eax  +
call dword ptr [ecx+34h]  +
mov esi eax +
test esi esi +
jge loc_100EB89  +
mov eax off_1030000 +
cmp eax ebx +
jz loc_100EB7E  +
test byte ptr [eax+1Ch] 1 +
jz loc_100EB7E  +
push offset dword_10022B4  +
push 5Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10054B7  +
mov eax dword_1031BD8 +
inc dword ptr [eax+4Ch]  +
mov [eax+48h] esi +
push dword_1031BC8  +
push dword ptr [edi+4]  +
push dword ptr [ebp-2808h]  +
push dword_1031BD4  +
call sub_100C7E4  +
mov esi eax +
test esi esi +
jge loc_100F241  +
mov eax off_1030000 +
cmp eax ebx +
jz loc_100F236  +
test byte ptr [eax+1Ch] 1 +
jz loc_100F236  +
push offset dword_10022B4  +
push 5Dh  +
jmp loc_100F22B  +
or dword ptr [eax+0CCh] 4 +
cmp dword ptr [ebp-2814h] 0Bh +
jge loc_100EC06  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_100E949  +
test byte ptr [eax+1Ch] 1 +
jz loc_100E949  +
push offset dword_10022B4  +
push 5Eh  +
jmp loc_100E93E  +
***
cmp byte ptr [ebp-2809h] 0Ah +
jz loc_100EC24  +
cmp byte ptr [ebp-2809h] 0Ch +
jz loc_100EC24  +
mov dword ptr [ebp-2824h] 1 +
jmp loc_100EC38  +
mov eax [ebp-2808h] +
or dword ptr [eax+0CCh] 8 +
and dword ptr [ebp-2824h] 0 +
mov edi [ebp-2810h] +
xor esi esi +
push esi  +
push esi  +
push dword ptr [edi+4]  +
call ds:wcstol  +
add esp 0Ch +
cmp eax esi +
jl loc_100EC94  +
push eax  +
call sub_100C63A  +
mov [ebp-2818h] eax +
cmp eax esi +
jnz loc_100EC9E  +
mov dword ptr [ebp-2818h] offset WindowName +
mov eax off_1030000 +
mov ebx offset off_1030000 +
cmp eax ebx +
jz loc_100ECA3  +
test byte ptr [eax+1Ch] 1 +
jz loc_100ECA3  +
push offset dword_10022B4  +
push 5Fh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10054B7  +
jmp loc_100ECA3  +
mov dword ptr [ebp-2818h] offset WindowName +
mov ebx offset off_1030000 +
push dword ptr [edi]  +
mov eax dword_1031BD4 +
mov ecx [eax] +
push esi  +
push offset aPid  +
push esi  +
push eax  +
call dword ptr [ecx+1Ch]  +
mov esi eax +
test esi esi +
jge loc_100ECE9  +
mov eax off_1030000 +
cmp eax ebx +
jz loc_100ECDE  +
test byte ptr [eax+1Ch] 1 +
jz loc_100ECDE  +
push offset dword_10022B4  +
push 60h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10054B7  +
mov eax dword_1031BD8 +
inc dword ptr [eax+4Ch]  +
mov [eax+48h] esi +
push dword ptr [edi+10h]  +
push dword ptr [ebp-2808h]  +
push dword_1031BD4  +
call sub_100D638  +
mov esi eax +
test esi esi +
jge loc_100ED2F  +
mov eax off_1030000 +
cmp eax ebx +
jz loc_100ED24  +
test byte ptr [eax+1Ch] 1 +
jz loc_100ED24  +
push offset dword_10022B4  +
push 61h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10054B7  +
mov eax dword_1031BD8 +
inc dword ptr [eax+4Ch]  +
mov [eax+48h] esi +
push dword ptr [edi+10h]  +
call ds:PathFindFileNameW  +
xor ecx ecx +
cmp cx [eax] +
jz loc_100ED87  +
mov ecx dword_1031BD4 +
mov edx [ecx] +
push eax  +
push 0  +
push offset aFilename  +
push 0  +
push ecx  +
call dword ptr [edx+1Ch]  +
mov esi eax +
test esi esi +
jge loc_100ED87  +
mov eax off_1030000 +
cmp eax ebx +
jz loc_100ED7C  +
test byte ptr [eax+1Ch] 1 +
jz loc_100ED7C  +
push offset dword_10022B4  +
push 62h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10054B7  +
mov eax dword_1031BD8 +
inc dword ptr [eax+4Ch]  +
mov [eax+48h] esi +
push dword ptr [edi+10h]  +
mov esi ds:_wcsupr +
call esi  +
push dword ptr [edi+14h]  +
call esi  +
pop ecx  +
pop ecx  +
push dword ptr [edi+14h]  +
push dword ptr [edi+10h]  +
push dword ptr [ebp-2808h]  +
push dword_1031BD4  +
call sub_100CA44  +
mov esi eax +
test esi esi +
jge loc_100EDE2  +
mov eax off_1030000 +
cmp eax ebx +
jz loc_100EDD7  +
test byte ptr [eax+1Ch] 1 +
jz loc_100EDD7  +
push offset dword_10022B4  +
push 63h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10054B7  +
mov eax dword_1031BD8 +
inc dword ptr [eax+4Ch]  +
mov [eax+48h] esi +
xor ebx ebx +
push ebx  +
push ebx  +
push dword ptr [edi+8]  +
call ds:wcstoul  +
add esp 0Ch +
mov esi eax +
push 1000h  +
lea eax [ebp-2804h] +
push eax  +
push esi  +
push ebx  +
call ds:GetModuleHandleW  +
push eax  +
call ds:LoadStringW  +
mov ebx 80070000h +
test eax eax +
jnz loc_100EE6C  +
call ds:GetLastError  +
test eax eax +
jnz loc_100EE29  +
mov eax 54Fh +
test eax eax +
jle loc_100EE32  +
and eax 0FFFFh +
or eax ebx +
mov ecx eax +
mov eax dword_1031BD8 +
inc dword ptr [eax+4Ch]  +
mov [eax+48h] ecx +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_100EE63  +
test byte ptr [eax+1Ch] 1 +
jz loc_100EE63  +
push offset dword_10022B4  +
push 64h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10054B7  +
xor eax eax +
mov [ebp-2804h] ax +
push dword_1031BD4  +
push dword ptr [ebp-2808h]  +
push dword ptr [edi+20h]  +
push dword ptr [ebp-2818h]  +
push esi  +
call sub_100E0F0  +
mov esi eax +
test esi esi +
jge loc_100EEBC  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_100EEB1  +
test byte ptr [eax+1Ch] 1 +
jz loc_100EEB1  +
push offset dword_10022B4  +
push 65h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10054B7  +
mov eax dword_1031BD8 +
inc dword ptr [eax+4Ch]  +
mov [eax+48h] esi +
mov eax dword_1031BD4 +
mov ecx [eax] +
lea edx [ebp-2804h] +
push edx  +
push 0  +
push offset aAction  +
push 0  +
push eax  +
call dword ptr [ecx+34h]  +
mov esi eax +
test esi esi +
jge loc_100EF0C  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_100EF01  +
test byte ptr [eax+1Ch] 1 +
jz loc_100EF01  +
push offset dword_10022B4  +
push 66h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10054B7  +
mov eax dword_1031BD8 +
inc dword ptr [eax+4Ch]  +
mov [eax+48h] esi +
lea edx [ebp-2804h] +
mov eax edx +
lea esi [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_100EF17  +
sub eax esi +
sar eax 1 +
push eax  +
mov eax [ebp-2808h] +
push edx  +
add eax 6Ch +
push eax  +
call sub_101F899  +
test eax eax +
jz loc_100EF4F  +
jle loc_100EF43  +
and eax 0FFFFh +
or eax ebx +
mov ecx dword_1031BD8 +
inc dword ptr [ecx+4Ch]  +
mov [ecx+48h] eax +
mov eax [ebp-2808h] +
push dword ptr [edi+18h]  +
add eax 0A4h +
push eax  +
call sub_101E8AF  +
mov esi eax +
test esi esi +
jz loc_100EFA5  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_100EF8E  +
test byte ptr [eax+1Ch] 1 +
jz loc_100EF8E  +
push esi  +
push offset dword_10022B4  +
push 67h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10062BE  +
test esi esi +
jle loc_100EF9A  +
and esi 0FFFFh +
or esi ebx +
mov eax dword_1031BD8 +
inc dword ptr [eax+4Ch]  +
mov [eax+48h] esi +
push dword ptr [edi+18h]  +
mov eax dword_1031BD4 +
mov ecx [eax] +
push 0  +
push offset aCursorcoordsxy  +
push 0  +
push eax  +
call dword ptr [ecx+34h]  +
mov esi eax +
test esi esi +
jge loc_100EFF1  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_100EFE6  +
test byte ptr [eax+1Ch] 1 +
jz loc_100EFE6  +
push offset dword_10022B4  +
push 68h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10054B7  +
mov eax dword_1031BD8 +
inc dword ptr [eax+4Ch]  +
mov [eax+48h] esi +
mov eax [ebp-2808h] +
push dword ptr [edi+1Ch]  +
add eax 84h +
push eax  +
call sub_101E818  +
mov esi eax +
test esi esi +
jz loc_100F047  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_100F030  +
test byte ptr [eax+1Ch] 1 +
jz loc_100F030  +
push esi  +
push offset dword_10022B4  +
push 69h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10062BE  +
test esi esi +
jle loc_100F03C  +
and esi 0FFFFh +
or esi ebx +
mov eax dword_1031BD8 +
inc dword ptr [eax+4Ch]  +
mov [eax+48h] esi +
push dword ptr [edi+1Ch]  +
mov eax dword_1031BD4 +
mov ecx [eax] +
push 0  +
push offset aScreencoordsxy  +
push 0  +
push eax  +
call dword ptr [ecx+34h]  +
mov esi eax +
test esi esi +
jge loc_100F093  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_100F088  +
test byte ptr [eax+1Ch] 1 +
jz loc_100F088  +
push offset dword_10022B4  +
push 6Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10054B7  +
mov eax dword_1031BD8 +
inc dword ptr [eax+4Ch]  +
mov [eax+48h] esi +
push dword_1031BD4  +
push dword ptr [ebp-2808h]  +
push dword ptr [edi+20h]  +
push dword ptr [ebp-2818h]  +
call sub_100D8E3  +
mov esi eax +
test esi esi +
jge loc_100F0E2  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_100F0D7  +
test byte ptr [eax+1Ch] 1 +
jz loc_100F0D7  +
push offset dword_10022B4  +
push 6Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10054B7  +
mov eax dword_1031BD8 +
inc dword ptr [eax+4Ch]  +
mov [eax+48h] esi +
mov eax [edi+24h] +
xor ecx ecx +
cmp cx [eax] +
jz loc_100F172  +
inc dword_1031BCC  +
mov eax dword_1031BD8 +
mov eax [eax] +
mov ecx [eax+40h] +
mov eax [ebp-281Ch] +
mov eax [eax+20h] +
cmp eax ecx +
jbe loc_100F115  +
sub eax ecx +
mov [ebp-2820h] eax +
mov eax [ebp-2820h] +
cmp dword_1031BCC eax +
jbe loc_100F172  +
push dword_1031BC8  +
push dword ptr [edi+24h]  +
push dword ptr [ebp-2808h]  +
push dword_1031BD4  +
call sub_100C7E4  +
mov esi eax +
test esi esi +
jge loc_100F172  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_100F167  +
test byte ptr [eax+1Ch] 1 +
jz loc_100F167  +
push offset dword_10022B4  +
push 6Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10054B7  +
mov eax dword_1031BD8 +
inc dword ptr [eax+4Ch]  +
mov [eax+48h] esi +
cmp dword ptr [ebp-2824h] 0 +
jz loc_100F241  +
mov ecx [edi+28h] +
mov eax ecx +
lea esi [eax+2] +
mov dx [eax] +
inc eax  +
inc eax  +
test dx dx +
jnz loc_100F187  +
sub eax esi +
sar eax 1 +
push eax  +
mov eax [ebp-2808h] +
push ecx  +
add eax 78h +
push eax  +
call sub_101F899  +
test eax eax +
jz loc_100F1BF  +
jle loc_100F1B3  +
and eax 0FFFFh +
or eax ebx +
mov ecx dword_1031BD8 +
inc dword ptr [ecx+4Ch]  +
mov [ecx+48h] eax +
push dword ptr [edi+28h]  +
mov eax [ebp-2808h] +
push offset aWs_2  +
push dword ptr [eax+10h]  +
add eax 0Ch +
push eax  +
call sub_102049D  +
add esp 10h +
test eax eax +
jz loc_100F1F5  +
jle loc_100F1E9  +
and eax 0FFFFh +
or eax ebx +
mov ecx dword_1031BD8 +
inc dword ptr [ecx+4Ch]  +
mov [ecx+48h] eax +
push dword ptr [edi+28h]  +
mov eax dword_1031BD4 +
mov ecx [eax] +
push 0  +
push offset aText  +
push 0  +
push eax  +
call dword ptr [ecx+34h]  +
mov esi eax +
test esi esi +
jge loc_100F241  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_100F236  +
test byte ptr [eax+1Ch] 1 +
jz loc_100F236  +
push offset dword_10022B4  +
push 6Dh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10054B7  +
mov eax dword_1031BD8 +
mov [eax+48h] esi +
inc dword ptr [eax+4Ch]  +
mov eax [ebp-2808h] +
or dword ptr [eax+0CCh] 1 +
xor esi esi +
mov eax dword_1031BD4 +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+3Ch]  +
mov ecx [ebp-2808h] +
test ecx ecx +
jz loc_100F282  +
mov eax dword_1031BD8 +
mov edx [eax+40h] +
add eax 3Ch +
mov [ecx] eax +
mov [ecx+4] edx +
mov [edx] ecx +
mov [eax+4] ecx +
mov eax dword_1031BD8 +
inc dword ptr [eax+44h]  +
test esi esi +
jge loc_100F2A2  +
mov eax dword_1031BD8 +
inc dword ptr [eax+4Ch]  +
mov [eax+48h] esi +
push dword_1031BD4  +
mov ecx dword_1031BD8 +
call sub_100C764  +
cmp dword ptr [ebp-2810h] 0 +
pop edi  +
pop esi  +
pop ebx  +
jz loc_100F2BA  +
push dword ptr [ebp-2810h]  +
call ds:LocalFree  +
lea eax [ebp-2830h] +
push eax  +
call sub_101F747  +
mov ecx [ebp-4] +
xor ecx ebp +
call sub_101BC5D  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1B8h +
mov eax dword_1030118 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_4] +
or [ebp+var_1B8] 0FFFFFFFFh +
push ebx  +
mov ebx [ebp+arg_8] +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov [ebp+var_1AC] eax +
xor eax eax +
push 19Ch  +
push eax  +
mov [ebp+var_1B4] eax +
mov [ebp+var_1A4] eax +
lea eax [ebp+var_1A0] +
push eax  +
mov [ebp+var_1A8] 80004005h +
call memset  +
mov eax [ebp+arg_C] +
add esp 0Ch +
mov dword_1031BD8 esi +
mov [esi+50h] eax +
push 0Ah  +
xor eax eax +
pop ecx  +
lea edi [esi+8] +
stos   +
mov eax dword_1031BD8 +
mov eax [eax+4Ch] +
mov [ebp+var_1B0] eax +
lea eax [ebp+var_1A4] +
push eax  +
mov dword_1030010 1 +
mov [ebp+var_1A4] ebx +
mov [ebp+var_14] offset loc_100E530 +
mov [ebp+var_190] 10000000h +
call ds:OpenTraceW  +
mov [ebp+var_1B8] eax +
mov [ebp+var_1B4] edx +
cmp eax 0FFFFFFFFh +
jnz loc_100F3CA  +
test edx edx +
jnz loc_100F3CA  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_100F70D  +
test byte ptr [eax+1Ch] 1 +
jz loc_100F70D  +
call ds:GetLastError  +
push eax  +
mov eax off_1030000 +
push offset dword_10022B4  +
push 41h  +
jmp loc_100F412  +
mov edi [ebp+var_1AC] +
mov eax [edi] +
push 0  +
push offset aRecordsession  +
push 0  +
push edi  +
call dword ptr [eax+6Ch]  +
mov [ebp+var_1A8] eax +
test eax eax +
jge loc_100F422  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_100F70D  +
test byte ptr [eax+1Ch] 1 +
jz loc_100F70D  +
movzx ecx word ptr [ebp+var_1A8] +
push ecx  +
push offset dword_10022B4  +
push 42h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10062BE  +
jmp loc_100F70D  +
push [ebp+arg_C]  +
push offset aSessioncount  +
push edi  +
call sub_100BB64  +
mov edi eax +
mov ebx offset dword_10022B4 +
test edi edi +
jge loc_100F465  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_100F45F  +
test byte ptr [eax+1Ch] 1 +
jz loc_100F45F  +
movzx ecx di +
push ecx  +
push ebx  +
push 43h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10062BE  +
inc dword ptr [esi+4Ch]  +
mov [esi+48h] edi +
xor edi edi +
inc edi  +
mov dword_1030014 edi +
call sub_100C333  +
call sub_100C0B1  +
push 0  +
push 0  +
push edi  +
lea eax [ebp+var_1B8] +
push eax  +
call ds:ProcessTrace  +
test eax eax +
jz loc_100F4D3  +
jle loc_100F49A  +
and eax 0FFFFh +
or eax 80070000h +
mov [ebp+var_1A8] eax +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_100F6CD  +
test byte ptr [eax+1Ch] 1 +
jz loc_100F6CD  +
push [ebp+var_1A8]  +
push ebx  +
push 44h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10062BE  +
jmp loc_100F6CD  +
mov ecx dword_1031BD8 +
mov edx [ecx+4Ch] +
cmp [ebp+var_1B0] edx +
jz loc_100F51D  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_100F514  +
test byte ptr [eax+1Ch] 1 +
jz loc_100F514  +
push edx  +
push [ebp+var_1B0]  +
push dword ptr [ecx+48h]  +
push ebx  +
push 45h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100B7AD  +
mov ecx dword_1031BD8 +
mov eax [ecx+4Ch] +
mov [ebp+var_1B0] eax +
push dword ptr [esi+0Ch]  +
push dword ptr [esi+8]  +
push offset aStarttime  +
push [ebp+var_1AC]  +
call sub_100BC29  +
mov edi eax +
test edi edi +
jge loc_100F560  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_100F55A  +
test byte ptr [eax+1Ch] 1 +
jz loc_100F55A  +
push edi  +
push ebx  +
push 46h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10062BE  +
inc dword ptr [esi+4Ch]  +
mov [esi+48h] edi +
push dword ptr [esi+14h]  +
push dword ptr [esi+10h]  +
push offset aStoptime  +
push [ebp+var_1AC]  +
call sub_100BC29  +
mov edi eax +
test edi edi +
jge loc_100F5A3  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_100F59D  +
test byte ptr [eax+1Ch] 1 +
jz loc_100F59D  +
push edi  +
push ebx  +
push 47h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10062BE  +
inc dword ptr [esi+4Ch]  +
mov [esi+48h] edi +
push dword ptr [esi+18h]  +
push offset aActioncount  +
push [ebp+var_1AC]  +
call sub_100BB64  +
mov edi eax +
test edi edi +
jge loc_100F5E3  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_100F5DD  +
test byte ptr [eax+1Ch] 1 +
jz loc_100F5DD  +
push edi  +
push ebx  +
push 48h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10062BE  +
inc dword ptr [esi+4Ch]  +
mov [esi+48h] edi +
push dword ptr [esi+1Ch]  +
push offset aMissedactionco  +
push [ebp+var_1AC]  +
call sub_100BB64  +
mov edi eax +
xor ecx ecx +
cmp edi ecx +
jge loc_100F627  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_100F621  +
test byte ptr [eax+1Ch] 1 +
jz loc_100F621  +
push edi  +
push ebx  +
push 49h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10062BE  +
xor ecx ecx +
inc dword ptr [esi+4Ch]  +
mov [esi+48h] edi +
mov eax [ebp+var_1AC] +
push ecx  +
push ecx  +
mov dword_1031BD4 eax +
push 1  +
lea eax [ebp+var_1B8] +
push eax  +
mov dword_1031BC8 ecx +
mov dword_1031BCC ecx +
mov dword_1030014 ecx +
call ds:ProcessTrace  +
test eax eax +
jz loc_100F68B  +
jle loc_100F665  +
and eax 0FFFFh +
or eax 80070000h +
mov [ebp+var_1A8] eax +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_100F6CD  +
test byte ptr [eax+1Ch] 1 +
jz loc_100F6CD  +
push [ebp+var_1A8]  +
push ebx  +
push 4Ah  +
jmp loc_100F4C3  +
mov ecx dword_1031BD8 +
mov edx [ecx+4Ch] +
cmp [ebp+var_1B0] edx +
jz loc_100F6C6  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_100F6C6  +
test byte ptr [eax+1Ch] 1 +
jz loc_100F6C6  +
push edx  +
push [ebp+var_1B0]  +
push dword ptr [ecx+48h]  +
push ebx  +
push 4Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100B7AD  +
and [ebp+var_1A8] 0 +
mov eax [ebp+var_1AC] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+3Ch]  +
test eax eax +
jge loc_100F70D  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_100F703  +
test byte ptr [eax+1Ch] 1 +
jz loc_100F703  +
push [ebp+var_1A8]  +
push ebx  +
push 4Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10062BE  +
mov [ebp+var_1A8] 80004005h +
xor edi edi +
cmp [ebp+var_1B8] 0FFFFFFFFh +
jnz loc_100F720  +
cmp [ebp+var_1B4] edi +
jz loc_100F73F  +
push [ebp+var_1B4]  +
push [ebp+var_1B8]  +
call ds:CloseTrace  +
or [ebp+var_1B8] 0FFFFFFFFh +
mov [ebp+var_1B4] edi +
call sub_100C333  +
call sub_100C0B1  +
cmp dword_1031BD8 edi +
jz loc_100F757  +
mov dword_1031BD8 edi +
mov eax [ebp+var_1A8] +
cmp eax edi +
mov dword_1031BD4 edi +
jge loc_100F76D  +
inc dword ptr [esi+4Ch]  +
mov [esi+48h] eax +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_101BC5D  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 474h +
mov eax dword_1030118 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_8] +
or [ebp+hFindFile] 0FFFFFFFFh +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
push edi  +
mov edi [ebp+arg_4] +
xor esi esi +
push 24Ch  +
mov [ebp+lpszDir] eax +
lea eax [ebp-458h] +
push esi  +
push eax  +
mov [ebp+var_470] ecx +
mov [ebp+var_464] ebx +
mov [ebp+var_468] 1 +
mov dword ptr [ebp+FindFileData] esi +
call memset  +
mov eax [edi] +
add esp 0Ch +
push esi  +
push offset aUseractiondata  +
push esi  +
push edi  +
call dword ptr [eax+6Ch]  +
mov esi eax +
test esi esi +
jge loc_100F82C  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_100FA27  +
test byte ptr [eax+1Ch] 1 +
jz loc_100FA27  +
movzx ecx si +
push ecx  +
push offset dword_10022B4  +
push 39h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10062BE  +
jmp loc_100FA27  +
push offset szFile  +
push [ebp+lpszDir]  +
lea eax [ebp+szDest] +
push eax  +
call ds:PathCombineW  +
test eax eax +
jnz loc_100F877  +
mov eax off_1030000 +
mov ebx offset dword_10022B4 +
cmp eax offset off_1030000 +
jz loc_100F86D  +
test byte ptr [eax+1Ch] 1 +
jz loc_100F86D  +
push ebx  +
push 3Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10054B7  +
mov esi 80004005h +
jmp loc_100F9DC  +
lea eax [ebp+FindFileData] +
push eax  +
lea eax [ebp+szDest] +
push eax  +
call ds:FindFirstFileW  +
mov [ebp+hFindFile] eax +
cmp eax 0FFFFFFFFh +
jnz loc_100F8B2  +
mov eax off_1030000 +
mov ebx offset dword_10022B4 +
cmp eax offset off_1030000 +
jz loc_100F86D  +
test byte ptr [eax+1Ch] 1 +
jz loc_100F86D  +
push ebx  +
push 3Bh  +
jmp loc_100F862  +
mov ebx offset dword_10022B4 +
lea eax [ebp-430h] +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_100F8C0  +
sub eax edx +
sar eax 1 +
jnz loc_100F8EF  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_100F9B9  +
test byte ptr [eax+1Ch] 1 +
jz loc_100F9B9  +
push ebx  +
push 3Ch  +
jmp loc_100F968  +
lea eax [ebp-430h] +
push eax  +
push [ebp+lpszDir]  +
lea eax [ebp+szDest] +
push eax  +
call ds:PathCombineW  +
test eax eax +
jnz loc_100F92C  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_100F9B9  +
test byte ptr [eax+1Ch] 1 +
jz loc_100F9B9  +
push ebx  +
push 3Dh  +
jmp loc_100F968  +
mov esi [ebp+var_464] +
lea eax [ebp-430h] +
push eax  +
push offset aWs_3  +
lea eax [esi+54h] +
push 104h  +
push eax  +
call sub_100C705  +
add esp 10h +
test eax eax +
jge loc_100F975  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_100F9B9  +
test byte ptr [eax+1Ch] 1 +
jz loc_100F9B9  +
push ebx  +
push 3Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10054B7  +
jmp loc_100F9B9  +
push [ebp+var_468]  +
mov ecx [ebp+var_470] +
lea eax [ebp+szDest] +
push eax  +
push edi  +
push esi  +
call sub_100F2D9  +
test eax eax +
jge loc_100F9B9  +
mov ecx off_1030000 +
cmp ecx offset off_1030000 +
jz loc_100F9B9  +
test byte ptr [ecx+1Ch] 1 +
jz loc_100F9B9  +
movzx eax ax +
push eax  +
push ebx  +
push 3Fh  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10062BE  +
inc [ebp+var_468]  +
lea eax [ebp+FindFileData] +
push eax  +
push [ebp+hFindFile]  +
call ds:FindNextFileW  +
test eax eax +
jnz loc_100F8B7  +
xor esi esi +
mov eax [edi] +
push edi  +
call dword ptr [eax+3Ch]  +
test eax eax +
jge loc_100FA0C  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_100FA07  +
test byte ptr [eax+1Ch] 1 +
jz loc_100FA07  +
push esi  +
push ebx  +
push 40h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10062BE  +
mov esi 80004005h +
cmp [ebp+hFindFile] 0FFFFFFFFh +
jz loc_100FA21  +
push [ebp+hFindFile]  +
call ds:FindClose  +
mov ebx [ebp+var_464] +
test esi esi +
jge loc_100FA31  +
inc dword ptr [ebx+4Ch]  +
mov [ebx+48h] esi +
mov ecx [ebp+var_4] +
pop edi  +
mov eax esi +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_101BC5D  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
mov esi [ebp+arg_4] +
mov eax [esi] +
push edi  +
xor ebx ebx +
push ebx  +
push esi  +
mov [ebp+var_4] ecx +
call dword ptr [eax+68h]  +
mov edi eax +
cmp edi ebx +
jge loc_100FA91  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_100FBD5  +
test byte ptr [eax+1Ch] 1 +
jz loc_100FBD5  +
movzx ecx di +
push ecx  +
push offset dword_10022B4  +
push 23h  +
jmp loc_100FBC6  +
mov eax [esi] +
push ebx  +
push offset aReport  +
push ebx  +
push esi  +
call dword ptr [eax+6Ch]  +
mov edi eax +
cmp edi ebx +
jge loc_100FACE  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_100FBD5  +
test byte ptr [eax+1Ch] 1 +
jz loc_100FBD5  +
movzx ecx di +
push ecx  +
push offset dword_10022B4  +
push 24h  +
jmp loc_100FBC6  +
push [ebp+arg_0]  +
mov ecx [ebp+var_4] +
push esi  +
call sub_100BE16  +
mov ebx offset dword_10022B4 +
test eax eax +
jge loc_100FB09  +
mov ecx off_1030000 +
cmp ecx offset off_1030000 +
jz loc_100FB09  +
test byte ptr [ecx+1Ch] 1 +
jz loc_100FB09  +
movzx eax ax +
push eax  +
push ebx  +
push 25h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10062BE  +
push [ebp+arg_8]  +
mov ecx [ebp+var_4] +
push esi  +
push [ebp+arg_0]  +
call sub_100F783  +
mov edi eax +
test edi edi +
jge loc_100FB44  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_100FBD5  +
test byte ptr [eax+1Ch] 1 +
jz loc_100FBD5  +
movzx ecx di +
push ecx  +
push ebx  +
push 26h  +
jmp loc_100FBC6  +
mov ecx [ebp+arg_0] +
cmp dword ptr [ecx+4Ch] 0 +
jz loc_100FB53  +
push esi  +
call sub_100C764  +
mov eax [esi] +
push esi  +
call dword ptr [eax+3Ch]  +
mov edi eax +
test edi edi +
jge loc_100FB7A  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_100FBD5  +
test byte ptr [eax+1Ch] 1 +
jz loc_100FBD5  +
movzx ecx di +
push ecx  +
push ebx  +
push 27h  +
jmp loc_100FBC6  +
mov eax [esi] +
push esi  +
call dword ptr [eax+38h]  +
mov edi eax +
test edi edi +
jge loc_100FBA1  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_100FBD5  +
test byte ptr [eax+1Ch] 1 +
jz loc_100FBD5  +
movzx ecx di +
push ecx  +
push ebx  +
push 28h  +
jmp loc_100FBC6  +
mov eax [esi] +
push esi  +
call dword ptr [eax+7Ch]  +
mov edi eax +
test edi edi +
jge loc_100FBD3  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_100FBD5  +
test byte ptr [eax+1Ch] 1 +
jz loc_100FBD5  +
movzx ecx di +
push ecx  +
push ebx  +
push 29h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10062BE  +
jmp loc_100FBD5  +
xor edi edi +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
call __EH_prolog3_GS  +
mov esi [ebp+8] +
xor eax eax +
mov [ebp-224h] ecx +
mov [ebp-220h] eax +
mov [ebp-4] eax +
mov [ebp-21Ch] eax +
mov ebx [esi+34h] +
mov byte ptr [ebp-4] 1 +
call sub_100BA51  +
mov edi eax +
test edi edi +
jge loc_100FC53  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_100FDF0  +
test byte ptr [eax+1Ch] 1 +
jz loc_100FDF0  +
movzx ecx di +
push ecx  +
push offset dword_10022B4  +
push 1Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10062BE  +
jmp loc_100FDF0  +
push offset aProblemxml_xml  +
push ebx  +
lea eax [ebp-218h] +
push eax  +
call ds:PathCombineW  +
test eax eax +
jnz loc_100FCA0  +
mov edi 80004005h +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_100FDF0  +
test byte ptr [eax+1Ch] 1 +
jz loc_100FDF0  +
push offset dword_10022B4  +
push 1Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10054B7  +
jmp loc_100FDF0  +
lea eax [ebp-220h] +
push eax  +
push 0  +
push 1  +
push 80h  +
push 1001h  +
lea eax [ebp-218h] +
push eax  +
call ds:SHCreateStreamOnFileEx  +
mov edi eax +
test edi edi +
jge loc_100FCF2  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_100FDF0  +
test byte ptr [eax+1Ch] 1 +
jz loc_100FDF0  +
movzx ecx di +
push ecx  +
push offset dword_10022B4  +
push 1Ch  +
jmp loc_100FC43  +
push 0  +
lea eax [ebp-21Ch] +
push eax  +
push offset dword_1002B20  +
call CreateXmlWriter  +
mov edi eax +
test edi edi +
jge loc_100FD35  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_100FDF0  +
test byte ptr [eax+1Ch] 1 +
jz loc_100FDF0  +
movzx ecx di +
push ecx  +
push offset dword_10022B4  +
push 1Dh  +
jmp loc_100FC43  +
mov eax [ebp-21Ch] +
mov ecx [eax] +
push 1  +
push 1  +
push eax  +
call dword ptr [ecx+14h]  +
mov edi eax +
test edi edi +
jge loc_100FD75  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_100FDF0  +
test byte ptr [eax+1Ch] 1 +
jz loc_100FDF0  +
movzx ecx di +
push ecx  +
push offset dword_10022B4  +
push 1Eh  +
jmp loc_100FC43  +
mov eax [ebp-21Ch] +
push dword ptr [ebp-220h]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+0Ch]  +
mov edi eax +
test edi edi +
jge loc_100FDAF  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_100FDF0  +
test byte ptr [eax+1Ch] 1 +
jz loc_100FDF0  +
movzx ecx di +
push ecx  +
push offset dword_10022B4  +
push 1Fh  +
jmp loc_100FC43  +
mov eax [ebp-21Ch] +
mov ecx [ebp-224h] +
push ebx  +
push eax  +
push esi  +
mov [esi+38h] eax +
call sub_100FA49  +
mov edi eax +
test edi edi +
jge loc_100FDEE  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_100FDF0  +
test byte ptr [eax+1Ch] 1 +
jz loc_100FDF0  +
movzx ecx di +
push ecx  +
push offset dword_10022B4  +
push 20h  +
jmp loc_100FC43  +
xor edi edi +
mov eax [ebp-21Ch] +
test eax eax +
jz loc_100FE07  +
and dword ptr [ebp-21Ch] 0 +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-220h] +
test eax eax +
jz loc_100FE1E  +
and dword ptr [ebp-220h] 0 +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-21Ch] +
mov byte ptr [ebp-4] 0 +
test eax eax +
jz loc_100FE32  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-220h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
test eax eax +
jz loc_100FE46  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax edi +
call sub_101BE3E  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 984h +
mov eax dword_1030118 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_4] +
mov [ebp+var_918] eax +
mov eax [ebp+arg_C] +
push ebx  +
mov ebx [ebp+arg_0] +
mov [ebp+var_940] eax +
push esi  +
push edi  +
lea eax [ebx+44h] +
mov [ebp+pszPath] eax +
xor eax eax +
xor esi esi +
mov [ebp+var_93C] esi +
lea edi [ebp+var_938] +
stos   +
stos   +
stos   +
xor eax eax +
mov [ebp+var_92C] esi +
lea edi [ebp+var_928] +
stos   +
push 40h  +
stos   +
lea eax [ebp+var_980] +
push esi  +
push eax  +
mov [ebp+var_920] ecx +
mov [ebp+var_984] esi +
call memset  +
push 158h  +
call sub_101B56A  +
add esp 10h +
cmp eax esi +
jz loc_100FEEF  +
push [ebp+var_918]  +
mov ecx eax +
push [ebp+pszPath]  +
call sub_100B741  +
mov esi eax +
test esi esi +
jnz loc_100FEFD  +
mov edi 8007000Eh +
jmp loc_1010520  +
mov ecx [ebp+var_920] +
push esi  +
mov [esi] ebx +
call sub_100FBE3  +
mov edi eax +
test edi edi +
jge loc_100FF46  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_1010517  +
test byte ptr [eax+1Ch] 1 +
jz loc_1010517  +
movzx ecx di +
push ecx  +
push offset dword_10022B4  +
push 0Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10062BE  +
jmp loc_1010517  +
cmp dword ptr [ebx+14h] 0 +
jz loc_101004A  +
mov ecx [ebp+var_920] +
push offset aProblemxml_xml  +
push offset a_xml  +
push [ebp+pszPath]  +
push [ebp+var_918]  +
call sub_100B945  +
mov edi eax +
test edi edi +
jge loc_100FF9E  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_1010517  +
test byte ptr [eax+1Ch] 1 +
jz loc_1010517  +
movzx ecx di +
push ecx  +
push offset dword_10022B4  +
push 0Bh  +
jmp loc_100FF36  +
cmp edi 1 +
jnz loc_1010515  +
push 100h  +
lea eax [ebp+WideCharStr] +
push eax  +
push 0FFFFFFFFh  +
lea eax [esi+54h] +
push eax  +
push 0  +
push 0  +
call ds:MultiByteToWideChar  +
test eax eax +
jnz loc_100FFEE  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_1010517  +
test byte ptr [eax+1Ch] 1 +
jz loc_1010517  +
push edi  +
push offset dword_10022B4  +
push 0Ch  +
jmp loc_100FF36  +
mov ecx [ebp+var_920] +
lea eax [ebp+WideCharStr] +
push eax  +
push offset a_etl  +
push [ebp+pszPath]  +
push [ebp+var_918]  +
call sub_100B945  +
mov edi eax +
test edi edi +
jge loc_1010041  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_1010517  +
test byte ptr [eax+1Ch] 1 +
jz loc_1010517  +
movzx ecx di +
push ecx  +
push offset dword_10022B4  +
push 0Dh  +
jmp loc_100FF36  +
cmp edi 1 +
jnz loc_1010515  +
xor eax eax +
cmp [ebx+20h] eax +
jnz loc_101005A  +
cmp [ebx+14h] eax +
jz loc_1010157  +
mov [ebp+var_984] offset aProblem_mht_0 +
mov ecx [esi+44h] +
mov [ebp+var_978] ecx +
mov ecx [esi+4Ch] +
mov [ebp+var_974] ecx +
mov ecx [esi+1Ch] +
mov [ebp+var_970] ecx +
mov ecx [ebx+8] +
mov [ebp+var_94C] ecx +
mov ecx [ebx+0Ch] +
mov [ebp+var_948] ecx +
lea ecx [esi+3Ch] +
mov [ebp+var_97C] ecx +
mov ecx [esi+34h] +
push eax  +
mov [ebp+var_980] ecx +
call ds:GetModuleHandleW  +
mov [ebp+var_968] eax +
mov [ebp+var_964] offset aProblemxml_xml +
mov eax [esi+8] +
mov [ebp+var_95C] eax +
mov eax [esi+0Ch] +
mov [ebp+var_958] eax +
mov eax [esi+10h] +
mov [ebp+var_954] eax +
mov eax [esi+14h] +
mov [ebp+var_950] eax +
xor eax eax +
cmp [ebx+1Ch] eax +
setz al  +
cmp dword ptr [ebx+4] 0 +
mov [ebp+var_960] eax +
jz loc_1010112  +
push dword ptr [esi+44h]  +
call sub_1011F68  +
test eax eax +
jnz loc_1010112  +
mov [ebp+var_944] 1 +
mov [ebp+var_96C] offset sub_1011E58 +
lea eax [ebp+var_984] +
push eax  +
call sub_102252F  +
test eax eax +
jz loc_1010157  +
jle loc_101012E  +
and eax 0FFFFh +
or eax 80070000h +
mov edi eax +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_1010517  +
test byte ptr [eax+1Ch] 1 +
jz loc_1010517  +
push edi  +
push offset dword_10022B4  +
push 0Eh  +
jmp loc_100FF36  +
cmp dword ptr [ebx+14h] 0 +
jz loc_10101B7  +
mov ecx [ebp+var_920] +
push offset aProblem_mht  +
push offset a_mht  +
push [ebp+pszPath]  +
push [ebp+var_918]  +
call sub_100B945  +
mov edi eax +
test edi edi +
jge loc_10101AE  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_1010517  +
test byte ptr [eax+1Ch] 1 +
jz loc_1010517  +
movzx ecx di +
push ecx  +
push offset dword_10022B4  +
push 0Fh  +
jmp loc_100FF36  +
cmp edi 1 +
jnz loc_1010515  +
push [ebp+pszPath]  +
lea eax [ebp+NewFileName] +
push 104h  +
push eax  +
call sub_10066E4  +
mov edi eax +
test edi edi +
jge loc_10101FB  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_1010517  +
test byte ptr [eax+1Ch] 1 +
jz loc_1010517  +
push edi  +
push offset dword_10022B4  +
push 10h  +
jmp loc_100FF36  +
lea eax [ebp+NewFileName] +
push eax  +
call ds:PathFindExtensionW  +
mov edi offset a_zip +
test eax eax +
jz loc_101021F  +
push edi  +
push eax  +
call ds:_wcsicmp  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_101026C  +
lea eax [ebp+NewFileName] +
push eax  +
call ds:PathRemoveExtensionW  +
push edi  +
lea eax [ebp+NewFileName] +
push eax  +
call ds:PathAddExtensionW  +
test eax eax +
jnz loc_101026C  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_1010262  +
test byte ptr [eax+1Ch] 1 +
jz loc_1010262  +
push offset dword_10022B4  +
push 11h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10054B7  +
mov edi 80004005h +
jmp loc_1010517  +
xor eax eax +
lea edi [ebp+var_93C] +
stos   +
stos   +
stos   +
stos   +
or [ebp+var_930] 1 +
push 0  +
call ds:GetModuleHandleW  +
and [ebp+var_918] 0 +
mov [ebp+var_93C] eax +
mov eax [esi+34h] +
mov [ebp+var_934] eax +
xor eax eax +
cmp dword ptr [ebx+20h] 0 +
lea edi [ebp+var_92C] +
stos   +
stos   +
mov [ebp+var_938] offset aTemparchive_zi +
stos   +
jz loc_101031B  +
mov eax [esi+34h] +
push 100h  +
lea ecx [ebp+var_30C] +
push ecx  +
push eax  +
push eax  +
push offset aProblem_mht_0  +
push offset aProblem_mht  +
call sub_100D45A  +
mov edi eax +
test edi edi +
jge loc_1010305  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_1010517  +
test byte ptr [eax+1Ch] 1 +
jz loc_1010517  +
push edi  +
push offset dword_10022B4  +
push 12h  +
jmp loc_100FF36  +
lea eax [ebp+var_30C] +
mov [ebp+var_92C] eax +
mov [ebp+var_918] 1 +
cmp dword ptr [ebx+18h] 0 +
jz loc_1010386  +
mov eax [esi+34h] +
push 100h  +
lea ecx [ebp+var_50C] +
push ecx  +
push eax  +
push eax  +
lea eax [esi+54h] +
push eax  +
push offset aProblemetl_etl  +
call sub_100D45A  +
mov edi eax +
test edi edi +
jge loc_101036D  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_1010517  +
test byte ptr [eax+1Ch] 1 +
jz loc_1010517  +
push edi  +
push offset dword_10022B4  +
push 13h  +
jmp loc_100FF36  +
mov ecx [ebp+var_918] +
inc [ebp+var_918]  +
lea eax [ebp+var_50C] +
mov [ebp+ecx*4+var_92C] eax +
cmp dword ptr [ebx+1Ch] 0 +
jz loc_10103F2  +
mov eax [esi+34h] +
push 100h  +
lea ecx [ebp+var_40C] +
push ecx  +
push eax  +
push eax  +
push offset aProblemxml_x_0  +
push offset aProblemxml_xml  +
call sub_100D45A  +
mov edi eax +
test edi edi +
jge loc_10103D9  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_1010517  +
test byte ptr [eax+1Ch] 1 +
jz loc_1010517  +
push edi  +
push offset dword_10022B4  +
push 14h  +
jmp loc_100FF36  +
mov ecx [ebp+var_918] +
inc [ebp+var_918]  +
lea eax [ebp+var_40C] +
mov [ebp+ecx*4+var_92C] eax +
cmp dword ptr [ebx+4] 0 +
jz loc_1010405  +
mov eax [esi+44h] +
push eax  +
add eax 2 +
push eax  +
call sub_1011E58  +
push [ebp+var_918]  +
lea eax [ebp+var_92C] +
push eax  +
lea eax [ebp+var_93C] +
push eax  +
call sub_1022C12  +
mov edi eax +
test edi edi +
jz loc_1010462  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_1010449  +
test byte ptr [eax+1Ch] 1 +
jz loc_1010449  +
push edi  +
push offset dword_10022B4  +
push 15h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10062BE  +
test edi edi +
jle loc_1010517  +
and edi 0FFFFh +
or edi 80070000h +
jmp loc_1010517  +
push offset aTemparchive_zi  +
push dword ptr [esi+34h]  +
lea eax [ebp+ExistingFileName] +
push offset aWsS  +
push 208h  +
push eax  +
call sub_10067AA  +
mov edi eax +
add esp 14h +
test edi edi +
jl loc_1010517  +
push 3  +
lea eax [ebp+NewFileName] +
push eax  +
lea eax [ebp+ExistingFileName] +
push eax  +
call ds:MoveFileExW  +
test eax eax +
jnz loc_10104F1  +
call ds:GetLastError  +
test eax eax +
jnz loc_10104B8  +
mov eax 54Fh +
test eax eax +
mov edi eax +
jle loc_10104C8  +
and edi 0FFFFh +
or edi 80070000h +
mov ecx off_1030000 +
cmp ecx offset off_1030000 +
jz loc_1010517  +
test byte ptr [ecx+1Ch] 1 +
jz loc_1010517  +
push eax  +
push offset dword_10022B4  +
push 16h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10062BE  +
jmp loc_1010517  +
lea eax [ebp+NewFileName] +
push eax  +
push [ebp+arg_8]  +
push [ebp+var_940]  +
call sub_10066E4  +
push [ebp+pszPath]  +
lea eax [esi+8] +
push eax  +
call sub_1009F52  +
xor edi edi +
push 1  +
mov ecx esi +
call sub_100B91F  +
mov ecx [ebp+var_4] +
mov eax edi +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_101BC5D  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
mov edi ecx +
cmp dword ptr [edi+0A98h] 1 +
jz loc_1010550  +
mov eax 80004005h +
jmp loc_1010580  +
cmp dword ptr [edi+454h] 0 +
push esi  +
mov esi [ebp+arg_0] +
jz loc_101056C  +
mov eax [esi+4] +
cmp eax [edi+4] +
jz loc_101056C  +
mov eax 80070057h +
jmp loc_101057F  +
push esi  +
call sub_1007248  +
test eax eax +
jl loc_101057F  +
mov ecx 115h +
movs   +
xor eax eax +
pop esi  +
pop edi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_14] +
test edx edx +
jz loc_10105BB  +
cmp word ptr [edx] 0 +
jnz loc_10105A0  +
push 0Eh  +
jmp loc_10105BD  +
mov eax edx +
push esi  +
lea esi [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_10105A6  +
sub eax esi +
sar eax 1 +
lea eax [eax+eax+2] +
pop esi  +
jmp loc_10105BE  +
push 0Ah  +
pop eax  +
test edx edx +
jz loc_10105CF  +
cmp word ptr [edx] 0 +
jnz loc_10105D4  +
mov edx offset aNull +
jmp loc_10105D4  +
mov edx offset aNull_0 +
push 0  +
push eax  +
push edx  +
push 4  +
lea eax [ebp+arg_10] +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_C]  +
push 2Bh  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call TraceMessage  +
add esp 28h +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push 4  +
lea eax [ebp+arg_14] +
push eax  +
push 4  +
lea eax [ebp+arg_10] +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_C]  +
push 2Bh  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call TraceMessage  +
add esp 28h +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax 2018h +
call __alloca_probe  +
mov eax dword_1030118 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
push edi  +
xor esi esi +
xor eax eax +
mov [ebp+pvParam] esi +
lea edi [ebp+var_2014] +
stos   +
push 50h  +
stos   +
pop ebx  +
stos   +
push esi  +
lea eax [ebp+pvParam] +
push eax  +
push esi  +
push 30h  +
mov [ebp+var_2008] esi +
mov edi ebx +
call ds:SystemParametersInfoW  +
test eax eax +
jz loc_101068F  +
mov edi [ebp+pvParam] +
add edi ebx +
mov ebx [ebp+var_2014] +
add ebx 50h +
push 1000h  +
lea eax [ebp+WindowName] +
push eax  +
push 66h  +
push hInstance  +
call ds:LoadStringW  +
test eax eax +
jnz loc_10106DE  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_1010781  +
test byte ptr [eax+1Ch] 1 +
jz loc_1010781  +
push offset dword_1002BB4  +
push 0Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10054B7  +
jmp loc_1010781  +
push esi  +
push hInstance  +
lea eax [ebp+WindowName] +
push esi  +
push esi  +
push 0C8h  +
push 352h  +
push ebx  +
push edi  +
push 80CA0000h  +
push eax  +
push offset ClassName  +
push 20000h  +
call ds:CreateWindowExW  +
mov hWnd eax +
cmp eax esi +
jnz loc_101074A  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_1010781  +
test byte ptr [eax+1Ch] 1 +
jz loc_1010781  +
call ds:GetLastError  +
push eax  +
mov eax off_1030000 +
push offset dword_1002BB4  +
push 0Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10062BE  +
jmp loc_1010781  +
xor ebx ebx +
inc ebx  +
push ebx  +
push eax  +
call ds:ShowWindow  +
mov edi ds:SetWindowPos +
push 43h  +
push esi  +
push esi  +
push esi  +
push esi  +
push 0FFFFFFFFh  +
push hWnd  +
call edi  +
push 43h  +
push esi  +
push esi  +
push esi  +
push esi  +
push 0FFFFFFFEh  +
push hWnd  +
call edi  +
mov [ebp+var_2008] ebx +
mov ecx [ebp+var_4] +
mov eax [ebp+var_2008] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_101BC5D  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax 206Ch +
call __alloca_probe  +
mov eax dword_1030118 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
xor esi esi +
push 60h  +
lea eax [ebp+var_2064] +
push esi  +
push eax  +
mov [ebp+var_206C] esi +
mov [ebp+lParam] esi +
call memset  +
add esp 0Ch +
push esi  +
push hInstance  +
push esi  +
push edi  +
push esi  +
push esi  +
push esi  +
push esi  +
push 50009100h  +
push esi  +
push offset aToolbarwindow3  +
push 8  +
call ds:CreateWindowExW  +
mov dword_1035904 eax +
cmp eax esi +
jnz loc_1010840  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_10109F9  +
test byte ptr [eax+1Ch] 1 +
jz loc_10109F9  +
call ds:GetLastError  +
push eax  +
mov eax off_1030000 +
push offset dword_1002BB4  +
push 0Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10062BE  +
jmp loc_10109E3  +
push 1000h  +
lea eax [ebp+String] +
push eax  +
push 0C0h  +
push hInstance  +
call ds:LoadStringW  +
test eax eax +
jnz loc_1010892  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_10109E3  +
test byte ptr [eax+1Ch] 1 +
jz loc_10109E3  +
push offset dword_1002BB4  +
push 0Dh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10054B7  +
jmp loc_10109E3  +
lea eax [ebp+String] +
push eax  +
push dword_1035904  +
call ds:SetWindowTextW  +
mov ebx ds:SendMessageW +
push esi  +
push 14h  +
push 41Eh  +
push dword_1035904  +
call ebx  +
push esi  +
push 6  +
push 2007h  +
push dword_1035904  +
call ebx  +
push lParam  +
push 2  +
push 430h  +
push dword_1035904  +
call ebx  +
movzx eax word ptr cy +
movzx ecx word ptr dword_1035B54 +
shl eax 10h +
or eax ecx +
push eax  +
push esi  +
push 420h  +
push dword_1035904  +
call ebx  +
push 0FFFFFFFFh  +
push esi  +
push 432h  +
push dword_1035904  +
call ebx  +
mov wParam esi +
push 5  +
pop eax  +
mov ecx eax +
mov esi offset unk_1030028 +
lea edi [ebp+lParam] +
movs   +
mov ecx eax +
mov esi offset unk_103003C +
lea edi [ebp+var_2054] +
movs   +
and [ebp+var_204C] 0FBh +
mov ecx eax +
mov esi offset unk_103008C +
lea edi [ebp+var_2040] +
movs   +
and [ebp+var_2038] 0FBh +
and [ebp+var_2020] 0 +
mov ecx eax +
mov [ebp+var_2024] 10h +
mov [ebp+var_2023] 1 +
mov [ebp+var_202C] 51h +
mov esi offset unk_1030050 +
lea edi [ebp+var_2018] +
movs   +
lea ecx [ebp+lParam] +
push ecx  +
push eax  +
push 444h  +
push dword_1035904  +
mov dword_1035934 3 +
mov dword_1035B44 4 +
call ebx  +
test eax eax +
jnz loc_1010A10  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_10109E1  +
test byte ptr [eax+1Ch] 1 +
jz loc_10109E1  +
call ds:GetLastError  +
push eax  +
mov eax off_1030000 +
push offset dword_1002BB4  +
push 0Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10062BE  +
xor esi esi +
mov eax dword_1035904 +
cmp eax esi +
jz loc_10109F9  +
push eax  +
call ds:DestroyWindow  +
mov dword_1035904 esi +
mov ecx [ebp+var_4] +
mov eax [ebp+var_206C] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_101BC5D  +
leave   +
retn 4  +
push 9  +
xor esi esi +
push esi  +
push 454h  +
push dword_1035904  +
call ebx  +
push esi  +
push esi  +
push 421h  +
push dword_1035904  +
call ebx  +
mov [ebp+var_206C] 1 +
jmp loc_10109F9  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 38h +
xor eax eax +
push ebx  +
push esi  +
push edi  +
xor esi esi +
mov [ebp+lParam] esi +
lea edi [ebp+var_24] +
stos   +
stos   +
stos   +
xor eax eax +
mov [ebp+Rect.left] esi +
lea edi [ebp+Rect.top] +
stos   +
stos   +
stos   +
xor eax eax +
mov [ebp+X] esi +
lea edi [ebp+Y] +
stos   +
stos   +
xor ebx ebx +
stos   +
mov [ebp+var_4] esi +
mov [ebp+var_8] esi +
xor edi edi +
lea eax [ebp+lParam] +
push eax  +
push edi  +
push 41Dh  +
push dword_1035904  +
call ds:SendMessageW  +
mov eax dword_1035934 +
inc eax  +
cmp edi eax +
mov eax [ebp+lParam] +
jnz loc_1010AA0  +
mov [ebp+var_4] eax +
mov ecx [ebp+var_20] +
sub ecx eax +
mov eax [ebp+var_1C] +
sub eax [ebp+var_24] +
add ebx ecx +
cmp esi eax +
jge loc_1010AB3  +
mov esi eax +
inc edi  +
cmp edi 5 +
jb loc_1010A7A  +
lea eax [ebp+Rect] +
push eax  +
push [ebp+hWnd]  +
call ds:GetClientRect  +
test eax eax +
jnz loc_1010AFB  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_1010BC6  +
test byte ptr [eax+1Ch] 1 +
jz loc_1010BC6  +
push offset dword_1002BB4  +
push 0Fh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10054B7  +
jmp loc_1010BC6  +
mov edi ds:MoveWindow +
push 1  +
lea eax [esi-8] +
push eax  +
mov eax [ebp+var_4] +
push 41h  +
push 4  +
add eax 0FFFFFFBBh +
push eax  +
push dword_1035908  +
call edi  +
mov eax [ebp+Rect.left] +
add eax ebx +
mov [ebp+Rect.right] eax +
mov eax [ebp+Rect.top] +
lea eax [eax+esi+1] +
push 0  +
mov [ebp+Rect.bottom] eax +
push 0C00000h  +
lea eax [ebp+Rect] +
push eax  +
call ds:AdjustWindowRect  +
test eax eax +
jnz loc_1010B63  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_1010BC6  +
test byte ptr [eax+1Ch] 1 +
jz loc_1010BC6  +
call ds:GetLastError  +
push eax  +
push offset dword_1002BB4  +
push 10h  +
jmp loc_1010BB1  +
lea eax [ebp+X] +
push eax  +
push [ebp+hWnd]  +
call ds:GetWindowRect  +
mov eax [ebp+Rect.bottom] +
sub eax [ebp+Rect.top] +
xor esi esi +
inc esi  +
push esi  +
push eax  +
mov eax [ebp+Rect.right] +
sub eax [ebp+Rect.left] +
push eax  +
push [ebp+Y]  +
push [ebp+X]  +
push [ebp+hWnd]  +
call edi  +
test eax eax +
jnz loc_1010BC3  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_1010BC6  +
test byte ptr [eax+1Ch] 1 +
jz loc_1010BC6  +
call ds:GetLastError  +
push eax  +
push offset dword_1002BB4  +
push 11h  +
mov eax off_1030000 +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10062BE  +
jmp loc_1010BC6  +
mov [ebp+var_8] esi +
mov eax [ebp+var_8] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
xor esi esi +
push esi  +
push hInstance  +
push esi  +
push [ebp+hWndParent]  +
push esi  +
push esi  +
push esi  +
push esi  +
push 58001201h  +
push esi  +
push offset aStatic  +
push 20h  +
call ds:CreateWindowExW  +
mov dword_1035908 eax +
cmp eax esi +
jnz loc_1010C55  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_1010C4E  +
test byte ptr [eax+1Ch] 1 +
jz loc_1010C4E  +
call ds:GetLastError  +
push eax  +
mov eax off_1030000 +
push offset dword_1002BB4  +
push 12h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10062BE  +
mov eax dword_1035908 +
cmp eax esi +
jz loc_1010C4E  +
push eax  +
call ds:DestroyWindow  +
mov dword_1035908 esi +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
push dword_1035904  +
push eax  +
call ds:SetParent  +
push offset a000000  +
push esi  +
push 0Ch  +
push dword_1035908  +
call ds:SendMessageW  +
xor esi esi +
inc esi  +
jmp loc_1010C4E  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
test esi esi +
jnz loc_1010C91  +
xor eax eax +
jmp loc_1010CB0  +
push edi  +
mov edi [ebp+arg_4] +
test edi edi +
jz loc_1010C9F  +
mov eax [edi] +
push edi  +
call dword ptr [eax+4]  +
mov eax [esi] +
test eax eax +
jz loc_1010CAB  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [esi] edi +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov eax hWnd +
test eax eax +
jnz loc_1010CEA  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_1010CE7  +
test byte ptr [eax+1Ch] 4 +
jz loc_1010CE7  +
push offset dword_1002BB4  +
push 1Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10054B7  +
xor eax eax +
retn   +
push 0  +
push eax  +
call ds:ShowWindow  +
test eax eax +
jnz loc_1010CE7  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_1010D27  +
test byte ptr [eax+1Ch] 1 +
jz loc_1010D27  +
call ds:GetLastError  +
push eax  +
mov eax off_1030000 +
push offset dword_1002BB4  +
push 1Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10062BE  +
mov eax 80004005h +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax hWnd +
test eax eax +
jnz loc_1010D48  +
mov eax [ebp+hWnd] +
and dword ptr [eax] 0 +
jmp loc_1010D54  +
push eax  +
call ds:IsWindowVisible  +
mov ecx [ebp+hWnd] +
mov [ecx] eax +
xor eax eax +
pop ebp  +
retn 4  +
***
mov eax lParam +
push esi  +
mov esi ds:ImageList_Destroy +
test eax eax +
jz loc_1010D79  +
push eax  +
call esi  +
and lParam 0 +
mov eax himl +
test eax eax +
jz loc_1010D8C  +
push eax  +
call esi  +
and himl 0 +
push hInstance  +
push offset ClassName  +
call ds:UnregisterClassW  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_8] +
mov eax [ebp+arg_0] +
mov ecx [ebp+arg_4] +
push esi  +
mov esi [ebp+arg_C] +
sub eax edx +
sbb ecx esi +
mov edx eax +
or edx ecx +
pop esi  +
jz loc_1010DD1  +
push 0  +
push 2710h  +
push ecx  +
push eax  +
call __aulldiv  +
jmp loc_1010DD3  +
xor eax eax +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20Ch +
mov eax dword_1030118 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
push edi  +
mov esi 104h +
push esi  +
lea eax [ebp+LibFileName] +
push eax  +
push offset Src  +
xor edi edi +
call ds:ExpandEnvironmentStringsW  +
test eax eax +
jz loc_1010E30  +
cmp eax esi +
jnb loc_1010E30  +
xor ecx ecx +
mov [ebp+eax*2+var_20E] cx +
lea eax [ebp+LibFileName] +
push eax  +
call ds:LoadLibraryW  +
mov edi eax +
jmp loc_1010E54  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_1010E54  +
test byte ptr [eax+1Ch] 1 +
jz loc_1010E54  +
push offset dword_1002BB4  +
push 32h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10054B7  +
mov ecx [ebp+var_4] +
mov eax edi +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_101BC5D  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1Ch +
mov eax dword_1030118 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
mov esi ds:SendMessageW +
push edi  +
xor ebx ebx +
mov [ebp+lParam] ebx +
xor eax eax +
lea edi [ebp+wParam] +
stos   +
push ebx  +
stos   +
push ebx  +
stos   +
push 447h  +
push dword_1035904  +
stos   +
call esi  +
mov edi eax +
inc edi  +
mov [ebp+var_1C] ebx +
cmp edi 4 +
jle loc_1010EAE  +
xor edi edi +
lea eax [ebp+lParam] +
push eax  +
push edi  +
push 417h  +
push dword_1035904  +
call esi  +
test eax eax +
jz loc_1010EF5  +
push ebx  +
push [ebp+wParam]  +
push 412h  +
push dword_1035904  +
call esi  +
cmp eax 4 +
jz loc_1010EE6  +
inc edi  +
inc [ebp+var_1C]  +
cmp [ebp+var_1C] 5 +
jbe loc_1010EA7  +
jmp loc_1010EF5  +
push ebx  +
push edi  +
push 448h  +
push dword_1035904  +
call esi  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_101BC5D  +
leave   +
retn   +
***
mov eax ppv +
test eax eax +
jnz loc_1010F18  +
mov eax 80004005h +
retn   +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+10h]  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax 2004h +
call __alloca_probe  +
mov eax dword_1030118 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
push offset ppv  +
push offset stru_100378C  +
push 1  +
push 0  +
push offset rclsid  +
call ds:CoCreateInstance  +
mov esi eax +
test esi esi +
jge loc_1010F84  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_1011000  +
test byte ptr [eax+1Ch] 1 +
jz loc_1011000  +
movzx ecx si +
push ecx  +
push offset dword_1002BB4  +
push 46h  +
jmp loc_1010FF1  +
push 1000h  +
lea eax [ebp+Buffer] +
push eax  +
push 0C1h  +
push hInstance  +
call ds:LoadStringW  +
test eax eax +
jz loc_1010FB7  +
mov eax ppv +
mov ecx [eax] +
lea edx [ebp+Buffer] +
push edx  +
push eax  +
call dword ptr [ecx+14h]  +
mov eax ppv +
mov ecx [eax] +
push 0  +
push 4Dh  +
push 0  +
push hWnd  +
push eax  +
call dword ptr [ecx+0Ch]  +
mov esi eax +
test esi esi +
jge loc_1010FFE  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_1011000  +
test byte ptr [eax+1Ch] 1 +
jz loc_1011000  +
movzx ecx si +
push ecx  +
push offset dword_1002BB4  +
push 47h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10062BE  +
jmp loc_1011000  +
xor esi esi +
mov ecx [ebp+var_4] +
mov eax esi +
xor ecx ebp +
pop esi  +
call sub_101BC5D  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
inc i  +
mov eax i +
cmp eax dword_103001C +
jl loc_1011033  +
and i 0 +
cmp [ebp+arg_4] 0 +
jz loc_1011043  +
mov i 1 +
push 0  +
push i  +
push himl  +
call ds:ImageList_GetIcon  +
push eax  +
push 1  +
push 80h  +
push [ebp+hWnd]  +
call ds:SendMessageW  +
test eax eax +
jz loc_1011073  +
push eax  +
call ds:DestroyIcon  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
cmp dword_1030020 66h +
setnz al  +
dec eax  +
and eax 4Bh +
add eax 66h +
cmp [ebp+arg_4] 0 +
mov dword_1030020 eax +
jnz loc_10110A2  +
push eax  +
jmp loc_10110A4  +
push 66h  +
push [ebp+arg_0]  +
call sub_1006EA1  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0B2h  +
push [ebp+arg_0]  +
call sub_1006EA1  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0B1h  +
push [ebp+arg_0]  +
call sub_1006EA1  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+ppv] 0 +
push esi  +
push offset word_1035B68  +
call ds:SysAllocString  +
mov esi eax +
push esi  +
call ds:SysStringLen  +
test eax eax +
jnz loc_101113F  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_10111C4  +
test byte ptr [eax+1Ch] 1 +
jz loc_10111C4  +
push offset dword_1002BB4  +
push 55h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10054B7  +
jmp loc_10111C4  +
lea eax [ebp+ppv] +
push eax  +
push offset stru_10037DC  +
push 17h  +
push 0  +
push offset stru_100380C  +
call ds:CoCreateInstance  +
test eax eax +
jge loc_1011176  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_10111A8  +
test byte ptr [eax+1Ch] 1 +
jz loc_10111A8  +
push offset dword_1002BB4  +
push 56h  +
jmp loc_101119D  +
mov eax [ebp+ppv] +
mov ecx [eax] +
push esi  +
push eax  +
call dword ptr [ecx+0Ch]  +
test eax eax +
jge loc_10111A8  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_10111A8  +
test byte ptr [eax+1Ch] 1 +
jz loc_10111A8  +
push offset dword_1002BB4  +
push 57h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10054B7  +
mov eax [ebp+ppv] +
test eax eax +
jz loc_10111B9  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
and [ebp+ppv] 0 +
test esi esi +
jz loc_10111C4  +
push esi  +
call ds:SysFreeString  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
mov eax [ecx+4] +
sub eax 3E8h +
jz loc_101121A  +
dec eax  +
jz loc_1011213  +
dec eax  +
jz loc_101120C  +
dec eax  +
jz loc_1011205  +
dec eax  +
jz loc_10111FE  +
dec eax  +
jz loc_10111F7  +
dec eax  +
jnz loc_1011232  +
mov eax 515h +
jmp loc_101121F  +
mov eax 0BFh +
jmp loc_101121F  +
mov eax 0BEh +
jmp loc_101121F  +
mov eax 0BDh +
jmp loc_101121F  +
mov eax 0BAh +
jmp loc_101121F  +
mov eax 0BCh +
jmp loc_101121F  +
mov eax 0BBh +
push 50h  +
add ecx 10h +
push ecx  +
push eax  +
push hInstance  +
call ds:LoadStringW  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+hicon] 0 +
lea eax [ebp+hicon] +
push eax  +
push [ebp+arg_C]  +
movzx eax [ebp+arg_4] +
push [ebp+arg_8]  +
push eax  +
push 0  +
call ds:GetModuleHandleW  +
push eax  +
call ds:COMCTL32_381  +
test eax eax +
jl loc_101127F  +
push [ebp+hicon]  +
push 0FFFFFFFFh  +
push [ebp+himl]  +
call ds:ImageList_ReplaceIcon  +
cmp eax 0FFFFFFFFh +
jz loc_101127F  +
xor eax eax +
inc eax  +
jmp locret_1011281  +
xor eax eax +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
push ebx  +
mov ebx [ebp+arg_C] +
push esi  +
push edi  +
xor eax eax +
push 0Ah  +
pop ecx  +
xor esi esi +
lea edi [ebp+var_2C.bmiHeader.biWidth] +
stos   +
mov eax [ebp+arg_4] +
mov edi [ebp+arg_0] +
mov [ebx] esi +
mov ecx [eax] +
mov eax [eax+4] +
mov [ebp+var_2C.bmiHeader.biHeight] eax +
xor eax eax +
inc eax  +
push 20h  +
mov [ebp+var_2C.bmiHeader.biPlanes] ax +
pop eax  +
mov [ebp+var_2C.bmiHeader.biSize] 28h +
mov [ebp+var_2C.bmiHeader.biWidth] ecx +
mov [ebp+var_2C.bmiHeader.biBitCount] ax +
mov [ebp+var_2C.bmiHeader.biCompression] esi +
cmp edi esi +
jnz loc_10112E0  +
push esi  +
call ds:GetDC  +
mov edi eax +
cmp edi esi +
jz loc_1011300  +
push esi  +
push esi  +
push [ebp+arg_8]  +
lea eax [ebp+var_2C] +
push esi  +
push eax  +
push edi  +
call ds:CreateDIBSection  +
mov [ebx] eax +
cmp [ebp+arg_0] edi +
jz loc_1011300  +
push edi  +
push esi  +
call ds:ReleaseDC  +
cmp [ebx] esi +
jnz loc_101130B  +
mov eax 8007000Eh +
jmp loc_101130D  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
mov eax [ecx] +
test eax eax +
jz loc_1011330  +
and dword ptr [ecx] 0 +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
push esi  +
push 20h  +
pop esi  +
lea eax [ebp+var_4] +
push eax  +
call ds:GetProcessDefaultLayout  +
test eax eax +
jz loc_1011360  +
test byte ptr [ebp+var_4] 1 +
jz loc_1011360  +
mov esi 2020h +
push 1  +
push 7  +
push esi  +
push cy  +
push dword_1035B54  +
call ds:ImageList_Create  +
mov lParam eax +
pop esi  +
test eax eax +
jz loc_1011471  +
push cy  +
push dword_1035B54  +
push 0CBh  +
push eax  +
call sub_101123B  +
test eax eax +
jz loc_1011471  +
push cy  +
push dword_1035B54  +
push 0CFh  +
push lParam  +
call sub_101123B  +
test eax eax +
jz loc_1011471  +
push cy  +
push dword_1035B54  +
push 0CEh  +
push lParam  +
call sub_101123B  +
test eax eax +
jz loc_1011471  +
push cy  +
push dword_1035B54  +
push 0CCh  +
push lParam  +
call sub_101123B  +
test eax eax +
jz loc_1011471  +
push cy  +
push dword_1035B54  +
push 0CDh  +
push lParam  +
call sub_101123B  +
test eax eax +
jz loc_1011471  +
push cy  +
push dword_1035B54  +
push 0D0h  +
push lParam  +
call sub_101123B  +
test eax eax +
jz loc_1011471  +
push cy  +
push dword_1035B54  +
push 0D2h  +
push lParam  +
call sub_101123B  +
test eax eax +
jz loc_1011471  +
xor eax eax +
inc eax  +
leave   +
retn   +
xor eax eax +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
push esi  +
push 20h  +
pop esi  +
lea eax [ebp+var_4] +
push eax  +
call ds:GetProcessDefaultLayout  +
test eax eax +
jz loc_10114A1  +
test byte ptr [ebp+var_4] 1 +
jz loc_10114A1  +
mov esi 2020h +
push 1  +
push 7  +
push esi  +
push dword_1035B50  +
push dword_1035B4C  +
call ds:ImageList_Create  +
mov himl eax +
pop esi  +
test eax eax +
jz loc_1011502  +
push dword_1035B50  +
push dword_1035B4C  +
push 0D1h  +
push eax  +
call sub_101123B  +
test eax eax +
jz loc_1011502  +
push dword_1035B50  +
push dword_1035B4C  +
push 0C9h  +
push himl  +
call sub_101123B  +
test eax eax +
jz loc_1011502  +
xor eax eax +
inc eax  +
leave   +
retn   +
xor eax eax +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_10] +
sub esp 60h +
push ebx  +
push esi  +
mov esi [ebp+arg_C] +
xor ebx ebx +
push edi  +
mov [eax] ebx +
lea eax [ebp+var_8] +
push eax  +
push ebx  +
push esi  +
push ebx  +
call sub_101128A  +
mov edi eax +
cmp edi ebx +
jl loc_10116BD  +
push ebx  +
mov edi 80004005h +
call ds:CreateCompatibleDC  +
mov [ebp+var_4] eax +
cmp eax ebx +
jz loc_10116AD  +
push [ebp+var_8]  +
push eax  +
call ds:SelectObject  +
mov [ebp+var_C] eax +
mov eax [esi] +
mov [ebp+var_14] eax +
mov eax [esi+4] +
mov [ebp+var_10] eax +
push 0FFFFFFFFh  +
lea eax [ebp+var_1C] +
push eax  +
push [ebp+var_4]  +
mov [ebp+var_1C] ebx +
mov [ebp+var_18] ebx +
call ds:SHLWAPI_197  +
mov [ebp+arg_C] ebx +
cmp [ebp+hicon] ebx +
jz loc_10115EA  +
push 1  +
push 1  +
push 21h  +
push dword ptr [esi+4]  +
mov [ebp+arg_8] 8007000Eh +
push dword ptr [esi]  +
call ds:ImageList_Create  +
mov [ebp+himl] eax +
cmp eax ebx +
jz loc_1011688  +
push [ebp+hicon]  +
push 0FFFFFFFFh  +
push eax  +
call ds:ImageList_ReplaceIcon  +
mov edi eax +
cmp edi 0FFFFFFFFh +
jz loc_10115DF  +
lea eax [ebp+arg_C] +
push eax  +
push offset dword_1002C64  +
push [ebp+himl]  +
call ds:HIMAGELIST_QueryInterface  +
mov [ebp+arg_8] eax +
push [ebp+himl]  +
call ds:ImageList_Destroy  +
jmp loc_1011634  +
lea eax [ebp+arg_C] +
push eax  +
push offset dword_1002C64  +
push 0FFFFFFFFh  +
call ds:SHELL32_727  +
cmp eax ebx +
jl loc_1011688  +
push dword ptr [esi+4]  +
mov eax [ebp+arg_C] +
push dword ptr [esi]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+80h]  +
cmp eax ebx +
jl loc_1011688  +
mov eax [ebp+arg_C] +
mov edi [ebp+himl] +
mov ecx [eax] +
xor edx edx +
cmp [ebp+arg_8] ebx +
setnz dl  +
push edx  +
push edi  +
push eax  +
call dword ptr [ecx+94h]  +
mov [ebp+arg_8] eax +
cmp [ebp+arg_8] ebx +
jl loc_1011688  +
push 40h  +
lea eax [ebp+var_5C] +
push ebx  +
push eax  +
mov [ebp+var_60] 44h +
call memset  +
mov eax [ebp+var_4] +
mov [ebp+var_54] eax +
mov eax [esi] +
mov [ebp+var_48] eax +
mov eax [esi+4] +
mov [ebp+var_44] eax +
mov eax 0FF000000h +
add esp 0Ch +
mov [ebp+var_38] eax +
mov [ebp+var_34] eax +
mov eax [ebp+arg_C] +
lea edx [ebp+var_60] +
and edi 0FFFFFFh +
push edx  +
mov [ebp+var_58] edi +
mov [ebp+var_30] 50001h +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+20h]  +
lea eax [ebp+arg_C] +
push eax  +
call sub_1011319  +
push [ebp+var_C]  +
push [ebp+var_4]  +
call ds:SelectObject  +
mov ecx [ebp+arg_10] +
push [ebp+var_4]  +
mov [ecx] eax +
xor edi edi +
call ds:DeleteDC  +
mov eax [ebp+arg_10] +
cmp [eax] ebx +
jnz loc_10116BD  +
push [ebp+var_8]  +
call ds:DeleteObject  +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 54h +
push ebx  +
mov ebx [ebp+hicon] +
push esi  +
mov esi ds:GetSystemMetrics +
push edi  +
xor edi edi +
push 31h  +
mov [ebx] edi +
call esi  +
push 32h  +
mov [ebp+var_8] eax +
call esi  +
lea ecx [ebp+hicon] +
push ecx  +
push eax  +
push [ebp+var_8]  +
mov [ebp+var_4] eax +
push 4Eh  +
push edi  +
call ds:COMCTL32_381  +
mov esi eax +
cmp esi edi +
jl loc_1011787  +
push ebx  +
lea eax [ebp+var_8] +
push eax  +
push edi  +
push edi  +
push [ebp+hicon]  +
call sub_101151D  +
mov esi eax +
cmp esi edi +
jl loc_101177E  +
push 6  +
pop ecx  +
xor eax eax +
lea edi [ebp+var_24.fMask] +
stos   +
lea eax [ebp+var_24] +
push eax  +
push [ebp+arg_0]  +
mov [ebp+var_24.cbSize] 1Ch +
mov [ebp+var_24.fMask] 10h +
mov [ebp+var_24.dwStyle] 4000000h +
call ds:SetMenuInfo  +
push 2Ch  +
lea eax [ebp+var_54.fMask] +
push 0  +
push eax  +
call memset  +
mov eax [ebx] +
add esp 0Ch +
mov [ebp+var_54.hbmpItem] eax +
lea eax [ebp+var_54] +
push eax  +
push 0  +
push [ebp+arg_4]  +
mov [ebp+var_54.cbSize] 30h +
push [ebp+arg_0]  +
mov [ebp+var_54.fMask] 80h +
call ds:SetMenuItemInfoW  +
push [ebp+hicon]  +
call ds:DestroyIcon  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax 2004h +
call __alloca_probe  +
mov eax dword_1030118 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push 3Ch  +
pop ecx  +
xor edx edx +
div  ecx +
push edx  +
xor edx edx +
div  ecx +
mov eax [ebp+arg_0] +
mov ecx 0E10h +
push edx  +
xor edx edx +
div  ecx +
push eax  +
push offset a02d02d02d  +
lea eax [ebp+lParam] +
push 1000h  +
push eax  +
call sub_1005835  +
add esp 18h +
test eax eax +
jge loc_101180C  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_101180C  +
test byte ptr [eax+1Ch] 1 +
jz loc_101180C  +
push offset dword_1002BB4  +
push 27h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10054B7  +
lea eax [ebp+lParam] +
push eax  +
push 0  +
push 0Ch  +
push dword_1035908  +
call ds:SendMessageW  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_101BC5D  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax 5360h +
call __alloca_probe  +
mov eax dword_1030118 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
push edi  +
xor ebx ebx +
push 103h  +
lea eax [ebp-107h] +
push ebx  +
push eax  +
mov [ebp+pszPath] bl +
call memset  +
xor eax eax +
push 206h  +
mov word ptr [ebp+WideCharStr] ax +
lea eax [ebp-30Eh] +
push ebx  +
push eax  +
call memset  +
push 2Ch  +
lea eax [ebp+var_535C] +
push ebx  +
push eax  +
mov [ebp+hLibModule] ebx +
mov [ebp+var_5318] 80004005h +
mov [ebp+var_5360] ebx +
call memset  +
mov ecx dword_1035930 +
xor eax eax +
mov [ebp+var_5330] ebx +
lea edi [ebp+var_532C] +
stos   +
stos   +
stos   +
stos   +
stos   +
add esp 24h +
mov edi 104h +
push edi  +
lea eax [ebp+WideCharStr] +
push eax  +
call sub_1014F58  +
test eax eax +
jz loc_101193B  +
lea eax [ebp+WideCharStr] +
push eax  +
call ds:PathFileExistsW  +
test eax eax +
jnz loc_1011A3E  +
mov esi ds:LoadStringW +
mov edi 1000h +
push edi  +
lea eax [ebp+Caption] +
push eax  +
push 4B2h  +
push hInstance  +
call esi  +
test eax eax +
jnz loc_1011976  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_101193B  +
test byte ptr [eax+1Ch] 1 +
jz loc_101193B  +
push offset dword_1002BB4  +
push 33h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10054B7  +
push 6Ah  +
push 4B1h  +
push hWnd  +
call sub_10064B6  +
cmp [ebp+hLibModule] ebx +
jz loc_1011961  +
push [ebp+hLibModule]  +
call ds:FreeLibrary  +
mov ecx [ebp+var_4] +
mov eax [ebp+var_5318] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_101BC5D  +
leave   +
retn   +
lea eax [ebp+WideCharStr] +
push eax  +
lea eax [ebp+Caption] +
push eax  +
lea eax [ebp+Buffer] +
push edi  +
push eax  +
call sub_1005835  +
add esp 10h +
test eax eax +
jge loc_10119B6  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_101193B  +
test byte ptr [eax+1Ch] 1 +
jz loc_101193B  +
push offset dword_1002BB4  +
push 34h  +
jmp loc_1011930  +
push edi  +
lea eax [ebp+Caption] +
push eax  +
push 6Ah  +
push hInstance  +
call esi  +
test eax eax +
jnz loc_10119F2  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_101193B  +
test byte ptr [eax+1Ch] 1 +
jz loc_101193B  +
push offset dword_1002BB4  +
push 35h  +
jmp loc_1011930  +
push ebx  +
lea eax [ebp+Caption] +
push eax  +
lea eax [ebp+Buffer] +
push eax  +
push hWnd  +
call ds:MessageBoxW  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_1011961  +
test byte ptr [eax+1Ch] 1 +
jz loc_1011961  +
push offset dword_1002BB4  +
push 36h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10054B7  +
jmp loc_1011961  +
mov esi ds:WideCharToMultiByte +
push ebx  +
push ebx  +
push edi  +
lea eax [ebp+pszPath] +
push eax  +
push 0FFFFFFFFh  +
lea eax [ebp+WideCharStr] +
push eax  +
push 600h  +
push ebx  +
call esi  +
test eax eax +
jnz loc_1011A89  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_101193B  +
test byte ptr [eax+1Ch] 1 +
jz loc_101193B  +
push offset dword_1002BB4  +
push 37h  +
jmp loc_1011930  +
mov edi 1000h +
push edi  +
lea eax [ebp+Buffer] +
push eax  +
push 4B4h  +
push hInstance  +
call ds:LoadStringW  +
test eax eax +
jnz loc_1011AD1  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_101193B  +
test byte ptr [eax+1Ch] 1 +
jz loc_101193B  +
push offset dword_1002BB4  +
push 38h  +
jmp loc_1011930  +
push ebx  +
push ebx  +
push edi  +
lea eax [ebp+var_1310] +
push eax  +
push 0FFFFFFFFh  +
lea eax [ebp+Buffer] +
push eax  +
push 400h  +
push ebx  +
call esi  +
test eax eax +
jnz loc_1011B16  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_101193B  +
test byte ptr [eax+1Ch] 1 +
jz loc_101193B  +
push offset dword_1002BB4  +
push 39h  +
jmp loc_1011930  +
lea eax [ebp+pszPath] +
push eax  +
call ds:PathFindFileNameA  +
mov esi eax +
call sub_1010DDC  +
mov [ebp+hLibModule] eax +
cmp eax ebx +
jnz loc_1011B64  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_1011B58  +
test byte ptr [eax+1Ch] 1 +
jz loc_1011B58  +
push offset dword_1002BB4  +
push 3Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10054B7  +
push 6Ah  +
push 4B3h  +
jmp loc_1011942  +
push offset ProcName  +
push eax  +
call ds:GetProcAddress  +
cmp eax ebx +
jnz loc_1011B9A  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_101193B  +
test byte ptr [eax+1Ch] 1 +
jz loc_101193B  +
push offset dword_1002BB4  +
push 3Bh  +
jmp loc_1011930  +
or [ebp+var_5328] 0FFFFFFFFh +
lea ecx [ebp+pszPath] +
mov [ebp+var_5324] ecx +
lea ecx [ebp+var_5330] +
mov [ebp+var_5334] ecx +
push ebx  +
lea ecx [ebp+var_1310] +
push 9  +
mov [ebp+var_535C] ecx +
lea ecx [ebp+var_5360] +
push ecx  +
push hWnd  +
mov [ebp+var_5320] esi +
xor esi esi +
inc esi  +
push ebx  +
mov [ebp+var_5330] ebx +
mov [ebp+var_532C] ebx +
mov [ebp+var_531C] ebx +
mov [ebp+var_5338] esi +
call eax  +
cmp eax ebx +
jz loc_1011C25  +
cmp eax esi +
jnz loc_1011C30  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_1011C25  +
test byte ptr [eax+1Ch] 4 +
jz loc_1011C25  +
push offset dword_1002BB4  +
push 3Ch  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10054B7  +
mov [ebp+var_5318] ebx +
jmp loc_101194D  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_101193B  +
test byte ptr [eax+1Ch] 1 +
jz loc_101193B  +
push offset dword_1002BB4  +
push 3Dh  +
jmp loc_1011930  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0AACh +
mov eax dword_1030118 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
mov esi dword_1035930 +
push edi  +
xor eax eax +
mov [ebp+Filename] ax +
mov ecx 115h +
lea edi [ebp+var_A70] +
movs   +
mov edx offset Dst +
lea eax [ebp+var_A2C] +
xor edi edi +
mov cx [eax] +
cmp cx [edx] +
jnz loc_1011CC1  +
cmp cx di +
jz loc_1011CBD  +
mov cx [eax+2] +
cmp cx [edx+2] +
jnz loc_1011CC1  +
add eax 4 +
add edx 4 +
cmp cx di +
jnz loc_1011C9B  +
xor eax eax +
jmp loc_1011CC6  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
cmp eax edi +
jnz loc_1011CD3  +
xor eax eax +
mov word ptr [ebp+var_A2C] ax +
mov esi 104h +
push esi  +
lea eax [ebp+var_20C] +
push eax  +
lea eax [ebp+var_A70] +
push eax  +
call sub_100692E  +
cmp eax edi +
jl loc_1011E45  +
lea eax [ebp+var_20C] +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
cmp cx di +
jnz loc_1011CFD  +
sub eax edx +
sar eax 1 +
push offset aElevated  +
mov ecx esi +
sub ecx eax +
push offset aWs_4  +
push ecx  +
lea eax [ebp+eax*2+var_20C] +
push eax  +
call sub_1005835  +
add esp 10h +
cmp eax edi +
jl loc_1011E45  +
push edi  +
push 10h  +
lea eax [ebp+szPath] +
push eax  +
push edi  +
call ds:SHGetSpecialFolderPathW  +
test eax eax +
jnz loc_1011D51  +
mov eax 80004005h +
jmp loc_1011E45  +
lea eax [ebp+var_20C] +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
cmp cx di +
jnz loc_1011D5A  +
lea ecx [ebp+szPath] +
push ecx  +
sub eax edx +
sar eax 1 +
push offset aUisavedir  +
mov ecx esi +
sub ecx eax +
push offset aWsWs  +
push ecx  +
lea eax [ebp+eax*2+var_20C] +
push eax  +
call sub_1005835  +
add esp 14h +
cmp eax edi +
jl loc_1011E45  +
push esi  +
lea eax [ebp+Filename] +
push eax  +
push edi  +
call ds:GetModuleFileNameW  +
test eax eax +
jz loc_1011E28  +
push 3Ch  +
pop esi  +
push esi  +
lea eax [ebp+ExecInfo] +
push edi  +
push eax  +
call memset  +
lea eax [ebp+Filename] +
mov [ebp+ExecInfo.lpFile] eax +
lea eax [ebp+var_20C] +
mov [ebp+ExecInfo.lpParameters] eax +
mov eax hWnd +
mov [ebp+ExecInfo.hwnd] eax +
add esp 0Ch +
lea eax [ebp+ExecInfo] +
push eax  +
mov [ebp+ExecInfo.cbSize] esi +
mov [ebp+ExecInfo.fMask] 440h +
mov [ebp+ExecInfo.lpVerb] offset aRunas +
mov [ebp+ExecInfo.nShow] 1 +
call ds:ShellExecuteExW  +
test eax eax +
jz loc_1011E28  +
mov eax [ebp+ExecInfo.hProcess] +
cmp eax edi +
jz loc_1011E28  +
mov hHandle eax +
xor eax eax +
jmp loc_1011E45  +
call ds:GetLastError  +
cmp eax edi +
jnz loc_1011E39  +
mov eax 54Fh +
cmp eax edi +
jle loc_1011E45  +
and eax 0FFFFh +
or eax 80070000h +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_101BC5D  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax 4004h +
call __alloca_probe  +
mov eax dword_1030118 +
xor eax ebp +
mov [ebp+var_4] eax +
push edi  +
xor edi edi +
cmp ppv edi +
jz loc_1011F54  +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
mov esi [ebp+arg_4] +
lea eax [esi+2] +
cmp ebx eax +
jnz loc_1011EA2  +
push 1000h  +
lea eax [ebp+Buffer] +
push eax  +
push 0C5h  +
jmp loc_1011EBA  +
lea eax [esi+1] +
cmp ebx eax +
jnz loc_1011EE6  +
push 1000h  +
lea eax [ebp+Buffer] +
push eax  +
push 0C6h  +
push hInstance  +
call ds:LoadStringW  +
test eax eax +
jz loc_1011F52  +
mov eax ppv +
mov ecx [eax] +
push edi  +
push edi  +
lea edx [ebp+Buffer] +
push edx  +
push 3  +
push eax  +
call dword ptr [ecx+28h]  +
jmp loc_1011F52  +
cmp ebx esi +
ja loc_1011F52  +
mov edi 1000h +
push edi  +
lea eax [ebp+var_4004] +
push eax  +
push 0C4h  +
push hInstance  +
call ds:LoadStringW  +
test eax eax +
jz loc_1011F52  +
push esi  +
push ebx  +
lea eax [ebp+var_4004] +
push eax  +
lea eax [ebp+Buffer] +
push edi  +
push eax  +
call sub_1005835  +
add esp 14h +
test eax eax +
jl loc_1011F52  +
mov eax ppv +
mov ecx [eax] +
push 0  +
push 0  +
lea edx [ebp+Buffer] +
push edx  +
push 3  +
push eax  +
call dword ptr [ecx+28h]  +
test eax eax +
jl loc_1011F52  +
mov eax ppv +
mov ecx [eax] +
push esi  +
push ebx  +
push eax  +
call dword ptr [ecx+20h]  +
pop esi  +
pop ebx  +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop edi  +
call sub_101BC5D  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax 4004h +
call __alloca_probe  +
mov eax dword_1030118 +
xor eax ebp +
mov [ebp+var_4] eax +
cmp ppv 0 +
push edi  +
mov edi 80004005h +
jnz loc_1011F98  +
xor edi edi +
inc edi  +
jmp loc_1012035  +
push ebx  +
mov ebx ds:LoadStringW +
push esi  +
mov esi 1000h +
push esi  +
lea eax [ebp+Buffer] +
push eax  +
push 0C2h  +
push hInstance  +
call ebx  +
test eax eax +
jz loc_1012033  +
mov eax ppv +
mov ecx [eax] +
push 0  +
push 0  +
lea edx [ebp+Buffer] +
push edx  +
push 1  +
push eax  +
call dword ptr [ecx+28h]  +
mov edi eax +
test edi edi +
jl loc_1012033  +
push esi  +
lea eax [ebp+var_4004] +
push eax  +
push 0C3h  +
push hInstance  +
call ebx  +
test eax eax +
jz loc_1012033  +
push dword ptr [ebp+arg_0]  +
lea eax [ebp+var_4004] +
push eax  +
lea eax [ebp+Buffer] +
push esi  +
push eax  +
call sub_1005835  +
add esp 10h +
test eax eax +
jl loc_1012033  +
mov eax ppv +
mov ecx [eax] +
push 0  +
push 0  +
lea edx [ebp+Buffer] +
push edx  +
push 2  +
push eax  +
call dword ptr [ecx+28h]  +
mov edi eax +
test edi edi +
jl loc_1012033  +
xor edi edi +
pop esi  +
pop ebx  +
mov ecx [ebp+var_4] +
mov eax edi +
xor ecx ebp +
pop edi  +
call sub_101BC5D  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 480h +
mov eax dword_1030118 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
mov esi [ebp+hWnd] +
push edi  +
xor eax eax +
xor ebx ebx +
mov [ebp+Rect.left] ebx +
lea edi [ebp+Rect.top] +
stos   +
stos   +
stos   +
xor eax eax +
mov [ebp+x] ebx +
lea edi [ebp-464h] +
stos   +
lea eax [ebp+Rect] +
push eax  +
push esi  +
mov [ebp+var_46C] esi +
call ds:GetClientRect  +
test eax eax +
jnz loc_10120D1  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_101228A  +
test byte ptr [eax+1Ch] 1 +
jz loc_101228A  +
push offset dword_1002BB4  +
push 51h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10054B7  +
jmp loc_101228A  +
mov eax [ebp+Rect.right] +
mov [ebp+x] eax +
mov eax [ebp+Rect.bottom] +
push 1  +
mov [ebp-464h] eax +
lea eax [ebp+x] +
push eax  +
push ebx  +
push esi  +
call ds:MapWindowPoints  +
test eax eax +
jnz loc_1012121  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_101228A  +
test byte ptr [eax+1Ch] 1 +
jz loc_101228A  +
push offset dword_1002BB4  +
push 52h  +
jmp loc_10120C1  +
push 12Eh  +
push hInstance  +
call ds:LoadMenuW  +
mov esi eax +
mov [ebp+var_470] esi +
cmp esi ebx +
jz loc_101228A  +
push ebx  +
push esi  +
call ds:GetSubMenu  +
mov edi eax +
mov [ebp+hMenu] edi +
cmp edi ebx +
jnz loc_1012186  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_101217A  +
test byte ptr [eax+1Ch] 1 +
jz loc_101217A  +
push offset dword_1002BB4  +
push 53h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10054B7  +
push esi  +
call ds:DestroyMenu  +
jmp loc_101228A  +
lea eax [ebp+hicon] +
push eax  +
mov esi 194h +
push esi  +
push edi  +
mov [ebp+hicon.unused] ebx +
call sub_10116CB  +
cmp eax ebx +
jge loc_10121CA  +
mov ecx off_1030000 +
cmp ecx offset off_1030000 +
jz loc_10121CA  +
test byte ptr [ecx+1Ch] 2 +
jz loc_10121CA  +
push eax  +
push offset dword_1002BB4  +
push 54h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10062BE  +
call sub_100634B  +
mov ebx ds:EnableMenuItem +
test eax eax +
jz loc_10121DF  +
push 1  +
push esi  +
push edi  +
call ebx  +
mov esi dword_1035930 +
mov ecx 115h +
lea edi [ebp+var_458] +
movs   +
xor edi edi +
cmp [ebp+var_430] edi +
jz loc_101220B  +
push 1  +
push 193h  +
push [ebp+hMenu]  +
call ebx  +
mov ecx dword_1035930 +
call sub_10144C5  +
test eax eax +
jnz loc_1012229  +
push 1  +
push 195h  +
push [ebp+hMenu]  +
call ebx  +
push edi  +
push [ebp+var_46C]  +
push edi  +
push dword ptr [ebp-464h]  +
push [ebp+x]  +
push 148h  +
push [ebp+hMenu]  +
call ds:TrackPopupMenu  +
push [ebp+var_470]  +
mov esi eax +
call ds:DestroyMenu  +
cmp [ebp+hicon.unused] edi +
jz loc_1012270  +
push [ebp+hicon.unused]  +
call ds:DeleteObject  +
cmp esi edi +
jz loc_101228A  +
push edi  +
movzx eax si +
push eax  +
push 111h  +
push [ebp+var_46C]  +
call ds:PostMessageW  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
xor eax eax +
pop ebx  +
call sub_101BC5D  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 470h +
mov eax dword_1030118 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
push edi  +
xor edi edi +
inc edi  +
xor ebx ebx +
mov [ebp+var_468] edi +
cmp dword_1035904 ebx +
jz loc_1012603  +
mov ecx [ebp+arg_0] +
cmp dword_1030024 ecx +
jnz loc_10122E3  +
xor esi esi +
jmp loc_10127A6  +
mov eax ecx +
sub eax ebx +
jz loc_10123E6  +
dec eax  +
jz loc_1012352  +
dec eax  +
jz loc_101232C  +
dec eax  +
jz loc_101255A  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_1012603  +
test byte ptr [eax+1Ch] 1 +
jz loc_1012603  +
push ecx  +
push offset dword_1002BB4  +
push 1Fh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10062BE  +
jmp loc_1012603  +
push hWnd  +
call sub_10110B5  +
push edi  +
push hWnd  +
call sub_1011014  +
mov [ebp+lParam] offset unk_1030078 +
jmp loc_101257B  +
mov eax uIDEvent +
cmp eax ebx +
jz loc_101236E  +
push eax  +
push hWnd  +
call ds:KillTimer  +
mov uIDEvent ebx +
mov eax dword_1035920 +
cmp eax ebx +
jz loc_101238A  +
push eax  +
push hWnd  +
call ds:KillTimer  +
mov dword_1035920 ebx +
push ebx  +
call sub_1011795  +
push edi  +
push hWnd  +
call sub_101107C  +
push edi  +
push hWnd  +
call sub_1011014  +
mov eax dword_1035B60 +
cmp eax ebx +
jz loc_10123BD  +
push eax  +
call sub_1022EBC  +
mov dword_1035B60 ebx +
push 43h  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push 0FFFFFFFEh  +
push hWnd  +
mov [ebp+lParam] offset unk_1030028 +
mov [ebp+var_460] ebx +
call ds:SetWindowPos  +
jmp loc_1012581  +
mov esi ds:GetSystemTimeAsFileTime +
push offset SystemTimeAsFileTime  +
call esi  +
push offset stru_1035914  +
call esi  +
mov esi ds:SetTimer +
push ebx  +
push 3E8h  +
push edi  +
push hWnd  +
mov dword_1035B48 ebx +
call esi  +
mov uIDEvent eax +
cmp eax ebx +
jnz loc_1012473  +
call ds:GetLastError  +
cmp eax ebx +
jnz loc_101242F  +
mov eax 54Fh +
cmp eax ebx +
mov esi eax +
jle loc_101243F  +
and esi 0FFFFh +
or esi 80070000h +
mov ecx off_1030000 +
cmp ecx offset off_1030000 +
jz loc_10127AB  +
test byte ptr [ecx+1Ch] 1 +
jz loc_10127AB  +
push eax  +
push offset dword_1002BB4  +
push 1Ch  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10062BE  +
jmp loc_10127AB  +
push ebx  +
push 1F4h  +
push 2  +
push hWnd  +
call esi  +
mov dword_1035920 eax +
cmp eax ebx +
jnz loc_10124B0  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_10124B0  +
test byte ptr [eax+1Ch] 2 +
jz loc_10124B0  +
push offset dword_1002BB4  +
push 1Dh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10054B7  +
push 43h  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push 0FFFFFFFFh  +
push hWnd  +
call ds:SetWindowPos  +
call sub_100634B  +
mov [ebp+var_468] eax +
cmp eax ebx +
jnz loc_101255A  +
mov esi dword_1035930 +
mov ecx 115h +
lea edi [ebp+var_458] +
movs   +
cmp [ebp+var_420] 0FFFFFFFFh +
jnz loc_1012557  +
xor eax eax +
lea edi [ebp+var_470] +
stos   +
push ebx  +
stos   +
call ds:GetModuleHandleW  +
mov [ebp+var_470] eax +
mov eax hWnd +
mov [ebp+var_46C] eax +
push offset dword_1035B60  +
lea eax [ebp+var_470] +
push eax  +
call sub_1023B06  +
cmp eax ebx +
jz loc_1012557  +
mov ecx off_1030000 +
cmp ecx offset off_1030000 +
jz loc_1012551  +
test byte ptr [ecx+1Ch] 1 +
jz loc_1012551  +
push eax  +
push offset dword_1002BB4  +
push 1Eh  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10062BE  +
mov dword_1035B60 ebx +
xor edi edi +
inc edi  +
push hWnd  +
call sub_10110D0  +
push ebx  +
push hWnd  +
call sub_1011014  +
mov [ebp+lParam] offset unk_1030064 +
mov [ebp+var_460] edi +
mov esi ds:SendMessageW +
cmp [ebp+lParam] ebx +
jz loc_101260D  +
push ebx  +
push wParam  +
push 416h  +
push dword_1035904  +
call esi  +
test eax eax +
jnz loc_10125C2  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_1012603  +
test byte ptr [eax+1Ch] 1 +
jz loc_1012603  +
push offset dword_1002BB4  +
push 20h  +
jmp loc_10125F8  +
push [ebp+lParam]  +
push wParam  +
push 443h  +
push dword_1035904  +
call esi  +
test eax eax +
jnz loc_101260D  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_1012603  +
test byte ptr [eax+1Ch] 1 +
jz loc_1012603  +
push offset dword_1002BB4  +
push 21h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10054B7  +
mov esi 80004005h +
jmp loc_10127A6  +
cmp [ebp+arg_0] 1 +
mov edi 401h +
lea ebx [edi-13h] +
jnz loc_1012631  +
mov [ebp+lParam] offset unk_1030050 +
mov [ebp+var_464] 3EAh +
jmp loc_101264B  +
cmp [ebp+arg_0] 0 +
jnz loc_101270A  +
mov [ebp+lParam] offset unk_10300A0 +
mov [ebp+var_464] ebx +
push 0  +
push dword_1035B44  +
push 416h  +
push dword_1035904  +
call esi  +
test eax eax +
jnz loc_1012692  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_1012688  +
test byte ptr [eax+1Ch] 1 +
jz loc_1012688  +
push offset dword_1002BB4  +
push 22h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10054B7  +
mov esi 80004005h +
jmp loc_10127A4  +
push [ebp+lParam]  +
push dword_1035B44  +
push 443h  +
push dword_1035904  +
call esi  +
test eax eax +
jnz loc_10126CA  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_1012688  +
test byte ptr [eax+1Ch] 1 +
jz loc_1012688  +
push offset dword_1002BB4  +
push 23h  +
jmp loc_101267D  +
cmp [ebp+var_464] ebx +
jnz loc_101270A  +
xor eax eax +
cmp [ebp+var_468] eax +
setz al  +
push eax  +
push ebx  +
push edi  +
push dword_1035904  +
call esi  +
test eax eax +
jnz loc_101270A  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_1012688  +
test byte ptr [eax+1Ch] 1 +
jz loc_1012688  +
push offset dword_1002BB4  +
push 24h  +
jmp loc_101267D  +
movzx ebx word ptr [ebp+var_460] +
push ebx  +
push 3E9h  +
push edi  +
push dword_1035904  +
call esi  +
test eax eax +
jnz loc_101274A  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_1012688  +
test byte ptr [eax+1Ch] 1 +
jz loc_1012688  +
push offset dword_1002BB4  +
push 25h  +
jmp loc_101267D  +
push ebx  +
push 3EDh  +
push edi  +
push dword_1035904  +
call esi  +
test eax eax +
jnz loc_1012783  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_1012688  +
test byte ptr [eax+1Ch] 1 +
jz loc_1012688  +
push offset dword_1002BB4  +
push 26h  +
jmp loc_101267D  +
push hWnd  +
call sub_1010A42  +
push dword_1035904  +
call ds:UpdateWindow  +
mov eax [ebp+arg_0] +
mov dword_1030024 eax +
xor esi esi +
xor ebx ebx +
cmp [ebp+arg_0] ebx +
jnz loc_10127FC  +
cmp esi ebx +
jge loc_10127FC  +
mov eax uIDEvent +
cmp eax ebx +
jz loc_10127CB  +
push eax  +
push hWnd  +
call ds:KillTimer  +
mov uIDEvent ebx +
mov eax dword_1035920 +
cmp eax ebx +
jz loc_10127E7  +
push eax  +
push hWnd  +
call ds:KillTimer  +
mov dword_1035920 ebx +
mov eax dword_1035B60 +
cmp eax ebx +
jz loc_10127FC  +
push eax  +
call sub_1022EBC  +
mov dword_1035B60 ebx +
mov ecx [ebp+var_4] +
pop edi  +
mov eax esi +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_101BC5D  +
leave   +
retn 4  +
***
call __EH_prolog3_GS  +
mov edi [ebp+8] +
mov esi [ebp+10h] +
xor ebx ebx +
mov [ebp-47Ch] edi +
mov [ebp-46Ch] ebx +
mov [ebp-478h] ebx +
mov [ebp-470h] ebx +
mov [ebp-474h] ebx +
mov [ebp-468h] ebx +
push 450h  +
lea eax [ebp-460h] +
push ebx  +
push eax  +
mov [ebp-4] ebx +
mov [ebp-464h] ebx +
call memset  +
add esp 0Ch +
cmp [ebp+0Ch] ebx +
jz loc_1012877  +
xor eax eax +
mov [edi] ax +
lea eax [ebp-468h] +
push eax  +
push offset stru_1002C54  +
push 17h  +
push ebx  +
push offset stru_1002CD8  +
call ds:CoCreateInstance  +
mov edi eax +
cmp edi ebx +
jge loc_10128CC  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_1012AF4  +
test byte ptr [eax+1Ch] 1 +
jz loc_1012AF4  +
movzx ecx di +
push ecx  +
push offset dword_1002BB4  +
push 48h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10062BE  +
jmp loc_1012AF4  +
mov eax [ebp-468h] +
mov ecx [eax] +
push esi  +
push dword ptr [ebp+14h]  +
push eax  +
call dword ptr [ecx+10h]  +
mov eax [ebp-468h] +
mov ecx [eax] +
push offset aZip  +
push eax  +
call dword ptr [ecx+58h]  +
lea eax [ebp-474h] +
push eax  +
push offset dword_10037AC  +
push ebx  +
push ebx  +
push offset dword_100379C  +
call ds:SHCreateItemInKnownFolder  +
mov ebx offset dword_1002BB4 +
test eax eax +
jl loc_101293F  +
mov eax [ebp-468h] +
push dword ptr [ebp-474h]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+2Ch]  +
test eax eax +
jge loc_1012962  +
mov ecx off_1030000 +
cmp ecx offset off_1030000 +
jz loc_1012962  +
test byte ptr [ecx+1Ch] 1 +
jz loc_1012962  +
push eax  +
push ebx  +
push 49h  +
jmp loc_1012957  +
mov ecx off_1030000 +
cmp ecx offset off_1030000 +
jz loc_1012962  +
test byte ptr [ecx+1Ch] 1 +
jz loc_1012962  +
push eax  +
push ebx  +
push 4Ah  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10062BE  +
mov esi dword_1035930 +
mov ecx 115h +
lea edi [ebp-464h] +
xor eax eax +
movs   +
cmp ax [ebp-218h] +
jz loc_10129F2  +
lea eax [ebp-470h] +
push eax  +
push offset dword_10037AC  +
push 0  +
lea eax [ebp-218h] +
push eax  +
call ds:SHCreateItemFromParsingName  +
test eax eax +
jl loc_10129CF  +
mov eax [ebp-468h] +
push dword ptr [ebp-470h]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+30h]  +
test eax eax +
jge loc_10129F2  +
mov ecx off_1030000 +
cmp ecx offset off_1030000 +
jz loc_10129F2  +
test byte ptr [ecx+1Ch] 1 +
jz loc_10129F2  +
push eax  +
push ebx  +
push 4Bh  +
jmp loc_10129E7  +
mov ecx off_1030000 +
cmp ecx offset off_1030000 +
jz loc_10129F2  +
test byte ptr [ecx+1Ch] 1 +
jz loc_10129F2  +
push eax  +
push ebx  +
push 4Ch  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10062BE  +
mov eax [ebp-468h] +
push hWnd  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+0Ch]  +
test eax eax +
jge loc_1012A36  +
mov ecx off_1030000 +
cmp ecx offset off_1030000 +
jz loc_1012A2E  +
test byte ptr [ecx+1Ch] 4 +
jz loc_1012A2E  +
movzx eax ax +
push eax  +
push ebx  +
push 4Dh  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10062BE  +
xor edi edi +
inc edi  +
jmp loc_1012AF2  +
mov eax [ebp-468h] +
mov ecx [eax] +
lea edx [ebp-478h] +
push edx  +
push eax  +
call dword ptr [ecx+50h]  +
mov edi eax +
mov eax [ebp-478h] +
test edi edi +
jl loc_1012ACE  +
test eax eax +
jz loc_1012ACE  +
mov ecx [eax] +
lea edx [ebp-46Ch] +
push edx  +
push 80058000h  +
push eax  +
call dword ptr [ecx+14h]  +
mov edi eax +
test edi edi +
jl loc_1012AB3  +
cmp dword ptr [ebp-46Ch] 0 +
jz loc_1012AB3  +
push dword ptr [ebp-46Ch]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp-47Ch]  +
call sub_10066E4  +
mov edi eax +
test edi edi +
jge loc_1012AAF  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_1012AF2  +
test byte ptr [eax+1Ch] 1 +
jz loc_1012AF2  +
movzx ecx di +
push ecx  +
push ebx  +
push 50h  +
jmp loc_1012AE7  +
xor edi edi +
jmp loc_1012AF2  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_1012AF2  +
test byte ptr [eax+1Ch] 1 +
jz loc_1012AF2  +
movzx ecx di +
push ecx  +
push ebx  +
push 4Fh  +
jmp loc_1012AE7  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_1012AF2  +
test byte ptr [eax+1Ch] 1 +
jz loc_1012AF2  +
movzx ecx di +
push ecx  +
push ebx  +
push 4Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10062BE  +
xor ebx ebx +
cmp [ebp-46Ch] ebx +
jz loc_1012B0E  +
push dword ptr [ebp-46Ch]  +
call ds:CoTaskMemFree  +
mov [ebp-46Ch] ebx +
mov eax [ebp-474h] +
cmp eax ebx +
jz loc_1012B24  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp-474h] ebx +
mov eax [ebp-470h] +
cmp eax ebx +
jz loc_1012B3A  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp-470h] ebx +
mov eax [ebp-478h] +
cmp eax ebx +
jz loc_1012B50  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp-478h] ebx +
mov eax [ebp-468h] +
cmp eax ebx +
jz loc_1012B7B  +
mov [ebp-468h] ebx +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
cmp [ebp-468h] ebx +
jz loc_1012B7B  +
push ebx  +
lea eax [ebp-468h] +
push eax  +
call sub_1010C80  +
cmp edi 1 +
jnz loc_1012B92  +
push dword ptr [ebp+0Ch]  +
push ebx  +
push dword ptr [ebp-47Ch]  +
call memset  +
add esp 0Ch +
mov eax [ebp-468h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
cmp eax ebx +
jz loc_1012BA6  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax edi +
call sub_101BE3E  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax 2674h +
call __alloca_probe  +
mov eax dword_1030118 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
xor ebx ebx +
push 450h  +
lea eax [ebp+var_265C] +
push ebx  +
push eax  +
mov [ebp+var_2664] ebx +
mov [ebp+var_2668] ebx +
mov dword ptr [ebp+var_2660] ebx +
call memset  +
add esp 0Ch +
push 1000h  +
lea eax [ebp+Buffer] +
push eax  +
push 6Fh  +
push ebx  +
call ds:GetModuleHandleW  +
push eax  +
call ds:LoadStringW  +
test eax eax +
jnz loc_1012C43  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_1012C3C  +
test byte ptr [eax+1Ch] 1 +
jz loc_1012C3C  +
push offset dword_1002BB4  +
push 28h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10054B7  +
xor eax eax +
jmp loc_1013094  +
push esi  +
lea eax [ebp+Buffer] +
push edi  +
mov [ebp+var_2670] eax +
mov [ebp+var_266C] offset a_zip_0 +
cmp [ebp+arg_0] ebx +
jz loc_1012D67  +
mov esi dword_1035930 +
mov ecx 115h +
lea edi [ebp+var_2660] +
lea eax [ebp+var_261C] +
movs   +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
cmp cx bx +
jnz loc_1012C80  +
sub eax edx +
sar eax 1 +
jnz loc_1012D55  +
mov edi offset Dst +
mov eax edi +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
cmp cx bx +
jnz loc_1012C9E  +
sub eax edx +
sar eax 1 +
jnz loc_1012CD4  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_101306C  +
test byte ptr [eax+1Ch] 1 +
jz loc_101306C  +
push offset dword_1002BB4  +
push 29h  +
jmp loc_1012F78  +
push edi  +
push 208h  +
lea eax [ebp+var_261C] +
push eax  +
call sub_100671E  +
test eax eax +
jge loc_1012D10  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_101306C  +
test byte ptr [eax+1Ch] 1 +
jz loc_101306C  +
push offset dword_1002BB4  +
push 2Ah  +
jmp loc_1012F78  +
mov ecx dword_1035930 +
lea eax [ebp+var_2660] +
push eax  +
call sub_1010538  +
cmp eax ebx +
jge loc_1012D55  +
mov ecx off_1030000 +
cmp ecx offset off_1030000 +
jz loc_101306C  +
test byte ptr [ecx+1Ch] 1 +
jz loc_101306C  +
push eax  +
push offset dword_1002BB4  +
push 2Bh  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
jmp loc_1012FFA  +
mov ecx dword_1035930 +
call sub_10150E6  +
mov ebx eax +
jmp loc_101305E  +
call sub_1010F24  +
mov ecx dword_1035930 +
lea eax [ebp+var_2668] +
push eax  +
push ebx  +
call sub_1014C03  +
mov ebx eax +
test ebx ebx +
jge loc_1012DAF  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_101306C  +
test byte ptr [eax+1Ch] 1 +
jz loc_101306C  +
movzx ecx bx +
push ecx  +
push offset dword_1002BB4  +
push 2Ch  +
jmp loc_1012FF4  +
call sub_1010F09  +
mov eax ppv +
test eax eax +
jz loc_1012DCA  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
and ppv 0 +
mov eax dword_1035930 +
mov ecx 115h +
mov esi eax +
lea edi [ebp+var_2660] +
movs   +
xor esi esi +
cmp [ebp+var_2668] esi +
jnz loc_1012E0A  +
mov [ebp+var_2664] 1 +
cmp [ebp+var_262C] esi +
jz loc_101306C  +
push esi  +
call ds:PostQuitMessage  +
jmp loc_101306C  +
cmp dword ptr [ebp+var_2660] esi +
jz loc_1012E32  +
mov ecx eax +
call sub_10144B9  +
test eax eax +
jz loc_1012E32  +
push 30h  +
push esi  +
push 6Dh  +
push 518h  +
push hWnd  +
call sub_100635D  +
mov edi offset Dst +
mov ecx edi +
lea eax [ebp+var_261C] +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_1012E65  +
cmp dx si +
jz loc_1012E61  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_1012E65  +
add eax 4 +
add ecx 4 +
cmp dx si +
jnz loc_1012E3F  +
xor eax eax +
jmp loc_1012E6A  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
cmp eax esi +
jnz loc_1013009  +
mov ecx dword_1035930 +
push offset dword_1002CE8  +
call sub_1014F90  +
mov esi 104h +
push 1  +
lea eax [ebp+var_2670] +
push eax  +
push esi  +
lea eax [ebp+NewFileName] +
push eax  +
call sub_1012814  +
mov ebx eax +
test ebx ebx +
jl loc_1012F2D  +
cmp ebx 1 +
jnz loc_1012EF7  +
push 4  +
push 6Dh  +
push 6Eh  +
push hWnd  +
call sub_1006495  +
cmp eax 0FFFFFFFFh +
jz loc_1012F57  +
cmp eax 6 +
jz loc_1012F88  +
push ebx  +
lea eax [ebp+var_2670] +
push eax  +
push esi  +
lea eax [ebp+NewFileName] +
push eax  +
call sub_1012814  +
mov ebx eax +
test ebx ebx +
jl loc_1012F94  +
cmp ebx 1 +
jz loc_1012F88  +
lea eax [ebp+NewFileName] +
push eax  +
call sub_1006FF6  +
cmp eax 2 +
jnz loc_1012F11  +
push 6Ah  +
push 0B0h  +
jmp loc_1012F1D  +
test eax eax +
jz loc_1012FBB  +
push 6Ah  +
push 71h  +
push hWnd  +
call sub_10064B6  +
jmp loc_1012E87  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_101306C  +
test byte ptr [eax+1Ch] 1 +
jz loc_101306C  +
movzx ecx bx +
push ecx  +
push offset dword_1002BB4  +
push 2Dh  +
jmp loc_1012FF4  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_101306C  +
test byte ptr [eax+1Ch] 1 +
jz loc_101306C  +
push offset dword_1002BB4  +
push 2Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10054B7  +
jmp loc_101306C  +
push edi  +
call ds:DeleteFileW  +
jmp loc_1013062  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_101306C  +
test byte ptr [eax+1Ch] 1 +
jz loc_101306C  +
movzx ecx bx +
push ecx  +
push offset dword_1002BB4  +
push 2Fh  +
jmp loc_1012FF4  +
push 3  +
lea eax [ebp+NewFileName] +
push eax  +
push edi  +
call ds:MoveFileExW  +
test eax eax +
jnz loc_1013001  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_101306C  +
test byte ptr [eax+1Ch] 1 +
jz loc_101306C  +
movzx ecx bx +
push ecx  +
push offset dword_1002BB4  +
push 30h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10062BE  +
jmp loc_101306C  +
lea esi [ebp+NewFileName] +
jmp loc_101300F  +
lea esi [ebp+var_261C] +
mov ecx dword_1035930 +
push esi  +
call sub_1014F90  +
push esi  +
call sub_102333E  +
test eax eax +
jz loc_101304D  +
mov ecx off_1030000 +
cmp ecx offset off_1030000 +
jz loc_101304D  +
test byte ptr [ecx+1Ch] 1 +
jz loc_101304D  +
push esi  +
push eax  +
push offset dword_1002BB4  +
push 31h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_101058A  +
cmp [ebp+var_262C] 0 +
jz loc_101305E  +
push 0  +
call ds:PostQuitMessage  +
test ebx ebx +
jl loc_101306C  +
mov [ebp+var_2664] 1 +
cmp ppv 0 +
pop edi  +
pop esi  +
jz loc_101308E  +
call sub_1010F09  +
mov eax ppv +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
and ppv 0 +
mov eax [ebp+var_2664] +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop ebx  +
call sub_101BC5D  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax 488Ch +
call __alloca_probe  +
mov eax dword_1030118 +
xor eax ebp +
mov [ebp-4] eax +
mov eax [ebp+0Ch] +
mov ecx [ebp+14h] +
push ebx  +
mov ebx [ebp+8] +
push esi  +
xor esi esi +
sub eax 10h +
push edi  +
mov [ebp-4874h] ebx +
mov [ebp-4878h] esi +
jz loc_1013568  +
sub eax 3Eh +
jz loc_101354C  +
sub eax 0C2h +
jz loc_10133BA  +
dec eax  +
jnz loc_1013548  +
movzx eax word ptr [ebp+10h] +
dec eax  +
jz loc_1013240  +
dec eax  +
jz loc_1013239  +
sub eax 25Dh +
jz loc_101313F  +
dec eax  +
jz loc_1013125  +
dec eax  +
jnz loc_1013548  +
push esi  +
jmp loc_1013127  +
push 1  +
push 262h  +
push ebx  +
call ds:GetDlgItem  +
push eax  +
call ds:EnableWindow  +
jmp loc_1013548  +
mov esi ds:GetModuleHandleW +
mov ebx 1000h +
push ebx  +
lea eax [ebp-220Ch] +
push eax  +
push 6Fh  +
push 0  +
call esi  +
mov edi ds:LoadStringW +
push eax  +
call edi  +
test eax eax +
jnz loc_1013196  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_1013548  +
test byte ptr [eax+1Ch] 1 +
jz loc_1013548  +
push offset dword_1002BB4  +
push 44h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10054B7  +
jmp loc_1013548  +
push ebx  +
lea eax [ebp-420Ch] +
push eax  +
push 70h  +
push 0  +
call esi  +
push eax  +
call edi  +
test eax eax +
jnz loc_10131CE  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_1013548  +
test byte ptr [eax+1Ch] 1 +
jz loc_1013548  +
push offset dword_1002BB4  +
push 45h  +
jmp loc_1013186  +
***
lea eax [ebp-220Ch] +
mov [ebp-4888h] eax +
lea eax [ebp-420Ch] +
mov [ebp-4880h] eax +
push 2  +
lea eax [ebp-4888h] +
push eax  +
push 104h  +
lea eax [ebp-20Ch] +
push eax  +
mov dword ptr [ebp-4884h] offset a_zip_0 +
mov dword ptr [ebp-487Ch] offset a_xml_0 +
call sub_1012814  +
test eax eax +
jl loc_1013574  +
lea eax [ebp-20Ch] +
push eax  +
push 25Eh  +
push dword ptr [ebp-4874h]  +
call ds:SetDlgItemTextW  +
jmp loc_1013574  +
push 2  +
jmp loc_101356D  +
push 450h  +
lea eax [ebp-486Ch] +
push esi  +
push eax  +
mov [ebp-4870h] esi +
call memset  +
xor eax eax +
push 206h  +
mov [ebp-441Ch] ax +
lea eax [ebp-441Ah] +
push esi  +
push eax  +
call memset  +
add esp 18h +
push esi  +
push esi  +
xor eax eax +
push 0F0h  +
lea edi [ebp-4214h] +
stos   +
push 260h  +
push ebx  +
stos   +
call ds:SendDlgItemMessageW  +
xor ecx ecx +
inc ecx  +
cmp eax ecx +
jnz loc_1013301  +
push ecx  +
lea eax [ebp-4878h] +
push eax  +
push 262h  +
push ebx  +
mov [ebp-4210h] ecx +
call ds:GetDlgItemInt  +
cmp [ebp-4878h] esi +
jz loc_1013309  +
lea ecx [eax-1] +
cmp ecx 63h +
ja loc_1013309  +
mov [ebp-4214h] eax +
mov esi 104h +
push esi  +
lea eax [ebp-20Ch] +
push eax  +
push 25Eh  +
push ebx  +
call ds:GetDlgItemTextW  +
test eax eax +
jz loc_101333A  +
lea eax [ebp-20Ch] +
push eax  +
call sub_1006FF6  +
cmp eax 2 +
jnz loc_1013318  +
push 6Ah  +
push 0B0h  +
jmp loc_101330D  +
mov [ebp-4210h] esi +
jmp loc_10132CA  +
***
push 6Ah  +
push 72h  +
push ebx  +
call sub_10064B6  +
jmp loc_1013548  +
test eax eax +
jz loc_1013322  +
push 6Ah  +
push 71h  +
jmp loc_101330D  +
***
lea eax [ebp-20Ch] +
push eax  +
push esi  +
lea eax [ebp-441Ch] +
push eax  +
call sub_10066E4  +
test eax eax +
jl loc_101331C  +
mov esi dword_1035930 +
xor eax eax +
mov ecx 115h +
lea edi [ebp-4870h] +
movs   +
cmp ax [ebp-441Ch] +
jz loc_1013361  +
lea eax [ebp-441Ch] +
push eax  +
jmp loc_1013366  +
push offset Dst  +
push 208h  +
lea eax [ebp-482Ch] +
push eax  +
call sub_100671E  +
mov eax [ebp-4214h] +
test eax eax +
jz loc_1013387  +
mov [ebp-4830h] eax +
mov eax [ebp-4210h] +
mov ecx dword_1035930 +
mov [ebp-4870h] eax +
lea eax [ebp-4870h] +
push eax  +
call sub_1010538  +
test eax eax +
jge loc_10133B3  +
push 6Ah  +
push 71h  +
push ebx  +
call sub_10064B6  +
push 1  +
jmp loc_101356D  +
xor eax eax +
push 206h  +
mov [ebp-441Ch] ax +
lea eax [ebp-441Ah] +
push esi  +
push eax  +
call memset  +
mov esi dword_1035930 +
add esp 0Ch +
xor eax eax +
lea edi [ebp-4214h] +
stos   +
stos   +
mov ecx 115h +
lea edi [ebp-4870h] +
movs   +
mov ecx offset Dst +
lea eax [ebp-482Ch] +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_1013426  +
test dx dx +
jz loc_1013422  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_1013426  +
add eax 4 +
add ecx 4 +
test dx dx +
jnz loc_1013400  +
xor eax eax +
jmp loc_101342B  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
test eax eax +
jz loc_1013449  +
lea eax [ebp-482Ch] +
push eax  +
push 208h  +
lea eax [ebp-441Ch] +
push eax  +
call sub_100671E  +
jmp loc_1013452  +
xor eax eax +
mov [ebp-441Ch] ax +
mov eax [ebp-4830h] +
mov esi ds:SendDlgItemMessageW +
push 0  +
push 104h  +
mov edi 0C5h +
push edi  +
mov ebx 25Eh +
push ebx  +
push dword ptr [ebp-4874h]  +
mov [ebp-4214h] eax +
mov eax [ebp-4870h] +
mov [ebp-4210h] eax +
call esi  +
push 0  +
push 3  +
push edi  +
lea edi [ebx+4] +
push edi  +
push dword ptr [ebp-4874h]  +
call esi  +
push 1  +
push dword ptr [ebp-4214h]  +
push edi  +
push dword ptr [ebp-4874h]  +
call ds:SetDlgItemInt  +
xor eax eax +
push eax  +
push 1  +
push 0F1h  +
cmp [ebp-4210h] eax +
jz loc_10134D4  +
push 260h  +
push dword ptr [ebp-4874h]  +
call esi  +
push 1  +
jmp loc_10134E3  +
push 261h  +
push dword ptr [ebp-4874h]  +
call esi  +
push 0  +
mov esi ds:GetDlgItem +
push edi  +
push dword ptr [ebp-4874h]  +
call esi  +
push eax  +
call ds:EnableWindow  +
lea eax [ebp-441Ch] +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_1013502  +
sub eax edx +
sar eax 1 +
jz loc_1013526  +
lea eax [ebp-441Ch] +
push eax  +
push ebx  +
push dword ptr [ebp-4874h]  +
call ds:SetDlgItemTextW  +
push 10h  +
push ebx  +
push dword ptr [ebp-4874h]  +
call esi  +
push eax  +
call ds:SHAutoComplete  +
push ebx  +
push dword ptr [ebp-4874h]  +
call esi  +
push eax  +
call ds:SetFocus  +
xor eax eax +
jmp loc_1013577  +
cmp dword ptr [ecx+8] 0FFFFFFFEh +
jnz loc_1013559  +
call sub_10110EB  +
jmp loc_1013548  +
***
push ecx  +
push dword ptr [ebp+10h]  +
push 4Eh  +
push ebx  +
call ds:DefWindowProcW  +
jmp loc_1013577  +
movzx eax word ptr [ebp+10h] +
push eax  +
push ebx  +
call ds:EndDialog  +
xor eax eax +
inc eax  +
mov ecx [ebp-4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_101BC5D  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax 2068h +
call __alloca_probe  +
mov eax dword_1030118 +
xor eax ebp +
mov [ebp-4] eax +
mov eax [ebp+8] +
push ebx  +
mov [ebp-2058h] eax +
mov eax [ebp+14h] +
push esi  +
push edi  +
mov [ebp-205Ch] eax +
xor esi esi +
xor eax eax +
lea edi [ebp-2064h] +
mov [ebp-2068h] esi +
stos   +
mov [ebp-2018h] esi +
lea edi [ebp-2014h] +
stos   +
stos   +
stos   +
push 38h  +
stos   +
lea eax [ebp-2050h] +
push esi  +
push eax  +
mov [ebp-2060h] esi +
xor ebx ebx +
mov [ebp-2054h] esi +
call memset  +
mov ecx [ebp+0Ch] +
mov eax 100h +
add esp 0Ch +
cmp ecx eax +
ja loc_1013859  +
jz loc_101379C  +
mov eax ecx +
dec eax  +
jz loc_10136E8  +
dec eax  +
jz loc_10136A8  +
sub eax 0Eh +
jz loc_101369F  +
sub eax 3Eh +
jz loc_1013660  +
sub eax 5 +
jnz loc_1013878  +
call sub_10110EB  +
push 101h  +
push esi  +
push esi  +
push dword_1035908  +
call ds:RedrawWindow  +
xor eax eax +
mov ecx [ebp-4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_101BC5D  +
leave   +
retn 10h  +
***
mov ecx [ebp-205Ch] +
mov eax [ecx+8] +
cmp eax 0FFFFFD3Ah +
jnz loc_1013686  +
cmp dword ptr [ecx+0Ch] 3EAh +
jnz loc_1013686  +
push dword ptr [ebp-2058h]  +
call sub_101204B  +
jmp loc_101364F  +
***
push ecx  +
cmp eax 0FFFFFDEEh +
jnz loc_1013695  +
call sub_10111CC  +
jmp loc_101364D  +
***
push dword ptr [ebp+10h]  +
push 4Eh  +
jmp loc_1013BBB  +
push esi  +
call ds:PostQuitMessage  +
jmp loc_101364D  +
***
mov eax uIDEvent +
mov esi ds:KillTimer +
test eax eax +
jz loc_10136C6  +
push eax  +
push hWnd  +
call esi  +
and uIDEvent ebx +
mov eax dword_1035920 +
test eax eax +
jz loc_10136DE  +
push eax  +
push hWnd  +
call esi  +
and dword_1035920 ebx +
call sub_1010D5F  +
jmp loc_101364D  +
***
push dword ptr [ebp-2058h]  +
call sub_101079B  +
test eax eax +
jz loc_1013770  +
cmp dword_1035904 esi +
jz loc_1013770  +
push dword ptr [ebp-2058h]  +
call sub_1010BD5  +
test eax eax +
jnz loc_1013729  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_1013794  +
test byte ptr [eax+1Ch] 1 +
jz loc_1013794  +
push offset dword_1002BB4  +
push 3Fh  +
jmp loc_1013789  +
push dword ptr [ebp-2058h]  +
call sub_1010A42  +
test eax eax +
jnz loc_1013753  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_1013794  +
test byte ptr [eax+1Ch] 1 +
jz loc_1013794  +
push offset dword_1002BB4  +
push 40h  +
jmp loc_1013789  +
push esi  +
push wParam  +
push 448h  +
push dword_1035904  +
call ds:SendMessageW  +
jmp loc_101364D  +
***
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_1013794  +
test byte ptr [eax+1Ch] 1 +
jz loc_1013794  +
push offset dword_1002BB4  +
push 3Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10054B7  +
xor eax eax +
inc eax  +
jmp loc_101364F  +
***
mov edi [ebp+10h] +
cmp edi 9 +
jz loc_101384F  +
cmp edi 0Dh +
jz loc_10137B6  +
cmp edi 28h +
jnz loc_101364D  +
mov esi ds:SendMessageW +
xor ebx ebx +
push ebx  +
push ebx  +
push 447h  +
push dword_1035904  +
call esi  +
cmp eax 0FFFFFFFFh +
jz loc_101364D  +
lea ecx [ebp-2018h] +
push ecx  +
push eax  +
push 417h  +
push dword_1035904  +
call esi  +
test eax eax +
jz loc_101364D  +
cmp edi 0Dh +
jnz loc_101380E  +
movzx eax word ptr [ebp-2014h] +
push ebx  +
push eax  +
push 111h  +
push dword_1035904  +
jmp loc_1013848  +
cmp edi 28h +
jnz loc_101364D  +
mov eax 3EAh +
cmp [ebp-2014h] eax +
jnz loc_101364D  +
mov [ebp-2048h] eax +
lea eax [ebp-2054h] +
push eax  +
mov eax dword_1035904 +
push eax  +
push 4Eh  +
mov dword ptr [ebp-204Ch] 0FFFFFD3Ah +
push eax  +
call esi  +
jmp loc_101364D  +
***
call sub_1010E69  +
jmp loc_101364D  +
***
mov eax ecx +
sub eax 106h +
jz loc_1013B6F  +
sub eax 0Bh +
jz loc_1013949  +
dec eax  +
dec eax  +
jz loc_1013894  +
sub eax 25h +
jz loc_1013887  +
push dword ptr [ebp-205Ch]  +
push dword ptr [ebp+10h]  +
push ecx  +
jmp loc_1013BBB  +
push 1Bh  +
call ds:GetSysColorBrush  +
jmp loc_101364F  +
***
cmp uIDEvent esi +
jnz loc_10138A8  +
cmp dword_1035920 esi +
jz loc_101364D  +
cmp dword ptr [ebp+10h] 1 +
jnz loc_10138EA  +
lea eax [ebp-2068h] +
push eax  +
call ds:GetSystemTimeAsFileTime  +
push stru_1035914.dwHighDateTime  +
mov esi [ebp-2064h] +
push stru_1035914.dwLowDateTime  +
mov edi [ebp-2068h] +
push esi  +
push edi  +
call sub_1010DA4  +
mov stru_1035914.dwHighDateTime esi +
mov ebx eax +
mov stru_1035914.dwLowDateTime edi +
xor esi esi +
mov eax dword_1030024 +
cmp eax esi +
jz loc_10138FC  +
cmp eax 3 +
jnz loc_101364D  +
cmp dword ptr [ebp+10h] 2 +
jnz loc_101391F  +
push esi  +
push dword ptr [ebp-2058h]  +
call sub_101107C  +
push esi  +
push dword ptr [ebp-2058h]  +
call sub_1011014  +
jmp loc_101364D  +
***
mov eax 2710h +
cmp ebx eax +
jbe loc_101392A  +
mov ebx eax +
add dword_1035B48 ebx +
mov eax dword_1035B48 +
xor edx edx +
mov ecx 3E8h +
div  ecx +
push eax  +
call sub_1011795  +
jmp loc_101364D  +
***
movzx ecx word ptr [ebp+10h] +
mov eax 3E9h +
cmp ecx eax +
jg loc_1013ADB  +
jz loc_1013AB7  +
sub ecx 191h +
jz loc_1013A1D  +
dec ecx  +
jz loc_1013635  +
dec ecx  +
jz loc_10139FB  +
dec ecx  +
jz loc_10139C6  +
dec ecx  +
jz loc_10139B3  +
sub ecx 253h +
jnz loc_1013AFF  +
push 1  +
call sub_1012BB5  +
test eax eax +
jz loc_1013C2C  +
push esi  +
call sub_10122A2  +
call ds:GetDesktopWindow  +
push eax  +
call ds:SetForegroundWindow  +
jmp loc_101364D  +
***
call sub_1011836  +
xor ecx ecx +
test eax eax +
setl cl  +
mov eax ecx +
jmp loc_101364F  +
***
call sub_1011C5B  +
test eax eax +
jl loc_10139E4  +
push esi  +
push esi  +
push 10h  +
push dword ptr [ebp-2058h]  +
call ds:PostMessageW  +
jmp loc_101364D  +
***
push 6Ah  +
push 0AEh  +
push dword ptr [ebp-2058h]  +
call sub_10064B6  +
jmp loc_101364D  +
***
push esi  +
push offset loc_10130A8  +
push dword ptr [ebp-2058h]  +
push 258h  +
push hInstance  +
call ds:DialogBoxParamW  +
jmp loc_101364D  +
***
push 1000h  +
lea eax [ebp-2004h] +
push eax  +
push 66h  +
push hInstance  +
call ds:LoadStringW  +
test eax eax +
jnz loc_1013A61  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_1013794  +
test byte ptr [eax+1Ch] 1 +
jz loc_1013794  +
push offset dword_1002BB4  +
push 42h  +
jmp loc_1013789  +
***
lea eax [ebp-2060h] +
push eax  +
push dword_1035B50  +
push dword_1035B4C  +
push 0C9h  +
push hInstance  +
call ds:COMCTL32_381  +
test eax eax +
jl loc_1013A91  +
push dword ptr [ebp-2060h]  +
jmp loc_1013A9E  +
push 7F00h  +
push esi  +
call ds:LoadIconW  +
push eax  +
push esi  +
lea eax [ebp-2004h] +
push eax  +
push dword ptr [ebp-2058h]  +
call ds:ShellAboutW  +
jmp loc_101364D  +
***
push 1  +
call sub_10122A2  +
push esi  +
call sub_1011795  +
push esi  +
call sub_1012BB5  +
test eax eax +
jnz loc_101364D  +
push 6Ah  +
push 6Ch  +
jmp loc_1013C30  +
sub ecx 3EAh +
jz loc_1013635  +
dec ecx  +
jz loc_1013C6F  +
dec ecx  +
jz loc_1013C8B  +
dec ecx  +
jz loc_1013D29  +
dec ecx  +
jz loc_1013B12  +
push dword ptr [ebp-205Ch]  +
push dword ptr [ebp+10h]  +
push 111h  +
jmp loc_1013BBB  +
push 4  +
push 6Dh  +
push 517h  +
push dword ptr [ebp-2058h]  +
call sub_1006495  +
cmp eax 0FFFFFFFFh +
jnz loc_1013B51  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_1013794  +
test byte ptr [eax+1Ch] 1 +
jz loc_1013794  +
push offset dword_1002BB4  +
push 43h  +
jmp loc_1013789  +
***
cmp eax 6 +
jnz loc_101364D  +
jmp loc_10139C6  +
***
push 3  +
call sub_10122A2  +
jmp loc_101364D  +
***
push 2  +
jmp loc_1013B61  +
***
mov edi [ebp+10h] +
push 2  +
pop ecx  +
push 4  +
pop esi  +
push 61h  +
pop ebx  +
cmp edi ebx +
ja loc_1013B93  +
jz loc_1013B8C  +
mov eax edi +
sub eax 41h +
jz loc_1013B8C  +
sub eax ecx +
jmp loc_1013B98  +
mov eax 3E8h +
jmp loc_1013BF4  +
mov eax edi +
sub eax 63h +
jz loc_1013BEF  +
sub eax esi +
jz loc_1013BE8  +
sub eax 6 +
jz loc_1013BE1  +
sub eax ecx +
jz loc_1013BDA  +
sub eax esi +
jz loc_1013BD3  +
sub eax ecx +
jz loc_1013BCC  +
push dword ptr [ebp-205Ch]  +
push edi  +
push 106h  +
push dword ptr [ebp-2058h]  +
call ds:DefWindowProcW  +
jmp loc_101364F  +
***
mov eax 3EBh +
jmp loc_1013BF4  +
mov eax 3ECh +
jmp loc_1013BF4  +
mov eax 3E9h +
jmp loc_1013BF4  +
mov eax 3EEh +
jmp loc_1013BF4  +
mov eax 3EAh +
jmp loc_1013BF4  +
mov eax 3EDh +
push 0  +
push eax  +
push 412h  +
push dword_1035904  +
call ds:SendMessageW  +
cmp eax esi +
jnz loc_101364D  +
cmp edi ebx +
ja loc_1013C47  +
jz loc_1013C21  +
mov eax edi +
sub eax 41h +
jz loc_1013C21  +
dec eax  +
dec eax  +
jmp loc_1013C4C  +
push 1  +
call sub_1012BB5  +
test eax eax +
jnz loc_1013C40  +
push 6Ah  +
push 6Bh  +
push dword ptr [ebp-2058h]  +
call sub_10064B6  +
jmp loc_1013794  +
***
push 0  +
jmp loc_101399C  +
***
mov eax edi +
sub eax 63h +
jz loc_1013D29  +
sub eax esi +
jz loc_1013D19  +
sub eax 6 +
jz loc_1013CBC  +
dec eax  +
dec eax  +
jz loc_1013CA7  +
sub eax esi +
jz loc_1013C8B  +
dec eax  +
dec eax  +
jnz loc_1013BAF  +
mov ecx dword_1035930 +
call sub_10144EF  +
test eax eax +
jge loc_1013B6B  +
push 6Ah  +
push 0AAh  +
jmp loc_1013C30  +
***
mov ecx dword_1035930 +
call sub_1014546  +
test eax eax +
jge loc_1013B5F  +
push 6Ah  +
push 0ABh  +
jmp loc_1013C30  +
***
push 1  +
call sub_10122A2  +
push 0  +
call sub_1011795  +
push 0  +
jmp loc_1013AC5  +
***
push esi  +
push 6Dh  +
push 517h  +
push dword ptr [ebp-2058h]  +
call sub_1006495  +
cmp eax 0FFFFFFFFh +
jnz loc_1013CFA  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_1013794  +
test byte ptr [eax+1Ch] 1 +
jz loc_1013794  +
push offset dword_1002BB4  +
push 41h  +
jmp loc_1013789  +
***
cmp eax 6 +
jnz loc_101364D  +
call sub_1011C5B  +
test eax eax +
jl loc_10139E4  +
push 0  +
push 0  +
jmp loc_10139D1  +
***
push dword ptr [ebp-2058h]  +
call sub_101204B  +
jmp loc_101364D  +
***
mov ecx dword_1035930 +
call sub_101459D  +
test eax eax +
jge loc_101364D  +
push 6Ah  +
push 77h  +
jmp loc_1013C30  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 34h +
push esi  +
xor esi esi +
push 2Ch  +
lea eax [ebp+var_34.style] +
push esi  +
push eax  +
mov [ebp+var_4] esi +
mov [ebp+var_34.cbSize] esi +
call memset  +
add esp 0Ch +
lea eax [ebp+var_4] +
push eax  +
push dword_1035B50  +
push dword_1035B4C  +
push 0C9h  +
push hInstance  +
call ds:COMCTL32_381  +
mov eax hInstance +
mov [ebp+var_34.hInstance] eax +
mov eax [ebp+var_4] +
push 5  +
mov [ebp+var_34.cbSize] 30h +
mov [ebp+var_34.style] esi +
mov [ebp+var_34.lpfnWndProc] offset loc_101358D +
mov [ebp+var_34.cbClsExtra] esi +
mov [ebp+var_34.cbWndExtra] esi +
mov [ebp+var_34.hIcon] eax +
mov [ebp+var_34.hCursor] esi +
call ds:GetSysColorBrush  +
mov [ebp+var_34.hbrBackground] eax +
lea eax [ebp+var_34] +
push eax  +
mov [ebp+var_34.lpszMenuName] esi +
mov [ebp+var_34.lpszClassName] offset ClassName +
call ds:RegisterClassExW  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push esi  +
push edi  +
xor esi esi +
xor eax eax +
lea edi [ebp+var_14.dwICC] +
mov [ebp+var_14.dwSize] esi +
stos   +
mov eax hWnd +
mov [ebp+var_C] ecx +
mov [ebp+var_8] 80004005h +
cmp eax esi +
jz loc_1013E13  +
push 5  +
push eax  +
call ds:ShowWindow  +
mov [ebp+var_8] esi +
jmp loc_1013FD8  +
lea eax [ebp+var_14] +
push eax  +
mov [ebp+var_14.dwSize] 8 +
mov [ebp+var_14.dwICC] 4004h +
call ds:InitCommonControlsEx  +
test eax eax +
jnz loc_1013E69  +
call ds:GetLastError  +
mov ecx off_1030000 +
cmp ecx offset off_1030000 +
jz loc_1013FE6  +
test byte ptr [ecx+1Ch] 1 +
jz loc_1013FE6  +
push eax  +
push offset dword_1002BB4  +
push 13h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10062BE  +
jmp loc_1013FE6  +
push esi  +
call ds:GetModuleHandleW  +
mov hInstance eax +
cmp eax esi +
jnz loc_1013EAA  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_1013FE6  +
test byte ptr [eax+1Ch] 1 +
jz loc_1013FE6  +
push offset dword_1002BB4  +
push 14h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10054B7  +
jmp loc_1013FE6  +
push ebx  +
mov [ebp+var_4] esi +
mov ebx offset unk_1030038 +
mov esi offset Buffer +
mov edi offset off_1030000 +
xor eax eax +
mov [esi] ax +
mov eax [ebx] +
test eax eax +
jz loc_1013F19  +
push 400h  +
push esi  +
push eax  +
push hInstance  +
call ds:LoadStringW  +
test eax eax +
jnz loc_1013F19  +
call ds:GetLastError  +
test eax eax +
jnz loc_1013EEE  +
mov eax 54Fh +
mov ecx off_1030000 +
cmp ecx edi +
jz loc_1013F14  +
test byte ptr [ecx+1Ch] 1 +
jz loc_1013F14  +
push eax  +
push [ebp+var_4]  +
push offset dword_1002BB4  +
push 15h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10105FD  +
xor eax eax +
mov [esi] ax +
inc [ebp+var_4]  +
mov [ebx] esi +
add esi 800h +
add ebx 14h +
cmp [ebp+var_4] 7 +
jb loc_1013EBD  +
mov esi [ebp+var_C] +
mov ecx esi +
call sub_1013D4A  +
xor ecx ecx +
pop ebx  +
cmp cx ax +
jnz loc_1013F62  +
mov eax off_1030000 +
cmp eax edi +
jz loc_1013FE6  +
test byte ptr [eax+1Ch] 1 +
jz loc_1013FE6  +
push offset dword_1002BB4  +
push 16h  +
jmp loc_1013E9A  +
mov ecx esi +
call sub_1011339  +
test eax eax +
jnz loc_1013F88  +
mov eax off_1030000 +
cmp eax edi +
jz loc_1013FE6  +
test byte ptr [eax+1Ch] 1 +
jz loc_1013FE6  +
push offset dword_1002BB4  +
push 17h  +
jmp loc_1013E9A  +
mov ecx esi +
call sub_101147A  +
test eax eax +
jnz loc_1013FAE  +
mov eax off_1030000 +
cmp eax edi +
jz loc_1013FE6  +
test byte ptr [eax+1Ch] 1 +
jz loc_1013FE6  +
push offset dword_1002BB4  +
push 18h  +
jmp loc_1013E9A  +
mov ecx esi +
call sub_101062F  +
test eax eax +
jnz loc_1013FD4  +
mov eax off_1030000 +
cmp eax edi +
jz loc_1013FE6  +
test byte ptr [eax+1Ch] 1 +
jz loc_1013FE6  +
push offset dword_1002BB4  +
push 19h  +
jmp loc_1013E9A  +
and [ebp+var_8] 0 +
cmp [ebp+arg_0] 4 +
jz loc_1013FE6  +
push [ebp+arg_0]  +
call sub_10122A2  +
mov eax [ebp+var_8] +
pop edi  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
mov eax dword_1030118 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
push edi  +
lea esi [ebp+arg_0] +
lea edi [ebp+var_14] +
movs   +
movs   +
movs   +
movs   +
lea esi [ebp+var_14] +
mov edi offset unk_1031BB8 +
movs   +
movs   +
movs   +
push offset LibFileName  +
mov ebx ecx +
movs   +
call ds:LoadLibraryW  +
mov hModule eax +
test eax eax +
jz loc_101405D  +
mov esi ds:GetProcAddress +
push offset aPicretrievefil  +
push eax  +
call esi  +
push offset aPicfreefileinf  +
push hModule  +
mov dword_1031BDC eax +
call esi  +
mov dword_1031BE0 eax +
call sub_100C333  +
call sub_100C0B1  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
mov eax ebx +
xor ecx ebp +
pop ebx  +
call sub_101BC5D  +
leave   +
retn 10h  +
***
mov eax hModule +
test eax eax +
jz loc_1014096  +
push eax  +
call ds:FreeLibrary  +
and hModule 0 +
call sub_100C333  +
jmp sub_100C0B1  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
mov eax dword_1030118 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
push edi  +
lea esi [ebp+arg_4] +
lea edi [ebp+var_14] +
movs   +
movs   +
mov edx [ebp+arg_0] +
movs   +
mov eax ecx +
movs   +
lea esi [ebp+var_14] +
mov edi eax +
movs   +
movs   +
movs   +
xor ecx ecx +
mov [eax+10h] ecx +
movs   +
mov dword_1031B8C edx +
mov [eax+14h] ecx +
mov [eax+18h] ecx +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_101BC5D  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push ebx  +
push esi  +
push edi  +
push 104h  +
mov esi offset Dst +
push esi  +
push offset aUserprofileApp  +
mov ebx ecx +
mov dword_1035930 eax +
call ds:ExpandEnvironmentStringsW  +
push [ebp+pMore]  +
mov edi ds:PathAppendW +
push esi  +
call edi  +
push offset pMore  +
push esi  +
call edi  +
push 400h  +
xor eax eax +
push offset word_1035B68  +
push 516h  +
push eax  +
mov wParam eax +
mov dword_1035934 eax +
mov dword_1035B44 eax +
call ds:GetModuleHandleW  +
push eax  +
call ds:LoadStringW  +
mov esi ds:GetSystemMetrics +
push 0Bh  +
call esi  +
push 0Ch  +
mov dword_1035B4C eax +
call esi  +
push 31h  +
mov dword_1035B50 eax +
call esi  +
push 32h  +
mov dword_1035B54 eax +
call esi  +
pop edi  +
mov cy eax +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 8  +
***
mov eax hWnd +
test eax eax +
jz loc_10141B0  +
push eax  +
call ds:DestroyWindow  +
and hWnd 0 +
mov eax dword_1035B60 +
test eax eax +
jz locret_10141C6  +
push eax  +
call sub_1022EBC  +
and dword_1035B60 0 +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1014199  +
test [ebp+arg_0] 1 +
jz loc_10141E6  +
push esi  +
call sub_101B5A8  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_101407F  +
test [ebp+arg_0] 1 +
jz loc_101420C  +
push esi  +
call sub_101B5A8  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
add ecx 458h +
push ecx  +
call ds:CoCreateGuid  +
test eax eax +
jge loc_101425C  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_1014259  +
test byte ptr [eax+1Ch] 1 +
jz loc_1014259  +
call ds:GetLastError  +
push eax  +
mov eax off_1030000 +
push offset dword_1002D04  +
push 11h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10062BE  +
xor eax eax +
retn   +
xor eax eax +
inc eax  +
retn   +
***
push eax  +
add ecx 458h +
push ecx  +
call ds:StringFromGUID2  +
test eax eax +
jnz loc_10142B5  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_10142B2  +
test byte ptr [eax+1Ch] 1 +
jz loc_10142B2  +
call ds:GetLastError  +
push eax  +
mov eax off_1030000 +
push offset dword_1002D04  +
push 12h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10062BE  +
xor eax eax +
retn   +
xor eax eax +
inc eax  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 214h +
mov eax dword_1030118 +
xor eax ebp +
mov [ebp+var_4] eax +
and [ebp+var_210] 0 +
push ebx  +
push esi  +
push edi  +
push 104h  +
lea eax [ebp+szDir] +
push eax  +
mov edi ecx +
push offset aUserprofileApp  +
mov [ebp+var_214] edi +
call ds:ExpandEnvironmentStringsW  +
test eax eax +
jnz loc_101432D  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_101442A  +
test byte ptr [eax+1Ch] 1 +
jz loc_101442A  +
call ds:GetLastError  +
push eax  +
push offset dword_1002D04  +
push 13h  +
jmp loc_101441A  +
mov ebx ds:PathFileExistsW +
lea eax [ebp+szDir] +
push eax  +
call ebx  +
mov esi ds:CreateDirectoryW +
test eax eax +
jnz loc_1014382  +
push 0  +
lea eax [ebp+szDir] +
push eax  +
call esi  +
test eax eax +
jnz loc_1014382  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_101442A  +
test byte ptr [eax+1Ch] 1 +
jz loc_101442A  +
call ds:GetLastError  +
push eax  +
push offset dword_1002D04  +
push 14h  +
jmp loc_101441A  +
mov eax [ebp+var_214] +
add eax 468h +
push eax  +
lea eax [ebp+szDir] +
push eax  +
add edi 670h +
push edi  +
call ds:PathCombineW  +
test eax eax +
jnz loc_10143C8  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_101442A  +
test byte ptr [eax+1Ch] 1 +
jz loc_101442A  +
call ds:GetLastError  +
push eax  +
push offset dword_1002D04  +
push 15h  +
jmp loc_101441A  +
push edi  +
call ebx  +
test eax eax +
jz loc_10143F1  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_101442A  +
test byte ptr [eax+1Ch] 1 +
jz loc_101442A  +
call ds:GetLastError  +
push eax  +
push offset dword_1002D04  +
push 16h  +
jmp loc_101441A  +
push 0  +
push edi  +
call esi  +
test eax eax +
jnz loc_101445A  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_101442A  +
test byte ptr [eax+1Ch] 1 +
jz loc_101442A  +
call ds:GetLastError  +
push eax  +
push offset dword_1002D04  +
push 17h  +
mov eax off_1030000 +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10062BE  +
mov eax [ebp+var_214] +
push 208h  +
add eax 670h +
push 0  +
push eax  +
call memset  +
add esp 0Ch +
mov ecx [ebp+var_4] +
mov eax [ebp+var_210] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_101BC5D  +
leave   +
retn   +
mov [ebp+var_210] 1 +
jmp loc_1014445  +
***
mov ecx [ecx+0A8Ch] +
push 4  +
call sub_1013DDA  +
retn   +
***
mov ecx [ecx+0A8Ch] +
jmp sub_1010CBA  +
***
mov eax [ecx+0A98h] +
cmp eax 2 +
jz loc_10144A1  +
cmp eax 3 +
jz loc_10144A1  +
xor al al +
retn   +
mov al 1 +
retn   +
***
mov dword ptr [ecx+0A80h] 1 +
retn   +
***
mov eax [ecx+0A80h] +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
lea eax [ecx+878h] +
lea ecx [eax+2] +
mov dx [eax] +
inc eax  +
inc eax  +
test dx dx +
jnz loc_10144D4  +
sub eax ecx +
sar eax 1 +
push 0  +
pop eax  +
setnz al  +
leave   +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
cmp dword ptr [esi+0A98h] 2 +
jz loc_1014528  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_1014521  +
test byte ptr [eax+1Ch] 1 +
jz loc_1014521  +
push offset dword_1002D04  +
push 22h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10054B7  +
mov eax 80004005h +
pop esi  +
retn   +
mov ecx [esi+0A90h] +
call sub_100A797  +
mov dword ptr [esi+0A98h] 3 +
xor eax eax +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
cmp dword ptr [esi+0A98h] 3 +
jz loc_101457F  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_1014578  +
test byte ptr [eax+1Ch] 1 +
jz loc_1014578  +
push offset dword_1002D04  +
push 23h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10054B7  +
mov eax 80004005h +
pop esi  +
retn   +
mov ecx [esi+0A90h] +
call sub_100A7A7  +
mov dword ptr [esi+0A98h] 2 +
xor eax eax +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 4Ch +
and [ebp+dwInitParam] 0 +
push ebx  +
push esi  +
push edi  +
lea eax [ebp+var_4C] +
push eax  +
mov ebx ecx +
call sub_101D9E9  +
xor eax eax +
lea edi [ebp+var_8] +
push eax  +
stos   +
call ds:GetModuleHandleW  +
mov [ebp+var_8] eax +
lea eax [ebp+hWnd] +
lea esi [ebx+0A8Ch] +
mov ecx [esi] +
push eax  +
xor edi edi +
call sub_1010D32  +
test eax eax +
jl loc_10145EB  +
cmp [ebp+hWnd.unused] edi +
jz loc_10145EB  +
mov ecx [esi] +
call sub_1010CBA  +
inc edi  +
lea eax [ebp+dwInitParam] +
push eax  +
lea eax [ebp+var_8] +
push eax  +
call sub_101D8AC  +
test eax eax +
jz loc_1014600  +
jg loc_101461B  +
jmp loc_1014625  +
lea eax [ebp+var_4C] +
push eax  +
push [ebp+dwInitParam]  +
call sub_101DCA9  +
test eax eax +
jz loc_1014629  +
cmp eax 4C7h +
jz loc_101463E  +
test eax eax +
jle loc_1014625  +
and eax 0FFFFh +
or eax 80070000h +
mov esi eax +
jmp loc_1014640  +
mov ecx [ebx+0A90h] +
lea eax [ebp+var_4C] +
push eax  +
call sub_100B268  +
mov esi eax +
test esi esi +
jl loc_1014640  +
xor esi esi +
lea eax [ebp+var_4C] +
push eax  +
call sub_101DA10  +
cmp [ebp+dwInitParam] 0 +
jz loc_1014657  +
push [ebp+dwInitParam]  +
call sub_101D37D  +
test edi edi +
jz loc_1014662  +
mov ecx ebx +
call sub_101446B  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 464h +
mov eax dword_1030118 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
xor esi esi +
push 24Ch  +
lea eax [ebp+FindFileData.ftCreationTime] +
push esi  +
push eax  +
mov [ebp+lpPathName] ebx +
mov [ebp+FindFileData.dwFileAttributes] esi +
call memset  +
xor eax eax +
add esp 0Ch +
cmp ax [ebx] +
jnz loc_10146E3  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_1014873  +
test byte ptr [eax+1Ch] 1 +
jz loc_1014873  +
push offset dword_1002D04  +
push 24h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10054B7  +
jmp loc_1014873  +
push offset word_1002DD0  +
push ebx  +
lea eax [ebp+pszPath] +
push eax  +
call ds:PathCombineW  +
test eax eax +
jnz loc_101471D  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_1014873  +
test byte ptr [eax+1Ch] 1 +
jz loc_1014873  +
push offset dword_1002D04  +
push 25h  +
jmp loc_10146D3  +
push edi  +
lea eax [ebp+FindFileData] +
push eax  +
lea eax [ebp+pszPath] +
push eax  +
call ds:FindFirstFileW  +
mov edi eax +
cmp edi 0FFFFFFFFh +
jnz loc_101476A  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_1014872  +
test byte ptr [eax+1Ch] 1 +
jz loc_1014872  +
push offset dword_1002D04  +
push 26h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10054B7  +
jmp loc_1014872  +
mov esi ds:FindNextFileW +
mov ebx ds:_wcsicmp +
lea eax [ebp+FindFileData.cFileName] +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_101477F  +
sub eax edx +
sar eax 1 +
jz loc_1014850  +
lea eax [ebp+FindFileData.cFileName] +
push offset a_  +
push eax  +
call ebx  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1014850  +
lea eax [ebp+FindFileData.cFileName] +
push offset a__  +
push eax  +
call ebx  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1014850  +
lea eax [ebp+FindFileData.cFileName] +
push eax  +
call ds:PathFindExtensionW  +
cmp [ebp+arg_4] 0 +
jnz loc_10147E4  +
push offset a_zip  +
push eax  +
call ebx  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1014850  +
lea eax [ebp+FindFileData.cFileName] +
push eax  +
push [ebp+lpPathName]  +
lea eax [ebp+pszPath] +
push eax  +
call ds:PathCombineW  +
test eax eax +
jnz loc_1014828  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_1014850  +
test byte ptr [eax+1Ch] 1 +
jz loc_1014850  +
push offset dword_1002D04  +
push 27h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10054B7  +
jmp loc_1014850  +
lea eax [ebp+pszPath] +
push eax  +
call ds:PathIsDirectoryW  +
test eax eax +
lea eax [ebp+pszPath] +
jz loc_1014849  +
push 1  +
push eax  +
call sub_101466E  +
jmp loc_1014850  +
push eax  +
call ds:DeleteFileW  +
lea eax [ebp+FindFileData] +
push eax  +
push edi  +
call esi  +
test eax eax +
jnz loc_1014776  +
xor esi esi +
push edi  +
inc esi  +
call ds:FindClose  +
mov ebx [ebp+lpPathName] +
pop edi  +
cmp [ebp+arg_4] 0 +
jz loc_1014882  +
push ebx  +
call ds:RemoveDirectoryW  +
mov esi eax +
mov ecx [ebp+var_4] +
mov eax esi +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_101BC5D  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20Ch +
mov eax dword_1030118 +
xor eax ebp +
mov [ebp+var_4] eax +
push 104h  +
lea eax [ebp+pszPath] +
push eax  +
push offset aUserprofileApp  +
call ds:ExpandEnvironmentStringsW  +
test eax eax +
jnz loc_10148FD  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_10148F9  +
test byte ptr [eax+1Ch] 1 +
jz loc_10148F9  +
call ds:GetLastError  +
push eax  +
mov eax off_1030000 +
push offset dword_1002D04  +
push 28h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10062BE  +
xor eax eax +
jmp loc_101491F  +
lea eax [ebp+pszPath] +
push eax  +
call ds:PathFileExistsW  +
test eax eax +
jnz loc_1014911  +
inc eax  +
jmp loc_101491F  +
push 0  +
lea eax [ebp+pszPath] +
push eax  +
call sub_101466E  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_101BC5D  +
leave   +
retn   +
***
mov edi edi +
push ebx  +
push esi  +
mov esi ecx +
mov eax [esi+14h] +
xor ebx ebx +
push edi  +
mov edi ds:UnhookWindowsHookEx +
cmp eax ebx +
jz loc_101494C  +
push eax  +
call edi  +
mov [esi+14h] ebx +
mov eax [esi+18h] +
cmp eax ebx +
jz loc_1014959  +
push eax  +
call edi  +
mov [esi+18h] ebx +
mov ecx esi +
call sub_100A665  +
push ebx  +
call sub_1005505  +
mov ecx dword_1031B94 +
cmp ecx ebx +
jz loc_101497D  +
push 1  +
call sub_100A619  +
mov dword_1031B94 ebx +
mov ecx dword_1031B98 +
cmp ecx ebx +
jz loc_1014994  +
push 1  +
call sub_100A63F  +
mov dword_1031B98 ebx +
mov eax hObject +
cmp eax ebx +
jz loc_10149AA  +
push eax  +
call ds:CloseHandle  +
mov hObject ebx +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1014930  +
test [ebp+arg_0] 1 +
jz loc_10149CD  +
push esi  +
call sub_101B5A8  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call __EH_prolog3  +
mov ebx ecx +
mov dword ptr [ebp-10h] 80004005h +
call sub_1014218  +
test eax eax +
jnz loc_1014A65  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_1014A1B  +
test byte ptr [eax+1Ch] 1 +
jz loc_1014A1B  +
push offset dword_1002D04  +
push 0Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10054B7  +
lea esi [ebx+0A90h] +
mov ecx [esi] +
xor edi edi +
cmp ecx edi +
jz loc_1014A32  +
push 1  +
call sub_10149B3  +
mov [esi] edi +
lea esi [ebx+0A94h] +
mov ecx [esi] +
cmp ecx edi +
jz loc_1014A47  +
push 1  +
call sub_10141F2  +
mov [esi] edi +
add ebx 0A8Ch +
mov ecx [ebx] +
cmp ecx edi +
jz loc_1014A5C  +
push 1  +
call sub_10141CC  +
mov [ebx] edi +
mov eax [ebp-10h] +
call __EH_epilog3  +
retn   +
mov ecx ebx +
call sub_1014265  +
test eax eax +
jnz loc_1014A8B  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_1014A1B  +
test byte ptr [eax+1Ch] 1 +
jz loc_1014A1B  +
push offset dword_1002D04  +
push 0Bh  +
jmp loc_1014A10  +
mov ecx ebx +
call sub_10142BE  +
test eax eax +
jnz loc_1014ABC  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_1014A1B  +
test byte ptr [eax+1Ch] 1 +
jz loc_1014A1B  +
push offset dword_1002D04  +
push 0Ch  +
jmp loc_1014A10  +
push 1Ch  +
call sub_101B56A  +
pop ecx  +
test eax eax +
jz loc_1014AE1  +
sub esp 10h +
mov edi esp +
lea esi [ebx+458h] +
movs   +
movs   +
movs   +
push ebx  +
mov ecx eax +
movs   +
call sub_10140A5  +
jmp loc_1014AE3  +
xor eax eax +
mov [ebx+0A90h] eax +
test eax eax +
jnz loc_1014B13  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_1014A1B  +
test byte ptr [eax+1Ch] 1 +
jz loc_1014A1B  +
push offset dword_1002D04  +
push 0Dh  +
jmp loc_1014A10  +
push ebx  +
mov ecx eax +
call sub_100AAB2  +
test eax eax +
jge loc_1014B45  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_1014A1B  +
test byte ptr [eax+1Ch] 1 +
jz loc_1014A1B  +
push offset dword_1002D04  +
push 0Eh  +
jmp loc_1014A10  +
push 1Ch  +
call sub_101B56A  +
pop ecx  +
mov [ebp-14h] eax +
and dword ptr [ebp-4] 0 +
test eax eax +
jz loc_1014B70  +
sub esp 10h +
mov edi esp +
lea esi [ebx+458h] +
movs   +
movs   +
movs   +
mov ecx eax +
movs   +
call sub_1013FF7  +
jmp loc_1014B72  +
xor eax eax +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov [ebx+0A94h] eax +
test eax eax +
jnz loc_1014BA6  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_1014A1B  +
test byte ptr [eax+1Ch] 1 +
jz loc_1014A1B  +
push offset dword_1002D04  +
push 0Fh  +
jmp loc_1014A10  +
push 1  +
call sub_101B56A  +
pop ecx  +
test eax eax +
jz loc_1014BC3  +
lea ecx [ebx+468h] +
push ecx  +
push ebx  +
mov ecx eax +
call sub_10140F7  +
jmp loc_1014BC5  +
xor eax eax +
mov [ebx+0A8Ch] eax +
test eax eax +
jnz loc_1014BF5  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_1014A1B  +
test byte ptr [eax+1Ch] 1 +
jz loc_1014A1B  +
push offset dword_1002D04  +
push 10h  +
jmp loc_1014A10  +
and dword ptr [ebp-10h] 0 +
jmp loc_1014A5C  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 244h +
mov eax dword_1030118 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
mov ebx [ebp+arg_4] +
push esi  +
push edi  +
mov esi ecx +
xor ecx ecx +
xor eax eax +
mov [ebp+Rect.left] ecx +
lea edi [ebp+Rect.top] +
stos   +
stos   +
stos   +
mov [ebp+hObject] ecx +
mov [ebp+var_210] 80004005h +
cmp ebx ecx +
jz loc_1014C49  +
mov [ebx] ecx +
xor edi edi +
inc edi  +
mov [ebp+pInputs.type] ecx +
mov dword ptr [ebp+pInputs.anonymous_0] edi +
mov dword ptr [ebp+pInputs.anonymous_0+4] ecx +
mov dword ptr [ebp+pInputs.anonymous_0+8] ecx +
mov dword ptr [ebp+pInputs.anonymous_0+0Ch] edi +
mov dword ptr [ebp+pInputs.anonymous_0+10h] ecx +
mov dword ptr [ebp+pInputs.anonymous_0+14h] ecx +
cmp [ebp+arg_0] ecx +
jz loc_1014DA0  +
push offset Name  +
push ecx  +
push 2  +
call ds:OpenEventW  +
mov ebx eax +
test ebx ebx +
jnz loc_1014CC4  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_1014F31  +
test byte ptr [eax+1Ch] 1 +
jz loc_1014F31  +
push offset dword_1002D04  +
push 1Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10054B7  +
jmp loc_1014F31  +
push ebx  +
call ds:SetEvent  +
test eax eax +
jnz loc_1014CF2  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_1014F31  +
test byte ptr [eax+1Ch] 1 +
jz loc_1014F31  +
push offset dword_1002D04  +
push 1Ch  +
jmp loc_1014CB4  +
mov esi ds:SendInput +
push 1Ch  +
lea eax [ebp+pInputs] +
push eax  +
push edi  +
call esi  +
test eax eax +
jnz loc_1014D2B  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_1014F31  +
test byte ptr [eax+1Ch] 1 +
jz loc_1014F31  +
push offset dword_1002D04  +
push 1Dh  +
jmp loc_1014CB4  +
push 0  +
push offset ClassName  +
call ds:FindWindowW  +
test eax eax +
jz loc_1014D94  +
lea ecx [ebp+Rect] +
push ecx  +
push eax  +
call ds:GetWindowRect  +
test eax eax +
jz loc_1014D94  +
mov eax [ebp+Rect.top] +
add eax 5 +
push eax  +
mov eax [ebp+Rect.left] +
add eax 5 +
push eax  +
call ds:SetCursorPos  +
push 1Ch  +
lea eax [ebp+pInputs] +
push eax  +
push edi  +
mov dword ptr [ebp+pInputs.anonymous_0+0Ch] 20h +
call esi  +
push 1Ch  +
lea eax [ebp+pInputs] +
push eax  +
push edi  +
mov dword ptr [ebp+pInputs.anonymous_0+0Ch] 40h +
call esi  +
and [ebp+var_210] 0 +
jmp loc_1014F31  +
mov eax [esi+0A98h] +
cmp eax 2 +
jz loc_1014DDE  +
cmp eax 3 +
jz loc_1014DDE  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_1014DD4  +
test byte ptr [eax+1Ch] 1 +
jz loc_1014DD4  +
push offset dword_1002D04  +
push 1Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10054B7  +
mov eax 80004005h +
jmp loc_1014F42  +
mov ecx [esi+0A90h] +
call sub_100A6DB  +
mov [ebp+var_218] eax +
mov [esi+0A98h] edi +
test ebx ebx +
jz loc_1014DFB  +
mov [ebx] eax +
cmp dword ptr [esi+4] 0 +
jz loc_1014E4A  +
push edi  +
call sub_10122A2  +
mov [ebp+var_210] eax +
test eax eax +
jge loc_1014E4A  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_1014F17  +
test byte ptr [eax+1Ch] 1 +
jz loc_1014F17  +
movzx ecx word ptr [ebp+var_210] +
push ecx  +
push offset dword_1002D04  +
push 1Fh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10062BE  +
jmp loc_1014F17  +
cmp [ebp+var_218] 0 +
jnz loc_1014E82  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_1014E77  +
test byte ptr [eax+1Ch] 4 +
jz loc_1014E77  +
push offset dword_1002D04  +
push 20h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10054B7  +
mov [ebp+var_210] edi +
jmp loc_1014F17  +
mov ecx [esi+0A94h] +
lea eax [ebp+FileName] +
push eax  +
mov ebx 104h +
push ebx  +
lea eax [esi+670h] +
push eax  +
push esi  +
call sub_100FE55  +
mov [ebp+var_210] eax +
test eax eax +
jge loc_1014ED2  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_1014F17  +
test byte ptr [eax+1Ch] 1 +
jz loc_1014F17  +
movzx ecx word ptr [ebp+var_210] +
push ecx  +
push offset dword_1002D04  +
push 21h  +
jmp loc_1014E3A  +
cmp dword ptr [esi+4] 0 +
jnz loc_1014EEB  +
cmp dword ptr [esi+30h] 0 +
jz loc_1014EEB  +
lea eax [ebp+FileName] +
push eax  +
call ds:DeleteFileW  +
lea eax [esi+44h] +
push eax  +
push ebx  +
lea edi [esi+878h] +
push edi  +
call sub_10066E4  +
test eax eax +
jge loc_1014F10  +
push 208h  +
push 0  +
push edi  +
call memset  +
add esp 0Ch +
and [ebp+var_210] 0 +
add esi 670h +
xor eax eax +
cmp ax [esi] +
jz loc_1014F3C  +
push eax  +
push esi  +
call sub_101466E  +
mov ebx [ebp+hObject] +
test ebx ebx +
jz loc_1014F3C  +
push ebx  +
call ds:CloseHandle  +
mov eax [ebp+var_210] +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_101BC5D  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov esi ecx +
xor edi edi +
call sub_10144C5  +
test eax eax +
jz loc_1014F83  +
add esi 878h +
push esi  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_10066E4  +
test eax eax +
jl loc_1014F83  +
inc edi  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
add ecx 878h +
push 104h  +
push ecx  +
xor esi esi +
call sub_10066E4  +
test eax eax +
jl loc_1014FB1  +
inc esi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+8] +
push 0  +
push 1  +
call sub_1014C03  +
test eax eax +
jge loc_1014FFC  +
mov ecx off_1030000 +
cmp ecx offset off_1030000 +
jz loc_1014FFC  +
test byte ptr [ecx+1Ch] 1 +
jz loc_1014FFC  +
movzx eax ax +
push eax  +
push offset dword_1002D04  +
push 29h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10062BE  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
cmp dword ptr [edi+2Ch] 0 +
mov esi ecx +
jnz loc_101501E  +
xor eax eax +
jmp loc_10150DB  +
push dword ptr [edi+38h]  +
push 0  +
push 100000h  +
call ds:OpenProcess  +
mov [esi+0A84h] eax +
test eax eax +
jnz loc_101507B  +
call ds:GetLastError  +
test eax eax +
jle loc_101504C  +
and eax 0FFFFh +
or eax 80070000h +
mov esi eax +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_10150D9  +
test byte ptr [eax+1Ch] 1 +
jz loc_10150D9  +
push dword ptr [edi+38h]  +
movzx ecx si +
push ecx  +
push offset dword_1002D04  +
push 2Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10105FD  +
jmp loc_10150D9  +
push 8  +
push 0FFFFFFFFh  +
push esi  +
push offset loc_1014FBD  +
push eax  +
add esi 0A88h +
push esi  +
call ds:RegisterWaitForSingleObject  +
test eax eax +
jnz loc_10150D7  +
call ds:GetLastError  +
test eax eax +
jle loc_10150AB  +
and eax 0FFFFh +
or eax 80070000h +
mov esi eax +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_10150D9  +
test byte ptr [eax+1Ch] 1 +
jz loc_10150D9  +
movzx ecx si +
push ecx  +
push offset dword_1002D04  +
push 2Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10062BE  +
jmp loc_10150D9  +
xor esi esi +
mov eax esi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
cmp dword ptr [esi+0A98h] 1 +
push edi  +
jz loc_1015123  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_1015119  +
test byte ptr [eax+1Ch] 1 +
jz loc_1015119  +
push offset dword_1002D04  +
push 18h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10054B7  +
mov edi 800700B7h +
jmp loc_1015210  +
push ebx  +
xor ebx ebx +
push ebx  +
push ebx  +
push dword ptr [esi+4]  +
push esi  +
call sub_1006544  +
mov edi eax +
cmp edi ebx +
jl loc_101520F  +
xor eax eax +
cmp ax [esi+44h] +
jnz loc_1015171  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_1015167  +
test byte ptr [eax+1Ch] 1 +
jz loc_1015167  +
push offset dword_1002D04  +
push 19h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10054B7  +
mov edi 80070057h +
jmp loc_101520F  +
mov dword ptr [esi+0A98h] 2 +
mov [esi+0A80h] ebx +
cmp [esi+4] ebx +
jz loc_10151BE  +
mov ecx [esi+0A8Ch] +
push ebx  +
call sub_1013DDA  +
mov edi eax +
cmp edi ebx +
jge loc_10151BE  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_10151EC  +
test byte ptr [eax+1Ch] 1 +
jz loc_10151EC  +
push offset dword_1002D04  +
push 1Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10054B7  +
jmp loc_10151EC  +
push esi  +
mov ecx esi +
call sub_1015005  +
mov edi eax +
cmp edi ebx +
jl loc_10151F0  +
mov ecx [esi+0A90h] +
lea eax [esi+670h] +
push eax  +
call sub_100B57C  +
mov edi eax +
cmp edi ebx +
jl loc_10151F0  +
inc dword ptr [esi+454h]  +
xor edi edi +
cmp edi ebx +
jge loc_101520F  +
mov ecx [esi+0A90h] +
call sub_100A6DB  +
xor eax eax +
inc eax  +
mov [esi+0A98h] eax +
cmp [esi+4] ebx +
jz loc_101520F  +
push eax  +
call sub_10122A2  +
pop ebx  +
mov eax edi +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov edx [eax] +
mov ecx [ebp+arg_4] +
cmp edx [ecx] +
jnz loc_1015248  +
mov edx [eax+4] +
cmp edx [ecx+4] +
jnz loc_1015248  +
mov edx [eax+8] +
cmp edx [ecx+8] +
jnz loc_1015248  +
mov eax [eax+0Ch] +
cmp eax [ecx+0Ch] +
jnz loc_1015248  +
xor eax eax +
inc eax  +
jmp loc_101524A  +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
mul  [ebp+arg_8] +
test edx edx +
ja loc_1015267  +
cmp eax 0FFFFFFFFh +
jbe loc_101526E  +
mov eax 80070057h +
jmp loc_1015275  +
mov ecx [ebp+arg_0] +
mov [ecx] eax +
xor eax eax +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push [ebp+arg_4]  +
and [ebp+cb] 0 +
push [ebp+arg_0]  +
lea eax [ebp+cb] +
push eax  +
call sub_1015253  +
test eax eax +
jge loc_101529F  +
xor eax eax +
jmp locret_10152A8  +
push [ebp+cb]  +
call ds:CoTaskMemAlloc  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push [ebp+arg_8]  +
and [ebp+cb] 0 +
push [ebp+arg_4]  +
lea eax [ebp+cb] +
push eax  +
call sub_1015253  +
test eax eax +
jge loc_10152D2  +
xor eax eax +
jmp locret_10152DE  +
push [ebp+cb]  +
push [ebp+pv]  +
call ds:CoTaskMemRealloc  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_0]  +
call ds:__imp_malloc  +
pop ecx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_0]  +
call ds:__imp_free  +
pop ecx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+lpString]  +
call ds:lstrlenW  +
lea eax [eax+eax+2] +
push eax  +
push [ebp+lpString]  +
mov eax [ebp+arg_4] +
add eax eax +
push eax  +
push [ebp+arg_0]  +
call memcpy_s  +
add esp 10h +
neg eax  +
sbb eax eax +
inc eax  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov [ebp+8] eax +
push offset dword_102D180  +
lea eax [ebp+8] +
push eax  +
call _CxxThrowException  +
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_10153A3  +
cmp eax 0Ch +
jz loc_101539C  +
cmp eax 16h +
jz loc_1015395  +
cmp eax 22h +
jz loc_1015395  +
cmp eax 50h +
jz loc_10153A3  +
push 80004005h  +
call loc_101534C  +
push 80070057h  +
jmp loc_1015390  +
push 8007000Eh  +
jmp loc_1015390  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call memcpy_s  +
add esp 10h +
push eax  +
call sub_101536B  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call wcscpy_s  +
add esp 0Ch +
push eax  +
call sub_101536B  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call wcsncpy_s  +
add esp 10h +
push eax  +
call sub_101536B  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call wcscat_s  +
add esp 0Ch +
push eax  +
call sub_101536B  +
pop ebp  +
retn   +
***
mov edi edi +
push ebx  +
push esi  +
push edi  +
mov esi ecx +
push esi  +
call sub_10062EA  +
mov edi 208h +
push edi  +
xor ebx ebx +
lea eax [esi+468h] +
push ebx  +
push eax  +
call memset  +
push edi  +
lea eax [esi+670h] +
push ebx  +
push eax  +
call memset  +
push edi  +
lea eax [esi+878h] +
push ebx  +
push eax  +
call memset  +
add esp 24h +
pop edi  +
mov [esi+454h] ebx +
mov [esi+0A8Ch] ebx +
mov [esi+0A90h] ebx +
mov [esi+0A94h] ebx +
mov [esi+0A84h] ebx +
mov [esi+0A88h] ebx +
mov [esi+0A80h] ebx +
mov dword ptr [esi+0A98h] 1 +
mov eax esi +
pop esi  +
pop ebx  +
retn   +
***
mov edi edi +
push edi  +
mov edx ecx +
push 6  +
pop ecx  +
xor eax eax +
mov edi edx +
stos   +
mov eax edx +
pop edi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
xor ecx ecx +
xor edx edx +
mov [eax+10h] ecx +
mov [eax] ecx +
mov byte ptr [eax+18h] 1 +
mov [eax+19h] cl +
mov [eax+1Ah] dx +
mov [eax+1Ch] ecx +
pop ebp  +
retn 4  +
***
call __SEH_prolog4  +
and [ebp+ms_exc.disabled] 0 +
push ecx  +
call ds:InitializeCriticalSection  +
and [ebp+var_1C] 0 +
jmp loc_1015538  +
mov eax [ebp-14h] +
mov eax [eax] +
mov eax [eax] +
xor ecx ecx +
cmp eax 0C0000017h +
setz cl  +
mov eax ecx +
retn   +
mov esp [ebp-18h] +
mov dword ptr [ebp-1Ch] 8007000Eh +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov eax [ebp+var_1C] +
call __SEH_epilog4  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax [ebp+10h] +
xor edx edx +
push ebx  +
mov [eax] edx +
mov eax [ebp+8] +
sub eax 4 +
push esi  +
mov esi [ebp+0Ch] +
push edi  +
mov edi esi +
jz loc_101557C  +
dec eax  +
jz loc_1015573  +
push 57h  +
pop eax  +
jmp loc_10155EA  +
xor ebx ebx +
xor eax eax +
mov [ebp+0Fh] al +
jmp loc_10155A2  +
push dword ptr [ebp+14h]  +
call ds:GetTraceLoggerHandle  +
mov ebx eax +
push edx  +
push ebx  +
mov [ebp-4] edx +
call ds:GetTraceEnableLevel  +
push dword ptr [ebp-4]  +
mov [ebp+0Fh] al +
push ebx  +
call ds:GetTraceEnableFlags  +
mov edx [ebp-4] +
movzx ecx word ptr [esi+1Ah] +
test cl 1 +
jz loc_10155CB  +
cmp dword ptr [esi+10h] 0 +
jz loc_10155CB  +
mov ecx [esi+10h] +
mov [ecx] ebx +
mov [ecx+4] edx +
movzx ecx byte ptr [ebp+0Fh] +
mov edx [esi+10h] +
mov [edx+0Ch] ecx +
mov ecx [esi+10h] +
mov [ecx+8] eax +
jmp loc_10155E8  +
test cl 2 +
jz loc_10155D9  +
mov esi [esi+10h] +
test esi esi +
jz loc_10155D9  +
mov edi esi +
mov cl [ebp+0Fh] +
mov [edi+10h] ebx +
mov [edi+14h] edx +
mov [edi+19h] cl +
mov [edi+1Ch] eax +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_10154FD  +
test eax eax +
jl loc_1015608  +
mov byte ptr [esi+18h] 1 +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push esi  +
mov esi off_1030000 +
push edi  +
mov edi offset dword_1036388 +
jmp loc_101564E  +
mov eax [edi] +
and [ebp+var_4] 0 +
lea ecx [esi+8] +
push ecx  +
push 0  +
push 0  +
lea ecx [ebp+var_8] +
push ecx  +
push 1  +
push eax  +
push esi  +
push offset loc_101554D  +
add edi 4 +
mov [ebp+var_8] eax +
call ds:RegisterTraceGuidsW  +
mov esi [esi] +
test esi esi +
jnz loc_1015625  +
pop edi  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push esi  +
mov esi off_1030000 +
push edi  +
mov edi offset off_1030000 +
cmp esi edi +
jz loc_101569A  +
jmp loc_1015690  +
mov eax [esi+8] +
mov ecx [esi+0Ch] +
mov edx eax +
or edx ecx +
jz loc_101568E  +
push ecx  +
push eax  +
call ds:UnregisterTraceGuids  +
and dword ptr [esi+8] 0 +
and dword ptr [esi+0Ch] 0 +
mov esi [esi] +
test esi esi +
jnz loc_1015672  +
mov off_1030000 edi +
pop edi  +
pop esi  +
retn   +
***
cmp dword ptr [ecx+44h] 0 +
jnz loc_10156AC  +
push 32h  +
pop eax  +
retn   +
push 6Ah  +
push 75h  +
push 0  +
call sub_10064B6  +
xor eax eax +
retn   +
***
call ds:GetLastError  +
test eax eax +
jle locret_10156D3  +
and eax 0FFFFh +
or eax 80070000h +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jle loc_10156EF  +
and eax 0FFFFh +
or eax 80070000h +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
and [ebp+var_4] 0 +
lea eax [ebp+var_8] +
push eax  +
lea eax [ebp+var_4] +
push eax  +
push 0  +
push 18h  +
push offset aDisableuar  +
push offset aSoftwarePolici  +
push 80000002h  +
mov [ebp+var_8] 4 +
call ds:RegGetValueW  +
test eax eax +
jnz loc_1015735  +
inc eax  +
cmp [ebp+var_4] eax +
jz locret_1015737  +
xor eax eax +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
and [ebp+pNumArgs] 0 +
and [ebp+var_8] 0 +
lea eax [ebp+pNumArgs] +
push eax  +
push [ebp+hMem]  +
call ds:CommandLineToArgvW  +
mov [ebp+hMem] eax +
test eax eax +
jnz loc_1015792  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_101586B  +
test byte ptr [eax+1Ch] 1 +
jz loc_101586B  +
push offset dword_1002DE4  +
push 35h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10054B7  +
jmp loc_101586B  +
push ebx  +
xor ebx ebx +
inc ebx  +
cmp [ebp+pNumArgs] ebx +
jle loc_1015861  +
push esi  +
mov esi ds:_wcsicmp +
push edi  +
mov eax [ebp+hMem] +
mov ecx [eax+ebx*4] +
mov eax ecx +
lea edi [eax+2] +
mov dx [eax] +
inc eax  +
inc eax  +
test dx dx +
jnz loc_10157B2  +
sub eax edi +
sar eax 1 +
cmp eax 2 +
jb loc_1015817  +
movzx eax word ptr [ecx] +
cmp ax 2Dh +
jz loc_10157D4  +
cmp ax 2Fh +
jnz loc_1015832  +
lea edi [ecx+2] +
push offset aEmbedding  +
push edi  +
call esi  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1015858  +
push offset aAutomation  +
push edi  +
call esi  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1015858  +
push offset aRegserver  +
push edi  +
call esi  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1015858  +
push offset aUnregserver  +
push edi  +
call esi  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1015858  +
inc ebx  +
cmp ebx [ebp+pNumArgs] +
jl loc_10157A7  +
jmp loc_101585F  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_101585F  +
test byte ptr [eax+1Ch] 1 +
jz loc_101585F  +
push offset dword_1002DE4  +
push 36h  +
jmp loc_101584B  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_101585F  +
test byte ptr [eax+1Ch] 1 +
jz loc_101585F  +
push offset dword_1002DE4  +
push 37h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10054B7  +
jmp loc_101585F  +
mov [ebp+var_8] 1 +
pop edi  +
pop esi  +
push [ebp+hMem]  +
call ds:LocalFree  +
pop ebx  +
mov eax [ebp+var_8] +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1Ch +
push esi  +
mov esi ds:GetMessageW +
push edi  +
xor edi edi +
jmp loc_101589F  +
lea eax [ebp+Msg] +
push eax  +
call ds:TranslateMessage  +
lea eax [ebp+Msg] +
push eax  +
call ds:DispatchMessageW  +
push edi  +
push edi  +
push edi  +
lea eax [ebp+Msg] +
push eax  +
call esi  +
test eax eax +
jg loc_101588B  +
pop edi  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+10h] +
test eax eax +
jnz loc_10158C8  +
mov eax 80004003h +
jmp loc_10158D0  +
and dword ptr [eax] 0 +
mov eax 80040110h +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebx  +
push esi  +
push edi  +
mov edi ds:WaitForSingleObject +
mov esi ecx +
xor ebx ebx +
push 0FFFFFFFFh  +
push dword ptr [esi+30h]  +
call edi  +
push dword ptr [esi+34h]  +
mov [esi+3Dh] bl +
push dword ptr [esi+30h]  +
call edi  +
test eax eax +
jz loc_10158EF  +
cmp [esi+3Dh] bl +
jnz loc_10158E8  +
cmp [esi+8] ebx +
jnz loc_10158E8  +
push dword ptr [esi+30h]  +
call ds:CloseHandle  +
push ebx  +
push ebx  +
push 12h  +
push dword ptr [esi+2Ch]  +
call ds:PostThreadMessageW  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax+14h] +
test eax eax +
jz loc_101593D  +
push eax  +
call ds:CoRevokeClassObject  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+pUnk] 0 +
push esi  +
mov esi [ebp+arg_0] +
mov eax [esi+8] +
test eax eax +
jz loc_1015997  +
push edi  +
lea ecx [ebp+pUnk] +
push ecx  +
push offset dword_1002F34  +
push dword ptr [esi+0Ch]  +
call eax  +
mov edi eax +
test edi edi +
jl loc_1015987  +
lea eax [esi+14h] +
push eax  +
push [ebp+flags]  +
push [ebp+dwClsContext]  +
push [ebp+pUnk]  +
push dword ptr [esi]  +
call ds:CoRegisterClassObject  +
mov edi eax +
mov eax [ebp+pUnk] +
test eax eax +
jz loc_1015994  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax edi +
pop edi  +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push esi  +
mov esi ecx +
cmp dword ptr [esi] 0 +
jz loc_10159E3  +
push ebx  +
mov ebx [esi+8] +
cmp ebx [esi+0Ch] +
jnb loc_10159D5  +
push edi  +
mov edi [ebx] +
test edi edi +
jz loc_10159CC  +
mov eax [edi+10h] +
test eax eax +
jz loc_10159C8  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
and dword ptr [edi+10h] 0 +
add ebx 4 +
cmp ebx [esi+0Ch] +
jb loc_10159B5  +
pop edi  +
lea eax [esi+10h] +
push eax  +
call ds:DeleteCriticalSection  +
and dword ptr [esi] 0 +
pop ebx  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi ecx +
mov esi [edi+8] +
jmp loc_1015A07  +
mov eax [esi] +
test eax eax +
jz loc_1015A04  +
push [ebp+arg_0]  +
call dword ptr [eax+20h]  +
add esi 4 +
cmp esi [edi+0Ch] +
jb loc_10159F8  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_4] +
test ebx ebx +
jz loc_1015A65  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
lea edi [ebx-1] +
xor eax eax +
test edi edi +
jbe loc_1015A5D  +
mov edx [ebp+arg_8] +
movzx ecx word ptr [edx] +
test cx cx +
jz loc_1015A5D  +
mov [esi+eax*2] cx +
cmp word ptr [edx] 27h +
jnz loc_1015A56  +
lea ecx [ebx-2] +
cmp eax ecx +
jnb loc_1015A56  +
push 27h  +
inc eax  +
pop ecx  +
mov [esi+eax*2] cx +
inc edx  +
inc edx  +
inc eax  +
cmp eax edi +
jb loc_1015A35  +
xor ecx ecx +
pop edi  +
mov [esi+eax*2] cx +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
test edi edi +
jz loc_1015AAB  +
mov esi ds:CharNextW +
cmp word ptr [edi] 0 +
jz loc_1015AAB  +
mov eax [ebp+lpsz] +
jmp loc_1015A9E  +
movzx ecx word ptr [eax] +
test cx cx +
jz loc_1015AA2  +
cmp [edi] cx +
jz loc_1015AB3  +
push eax  +
call esi  +
test eax eax +
jnz loc_1015A8E  +
push edi  +
call esi  +
mov edi eax +
test edi edi +
jnz loc_1015A83  +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
push edi  +
call esi  +
jmp loc_1015AAD  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_0] +
movzx eax word ptr [ebx] +
push esi  +
mov esi ds:CharUpperW +
push edi  +
push eax  +
call esi  +
movzx edi ax +
mov eax [ebp+lpsz] +
movzx eax word ptr [eax] +
push eax  +
call esi  +
movzx eax ax +
test di di +
jz loc_1015B37  +
cmp di ax +
jnz loc_1015B26  +
cmp di 20h +
jz loc_1015B26  +
cmp di 9 +
jz loc_1015B26  +
mov edi ds:CharNextW +
push ebx  +
call edi  +
push [ebp+lpsz]  +
mov ebx eax +
call edi  +
mov [ebp+lpsz] eax +
movzx eax word ptr [ebx] +
push eax  +
call esi  +
movzx edi ax +
mov eax [ebp+lpsz] +
movzx eax word ptr [eax] +
push eax  +
call esi  +
movzx eax ax +
test di di +
jnz loc_1015AE8  +
test di di +
jz loc_1015B37  +
cmp di 20h +
jz loc_1015B37  +
cmp di 9 +
jnz loc_1015B48  +
test ax ax +
jz loc_1015B53  +
cmp ax 20h +
jz loc_1015B53  +
cmp ax 9 +
jz loc_1015B53  +
cmp di ax +
sbb eax eax +
and eax 0FFFFFFFEh +
inc eax  +
jmp loc_1015B55  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
cmp dword ptr [esi+4] 0 +
jnz loc_1015BB3  +
cmp dword ptr [esi+8] 0 +
jnz loc_1015BB3  +
push offset ModuleName  +
call ds:GetModuleHandleW  +
test eax eax +
jz loc_1015B95  +
push offset aRegdeletekeyex  +
push eax  +
call ds:GetProcAddress  +
mov [esi+4] eax +
jmp loc_1015BB3  +
push offset aAdvapi32_dll  +
call ds:LoadLibraryW  +
test eax eax +
jz loc_1015BB3  +
push offset aRegdeletekeyw  +
push eax  +
call ds:GetProcAddress  +
mov [esi+8] eax +
mov eax [esi+4] +
test eax eax +
jz loc_1015BC7  +
push 0  +
push 0  +
push [ebp+arg_0]  +
push dword ptr [esi]  +
call eax  +
jmp loc_1015BDD  +
mov eax [esi+8] +
test eax eax +
jz loc_1015BD7  +
push [ebp+arg_0]  +
push dword ptr [esi]  +
call eax  +
jmp loc_1015BDD  +
call ds:GetLastError  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov ecx [esi] +
xor eax eax +
test ecx ecx +
jz loc_1015BFE  +
push ecx  +
call ds:RegCloseKey  +
and dword ptr [esi] 0 +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
and [ebp+phkResult] 0 +
lea eax [ebp+dwDisposition] +
push eax  +
lea eax [ebp+phkResult] +
push eax  +
push [ebp+dwDisposition]  +
mov esi ecx +
push [ebp+samDesired]  +
push [ebp+dwOptions]  +
push [ebp+lpClass]  +
push 0  +
push [ebp+lpSubKey]  +
push [ebp+hKey]  +
call ds:RegCreateKeyExW  +
mov ecx [ebp+arg_18] +
test ecx ecx +
jz loc_1015C40  +
mov edx [ebp+dwDisposition] +
mov [ecx] edx +
test eax eax +
jnz loc_1015C50  +
mov ecx esi +
call sub_1015BE7  +
mov ecx [ebp+phkResult] +
mov [esi] ecx +
pop esi  +
leave   +
retn 1Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+phkResult] 0 +
push esi  +
lea eax [ebp+phkResult] +
push eax  +
push [ebp+samDesired]  +
mov esi ecx +
push 0  +
push [ebp+lpSubKey]  +
push [ebp+hKey]  +
call ds:RegOpenKeyExW  +
test eax eax +
jnz loc_1015C8C  +
mov ecx esi +
call sub_1015BE7  +
mov ecx [ebp+phkResult] +
mov [esi] ecx +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 4  +
lea eax [ebp+Data] +
push eax  +
push 4  +
push 0  +
push [ebp+lpValueName]  +
push dword ptr [ecx]  +
call ds:RegSetValueExW  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+lpData] 0 +
push esi  +
mov esi ecx +
jnz loc_1015CD1  +
push 80004005h  +
call loc_101534C  +
push [ebp+lpData]  +
call ds:lstrlenW  +
lea eax [eax+eax+2] +
push eax  +
push [ebp+lpData]  +
push [ebp+dwType]  +
push 0  +
push [ebp+lpValueName]  +
push dword ptr [esi]  +
call ds:RegSetValueExW  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+lpData] +
push edi  +
mov ebx ecx +
test esi esi +
jnz loc_1015D17  +
push 80004005h  +
call loc_101534C  +
xor edi edi +
push esi  +
call ds:lstrlenW  +
inc eax  +
lea ecx [eax+eax] +
add esi ecx +
add edi ecx +
cmp eax 1 +
jnz loc_1015D19  +
push edi  +
push [ebp+lpData]  +
push 7  +
push 0  +
push [ebp+lpValueName]  +
push dword ptr [ebx]  +
call ds:RegSetValueExW  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+lpString2]  +
push [ebp+lpString1]  +
call ds:lstrcmpiW  +
neg eax  +
sbb al al +
inc al  +
pop ebp  +
retn 8  +
***
mov eax [ecx] +
push 27h  +
pop ecx  +
cmp cx [eax] +
jnz loc_1015D89  +
push eax  +
call ds:CharNextW  +
push 27h  +
pop ecx  +
cmp cx [eax] +
jz loc_1015D89  +
xor eax eax +
inc eax  +
retn   +
xor eax eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
cmp eax 64h +
push esi  +
mov esi ecx +
jge loc_1015DA6  +
mov eax 3E8h +
and dword ptr [esi] 0 +
push 2  +
push eax  +
mov [esi+4] eax +
call sub_101527E  +
mov [esi+8] eax +
test eax eax +
jz loc_1015DC0  +
xor ecx ecx +
mov [eax] cx +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
adc eax offset CoTaskMemFree +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_4] +
push esi  +
mov esi ecx +
mov eax [esi] +
lea ecx [eax+ebx+1] +
cmp ecx eax +
push edi  +
jle loc_1015E60  +
cmp ecx ebx +
jle loc_1015E60  +
mov edi [esi+4] +
cmp ecx edi +
jl loc_1015E20  +
cmp edi 3FFFFFFFh +
jg loc_1015E60  +
add edi edi +
cmp ecx edi +
jge loc_1015DFD  +
push 2  +
push edi  +
push dword ptr [esi+8]  +
call sub_10152B1  +
test eax eax +
jz loc_1015E60  +
mov [esi+8] eax +
mov [esi+4] edi +
mov eax [esi] +
test eax eax +
jl loc_1015E60  +
mov edx [esi+4] +
cmp eax edx +
jge loc_1015E60  +
mov ecx edx +
sub ecx eax +
cmp ecx edx +
jg loc_1015E60  +
lea edx [ebx+ebx] +
push edx  +
push [ebp+arg_0]  +
add ecx ecx +
push ecx  +
mov ecx [esi+8] +
lea eax [ecx+eax*2] +
push eax  +
call sub_10153AC  +
add [esi] ebx +
mov eax [esi] +
mov ecx [esi+8] +
xor edx edx +
mov [ecx+eax*2] dx +
xor eax eax +
add esp 10h +
inc eax  +
jmp loc_1015E62  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
test byte ptr dword_1036A64 1 +
jnz loc_1015ED1  +
or dword_1036A64 1 +
push 8  +
pop eax  +
mov word_1036A48 ax +
mov eax 4008h +
push 13h  +
mov word_1036A50 ax +
pop eax  +
push 11h  +
mov word_1036A58 ax +
pop eax  +
mov lpString2 offset aS +
mov dword_1036A4C offset aM +
mov dword_1036A54 offset aD_0 +
mov dword_1036A5C offset aB +
mov word_1036A60 ax +
push esi  +
xor esi esi +
push lpString2[esi*8]  +
push [ebp+lpString1]  +
call ds:lstrcmpiW  +
test eax eax +
jz loc_1015EF5  +
inc esi  +
cmp esi 4 +
jb loc_1015ED4  +
xor eax eax +
pop esi  +
pop ebp  +
retn 8  +
mov ax word_1036A48[esi*8] +
mov ecx [ebp+arg_4] +
mov [ecx] ax +
xor eax eax +
inc eax  +
jmp loc_1015EF0  +
***
mov edi edi +
push ebp  +
mov ebp esp +
movzx eax [ebp+arg_0] +
cmp eax 30h +
jl loc_1015F41  +
cmp eax 39h +
jle loc_1015F3C  +
cmp eax 40h +
jle loc_1015F41  +
cmp eax 46h +
jle loc_1015F37  +
lea ecx [eax-61h] +
cmp ecx 5 +
ja loc_1015F41  +
add eax 0FFFFFFA9h +
jmp loc_1015F43  +
add eax 0FFFFFFC9h +
jmp loc_1015F43  +
add eax 0FFFFFFD0h +
jmp loc_1015F43  +
xor al al +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
xor esi esi +
push ds:off_1002FD8[esi*8]  +
push [ebp+lpString1]  +
call ds:lstrcmpiW  +
test eax eax +
jz loc_1015F75  +
inc esi  +
cmp esi 0Eh +
jb loc_1015F54  +
xor eax eax +
pop esi  +
pop ebp  +
retn 4  +
mov eax ds:dword_1002FDC[esi*8] +
jmp loc_1015F70  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+lpsz] +
push esi  +
xor esi esi +
test eax eax +
jnz loc_1015FA1  +
jmp loc_1015FAF  +
cmp cx [ebp+arg_4] +
jz loc_1015FAB  +
push eax  +
call ds:CharNextW  +
movzx ecx word ptr [eax] +
test cx cx +
jnz loc_1015F94  +
jmp loc_1015FAD  +
mov esi eax +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
movzx eax [ebp+arg_0] +
cmp eax 9 +
jl loc_1015FDB  +
cmp eax 0Ah +
jle loc_1015FD6  +
cmp eax 0Dh +
jz loc_1015FD6  +
cmp eax 20h +
jnz loc_1015FDB  +
xor eax eax +
inc eax  +
jmp loc_1015FDD  +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
jmp loc_1015FF9  +
push dword ptr [esi]  +
call ds:CharNextW  +
mov [esi] eax +
mov ecx esi +
mov eax [esi] +
movzx eax word ptr [eax] +
push eax  +
call sub_1015FB9  +
test eax eax +
jnz loc_1015FED  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ecx +
call sub_1015FE6  +
mov eax [esi] +
movzx ecx word ptr [eax] +
xor edx edx +
cmp dx cx +
jnz loc_1016033  +
mov eax 80020009h +
jmp loc_1016113  +
push ebx  +
push edi  +
mov edi [ebp+arg_0] +
push 27h  +
pop edx  +
mov [ebp+var_4] edi +
cmp dx cx +
jnz loc_10160C1  +
mov ebx ds:CharNextW +
push eax  +
call ebx  +
mov [esi] eax +
jmp loc_10160A4  +
mov ecx esi +
call sub_1015D6C  +
test eax eax +
jnz loc_10160AB  +
mov eax [esi] +
push 27h  +
pop ecx  +
cmp cx [eax] +
jnz loc_101606A  +
push eax  +
call ebx  +
mov [esi] eax +
mov eax [esi] +
push eax  +
mov [ebp+arg_0] eax +
call ebx  +
mov edx [ebp+var_4] +
mov [esi] eax +
sub eax [ebp+arg_0] +
add edx 2000h +
sar eax 1 +
lea ecx [edi+eax*2+2] +
cmp ecx edx +
jnb loc_1016118  +
test eax eax +
jle loc_10160A2  +
mov ecx [ebp+arg_0] +
mov dx [ecx] +
mov [edi] dx +
inc edi  +
inc edi  +
inc ecx  +
inc ecx  +
dec eax  +
jnz loc_1016095  +
mov eax [esi] +
xor ecx ecx +
cmp cx [eax] +
jnz loc_1016050  +
mov eax [esi] +
xor ecx ecx +
cmp cx [eax] +
jz loc_1016118  +
xor eax eax +
mov [edi] ax +
push dword ptr [esi]  +
call ebx  +
mov [esi] eax +
jmp loc_101610F  +
mov ebx [esi] +
movzx eax word ptr [ebx] +
push eax  +
mov ecx esi +
call sub_1015FB9  +
test eax eax +
jnz loc_101610A  +
push ebx  +
call ds:CharNextW  +
mov edx [ebp+var_4] +
mov [esi] eax +
sub eax ebx +
sar eax 1 +
lea ecx [edi+eax*2+2] +
add edx 2000h +
cmp ecx edx +
jnb loc_1016118  +
test eax eax +
jle loc_1016101  +
mov cx [ebx] +
mov [edi] cx +
inc edi  +
inc edi  +
inc ebx  +
inc ebx  +
dec eax  +
jnz loc_10160F4  +
mov eax [esi] +
xor ecx ecx +
cmp cx [eax] +
jnz loc_10160C1  +
xor eax eax +
mov [edi] ax +
xor eax eax +
pop edi  +
pop ebx  +
pop esi  +
leave   +
retn 4  +
mov eax 80020009h +
jmp loc_1016111  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi offset off_10018A0 +
push dword ptr [esi]  +
push [ebp+lpString1]  +
call ds:lstrcmpiW  +
test eax eax +
jz loc_1016151  +
add esi 4 +
cmp esi offset dword_10018D0 +
jl loc_101612F  +
xor eax eax +
inc eax  +
pop esi  +
pop ebp  +
retn 4  +
xor eax eax +
jmp loc_101614C  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
xor eax eax +
push eax  +
push eax  +
push eax  +
push eax  +
push eax  +
push eax  +
push eax  +
lea ecx [ebp+cSubKeys] +
push ecx  +
push eax  +
push eax  +
push eax  +
push [ebp+hKey]  +
mov [ebp+cSubKeys] eax +
call ds:RegQueryInfoKeyW  +
test eax eax +
jz loc_1016184  +
xor eax eax +
jmp locret_101618D  +
xor eax eax +
cmp eax [ebp+cSubKeys] +
sbb eax eax +
neg eax  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax 2004h +
call __alloca_probe  +
mov eax dword_1030118 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
mov esi [ebp+arg_0] +
cmp word ptr [esi] 3Dh +
push edi  +
mov edi ecx +
jnz loc_10161EB  +
push esi  +
call sub_101600F  +
test eax eax +
jl loc_10161ED  +
mov ecx edi +
call sub_1015FE6  +
lea eax [ebp+var_2004] +
push eax  +
mov ecx edi +
call sub_101600F  +
test eax eax +
jl loc_10161ED  +
push esi  +
mov ecx edi +
call sub_101600F  +
test eax eax +
jl loc_10161ED  +
xor eax eax +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_101BC5D  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
mov edi [ebp+arg_0] +
test edi edi +
jnz loc_1016216  +
mov eax 80070057h +
jmp loc_101623E  +
xor eax eax +
push esi  +
mov esi [edi+8] +
inc eax  +
jmp loc_1016238  +
test eax eax +
jl loc_101623D  +
mov ecx [esi] +
test ecx ecx +
jz loc_1016235  +
push [ebp+flags]  +
push [ebp+dwClsContext]  +
push ecx  +
call sub_1015946  +
add esi 4 +
cmp esi [edi+0Ch] +
jb loc_101621F  +
pop esi  +
pop edi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
mov edi [ebp+arg_0] +
test edi edi +
jnz loc_101625C  +
mov eax 80070057h +
jmp loc_101627D  +
push esi  +
mov esi [edi+8] +
xor eax eax +
jmp loc_1016277  +
test eax eax +
jnz loc_101627C  +
mov ecx [esi] +
test ecx ecx +
jz loc_1016274  +
push ecx  +
call sub_1015927  +
add esi 4 +
cmp esi [edi+0Ch] +
jb loc_1016264  +
pop esi  +
pop edi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+lpArguments] +
push esi  +
test ebx ebx +
jnz loc_10162A4  +
push ebx  +
push ebx  +
push 1  +
push 0C0000005h  +
call ds:RaiseException  +
mov esi [ebx+8] +
test esi esi +
jz loc_10162C2  +
push edi  +
push dword ptr [esi+4]  +
call dword ptr [esi]  +
mov edi [esi+8] +
push esi  +
call sub_101B5A8  +
pop ecx  +
mov esi edi +
test edi edi +
jnz loc_10162AC  +
pop edi  +
and dword ptr [ebx+8] 0 +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
jmp loc_10162EC  +
mov eax [esi] +
mov ecx [eax] +
push eax  +
mov [esi] ecx +
call sub_10152FF  +
cmp dword ptr [esi] 0 +
jnz loc_10162E0  +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi] +
push edi  +
mov edi ds:__imp_free +
test eax eax +
jz loc_1016311  +
push eax  +
call edi  +
and dword ptr [esi] 0 +
pop ecx  +
mov eax [esi+4] +
test eax eax +
jz loc_1016320  +
push eax  +
call edi  +
and dword ptr [esi+4] 0 +
pop ecx  +
and dword ptr [esi+8] 0 +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
test eax eax +
jl loc_1016346  +
cmp eax [ecx+8] +
jge loc_1016346  +
mov ecx [ecx] +
lea eax [ecx+eax*4] +
pop ebp  +
retn 4  +
***
push 0  +
push 0  +
push 1  +
push 0C000008Ch  +
call ds:RaiseException  +
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
test eax eax +
jl loc_1016378  +
cmp eax [ecx+8] +
jge loc_1016378  +
mov ecx [ecx+4] +
lea eax [ecx+eax*4] +
pop ebp  +
retn 4  +
***
push 0  +
push 0  +
push 1  +
push 0C000008Ch  +
call ds:RaiseException  +
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov esi ecx +
xor edi edi +
cmp [esi+8] edi +
jle loc_10163B8  +
mov eax [ebp+arg_0] +
push dword ptr [eax]  +
mov eax [esi] +
push dword ptr [eax+edi*4]  +
call sub_1015D4C  +
test al al +
jnz loc_10163C1  +
inc edi  +
cmp edi [esi+8] +
jl loc_101639F  +
or eax 0FFFFFFFFh +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
mov eax edi +
jmp loc_10163BB  +
***
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_10152E7  +
test eax eax +
jnz loc_10163F5  +
push 8007000Eh  +
call loc_101534C  +
mov [esi] eax +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
lea eax [ebp+arg_4] +
push [ebp+arg_0]  +
push eax  +
call sub_1015253  +
test eax eax +
jge loc_101641F  +
push eax  +
call loc_101534C  +
mov eax [ebp+arg_4] +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
call sub_10158D9  +
xor eax eax +
pop ebp  +
retn 4  +
***
mov dword_1031644 esi +
mov ecx edx +
mov [esi+28h] eax +
call sub_10154FD  +
test eax eax +
jge loc_101649D  +
mov byte_1031638 1 +
jmp loc_10164A4  +
mov dword ptr [esi+4] 24h +
pop edi  +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
push edi  +
lea edi [esi+4] +
cmp dword ptr [edi] 0 +
jz loc_10164E6  +
cmp dword ptr [esi+0Ch] 0 +
jz loc_10164CC  +
push edi  +
call sub_1016287  +
and dword ptr [esi+0Ch] 0 +
mov eax [esi+28h] +
test eax eax +
jz loc_10164D9  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
add esi 10h +
push esi  +
call ds:DeleteCriticalSection  +
and dword ptr [edi] 0 +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 224h +
mov eax dword_1030118 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
push edi  +
mov eax ecx +
mov ecx [ebp+lpSubKey] +
push 2001Fh  +
push ecx  +
push dword ptr [eax]  +
xor esi esi +
mov [ebp+var_21C] ecx +
lea ecx [ebp+var_214] +
mov [ebp+var_218] eax +
mov [ebp+var_214] esi +
mov [ebp+var_210] esi +
mov [ebp+var_20C] esi +
call sub_1015C5A  +
mov edi eax +
cmp edi esi +
jz loc_101656A  +
lea ecx [ebp+var_214] +
call sub_1015BE7  +
mov eax edi +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_101BC5D  +
leave   +
retn 4  +
mov edi ds:RegEnumKeyExW +
jmp loc_1016588  +
lea eax [ebp+SubKey] +
push eax  +
lea ecx [ebp+var_214] +
call sub_10164F8  +
cmp eax esi +
jnz loc_10165D3  +
lea eax [ebp+var_224] +
push eax  +
push esi  +
push esi  +
push esi  +
lea eax [ebp+var_208] +
push eax  +
lea eax [ebp+SubKey] +
push eax  +
push esi  +
push [ebp+var_214]  +
mov [ebp+var_208] 100h +
call edi  +
test eax eax +
jz loc_1016572  +
lea ecx [ebp+var_214] +
call sub_1015BE7  +
push [ebp+var_21C]  +
mov ecx [ebp+var_218] +
call sub_1015B61  +
lea ecx [ebp+var_214] +
mov esi eax +
call sub_1015BE7  +
mov eax esi +
jmp loc_101655A  +
***
mov edi edi +
push esi  +
push edi  +
mov esi ecx +
xor edi edi +
cmp [esi+8] edi +
jle loc_101661F  +
push edi  +
mov ecx esi +
call loc_101632C  +
push dword ptr [eax]  +
call sub_101B5A8  +
pop ecx  +
push edi  +
mov ecx esi +
call loc_101635D  +
push dword ptr [eax]  +
call sub_101B5A8  +
inc edi  +
cmp edi [esi+8] +
pop ecx  +
jl loc_10165F9  +
mov ecx esi +
call sub_10162F8  +
pop edi  +
xor eax eax +
pop esi  +
retn   +
***
call __EH_prolog3  +
mov esi ecx +
xor eax eax +
cmp [ebp+8] eax +
jz loc_101666B  +
mov [ebp-10h] eax +
push dword ptr [ebp+8]  +
mov [ebp-4] eax +
call ds:lstrlenW  +
push eax  +
push dword ptr [ebp+8]  +
mov ecx esi +
call sub_1015DDB  +
lea ecx [ebp-10h] +
mov esi eax +
call sub_10162D9  +
mov eax esi +
call __EH_epilog3  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
add ecx 4 +
call sub_10165EC  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 240h +
mov eax dword_1030118 +
xor eax ebp +
mov [ebp+var_4] eax +
mov ecx [ebp+arg_4] +
mov eax [ebp+hModule] +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_8] +
mov [ebp+lpString] ecx +
mov ecx [ebp+arg_C] +
xor edx edx +
mov [ebp+var_240] edi +
mov [ebp+pptlib] ecx +
cmp edi edx +
jz loc_1016861  +
cmp ecx edx +
jz loc_1016861  +
mov [edi] edx +
mov [ecx] edx +
mov esi 104h +
push esi  +
lea ecx [ebp+szFile] +
push ecx  +
push eax  +
mov [ebp+var_238] edx +
call ds:GetModuleFileNameW  +
mov ebx eax +
test ebx ebx +
jnz loc_1016716  +
call sub_10156BF  +
mov esi eax +
lea ecx [ebp+var_238] +
call sub_10162D9  +
mov eax esi +
jmp loc_1016866  +
cmp ebx esi +
jnz loc_1016721  +
mov esi 8007007Ah +
jmp loc_1016704  +
xor esi esi +
lea eax [ebp+szFile] +
cmp [ebp+szFile] si +
jz loc_101675F  +
movzx ecx [ebp+szFile] +
movzx ecx cx +
cmp ecx 2Eh +
jz loc_101674A  +
cmp ecx 5Ch +
jnz loc_101674C  +
xor esi esi +
jmp loc_101674C  +
mov esi eax +
push eax  +
call ds:CharNextW  +
movzx ecx word ptr [eax] +
test cx cx +
jnz loc_1016739  +
test esi esi +
jnz loc_1016767  +
mov [ebp+var_230] eax +
jmp loc_101676D  +
mov [ebp+var_230] esi +
cmp [ebp+lpString] 0 +
jz loc_10167BB  +
push [ebp+lpString]  +
call ds:lstrlenW  +
lea ecx [eax+ebx] +
cmp ecx ebx +
jb loc_1016857  +
cmp ecx eax +
jb loc_1016857  +
mov eax 10Eh +
cmp ecx eax +
jnb loc_1016857  +
push [ebp+lpString]  +
sub eax ebx +
push eax  +
lea eax [ebp+ebx*2+szFile] +
push eax  +
call sub_10153D2  +
add esp 0Ch +
push [ebp+pptlib]  +
mov ebx ds:LoadTypeLib +
lea eax [ebp+szFile] +
push eax  +
call ebx  +
mov esi eax +
test esi esi +
jge loc_1016836  +
mov eax [ebp+var_230] +
mov esi offset a_tlb +
lea edi [ebp+var_10] +
movs   +
lea ecx [ebp+szFile] +
sub eax ecx +
sar eax 1 +
movs   +
lea ecx [eax+5] +
movs   +
cmp ecx 104h +
ja loc_1016857  +
lea ecx [ebp+var_10] +
push ecx  +
mov ecx 10Eh +
sub ecx eax +
push ecx  +
push [ebp+var_230]  +
call sub_10153D2  +
add esp 0Ch +
push [ebp+pptlib]  +
lea eax [ebp+szFile] +
push eax  +
call ebx  +
mov esi eax +
test esi esi +
jl loc_1016704  +
mov edi [ebp+var_240] +
lea eax [ebp+szFile] +
push eax  +
call ds:SysAllocString  +
mov [edi] eax +
test eax eax +
jnz loc_1016704  +
mov esi 8007000Eh +
jmp loc_1016704  +
mov esi 80004005h +
jmp loc_1016704  +
mov eax 80004003h +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_101BC5D  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_101638F  +
cmp eax 0FFFFFFFFh +
jnz loc_101689F  +
xor eax eax +
jmp loc_10168A9  +
push eax  +
mov ecx esi +
call loc_101635D  +
mov eax [eax] +
pop esi  +
pop ebp  +
retn 4  +
***
lea eax [ecx+4] +
cmp byte ptr [eax+18h] 0 +
jz locret_10168F0  +
push eax  +
mov byte ptr [eax+18h] 0 +
call ds:DeleteCriticalSection  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
mov eax [ecx] +
shl edx 2 +
add eax edx +
jz loc_1016910  +
push esi  +
mov esi [ebp+arg_4] +
mov esi [esi] +
mov [eax] esi +
pop esi  +
mov eax [ecx+4] +
add eax edx +
jz loc_101691E  +
mov ecx [ebp+arg_8] +
mov ecx [ecx] +
mov [eax] ecx +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 400h +
push esi  +
mov esi ecx +
jbe loc_1016942  +
push [ebp+arg_0]  +
call sub_10163D7  +
jmp loc_1016947  +
lea eax [esi+4] +
mov [esi] eax +
mov eax [esi] +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 100h +
push esi  +
mov esi ecx +
jbe loc_101696E  +
push [ebp+arg_0]  +
call sub_10163D7  +
jmp loc_1016973  +
lea eax [esi+4] +
mov [esi] eax +
mov eax [esi] +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebx  +
push esi  +
mov esi ecx +
push edi  +
lea edi [esi+0A90h] +
mov ecx [edi] +
xor ebx ebx +
cmp ecx ebx +
jz loc_101699D  +
push 1  +
call sub_10149B3  +
mov [edi] ebx +
lea edi [esi+0A8Ch] +
mov ecx [edi] +
cmp ecx ebx +
jz loc_10169B2  +
push 1  +
call sub_10141CC  +
mov [edi] ebx +
lea edi [esi+0A94h] +
mov ecx [edi] +
cmp ecx ebx +
jz loc_10169C7  +
push 1  +
call sub_10141F2  +
mov [edi] ebx +
lea eax [esi+670h] +
xor ecx ecx +
cmp cx [eax] +
jz loc_10169DC  +
push 1  +
push eax  +
call sub_101466E  +
lea edi [esi+0A84h] +
mov eax [edi] +
cmp eax ebx +
jz loc_10169F1  +
push eax  +
call ds:CloseHandle  +
mov [edi] ebx +
add esi 0A88h +
mov eax [esi] +
cmp eax ebx +
jz loc_1016A06  +
push eax  +
call ds:UnregisterWait  +
mov [esi] ebx +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_101697F  +
test [ebp+arg_0] 1 +
jz loc_1016A29  +
push esi  +
call sub_101B5A8  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
push edi  +
push offset unk_1036A68  +
mov esi ecx +
call sub_1016248  +
cmp byte ptr [esi+3Ch] 0 +
mov edi eax +
jz loc_1016A56  +
push dword ptr [esi+38h]  +
call ds:Sleep  +
mov eax edi +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
push edi  +
xor esi esi +
push esi  +
push esi  +
push esi  +
push esi  +
mov edi ecx +
call ds:CreateEventW  +
mov [edi+30h] eax +
cmp eax esi +
jnz loc_1016A81  +
xor eax eax +
jmp loc_1016AA7  +
push ebx  +
lea eax [ebp+ThreadId] +
push eax  +
push esi  +
push edi  +
push offset StartAddress  +
push esi  +
push esi  +
call ds:CreateThread  +
mov ebx eax +
cmp ebx esi +
jnz loc_1016AA4  +
push dword ptr [edi+30h]  +
call ds:CloseHandle  +
mov eax ebx +
pop ebx  +
pop edi  +
pop esi  +
leave   +
retn   +
***
mov esi (offset dword_1005330+10h) +
mov edi offset unk_1031648 +
movs   +
movs   +
movs   +
movs   +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
retn   +
***
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
cmp dword ptr [eax] 0 +
jnz loc_1016B1B  +
cmp dword ptr [eax+4] 0 +
jnz loc_1016B1B  +
cmp dword ptr [eax+8] 0C0h +
jnz loc_1016B1B  +
cmp dword ptr [eax+0Ch] 46000000h +
jnz loc_1016B1B  +
xor eax eax +
inc eax  +
jmp loc_1016B1D  +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+14h] +
mov eax 80004003h +
test esi esi +
jz loc_1016B61  +
and dword ptr [esi] 0 +
cmp dword ptr [ebp+0Ch] 0 +
jz loc_1016B54  +
push dword ptr [ebp+10h]  +
call sub_1016AF1  +
test eax eax +
jnz loc_1016B54  +
mov eax 80040110h +
jmp loc_1016B61  +
mov eax [ebp+8] +
push esi  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
call dword ptr [eax+24h]  +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword ptr [ebp+0Ch] 0 +
mov ecx dword_1031644 +
mov eax [ecx] +
jz loc_1016B83  +
call dword ptr [eax+4]  +
jmp loc_1016B86  +
call dword ptr [eax+8]  +
xor eax eax +
pop ebp  +
retn 8  +
***
call __EH_prolog3  +
mov [ebp-10h] ecx +
and dword ptr [ebp-4] 0 +
call sub_10165EC  +
mov ecx [ebp-10h] +
call sub_10162F8  +
call __EH_epilog3  +
retn   +
***
call __EH_prolog3  +
mov esi ecx +
mov [ebp-10h] esi +
mov dword ptr [esi] offset off_10031B0 +
and dword ptr [ebp-4] 0 +
push esi  +
call sub_1016678  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [esi+4] +
call sub_1016B91  +
call __EH_epilog3  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+10h] +
test eax eax +
jz loc_1016C03  +
and dword ptr [eax] 0 +
mov eax 80004001h +
pop ebp  +
retn 0Ch  +
***
xor eax eax +
inc eax  +
retn 4  +
***
xor eax eax +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1016BBC  +
test [ebp+arg_0] 1 +
jz loc_1016C40  +
push esi  +
call sub_101B5A8  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call __EH_prolog3_GS  +
mov edi [ebp+8] +
mov ebx [ebp+0Ch] +
mov esi ecx +
mov [ebp-64h] ebx +
test edi edi +
jz loc_1016D86  +
test ebx ebx +
jz loc_1016D86  +
and dword ptr [ebx] 0 +
push edi  +
call ds:lstrlenW  +
add eax eax +
push eax  +
lea ecx [ebp-60h] +
call sub_1015D91  +
xor ecx ecx +
mov [ebp-4] ecx +
cmp [ebp-58h] ecx +
jnz loc_1016CA3  +
push ecx  +
call ds:CoTaskMemFree  +
mov eax 8007000Eh +
jmp loc_1016D8B  +
mov [esi] edi +
mov [ebp-54h] ecx +
cmp [edi] cx +
jz loc_1016D55  +
mov ebx ds:CharNextW +
mov eax [esi] +
cmp word ptr [eax] 25h +
jnz loc_1016D31  +
push eax  +
call ebx  +
mov [esi] eax +
cmp word ptr [eax] 25h +
jz loc_1016D31  +
push 25h  +
push eax  +
call sub_1015F83  +
mov edi eax +
test edi edi +
jz loc_1016D6B  +
mov ecx [esi] +
sub eax ecx +
sar eax 1 +
cmp eax 1Fh +
jg loc_1016D74  +
push eax  +
push ecx  +
lea eax [ebp-50h] +
push 20h  +
push eax  +
call sub_10153F5  +
lea eax [ebp-50h] +
add esp 10h +
mov [ebp-68h] eax +
mov eax [esi+4] +
lea ecx [ebp-68h] +
push ecx  +
lea ecx [eax+4] +
call sub_1016886  +
test eax eax +
jz loc_1016D6B  +
push eax  +
lea ecx [ebp-60h] +
call sub_1016630  +
test eax eax +
jz loc_1016D7D  +
cmp [esi] edi +
jz loc_1016D40  +
push dword ptr [esi]  +
call ebx  +
mov [esi] eax +
cmp eax edi +
jnz loc_1016D25  +
jmp loc_1016D40  +
push 1  +
push eax  +
lea ecx [ebp-60h] +
call sub_1015DDB  +
test eax eax +
jz loc_1016D7D  +
push dword ptr [esi]  +
call ebx  +
mov [esi] eax +
cmp word ptr [eax] 0 +
jnz loc_1016CB7  +
mov ebx [ebp-64h] +
xor ecx ecx +
mov eax [ebp-58h] +
mov [ebp-58h] ecx +
mov [ebx] eax +
push dword ptr [ebp-58h]  +
call ds:CoTaskMemFree  +
mov eax [ebp-54h] +
jmp loc_1016D8B  +
mov dword ptr [ebp-54h] 80020009h +
jmp loc_1016D5D  +
mov dword ptr [ebp-54h] 80004005h +
jmp loc_1016D5D  +
mov dword ptr [ebp-54h] 8007000Eh +
jmp loc_1016D5D  +
mov eax 80004003h +
call sub_101BE3E  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
and [ebp+var_8] 0 +
and [ebp+var_4] 0 +
push esi  +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_8] +
push eax  +
push [ebp+libID]  +
push [ebp+hModule]  +
call sub_1016691  +
mov esi eax +
test esi esi +
jl loc_1016DFC  +
mov eax [ebp+var_4] +
mov ecx [eax] +
lea edx [ebp+libID] +
push edx  +
push eax  +
call dword ptr [ecx+1Ch]  +
mov esi eax +
test esi esi +
jl loc_1016DFC  +
mov eax [ebp+libID] +
push dword ptr [eax+14h]  +
movzx ecx word ptr [eax+1Ah] +
push dword ptr [eax+10h]  +
push ecx  +
movzx ecx word ptr [eax+18h] +
push ecx  +
push eax  +
call ds:UnRegisterTypeLib  +
push [ebp+libID]  +
mov esi eax +
mov eax [ebp+var_4] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+30h]  +
mov eax [ebp+var_4] +
test eax eax +
jz loc_1016E09  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
push [ebp+var_8]  +
call ds:SysFreeString  +
mov eax esi +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 218h +
mov eax dword_1030118 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+hModule] +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_4] +
lea ecx [ebp+ptlib] +
push ecx  +
lea ecx [ebp+szFullPath] +
push ecx  +
push edi  +
xor ebx ebx +
push eax  +
mov [ebp+szFullPath] ebx +
mov [ebp+ptlib] ebx +
call sub_1016691  +
mov esi eax +
cmp esi ebx +
jl loc_1016F80  +
mov eax [ebp+ptlib] +
lea edx [ebp+var_218] +
push edx  +
push ebx  +
push ebx  +
push ebx  +
push 0FFFFFFFFh  +
mov [ebp+var_218] ebx +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+24h]  +
test eax eax +
jl loc_1016F5F  +
cmp [ebp+var_218] ebx +
jz loc_1016F5F  +
push [ebp+szFullPath]  +
call ds:SysStringLen  +
push eax  +
push [ebp+szFullPath]  +
lea eax [ebp+sz] +
push 104h  +
push eax  +
call sub_10153F5  +
xor eax eax +
add esp 10h +
mov [ebp+var_6] ax +
cmp edi ebx +
jz loc_1016F04  +
mov esi ds:lstrlenW +
lea eax [ebp+sz] +
push eax  +
call esi  +
push edi  +
mov ebx eax +
call esi  +
mov ecx eax +
mov edx ebx +
sub edx ecx +
lea eax [ebp+edx*2+sz] +
mov esi eax +
xor ebx ebx +
cmps   +
jnz loc_1016F02  +
cmp edx 104h +
jnb loc_1016F02  +
xor ecx ecx +
mov [eax] cx +
xor ebx ebx +
lea edi [ebp+sz] +
mov esi edi +
cmp [ebp+sz] bx +
jz loc_1016F3A  +
push esi  +
call ds:CharNextW  +
movzx ecx word ptr [esi] +
cmp cx 5Ch +
jz loc_1016F31  +
cmp cx 2Fh +
jz loc_1016F31  +
cmp cx 3Ah +
jnz loc_1016F33  +
mov edi eax +
mov esi eax +
cmp [eax] bx +
jnz loc_1016F15  +
lea eax [ebp+sz] +
sub edi eax +
sar edi 1 +
cmp edi 104h +
jnb loc_1016F56  +
xor eax eax +
mov [ebp+edi*2+sz] ax +
lea eax [ebp+sz] +
push eax  +
jmp loc_1016F60  +
push ebx  +
push [ebp+szFullPath]  +
push [ebp+ptlib]  +
call ds:RegisterTypeLib  +
push [ebp+var_218]  +
mov esi eax +
call ds:SysFreeString  +
mov eax [ebp+ptlib] +
cmp eax ebx +
jz loc_1016F90  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
push [ebp+szFullPath]  +
call ds:SysFreeString  +
mov ecx [ebp+var_4] +
pop edi  +
mov eax esi +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_101BC5D  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1BCh +
mov eax dword_1030118 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push ebx  +
push esi  +
mov esi [ebp+arg_4] +
xor ebx ebx +
mov [ebp+rguid] eax +
mov [ebp+ppv] ebx +
cmp esi ebx +
jnz loc_1016FEA  +
xor eax eax +
jmp loc_101722C  +
push offset dword_10037BC  +
push eax  +
call sub_101521A  +
test eax eax +
jnz loc_1016FE3  +
lea eax [ebp+ppv] +
push eax  +
push offset stru_1003234  +
push 1  +
push ebx  +
push offset stru_100376C  +
call ds:CoCreateInstance  +
test eax eax +
jge loc_1017029  +
mov eax [ebp+ppv] +
cmp eax ebx +
jz loc_1016FE3  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_1016FE3  +
mov eax esi +
push edi  +
mov [ebp+cSubKeys] eax +
cmp [esi] ebx +
jnz loc_1017242  +
cmp [ebp+arg_8] ebx +
jnz loc_1017219  +
push 40h  +
lea eax [ebp+sz] +
push eax  +
push [ebp+rguid]  +
call ds:StringFromGUID2  +
push offset aClsid  +
mov esi 80h +
lea eax [ebp+SubKey] +
push esi  +
push eax  +
mov [ebp+var_1BC] ebx +
call wcscpy_s  +
add esp 0Ch +
push eax  +
call sub_101536B  +
lea eax [ebp+sz] +
push eax  +
lea eax [ebp+SubKey] +
push esi  +
push eax  +
call sub_101541B  +
push offset aRequiredCatego  +
lea eax [ebp+SubKey] +
push esi  +
push eax  +
call wcscat_s  +
add esp 18h +
push eax  +
call sub_101536B  +
mov edi 20019h +
push edi  +
lea ecx [ebp+SubKey] +
mov eax 80000000h +
push ecx  +
push eax  +
lea ecx [ebp+hKey] +
mov [ebp+var_1B8] eax +
mov [ebp+var_1B4] ebx +
mov [ebp+var_1B0] ebx +
mov [ebp+hKey] ebx +
mov [ebp+var_1A8] ebx +
mov [ebp+var_1A4] ebx +
mov [ebp+cSubKeys] ebx +
call sub_1015C5A  +
test eax eax +
jnz loc_1017149  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
lea eax [ebp+cSubKeys] +
push eax  +
push ebx  +
push ebx  +
push ebx  +
push [ebp+hKey]  +
call ds:RegQueryInfoKeyW  +
lea ecx [ebp+hKey] +
mov [ebp+rguid] eax +
call sub_1015BE7  +
cmp [ebp+rguid] ebx +
jnz loc_1017149  +
cmp [ebp+cSubKeys] ebx +
jnz loc_1017149  +
lea eax [ebp+SubKey] +
push eax  +
lea ecx [ebp+var_1B8] +
call sub_1015B61  +
push offset aClsid  +
lea eax [ebp+SubKey] +
push esi  +
push eax  +
call wcscpy_s  +
add esp 0Ch +
push eax  +
call sub_101536B  +
lea eax [ebp+sz] +
push eax  +
lea eax [ebp+SubKey] +
push esi  +
push eax  +
call sub_101541B  +
push offset aImplementedCat  +
lea eax [ebp+SubKey] +
push esi  +
push eax  +
call wcscat_s  +
add esp 18h +
push eax  +
call sub_101536B  +
push edi  +
lea eax [ebp+SubKey] +
push eax  +
push [ebp+var_1B8]  +
lea ecx [ebp+hKey] +
call sub_1015C5A  +
test eax eax +
jnz loc_10171F8  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
lea eax [ebp+cSubKeys] +
push eax  +
push ebx  +
push ebx  +
push ebx  +
push [ebp+hKey]  +
call ds:RegQueryInfoKeyW  +
lea ecx [ebp+hKey] +
mov esi eax +
call sub_1015BE7  +
cmp esi ebx +
jnz loc_10171F8  +
cmp [ebp+cSubKeys] ebx +
jnz loc_10171F8  +
lea eax [ebp+SubKey] +
push eax  +
lea ecx [ebp+var_1B8] +
call sub_1015B61  +
lea ecx [ebp+hKey] +
call sub_1015BE7  +
lea ecx [ebp+var_1B8] +
call sub_1015BE7  +
lea ecx [ebp+var_1BC] +
call sub_10162D9  +
mov eax [ebp+ppv] +
cmp eax ebx +
jz loc_1017229  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
xor eax eax +
pop edi  +
mov ecx [ebp+var_4] +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_101BC5D  +
leave   +
retn 0Ch  +
mov eax [ebp+cSubKeys] +
mov esi [eax+4] +
lea edi [ebp+var_194] +
movs   +
movs   +
lea edx [ebp+var_194] +
movs   +
push edx  +
push 1  +
push [ebp+rguid]  +
movs   +
cmp [ebp+arg_8] ebx +
jz loc_1017293  +
cmp dword ptr [eax] 1 +
mov eax [ebp+ppv] +
mov ecx [eax] +
push eax  +
jnz loc_1017276  +
call dword ptr [ecx+14h]  +
jmp loc_1017279  +
call dword ptr [ecx+1Ch]  +
mov esi eax +
cmp esi ebx +
jge loc_10172A9  +
mov eax [ebp+ppv] +
cmp eax ebx +
jz loc_101728F  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax esi +
jmp loc_101722B  +
cmp dword ptr [eax] 1 +
mov eax [ebp+ppv] +
mov ecx [eax] +
push eax  +
jnz loc_10172A6  +
call dword ptr [ecx+18h]  +
jmp loc_10172A9  +
call dword ptr [ecx+20h]  +
add [ebp+cSubKeys] 8 +
mov eax [ebp+cSubKeys] +
cmp [eax] ebx +
jnz loc_101723C  +
jmp loc_101703A  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov eax [esi+8] +
push edi  +
mov edi off_1030120 +
push 4  +
inc eax  +
push eax  +
push dword ptr [esi]  +
call edi  +
add esp 0Ch +
test eax eax +
jnz loc_10172E9  +
xor eax eax +
jmp loc_1017317  +
mov [esi] eax +
mov eax [esi+8] +
push 4  +
inc eax  +
push eax  +
push dword ptr [esi+4]  +
call edi  +
add esp 0Ch +
test eax eax +
jz loc_10172E5  +
push [ebp+arg_4]  +
mov ecx esi +
push [ebp+arg_0]  +
mov [esi+4] eax +
push dword ptr [esi+8]  +
call sub_10168F6  +
inc dword ptr [esi+8]  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push 2  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_1016401  +
push eax  +
mov ecx esi +
call sub_1016927  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push 2  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_1016401  +
push eax  +
mov ecx esi +
call sub_1016953  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push 1  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_1016401  +
push eax  +
mov ecx esi +
call sub_1016953  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push ebx  +
push esi  +
push edi  +
xor edi edi +
mov esi ecx +
mov ebx 80004005h +
mov [ebp+hObject] edi +
mov [ebp+var_C] edi +
mov [ebp+var_4] ebx +
cmp [esi+494h] edi +
jz loc_101750E  +
mov ecx [esi+6A8h] +
cmp ecx edi +
jz loc_101750E  +
cmp [esi+49Ch] edi +
jnz loc_10174D8  +
call sub_101448E  +
test al al +
jz loc_10173EC  +
mov ecx [esi+6A8h] +
push edi  +
push edi  +
call sub_1014C03  +
mov [ebp+var_4] eax +
jmp loc_10173EF  +
mov [ebp+var_4] edi +
cmp hHandle edi +
jnz loc_10174D8  +
push offset aLocalCd3e50095  +
push edi  +
mov edi ds:OpenEventW +
push 2  +
call edi  +
mov [ebp+var_C] eax +
test eax eax +
jz loc_1017449  +
push eax  +
call ds:SetEvent  +
test eax eax +
jnz loc_1017449  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_1017441  +
test byte ptr [eax+1Ch] 1 +
jz loc_1017441  +
push offset dword_1002DE4  +
push 32h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10054B7  +
mov [ebp+var_4] ebx +
jmp loc_10174D6  +
lea edx [esi+4A0h] +
mov eax edx +
lea ebx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_1017454  +
sub eax ebx +
sar eax 1 +
jz loc_10174D6  +
push edx  +
push 0  +
push 2  +
call edi  +
mov [ebp+hObject] eax +
test eax eax +
jnz loc_1017494  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_10174CF  +
test byte ptr [eax+1Ch] 1 +
jz loc_10174CF  +
call ds:GetLastError  +
push eax  +
push offset dword_1002DE4  +
push 33h  +
jmp loc_10174BF  +
push eax  +
call ds:SetEvent  +
test eax eax +
jnz loc_10174D6  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_10174CF  +
test byte ptr [eax+1Ch] 1 +
jz loc_10174CF  +
call ds:GetLastError  +
push eax  +
push offset dword_1002DE4  +
push 34h  +
mov eax off_1030000 +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10062BE  +
mov [ebp+var_4] 80004005h +
xor edi edi +
mov ecx [esi+6A8h] +
cmp ecx edi +
jz loc_10174EF  +
push 1  +
call sub_1016A0F  +
mov [esi+6A8h] edi +
mov esi ds:CloseHandle +
cmp [ebp+hObject] edi +
jz loc_10174FF  +
push [ebp+hObject]  +
call esi  +
cmp [ebp+var_C] edi +
jz loc_1017509  +
push [ebp+var_C]  +
call esi  +
mov eax [ebp+var_4] +
jmp loc_1017515  +
mov ecx esi +
call sub_1016A35  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
and dword ptr [esi+30h] 0 +
push 0  +
mov [esi+2Ch] eax +
mov dword ptr [esi+34h] 1388h +
mov dword ptr [esi+38h] 3E8h +
mov byte ptr [esi+3Ch] 1 +
mov byte ptr [esi+3Eh] 0 +
call ds:CoInitialize  +
test eax eax +
jge loc_1017577  +
cmp eax 80010106h +
jnz loc_101756E  +
push offset aMscoree_dll  +
call ds:GetModuleHandleW  +
test eax eax +
jnz loc_101757B  +
mov byte_1031638 1 +
jmp loc_1017587  +
mov byte ptr [esi+3Eh] 1 +
push 1  +
mov ecx offset unk_1036A68 +
call sub_10159EA  +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
push edi  +
mov edi ecx +
mov esi offset unk_1036A68 +
push 0  +
mov ecx esi +
call sub_10159EA  +
mov ecx edi +
call sub_10164AE  +
mov ecx esi +
call sub_10159A1  +
cmp byte ptr [edi+3Eh] 0 +
jz loc_10175BE  +
call ds:CoUninitialize  +
mov ecx edi +
pop edi  +
pop esi  +
jmp sub_10164AE  +
***
mov edi edi +
push esi  +
push edi  +
push 0  +
push 4  +
push offset unk_1036A68  +
mov esi ecx +
call sub_1016202  +
mov edi eax +
test edi edi +
jnz loc_10175FD  +
cmp [esi+3Ch] al +
jz loc_1017601  +
mov ecx esi +
call sub_1016A60  +
test eax eax +
jnz loc_1017601  +
mov edi 80004005h +
jmp loc_1017601  +
mov byte ptr [esi+3Ch] 0 +
mov eax edi +
pop edi  +
pop esi  +
retn 4  +
***
mov eax esi +
pop esi  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
push ebx  +
push esi  +
push edi  +
jz loc_10176BD  +
mov esi [ebp+arg_4] +
test esi esi +
jz loc_10176BD  +
mov ebx [ebp+arg_C] +
test ebx ebx +
jnz loc_101764F  +
mov eax 80004003h +
jmp loc_10176C2  +
push [ebp+arg_8]  +
and dword ptr [ebx] 0 +
call sub_1016AF1  +
test eax eax +
jz loc_10176AF  +
mov esi [esi+4] +
add esi [ebp+arg_0] +
mov eax [esi] +
push esi  +
call dword ptr [eax+4]  +
mov [ebx] esi +
xor eax eax +
jmp loc_10176C2  +
mov eax [esi] +
xor ecx ecx +
test eax eax +
setz cl  +
mov [ebp+arg_4] ecx +
test ecx ecx +
jnz loc_101768D  +
push [ebp+arg_8]  +
push eax  +
call sub_101521A  +
test eax eax +
jz loc_10176AC  +
cmp edi 1 +
jz loc_101765E  +
push dword ptr [esi+4]  +
push ebx  +
push [ebp+arg_8]  +
push [ebp+arg_0]  +
call edi  +
test eax eax +
jz loc_10176C2  +
cmp [ebp+arg_4] 0 +
jnz loc_10176AC  +
test eax eax +
jl loc_10176C2  +
add esi 0Ch +
mov edi [esi+8] +
test edi edi +
jnz loc_1017670  +
mov eax 80004002h +
jmp loc_10176C2  +
mov eax 80070057h +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push offset off_10032D0  +
push ecx  +
call sub_1017628  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
add eax 4 +
push eax  +
call ds:InterlockedIncrement  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+10h]  +
mov ecx [ebp+8] +
push dword ptr [ebp+0Ch]  +
call sub_10176CE  +
pop ebp  +
retn 0Ch  +
***
mov eax ecx +
lea ecx [eax+4] +
mov dword ptr [ecx] 0C0000001h +
mov dword ptr [eax] offset off_100319C +
jmp loc_10168DC  +
***
call __EH_prolog3_catch  +
mov [ebp-30h] ecx +
xor edi edi +
cmp [ebp+8] edi +
jz loc_101786C  +
cmp [ebp+0Ch] edi +
jz loc_101786C  +
push dword ptr [ebp+8]  +
mov [ebp-1Ch] edi +
call ds:lstrlenW  +
lea eax [eax+eax+2] +
xor ecx ecx +
push 2  +
pop edx  +
mov [ebp-20h] eax +
mul  edx +
seto cl  +
mov [ebp-14h] edi +
mov [ebp-4] edi +
neg ecx  +
or ecx eax +
push ecx  +
call sub_101B598  +
pop ecx  +
mov [ebp-14h] eax +
jmp loc_101779D  +
mov eax offset loc_101779B +
retn   +
xor edi edi +
mov eax [ebp-14h] +
push 2  +
pop esi  +
push dword ptr [ebp+0Ch]  +
mov [ebp-4] esi +
mov [ebp-2Ch] eax +
call ds:lstrlenW  +
lea eax [eax+eax+2] +
xor ecx ecx +
mov [ebp-24h] eax +
mov edx esi +
mul  edx +
seto cl  +
mov [ebp-18h] edi +
mov byte ptr [ebp-4] 3 +
neg ecx  +
or ecx eax +
push ecx  +
call sub_101B598  +
pop ecx  +
mov [ebp-18h] eax +
mov [ebp-4] esi +
jmp loc_10177EB  +
mov dword ptr [ebp-4] 2 +
mov eax offset loc_10177E9 +
retn   +
xor edi edi +
mov esi [ebp-18h] +
mov byte ptr [ebp-4] 5 +
mov [ebp-28h] esi +
cmp [ebp-14h] edi +
jz loc_1017835  +
cmp esi edi +
jz loc_1017835  +
push dword ptr [ebp-20h]  +
push dword ptr [ebp+8]  +
push dword ptr [ebp-20h]  +
push dword ptr [ebp-14h]  +
call sub_10153AC  +
push dword ptr [ebp-24h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp-24h]  +
push esi  +
call sub_10153AC  +
mov ecx [ebp-30h] +
add esp 20h +
lea eax [ebp-18h] +
push eax  +
lea eax [ebp-14h] +
push eax  +
call sub_10172C4  +
test eax eax +
jnz loc_101783E  +
mov dword ptr [ebp-1Ch] 8007000Eh +
jmp loc_1017844  +
mov [ebp-2Ch] edi +
mov [ebp-28h] edi +
push dword ptr [ebp-28h]  +
xor eax eax +
cmp [ebp-1Ch] edi +
mov byte ptr [ebp-4] 2 +
setnl al  +
mov esi eax +
call sub_101B5A8  +
push dword ptr [ebp-2Ch]  +
or dword ptr [ebp-4] 0FFFFFFFFh +
call sub_101B5A8  +
pop ecx  +
pop ecx  +
mov eax esi +
jmp loc_101786E  +
xor eax eax +
call __EH_epilog3  +
retn 8  +
***
call __EH_prolog3  +
xor eax eax +
cmp [ebp+0Ch] eax +
jz loc_10178C8  +
cmp [ebp+10h] eax +
jz loc_10178C8  +
mov [ebp-10h] eax +
push dword ptr [ebp+10h]  +
mov ecx [ebp+8] +
push dword ptr [ebp+0Ch]  +
add ecx 4 +
mov [ebp-4] eax +
call sub_101773F  +
mov esi eax +
neg esi  +
sbb esi esi +
and esi 7FF8FFF2h +
lea ecx [ebp-10h] +
add esi 8007000Eh +
call sub_10162D9  +
mov eax esi +
jmp loc_10178CD  +
mov eax 80070057h +
call __EH_epilog3  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0FFFFFFFFh  +
push offset byte_102CDFF  +
mov eax large fs:0 +
push eax  +
push ecx  +
mov eax 2120h +
call __alloca_probe  +
mov eax dword_1030118 +
xor eax ebp +
mov [ebp+var_14] eax +
push ebx  +
push esi  +
push edi  +
push eax  +
lea eax [ebp+var_C] +
mov large fs:0 eax +
mov [ebp+var_10] esp +
mov eax [ebp+arg_8] +
mov esi [ebp+arg_0] +
mov ebx [ebp+arg_4] +
mov [ebp+var_212C] eax +
lea eax [ebp+String] +
xor edi edi +
push eax  +
mov [ebp+var_2128] ecx +
mov [ebp+var_2124] esi +
mov dword ptr [ebp+Data] ebx +
mov [ebp+var_211C] edi +
call sub_101600F  +
cmp eax edi +
jl loc_1017C0C  +
lea eax [ebp+var_211C] +
push eax  +
lea eax [ebp+String] +
push eax  +
call sub_1015E6E  +
test eax eax +
jnz loc_1017970  +
mov eax 80020009h +
jmp loc_1017C0C  +
mov ecx [ebp+var_2128] +
call sub_1015FE6  +
mov ecx [ebp+var_2128] +
lea eax [ebp+String] +
push eax  +
call sub_101600F  +
cmp eax edi +
jl loc_1017C0C  +
movzx eax word ptr [ebp+var_211C] +
sub eax 8 +
jz loc_1017BD6  +
sub eax 9 +
jz loc_1017ACE  +
dec eax  +
dec eax  +
jz loc_1017A92  +
sub eax 3FF5h +
jnz loc_1017BF5  +
lea eax [ebp+String] +
push eax  +
call ds:lstrlenW  +
inc eax  +
inc eax  +
mov [ebp+lpData] edi +
mov [ebp+var_4] edi +
push eax  +
lea ecx [ebp+lpData] +
mov byte ptr [ebp+var_4] 1 +
call sub_1017346  +
mov [ebp+var_4] edi +
jmp loc_10179FA  +
and dword ptr [ebp-4] 0 +
mov eax offset loc_10179F8 +
retn   +
xor edi edi +
mov esi [ebp+lpData] +
cmp esi edi +
jz loc_1017A6D  +
cmp word ptr [ebp+String] 0 +
lea edi [ebp+String] +
jz loc_1017A47  +
mov ebx ds:CharNextW +
push edi  +
call ebx  +
movzx ecx word ptr [edi] +
cmp cx 5Ch +
jnz loc_1017A3A  +
cmp word ptr [eax] 30h +
jnz loc_1017A3A  +
xor ecx ecx +
mov [esi] cx +
inc esi  +
push eax  +
inc esi  +
call ebx  +
mov edi eax +
jmp loc_1017A41  +
mov [esi] cx +
inc esi  +
inc esi  +
inc edi  +
inc edi  +
cmp word ptr [edi] 0 +
jnz loc_1017A1A  +
mov ecx [ebp+var_2124] +
xor eax eax +
mov [esi] ax +
mov [esi+2] ax +
push [ebp+lpData]  +
push dword ptr [ebp+Data]  +
call sub_1015CFC  +
mov esi eax +
xor edi edi +
jmp loc_1017A70  +
push 0Eh  +
pop esi  +
lea eax [ebp+var_2114] +
cmp [ebp+lpData] eax +
jz loc_1017BE9  +
lea ecx [ebp+lpData] +
call sub_10163CA  +
jmp loc_1017BE9  +
lea eax [ebp+Data] +
push eax  +
push edi  +
push edi  +
lea eax [ebp+String] +
push eax  +
mov [ebp+var_2124] edi +
call ds:VarUI4FromStr  +
push dword ptr [ebp+Data]  +
mov ecx esi +
push ebx  +
call sub_1015C96  +
lea ecx [ebp+var_2124] +
mov esi eax +
call sub_10162D9  +
jmp loc_1017BE9  +
lea eax [ebp+String] +
push eax  +
call ds:lstrlenW  +
mov [ebp+var_211C] eax +
test al 1 +
jz loc_1017AEF  +
mov eax 80004005h +
jmp loc_1017C0C  +
cdq   +
sub eax edx +
mov ebx eax +
sar ebx 1 +
mov [ebp+var_2130] ebx +
mov [ebp+lpData] edi +
mov [ebp+var_4] 3 +
push ebx  +
lea ecx [ebp+lpData] +
mov byte ptr [ebp+var_4] 4 +
call sub_101736A  +
jmp loc_1017B29  +
mov eax offset loc_1017B21 +
retn   +
mov ebx [ebp-2130h] +
xor edi edi +
cmp [ebp+lpData] edi +
jnz loc_1017B48  +
lea eax [ebp+var_2114] +
test eax eax +
jz loc_1017AE5  +
lea ecx [ebp+lpData] +
call sub_10163CA  +
jmp loc_1017AE5  +
push ebx  +
push edi  +
push [ebp+lpData]  +
call memset  +
add esp 0Ch +
cmp [ebp+var_211C] edi +
jle loc_1017B9A  +
mov ecx [ebp+lpData] +
mov eax edi +
cdq   +
sub eax edx +
sar eax 1 +
lea esi [eax+ecx] +
movzx eax word ptr [ebp+edi*2+String] +
push eax  +
call sub_1015F0D  +
mov edx edi +
and edx 1 +
shl edx 2 +
push 4  +
pop ecx  +
sub ecx edx +
shl al cl +
or [esi] al +
inc edi  +
cmp edi [ebp+var_211C] +
jl loc_1017B60  +
xor edi edi +
mov eax [ebp+var_2124] +
mov eax [eax] +
push ebx  +
push [ebp+lpData]  +
push 3  +
push edi  +
push dword ptr [ebp+Data]  +
push eax  +
call ds:RegSetValueExW  +
mov esi eax +
lea eax [ebp+var_2114] +
cmp [ebp+lpData] eax +
jz loc_1017BE9  +
lea ecx [ebp+lpData] +
call sub_10163CA  +
jmp loc_1017BE9  +
push 1  +
lea eax [ebp+String] +
push eax  +
push ebx  +
mov ecx esi +
call sub_1015CB9  +
mov esi eax +
cmp esi edi +
jz loc_1017BF5  +
push esi  +
call sub_10156D9  +
jmp loc_1017C0C  +
push [ebp+var_212C]  +
mov ecx [ebp+var_2128] +
call sub_101600F  +
cmp eax edi +
jl loc_1017C0C  +
xor eax eax +
mov ecx [ebp+var_C] +
mov large fs:0 ecx +
pop ecx  +
pop edi  +
pop esi  +
pop ebx  +
mov ecx [ebp+var_14] +
xor ecx ebp +
call sub_101BC5D  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0FFFFFFFFh  +
push offset word_102CE42  +
mov eax large fs:0 +
push eax  +
mov eax 225Ch +
call __alloca_probe  +
mov eax dword_1030118 +
xor eax ebp +
mov [ebp+var_10] eax +
push ebx  +
push esi  +
push edi  +
push eax  +
lea eax [ebp+var_C] +
mov large fs:0 eax +
mov eax [ebp+arg_4] +
mov edi [ebp+arg_0] +
xor ebx ebx +
mov [ebp+var_221C] ecx +
mov [ebp+var_2220] eax +
mov [ebp+var_222C] ebx +
mov [ebp+var_2228] ebx +
mov [ebp+var_2224] ebx +
mov eax [ebp+arg_C] +
push edi  +
mov [ebp+var_4] ebx +
mov [ebp+var_2264] eax +
call sub_101600F  +
mov esi eax +
cmp esi ebx +
jmp loc_10181AA  +
mov esi ds:lstrcmpiW +
push offset String2  +
push edi  +
mov [ebp+var_2230] 1 +
call esi  +
mov ebx eax +
neg ebx  +
push offset aForceremove  +
sbb ebx ebx +
push edi  +
inc ebx  +
call esi  +
test eax eax +
jz loc_1017CD5  +
test ebx ebx +
jz loc_1017D92  +
mov ecx [ebp+var_221C] +
push edi  +
call sub_101600F  +
mov esi eax +
test esi esi +
jl loc_1018214  +
cmp [ebp+arg_8] 0 +
jz loc_1017D92  +
xor esi esi +
push 5Ch  +
push edi  +
mov [ebp+var_223C] esi +
mov [ebp+var_2238] esi +
mov [ebp+var_2234] esi +
call sub_1015F83  +
test eax eax +
jnz loc_10181B8  +
mov ecx [ebp+var_221C] +
push edi  +
call sub_1016124  +
test eax eax +
jz loc_1017D47  +
mov eax [ebp+var_2220] +
push edi  +
lea ecx [ebp+var_223C] +
mov [ebp+var_223C] eax +
call sub_10164F8  +
mov [ebp+var_223C] esi +
cmp ebx esi +
jz loc_1017D87  +
mov ecx [ebp+var_221C] +
push edi  +
call sub_101600F  +
mov esi eax +
test esi esi +
jl loc_10181CA  +
mov ecx [ebp+var_221C] +
push edi  +
call sub_1016196  +
lea ecx [ebp+var_223C] +
mov esi eax +
call sub_1015BE7  +
test esi esi +
jl loc_1018214  +
jmp loc_1018165  +
lea ecx [ebp+var_223C] +
call sub_1015BE7  +
push offset aNoremove  +
push edi  +
call ds:lstrcmpiW  +
test eax eax +
jnz loc_1017DBE  +
mov ecx [ebp+var_221C] +
and [ebp+var_2230] eax +
push edi  +
call sub_101600F  +
mov esi eax +
test esi esi +
jl loc_1018214  +
push offset aVal  +
push edi  +
call ds:lstrcmpiW  +
test eax eax +
jnz loc_1017EE3  +
mov ecx [ebp+var_221C] +
lea eax [ebp+ValueName] +
push eax  +
call sub_101600F  +
mov esi eax +
xor ebx ebx +
cmp esi ebx +
jl loc_1018214  +
mov ecx [ebp+var_221C] +
push edi  +
call sub_101600F  +
mov esi eax +
cmp esi ebx +
jl loc_1018214  +
cmp word ptr [edi] 3Dh +
jnz loc_10181C3  +
cmp [ebp+arg_8] ebx +
jz loc_1017E69  +
mov [ebp+var_2250] ebx +
mov [ebp+var_224C] ebx +
mov eax [ebp+var_2220] +
mov ecx [ebp+var_221C] +
mov [ebp+var_2254] eax +
push edi  +
lea eax [ebp+ValueName] +
push eax  +
lea eax [ebp+var_2254] +
push eax  +
mov byte ptr [ebp+var_4] 1 +
call sub_10178DA  +
mov esi eax +
cmp esi ebx +
mov [ebp+var_2254] ebx +
lea ecx [ebp+var_2254] +
jl loc_101820F  +
mov byte ptr [ebp+var_4] bl +
jmp loc_1018160  +
cmp [ebp+arg_C] ebx +
jnz loc_1017ED2  +
cmp [ebp+var_2230] ebx +
jz loc_1017ED2  +
push 20006h  +
push ebx  +
push [ebp+var_2220]  +
lea ecx [ebp+hKey] +
mov [ebp+hKey] ebx +
mov [ebp+var_2244] ebx +
mov [ebp+var_2240] ebx +
call sub_1015C5A  +
cmp eax ebx +
jnz loc_10181D2  +
lea eax [ebp+ValueName] +
push eax  +
push [ebp+hKey]  +
call ds:RegDeleteValueW  +
cmp eax ebx +
jz loc_1017EC7  +
cmp eax 2 +
jnz loc_10181D2  +
lea ecx [ebp+hKey] +
call sub_1015BE7  +
mov ecx [ebp+var_221C] +
push edi  +
call sub_1016196  +
jmp loc_1017C99  +
push 5Ch  +
push edi  +
call sub_1015F83  +
test eax eax +
jnz loc_10181C3  +
cmp [ebp+arg_8] eax +
jz loc_1017F92  +
mov esi 2001Fh +
push esi  +
push edi  +
push [ebp+var_2220]  +
lea ecx [ebp+var_222C] +
call sub_1015C5A  +
test eax eax +
jz loc_1017F56  +
push 20019h  +
push edi  +
push [ebp+var_2220]  +
lea ecx [ebp+var_222C] +
call sub_1015C5A  +
test eax eax +
jz loc_1017F56  +
xor ebx ebx +
push ebx  +
push ebx  +
push esi  +
push ebx  +
push ebx  +
push edi  +
push [ebp+var_2220]  +
lea ecx [ebp+var_222C] +
call sub_1015C05  +
mov esi eax +
cmp esi ebx +
jnz loc_10181E0  +
mov ecx [ebp+var_221C] +
push edi  +
call sub_101600F  +
mov esi eax +
test esi esi +
jl loc_1018214  +
cmp word ptr [edi] 3Dh +
jnz loc_1018165  +
mov ecx [ebp+var_221C] +
push edi  +
push 0  +
lea eax [ebp+var_222C] +
push eax  +
call sub_10178DA  +
mov esi eax +
jmp loc_1017D7A  +
cmp [ebp+arg_C] 0 +
jnz loc_1017FB3  +
push 20019h  +
push edi  +
push [ebp+var_2220]  +
lea ecx [ebp+var_222C] +
call sub_1015C5A  +
mov ebx eax +
jmp loc_1017FB6  +
push 2  +
pop ebx  +
test ebx ebx +
jz loc_1017FC1  +
mov [ebp+arg_C] 1 +
push 0FFFFFFFFh  +
push edi  +
lea eax [ebp+SubKey] +
push 104h  +
push eax  +
call wcsncpy_s  +
add esp 10h +
push eax  +
call sub_101536B  +
mov ecx [ebp+var_221C] +
push edi  +
call sub_101600F  +
mov esi eax +
test esi esi +
jl loc_1018214  +
mov ecx [ebp+var_221C] +
push edi  +
call sub_1016196  +
mov esi eax +
test esi esi +
jl loc_1018214  +
cmp word ptr [edi] 7Bh +
jnz loc_1018059  +
push edi  +
call ds:lstrlenW  +
cmp eax 1 +
jnz loc_1018059  +
push [ebp+arg_C]  +
mov ecx [ebp+var_221C] +
push 0  +
push [ebp+var_222C]  +
push edi  +
call sub_1017C2D  +
mov esi eax +
test esi esi +
jge loc_1018043  +
cmp [ebp+arg_C] 0 +
jz loc_1018214  +
mov ecx [ebp+var_221C] +
push edi  +
call sub_101600F  +
mov esi eax +
test esi esi +
jl loc_1018214  +
mov eax [ebp+var_2264] +
mov [ebp+arg_C] eax +
cmp ebx 2 +
jz loc_10181AC  +
test ebx ebx +
jz loc_1018084  +
test eax eax +
jnz loc_10181AC  +
push ebx  +
call sub_10156D9  +
mov esi eax +
jmp loc_1018214  +
test eax eax +
jz loc_10180DB  +
push [ebp+var_222C]  +
mov ecx [ebp+var_221C] +
call sub_101615A  +
test eax eax +
jz loc_10180DB  +
mov ecx [ebp+var_221C] +
lea eax [ebp+SubKey] +
push eax  +
call sub_1016124  +
test eax eax +
jz loc_10181AC  +
cmp [ebp+var_2230] 0 +
jz loc_10181AC  +
lea eax [ebp+SubKey] +
push eax  +
lea ecx [ebp+var_222C] +
call sub_10164F8  +
jmp loc_10181AC  +
push [ebp+var_222C]  +
mov ecx [ebp+var_221C] +
call sub_101615A  +
lea ecx [ebp+var_222C] +
mov [ebp+var_2268] eax +
call sub_1015BE7  +
mov ebx eax +
xor eax eax +
cmp ebx eax +
jnz loc_10181F3  +
cmp [ebp+var_2230] eax +
jz loc_10181AC  +
cmp [ebp+var_2268] eax +
jnz loc_10181AC  +
mov [ebp+var_225C] eax +
mov [ebp+var_2258] eax +
mov eax [ebp+var_2220] +
mov [ebp+var_2260] eax +
lea eax [ebp+SubKey] +
push eax  +
lea ecx [ebp+var_2260] +
call sub_1015B61  +
and [ebp+var_2260] 0 +
test eax eax +
jnz loc_1018201  +
lea ecx [ebp+var_2260] +
call sub_1015BE7  +
cmp [ebp+arg_8] 0 +
jz loc_10181AC  +
cmp word ptr [edi] 7Bh +
jnz loc_10181AC  +
push edi  +
call ds:lstrlenW  +
cmp eax 1 +
jnz loc_10181AC  +
mov ecx [ebp+var_221C] +
push 0  +
push [ebp+arg_8]  +
push [ebp+var_222C]  +
push edi  +
call sub_1017C2D  +
mov esi eax +
test esi esi +
jl loc_1018214  +
mov ecx [ebp+var_221C] +
push edi  +
call sub_101600F  +
mov esi eax +
test esi esi +
jl loc_1018214  +
cmp word ptr [edi] 7Dh +
jnz loc_1017CA2  +
jmp loc_1018214  +
lea ecx [ebp+var_223C] +
call sub_1015BE7  +
mov esi 80020009h +
jmp loc_1018214  +
lea ecx [ebp+var_223C] +
jmp loc_101820F  +
push eax  +
call sub_10156D9  +
lea ecx [ebp+hKey] +
jmp loc_101820D  +
lea ecx [ebp+var_222C] +
call sub_1015BE7  +
push esi  +
call sub_10156D9  +
jmp loc_1018221  +
lea ecx [ebp+var_222C] +
call sub_1015BE7  +
push ebx  +
jmp loc_10181EC  +
push eax  +
call sub_10156D9  +
lea ecx [ebp+var_2260] +
mov esi eax +
call sub_1015BE7  +
lea ecx [ebp+var_222C] +
call sub_1015BE7  +
mov eax esi +
mov ecx [ebp+var_C] +
mov large fs:0 ecx +
pop ecx  +
pop edi  +
pop esi  +
pop ebx  +
mov ecx [ebp+var_10] +
xor ecx ebp +
call sub_101BC5D  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push esi  +
mov esi [ebp+arg_0] +
test esi esi +
jnz loc_1018258  +
mov eax 80070057h +
jmp loc_10182CB  +
mov edx [esi+8] +
xor eax eax +
push ebx  +
push edi  +
mov [ebp+var_8] eax +
mov [ebp+var_4] edx +
cmp edx [esi+0Ch] +
jnb loc_10182B9  +
mov ebx [edx] +
test ebx ebx +
jz loc_10182A7  +
cmp [ebp+arg_8] 0 +
jz loc_1018287  +
mov edi [ebx] +
mov esi [ebp+arg_8] +
push 4  +
pop ecx  +
xor eax eax +
cmps   +
mov esi [ebp+arg_0] +
jnz loc_10182A7  +
push 1  +
call dword ptr [ebx+4]  +
test eax eax +
jl loc_10182C9  +
push 1  +
call dword ptr [ebx+1Ch]  +
push eax  +
push dword ptr [ebx]  +
call sub_1016FB4  +
mov [ebp+var_8] eax +
test eax eax +
jl loc_10182C9  +
mov edx [ebp+var_4] +
add edx 4 +
mov [ebp+var_4] edx +
cmp edx [esi+0Ch] +
jb loc_101826A  +
mov eax [ebp+var_8] +
test eax eax +
jl loc_10182C9  +
cmp [ebp+arg_4] 0 +
jz loc_10182C9  +
push 0  +
push dword ptr [esi+4]  +
call sub_1016E1E  +
pop edi  +
pop ebx  +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push esi  +
mov esi [ebp+arg_0] +
test esi esi +
jnz loc_10182EB  +
mov eax 80070057h +
jmp loc_101835E  +
mov edx [esi+8] +
xor eax eax +
push ebx  +
push edi  +
mov [ebp+var_8] eax +
mov [ebp+var_4] edx +
cmp edx [esi+0Ch] +
jnb loc_101834C  +
mov ebx [edx] +
test ebx ebx +
jz loc_101833A  +
cmp [ebp+arg_8] 0 +
jz loc_101831A  +
mov edi [ebx] +
mov esi [ebp+arg_8] +
push 4  +
pop ecx  +
xor eax eax +
cmps   +
mov esi [ebp+arg_0] +
jnz loc_101833A  +
push 0  +
call dword ptr [ebx+1Ch]  +
push eax  +
push dword ptr [ebx]  +
call sub_1016FB4  +
test eax eax +
jl loc_101835C  +
push 0  +
call dword ptr [ebx+4]  +
mov [ebp+var_8] eax +
test eax eax +
jl loc_101835C  +
mov edx [ebp+var_4] +
add edx 4 +
mov [ebp+var_4] edx +
cmp edx [esi+0Ch] +
jb loc_10182FD  +
mov eax [ebp+var_8] +
test eax eax +
jl loc_101835C  +
cmp [ebp+arg_4] 0 +
jz loc_101835C  +
push 0  +
push dword ptr [esi+4]  +
call sub_1016D98  +
pop edi  +
pop ebx  +
pop esi  +
leave   +
retn 0Ch  +
***
mov [esi+494h] edi +
mov [esi+498h] edi +
mov [esi+49Ch] edi +
call sub_10062EA  +
push 208h  +
lea eax [esi+4A0h] +
push edi  +
push eax  +
call memset  +
add esp 0Ch +
mov [esi+6A8h] edi +
mov eax esi +
call __EH_epilog3  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov ecx [eax] +
push offset a3a74d60d33f145  +
push offset aAppid  +
push eax  +
call dword ptr [ecx+0Ch]  +
pop ebp  +
retn 4  +
***
add ecx 8 +
push ecx  +
call ds:InterlockedIncrement  +
retn   +
***
mov eax [ecx+8] +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+8] +
push edi  +
xor edi edi +
cmp ebx edi +
jnz loc_101841D  +
mov eax 80004003h +
jmp loc_101844E  +
push esi  +
lea esi [ecx+28h] +
cmp [esi] edi +
jnz loc_101843F  +
push esi  +
push offset dword_100331C  +
push 1  +
push edi  +
push offset dword_1001870  +
call ds:CoCreateInstance  +
mov edi eax +
test edi edi +
jl loc_101844B  +
mov eax [esi] +
mov [ebx] eax +
mov esi [esi] +
mov eax [esi] +
push esi  +
call dword ptr [eax+4]  +
mov eax edi +
pop esi  +
pop edi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
push edi  +
lea eax [esi+8] +
push eax  +
call ds:InterlockedDecrement  +
mov edi eax +
xor eax eax +
cmp edi eax +
jnz loc_1018492  +
cmp [esi+3Ch] al +
jz loc_1018485  +
push dword ptr [esi+30h]  +
mov byte ptr [esi+3Dh] 1 +
call ds:SetEvent  +
jmp loc_1018492  +
push eax  +
push eax  +
push 12h  +
push dword ptr [esi+2Ch]  +
call ds:PostThreadMessageW  +
mov eax edi +
pop edi  +
pop esi  +
retn   +
***
call __EH_prolog3  +
mov esi ecx +
xor ebx ebx +
mov [ebp-10h] ebx +
cmp [esi+494h] ebx +
jz loc_101862F  +
push 0A9Ch  +
call sub_101B56A  +
pop ecx  +
mov ecx eax +
mov [ebp+8] ecx +
mov [ebp-4] ebx +
cmp ecx ebx +
jz loc_10184D9  +
call sub_101543E  +
jmp loc_10184DB  +
xor eax eax +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov [esi+6A8h] eax +
cmp eax ebx +
jnz loc_1018517  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_101850D  +
test byte ptr [eax+1Ch] 1 +
jz loc_101850D  +
push offset dword_1002DE4  +
push 2Fh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10054B7  +
mov edi 8007000Eh +
jmp loc_1018614  +
lea ecx [esi+40h] +
push ecx  +
mov ecx eax +
call sub_1010538  +
mov edi eax +
cmp edi ebx +
jge loc_101855A  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_1018610  +
test byte ptr [eax+1Ch] 1 +
jz loc_1018610  +
push edi  +
push offset dword_1002DE4  +
push 30h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10062BE  +
jmp loc_1018610  +
mov ecx [esi+6A8h] +
call sub_10149D9  +
mov edi eax +
cmp edi ebx +
jge loc_1018599  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_1018610  +
test byte ptr [eax+1Ch] 1 +
jz loc_1018610  +
push offset dword_1002DE4  +
push 31h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10054B7  +
jmp loc_1018610  +
cmp [esi+49Ch] ebx +
jz loc_10185D8  +
push offset aLocalCd3e50095  +
push ebx  +
xor edi edi +
inc edi  +
push edi  +
push ebx  +
call ds:CreateEventW  +
mov ecx [esi+6A8h] +
push ebx  +
push edi  +
mov [ebp-10h] eax +
call sub_1014C03  +
cmp [ebp-10h] ebx +
jz loc_1018610  +
cmp eax ebx +
jl loc_1018602  +
push 0FFFFFFFFh  +
push dword ptr [ebp-10h]  +
call ds:WaitForSingleObject  +
jmp loc_1018602  +
mov ecx [esi+6A8h] +
cmp [esi+498h] ebx +
jz loc_10185F5  +
call sub_10150E6  +
mov edi eax +
cmp edi ebx +
jl loc_1018614  +
xor edi edi +
jmp loc_101862B  +
call sub_101446B  +
mov edi eax +
cmp edi ebx +
jl loc_1018614  +
xor edi edi +
cmp [ebp-10h] ebx +
jz loc_1018610  +
push dword ptr [ebp-10h]  +
call ds:CloseHandle  +
cmp edi ebx +
jge loc_101862B  +
mov ecx [esi+6A8h] +
cmp ecx ebx +
jz loc_101862B  +
push 1  +
call sub_1016A0F  +
mov [esi+6A8h] ebx +
mov eax edi +
jmp loc_1018637  +
push dword ptr [ebp+8]  +
call sub_10175CC  +
call __EH_epilog3  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1017724  +
test [ebp+arg_0] 1 +
jz loc_101865E  +
push esi  +
call sub_101B5A8  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
push [ebp+arg_0]  +
mov esi ecx +
call sub_101849C  +
mov edi eax +
test edi edi +
jnz loc_1018692  +
cmp [esi+49Ch] eax +
jnz loc_1018694  +
mov ecx esi +
call sub_1015877  +
test edi edi +
jl loc_101869D  +
mov ecx esi +
call sub_101738E  +
mov edi eax +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+8] +
push edi  +
lea eax [esi+4] +
push eax  +
call ds:InterlockedDecrement  +
mov edi eax +
test edi edi +
jnz loc_10186D1  +
test esi esi +
jz loc_10186D1  +
push 1  +
mov ecx esi +
call sub_1018644  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax 200Ch +
call __alloca_probe  +
mov eax dword_1030118 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
and [ebp+pv] 0 +
push esi  +
mov esi ecx +
push edi  +
lea ecx [ebp+pv] +
push ecx  +
push eax  +
mov ecx esi +
call sub_1016C4C  +
mov edi eax +
test edi edi +
jl loc_10187D5  +
mov eax [ebp+pv] +
xor ecx ecx +
mov [esi] eax +
cmp cx [eax] +
jz loc_10187C7  +
push ebx  +
lea eax [ebp+String1] +
push eax  +
mov ecx esi +
call sub_101600F  +
mov edi eax +
xor ebx ebx +
cmp edi ebx +
jl loc_10187C6  +
lea eax [ebp+String1] +
push eax  +
call sub_1015F4C  +
mov [ebp+var_200C] eax +
cmp eax ebx +
jz loc_101880F  +
lea eax [ebp+String1] +
push eax  +
mov ecx esi +
call sub_101600F  +
mov edi eax +
cmp edi ebx +
jl loc_10187C6  +
push 7Bh  +
pop eax  +
cmp ax [ebp+String1] +
jnz loc_101880F  +
lea eax [ebp+String1] +
mov ecx esi +
cmp [ebp+arg_4] ebx +
jz loc_10187E5  +
mov ebx [esi] +
push 0  +
push [ebp+arg_4]  +
push [ebp+var_200C]  +
push eax  +
call sub_1017C2D  +
mov edi eax +
test edi edi +
jge loc_10187F9  +
push 0  +
push 0  +
push [ebp+var_200C]  +
lea eax [ebp+String1] +
push eax  +
mov ecx esi +
mov [esi] ebx +
call sub_1017C2D  +
pop ebx  +
push [ebp+pv]  +
call ds:CoTaskMemFree  +
mov eax edi +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_101BC5D  +
leave   +
retn 8  +
push ebx  +
push ebx  +
push [ebp+var_200C]  +
push eax  +
call sub_1017C2D  +
mov edi eax +
cmp edi ebx +
jl loc_10187C6  +
mov ecx esi +
call sub_1015FE6  +
mov eax [esi] +
xor ecx ecx +
cmp cx [eax] +
jnz loc_1018732  +
jmp loc_10187C6  +
mov edi 80020009h +
jmp loc_10187C6  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1017590  +
test byte ptr [ebp+8] 1 +
jz loc_1018835  +
push esi  +
call sub_101B5A8  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call __EH_prolog3_catch  +
mov eax [ebp+10h] +
xor esi esi +
cmp eax esi +
jnz loc_101885D  +
mov eax 80004003h +
jmp loc_10188D9  +
mov edi 8007000Eh +
push 28h  +
mov [eax] esi +
mov [ebp-14h] edi +
mov [ebp-18h] esi +
mov [ebp-4] esi +
call sub_101B56A  +
pop ecx  +
cmp eax esi +
jz loc_1018885  +
push dword ptr [ebp+8]  +
mov ecx eax +
call near ptr dword_1017608+5  +
jmp loc_1018887  +
xor eax eax +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov esi eax +
jmp loc_101889F  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov eax offset loc_1018899 +
retn   +
***
mov edi [ebp-14h] +
mov esi [ebp-18h] +
test esi esi +
jz loc_10188D7  +
mov eax [ebp+8] +
lea ecx [esi+8] +
mov [esi+24h] eax +
call sub_10155F6  +
mov edi eax +
test edi edi +
jl loc_10188CE  +
xor edi edi +
test edi edi +
jnz loc_10188CE  +
push dword ptr [ebp+10h]  +
mov eax [esi] +
push dword ptr [ebp+0Ch]  +
push esi  +
call dword ptr [eax]  +
mov edi eax +
test edi edi +
jz loc_10188D7  +
push 1  +
mov ecx esi +
call sub_1018644  +
mov eax edi +
call __EH_epilog3  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push offset unk_1036A68  +
call sub_1018242  +
test eax eax +
jl loc_1018911  +
mov ecx dword_103163C +
test ecx ecx +
jz loc_1018911  +
push dword_1036A94  +
call ecx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax dword_1031640 +
test eax eax +
jz loc_101892E  +
call eax  +
test eax eax +
jl loc_101893E  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push offset unk_1036A68  +
call sub_10182D5  +
pop ebp  +
retn 8  +
***
mov edi edi +
push esi  +
mov esi ecx +
and dword ptr [esi+8] 0 +
mov dword ptr [esi] offset off_1003354 +
mov dword ptr [esi+4] offset off_100332C +
mov ecx dword_1031644 +
mov eax [ecx] +
call dword ptr [eax+4]  +
mov eax esi +
pop esi  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
test esi esi +
jnz loc_1018984  +
xor eax eax +
jmp loc_10189A7  +
mov eax [ebp+arg_4] +
push edi  +
mov edi [esi] +
and dword ptr [esi] 0 +
test eax eax +
jz loc_101899A  +
mov ecx [eax] +
push esi  +
push [ebp+arg_8]  +
push eax  +
call dword ptr [ecx]  +
test edi edi +
jz loc_10189A4  +
mov eax [edi] +
push edi  +
call dword ptr [eax+8]  +
mov eax [esi] +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
mov eax [esi] +
push edi  +
mov edi [ebp+arg_0] +
cmp eax edi +
jz loc_10189CC  +
push eax  +
call ds:SysFreeString  +
mov [esi] edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+0Ch] +
test eax eax +
jnz loc_10189EA  +
mov eax 80004003h +
jmp loc_10189F2  +
mov dword ptr [eax] 1 +
xor eax eax +
pop ebp  +
retn 8  +
***
mov eax ecx +
and dword ptr [eax] 0 +
and dword ptr [eax+4] 0 +
or dword ptr [eax+8] 0FFFFFFFFh +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
mov esi ecx +
mov [esi] eax +
test eax eax +
jz loc_1018A25  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
mov eax [ebp+arg_0] +
mov ecx [eax] +
push offset dword_10033C8  +
push eax  +
call dword ptr [ecx]  +
pop ebp  +
retn 8  +
***
mov byte ptr [esi+4] 0 +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push offset off_1003368  +
push ecx  +
call sub_1017628  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
inc dword ptr [eax+8]  +
mov eax [eax+8] +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+8] +
dec dword ptr [ecx+8]  +
push esi  +
mov esi [ecx+8] +
jnz loc_1018AB9  +
test ecx ecx +
jz loc_1018AB9  +
mov eax [ecx] +
push 1  +
call dword ptr [eax+10h]  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+10h]  +
mov ecx [ebp+8] +
push dword ptr [ebp+0Ch]  +
call sub_1018A67  +
pop ebp  +
retn 0Ch  +
***
sub dword ptr [esp+4] 4 +
jmp loc_1018A9D  +
***
sub dword ptr [esp+4] 4 +
jmp loc_1018A86  +
***
sub dword ptr [esp+4] 4 +
jmp loc_1018AC5  +
***
call __EH_prolog3_catch  +
mov ebx ecx +
mov [ebp-18h] ebx +
mov edi [ebp+8] +
mov eax [edi] +
lea ecx [ebp-24h] +
push ecx  +
push edi  +
call dword ptr [eax+0Ch]  +
xor ecx ecx +
cmp eax ecx +
jl loc_1018C7C  +
mov eax [ebp-24h] +
movzx eax word ptr [eax+2Ch] +
mov esi eax +
mov [ebp-1Ch] ecx +
mov [ebx+18h] eax +
mov [ebx+14h] ecx +
cmp esi ecx +
jz loc_1018BD0  +
push 0Ch  +
pop edx  +
mul  edx +
mov [ebp-4] ecx +
seto cl  +
neg ecx  +
or ecx eax +
xor eax eax +
add ecx 4 +
setb al  +
neg eax  +
or eax ecx +
push eax  +
call sub_101B598  +
pop ecx  +
mov [ebp-20h] eax +
mov byte ptr [ebp-4] 1 +
test eax eax +
jz loc_1018B97  +
push (offset loc_1005454+1)  +
push offset loc_10189FB  +
push esi  +
lea edi [eax+4] +
push 0Ch  +
push edi  +
mov [eax] esi +
call ??_L@YGXPAXIHP6EX0@Z1@Z  +
jmp loc_1018B99  +
xor edi edi +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov [ebp-1Ch] edi +
jmp loc_1018BAF  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov eax offset loc_1018BAC +
retn   +
mov ebx [ebp-18h] +
cmp dword ptr [ebp-1Ch] 0 +
jnz loc_1018BCB  +
mov eax [ebp+8] +
push dword ptr [ebp-24h]  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4Ch]  +
mov eax 8007000Eh +
jmp loc_1018C7E  +
mov edi [ebp+8] +
xor ecx ecx +
cmp [ebx+18h] ecx +
mov [ebp-18h] ecx +
jle loc_1018C6D  +
mov esi [ebp-1Ch] +
add esi 8 +
jmp loc_1018BE6  +
xor ecx ecx +
mov [esi-4] ecx +
mov [esi] ecx +
mov eax [edi] +
lea ecx [ebp-20h] +
push ecx  +
push dword ptr [ebp-18h]  +
push edi  +
call dword ptr [eax+14h]  +
test eax eax +
jl loc_1018C5B  +
xor eax eax +
mov [ebp-14h] eax +
mov ecx [edi] +
push eax  +
push eax  +
push eax  +
lea eax [ebp-14h] +
push eax  +
mov eax [ebp-20h] +
push dword ptr [eax]  +
mov dword ptr [ebp-4] 3 +
push edi  +
call dword ptr [ecx+30h]  +
test eax eax +
jl loc_1018C45  +
mov eax [ebp-14h] +
and dword ptr [ebp-14h] 0 +
lea edi [esi-8] +
push eax  +
mov ecx edi +
call sub_10189B1  +
push dword ptr [edi]  +
call ds:SysStringLen  +
mov edi [ebp+8] +
mov [esi-4] eax +
mov eax [ebp-20h] +
mov eax [eax] +
mov [esi] eax +
push dword ptr [ebp-20h]  +
mov eax [edi] +
push edi  +
call dword ptr [eax+50h]  +
push dword ptr [ebp-14h]  +
or dword ptr [ebp-4] 0FFFFFFFFh +
call ds:SysFreeString  +
inc dword ptr [ebp-18h]  +
mov eax [ebp-18h] +
add esi 0Ch +
cmp eax [ebx+18h] +
jl loc_1018BE4  +
mov eax [ebp-1Ch] +
push dword ptr [ebp-24h]  +
mov [ebx+14h] eax +
mov eax [edi] +
push edi  +
call dword ptr [eax+4Ch]  +
xor eax eax +
call __EH_epilog3  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+8] +
test esi esi +
jz loc_1018CBB  +
mov eax [esi+0Ch] +
test eax eax +
jz loc_1018CA5  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov ecx [esi+14h] +
and dword ptr [esi+0Ch] 0 +
test ecx ecx +
jz loc_1018CB7  +
push 3  +
call sub_1005463  +
and dword ptr [esi+14h] 0 +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax [ecx] +
push edi  +
test eax eax +
jnz loc_1018CED  +
cmp [ebp+arg_0] eax +
jnz loc_1018D3D  +
mov al 1 +
jmp loc_1018D3F  +
mov edi [ebp+arg_0] +
test edi edi +
jz loc_1018D3D  +
and [ebp+var_4] 0 +
and [ebp+var_8] 0 +
mov ecx [eax] +
push esi  +
lea edx [ebp+var_4] +
push edx  +
mov esi offset dword_1002F34 +
push esi  +
push eax  +
call dword ptr [ecx]  +
mov eax [edi] +
lea ecx [ebp+var_8] +
push ecx  +
push esi  +
push edi  +
call dword ptr [eax]  +
mov eax [ebp+var_8] +
cmp [ebp+var_4] eax +
pop esi  +
setz byte ptr [ebp+arg_0+3]  +
test eax eax +
jz loc_1018D2B  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+var_4] +
test eax eax +
jz loc_1018D38  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov al byte ptr [ebp+arg_0+3] +
jmp loc_1018D3F  +
xor al al +
pop edi  +
leave   +
retn 4  +
***
mov dword ptr [ecx] offset off_1003354 +
mov dword ptr [ecx+4] offset off_100332C +
mov dword ptr [ecx+8] 0C0000001h +
call sub_101B54A  +
mov ecx dword_1031644 +
mov eax [ecx] +
jmp dword ptr [eax+8]  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1018D49  +
test byte ptr [ebp+8] 1 +
jz loc_1018D8C  +
push esi  +
call sub_101B5A8  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call __EH_prolog3_catch  +
mov edi [ebp+8] +
test edi edi +
jnz loc_1018DB2  +
mov eax 80070057h +
jmp loc_1018E0B  +
and dword ptr [ebp-14h] 0 +
and dword ptr [ebp-4] 0 +
push 0Ch  +
call sub_101B56A  +
pop ecx  +
mov esi eax +
jmp loc_1018DD2  +
mov eax offset loc_1018DCC +
retn   +
mov edi [ebp+8] +
mov esi [ebp-14h] +
test esi esi +
jnz loc_1018DDF  +
mov dword ptr [ebp+8] 8007000Eh +
jmp loc_1018E08  +
mov eax [ebp+0Ch] +
mov [esi] eax +
mov eax [ebp+10h] +
mov [esi+4] eax +
lea ebx [edi+0Ch] +
push ebx  +
call ds:EnterCriticalSection  +
mov eax [edi+8] +
and dword ptr [ebp+8] 0 +
mov [esi+8] eax +
push ebx  +
mov [edi+8] esi +
call ds:LeaveCriticalSection  +
mov eax [ebp+8] +
call __EH_epilog3  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
push dword ptr [esi]  +
mov edi ecx +
call sub_1018CD6  +
test al al +
jnz loc_1018E3F  +
mov esi [esi] +
push offset dword_10033D8  +
push esi  +
push edi  +
call sub_1018973  +
jmp loc_1018E41  +
mov eax [edi] +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
mov eax ecx +
push [ebp+arg_0]  +
add ecx 4 +
neg eax  +
sbb eax eax +
and eax ecx +
push eax  +
call sub_1018D98  +
pop ebp  +
retn 8  +
***
call __EH_prolog3_GS  +
mov esi ecx +
xor ebx ebx +
cmp [esi+0Ch] ebx +
jz loc_1018E95  +
cmp [esi+14h] ebx +
jz loc_1018E95  +
xor eax eax +
jmp loc_1019080  +
mov eax dword_1031644 +
add eax 10h +
mov [ebp-234h] eax +
push eax  +
mov [ebp-4] ebx +
call ds:EnterCriticalSection  +
mov byte ptr [ebp-230h] 1 +
mov dword ptr [ebp-21Ch] 80004005h +
cmp [esi+0Ch] ebx +
jnz loc_101904E  +
mov edi [esi+4] +
push edi  +
push offset unk_1031648  +
mov [ebp-22Ch] ebx +
call sub_101521A  +
test eax eax +
jz loc_1018F48  +
mov eax 0FFFFh +
mov ecx eax +
cmp [esi+8] cx +
jnz loc_1018F48  +
cmp [esi+0Ah] ax +
jnz loc_1018F48  +
mov edi 104h +
push edi  +
lea eax [ebp-218h] +
push eax  +
push dword_1036A94  +
call ds:GetModuleFileNameW  +
cmp eax ebx +
jz loc_1019054  +
cmp eax edi +
jz loc_1019054  +
lea eax [ebp-22Ch] +
push eax  +
lea eax [ebp-218h] +
push eax  +
mov [ebp-220h] ebx +
call ds:LoadTypeLib  +
lea ecx [ebp-220h] +
mov [ebp-21Ch] eax +
call sub_10162D9  +
jmp loc_1018F69  +
lea eax [ebp-22Ch] +
push eax  +
push dword ptr [ebp+8]  +
movzx eax word ptr [esi+0Ah] +
push eax  +
movzx eax word ptr [esi+8] +
push eax  +
push edi  +
call ds:LoadRegTypeLib  +
mov [ebp-21Ch] eax +
cmp [ebp-21Ch] ebx +
jl loc_1019054  +
mov [ebp-224h] ebx +
mov eax [ebp-22Ch] +
mov ecx [eax] +
lea edx [ebp-224h] +
push edx  +
push dword ptr [esi]  +
mov byte ptr [ebp-4] 1 +
push eax  +
call dword ptr [ecx+18h]  +
cmp eax ebx +
mov [ebp-21Ch] eax +
jl loc_101902D  +
push dword ptr [ebp-224h]  +
lea ecx [ebp-228h] +
call sub_1018A0E  +
mov [ebp-220h] ebx +
lea eax [ebp-220h] +
push eax  +
push dword ptr [ebp-224h]  +
mov byte ptr [ebp-4] 3 +
call sub_1018A31  +
test eax eax +
jl loc_1018FE5  +
lea eax [ebp-220h] +
push eax  +
lea ecx [ebp-228h] +
call sub_1018E18  +
mov eax [ebp-228h] +
push esi  +
mov [esi+0Ch] eax +
mov ecx dword_1031644 +
push offset loc_1018C8B  +
mov [ebp-228h] ebx +
call sub_1018E4C  +
mov eax [ebp-220h] +
mov byte ptr [ebp-4] 2 +
cmp eax ebx +
jz loc_1019019  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-228h] +
mov byte ptr [ebp-4] 1 +
cmp eax ebx +
jz loc_101902D  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-22Ch] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-224h] +
mov [ebp-4] bl +
cmp eax ebx +
jz loc_1019054  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
jmp loc_1019054  +
mov [ebp-21Ch] ebx +
mov eax [esi+0Ch] +
cmp eax ebx +
jz loc_101906E  +
cmp [esi+14h] ebx +
jnz loc_101906E  +
push eax  +
mov ecx esi +
call sub_1018B0E  +
mov [ebp-21Ch] eax +
push dword ptr [ebp-234h]  +
call ds:LeaveCriticalSection  +
mov eax [ebp-21Ch] +
call sub_101BE3E  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_4] +
mov esi ecx +
test edi edi +
jnz loc_10190A4  +
mov eax 80004003h +
jmp loc_10190C9  +
xor eax eax +
cmp [esi+0Ch] eax +
jnz loc_10190B3  +
push [ebp+arg_0]  +
call sub_1018E71  +
mov ecx [esi+0Ch] +
mov [edi] ecx +
cmp dword ptr [esi+0Ch] 0 +
jz loc_10190C9  +
mov esi [esi+0Ch] +
mov eax [esi] +
push esi  +
call dword ptr [eax+4]  +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
cmp [ecx+0Ch] eax +
jz loc_10190E5  +
cmp [ecx+14h] eax +
jnz loc_10190EB  +
pop ebp  +
jmp sub_1018E71  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
jz loc_1019106  +
mov eax 8002000Bh +
jmp loc_1019111  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
call sub_101908D  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push ebx  +
push [ebp+arg_C]  +
mov ebx ecx +
call sub_10190D4  +
cmp dword ptr [ebx+0Ch] 0 +
jz loc_10191B1  +
cmp dword ptr [ebx+14h] 0 +
push esi  +
push edi  +
jz loc_101919D  +
cmp [ebp+arg_8] 1 +
jnz loc_101919D  +
mov eax [ebp+arg_4] +
push dword ptr [eax]  +
call ds:lstrlenW  +
mov edx [ebx+18h] +
dec edx  +
mov [ebp+var_8] eax +
js loc_101919D  +
mov ecx [ebx+14h] +
mov eax edx +
imul eax eax +
mov [ebp+var_C] ecx +
lea ecx [eax+ecx+4] +
mov [ebp+arg_C] eax +
mov [ebp+var_4] ecx +
mov eax [ebp+var_8] +
cmp eax [ecx] +
jnz loc_101918B  +
mov ecx [ebp+arg_C] +
mov eax [ebx+14h] +
mov esi [ebp+arg_4] +
mov edi [esi] +
add eax ecx +
mov ecx [eax+4] +
mov esi [eax] +
add ecx ecx +
xor eax eax +
cmps   +
jz loc_10191B6  +
mov ecx [ebp+var_4] +
sub [ebp+arg_C] 0Ch +
dec edx  +
sub ecx 0Ch +
mov [ebp+var_4] ecx +
test edx edx +
jge loc_101916A  +
push [ebp+arg_10]  +
mov ebx [ebx+0Ch] +
push [ebp+arg_8]  +
mov eax [ebx] +
push [ebp+arg_4]  +
push ebx  +
call dword ptr [eax+28h]  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 14h  +
mov eax [ebp+var_C] +
imul edx edx +
mov eax [edx+eax+8] +
mov ecx [ebp+arg_10] +
mov [ecx] eax +
xor eax eax +
jmp loc_10191AF  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push dword ptr [ebp+14h]  +
mov esi ecx +
call sub_10190D4  +
cmp dword ptr [esi+0Ch] 0 +
jz loc_1019202  +
push dword ptr [ebp+28h]  +
mov eax [esi+0Ch] +
push dword ptr [ebp+24h]  +
mov ecx [eax] +
push dword ptr [ebp+20h]  +
push dword ptr [ebp+1Ch]  +
push dword ptr [ebp+18h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push eax  +
call dword ptr [ecx+2Ch]  +
pop esi  +
pop ebp  +
retn 24h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+14h]  +
mov ecx offset off_10300F8 +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
call sub_10190F4  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+1Ch]  +
mov ecx offset off_10300F8 +
push dword ptr [ebp+18h]  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
call sub_101911A  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx offset off_10300F8 +
pop ebp  +
jmp loc_10191CE  +
***
call __EH_prolog3_catch_GS  +
mov eax [ebp+8] +
mov edi [ebp+0Ch] +
mov ebx [ebp+10h] +
xor esi esi +
mov [ebp-424h] esi +
mov [ebp-4] esi +
mov [ebp-42Ch] ecx +
mov [ebp-430h] esi +
mov [ebp-418h] esi +
push 2  +
push esi  +
push eax  +
mov byte ptr [ebp-4] 1 +
call ds:LoadLibraryExW  +
mov [ebp-41Ch] eax +
cmp eax esi +
jnz loc_10192C2  +
call sub_10156BF  +
mov esi eax +
jmp loc_10193CB  +
push ebx  +
push edi  +
push eax  +
call ds:FindResourceW  +
mov edi eax +
cmp edi esi +
jnz loc_10192DB  +
call sub_10156BF  +
jmp loc_10193BD  +
push edi  +
push dword ptr [ebp-41Ch]  +
call ds:LoadResource  +
mov [ebp-428h] eax +
cmp eax esi +
jz loc_10192D1  +
push edi  +
push dword ptr [ebp-41Ch]  +
call ds:SizeofResource  +
mov edi eax +
lea eax [edi+1] +
mov [ebp-420h] edi +
cmp eax edi +
jnb loc_1019341  +
lea eax [ebp-414h] +
cmp [ebp-418h] eax +
jz loc_1019327  +
lea ecx [ebp-418h] +
call sub_10163CA  +
mov esi 8007000Eh +
lea ecx [ebp-424h] +
call sub_10162D9  +
mov eax esi +
call sub_101BE52  +
retn 10h  +
push eax  +
lea ecx [ebp-418h] +
mov byte ptr [ebp-4] 2 +
call sub_1017322  +
mov dword ptr [ebp-4] 1 +
jmp loc_101936F  +
mov dword ptr [ebp-4] 1 +
mov eax offset loc_1019367 +
retn   +
mov edi [ebp-420h] +
xor esi esi +
cmp [ebp-418h] esi +
jnz loc_101937E  +
mov esi 8007000Eh +
jmp loc_10193BF  +
push edi  +
push dword ptr [ebp-418h]  +
push edi  +
push dword ptr [ebp-428h]  +
push esi  +
push 3  +
call ds:MultiByteToWideChar  +
cmp eax esi +
jz loc_10192D1  +
mov edx [ebp-418h] +
push dword ptr [ebp+14h]  +
xor ecx ecx +
mov [edx+eax*2] cx +
push dword ptr [ebp-418h]  +
lea ecx [ebp-430h] +
call sub_10186DE  +
mov esi eax +
push dword ptr [ebp-41Ch]  +
call ds:FreeLibrary  +
lea eax [ebp-414h] +
cmp [ebp-418h] eax +
jz loc_101932C  +
lea ecx [ebp-418h] +
call sub_10163CA  +
jmp loc_101932C  +
***
call __EH_prolog3  +
and dword ptr [ebp-10h] 0 +
movzx eax word ptr [ebp+10h] +
mov ecx [ebp+8] +
and dword ptr [ebp-4] 0 +
push 1  +
push dword ptr [ebp+14h]  +
push eax  +
push dword ptr [ebp+0Ch]  +
call sub_1019269  +
lea ecx [ebp-10h] +
mov esi eax +
call sub_10162D9  +
mov eax esi +
call __EH_epilog3  +
retn 10h  +
***
call __EH_prolog3  +
xor eax eax +
mov [ebp-10h] eax +
mov ecx [ebp+8] +
push eax  +
push dword ptr [ebp+14h]  +
mov [ebp-4] eax +
movzx eax word ptr [ebp+10h] +
push eax  +
push dword ptr [ebp+0Ch]  +
call sub_1019269  +
lea ecx [ebp-10h] +
mov esi eax +
call sub_10162D9  +
mov eax esi +
call __EH_epilog3  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0A4Ch +
mov eax dword_1030118 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
xor ebx ebx +
push esi  +
mov esi [ebp+arg_C] +
push edi  +
mov edi [ebp+arg_0] +
mov [ebp+var_A4C] offset off_10031B0 +
mov [ebp+var_A48] ebx +
mov [ebp+var_A44] ebx +
mov [ebp+var_A40] ebx +
cmp esi ebx +
jz loc_10194D0  +
jmp loc_10194CA  +
push dword ptr [esi+4]  +
push eax  +
lea eax [ebp+var_A4C] +
push eax  +
call sub_101787B  +
add esi 8 +
mov eax [esi] +
cmp eax ebx +
jnz loc_10194B7  +
mov eax [edi] +
lea ecx [ebp+var_A4C] +
push ecx  +
mov ecx edi +
call dword ptr [eax+14h]  +
cmp eax ebx +
jge loc_1019502  +
mov esi eax +
lea ecx [ebp+var_A4C] +
call sub_1016BBC  +
mov ecx [ebp+var_4] +
pop edi  +
mov eax esi +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_101BC5D  +
leave   +
retn 10h  +
mov edi dword_1036A94 +
mov esi 104h +
push esi  +
lea eax [ebp+Filename] +
push eax  +
push edi  +
mov [ebp+var_A38] ebx +
call ds:GetModuleFileNameW  +
cmp eax ebx +
jnz loc_101953A  +
call sub_10156BF  +
mov esi eax +
lea ecx [ebp+var_A38] +
call sub_10162D9  +
jmp loc_10194E4  +
cmp eax esi +
jnz loc_1019550  +
lea ecx [ebp+var_A38] +
call sub_10162D9  +
mov esi 8007007Ah +
jmp loc_10194E4  +
lea eax [ebp+Filename] +
push eax  +
push 208h  +
lea eax [ebp+var_A34] +
push eax  +
call sub_1015A17  +
cmp edi ebx +
jz loc_101957F  +
push ebx  +
call ds:GetModuleHandleW  +
cmp edi eax +
jz loc_101957F  +
lea eax [ebp+var_A34] +
jmp loc_10195E4  +
push 22h  +
pop eax  +
mov [ebp+String] ax +
lea eax [ebp+var_A34] +
push eax  +
push 20Bh  +
lea eax [ebp-622h] +
push eax  +
call sub_1015317  +
test al al +
jnz loc_10195BA  +
lea ecx [ebp+var_A38] +
call sub_10162D9  +
mov esi 80004005h +
jmp loc_10194E4  +
lea eax [ebp+String] +
push eax  +
call ds:lstrlenW  +
add eax eax +
push 22h  +
pop ecx  +
mov [ebp+eax+String] cx +
xor ecx ecx +
mov [ebp+eax-622h] cx +
lea eax [ebp+String] +
push eax  +
push offset aModule  +
lea eax [ebp+var_A4C] +
push eax  +
call sub_101787B  +
mov esi eax +
cmp esi ebx +
jl loc_101952D  +
lea eax [ebp+var_A34] +
push eax  +
push offset aModule_raw  +
lea eax [ebp+var_A4C] +
push eax  +
call sub_101787B  +
mov esi eax +
cmp esi ebx +
jl loc_101952D  +
push offset aRegistry  +
push [ebp+arg_4]  +
lea eax [ebp+Filename] +
push eax  +
lea eax [ebp+var_A4C] +
push eax  +
cmp [ebp+arg_8] ebx +
jz loc_1019647  +
call sub_10193F2  +
jmp loc_101952B  +
call sub_1019434  +
jmp loc_101952B  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+arg_0]  +
push 1F5h  +
push dword_1031644  +
call sub_1019475  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
and [ebp+var_8] 0 +
and [ebp+var_4] 0 +
lea eax [ebp+var_10] +
push eax  +
push [ebp+arg_0]  +
mov [ebp+var_10] offset aAppid +
push 1F6h  +
push dword_1031644  +
mov [ebp+var_C] offset a3a74d60d33f145 +
call sub_1019475  +
leave   +
retn 4  +
***
call __EH_prolog3_catch  +
mov eax [ebp+10h] +
xor esi esi +
cmp eax esi +
jnz loc_10196D3  +
mov eax 80004003h +
jmp loc_101974D  +
mov edi 8007000Eh +
push 464h  +
mov [eax] esi +
mov [ebp-14h] edi +
mov [ebp-18h] esi +
mov [ebp-4] esi +
call sub_101B56A  +
pop ecx  +
cmp eax esi +
jz loc_10196FE  +
push dword ptr [ebp+8]  +
mov ecx eax +
call sub_1018947  +
mov esi eax +
or dword ptr [ebp-4] 0FFFFFFFFh +
jmp loc_1019714  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov eax offset loc_101970E +
retn   +
mov edi [ebp-14h] +
mov esi [ebp-18h] +
test esi esi +
jz loc_101974B  +
inc dword ptr [esi+8]  +
mov ecx esi +
call sub_101AF86  +
mov edi eax +
test edi edi +
jl loc_101972A  +
xor edi edi +
dec dword ptr [esi+8]  +
test edi edi +
jnz loc_1019742  +
push dword ptr [ebp+10h]  +
mov eax [esi] +
push dword ptr [ebp+0Ch]  +
push esi  +
call dword ptr [eax]  +
mov edi eax +
test edi edi +
jz loc_101974B  +
mov eax [esi] +
push 1  +
mov ecx esi +
call dword ptr [eax+10h]  +
mov eax edi +
call __EH_epilog3  +
retn 0Ch  +
***
push ebp  +
mov ebp esp +
cmp dword ptr [ebp+8] 0 +
jnz loc_1019776  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push 0  +
call sub_10196B7  +
pop ebp  +
retn 0Ch  +
***
pop ebp  +
jmp loc_10158B5  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov eax dword_1030118 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push ebx  +
mov ebx [ebp+arg_4] +
and dword ptr [ebx] 0 +
push esi  +
push edi  +
mov [ebp+var_10] ecx +
mov esi offset asc_100343C +
lea edi [ebp+sz] +
movs   +
lea ecx [ebp+sz] +
push ecx  +
push eax  +
movs   +
call sub_1015A6F  +
xor edi edi +
jmp loc_10197E3  +
push offset sz  +
push esi  +
call sub_1015ABD  +
test eax eax +
jz loc_10197FC  +
push offset aRegserver  +
push esi  +
call sub_1015ABD  +
test eax eax +
jz loc_1019819  +
lea eax [ebp+sz] +
push eax  +
push esi  +
call sub_1015A6F  +
mov esi eax +
cmp esi edi +
jnz loc_10197BB  +
mov al 1 +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_101BC5D  +
leave   +
retn 8  +
mov ecx [ebp+var_10] +
push edi  +
push 1  +
call sub_101891A  +
cmp eax edi +
mov [ebx] eax +
jl loc_1019815  +
push edi  +
call sub_1019679  +
mov [ebx] eax +
xor al al +
jmp loc_10197EB  +
push 1  +
call sub_1019679  +
cmp eax edi +
mov [ebx] eax +
jl loc_1019815  +
mov ecx [ebp+var_10] +
push edi  +
push 1  +
call sub_10188E6  +
jmp loc_1019813  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1Ch +
mov eax [ebp+arg_4] +
push ebx  +
push esi  +
mov dword ptr [eax] 80004005h +
lea eax [ebp+pNumArgs] +
xor esi esi +
push eax  +
push [ebp+lpCmdLine]  +
mov ebx ecx +
mov [ebp+pNumArgs] esi +
mov [ebp+var_1] 0 +
mov [ebp+var_14] esi +
mov [ebp+var_10] esi +
mov [ebp+var_18] esi +
call ds:CommandLineToArgvW  +
mov [ebp+hMem] eax +
cmp eax esi +
jnz loc_10198A4  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_101AAAB  +
test byte ptr [eax+1Ch] 1 +
jz loc_101AAAB  +
push offset dword_1002DE4  +
push 0Ah  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10054B7  +
jmp loc_101AAAB  +
push edi  +
xor edi edi +
inc edi  +
cmp [ebp+pNumArgs] edi +
jnz loc_10198B3  +
mov [ebx+494h] edi +
jle loc_101A42E  +
mov eax [ebp+hMem] +
mov ecx [eax+edi*4] +
mov eax ecx +
lea esi [eax+2] +
mov dx [eax] +
inc eax  +
inc eax  +
test dx dx +
jnz loc_10198C4  +
sub eax esi +
sar eax 1 +
cmp eax 2 +
jb loc_101A468  +
movzx eax word ptr [ecx] +
cmp ax 2Dh +
jz loc_10198EE  +
cmp ax 2Fh +
jnz loc_101A498  +
lea esi [ecx+2] +
push offset a?  +
push esi  +
call ds:_wcsicmp  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_101A88C  +
push offset aHelp  +
push esi  +
call ds:_wcsicmp  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_101A88C  +
push offset aEmbedding  +
push esi  +
call ds:_wcsicmp  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_101A8D3  +
push offset aAutomation  +
push esi  +
call ds:_wcsicmp  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_101A8D3  +
push offset aRegserver  +
push esi  +
call ds:_wcsicmp  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_101A8D3  +
push offset aUnregserver  +
push esi  +
call ds:_wcsicmp  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_101A8D3  +
push offset aStart  +
push esi  +
call ds:_wcsicmp  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_10199A5  +
cmp [ebx+49Ch] eax +
jnz loc_101A4C8  +
inc eax  +
mov [ebx+498h] eax +
mov [ebx+494h] eax +
jmp loc_101A424  +
push offset aStop  +
push esi  +
call ds:_wcsicmp  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_10199D5  +
cmp [ebx+498h] eax +
jnz loc_101A4F5  +
inc eax  +
mov [ebx+494h] eax +
mov [ebx+49Ch] eax +
jmp loc_101A424  +
push offset aSc  +
push esi  +
call ds:_wcsicmp  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_1019A81  +
inc edi  +
mov dword ptr [ebx+494h] 1 +
cmp edi [ebp+pNumArgs] +
jz loc_101A522  +
mov eax [ebp+hMem] +
mov esi [eax+edi*4] +
mov ecx offset a0 +
mov eax esi +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_1019A32  +
test dx dx +
jz loc_1019A2E  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_1019A32  +
add eax 4 +
add ecx 4 +
test dx dx +
jnz loc_1019A0C  +
xor eax eax +
jmp loc_1019A37  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
test eax eax +
jz loc_1019A79  +
mov ecx offset a1 +
mov eax esi +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_1019A68  +
test dx dx +
jz loc_1019A64  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_1019A68  +
add eax 4 +
add ecx 4 +
test dx dx +
jnz loc_1019A42  +
xor eax eax +
jmp loc_1019A6D  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
test eax eax +
jnz loc_101A88C  +
inc eax  +
mov [ebp+var_10] eax +
mov [ebx+40h] eax +
jmp loc_101A424  +
push offset aGui  +
push esi  +
call ds:_wcsicmp  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_1019B2A  +
inc edi  +
mov dword ptr [ebx+494h] 1 +
cmp edi [ebp+pNumArgs] +
jz loc_101A54F  +
mov eax [ebp+hMem] +
mov esi [eax+edi*4] +
mov ecx offset a0 +
mov eax esi +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_1019ADE  +
test dx dx +
jz loc_1019ADA  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_1019ADE  +
add eax 4 +
add ecx 4 +
test dx dx +
jnz loc_1019AB8  +
xor eax eax +
jmp loc_1019AE3  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
test eax eax +
jz loc_1019B22  +
mov ecx offset a1 +
mov eax esi +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_1019B14  +
test dx dx +
jz loc_1019B10  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_1019B14  +
add eax 4 +
add ecx 4 +
test dx dx +
jnz loc_1019AEE  +
xor eax eax +
jmp loc_1019B19  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
test eax eax +
jnz loc_101A88C  +
inc eax  +
mov [ebx+44h] eax +
jmp loc_101A424  +
push offset aNoarc  +
push esi  +
call ds:_wcsicmp  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_1019BD3  +
inc edi  +
mov dword ptr [ebx+494h] 1 +
cmp edi [ebp+pNumArgs] +
jz loc_101A57C  +
mov eax [ebp+hMem] +
mov esi [eax+edi*4] +
mov ecx offset a0 +
mov eax esi +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_1019B87  +
test dx dx +
jz loc_1019B83  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_1019B87  +
add eax 4 +
add ecx 4 +
test dx dx +
jnz loc_1019B61  +
xor eax eax +
jmp loc_1019B8C  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
test eax eax +
jz loc_1019BCB  +
mov ecx offset a1 +
mov eax esi +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_1019BBD  +
test dx dx +
jz loc_1019BB9  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_1019BBD  +
add eax 4 +
add ecx 4 +
test dx dx +
jnz loc_1019B97  +
xor eax eax +
jmp loc_1019BC2  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
test eax eax +
jnz loc_101A88C  +
inc eax  +
mov [ebx+54h] eax +
jmp loc_101A424  +
push offset aArcetl  +
push esi  +
call ds:_wcsicmp  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_1019C7C  +
inc edi  +
mov dword ptr [ebx+494h] 1 +
cmp edi [ebp+pNumArgs] +
jz loc_101A5A9  +
mov eax [ebp+hMem] +
mov esi [eax+edi*4] +
mov ecx offset a0 +
mov eax esi +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_1019C30  +
test dx dx +
jz loc_1019C2C  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_1019C30  +
add eax 4 +
add ecx 4 +
test dx dx +
jnz loc_1019C0A  +
xor eax eax +
jmp loc_1019C35  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
test eax eax +
jz loc_1019C74  +
mov ecx offset a1 +
mov eax esi +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_1019C66  +
test dx dx +
jz loc_1019C62  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_1019C66  +
add eax 4 +
add ecx 4 +
test dx dx +
jnz loc_1019C40  +
xor eax eax +
jmp loc_1019C6B  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
test eax eax +
jnz loc_101A88C  +
inc eax  +
mov [ebx+58h] eax +
jmp loc_101A424  +
push offset aArcxml  +
push esi  +
call ds:_wcsicmp  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_1019D25  +
inc edi  +
mov dword ptr [ebx+494h] 1 +
cmp edi [ebp+pNumArgs] +
jz loc_101A5D6  +
mov eax [ebp+hMem] +
mov esi [eax+edi*4] +
mov ecx offset a0 +
mov eax esi +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_1019CD9  +
test dx dx +
jz loc_1019CD5  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_1019CD9  +
add eax 4 +
add ecx 4 +
test dx dx +
jnz loc_1019CB3  +
xor eax eax +
jmp loc_1019CDE  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
test eax eax +
jz loc_1019D1D  +
mov ecx offset a1 +
mov eax esi +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_1019D0F  +
test dx dx +
jz loc_1019D0B  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_1019D0F  +
add eax 4 +
add ecx 4 +
test dx dx +
jnz loc_1019CE9  +
xor eax eax +
jmp loc_1019D14  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
test eax eax +
jnz loc_101A88C  +
inc eax  +
mov [ebx+5Ch] eax +
jmp loc_101A424  +
push offset aArcmht  +
push esi  +
call ds:_wcsicmp  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_1019DD1  +
inc edi  +
mov dword ptr [ebx+494h] 1 +
cmp edi [ebp+pNumArgs] +
jz loc_101A603  +
mov eax [ebp+hMem] +
mov esi [eax+edi*4] +
mov ecx offset a0 +
mov eax esi +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_1019D82  +
test dx dx +
jz loc_1019D7E  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_1019D82  +
add eax 4 +
add ecx 4 +
test dx dx +
jnz loc_1019D5C  +
xor eax eax +
jmp loc_1019D87  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
test eax eax +
jz loc_1019DC9  +
mov ecx offset a1 +
mov eax esi +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_1019DB8  +
test dx dx +
jz loc_1019DB4  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_1019DB8  +
add eax 4 +
add ecx 4 +
test dx dx +
jnz loc_1019D92  +
xor eax eax +
jmp loc_1019DBD  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
test eax eax +
jnz loc_101A88C  +
inc eax  +
mov [ebx+64h] eax +
mov [ebx+60h] eax +
jmp loc_101A424  +
push offset aMaxsc  +
push esi  +
call ds:_wcsicmp  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_1019E4A  +
inc edi  +
mov dword ptr [ebx+494h] 1 +
cmp edi [ebp+pNumArgs] +
jz loc_101A630  +
mov eax [ebp+hMem] +
push dword ptr [eax+edi*4]  +
call ds:_wtoi  +
pop ecx  +
mov [ebx+80h] eax +
test eax eax +
jnz loc_101A424  +
cmp [ebx+44h] eax +
jz loc_1019E21  +
push 6Ah  +
push 72h  +
push eax  +
call sub_10064B6  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_101AAA1  +
test byte ptr [eax+1Ch] 1 +
jz loc_101AAA1  +
push [ebp+lpCmdLine]  +
push offset dword_1002DE4  +
push 16h  +
jmp loc_101A8C3  +
push offset aElevated  +
push esi  +
call ds:_wcsicmp  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_1019E88  +
xor esi esi +
inc esi  +
mov [ebx+494h] esi +
call sub_100634B  +
test eax eax +
jnz loc_1019E80  +
cmp [ebx+44h] eax +
jz loc_1019E80  +
push 6Ah  +
push 0AFh  +
push eax  +
call sub_10064B6  +
mov [ebp+var_18] esi +
jmp loc_101A424  +
push offset aSketch  +
push esi  +
call ds:_wcsicmp  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_1019F31  +
inc edi  +
mov dword ptr [ebx+494h] 1 +
cmp edi [ebp+pNumArgs] +
jz loc_101A65D  +
mov eax [ebp+hMem] +
mov esi [eax+edi*4] +
mov ecx offset a0 +
mov eax esi +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_1019EE5  +
test dx dx +
jz loc_1019EE1  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_1019EE5  +
add eax 4 +
add ecx 4 +
test dx dx +
jnz loc_1019EBF  +
xor eax eax +
jmp loc_1019EEA  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
test eax eax +
jz loc_1019F29  +
mov ecx offset a1 +
mov eax esi +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_1019F1B  +
test dx dx +
jz loc_1019F17  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_1019F1B  +
add eax 4 +
add ecx 4 +
test dx dx +
jnz loc_1019EF5  +
xor eax eax +
jmp loc_1019F20  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
test eax eax +
jnz loc_101A88C  +
inc eax  +
mov [ebx+48h] eax +
jmp loc_101A424  +
push offset aSlides  +
push esi  +
call ds:_wcsicmp  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_1019FDA  +
inc edi  +
mov dword ptr [ebx+494h] 1 +
cmp edi [ebp+pNumArgs] +
jz loc_101A68A  +
mov eax [ebp+hMem] +
mov esi [eax+edi*4] +
mov ecx offset a0 +
mov eax esi +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_1019F8E  +
test dx dx +
jz loc_1019F8A  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_1019F8E  +
add eax 4 +
add ecx 4 +
test dx dx +
jnz loc_1019F68  +
xor eax eax +
jmp loc_1019F93  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
test eax eax +
jz loc_1019FD2  +
mov ecx offset a1 +
mov eax esi +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_1019FC4  +
test dx dx +
jz loc_1019FC0  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_1019FC4  +
add eax 4 +
add ecx 4 +
test dx dx +
jnz loc_1019F9E  +
xor eax eax +
jmp loc_1019FC9  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
test eax eax +
jnz loc_101A88C  +
inc eax  +
mov [ebx+4Ch] eax +
jmp loc_101A424  +
push offset aMaxlogsize  +
push esi  +
call ds:_wcsicmp  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_101A052  +
inc edi  +
mov dword ptr [ebx+494h] 1 +
cmp edi [ebp+pNumArgs] +
jz loc_101A6B7  +
mov eax [ebp+hMem] +
push dword ptr [eax+edi*4]  +
call ds:_wtoi  +
pop ecx  +
mov [ebx+7Ch] eax +
test eax eax +
jg loc_101A424  +
cmp dword ptr [ebx+44h] 0 +
jz loc_101A029  +
push 6Ah  +
push 65h  +
push 0  +
call sub_10064B6  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_101AAA1  +
test byte ptr [eax+1Ch] 1 +
jz loc_101AAA1  +
push [ebp+lpCmdLine]  +
push offset dword_1002DE4  +
push 1Bh  +
jmp loc_101A8C3  +
push offset aRecordpid  +
push esi  +
call ds:_wcsicmp  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_101A0C3  +
inc edi  +
mov dword ptr [ebx+494h] 1 +
cmp edi [ebp+pNumArgs] +
jz loc_101A6E4  +
mov eax [ebp+hMem] +
push dword ptr [eax+edi*4]  +
call ds:_wtoi  +
pop ecx  +
mov [ebx+78h] eax +
test eax eax +
jnz loc_101A424  +
push 6Ah  +
push 73h  +
push eax  +
call sub_10064B6  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_101AAA1  +
test byte ptr [eax+1Ch] 1 +
jz loc_101AAA1  +
push [ebp+lpCmdLine]  +
push offset dword_1002DE4  +
push 1Dh  +
jmp loc_101A8C3  +
push offset aOutput  +
push esi  +
call ds:_wcsicmp  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_101A116  +
inc edi  +
mov dword ptr [ebx+494h] 1 +
cmp edi [ebp+pNumArgs] +
jz loc_101A711  +
mov eax [ebp+hMem] +
push dword ptr [eax+edi*4]  +
lea eax [ebx+84h] +
push 104h  +
push eax  +
call sub_10066E4  +
mov esi eax +
test esi esi +
jl loc_101A73E  +
mov dword ptr [ebx+68h] 1 +
jmp loc_101A424  +
push offset aUisavedir  +
push esi  +
call ds:_wcsicmp  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_101A1B2  +
inc edi  +
mov dword ptr [ebx+494h] 1 +
cmp edi [ebp+pNumArgs] +
jz loc_101A77F  +
mov eax [ebp+hMem] +
push dword ptr [eax+edi*4]  +
lea esi [ebx+28Ch] +
push 104h  +
push esi  +
call sub_10066E4  +
test eax eax +
jl loc_101A7AC  +
push esi  +
call ds:GetFileAttributesW  +
cmp eax 0FFFFFFFFh +
jnz loc_101A424  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_101A1A8  +
test byte ptr [eax+1Ch] 1 +
jz loc_101A1A8  +
call ds:GetLastError  +
test eax eax +
jnz loc_101A190  +
mov eax 54Fh +
push eax  +
mov eax off_1030000 +
push offset dword_1002DE4  +
push 22h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10062BE  +
xor eax eax +
mov [esi] ax +
jmp loc_101A424  +
push offset aStopevent  +
push esi  +
call ds:_wcsicmp  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_101A22E  +
inc edi  +
mov dword ptr [ebx+494h] 1 +
cmp edi [ebp+pNumArgs] +
jz loc_101A7D8  +
mov eax [ebp+hMem] +
push dword ptr [eax+edi*4]  +
lea eax [ebx+4A0h] +
push 104h  +
push eax  +
call sub_10066E4  +
test eax eax +
jge loc_101A424  +
mov ecx off_1030000 +
cmp ecx offset off_1030000 +
jz loc_101AAA1  +
test byte ptr [ecx+1Ch] 1 +
jz loc_101AAA1  +
movzx eax ax +
push eax  +
push offset dword_1002DE4  +
push 24h  +
push dword ptr [ecx+14h]  +
push dword ptr [ecx+10h]  +
call sub_10062BE  +
jmp loc_101AAA1  +
push offset aWaitonpid  +
push esi  +
call ds:_wcsicmp  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_101A2D7  +
inc edi  +
mov dword ptr [ebx+494h] 1 +
cmp edi [ebp+pNumArgs] +
jz loc_101A805  +
mov eax [ebp+hMem] +
mov esi [eax+edi*4] +
mov ecx offset a0 +
mov eax esi +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_101A28B  +
test dx dx +
jz loc_101A287  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_101A28B  +
add eax 4 +
add ecx 4 +
test dx dx +
jnz loc_101A265  +
xor eax eax +
jmp loc_101A290  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
test eax eax +
jz loc_101A2CF  +
mov ecx offset a1 +
mov eax esi +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_101A2C1  +
test dx dx +
jz loc_101A2BD  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_101A2C1  +
add eax 4 +
add ecx 4 +
test dx dx +
jnz loc_101A29B  +
xor eax eax +
jmp loc_101A2C6  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
test eax eax +
jnz loc_101A88C  +
inc eax  +
mov [ebx+6Ch] eax +
jmp loc_101A424  +
push offset aExitonsave  +
push esi  +
call ds:_wcsicmp  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_101A380  +
inc edi  +
mov dword ptr [ebx+494h] 1 +
cmp edi [ebp+pNumArgs] +
jz loc_101A832  +
mov eax [ebp+hMem] +
mov esi [eax+edi*4] +
mov ecx offset a0 +
mov eax esi +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_101A334  +
test dx dx +
jz loc_101A330  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_101A334  +
add eax 4 +
add ecx 4 +
test dx dx +
jnz loc_101A30E  +
xor eax eax +
jmp loc_101A339  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
test eax eax +
jz loc_101A378  +
mov ecx offset a1 +
mov eax esi +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_101A36A  +
test dx dx +
jz loc_101A366  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_101A36A  +
add eax 4 +
add ecx 4 +
test dx dx +
jnz loc_101A344  +
xor eax eax +
jmp loc_101A36F  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
test eax eax +
jnz loc_101A88C  +
inc eax  +
mov [ebx+74h] eax +
jmp loc_101A424  +
push offset aDiscardoutput  +
push esi  +
call ds:_wcsicmp  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_101A898  +
inc edi  +
mov dword ptr [ebx+494h] 1 +
cmp edi [ebp+pNumArgs] +
jz loc_101A85F  +
mov eax [ebp+hMem] +
mov esi [eax+edi*4] +
mov ecx offset a0 +
mov eax esi +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_101A3DD  +
test dx dx +
jz loc_101A3D9  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_101A3DD  +
add eax 4 +
add ecx 4 +
test dx dx +
jnz loc_101A3B7  +
xor eax eax +
jmp loc_101A3E2  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
test eax eax +
jz loc_101A421  +
mov ecx offset a1 +
mov eax esi +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_101A413  +
test dx dx +
jz loc_101A40F  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_101A413  +
add eax 4 +
add ecx 4 +
test dx dx +
jnz loc_101A3ED  +
xor eax eax +
jmp loc_101A418  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
test eax eax +
jnz loc_101A88C  +
inc eax  +
mov [ebx+70h] eax +
inc edi  +
cmp edi [ebp+pNumArgs] +
jl loc_10198B9  +
cmp dword ptr [ebx+494h] 0 +
jnz loc_101A8E5  +
mov ecx ebx +
call sub_10156A2  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_101AAA1  +
test byte ptr [eax+1Ch] 1 +
jz loc_101AAA1  +
push offset dword_1002DE4  +
push 29h  +
jmp loc_101AA5B  +
mov ecx ebx +
call sub_10156A2  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_101AAA1  +
test byte ptr [eax+1Ch] 1 +
jz loc_101AAA1  +
push [ebp+lpCmdLine]  +
push offset dword_1002DE4  +
push 0Bh  +
jmp loc_101A8C3  +
mov ecx ebx +
call sub_10156A2  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_101AAA1  +
test byte ptr [eax+1Ch] 1 +
jz loc_101AAA1  +
push [ebp+lpCmdLine]  +
push offset dword_1002DE4  +
push 0Ch  +
jmp loc_101A8C3  +
mov ecx ebx +
call sub_10156A2  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_101AAA1  +
test byte ptr [eax+1Ch] 1 +
jz loc_101AAA1  +
push offset dword_1002DE4  +
push 0Dh  +
jmp loc_101AA5B  +
mov ecx ebx +
call sub_10156A2  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_101AAA1  +
test byte ptr [eax+1Ch] 1 +
jz loc_101AAA1  +
push offset dword_1002DE4  +
push 0Eh  +
jmp loc_101AA5B  +
mov ecx ebx +
call sub_10156A2  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_101AAA1  +
test byte ptr [eax+1Ch] 1 +
jz loc_101AAA1  +
push offset dword_1002DE4  +
push 0Fh  +
jmp loc_101AA5B  +
mov ecx ebx +
call sub_10156A2  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_101AAA1  +
test byte ptr [eax+1Ch] 1 +
jz loc_101AAA1  +
push offset dword_1002DE4  +
push 10h  +
jmp loc_101AA5B  +
mov ecx ebx +
call sub_10156A2  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_101AAA1  +
test byte ptr [eax+1Ch] 1 +
jz loc_101AAA1  +
push offset dword_1002DE4  +
push 11h  +
jmp loc_101AA5B  +
mov ecx ebx +
call sub_10156A2  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_101AAA1  +
test byte ptr [eax+1Ch] 1 +
jz loc_101AAA1  +
push offset dword_1002DE4  +
push 12h  +
jmp loc_101AA5B  +
mov ecx ebx +
call sub_10156A2  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_101AAA1  +
test byte ptr [eax+1Ch] 1 +
jz loc_101AAA1  +
push offset dword_1002DE4  +
push 13h  +
jmp loc_101AA5B  +
mov ecx ebx +
call sub_10156A2  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_101AAA1  +
test byte ptr [eax+1Ch] 1 +
jz loc_101AAA1  +
push offset dword_1002DE4  +
push 14h  +
jmp loc_101AA5B  +
mov ecx ebx +
call sub_10156A2  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_101AAA1  +
test byte ptr [eax+1Ch] 1 +
jz loc_101AAA1  +
push offset dword_1002DE4  +
push 15h  +
jmp loc_101AA5B  +
mov ecx ebx +
call sub_10156A2  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_101AAA1  +
test byte ptr [eax+1Ch] 1 +
jz loc_101AAA1  +
push offset dword_1002DE4  +
push 17h  +
jmp loc_101AA5B  +
mov ecx ebx +
call sub_10156A2  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_101AAA1  +
test byte ptr [eax+1Ch] 1 +
jz loc_101AAA1  +
push offset dword_1002DE4  +
push 18h  +
jmp loc_101AA5B  +
mov ecx ebx +
call sub_10156A2  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_101AAA1  +
test byte ptr [eax+1Ch] 1 +
jz loc_101AAA1  +
push offset dword_1002DE4  +
push 1Ah  +
jmp loc_101AA5B  +
mov ecx ebx +
call sub_10156A2  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_101AAA1  +
test byte ptr [eax+1Ch] 1 +
jz loc_101AAA1  +
push offset dword_1002DE4  +
push 1Ch  +
jmp loc_101AA5B  +
mov ecx ebx +
call sub_10156A2  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_101AAA1  +
test byte ptr [eax+1Ch] 1 +
jz loc_101AAA1  +
push offset dword_1002DE4  +
push 1Eh  +
jmp loc_101AA5B  +
cmp dword ptr [ebx+44h] 0 +
jz loc_101A74F  +
push 6Ah  +
push 71h  +
push 0  +
call sub_10064B6  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_101AAA1  +
test byte ptr [eax+1Ch] 1 +
jz loc_101AAA1  +
movzx ecx si +
push ecx  +
push offset dword_1002DE4  +
push 1Fh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
jmp loc_101A224  +
mov ecx ebx +
call sub_10156A2  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_101AAA1  +
test byte ptr [eax+1Ch] 1 +
jz loc_101AAA1  +
push offset dword_1002DE4  +
push 20h  +
jmp loc_101AA5B  +
mov ecx off_1030000 +
cmp ecx offset off_1030000 +
jz loc_101AAA1  +
test byte ptr [ecx+1Ch] 1 +
jz loc_101AAA1  +
movzx eax ax +
push eax  +
push offset dword_1002DE4  +
push 21h  +
jmp loc_101A21E  +
mov ecx ebx +
call sub_10156A2  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_101AAA1  +
test byte ptr [eax+1Ch] 1 +
jz loc_101AAA1  +
push offset dword_1002DE4  +
push 23h  +
jmp loc_101AA5B  +
mov ecx ebx +
call sub_10156A2  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_101AAA1  +
test byte ptr [eax+1Ch] 1 +
jz loc_101AAA1  +
push offset dword_1002DE4  +
push 25h  +
jmp loc_101AA5B  +
mov ecx ebx +
call sub_10156A2  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_101AAA1  +
test byte ptr [eax+1Ch] 1 +
jz loc_101AAA1  +
push offset dword_1002DE4  +
push 26h  +
jmp loc_101AA5B  +
mov ecx ebx +
call sub_10156A2  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_101AAA1  +
test byte ptr [eax+1Ch] 1 +
jz loc_101AAA1  +
push offset dword_1002DE4  +
push 27h  +
jmp loc_101AA5B  +
mov ecx ebx +
call sub_10156A2  +
jmp loc_101AAA1  +
mov ecx ebx +
call sub_10156A2  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_101AAA1  +
test byte ptr [eax+1Ch] 1 +
jz loc_101AAA1  +
push [ebp+lpCmdLine]  +
push offset dword_1002DE4  +
push 28h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_100B7E5  +
jmp loc_101AAA1  +
and dword ptr [ebx+494h] 0 +
and dword ptr [ebx+44h] 0 +
mov [ebp+var_14] 1 +
cmp dword ptr [ebx+54h] 0 +
jz loc_101A972  +
lea edx [ebx+84h] +
mov eax edx +
lea esi [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_101A8FA  +
sub eax esi +
sar eax 1 +
jz loc_101A972  +
push edx  +
call ds:PathFindExtensionW  +
mov edi ds:_wcsicmp +
mov esi eax +
push offset a_xml  +
push esi  +
call edi  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_101A935  +
push offset a_etl  +
push esi  +
call edi  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_101A972  +
xor eax eax +
cmp [ebp+var_10] eax +
jz loc_101A96F  +
push 6Ah  +
push 0B5h  +
push eax  +
call sub_10064B6  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_101AAA1  +
test byte ptr [eax+1Ch] 1 +
jz loc_101AAA1  +
push offset dword_1002DE4  +
push 2Ah  +
jmp loc_101AA5B  +
mov [ebx+40h] eax +
lea edi [ebx+40h] +
push edi  +
call sub_1007248  +
cmp eax 80070005h +
jnz loc_101A9A8  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_101AAA1  +
test byte ptr [eax+1Ch] 1 +
jz loc_101AAA1  +
push offset dword_1002DE4  +
push 2Bh  +
jmp loc_101AA5B  +
test eax eax +
jge loc_101A9D2  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_101AAA1  +
test byte ptr [eax+1Ch] 1 +
jz loc_101AAA1  +
push offset dword_1002DE4  +
push 2Ch  +
jmp loc_101AA5B  +
mov esi [ebx+494h] +
test esi esi +
jz loc_101AA68  +
cmp dword ptr [ebx+498h] 0 +
jz loc_101AA2C  +
lea eax [ebx+84h] +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_101A9F2  +
sub eax edx +
sar eax 1 +
jnz loc_101AA2C  +
push 6Ah  +
push 71h  +
push 0  +
call sub_10064B6  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_101AAA1  +
test byte ptr [eax+1Ch] 1 +
jz loc_101AAA1  +
push offset dword_1002DE4  +
push 2Dh  +
jmp loc_101AA5B  +
cmp dword ptr [ebx+49Ch] 0 +
jz loc_101AA71  +
cmp [ebp+pNumArgs] 2 +
jle loc_101AA68  +
mov ecx ebx +
call sub_10156A2  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_101AAA1  +
test byte ptr [eax+1Ch] 1 +
jz loc_101AAA1  +
push offset dword_1002DE4  +
push 2Eh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10054B7  +
jmp loc_101AAA1  +
cmp dword ptr [ebx+49Ch] 0 +
jnz loc_101AA91  +
cmp [ebp+var_14] 0 +
jnz loc_101AA91  +
mov eax [ebp+var_18] +
neg eax  +
sbb eax eax +
and eax 2710h +
push eax  +
push 1  +
push esi  +
push edi  +
call sub_1006544  +
test eax eax +
jl loc_101AAA1  +
push [ebp+arg_4]  +
mov ecx ebx +
push [ebp+lpCmdLine]  +
call sub_1019781  +
mov [ebp+var_1] al +
push [ebp+hMem]  +
call ds:LocalFree  +
pop edi  +
mov al [ebp+var_1] +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
cmp byte_1031638 0 +
push esi  +
mov esi ecx +
jz loc_101AAD0  +
or eax 0FFFFFFFFh +
jmp loc_101AAFA  +
and [ebp+var_4] 0 +
call ds:GetCommandLineW  +
lea ecx [ebp+var_4] +
push ecx  +
push eax  +
mov ecx esi +
call sub_1019838  +
cmp al 1 +
jnz loc_101AAF7  +
push [ebp+arg_0]  +
mov ecx esi +
call sub_101866A  +
mov [ebp+var_4] eax +
mov eax [ebp+var_4] +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 47Ch +
mov eax dword_1030118 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
push edi  +
xor esi esi +
push 40h  +
xor ebx ebx +
lea eax [ebp+StartupInfo.lpReserved] +
push esi  +
inc ebx  +
push eax  +
mov [ebp+var_418] ebx +
mov [ebp+var_420] esi +
mov [ebp+var_428] esi +
mov [ebp+StartupInfo.cb] esi +
call memset  +
add esp 0Ch +
mov [ebp+hObject] esi +
xor eax eax +
lea edi [ebp-434h] +
stos   +
push esi  +
push esi  +
stos   +
push ebx  +
push esi  +
stos   +
call ds:HeapSetInformation  +
mov edi offset unk_1036368 +
push edi  +
call sub_10154D5  +
push offset aMicrosoftWindo  +
mov dword_1036388 offset dword_1001900 +
mov off_1030000 edi +
call sub_101560F  +
mov eax off_1030000 +
mov edi offset off_1030000 +
cmp eax edi +
jz loc_101ABB4  +
test byte ptr [eax+1Ch] 4 +
jz loc_101ABB4  +
mov ebx offset dword_1002DE4 +
push ebx  +
push 38h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10054B7  +
jmp loc_101ABB9  +
mov ebx offset dword_1002DE4 +
call sub_10156F8  +
test eax eax +
jz loc_101ABD1  +
mov [ebp+var_418] 2 +
jmp loc_101AE6C  +
lea eax [ebp+var_420] +
push eax  +
call ds:GetCurrentProcess  +
push eax  +
call ds:IsWow64Process  +
test eax eax +
jnz loc_101AC13  +
mov eax off_1030000 +
cmp eax edi +
jz loc_101AE6C  +
test byte ptr [eax+1Ch] 1 +
jz loc_101AE6C  +
push ebx  +
push 39h  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10054B7  +
jmp loc_101AE6C  +
cmp [ebp+var_420] esi +
jz loc_101AE15  +
lea eax [ebp+var_428] +
push eax  +
call ds:Wow64DisableWow64FsRedirection  +
test eax eax +
jnz loc_101AC4C  +
mov eax off_1030000 +
cmp eax edi +
jz loc_101AE6C  +
test byte ptr [eax+1Ch] 1 +
jz loc_101AE6C  +
push ebx  +
push 3Ah  +
jmp loc_101AC03  +
call ds:GetCommandLineW  +
push eax  +
mov [ebp+var_41C] eax +
call sub_101573E  +
test eax eax +
jz loc_101AC7E  +
push 6Ah  +
push 4B5h  +
push esi  +
call sub_10064B6  +
mov [ebp+var_418] 3 +
jmp loc_101AE6C  +
push [ebp+var_41C]  +
mov ebx 104h +
push ebx  +
lea eax [ebp+CommandLine] +
push eax  +
call sub_10066E4  +
test eax eax +
jl loc_101AE6C  +
lea eax [ebp+CommandLine] +
push eax  +
call ds:PathRemoveArgsW  +
lea eax [ebp+CommandLine] +
push eax  +
call ds:PathUnquoteSpacesW  +
lea eax [ebp+CommandLine] +
push eax  +
call ds:PathFindFileNameW  +
mov [ebp+pMore] eax +
push ebx  +
lea eax [ebp+ApplicationName] +
push eax  +
call ds:GetSystemDirectoryW  +
cmp eax esi +
jz loc_101ADFA  +
cmp eax ebx +
ja loc_101ADFA  +
push [ebp+pMore]  +
lea eax [ebp+ApplicationName] +
push eax  +
call ds:PathAppendW  +
test eax eax +
jnz loc_101AD23  +
mov eax off_1030000 +
cmp eax edi +
jz loc_101AE6C  +
test byte ptr [eax+1Ch] 1 +
jz loc_101AE6C  +
push offset dword_1002DE4  +
push 3Ch  +
jmp loc_101AC03  +
push [ebp+var_41C]  +
call ds:PathGetArgsW  +
push eax  +
lea eax [ebp+ApplicationName] +
push eax  +
push offset aLsLs_1  +
lea eax [ebp+CommandLine] +
push ebx  +
push eax  +
call sub_1005835  +
add esp 14h +
test eax eax +
jge loc_101AD73  +
mov eax off_1030000 +
cmp eax edi +
jz loc_101AE6C  +
test byte ptr [eax+1Ch] 1 +
jz loc_101AE6C  +
push offset dword_1002DE4  +
push 3Dh  +
jmp loc_101AC03  +
lea eax [ebp+hObject] +
push eax  +
lea eax [ebp+StartupInfo] +
push eax  +
push esi  +
push esi  +
push esi  +
push esi  +
push esi  +
push esi  +
lea eax [ebp+CommandLine] +
push eax  +
lea eax [ebp+ApplicationName] +
push eax  +
call ds:CreateProcessW  +
test eax eax +
jnz loc_101ADC2  +
mov eax off_1030000 +
cmp eax edi +
jz loc_101AE6C  +
test byte ptr [eax+1Ch] 1 +
jz loc_101AE6C  +
push offset dword_1002DE4  +
push 3Eh  +
jmp loc_101AC03  +
cmp [ebp+hObject] esi +
jz loc_101ADEE  +
push 0FFFFFFFFh  +
push [ebp+hObject]  +
call ds:WaitForSingleObject  +
push [ebp+hObject]  +
mov esi ds:CloseHandle +
call esi  +
push dword ptr [ebp-434h]  +
call esi  +
mov [ebp+var_418] 4 +
jmp loc_101AE6C  +
mov eax off_1030000 +
cmp eax edi +
jz loc_101AE6C  +
test byte ptr [eax+1Ch] 1 +
jz loc_101AE6C  +
push offset dword_1002DE4  +
push 3Bh  +
jmp loc_101AC03  +
push [ebp+arg_C]  +
mov ecx offset unk_1036398 +
call sub_101AAB9  +
mov edi ds:CloseHandle +
mov [ebp+var_418] eax +
mov eax Destination +
cmp eax esi +
jz loc_101AE40  +
push eax  +
call edi  +
mov Destination esi +
mov eax hHandle +
cmp eax esi +
jz loc_101AE64  +
push 0FFFFFFFFh  +
push eax  +
call ds:WaitForSingleObject  +
mov eax hHandle +
cmp eax esi +
jz loc_101AE64  +
push eax  +
call edi  +
mov hHandle esi +
cmp [ebp+var_418] esi +
jz loc_101AE77  +
push [ebp+var_418]  +
call sub_100A037  +
call sub_101565D  +
mov ecx [ebp+var_4] +
mov eax [ebp+var_418] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_101BC5D  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
push esi  +
lea esi [eax+45Ch] +
mov ecx [esi] +
add eax 8 +
push eax  +
call sub_1010538  +
test eax eax +
jl loc_101AEC3  +
mov ecx [esi] +
call sub_10150E6  +
test eax eax +
jl loc_101AEC3  +
xor eax eax +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+8] +
mov ecx [esi+45Ch] +
push edi  +
push 0  +
push 0  +
call sub_1014C03  +
mov edi eax +
test edi edi +
jge loc_101AF08  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_101AF48  +
test byte ptr [eax+1Ch] 1 +
jz loc_101AF48  +
push edi  +
push offset dword_100353C  +
push 0Ah  +
jmp loc_101AF39  +
cmp dword ptr [esi+0Ch] 0 +
jz loc_101AF46  +
mov ecx [esi+45Ch] +
call sub_101447E  +
mov edi eax +
test edi edi +
jge loc_101AF46  +
mov eax off_1030000 +
cmp eax offset off_1030000 +
jz loc_101AF48  +
test byte ptr [eax+1Ch] 1 +
jz loc_101AF48  +
push edi  +
push offset dword_100353C  +
push 0Bh  +
push dword ptr [eax+14h]  +
push dword ptr [eax+10h]  +
call sub_10062BE  +
jmp loc_101AF48  +
xor edi edi +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
xor esi esi +
push dword ptr [ebp+0Ch]  +
push off_1030114[esi]  +
call sub_101521A  +
test eax eax +
jnz loc_101AF7D  +
add esi 4 +
cmp esi 4 +
jb loc_101AF5D  +
inc eax  +
pop esi  +
pop ebp  +
retn 8  +
***
xor eax eax +
jmp loc_101AF78  +
***
call __EH_prolog3  +
mov esi ecx +
lea eax [esi+0Ch] +
push eax  +
call sub_10062EA  +
push 0A9Ch  +
call sub_101B56A  +
pop ecx  +
mov ecx eax +
mov [ebp-10h] ecx +
and dword ptr [ebp-4] 0 +
test ecx ecx +
jz loc_101AFBC  +
call sub_101543E  +
jmp loc_101AFBE  +
xor eax eax +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov [esi+460h] eax +
test eax eax +
jnz loc_101AFD3  +
mov eax 8007000Eh +
jmp loc_101AFDA  +
mov ecx eax +
call sub_10149D9  +
call __EH_epilog3  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 46Ch +
mov eax dword_1030118 +
xor eax ebp +
mov [ebp-4] eax +
push ebx  +
push esi  +
mov esi [ebp+8] +
push edi  +
lea eax [ebp-468h] +
push eax  +
call ds:VariantInit  +
add esi 8 +
mov ecx 115h +
lea edi [ebp-458h] +
mov [ebp-46Ch] esi +
movs   +
mov edi [ebp+0Ch] +
xor ebx ebx +
cmp edi ebx +
jz loc_101B520  +
push 4  +
mov ecx offset aScreenshotenab +
mov eax edi +
pop esi  +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_101B05E  +
cmp dx bx +
jz loc_101B05A  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_101B05E  +
add eax esi +
add ecx esi +
cmp dx bx +
jnz loc_101B03A  +
xor eax eax +
jmp loc_101B063  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
cmp eax ebx +
jnz loc_101B097  +
push 0Bh  +
push ebx  +
lea eax [ebp+10h] +
push eax  +
lea eax [ebp-468h] +
push eax  +
call ds:VariantChangeType  +
mov esi eax +
cmp esi ebx +
jl loc_101B525  +
movsx eax word ptr [ebp-460h] +
mov [ebp-458h] eax +
jmp loc_101B4F7  +
mov ecx offset aUienabled +
mov eax edi +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_101B0C2  +
cmp dx bx +
jz loc_101B0BE  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_101B0C2  +
add eax esi +
add ecx esi +
cmp dx bx +
jnz loc_101B09E  +
xor eax eax +
jmp loc_101B0C7  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
cmp eax ebx +
jnz loc_101B0FB  +
push 0Bh  +
push ebx  +
lea eax [ebp+10h] +
push eax  +
lea eax [ebp-468h] +
push eax  +
call ds:VariantChangeType  +
mov esi eax +
cmp esi ebx +
jl loc_101B525  +
movsx eax word ptr [ebp-460h] +
mov [ebp-454h] eax +
jmp loc_101B4F7  +
mov ecx offset aArchiveetl +
mov eax edi +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_101B126  +
cmp dx bx +
jz loc_101B122  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_101B126  +
add eax esi +
add ecx esi +
cmp dx bx +
jnz loc_101B102  +
xor eax eax +
jmp loc_101B12B  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
cmp eax ebx +
jnz loc_101B15F  +
push 0Bh  +
push ebx  +
lea eax [ebp+10h] +
push eax  +
lea eax [ebp-468h] +
push eax  +
call ds:VariantChangeType  +
mov esi eax +
cmp esi ebx +
jl loc_101B525  +
movsx eax word ptr [ebp-460h] +
mov [ebp-440h] eax +
jmp loc_101B4F7  +
mov ecx offset aArchivexml +
mov eax edi +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_101B18A  +
cmp dx bx +
jz loc_101B186  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_101B18A  +
add eax esi +
add ecx esi +
cmp dx bx +
jnz loc_101B166  +
xor eax eax +
jmp loc_101B18F  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
cmp eax ebx +
jnz loc_101B1C3  +
push 0Bh  +
push ebx  +
lea eax [ebp+10h] +
push eax  +
lea eax [ebp-468h] +
push eax  +
call ds:VariantChangeType  +
mov esi eax +
cmp esi ebx +
jl loc_101B525  +
movsx eax word ptr [ebp-460h] +
mov [ebp-43Ch] eax +
jmp loc_101B4F7  +
mov ecx offset aArchivemht +
mov eax edi +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_101B1EE  +
cmp dx bx +
jz loc_101B1EA  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_101B1EE  +
add eax esi +
add ecx esi +
cmp dx bx +
jnz loc_101B1CA  +
xor eax eax +
jmp loc_101B1F3  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
cmp eax ebx +
jnz loc_101B227  +
push 0Bh  +
push ebx  +
lea eax [ebp+10h] +
push eax  +
lea eax [ebp-468h] +
push eax  +
call ds:VariantChangeType  +
mov esi eax +
cmp esi ebx +
jl loc_101B525  +
movsx eax word ptr [ebp-460h] +
mov [ebp-438h] eax +
jmp loc_101B4F7  +
mov ecx offset aSketchenabled +
mov eax edi +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_101B252  +
cmp dx bx +
jz loc_101B24E  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_101B252  +
add eax esi +
add ecx esi +
cmp dx bx +
jnz loc_101B22E  +
xor eax eax +
jmp loc_101B257  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
cmp eax ebx +
jnz loc_101B28B  +
push 0Bh  +
push ebx  +
lea eax [ebp+10h] +
push eax  +
lea eax [ebp-468h] +
push eax  +
call ds:VariantChangeType  +
mov esi eax +
cmp esi ebx +
jl loc_101B525  +
movsx eax word ptr [ebp-460h] +
mov [ebp-450h] eax +
jmp loc_101B4F7  +
mov ecx offset aSlidesenabled +
mov eax edi +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_101B2B6  +
cmp dx bx +
jz loc_101B2B2  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_101B2B6  +
add eax esi +
add ecx esi +
cmp dx bx +
jnz loc_101B292  +
xor eax eax +
jmp loc_101B2BB  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
cmp eax ebx +
jnz loc_101B2EF  +
push 0Bh  +
push ebx  +
lea eax [ebp+10h] +
push eax  +
lea eax [ebp-468h] +
push eax  +
call ds:VariantChangeType  +
mov esi eax +
cmp esi ebx +
jl loc_101B525  +
movsx eax word ptr [ebp-460h] +
mov [ebp-44Ch] eax +
jmp loc_101B4F7  +
mov ecx offset aProcessidfilte +
mov eax edi +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_101B31A  +
cmp dx bx +
jz loc_101B316  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_101B31A  +
add eax esi +
add ecx esi +
cmp dx bx +
jnz loc_101B2F6  +
xor eax eax +
jmp loc_101B31F  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
cmp eax ebx +
jnz loc_101B352  +
push 3  +
push ebx  +
lea eax [ebp+10h] +
push eax  +
lea eax [ebp-468h] +
push eax  +
call ds:VariantChangeType  +
mov esi eax +
cmp esi ebx +
jl loc_101B525  +
mov eax [ebp-460h] +
mov [ebp-420h] eax +
jmp loc_101B4F7  +
mov ecx offset aMaxlogsize_0 +
mov eax edi +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_101B37D  +
cmp dx bx +
jz loc_101B379  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_101B37D  +
add eax esi +
add ecx esi +
cmp dx bx +
jnz loc_101B359  +
xor eax eax +
jmp loc_101B382  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
cmp eax ebx +
jnz loc_101B3B5  +
push 3  +
push ebx  +
lea eax [ebp+10h] +
push eax  +
lea eax [ebp-468h] +
push eax  +
call ds:VariantChangeType  +
mov esi eax +
cmp esi ebx +
jl loc_101B525  +
mov eax [ebp-460h] +
mov [ebp-41Ch] eax +
jmp loc_101B4F7  +
mov ecx offset aMaxscreenshots +
mov eax edi +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_101B3E0  +
cmp dx bx +
jz loc_101B3DC  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_101B3E0  +
add eax esi +
add ecx esi +
cmp dx bx +
jnz loc_101B3BC  +
xor eax eax +
jmp loc_101B3E5  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
cmp eax ebx +
jnz loc_101B418  +
push 3  +
push ebx  +
lea eax [ebp+10h] +
push eax  +
lea eax [ebp-468h] +
push eax  +
call ds:VariantChangeType  +
mov esi eax +
cmp esi ebx +
jl loc_101B525  +
mov eax [ebp-460h] +
mov [ebp-418h] eax +
jmp loc_101B4F7  +
mov ecx offset aOutputpath +
mov eax edi +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_101B443  +
cmp dx bx +
jz loc_101B43F  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_101B443  +
add eax esi +
add ecx esi +
cmp dx bx +
jnz loc_101B41F  +
xor eax eax +
jmp loc_101B448  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
cmp eax ebx +
jnz loc_101B47F  +
push 8  +
push ebx  +
lea eax [ebp+10h] +
push eax  +
lea eax [ebp-468h] +
push eax  +
call ds:VariantChangeType  +
mov esi eax +
cmp esi ebx +
jl loc_101B525  +
push dword ptr [ebp-460h]  +
call ds:SysStringLen  +
push eax  +
lea eax [ebp-414h] +
jmp loc_101B4E0  +
mov ecx offset aUisavedir_0 +
mov eax edi +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_101B4AA  +
cmp dx bx +
jz loc_101B4A6  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_101B4AA  +
add eax esi +
add ecx esi +
cmp dx bx +
jnz loc_101B486  +
xor eax eax +
jmp loc_101B4AF  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
cmp eax ebx +
jnz loc_101B520  +
push 8  +
push ebx  +
lea eax [ebp+10h] +
push eax  +
lea eax [ebp-468h] +
push eax  +
call ds:VariantChangeType  +
mov esi eax +
cmp esi ebx +
jl loc_101B525  +
push dword ptr [ebp-460h]  +
call ds:SysStringLen  +
push eax  +
lea eax [ebp-20Ch] +
push dword ptr [ebp-460h]  +
push 104h  +
push eax  +
call sub_100C6B6  +
mov esi eax +
cmp esi ebx +
jl loc_101B525  +
lea eax [ebp-458h] +
push eax  +
call sub_1007248  +
mov esi eax +
cmp esi ebx +
jl loc_101B525  +
mov edi [ebp-46Ch] +
mov ecx 115h +
lea esi [ebp-458h] +
movs   +
xor esi esi +
jmp loc_101B525  +
mov esi 80070057h +
lea eax [ebp-468h] +
push eax  +
call ds:VariantClear  +
mov ecx [ebp-4] +
pop edi  +
mov eax esi +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_101BC5D  +
leave   +
retn 18h  +
***
mov edi edi +
push esi  +
lea esi [ecx+460h] +
mov ecx [esi] +
test ecx ecx +
jz loc_101B563  +
push 1  +
call sub_1016A0F  +
and dword ptr [esi] 0 +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
jmp loc_101B57F  +
push [ebp+arg_0]  +
call _callnewh  +
pop ecx  +
test eax eax +
jz loc_101B58E  +
push [ebp+arg_0]  +
call malloc  +
mov esi eax +
pop ecx  +
test esi esi +
jz loc_101B572  +
mov eax esi +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp sub_101B56A  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp free  +
***
mov dword ptr [esi+4] 1000000h +
mov dword ptr [esi+8] offset off_102D758 +
mov dword ptr [esi+0Ch] offset dword_102D75C +
call sub_10154FD  +
test eax eax +
jge loc_101B5FF  +
mov byte_1031638 1 +
jmp loc_101B605  +
mov dword ptr [esi] 28h +
pop edi  +
mov eax esi +
pop esi  +
retn   +
***
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
test eax eax +
jnz loc_101B622  +
mov eax 80070057h +
jmp loc_101B633  +
cmp dword ptr [eax] 2Ch +
jnz loc_101B61B  +
and dword ptr [eax+1Ch] 0 +
lea ecx [eax+4] +
call sub_10154FD  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi] +
test eax eax +
jz loc_101B651  +
push eax  +
call free  +
and dword ptr [esi] 0 +
pop ecx  +
and dword ptr [esi+4] 0 +
and dword ptr [esi+8] 0 +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
test eax eax +
jl loc_101B67A  +
cmp eax [ecx+4] +
jge loc_101B67A  +
mov ecx [ecx] +
lea eax [ecx+eax*2] +
pop ebp  +
retn 4  +
***
push 0  +
push 0  +
push 1  +
push 0C000008Ch  +
call ds:RaiseException  +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+8] +
push edi  +
xor edi edi +
cmp esi edi +
jnz loc_101B6C9  +
mov eax 80070057h +
jmp loc_101B710  +
mov eax [esi] +
cmp eax edi +
jz loc_101B70E  +
cmp eax 2Ch +
jnz loc_101B6C2  +
cmp [esi+24h] edi +
jle loc_101B6F9  +
push ebx  +
lea ebx [esi+20h] +
push edi  +
mov ecx ebx +
call loc_101B660  +
movzx eax word ptr [eax] +
push dword ptr [ebp+0Ch]  +
push eax  +
call ds:UnregisterClassA  +
inc edi  +
cmp edi [esi+24h] +
jl loc_101B6DD  +
pop ebx  +
lea ecx [esi+20h] +
call sub_101B63C  +
lea eax [esi+4] +
push eax  +
call ds:DeleteCriticalSection  +
and dword ptr [esi] 0 +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push esi  +
mov esi ecx +
lea ecx [esi+18h] +
call sub_10154BE  +
xor eax eax +
mov [esi+30h] eax +
mov [esi+34h] eax +
mov [esi+38h] eax +
mov eax esi +
pop esi  +
retn   +
***
push eax  +
call ds:DeleteCriticalSection  +
lea ecx [esi+30h] +
pop esi  +
jmp sub_101B63C  +
***
add eax offset byte_1031638 +
add [ebx-3974FFDAh] eax +
pop esi  +
retn   +
***
push ebp  +
mov ebp esp +
sub esp 98h +
mov eax dword_1030118 +
xor eax ebp +
mov [ebp-4] eax +
push esi  +
mov esi ecx +
call sub_101B71B  +
mov eax 1000000h +
push 94h  +
mov [esi+8] eax +
mov [esi+4] eax +
lea eax [ebp-98h] +
push 0  +
push eax  +
mov dword ptr [esi] 3Ch +
mov byte ptr [esi+0Ch] 0 +
call memset  +
add esp 0Ch +
lea eax [ebp-98h] +
push eax  +
mov dword ptr [ebp-98h] 94h +
call ds:GetVersionExA  +
cmp dword ptr [ebp-88h] 2 +
jnz loc_101B7F9  +
cmp dword ptr [ebp-94h] 5 +
jb loc_101B81A  +
jmp loc_101B816  +
cmp dword ptr [ebp-88h] 1 +
jnz loc_101B81A  +
cmp dword ptr [ebp-94h] 4 +
ja loc_101B816  +
jnz loc_101B81A  +
cmp dword ptr [ebp-90h] 0 +
jbe loc_101B81A  +
mov byte ptr [esi+0Ch] 1 +
lea ecx [esi+18h] +
mov dword ptr [esi+10h] 800h +
mov dword ptr [esi+14h] offset dword_10036B8 +
call sub_10154FD  +
test eax eax +
jge loc_101B83B  +
mov byte_1031638 1 +
mov ecx [ebp-4] +
mov eax esi +
xor ecx ebp +
pop esi  +
call sub_101BC5D  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
xor eax eax +
jmp loc_101B88A  +
test eax eax +
jnz loc_101B88F  +
mov ecx [esi] +
test ecx ecx +
jz loc_101B887  +
call ecx  +
add esi 4 +
cmp esi [ebp+arg_4] +
jb loc_101B87B  +
pop esi  +
pop ebp  +
retn   +
***
mov eax dword_1036B54 +
push offset dword_1036B44  +
push dword_1036B50  +
mov dword_1036B44 eax +
push offset unk_1036B34  +
push offset unk_1036B38  +
push offset unk_1036B30  +
call ds:__wgetmainargs  +
add esp 14h +
mov dword_1036B40 eax +
retn   +
***
call __SEH_prolog4  +
xor ebx ebx +
mov [ebp+var_1C] ebx +
mov [ebp+ms_exc.disabled] ebx +
lea eax [ebp+StartupInfo] +
push eax  +
call ds:GetStartupInfoW  +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov [ebp+ms_exc.disabled] 1 +
mov eax large fs:18h +
mov esi [eax+4] +
mov [ebp+var_20] ebx +
mov edi offset dword_1036EA0 +
push ebx  +
push esi  +
push edi  +
call ds:InterlockedCompareExchange  +
cmp eax ebx +
jz loc_101B932  +
cmp eax esi +
jnz loc_101B925  +
xor esi esi +
inc esi  +
mov [ebp+var_20] esi +
jmp loc_101B935  +
push 3E8h  +
call ds:Sleep  +
jmp loc_101B90C  +
xor esi esi +
inc esi  +
mov eax dword_1036E9C +
cmp eax esi +
jnz loc_101B948  +
push 1Fh  +
call _amsg_exit  +
pop ecx  +
jmp loc_101B977  +
mov eax dword_1036E9C +
test eax eax +
jnz loc_101B971  +
mov dword_1036E9C esi +
push offset dword_1001718  +
push offset dword_100170C  +
call sub_101B86E  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_101B977  +
jmp loc_101BA9B  +
mov dword_1036B4C esi +
mov eax dword_1036E9C +
cmp eax esi +
jnz loc_101B99B  +
push offset dword_1001708  +
push offset dword_10016F0  +
call _initterm  +
pop ecx  +
pop ecx  +
mov dword_1036E9C 2 +
cmp [ebp+var_20] ebx +
jnz loc_101B9A8  +
push ebx  +
push edi  +
call ds:InterlockedExchange  +
cmp dword_1036EAC ebx +
jz loc_101B9C9  +
push offset dword_1036EAC  +
call sub_101C289  +
pop ecx  +
test eax eax +
jz loc_101B9C9  +
push ebx  +
push 2  +
push ebx  +
call dword_1036EAC  +
mov eax ds:_wcmdln +
cmp [eax] ebx +
jz loc_101BA9B  +
mov eax [eax] +
mov [ebp+var_24] eax +
movzx ecx word ptr [eax] +
cmp cx 20h +
ja $LN58  +
cmp cx bx +
jz loc_101B9EE  +
cmp [ebp+var_1C] ebx +
jnz $LN58  +
movzx ecx word ptr [eax] +
cmp cx bx +
jz loc_101BA03  +
cmp cx 20h +
ja loc_101BA03  +
inc eax  +
inc eax  +
mov [ebp+var_24] eax +
jmp loc_101B9EE  +
test byte ptr [ebp+StartupInfo.dwFlags] 1 +
jz loc_101BA0F  +
movzx ecx [ebp+StartupInfo.wShowWindow] +
jmp loc_101BA12  +
push 0Ah  +
pop ecx  +
push ecx  +
push eax  +
push ebx  +
push 1000000h  +
call _wWinMain@16  +
mov dword_1036B48 eax +
cmp dword_1036B3C ebx +
jnz $LN59  +
push eax  +
call ds:exit  +
cmp cx 22h +
jnz loc_101BA44  +
xor ecx ecx +
cmp [ebp+var_1C] ebx +
setz cl  +
mov [ebp+var_1C] ecx +
inc eax  +
inc eax  +
jmp loc_101B9D8  +
mov eax [ebp-14h] +
mov ecx [eax] +
mov ecx [ecx] +
mov [ebp-28h] ecx +
push eax  +
push ecx  +
call _XcptFilter  +
pop ecx  +
pop ecx  +
retn   +
mov esp [ebp-18h] +
mov eax [ebp-28h] +
mov dword_1036B48 eax +
xor ebx ebx +
cmp dword_1036B3C ebx +
jnz $LN59  +
push eax  +
call ds:_exit  +
cmp dword_1036B4C ebx +
jnz loc_101BA86  +
call ds:_cexit  +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov eax dword_1036B48 +
jmp loc_101BAA7  +
xor eax eax +
inc eax  +
retn   +
mov esp [ebp-18h] +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov eax 0FFh +
call __SEH_epilog4  +
retn   +
***
mov eax 5A4Dh +
cmp ds:1000000h ax +
jz loc_101BAC4  +
xor eax eax +
jmp loc_101BB11  +
mov eax ds:100003Ch +
lea eax [eax+1000000h] +
cmp dword ptr [eax] 4550h +
jnz loc_101BAC0  +
movzx ecx word ptr [eax+18h] +
cmp ecx 10Bh +
jz loc_101BAFE  +
cmp ecx 20Bh +
jnz loc_101BAC0  +
cmp dword ptr [eax+84h] 0Eh +
jbe loc_101BAC0  +
xor ecx ecx +
cmp [eax+0F8h] ecx +
jmp loc_101BB0C  +
cmp dword ptr [eax+74h] 0Eh +
jbe loc_101BAC0  +
xor ecx ecx +
cmp [eax+0E8h] ecx +
setnz cl  +
mov eax ecx +
push 2  +
mov dword_1036B3C eax +
call sub_101C397  +
push eax  +
call ds:__set_app_type  +
or dword_1036EA4 0FFFFFFFFh +
or dword_1036EA8 0FFFFFFFFh +
pop ecx  +
pop ecx  +
call ds:__p__fmode  +
mov ecx dword_1036B5C +
mov [eax] ecx +
call ds:__p__commode  +
mov ecx dword_1036B58 +
mov [eax] ecx +
call sub_101C329  +
cmp dword_1030138 0 +
jnz loc_101BB6A  +
push offset sub_101C329  +
call ds:__setusermatherr  +
pop ecx  +
call sub_101C311  +
xor eax eax +
retn   +
***
call sub_101C3D6  +
jmp ___tmainCRTStartup  +
***
call __SEH_prolog4  +
and [ebp+ms_exc.disabled] 0 +
dec [ebp+arg_8]  +
js loc_101BBD6  +
mov ecx [ebp+arg_0] +
sub ecx [ebp+arg_4] +
mov [ebp+arg_0] ecx +
call [ebp+arg_C]  +
jmp loc_101BB96  +
mov eax [ebp-14h] +
mov [ebp-1Ch] eax +
mov eax [ebp-1Ch] +
mov eax [eax] +
mov [ebp-20h] eax +
mov eax [ebp-20h] +
cmp dword ptr [eax] 0E06D7363h +
jz loc_101BBCD  +
mov dword ptr [ebp-24h] 0 +
mov eax [ebp-24h] +
retn   +
call ds:?terminate@@YAXXZ  +
mov esp [ebp-18h] +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
call __SEH_epilog4  +
retn 10h  +
***
call __SEH_prolog4  +
cmp dword ptr [ebp-1Ch] 0 +
jnz $LN9  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call sub_101BB86  +
retn   +
***
cmp ecx dword_1030118 +
jnz loc_101BC68  +
retn 0  +
jmp loc_101C46C  +
***
sub ecx eax +
sbb eax eax +
not eax  +
and ecx eax +
mov eax esp +
and eax 0FFFFF000h +
cmp ecx eax +
jb cs20  +
mov eax ecx +
pop ecx  +
xchg eax esp +
mov eax [eax] +
mov [esp+0] eax +
retn   +
sub eax 1000h +
test [eax] eax +
jmp cs10  +
***
mov eax [esp+arg_C] +
or eax eax +
jnz loc_101BCE2  +
mov ecx [esp+arg_8] +
mov eax [esp+arg_4] +
xor edx edx +
div  ecx +
mov ebx eax +
mov eax [esp+arg_0] +
div  ecx +
mov edx ebx +
jmp loc_101BD23  +
mov ecx eax +
mov ebx [esp+arg_8] +
mov edx [esp+arg_4] +
mov eax [esp+arg_0] +
shr ecx 1 +
rcr ebx 1 +
shr edx 1 +
rcr eax 1 +
or ecx ecx +
jnz loc_101BCF0  +
div  ebx +
mov esi eax +
mul  [esp+arg_C] +
mov ecx eax +
mov eax [esp+arg_8] +
mul  esi +
add edx ecx +
jb loc_101BD1E  +
cmp edx [esp+arg_4] +
ja loc_101BD1E  +
jb loc_101BD1F  +
cmp eax [esp+arg_0] +
jbe loc_101BD1F  +
dec esi  +
xor edx edx +
mov eax esi +
pop esi  +
pop ebx  +
retn 10h  +
***
lea eax [esp+4+arg_0] +
sub esp [esp+0Ch] +
push ebx  +
push esi  +
push edi  +
mov [eax] ebp +
mov ebp eax +
mov eax dword_1030118 +
xor eax ebp +
push eax  +
push dword ptr [ebp-4]  +
mov dword ptr [ebp-4] 0FFFFFFFFh +
lea eax [ebp-0Ch] +
mov large fs:0 eax +
retn   +
***
lea eax [esp+4+arg_0] +
sub esp [esp+0Ch] +
push ebx  +
push esi  +
push edi  +
mov [eax] ebp +
mov ebp eax +
mov eax dword_1030118 +
xor eax ebp +
push eax  +
mov [ebp-10h] esp +
push dword ptr [ebp-4]  +
mov dword ptr [ebp-4] 0FFFFFFFFh +
lea eax [ebp-0Ch] +
mov large fs:0 eax +
retn   +
***
lea eax [esp+4+arg_0] +
sub esp [esp+0Ch] +
push ebx  +
push esi  +
push edi  +
mov [eax] ebp +
mov ebp eax +
mov eax dword_1030118 +
xor eax ebp +
push eax  +
mov [ebp-10h] eax +
push dword ptr [ebp-4]  +
mov dword ptr [ebp-4] 0FFFFFFFFh +
lea eax [ebp-0Ch] +
mov large fs:0 eax +
retn   +
***
lea eax [esp+4+arg_0] +
sub esp [esp+0Ch] +
push ebx  +
push esi  +
push edi  +
mov [eax] ebp +
mov ebp eax +
mov eax dword_1030118 +
xor eax ebp +
push eax  +
mov [ebp-14h] eax +
mov [ebp-10h] esp +
push dword ptr [ebp-4]  +
mov dword ptr [ebp-4] 0FFFFFFFFh +
lea eax [ebp-0Ch] +
mov large fs:0 eax +
retn   +
***
mov ecx [ebp-0Ch] +
mov large fs:0 ecx +
pop ecx  +
pop edi  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
push ecx  +
retn   +
***
mov ecx [ebp-10h] +
xor ecx ebp +
call sub_101BC5D  +
jmp __EH_epilog3  +
***
mov ecx [ebp-14h] +
xor ecx ebp +
call sub_101BC5D  +
jmp __EH_epilog3  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call ds:??1type_info@@UAE@XZ  +
test byte ptr [ebp+8] 1 +
jz loc_101BEBC  +
push esi  +
call sub_101B5A8  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov eax [esp+8+arg_4] +
mov ecx [ebp-10h] +
mov large fs:0 ecx +
pop ecx  +
pop edi  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
push ecx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push offset sub_101BC5D  +
push offset dword_1030118  +
call _except_handler4_common  +
add esp 18h +
pop ebp  +
retn   +
***
jmp ds:_purecall  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
push esi  +
xor esi esi +
cmp ecx esi +
jbe loc_101BFB6  +
push 0FFFFFFE0h  +
xor edx edx +
pop eax  +
div  ecx +
cmp eax [ebp+arg_8] +
jnb loc_101BFB6  +
call _errno  +
push esi  +
push esi  +
push esi  +
push esi  +
push esi  +
mov dword ptr [eax] 0Ch +
call sub_101C616  +
add esp 14h +
xor eax eax +
jmp loc_101BFC5  +
imul ecx [ebp+arg_8] +
push ecx  +
push [ebp+arg_0]  +
call realloc  +
pop ecx  +
pop ecx  +
pop esi  +
pop ebp  +
retn   +
***
call __SEH_prolog4  +
cmp dword ptr [ebp-20h] 0 +
jnz $LN10_0  +
push dword ptr [ebp+18h]  +
push dword ptr [ebp-1Ch]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call sub_101BB86  +
retn   +
***
call __SEH_prolog4  +
pop ecx  +
retn   +
***
push ebp  +
mov ebp esp +
push dword ptr [ebp+8]  +
call sub_101C037  +
neg eax  +
sbb eax eax +
neg eax  +
pop ecx  +
dec eax  +
pop ebp  +
retn   +
***
push offset loc_101BF4A  +
push large dword ptr fs:0  +
mov eax [esp+10h] +
mov [esp+10h] ebp +
lea ebp [esp+10h] +
sub esp eax +
push ebx  +
push esi  +
push edi  +
mov eax dword_1030118 +
xor [ebp-4] eax +
xor eax ebp +
mov [ebp-1Ch] eax +
push eax  +
mov [ebp-18h] esp +
push dword ptr [ebp-8]  +
mov eax [ebp-4] +
mov dword ptr [ebp-4] 0FFFFFFFEh +
mov [ebp-8] eax +
lea eax [ebp-10h] +
mov large fs:0 eax +
retn   +
***
mov ecx [ebp-1Ch] +
xor ecx ebp +
call sub_101BC5D  +
jmp __SEH_epilog4  +
***
push ecx  +
lea ecx [esp+8] +
sub ecx eax +
and ecx 0Fh +
add eax ecx +
sbb ecx ecx +
or eax ecx +
pop ecx  +
jmp __alloca_probe  +
***
push ecx  +
lea ecx [esp+8] +
sub ecx eax +
and ecx 7 +
add eax ecx +
sbb ecx ecx +
or eax ecx +
pop ecx  +
jmp __alloca_probe  +
***
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov eax [eax] +
cmp dword ptr [eax] 0E06D7363h +
jnz loc_101C1CE  +
cmp dword ptr [eax+10h] 3 +
jnz loc_101C1CE  +
mov eax [eax+14h] +
cmp eax 19930520h +
jz loc_101C1C8  +
cmp eax 19930521h +
jz loc_101C1C8  +
cmp eax 19930522h +
jz loc_101C1C8  +
cmp eax 1994000h +
jnz loc_101C1CE  +
call ds:?terminate@@YAXXZ  +
xor eax eax +
pop ebp  +
retn 4  +
***
push (offset byte_101C190+1)  +
call ds:SetUnhandledExceptionFilter  +
xor eax eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
mov eax 5A4Dh +
cmp [ecx] ax +
jz loc_101C216  +
xor eax eax +
pop ebp  +
retn   +
mov eax [ecx+3Ch] +
add eax ecx +
cmp dword ptr [eax] 4550h +
jnz loc_101C212  +
xor edx edx +
mov ecx 10Bh +
cmp [eax+18h] cx +
setz dl  +
mov eax edx +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [eax+3Ch] +
add ecx eax +
movzx eax word ptr [ecx+14h] +
push ebx  +
push esi  +
movzx esi word ptr [ecx+6] +
xor edx edx +
push edi  +
lea eax [eax+ecx+18h] +
test esi esi +
jbe loc_101C27D  +
mov edi [ebp+arg_4] +
mov ecx [eax+0Ch] +
cmp edi ecx +
jb loc_101C275  +
mov ebx [eax+8] +
add ebx ecx +
cmp edi ebx +
jb loc_101C27F  +
inc edx  +
add eax 28h +
cmp edx esi +
jb loc_101C265  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
call __SEH_prolog4  +
and [ebp+ms_exc.disabled] 0 +
mov esi 1000000h +
push esi  +
call sub_101C200  +
pop ecx  +
test eax eax +
jz loc_101C2E6  +
mov eax [ebp+arg_0] +
sub eax esi +
push eax  +
push esi  +
call sub_101C240  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_101C2E6  +
mov eax [eax+24h] +
shr eax 1Fh +
not eax  +
and eax 1 +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
jmp loc_101C2EF  +
mov eax [ebp-14h] +
mov eax [eax] +
mov eax [eax] +
xor ecx ecx +
cmp eax 0C0000005h +
setz cl  +
mov eax ecx +
retn   +
mov esp [ebp-18h] +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
xor eax eax +
call __SEH_epilog4  +
retn   +
***
call ds:_controlfp  +
pop ecx  +
pop ecx  +
retn   +
***
retn   +
***
call __SEH_prolog4  +
xor eax eax +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_101C38A  +
cmp ecx 0FFFFFFFFh +
jz loc_101C38A  +
and [ebp+ms_exc.disabled] eax +
mov edx 5A4Dh +
cmp [ecx] dx +
jnz loc_101C383  +
mov edx [ecx+3Ch] +
test edx edx +
jl loc_101C383  +
cmp edx 10000000h +
jnb loc_101C383  +
lea eax [edx+ecx] +
mov [ebp+var_1C] eax +
cmp dword ptr [eax] 4550h +
jz loc_101C383  +
jmp loc_101C37E  +
xor eax eax +
inc eax  +
retn   +
mov esp [ebp-18h] +
xor eax eax +
mov [ebp+var_1C] eax +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
call __SEH_epilog4  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
call ds:GetModuleHandleA  +
test eax eax +
jz loc_101C3CC  +
push eax  +
call sub_101C331  +
test eax eax +
jz loc_101C3CC  +
movzx eax word ptr [eax+5Ch] +
cmp ax 2 +
jnz loc_101C3C1  +
push 2  +
pop eax  +
pop ebp  +
retn   +
cmp ax 3 +
jnz loc_101C3CC  +
xor eax eax +
inc eax  +
pop ebp  +
retn   +
mov eax [ebp+arg_0] +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov eax dword_1030118 +
and [ebp+SystemTimeAsFileTime.dwLowDateTime] 0 +
and [ebp+SystemTimeAsFileTime.dwHighDateTime] 0 +
push ebx  +
push edi  +
mov edi 0BB40E64Eh +
mov ebx 0FFFF0000h +
cmp eax edi +
jz loc_101C408  +
test eax ebx +
jz loc_101C408  +
not eax  +
mov dword_103011C eax +
jmp loc_101C463  +
push esi  +
lea eax [ebp+SystemTimeAsFileTime] +
push eax  +
call ds:GetSystemTimeAsFileTime  +
mov esi [ebp+SystemTimeAsFileTime.dwHighDateTime] +
xor esi [ebp+SystemTimeAsFileTime.dwLowDateTime] +
call ds:GetCurrentProcessId  +
xor esi eax +
call ds:GetCurrentThreadId  +
xor esi eax +
call ds:GetTickCount  +
xor esi eax +
lea eax [ebp+PerformanceCount] +
push eax  +
call ds:QueryPerformanceCounter  +
mov eax dword ptr [ebp+PerformanceCount+4] +
xor eax dword ptr [ebp+PerformanceCount] +
xor esi eax +
cmp esi edi +
jz loc_101C44F  +
test dword_1030118 ebx +
jnz loc_101C454  +
mov esi 0BB40E64Fh +
mov dword_1030118 esi +
not esi  +
mov dword_103011C esi +
pop esi  +
pop edi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 328h +
mov dword_1036C60 eax +
mov dword_1036C5C ecx +
mov dword_1036C58 edx +
mov dword_1036C54 ebx +
mov dword_1036C50 esi +
mov dword_1036C4C edi +
mov word_1036C78 ss +
mov word_1036C6C cs +
mov word_1036C48 ds +
mov word_1036C44 es +
mov word_1036C40 fs +
mov word_1036C3C gs +
pushf   +
pop dword_1036C70  +
mov eax [ebp+0] +
mov dword_1036C64 eax +
mov eax [ebp+4] +
mov dword_1036C68 eax +
lea eax [ebp+8] +
mov dword_1036C74 eax +
mov eax [ebp-320h] +
mov dword_1036BB0 10001h +
mov eax dword_1036C68 +
mov dword_1036B6C eax +
mov dword_1036B60 0C0000409h +
mov dword_1036B64 1 +
mov eax dword_1030118 +
mov [ebp-328h] eax +
mov eax dword_103011C +
mov [ebp-324h] eax +
push 0  +
call ds:SetUnhandledExceptionFilter  +
push offset ExceptionInfo  +
call ds:UnhandledExceptionFilter  +
push 0C0000409h  +
call ds:GetCurrentProcess  +
push eax  +
call ds:TerminateProcess  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2D0h +
mov eax dword_1030118 +
xor eax ebp +
mov [ebp+var_4] eax +
mov [ebp+var_220] eax +
mov [ebp+var_224] ecx +
mov [ebp+var_228] edx +
mov [ebp+var_22C] ebx +
mov [ebp+var_230] esi +
mov [ebp+var_234] edi +
mov [ebp+var_208] ss +
mov [ebp+var_214] cs +
mov [ebp+var_238] ds +
mov [ebp+var_23C] es +
mov [ebp+var_240] fs +
mov [ebp+var_244] gs +
pushf   +
pop [ebp+var_210]  +
mov eax [ebp+4] +
mov [ebp+var_218] eax +
lea eax [ebp+4] +
mov [ebp+var_2D0] 10001h +
mov [ebp+var_20C] eax +
mov eax [eax-4] +
push offset OutputString  +
mov [ebp+var_21C] eax +
call ds:OutputDebugStringA  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_101BC5D  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp loc_101C56B  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push esi  +
push edi  +
xor esi esi +
lea eax [ebp+var_8] +
push eax  +
push esi  +
push esi  +
push offset dword_10018D0  +
xor edi edi +
mov [ebp+var_8] esi +
mov [ebp+var_4] esi +
call ds:EtwEventRegister  +
test eax eax +
jnz loc_101C787  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push [ebp+var_4]  +
push [ebp+var_8]  +
call ds:EtwEventWrite  +
test eax eax +
jnz loc_101C787  +
inc edi  +
cmp [ebp+var_8] esi +
jnz loc_101C791  +
cmp [ebp+var_4] esi +
jz loc_101C79D  +
push [ebp+var_4]  +
push [ebp+var_8]  +
call ds:EtwEventUnregister  +
mov eax edi +
pop edi  +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push esi  +
mov esi [ebp+lpCriticalSection] +
push edi  +
xor edi edi +
push esi  +
mov [ebp+var_8] edi +
mov [ebp+var_4] edi +
call ds:EnterCriticalSection  +
mov eax [ebp+arg_4] +
cmp [esi+44h] eax +
jnz loc_101C7D3  +
test byte ptr [esi+60h] 10h +
jz loc_101C82C  +
push ebx  +
lea ebx [esi+2Ch] +
mov edi [ebx] +
mov [esi+44h] eax +
cmp edi ebx +
jz loc_101C825  +
mov eax [edi+18h] +
test al 1 +
jz loc_101C810  +
test al 2 +
jnz loc_101C810  +
push dword ptr [esi+44h]  +
push dword ptr [edi+0Ch]  +
call ds:SetThreadPriority  +
test eax eax +
jnz loc_101C810  +
call ds:GetLastError  +
test eax eax +
jnz loc_101C80A  +
mov eax 54Fh +
inc [ebp+var_4]  +
mov [ebp+var_8] eax +
mov edi [edi] +
cmp edi ebx +
jnz loc_101C7E0  +
cmp [ebp+var_4] 0 +
jz loc_101C825  +
mov edi [ebp+var_8] +
or dword ptr [esi+60h] 10h +
jmp loc_101C82B  +
and dword ptr [esi+60h] 0FFFFFFEFh +
xor edi edi +
pop ebx  +
push esi  +
call ds:LeaveCriticalSection  +
mov eax edi +
pop edi  +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
cmp dword ptr [ecx+24h] 0 +
jnz loc_101C862  +
lea eax [ecx+1Ch] +
cmp [eax] eax +
jnz loc_101C862  +
mov eax [ecx+38h] +
sub eax [ecx+40h] +
neg eax  +
sbb eax eax +
inc eax  +
jmp loc_101C864  +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
push ebx  +
push esi  +
mov esi [ebp+lpCriticalSection] +
push edi  +
mov edi ds:EnterCriticalSection +
push esi  +
call edi  +
push esi  +
call sub_101C840  +
mov ebx ds:LeaveCriticalSection +
jmp loc_101C8D4  +
xor eax eax +
cmp [esi+24h] eax +
jz loc_101C8A5  +
cmp [esi+38h] eax +
jg loc_101C8A5  +
cmp [esi+3Ch] eax +
jle loc_101C8DE  +
cmp [ebp+var_4] eax +
jnz loc_101C8B4  +
inc dword ptr [esi+5Ch]  +
mov [ebp+var_4] 1 +
push dword ptr [esi+58h]  +
call ds:ResetEvent  +
push esi  +
call ebx  +
push 0FFFFFFFFh  +
push dword ptr [esi+58h]  +
call ds:WaitForSingleObject  +
push esi  +
call edi  +
push esi  +
call sub_101C840  +
test eax eax +
jz loc_101C894  +
xor edi edi +
xor eax eax +
jmp loc_101C8E3  +
mov edi 236h +
cmp [ebp+var_4] eax +
jz loc_101C8EB  +
dec dword ptr [esi+5Ch]  +
push esi  +
call ebx  +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push 2Ch  +
push 0  +
push esi  +
call memset  +
add esp 0Ch +
mov [esi+4] esi +
mov [esi] esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
mov eax [esi+14h] +
test eax eax +
jz loc_101C936  +
push dword ptr [esi+18h]  +
call eax  +
mov esi [esi+0Ch] +
test esi esi +
jz loc_101C944  +
push esi  +
call ds:CloseHandle  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
push [ebp+lpCriticalSection]  +
mov edi ds:EnterCriticalSection +
call edi  +
mov esi [ebp+arg_4] +
dec dword ptr [esi+20h]  +
mov eax [esi+20h] +
push [ebp+lpCriticalSection]  +
mov ebx ds:LeaveCriticalSection +
mov [ebp+arg_4] eax +
call ebx  +
cmp [ebp+arg_4] 0 +
jg loc_101C9B1  +
mov eax [esi+14h] +
test eax eax +
jz loc_101C992  +
push dword ptr [esi+18h]  +
call eax  +
and dword ptr [esi+14h] 0 +
and dword ptr [esi+18h] 0 +
push [ebp+lpCriticalSection]  +
and dword ptr [esi+24h] 0 +
call edi  +
mov edx [ebp+lpCriticalSection] +
lea eax [edx+48h] +
mov ecx [eax+4] +
mov [esi] eax +
mov [esi+4] ecx +
mov [ecx] esi +
push edx  +
mov [eax+4] esi +
call ebx  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_4] +
lea eax [esi+24h] +
push eax  +
call ds:InterlockedIncrement  +
mov eax [esi+0Ch] +
mov ecx [ebp+arg_8] +
mov [ecx] eax +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
add eax 24h +
push eax  +
call ds:InterlockedDecrement  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+lpCriticalSection] +
push edi  +
call ds:EnterCriticalSection  +
or dword ptr [edi+60h] 2 +
push edi  +
call ds:LeaveCriticalSection  +
lea eax [edi+18h] +
push eax  +
call ds:WakeAllConditionVariable  +
lea esi [edi+2Ch] +
jmp loc_101CA60  +
mov ebx [esi] +
push 0FFFFFFFFh  +
push dword ptr [ebx+0Ch]  +
call ds:WaitForSingleObject  +
mov eax [esi] +
mov ecx [eax] +
mov [esi] ecx +
mov [ecx+4] esi +
mov [eax+4] eax +
mov [eax] eax +
dec dword ptr [edi+34h]  +
push dword ptr [ebx+0Ch]  +
call ds:CloseHandle  +
push ebx  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
cmp [esi] esi +
jnz loc_101CA29  +
lea ebx [edi+1Ch] +
jmp loc_101CA9A  +
mov esi [ebx] +
mov eax [esi] +
mov [ebx] eax +
mov [eax+4] ebx +
mov [esi+4] esi +
mov [esi] esi +
dec dword ptr [edi+24h]  +
cmp dword ptr [esi+20h] 1 +
jnz loc_101CA84  +
and dword ptr [esi+20h] 0 +
push esi  +
call sub_101C921  +
push esi  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
cmp [ebx] ebx +
jnz loc_101CA69  +
lea ebx [edi+48h] +
jmp loc_101CAC7  +
mov esi [ebx] +
mov eax [esi] +
mov [ebx] eax +
mov [eax+4] ebx +
push esi  +
mov [esi+4] esi +
mov [esi] esi +
call sub_101C921  +
push esi  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
cmp [ebx] ebx +
jnz loc_101CAA3  +
mov eax [edi+58h] +
test eax eax +
jz loc_101CAD9  +
push eax  +
call ds:CloseHandle  +
push edi  +
call ds:DeleteCriticalSection  +
push edi  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx ds:SetEvent +
push esi  +
push edi  +
mov edi [ebp+lpCriticalSection] +
push edi  +
call ds:EnterCriticalSection  +
test byte ptr [edi+60h] 2 +
jnz loc_101CB84  +
lea eax [edi+1Ch] +
cmp [eax] eax +
jnz loc_101CB4B  +
inc dword ptr [edi+40h]  +
cmp dword ptr [edi+5Ch] 0 +
jz loc_101CB39  +
push edi  +
call sub_101C840  +
test eax eax +
jz loc_101CB39  +
push dword ptr [edi+58h]  +
call ebx  +
push 0FFFFFFFFh  +
push edi  +
lea eax [edi+18h] +
push eax  +
call ds:SleepConditionVariableCS  +
dec dword ptr [edi+40h]  +
jmp loc_101CB14  +
lea eax [edi+1Ch] +
mov esi [eax] +
mov ecx [esi] +
mov [eax] ecx +
mov [ecx+4] eax +
mov [esi+4] esi +
mov [esi] esi +
dec dword ptr [edi+24h]  +
inc dword ptr [edi+28h]  +
push edi  +
call ds:LeaveCriticalSection  +
push dword ptr [esi+18h]  +
call dword ptr [esi+10h]  +
push dword ptr [esi+0Ch]  +
or dword ptr [esi+28h] 1 +
mov [esi+1Ch] eax +
call ebx  +
push esi  +
push edi  +
call sub_101C94E  +
jmp loc_101CB0D  +
push edi  +
call ds:LeaveCriticalSection  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+lpCriticalSection] +
push edi  +
xor esi esi +
call ds:EnterCriticalSection  +
xor ebx ebx +
lea ecx [edi+48h] +
inc ebx  +
cmp [ecx] ecx +
jz loc_101CBC8  +
mov eax [ecx] +
mov edx [eax] +
mov [ecx] edx +
mov [edx+4] ecx +
mov [eax+4] eax +
mov [eax] eax +
mov esi eax +
mov [eax+20h] ebx +
push edi  +
call ds:LeaveCriticalSection  +
test esi esi +
jnz loc_101CC41  +
push 2Ch  +
push esi  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov esi eax +
test esi esi +
jnz loc_101CC0F  +
push 8  +
pop edi  +
test esi esi +
jz loc_101CC06  +
push esi  +
call sub_101C921  +
push esi  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 14h  +
push esi  +
call sub_101C8FC  +
mov [esi+8] edi +
xor edi edi +
push edi  +
push edi  +
push ebx  +
push edi  +
call ds:CreateEventW  +
mov [esi+0Ch] eax +
cmp eax edi +
jnz loc_101CC3E  +
call ds:GetLastError  +
cmp eax edi +
jnz loc_101CC3A  +
mov eax 54Fh +
mov edi eax +
jmp loc_101CBEC  +
mov [esi+20h] ebx +
push dword ptr [esi+0Ch]  +
and dword ptr [esi+24h] 0 +
call ds:ResetEvent  +
mov eax [ebp+arg_10] +
and dword ptr [esi+28h] 0FFFFFFFEh +
mov [esi+18h] eax +
mov eax [ebp+arg_8] +
mov [esi+10h] eax +
mov eax [ebp+arg_C] +
mov [esi+14h] eax +
mov eax [ebp+arg_4] +
mov dword ptr [esi+1Ch] 80071303h +
mov [eax] esi +
xor edi edi +
jmp loc_101CC06  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
push 64h  +
xor edi edi +
push edi  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov esi eax +
cmp esi edi +
jnz loc_101CCA1  +
push 8  +
pop ebx  +
jmp loc_101CD22  +
push 64h  +
push edi  +
push esi  +
call memset  +
add esp 0Ch +
push esi  +
call ds:InitializeCriticalSection  +
lea eax [esi+18h] +
push eax  +
call ds:InitializeConditionVariable  +
lea eax [esi+1Ch] +
mov [eax+4] eax +
mov [eax] eax +
lea eax [esi+2Ch] +
mov [eax+4] eax +
mov [eax] eax +
lea eax [esi+48h] +
mov [eax+4] eax +
mov [eax] eax +
mov eax [ebp+arg_4] +
or dword ptr [esi+60h] 1 +
push edi  +
push 1  +
mov [esi+50h] eax +
mov eax [ebp+arg_8] +
push 1  +
push edi  +
mov [esi+44h] edi +
mov [esi+54h] eax +
call ds:CreateEventW  +
mov [esi+58h] eax +
cmp eax edi +
jnz loc_101CD0F  +
call ds:GetLastError  +
cmp eax edi +
jnz loc_101CD0B  +
mov eax 54Fh +
mov ebx eax +
jmp loc_101CD18  +
mov eax [ebp+arg_0] +
mov [eax] esi +
xor esi esi +
xor ebx ebx +
cmp esi edi +
jz loc_101CD22  +
push esi  +
call sub_101C9FD  +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov esi [edi+8] +
push esi  +
call ds:EnterCriticalSection  +
or dword ptr [edi+18h] 1 +
inc dword ptr [esi+38h]  +
push dword ptr [esi+44h]  +
dec dword ptr [esi+3Ch]  +
call ds:GetCurrentThread  +
push eax  +
call ds:SetThreadPriority  +
test eax eax +
jnz loc_101CD69  +
call ds:GetLastError  +
mov ebx ds:LeaveCriticalSection +
push esi  +
call ebx  +
mov eax [esi+50h] +
test eax eax +
jz loc_101CD84  +
push dword ptr [esi+54h]  +
push esi  +
call eax  +
mov [ebp+arg_0] eax +
jmp loc_101CD8E  +
push esi  +
call sub_101CAFC  +
and [ebp+arg_0] 0 +
push esi  +
call ds:EnterCriticalSection  +
call ds:GetCurrentThread  +
push eax  +
call ds:GetThreadPriority  +
mov eax [ebp+arg_0] +
or dword ptr [edi+18h] 2 +
mov [edi+14h] eax +
dec dword ptr [esi+38h]  +
push esi  +
call ebx  +
mov eax [ebp+arg_0] +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push 1Ch  +
xor ebx ebx +
push ebx  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov esi eax +
cmp esi ebx +
jnz loc_101CDEC  +
mov [ebp+lpCriticalSection] 8 +
jmp loc_101CE6C  +
push edi  +
push 7  +
pop ecx  +
xor eax eax +
mov edi esi +
stos   +
mov edi [ebp+lpCriticalSection] +
push edi  +
mov [esi+4] esi +
mov [esi] esi +
mov [esi+8] edi +
call ds:EnterCriticalSection  +
lea eax [esi+10h] +
push eax  +
push ebx  +
push esi  +
push offset sub_101CD30  +
push ebx  +
push ebx  +
call ds:CreateThread  +
mov [esi+0Ch] eax +
cmp eax ebx +
jnz loc_101CE36  +
call ds:GetLastError  +
cmp eax ebx +
jnz loc_101CE31  +
mov eax 54Fh +
mov [ebp+lpCriticalSection] eax +
jmp loc_101CE51  +
lea eax [edi+2Ch] +
mov ecx [eax+4] +
mov [esi] eax +
mov [esi+4] ecx +
mov [ecx] esi +
mov [eax+4] esi +
inc dword ptr [edi+34h]  +
inc dword ptr [edi+3Ch]  +
xor esi esi +
mov [ebp+lpCriticalSection] ebx +
push edi  +
call ds:LeaveCriticalSection  +
pop edi  +
cmp esi ebx +
jz loc_101CE6C  +
push esi  +
push ebx  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
mov eax [ebp+lpCriticalSection] +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+lpCriticalSection] +
push esi  +
push edi  +
push ebx  +
xor esi esi +
call ds:EnterCriticalSection  +
mov ecx [ebx+40h] +
mov eax [ebp+arg_4] +
cmp ecx eax +
jbe loc_101CEB5  +
xor edi edi +
xor esi esi +
push ebx  +
call ds:LeaveCriticalSection  +
test edi edi +
jnz loc_101CEDB  +
neg esi  +
sbb esi esi +
and esi 235h +
mov eax esi +
jmp loc_101CEF2  +
sub eax ecx +
mov edi eax +
mov eax [ebp+arg_8] +
test eax eax +
jz loc_101CE9C  +
mov ecx [ebx+34h] +
lea edx [ecx+edi] +
cmp edx eax +
jbe loc_101CE9A  +
xor esi esi +
inc esi  +
cmp eax ecx +
jbe loc_101CED7  +
sub eax ecx +
mov edi eax +
jmp loc_101CE9C  +
xor edi edi +
jmp loc_101CE9C  +
xor esi esi +
test edi edi +
jbe loc_101CEF0  +
push ebx  +
call sub_101CDC1  +
test eax eax +
jnz loc_101CEF2  +
inc esi  +
cmp esi edi +
jb loc_101CEE1  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx ds:EnterCriticalSection +
push esi  +
mov esi [ebp+lpCriticalSection] +
push edi  +
push esi  +
call ebx  +
mov eax [ebp+arg_4] +
inc dword ptr [eax+20h]  +
mov edi ds:LeaveCriticalSection +
lea ecx [esi+1Ch] +
mov edx [ecx+4] +
mov [eax] ecx +
mov [eax+4] edx +
mov [edx] eax +
mov [ecx+4] eax +
inc dword ptr [esi+24h]  +
push esi  +
call edi  +
lea eax [esi+18h] +
push eax  +
call ds:WakeConditionVariable  +
cmp dword ptr [esi+38h] 0 +
jg loc_101CF7F  +
cmp dword ptr [esi+3Ch] 0 +
jg loc_101CF7F  +
push esi  +
call ebx  +
cmp dword ptr [esi+38h] 0 +
jg loc_101CF7C  +
cmp dword ptr [esi+3Ch] 0 +
jg loc_101CF7C  +
mov eax [esi+60h] +
test al 4 +
jnz loc_101CF7C  +
cmp dword ptr [esi+34h] 10h +
push esi  +
jg loc_101CF7D  +
or eax 4 +
mov [esi+60h] eax +
call edi  +
push esi  +
call sub_101CDC1  +
push esi  +
call ebx  +
and dword ptr [esi+60h] 0FFFFFFFBh +
push esi  +
call edi  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
call ds:GetLastError  +
test eax eax +
jnz loc_101CF9D  +
mov eax [ebp+arg_0] +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+dwBytes]  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov esi eax +
test esi esi +
jz loc_101CFDB  +
push [ebp+dwBytes]  +
push 0  +
push esi  +
call memset  +
mov eax [ebp+arg_0] +
add esp 0Ch +
mov [eax] esi +
xor eax eax +
jmp loc_101CFDE  +
push 8  +
pop eax  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
push edi  +
push 6  +
pop ecx  +
xor eax eax +
mov edi edx +
stos   +
or dword ptr [edx+14h] 1 +
pop edi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax [ebp+arg_8] +
movsx ecx ax +
shr eax 10h +
cwde   +
push esi  +
push edi  +
mov edi [ebp+hWnd] +
mov [ebp+Point.y] eax +
lea eax [ebp+Point] +
push eax  +
push edi  +
mov [ebp+Point.x] ecx +
call ds:ClientToScreen  +
mov esi [ebp+arg_0] +
mov eax [ebp+Point.x] +
push 0  +
push dword ptr [esi+4]  +
mov [esi+8] eax +
mov eax [ebp+Point.y] +
push esi  +
mov [esi+0Ch] eax +
mov [esi+10h] edi +
call dword ptr [esi]  +
test eax eax +
jz loc_101D051  +
xor eax eax +
jmp loc_101D065  +
push edi  +
call ds:SetCapture  +
call ds:GetLastError  +
or dword ptr [esi+14h] 4 +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
test byte ptr [esi+14h] 4 +
jz loc_101D09B  +
push 1  +
push dword ptr [esi+4]  +
push esi  +
call dword ptr [esi]  +
call ds:ReleaseCapture  +
test eax eax +
jnz loc_101D097  +
call ds:GetLastError  +
and dword ptr [esi+14h] 0FFFFFFF3h +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push 48h  +
push 0  +
push esi  +
call memset  +
add esp 0Ch +
push esi  +
call sub_101CFE8  +
push 0  +
mov byte ptr [esi+28h] 64h +
call ds:GetModuleHandleW  +
or dword ptr [esi+44h] 1 +
mov [esi+24h] eax +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
mov eax [esi+18h] +
test eax eax +
jz loc_101D0F5  +
push eax  +
call ds:DestroyWindow  +
movzx eax word ptr [esi+20h] +
test ax ax +
jz loc_101D10B  +
push dword ptr [esi+24h]  +
movzx eax ax +
push eax  +
call ds:UnregisterClassW  +
or dword ptr [esi+14h] 2 +
or dword ptr [esi+44h] 2 +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 7Ch +
mov eax dword_1030118 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
xor esi esi +
mov [ebp+var_68] esi +
mov [ebp+var_64] esi +
mov [ebp+var_6C] esi +
cmp ebx esi +
jz loc_101D366  +
mov eax [ebx+18h] +
cmp eax esi +
jz loc_101D366  +
cmp [ebx+1Ch] esi +
jz loc_101D366  +
lea ecx [ebp+Rect] +
push ecx  +
push eax  +
call ds:GetClientRect  +
lea eax [ebp+Paint] +
push eax  +
push dword ptr [ebx+18h]  +
call ds:BeginPaint  +
mov [ebp+hDC] eax +
cmp eax esi +
jnz loc_101D185  +
call ds:GetLastError  +
jmp loc_101D354  +
push eax  +
call ds:CreateCompatibleDC  +
mov [ebp+var_4C] eax +
cmp eax esi +
jnz loc_101D19E  +
call ds:GetLastError  +
jmp loc_101D344  +
mov esi ds:SelectObject +
push edi  +
push dword ptr [ebx+1Ch]  +
push eax  +
call esi  +
lea edi [ebx+2Ch] +
push edi  +
call ds:IsRectEmpty  +
test eax eax +
jnz loc_101D29E  +
mov eax [ebx+3Ch] +
test eax eax +
jz loc_101D22A  +
push dword ptr [ebx+40h]  +
push eax  +
push 6  +
call ds:CreatePen  +
mov [ebp+var_68] eax +
test eax eax +
jnz loc_101D1E2  +
call ds:GetLastError  +
jmp loc_101D334  +
push eax  +
push [ebp+hDC]  +
call esi  +
push 5  +
mov [ebp+var_64] eax +
call ds:GetStockObject  +
push eax  +
push [ebp+hDC]  +
call esi  +
push dword ptr [ebx+38h]  +
mov [ebp+var_6C] eax +
push dword ptr [ebx+34h]  +
push dword ptr [ebx+30h]  +
push dword ptr [edi]  +
push [ebp+hDC]  +
call ds:Rectangle  +
mov eax [ebx+3Ch] +
mov esi edi +
lea edi [ebp+rc] +
movs   +
movs   +
movs   +
movs   +
add [ebp-5Ch] eax +
add [ebp+rc] eax +
sub [ebp-58h] eax +
sub [ebp-54h] eax +
jmp loc_101D233  +
mov esi edi +
lea edi [ebp+rc] +
movs   +
movs   +
movs   +
movs   +
lea eax [ebp+rc] +
push eax  +
call ds:IsRectEmpty  +
test eax eax +
jnz loc_101D283  +
mov eax [ebp-54h] +
sub eax [ebp-5Ch] +
push 0CC0020h  +
push dword ptr [ebp-5Ch]  +
push [ebp+rc]  +
push [ebp+var_4C]  +
push eax  +
mov eax [ebp-58h] +
sub eax [ebp+rc] +
push eax  +
push dword ptr [ebp-5Ch]  +
push [ebp+rc]  +
push [ebp+hDC]  +
call ds:BitBlt  +
test eax eax +
jnz loc_101D283  +
call ds:GetLastError  +
mov esi ds:SelectObject +
xor edi edi +
jmp loc_101D31A  +
push dword ptr [ebx+38h]  +
push dword ptr [ebx+34h]  +
push dword ptr [ebx+30h]  +
push dword ptr [ebx+2Ch]  +
push [ebp+hDC]  +
call ds:ExcludeClipRect  +
mov esi ds:SelectObject +
push 0  +
call ds:GetStockObject  +
push eax  +
lea eax [ebp+Rect] +
push eax  +
push [ebp+hDC]  +
call ds:FillRect  +
xor eax eax +
lea edi [ebp+var_50] +
stos   +
mov [ebp+var_50.BlendOp] al +
mov [ebp+var_50.BlendFlags] al +
mov al [ebx+28h] +
mov [ebp+var_50.SourceConstantAlpha] al +
mov [ebp+var_50.AlphaFormat] 0 +
push dword ptr [ebp+var_50.BlendOp]  +
xor edi edi +
push dword ptr [ebp-70h]  +
push dword ptr [ebp-74h]  +
push edi  +
push edi  +
push [ebp+var_4C]  +
push dword ptr [ebp-70h]  +
push dword ptr [ebp-74h]  +
push edi  +
push edi  +
push [ebp+hDC]  +
call ds:AlphaBlend  +
test eax eax +
jnz loc_101D31A  +
call ds:GetLastError  +
push 0CC0020h  +
push edi  +
push edi  +
push [ebp+var_4C]  +
push dword ptr [ebp-70h]  +
push dword ptr [ebp-74h]  +
push edi  +
push edi  +
push [ebp+hDC]  +
call ds:BitBlt  +
test eax eax +
jnz loc_101D31A  +
call ds:GetLastError  +
cmp [ebp+var_6C] edi +
jz loc_101D327  +
push [ebp+var_6C]  +
push [ebp+hDC]  +
call esi  +
cmp [ebp+var_64] edi +
jz loc_101D334  +
push [ebp+var_64]  +
push [ebp+hDC]  +
call esi  +
cmp [ebp+var_68] 0 +
pop edi  +
jz loc_101D344  +
push [ebp+var_68]  +
call ds:DeleteObject  +
xor esi esi +
cmp [ebp+var_4C] esi +
jz loc_101D354  +
push [ebp+var_4C]  +
call ds:DeleteDC  +
cmp [ebp+hDC] esi +
jz loc_101D366  +
lea eax [ebp+Paint] +
push eax  +
push dword ptr [ebx+18h]  +
call ds:EndPaint  +
mov ecx [ebp+var_4] +
pop esi  +
xor ecx ebp +
xor eax eax +
pop ebx  +
call sub_101BC5D  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
or dword ptr [eax+8] 2 +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
sub esp 20h +
dec eax  +
dec eax  +
push esi  +
push edi  +
jz loc_101D4C6  +
sub eax 4 +
jz loc_101D47F  +
sub eax 10Ah +
jz loc_101D3F1  +
dec eax  +
jnz loc_101D4E1  +
push 0FFFFFFEBh  +
push [ebp+hWnd]  +
call ds:GetWindowLongW  +
test eax eax +
jz loc_101D4E1  +
movzx ecx word ptr [ebp+lParam] +
dec ecx  +
jz loc_101D3E4  +
dec ecx  +
jnz loc_101D4E1  +
mov ecx [eax] +
or dword ptr [ecx] 2 +
mov eax [eax] +
or dword ptr [eax] 1 +
xor eax eax +
inc eax  +
jmp loc_101D4E3  +
mov edi [ebp+hWnd] +
push ebx  +
mov ebx [ebp+dwNewLong] +
push ebx  +
push 0FFFFFFEBh  +
push edi  +
call ds:SetWindowLongW  +
xor esi esi +
push esi  +
lea eax [ebp+pvParam] +
push eax  +
push esi  +
push 30h  +
call ds:SystemParametersInfoW  +
lea eax [ebp+Rect] +
push eax  +
push edi  +
call ds:GetWindowRect  +
mov eax [ebp+Rect.bottom] +
sub eax [ebp+Rect.top] +
push esi  +
push eax  +
mov eax [ebp+Rect.right] +
sub eax [ebp+Rect.left] +
push eax  +
mov eax [ebp+var_14] +
sub eax [ebp+Rect.bottom] +
add eax [ebp+Rect.top] +
push eax  +
mov eax [ebp+var_18] +
sub eax [ebp+Rect.right] +
add eax [ebp+Rect.left] +
push eax  +
push 0FFFFFFFFh  +
push edi  +
call ds:SetWindowPos  +
push 7D3h  +
push dword ptr [ebx+4]  +
call ds:LoadIconW  +
mov [ebp+lParam] eax +
cmp eax esi +
jz loc_101D479  +
push eax  +
push esi  +
mov ebx 80h +
push ebx  +
push edi  +
mov edi ds:SendMessageW +
call edi  +
push [ebp+lParam]  +
push esi  +
push ebx  +
push [ebp+hWnd]  +
call edi  +
xor eax eax +
inc eax  +
pop ebx  +
jmp loc_101D4E3  +
xor esi esi +
cmp [ebp+lParam] esi +
jz loc_101D4E1  +
push 0FFFFFFEBh  +
push [ebp+hWnd]  +
call ds:GetWindowLongW  +
mov edi eax +
cmp edi esi +
jz loc_101D4E1  +
mov eax [edi] +
mov eax [eax+4] +
push 53h  +
push esi  +
push esi  +
push esi  +
push esi  +
push esi  +
push dword ptr [eax+18h]  +
call ds:SetWindowPos  +
test eax eax +
jnz loc_101D4E1  +
call ds:GetLastError  +
cmp eax esi +
jnz loc_101D4BF  +
mov eax 54Fh +
mov ecx [edi] +
mov [ecx+8] eax +
jmp loc_101D4E1  +
push 0FFFFFFEBh  +
push [ebp+hWnd]  +
call ds:GetWindowLongW  +
xor esi esi +
cmp eax esi +
jz loc_101D4E1  +
mov ecx [eax] +
mov [ecx+0Ch] esi +
mov eax [eax] +
or dword ptr [eax] 4 +
xor eax eax +
pop edi  +
pop esi  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
push [ebp+hWnd]  +
call ds:GetDC  +
mov edi eax +
test edi edi +
jnz loc_101D517  +
call ds:GetLastError  +
test eax eax +
jnz loc_101D513  +
mov eax 54Fh +
mov esi eax +
jmp loc_101D556  +
push edi  +
call ds:CreateCompatibleDC  +
mov esi eax +
test esi esi +
jnz loc_101D537  +
call ds:GetLastError  +
test eax eax +
jnz loc_101D533  +
mov eax 54Fh +
mov esi eax +
jmp loc_101D54D  +
push [ebp+arg_0]  +
push esi  +
call ds:SelectObject  +
mov ecx [ebp+arg_8] +
mov [ecx] esi +
mov ecx [ebp+arg_C] +
mov [ecx] eax +
xor esi esi +
push edi  +
push 0  +
call ds:ReleaseDC  +
pop edi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
mov edi [ebp+arg_0] +
push 0Ah  +
pop ecx  +
xor eax eax +
stos   +
pop edi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax] +
test eax eax +
jz loc_101D592  +
push eax  +
call ds:DeleteObject  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ds:GetSystemMetrics +
push edi  +
push 4Dh  +
call esi  +
mov edi [ebp+arg_0] +
push 4Ch  +
mov [edi] eax +
call esi  +
push 4Eh  +
mov [edi+4] eax +
call esi  +
push 4Fh  +
mov [edi+8] eax +
call esi  +
cmp dword ptr [edi+8] 0 +
mov [edi+0Ch] eax +
pop edi  +
pop esi  +
jz loc_101D5D6  +
test eax eax +
jz loc_101D5D6  +
xor eax eax +
jmp loc_101D5DB  +
mov eax 54Fh +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
and [ebp+var_10] 0 +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
and dword ptr [esi] 0 +
push edi  +
xor eax eax +
lea ebx [esi+4] +
mov edi ebx +
stos   +
stos   +
stos   +
xor eax eax +
lea edi [ebp+var_C] +
stos   +
stos   +
stos   +
lea eax [ebp+var_10] +
push eax  +
call sub_101D59B  +
mov eax [ebp+arg_4] +
sub eax [ebp+var_C] +
pop edi  +
mov [esi] eax +
mov eax [ebp+arg_C] +
sub eax [ebp+var_C] +
mov [esi+8] eax +
mov eax [ebp+arg_8] +
sub eax [ebp+var_10] +
mov [ebx] eax +
mov eax [ebp+arg_10] +
sub eax [ebp+var_10] +
mov [esi+0Ch] eax +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push edi  +
xor eax eax +
lea edi [ebp+var_4] +
stos   +
and [ebp+var_10] eax +
lea edi [ebp+var_C] +
stos   +
stos   +
stos   +
lea eax [ebp+var_10] +
push eax  +
call sub_101D59B  +
mov eax [ebp+arg_0] +
mov edx [ebp+arg_4] +
sub eax [ebp+var_C] +
sub edx [ebp+var_10] +
pop edi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
shr ecx 1 +
push 0  +
pop eax  +
jz loc_101D692  +
cmp ecx 7FFFFFFFh +
jbe loc_101D697  +
mov eax 80070057h +
test eax eax +
jl loc_101D6D4  +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
lea eax [ebp+arg_C] +
push eax  +
push [ebp+arg_8]  +
lea esi [ecx-1] +
push esi  +
push edi  +
xor ebx ebx +
call ds:_vsnwprintf  +
add esp 10h +
test eax eax +
jl loc_101D6C4  +
cmp eax esi +
ja loc_101D6C4  +
jnz loc_101D6CF  +
jmp loc_101D6C9  +
mov ebx 8007007Ah +
xor eax eax +
mov [edi+esi*2] ax +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
test byte ptr [esi+14h] 4 +
jz loc_101D722  +
mov eax [esi] +
test eax eax +
jz loc_101D700  +
push 2  +
push dword ptr [esi+4]  +
push esi  +
call eax  +
test eax eax +
jz loc_101D700  +
or dword ptr [esi+14h] 8 +
push 1Bh  +
call ds:GetAsyncKeyState  +
mov ecx 8000h +
test ax cx +
jz loc_101D716  +
or dword ptr [esi+14h] 8 +
test byte ptr [esi+14h] 8 +
jz loc_101D722  +
push esi  +
call sub_101D070  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+0Ch] +
sub eax 0Fh +
push esi  +
jz loc_101D7D3  +
sub eax 72h +
jz loc_101D7AF  +
sub eax 17Fh +
mov esi [ebp+8] +
jz loc_101D78B  +
dec eax  +
jz loc_101D76D  +
dec eax  +
jnz loc_101D7A3  +
push 0FFFFFFEBh  +
push esi  +
call ds:GetWindowLongW  +
test eax eax +
jz loc_101D7A3  +
cmp dword ptr [eax] 0 +
jz loc_101D7A3  +
push eax  +
call sub_101D070  +
jmp loc_101D7A3  +
push 0FFFFFFEBh  +
push esi  +
call ds:GetWindowLongW  +
test eax eax +
jz loc_101D7A3  +
cmp dword ptr [eax] 0 +
jz loc_101D7A3  +
push dword ptr [ebp+14h]  +
push esi  +
push eax  +
call sub_101D008  +
jmp loc_101D7A3  +
push 0FFFFFFEBh  +
push esi  +
call ds:GetWindowLongW  +
test eax eax +
jz loc_101D7A3  +
cmp dword ptr [eax] 0 +
jz loc_101D7A3  +
push eax  +
call sub_101D6DB  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push esi  +
jmp loc_101D7CB  +
mov esi [ebp+14h] +
push dword ptr [esi]  +
push 0FFFFFFEBh  +
push dword ptr [ebp+8]  +
call ds:SetWindowLongW  +
push esi  +
push dword ptr [ebp+10h]  +
push 81h  +
push dword ptr [ebp+8]  +
call ds:DefWindowProcW  +
jmp loc_101D7E4  +
push 0FFFFFFEBh  +
push dword ptr [ebp+8]  +
call ds:GetWindowLongW  +
push eax  +
call sub_101D11D  +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
push ebx  +
push esi  +
mov esi [ebp+hDC] +
push edi  +
lea eax [ebp+var_8] +
push eax  +
lea eax [ebp+var_4] +
push eax  +
push dword ptr [esi+18h]  +
xor edi edi +
push [ebp+arg_4]  +
mov [ebp+var_8] edi +
mov [ebp+var_4] edi +
call sub_101D4EE  +
mov ebx eax +
cmp ebx edi +
jnz loc_101D87F  +
push dword ptr [esi+18h]  +
call ds:GetDC  +
mov [ebp+hDC] eax +
cmp eax edi +
jnz loc_101D840  +
call ds:GetLastError  +
cmp eax edi +
jnz loc_101D83C  +
mov eax 54Fh +
mov ebx eax +
jmp loc_101D86E  +
lea eax [ebp+Rect] +
push eax  +
push dword ptr [esi+18h]  +
call ds:GetClientRect  +
push 0CC0020h  +
push edi  +
push edi  +
push [ebp+hDC]  +
push dword ptr [ebp-0Ch]  +
push dword ptr [ebp-10h]  +
push edi  +
push edi  +
push [ebp+var_4]  +
call ds:BitBlt  +
test eax eax +
jz loc_101D82D  +
xor ebx ebx +
cmp [ebp+hDC] edi +
jz loc_101D87F  +
push [ebp+hDC]  +
push dword ptr [esi+18h]  +
call ds:ReleaseDC  +
cmp [ebp+var_8] edi +
jz loc_101D890  +
push [ebp+var_8]  +
push [ebp+var_4]  +
call ds:SelectObject  +
cmp [ebp+var_4] edi +
jz loc_101D89E  +
push [ebp+var_4]  +
call ds:DeleteDC  +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
push 0Ch  +
lea eax [ebp+var_4] +
push eax  +
call sub_101CFA6  +
test eax eax +
jnz loc_101D8DF  +
mov eax [ebp+arg_0] +
mov ecx [eax] +
mov eax [ebp+var_4] +
mov [eax+4] ecx +
mov ecx [ebp+arg_4] +
or dword ptr [eax+8] 1 +
mov [ecx] eax +
xor ecx ecx +
xor eax eax +
jmp loc_101D8E2  +
mov ecx [ebp+var_4] +
test ecx ecx +
jz locret_101D8EA  +
or dword ptr [ecx+8] 2 +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 38h +
cmp dword ptr [ebp+10h] 0 +
push ebx  +
push esi  +
push edi  +
jz loc_101D9CA  +
cmp dword ptr [ebp+10h] 2 +
jnz loc_101D9C1  +
lea eax [ebp-8] +
push eax  +
call ds:GetCursorPos  +
mov eax [ebp+8] +
mov ecx [eax+0Ch] +
mov esi [ebp-4] +
cmp ecx esi +
mov [ebp-14h] ecx +
jle loc_101D92F  +
mov [ebp-14h] esi +
mov eax [eax+8] +
mov edx [ebp-8] +
cmp eax edx +
mov [ebp-18h] eax +
jle loc_101D93F  +
mov [ebp-18h] edx +
cmp ecx esi +
mov [ebp-0Ch] ecx +
jge loc_101D949  +
mov [ebp-0Ch] esi +
cmp eax edx +
mov [ebp-10h] eax +
jge loc_101D953  +
mov [ebp-10h] edx +
mov eax [ebp+0Ch] +
mov eax [eax] +
mov ebx [eax+4] +
lea esi [ebx+2Ch] +
lea edi [ebp-28h] +
movs   +
movs   +
movs   +
movs   +
sub esp 10h +
mov edi esp +
lea esi [ebp-18h] +
movs   +
movs   +
movs   +
lea eax [ebp-38h] +
push eax  +
movs   +
call sub_101D5E4  +
mov esi eax +
lea edi [ebp-18h] +
movs   +
movs   +
movs   +
push 0  +
lea eax [ebp-28h] +
movs   +
mov esi ds:InvalidateRect +
push eax  +
push dword ptr [ebx+18h]  +
call esi  +
push 0  +
lea eax [ebp-18h] +
push eax  +
push dword ptr [ebx+18h]  +
call esi  +
mov eax [ebp+0Ch] +
lea esi [ebp-18h] +
lea edi [ebx+2Ch] +
movs   +
movs   +
movs   +
movs   +
mov edi [eax] +
add edi 14h +
lea esi [ebp-18h] +
movs   +
movs   +
movs   +
movs   +
push dword ptr [ebx+18h]  +
call ds:UpdateWindow  +
pop edi  +
pop esi  +
xor eax eax +
pop ebx  +
leave   +
retn 0Ch  +
***
mov eax [ebp+8] +
mov ecx [eax+0Ch] +
mov eax [eax+8] +
mov [ebp-14h] ecx +
mov [ebp-18h] eax +
mov [ebp-0Ch] ecx +
mov [ebp-10h] eax +
jmp loc_101D953  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
mov edi [ebp+arg_0] +
push 40h  +
push 0  +
push edi  +
call memset  +
add esp 0Ch +
push 0Ah  +
pop ecx  +
xor eax eax +
stos   +
pop edi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
mov eax [esi+38h] +
test eax eax +
jz loc_101DA30  +
push eax  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
push esi  +
call sub_101D57D  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
lea eax [esi+4] +
xor edi edi +
push eax  +
mov [ebp+var_4] edi +
mov [ebp+var_8] edi +
mov [ebp+var_C] edi +
mov dword ptr [eax] 14h +
call ds:GetCursorInfo  +
test eax eax +
jnz loc_101DA83  +
call ds:GetLastError  +
cmp eax edi +
jnz loc_101DA7C  +
mov eax 54Fh +
mov ebx eax +
jmp loc_101DB63  +
lea edi [esi+18h] +
push edi  +
call sub_101D59B  +
mov ebx eax +
xor eax eax +
cmp ebx eax +
jnz loc_101DB63  +
push eax  +
push eax  +
push eax  +
push offset aDisplay  +
call ds:CreateDCW  +
mov ebx eax +
mov [ebp+arg_0] ebx +
test ebx ebx +
jnz loc_101DAC2  +
call ds:GetLastError  +
test eax eax +
jnz loc_101DABE  +
mov eax 54Fh +
mov ebx eax +
jmp loc_101DB28  +
push ebx  +
call ds:CreateCompatibleDC  +
mov [ebp+var_4] eax +
test eax eax +
jz loc_101DAAF  +
push dword ptr [esi+24h]  +
push dword ptr [esi+20h]  +
push ebx  +
call ds:CreateCompatibleBitmap  +
mov ebx eax +
mov [ebp+var_8] ebx +
test ebx ebx +
jz loc_101DAAF  +
push ebx  +
push [ebp+var_4]  +
call ds:SelectObject  +
push 0CC0020h  +
push dword ptr [edi]  +
xor edi edi +
push dword ptr [esi+1Ch]  +
mov [ebp+var_C] eax +
push [ebp+arg_0]  +
push dword ptr [esi+24h]  +
push dword ptr [esi+20h]  +
push edi  +
push edi  +
push [ebp+var_4]  +
call ds:BitBlt  +
test eax eax +
jnz loc_101DB21  +
call ds:GetLastError  +
cmp eax edi +
jmp loc_101DAB7  +
mov [esi] ebx +
mov [ebp+var_8] edi +
xor ebx ebx +
mov esi ds:DeleteDC +
xor edi edi +
cmp [ebp+arg_0] edi +
jz loc_101DB3A  +
push [ebp+arg_0]  +
call esi  +
cmp [ebp+var_C] edi +
jz loc_101DB4B  +
push [ebp+var_C]  +
push [ebp+var_4]  +
call ds:SelectObject  +
cmp [ebp+var_4] edi +
jz loc_101DB55  +
push [ebp+var_4]  +
call esi  +
cmp [ebp+var_8] edi +
jz loc_101DB63  +
push [ebp+var_8]  +
call ds:DeleteObject  +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0C4h +
mov eax dword_1030118 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_4] +
push esi  +
mov esi [ebp+arg_0] +
mov [esi+1Ch] eax +
mov eax [ebp+arg_8] +
push edi  +
mov [esi] eax +
mov eax [ebp+arg_C] +
push offset dword_1036E7C  +
mov [esi+4] eax +
call ds:InterlockedIncrement  +
push esi  +
push eax  +
push offset aSptpbitmap  +
push offset aWsXP  +
mov edi 80h +
lea eax [ebp+var_84] +
push edi  +
push eax  +
call sub_101D67B  +
push 30h  +
lea eax [ebp+var_C4] +
push 0  +
push eax  +
call memset  +
mov eax [esi+24h] +
add esp 24h +
mov [ebp+var_C4.hInstance] eax +
push 7F03h  +
lea eax [ebp+var_84] +
push 0  +
mov [ebp+var_C4.cbSize] 30h +
mov [ebp+var_C4.lpszClassName] eax +
mov [ebp+var_C4.style] 3 +
mov [ebp+var_C4.lpfnWndProc] offset loc_101D72C +
call ds:LoadCursorW  +
mov [ebp+var_C4.hCursor] eax +
lea eax [ebp+var_C4] +
push eax  +
call ds:RegisterClassExW  +
mov [esi+20h] ax +
test ax ax +
jnz loc_101DC40  +
push 583h  +
call sub_101CF8B  +
jmp loc_101DC94  +
lea eax [ebp+Y] +
push eax  +
call sub_101D59B  +
test eax eax +
jnz loc_101DC94  +
push esi  +
push dword ptr [esi+24h]  +
push eax  +
push eax  +
push [ebp+nHeight]  +
movzx eax word ptr [esi+20h] +
push [ebp+nWidth]  +
push [ebp+Y]  +
push [ebp+X]  +
push 80000000h  +
push offset WindowName  +
push eax  +
push edi  +
call ds:CreateWindowExW  +
mov [esi+18h] eax +
test eax eax +
jnz loc_101DC92  +
push 578h  +
jmp loc_101DC39  +
xor eax eax +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_101BC5D  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 94h +
push ebx  +
push esi  +
push edi  +
lea eax [ebp+var_8] +
xor esi esi +
push eax  +
mov [ebp+var_C] esi +
call ds:GetProcessDefaultLayout  +
test eax eax +
jz loc_101DCDE  +
test byte ptr [ebp+var_8] 1 +
jz loc_101DCDE  +
push esi  +
mov [ebp+var_C] 1 +
call ds:SetProcessDefaultLayout  +
lea eax [ebp+hDC] +
push eax  +
call sub_101D0A5  +
push 9  +
pop ecx  +
xor eax eax +
lea edi [ebp+var_30] +
stos   +
mov ecx [ebp+dwInitParam] +
push 2  +
lea eax [ebp+var_30] +
pop ebx  +
mov [ebp+lpMem] esi +
mov esi [ebp+arg_4] +
mov [ecx] eax +
lea eax [ebp+hDC] +
push esi  +
mov [ebp+var_2C] eax +
mov [ebp+var_58] ebx +
mov [ebp+var_54] 0FFh +
call sub_101DA40  +
mov edi eax +
test edi edi +
jnz loc_101DE83  +
push [ebp+dwInitParam]  +
lea eax [ebp+hDC] +
push offset loc_101D8F3  +
push dword ptr [esi]  +
push eax  +
call sub_101DB71  +
mov edi eax +
test edi edi +
jnz loc_101DE83  +
mov eax [ebp+dwInitParam] +
push eax  +
push offset DialogFunc  +
push edi  +
push 7D1h  +
push dword ptr [eax+4]  +
call ds:CreateDialogParamW  +
mov [ebp+hDlg] eax +
cmp eax edi +
jnz loc_101DD78  +
push 578h  +
call sub_101CF8B  +
mov edi eax +
jmp loc_101DE83  +
push 7D2h  +
push eax  +
call ds:GetDlgItem  +
mov [ebp+hWnd] eax +
cmp eax edi +
jnz loc_101DD9C  +
call ds:GetLastError  +
cmp eax edi +
jnz loc_101DD71  +
mov eax 54Fh +
jmp loc_101DD71  +
push edi  +
push edi  +
push edi  +
mov edi ds:GetMessageW +
jmp loc_101DDD7  +
lea eax [ebp+Msg] +
push eax  +
push [ebp+hDlg]  +
call ds:IsDialogMessageW  +
test eax eax +
jnz loc_101DDCC  +
lea eax [ebp+Msg] +
push eax  +
call ds:TranslateMessage  +
lea eax [ebp+Msg] +
push eax  +
call ds:DispatchMessageW  +
test byte ptr [ebp+var_30] 1 +
jnz loc_101DDE1  +
xor eax eax +
push eax  +
push eax  +
push eax  +
lea eax [ebp+Msg] +
push eax  +
call edi  +
test eax eax +
jnz loc_101DDA7  +
test byte ptr [ebp+var_30] bl +
jz loc_101DDF0  +
mov edi 4C7h +
jmp loc_101DE83  +
push 0  +
call ds:SetLastError  +
push [ebp+hWnd]  +
call ds:GetWindowTextLengthW  +
mov ebx eax +
test ebx ebx +
jnz loc_101DE13  +
call ds:GetLastError  +
mov edi eax +
test edi edi +
jnz loc_101DE83  +
lea eax [ebx+ebx+2] +
push eax  +
lea eax [ebp+lpMem] +
push eax  +
call sub_101CFA6  +
mov edi eax +
test edi edi +
jnz loc_101DE83  +
test ebx ebx +
jle loc_101DE4C  +
inc ebx  +
push ebx  +
push [ebp+lpMem]  +
push [ebp+hWnd]  +
call ds:GetWindowTextW  +
mov ebx eax +
test ebx ebx +
jnz loc_101DE54  +
call ds:GetLastError  +
test eax eax +
jmp loc_101DD93  +
mov ecx [ebp+lpMem] +
xor eax eax +
mov [ecx] ax +
push dword ptr [esi]  +
lea eax [ebp+hDC] +
push eax  +
call sub_101D7EE  +
mov edi eax +
test edi edi +
jnz loc_101DE83  +
mov eax [ebp+arg_4] +
mov ecx [ebp+lpMem] +
lea edi [esi+28h] +
lea esi [ebp+var_1C] +
movs   +
movs   +
movs   +
movs   +
xor edi edi +
mov [eax+3Ch] ebx +
mov [eax+38h] ecx +
mov [ebp+lpMem] edi +
cmp [ebp+hDlg] 0 +
jz loc_101DE92  +
push [ebp+hDlg]  +
call ds:DestroyWindow  +
cmp [ebp+lpMem] 0 +
jz loc_101DEAA  +
push [ebp+lpMem]  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
lea eax [ebp+hDC] +
push eax  +
call sub_101D0DE  +
mov eax [ebp+dwInitParam] +
and dword ptr [eax] 0 +
cmp [ebp+var_C] 0 +
jz loc_101DECB  +
push [ebp+var_8]  +
call ds:SetProcessDefaultLayout  +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
mov edi [ebp+arg_0] +
mov eax [edi+4Ch] +
or dword ptr [edi+58h] 1 +
test eax eax +
jz loc_101DF05  +
cmp dword ptr [edi+40h] 0 +
jz loc_101DF05  +
push eax  +
call ds:SetEvent  +
push 0FFFFFFFFh  +
push dword ptr [edi+40h]  +
call ds:WaitForSingleObject  +
push esi  +
lea esi [edi+30h] +
cmp [esi] esi +
jz loc_101DF35  +
push ebx  +
mov ebx [esi] +
mov eax [ebx] +
mov [esi] eax +
mov [eax+4] esi +
push dword ptr [ebx+8]  +
call ds:CloseHandle  +
push ebx  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
cmp [esi] esi +
jnz loc_101DF0E  +
pop ebx  +
movzx eax word ptr [edi+38h] +
pop esi  +
test ax ax +
jz loc_101DF4C  +
push dword ptr [edi+3Ch]  +
movzx eax ax +
push eax  +
call ds:UnregisterClassW  +
mov eax [edi+4Ch] +
test eax eax +
jz loc_101DF5A  +
push eax  +
call ds:CloseHandle  +
mov eax [edi+2Ch] +
test eax eax +
jz loc_101DF68  +
push eax  +
call ds:CloseHandle  +
mov eax [edi+40h] +
test eax eax +
jz loc_101DF76  +
push eax  +
call ds:CloseHandle  +
push edi  +
call ds:DeleteCriticalSection  +
xor eax eax +
pop edi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
cmp dword ptr [esi+14h] 0 +
push edi  +
jz loc_101DFA0  +
mov eax [esi] +
mov edi [eax+54h] +
jmp loc_101DFA5  +
mov edi 7FFFFFFFh +
cmp edi [esi+10h] +
jz loc_101DFD6  +
push 0  +
push edi  +
push dword ptr [esi+8]  +
push 0  +
call ds:SetTimer  +
test eax eax +
jz loc_101DFC4  +
mov [esi+8] eax +
mov [esi+10h] edi +
jmp loc_101DFD6  +
call ds:GetLastError  +
test eax eax +
jnz loc_101DFD3  +
mov eax 54Fh +
mov [esi+0Ch] eax +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push ebx  +
mov ebx [eax] +
push esi  +
push edi  +
push dword ptr [ebx+2Ch]  +
call ds:ResetEvent  +
lea edi [ebx+20h] +
push ebx  +
xor esi esi +
call ds:EnterCriticalSection  +
cmp [edi] edi +
jz loc_101E018  +
mov eax [edi] +
mov ecx [eax] +
mov [edi] ecx +
mov [ecx+4] edi +
mov esi eax +
mov [eax+4] eax +
mov [eax] eax +
push ebx  +
call ds:LeaveCriticalSection  +
test esi esi +
jz loc_101E03E  +
push dword ptr [esi+14h]  +
push dword ptr [esi+0Ch]  +
push [ebp+arg_0]  +
push ebx  +
call dword ptr [esi+10h]  +
push dword ptr [esi+18h]  +
mov [esi+1Ch] eax +
call ds:SetEvent  +
jmp loc_101DFFB  +
pop edi  +
pop esi  +
xor eax eax +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 24h +
push ebx  +
push esi  +
push edi  +
xor eax eax +
push 9  +
pop ecx  +
lea edi [ebp+var_24] +
stos   +
mov eax [ebp+arg_4] +
mov edi [ebp+lpCriticalSection] +
mov [ebp+var_18] eax +
mov eax [ebp+arg_8] +
mov [ebp+var_14] eax +
mov eax [ebp+arg_C] +
mov [ebp+var_1C] edi +
mov [ebp+var_10] eax +
call ds:GetCurrentThreadId  +
mov [ebp+var_4] eax +
lea eax [ebp+var_24] +
push edi  +
mov [ebp+var_20] eax +
mov [ebp+var_24] eax +
xor esi esi +
call ds:EnterCriticalSection  +
lea ebx [edi+30h] +
cmp [ebx] ebx +
jz loc_101E0A4  +
mov esi [ebx] +
mov eax [esi] +
mov [ebx] eax +
mov [eax+4] ebx +
push edi  +
call ds:LeaveCriticalSection  +
test esi esi +
jnz loc_101E102  +
push 0Ch  +
push esi  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov esi eax +
test esi esi +
jnz loc_101E0D1  +
mov [ebp+arg_4] 8 +
jmp loc_101E166  +
xor eax eax +
mov edi esi +
stos   +
stos   +
stos   +
xor edi edi +
push edi  +
push edi  +
push edi  +
push edi  +
call ds:CreateEventW  +
mov [esi+8] eax +
cmp eax edi +
jnz loc_101E0FF  +
call ds:GetLastError  +
test eax eax +
jnz loc_101E0FA  +
mov eax 54Fh +
mov edi [ebp+lpCriticalSection] +
jmp loc_101E163  +
mov edi [ebp+lpCriticalSection] +
mov eax [esi+8] +
and [ebp+lpCriticalSection] 0 +
push edi  +
mov [ebp+hHandle] eax +
call ds:EnterCriticalSection  +
cmp dword ptr [edi+28h] 0 +
jz loc_101E136  +
lea eax [edi+20h] +
mov ecx [eax+4] +
lea edx [ebp+var_24] +
mov [ebp+var_20] ecx +
mov [ebp+var_24] eax +
mov [ecx] edx +
mov ecx edx +
mov [eax+4] ecx +
mov [ebp+lpCriticalSection] 1 +
push edi  +
call ds:LeaveCriticalSection  +
cmp [ebp+lpCriticalSection] 0 +
jnz loc_101E14C  +
mov [ebp+arg_4] 12Fh +
jmp loc_101E166  +
push dword ptr [edi+2Ch]  +
call ds:SetEvent  +
push 0FFFFFFFFh  +
push [ebp+hHandle]  +
call ds:WaitForSingleObject  +
mov eax [ebp+var_8] +
mov [ebp+arg_4] eax +
test esi esi +
jz loc_101E19D  +
cmp dword ptr [esi+8] 0 +
jz loc_101E18D  +
push edi  +
call ds:EnterCriticalSection  +
mov eax [ebx+4] +
mov [esi] ebx +
mov [esi+4] eax +
mov [eax] esi +
push edi  +
mov [ebx+4] esi +
call ds:LeaveCriticalSection  +
jmp loc_101E19D  +
push esi  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
mov eax [ebp+arg_4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
add eax 18h +
mov ecx [eax] +
jmp loc_101E1D1  +
mov edx [ecx+8] +
cmp edx [ebp+arg_4] +
jnz loc_101E1CF  +
cmp dword ptr [ecx+60h] 0 +
jz loc_101E1E4  +
test [ebp+arg_C] 1 +
jnz loc_101E1E4  +
mov ecx [ecx] +
cmp ecx eax +
jnz loc_101E1BB  +
mov eax [ebp+arg_8] +
and dword ptr [eax] 0 +
mov eax 490h +
pop ebp  +
retn 10h  +
mov edx [ebp+arg_8] +
xor eax eax +
mov [edx] ecx +
jmp loc_101E1E0  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
push edi  +
push 0Ah  +
xor eax eax +
pop ecx  +
mov edi edx +
stos   +
and dword ptr [edx+18h] 0 +
or dword ptr [edx+20h] 1 +
mov eax 80000000h +
mov dword ptr [edx] 2 +
mov [edx+4] eax +
mov [edx+8] eax +
mov [edx+10h] eax +
mov [edx+0Ch] eax +
mov dword ptr [edx+14h] 1EFF1Eh +
mov byte ptr [edx+1Ch] 0FFh +
pop edi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 6Ch +
mov eax dword_1030118 +
xor eax ebp +
mov [ebp+var_4] eax +
and [ebp+hbr] 0 +
push ebx  +
mov ebx [ebp+arg_0] +
push edi  +
lea eax [ebp+Paint] +
push eax  +
push dword ptr [ebx+3Ch]  +
call ds:BeginPaint  +
mov edi eax +
mov [ebp+hDC] edi +
test edi edi +
jnz loc_101E274  +
call ds:GetLastError  +
jmp loc_101E334  +
push esi  +
lea eax [ebp+Rect] +
push eax  +
push dword ptr [ebx+3Ch]  +
call ds:GetClientRect  +
mov eax [ebx+14h] +
test eax eax +
jnz loc_101E2C7  +
push dword ptr [ebx+28h]  +
call ds:CreateSolidBrush  +
mov [ebp+hbr] eax +
test eax eax +
jnz loc_101E2A1  +
call ds:GetLastError  +
jmp loc_101E317  +
mov eax [ebp-64h] +
push [ebp+hbr]  +
lea esi [ebp+Rect] +
lea edi [ebp+rc] +
movs   +
movs   +
movs   +
inc eax  +
movs   +
inc [ebp+rc.bottom]  +
mov [ebp+rc.right] eax +
lea eax [ebp+rc] +
push eax  +
push [ebp+hDC]  +
call ds:FillRect  +
jmp loc_101E317  +
cmp eax 1 +
jnz loc_101E326  +
push edi  +
call ds:CreateCompatibleDC  +
mov esi eax +
test esi esi +
jz loc_101E306  +
push dword ptr [ebx+38h]  +
push esi  +
call ds:SelectObject  +
push 0CC0020h  +
push dword ptr [ebx+50h]  +
xor eax eax +
push dword ptr [ebx+4Ch]  +
push eax  +
push eax  +
push esi  +
push dword ptr [ebp-60h]  +
push dword ptr [ebp-64h]  +
push eax  +
push eax  +
push edi  +
call ds:StretchBlt  +
test eax eax +
jnz loc_101E30C  +
call ds:GetLastError  +
test esi esi +
jz loc_101E326  +
push esi  +
call ds:DeleteDC  +
cmp [ebp+hbr] 0 +
jz loc_101E326  +
push [ebp+hbr]  +
call ds:DeleteObject  +
lea eax [ebp+Paint] +
push eax  +
push dword ptr [ebx+3Ch]  +
call ds:EndPaint  +
pop esi  +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
xor eax eax +
pop ebx  +
call sub_101BC5D  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+0Ch] +
sub eax 0Fh +
push esi  +
mov esi [ebp+14h] +
jz loc_101E383  +
sub eax 72h +
jnz loc_101E36E  +
push dword ptr [esi]  +
push 0FFFFFFEBh  +
push dword ptr [ebp+8]  +
call ds:SetWindowLongW  +
push esi  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call ds:DefWindowProcW  +
pop esi  +
pop ebp  +
retn 10h  +
***
push 0FFFFFFEBh  +
push dword ptr [ebp+8]  +
call ds:GetWindowLongW  +
test eax eax +
jz loc_101E36E  +
push eax  +
call sub_101E238  +
jmp loc_101E37E  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi [ebp+lpCriticalSection] +
push edi  +
mov edi [esi+8] +
test edi edi +
jz loc_101E422  +
mov eax [edi+10h] +
mov [ebp+var_4] eax +
mov eax [edi+0Ch] +
push eax  +
mov [ebp+lpCriticalSection] eax +
call ds:EnterCriticalSection  +
mov eax [esi+64h] +
test eax eax +
jz loc_101E3D1  +
mov ecx [esi+68h] +
mov [eax+68h] ecx +
push ebx  +
mov ebx [esi+68h] +
test ebx ebx +
jz loc_101E3F0  +
mov eax [esi+64h] +
mov [ebx+64h] eax +
test eax eax +
jnz loc_101E3F0  +
or dword ptr [ebx+60h] 30h +
call ds:GetTickCount  +
mov [ebx+4Ch] eax +
mov ecx [esi] +
pop ebx  +
cmp ecx esi +
jz loc_101E40D  +
mov eax [esi+4] +
mov [eax] ecx +
mov [ecx+4] eax +
test byte ptr [esi+24h] 2 +
mov [esi+4] esi +
mov [esi] esi +
jz loc_101E40D  +
dec dword ptr [edi+60h]  +
push [ebp+lpCriticalSection]  +
call ds:LeaveCriticalSection  +
mov eax [ebp+var_4] +
dec dword ptr [eax+14h]  +
push eax  +
call sub_101DF89  +
mov eax [esi+5Ch] +
test eax eax +
jz loc_101E430  +
push eax  +
call ds:CloseHandle  +
push esi  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
pop edi  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
push 6  +
xor eax eax +
pop ecx  +
mov edi esi +
stos   +
lea eax [esi+8] +
mov [eax+4] eax +
mov [eax] eax +
lea eax [esi+10h] +
mov [eax+4] eax +
mov [eax] eax +
call ds:GetTickCount  +
mov [esi+4] eax +
mov eax [ebp+arg_4] +
pop edi  +
mov [esi] eax +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 28h +
push ebx  +
mov ebx [ebp+arg_0] +
mov eax [ebx+60h] +
push esi  +
mov esi [ebx+8] +
mov [ebp+var_4] esi +
test al 1 +
jnz loc_101E4A8  +
xor eax eax +
jmp loc_101E7DE  +
test al 4 +
jnz loc_101E4A1  +
xor eax eax +
cmp [ebx+64h] eax +
jnz loc_101E7DE  +
test byte ptr [esi+64h] 1 +
jz loc_101E4C7  +
mov eax 54Fh +
jmp loc_101E7DE  +
mov edx [ebx+14h] +
push edi  +
mov edi [ebp+arg_4] +
mov eax [edi+4] +
mov ecx eax +
sub ecx [ebx+4Ch] +
sub eax [ebx+50h] +
cmp edx ecx +
jb loc_101E4E7  +
sub edx ecx +
mov [ebp+var_8] edx +
mov [ebp+arg_0] ecx +
jmp loc_101E4EE  +
and [ebp+var_8] 0 +
mov [ebp+arg_0] edx +
mov ecx [ebx+58h] +
test ecx ecx +
jz loc_101E502  +
mov edx [edi] +
mov edx [edx] +
cmp eax [edx+54h] +
jb loc_101E7DB  +
test byte ptr [ebx+24h] 8 +
jz loc_101E521  +
test ecx ecx +
jnz loc_101E521  +
test byte ptr [esi+34h] 2 +
jnz loc_101E521  +
push 8  +
push dword ptr [esi+3Ch]  +
call ds:ShowWindow  +
or dword ptr [esi+34h] 2 +
test byte ptr [ebx+24h] 20h +
jz loc_101E540  +
push 13h  +
push dword ptr [esi+24h]  +
push dword ptr [esi+20h]  +
push dword ptr [esi+18h]  +
push dword ptr [esi+1Ch]  +
push 0FFFFFFFFh  +
push dword ptr [esi+3Ch]  +
call ds:SetWindowPos  +
mov ecx [ebx+0Ch] +
mov eax 80000000h +
cmp ecx 3 +
jnz loc_101E5BA  +
mov edx [ebp+var_4] +
lea ecx [ebx+28h] +
mov esi ecx +
lea edi [ebp+var_28] +
movs   +
movs   +
movs   +
movs   +
add edx 18h +
mov esi edx +
lea edi [ebp+Y] +
movs   +
movs   +
movs   +
movs   +
mov esi [ebp+var_28] +
cmp esi eax +
jz loc_101E572  +
add [ebp+Y] esi +
mov esi [ebp+var_24] +
cmp esi eax +
jz loc_101E57C  +
add [ebp+var_14] esi +
mov esi [ebp+var_1C] +
cmp esi eax +
jz loc_101E58C  +
add [ebp+var_C] esi +
jns loc_101E58C  +
and [ebp+var_C] 0 +
mov esi [ebp+var_20] +
cmp esi eax +
jz loc_101E59C  +
add [ebp+var_10] esi +
jns loc_101E59C  +
and [ebp+var_10] 0 +
mov dword ptr [ebx+0Ch] 1 +
mov esi edx +
mov edi ecx +
movs   +
movs   +
movs   +
movs   +
lea edi [ebx+38h] +
lea esi [ebp+Y] +
movs   +
movs   +
movs   +
movs   +
mov esi [ebp+var_4] +
jmp loc_101E633  +
cmp ecx 2 +
jnz loc_101E5E4  +
movzx ecx byte ptr [esi+30h] +
mov edx [ebx+28h] +
add ecx edx +
jns loc_101E5CC  +
xor ecx ecx +
mov edx 0FFh +
cmp ecx edx +
jle loc_101E5D7  +
mov ecx edx +
and dword ptr [ebx+0Ch] 0 +
mov dl [esi+30h] +
mov [ebx+28h] dl +
mov [ebx+29h] cl +
mov ecx [ebx+0Ch] +
test ecx ecx +
jnz loc_101E62A  +
movzx ecx byte ptr [ebx+28h] +
movzx eax byte ptr [ebx+29h] +
sub eax ecx +
imul eax [ebp+arg_0] +
cdq   +
idiv  dword ptr [ebx+14h] +
push 3  +
add eax ecx +
push eax  +
push dword ptr [esi+2Ch]  +
mov [ebp+arg_4] eax +
push dword ptr [esi+3Ch]  +
call ds:SetLayeredWindowAttributes  +
test eax eax +
jnz loc_101E61F  +
push 7D2h  +
call sub_101CF8B  +
mov al byte ptr [ebp+arg_4] +
mov [esi+30h] al +
jmp loc_101E70F  +
cmp ecx 1 +
jnz loc_101E70F  +
cmp dword ptr [ebx+58h] 0 +
jnz loc_101E691  +
cmp [ebx+34h] eax +
jnz loc_101E644  +
mov ecx [esi+24h] +
mov [ebx+34h] ecx +
cmp [ebx+44h] eax +
jnz loc_101E64F  +
mov ecx [esi+24h] +
mov [ebx+44h] ecx +
cmp [ebx+30h] eax +
jnz loc_101E65A  +
mov ecx [esi+20h] +
mov [ebx+30h] ecx +
cmp [ebx+40h] eax +
jnz loc_101E665  +
mov ecx [esi+20h] +
mov [ebx+40h] ecx +
cmp [ebx+28h] eax +
jnz loc_101E670  +
mov ecx [esi+18h] +
mov [ebx+28h] ecx +
cmp [ebx+38h] eax +
jnz loc_101E67B  +
mov ecx [esi+18h] +
mov [ebx+38h] ecx +
cmp [ebx+2Ch] eax +
jnz loc_101E686  +
mov ecx [esi+1Ch] +
mov [ebx+2Ch] ecx +
cmp [ebx+3Ch] eax +
jnz loc_101E691  +
mov eax [esi+1Ch] +
mov [ebx+3Ch] eax +
mov ecx [ebx+34h] +
mov eax [ebx+44h] +
sub eax ecx +
imul eax [ebp+arg_0] +
mov edi [ebx+14h] +
cdq   +
idiv  edi +
mov edx [ebx+30h] +
push 10h  +
mov ecx eax +
mov eax [ebx+40h] +
sub eax edx +
imul eax [ebp+arg_0] +
cdq   +
idiv  edi +
mov edx [ebx+28h] +
add ecx [ebx+34h] +
push ecx  +
mov [ebp+var_C] ecx +
add eax [ebx+30h] +
mov [ebp+var_10] eax +
mov eax [ebx+38h] +
sub eax edx +
imul eax [ebp+arg_0] +
cdq   +
idiv  edi +
mov edx [ebx+2Ch] +
push [ebp+var_10]  +
add eax [ebx+28h] +
mov [ebp+Y] eax +
mov eax [ebx+3Ch] +
sub eax edx +
imul eax [ebp+arg_0] +
cdq   +
idiv  edi +
push [ebp+Y]  +
add eax [ebx+2Ch] +
push eax  +
push 0FFFFFFFFh  +
push dword ptr [esi+3Ch]  +
mov [ebp+var_14] eax +
call ds:SetWindowPos  +
lea edi [esi+18h] +
lea esi [ebp+Y] +
movs   +
movs   +
movs   +
movs   +
mov edi [ebp+arg_4] +
mov esi [ebp+var_4] +
cmp [ebp+var_8] 0 +
jnz loc_101E7D2  +
mov eax [ebx+60h] +
and eax 0FFFFFFFEh +
or eax 2 +
mov [ebx+60h] eax +
mov eax [ebx+5Ch] +
test eax eax +
jz loc_101E733  +
push eax  +
call ds:SetEvent  +
mov eax [ebx] +
mov ecx [ebx+4] +
mov [ecx] eax +
mov [eax+4] ecx +
lea eax [edi+10h] +
mov ecx [eax+4] +
mov [ebx] eax +
mov [ebx+4] ecx +
mov [ecx] ebx +
mov [eax+4] ebx +
test byte ptr [ebx+24h] 2 +
jz loc_101E791  +
mov eax [esi+64h] +
test al 1 +
jnz loc_101E791  +
or eax 1 +
lea ecx [esi+40h] +
mov [esi+64h] eax +
mov eax [ecx] +
jmp loc_101E773  +
or dword ptr [eax+60h] 4 +
mov edx [edi+4] +
mov [eax+54h] edx +
mov eax [eax] +
cmp eax ecx +
jnz loc_101E767  +
mov eax [esi] +
mov ecx [esi+4] +
mov [ecx] eax +
mov [eax+4] ecx +
lea eax [edi+8] +
mov ecx [eax+4] +
mov [esi] eax +
mov [esi+4] ecx +
mov [ecx] esi +
mov [eax+4] esi +
test byte ptr [ebx+24h] 10h +
jz loc_101E7AC  +
test byte ptr [esi+34h] 2 +
jz loc_101E7AC  +
push 0  +
push dword ptr [esi+3Ch]  +
call ds:ShowWindow  +
and dword ptr [esi+34h] 0FFFFFFFDh +
mov eax [ebx+68h] +
test eax eax +
jz loc_101E7DB  +
and dword ptr [ebx+68h] 0 +
or dword ptr [eax+60h] 10h +
and dword ptr [eax+64h] 0 +
mov ecx [edi+4] +
push edi  +
push eax  +
mov [eax+4Ch] ecx +
call sub_101E487  +
test eax eax +
jnz loc_101E7DD  +
jmp loc_101E7DB  +
mov eax [edi+4] +
inc dword ptr [ebx+58h]  +
mov [ebx+50h] eax +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
mov edx [eax+4] +
mov ecx [ebp+arg_0] +
mov [ecx] edx +
mov edx [eax] +
mov [ecx+4] edx +
mov edx [eax+8] +
sub edx [eax] +
mov [ecx+8] edx +
mov edx [eax+0Ch] +
sub edx [eax+4] +
mov [ecx+0Ch] edx +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
mov esi ds:wcstol +
push edi  +
xor eax eax +
mov edi ebx +
stos   +
stos   +
push 0  +
stos   +
push 0  +
push [ebp+arg_4]  +
stos   +
call esi  +
mov edi ds:wcschr +
push 2Ch  +
push [ebp+arg_4]  +
mov [ebx] eax +
call edi  +
add esp 14h +
test eax eax +
jnz loc_101E855  +
push 0Bh  +
pop eax  +
jmp loc_101E8A3  +
push 0  +
add eax 2 +
push 0  +
push eax  +
mov [ebp+arg_4] eax +
call esi  +
push 2Ch  +
push [ebp+arg_4]  +
mov [ebx+4] eax +
call edi  +
add esp 14h +
test eax eax +
jz loc_101E850  +
push 0  +
add eax 2 +
push 0  +
push eax  +
mov [ebp+arg_4] eax +
call esi  +
push 2Ch  +
push [ebp+arg_4]  +
mov [ebx+8] eax +
call edi  +
add esp 14h +
test eax eax +
jz loc_101E850  +
push 0  +
add eax 2 +
push 0  +
push eax  +
call esi  +
add esp 0Ch +
mov [ebx+0Ch] eax +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
mov esi ds:wcstol +
push edi  +
xor eax eax +
mov edi ebx +
stos   +
stos   +
xor edi edi +
push edi  +
push edi  +
push [ebp+arg_4]  +
call esi  +
push 2Ch  +
push [ebp+arg_4]  +
mov [ebx] eax +
call ds:wcschr  +
add esp 14h +
cmp eax edi +
jnz loc_101E8E8  +
push 0Bh  +
pop eax  +
jmp loc_101E8F8  +
push edi  +
add eax 2 +
push edi  +
push eax  +
call esi  +
add esp 0Ch +
mov [ebx+4] eax +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov edi [esi+0Ch] +
push edi  +
call ds:EnterCriticalSection  +
mov eax [esi] +
cmp eax esi +
jz loc_101E92B  +
mov ecx [esi+4] +
mov [ecx] eax +
mov [eax+4] ecx +
mov [esi+4] esi +
mov [esi] esi +
push edi  +
call ds:LeaveCriticalSection  +
lea edi [esi+40h] +
jmp loc_101E93E  +
push dword ptr [edi]  +
call sub_101E39F  +
cmp [edi] edi +
jnz loc_101E937  +
mov eax [esi+3Ch] +
test eax eax +
jz loc_101E950  +
push eax  +
call ds:DestroyWindow  +
mov eax [esi+38h] +
test eax eax +
jz loc_101E95E  +
push eax  +
call ds:DeleteObject  +
push esi  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1Ch +
mov eax [ebp+14h] +
push ebx  +
push esi  +
mov esi [eax] +
xor ebx ebx +
mov [eax+4] ebx +
test byte ptr [esi+20h] 1 +
push edi  +
mov [ebp-4] esi +
jz loc_101EB50  +
mov eax 80000000h +
cmp [esi+4] eax +
jz loc_101EB50  +
cmp [esi+8] eax +
jz loc_101EB50  +
mov ecx [esi] +
cmp ecx 1 +
jnz loc_101E9BE  +
cmp [esi+24h] ebx +
jmp loc_101E9D2  +
cmp ecx ebx +
jnz loc_101EB50  +
cmp [esi+10h] eax +
jz loc_101EB50  +
cmp [esi+0Ch] eax +
jz loc_101EB50  +
push 68h  +
push ebx  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov ebx eax +
test ebx ebx +
jnz loc_101E9F5  +
push 8  +
jmp loc_101EB52  +
push 68h  +
push 0  +
push ebx  +
call memset  +
mov edx [ebp+8] +
lea eax [ebx+40h] +
mov [eax+4] eax +
mov [eax] eax +
mov eax [ebp+0Ch] +
add esp 0Ch +
mov [ebx+10h] eax +
lea eax [ebx+14h] +
push 0Ah  +
pop ecx  +
mov edi eax +
mov [ebx+4] ebx +
mov [ebx] ebx +
mov [ebx+0Ch] edx +
movs   +
xor edi edi +
cmp dword ptr [eax] 1 +
mov [ebx+38h] edi +
jnz loc_101EAA6  +
mov eax [ebp-4] +
push edi  +
push edi  +
push edi  +
push edi  +
push dword ptr [eax+24h]  +
call ds:CopyImage  +
mov [ebx+38h] eax +
cmp eax edi +
jnz loc_101EA57  +
push 10Ah  +
call sub_101CF8B  +
mov edi eax +
jmp loc_101EB53  +
lea ecx [ebp-1Ch] +
push ecx  +
push 18h  +
push eax  +
call ds:GetObjectW  +
test eax eax +
jnz loc_101EA79  +
call ds:GetLastError  +
cmp eax edi +
jnz loc_101EA50  +
mov eax 54Fh +
jmp loc_101EA50  +
***
mov eax 80000000h +
cmp [ebx+24h] eax +
jnz loc_101EA89  +
mov ecx [ebp-14h] +
mov [ebx+24h] ecx +
cmp [ebx+20h] eax +
jnz loc_101EA94  +
mov ecx [ebp-18h] +
mov [ebx+20h] ecx +
mov edx [ebp+8] +
push 6  +
lea edi [ebx+48h] +
pop ecx  +
lea esi [ebp-1Ch] +
movs   +
xor edi edi +
jmp loc_101EAAB  +
mov eax 80000000h +
test byte ptr [ebx+34h] 2 +
jz loc_101EAB6  +
mov eax 90000000h +
push ebx  +
push dword ptr [edx+3Ch]  +
push edi  +
push edi  +
push dword ptr [ebx+24h]  +
push dword ptr [ebx+20h]  +
push dword ptr [ebx+18h]  +
push dword ptr [ebx+1Ch]  +
push eax  +
movzx eax word ptr [edx+38h] +
push offset WindowName  +
push eax  +
push 80800A8h  +
call ds:CreateWindowExW  +
mov [ebx+3Ch] eax +
cmp eax edi +
jnz loc_101EAEF  +
push 578h  +
jmp loc_101EA4B  +
***
movzx ecx byte ptr [ebx+30h] +
push 3  +
push ecx  +
push dword ptr [ebx+2Ch]  +
push eax  +
call ds:SetLayeredWindowAttributes  +
test eax eax +
jnz loc_101EB0E  +
push 7D2h  +
jmp loc_101EA4B  +
***
mov esi [ebp+8] +
push esi  +
call ds:EnterCriticalSection  +
mov eax [esi+50h] +
lea ecx [eax+4] +
cmp eax ecx +
jnb loc_101EB2B  +
mov [ebx+8] eax +
add dword ptr [esi+50h] 4 +
jmp loc_101EB2E  +
mov [ebx+8] ebx +
lea eax [esi+18h] +
mov ecx [eax+4] +
mov [ebx] eax +
mov [ebx+4] ecx +
mov [ecx] ebx +
push esi  +
mov [eax+4] ebx +
call ds:LeaveCriticalSection  +
mov eax [ebx+8] +
mov ecx [ebp+14h] +
mov [ecx+4] eax +
jmp loc_101EB5D  +
push 57h  +
pop edi  +
test ebx ebx +
jz loc_101EB5D  +
push ebx  +
call sub_101E904  +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+8] +
push edi  +
call ds:EnterCriticalSection  +
push 0  +
lea eax [ebp+8] +
push eax  +
push dword ptr [ebp+10h]  +
push edi  +
call sub_101E1AC  +
mov esi eax +
push edi  +
test esi esi +
jnz loc_101EBB4  +
mov esi [ebp+8] +
mov eax [esi] +
mov ecx [esi+4] +
mov [ecx] eax +
mov [eax+4] ecx +
mov [esi+4] esi +
mov [esi] esi +
call ds:LeaveCriticalSection  +
push esi  +
call sub_101E904  +
xor esi esi +
jmp loc_101EBBA  +
call ds:LeaveCriticalSection  +
pop edi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
lea esi [edi+10h] +
jmp loc_101EBEA  +
mov eax [esi] +
mov ecx [eax] +
mov [esi] ecx +
mov [ecx+4] esi +
push eax  +
mov [eax+4] eax +
mov [eax] eax +
call sub_101E39F  +
cmp [esi] esi +
jnz loc_101EBD6  +
lea esi [edi+8] +
jmp loc_101EC07  +
mov eax [esi] +
mov ecx [eax] +
mov [esi] ecx +
mov [ecx+4] esi +
push eax  +
mov [eax+4] eax +
mov [eax] eax +
call sub_101E904  +
cmp [esi] esi +
jnz loc_101EBF3  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
push esi  +
mov esi [ebp+lpCriticalSection] +
push edi  +
push esi  +
lea eax [ebp+var_18] +
push eax  +
call sub_101E44B  +
mov edi [esi] +
push edi  +
mov [ebp+lpCriticalSection] edi +
call ds:EnterCriticalSection  +
lea eax [edi+18h] +
mov esi [eax] +
cmp esi eax +
jz loc_101EC6E  +
push ebx  +
mov eax esi +
mov esi [esi] +
lea ebx [eax+40h] +
mov edi [ebx] +
jmp loc_101EC5C  +
lea ecx [ebp+var_18] +
mov eax edi +
mov edi [edi] +
push ecx  +
push eax  +
call sub_101E487  +
cmp edi ebx +
jnz loc_101EC4E  +
mov eax [ebp+lpCriticalSection] +
add eax 18h +
cmp esi eax +
jnz loc_101EC43  +
mov edi [ebp+lpCriticalSection] +
pop ebx  +
push edi  +
call ds:LeaveCriticalSection  +
lea eax [ebp+var_18] +
push eax  +
call sub_101EBC7  +
pop edi  +
xor eax eax +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push ebx  +
mov ebx [eax] +
push esi  +
push edi  +
lea esi [ebx+18h] +
push ebx  +
xor edi edi +
call ds:EnterCriticalSection  +
cmp [esi] esi +
jz loc_101ECB8  +
mov eax [esi] +
mov ecx [eax] +
mov [esi] ecx +
mov [ecx+4] esi +
mov edi eax +
mov [eax+4] eax +
mov [eax] eax +
push ebx  +
call ds:LeaveCriticalSection  +
test edi edi +
jz loc_101ECCB  +
push edi  +
call sub_101E904  +
jmp loc_101EC9B  +
pop edi  +
pop esi  +
xor eax eax +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push edi  +
xor eax eax +
lea edi [ebp+var_8] +
stos   +
stos   +
mov eax [ebp+arg_4] +
mov [ebp+var_8] eax +
lea eax [ebp+var_8] +
push eax  +
push offset loc_101E979  +
push 0  +
push [ebp+lpCriticalSection]  +
call sub_101E04C  +
pop edi  +
test eax eax +
jnz locret_101ED10  +
mov eax [ebp+arg_8] +
mov ecx [ebp+var_4] +
mov [eax] ecx +
xor eax eax +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push offset loc_101EB6B  +
push [ebp+arg_4]  +
push [ebp+lpCriticalSection]  +
call sub_101E04C  +
test eax eax +
jnz $+2  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
mov eax [ebp+14h] +
push ebx  +
mov ebx [eax] +
push esi  +
mov esi [eax+4] +
push edi  +
mov [ebp-0Ch] ebx +
mov [ebp-4] esi +
call ds:GetTickCount  +
push dword ptr [ebp+0Ch]  +
and dword ptr [ebp-8] 0 +
mov edi eax +
lea eax [ebp-2Ch] +
push eax  +
mov [ebp-14h] edi +
call sub_101E44B  +
mov [ebp-28h] edi +
xor edi edi +
test esi esi +
jbe loc_101EE0C  +
lea ecx [ebx+0Ch] +
mov edx [ecx+0Ch] +
test dl 1 +
jz loc_101F038  +
mov eax [ecx-0Ch] +
test eax eax +
jl loc_101F038  +
cmp eax 5 +
jge loc_101F038  +
cmp dword ptr [ecx-4] 0 +
jz loc_101F038  +
test dl 4 +
jz loc_101EE00  +
mov eax [ecx] +
cmp eax 0FFFFFFFEh +
jnz loc_101EDC1  +
cmp dword ptr [ecx+4] 0FFFFFFFFh +
jz loc_101F038  +
mov edx [ecx+4] +
cmp eax edx +
jz loc_101F038  +
cmp eax 0FFFFFFFEh +
jz loc_101EDE6  +
cmp eax esi +
jnb loc_101F038  +
imul eax eax +
cmp [eax+ebx+10h] edi +
jnz loc_101F038  +
cmp edx 0FFFFFFFFh +
jz loc_101EE00  +
cmp edx esi +
jnb loc_101F038  +
imul edx edx +
cmp [edx+ebx+0Ch] edi +
jnz loc_101F038  +
inc edi  +
add ecx 3Ch +
cmp edi esi +
jb loc_101ED81  +
mov ebx esi +
shl ebx 2 +
push ebx  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov edi eax +
mov [ebp-8] edi +
test edi edi +
jnz loc_101EE36  +
mov dword ptr [ebp+14h] 8 +
jmp loc_101F04D  +
push ebx  +
push 0  +
push edi  +
call memset  +
and dword ptr [ebp+14h] 0 +
add esp 0Ch +
test esi esi +
jbe loc_101EEF0  +
mov eax [ebp-0Ch] +
add eax 14h +
mov [ebp-10h] eax +
push 6Ch  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov ebx eax +
mov eax [ebp+14h] +
mov [edi+eax*4] ebx +
test ebx ebx +
jz loc_101EE2A  +
push 6Ch  +
push 0  +
push ebx  +
call memset  +
mov esi [ebp-10h] +
mov eax [ebp-14h] +
add esp 0Ch +
push 0Fh  +
add esi 0FFFFFFECh +
lea edi [ebx+0Ch] +
pop ecx  +
mov [ebx+4] ebx +
mov [ebx] ebx +
movs   +
test byte ptr [ebx+24h] 4 +
mov [ebx+48h] eax +
jz loc_101EEA6  +
cmp dword ptr [ebx+18h] 0FFFFFFFEh +
jnz loc_101EEA9  +
mov [ebx+4Ch] eax +
mov edi [ebp-10h] +
xor eax eax +
cmp [edi] eax +
jz loc_101EED6  +
mov esi ds:GetCurrentProcess +
push 2  +
push eax  +
push eax  +
add ebx 5Ch +
push ebx  +
call esi  +
push eax  +
push dword ptr [edi]  +
call esi  +
push eax  +
call ds:DuplicateHandle  +
test eax eax +
jz loc_101F024  +
inc dword ptr [ebp+14h]  +
mov eax [ebp+14h] +
mov esi [ebp-4] +
add edi 3Ch +
mov [ebp-10h] edi +
mov edi [ebp-8] +
cmp eax esi +
jb loc_101EE57  +
and dword ptr [ebp+14h] 0 +
test esi esi +
jbe loc_101EF6F  +
mov edx [ebp-0Ch] +
test byte ptr [edx+18h] 4 +
jz loc_101EF64  +
mov eax edx +
xor ecx ecx +
mov eax [eax+0Ch] +
cmp eax 0FFFFFFFEh +
jz loc_101EF21  +
mov ebx [edi+eax*4] +
test byte ptr [ebx+60h] 8 +
jnz loc_101EF21  +
imul eax eax +
add eax [ebp-0Ch] +
inc ecx  +
cmp ecx esi +
jb loc_101EF05  +
cmp ecx esi +
jnb loc_101F038  +
mov eax edx +
xor ecx ecx +
mov eax [eax+10h] +
cmp eax 0FFFFFFFFh +
jz loc_101EF4C  +
mov edi [ebp-8] +
mov edi [edi+eax*4] +
test byte ptr [edi+60h] 8 +
jnz loc_101EF4C  +
imul eax eax +
add eax [ebp-0Ch] +
inc ecx  +
cmp ecx esi +
jb loc_101EF2D  +
cmp ecx esi +
jnb loc_101F038  +
mov eax [ebp-8] +
mov ecx [ebp+14h] +
mov eax [eax+ecx*4] +
or dword ptr [eax+60h] 8 +
mov edi [ebp-8] +
inc dword ptr [ebp+14h]  +
add edx 3Ch +
cmp [ebp+14h] esi +
jb loc_101EEFB  +
push dword ptr [ebp+8]  +
call ds:EnterCriticalSection  +
xor ebx ebx +
test esi esi +
jbe loc_101EFED  +
mov esi [edi+ebx*4] +
push 0  +
lea eax [ebp-14h] +
push eax  +
push dword ptr [esi+10h]  +
push dword ptr [ebp+8]  +
call sub_101E1AC  +
mov [ebp+14h] eax +
test eax eax +
jnz loc_101F041  +
mov edx [ebp-14h] +
lea eax [edx+40h] +
mov [esi+8] edx +
mov ecx [eax+4] +
mov [esi] eax +
mov [esi+4] ecx +
mov [ecx] esi +
mov [eax+4] esi +
mov eax [ebp+0Ch] +
inc dword ptr [eax+14h]  +
test byte ptr [esi+24h] 2 +
jz loc_101EFC2  +
inc dword ptr [edx+60h]  +
test byte ptr [esi+24h] 4 +
jz loc_101EFE4  +
mov eax [esi+18h] +
cmp eax 0FFFFFFFEh +
jz loc_101EFD6  +
mov eax [edi+eax*4] +
mov [esi+64h] eax +
mov eax [esi+1Ch] +
cmp eax 0FFFFFFFFh +
jz loc_101EFE4  +
mov eax [edi+eax*4] +
mov [esi+68h] eax +
inc ebx  +
cmp ebx [ebp-4] +
jb loc_101EF7E  +
mov esi [ebp-4] +
xor ebx ebx +
test esi esi +
jbe loc_101F00D  +
mov eax [edi+ebx*4] +
and dword ptr [edi+ebx*4] 0 +
or dword ptr [eax+60h] 1 +
lea ecx [ebp-2Ch] +
push ecx  +
push eax  +
call sub_101E487  +
inc ebx  +
cmp ebx esi +
jb loc_101EFF3  +
push dword ptr [ebp+8]  +
call ds:LeaveCriticalSection  +
push dword ptr [ebp+0Ch]  +
call sub_101DF89  +
and dword ptr [ebp+14h] 0 +
jmp loc_101F04D  +
call ds:GetLastError  +
test eax eax +
jnz loc_101F033  +
mov eax 54Fh +
mov [ebp+14h] eax +
jmp loc_101F04A  +
mov dword ptr [ebp+14h] 57h +
jmp loc_101F04D  +
push dword ptr [ebp+8]  +
call ds:LeaveCriticalSection  +
mov esi [ebp-4] +
lea eax [ebp-2Ch] +
push eax  +
call sub_101EBC7  +
mov ebx [ebp-8] +
test ebx ebx +
jz loc_101F085  +
xor edi edi +
test esi esi +
jbe loc_101F075  +
mov eax [ebx+edi*4] +
test eax eax +
jz loc_101F070  +
push eax  +
call sub_101E39F  +
inc edi  +
cmp edi esi +
jb loc_101F063  +
push ebx  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
mov eax [ebp+14h] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 3Ch +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
push edi  +
push 6  +
xor eax eax +
pop ecx  +
lea edi [ebp+CriticalSection] +
stos   +
lea eax [ebp+CriticalSection] +
mov [ebp+CriticalSection.DebugInfo] ebx +
mov [ebx+5Ch] eax +
call ds:GetCurrentThreadId  +
mov [ebp+CriticalSection.LockCount] eax +
mov eax [ebx+4Ch] +
mov [ebp+pHandles] eax +
mov eax [ebx+2Ch] +
push 2  +
mov [ebp+var_4] eax +
call ds:GetCurrentThread  +
push eax  +
call ds:SetThreadPriority  +
lea eax [ebp+CriticalSection] +
push eax  +
call sub_101DF89  +
mov edi ds:PeekMessageW +
xor esi esi +
push 4  +
push 4FFh  +
push 0FFFFFFFFh  +
lea eax [ebp+pHandles] +
push eax  +
push 2  +
call ds:MsgWaitForMultipleObjectsEx  +
cmp eax 2 +
jz loc_101F147  +
cmp eax 1 +
jnz loc_101F158  +
lea eax [ebp+CriticalSection] +
push eax  +
call sub_101DFE2  +
jmp loc_101F0EA  +
lea eax [ebp+Msg] +
push eax  +
call ds:TranslateMessage  +
cmp [ebp+Msg.message] 113h +
jnz loc_101F13D  +
cmp [ebp+Msg.hwnd] esi +
jnz loc_101F13D  +
mov eax [ebp+Msg.wParam] +
cmp eax [ebp+CriticalSection.RecursionCount] +
jnz loc_101F13D  +
lea eax [ebp+CriticalSection] +
push eax  +
call sub_101EC16  +
lea eax [ebp+Msg] +
push eax  +
call ds:DispatchMessageW  +
push 1  +
push esi  +
push esi  +
push esi  +
lea eax [ebp+Msg] +
push eax  +
call edi  +
test eax eax +
jnz loc_101F114  +
jmp loc_101F0EA  +
cmp eax esi +
jz loc_101F166  +
push 32h  +
call ds:Sleep  +
jmp loc_101F0EA  +
push ebx  +
call ds:EnterCriticalSection  +
push ebx  +
mov [ebx+28h] esi +
call ds:LeaveCriticalSection  +
lea eax [ebp+CriticalSection] +
push eax  +
call sub_101DFE2  +
lea eax [ebp+CriticalSection] +
push eax  +
call sub_101EC8B  +
pop edi  +
mov [ebx+48h] esi +
pop esi  +
xor eax eax +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push edi  +
xor eax eax +
lea edi [ebp+var_8] +
stos   +
stos   +
mov eax [ebp+arg_8] +
mov [ebp+var_4] eax +
mov eax [ebp+arg_4] +
mov [ebp+var_8] eax +
lea eax [ebp+var_8] +
push eax  +
push offset loc_101ED3D  +
push 0  +
push [ebp+lpCriticalSection]  +
call sub_101E04C  +
pop edi  +
test eax eax +
jnz $+2  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0BCh +
mov eax dword_1030118 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push ebx  +
push esi  +
push edi  +
push 60h  +
xor edi edi +
push edi  +
mov [ebp+var_8C] eax +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov esi eax +
cmp esi edi +
jnz loc_101F217  +
push 8  +
pop ebx  +
jmp loc_101F36B  +
push 60h  +
push edi  +
push esi  +
call memset  +
lea eax [esi+18h] +
mov [eax+4] eax +
mov [eax] eax +
lea eax [esi+20h] +
mov [eax+4] eax +
mov [eax] eax +
add esp 0Ch +
lea eax [esi+30h] +
push esi  +
mov [eax+4] eax +
mov [eax] eax +
call ds:InitializeCriticalSection  +
mov eax [ebp+arg_4] +
push esi  +
mov [esi+3Ch] eax +
mov dword ptr [esi+50h] 65h +
mov dword ptr [esi+54h] 32h +
call ds:EnterCriticalSection  +
push offset dword_1036E80  +
mov [ebp+lpCriticalSection] esi +
call ds:InterlockedIncrement  +
push esi  +
push eax  +
push offset aSmpspritesXP  +
lea eax [ebp+var_84] +
push 80h  +
push eax  +
call sub_101D67B  +
push 30h  +
pop ebx  +
push ebx  +
lea eax [ebp+var_BC] +
push edi  +
push eax  +
call memset  +
mov eax [esi+3Ch] +
mov [ebp+var_BC.hInstance] eax +
lea eax [ebp+var_84] +
mov [ebp+var_BC.lpszClassName] eax +
add esp 20h +
lea eax [ebp+var_BC] +
push eax  +
mov [ebp+var_BC.cbSize] ebx +
mov [ebp+var_BC.style] 800h +
mov [ebp+var_BC.lpfnWndProc] offset loc_101E34B +
call ds:RegisterClassExW  +
mov [esi+38h] ax +
cmp ax di +
jnz loc_101F2ED  +
push 583h  +
call sub_101CF8B  +
mov ebx eax +
jmp loc_101F34D  +
mov ebx ds:CreateEventW +
push edi  +
push edi  +
push 1  +
push edi  +
call ebx  +
mov [esi+2Ch] eax +
cmp eax edi +
jnz loc_101F312  +
call ds:GetLastError  +
cmp eax edi +
jnz loc_101F2E9  +
mov eax 54Fh +
jmp loc_101F2E9  +
push edi  +
push edi  +
push 1  +
push edi  +
call ebx  +
mov [esi+4Ch] eax +
cmp eax edi +
jz loc_101F301  +
lea eax [esi+44h] +
push eax  +
push edi  +
push esi  +
push offset sub_101F094  +
push edi  +
push edi  +
mov dword ptr [esi+28h] 1 +
call ds:CreateThread  +
mov [esi+40h] eax +
cmp eax edi +
jz loc_101F301  +
mov eax [ebp+var_8C] +
mov [eax] esi +
xor esi esi +
xor ebx ebx +
cmp [ebp+lpCriticalSection] edi +
jz loc_101F361  +
push [ebp+lpCriticalSection]  +
call ds:LeaveCriticalSection  +
cmp esi edi +
jz loc_101F36B  +
push esi  +
call sub_101DED9  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
mov eax ebx +
xor ecx ebp +
pop ebx  +
call sub_101BC5D  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
test [ebp+arg_8] 100h +
jz loc_101F3A8  +
cmp [ebp+arg_0] eax +
jnz loc_101F39C  +
cmp ecx eax +
jnz loc_101F3A1  +
cmp ecx [ebp+arg_4] +
jbe loc_101F3B0  +
mov eax 80070057h +
jmp loc_101F3B0  +
push [ebp+arg_4]  +
call sub_1007EC5  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
mov eax [esi] +
cmp eax 0FFFFFFFFh +
jz loc_101F3D0  +
push eax  +
call ds:CloseHandle  +
or dword ptr [esi+84h] 4 +
push esi  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push ebx  +
push esi  +
mov esi ds:MultiByteToWideChar +
push edi  +
xor ebx ebx +
push ebx  +
push ebx  +
push [ebp+cchMultiByte]  +
mov [ebp+lpMem] ebx +
push [ebp+lpMultiByteStr]  +
push ebx  +
push [ebp+CodePage]  +
call esi  +
mov edi eax +
cmp edi ebx +
jg loc_101F432  +
call ds:GetLastError  +
cmp eax ebx +
jnz loc_101F42A  +
mov eax 54Fh +
mov [ebp+var_4] eax +
jmp loc_101F4C7  +
lea eax [edi+edi+2] +
push eax  +
mov [ebp+var_C] eax +
lea eax [ebp+lpMem] +
push eax  +
call sub_101CFA6  +
mov [ebp+var_4] eax +
cmp eax ebx +
jnz loc_101F4B1  +
inc edi  +
push edi  +
mov edi [ebp+lpMem] +
push edi  +
push [ebp+cchMultiByte]  +
push [ebp+lpMultiByteStr]  +
push ebx  +
push [ebp+CodePage]  +
call esi  +
cmp eax ebx +
jg loc_101F474  +
call ds:GetLastError  +
cmp eax ebx +
jnz loc_101F46F  +
mov eax 54Fh +
mov [ebp+var_4] eax +
jmp loc_101F4B4  +
add eax eax +
lea ecx [eax+2] +
cmp [ebp+var_C] ecx +
jnb loc_101F487  +
mov [ebp+var_4] 6Fh +
jmp loc_101F4B4  +
xor ecx ecx +
mov [eax+edi] cx +
mov eax edi +
lea ecx [eax+2] +
mov dx [eax] +
inc eax  +
inc eax  +
cmp dx bx +
jnz loc_101F492  +
sub eax ecx +
mov ecx [ebp+arg_10] +
sar eax 1 +
mov [ecx] eax +
mov eax [ebp+arg_C] +
mov [eax] edi +
xor edi edi +
mov [ebp+var_4] ebx +
jmp loc_101F4B4  +
mov edi [ebp+lpMem] +
cmp edi ebx +
jz loc_101F4C7  +
push edi  +
push ebx  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push ebx  +
push edi  +
xor edi edi +
push edi  +
push edi  +
push 3  +
push edi  +
push edi  +
push 80000000h  +
push [ebp+hObject]  +
mov [ebp+var_4] edi +
call ds:CreateFileW  +
mov [ebp+hObject] eax +
cmp eax 0FFFFFFFFh +
jnz loc_101F517  +
call ds:GetLastError  +
cmp eax edi +
jnz loc_101F510  +
mov eax 54Fh +
mov ebx eax +
jmp loc_101F5A1  +
push esi  +
lea ecx [ebp+FileSizeHigh] +
push ecx  +
push eax  +
call ds:GetFileSize  +
mov esi ds:GetLastError +
mov [ebp+var_8] eax +
call esi  +
mov ecx [ebp+var_8] +
mov ebx eax +
cmp ecx 0FFFFFFFFh +
jnz loc_101F53C  +
cmp ebx edi +
jnz loc_101F58B  +
cmp [ebp+FileSizeHigh] edi +
jz loc_101F546  +
push 18h  +
pop ebx  +
jmp loc_101F58B  +
mov eax [ebp+arg_8] +
cmp eax edi +
jz loc_101F54F  +
mov [eax] ecx +
push edi  +
push edi  +
push edi  +
push 2  +
push edi  +
push [ebp+hObject]  +
call ds:CreateFileMappingW  +
mov [ebp+var_4] eax +
cmp eax edi +
jnz loc_101F574  +
call esi  +
cmp eax edi +
jnz loc_101F570  +
mov eax 54Fh +
mov ebx eax +
jmp loc_101F58B  +
push edi  +
push edi  +
push edi  +
push 4  +
push eax  +
call ds:MapViewOfFile  +
cmp eax edi +
jz loc_101F565  +
mov ecx [ebp+arg_4] +
mov [ecx] eax +
xor ebx ebx +
push [ebp+hObject]  +
mov esi ds:CloseHandle +
call esi  +
cmp [ebp+var_4] edi +
jz loc_101F5A0  +
push [ebp+var_4]  +
call esi  +
pop esi  +
pop edi  +
mov eax ebx +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
mov edx [ebp+arg_0] +
mov eax [ebp+arg_4] +
mov ecx [ebp+arg_C] +
and [ebp+arg_0] 0 +
push ebx  +
push esi  +
mov esi [ebp+arg_8] +
add eax edx +
add ecx esi +
push edi  +
mov [ebp+var_C] eax +
mov [ebp+arg_8] ecx +
cmp edx eax +
jnb loc_101F69C  +
mov eax [ebp+var_C] +
push 3  +
sub eax edx +
pop ecx  +
mov [ebp+var_8] eax +
cmp eax ecx +
jb loc_101F607  +
movzx eax byte ptr [edx] +
movzx ebx byte ptr [edx+1] +
shl eax 8 +
or eax ebx +
movzx ebx byte ptr [edx+2] +
push 4  +
shl eax 8 +
mov [ebp+var_8] ecx +
pop edi  +
or eax ebx +
jmp loc_101F624  +
push 2  +
pop edi  +
cmp eax edi +
movzx eax byte ptr [edx] +
jnz loc_101F621  +
movzx ebx byte ptr [edx+1] +
shl eax 8 +
or eax ebx +
mov edi ecx +
shl eax 8 +
jmp loc_101F624  +
shl eax 10h +
mov [ebp+arg_4] 4 +
sub [ebp+arg_4] edi +
mov [ebp+arg_C] ecx +
lea ebx [esi+1] +
mov [ebp+var_4] 12h +
mov ecx [ebp+arg_4] +
cmp [ebp+arg_C] ecx +
jl loc_101F661  +
mov ecx [ebp+var_4] +
mov edi eax +
shr edi cl +
and edi 3Fh +
cmp edi 41h +
jnb loc_101F6A5  +
cmp esi [ebp+arg_8] +
jnb loc_101F6AC  +
mov cl ds:byte_1003990[edi] +
mov [esi] cl +
jmp loc_101F669  +
cmp esi [ebp+arg_8] +
jnb loc_101F6AC  +
mov byte ptr [esi] 3Dh +
inc esi  +
inc ebx  +
inc [ebp+arg_0]  +
cmp [ebp+arg_0] 4Ch +
jb loc_101F687  +
cmp ebx [ebp+arg_8] +
jnb loc_101F6AC  +
mov byte ptr [esi] 0Dh +
inc esi  +
inc ebx  +
mov byte ptr [esi] 0Ah +
inc esi  +
inc ebx  +
and [ebp+arg_0] 0 +
dec [ebp+arg_C]  +
sub [ebp+var_4] 6 +
jns loc_101F63B  +
add edx [ebp+var_8] +
cmp edx [ebp+var_C] +
jb loc_101F5DB  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
mov eax 54Fh +
jmp loc_101F69E  +
push 7Ah  +
pop eax  +
jmp loc_101F69E  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
push 3  +
xor edx edx +
pop ecx  +
div  ecx +
mov ecx eax +
shl ecx 2 +
test edx edx +
jz loc_101F6D1  +
add ecx 4 +
push esi  +
push edi  +
push 4Ch  +
pop esi  +
mov eax ecx +
xor edx edx +
div  esi +
lea esi [ecx+eax*2+1] +
push esi  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov edi eax +
test edi edi +
jnz loc_101F6FB  +
push 8  +
pop eax  +
jmp loc_101F71C  +
lea eax [esi-1] +
push eax  +
push edi  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_101F5AE  +
mov eax [ebp+arg_8] +
mov byte ptr [esi+edi-1] 0 +
mov [eax] edi +
mov eax [ebp+arg_C] +
mov [eax] esi +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
push edi  +
xor eax eax +
mov edi ecx +
stos   +
stos   +
stos   +
mov dword ptr [ecx] offset dword_1002CE8 +
pop edi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
cmp dword ptr [eax+8] 0 +
jz loc_101F766  +
push dword ptr [eax]  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
and dword ptr [eax+4] 0 +
cmp dword ptr [eax+8] 0 +
jz loc_101F788  +
mov eax [eax] +
xor ecx ecx +
mov [eax] cx +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
push ebx  +
push esi  +
push edi  +
test eax eax +
jz loc_101F81C  +
mov esi [ebp+arg_0] +
cmp eax [esi+8] +
jb loc_101F81C  +
mov edi eax +
shr edi 5 +
shl edi 5 +
add edi 21h +
inc eax  +
cmp edi eax +
jnb loc_101F7BF  +
mov eax 216h +
jmp loc_101F81E  +
lea eax [edi+edi] +
cmp eax edi +
jb loc_101F7B8  +
mov ebx ds:GetProcessHeap +
push eax  +
push 0  +
call ebx  +
push eax  +
call ds:HeapAlloc  +
mov [ebp+arg_4] eax +
test eax eax +
jnz loc_101F7E4  +
push 8  +
pop eax  +
jmp loc_101F81E  +
cmp dword ptr [esi+8] 0 +
jz loc_101F812  +
mov ecx [esi+4] +
lea ecx [ecx+ecx+2] +
push ecx  +
push dword ptr [esi]  +
push eax  +
call memcpy  +
add esp 0Ch +
push dword ptr [esi]  +
push 0  +
call ebx  +
push eax  +
call ds:HeapFree  +
and dword ptr [esi] 0 +
mov eax [ebp+arg_4] +
jmp loc_101F817  +
xor ecx ecx +
mov [eax] cx +
mov [esi] eax +
mov [esi+8] edi +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov edi [ebp+arg_4] +
cmp edi [esi+4] +
ja loc_101F88A  +
mov ebx [ebp+arg_14] +
mov eax [ebp+arg_10] +
add eax ebx +
cmp eax [ebp+arg_C] +
ja loc_101F88A  +
add edi ebx +
push edi  +
push esi  +
call sub_101F791  +
test eax eax +
jnz loc_101F88D  +
mov ecx [ebp+arg_10] +
lea eax [ebx+ebx] +
push eax  +
mov eax [ebp+arg_8] +
lea eax [eax+ecx*2] +
mov ecx [ebp+arg_4] +
push eax  +
mov eax [esi] +
lea eax [eax+ecx*2] +
push eax  +
call memcpy  +
add esp 0Ch +
cmp edi [esi+4] +
jbe loc_101F886  +
mov eax [esi] +
xor ecx ecx +
mov [eax+edi*2] cx +
mov [esi+4] edi +
xor eax eax +
jmp loc_101F88D  +
push 57h  +
pop eax  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_0]  +
call sub_101F76F  +
push [ebp+arg_8]  +
push 0  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push 0  +
push [ebp+arg_0]  +
call sub_101F82A  +
test eax eax +
jnz $+2  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_8]  +
mov eax [ebp+arg_0] +
push 0  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push dword ptr [eax+4]  +
push eax  +
call sub_101F82A  +
test eax eax +
jnz $+2  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax [ebp+arg_4] +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov [ebp+var_4] eax +
test eax eax +
jz loc_101F93A  +
mov ecx [ebp+arg_8] +
mov edx [ebp+arg_C] +
sub ecx edi +
cmp [ebp+var_4] edx +
jb loc_101F93A  +
xor esi esi +
test edx edx +
jbe loc_101F92D  +
mov eax edi +
mov bx [eax] +
cmp bx [ecx+eax] +
jnz loc_101F92D  +
inc esi  +
inc eax  +
inc eax  +
cmp esi edx +
jb loc_101F91D  +
cmp esi edx +
jz loc_101F945  +
inc edi  +
inc edi  +
dec ecx  +
dec ecx  +
dec [ebp+var_4]  +
jnz loc_101F910  +
xor eax eax +
xor edx edx +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
mov eax edi +
jmp loc_101F93E  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push esi  +
xor esi esi +
mov [ebp+var_8] offset aLt +
mov [ebp+var_4] 4 +
mov [ebp+var_10] offset aAmp +
mov [ebp+var_C] 5 +
mov [ebp+var_18] offset aQuot +
mov [ebp+var_14] 6 +
mov [ebp+var_1C] 1 +
cmp [ebp+arg_8] esi +
jbe loc_101F9D4  +
mov eax [ebp+arg_4] +
lea eax [eax+esi*2] +
mov [ebp+var_20] eax +
movzx eax word ptr [eax] +
cmp ax 3Ch +
jnz loc_101F9A6  +
lea eax [ebp+var_8] +
jmp loc_101F9BD  +
cmp ax 26h +
jnz loc_101F9B1  +
lea eax [ebp+var_10] +
jmp loc_101F9BD  +
cmp ax 22h +
lea eax [ebp+var_18] +
jz loc_101F9BD  +
lea eax [ebp+var_20] +
push dword ptr [eax+4]  +
push dword ptr [eax]  +
push [ebp+arg_0]  +
call sub_101F8C8  +
test eax eax +
jnz loc_101F9D6  +
inc esi  +
cmp esi [ebp+arg_8] +
jb loc_101F98F  +
xor eax eax +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_8]  +
mov esi [ebp+arg_0] +
push [ebp+arg_4]  +
push dword ptr [esi+4]  +
push dword ptr [esi]  +
call sub_101F8F1  +
test eax eax +
jnz loc_101FA04  +
mov eax 490h +
jmp loc_101FA16  +
mov ecx [esi] +
sub eax ecx +
sar eax 1 +
add eax edx +
sub [esi+4] eax +
lea eax [ecx+eax*2] +
mov [esi] eax +
xor eax eax +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push dword ptr [esi+4]  +
push dword ptr [esi]  +
call sub_101F8F1  +
mov edi eax +
mov ebx edx +
test edi edi +
jnz loc_101FA4A  +
mov eax 490h +
jmp loc_101FA80  +
mov ecx [esi] +
sub eax ecx +
sar eax 1 +
push eax  +
push ecx  +
push [ebp+arg_0]  +
call sub_101F8C8  +
test eax eax +
jnz loc_101FA80  +
mov eax [esi] +
push [ebp+arg_14]  +
sub edi eax +
push [ebp+arg_10]  +
sar edi 1 +
push [ebp+arg_0]  +
add edi ebx +
sub [esi+4] edi +
lea eax [eax+edi*2] +
mov [esi] eax +
call sub_101F8C8  +
test eax eax +
jnz $+2  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 1Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_20]  +
push [ebp+arg_1C]  +
push [ebp+arg_18]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_101FA20  +
test eax eax +
jnz loc_101FAC4  +
push [ebp+arg_20]  +
push [ebp+arg_14]  +
push [ebp+arg_10]  +
push [ebp+arg_4]  +
call sub_101F9E0  +
test eax eax +
jnz $+2  +
pop ebp  +
retn 24h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push 40h  +
push 0  +
push esi  +
call memset  +
add esp 0Ch +
lea eax [esi+8] +
push eax  +
call sub_101F727  +
lea eax [esi+14h] +
push eax  +
call sub_101F727  +
lea eax [esi+20h] +
push eax  +
call sub_101F727  +
mov [esi+4] esi +
mov [esi] esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
lea eax [esi+8] +
push eax  +
call sub_101F747  +
lea eax [esi+14h] +
push eax  +
call sub_101F747  +
add esi 20h +
push esi  +
call sub_101F747  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov edx [ebp+arg_4] +
mov eax [edx+0Ch] +
push esi  +
push edi  +
test eax eax +
jl loc_101FB54  +
mov edi eax +
mov [ebp+var_4] eax +
jmp loc_101FB59  +
xor edi edi +
mov [ebp+var_4] edi +
mov eax [ebp+arg_0] +
mov esi [eax] +
mov ecx [edx] +
cmp esi ecx +
jl loc_101FB6A  +
add ecx edi +
cmp esi ecx +
jle loc_101FB6C  +
mov [eax] ecx +
mov ecx [edx+8] +
test ecx ecx +
jl loc_101FB78  +
mov [ebp+arg_4] ecx +
jmp loc_101FB7C  +
and [ebp+arg_4] 0 +
mov esi [eax+4] +
mov ecx [edx+4] +
cmp esi ecx +
push ebx  +
jl loc_101FB90  +
mov ebx [ebp+arg_4] +
add ecx ebx +
cmp esi ecx +
jle loc_101FB93  +
mov [eax+4] ecx +
cmp dword ptr [eax+0Ch] 0 +
jge loc_101FB9D  +
and dword ptr [eax+0Ch] 0 +
mov esi [eax] +
mov ecx [edx] +
mov ebx [eax+0Ch] +
add edi ecx +
add ebx esi +
cmp ebx edi +
jle loc_101FBB4  +
sub ecx esi +
add ecx [ebp+var_4] +
mov [eax+0Ch] ecx +
cmp dword ptr [eax+8] 0 +
jge loc_101FBBE  +
and dword ptr [eax+8] 0 +
mov ecx [edx+4] +
mov esi [eax+4] +
mov edx [ebp+arg_4] +
mov ebx [eax+8] +
add ebx esi +
lea edi [ecx+edx] +
cmp ebx edi +
pop ebx  +
jle loc_101FBDB  +
sub ecx esi +
add ecx edx +
mov [eax+8] ecx +
pop edi  +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [eax] +
mov edx [ebp+arg_8] +
sub ecx [edx] +
push esi  +
mov [ebp+arg_0] ecx +
fild  [ebp+arg_0] +
mov ecx [ebp+arg_4] +
fld  [ebp+arg_C] +
fld  st +
fmulp st(2) st +
fxch  st(1) +
fstp  dword ptr [ecx] +
mov esi [eax+4] +
sub esi [edx+4] +
mov [ebp+arg_0] esi +
fild  [ebp+arg_0] +
pop esi  +
fld  st(1) +
fmulp st(1) st +
fstp  dword ptr [ecx+4] +
fild  dword ptr [eax+0Ch] +
fld  st(1) +
fmulp st(1) st +
fstp  dword ptr [ecx+0Ch] +
fimul  dword ptr [eax+8] +
fstp  dword ptr [ecx+8] +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 24h +
push esi  +
lea eax [ebp+UniversalTime] +
push eax  +
push [ebp+lpFileTime]  +
mov [ebp+var_4] 10h +
xor esi esi +
call ds:FileTimeToSystemTime  +
test eax eax +
jnz loc_101FC6B  +
call ds:GetLastError  +
test eax eax +
jnz loc_101FCB4  +
mov eax 54Fh +
jmp loc_101FCB4  +
lea eax [ebp+Date] +
push eax  +
lea eax [ebp+UniversalTime] +
push eax  +
push 0  +
call ds:SystemTimeToTzSpecificLocalTime  +
test eax eax +
jz loc_101FC5A  +
lea eax [ebp+var_4] +
push eax  +
call ds:GetProcessDefaultLayout  +
test eax eax +
jz loc_101FC96  +
test byte ptr [ebp+var_4] 1 +
jz loc_101FC96  +
push 20h  +
pop esi  +
push [ebp+cchDate]  +
lea eax [ebp+Date] +
push [ebp+lpDateStr]  +
push 0  +
push eax  +
push esi  +
push 400h  +
call ds:GetDateFormatW  +
test eax eax +
jle loc_101FC5A  +
xor eax eax +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
lea eax [ebp+UniversalTime] +
push eax  +
push [ebp+lpFileTime]  +
call ds:FileTimeToSystemTime  +
test eax eax +
jnz loc_101FCE8  +
call ds:GetLastError  +
test eax eax +
jnz locret_101FD1B  +
mov eax 54Fh +
jmp locret_101FD1B  +
lea eax [ebp+Time] +
push eax  +
lea eax [ebp+UniversalTime] +
push eax  +
push 0  +
call ds:SystemTimeToTzSpecificLocalTime  +
test eax eax +
jz loc_101FCD7  +
push [ebp+cchTime]  +
lea eax [ebp+Time] +
push [ebp+lpTimeStr]  +
push 0  +
push eax  +
push 0  +
push 400h  +
call ds:GetTimeFormatW  +
test eax eax +
jle loc_101FCD7  +
xor eax eax +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
xor eax eax +
mov edx 80070057h +
test ecx ecx +
jz loc_101FD3F  +
cmp ecx 7FFFFFFFh +
jbe loc_101FD41  +
mov eax edx +
test eax eax +
jl loc_101FD9E  +
push edi  +
mov edi [ebp+arg_C] +
cmp edi 7FFFFFFEh +
jbe loc_101FD5D  +
mov eax edx +
mov edx [ebp+arg_0] +
xor ecx ecx +
mov [edx] cx +
jmp loc_101FD9D  +
mov eax [ebp+arg_0] +
push ebx  +
xor ebx ebx +
push esi  +
mov esi ecx +
test ecx ecx +
jz loc_101FD8D  +
mov edx [ebp+arg_8] +
sub edi ecx +
sub edx eax +
lea ecx [edi+esi] +
test ecx ecx +
jz loc_101FD89  +
movzx ecx word ptr [edx+eax] +
test cx cx +
jz loc_101FD89  +
mov [eax] cx +
inc eax  +
inc eax  +
dec esi  +
jnz loc_101FD71  +
test esi esi +
jnz loc_101FD94  +
dec eax  +
dec eax  +
mov ebx 8007007Ah +
xor ecx ecx +
mov [eax] cx +
pop esi  +
mov eax ebx +
pop ebx  +
pop edi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov ecx [ebp+arg_4] +
push esi  +
push edi  +
push [ebp+arg_10]  +
mov edi [ebp+arg_0] +
push 7FFFFFFFh  +
push edi  +
call sub_101F383  +
mov esi eax +
xor eax eax +
cmp esi eax +
jl loc_101FED0  +
test [ebp+arg_10] 100h +
push ebx  +
mov ebx ecx +
mov [ebp+var_4] edi +
mov [ebp+arg_0] ebx +
jz loc_101FDED  +
cmp [ebp+arg_14] eax +
jnz loc_101FDED  +
mov [ebp+arg_14] offset WindowName +
xor esi esi +
test [ebp+arg_10] 0FFFFE000h +
jz loc_101FE0C  +
mov esi 80070057h +
cmp ecx eax +
jz loc_101FE89  +
xor eax eax +
mov [edi] ax +
jmp loc_101FE89  +
cmp ecx eax +
jnz loc_101FE2D  +
mov edx [ebp+arg_14] +
cmp [edx] ax +
jz loc_101FEBA  +
mov esi edi +
neg esi  +
sbb esi esi +
and esi 23h +
add esi 80070057h +
jmp loc_101FE89  +
push [ebp+arg_18]  +
mov [ebp+arg_0] eax +
push [ebp+arg_14]  +
lea eax [ebp+arg_0] +
push eax  +
mov eax ecx +
call sub_1007EE3  +
mov ecx [ebp+arg_0] +
mov esi eax +
sub ebx ecx +
lea eax [edi+ecx*2] +
mov [ebp+var_4] eax +
mov [ebp+arg_0] ebx +
test esi esi +
jl loc_101FE86  +
mov ecx [ebp+arg_10] +
test ecx 200h +
jz loc_101FEBA  +
cmp ebx 1 +
jbe loc_101FEBA  +
lea edx [ebx+ebx] +
cmp edx 2 +
jbe loc_101FEBA  +
add edx 0FFFFFFFEh +
push edx  +
and ecx 0FFh +
push ecx  +
add eax 2 +
push eax  +
call memset  +
add esp 0Ch +
jmp loc_101FEBA  +
mov ecx [ebp+arg_4] +
test [ebp+arg_10] 1C00h +
jz loc_101FEAE  +
test ecx ecx +
jz loc_101FEAE  +
push [ebp+arg_10]  +
lea eax [ebp+var_4] +
push eax  +
lea eax [ecx+ecx] +
push eax  +
lea ebx [ebp+arg_0] +
xor ecx ecx +
call sub_1007F5D  +
mov ebx [ebp+arg_0] +
test esi esi +
jge loc_101FEBA  +
cmp esi 8007007Ah +
jnz loc_101FECF  +
mov eax [ebp+arg_8] +
test eax eax +
jz loc_101FEC6  +
mov ecx [ebp+var_4] +
mov [eax] ecx +
mov eax [ebp+arg_C] +
test eax eax +
jz loc_101FECF  +
mov [eax] ebx +
pop ebx  +
pop edi  +
mov eax esi +
pop esi  +
leave   +
retn 1Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 218h +
mov eax dword_1030118 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
and [ebp+var_208] 0 +
push ebx  +
mov ebx [ebp+arg_4] +
push esi  +
push edi  +
mov [ebp+var_20C] eax +
push 88h  +
lea eax [ebp+var_208] +
push eax  +
call sub_101CFA6  +
mov esi [ebp+var_208] +
mov edi eax +
test edi edi +
jnz loc_1020012  +
or dword ptr [esi] 0FFFFFFFFh +
or dword ptr [esi+84h] 1 +
push edi  +
push edi  +
push 2  +
push edi  +
push edi  +
push 0C0000000h  +
push ebx  +
call ds:CreateFileW  +
mov [esi] eax +
cmp eax 0FFFFFFFFh +
jnz loc_101FF62  +
call ds:GetLastError  +
cmp eax edi +
jnz loc_101FF5B  +
mov eax 54Fh +
mov edi eax +
jmp loc_1020012  +
lea eax [ebp+SystemTimeAsFileTime] +
push eax  +
call ds:GetSystemTimeAsFileTime  +
push offset dword_1036E84  +
call ds:InterlockedIncrement  +
mov ebx eax +
call ds:GetTickCount  +
push ebx  +
push eax  +
push dword ptr [ebp-210h]  +
lea edi [esi+4] +
push dword ptr [ebp+SystemTimeAsFileTime]  +
push off_1030140  +
push 80h  +
push edi  +
call sub_100C705  +
add esp 1Ch +
test eax eax +
jl loc_101FF5B  +
push edi  +
push off_103013C  +
lea eax [ebp+Buffer] +
push 200h  +
push eax  +
call sub_100C705  +
add esp 10h +
test eax eax +
jl loc_101FF5B  +
lea eax [ebp+Buffer] +
lea edx [eax+1] +
mov cl [eax] +
inc eax  +
test cl cl +
jnz loc_101FFD3  +
push 0  +
lea ecx [ebp+NumberOfBytesWritten] +
push ecx  +
sub eax edx +
push eax  +
lea eax [ebp+Buffer] +
push eax  +
push dword ptr [esi]  +
call ds:WriteFile  +
test eax eax +
jnz loc_1020006  +
call ds:GetLastError  +
test eax eax +
jmp loc_101FF54  +
mov eax [ebp+var_20C] +
mov [eax] esi +
xor esi esi +
xor edi edi +
test esi esi +
jz loc_102001C  +
push esi  +
call sub_101F3B9  +
mov ecx [ebp+var_4] +
mov eax edi +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_101BC5D  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 830h +
mov eax dword_1030118 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
mov esi [ebp+arg_4] +
mov eax [esi+14h] +
xor ebx ebx +
mov [ebp+var_828] eax +
mov eax [esi] +
push edi  +
mov edi [ebp+arg_0] +
mov [ebp+var_830] edi +
mov [ebp+lpBaseAddress] ebx +
mov [ebp+lpMem] ebx +
mov [ebp+var_818] ebx +
mov [ebp+var_81C] ebx +
cmp eax ebx +
jz loc_10200B1  +
lea ecx [ebp+cchMultiByte] +
push ecx  +
lea ecx [ebp+lpBaseAddress] +
push ecx  +
push eax  +
call sub_101F4D6  +
mov [ebp+var_808] eax +
cmp eax ebx +
jnz loc_10201A6  +
mov eax [ebp+lpBaseAddress] +
mov [ebp+lpMultiByteStr] eax +
jmp loc_10200C3  +
mov eax [esi+0Ch] +
mov [ebp+lpMultiByteStr] eax +
mov eax [esi+10h] +
mov [ebp+cchMultiByte] eax +
cmp [esi+18h] ebx +
jz loc_1020251  +
cmp [esi+1Ch] ebx +
jnz loc_1020117  +
lea eax [ebp+var_814] +
push eax  +
lea eax [ebp+lpMem] +
push eax  +
push dword ptr [esi+20h]  +
push [ebp+cchMultiByte]  +
push [ebp+lpMultiByteStr]  +
call sub_101F3F1  +
mov [ebp+var_808] eax +
cmp eax ebx +
jnz loc_102015E  +
mov eax [ebp+lpMem] +
mov [ebp+lpMultiByteStr] eax +
mov eax [ebp+var_814] +
add eax eax +
mov [ebp+cchMultiByte] eax +
mov eax [ebp+cchMultiByte] +
mov edi ds:WideCharToMultiByte +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
shr eax 1 +
push eax  +
push [ebp+lpMultiByteStr]  +
mov [ebp+cchMultiByte] eax +
push ebx  +
mov ebx 0FDE9h +
push ebx  +
call edi  +
test eax eax +
ja loc_10201D1  +
call ds:GetLastError  +
test eax eax +
jnz loc_1020156  +
mov eax 54Fh +
mov [ebp+var_808] eax +
xor ebx ebx +
mov esi ds:HeapFree +
mov edi ds:GetProcessHeap +
cmp [ebp+lpMem] ebx +
jz loc_102017E  +
push [ebp+lpMem]  +
push ebx  +
call edi  +
push eax  +
call esi  +
cmp [ebp+var_818] ebx +
jz loc_1020192  +
push [ebp+var_818]  +
push ebx  +
call edi  +
push eax  +
call esi  +
cmp [ebp+var_81C] ebx +
jz loc_10201A6  +
push [ebp+var_81C]  +
push ebx  +
call edi  +
push eax  +
call esi  +
cmp [ebp+lpBaseAddress] ebx +
pop edi  +
pop esi  +
pop ebx  +
jz loc_10201BD  +
push [ebp+lpBaseAddress]  +
call ds:UnmapViewOfFile  +
mov ecx [ebp+var_4] +
mov eax [ebp+var_808] +
xor ecx ebp +
call sub_101BC5D  +
leave   +
retn 8  +
inc eax  +
push eax  +
mov [ebp+var_814] eax +
lea eax [ebp+var_818] +
push eax  +
call sub_101CFA6  +
mov [ebp+var_808] eax +
xor eax eax +
cmp [ebp+var_808] eax +
jnz loc_102015C  +
push eax  +
push eax  +
push [ebp+var_814]  +
push [ebp+var_818]  +
push [ebp+cchMultiByte]  +
push [ebp+lpMultiByteStr]  +
push eax  +
push ebx  +
call edi  +
test eax eax +
jbe loc_1020147  +
mov eax [ebp+var_818] +
mov [ebp+lpMultiByteStr] eax +
lea ecx [eax+1] +
mov dl [eax] +
inc eax  +
test dl dl +
jnz loc_102022E  +
mov edi [ebp+var_830] +
sub eax ecx +
mov [ebp+cchMultiByte] eax +
mov [ebp+var_814] offset aCharsetUtf8 +
xor ebx ebx +
jmp loc_102025B  +
mov [ebp+var_814] offset dword_1001A24 +
cmp [ebp+var_828] ebx +
jz loc_10202B4  +
lea eax [ebp+var_828] +
push eax  +
lea eax [ebp+var_81C] +
push eax  +
push [ebp+cchMultiByte]  +
push [ebp+lpMultiByteStr]  +
call sub_101F6B6  +
mov [ebp+var_808] eax +
cmp eax ebx +
jnz loc_102015E  +
mov eax [ebp+var_828] +
cmp eax ebx +
jz loc_102029B  +
dec eax  +
mov ecx [ebp+var_81C] +
mov [ebp+cchMultiByte] eax +
mov [ebp+lpMultiByteStr] ecx +
mov eax offset aContentTransfe +
jmp loc_10202B9  +
mov eax offset dword_1001A24 +
push dword ptr [esi+8]  +
push eax  +
push [ebp+var_814]  +
lea eax [edi+4] +
push dword ptr [esi+4]  +
push eax  +
push off_1030144  +
lea eax [ebp+Buffer] +
push 800h  +
push eax  +
call sub_100C705  +
add esp 20h +
cmp eax ebx +
jge loc_10202F3  +
mov [ebp+var_808] eax +
jmp loc_102015E  +
lea eax [ebp+Buffer] +
lea edx [eax+1] +
mov cl [eax] +
inc eax  +
test cl cl +
jnz loc_10202FC  +
mov esi ds:WriteFile +
push ebx  +
lea ecx [ebp+NumberOfBytesWritten] +
push ecx  +
sub eax edx +
push eax  +
lea eax [ebp+Buffer] +
push eax  +
push dword ptr [edi]  +
call esi  +
test eax eax +
jnz loc_1020334  +
call ds:GetLastError  +
cmp eax ebx +
jnz loc_10202E8  +
mov eax 54Fh +
jmp loc_10202E8  +
push ebx  +
lea eax [ebp+NumberOfBytesWritten] +
push eax  +
push [ebp+cchMultiByte]  +
push [ebp+lpMultiByteStr]  +
push dword ptr [edi]  +
call esi  +
test eax eax +
jz loc_1020323  +
mov [ebp+var_808] ebx +
jmp loc_102015E  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 208h +
mov eax dword_1030118 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
mov esi [ebp+arg_0] +
lea eax [esi+4] +
push eax  +
push off_1030148  +
lea eax [ebp+Buffer] +
push 200h  +
push eax  +
call sub_100C705  +
add esp 10h +
test eax eax +
jl loc_10203E4  +
lea eax [ebp+Buffer] +
lea edx [eax+1] +
mov cl [eax] +
inc eax  +
test cl cl +
jnz loc_10203A4  +
push 0  +
lea ecx [ebp+NumberOfBytesWritten] +
push ecx  +
sub eax edx +
push eax  +
lea eax [ebp+Buffer] +
push eax  +
push dword ptr [esi]  +
call ds:WriteFile  +
test eax eax +
jnz loc_10203DB  +
call ds:GetLastError  +
test eax eax +
jnz loc_10203E4  +
mov eax 54Fh +
jmp loc_10203E4  +
or dword ptr [esi+84h] 2 +
xor eax eax +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop esi  +
call sub_101BC5D  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov edi [ebp+arg_4] +
cmp edi [esi+4] +
jbe loc_1020410  +
push 57h  +
pop eax  +
jmp loc_1020481  +
and [ebp+arg_0] 0 +
push ebx  +
lea ebx [edi+edi] +
push [ebp+arg_C]  +
lea eax [ebp+var_4] +
push [ebp+arg_8]  +
push 0  +
push eax  +
lea eax [ebp+arg_4] +
push eax  +
mov eax [esi+8] +
sub eax edi +
push eax  +
mov eax [esi] +
add eax ebx +
push eax  +
call sub_101FDA7  +
test eax eax +
jge loc_1020487  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
call ds:_vscwprintf  +
mov edx [esi] +
pop ecx  +
pop ecx  +
mov ecx [esi+4] +
lea ecx [edx+ecx*2] +
cmp word ptr [ecx] 0 +
jz loc_102045D  +
xor edx edx +
mov [ecx] dx +
add eax edi +
push eax  +
push esi  +
call sub_101F791  +
test eax eax +
jnz loc_1020480  +
inc [ebp+arg_0]  +
cmp [ebp+arg_0] 3 +
jl loc_1020418  +
mov eax [esi+4] +
mov ecx [esi] +
xor edx edx +
mov [ecx+eax*2] dx +
xor eax eax +
pop ebx  +
pop edi  +
pop esi  +
leave   +
retn 10h  +
mov eax [ebp+arg_4] +
sub eax [esi] +
sar eax 1 +
cmp eax [esi+4] +
jbe loc_102047E  +
mov [esi+4] eax +
jmp loc_102047E  +
***
mov edi edi +
push ebp  +
mov ebp esp +
lea eax [ebp+arg_C] +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_10203F8  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+lpMem] 0 +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
push esi  +
call sub_101F76F  +
push [ebp+lpType]  +
push [ebp+lpName]  +
push [ebp+hModule]  +
call ds:FindResourceW  +
mov ebx eax +
test ebx ebx +
jnz loc_10204FC  +
call ds:GetLastError  +
test eax eax +
jnz loc_10204F5  +
mov eax 54Fh +
mov edi eax +
jmp loc_102059C  +
push ebx  +
push [ebp+hModule]  +
call ds:SizeofResource  +
mov edi eax +
test edi edi +
jz loc_10204E6  +
push ebx  +
push [ebp+hModule]  +
call ds:LoadResource  +
test eax eax +
jz loc_10204E6  +
push eax  +
call ds:LockResource  +
test eax eax +
jz loc_10204E6  +
cmp [ebp+arg_10] 0 +
jnz loc_1020548  +
lea ecx [ebp+hModule] +
push ecx  +
lea ecx [ebp+lpMem] +
push ecx  +
push [ebp+CodePage]  +
push edi  +
push eax  +
call sub_101F3F1  +
mov edi eax +
test edi edi +
jnz loc_1020584  +
mov ebx [ebp+lpMem] +
jmp loc_102054F  +
shr edi 1 +
mov ebx eax +
mov [ebp+hModule] edi +
push [ebp+hModule]  +
push esi  +
call sub_101F791  +
mov edi eax +
test edi edi +
jnz loc_1020584  +
push [ebp+hModule]  +
push ebx  +
push dword ptr [esi+8]  +
push dword ptr [esi]  +
call sub_101FD24  +
mov eax [esi] +
lea ecx [eax+2] +
mov dx [eax] +
inc eax  +
inc eax  +
test dx dx +
jnz loc_1020571  +
sub eax ecx +
sar eax 1 +
mov [esi+4] eax +
xor edi edi +
cmp [ebp+lpMem] 0 +
jz loc_102059C  +
push [ebp+lpMem]  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
push ebx  +
push esi  +
push edi  +
push 40h  +
lea eax [ebp+var_4] +
push eax  +
call sub_101CFA6  +
mov ebx [ebp+var_4] +
mov edi eax +
test edi edi +
jnz loc_1020645  +
push ebx  +
call sub_101FACD  +
mov esi [ebp+arg_4] +
push dword ptr [esi+4]  +
lea eax [ebx+8] +
push dword ptr [esi]  +
push eax  +
call sub_101F899  +
mov edi eax +
test edi edi +
jnz loc_1020645  +
push dword ptr [esi+0Ch]  +
lea eax [ebx+14h] +
push dword ptr [esi+8]  +
push eax  +
call sub_101F899  +
mov edi eax +
test edi edi +
jnz loc_1020645  +
push dword ptr [esi+14h]  +
lea eax [ebx+20h] +
push dword ptr [esi+10h]  +
push eax  +
call sub_101F899  +
mov edi eax +
test edi edi +
jnz loc_1020645  +
mov eax [ebp+arg_4] +
mov ecx [ebp+arg_0] +
add esi 18h +
lea edi [ebx+2Ch] +
movs   +
movs   +
movs   +
movs   +
mov eax [eax+28h] +
mov [ebx+3Ch] eax +
lea eax [ecx+0ACh] +
mov edx [eax+4] +
mov [ebx] eax +
mov [ebx+4] edx +
mov [edx] ebx +
mov [eax+4] ebx +
xor ebx ebx +
inc dword ptr [ecx+0B4h]  +
xor edi edi +
test ebx ebx +
jz loc_102065F  +
push ebx  +
call sub_101FB0D  +
push ebx  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx ds:HeapFree +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
lea esi [edi+0ACh] +
cmp [esi] esi +
jz loc_10206AF  +
mov edi [esi] +
mov eax [edi] +
mov [esi] eax +
mov [eax+4] esi +
push edi  +
mov [edi+4] edi +
mov [edi] edi +
call sub_101FB0D  +
push edi  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ebx  +
cmp [esi] esi +
jnz loc_1020688  +
mov edi [ebp+arg_0] +
lea esi [edi+0Ch] +
mov [ebp+arg_0] 0Ah +
push esi  +
call sub_101F747  +
add esi 0Ch +
dec [ebp+arg_0]  +
jnz loc_10206B9  +
push edi  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ebx  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 24h +
push esi  +
mov esi [ebp+arg_0] +
mov eax [esi] +
push edi  +
push 0Ah  +
push 7D4h  +
push dword ptr [eax+1Ch]  +
call ds:FindResourceW  +
mov edi eax +
test edi edi +
jnz loc_1020715  +
call ds:GetLastError  +
test eax eax +
jnz loc_102078C  +
mov eax 54Fh +
jmp loc_102078C  +
mov eax [esi] +
push ebx  +
push edi  +
push dword ptr [eax+1Ch]  +
call ds:SizeofResource  +
mov ebx eax +
test ebx ebx +
jz loc_1020745  +
mov eax [esi] +
push edi  +
push dword ptr [eax+1Ch]  +
call ds:LoadResource  +
test eax eax +
jz loc_1020745  +
push eax  +
call ds:LockResource  +
mov edx eax +
test edx edx +
jnz loc_1020756  +
call ds:GetLastError  +
test eax eax +
jnz loc_102078B  +
mov eax 54Fh +
jmp loc_102078B  +
push 9  +
pop ecx  +
xor eax eax +
lea edi [ebp+var_24] +
stos   +
lea eax [ebp+var_24] +
push eax  +
push dword ptr [esi+4]  +
mov [ebp+var_18] edx +
mov [ebp+var_14] ebx +
mov [ebp+var_20] offset aImageXIcon +
mov [ebp+var_1C] offset aCursor_ico +
mov [ebp+var_10] 1 +
call sub_1020034  +
test eax eax +
jnz $+2  +
pop ebx  +
pop edi  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 168h +
mov eax dword_1030118 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
mov ebx [ebp+arg_4] +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov edi [ebp+arg_C] +
push edi  +
mov [ebp+var_148] esi +
mov [ebp+var_140] ebx +
mov [ebp+var_10C] edi +
call sub_101F76F  +
lea eax [ebp+var_138] +
push eax  +
call sub_101F727  +
lea eax [ebp+var_12C] +
push eax  +
call sub_101F727  +
lea eax [esi+0D60h] +
push eax  +
push offset aWs_5  +
lea eax [ebp+var_104] +
push 100h  +
push eax  +
call sub_101D67B  +
mov eax [ebx+8Ch] +
add esp 10h +
mov [ebp+var_120] eax +
test eax eax +
jle loc_1020ED9  +
mov ecx [ebx+90h] +
mov [ebp+var_144] ecx +
test ecx ecx +
jle loc_1020ED9  +
mov ecx [ebp+arg_8] +
mov [ebp+var_108] ecx +
cmp ecx eax +
jbe loc_1020843  +
mov [ebp+var_108] eax +
cmp [ebp+var_108] 0C8h +
jb loc_1020ED9  +
mov eax [ebp+var_108] +
fild  [ebp+var_108] +
test eax eax +
jge loc_1020869  +
fadd  ds:flt_10042E0 +
fidiv  [ebp+var_120] +
fstp  [ebp+var_13C] +
fild  [ebp+var_144] +
fmul  [ebp+var_13C] +
call _ftol2  +
mov [ebp+var_144] eax +
lea eax [ebp+var_12C] +
push eax  +
call sub_101F76F  +
lea ecx [esi+0A40h] +
mov eax ecx +
lea edx [eax+2] +
mov si [eax] +
inc eax  +
inc eax  +
test si si +
jnz loc_10208A3  +
sub eax edx +
sar eax 1 +
push eax  +
push ecx  +
lea eax [ebp+var_12C] +
push eax  +
call sub_101F94E  +
mov esi eax +
test esi esi +
jnz loc_1020EDC  +
push [ebp+var_12C]  +
push [ebp+var_144]  +
push [ebp+var_108]  +
push offset aDivClassDrawin  +
push dword ptr [edi+4]  +
push edi  +
call sub_102049D  +
mov esi eax +
add esp 18h +
test esi esi +
jnz loc_1020EDC  +
and [ebp+var_108] eax +
mov ecx [ebp+var_140] +
lea esi [ebx+84h] +
mov ebx [ebx+0B0h] +
mov [ebp+var_120] esi +
lea edi [ebp+var_168] +
movs   +
movs   +
movs   +
lea eax [ecx+0ACh] +
movs   +
cmp ebx eax +
jz loc_1020DE6  +
lea esi [ebx+2Ch] +
lea edi [ebp+var_158] +
movs   +
movs   +
lea eax [ebp+var_168] +
movs   +
push eax  +
lea eax [ebp+var_158] +
push eax  +
movs   +
call sub_101FB3B  +
lea esi [ebp+var_158] +
fld  [ebp+var_13C] +
lea edi [ebp+var_168] +
movs   +
push ecx  +
movs   +
fstp  [esp+178h+var_178] +
push [ebp+var_120]  +
lea eax [ebp+var_11C] +
push eax  +
movs   +
lea eax [ebp+var_158] +
push eax  +
movs   +
call sub_101FBE6  +
lea eax [ebp+var_138] +
push eax  +
call sub_101F76F  +
lea eax [ebp+var_12C] +
push eax  +
call sub_101F76F  +
cmp dword ptr [ebx+3Ch] 9 +
jnz loc_1020A2B  +
xor edi edi +
cmp [ebx+0Ch] edi +
jz loc_1020A8E  +
cmp [ebx+18h] edi +
jz loc_1020A8E  +
cmp [ebp+var_108] edi +
jnz loc_10209E6  +
push dword ptr [ebx+14h]  +
push dword ptr [ebx+8]  +
lea eax [ebp+var_138] +
push offset aWsWs_3  +
push [ebp+var_134]  +
push eax  +
call sub_102049D  +
mov esi eax +
add esp 14h +
cmp esi edi +
jmp loc_1020A88  +
mov eax [ebx+20h] +
mov ecx offset aButton +
mov dx [eax] +
cmp dx [ecx] +
jnz loc_1020A14  +
cmp dx di +
jz loc_1020A10  +
mov dx [eax+2] +
cmp dx [ecx+2] +
jnz loc_1020A14  +
add eax 4 +
add ecx 4 +
cmp dx di +
jnz loc_10209EE  +
xor eax eax +
jmp loc_1020A19  +
sbb eax eax +
sbb eax 0FFFFFFFFh +
cmp eax edi +
jnz loc_1020A8E  +
mov eax [ebp+var_148] +
add eax 0B08h +
push eax  +
jmp loc_10209C0  +
cmp dword ptr [ebx+0Ch] 0 +
jz loc_1020A4D  +
push dword ptr [ebx+0Ch]  +
lea eax [ebp+var_138] +
push dword ptr [ebx+8]  +
push eax  +
call sub_101F8C8  +
mov esi eax +
test esi esi +
jnz loc_1020EDC  +
cmp dword ptr [ebx+18h] 0 +
jz loc_1020A8E  +
cmp [ebp+var_134] 0 +
mov eax offset asc_1001C58 +
jnz loc_1020A66  +
mov eax offset WindowName +
push dword ptr [ebx+14h]  +
push eax  +
push offset aWsWs_4  +
push [ebp+var_134]  +
lea eax [ebp+var_138] +
push eax  +
call sub_102049D  +
mov esi eax +
add esp 14h +
test esi esi +
jnz loc_1020EDC  +
push [ebp+var_134]  +
lea eax [ebp+var_12C] +
push [ebp+var_138]  +
push eax  +
call sub_101F94E  +
mov esi eax +
test esi esi +
jnz loc_1020EDC  +
cmp [ebp+var_108] eax +
jnz loc_1020C24  +
push [ebp+var_12C]  +
fld  [ebp+var_110] +
mov eax [ebp+var_10C] +
sub esp 20h +
fstp  [esp+198h+var_180] +
fld  [ebp+var_114] +
fstp  [esp+198h+var_188] +
fld  [ebp+var_118] +
fstp  [esp+198h+var_190] +
fld  [ebp+var_11C] +
fstp  [esp+198h+var_198] +
push offset aDivClassDraw_0  +
push dword ptr [eax+4]  +
push eax  +
call sub_102049D  +
mov esi eax +
add esp 30h +
test esi esi +
jnz loc_1020EDC  +
fld  [ebp+var_110] +
fcomp  ds:dbl_1004098 +
fnstsw  ax +
test ah 5 +
jnp loc_1020DC4  +
fld  [ebp+var_114] +
fcomp  ds:dbl_1004090 +
fnstsw  ax +
test ah 5 +
jnp loc_1020DC4  +
mov edi [ebx+0Ch] +
mov esi [ebx+8] +
test edi edi +
jnz loc_1020B78  +
push offset a32768  +
push dword ptr [ebx+20h]  +
call ds:wcsstr  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1020DC4  +
lea esi [ebp+var_104] +
mov eax esi +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_1020B68  +
sub eax edx +
sar eax 1 +
mov edi eax +
fld  [ebp+var_114] +
fdiv  ds:dbl_1004088 +
call _ftol2  +
cmp edi eax +
jbe loc_1020B8F  +
mov edi eax +
lea eax [ebp+var_138] +
push eax  +
call sub_101F76F  +
push edi  +
push esi  +
lea eax [ebp+var_138] +
push eax  +
call sub_101F94E  +
mov esi eax +
test esi esi +
jnz loc_1020EDC  +
cmp edi [ebx+0Ch] +
jnb loc_1020BD8  +
push 3  +
pop ecx  +
push ecx  +
mov eax offset a___ +
push eax  +
lea eax [ebp+var_138] +
push eax  +
call sub_101F94E  +
mov esi eax +
test esi esi +
jnz loc_1020EDC  +
push [ebp+var_138]  +
fld  [ebp+var_114] +
mov eax [ebp+var_10C] +
push [ebp+var_12C]  +
push 0Ah  +
push 0Fh  +
sub esp 18h +
fstp  [esp+19Ch+var_190+4] +
fld  [ebp+var_118] +
fstp  [esp+19Ch+var_198+4] +
fld  [ebp+var_11C] +
fstp  qword ptr [esp] +
push offset aDivClassDraw_1  +
push dword ptr [eax+4]  +
push eax  +
call sub_102049D  +
add esp 34h +
jmp loc_1020DBA  +
mov eax [ebp+var_140] +
mov eax [eax+0B4h] +
dec eax  +
cmp [ebp+var_108] eax +
jnz loc_1020D73  +
cmp dword ptr [ebx+3Ch] 1 +
jz loc_1020DC4  +
push [ebp+var_12C]  +
fld  [ebp+var_110] +
mov eax [ebp+var_10C] +
sub esp 20h +
fstp  [esp+198h+var_180] +
fld  [ebp+var_114] +
fstp  [esp+198h+var_188] +
fld  [ebp+var_118] +
fstp  [esp+198h+var_190] +
fld  [ebp+var_11C] +
fstp  [esp+198h+var_198] +
push offset aDivClassDraw_2  +
push dword ptr [eax+4]  +
push eax  +
call sub_102049D  +
mov esi eax +
add esp 30h +
test esi esi +
jnz loc_1020EDC  +
fld  ds:flt_1003E14 +
fcomp  [ebp+var_110] +
fnstsw  ax +
test ah 41h +
jz loc_1020D5C  +
fld  [ebp+var_114] +
fcomp  ds:dbl_1004098 +
fnstsw  ax +
test ah 5 +
jnp loc_1020D5C  +
cmp [ebx+0Ch] esi +
jz loc_1020D5C  +
fld  [ebp+var_114] +
mov esi [ebx+8] +
fdiv  ds:dbl_1004088 +
mov edi [ebx+0Ch] +
call _ftol2  +
cmp edi eax +
jbe loc_1020CEC  +
mov edi eax +
lea eax [ebp+var_12C] +
push eax  +
call sub_101F76F  +
push edi  +
push esi  +
lea eax [ebp+var_12C] +
push eax  +
call sub_101F94E  +
mov esi eax +
test esi esi +
jnz loc_1020EDC  +
cmp edi [ebx+0Ch] +
jnb loc_1020D35  +
push 3  +
pop ecx  +
push ecx  +
mov eax offset a___ +
push eax  +
lea eax [ebp+var_12C] +
push eax  +
call sub_101F94E  +
mov esi eax +
test esi esi +
jnz loc_1020EDC  +
push [ebp+var_12C]  +
mov eax [ebp+var_10C] +
push offset aTableCellpaddi  +
push dword ptr [eax+4]  +
push eax  +
call sub_102049D  +
mov esi eax +
add esp 10h +
test esi esi +
jnz loc_1020EDC  +
push 8  +
pop ecx  +
push ecx  +
mov eax offset aDiv +
push eax  +
push [ebp+var_10C]  +
call sub_101F8C8  +
jmp loc_1020DBA  +
push [ebp+var_12C]  +
fld  [ebp+var_110] +
mov eax [ebp+var_10C] +
sub esp 20h +
fstp  [esp+198h+var_180] +
fld  [ebp+var_114] +
fstp  [esp+198h+var_188] +
fld  [ebp+var_118] +
fstp  [esp+198h+var_190] +
fld  [ebp+var_11C] +
fstp  [esp+198h+var_198] +
push offset aDivClassDraw_3  +
push dword ptr [eax+4]  +
push eax  +
call sub_102049D  +
add esp 30h +
mov esi eax +
test esi esi +
jnz loc_1020EDC  +
mov eax [ebp+var_140] +
mov ebx [ebx+4] +
inc [ebp+var_108]  +
add eax 0ACh +
cmp ebx eax +
jnz loc_102092C  +
mov ecx [ebp+var_140] +
push [ebp+var_120]  +
xor eax eax +
lea edi [ebp+var_158] +
stos   +
stos   +
stos   +
stos   +
mov eax [ecx+0A8h] +
mov [ebp+var_158] eax +
mov eax [ecx+0A4h] +
mov [ebp+var_154] eax +
lea eax [ebp+var_158] +
push eax  +
call sub_101FB3B  +
push ecx  +
fld  [ebp+var_13C] +
lea eax [ebp+var_11C] +
fstp  [esp+178h+var_178] +
push [ebp+var_120]  +
push eax  +
lea eax [ebp+var_158] +
push eax  +
call sub_101FBE6  +
lea eax [ebp+var_12C] +
push eax  +
call sub_101F76F  +
mov edi [ebp+var_148] +
lea ecx [edi+978h] +
mov eax ecx +
lea edx [eax+2] +
mov si [eax] +
inc eax  +
inc eax  +
test si si +
jnz loc_1020E5C  +
sub eax edx +
sar eax 1 +
push eax  +
push ecx  +
lea eax [ebp+var_12C] +
push eax  +
call sub_101F94E  +
mov esi eax +
test esi esi +
jnz loc_1020EDC  +
push [ebp+var_12C]  +
fld  [ebp+var_118] +
mov ebx [ebp+var_10C] +
push offset aCursor_ico  +
sub esp 10h +
fstp  [esp+18Ch+var_188+4] +
fld  [ebp+var_11C] +
fstp  [esp+18Ch+var_190+4] +
push offset aImgClassDrawin  +
push dword ptr [ebx+4]  +
push ebx  +
call sub_102049D  +
mov esi eax +
add esp 24h +
test esi esi +
jnz loc_1020EDC  +
or dword ptr [edi+14h] 1 +
push offset aDiv_0  +
push dword ptr [ebx+4]  +
push ebx  +
call sub_102049D  +
mov esi eax +
add esp 0Ch +
test esi esi +
jnz loc_1020EDC  +
jmp loc_1020EDC  +
push 57h  +
pop esi  +
lea eax [ebp+var_138] +
push eax  +
call sub_101F747  +
lea eax [ebp+var_12C] +
push eax  +
call sub_101F747  +
mov ecx [ebp+var_4] +
pop edi  +
mov eax esi +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_101BC5D  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 52Ch +
mov eax dword_1030118 +
xor eax ebp +
mov [ebp+var_4] eax +
and [ebp+hKey] 0 +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov edi [ebp+arg_4] +
push 100h  +
lea eax [ebp+TimeStr] +
push eax  +
mov eax [esi] +
add eax 28h +
push eax  +
call sub_101FC37  +
mov ebx eax +
test ebx ebx +
jnz loc_1021157  +
lea eax [ebp+TimeStr] +
push eax  +
lea eax [esi+338h] +
push eax  +
push offset aWsWs_5  +
push dword ptr [edi+4]  +
push edi  +
call sub_102049D  +
mov ebx eax +
add esp 14h +
test ebx ebx +
jnz loc_1021157  +
push 100h  +
lea eax [ebp+TimeStr] +
push eax  +
mov eax [esi] +
add eax 28h +
push eax  +
call sub_101FCBE  +
mov ebx eax +
test ebx ebx +
jnz loc_1021157  +
lea eax [ebp+TimeStr] +
push eax  +
push offset aWs_6  +
push dword ptr [edi+4]  +
push edi  +
call sub_102049D  +
mov ebx eax +
add esp 10h +
test ebx ebx +
jnz loc_1021157  +
push 100h  +
lea eax [ebp+TimeStr] +
push eax  +
mov eax [esi] +
add eax 30h +
push eax  +
call sub_101FCBE  +
mov ebx eax +
test ebx ebx +
jnz loc_1021157  +
lea eax [ebp+TimeStr] +
push eax  +
push offset aWs_7  +
push dword ptr [edi+4]  +
push edi  +
call sub_102049D  +
mov ebx eax +
add esp 10h +
test ebx ebx +
jnz loc_1021157  +
mov eax [esi] +
push dword ptr [eax+10h]  +
lea ecx [esi+0FB8h] +
push ecx  +
push dword ptr [eax+14h]  +
lea ecx [esi+0EF0h] +
push ecx  +
push dword ptr [eax+0Ch]  +
lea eax [esi+0E28h] +
push eax  +
push offset aWsDWsDWsD  +
push dword ptr [edi+4]  +
push edi  +
call sub_102049D  +
mov ebx eax +
add esp 24h +
test ebx ebx +
jnz loc_1021157  +
mov ebx 11Ch +
push ebx  +
push eax  +
lea eax [ebp+VersionInformation] +
push eax  +
call memset  +
add esp 0Ch +
lea eax [ebp+VersionInformation] +
push eax  +
mov [ebp+VersionInformation.dwOSVersionInfoSize] ebx +
call ds:GetVersionExW  +
test eax eax +
jnz loc_1021081  +
call ds:GetLastError  +
test eax eax +
jnz loc_1021155  +
mov eax 54Fh +
jmp loc_1021155  +
lea eax [ebp+var_528] +
push eax  +
movzx eax [ebp+var_40A] +
push eax  +
movzx eax [ebp+var_40C] +
push eax  +
push [ebp+VersionInformation.dwMinorVersion]  +
push [ebp+VersionInformation.dwMajorVersion]  +
call ds:GetProductInfo  +
test eax eax +
jz loc_1021069  +
lea eax [ebp+hKey] +
push eax  +
push offset SubKey  +
push 80000002h  +
call ds:RegOpenKeyW  +
mov ebx eax +
test ebx ebx +
jnz loc_1021157  +
mov word ptr [ebp+Data] ax +
lea eax [ebp+cbData] +
push eax  +
lea eax [ebp+Data] +
push eax  +
push ebx  +
push ebx  +
push offset ValueName  +
push [ebp+hKey]  +
mov [ebp+cbData] 200h +
call ds:RegQueryValueExW  +
mov ebx eax +
test ebx ebx +
jnz loc_1021157  +
push [ebp+var_528]  +
mov [ebp+var_206] ax +
push [ebp+VersionInformation.dwPlatformId]  +
movzx eax [ebp+var_40A] +
push eax  +
movzx eax [ebp+var_40C] +
push eax  +
push [ebp+VersionInformation.dwMinorVersion]  +
lea eax [ebp+Data] +
push [ebp+VersionInformation.dwMajorVersion]  +
add esi 270h +
push eax  +
push esi  +
push offset aWsWsD_D_D_D_D_  +
push dword ptr [edi+4]  +
push edi  +
call sub_102049D  +
add esp 2Ch +
mov ebx eax +
cmp [ebp+hKey] 0 +
jz loc_102116C  +
push [ebp+hKey]  +
call ds:RegCloseKey  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
mov eax ebx +
xor ecx ebp +
pop ebx  +
call sub_101BC5D  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
mov eax [ebp+arg_4] +
push esi  +
mov esi [ebp+arg_C] +
push edi  +
push dword ptr [eax+0Ch]  +
mov edi [ebp+arg_0] +
push [ebp+arg_8]  +
lea eax [edi+18h] +
push eax  +
push offset aWsDWs  +
push dword ptr [esi+4]  +
mov [ebp+var_14] 4 +
push esi  +
mov [ebp+var_10] 3 +
mov [ebp+var_C] 5 +
mov [ebp+var_8] 1 +
mov [ebp+var_4] 2 +
call sub_102049D  +
add esp 18h +
test eax eax +
jnz loc_10212EC  +
lea eax [edi+0E0h] +
push eax  +
push offset aWs_8  +
push dword ptr [esi+4]  +
push esi  +
call sub_102049D  +
add esp 10h +
test eax eax +
jnz loc_10212EC  +
and [ebp+arg_C] eax +
push ebx  +
mov ecx offset WindowName +
mov ebx offset aWsWs_0 +
mov eax [ebp+arg_C] +
mov eax [ebp+eax*4+var_14] +
inc eax  +
imul eax eax +
add eax [ebp+arg_4] +
cmp dword ptr [eax+4] 0 +
jz loc_102123C  +
push dword ptr [eax]  +
push ecx  +
push ebx  +
push dword ptr [esi+4]  +
push esi  +
call sub_102049D  +
add esp 14h +
test eax eax +
jnz loc_10212EB  +
mov ecx offset asc_1004424 +
inc [ebp+arg_C]  +
cmp [ebp+arg_C] 5 +
jb loc_102120B  +
push 2  +
pop ecx  +
push ecx  +
mov eax offset asc_100441C +
push eax  +
push esi  +
call sub_101F8C8  +
test eax eax +
jnz loc_10212EB  +
add edi 1A8h +
push edi  +
push offset aWs_8  +
push dword ptr [esi+4]  +
push esi  +
call sub_102049D  +
add esp 10h +
test eax eax +
jnz loc_10212EB  +
mov ecx [ebp+arg_4] +
add ecx 0ACh +
mov edi [ecx] +
mov eax offset WindowName +
mov [ebp+arg_4] ecx +
cmp edi ecx +
jz loc_10212D7  +
cmp dword ptr [edi+0Ch] 0 +
jz loc_10212B0  +
push dword ptr [edi+8]  +
push eax  +
push ebx  +
push dword ptr [esi+4]  +
push esi  +
call sub_102049D  +
add esp 14h +
test eax eax +
jnz loc_10212EB  +
mov eax offset asc_1004424 +
cmp dword ptr [edi+24h] 0 +
jz loc_10212D0  +
push dword ptr [edi+20h]  +
push eax  +
push ebx  +
push dword ptr [esi+4]  +
push esi  +
call sub_102049D  +
add esp 14h +
test eax eax +
jnz loc_10212EB  +
mov eax offset asc_1004424 +
mov edi [edi] +
cmp edi [ebp+arg_4] +
jnz loc_1021290  +
push 4  +
pop ecx  +
push ecx  +
mov eax offset asc_1004410 +
push eax  +
push esi  +
call sub_101F8C8  +
test eax eax +
jnz $+2  +
pop ebx  +
pop edi  +
pop esi  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
push esi  +
push 0D0h  +
lea eax [ebp+var_4] +
push eax  +
call sub_101CFA6  +
mov esi eax +
test esi esi +
jnz loc_1021349  +
mov edx [ebp+var_4] +
or dword ptr [edx+0B8h] 0FFFFFFFFh +
push edi  +
lea eax [edx+0ACh] +
push 0Ah  +
mov [eax+4] eax +
mov [eax] eax +
lea esi [edx+0Ch] +
pop edi  +
push esi  +
call sub_101F727  +
add esi 0Ch +
dec edi  +
jnz loc_1021332  +
mov eax [ebp+arg_0] +
and [ebp+var_4] edi +
mov [eax] edx +
xor esi esi +
pop edi  +
cmp [ebp+var_4] 0 +
jz loc_1021357  +
push [ebp+var_4]  +
call sub_102066D  +
mov eax esi +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0AB0h +
mov eax dword_1030118 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
push edi  +
push 16h  +
pop eax  +
mov [ebp+var_A80] eax +
lea eax [ebp+var_A60] +
push eax  +
xor edx edx +
mov [ebp+var_A88] 19h +
mov [ebp+var_A70] 1Dh +
mov [ebp+var_A78] 1Fh +
call sub_101F727  +
lea eax [ebp+var_A20] +
push eax  +
call sub_101F727  +
lea eax [ebp+var_A54] +
push eax  +
call sub_101F727  +
lea eax [ebp+var_A6C] +
push eax  +
call sub_101F727  +
lea eax [ebp+var_A3C] +
push eax  +
call sub_101F727  +
mov edi 0FDE9h +
push edi  +
push edx  +
xor eax eax +
push 17h  +
mov [ebp+hObject] ax +
mov eax [ebx] +
push 836h  +
push dword ptr [eax+1Ch]  +
lea eax [ebp+var_A60] +
push eax  +
mov [ebp+lpMultiByteStr] edx +
mov [ebp+lpMem] edx +
mov [ebp+var_A48] edx +
call sub_10204BB  +
mov esi eax +
test esi esi +
jnz loc_1021DD2  +
mov eax [ebp+var_A60] +
mov ecx [ebp+var_A5C] +
mov [ebp+var_A14] eax +
mov eax [ebx] +
mov eax [eax+0Ch] +
add eax 20h +
shl eax 0Ah +
add eax ecx +
push eax  +
lea eax [ebp+var_A20] +
push eax  +
mov [ebp+var_A10] ecx +
call sub_101F791  +
mov esi eax +
test esi esi +
jnz loc_1021DD2  +
mov eax [ebx] +
mov eax [eax+0Ch] +
add eax 20h +
shl eax 9 +
push eax  +
lea eax [ebp+var_A54] +
push eax  +
call sub_101F791  +
mov esi eax +
test esi esi +
jnz loc_1021DD2  +
mov eax [ebx] +
mov ecx [eax+20h] +
test ecx ecx +
jz loc_102153A  +
push ecx  +
push dword ptr [eax+4]  +
lea eax [ebp+hObject] +
push offset aWsWs_1  +
push 208h  +
push eax  +
call sub_101D67B  +
add esp 14h +
test eax eax +
jge loc_10214BA  +
mov esi eax +
jmp loc_1021DD2  +
lea eax [ebp+cchMultiByte] +
push eax  +
lea eax [ebp+lpMultiByteStr] +
push eax  +
lea eax [ebp+hObject] +
push eax  +
call sub_101F4D6  +
mov esi eax +
test esi esi +
jnz loc_1021DD2  +
lea eax [ebp+cchMultiByte] +
push eax  +
lea eax [ebp+lpMem] +
push eax  +
push edi  +
push [ebp+cchMultiByte]  +
push [ebp+lpMultiByteStr]  +
call sub_101F3F1  +
mov esi eax +
test esi esi +
jnz loc_1021DD2  +
mov edi [ebp+lpMem] +
lea eax [ebx+7E8h] +
push eax  +
push offset aWs_9  +
lea eax [ebp+TimeStr] +
push 400h  +
push eax  +
mov [ebp+var_A48] 1 +
call sub_101D67B  +
add esp 10h +
jmp loc_1021548  +
xor eax eax +
mov edi offset WindowName +
mov [ebp+TimeStr] ax +
lea edx [ebp+TimeStr] +
mov eax edx +
lea esi [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_1021553  +
push 1  +
sub eax esi +
sar eax 1 +
push eax  +
push edx  +
push 1Dh  +
pop eax  +
push eax  +
mov eax offset aRecordeddataxm +
push eax  +
lea eax [ebp+var_A14] +
push eax  +
lea eax [ebp+var_A20] +
push eax  +
call sub_101FA20  +
mov esi eax +
test esi esi +
jnz loc_1021DD2  +
mov eax edi +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_1021591  +
push 1  +
sub eax edx +
sar eax 1 +
push eax  +
push edi  +
push 16h  +
pop eax  +
push eax  +
mov eax offset aRecordeddata_0 +
push eax  +
lea eax [ebp+var_A14] +
push eax  +
lea eax [ebp+var_A20] +
push eax  +
call sub_101FA20  +
mov esi eax +
test esi esi +
jnz loc_1021DD2  +
mov eax [ebx] +
xor edi edi +
cmp [eax+10h] edi +
jnz loc_10215E1  +
cmp [eax+14h] edi +
jnz loc_10215E1  +
mov eax offset WindowName +
xor ecx ecx +
jmp loc_102161F  +
lea eax [ebp+var_A3C] +
push eax  +
call sub_101F76F  +
lea eax [ebx+0C98h] +
push eax  +
push offset aPIWsIP  +
lea eax [ebp+var_A3C] +
push edi  +
push eax  +
call sub_102049D  +
mov esi eax +
add esp 10h +
cmp esi edi +
jnz loc_1021DD2  +
mov eax [ebp+var_A3C] +
mov ecx [ebp+var_A38] +
push 1  +
push ecx  +
push eax  +
push 19h  +
pop eax  +
push eax  +
mov eax offset aSomeerrorsifer +
push eax  +
lea eax [ebp+var_A14] +
push eax  +
lea eax [ebp+var_A20] +
push eax  +
call sub_101FA20  +
mov esi eax +
test esi esi +
jnz loc_1021DD2  +
push 1  +
push eax  +
mov eax offset WindowName +
push eax  +
push 18h  +
pop eax  +
push eax  +
mov eax offset aReviewslidesbe +
push eax  +
lea eax [ebp+var_A14] +
push eax  +
lea eax [ebp+var_A20] +
push eax  +
call sub_101FA20  +
mov esi eax +
test esi esi +
jnz loc_1021DD2  +
mov eax [ebx] +
cmp [eax+3Ch] esi +
jz loc_10216B0  +
cmp [eax+0Ch] esi +
jz loc_10216B0  +
push 1  +
xor eax eax +
push eax  +
mov eax offset WindowName +
push eax  +
push 16h  +
pop eax  +
push eax  +
mov eax offset aReviewslidesen +
push eax  +
lea eax [ebp+var_A14] +
push eax  +
lea eax [ebp+var_A20] +
push eax  +
call sub_101FA20  +
jmp loc_10216C8  +
push 1  +
push 16h  +
pop eax  +
push eax  +
mov eax offset aReviewslidesen +
push eax  +
lea eax [ebp+var_A14] +
push eax  +
call sub_101F9E0  +
mov esi eax +
test esi esi +
jnz loc_1021DD2  +
push 1  +
push eax  +
mov eax offset WindowName +
push eax  +
push 17h  +
pop eax  +
push eax  +
mov eax offset aProblemstepbeg +
push eax  +
lea eax [ebp+var_A14] +
push eax  +
lea eax [ebp+var_A20] +
push eax  +
call sub_101FA20  +
mov esi eax +
test esi esi +
jnz loc_1021DD2  +
mov eax [ebp+var_A14] +
mov [ebp+var_A44] eax +
mov eax [ebp+var_A10] +
mov [ebp+var_A40] eax +
lea eax [ebp+var_A54] +
push eax  +
push ebx  +
call sub_1020F0C  +
mov esi eax +
test esi esi +
jnz loc_1021DD2  +
mov eax [ebx] +
mov ecx [eax+8] +
mov edx [ecx] +
mov dword ptr [ebp+var_A24] 1 +
mov [ebp+cchMultiByte] edx +
cmp edx ecx +
jz loc_1021CB8  +
cmp dword ptr [eax+40h] 0 +
jz loc_1021768  +
mov ecx [eax+18h] +
test ecx ecx +
jz loc_1021768  +
push dword ptr [eax+0Ch]  +
push dword ptr [ebp+var_A24]  +
call ecx  +
mov eax [ebp+var_A44] +
mov edi [ebp+cchMultiByte] +
mov [ebp+var_A14] eax +
mov eax [ebp+var_A40] +
mov [ebp+var_A10] eax +
lea eax [ebp+var_A54] +
push eax  +
push dword ptr [ebp+var_A24]  +
push edi  +
push ebx  +
call sub_1021184  +
mov esi eax +
test esi esi +
jnz loc_1021DD2  +
push dword ptr [ebp+var_A24]  +
lea eax [ebp+TimeStr] +
push dword ptr [ebp+var_A24]  +
push offset aNameProblemste  +
push 400h  +
push eax  +
call sub_101D67B  +
lea ecx [ebp+TimeStr] +
mov eax ecx +
add esp 14h +
lea edx [eax+2] +
mov si [eax] +
inc eax  +
inc eax  +
test si si +
jnz loc_10217D4  +
push 1  +
sub eax edx +
sar eax 1 +
push eax  +
push ecx  +
push 11h  +
pop eax  +
push eax  +
mov eax offset aProblemstepanc +
push eax  +
lea eax [ebp+var_A14] +
push eax  +
lea eax [ebp+var_A20] +
push eax  +
call sub_101FA20  +
mov esi eax +
test esi esi +
jnz loc_1021DD2  +
push 1  +
push eax  +
mov eax offset WindowName +
push eax  +
push 10h  +
pop eax  +
push eax  +
mov eax offset aProblemsteptit +
push eax  +
lea eax [ebp+var_A14] +
push eax  +
lea eax [ebp+var_A20] +
push eax  +
call sub_101FA20  +
push dword ptr [edi+10h]  +
lea eax [ebp+var_A20] +
push dword ptr [edi+0Ch]  +
push eax  +
call sub_101F94E  +
mov esi eax +
test esi esi +
jnz loc_1021DD2  +
mov edi dword ptr [ebp+var_A24] +
cmp edi 1 +
jbe loc_1021879  +
lea eax [edi-1] +
push eax  +
push offset aDivClassTopdiv  +
lea eax [ebp+TimeStr] +
push 400h  +
push eax  +
call sub_101D67B  +
add esp 10h +
jmp loc_1021892  +
push offset aAClassDisabled  +
lea eax [ebp+TimeStr] +
push 400h  +
push eax  +
call sub_101D67B  +
add esp 0Ch +
lea edx [ebp+TimeStr] +
mov eax edx +
lea esi [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_102189D  +
push 1  +
sub eax esi +
sar eax 1 +
push eax  +
push edx  +
push 1Dh  +
pop eax  +
push eax  +
mov eax offset aProblemsteppre +
push eax  +
push 1Fh  +
pop eax  +
push eax  +
mov eax offset aProblemstepp_0 +
push eax  +
lea eax [ebp+var_A14] +
push eax  +
lea eax [ebp+var_A20] +
push eax  +
call sub_101FA8C  +
mov esi eax +
test esi esi +
jnz loc_1021DD2  +
mov eax [ebx] +
cmp edi [eax+0Ch] +
jnb loc_1021906  +
lea eax [edi+1] +
push eax  +
push offset aATitleNextHref  +
lea eax [ebp+TimeStr] +
push 400h  +
push eax  +
call sub_101D67B  +
add esp 10h +
jmp loc_102191F  +
push offset aAClassDisabled  +
lea eax [ebp+TimeStr] +
push 400h  +
push eax  +
call sub_101D67B  +
add esp 0Ch +
lea edx [ebp+TimeStr] +
mov eax edx +
lea esi [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_102192A  +
push 1  +
sub eax esi +
sar eax 1 +
push eax  +
push edx  +
push [ebp+var_A88]  +
mov eax offset aProblemstepnex +
push eax  +
push 1Bh  +
pop eax  +
push eax  +
mov eax offset aProblemstepn_0 +
push eax  +
lea eax [ebp+var_A14] +
push eax  +
lea eax [ebp+var_A20] +
push eax  +
call sub_101FA8C  +
mov esi eax +
test esi esi +
jnz loc_1021DD2  +
push edi  +
push offset aD  +
lea eax [ebp+TimeStr] +
push 400h  +
push eax  +
call sub_101D67B  +
lea ecx [ebp+TimeStr] +
mov eax ecx +
add esp 10h +
lea edx [eax+2] +
mov si [eax] +
inc eax  +
inc eax  +
test si si +
jnz loc_1021994  +
push 1  +
sub eax edx +
sar eax 1 +
push eax  +
push ecx  +
push 17h  +
pop eax  +
push eax  +
mov eax offset aProblemstepind +
push eax  +
lea eax [ebp+var_A14] +
push eax  +
lea eax [ebp+var_A20] +
push eax  +
call sub_101FA20  +
mov esi eax +
test esi esi +
jnz loc_1021DD2  +
mov edi [ebp+cchMultiByte] +
push 200h  +
lea eax [ebp+TimeStr] +
push eax  +
add edi 0C4h +
push edi  +
call sub_101FC37  +
mov esi eax +
test esi esi +
jnz loc_1021DD2  +
lea edx [ebp+TimeStr] +
mov eax edx +
lea esi [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_1021A00  +
push 1  +
sub eax esi +
sar eax 1 +
push eax  +
push edx  +
push 16h  +
pop eax  +
push eax  +
mov eax offset aProblemstepdat +
push eax  +
lea eax [ebp+var_A14] +
push eax  +
lea eax [ebp+var_A20] +
push eax  +
call sub_101FA20  +
mov esi eax +
test esi esi +
jnz loc_1021DD2  +
push 200h  +
lea eax [ebp+TimeStr] +
push eax  +
push edi  +
call sub_101FCBE  +
mov esi eax +
test esi esi +
jnz loc_1021DD2  +
lea edx [ebp+TimeStr] +
mov eax edx +
lea esi [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_1021A60  +
sub eax esi +
push 1  +
sar eax 1 +
push eax  +
push edx  +
push [ebp+var_A80]  +
mov eax offset aProblemsteptim +
push eax  +
lea eax [ebp+var_A14] +
push eax  +
lea eax [ebp+var_A20] +
push eax  +
call sub_101FA20  +
mov esi eax +
test esi esi +
jnz loc_1021DD2  +
push 1  +
push eax  +
mov eax offset WindowName +
push eax  +
push [ebp+var_A70]  +
mov eax offset aProblemstepdes +
push eax  +
lea eax [ebp+var_A14] +
push eax  +
lea eax [ebp+var_A20] +
push eax  +
call sub_101FA20  +
mov esi eax +
test esi esi +
jnz loc_1021DD2  +
mov edi [ebp+cchMultiByte] +
push dword ptr [edi+10h]  +
lea eax [ebp+var_A20] +
push dword ptr [edi+0Ch]  +
push eax  +
call sub_101F94E  +
mov esi eax +
test esi esi +
jnz loc_1021DD2  +
mov eax [edi+58h] +
mov esi [edi+54h] +
mov ecx [edi+8Ch] +
test eax eax +
jz loc_1021B6D  +
cmp ecx 64h +
jle loc_1021B6D  +
cmp ecx 2F4h +
jge loc_1021B28  +
push ecx  +
push offset aStyleWidthDpx  +
lea eax [ebp+var_A0C] +
push 400h  +
push eax  +
call sub_101D67B  +
add esp 10h +
jmp loc_1021B31  +
xor eax eax +
mov [ebp+var_A0C] ax +
push esi  +
lea eax [ebp+var_A0C] +
push eax  +
push esi  +
push offset aAHrefWsImgClas  +
lea eax [ebp+TimeStr] +
push 400h  +
push eax  +
call sub_101D67B  +
lea ecx [ebp+TimeStr] +
mov eax ecx +
add esp 18h +
lea edx [eax+2] +
mov si [eax] +
inc eax  +
inc eax  +
test si si +
jnz loc_1021B5E  +
jmp loc_1021C34  +
mov eax [ebx] +
cmp dword ptr [eax+38h] 0 +
jz loc_1021BFF  +
lea eax [ebp+var_A6C] +
push eax  +
push 2EAh  +
push edi  +
push ebx  +
call sub_1020797  +
mov esi eax +
test esi esi +
jnz loc_1021DD2  +
lea eax [ebp+var_A3C] +
push eax  +
call sub_101F76F  +
lea eax [ebx+0BD0h] +
push eax  +
lea eax [ebx+8B0h] +
push eax  +
push offset aPIWsWsIP  +
lea eax [ebp+var_A3C] +
push esi  +
push eax  +
call sub_102049D  +
mov esi eax +
add esp 14h +
test esi esi +
jnz loc_1021DD2  +
push [ebp+var_A68]  +
lea eax [ebp+var_A3C] +
push [ebp+var_A6C]  +
push eax  +
call sub_101F8C8  +
mov esi eax +
test esi esi +
jnz loc_1021DD2  +
mov ecx [ebp+var_A3C] +
mov eax [ebp+var_A38] +
jmp loc_1021C38  +
lea eax [ebx+8B0h] +
push eax  +
push offset aDivClassConten  +
lea eax [ebp+TimeStr] +
push 400h  +
push eax  +
call sub_101D67B  +
lea ecx [ebp+TimeStr] +
mov eax ecx +
add esp 10h +
lea edx [eax+2] +
mov si [eax] +
inc eax  +
inc eax  +
test si si +
jnz loc_1021C2A  +
sub eax edx +
sar eax 1 +
push 1  +
push eax  +
push ecx  +
push [ebp+var_A78]  +
mov eax offset aProblemstepscr +
push eax  +
push 21h  +
pop eax  +
push eax  +
mov eax offset aProblemsteps_0 +
push eax  +
lea eax [ebp+var_A14] +
push eax  +
lea eax [ebp+var_A20] +
push eax  +
call sub_101FA8C  +
mov esi eax +
test esi esi +
jnz loc_1021DD2  +
push 1  +
push eax  +
mov eax offset WindowName +
push eax  +
push 15h  +
pop eax  +
push eax  +
mov eax offset aProblemstepend +
push eax  +
lea eax [ebp+var_A14] +
push eax  +
lea eax [ebp+var_A20] +
push eax  +
call sub_101FA20  +
mov esi eax +
test esi esi +
jnz loc_1021DD2  +
mov ecx [edi] +
mov eax [ebx] +
inc dword ptr [ebp+var_A24]  +
mov [ebp+cchMultiByte] ecx +
cmp ecx [eax+8] +
jnz loc_1021750  +
mov eax [ebx] +
cmp dword ptr [eax+40h] 0 +
jz loc_1021CCF  +
mov ecx [eax+18h] +
test ecx ecx +
jz loc_1021CCF  +
mov eax [eax+0Ch] +
push eax  +
inc eax  +
push eax  +
call ecx  +
mov eax [ebp+var_A44] +
push 1  +
mov [ebp+var_A14] eax +
mov eax [ebp+var_A40] +
push 15h  +
mov [ebp+var_A10] eax +
pop eax  +
push eax  +
mov eax offset aProblemstepend +
push eax  +
lea eax [ebp+var_A14] +
push eax  +
call sub_101F9E0  +
mov esi eax +
test esi esi +
jnz loc_1021DD2  +
push 1  +
push eax  +
mov eax offset WindowName +
push eax  +
push 12h  +
pop eax  +
push eax  +
mov eax offset aDetailstext +
push eax  +
lea eax [ebp+var_A14] +
push eax  +
lea eax [ebp+var_A20] +
push eax  +
call sub_101FA20  +
mov esi eax +
test esi esi +
jnz loc_1021DD2  +
push [ebp+var_A50]  +
lea eax [ebp+var_A20] +
push [ebp+var_A54]  +
push eax  +
call sub_101F94E  +
mov esi eax +
test esi esi +
jnz loc_1021DD2  +
push [ebp+var_A10]  +
lea eax [ebp+var_A20] +
push [ebp+var_A14]  +
push eax  +
call sub_101F8C8  +
mov esi eax +
test esi esi +
jnz loc_1021DD2  +
push 9  +
pop ecx  +
lea edi [ebp+var_AB0] +
stos   +
mov eax [ebp+var_A20] +
mov [ebp+var_AA4] eax +
mov eax [ebp+var_A1C] +
add eax eax +
mov [ebp+var_AA0] eax +
xor eax eax +
inc eax  +
mov [ebp+var_A98] eax +
mov [ebp+var_A94] eax +
lea eax [ebp+var_AB0] +
push eax  +
push dword ptr [ebx+4]  +
mov [ebp+var_AAC] offset aTextHtml +
mov [ebp+var_AA8] offset aMain_htm +
call sub_1020034  +
mov esi eax +
test esi esi +
jnz $+2  +
lea eax [ebp+var_A60] +
push eax  +
call sub_101F747  +
lea eax [ebp+var_A54] +
push eax  +
call sub_101F747  +
lea eax [ebp+var_A20] +
push eax  +
call sub_101F747  +
lea eax [ebp+var_A6C] +
push eax  +
call sub_101F747  +
lea eax [ebp+var_A3C] +
push eax  +
call sub_101F747  +
xor edi edi +
cmp [ebp+lpMultiByteStr] edi +
jz loc_1021E24  +
push [ebp+lpMultiByteStr]  +
call ds:UnmapViewOfFile  +
cmp [ebp+lpMem] edi +
jz loc_1021E40  +
push [ebp+lpMem]  +
push edi  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
cmp [ebp+var_A48] edi +
jz loc_1021E60  +
cmp esi edi +
jnz loc_1021E60  +
mov eax [ebx] +
cmp [eax+24h] edi +
jz loc_1021E60  +
lea eax [ebp+hObject] +
push eax  +
call ds:DeleteFileW  +
mov ecx [ebp+var_4] +
pop edi  +
mov eax esi +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_101BC5D  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 8FCh +
mov eax dword_1030118 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_4] +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
push 14h  +
mov [ebp+var_8AC] eax +
pop eax  +
mov [ebp+var_8C4] eax +
lea eax [ebp+var_89C] +
push eax  +
mov edi offset aSlideredirect +
mov [ebp+var_8D4] 13h +
mov [ebp+var_8CC] 17h +
call sub_101F727  +
lea eax [ebp+var_8A8] +
push eax  +
call sub_101F727  +
lea eax [ebp+var_8C0] +
push eax  +
call sub_101F727  +
cmp [ebp+arg_C] 0 +
mov eax [esi+8] +
mov [ebp+var_890] eax +
mov eax [esi+0Ch] +
mov [ebp+var_88C] eax +
mov [ebp+var_888] offset aPslide04d_htm +
jnz loc_1021F0E  +
mov [ebp+var_888] offset aSlide04d_htm +
cmp [ebp+arg_C] 0 +
mov ebx 400h +
jnz loc_1021FB0  +
mov ecx [esi] +
mov eax dword ptr [ebp+arg_8] +
cmp eax [ecx+0Ch] +
jnb loc_1021F5E  +
inc eax  +
push eax  +
push [ebp+var_888]  +
lea eax [ebp+var_84] +
push 80h  +
push eax  +
call sub_100C705  +
lea eax [ebp+var_84] +
push eax  +
push offset aMetaHttpEquivR  +
lea eax [ebp+var_484] +
push ebx  +
push eax  +
call sub_101D67B  +
add esp 20h +
jmp loc_1021F67  +
xor eax eax +
mov [ebp+var_484] ax +
lea edx [ebp+var_484] +
mov eax edx +
lea ecx [eax+2] +
mov [ebp+var_8B0] ecx +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_1021F78  +
sub eax [ebp+var_8B0] +
push 1  +
sar eax 1 +
push eax  +
push edx  +
push 14h  +
pop eax  +
push eax  +
push edi  +
lea eax [ebp+var_890] +
push eax  +
lea eax [ebp+var_89C] +
push eax  +
call sub_101FA20  +
mov edi eax +
test edi edi +
jnz loc_10224F3  +
mov ecx [esi] +
mov eax dword ptr [ebp+arg_8] +
cmp eax [ecx+0Ch] +
jnb loc_1022025  +
cmp [ebp+arg_C] 0 +
push eax  +
lea eax [ebp+var_84] +
jz loc_1021FE8  +
push offset aSlide04d_htm  +
push 80h  +
push eax  +
call sub_100C705  +
lea eax [esi+658h] +
push eax  +
lea ecx [ebp+var_84] +
push ecx  +
push eax  +
jmp loc_1022059  +
push offset aPslide04d_htm  +
push 80h  +
push eax  +
call sub_100C705  +
lea eax [esi+590h] +
push eax  +
lea ecx [ebp+var_84] +
push ecx  +
push eax  +
lea eax [esi+400h] +
push eax  +
push offset aAClassSlidemes  +
lea eax [ebp+var_484] +
push ebx  +
push eax  +
call sub_101D67B  +
add esp 2Ch +
jmp loc_102206E  +
cmp [ebp+arg_C] 0 +
lea edi [esi+720h] +
jnz loc_1022037  +
lea edi [esi+4C8h] +
push 1  +
push [ebp+var_888]  +
lea eax [ebp+var_84] +
push 80h  +
push eax  +
call sub_100C705  +
push edi  +
lea eax [ebp+var_84] +
push eax  +
push edi  +
push offset aAClassSlideTit  +
lea eax [ebp+var_484] +
push ebx  +
push eax  +
call sub_101D67B  +
add esp 28h +
lea edx [ebp+var_484] +
mov eax edx +
lea edi [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_1022079  +
push 1  +
sub eax edi +
sar eax 1 +
push eax  +
push edx  +
push 13h  +
pop eax  +
push eax  +
mov eax offset aSlideloading +
push eax  +
lea eax [ebp+var_890] +
push eax  +
lea eax [ebp+var_89C] +
push eax  +
call sub_101FA20  +
mov edi eax +
test edi edi +
jnz loc_10224F3  +
mov eax dword ptr [ebp+arg_8] +
cmp eax 1 +
jbe loc_10220F1  +
dec eax  +
push eax  +
push [ebp+var_888]  +
lea eax [ebp+var_84] +
push 80h  +
push eax  +
call sub_100C705  +
lea eax [ebp+var_84] +
push eax  +
push offset aAClassSlideT_0  +
lea eax [ebp+var_484] +
push ebx  +
push eax  +
call sub_101D67B  +
add esp 20h +
jmp loc_1022106  +
push offset aAClassSlideDis  +
lea eax [ebp+var_484] +
push ebx  +
push eax  +
call sub_101D67B  +
add esp 0Ch +
lea edx [ebp+var_484] +
mov eax edx +
lea edi [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_1022111  +
push 1  +
sub eax edi +
sar eax 1 +
push eax  +
push edx  +
push 17h  +
pop eax  +
push eax  +
mov eax offset aSlidepreviouse +
push eax  +
push 19h  +
pop eax  +
push eax  +
mov eax offset aSlidepreviousb +
push eax  +
lea eax [ebp+var_890] +
push eax  +
lea eax [ebp+var_89C] +
push eax  +
call sub_101FA8C  +
mov edi eax +
test edi edi +
jnz loc_10224F3  +
mov ecx [esi] +
mov eax dword ptr [ebp+arg_8] +
cmp eax [ecx+0Ch] +
jnb loc_1022195  +
inc eax  +
push eax  +
push [ebp+var_888]  +
lea eax [ebp+var_84] +
push 80h  +
push eax  +
call sub_100C705  +
lea eax [ebp+var_84] +
push eax  +
push offset aAClassSlideT_1  +
lea eax [ebp+var_484] +
push ebx  +
push eax  +
call sub_101D67B  +
add esp 20h +
jmp loc_10221AA  +
push offset aAClassSlideDis  +
lea eax [ebp+var_484] +
push ebx  +
push eax  +
call sub_101D67B  +
add esp 0Ch +
lea edx [ebp+var_484] +
mov eax edx +
lea edi [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_10221B5  +
push 1  +
sub eax edi +
sar eax 1 +
push eax  +
push edx  +
push [ebp+var_8D4]  +
mov eax offset aSlidenextend +
push eax  +
push 15h  +
pop eax  +
push eax  +
mov eax offset aSlidenextbegin +
push eax  +
lea eax [ebp+var_890] +
push eax  +
lea eax [ebp+var_89C] +
push eax  +
call sub_101FA8C  +
mov edi eax +
test edi edi +
jnz loc_10224F3  +
push dword ptr [ebp+arg_8]  +
lea eax [ebp+var_484] +
push offset aD  +
push ebx  +
push eax  +
call sub_101D67B  +
lea ecx [ebp+var_484] +
mov eax ecx +
add esp 10h +
lea edx [eax+2] +
mov di [eax] +
inc eax  +
inc eax  +
test di di +
jnz loc_102221D  +
sub eax edx +
push 1  +
sar eax 1 +
push eax  +
push ecx  +
push [ebp+var_8CC]  +
mov eax offset aProblemstepind +
push eax  +
lea eax [ebp+var_890] +
push eax  +
lea eax [ebp+var_89C] +
push eax  +
call sub_101FA20  +
mov edi eax +
test edi edi +
jnz loc_10224F3  +
push 1  +
push eax  +
mov eax offset WindowName +
push eax  +
push 1Dh  +
pop eax  +
push eax  +
mov eax offset aProblemstepdes +
push eax  +
lea eax [ebp+var_890] +
push eax  +
lea eax [ebp+var_89C] +
push eax  +
call sub_101FA20  +
mov edi eax +
test edi edi +
jnz loc_10224F3  +
mov eax [ebp+var_8AC] +
push dword ptr [eax+10h]  +
push dword ptr [eax+0Ch]  +
lea eax [ebp+var_89C] +
push eax  +
call sub_101F94E  +
mov edi eax +
test edi edi +
jnz loc_10224F3  +
mov eax [ebp+var_8AC] +
mov ecx [eax+54h] +
mov edx [eax+8Ch] +
mov edi [eax+90h] +
mov dword ptr [ebp+var_8B4] ecx +
mov ecx [eax+58h] +
test ecx ecx +
jz loc_1022335  +
cmp edx 64h +
jle loc_1022335  +
cmp edx edi +
lea eax [ebp+var_884] +
jge loc_10222E3  +
push edi  +
push offset aStyleHeight90M  +
jmp loc_10222E9  +
push edx  +
push offset aStyleWidth85Ma  +
push ebx  +
push eax  +
call sub_101D67B  +
add esp 10h +
push dword ptr [ebp+var_8B4]  +
lea eax [ebp+var_884] +
push eax  +
push dword ptr [ebp+var_8B4]  +
lea eax [ebp+var_484] +
push offset aAHrefWsImgAlig  +
push ebx  +
push eax  +
call sub_101D67B  +
lea ecx [ebp+var_484] +
mov eax ecx +
add esp 18h +
lea edx [eax+2] +
mov di [eax] +
inc eax  +
inc eax  +
test di di +
jnz loc_1022326  +
jmp loc_102241D  +
mov ecx [esi] +
cmp dword ptr [ecx+38h] 0 +
jz loc_10223EC  +
lea ecx [ebp+var_8C0] +
push ecx  +
push 2F8h  +
push eax  +
push esi  +
call sub_1020797  +
mov edi eax +
test edi edi +
jnz loc_10224F3  +
lea eax [ebp+var_8A8] +
push eax  +
call sub_101F76F  +
lea eax [esi+0BD0h] +
push eax  +
lea eax [esi+8B0h] +
push eax  +
push offset aTableCellpad_0  +
push [ebp+var_8A4]  +
lea eax [ebp+var_8A8] +
push eax  +
call sub_102049D  +
mov edi eax +
add esp 14h +
test edi edi +
jnz loc_10224F3  +
push [ebp+var_8BC]  +
lea eax [ebp+var_8A8] +
push [ebp+var_8C0]  +
push eax  +
call sub_101F8C8  +
mov edi eax +
test edi edi +
jnz loc_10224F3  +
push 12h  +
pop ecx  +
push ecx  +
mov eax offset aTdTrTable +
push eax  +
lea eax [ebp+var_8A8] +
push eax  +
call sub_101F8C8  +
mov edi eax +
test edi edi +
jnz loc_10224F3  +
mov ecx [ebp+var_8A8] +
mov eax [ebp+var_8A4] +
jmp loc_1022421  +
lea eax [esi+8B0h] +
push eax  +
push offset aDivClassSliden  +
lea eax [ebp+var_484] +
push ebx  +
push eax  +
call sub_101D67B  +
lea ecx [ebp+var_484] +
mov eax ecx +
add esp 10h +
lea edx [eax+2] +
mov di [eax] +
inc eax  +
inc eax  +
test di di +
jnz loc_1022413  +
sub eax edx +
sar eax 1 +
xor ebx ebx +
inc ebx  +
push ebx  +
push eax  +
push ecx  +
push [ebp+var_8C4]  +
mov eax offset aScreenshotend +
push eax  +
push 16h  +
pop eax  +
push eax  +
mov eax offset aScreenshotbegi +
push eax  +
lea eax [ebp+var_890] +
push eax  +
lea eax [ebp+var_89C] +
push eax  +
call sub_101FA8C  +
mov edi eax +
test edi edi +
jnz loc_10224F3  +
push [ebp+var_88C]  +
lea eax [ebp+var_89C] +
push [ebp+var_890]  +
push eax  +
call sub_101F8C8  +
mov edi eax +
test edi edi +
jnz loc_10224F3  +
push dword ptr [ebp+arg_8]  +
lea eax [ebp+var_84] +
push [ebp+var_888]  +
push 80h  +
push eax  +
call sub_100C705  +
add esp 10h +
xor eax eax +
push 9  +
pop ecx  +
lea edi [ebp+var_8FC] +
stos   +
mov eax [ebp+var_89C] +
mov [ebp+var_8F0] eax +
mov eax [ebp+var_898] +
add eax eax +
mov [ebp+var_8EC] eax +
lea eax [ebp+var_84] +
mov [ebp+var_8F4] eax +
lea eax [ebp+var_8FC] +
push eax  +
push dword ptr [esi+4]  +
mov [ebp+var_8F8] offset aTextHtml +
mov [ebp+var_8E4] ebx +
mov [ebp+var_8E0] ebx +
call sub_1020034  +
mov edi eax +
test edi edi +
jnz $+2  +
lea eax [ebp+var_89C] +
push eax  +
call sub_101F747  +
lea eax [ebp+var_8A8] +
push eax  +
call sub_101F747  +
lea eax [ebp+var_8C0] +
push eax  +
call sub_101F747  +
mov ecx [ebp+var_4] +
mov eax edi +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_101BC5D  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax 146Ch +
call __alloca_probe  +
mov eax dword_1030118 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
push 9  +
pop edi  +
xor ebx ebx +
push 1080h  +
lea eax [ebp+var_146C] +
push ebx  +
push eax  +
mov [ebp+uID] 899h +
mov [ebp+var_3E8] ebx +
mov [ebp+var_3E4] 89Ah +
mov [ebp+var_3E0] 1 +
mov [ebp+var_3DC] 89Bh +
mov [ebp+var_3D8] 2 +
mov [ebp+var_3D4] 89Dh +
mov [ebp+var_3D0] 3 +
mov [ebp+var_3CC] 89Ch +
mov [ebp+var_3C8] 4 +
mov [ebp+var_3C4] 89Eh +
mov [ebp+var_3C0] 5 +
mov [ebp+var_3BC] 89Fh +
mov [ebp+var_3B8] 6 +
mov [ebp+var_3B4] 8A0h +
mov [ebp+var_3B0] 7 +
mov [ebp+var_3AC] 8A1h +
mov [ebp+var_3A8] 8 +
mov [ebp+var_3A4] 8A2h +
mov [ebp+var_3A0] edi +
mov [ebp+var_39C] 8A3h +
mov [ebp+var_398] 0Ah +
mov [ebp+var_394] 8A4h +
mov [ebp+var_390] 0Bh +
mov [ebp+var_38C] 8A5h +
mov [ebp+var_388] 0Ch +
mov [ebp+var_384] 8A6h +
mov [ebp+var_380] 0Dh +
mov [ebp+var_37C] 8A7h +
mov [ebp+var_378] 0Eh +
mov [ebp+var_374] 8A8h +
mov [ebp+var_370] 0Fh +
mov [ebp+var_36C] 8A9h +
mov [ebp+var_368] 10h +
mov [ebp+var_364] 8AAh +
mov [ebp+var_360] 11h +
mov [ebp+var_35C] 8ABh +
mov [ebp+var_358] 12h +
mov [ebp+var_354] 8ACh +
mov [ebp+var_350] 13h +
mov [ebp+var_34C] 8ADh +
mov [ebp+var_348] 14h +
call memset  +
add esp 0Ch +
lea eax [ebp+var_1464] +
push eax  +
mov [ebp+var_146C] esi +
call sub_101F727  +
lea eax [ebp+var_320] +
push eax  +
call sub_101F727  +
lea esi [ebp+Buffer] +
mov eax [ebp+var_146C] +
push 64h  +
push esi  +
push [ebp+ebx*8+uID]  +
push dword ptr [eax+1Ch]  +
call ds:LoadStringW  +
test eax eax +
jbe loc_10229F6  +
inc ebx  +
add esi 0C8h +
cmp ebx 15h +
jb loc_1022728  +
mov eax [ebp+var_146C] +
push dword ptr [eax]  +
push dword ptr [eax+4]  +
lea eax [ebp+var_310] +
push offset aWsS  +
push 208h  +
push eax  +
call sub_101D67B  +
add esp 14h +
test eax eax +
jl loc_1022A05  +
lea eax [ebp+var_310] +
push eax  +
lea eax [ebp+var_1468] +
push eax  +
call sub_101FEDD  +
mov esi eax +
test esi esi +
jnz loc_10229B7  +
lea eax [ebp+var_146C] +
push eax  +
call sub_1021363  +
mov esi eax +
test esi esi +
jnz loc_10229B7  +
mov ebx 0FDE9h +
push ebx  +
push eax  +
mov eax [ebp+var_146C] +
push 17h  +
push 835h  +
push dword ptr [eax+1Ch]  +
lea eax [ebp+var_320] +
push eax  +
call sub_10204BB  +
mov esi eax +
test esi esi +
jnz loc_10229B7  +
mov ecx edi +
lea edi [ebp+var_344] +
stos   +
mov eax [ebp+var_320] +
mov [ebp+var_338] eax +
mov eax [ebp+var_31C] +
add eax eax +
mov [ebp+var_334] eax +
lea eax [ebp+var_344] +
push eax  +
push [ebp+var_1468]  +
xor edi edi +
inc edi  +
mov [ebp+var_340] offset aTextCss +
mov [ebp+var_33C] offset aMain_css +
mov [ebp+var_32C] edi +
mov [ebp+var_328] edi +
call sub_1020034  +
mov esi eax +
test esi esi +
jnz loc_10229B7  +
mov eax [ebp+var_146C] +
xor ecx ecx +
cmp [eax+3Ch] ecx +
jz loc_10228CA  +
cmp [eax+0Ch] ecx +
jz loc_10228CA  +
push ebx  +
push ecx  +
push 17h  +
push 837h  +
push dword ptr [eax+1Ch]  +
lea eax [ebp+var_1464] +
push eax  +
call sub_10204BB  +
mov esi eax +
test esi esi +
jnz loc_10229B7  +
mov eax [ebp+var_146C] +
mov ecx [eax+8] +
mov ebx edi +
mov edi [ecx] +
cmp edi ecx +
jz loc_10228CA  +
push 1  +
push ebx  +
push edi  +
lea eax [ebp+var_146C] +
push eax  +
call sub_1021E78  +
mov esi eax +
test esi esi +
jnz loc_10229B7  +
push eax  +
push ebx  +
push edi  +
lea eax [ebp+var_146C] +
push eax  +
call sub_1021E78  +
mov esi eax +
test esi esi +
jnz loc_10229B7  +
mov edi [edi] +
mov eax [ebp+var_146C] +
inc ebx  +
cmp edi [eax+8] +
jnz loc_1022889  +
mov ecx [eax+8] +
mov ebx [ecx] +
cmp ebx ecx +
jz loc_102298B  +
mov esi [ebx+60h] +
mov ecx [ebx+54h] +
xor edx edx +
mov [ebp+lpFileName] esi +
cmp dx [esi] +
jz loc_1022980  +
cmp dx [ecx] +
jz loc_1022980  +
push ecx  +
push offset aWs_3  +
lea eax [ebp+var_108] +
push 104h  +
push eax  +
call sub_100C705  +
add esp 10h +
test eax eax +
jl loc_1022A05  +
push 9  +
pop ecx  +
xor eax eax +
lea edi [ebp+var_344] +
stos   +
lea eax [ebp+var_108] +
mov [ebp+var_33C] eax +
lea eax [ebp+var_344] +
push eax  +
push [ebp+var_1468]  +
mov [ebp+var_344] esi +
mov [ebp+var_340] offset aImageJpeg_0 +
mov [ebp+var_330] 1 +
call sub_1020034  +
mov esi eax +
test esi esi +
jnz loc_10229B7  +
push [ebp+lpFileName]  +
call ds:DeleteFileW  +
test eax eax +
jnz loc_102297A  +
call ds:GetLastError  +
mov eax [ebp+var_146C] +
mov ebx [ebx] +
cmp ebx [eax+8] +
jnz loc_10228D7  +
test [ebp+var_1458] 1 +
jz loc_10229A6  +
lea eax [ebp+var_146C] +
push eax  +
call sub_10206DF  +
mov esi eax +
test esi esi +
jnz loc_10229B7  +
push [ebp+var_1468]  +
call sub_1020360  +
mov esi eax +
test esi esi +
jnz $+2  +
lea eax [ebp+var_320] +
push eax  +
call sub_101F747  +
lea eax [ebp+var_1464] +
push eax  +
call sub_101F747  +
cmp [ebp+var_1468] 0 +
jz loc_10229E3  +
push [ebp+var_1468]  +
call sub_101F3B9  +
mov ecx [ebp+var_4] +
pop edi  +
mov eax esi +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_101BC5D  +
leave   +
retn 4  +
call ds:GetLastError  +
test eax eax +
jnz loc_1022A05  +
mov eax 54Fh +
mov esi eax +
jmp loc_10229B7  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
mov eax [esi+4] +
test al 1 +
jz loc_1022A45  +
test al 4 +
jz loc_1022A27  +
call sub_1023E25  +
test byte ptr [esi+4] 2 +
jz loc_1022A32  +
call sub_1023DF8  +
push lpCriticalSection  +
and dword_1036EB0 0 +
call ds:LeaveCriticalSection  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
and [ebp+lpMem] 0 +
cmp lpCriticalSection 0 +
jnz loc_1022AA3  +
push 18h  +
lea eax [ebp+lpMem] +
push eax  +
call sub_101CFA6  +
mov [ebp+var_8] eax +
cmp [ebp+var_8] 0 +
jz loc_1022A7D  +
jmp loc_1022B24  +
push [ebp+lpMem]  +
call ds:InitializeCriticalSection  +
push 0  +
push [ebp+lpMem]  +
push offset lpCriticalSection  +
call ds:InterlockedCompareExchange  +
mov [ebp+var_4] eax +
cmp [ebp+var_4] 0 +
jnz loc_1022AA3  +
and [ebp+lpMem] 0 +
push lpCriticalSection  +
call ds:EnterCriticalSection  +
call ds:GetCurrentThreadId  +
mov dword_1036EB0 eax +
mov eax [ebp+arg_0] +
mov eax [eax+4] +
or eax 1 +
mov ecx [ebp+arg_0] +
mov [ecx+4] eax +
push [ebp+arg_4]  +
call sub_1023D59  +
mov [ebp+var_C] eax +
cmp [ebp+var_C] 0 +
jnz loc_1022AE3  +
mov [ebp+var_8] 54Fh +
jmp loc_1022B24  +
mov eax [ebp+arg_0] +
mov eax [eax+4] +
or eax 2 +
mov ecx [ebp+arg_0] +
mov [ecx+4] eax +
mov eax [ebp+arg_0] +
mov ecx [ebp+arg_4] +
mov [eax] ecx +
call sub_1023D9C  +
mov [ebp+var_C] eax +
cmp [ebp+var_C] 0 +
jnz loc_1022B11  +
mov [ebp+var_8] 54Fh +
jmp loc_1022B24  +
mov eax [ebp+arg_0] +
mov eax [eax+4] +
or eax 4 +
mov ecx [ebp+arg_0] +
mov [ecx+4] eax +
and [ebp+var_8] 0 +
cmp [ebp+lpMem] 0 +
jz loc_1022B45  +
push [ebp+lpMem]  +
call ds:DeleteCriticalSection  +
push [ebp+lpMem]  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
mov eax [ebp+var_8] +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_0]  +
call ds:_mktemp  +
pop ecx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
xor eax eax +
test ecx ecx +
jz loc_1022B7F  +
cmp ecx 7FFFFFFFh +
jbe loc_1022B84  +
mov eax 80070057h +
test eax eax +
jl loc_1022BC8  +
mov eax [ebp+arg_0] +
push ebx  +
xor ebx ebx +
push esi  +
mov esi ecx +
test ecx ecx +
jz loc_1022BBB  +
mov edx [ebp+arg_8] +
push edi  +
mov edi 7FFFFFFEh +
sub edi ecx +
sub edx eax +
lea ecx [edi+esi] +
test ecx ecx +
jz loc_1022BB6  +
mov cl [edx+eax] +
test cl cl +
jz loc_1022BB6  +
mov [eax] cl +
inc eax  +
dec esi  +
jnz loc_1022BA2  +
pop edi  +
test esi esi +
jnz loc_1022BC1  +
dec eax  +
mov ebx 8007007Ah +
mov byte ptr [eax] 0 +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+8] +
push edi  +
lea edi [esi+110h] +
push offset a__1  +
push edi  +
call ds:strstr  +
pop ecx  +
pop ecx  +
cmp eax edi +
jnz loc_1022C05  +
lea eax [esi+112h] +
push eax  +
push 104h  +
push esi  +
call sub_1022B69  +
pop edi  +
xor eax eax +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax 18C8h +
call __alloca_probe  +
mov eax dword_1030118 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_4] +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
push dword ptr [esi]  +
mov [ebp+var_18C0] eax +
xor eax eax +
lea edi [ebp+var_18C8] +
stos   +
stos   +
xor eax eax +
mov [ebp+PathName] ax +
lea eax [ebp+var_18C8] +
push eax  +
call sub_1022A4F  +
mov edi eax +
test edi edi +
jnz loc_1022DE5  +
mov eax [esi+8] +
xor ecx ecx +
cmp cx [eax] +
jz loc_1022CAC  +
lea eax [ebp+PathName] +
push eax  +
mov edi 208h +
push edi  +
call ds:GetCurrentDirectoryW  +
test eax eax +
jz loc_1022C96  +
cmp eax edi +
jnb loc_1022C96  +
push dword ptr [esi+8]  +
call ds:SetCurrentDirectoryW  +
test eax eax +
jnz loc_1022CAC  +
call ds:GetLastError  +
test eax eax +
jnz loc_1022CA5  +
mov eax 54Fh +
mov edi eax +
jmp loc_1022DE5  +
test byte ptr [esi+0Ch] 1 +
jz loc_1022CDC  +
push dword ptr [esi+4]  +
call ds:DeleteFileA  +
test eax eax +
jnz loc_1022CDC  +
call ds:GetLastError  +
mov edi eax +
test edi edi +
jz loc_1022CDC  +
cmp edi 490h +
jz loc_1022CDC  +
cmp edi 2 +
jnz loc_1022DE5  +
mov edi 978h +
push edi  +
lea eax [ebp+var_18BC] +
push 0  +
push eax  +
call memset  +
or [ebp+var_1870] 0FFFFFFFFh +
add esp 0Ch +
mov [ebp+var_18BC] edi +
lea eax [ebp+var_108] +
mov [ebp+var_187C] eax +
mov edi 104h +
push edi  +
lea eax [ebp+var_310] +
push eax  +
push dword ptr [esi+4]  +
mov [ebp+var_18B8] 4 +
push 0  +
mov [ebp+var_1898] 5 +
mov [ebp+var_188C] 1 +
mov [ebp+var_1880] offset loc_1022BD1 +
call ds:SHLWAPI_216  +
test eax eax +
jg loc_1022D5A  +
mov edi 80004005h +
jmp loc_1022DE5  +
push 824h  +
lea eax [ebp+var_F44] +
push eax  +
lea eax [ebp+var_310] +
push eax  +
push 0FDE9h  +
call ds:SHUnicodeToAnsiCP  +
test eax eax +
jle loc_1022D50  +
xor esi esi +
lea eax [ebp+var_F44] +
mov [ebp+var_18B4] eax +
cmp [ebp+arg_8] esi +
jbe loc_1022DE3  +
mov eax [ebp+var_18C0] +
push dword ptr [eax+esi*4]  +
lea eax [ebp+var_108] +
push offset a__2  +
push offset dword_1005328  +
push edi  +
push eax  +
call sub_100C705  +
add esp 14h +
test eax eax +
jl loc_1022CA5  +
lea eax [ebp+var_108] +
mov [ebp+var_18B0] eax +
lea eax [ebp+var_18BC] +
push eax  +
call sub_1023F75  +
test eax eax +
jnz loc_1022E1B  +
or [ebp+var_1870] 0FFFFFFFFh +
inc esi  +
cmp esi [ebp+arg_8] +
jb loc_1022D8F  +
xor edi edi +
xor eax eax +
cmp ax [ebp+PathName] +
jz loc_1022DFD  +
lea eax [ebp+PathName] +
push eax  +
call ds:SetCurrentDirectoryW  +
lea eax [ebp+var_18C8] +
push eax  +
call sub_1022A0E  +
mov ecx [ebp+var_4] +
mov eax edi +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_101BC5D  +
leave   +
retn 0Ch  +
mov edi 3E4h +
jmp loc_1022DE5  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov edi [ebp+arg_4] +
lea eax [ebp+arg_0] +
push eax  +
lea eax [ebp+var_4] +
push eax  +
xor ebx ebx +
push 5  +
push 0FFFFFFFFh  +
mov [esi] ebx +
push ebx  +
mov [ebp+var_4] ebx +
mov [ebp+var_8] ebx +
mov [edi] ebx +
call WTSQuerySessionInformationW  +
test eax eax +
jnz loc_1022E6C  +
call ds:GetLastError  +
cmp eax ebx +
jnz loc_1022E68  +
mov eax 54Fh +
mov esi eax +
jmp loc_1022E94  +
lea eax [ebp+arg_0] +
push eax  +
lea eax [ebp+var_8] +
push eax  +
push 7  +
push 0FFFFFFFFh  +
push ebx  +
call WTSQuerySessionInformationW  +
test eax eax +
jz loc_1022E59  +
mov eax [ebp+var_4] +
mov [esi] eax +
mov eax [ebp+var_8] +
mov [ebp+var_4] ebx +
mov [edi] eax +
mov [ebp+var_8] ebx +
xor esi esi +
cmp [ebp+var_4] ebx +
jz loc_1022EA1  +
push [ebp+var_4]  +
call WTSFreeMemory  +
cmp [ebp+var_8] ebx +
jz loc_1022EAE  +
push [ebp+var_8]  +
call WTSFreeMemory  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
cmp dword ptr [esi+0D1Ch] 0 +
push edi  +
mov edi ds:CloseHandle +
mov dword ptr [esi+0D38h] 1 +
jz loc_1022F05  +
push dword ptr [esi+0D20h]  +
call ds:SetEvent  +
push 0FFFFFFFFh  +
push dword ptr [esi+0D1Ch]  +
call ds:WaitForSingleObject  +
push dword ptr [esi+0D1Ch]  +
call edi  +
mov eax [esi+0D20h] +
test eax eax +
jz loc_1022F12  +
push eax  +
call edi  +
mov eax [esi+0D24h] +
test eax eax +
jz loc_1022F1F  +
push eax  +
call edi  +
mov eax [esi+910h] +
mov [ebp+var_18] eax +
mov ebx 80000002h +
test eax eax +
jz loc_1022F4C  +
mov ecx [eax] +
and ecx ebx +
cmp ecx ebx +
jnz loc_1022F41  +
mov eax large ds:0 +
mov eax [ebp+var_18] +
mov ecx [eax] +
test cl 1 +
jnz loc_1022F4C  +
mov eax ecx +
jmp loc_1022F71  +
mov ecx [esi+90Ch] +
mov edx [esi+910h] +
add eax 4 +
shr ecx 5 +
lea ecx [edx+ecx*4] +
jmp loc_1022F6B  +
test byte ptr [eax] 1 +
jz loc_1022FD7  +
add eax 4 +
cmp eax ecx +
jb loc_1022F63  +
xor eax eax +
mov [ebp+lpMem] eax +
test eax eax +
jz loc_10230CF  +
mov edi [ebp+lpMem] +
test edi edi +
jz loc_1022FDB  +
mov eax [esi+90Ch] +
mov ecx eax +
or edx 0FFFFFFFFh +
and ecx 1Fh +
shl edx cl +
shr eax 5 +
mov ecx edi +
mov [ebp+var_10] edi +
and edx [ecx+4] +
mov ecx eax +
movzx eax dl +
add eax 0B15DCBh +
imul eax eax +
mov [ebp+arg_0] edx +
movzx edx dh +
add eax edx +
movzx edx byte ptr [ebp+arg_0+2] +
imul eax eax +
add eax edx +
movzx edx byte ptr [ebp+arg_0+3] +
imul eax eax +
add eax edx +
mov edx eax +
lea eax [ecx-1] +
mov ecx [esi+910h] +
and eax edx +
lea eax [ecx+eax*4] +
jmp loc_1022FE4  +
mov eax [eax] +
jmp loc_1022F71  +
mov eax [esi+910h] +
mov [ebp+var_10] eax +
mov ecx [ebp+var_10] +
mov [ebp+var_C] eax +
test ecx ecx +
jz loc_102300D  +
mov ecx [ecx] +
and ecx ebx +
cmp ecx ebx +
jnz loc_1022FFE  +
mov eax large ds:0 +
mov eax [ebp+var_C] +
mov ecx [ebp+var_10] +
mov ecx [ecx] +
test cl 1 +
jnz loc_102300D  +
mov [ebp+arg_0] ecx +
jmp loc_1023034  +
mov ecx [esi+90Ch] +
mov edx [esi+910h] +
add eax 4 +
shr ecx 5 +
lea ecx [edx+ecx*4] +
jmp loc_102302C  +
test byte ptr [eax] 1 +
jz loc_102309C  +
add eax 4 +
cmp eax ecx +
jb loc_1023024  +
and [ebp+arg_0] 0 +
mov eax [ebp+arg_0] +
mov [ebp+lpMem] eax +
mov eax [esi+90Ch] +
mov ecx eax +
or edx 0FFFFFFFFh +
and ecx 1Fh +
shl edx cl +
shr eax 5 +
mov ecx eax +
and edx [edi+4] +
movzx eax dl +
add eax 0B15DCBh +
imul eax eax +
mov [ebp+var_8] edx +
movzx edx dh +
add eax edx +
movzx edx byte ptr [ebp+var_8+2] +
imul eax eax +
add eax edx +
movzx edx byte ptr [ebp+var_8+3] +
imul eax eax +
add eax edx +
mov edx eax +
lea eax [ecx-1] +
mov ecx [esi+910h] +
and eax edx +
lea eax [ecx+eax*4] +
mov ecx [edi] +
and ecx ebx +
mov [ebp+var_24] eax +
cmp ecx ebx +
jnz loc_10230AB  +
mov eax large ds:0 +
mov eax [ebp+var_24] +
jmp loc_10230AB  +
mov eax [eax] +
mov [ebp+arg_0] eax +
jmp loc_1023034  +
mov ecx [eax] +
cmp ecx edi +
jz loc_10230F0  +
mov eax ecx +
test byte ptr [eax] 1 +
jz loc_10230A3  +
mov eax large ds:0 +
push edi  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
cmp [ebp+arg_0] 0 +
jnz loc_1022F7C  +
push esi  +
push 0  +
mov dword ptr [esi+0D3Ch] 1 +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
mov ecx [edi] +
mov [eax] ecx +
dec dword ptr [esi+908h]  +
or [edi] ebx +
jmp loc_10230B5  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1Ch +
mov eax [ebp+arg_4] +
and [ebp+lpMem] 0 +
and [ebp+hObject] 0 +
push ebx  +
mov ebx ds:GetWindowLongW +
push esi  +
mov esi [eax] +
push edi  +
mov edi [ebp+dwProcessId] +
push 0FFFFFFF0h  +
push edi  +
call ebx  +
test eax 10000000h +
jz loc_102332F  +
push 0FFFFFFECh  +
push edi  +
call ebx  +
test al 20h +
jnz loc_102332F  +
lea eax [ebp+dwProcessId] +
push eax  +
push edi  +
call ds:GetWindowThreadProcessId  +
mov [ebp+var_14] eax +
test eax eax +
jz loc_102332F  +
mov ecx [esi+90Ch] +
and ecx 1Fh +
or edx 0FFFFFFFFh +
shl edx cl +
xor eax eax +
mov ebx 0B15DCBh +
mov ecx edx +
and ecx edi +
mov [ebp+var_1C] edx +
mov [ebp+var_10] ecx +
test eax eax +
jnz loc_10231C7  +
mov eax [esi+90Ch] +
shr eax 5 +
mov [ebp+var_8] eax +
test eax eax +
jz loc_10231F7  +
movzx eax cl +
add eax ebx +
imul eax eax +
movzx edx ch +
add eax edx +
movzx edx byte ptr [ebp+var_10+2] +
imul eax eax +
add eax edx +
movzx edx byte ptr [ebp+var_10+3] +
imul eax eax +
add eax edx +
mov edx [ebp+var_8] +
dec edx  +
and edx eax +
mov eax [esi+910h] +
lea eax [eax+edx*4] +
jmp loc_10231C7  +
mov eax [eax+4] +
and eax [ebp+var_1C] +
cmp ecx eax +
mov eax [ebp+var_8] +
jz loc_10231D2  +
mov eax [eax] +
mov [ebp+var_8] eax +
test al 1 +
jz loc_10231BA  +
xor eax eax +
test eax eax +
jz loc_10231F7  +
cmp [eax+8] edi +
jnz loc_1023176  +
mov edx [eax+0Ch] +
cmp edx [ebp+var_14] +
jnz loc_1023176  +
mov edx [eax+10h] +
cmp edx [ebp+dwProcessId] +
jnz loc_1023176  +
mov dword ptr [eax+14h] 1 +
jmp loc_102332F  +
mov eax [ebp+arg_4] +
mov ecx [eax+104h] +
and [ebp+var_8] 0 +
test ecx ecx +
jbe loc_1023223  +
lea ecx [eax+4] +
mov edx [ebp+dwProcessId] +
cmp [ecx] edx +
jz loc_1023223  +
inc [ebp+var_8]  +
mov edx [ebp+var_8] +
add ecx 4 +
cmp edx [eax+104h] +
jb loc_102320B  +
mov eax [eax+104h] +
cmp [ebp+var_8] eax +
jb loc_102328A  +
push [ebp+dwProcessId]  +
push 0  +
push 410h  +
call ds:OpenProcess  +
mov [ebp+hObject] eax +
test eax eax +
jnz loc_102326F  +
call ds:GetLastError  +
test eax eax +
jnz loc_1023254  +
mov eax 54Fh +
cmp eax 5 +
jnz loc_1023309  +
mov eax [ebp+arg_4] +
mov dword ptr [eax+108h] 1 +
jmp loc_1023309  +
mov eax [ebp+arg_4] +
mov ecx [eax+104h] +
cmp ecx 40h +
jnb loc_102328A  +
mov edx [ebp+dwProcessId] +
mov [eax+ecx*4+4] edx +
inc dword ptr [eax+104h]  +
push 18h  +
lea eax [ebp+lpMem] +
push eax  +
call sub_101CFA6  +
test eax eax +
jnz loc_1023309  +
mov eax [ebp+lpMem] +
mov ecx [ebp+var_14] +
mov [eax+4] edi +
mov [eax+8] edi +
mov [eax+0Ch] ecx +
mov ecx [ebp+dwProcessId] +
mov [eax+10h] ecx +
mov dword ptr [eax+14h] 1 +
mov ecx [esi+90Ch] +
mov edi ecx +
and ecx 1Fh +
or edx 0FFFFFFFFh +
shl edx cl +
shr edi 5 +
and edx [eax+4] +
movzx ecx dl +
add ecx ebx +
imul ecx ecx +
mov [ebp+arg_4] edx +
movzx edx dh +
add ecx edx +
movzx edx byte ptr [ebp+arg_4+2] +
imul ecx ecx +
add ecx edx +
movzx edx byte ptr [ebp+arg_4+3] +
imul ecx ecx +
add ecx edx +
dec edi  +
and edi ecx +
mov ecx [esi+910h] +
lea ecx [ecx+edi*4] +
mov edx [ecx] +
mov [eax] edx +
mov [ecx] eax +
inc dword ptr [esi+908h]  +
and [ebp+lpMem] 0 +
xor esi esi +
cmp [ebp+hObject] esi +
jz loc_1023319  +
push [ebp+hObject]  +
call ds:CloseHandle  +
cmp [ebp+lpMem] esi +
jz loc_102332F  +
push [ebp+lpMem]  +
push esi  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
pop edi  +
xor eax eax +
pop esi  +
inc eax  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 264h +
mov eax dword_1030118 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push ebx  +
push esi  +
mov [ebp+pObjectName] eax +
xor esi esi +
push edi  +
lea eax [ebp+var_22C] +
push eax  +
lea eax [ebp+var_228] +
push eax  +
mov [ebp+var_228] esi +
mov dword ptr [ebp+var_22C] esi +
mov [ebp+pSid1] esi +
mov [ebp+ReferencedDomainName] esi +
mov [ebp+hObject] esi +
mov [ebp+lpMem] esi +
mov [ebp+hMem] esi +
mov [ebp+pDacl] esi +
call sub_1022E27  +
mov ebx eax +
cmp ebx esi +
jnz loc_1023667  +
push [ebp+var_228]  +
lea eax [ebp+AccountName] +
push dword ptr [ebp+var_22C]  +
push offset aWsWs_1  +
push 208h  +
push eax  +
call sub_101D67B  +
add esp 14h +
cmp eax esi +
jge loc_10233DE  +
mov ebx eax +
jmp loc_1023667  +
lea eax [ebp+peUse] +
push eax  +
lea eax [ebp+ReturnLength] +
push eax  +
push esi  +
lea eax [ebp+dwBytes] +
push eax  +
push esi  +
lea eax [ebp+AccountName] +
push eax  +
push esi  +
mov [ebp+dwBytes] esi +
mov [ebp+ReturnLength] esi +
call ds:LookupAccountNameW  +
mov edi ds:GetLastError +
mov [ebp+TokenInformationLength] eax +
call edi  +
mov ebx eax +
cmp [ebp+TokenInformationLength] esi +
jnz loc_102365E  +
cmp ebx 7Ah +
jnz loc_102365E  +
push [ebp+dwBytes]  +
lea eax [ebp+pSid1] +
push eax  +
call sub_101CFA6  +
mov ebx eax +
cmp ebx esi +
jnz loc_1023667  +
mov ecx [ebp+ReturnLength] +
lea eax [ecx+ecx] +
cmp eax ecx +
ja loc_1023467  +
mov ebx 216h +
jmp loc_1023667  +
push eax  +
lea eax [ebp+ReferencedDomainName] +
push eax  +
call sub_101CFA6  +
mov ebx eax +
cmp ebx esi +
jnz loc_1023667  +
lea eax [ebp+peUse] +
push eax  +
lea eax [ebp+ReturnLength] +
push eax  +
push [ebp+ReferencedDomainName]  +
lea eax [ebp+dwBytes] +
push eax  +
push [ebp+pSid1]  +
lea eax [ebp+AccountName] +
push eax  +
push esi  +
call ds:LookupAccountNameW  +
test eax eax +
jnz loc_10234C5  +
call edi  +
cmp eax esi +
jnz loc_10233D7  +
mov eax 54Fh +
jmp loc_10233D7  +
lea eax [ebp+hObject] +
push eax  +
push esi  +
push 0F01FFh  +
call ds:GetCurrentThread  +
push eax  +
call ds:OpenThreadToken  +
test eax eax +
jnz loc_1023518  +
call edi  +
cmp eax esi +
jnz loc_10234EE  +
mov eax 54Fh +
mov ebx eax +
cmp eax 3F0h +
jnz loc_1023667  +
lea eax [ebp+hObject] +
push eax  +
push 0F01FFh  +
call ds:GetCurrentProcess  +
push eax  +
call ds:OpenProcessToken  +
test eax eax +
jz loc_10234B1  +
lea eax [ebp+ReturnLength] +
push eax  +
push esi  +
push esi  +
push 1  +
push [ebp+hObject]  +
call ds:GetTokenInformation  +
mov [ebp+TokenInformationLength] eax +
call edi  +
mov ebx eax +
cmp [ebp+TokenInformationLength] esi +
jnz loc_102365E  +
cmp ebx 7Ah +
jnz loc_102365E  +
mov eax [ebp+ReturnLength] +
push eax  +
mov [ebp+TokenInformationLength] eax +
lea eax [ebp+lpMem] +
push eax  +
call sub_101CFA6  +
mov ebx eax +
cmp ebx esi +
jnz loc_1023667  +
mov ebx [ebp+lpMem] +
lea eax [ebp+ReturnLength] +
push eax  +
push [ebp+TokenInformationLength]  +
push ebx  +
push 1  +
push [ebp+hObject]  +
call ds:GetTokenInformation  +
test eax eax +
jz loc_10234B1  +
push dword ptr [ebx]  +
push [ebp+pSid1]  +
call ds:EqualSid  +
test eax eax +
jz loc_10235B4  +
xor ebx ebx +
jmp loc_1023667  +
lea eax [ebp+hMem] +
push eax  +
push esi  +
lea eax [ebp+OldAcl] +
push eax  +
push esi  +
push esi  +
push 4  +
push 1  +
push [ebp+pObjectName]  +
call ds:GetNamedSecurityInfoW  +
mov ebx eax +
cmp ebx esi +
jnz loc_1023667  +
push 8  +
pop ecx  +
xor eax eax +
lea edi [ebp+pListOfExplicitEntries] +
stos   +
mov eax [ebp+pSid1] +
mov [ebp+pListOfExplicitEntries.Trustee.ptstrName] eax +
lea eax [ebp+pDacl] +
push eax  +
push [ebp+OldAcl]  +
lea eax [ebp+pListOfExplicitEntries] +
xor edi edi +
inc edi  +
push eax  +
push edi  +
mov [ebp+pListOfExplicitEntries.grfAccessPermissions] 1F01FFh +
mov [ebp+pListOfExplicitEntries.grfAccessMode] edi +
mov [ebp+pListOfExplicitEntries.grfInheritance] esi +
mov [ebp+pListOfExplicitEntries.Trustee.TrusteeForm] esi +
call ds:SetEntriesInAclW  +
mov ebx eax +
cmp ebx esi +
jnz loc_1023667  +
push esi  +
push [ebp+pDacl]  +
push esi  +
push esi  +
push 30000004h  +
push edi  +
push [ebp+pObjectName]  +
call ds:SetNamedSecurityInfoW  +
mov ebx eax +
cmp ebx esi +
jnz loc_1023667  +
jmp loc_10235AD  +
cmp ebx esi +
jnz loc_1023667  +
mov ebx 54Fh +
cmp [ebp+hObject] esi +
jz loc_102367B  +
push [ebp+hObject]  +
call ds:CloseHandle  +
mov edi ds:HeapFree +
cmp [ebp+lpMem] esi +
jz loc_1023699  +
push [ebp+lpMem]  +
push esi  +
call ds:GetProcessHeap  +
push eax  +
call edi  +
cmp [ebp+var_228] esi +
jz loc_10236AC  +
push [ebp+var_228]  +
call WTSFreeMemory  +
cmp dword ptr [ebp+var_22C] esi +
jz loc_10236BF  +
push dword ptr [ebp+var_22C]  +
call WTSFreeMemory  +
cmp [ebp+pSid1] esi +
jz loc_10236D7  +
push [ebp+pSid1]  +
push esi  +
call ds:GetProcessHeap  +
push eax  +
call edi  +
cmp [ebp+ReferencedDomainName] esi +
jz loc_10236EF  +
push [ebp+ReferencedDomainName]  +
push esi  +
call ds:GetProcessHeap  +
push eax  +
call edi  +
mov edi ds:LocalFree +
cmp [ebp+hMem] esi +
jz loc_1023705  +
push [ebp+hMem]  +
call edi  +
cmp [ebp+pDacl] esi +
jz loc_1023715  +
push [ebp+pDacl]  +
call edi  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
mov eax ebx +
xor ecx ebp +
pop ebx  +
call sub_101BC5D  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 148h +
push ebx  +
push esi  +
push edi  +
push 10Ch  +
xor edi edi +
lea eax [ebp+lParam] +
push edi  +
push eax  +
call memset  +
mov esi [ebp+arg_0] +
add esp 0Ch +
mov [ebp+lParam] esi +
mov ebx 0B15DCBh +
test edi edi +
jz loc_10237B3  +
mov eax [esi+90Ch] +
mov ecx eax +
or edx 0FFFFFFFFh +
shr eax 5 +
and ecx 1Fh +
shl edx cl +
mov ecx eax +
mov [ebp+var_10] edi +
and edx [edi+4] +
movzx eax dl +
add eax ebx +
imul eax eax +
mov [ebp+arg_0] edx +
movzx edx dh +
add eax edx +
movzx edx byte ptr [ebp+arg_0+2] +
imul eax eax +
add eax edx +
movzx edx byte ptr [ebp+arg_0+3] +
imul eax eax +
add eax edx +
mov edx eax +
lea eax [ecx-1] +
mov ecx [esi+910h] +
and eax edx +
lea eax [ecx+eax*4] +
jmp loc_10237BC  +
mov eax [esi+910h] +
mov [ebp+var_10] eax +
mov ecx [ebp+var_10] +
mov [ebp+var_C] eax +
test ecx ecx +
jz loc_10237E9  +
mov edx [ecx] +
mov ecx 80000002h +
and edx ecx +
cmp edx ecx +
jnz loc_10237DB  +
mov eax large ds:0 +
mov eax [ebp+var_C] +
mov ecx [ebp+var_10] +
mov ecx [ecx] +
test cl 1 +
jnz loc_10237E9  +
mov eax ecx +
jmp loc_102380E  +
mov ecx [esi+90Ch] +
mov edx [esi+910h] +
add eax 4 +
shr ecx 5 +
lea ecx [edx+ecx*4] +
jmp loc_1023808  +
test byte ptr [eax] 1 +
jz loc_102381D  +
add eax 4 +
cmp eax ecx +
jb loc_1023800  +
xor eax eax +
mov edi eax +
test eax eax +
jz loc_1023821  +
and dword ptr [eax+14h] 0 +
jmp loc_1023760  +
mov eax [eax] +
jmp loc_102380E  +
call ds:GetDesktopWindow  +
mov edi eax +
lea eax [ebp+dwProcessId] +
push eax  +
push edi  +
call ds:GetWindowThreadProcessId  +
test eax eax +
jz loc_102384A  +
mov eax [ebp+var_44] +
mov ecx [ebp+dwProcessId] +
mov [ebp+eax*4+var_144] ecx +
inc [ebp+var_44]  +
jmp loc_1023850  +
call ds:GetLastError  +
lea eax [ebp+lParam] +
push eax  +
push offset EnumFunc  +
push edi  +
call ds:EnumChildWindows  +
mov eax [esi+910h] +
mov [ebp+var_28] eax +
test eax eax +
jz loc_1023890  +
mov edx [eax] +
mov ecx 80000002h +
and edx ecx +
cmp edx ecx +
jnz loc_1023885  +
mov eax large ds:0 +
mov eax [ebp+var_28] +
mov ecx [eax] +
test cl 1 +
jnz loc_1023890  +
mov eax ecx +
jmp loc_10238B5  +
mov ecx [esi+90Ch] +
mov edx [esi+910h] +
add eax 4 +
shr ecx 5 +
lea ecx [edx+ecx*4] +
jmp loc_10238AF  +
test byte ptr [eax] 1 +
jz loc_1023918  +
add eax 4 +
cmp eax ecx +
jb loc_10238A7  +
xor eax eax +
mov [ebp+lpMem] eax +
test eax eax +
jz loc_1023A21  +
mov edi [ebp+lpMem] +
test edi edi +
jz loc_102391C  +
mov eax [esi+90Ch] +
mov ecx eax +
or edx 0FFFFFFFFh +
and ecx 1Fh +
shl edx cl +
shr eax 5 +
mov ecx edi +
mov [ebp+var_1C] edi +
and edx [ecx+4] +
mov ecx eax +
movzx eax dl +
add eax ebx +
imul eax eax +
mov [ebp+arg_0] edx +
movzx edx dh +
add eax edx +
movzx edx byte ptr [ebp+arg_0+2] +
imul eax eax +
add eax edx +
movzx edx byte ptr [ebp+arg_0+3] +
imul eax eax +
add eax edx +
mov edx eax +
lea eax [ecx-1] +
mov ecx [esi+910h] +
and eax edx +
lea eax [ecx+eax*4] +
jmp loc_1023925  +
mov eax [eax] +
jmp loc_10238B5  +
mov eax [esi+910h] +
mov [ebp+var_1C] eax +
mov ecx [ebp+var_1C] +
mov [ebp+var_18] eax +
test ecx ecx +
jz loc_1023953  +
mov edx [ecx] +
mov ecx 80000002h +
and edx ecx +
cmp edx ecx +
jnz loc_1023944  +
mov eax large ds:0 +
mov eax [ebp+var_18] +
mov ecx [ebp+var_1C] +
mov ecx [ecx] +
test cl 1 +
jnz loc_1023953  +
mov [ebp+arg_0] ecx +
jmp loc_102397A  +
mov ecx [esi+90Ch] +
mov edx [esi+910h] +
add eax 4 +
shr ecx 5 +
lea ecx [edx+ecx*4] +
jmp loc_1023972  +
test byte ptr [eax] 1 +
jz loc_10239EE  +
add eax 4 +
cmp eax ecx +
jb loc_102396A  +
and [ebp+arg_0] 0 +
cmp dword ptr [edi+14h] 0 +
mov eax [ebp+arg_0] +
mov [ebp+lpMem] eax +
jnz loc_1023A17  +
mov eax [esi+90Ch] +
mov ecx eax +
or edx 0FFFFFFFFh +
shr eax 5 +
and ecx 1Fh +
shl edx cl +
mov ecx eax +
and edx [edi+4] +
movzx eax dl +
add eax ebx +
imul eax eax +
mov [ebp+var_8] edx +
movzx edx dh +
add eax edx +
movzx edx byte ptr [ebp+var_8+2] +
imul eax eax +
add eax edx +
movzx edx byte ptr [ebp+var_8+3] +
imul eax eax +
add eax edx +
mov edx eax +
lea eax [ecx-1] +
mov ecx [esi+910h] +
and eax edx +
mov edx [edi] +
lea eax [ecx+eax*4] +
mov ecx 80000002h +
and edx ecx +
mov [ebp+var_34] eax +
cmp edx ecx +
jnz loc_10239FD  +
mov eax large ds:0 +
mov eax [ebp+var_34] +
jmp loc_10239FD  +
mov eax [eax] +
mov [ebp+arg_0] eax +
jmp loc_102397A  +
mov edx [eax] +
cmp edx edi +
jz loc_1023A32  +
mov eax edx +
test byte ptr [eax] 1 +
jz loc_10239F5  +
mov eax large ds:0 +
push edi  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
cmp [ebp+arg_0] 0 +
jnz loc_10238C0  +
mov eax [ebp+arg_4] +
mov ecx [ebp+var_40] +
pop edi  +
pop esi  +
mov [eax] ecx +
xor eax eax +
pop ebx  +
leave   +
retn 8  +
mov edx [edi] +
mov [eax] edx +
dec dword ptr [esi+908h]  +
or [edi] ecx +
jmp loc_1023A07  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
mov eax [esi+0D24h] +
push edi  +
mov [ebp+Handles] eax +
mov eax [esi+0D20h] +
push 0FFFFFFFFh  +
mov [ebp+var_4] eax +
xor ebx ebx +
push ebx  +
lea eax [ebp+Handles] +
xor edi edi +
push eax  +
inc edi  +
push 2  +
mov [esi+0D30h] edi +
call ds:WaitForMultipleObjects  +
cmp eax edi +
jz loc_1023AEC  +
cmp [esi+0D38h] ebx +
jnz loc_1023AEC  +
mov edi 1F4h +
lea eax [ebp+arg_0] +
push eax  +
push esi  +
call sub_102372D  +
test eax eax +
jnz loc_1023AC2  +
cmp [ebp+arg_0] ebx +
jz loc_1023AC2  +
push 30h  +
lea eax [esi+808h] +
push eax  +
lea eax [esi+8] +
push eax  +
push dword ptr [esi+4]  +
call ds:MessageBoxW  +
test eax eax +
jnz loc_1023AE9  +
call ds:GetLastError  +
push edi  +
push dword ptr [esi+0D20h]  +
call ds:WaitForSingleObject  +
cmp eax ebx +
jz loc_1023AE9  +
cmp eax 102h +
jz loc_1023AE1  +
push edi  +
call ds:Sleep  +
cmp [esi+0D38h] ebx +
jz loc_1023A8F  +
xor edi edi +
inc edi  +
mov [esi+0D34h] edi +
pop edi  +
mov [esi+0D18h] ebx +
pop esi  +
xor eax eax +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
push ebx  +
push esi  +
push edi  +
push 0D40h  +
lea eax [ebp+var_4] +
push eax  +
call sub_101CFA6  +
mov esi [ebp+var_4] +
mov edi eax +
test edi edi +
jnz loc_1023C33  +
lea eax [esi+908h] +
and dword ptr [eax] 0 +
lea edi [esi+914h] +
xor ebx ebx +
inc ebx  +
mov [eax+8] edi +
mov dword ptr [eax+4] 2000h +
lea ecx [edi+400h] +
or eax ebx +
cmp edi ecx +
jnb loc_1023B5F  +
sub ecx edi +
dec ecx  +
shr ecx 2 +
inc ecx  +
stos   +
mov eax [ebp+arg_0] +
mov ecx [eax] +
mov edi ds:LoadStringW +
mov [esi] ecx +
mov eax [eax+4] +
mov [esi+4] eax +
push 80h  +
lea eax [esi+808h] +
push eax  +
push 8AEh  +
mov [esi+0D28h] ebx +
push dword ptr [esi]  +
call edi  +
test eax eax +
jg loc_1023BA7  +
call ds:GetLastError  +
test eax eax +
jnz loc_1023BA0  +
mov eax 54Fh +
mov edi eax +
jmp loc_1023C33  +
push 400h  +
lea eax [esi+8] +
push eax  +
push 8AFh  +
push dword ptr [esi]  +
call edi  +
test eax eax +
jle loc_1023B91  +
mov edi ds:CreateEventW +
xor eax eax +
push eax  +
push eax  +
push ebx  +
push eax  +
call edi  +
mov [esi+0D20h] eax +
xor eax eax +
cmp [esi+0D20h] eax +
jz loc_1023B91  +
push eax  +
push eax  +
push ebx  +
push eax  +
call edi  +
mov [esi+0D24h] eax +
cmp dword ptr [esi+0D20h] 0 +
jz loc_1023B91  +
lea eax [esi+0D14h] +
push eax  +
xor eax eax +
push eax  +
push esi  +
push offset sub_1023A45  +
push eax  +
push eax  +
lea edi [esi+0D1Ch] +
call ds:CreateThread  +
mov [edi] eax +
test eax eax +
jz loc_1023B91  +
mov [esi+0D2Ch] ebx +
push dword ptr [esi+0D24h]  +
call ds:SetEvent  +
mov eax [ebp+arg_4] +
mov [eax] esi +
xor esi esi +
xor edi edi +
test esi esi +
jz loc_1023C3D  +
push esi  +
call sub_1022EBC  +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_0] +
xor eax eax +
test ebx ebx +
jz loc_1023D4F  +
push esi  +
push edi  +
push 5348h  +
push eax  +
push ebx  +
call memset  +
and dword ptr [ebx+1D0h] 0 +
add esp 0Ch +
or eax 0FFFFFFFFh +
mov [ebx+2Ch] eax +
mov [ebx+4] eax +
mov [ebx+8] eax +
mov [ebx+1348h] eax +
push 7  +
pop ecx  +
push 7  +
lea edx [ebx+2498h] +
mov dword ptr [ebx+134Ch] 1 +
mov edi edx +
lea eax [ebx+1398h] +
mov esi offset unk_1030898 +
movs   +
mov [edx] eax +
pop ecx  +
lea edx [ebx+1E84h] +
mov [ebx+249Ch] edx +
push 7  +
lea edi [ebx+24B4h] +
mov esi offset unk_10308B4 +
movs   +
mov [ebx+24B4h] eax +
pop ecx  +
lea eax [ebx+24D0h] +
mov edi eax +
mov [ebx+24B8h] edx +
mov esi offset unk_10308D0 +
movs   +
lea ecx [ebx+1C8Ch] +
mov [eax] ecx +
lea eax [ebx+2304h] +
mov [ebx+24D4h] eax +
push 7  +
lea eax [ebx+24ECh] +
pop ecx  +
mov edi eax +
mov esi offset unk_10308EC +
movs   +
lea ecx [ebx+1D80h] +
mov [eax] ecx +
lea eax [ebx+237Ch] +
mov [ebx+24F0h] eax +
lea eax [ebx+2508h] +
push 7  +
pop ecx  +
mov edi eax +
mov esi offset unk_1030908 +
movs   +
lea ecx [ebx+23FCh] +
mov [eax] ecx +
xor eax eax +
inc eax  +
pop edi  +
mov [ebx+5120h] eax +
mov dword ptr [ebx+5340h] offset sub_10244E5 +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword_1036E8C 0 +
jnz loc_1023D8E  +
call ds:TlsAlloc  +
mov dwTlsIndex eax +
cmp eax 0FFFFFFFFh +
jz loc_1023D8E  +
mov eax [ebp+arg_0] +
mov dword_1036E90 eax +
call sub_1024E79  +
mov dword_1036E8C 1 +
mov eax dword_1036E8C +
pop ebp  +
retn 4  +
***
mov edi edi +
push edi  +
xor edi edi +
cmp dword_1036E8C edi +
jz loc_1023DEF  +
push esi  +
push 5348h  +
push 40h  +
call ds:GlobalAlloc  +
mov esi eax +
cmp esi edi +
jz loc_1023DEE  +
push esi  +
push dwTlsIndex  +
call ds:TlsSetValue  +
push esi  +
test eax eax +
jz loc_1023DD8  +
call sub_1023C4B  +
mov edi eax +
jmp loc_1023DEE  +
call ds:GlobalHandle  +
mov esi eax +
push esi  +
call ds:GlobalUnlock  +
push esi  +
call ds:GlobalFree  +
pop esi  +
mov eax edi +
pop edi  +
retn   +
***
mov edi edi +
push esi  +
xor esi esi +
cmp dword_1036E8C esi +
jz loc_1023E1C  +
push dwTlsIndex  +
call ds:TlsFree  +
test eax eax +
jz loc_1023E1C  +
mov dword_1036E8C esi +
inc esi  +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
xor esi esi +
cmp dword_1036E8C esi +
jz loc_1023E6A  +
push dwTlsIndex  +
call ds:TlsGetValue  +
test eax eax +
jz loc_1023E6A  +
push eax  +
call ds:GlobalHandle  +
mov esi eax +
push esi  +
call ds:GlobalUnlock  +
push esi  +
call ds:GlobalFree  +
push 0  +
push dwTlsIndex  +
call ds:TlsSetValue  +
xor esi esi +
inc esi  +
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
push esi  +
mov eax 978h +
xor esi esi +
cmp [ecx] eax +
jnz loc_1023E9B  +
mov edx [ebp+arg_0] +
cmp [edx] eax +
jnz loc_1023E9B  +
push eax  +
push ecx  +
push edx  +
call memcpy  +
add esp 0Ch +
jmp loc_1023E9E  +
push 10h  +
pop esi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
xor ecx ecx +
cmp [esi+98h] ecx +
jnz loc_1023EE6  +
mov eax [esi+132Ch] +
cmp eax ecx +
jz loc_1023EE6  +
push dword ptr [esi+1330h]  +
push dword ptr [esi+1328h]  +
push ecx  +
push ecx  +
push ecx  +
push ecx  +
lea ecx [esi+121Ch] +
push ecx  +
call eax  +
mov [esi+98h] eax +
mov eax [esi+98h] +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
mov eax dword_1030118 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
mov esi ds:PeekMessageA +
push edi  +
xor edi edi +
jmp loc_1023F28  +
lea eax [ebp+Msg] +
push eax  +
call ds:TranslateMessage  +
lea eax [ebp+Msg] +
push eax  +
call ds:DispatchMessageA  +
push 1  +
push edi  +
push edi  +
push edi  +
lea eax [ebp+Msg] +
push eax  +
call esi  +
test eax eax +
jnz loc_1023F14  +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_101BC5D  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
call ds:GetLastError  +
dec eax  +
dec eax  +
jz loc_1023F69  +
sub eax 3 +
jz loc_1023F65  +
mov eax [ebp+arg_0] +
jmp loc_1023F6C  +
push 16h  +
jmp loc_1023F6B  +
push 0Dh  +
pop eax  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 988h +
mov eax dword_1030118 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push ebx  +
push esi  +
push edi  +
push dwTlsIndex  +
mov edi ds:TlsGetValue +
mov [ebp+var_988] eax +
call edi  +
mov esi eax +
xor ebx ebx +
cmp esi ebx +
jnz loc_1023FD7  +
call sub_1023D9C  +
test eax eax +
jnz loc_1023FC9  +
push 4  +
pop eax  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_101BC5D  +
leave   +
retn 4  +
push dwTlsIndex  +
call edi  +
mov esi eax +
cmp esi ebx +
jz loc_1023FB5  +
cmp [esi+94h] ebx +
jz loc_1023FE6  +
xor eax eax +
inc eax  +
mov [esi] eax +
jmp loc_1023FB8  +
push [ebp+var_988]  +
xor edi edi +
lea eax [ebp+var_97C] +
inc edi  +
mov [esi+94h] edi +
mov [esi+98h] ebx +
mov [esi+9Ch] ebx +
mov [esi+0A8h] ebx +
mov [esi+0ACh] ebx +
mov [esi+0A0h] ebx +
mov [esi+0B8h] ebx +
mov [esi+0BCh] ebx +
mov [esi+0B0h] ebx +
mov [esi+0C0h] ebx +
mov [esi+1334h] ebx +
mov [esi+133Ch] ebx +
mov [esi+121Ch] bl +
push eax  +
mov [ebp+var_97C] 978h +
call sub_1023E73  +
test eax eax +
jz loc_1024067  +
push 10h  +
pop eax  +
mov [esi] eax +
mov [esi+94h] ebx +
jmp loc_1023FB8  +
mov eax [ebp+var_948] +
mov [esi+1334h] eax +
mov eax [ebp+var_944] +
mov [esi+133Ch] eax +
cmp [ebp+var_974] ebx +
jz loc_1024057  +
push [ebp+var_974]  +
lea eax [esi+1D4h] +
push 824h  +
push eax  +
push ebx  +
call sub_1024EBD  +
push esi  +
call sub_1026448  +
mov [esi+1328h] ebx +
mov [esi+1340h] ebx +
mov eax [ebp+var_940] +
mov [esi+0C4h] eax +
mov eax [ebp+var_93C] +
mov [esi+0C8h] eax +
mov eax [ebp+var_964] +
mov [esi+1320h] eax +
mov eax [ebp+var_960] +
mov [esi+1324h] eax +
mov eax [ebp+var_96C] +
mov [esi+132Ch] eax +
mov eax [ebp+var_968] +
mov [esi+1330h] eax +
cmp [ebp+var_978] 2 +
jz loc_102411C  +
cmp [ebp+var_978] 3 +
jle loc_1024057  +
cmp [ebp+var_978] 5 +
jg loc_1024057  +
mov eax [ebp+var_934] +
mov [esi+0A8h] eax +
mov [esi+0ACh] ebx +
cmp [ebp+var_938] ebx +
jz loc_1024156  +
mov eax [ebp+var_970] +
cmp eax ebx +
jz loc_1024156  +
cmp [eax] bl +
jz loc_1024156  +
mov [esi+9Ch] edi +
mov eax [ebp+var_938] +
mov [esi+0B0h] eax +
lea eax [esi+1D4h] +
push eax  +
mov [ebp+var_980] ebx +
mov [ebp+var_984] ebx +
xor edi edi +
call sub_1029490  +
mov [esi+1358h] eax +
cmp eax ebx +
jnz loc_102417F  +
push esi  +
push 4  +
jmp loc_10241B2  +
cmp [ebp+hObject] 0FFFFFFFFh +
jnz loc_10241E0  +
push ebx  +
push 80h  +
push 4  +
push ebx  +
push 1  +
push 0C0000000h  +
push eax  +
call sub_1025354  +
mov [ebp+hObject] eax +
cmp eax 0FFFFFFFFh +
jnz loc_10241BB  +
push esi  +
push 12h  +
call sub_1023F4C  +
push eax  +
call sub_1026256  +
mov edi [esi] +
jmp loc_10241DC  +
call ds:GetLastError  +
cmp eax 0B7h +
jz loc_10241D2  +
mov [ebp+var_984] 1 +
mov [ebp+var_980] 1 +
cmp edi ebx +
jnz loc_102420A  +
mov eax [ebp+hObject] +
mov [esi+5344h] eax +
push esi  +
lea eax [ebp+var_97C] +
push eax  +
call sub_1026D54  +
mov ecx [ebp+hObject] +
mov edi eax +
mov eax [ebp+var_988] +
mov [eax+4Ch] ecx +
cmp [ebp+var_980] ebx +
jz loc_1024225  +
push [ebp+hObject]  +
call ds:CloseHandle  +
or [ebp+hObject] 0FFFFFFFFh +
cmp edi ebx +
jz loc_102423C  +
cmp [ebp+var_984] ebx +
jz loc_102423C  +
push dword ptr [esi+1358h]  +
call sub_10252F5  +
mov [esi] edi +
mov eax edi +
jmp loc_102405C  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push dwTlsIndex  +
call ds:TlsGetValue  +
mov esi eax +
xor eax eax +
cmp esi eax +
jz loc_10242C7  +
push edi  +
mov edi [esi+1320h] +
cmp edi eax +
jz loc_10242C6  +
mov ecx [ebp+arg_4] +
or ecx [ebp+arg_8] +
jz loc_102429A  +
push eax  +
push 64h  +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
call __allmul  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push edx  +
push eax  +
call __alldiv  +
cmp eax 64h +
jle loc_102429A  +
push 64h  +
pop eax  +
push dword ptr [esi+1324h]  +
push eax  +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call edi  +
test eax eax +
jz loc_10242C0  +
mov dword ptr [esi+98h] 1 +
push esi  +
call sub_1023EF6  +
pop edi  +
pop esi  +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push dwTlsIndex  +
call ds:TlsGetValue  +
mov esi eax +
test esi esi +
jz loc_1024370  +
push edi  +
mov edi [esi+132Ch] +
test edi edi +
jnz loc_10242FC  +
xor eax eax +
jmp loc_102436F  +
mov ecx [ebp+arg_4] +
test ecx ecx +
jnz loc_1024307  +
xor eax eax +
jmp loc_1024334  +
cmp ecx 186A0h +
jle loc_1024323  +
push ebx  +
mov eax ecx +
cdq   +
push 64h  +
pop ebx  +
idiv  ebx +
mov ebx eax +
mov eax [ebp+arg_8] +
cdq   +
idiv  ebx +
pop ebx  +
jmp loc_102432C  +
mov eax [ebp+arg_8] +
imul eax eax +
cdq   +
idiv  ecx +
cmp eax 64h +
jle loc_1024334  +
push 64h  +
pop eax  +
push dword ptr [esi+1330h]  +
mov [esi+1328h] eax +
push eax  +
mov eax ecx +
cdq   +
push edx  +
push eax  +
mov eax [ebp+arg_8] +
cdq   +
push edx  +
push eax  +
push [ebp+arg_0]  +
call edi  +
push [ebp+arg_0]  +
mov edi eax +
push 104h  +
lea eax [esi+121Ch] +
push eax  +
call sub_1022B69  +
push esi  +
call sub_1023EF6  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
mov eax [esi+60h] +
add eax [esi+24h] +
mov ecx [esi+20h] +
push edi  +
xor ebx ebx +
push ebx  +
push dword ptr [esi+44h]  +
lea edi [eax+ecx+1Eh] +
push dword ptr [esi+40h]  +
push [ebp+hFile]  +
call sub_1025228  +
and eax edx +
cmp eax 0FFFFFFFFh +
jnz loc_10243AF  +
push 2  +
pop eax  +
jmp loc_10243F6  +
mov eax [ebp+arg_C] +
mov ecx [eax+1380h] +
mov [esi+40h] ecx +
mov ecx [eax+1384h] +
mov [esi+44h] ecx +
mov ecx [esi+10h] +
add edi ecx +
mov ecx [esi+14h] +
adc ebx ecx +
test byte ptr [esi+36h] 8 +
jz loc_10243DA  +
add edi 10h +
adc ebx 0 +
add [eax+1380h] edi +
push eax  +
push ebx  +
adc [eax+1384h] ebx +
mov eax [ebp+arg_8] +
push edi  +
push dword ptr [eax]  +
push [ebp+hFile]  +
call sub_1025109  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 214h +
mov eax dword_1030118 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+lpsz] +
push ebx  +
push edi  +
mov edi [ebp+arg_4] +
push 104h  +
xor ebx ebx +
lea ecx [ebp+String2] +
push ecx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push eax  +
push 1  +
mov [ebp+var_214] ebx +
mov byte ptr [ebp+String2] bl +
call sub_102C705  +
cmp byte ptr [ebp+String2] bl +
jz loc_10244CA  +
mov [ebp+var_210] ebx +
push esi  +
lea esi [ebp+String1] +
jmp loc_102447A  +
cmp al 3Ah +
jz loc_1024480  +
cmp al 3Bh +
jz loc_1024480  +
push edi  +
mov [esi] al +
call ds:CharNextA  +
push esi  +
mov edi eax +
call ds:CharNextA  +
mov esi eax +
mov al [edi] +
cmp al bl +
jnz loc_102445E  +
mov [esi] bl +
cmp [edi] bl +
jnz loc_1024491  +
xor esi esi +
inc esi  +
mov [ebp+var_210] esi +
jmp loc_102449D  +
push edi  +
call ds:CharNextA  +
xor esi esi +
mov edi eax +
inc esi  +
lea eax [ebp+String2] +
push eax  +
lea eax [ebp+String1] +
push eax  +
call ds:lstrcmpiA  +
test eax eax +
jnz loc_10244C1  +
mov [ebp+var_210] esi +
mov [ebp+var_214] esi +
cmp [ebp+var_210] ebx +
jz loc_1024456  +
pop esi  +
mov ecx [ebp+var_4] +
mov eax [ebp+var_214] +
pop edi  +
xor ecx ebp +
pop ebx  +
call sub_101BC5D  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
mov eax dword_1030118 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+lpBuffer] +
push ebx  +
push esi  +
mov esi [ebp+arg_8] +
push edi  +
xor edi edi +
push edi  +
lea ecx [ebp+NumberOfBytesRead] +
push ecx  +
push [ebp+nNumberOfBytesToRead]  +
mov [ebp+var_C] eax +
push eax  +
push dword ptr [esi+2Ch]  +
call ds:ReadFile  +
test eax eax +
jz loc_1024522  +
mov ebx [ebp+NumberOfBytesRead] +
cmp ebx edi +
jnz loc_1024526  +
xor eax eax +
jmp loc_1024565  +
push esi  +
push ebx  +
push [ebp+var_C]  +
call sub_1024D7C  +
add [esi+30h] ebx +
mov [esi+5238h] eax +
adc [esi+34h] edi +
cmp [esi+5234h] edi +
jnz loc_1024552  +
push dword ptr [esi+34h]  +
push dword ptr [esi+30h]  +
push dword ptr [esi+3Ch]  +
push dword ptr [esi+38h]  +
jmp loc_1024557  +
push edi  +
push edi  +
push edi  +
push 64h  +
add esi 5130h +
push esi  +
call sub_102424A  +
mov eax ebx +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_101BC5D  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+arg_8] +
mov eax [esi+0B0h] +
add eax [esi+0B8h] +
push edi  +
xor ebx ebx +
xor edi edi +
cmp [ebp+arg_4] ebx +
jbe loc_1024614  +
mov ecx [ebp+arg_0] +
mov edx [esi+0BCh] +
cmp edx [esi+0ACh] +
jg loc_10245D5  +
jl loc_10245BC  +
mov edx [esi+0B8h] +
cmp edx [esi+0A8h] +
jnb loc_10245D5  +
mov dl [eax] +
mov [edi+ecx] dl +
inc eax  +
inc edi  +
add dword ptr [esi+0B8h] 1 +
adc [esi+0BCh] ebx +
cmp edi [ebp+arg_4] +
jb loc_102459E  +
cmp edi ebx +
jz loc_1024614  +
push esi  +
push edi  +
push ecx  +
call sub_1024D7C  +
add [esi+30h] edi +
mov [esi+5238h] eax +
adc [esi+34h] ebx +
cmp [esi+5234h] ebx +
jnz loc_1024603  +
push dword ptr [esi+34h]  +
push dword ptr [esi+30h]  +
push dword ptr [esi+3Ch]  +
push dword ptr [esi+38h]  +
jmp loc_1024608  +
push ebx  +
push ebx  +
push ebx  +
push 64h  +
add esi 5130h +
push esi  +
call sub_102424A  +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 248h +
mov eax dword_1030118 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_4] +
or [ebp+var_220] 0FFFFFFFFh +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
push dword ptr [esi+58h]  +
mov edi [ebp+arg_8] +
mov [ebp+var_22C] eax +
xor ebx ebx +
lea eax [edi+5130h] +
push 104h  +
push eax  +
mov [ebp+var_228] ebx +
mov [ebp+nNumberOfBytesToWrite] ebx +
mov [ebp+var_224] 0FFFFFFFDh +
mov [ebp+lpBuffer] ebx +
call sub_1022B69  +
lea eax [edi+1340h] +
mov ecx [eax] +
push ecx  +
push dword ptr [edi+1394h]  +
lea edx [ecx+1] +
mov [eax] edx +
lea eax [edi+5130h] +
push eax  +
call sub_10242D1  +
test eax eax +
jz loc_10246AE  +
push 9  +
pop eax  +
jmp loc_1024D66  +
push dword ptr [esi+58h]  +
call ds:lstrlenA  +
mov ecx [esi+58h] +
mov [esi+20h] eax +
xor edx edx +
cmp byte ptr [eax+ecx-1] 2Fh +
mov eax 0FFFFh +
setz dl  +
mov [esi+34h] ax +
push edi  +
lea eax [ebp+var_224] +
push eax  +
lea eax [ebp+var_228] +
push eax  +
mov [ebp+var_238] edx +
cmp [edi+0A0h] ebx +
jz loc_1024748  +
push ebx  +
push 1  +
call sub_1025C61  +
mov [ebp+var_238] ebx +
cmp [ebp+var_224] 0FFFFFFFEh +
mov [esi+8] eax +
jnz loc_1024726  +
cmp [ebp+var_220] 0FFFFFFFFh +
jnz loc_1024726  +
mov [ebp+var_238] 1 +
mov [ebp+var_224] ebx +
mov [ebp+var_220] ebx +
mov eax [edi+1350h] +
mov [edi+60h] ebx +
cmp eax ebx +
jz loc_1024787  +
push eax  +
push dword ptr [esi+48h]  +
call sub_1024402  +
test eax eax +
jz loc_1024787  +
mov [ebp+var_21C] ebx +
jmp loc_1024793  +
push dword ptr [esi+48h]  +
push 1  +
call sub_1025C61  +
cmp eax ebx +
jz loc_102476A  +
cmp [ebp+var_220] 0FFFFFFFFh +
jg loc_10246FB  +
jl loc_102476A  +
cmp [ebp+var_224] 0FFFFFFFEh +
jnb loc_10246FB  +
cmp [ebp+var_224] 0FFFFFFFDh +
jnz loc_1024780  +
cmp [ebp+var_220] 0FFFFFFFFh +
jz loc_10246FB  +
push 12h  +
jmp loc_10246A8  +
mov eax [edi+1348h] +
mov [ebp+var_21C] eax +
cmp [ebp+var_238] ebx +
jz loc_10247B3  +
or dword ptr [edi+2Ch] 0FFFFFFFFh +
mov [ebp+var_21C] ebx +
mov [ebp+var_224] ebx +
mov [ebp+var_220] ebx +
jmp loc_102480C  +
cmp [edi+0A0h] ebx +
jz loc_10247C1  +
or dword ptr [edi+2Ch] 0FFFFFFFFh +
jmp loc_102480C  +
push dword ptr [esi+48h]  +
lea eax [edi+523Ch] +
push 104h  +
push eax  +
call sub_1022B69  +
lea eax [edi+523Ch] +
push eax  +
push 1  +
call sub_1024DFC  +
push ebx  +
push 80h  +
push 3  +
push ebx  +
push 3  +
push 80000000h  +
lea eax [edi+523Ch] +
push eax  +
call ds:CreateFileA  +
mov [edi+2Ch] eax +
cmp eax 0FFFFFFFFh +
jz loc_1024780  +
cmp [edi+0A0h] ebx +
jz loc_1024828  +
mov eax [edi+0A8h] +
mov [edi+38h] eax +
mov eax [edi+0ACh] +
mov [edi+3Ch] eax +
jmp loc_1024836  +
push dword ptr [edi+2Ch]  +
call sub_10252A3  +
mov [edi+38h] eax +
mov [edi+3Ch] edx +
mov eax [ebp+var_224] +
mov edx [ebp+var_220] +
mov ecx eax +
or ecx edx +
jnz loc_102484E  +
mov [ebp+var_21C] ebx +
cmp [ebp+var_21C] 0FFFFFFFFh +
jnz loc_1024861  +
mov [ebp+var_21C] 8 +
push 2Dh  +
pop ecx  +
mov [esi] cx +
mov [esi+2] cx +
push 8  +
pop ecx  +
mov [esi+4] cx +
mov ecx [esi+8] +
shl ecx 10h +
mov [esi+0Ch] ecx +
mov [edi+5234h] ebx +
mov [edi+30h] ebx +
mov [edi+34h] ebx +
mov cx [esi+4] +
mov [esi+36h] cx +
mov ecx [ebp+var_21C] +
mov [esi+30h] ebx +
mov [esi+6] cx +
cmp ecx ebx +
jnz loc_10248AE  +
cmp edx ebx +
jl loc_10248AE  +
jg loc_10248AA  +
cmp eax ebx +
jb loc_10248AE  +
mov ecx edx +
jmp loc_10248B2  +
xor eax eax +
xor ecx ecx +
cmp edx ebx +
mov [esi+10h] eax +
mov [esi+14h] ecx +
jl loc_10248D0  +
jg loc_10248C6  +
cmp [ebp+var_224] ebx +
jb loc_10248D0  +
mov eax [ebp+var_224] +
mov ecx edx +
jmp loc_10248D4  +
xor eax eax +
xor ecx ecx +
mov [esi+18h] eax +
mov eax 0FFFFh +
mov [esi+1Ch] ecx +
cmp [esi+34h] ax +
jnz loc_10248F5  +
xor eax eax +
mov [esi+34h] ax +
mov [ebp+lpBuffer] 1 +
mov eax [ebp+var_228] +
mov [esi+38h] eax +
mov eax [edi+1380h] +
mov [esi+40h] eax +
mov eax [edi+1384h] +
mov [esi+44h] eax +
cmp [edi+0C4h] ebx +
jz loc_1024A1F  +
push dword ptr [esi+58h]  +
mov ebx 104h +
push ebx  +
lea eax [ebp+String] +
push eax  +
call sub_1022B69  +
push dword ptr [esi+48h]  +
lea eax [ebp+var_108] +
push ebx  +
push eax  +
call sub_1022B69  +
movzx eax word ptr [esi+0Ah] +
push dword ptr [edi+0C8h]  +
mov [ebp+var_114] eax +
movzx eax word ptr [esi+8] +
mov [ebp+var_110] eax +
mov eax [esi+38h] +
mov [ebp+var_10C] eax +
mov [ebp+var_244] eax +
lea eax [ebp+String] +
push eax  +
call dword ptr [edi+0C4h]  +
push dword ptr [esi+58h]  +
mov ebx ds:lstrlenA +
call ebx  +
inc eax  +
mov [ebp+var_23C] eax +
lea eax [ebp+String] +
push eax  +
call ebx  +
push dword ptr [esi+58h]  +
mov [ebp+var_248] eax +
call ebx  +
mov ecx [ebp+var_248] +
cmp ecx eax +
jle loc_10249C9  +
push dword ptr [esi+58h]  +
call free  +
pop ecx  +
lea eax [ebp+String] +
push eax  +
call ebx  +
mov ebx eax +
inc ebx  +
inc ebx  +
push ebx  +
call malloc  +
pop ecx  +
mov [esi+58h] eax +
jmp loc_10249CF  +
mov ebx [ebp+var_23C] +
mov eax [esi+58h] +
test eax eax +
jz loc_10249F0  +
lea ecx [ebp+String] +
push ecx  +
push ebx  +
push eax  +
call sub_1022B69  +
push dword ptr [esi+58h]  +
call ds:lstrlenA  +
mov [esi+20h] eax +
movzx eax word ptr [ebp+var_110] +
mov ecx [ebp+var_114] +
shl ecx 10h +
add eax ecx +
mov [esi+8] eax +
mov eax [ebp+var_244] +
xor eax [ebp+var_10C] +
and eax 27h +
xor eax [ebp+var_244] +
xor ebx ebx +
mov [esi+38h] eax +
push edi  +
push [ebp+var_22C]  +
push esi  +
call sub_102912B  +
cmp eax ebx +
jnz loc_1024D66  +
mov eax [esi+60h] +
add eax [esi+24h] +
mov ecx [esi+20h] +
lea eax [eax+ecx+1Eh] +
add [edi+1380h] eax +
mov eax [ebp+var_22C] +
push 1  +
adc [edi+1384h] ebx +
push ebx  +
push ebx  +
push dword ptr [eax]  +
call sub_1025228  +
push edi  +
push ebx  +
push ebx  +
mov [edi+30h] ebx +
mov [edi+34h] ebx +
call sub_1024D7C  +
cmp [ebp+var_21C] 9 +
mov [edi+5238h] eax +
jnz loc_1024AE7  +
mov eax [ebp+var_22C] +
push edi  +
push dword ptr [eax]  +
call sub_102B2D2  +
test eax eax +
jnz loc_1024AE0  +
cmp [ebp+lpBuffer] ebx +
jz loc_1024A9E  +
mov eax 0FFFFh +
mov [esi+34h] ax +
push edi  +
lea eax [ebp+var_21C] +
push eax  +
lea eax [esi+34h] +
push eax  +
call sub_102B33C  +
push edi  +
lea ebx [esi+4] +
push ebx  +
push 5  +
call sub_102BF83  +
mov ax [esi+36h] +
xor ax [ebx] +
push edi  +
and ax 6 +
xor [esi+36h] ax +
call sub_102BC98  +
push edi  +
mov ebx eax +
mov [ebp+var_23C] edx +
call sub_1029566  +
jmp loc_1024B53  +
push 4  +
jmp loc_10246A8  +
cmp [ebp+var_21C] 8 +
jnz loc_1024B63  +
mov eax [ebp+var_22C] +
push edi  +
push dword ptr [eax]  +
call sub_102B2D2  +
test eax eax +
jnz loc_1024AE0  +
cmp [ebp+lpBuffer] ebx +
jz loc_1024B13  +
mov eax 0FFFFh +
mov [esi+34h] ax +
push edi  +
lea eax [ebp+var_21C] +
push eax  +
lea eax [esi+34h] +
push eax  +
call sub_102A2D3  +
push edi  +
lea ebx [esi+4] +
push ebx  +
push 5  +
call sub_1029B01  +
mov ax [esi+36h] +
xor ax [ebx] +
push edi  +
and ax 6 +
xor [esi+36h] ax +
call sub_102991B  +
push edi  +
mov ebx eax +
mov [ebp+var_23C] edx +
call sub_1029566  +
mov eax [edi+4] +
mov ecx [ebp+var_22C] +
mov [ecx] eax +
jmp loc_1024C27  +
push 2000h  +
call malloc  +
pop ecx  +
mov [ebp+lpBuffer] eax +
cmp eax ebx +
jz loc_1024AE0  +
cmp [ebp+var_238] ebx +
jnz loc_1024C0F  +
push ebx  +
push ebx  +
push dword ptr [edi+3Ch]  +
lea eax [edi+5130h] +
push dword ptr [edi+38h]  +
push eax  +
call sub_102424A  +
jmp loc_1024BF9  +
push edi  +
push 2000h  +
push [ebp+lpBuffer]  +
cmp [edi+0A0h] ebx +
jz loc_1024BB9  +
call sub_102457B  +
jmp loc_1024BBE  +
call sub_10244E5  +
xor ecx ecx +
cmp ecx eax +
mov [ebp+nNumberOfBytesToWrite] eax +
sbb eax eax +
neg eax  +
cmp eax ebx +
jz loc_1024C01  +
push edi  +
push [ebp+var_22C]  +
xor eax eax +
push eax  +
push [ebp+nNumberOfBytesToWrite]  +
push [ebp+lpBuffer]  +
call sub_10294F6  +
cmp eax [ebp+nNumberOfBytesToWrite] +
jnz loc_1024C3C  +
xor eax eax +
cmp edx eax +
jnz loc_1024C3C  +
cmp [edi+98h] ebx +
jz loc_1024B9E  +
cmp [edi+98h] ebx +
jz loc_1024C0F  +
mov dword ptr [edi] 9 +
push [ebp+lpBuffer]  +
call free  +
mov eax [edi+34h] +
mov ebx [edi+30h] +
pop ecx  +
mov [ebp+var_23C] eax +
cmp dword ptr [edi] 0 +
jz loc_1024C58  +
push dword ptr [edi+2Ch]  +
call ds:CloseHandle  +
mov eax [edi] +
jmp loc_1024D66  +
push [ebp+lpBuffer]  +
call free  +
pop ecx  +
push dword ptr [edi+2Ch]  +
call ds:CloseHandle  +
push 0Ah  +
jmp loc_10246A8  +
mov eax [edi+2Ch] +
cmp eax 0FFFFFFFFh +
jz loc_1024C7C  +
cmp [ebp+nNumberOfBytesToWrite] 0FFFFFFFFh +
jnz loc_1024C70  +
push 0Bh  +
jmp loc_10246A8  +
cmp eax 0FFFFFFFFh +
jz loc_1024C7C  +
push eax  +
call ds:CloseHandle  +
add [edi+1380h] ebx +
mov ecx [edi+1380h] +
mov eax [ebp+var_23C] +
adc [edi+1384h] eax +
mov [ebp+lDistanceToMove] ecx +
mov ecx [edi+1384h] +
mov [ebp+var_23C] ecx +
mov ecx [edi+5238h] +
mov [esi+14h] eax +
mov [esi+0Ch] ecx +
mov [esi+10h] ebx +
mov eax [edi+30h] +
push 0  +
push dword ptr [esi+44h]  +
mov [esi+18h] eax +
mov eax [edi+34h] +
push dword ptr [esi+40h]  +
mov [esi+1Ch] eax +
mov eax [ebp+var_22C] +
push dword ptr [eax]  +
call sub_1025228  +
and eax edx +
cmp eax 0FFFFFFFFh +
jnz loc_1024CE7  +
push edi  +
push 0Bh  +
call sub_1026256  +
jmp loc_1024C69  +
mov ebx [esi+0Ch] +
mov eax 0FFF7h +
and [esi+4] ax +
mov ecx eax +
mov ax word ptr [ebp+var_21C] +
and [esi+36h] cx +
push 2Dh  +
mov [esi+6] ax +
pop eax  +
push edi  +
push [ebp+var_22C]  +
mov [esi+2] ax +
push esi  +
call sub_102912B  +
test eax eax +
jz loc_1024D21  +
mov [esi+0Ch] ebx +
jmp loc_1024D66  +
mov eax [edi] +
test eax eax +
jnz loc_1024D66  +
push eax  +
push [ebp+var_23C]  +
mov eax [ebp+var_22C] +
push [ebp+lDistanceToMove]  +
mov [esi+0Ch] ebx +
push dword ptr [eax]  +
call sub_1025228  +
and eax edx +
cmp eax 0FFFFFFFFh +
jz loc_1024CDD  +
cmp dword ptr [esi+24h] 0 +
jz loc_1024D64  +
mov eax [esi+4Ch] +
cmp eax [esi+50h] +
jz loc_1024D60  +
push eax  +
call free  +
pop ecx  +
and dword ptr [esi+24h] 0 +
xor eax eax +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_101BC5D  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
test ecx ecx +
jnz loc_1024D8D  +
or eax 0FFFFFFFFh +
jmp loc_1024DC2  +
cmp [ebp+arg_4] 0 +
mov eax [ebp+arg_8] +
mov eax [eax+5238h] +
not eax  +
jz loc_1024DC2  +
push esi  +
movsx edx byte ptr [ecx] +
dec [ebp+arg_4]  +
movzx esi al +
xor edx esi +
and edx 0FFh +
shr eax 8 +
xor eax dword_1030928[edx*4] +
inc ecx  +
cmp [ebp+arg_4] 0 +
jnz loc_1024D9F  +
pop esi  +
not eax  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+lpsz] +
jmp loc_1024DEC  +
mov cl [eax] +
test cl cl +
jz loc_1024DF0  +
cmp cl 5Ch +
jnz loc_1024DE5  +
mov byte ptr [eax] 2Fh +
push eax  +
call ds:CharNextA  +
test eax eax +
jnz loc_1024DD7  +
mov eax [ebp+lpsz] +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+lpsz] +
jmp loc_1024E1D  +
mov cl [eax] +
test cl cl +
jz loc_1024E21  +
cmp cl 2Fh +
jnz loc_1024E14  +
mov byte ptr [eax] 5Ch +
push eax  +
push [ebp+arg_0]  +
call sub_102C582  +
test eax eax +
jnz loc_1024E06  +
mov eax [ebp+lpsz] +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_8] +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_4] +
lea ebx [edi+eax*4-4] +
jmp loc_1024E63  +
mov eax ebx +
sub eax edi +
sar eax 2 +
shr eax 1 +
lea esi [edi+eax*4] +
push dword ptr [esi]  +
push [ebp+arg_0]  +
call [ebp+arg_C]  +
test eax eax +
jge loc_1024E5E  +
lea ebx [esi-4] +
jmp loc_1024E63  +
jle loc_1024E70  +
lea edi [esi+4] +
cmp ebx edi +
jnb loc_1024E41  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 10h  +
mov eax esi +
jmp loc_1024E69  +
***
xor eax eax +
mov byte_1036EC0[eax] al +
mov byte_1036FC0[eax] al +
inc eax  +
cmp eax 100h +
jb loc_1024E7B  +
push 61h  +
pop eax  +
mov cl al +
sub cl 20h +
mov byte_1036FC0[eax] cl +
inc eax  +
cmp eax 7Ah +
jle loc_1024E92  +
push 41h  +
pop eax  +
mov cl al +
add cl 20h +
mov byte_1036EC0[eax] cl +
inc eax  +
cmp eax 5Ah +
jle loc_1024EA6  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+lpsz] +
push edi  +
mov edi [ebp+arg_C] +
test edi edi +
jz loc_1024F2B  +
test esi esi +
jz loc_1024F2B  +
push ebx  +
xor ebx ebx +
inc ebx  +
jmp loc_1024F12  +
cmp ebx [ebp+arg_8] +
jnb loc_1024F17  +
mov al [edi] +
cmp al 22h +
jz loc_1024F07  +
mov [esi] al +
inc esi  +
inc ebx  +
cmp [ebp+arg_0] 1 +
jnz loc_1024F07  +
cmp ebx [ebp+arg_8] +
jnb loc_1024F07  +
movzx eax byte ptr [edi] +
push eax  +
call ds:IsDBCSLeadByte  +
test eax eax +
jz loc_1024F07  +
mov al [edi+1] +
mov [esi] al +
inc esi  +
inc ebx  +
push edi  +
push [ebp+arg_0]  +
call sub_102C582  +
mov edi eax +
cmp byte ptr [edi] 0 +
jnz loc_1024ED8  +
push [ebp+lpsz]  +
mov byte ptr [esi] 0 +
push [ebp+arg_0]  +
call sub_1024DFC  +
mov eax [ebp+lpsz] +
pop ebx  +
jmp loc_1024F2D  +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov edi [esi+14h] +
test edi edi +
jz loc_1024F63  +
mov eax [esi+10h] +
mov [edi+10h] eax +
test eax eax +
jz loc_1024F58  +
mov [eax+14h] edi +
jmp loc_1024F6E  +
mov eax [ebp+arg_4] +
mov [eax+1388h] edi +
jmp loc_1024F6E  +
mov edi [esi+10h] +
test edi edi +
jz loc_1024F6E  +
and dword ptr [edi+14h] 0 +
mov eax [esi] +
test eax eax +
jz loc_1024F7E  +
push eax  +
call free  +
and dword ptr [esi] 0 +
pop ecx  +
mov eax [esi+4] +
test eax eax +
jz loc_1024F90  +
push eax  +
call free  +
and dword ptr [esi+4] 0 +
pop ecx  +
push esi  +
call free  +
mov eax [ebp+arg_4] +
dec dword ptr [eax+1390h]  +
pop ecx  +
jnz loc_1024FA9  +
and dword ptr [eax+1388h] 0 +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
mov eax [eax] +
push dword ptr [eax+4]  +
mov eax [ebp+arg_0] +
mov eax [eax] +
push dword ptr [eax+4]  +
call ds:lstrcmpA  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
cmp dword ptr [edi+1388h] 0 +
jz loc_10250EC  +
mov eax [edi+1390h] +
xor ebx ebx +
inc ebx  +
cmp eax ebx +
jbe loc_10250EC  +
shl eax 2 +
push eax  +
call malloc  +
mov esi eax +
pop ecx  +
test esi esi +
jnz loc_1025019  +
push 4  +
pop eax  +
jmp loc_10250FD  +
mov eax [edi+1388h] +
test eax eax +
jz loc_1025031  +
mov ecx esi +
mov [ecx] eax +
mov eax [eax+14h] +
add ecx 4 +
test eax eax +
jnz loc_1025025  +
push offset sub_1024FB6  +
push 4  +
push dword ptr [edi+1390h]  +
push esi  +
call qsort  +
mov eax [esi] +
mov [edi+1388h] eax +
mov eax [esi] +
and dword ptr [eax+10h] 0 +
mov eax [esi] +
mov ecx [esi+4] +
mov [eax+14h] ecx +
mov eax [edi+1390h] +
add esp 10h +
dec eax  +
mov [ebp+arg_0] ebx +
cmp eax ebx +
jbe loc_1025096  +
mov ecx [ebp+arg_0] +
shl ecx 2 +
inc [ebp+arg_0]  +
lea eax [ecx+esi] +
mov edx [eax] +
lea ecx [esi+ecx+4] +
mov ebx [ecx-8] +
mov [edx+10h] ebx +
mov eax [eax] +
mov ecx [ecx] +
mov [eax+14h] ecx +
mov eax [edi+1390h] +
dec eax  +
cmp [ebp+arg_0] eax +
jb loc_102506B  +
mov eax [ebp+arg_0] +
lea eax [esi+eax*4] +
mov ecx [eax] +
mov edx [eax-4] +
mov [ecx+10h] edx +
mov eax [eax] +
and dword ptr [eax+14h] 0 +
push edi  +
call sub_1023EAA  +
test eax eax +
jnz loc_10250E5  +
mov ebx [edi+1388h] +
jmp loc_10250E1  +
mov eax [ebx+14h] +
test eax eax +
jz loc_10250E5  +
push dword ptr [eax+4]  +
push dword ptr [ebx+4]  +
call ds:lstrcmpiA  +
test eax eax +
jnz loc_10250DE  +
push edi  +
push ebx  +
call sub_1024F38  +
mov ebx eax +
jmp loc_10250E1  +
mov ebx [ebx+14h] +
test ebx ebx +
jnz loc_10250BC  +
push esi  +
call free  +
pop ecx  +
push edi  +
call sub_1023EAA  +
dec eax  +
neg eax  +
sbb eax eax +
and eax 0FFFFFFF7h +
add eax 9 +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 24h +
mov eax dword_1030118 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
mov [ebp+hFile] eax +
mov eax [ebp+arg_4] +
push ebx  +
push edi  +
mov [ebp+var_24] eax +
mov eax [ebp+arg_10] +
mov edi 2000h +
push edi  +
mov [ebp+var_14] eax +
call malloc  +
xor ebx ebx +
pop ecx  +
mov [ebp+lpBuffer] eax +
cmp eax ebx +
jnz loc_102514C  +
push 4  +
pop eax  +
jmp loc_1025213  +
push esi  +
xor esi esi +
mov [ebp+var_18] ebx +
mov ecx [ebp+arg_8] +
mov eax [ebp+arg_C] +
mov edx ecx +
and edx eax +
cmp edx 0FFFFFFFFh +
jz loc_102518A  +
cmp [ebp+var_18] eax +
jg loc_10251F5  +
jl loc_1025174  +
cmp esi ecx +
jnb loc_10251F5  +
sub ecx esi +
sbb eax [ebp+var_18] +
cmp eax ebx +
jg loc_102518A  +
jl loc_1025183  +
cmp ecx edi +
jnb loc_102518A  +
mov eax [ebp+arg_8] +
sub eax esi +
jmp loc_102518C  +
mov eax edi +
push ebx  +
lea ecx [ebp+nNumberOfBytesToWrite] +
push ecx  +
push eax  +
push [ebp+lpBuffer]  +
push [ebp+hFile]  +
call ds:ReadFile  +
test eax eax +
jz loc_10251E5  +
cmp [ebp+nNumberOfBytesToWrite] ebx +
jz loc_10251F5  +
push ebx  +
lea eax [ebp+NumberOfBytesWritten] +
push eax  +
push [ebp+nNumberOfBytesToWrite]  +
push [ebp+lpBuffer]  +
push [ebp+var_24]  +
call ds:WriteFile  +
test eax eax +
jz loc_1025206  +
mov eax [ebp+NumberOfBytesWritten] +
cmp eax [ebp+nNumberOfBytesToWrite] +
jnz loc_1025206  +
push [ebp+var_14]  +
call sub_1023EAA  +
mov eax [ebp+var_14] +
cmp [eax+98h] ebx +
jnz loc_1025202  +
add esi [ebp+NumberOfBytesWritten] +
adc [ebp+var_18] ebx +
jmp loc_1025152  +
push 0Bh  +
pop esi  +
push [ebp+lpBuffer]  +
call free  +
pop ecx  +
mov eax esi +
jmp loc_1025212  +
push [ebp+lpBuffer]  +
call free  +
pop ecx  +
xor eax eax +
jmp loc_1025212  +
push 9  +
jmp loc_10251E7  +
push [ebp+lpBuffer]  +
call free  +
pop ecx  +
push 0Ah  +
pop eax  +
pop esi  +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop ebx  +
call sub_101BC5D  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax dword_1030118 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_8] +
mov ecx [ebp+hFile] +
push ebx  +
push esi  +
push edi  +
push [ebp+dwMoveMethod]  +
mov edx eax +
mov [ebp+DistanceToMoveHigh] eax +
lea eax [ebp+DistanceToMoveHigh] +
push eax  +
push [ebp+lDistanceToMove]  +
or edi 0FFFFFFFFh +
push ecx  +
mov esi edi +
sar edx 1Fh +
call ds:SetFilePointer  +
mov ebx eax +
cmp ebx edi +
jnz loc_1025270  +
call ds:GetLastError  +
test eax eax +
jnz loc_1025289  +
mov eax [ebp+DistanceToMoveHigh] +
push 1  +
cdq   +
push 0  +
push edx  +
push eax  +
call __allmul  +
mov esi eax +
xor eax eax +
mov edi edx +
add esi ebx +
adc edi eax +
mov ecx [ebp+var_4] +
mov edx edi +
pop edi  +
mov eax esi +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_101BC5D  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 38h +
mov eax dword_1030118 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+hFile] +
push esi  +
push edi  +
lea ecx [ebp+FileInformation] +
push ecx  +
or edi 0FFFFFFFFh +
push eax  +
mov esi edi +
call ds:GetFileInformationByHandle  +
test eax eax +
jz loc_10252DC  +
mov eax [ebp+FileInformation.nFileSizeLow] +
mov esi [ebp+FileInformation.nFileSizeHigh] +
xor edi edi +
xor ecx ecx +
or edi eax +
or esi ecx +
mov ecx [ebp+var_4] +
mov eax edi +
pop edi  +
mov edx esi +
xor ecx ebp +
pop esi  +
call sub_101BC5D  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20Ch +
mov eax dword_1030118 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push 104h  +
lea ecx [ebp+FileName] +
push ecx  +
push eax  +
push 0FDE9h  +
call ds:SHLWAPI_216  +
test eax eax +
jl loc_102533F  +
lea eax [ebp+FileName] +
push eax  +
call ds:DeleteFileW  +
test eax eax +
jz loc_102533F  +
xor eax eax +
inc eax  +
jmp loc_1025341  +
xor eax eax +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_101BC5D  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20Ch +
mov eax dword_1030118 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push ebx  +
push esi  +
mov esi [ebp+arg_C] +
push edi  +
mov edi [ebp+arg_18] +
push 104h  +
lea ecx [ebp+FileName] +
push ecx  +
push eax  +
push 0FDE9h  +
or ebx 0FFFFFFFFh +
call ds:SHLWAPI_216  +
test eax eax +
jl loc_10253B1  +
push edi  +
push [ebp+dwFlagsAndAttributes]  +
lea eax [ebp+FileName] +
push [ebp+dwCreationDisposition]  +
push esi  +
push [ebp+dwShareMode]  +
push [ebp+dwDesiredAccess]  +
push eax  +
call ds:CreateFileW  +
mov ebx eax +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
mov eax ebx +
xor ecx ebp +
pop ebx  +
call sub_101BC5D  +
leave   +
retn 1Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20Ch +
mov eax dword_1030118 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push 104h  +
lea ecx [ebp+FileName] +
push ecx  +
push eax  +
push 0FDE9h  +
call ds:SHLWAPI_216  +
test eax eax +
jl loc_1025416  +
push [ebp+dwFileAttributes]  +
lea eax [ebp+FileName] +
push eax  +
call ds:SetFileAttributesW  +
test eax eax +
jz loc_1025416  +
xor eax eax +
inc eax  +
jmp loc_1025418  +
xor eax eax +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_101BC5D  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20Ch +
mov eax dword_1030118 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push esi  +
push 104h  +
lea ecx [ebp+FileName] +
push ecx  +
push eax  +
push 0FDE9h  +
or esi 0FFFFFFFFh +
call ds:SHLWAPI_216  +
test eax eax +
jl loc_1025472  +
lea eax [ebp+FileName] +
push eax  +
call ds:GetFileAttributesW  +
mov esi eax +
mov ecx [ebp+var_4] +
mov eax esi +
xor ecx ebp +
pop esi  +
call sub_101BC5D  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20Ch +
mov eax dword_1030118 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push esi  +
mov esi [ebp+arg_4] +
push 104h  +
lea ecx [ebp+PathName] +
push ecx  +
push eax  +
push 0FDE9h  +
call ds:SHLWAPI_216  +
test eax eax +
jl loc_10254D7  +
push esi  +
lea eax [ebp+PathName] +
push eax  +
call ds:CreateDirectoryW  +
test eax eax +
jz loc_10254D7  +
xor eax eax +
inc eax  +
jmp loc_10254D9  +
xor eax eax +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop esi  +
call sub_101BC5D  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20Ch +
mov eax dword_1030118 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push esi  +
mov esi [ebp+arg_8] +
push 104h  +
lea ecx [ebp+FileName] +
push ecx  +
push eax  +
push 0FDE9h  +
call ds:SHLWAPI_216  +
test eax eax +
jl loc_102553F  +
push esi  +
push [ebp+fInfoLevelId]  +
lea eax [ebp+FileName] +
push eax  +
call ds:GetFileAttributesExW  +
test eax eax +
jz loc_102553F  +
xor eax eax +
inc eax  +
jmp loc_1025541  +
xor eax eax +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop esi  +
call sub_101BC5D  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov ebx eax +
mov esi edx +
xor eax eax +
xor edi edi +
test esi esi +
jz loc_1025585  +
cmp [ebp+arg_4] eax +
jz loc_1025581  +
mov dl [ebx] +
test dl dl +
jz loc_1025581  +
mov [ecx] dl +
inc ecx  +
inc ebx  +
dec esi  +
dec [ebp+arg_4]  +
inc edi  +
test esi esi +
jnz loc_1025569  +
test esi esi +
jnz loc_102558C  +
dec ecx  +
dec edi  +
mov eax 8007007Ah +
mov byte ptr [ecx] 0 +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_1025598  +
mov [ecx] edi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 428h +
mov eax dword_1030118 +
xor eax ebp +
mov [ebp+var_4] eax +
mov ecx [ebp+arg_4] +
mov eax [ebp+arg_0] +
push ebx  +
push esi  +
mov esi ds:SHLWAPI_216 +
push edi  +
mov [ebp+hObject] ecx +
mov ecx [ebp+arg_8] +
push 104h  +
mov [ebp+var_418] ecx +
lea ecx [ebp+pszPath2] +
push ecx  +
push eax  +
mov edi 0FDE9h +
push edi  +
call esi  +
xor ebx ebx +
test eax eax +
jl loc_1025611  +
push 104h  +
lea eax [ebp+FileName] +
push eax  +
push [ebp+hObject]  +
push edi  +
call esi  +
mov [ebp+var_420] ebx +
test eax eax +
jge loc_102561B  +
mov [ebp+var_420] 0Eh +
lea eax [ebp+pszPath2] +
push eax  +
lea eax [ebp+FileName] +
push eax  +
call ds:PathIsSameRootW  +
mov esi ds:CreateFileW +
mov [ebp+var_424] eax +
mov edi 80h +
cmp eax ebx +
jz loc_1025684  +
mov eax [ebp+var_418] +
push dword ptr [eax+5344h]  +
call ds:CloseHandle  +
mov eax [ebp+var_418] +
or dword ptr [eax+5344h] 0FFFFFFFFh +
push ebx  +
push ebx  +
push 1  +
push ebx  +
lea eax [ebp+FileName] +
push eax  +
lea eax [ebp+pszPath2] +
push eax  +
call ds:ReplaceFileW  +
test eax eax +
jnz loc_102577A  +
push ebx  +
push edi  +
push 3  +
push ebx  +
push 3  +
push 80000000h  +
lea eax [ebp+FileName] +
push eax  +
call esi  +
mov [ebp+hObject] eax +
cmp eax 0FFFFFFFFh +
jnz loc_10256B0  +
push 0Ah  +
call sub_1023F4C  +
jmp loc_10257E4  +
push ebx  +
cmp [ebp+var_424] ebx +
jz loc_1025707  +
push edi  +
push 2  +
push ebx  +
push ebx  +
push 0C0000000h  +
lea eax [ebp+pszPath2] +
push eax  +
call esi  +
mov [ebp+var_428] eax +
cmp eax 0FFFFFFFFh +
jnz loc_102572C  +
push ebx  +
push edi  +
push 2  +
push ebx  +
push 1  +
push 0C0000000h  +
lea eax [ebp+pszPath2] +
push eax  +
call esi  +
mov [ebp+var_428] eax +
cmp eax 0FFFFFFFFh +
jnz loc_102572C  +
push [ebp+hObject]  +
call ds:CloseHandle  +
push 0Fh  +
jmp loc_10256A6  +
mov eax [ebp+var_418] +
push ebx  +
push ebx  +
push dword ptr [eax+5344h]  +
call sub_1025228  +
mov eax [ebp+var_418] +
mov eax [eax+5344h] +
mov [ebp+var_428] eax +
push [ebp+var_418]  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push [ebp+var_428]  +
push [ebp+hObject]  +
call sub_1025109  +
push [ebp+hObject]  +
mov [ebp+var_420] eax +
call ds:CloseHandle  +
cmp [ebp+var_424] ebx +
jz loc_102576D  +
push [ebp+var_428]  +
call ds:CloseHandle  +
lea eax [ebp+FileName] +
push eax  +
call ds:DeleteFileW  +
cmp [ebp+var_420] ebx +
jnz loc_10257BF  +
cmp [ebp+var_424] ebx +
jz loc_10257DE  +
push ebx  +
push edi  +
push 4  +
push ebx  +
push 1  +
push 0C0000000h  +
lea eax [ebp+pszPath2] +
push eax  +
call esi  +
mov ecx [ebp+var_418] +
mov [ecx+5344h] eax +
cmp eax 0FFFFFFFFh +
jnz loc_10257DE  +
push 0Dh  +
call sub_1023F4C  +
mov [ebp+var_420] eax +
jmp loc_10257DE  +
cmp [ebp+var_424] ebx +
jnz loc_10257DE  +
mov esi [ebp+var_418] +
add esi 5344h +
push dword ptr [esi]  +
call ds:CloseHandle  +
or dword ptr [esi] 0FFFFFFFFh +
mov eax [ebp+var_420] +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_101BC5D  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov edx [ebp+arg_4] +
mov eax [ebp+arg_8] +
push esi  +
mov esi [ebp+arg_0] +
xor ecx ecx +
push edi  +
mov [ebp+var_4] eax +
mov edi 7FFFFFFFh +
test edx edx +
jz loc_102581D  +
cmp edx edi +
jbe loc_1025822  +
mov ecx 80070057h +
mov eax ecx +
test ecx ecx +
jl loc_1025851  +
push ebx  +
xor ebx ebx +
mov eax edx +
mov ecx esi +
test edx edx +
jz loc_102583F  +
cmp [ecx] bl +
jz loc_102583B  +
inc ecx  +
dec eax  +
jnz loc_1025833  +
test eax eax +
jnz loc_102584B  +
mov ebx 80070057h +
xor ecx ecx +
mov eax ebx +
pop ebx  +
jmp loc_1025853  +
mov ecx edx +
sub ecx eax +
jmp loc_1025846  +
xor ecx ecx +
test eax eax +
jl loc_1025866  +
mov eax [ebp+var_4] +
push edi  +
sub edx ecx +
push 0  +
add ecx esi +
call sub_1025555  +
pop edi  +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+lpsz] +
push edi  +
push esi  +
call sub_1024DCD  +
mov edi ds:CharNextA +
mov bl 2Fh +
cmp [esi] bl +
jnz loc_10258CD  +
cmp [esi+1] bl +
jnz loc_10258CD  +
push esi  +
call edi  +
mov esi eax +
cmp [esi] bl +
jz loc_1025893  +
jmp loc_10258A7  +
cmp al bl +
jz loc_10258AF  +
push esi  +
call edi  +
mov esi eax +
mov al [esi] +
test al al +
jnz loc_102589E  +
jmp loc_10258B4  +
push esi  +
call edi  +
mov esi eax +
cmp [esi] bl +
jz loc_10258AF  +
mov al [esi] +
test al al +
jz loc_10258E1  +
cmp al bl +
jz loc_10258CD  +
push esi  +
call edi  +
mov esi eax +
mov al [esi] +
test al al +
jnz loc_10258BE  +
cmp byte ptr [esi] 0 +
jz loc_10258E1  +
cmp byte ptr [esi+1] 3Ah +
jnz loc_10258E1  +
inc esi  +
inc esi  +
jmp loc_10258E1  +
push esi  +
call edi  +
mov esi eax +
cmp [esi] bl +
jz loc_10258DC  +
cmp byte ptr [esi] 0 +
jnz loc_10258EE  +
mov eax esi +
jmp loc_102590F  +
push esi  +
call ds:lstrlenA  +
mov edi eax +
inc edi  +
push edi  +
call malloc  +
mov ebx eax +
pop ecx  +
test ebx ebx +
jz loc_102590F  +
push esi  +
push edi  +
push ebx  +
call sub_1022B69  +
mov eax ebx +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
push [ebp+lpString]  +
call ds:lstrlenA  +
mov esi eax +
inc esi  +
push esi  +
call malloc  +
mov edi eax +
pop ecx  +
test edi edi +
jz loc_1025947  +
push [ebp+lpString]  +
push esi  +
push edi  +
call sub_1022B69  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 42Ch +
mov eax dword_1030118 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push esi  +
mov esi [ebp+arg_C] +
push esi  +
push eax  +
mov [ebp+lpsz] eax +
call sub_1025871  +
mov [ebp+lpString] eax +
test eax eax +
jnz loc_102598D  +
push 4  +
pop eax  +
jmp loc_1025AE3  +
cmp byte ptr [eax] 0 +
push ebx  +
push edi  +
mov edi ds:lstrlenA +
mov ebx 104h +
jz loc_1025ADF  +
cmp dword ptr [esi+0C4h] 0 +
jz loc_1025A6B  +
push 213h  +
lea eax [ebp-41Fh] +
push 0  +
push eax  +
mov [ebp+String] 0 +
call memset  +
add esp 0Ch +
push [ebp+lpString]  +
lea eax [ebp+String] +
push ebx  +
push eax  +
call sub_1022B69  +
push [ebp+lpsz]  +
lea eax [ebp+var_310] +
push ebx  +
push eax  +
call sub_1022B69  +
push dword ptr [esi+0C8h]  +
lea eax [ebp+String] +
push eax  +
call dword ptr [esi+0C4h]  +
lea eax [ebp+String] +
push eax  +
call edi  +
push [ebp+lpString]  +
inc eax  +
mov [ebp+var_42C] eax +
call edi  +
inc eax  +
cmp [ebp+var_42C] eax +
jle loc_1025A4D  +
push [ebp+lpString]  +
call free  +
push [ebp+var_42C]  +
call malloc  +
pop ecx  +
pop ecx  +
mov [ebp+lpString] eax +
test eax eax +
jz loc_1025BED  +
lea eax [ebp+String] +
push eax  +
push [ebp+var_42C]  +
push [ebp+lpString]  +
call sub_1022B69  +
mov eax [ebp+lpString] +
cmp byte ptr [eax] 0 +
jz loc_1025ADF  +
push esi  +
push eax  +
call sub_102784C  +
mov [ebp+var_42C] eax +
test eax eax +
jz loc_1025AF2  +
push dword ptr [eax+48h]  +
xor ecx ecx +
inc ecx  +
mov [eax+5Ch] cx +
call free  +
pop ecx  +
push [ebp+lpsz]  +
call edi  +
mov edi eax +
inc edi  +
push edi  +
call malloc  +
mov ebx [ebp+var_42C] +
pop ecx  +
mov [ebx+48h] eax +
test eax eax +
jz loc_1025BED  +
push [ebp+lpsz]  +
push edi  +
push eax  +
call sub_1022B69  +
push [ebp+lpString]  +
call free  +
cmp dword ptr [esi+0A0h] 0 +
pop ecx  +
jz loc_1025ADF  +
mov eax [ebx+48h] +
mov [esi+0C0h] eax +
xor eax eax +
pop edi  +
pop ebx  +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop esi  +
call sub_101BC5D  +
leave   +
retn 10h  +
push [ebp+lpsz]  +
push 1  +
call sub_1024DFC  +
push ebx  +
lea eax [ebp+String1] +
push eax  +
push dword ptr [esi+1358h]  +
push 0FDE9h  +
call ds:SHLWAPI_216  +
test eax eax +
jz loc_1025B4E  +
push ebx  +
lea eax [ebp+String2] +
push eax  +
push [ebp+lpsz]  +
push 0  +
call ds:SHLWAPI_216  +
test eax eax +
jz loc_1025B4E  +
lea eax [ebp+String2] +
push eax  +
lea eax [ebp+String1] +
push eax  +
call ds:lstrcmpiW  +
test eax eax +
jz loc_1025ADF  +
push [ebp+lpsz]  +
call sub_1024DCD  +
push [ebp+lpsz]  +
call edi  +
mov ebx eax +
push 18h  +
inc ebx  +
call malloc  +
mov edi eax +
pop ecx  +
test edi edi +
jz loc_1025BED  +
push ebx  +
call malloc  +
pop ecx  +
mov [edi] eax +
test eax eax +
jz loc_1025BE6  +
push [ebp+lpsz]  +
push ebx  +
push eax  +
call sub_1022B69  +
mov eax [ebp+lpString] +
mov [edi+4] eax +
mov eax [esi+138Ch] +
xor ecx ecx +
cmp eax ecx +
jz loc_1025BAF  +
mov [edi+10h] eax +
mov eax [esi+138Ch] +
mov [eax+14h] edi +
jmp loc_1025BB8  +
mov [esi+1388h] edi +
mov [edi+10h] ecx +
mov eax [ebp+arg_4] +
mov [esi+138Ch] edi +
mov [edi+8] eax +
mov eax [ebp+arg_8] +
mov [edi+0Ch] eax +
mov [edi+14h] ecx +
inc dword ptr [esi+1390h]  +
cmp [esi+0A0h] ecx +
jz loc_1025ADF  +
mov eax [edi] +
jmp loc_1025AD9  +
push edi  +
call free  +
pop ecx  +
push 4  +
pop eax  +
jmp loc_1025AE1  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
push esi  +
call sub_1023EAA  +
xor edi edi +
inc edi  +
cmp eax edi +
jnz loc_1025C16  +
push 9  +
pop eax  +
jmp loc_1025C56  +
push ebx  +
push esi  +
push [ebp+lpsz]  +
call sub_1025871  +
mov esi [esi+1370h] +
mov ebx eax +
jmp loc_1025C44  +
push 0  +
push ebx  +
push dword ptr [esi+58h]  +
call ds:PathMatchSpecExA  +
test eax eax +
jnz loc_1025C41  +
inc eax  +
mov [esi+5Ch] ax +
xor edi edi +
mov esi [esi+68h] +
test esi esi +
jnz loc_1025C2A  +
push ebx  +
call free  +
mov eax edi +
pop ecx  +
neg eax  +
sbb eax eax +
pop ebx  +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 148h +
mov eax dword_1030118 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_8] +
mov ecx [ebp+arg_10] +
push ebx  +
push esi  +
mov esi [ebp+lpString] +
xor ebx ebx +
push edi  +
mov edi [ebp+arg_C] +
mov [ebp+var_144] eax +
cmp esi ebx +
jz loc_1025DFF  +
cmp esi [ecx+0C0h] +
jz loc_1025DFF  +
push esi  +
call ds:lstrlenA  +
push esi  +
mov [ebp+var_148] eax +
push 104h  +
lea eax [ebp+sz] +
push eax  +
call sub_1022B69  +
lea eax [ebp+sz] +
push eax  +
push [ebp+arg_0]  +
call sub_1024DFC  +
lea eax [ebp+sz] +
push eax  +
push [ebp+arg_0]  +
xor esi esi +
call sub_102C6C9  +
test eax eax +
jnz loc_1025CF7  +
lea eax [ebp+sz] +
push eax  +
push [ebp+arg_0]  +
call sub_102C68D  +
test eax eax +
jz loc_1025D07  +
mov eax [ebp+var_148] +
xor esi esi +
inc esi  +
mov [ebp+eax+var_109] bl +
lea eax [ebp+var_140] +
push eax  +
push ebx  +
lea eax [ebp+sz] +
push eax  +
cmp [ebp+arg_0] ebx +
jnz loc_1025D22  +
call sub_10254ED  +
jmp loc_1025D28  +
call ds:GetFileAttributesExA  +
cmp eax ebx +
mov eax [ebp+var_144] +
jz loc_1025DCE  +
cmp eax ebx +
jz loc_1025D45  +
mov ecx [ebp+var_140] +
and ecx 37h +
mov [eax] ecx +
lea eax [ebp+LocalFileTime] +
push eax  +
lea eax [ebp+FileTime] +
push eax  +
call ds:FileTimeToLocalFileTime  +
lea eax [ebp-10Ch] +
push eax  +
lea eax [ebp+FatDate] +
push eax  +
lea eax [ebp+LocalFileTime] +
push eax  +
call ds:FileTimeToDosDateTime  +
cmp edi ebx +
jz loc_1025DB6  +
push ebx  +
push 80h  +
push 3  +
push ebx  +
push 1  +
lea eax [ebp+sz] +
push ebx  +
push eax  +
cmp [ebp+arg_0] ebx +
jnz loc_1025D97  +
call sub_1025354  +
jmp loc_1025D9D  +
call ds:CreateFileA  +
mov esi eax +
cmp esi 0FFFFFFFFh +
jz loc_1025DB6  +
push esi  +
call sub_10252A3  +
push esi  +
mov [edi] eax +
mov [edi+4] edx +
call ds:CloseHandle  +
movzx eax [ebp+FatDate] +
movzx ecx [ebp+var_10C] +
shl eax 10h +
or eax ecx +
jmp loc_1025E5E  +
cmp esi ebx +
jz loc_1025DEC  +
cmp eax ebx +
jz loc_1025DDC  +
mov dword ptr [eax] 10h +
cmp edi ebx +
jz loc_1025DFB  +
or dword ptr [edi+4] 0FFFFFFFFh +
mov dword ptr [edi] 0FFFFFFFDh +
jmp loc_1025DFB  +
cmp eax ebx +
jz loc_1025DF2  +
mov [eax] ebx +
cmp edi ebx +
jz loc_1025DFB  +
mov [edi] ebx +
mov [edi+4] ebx +
xor eax eax +
jmp loc_1025E5E  +
cmp eax ebx +
jz loc_1025E05  +
mov [eax] ebx +
cmp edi ebx +
jz loc_1025E1A  +
mov eax [ecx+0A8h] +
mov [edi] eax +
mov eax [ecx+0ACh] +
mov [edi+4] eax +
lea eax [ebp+var_114] +
push eax  +
call time  +
lea eax [ebp+var_114] +
push eax  +
call gmtime  +
lea eax [ebp+var_114] +
push eax  +
call localtime  +
mov ecx [eax+10h] +
add esp 0Ch +
push ebx  +
push dword ptr [eax+4]  +
inc ecx  +
push dword ptr [eax+8]  +
push dword ptr [eax+0Ch]  +
mov eax [eax+14h] +
push ecx  +
add eax 76Ch +
push eax  +
call sub_102C9F3  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_101BC5D  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov eax dword_1030118 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
mov ebx [ebp+arg_4] +
mov eax [ebx+1354h] +
push esi  +
push edi  +
test eax eax +
jz loc_1025EA4  +
push eax  +
call ds:lstrlenA  +
mov edi eax +
add edi 14h +
jmp loc_1025EA7  +
push 0Ch  +
pop edi  +
push edi  +
call malloc  +
mov esi eax +
pop ecx  +
test esi esi +
jz loc_1025F33  +
mov byte ptr [esi] 0 +
mov ebx [ebx+1354h] +
test ebx ebx +
jz loc_1025EEC  +
push ebx  +
push edi  +
push esi  +
call sub_1022B69  +
push esi  +
push 0  +
call sub_102C6C9  +
test eax eax +
jnz loc_1025EEC  +
push esi  +
push eax  +
call sub_102C68D  +
test eax eax +
jnz loc_1025EEC  +
push offset dword_100536C  +
push edi  +
push esi  +
call sub_10257FA  +
push offset dword_1005360  +
push 9  +
lea eax [ebp+var_10] +
push eax  +
call sub_1022B69  +
call ds:GetCurrentThreadId  +
push 25h  +
pop ecx  +
xor edx edx +
div  ecx +
push 25h  +
mov cl byte_10301A0[edx] +
mov byte ptr [ebp+var_10] cl +
pop ecx  +
xor edx edx +
div  ecx +
mov al byte_10301A0[edx] +
mov byte ptr [ebp+var_10+1] al +
lea eax [ebp+var_10] +
push eax  +
push edi  +
push esi  +
call sub_10257FA  +
push esi  +
call sub_1022B51  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_101BC5D  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 518h +
mov eax dword_1030118 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push ebx  +
push esi  +
push edi  +
push eax  +
mov esi 104h +
push esi  +
lea eax [ebp+var_414] +
push eax  +
call sub_1022B69  +
lea eax [ebp+var_414] +
push eax  +
xor ebx ebx +
push ebx  +
call sub_1024DFC  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push esi  +
lea eax [ebp+var_310] +
push eax  +
push esi  +
lea eax [ebp+var_518] +
push eax  +
lea eax [ebp+var_414] +
push eax  +
push ebx  +
call sub_102C705  +
push ebx  +
push ebx  +
lea eax [ebp+var_310] +
push eax  +
lea eax [ebp+var_518] +
push eax  +
push esi  +
lea eax [ebp+sz] +
push eax  +
push ebx  +
call sub_102C8F0  +
lea eax [ebp+sz] +
push eax  +
push esi  +
lea eax [ebp+var_310] +
push eax  +
call sub_1022B69  +
xor edi edi +
push 5Ch  +
lea eax [ebp+sz] +
push eax  +
push ebx  +
call sub_102C654  +
cmp eax ebx +
jz loc_1026001  +
mov [eax] bl +
lea eax [ebp+sz] +
push eax  +
call sub_102542B  +
cmp eax 0FFFFFFFFh +
jz loc_1026018  +
lea eax [ebp+sz] +
push eax  +
push esi  +
lea eax [ebp+String] +
push eax  +
call sub_1022B69  +
xor edi edi +
inc edi  +
cmp edi ebx +
jz loc_1025FDB  +
push offset dword_100536C  +
push esi  +
lea eax [ebp+String] +
push eax  +
call sub_10257FA  +
lea eax [ebp+var_310] +
push eax  +
push esi  +
lea eax [ebp+sz] +
push eax  +
call sub_1022B69  +
mov edi ds:lstrlenA +
jmp loc_10260A7  +
lea eax [ebp+String] +
push eax  +
call edi  +
lea ebx [ebp+eax+String] +
lea eax [ebp+String] +
push eax  +
call edi  +
lea ecx [ebp+eax+sz] +
mov al [ecx] +
test al al +
jz loc_1026080  +
sub ecx ebx +
cmp al 5Ch +
jz loc_1026080  +
mov [ebx] al +
inc ebx  +
mov al [ecx+ebx] +
test al al +
jnz loc_1026072  +
push 0  +
lea eax [ebp+String] +
push eax  +
mov byte ptr [ebx] 0 +
call sub_1025488  +
test eax eax +
jz loc_10260D2  +
push offset dword_100536C  +
push esi  +
lea eax [ebp+String] +
push eax  +
call sub_10257FA  +
lea eax [ebp+String] +
push eax  +
call edi  +
mov ebx eax +
lea eax [ebp+sz] +
push eax  +
call edi  +
cmp ebx eax +
jl loc_102604A  +
xor eax eax +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_101BC5D  +
leave   +
retn 4  +
push 0Fh  +
pop eax  +
jmp loc_10260C1  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
mov eax [esi+1388h] +
push edi  +
xor ebx ebx +
jmp loc_10260F8  +
push esi  +
push eax  +
call sub_1024F38  +
cmp eax ebx +
jnz loc_10260F1  +
cmp [esi+1370h] ebx +
jz loc_1026195  +
mov eax [esi+1370h] +
push dword ptr [eax+48h]  +
mov edi [eax+68h] +
call free  +
mov eax [esi+1370h] +
pop ecx  +
mov ecx [eax+58h] +
cmp ecx [eax+48h] +
jz loc_102612F  +
push ecx  +
call free  +
pop ecx  +
mov eax [esi+1370h] +
cmp [eax+24h] ebx +
jz loc_1026143  +
push dword ptr [eax+4Ch]  +
call free  +
pop ecx  +
mov eax [esi+1370h] +
cmp [eax+28h] ebx +
jz loc_1026161  +
mov ecx [eax+50h] +
cmp ecx ebx +
jz loc_1026161  +
cmp ecx [eax+4Ch] +
jz loc_1026161  +
push ecx  +
call free  +
pop ecx  +
mov eax [esi+1370h] +
cmp [eax+2Ch] ebx +
jz loc_1026175  +
push dword ptr [eax+54h]  +
call free  +
pop ecx  +
push dword ptr [esi+1370h]  +
call free  +
dec dword ptr [esi+1374h]  +
pop ecx  +
mov [esi+1370h] edi +
cmp edi ebx +
jnz loc_1026108  +
lea edi [esi+5128h] +
mov eax [edi] +
cmp eax ebx +
jz loc_10261AA  +
push eax  +
call free  +
pop ecx  +
mov [edi] ebx +
lea edi [esi+38F4h] +
mov eax [edi] +
cmp eax ebx +
jz loc_10261BF  +
push eax  +
call free  +
pop ecx  +
mov [edi] ebx +
lea edi [esi+38ECh] +
mov eax [edi] +
cmp eax ebx +
jz loc_10261D4  +
push eax  +
call free  +
pop ecx  +
mov [edi] ebx +
lea edi [esi+38F0h] +
mov eax [edi] +
cmp eax ebx +
jz loc_10261E9  +
push eax  +
call free  +
pop ecx  +
mov [edi] ebx +
xor eax eax +
pop edi  +
mov [esi+2306h] ax +
mov [esi+237Eh] ax +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_4] +
lea esi [edi+1354h] +
mov eax [esi] +
test eax eax +
jz loc_1026225  +
push eax  +
call free  +
and dword ptr [esi] 0 +
pop ecx  +
lea esi [edi+1358h] +
mov eax [esi] +
test eax eax +
jz loc_102623B  +
push eax  +
call free  +
and dword ptr [esi] 0 +
pop ecx  +
mov esi [ebp+arg_0] +
cmp esi 3 +
jz loc_1026249  +
push edi  +
call sub_10260DC  +
mov [edi] esi +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
sub esp 0Ch +
push esi  +
mov esi [ebp+arg_4] +
mov [esi] eax +
mov eax [esi+512Ch] +
push edi  +
test eax eax +
jz loc_102638E  +
cmp eax [esi+1358h] +
jz loc_10262B4  +
mov eax [esi+8] +
cmp eax 0FFFFFFFFh +
jz loc_1026291  +
push eax  +
call ds:CloseHandle  +
or dword ptr [esi+8] 0FFFFFFFFh +
push dword ptr [esi+512Ch]  +
call sub_10252F5  +
push dword ptr [esi+512Ch]  +
call free  +
and dword ptr [esi+512Ch] 0 +
pop ecx  +
jmp loc_102638E  +
mov edx [esi+8] +
cmp edx 0FFFFFFFFh +
jz loc_102638E  +
mov ecx [esi+136Ch] +
mov eax [esi+1368h] +
and [ebp+var_4] 0 +
push ebx  +
push 0  +
mov ebx ecx +
push ebx  +
mov edi eax +
push edi  +
push edx  +
mov [ebp+var_C] eax +
mov [ebp+var_8] ecx +
call sub_1025228  +
cmp eax edi +
jnz loc_1026380  +
cmp edx ebx +
jnz loc_1026380  +
mov [esi+1384h] ebx +
xor ebx ebx +
mov [esi+1380h] edi +
mov edi [esi+1370h] +
mov [ebp+arg_4] ebx +
cmp edi ebx +
jz loc_102634F  +
push esi  +
lea eax [esi+8] +
push eax  +
push edi  +
call sub_1027BEE  +
test eax eax +
jnz loc_1026343  +
mov eax [edi+64h] +
add eax [edi+2Ch] +
mov ecx [edi+20h] +
add eax [edi+28h] +
lea eax [eax+ecx+2Eh] +
add [esi+1380h] eax +
adc [esi+1384h] ebx +
mov edi [edi+68h] +
inc [ebp+var_4]  +
jmp loc_102634A  +
mov [ebp+arg_4] 1 +
cmp [ebp+arg_4] ebx +
jz loc_102630C  +
cmp [ebp+arg_4] ebx +
jnz loc_1026380  +
mov ecx [esi+1384h] +
push esi  +
lea eax [esi+8] +
push eax  +
mov eax [esi+1380h] +
sub eax [ebp+var_C] +
push ebx  +
sbb ecx [ebp+var_8] +
push ebx  +
push [ebp+var_8]  +
push [ebp+var_C]  +
push ecx  +
push eax  +
mov eax [ebp+var_4] +
cdq   +
push edx  +
push eax  +
call sub_102810B  +
push dword ptr [esi+8]  +
call ds:CloseHandle  +
or dword ptr [esi+8] 0FFFFFFFFh +
pop ebx  +
lea edi [esi+1354h] +
mov eax [edi] +
test eax eax +
jz loc_10263A1  +
push eax  +
call free  +
pop ecx  +
and dword ptr [edi] 0 +
lea edi [esi+1358h] +
mov eax [edi] +
test eax eax +
jz loc_10263B7  +
push eax  +
call free  +
pop ecx  +
and dword ptr [edi] 0 +
cmp [ebp+arg_0] 3 +
jz loc_10263C6  +
push esi  +
call sub_10260DC  +
pop edi  +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_0]  +
push 11h  +
call sub_1026256  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+hMem]  +
or esi 0FFFFFFFFh +
call ds:GlobalLock  +
test eax eax +
jz loc_102640F  +
mov ecx [ebp+arg_4] +
push [ebp+hMem]  +
mov [eax] ecx +
mov esi ecx +
call ds:GlobalUnlock  +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+hMem]  +
or esi 0FFFFFFFFh +
call ds:GlobalLock  +
test eax eax +
jz loc_102643C  +
push [ebp+hMem]  +
mov esi [eax] +
call ds:GlobalUnlock  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
or dword ptr [eax+1348h] 0FFFFFFFFh +
xor ecx ecx +
xor edx edx +
inc edx  +
mov [eax] ecx +
mov [eax+1344h] ecx +
mov [eax+134Ch] edx +
mov [eax+1354h] ecx +
mov [eax+1370h] ecx +
mov [eax+1388h] ecx +
mov [eax+138Ch] ecx +
mov [eax+5120h] edx +
mov [eax+5124h] ecx +
mov [eax+1374h] ecx +
mov [eax+1358h] ecx +
mov [eax+1360h] ecx +
mov [eax+1364h] ecx +
mov [eax+1368h] ecx +
mov [eax+136Ch] ecx +
mov [eax+1378h] ecx +
mov [eax+1380h] ecx +
mov [eax+1384h] ecx +
mov [eax+1390h] ecx +
mov dword ptr [eax+1350h] offset a_z_zip_zoo_arc +
mov [eax+1394h] ecx +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 374h +
mov eax dword_1030118 +
xor eax ebp +
mov [ebp+var_4] eax +
mov ecx [ebp+arg_8] +
mov eax [ebp+arg_4] +
mov edx [ebp+arg_C] +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
push ecx  +
push eax  +
push edi  +
mov [ebp+var_368] edx +
xor edx edx +
push edx  +
mov esi 104h +
push esi  +
lea eax [ebp+FileName] +
push eax  +
push 1  +
mov [ebp+var_374] edx +
mov [ebp+var_36C] edx +
call sub_102C8F0  +
cmp [ebp+FileName] 0 +
mov ebx ds:lstrlenA +
jz loc_1026562  +
lea eax [ebp+FileName] +
push eax  +
call ebx  +
lea ecx [ebp+FileName] +
dec ecx  +
cmp byte ptr [eax+ecx] 2Eh +
jnz loc_1026562  +
mov [ebp+var_374] 1 +
xor eax eax +
push eax  +
push eax  +
push edi  +
push eax  +
push esi  +
lea eax [ebp+var_108] +
push eax  +
push 1  +
call sub_102C8F0  +
lea eax [ebp+var_108] +
push eax  +
call ebx  +
mov edi eax +
lea eax [ebp+var_108] +
push eax  +
push 1  +
call sub_102C68D  +
test eax eax +
jnz loc_10265B1  +
push offset dword_100536C  +
push esi  +
lea eax [ebp+var_108] +
push eax  +
call sub_10257FA  +
lea eax [ebp+var_108] +
push eax  +
call ebx  +
mov edi eax +
xor ebx ebx +
inc ebx  +
or [ebp+hFindFile] 0FFFFFFFFh +
mov [ebp+var_370] ebx +
mov [ebp+var_364] ebx +
jmp loc_10265CC  +
xor ebx ebx +
inc ebx  +
cmp [ebp+var_364] 0 +
jz loc_10266F8  +
cmp [ebp+var_370] 0 +
push [ebp+var_368]  +
jz loc_102660B  +
lea eax [ebp+FileName] +
push eax  +
lea eax [ebp+hFindFile] +
push eax  +
lea eax [ebp+sz] +
push eax  +
call sub_102C1A2  +
and [ebp+var_370] 0 +
jmp loc_102661E  +
lea eax [ebp+hFindFile] +
push eax  +
lea eax [ebp+sz] +
push eax  +
call sub_102C215  +
cmp [ebp+var_374] 0 +
mov [ebp+var_364] eax +
jz loc_1026643  +
push 2Eh  +
lea eax [ebp-320h] +
push eax  +
push 1  +
call sub_102C654  +
test eax eax +
jz loc_1026643  +
xor ebx ebx +
cmp [ebp+var_364] 0 +
jz loc_10266EB  +
test ebx ebx +
jz loc_10266EB  +
lea eax [ebp-320h] +
push eax  +
mov eax esi +
sub eax edi +
push eax  +
lea eax [ebp+edi+var_108] +
push eax  +
call sub_1022B69  +
lea eax [ebp+var_108] +
push eax  +
push 1  +
call sub_1024DFC  +
lea eax [ebp+LocalFileTime] +
push eax  +
lea eax [ebp-338h] +
push eax  +
call ds:FileTimeToLocalFileTime  +
lea eax [ebp+FatTime] +
push eax  +
lea eax [ebp+FatDate] +
push eax  +
lea eax [ebp+LocalFileTime] +
push eax  +
call ds:FileTimeToDosDateTime  +
push [ebp+var_368]  +
call sub_1023EF6  +
push [ebp+var_368]  +
movzx eax [ebp+FatDate] +
movzx ecx [ebp+FatTime] +
push dword ptr [ebp+sz]  +
shl eax 10h +
or eax ecx +
push eax  +
lea eax [ebp+var_108] +
push eax  +
call sub_1025952  +
mov [ebp+var_36C] eax +
cmp [ebp+var_36C] 0 +
jz loc_10265C9  +
cmp [ebp+hFindFile] 0FFFFFFFFh +
pop edi  +
pop esi  +
pop ebx  +
jz loc_1026710  +
push [ebp+hFindFile]  +
call ds:FindClose  +
mov ecx [ebp+var_4] +
mov eax [ebp+var_36C] +
xor ecx ebp +
call sub_101BC5D  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
xor ebx ebx +
cmp [ebp+hMem] ebx +
jz loc_10267A8  +
cmp [ebp+arg_4] ebx +
jz loc_10267A8  +
push edi  +
push [ebp+hMem]  +
call sub_102641B  +
mov edi eax +
test edi edi +
jl loc_10267A7  +
inc edi  +
mov eax edi +
imul eax eax +
push 2  +
add eax 4 +
push eax  +
push [ebp+hMem]  +
call ds:GlobalReAlloc  +
mov ebx eax +
test ebx ebx +
jz loc_10267A7  +
push ebx  +
call ds:GlobalLock  +
test eax eax +
jz loc_10267A7  +
mov ecx edi +
imul ecx ecx +
push esi  +
push [ebp+arg_4]  +
lea esi [eax+ecx-100h] +
push 104h  +
push esi  +
call sub_1022B69  +
push ebx  +
mov byte ptr [esi+103h] 0 +
call ds:GlobalUnlock  +
push edi  +
push ebx  +
call sub_10263E9  +
pop esi  +
pop edi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
push ebx  +
mov ebx [ebp+hMem] +
test ebx ebx +
jz loc_102681B  +
push edi  +
mov edi [ebp+arg_4] +
test edi edi +
jz loc_102681A  +
push esi  +
push ebx  +
call sub_102641B  +
mov esi eax +
dec esi  +
js loc_1026819  +
push ebx  +
call ds:GlobalLock  +
test eax eax +
jz loc_1026819  +
mov ecx esi +
imul ecx ecx +
lea eax [ecx+eax+4] +
push eax  +
push 104h  +
push edi  +
call sub_1022B69  +
push ebx  +
mov byte ptr [edi+103h] 0 +
call ds:GlobalUnlock  +
push esi  +
push ebx  +
call sub_10263E9  +
mov [ebp+var_4] 1 +
pop esi  +
pop edi  +
mov eax [ebp+var_4] +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 67Ch +
mov eax dword_1030118 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
mov ebx [ebp+arg_4] +
push edi  +
mov edi [ebp+arg_0] +
push 4  +
pop eax  +
push eax  +
push 2  +
mov [ebp+var_670] eax +
call ds:GlobalAlloc  +
mov [ebp+hMem] eax +
test eax eax +
jz loc_1026C22  +
push esi  +
push 0  +
push eax  +
call sub_10263E9  +
push edi  +
push 1  +
call sub_102C423  +
mov [ebp+var_67C] eax +
mov esi 104h +
push esi  +
lea eax [ebp+var_310] +
push eax  +
push esi  +
lea eax [ebp+var_414] +
push eax  +
push esi  +
lea eax [ebp+sz] +
push eax  +
push esi  +
lea eax [ebp+var_518] +
push eax  +
push edi  +
push 1  +
call sub_102C705  +
cmp [ebp+sz] 5Ch +
lea edi [ebx+0CCh] +
lea eax [ebp-107h] +
jz loc_10268C4  +
lea eax [ebp+sz] +
push eax  +
push esi  +
push edi  +
call sub_1022B69  +
push edi  +
call ds:CharLowerA  +
push edi  +
call sub_1024DCD  +
lea eax [ebp+sz] +
push eax  +
push esi  +
lea eax [ebp+var_20C] +
push eax  +
call sub_1022B69  +
push 0  +
push 0  +
lea eax [ebp+var_20C] +
push eax  +
lea eax [ebp+var_518] +
push eax  +
push esi  +
lea eax [ebp+sz] +
push eax  +
push 1  +
call sub_102C8F0  +
lea eax [ebp+sz] +
push eax  +
push 1  +
call sub_102C68D  +
mov edi ds:lstrlenA +
test eax eax +
jz loc_102693A  +
lea eax [ebp+sz] +
push eax  +
call edi  +
lea ecx [ebp+sz] +
dec ecx  +
mov byte ptr [eax+ecx] 0 +
xor eax eax +
cmp [ebx+1344h] eax +
jz loc_1026B28  +
mov [ebp+var_670] eax +
lea eax [ebp+sz] +
push eax  +
push esi  +
lea eax [ebp+var_20C] +
push eax  +
call sub_1022B69  +
push ebx  +
push esi  +
lea eax [ebp+sz] +
push eax  +
lea eax [ebp+hFindFile] +
push eax  +
lea eax [ebp+FindFileData] +
push eax  +
push [ebp+var_67C]  +
call sub_102C28A  +
test eax eax +
jz loc_1026ADA  +
jmp loc_10269B2  +
push ebx  +
push esi  +
lea eax [ebp+sz] +
push eax  +
lea eax [ebp+hFindFile] +
push eax  +
lea eax [ebp+FindFileData] +
push eax  +
call sub_102C39D  +
test eax eax +
jz loc_1026AC5  +
cmp dword ptr [ebx+134Ch] 0 +
jz loc_1026A7C  +
lea eax [ebp+sz] +
push eax  +
call edi  +
cmp eax 3 +
jle loc_1026A7C  +
lea eax [ebp+LocalFileTime] +
push eax  +
lea eax [ebp+FindFileData.ftLastWriteTime] +
push eax  +
call ds:FileTimeToLocalFileTime  +
lea eax [ebp+FatTime] +
push eax  +
lea eax [ebp+FatDate] +
push eax  +
lea eax [ebp+LocalFileTime] +
push eax  +
call ds:FileTimeToDosDateTime  +
lea eax [ebp+sz] +
push eax  +
call edi  +
mov [ebp+var_678] eax +
lea eax [ebp+sz] +
push eax  +
push 1  +
call sub_102C68D  +
test eax eax +
jnz loc_1026A33  +
push offset dword_100536C  +
push esi  +
lea eax [ebp+sz] +
push eax  +
call sub_10257FA  +
movzx eax [ebp+FatDate] +
movzx ecx [ebp+FatTime] +
push ebx  +
push [ebp+FindFileData.dwFileAttributes]  +
shl eax 10h +
or eax ecx +
push eax  +
lea eax [ebp+sz] +
push eax  +
call sub_1025952  +
mov [ebp+var_670] eax +
lea eax [ebp+sz] +
push eax  +
push 1  +
call sub_1024DFC  +
mov eax [ebp+var_678] +
mov [ebp+eax+sz] 0 +
lea eax [ebp+sz] +
push eax  +
push [ebp+hMem]  +
call sub_1026729  +
test eax eax +
jz loc_1026A9A  +
mov [ebp+hMem] eax +
jmp loc_1026AA4  +
mov [ebp+var_670] 4 +
lea eax [ebp+var_20C] +
push eax  +
push esi  +
lea eax [ebp+sz] +
push eax  +
call sub_1022B69  +
cmp [ebp+var_670] 0 +
jz loc_102698E  +
cmp [ebp+hFindFile] 0FFFFFFFFh +
jz loc_1026ADA  +
push [ebp+hFindFile]  +
call ds:FindClose  +
push ebx  +
call sub_1023EF6  +
push ebx  +
lea eax [ebp+var_310] +
push eax  +
lea eax [ebp+var_414] +
push eax  +
lea eax [ebp+sz] +
push eax  +
call sub_10264E3  +
mov [ebp+var_670] eax +
test eax eax +
jnz loc_1026C0C  +
lea eax [ebp+sz] +
push eax  +
push [ebp+hMem]  +
call sub_10267B4  +
test eax eax +
jnz loc_102694E  +
jmp loc_1026C0C  +
cmp [ebx+134Ch] eax +
jz loc_1026BD5  +
lea eax [ebp+sz] +
push eax  +
call edi  +
cmp eax 3 +
jle loc_1026BD5  +
lea eax [ebp+sz] +
push eax  +
call edi  +
mov edi eax +
lea eax [ebp+sz] +
push eax  +
push 1  +
call sub_102C68D  +
test eax eax +
lea eax [ebp+sz] +
jnz loc_1026BA2  +
push offset dword_100536C  +
push esi  +
push eax  +
call sub_10257FA  +
push ebx  +
push 10h  +
push ebx  +
push 0  +
push 0  +
lea eax [ebp+sz] +
push eax  +
push 1  +
call sub_1025C61  +
push eax  +
lea eax [ebp+sz] +
push eax  +
call sub_1025952  +
mov [ebp+edi+sz] 0 +
jmp loc_1026BBF  +
push ebx  +
push 10h  +
push ebx  +
push 0  +
push 0  +
push eax  +
push 1  +
call sub_1025C61  +
push eax  +
lea eax [ebp+sz] +
push eax  +
call sub_1025952  +
mov [ebp+var_670] eax +
lea eax [ebp+sz] +
push eax  +
push 1  +
call sub_1024DFC  +
jmp loc_1026BDC  +
and [ebp+var_670] 0 +
cmp [ebp+var_670] 0 +
jnz loc_1026C0C  +
push ebx  +
lea eax [ebp+var_310] +
push eax  +
lea eax [ebp+var_414] +
push eax  +
lea eax [ebp+sz] +
push eax  +
call sub_10264E3  +
push ebx  +
mov [ebp+var_670] eax +
call sub_1023EF6  +
cmp [ebp+hMem] 0 +
pop esi  +
jz loc_1026C22  +
push [ebp+hMem]  +
call ds:GlobalFree  +
mov ecx [ebp+var_4] +
mov eax [ebp+var_670] +
pop edi  +
xor ecx ebp +
pop ebx  +
call sub_101BC5D  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 51Ch +
mov eax dword_1030118 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
mov ebx [ebp+arg_0] +
push edi  +
mov edi [ebp+arg_4] +
push ebx  +
mov [ebp+var_51C] 10h +
call sub_102CA43  +
test eax eax +
jz loc_1026D39  +
push esi  +
mov esi 104h +
push esi  +
lea eax [ebp+var_20C] +
push eax  +
push esi  +
lea eax [ebp+var_310] +
push eax  +
push esi  +
lea eax [ebp+var_108] +
push eax  +
push esi  +
lea eax [ebp+var_414] +
push eax  +
push ebx  +
push 1  +
call sub_102C705  +
cmp byte ptr [ebp+var_108] 5Ch +
lea ebx [edi+0CCh] +
lea eax [ebp+var_108+1] +
jz loc_1026CBB  +
lea eax [ebp+var_108] +
push eax  +
push esi  +
push ebx  +
call sub_1022B69  +
push ebx  +
call ds:CharLowerA  +
push ebx  +
call sub_1024DCD  +
lea eax [ebp+var_20C] +
push eax  +
lea eax [ebp+var_310] +
push eax  +
lea eax [ebp+var_108] +
push eax  +
lea eax [ebp+var_414] +
push eax  +
push esi  +
lea eax [ebp+var_518] +
xor ebx ebx +
push eax  +
inc ebx  +
push ebx  +
call sub_102C8F0  +
xor esi esi +
mov [edi+0A0h] esi +
cmp [edi+9Ch] esi +
jz loc_1026D13  +
mov [edi+0A0h] ebx +
push edi  +
push esi  +
push edi  +
push esi  +
push esi  +
push esi  +
push ebx  +
call sub_1025C61  +
push eax  +
lea eax [ebp+var_518] +
push eax  +
call sub_1025952  +
mov [edi+0A0h] esi +
mov [ebp+var_51C] eax +
pop esi  +
mov ecx [ebp+var_4] +
mov eax [ebp+var_51C] +
pop edi  +
xor ecx ebp +
pop ebx  +
call sub_101BC5D  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 338h +
mov eax dword_1030118 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
mov esi [ebp+arg_4] +
cmp dword ptr [esi+5344h] 0FFFFFFFFh +
push edi  +
mov edi [ebp+arg_0] +
mov [ebp+var_32C] edi +
jnz loc_1026D95  +
push esi  +
push 0Dh  +
call sub_1023F4C  +
push eax  +
call sub_1026256  +
mov eax [esi] +
jmp loc_10277F8  +
or dword ptr [esi+8] 0FFFFFFFFh +
push ebx  +
xor ebx ebx +
mov [esi+512Ch] ebx +
mov eax [edi+4] +
dec eax  +
dec eax  +
push 1  +
pop ecx  +
jz loc_1026DBB  +
dec eax  +
dec eax  +
jz loc_1026DB3  +
dec eax  +
jnz loc_1026DC1  +
mov [esi+5120h] ecx +
jmp loc_1026DC1  +
mov [esi+5120h] ebx +
push esi  +
call sub_1028557  +
cmp eax ebx +
jz loc_1026DD7  +
push esi  +
push eax  +
call sub_1026256  +
jmp loc_10277F5  +
mov eax [edi+24h] +
cmp eax 5 +
jz loc_1026DF5  +
cmp eax 0Fh +
jz loc_1026DE9  +
push esi  +
push 10h  +
jmp loc_1026DCD  +
mov dword ptr [esi+1348h] 9 +
jmp loc_1026DFC  +
or dword ptr [esi+1348h] 0FFFFFFFFh +
cmp [edi+20h] ebx +
jz loc_1026E0B  +
mov dword ptr [esi+1344h] 1 +
cmp [edi+30h] ebx +
jz loc_1026E16  +
mov [esi+134Ch] ebx +
cmp [edi+28h] ebx +
jz loc_1026E7C  +
cmp [edi+2Ch] ebx +
jz loc_1026E7C  +
mov eax [ebp+var_32C] +
mov dword ptr [esi+5124h] 1 +
push dword ptr [eax+2Ch]  +
lea edi [esi+9F8h] +
push 824h  +
push edi  +
push ebx  +
call sub_1024EBD  +
push edi  +
call ds:lstrlenA  +
mov edi eax +
inc edi  +
push edi  +
call malloc  +
pop ecx  +
mov [esi+1354h] eax +
cmp eax ebx +
jnz loc_1026E68  +
push esi  +
push 4  +
jmp loc_1026DCD  +
lea ecx [esi+9F8h] +
push ecx  +
push edi  +
push eax  +
call sub_1022B69  +
mov edi [ebp+var_32C] +
push ebx  +
lea eax [esi+5130h] +
push ebx  +
push eax  +
call sub_10242D1  +
mov edi [edi+0Ch] +
mov [ebp+dwFileAttributes] ebx +
mov [ebp+var_320] ebx +
cmp edi ebx +
jz loc_1026FF8  +
mov al [edi] +
mov [ebp+lpsz] edi +
mov [ebp+var_318] edi +
jmp loc_1026FB2  +
cmp al 22h +
jnz loc_1026EBF  +
xor [ebp+dwFileAttributes] 1 +
cmp [ebp+dwFileAttributes] ebx +
jnz loc_1026F9E  +
cmp al 20h +
jnz loc_1026F9E  +
mov edi [ebp+lpsz] +
sub edi [ebp+var_318] +
mov eax 207h +
cmp edi eax +
mov ecx edi +
jl loc_1026EEC  +
mov ecx eax +
cmp ecx ebx +
jge loc_1026EF4  +
xor edi edi +
jmp loc_1026EFA  +
cmp edi eax +
jl loc_1026EFA  +
mov edi eax +
push edi  +
push [ebp+var_318]  +
lea eax [ebp+var_310] +
push eax  +
call memcpy  +
add esp 0Ch +
lea eax [ebp+var_310] +
push eax  +
push 104h  +
lea eax [ebp+sz] +
push eax  +
push 1  +
mov byte ptr [ebp+edi+var_310] bl +
call sub_1024EBD  +
cmp [esi+9Ch] ebx +
jz loc_1026F62  +
cmp [ebp+var_320] ebx +
jnz loc_1026F62  +
push esi  +
lea eax [ebp+sz] +
push eax  +
call sub_1026C3D  +
cmp eax ebx +
jnz loc_1026DCB  +
mov [ebp+var_320] 1 +
jmp loc_1026F8C  +
cmp dword ptr [esi+5120h] 1 +
push esi  +
lea eax [ebp+sz] +
push eax  +
jnz loc_1026F7A  +
call sub_1026828  +
jmp loc_1026F7F  +
call sub_1025BFA  +
cmp eax ebx +
jz loc_1026F8C  +
cmp eax 0FFFFFFFFh +
jnz loc_1026DCB  +
push [ebp+lpsz]  +
call ds:CharNextA  +
mov [ebp+var_318] eax +
push [ebp+lpsz]  +
call ds:CharNextA  +
mov [ebp+lpsz] eax +
mov al [eax] +
cmp al bl +
jnz loc_1026EB4  +
push [ebp+var_318]  +
lea eax [ebp+sz] +
push 104h  +
push eax  +
push 1  +
call sub_1024EBD  +
cmp [esi+9Ch] ebx +
jz loc_102700B  +
cmp [ebp+var_320] ebx +
jnz loc_102700B  +
push esi  +
lea eax [ebp+sz] +
push eax  +
call sub_1026C3D  +
cmp eax ebx +
jnz loc_1026DCB  +
push esi  +
call sub_1023EAA  +
push esi  +
cmp eax 1 +
jnz loc_1027031  +
push 9  +
jmp loc_1026DCD  +
cmp dword ptr [esi+5120h] 1 +
push esi  +
lea eax [ebp+sz] +
push eax  +
jnz loc_1027023  +
call sub_1026828  +
jmp loc_1027028  +
call sub_1025BFA  +
cmp eax ebx +
jz loc_1026FF8  +
cmp eax 0FFFFFFFFh +
jmp loc_1026FF2  +
call sub_1024FD8  +
cmp eax ebx +
jz loc_1027051  +
cmp eax 9 +
jnz loc_1027042  +
push esi  +
jmp loc_1027004  +
push esi  +
cmp eax 10h +
jnz loc_1026DCC  +
jmp loc_1026DE5  +
cmp [esi+1374h] ebx +
jz loc_1027065  +
push dword ptr [esi+1378h]  +
call free  +
pop ecx  +
cmp [esi+5120h] ebx +
jnz loc_1027085  +
cmp [esi+1348h] ebx +
jz loc_1026DE4  +
cmp [esi+1344h] ebx +
jnz loc_1026DE4  +
cmp [esi+1354h] ebx +
jnz loc_1027121  +
push 2Fh  +
push dword ptr [esi+1358h]  +
push ebx  +
call sub_102C654  +
mov edi eax +
cmp edi ebx +
jnz loc_10270CD  +
push 5Ch  +
push dword ptr [esi+1358h]  +
push ebx  +
call sub_102C654  +
mov edi eax +
cmp edi ebx +
jnz loc_10270CD  +
push 3Ah  +
push dword ptr [esi+1358h]  +
push ebx  +
call sub_102C654  +
mov edi eax +
cmp edi ebx +
jz loc_1027121  +
cmp byte ptr [edi] 3Ah +
jnz loc_10270D3  +
inc edi  +
mov eax edi +
sub eax [esi+1358h] +
inc eax  +
push eax  +
mov [ebp+var_330] eax +
call malloc  +
pop ecx  +
mov [esi+1354h] eax +
cmp eax ebx +
jz loc_1026E60  +
movsx eax byte ptr [edi] +
mov [edi] bl +
push dword ptr [esi+1358h]  +
mov [ebp+var_318] eax +
push [ebp+var_330]  +
push dword ptr [esi+1354h]  +
call sub_1022B69  +
mov al byte ptr [ebp+var_318] +
mov [edi] al +
mov edi [esi+1370h] +
mov [ebp+lpsz] ebx +
jmp loc_1027167  +
push esi  +
call sub_1023EAA  +
test eax eax +
jnz loc_102716B  +
cmp [edi+5Ch] bx +
jz loc_1027164  +
cmp [esi+5120h] ebx +
jz loc_102715E  +
push esi  +
push ebx  +
push ebx  +
push dword ptr [edi+48h]  +
push 1  +
call sub_1025C61  +
test eax eax +
jnz loc_102715E  +
mov [edi+5Ch] ax +
jmp loc_1027164  +
inc [ebp+lpsz]  +
mov edi [edi+68h] +
cmp edi ebx +
jnz loc_102712F  +
push esi  +
call sub_1023EAA  +
cmp eax 1 +
jz loc_102703F  +
mov edi [esi+1388h] +
jmp loc_10271A2  +
push esi  +
call sub_1023EAA  +
test eax eax +
jnz loc_10271A6  +
cmp [esi+5120h] ebx +
jnz loc_102719F  +
push esi  +
push edi  +
call sub_1024F38  +
mov edi eax +
jmp loc_10271A2  +
mov edi [edi+14h] +
cmp edi ebx +
jnz loc_1027182  +
push esi  +
call sub_1023EAA  +
cmp eax 1 +
jz loc_102703F  +
cmp [ebp+lpsz] ebx +
jnz loc_10271CD  +
cmp [esi+1388h] ebx +
jnz loc_10271CD  +
push esi  +
push 0Ch  +
jmp loc_1026DCD  +
mov eax [ebp+var_32C] +
cmp [eax+28h] ebx +
jz loc_10271F6  +
cmp [esi+1370h] ebx +
jnz loc_10271F6  +
mov eax [esi+1360h] +
or eax [esi+1364h] +
jnz loc_10271F6  +
mov [ebp+dwFileAttributes] ebx +
jmp loc_102720A  +
push dword ptr [esi+1358h]  +
call sub_102542B  +
movzx eax ax +
mov [ebp+dwFileAttributes] eax +
push esi  +
push dword ptr [esi+1358h]  +
mov [esi+1380h] ebx +
mov [esi+1384h] ebx +
call sub_1025E74  +
mov [esi+512Ch] eax +
cmp eax ebx +
jz loc_1026E60  +
push eax  +
call sub_1025F49  +
test eax eax +
jz loc_1027246  +
push 0Fh  +
call sub_1023F4C  +
jmp loc_10277F7  +
push ebx  +
push 80h  +
push 2  +
push ebx  +
push ebx  +
push 0C0000000h  +
push dword ptr [esi+512Ch]  +
call sub_1025354  +
mov [ebp+hObject] eax +
mov [esi+8] eax +
cmp eax 0FFFFFFFFh +
jnz loc_102727B  +
push esi  +
push 0Fh  +
call sub_1023F4C  +
jmp loc_1026DCC  +
mov ecx [esi+1360h] +
mov edx [esi+1364h] +
mov edi ecx +
or edi edx +
jz loc_10272C7  +
push esi  +
push edx  +
push ecx  +
push eax  +
push dword ptr [esi+5344h]  +
call sub_1025109  +
mov edi eax +
cmp edi ebx +
jz loc_10272C7  +
mov eax [ebp+hObject] +
cmp eax 0FFFFFFFFh +
jz loc_10272C0  +
cmp [esi+8] eax +
jz loc_10272C0  +
push eax  +
call ds:CloseHandle  +
or [ebp+hObject] 0FFFFFFFFh +
push esi  +
push edi  +
jmp loc_1026DCD  +
mov eax [esi+1360h] +
mov [esi+1380h] eax +
mov eax [esi+1364h] +
push 2000h  +
mov [esi+1384h] eax +
call malloc  +
pop ecx  +
mov [esi+5128h] eax +
cmp eax ebx +
jnz loc_102731F  +
mov eax [ebp+hObject] +
cmp eax 0FFFFFFFFh +
jz loc_1026E60  +
cmp [esi+8] eax +
jz loc_1026E60  +
push eax  +
call ds:CloseHandle  +
or [ebp+hObject] 0FFFFFFFFh +
jmp loc_1026E60  +
mov eax [esi+1370h] +
mov [ebp+var_330] ebx +
mov [esi+1394h] ebx +
jmp loc_1027342  +
cmp [eax+5Ch] bx +
jz loc_102733F  +
inc dword ptr [esi+1394h]  +
mov eax [eax+68h] +
cmp eax ebx +
jnz loc_1027333  +
mov eax [esi+1390h] +
add [esi+1394h] eax +
lea eax [esi+1370h] +
mov [ebp+lpsz] eax +
jmp loc_10274C1  +
mov [esi+0A0h] ebx +
cmp [esi+9Ch] ebx +
jz loc_1027386  +
mov eax [edi+48h] +
cmp eax [esi+0C0h] +
jnz loc_1027386  +
mov dword ptr [esi+0A0h] 1 +
cmp [edi+5Ch] bx +
jnz loc_10273E0  +
cmp [esi+0A0h] ebx +
jnz loc_10273E0  +
push esi  +
lea eax [ebp+hObject] +
push eax  +
push dword ptr [esi+5344h]  +
push edi  +
call sub_102437A  +
mov [ebp+var_318] eax +
cmp eax ebx +
jz loc_1027444  +
mov eax [ebp+hObject] +
cmp eax 0FFFFFFFFh +
jz loc_10273D4  +
cmp [esi+8] eax +
jz loc_10273D4  +
push eax  +
call ds:CloseHandle  +
or [ebp+hObject] 0FFFFFFFFh +
push esi  +
push [ebp+var_318]  +
jmp loc_1026DCD  +
cmp [esi+5120h] ebx +
jz loc_102744F  +
push esi  +
lea eax [ebp+hObject] +
push eax  +
push edi  +
call sub_1024622  +
mov [ebp+var_318] eax +
cmp eax ebx +
jz loc_1027409  +
cmp eax 12h +
jnz loc_10274D6  +
cmp [ebp+var_318] 12h +
jnz loc_1027444  +
push esi  +
lea eax [ebp+hObject] +
push eax  +
push dword ptr [esi+5344h]  +
mov [ebp+var_330] 1 +
push edi  +
call sub_102437A  +
mov [ebp+var_318] eax +
cmp eax ebx +
jnz loc_10273B6  +
xor eax eax +
mov [edi+5Ch] ax +
add edi 68h +
mov [ebp+lpsz] edi +
jmp loc_10274B5  +
mov eax [edi+68h] +
push dword ptr [edi+48h]  +
mov [ebp+var_320] eax +
call free  +
push dword ptr [edi+58h]  +
call free  +
pop ecx  +
pop ecx  +
cmp [edi+24h] ebx +
jz loc_1027478  +
push dword ptr [edi+4Ch]  +
call free  +
pop ecx  +
cmp [edi+28h] ebx +
jz loc_102748C  +
mov eax [edi+50h] +
cmp eax [edi+4Ch] +
jz loc_102748C  +
push eax  +
call free  +
pop ecx  +
cmp [edi+2Ch] ebx +
jz loc_102749A  +
push dword ptr [edi+54h]  +
call free  +
pop ecx  +
push edi  +
call free  +
mov eax [ebp+var_320] +
pop ecx  +
mov ecx [ebp+lpsz] +
mov [ecx] eax +
dec dword ptr [esi+1374h]  +
mov eax [ebp+lpsz] +
mov [esi+0A0h] ebx +
mov edi [eax] +
cmp edi ebx +
jnz loc_1027363  +
mov eax [esi+1388h] +
jmp loc_10275B9  +
mov eax [ebp+hObject] +
cmp eax 0FFFFFFFFh +
jz loc_10274F4  +
cmp [esi+8] eax +
jz loc_10274F4  +
push eax  +
call ds:CloseHandle  +
or [ebp+hObject] 0FFFFFFFFh +
push esi  +
push [ebp+var_318]  +
call sub_1026256  +
push esi  +
push dword ptr [esi]  +
jmp loc_10277F0  +
push 70h  +
call malloc  +
mov edi eax +
pop ecx  +
cmp edi ebx +
jz loc_10275C9  +
push 70h  +
push ebx  +
push edi  +
call memset  +
mov eax [ebp+var_320] +
mov ecx [eax] +
mov [edi+48h] ecx +
mov ecx [eax+4] +
mov [eax] ebx +
mov [edi+58h] ecx +
mov [eax+4] ebx +
xor eax eax +
inc eax  +
mov [edi+5Ch] ax +
add esp 0Ch +
mov [esi+0A0h] ebx +
cmp [esi+9Ch] ebx +
jz loc_1027566  +
mov eax [edi+48h] +
cmp eax [esi+0C0h] +
jnz loc_1027566  +
mov dword ptr [esi+0A0h] 1 +
push esi  +
lea eax [ebp+hObject] +
push eax  +
push edi  +
call sub_1024622  +
mov [ebp+var_318] eax +
cmp eax ebx +
jz loc_1027587  +
cmp eax 12h +
jnz loc_10274D6  +
cmp [ebp+var_318] 12h +
mov [esi+0A0h] ebx +
jz loc_10275EF  +
mov eax [ebp+lpsz] +
mov [eax] edi +
push esi  +
push [ebp+var_320]  +
add edi 68h +
inc dword ptr [esi+1374h]  +
mov [ebp+lpsz] edi +
call sub_1024F38  +
mov [ebp+var_320] eax +
cmp eax ebx +
jnz loc_1027508  +
jmp loc_1027612  +
mov eax [ebp+hObject] +
cmp eax 0FFFFFFFFh +
jz loc_10275E7  +
cmp [esi+8] eax +
jz loc_10275E7  +
push eax  +
call ds:CloseHandle  +
or [ebp+hObject] 0FFFFFFFFh +
push esi  +
push 4  +
jmp loc_10274FB  +
push dword ptr [edi+48h]  +
mov [ebp+var_330] 1 +
call free  +
push dword ptr [edi+58h]  +
call free  +
push edi  +
call free  +
add esp 0Ch +
cmp [esi] ebx +
jz loc_1027641  +
mov eax [ebp+hObject] +
cmp eax 0FFFFFFFFh +
jz loc_1027500  +
cmp [esi+8] eax +
jz loc_1027500  +
push eax  +
call ds:CloseHandle  +
or [ebp+hObject] 0FFFFFFFFh +
jmp loc_1027500  +
mov eax [esi+1380h] +
mov edi [esi+1370h] +
mov [ebp+var_338] eax +
mov eax [esi+1384h] +
mov [ebp+lpsz] ebx +
mov [ebp+var_334] eax +
mov [ebp+var_324] ebx +
mov [ebp+var_320] ebx +
jmp loc_10276B8  +
push edi  +
call sub_1027BEE  +
mov [ebp+var_318] eax +
cmp eax ebx +
jnz loc_10273B6  +
mov eax [edi+64h] +
add eax [edi+2Ch] +
mov ecx [edi+20h] +
add eax [edi+28h] +
lea eax [eax+ecx+2Eh] +
add [ebp+var_324] eax +
adc [ebp+var_320] ebx +
add [esi+1380h] eax +
adc [esi+1384h] ebx +
inc [ebp+lpsz]  +
mov edi [edi+68h] +
push esi  +
lea eax [ebp+hObject] +
push eax  +
cmp edi ebx +
jnz loc_1027673  +
mov eax [ebp+lpsz] +
push ebx  +
push ebx  +
push [ebp+var_334]  +
cdq   +
push [ebp+var_338]  +
push [ebp+var_320]  +
push [ebp+var_324]  +
push edx  +
push eax  +
call sub_102810B  +
mov edi eax +
cmp edi ebx +
jnz loc_10272A2  +
or dword ptr [esi+8] 0FFFFFFFFh +
cmp [ebp+hObject] 0FFFFFFFFh +
jz loc_1027722  +
push [ebp+hObject]  +
call ds:CloseHandle  +
test eax eax +
jnz loc_1027722  +
or [ebp+hObject] 0FFFFFFFFh +
push esi  +
push 0Ah  +
jmp loc_1026DCD  +
push esi  +
call sub_102BA11  +
push esi  +
call sub_10296B4  +
cmp [ebp+dwFileAttributes] ebx +
jz loc_1027747  +
push [ebp+dwFileAttributes]  +
push dword ptr [esi+1358h]  +
call sub_10253C9  +
push dword ptr [esi+1340h]  +
lea eax [esi+5130h] +
push dword ptr [esi+1394h]  +
push eax  +
call sub_10242D1  +
push esi  +
push dword ptr [esi+512Ch]  +
push dword ptr [esi+1358h]  +
call sub_10255A4  +
mov edi eax +
cmp edi ebx +
jz loc_10277AC  +
push dword ptr [esi+512Ch]  +
call free  +
mov eax [esi+512Ch] +
pop ecx  +
cmp eax [esi+1358h] +
jnz loc_1027797  +
mov [esi+1358h] ebx +
mov eax [ebp+var_32C] +
mov [esi+512Ch] ebx +
or dword ptr [eax+4Ch] 0FFFFFFFFh +
jmp loc_10272C0  +
mov eax [esi+5344h] +
mov ecx [ebp+var_32C] +
mov [ecx+4Ch] eax +
push dword ptr [esi+512Ch]  +
call free  +
mov eax [esi+512Ch] +
pop ecx  +
cmp eax [esi+1358h] +
jnz loc_10277DB  +
mov [esi+1358h] ebx +
mov eax [ebp+var_330] +
neg eax  +
sbb eax eax +
push esi  +
and eax 12h +
mov [esi+512Ch] ebx +
push eax  +
call sub_1026205  +
mov eax [esi] +
pop ebx  +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_101BC5D  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
mov eax [eax] +
push dword ptr [eax+58h]  +
mov eax [ebp+arg_0] +
mov eax [eax] +
push dword ptr [eax+58h]  +
call ds:lstrcmpiA  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+0Ch] +
push dword ptr [eax+58h]  +
push dword ptr [ebp+8]  +
call ds:lstrcmpiA  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
mov ecx [eax+1374h] +
test ecx ecx +
jz loc_102787A  +
push offset loc_102782F  +
push ecx  +
push dword ptr [eax+1378h]  +
push [ebp+arg_0]  +
call sub_1024E2D  +
test eax eax +
jz loc_102787A  +
mov eax [eax] +
jmp loc_102787C  +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 40h +
mov eax dword_1030118 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+lpString1] +
push ebx  +
mov ebx [ebp+arg_4] +
push esi  +
push edi  +
xor edi edi +
mov [ebp+var_40] eax +
mov [ebp+var_3C] ebx +
mov [ebp+hMem] edi +
mov [ebp+var_28] edi +
mov [ebp+var_10] edi +
cmp eax edi +
jz loc_1027B17  +
cmp byte ptr [eax] 0 +
jz loc_1027B17  +
push offset asc_1005370  +
push eax  +
call ds:lstrcmpA  +
test eax eax +
jz loc_1027B17  +
mov eax [ebx+5344h] +
cmp eax 0FFFFFFFFh +
jz loc_1027B17  +
push eax  +
call sub_10252A3  +
cmp edx edi +
mov esi eax +
mov [ebp+var_38] esi +
mov [ebp+var_34] edx +
jg loc_1027906  +
jl loc_10278FE  +
cmp esi 16h +
jnb loc_1027906  +
push 0Bh  +
pop eax  +
jmp loc_1027B06  +
cmp edx edi +
mov eax 1002Bh +
jg loc_102791D  +
jl loc_1027915  +
cmp esi eax +
jnb loc_102791D  +
mov [ebp+dwBytes] esi +
mov [ebp+var_20] edx +
jmp loc_1027923  +
mov [ebp+dwBytes] eax +
mov [ebp+var_20] edi +
sub esi [ebp+dwBytes] +
mov edi edx +
sbb edi [ebp+var_20] +
push 0  +
push edi  +
push esi  +
push dword ptr [ebx+5344h]  +
call sub_1025228  +
cmp eax esi +
jnz loc_1027980  +
cmp edx edi +
jnz loc_1027980  +
mov esi [ebp+dwBytes] +
push esi  +
push 2  +
call ds:GlobalAlloc  +
mov [ebp+hMem] eax +
test eax eax +
jz loc_1027989  +
push eax  +
call ds:GlobalLock  +
mov [ebp+var_28] eax +
test eax eax +
jz loc_1027989  +
push 0  +
lea ecx [ebp+NumberOfBytesRead] +
push ecx  +
push esi  +
push eax  +
push dword ptr [ebx+5344h]  +
call ds:ReadFile  +
test eax eax +
jz loc_1027980  +
cmp [ebp+NumberOfBytesRead] esi +
jz loc_1027990  +
mov [ebp+var_10] 0Bh +
jmp loc_1027990  +
mov [ebp+var_10] 4 +
push 16h  +
xor eax eax +
pop ecx  +
mov [ebp+var_1C] 12h +
mov [ebp+var_18] eax +
cmp [ebp+var_38] ecx +
jnz loc_10279AF  +
cmp [ebp+var_34] eax +
jnz loc_10279AF  +
mov [ebp+var_1C] ecx +
mov [ebp+var_18] eax +
mov ecx [ebp+dwBytes] +
sub ecx [ebp+var_1C] +
mov esi [ebp+var_20] +
sbb esi [ebp+var_18] +
mov [ebp+var_34] 3 +
mov [ebp+var_30] eax +
cmp [ebp+var_10] 0 +
jnz loc_1027AC3  +
test esi esi +
jl loc_1027AE5  +
jg loc_10279E1  +
test ecx ecx +
jb loc_1027AE5  +
mov eax [ebp+var_20] +
cmp [ebp+var_18] eax +
jg loc_1027AE5  +
jl loc_10279FB  +
mov eax [ebp+dwBytes] +
cmp [ebp+var_1C] eax +
ja loc_1027AE5  +
mov edi [ebp+var_28] +
mov al [ecx+edi] +
mov [ebp+var_11] al +
mov eax ecx +
add eax 1 +
mov bl [eax+edi] +
mov edx esi +
adc edx 0 +
add eax 1 +
push 12h  +
pop edi  +
adc edx 0 +
sub edi [ebp+var_34] +
jmp loc_1027A74  +
mov ebx [ebp+var_28] +
mov bl [eax+ebx] +
add eax 1 +
adc edx 0 +
cmp [ebp+var_11] 50h +
mov [ebp+var_12] bl +
jnz loc_1027A6A  +
cmp [ebp+var_9] 4Bh +
jnz loc_1027A6A  +
cmp bl 5 +
jnz loc_1027A6A  +
mov ebx [ebp+var_28] +
cmp byte ptr [eax+ebx] 6 +
jnz loc_1027A6A  +
cmp byte ptr [eax+ebx+1] 0 +
jnz loc_1027A63  +
cmp byte ptr [eax+ebx+2] 0 +
jnz loc_1027A63  +
and [ebp+var_10] 0 +
mov [ebp+var_30] 1 +
jmp loc_1027A6A  +
mov [ebp+var_10] 15h +
mov bl [ebp+var_9] +
mov [ebp+var_11] bl +
mov bl [ebp+var_12] +
dec edi  +
mov [ebp+var_9] bl +
test edi edi +
jg loc_1027A1F  +
xor eax eax +
cmp [ebp+var_30] eax +
jnz loc_1027A93  +
cmp esi eax +
jg loc_1027A93  +
jl loc_1027A8C  +
cmp ecx eax +
ja loc_1027A93  +
mov [ebp+var_10] 0Bh +
add [ebp+var_1C] 12h +
mov ecx [ebp+dwBytes] +
mov esi [ebp+var_20] +
adc [ebp+var_18] eax +
sub ecx [ebp+var_1C] +
mov [ebp+var_34] eax +
sbb esi [ebp+var_18] +
cmp esi eax +
jg loc_1027AB7  +
jl loc_1027AB3  +
cmp ecx eax +
jnb loc_1027AB7  +
xor ecx ecx +
xor esi esi +
mov ebx [ebp+var_3C] +
cmp [ebp+var_30] eax +
jz loc_10279C5  +
cmp [ebp+var_10] 0Bh +
jnz loc_1027AE5  +
push ebx  +
push [ebp+var_40]  +
push 0  +
call sub_102C423  +
push eax  +
call sub_102C0F1  +
test eax eax +
jz loc_1027AE5  +
mov [ebp+var_10] 15h +
xor edi edi +
cmp [ebp+var_28] edi +
jz loc_1027AF5  +
push [ebp+hMem]  +
call ds:GlobalUnlock  +
cmp [ebp+hMem] edi +
jz loc_1027B03  +
push [ebp+hMem]  +
call ds:GlobalFree  +
mov eax [ebp+var_10] +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_101BC5D  +
leave   +
retn 8  +
mov [ebp+var_10] edi +
jmp loc_1027AE7  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1Ch +
mov eax dword_1030118 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
mov ecx [ebp+arg_4] +
push esi  +
push edi  +
xor edi edi +
cmp [ebp+arg_C] edi +
mov [ebp+hFile] eax +
mov [ebp+var_18] ecx +
mov [ebp+var_C] 1 +
jl loc_1027BB9  +
jg loc_1027B57  +
cmp [ebp+nNumberOfBytesToRead] 0FFFFFFFFh +
jbe loc_1027BB9  +
mov [ebp+var_10] edi +
mov eax [ebp+arg_C] +
cmp [ebp+var_10] eax +
jg loc_1027BD6  +
jl loc_1027B69  +
cmp edi [ebp+nNumberOfBytesToRead] +
jnb loc_1027BD6  +
mov ecx [ebp+nNumberOfBytesToRead] +
sub ecx edi +
sbb eax [ebp+var_10] +
mov esi 8000h +
test eax eax +
jg loc_1027B85  +
jl loc_1027B80  +
cmp ecx esi +
jnb loc_1027B85  +
mov esi [ebp+nNumberOfBytesToRead] +
sub esi edi +
push 0  +
lea eax [ebp+NumberOfBytesRead] +
push eax  +
mov eax [ebp+var_18] +
push esi  +
add eax edi +
push eax  +
push [ebp+hFile]  +
call ds:ReadFile  +
test eax eax +
jz loc_1027BAD  +
cmp [ebp+NumberOfBytesRead] esi +
jnz loc_1027BAD  +
add edi [ebp+NumberOfBytesRead] +
adc [ebp+var_10] 0 +
jmp loc_1027BB1  +
and [ebp+var_C] 0 +
cmp [ebp+var_C] 0 +
jnz loc_1027B5A  +
jmp loc_1027BD6  +
mov esi [ebp+nNumberOfBytesToRead] +
push edi  +
lea edx [ebp+NumberOfBytesRead] +
push edx  +
push esi  +
push ecx  +
push eax  +
call ds:ReadFile  +
test eax eax +
jz loc_1027BD3  +
cmp [ebp+NumberOfBytesRead] esi +
jz loc_1027BD6  +
mov [ebp+var_C] edi +
mov ecx [ebp+var_4] +
mov eax [ebp+var_C] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_101BC5D  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 124h +
mov eax dword_1030118 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_4] +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
push dword ptr [esi+58h]  +
xor edi edi +
mov [ebp+var_11C] eax +
mov [ebp+var_118] edi +
call ds:lstrlenA  +
inc eax  +
cmp eax 104h +
jbe loc_1027C32  +
push 0Eh  +
pop eax  +
jmp loc_10280F6  +
push ebx  +
push eax  +
lea eax [ebp+szDst] +
push eax  +
push dword ptr [esi+58h]  +
call ds:CharToOemBuffA  +
xor ebx ebx +
inc ebx  +
cmp [esi+1Ch] edi +
jl loc_1027C5A  +
jg loc_1027C54  +
cmp dword ptr [esi+18h] 0FFFFFFFFh +
jb loc_1027C5A  +
mov [ebp+var_118] ebx +
cmp [esi+14h] edi +
jl loc_1027C6E  +
jg loc_1027C67  +
cmp dword ptr [esi+10h] 0FFFFFFFFh +
jb loc_1027C6E  +
or [ebp+var_118] 2 +
cmp [esi+44h] edi +
jl loc_1027C82  +
jg loc_1027C7B  +
cmp dword ptr [esi+40h] 0FFFFFFFFh +
jb loc_1027C82  +
or [ebp+var_118] 4 +
mov eax [ebp+var_118] +
dec eax  +
push 14h  +
pop edi  +
jz loc_1027E3A  +
dec eax  +
jz loc_1027E02  +
dec eax  +
jz loc_1027DBE  +
dec eax  +
jz loc_1027D83  +
dec eax  +
jz loc_1027D46  +
dec eax  +
jz loc_1027D46  +
dec eax  +
jz loc_1027CF4  +
mov eax [esi+28h] +
xor ebx ebx +
mov [ebp+var_118] ebx +
mov [ebp+var_10C] ebx +
cmp eax ebx +
jbe loc_1027CE9  +
push eax  +
call malloc  +
pop ecx  +
mov [ebp+var_114] eax +
cmp eax ebx +
jnz loc_1027E73  +
push 4  +
jmp loc_10280F4  +
mov [ebp+var_114] ebx +
jmp loc_1027E73  +
mov ecx [esi+28h] +
push 1Ch  +
pop eax  +
add ecx eax +
push ecx  +
mov [ebp+var_10C] eax +
call malloc  +
pop ecx  +
mov [ebp+var_114] eax +
test eax eax +
jz loc_1027CE2  +
mov [eax] bx +
push 18h  +
pop ecx  +
mov [eax+2] cx +
mov ecx [esi+18h] +
mov [eax+4] ecx +
mov ecx [esi+1Ch] +
mov [eax+8] ecx +
mov ecx [esi+10h] +
mov [eax+0Ch] ecx +
mov ecx [esi+14h] +
mov [eax+10h] ecx +
mov ecx [esi+40h] +
mov [eax+14h] ecx +
mov ecx [esi+44h] +
mov [eax+18h] ecx +
jmp loc_1027E73  +
mov eax [esi+28h] +
add eax edi +
push eax  +
mov [ebp+var_10C] edi +
call malloc  +
pop ecx  +
mov [ebp+var_114] eax +
test eax eax +
jz loc_1027CE2  +
mov [eax] bx +
push 10h  +
pop ecx  +
mov [eax+2] cx +
mov ecx [esi+18h] +
mov [eax+4] ecx +
mov ecx [esi+1Ch] +
mov [eax+8] ecx +
mov ecx [esi+40h] +
mov [eax+0Ch] ecx +
mov ecx [esi+44h] +
jmp loc_1027DFD  +
mov ecx [esi+28h] +
push 0Ch  +
pop eax  +
add ecx eax +
push ecx  +
mov [ebp+var_10C] eax +
call malloc  +
pop ecx  +
mov [ebp+var_114] eax +
test eax eax +
jz loc_1027CE2  +
push 8  +
pop ecx  +
mov [eax] bx +
mov [eax+2] cx +
mov ecx [esi+40h] +
mov [eax+4] ecx +
mov ecx [esi+44h] +
jmp loc_1027E70  +
mov eax [esi+28h] +
add eax edi +
push eax  +
mov [ebp+var_10C] edi +
call malloc  +
pop ecx  +
mov [ebp+var_114] eax +
test eax eax +
jz loc_1027CE2  +
push 10h  +
mov [eax] bx +
pop ecx  +
mov [eax+2] cx +
mov ecx [esi+18h] +
mov [eax+4] ecx +
mov ecx [esi+1Ch] +
mov [eax+8] ecx +
mov ecx [esi+10h] +
mov [eax+0Ch] ecx +
mov ecx [esi+14h] +
mov [eax+10h] ecx +
jmp loc_1027E73  +
mov ecx [esi+28h] +
push 0Ch  +
pop eax  +
add ecx eax +
push ecx  +
mov [ebp+var_10C] eax +
call malloc  +
pop ecx  +
mov [ebp+var_114] eax +
test eax eax +
jz loc_1027CE2  +
push 8  +
pop ecx  +
mov [eax] bx +
mov [eax+2] cx +
mov ecx [esi+10h] +
mov [eax+4] ecx +
mov ecx [esi+14h] +
jmp loc_1027E70  +
mov ecx [esi+28h] +
push 0Ch  +
pop eax  +
add ecx eax +
push ecx  +
mov [ebp+var_10C] eax +
call malloc  +
pop ecx  +
mov [ebp+var_114] eax +
test eax eax +
jz loc_1027CE2  +
push 8  +
pop ecx  +
mov [eax] bx +
mov [eax+2] cx +
mov ecx [esi+18h] +
mov [eax+4] ecx +
mov ecx [esi+1Ch] +
mov [eax+8] ecx +
mov eax [esi+28h] +
test eax eax +
jbe loc_1027E9D  +
cmp [ebp+var_114] 0 +
jz loc_1027E9D  +
push eax  +
movzx eax word ptr [ebp+var_10C] +
push dword ptr [esi+50h]  +
add eax [ebp+var_114] +
push eax  +
call memcpy  +
add esp 0Ch +
movzx eax word ptr [ebp+var_10C] +
add eax [esi+2Ch] +
mov ecx [esi+28h] +
add eax [esi+20h] +
and [ebp+var_120] 0 +
lea eax [eax+ecx+2Eh] +
mov [ebp+nNumberOfBytesToWrite] eax +
inc eax  +
push eax  +
call malloc  +
mov ebx eax +
pop ecx  +
test ebx ebx +
jz loc_10280DD  +
cmp [ebp+var_118] 0 +
mov dword ptr [ebx] 2014B50h +
jz loc_1027F3C  +
mov ax [esi] +
mov [ebx+4] ax +
mov ax [esi+2] +
mov [ebx+6] ax +
mov ax [esi+4] +
mov [ebx+8] ax +
mov ax [esi+6] +
mov [ebx+0Ah] ax +
mov eax [esi+8] +
mov [ebx+0Ch] eax +
mov eax [esi+0Ch] +
mov [ebx+10h] eax +
mov eax [ebp+var_118] +
dec eax  +
jz loc_1027FC2  +
dec eax  +
jz loc_1027FBA  +
dec eax  +
jz loc_1027FAA  +
dec eax  +
jz loc_1027F95  +
dec eax  +
jz loc_1027F8C  +
dec eax  +
jz loc_1027F7D  +
dec eax  +
jz loc_1027F6E  +
mov eax [esi+18h] +
mov [ebx+18h] eax +
jmp loc_1027FC9  +
xor eax eax +
cmp word ptr [esi+6] 9 +
setz al  +
add eax edi +
movzx ecx ax +
movzx eax word ptr [esi] +
cmp ax 2Dh +
jb loc_1027F5A  +
mov [ebx+4] cx +
jmp loc_1027F5E  +
mov [ebx+4] ax +
movzx eax word ptr [esi+2] +
cmp ax 2Dh +
jb loc_1027EEA  +
mov [ebx+6] cx +
jmp loc_1027EEE  +
or eax 0FFFFFFFFh +
lea edi [ebx+18h] +
stos   +
or eax eax +
lea edi [ebx+14h] +
stos   +
jmp loc_1027FA4  +
mov eax [esi+18h] +
mov [ebx+18h] eax +
or eax 0FFFFFFFFh +
lea edi [ebx+14h] +
stos   +
jmp loc_1027FA1  +
or eax 0FFFFFFFFh +
lea edi [ebx+18h] +
stos   +
jmp loc_1027F9B  +
mov eax [esi+18h] +
mov [ebx+18h] eax +
mov eax [esi+10h] +
mov [ebx+14h] eax +
or eax 0FFFFFFFFh +
lea edi [ebx+2Ah] +
stos   +
jmp loc_1027FD5  +
or eax 0FFFFFFFFh +
lea edi [ebx+18h] +
stos   +
or eax 0FFFFFFFFh +
lea edi [ebx+14h] +
stos   +
jmp loc_1027FCF  +
mov eax [esi+18h] +
mov [ebx+18h] eax +
jmp loc_1027FB1  +
or eax 0FFFFFFFFh +
lea edi [ebx+18h] +
stos   +
mov eax [esi+10h] +
mov [ebx+14h] eax +
mov eax [esi+40h] +
mov [ebx+2Ah] eax +
mov ax [esi+20h] +
mov di word ptr [ebp+var_10C] +
mov [ebx+1Ch] ax +
add di [esi+28h] +
mov [ebx+1Eh] di +
mov ax [esi+2Ch] +
sub di [esi+28h] +
mov [ebx+20h] ax +
mov ax [esi+30h] +
mov [ebx+22h] ax +
mov ax [esi+34h] +
mov [ebx+24h] ax +
mov eax [esi+38h] +
mov [ebx+26h] eax +
push dword ptr [esi+20h]  +
lea eax [ebp+szDst] +
push eax  +
lea eax [ebx+2Eh] +
push eax  +
call memcpy  +
add esp 0Ch +
cmp [ebp+var_118] 0 +
jz loc_102803C  +
movzx eax di +
add eax [esi+28h] +
push eax  +
push [ebp+var_114]  +
jmp loc_1028047  +
mov eax [esi+28h] +
test eax eax +
jbe loc_1028057  +
push eax  +
push dword ptr [esi+50h]  +
mov eax [esi+20h] +
lea eax [eax+ebx+2Eh] +
push eax  +
call memcpy  +
add esp 0Ch +
mov eax [esi+2Ch] +
test eax eax +
jbe loc_102807A  +
mov ecx [esi+28h] +
push eax  +
push dword ptr [esi+54h]  +
movzx eax di +
add eax [esi+20h] +
add eax ebx +
lea eax [eax+ecx+2Eh] +
push eax  +
call memcpy  +
add esp 0Ch +
push 0  +
lea eax [ebp+NumberOfBytesWritten] +
push eax  +
push [ebp+nNumberOfBytesToWrite]  +
mov eax [ebp+var_11C] +
push ebx  +
push dword ptr [eax]  +
call ds:WriteFile  +
test eax eax +
jz loc_10280D6  +
mov eax [ebp+nNumberOfBytesToWrite] +
cmp [ebp+NumberOfBytesWritten] eax +
jnz loc_10280D6  +
push ebx  +
call free  +
cmp [ebp+var_114] 0 +
pop ecx  +
jz loc_10280CE  +
push [ebp+var_114]  +
movzx eax di +
mov [esi+64h] eax +
call free  +
pop ecx  +
jmp loc_10280D2  +
and dword ptr [esi+64h] 0 +
xor eax eax +
jmp loc_10280F5  +
push ebx  +
call free  +
pop ecx  +
cmp [ebp+var_114] 0 +
jz loc_10280F2  +
push [ebp+var_114]  +
call free  +
pop ecx  +
push 0Ah  +
pop eax  +
pop ebx  +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_101BC5D  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 68h +
mov eax dword_1030118 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_1C] +
mov ecx [ebp+arg_20] +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
xor edi edi +
cmp esi edi +
mov [ebp+var_68] eax +
mov [ebp+var_64] ecx +
mov [ebp+var_58] edi +
jg loc_1028167  +
jl loc_1028145  +
cmp ebx 0FFFEh +
ja loc_1028167  +
cmp [ebp+arg_C] edi +
jg loc_1028167  +
jl loc_1028152  +
cmp [ebp+arg_8] 0FFFFFFFEh +
ja loc_1028167  +
cmp [ebp+arg_14] edi +
jl loc_1028229  +
jg loc_1028167  +
cmp [ebp+arg_10] 0FFFFFFFEh +
jbe loc_1028229  +
push 2Dh  +
pop edx  +
mov [ebp+var_48] dx +
mov [ebp+var_46] dx +
mov edx [ebp+arg_8] +
xor eax eax +
inc eax  +
mov [ebp+var_2C] edx +
mov edx [ebp+arg_C] +
push eax  +
mov [ebp+var_28] edx +
mov edx [ebp+arg_10] +
push edi  +
push edi  +
push dword ptr [ecx]  +
mov [ebp+var_24] edx +
mov edx [ebp+arg_14] +
mov [ebp+var_58] eax +
mov [ebp+var_54] 6064B50h +
mov [ebp+var_50] 2Ch +
mov [ebp+var_4C] edi +
mov [ebp+var_34] ebx +
mov [ebp+var_30] esi +
mov [ebp+var_20] edx +
mov [ebp+var_1C] 7064B50h +
call sub_1025228  +
push 4Dh  +
mov [ebp+var_14] eax +
mov [ebp+var_10] edx +
mov [ebp+var_44] edi +
mov [ebp+var_40] edi +
mov [ebp+var_3C] ebx +
mov [ebp+var_38] esi +
mov [ebp+var_18] edi +
mov [ebp+var_C] edi +
call malloc  +
pop ecx  +
mov [ebp+var_5C] eax +
cmp eax edi +
jz loc_1028328  +
push 0Eh  +
pop ecx  +
push 5  +
mov edi eax +
lea esi [ebp+var_54] +
movs   +
pop ecx  +
lea edi [eax+38h] +
push 0  +
lea esi [ebp+var_1C] +
movs   +
lea ecx [ebp+NumberOfBytesWritten] +
push ecx  +
push 4Ch  +
push eax  +
mov eax [ebp+var_64] +
push dword ptr [eax]  +
call ds:WriteFile  +
test eax eax +
jz loc_1028323  +
cmp [ebp+NumberOfBytesWritten] 4Ch +
jnz loc_1028323  +
push [ebp+var_5C]  +
call free  +
pop ecx  +
xor edi edi +
mov eax [ebp+arg_18] +
add eax 16h +
mov [ebp+nNumberOfBytesToWrite] eax +
inc eax  +
push eax  +
mov [ebp+var_5C] edi +
call malloc  +
mov esi eax +
pop ecx  +
cmp esi edi +
jz loc_1028328  +
xor eax eax +
lea edi [esi+4] +
mov dword ptr [esi] 6054B50h +
stos   +
xor ecx ecx +
or eax 0FFFFFFFFh +
cmp [ebp+var_58] ecx +
jz loc_1028273  +
cmp [ebp+arg_4] ecx +
jl loc_1028273  +
jg loc_102826C  +
cmp ebx 0FFFEh +
jbe loc_1028273  +
lea edi [esi+8] +
stos   +
jmp loc_1028277  +
mov [esi+8] bx +
cmp [ebp+var_58] ecx +
jz loc_10282C2  +
cmp [ebp+arg_4] ecx +
jl loc_1028292  +
jg loc_102828B  +
cmp ebx 0FFFEh +
jbe loc_1028292  +
lea edi [esi+0Ah] +
stos   +
jmp loc_1028296  +
mov [esi+0Ah] bx +
cmp [ebp+arg_C] ecx +
jl loc_10282A9  +
jg loc_10282A3  +
cmp [ebp+arg_8] 0FFFFFFFEh +
jbe loc_10282A9  +
lea edi [esi+0Ch] +
stos   +
jmp loc_10282AF  +
mov edx [ebp+arg_8] +
mov [esi+0Ch] edx +
cmp [ebp+arg_14] ecx +
jl loc_10282CC  +
jg loc_10282BC  +
cmp [ebp+arg_10] 0FFFFFFFEh +
jbe loc_10282CC  +
lea edi [esi+10h] +
stos   +
jmp loc_10282D2  +
mov eax [ebp+arg_8] +
mov [esi+0Ah] bx +
mov [esi+0Ch] eax +
mov eax [ebp+arg_10] +
mov [esi+10h] eax +
mov eax [ebp+arg_18] +
mov [esi+14h] ax +
cmp eax ecx +
jz loc_10282EF  +
push eax  +
push [ebp+var_68]  +
lea eax [esi+16h] +
push eax  +
call memcpy  +
add esp 0Ch +
xor ecx ecx +
mov edi [ebp+nNumberOfBytesToWrite] +
push ecx  +
lea eax [ebp+NumberOfBytesWritten] +
push eax  +
mov eax [ebp+var_64] +
push edi  +
push esi  +
push dword ptr [eax]  +
call ds:WriteFile  +
test eax eax +
jz loc_1028318  +
cmp [ebp+NumberOfBytesWritten] edi +
jnz loc_1028318  +
push esi  +
call free  +
pop ecx  +
xor eax eax +
jmp loc_102832B  +
push esi  +
call free  +
pop ecx  +
push 0Ah  +
jmp loc_102832A  +
push [ebp+var_5C]  +
jmp loc_1028319  +
push 4  +
pop eax  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_101BC5D  +
leave   +
retn 28h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 50h +
mov eax dword_1030118 +
xor eax ebp +
mov [ebp+var_4] eax +
mov edx [ebp+arg_8] +
mov ecx [ebp+arg_0] +
mov eax [ebp+arg_4] +
mov [ebp+var_50] edx +
mov edx [ebp+arg_C] +
mov [ebp+var_48] edx +
mov edx [ebp+arg_10] +
push ebx  +
xor ebx ebx +
push esi  +
mov esi [ebp+arg_18] +
mov [ebp+var_44] edx +
mov edx [ebp+arg_14] +
mov [ebp+var_34] ecx +
mov [ebp+var_40] eax +
mov [ebp+var_4C] edx +
mov [ebp+var_30] ebx +
mov [ebp+var_38] ebx +
mov [esi] ebx +
cmp ecx ebx +
jz loc_10284D0  +
cmp [eax] ebx +
jbe loc_10284D0  +
movzx edx word ptr [eax] +
cmp dx 4 +
jbe loc_10284D0  +
push edi  +
push 8  +
xor eax eax +
pop ecx  +
lea edi [ebp+var_24] +
add edx 0FFFFFFFCh +
stos   +
mov edi [ebp+var_40] +
movzx eax dx +
mov [ebp+var_28] ebx +
mov [ebp+var_3C] ebx +
mov [ebp+var_2C] eax +
inc ebx  +
xor ecx ecx +
cmp [ebp+var_3C] ecx +
jnz loc_102841D  +
mov ax word ptr [ebp+var_28] +
cmp ax word ptr [ebp+var_2C] +
ja loc_102841D  +
movzx eax ax +
add eax [ebp+var_34] +
cmp [eax] bx +
mov ax [eax+2] +
jnz loc_1028410  +
add ax 4 +
movzx edi ax +
mov [ebp+var_3C] ebx +
cmp di 20h +
ja loc_102840B  +
movzx eax di +
push eax  +
push [ebp+var_34]  +
lea eax [ebp+var_24] +
push eax  +
call memcpy  +
add esp 0Ch +
mov [ebp+var_30] ebx +
xor ecx ecx +
jmp loc_1028418  +
mov [ebp+var_38] ebx +
jmp loc_1028418  +
add ax 4 +
add word ptr [ebp+var_28] ax +
cmp [ebp+var_38] ecx +
jz loc_10283C1  +
cmp [ebp+var_38] ecx +
jz loc_102842A  +
mov [ebp+var_30] ecx +
jmp loc_10284CF  +
cmp [ebp+var_30] ecx +
jz loc_10284CF  +
cmp [ebp+var_3C] ecx +
jz loc_10284CF  +
movzx edx di +
mov [esi] edx +
cmp di 8 +
jb loc_1028459  +
mov eax [ebp+var_50] +
cmp eax ecx +
jz loc_1028459  +
mov esi [ebp+var_20] +
mov [eax] esi +
mov esi [ebp+var_1C] +
mov [eax+4] esi +
cmp di 10h +
jb loc_1028471  +
mov eax [ebp+var_48] +
cmp eax ecx +
jz loc_1028471  +
mov esi [ebp+var_18] +
mov [eax] esi +
mov esi [ebp+var_14] +
mov [eax+4] esi +
cmp di 18h +
jb loc_1028489  +
mov eax [ebp+var_44] +
cmp eax ecx +
jz loc_1028489  +
mov esi [ebp+var_10] +
mov [eax] esi +
mov esi [ebp+var_C] +
mov [eax+4] esi +
cmp di 20h +
jb loc_102849B  +
mov eax [ebp+var_4C] +
cmp eax ecx +
jz loc_102849B  +
mov esi [ebp+var_8] +
mov [eax] esi +
cmp [ebp+arg_1C] ecx +
jz loc_10284CF  +
add [ebp+var_2C] 4 +
movzx esi word ptr [ebp+var_2C] +
movzx eax word ptr [ebp+var_28] +
sub esi edx +
mov ecx esi +
sub ecx eax +
test ecx ecx +
jle loc_10284CA  +
push ecx  +
mov ecx [ebp+var_34] +
add edx eax +
add edx ecx +
push edx  +
add eax ecx +
push eax  +
call memmove  +
add esp 0Ch +
mov eax [ebp+var_40] +
mov [eax] esi +
pop edi  +
mov ecx [ebp+var_4] +
mov eax [ebp+var_30] +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_101BC5D  +
leave   +
retn 20h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
mov eax [ebp+arg_4] +
add eax ecx +
cmp eax ecx +
jb loc_1028502  +
mov ecx [ebp+arg_8] +
mov [ecx] eax +
xor eax eax +
jmp loc_102850D  +
mov eax [ebp+arg_8] +
or dword ptr [eax] 0FFFFFFFFh +
mov eax 80070216h +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
add eax [ebp+arg_8] +
mov ecx [ebp+arg_4] +
adc ecx [ebp+arg_C] +
cmp ecx [ebp+arg_4] +
jb loc_102853F  +
ja loc_1028533  +
cmp eax [ebp+arg_0] +
jb loc_102853F  +
mov edx [ebp+arg_10] +
mov [edx] eax +
mov [edx+4] ecx +
xor eax eax +
jmp loc_102854E  +
mov eax [ebp+arg_10] +
or dword ptr [eax] 0FFFFFFFFh +
or dword ptr [eax+4] 0FFFFFFFFh +
mov eax 80070216h +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 60h +
mov eax dword_1030118 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
push edi  +
lea eax [ebp+lDistanceToMove] +
push eax  +
xor esi esi +
lea eax [ebp+var_54] +
push eax  +
push dword ptr [edi+1358h]  +
lea ebx [edi+1370h] +
push esi  +
mov [ebp+var_58] edi +
mov [ebp+var_54] esi +
mov [edi+1360h] esi +
mov [edi+1364h] esi +
mov [ebx] esi +
mov [ebp+lDistanceToMove] esi +
mov [ebp+var_48] esi +
call sub_1025C61  +
test eax eax +
jz loc_10285B2  +
mov eax [ebp+lDistanceToMove] +
or eax [ebp+var_48] +
jz loc_10285C6  +
push edi  +
push dword ptr [edi+1358h]  +
call sub_1027885  +
cmp eax esi +
jnz loc_1029115  +
push dword ptr [edi+1358h]  +
call sub_1025F49  +
cmp eax esi +
jnz loc_1029115  +
mov eax [edi+1358h] +
cmp eax esi +
jz loc_1029113  +
cmp byte ptr [eax] 0 +
jz loc_1029113  +
mov eax [edi+5344h] +
cmp eax 0FFFFFFFFh +
jz loc_1029113  +
mov ecx [ebp+lDistanceToMove] +
or ecx [ebp+var_48] +
jz loc_1029113  +
push esi  +
push esi  +
push esi  +
push eax  +
call sub_1025228  +
and eax edx +
cmp eax 0FFFFFFFFh +
jnz loc_1028623  +
push 0Bh  +
pop eax  +
jmp loc_1029115  +
mov [ebp+var_5C] ebx +
mov [ebp+var_44] esi +
mov [ebp+var_40] esi +
mov [edi+1374h] esi +
mov ebx 4034B50h +
jmp loc_1028646  +
cmp byte ptr [ebp+var_39] 50h +
jz loc_102865C  +
add [ebp+var_44] 1 +
adc [ebp+var_40] esi +
push esi  +
push 1  +
lea eax [ebp+var_39] +
push eax  +
push dword ptr [edi+5344h]  +
call sub_1027B21  +
test eax eax +
jnz loc_1028639  +
mov al byte ptr [ebp+var_39] +
push esi  +
mov byte ptr [ebp+var_39+1] al +
push 3  +
lea eax [ebp+var_39+2] +
push eax  +
push dword ptr [edi+5344h]  +
call sub_1027B21  +
test eax eax +
jz loc_10286D2  +
movzx eax [ebp+var_35] +
movzx ecx byte ptr [ebp+var_39+3] +
shl eax 8 +
or eax ecx +
movzx ecx byte ptr [ebp+var_39+2] +
shl eax 8 +
or eax ecx +
movzx ecx byte ptr [ebp+var_39+1] +
shl eax 8 +
or eax ecx +
mov [ebp+lDistanceToMove] eax +
mov [ebp+var_48] esi +
cmp eax ebx +
jnz loc_10286A5  +
cmp esi esi +
jz loc_10286D2  +
cmp eax 6054B50h +
jnz loc_10286B1  +
cmp [ebp+var_48] esi +
jz loc_10286D2  +
push 1  +
push 0FFFFFFFFh  +
push 0FFFFFFFDh  +
push dword ptr [edi+5344h]  +
call sub_1025228  +
and eax edx +
cmp eax 0FFFFFFFFh +
jnz loc_102863F  +
jmp loc_102861B  +
mov eax [ebp+var_44] +
movzx ecx byte ptr [ebp+var_39+3] +
mov [edi+1360h] eax +
mov eax [ebp+var_40] +
mov [edi+1364h] eax +
movzx eax [ebp+var_35] +
shl eax 8 +
or eax ecx +
movzx ecx byte ptr [ebp+var_39+2] +
shl eax 8 +
or eax ecx +
movzx ecx byte ptr [ebp+var_39+1] +
shl eax 8 +
or eax ecx +
cmp eax ebx +
jnz loc_1028B4A  +
push 70h  +
call malloc  +
mov esi eax +
pop ecx  +
test esi esi +
jz loc_1028F78  +
push 70h  +
push 0  +
push esi  +
call memset  +
add esp 0Ch +
push 0  +
push 1Ah  +
lea eax [ebp+var_39+1] +
push eax  +
push dword ptr [edi+5344h]  +
call sub_1027B21  +
test eax eax +
jz loc_102861B  +
movzx ax byte ptr [ebp+var_39+2] +
movzx cx byte ptr [ebp+var_39+1] +
shl ax 8 +
or ax cx +
mov [esi+2] ax +
push 14h  +
pop eax  +
mov [esi] ax +
movzx ax [ebp+var_35] +
movzx cx byte ptr [ebp+var_39+3] +
shl ax 8 +
or ax cx +
mov [esi+36h] ax +
mov [esi+4] ax +
movzx cx [ebp+var_34] +
movzx eax ax +
mov [ebp+var_60] eax +
movzx ax [ebp+var_33] +
shl ax 8 +
or ax cx +
mov [esi+6] ax +
movzx eax [ebp+var_2F] +
movzx ecx [ebp+var_30] +
shl eax 8 +
or eax ecx +
movzx ecx [ebp+var_31] +
shl eax 8 +
or eax ecx +
movzx ecx [ebp+var_32] +
shl eax 8 +
or eax ecx +
mov [esi+8] eax +
movzx eax [ebp+var_2B] +
movzx ecx [ebp+var_2C] +
shl eax 8 +
or eax ecx +
movzx ecx [ebp+var_2D] +
shl eax 8 +
or eax ecx +
movzx ecx [ebp+var_2E] +
shl eax 8 +
or eax ecx +
mov [esi+0Ch] eax +
movzx eax [ebp+var_27] +
movzx ecx [ebp+var_28] +
shl eax 8 +
or eax ecx +
movzx ecx [ebp+var_29] +
shl eax 8 +
or eax ecx +
movzx ecx [ebp+var_2A] +
shl eax 8 +
or eax ecx +
mov [esi+10h] eax +
xor ecx ecx +
mov [esi+14h] ecx +
movzx eax [ebp+var_23] +
movzx edx [ebp+var_24] +
shl eax 8 +
or eax edx +
movzx edx [ebp+var_25] +
shl eax 8 +
or eax edx +
movzx edx [ebp+var_26] +
shl eax 8 +
or eax edx +
mov [esi+18h] eax +
mov [esi+1Ch] ecx +
movzx ebx [ebp+var_21] +
movzx eax [ebp+var_22] +
shl ebx 8 +
or ebx eax +
mov [esi+20h] ebx +
movzx eax [ebp+var_1F] +
movzx edx [ebp+var_20] +
shl eax 8 +
or eax edx +
mov [esi+24h] eax +
mov [esi+2Ch] ecx +
mov [esi+30h] ecx +
xor eax eax +
mov [esi+34h] ax +
mov eax [ebp+var_54] +
mov [esi+38h] eax +
xor eax eax +
mov [esi+5Ch] ax +
mov eax [esi+10h] +
mov [ebp+lDistanceToMove] eax +
mov eax [esi+14h] +
mov [ebp+var_48] eax +
mov eax [ebp+var_5C] +
mov [eax] esi +
lea eax [esi+68h] +
mov [eax] ecx +
mov [ebp+var_5C] eax +
cmp ebx ecx +
jz loc_1028F7F  +
lea eax [ebx+1] +
push eax  +
call malloc  +
pop ecx  +
mov [esi+58h] eax +
test eax eax +
jz loc_1028F78  +
mov eax [esi+24h] +
test eax eax +
jz loc_10288AB  +
push eax  +
call malloc  +
pop ecx  +
mov [esi+4Ch] eax +
test eax eax +
jz loc_1028F78  +
mov eax [esi+58h] +
push 0  +
push ebx  +
mov byte ptr [eax] 0 +
push dword ptr [esi+58h]  +
push dword ptr [edi+5344h]  +
call sub_1027B21  +
test eax eax +
jz loc_102861B  +
mov eax [esi+58h] +
mov byte ptr [ebx+eax] 0 +
mov eax [esi+24h] +
test eax eax +
jz loc_10288F1  +
push 0  +
push eax  +
push dword ptr [esi+4Ch]  +
push dword ptr [edi+5344h]  +
call sub_1027B21  +
test eax eax +
jz loc_102861B  +
push 1  +
xor eax eax +
lea ecx [ebp+lpszDst] +
push ecx  +
push eax  +
push eax  +
mov [ebp+lpszDst] eax +
mov [esi+60h] eax +
lea eax [esi+10h] +
push eax  +
lea eax [esi+18h] +
push eax  +
lea eax [esi+24h] +
push eax  +
push dword ptr [esi+4Ch]  +
call sub_1028341  +
test eax eax +
jz loc_102892B  +
mov eax [ebp+lpszDst] +
mov [esi+60h] eax +
mov eax [esi+10h] +
mov [ebp+lDistanceToMove] eax +
mov eax [esi+14h] +
mov [ebp+var_48] eax +
mov eax [ebp+lDistanceToMove] +
or eax [ebp+var_48] +
jz loc_1028951  +
push 1  +
push [ebp+var_48]  +
push [ebp+lDistanceToMove]  +
push dword ptr [edi+5344h]  +
call sub_1025228  +
and eax edx +
cmp eax 0FFFFFFFFh +
jz loc_1028A2C  +
mov eax [esi+58h] +
push ebx  +
push eax  +
push eax  +
call ds:OemToCharBuffA  +
push edi  +
push dword ptr [esi+58h]  +
call sub_102591B  +
mov [esi+48h] eax +
test eax eax +
jz loc_1028F78  +
mov eax [ebp+var_44] +
mov [esi+40h] eax +
mov eax [ebp+var_40] +
mov [esi+44h] eax +
mov eax [esi+24h] +
xor edx edx +
lea eax [eax+ebx+1Eh] +
mov ecx eax +
xor eax eax +
add ecx [ebp+lpszDst] +
adc edx eax +
mov eax [ebp+lDistanceToMove] +
add ecx eax +
adc edx [ebp+var_48] +
add [ebp+var_44] ecx +
adc [ebp+var_40] edx +
inc dword ptr [edi+1374h]  +
test byte ptr [ebp+var_60] 8 +
jz loc_1028B05  +
or eax [ebp+var_48] +
jnz loc_1028A85  +
xor ebx ebx +
push ebx  +
push 1  +
lea eax [ebp+var_39] +
push eax  +
push dword ptr [edi+5344h]  +
call sub_1027B21  +
test eax eax +
mov al byte ptr [ebp+var_39] +
jz loc_10289D5  +
cmp al 50h +
jnz loc_10289B8  +
push ebx  +
mov byte ptr [ebp+var_39+1] al +
push 0Fh  +
lea eax [ebp+var_39+2] +
push eax  +
push dword ptr [edi+5344h]  +
call sub_1027B21  +
test eax eax +
jz loc_1028A33  +
movzx eax [ebp+var_35] +
movzx ecx byte ptr [ebp+var_39+3] +
shl eax 8 +
or eax ecx +
movzx ecx byte ptr [ebp+var_39+2] +
shl eax 8 +
or eax ecx +
movzx ecx byte ptr [ebp+var_39+1] +
shl eax 8 +
or eax ecx +
cmp eax 8074B50h +
jz loc_1028A33  +
push 1  +
push 0FFFFFFFFh  +
push 0FFFFFFF1h  +
push dword ptr [edi+5344h]  +
call sub_1025228  +
and eax edx +
cmp eax 0FFFFFFFFh +
jnz loc_10289B6  +
push 2  +
jmp loc_102861D  +
movzx eax [ebp+var_2D] +
movzx ecx [ebp+var_2E] +
shl eax 8 +
or eax ecx +
movzx ecx [ebp+var_2F] +
shl eax 8 +
or eax ecx +
movzx ecx [ebp+var_30] +
push 1  +
shl eax 8 +
or eax ecx +
add [ebp+var_44] eax +
push ebx  +
push ebx  +
push dword ptr [edi+5344h]  +
adc [ebp+var_40] ebx +
mov [ebp+lDistanceToMove] eax +
mov [ebp+var_48] ebx +
call sub_1025228  +
mov ecx [ebp+var_44] +
mov ebx [ebp+var_40] +
add ecx 10h +
adc ebx 0 +
cmp eax ecx +
jnz loc_1028F7F  +
cmp edx ebx +
jmp loc_1028AE2  +
push 0  +
push [ebp+var_40]  +
push [ebp+var_44]  +
push dword ptr [edi+5344h]  +
call sub_1025228  +
and eax edx +
cmp eax 0FFFFFFFFh +
jz loc_102861B  +
push 0  +
push 10h  +
lea eax [ebp+var_39+1] +
push eax  +
push dword ptr [edi+5344h]  +
call sub_1027B21  +
test eax eax +
jz loc_102861B  +
movzx eax [ebp+var_35] +
movzx ecx byte ptr [ebp+var_39+3] +
shl eax 8 +
or eax ecx +
movzx ecx byte ptr [ebp+var_39+2] +
shl eax 8 +
or eax ecx +
movzx ecx byte ptr [ebp+var_39+1] +
shl eax 8 +
or eax ecx +
cmp eax 8074B50h +
jnz loc_1028F7F  +
lea eax [ebp+var_34] +
mov edx eax +
push 0Ch  +
sub esi edx +
pop ecx  +
add esi 0Ah +
mov dl [eax] +
mov [eax+esi] dl +
inc eax  +
dec ecx  +
jnz loc_1028AF5  +
add [ebp+var_44] 10h +
adc [ebp+var_40] ecx +
push 0  +
push 4  +
lea eax [ebp+var_39+1] +
push eax  +
push dword ptr [edi+5344h]  +
call sub_1027B21  +
test eax eax +
jz loc_102861B  +
movzx eax [ebp+var_35] +
movzx ecx byte ptr [ebp+var_39+3] +
shl eax 8 +
or eax ecx +
movzx ecx byte ptr [ebp+var_39+2] +
shl eax 8 +
or eax ecx +
movzx ecx byte ptr [ebp+var_39+1] +
shl eax 8 +
or eax ecx +
cmp eax 4034B50h +
jz loc_102870B  +
mov eax [ebp+var_44] +
movzx ecx byte ptr [ebp+var_39+3] +
mov ebx [edi+1370h] +
mov [ebp+lDistanceToMove] eax +
mov eax [ebp+var_40] +
mov [ebp+var_48] eax +
movzx eax [ebp+var_35] +
shl eax 8 +
or eax ecx +
movzx ecx byte ptr [ebp+var_39+2] +
shl eax 8 +
or eax ecx +
movzx ecx byte ptr [ebp+var_39+1] +
shl eax 8 +
or eax ecx +
cmp eax 2014B50h +
jnz loc_1028EBC  +
xor esi esi +
cmp ebx esi +
jz loc_1028F7F  +
mov edi [ebp+var_58] +
push esi  +
push 2Ah  +
lea eax [ebp+var_39+1] +
push eax  +
push dword ptr [edi+5344h]  +
call sub_1027B21  +
test eax eax +
jz loc_102861B  +
movzx ax byte ptr [ebp+var_39+2] +
movzx cx byte ptr [ebp+var_39+1] +
shl ax 8 +
or ax cx +
mov [ebx] ax +
movzx ax [ebp+var_35] +
movzx cx byte ptr [ebp+var_39+3] +
shl ax 8 +
or ax cx +
mov [ebx+2] ax +
movzx ax [ebp+var_33] +
movzx cx [ebp+var_34] +
shl ax 8 +
or ax cx +
mov [ebx+4] ax +
movzx ax [ebp+var_33] +
movzx cx [ebp+var_34] +
shl ax 8 +
or ax cx +
mov [ebx+36h] ax +
movzx ax [ebp+var_31] +
movzx cx [ebp+var_32] +
shl ax 8 +
or ax cx +
mov [ebx+6] ax +
movzx eax [ebp+var_2D] +
movzx ecx [ebp+var_2E] +
shl eax 8 +
or eax ecx +
movzx ecx [ebp+var_2F] +
shl eax 8 +
or eax ecx +
movzx ecx [ebp+var_30] +
shl eax 8 +
or eax ecx +
mov [ebx+8] eax +
movzx eax [ebp+var_29] +
movzx ecx [ebp+var_2A] +
shl eax 8 +
or eax ecx +
movzx ecx [ebp+var_2B] +
shl eax 8 +
or eax ecx +
movzx ecx [ebp+var_2C] +
shl eax 8 +
or eax ecx +
mov [ebx+0Ch] eax +
movzx eax [ebp+var_25] +
movzx ecx [ebp+var_26] +
shl eax 8 +
or eax ecx +
movzx ecx [ebp+var_27] +
shl eax 8 +
or eax ecx +
movzx ecx [ebp+var_28] +
shl eax 8 +
or eax ecx +
mov [ebx+10h] eax +
mov [ebx+14h] esi +
movzx eax [ebp+var_21] +
movzx ecx [ebp+var_22] +
shl eax 8 +
or eax ecx +
movzx ecx [ebp+var_23] +
shl eax 8 +
or eax ecx +
movzx ecx [ebp+var_24] +
shl eax 8 +
or eax ecx +
mov [ebx+18h] eax +
mov [ebx+1Ch] esi +
movzx eax [ebp+var_1F] +
movzx ecx [ebp+var_20] +
shl eax 8 +
or eax ecx +
mov [ebx+20h] eax +
movzx eax [ebp+var_1D] +
movzx ecx [ebp+var_1E] +
shl eax 8 +
or eax ecx +
mov [ebx+28h] eax +
movzx eax [ebp+var_1B] +
movzx ecx [ebp+var_1C] +
shl eax 8 +
or eax ecx +
mov [ebx+2Ch] eax +
movzx eax [ebp+var_19] +
movzx ecx [ebp+var_1A] +
shl eax 8 +
or eax ecx +
mov [ebx+30h] eax +
movzx ax [ebp+var_17] +
movzx cx [ebp+var_18] +
shl ax 8 +
or ax cx +
mov [ebx+34h] ax +
movzx eax [ebp+var_13] +
movzx ecx [ebp+var_14] +
shl eax 8 +
or eax ecx +
movzx ecx [ebp+var_15] +
shl eax 8 +
or eax ecx +
movzx ecx [ebp+var_16] +
push dword ptr [ebx+20h]  +
shl eax 8 +
or eax ecx +
mov [ebx+38h] eax +
movzx eax [ebp+var_F] +
movzx ecx [ebp+var_10] +
shl eax 8 +
or eax ecx +
movzx ecx [ebp+var_11] +
shl eax 8 +
or eax ecx +
movzx ecx [ebp+var_12] +
shl eax 8 +
or eax ecx +
mov [ebp+var_44] eax +
mov [ebp+var_40] esi +
call malloc  +
pop ecx  +
mov [ebp+lpszDst] eax +
cmp eax esi +
jz loc_1028F78  +
push esi  +
push dword ptr [ebx+20h]  +
push eax  +
push dword ptr [edi+5344h]  +
call sub_1027B21  +
test eax eax +
jz loc_1028F86  +
push dword ptr [ebx+20h]  +
mov esi [ebp+lpszDst] +
push esi  +
push esi  +
call ds:OemToCharBuffA  +
mov ecx [ebx+20h] +
mov edi [ebx+58h] +
xor eax eax +
cmps   +
jnz loc_1028F99  +
push [ebp+lpszDst]  +
call free  +
mov eax [ebx+28h] +
and [ebp+lpszDst] 0 +
and dword ptr [ebx+64h] 0 +
pop ecx  +
test eax eax +
jz loc_1028E1C  +
push eax  +
call malloc  +
pop ecx  +
mov [ebx+50h] eax +
test eax eax +
jz loc_1028F78  +
push 0  +
lea esi [ebx+28h] +
push dword ptr [esi]  +
push eax  +
mov eax [ebp+var_58] +
push dword ptr [eax+5344h]  +
call sub_1027B21  +
test eax eax +
jz loc_1028F9D  +
push 1  +
lea eax [ebp+lpszDst] +
push eax  +
lea eax [ebx+30h] +
push eax  +
lea eax [ebp+var_44] +
push eax  +
lea eax [ebx+10h] +
push eax  +
lea eax [ebx+18h] +
push eax  +
push esi  +
push dword ptr [ebx+50h]  +
call sub_1028341  +
test eax eax +
jz loc_1028DFA  +
mov eax [ebp+lpszDst] +
mov [ebx+64h] eax +
mov ecx [ebx+24h] +
cmp ecx [esi] +
jnz loc_1028E1C  +
mov eax [ebx+50h] +
mov esi [ebx+4Ch] +
mov edi eax +
xor edx edx +
cmps   +
jnz loc_1028E1C  +
push eax  +
call free  +
mov eax [ebx+4Ch] +
pop ecx  +
mov [ebx+50h] eax +
mov eax [ebx+2Ch] +
test eax eax +
jz loc_1028E51  +
push eax  +
call malloc  +
pop ecx  +
mov [ebx+54h] eax +
test eax eax +
jz loc_1028F78  +
push 0  +
push dword ptr [ebx+2Ch]  +
push eax  +
mov eax [ebp+var_58] +
push dword ptr [eax+5344h]  +
call sub_1027B21  +
test eax eax +
jz loc_1028FAB  +
mov eax [ebx+40h] +
cmp eax [ebp+var_44] +
jnz loc_1028F7F  +
mov eax [ebx+44h] +
cmp eax [ebp+var_40] +
jnz loc_1028F7F  +
xor eax eax +
push eax  +
mov [ebx+5Ch] ax +
mov ebx [ebx+68h] +
push 4  +
lea eax [ebp+var_39+1] +
push eax  +
mov eax [ebp+var_58] +
push dword ptr [eax+5344h]  +
call sub_1027B21  +
test eax eax +
jz loc_102861B  +
movzx eax [ebp+var_35] +
movzx ecx byte ptr [ebp+var_39+3] +
shl eax 8 +
or eax ecx +
movzx ecx byte ptr [ebp+var_39+2] +
shl eax 8 +
or eax ecx +
movzx ecx byte ptr [ebp+var_39+1] +
shl eax 8 +
or eax ecx +
cmp eax 2014B50h +
jz loc_1028B86  +
mov edi [ebp+var_58] +
test ebx ebx +
jnz loc_1028F7F  +
movzx eax [ebp+var_35] +
movzx ecx byte ptr [ebp+var_39+3] +
shl eax 8 +
or eax ecx +
movzx ecx byte ptr [ebp+var_39+2] +
shl eax 8 +
or eax ecx +
movzx ecx byte ptr [ebp+var_39+1] +
shl eax 8 +
or eax ecx +
cmp eax 6054B50h +
jz loc_1029047  +
cmp eax 6064B50h +
jnz loc_1028F7F  +
or esi 0FFFFFFFFh +
inc ebx  +
push 0  +
push ebx  +
lea eax [ebp+var_39] +
push eax  +
push dword ptr [edi+5344h]  +
call sub_1027B21  +
test eax eax +
mov al byte ptr [ebp+var_39] +
jz loc_1028F1A  +
cmp al 50h +
jnz loc_1028EFD  +
push 0  +
mov byte ptr [ebp+var_39+1] al +
push 3  +
lea eax [ebp+var_39+2] +
push eax  +
push dword ptr [edi+5344h]  +
call sub_1027B21  +
test eax eax +
jz loc_1028A2C  +
movzx eax [ebp+var_35] +
movzx ecx byte ptr [ebp+var_39+3] +
shl eax 8 +
or eax ecx +
movzx ecx byte ptr [ebp+var_39+2] +
shl eax 8 +
or eax ecx +
movzx ecx byte ptr [ebp+var_39+1] +
shl eax 8 +
or eax ecx +
cmp eax 7064B50h +
jz loc_1028FB0  +
push ebx  +
push esi  +
push 0FFFFFFFDh  +
push dword ptr [edi+5344h]  +
call sub_1025228  +
and eax edx +
cmp eax esi +
jnz loc_1028EFD  +
jmp loc_1028A2C  +
push 4  +
jmp loc_102861D  +
push 3  +
jmp loc_102861D  +
push 0Bh  +
pop esi  +
push [ebp+lpszDst]  +
call free  +
pop ecx  +
mov eax esi +
jmp loc_1029115  +
push 3  +
jmp loc_1028F88  +
push dword ptr [ebx+50h]  +
call free  +
pop ecx  +
jmp loc_102861B  +
push dword ptr [ebx+54h]  +
jmp loc_1028FA0  +
push 0  +
push ebx  +
lea eax [ebp+var_39] +
push eax  +
push dword ptr [edi+5344h]  +
call sub_1027B21  +
test eax eax +
mov al byte ptr [ebp+var_39] +
jz loc_1028FCD  +
cmp al 50h +
jnz loc_1028FB0  +
push 0  +
mov byte ptr [ebp+var_39+1] al +
push 3  +
lea eax [ebp+var_39+2] +
push eax  +
push dword ptr [edi+5344h]  +
call sub_1027B21  +
test eax eax +
jz loc_1028A2C  +
movzx eax [ebp+var_35] +
movzx ecx byte ptr [ebp+var_39+3] +
shl eax 8 +
or eax ecx +
movzx ecx byte ptr [ebp+var_39+2] +
shl eax 8 +
or eax ecx +
movzx ecx byte ptr [ebp+var_39+1] +
shl eax 8 +
or eax ecx +
cmp eax 6054B50h +
jz loc_102902B  +
push ebx  +
push esi  +
push 0FFFFFFFDh  +
push dword ptr [edi+5344h]  +
call sub_1025228  +
and eax edx +
cmp eax esi +
jnz loc_1028FB0  +
jmp loc_1028A2C  +
push 0  +
push 12h  +
lea eax [ebp+var_39+1] +
push eax  +
push dword ptr [edi+5344h]  +
call sub_1027B21  +
test eax eax +
jnz loc_10290AE  +
jmp loc_102861B  +
push 0  +
push 12h  +
lea eax [ebp+var_39+1] +
push eax  +
push dword ptr [edi+5344h]  +
call sub_1027B21  +
test eax eax +
jz loc_102861B  +
movzx eax [ebp+var_33] +
movzx ecx [ebp+var_34] +
shl eax 8 +
or eax ecx +
cmp [edi+1374h] eax +
jnz loc_1028F7F  +
movzx eax [ebp+var_29] +
movzx ecx [ebp+var_2A] +
shl eax 8 +
or eax ecx +
movzx ecx [ebp+var_2B] +
shl eax 8 +
or eax ecx +
movzx ecx [ebp+var_2C] +
shl eax 8 +
or eax ecx +
xor ecx ecx +
cmp eax [ebp+lDistanceToMove] +
jnz loc_1028F7F  +
cmp ecx [ebp+var_48] +
jnz loc_1028F7F  +
mov eax [ebp+lDistanceToMove] +
mov [edi+1368h] eax +
mov eax [ebp+var_48] +
mov [edi+136Ch] eax +
mov eax [edi+1374h] +
test eax eax +
jz loc_1029113  +
shl eax 2 +
push eax  +
call malloc  +
pop ecx  +
mov ecx eax +
mov [edi+1378h] eax +
test ecx ecx +
jz loc_1028F78  +
mov eax [edi+1370h] +
jmp loc_10290F4  +
mov [ecx] eax +
mov eax [eax+68h] +
add ecx 4 +
test eax eax +
jnz loc_10290EC  +
push offset sub_102780D  +
push 4  +
push dword ptr [edi+1374h]  +
push dword ptr [edi+1378h]  +
call qsort  +
add esp 10h +
xor eax eax +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_101BC5D  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 128h +
mov eax dword_1030118 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_4] +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push dword ptr [esi+58h]  +
xor ebx ebx +
mov [ebp+var_128] eax +
mov [ebp+var_124] ebx +
mov [ebp+var_114] ebx +
call ds:lstrlenA  +
inc eax  +
cmp eax 104h +
jbe loc_1029175  +
push 0Eh  +
pop eax  +
jmp loc_102947B  +
push eax  +
lea eax [ebp+szDst] +
push eax  +
push dword ptr [esi+58h]  +
call ds:CharToOemBuffA  +
cmp [esi+14h] ebx +
jg loc_10291A3  +
jl loc_1029193  +
cmp dword ptr [esi+10h] 0FFFFFFFFh +
ja loc_10291A3  +
cmp [esi+1Ch] ebx +
jl loc_1029208  +
jg loc_10291A3  +
cmp dword ptr [esi+18h] 0D09DC300h +
jbe loc_1029208  +
mov ecx [esi+24h] +
push 14h  +
pop eax  +
add ecx eax +
push ecx  +
mov [ebp+var_114] eax +
call malloc  +
pop ecx  +
mov [ebp+var_124] eax +
cmp eax ebx +
jnz loc_10291C6  +
push 4  +
jmp loc_102916F  +
xor ecx ecx +
inc ecx  +
mov [eax] cx +
push 10h  +
pop ecx  +
mov [eax+2] cx +
mov ecx [esi+18h] +
mov [eax+4] ecx +
mov ecx [esi+1Ch] +
mov [eax+8] ecx +
mov ecx [esi+10h] +
mov [eax+0Ch] ecx +
mov ecx [esi+14h] +
mov [eax+10h] ecx +
mov eax [esi+24h] +
cmp eax ebx +
jbe loc_1029208  +
push eax  +
push dword ptr [esi+4Ch]  +
mov eax [ebp+var_124] +
add eax 14h +
push eax  +
call memcpy  +
add esp 0Ch +
push edi  +
mov di word ptr [ebp+var_114] +
movzx eax di +
lea ecx [ebp+var_110] +
push ecx  +
cdq   +
push edx  +
push eax  +
push ebx  +
push 1Eh  +
call sub_1028516  +
test eax eax +
jl loc_102946B  +
mov eax [esi+20h] +
lea ecx [ebp+var_120] +
push ecx  +
push ebx  +
push eax  +
push [ebp+var_10C]  +
push [ebp+var_110]  +
call sub_1028516  +
test eax eax +
jl loc_102946B  +
mov eax [esi+24h] +
lea ecx [ebp+var_110] +
push ecx  +
push ebx  +
push eax  +
push [ebp+var_11C]  +
push [ebp+var_120]  +
call sub_1028516  +
test eax eax +
jl loc_102946B  +
cmp [ebp+var_10C] ebx +
jl loc_102946B  +
jg loc_1029291  +
cmp [ebp+var_110] ebx +
jb loc_102946B  +
lea eax [ebp+var_10C] +
push eax  +
movzx eax di +
push eax  +
push 1Fh  +
call sub_10284E8  +
test eax eax +
jl loc_102946B  +
lea eax [ebp+var_10C] +
push eax  +
push dword ptr [esi+20h]  +
push [ebp+var_10C]  +
call sub_10284E8  +
test eax eax +
jl loc_102946B  +
lea eax [ebp+var_10C] +
push eax  +
push dword ptr [esi+24h]  +
push [ebp+var_10C]  +
call sub_10284E8  +
test eax eax +
jl loc_102946B  +
push [ebp+var_10C]  +
call malloc  +
pop ecx  +
mov ebx eax +
xor ecx ecx +
cmp ebx ecx +
jz loc_1029463  +
mov dword ptr [ebx] 4034B50h +
cmp di cx +
jbe loc_102930E  +
mov ax [esi+2] +
jmp loc_1029325  +
movzx eax word ptr [esi+2] +
cmp ax 2Dh +
jb loc_1029325  +
xor eax eax +
cmp word ptr [esi+6] 9 +
setz al  +
add eax 14h +
mov [ebx+4] ax +
mov ax [esi+36h] +
mov [ebx+6] ax +
mov ax [esi+6] +
mov [ebx+8] ax +
mov eax [esi+8] +
mov [ebx+0Ah] eax +
mov eax [esi+0Ch] +
mov [ebx+0Eh] eax +
cmp di cx +
jbe loc_1029375  +
cmp [esi+14h] ecx +
jg loc_1029364  +
jl loc_1029357  +
cmp dword ptr [esi+10h] 0FFFFFFFFh +
ja loc_1029364  +
cmp [esi+1Ch] ecx +
jg loc_1029364  +
jl loc_1029375  +
cmp dword ptr [esi+18h] 0FFFFFFFFh +
jbe loc_1029375  +
or eax 0FFFFFFFFh +
lea edi [ebx+12h] +
stos   +
stos   +
mov di word ptr [ebp+var_114] +
jmp loc_1029381  +
mov eax [esi+10h] +
mov [ebx+12h] eax +
mov eax [esi+18h] +
mov [ebx+16h] eax +
mov ax [esi+20h] +
mov [ebx+1Ah] ax +
add di [esi+24h] +
lea eax [ebp+szDst] +
mov [ebx+1Ch] di +
push dword ptr [esi+20h]  +
sub di [esi+24h] +
push eax  +
lea eax [ebx+1Eh] +
push eax  +
call memcpy  +
add esp 0Ch +
test di di +
jbe loc_10293BF  +
movzx eax di +
add eax [esi+24h] +
push eax  +
push [ebp+var_124]  +
jmp loc_10293CA  +
mov eax [esi+24h] +
test eax eax +
jbe loc_10293DA  +
push eax  +
push dword ptr [esi+4Ch]  +
mov eax [esi+20h] +
lea eax [eax+ebx+1Eh] +
push eax  +
call memcpy  +
add esp 0Ch +
mov ecx [esi+20h] +
push 0  +
lea eax [ebp+NumberOfBytesWritten] +
push eax  +
mov eax [esi+24h] +
movzx edi di +
add eax edi +
lea eax [eax+ecx+1Eh] +
push eax  +
mov eax [ebp+var_128] +
push ebx  +
push dword ptr [eax]  +
call ds:WriteFile  +
test eax eax +
jz loc_1029443  +
mov eax [esi+24h] +
mov ecx [esi+20h] +
add eax edi +
lea eax [eax+ecx+1Eh] +
cmp [ebp+NumberOfBytesWritten] eax +
jnz loc_1029443  +
push ebx  +
call free  +
cmp [ebp+var_124] 0 +
pop ecx  +
jz loc_102943B  +
push [ebp+var_124]  +
mov [esi+60h] edi +
call free  +
pop ecx  +
jmp loc_102943F  +
and dword ptr [esi+60h] 0 +
xor eax eax +
jmp loc_102947A  +
push ebx  +
call free  +
cmp [ebp+var_124] 0 +
pop ecx  +
jz loc_102945F  +
push [ebp+var_124]  +
call free  +
pop ecx  +
push 0Ah  +
jmp loc_1029479  +
cmp [ebp+var_124] ecx +
jz loc_1029477  +
push [ebp+var_124]  +
call free  +
pop ecx  +
push 4  +
pop eax  +
pop edi  +
mov ecx [ebp+var_4] +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_101BC5D  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
push [ebp+lpString]  +
call ds:lstrlenA  +
mov esi eax +
add esi 5 +
push esi  +
call malloc  +
mov edi eax +
pop ecx  +
test edi edi +
jz loc_10294EB  +
push [ebp+lpString]  +
push esi  +
push edi  +
call sub_1022B69  +
push 5Ch  +
push edi  +
push 0  +
call sub_102C654  +
test eax eax +
jnz loc_10294CE  +
mov eax edi +
jmp loc_10294CF  +
inc eax  +
push 2Eh  +
push eax  +
push 0  +
call sub_102C654  +
test eax eax +
jnz loc_10294E9  +
push offset a_zip_1  +
push esi  +
push edi  +
call sub_10257FA  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax dword_1030118 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_C] +
mov ecx [ebp+lpBuffer] +
push edi  +
mov edi [ebp+arg_10] +
test eax eax +
jz loc_1029548  +
mov eax [eax] +
cmp eax 0FFFFFFFFh +
jz loc_1029548  +
push esi  +
mov esi [ebp+nNumberOfBytesToWrite] +
push 0  +
lea edx [ebp+NumberOfBytesWritten] +
push edx  +
push esi  +
push ecx  +
push eax  +
call ds:WriteFile  +
test eax eax +
jz loc_1029538  +
cmp [ebp+NumberOfBytesWritten] esi +
jz loc_102953C  +
and [ebp+NumberOfBytesWritten] 0 +
push edi  +
call sub_1023EF6  +
mov eax [ebp+NumberOfBytesWritten] +
pop esi  +
jmp loc_1029550  +
push edi  +
call sub_1023EF6  +
xor eax eax +
mov ecx [ebp+var_4] +
xor ecx ebp +
xor edx edx +
pop edi  +
call sub_101BC5D  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
cmp dword ptr [esi+4] 0FFFFFFFFh +
jz loc_1029587  +
mov eax [esi+18h] +
test eax eax +
jz loc_1029587  +
push eax  +
call free  +
and dword ptr [esi+18h] 0 +
pop ecx  +
xor eax eax +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
mov ecx [ebp+arg_0] +
shr [ebp+arg_0] 1 +
and ecx 1 +
or eax ecx +
add eax eax +
dec [ebp+arg_4]  +
cmp [ebp+arg_4] 0 +
jg loc_102959A  +
shr eax 1 +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+arg_8] +
push edi  +
lea ebx [esi+4] +
cmp dword ptr [ebx] 0FFFFFFFFh +
jnz loc_10295D4  +
push esi  +
call sub_10263D1  +
mov eax [esi+20h] +
test eax eax +
jz loc_102961D  +
cmp dword ptr [esi+98h] 0 +
jnz loc_102960B  +
push esi  +
push ebx  +
push 0  +
push eax  +
push dword ptr [esi+18h]  +
call sub_10294F6  +
mov ecx [esi+20h] +
xor edi edi +
cmp eax ecx +
jnz loc_102960B  +
cmp edx edi +
jnz loc_102960B  +
cmp dword ptr [ebx] 0FFFFFFFFh +
jnz loc_102961D  +
mov dword ptr [esi] 0Eh +
jmp loc_102961D  +
mov eax [esi+98h] +
neg eax  +
sbb eax eax +
and eax 0FFFFFFFBh +
add eax 0Eh +
mov [esi] eax +
and dword ptr [esi+20h] 0 +
push 2  +
pop eax  +
cmp [ebp+arg_4] eax +
jnz loc_102964D  +
mov ecx [esi+28h] +
dec ecx  +
jnz loc_1029634  +
mov [ebp+arg_4] eax +
jmp loc_10295C9  +
mov ecx [esi+18h] +
mov eax [ebp+arg_0] +
mov [ecx] al +
inc dword ptr [esi+20h]  +
mov ecx [esi+20h] +
mov edx [esi+18h] +
shr eax 8 +
mov [ecx+edx] al +
jmp loc_102965B  +
cmp [ebp+arg_4] 1 +
jnz loc_102965E  +
mov eax [esi+18h] +
mov cl byte ptr [ebp+arg_0] +
mov [eax] cl +
inc dword ptr [esi+20h]  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
mov edi [ebp+arg_0] +
mov eax [edi+4] +
cmp eax 0FFFFFFFFh +
jz loc_10296A7  +
push 1  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push eax  +
call sub_1025228  +
and eax edx +
cmp eax 0FFFFFFFFh +
jz loc_10296A3  +
push 1  +
push 0  +
push 1  +
push dword ptr [edi+4]  +
call sub_1025228  +
and eax edx +
cmp eax 0FFFFFFFFh +
jnz loc_10296A7  +
xor eax eax +
jmp loc_10296AA  +
xor eax eax +
inc eax  +
pop edi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
mov eax [esi+4Ch] +
test eax eax +
jz loc_10296CF  +
push eax  +
call free  +
and dword ptr [esi+4Ch] 0 +
pop ecx  +
mov eax [esi+50h] +
test eax eax +
jz loc_10296EE  +
push eax  +
call free  +
push dword ptr [esi+54h]  +
call free  +
and dword ptr [esi+54h] 0 +
and dword ptr [esi+50h] 0 +
pop ecx  +
pop ecx  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push ebx  +
push esi  +
mov esi [ebp+arg_4] +
mov edx [esi+74h] +
mov ecx [esi+4Ch] +
mov eax [esi+84h] +
add ecx edx +
push edi  +
mov edi [esi+70h] +
mov [ebp+var_8] eax +
cmp edx 7EFAh +
jbe loc_102972D  +
add edx 0FFFF8106h +
mov [ebp+var_C] edx +
jmp loc_1029731  +
and [ebp+var_C] 0 +
lea eax [ecx+102h] +
mov [ebp+var_10] eax +
mov al [edi+ecx-1] +
mov byte ptr [ebp+arg_4+3] al +
mov al [edi+ecx] +
mov [ebp+var_1] al +
cmp edi [esi+8Ch] +
jb loc_1029753  +
shr [ebp+var_8] 2 +
mov eax [ebp+arg_0] +
mov edx [esi+4Ch] +
add edx eax +
mov al [ebp+var_1] +
cmp [edx+edi] al +
jnz loc_1029801  +
mov al byte ptr [ebp+arg_4+3] +
cmp [edx+edi-1] al +
jnz loc_1029801  +
mov al [edx] +
cmp al [ecx] +
jnz loc_1029801  +
inc edx  +
mov al [edx] +
cmp al [ecx+1] +
jnz loc_1029801  +
mov eax [ebp+var_10] +
inc ecx  +
inc ecx  +
inc edx  +
inc ecx  +
mov bl [ecx] +
inc edx  +
cmp bl [edx] +
jnz loc_10297D0  +
inc ecx  +
mov bl [ecx] +
inc edx  +
cmp bl [edx] +
jnz loc_10297D0  +
inc ecx  +
mov bl [ecx] +
inc edx  +
cmp bl [edx] +
jnz loc_10297D0  +
inc ecx  +
mov bl [ecx] +
inc edx  +
cmp bl [edx] +
jnz loc_10297D0  +
inc ecx  +
mov bl [ecx] +
inc edx  +
cmp bl [edx] +
jnz loc_10297D0  +
inc ecx  +
mov bl [ecx] +
inc edx  +
cmp bl [edx] +
jnz loc_10297D0  +
inc ecx  +
mov bl [ecx] +
inc edx  +
cmp bl [edx] +
jnz loc_10297D0  +
inc ecx  +
mov bl [ecx] +
inc edx  +
cmp bl [edx] +
jnz loc_10297D0  +
cmp ecx eax +
jb loc_102978C  +
mov edx ecx +
sub edx eax +
add edx 102h +
cmp edx edi +
lea ecx [eax-102h] +
jle loc_1029801  +
cmp edx [esi+90h] +
mov eax [ebp+arg_0] +
mov [esi+78h] eax +
mov edi edx +
jge loc_1029821  +
add edx ecx +
mov al [edx-1] +
mov byte ptr [ebp+arg_4+3] al +
mov al [edx] +
mov [ebp+var_1] al +
mov eax [ebp+arg_0] +
mov edx [esi+50h] +
and eax 7FFFh +
movzx eax word ptr [edx+eax*2] +
mov [ebp+arg_0] eax +
cmp eax [ebp+var_C] +
jbe loc_1029821  +
dec [ebp+var_8]  +
jnz loc_1029756  +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
mov ecx [esi+74h] +
mov eax [esi+60h] +
sub eax ecx +
sub eax [esi+80h] +
mov [ebp+arg_0] eax +
cmp eax 0FFFFFFFFh +
jnz loc_1029856  +
push 0FFFFFFFEh  +
pop eax  +
jmp loc_10298DA  +
cmp ecx 0FEFAh +
jb loc_10298DA  +
cmp dword ptr [esi+68h] 0 +
jz loc_10298DA  +
mov eax [esi+4Ch] +
push ebx  +
push edi  +
mov edi 8000h +
push edi  +
lea ecx [eax+8000h] +
push ecx  +
push eax  +
call memcpy  +
mov eax 0FFFF8000h +
add [esi+78h] eax +
add [esi+74h] eax +
add [esi+64h] eax +
add esp 0Ch +
xor edx edx +
mov eax [esi+54h] +
add eax edx +
movzx ecx word ptr [eax] +
cmp ecx edi +
lea ebx [ecx+8000h] +
sbb ecx ecx +
not ecx  +
and ecx ebx +
inc edx  +
inc edx  +
mov [eax] cx +
cmp edx edi +
jb loc_102988F  +
xor edx edx +
mov eax [esi+50h] +
add eax edx +
movzx ecx word ptr [eax] +
cmp ecx edi +
lea ebx [ecx+8000h] +
sbb ecx ecx +
not ecx  +
and ecx ebx +
inc edx  +
inc edx  +
mov [eax] cx +
cmp edx 10000h +
jb loc_10298B0  +
mov eax [ebp+arg_0] +
add eax edi +
pop edi  +
pop ebx  +
cmp dword ptr [esi+7Ch] 0 +
jnz loc_1029911  +
push esi  +
push eax  +
mov eax [esi+4Ch] +
add eax [esi+74h] +
add eax [esi+80h] +
push eax  +
call dword ptr [esi+5340h]  +
cmp dword ptr [esi+98h] 0 +
jnz loc_102990A  +
test eax eax +
jz loc_102990A  +
add [esi+80h] eax +
jmp loc_1029911  +
mov dword ptr [esi+7Ch] 1 +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
push esi  +
mov esi [ebp+arg_0] +
cmp dword ptr [esi+80h] 0 +
push edi  +
push 2  +
pop edi  +
jz loc_1029AEE  +
push ebx  +
cmp dword ptr [esi] 0 +
jnz loc_1029AD3  +
mov ecx [esi+74h] +
mov eax [esi+4Ch] +
movzx eax byte ptr [ecx+eax+2] +
mov edx [esi+6Ch] +
shl edx 5 +
xor eax edx +
mov edx [esi+54h] +
and eax 3FFFh +
mov [esi+6Ch] eax +
movzx eax word ptr [edx+eax*2] +
mov edx [esi+50h] +
and ecx 7FFFh +
mov [edx+ecx*2] ax +
mov bx [esi+74h] +
mov ecx [esi+6Ch] +
mov edx [esi+54h] +
mov [edx+ecx*2] bx +
mov ebx [esi+78h] +
push 2  +
mov [esi+70h] edi +
pop edi  +
test eax eax +
jz loc_10299D0  +
mov ecx [esi+70h] +
cmp ecx [esi+88h] +
jnb loc_10299D0  +
mov ecx [esi+74h] +
sub ecx eax +
cmp ecx 7EFAh +
ja loc_10299D0  +
push esi  +
push eax  +
call sub_10296F8  +
mov edi eax +
mov eax [esi+80h] +
cmp edi eax +
jbe loc_10299BB  +
mov edi eax +
cmp edi 3 +
jnz loc_10299D0  +
mov eax [esi+74h] +
sub eax [esi+78h] +
cmp eax 1000h +
jbe loc_10299D0  +
push 2  +
pop edi  +
mov eax [esi+70h] +
cmp eax 3 +
jb loc_1029A6D  +
cmp edi eax +
ja loc_1029A6D  +
add eax 0FFFFFFFDh +
push esi  +
push eax  +
mov eax [esi+74h] +
sub eax ebx +
dec eax  +
push eax  +
call sub_1029FA1  +
mov ecx [esi+70h] +
xor edx edx +
inc edx  +
sub edx ecx +
add [esi+80h] edx +
add ecx 0FFFFFFFEh +
mov [esi+70h] ecx +
inc dword ptr [esi+74h]  +
mov edx [esi+74h] +
mov ecx [esi+4Ch] +
movzx ecx byte ptr [edx+ecx+2] +
mov edi [esi+6Ch] +
mov ebx [esi+50h] +
shl edi 5 +
xor ecx edi +
mov edi [esi+54h] +
and ecx 3FFFh +
mov [esi+6Ch] ecx +
mov cx [edi+ecx*2] +
and edx 7FFFh +
mov [ebx+edx*2] cx +
mov ecx [esi+6Ch] +
mov edx [esi+54h] +
mov di [esi+74h] +
mov [edx+ecx*2] di +
dec dword ptr [esi+70h]  +
jnz loc_1029A09  +
and [ebp+var_4] 0 +
inc dword ptr [esi+74h]  +
push 2  +
pop edi  +
test eax eax +
jz loc_1029AAB  +
push 0  +
push esi  +
call sub_102AC98  +
mov eax [esi+74h] +
mov [esi+64h] eax +
jmp loc_1029AAB  +
cmp [ebp+var_4] 0 +
jz loc_1029A9B  +
mov eax [esi+74h] +
mov ecx [esi+4Ch] +
movzx eax byte ptr [eax+ecx-1] +
push esi  +
push eax  +
push 0  +
call sub_1029FA1  +
test eax eax +
jz loc_1029AA2  +
push 0  +
push esi  +
call sub_102AC98  +
mov eax [esi+74h] +
mov [esi+64h] eax +
jmp loc_1029AA2  +
mov [ebp+var_4] 1 +
inc dword ptr [esi+74h]  +
dec dword ptr [esi+80h]  +
mov ebx 106h +
jmp loc_1029ABE  +
cmp dword ptr [esi+7Ch] 0 +
jnz loc_1029AC6  +
push esi  +
call sub_102982F  +
cmp [esi+80h] ebx +
jb loc_1029AB2  +
cmp dword ptr [esi+80h] 0 +
jnz loc_102993B  +
cmp [ebp+var_4] 0 +
pop ebx  +
jz loc_1029AEE  +
mov eax [esi+74h] +
mov ecx [esi+4Ch] +
movzx eax byte ptr [eax+ecx-1] +
push esi  +
push eax  +
push 0  +
call sub_1029FA1  +
push 1  +
push esi  +
call sub_102AC98  +
pop edi  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
xor eax eax +
inc eax  +
cmp ecx eax +
mov [ebp+arg_0] ecx +
jge loc_1029B16  +
mov [ebp+arg_0] eax +
push 9  +
pop ecx  +
cmp [ebp+arg_0] ecx +
jle loc_1029B21  +
mov [ebp+arg_0] ecx +
push ebx  +
push esi  +
mov esi [ebp+arg_8] +
xor ebx ebx +
push edi  +
mov [esi+68h] ebx +
cmp [esi+60h] ebx +
jnz loc_1029B3B  +
mov [esi+68h] eax +
mov dword ptr [esi+60h] 10000h +
mov edi 8000h +
cmp [esi+4Ch] ebx +
jnz loc_1029B5E  +
push 2  +
push edi  +
call calloc  +
pop ecx  +
pop ecx  +
mov [esi+4Ch] eax +
cmp eax ebx +
jnz loc_1029B5E  +
push esi  +
push 4  +
call sub_1026256  +
cmp [esi+50h] ebx +
jnz loc_1029B91  +
push 2  +
push edi  +
call calloc  +
push 2  +
push 4000h  +
mov [esi+50h] eax +
call calloc  +
add esp 10h +
mov [esi+54h] eax +
cmp [esi+50h] ebx +
jz loc_1029B89  +
cmp eax ebx +
jnz loc_1029B91  +
push esi  +
push 4  +
call sub_1026256  +
mov eax [esi+54h] +
cmp eax ebx +
jz loc_1029C67  +
push edi  +
push ebx  +
push eax  +
call memset  +
mov ecx [ebp+arg_0] +
mov eax ecx +
shl eax 3 +
movzx edx word_1030152[eax] +
mov [esi+88h] edx +
movzx edx word_1030150[eax] +
mov [esi+8Ch] edx +
movzx edx word_1030154[eax] +
mov [esi+90h] edx +
movzx eax word_1030156[eax] +
add esp 0Ch +
mov [esi+84h] eax +
cmp ecx 1 +
jnz loc_1029BF1  +
mov eax [ebp+arg_4] +
or word ptr [eax] 4 +
jmp loc_1029BFD  +
cmp ecx 9 +
jnz loc_1029BFD  +
mov eax [ebp+arg_4] +
or word ptr [eax] 2 +
push esi  +
push edi  +
push dword ptr [esi+4Ch]  +
mov [esi+74h] ebx +
mov [esi+64h] ebx +
call dword ptr [esi+5340h]  +
mov [esi+80h] eax +
cmp eax ebx +
jnz loc_1029C27  +
mov dword ptr [esi+7Ch] 1 +
mov [esi+80h] ebx +
jmp loc_1029C67  +
mov edi 106h +
mov [esi+7Ch] ebx +
cmp eax edi +
jnb loc_1029C46  +
cmp [esi+7Ch] ebx +
jnz loc_1029C46  +
push esi  +
call sub_102982F  +
cmp [esi+80h] edi +
jb loc_1029C33  +
mov eax [esi+4Ch] +
mov [esi+6Ch] ebx +
movzx ecx byte ptr [eax+ebx] +
mov edx [esi+6Ch] +
shl edx 5 +
xor ecx edx +
and ecx 3FFFh +
inc ebx  +
mov [esi+6Ch] ecx +
cmp ebx 2 +
jb loc_1029C4C  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
lea ecx [eax+1398h] +
mov edx 11Eh +
push esi  +
xor esi esi +
mov [ecx] si +
add ecx 4 +
dec edx  +
jnz loc_1029C87  +
push 1Eh  +
lea ecx [eax+1C8Ch] +
pop edx  +
xor esi esi +
mov [ecx] si +
add ecx 4 +
dec edx  +
jnz loc_1029C9B  +
push 13h  +
lea ecx [eax+23FCh] +
pop edx  +
xor esi esi +
mov [ecx] si +
add ecx 4 +
dec edx  +
jnz loc_1029CAF  +
xor ecx ecx +
inc ecx  +
mov [eax+1798h] cx +
xor ecx ecx +
mov [eax+510Ch] ecx +
mov [eax+5108h] ecx +
mov [eax+5100h] ecx +
mov [eax+50FCh] ecx +
mov [eax+50F8h] ecx +
mov [eax+5104h] cl +
mov byte ptr [eax+5105h] 1 +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
mov eax [ebp+arg_0] +
mov ecx [eax+8] +
mov edx [ebp+arg_4] +
mov [ebp+var_18] ecx +
mov ecx [eax+0Ch] +
mov [ebp+var_C] ecx +
mov ecx [eax+18h] +
and [ebp+arg_0] 0 +
push ebx  +
mov ebx [eax] +
mov [ebp+var_14] ecx +
mov ecx [eax+14h] +
mov eax [eax+4] +
push esi  +
mov [ebp+var_1C] eax +
xor eax eax +
movzx esi ax +
push edi  +
mov eax esi +
shl esi 10h +
or eax esi +
mov [ebp+var_4] ecx +
push 8  +
lea edi [edx+2524h] +
pop ecx  +
stos   +
lea eax [edx+2E3Ch] +
mov ecx [eax] +
mov ecx [edx+ecx*4+2544h] +
xor esi esi +
mov [ebx+ecx*4+2] si +
mov esi [eax] +
inc esi  +
mov eax 23Dh +
cmp esi eax +
jge loc_1029EC1  +
lea ecx [edx+esi*4+2544h] +
sub eax esi +
mov [ebp+var_8] ecx +
mov [ebp+var_10] eax +
add esi eax +
mov eax [ebp+var_8] +
mov ecx [eax] +
mov eax ecx +
shl eax 2 +
mov [ebp+arg_4] eax +
movzx eax word ptr [eax+ebx+2] +
movzx eax word ptr [ebx+eax*4+2] +
inc eax  +
cmp eax [ebp+var_4] +
jle loc_1029DA1  +
mov eax [ebp+var_4] +
inc [ebp+arg_0]  +
cmp ecx [ebp+var_14] +
mov edi [ebp+arg_4] +
mov [edi+ebx+2] ax +
jg loc_1029DF6  +
inc word ptr [edx+eax*2+2524h]  +
xor edi edi +
cmp ecx [ebp+var_C] +
jl loc_1029DC6  +
sub ecx [ebp+var_C] +
mov edi [ebp+var_18] +
mov edi [edi+ecx*4] +
mov ecx [ebp+arg_4] +
movzx ecx word ptr [ecx+ebx] +
add eax edi +
imul eax ecx +
add [edx+5108h] eax +
mov eax [ebp+var_1C] +
mov [ebp+var_20] ecx +
test eax eax +
jz loc_1029DF6  +
mov ecx [ebp+arg_4] +
movzx eax word ptr [ecx+eax+2] +
add eax edi +
imul eax [ebp+var_20] +
add [edx+510Ch] eax +
add [ebp+var_8] 4 +
dec [ebp+var_10]  +
jnz loc_1029D7E  +
cmp [ebp+arg_0] 0 +
jz loc_1029EC1  +
mov eax [ebp+var_4] +
lea ecx [edx+eax*2+2524h] +
mov eax [ebp+var_4] +
dec eax  +
lea edi [edx+eax*2+2524h] +
jmp loc_1029E27  +
dec eax  +
dec edi  +
dec edi  +
cmp word ptr [edi] 0 +
jz loc_1029E24  +
sub [ebp+arg_0] 2 +
mov edi 0FFFFh +
add [edx+eax*2+2524h] di +
lea eax [edx+eax*2+2526h] +
add word ptr [eax] 2 +
mov eax edi +
add [ecx] ax +
cmp [ebp+arg_0] 0 +
jg loc_1029E17  +
mov eax [ebp+var_4] +
mov [ebp+arg_0] eax +
test eax eax +
jz loc_1029EC1  +
mov [ebp+var_8] ecx +
mov eax [ebp+var_8] +
movzx eax word ptr [eax] +
mov [ebp+arg_4] eax +
test eax eax +
jz loc_1029EB4  +
lea ecx [edx+esi*4+2544h] +
sub ecx 4 +
mov eax [ecx] +
dec esi  +
cmp eax [ebp+var_14] +
mov [ebp+var_20] ecx +
jg loc_1029EAE  +
lea eax [ebx+eax*4] +
movzx ecx word ptr [eax+2] +
cmp ecx [ebp+arg_0] +
jz loc_1029EA8  +
mov edi [ebp+arg_0] +
sub edi ecx +
movzx ecx word ptr [eax] +
imul edi ecx +
mov cx word ptr [ebp+arg_0] +
add [edx+5108h] edi +
mov [eax+2] cx +
dec [ebp+arg_4]  +
mov ecx [ebp+var_20] +
cmp [ebp+arg_4] 0 +
jnz loc_1029E75  +
dec [ebp+arg_0]  +
sub [ebp+var_8] 2 +
cmp [ebp+arg_0] 0 +
jnz loc_1029E61  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax [ebp+arg_0] +
movzx edx word ptr [eax+2] +
or [ebp+var_4] 0FFFFFFFFh +
and [ebp+var_8] 0 +
push ebx  +
push esi  +
push edi  +
push 7  +
pop esi  +
push 4  +
pop edi  +
test edx edx +
jnz loc_1029EF8  +
push 3  +
mov esi 8Ah +
pop edi  +
mov ecx [ebp+arg_4] +
mov ebx 0FFFFh +
mov [eax+ecx*4+6] bx +
test ecx ecx +
jl loc_1029F95  +
mov ebx [ebp+arg_8] +
add eax 6 +
inc ecx  +
mov [ebp+arg_4] ecx +
mov ecx [ebp+var_8] +
mov [ebp+arg_0] eax +
mov eax edx +
mov edx [ebp+arg_0] +
movzx edx word ptr [edx] +
inc ecx  +
cmp ecx esi +
jge loc_1029F2E  +
cmp eax edx +
jz loc_1029F8C  +
cmp ecx edi +
jge loc_1029F3C  +
add [ebx+eax*4+23FCh] cx +
jmp loc_1029F6B  +
test eax eax +
jz loc_1029F56  +
cmp eax [ebp+var_4] +
jz loc_1029F4D  +
inc word ptr [ebx+eax*4+23FCh]  +
inc word ptr [ebx+243Ch]  +
jmp loc_1029F6B  +
cmp ecx 0Ah +
jg loc_1029F64  +
inc word ptr [ebx+2440h]  +
jmp loc_1029F6B  +
inc word ptr [ebx+2444h]  +
xor ecx ecx +
mov [ebp+var_4] eax +
test edx edx +
jnz loc_1029F7D  +
mov esi 8Ah +
push 3  +
jmp loc_1029F8B  +
cmp eax edx +
jnz loc_1029F86  +
push 6  +
pop esi  +
jmp loc_1029F79  +
push 7  +
pop esi  +
push 4  +
pop edi  +
add [ebp+arg_0] 4 +
dec [ebp+arg_4]  +
jnz loc_1029F1D  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_8] +
mov edx [eax+38ECh] +
mov ecx [ebp+arg_4] +
push ebx  +
push esi  +
mov esi [eax+50F8h] +
mov [edx+esi] cl +
mov edx [ebp+arg_0] +
inc dword ptr [eax+50F8h]  +
push edi  +
test edx edx +
jnz loc_1029FD7  +
lea ecx [eax+ecx*4+1398h] +
inc word ptr [ecx]  +
jmp loc_102A033  +
movzx ecx byte ptr [ecx+eax+307Dh] +
dec edx  +
lea ecx [eax+ecx*4+179Ch] +
inc word ptr [ecx]  +
cmp edx 100h +
jge loc_1029FFC  +
movzx ecx byte ptr [edx+eax+327Dh] +
jmp loc_102A009  +
mov ecx edx +
sar ecx 7 +
movzx ecx byte ptr [ecx+eax+337Dh] +
lea ecx [eax+ecx*4+1C8Ch] +
inc word ptr [ecx]  +
mov edi [eax+38F4h] +
lea ecx [eax+50FCh] +
mov esi [ecx] +
mov [edi+esi*2] dx +
inc dword ptr [ecx]  +
mov cl [eax+5105h] +
or [eax+5104h] cl +
shl byte ptr [eax+5105h] 1 +
test byte ptr [eax+50F8h] 7 +
jnz loc_102A065  +
lea esi [eax+5104h] +
mov bl [esi] +
lea ecx [eax+5100h] +
mov edx [ecx] +
mov [edx+eax+38F8h] bl +
inc dword ptr [ecx]  +
mov byte ptr [esi] 0 +
mov byte ptr [eax+5105h] 1 +
mov esi [eax+50F8h] +
test esi 0FFFh +
jnz loc_102A0CD  +
mov ecx [eax+74h] +
mov edx esi +
shl edx 3 +
sub ecx [eax+64h] +
mov [ebp+arg_8] offset dword_10302E0 +
lea esi [eax+1C8Ch] +
mov edi [ebp+arg_8] +
mov edi [edi] +
movzx ebx word ptr [esi] +
add [ebp+arg_8] 4 +
add edi 5 +
imul edi ebx +
add edx edi +
add esi 4 +
cmp [ebp+arg_8] offset dword_1030358 +
jl loc_102A08B  +
mov esi [eax+50F8h] +
mov edi esi +
shr edi 1 +
cmp [eax+50FCh] edi +
jnb loc_102A0CD  +
shr edx 2 +
and edx 3FFFFFFEh +
and ecx 0FFFFFFFEh +
cmp edx ecx +
jb loc_102A0E5  +
cmp esi 3FFFh +
jz loc_102A0E5  +
cmp dword ptr [eax+50FCh] 4000h +
jz loc_102A0E5  +
xor eax eax +
jmp loc_102A0E8  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
push ebx  +
push esi  +
push edi  +
push 7  +
xor edx edx +
xor edi edi +
lea eax [ecx+1398h] +
pop esi  +
movzx ebx word ptr [eax] +
add edi ebx +
add eax 4 +
dec esi  +
jnz loc_102A10C  +
push 79h  +
lea eax [ecx+13B4h] +
pop esi  +
movzx ebx word ptr [eax] +
add edx ebx +
add eax 4 +
dec esi  +
jnz loc_102A120  +
lea eax [ecx+1598h] +
mov esi 80h +
movzx ebx word ptr [eax] +
add edi ebx +
add eax 4 +
dec esi  +
jnz loc_102A136  +
mov ecx [ecx+5118h] +
shr edx 2 +
cmp edx edi +
pop edi  +
sbb eax eax +
inc eax  +
pop esi  +
mov [ecx] ax +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_4] +
push esi  +
mov esi [ebp+arg_8] +
mov ecx [esi+10h] +
push 10h  +
pop eax  +
sub eax ebx +
cmp ecx eax +
jle loc_102A1D3  +
mov edx [esi+28h] +
push edi  +
mov edi [ebp+arg_0] +
mov eax edi +
shl eax cl +
or [esi+0Ch] ax +
mov eax [esi+20h] +
movzx ecx word ptr [esi+0Ch] +
dec edx  +
cmp eax edx +
jnb loc_102A1AF  +
mov ecx [esi+18h] +
mov dl [esi+0Ch] +
mov [eax+ecx] dl +
inc dword ptr [esi+20h]  +
mov eax [esi+20h] +
mov ecx [esi+18h] +
mov dl [esi+0Dh] +
mov [eax+ecx] dl +
inc dword ptr [esi+20h]  +
jmp loc_102A1BB  +
push esi  +
movzx eax cx +
push 2  +
push eax  +
call sub_10295BB  +
mov eax [esi+10h] +
mov cl 10h +
sub cl al +
shr di cl +
lea eax [eax+ebx-10h] +
mov [esi+10h] eax +
mov [esi+0Ch] di +
pop edi  +
jmp loc_102A1E1  +
mov eax [ebp+arg_0] +
shl eax cl +
or [esi+0Ch] ax +
add ecx ebx +
mov [esi+10h] ecx +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
mov eax [esi+10h] +
cmp eax 8 +
jle loc_102A221  +
mov ecx [esi+28h] +
mov eax [esi+20h] +
dec ecx  +
cmp eax ecx +
jnb loc_102A21C  +
mov dl [esi+0Ch] +
mov ecx [esi+18h] +
mov [eax+ecx] dl +
inc dword ptr [esi+20h]  +
mov eax [esi+20h] +
mov dl [esi+0Dh] +
jmp loc_102A230  +
push esi  +
push 2  +
jmp loc_102A23E  +
test eax eax +
jle loc_102A248  +
mov eax [esi+20h] +
cmp eax [esi+28h] +
jnb loc_102A23B  +
mov dl [esi+0Ch] +
mov ecx [esi+18h] +
mov [eax+ecx] dl +
inc dword ptr [esi+20h]  +
jmp loc_102A248  +
push esi  +
push 1  +
movzx eax word ptr [esi+0Ch] +
push eax  +
call sub_10295BB  +
push esi  +
push 0  +
push 0  +
call sub_10295BB  +
xor eax eax +
and [esi+10h] eax +
mov [esi+0Ch] ax +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
mov esi [ebp+arg_8] +
lea ecx [eax+2548h] +
mov edx [ecx] +
mov [esi] edx +
push edi  +
lea edx [eax+2E38h] +
mov esi [edx] +
mov edi [eax+esi*4+2544h] +
push eax  +
push 1  +
push [ebp+arg_4]  +
dec esi  +
mov [ecx] edi +
mov [edx] esi +
call sub_102ADBD  +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
cmp eax [ebp+arg_4] +
jb loc_102A2BF  +
sub eax [ebp+arg_4] +
mov ecx [ebp+arg_8] +
mov [ecx] eax +
xor eax eax +
jmp loc_102A2CA  +
mov eax [ebp+arg_8] +
or dword ptr [eax] 0FFFFFFFFh +
mov eax 80070216h +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
mov esi [ebp+arg_8] +
push edi  +
xor edi edi +
mov [esi+5118h] eax +
mov eax [ebp+arg_4] +
mov [esi+511Ch] eax +
mov [esi+5110h] edi +
mov [esi+5114h] edi +
cmp [esi+2306h] di +
jnz loc_102A509  +
push 2  +
push 4000h  +
call calloc  +
push 2  +
push 2000h  +
mov [esi+38F4h] eax +
call calloc  +
add esp 10h +
mov [esi+38ECh] eax +
cmp eax edi +
jz loc_102A33D  +
cmp [esi+38F4h] edi +
jnz loc_102A343  +
push esi  +
call sub_10263D1  +
lea ecx [esi+3780h] +
push ebx  +
xor eax eax +
xor ebx ebx +
mov edx offset dword_10301F0 +
mov [ebp+arg_0] ecx +
jmp loc_102A35A  +
xor edi edi +
mov ecx [ebp+arg_0] +
mov [ebp+arg_8] edi +
xor edi edi +
mov [ecx] eax +
mov ecx [edx] +
inc edi  +
shl edi cl +
test edi edi +
jle loc_102A384  +
xor edi edi +
mov [esi+eax+307Dh] bl +
mov ecx [edx] +
inc edi  +
shl edi cl +
inc eax  +
inc [ebp+arg_8]  +
cmp [ebp+arg_8] edi +
jl loc_102A36D  +
add [ebp+arg_0] 4 +
add edx 4 +
inc ebx  +
cmp edx offset unk_1030260 +
jl loc_102A358  +
mov [eax+esi+307Ch] bl +
lea ecx [esi+37F4h] +
xor eax eax +
xor edx edx +
mov edi offset dword_10302E0 +
mov [ebp+arg_0] ecx +
mov ecx [ebp+arg_0] +
and [ebp+arg_8] 0 +
xor ebx ebx +
mov [ecx] eax +
mov ecx [edi] +
inc ebx  +
shl ebx cl +
test ebx ebx +
jle loc_102A3D8  +
xor ebx ebx +
mov [esi+eax+327Dh] dl +
mov ecx [edi] +
inc ebx  +
shl ebx cl +
inc eax  +
inc [ebp+arg_8]  +
cmp [ebp+arg_8] ebx +
jl loc_102A3C1  +
add [ebp+arg_0] 4 +
add edi 4 +
inc edx  +
cmp edi offset unk_1030320 +
jl loc_102A3AD  +
sar eax 7 +
cmp edx 1Eh +
jge loc_102A447  +
lea ecx [esi+edx*4+37F4h] +
lea edi dword_10302E0[edx*4] +
mov [ebp+arg_0] ecx +
mov ebx [ebp+arg_0] +
and [ebp+arg_8] 0 +
mov ecx eax +
shl ecx 7 +
mov [ebx] ecx +
mov ecx [edi] +
xor ebx ebx +
sub ecx 7 +
inc ebx  +
shl ebx cl +
test ebx ebx +
jle loc_102A437  +
mov [esi+eax+337Dh] dl +
mov ecx [edi] +
xor ebx ebx +
sub ecx 7 +
inc ebx  +
shl ebx cl +
inc eax  +
inc [ebp+arg_8]  +
cmp [ebp+arg_8] ebx +
jl loc_102A41D  +
add [ebp+arg_0] 4 +
add edi 4 +
inc edx  +
cmp edi offset dword_1030358 +
jl loc_102A401  +
xor eax eax +
movzx ebx ax +
push 8  +
pop edx  +
mov eax ebx +
shl ebx 10h +
or eax ebx +
lea edi [esi+2524h] +
mov ecx edx +
stos   +
push 4  +
lea eax [esi+1E86h] +
mov ecx 90h +
pop edi  +
mov ebx edx +
mov [eax] bx +
add eax edi +
inc word ptr [esi+2534h]  +
dec ecx  +
jnz loc_102A46E  +
push 70h  +
lea eax [esi+20C6h] +
pop ecx  +
push 9  +
pop ebx  +
mov [eax] bx +
add eax edi +
inc word ptr [esi+2536h]  +
dec ecx  +
jnz loc_102A488  +
push 18h  +
lea eax [esi+2286h] +
pop ecx  +
push 7  +
pop ebx  +
mov [eax] bx +
add eax edi +
inc word ptr [esi+2532h]  +
dec ecx  +
jnz loc_102A4A3  +
lea eax [esi+22E6h] +
mov ecx edx +
mov ebx edx +
mov [eax] bx +
add eax edi +
inc word ptr [esi+2534h]  +
dec ecx  +
jnz loc_102A4BD  +
push esi  +
push 11Fh  +
lea eax [esi+1E84h] +
push eax  +
call sub_102AE7D  +
xor ebx ebx +
lea edi [esi+2304h] +
push 5  +
pop eax  +
push eax  +
push ebx  +
mov [edi+2] ax +
call sub_1029593  +
mov [edi] ax +
inc ebx  +
add edi 4 +
cmp ebx 1Eh +
jl loc_102A4E8  +
push esi  +
call sub_1029C73  +
pop ebx  +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1Ch +
mov eax dword_1030118 +
xor eax ebp +
mov [ebp+var_4] eax +
mov ecx [ebp+arg_0] +
mov eax [ecx+4] +
mov edx [ecx+10h] +
or [ebp+var_C] 0FFFFFFFFh +
push ebx  +
push esi  +
mov esi [ebp+arg_4] +
mov [ebp+var_10] eax +
xor eax eax +
cmp edx eax +
push edi  +
mov edi [ecx] +
mov [ebp+var_1C] ecx +
mov [ebp+var_8] edx +
mov [ebp+var_14] edx +
mov [esi+2E38h] eax +
mov dword ptr [esi+2E3Ch] 23Dh +
jle loc_102A5E8  +
cmp word ptr [edi+eax*4] 0 +
jz loc_102A588  +
inc dword ptr [esi+2E38h]  +
mov ebx [esi+2E38h] +
mov [esi+ebx*4+2544h] eax +
mov [ebp+var_C] eax +
mov byte ptr [esi+eax+2E40h] 0 +
jmp loc_102A592  +
xor edx edx +
mov [edi+eax*4+2] dx +
mov edx [ebp+var_8] +
inc eax  +
cmp eax edx +
jl loc_102A561  +
jmp loc_102A5E8  +
cmp [ebp+var_C] 2 +
jge loc_102A5A7  +
inc [ebp+var_C]  +
mov eax [ebp+var_C] +
jmp loc_102A5A9  +
xor eax eax +
inc dword ptr [esi+2E38h]  +
mov edx [esi+2E38h] +
mov [esi+edx*4+2544h] eax +
xor ebx ebx +
mov edx eax +
shl edx 2 +
inc ebx  +
mov [edx+edi] bx +
mov byte ptr [esi+eax+2E40h] 0 +
mov eax [ebp+var_10] +
dec dword ptr [esi+5108h]  +
test eax eax +
jz loc_102A5E8  +
movzx eax word ptr [edx+eax+2] +
sub [esi+510Ch] eax +
cmp dword ptr [esi+2E38h] 2 +
jl loc_102A599  +
mov eax [ebp+var_C] +
mov [ecx+18h] eax +
mov eax [esi+2E38h] +
cdq   +
sub eax edx +
mov ebx eax +
sar ebx 1 +
cmp ebx 1 +
mov [ebp+var_8] ebx +
jl loc_102A61D  +
push esi  +
push ebx  +
push edi  +
call sub_102ADBD  +
dec ebx  +
cmp ebx 1 +
jge loc_102A60C  +
mov [ebp+var_8] ebx +
lea eax [ebp+var_8] +
push eax  +
push edi  +
push esi  +
call sub_102A265  +
dec dword ptr [esi+2E3Ch]  +
mov edx [esi+2E3Ch] +
mov eax [esi+2548h] +
mov ecx [ebp+var_8] +
mov [esi+edx*4+2544h] ecx +
dec dword ptr [esi+2E3Ch]  +
mov edx [esi+2E3Ch] +
mov [esi+edx*4+2544h] eax +
lea ebx [edi+ecx*4] +
lea edx [edi+eax*4] +
mov [ebp+var_18] ebx +
mov bx [ebx] +
add bx [edx] +
mov [ebp+var_10] edx +
mov edx [ebp+var_14] +
mov [edi+edx*4] bx +
mov cl [esi+ecx+2E40h] +
mov al [esi+eax+2E40h] +
cmp cl al +
jbe loc_102A687  +
movzx eax cl +
jmp loc_102A68A  +
movzx eax al +
mov ecx [ebp+var_10] +
inc al  +
mov [esi+edx+2E40h] al +
movzx eax dx +
mov [ecx+2] ax +
mov ecx [ebp+var_18] +
push esi  +
mov [ecx+2] ax +
mov [esi+2548h] edx +
push 1  +
inc edx  +
push edi  +
mov [ebp+var_14] edx +
call sub_102ADBD  +
cmp dword ptr [esi+2E38h] 2 +
jge loc_102A61D  +
dec dword ptr [esi+2E3Ch]  +
mov eax [esi+2E3Ch] +
mov ecx [esi+2548h] +
push esi  +
push [ebp+var_1C]  +
mov [esi+eax*4+2544h] ecx +
call sub_1029CFB  +
push esi  +
push [ebp+var_C]  +
push edi  +
call sub_102AE7D  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_101BC5D  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax [ebp+arg_0] +
or [ebp+var_4] 0FFFFFFFFh +
push ebx  +
push esi  +
push edi  +
movzx edi word ptr [eax+2] +
push 7  +
pop ecx  +
xor ebx ebx +
push 4  +
pop edx  +
test edi edi +
jnz loc_102A72F  +
push 3  +
mov ecx 8Ah +
pop edx  +
mov esi [ebp+arg_4] +
test esi esi +
jl loc_102A839  +
add eax 6 +
inc esi  +
mov [ebp+var_8] esi +
mov esi [ebp+arg_8] +
mov [ebp+arg_4] eax +
jmp loc_102A74C  +
mov edi [ebp+arg_0] +
movzx eax word ptr [eax] +
inc ebx  +
cmp ebx ecx +
mov [ebp+arg_0] eax +
jge loc_102A75F  +
cmp edi eax +
jz loc_102A827  +
cmp ebx edx +
jge loc_102A783  +
movzx eax word ptr [esi+edi*4+23FEh] +
push esi  +
push eax  +
movzx eax word ptr [esi+edi*4+23FCh] +
push eax  +
call sub_102A15E  +
dec ebx  +
jnz loc_102A763  +
jmp loc_102A804  +
test edi edi +
jz loc_102A7C3  +
cmp edi [ebp+var_4] +
jz loc_102A7A5  +
movzx eax word ptr [esi+edi*4+23FEh] +
push esi  +
push eax  +
movzx eax word ptr [esi+edi*4+23FCh] +
push eax  +
call sub_102A15E  +
dec ebx  +
movzx eax word ptr [esi+243Eh] +
push esi  +
push eax  +
movzx eax word ptr [esi+243Ch] +
push eax  +
call sub_102A15E  +
push esi  +
push 2  +
add ebx 0FFFFFFFDh +
jmp loc_102A7FE  +
cmp ebx 0Ah +
push esi  +
jg loc_102A7E3  +
movzx eax word ptr [esi+2442h] +
push eax  +
movzx eax word ptr [esi+2440h] +
push eax  +
call sub_102A15E  +
push esi  +
push 3  +
jmp loc_102A7BE  +
movzx eax word ptr [esi+2446h] +
push eax  +
movzx eax word ptr [esi+2444h] +
push eax  +
call sub_102A15E  +
push esi  +
push 7  +
add ebx 0FFFFFFF5h +
push ebx  +
call sub_102A15E  +
xor ebx ebx +
mov [ebp+var_4] edi +
cmp [ebp+arg_0] ebx +
jnz loc_102A817  +
mov ecx 8Ah +
push 3  +
jmp loc_102A826  +
cmp edi [ebp+arg_0] +
jnz loc_102A821  +
push 6  +
pop ecx  +
jmp loc_102A813  +
push 7  +
pop ecx  +
push 4  +
pop edx  +
mov eax [ebp+arg_4] +
add eax 4 +
dec [ebp+var_8]  +
mov [ebp+arg_4] eax +
jnz loc_102A749  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push esi  +
push dword ptr [esi+24B0h]  +
lea eax [esi+1398h] +
push eax  +
call sub_1029ECD  +
push esi  +
push dword ptr [esi+24E8h]  +
lea eax [esi+1C8Ch] +
push eax  +
call sub_1029ECD  +
push esi  +
lea eax [esi+2508h] +
push eax  +
call sub_102A514  +
push 12h  +
pop eax  +
movzx ecx byte_1030424[eax] +
cmp word ptr [esi+ecx*4+23FEh] 0 +
jnz loc_102A89C  +
dec eax  +
cmp eax 3 +
jge loc_102A884  +
mov ecx eax +
imul ecx ecx +
add ecx 11h +
add [esi+5108h] ecx +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push ebx  +
push esi  +
mov esi [ebp+arg_C] +
push edi  +
push esi  +
push 5  +
add eax 0FFFFFEFFh +
push eax  +
call sub_102A15E  +
mov ebx [ebp+arg_4] +
push esi  +
push 5  +
dec ebx  +
push ebx  +
call sub_102A15E  +
mov edi [ebp+arg_8] +
push esi  +
push 4  +
lea eax [edi-4] +
push eax  +
call sub_102A15E  +
and [ebp+arg_C] 0 +
test edi edi +
jle loc_102A917  +
mov eax [ebp+arg_C] +
movzx eax byte_1030424[eax] +
movzx eax word ptr [esi+eax*4+23FEh] +
push esi  +
push 3  +
push eax  +
call sub_102A15E  +
inc [ebp+arg_C]  +
cmp [ebp+arg_C] edi +
jl loc_102A8F4  +
mov eax [ebp+arg_0] +
push esi  +
dec eax  +
push eax  +
lea eax [esi+1398h] +
push eax  +
call sub_102A706  +
push esi  +
push ebx  +
add esi 1C8Ch +
push esi  +
call sub_102A706  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
xor eax eax +
push esi  +
mov esi [ebp+arg_8] +
mov [ebp+var_8] eax +
mov [ebp+var_C] eax +
mov [ebp+var_1] al +
cmp [esi] eax +
jnz loc_102AA65  +
cmp [esi+50F8h] eax +
jz loc_102AA65  +
push ebx  +
mov [ebp+arg_8] eax +
push edi  +
test byte ptr [ebp+var_8] 7 +
jnz loc_102A989  +
mov eax [ebp+var_C] +
mov al [eax+esi+38F8h] +
inc [ebp+var_C]  +
mov [ebp+var_1] al +
mov eax [esi+38ECh] +
mov ecx [ebp+var_8] +
inc [ebp+var_8]  +
test [ebp+var_1] 1 +
movzx ebx byte ptr [eax+ecx] +
mov eax [ebp+arg_0] +
push esi  +
jnz loc_102A9B4  +
lea ebx [eax+ebx*4] +
movzx eax word ptr [ebx+2] +
push eax  +
movzx eax word ptr [ebx] +
push eax  +
jmp loc_102AA47  +
movzx edi byte ptr [ebx+esi+307Dh] +
movzx ecx word ptr [eax+edi*4+406h] +
movzx eax word ptr [eax+edi*4+404h] +
push ecx  +
push eax  +
call sub_102A15E  +
mov eax dword_10301F0[edi*4] +
test eax eax +
jz loc_102A9ED  +
sub ebx [esi+edi*4+3780h] +
push esi  +
push eax  +
push ebx  +
call sub_102A15E  +
mov ecx [ebp+arg_8] +
mov eax [esi+38F4h] +
movzx ebx word ptr [eax+ecx] +
add [ebp+arg_8] 2 +
cmp ebx 100h +
jnb loc_102AA10  +
movzx edi byte ptr [ebx+esi+327Dh] +
jmp loc_102AA1D  +
mov eax ebx +
shr eax 7 +
movzx edi byte ptr [eax+esi+337Dh] +
mov eax [ebp+arg_4] +
lea eax [eax+edi*4] +
movzx ecx word ptr [eax+2] +
movzx eax word ptr [eax] +
push esi  +
push ecx  +
push eax  +
call sub_102A15E  +
mov eax dword_10302E0[edi*4] +
test eax eax +
jz loc_102AA4C  +
sub ebx [esi+edi*4+37F4h] +
push esi  +
push eax  +
push ebx  +
call sub_102A15E  +
shr [ebp+var_1] 1 +
cmp dword ptr [esi] 0 +
jnz loc_102AA63  +
mov eax [ebp+var_8] +
cmp eax [esi+50F8h] +
jb loc_102A973  +
pop edi  +
pop ebx  +
mov eax [ebp+arg_0] +
movzx ecx word ptr [eax+402h] +
movzx eax word ptr [eax+400h] +
push esi  +
push ecx  +
push eax  +
call sub_102A15E  +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi [ebp+arg_C] +
cmp dword ptr [esi] 0 +
jnz loc_102AC7B  +
mov eax [esi+5100h] +
mov cl [esi+5104h] +
mov [eax+esi+38F8h] cl +
mov eax [esi+5118h] +
mov ecx 0FFFFh +
cmp [eax] cx +
jnz loc_102AAC4  +
push esi  +
call sub_102A0F4  +
push ebx  +
push edi  +
push esi  +
lea eax [esi+2498h] +
push eax  +
call sub_102A514  +
push esi  +
lea eax [esi+24D0h] +
push eax  +
call sub_102A514  +
push esi  +
call sub_102A845  +
mov ebx [esi+5108h] +
mov [ebp+var_4] eax +
mov eax [esi+510Ch] +
add ebx 0Ah +
add eax 0Ah +
shr eax 3 +
shr ebx 3 +
mov [ebp+arg_C] eax +
cmp eax ebx +
ja loc_102AB0A  +
mov ebx eax +
mov edi [ebp+arg_4] +
cmp edi ebx +
ja loc_102AB67  +
cmp [ebp+arg_8] 0 +
jz loc_102AB67  +
mov ecx [esi+5110h] +
or ecx [esi+5114h] +
jnz loc_102AB67  +
push esi  +
call sub_102966A  +
test eax eax +
jz loc_102AB64  +
cmp [ebp+lpBuffer] 0 +
jz loc_102AB64  +
push esi  +
push 0  +
push edi  +
push [ebp+lpBuffer]  +
call sub_102BE73  +
xor eax eax +
shld eax edi +
shl edi 3 +
mov [esi+5114h] eax +
mov eax [esi+511Ch] +
mov [esi+5110h] edi +
and dword ptr [eax] 0 +
jmp loc_102AC59  +
mov eax [ebp+arg_C] +
lea ecx [edi+4] +
cmp ecx ebx +
ja loc_102ABCC  +
cmp [ebp+lpBuffer] 0 +
jz loc_102ABCC  +
push esi  +
call sub_102966A  +
test eax eax +
jz loc_102ABC9  +
push esi  +
push 3  +
push [ebp+arg_8]  +
call sub_102A15E  +
mov ecx [esi+5110h] +
mov eax [esi+5114h] +
add ecx 0Ah +
adc eax 0 +
push 8  +
pop edx  +
mov ebx eax +
lea eax [edi+4] +
mul  edx +
push esi  +
push 1  +
and ecx 0FFFFFFF8h +
add ecx eax +
push edi  +
push [ebp+lpBuffer]  +
adc ebx edx +
mov [esi+5110h] ecx +
mov [esi+5114h] ebx +
call sub_102BE73  +
jmp loc_102AC59  +
mov eax [ebp+arg_C] +
cmp eax ebx +
jnz loc_102AC05  +
push esi  +
call sub_102966A  +
test eax eax +
jz loc_102AC05  +
mov eax [ebp+arg_8] +
push esi  +
push 3  +
add eax 2 +
push eax  +
call sub_102A15E  +
push esi  +
lea eax [esi+2304h] +
push eax  +
lea eax [esi+1E84h] +
push eax  +
call sub_102A943  +
mov eax [esi+510Ch] +
jmp loc_102AC49  +
mov eax [ebp+arg_8] +
push esi  +
push 3  +
add eax 4 +
push eax  +
call sub_102A15E  +
mov eax [ebp+var_4] +
inc eax  +
push esi  +
push eax  +
mov eax [esi+24E8h] +
inc eax  +
push eax  +
mov eax [esi+24B0h] +
inc eax  +
push eax  +
call sub_102A8B4  +
push esi  +
lea eax [esi+1C8Ch] +
push eax  +
lea eax [esi+1398h] +
push eax  +
call sub_102A943  +
mov eax [esi+5108h] +
add eax 3 +
add [esi+5110h] eax +
adc dword ptr [esi+5114h] 0 +
push esi  +
call sub_1029C73  +
cmp [ebp+arg_8] 0 +
pop edi  +
pop ebx  +
jz loc_102AC7B  +
push esi  +
call sub_102A1EC  +
add dword ptr [esi+5110h] 7 +
adc dword ptr [esi+5114h] 0 +
mov edx [esi+5114h] +
mov eax [esi+5110h] +
mov cl 3 +
call __allshr  +
pop esi  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
mov eax dword_1030118 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
mov eax [esi+5110h] +
mov edx [esi+5114h] +
push edi  +
mov cl 3 +
call __allshr  +
mov edi [esi+64h] +
mov ebx eax +
mov [ebp+var_10] edx +
test edi edi +
jl loc_102AD08  +
lea eax [ebp+var_8] +
push eax  +
push edi  +
push dword ptr [esi+74h]  +
call sub_102A2A6  +
test eax eax +
jl loc_102AD1A  +
lea eax [ebp+var_C] +
push eax  +
push [ebp+var_8]  +
push edi  +
call sub_10284E8  +
test eax eax +
jl loc_102AD1A  +
mov eax [ebp+var_C] +
cmp eax [esi+60h] +
ja loc_102AD1A  +
mov eax [esi+4Ch] +
push esi  +
push [ebp+arg_4]  +
add eax edi +
push [ebp+var_8]  +
push eax  +
jmp loc_102AD10  +
push esi  +
push [ebp+arg_4]  +
push 0  +
push 0  +
call sub_102AA88  +
mov [ebp+var_10] edx +
mov ebx eax +
mov ecx [ebp+var_4] +
mov edx [ebp+var_10] +
pop edi  +
pop esi  +
mov eax ebx +
xor ecx ebp +
pop ebx  +
call sub_101BC5D  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
lea ecx [eax+1398h] +
mov edx 11Eh +
push esi  +
xor esi esi +
mov [ecx] si +
add ecx 4 +
dec edx  +
jnz loc_102AD49  +
push 20h  +
lea ecx [eax+1D80h] +
pop edx  +
xor esi esi +
mov [ecx] si +
add ecx 4 +
dec edx  +
jnz loc_102AD5D  +
push 13h  +
lea ecx [eax+23FCh] +
pop edx  +
xor esi esi +
mov [ecx] si +
add ecx 4 +
dec edx  +
jnz loc_102AD71  +
xor ecx ecx +
inc ecx  +
mov [eax+1798h] cx +
xor ecx ecx +
mov [eax+510Ch] ecx +
mov [eax+5108h] ecx +
mov [eax+5100h] ecx +
mov [eax+50FCh] ecx +
mov [eax+50F8h] ecx +
mov [eax+5104h] cl +
mov byte ptr [eax+5105h] 1 +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_8] +
mov ecx [ebp+arg_4] +
mov edx [eax+ecx*4+2544h] +
mov [ebp+arg_8] edx +
mov edx [eax+2E38h] +
add ecx ecx +
cmp ecx edx +
jg loc_102AE67  +
push edi  +
mov edi [ebp+arg_0] +
push ebx  +
push esi  +
jge loc_102AE1F  +
mov esi [eax+ecx*4+2548h] +
mov edx [eax+ecx*4+2544h] +
movzx ebx word ptr [edi+esi*4] +
movzx edx word ptr [edi+edx*4] +
cmp bx dx +
jb loc_102AE1E  +
jnz loc_102AE1F  +
mov dl [esi+eax+2E40h] +
mov esi [eax+ecx*4+2544h] +
cmp dl [esi+eax+2E40h] +
ja loc_102AE1F  +
inc ecx  +
mov esi [eax+ecx*4+2544h] +
mov edx [ebp+arg_8] +
movzx edx word ptr [edi+edx*4] +
movzx ebx word ptr [edi+esi*4] +
cmp dx bx +
jb loc_102AE64  +
jnz loc_102AE4B  +
mov edx [ebp+arg_8] +
mov dl [edx+eax+2E40h] +
cmp dl [esi+eax+2E40h] +
jbe loc_102AE64  +
mov edx [ebp+arg_4] +
mov [eax+edx*4+2544h] esi +
mov edx [eax+2E38h] +
mov [ebp+arg_4] ecx +
add ecx ecx +
cmp ecx edx +
jle loc_102ADE8  +
pop esi  +
pop ebx  +
pop edi  +
mov ecx [ebp+arg_8] +
mov edx [ebp+arg_4] +
mov [eax+edx*4+2544h] ecx +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 24h +
mov eax dword_1030118 +
xor eax ebp +
mov [ebp+var_4] eax +
mov ecx [ebp+arg_8] +
push ebx  +
xor edx edx +
push esi  +
mov esi [ebp+arg_0] +
inc edx  +
xor ebx ebx +
xor eax eax +
add ecx 2524h +
push edi  +
cmp edx 10h +
ja loc_102AEC3  +
mov di [ecx] +
add di ax +
add di di +
movzx eax di +
mov word ptr [ebp+edx*2+var_24] ax +
inc edx  +
inc ecx  +
inc ecx  +
cmp edx 10h +
jb loc_102AEAA  +
cmp [ebp+arg_4] ebx +
jl loc_102AEF8  +
movzx eax word ptr [esi+ebx*4+2] +
lea ecx [eax-1] +
cmp cx 0Eh +
ja loc_102AEF2  +
movzx ecx ax +
lea eax [ebp+ecx*2+var_24] +
movzx edx word ptr [eax] +
movzx edi dx +
push ecx  +
inc edx  +
push edi  +
mov [eax] dx +
call sub_1029593  +
mov [esi+ebx*4] ax +
inc ebx  +
cmp ebx [ebp+arg_4] +
jle loc_102AEC8  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_101BC5D  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1Ch +
mov eax dword_1030118 +
xor eax ebp +
mov [ebp+var_4] eax +
mov ecx [ebp+arg_0] +
mov eax [ecx+4] +
or [ebp+var_C] 0FFFFFFFFh +
push ebx  +
mov ebx [ecx+10h] +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
mov edi [ecx] +
and dword ptr [esi+2E38h] 0 +
mov [ebp+var_18] eax +
xor eax eax +
mov [ebp+var_1C] ecx +
mov [ebp+var_14] ebx +
mov dword ptr [esi+2E3Ch] 23Dh +
mov [ebp+var_8] eax +
test ebx ebx +
jle loc_102AF95  +
lea edx [edi+eax*4] +
cmp word ptr [edx] 0 +
jz loc_102AF84  +
inc dword ptr [esi+2E38h]  +
mov edx [esi+2E38h] +
mov [esi+edx*4+2544h] eax +
mov [ebp+var_C] eax +
mov eax [ebp+var_8] +
mov byte ptr [esi+eax+2E40h] 0 +
jmp loc_102AF8A  +
xor eax eax +
mov [edx+2] ax +
mov eax [ebp+var_8] +
inc eax  +
cmp eax ebx +
mov [ebp+var_8] eax +
jl loc_102AF58  +
cmp dword ptr [esi+2E38h] 2 +
jge loc_102AFF9  +
cmp [ebp+var_C] 2 +
jge loc_102AFAC  +
inc [ebp+var_C]  +
mov eax [ebp+var_C] +
jmp loc_102AFAE  +
xor eax eax +
inc dword ptr [esi+2E38h]  +
mov edx [esi+2E38h] +
mov [esi+edx*4+2544h] eax +
xor ebx ebx +
mov edx eax +
shl edx 2 +
inc ebx  +
mov [edx+edi] bx +
mov byte ptr [esi+eax+2E40h] 0 +
mov eax [ebp+var_18] +
dec dword ptr [esi+5108h]  +
test eax eax +
jz loc_102AFED  +
movzx eax word ptr [edx+eax+2] +
sub [esi+510Ch] eax +
cmp dword ptr [esi+2E38h] 2 +
jl loc_102AF9E  +
mov ebx [ebp+var_14] +
mov eax [ebp+var_C] +
mov [ecx+18h] eax +
mov eax [esi+2E38h] +
cdq   +
sub eax edx +
sar eax 1 +
cmp eax 1 +
mov [ebp+var_8] eax +
jl loc_102B028  +
jmp loc_102B017  +
mov eax [ebp+var_8] +
push esi  +
push eax  +
push edi  +
call sub_102ADBD  +
dec [ebp+var_8]  +
cmp [ebp+var_8] 1 +
jge loc_102B014  +
lea eax [ebp+var_8] +
push eax  +
push edi  +
push esi  +
call sub_102A265  +
dec dword ptr [esi+2E3Ch]  +
mov ecx [esi+2E3Ch] +
mov eax [esi+2548h] +
mov edx [ebp+var_8] +
mov [esi+ecx*4+2544h] edx +
dec dword ptr [esi+2E3Ch]  +
mov ecx [esi+2E3Ch] +
mov [esi+ecx*4+2544h] eax +
mov edx [ebp+var_8] +
mov dx [edi+edx*4] +
lea ecx [edi+eax*4] +
add dx [ecx] +
mov [edi+ebx*4] dx +
mov edx [ebp+var_8] +
mov dl [esi+edx+2E40h] +
mov al [esi+eax+2E40h] +
cmp dl al +
jbe loc_102B08D  +
movzx eax dl +
jmp loc_102B090  +
movzx eax al +
inc al  +
mov [esi+ebx+2E40h] al +
movzx eax bx +
mov [ecx+2] ax +
mov ecx [ebp+var_8] +
push esi  +
push 1  +
mov [edi+ecx*4+2] ax +
mov [esi+2548h] ebx +
push edi  +
inc ebx  +
call sub_102ADBD  +
cmp dword ptr [esi+2E38h] 2 +
jge loc_102B028  +
dec dword ptr [esi+2E3Ch]  +
mov eax [esi+2E3Ch] +
mov ecx [esi+2548h] +
push esi  +
push [ebp+var_1C]  +
mov [esi+eax*4+2544h] ecx +
call sub_1029CFB  +
push esi  +
push [ebp+var_C]  +
push edi  +
call sub_102AE7D  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_101BC5D  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push esi  +
push dword ptr [esi+24CCh]  +
lea eax [esi+1398h] +
push eax  +
call sub_1029ECD  +
push esi  +
push dword ptr [esi+2504h]  +
lea eax [esi+1D80h] +
push eax  +
call sub_1029ECD  +
push esi  +
lea eax [esi+2508h] +
push eax  +
call sub_102AF0E  +
push 12h  +
pop eax  +
movzx ecx byte_1030424[eax] +
cmp word ptr [esi+ecx*4+23FEh] 0 +
jnz loc_102B15E  +
dec eax  +
cmp eax 3 +
jge loc_102B146  +
mov ecx eax +
imul ecx ecx +
add ecx 11h +
add [esi+5108h] ecx +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_8] +
mov edx [eax+50F8h] +
mov ecx [ebp+arg_4] +
push ebx  +
push esi  +
mov esi [eax+38F0h] +
mov [esi+edx*2] cx +
mov edx [ebp+arg_0] +
inc dword ptr [eax+50F8h]  +
push edi  +
test edx edx +
jnz loc_102B1AD  +
lea ecx [eax+ecx*4+1398h] +
inc word ptr [ecx]  +
jmp loc_102B211  +
mov esi 100h +
dec edx  +
cmp ecx esi +
push 1Ch  +
pop edi  +
jge loc_102B1C2  +
movzx edi byte ptr [ecx+eax+317Dh] +
lea ecx [eax+edi*4+179Ch] +
inc word ptr [ecx]  +
cmp edx esi +
jge loc_102B1DA  +
movzx ecx byte ptr [edx+eax+347Dh] +
jmp loc_102B1E7  +
mov ecx edx +
sar ecx 7 +
movzx ecx byte ptr [ecx+eax+357Dh] +
lea ecx [eax+ecx*4+1D80h] +
inc word ptr [ecx]  +
mov edi [eax+38F4h] +
lea ecx [eax+50FCh] +
mov esi [ecx] +
mov [edi+esi*2] dx +
inc dword ptr [ecx]  +
mov cl [eax+5105h] +
or [eax+5104h] cl +
shl byte ptr [eax+5105h] 1 +
test byte ptr [eax+50F8h] 7 +
jnz loc_102B243  +
lea esi [eax+5104h] +
mov bl [esi] +
lea ecx [eax+5100h] +
mov edx [ecx] +
mov [eax+edx+40F8h] bl +
inc dword ptr [ecx]  +
mov byte ptr [esi] 0 +
mov byte ptr [eax+5105h] 1 +
mov esi [eax+50F8h] +
test esi 0FFFh +
jnz loc_102B2AB  +
mov ecx [eax+74h] +
mov edx esi +
shl edx 3 +
sub ecx [eax+64h] +
mov [ebp+arg_8] offset dword_1030358 +
lea esi [eax+1D80h] +
mov edi [ebp+arg_8] +
mov edi [edi] +
movzx ebx word ptr [esi] +
add [ebp+arg_8] 4 +
add edi 5 +
imul edi ebx +
add edx edi +
add esi 4 +
cmp [ebp+arg_8] offset unk_10303D8 +
jl loc_102B269  +
mov esi [eax+50F8h] +
mov edi esi +
shr edi 1 +
cmp [eax+50FCh] edi +
jnb loc_102B2AB  +
shr edx 2 +
and edx 3FFFFFFEh +
and ecx 0FFFFFFFEh +
cmp edx ecx +
jb loc_102B2C3  +
cmp esi 7FFFh +
jz loc_102B2C3  +
cmp dword ptr [eax+50FCh] 8000h +
jz loc_102B2C3  +
xor eax eax +
jmp loc_102B2C6  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
push esi  +
mov esi [ebp+arg_4] +
and [esi+10h] eax +
mov [esi+0Ch] ax +
mov eax [ebp+arg_0] +
mov [esi+4] eax +
cmp eax 0FFFFFFFFh +
jz loc_102B330  +
push 5000h  +
call malloc  +
pop ecx  +
mov [esi+18h] eax +
test eax eax +
jnz loc_102B306  +
push 4  +
pop eax  +
jmp loc_102B332  +
and dword ptr [esi+20h] 0 +
cmp dword ptr [esi+0A0h] 0 +
mov dword ptr [esi+28h] 5000h +
jz loc_102B326  +
mov dword ptr [esi+5340h] offset sub_102457B +
jmp loc_102B330  +
mov dword ptr [esi+5340h] offset sub_10244E5 +
xor eax eax +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
mov esi [ebp+arg_8] +
push edi  +
xor edi edi +
mov [esi+5118h] eax +
mov eax [ebp+arg_4] +
mov [esi+511Ch] eax +
mov [esi+5110h] edi +
mov [esi+5114h] edi +
cmp [esi+237Eh] di +
jnz loc_102B571  +
push 2  +
push 8000h  +
call calloc  +
push 4  +
push 4000h  +
mov [esi+38F4h] eax +
call calloc  +
add esp 10h +
mov [esi+38F0h] eax +
cmp eax edi +
jz loc_102B3A6  +
cmp [esi+38F4h] edi +
jnz loc_102B3AC  +
push esi  +
call sub_10263D1  +
lea ecx [esi+3780h] +
push ebx  +
xor edx edx +
xor ebx ebx +
mov eax offset dword_1030268 +
mov [ebp+arg_0] ecx +
jmp loc_102B3C3  +
xor edi edi +
mov ecx [ebp+arg_0] +
mov [ebp+arg_8] edi +
xor edi edi +
mov [ecx] edx +
mov ecx [eax] +
inc edi  +
shl edi cl +
test edi edi +
jle loc_102B3ED  +
xor edi edi +
mov [esi+edx+317Dh] bl +
mov ecx [eax] +
inc edi  +
shl edi cl +
inc edx  +
inc [ebp+arg_8]  +
cmp [ebp+arg_8] edi +
jl loc_102B3D6  +
add [ebp+arg_0] 4 +
add eax 4 +
inc ebx  +
cmp eax offset unk_10302D8 +
jl loc_102B3C1  +
xor edx edx +
lea ecx [esi+386Ch] +
mov [esi+ebx*4+3780h] edx +
xor eax eax +
mov edi offset dword_1030358 +
mov [ebp+arg_0] ecx +
mov ecx [ebp+arg_0] +
and [ebp+arg_8] 0 +
xor ebx ebx +
mov [ecx] eax +
mov ecx [edi] +
inc ebx  +
shl ebx cl +
test ebx ebx +
jle loc_102B440  +
xor ebx ebx +
mov [esi+eax+347Dh] dl +
mov ecx [edi] +
inc ebx  +
shl ebx cl +
inc eax  +
inc [ebp+arg_8]  +
cmp [ebp+arg_8] ebx +
jl loc_102B429  +
add [ebp+arg_0] 4 +
add edi 4 +
inc edx  +
cmp edi offset unk_1030398 +
jl loc_102B415  +
sar eax 7 +
cmp edx 20h +
jge loc_102B4AF  +
lea ecx [esi+edx*4+386Ch] +
lea edi dword_1030358[edx*4] +
mov [ebp+arg_0] ecx +
mov ebx [ebp+arg_0] +
and [ebp+arg_8] 0 +
mov ecx eax +
shl ecx 7 +
mov [ebx] ecx +
mov ecx [edi] +
xor ebx ebx +
sub ecx 7 +
inc ebx  +
shl ebx cl +
test ebx ebx +
jle loc_102B49F  +
mov [esi+eax+357Dh] dl +
mov ecx [edi] +
xor ebx ebx +
sub ecx 7 +
inc ebx  +
shl ebx cl +
inc eax  +
inc [ebp+arg_8]  +
cmp [ebp+arg_8] ebx +
jl loc_102B485  +
add [ebp+arg_0] 4 +
add edi 4 +
inc edx  +
cmp edi offset unk_10303D8 +
jl loc_102B469  +
xor eax eax +
movzx ebx ax +
push 8  +
pop edx  +
mov eax ebx +
shl ebx 10h +
or eax ebx +
lea edi [esi+2524h] +
mov ecx edx +
stos   +
push 4  +
lea eax [esi+1E86h] +
mov ecx 90h +
pop edi  +
mov ebx edx +
mov [eax] bx +
add eax edi +
inc word ptr [esi+2534h]  +
dec ecx  +
jnz loc_102B4D6  +
push 70h  +
lea eax [esi+20C6h] +
pop ecx  +
push 9  +
pop ebx  +
mov [eax] bx +
add eax edi +
inc word ptr [esi+2536h]  +
dec ecx  +
jnz loc_102B4F0  +
push 18h  +
lea eax [esi+2286h] +
pop ecx  +
push 7  +
pop ebx  +
mov [eax] bx +
add eax edi +
inc word ptr [esi+2532h]  +
dec ecx  +
jnz loc_102B50B  +
lea eax [esi+22E6h] +
mov ecx edx +
mov ebx edx +
mov [eax] bx +
add eax edi +
inc word ptr [esi+2534h]  +
dec ecx  +
jnz loc_102B525  +
push esi  +
push 11Fh  +
lea eax [esi+1E84h] +
push eax  +
call sub_102AE7D  +
xor ebx ebx +
lea edi [esi+237Ch] +
push 5  +
pop eax  +
push eax  +
push ebx  +
mov [edi+2] ax +
call sub_1029593  +
mov [edi] ax +
inc ebx  +
add edi 4 +
cmp ebx 20h +
jl loc_102B550  +
push esi  +
call sub_102AD35  +
pop ebx  +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push ebx  +
push esi  +
mov esi [ebp+arg_C] +
push edi  +
push esi  +
push 5  +
add eax 0FFFFFEFFh +
push eax  +
call sub_102A15E  +
mov ebx [ebp+arg_4] +
push esi  +
push 5  +
dec ebx  +
push ebx  +
call sub_102A15E  +
mov edi [ebp+arg_8] +
push esi  +
push 4  +
lea eax [edi-4] +
push eax  +
call sub_102A15E  +
and [ebp+arg_C] 0 +
test edi edi +
jle loc_102B5DF  +
mov eax [ebp+arg_C] +
movzx eax byte_1030424[eax] +
movzx eax word ptr [esi+eax*4+23FEh] +
push esi  +
push 3  +
push eax  +
call sub_102A15E  +
inc [ebp+arg_C]  +
cmp [ebp+arg_C] edi +
jl loc_102B5BC  +
mov eax [ebp+arg_0] +
push esi  +
dec eax  +
push eax  +
lea eax [esi+1398h] +
push eax  +
call sub_102A706  +
push esi  +
push ebx  +
add esi 1D80h +
push esi  +
call sub_102A706  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
xor eax eax +
push esi  +
mov esi [ebp+arg_8] +
mov [ebp+var_8] eax +
mov [ebp+var_C] eax +
mov [ebp+var_1] al +
cmp [esi] eax +
jnz loc_102B73C  +
cmp [esi+50F8h] eax +
jz loc_102B73C  +
push ebx  +
mov [ebp+arg_8] eax +
push edi  +
test byte ptr [ebp+var_8] 7 +
jnz loc_102B651  +
mov eax [ebp+var_C] +
mov al [eax+esi+40F8h] +
inc [ebp+var_C]  +
mov [ebp+var_1] al +
mov ecx [ebp+var_8] +
mov eax [esi+38F0h] +
inc [ebp+var_8]  +
test [ebp+var_1] 1 +
movzx ebx word ptr [eax+ecx*2] +
jnz loc_102B67C  +
mov eax [ebp+arg_0] +
lea ebx [eax+ebx*4] +
movzx eax word ptr [ebx+2] +
push esi  +
push eax  +
movzx eax word ptr [ebx] +
push eax  +
jmp loc_102B71E  +
cmp ebx 100h +
push 1Ch  +
pop edi  +
jge loc_102B68F  +
movzx edi byte ptr [ebx+esi+317Dh] +
mov eax [ebp+arg_0] +
movzx ecx word ptr [eax+edi*4+406h] +
movzx eax word ptr [eax+edi*4+404h] +
push esi  +
push ecx  +
push eax  +
call sub_102A15E  +
mov eax dword_1030268[edi*4] +
test eax eax +
jz loc_102B6C4  +
sub ebx [esi+edi*4+3780h] +
push esi  +
push eax  +
push ebx  +
call sub_102A15E  +
mov ecx [ebp+arg_8] +
mov eax [esi+38F4h] +
movzx ebx word ptr [eax+ecx] +
add [ebp+arg_8] 2 +
cmp ebx 100h +
jnb loc_102B6E7  +
movzx edi byte ptr [ebx+esi+347Dh] +
jmp loc_102B6F4  +
mov eax ebx +
shr eax 7 +
movzx edi byte ptr [eax+esi+357Dh] +
mov eax [ebp+arg_4] +
lea eax [eax+edi*4] +
movzx ecx word ptr [eax+2] +
movzx eax word ptr [eax] +
push esi  +
push ecx  +
push eax  +
call sub_102A15E  +
mov eax dword_1030358[edi*4] +
test eax eax +
jz loc_102B723  +
sub ebx [esi+edi*4+386Ch] +
push esi  +
push eax  +
push ebx  +
call sub_102A15E  +
shr [ebp+var_1] 1 +
cmp dword ptr [esi] 0 +
jnz loc_102B73A  +
mov eax [ebp+var_8] +
cmp eax [esi+50F8h] +
jb loc_102B63B  +
pop edi  +
pop ebx  +
mov eax [ebp+arg_0] +
movzx ecx word ptr [eax+402h] +
movzx eax word ptr [eax+400h] +
push esi  +
push ecx  +
push eax  +
call sub_102A15E  +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi [ebp+arg_C] +
cmp dword ptr [esi] 0 +
jz loc_102B786  +
mov eax [esi+5110h] +
mov edx [esi+5114h] +
mov cl 3 +
call __allshr  +
jmp loc_102B96A  +
mov eax [esi+5100h] +
mov cl [esi+5104h] +
mov [eax+esi+40F8h] cl +
mov eax [esi+5118h] +
mov ecx 0FFFFh +
cmp [eax] cx +
jnz loc_102B7AF  +
push esi  +
call sub_102A0F4  +
push ebx  +
push edi  +
push esi  +
lea eax [esi+24B4h] +
push eax  +
call sub_102AF0E  +
push esi  +
lea eax [esi+24ECh] +
push eax  +
call sub_102AF0E  +
push esi  +
call sub_102B107  +
mov ebx [esi+5108h] +
mov [ebp+var_4] eax +
mov eax [esi+510Ch] +
add ebx 0Ah +
add eax 0Ah +
shr eax 3 +
shr ebx 3 +
mov [ebp+arg_C] eax +
cmp eax ebx +
ja loc_102B7F5  +
mov ebx eax +
mov edi [ebp+arg_4] +
cmp edi ebx +
ja loc_102B852  +
cmp [ebp+arg_8] 0 +
jz loc_102B852  +
mov ecx [esi+5110h] +
or ecx [esi+5114h] +
jnz loc_102B852  +
push esi  +
call sub_102966A  +
test eax eax +
jz loc_102B84F  +
cmp [ebp+lpBuffer] 0 +
jz loc_102B84F  +
push esi  +
push 0  +
push edi  +
push [ebp+lpBuffer]  +
call sub_102BE73  +
xor eax eax +
shld eax edi +
shl edi 3 +
mov [esi+5114h] eax +
mov eax [esi+511Ch] +
mov [esi+5110h] edi +
and dword ptr [eax] 0 +
jmp loc_102B924  +
mov eax [ebp+arg_C] +
lea ecx [edi+4] +
cmp ecx ebx +
ja loc_102B8A7  +
cmp [ebp+lpBuffer] 0 +
jz loc_102B8A7  +
push esi  +
push 3  +
push [ebp+arg_8]  +
call sub_102A15E  +
mov ecx [esi+5110h] +
mov eax [esi+5114h] +
add ecx 0Ah +
adc eax 0 +
push 8  +
pop edx  +
mov ebx eax +
lea eax [edi+4] +
mul  edx +
push esi  +
push 1  +
and ecx 0FFFFFFF8h +
add ecx eax +
push edi  +
push [ebp+lpBuffer]  +
adc ebx edx +
mov [esi+5110h] ecx +
mov [esi+5114h] ebx +
call sub_102BE73  +
jmp loc_102B924  +
push esi  +
cmp eax ebx +
mov eax [ebp+arg_8] +
push 3  +
jnz loc_102B8D6  +
add eax 2 +
push eax  +
call sub_102A15E  +
push esi  +
lea eax [esi+237Ch] +
push eax  +
lea eax [esi+1E84h] +
push eax  +
call sub_102B60B  +
mov eax [esi+510Ch] +
jmp loc_102B914  +
add eax 4 +
push eax  +
call sub_102A15E  +
mov eax [ebp+var_4] +
inc eax  +
push esi  +
push eax  +
mov eax [esi+2504h] +
inc eax  +
push eax  +
mov eax [esi+24CCh] +
inc eax  +
push eax  +
call sub_102B57C  +
push esi  +
lea eax [esi+1D80h] +
push eax  +
lea eax [esi+1398h] +
push eax  +
call sub_102B60B  +
mov eax [esi+5108h] +
add eax 3 +
add [esi+5110h] eax +
adc dword ptr [esi+5114h] 0 +
push esi  +
call sub_102AD35  +
xor edi edi +
cmp [ebp+arg_8] edi +
jz loc_102B955  +
push 1FFFFh  +
push edi  +
push dword ptr [esi+4Ch]  +
call memset  +
add esp 0Ch +
push esi  +
call sub_102A1EC  +
add dword ptr [esi+5110h] 7 +
adc [esi+5114h] edi +
mov eax [esi+5110h] +
mov edx [esi+5114h] +
mov cl 3 +
call __allshr  +
pop edi  +
pop ebx  +
pop esi  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
mov eax dword_1030118 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
mov eax [esi+5110h] +
mov edx [esi+5114h] +
push edi  +
mov cl 3 +
call __allshr  +
mov edi [esi+64h] +
mov ebx eax +
mov [ebp+var_10] edx +
test edi edi +
jl loc_102B9E4  +
lea eax [ebp+var_8] +
push eax  +
push edi  +
push dword ptr [esi+74h]  +
call sub_102A2A6  +
test eax eax +
jl loc_102B9F6  +
lea eax [ebp+var_C] +
push eax  +
push [ebp+var_8]  +
push edi  +
call sub_10284E8  +
test eax eax +
jl loc_102B9F6  +
mov eax [ebp+var_C] +
cmp eax [esi+60h] +
ja loc_102B9F6  +
mov eax [esi+4Ch] +
push esi  +
push [ebp+arg_4]  +
add eax edi +
push [ebp+var_8]  +
push eax  +
jmp loc_102B9EC  +
push esi  +
push [ebp+arg_4]  +
push 0  +
push 0  +
call sub_102B75F  +
mov [ebp+var_10] edx +
mov ebx eax +
mov ecx [ebp+var_4] +
mov edx [ebp+var_10] +
pop edi  +
pop esi  +
mov eax ebx +
xor ecx ebp +
pop ebx  +
call sub_101BC5D  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
mov eax [esi+4Ch] +
test eax eax +
jz loc_102BA2C  +
push eax  +
call free  +
and dword ptr [esi+4Ch] 0 +
pop ecx  +
mov eax [esi+58h] +
test eax eax +
jz loc_102BA4B  +
push eax  +
call free  +
push dword ptr [esi+5Ch]  +
call free  +
and dword ptr [esi+5Ch] 0 +
and dword ptr [esi+58h] 0 +
pop ecx  +
pop ecx  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push ebx  +
push esi  +
mov esi [ebp+arg_4] +
mov edx [esi+74h] +
mov ecx [esi+4Ch] +
mov eax [esi+84h] +
add ecx edx +
push edi  +
mov edi [esi+70h] +
mov [ebp+var_8] eax +
cmp edx 0FFFFh +
jbe loc_102BA8A  +
add edx 0FFFF0001h +
mov [ebp+var_C] edx +
jmp loc_102BA8E  +
and [ebp+var_C] 0 +
lea eax [ecx+0FFF2h] +
mov [ebp+var_10] eax +
mov al [edi+ecx-1] +
mov byte ptr [ebp+arg_4+3] al +
mov al [edi+ecx] +
mov [ebp+var_1] al +
cmp edi [esi+8Ch] +
jb loc_102BAB0  +
shr [ebp+var_8] 2 +
mov eax [ebp+arg_0] +
mov edx [esi+4Ch] +
add edx eax +
mov al [ebp+var_1] +
cmp [edx+edi] al +
jnz loc_102BB5E  +
mov al byte ptr [ebp+arg_4+3] +
cmp [edx+edi-1] al +
jnz loc_102BB5E  +
mov al [edx] +
cmp al [ecx] +
jnz loc_102BB5E  +
inc edx  +
mov al [edx] +
cmp al [ecx+1] +
jnz loc_102BB5E  +
mov eax [ebp+var_10] +
inc ecx  +
inc ecx  +
inc edx  +
inc ecx  +
mov bl [ecx] +
inc edx  +
cmp bl [edx] +
jnz loc_102BB2D  +
inc ecx  +
mov bl [ecx] +
inc edx  +
cmp bl [edx] +
jnz loc_102BB2D  +
inc ecx  +
mov bl [ecx] +
inc edx  +
cmp bl [edx] +
jnz loc_102BB2D  +
inc ecx  +
mov bl [ecx] +
inc edx  +
cmp bl [edx] +
jnz loc_102BB2D  +
inc ecx  +
mov bl [ecx] +
inc edx  +
cmp bl [edx] +
jnz loc_102BB2D  +
inc ecx  +
mov bl [ecx] +
inc edx  +
cmp bl [edx] +
jnz loc_102BB2D  +
inc ecx  +
mov bl [ecx] +
inc edx  +
cmp bl [edx] +
jnz loc_102BB2D  +
inc ecx  +
mov bl [ecx] +
inc edx  +
cmp bl [edx] +
jnz loc_102BB2D  +
cmp ecx eax +
jb loc_102BAE9  +
mov edx ecx +
sub edx eax +
add edx 0FFF2h +
cmp edx edi +
lea ecx [eax-0FFF2h] +
jle loc_102BB5E  +
cmp edx [esi+90h] +
mov eax [ebp+arg_0] +
mov [esi+78h] eax +
mov edi edx +
jge loc_102BB7D  +
add edx ecx +
mov al [edx-1] +
mov byte ptr [ebp+arg_4+3] al +
mov al [edx] +
mov [ebp+var_1] al +
mov eax [ebp+arg_0] +
mov edx [esi+58h] +
and eax 0FFFFh +
mov eax [edx+eax*4] +
mov [ebp+arg_0] eax +
cmp eax [ebp+var_C] +
jbe loc_102BB7D  +
dec [ebp+var_8]  +
jnz loc_102BAB3  +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov ebx 0FFFF0000h +
mov edi 10000h +
mov ecx [esi+74h] +
mov eax [esi+60h] +
sub eax ecx +
sub eax [esi+80h] +
mov [ebp+arg_0] eax +
cmp eax 0FFFFFFFFh +
jnz loc_102BBBE  +
push 0FFFFFFFEh  +
pop eax  +
jmp loc_102BC3F  +
cmp ecx 1FFFFh +
jb loc_102BC3F  +
cmp dword ptr [esi+68h] 0 +
jz loc_102BC3F  +
mov eax [esi+4Ch] +
push 1FFF6h  +
lea ecx [eax+10000h] +
push ecx  +
push eax  +
call memcpy  +
add [esi+78h] ebx +
add [esi+74h] ebx +
add [esi+64h] ebx +
add esp 0Ch +
xor edx edx +
mov eax [esi+5Ch] +
add eax edx +
mov ecx [eax] +
cmp ecx edi +
lea ebx [ecx-10000h] +
sbb ecx ecx +
not ecx  +
and ecx ebx +
add edx 4 +
mov [eax] ecx +
cmp edx 20000h +
jb loc_102BBEF  +
xor edx edx +
mov eax [esi+58h] +
add eax edx +
mov ecx [eax] +
cmp ecx edi +
lea ebx [ecx-10000h] +
sbb ecx ecx +
not ecx  +
and ecx ebx +
add edx 4 +
mov [eax] ecx +
cmp edx 40000h +
jb loc_102BC13  +
mov eax [ebp+arg_0] +
add eax edi +
mov ebx 0FFFF0000h +
cmp dword ptr [esi+7Ch] 0 +
jnz loc_102BC76  +
push esi  +
push eax  +
mov eax [esi+4Ch] +
add eax [esi+74h] +
add eax [esi+80h] +
push eax  +
call dword ptr [esi+5340h]  +
cmp dword ptr [esi+98h] 0 +
jnz loc_102BC6F  +
test eax eax +
jz loc_102BC6F  +
add [esi+80h] eax +
jmp loc_102BC76  +
mov dword ptr [esi+7Ch] 1 +
cmp dword ptr [esi+80h] 0FFF6h +
jnb loc_102BC8C  +
cmp dword ptr [esi+7Ch] 0 +
jz loc_102BBA0  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
push esi  +
mov esi [ebp+arg_0] +
cmp dword ptr [esi+80h] 0 +
push edi  +
push 2  +
pop edi  +
jz loc_102BE60  +
push ebx  +
cmp dword ptr [esi] 0 +
jnz loc_102BE45  +
mov ecx [esi+74h] +
mov eax [esi+4Ch] +
movzx eax byte ptr [ecx+eax+2] +
mov edx [esi+6Ch] +
shl edx 5 +
xor eax edx +
mov edx [esi+5Ch] +
and eax 7FFFh +
mov [esi+6Ch] eax +
mov eax [edx+eax*4] +
mov edx [esi+58h] +
and ecx 0FFFFh +
mov [edx+ecx*4] eax +
mov ebx [esi+74h] +
mov ecx [esi+6Ch] +
mov edx [esi+5Ch] +
mov [edx+ecx*4] ebx +
mov ebx [esi+78h] +
push 2  +
mov [esi+70h] edi +
pop edi  +
test eax eax +
jz loc_102BD49  +
mov ecx [esi+70h] +
cmp ecx [esi+88h] +
jnb loc_102BD49  +
mov ecx [esi+74h] +
sub ecx eax +
cmp ecx 0FFFFh +
ja loc_102BD49  +
push esi  +
push eax  +
call sub_102BA55  +
mov edi eax +
mov eax [esi+80h] +
cmp edi eax +
jbe loc_102BD34  +
mov edi eax +
cmp edi 3 +
jnz loc_102BD49  +
mov eax [esi+74h] +
sub eax [esi+78h] +
cmp eax 1000h +
jbe loc_102BD49  +
push 2  +
pop edi  +
mov eax [esi+70h] +
cmp eax 3 +
jb loc_102BDE2  +
cmp edi eax +
ja loc_102BDE2  +
add eax 0FFFFFFFDh +
push esi  +
push eax  +
mov eax [esi+74h] +
sub eax ebx +
dec eax  +
push eax  +
call sub_102B176  +
mov ecx [esi+70h] +
xor edx edx +
inc edx  +
sub edx ecx +
add [esi+80h] edx +
add ecx 0FFFFFFFEh +
mov [esi+70h] ecx +
inc dword ptr [esi+74h]  +
mov edx [esi+74h] +
mov ecx [esi+4Ch] +
movzx ecx byte ptr [edx+ecx+2] +
mov edi [esi+6Ch] +
mov ebx [esi+58h] +
shl edi 5 +
xor ecx edi +
mov edi [esi+5Ch] +
and ecx 7FFFh +
mov [esi+6Ch] ecx +
mov ecx [edi+ecx*4] +
and edx 0FFFFh +
mov [ebx+edx*4] ecx +
mov ecx [esi+6Ch] +
mov edx [esi+5Ch] +
mov edi [esi+74h] +
mov [edx+ecx*4] edi +
dec dword ptr [esi+70h]  +
jnz loc_102BD82  +
and [ebp+var_4] 0 +
inc dword ptr [esi+74h]  +
push 2  +
pop edi  +
test eax eax +
jz loc_102BE20  +
push 0  +
push esi  +
call sub_102B974  +
mov eax [esi+74h] +
mov [esi+64h] eax +
jmp loc_102BE20  +
cmp [ebp+var_4] 0 +
jz loc_102BE10  +
mov eax [esi+74h] +
mov ecx [esi+4Ch] +
movzx eax byte ptr [eax+ecx-1] +
push esi  +
push eax  +
push 0  +
call sub_102B176  +
test eax eax +
jz loc_102BE17  +
push 0  +
push esi  +
call sub_102B974  +
mov eax [esi+74h] +
mov [esi+64h] eax +
jmp loc_102BE17  +
mov [ebp+var_4] 1 +
inc dword ptr [esi+74h]  +
dec dword ptr [esi+80h]  +
cmp dword ptr [esi+80h] 0FFF6h +
jnb loc_102BE38  +
cmp dword ptr [esi+7Ch] 0 +
jnz loc_102BE38  +
push esi  +
call sub_102BB8B  +
cmp dword ptr [esi+80h] 0 +
jnz loc_102BCB8  +
cmp [ebp+var_4] 0 +
pop ebx  +
jz loc_102BE60  +
mov eax [esi+74h] +
mov ecx [esi+4Ch] +
movzx eax byte ptr [eax+ecx-1] +
push esi  +
push eax  +
push 0  +
call sub_102B176  +
push 1  +
push esi  +
call sub_102B974  +
pop edi  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
mov esi [ebp+arg_C] +
push edi  +
push esi  +
call sub_102A1EC  +
cmp [ebp+arg_8] 0 +
mov ebx [ebp+arg_4] +
jz loc_102BEFF  +
mov ecx [esi+28h] +
mov eax [esi+20h] +
dec ecx  +
cmp eax ecx +
jnb loc_102BEB6  +
mov ecx [esi+18h] +
mov [eax+ecx] bl +
inc dword ptr [esi+20h]  +
mov eax [esi+20h] +
mov edx [esi+18h] +
mov ecx ebx +
shr ecx 8 +
mov [eax+edx] cl +
inc dword ptr [esi+20h]  +
jmp loc_102BEC2  +
push esi  +
movzx eax bx +
push 2  +
push eax  +
call sub_10295BB  +
mov ecx [esi+28h] +
mov eax [esi+20h] +
dec ecx  +
cmp eax ecx +
jnb loc_102BEEF  +
mov edx [esi+18h] +
mov cl bl +
not cl  +
mov [eax+edx] cl +
inc dword ptr [esi+20h]  +
mov eax [esi+20h] +
mov edx [esi+18h] +
mov ecx ebx +
not ecx  +
shr ecx 8 +
mov [eax+edx] cl +
inc dword ptr [esi+20h]  +
jmp loc_102BEFF  +
mov eax ebx +
not eax  +
push esi  +
movzx eax ax +
push 2  +
push eax  +
call sub_10295BB  +
lea edi [esi+4] +
cmp dword ptr [edi] 0FFFFFFFFh +
jz loc_102BF49  +
push esi  +
push 0  +
push 0  +
call sub_10295BB  +
cmp dword ptr [esi+98h] 0 +
jnz loc_102BF35  +
and [ebp+var_4] 0 +
push esi  +
push edi  +
push [ebp+var_4]  +
push ebx  +
push [ebp+lpBuffer]  +
call sub_10294F6  +
cmp eax ebx +
jnz loc_102BF35  +
cmp edx [ebp+var_4] +
jz loc_102BF77  +
mov eax [esi+98h] +
neg eax  +
sbb eax eax +
and eax 0FFFFFFFBh +
add eax 0Eh +
mov [esi] eax +
jmp loc_102BF77  +
mov eax [esi+20h] +
lea ecx [eax+ebx] +
cmp ecx [esi+28h] +
jbe loc_102BF5C  +
push esi  +
call sub_10263D1  +
jmp loc_102BF71  +
mov ecx [esi+18h] +
push ebx  +
push [ebp+lpBuffer]  +
add ecx eax +
push ecx  +
call memcpy  +
add esp 0Ch +
add [esi+20h] ebx +
mov dword ptr [esi] 0Eh +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
xor eax eax +
inc eax  +
cmp ecx eax +
mov [ebp+arg_0] ecx +
jge loc_102BF98  +
mov [ebp+arg_0] eax +
push 9  +
pop ecx  +
cmp [ebp+arg_0] ecx +
jle loc_102BFA3  +
mov [ebp+arg_0] ecx +
push ebx  +
push esi  +
mov esi [ebp+arg_8] +
push edi  +
xor edi edi +
mov [esi+68h] edi +
mov ebx 2FFF6h +
cmp [esi+60h] edi +
jnz loc_102BFBE  +
mov [esi+68h] eax +
mov [esi+60h] ebx +
cmp [esi+4Ch] edi +
jnz loc_102BFDB  +
push eax  +
push ebx  +
call calloc  +
pop ecx  +
pop ecx  +
mov [esi+4Ch] eax +
cmp eax edi +
jnz loc_102BFDB  +
push esi  +
push 4  +
call sub_1026256  +
cmp [esi+58h] edi +
jnz loc_102C017  +
push 4  +
push 10000h  +
call calloc  +
push 4  +
push 8000h  +
mov [esi+58h] eax +
call calloc  +
add esp 10h +
mov [esi+5Ch] eax +
cmp [esi+58h] edi +
jz loc_102C00A  +
cmp eax edi +
jnz loc_102C017  +
push esi  +
push 4  +
call sub_1026256  +
jmp loc_102C0E5  +
mov eax [esi+5Ch] +
push 1FFFCh  +
mov [eax+1FFFCh] edi +
push edi  +
push dword ptr [esi+5Ch]  +
call memset  +
mov ecx [ebp+arg_0] +
mov eax ecx +
shl eax 3 +
movzx edx word_1030152[eax] +
mov [esi+88h] edx +
movzx edx word_1030150[eax] +
mov [esi+8Ch] edx +
movzx edx word_1030154[eax] +
mov [esi+90h] edx +
movzx eax word_1030156[eax] +
add esp 0Ch +
cmp ecx 2 +
mov [esi+84h] eax +
jg loc_102C07B  +
mov eax [ebp+arg_4] +
or word ptr [eax] 4 +
jmp loc_102C087  +
cmp ecx 8 +
jl loc_102C087  +
mov eax [ebp+arg_4] +
or word ptr [eax] 2 +
push esi  +
push ebx  +
push dword ptr [esi+4Ch]  +
mov [esi+74h] edi +
mov [esi+64h] edi +
call dword ptr [esi+5340h]  +
lea ecx [esi+80h] +
mov [ecx] eax +
cmp eax edi +
jnz loc_102C0AF  +
mov dword ptr [esi+7Ch] 1 +
mov [ecx] edi +
jmp loc_102C0E5  +
mov [esi+7Ch] edi +
cmp eax 0FFF6h +
jnb loc_102C0BF  +
push esi  +
call sub_102BB8B  +
mov ecx [esi+4Ch] +
mov [esi+6Ch] edi +
xor eax eax +
movzx edx byte ptr [ecx+eax] +
mov ebx [esi+6Ch] +
shl ebx 5 +
xor edx ebx +
and edx 7FFFh +
inc eax  +
mov [esi+6Ch] edx +
cmp eax 2 +
jb loc_102C0C7  +
mov [esi+78h] edi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 108h +
mov eax dword_1030118 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
test eax eax +
jl loc_102C15E  +
cmp eax 1Ah +
jg loc_102C15E  +
test eax eax +
jnz loc_102C11B  +
call j__getdrive  +
push esi  +
push 104h  +
lea ecx [ebp+RootPathName] +
push ecx  +
push eax  +
xor esi esi +
call sub_102C532  +
test eax eax +
jz loc_102C159  +
lea eax [ebp+RootPathName] +
push eax  +
call ds:GetDriveTypeA  +
cmp eax 2 +
jz loc_102C156  +
jbe loc_102C152  +
cmp eax 4 +
jbe loc_102C152  +
cmp eax 5 +
jz loc_102C156  +
xor esi esi +
jmp loc_102C159  +
xor esi esi +
inc esi  +
mov eax esi +
pop esi  +
jmp loc_102C160  +
xor eax eax +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_101BC5D  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
cmp byte ptr [eax] 2Eh +
jnz loc_102C197  +
mov cl [eax+1] +
test cl cl +
jz loc_102C192  +
cmp cl 2Eh +
jnz loc_102C197  +
cmp byte ptr [eax+2] 0 +
jnz loc_102C197  +
xor eax eax +
inc eax  +
jmp loc_102C199  +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+lpFindFileData] +
push esi  +
push edi  +
push ebx  +
push [ebp+lpFileName]  +
call ds:FindFirstFileA  +
mov esi [ebp+arg_4] +
mov [esi] eax +
cmp eax 0FFFFFFFFh +
jz loc_102C202  +
mov edi ds:lstrcmpA +
test byte ptr [ebx] 10h +
jnz loc_102C1EA  +
lea eax [ebx+2Ch] +
push offset a__0  +
push eax  +
call edi  +
test eax eax +
jz loc_102C1EA  +
push offset a___0  +
lea eax [ebx+2Ch] +
push eax  +
call edi  +
test eax eax +
jnz loc_102C20B  +
push ebx  +
push dword ptr [esi]  +
call ds:FindNextFileA  +
test eax eax +
jnz loc_102C1C7  +
push dword ptr [esi]  +
call ds:FindClose  +
or dword ptr [esi] 0FFFFFFFFh +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 10h  +
xor eax eax +
inc eax  +
jmp loc_102C204  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
push [ebp+lpFindFileData]  +
mov edi ds:FindNextFileA +
push dword ptr [esi]  +
call edi  +
test eax eax +
jz loc_102C26C  +
mov ebx ds:lstrcmpA +
mov eax [ebp+lpFindFileData] +
test byte ptr [eax] 10h +
jnz loc_102C263  +
add eax 2Ch +
push offset a__0  +
push eax  +
call ebx  +
test eax eax +
jz loc_102C260  +
mov eax [ebp+lpFindFileData] +
push offset a___0  +
add eax 2Ch +
push eax  +
call ebx  +
test eax eax +
jnz loc_102C280  +
mov eax [ebp+lpFindFileData] +
push eax  +
push dword ptr [esi]  +
call edi  +
test eax eax +
jnz loc_102C237  +
push dword ptr [esi]  +
call ds:FindClose  +
or dword ptr [esi] 0FFFFFFFFh +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
xor eax eax +
inc eax  +
jmp loc_102C279  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10Ch +
mov eax dword_1030118 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_4] +
push ebx  +
mov ebx [ebp+arg_C] +
push esi  +
mov esi [ebp+arg_8] +
or dword ptr [esi] 0FFFFFFFFh +
cmp byte ptr [ebx] 0 +
push edi  +
mov [ebp+lpFindFileData] eax +
jnz loc_102C2C5  +
push [ebp+arg_10]  +
push ebx  +
push [ebp+arg_0]  +
call sub_102C532  +
push ebx  +
mov edi 104h +
push edi  +
lea eax [ebp+sz] +
push eax  +
call sub_1022B69  +
lea eax [ebp+sz] +
push eax  +
push 1  +
call sub_102C68D  +
test eax eax +
jnz loc_102C2FC  +
push offset dword_100536C  +
push edi  +
lea eax [ebp+sz] +
push eax  +
call sub_10257FA  +
push offset a__3  +
push edi  +
lea eax [ebp+sz] +
push eax  +
call sub_10257FA  +
mov edi [ebp+lpFindFileData] +
push edi  +
lea eax [ebp+sz] +
push eax  +
call ds:FindFirstFileA  +
mov [esi] eax +
cmp eax 0FFFFFFFFh +
jz loc_102C359  +
test byte ptr [edi] 10h +
jz loc_102C33B  +
lea eax [edi+2Ch] +
push eax  +
call sub_102C173  +
test eax eax +
jz loc_102C36C  +
push edi  +
push dword ptr [esi]  +
call ds:FindNextFileA  +
test eax eax +
jnz loc_102C329  +
mov eax [esi] +
cmp eax 0FFFFFFFFh +
jz loc_102C359  +
push eax  +
call ds:FindClose  +
or dword ptr [esi] 0FFFFFFFFh +
xor eax eax +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_101BC5D  +
leave   +
retn 18h  +
push ebx  +
push 1  +
call sub_102C68D  +
test eax eax +
jnz loc_102C386  +
push offset dword_100536C  +
push [ebp+arg_10]  +
push ebx  +
call sub_10257FA  +
add edi 2Ch +
push edi  +
push [ebp+arg_10]  +
push ebx  +
call sub_10257FA  +
xor eax eax +
inc eax  +
jmp loc_102C35B  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+lpFindFileData] +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
mov edi ds:FindNextFileA +
push ebx  +
push dword ptr [esi]  +
call edi  +
test eax eax +
jz loc_102C3D9  +
test byte ptr [ebx] 10h +
jz loc_102C3C5  +
cmp byte ptr [ebx+2Ch] 2Eh +
jnz loc_102C3E2  +
push ebx  +
push dword ptr [esi]  +
call edi  +
test eax eax +
jnz loc_102C3BA  +
push dword ptr [esi]  +
call ds:FindClose  +
or dword ptr [esi] 0FFFFFFFFh +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 14h  +
push [ebp+lpsz]  +
push 1  +
call sub_102C68D  +
test eax eax +
jnz loc_102C400  +
push offset dword_100536C  +
push [ebp+arg_C]  +
push [ebp+lpsz]  +
call sub_10257FA  +
add ebx 2Ch +
push ebx  +
push [ebp+arg_C]  +
push [ebp+lpsz]  +
call sub_10257FA  +
xor eax eax +
inc eax  +
jmp loc_102C3DB  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax dword_1030118 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
mov esi [ebp+arg_4] +
or eax 0FFFFFFFFh +
mov dword ptr [ebp+sz] eax +
test esi esi +
jz loc_102C4C0  +
cmp byte ptr [esi] 0 +
jz loc_102C4C0  +
push edi  +
push offset String  +
push esi  +
push [ebp+arg_0]  +
call sub_102C5DA  +
mov edi eax +
test edi edi +
jz loc_102C4A9  +
push edi  +
push [ebp+arg_0]  +
call sub_102C582  +
mov al [eax] +
cmp al 5Ch +
jz loc_102C46F  +
cmp al 2Fh +
jnz loc_102C4AD  +
push edi  +
push esi  +
push [ebp+arg_0]  +
call sub_102C5AA  +
cmp eax esi +
jb loc_102C4AD  +
movsx eax byte ptr [eax] +
mov dword ptr [ebp+sz] eax +
push 1  +
lea eax [ebp+sz] +
push eax  +
call ds:CharUpperBuffA  +
sub dword ptr [ebp+sz] 40h +
cmp dword ptr [ebp+sz] 1 +
jl loc_102C49F  +
cmp dword ptr [ebp+sz] 1Ah +
jle loc_102C4AD  +
call _getdrive  +
mov dword ptr [ebp+sz] eax +
jmp loc_102C4AD  +
or dword ptr [ebp+sz] 0FFFFFFFFh +
mov eax dword ptr [ebp+sz] +
cmp eax 0FFFFFFFFh +
pop edi  +
jl loc_102C4BB  +
cmp eax 1Ah +
jle loc_102C4C0  +
call _getdrive  +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop esi  +
call sub_101BC5D  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
xor eax eax +
push edi  +
mov edi [ebp+arg_0] +
test ecx ecx +
jz loc_102C4EE  +
cmp ecx 7FFFFFFFh +
jbe loc_102C4F3  +
mov eax 80070057h +
test eax eax +
jl loc_102C52A  +
push ebx  +
push esi  +
lea eax [ebp+arg_C] +
push eax  +
push [ebp+arg_8]  +
lea esi [ecx-1] +
push esi  +
push edi  +
xor ebx ebx +
call _vsnprintf  +
add esp 10h +
test eax eax +
jl loc_102C51E  +
cmp eax esi +
ja loc_102C51E  +
jnz loc_102C526  +
mov [esi+edi] bl +
jmp loc_102C526  +
mov [esi+edi] bl +
mov ebx 8007007Ah +
pop esi  +
mov eax ebx +
pop ebx  +
pop edi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
mov esi [ebp+arg_4] +
mov byte ptr [esi] 0 +
test eax eax +
jl loc_102C576  +
cmp eax 1Ah +
jg loc_102C576  +
test eax eax +
jnz loc_102C553  +
call _getdrive  +
dec eax  +
cmp eax 1Ah +
ja loc_102C576  +
movsx eax al +
add eax 41h +
push eax  +
push offset aC  +
push [ebp+arg_8]  +
push esi  +
call sub_102C4D4  +
xor eax eax +
add esp 10h +
inc eax  +
jmp loc_102C578  +
xor eax eax +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 1 +
jnz loc_102C598  +
push [ebp+lpsz]  +
call ds:CharNextA  +
jmp loc_102C5A1  +
mov eax [ebp+lpsz] +
cmp byte ptr [eax] 0 +
jz loc_102C5A1  +
inc eax  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 1 +
jnz loc_102C5C3  +
push [ebp+lpszCurrent]  +
push [ebp+lpszStart]  +
call ds:CharPrevA  +
jmp loc_102C5D1  +
mov eax [ebp+lpszCurrent] +
cmp eax [ebp+lpszStart] +
jbe loc_102C5CE  +
dec eax  +
jmp loc_102C5D1  +
mov eax [ebp+lpszStart] +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
push [ebp+lpString]  +
call ds:lstrlenA  +
mov esi [ebp+arg_4] +
mov edi eax +
jmp loc_102C60D  +
push edi  +
push [ebp+lpString]  +
push esi  +
call strncmp  +
add esp 0Ch +
test eax eax +
jz loc_102C61A  +
push esi  +
push [ebp+arg_0]  +
call sub_102C582  +
mov esi eax +
cmp byte ptr [esi] 0 +
jnz loc_102C5F1  +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
mov eax esi +
jmp loc_102C614  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+lpsz] +
push ebx  +
mov bl [ebp+arg_8] +
jmp loc_102C63E  +
cmp cl bl +
jz loc_102C64A  +
push eax  +
push [ebp+arg_0]  +
call sub_102C582  +
mov cl [eax] +
test cl cl +
jnz loc_102C631  +
cmp cl bl +
jz loc_102C64A  +
xor eax eax +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+lpsz] +
push ebx  +
mov bl [ebp+arg_8] +
push esi  +
xor esi esi +
jmp loc_102C674  +
cmp cl bl +
jnz loc_102C66B  +
mov esi eax +
push eax  +
push [ebp+arg_0]  +
call sub_102C582  +
mov cl [eax] +
test cl cl +
jnz loc_102C665  +
cmp cl bl +
jnz loc_102C680  +
mov esi eax +
mov eax esi +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+lpsz] +
push edi  +
push 5Ch  +
push esi  +
push [ebp+arg_0]  +
xor ebx ebx +
call sub_102C654  +
mov edi eax +
test edi edi +
jz loc_102C6BB  +
push esi  +
call ds:lstrlenA  +
lea eax [eax+esi-1] +
cmp edi eax +
jnz loc_102C6BB  +
inc ebx  +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+lpsz] +
push edi  +
push 2Fh  +
push esi  +
push [ebp+arg_0]  +
xor ebx ebx +
call sub_102C654  +
mov edi eax +
test edi edi +
jz loc_102C6F7  +
push esi  +
call ds:lstrlenA  +
lea eax [eax+esi-1] +
cmp edi eax +
jnz loc_102C6F7  +
inc ebx  +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_8] +
push esi  +
push edi  +
test ebx ebx +
jz loc_102C717  +
mov byte ptr [ebx] 0 +
mov eax [ebp+arg_10] +
test eax eax +
jz loc_102C721  +
mov byte ptr [eax] 0 +
mov eax [ebp+arg_18] +
test eax eax +
jz loc_102C72B  +
mov byte ptr [eax] 0 +
mov eax [ebp+arg_20] +
test eax eax +
jz loc_102C735  +
mov byte ptr [eax] 0 +
mov esi [ebp+lpsz] +
push 3Ah  +
push esi  +
push [ebp+arg_0]  +
call sub_102C623  +
test eax eax +
jz loc_102C77C  +
test ebx ebx +
jz loc_102C76E  +
mov edx [ebp+arg_C] +
mov ecx ebx +
lea edi [ebx+edx-1] +
cmp esi eax +
ja loc_102C76B  +
sub esi ebx +
cmp ecx edi +
jnb loc_102C76B  +
mov dl [esi+ecx] +
mov [ecx] dl +
inc ecx  +
lea edx [esi+ecx] +
cmp edx eax +
jbe loc_102C75A  +
mov byte ptr [ecx] 0 +
push eax  +
push [ebp+arg_0]  +
call sub_102C582  +
jmp loc_102C80E  +
cmp byte ptr [esi] 5Ch +
jnz loc_102C810  +
cmp byte ptr [esi+1] 5Ch +
jnz loc_102C810  +
push 5Ch  +
lea eax [esi+2] +
push eax  +
push [ebp+arg_0]  +
call sub_102C623  +
test eax eax +
jz loc_102C7DA  +
test ebx ebx +
jz loc_102C7CA  +
mov ecx [ebp+arg_C] +
mov edi ebx +
lea ecx [ebx+ecx-1] +
cmp esi eax +
ja loc_102C7C5  +
sub esi ebx +
cmp edi ecx +
jnb loc_102C7C5  +
mov dl [esi+edi] +
mov [edi] dl +
inc edi  +
lea edx [esi+edi] +
cmp edx eax +
jbe loc_102C7B4  +
mov byte ptr [edi] 0 +
jmp loc_102C7CD  +
mov edi [ebp+arg_0] +
push eax  +
push [ebp+arg_0]  +
call sub_102C582  +
mov esi eax +
jmp loc_102C7DD  +
mov edi [ebp+arg_0] +
push 5Ch  +
push esi  +
push [ebp+arg_0]  +
call sub_102C623  +
test eax eax +
jz loc_102C810  +
test ebx ebx +
jz loc_102C80E  +
mov ecx [ebp+arg_C] +
lea edx [ebx+ecx-1] +
mov ecx esi +
cmp esi eax +
jnb loc_102C80B  +
cmp edi edx +
jnb loc_102C80B  +
mov bl [ecx] +
mov [edi] bl +
inc edi  +
inc ecx  +
cmp ecx eax +
jb loc_102C7FD  +
mov byte ptr [edi] 0 +
mov esi eax +
push 5Ch  +
push esi  +
push [ebp+arg_0]  +
call sub_102C654  +
test eax eax +
jnz loc_102C82E  +
push 2Fh  +
push esi  +
push [ebp+arg_0]  +
call sub_102C654  +
test eax eax +
jz loc_102C861  +
mov ecx [ebp+arg_10] +
test ecx ecx +
jz loc_102C856  +
mov edx [ebp+arg_14] +
lea edi [ecx+edx-1] +
cmp esi eax +
ja loc_102C853  +
sub esi ecx +
cmp ecx edi +
jnb loc_102C853  +
mov dl [esi+ecx] +
mov [ecx] dl +
inc ecx  +
lea edx [esi+ecx] +
cmp edx eax +
jbe loc_102C842  +
mov byte ptr [ecx] 0 +
push eax  +
push [ebp+arg_0]  +
call sub_102C582  +
mov esi eax +
push 2Eh  +
push esi  +
push [ebp+arg_0]  +
call sub_102C654  +
test eax eax +
jz loc_102C8BC  +
mov edx [ebp+arg_18] +
test edx edx +
jz loc_102C897  +
mov ecx [ebp+arg_1C] +
lea edi [edx+ecx-1] +
mov ecx esi +
cmp esi eax +
jnb loc_102C892  +
cmp edx edi +
jnb loc_102C892  +
mov bl [ecx] +
mov [edx] bl +
inc edx  +
inc ecx  +
cmp ecx eax +
jb loc_102C884  +
mov byte ptr [edx] 0 +
jmp loc_102C899  +
mov ecx eax +
mov edx [ebp+arg_20] +
test edx edx +
jz loc_102C8E4  +
mov eax [ebp+arg_24] +
lea esi [edx+eax-1] +
jmp loc_102C8B1  +
cmp edx esi +
jnb loc_102C8B7  +
mov [edx] al +
inc edx  +
inc ecx  +
mov al [ecx] +
test al al +
jnz loc_102C8A9  +
mov byte ptr [edx] 0 +
jmp loc_102C8E4  +
mov eax [ebp+arg_18] +
test eax eax +
jz loc_102C8E4  +
cmp byte ptr [esi] 0 +
mov ecx [ebp+arg_1C] +
lea ecx [eax+ecx-1] +
jz loc_102C8E1  +
sub esi eax +
cmp eax ecx +
jnb loc_102C8E1  +
mov dl [esi+eax] +
mov [eax] dl +
inc eax  +
cmp byte ptr [esi+eax] 0 +
jnz loc_102C8D1  +
mov byte ptr [eax] 0 +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 28h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
mov edi [ebp+arg_4] +
test edi edi +
jz loc_102C9E9  +
mov eax [ebp+arg_C] +
mov byte ptr [edi] 0 +
test eax eax +
jz loc_102C93C  +
mov cl [eax] +
test cl cl +
jz loc_102C93C  +
cmp cl 5Ch +
jnz loc_102C927  +
cmp [eax+1] cl +
jnz loc_102C927  +
push eax  +
push [ebp+arg_8]  +
push edi  +
call sub_1022B69  +
jmp loc_102C93C  +
movsx eax cl +
push eax  +
push offset aC  +
push [ebp+arg_8]  +
push edi  +
call sub_102C4D4  +
add esp 10h +
push esi  +
mov esi [ebp+arg_10] +
test esi esi +
jz loc_102C966  +
cmp byte ptr [esi] 0 +
jz loc_102C966  +
push edi  +
push [ebp+arg_0]  +
call sub_102C68D  +
test eax eax +
jz loc_102C95C  +
cmp byte ptr [esi] 5Ch +
jnz loc_102C95C  +
inc esi  +
push esi  +
push [ebp+arg_8]  +
push edi  +
call sub_10257FA  +
mov esi [ebp+arg_14] +
push ebx  +
mov ebx offset dword_100536C +
test esi esi +
jz loc_102C999  +
cmp byte ptr [esi] 0 +
jz loc_102C999  +
push edi  +
push [ebp+arg_0]  +
call sub_102C68D  +
test eax eax +
jnz loc_102C98F  +
push ebx  +
push [ebp+arg_8]  +
push edi  +
call sub_10257FA  +
push esi  +
push [ebp+arg_8]  +
push edi  +
call sub_10257FA  +
mov eax [ebp+arg_18] +
test eax eax +
jz loc_102C9E7  +
cmp byte ptr [eax] 0 +
jz loc_102C9E7  +
test esi esi +
jz loc_102C9AE  +
cmp byte ptr [esi] 0 +
jnz loc_102C9C5  +
push edi  +
push [ebp+arg_0]  +
call sub_102C68D  +
test eax eax +
jnz loc_102C9C5  +
push ebx  +
push [ebp+arg_8]  +
push edi  +
call sub_10257FA  +
mov eax [ebp+arg_18] +
cmp byte ptr [eax] 2Eh +
jz loc_102C9DB  +
push offset a__0  +
push [ebp+arg_8]  +
push edi  +
call sub_10257FA  +
push [ebp+arg_18]  +
push [ebp+arg_8]  +
push edi  +
call sub_10257FA  +
pop ebx  +
pop esi  +
pop edi  +
pop ebp  +
retn 1Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
mov eax 7BCh +
cmp ecx eax +
jge loc_102CA15  +
xor ecx ecx +
push ecx  +
push ecx  +
push ecx  +
push 1  +
push 1  +
push eax  +
call sub_102C9F3  +
jmp loc_102CA3A  +
lea eax [ecx-3Ch] +
mov ecx [ebp+arg_14] +
shl eax 4 +
or eax [ebp+arg_4] +
shr ecx 1 +
shl eax 5 +
or eax [ebp+arg_8] +
shl eax 5 +
or eax [ebp+arg_C] +
shl eax 6 +
or eax [ebp+arg_10] +
shl eax 5 +
or eax ecx +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push ebx  +
push esi  +
xor ebx ebx +
push edi  +
mov esi eax +
test eax eax +
jz loc_102CA9F  +
inc ebx  +
cmp byte ptr [eax] 0 +
jz loc_102CA9F  +
mov edi ds:IsDBCSLeadByte +
test ebx ebx +
jz loc_102CA9F  +
mov al [esi] +
cmp al 20h +
jb loc_102CA88  +
cmp al 0FFh +
ja loc_102CA88  +
cmp al 2Ah +
jz loc_102CA88  +
cmp al 3Ah +
jz loc_102CA88  +
cmp al 3Ch +
jz loc_102CA88  +
cmp al 3Dh +
jbe loc_102CA91  +
cmp al 3Fh +
jbe loc_102CA88  +
cmp al 7Ch +
jnz loc_102CA91  +
push eax  +
call edi  +
test eax eax +
jnz loc_102CA91  +
xor ebx ebx +
push esi  +
call ds:CharNextA  +
mov esi eax +
cmp byte ptr [esi] 0 +
jnz loc_102CA62  +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 4  +
***
push ebx  +
xor edi edi +
mov eax [esp+arg_4] +
or eax eax +
jge loc_102CB01  +
inc edi  +
mov edx [esp+arg_0] +
neg eax  +
neg edx  +
sbb eax 0 +
mov [esp+arg_4] eax +
mov [esp+arg_0] edx +
mov eax [esp+arg_C] +
or eax eax +
jge loc_102CB1D  +
inc edi  +
mov edx [esp+arg_8] +
neg eax  +
neg edx  +
sbb eax 0 +
mov [esp+arg_C] eax +
mov [esp+arg_8] edx +
or eax eax +
jnz loc_102CB39  +
mov ecx [esp+arg_8] +
mov eax [esp+arg_4] +
xor edx edx +
div  ecx +
mov ebx eax +
mov eax [esp+arg_0] +
div  ecx +
mov edx ebx +
jmp loc_102CB7A  +
mov ebx eax +
mov ecx [esp+arg_8] +
mov edx [esp+arg_4] +
mov eax [esp+arg_0] +
shr ebx 1 +
rcr ecx 1 +
shr edx 1 +
rcr eax 1 +
or ebx ebx +
jnz loc_102CB47  +
div  ecx +
mov esi eax +
mul  [esp+arg_C] +
mov ecx eax +
mov eax [esp+arg_8] +
mul  esi +
add edx ecx +
jb loc_102CB75  +
cmp edx [esp+arg_4] +
ja loc_102CB75  +
jb loc_102CB76  +
cmp eax [esp+arg_0] +
jbe loc_102CB76  +
dec esi  +
xor edx edx +
mov eax esi +
dec edi  +
jnz loc_102CB84  +
neg edx  +
neg eax  +
sbb edx 0 +
pop ebx  +
pop esi  +
pop edi  +
retn 10h  +
***
mov eax [esp+arg_4] +
mov ecx [esp+arg_C] +
or ecx eax +
mov ecx [esp+arg_8] +
jnz loc_102CBA9  +
mov eax [esp+arg_0] +
mul  ecx +
retn 10h  +
push ebx  +
mul  ecx +
mov ebx eax +
mov eax [esp+4+arg_0] +
mul  [esp+4+arg_C] +
add ebx eax +
mov eax [esp+4+arg_0] +
mul  ecx +
add edx ebx +
pop ebx  +
retn 10h  +
***
cmp cl 40h +
jnb loc_102CC2B  +
cmp cl 20h +
jnb loc_102CC20  +
shrd eax edx +
sar edx cl +
retn   +
mov eax edx +
sar edx 1Fh +
and cl 1Fh +
sar eax cl +
retn   +
sar edx 1Fh +
mov eax edx +
retn   +
***
push dword ptr [ebp-10h]  +
call sub_101B5A8  +
pop ecx  +
retn   +
***
jmp fword ptr (byte_102FDFF-102FE74h)[eax]  +
***
cmp eax 59FFFEF0h +
retn   +
***
jmp sub_1017590  +
***
mov ecx offset unk_1036A68 +
jmp sub_10159A1  +
***
stc   +
add al [eax] +
loopne near ptr loc_102DC94+3  +
add al [eax] +
in al dx +
stc   +
add al [eax] +
clc   +
stc   +
add al [eax] +
push es  +
cli   +
add al [eax] +
adc al 0FAh +
add al [eax] +
cli   +
add al [eax] +
cmp dl bh +
add al [eax] +
xchg eax edx +
jmp loc_102DCBD  +
jmp loc_102DCC1  +
jmp loc_102DCC5  +
jmp loc_102DCC9  +
jmp loc_102DCCD  +
jmp loc_102DCD1  +
jmp loc_102DCD5  +
jmp loc_102DCD9  +
push cs  +
jmp loc_102DCDD  +
add ah bh +
jmp far ptr 0:0EAF00002h  +
***
retf   +
***
