mov edi edi +
push ebp  +
mov ebp esp +
sub esp 24h +
mov eax [ebp+arg_4] +
or [ebp+var_20] 0FFFFFFFFh +
mov [ebp+dwShareMode] 4 +
mov [ebp+dwFlagsAndAttributes] 80h +
test al 2 +
jz loc_1003B50  +
mov [ebp+dwDesiredAccess] 0C0000000h +
test al 10h +
jnz loc_10084C2  +
test al 20h +
jnz loc_10084CE  +
push ebx  +
push esi  +
mov ecx 100h +
push edi  +
mov esi eax +
test eax ecx +
jz loc_1003B6B  +
and esi 400h +
neg esi  +
sbb esi esi +
inc esi  +
inc esi  +
test al 40h +
jnz loc_10084DA  +
test eax 1000h +
jnz loc_10084E6  +
mov edi ds:CreateFileA +
push 0  +
push [ebp+dwFlagsAndAttributes]  +
push esi  +
push 0  +
push [ebp+dwShareMode]  +
push [ebp+dwDesiredAccess]  +
push [ebp+lpFileName]  +
call edi  +
mov ebx ds:GetLastError +
mov [ebp+hObject] eax +
call ebx  +
cmp [ebp+hObject] 0FFFFFFFFh +
mov [ebp+var_18] eax +
jz loc_10084EE  +
mov eax [ebp+arg_4] +
or eax 8080h +
push eax  +
push [ebp+hObject]  +
call ds:_open_osfhandle  +
pop ecx  +
pop ecx  +
mov [ebp+var_20] eax +
cmp eax 0FFFFFFFFh +
jz loc_1008587  +
mov eax [ebp+var_20] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call ds:_write  +
mov esi eax +
add esp 0Ch +
cmp esi [ebp+10h] +
jnz loc_1008614  +
mov eax esi +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push dword ptr [ebp+8]  +
call ds:_close  +
mov esi eax +
pop ecx  +
test esi esi +
jnz loc_1008626  +
mov eax esi +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call ds:_lseek  +
mov esi eax +
add esp 0Ch +
cmp esi 0FFFFFFFFh +
jz loc_1008638  +
mov eax esi +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
xor eax eax +
test ecx ecx +
jz loc_1001358  +
cmp ecx 7FFFFFFFh +
ja loc_1001358  +
test eax eax +
jl loc_1001356  +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
lea eax [ebp+arg_C] +
push eax  +
push [ebp+arg_8]  +
lea esi [ecx-1] +
push esi  +
push edi  +
xor ebx ebx +
call ds:_vsnprintf  +
add esp 10h +
test eax eax +
jl loc_100135F  +
cmp eax esi +
ja loc_100135F  +
jz loc_10090AD  +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn   +
mov eax 80070057h +
jmp loc_1001322  +
mov [esi+edi] bl +
mov ebx 8007007Ah +
jmp loc_1001351  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push edi  +
mov edi [ebp+arg_8] +
test eax eax +
jz loc_100139B  +
mov edx [ebp+arg_4] +
cmp edx 7FFFFFFFh +
ja loc_100139B  +
call sub_10025FF  +
test eax eax +
jl loc_10090B5  +
pop edi  +
pop ebp  +
retn 0Ch  +
mov eax 80070057h +
jmp loc_100138E  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
movsx eax byte ptr [ecx] +
cmp eax 69h +
jg loc_100685D  +
jz loc_1006879  +
cmp eax 45h +
jz loc_10013EF  +
cmp eax 47h +
jz loc_10013EF  +
cmp eax 58h +
jz loc_1006879  +
cmp eax 62h +
jle loc_1006890  +
cmp eax 64h +
jle loc_1006879  +
cmp eax 67h +
jg loc_1006890  +
xor eax eax +
cmp byte ptr [ecx-1] 4Ch +
setz al  +
add eax 5 +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
mov edx [ebp+arg_0] +
push ebx  +
push esi  +
xor esi esi +
cmp [ebp+arg_4] esi +
push edi  +
mov [ebp+var_4] esi +
mov ebx 108h +
jle loc_100143C  +
mov ecx [ebp+arg_4] +
mov eax edx +
or dword ptr [eax+4] 0FFFFFFFFh +
mov [eax] esi +
add eax ebx +
dec ecx  +
jnz loc_1001431  +
cmp [ebp+arg_4] esi +
mov [ebp+var_8] esi +
jle loc_10014B1  +
add edx 4 +
mov [ebp+var_C] edx +
mov edi edx +
cmp dword ptr [edi] 0FFFFFFFFh +
mov [ebp+arg_0] 65h +
jnz loc_10014A4  +
mov eax [ebp+arg_0] +
dec [ebp+arg_0]  +
test eax eax +
jz loc_100149B  +
push [ebp+arg_1C]  +
lea esi [edi+4] +
push 100h  +
push esi  +
call [ebp+arg_14]  +
add esp 0Ch +
test eax eax +
jz loc_1001496  +
push [ebp+arg_1C]  +
and [ebp+var_4] 0 +
lea eax [ebp+var_4] +
push eax  +
push 180h  +
push 8502h  +
push esi  +
call [ebp+arg_8]  +
add esp 14h +
mov [edi] eax +
cmp dword ptr [edi] 0FFFFFFFFh +
jz loc_1001458  +
cmp dword ptr [edi] 0FFFFFFFFh +
jz loc_100969A  +
inc [ebp+var_8]  +
mov eax [ebp+var_8] +
add edi ebx +
cmp eax [ebp+arg_4] +
jl loc_100144C  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 20h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
movzx eax word ptr [esi+25Ch] +
and eax 0Fh +
xor ebx ebx +
sub eax ebx +
push edi  +
mov [ebp+var_4] 1 +
jz loc_10014FB  +
dec eax  +
jz loc_1003472  +
dec eax  +
dec eax  +
jz loc_1003488  +
sub eax 0Ch +
jnz sub_1009729  +
lea edi [esi+264h] +
mov eax [edi] +
cmp eax ebx +
jz loc_100150E  +
push eax  +
call dword ptr [esi+0Ch]  +
pop ecx  +
mov [edi] ebx +
lea edi [esi+260h] +
mov eax [edi] +
cmp eax ebx +
jz loc_1001521  +
push eax  +
call dword ptr [esi+0Ch]  +
pop ecx  +
mov [edi] ebx +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ebp+arg_10] +
and dword ptr [eax] 0 +
and [ebp+var_4] 0 +
push ebx  +
mov ebx [ebp+arg_4] +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
push [ebp+arg_C]  +
mov edi [ebp+arg_8] +
lea eax [ebp+var_4] +
push eax  +
push dword ptr [esi+0AD4h]  +
push ebx  +
push dword ptr [edi+34h]  +
call dword ptr [esi+18h]  +
mov ecx [esi+0AD4h] +
add esp 14h +
cmp eax ecx +
jnz loc_10029BE  +
movzx eax word ptr [ebx+4] +
cmp eax [edi+24Ch] +
ja loc_10029CB  +
push [ebp+arg_C]  +
and [ebp+var_4] 0 +
lea eax [ebp+var_4] +
push eax  +
movzx eax word ptr [ebx+4] +
push eax  +
push dword ptr [edi+264h]  +
push dword ptr [edi+34h]  +
call dword ptr [esi+18h]  +
movzx ecx word ptr [ebx+4] +
add esp 14h +
cmp ecx eax +
jnz loc_1009A05  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
xor ecx ecx +
mov edx 103h +
mov [eax+18h] dx +
xor edx edx +
mov dword ptr [eax] 42414321h +
mov [eax+4] ecx +
mov [eax+8] ecx +
mov [eax+1Ah] dx +
mov [eax+1Ch] dx +
mov [eax+1Eh] dx +
mov [eax+0Ch] ecx +
mov [eax+10h] ecx +
mov [eax+14h] ecx +
pop ebp  +
retn 4  +
***
movzx eax al +
push eax  +
call edi  +
pop ecx  +
test eax eax +
jz loc_100162B  +
inc esi  +
mov al [esi] +
test al al +
jnz loc_10015F5  +
jmp loc_100162B  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
xor ebx ebx +
cmp [esi] bl +
jz loc_1001631  +
push edi  +
mov edi ds:isdigit +
cmp byte ptr [esi] 25h +
jz loc_1001639  +
inc esi  +
cmp byte ptr [esi] 0 +
jnz loc_1001625  +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 4  +
inc esi  +
movzx eax byte ptr [esi] +
push eax  +
call edi  +
pop ecx  +
test eax eax +
jz loc_100162A  +
push esi  +
call ds:atoi  +
cmp eax ebx +
pop ecx  +
jle loc_1001653  +
mov ebx eax +
mov al [esi] +
test al al +
jz loc_1001630  +
jmp loc_10015F5  +
***
mov byte ptr [ebx] 25h +
mov al [edi] +
inc ebx  +
dec [ebp+arg_4]  +
cmp al 25h +
jnz loc_100168F  +
inc edi  +
jmp loc_1001696  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_0] +
push edi  +
mov edi [ebp+arg_8] +
cmp byte ptr [edi] 0 +
jz loc_100169C  +
push esi  +
cmp [ebp+arg_4] 1 +
jle loc_100169B  +
mov al [edi] +
cmp al 25h +
jz loc_10016AA  +
mov [ebx] al +
inc ebx  +
inc edi  +
dec [ebp+arg_4]  +
cmp byte ptr [edi] 0 +
jnz loc_1001683  +
pop esi  +
mov eax ebx +
sub eax [ebp+arg_0] +
pop edi  +
mov byte ptr [ebx] 0 +
pop ebx  +
pop ebp  +
retn 10h  +
inc edi  +
movzx eax byte ptr [edi] +
push eax  +
call ds:isdigit  +
pop ecx  +
test eax eax +
jz loc_100165B  +
push edi  +
call ds:atoi  +
pop ecx  +
mov esi eax +
mov al [edi] +
test al al +
jz loc_10016DC  +
movzx eax al +
push eax  +
call ds:isdigit  +
pop ecx  +
test eax eax +
jz loc_10016DC  +
inc edi  +
jmp loc_10016C4  +
mov eax [ebp+arg_C] +
lea esi [eax+esi*4-4] +
push dword ptr [esi]  +
push [ebp+arg_4]  +
push ebx  +
call sub_1002515  +
mov eax [esi] +
lea esi [eax+1] +
mov cl [eax] +
inc eax  +
test cl cl +
jnz loc_10016F3  +
sub eax esi +
cmp eax [ebp+arg_4] +
jge loc_100925F  +
add ebx eax +
sub [ebp+arg_4] eax +
jmp loc_1001696  +
***
mov edi edi +
push ebp  +
mov ebp esp +
lea eax [ebp+arg_10] +
push eax  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1001732  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 274h +
mov eax dword_1017000 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push ebx  +
mov ebx [ebp+arg_C] +
push esi  +
push edi  +
mov edi [ebp+arg_10] +
mov [ebp+var_234] eax +
mov eax [ebp+arg_8] +
push eax  +
mov [ebp+var_24C] eax +
call sub_100160E  +
mov [ebp+var_248] eax +
test eax eax +
jle loc_10018F5  +
and [ebp+var_238] 0 +
cmp [ebp+var_248] 0 +
lea esi [ebp+var_224] +
mov eax ebx +
jle loc_10018F5  +
lea ebx [edi-4] +
add edi 0FFFFFFF8h +
mov [ebp+var_228] edi +
mov edi 200h +
cmp byte ptr [eax] 25h +
mov ecx [ebp+var_238] +
mov [ebp+ecx*4+var_274] esi +
mov [ebp+var_22C] eax +
jnz loc_1009286  +
lea edx [eax+1] +
mov eax edx +
mov cl [eax] +
mov [ebp+var_23C] eax +
test cl cl +
jz loc_10017D8  +
cmp cl 25h +
jz loc_10017D8  +
inc eax  +
jmp loc_10017C4  +
sub eax [ebp+var_22C] +
cmp eax 2 +
mov [ebp+var_230] eax +
jl loc_1003DB5  +
cmp eax 20h +
jnb loc_1003DB5  +
xor ecx ecx +
cmp byte ptr [edx] 2Ch +
setz cl  +
mov [ebp+var_240] ecx +
test ecx ecx +
jnz loc_1003D73  +
push eax  +
push [ebp+var_22C]  +
lea eax [ebp+var_24] +
push eax  +
call memcpy  +
mov eax [ebp+var_230] +
mov [ebp+eax+var_24] 0 +
mov eax [ebp+var_23C] +
add esp 0Ch +
dec eax  +
push eax  +
call sub_10013A7  +
xor ecx ecx +
inc ecx  +
mov [ebp+var_244] eax +
mov [ebp+var_230] esi +
mov [ebp+var_22C] ecx +
cmp eax ecx +
jz loc_1009273  +
cmp eax 2 +
jz loc_1003D9F  +
cmp eax 3 +
jz loc_1003D9F  +
push 4  +
pop ecx  +
cmp eax ecx +
jle loc_100929E  +
cmp eax 6 +
jle loc_1001921  +
cmp eax 7 +
jnz loc_1009268  +
add [ebp+var_228] ecx +
add ebx ecx +
push dword ptr [ebx]  +
lea eax [ebp+var_24] +
push eax  +
push esi  +
push edi  +
lea eax [ebp+var_224] +
push eax  +
lea eax [ebp+var_22C] +
push eax  +
call sub_100195E  +
add esp 18h +
cmp [ebp+var_22C] 0 +
lea eax [esi+eax+1] +
jnz loc_1003DAE  +
mov ecx eax +
mov [ebp+var_25] 0 +
lea esi [ecx+1] +
mov dl [ecx] +
inc ecx  +
test dl dl +
jnz loc_10018C3  +
sub ecx esi +
cmp [ebp+var_240] 0 +
lea esi [eax+ecx+1] +
jnz loc_10073F4  +
inc [ebp+var_238]  +
mov eax [ebp+var_238] +
cmp eax [ebp+var_248] +
jl loc_1003D68  +
lea eax [ebp+var_274] +
push eax  +
push [ebp+var_24C]  +
push [ebp+arg_4]  +
push [ebp+var_234]  +
call sub_1001670  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_10026CE  +
leave   +
retn 14h  +
add [ebp+var_228] 8 +
mov eax [ebp+var_228] +
fld  qword ptr [eax] +
push ecx  +
push ecx  +
fstp  [esp+288h+var_288] +
lea eax [ebp+var_24] +
push eax  +
push esi  +
push edi  +
lea eax [ebp+var_224] +
push eax  +
lea eax [ebp+var_22C] +
push eax  +
add ebx 8 +
call sub_100195E  +
add esp 1Ch +
jmp loc_10018A9  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
push esi  +
mov esi [ebp+arg_C] +
push edi  +
xor edi edi +
cmp esi eax +
jb loc_10019AD  +
mov ecx esi +
sub ecx eax +
cmp [ebp+arg_8] ecx +
jb loc_10019AD  +
lea ecx [ebp+arg_14] +
push ecx  +
push [ebp+arg_10]  +
sub eax esi +
add eax [ebp+arg_8] +
push eax  +
push esi  +
call sub_10019BD  +
test eax eax +
jl loc_10019AD  +
mov eax esi +
lea edx [eax+1] +
mov cl [eax] +
inc eax  +
test cl cl +
jnz loc_1001996  +
sub eax edx +
mov edi eax +
mov eax [ebp+arg_0] +
and dword ptr [eax] 0 +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn   +
mov eax [ebp+arg_0] +
mov dword ptr [eax] 1 +
jmp loc_10019A7  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
xor eax eax +
test ecx ecx +
jz loc_1001A0A  +
cmp ecx 7FFFFFFFh +
ja loc_1001A0A  +
test eax eax +
jl loc_1001A06  +
push ebx  +
push esi  +
push edi  +
push [ebp+arg_C]  +
mov edi [ebp+arg_0] +
push [ebp+arg_8]  +
lea esi [ecx-1] +
push esi  +
push edi  +
xor ebx ebx +
call ds:_vsnprintf  +
add esp 10h +
test eax eax +
jl loc_1001A11  +
cmp eax esi +
ja loc_1001A11  +
jz loc_1009257  +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 10h  +
mov eax 80070057h +
jmp loc_10019D3  +
mov [esi+edi] bl +
mov ebx 8007007Ah +
jmp loc_1001A01  +
***
movzx ecx byte ptr [ecx] +
or eax ecx +
jmp loc_1001A7E  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
push esi  +
mov esi [ebp+arg_4] +
mov eax esi +
shr eax 2 +
push edi  +
mov edi [ebp+arg_8] +
test eax eax +
jle loc_1001A68  +
push ebx  +
movzx edx byte ptr [ecx] +
dec eax  +
inc ecx  +
movzx ebx byte ptr [ecx] +
shl ebx 8 +
or edx ebx +
inc ecx  +
movzx ebx byte ptr [ecx] +
shl ebx 10h +
or edx ebx +
inc ecx  +
movzx ebx byte ptr [ecx] +
shl ebx 18h +
or edx ebx +
inc ecx  +
xor edi edx +
test eax eax +
jg loc_1001A41  +
pop ebx  +
and esi 3 +
xor eax eax +
dec esi  +
jz loc_1001A1B  +
dec esi  +
jz loc_10028AE  +
dec esi  +
jz loc_10028A7  +
xor eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call ds:_read  +
mov esi eax +
add esp 0Ch +
cmp esi [ebp+10h] +
jnz loc_1001AAF  +
mov eax esi +
pop esi  +
pop ebp  +
retn   +
***
call ds:__imp__errno  +
mov eax [eax] +
mov ecx [ebp+14h] +
mov [ecx] eax +
jmp loc_1001AAA  +
***
mov edi edi +
call sub_10077C4  +
xor ebx ebx +
mov [ebp-4] ebx +
mov eax large fs:18h +
mov esi [eax+4] +
mov [ebp-1Ch] ebx +
mov edi offset Destination +
push ebx  +
push esi  +
push edi  +
call ds:InterlockedCompareExchange  +
cmp eax ebx +
jnz loc_100951E  +
xor esi esi +
inc esi  +
mov eax dword_1017020 +
cmp eax esi +
jz loc_100953D  +
mov eax dword_1017020 +
test eax eax +
jnz loc_1001C77  +
mov dword_1017020 esi +
push offset dword_1001C9C  +
push offset dword_1001C8C  +
call sub_10054D4  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_100954A  +
mov eax dword_1017020 +
cmp eax esi +
jnz loc_1001C2C  +
push offset dword_1001C88  +
push offset dword_1001C80  +
call _initterm  +
pop ecx  +
pop ecx  +
mov dword_1017020 2 +
cmp [ebp-1Ch] ebx +
jnz loc_1001C39  +
push ebx  +
push edi  +
call ds:InterlockedExchange  +
cmp dword_10177CC ebx +
jnz loc_1009558  +
push dword_1017034  +
push dword_1017038  +
push dword_1017030  +
call sub_1001CC1  +
add esp 0Ch +
mov dword_1017014 eax +
cmp dword_1017008 ebx +
jnz loc_10095AA  +
push eax  +
call ds:exit  +
mov dword_1018218 esi +
jmp loc_1001C08  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 220h +
mov eax dword_1017000 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_4] +
push ebx  +
push esi  +
push edi  +
mov [ebp+var_220] eax +
call sub_1006B8F  +
mov eax ds:_iob +
mov esi ds:setvbuf +
xor ebx ebx +
push ebx  +
push 4  +
add eax 20h +
push ebx  +
push eax  +
call esi  +
mov eax ds:_iob +
push ebx  +
push 4  +
add eax 40h +
push ebx  +
push eax  +
call esi  +
add esp 20h +
lea eax [ebp+var_21C] +
push eax  +
call sub_100683B  +
push 0C10h  +
mov [ebp+var_18] ebx +
call ds:malloc  +
mov esi eax +
pop ecx  +
cmp esi ebx +
jz loc_1008BEE  +
xor eax eax +
push 4Fh  +
mov [esi+80h] ax +
lea eax [esi+9B4h] +
push 20h  +
push eax  +
mov [esi+0A0h] ebx +
mov [esi+0A4h] ebx +
mov [esi+0A8h] ebx +
mov [esi+10h] ebx +
mov [esi+4] ebx +
mov [esi+8] ebx +
mov [esi+0Ch] ebx +
mov [esi+40h] ebx +
mov [esi+44h] ebx +
mov [esi+5Ch] ebx +
mov [esi+68h] ebx +
mov [esi+54h] ebx +
mov [esi+58h] ebx +
mov [esi+70h] ebx +
mov [esi+84h] ebx +
mov [esi+0B04h] bl +
mov [esi+0ACh] ebx +
mov [esi+0C0Ch] ebx +
call memset  +
add esp 0Ch +
push esi  +
mov [esi+0A03h] bl +
call sub_1003B85  +
push offset dword_1003934  +
mov edi offset aS_2 +
push edi  +
push offset aCabinetMakerLo  +
lea eax [esi+1B4h] +
push 800h  +
push eax  +
call sub_1001711  +
lea eax [esi+1B4h] +
push eax  +
push edi  +
mov edi ds:printf +
call edi  +
add esp 1Ch +
lea eax [ebp+var_21C] +
push eax  +
push esi  +
call sub_10054FD  +
cmp eax ebx +
jz loc_1008C16  +
mov [esi+8] eax +
lea eax [ebp+var_21C] +
push eax  +
push [ebp+var_220]  +
push [ebp+arg_0]  +
push esi  +
call sub_1005382  +
test eax eax +
jz loc_1008C16  +
cmp dword ptr [esi] 1 +
jz loc_1008C28  +
call ds:clock  +
mov [esi+74h] eax +
mov eax [esi] +
dec eax  +
dec eax  +
jnz loc_1008C36  +
lea eax [ebp+var_21C] +
push eax  +
push esi  +
call sub_1006CCD  +
test eax eax +
jz loc_1001EAD  +
lea eax [ebp+var_21C] +
push eax  +
push esi  +
call sub_1001EEA  +
test eax eax +
jz loc_1008C16  +
xor eax eax +
cmp [esi+38h] ebx +
setnle al  +
mov edi eax +
mov eax [esi+8] +
cmp eax ebx +
jz loc_1001E72  +
lea ecx [ebp+var_21C] +
push ecx  +
push eax  +
call sub_1003271  +
mov eax [esi+84h] +
cmp eax ebx +
jnz loc_1008C4F  +
mov eax [esi+4] +
cmp eax ebx +
jz loc_1001E94  +
lea ecx [ebp+var_21C] +
push ecx  +
push eax  +
call sub_1002938  +
push esi  +
call ds:free  +
mov eax edi +
pop ecx  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_10026CE  +
leave   +
retn   +
xor eax eax +
inc eax  +
jmp loc_1001E9E  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 534h +
mov eax dword_1017000 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov edi [ebp+arg_4] +
push dword ptr [esi+4]  +
mov [esi+0C04h] esi +
mov [esi+0C08h] edi +
call sub_1003E27  +
mov ebx eax +
push ebx  +
call sub_1003E27  +
push ebx  +
mov [ebp+lpCurrentChar] eax +
call sub_10060B6  +
mov ebx 100h +
test eax eax +
jz loc_10088AD  +
cmp byte ptr [eax] 0 +
jz loc_10088AD  +
push edi  +
push offset dword_1001178  +
push eax  +
lea eax [esi+0B04h] +
push eax  +
push ebx  +
lea eax [ebp+var_204] +
push eax  +
call sub_1003C5A  +
test eax eax +
jz loc_1002105  +
push edi  +
push [ebp+lpCurrentChar]  +
call sub_1003C11  +
cmp eax 0FFFFFFFFh +
jz loc_1002105  +
push edi  +
push [ebp+lpCurrentChar]  +
mov [esi+5Ch] eax +
call sub_1005104  +
mov [ebp+var_530] eax +
test eax eax +
jz loc_1002105  +
lea eax [ebp+var_204] +
push eax  +
push ebx  +
lea eax [ebp+var_406] +
push eax  +
mov [ebp+var_506] 0 +
call sub_1002515  +
xor eax eax +
push edi  +
mov [ebp+var_528] eax +
mov [ebp+var_524] eax +
mov [ebp+var_50C] eax +
push esi  +
lea eax [ebp+var_528] +
xor ecx ecx +
push eax  +
mov [ebp+var_306] 0 +
mov [ebp+var_508] cx +
call sub_1006251  +
test eax eax +
jz loc_1002105  +
and dword ptr [esi+7Ch] 0 +
lea ecx [esi+0C04h] +
push ecx  +
lea ecx [ebp+var_528] +
push ecx  +
push offset loc_10024BB  +
push offset loc_10028E0  +
push offset loc_10012DF  +
push offset loc_10012BB  +
push offset loc_100128E  +
push offset loc_1001A8B  +
push offset sub_10011C3  +
push offset loc_10011B2  +
push offset loc_1001195  +
lea eax [esi+48h] +
push offset loc_1002904  +
push eax  +
call sub_100780E  +
add esp 34h +
mov [esi+44h] eax +
test eax eax +
jz loc_10088D5  +
push edi  +
push esi  +
call sub_10061B2  +
push [ebp+var_530]  +
movzx eax ax +
mov [ebp+var_534] eax +
push ebx  +
lea eax [esi+0B4h] +
push eax  +
call sub_1002515  +
lea eax [esi+0C04h] +
push eax  +
xor eax eax +
push eax  +
xor ebx ebx +
push eax  +
inc ebx  +
push eax  +
mov [esi+68h] ebx +
mov [esi+6Ch] ebx +
call sub_100210E  +
push [ebp+var_534]  +
push offset loc_1006D32  +
push offset sub_100210E  +
push offset loc_100BEA1  +
push 0  +
push [ebp+var_530]  +
push [ebp+lpCurrentChar]  +
push dword ptr [esi+44h]  +
call sub_10026E0  +
add esp 30h +
test eax eax +
jz loc_10088EA  +
push offset sub_100210E  +
push offset loc_100BEA1  +
push 0  +
push dword ptr [esi+44h]  +
call sub_1002CDD  +
add esp 10h +
test eax eax +
jz loc_1008908  +
push dword ptr [esi+44h]  +
call sub_1003386  +
pop ecx  +
test eax eax +
jz loc_1008926  +
and dword ptr [esi+44h] 0 +
mov eax ebx +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_10026CE  +
leave   +
retn 8  +
xor eax eax +
jmp loc_10020F4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_C] +
push ebx  +
push esi  +
mov esi [eax] +
mov eax [ebp+arg_0] +
xor ebx ebx +
sub eax ebx +
push edi  +
jz loc_1003AA4  +
dec eax  +
jnz loc_10028BC  +
mov [esi+24h] ebx +
cmp [ebp+arg_8] ebx +
jbe loc_1002186  +
mov eax [ebp+arg_4] +
fild  [ebp+arg_4] +
lea edi [esi+1B4h] +
test eax eax +
jl loc_100842E  +
mov eax [ebp+arg_8] +
fild  [ebp+arg_8] +
test eax eax +
jl loc_1008439  +
fdivp st(1) st +
push ecx  +
push ecx  +
fmul  ds:dbl_1001188 +
fstp  [esp+14h+var_14] +
push offset dword_100117C  +
push offset a1FlushingCurre  +
push 800h  +
push edi  +
call sub_1001711  +
add esp 18h +
push ebx  +
push edi  +
push esi  +
call sub_10021B4  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
lea edx [eax+1] +
mov cl [eax] +
inc eax  +
test cl cl +
jnz loc_10021BF  +
push esi  +
mov esi [ebp+arg_0] +
sub eax edx +
push edi  +
mov edi eax +
mov eax [esi+58h] +
cmp edi eax +
jl loc_1007DBB  +
lea eax [esi+0A03h] +
cmp [ebp+arg_8] 0 +
push eax  +
push [ebp+arg_4]  +
jnz loc_1007FC0  +
push offset aSS  +
call ds:printf  +
add esp 0Ch +
xor eax eax +
cmp [ebp+arg_8] eax +
mov [esi+58h] edi +
setz al  +
pop edi  +
mov [esi+54h] eax +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov eax [ebp+var_23C] +
mov ecx [ebp+var_220] +
movzx ecx word ptr [ecx] +
and [ebp+var_248] 0 +
mov [ebp+var_24C] eax +
mov eax [ebx+0AD4h] +
add ecx eax +
add [ebp+var_23C] ecx +
mov eax [edi+30h] +
mov ecx [ebp+var_234] +
add ecx eax +
cmp [ebp+var_23C] ecx +
jnb loc_1009ED8  +
mov eax [ebp+var_228] +
movzx eax word ptr [eax+6] +
add [ebp+var_240] eax +
inc word ptr [esi+4]  +
mov eax [ebp+var_220] +
movzx eax word ptr [eax] +
push 0  +
push eax  +
push dword ptr [edi+264h]  +
call sub_1001A27  +
push eax  +
mov eax [ebx+0AD4h] +
sub eax 4 +
push eax  +
push [ebp+var_220]  +
call sub_1001A27  +
push [ebp+var_218]  +
mov ecx [ebp+var_228] +
mov [ecx] eax +
push dword ptr [ebx+2Ch]  +
lea eax [ebx+34h] +
push dword ptr [ebx+1Ch]  +
push dword ptr [ebx+0AD4h]  +
push ecx  +
push eax  +
call sub_1002864  +
test eax eax +
jz loc_10023F8  +
push [ebp+var_218]  +
mov eax [ebp+var_220] +
push dword ptr [ebx+2Ch]  +
movzx eax word ptr [eax] +
push dword ptr [ebx+1Ch]  +
push eax  +
mov eax [ebp+var_21C] +
push dword ptr [eax+264h]  +
lea eax [ebx+34h] +
push eax  +
call sub_1002864  +
test eax eax +
jz loc_10023F8  +
mov esi [ebp+var_220] +
movzx eax word ptr [esi] +
push [ebp+var_218]  +
add eax [ebp+var_248] +
push [ebp+var_254]  +
add [ebp+var_238] eax +
push [ebp+var_238]  +
push 1  +
call [ebp+var_244]  +
add esp 10h +
cmp eax 0FFFFFFFFh +
jz loc_100240A  +
mov edi [ebp+var_21C] +
lea eax [ebp+var_224] +
push eax  +
push [ebp+var_218]  +
push edi  +
push [ebp+var_228]  +
push ebx  +
call sub_1001530  +
test eax eax +
jz loc_1002A76  +
mov esi [ebp+var_22C] +
jmp loc_1002216  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 258h +
mov eax dword_1017000 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_C] +
mov ecx [ebp+arg_14] +
and [ebp+var_22C] 0 +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
mov [ebp+var_258] eax +
mov eax [ebp+arg_10] +
push ecx  +
push eax  +
push esi  +
mov [ebp+var_21C] esi +
mov [ebp+var_244] eax +
mov [ebp+var_218] ecx +
mov byte ptr [ebx+0DE1h] 0 +
mov byte ptr [ebx+0EE2h] 0 +
call sub_1002416  +
test eax eax +
jz loc_1002406  +
and [ebp+var_240] 0 +
lea edi [esi+138h] +
add esi 30h +
mov eax [esi] +
add eax [edi] +
jnz loc_1006335  +
xor eax eax +
inc eax  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_10026CE  +
leave   +
retn 18h  +
push [ebp+var_228]  +
call dword ptr [ebx+10h]  +
jmp loc_100A00C  +
xor eax eax +
jmp loc_10023E7  +
***
push 0  +
jmp loc_100A180  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
mov al [esi+25Ch] +
and al 0Fh +
push edi  +
cmp al 3 +
jz loc_1009971  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push esi  +
call sub_1001AC3  +
push esi  +
mov edi eax +
call sub_100245D  +
test eax eax +
jz loc_1002454  +
mov eax edi +
xor edi edi +
mov [esi] edi +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
xor eax eax +
jmp loc_100244E  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
movzx eax word ptr [esi+25Ch] +
and eax 0Fh +
sub eax 0 +
jz loc_100248D  +
dec eax  +
jnz loc_1003EFB  +
push dword ptr [esi+4]  +
call sub_100249A  +
pop ecx  +
test eax eax +
jnz loc_1009752  +
xor eax eax +
inc eax  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
cmp dword ptr [eax] 4349434Dh +
jnz loc_100A1AF  +
mov byte ptr [eax+20h] 0 +
xor eax eax +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push offset dword_100250C  +
push offset dword_1001178  +
call sub_100263A  +
mov esi eax +
pop ecx  +
pop ecx  +
test esi esi +
jz loc_1002507  +
lea edx [eax+1] +
mov cl [eax] +
inc eax  +
test cl cl +
jnz loc_10024DB  +
sub eax edx +
push esi  +
cmp eax [ebp+0Ch] +
jnb loc_10088A1  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call sub_1002515  +
push esi  +
call ds:free  +
xor eax eax +
pop ecx  +
inc eax  +
pop esi  +
pop ebp  +
retn   +
***
xor eax eax +
jmp loc_1002504  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_4] +
xor eax eax +
test edx edx +
jz loc_1002545  +
cmp edx 7FFFFFFFh +
ja loc_1002545  +
test eax eax +
jl loc_1002541  +
mov eax [ebp+arg_8] +
mov ecx [ebp+arg_0] +
push 7FFFFFFEh  +
push 0  +
call sub_1002551  +
pop ebp  +
retn 0Ch  +
mov eax 80070057h +
jmp loc_100252B  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov ebx eax +
mov esi edx +
xor eax eax +
xor edi edi +
test esi esi +
jz loc_1002596  +
cmp [ebp+arg_4] eax +
jz loc_100257D  +
mov dl [ebx] +
test dl dl +
jz loc_100257D  +
mov [ecx] dl +
inc ecx  +
inc ebx  +
dec esi  +
dec [ebp+arg_4]  +
inc edi  +
test esi esi +
jnz loc_1002565  +
test esi esi +
jz loc_1002596  +
mov byte ptr [ecx] 0 +
mov ecx [ebp+arg_0] +
test ecx ecx +
jnz loc_100900D  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
dec ecx  +
dec edi  +
mov eax 8007007Ah +
jmp loc_1002581  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_4] +
push ebx  +
xor eax eax +
push esi  +
mov esi 7FFFFFFFh +
test edx edx +
jz loc_10025EF  +
cmp edx esi +
ja loc_10025EF  +
mov ebx [ebp+arg_0] +
test eax eax +
jl loc_10025F6  +
push edi  +
lea edi [ebp+arg_0] +
mov eax ebx +
call sub_10025FF  +
mov ecx [ebp+arg_0] +
pop edi  +
test eax eax +
jl loc_10025E9  +
mov edx [ebp+arg_4] +
mov eax [ebp+arg_8] +
push esi  +
sub edx ecx +
push 0  +
add ecx ebx +
call sub_1002551  +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
mov eax 80070057h +
jmp loc_10025BD  +
xor ecx ecx +
jmp loc_10025D3  +
***
mov edi edi +
push esi  +
mov esi eax +
xor eax eax +
mov ecx edx +
test edx edx +
jz loc_100262E  +
cmp [esi] al +
jz loc_1002614  +
inc esi  +
dec edx  +
jnz loc_100260C  +
test edx edx +
jz loc_100262E  +
pop esi  +
test edi edi +
jz nullsub_1  +
test eax eax +
jl loc_100917E  +
sub ecx edx +
mov [edi] ecx +
retn   +
mov eax 80070057h +
jmp loc_1002618  +
***
mov edi edi +
pop edi  +
cmp ecx dword_1017000 +
jnz loc_1012609  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
test esi esi +
jz loc_1003550  +
cmp [ebp+arg_8] 0 +
jz loc_1003550  +
mov eax [esi+4] +
mov edi [ebp+arg_1C] +
cmp di [eax+25Ch] +
jz loc_1002737  +
push dword ptr [esi+10h]  +
push [ebp+arg_14]  +
push [ebp+arg_10]  +
push 0  +
push eax  +
push dword ptr [esi]  +
call sub_100236A  +
test eax eax +
jz loc_1003550  +
push dword ptr [esi+4]  +
push edi  +
call sub_1002791  +
test eax eax +
jz loc_1003550  +
push dword ptr [esi+10h]  +
push edi  +
push [ebp+arg_18]  +
push [ebp+arg_14]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push dword ptr [esi+4]  +
call sub_100568A  +
test eax eax +
jz loc_1003550  +
mov ecx [esi+4] +
mov edx [ecx+240h] +
add edx [ecx+30h] +
mov eax [esi] +
cmp [eax+350h] edx +
jnb loc_1003512  +
push dword ptr [esi+10h]  +
push [ebp+arg_14]  +
push [ebp+arg_10]  +
push 0  +
push dword ptr [esi+4]  +
push eax  +
call sub_100236A  +
pop edi  +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
mov edi [ebp+arg_4] +
push edi  +
call sub_10014C0  +
test eax eax +
jz loc_10027C4  +
mov ax [ebp+arg_0] +
push esi  +
lea esi [edi+25Ch] +
push edi  +
mov [esi] ax +
call sub_10027CE  +
test eax eax +
jz loc_10099DB  +
xor eax eax +
inc eax  +
pop esi  +
pop edi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
movzx ecx word ptr [esi+25Ch] +
mov eax ecx +
push edi  +
xor edi edi +
and eax 0Fh +
sub eax edi +
lea ebx [esi+250h] +
mov edx 8000h +
mov [ebx] edx +
mov [esi+264h] edi +
mov [esi+260h] edi +
jz loc_1007A8C  +
dec eax  +
jz loc_1007A3D  +
dec eax  +
dec eax  +
jz loc_1009815  +
sub eax 0Ch +
jnz loc_1009810  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
lea ecx [eax+1] +
mov dl [eax] +
inc eax  +
test dl dl +
jnz loc_100283C  +
push [ebp+arg_10]  +
sub eax ecx +
push [ebp+arg_C]  +
inc eax  +
push [ebp+arg_8]  +
push eax  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1002864  +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [eax] +
push esi  +
mov esi [ebp+arg_8] +
lea edx [ecx+esi] +
cmp ecx edx +
ja loc_100970F  +
push [ebp+arg_14]  +
and [ebp+arg_0] 0 +
lea ecx [ebp+arg_0] +
push ecx  +
push esi  +
push [ebp+arg_4]  +
mov [eax] edx +
push dword ptr [eax+4]  +
call [ebp+arg_C]  +
add esp 14h +
cmp esi eax +
jnz loc_1009722  +
xor eax eax +
inc eax  +
pop esi  +
pop ebp  +
retn 18h  +
***
movzx eax byte ptr [ecx] +
shl eax 10h +
inc ecx  +
movzx edx byte ptr [ecx] +
shl edx 8 +
or eax edx +
inc ecx  +
jmp loc_1001A1B  +
***
dec eax  +
jnz loc_1002186  +
cmp [esi+30h] ebx +
jnz loc_100840B  +
mov eax [ebp+arg_8] +
jmp loc_1002189  +
fldz   +
jmp loc_1003AE7  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push dword ptr [ebp+8]  +
call ds:remove  +
mov esi eax +
pop ecx  +
test esi esi +
jnz loc_100864A  +
mov eax esi +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+18h] +
push esi  +
mov esi [ebp+8] +
push edi  +
mov edi [eax] +
cmp dword ptr [edi+40h] 2 +
mov eax [eax+4] +
mov [ebp+18h] eax +
jge loc_10087B8  +
cmp dword ptr [edi+7Ch] 0 +
jnz loc_1008804  +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
mov esi [eax] +
push edi  +
mov edi ds:free +
test esi esi +
jz loc_1002972  +
push ebx  +
mov eax [esi] +
test eax eax +
jz loc_1002959  +
push eax  +
call edi  +
pop ecx  +
mov eax [esi+4] +
test eax eax +
jz loc_1002964  +
push eax  +
call edi  +
pop ecx  +
mov ebx [esi+10h] +
push esi  +
call edi  +
pop ecx  +
mov esi ebx +
test ebx ebx +
jnz loc_100294F  +
pop ebx  +
push [ebp+arg_0]  +
call edi  +
pop ecx  +
xor eax eax +
pop edi  +
inc eax  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
push esi  +
push 0Fh  +
call sub_1002791  +
push [ebp+arg_4]  +
lea eax [esi+30h] +
push dword ptr [esi+2Ch]  +
push dword ptr [esi+24h]  +
push dword ptr [esi+1Ch]  +
push 2  +
push eax  +
call sub_1003406  +
push esi  +
mov edi eax +
call dword ptr [esi+0Ch]  +
pop ecx  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
ja loc_1009A05  +
xor eax eax +
jmp loc_10015AF  +
mov eax [ebp+arg_10] +
mov dword ptr [eax] 1 +
jmp loc_10029C4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
mov esi [ebp+arg_C] +
push edi  +
push [ebp+arg_14]  +
lea eax [ebp+var_4] +
push eax  +
xor ebx ebx +
push 1  +
push ebx  +
push [ebp+arg_0]  +
mov [ebp+var_4] ebx +
call dword ptr [esi+24h]  +
push [ebp+arg_14]  +
mov edi [ebp+arg_4] +
mov [ebp+arg_C] eax +
lea eax [ebp+var_4] +
push eax  +
push [ebp+arg_8]  +
mov [ebp+var_4] ebx +
push edi  +
push [ebp+arg_0]  +
call dword ptr [esi+18h]  +
add esp 28h +
cmp eax ebx +
jle loc_1009A20  +
mov ecx [ebp+arg_8] +
cmp eax ecx +
jg loc_1009A20  +
mov al [edi+ecx-1] +
mov byte ptr [ebp+arg_8+3] al +
mov eax edi +
mov [edi+ecx-1] bl +
lea edi [eax+1] +
mov dl [eax] +
inc eax  +
cmp dl bl +
jnz loc_1002A3C  +
sub eax edi +
lea edx [eax+1] +
cmp edx ecx +
jge loc_1009A17  +
push [ebp+arg_14]  +
lea ecx [ebp+var_4] +
push ecx  +
mov ecx [ebp+arg_C] +
push ebx  +
lea eax [eax+ecx+1] +
push eax  +
push [ebp+arg_0]  +
mov [ebp+var_4] ebx +
call dword ptr [esi+24h]  +
xor eax eax +
add esp 14h +
inc eax  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 18h  +
***
cmp [ebp+var_224] 0 +
jnz loc_10023F8  +
lea eax [ebx+9AEh] +
inc word ptr [eax]  +
movzx eax word ptr [eax] +
mov ecx 0FFFCh +
cmp cx ax +
jb loc_100A199  +
push [ebp+var_218]  +
lea eax [ebx+244h] +
push dword ptr [ebx+2Ch]  +
push dword ptr [ebx+1Ch]  +
push dword ptr [ebx+0AD0h]  +
push [ebp+var_22C]  +
push eax  +
call sub_1002864  +
test eax eax +
jz loc_10023F8  +
push [ebp+var_218]  +
mov esi [ebp+var_21C] +
lea eax [ebp+var_224] +
push eax  +
xor edi edi +
push edi  +
push edi  +
push dword ptr [esi+13Ch]  +
mov [ebp+var_224] edi +
call dword ptr [ebx+24h]  +
add esp 14h +
cmp eax 0FFFFFFFFh +
jz loc_100A18F  +
lea eax [ebp+var_224] +
push eax  +
push [ebp+var_218]  +
mov [ebp+var_224] edi +
push esi  +
push ebx  +
call sub_1003340  +
test eax eax +
jz loc_1002C31  +
lea edi [ebx+9B8h] +
mov ax [ebx+9C0h] +
push [ebp+var_218]  +
mov esi 0FFFDh +
mov ecx esi +
and ax cx +
xor edx edx +
cmp ax cx +
setz dl  +
lea eax [ebx+0ADEh] +
push edx  +
push dword ptr [edi]  +
push eax  +
lea eax [ebx+34Ch] +
push eax  +
call dword ptr [ebx+4]  +
add esp 14h +
cmp eax 0FFFFFFFFh +
jz loc_100240A  +
mov ax [ebx+9C0h] +
mov ecx esi +
and ax cx +
cmp ax cx +
jz loc_1002B81  +
mov ax [ebx+0AD8h] +
mov [ebx+9C0h] ax +
mov eax [ebx+9BCh] +
add eax [edi] +
cmp eax [ebp+var_240] +
ja loc_100A095  +
push [ebp+var_218]  +
lea eax [ebx+13Ch] +
push dword ptr [ebx+2Ch]  +
push dword ptr [ebx+1Ch]  +
push 10h  +
push edi  +
push eax  +
call sub_1002864  +
test eax eax +
jz loc_10023F8  +
push [ebp+var_218]  +
lea esi [ebx+0ADEh] +
push dword ptr [ebx+2Ch]  +
lea eax [ebx+13Ch] +
push dword ptr [ebx+1Ch]  +
push esi  +
push eax  +
call sub_1002831  +
test eax eax +
jz loc_10023F8  +
lea eax [ebx+9B0h] +
inc word ptr [eax]  +
movzx eax word ptr [eax] +
xor ecx ecx +
cmp cx ax +
jz loc_100A199  +
mov cx [ebx+9C0h] +
mov eax 0FFFEh +
mov edx eax +
and cx dx +
cmp cx ax +
jz loc_100A0B6  +
lea eax [ebp+var_224] +
push eax  +
push [ebp+var_218]  +
push [ebp+var_21C]  +
push ebx  +
call sub_1003340  +
test eax eax +
jnz loc_1002B23  +
cmp [ebp+var_224] 0 +
jnz loc_10023F8  +
push [ebp+var_218]  +
mov eax [ebp+var_21C] +
push dword ptr [eax+2Ch]  +
add eax 30h +
push dword ptr [eax-0Ch]  +
push dword ptr [eax-14h]  +
push 2  +
push eax  +
call sub_1003406  +
test eax eax +
jz loc_10023F8  +
cmp [ebp+var_250] 0 +
mov eax [ebp+var_21C] +
push 42h  +
pop ecx  +
lea esi [ebp+var_214] +
lea edi [eax+30h] +
movs   +
push 42h  +
pop ecx  +
lea esi [ebp+var_10C] +
lea edi [eax+138h] +
movs   +
jnz loc_100A113  +
mov ecx [eax+30h] +
add eax 138h +
add ecx [eax] +
jnz loc_10063C3  +
cmp [ebp+arg_8] 0 +
jnz loc_1002CB5  +
inc word ptr [ebx+0AD8h]  +
push [ebp+var_228]  +
call dword ptr [ebx+10h]  +
push [ebp+var_230]  +
call dword ptr [ebx+10h]  +
push [ebp+var_22C]  +
call dword ptr [ebx+10h]  +
add esp 0Ch +
jmp loc_10023E4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
test esi esi +
jz loc_1002D31  +
push dword ptr [esi+10h]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push dword ptr [esi+4]  +
push dword ptr [esi]  +
call sub_100236A  +
test eax eax +
jz loc_1002D31  +
cmp [ebp+arg_4] 0 +
jnz loc_1009653  +
mov eax [esi] +
and [ebp+arg_0] 0 +
push dword ptr [esi+10h]  +
mov ecx [eax+13Ch] +
add ecx [eax+34h] +
push ecx  +
lea ecx [ebp+arg_0] +
push ecx  +
push [ebp+arg_C]  +
push eax  +
call sub_1002D3A  +
pop esi  +
pop ebp  +
retn   +
xor eax eax +
jmp loc_1002D2E  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 128h +
mov eax dword_1017000 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_4] +
mov [ebp+var_128] eax +
mov eax [ebp+arg_8] +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
mov [ebp+var_120] eax +
mov eax [ebp+arg_10] +
push edi  +
mov [ebp+var_10C] eax +
lea eax [esi+56Eh] +
push eax  +
mov edi 100h +
push edi  +
lea eax [ebp+var_104] +
push eax  +
call sub_1002515  +
lea eax [esi+46Eh] +
push eax  +
push edi  +
lea eax [ebp+var_104] +
push eax  +
call sub_10025A4  +
push [ebp+var_10C]  +
lea eax [ebp+var_108] +
push eax  +
push 180h  +
lea eax [ebp+var_104] +
push 8302h  +
xor ebx ebx +
push eax  +
mov [ebp+var_108] ebx +
call dword ptr [esi+14h]  +
add esp 14h +
mov [ebp+var_110] eax +
cmp eax 0FFFFFFFFh +
jz loc_1009A94  +
push dword ptr [esi+0AD0h]  +
call dword ptr [esi+0Ch]  +
pop ecx  +
mov [ebp+var_124] eax +
cmp eax ebx +
jz loc_1009CEF  +
mov ecx [esi+0ACCh] +
lea eax [esi+0BDFh] +
mov [ebp+var_118] ecx +
cmp [eax] bl +
jnz loc_1009AA9  +
lea eax [esi+0FE3h] +
cmp [eax] bl +
jnz loc_1009AEE  +
mov eax [esi+244h] +
add eax ecx +
cmp ecx eax +
ja loc_1003172  +
mov ecx [esi+13Ch] +
add ecx eax +
mov [esi+9A4h] eax +
cmp eax ecx +
ja loc_1003172  +
mov eax [esi+34h] +
add eax ecx +
cmp eax ebx +
mov [esi+99Ch] eax +
jl loc_1003172  +
cmp eax ecx +
jb loc_1003172  +
cmp [esi+0AC8h] ebx +
ja loc_1009B33  +
mov ax [esi+0ADAh] +
push [ebp+var_10C]  +
mov [esi+9B4h] ax +
lea eax [esi+0ADCh] +
movzx ecx word ptr [eax] +
mov [esi+9B6h] cx +
inc ecx  +
mov [eax] cx +
lea ecx [ebp+var_108] +
push ecx  +
lea eax [esi+994h] +
push 24h  +
push eax  +
push [ebp+var_110]  +
mov [ebp+var_108] ebx +
call dword ptr [esi+1Ch]  +
add esp 14h +
cmp eax 24h +
jnz loc_1009B40  +
cmp [esi+0AC8h] ebx +
ja loc_1009B4D  +
test byte ptr [esi+9B2h] 1 +
jnz loc_1009C2B  +
test byte ptr [esi+9B2h] 2 +
jnz loc_1009C7C  +
lea eax [esi+0DE1h] +
push eax  +
mov edi 101h +
push edi  +
lea eax [esi+0BDFh] +
push eax  +
mov [esi+0FE3h] bl +
mov [esi+10E4h] bl +
call sub_1002515  +
lea eax [esi+0EE2h] +
push eax  +
push edi  +
lea eax [esi+0CE0h] +
push eax  +
call sub_1002515  +
push [ebp+var_10C]  +
lea eax [ebp+var_108] +
push eax  +
push ebx  +
push ebx  +
push dword ptr [esi+248h]  +
mov [ebp+var_108] ebx +
call dword ptr [esi+24h]  +
add esp 14h +
cmp eax 0FFFFFFFFh +
jz loc_1009CCD  +
mov edi [ebp+var_124] +
push [ebp+var_10C]  +
lea eax [ebp+var_108] +
push eax  +
push dword ptr [esi+0AD0h]  +
mov [ebp+var_108] ebx +
push edi  +
push dword ptr [esi+248h]  +
call dword ptr [esi+18h]  +
add esp 14h +
cmp eax [esi+0AD0h] +
jnz loc_1002FBC  +
mov eax [esi+13Ch] +
add eax [ebp+var_118] +
push [ebp+var_10C]  +
add eax [esi+244h] +
add [edi] eax +
lea eax [ebp+var_108] +
push eax  +
push dword ptr [esi+0AD0h]  +
mov [ebp+var_108] ebx +
push edi  +
push [ebp+var_110]  +
call dword ptr [esi+1Ch]  +
add esp 14h +
cmp [esi+0AD0h] eax +
jz loc_1002F47  +
jmp loc_1009B40  +
ja loc_1009CCD  +
push dword ptr [esi+2Ch]  +
push esi  +
push [ebp+var_10C]  +
push [ebp+arg_C]  +
push [ebp+var_120]  +
push [ebp+var_128]  +
push dword ptr [esi+140h]  +
push [ebp+var_110]  +
call sub_100318D  +
test eax eax +
jz loc_100317A  +
push dword ptr [esi+2Ch]  +
push esi  +
push [ebp+var_10C]  +
push [ebp+arg_C]  +
push [ebp+var_120]  +
push [ebp+var_128]  +
push dword ptr [esi+38h]  +
push [ebp+var_110]  +
call sub_100318D  +
test eax eax +
jz loc_100317A  +
mov edi [ebp+var_10C] +
push edi  +
lea eax [ebp+var_108] +
push eax  +
push 2  +
push ebx  +
push [ebp+var_110]  +
mov [ebp+var_108] ebx +
call dword ptr [esi+24h]  +
add esp 14h +
mov [ebp+var_120] eax +
cmp eax 0FFFFFFFFh +
jz loc_1003165  +
push edi  +
lea eax [ebp+var_108] +
push eax  +
push ebx  +
push ebx  +
push [ebp+var_110]  +
mov [ebp+var_108] ebx +
mov dword ptr [esi+994h] 4643534Dh +
call dword ptr [esi+24h]  +
add esp 14h +
cmp eax 0FFFFFFFFh +
jz loc_1003165  +
push edi  +
lea eax [ebp+var_108] +
push eax  +
push 4  +
lea eax [esi+994h] +
push eax  +
push [ebp+var_110]  +
call dword ptr [esi+1Ch]  +
add esp 14h +
cmp eax 4 +
jnz loc_1003165  +
push edi  +
lea eax [ebp+var_108] +
push eax  +
push [ebp+var_110]  +
mov [ebp+var_108] ebx +
call dword ptr [esi+20h]  +
or [ebp+var_110] 0FFFFFFFFh +
add esp 0Ch +
cmp eax 0FFFFFFFFh +
jz loc_1003165  +
push edi  +
push dword ptr [esi+2Ch]  +
lea edi [esi+34h] +
push dword ptr [esi+28h]  +
push dword ptr [esi+20h]  +
push 3  +
push edi  +
call sub_1003406  +
test eax eax +
jz loc_100317A  +
push [ebp+var_10C]  +
push dword ptr [esi+2Ch]  +
push dword ptr [esi+8]  +
push dword ptr [esi+28h]  +
push dword ptr [esi+20h]  +
push dword ptr [esi+14h]  +
push 3  +
push edi  +
call sub_100140F  +
test eax eax +
jz loc_100317A  +
push [ebp+var_10C]  +
push [ebp+var_120]  +
push dword ptr [esi+30h]  +
push 2  +
call [ebp+var_128]  +
add esp 10h +
cmp eax 0FFFFFFFFh +
jz loc_1009CDC  +
sub [esi+34Ch] eax +
lea eax [esi+994h] +
push eax  +
call sub_10015BB  +
push [ebp+var_124]  +
call dword ptr [esi+10h]  +
xor eax eax +
pop ecx  +
inc eax  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_10026CE  +
leave   +
retn 14h  +
push [ebp+var_108]  +
push 6  +
jmp loc_1009CD7  +
push ebx  +
push 9  +
jmp loc_1009CE1  +
push [ebp+var_124]  +
call dword ptr [esi+10h]  +
jmp loc_1009CEE  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
mov esi [ebp+arg_18] +
push edi  +
mov edi 8000h +
push edi  +
call dword ptr [esi+0Ch]  +
xor ebx ebx +
pop ecx  +
mov [ebp+var_4] eax +
cmp eax ebx +
jz sub_1009A34  +
push [ebp+arg_14]  +
lea eax [ebp+arg_18] +
push eax  +
push ebx  +
push ebx  +
push [ebp+arg_4]  +
mov [ebp+arg_18] ebx +
call dword ptr [esi+24h]  +
add esp 14h +
cmp eax 0FFFFFFFFh +
jz loc_1009A46  +
push [ebp+arg_14]  +
lea eax [ebp+arg_18] +
push eax  +
push edi  +
push [ebp+var_4]  +
mov [ebp+arg_18] ebx +
push [ebp+arg_4]  +
call dword ptr [esi+18h]  +
mov edi eax +
add esp 14h +
cmp edi ebx +
jz loc_1003250  +
mov ebx [ebp+arg_C] +
cmp edi 8000h +
ja loc_1003261  +
push [ebp+arg_14]  +
and [ebp+arg_18] 0 +
lea eax [ebp+arg_18] +
push eax  +
push edi  +
push [ebp+var_4]  +
push [ebp+arg_0]  +
call dword ptr [esi+1Ch]  +
add esp 14h +
cmp edi eax +
jnz loc_1003261  +
push [ebp+arg_14]  +
add [ebx] edi +
push [ebp+arg_10]  +
mov eax [ebx] +
and [ebp+arg_18] 0 +
push eax  +
push 1  +
call [ebp+arg_8]  +
add esp 10h +
cmp eax 0FFFFFFFFh +
jz loc_1009A5C  +
push [ebp+arg_14]  +
lea eax [ebp+arg_18] +
push eax  +
push 8000h  +
push [ebp+var_4]  +
push [ebp+arg_4]  +
call dword ptr [esi+18h]  +
mov edi eax +
add esp 14h +
test edi edi +
jnz loc_10031EE  +
push [ebp+var_4]  +
call dword ptr [esi+10h]  +
xor eax eax +
pop ecx  +
inc eax  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 20h  +
push [ebp+var_4]  +
call dword ptr [esi+10h]  +
jmp loc_1009A54  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
mov edi [ebp+arg_0] +
mov eax [edi] +
test eax eax +
jz loc_1003291  +
push esi  +
mov esi [eax+14h] +
push eax  +
call sub_10032A6  +
mov eax esi +
test esi esi +
jnz loc_1003281  +
pop esi  +
push edi  +
call ds:free  +
pop ecx  +
xor eax eax +
inc eax  +
pop edi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx ds:free +
push esi  +
mov esi [ebp+arg_0] +
mov eax [esi] +
push edi  +
mov edi [esi+1Ch] +
test eax eax +
jz loc_10032C4  +
push eax  +
call ebx  +
pop ecx  +
mov eax [esi+4] +
test eax eax +
jz loc_10032CF  +
push eax  +
call ebx  +
pop ecx  +
mov eax [esi+18h] +
test eax eax +
jnz loc_10032FB  +
mov eax [esi+14h] +
mov [edi] eax +
mov eax [esi+14h] +
test eax eax +
jz loc_10032F3  +
mov ecx [esi+18h] +
mov [eax+18h] ecx +
push esi  +
call ebx  +
pop ecx  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
mov eax [esi+18h] +
mov [edi+4] eax +
jmp loc_10032E8  +
mov ecx [esi+14h] +
mov [eax+14h] ecx +
jmp loc_10032DB  +
***
cmp eax 10h +
jnz loc_1009A82  +
push [ebp+arg_8]  +
push dword ptr [edi+2Ch]  +
push esi  +
push 100h  +
add esi 0ADEh +
push esi  +
push dword ptr [edi+13Ch]  +
call sub_10029DB  +
test eax eax +
jz loc_1003333  +
xor eax eax +
inc eax  +
jmp loc_100337A  +
mov dword ptr [ebx] 1 +
jmp loc_1003378  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_C] +
and dword ptr [ebx] 0 +
and [ebp+arg_C] 0 +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
push [ebp+arg_8]  +
mov edi [ebp+arg_4] +
lea eax [ebp+arg_C] +
push eax  +
push 10h  +
lea eax [esi+9B8h] +
push eax  +
push dword ptr [edi+13Ch]  +
call dword ptr [esi+18h]  +
add esp 14h +
test eax eax +
jnz loc_1003303  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
xor edi edi +
inc edi  +
test esi esi +
jz loc_100965B  +
mov eax [esi+4] +
test eax eax +
jz loc_10033B0  +
push dword ptr [esi+10h]  +
push eax  +
call sub_1002986  +
mov edi eax +
and edi 1 +
mov eax [esi] +
test eax eax +
jz loc_10033C1  +
push dword ptr [esi+10h]  +
push eax  +
call sub_10033D1  +
and edi eax +
push esi  +
call dword ptr [esi+0Ch]  +
pop ecx  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
push [ebp+arg_4]  +
lea eax [esi+34h] +
push dword ptr [esi+2Ch]  +
push dword ptr [esi+28h]  +
push dword ptr [esi+20h]  +
push 3  +
push eax  +
call sub_1003406  +
push esi  +
mov edi eax +
call dword ptr [esi+10h]  +
pop ecx  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_4] +
push edi  +
xor edi edi +
inc edi  +
test ebx ebx +
jle loc_100346A  +
push esi  +
mov esi [ebp+arg_0] +
add esi 4 +
mov eax [esi] +
cmp eax 0FFFFFFFFh +
jz loc_1003460  +
push [ebp+arg_14]  +
and [ebp+arg_4] 0 +
lea ecx [ebp+arg_4] +
push ecx  +
push eax  +
call [ebp+arg_8]  +
add esp 0Ch +
test eax eax +
jnz loc_10096E7  +
push [ebp+arg_14]  +
or dword ptr [esi] 0FFFFFFFFh +
and [ebp+arg_4] 0 +
lea eax [ebp+arg_4] +
push eax  +
lea eax [esi+4] +
push eax  +
call [ebp+arg_C]  +
add esp 0Ch +
cmp eax 0FFFFFFFFh +
jz loc_10096FB  +
add esi 108h +
dec ebx  +
jnz loc_100341E  +
pop esi  +
mov eax edi +
pop edi  +
pop ebx  +
pop ebp  +
retn 18h  +
***
push dword ptr [esi+4]  +
call sub_1003497  +
pop ecx  +
test eax eax +
jz loc_10014FB  +
jmp sub_1009739  +
push dword ptr [esi+4]  +
call sub_10129EF  +
jmp loc_100347A  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
cmp dword ptr [esi] 4349434Dh +
jnz loc_100A1B4  +
mov eax [esi+0Ch] +
and dword ptr [esi] 0 +
push edi  +
mov edi [esi+4] +
test eax eax +
jz loc_10034BE  +
push eax  +
call edi  +
pop ecx  +
mov eax [esi+10h] +
test eax eax +
jz loc_10034C9  +
push eax  +
call edi  +
pop ecx  +
mov eax [esi+14h] +
test eax eax +
jz loc_10034D4  +
push eax  +
call edi  +
pop ecx  +
mov eax [esi+18h] +
test eax eax +
jz loc_10034DF  +
push eax  +
call edi  +
pop ecx  +
mov eax [esi+1Ch] +
test eax eax +
jz loc_10034EA  +
push eax  +
call edi  +
pop ecx  +
push edi  +
push dword ptr [esi+24h]  +
call sub_1003502  +
push esi  +
call edi  +
pop ecx  +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_0]  +
call [ebp+arg_4]  +
pop ecx  +
pop ebp  +
retn 8  +
***
mov edx [eax+0AD0h] +
add edx [eax+0ACCh] +
add edx [ecx+240h] +
add edx [ecx+138h] +
add edx [ecx+30h] +
add edx [eax+244h] +
add edx [eax+13Ch] +
add edx [eax+34h] +
cmp [eax+34Ch] edx +
jb loc_1002774  +
xor eax eax +
inc eax  +
jmp loc_1002788  +
xor eax eax +
jmp loc_1002788  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_8]  +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
call sub_1002515  +
xor eax eax +
inc eax  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_8] +
cmp byte ptr [edi] 0 +
mov esi edi +
jz loc_1003A1A  +
movzx eax byte ptr [esi] +
push eax  +
call ds:isdigit  +
pop ecx  +
test eax eax +
jz loc_1003A1A  +
inc esi  +
cmp byte ptr [esi] 0 +
jnz loc_1003A05  +
cmp byte ptr [esi] 0 +
push edi  +
jnz loc_100825F  +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
call sub_1002515  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebp  +
retn 18h  +
***
push ebp  +
mov ebp esp +
push dword ptr [ebp+10h]  +
call sub_1006B30  +
cmp eax 0FFFFFFFFh +
jz loc_10082B2  +
shl eax 4 +
push off_1017744[eax]  +
push dword ptr [ebp+18h]  +
push dword ptr [ebp+14h]  +
call sub_1002515  +
xor eax eax +
inc eax  +
pop ebp  +
retn 18h  +
***
push ebp  +
mov ebp esp +
push dword ptr [ebp+10h]  +
call sub_1006B30  +
cmp eax 0FFFFFFFFh +
jz loc_100837F  +
shl eax 4 +
push off_1017740[eax]  +
push dword ptr [ebp+18h]  +
push dword ptr [ebp+14h]  +
call sub_1002515  +
xor eax eax +
inc eax  +
pop ebp  +
retn 18h  +
***
mov eax [ebp+arg_8] +
add [esi+60h] eax +
mov eax [ebp+arg_4] +
add [esi+64h] eax +
mov eax [esi+5Ch] +
mov ecx [esi+60h] +
mov edx [esi+64h] +
cmp eax ebx +
jbe loc_10028D4  +
mov edi ecx +
mov [ebp+arg_C] edi +
fild  [ebp+arg_C] +
test edi edi +
jl loc_1008444  +
mov [ebp+arg_C] eax +
fild  [ebp+arg_C] +
test eax eax +
jl loc_100844F  +
fdivp st(1) st +
fmul  ds:dbl_1001188 +
cmp dword ptr [esi+40h] 3 +
lea edi [esi+1B4h] +
jge loc_100845A  +
push dword ptr [esi+68h]  +
lea eax [esi+0B4h] +
push dword ptr [esi+6Ch]  +
push eax  +
push ecx  +
push ecx  +
fstp  [esp+20h+var_20] +
push offset a6_2fSLdLd  +
push offset a123Of4  +
push 800h  +
push edi  +
call sub_1001711  +
add esp 24h +
jmp loc_100217E  +
***
test al 1 +
jnz loc_10084B6  +
mov [ebp+dwDesiredAccess] 80000000h +
mov [ebp+dwShareMode] 5 +
jmp loc_10011EF  +
and esi 200h +
neg esi  +
sbb esi esi +
and esi 2 +
add esi 3 +
jmp loc_100121D  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
or dword ptr [eax+20h] 0FFFFFFFFh +
or dword ptr [eax+88h] 0FFFFFFFFh +
xor ecx ecx +
xor edx edx +
inc edx  +
or dword ptr [eax+8Ch] 0FFFFFFFFh +
mov [eax] ecx +
mov [eax+14h] ecx +
mov [eax+18h] ecx +
mov [eax+1Ch] ecx +
mov [eax+38h] ecx +
mov [eax+3Ch] ecx +
mov [eax+60h] ecx +
mov [eax+64h] ecx +
mov [eax+6Ch] ecx +
mov [eax+0B0h] ecx +
mov [eax+24h] ecx +
mov [eax+28h] ecx +
mov [eax+2Ch] ecx +
mov [eax+30h] ecx +
mov [eax+90h] edx +
mov [eax+94h] edx +
mov [eax+98h] ecx +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 8  +
call ds:malloc  +
pop ecx  +
test eax eax +
jz loc_1008F92  +
and dword ptr [eax] 0 +
and dword ptr [eax+4] 0 +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 24h +
lea eax [ebp+var_24] +
push eax  +
push [ebp+arg_0]  +
call ds:_stat  +
pop ecx  +
pop ecx  +
cmp eax 0FFFFFFFFh +
jz loc_1009014  +
test dword ptr [ebp+var_24.st_mode] 6000h +
jnz loc_1009034  +
mov eax [ebp+var_24.st_size] +
leave   +
retn 8  +
***
cmp [edi] cl +
jz loc_1009070  +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_8] +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov byte ptr [edi] 0 +
lea ecx [eax+1] +
mov dl [eax] +
inc eax  +
test dl dl +
jnz loc_1003C6D  +
sub eax ecx +
mov esi eax +
jnz loc_10090C5  +
mov esi [ebp+arg_C] +
cmp byte ptr [esi] 0 +
jz loc_1009105  +
push esi  +
push [ebp+arg_4]  +
push edi  +
call sub_10025A4  +
test eax eax +
jl loc_100912E  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebp  +
retn 18h  +
***
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov ecx [ebp+18h] +
push esi  +
push edi  +
push dword ptr [ebp+1Ch]  +
xor edi edi +
inc edi  +
mov [eax+0A8h] edi +
mov ecx [ecx+0Ch] +
mov esi [ecx+4] +
push offset aChecksumwidth  +
push dword ptr [eax+8]  +
call sub_1004F32  +
test eax eax +
jnz loc_1003CE8  +
push offset a8  +
call ds:atoi  +
pop ecx  +
jmp loc_1003CEE  +
push eax  +
call sub_100631F  +
mov esi [esi+2Ch] +
cmp eax 8 +
jz loc_1003D00  +
mov ecx eax +
shl ecx 2 +
shl edi cl +
dec edi  +
and esi edi +
push esi  +
push offset dword_1003D64  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
call sub_10107E6  +
add esp 10h +
test eax eax +
jge loc_1003D36  +
push esi  +
push dword ptr [ebp+14h]  +
push offset dword_1003D5C  +
push offset aBufferOverflow  +
push dword ptr [ebp+1Ch]  +
call sub_1006F95  +
add esp 14h +
or eax 0FFFFFFFFh +
jmp loc_1003D45  +
mov eax [ebp+0Ch] +
lea edx [eax+1] +
mov cl [eax] +
inc eax  +
test cl cl +
jnz loc_1003D3C  +
sub eax edx +
pop edi  +
pop esi  +
pop ebp  +
retn 18h  +
***
mov eax [ebp+var_23C] +
jmp loc_10017A3  +
mov ecx [ebp+var_22C] +
mov dl [ecx] +
add eax 0FFFFFFFEh +
push eax  +
add ecx 2 +
push ecx  +
lea eax [ebp-23h] +
push eax  +
mov [ebp+var_24] dl +
call memcpy  +
mov eax [ebp+var_230] +
mov [ebp+eax+var_25] 0 +
jmp loc_1001827  +
add [ebp+var_228] 4 +
add ebx 4 +
jmp loc_100188B  +
xor eax eax +
jmp loc_1001910  +
push offset aInterrFormatSp  +
jmp loc_100928B  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 8  +
call ds:malloc  +
pop ecx  +
test eax eax +
jz loc_10092F8  +
and dword ptr [eax] 0 +
and dword ptr [eax+4] 0 +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax+0Ch] +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax] +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
lea ecx [eax+1] +
mov dl [eax] +
inc eax  +
test dl dl +
jnz loc_1003E45  +
sub eax ecx +
cmp eax 20h +
jnb loc_1009341  +
xor eax eax +
inc eax  +
pop ebp  +
retn 8  +
***
mov eax esi +
jmp loc_1004F93  +
***
mov eax dword_10177C0 +
push offset dword_1017010  +
push dword_10177BC  +
mov dword_1017010 eax +
push offset dword_1017034  +
push offset dword_1017038  +
push offset dword_1017030  +
call ds:__getmainargs  +
add esp 14h +
mov dword_101700C eax +
retn   +
***
push offset loc_1012473  +
call ds:SetUnhandledExceptionFilter  +
xor eax eax +
retn   +
***
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
mov eax [ecx] +
mov edx [ebp+arg_4] +
push esi  +
mov esi [ecx+250h] +
imul esi esi +
add edx eax +
cmp esi edx +
pop esi  +
jb loc_1009686  +
cmp eax edx +
ja loc_1009686  +
xor eax eax +
pop ebp  +
retn 8  +
***
dec eax  +
dec eax  +
jz loc_1003F0D  +
sub eax 0Ch +
jz loc_100248D  +
jmp loc_100974C  +
push dword ptr [esi+4]  +
call sub_10129C9  +
jmp loc_1002484  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_4] +
push 268h  +
call edi  +
mov esi eax +
xor ebx ebx +
pop ecx  +
cmp esi ebx +
jz sub_10099E8  +
mov eax [ebp+arg_0] +
mov edx [ebp+arg_10] +
mov ecx [ebp+arg_8] +
push 0Fh  +
mov [esi+28h] ebx +
mov [esi+264h] ebx +
mov [esi+260h] ebx +
pop ebx  +
push [ebp+arg_2C]  +
mov [esi+8] edi +
mov edi [ebp+arg_1C] +
push eax  +
push [ebp+arg_24]  +
mov [esi+14h] edx +
mov edx [ebp+arg_14] +
mov [esi+20h] edi +
mov edi [ebp+arg_20] +
push edi  +
mov [esi+18h] edx +
mov edx [ebp+arg_18] +
push edx  +
mov [esi+0Ch] ecx +
mov ecx [ebp+arg_C] +
push ecx  +
mov [esi+2Ch] eax +
mov [esi+25Ch] bx +
mov ebx [ebp+arg_28] +
push 2  +
lea eax [esi+30h] +
push eax  +
mov [esi+10h] ecx +
mov [esi+1Ch] edx +
mov [esi+24h] edi +
mov [esi+248h] ebx +
call sub_100140F  +
test eax eax +
jz loc_10099FA  +
xor eax eax +
mov [esi] eax +
mov [esi+254h] eax +
mov [esi+240h] eax +
mov eax esi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 30h  +
***
mov edx [ebp+var_4] +
mov dl [edx+eax+1940h] +
cmp dl [esi+eax+1940h] +
ja loc_10046E8  +
jmp loc_10046FE  +
***
movzx edi word ptr [eax+0FDAh] +
movzx edx word ptr [eax+0FD8h] +
call sub_1004256  +
lea edx [ebx-0Bh] +
push 7  +
jmp loc_1004BD1  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
movzx ecx word ptr [eax+4Ch] +
mov dl [eax+4Eh] +
mov [ecx+eax+1F6Ch] dl +
inc word ptr [eax+4Ch]  +
mov byte ptr [eax+4Eh] 0 +
mov byte ptr [eax+4Fh] 1 +
jmp loc_1004530  +
xor eax eax +
inc eax  +
jmp loc_100455B  +
***
movzx ecx word ptr [ebp+var_C] +
mov cl [ecx+eax+1F6Ch] +
inc [ebp+var_C]  +
mov [ebp+var_1] cl +
jmp loc_10045AA  +
***
movzx eax word ptr [esi+3Eh] +
movzx ecx word ptr [esi+3Ch] +
sub ecx eax +
cmp ecx 1000h +
jle loc_10043AD  +
mov [ebp+var_4] 2 +
jmp loc_10043AD  +
movzx eax ax +
jmp loc_10043F6  +
xor ecx ecx +
jmp loc_1004407  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
movzx edx word ptr [esi+3Ch] +
mov eax [esi+14h] +
movzx ecx dx +
add ecx eax +
push ebx  +
mov ebx [ebp+arg_0] +
lea eax [ecx+102h] +
push edi  +
mov edi [esi+38h] +
mov [ebp+var_10] eax +
mov al [edi+ecx-1] +
mov [ebp+var_1] al +
mov al [edi+ecx] +
mov [ebp+var_2] al +
mov eax 7EFAh +
mov [ebp+var_8] 1000h +
cmp dx ax +
jbe loc_10041C9  +
add edx 0FFFF8106h +
movzx eax dx +
mov [ebp+var_C] eax +
cmp edi 102h +
jge loc_100A3C0  +
nop   +
nop   +
nop   +
nop   +
nop   +
mov eax [esi+14h] +
movzx edx bx +
mov [ebp+var_14] edx +
add edx eax +
mov al [ebp+var_2] +
cmp [edx+edi] al +
jz loc_1004121  +
mov eax [ebp+var_14] +
mov edx [esi+1Ch] +
and eax 7FFFh +
movzx ebx word ptr [edx+eax*2] +
mov [ebp+arg_0] ebx +
cmp bx word ptr [ebp+var_C] +
jbe loc_1004119  +
add [ebp+var_8] 0FFFFh +
cmp word ptr [ebp+var_8] 0 +
jnz loc_10040E0  +
mov eax edi +
pop edi  +
pop ebx  +
leave   +
retn 4  +
mov al [ebp+var_1] +
cmp [edx+edi-1] al +
jnz loc_10040F3  +
mov al [edx] +
cmp al [ecx] +
jnz loc_10040F3  +
inc edx  +
mov al [edx] +
cmp al [ecx+1] +
jnz loc_10040F3  +
inc edx  +
mov bl [edx] +
lea eax [ecx+2] +
cmp bl [eax] +
jnz loc_10040F3  +
mov ebx [ebp+var_10] +
mov ecx eax +
inc ecx  +
mov al [ecx] +
inc edx  +
cmp al [edx] +
jnz loc_100418B  +
inc ecx  +
mov al [ecx] +
inc edx  +
cmp al [edx] +
jnz loc_100418B  +
inc ecx  +
mov al [ecx] +
inc edx  +
cmp al [edx] +
jnz loc_100418B  +
inc ecx  +
mov al [ecx] +
inc edx  +
cmp al [edx] +
jnz loc_100418B  +
inc ecx  +
mov al [ecx] +
inc edx  +
cmp al [edx] +
jnz loc_100418B  +
inc ecx  +
mov al [ecx] +
inc edx  +
cmp al [edx] +
jnz loc_100418B  +
inc ecx  +
mov al [ecx] +
inc edx  +
cmp al [edx] +
jnz loc_100418B  +
inc ecx  +
mov al [ecx] +
inc edx  +
cmp al [edx] +
jnz loc_100418B  +
cmp ecx ebx +
jb loc_1004147  +
sub ecx ebx +
mov eax 102h +
add ecx eax +
mov edx ecx +
cmp edx edi +
lea ecx [ebx-102h] +
jle loc_10040F3  +
cmp edx eax +
mov di word ptr [ebp+arg_0] +
mov [esi+3Eh] di +
mov edi edx +
jge loc_1004119  +
lea eax [edx+ecx] +
mov dl [eax-1] +
mov al [eax] +
mov [ebp+var_1] dl +
mov [ebp+var_2] al +
jmp loc_10040F3  +
and [ebp+var_C] 0 +
jmp loc_10040CF  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
push ebx  +
push edi  +
push 5  +
add edx 0FFFFFEFFh +
pop edi  +
call sub_1004256  +
mov ebx [ebp+arg_4] +
dec ebx  +
mov edx ebx +
call sub_1004256  +
push 4  +
lea edx [esi-4] +
pop edi  +
call sub_1004256  +
and [ebp+arg_4] 0 +
test esi esi +
jle loc_100422F  +
mov ecx [ebp+arg_4] +
movzx ecx ds:byte_10039BC[ecx] +
movzx edx word ptr [eax+ecx*4+0F92h] +
push 3  +
pop edi  +
call sub_1004256  +
inc [ebp+arg_4]  +
cmp [ebp+arg_4] esi +
jl loc_100420D  +
mov ecx [ebp+arg_0] +
dec ecx  +
push ecx  +
lea ecx [eax+0B0h] +
call sub_1004B39  +
push ebx  +
lea ecx [eax+9A4h] +
call sub_1004B39  +
pop edi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov ecx [eax+30h] +
push esi  +
push 10h  +
pop esi  +
sub esi edi +
cmp ecx esi +
jg loc_1004270  +
shl edx cl +
or [eax+2Ch] dx +
add ecx edi +
mov [eax+30h] ecx +
pop esi  +
retn   +
mov esi edx +
shl esi cl +
mov ecx [eax+10h] +
push ebx  +
lea ebx [ecx-2] +
or [eax+2Ch] si +
movzx esi word ptr [eax+0Ch] +
cmp esi ebx +
jnb loc_100A1C6  +
mov ecx [eax+4] +
mov bl [eax+2Ch] +
mov [esi+ecx] bl +
inc word ptr [eax+0Ch]  +
movzx ecx word ptr [eax+0Ch] +
mov esi [eax+4] +
mov bl [eax+2Dh] +
mov [esi+ecx] bl +
inc word ptr [eax+0Ch]  +
mov esi [eax+30h] +
push 10h  +
pop ecx  +
sub ecx esi +
sar edx cl +
lea ecx [esi+edi-10h] +
pop ebx  +
mov [eax+2Ch] dx +
jmp loc_100426B  +
***
mov ax [esi+3Ch] +
mov ecx [esi+14h] +
dec ax  +
movzx eax ax +
movzx ecx byte ptr [eax+ecx] +
xor edx edx +
mov eax esi +
call sub_10044BF  +
test eax eax +
jz loc_10043C7  +
jmp loc_100A46C  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push ebx  +
push esi  +
xor ebx ebx +
mov esi eax +
mov [ebp+var_8] ebx +
mov [ebp+var_4] 2 +
cmp [esi+24h] ebx +
jz loc_10043E1  +
push edi  +
mov edi 7FFFh +
cmp dword ptr [esi+24h] 2 +
jle loc_1007D60  +
movzx ecx word ptr [esi+3Ch] +
mov eax [esi+14h] +
movzx eax byte ptr [eax+ecx+2] +
mov edx [esi+20h] +
shl edx 5 +
xor eax edx +
mov edx [esi+18h] +
and eax edi +
mov [esi+20h] eax +
movzx eax word ptr [edx+eax*2] +
mov edx [esi+1Ch] +
and ecx edi +
mov [edx+ecx*2] ax +
mov ecx [esi+20h] +
mov edx [esi+18h] +
mov bx [esi+3Ch] +
mov [edx+ecx*2] bx +
mov ecx [ebp+var_4] +
mov [esi+38h] ecx +
movzx ecx word ptr [esi+3Eh] +
mov [ebp+var_C] ecx +
mov [ebp+var_4] 2 +
test ax ax +
jz loc_10043AD  +
cmp dword ptr [esi+38h] 20h +
jge loc_10043AD  +
movzx ecx word ptr [esi+3Ch] +
movzx edx cx +
movzx ebx ax +
sub edx ebx +
cmp edx 7EFAh +
jg loc_10043AD  +
mov edx 0FFFDh +
cmp cx dx +
jnb loc_10043AD  +
push eax  +
call sub_100407C  +
mov [ebp+var_4] eax +
mov eax [esi+24h] +
cmp [ebp+var_4] eax +
jg loc_1007DCB  +
cmp [ebp+var_4] 3 +
jz loc_1004046  +
mov eax [esi+38h] +
cmp eax 3 +
jge loc_1004416  +
xor ebx ebx +
cmp [ebp+var_8] ebx +
jnz loc_10042BE  +
mov [ebp+var_8] 1 +
inc word ptr [esi+3Ch]  +
dec dword ptr [esi+24h]  +
cmp [esi+24h] ebx +
jnz loc_1004310  +
pop edi  +
cmp [ebp+var_8] ebx +
jnz loc_1007E49  +
movzx eax word ptr [esi+3Ch] +
mov ecx [esi+34h] +
cmp ax bx +
jnz loc_1004068  +
mov eax 10000h +
sub eax ecx +
cmp ecx ebx +
jl loc_1004070  +
movzx ecx word ptr [esi+34h] +
add ecx [esi+14h] +
push 1  +
push eax  +
push ecx  +
mov eax esi +
call sub_10048F5  +
pop esi  +
pop ebx  +
leave   +
retn   +
cmp [ebp+var_4] eax +
jg loc_10043B5  +
movzx edx word ptr [esi+3Ch] +
lea ecx [eax-3] +
movzx eax word ptr [ebp+var_C] +
sub edx eax +
dec edx  +
mov eax esi +
call sub_10044BF  +
mov ecx [esi+38h] +
xor edx edx +
inc edx  +
sub edx ecx +
add [esi+24h] edx +
add ecx 0FFFFFFFEh +
mov [esi+38h] ecx +
inc word ptr [esi+3Ch]  +
cmp dword ptr [esi+24h] 2 +
movzx ecx word ptr [esi+3Ch] +
jle loc_100448A  +
mov ebx [esi+20h] +
movzx edx cx +
mov ecx [esi+14h] +
movzx ecx byte ptr [ecx+edx+2] +
shl ebx 5 +
xor ecx ebx +
mov ebx [esi+18h] +
and ecx edi +
and edx edi +
mov edi [esi+1Ch] +
mov [esi+20h] ecx +
mov cx [ebx+ecx*2] +
mov [edi+edx*2] cx +
mov di [esi+3Ch] +
mov ecx [esi+20h] +
mov edx [esi+18h] +
mov [edx+ecx*2] di +
mov edi 7FFFh +
dec dword ptr [esi+38h]  +
jnz loc_1004441  +
xor ebx ebx +
inc word ptr [esi+3Ch]  +
movzx edx word ptr [esi+3Ch] +
mov [ebp+var_8] ebx +
mov [ebp+var_4] 2 +
cmp eax ebx +
jz loc_10043CE  +
jmp loc_100A435  +
***
movzx ecx byte ptr [eax+edx+1C7Dh] +
jmp loc_1004504  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
movzx esi word ptr [eax+48h] +
push edi  +
mov edi [eax] +
mov [esi+edi] cl +
inc word ptr [eax+48h]  +
test edx edx +
jz loc_100455F  +
movzx ecx byte ptr [eax+ecx+1B7Dh] +
dec edx  +
lea ecx [eax+ecx*4+4B4h] +
inc word ptr [ecx]  +
cmp edx 100h +
jl loc_10044B0  +
mov ecx edx +
sar ecx 7 +
movzx ecx byte ptr [ecx+eax+1D7Dh] +
lea ecx [eax+ecx*4+9A4h] +
inc word ptr [ecx]  +
movzx ecx word ptr [eax+4Ah] +
mov esi [eax+8] +
mov [esi+ecx*2] dx +
mov cl [eax+4Fh] +
inc word ptr [eax+4Ah]  +
or [eax+4Eh] cl +
shl byte ptr [eax+4Fh] 1 +
test byte ptr [eax+48h] 7 +
jz loc_1004009  +
movzx esi word ptr [eax+48h] +
test esi 0FFFh +
jz loc_100A357  +
mov ecx 7FFFh +
cmp si cx +
jz loc_1004028  +
inc ecx  +
cmp [eax+4Ah] cx +
jz loc_1004028  +
xor eax eax +
pop edi  +
pop esi  +
leave   +
retn   +
lea ecx [eax+ecx*4+0B0h] +
inc word ptr [ecx]  +
jmp loc_1004523  +
***
movzx esi byte ptr [ebx+eax+1C7Dh] +
jmp loc_1004621  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
xor ecx ecx +
push edi  +
mov [ebp+var_8] ecx +
mov [ebp+var_10] ecx +
mov [ebp+var_C] ecx +
mov [ebp+var_1] cl +
cmp [eax+48h] cx +
jz loc_100465F  +
push ebx  +
push esi  +
test byte ptr [ebp+var_8] 7 +
jz loc_1004030  +
movzx ecx word ptr [ebp+var_8] +
mov edx [eax] +
inc [ebp+var_8]  +
test [ebp+var_1] 1 +
movzx ebx byte ptr [ecx+edx] +
mov ecx [ebp+arg_0] +
jz loc_100467A  +
movzx esi byte ptr [ebx+eax+1B7Dh] +
movzx edi word ptr [ecx+esi*4+406h] +
movzx edx word ptr [ecx+esi*4+404h] +
call sub_1004256  +
mov edi ds:dword_1003948[esi*4] +
test edi edi +
jz loc_10045FA  +
mov edx ebx +
sub edx [eax+esi*4+1E80h] +
call sub_1004256  +
movzx ecx word ptr [ebp+var_10] +
mov edx [eax+8] +
movzx ebx word ptr [edx+ecx*2] +
inc [ebp+var_10]  +
cmp ebx 100h +
jl loc_100456B  +
mov ecx ebx +
sar ecx 7 +
movzx esi byte ptr [ecx+eax+1D7Dh] +
mov ecx [ebp+arg_4] +
lea ecx [ecx+esi*4] +
movzx edi word ptr [ecx+2] +
movzx edx word ptr [ecx] +
call sub_1004256  +
mov edi ds:dword_1007CE8[esi*4] +
test edi edi +
jz loc_100464C  +
mov edx ebx +
sub edx [eax+esi*4+1EF4h] +
call sub_1004256  +
mov cx word ptr [ebp+var_8] +
shr [ebp+var_1] 1 +
cmp cx [eax+48h] +
jb loc_10045A0  +
pop esi  +
pop ebx  +
mov ecx [ebp+arg_0] +
movzx edi word ptr [ecx+402h] +
movzx edx word ptr [ecx+400h] +
call sub_1004256  +
pop edi  +
leave   +
retn 8  +
lea ebx [ecx+ebx*4] +
movzx edi word ptr [ebx+2] +
movzx edx word ptr [ebx] +
jmp loc_1004647  +
***
inc ecx  +
jmp loc_10046CB  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov ecx [ebp+arg_0] +
mov edx [eax+ecx*4+104Ch] +
mov [ebp+var_4] edx +
mov edx [eax+40h] +
add ecx ecx +
cmp ecx edx +
jg loc_1004700  +
push ebx  +
push esi  +
jge loc_10046CB  +
mov esi [eax+ecx*4+1050h] +
mov edx [eax+ecx*4+104Ch] +
movzx ebx word ptr [edi+esi*4] +
movzx edx word ptr [edi+edx*4] +
cmp bx dx +
jb loc_1004686  +
jz loc_1004711  +
mov esi [eax+ecx*4+104Ch] +
mov edx [ebp+var_4] +
movzx edx word ptr [edi+edx*4] +
movzx ebx word ptr [edi+esi*4] +
cmp dx bx +
jb loc_10046FE  +
jz loc_1003FC9  +
mov edx [ebp+arg_0] +
mov [eax+edx*4+104Ch] esi +
mov edx [eax+40h] +
mov [ebp+arg_0] ecx +
add ecx ecx +
cmp ecx edx +
jle loc_10046AC  +
pop esi  +
pop ebx  +
mov ecx [ebp+var_4] +
mov edx [ebp+arg_0] +
mov [eax+edx*4+104Ch] ecx +
leave   +
retn 4  +
mov dl [esi+eax+1940h] +
mov esi [eax+ecx*4+104Ch] +
cmp dl [esi+eax+1940h] +
ja loc_10046CB  +
jmp loc_1004686  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 24h +
mov eax dword_1017000 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
xor edx edx +
push ebx  +
xor ebx ebx +
xor ecx ecx +
inc edx  +
push edi  +
add eax 102Ch +
mov di [eax] +
add di cx +
add di di +
movzx ecx di +
mov word ptr [ebp+edx*2+var_24] cx +
inc edx  +
inc eax  +
inc eax  +
cmp edx 0Fh +
jle loc_1004755  +
cmp [ebp+arg_4] ebx +
jl loc_1004786  +
movzx ecx word ptr [esi+ebx*4+2] +
lea eax [ecx-1] +
cmp eax 0Eh +
jbe loc_1004796  +
inc ebx  +
cmp ebx [ebp+arg_4] +
jle loc_1004773  +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop ebx  +
call sub_10026CE  +
leave   +
retn 8  +
lea eax [ebp+ecx*2+var_24] +
movzx edx word ptr [eax] +
movzx edi dx +
push ecx  +
inc edx  +
push edi  +
mov [eax] dx +
call sub_10047B6  +
mov [esi+ebx*4] ax +
jmp loc_1004780  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
mov ecx [ebp+arg_0] +
sar [ebp+arg_0] 1 +
and ecx 1 +
or eax ecx +
add eax eax +
dec [ebp+arg_4]  +
cmp [ebp+arg_4] 0 +
jg loc_10047BD  +
movzx eax ax +
shr eax 1 +
pop ebp  +
retn 8  +
***
sub ecx [ebp+var_14] +
mov edi [ebp+var_20] +
mov edi [edi+ecx*4] +
jmp loc_10047F6  +
inc word ptr [edx+eax*2+102Ch]  +
xor edi edi +
cmp ecx [ebp+var_14] +
jge loc_10047DC  +
mov ecx [ebp+var_C] +
movzx ecx word ptr [ecx+ebx] +
add eax edi +
imul eax ecx +
add [edx+50h] eax +
mov eax [ebp+var_24] +
mov [ebp+var_28] ecx +
test eax eax +
jz loc_10048D8  +
mov ecx [ebp+var_C] +
movzx eax word ptr [ecx+eax+2] +
add eax edi +
imul eax [ebp+var_28] +
add [edx+54h] eax +
jmp loc_10048D8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
mov ecx [eax+8] +
mov [ebp+var_20] ecx +
mov ecx [eax+0Ch] +
and [ebp+var_4] 0 +
mov [ebp+var_14] ecx +
mov ecx [eax+18h] +
push ebx  +
mov ebx [eax] +
mov [ebp+var_1C] ecx +
mov ecx [eax+14h] +
mov eax [eax+4] +
mov [ebp+var_24] eax +
xor eax eax +
push esi  +
movzx esi ax +
push edi  +
mov eax esi +
shl esi 10h +
or eax esi +
mov [ebp+var_8] ecx +
push 8  +
lea edi [edx+102Ch] +
pop ecx  +
stos   +
mov eax [edx+44h] +
mov eax [edx+eax*4+104Ch] +
xor ecx ecx +
mov [ebx+eax*4+2] cx +
mov esi [edx+44h] +
inc esi  +
mov eax 23Dh +
cmp esi eax +
mov [ebp+var_2C] ebx +
jge loc_10048EB  +
lea ecx [edx+esi*4+104Ch] +
sub eax esi +
mov [ebp+var_10] ecx +
mov [ebp+var_18] eax +
add esi eax +
mov eax [ebp+var_10] +
mov ecx [eax] +
mov eax ecx +
shl eax 2 +
mov [ebp+var_C] eax +
movzx eax word ptr [eax+ebx+2] +
movzx eax word ptr [ebx+eax*4+2] +
inc eax  +
cmp eax [ebp+var_8] +
jg loc_100A23D  +
cmp ecx [ebp+var_1C] +
mov edi [ebp+var_C] +
mov [edi+ebx+2] ax +
jle loc_10047E7  +
add [ebp+var_10] 4 +
dec [ebp+var_18]  +
jnz loc_10048A6  +
cmp [ebp+var_4] 0 +
jnz loc_100A248  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
mov ebx eax +
movzx eax word ptr [ebx+4Ch] +
mov cl [ebx+4Eh] +
push esi  +
mov [eax+ebx+1F6Ch] cl +
push edi  +
lea eax [ebx+5Ch] +
push eax  +
call sub_1004A09  +
lea eax [ebx+78h] +
push eax  +
call sub_1004A09  +
mov ecx [ebx+74h] +
lea eax [ebx+0B0h] +
push ebx  +
mov [ebp+var_8] eax +
call sub_1004A98  +
mov ecx [ebx+90h] +
lea eax [ebx+9A4h] +
push ebx  +
mov [ebp+var_4] eax +
call sub_1004A98  +
lea eax [ebx+94h] +
push eax  +
call sub_1004A09  +
push 12h  +
pop esi  +
push 3  +
pop edi  +
movzx eax ds:byte_10039BC[esi] +
cmp word ptr [ebx+eax*4+0F92h] 0 +
jnz loc_1004971  +
dec esi  +
cmp esi edi +
jge loc_100495A  +
mov ecx [ebx+54h] +
mov eax esi +
imul eax eax +
add eax 11h +
add [ebx+50h] eax +
mov eax [ebx+50h] +
add eax 0Ah +
add ecx 0Ah +
shr eax 3 +
shr ecx 3 +
cmp ecx eax +
jbe loc_100A3CC  +
mov edx [ebp+arg_4] +
add edx 4 +
cmp edx eax +
jbe loc_100A3D3  +
mov edx [ebp+arg_8] +
cmp ecx eax +
mov eax ebx +
jz loc_100A410  +
add edx 4 +
call sub_1004256  +
mov eax [ebx+90h] +
inc esi  +
inc eax  +
push eax  +
mov eax [ebx+74h] +
inc eax  +
push eax  +
mov eax ebx +
call sub_10041D7  +
push [ebp+var_4]  +
push [ebp+var_8]  +
call sub_100457D  +
mov eax [ebx+50h] +
add eax edi +
add [ebx+58h] eax +
mov eax ebx +
call sub_1005AD3  +
cmp [ebp+arg_8] 0 +
jz loc_10049F7  +
call sub_10050B9  +
add dword ptr [ebx+58h] 7 +
mov eax [ebx+58h] +
pop edi  +
pop esi  +
shr eax 3 +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
or [ebp+var_8] 0FFFFFFFFh +
push esi  +
mov esi [ebp+arg_0] +
mov eax [esi+4] +
mov ecx [esi+10h] +
mov [ebp+var_4] eax +
xor eax eax +
cmp ecx eax +
push edi  +
mov edi [esi] +
mov [ebp+var_C] ecx +
mov [ebx+40h] eax +
mov dword ptr [ebx+44h] 23Dh +
jle loc_1004A4B  +
cmp word ptr [edi+eax*4] 0 +
jnz loc_1004A79  +
xor edx edx +
mov [edi+eax*4+2] dx +
inc eax  +
cmp eax ecx +
jl loc_1004A38  +
cmp dword ptr [ebx+40h] 2 +
jl loc_100A30B  +
mov eax [ebp+var_8] +
mov [esi+18h] eax +
mov eax [ebx+40h] +
cdq   +
sub eax edx +
mov esi eax +
sar esi 1 +
cmp esi 1 +
jl loc_1004C15  +
push esi  +
mov eax ebx +
call sub_100468E  +
dec esi  +
jmp loc_1004A65  +
inc dword ptr [ebx+40h]  +
mov edx [ebx+40h] +
mov [ebx+edx*4+104Ch] eax +
mov [ebp+var_8] eax +
mov byte ptr [eax+ebx+1940h] 0 +
jmp loc_1004A46  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
or [ebp+var_8] 0FFFFFFFFh +
and [ebp+var_10] 0 +
push ebx  +
push esi  +
push edi  +
push 7  +
mov esi ecx +
movzx ecx word ptr [eax+2] +
pop edx  +
push 4  +
pop edi  +
test ecx ecx +
jnz loc_1004AC3  +
push 3  +
mov edx 8Ah +
pop edi  +
mov ebx 0FFFFh +
mov [eax+esi*4+6] bx +
test esi esi +
jl loc_1004AFB  +
mov ebx [ebp+arg_0] +
add eax 6 +
inc esi  +
mov [ebp+var_C] esi +
mov esi [ebp+var_10] +
mov [ebp+var_4] eax +
mov eax ecx +
mov ecx [ebp+var_4] +
movzx ecx word ptr [ecx] +
inc esi  +
cmp esi edx +
jge loc_1004B02  +
cmp eax ecx +
jnz loc_1004B02  +
add [ebp+var_4] 4 +
dec [ebp+var_C]  +
jnz loc_1004AE1  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
cmp esi edi +
jge loc_1004FB3  +
add [ebx+eax*4+0F90h] si +
xor esi esi +
mov [ebp+var_8] eax +
test ecx ecx +
jz loc_1004B2B  +
cmp eax ecx +
jz loc_1007E39  +
push 7  +
pop edx  +
push 4  +
pop edi  +
jmp loc_1004AF2  +
mov edx 8Ah +
push 3  +
jmp loc_1004B28  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
or [ebp+var_C] 0FFFFFFFFh +
push ebx  +
push esi  +
movzx esi word ptr [ecx+2] +
push edi  +
xor ebx ebx +
push 7  +
pop edx  +
mov [ebp+var_8] 4 +
test esi esi +
jnz loc_1004B68  +
mov edx 8Ah +
mov [ebp+var_8] 3 +
mov edi [ebp+arg_0] +
test edi edi +
jl loc_1004002  +
add ecx 6 +
inc edi  +
mov [ebp+var_4] ecx +
mov ecx [ebp+var_8] +
mov [ebp+var_10] edi +
mov edi [ebp+var_4] +
movzx edi word ptr [edi] +
inc ebx  +
cmp ebx edx +
mov [ebp+arg_0] edi +
jge loc_1004BA4  +
cmp esi edi +
jnz loc_1004BA4  +
add [ebp+var_4] 4 +
dec [ebp+var_10]  +
jz loc_1004002  +
mov esi [ebp+arg_0] +
jmp loc_1004B80  +
cmp ebx ecx +
jl loc_1004BD9  +
test esi esi +
jnz loc_1007D83  +
cmp ebx 0Ah +
jg loc_1003FE5  +
movzx edi word ptr [eax+0FD6h] +
movzx edx word ptr [eax+0FD4h] +
call sub_1004256  +
lea edx [ebx-3] +
push 3  +
pop edi  +
call sub_1004256  +
jmp loc_1004BF1  +
movzx edi word ptr [eax+esi*4+0F92h] +
movzx edx word ptr [eax+esi*4+0F90h] +
call sub_1004256  +
dec ebx  +
jnz loc_1004BD9  +
xor ebx ebx +
mov [ebp+var_C] esi +
cmp [ebp+arg_0] ebx +
jz loc_1004C0C  +
cmp esi [ebp+arg_0] +
jz loc_1007E41  +
push 7  +
pop edx  +
push 4  +
pop ecx  +
jmp loc_1004B92  +
mov edx 8Ah +
push 3  +
jmp loc_1004C09  +
***
mov eax [ebx+40h] +
mov ecx [ebx+eax*4+104Ch] +
mov esi [ebx+1050h] +
dec eax  +
mov [ebx+40h] eax +
push 1  +
mov eax ebx +
mov [ebx+1050h] ecx +
call sub_100468E  +
dec dword ptr [ebx+44h]  +
mov ecx [ebx+44h] +
mov eax [ebx+1050h] +
mov [ebx+ecx*4+104Ch] esi +
dec dword ptr [ebx+44h]  +
mov ecx [ebx+44h] +
mov [ebx+ecx*4+104Ch] eax +
lea ecx [edi+eax*4] +
mov [ebp+var_10] ecx +
mov cx [ecx] +
lea edx [edi+esi*4] +
add cx [edx] +
mov [ebp+var_14] edx +
mov dx cx +
mov ecx [ebp+var_C] +
mov [edi+ecx*4] dx +
mov dl [ebx+esi+1940h] +
mov al [ebx+eax+1940h] +
cmp dl al +
jb loc_1004CEE  +
movzx eax dl +
mov edx [ebp+var_10] +
inc al  +
mov [ebx+ecx+1940h] al +
movzx eax cx +
mov [edx+2] ax +
mov edx [ebp+var_14] +
mov [edx+2] ax +
mov [ebx+1050h] ecx +
inc ecx  +
push 1  +
mov eax ebx +
mov [ebp+var_C] ecx +
call sub_100468E  +
cmp dword ptr [ebx+40h] 2 +
jge loc_1004C15  +
dec dword ptr [ebx+44h]  +
mov eax [ebx+44h] +
mov ecx [ebx+1050h] +
mov [ebx+eax*4+104Ch] ecx +
mov eax [ebp+arg_0] +
mov edx ebx +
call sub_100482E  +
push [ebp+var_8]  +
mov esi edi +
push ebx  +
call sub_1004732  +
pop edi  +
pop esi  +
leave   +
retn 4  +
movzx eax al +
jmp loc_1004C89  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 70h +
mov eax [ebp+arg_0] +
and [ebp+var_2C] 0 +
push ebx  +
push esi  +
push edi  +
push [ebp+arg_4]  +
mov edi [eax+70h] +
push offset aInfdisklinefor  +
push dword ptr [eax+8]  +
mov [ebp+var_30] eax +
call sub_1004F32  +
test eax eax +
jnz loc_1004D2B  +
mov eax offset aDiskLabel +
jmp loc_1004D31  +
push eax  +
call sub_10060B6  +
push [ebp+arg_4]  +
lea edx [ebp+var_30] +
push edx  +
lea ecx [ebp+var_C] +
push offset loc_1011063  +
mov [ebp+var_24] ecx +
lea ecx [edi+0Ch] +
push eax  +
mov edi 200h +
xor esi esi +
push edi  +
inc esi  +
mov ebx offset aTest +
push ecx  +
mov [ebp+var_C] esi +
mov [ebp+var_8] ebx +
mov [ebp+var_28] offset off_1017DD0 +
mov [ebp+var_4] ecx +
call sub_100F2E1  +
push [ebp+arg_4]  +
test eax eax +
jnz loc_1004D9F  +
push edi  +
push [ebp+var_4]  +
call sub_1002515  +
push [ebp+var_4]  +
push offset aInfdisklinefor  +
push offset dword_100A5F8  +
push offset aBadFormatIn12  +
push [ebp+arg_4]  +
call sub_1006F95  +
add esp 14h +
xor eax eax +
jmp loc_1004EB3  +
mov eax [ebp+arg_0] +
push offset aInfcabinetline  +
push dword ptr [eax+8]  +
call sub_1004F32  +
test eax eax +
jnz loc_1004DBA  +
mov eax offset aCabDiskCabfile +
jmp loc_1004DC0  +
push eax  +
call sub_10060B6  +
push [ebp+arg_4]  +
lea ecx [ebp+var_20] +
mov [ebp+var_24] ecx +
lea ecx [ebp+var_30] +
push ecx  +
push offset loc_1011063  +
push eax  +
push edi  +
push [ebp+var_4]  +
mov [ebp+var_1C] esi +
mov [ebp+var_20] esi +
mov [ebp+var_18] ebx +
mov [ebp+var_28] offset off_1017DE8 +
call sub_100F2E1  +
push [ebp+arg_4]  +
test eax eax +
jnz loc_1004E09  +
push edi  +
push [ebp+var_4]  +
call sub_1002515  +
push [ebp+var_4]  +
push offset aInfcabinetline  +
jmp loc_1004D83  +
xor eax eax +
mov [ebp+var_54] ax +
mov [ebp+var_52] ax +
mov [ebp+var_50] ax +
mov eax [ebp+arg_0] +
push offset aInffilelinefor  +
push dword ptr [eax+8]  +
mov [ebp+var_6C] ebx +
xor ebx ebx +
mov [ebp+var_68] esi +
mov [ebp+var_70] esi +
mov [ebp+var_64] esi +
mov [ebp+var_60] esi +
mov [ebp+var_5C] esi +
mov [ebp+var_48] ebx +
mov [ebp+var_58] ebx +
mov [ebp+var_4C] ebx +
mov [ebp+var_44] ebx +
mov [ebp+var_40] ebx +
mov [ebp+var_3C] ebx +
mov [ebp+var_38] ebx +
mov [ebp+var_34] ebx +
call sub_1004F32  +
cmp eax ebx +
jnz loc_1004E5E  +
mov eax offset aDiskCabFileSiz +
jmp loc_1004E64  +
push eax  +
call sub_10060B6  +
push [ebp+arg_4]  +
lea ecx [ebp+var_70] +
mov [ebp+var_10] ecx +
lea ecx [ebp+var_14] +
mov [ebp+var_24] ecx +
lea ecx [ebp+var_30] +
push ecx  +
push offset loc_1011063  +
push eax  +
push edi  +
push [ebp+var_4]  +
mov [ebp+var_14] offset dword_1004F08 +
mov [ebp+var_28] offset off_1017D68 +
call sub_100F2E1  +
test eax eax +
jnz loc_1004EB1  +
push [ebp+arg_4]  +
push edi  +
push [ebp+var_4]  +
call sub_1002515  +
push [ebp+var_4]  +
push offset aInffilelinefor  +
jmp loc_1004D83  +
mov eax esi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
mov esi [eax] +
test esi esi +
jz loc_1004F79  +
push [ebp+arg_4]  +
push dword ptr [esi]  +
call ds:_stricmp  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1003E5E  +
mov esi [esi+14h] +
jmp loc_1004F5B  +
push [ebp+arg_4]  +
push offset aS_2  +
push offset aUndefinedVaria  +
push [ebp+arg_8]  +
call sub_1006F95  +
add esp 10h +
xor eax eax +
pop esi  +
pop ebp  +
retn 0Ch  +
***
test eax eax +
jnz loc_1007D6A  +
cmp esi 0Ah +
jg loc_1004FCC  +
inc word ptr [ebx+0FD4h]  +
jmp loc_1004B12  +
inc word ptr [ebx+0FD8h]  +
jmp loc_1004B12  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 304h +
mov eax dword_1017000 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
mov ebx [ebp+arg_8] +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov edi [ebp+arg_4] +
push 0FFh  +
lea eax [ebp-103h] +
push 0  +
push eax  +
mov [ebp+var_104] 0 +
call memset  +
mov eax edi +
add esp 0Ch +
lea ecx [eax+1] +
mov dl [eax] +
inc eax  +
test dl dl +
jnz loc_1005020  +
sub eax ecx +
mov ecx 100h +
cmp eax ecx +
jnb loc_100939C  +
mov eax [esi+10h] +
test eax eax +
jz loc_100508A  +
push ebx  +
push ecx  +
lea ecx [ebp+var_104] +
push ecx  +
push edi  +
push dword ptr [esi]  +
push dword ptr [esi+1Ch]  +
call eax  +
test eax eax +
jz loc_100509A  +
mov edi [esi+4] +
lea eax [ebp+var_104] +
push eax  +
call ds:_strdup  +
pop ecx  +
mov [esi+4] eax +
test eax eax +
jz loc_10093B7  +
test edi edi +
jnz loc_10093F3  +
xor eax eax +
inc eax  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_10026CE  +
leave   +
retn 0Ch  +
push edi  +
push ecx  +
lea eax [ebp+var_104] +
push eax  +
call sub_1002515  +
jmp loc_1005052  +
xor eax eax +
jmp loc_1005079  +
***
test ecx ecx +
jle loc_10050F3  +
movzx ecx word ptr [eax+0Ch] +
cmp ecx [eax+10h] +
jnb loc_100A231  +
mov bl [eax+2Ch] +
jmp loc_10050E9  +
***
mov ecx [eax+30h] +
cmp ecx 8 +
push ebx  +
push esi  +
jle loc_100509E  +
mov edx [eax+10h] +
movzx ecx word ptr [eax+0Ch] +
lea esi [edx-2] +
cmp ecx esi +
jnb loc_100A203  +
mov edx [eax+4] +
mov bl [eax+2Ch] +
mov [ecx+edx] bl +
inc word ptr [eax+0Ch]  +
movzx ecx word ptr [eax+0Ch] +
mov bl [eax+2Dh] +
mov edx [eax+4] +
mov [ecx+edx] bl +
inc word ptr [eax+0Ch]  +
xor ecx ecx +
and [eax+30h] ecx +
pop esi  +
mov [eax+2Ch] cx +
pop ebx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+lpCurrentChar] +
mov cl [esi] +
push edi  +
mov eax esi +
mov edi esi +
test cl cl +
jz loc_1003C45  +
cmp cl 2Fh +
jz loc_100513A  +
cmp cl 3Ah +
jz loc_100513A  +
cmp cl 5Ch +
jz loc_100513A  +
push 0  +
push eax  +
push 0  +
call ds:CharNextExA  +
mov cl [eax] +
jmp loc_1005114  +
lea edi [eax+1] +
jmp loc_100512B  +
***
push 2  +
pop eax  +
jmp loc_100518C  +
push ebp  +
mov ebp esp +
push edi  +
mov edi [ebp+10h] +
mov eax edi +
lea edx [eax+1] +
mov cl [eax] +
inc eax  +
test cl cl +
jnz loc_1005157  +
sub eax edx +
cmp eax 3 +
ja loc_10082B8  +
push ebx  +
xor ebx ebx +
push esi  +
mov esi edi +
cmp [edi] bl +
jz loc_100519C  +
movsx eax byte ptr [esi] +
push eax  +
call ds:toupper  +
movsx eax al +
sub eax 43h +
pop ecx  +
jz loc_100513F  +
dec eax  +
jnz loc_10051B2  +
xor eax eax +
inc eax  +
test eax ebx +
jnz loc_10082E6  +
or ebx eax +
inc esi  +
cmp byte ptr [esi] 0 +
jnz loc_1005173  +
push edi  +
push dword ptr [ebp+18h]  +
push dword ptr [ebp+14h]  +
call sub_1002515  +
xor eax eax +
inc eax  +
pop esi  +
pop ebx  +
pop edi  +
pop ebp  +
retn 18h  +
***
dec eax  +
dec eax  +
jnz loc_10082D5  +
push 4  +
jmp loc_1005141  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
push 2  +
mov edi offset a0 +
pop ecx  +
xor eax eax +
cmps   +
jz loc_1005256  +
mov ebx ds:_stricmp +
push offset aNo  +
push [ebp+arg_0]  +
call ebx  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1005256  +
mov esi [ebp+arg_0] +
push offset aOff  +
push esi  +
call ebx  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1005256  +
push offset aFalse  +
push esi  +
call ebx  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1005256  +
push 2  +
mov edi offset a1 +
pop ecx  +
xor eax eax +
cmps   +
jz loc_1005242  +
mov esi [ebp+arg_0] +
push offset aYes  +
push esi  +
call ebx  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1005242  +
push offset aOn  +
push esi  +
call ebx  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_1007FDE  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
xor eax eax +
jmp loc_1005245  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
movzx eax word ptr [esi+25Ch] +
push edi  +
and eax 0Fh +
xor edi edi +
sub eax edi +
jz loc_10097A6  +
dec eax  +
jnz loc_1009765  +
lea eax [ebp+arg_0] +
push eax  +
push dword ptr [esi+24Ch]  +
push dword ptr [esi+264h]  +
push dword ptr [esi+254h]  +
push dword ptr [esi+260h]  +
push dword ptr [esi+4]  +
call sub_10052CB  +
add esp 18h +
test eax eax +
jnz loc_10097DC  +
mov eax [ebp+arg_4] +
mov cx word ptr [ebp+arg_0] +
mov [eax] cx +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
cmp dword ptr [esi] 4349434Dh +
jnz loc_1005378  +
mov eax [esi+8] +
cmp [ebp+arg_8] eax +
ja loc_1005378  +
add eax 0Ch +
cmp [ebp+arg_10] eax +
jb loc_1005378  +
cmp byte ptr [esi+20h] 0 +
push ebx  +
mov ebx [esi+1Ch] +
push edi  +
mov edi 8000h +
jz loc_100530A  +
add ebx edi +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push ebx  +
call memcpy  +
mov edx [ebp+arg_8] +
add esp 0Ch +
cmp edx edi +
jb loc_1005357  +
push [ebp+arg_14]  +
movzx eax byte ptr [esi+20h] +
push eax  +
push dword ptr [esi+18h]  +
push dword ptr [esi+14h]  +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push dword ptr [esi+1Ch]  +
push dword ptr [esi+24h]  +
call sub_10057EF  +
cmp [ebp+arg_8] edi +
pop edi  +
setz cl  +
neg eax  +
sbb eax eax +
mov [esi+20h] cl +
and eax 4 +
pop ebx  +
pop esi  +
pop ebp  +
retn   +
mov ecx edi +
sub ecx edx +
mov eax 109h +
cmp ecx eax +
jb loc_100A1A8  +
push eax  +
add ebx edx +
push 0  +
push ebx  +
call memset  +
add esp 0Ch +
jmp loc_1005320  +
push 2  +
pop eax  +
jmp loc_1005354  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push ebx  +
push esi  +
push edi  +
xor eax eax +
xor edi edi +
inc edi  +
cmp [ebp+arg_4] edi +
mov [ebp+var_4] eax +
mov [ebp+var_14] eax +
mov [ebp+var_8] eax +
mov [ebp+var_C] eax +
mov [ebp+var_10] eax +
jle loc_100548C  +
mov ebx [ebp+arg_8] +
lea edx [ebp+var_20] +
sub edx 4 +
mov [ebp+var_18] edx +
lea esi [ebx+edi*4] +
mov eax [esi] +
mov cl [eax] +
cmp cl 2Fh +
jz loc_10089A4  +
cmp cl 2Dh +
jz loc_10089A4  +
xor ecx ecx +
cmp [ebp+var_C] ecx +
jnz loc_1008931  +
cmp [ebp+var_8] ecx +
jnz loc_100894E  +
cmp [ebp+var_10] ecx +
jnz loc_100896B  +
cmp [ebp+var_4] ecx +
jz loc_10053FB  +
cmp [ebp+var_4] 2 +
jnz loc_1008A93  +
inc [ebp+var_14]  +
push 2  +
pop ecx  +
add edx 4 +
cmp [ebp+var_14] ecx +
mov [ebp+var_4] ecx +
mov [ebp+var_18] edx +
jg loc_1008AA2  +
mov [edx] eax +
inc edi  +
cmp edi [ebp+arg_4] +
jge loc_1005420  +
mov edx [ebp+var_18] +
jmp loc_10053B6  +
xor ecx ecx +
cmp [ebp+var_8] ecx +
jnz loc_1008AB1  +
cmp [ebp+var_C] ecx +
jnz loc_1008AC5  +
cmp [ebp+var_10] ecx +
jnz loc_1008ACC  +
mov eax [ebp+var_4] +
cmp eax ecx +
jl loc_100547E  +
cmp eax 1 +
jle loc_100548C  +
push 2  +
pop esi  +
cmp eax esi +
jnz loc_1008B18  +
push [ebp+arg_C]  +
mov eax [ebp+arg_0] +
push [ebp+var_20]  +
mov [eax] esi +
push eax  +
call sub_1006C0E  +
test eax eax +
jz loc_1005488  +
cmp [ebp+var_14] esi +
jnz loc_100547E  +
push [ebp+arg_C]  +
push [ebp+var_1C]  +
push eax  +
call sub_100549C  +
test eax eax +
jz loc_1005488  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
xor eax eax +
jmp loc_1005481  +
mov eax [ebp+arg_0] +
mov dword ptr [eax] 1 +
jmp loc_100547E  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
push [ebp+arg_4]  +
mov edi [esi+4] +
call ds:_strdup  +
pop ecx  +
mov [esi+4] eax +
test eax eax +
jz loc_1008FC7  +
test edi edi +
jnz loc_1008FE8  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
xor eax eax +
cmp esi [ebp+arg_4] +
jnb loc_10054F5  +
test eax eax +
jnz loc_10054F5  +
mov ecx [esi] +
test ecx ecx +
jz loc_10054F0  +
call ecx  +
add esi 4 +
jmp loc_10054DF  +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_4] +
push ebx  +
call sub_1003DED  +
mov [ebp+arg_4] eax +
test eax eax +
jz loc_1005559  +
push esi  +
push edi  +
xor edi edi +
xor esi esi +
push ebx  +
push off_1017370[esi]  +
push dword_101736C[esi]  +
push dword_1017368[esi]  +
push off_1017364[esi]  +
push off_1017360[esi]  +
push [ebp+arg_4]  +
call sub_1005563  +
test eax eax +
jz loc_10081B1  +
add esi 14h +
inc edi  +
cmp esi 3D4h +
jb loc_1005519  +
mov eax [ebp+arg_4] +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20Ch +
mov eax dword_1017000 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_8] +
push ebx  +
mov ebx [ebp+arg_18] +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
mov edi [ebp+arg_0] +
push ebx  +
push esi  +
mov [ebp+var_208] esi +
mov [ebp+var_20C] eax +
call sub_1003E3A  +
test eax eax +
jz loc_1009455  +
push ebx  +
push esi  +
push edi  +
call sub_1004F50  +
test eax eax +
jnz loc_100945C  +
push ebx  +
call sub_100683B  +
push 20h  +
call ds:malloc  +
mov esi eax +
xor eax eax +
pop ecx  +
cmp esi eax +
jz loc_1009491  +
mov ecx [ebp+arg_C] +
push [ebp+var_208]  +
mov [esi+8] ecx +
mov ecx [ebp+arg_10] +
mov [esi+0Ch] ecx +
mov ecx [ebp+arg_14] +
mov [esi] eax +
mov [esi+4] eax +
mov [esi+10h] ecx +
mov [esi+1Ch] eax +
call ds:_strdup  +
pop ecx  +
mov [esi] eax +
test eax eax +
jz loc_1009472  +
push ebx  +
push [ebp+var_20C]  +
push esi  +
call sub_1004FDD  +
test eax eax +
jz loc_1009472  +
and dword ptr [esi+14h] 0 +
lea eax [edi+4] +
mov ecx [eax] +
mov [esi+18h] ecx +
cmp dword ptr [edi] 0 +
jz loc_1005641  +
mov ecx [eax] +
mov [ecx+14h] esi +
mov [eax] esi +
mov [esi+1Ch] edi +
mov eax esi +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_10026CE  +
leave   +
retn 1Ch  +
mov [edi] esi +
jmp loc_1005629  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_14]  +
push [ebp+arg_8]  +
call sub_10051C3  +
cmp eax 0FFFFFFFFh +
jz loc_1008216  +
test eax eax +
jz loc_100567E  +
push offset a1  +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
call sub_1002515  +
xor eax eax +
inc eax  +
pop ebp  +
retn 18h  +
push offset a0  +
jmp loc_100566C  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
mov eax [esi] +
mov [ebp+var_C] eax +
xor eax eax +
push edi  +
mov edi [ebp+arg_1C] +
mov [ebp+var_8] ax +
mov eax [ebp+arg_10] +
mov [esi+28h] eax +
push edi  +
lea eax [ebp+arg_0] +
push eax  +
lea eax [ebp-2] +
push eax  +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp-6] +
push eax  +
push [ebp+arg_4]  +
xor ebx ebx +
mov [ebp+arg_0] ebx +
call [ebp+arg_14]  +
add esp 18h +
mov [ebp+arg_1C] eax +
cmp eax 0FFFFFFFFh +
jz loc_100987A  +
cmp [ebp+arg_C] ebx +
jnz loc_100988C  +
mov cl byte ptr [ebp+arg_18] +
and cl 0Fh +
lea edx [ebp+arg_0] +
push edi  +
push edx  +
mov edx [esi+250h] +
cmp cl 3 +
mov ecx [esi+254h] +
mov [ebp+arg_0] ebx +
jz loc_1009896  +
sub edx ecx +
push edx  +
mov edx [esi+260h] +
add edx ecx +
push edx  +
push eax  +
call dword ptr [esi+14h]  +
mov ebx eax +
add esp 14h +
test ebx ebx +
jz loc_1005782  +
cmp ebx 0FFFFFFFFh +
jz loc_1009948  +
and [ebp+arg_0] 0 +
push ebx  +
push esi  +
call sub_1003EC8  +
test eax eax +
jnz loc_1009955  +
add [esi+254h] ebx +
mov eax [esi+254h] +
add [esi] ebx +
cmp eax [esi+250h] +
jnz loc_1005760  +
push edi  +
push [ebp+arg_10]  +
push esi  +
call sub_1001AC3  +
test eax eax +
jz loc_1009955  +
mov eax [esi+254h] +
push edi  +
lea ecx [ebp+arg_0] +
push ecx  +
mov ecx [esi+250h] +
sub ecx eax +
push ecx  +
mov ecx [esi+260h] +
add ecx eax +
push ecx  +
push [ebp+arg_1C]  +
jmp loc_1005710  +
and [ebp+arg_0] 0 +
push edi  +
lea eax [ebp+arg_0] +
push eax  +
push [ebp+arg_1C]  +
call dword ptr [esi+1Ch]  +
mov eax [esi] +
sub eax [ebp+var_C] +
add esp 0Ch +
push edi  +
push dword ptr [esi+2Ch]  +
mov [ebp+var_10] eax +
push dword ptr [esi+18h]  +
lea eax [ebp+var_10] +
push 10h  +
push eax  +
lea ebx [esi+138h] +
push ebx  +
call sub_1002864  +
test eax eax +
jz loc_10057D7  +
push edi  +
push dword ptr [esi+2Ch]  +
push dword ptr [esi+18h]  +
push [ebp+arg_8]  +
push ebx  +
call sub_1002831  +
test eax eax +
jz loc_10057D7  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 20h  +
xor eax eax +
jmp loc_10057D0  +
***
push esi  +
push eax  +
add eax esi +
push eax  +
call memcpy  +
add esp 0Ch +
jmp loc_1005832  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_18] +
mov ecx [ebp+arg_8] +
push ebx  +
mov ebx [ebp+arg_0] +
and dword ptr [ebx+28h] 0 +
mov [ebx+18h] eax +
mov eax [ebp+arg_14] +
mov [ebx+1Ch] eax +
mov eax [ebp+arg_C] +
mov [ebx+4] eax +
xor eax eax +
cmp [ebp+arg_1C] 0 +
mov [ebx+0Ch] ax +
mov eax [ebp+arg_10] +
mov [ebx+10h] eax +
mov eax [ebp+arg_4] +
push esi  +
mov [ebx+14h] eax +
mov [ebx+24h] ecx +
mov esi 8000h +
jz loc_10057DB  +
xor eax eax +
and [ebx+30h] eax +
mov [ebx+2Ch] ax +
call sub_10058E2  +
and dword ptr [ebx+20h] 0 +
mov eax esi +
push 2  +
mov [ebx+3Ch] ax +
mov eax [ebx+14h] +
pop ecx  +
mov [ebx+34h] esi +
add eax esi +
push edi  +
movzx edi byte ptr [eax] +
mov edx [ebx+20h] +
shl edx 5 +
xor edx edi +
and edx 7FFFh +
inc eax  +
dec ecx  +
mov [ebx+20h] edx +
jnz loc_1005856  +
cmp [ebp+arg_1C] cl +
jz loc_10058C9  +
mov edi ebx +
call sub_1007DDF  +
push 8  +
pop edi  +
push 43h  +
pop edx  +
mov eax ebx +
call sub_1004256  +
push 4Bh  +
pop edx  +
call sub_1004256  +
call sub_10042E9  +
mov ecx [ebp+arg_20] +
inc eax  +
inc eax  +
cmp [ebp+arg_1C] 0 +
movzx eax ax +
mov [ecx] eax +
pop edi  +
jz loc_10058B9  +
mov eax [ebx+14h] +
push esi  +
lea ecx [eax+8000h] +
push ecx  +
push eax  +
call memcpy  +
add esp 0Ch +
mov eax [ebx+28h] +
neg eax  +
sbb eax eax +
pop esi  +
and eax 3 +
pop ebx  +
pop ebp  +
retn 24h  +
xor eax eax +
mov ecx esi +
mov edx [ebx+18h] +
xor edi edi +
mov [eax+edx] di +
inc eax  +
inc eax  +
dec ecx  +
jnz loc_10058CD  +
jmp loc_100587A  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
xor edx edx +
mov [ebx+58h] edx +
cmp [ebx+0F1Ah] dx +
jz loc_10058F9  +
leave   +
retn   +
push esi  +
lea ecx [ebx+1E80h] +
xor eax eax +
mov esi offset dword_1003948 +
mov [ebp+var_8] ecx +
push edi  +
jmp loc_1005934  +
xor edi edi +
mov [ebx+eax+1B7Dh] dl +
mov ecx [esi] +
inc edi  +
shl edi cl +
inc eax  +
inc [ebp+var_4]  +
cmp [ebp+var_4] edi +
jl loc_100590D  +
add [ebp+var_8] 4 +
add esi 4 +
inc edx  +
cmp esi offset dword_10039B8 +
jge loc_100594A  +
mov ecx [ebp+var_8] +
and [ebp+var_4] 0 +
xor edi edi +
mov [ecx] eax +
mov ecx [esi] +
inc edi  +
shl edi cl +
test edi edi +
jg loc_100590D  +
jmp loc_1005924  +
mov [eax+ebx+1B7Ch] dl +
lea ecx [ebx+1EF4h] +
xor eax eax +
xor edx edx +
mov esi offset dword_1007CE8 +
mov [ebp+var_8] ecx +
jmp loc_100598C  +
xor edi edi +
mov [ebx+eax+1C7Dh] dl +
mov ecx [esi] +
inc edi  +
shl edi cl +
inc eax  +
inc [ebp+var_4]  +
cmp [ebp+var_4] edi +
jl loc_1005965  +
add [ebp+var_8] 4 +
add esi 4 +
inc edx  +
cmp esi offset dword_1007D28 +
jge loc_10059A2  +
mov ecx [ebp+var_8] +
and [ebp+var_4] 0 +
xor edi edi +
mov [ecx] eax +
mov ecx [esi] +
inc edi  +
shl edi cl +
test edi edi +
jg loc_1005965  +
jmp loc_100597C  +
sar eax 7 +
cmp edx 1Eh +
jge loc_1005A05  +
lea ecx [ebx+edx*4+1EF4h] +
lea esi dword_1007CE8[edx*4] +
mov [ebp+var_8] ecx +
jmp loc_10059E7  +
mov [ebx+eax+1D7Dh] dl +
mov ecx [esi] +
xor edi edi +
sub ecx 7 +
inc edi  +
shl edi cl +
inc eax  +
inc [ebp+var_4]  +
cmp [ebp+var_4] edi +
jl loc_10059BD  +
add [ebp+var_8] 4 +
add esi 4 +
inc edx  +
cmp esi offset loc_1007D60 +
jge loc_1005A05  +
mov edi [ebp+var_8] +
and [ebp+var_4] 0 +
mov ecx eax +
shl ecx 7 +
mov [edi] ecx +
mov ecx [esi] +
xor edi edi +
sub ecx 7 +
inc edi  +
shl edi cl +
test edi edi +
jg loc_10059BD  +
jmp loc_10059D7  +
xor eax eax +
movzx esi ax +
push 8  +
mov eax esi +
pop edx  +
shl esi 10h +
or eax esi +
lea edi [ebx+102Ch] +
mov ecx edx +
stos   +
lea eax [ebx+0A9Ah] +
mov ecx 90h +
pop edi  +
mov esi edx +
mov [eax] si +
add eax 4 +
inc word ptr [ebx+103Ch]  +
dec ecx  +
jnz loc_1005A2A  +
push 70h  +
lea eax [ebx+0CDAh] +
pop ecx  +
push 9  +
pop esi  +
mov [eax] si +
add eax 4 +
inc word ptr [ebx+103Eh]  +
dec ecx  +
jnz loc_1005A45  +
push 18h  +
lea eax [ebx+0E9Ah] +
pop ecx  +
push 7  +
pop esi  +
mov [eax] si +
add eax 4 +
inc word ptr [ebx+103Ah]  +
dec ecx  +
jnz loc_1005A61  +
lea eax [ebx+0EFAh] +
mov ecx edx +
mov esi edx +
mov [eax] si +
add eax 4 +
inc word ptr [ebx+103Ch]  +
dec ecx  +
jnz loc_1005A7C  +
push 11Fh  +
lea esi [ebx+0A98h] +
push ebx  +
call sub_1004732  +
xor esi esi +
lea edx [ebx+0F18h] +
push 5  +
pop eax  +
push eax  +
push esi  +
mov [edx+2] ax +
call sub_10047B6  +
mov [edx] ax +
inc esi  +
add edx 4 +
cmp esi 1Eh +
jl loc_1005AA7  +
mov eax ebx +
call sub_1005AD3  +
pop esi  +
jmp locret_10058F7  +
***
lea ecx [eax+0B0h] +
mov edx 11Eh +
push esi  +
xor esi esi +
mov [ecx] si +
add ecx 4 +
dec edx  +
jnz loc_1005ADF  +
push 1Eh  +
lea ecx [eax+9A4h] +
pop edx  +
xor esi esi +
mov [ecx] si +
add ecx 4 +
dec edx  +
jnz loc_1005AF3  +
push 13h  +
lea ecx [eax+0F90h] +
pop edx  +
xor esi esi +
mov [ecx] si +
add ecx 4 +
dec edx  +
jnz loc_1005B07  +
xor ecx ecx +
inc ecx  +
mov [eax+4B0h] cx +
xor ecx ecx +
mov [eax+54h] ecx +
mov [eax+50h] ecx +
mov [eax+4Ch] dx +
mov [eax+4Ah] dx +
mov [eax+48h] dx +
mov [eax+4Eh] cl +
mov byte ptr [eax+4Fh] 1 +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
cmp dword ptr [esi+90h] 1 +
push edi  +
mov edi [ebp+arg_C] +
jnz loc_1005B8B  +
push edi  +
push offset aGenerateinf  +
push dword ptr [esi+8]  +
call sub_1004F32  +
mov ebx offset aOn +
test eax eax +
jnz loc_1005B77  +
push ebx  +
call ds:atoi  +
pop ecx  +
jmp loc_1005B7D  +
push eax  +
call sub_1006236  +
test eax eax +
jz loc_1005BB0  +
mov dword ptr [esi+90h] 2 +
push edi  +
push offset aSourcedir  +
push dword ptr [esi+8]  +
mov [esi+0C04h] esi +
mov [esi+0C08h] edi +
call sub_1004F32  +
test eax eax +
jnz loc_1005BF4  +
mov eax offset dword_1001178 +
jmp loc_1005BFA  +
push edi  +
push offset aUniquefiles  +
push dword ptr [esi+8]  +
mov dword ptr [esi+90h] 3 +
call sub_1004F32  +
test eax eax +
jnz loc_1005BD6  +
push ebx  +
call ds:atoi  +
pop ecx  +
jmp loc_1005BDC  +
push eax  +
call sub_1006236  +
test eax eax +
jnz loc_1005B8B  +
push offset aUniquefilesMus  +
push edi  +
call sub_1006F95  +
pop ecx  +
pop ecx  +
xor eax eax +
jmp loc_1005FE0  +
push eax  +
call sub_10060B6  +
mov ecx [ebp+arg_4] +
push edi  +
push 0  +
add ecx 4 +
push ecx  +
push eax  +
mov edi 100h +
push edi  +
mov ebx offset unk_1017E18 +
push ebx  +
mov [ebp+lpCurrentChar] ecx +
call sub_1003C5A  +
test eax eax +
jz loc_1005BED  +
push [ebp+arg_C]  +
push offset aDestinationdir  +
push dword ptr [esi+8]  +
call sub_1004F32  +
test eax eax +
jnz loc_1005C38  +
mov eax offset dword_1001178 +
jmp loc_1005C3E  +
push eax  +
call sub_10060B6  +
push [ebp+arg_C]  +
mov ecx [ebp+arg_4] +
push [ebp+lpCurrentChar]  +
add ecx 104h +
push ecx  +
push eax  +
push edi  +
mov edi offset unk_1017F18 +
push edi  +
call sub_1003C5A  +
test eax eax +
jz loc_1005BED  +
cmp [ebp+arg_8] 0 +
jnz loc_1005D1D  +
cmp dword ptr [esi+40h] 3 +
jl loc_1005C9E  +
push edi  +
push ebx  +
push offset dword_100A5F8  +
push offset aCopycommand1To  +
lea eax [esi+1B4h] +
push 800h  +
push eax  +
call sub_1001711  +
add esp 18h +
push 1  +
lea eax [esi+1B4h] +
push eax  +
push esi  +
call sub_10021B4  +
push [ebp+arg_C]  +
push esi  +
call sub_100D39D  +
test eax eax +
jz loc_1005BED  +
push [ebp+arg_C]  +
push ebx  +
call sub_1003C11  +
mov [ebp+arg_0] eax +
cmp eax 0FFFFFFFFh +
jz loc_1005BED  +
push edi  +
push esi  +
call sub_100C0AC  +
push [ebp+arg_C]  +
mov eax [ebp+arg_0] +
push [ebp+arg_4]  +
add [esi+5Ch] eax +
inc dword ptr [esi+68h]  +
push eax  +
push edi  +
push ebx  +
push esi  +
call sub_100C831  +
test eax eax +
jz loc_1005BED  +
push eax  +
call sub_10060B6  +
push [ebp+arg_C]  +
mov edi eax +
push edi  +
push dword ptr [edi+24h]  +
push esi  +
call sub_1010F8A  +
test eax eax +
jz loc_1005BED  +
push [ebp+arg_C]  +
push edi  +
push esi  +
call sub_1010F31  +
neg eax  +
sbb eax eax +
neg eax  +
jmp loc_1005FE0  +
push edi  +
push 100h  +
lea eax [esi+0B4h] +
push eax  +
call sub_1002515  +
inc dword ptr [esi+6Ch]  +
lea eax [esi+0C04h] +
push eax  +
xor eax eax +
push eax  +
push eax  +
push eax  +
call sub_100210E  +
add esp 10h +
push edi  +
push esi  +
call sub_100C5A0  +
cmp dword ptr [esi+0A4h] 0 +
jz loc_1005D82  +
push dword ptr [esi+8Ch]  +
call sub_10060B6  +
push [ebp+arg_C]  +
lea ecx [eax+3Ch] +
push ecx  +
lea ecx [eax+38h] +
push ecx  +
lea ecx [eax+34h] +
push ecx  +
add eax 30h +
push eax  +
push ebx  +
call sub_100EEA8  +
test eax eax +
jz loc_1005BED  +
cmp dword ptr [esi+0A8h] 0 +
jz loc_1005DAB  +
push dword ptr [esi+8Ch]  +
call sub_10060B6  +
push [ebp+arg_C]  +
add eax 2Ch +
push eax  +
push ebx  +
call sub_100CBB2  +
test eax eax +
jz loc_1005BED  +
push [ebp+arg_C]  +
push esi  +
call sub_10061B2  +
push [ebp+arg_C]  +
movzx eax ax +
push esi  +
mov [ebp+arg_0] eax +
call sub_100C0D6  +
test eax eax +
jz loc_1005EBD  +
push [ebp+arg_C]  +
push esi  +
call sub_100DAAA  +
test eax eax +
jz loc_1005BED  +
push [ebp+arg_C]  +
push esi  +
call sub_100D39D  +
test eax eax +
jz loc_1005BED  +
push [ebp+arg_C]  +
push offset aFolderfilecoun  +
push dword ptr [esi+8]  +
call sub_1004F32  +
test eax eax +
jnz loc_1005E0F  +
push offset a0  +
call ds:atoi  +
pop ecx  +
jmp loc_1005E15  +
push eax  +
call sub_100631F  +
test eax eax +
jle loc_1005E65  +
cmp [esi+24h] eax +
jl loc_1005E65  +
push offset sub_100210E  +
push offset loc_100D824  +
push dword ptr [esi+44h]  +
call sub_1012721  +
add esp 0Ch +
test eax eax +
jnz loc_1005E61  +
mov eax [esi+0C08h] +
cmp dword ptr [eax+200h] 0 +
jnz loc_1005BED  +
lea eax [esi+48h] +
push eax  +
push offset aFciflushfolder  +
push esi  +
push [ebp+arg_C]  +
call sub_100D49E  +
jmp loc_1005BED  +
and dword ptr [esi+24h] 0 +
push [ebp+arg_0]  +
mov eax [ebp+arg_4] +
push offset loc_1006D32  +
push offset sub_100210E  +
push offset loc_100D824  +
push dword ptr [eax+208h]  +
push edi  +
push ebx  +
push dword ptr [esi+44h]  +
call sub_10026E0  +
add esp 20h +
test eax eax +
jnz loc_1005EAF  +
mov eax [esi+0C08h] +
cmp dword ptr [eax+200h] 0 +
jnz loc_1005BED  +
lea eax [esi+48h] +
push eax  +
push offset aFciaddfile  +
jmp loc_1005E53  +
inc dword ptr [esi+24h]  +
inc dword ptr [esi+28h]  +
xor eax eax +
inc eax  +
jmp loc_1005FE0  +
mov eax [ebp+arg_C] +
cmp dword ptr [eax+200h] 0 +
jnz loc_1005BED  +
cmp word ptr [ebp+arg_0] 0 +
jz loc_1005EEF  +
push [ebp+lpCurrentChar]  +
push offset aS_2  +
push offset aNotImplemented  +
push eax  +
call sub_1006F95  +
add esp 10h +
jmp loc_1005BED  +
push eax  +
push offset aDonotcopyfiles  +
push dword ptr [esi+8]  +
call sub_1004F32  +
test eax eax +
jnz loc_1005F0F  +
push offset aOff  +
call ds:atoi  +
pop ecx  +
jmp loc_1005F15  +
push eax  +
call sub_1006236  +
push dword ptr [esi+8Ch]  +
neg eax  +
sbb eax eax +
inc eax  +
mov [ebp+arg_4] eax +
call sub_10060B6  +
push [ebp+arg_C]  +
mov [ebp+arg_0] eax +
push 1  +
push dword ptr [eax]  +
push esi  +
call sub_1006FC5  +
test eax eax +
jz loc_1005BED  +
push [ebp+arg_C]  +
push esi  +
call sub_100D39D  +
test eax eax +
jz loc_1005BED  +
push [ebp+arg_C]  +
lea eax [esi+0B04h] +
push offset dword_1001178  +
push edi  +
push eax  +
push 100h  +
push offset FileName  +
call sub_1003C5A  +
test eax eax +
jz loc_1005BED  +
cmp [ebp+arg_4] 0 +
jz loc_1005F95  +
push [ebp+arg_C]  +
push 1  +
push offset FileName  +
call sub_100E434  +
test eax eax +
jz loc_1005BED  +
push [ebp+arg_C]  +
push esi  +
push offset sub_1006DD2  +
push 8000h  +
push [ebp+arg_4]  +
push ebx  +
push offset FileName  +
call sub_100EA1A  +
mov ebx eax +
mov eax [ebp+arg_0] +
mov eax [eax] +
lea ecx [esi+0C04h] +
push ecx  +
push eax  +
push eax  +
push 0  +
call sub_100210E  +
add esp 10h +
push [ebp+arg_C]  +
push 0  +
push dword ptr [esi+14h]  +
push edi  +
push esi  +
call sub_100C5D5  +
neg eax  +
sbb eax eax +
and eax ebx +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax+4] +
pop ebp  +
retn 4  +
***
push offset aOn  +
call ds:atoi  +
pop ecx  +
jmp loc_10061DB  +
push offset aMszip  +
jmp loc_10061FD  +
dec eax  +
jz loc_100611F  +
dec eax  +
jz loc_10060EE  +
push 0Fh  +
pop eax  +
jmp loc_100620C  +
push edi  +
push offset aCompressionmem  +
push dword ptr [esi+8]  +
call sub_1004F32  +
push edi  +
test eax eax +
jnz loc_1006108  +
push offset dword_1006180  +
jmp loc_100610F  +
push eax  +
call sub_10060B6  +
push eax  +
call sub_1006A4A  +
shl eax 8 +
or eax 3 +
jmp loc_100620C  +
push ebx  +
push edi  +
push offset aCompressionlev  +
push dword ptr [esi+8]  +
call sub_1004F32  +
push edi  +
test eax eax +
jnz loc_100613A  +
push offset dword_1006198  +
jmp loc_1006141  +
push eax  +
call sub_10060B6  +
push eax  +
call sub_10069BE  +
push edi  +
push offset aCompressionmem  +
push dword ptr [esi+8]  +
mov ebx eax +
call sub_1004F32  +
push edi  +
test eax eax +
jnz loc_1006162  +
push offset dword_1006180  +
jmp loc_1006169  +
push eax  +
call sub_10060B6  +
push eax  +
call sub_1006A4A  +
shl eax 4 +
or eax ebx +
shl eax 4 +
or eax 2 +
pop ebx  +
jmp loc_100620C  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov edi [ebp+arg_4] +
push edi  +
push offset aCompress  +
push dword ptr [esi+8]  +
call sub_1004F32  +
test eax eax +
jz loc_10060C5  +
push eax  +
call sub_1006236  +
test eax eax +
jz loc_1006212  +
push edi  +
push offset aCompressiontyp  +
push dword ptr [esi+8]  +
call sub_1004F32  +
push edi  +
test eax eax +
jz loc_10060D6  +
push eax  +
call sub_10060B6  +
push eax  +
call sub_100695A  +
dec eax  +
jnz loc_10060E0  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
xor eax eax +
jmp loc_100620C  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push dword ptr [eax+4]  +
call ds:atoi  +
pop ecx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
push [ebp+arg_8]  +
mov edi [ebp+arg_4] +
push offset aReservepercabi  +
push dword ptr [edi+8]  +
call sub_1004F32  +
mov ebx ds:atol +
test eax eax +
jz loc_1008388  +
push eax  +
call sub_100631F  +
push [ebp+arg_8]  +
mov esi [ebp+arg_0] +
push offset aReserveperfold  +
mov [esi+8] eax +
push dword ptr [edi+8]  +
call sub_1004F32  +
test eax eax +
jz loc_1008395  +
push eax  +
call sub_100631F  +
push [ebp+arg_8]  +
mov [esi+0Ch] eax +
push offset aReserveperdata  +
push dword ptr [edi+8]  +
call sub_1004F32  +
test eax eax +
jz loc_10083A2  +
push eax  +
call sub_100631F  +
mov [esi+10h] eax +
pop edi  +
xor eax eax +
pop esi  +
inc eax  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push dword ptr [eax+4]  +
call ds:atol  +
pop ecx  +
pop ebp  +
retn 4  +
***
push dword ptr [ebx+0AD4h]  +
call dword ptr [ebx+0Ch]  +
pop ecx  +
mov [ebp+var_228] eax +
test eax eax +
jz loc_1002406  +
push dword ptr [ebx+0AD4h]  +
call dword ptr [ebx+0Ch]  +
pop ecx  +
mov [ebp+var_230] eax +
test eax eax +
jz loc_10023F8  +
push dword ptr [ebx+0AD0h]  +
call dword ptr [ebx+0Ch]  +
pop ecx  +
mov [ebp+var_22C] eax +
test eax eax +
jz loc_10023F8  +
push dword ptr [ebx+0AD4h]  +
push 0  +
push [ebp+var_228]  +
call memset  +
push dword ptr [ebx+0AD4h]  +
push 0  +
push [ebp+var_230]  +
call memset  +
push dword ptr [ebx+0AD0h]  +
push 0  +
push [ebp+var_22C]  +
call memset  +
mov eax [esi] +
add esp 24h +
add eax [edi] +
jz loc_1002CA8  +
mov esi [ebx+13Ch] +
add esi [ebx+0ACCh] +
mov eax [ebp+var_21C] +
add esi [ebx+244h] +
add eax 138h +
add esi [eax-108h] +
add esi [ebx+0AD0h] +
add esi [eax] +
lea eax [ebx+0BDFh] +
add esi [ebx+34h] +
cmp byte ptr [eax] 0 +
mov [ebp+var_220] esi +
jnz loc_1009D3B  +
lea eax [ebx+0FE3h] +
cmp byte ptr [eax] 0 +
jnz loc_1009D6C  +
push [ebp+var_218]  +
xor edi edi +
push esi  +
push edi  +
push 1  +
mov [ebp+var_254] esi +
mov [ebp+var_238] edi +
call [ebp+var_244]  +
add esp 10h +
cmp eax 0FFFFFFFFh +
jz loc_100A17F  +
push [ebp+var_218]  +
mov edi [ebx+34Ch] +
push dword ptr [ebx+2Ch]  +
lea eax [ebp+var_214] +
push dword ptr [ebx+8]  +
sub edi esi +
push dword ptr [ebx+28h]  +
mov [ebp+var_234] edi +
push dword ptr [ebx+20h]  +
push dword ptr [ebx+14h]  +
push 2  +
push eax  +
call sub_100140F  +
test eax eax +
jz loc_10023F8  +
test edi edi +
jl loc_1009D9D  +
cmp [ebp+arg_8] 0 +
jnz loc_1009D9D  +
and [ebp+var_250] 0 +
mov edi [ebp+var_21C] +
mov ax [edi+25Ch] +
mov esi [ebp+var_22C] +
push [ebp+var_218]  +
mov [esi+6] ax +
xor eax eax +
mov [esi+4] ax +
mov eax [ebx+34h] +
mov [esi] eax +
xor eax eax +
lea ecx [ebp+var_224] +
push ecx  +
push eax  +
push eax  +
push dword ptr [edi+34h]  +
mov [ebp+var_23C] eax +
mov [ebp+var_224] eax +
call dword ptr [ebx+24h]  +
add esp 14h +
cmp eax 0FFFFFFFFh +
jz loc_100A18F  +
and [ebp+var_224] 0 +
lea eax [ebp+var_224] +
push eax  +
push [ebp+var_218]  +
push edi  +
push [ebp+var_228]  +
push ebx  +
call sub_1001530  +
test eax eax +
jz loc_1002A76  +
mov eax [ebp+var_228] +
add eax 4 +
mov [ebp+var_220] eax +
jmp loc_1002216  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_8] +
push esi  +
push [ebp+arg_C]  +
mov esi [ebp+arg_4] +
push 0  +
push eax  +
push esi  +
mov [esi+30h] eax +
call sub_1006FC5  +
test eax eax +
jz loc_1006653  +
inc dword ptr [esi+18h]  +
mov eax [esi+18h] +
push ebx  +
push edi  +
mov edi [ebp+arg_0] +
push [ebp+arg_C]  +
mov [edi+14h] eax +
mov eax [esi+14h] +
push offset aCabinetFileNam  +
mov [edi+18h] eax +
mov ax [esi+80h] +
and dword ptr [edi+1Ch] 0 +
mov [edi+20h] ax +
push dword ptr [esi+18h]  +
lea eax [edi+122h] +
push offset aCabinetnametem  +
push offset aCabinetname  +
mov ebx 100h +
push ebx  +
push eax  +
push esi  +
mov [ebp+arg_8] eax +
call sub_100D73B  +
test eax eax +
jz loc_1006651  +
lea eax [esi+0B04h] +
push eax  +
push ebx  +
lea eax [edi+222h] +
push eax  +
call sub_1002515  +
push [ebp+arg_C]  +
push offset aMaxcabinetsize  +
push dword ptr [esi+8]  +
call sub_1004F32  +
test eax eax +
jnz loc_10065DE  +
push offset a0  +
call ds:atoi  +
pop ecx  +
jmp loc_10065E4  +
push eax  +
call sub_100631F  +
mov [edi] eax +
test eax eax +
jz loc_10065EF  +
cmp eax [esi+20h] +
jbe loc_10065F4  +
mov eax [esi+20h] +
mov [edi] eax +
push [ebp+arg_C]  +
push offset aFoldersizethre  +
push dword ptr [esi+8]  +
call sub_1004F32  +
test eax eax +
jnz loc_1006616  +
push offset a0  +
call ds:atoi  +
pop ecx  +
jmp loc_100661C  +
push eax  +
call sub_100631F  +
mov [edi+4] eax +
test eax eax +
jnz loc_1006628  +
mov eax [edi] +
mov [edi+4] eax +
lea eax [esi+0A04h] +
push eax  +
push ebx  +
add edi 22h +
push edi  +
call sub_1002515  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push dword ptr [esi+14h]  +
push dword ptr [esi+18h]  +
push esi  +
call sub_10112C8  +
neg eax  +
sbb eax eax +
neg eax  +
pop edi  +
pop ebx  +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+1Ch] +
push edi  +
mov edi [ebp+8] +
cmp dword ptr [edi+40h] 0 +
jnz loc_100674E  +
mov eax [esi+208h] +
push 32h  +
cdq   +
pop ecx  +
idiv  ecx +
test edx edx +
jz loc_10066F6  +
push dword ptr [esi+204h]  +
push offset unk_1018118  +
call ds:_stricmp  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_100674E  +
push dword ptr [esi+208h]  +
lea ebx [edi+1B4h] +
push dword ptr [esi+204h]  +
push offset dword_100A514  +
push offset aParsingDirecti  +
push 800h  +
push ebx  +
call sub_1001711  +
add esp 18h +
push 0  +
push ebx  +
push edi  +
call sub_10021B4  +
mov eax [esi+208h] +
push 32h  +
cdq   +
pop ecx  +
idiv  ecx +
test edx edx +
jz loc_100674E  +
push dword ptr [esi+204h]  +
push 100h  +
push offset unk_1018118  +
call sub_1002515  +
lea ebx [esi+200h] +
cmp dword ptr [ebx] 0 +
jnz loc_100676A  +
push esi  +
push 0  +
push dword ptr [ebp+0Ch]  +
push edi  +
call sub_100DC74  +
cmp dword ptr [ebx] 0 +
jz loc_10067CD  +
push esi  +
push edi  +
call sub_100C27E  +
push esi  +
call sub_100683B  +
push esi  +
push offset aMaxerrors  +
push dword ptr [edi+8]  +
call sub_1004F32  +
test eax eax +
jnz loc_1006797  +
push offset dword_10067D8  +
call ds:atol  +
pop ecx  +
jmp loc_100679D  +
push eax  +
call sub_100631F  +
test eax eax +
jz loc_10067C7  +
mov edi [edi+38h] +
cmp edi eax +
jl loc_10067C7  +
push edi  +
push offset dword_100A7A0  +
push offset aMakecabAborted  +
push esi  +
call sub_1006F95  +
and dword ptr [esi+204h] 0 +
add esp 10h +
xor eax eax +
jmp loc_10067D0  +
push esi  +
call sub_100683B  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
xor ecx ecx +
mov [eax+200h] ecx +
mov [eax] cl +
mov [eax+210h] ecx +
mov [eax+214h] ecx +
pop ebp  +
retn 4  +
***
sub eax 6Fh +
jz loc_1006879  +
sub eax 4 +
jnz loc_1009241  +
cmp byte ptr [ecx-1] 46h +
jz loc_1006897  +
push 7  +
pop eax  +
jmp loc_10013FB  +
mov cl [ecx-1] +
xor eax eax +
cmp cl 68h +
jz loc_100688A  +
cmp cl 6Ch +
setz al  +
inc eax  +
inc eax  +
jmp loc_10013FB  +
xor eax eax +
jmp loc_10013FB  +
push 8  +
jmp loc_1006873  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_14]  +
push [ebp+arg_8]  +
call sub_10068D3  +
cmp eax 0FFFFFFFFh +
jz loc_100821D  +
push [ebp+arg_8]  +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
call sub_1002515  +
xor eax eax +
inc eax  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
mov esi ds:atoi +
push edi  +
push [ebp+arg_0]  +
call esi  +
mov ebx offset a1 +
push ebx  +
mov [ebp+var_4] eax +
call esi  +
mov edi offset a8 +
push edi  +
mov [ebp+var_8] eax +
call esi  +
mov ecx [ebp+var_4] +
add esp 0Ch +
cmp [ebp+var_8] ecx +
jg loc_1008031  +
cmp ecx eax +
jg loc_1008031  +
mov eax ecx +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
push ebp  +
mov ebp esp +
push dword ptr [ebp+1Ch]  +
push dword ptr [ebp+10h]  +
call sub_100695A  +
cmp eax 0FFFFFFFFh +
jz loc_1008224  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+18h]  +
push dword ptr [ebp+14h]  +
call sub_1002515  +
xor eax eax +
inc eax  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ds:_stricmp +
push offset aMszip  +
push [ebp+arg_0]  +
call esi  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_100807D  +
inc eax  +
pop esi  +
pop ebp  +
retn 8  +
***
push ebp  +
mov ebp esp +
push dword ptr [ebp+1Ch]  +
push dword ptr [ebp+10h]  +
call sub_10069BE  +
cmp eax 0FFFFFFFFh +
jz loc_100822B  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+18h]  +
push dword ptr [ebp+14h]  +
call sub_1002515  +
xor eax eax +
inc eax  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
mov esi ds:atoi +
push edi  +
push [ebp+arg_0]  +
call esi  +
mov ebx offset a1 +
push ebx  +
mov [ebp+var_4] eax +
call esi  +
mov edi offset a7 +
push edi  +
mov [ebp+var_8] eax +
call esi  +
mov ecx [ebp+var_4] +
add esp 0Ch +
cmp [ebp+var_8] ecx +
jg loc_10080DC  +
cmp ecx eax +
jg loc_10080DC  +
mov eax ecx +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
push ebp  +
mov ebp esp +
push dword ptr [ebp+1Ch]  +
push dword ptr [ebp+10h]  +
call sub_1006A4A  +
cmp eax 0FFFFFFFFh +
jz loc_1008232  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+18h]  +
push dword ptr [ebp+14h]  +
call sub_1002515  +
xor eax eax +
inc eax  +
pop ebp  +
retn 18h  +
***
mov edi edi +
xor dh [ecx] +
add [eax-6FFFCFCFh] dl +
nop   +
nop   +
nop   +
nop   +
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ds:_stricmp +
push offset aMmDdYy  +
push [ebp+arg_C]  +
call esi  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_1008239  +
push [ebp+arg_C]  +
push [ebp+arg_14]  +
push [ebp+arg_10]  +
call sub_1002515  +
xor eax eax +
inc eax  +
pop esi  +
pop ebp  +
retn 18h  +
***
push ebp  +
mov ebp esp +
push dword ptr [ebp+10h]  +
call sub_1006B30  +
cmp eax 0FFFFFFFFh +
jz loc_10082AC  +
shl eax 4 +
push off_101773C[eax]  +
push dword ptr [ebp+18h]  +
push dword ptr [ebp+14h]  +
call sub_1002515  +
xor eax eax +
inc eax  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
push ebx  +
push esi  +
push edi  +
mov edi ds:atol +
mov esi offset off_1017744 +
push dword ptr [esi-0Ch]  +
push [ebp+arg_0]  +
call ds:_stricmp  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1006B77  +
push dword ptr [esi]  +
call edi  +
push [ebp+arg_0]  +
mov ebx eax +
call edi  +
pop ecx  +
pop ecx  +
cmp eax ebx +
jz loc_1006B77  +
inc [ebp+var_4]  +
add esi 10h +
cmp [ebp+var_4] 8 +
jb loc_1006B48  +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
cmp eax 8 +
jnb loc_10081A9  +
leave   +
retn 4  +
***
call sub_1006BF7  +
cmp eax 6 +
jb locret_1006BC2  +
push offset ModuleName  +
call ds:GetModuleHandleW  +
test eax eax +
jz locret_1006BC2  +
push offset ProcName  +
push eax  +
call ds:GetProcAddress  +
test eax eax +
jz locret_1006BC2  +
push 0  +
push 0  +
push 1  +
push 0  +
call eax  +
retn   +
***
call ds:GetVersion  +
test eax eax +
js loc_1008385  +
movzx eax al +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
call sub_1003C11  +
cmp eax 0FFFFFFFFh +
jz loc_100865C  +
push esi  +
mov esi [ebp+arg_0] +
cmp dword ptr [esi+4] 0 +
jnz loc_1006C40  +
push [ebp+arg_8]  +
call sub_1003BEB  +
mov [esi+4] eax +
test eax eax +
jz loc_1006C50  +
push [ebp+arg_8]  +
push 0  +
push [ebp+arg_4]  +
push dword ptr [esi+4]  +
call sub_1006C5A  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
push 14h  +
call ds:malloc  +
mov esi eax +
xor ebx ebx +
pop ecx  +
cmp esi ebx +
jz loc_1008F63  +
push [ebp+arg_4]  +
mov edi ds:_strdup +
mov [esi] ebx +
mov [esi+4] ebx +
call edi  +
pop ecx  +
mov [esi] eax +
cmp eax ebx +
jz loc_1008F44  +
cmp [ebp+arg_8] ebx +
jnz loc_1008F33  +
mov [esi+4] ebx +
mov ecx [ebp+arg_0] +
or dword ptr [esi+8] 0FFFFFFFFh +
mov [esi+10h] ebx +
lea eax [ecx+4] +
mov edx [eax] +
mov [esi+0Ch] edx +
cmp [ecx] ebx +
jnz loc_1006CC1  +
mov [ecx] esi +
mov [eax] esi +
mov eax esi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 10h  +
mov ecx [eax] +
mov [ecx+10h] esi +
jmp loc_1006CB6  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax [ebp+arg_0] +
push dword ptr [eax+8]  +
mov [ebp+var_8] 1 +
call sub_1003E27  +
mov [ebp+var_4] eax +
test eax eax +
jz loc_1006D12  +
push ebx  +
push esi  +
push edi  +
push [ebp+var_4]  +
call sub_1003E13  +
test al 3 +
jz loc_1008663  +
push [ebp+var_4]  +
call sub_1006D1E  +
mov [ebp+var_4] eax +
test eax eax +
jnz loc_1006CF0  +
pop edi  +
pop esi  +
pop ebx  +
mov eax [ebp+var_8] +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax+14h] +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
mov ebx [ebp+1Ch] +
push esi  +
mov esi [ebx] +
push edi  +
xor eax eax +
mov [ebp-8] ax +
lea edi [ebp-6] +
stos   +
mov eax [ebx+4] +
mov edi [ebp+18h] +
and dword ptr [edi] 0 +
push eax  +
push dword ptr [ebp+8]  +
mov [ebp+1Ch] eax +
lea eax [ebp-8] +
push eax  +
call sub_1006DF0  +
test eax eax +
jz loc_1006DC8  +
push dword ptr [ebp+1Ch]  +
lea eax [ebp-8] +
push esi  +
push eax  +
call sub_1006DD2  +
test eax eax +
jz loc_1006DC8  +
xor edx edx +
cmp [esi+0C0Ch] edx +
jnz loc_1008773  +
mov cx [ebp-8] +
mov eax [ebp+0Ch] +
mov [eax] cx +
mov cx [ebp-6] +
mov eax [ebp+10h] +
push ebx  +
push edi  +
mov [eax] cx +
mov eax [ebp+14h] +
mov cx [ebp-4] +
push edx  +
push 8000h  +
push dword ptr [ebp+8]  +
mov [eax] cx +
mov [edi] edx +
call sub_10011C3  +
add esp 14h +
cmp eax 0FFFFFFFFh +
jz loc_100879B  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
or eax 0FFFFFFFFh +
jmp loc_1006DC3  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
cmp dword ptr [eax+7Ch] 0 +
jnz loc_10083AF  +
xor eax eax +
inc eax  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
push esi  +
lea eax [ebp+FileInformation] +
push eax  +
push 0  +
push [ebp+lpFileName]  +
call ds:GetFileAttributesExA  +
test eax eax +
jz loc_1009131  +
lea eax [ebp+LocalFileTime] +
push eax  +
lea eax [ebp+FileTime] +
push eax  +
call ds:FileTimeToLocalFileTime  +
test eax eax +
jz loc_1009131  +
mov esi [ebp+lpFatDate] +
lea eax [esi+2] +
push eax  +
push esi  +
lea eax [ebp+LocalFileTime] +
push eax  +
call ds:FileTimeToDosDateTime  +
test eax eax +
jz loc_1009131  +
push [ebp+FileInformation]  +
call sub_1006E59  +
mov [esi+4] ax +
xor eax eax +
inc eax  +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test al al +
js loc_10090A6  +
and eax 27h +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push edi  +
push [ebp+arg_10]  +
push offset aCompressedfile  +
push dword ptr [eax+8]  +
call sub_1004F32  +
push eax  +
call sub_10060B6  +
push [ebp+arg_10]  +
mov al [eax] +
push [ebp+lpCurrentChar]  +
mov byte ptr [ebp+arg_0+3] al +
call sub_1005104  +
mov edi eax +
test edi edi +
jz loc_1006F6D  +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
push [ebp+arg_8]  +
push esi  +
call sub_1002515  +
test eax eax +
jl loc_1006F44  +
mov eax edi +
lea ecx [eax+1] +
mov dl [eax] +
inc eax  +
test dl dl +
jnz loc_1006EC9  +
sub eax ecx +
mov cl [esi] +
push ebx  +
mov ebx eax +
lea edi [ebx+esi] +
mov eax esi +
jmp loc_1006F06  +
cmp cl 2Eh +
jnz loc_1006EF9  +
lea ecx [eax+1] +
mov dl [ecx] +
cmp dl 2Eh +
jz loc_1006EF9  +
cmp dl 5Ch +
jz loc_1006EF9  +
cmp dl 2Fh +
jz loc_1006EF9  +
mov edi ecx +
push 0  +
push eax  +
push 0  +
call ds:CharNextExA  +
mov cl [eax] +
test cl cl +
jnz loc_1006EDE  +
mov eax edi +
lea edx [eax+1] +
mov cl [eax] +
inc eax  +
test cl cl +
jnz loc_1006F0F  +
sub eax edx +
cmp eax 3 +
jnb loc_1006F1E  +
inc ebx  +
cmp byte ptr [edi] 0 +
jnz loc_1006F30  +
cmp byte ptr [edi-1] 2Eh +
jz loc_1006F3E  +
mov byte ptr [edi] 2Eh +
inc edi  +
inc ebx  +
jmp loc_1006F3E  +
xor eax eax +
cmp byte ptr [edi] 0 +
jz loc_1006F3E  +
inc edi  +
inc eax  +
cmp eax 2 +
jl loc_1006F32  +
cmp ebx [ebp+arg_8] +
pop ebx  +
jl loc_1006F60  +
push [ebp+lpCurrentChar]  +
push offset aS_2  +
push offset aFileNameTooLon  +
push [ebp+arg_10]  +
call sub_1006F95  +
add esp 10h +
xor eax eax +
jmp loc_1006F6C  +
mov al byte ptr [ebp+arg_0+3] +
mov [edi] al +
xor eax eax +
mov byte ptr [edi+1] 0 +
inc eax  +
pop esi  +
pop edi  +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
lea eax [ebp+arg_C] +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push 200h  +
push esi  +
call sub_1001732  +
mov dword ptr [esi+200h] 1 +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
push [ebp+arg_C]  +
push offset aClustersize  +
push dword ptr [esi+8]  +
call sub_1004F32  +
mov edi ds:atoi +
mov ebx offset a1_44m +
test eax eax +
jnz loc_1006FF6  +
push ebx  +
call edi  +
pop ecx  +
jmp loc_1006FFC  +
push eax  +
call sub_100631F  +
push [ebp+arg_C]  +
mov [ebp+arg_0] eax +
push offset aMaxdiskfilecou  +
push dword ptr [esi+8]  +
mov [esi+34h] eax +
call sub_1004F32  +
test eax eax +
jnz loc_100701C  +
push ebx  +
call edi  +
pop ecx  +
jmp loc_1007022  +
push eax  +
call sub_100631F  +
xor ebx ebx +
cmp [ebp+arg_4] 0FFFFFFFFh +
mov [ebp+var_4] eax +
jz loc_1007077  +
cmp [esi+0ACh] ebx +
jnz loc_1007077  +
push [ebp+arg_0]  +
push [ebp+arg_4]  +
call sub_100C10F  +
mov edi eax +
cmp edi [esi+20h] +
jg loc_1007077  +
push [ebp+arg_C]  +
push esi  +
call sub_100C0D6  +
test eax eax +
jnz loc_100705C  +
mov eax [ebp+var_4] +
cmp [esi+2Ch] eax +
jge loc_1007077  +
push [ebp+arg_C]  +
sub [esi+20h] edi +
push esi  +
call sub_100C0D6  +
test eax eax +
jnz loc_100706F  +
inc dword ptr [esi+2Ch]  +
xor eax eax +
inc eax  +
jmp loc_1007159  +
push [ebp+arg_C]  +
inc dword ptr [esi+14h]  +
push esi  +
mov [esi+0ACh] ebx +
call sub_100C12D  +
mov [esi+20h] eax +
cmp eax 0FFFFFFFFh +
jnz loc_1007098  +
xor eax eax +
jmp loc_1007159  +
push [ebp+arg_C]  +
push eax  +
push ebx  +
push esi  +
call sub_100C1B6  +
test eax eax +
jz loc_1007091  +
cmp [ebp+arg_8] ebx +
jz loc_10070BA  +
push [ebp+arg_0]  +
push [ebp+arg_4]  +
call sub_100C10F  +
sub [esi+20h] eax +
push [ebp+arg_C]  +
mov [esi+30h] ebx +
push offset aDiskDirectoryN  +
push dword ptr [esi+14h]  +
mov ebx 100h +
push offset aDiskdirectoryt  +
push offset dword_1007198  +
push ebx  +
lea edi [esi+0B04h] +
push edi  +
push esi  +
mov dword ptr [esi+2Ch] 1 +
call sub_100D73B  +
test eax eax +
jz loc_1007091  +
push [ebp+arg_C]  +
push 0  +
push edi  +
call sub_100E434  +
test eax eax +
jz loc_1007091  +
mov eax edi +
lea edx [eax+1] +
mov cl [eax] +
inc eax  +
test cl cl +
jnz loc_1007104  +
sub eax edx +
test eax eax +
jle loc_100711B  +
lea eax [eax+edi-1] +
push eax  +
call sub_100E392  +
push [ebp+arg_C]  +
lea edi [esi+0A04h] +
push offset aDiskLabelName  +
push dword ptr [esi+14h]  +
push offset aDisklabeltempl  +
push offset dword_100718C  +
push ebx  +
push edi  +
push esi  +
call sub_100D73B  +
test eax eax +
jz loc_1007091  +
push [ebp+arg_C]  +
push edi  +
push dword ptr [esi+14h]  +
push esi  +
call sub_1011219  +
neg eax  +
sbb eax eax +
neg eax  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 50h +
mov eax dword_1017000 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_8] +
push ebx  +
mov ebx [ebp+arg_4] +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov edi [ebp+arg_10] +
mov [ebp+var_50] eax +
mov eax [ebp+arg_C] +
mov [ebp+var_48] eax +
mov eax [esi+70h] +
push edi  +
push eax  +
mov [ebp+var_44] ebx +
mov [ebp+var_4C] eax +
call sub_100FB36  +
test eax eax +
jnz loc_1007227  +
xor eax eax +
jmp loc_1007376  +
push offset aWb  +
push ebx  +
call ds:fopen  +
pop ecx  +
pop ecx  +
mov [ebp+var_3C] eax +
test eax eax +
jnz loc_1007252  +
push ebx  +
push offset aS_2  +
push offset aCannotCreateIn  +
push edi  +
call sub_1006F95  +
add esp 10h +
jmp loc_1007220  +
push edi  +
push offset aInfcommentstri  +
push dword ptr [esi+8]  +
call sub_1004F32  +
test eax eax +
jnz loc_100726D  +
mov [ebp+var_40] offset dword_1003888 +
jmp loc_1007276  +
push eax  +
call sub_10060B6  +
mov [ebp+var_40] eax +
push [ebp+var_50]  +
call ds:ctime  +
pop ecx  +
push eax  +
push 32h  +
lea eax [ebp+var_38] +
push eax  +
call sub_1002515  +
test eax eax +
jl loc_100735C  +
lea eax [ebp+var_38] +
lea ecx [eax+1] +
mov dl [eax] +
inc eax  +
test dl dl +
jnz loc_100729A  +
push edi  +
push [ebp+var_48]  +
sub eax ecx +
mov byte ptr [ebp+eax+var_3C+3] dl +
lea eax [ebp+var_38] +
push eax  +
push [ebp+var_40]  +
push offset dword_10073C0  +
push offset aInfheader  +
push ebx  +
push [ebp+var_3C]  +
push esi  +
call sub_100FB6C  +
test eax eax +
jz loc_100735C  +
push edi  +
push offset aInfsectionorde  +
push dword ptr [esi+8]  +
call sub_1004F32  +
test eax eax +
jnz loc_1007305  +
mov ebx offset dword_10073F0 +
movsx eax byte ptr [ebx] +
push eax  +
call ds:toupper  +
sub eax 43h +
pop ecx  +
jz loc_1007313  +
dec eax  +
jz loc_100730F  +
dec eax  +
dec eax  +
jnz loc_1007220  +
push 2  +
pop eax  +
jmp loc_1007316  +
push eax  +
call sub_10060B6  +
mov ebx eax +
jmp loc_1007332  +
xor eax eax +
jmp loc_1007316  +
xor eax eax +
inc eax  +
mov ecx [ebp+var_4C] +
push edi  +
push offset dword_10073CC  +
push dword ptr [ecx+eax*4]  +
push [ebp+var_44]  +
push [ebp+var_3C]  +
call sub_100FD5A  +
test eax eax +
jz loc_100735C  +
inc ebx  +
cmp byte ptr [ebx] 0 +
jnz loc_10072E5  +
push edi  +
push [ebp+var_48]  +
lea eax [ebp+var_38] +
push eax  +
push [ebp+var_40]  +
push offset dword_10073B4  +
push offset aInffooter  +
push [ebp+var_44]  +
push [ebp+var_3C]  +
push esi  +
call sub_100FB6C  +
test eax eax +
jnz loc_1007369  +
push [ebp+var_3C]  +
call ds:fclose  +
xor eax eax +
jmp loc_1007375  +
push [ebp+var_3C]  +
call ds:fclose  +
xor eax eax +
inc eax  +
pop ecx  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_10026CE  +
leave   +
retn 14h  +
***
mov eax [ebp+var_230] +
lea ecx [ebp+var_224] +
sub eax ecx +
cmp eax 1ECh +
jge loc_10018DD  +
cmp [ebp+var_244] 0 +
jle loc_10018DD  +
cmp [ebp+var_244] 3 +
jg loc_10018DD  +
lea eax [ebp+var_24] +
sub eax [ebp+var_230] +
push eax  +
push [ebp+var_230]  +
call sub_1007448  +
add esi eax +
jmp loc_10018DD  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 24h +
mov eax dword_1017000 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
push edi  +
mov esi offset asc_10074BC +
push esi  +
push ebx  +
call ds:strspn  +
mov [ebp+var_1C] eax +
add eax ebx +
push esi  +
push eax  +
call ds:strpbrk  +
mov edi eax +
add esp 10h +
test edi edi +
jnz loc_1009182  +
mov eax [ebp+var_1C] +
and [ebp+var_24] 0 +
lea edi [eax+ebx] +
lea eax [edi+1] +
mov cl [edi] +
inc edi  +
test cl cl +
jnz loc_1007494  +
mov esi [ebp+var_1C] +
sub edi eax +
cmp edi 3 +
jg loc_100919B  +
xor eax eax +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_10026CE  +
leave   +
retn 8  +
***
cmp ds:1000000h ax +
jnz loc_1007564  +
mov eax ds:100003Ch +
lea eax [eax+1000000h] +
cmp dword ptr [eax] 4550h +
jnz loc_1007564  +
movzx ecx word ptr [eax+18h] +
cmp ecx 10Bh +
jnz loc_10095CA  +
cmp dword ptr [eax+74h] 0Eh +
jbe loc_1007564  +
xor ecx ecx +
cmp [eax+0E8h] ecx +
setnz cl  +
mov eax ecx +
push 1  +
mov dword_1017008 eax +
call sub_1007585  +
push eax  +
call ds:__set_app_type  +
or dword_1017018 0FFFFFFFFh +
or dword_101701C 0FFFFFFFFh +
pop ecx  +
pop ecx  +
call ds:__p__fmode  +
mov ecx dword_10177C8 +
mov [eax] ecx +
call ds:__p__commode  +
mov ecx dword_10177C4 +
mov [eax] ecx +
call sub_1003EC0  +
cmp dword_10177B8 0 +
jz loc_10095F0  +
call sub_100756D  +
xor eax eax +
retn   +
***
xor eax eax +
jmp loc_100750B  +
***
call ds:_controlfp  +
pop ecx  +
pop ecx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
call ds:GetModuleHandleA  +
test eax eax +
jz loc_10075B9  +
push eax  +
call sub_10075C3  +
test eax eax +
jz loc_10075B9  +
movzx eax word ptr [eax+5Ch] +
cmp ax 2 +
jz loc_1009612  +
cmp ax 3 +
jnz loc_10075B9  +
xor eax eax +
inc eax  +
pop ebp  +
retn   +
mov eax [ebp+arg_0] +
pop ebp  +
retn   +
***
call sub_10077C4  +
xor eax eax +
mov ecx [ebp+8] +
test ecx ecx +
jz loc_1007612  +
cmp ecx 0FFFFFFFFh +
jz loc_1007612  +
and [ebp-4] eax +
mov edx 5A4Dh +
cmp [ecx] dx +
jnz loc_100760B  +
mov edx [ecx+3Ch] +
test edx edx +
jl loc_100760B  +
cmp edx 10000000h +
jnb loc_100760B  +
lea eax [edx+ecx] +
mov [ebp-1Ch] eax +
cmp dword ptr [eax] 4550h +
jnz loc_1009608  +
mov dword ptr [ebp-4] 0FFFFFFFEh +
call sub_100763C  +
retn 4  +
***
mov ecx [ebp-10h] +
mov large fs:0 ecx +
pop ecx  +
pop edi  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
push ecx  +
retn   +
***
call sub_1007664  +
jmp sub_1001B99  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov eax dword_1017000 +
and [ebp+SystemTimeAsFileTime.dwLowDateTime] 0 +
and [ebp+SystemTimeAsFileTime.dwHighDateTime] 0 +
push ebx  +
push edi  +
mov edi 0BB40E64Eh +
mov ebx 0FFFF0000h +
cmp eax edi +
jnz loc_1009617  +
push esi  +
lea eax [ebp+SystemTimeAsFileTime] +
push eax  +
call ds:GetSystemTimeAsFileTime  +
mov esi [ebp+SystemTimeAsFileTime.dwHighDateTime] +
xor esi [ebp+SystemTimeAsFileTime.dwLowDateTime] +
call ds:GetCurrentProcessId  +
xor esi eax +
call ds:GetCurrentThreadId  +
xor esi eax +
call ds:GetTickCount  +
xor esi eax +
lea eax [ebp+PerformanceCount] +
push eax  +
call ds:QueryPerformanceCounter  +
mov eax dword ptr [ebp+PerformanceCount+4] +
xor eax dword ptr [ebp+PerformanceCount] +
xor esi eax +
cmp esi edi +
jz loc_10076E7  +
test dword_1017000 ebx +
jz loc_10076E7  +
mov dword_1017000 esi +
not esi  +
mov dword_1017004 esi +
pop esi  +
pop edi  +
pop ebx  +
leave   +
retn   +
mov esi 0BB40E64Fh +
jmp loc_10076D4  +
***
call sub_1007705  +
mov dword_1017024 eax +
xor eax eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
xor eax eax +
push ebx  +
mov [ebp+var_4] eax +
mov [ebp+var_C] eax +
mov [ebp+var_8] eax +
push ebx  +
pushf   +
pop eax  +
mov ecx eax +
xor eax 200000h +
push eax  +
popf   +
pushf   +
pop edx  +
sub edx ecx +
jz loc_100774A  +
push ecx  +
popf   +
xor eax eax +
cpuid   +
mov [ebp+var_C] eax +
mov [ebp+var_18] ebx +
mov [ebp+var_14] edx +
mov [ebp+var_10] ecx +
mov eax 1 +
cpuid   +
mov [ebp+var_4] edx +
mov [ebp+var_8] eax +
pop ebx  +
test [ebp+var_4] 4000000h +
jz loc_1007773  +
call sub_100777C  +
test eax eax +
jz loc_1007773  +
call ds:GetVersion  +
and eax 0FFh +
cmp eax 6 +
jb loc_1007773  +
xor eax eax +
inc eax  +
pop ebx  +
leave   +
retn   +
xor eax eax +
jmp loc_1007770  +
***
call sub_10077C4  +
and dword ptr [ebp-4] 0 +
movapd xmm0 xmm1 +
mov dword ptr [ebp-1Ch] 1 +
mov dword ptr [ebp-4] 0FFFFFFFEh +
mov eax [ebp-1Ch] +
call sub_100763C  +
retn   +
***
mov eax [esp+8+arg_4] +
mov [esp+8+arg_4] ebp +
lea ebp [esp+8+arg_4] +
sub esp eax +
push ebx  +
push esi  +
push edi  +
mov eax dword_1017000 +
xor [ebp-4] eax +
xor eax ebp +
push eax  +
mov [ebp-18h] esp +
push dword ptr [ebp-8]  +
mov eax [ebp-4] +
mov dword ptr [ebp-4] 0FFFFFFFEh +
mov [ebp-8] eax +
lea eax [ebp-10h] +
mov large fs:0 eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
xor esi esi +
cmp edi esi +
jz loc_1007974  +
push 14h  +
mov [edi] esi +
mov [edi+4] esi +
mov [edi+8] esi +
call [ebp+arg_8]  +
mov ebx eax +
pop ecx  +
cmp ebx esi +
jz loc_1009662  +
mov eax [ebp+arg_30] +
mov edi [ebp+arg_C] +
push eax  +
mov [ebx] esi +
mov esi [ebp+arg_2C] +
mov [ebx+10h] eax +
mov [ebx+0Ch] edi +
mov eax [esi+10h] +
add eax 8 +
push eax  +
push [ebp+arg_28]  +
push [ebp+arg_24]  +
push [ebp+arg_20]  +
push [ebp+arg_1C]  +
push [ebp+arg_18]  +
push [ebp+arg_14]  +
push [ebp+arg_10]  +
push edi  +
push [ebp+arg_8]  +
push [ebp+arg_0]  +
call sub_1003F1F  +
mov [ebx+4] eax +
test eax eax +
jz loc_1007969  +
push [ebp+arg_30]  +
mov ecx [esi+1Ch] +
push [ebp+arg_28]  +
mov [eax+258h] ecx +
push [ebp+arg_24]  +
push [ebp+arg_20]  +
push [ebp+arg_1C]  +
push [ebp+arg_18]  +
push [ebp+arg_14]  +
push [ebp+arg_10]  +
push edi  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push 0  +
call sub_100797D  +
mov [ebx] eax +
test eax eax +
jz loc_1007969  +
lea edi [eax+34Ch] +
mov eax [ebp+arg_2C] +
mov ecx 0C9h +
movs   +
mov ecx [ebx] +
mov dx [eax+20h] +
mov [ecx+0ADAh] dx +
mov ecx [ebx] +
xor edx edx +
mov [ecx+0ADCh] dx +
mov edx [eax+8] +
cmp edx 0EA60h +
ja loc_1007969  +
mov edi [eax+0Ch] +
mov ecx 0FFh +
cmp edi ecx +
ja loc_1007969  +
mov esi [eax+10h] +
cmp esi ecx +
ja loc_1007969  +
test edx edx +
ja loc_1009670  +
test edi edi +
ja loc_1009670  +
test esi esi +
ja loc_1009670  +
mov ecx [ebx] +
and dword ptr [ecx+0AC8h] 0 +
mov ecx [ebx] +
mov edx [ecx+0AC8h] +
add edx 24h +
mov [ecx+0ACCh] edx +
mov ecx [eax+0Ch] +
mov edx [ebx] +
add ecx 8 +
mov [edx+0AD0h] ecx +
mov eax [eax+10h] +
mov ecx [ebx] +
add eax 8 +
mov [ecx+0AD4h] eax +
mov eax [ebx] +
add eax 34Ch +
cmp dword ptr [eax] 0 +
jnz loc_1007962  +
mov dword ptr [eax] 7FFFFFFFh +
mov eax ebx +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
push ebx  +
call sub_1003386  +
jmp loc_1009680  +
xor eax eax +
jmp loc_1007964  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_C] +
push 11E8h  +
call edi  +
mov esi eax +
xor ebx ebx +
pop ecx  +
cmp esi ebx +
jz sub_1009A69  +
push [ebp+arg_30]  +
mov eax [ebp+arg_4] +
mov edx [ebp+arg_18] +
mov ecx [ebp+arg_8] +
mov [esi+0Ch] edi +
mov edi [ebp+arg_24] +
push eax  +
mov [esi+24h] edi +
mov edi [ebp+arg_28] +
mov [esi+28h] edi +
mov edi [ebp+arg_2C] +
push edi  +
push [ebp+arg_28]  +
mov [esi+18h] edx +
mov edx [ebp+arg_1C] +
mov [esi+4] ecx +
mov ecx [ebp+arg_10] +
mov [esi+1Ch] edx +
mov edx [ebp+arg_20] +
push edx  +
mov [esi+10h] ecx +
mov ecx [ebp+arg_14] +
push ecx  +
mov [esi+2Ch] eax +
push 3  +
lea eax [esi+34h] +
push eax  +
mov [esi+14h] ecx +
mov [esi+20h] edx +
mov [esi+8] edi +
mov [esi+0BDFh] bl +
mov [esi+0CE0h] bl +
mov [esi+0DE1h] bl +
mov [esi+0EE2h] bl +
mov [esi+0FE3h] bl +
mov [esi+10E4h] bl +
call sub_100140F  +
test eax eax +
jz loc_1009A7B  +
lea eax [esi+994h] +
push eax  +
call sub_10015BB  +
xor eax eax +
mov [esi+0AD8h] ax +
mov [esi+30h] ebx +
mov eax esi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 34h  +
***
lea eax [esi+4] +
push eax  +
lea edi [esi+24Ch] +
push edi  +
push dword ptr [esi+0Ch]  +
push dword ptr [esi+8]  +
push ebx  +
call sub_1007A9B  +
add esp 14h +
test eax eax +
jnz loc_1009853  +
push dword ptr [edi]  +
call dword ptr [esi+8]  +
pop ecx  +
mov [esi+264h] eax +
test eax eax +
jz loc_1009866  +
push dword ptr [ebx]  +
call dword ptr [esi+8]  +
pop ecx  +
mov [esi+260h] eax +
test eax eax +
jnz loc_1002822  +
jmp loc_1009866  +
lea edi [esi+24Ch] +
mov [edi] edx +
jmp loc_1007A5F  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_10] +
and dword ptr [eax] 0 +
push ebx  +
mov ebx [ebp+arg_0] +
mov eax [ebx] +
push esi  +
push edi  +
mov edi 8000h +
test eax eax +
jz loc_1007B7B  +
cmp eax edi +
ja loc_1007B7B  +
push 28h  +
call [ebp+arg_4]  +
mov esi eax +
pop ecx  +
test esi esi +
jz loc_1007B8D  +
push [ebp+arg_4]  +
call sub_1007BC2  +
mov [esi+24h] eax +
test eax eax +
jz loc_100A1BC  +
mov eax [ebp+arg_8] +
mov ecx [ebp+arg_C] +
mov [esi+4] eax +
mov dword ptr [esi] 4349434Dh +
mov byte ptr [esi+20h] 0 +
mov eax [ebx] +
mov [esi+8] eax +
mov eax [ebx] +
mov ebx [ebp+arg_4] +
add eax 0Ch +
push edi  +
mov [ecx] eax +
call ebx  +
push edi  +
mov [esi+0Ch] eax +
call ebx  +
mov edi 10000h +
push edi  +
mov [esi+10h] eax +
call ebx  +
push edi  +
mov [esi+14h] eax +
call ebx  +
push 10122h  +
mov [esi+18h] eax +
call ebx  +
xor ecx ecx +
add esp 14h +
mov [esi+1Ch] eax +
cmp [esi+0Ch] ecx +
jz loc_1007B82  +
cmp [esi+10h] ecx +
jz loc_1007B82  +
cmp [esi+14h] ecx +
jz loc_1007B82  +
cmp [esi+18h] ecx +
jz loc_1007B82  +
cmp eax ecx +
jz loc_1007B82  +
push 122h  +
push ecx  +
add eax edi +
push eax  +
call memset  +
add esp 0Ch +
push dword ptr [esi+10h]  +
push dword ptr [esi+0Ch]  +
push dword ptr [esi+24h]  +
call sub_1007B97  +
test eax eax +
jnz loc_1007B82  +
mov eax [ebp+arg_10] +
mov [eax] esi +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
mov [ebx] edi +
jmp loc_1007AC3  +
push esi  +
call sub_1003497  +
jmp loc_100A1C0  +
xor eax eax +
inc eax  +
jmp loc_1007B76  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
mov eax [ebp+arg_0] +
mov edx [ebp+arg_8] +
mov [eax] ecx +
mov [eax+8] edx +
test ecx ecx +
jz loc_1007BB8  +
test edx edx +
jz loc_1007BB8  +
xor eax eax +
pop ebp  +
retn 0Ch  +
or eax 0FFFFFFFFh +
jmp loc_1007BB4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov ebx 2F6Ch +
push ebx  +
call [ebp+arg_0]  +
mov esi eax +
xor edi edi +
pop ecx  +
cmp esi edi +
jz loc_1007C8F  +
push ebx  +
push edi  +
push esi  +
call memset  +
lea eax [esi+0B0h] +
mov [esi+5Ch] eax +
add esp 0Ch +
lea eax [esi+0A98h] +
mov [esi+60h] eax +
push 0Fh  +
pop eax  +
lea ecx [esi+9A4h] +
mov [esi+70h] eax +
mov [esi+78h] ecx +
mov [esi+8Ch] eax +
lea ecx [esi+0F18h] +
lea eax [esi+0F90h] +
mov dword ptr [esi+64h] offset dword_1003948 +
mov dword ptr [esi+68h] 101h +
mov dword ptr [esi+6Ch] 11Eh +
mov [esi+74h] edi +
mov [esi+7Ch] ecx +
mov dword ptr [esi+80h] offset dword_1007CE8 +
mov [esi+84h] edi +
mov dword ptr [esi+88h] 1Eh +
mov [esi+90h] edi +
mov [esi+94h] eax +
mov [esi+98h] edi +
mov dword ptr [esi+9Ch] offset dword_1007C98 +
mov [esi+0A0h] edi +
mov dword ptr [esi+0A4h] 13h +
mov dword ptr [esi+0A8h] 7 +
mov [esi+0ACh] edi +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
xor eax eax +
mov [esi+38h] ebx +
jmp loc_1004351  +
***
cmp eax [ebp+var_8] +
jz loc_1007D77  +
inc word ptr [ebx+eax*4+0F90h]  +
inc word ptr [ebx+0FD0h]  +
jmp loc_1004B12  +
***
cmp esi [ebp+var_C] +
jz loc_1007D9E  +
movzx edi word ptr [eax+esi*4+0F92h] +
movzx edx word ptr [eax+esi*4+0F90h] +
call sub_1004256  +
dec ebx  +
movzx edi word ptr [eax+0FD2h] +
movzx edx word ptr [eax+0FD0h] +
call sub_1004256  +
lea edx [ebx-3] +
push 2  +
jmp loc_1004BD1  +
***
mov ecx edi +
sub ecx eax +
lea eax [ecx+esi+0A03h] +
jmp loc_10021E0  +
***
mov [ebp+var_4] eax +
jmp loc_10043A3  +
***
movzx ecx cx +
sub ecx eax +
jmp loc_1007E03  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
mov eax 8000h +
push esi  +
xor esi esi +
mov [ebp+var_4] eax +
mov ecx [edi+18h] +
lea edx [ecx+esi] +
movzx ecx word ptr [edx] +
mov ebx eax +
cmp cx bx +
jnb loc_1007DD3  +
xor ecx ecx +
inc esi  +
inc esi  +
dec [ebp+var_4]  +
mov [edx] cx +
jnz loc_1007DF1  +
xor esi esi +
mov [ebp+var_4] eax +
mov ecx [edi+1Ch] +
lea edx [ecx+esi] +
movzx ecx word ptr [edx] +
mov ebx eax +
cmp cx bx +
jb loc_1007E35  +
movzx ecx cx +
sub ecx eax +
inc esi  +
inc esi  +
dec [ebp+var_4]  +
mov [edx] cx +
jnz loc_1007E12  +
pop esi  +
pop ebx  +
leave   +
retn   +
xor ecx ecx +
jmp loc_1007E27  +
***
push 6  +
pop edx  +
jmp loc_1004B30  +
***
push 6  +
pop edx  +
jmp loc_1004C11  +
***
push edi  +
push edi  +
mov ebp edx +
push ebx  +
push edx  +
mov ebx offset unk_1017E08 +
retn   +
***
push offset aSS_0  +
call ds:printf  +
add esp 0Ch +
xor edi edi +
jmp loc_10021FC  +
***
push offset aTrue  +
push esi  +
call ebx  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1005242  +
push esi  +
push offset aS_2  +
push offset aInvalidBoolean  +
push [ebp+arg_4]  +
call sub_1006F95  +
add esp 10h +
or eax 0FFFFFFFFh +
jmp loc_1005245  +
***
push [ebp+arg_0]  +
push edi  +
push ebx  +
push offset dword_100A5E8  +
push offset aChecksumWidthN  +
push [ebp+arg_4]  +
call sub_1006F95  +
add esp 18h +
or eax 0FFFFFFFFh +
jmp loc_1006917  +
***
push offset dword_10080D8  +
push [ebp+arg_0]  +
call esi  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_1008095  +
push 3  +
pop eax  +
jmp loc_100697B  +
push [ebp+arg_0]  +
push offset aS_2  +
push offset aInvalidCompres  +
push [ebp+arg_4]  +
call sub_1006F95  +
add esp 10h +
or eax 0FFFFFFFFh +
jmp loc_100697B  +
***
push [ebp+arg_0]  +
push edi  +
push ebx  +
push offset dword_100A5E8  +
push offset aCompressionLev  +
push [ebp+arg_4]  +
call sub_1006F95  +
add esp 18h +
or eax 0FFFFFFFFh +
jmp loc_1006A02  +
***
push [ebp+arg_0]  +
push ebx  +
push (offset loc_1006AAA+2)  +
push offset dword_100A5E8  +
jmp loc_1008163  +
push ecx  +
call sub_100B13C  +
cmp esi eax +
jg loc_1008159  +
cmp eax edi +
jg loc_1008159  +
xor ecx ecx +
jmp loc_100814F  +
inc ecx  +
sar eax 1 +
jz loc_1006A92  +
jmp loc_100814E  +
push [ebp+arg_0]  +
push edi  +
push esi  +
push offset dword_100A5F0  +
push offset aCompressionMem  +
push [ebp+arg_4]  +
call sub_1006F95  +
add esp 18h +
or eax 0FFFFFFFFh +
jmp loc_1006A94  +
***
or eax 0FFFFFFFFh +
jmp locret_1006B86  +
***
mov esi [ebp+arg_0] +
push ebx  +
push 800h  +
add esi 1B4h +
push esi  +
call sub_1002515  +
imul edi edi +
push esi  +
push off_1017360[edi]  +
push offset dword_100A5F8  +
push offset aFailureCreatin  +
push ebx  +
call sub_1006F95  +
add esp 14h +
xor eax eax +
jmp loc_1005557  +
***
xor eax eax +
jmp loc_100567A  +
***
xor eax eax +
jmp loc_10068CA  +
***
xor eax eax +
jmp loc_1006951  +
***
xor eax eax +
jmp loc_10069B5  +
***
xor eax eax +
jmp loc_1006A41  +
***
push offset dword_1008254  +
push [ebp+arg_C]  +
call esi  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1006AD4  +
xor eax eax +
jmp loc_1006AE5  +
***
push [ebp+arg_4]  +
push offset dword_100A5F8  +
push offset aValueOfVariabl  +
push [ebp+arg_14]  +
call sub_1006F95  +
add esp 14h +
xor eax eax +
jmp loc_1003A32  +
***
pop ebp  +
jmp sub_10039F4  +
***
pop ebp  +
jmp sub_10039F4  +
***
push edi  +
push offset aS_2  +
push offset aSectionOrderTo  +
push dword ptr [ebp+1Ch]  +
call sub_1006F95  +
add esp 10h +
xor eax eax +
jmp loc_10051AD  +
***
movsx eax byte ptr [esi] +
push edi  +
push eax  +
push offset dword_100A4EC  +
push offset aBadSectionOrde  +
jmp loc_10082F5  +
movsx eax byte ptr [esi] +
push edi  +
push eax  +
push offset dword_100A4EC  +
push offset aDuplicateSecti  +
push dword ptr [ebp+1Ch]  +
call sub_1006F95  +
add esp 14h +
xor eax eax +
jmp loc_10051AB  +
***
pop ebp  +
jmp sub_10039F4  +
***
xor eax eax +
retn   +
***
push offset a0  +
call ebx  +
pop ecx  +
jmp loc_1006280  +
push offset a0  +
call ebx  +
pop ecx  +
jmp loc_10062A4  +
push offset a0  +
call ebx  +
pop ecx  +
jmp loc_10062C5  +
***
push dword ptr [eax+8Ch]  +
call sub_10060B6  +
test byte ptr [eax+18h] 4 +
mov ecx [ebp+arg_0] +
jz loc_10083CC  +
mov dx [eax+1Ch] +
mov [ecx] dx +
jmp loc_10083D3  +
mov dx [ecx] +
mov [eax+1Ch] dx +
test byte ptr [eax+18h] 8 +
jz loc_10083E3  +
mov dx [eax+1Eh] +
mov [ecx+2] dx +
jmp loc_10083EB  +
mov dx [ecx+2] +
mov [eax+1Eh] dx +
test byte ptr [eax+18h] 10h +
jz loc_10083FE  +
mov ax [eax+20h] +
mov [ecx+4] ax +
jmp loc_1006DE4  +
mov cx [ecx+4] +
mov [eax+20h] cx +
jmp loc_1006DE4  +
***
mov edi [esi+34h] +
push edi  +
push [ebp+arg_8]  +
call sub_100C10F  +
push edi  +
push [ebp+arg_4]  +
mov ebx eax +
call sub_100C10F  +
sub eax ebx +
add [esi+20h] eax +
mov eax ebx +
jmp loc_1002189  +
fadd  ds:flt_100A704 +
jmp loc_100214B  +
fadd  ds:flt_100A704 +
jmp loc_1002159  +
fadd  ds:flt_100A704 +
jmp loc_1003AD1  +
fadd  ds:flt_100A704 +
jmp loc_1003ADF  +
push edx  +
push ecx  +
push ecx  +
push ecx  +
fstp  [esp+1Ch+var_20+4] +
push offset dword_10084A0  +
push offset a1Raw2Compresse  +
push 800h  +
push edi  +
call sub_1001711  +
add esp 20h +
push 1  +
jmp loc_100217F  +
***
mov [ebp+8] eax +
jmp loc_10011A6  +
***
mov [ebp+dwDesiredAccess] 40000000h +
jmp loc_10011EF  +
mov [ebp+dwFlagsAndAttributes] 10000080h +
jmp loc_10011FF  +
mov [ebp+dwFlagsAndAttributes] 8000080h +
jmp loc_10011FF  +
or [ebp+dwFlagsAndAttributes] 4000000h +
jmp loc_1001225  +
or [ebp+dwFlagsAndAttributes] ecx +
jmp loc_1001230  +
push 0  +
mov [ebp+dwMilliseconds] 19h +
call ds:time  +
mov [ebp+var_1C] eax +
add eax 46h +
pop ecx  +
mov [ebp+var_24] eax +
push [ebp+lpFileName]  +
lea eax [ebp+var_1C] +
push [ebp+var_18]  +
push eax  +
call ds:ctime  +
pop ecx  +
push eax  +
push offset a_19sFileOpenEr  +
call ds:printf  +
add esp 10h +
push [ebp+dwMilliseconds]  +
call ds:Sleep  +
mov eax [ebp+dwMilliseconds] +
add eax eax +
mov ecx 1388h +
mov [ebp+dwMilliseconds] eax +
cmp eax ecx +
jb loc_1008544  +
mov [ebp+dwMilliseconds] ecx +
push 0  +
push [ebp+dwFlagsAndAttributes]  +
push esi  +
push 0  +
push [ebp+dwShareMode]  +
push [ebp+dwDesiredAccess]  +
push [ebp+lpFileName]  +
call edi  +
mov [ebp+hObject] eax +
call ebx  +
push 0  +
mov [ebp+var_18] eax +
call ds:time  +
cmp [ebp+hObject] 0FFFFFFFFh +
pop ecx  +
mov [ebp+var_1C] eax +
jnz loc_1001261  +
cmp eax [ebp+var_24] +
jl loc_1008507  +
mov eax [ebp+arg_C] +
mov ecx [ebp+var_18] +
mov [eax] ecx +
jmp loc_1001281  +
call ds:__imp__errno  +
mov eax [eax] +
mov ecx [ebp+arg_C] +
push eax  +
push [ebp+lpFileName]  +
mov [ecx] eax +
push offset a_open_osfhandl  +
call ds:printf  +
add esp 0Ch +
push [ebp+hObject]  +
call ds:CloseHandle  +
jmp loc_1001281  +
***
call ds:__imp__errno  +
mov eax [eax] +
mov ecx [ebp+14h] +
mov [ecx] eax +
jmp loc_10012B1  +
***
call ds:__imp__errno  +
mov eax [eax] +
mov ecx [ebp+0Ch] +
mov [ecx] eax +
jmp loc_10012D5  +
***
call ds:__imp__errno  +
mov eax [eax] +
mov ecx [ebp+14h] +
mov [ecx] eax +
jmp loc_1001302  +
***
call ds:__imp__errno  +
mov eax [eax] +
mov ecx [ebp+0Ch] +
mov [ecx] eax +
jmp loc_10028FA  +
***
xor eax eax +
jmp loc_1006C51  +
***
push [ebp+var_4]  +
call sub_1003E27  +
cmp off_1017C30 0 +
mov edi eax +
mov ebx offset off_1017C30 +
jz loc_10086D1  +
mov ecx [ebx] +
mov eax ecx +
lea esi [eax+1] +
mov dl [eax] +
inc eax  +
test dl dl +
jnz loc_1008682  +
sub eax esi +
lea esi [eax-1] +
push esi  +
push ecx  +
push edi  +
call ds:_strnicmp  +
add esp 0Ch +
test eax eax +
jz loc_10086A8  +
add ebx 4 +
cmp dword ptr [ebx] 0 +
jz loc_10086D1  +
jmp loc_100867B  +
add esi edi +
jmp loc_10086BC  +
movzx eax al +
push eax  +
call ds:isdigit  +
pop ecx  +
test eax eax +
jz loc_10086C2  +
inc esi  +
mov al [esi] +
test al al +
jnz loc_10086AC  +
xor eax eax +
cmp [esi] al +
setz al  +
test eax eax +
jnz loc_1006D00  +
push 3  +
push offset aInf  +
push edi  +
call ds:_strnicmp  +
add esp 0Ch +
test eax eax +
jnz loc_1008711  +
lea ebx [edi+3] +
mov esi offset off_1017C68 +
cmp off_1017C68 eax +
jz loc_1008711  +
push dword ptr [esi]  +
push ebx  +
call ds:_stricmp  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1006D00  +
add esi 4 +
cmp dword ptr [esi] 0 +
jnz loc_10086F6  +
push edi  +
push offset aExplicit  +
push offset aOption  +
push offset dword_100A5E8  +
push offset a12AndVariableN  +
push [ebp+arg_4]  +
call sub_1006F95  +
add esp 18h +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_100C27E  +
push [ebp+arg_4]  +
call sub_100683B  +
and [ebp+var_8] 0 +
jmp loc_1006D00  +
***
lea eax [esi+0B4h] +
jmp loc_1008781  +
cmp cl 7Fh +
ja loc_100878D  +
inc eax  +
mov cl [eax] +
test cl cl +
jz loc_1006D87  +
jmp loc_100877B  +
***
mov eax 80h +
or [ebp-4] ax +
jmp loc_1006D87  +
***
push dword ptr [ebp+8]  +
push offset aS_2  +
push offset aCouldNotOpenFi  +
push dword ptr [ebp+1Ch]  +
call sub_1006F95  +
add esp 10h +
jmp loc_1006DC8  +
***
cmp dword ptr [ebp+14h] 0 +
push ebx  +
lea eax [esi+22h] +
push eax  +
push dword ptr [esi+14h]  +
lea eax [esi+122h] +
push eax  +
push dword ptr [ebp+0Ch]  +
lea ebx [edi+1B4h] +
push offset dword_1008898  +
jz loc_10087E2  +
push offset a1PlacedInCabin  +
jmp loc_10087E7  +
push offset a1PlacedInCab_0  +
push 800h  +
push ebx  +
call sub_1001711  +
add esp 20h +
push 1  +
push ebx  +
push edi  +
call sub_10021B4  +
pop ebx  +
jmp loc_1002923  +
***
cmp dword ptr [ebp+14h] 0 +
jnz loc_100292D  +
push dword ptr [ebp+18h]  +
push dword ptr [esi+14h]  +
push dword ptr [esi+18h]  +
push dword ptr [ebp+0Ch]  +
push edi  +
call sub_100C5D5  +
test eax eax +
jnz loc_100292D  +
or eax 0FFFFFFFFh +
jmp loc_100292F  +
***
call ds:free  +
pop ecx  +
jmp loc_1002507  +
***
push edi  +
push [ebp+lpCurrentChar]  +
lea eax [ebp+var_104] +
push ebx  +
push eax  +
push esi  +
call sub_1006E75  +
test eax eax +
jz loc_1002105  +
lea eax [ebp+var_104] +
jmp loc_1001F46  +
lea eax [esi+48h] +
push eax  +
push offset aFcicreate  +
push esi  +
push edi  +
call sub_100D49E  +
jmp loc_1002105  +
mov eax [esi+0C08h] +
cmp dword ptr [eax+200h] 0 +
jnz loc_1002105  +
lea eax [esi+48h] +
push eax  +
push offset aFciaddfile  +
jmp loc_10088DE  +
mov eax [esi+0C08h] +
cmp dword ptr [eax+200h] 0 +
jnz loc_1002105  +
lea eax [esi+48h] +
push eax  +
push offset aFciflushcabine  +
jmp loc_10088DE  +
lea eax [esi+48h] +
push eax  +
push offset aFcidestroy  +
jmp loc_10088DE  +
***
push [ebp+arg_C]  +
push eax  +
push [ebp+arg_0]  +
call sub_1006C0E  +
test eax eax +
jz loc_1005488  +
and [ebp+var_C] 0 +
jmp loc_1005415  +
push [ebp+arg_C]  +
push eax  +
push [ebp+arg_0]  +
call sub_100D458  +
test eax eax +
jz loc_1005488  +
and [ebp+var_8] 0 +
jmp loc_1005415  +
mov esi [ebp+arg_0] +
push eax  +
push 100h  +
add esi 0B04h +
push esi  +
call sub_1002515  +
test eax eax +
jl loc_1008A84  +
push [ebp+arg_C]  +
push 0  +
push esi  +
call sub_100E434  +
test eax eax +
jz loc_1005488  +
and [ebp+var_10] 0 +
jmp loc_1005415  +
xor ecx ecx +
cmp [ebp+var_8] ecx +
jnz loc_1008AB1  +
cmp [ebp+var_C] ecx +
jnz loc_1008AC5  +
cmp [ebp+var_10] ecx +
jnz loc_1008ACC  +
movsx eax byte ptr [eax+1] +
push eax  +
call ds:toupper  +
sub eax 3Fh +
pop ecx  +
jz loc_1008AE7  +
sub eax 5 +
jz loc_1008A64  +
dec eax  +
dec eax  +
jz loc_1008A35  +
sub eax 6 +
jz loc_1008A1D  +
sub eax 0Ah +
jnz loc_1008AD3  +
mov esi [esi] +
lea eax [esi+2] +
cmp byte ptr [eax] 0 +
jz loc_1008A0E  +
push eax  +
call ds:atoi  +
pop ecx  +
mov ecx [ebp+arg_0] +
mov [ecx+40h] eax +
jmp loc_1005415  +
mov eax [ebp+arg_0] +
mov dword ptr [eax+40h] 3 +
jmp loc_1005415  +
mov eax [esi] +
cmp byte ptr [eax+2] 0 +
jnz loc_1008AD3  +
mov [ebp+var_10] 1 +
jmp loc_1005415  +
mov eax [esi] +
cmp byte ptr [eax+2] 0 +
jnz loc_1008AD3  +
cmp [ebp+var_4] 0 +
jz loc_1008A51  +
cmp [ebp+var_4] 3 +
jnz loc_1008AD8  +
mov [ebp+var_4] 3 +
mov [ebp+var_C] 1 +
jmp loc_1005415  +
mov eax [esi] +
cmp byte ptr [eax+2] 0 +
jnz loc_1008AD3  +
cmp [ebp+var_4] 0 +
jz loc_1008A78  +
cmp [ebp+var_4] 3 +
jnz loc_1008AD8  +
mov [ebp+var_8] 1 +
jmp loc_1005415  +
push dword ptr [ebx+edi*4]  +
push offset aS_2  +
push offset aLocationTooLon  +
jmp loc_1008AFB  +
push dword ptr [ebx+edi*4]  +
push offset aS_2  +
push offset aInvalidParamet  +
jmp loc_1008AFB  +
push dword ptr [ebx+edi*4]  +
push offset aS_2  +
push offset aTooManyParamet  +
jmp loc_1008AFB  +
push offset aVariableDefini  +
push [ebp+arg_C]  +
call sub_1006F95  +
pop ecx  +
pop ecx  +
jmp loc_1005488  +
push offset aDirectiveFileN  +
jmp loc_1008AB6  +
push offset aLocationMissin  +
jmp loc_1008AB6  +
push dword ptr [ebx+edi*4]  +
jmp loc_1008AF1  +
push dword ptr [ebx+edi*4]  +
push offset aS_2  +
push offset aSwitchNotExpec  +
jmp loc_1008AFB  +
mov edi [ebx+edi*4] +
cmp byte ptr [edi+2] 0 +
jz loc_1008B0B  +
push edi  +
push offset aS_2  +
push offset aInvalidSwitch1  +
push [ebp+arg_C]  +
call sub_1006F95  +
add esp 10h +
jmp loc_1005488  +
mov ecx [ebp+arg_0] +
xor eax eax +
inc eax  +
mov [ecx] eax +
jmp loc_1005481  +
push 3  +
pop ecx  +
cmp eax ecx +
jnz loc_100547E  +
mov eax [ebp+arg_0] +
mov [eax] ecx +
jmp loc_100547E  +
***
lea eax [ebp+var_21C] +
push offset aCouldNotAlloca  +
push eax  +
call sub_1006F95  +
pop ecx  +
pop ecx  +
lea eax [ebp+var_21C] +
push eax  +
push ebx  +
call sub_100C27E  +
push 1  +
call ds:exit  +
lea eax [ebp+var_21C] +
push eax  +
push esi  +
call sub_100C27E  +
jmp loc_1001EAD  +
push offset aMakecabVNDVarV  +
call edi  +
xor eax eax +
jmp loc_1001E9D  +
dec eax  +
jnz loc_1001E54  +
lea eax [ebp+var_21C] +
push eax  +
push esi  +
call sub_100DE0A  +
jmp loc_1001E4C  +
push eax  +
call sub_100F701  +
jmp loc_1001E80  +
***
push [ebp+arg_8]  +
call edi  +
pop ecx  +
mov [esi+4] eax +
cmp eax ebx +
jnz loc_1006C9E  +
mov eax [esi] +
mov edi ds:free +
cmp eax ebx +
jz loc_1008F54  +
push eax  +
call edi  +
pop ecx  +
mov eax [esi+4] +
cmp eax ebx +
jz loc_1008F5F  +
push eax  +
call edi  +
pop ecx  +
push esi  +
call edi  +
pop ecx  +
push offset dword_1008F84  +
push offset aS_2  +
push offset aOutOfMemory1  +
push [ebp+arg_C]  +
call sub_1006F95  +
add esp 10h +
xor eax eax +
jmp loc_1006CBA  +
***
push offset aCreatingFileLi  +
push offset aS_2  +
push offset aOutOfMemory1  +
push [ebp+arg_0]  +
call sub_1006F95  +
add esp 10h +
xor eax eax +
jmp loc_1003C08  +
***
push offset aChangingDestin  +
push offset aS_2  +
push offset aOutOfMemory1  +
push [ebp+arg_8]  +
call sub_1006F95  +
add esp 10h +
xor eax eax +
jmp loc_10054C9  +
push edi  +
call ds:free  +
pop ecx  +
jmp loc_10054C6  +
***
mov [ecx] edi +
jmp loc_100258F  +
***
push [ebp+arg_0]  +
push offset aS_2  +
push offset aCouldNotFindFi  +
push [ebp+arg_4]  +
call sub_1006F95  +
add esp 10h +
or eax 0FFFFFFFFh +
jmp locret_1003C41  +
push [ebp+arg_0]  +
push offset aS_2  +
push offset a1IsNotAFile  +
jmp loc_1009021  +
***
push esi  +
push offset aS_2  +
push offset aMissingFileNam  +
push [ebp+arg_4]  +
call sub_1006F95  +
add esp 10h +
xor eax eax +
jmp loc_1003C4F  +
***
xor eax eax +
jmp loc_1006E6C  +
***
mov [esi+edi] bl +
jmp loc_1001351  +
***
test edi edi +
jz loc_1001396  +
and dword ptr [edi] 0 +
jmp loc_1001396  +
***
push [ebp+arg_8]  +
mov eax [ebp+arg_4] +
dec eax  +
push eax  +
push edi  +
call sub_1002515  +
test eax eax +
jge loc_10090F6  +
push [ebp+arg_8]  +
push offset aS_2  +
push offset aFileNameTooLon  +
push [ebp+arg_14]  +
call sub_1006F95  +
add esp 10h +
xor eax eax +
jmp loc_1003C9F  +
lea eax [esi+edi-1] +
push eax  +
call sub_100E392  +
jmp loc_1003C7E  +
mov eax [ebp+lpCurrentChar] +
test eax eax +
jz loc_1003C9C  +
cmp byte ptr [eax] 0 +
jz loc_1003C9C  +
push [ebp+arg_14]  +
push eax  +
call sub_1005104  +
mov esi eax +
test esi esi +
jnz loc_1003C8A  +
jmp loc_10090EF  +
push esi  +
jmp loc_10090DA  +
***
push [ebp+lpFileName]  +
push offset aS_2  +
push offset aCannotGetDateT  +
push [ebp+arg_8]  +
call sub_1006F95  +
add esp 10h +
xor eax eax +
jmp loc_1006E4F  +
***
push esi  +
push edi  +
call ds:strspn  +
mov esi [ebp+var_1C] +
pop ecx  +
sub edi ebx +
pop ecx  +
mov [ebp+var_24] eax +
sub edi esi +
jmp loc_10074A0  +
lea eax [edi-1] +
cdq   +
push 3  +
pop ecx  +
idiv  ecx +
mov [ebp+var_20] eax +
add eax edi +
cmp eax [ebp+arg_4] +
jg loc_10074A9  +
lea eax [edi+esi] +
cmp eax 14h +
jnb loc_10074A9  +
push edi  +
lea eax [ebx+esi] +
push eax  +
lea eax [ebp+var_18] +
push eax  +
call memcpy  +
add esp 0Ch +
test esi esi +
jle loc_10091DD  +
cmp esi [ebp+var_20] +
jl loc_10091DD  +
sub ebx [ebp+var_20] +
add ebx esi +
mov eax edi +
push 3  +
cdq   +
pop ecx  +
idiv  ecx +
mov esi edx +
test esi esi +
jnz loc_10091ED  +
push ecx  +
pop esi  +
push esi  +
lea eax [ebp+var_18] +
push eax  +
push ebx  +
call memcpy  +
sub edi esi +
add esp 0Ch +
add ebx esi +
lea ecx [ebp+esi+var_18] +
test edi edi +
jle loc_1009226  +
push 3  +
xor edx edx +
lea eax [edi-1] +
pop esi  +
div  esi +
inc eax  +
mov byte ptr [ebx] 2Ch +
inc ebx  +
mov esi ecx +
mov edi ebx +
movs   +
add ebx 3 +
add ecx 3 +
dec eax  +
movs   +
jnz loc_1009212  +
mov eax [ebp+var_24] +
mov ecx [ebp+var_1C] +
add ecx eax +
mov eax [ebp+var_20] +
cmp ecx eax +
jg loc_10074AB  +
mov byte ptr [ebx] 0 +
jmp loc_10074AB  +
***
dec eax  +
dec eax  +
jz loc_1006879  +
sub eax 3 +
jnz loc_1006890  +
jmp loc_1006879  +
***
mov [esi+edi] bl +
jmp loc_1001A01  +
***
mov eax [ebp+arg_4] +
dec eax  +
jmp loc_1001705  +
***
cmp eax 8 +
jz loc_1001883  +
jmp loc_100929E  +
add [ebp+var_228] 4 +
add ebx 4 +
movzx eax word ptr [ebx] +
push eax  +
jmp loc_100188D  +
push offset aInterrFormat_0  +
push [ebp+arg_4]  +
push [ebp+var_234]  +
call sub_1002515  +
jmp loc_1003DAE  +
push offset aInterrFormat_1  +
jmp loc_100928B  +
***
push offset aAttemptingToCr  +
push offset aS_2  +
push offset aOutOfMemory1  +
push [ebp+arg_0]  +
call sub_1006F95  +
add esp 10h +
xor eax eax +
jmp loc_1003E0A  +
***
push [ebp+arg_0]  +
push 20h  +
push offset dword_100A554  +
push offset aVariableNameIs  +
push [ebp+arg_4]  +
call sub_1006F95  +
add esp 14h +
xor eax eax +
jmp loc_1003E5A  +
***
pop ebp  +
retn 0Ch  +
***
push dword ptr [esi]  +
push ecx  +
push offset dword_100A554  +
push offset aVariableValueI  +
push ebx  +
call sub_1006F95  +
add esp 14h +
jmp loc_100509A  +
push dword ptr [esi]  +
mov [esi+4] edi +
mov esi offset aS_2 +
push esi  +
push offset aAttemptingToSe  +
lea eax [ebp+var_304] +
push 200h  +
push eax  +
call sub_1001711  +
lea eax [ebp+var_304] +
push eax  +
push esi  +
push offset aOutOfMemory1  +
push ebx  +
call sub_1006F95  +
add esp 24h +
jmp loc_100509A  +
push edi  +
call ds:free  +
pop ecx  +
jmp loc_1005076  +
***
xor eax eax +
jmp loc_1005630  +
push esi  +
push offset aS_2  +
push offset aInterrVariable  +
push ebx  +
call sub_1006F95  +
add esp 10h +
jmp loc_1009455  +
mov eax [esi] +
mov edi ds:free +
test eax eax +
jz loc_1009482  +
push eax  +
call edi  +
pop ecx  +
mov eax [esi+4] +
test eax eax +
jz loc_100948D  +
push eax  +
call edi  +
pop ecx  +
push esi  +
call edi  +
pop ecx  +
cmp dword ptr [ebx+200h] 0 +
jnz loc_1009455  +
push [ebp+var_208]  +
mov esi offset aS_2 +
push esi  +
push offset aAttemptingTo_0  +
lea eax [ebp+var_204] +
push 200h  +
push eax  +
call sub_1001711  +
lea eax [ebp+var_204] +
push eax  +
push esi  +
push offset aOutOfMemory1  +
push ebx  +
call sub_1006F95  +
add esp 24h +
jmp loc_1009455  +
***
mov eax [ebp-14h] +
mov esp [ebp-18h] +
mov eax [ebp-20h] +
mov dword_1017014 eax +
xor ebx ebx +
cmp dword_1017008 ebx +
jnz loc_10095AA  +
push eax  +
call ds:_exit  +
***
cmp dword_1018218 ebx +
jnz loc_10095B8  +
call ds:_cexit  +
mov dword ptr [ebp-4] 0FFFFFFFEh +
mov eax dword_1017014 +
call sub_100763C  +
retn   +
***
cmp ecx 20Bh +
jnz loc_1007564  +
cmp dword ptr [eax+84h] 0Eh +
jbe loc_1007564  +
xor ecx ecx +
cmp [eax+0F8h] ecx +
jmp loc_1007506  +
***
push offset sub_1003EC0  +
call ds:__setusermatherr  +
pop ecx  +
jmp loc_100755C  +
***
xor eax eax +
inc eax  +
retn   +
***
mov esp [ebp-18h] +
***
xor eax eax +
mov [ebp-1Ch] eax +
jmp loc_100760B  +
***
push 2  +
pop eax  +
pop ebp  +
retn   +
***
mov eax [ebp-14h] +
mov esp [ebp-18h] +
and dword ptr [ebp-1Ch] 0 +
jmp loc_1007797  +
***
xor eax eax +
inc eax  +
jmp loc_1002D2E  +
***
xor eax eax +
jmp loc_10033C8  +
***
push esi  +
push 3  +
push edi  +
call sub_101288B  +
jmp loc_1007974  +
mov ecx [ebx] +
add edx 4 +
mov [ecx+0AC8h] edx +
jmp loc_1007923  +
pop ecx  +
jmp loc_1007974  +
***
push 0  +
push 9  +
push dword ptr [ecx+2Ch]  +
call sub_101288B  +
xor eax eax +
inc eax  +
jmp loc_1003EF7  +
***
push [ebp+var_4]  +
push 4  +
push [ebp+arg_18]  +
call sub_101288B  +
mov esi [ebp+var_C] +
mov edi [ebp+arg_4] +
mov eax [esi] +
cmp eax 0FFFFFFFFh +
jz loc_10096DB  +
push [ebp+arg_1C]  +
and [ebp+var_4] 0 +
lea ecx [ebp+var_4] +
push ecx  +
push eax  +
call [ebp+arg_C]  +
push [ebp+arg_1C]  +
and [ebp+var_4] 0 +
lea eax [ebp+var_4] +
push eax  +
lea eax [esi+4] +
push eax  +
call [ebp+arg_10]  +
add esp 18h +
or dword ptr [esi] 0FFFFFFFFh +
add esi ebx +
dec edi  +
jnz loc_10096AD  +
xor eax eax +
jmp loc_10014B4  +
***
push [ebp+arg_4]  +
push 4  +
push [ebp+arg_10]  +
call sub_101288B  +
xor edi edi +
jmp loc_100343F  +
push [ebp+arg_4]  +
push 4  +
push [ebp+arg_10]  +
call sub_101288B  +
xor edi edi +
jmp loc_1003460  +
***
push dword ptr [esi+2Ch]  +
push dword ptr [esi+2Ch]  +
call sub_101288B  +
mov [ebp-4] ebx +
jmp loc_10014FB  +
***
push 0  +
push 5  +
jmp loc_1009756  +
push 0  +
push 8  +
push dword ptr [esi+2Ch]  +
call sub_101288B  +
xor eax eax +
jmp loc_1002490  +
***
dec eax  +
dec eax  +
jz loc_100976E  +
push edi  +
push 5  +
jmp loc_10097DF  +
lea eax [ebp+arg_0] +
push eax  +
push dword ptr [esi+24Ch]  +
push dword ptr [esi+264h]  +
push dword ptr [esi+254h]  +
push dword ptr [esi+260h]  +
push dword ptr [esi+4]  +
call sub_101294A  +
add esp 18h +
test eax eax +
jnz loc_10097DC  +
mov eax [ebp+arg_4] +
mov ecx [ebp+arg_0] +
mov [eax] ecx +
jmp loc_10052BD  +
mov ecx [esi+24Ch] +
lea eax [esi+254h] +
cmp ecx [eax] +
jb loc_10097DC  +
movzx eax word ptr [eax] +
mov ecx [ebp+arg_4] +
mov [ecx] ax +
movzx eax ax +
push eax  +
push dword ptr [esi+260h]  +
push dword ptr [esi+264h]  +
call memcpy  +
add esp 0Ch +
jmp loc_10052BD  +
push edi  +
push 8  +
push dword ptr [esi+2Ch]  +
call sub_101288B  +
xor eax eax +
jmp loc_10052C0  +
***
push edi  +
push 3  +
push dword ptr [esi+2Ch]  +
call sub_101288B  +
xor eax eax +
jmp loc_1001B89  +
push edi  +
push 7  +
push dword ptr [esi+2Ch]  +
call sub_101288B  +
jmp loc_1001B95  +
***
push edi  +
push 5  +
jmp loc_1009857  +
xor eax eax +
shr ecx 8 +
inc eax  +
and ecx 1Fh +
shl eax cl +
push esi  +
push offset loc_1012751  +
lea edi [esi+24Ch] +
mov [ebp+var_8] eax +
lea eax [esi+4] +
push eax  +
push edi  +
push dword ptr [esi+0Ch]  +
lea eax [ebp+var_8] +
push dword ptr [esi+8]  +
mov [ebp+var_4] 10000h +
push eax  +
push ebx  +
call sub_10128AE  +
add esp 20h +
jmp loc_1007A57  +
push 0  +
push 8  +
push dword ptr [esi+2Ch]  +
call sub_101288B  +
xor eax eax +
jmp loc_1002825  +
push 0  +
push 3  +
push dword ptr [esi+2Ch]  +
call sub_101288B  +
push esi  +
call sub_10014C0  +
jmp loc_100985F  +
***
push 7  +
jmp loc_100994D  +
***
mov eax [esi+254h] +
xor edi edi +
cmp eax edi +
jz loc_10099B6  +
push [ebp+arg_8]  +
push eax  +
push edi  +
push edi  +
call [ebp+arg_4]  +
add esp 10h +
cmp eax 0FFFFFFFFh +
jnz loc_100999E  +
push edi  +
push 7  +
push dword ptr [esi+2Ch]  +
call sub_101288B  +
jmp loc_1002454  +
lea eax [ebp+arg_8] +
push eax  +
push esi  +
call sub_100525F  +
test eax eax +
jz loc_1002454  +
mov [esi+254h] edi +
push dword ptr [esi+4]  +
call sub_10129A3  +
pop ecx  +
push esi  +
mov [esi+240h] edi +
call sub_100245D  +
test eax eax +
jz loc_1002454  +
xor eax eax +
inc eax  +
jmp loc_100244C  +
***
push dword ptr [ebp+8]  +
call sub_101288B  +
xor eax eax +
jmp loc_1003FC2  +
***
push [ebp+arg_2C]  +
push esi  +
call sub_1002986  +
jmp loc_10099F3  +
***
push [ebp+var_4]  +
push 4  +
push dword ptr [edi+2Ch]  +
call sub_101288B  +
jmp loc_10029CB  +
***
push dword ptr [ebp+24h]  +
call sub_101288B  +
xor eax eax +
jmp loc_100325A  +
***
push dword ptr [ebp+0Ch]  +
call sub_101288B  +
xor eax eax +
jmp loc_1007A36  +
***
push esi  +
call dword ptr [esi+10h]  +
pop ecx  +
jmp loc_1009A74  +
***
push [ebp+arg_C]  +
push 4  +
push dword ptr [edi+2Ch]  +
call sub_101288B  +
jmp loc_1003333  +
***
push [ebp+var_108]  +
push 6  +
push dword ptr [esi+2Ch]  +
call sub_101288B  +
jmp loc_1009D34  +
or word ptr [esi+9B2h] 1 +
lea edi [eax+1] +
mov dl [eax] +
inc eax  +
cmp dl bl +
jnz loc_1009AB4  +
sub eax edi +
mov [ebp+var_114] eax +
lea eax [esi+0CE0h] +
lea edi [eax+1] +
mov dl [eax] +
inc eax  +
cmp dl bl +
jnz loc_1009ACC  +
mov edx [ebp+var_114] +
sub eax edi +
add eax edx +
lea eax [ecx+eax+2] +
mov [ebp+var_118] eax +
mov ecx eax +
jmp loc_1002E0A  +
or word ptr [esi+9B2h] 2 +
lea edi [eax+1] +
mov dl [eax] +
inc eax  +
cmp dl bl +
jnz loc_1009AF9  +
sub eax edi +
mov [ebp+var_114] eax +
lea eax [esi+10E4h] +
lea edi [eax+1] +
mov dl [eax] +
inc eax  +
cmp dl bl +
jnz loc_1009B11  +
mov edx [ebp+var_114] +
sub eax edi +
add eax edx +
lea eax [ecx+eax+2] +
mov [ebp+var_118] eax +
mov ecx eax +
jmp loc_1002E18  +
or word ptr [esi+9B2h] 4 +
jmp loc_1002E65  +
push [ebp+var_108]  +
push 6  +
jmp loc_1009CE1  +
mov ax [esi+354h] +
push [ebp+var_10C]  +
lea edi [esi+9C8h] +
mov [edi] ax +
mov al [esi+358h] +
mov [edi+2] al +
mov al [esi+35Ch] +
mov [edi+3] al +
lea eax [ebp+var_108] +
push eax  +
push 4  +
push edi  +
push [ebp+var_110]  +
mov [ebp+var_108] ebx +
call dword ptr [esi+1Ch]  +
add esp 14h +
cmp eax 4 +
jnz loc_1009B40  +
push 100h  +
push ebx  +
push edi  +
call memset  +
mov ax [esi+0AC8h] +
sub ax 4 +
movzx eax ax +
add esp 0Ch +
mov [ebp+var_11C] eax +
cmp ax bx +
jbe loc_1002EC4  +
mov eax 100h +
mov ecx eax +
cmp word ptr [ebp+var_11C] cx +
ja loc_1009BD9  +
movzx eax word ptr [ebp+var_11C] +
push [ebp+var_10C]  +
mov [ebp+var_114] eax +
lea eax [ebp+var_108] +
push eax  +
movzx eax word ptr [ebp+var_114] +
push eax  +
push edi  +
push [ebp+var_110]  +
mov [ebp+var_108] ebx +
call dword ptr [esi+1Ch]  +
mov ecx [ebp+var_114] +
add esp 14h +
cmp cx ax +
jnz loc_1009B40  +
sub [ebp+var_11C] ecx +
cmp word ptr [ebp+var_11C] bx +
jbe loc_1002EC4  +
jmp loc_1009BC2  +
push [ebp+var_10C]  +
lea eax [esi+0BDFh] +
push dword ptr [esi+2Ch]  +
push dword ptr [esi+1Ch]  +
push eax  +
push [ebp+var_110]  +
call sub_1012828  +
test eax eax +
jz loc_100317A  +
push [ebp+var_10C]  +
lea eax [esi+0CE0h] +
push dword ptr [esi+2Ch]  +
push dword ptr [esi+1Ch]  +
push eax  +
push [ebp+var_110]  +
call sub_1012828  +
test eax eax +
jnz loc_1002ED1  +
jmp loc_100317A  +
push [ebp+var_10C]  +
lea eax [esi+0FE3h] +
push dword ptr [esi+2Ch]  +
push dword ptr [esi+1Ch]  +
push eax  +
push [ebp+var_110]  +
call sub_1012828  +
test eax eax +
jz loc_100317A  +
push [ebp+var_10C]  +
lea eax [esi+10E4h] +
push dword ptr [esi+2Ch]  +
push dword ptr [esi+1Ch]  +
push eax  +
push [ebp+var_110]  +
call sub_1012828  +
test eax eax +
jnz loc_1002EDE  +
jmp loc_100317A  +
push [ebp+var_108]  +
push 4  +
jmp loc_1009CE1  +
push dword ptr [esi+2Ch]  +
jmp loc_1009CE4  +
push ebx  +
push 7  +
jmp loc_1009CD7  +
push dword ptr [esi+2Ch]  +
call sub_101288B  +
jmp loc_100317A  +
pop ecx  +
cmp [ebp+var_110] 0FFFFFFFFh +
jz loc_1009D34  +
push [ebp+var_10C]  +
lea eax [ebp+var_108] +
push eax  +
push [ebp+var_110]  +
mov [ebp+var_108] ebx +
call dword ptr [esi+20h]  +
push [ebp+var_10C]  +
lea eax [ebp+var_108] +
push eax  +
lea eax [ebp+var_104] +
push eax  +
mov [ebp+var_108] ebx +
call dword ptr [esi+28h]  +
add esp 18h +
xor eax eax +
jmp loc_1003154  +
***
lea edx [eax+1] +
mov cl [eax] +
inc eax  +
test cl cl +
jnz loc_1009D3E  +
sub eax edx +
mov ecx eax +
lea eax [ebx+0CE0h] +
lea edi [eax+1] +
mov dl [eax] +
inc eax  +
test dl dl +
jnz loc_1009D52  +
sub eax edi +
add eax ecx +
lea esi [esi+eax+2] +
mov [ebp+var_220] esi +
jmp loc_1006406  +
lea edx [eax+1] +
mov cl [eax] +
inc eax  +
test cl cl +
jnz loc_1009D6F  +
sub eax edx +
mov ecx eax +
lea eax [ebx+10E4h] +
lea edi [eax+1] +
mov dl [eax] +
inc eax  +
test dl dl +
jnz loc_1009D83  +
sub eax edi +
add eax ecx +
lea esi [esi+eax+2] +
mov [ebp+var_220] esi +
jmp loc_1006415  +
cmp byte ptr [ebx+0DE1h] 0 +
mov [ebp+var_250] 1 +
jnz loc_1009DDD  +
lea eax [ebx+36Eh] +
push eax  +
mov edi 101h +
push edi  +
lea eax [ebx+0EE2h] +
push eax  +
call sub_1002515  +
lea eax [ebx+46Eh] +
push eax  +
push edi  +
lea eax [ebx+0DE1h] +
push eax  +
call sub_1002515  +
lea eax [ebx+0FE3h] +
cmp byte ptr [eax] 0 +
jz loc_1009E17  +
lea edx [eax+1] +
mov cl [eax] +
inc eax  +
test cl cl +
jnz loc_1009DEB  +
sub eax edx +
mov edx eax +
lea eax [ebx+10E4h] +
lea edi [eax+1] +
mov cl [eax] +
inc eax  +
test cl cl +
jnz loc_1009DFF  +
push 0FFFFFFFEh  +
sub eax edi +
pop ecx  +
sub ecx eax +
sub ecx edx +
add esi ecx +
mov [ebp+var_220] esi +
push [ebp+var_218]  +
lea eax [ebx+670h] +
mov edi eax +
mov ecx 0C9h +
lea esi [ebx+34Ch] +
movs   +
mov ecx [ebp+var_220] +
inc dword ptr [ebx+684h]  +
push ecx  +
push eax  +
mov [ebx+30h] ecx +
call [ebp+var_258]  +
add esp 0Ch +
cmp eax 0FFFFFFFFh +
jz loc_100240A  +
lea edi [ebx+792h] +
push edi  +
mov esi 101h +
push esi  +
lea eax [ebx+0FE3h] +
push eax  +
call sub_1002515  +
lea eax [ebx+692h] +
push eax  +
push esi  +
lea eax [ebx+10E4h] +
push eax  +
call sub_1002515  +
mov eax edi +
lea esi [eax+1] +
mov cl [eax] +
inc eax  +
test cl cl +
jnz loc_1009E87  +
sub eax esi +
mov edi eax +
lea eax [ebx+692h] +
lea esi [eax+1] +
mov cl [eax] +
inc eax  +
test cl cl +
jnz loc_1009E9B  +
sub eax esi +
mov ecx eax +
mov eax [ebx+34Ch] +
sub eax ecx +
sub eax edi +
sub eax [ebp+var_220] +
dec eax  +
dec eax  +
mov [ebp+var_234] eax +
lea eax [ebx+670h] +
cmp dword ptr [eax] 0 +
jnz loc_1006491  +
mov dword ptr [eax] 7FFFFFFFh +
jmp loc_1006491  +
mov ecx [ebx+0AD4h] +
mov edx [ebp+var_24C] +
add edx ecx +
mov ecx [ebp+var_234] +
add ecx eax +
cmp edx ecx +
jnb loc_100A03C  +
sub eax [ebx+0AD4h] +
xor ecx ecx +
sub eax [ebp+var_24C] +
push ecx  +
add eax [ebp+var_234] +
inc word ptr [esi+4]  +
mov esi [ebp+var_230] +
push eax  +
mov [esi+6] cx +
mov [esi+4] ax +
push dword ptr [edi+264h]  +
mov [ebp+var_248] eax +
call sub_1001A27  +
push eax  +
mov eax [ebx+0AD4h] +
sub eax 4 +
push eax  +
lea eax [esi+4] +
push eax  +
call sub_1001A27  +
push [ebp+var_218]  +
mov [esi] eax +
push dword ptr [ebx+2Ch]  +
lea eax [ebx+34h] +
push dword ptr [ebx+1Ch]  +
push dword ptr [ebx+0AD4h]  +
push esi  +
push eax  +
call sub_1002864  +
test eax eax +
jz loc_10023F8  +
push [ebp+var_218]  +
mov edi [ebp+var_248] +
push dword ptr [ebx+2Ch]  +
mov eax [ebp+var_21C] +
push dword ptr [ebx+1Ch]  +
push edi  +
push dword ptr [eax+264h]  +
lea eax [ebx+34h] +
push eax  +
call sub_1002864  +
test eax eax +
jz loc_10023F8  +
push [ebp+var_218]  +
mov esi [ebp+var_220] +
sub [esi] di +
mov eax [ebp+var_21C] +
push dword ptr [eax+2Ch]  +
lea eax [ebp+var_214] +
push dword ptr [ebx+1Ch]  +
push dword ptr [ebx+0AD4h]  +
push [ebp+var_228]  +
push eax  +
call sub_1002864  +
test eax eax +
jz loc_10023F8  +
push [ebp+var_218]  +
mov eax [ebp+var_21C] +
push dword ptr [eax+2Ch]  +
movzx ecx word ptr [esi] +
push dword ptr [ebx+1Ch]  +
mov eax [eax+264h] +
push ecx  +
add eax edi +
push eax  +
lea eax [ebp+var_214] +
push eax  +
call sub_1002864  +
test eax eax +
jz loc_10023F8  +
jmp loc_10022FD  +
cmp [ebp+var_230] 0 +
pop ecx  +
jz loc_100A020  +
push [ebp+var_230]  +
call dword ptr [ebx+10h]  +
pop ecx  +
cmp [ebp+var_22C] 0 +
jz loc_1002406  +
push [ebp+var_22C]  +
call dword ptr [ebx+10h]  +
pop ecx  +
jmp loc_1002406  +
push [ebp+var_218]  +
lea eax [ebp+var_214] +
push dword ptr [edi+2Ch]  +
push dword ptr [ebx+1Ch]  +
push dword ptr [ebx+0AD4h]  +
push [ebp+var_228]  +
push eax  +
call sub_1002864  +
test eax eax +
jz loc_10023F8  +
push [ebp+var_218]  +
mov eax [ebp+var_21C] +
push dword ptr [eax+2Ch]  +
mov ecx [ebp+var_220] +
push dword ptr [ebx+1Ch]  +
movzx ecx word ptr [ecx] +
push ecx  +
push dword ptr [eax+264h]  +
lea eax [ebp+var_214] +
jmp loc_10022E9  +
mov ax [ebx+9C0h] +
and ax cx +
cmp ax si +
mov eax 0FFFFh +
jz loc_100A0AA  +
dec eax  +
mov [ebx+9C0h] ax +
jmp loc_1002B95  +
push [ebp+var_218]  +
dec eax  +
mov [ebx+9C0h] ax +
mov eax [ebp+var_21C] +
push dword ptr [eax+2Ch]  +
lea eax [ebp+var_10C] +
push dword ptr [ebx+1Ch]  +
push 10h  +
push edi  +
push eax  +
call sub_1002864  +
test eax eax +
jz loc_10023F8  +
push [ebp+var_218]  +
mov eax [ebp+var_21C] +
push dword ptr [eax+2Ch]  +
lea eax [ebp+var_10C] +
push dword ptr [ebx+1Ch]  +
push esi  +
push eax  +
call sub_1002831  +
test eax eax +
jnz loc_1002C10  +
jmp loc_10023F8  +
push [ebp+var_218]  +
lea eax [ebp+var_238] +
push [ebp+var_254]  +
push eax  +
push [ebp+var_244]  +
push ebx  +
call sub_1002D3A  +
test eax eax +
jz loc_10023F8  +
mov eax [ebx+34Ch] +
test eax eax +
jbe loc_100A158  +
mov ecx [ebx+364h] +
cmp ecx [ebx+688h] +
jnz loc_100A158  +
mov [ebx+670h] eax +
xor eax eax +
lea esi [ebx+670h] +
mov ecx 0C9h +
lea edi [ebx+34Ch] +
mov [ebx+0AD8h] ax +
mov eax [ebp+var_21C] +
movs   +
jmp loc_1002C98  +
push edi  +
push 7  +
push dword ptr [ebx+2Ch]  +
call sub_101288B  +
jmp loc_10023F8  +
push [ebp+var_224]  +
push 4  +
jmp loc_100A182  +
mov eax [ebp+var_21C] +
push 0  +
push 9  +
push dword ptr [eax+2Ch]  +
jmp loc_100A185  +
***
mov eax ecx +
jmp loc_1005368  +
***
push 2  +
pop eax  +
pop ebp  +
retn   +
***
push 2  +
pop eax  +
jmp loc_10034FA  +
***
push esi  +
call [ebp+arg_8]  +
pop ecx  +
jmp loc_1007B8D  +
***
cmp esi ecx +
jb loc_100A1D3  +
mov dword ptr [eax+28h] 1 +
jmp loc_100A1E0  +
mov ecx [eax+4] +
mov bl [eax+2Ch] +
mov [esi+ecx] bl +
inc word ptr [eax+0Ch]  +
movzx esi word ptr [eax+0Ch] +
cmp esi [eax+10h] +
jb loc_100A1F5  +
mov dword ptr [eax+28h] 1 +
jmp loc_10042A9  +
mov ecx [eax+4] +
mov bl [eax+2Dh] +
mov [esi+ecx] bl +
jmp loc_10042A5  +
***
xor esi esi +
inc esi  +
cmp ecx edx +
jb loc_100A20F  +
mov [eax+28h] esi +
jmp loc_100A21C  +
mov edx [eax+4] +
mov bl [eax+2Ch] +
mov [ecx+edx] bl +
inc word ptr [eax+0Ch]  +
movzx ecx word ptr [eax+0Ch] +
cmp ecx [eax+10h] +
jb loc_10050E6  +
mov [eax+28h] esi +
jmp loc_10050F3  +
mov dword ptr [eax+28h] 1 +
jmp loc_10050F3  +
***
mov eax [ebp+var_8] +
inc [ebp+var_4]  +
jmp loc_10048C7  +
mov eax [ebp+var_8] +
lea ecx [edx+eax*2+102Ch] +
mov edi 0FFFFh +
mov eax [ebp+var_8] +
dec eax  +
lea ebx [edx+eax*2+102Ch] +
jmp loc_100A267  +
dec eax  +
dec ebx  +
dec ebx  +
cmp word ptr [ebx] 0 +
jz loc_100A264  +
sub [ebp+var_4] 2 +
mov ebx edi +
add [edx+eax*2+102Ch] bx +
lea eax [edx+eax*2+102Eh] +
add word ptr [eax] 2 +
mov eax edi +
add [ecx] ax +
cmp [ebp+var_4] 0 +
jg loc_100A257  +
mov eax [ebp+var_8] +
mov [ebp+var_8] eax +
test eax eax +
jz loc_10048EB  +
mov [ebp+var_C] ecx +
mov eax [ebp+var_C] +
movzx eax word ptr [eax] +
mov [ebp+var_10] eax +
test eax eax +
jz loc_100A2F8  +
lea ebx [edx+esi*4+104Ch] +
sub ebx 4 +
mov eax [ebx] +
dec esi  +
cmp eax [ebp+var_1C] +
mov [ebp+var_28] ebx +
jg loc_100A2F2  +
mov ecx [ebp+var_2C] +
movzx edi word ptr [ebp+var_8] +
lea eax [ecx+eax*4] +
movzx ecx word ptr [eax+2] +
cmp cx di +
jz loc_100A2EF  +
mov ebx [ebp+var_8] +
movzx ecx cx +
sub ebx ecx +
movzx ecx word ptr [eax] +
imul ebx ecx +
add [edx+50h] ebx +
mov ebx [ebp+var_28] +
mov [eax+2] di +
dec [ebp+var_10]  +
cmp [ebp+var_10] 0 +
jnz loc_100A2B6  +
dec [ebp+var_8]  +
sub [ebp+var_C] 2 +
cmp [ebp+var_8] 0 +
jz loc_10048EB  +
jmp loc_100A2A2  +
***
cmp [ebp+var_8] 2 +
jge loc_100A319  +
inc [ebp+var_8]  +
mov eax [ebp+var_8] +
jmp loc_100A31B  +
xor eax eax +
inc dword ptr [ebx+40h]  +
mov ecx [ebx+40h] +
mov [ebx+ecx*4+104Ch] eax +
xor edx edx +
mov ecx eax +
shl ecx 2 +
inc edx  +
mov [ecx+edi] dx +
mov byte ptr [eax+ebx+1940h] 0 +
mov eax [ebp+var_4] +
dec dword ptr [ebx+50h]  +
test eax eax +
jz loc_1004A4B  +
movzx eax word ptr [ecx+eax+2] +
sub [ebx+54h] eax +
jmp loc_1004A4B  +
***
movzx edx word ptr [eax+3Ch] +
movzx ecx si +
shl ecx 3 +
sub edx [eax+34h] +
mov [ebp+var_4] offset dword_1007CE8 +
lea esi [eax+9A4h] +
push ebx  +
mov edi [ebp+var_4] +
mov edi [edi] +
movzx ebx word ptr [esi] +
add [ebp+var_4] 4 +
add edi 5 +
imul edi ebx +
add ecx edi +
add esi 4 +
cmp [ebp+var_4] offset loc_1007D60 +
jl loc_100A372  +
movzx esi word ptr [eax+48h] +
mov di si +
shr di 1 +
pop ebx  +
cmp [eax+4Ah] di +
jnb loc_1004540  +
shr ecx 2 +
and ecx 3FFFFFFEh +
and edx 0FFFFFFFEh +
cmp ecx edx +
jnb loc_1004540  +
jmp loc_1004028  +
***
mov [ebp+var_8] 400h +
jmp loc_10040E0  +
***
mov eax ecx +
jmp loc_1004996  +
cmp [ebp+arg_0] 0 +
jz loc_10049A4  +
mov edx [ebp+arg_8] +
mov eax ebx +
call sub_1004256  +
mov ecx [ebx+58h] +
mov eax [ebp+arg_4] +
add ecx 0Ah +
and ecx 0FFFFFFF8h +
add eax 4 +
lea eax [ecx+eax*8] +
mov ecx [ebp+arg_4] +
push 1  +
push [ebp+arg_0]  +
mov [ebx+58h] eax +
mov eax ebx +
call sub_1012A26  +
jmp loc_10049E1  +
add edx 2 +
call sub_1004256  +
lea eax [ebx+0F18h] +
push eax  +
lea eax [ebx+0A98h] +
push eax  +
mov eax ebx +
call sub_100457D  +
mov eax [ebx+54h] +
jmp loc_10049DC  +
***
mov ecx [esi+34h] +
mov eax 10000h +
cmp dx bx +
jz loc_100A445  +
movzx eax dx +
sub eax ecx +
cmp ecx ebx +
jl loc_100A454  +
movzx ecx word ptr [esi+34h] +
add ecx [esi+14h] +
jmp loc_100A456  +
xor ecx ecx +
push ebx  +
push eax  +
push ecx  +
mov eax esi +
call sub_10048F5  +
movzx eax word ptr [esi+3Ch] +
mov [esi+34h] eax +
jmp loc_10043CE  +
movzx eax word ptr [esi+3Ch] +
mov ecx [esi+34h] +
cmp ax bx +
jnz loc_100A47F  +
mov eax 10000h +
jmp loc_100A482  +
movzx eax ax +
sub eax ecx +
cmp ecx ebx +
jl loc_100A491  +
movzx ecx word ptr [esi+34h] +
add ecx [esi+14h] +
jmp loc_100A493  +
xor ecx ecx +
push ebx  +
push eax  +
push ecx  +
mov eax esi +
call sub_10048F5  +
movzx eax word ptr [esi+3Ch] +
mov [esi+34h] eax +
jmp loc_10043C7  +
***
idiv  dword ptr [esi+0] +
add ah ah +
and eax 90900001h +
nop   +
nop   +
nop   +
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
mov edi [ebp+8] +
test edi edi +
jz loc_100AA38  +
mov eax [edi] +
push esi  +
mov esi ds:free +
test eax eax +
jz loc_100AA33  +
push eax  +
call esi  +
pop ecx  +
push edi  +
call esi  +
pop ecx  +
pop esi  +
pop edi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push 4  +
call ds:malloc  +
mov esi eax +
pop ecx  +
test esi esi +
jnz loc_100AA5B  +
xor eax eax +
jmp loc_100AA79  +
mov eax [ebp+8] +
push dword ptr [eax]  +
call ds:_strdup  +
pop ecx  +
mov [esi] eax +
test eax eax +
jnz loc_100AA77  +
push esi  +
call ds:free  +
pop ecx  +
jmp loc_100AA57  +
***
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
or ecx 0FFFFFFFFh +
sub ecx [ebp+arg_8] +
cmp [ebp+arg_4] 0 +
jz loc_100AAB5  +
mov eax [ebp+arg_0] +
push esi  +
movzx edx byte ptr [eax] +
dec [ebp+arg_4]  +
movzx esi cl +
xor edx esi +
shr ecx 8 +
xor ecx dword_10177D0[edx*4] +
inc eax  +
cmp [ebp+arg_4] 0 +
jnz loc_100AA98  +
pop esi  +
or eax 0FFFFFFFFh +
sub eax ecx +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push edi  +
mov edi [ebp+arg_8] +
mov bl [edi] +
test bl bl +
jnz loc_100AADF  +
mov eax [ebp+arg_0] +
mov [eax] bl +
mov eax edi +
jmp loc_100ABAF  +
mov eax [ebp+arg_C] +
jmp loc_100AAE9  +
cmp cl bl +
jz loc_100AAEF  +
inc eax  +
mov cl [eax] +
test cl cl +
jnz loc_100AAE4  +
cmp byte ptr [eax] 0 +
push esi  +
jnz loc_100AB4E  +
push offset asc_100A51C  +
push edi  +
call ds:strpbrk  +
mov ebx eax +
pop ecx  +
pop ecx  +
test ebx ebx +
jnz loc_100AB1C  +
mov esi edi +
lea ecx [esi+1] +
mov al [esi] +
inc esi  +
test al al +
jnz loc_100AB0E  +
sub esi ecx +
lea ebx [esi+edi] +
jmp loc_100AB20  +
mov esi ebx +
sub esi edi +
mov eax [ebp+arg_4] +
cmp esi eax +
jl loc_100AB38  +
dec eax  +
push eax  +
push [ebp+arg_10]  +
push offset dword_100A514  +
push offset a1ExceededMaxim  +
jmp loc_100ABA1  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
push edi  +
call memcpy  +
add esp 0Ch +
mov byte ptr [esi+edi] 0 +
mov eax ebx +
jmp loc_100ABAE  +
mov esi [ebp+arg_0] +
mov edx [ebp+arg_4] +
lea eax [edi+1] +
mov cl [eax] +
test cl cl +
jz loc_100AB7F  +
xor edi edi +
cmp edi edx +
jge loc_100AB7F  +
cmp cl bl +
jnz loc_100AB74  +
cmp [eax+1] bl +
jnz loc_100AB8A  +
mov [esi] cl +
inc esi  +
inc edi  +
inc eax  +
inc eax  +
jmp loc_100AB79  +
mov [esi] cl +
inc esi  +
inc edi  +
inc eax  +
mov cl [eax] +
test cl cl +
jnz loc_100AB5F  +
sub esi [ebp+arg_0] +
cmp esi edx +
jl loc_100AB90  +
dec edx  +
push edx  +
jmp loc_100AB29  +
mov byte ptr [esi] 0 +
inc eax  +
jmp loc_100ABAE  +
push [ebp+arg_10]  +
movsx eax bl +
push eax  +
push offset dword_100A4EC  +
push offset aMissingClosing  +
push [ebp+arg_14]  +
call sub_1006F95  +
add esp 14h +
xor eax eax +
pop esi  +
pop edi  +
pop ebx  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
xor esi esi +
cmp off_1017BD0 esi +
jz loc_100AC10  +
mov eax offset off_1017BD0 +
push [ebp+arg_0]  +
push dword ptr [eax]  +
call ds:_stricmp  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_100AC2F  +
inc esi  +
lea eax off_1017BD0[esi*8] +
cmp dword ptr [eax] 0 +
jnz loc_100ABF2  +
push [ebp+arg_0]  +
push offset aS_2  +
push offset aUnknownCommand  +
push [ebp+arg_4]  +
call sub_1006F95  +
add esp 10h +
xor eax eax +
pop esi  +
pop ebp  +
retn 8  +
mov eax dword_1017BD4[esi*8] +
jmp loc_100AC2A  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 434h +
mov eax dword_1017000 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_C] +
push ebx  +
mov ebx [ebp+arg_4] +
push esi  +
mov esi [ebp+arg_0] +
cmp dword ptr [esi] 0 +
push edi  +
mov edi [ebp+arg_8] +
mov [ebp+var_434] esi +
mov [ebp+var_428] edi +
mov [ebp+var_430] eax +
jnz loc_100ACAB  +
push edi  +
push offset aFileParameter  +
push offset loc_100AA15  +
push 0  +
call sub_100F56A  +
mov [esi] eax +
test eax eax +
jnz loc_100ACAB  +
xor eax eax +
jmp loc_100AE6A  +
inc ebx  +
cmp byte ptr [ebx] 0 +
jnz loc_100ACC0  +
push offset aMissingParamet  +
push edi  +
call sub_1006F95  +
pop ecx  +
pop ecx  +
jmp loc_100ACA4  +
push offset asc_100A580  +
push ebx  +
call ds:strpbrk  +
mov edi eax +
pop ecx  +
pop ecx  +
mov [ebp+var_42C] edi +
test edi edi +
jnz loc_100AD34  +
mov eax ebx +
lea edx [eax+1] +
mov cl [eax] +
inc eax  +
test cl cl +
jnz loc_100ACDF  +
sub eax edx +
cmp eax 3 +
jnz loc_100AD15  +
push eax  +
push offset aRun  +
push ebx  +
call ds:strncmp  +
add esp 0Ch +
test eax eax +
jnz loc_100AD15  +
mov eax [ebp+var_430] +
mov dword ptr [eax] 1 +
lea eax [ebx+3] +
jmp loc_100AE6A  +
push 3Dh  +
push offset dword_100A57C  +
push offset a1AssignmentOpe  +
push [ebp+var_428]  +
call sub_1006F95  +
add esp 10h +
jmp loc_100ACA4  +
mov esi edi +
sub esi ebx +
cmp esi 20h +
jb loc_100AD5D  +
push ebx  +
push 1Fh  +
push offset dword_100A554  +
push offset aParameterNameE  +
push [ebp+var_428]  +
call sub_1006F95  +
add esp 14h +
jmp loc_100ACA4  +
push esi  +
lea eax [ebp+var_24] +
push ebx  +
push eax  +
call memcpy  +
mov ebx offset asc_100A51C +
push ebx  +
push edi  +
mov edi ds:strspn +
mov [ebp+esi+var_24] 0 +
call edi  +
mov esi eax +
add esi [ebp+var_42C] +
add esp 14h +
cmp byte ptr [esi] 3Dh +
jnz loc_100AD15  +
inc esi  +
push ebx  +
push esi  +
mov [ebp+var_42C] esi +
call edi  +
add esi eax +
cmp byte ptr [esi] 2Fh +
pop ecx  +
pop ecx  +
mov ebx offset aParameterValue +
jnz loc_100ADB6  +
cmp esi [ebp+var_42C] +
jbe loc_100ADB6  +
mov [ebp+var_424] 0 +
jmp loc_100ADDE  +
push [ebp+var_428]  +
lea eax [ebp+var_424] +
push ebx  +
push offset dword_100A520  +
push esi  +
push 400h  +
push eax  +
call sub_100AAC3  +
mov esi eax +
test esi esi +
jz loc_100ACA4  +
push 4  +
call ds:malloc  +
mov edi eax +
pop ecx  +
test edi edi +
jnz loc_100ADFD  +
push ebx  +
push offset aS_2  +
push offset aOutOfMemorySav  +
jmp loc_100AD21  +
lea eax [ebp+var_424] +
push eax  +
call ds:_strdup  +
pop ecx  +
mov [edi] eax +
test eax eax +
jnz loc_100AE33  +
push ebx  +
push offset aS_2  +
push offset aOutOfMemorySav  +
push [ebp+var_428]  +
call sub_1006F95  +
push edi  +
call ds:free  +
jmp loc_100AD55  +
push [ebp+var_428]  +
lea eax [ebp+var_24] +
push 1  +
push offset aFileParameter  +
push edi  +
push eax  +
mov eax [ebp+var_434] +
push dword ptr [eax]  +
call sub_100F811  +
test eax eax +
jnz loc_100AE68  +
push dword ptr [edi]  +
mov esi ds:free +
call esi  +
push edi  +
call esi  +
jmp loc_100ACBC  +
mov eax esi +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_10026CE  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
test esi esi +
jz loc_100AF09  +
push edi  +
mov edi offset asc_100A51C +
cmp byte ptr [esi] 0 +
jz loc_100AF08  +
push edi  +
push esi  +
call ds:strpbrk  +
mov esi eax +
pop ecx  +
pop ecx  +
test esi esi +
jz loc_100AF08  +
push edi  +
push esi  +
call ds:strspn  +
add eax esi +
cmp byte ptr [eax] 0 +
pop ecx  +
pop ecx  +
jnz loc_100AF02  +
mov byte ptr [esi] 0 +
jmp loc_100AF04  +
mov esi eax +
test esi esi +
jnz loc_100AED7  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 3Ch +
mov eax dword_1017000 +
xor eax ebp +
mov [ebp+var_4] eax +
mov ecx [ebp+arg_C] +
mov eax [ebp+arg_0] +
push ebx  +
push esi  +
mov esi [ebp+arg_8] +
mov [ebp+var_3C] ecx +
mov ecx [ebp+arg_10] +
push edi  +
mov [ebp+var_28] eax +
mov [ebp+var_2C] esi +
mov [ebp+var_30] ecx +
mov [ebp+var_38] eax +
jmp loc_100B034  +
movsx eax cl +
sub eax 22h +
jz loc_100AFFE  +
sub eax 3 +
jz loc_100AF71  +
dec eax  +
dec eax  +
jz loc_100AFFE  +
sub eax 14h +
jz loc_100B03E  +
push 1  +
jmp loc_100B01C  +
mov ebx esi +
inc esi  +
mov [ebp+var_2C] esi +
cmp byte ptr [esi] 25h +
jz loc_100AF6A  +
push 25h  +
push esi  +
call ds:strchr  +
pop ecx  +
pop ecx  +
mov [ebp+var_34] eax +
test eax eax +
jz loc_100B053  +
lea edi [eax+1] +
sub eax [ebp+var_2C] +
mov esi eax +
cmp esi 20h +
jge loc_100B06F  +
push esi  +
push [ebp+var_2C]  +
lea eax [ebp+var_24] +
push eax  +
call memcpy  +
add esp 0Ch +
push [ebp+var_30]  +
lea eax [ebp+var_24] +
push eax  +
push [ebp+var_3C]  +
mov byte ptr [ebp+esi+var_24] 0 +
call sub_1004F32  +
test eax eax +
jz loc_100B07E  +
push eax  +
call sub_10060B6  +
mov [ebp+var_34] eax +
push 0  +
lea eax [ebp+var_34] +
push eax  +
lea eax [ebp+arg_4] +
push eax  +
lea eax [ebp+var_28] +
push eax  +
call sub_1011661  +
test eax eax +
jz loc_100B096  +
dec [ebp+var_28]  +
inc [ebp+arg_4]  +
mov [ebp+var_2C] edi +
jmp loc_100B031  +
lea eax [esi+1] +
jmp loc_100B010  +
cmp dl cl +
jnz loc_100B00F  +
inc eax  +
mov [ebp+var_34] eax +
cmp [eax] cl +
jnz loc_100B019  +
inc eax  +
mov [ebp+var_34] eax +
mov dl [eax] +
test dl dl +
jnz loc_100B003  +
sub eax esi +
push eax  +
lea eax [ebp+var_2C] +
push eax  +
lea eax [ebp+arg_4] +
push eax  +
lea eax [ebp+var_28] +
push eax  +
call sub_1011661  +
test eax eax +
jz loc_100B044  +
mov esi [ebp+var_2C] +
mov cl [esi] +
test cl cl +
jnz loc_100AF48  +
cmp [ebp+arg_4] 0 +
jnz loc_100B0A3  +
push [ebp+var_2C]  +
push offset aS_2  +
push offset aBufferOverfl_0  +
jmp loc_100B089  +
push ebx  +
push 25h  +
push offset dword_100A4EC  +
push offset aMissing1AfterV  +
push [ebp+var_30]  +
call sub_1006F95  +
add esp 14h +
xor eax eax +
jmp loc_100B0B7  +
push ebx  +
push 1Fh  +
push offset dword_100A554  +
push offset aVariableNameEx  +
jmp loc_100B060  +
push ebx  +
push offset aS_2  +
push offset aVariableNotDef  +
push [ebp+var_30]  +
call sub_1006F95  +
add esp 10h +
jmp loc_100B06B  +
push ebx  +
push offset aS_2  +
push offset aBufferOverfl_1  +
jmp loc_100B089  +
mov eax [ebp+var_28] +
push [ebp+var_38]  +
mov byte ptr [eax] 0 +
inc [ebp+var_28]  +
call sub_100AEC4  +
xor eax eax +
inc eax  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_10026CE  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
lea ecx [eax-1] +
push esi  +
mov esi eax +
test ecx eax +
jz loc_100B166  +
xor ecx ecx +
jmp loc_100B155  +
sar eax 1 +
inc ecx  +
test eax eax +
jnz loc_100B152  +
xor edx edx +
inc edx  +
shl edx cl +
dec edx  +
lea eax [edx+esi] +
not edx  +
and eax edx +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
call sub_1006B30  +
cmp eax 0FFFFFFFFh +
jz loc_100B194  +
shl eax 4 +
push off_1017744[eax]  +
call ds:atol  +
pop ecx  +
jmp loc_100B196  +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
mov esi [ebp+arg_8] +
push edi  +
mov byte ptr [ebx] 0 +
jmp loc_100B20E  +
mov eax ebx +
lea edi [eax+1] +
mov cl [eax] +
inc eax  +
test cl cl +
jnz loc_100B1B7  +
push [ebp+arg_14]  +
mov ecx [ebp+arg_4] +
push offset aInfwriteString  +
push offset dword_100A520  +
sub eax edi +
push esi  +
sub ecx eax +
push ecx  +
add eax ebx +
push eax  +
call sub_100AAC3  +
mov esi eax +
test esi esi +
jz loc_100B259  +
mov eax ebx +
lea edi [eax+1] +
mov cl [eax] +
inc eax  +
test cl cl +
jnz loc_100B1E7  +
sub eax edi +
push offset asc_100A51C  +
push esi  +
mov [ebp+arg_0] eax +
lea edi [eax+ebx] +
call ds:strspn  +
pop ecx  +
pop ecx  +
lea ecx [eax+esi] +
cmp byte ptr [ecx] 0 +
jnz loc_100B22C  +
mov esi ecx +
cmp byte ptr [esi] 0 +
jnz loc_100B1B2  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 18h  +
cmp [ebp+arg_0] ecx +
jge loc_100B23D  +
mov cl [esi] +
mov [edi] cl +
inc edi  +
inc esi  +
inc [ebp+arg_0]  +
dec eax  +
mov ecx [ebp+arg_4] +
test eax eax +
jg loc_100B21D  +
cmp [ebp+arg_0] ecx +
jge loc_100B23D  +
mov byte ptr [edi] 0 +
jmp loc_100B20E  +
dec ecx  +
push ecx  +
push offset aInfwriteString  +
push offset dword_100A514  +
push offset a1ExceededMaxim  +
push [ebp+arg_14]  +
call sub_1006F95  +
add esp 14h +
xor eax eax +
jmp loc_100B216  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax [ebp+arg_0] +
push ebx  +
xor ebx ebx +
push esi  +
lea ecx [eax+4] +
push edi  +
mov edi [ebp+arg_8] +
lea esi [eax+104h] +
mov dword ptr [eax] 0Dh +
mov [ecx] bl +
mov [esi] ebx +
mov [ebp+var_4] ebx +
mov [ebp+var_8] ebx +
mov [ebp+arg_0] ecx +
cmp [edi] bl +
jz loc_100B323  +
push offset asc_100A51C  +
push edi  +
call ds:strspn  +
add edi eax +
mov al [edi] +
pop ecx  +
pop ecx  +
cmp al bl +
jz loc_100B31E  +
cmp al 2Fh +
jnz loc_100B2D8  +
lea eax [ebp+var_8] +
push eax  +
push [ebp+arg_C]  +
push edi  +
push esi  +
call sub_100AC51  +
mov edi eax +
cmp [ebp+var_8] ebx +
jz loc_100B2FE  +
push offset aRunDirectiveOn  +
push [ebp+arg_C]  +
call sub_1006F95  +
pop ecx  +
pop ecx  +
jmp loc_100B31E  +
inc [ebp+var_4]  +
cmp [ebp+var_4] 1 +
jg loc_100B308  +
push [ebp+arg_C]  +
push offset aDestinationFil  +
push offset dword_100A520  +
push edi  +
push 100h  +
push [ebp+arg_0]  +
call sub_100AAC3  +
mov edi eax +
cmp edi ebx +
jz loc_100B31E  +
cmp [edi] bl +
jz loc_100B31E  +
jmp loc_100B298  +
push edi  +
push offset aS_2  +
push offset aUnexpectedText  +
push [ebp+arg_C]  +
call sub_1006F95  +
add esp 10h +
cmp [ebp+var_4] ebx +
jnz loc_100B33F  +
mov eax [ebp+arg_C] +
cmp [eax+200h] ebx +
jnz loc_100B34A  +
push offset aMissingDestina  +
push eax  +
call sub_1006F95  +
pop ecx  +
pop ecx  +
xor eax eax +
jmp loc_100B393  +
mov eax [ebp+arg_C] +
cmp [eax+200h] ebx +
jz loc_100B35A  +
mov eax [esi] +
cmp eax ebx +
jz loc_100B33B  +
push eax  +
call sub_100F701  +
mov [esi] ebx +
jmp loc_100B33B  +
mov eax [ebp+arg_4] +
cmp dword ptr [eax+40h] 3 +
jl loc_100B390  +
push [ebp+arg_0]  +
lea esi [eax+1B4h] +
push offset aS_2  +
push offset aReferenceDst1  +
push 800h  +
push esi  +
call sub_1001711  +
push esi  +
push offset aS  +
call ds:printf  +
add esp 1Ch +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push ebx  +
xor ecx ecx +
push esi  +
mov esi [ebp+arg_0] +
lea eax [esi+4] +
mov [eax] cl +
mov [ebp+var_C] eax +
lea eax [esi+104h] +
push edi  +
mov edi [ebp+arg_8] +
lea ebx [esi+204h] +
mov dword ptr [esi] 5 +
mov [eax] cl +
mov [ebx] ecx +
mov [esi+208h] ecx +
mov [ebp+var_4] ecx +
mov [ebp+var_8] ecx +
mov [ebp+arg_0] eax +
cmp [edi] cl +
jz loc_100B50A  +
push offset asc_100A51C  +
push edi  +
call ds:strspn  +
add edi eax +
mov al [edi] +
pop ecx  +
pop ecx  +
test al al +
jz loc_100B504  +
cmp al 2Fh +
jnz loc_100B48E  +
lea eax [ebp+var_8] +
push eax  +
push [ebp+arg_C]  +
push edi  +
push ebx  +
call sub_100AC51  +
xor ecx ecx +
inc ecx  +
mov edi eax +
cmp [ebp+var_8] ecx +
jnz loc_100B4CF  +
mov eax [ebp+arg_4] +
add eax 0B0h +
cmp [eax] ecx +
jz loc_100B4DD  +
mov [eax] ecx +
mov [esi+208h] ecx +
jmp loc_100B4CF  +
inc [ebp+var_4]  +
cmp [ebp+var_4] 2 +
jg loc_100B4EE  +
cmp [ebp+var_4] 1 +
push [ebp+arg_C]  +
jnz loc_100B4B5  +
push offset aSourceFileName  +
push offset dword_100A520  +
push edi  +
push 100h  +
push [ebp+var_C]  +
jmp loc_100B4C8  +
push offset aDestinationFil  +
push offset dword_100A520  +
push edi  +
push 100h  +
push [ebp+arg_0]  +
call sub_100AAC3  +
mov edi eax +
test edi edi +
jz loc_100B504  +
cmp byte ptr [edi] 0 +
jz loc_100B504  +
jmp loc_100B442  +
push offset aMultipleFileLi  +
push [ebp+arg_C]  +
call sub_1006F95  +
pop ecx  +
pop ecx  +
jmp loc_100B504  +
push edi  +
push offset aS_2  +
push offset aUnexpectedText  +
push [ebp+arg_C]  +
call sub_1006F95  +
add esp 10h +
cmp [ebp+var_4] 0 +
jnz loc_100B527  +
mov eax [ebp+arg_C] +
cmp dword ptr [eax+200h] 0 +
jnz loc_100B533  +
push offset aMissingSourceF  +
push eax  +
call sub_1006F95  +
pop ecx  +
pop ecx  +
xor eax eax +
jmp loc_100B580  +
mov eax [ebp+arg_C] +
cmp dword ptr [eax+200h] 0 +
jz loc_100B544  +
mov eax [ebx] +
test eax eax +
jz loc_100B523  +
push eax  +
call sub_100F701  +
and dword ptr [ebx] 0 +
jmp loc_100B523  +
mov esi [ebp+arg_4] +
cmp dword ptr [esi+40h] 3 +
jl loc_100B57D  +
push [ebp+arg_0]  +
add esi 1B4h +
push [ebp+var_C]  +
push offset dword_100A5F8  +
push offset aFilespecSrc1Ds  +
push 800h  +
push esi  +
call sub_1001711  +
push esi  +
push offset aS  +
call ds:printf  +
add esp 20h +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
mov edi [ebp+arg_8] +
cmp byte ptr [edi] 0 +
jnz loc_100B62D  +
push offset dword_100B700  +
push offset aS_2  +
push offset aNoVariableName  +
push [ebp+arg_C]  +
call sub_1006F95  +
add esp 10h +
xor eax eax +
jmp loc_100B6FB  +
push ebx  +
push offset asc_100A580  +
push edi  +
call ds:strpbrk  +
mov ebx eax +
pop ecx  +
pop ecx  +
mov [ebp+arg_8] ebx +
test ebx ebx +
jnz loc_100B663  +
push 3Dh  +
push offset dword_100A57C  +
push offset a1AssignmentOpe  +
push [ebp+arg_C]  +
call sub_1006F95  +
add esp 10h +
xor eax eax +
jmp loc_100B6FA  +
push esi  +
mov esi ebx +
sub esi edi +
cmp esi 20h +
jl loc_100B687  +
push edi  +
push 1Fh  +
push offset dword_100A554  +
push offset aVariableNameEx  +
push [ebp+arg_C]  +
call sub_1006F95  +
add esp 14h +
jmp loc_100B6CC  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
lea eax [edi+4] +
push eax  +
call memcpy  +
push offset asc_100A51C  +
push ebx  +
mov ebx ds:strspn +
mov byte ptr [esi+edi+4] 0 +
call ebx  +
mov esi eax +
add esi [ebp+arg_8] +
add esp 14h +
cmp byte ptr [esi] 3Dh +
jz loc_100B6D0  +
push 3Dh  +
push offset dword_100A57C  +
push offset a1AssignmentOpe  +
push [ebp+arg_C]  +
call sub_1006F95  +
add esp 10h +
xor eax eax +
jmp loc_100B6F9  +
inc esi  +
push offset asc_100A51C  +
push esi  +
call ebx  +
pop ecx  +
pop ecx  +
push [ebp+arg_C]  +
add esi eax +
push offset dword_100B704  +
push offset dword_100A520  +
push esi  +
push 100h  +
add edi 24h +
push edi  +
call sub_100B19F  +
pop esi  +
pop ebx  +
pop edi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
push [ebp+arg_C]  +
mov edi [ebp+arg_4] +
push [ebp+arg_8]  +
push edi  +
push esi  +
call sub_100B5FE  +
test eax eax +
jz loc_100B771  +
cmp dword ptr [edi+40h] 3 +
jl loc_100B76E  +
lea eax [esi+24h] +
push eax  +
add esi 4 +
push esi  +
push offset dword_100A5F8  +
push offset aSettingVariabl  +
add edi 1B4h +
push 800h  +
push edi  +
call sub_1001711  +
push edi  +
push offset aS  +
call ds:printf  +
add esp 20h +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 54h +
mov eax dword_1017000 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_4] +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov edi [ebp+arg_8] +
mov ebx offset asc_100A51C +
mov [ebp+var_40] eax +
mov eax [ebp+arg_C] +
push ebx  +
push edi  +
mov [ebp+var_44] edi +
mov [ebp+var_3C] eax +
call ds:strspn  +
lea edi [eax+edi+1] +
push ebx  +
push edi  +
call ds:strpbrk  +
add esp 10h +
test eax eax +
jnz loc_100B7F7  +
mov eax edi +
lea edx [eax+1] +
mov cl [eax] +
inc eax  +
test cl cl +
jnz loc_100B7EC  +
sub eax edx +
jmp loc_100B7F9  +
sub eax edi +
mov [ebp+var_48] eax +
cmp eax 32h +
jb loc_100B82C  +
push [ebp+var_44]  +
push offset aS_2  +
push offset aCommandNameToo  +
push [ebp+var_3C]  +
call sub_1006F95  +
add esp 10h +
xor eax eax +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_10026CE  +
leave   +
retn 10h  +
push [ebp+var_48]  +
lea eax [ebp+var_38] +
push edi  +
push eax  +
call memcpy  +
mov eax [ebp+var_48] +
add esp 0Ch +
push [ebp+var_3C]  +
mov [ebp+eax+var_38] 0 +
lea eax [ebp+var_38] +
push eax  +
call sub_100ABDD  +
mov [ebp+var_44] eax +
test eax eax +
jz loc_100B819  +
add edi [ebp+var_48] +
push ebx  +
push edi  +
mov [esi] eax +
call ds:strspn  +
add edi eax +
mov eax [ebp+var_44] +
dec eax  +
pop ecx  +
pop ecx  +
cmp eax 0Dh +
ja loc_100B819  +
jmp ds:off_100BAFE[eax*4]  +
xor eax eax +
inc eax  +
jmp loc_100B81B  +
push [ebp+var_3C]  +
push edi  +
push [ebp+var_40]  +
push esi  +
call sub_100B718  +
jmp loc_100B81B  +
cmp byte ptr [edi] 0 +
jnz loc_100B8A5  +
push offset aDelete  +
push offset aS_2  +
push offset aNoVariableName  +
jmp loc_100B80E  +
push ebx  +
push edi  +
call ds:strpbrk  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_100B8D3  +
push edi  +
push offset aDelete  +
push offset dword_100A5F8  +
push offset aUnexpectedPara  +
push [ebp+var_3C]  +
call sub_1006F95  +
add esp 14h +
jmp loc_100B819  +
push 0  +
lea eax [ebp+var_54] +
push eax  +
lea eax [ebp+var_4C] +
push eax  +
lea eax [ebp+var_50] +
add esi 4 +
push eax  +
mov [ebp+var_50] esi +
mov [ebp+var_4C] 20h +
mov [ebp+var_54] edi +
call sub_1011661  +
neg eax  +
sbb eax eax +
neg eax  +
jmp loc_100B81B  +
mov esi ds:_stricmp +
push offset aFile  +
push edi  +
call esi  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_100B924  +
mov eax [ebp+var_40] +
mov dword ptr [eax+9Ch] 3 +
jmp loc_100B95C  +
push offset aCabinet  +
push edi  +
call esi  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_100B941  +
mov eax [ebp+var_40] +
mov dword ptr [eax+9Ch] 2 +
jmp loc_100B95C  +
push offset aDisk  +
push edi  +
call esi  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_100B96D  +
mov eax [ebp+var_40] +
mov dword ptr [eax+9Ch] 1 +
mov ecx [ebp+var_40] +
xor eax eax +
inc eax  +
mov [ecx+98h] eax +
jmp loc_100B81B  +
push edi  +
push offset aInfbegin  +
push offset dword_100A5F8  +
push offset aUnknownKeyword  +
jmp loc_100B8C3  +
mov eax [ebp+var_40] +
xor ecx ecx +
cmp [eax+98h] ecx +
jnz loc_100B9A8  +
push offset aInfbegin  +
push offset aInfend  +
push offset dword_100A5F8  +
push offset a1CommandWithou  +
jmp loc_100B8C3  +
mov [eax+98h] ecx +
mov [eax+9Ch] ecx +
jmp loc_100B878  +
push [ebp+var_3C]  +
lea eax [esi+8] +
push offset aInfwriteString  +
push offset dword_100A520  +
push edi  +
push 200h  +
push eax  +
call sub_100B19F  +
test eax eax +
jz loc_100B819  +
mov eax [ebp+var_44] +
push 8  +
pop ecx  +
sub eax ecx +
jz loc_100B9FF  +
dec eax  +
jz loc_100B9F6  +
dec eax  +
jnz loc_100BA06  +
mov dword ptr [esi+4] 1 +
jmp loc_100BA06  +
mov dword ptr [esi+4] 2 +
jmp loc_100BA06  +
mov dword ptr [esi+4] 3 +
mov [esi] ecx +
jmp loc_100B878  +
mov ebx ds:_stricmp +
push offset aFolder  +
push edi  +
call ebx  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_100BA2D  +
mov dword ptr [esi+4] 1 +
jmp loc_100B878  +
push offset aCabinet  +
push edi  +
call ebx  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_100BA47  +
mov dword ptr [esi+4] 2 +
jmp loc_100B878  +
push offset aDisk  +
push edi  +
call ebx  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_100BA61  +
mov dword ptr [esi+4] 3 +
jmp loc_100B878  +
push edi  +
push offset dword_100A4B4  +
push offset dword_100A5F8  +
push offset aUnknownKeyword  +
push [ebp+var_3C]  +
call sub_1006F95  +
add esp 14h +
and dword ptr [esi+4] 0 +
jmp loc_100B819  +
xor eax eax +
mov [esi+4] ax +
mov [esi+6] ax +
mov eax [ebp+var_40] +
push offset aNo  +
add eax 1B4h +
push 800h  +
push eax  +
mov [ebp+var_44] eax +
call sub_1002515  +
mov ebx offset aExplicit +
push ebx  +
push 800h  +
push [ebp+var_44]  +
call sub_10025A4  +
push ebx  +
mov ebx ds:_stricmp +
push edi  +
call ebx  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_100BAD4  +
or word ptr [esi+4] 1 +
jmp loc_100BAE9  +
push [ebp+var_44]  +
push edi  +
call ebx  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_100BAF3  +
mov eax 0FFFEh +
and [esi+4] ax +
or word ptr [esi+6] 1 +
jmp loc_100B878  +
push edi  +
push offset aOption  +
jmp loc_100BA67  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 414h +
mov eax dword_1017000 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_C] +
push ebx  +
mov ebx [ebp+arg_8] +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
mov edi [ebp+arg_0] +
push 3FFh  +
mov [ebp+var_408] eax +
lea eax [ebp-403h] +
push 0  +
push eax  +
mov [ebp+var_404] 0 +
call memset  +
add esp 0Ch +
cmp dword ptr [esi+98h] 0 +
lea eax [ebp+var_404] +
jz loc_100BC82  +
mov [ebp+var_410] eax +
push 0  +
lea eax [ebp+var_414] +
push eax  +
lea eax [ebp+var_40C] +
push eax  +
lea eax [ebp+var_410] +
push eax  +
mov [ebp+var_40C] 400h +
mov [ebp+var_414] ebx +
call sub_1011661  +
test eax eax +
jnz loc_100BC99  +
xor eax eax +
jmp loc_100BD7B  +
push [ebp+var_408]  +
push dword ptr [esi+8]  +
push ebx  +
push 400h  +
push eax  +
call sub_100AF13  +
jmp loc_100BC77  +
lea eax [ebp+var_404] +
push offset asc_100A51C  +
xor ebx ebx +
push eax  +
mov [edi] ebx +
call ds:strspn  +
pop ecx  +
lea eax [ebp+eax+var_404] +
pop ecx  +
mov cl [eax] +
cmp cl 3Bh +
jz loc_100BD76  +
test cl cl +
jz loc_100BD76  +
cmp cl 2Eh +
jnz loc_100BCFB  +
mov al [eax+1] +
cmp al cl +
jz loc_100BCFB  +
cmp al 5Ch +
jz loc_100BCFB  +
push [ebp+var_408]  +
lea eax [ebp+var_404] +
push eax  +
push esi  +
push edi  +
call sub_100B79D  +
test eax eax +
jz loc_100BC7B  +
xor eax eax +
inc eax  +
jmp loc_100BD7B  +
cmp [esi+98h] ebx +
jz loc_100BD4E  +
mov dword ptr [edi] 8 +
mov eax [esi+9Ch] +
mov [edi+4] eax +
lea eax [ebp+var_404] +
mov [ebp+var_414] eax +
push ebx  +
lea eax [ebp+var_414] +
push eax  +
lea eax [ebp+var_40C] +
push eax  +
lea eax [ebp+var_410] +
add edi 8 +
push eax  +
mov [ebp+var_410] edi +
mov [ebp+var_40C] 200h +
call sub_1011661  +
jmp loc_100BCEF  +
push [ebp+var_408]  +
lea eax [ebp+var_404] +
push eax  +
push esi  +
push edi  +
cmp [esi+94h] ebx +
jz loc_100BD6C  +
call sub_100B3FA  +
jmp loc_100BCEF  +
call sub_100B262  +
jmp loc_100BCEF  +
xor eax eax +
inc eax  +
mov [edi] eax +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_10026CE  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 618h +
mov eax dword_1017000 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_8] +
push ebx  +
mov ebx [ebp+arg_4] +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov edi [ebp+arg_C] +
push ebx  +
mov [ebp+var_40C] eax +
call sub_1011BB1  +
or [esi+0C0Ch] eax +
and [ebp+var_408] 0 +
jmp loc_100BE5D  +
push edi  +
push 400h  +
lea eax [ebp+var_404] +
push eax  +
push ebx  +
call sub_1011A4A  +
test eax eax +
jz loc_100BE7F  +
inc [ebp+var_408]  +
mov eax [ebp+var_408] +
mov [edi+208h] eax +
lea eax [ebp+var_404] +
mov [edi+20Ch] eax +
cmp dword ptr [esi+40h] 2 +
jl loc_100BE27  +
push eax  +
push [ebp+var_408]  +
push offset aDS  +
call ds:printf  +
add esp 0Ch +
push edi  +
lea eax [ebp+var_404] +
push eax  +
push esi  +
lea eax [ebp+var_618] +
push eax  +
call sub_100BBEF  +
push edi  +
push [ebp+var_408]  +
lea eax [ebp+var_404] +
push eax  +
push ebx  +
lea eax [ebp+var_618] +
push eax  +
push esi  +
call [ebp+var_40C]  +
test eax eax +
jz loc_100BE8D  +
push ebx  +
call sub_1011B64  +
test eax eax +
jz loc_100BDD3  +
xor eax eax +
inc eax  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_10026CE  +
leave   +
retn 10h  +
push ebx  +
call sub_1011B64  +
neg eax  +
sbb eax eax +
neg eax  +
jmp loc_100BE6E  +
xor eax eax +
jmp loc_100BE6E  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+10h] +
mov ecx [eax] +
push esi  +
push dword ptr [ecx+4]  +
mov esi [eax+4] +
call sub_1003E27  +
push eax  +
call sub_1003E27  +
push eax  +
push offset aS_2  +
push offset aInterrGetnextc  +
push esi  +
call sub_1006F95  +
add esp 10h +
xor eax eax +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi ds:printf +
push edi  +
push offset aMakecabVariabl  +
push offset aS_0  +
call esi  +
push offset asc_100BFE0  +
push offset aS  +
call esi  +
mov eax [ebp+arg_0] +
add esp 10h +
push dword ptr [eax+8]  +
call sub_1003E27  +
mov edi eax +
test edi edi +
jz loc_100BFAB  +
push ebx  +
push edi  +
call sub_1003E13  +
push edi  +
mov ebx eax +
call sub_1003E27  +
push edi  +
mov [ebp+arg_0] eax +
call sub_10060B6  +
push [ebp+arg_0]  +
mov [ebp+var_4] eax +
push offset aS_1  +
call esi  +
pop ecx  +
pop ecx  +
test ebx ebx +
jz loc_100BF92  +
push offset asc_100BFD4  +
call esi  +
pop ecx  +
test bl 1 +
jz loc_100BF77  +
push offset aStandard  +
jmp loc_100BF81  +
test bl 2 +
jz loc_100BF8A  +
push offset aDefined  +
push offset aS_2  +
call esi  +
pop ecx  +
pop ecx  +
push offset asc_100BFBC  +
call esi  +
pop ecx  +
push [ebp+var_4]  +
push offset aS_3  +
call esi  +
pop ecx  +
pop ecx  +
push edi  +
call sub_1006D1E  +
mov edi eax +
test edi edi +
jnz loc_100BF39  +
pop ebx  +
xor eax eax +
pop edi  +
inc eax  +
pop esi  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_C]  +
mov eax [ebp+arg_4] +
add eax 4 +
push eax  +
mov eax [ebp+arg_0] +
push dword ptr [eax+8]  +
call sub_1004F32  +
test eax eax +
jz loc_100C079  +
push eax  +
call sub_10032A6  +
xor eax eax +
inc eax  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
test byte ptr [eax+6] 1 +
jz loc_100C0A0  +
movzx eax word ptr [eax+4] +
mov ecx [ebp+arg_0] +
and eax 1 +
mov [ecx+0A0h] eax +
xor eax eax +
inc eax  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
mov al [ecx] +
test al al +
jz loc_100C0CD  +
mov edx [ebp+arg_0] +
cbw   +
add [edx+80h] ax +
inc ecx  +
mov al [ecx] +
test al al +
jnz loc_100C0BD  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
mov eax [ebp+arg_0] +
push offset aCabinet  +
push dword ptr [eax+8]  +
call sub_1004F32  +
test eax eax +
jnz loc_100C100  +
push offset aOn  +
call ds:atoi  +
pop ecx  +
jmp loc_100C106  +
push eax  +
call sub_1006236  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
mov eax [ebp+arg_0] +
lea eax [eax+ecx-1] +
cdq   +
idiv  ecx +
imul eax ecx +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
push [ebp+arg_4]  +
mov edi offset aMaxdisksize +
push edi  +
push dword ptr [esi+14h]  +
lea ebx [esi+1B4h] +
push offset dword_100C1A4  +
push 800h  +
push ebx  +
call sub_10116CD  +
test eax eax +
jz loc_100C19A  +
push [ebp+arg_4]  +
push ebx  +
push dword ptr [esi+8]  +
call sub_1004F32  +
test eax eax +
jnz loc_100C194  +
push [ebp+arg_4]  +
call sub_100683B  +
push [ebp+arg_4]  +
push edi  +
push dword ptr [esi+8]  +
call sub_1004F32  +
test eax eax +
jnz loc_100C194  +
push offset a1_44m  +
call ds:atol  +
pop ecx  +
jmp loc_100C19A  +
push eax  +
call sub_100631F  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 22Ch +
mov eax dword_1017000 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_4] +
mov ecx [ebp+arg_C] +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
mov [ebp+var_22C] ecx +
test eax eax +
jnz loc_100C1F6  +
push 0Ah  +
push 0Ch  +
lea eax [ebp+var_10] +
push eax  +
push [ebp+arg_8]  +
call sub_1012222  +
add esp 10h +
lea eax [ebp+var_10] +
push eax  +
push esi  +
call sub_100B170  +
mov ebx eax +
test ebx ebx +
jnz loc_100C206  +
inc eax  +
jmp loc_100C269  +
push edi  +
lea eax [ebp+var_228] +
push eax  +
mov edi offset aClustersize +
push edi  +
push dword ptr [esi+8]  +
call sub_1004F32  +
test eax eax +
jz loc_100C234  +
push [ebp+var_22C]  +
push ebx  +
push edi  +
push dword ptr [esi+8]  +
call sub_1011FFC  +
test eax eax +
jz loc_100C261  +
lea eax [ebp+var_228] +
push eax  +
mov edi offset aMaxdiskfilecou +
push edi  +
push dword ptr [esi+8]  +
call sub_1004F32  +
test eax eax +
jz loc_100C265  +
push [ebp+var_22C]  +
push ebx  +
push edi  +
push dword ptr [esi+8]  +
call sub_1011FFC  +
test eax eax +
jnz loc_100C265  +
xor eax eax +
jmp loc_100C268  +
xor eax eax +
inc eax  +
pop edi  +
mov ecx [ebp+var_4] +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_10026CE  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
mov edi [ebp+arg_0] +
test edi edi +
jz loc_100C2D8  +
cmp dword ptr [edi+54h] 0 +
push esi  +
mov esi ds:printf +
jz loc_100C2A4  +
push offset asc_100C300  +
call esi  +
and dword ptr [edi+54h] 0 +
pop ecx  +
mov eax [ebp+arg_4] +
mov ecx [eax+204h] +
push eax  +
push offset aError  +
test ecx ecx +
jz loc_100C2CA  +
push dword ptr [eax+208h]  +
push ecx  +
push offset aSDSS  +
call esi  +
add esp 14h +
jmp loc_100C2D4  +
push offset aSS_1  +
call esi  +
add esp 0Ch +
inc dword ptr [edi+38h]  +
pop esi  +
pop edi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
cmp eax 11h +
jg loc_100C382  +
jz loc_100C37B  +
cmp eax 0Ah +
jg loc_100C35B  +
jz loc_100C354  +
dec eax  +
dec eax  +
jz loc_100C34A  +
sub eax 5 +
jz loc_100C340  +
dec eax  +
jz loc_100C336  +
dec eax  +
jnz loc_100C3A1  +
mov eax offset aBadFileHandleI +
jmp loc_100C3D7  +
mov eax offset aInvalidExecuta +
jmp loc_100C3D7  +
mov eax offset aArgListTooLong +
jmp loc_100C3D7  +
mov eax offset aFilePathDoesNo +
jmp loc_100C3D7  +
mov eax offset aNoChildProcess +
jmp loc_100C3D7  +
sub eax 0Bh +
jz loc_100C374  +
dec eax  +
jz loc_100C36D  +
dec eax  +
jnz loc_100C3A1  +
mov eax offset aPermissionDeni +
jmp loc_100C3D7  +
mov eax offset dword_100C4D4 +
jmp loc_100C3D7  +
mov eax offset aCreateProcessF +
jmp loc_100C3D7  +
mov eax offset aFileAlreadyExi +
jmp loc_100C3D7  +
sub eax 12h +
jz loc_100C3D2  +
sub eax 4 +
jz loc_100C3CB  +
dec eax  +
dec eax  +
jz loc_100C3C4  +
sub eax 4 +
jz loc_100C3BD  +
sub eax 5 +
jz loc_100C3B6  +
dec eax  +
jz loc_100C3AF  +
dec eax  +
dec eax  +
jz loc_100C3A8  +
mov eax offset aUnknownCRunTim +
jmp loc_100C3D7  +
mov eax offset aDeadlockWouldO +
jmp loc_100C3D7  +
mov eax offset aMathArgumentOu +
jmp loc_100C3D7  +
mov eax offset aBadArgumentToM +
jmp loc_100C3D7  +
mov eax offset aOutOfDiskSpace +
jmp loc_100C3D7  +
mov eax offset aOutOfFileHandl +
jmp loc_100C3D7  +
mov eax offset aInvalidArgumen +
jmp loc_100C3D7  +
mov eax offset aCannotMoveFile +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
lea esi [eax+8Ch] +
mov ecx [esi] +
cmp ecx 0FFFFFFFFh +
jnz loc_100C5C3  +
push dword ptr [eax+84h]  +
call sub_1003E27  +
jmp loc_100C5C9  +
push ecx  +
call sub_1003E13  +
mov [esi] eax +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
lea esi [ebx+88h] +
cmp dword ptr [esi] 0FFFFFFFFh +
jnz loc_100C5F7  +
push dword ptr [ebx+84h]  +
call sub_1003E27  +
mov [esi] eax +
push edi  +
mov edi [esi] +
push edi  +
call sub_1003E13  +
push edi  +
mov [esi] eax +
call sub_10060B6  +
mov esi eax +
mov eax [ebp+arg_8] +
push offset aSize  +
push dword ptr [esi+24h]  +
mov [esi+0Ch] eax +
mov eax [ebp+arg_C] +
mov [esi+10h] eax +
call sub_100FA66  +
pop edi  +
test eax eax +
jz loc_100C633  +
push dword ptr [eax]  +
call ds:atol  +
pop ecx  +
mov [esi] eax +
cmp dword ptr [ebx+90h] 2 +
jnz loc_100C650  +
push [ebp+arg_10]  +
push dword ptr [esi+24h]  +
push esi  +
push [ebp+arg_4]  +
push ebx  +
call sub_1011383  +
test eax eax +
jz loc_100C653  +
xor eax eax +
inc eax  +
pop esi  +
pop ebx  +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
push [ebp+arg_C]  +
push offset aGenerateinf  +
push dword ptr [esi+8]  +
call sub_1004F32  +
push eax  +
call sub_1006236  +
mov ecx [esi+90h] +
push 3  +
pop ebx  +
cmp ecx ebx +
jnz loc_100C6B3  +
test eax eax +
jnz loc_100C6B3  +
cmp [ebp+arg_4] ebx +
jnz loc_100C6B3  +
push offset aIllegalToWrite  +
push [ebp+arg_C]  +
call sub_1006F95  +
pop ecx  +
pop ecx  +
xor eax eax +
jmp loc_100C7C7  +
cmp dword ptr [esi+10h] 0 +
jnz loc_100C6C1  +
xor eax eax +
inc eax  +
jmp loc_100C7C7  +
cmp ecx 2 +
jnz loc_100C7B6  +
cmp [ebp+arg_4] ebx +
jnz loc_100C7B6  +
cmp dword ptr [esi+6Ch] 0 +
jle loc_100C7B6  +
push dword ptr [esi+8Ch]  +
call sub_10060B6  +
mov edi eax +
test byte ptr [edi+18h] 1 +
jz loc_100C6FC  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push ebx  +
jmp loc_100C7BF  +
cmp dword ptr [edi+28h] 0 +
mov ebx offset aInfFileLine +
jnz loc_100C71E  +
push [ebp+arg_C]  +
push ebx  +
push offset loc_1010007  +
push 0  +
call sub_100F56A  +
mov [edi+28h] eax +
test eax eax +
jz loc_100C6AC  +
push 8  +
call ds:malloc  +
mov esi eax +
pop ecx  +
test esi esi +
jnz loc_100C74C  +
push offset aTrackingInfFil  +
push offset aS_2  +
push offset aOutOfMemory1_0  +
push [ebp+arg_C]  +
call sub_1006F95  +
add esp 10h +
jmp loc_100C6AC  +
push [ebp+arg_8]  +
call ds:_strdup  +
pop ecx  +
mov [esi+4] eax +
test eax eax +
jnz loc_100C783  +
push offset aTrackingInfFil  +
push offset aS_2  +
push offset aOutOfMemory1_0  +
push [ebp+arg_C]  +
call sub_1006F95  +
push esi  +
call ds:free  +
add esp 14h +
jmp loc_100C6AC  +
push [ebp+arg_C]  +
push 0  +
push ebx  +
push esi  +
push 0  +
push dword ptr [edi+28h]  +
call sub_100F811  +
test eax eax +
jnz loc_100C7AB  +
push dword ptr [esi+4]  +
mov edi ds:free +
call edi  +
push esi  +
call edi  +
jmp loc_100C6AA  +
mov dword ptr [esi] 3 +
jmp loc_100C6B9  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push dword ptr [esi+70h]  +
call sub_100FAE3  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_14] +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
push ebx  +
push offset aUniquefiles  +
push dword ptr [edi+8]  +
call sub_1004F32  +
push eax  +
call sub_1006236  +
mov [ebp+arg_14] eax +
mov eax [ebp+arg_10] +
push offset aUnique  +
push dword ptr [eax+204h]  +
call sub_100FA66  +
xor esi esi +
cmp eax esi +
jz loc_100C886  +
push ebx  +
push dword ptr [eax]  +
call sub_10051C3  +
mov [ebp+arg_14] eax +
cmp eax 0FFFFFFFFh +
jnz loc_100C886  +
xor eax eax +
jmp loc_100C9DC  +
cmp dword ptr [edi+90h] 3 +
jnz loc_100C8A3  +
cmp [ebp+arg_14] esi +
jnz loc_100C8A3  +
push offset aUniqueOffNotAl  +
push ebx  +
call sub_1006F95  +
pop ecx  +
pop ecx  +
jmp loc_100C87F  +
cmp [edi+84h] esi +
jnz loc_100C8C6  +
push ebx  +
push offset dword_100CA38  +
push offset loc_100FFBF  +
push esi  +
call sub_100F56A  +
mov [edi+84h] eax +
cmp eax esi +
jz loc_100C87F  +
push 40h  +
call ds:malloc  +
mov esi eax +
pop ecx  +
test esi esi +
jnz loc_100C8EF  +
push offset dword_100CA28  +
push offset aS_2  +
push offset aOutOfMemory1_0  +
push ebx  +
call sub_1006F95  +
add esp 10h +
jmp loc_100C87F  +
push dword ptr [ebx+204h]  +
call ds:_strdup  +
pop ecx  +
mov [esi+4] eax +
test eax eax +
jnz loc_100C927  +
push offset dword_100CA28  +
push offset aS_2  +
push offset aOutOfMemory1_0  +
push ebx  +
call sub_1006F95  +
push esi  +
call ds:free  +
add esp 14h +
jmp loc_100C87F  +
push ebx  +
push [ebp+arg_14]  +
push offset aFile_0  +
push esi  +
push [ebp+arg_8]  +
push dword ptr [edi+84h]  +
call sub_100F811  +
xor ecx ecx +
cmp eax ecx +
jnz loc_100C98B  +
cmp dword ptr [ebx+210h] 101h +
jnz loc_100C978  +
push dword ptr [ebx+214h]  +
call sub_10060B6  +
push dword ptr [eax+8]  +
push dword ptr [eax+4]  +
push [ebp+arg_8]  +
push offset dword_100CA20  +
push offset aDuplicateFileN  +
push ebx  +
call sub_1006F95  +
add esp 18h +
push dword ptr [esi+4]  +
mov edi ds:free +
call edi  +
push esi  +
call edi  +
jmp loc_100C89F  +
mov edx [ebx+208h] +
or dword ptr [esi+0Ch] 0FFFFFFFFh +
or dword ptr [esi+10h] 0FFFFFFFFh +
mov [esi+8] edx +
mov edx [ebp+arg_C] +
mov [esi] edx +
mov edx [edi+68h] +
mov [esi+14h] edx +
xor edx edx +
mov [esi+1Ch] dx +
mov [esi+1Eh] dx +
mov [esi+20h] dx +
mov edx [ebp+arg_10] +
mov [esi+28h] ecx +
mov [esi+18h] ecx +
mov edi [edx+204h] +
mov [esi+24h] edi +
mov [esi+2Ch] ecx +
mov [esi+30h] ecx +
mov [esi+34h] ecx +
mov [esi+38h] ecx +
mov [esi+3Ch] ecx +
mov [edx+204h] ecx +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax [ebp+arg_0] +
cmp dword ptr [eax+90h] 3 +
jz loc_100CAA3  +
xor eax eax +
inc eax  +
jmp locret_100CB69  +
push ebx  +
push esi  +
push edi  +
push dword ptr [eax+84h]  +
xor edi edi +
inc edi  +
call sub_1003E27  +
mov [ebp+var_4] eax +
test eax eax +
jz loc_100CB64  +
mov esi [ebp+arg_4] +
push [ebp+var_4]  +
call sub_10060B6  +
mov ebx eax +
test byte ptr [ebx+18h] 2 +
jnz loc_100CB51  +
push offset aInf  +
push dword ptr [ebx+24h]  +
call sub_100FA66  +
test eax eax +
jz loc_100CAF4  +
push esi  +
push dword ptr [eax]  +
call sub_10051C3  +
cmp eax 0FFFFFFFFh +
jz loc_100CB6D  +
test eax eax +
jz loc_100CB51  +
push [ebp+var_4]  +
call sub_1003E27  +
push eax  +
push offset aS_2  +
push offset aFileInLayoutSe  +
push esi  +
call sub_1006F95  +
mov eax [esi+204h] +
mov [ebp+arg_4] eax +
lea edi [esi+208h] +
mov eax [edi] +
add esp 10h +
mov [ebp+var_8] eax +
mov eax [ebx+4] +
push esi  +
push [ebp+arg_0]  +
mov [esi+204h] eax +
mov eax [ebx+8] +
mov [edi] eax +
call sub_100C27E  +
mov eax [ebp+arg_4] +
mov [esi+204h] eax +
mov eax [ebp+var_8] +
push esi  +
mov [edi] eax +
call sub_100683B  +
xor edi edi +
push [ebp+var_4]  +
call sub_1003E13  +
mov [ebp+var_4] eax +
test eax eax +
jnz loc_100CAC2  +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
xor eax eax +
jmp loc_100CB66  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_4] +
xor ebx ebx +
mov esi 1000h +
push esi  +
mov [ebp+var_4] ebx +
mov [ebp+var_8] ebx +
mov [edi] ebx +
call ds:malloc  +
pop ecx  +
mov [ebp+arg_4] eax +
cmp eax ebx +
jnz loc_100CBFD  +
push [ebp+arg_0]  +
push offset aS_2  +
push offset aOutOfMemoryDoi  +
push [ebp+arg_8]  +
call sub_1006F95  +
add esp 10h +
xor eax eax +
jmp loc_100CC86  +
lea eax [ebp+var_C] +
push eax  +
push 8000h  +
push [ebp+arg_0]  +
call ds:_open  +
mov ebx eax +
add esp 0Ch +
cmp ebx 0FFFFFFFFh +
jnz loc_100CC59  +
push [ebp+arg_0]  +
push offset aS_2  +
push offset aCouldNotOpenFi  +
push [ebp+arg_8]  +
call sub_1006F95  +
add esp 10h +
jmp loc_100CC79  +
push esi  +
push [ebp+arg_4]  +
push ebx  +
call ds:_read  +
add esp 0Ch +
cmp eax 0FFFFFFFFh +
jz loc_100CC8D  +
test eax eax +
jz loc_100CC59  +
push [ebp+var_4]  +
push eax  +
push [ebp+arg_4]  +
call sub_100AA83  +
mov [ebp+var_4] eax +
push ebx  +
call ds:_eof  +
pop ecx  +
test eax eax +
jz loc_100CC33  +
mov eax [ebp+var_4] +
mov [ebp+var_8] 1 +
mov [edi] eax +
push ebx  +
call ds:_close  +
pop ecx  +
push [ebp+arg_4]  +
call ds:free  +
mov eax [ebp+var_8] +
pop ecx  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
push [ebp+arg_0]  +
push offset aS_2  +
push offset aReadFailureDoi  +
push [ebp+arg_8]  +
call sub_1006F95  +
add esp 10h +
jmp loc_100CC71  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 24h +
push ebx  +
push edi  +
mov edi [ebp+arg_0] +
mov eax [edi+78h] +
sub eax [edi+74h] +
mov [ebp+arg_0] eax +
fild  [ebp+arg_0] +
fdiv  ds:dbl_100D168 +
fstp  [ebp+var_14] +
fldz   +
fcomp  [ebp+var_14] +
fnstsw  ax +
test ah 44h +
jp loc_100CD28  +
fld1   +
fstp  [ebp+var_14] +
mov eax [edi+60h] +
fild  dword ptr [edi+60h] +
test eax eax +
jge loc_100CD38  +
fadd  ds:dbl_100D160 +
fdiv  [ebp+var_14] +
fmul  ds:dbl_100D158 +
fstp  [ebp+var_24] +
fld  [ebp+var_14] +
fdiv  ds:dbl_100D150 +
call sub_101245C  +
mov [ebp+var_C] eax +
imul eax eax +
mov [ebp+arg_0] eax +
fild  [ebp+arg_0] +
fsubr  [ebp+var_14] +
fld  ds:dbl_100D148 +
fdivr st st(1) +
call sub_101245C  +
mov [ebp+var_8] eax +
imul eax eax +
mov [ebp+arg_0] eax +
lea eax [ebp+var_4] +
push eax  +
fild  [ebp+arg_0] +
fsubp st(1) st +
fstp  [ebp+var_1C] +
call ds:time  +
mov ebx [ebp+arg_4] +
pop ecx  +
push ebx  +
push offset aInffilename  +
push dword ptr [edi+8]  +
call sub_1004F32  +
test eax eax +
jnz loc_100CDA9  +
mov eax offset dword_1003800 +
jmp loc_100CDAF  +
push eax  +
call sub_10060B6  +
push ebx  +
push offset dword_1003934  +
lea ecx [ebp+var_4] +
push ecx  +
push eax  +
push edi  +
call sub_10071E2  +
test eax eax +
jnz loc_100CDCB  +
xor eax eax +
jmp loc_100D024  +
push ebx  +
push dword ptr [edi+70h]  +
call sub_1010821  +
test eax eax +
jz loc_100CDC4  +
and dword ptr [edi+70h] 0 +
push ebx  +
push offset aRptfilename  +
push dword ptr [edi+8]  +
call sub_1004F32  +
test eax eax +
jnz loc_100CDF7  +
mov [ebp+arg_4] offset aSetup_rpt +
jmp loc_100CE00  +
push eax  +
call sub_10060B6  +
mov [ebp+arg_4] eax +
push esi  +
push offset aWt  +
push [ebp+arg_4]  +
call ds:fopen  +
pop ecx  +
pop ecx  +
mov [ebp+arg_0] eax +
mov esi offset aS_2 +
test eax eax +
jnz loc_100CE3C  +
push [ebp+arg_4]  +
push esi  +
push offset aCannotCreateRe  +
push ebx  +
call sub_1006F95  +
add esp 10h +
push ebx  +
push edi  +
call sub_100C27E  +
push ebx  +
call sub_100683B  +
lea eax [ebp+var_4] +
push eax  +
lea ebx [edi+1B4h] +
call ds:ctime  +
push eax  +
push esi  +
push offset aMakecabReport1  +
mov esi 800h +
push esi  +
push ebx  +
call sub_1001711  +
add esp 18h +
cmp [ebp+arg_0] 0 +
jz loc_100CE7A  +
push ebx  +
push offset aS  +
push [ebp+arg_0]  +
call ds:fprintf  +
add esp 0Ch +
push dword ptr [edi+68h]  +
push offset dword_100D10C  +
push offset aTotalFiles1  +
push esi  +
push ebx  +
call sub_1001711  +
add esp 14h +
push 1  +
push ebx  +
push edi  +
call sub_10021B4  +
cmp [ebp+arg_0] 0 +
jz loc_100CEB2  +
push ebx  +
push offset aS  +
push [ebp+arg_0]  +
call ds:fprintf  +
add esp 0Ch +
push dword ptr [edi+60h]  +
push offset dword_100D10C  +
push offset aBytesBefore1  +
push esi  +
push ebx  +
call sub_1001711  +
add esp 14h +
push 1  +
push ebx  +
push edi  +
call sub_10021B4  +
cmp [ebp+arg_0] 0 +
jz loc_100CEEA  +
push ebx  +
push offset aS  +
push [ebp+arg_0]  +
call ds:fprintf  +
add esp 0Ch +
push dword ptr [edi+64h]  +
push offset dword_100D10C  +
push offset aBytesAfter1  +
push esi  +
push ebx  +
call sub_1001711  +
add esp 14h +
push 1  +
push ebx  +
push edi  +
call sub_10021B4  +
cmp [ebp+arg_0] 0 +
jz loc_100CF22  +
push ebx  +
push offset aS  +
push [ebp+arg_0]  +
call ds:fprintf  +
add esp 0Ch +
mov eax [edi+60h] +
test eax eax +
jbe loc_100CF53  +
mov ecx [edi+64h] +
fild  dword ptr [edi+64h] +
test ecx ecx +
jge loc_100CF39  +
fadd  ds:flt_100A704 +
mov [ebp+arg_4] eax +
fild  [ebp+arg_4] +
test eax eax +
jge loc_100CF49  +
fadd  ds:flt_100A704 +
fdivp st(1) st +
fmul  ds:dbl_1001188 +
jmp loc_100CF55  +
fldz   +
push ecx  +
push ecx  +
fstp  [esp+50h+var_50] +
push offset dword_100117C  +
push offset aAfterBefore1Co  +
push esi  +
push ebx  +
call sub_1001711  +
add esp 18h +
push 1  +
push ebx  +
push edi  +
call sub_10021B4  +
cmp [ebp+arg_0] 0 +
jz loc_100CF8F  +
push ebx  +
push offset aS  +
push [ebp+arg_0]  +
call ds:fprintf  +
add esp 0Ch +
fld  [ebp+var_1C] +
push ecx  +
push ecx  +
fstp  [esp+50h+var_50] +
push [ebp+var_8]  +
fld  [ebp+var_14] +
push [ebp+var_C]  +
push ecx  +
push ecx  +
fstp  [esp+60h+var_60] +
push offset a9_2f2d2d5_2f  +
push offset aTime1Seconds2H  +
push esi  +
push ebx  +
call sub_1001711  +
add esp 28h +
push 1  +
push ebx  +
push edi  +
call sub_10021B4  +
cmp [ebp+arg_0] 0 +
jz loc_100CFDA  +
push ebx  +
push offset aS  +
push [ebp+arg_0]  +
call ds:fprintf  +
add esp 0Ch +
fld  [ebp+var_24] +
push ecx  +
push ecx  +
fstp  [esp+50h+var_50] +
push offset dword_100D050  +
push offset aThroughput1KbS  +
push esi  +
push ebx  +
call sub_1001711  +
add esp 18h +
push 1  +
push ebx  +
push edi  +
call sub_10021B4  +
cmp [ebp+arg_0] 0 +
pop esi  +
jz loc_100D021  +
push ebx  +
push offset aS  +
push [ebp+arg_0]  +
call ds:fprintf  +
push [ebp+arg_0]  +
call ds:fclose  +
add esp 10h +
xor eax eax +
inc eax  +
pop edi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
mov eax dword_1017000 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_C] +
push ebx  +
mov ebx [ebp+arg_4] +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov edi [ebp+arg_8] +
push edi  +
push esi  +
mov [ebp+var_14] eax +
call sub_100B170  +
test eax eax +
jz loc_100D1B8  +
push 0Ah  +
push 0Ch  +
lea ecx [ebp+var_10] +
push ecx  +
push eax  +
call sub_1012222  +
add esp 10h +
lea edi [ebp+var_10] +
push [ebp+var_14]  +
push edi  +
push ebx  +
push dword ptr [esi+8]  +
call sub_1011F9B  +
test eax eax +
jnz loc_100D1D0  +
xor eax eax +
jmp loc_100D26A  +
cmp dword ptr [esi+10h] 0 +
jnz loc_100D1F7  +
cmp dword ptr [esi+0Ch] 0 +
jz loc_100D1F7  +
push eax  +
call sub_1003E13  +
test al 4 +
jz loc_100D1F7  +
push [ebp+var_14]  +
push edi  +
push ebx  +
push dword ptr [esi+0Ch]  +
call sub_1011F9B  +
test eax eax +
jz loc_100D1C9  +
push offset aMaxdisksize  +
push ebx  +
call ds:_stricmp  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_100D216  +
push [ebp+var_14]  +
push eax  +
push edi  +
push esi  +
call sub_100C1B6  +
jmp loc_100D26A  +
mov edi offset aGenerateinf +
push edi  +
push ebx  +
call ds:_stricmp  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_100D267  +
mov eax [esi+90h] +
dec eax  +
jz loc_100D267  +
dec eax  +
jz loc_100D27B  +
dec eax  +
jnz loc_100D1C9  +
push [ebp+var_14]  +
push edi  +
push dword ptr [esi+8]  +
call sub_1004F32  +
test eax eax +
jnz loc_100D256  +
push offset aOn  +
call ds:atoi  +
pop ecx  +
jmp loc_100D25C  +
push eax  +
call sub_1006236  +
test eax eax +
jz loc_100D27B  +
and dword ptr [esi+94h] 0 +
xor eax eax +
inc eax  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_10026CE  +
leave   +
retn 10h  +
push offset aCannotChangeIn  +
push [ebp+var_14]  +
call sub_1006F95  +
pop ecx  +
pop ecx  +
jmp loc_100D1C9  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_4] +
push esi  +
push edi  +
push [ebp+arg_C]  +
mov edi [ebp+arg_0] +
lea esi [ebx+4] +
push esi  +
push dword ptr [edi+8]  +
call sub_1004F32  +
test eax eax +
jnz loc_100D2F9  +
push [ebp+arg_C]  +
push eax  +
push 2  +
push 5  +
push offset dword_1001178  +
push esi  +
push dword ptr [edi+8]  +
call sub_1005563  +
test eax eax +
jnz loc_100D336  +
xor eax eax +
jmp loc_100D344  +
push eax  +
call sub_1003E13  +
test al 2 +
jz loc_100D320  +
push esi  +
push offset aDefine  +
push offset dword_100A5F8  +
push offset aCannot1AVariab  +
push [ebp+arg_C]  +
call sub_1006F95  +
add esp 14h +
jmp loc_100D2F5  +
test al 1 +
jz loc_100D336  +
push esi  +
push offset aDefine  +
push offset dword_100A5F8  +
push offset aCannot1AStanda  +
jmp loc_100D313  +
push [ebp+arg_C]  +
add ebx 24h +
push ebx  +
push esi  +
push edi  +
call sub_100D175  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
push [ebp+arg_4]  +
push esi  +
call sub_100C12D  +
mov edi eax +
cmp edi 0FFFFFFFFh +
jz loc_100D409  +
push [ebp+arg_4]  +
push offset aClustersize  +
push dword ptr [esi+8]  +
call sub_1004F32  +
test eax eax +
jnz loc_100D3D9  +
push offset a1_44m  +
call ds:atol  +
pop ecx  +
jmp loc_100D3DF  +
push eax  +
call sub_100631F  +
mov ecx eax +
mov eax edi +
cdq   +
idiv  ecx +
imul eax ecx +
cmp edi eax +
jnz loc_100D3F2  +
xor eax eax +
inc eax  +
jmp loc_100D40B  +
push ecx  +
push edi  +
push offset loc_100D44C  +
push offset aMaxdisksize1Is  +
push [ebp+arg_4]  +
call sub_1006F95  +
add esp 14h +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20Ch +
push [ebp+arg_8]  +
lea eax [ebp+var_20C] +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push eax  +
call sub_100B5FE  +
test eax eax +
jz locret_100D495  +
push [ebp+arg_8]  +
lea eax [ebp+var_1E8] +
push eax  +
lea eax [ebp+var_208] +
push eax  +
push [ebp+arg_0]  +
call sub_100D175  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_C] +
push dword ptr [ecx+4]  +
call sub_100C307  +
mov ecx [ecx] +
cmp ecx 9 +
ja loc_100D585  +
jmp ds:off_100D5A2[ecx*4]  +
push [ebp+arg_8]  +
push offset aS_2  +
push offset a1OutOfMemory  +
push [ebp+arg_0]  +
call sub_1006F95  +
add esp 10h +
jmp loc_100D59E  +
push [ebp+arg_8]  +
push offset aS_2  +
push offset a1UnknownCompre  +
jmp loc_100D4CD  +
mov eax [ebp+arg_4] +
add eax 0B4h +
push eax  +
push [ebp+arg_8]  +
push offset dword_100A5F8  +
push offset a1FailureCompre  +
jmp loc_100D593  +
push [ebp+arg_8]  +
push offset aS_2  +
push offset a1UserAborted  +
jmp loc_100D4CD  +
push eax  +
mov eax [ebp+arg_4] +
add eax 0B4h +
push eax  +
push [ebp+arg_8]  +
push offset dword_100A5E8  +
push offset a1FailureOpenin  +
push [ebp+arg_0]  +
call sub_1006F95  +
add esp 18h +
jmp loc_100D59E  +
push eax  +
mov eax [ebp+arg_4] +
add eax 0B4h +
push eax  +
push [ebp+arg_8]  +
push offset dword_100A5E8  +
push offset a1FailureReadin  +
jmp loc_100D52D  +
push eax  +
push [ebp+arg_8]  +
push offset dword_100A5F8  +
push offset a1FailureOnTemp  +
jmp loc_100D593  +
push eax  +
push [ebp+arg_8]  +
push offset dword_100A5F8  +
push offset a1FailureCreati  +
jmp loc_100D593  +
push [ebp+arg_8]  +
push offset aS_2  +
push offset a1DataSizeOrFil  +
jmp loc_100D4CD  +
push ecx  +
push [ebp+arg_8]  +
push offset dword_100A514  +
push offset a1UnknownError2  +
push [ebp+arg_0]  +
call sub_1006F95  +
add esp 14h +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_1C] +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
push ebx  +
push [ebp+arg_18]  +
lea edi [esi+1B4h] +
push [ebp+arg_14]  +
push [ebp+arg_C]  +
push 800h  +
push edi  +
call sub_10116CD  +
test eax eax +
jnz loc_100D76F  +
xor eax eax +
jmp loc_100D7F4  +
push ebx  +
push edi  +
push dword ptr [esi+8]  +
call sub_1004F32  +
test eax eax +
jz loc_100D7BE  +
push eax  +
call sub_10060B6  +
mov ecx eax +
lea esi [ecx+1] +
mov dl [ecx] +
inc ecx  +
test dl dl +
jnz loc_100D788  +
mov edx [ebp+arg_8] +
sub ecx esi +
push eax  +
cmp ecx edx +
jb loc_100D7B3  +
dec edx  +
push edx  +
push [ebp+arg_18]  +
push offset dword_100A754  +
push offset a1ExceedsMaximu  +
push ebx  +
call sub_1006F95  +
add esp 18h +
jmp loc_100D768  +
push edx  +
push [ebp+arg_4]  +
call sub_1002515  +
jmp loc_100D7F1  +
push ebx  +
call sub_100683B  +
push ebx  +
push [ebp+arg_10]  +
push dword ptr [esi+8]  +
call sub_1004F32  +
push eax  +
call sub_10060B6  +
push ebx  +
push [ebp+arg_18]  +
push [ebp+arg_14]  +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
call sub_10116CD  +
test eax eax +
jz loc_100D768  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 20h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+10h] +
push esi  +
push dword ptr [eax+4]  +
mov esi [eax] +
push dword ptr [ebp+0Ch]  +
push esi  +
push dword ptr [ebp+8]  +
call sub_100652F  +
test eax eax +
jz loc_100D84D  +
and dword ptr [esi+24h] 0 +
and dword ptr [esi+28h] 0 +
xor eax eax +
inc eax  +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_8] 0 +
push esi  +
jnz loc_100D8EA  +
mov ecx [ebp+arg_0] +
cmp dword ptr [ecx+94h] 0 +
jnz loc_100D892  +
push offset dword_100A4B4  +
push offset aS_2  +
push offset aDirective1NotV  +
push [ebp+arg_C]  +
call sub_1006F95  +
add esp 10h +
xor eax eax +
jmp loc_100D9B8  +
mov esi [ebp+arg_4] +
mov eax [esi+4] +
test eax eax +
jle loc_100D88B  +
cmp eax 2 +
jle loc_100D8A8  +
cmp eax 3 +
jz loc_100D8B5  +
jmp loc_100D88B  +
push [ebp+arg_C]  +
push ecx  +
call sub_100C0D6  +
test eax eax +
jz loc_100D8BD  +
xor eax eax +
inc eax  +
jmp loc_100D9B8  +
cmp dword ptr [esi+4] 1 +
mov eax offset aFolder +
jz loc_100D8CD  +
mov eax offset aCabinet +
push eax  +
push offset dword_100A4B4  +
push offset dword_100A5F8  +
push offset aDirective12Not  +
push [ebp+arg_C]  +
call sub_1006F95  +
add esp 14h +
jmp loc_100D88B  +
mov esi [ebp+arg_0] +
mov eax [ebp+arg_4] +
push ebx  +
push edi  +
mov edi [ebp+arg_C] +
mov [esi+0C04h] esi +
mov [esi+0C08h] edi +
mov eax [eax+4] +
dec eax  +
push 1  +
pop ebx  +
jz loc_100D96C  +
dec eax  +
jz loc_100D929  +
dec eax  +
jnz loc_100D9AC  +
push edi  +
push esi  +
mov [esi+0ACh] ebx +
call sub_100C0D6  +
test eax eax +
jz loc_100D9B4  +
mov eax [esi+44h] +
test eax eax +
jz loc_100D9B4  +
push offset sub_100210E  +
push offset loc_100D824  +
push ebx  +
push eax  +
call sub_1002CDD  +
add esp 10h +
test eax eax +
jnz loc_100D966  +
mov eax [esi+0C08h] +
cmp dword ptr [eax+200h] 0 +
jnz loc_100D9AC  +
lea eax [esi+48h] +
push eax  +
push offset aFciflushcabine  +
jmp loc_100D9A5  +
and dword ptr [esi+28h] 0 +
jmp loc_100D9B4  +
mov eax [esi+44h] +
test eax eax +
jnz loc_100D976  +
inc eax  +
jmp loc_100D9B6  +
push offset sub_100210E  +
push offset loc_100D824  +
push eax  +
call sub_1012721  +
add esp 0Ch +
test eax eax +
jnz loc_100D9B0  +
mov eax [esi+0C08h] +
cmp dword ptr [eax+200h] 0 +
jnz loc_100D9AC  +
lea eax [esi+48h] +
push eax  +
push offset aFciflushfolder  +
push esi  +
push edi  +
call sub_100D49E  +
xor eax eax +
jmp loc_100D9B6  +
and dword ptr [esi+24h] 0 +
mov eax ebx +
pop edi  +
pop ebx  +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
mov eax [esi+44h] +
test eax eax +
jnz loc_100DA34  +
inc eax  +
jmp loc_100DAA0  +
push edi  +
mov edi [ebp+arg_4] +
push offset sub_100210E  +
push offset loc_100D824  +
push 0  +
push eax  +
mov [esi+0C04h] esi +
mov [esi+0C08h] edi +
call sub_1002CDD  +
add esp 10h +
test eax eax +
jnz loc_100DA77  +
mov eax [esi+0C08h] +
cmp dword ptr [eax+200h] 0 +
jnz loc_100DA94  +
lea eax [esi+48h] +
push eax  +
push offset aFciflushcabine  +
jmp loc_100DA8D  +
push dword ptr [esi+44h]  +
call sub_1003386  +
pop ecx  +
test eax eax +
jnz loc_100DA98  +
lea eax [esi+48h] +
push eax  +
push offset aFcidestroy  +
push esi  +
push edi  +
call sub_100D49E  +
xor eax eax +
jmp loc_100DA9F  +
and dword ptr [esi+44h] 0 +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 328h +
mov eax dword_1017000 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
mov ebx [ebp+arg_4] +
push esi  +
mov esi [ebp+arg_0] +
cmp dword ptr [esi+44h] 0 +
push edi  +
jnz loc_100DB5E  +
push ebx  +
push 0  +
push esi  +
lea eax [ebp+var_328] +
push eax  +
call sub_100652F  +
test eax eax +
jnz loc_100DAEA  +
xor eax eax +
jmp loc_100DB61  +
push ebx  +
push esi  +
lea eax [ebp+var_328] +
push eax  +
call sub_1006251  +
test eax eax +
jz loc_100DAE6  +
lea eax [esi+0C04h] +
push eax  +
lea eax [ebp+var_328] +
push eax  +
push offset loc_10024BB  +
push offset loc_10028E0  +
push offset loc_10012DF  +
push offset loc_10012BB  +
push offset loc_100128E  +
push offset loc_1001A8B  +
push offset sub_10011C3  +
push offset loc_10011B2  +
push offset loc_1001195  +
lea edi [esi+48h] +
push offset loc_1002904  +
push edi  +
call sub_100780E  +
add esp 34h +
mov [esi+44h] eax +
test eax eax +
jnz loc_100DB5E  +
push edi  +
push offset aFcicreate  +
push esi  +
push ebx  +
call sub_100D49E  +
jmp loc_100DAE6  +
xor eax eax +
inc eax  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_10026CE  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
sub esp 40h +
push ebx  +
mov ebx [ebp+arg_4] +
push edi  +
push [ebp+arg_C]  +
lea edi [ebx+4] +
push offset dword_1001178  +
push edi  +
push dword ptr [eax+84h]  +
call sub_100FA16  +
test eax eax +
jnz loc_100DBBF  +
push edi  +
push offset aS_2  +
push offset aNoSuchFileInLa  +
push [ebp+arg_C]  +
call sub_1006F95  +
add esp 10h +
xor eax eax +
jmp loc_100DC43  +
push esi  +
push eax  +
call sub_10060B6  +
push [ebp+arg_C]  +
mov esi eax +
push offset aFileParameter  +
push offset loc_100AA42  +
push dword ptr [esi+24h]  +
add ebx 104h +
push ebx  +
mov [ebp+arg_4] esi +
call sub_100F933  +
test eax eax +
jz loc_100DC29  +
cmp [ebp+arg_8] 0 +
jnz loc_100DC1A  +
push 10h  +
pop ecx  +
push [ebp+arg_C]  +
lea eax [ebp+var_40] +
push eax  +
push dword ptr [ebx]  +
lea edi [ebp+var_40] +
push [ebp+arg_0]  +
movs   +
call sub_1010F8A  +
test eax eax +
jz loc_100DC29  +
mov eax [ebp+arg_4] +
or dword ptr [eax+18h] 2 +
xor eax eax +
inc eax  +
jmp loc_100DC42  +
push [ebp+arg_C]  +
push [ebp+arg_0]  +
call sub_100DA21  +
test eax eax +
jnz loc_100DC2D  +
xor eax eax +
jmp loc_100DC42  +
push [ebp+arg_C]  +
push dword ptr [ebx]  +
push esi  +
push edi  +
push [ebp+arg_0]  +
call sub_1011383  +
neg eax  +
sbb eax eax +
neg eax  +
pop esi  +
pop edi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_4] +
mov eax [esi] +
dec eax  +
cmp eax 0Dh +
ja loc_100DD19  +
jmp ds:off_100DD6B[eax*4]  +
xor eax eax +
inc eax  +
jmp loc_100DD1B  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push esi  +
push [ebp+arg_0]  +
call sub_100C052  +
jmp loc_100DD1B  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push esi  +
push [ebp+arg_0]  +
call sub_100BEFE  +
jmp loc_100DD1B  +
push [ebp+arg_C]  +
lea eax [esi+8] +
push eax  +
push dword ptr [esi+4]  +
push [ebp+arg_0]  +
call sub_100C666  +
jmp loc_100DD1B  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push esi  +
push [ebp+arg_0]  +
call sub_100D855  +
jmp loc_100DD1B  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push esi  +
push [ebp+arg_0]  +
call sub_100C082  +
jmp loc_100DD1B  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push esi  +
push [ebp+arg_0]  +
call sub_1005B3E  +
test eax eax +
jz loc_100DD09  +
cmp [ebp+arg_8] 0 +
jnz loc_100DC90  +
mov esi [esi+204h] +
test esi esi +
jz loc_100DD19  +
push esi  +
call sub_100F701  +
xor eax eax +
pop esi  +
pop ebp  +
retn 10h  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push esi  +
push [ebp+arg_0]  +
call sub_100DB77  +
test eax eax +
jz loc_100DD3D  +
cmp [ebp+arg_8] 0 +
jnz loc_100DC90  +
mov esi [esi+104h] +
jmp loc_100DD0F  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push esi  +
push [ebp+arg_0]  +
call sub_100D2BA  +
jmp loc_100DD1B  +
push [ebp+arg_C]  +
lea eax [esi+24h] +
push eax  +
add esi 4 +
push esi  +
push [ebp+arg_0]  +
call sub_100D175  +
jmp loc_100DD1B  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+1Ch] +
cmp dword ptr [esi+200h] 0 +
jnz loc_100DDD1  +
push esi  +
push 1  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call sub_100DC74  +
cmp dword ptr [esi+200h] 0 +
jz loc_100DDEB  +
push esi  +
push dword ptr [ebp+8]  +
call sub_100C27E  +
push offset aMakecabAbort_0  +
push esi  +
call sub_1006F95  +
pop ecx  +
pop ecx  +
xor eax eax +
jmp loc_100DDEE  +
xor eax eax +
inc eax  +
pop esi  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 220h +
mov eax dword_1017000 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
xor ebx ebx +
push edi  +
mov edi [ebp+arg_4] +
mov [ebp+var_220] ebx +
cmp [esi+40h] ebx +
jnz loc_100DE3D  +
push ebx  +
push offset aParsingDirec_0  +
jmp loc_100DE51  +
push 1  +
push offset aPass1CheckingD  +
push esi  +
call sub_10021B4  +
push 1  +
push offset asc_100E1A8  +
push esi  +
call sub_10021B4  +
push edi  +
push dword ptr [esi+8]  +
call sub_1011F22  +
mov [esi+0Ch] eax +
cmp eax ebx +
jz loc_100E085  +
push dword ptr [esi+4]  +
call sub_1003E27  +
jmp loc_100DECA  +
push ebx  +
call sub_1003E27  +
push edi  +
push 1000h  +
push 0  +
push eax  +
mov [edi+204h] eax +
call sub_1011808  +
mov [ebp+var_220] eax +
test eax eax +
jz loc_100E085  +
push edi  +
push offset loc_10066BB  +
push eax  +
push esi  +
call sub_100BD91  +
test eax eax +
jz loc_100E085  +
push [ebp+var_220]  +
call sub_1011B78  +
and [ebp+var_220] 0 +
push ebx  +
call sub_100E208  +
mov ebx eax +
test ebx ebx +
jnz loc_100DE75  +
and [edi+204h] eax +
cmp [esi+0A0h] eax +
jz loc_100DEE5  +
push edi  +
push esi  +
call sub_1006CCD  +
push edi  +
push esi  +
call sub_100CA88  +
mov eax [esi+38h] +
test eax eax +
jle loc_100DF13  +
push eax  +
push offset dword_100A7A0  +
push offset aMakecabAbort_1  +
push edi  +
call sub_1006F95  +
add esp 10h +
and dword ptr [edi+204h] 0 +
jmp loc_100E085  +
push edi  +
push offset aInffilename  +
push dword ptr [esi+8]  +
call sub_1004F32  +
test eax eax +
jnz loc_100DF2C  +
mov eax offset dword_1003800 +
jmp loc_100DF32  +
push eax  +
call sub_10060B6  +
push edi  +
push offset dword_100E174  +
push eax  +
call sub_100E892  +
test eax eax +
jz loc_100E085  +
push edi  +
push offset aRptfilename  +
push dword ptr [esi+8]  +
call sub_1004F32  +
test eax eax +
jnz loc_100DF5F  +
mov eax offset aSetup_rpt +
jmp loc_100DF65  +
push eax  +
call sub_10060B6  +
push edi  +
push offset dword_100E168  +
push eax  +
call sub_100E892  +
test eax eax +
jz loc_100E085  +
push edi  +
push esi  +
call sub_1011484  +
test eax eax +
jz loc_100E085  +
xor ebx ebx +
inc ebx  +
cmp dword ptr [esi+40h] 0 +
mov [esi+10h] ebx +
jnz loc_100DFCA  +
push dword ptr [esi+68h]  +
lea ebx [esi+1B4h] +
push dword ptr [esi+5Ch]  +
push offset dword_100E15C  +
push offset a1BytesIn2Files  +
push 800h  +
push ebx  +
call sub_1001711  +
add esp 18h +
push 1  +
push ebx  +
push esi  +
call sub_10021B4  +
push 0  +
push offset aExecutingDirec  +
jmp loc_100DFDC  +
push ebx  +
push offset aPass2Processin  +
push esi  +
call sub_10021B4  +
push ebx  +
push offset asc_100E0DC  +
push esi  +
call sub_10021B4  +
push edi  +
push dword ptr [esi+8]  +
call sub_1003271  +
test eax eax +
jz loc_100E085  +
mov eax [esi+0Ch] +
and dword ptr [esi+0Ch] 0 +
push esi  +
mov [esi+8] eax +
call sub_1003B85  +
push dword ptr [esi+4]  +
call sub_1003E27  +
jmp loc_100E05A  +
push ebx  +
call sub_1003E27  +
push edi  +
push 1000h  +
push 0  +
push eax  +
mov [edi+204h] eax +
call sub_1011808  +
mov [ebp+var_220] eax +
test eax eax +
jz loc_100E085  +
push edi  +
push offset loc_100DDA8  +
push eax  +
push esi  +
call sub_100BD91  +
test eax eax +
jz loc_100E085  +
push [ebp+var_220]  +
call sub_1011B78  +
and [ebp+var_220] 0 +
push ebx  +
call sub_100E208  +
mov ebx eax +
test ebx ebx +
jnz loc_100E00D  +
and [edi+204h] eax +
push edi  +
push esi  +
call sub_100DA21  +
test eax eax +
jz loc_100E085  +
call ds:clock  +
push edi  +
push esi  +
mov [esi+78h] eax +
call sub_100CCF5  +
test eax eax +
jnz loc_100E0C5  +
mov eax [esi+70h] +
test eax eax +
jz loc_100E099  +
lea ecx [ebp+var_21C] +
push ecx  +
push eax  +
call sub_1010821  +
cmp [ebp+var_220] 0 +
jz loc_100E0AD  +
push [ebp+var_220]  +
call sub_1011B78  +
mov esi [esi+0Ch] +
test esi esi +
jz loc_100E0C1  +
lea eax [ebp+var_21C] +
push eax  +
push esi  +
call sub_1003271  +
xor eax eax +
jmp loc_100E0C8  +
xor eax eax +
inc eax  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_10026CE  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax+10h] +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax] +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax+8] +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax+4] +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
mov eax [esi] +
test eax eax +
jz loc_100E28D  +
push eax  +
call ds:fclose  +
pop ecx  +
cmp eax 0FFFFFFFFh +
jnz loc_100E28A  +
push dword ptr [esi+8]  +
push offset aCannotClose1  +
push [ebp+arg_4]  +
call sub_1006F95  +
add esp 0Ch +
xor eax eax +
jmp loc_100E290  +
and dword ptr [esi] 0 +
xor eax eax +
inc eax  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_4]  +
mov esi [ebp+arg_0] +
push dword ptr [esi+4]  +
call ds:fopen  +
pop ecx  +
pop ecx  +
mov [esi] eax +
test eax eax +
jnz loc_100E2E5  +
push dword ptr [esi+4]  +
push dword ptr [esi+8]  +
push offset dword_100A5F8  +
push offset aCannotOpen12  +
push [ebp+arg_8]  +
call sub_1006F95  +
add esp 14h +
xor eax eax +
cmp [esi] eax +
pop esi  +
setnz al  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
mov eax [esi] +
push edi  +
test eax eax +
jz loc_100E324  +
push eax  +
call ds:fclose  +
pop ecx  +
push dword ptr [esi+4]  +
call ds:remove  +
pop ecx  +
test eax eax +
jz loc_100E34D  +
push dword ptr [esi+4]  +
push dword ptr [esi+8]  +
push offset dword_100A5F8  +
push offset aCannotDelete12  +
push [ebp+arg_4]  +
call sub_1006F95  +
add esp 14h +
mov eax [esi+8] +
mov edi ds:free +
test eax eax +
jz loc_100E35E  +
push eax  +
call edi  +
pop ecx  +
mov eax [esi+4] +
test eax eax +
jz loc_100E369  +
push eax  +
call edi  +
pop ecx  +
push esi  +
call edi  +
pop ecx  +
xor eax eax +
pop edi  +
inc eax  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov cl [eax] +
test cl cl +
jz loc_100E3BC  +
cmp cl 5Ch +
jz loc_100E3BC  +
cmp cl 2Fh +
jz loc_100E3BC  +
cmp cl 3Ah +
jz loc_100E3BC  +
inc eax  +
mov byte ptr [eax] 5Ch +
mov byte ptr [eax+1] 0 +
xor eax eax +
inc eax  +
jmp loc_100E3BE  +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test ax ax +
jnz loc_100E3DB  +
mov eax 80h +
jmp loc_100E3DE  +
and eax 27h +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_4] +
xor eax eax +
mov ecx 80070057h +
test edx edx +
jz loc_100E402  +
cmp edx 7FFFFFFFh +
jbe loc_100E404  +
mov eax ecx +
test eax eax +
jl loc_100E42B  +
cmp [ebp+arg_C] 7FFFFFFEh +
jbe loc_100E41B  +
mov eax ecx +
mov ecx [ebp+arg_0] +
mov byte ptr [ecx] 0 +
jmp loc_100E42B  +
push [ebp+arg_C]  +
mov eax [ebp+arg_8] +
mov ecx [ebp+arg_0] +
push 0  +
call sub_1002551  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 11Ch +
mov eax dword_1017000 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_8] +
push ebx  +
mov ebx ds:CharNextExA +
push esi  +
push edi  +
mov edi [ebp+lpCurrentChar] +
mov cl [edi] +
mov [ebp+var_108] eax +
mov [ebp+var_11C] edi +
mov eax edi +
jmp loc_100E48F  +
cmp cl 5Ch +
jz loc_100E493  +
cmp cl 2Fh +
jz loc_100E493  +
cmp cl 3Ah +
jnz loc_100E486  +
mov cl [eax+1] +
cmp cl 5Ch +
jz loc_100E486  +
cmp cl 2Fh +
jnz loc_100E493  +
push 0  +
push eax  +
push 0  +
call ebx  +
mov cl [eax] +
test cl cl +
jnz loc_100E46A  +
mov [ebp+var_104] 0 +
cmp byte ptr [eax] 0 +
jnz loc_100E4A5  +
cmp [ebp+arg_4] 0 +
jnz loc_100E4A7  +
mov eax edi +
cmp byte ptr [eax] 0 +
jz loc_100E535  +
mov cl [eax] +
test cl cl +
jz loc_100E535  +
mov esi eax +
mov al cl +
cmp al 5Ch +
jz loc_100E4E0  +
cmp al 2Fh +
jz loc_100E4E0  +
cmp al 3Ah +
jnz loc_100E4D1  +
mov al [esi+1] +
cmp al 5Ch +
jz loc_100E4D1  +
cmp al 2Fh +
jnz loc_100E4E0  +
push 0  +
push esi  +
push 0  +
call ebx  +
mov esi eax +
mov al [esi] +
test al al +
jnz loc_100E4BA  +
mov cl [esi] +
test cl cl +
jnz loc_100E4EC  +
cmp [ebp+arg_4] 0 +
jnz loc_100E529  +
mov eax esi +
sub eax edi +
test eax eax +
jle loc_100E500  +
cmp cl 3Ah +
jz loc_100E4FF  +
cmp byte ptr [esi-1] 3Ah +
jnz loc_100E500  +
inc eax  +
push eax  +
push edi  +
push 100h  +
lea eax [ebp+var_104] +
push eax  +
call sub_100E3E7  +
test eax eax +
jl loc_100E6BB  +
lea eax [ebp+var_104] +
push eax  +
call ds:_mkdir  +
pop ecx  +
cmp byte ptr [esi] 0 +
lea eax [esi+1] +
jnz loc_100E4B0  +
lea eax [ebp+var_104] +
lea edx [eax+1] +
mov cl [eax] +
inc eax  +
test cl cl +
jnz loc_100E53E  +
sub eax edx +
jnz loc_100E570  +
mov eax edi +
lea edx [eax+1] +
mov cl [eax] +
inc eax  +
test cl cl +
jnz loc_100E54E  +
sub eax edx +
jz loc_100E570  +
mov al [edi] +
cmp al 5Ch +
jz loc_100E563  +
cmp al 2Fh +
jnz loc_100E570  +
mov [ebp+var_104] al +
mov byte ptr [ebp-103h] 0 +
lea eax [ebp+var_104] +
lea edx [eax+1] +
mov cl [eax] +
inc eax  +
test cl cl +
jnz loc_100E579  +
sub eax edx +
mov edx eax +
mov [ebp+var_114] edx +
test edx edx +
jle loc_100E5A9  +
cmp edx 0FEh +
ja loc_100E6BB  +
lea eax [ebp+edx+var_108+3] +
push eax  +
call sub_100E392  +
add edx eax +
and [ebp+var_110] 0 +
and [ebp+var_10C] 0 +
mov esi ds:__imp__errno +
mov edi ds:__doserrno +
mov [ebp+var_118] 100h +
sub [ebp+var_118] edx +
lea ebx [ebp+edx+var_104] +
call ds:GetCurrentProcessId  +
add eax [ebp+var_10C] +
push eax  +
push offset loc_100E880  +
push [ebp+var_118]  +
push ebx  +
call sub_100130C  +
add esp 10h +
test eax eax +
jl loc_100E771  +
push 180h  +
lea eax [ebp+var_104] +
push 502h  +
push eax  +
call ds:_open  +
add esp 0Ch +
cmp eax 0FFFFFFFFh +
jnz loc_100E7A0  +
call esi  +
mov eax [eax] +
sub eax 0Dh +
jz loc_100E6D6  +
sub eax 4 +
jz loc_100E6E9  +
sub eax 5 +
jnz loc_100E745  +
call edi  +
cmp dword ptr [eax] 12Fh +
jz loc_100E6E9  +
call edi  +
mov ebx eax +
call esi  +
mov [ebp+var_11C] eax +
call ds:GetLastError  +
push eax  +
push dword ptr [ebx]  +
mov eax [ebp+var_11C] +
push dword ptr [eax]  +
lea eax [ebp+var_104] +
push eax  +
push offset aEnsuredirector  +
call ds:printf  +
mov eax [ebp+var_114] +
mov [ebp+eax+var_104] 0 +
call edi  +
mov edi eax +
call esi  +
push dword ptr [edi]  +
push dword ptr [eax]  +
lea eax [ebp+var_104] +
push eax  +
push offset aSDD  +
push offset aPathIsInvalid1  +
push [ebp+var_108]  +
call sub_1006F95  +
add esp 2Ch +
jmp loc_100E732  +
push edi  +
push offset aS_2  +
push offset aFileNameTooLon  +
push [ebp+var_108]  +
call sub_1006F95  +
add esp 10h +
jmp loc_100E732  +
inc [ebp+var_110]  +
cmp [ebp+var_110] 5 +
jge loc_100E77C  +
inc [ebp+var_10C]  +
cmp [ebp+var_10C] 3E7h +
jl loc_100E5DA  +
mov eax [ebp+var_114] +
mov [ebp+eax+var_104] 0 +
lea eax [ebp+var_104] +
push eax  +
push [ebp+var_10C]  +
push offset dword_100A554  +
push offset aRanOutOfTempFi  +
push [ebp+var_108]  +
call sub_1006F95  +
add esp 14h +
xor eax eax +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_10026CE  +
leave   +
retn 0Ch  +
dec eax  +
dec eax  +
jnz loc_100E653  +
mov eax [ebp+var_114] +
mov [ebp+eax+var_104] 0 +
lea eax [ebp+var_104] +
push eax  +
push offset aS_2  +
push offset aNoMoreFileHand  +
jmp loc_100E6C6  +
push [ebp+var_11C]  +
jmp loc_100E6BC  +
mov eax [ebp+var_114] +
mov [ebp+eax+var_104] 0 +
lea eax [ebp+var_104] +
push eax  +
push offset aS_2  +
push offset aCouldNotCreate  +
jmp loc_100E6C6  +
push eax  +
call ds:_close  +
lea eax [ebp+var_104] +
push eax  +
call ds:_unlink  +
pop ecx  +
xor eax eax +
pop ecx  +
inc eax  +
jmp loc_100E734  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+lpCurrentChar] +
push edi  +
mov edi [ebp+arg_8] +
push edi  +
push 1  +
push esi  +
call sub_100E434  +
test eax eax +
jnz loc_100E8C7  +
push esi  +
push [ebp+arg_4]  +
push offset dword_100A5F8  +
push offset aCannotCreate12  +
push edi  +
call sub_1006F95  +
add esp 14h +
xor eax eax +
jmp loc_100E914  +
push 180h  +
push 102h  +
push esi  +
call ds:_open  +
add esp 0Ch +
cmp eax 0FFFFFFFFh +
jnz loc_100E901  +
call ds:__imp__errno  +
cmp dword ptr [eax] 18h +
push esi  +
jnz loc_100E8AD  +
push offset aS_2  +
push offset aNoMoreFileHand  +
push edi  +
call sub_1006F95  +
add esp 10h +
jmp loc_100E8C3  +
push eax  +
call ds:_close  +
push esi  +
call ds:_unlink  +
pop ecx  +
xor eax eax +
pop ecx  +
inc eax  +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push ebx  +
push esi  +
push edi  +
mov edi ds:CreateFileA +
xor esi esi +
push esi  +
push esi  +
push 3  +
push esi  +
push esi  +
mov ebx 40000000h +
push ebx  +
push [ebp+lpFileName]  +
call edi  +
mov [ebp+hObject] eax +
cmp eax 0FFFFFFFFh +
jnz loc_100E967  +
push 64h  +
call ds:Sleep  +
push esi  +
push esi  +
push 3  +
push esi  +
push esi  +
push ebx  +
push [ebp+lpFileName]  +
call edi  +
mov [ebp+hObject] eax +
cmp eax 0FFFFFFFFh +
jz loc_100E9DD  +
mov edi [ebp+arg_4] +
lea eax [ebp+LocalFileTime] +
push eax  +
movzx eax word ptr [edi+2] +
push eax  +
movzx eax word ptr [edi] +
push eax  +
call ds:DosDateTimeToFileTime  +
mov ebx eax +
lea eax [ebp+LastWriteTime] +
push eax  +
lea eax [ebp+LocalFileTime] +
push eax  +
call ds:LocalFileTimeToFileTime  +
or ebx eax +
lea eax [ebp+LastWriteTime] +
push eax  +
push esi  +
push esi  +
push [ebp+hObject]  +
call ds:SetFileTime  +
push [ebp+hObject]  +
or ebx eax +
call ds:CloseHandle  +
movzx eax word ptr [edi+4] +
push eax  +
call sub_100E3C7  +
push eax  +
push [ebp+lpFileName]  +
call ds:SetFileAttributesA  +
or eax ebx +
jnz loc_100E9DD  +
push [ebp+lpFileName]  +
push offset aS_2  +
push offset aCannotSetDateT  +
push [ebp+arg_8]  +
call sub_1006F95  +
add esp 10h +
xor eax eax +
jmp loc_100E9E0  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
and [ebp+var_C] 0 +
and [ebp+var_4] 0 +
push esi  +
mov esi ds:_open +
push edi  +
mov edi [ebp+arg_4] +
push 8000h  +
push edi  +
call esi  +
pop ecx  +
pop ecx  +
mov [ebp+var_8] eax +
cmp eax 0FFFFFFFFh +
jnz loc_100EA62  +
push edi  +
push offset aS_2  +
push offset aCannotOpenFile  +
push [ebp+arg_18]  +
call sub_1006F95  +
add esp 10h +
jmp loc_100EBB2  +
push ebx  +
mov ebx [ebp+arg_18] +
push ebx  +
push edi  +
lea eax [ebp+FatDate] +
push eax  +
call sub_1006DF0  +
test eax eax +
jz loc_100EB97  +
cmp [ebp+arg_10] 0 +
jz loc_100EA92  +
push ebx  +
push [ebp+arg_14]  +
lea eax [ebp+FatDate] +
push eax  +
call [ebp+arg_10]  +
test eax eax +
jz loc_100EB97  +
cmp [ebp+arg_8] 0 +
jnz loc_100EAA4  +
mov [ebp+var_C] 1 +
jmp loc_100EB97  +
mov ecx [ebp+arg_C] +
xor edx edx +
inc edx  +
cmp ecx edx +
ja loc_100EAB0  +
mov ecx edx +
mov eax 100000h +
cmp ecx eax +
jnb loc_100EAC3  +
cmp [ebp+arg_C] edx +
ja loc_100EAC6  +
mov [ebp+arg_C] edx +
jmp loc_100EAC6  +
mov [ebp+arg_C] eax +
push [ebp+arg_C]  +
call ds:malloc  +
pop ecx  +
mov [ebp+var_4] eax +
test eax eax +
jnz loc_100EAF3  +
push [ebp+lpFileName]  +
push edi  +
push offset dword_100A5F8  +
push offset aCouldNotAllo_0  +
push ebx  +
call sub_1006F95  +
add esp 14h +
jmp loc_100EB97  +
push 180h  +
push 8301h  +
push [ebp+lpFileName]  +
call esi  +
mov edi eax +
add esp 0Ch +
cmp edi 0FFFFFFFFh +
jnz loc_100EB24  +
push [ebp+lpFileName]  +
push offset aS_2  +
push offset aCannotOpenFile  +
push ebx  +
call sub_1006F95  +
add esp 10h +
jmp loc_100EB8A  +
mov ebx ds:_eof +
jmp loc_100EB5B  +
push [ebp+arg_C]  +
push [ebp+var_4]  +
push [ebp+var_8]  +
call ds:_read  +
mov esi eax +
add esp 0Ch +
cmp esi 0FFFFFFFFh +
jz loc_100EBBB  +
test esi esi +
jz loc_100EB5B  +
push esi  +
push [ebp+var_4]  +
push edi  +
call ds:_write  +
add esp 0Ch +
cmp eax esi +
jnz loc_100EBD0  +
push [ebp+var_8]  +
call ebx  +
pop ecx  +
test eax eax +
jz loc_100EB2C  +
push edi  +
call ds:_close  +
pop ecx  +
push [ebp+arg_18]  +
lea eax [ebp+FatDate] +
push eax  +
push [ebp+lpFileName]  +
or edi 0FFFFFFFFh +
call sub_100E91F  +
test eax eax +
jz loc_100EB97  +
mov [ebp+var_C] 1 +
cmp edi 0FFFFFFFFh +
jz loc_100EB97  +
push edi  +
call ds:_close  +
pop ecx  +
push [ebp+var_8]  +
call ds:_close  +
cmp [ebp+var_4] 0 +
pop ecx  +
pop ebx  +
jz loc_100EBB2  +
push [ebp+var_4]  +
call ds:free  +
pop ecx  +
mov eax [ebp+var_C] +
pop edi  +
pop esi  +
leave   +
retn 1Ch  +
push [ebp+arg_4]  +
push offset aS_2  +
push offset aCannotReadFile  +
push [ebp+arg_18]  +
jmp loc_100EB1A  +
push [ebp+arg_4]  +
push offset aS_2  +
push offset aCannotWriteFil  +
jmp loc_100EBC8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
mov ebx ds:free +
push esi  +
push edi  +
xor esi esi +
push [ebp+arg_4]  +
push offset dword_1001178  +
call sub_100263A  +
mov edi eax +
pop ecx  +
pop ecx  +
mov [ebp+var_8] edi +
test edi edi +
jz loc_100EC93  +
push [ebp+arg_8]  +
push edi  +
call ds:fopen  +
pop ecx  +
pop ecx  +
mov [ebp+var_4] eax +
test eax eax +
jnz loc_100ECE4  +
inc esi  +
cmp esi 64h +
jg loc_100ECA3  +
test edi edi +
jz loc_100EC68  +
push edi  +
call ebx  +
pop ecx  +
jmp loc_100EC68  +
test edi edi +
jnz loc_100ECC1  +
push [ebp+arg_0]  +
push offset aS_2  +
push offset aCannotCreate1  +
push [ebp+arg_C]  +
call sub_1006F95  +
add esp 10h +
jmp loc_100ECDD  +
push edi  +
push [ebp+arg_0]  +
push offset dword_100A5F8  +
push offset aCannotCreate12  +
push [ebp+arg_C]  +
call sub_1006F95  +
push edi  +
call ebx  +
add esp 18h +
xor eax eax +
jmp loc_100ED86  +
push 0Ch  +
call ds:malloc  +
mov esi eax +
pop ecx  +
test esi esi +
jnz loc_100ED0D  +
push [ebp+arg_0]  +
push offset aS_2  +
push offset aOutOfMemorying  +
push [ebp+arg_C]  +
call sub_1006F95  +
add esp 10h +
jmp loc_100ED68  +
and dword ptr [esi+8] 0 +
push edi  +
mov edi ds:_strdup +
call edi  +
pop ecx  +
push [ebp+arg_0]  +
mov [ebp+arg_4] eax +
mov [esi+4] eax +
test eax eax +
jz loc_100ED35  +
call edi  +
pop ecx  +
mov [esi+8] eax +
test eax eax +
jnz loc_100ED79  +
push [ebp+arg_0]  +
push offset aS_2  +
push offset aOutOfMemorying  +
push [ebp+arg_C]  +
call sub_1006F95  +
mov eax [esi+8] +
add esp 10h +
test eax eax +
jz loc_100ED55  +
push eax  +
call ebx  +
pop ecx  +
cmp [ebp+arg_4] 0 +
jz loc_100ED61  +
push [ebp+arg_4]  +
call ebx  +
pop ecx  +
push esi  +
call ebx  +
mov edi [ebp+var_8] +
pop ecx  +
push [ebp+var_4]  +
call ds:fclose  +
push edi  +
call ebx  +
pop ecx  +
xor eax eax +
jmp loc_100ED85  +
mov eax [ebp+var_4] +
push [ebp+var_8]  +
mov [esi] eax +
call ebx  +
mov eax esi +
pop ecx  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+lplpBuffer] +
push edi  +
mov edi [ebp+puLen] +
push edi  +
push esi  +
push [ebp+lpSubBlock]  +
push [ebp+pBlock]  +
call VerQueryValueA  +
test eax eax +
jnz loc_100EE1F  +
call ds:GetLastError  +
test eax eax +
jz loc_100EE18  +
cmp eax 713h +
jle loc_100EDFC  +
cmp eax 715h +
jle loc_100EE18  +
push [ebp+arg_10]  +
push [ebp+lpSubBlock]  +
push eax  +
push offset loc_100EE9C  +
push offset aVerqueryvalueO  +
push [ebp+arg_14]  +
call sub_1006F95  +
add esp 18h +
and dword ptr [esi] 0 +
xor eax eax +
jmp loc_100EE44  +
cmp dword ptr [edi] 0 +
jnz loc_100EE41  +
push [ebp+arg_10]  +
push [ebp+lpSubBlock]  +
push offset dword_100A5F8  +
push offset aNoValueForKey1  +
push [ebp+arg_14]  +
call sub_1006F95  +
add esp 14h +
jmp loc_100EE18  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 250h +
mov eax dword_1017000 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_4] +
mov [ebp+var_234] eax +
mov eax [ebp+arg_8] +
push ebx  +
mov ebx [ebp+lptstrFilename] +
push esi  +
mov esi [ebp+arg_C] +
mov dword ptr [ebp+var_220] eax +
mov eax [ebp+arg_14] +
push edi  +
mov edi [ebp+arg_10] +
mov [ebp+var_218] eax +
lea eax [ebp+dwHandle] +
push eax  +
push ebx  +
mov [ebp+var_248] esi +
mov [ebp+var_230] edi +
call GetFileVersionInfoSizeA  +
mov [ebp+dwLen] eax +
test eax eax +
jnz loc_100EF3A  +
lea eax [ebp+var_240] +
push eax  +
push ebx  +
call sub_1011C30  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_100F1A9  +
mov eax [ebp+var_240] +
mov ecx [ebp+var_234] +
mov [ecx] eax +
mov eax dword ptr [ebp+var_220] +
and dword ptr [eax] 0 +
jmp loc_100F1A9  +
and dword ptr [esi] 0 +
and dword ptr [edi] 0 +
push eax  +
call ds:malloc  +
mov esi eax +
pop ecx  +
mov [ebp+pBlock] esi +
test esi esi +
jnz loc_100EF72  +
push ebx  +
push offset aS_2  +
push offset aOutOfMemoryAll  +
push [ebp+var_218]  +
call sub_1006F95  +
add esp 10h +
jmp loc_100F198  +
push esi  +
push [ebp+dwLen]  +
push [ebp+dwHandle]  +
push ebx  +
call GetFileVersionInfoA  +
test eax eax +
jnz loc_100EFAE  +
call ds:GetLastError  +
push ebx  +
push eax  +
push offset dword_100A554  +
push offset aGetfileversion  +
push [ebp+var_218]  +
call sub_1006F95  +
add esp 14h +
jmp loc_100F18B  +
push [ebp+var_218]  +
lea eax [ebp+puLen] +
push ebx  +
push eax  +
lea eax [ebp+lpBuffer] +
push eax  +
push offset dword_100F278  +
push esi  +
call sub_100EDC6  +
test eax eax +
jz loc_100EFEE  +
mov eax [ebp+lpBuffer] +
mov ecx [eax+8] +
mov edx [ebp+var_234] +
mov [edx] ecx +
mov eax [eax+0Ch] +
mov ecx dword ptr [ebp+var_220] +
mov [ecx] eax +
push [ebp+var_218]  +
lea eax [ebp+var_228] +
push ebx  +
push eax  +
lea eax [ebp+var_21C] +
push eax  +
push offset SubBlock  +
push esi  +
call sub_100EDC6  +
test eax eax +
jz loc_100F19C  +
mov eax [ebp+var_21C] +
mov edi [eax] +
movzx eax di +
push eax  +
push offset dword_100A7A0  +
mov dword ptr [ebp+var_220] eax +
mov esi 100h +
lea eax [ebp+var_214] +
push esi  +
push eax  +
call sub_100130C  +
add esp 10h +
jmp loc_100F081  +
mov eax [ebp+var_21C] +
movzx eax word ptr [eax] +
push eax  +
push offset dword_100F258  +
lea eax [ebp+var_14] +
push 10h  +
push eax  +
call sub_100130C  +
add esp 10h +
test eax eax +
jl loc_100F091  +
lea eax [ebp+var_14] +
push eax  +
push esi  +
lea eax [ebp+var_214] +
push eax  +
call sub_10025A4  +
test eax eax +
jl loc_100F091  +
sub [ebp+var_228] 4 +
add [ebp+var_21C] 4 +
cmp [ebp+var_228] 4 +
ja loc_100F044  +
lea eax [ebp+var_214] +
push eax  +
call ds:_strdup  +
pop ecx  +
mov ecx [ebp+var_230] +
mov [ecx] eax +
test eax eax +
jnz loc_100F0BB  +
push ebx  +
push offset aS_2  +
push offset aOutOfMemoryDup  +
jmp loc_100F17D  +
push dword ptr [ebp+var_220]  +
shr edi 10h +
push edi  +
mov [ebp+var_230] edi +
mov edi offset aStringfileinfo +
push edi  +
lea eax [ebp+SubBlock] +
push esi  +
push eax  +
call sub_100130C  +
add esp 14h +
push [ebp+var_218]  +
lea eax [ebp+var_23C] +
push ebx  +
push eax  +
lea eax [ebp+var_22C] +
push eax  +
lea eax [ebp+SubBlock] +
push eax  +
push [ebp+pBlock]  +
call sub_100EDC6  +
test eax eax +
jnz loc_100F150  +
push [ebp+var_230]  +
lea eax [ebp+SubBlock] +
push dword ptr [ebp+var_220]  +
push edi  +
push esi  +
push eax  +
call sub_100130C  +
add esp 14h +
push [ebp+var_218]  +
lea eax [ebp+var_23C] +
push ebx  +
push eax  +
lea eax [ebp+var_22C] +
push eax  +
lea eax [ebp+SubBlock] +
push eax  +
push [ebp+pBlock]  +
call sub_100EDC6  +
cmp [ebp+var_22C] 0 +
jz loc_100F19C  +
push [ebp+var_22C]  +
call ds:_strdup  +
pop ecx  +
mov ecx [ebp+var_248] +
mov [ecx] eax +
test eax eax +
jnz loc_100F19C  +
push ebx  +
push offset aS_2  +
push offset aOutOfMemoryD_0  +
push [ebp+var_218]  +
call sub_1006F95  +
add esp 10h +
push [ebp+pBlock]  +
call ds:free  +
pop ecx  +
xor eax eax +
jmp loc_100F1AC  +
push [ebp+pBlock]  +
call ds:free  +
pop ecx  +
xor eax eax +
inc eax  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_10026CE  +
leave   +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 44h +
mov eax dword_1017000 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_C] +
mov ecx [ebp+arg_8] +
mov edx [ebp+arg_0] +
push ebx  +
mov [ebp+var_40] eax +
mov eax [ebp+arg_10] +
push esi  +
mov esi [ebp+arg_14] +
mov [ebp+var_2C] edx +
mov [ebp+var_28] ecx +
mov [ebp+var_44] eax +
mov al [ecx] +
push edi  +
xor ebx ebx +
xor edi edi +
mov [ebp+var_34] esi +
mov [ebp+var_30] ebx +
test al al +
jnz loc_100F32C  +
jmp loc_100F4A1  +
mov ebx [ebp+var_30] +
mov edx [ebp+var_2C] +
movsx eax al +
sub eax 2Ah +
jz loc_100F38B  +
sub eax 51h +
jz loc_100F368  +
dec eax  +
dec eax  +
jnz loc_100F396  +
inc ecx  +
mov [ebp+var_28] ecx +
cmp byte ptr [ecx] 7Dh +
jz loc_100F396  +
cmp ebx edi +
jz loc_100F449  +
cmp [ebp+var_38] edi +
jz loc_100F360  +
cmp [ebp+var_3C] edi +
jz loc_100F360  +
sub edx ebx +
add [ebp+arg_4] edx +
mov [ebp+var_2C] ebx +
mov [ebp+var_30] edi +
jmp loc_100F420  +
inc ecx  +
mov [ebp+var_28] ecx +
cmp byte ptr [ecx] 7Bh +
jz loc_100F396  +
cmp ebx edi +
jnz loc_100F463  +
mov [ebp+var_30] edx +
mov [ebp+var_38] edi +
mov [ebp+var_3C] 1 +
jmp loc_100F420  +
mov ebx ecx +
inc ecx  +
mov [ebp+var_28] ecx +
cmp byte ptr [ecx] 2Ah +
jnz loc_100F3B2  +
push 1  +
lea eax [ebp+var_28] +
push eax  +
lea eax [ebp+arg_4] +
push eax  +
lea eax [ebp+var_2C] +
push eax  +
call sub_1011661  +
test eax eax +
jnz loc_100F420  +
jmp loc_100F4A6  +
push 2Ah  +
push ecx  +
call ds:strchr  +
pop ecx  +
pop ecx  +
cmp eax edi +
jz loc_100F47D  +
lea edi [eax+1] +
sub eax [ebp+var_28] +
mov esi eax +
cmp esi 20h +
jnb loc_100F48C  +
push esi  +
push [ebp+var_28]  +
lea eax [ebp+var_24] +
push eax  +
call memcpy  +
add esp 0Ch +
push [ebp+var_34]  +
lea eax [ebp+var_24] +
push [ebp+var_44]  +
mov byte ptr [ebp+esi+var_24] 0 +
push eax  +
push [ebp+arg_4]  +
push [ebp+var_2C]  +
call [ebp+var_40]  +
cmp eax 0FFFFFFFFh +
jz loc_100F479  +
add [ebp+var_2C] eax +
sub [ebp+arg_4] eax +
mov [ebp+var_38] 1 +
test eax eax +
jle loc_100F418  +
and [ebp+var_3C] 0 +
mov esi [ebp+var_34] +
mov [ebp+var_28] edi +
xor edi edi +
mov ecx [ebp+var_28] +
mov al [ecx] +
test al al +
jnz loc_100F326  +
cmp [ebp+var_30] edi +
jz loc_100F49E  +
push 7Dh  +
push offset dword_100A57C  +
push offset aMissingRightBr  +
push esi  +
call sub_1006F95  +
add esp 10h +
jmp loc_100F479  +
push ecx  +
push 7Bh  +
push 7Dh  +
push offset dword_100F544  +
push offset aRightBrace1Wit  +
push esi  +
call sub_1006F95  +
add esp 18h +
jmp loc_100F479  +
push ecx  +
push 7Bh  +
push offset dword_100A4EC  +
push offset aNestedBraces1N  +
push esi  +
call sub_1006F95  +
add esp 14h +
xor eax eax +
jmp loc_100F4BB  +
push ebx  +
push 2Ah  +
push offset dword_100A4EC  +
push offset aMissing1AfterP  +
jmp loc_100F470  +
push ebx  +
push 1Fh  +
push offset dword_100A554  +
push offset aParameterNameE  +
push [ebp+var_34]  +
jmp loc_100F471  +
mov edx [ebp+var_2C] +
cmp [ebp+arg_4] edi +
jnz loc_100F4B5  +
push [ebp+var_28]  +
push offset aS_2  +
push offset aBufferOverfl_0  +
jmp loc_100F43E  +
xor eax eax +
mov byte ptr [edx] 0 +
inc eax  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_10026CE  +
leave   +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 18h  +
call ds:malloc  +
pop ecx  +
xor ecx ecx +
cmp eax ecx +
jnz loc_100F59A  +
push [ebp+arg_8]  +
push offset aS_2  +
push offset aOutOfMemoryCre  +
push [ebp+arg_C]  +
call sub_1006F95  +
add esp 10h +
xor eax eax +
jmp loc_100F5B1  +
mov edx [ebp+arg_0] +
mov [eax+8] edx +
mov edx [ebp+arg_4] +
mov [eax] ecx +
mov [eax+4] ecx +
mov [eax+0Ch] edx +
mov [eax+10h] ecx +
mov [eax+14h] ecx +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
mov al [esi] +
movzx eax al +
push edi  +
mov edi ds:toupper +
push eax  +
inc esi  +
call edi  +
pop ecx  +
jmp loc_100F614  +
movzx eax al +
push eax  +
inc esi  +
call edi  +
pop ecx  +
movzx ecx bl +
shl ecx 3 +
shr ebx 8 +
or ecx ebx +
and ecx 0FFFFFFh +
xor eax ecx +
mov ebx eax +
mov al [esi] +
test al al +
jnz loc_100F5F9  +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_4] +
mov ecx [esi] +
xor eax eax +
test ecx ecx +
jz loc_100F641  +
push ecx  +
call sub_100F5DC  +
mov ecx [ebp+arg_0] +
mov edx [ecx+14h] +
shl eax 2 +
mov edx [eax+edx] +
mov [esi+8] edx +
mov ecx [ecx+14h] +
mov [eax+ecx] esi +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov edi [esi+14h] +
mov eax [edi+0Ch] +
test eax eax +
jz loc_100F67A  +
push dword ptr [esi+4]  +
call eax  +
mov eax [esi] +
mov ebx ds:free +
test eax eax +
jz loc_100F68A  +
push eax  +
call ebx  +
pop ecx  +
mov eax [esi+10h] +
test eax eax +
jnz loc_100F698  +
mov eax [esi+0Ch] +
mov [edi] eax +
jmp loc_100F69E  +
mov ecx [esi+0Ch] +
mov [eax+0Ch] ecx +
mov eax [esi+0Ch] +
test eax eax +
jnz loc_100F6AD  +
mov eax [esi+10h] +
mov [edi+4] eax +
jmp loc_100F6B3  +
mov ecx [esi+10h] +
mov [eax+10h] ecx +
cmp dword ptr [edi+14h] 0 +
jz loc_100F6EE  +
push dword ptr [esi]  +
call sub_100F5DC  +
mov ecx [edi+14h] +
lea eax [ecx+eax*4] +
cmp esi [eax] +
jnz loc_100F6D1  +
mov ecx [esi+8] +
mov [eax] ecx +
jmp loc_100F6EE  +
mov eax [eax] +
test eax eax +
jz loc_100F6EE  +
mov ecx [eax+8] +
cmp ecx esi +
jz loc_100F6E4  +
mov eax ecx +
test eax eax +
jnz loc_100F6D7  +
test eax eax +
jz loc_100F6EE  +
mov ecx [esi+8] +
mov [eax+8] ecx +
push esi  +
call ebx  +
dec dword ptr [edi+10h]  +
pop ecx  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
mov eax [esi+14h] +
push edi  +
mov edi ds:free +
test eax eax +
jz loc_100F720  +
push eax  +
call edi  +
and dword ptr [esi+14h] 0 +
pop ecx  +
mov eax [esi] +
test eax eax +
jz loc_100F737  +
push ebx  +
mov ebx [eax+0Ch] +
push eax  +
call sub_100F660  +
mov eax ebx +
test ebx ebx +
jnz loc_100F727  +
pop ebx  +
push esi  +
call edi  +
pop ecx  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_0] +
test ebx ebx +
jnz loc_100F75A  +
xor eax eax +
jmp loc_100F803  +
push esi  +
mov esi [ebx+14h] +
cmp dword ptr [esi+14h] 0 +
jz loc_100F794  +
push [ebp+arg_4]  +
call sub_100F5DC  +
mov ecx [esi+14h] +
mov esi [ecx+eax*4] +
jmp loc_100F788  +
push [ebp+arg_4]  +
push dword ptr [esi]  +
call ds:_stricmp  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_100F790  +
mov esi [esi+8] +
test esi esi +
jnz loc_100F774  +
xor eax eax +
jmp loc_100F802  +
mov eax esi +
jmp loc_100F802  +
cmp dword ptr [esi+10h] 32h +
push edi  +
jl loc_100F7D7  +
cmp [ebp+arg_4] 0 +
jz loc_100F7D7  +
mov edi 2000h +
push edi  +
call ds:malloc  +
pop ecx  +
mov [esi+14h] eax +
test eax eax +
jz loc_100F7D7  +
xor eax eax +
mov ecx [esi+14h] +
and dword ptr [eax+ecx] 0 +
add eax 4 +
cmp eax edi +
jl loc_100F7B7  +
mov edi [esi] +
jmp loc_100F7D3  +
push edi  +
push esi  +
call sub_100F62A  +
mov edi [edi+0Ch] +
test edi edi +
jnz loc_100F7C9  +
mov edi [ebp+arg_4] +
mov esi ebx +
test edi edi +
jz loc_100F7F4  +
mov eax [esi] +
test eax eax +
jz loc_100F7F4  +
push edi  +
push eax  +
call ds:_stricmp  +
pop ecx  +
pop ecx  +
test eax eax +
jmp loc_100F7F6  +
cmp edi [esi] +
jz loc_100F808  +
mov esi [esi+0Ch] +
test esi esi +
jnz loc_100F7DC  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
mov eax esi +
jmp loc_100F801  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
xor ebx ebx +
push edi  +
mov edi [ebp+arg_0] +
cmp [ebp+arg_10] ebx +
jz loc_100F86A  +
push [ebp+arg_4]  +
push dword ptr [edi]  +
call sub_100F746  +
mov [ebp+arg_10] eax +
cmp eax ebx +
jz loc_100F86A  +
push [ebp+arg_4]  +
mov esi [ebp+arg_14] +
push [ebp+arg_C]  +
push offset dword_100A5F8  +
push offset a1AlreadyExists  +
push esi  +
call sub_1006F95  +
mov eax [ebp+arg_10] +
mov dword ptr [esi+210h] 101h +
mov [esi+214h] eax +
add esp 14h +
xor eax eax +
jmp loc_100F8F5  +
push 18h  +
call ds:malloc  +
mov esi eax +
pop ecx  +
cmp esi ebx +
jz loc_100F89B  +
mov [esi] ebx +
mov [esi+4] ebx +
cmp [ebp+arg_4] ebx +
jz loc_100F8BE  +
push [ebp+arg_4]  +
call ds:_strdup  +
pop ecx  +
mov [esi] eax +
cmp eax ebx +
jnz loc_100F8BE  +
push esi  +
call ds:free  +
pop ecx  +
mov eax [ebp+arg_14] +
cmp [eax+200h] ebx +
jnz loc_100F863  +
push [ebp+arg_4]  +
push [ebp+arg_C]  +
push offset dword_100A5F8  +
push offset aOutOfMemoryAdd  +
push eax  +
call sub_1006F95  +
jmp loc_100F860  +
mov eax [ebp+arg_8] +
mov [esi+4] eax +
mov [esi+8] ebx +
mov [esi+0Ch] ebx +
lea eax [edi+4] +
mov ecx [eax] +
mov [esi+10h] ecx +
cmp [edi] ebx +
jnz loc_100F8DA  +
mov [edi] esi +
jmp loc_100F8DF  +
mov ecx [eax] +
mov [ecx+0Ch] esi +
mov [eax] esi +
mov [esi+14h] edi +
inc dword ptr [edi+10h]  +
cmp [edi+14h] ebx +
jz loc_100F8F3  +
push esi  +
push edi  +
call sub_100F62A  +
mov eax esi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
mov edi [ebp+arg_4] +
test edi edi +
jnz loc_100F948  +
xor eax eax +
inc eax  +
jmp loc_100F9DE  +
mov eax [ebp+arg_0] +
push ebx  +
test eax eax +
jz loc_100F954  +
mov ebx [eax] +
jmp loc_100F956  +
xor ebx ebx +
push esi  +
mov esi [edi] +
jmp loc_100F9D5  +
test ebx ebx +
jnz loc_100F97B  +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
push dword ptr [edi+0Ch]  +
push dword ptr [edi+8]  +
call sub_100F56A  +
mov ebx eax +
test ebx ebx +
jz loc_100F9ED  +
mov eax [ebp+arg_0] +
mov [eax] ebx +
push dword ptr [esi]  +
push dword ptr [ebx]  +
call sub_100F746  +
test eax eax +
jnz loc_100F9D2  +
cmp [ebp+arg_8] eax +
jz loc_100F9B3  +
push dword ptr [esi+4]  +
call [ebp+arg_8]  +
mov edi eax +
test edi edi +
jnz loc_100F9B6  +
push [ebp+arg_C]  +
push offset aS_2  +
push offset aOutOfMemoryD_1  +
push [ebp+arg_10]  +
call sub_1006F95  +
add esp 10h +
jmp loc_100F9ED  +
mov edi [esi+4] +
push [ebp+arg_10]  +
mov eax [ebp+arg_0] +
push 0  +
push [ebp+arg_C]  +
push edi  +
push dword ptr [esi]  +
push dword ptr [eax]  +
call sub_100F811  +
test eax eax +
jz loc_100F9E3  +
mov edi [ebp+arg_4] +
mov esi [esi+0Ch] +
test esi esi +
jnz loc_100F95B  +
xor eax eax +
inc eax  +
pop esi  +
pop ebx  +
pop edi  +
pop ebp  +
retn 14h  +
mov ebx [ebx+0Ch] +
test ebx ebx +
jz loc_100F9ED  +
push edi  +
call ebx  +
xor eax eax +
jmp loc_100F9DC  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
mov eax [ebp+arg_0] +
push dword ptr [eax]  +
call sub_100F746  +
test eax eax +
jnz loc_100FA49  +
push [ebp+arg_4]  +
push [ebp+arg_8]  +
push offset dword_100A5F8  +
push offset aUndefined12  +
push [ebp+arg_C]  +
call sub_1006F95  +
add esp 14h +
xor eax eax +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
test esi esi +
jnz loc_100FA77  +
xor eax eax +
jmp loc_100FA8D  +
push [ebp+arg_4]  +
push dword ptr [esi]  +
call sub_100F746  +
test eax eax +
jz loc_100FA8A  +
mov eax [eax+4] +
jmp loc_100FA8D  +
mov eax [esi+8] +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push [ebp+arg_8]  +
mov esi eax +
push [ebp+arg_4]  +
xor ebx ebx +
dec esi  +
push esi  +
push edi  +
call ds:_vsnprintf  +
add esp 10h +
test eax eax +
jl loc_100FAC3  +
cmp eax esi +
ja loc_100FAC3  +
jnz loc_100FACD  +
mov [esi+edi] bl +
jmp loc_100FACB  +
mov [esi+edi] bl +
mov ebx 8007007Ah +
mov eax esi +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_100FAD6  +
mov [ecx] eax +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
dec eax  +
jz loc_100FB02  +
dec eax  +
jz loc_100FAFD  +
dec eax  +
jz loc_100FAF8  +
xor eax eax +
jmp loc_100FB2D  +
push 2  +
pop eax  +
jmp loc_100FB04  +
xor eax eax +
inc eax  +
jmp loc_100FB04  +
xor eax eax +
push [ebp+arg_C]  +
mov ecx [ebp+arg_0] +
push dword ptr [ecx+eax*4]  +
call sub_100E21C  +
push [ebp+arg_8]  +
push offset aS  +
push eax  +
call ds:fprintf  +
xor ecx ecx +
add esp 0Ch +
test eax eax +
setnle cl  +
mov eax ecx +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
xor esi esi +
mov eax [ebp+arg_0] +
mov eax [eax+esi*4] +
test eax eax +
jz loc_100FB55  +
push [ebp+arg_4]  +
push eax  +
call sub_100E257  +
test eax eax +
jz loc_100FB63  +
inc esi  +
cmp esi 3 +
jl loc_100FB3E  +
xor eax eax +
inc eax  +
pop esi  +
pop ebp  +
retn 8  +
xor eax eax +
jmp loc_100FB5E  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 44h +
mov eax dword_1017000 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_4] +
mov ecx [ebp+arg_10] +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov edi [ebp+arg_20] +
mov [ebp+var_2C] eax +
mov eax [ebp+arg_8] +
mov [ebp+var_30] ecx +
mov ecx [ebp+arg_14] +
mov [ebp+var_34] eax +
mov eax [ebp+arg_C] +
mov [ebp+var_40] ecx +
mov ecx [ebp+arg_18] +
push edi  +
push eax  +
push dword ptr [esi+8]  +
mov [ebp+var_44] ecx +
mov ecx [ebp+arg_1C] +
mov [ebp+var_3C] eax +
mov [ebp+var_38] ecx +
call sub_1004F32  +
test eax eax +
jnz loc_100FBC4  +
inc eax  +
jmp loc_100FC67  +
push ebx  +
push eax  +
call sub_10060B6  +
mov ecx eax +
lea ebx [ecx+1] +
mov dl [ecx] +
inc ecx  +
test dl dl +
jnz loc_100FBD0  +
sub ecx ebx +
jz loc_100FC63  +
mov ecx [esi+70h] +
mov [ebp+var_28] 1 +
test eax eax +
jz loc_100FC63  +
lea ebx [ecx+0Ch] +
push [ebp+var_38]  +
push [ebp+var_44]  +
push [ebp+var_40]  +
push offset dword_100A5E8  +
push eax  +
push 200h  +
push ebx  +
call sub_1001711  +
push ebx  +
push offset aS_4  +
push [ebp+var_2C]  +
call ds:fprintf  +
add esp 28h +
test eax eax +
jl loc_100FC77  +
push edi  +
push offset aInfHeaderVaria  +
push [ebp+var_28]  +
lea eax [ebp+var_24] +
push [ebp+var_30]  +
push 20h  +
push eax  +
call sub_10116CD  +
test eax eax +
jz loc_100FC90  +
push edi  +
lea eax [ebp+var_24] +
push eax  +
push dword ptr [esi+8]  +
call sub_1004F32  +
test eax eax +
jz loc_100FC57  +
push eax  +
call sub_10060B6  +
inc [ebp+var_28]  +
jmp loc_100FC5F  +
push edi  +
call sub_100683B  +
xor eax eax +
test eax eax +
jnz loc_100FBF0  +
xor eax eax +
inc eax  +
pop ebx  +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_10026CE  +
leave   +
retn 24h  +
push [ebp+var_34]  +
push [ebp+var_3C]  +
push offset dword_100A5F8  +
push offset aWriteOf1Failed  +
push edi  +
call sub_1006F95  +
add esp 14h +
xor eax eax +
jmp loc_100FC66  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 23Ch +
mov eax dword_1017000 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_8] +
push ebx  +
mov ebx [ebp+arg_4] +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
lea ecx [ebp+var_23C] +
push ecx  +
mov edi offset dword_1001178 +
push edi  +
push [ebp+arg_C]  +
push eax  +
push 20h  +
lea eax [ebp+var_24] +
push eax  +
call sub_10116CD  +
test eax eax +
jz loc_100FD1A  +
lea eax [ebp+var_23C] +
push eax  +
lea eax [ebp+var_24] +
push eax  +
push dword ptr [esi+8]  +
call sub_1004F32  +
test eax eax +
jnz loc_100FD3E  +
lea eax [ebp+var_23C] +
push eax  +
call sub_100683B  +
lea eax [ebp+var_23C] +
push eax  +
push ebx  +
push dword ptr [esi+8]  +
call sub_1004F32  +
test eax eax +
jnz loc_100FD3E  +
mov eax edi +
jmp loc_100FD44  +
push eax  +
call sub_10060B6  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_10026CE  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 23Ch +
mov eax dword_1017000 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
and [ebp+var_220] 0 +
mov [ebp+var_23C] eax +
mov eax [ebp+arg_4] +
push ebx  +
mov ebx [ebp+arg_8] +
mov [ebp+var_234] eax +
mov eax [ebp+arg_C] +
push esi  +
push edi  +
mov edi [ebp+arg_10] +
mov [ebp+var_228] eax +
lea eax [ebp+var_21C] +
push eax  +
push ebx  +
mov [ebp+var_238] edi +
call sub_100E22F  +
mov [ebp+var_22C] eax +
lea eax [ebp+var_21C] +
push eax  +
push ebx  +
call sub_100E243  +
mov esi 800h +
push esi  +
mov [ebp+var_230] eax +
call ds:malloc  +
pop ecx  +
mov [ebp+var_224] eax +
test eax eax +
jnz loc_100FE09  +
push [ebp+var_234]  +
push [ebp+var_230]  +
push [ebp+var_22C]  +
push offset dword_100A5E8  +
push offset aOutOfMemoryCop  +
push edi  +
call sub_1006F95  +
add esp 18h +
xor eax eax +
jmp loc_100FECE  +
push edi  +
push [ebp+var_228]  +
push ebx  +
call sub_100E2AD  +
test eax eax +
jz loc_100FF27  +
push edi  +
push ebx  +
call sub_100E21C  +
mov [ebp+var_220] eax +
test eax eax +
jz loc_100FF27  +
push eax  +
call ds:feof  +
pop ecx  +
test eax eax +
jnz loc_100FEB7  +
mov edi ds:ferror +
push [ebp+var_220]  +
push esi  +
push 1  +
push [ebp+var_224]  +
call ds:fread  +
push [ebp+var_220]  +
mov [ebp+var_228] eax +
call edi  +
add esp 14h +
test eax eax +
jnz loc_100FEDF  +
cmp [ebp+var_228] eax +
jle loc_100FEA0  +
push [ebp+var_23C]  +
push [ebp+var_228]  +
push 1  +
push [ebp+var_224]  +
call ds:fwrite  +
push [ebp+var_23C]  +
call edi  +
add esp 14h +
test eax eax +
jnz loc_100FEFD  +
push [ebp+var_220]  +
call ds:feof  +
pop ecx  +
test eax eax +
jz loc_100FE45  +
mov edi [ebp+var_238] +
push edi  +
push ebx  +
call sub_100E257  +
push [ebp+var_224]  +
call ds:free  +
xor eax eax +
pop ecx  +
inc eax  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_10026CE  +
leave   +
retn 14h  +
push [ebp+var_234]  +
push [ebp+var_230]  +
push [ebp+var_22C]  +
push offset dword_100A5E8  +
push offset aReadFailedCopy  +
jmp loc_100FF19  +
push [ebp+var_234]  +
push [ebp+var_230]  +
push [ebp+var_22C]  +
push offset dword_100A5E8  +
push offset aWriteFailedCop  +
push [ebp+var_238]  +
call sub_1006F95  +
add esp 18h +
push [ebp+var_224]  +
call ds:free  +
cmp [ebp+var_220] 0 +
pop ecx  +
jz loc_100FE02  +
push [ebp+var_220]  +
call ds:fclose  +
pop ecx  +
jmp loc_100FE02  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+8] +
test esi esi +
jz loc_100FFFD  +
mov eax [esi+4] +
push edi  +
mov edi ds:free +
test eax eax +
jz loc_100FFDE  +
push eax  +
call edi  +
pop ecx  +
mov eax [esi+24h] +
test eax eax +
jz loc_100FFEB  +
push eax  +
call sub_100F701  +
mov eax [esi+28h] +
test eax eax +
jz loc_100FFF8  +
push eax  +
call sub_100F701  +
push esi  +
call edi  +
pop ecx  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
mov edi [ebp+8] +
test edi edi +
jz loc_101002B  +
mov eax [edi+4] +
push esi  +
mov esi ds:free +
test eax eax +
jz loc_1010026  +
push eax  +
call esi  +
pop ecx  +
push edi  +
call esi  +
pop ecx  +
pop esi  +
pop edi  +
pop ebp  +
retn 4  +
***
push ebp  +
mov ebp esp +
push dword ptr [ebp+18h]  +
push dword ptr [ebp+10h]  +
call sub_10051C3  +
xor ecx ecx +
cmp eax 0FFFFFFFFh +
setnz cl  +
mov eax ecx +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_8] +
cmp byte ptr [edi] 0 +
mov esi edi +
jz loc_101007E  +
movzx eax byte ptr [esi] +
push eax  +
call ds:isdigit  +
pop ecx  +
test eax eax +
jz loc_101007E  +
inc esi  +
cmp byte ptr [esi] 0 +
jnz loc_1010069  +
cmp byte ptr [esi] 0 +
jz loc_10100A0  +
push edi  +
push [ebp+arg_4]  +
push offset dword_100A5F8  +
push offset aValueOfParamte  +
push [ebp+arg_10]  +
call sub_1006F95  +
add esp 14h +
xor eax eax +
jmp loc_10100A3  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_8] +
cmp byte ptr [edi] 0 +
mov esi edi +
jz loc_10100D4  +
movzx eax byte ptr [esi] +
push eax  +
call ds:isdigit  +
pop ecx  +
test eax eax +
jz loc_10100D4  +
inc esi  +
cmp byte ptr [esi] 0 +
jnz loc_10100BF  +
cmp byte ptr [esi] 0 +
push edi  +
jz loc_10100E9  +
push [ebp+arg_4]  +
push offset dword_100A5F8  +
push offset aValueOfParamte  +
jmp loc_101010F  +
call ds:atol  +
add eax 8000h +
pop ecx  +
cmp eax 0FFFFh +
ja loc_1010101  +
xor eax eax +
inc eax  +
jmp loc_101011C  +
push edi  +
push [ebp+arg_4]  +
push offset dword_100A5F8  +
push offset aValueOfParam_0  +
push [ebp+arg_10]  +
call sub_1006F95  +
add esp 14h +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
movzx eax [ebp+arg_8] +
mov ecx eax +
mov edx eax +
shr ecx 5 +
shr eax 9 +
and edx 1Fh +
and ecx 0Fh +
add eax 7BCh +
cmp [ebp+arg_C] 0 +
jz loc_10101CC  +
push esi  +
mov esi 7D0h +
cmp eax esi +
jge loc_10101A5  +
sub eax 76Ch +
jmp loc_10101AE  +
cmp eax 820h +
jge loc_10101AE  +
sub eax esi +
push eax  +
push edx  +
push ecx  +
push offset loc_1010214  +
push offset loc_1010208  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1001711  +
add esp 1Ch +
pop esi  +
jmp loc_10101E7  +
push edx  +
push ecx  +
push eax  +
push offset loc_10101F8  +
push offset loc_10101EC  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1001711  +
add esp 1Ch +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov eax edi +
lea edx [eax+1] +
mov cl [eax] +
inc eax  +
test cl cl +
jnz loc_1010239  +
sub eax edx +
cmp eax 5 +
jb loc_1010390  +
cmp byte ptr [edi+2] 2Fh +
jnz loc_1010257  +
mov [ebp+var_1] 2Fh +
jmp loc_1010265  +
cmp byte ptr [edi+4] 2Dh +
jnz loc_1010390  +
mov [ebp+var_1] 2Dh +
mov esi ds:atoi +
push edi  +
call esi  +
movsx ebx [ebp+var_1] +
push ebx  +
push edi  +
mov edi ds:strchr +
mov [ebp+var_8] eax +
call edi  +
add esp 0Ch +
test eax eax +
jnz loc_10102A4  +
push [ebp+arg_0]  +
push ebx  +
push offset dword_100A4EC  +
push offset aMissingSeparat  +
push [ebp+arg_4]  +
call sub_1006F95  +
add esp 14h +
jmp loc_10103A6  +
inc eax  +
push eax  +
mov [ebp+var_10] eax +
call esi  +
push ebx  +
push [ebp+var_10]  +
mov [ebp+var_C] eax +
call edi  +
add esp 0Ch +
test eax eax +
jz loc_1010286  +
inc eax  +
push eax  +
call esi  +
cmp [ebp+var_1] 2Dh +
pop ecx  +
mov esi eax +
jnz loc_10102D4  +
mov eax [ebp+var_C] +
mov edi esi +
mov esi [ebp+var_8] +
mov ebx eax +
jmp loc_10102DA  +
mov ebx [ebp+var_8] +
mov edi [ebp+var_C] +
lea eax [edi-1] +
cmp eax 1Eh +
ja loc_101037D  +
cmp ebx 2 +
jnz loc_10102F4  +
cmp edi 1Dh +
jg loc_101037D  +
lea eax [ebx-1] +
cmp eax 0Bh +
ja loc_101036A  +
cmp esi 64h +
jge loc_1010314  +
cmp esi 50h +
jge loc_101030E  +
add esi 7D0h +
jmp loc_1010314  +
add esi 76Ch +
mov eax 7BCh +
cmp esi eax +
jge loc_1010339  +
push [ebp+arg_0]  +
push eax  +
push esi  +
push offset dword_100A5F0  +
push offset aYear1LowerThan  +
push [ebp+arg_4]  +
call sub_1006F95  +
add esp 18h +
jmp loc_10103A6  +
mov eax 83Bh +
cmp esi eax +
jle loc_1010353  +
push [ebp+arg_0]  +
push eax  +
push esi  +
push offset dword_100A5F0  +
push offset aYear1HigherTha  +
jmp loc_101032C  +
push [ebp+arg_4]  +
call sub_100683B  +
lea eax [esi-3Ch] +
shl eax 4 +
or eax ebx +
shl eax 5 +
or eax edi +
jmp loc_10103A8  +
push [ebp+arg_0]  +
push edi  +
push offset dword_100A554  +
push offset aBadMonth1InDat  +
jmp loc_1010294  +
push [ebp+arg_0]  +
push edi  +
push offset dword_100A554  +
push offset aBadDay1InDate2  +
jmp loc_1010294  +
push edi  +
push offset aS_2  +
push offset aBadDateFormat1  +
push [ebp+arg_4]  +
call sub_1006F95  +
add esp 10h +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
movzx eax [ebp+arg_8] +
mov ecx eax +
mov edx eax +
shr eax 0Bh +
and ecx 1Fh +
shr edx 5 +
push esi  +
mov esi eax +
add ecx ecx +
and edx 3Fh +
cmp esi 0Ch +
jl loc_10104AE  +
mov al 70h +
sub esi 0Ch +
jmp loc_10104B0  +
mov al 61h +
test esi esi +
jnz loc_10104B7  +
push 0Ch  +
pop esi  +
movsx eax al +
push eax  +
push ecx  +
push edx  +
push esi  +
push offset dword_10104E8  +
push offset dword_10104DC  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1001711  +
add esp 20h +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
mov esi ds:atoi +
push edi  +
push [ebp+arg_0]  +
call esi  +
mov edi ds:strchr +
push 3Ah  +
push [ebp+arg_0]  +
mov [ebp+var_4] eax +
call edi  +
mov ebx eax +
add esp 0Ch +
test ebx ebx +
jnz loc_101053E  +
push [ebp+arg_0]  +
push 3Ah  +
push offset dword_100A4EC  +
push offset aMissingSepar_0  +
jmp loc_1010627  +
inc ebx  +
push ebx  +
call esi  +
push 3Ah  +
push ebx  +
mov [ebp+var_8] eax +
call edi  +
mov edi eax +
add esp 0Ch +
test edi edi +
jz loc_101052A  +
inc edi  +
push edi  +
call esi  +
mov esi eax +
movsx eax byte ptr [edi+2] +
push eax  +
call ds:tolower  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_10105A4  +
cmp eax 61h +
jz loc_1010587  +
cmp eax 70h +
jz loc_1010587  +
push [ebp+arg_0]  +
push eax  +
push offset dword_100A4EC  +
push offset aBadAmPmCharact  +
jmp loc_1010627  +
mov ecx [ebp+var_4] +
lea edx [ecx-1] +
cmp edx 0Bh +
ja loc_10105C9  +
cmp ecx 0Ch +
jnz loc_101059B  +
and [ebp+var_4] 0 +
cmp eax 70h +
jnz loc_10105A4  +
add [ebp+var_4] 0Ch +
cmp esi 3Bh +
ja loc_1010619  +
mov eax esi +
and eax 80000001h +
jns loc_10105B7  +
dec eax  +
or eax 0FFFFFFFEh +
inc eax  +
jz loc_10105D9  +
push [ebp+arg_0]  +
push esi  +
push offset dword_100A554  +
push offset aOddSecond1InTi  +
jmp loc_1010627  +
push [ebp+arg_0]  +
push ecx  +
push offset dword_100A554  +
push offset aBadHour1InTime  +
jmp loc_1010627  +
cmp [ebp+var_8] 3Bh +
ja loc_1010607  +
cmp [ebp+var_4] 17h +
ja loc_10105FF  +
push [ebp+arg_4]  +
call sub_100683B  +
mov eax [ebp+var_4] +
shl eax 6 +
or eax [ebp+var_8] +
sar esi 1 +
shl eax 5 +
or eax esi +
jmp loc_1010634  +
push [ebp+arg_0]  +
push [ebp+var_4]  +
jmp loc_10105CD  +
push [ebp+arg_0]  +
push [ebp+var_8]  +
push offset dword_100A554  +
push offset aBadMinute1InTi  +
jmp loc_1010627  +
push [ebp+arg_0]  +
push esi  +
push offset dword_100A554  +
push offset aBadSecond1InTi  +
push [ebp+arg_4]  +
call sub_1006F95  +
add esp 14h +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_4] 5 +
mov ecx [ebp+arg_0] +
mov eax ecx +
jge loc_1010711  +
or eax 0FFFFFFFFh +
jmp loc_101073F  +
mov dl [ebp+arg_8] +
test dl 20h +
jz loc_101071F  +
mov byte ptr [ecx] 41h +
lea eax [ecx+1] +
test dl 2 +
jz loc_1010728  +
mov byte ptr [eax] 48h +
inc eax  +
test dl 1 +
jz loc_1010731  +
mov byte ptr [eax] 52h +
inc eax  +
test dl 4 +
jz loc_101073A  +
mov byte ptr [eax] 53h +
inc eax  +
mov byte ptr [eax] 0 +
sub eax ecx +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
xor ebx ebx +
mov esi edi +
cmp [edi] bl +
jz loc_1010790  +
movsx eax byte ptr [esi] +
push eax  +
call ds:toupper  +
sub eax 41h +
pop ecx  +
jz loc_1010787  +
sub eax 7 +
jz loc_1010782  +
sub eax 0Ah +
jz loc_101077D  +
dec eax  +
jnz loc_101079A  +
or ebx 4 +
jmp loc_101078A  +
or ebx 1 +
jmp loc_101078A  +
or ebx 2 +
jmp loc_101078A  +
or ebx 20h +
inc esi  +
cmp byte ptr [esi] 0 +
jnz loc_101075B  +
mov ax bx +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
movsx eax byte ptr [esi] +
push edi  +
push eax  +
push offset dword_100A4EC  +
push offset aBadCharacter1I  +
push [ebp+arg_4]  +
call sub_1006F95  +
add esp 14h +
xor eax eax +
jmp loc_1010793  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
cmp [ebp+arg_4] eax +
jz loc_10107FB  +
cmp [ebp+arg_4] 7FFFFFFFh +
jbe loc_1010800  +
mov eax 80070057h +
test eax eax +
jl loc_101081A  +
push edi  +
mov edi [ebp+arg_0] +
lea eax [ebp+arg_C] +
push eax  +
push [ebp+arg_8]  +
mov eax [ebp+arg_4] +
push 0  +
call sub_100FA97  +
pop edi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
push [ebp+arg_4]  +
mov edi [ebp+arg_0] +
push edi  +
call sub_100FB36  +
test eax eax +
jz loc_1010864  +
push esi  +
xor esi esi +
mov eax [edi+esi*4] +
test eax eax +
jz loc_1010852  +
push [ebp+arg_4]  +
push eax  +
call sub_100E30C  +
test eax eax +
jz loc_1010869  +
and dword ptr [edi+esi*4] 0 +
inc esi  +
cmp esi 3 +
jl loc_101083A  +
push edi  +
call ds:free  +
xor eax eax +
pop ecx  +
inc eax  +
pop esi  +
pop edi  +
pop ebp  +
retn 8  +
xor eax eax +
jmp loc_1010863  +
***
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+18h] +
push esi  +
push dword ptr [ebp+10h]  +
call sub_1010748  +
cmp dword ptr [esi+200h] 0 +
movzx edx ax +
pop esi  +
jz loc_1010895  +
xor eax eax +
jmp loc_10108AC  +
mov ecx [ebp+14h] +
mov eax [ecx+18h] +
test al 10h +
jnz loc_10108A9  +
or eax 10h +
mov [ecx+20h] dx +
mov [ecx+18h] eax +
xor eax eax +
inc eax  +
pop ebp  +
retn 14h  +
***
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+18h] +
push esi  +
push dword ptr [ebp+10h]  +
call sub_1010226  +
cmp dword ptr [esi+200h] 0 +
movzx edx ax +
pop esi  +
jz loc_10108D8  +
xor eax eax +
jmp loc_10108EF  +
mov ecx [ebp+14h] +
mov eax [ecx+18h] +
test al 4 +
jnz loc_10108EC  +
or eax 4 +
mov [ecx+1Ch] dx +
mov [ecx+18h] eax +
xor eax eax +
inc eax  +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_10] +
push esi  +
push [ebp+arg_8]  +
call sub_10104FC  +
cmp dword ptr [esi+200h] 0 +
movzx edx ax +
pop esi  +
jz loc_101091B  +
xor eax eax +
jmp loc_1010932  +
mov ecx [ebp+arg_C] +
mov eax [ecx+18h] +
test al 8 +
jnz loc_101092F  +
or eax 8 +
mov [ecx+1Eh] dx +
mov [ecx+18h] eax +
xor eax eax +
inc eax  +
pop ebp  +
retn 14h  +
***
push ebp  +
mov ebp esp +
mov eax [ebp+18h] +
push esi  +
mov esi [eax+0Ch] +
push dword ptr [esi]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
call sub_1002515  +
test eax eax +
jge loc_1010977  +
push dword ptr [esi]  +
push dword ptr [ebp+14h]  +
push offset dword_100A5F8  +
push offset aBufferOverflow  +
push dword ptr [ebp+1Ch]  +
call sub_1006F95  +
add esp 14h +
or eax 0FFFFFFFFh +
jmp loc_1010986  +
mov eax [ebp+0Ch] +
lea ecx [eax+1] +
mov dl [eax] +
inc eax  +
test dl dl +
jnz loc_101097D  +
sub eax ecx +
pop esi  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_10] +
mov ecx [eax+8] +
push esi  +
cmp ecx offset off_1017DE8 +
jz loc_10109AC  +
cmp ecx offset off_1017DD0 +
jnz loc_10109B3  +
mov eax [eax+0Ch] +
mov esi [eax] +
jmp loc_10109C4  +
cmp ecx offset off_1017D68 +
jnz loc_10109F5  +
mov eax [eax+0Ch] +
mov eax [eax+4] +
mov esi [eax+0Ch] +
push esi  +
push offset dword_100A7A0  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
call sub_10107E6  +
add esp 10h +
test eax eax +
jge loc_10109FD  +
push esi  +
push [ebp+arg_C]  +
push offset dword_100A514  +
push offset aBufferOverflow  +
push [ebp+arg_14]  +
call sub_1006F95  +
add esp 14h +
or eax 0FFFFFFFFh +
pop esi  +
pop ebp  +
retn 18h  +
mov eax [ebp+arg_4] +
lea ecx [eax+1] +
mov dl [eax] +
inc eax  +
test dl dl +
jnz loc_1010A03  +
sub eax ecx +
jmp loc_10109F8  +
***
push ebp  +
mov ebp esp +
mov eax [ebp+18h] +
mov ecx [eax+8] +
push esi  +
cmp ecx offset off_1017DE8 +
jnz loc_1010A2F  +
mov eax [eax+0Ch] +
mov esi [eax+4] +
jmp loc_1010A40  +
cmp ecx offset off_1017D68 +
jnz loc_1010A74  +
mov eax [eax+0Ch] +
mov eax [eax+4] +
mov esi [eax+10h] +
push esi  +
push offset dword_100A7A0  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
call sub_10107E6  +
add esp 10h +
test eax eax +
jge loc_1010A63  +
push esi  +
push dword ptr [ebp+14h]  +
push offset dword_100A514  +
jmp loc_1010A81  +
mov eax [ebp+0Ch] +
lea ecx [eax+1] +
mov dl [eax] +
inc eax  +
test dl dl +
jnz loc_1010A69  +
sub eax ecx +
jmp loc_1010A94  +
push offset dword_1010A9C  +
push dword ptr [ebp+14h]  +
push offset dword_100A5F8  +
push offset aBufferOverflow  +
push dword ptr [ebp+1Ch]  +
call sub_1006F95  +
add esp 14h +
or eax 0FFFFFFFFh +
pop esi  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_10] +
mov eax [eax+0Ch] +
push esi  +
mov esi [eax+4] +
push dword ptr [esi+14h]  +
push offset dword_100A7A0  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
call sub_10107E6  +
add esp 10h +
test eax eax +
jge loc_1010AF1  +
push dword ptr [esi+14h]  +
push [ebp+arg_C]  +
push offset dword_100A514  +
push offset aBufferOverflow  +
push [ebp+arg_14]  +
call sub_1006F95  +
add esp 14h +
or eax 0FFFFFFFFh +
jmp loc_1010B00  +
mov eax [ebp+arg_4] +
lea ecx [eax+1] +
mov dl [eax] +
inc eax  +
test dl dl +
jnz loc_1010AF7  +
sub eax ecx +
pop esi  +
pop ebp  +
retn 18h  +
***
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
call sub_10107E6  +
add esp 10h +
test eax eax +
jge loc_1010B51  +
push dword ptr [esi]  +
push dword ptr [ebp+14h]  +
push offset dword_100A514  +
push offset aBufferOverflow  +
push dword ptr [ebp+1Ch]  +
call sub_1006F95  +
add esp 14h +
or eax 0FFFFFFFFh +
jmp loc_1010B60  +
mov eax [ebp+0Ch] +
lea ecx [eax+1] +
mov dl [eax] +
inc eax  +
test dl dl +
jnz loc_1010B57  +
sub eax ecx +
pop esi  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_10] +
mov eax [eax+0Ch] +
mov eax [eax+4] +
movzx eax word ptr [eax+20h] +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
call sub_10106FC  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 21Ch +
mov eax dword_1017000 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_10] +
mov eax [eax+0Ch] +
push ebx  +
mov ebx [ebp+arg_4] +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov edi [eax+4] +
lea eax [ebp+var_21C] +
push eax  +
call sub_100683B  +
lea eax [ebp+var_21C] +
push eax  +
push offset aInfdateformat  +
push dword ptr [esi+8]  +
call sub_1004F32  +
mov esi offset aMmDdYy +
test eax eax +
jnz loc_1010BEC  +
mov eax esi +
jmp loc_1010BF2  +
push eax  +
call sub_10060B6  +
push esi  +
push eax  +
call ds:_stricmp  +
pop ecx  +
neg eax  +
pop ecx  +
sbb eax eax +
inc eax  +
push eax  +
movzx eax word ptr [edi+1Ch] +
push eax  +
push [ebp+arg_8]  +
push ebx  +
call sub_1010170  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_10026CE  +
leave   +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_10] +
mov eax [eax+0Ch] +
mov eax [eax+4] +
movzx eax word ptr [eax+1Eh] +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
call sub_1010484  +
pop ebp  +
retn 18h  +
***
push ebp  +
mov ebp esp +
mov eax [ebp+18h] +
push esi  +
mov esi [eax+0Ch] +
push dword ptr [esi+8]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
call sub_1002515  +
test eax eax +
jge loc_1010C8B  +
push dword ptr [esi+8]  +
push dword ptr [ebp+14h]  +
push offset dword_100A5F8  +
push offset aBufferOverflow  +
push dword ptr [ebp+1Ch]  +
call sub_1006F95  +
add esp 14h +
or eax 0FFFFFFFFh +
jmp loc_1010C9A  +
mov eax [ebp+0Ch] +
lea ecx [eax+1] +
mov dl [eax] +
inc eax  +
test dl dl +
jnz loc_1010C91  +
sub eax ecx +
pop esi  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_10] +
push esi  +
mov esi [eax+0Ch] +
push dword ptr [esi+4]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
call sub_1002515  +
test eax eax +
jge loc_1010CE2  +
push dword ptr [esi+4]  +
push [ebp+arg_C]  +
push offset dword_100A5F8  +
push offset aBufferOverflow  +
push [ebp+arg_14]  +
call sub_1006F95  +
add esp 14h +
or eax 0FFFFFFFFh +
jmp loc_1010CF1  +
mov eax [ebp+arg_4] +
lea ecx [eax+1] +
mov dl [eax] +
inc eax  +
test dl dl +
jnz loc_1010CE8  +
sub eax ecx +
pop esi  +
pop ebp  +
retn 18h  +
***
xor eax eax +
jmp loc_1010D92  +
push 800h  +
push esi  +
call sub_100130C  +
add esp 1Ch +
push esi  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
call sub_1002515  +
test eax eax +
jge loc_1010D82  +
push esi  +
push dword ptr [ebp+14h]  +
push offset dword_100A5F8  +
push offset aBufferOverflow  +
push dword ptr [ebp+1Ch]  +
call sub_1006F95  +
add esp 14h +
or eax 0FFFFFFFFh +
jmp loc_1010D91  +
mov eax [ebp+0Ch] +
lea edx [eax+1] +
mov cl [eax] +
inc eax  +
test cl cl +
jnz loc_1010D88  +
sub eax edx +
pop esi  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov dword ptr [eax+0A4h] 1 +
mov eax [ebp+arg_10] +
mov eax [eax+0Ch] +
push esi  +
mov esi [eax+4] +
mov eax [esi+38h] +
test eax eax +
jz loc_1010E0B  +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
call sub_1002515  +
test eax eax +
jge loc_1010DFC  +
push dword ptr [esi+38h]  +
push [ebp+arg_C]  +
push offset dword_100A5F8  +
push offset aBufferOverflow  +
push [ebp+arg_14]  +
call sub_1006F95  +
add esp 14h +
or eax 0FFFFFFFFh +
jmp loc_1010E0B  +
mov eax [ebp+arg_4] +
lea edx [eax+1] +
mov cl [eax] +
inc eax  +
test cl cl +
jnz loc_1010E02  +
sub eax edx +
pop esi  +
pop ebp  +
retn 18h  +
***
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov dword ptr [eax+0A4h] 1 +
mov eax [ebp+18h] +
mov eax [eax+0Ch] +
push esi  +
mov esi [eax+4] +
mov eax [esi+3Ch] +
test eax eax +
jz loc_1010E77  +
push eax  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
call sub_1002515  +
test eax eax +
jge loc_1010E68  +
push dword ptr [esi+3Ch]  +
push dword ptr [ebp+14h]  +
push offset dword_100A5F8  +
push offset aBufferOverflow  +
push dword ptr [ebp+1Ch]  +
call sub_1006F95  +
add esp 14h +
or eax 0FFFFFFFFh +
jmp loc_1010E77  +
mov eax [ebp+0Ch] +
lea edx [eax+1] +
mov cl [eax] +
inc eax  +
test cl cl +
jnz loc_1010E6E  +
sub eax edx +
pop esi  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 23Ch +
mov eax dword_1017000 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
mov ebx [ebp+arg_C] +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov edi [ebp+arg_4] +
push offset aInf  +
push 20h  +
lea eax [ebp+var_24] +
push eax  +
call sub_1002515  +
push edi  +
push 20h  +
lea eax [ebp+var_24] +
push eax  +
call sub_10025A4  +
test eax eax +
jge loc_1010EDC  +
push edi  +
push 1Fh  +
push offset dword_100A554  +
push offset aParameterNameE  +
push ebx  +
call sub_1006F95  +
add esp 14h +
xor eax eax +
jmp loc_1010F1B  +
lea eax [ebp+var_23C] +
push eax  +
lea eax [ebp+var_24] +
push eax  +
push dword ptr [esi+8]  +
call sub_1004F32  +
cmp [ebp+arg_8] 0 +
mov edi eax +
jz loc_1010F19  +
test edi edi +
jz loc_1010F19  +
cmp dword ptr [esi+10h] 0 +
jnz loc_1010F19  +
push edi  +
call sub_10060B6  +
push ebx  +
push eax  +
lea eax [ebp+var_24] +
push eax  +
push dword ptr [esi+0Ch]  +
call sub_1011F9B  +
test eax eax +
jz loc_1010ED8  +
mov eax edi +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_10026CE  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp off_1017CCC 0 +
push esi  +
mov esi offset off_1017CCC +
jz loc_1010F79  +
push [ebp+arg_8]  +
push 0  +
push dword ptr [esi]  +
push [ebp+arg_0]  +
call sub_1010E81  +
test eax eax +
jz loc_1010F71  +
push eax  +
call sub_10060B6  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push eax  +
push dword ptr [esi]  +
push [ebp+arg_0]  +
call dword ptr [esi+4]  +
test eax eax +
jz loc_1010F81  +
add esi 8 +
cmp dword ptr [esi] 0 +
jnz loc_1010F45  +
xor eax eax +
inc eax  +
pop esi  +
pop ebp  +
retn 0Ch  +
xor eax eax +
jmp loc_1010F7C  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_4] 0 +
jnz loc_1010F9D  +
xor eax eax +
inc eax  +
jmp loc_1011023  +
push ebx  +
push esi  +
push edi  +
push [ebp+arg_4]  +
call sub_1003E27  +
jmp loc_1011016  +
push [ebp+arg_4]  +
call sub_1003E27  +
push [ebp+arg_4]  +
mov edi eax +
call sub_10060B6  +
cmp off_1017CF0 0 +
mov ebx [eax] +
mov esi offset off_1017CF0 +
jz loc_1010FFC  +
push edi  +
push dword ptr [esi]  +
call ds:_stricmp  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1010FE3  +
add esi 8 +
cmp dword ptr [esi] 0 +
jnz loc_1010FCC  +
cmp dword ptr [esi] 0 +
jz loc_1010FFC  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push ebx  +
push edi  +
push [ebp+arg_0]  +
call dword ptr [esi+4]  +
test eax eax +
jnz loc_101100E  +
jmp loc_101103D  +
push [ebp+arg_C]  +
push 0  +
push edi  +
push [ebp+arg_0]  +
call sub_1010E81  +
test eax eax +
jz loc_1011027  +
push [ebp+arg_4]  +
call sub_1003E13  +
mov [ebp+arg_4] eax +
test eax eax +
jnz loc_1010FAA  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 10h  +
push edi  +
push offset aS_2  +
push offset aUndeclaredPara  +
push [ebp+arg_C]  +
call sub_1006F95  +
add esp 10h +
xor eax eax +
jmp loc_1011020  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
mov eax dword_1017000 +
xor eax ebp +
mov [ebp-4] eax +
mov eax [ebp+8] +
mov ecx [ebp+18h] +
push ebx  +
push esi  +
mov esi [ebp+14h] +
mov ebx [esi] +
push edi  +
mov [ebp-2Ch] eax +
mov eax [ebp+10h] +
push eax  +
push dword ptr [esi+4]  +
mov [ebp-20h] eax +
mov [ebp-1Ch] ecx +
xor edi edi +
call sub_100FA66  +
push dword ptr [ebp-1Ch]  +
mov [ebp-28h] eax +
push 1  +
push dword ptr [ebp-20h]  +
push ebx  +
call sub_1010E81  +
mov [ebp-24h] eax +
test eax eax +
jnz loc_10110DB  +
mov edi [esi+8] +
mov eax [edi] +
test eax eax +
jz loc_10110D9  +
push dword ptr [ebp-20h]  +
push eax  +
call ds:_stricmp  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_10110D4  +
add edi 8 +
mov eax [edi] +
test eax eax +
jnz loc_10110BB  +
cmp dword ptr [edi] 0 +
jnz loc_10110DB  +
xor edi edi +
mov eax [ebp-28h] +
test eax eax +
jnz loc_101111C  +
cmp [ebp-24h] eax +
jnz loc_1011132  +
test edi edi +
jz loc_1011102  +
push dword ptr [ebp-1Ch]  +
push esi  +
push dword ptr [ebp-20h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp-2Ch]  +
push dword ptr [esi]  +
call dword ptr [edi+4]  +
jmp loc_10111E3  +
push dword ptr [ebp-20h]  +
push offset aS_2  +
push offset aUndefinedParam  +
push dword ptr [ebp-1Ch]  +
call sub_1006F95  +
add esp 10h +
jmp loc_1011126  +
cmp dword ptr [ebp-24h] 0 +
jnz loc_101112E  +
test edi edi +
jnz loc_101112E  +
or eax 0FFFFFFFFh +
jmp loc_10111E3  +
mov esi [eax] +
jmp loc_101113C  +
push dword ptr [ebp-24h]  +
call sub_10060B6  +
mov esi eax +
mov edi ds:_stricmp +
push offset aDate  +
push dword ptr [ebp-20h]  +
call edi  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_10111A6  +
push dword ptr [ebp-1Ch]  +
push esi  +
call sub_1010226  +
push dword ptr [ebp-1Ch]  +
movzx eax ax +
push offset aInfdateformat  +
push dword ptr [ebx+8]  +
mov [ebp-28h] eax +
call sub_1004F32  +
mov esi offset aMmDdYy +
test eax eax +
jnz loc_101117E  +
mov eax esi +
jmp loc_1011184  +
push eax  +
call sub_10060B6  +
push esi  +
push eax  +
call edi  +
pop ecx  +
neg eax  +
pop ecx  +
sbb eax eax +
inc eax  +
push eax  +
push dword ptr [ebp-28h]  +
lea eax [ebp-18h] +
push 14h  +
push eax  +
call sub_1010170  +
cmp eax 0FFFFFFFFh +
jz loc_1011126  +
lea esi [ebp-18h] +
push esi  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp-2Ch]  +
call sub_1002515  +
test eax eax +
jge loc_10111D4  +
push esi  +
push dword ptr [ebp-20h]  +
push offset dword_100A5F8  +
push offset aBufferOverflow  +
push dword ptr [ebp-1Ch]  +
call sub_1006F95  +
add esp 14h +
jmp loc_1011126  +
***
mov eax [ebp-2Ch] +
lea edx [eax+1] +
mov cl [eax] +
inc eax  +
test cl cl +
jnz loc_10111DA  +
sub eax edx +
mov ecx [ebp-4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_10026CE  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov esi [edi+70h] +
cmp dword ptr [esi] 0 +
jnz loc_1011233  +
xor eax eax +
inc eax  +
jmp loc_10112A8  +
push ebx  +
mov ebx [ebp+arg_4] +
push ebx  +
push offset aInfdisklinef_0  +
push offset aInfdisklinefor  +
push edi  +
call sub_100FCC2  +
mov ecx [ebp+arg_8] +
push [ebp+arg_C]  +
and [ebp+var_14] 0 +
mov [ebp+var_4] ecx +
lea ecx [ebp+var_8] +
mov [ebp+var_C] ecx +
lea ecx [ebp+var_18] +
push ecx  +
push offset loc_1011063  +
push eax  +
mov [ebp+var_18] edi +
push 200h  +
lea edi [esi+0Ch] +
push edi  +
mov [ebp+var_8] ebx +
mov [ebp+var_10] offset off_1017DD0 +
call sub_100F2E1  +
pop ebx  +
test eax eax +
jz loc_10112A8  +
push [ebp+arg_C]  +
push dword ptr [esi]  +
call sub_100E21C  +
push edi  +
push offset aS  +
push eax  +
call ds:fprintf  +
xor ecx ecx +
add esp 0Ch +
test eax eax +
setnl cl  +
mov eax ecx +
pop edi  +
pop esi  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1Ch +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov esi [edi+70h] +
cmp dword ptr [esi+4] 0 +
jnz loc_10112E3  +
xor eax eax +
inc eax  +
jmp loc_101135F  +
push ebx  +
mov ebx [ebp+arg_4] +
push ebx  +
push offset aInfcabinetli_0  +
push offset aInfcabinetline  +
push edi  +
call sub_100FCC2  +
mov ecx [ebp+arg_8] +
push [ebp+arg_10]  +
and [ebp+var_18] 0 +
mov [ebp+var_C] ecx +
mov ecx [ebp+arg_C] +
mov [ebp+var_4] ecx +
lea ecx [ebp+var_C] +
mov [ebp+var_10] ecx +
lea ecx [ebp+var_1C] +
push ecx  +
push offset loc_1011063  +
push eax  +
mov [ebp+var_1C] edi +
push 200h  +
lea edi [esi+0Ch] +
push edi  +
mov [ebp+var_8] ebx +
mov [ebp+var_14] offset off_1017DE8 +
call sub_100F2E1  +
pop ebx  +
test eax eax +
jz loc_101135F  +
push [ebp+arg_10]  +
push dword ptr [esi+4]  +
call sub_100E21C  +
push edi  +
push offset aS  +
push eax  +
call ds:fprintf  +
xor ecx ecx +
add esp 0Ch +
test eax eax +
setnl cl  +
mov eax ecx +
pop edi  +
pop esi  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
push ebx  +
mov ebx [ebp+arg_0] +
push edi  +
mov edi [ebx+70h] +
cmp dword ptr [edi+8] 0 +
jnz loc_10113A1  +
xor eax eax +
inc eax  +
jmp loc_1011462  +
push esi  +
mov esi [ebp+arg_8] +
push dword ptr [esi+14h]  +
push offset aInffilelinef_0  +
push offset aInffilelinefor  +
push ebx  +
call sub_100FCC2  +
push [ebp+arg_10]  +
mov ecx [ebp+arg_4] +
mov [ebp+var_8] ecx +
mov ecx [ebp+arg_C] +
lea edx [ebp+var_18] +
push edx  +
push offset loc_1011063  +
mov [ebp+var_14] ecx +
lea ecx [ebp+var_8] +
push eax  +
mov [ebp+var_C] ecx +
lea ecx [edi+0Ch] +
push 200h  +
push ecx  +
mov [ebp+var_4] esi +
mov [ebp+var_18] ebx +
mov [ebp+var_10] offset off_1017D68 +
mov [ebp+arg_0] ecx +
call sub_100F2E1  +
test eax eax +
jz loc_1011468  +
push [ebp+arg_10]  +
push dword ptr [edi+8]  +
call sub_100E21C  +
push [ebp+arg_0]  +
push offset aS  +
push eax  +
call ds:fprintf  +
add esp 0Ch +
test eax eax +
jl loc_1011468  +
mov eax [esi+28h] +
or dword ptr [esi+18h] 1 +
test eax eax +
jz loc_101145E  +
push eax  +
call sub_1003E27  +
jmp loc_101144D  +
push edi  +
call sub_10060B6  +
push [ebp+arg_10]  +
push dword ptr [eax+4]  +
push dword ptr [eax]  +
push dword ptr [ebx+70h]  +
call sub_100FAE3  +
test eax eax +
jz loc_1011468  +
push edi  +
call sub_1003E13  +
mov edi eax +
test edi edi +
jnz loc_101142D  +
push dword ptr [esi+28h]  +
call sub_100F701  +
and [esi+28h] edi +
xor eax eax +
inc eax  +
pop esi  +
pop edi  +
pop ebx  +
leave   +
retn 14h  +
xor eax eax +
jmp loc_1011461  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 38h +
mov eax dword_1017000 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
mov esi [ebp+arg_4] +
push 20Ch  +
mov [ebp+var_28] esi +
call ds:malloc  +
pop ecx  +
mov ecx eax +
mov [ebp+var_34] ecx +
test ecx ecx +
jnz loc_10114CA  +
push offset aOutOfMemoryC_0  +
push esi  +
call sub_1006F95  +
pop ecx  +
pop ecx  +
xor eax eax +
jmp loc_1011618  +
push edi  +
xor eax eax +
mov edi ecx +
stos   +
stos   +
push esi  +
stos   +
push ebx  +
mov [ebx+70h] ecx +
call sub_1004CF8  +
test eax eax +
jz loc_1011633  +
push esi  +
push offset aInfsectionorde  +
push dword ptr [ebx+8]  +
call sub_1004F32  +
test eax eax +
jnz loc_101151F  +
mov [ebp+var_30] offset dword_10073F0 +
mov eax [ebp+var_30] +
movsx eax byte ptr [eax] +
push eax  +
call ds:toupper  +
sub eax 43h +
pop ecx  +
jz loc_1011531  +
dec eax  +
jz loc_101152D  +
push 2  +
pop edi  +
sub eax edi +
jz loc_1011534  +
jmp loc_1011633  +
push eax  +
call sub_10060B6  +
mov [ebp+var_30] eax +
jmp loc_1011604  +
xor edi edi +
jmp loc_1011534  +
xor edi edi +
inc edi  +
push [ebp+var_28]  +
mov esi edi +
imul esi esi +
push off_1017CAC[esi]  +
push dword ptr [ebx+8]  +
call sub_1004F32  +
test eax eax +
jnz loc_1011557  +
mov [ebp+var_2C] offset dword_1003888 +
jmp loc_1011560  +
push eax  +
call sub_10060B6  +
mov [ebp+var_2C] eax +
push [ebp+var_28]  +
push offset aWt  +
push offset dword_1011638  +
push off_1017CA8[esi]  +
call sub_100EC56  +
mov ecx [ebp+var_34] +
mov [ecx+edi*4] eax +
test eax eax +
jz loc_1011628  +
push [ebp+var_28]  +
push eax  +
call sub_100E21C  +
xor edi edi +
mov [ebp+var_38] eax +
inc edi  +
jmp loc_10115F8  +
push [ebp+var_2C]  +
push offset aS  +
push [ebp+var_38]  +
call ds:fprintf  +
add esp 0Ch +
test eax eax +
jl loc_1011628  +
push [ebp+var_28]  +
lea eax [ebp+var_24] +
push offset aInfHeaderVaria  +
push edi  +
push off_1017CB0[esi]  +
push 20h  +
push eax  +
call sub_10116CD  +
test eax eax +
jz loc_1011628  +
push [ebp+var_28]  +
lea eax [ebp+var_24] +
push eax  +
push dword ptr [ebx+8]  +
call sub_1004F32  +
test eax eax +
jz loc_10115EC  +
push eax  +
call sub_10060B6  +
mov [ebp+var_2C] eax +
inc edi  +
jmp loc_10115F8  +
push [ebp+var_28]  +
call sub_100683B  +
and [ebp+var_2C] 0 +
cmp [ebp+var_2C] 0 +
jnz loc_1011597  +
inc [ebp+var_30]  +
mov eax [ebp+var_30] +
cmp byte ptr [eax] 0 +
jnz loc_10114FD  +
mov eax [ebp+var_34] +
mov dword ptr [ebx+7Ch] 1 +
pop edi  +
mov ecx [ebp+var_4] +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_10026CE  +
leave   +
retn 8  +
push [ebp+var_28]  +
push [ebp+var_34]  +
call sub_1010821  +
xor eax eax +
jmp loc_1011617  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_C] 0 +
mov eax [ebp+arg_8] +
mov eax [eax] +
push ebx  +
mov ebx [ebp+arg_4] +
push esi  +
mov esi [ebx] +
push edi  +
mov edi [ebp+arg_0] +
mov ecx [edi] +
jnz loc_101169B  +
test esi esi +
jle loc_101168D  +
mov dl [eax] +
dec esi  +
mov [ecx] dl +
inc ecx  +
inc eax  +
test dl dl +
jnz loc_101167E  +
cmp byte ptr [eax-1] 0 +
jz loc_10116B5  +
xor eax eax +
jmp loc_10116C1  +
cmp [ebp+arg_C] 0 +
jle loc_10116B5  +
test esi esi +
jle loc_10116AF  +
dec [ebp+arg_C]  +
mov dl [eax] +
dec esi  +
mov [ecx] dl +
inc ecx  +
inc eax  +
test dl dl +
jnz loc_1011697  +
cmp [ebp+arg_C] 0 +
jg loc_1011693  +
mov [edi] ecx +
mov ecx [ebp+arg_8] +
mov [ebx] esi +
mov [ecx] eax +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10Ch +
mov eax dword_1017000 +
xor eax ebp +
mov [ebp+var_4] eax +
mov ecx [ebp+arg_8] +
mov edx [ebp+arg_0] +
and [ebp+var_108] 0 +
push ebx  +
push esi  +
mov esi [ebp+arg_10] +
push edi  +
mov edi [ebp+arg_14] +
lea eax [ebp+var_104] +
mov [ebp+var_10C] ecx +
jmp loc_1011738  +
cmp cl 2Ah +
jnz loc_1011722  +
lea ecx [ebp-6] +
cmp eax ecx +
jnb loc_101173E  +
mov byte ptr [eax] 25h +
inc eax  +
mov byte ptr [eax] 64h +
inc eax  +
inc [ebp+var_108]  +
jmp loc_101172C  +
lea ebx [ebp-5] +
cmp eax ebx +
jnb loc_101173E  +
mov [eax] cl +
inc eax  +
inc [ebp+var_10C]  +
mov ecx [ebp+var_10C] +
mov cl [ecx] +
test cl cl +
jnz loc_1011706  +
cmp [ebp+var_108] 4 +
mov byte ptr [eax] 0 +
jle loc_1011766  +
push esi  +
push 4  +
push 2Ah  +
push offset aCDS  +
push offset aWildcard1Limit  +
push edi  +
call sub_1006F95  +
add esp 18h +
xor eax eax +
jmp loc_101179E  +
mov eax dword ptr [ebp+arg_C] +
mov ebx [ebp+arg_4] +
push eax  +
push eax  +
push eax  +
push eax  +
lea eax [ebp+var_104] +
push eax  +
push ebx  +
push edx  +
call sub_100130C  +
add esp 1Ch +
test eax eax +
jge loc_101179B  +
lea eax [ebp+var_104] +
push eax  +
dec ebx  +
push ebx  +
push esi  +
push offset dword_100A754  +
push offset a1LengthExceede  +
jmp loc_1011759  +
xor eax eax +
inc eax  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_10026CE  +
leave   +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_8] +
mov eax 400h +
sub esp 0Ch +
cmp [ebp+arg_8] eax +
jg loc_101181F  +
mov edx eax +
mov ecx 4000h +
cmp edx ecx +
jge loc_1011832  +
cmp [ebp+arg_8] eax +
jg loc_1011835  +
mov [ebp+arg_8] eax +
jmp loc_1011835  +
mov [ebp+arg_8] ecx +
mov eax [ebp+arg_4] +
push edi  +
xor edi edi +
sub eax edi +
jz loc_1011870  +
dec eax  +
jz loc_1011864  +
push [ebp+arg_0]  +
push [ebp+arg_4]  +
push offset dword_100A554  +
push offset aInvalidOpenMod  +
push [ebp+arg_C]  +
call sub_1006F95  +
add esp 14h +
xor eax eax +
jmp loc_10119A6  +
mov eax 8102h +
mov ecx 180h +
jmp loc_1011877  +
mov eax 8000h +
xor ecx ecx +
push ecx  +
push eax  +
push [ebp+arg_0]  +
call ds:_open  +
add esp 0Ch +
mov [ebp+var_8] eax +
cmp eax 0FFFFFFFFh +
jnz loc_10118A7  +
push [ebp+arg_0]  +
push offset aS_2  +
push offset aCouldNotOpen_0  +
push [ebp+arg_C]  +
call sub_1006F95  +
add esp 10h +
jmp loc_101185D  +
push ebx  +
mov ebx ds:malloc +
push esi  +
push 428h  +
call ebx  +
mov esi eax +
pop ecx  +
cmp esi edi +
jnz loc_10118DA  +
push [ebp+arg_0]  +
push offset aS_2  +
push offset aOutOfMemoryOpe  +
push [ebp+arg_C]  +
call sub_1006F95  +
add esp 10h +
jmp loc_10119E7  +
push [ebp+arg_8]  +
call ebx  +
mov ebx eax +
pop ecx  +
mov [esi+0Ch] ebx +
cmp ebx edi +
jnz loc_101190D  +
push esi  +
call ds:free  +
push [ebp+arg_0]  +
push offset aS_2  +
push offset aOutOfMemoryOpe  +
push [ebp+arg_C]  +
call sub_1006F95  +
add esp 14h +
jmp loc_10119E7  +
push [ebp+arg_0]  +
call ds:_strdup  +
pop ecx  +
mov [ebp+var_C] eax +
mov [esi] eax +
cmp eax edi +
jnz loc_1011949  +
push ebx  +
mov ebx ds:free +
call ebx  +
push esi  +
call ebx  +
push [ebp+arg_0]  +
push offset aS_2  +
push offset aOutOfMemoryOpe  +
push [ebp+arg_C]  +
call sub_1006F95  +
add esp 18h +
jmp loc_10119E7  +
mov ecx [ebp+arg_8] +
mov eax [ebp+var_8] +
mov [esi+8] ecx +
xor ecx ecx +
cmp [ebp+arg_4] edi +
mov [esi+4] eax +
setz cl  +
mov [esi+10h] ebx +
mov [esi+14h] edi +
mov [esi+18h] edi +
mov [esi+1Ch] edi +
mov [esi+24h] edi +
mov [esi+20h] ecx +
cmp [ebp+arg_4] edi +
jnz loc_10119A2  +
push 3  +
lea ecx [ebp+var_4] +
push ecx  +
push eax  +
call ds:_read  +
add esp 0Ch +
cmp eax 3 +
jnz loc_10119AB  +
cmp byte ptr [ebp+var_4] 0EFh +
jnz loc_10119AB  +
cmp byte ptr [ebp+var_4+1] 0BBh +
jnz loc_10119AB  +
cmp byte ptr [ebp+var_4+2] 0BFh +
jnz loc_10119AB  +
mov dword ptr [esi+24h] 1 +
mov eax esi +
pop esi  +
pop ebx  +
pop edi  +
leave   +
retn 10h  +
push edi  +
push edi  +
push [ebp+var_8]  +
call ds:_lseek  +
add esp 0Ch +
cmp eax 0FFFFFFFFh +
jnz loc_10119A2  +
push [ebp+var_C]  +
mov edi ds:free +
call edi  +
push ebx  +
call edi  +
push esi  +
call edi  +
push [ebp+arg_0]  +
push offset aS_2  +
push offset aCouldNotOpen_0  +
push [ebp+arg_C]  +
call sub_1006F95  +
add esp 1Ch +
xor eax eax +
jmp loc_10119A4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
cmp dword ptr [esi+20h] 0 +
push edi  +
mov edi [ebp+arg_4] +
jnz loc_1011A7B  +
push dword ptr [esi]  +
push offset aS_2  +
push offset aTriedToReadFro  +
push [ebp+arg_C]  +
call sub_1006F95  +
add esp 10h +
xor eax eax +
jmp loc_1011B30  +
cmp [ebp+arg_8] 0 +
push ebx  +
jle loc_1011B2D  +
xor ebx ebx +
inc ebx  +
jmp loc_1011AB0  +
mov ecx [esi+10h] +
mov al [ecx] +
cmp al 0Ah +
jz loc_1011B12  +
cmp al 0Dh +
jz loc_1011AAC  +
cmp al 1Ah +
jz loc_1011AF2  +
cmp [ebp+arg_8] ebx +
jle loc_1011AED  +
dec [ebp+arg_8]  +
mov [edi] al +
inc edi  +
inc dword ptr [esi+10h]  +
jmp loc_1011AB0  +
inc ecx  +
mov [esi+10h] ecx +
mov eax [esi+10h] +
cmp eax [esi+14h] +
jbe loc_1011A8B  +
cmp dword ptr [esi+18h] 0 +
jnz loc_1011B1A  +
push dword ptr [esi+8]  +
push dword ptr [esi+0Ch]  +
push dword ptr [esi+4]  +
call ds:_read  +
add esp 0Ch +
cmp eax [esi+8] +
jz loc_1011AD8  +
mov [esi+18h] ebx +
cmp [ebp+arg_8] 0 +
mov ecx [esi+0Ch] +
lea eax [eax+ecx-1] +
mov [esi+10h] ecx +
mov [esi+14h] eax +
jle loc_1011B2D  +
jmp loc_1011AB0  +
mov byte ptr [edi] 0 +
jmp loc_1011B2D  +
mov eax [esi+0Ch] +
and dword ptr [esi+14h] 0 +
mov [esi+18h] ebx +
mov [esi+10h] eax +
mov byte ptr [edi] 0 +
cmp edi [ebp+arg_4] +
ja loc_1011B0A  +
mov [esi+1Ch] ebx +
inc edi  +
mov eax edi +
sub eax [ebp+arg_4] +
jmp loc_1011B2F  +
inc dword ptr [esi+10h]  +
mov byte ptr [edi] 0 +
jmp loc_1011B22  +
mov byte ptr [edi] 0 +
cmp edi [ebp+arg_4] +
jbe loc_1011B2A  +
mov eax edi +
sub eax [ebp+arg_4] +
inc eax  +
jmp loc_1011B2F  +
mov [esi+1Ch] ebx +
xor eax eax +
pop ebx  +
pop edi  +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax+1Ch] +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
push dword ptr [edi+4]  +
call ds:_close  +
push dword ptr [edi]  +
mov esi ds:free +
mov ebx eax +
call esi  +
push dword ptr [edi+0Ch]  +
call esi  +
push edi  +
call esi  +
add esp 10h +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax+24h] +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push offset a0123456789  +
push [ebp+arg_0]  +
call ds:strpbrk  +
mov esi eax +
pop ecx  +
pop ecx  +
test esi esi +
jz loc_1011C18  +
push ebx  +
mov ebx ds:atol +
push edi  +
push esi  +
call ebx  +
mov edi eax +
mov [esp+10h+var_10] offset a0123456789 +
push esi  +
shl edi 10h +
call ds:strspn  +
add esi eax +
cmp byte ptr [esi] 2Eh +
pop ecx  +
pop ecx  +
jnz loc_1011C14  +
inc esi  +
push esi  +
call ebx  +
and eax 0FFFFh +
pop ecx  +
add edi eax +
mov eax edi +
pop edi  +
pop ebx  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 150h +
mov eax dword_1017000 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_4] +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov [ebp+var_11C] eax +
test esi esi +
jz loc_1011D30  +
test eax eax +
jz loc_1011D30  +
mov eax esi +
lea edx [eax+1] +
mov cl [eax] +
inc eax  +
test cl cl +
jnz loc_1011C69  +
sub eax edx +
cmp eax 5 +
jb loc_1011D30  +
mov eax esi +
lea edx [eax+1] +
mov cl [eax] +
inc eax  +
test cl cl +
jnz loc_1011C80  +
sub eax edx +
lea eax [esi+eax-4] +
push eax  +
push offset a_ttf  +
call ds:_stricmp  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_1011D30  +
push 8000h  +
push esi  +
call ds:_open  +
pop ecx  +
pop ecx  +
mov [ebp+var_108] eax +
cmp eax 0FFFFFFFFh +
jz loc_1011D30  +
mov edi ds:_read +
push 0Ch  +
lea ecx [ebp+var_150] +
push ecx  +
push eax  +
call edi  +
add esp 0Ch +
cmp eax 0Ch +
jnz loc_1011D23  +
mov eax [ebp+var_14C] +
movzx cx al +
shl cx 8 +
shr eax 8 +
movzx esi cx +
movzx eax al +
or esi eax +
push 0  +
pop ebx  +
jbe loc_1011D23  +
cmp ebx 28h +
jnb loc_1011D23  +
push 10h  +
lea eax [ebp+var_134] +
push eax  +
push [ebp+var_108]  +
call edi  +
add esp 0Ch +
cmp eax 10h +
jnz loc_1011D23  +
cmp [ebp+var_134] 656D616Eh +
jz loc_1011D41  +
inc ebx  +
cmp ebx esi +
jb loc_1011CF4  +
push [ebp+var_108]  +
call ds:_close  +
pop ecx  +
xor eax eax +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_10026CE  +
leave   +
retn   +
mov eax [ebp+var_12C] +
mov ebx ds:_lseek +
mov esi eax +
mov ecx eax +
shr ecx 10h +
and esi 0FF0000h +
or esi ecx +
mov ecx eax +
shl ecx 10h +
mov edi 0FF00h +
and eax edi +
or ecx eax +
shl ecx 8 +
shr esi 8 +
or esi ecx +
push 0  +
push esi  +
push [ebp+var_108]  +
call ebx  +
add esp 0Ch +
cmp eax esi +
jnz loc_1011D23  +
push 6  +
lea eax [ebp+var_124] +
push eax  +
push [ebp+var_108]  +
call ds:_read  +
add esp 0Ch +
cmp eax 6 +
jnz loc_1011D23  +
mov eax [ebp+var_124+2] +
movzx cx al +
shl cx 8 +
shr eax 8 +
movzx esi cx +
movzx eax al +
or esi eax +
jz loc_1011D23  +
push 0Ch  +
lea eax [ebp+var_118] +
push eax  +
push [ebp+var_108]  +
dec esi  +
call ds:_read  +
add esp 0Ch +
cmp eax 0Ch +
jnz loc_1011D23  +
mov eax [ebp+var_118] +
movzx cx byte ptr [ebp+var_118] +
shr eax 8 +
movzx ax al +
shl cx 8 +
or ax cx +
cmp ax 1 +
jnz loc_1011E26  +
mov eax [ebp+var_112] +
movzx cx byte ptr [ebp+var_112] +
shr eax 8 +
movzx ax al +
shl cx 8 +
or ax cx +
cmp ax 5 +
jz loc_1011E30  +
test esi esi +
jz loc_1011D23  +
jmp loc_1011DC0  +
mov eax [ebp+var_12C] +
mov esi eax +
mov ecx eax +
shr ecx 10h +
and esi 0FF0000h +
or esi ecx +
mov ecx eax +
shl ecx 10h +
and eax edi +
or ecx eax +
mov eax [ebp+var_120] +
shl ecx 8 +
shr esi 8 +
or esi ecx +
movzx cx al +
shl cx 8 +
shr eax 8 +
movzx ecx cx +
movzx eax al +
or ecx eax +
mov eax [ebp+var_10E] +
add esi ecx +
movzx cx al +
shl cx 8 +
shr eax 8 +
movzx eax al +
movzx ecx cx +
or ecx eax +
mov eax [ebp+var_112+2] +
add esi ecx +
movzx cx al +
shl cx 8 +
shr eax 8 +
push 0  +
movzx edi cx +
movzx eax al +
push esi  +
push [ebp+var_108]  +
or edi eax +
call ebx  +
add esp 0Ch +
cmp eax esi +
jnz loc_1011D23  +
cmp edi 0FFh +
ja loc_1011D23  +
push edi  +
lea eax [ebp+var_104] +
push eax  +
push [ebp+var_108]  +
call ds:_read  +
add esp 0Ch +
cmp eax edi +
jnz loc_1011D23  +
push [ebp+var_108]  +
mov [ebp+edi+var_104] 0 +
call ds:_close  +
pop ecx  +
lea eax [ebp+var_104] +
push eax  +
call sub_1011BC5  +
mov ecx [ebp+var_11C] +
mov [ecx] eax +
xor eax eax +
inc eax  +
jmp loc_1011D32  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 21Ch +
mov eax dword_1017000 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov edi [ebp+arg_4] +
push edi  +
call sub_1003DED  +
mov ebx eax +
test ebx ebx +
jnz loc_1011F50  +
xor eax eax +
jmp loc_1011F76  +
mov esi [esi] +
jmp loc_1011F70  +
push edi  +
push dword ptr [esi+10h]  +
push dword ptr [esi+0Ch]  +
push dword ptr [esi+8]  +
push dword ptr [esi+4]  +
push dword ptr [esi]  +
push ebx  +
call sub_1005563  +
test eax eax +
jz loc_1011F87  +
mov esi [esi+14h] +
test esi esi +
jnz loc_1011F54  +
mov eax ebx +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_10026CE  +
leave   +
retn 8  +
lea eax [ebp+var_21C] +
push eax  +
push ebx  +
call sub_1003271  +
jmp loc_1011F4C  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
mov edi [ebp+arg_C] +
push edi  +
push [ebp+arg_4]  +
call sub_1003E3A  +
test eax eax +
jz loc_1011FC4  +
push edi  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1004F50  +
mov esi eax +
test esi esi +
jnz loc_1011FE1  +
push edi  +
push 0  +
push 0  +
push 5  +
push offset dword_1001178  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1005563  +
mov esi eax +
test esi esi +
jz loc_1011FF1  +
push edi  +
push [ebp+arg_8]  +
push esi  +
call sub_1004FDD  +
neg eax  +
sbb eax eax +
and eax esi +
pop edi  +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov eax dword_1017000 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
mov ebx [ebp+arg_C] +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov edi [ebp+arg_4] +
push 0Ah  +
push 0Ch  +
lea eax [ebp+var_10] +
push eax  +
push [ebp+arg_8]  +
call sub_1012222  +
add esp 10h +
push ebx  +
lea eax [ebp+var_10] +
push eax  +
push edi  +
push esi  +
call sub_1011F9B  +
mov ecx [ebp+var_4] +
neg eax  +
pop edi  +
sbb eax eax +
pop esi  +
xor ecx ebp +
neg eax  +
pop ebx  +
call sub_10026CE  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2D0h +
mov eax dword_1017000 +
xor eax ebp +
mov [ebp+var_4] eax +
mov [ebp+var_220] eax +
mov [ebp+var_224] ecx +
mov [ebp+var_228] edx +
mov [ebp+var_22C] ebx +
mov [ebp+var_230] esi +
mov [ebp+var_234] edi +
mov [ebp+var_208] ss +
mov [ebp+var_214] cs +
mov [ebp+var_238] ds +
mov [ebp+var_23C] es +
mov [ebp+var_240] fs +
mov [ebp+var_244] gs +
pushf   +
pop [ebp+var_210]  +
mov eax [ebp+4] +
mov [ebp+var_218] eax +
lea eax [ebp+4] +
mov [ebp+var_2D0] 10001h +
mov [ebp+var_20C] eax +
mov eax [eax-4] +
push offset OutputString  +
mov [ebp+var_21C] eax +
call ds:OutputDebugStringA  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_10026CE  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp loc_1012060  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
mov esi eax +
xor ebx ebx +
push edi  +
cmp esi ebx +
jz loc_10121FD  +
cmp [ebp+arg_4] ebx +
jbe loc_10121FD  +
xor eax eax +
cmp [ebp+arg_C] ebx +
mov [esi] bl +
setnz al  +
inc eax  +
cmp [ebp+arg_4] eax +
ja loc_1012180  +
call _errno  +
push 22h  +
jmp loc_1012204  +
mov eax [ebp+arg_8] +
add eax 0FFFFFFFEh +
cmp eax 22h +
ja loc_10121FD  +
mov [ebp+var_4] ebx +
mov ecx esi +
cmp [ebp+arg_C] ebx +
jz loc_10121A5  +
neg [ebp+arg_0]  +
mov byte ptr [esi] 2Dh +
lea ecx [esi+1] +
mov [ebp+var_4] 1 +
mov edi ecx +
mov eax [ebp+arg_0] +
xor edx edx +
div  [ebp+arg_8] +
mov [ebp+arg_0] eax +
cmp edx 9 +
jbe loc_10121BC  +
add dl 57h +
jmp loc_10121BF  +
add dl 30h +
mov eax [ebp+var_4] +
mov [ecx] dl +
inc ecx  +
inc eax  +
mov [ebp+var_4] eax +
cmp [ebp+arg_0] ebx +
jbe loc_10121D3  +
cmp eax [ebp+arg_4] +
jb loc_10121A7  +
cmp eax [ebp+arg_4] +
jb loc_10121E8  +
mov [esi] bl +
call _errno  +
push 22h  +
pop ecx  +
mov [eax] ecx +
mov esi ecx +
jmp loc_1012207  +
mov [ecx] bl +
dec ecx  +
mov dl [edi] +
mov al [ecx] +
mov [ecx] dl +
dec ecx  +
mov [edi] al +
inc edi  +
cmp edi ecx +
jb loc_10121EB  +
xor eax eax +
jmp loc_1012216  +
call _errno  +
push 16h  +
pop esi  +
mov [eax] esi +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
call sub_1012136  +
add esp 14h +
mov eax esi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
cmp [ebp+arg_C] 0Ah +
jnz loc_1012235  +
cmp [ebp+arg_0] eax +
jge loc_1012235  +
inc eax  +
push eax  +
push [ebp+arg_C]  +
mov eax [ebp+arg_4] +
push [ebp+arg_8]  +
push [ebp+arg_0]  +
call sub_1012146  +
pop ebp  +
retn   +
***
mov edi edi +
sub esp 8 +
and esp 0FFFFFFF8h +
fstp  [esp+8+var_8] +
cvttsd2si eax [esp+8+var_8] +
leave   +
retn   +
***
mov eax eax +
push ebp  +
mov ebp esp +
sub esp 20h +
and esp 0FFFFFFF0h +
fld  st +
fst  [esp+24h+var_C] +
fistp  [esp+24h+var_14] +
fild  [esp+24h+var_14] +
mov edx [esp+24h+var_C] +
mov eax dword ptr [esp+24h+var_14] +
test eax eax +
jz loc_1012441  +
fsubp st(1) st +
test edx edx +
jns loc_1012429  +
fstp  [esp+24h+var_24] +
mov ecx [esp+24h+var_24] +
xor ecx 80000000h +
add ecx 7FFFFFFFh +
adc eax 0 +
mov edx dword ptr [esp+24h+var_14+4] +
adc edx 0 +
jmp locret_1012455  +
fstp  [esp+24h+var_24] +
mov ecx [esp+24h+var_24] +
add ecx 7FFFFFFFh +
sbb eax 0 +
mov edx dword ptr [esp+24h+var_14+4] +
sbb edx 0 +
jmp locret_1012455  +
mov edx dword ptr [esp+24h+var_14+4] +
test edx 7FFFFFFFh +
jnz loc_1012405  +
fstp  [esp+24h+var_C] +
fstp  [esp+24h+var_C] +
leave   +
retn   +
***
cmp dword_1017024 0 +
jnz sub_10123C8  +
jmp loc_10123E0  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov eax [eax] +
cmp dword ptr [eax] 0E06D7363h +
jnz loc_10124B0  +
cmp dword ptr [eax+10h] 3 +
jnz loc_10124B0  +
mov eax [eax+14h] +
cmp eax 19930520h +
jz loc_10124AA  +
cmp eax 19930521h +
jz loc_10124AA  +
cmp eax 19930522h +
jz loc_10124AA  +
cmp eax 1994000h +
jnz loc_10124B0  +
call ds:?terminate@@YAXXZ  +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
mov eax 5A4Dh +
cmp [ecx] ax +
jz loc_10124DC  +
xor eax eax +
pop ebp  +
retn   +
mov eax [ecx+3Ch] +
add eax ecx +
cmp dword ptr [eax] 4550h +
jnz loc_10124D8  +
xor edx edx +
mov ecx 10Bh +
cmp [eax+18h] cx +
setz dl  +
mov eax edx +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [eax+3Ch] +
add ecx eax +
movzx eax word ptr [ecx+14h] +
push ebx  +
push esi  +
movzx esi word ptr [ecx+6] +
xor edx edx +
push edi  +
lea eax [eax+ecx+18h] +
test esi esi +
jbe loc_101253D  +
mov edi [ebp+arg_4] +
mov ecx [eax+0Ch] +
cmp edi ecx +
jb loc_1012535  +
mov ebx [eax+8] +
add ebx ecx +
cmp edi ebx +
jb loc_101253F  +
inc edx  +
add eax 28h +
cmp edx esi +
jb loc_1012525  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
call sub_10077C4  +
and dword ptr [ebp-4] 0 +
mov esi 1000000h +
push esi  +
call sub_10124C6  +
pop ecx  +
test eax eax +
jz loc_10125A6  +
mov eax [ebp+8] +
sub eax esi +
push eax  +
push esi  +
call sub_1012500  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_10125A6  +
mov eax [eax+24h] +
shr eax 1Fh +
not eax  +
and eax 1 +
mov dword ptr [ebp-4] 0FFFFFFFEh +
jmp loc_10125AF  +
mov eax [ebp-14h] +
mov eax [eax] +
mov eax [eax] +
xor ecx ecx +
cmp eax 0C0000005h +
setz cl  +
mov eax ecx +
retn   +
mov esp [ebp-18h] +
mov dword ptr [ebp-4] 0FFFFFFFEh +
xor eax eax +
call sub_100763C  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push offset sub_10026CE  +
push offset dword_1017000  +
call sub_101224E  +
add esp 18h +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 328h +
mov dword_1017140 eax +
mov dword_101713C ecx +
mov dword_1017138 edx +
mov dword_1017134 ebx +
mov dword_1017130 esi +
mov dword_101712C edi +
mov word_1017158 ss +
mov word_101714C cs +
mov word_1017128 ds +
mov word_1017124 es +
mov word_1017120 fs +
mov word_101711C gs +
pushf   +
pop dword_1017150  +
mov eax [ebp+0] +
mov dword_1017144 eax +
mov eax [ebp+4] +
mov dword_1017148 eax +
lea eax [ebp+8] +
mov dword_1017154 eax +
mov eax [ebp-320h] +
mov dword_1017090 10001h +
mov eax dword_1017148 +
mov dword_101704C eax +
mov dword_1017040 0C0000409h +
mov dword_1017044 1 +
mov eax dword_1017000 +
mov [ebp-328h] eax +
mov eax dword_1017004 +
mov [ebp-324h] eax +
push 0  +
call ds:SetUnhandledExceptionFilter  +
push offset ExceptionInfo  +
call ds:UnhandledExceptionFilter  +
push 0C0000409h  +
call ds:GetCurrentProcess  +
push eax  +
call ds:TerminateProcess  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jnz loc_101272F  +
pop ebp  +
retn   +
push dword ptr [eax+10h]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push 0  +
push dword ptr [eax+4]  +
push dword ptr [eax]  +
call sub_100236A  +
neg eax  +
sbb eax eax +
neg eax  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 118h +
mov eax dword_1017000 +
xor eax ebp +
mov [ebp-4] eax +
mov eax [ebp+0Ch] +
push ebx  +
push esi  +
mov esi [ebp+8] +
push edi  +
mov [ebp-118h] eax +
mov eax [esi+248h] +
lea edi [ebp-10Dh] +
and edi 0FFFFFFFCh +
cmp eax 10Bh +
jnb loc_10127C5  +
push eax  +
push 0  +
push edi  +
call memset  +
push dword ptr [esi+244h]  +
mov ebx [ebp+10h] +
mov ax [ebp+14h] +
push 0  +
push ebx  +
push 0  +
mov [edi+6] ax +
mov [edi+4] bx +
call dword ptr [esi+28h]  +
add esp 1Ch +
cmp eax 0FFFFFFFFh +
jnz loc_10127D7  +
push 0  +
push 7  +
push dword ptr [esi+2Ch]  +
call sub_101288B  +
xor eax eax +
inc eax  +
mov ecx [ebp-4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_10026CE  +
leave   +
retn   +
***
push dword ptr [esi+244h]  +
lea eax [esi+30h] +
push dword ptr [esi+2Ch]  +
mov [ebp-114h] eax +
push dword ptr [esi+18h]  +
push dword ptr [esi+248h]  +
push edi  +
push eax  +
call sub_1002864  +
test eax eax +
jz loc_10127C5  +
push dword ptr [esi+244h]  +
push dword ptr [esi+2Ch]  +
push dword ptr [esi+18h]  +
push ebx  +
push dword ptr [ebp-118h]  +
push dword ptr [ebp-114h]  +
call sub_1002864  +
test eax eax +
jz loc_10127C5  +
xor eax eax +
jmp loc_10127C8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ebp+arg_4] +
and [ebp+var_4] 0 +
lea ecx [eax+1] +
mov dl [eax] +
inc eax  +
test dl dl +
jnz loc_1012838  +
sub eax ecx +
push esi  +
mov esi eax +
mov eax [ebp+arg_4] +
lea ecx [eax+1] +
mov dl [eax] +
inc eax  +
test dl dl +
jnz loc_101284A  +
push [ebp+arg_10]  +
sub eax ecx +
lea ecx [ebp+var_4] +
push ecx  +
inc eax  +
push eax  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call [ebp+arg_8]  +
add esp 14h +
inc esi  +
cmp esi eax +
pop esi  +
jz loc_101287F  +
push [ebp+var_4]  +
push 6  +
push [ebp+arg_C]  +
call sub_101288B  +
xor eax eax +
jmp locret_1012882  +
xor eax eax +
inc eax  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [ebp+arg_4] +
mov [eax] ecx +
mov ecx [ebp+arg_8] +
mov [eax+4] ecx +
mov dword ptr [eax+8] 1 +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_14] +
and dword ptr [eax] 0 +
push esi  +
push edi  +
mov edi [ebp+arg_8] +
push 18h  +
call edi  +
mov esi eax +
pop ecx  +
test esi esi +
jnz loc_10128CC  +
inc eax  +
jmp loc_1012941  +
push ebx  +
push 4354h  +
mov dword ptr [esi+10h] 0B71B00h +
call edi  +
mov ebx [ebp+arg_C] +
pop ecx  +
mov [esi+14h] eax +
test eax eax +
jnz loc_10128F1  +
xor edi edi +
inc edi  +
push esi  +
call ebx  +
pop ecx  +
mov eax edi +
jmp loc_1012940  +
push [ebp+arg_1C]  +
mov ecx [ebp+arg_4] +
push [ebp+arg_18]  +
push ebx  +
push edi  +
push dword ptr [ecx+4]  +
push dword ptr [ecx]  +
push eax  +
call sub_1012BD3  +
mov [ebp+arg_8] eax +
test eax eax +
jz loc_1012919  +
push dword ptr [esi+14h]  +
call ebx  +
mov edi [ebp+arg_8] +
pop ecx  +
jmp loc_10128E9  +
mov eax [ebp+arg_0] +
mov [esi+4] edi +
mov [esi+8] ebx +
mov ecx [eax] +
mov [esi+0Ch] ecx +
mov ecx [ebp+arg_10] +
mov dword ptr [esi] 4349434Ch +
mov eax [eax] +
add eax 1800h +
mov [ecx] eax +
mov eax [ebp+arg_14] +
mov [eax] esi +
xor eax eax +
pop ebx  +
pop edi  +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
cmp dword ptr [eax] 4349434Ch +
jz loc_101295E  +
push 2  +
jmp loc_101299B  +
mov ecx [eax+0Ch] +
cmp [ebp+arg_8] ecx +
ja loc_101295A  +
add ecx 1800h +
cmp [ebp+arg_10] ecx +
jb loc_101295A  +
push dword ptr [eax+10h]  +
lea ecx [ebp+arg_0] +
push ecx  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push dword ptr [eax+14h]  +
call sub_1012B60  +
test eax eax +
mov eax [ebp+arg_14] +
jnz loc_1012996  +
mov ecx [ebp+arg_0] +
mov [eax] ecx +
xor eax eax +
pop ebp  +
retn   +
and dword ptr [eax] 0 +
push 4  +
pop eax  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
cmp dword ptr [eax] 4349434Ch +
jz loc_10129B8  +
push 2  +
pop eax  +
pop ebp  +
retn   +
push dword ptr [eax+14h]  +
call sub_1012BB2  +
xor eax eax +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
cmp dword ptr [eax] 4349434Ch +
jz loc_10129DE  +
push 2  +
pop eax  +
pop ebp  +
retn   +
push dword ptr [eax+14h]  +
call sub_1012B50  +
xor eax eax +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
cmp dword ptr [esi] 4349434Ch +
jz loc_1012A05  +
push 2  +
pop eax  +
jmp loc_1012A1E  +
push dword ptr [esi+14h]  +
call sub_1012B40  +
push dword ptr [esi+14h]  +
call dword ptr [esi+8]  +
and dword ptr [esi] 0 +
push esi  +
call dword ptr [esi+8]  +
pop ecx  +
pop ecx  +
xor eax eax +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov ebx ecx +
call sub_10050B9  +
xor edi edi +
inc edi  +
cmp [ebp+arg_4] 0 +
jz loc_1012B2F  +
mov edx [eax+10h] +
movzx ecx word ptr [eax+0Ch] +
lea esi [edx-2] +
cmp ecx esi +
jnb loc_1012A6E  +
mov edx [eax+4] +
mov [ecx+edx] bl +
inc word ptr [eax+0Ch]  +
movzx esi word ptr [eax+0Ch] +
movzx edx si +
mov esi [eax+4] +
mov ecx ebx +
shr ecx 8 +
mov [edx+esi] cl +
jmp loc_1012A9A  +
cmp ecx edx +
jb loc_1012A77  +
mov [eax+28h] edi +
jmp loc_1012A81  +
mov edx [eax+4] +
mov [ecx+edx] bl +
inc word ptr [eax+0Ch]  +
movzx esi word ptr [eax+0Ch] +
cmp esi [eax+10h] +
jb loc_1012A8F  +
mov [eax+28h] edi +
jmp loc_1012A9E  +
mov edx [eax+4] +
mov ecx ebx +
shr ecx 8 +
mov [edx+esi] cl +
inc word ptr [eax+0Ch]  +
mov edx [eax+10h] +
movzx ecx word ptr [eax+0Ch] +
lea esi [edx-2] +
cmp ecx esi +
jnb loc_1012AD0  +
mov esi [eax+4] +
mov dl bl +
not dl  +
mov [ecx+esi] dl +
inc word ptr [eax+0Ch]  +
movzx esi word ptr [eax+0Ch] +
mov ecx ebx +
movzx edx si +
mov esi [eax+4] +
not ecx  +
shr ecx 8 +
mov [edx+esi] cl +
jmp loc_1012AFD  +
cmp ecx edx +
jb loc_1012AD9  +
mov [eax+28h] edi +
jmp loc_1012AE7  +
mov esi [eax+4] +
mov dl bl +
not dl  +
mov [ecx+esi] dl +
inc word ptr [eax+0Ch]  +
movzx esi word ptr [eax+0Ch] +
cmp esi [eax+10h] +
jnb loc_1012B12  +
mov edx [eax+4] +
mov ecx ebx +
not ecx  +
shr ecx 8 +
mov [edx+esi] cl +
inc word ptr [eax+0Ch]  +
jmp loc_1012B2F  +
movzx ecx word ptr [eax+0Ch] +
add ebx 0FFFFh +
cmp ecx [eax+10h] +
jb loc_1012B17  +
mov [eax+28h] edi +
jmp loc_1012B2F  +
mov esi [ebp+arg_0] +
mov edx [eax+4] +
mov [ebp+arg_4] ebx +
mov bl [esi] +
mov [ecx+edx] bl +
inc word ptr [eax+0Ch]  +
inc [ebp+arg_0]  +
mov ebx [ebp+arg_4] +
test bx bx +
jnz loc_1012B03  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp sub_1012E66  +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp sub_1012CBC  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
push esi  +
mov esi [ebp+arg_0] +
mov [esi+998h] eax +
mov eax [ebp+arg_8] +
mov [esi+99Ch] eax +
mov eax [ebp+arg_10] +
push esi  +
mov [esi+874h] eax +
call sub_1013CA6  +
cmp dword ptr [esi+1Ch] 0 +
jz loc_1012B9B  +
mov eax [ebp+arg_C] +
and dword ptr [eax] 0 +
push 2  +
pop eax  +
jmp loc_1012BA8  +
push esi  +
call sub_10132FA  +
mov ecx [ebp+arg_C] +
mov [ecx] eax +
xor eax eax +
pop esi  +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push esi  +
call sub_1013369  +
xor eax eax +
cmp [esi+1Ch] eax +
pop esi  +
setz al  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_18] +
push esi  +
mov esi [ebp+arg_0] +
mov [esi+4344h] eax +
mov eax [ebp+arg_4] +
lea ecx [eax-1] +
mov [esi+4] eax +
test ecx eax +
jnz loc_1012C4F  +
mov ecx 8000h +
cmp eax ecx +
jb loc_1012C4F  +
cmp eax 200000h +
ja loc_1012C4F  +
mov eax [ebp+arg_8] +
test eax 7FFFh +
jz loc_1012C11  +
and eax 0FFFF8000h +
cmp eax ecx +
jge loc_1012C17  +
mov eax ecx +
mov [esi+98Ch] eax +
mov eax [ebp+arg_14] +
mov [esi+4350h] eax +
mov eax [ebp+arg_C] +
mov [esi+4348h] eax +
mov eax [ebp+arg_10] +
push esi  +
mov [esi+434Ch] eax +
call sub_1012F2D  +
test eax eax +
jnz loc_1012C45  +
inc eax  +
jmp loc_1012C52  +
push esi  +
call sub_1012CBC  +
xor eax eax +
jmp loc_1012C52  +
push 5  +
pop eax  +
pop esi  +
pop ebp  +
retn 1Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_4] 0 +
ja loc_1012C7A  +
mov eax [ebp+arg_0] +
jb loc_1012C71  +
cmp eax 0FFFFFFFFh +
ja loc_1012C7A  +
mov ecx [ebp+arg_8] +
mov [ecx] eax +
xor eax eax +
jmp loc_1012C85  +
mov eax [ebp+arg_8] +
or dword ptr [eax] 0FFFFFFFFh +
mov eax 80070216h +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
mov eax [ebp+arg_4] +
add eax ecx +
cmp eax ecx +
jb loc_1012CA8  +
mov ecx [ebp+arg_8] +
mov [ecx] eax +
xor eax eax +
jmp loc_1012CB3  +
mov eax [ebp+arg_8] +
or dword ptr [eax] 0FFFFFFFFh +
mov eax 80070216h +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
push 40000h  +
xor edi edi +
push edi  +
push dword ptr [esi+8]  +
call memset  +
mov eax [esi+4] +
mov ecx [esi+4334h] +
mov edx [esi+4338h] +
sub ecx eax +
mov [esi] ecx +
mov ecx eax +
mov [esi+458h] eax +
mov [esi+86Ch] eax +
mov eax [esi+870h] +
shl ecx 2 +
sub edx ecx +
lea eax ds:100h[eax*8] +
push eax  +
mov [esi+0Ch] edx +
mov edx [esi+433Ch] +
xor ebx ebx +
inc ebx  +
lea eax [esi+3964h] +
sub edx ecx +
push edi  +
push eax  +
mov [esi+10h] edx +
mov [esi+44h] ebx +
mov [esi+48h] ebx +
mov [esi+4Ch] ebx +
mov [esi+38h] ebx +
mov [esi+3Ch] ebx +
mov [esi+40h] ebx +
mov [esi+981h] bl +
mov [esi+984h] ebx +
mov byte ptr [esi+18h] 20h +
mov [esi+14h] edi +
mov [esi+1Ch] edi +
call memset  +
mov edi 0F9h +
push edi  +
lea eax [esi+41F8h] +
push 0  +
push eax  +
call memset  +
push 100h  +
lea eax [esi+2544h] +
push 8  +
push eax  +
call memset  +
mov eax [esi+870h] +
shl eax 3 +
push eax  +
lea eax [esi+2644h] +
push 9  +
push eax  +
call memset  +
push edi  +
lea eax [esi+2801h] +
push 6  +
push eax  +
call memset  +
mov eax 3030303h +
lea edi [esi+4322h] +
stos   +
add esp 48h +
push esi  +
stos   +
call sub_1014320  +
mov eax [esi+458h] +
xor edi edi +
push 2000h  +
mov [esi+994h] eax +
mov [esi+990h] eax +
mov [esi+868h] edi +
mov [esi+988h] ebx +
push edi  +
push dword ptr [esi+34h]  +
call memset  +
add esp 0Ch +
push esi  +
mov [esi+24h] edi +
mov [esi+28h] edi +
mov byte ptr [esi+880h] 0 +
mov [esi+38h] ebx +
mov [esi+3Ch] ebx +
mov [esi+40h] ebx +
call sub_1013E81  +
push 0AF0h  +
lea eax [esi+28FCh] +
push edi  +
push eax  +
mov [esi+4340h] edi +
call memset  +
push 3E4h  +
lea eax [esi+3C22h] +
push edi  +
push eax  +
call memset  +
push 8  +
pop ecx  +
xor eax eax +
lea edi [esi+42F2h] +
stos   +
mov eax [esi+98Ch] +
mov ecx [esi+4] +
lea eax [eax+ecx+1101h] +
push eax  +
push 0  +
push dword ptr [esi+4334h]  +
call memset  +
add esp 24h +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
mov eax [esi+8] +
xor ebx ebx +
push edi  +
cmp eax ebx +
jz loc_1012E85  +
push eax  +
call dword ptr [esi+434Ch]  +
pop ecx  +
mov [esi+8] ebx +
lea edi [esi+4338h] +
mov eax [edi] +
cmp eax ebx +
jz loc_1012E9B  +
push eax  +
call dword ptr [esi+434Ch]  +
pop ecx  +
mov [edi] ebx +
lea edi [esi+433Ch] +
mov eax [edi] +
cmp eax ebx +
jz loc_1012EB1  +
push eax  +
call dword ptr [esi+434Ch]  +
pop ecx  +
mov [edi] ebx +
lea edi [esi+4334h] +
mov eax [edi] +
cmp eax ebx +
jz loc_1012EC9  +
push eax  +
call dword ptr [esi+434Ch]  +
pop ecx  +
mov [edi] ebx +
mov [esi] ebx +
mov eax [esi+30h] +
cmp eax ebx +
jz loc_1012EDB  +
push eax  +
call dword ptr [esi+434Ch]  +
pop ecx  +
mov [esi+30h] ebx +
mov eax [esi+2Ch] +
cmp eax ebx +
jz loc_1012EED  +
push eax  +
call dword ptr [esi+434Ch]  +
pop ecx  +
mov [esi+2Ch] ebx +
mov eax [esi+34h] +
cmp eax ebx +
jz loc_1012EFF  +
push eax  +
call dword ptr [esi+434Ch]  +
pop ecx  +
mov [esi+34h] ebx +
lea edi [esi+2540h] +
mov eax [edi] +
cmp eax ebx +
jz loc_1012F15  +
push eax  +
call dword ptr [esi+434Ch]  +
pop ecx  +
mov [edi] ebx +
push esi  +
call sub_1013E57  +
pop edi  +
mov [esi+87Ch] ebx +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi [ebp+arg_0] +
mov edx [esi+4] +
push edi  +
xor edi edi +
push 4  +
pop eax  +
mov [esi+8] edi +
mov [esi+4338h] edi +
mov [esi+433Ch] edi +
mov [esi] edi +
mov [esi+4334h] edi +
mov [esi+2540h] edi +
mov [esi+30h] edi +
mov [esi+2Ch] edi +
mov [esi+34h] edi +
mov [esi+85Ch] edi +
mov [esi+870h] eax +
mov [ebp+arg_0] eax +
push ebx  +
mov eax [esi+870h] +
mov cl ds:byte_100A98C[eax] +
xor ebx ebx +
inc ebx  +
shl ebx cl +
add [ebp+arg_0] ebx +
inc eax  +
mov [esi+870h] eax +
cmp [ebp+arg_0] edx +
jb loc_1012F76  +
push 40000h  +
call dword ptr [esi+4348h]  +
pop ecx  +
mov [esi+8] eax +
pop ebx  +
cmp eax edi +
jnz loc_1012FB8  +
push esi  +
call sub_1012E66  +
xor eax eax +
pop edi  +
pop esi  +
leave   +
retn 4  +
lea eax [ebp+arg_0] +
push eax  +
push 1101h  +
push dword ptr [esi+4]  +
call sub_1012C8E  +
test eax eax +
jnz loc_1012FB0  +
lea eax [ebp+arg_0] +
push eax  +
push dword ptr [esi+98Ch]  +
push [ebp+arg_0]  +
call sub_1012C8E  +
test eax eax +
jnz loc_1012FB0  +
lea eax [ebp+var_4] +
push eax  +
mov eax [ebp+arg_0] +
push 4  +
pop ecx  +
mul  ecx +
push edx  +
push eax  +
call sub_1012C5C  +
test eax eax +
jnz loc_1012FB0  +
push [ebp+var_4]  +
call dword ptr [esi+4348h]  +
pop ecx  +
mov [esi+4338h] eax +
cmp eax edi +
jz loc_1012FAA  +
push [ebp+var_4]  +
call dword ptr [esi+4348h]  +
pop ecx  +
mov [esi+433Ch] eax +
cmp eax edi +
jz loc_1012FAA  +
push [ebp+arg_0]  +
call dword ptr [esi+4348h]  +
pop ecx  +
mov [esi+4334h] eax +
cmp eax edi +
jz loc_1012FAA  +
push 10000h  +
mov [esi] eax +
call dword ptr [esi+4348h]  +
pop ecx  +
mov [esi+30h] eax +
cmp eax edi +
jz loc_1012FAA  +
push 20000h  +
call dword ptr [esi+4348h]  +
pop ecx  +
mov [esi+2Ch] eax +
cmp eax edi +
jz loc_1012FAA  +
push 2000h  +
call dword ptr [esi+4348h]  +
pop ecx  +
mov [esi+34h] eax +
push esi  +
cmp eax edi +
jz loc_1012FAB  +
call sub_101448C  +
push esi  +
call sub_101450C  +
push esi  +
call sub_1013E1A  +
test eax eax +
jz loc_1012FAA  +
push 18150h  +
call dword ptr [esi+4348h]  +
pop ecx  +
mov [esi+2540h] eax +
cmp eax edi +
jz loc_1012FAA  +
xor eax eax +
inc eax  +
mov [esi+87Ch] eax +
jmp loc_1012FB2  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push [ebp+arg_0]  +
push 0  +
push 0  +
push esi  +
call sub_1015052  +
push [ebp+arg_4]  +
mov ebx eax +
push esi  +
call sub_1014F0B  +
push 1  +
push esi  +
mov [ebp+var_4] eax +
call sub_101429F  +
push esi  +
call sub_10145C3  +
cmp eax ebx +
jb loc_1013111  +
mov eax [esi+994h] +
cmp eax [esi+990h] +
jb loc_1013111  +
mov [ebp+var_4] 3 +
movzx eax byte ptr [ebp+var_4] +
push edi  +
push eax  +
push 3  +
push esi  +
call sub_1013D98  +
mov eax ebx +
shr eax 10h +
mov edi 0FFh +
and eax edi +
push eax  +
push 8  +
push esi  +
call sub_1013D98  +
mov eax ebx +
shr eax 8 +
and eax edi +
push eax  +
push 8  +
push esi  +
call sub_1013D98  +
movzx eax bl +
push eax  +
push 8  +
push esi  +
call sub_1013D98  +
cmp [ebp+var_4] 1 +
pop edi  +
jnz loc_1013168  +
push esi  +
call sub_101436E  +
push [ebp+arg_0]  +
push esi  +
call sub_10147A2  +
jmp loc_1013183  +
cmp [ebp+var_4] 2 +
jnz loc_101318E  +
push esi  +
call sub_10143D6  +
push esi  +
call sub_101436E  +
push [ebp+arg_0]  +
push esi  +
call sub_1014AC5  +
push [ebp+arg_4]  +
push esi  +
call sub_1014541  +
jmp loc_10131AA  +
cmp [ebp+var_4] 3 +
jnz loc_10131AA  +
push [ebp+arg_4]  +
push esi  +
call sub_1014541  +
push ebx  +
push dword ptr [esi+994h]  +
push esi  +
call sub_10146F1  +
add [esi+994h] ebx +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+arg_0] +
push eax  +
push dword ptr [esi+28h]  +
xor ebx ebx +
push dword ptr [esi+24h]  +
mov [esi+981h] bl +
push ebx  +
push esi  +
call sub_1015455  +
push [ebp+var_4]  +
push [ebp+arg_0]  +
call sub_10130C8  +
mov eax [esi+24h] +
cmp [ebp+arg_0] eax +
jnz loc_1013211  +
push 2000h  +
push ebx  +
push dword ptr [esi+34h]  +
call memset  +
add esp 0Ch +
mov [esi+24h] ebx +
mov [esi+28h] ebx +
jmp loc_10132C3  +
mov ecx [ebp+arg_0] +
shr eax 3 +
shr ecx 3 +
sub eax ecx +
push edi  +
lea edi [eax+1] +
mov eax [ebp+arg_0] +
cdq   +
and edx 7 +
add edx eax +
sar edx 3 +
mov eax 2000h +
sub eax edx +
cmp edi eax +
jl loc_1013239  +
mov edi eax +
mov eax [esi+34h] +
push edi  +
add ecx eax +
push ecx  +
push eax  +
call memmove  +
mov eax [esi+24h] +
sub eax [ebp+arg_0] +
mov ecx 1FFFh +
shr eax 3 +
sub ecx eax +
push ecx  +
mov ecx [esi+34h] +
lea eax [eax+ecx+1] +
push ebx  +
push eax  +
call memset  +
mov ecx [ebp+arg_0] +
mov eax [esi+24h] +
mov edx 10000h +
add esp 18h +
sub eax ecx +
sub edx ecx +
pop edi  +
cmp eax edx +
jnb loc_101327E  +
mov edx eax +
mov eax [esi+30h] +
push edx  +
add ecx eax +
push ecx  +
push eax  +
call memmove  +
mov edx [ebp+var_4] +
mov eax [esi+28h] +
mov ecx 8000h +
sub eax edx +
sub ecx edx +
add esp 0Ch +
cmp eax ecx +
jb loc_10132A3  +
mov eax ecx +
mov ecx [esi+2Ch] +
shl eax 2 +
push eax  +
lea eax [ecx+edx*4] +
push eax  +
push ecx  +
call memmove  +
mov eax [ebp+arg_0] +
sub [esi+24h] eax +
mov eax [ebp+var_4] +
add esp 0Ch +
sub [esi+28h] eax +
push esi  +
call sub_1014421  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
mov al [ecx+18h] +
cmp al 20h +
jge loc_10132F1  +
sub al 10h +
movzx eax al +
push 0  +
push eax  +
push ecx  +
call sub_1013D98  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push 0  +
push [ebp+arg_0]  +
call sub_101429F  +
push [ebp+arg_0]  +
call sub_10145C3  +
push [ebp+arg_0]  +
mov esi eax +
call sub_1014421  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
cmp eax 400h +
jge loc_1013343  +
mov ecx [ebp+arg_0] +
mov al [ecx+eax+45Ch] +
jmp loc_1013360  +
cmp eax 80000h +
jge loc_101335B  +
mov ecx [ebp+arg_0] +
sar eax 9 +
mov al [ecx+eax+45Ch] +
add al 12h +
jmp loc_1013360  +
sar eax 11h +
add al 22h +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
jmp loc_1013379  +
call sub_10131BA  +
cmp dword ptr [esi+24h] 0 +
push esi  +
ja loc_1013374  +
call sub_101468B  +
pop esi  +
pop ebp  +
retn 4  +
***
mov eax [esi+24h] +
push ebx  +
xor ebx ebx +
cmp eax ebx +
jz loc_10133E3  +
push edi  +
lea edi [esi+984h] +
push eax  +
cmp [edi] ebx +
jz loc_10133B1  +
push ebx  +
push ebx  +
push esi  +
call sub_1015052  +
mov [edi] ebx +
jmp loc_10133C3  +
push dword ptr [esi+253Ch]  +
push dword ptr [esi+2538h]  +
push esi  +
call sub_10150A4  +
push ebx  +
push esi  +
call sub_101429F  +
push esi  +
call sub_1014421  +
mov eax [esi+24h] +
mov [esi+2538h] eax +
mov eax [esi+28h] +
mov [esi+253Ch] eax +
pop edi  +
pop ebx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov byte ptr [esi+981h] 0 +
mov dword ptr [esi+984h] 1 +
call sub_10131BA  +
mov eax [esi+24h] +
mov ecx 1000h +
cmp eax ecx +
jnb loc_101341A  +
mov [esi+2534h] ecx +
jmp loc_1013425  +
add eax 1000h +
mov [esi+2534h] eax +
mov eax [ebp+arg_0] +
mov [esi+86Ch] eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ebp+arg_0] +
mov ecx [esi+4] +
push ebx  +
push edi  +
mov edi [esi+86Ch] +
xor ebx ebx +
mov [esi+981h] bl +
mov eax [eax] +
mov edx edi +
sub edx ecx +
sub eax edi +
cmp edx ecx +
jnb loc_1013463  +
add eax edx +
jmp loc_1013465  +
add eax ecx +
mov ecx [esi] +
sub ecx [esi+4334h] +
mov edx [ebp+arg_0] +
add ecx [edx] +
cmp eax ecx +
ja loc_10134FA  +
push ebx  +
lea eax [ebp+var_4] +
push eax  +
push dword ptr [esi+28h]  +
push dword ptr [esi+24h]  +
push ebx  +
push esi  +
call sub_1015455  +
push [ebp+var_4]  +
push ebx  +
push ebx  +
push esi  +
call sub_1015052  +
push ebx  +
push esi  +
call sub_101429F  +
push esi  +
call sub_1014421  +
push 40000h  +
push ebx  +
push dword ptr [esi+8]  +
call memset  +
push 2000h  +
push ebx  +
push dword ptr [esi+34h]  +
call memset  +
mov ecx [ebp+var_4] +
xor eax eax +
add esp 18h +
inc eax  +
mov [esi+2534h] ecx +
mov ecx [ebp+arg_0] +
mov [esi+44h] eax +
mov [esi+48h] eax +
mov [esi+4Ch] eax +
mov [esi+38h] eax +
mov [esi+3Ch] eax +
mov [esi+40h] eax +
mov [esi+868h] ebx +
mov [esi+24h] ebx +
mov [esi+28h] ebx +
mov [esi+984h] eax +
mov [ecx] edi +
jmp loc_10134FC  +
xor eax eax +
pop edi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 30h +
mov eax [ebp+arg_4] +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
mov ebx [esi+458h] +
add eax ebx +
mov [ebp+var_14] eax +
lea eax [esi+988h] +
xor ecx ecx +
push edi  +
mov [ebp+arg_0] ebx +
cmp [eax] ecx +
jz loc_1013577  +
mov [eax] ecx +
mov dword ptr [esi+2534h] 2710h +
cmp [esi+874h] ecx +
jz loc_101356C  +
push 1  +
push 1  +
push esi  +
call sub_1013D98  +
movzx eax word ptr [esi+876h] +
push eax  +
push 10h  +
push esi  +
call sub_1013D98  +
movzx eax word ptr [esi+874h] +
push eax  +
push 10h  +
jmp loc_101356F  +
push ecx  +
push 1  +
push esi  +
call sub_1013D98  +
jmp loc_1013596  +
push 32h  +
pop edi  +
mov eax ebx +
sub eax [esi+4] +
add eax 4 +
push eax  +
mov eax ebx +
sub eax edi +
push eax  +
push esi  +
call sub_10159A0  +
dec edi  +
jz loc_1013596  +
jmp loc_101357A  +
mov ebx [ebp+arg_0] +
lea eax [ebx+8000h] +
mov [ebp+var_10] eax +
cmp ebx [ebp+var_14] +
jnb loc_1013B8C  +
mov edi [ebp+var_10] +
and edi 0FFFF8000h +
mov [ebp+var_1C] edi +
cmp edi [ebp+var_14] +
ja loc_10135BD  +
cmp edi ebx +
jnb loc_10135C3  +
mov edi [ebp+var_14] +
mov [ebp+var_1C] edi +
push ebx  +
push esi  +
call sub_1015706  +
cmp eax 2 +
mov [ebp+var_4] eax +
jl loc_10135E5  +
lea ecx [eax+ebx] +
cmp ecx edi +
jbe loc_1013612  +
mov eax edi +
sub eax ebx +
cmp eax 2 +
mov [ebp+var_4] eax +
jge loc_101360F  +
mov eax [esi] +
mov al [ebx+eax] +
mov edx [esi+24h] +
mov ecx [esi+30h] +
mov [ecx+edx] al +
inc dword ptr [esi+24h]  +
mov eax [esi+24h] +
inc ebx  +
inc [ebp+var_10]  +
mov [ebp+arg_0] ebx +
cmp eax 0FFF8h +
jb loc_101359F  +
push ebx  +
call sub_10133EA  +
jmp loc_101359F  +
mov eax [ebp+var_4] +
cmp eax 32h +
jge loc_1013AB8  +
mov edx [esi+2540h] +
lea ecx [eax+ebx] +
mov [ebp+var_C] ecx +
lea ecx [ebx+0EFDh] +
mov [ebp+var_30] ecx +
mov ecx [esi] +
movzx ecx byte ptr [ecx+ebx] +
movzx ecx byte ptr [ecx+esi+2544h] +
mov [edx+2Ch] ecx +
mov ecx [esi+2540h] +
push 2  +
mov [ecx+1Ch] ebx +
pop ecx  +
mov [ebp+var_24] ebx +
mov [ebp+arg_0] ecx +
cmp eax ecx +
jb loc_10136F1  +
push 30h  +
lea eax [esi+58h] +
pop edi  +
mov [ebp+var_8] eax +
mov eax [ebp+var_8] +
push dword ptr [eax]  +
push esi  +
call sub_1013328  +
mov ecx [ebp+arg_0] +
movzx eax al +
cmp ecx 9 +
jnb loc_101369A  +
lea edx [ecx+eax*8] +
movzx eax ds:byte_100A98C[eax] +
movzx edx byte ptr [edx+esi+2642h] +
add edx eax +
mov eax [esi+2540h] +
mov [eax+edi+14h] edx +
jmp loc_10136C5  +
movzx edx byte ptr [ecx+esi+27F8h] +
mov [ebp+arg_0] eax +
movzx eax byte ptr [esi+eax*8+264Bh] +
add eax edx +
mov edx [ebp+arg_0] +
movzx edx ds:byte_100A98C[edx] +
add eax edx +
mov edx [esi+2540h] +
mov [edx+edi+14h] eax +
mov eax [esi+2540h] +
mov edx [ebp+var_8] +
add [ebp+var_8] 4 +
mov [eax+edi+4] ebx +
mov eax [esi+2540h] +
mov edx [edx] +
inc ecx  +
mov [edi+eax] edx +
add edi 18h +
mov [ebp+arg_0] ecx +
cmp ecx [ebp+var_4] +
jbe loc_1013664  +
mov eax [esi+2540h] +
and dword ptr [eax+14h] 0 +
mov eax [esi+2540h] +
mov ecx [esi+44h] +
mov [eax+8] ecx +
mov eax [esi+2540h] +
mov ecx [esi+48h] +
mov [eax+0Ch] ecx +
mov eax [esi+2540h] +
mov ecx [esi+4Ch] +
mov [eax+10h] ecx +
mov edi [esi+2540h] +
mov eax ebx +
imul eax eax +
lea ecx [ebx-1] +
mov [ebp+var_18] ecx +
mov ecx [ebp+var_1C] +
sub edi eax +
sub ecx ebx +
lea eax [eax+edi+4] +
mov [ebp+var_20] ecx +
mov [ebp+var_8] eax +
mov ecx [ebp+var_8] +
add ecx 18h +
mov eax [ecx] +
inc ebx  +
inc [ebp+var_18]  +
dec [ebp+var_20]  +
mov [ebp+var_8] ecx +
cmp eax [ebp+var_18] +
jz loc_10137AF  +
mov edx [ecx-4] +
imul eax eax +
cmp edx 3 +
jb loc_1013776  +
add edx 0FFFFFFFEh +
add eax edi +
mov [esi+44h] edx +
mov edx [eax+8] +
mov [esi+48h] edx +
mov eax [eax+0Ch] +
jmp loc_10137AC  +
add eax edi +
test edx edx +
jnz loc_101378D  +
mov edx [eax+8] +
mov [esi+44h] edx +
mov edx [eax+0Ch] +
mov [esi+48h] edx +
mov eax [eax+10h] +
jmp loc_10137AC  +
cmp edx 1 +
jnz loc_101379D  +
mov edx [eax+0Ch] +
mov [esi+44h] edx +
mov edx [eax+8] +
jmp loc_1013785  +
mov edx [eax+10h] +
mov [esi+44h] edx +
mov edx [eax+0Ch] +
mov [esi+48h] edx +
mov eax [eax+8] +
mov [esi+4Ch] eax +
mov eax [esi+44h] +
mov [ecx+4] eax +
mov eax [esi+48h] +
mov [ecx+8] eax +
mov eax [esi+4Ch] +
mov [ecx+0Ch] eax +
cmp [ebp+var_C] ebx +
jz loc_10139A3  +
push ebx  +
push esi  +
call sub_1015706  +
mov [ebp+var_4] eax +
add eax ebx +
cmp eax [ebp+var_1C] +
jbe loc_10137ED  +
mov edx [ebp+var_20] +
cmp edx 2 +
mov [ebp+var_4] edx +
jge loc_10137F0  +
xor edx edx +
mov [ebp+var_4] edx +
jmp loc_10137F0  +
mov edx [ebp+var_4] +
cmp edx 32h +
jg loc_1013913  +
lea eax [edx+ebx] +
cmp eax [ebp+var_30] +
jnb loc_1013913  +
cmp edx 2 +
jg loc_1013815  +
jnz loc_101385D  +
cmp dword ptr [esi+58h] 800h +
jnb loc_101385D  +
cmp [ebp+var_C] eax +
jnb loc_101385D  +
mov eax edx +
sub eax [ebp+var_24] +
mov ecx 0EFCh +
add eax ebx +
cmp eax ecx +
jnb loc_101382C  +
mov ecx eax +
mov eax [ebp+var_C] +
sub eax [ebp+var_24] +
inc eax  +
cmp eax ecx +
mov [ebp+arg_0] eax +
jg loc_1013857  +
sub ecx [ebp+arg_0] +
imul eax eax +
inc ecx  +
mov [ebp+arg_0] ecx +
mov ecx [esi+2540h] +
or dword ptr [ecx+eax+14h] 0FFFFFFFFh +
add eax 18h +
dec [ebp+arg_0]  +
jnz loc_1013844  +
lea eax [edx+ebx] +
mov [ebp+var_C] eax +
mov ecx [ebp+var_8] +
mov eax [ecx+10h] +
mov [ebp+var_28] eax +
mov eax [esi] +
movzx eax byte ptr [eax+ebx] +
movzx eax byte ptr [eax+esi+2544h] +
add eax [ebp+var_28] +
cmp eax [ecx+28h] +
jnb loc_1013882  +
mov [ecx+28h] eax +
mov [ecx+18h] ebx +
push 2  +
pop eax  +
mov [ebp+arg_0] eax +
cmp edx eax +
jb loc_1013741  +
lea eax [esi+58h] +
mov [ebp+var_10] eax +
mov eax [ebp+var_8] +
add eax 40h +
mov [ebp+var_2C] eax +
mov eax [ebp+var_10] +
push dword ptr [eax]  +
push esi  +
call sub_1013328  +
cmp [ebp+arg_0] 9 +
movzx ecx al +
jnb loc_10138C3  +
mov eax [ebp+arg_0] +
lea eax [eax+ecx*8] +
movzx eax byte ptr [eax+esi+2642h] +
jmp loc_10138D8  +
mov edx [ebp+arg_0] +
movzx eax byte ptr [esi+ecx*8+264Bh] +
movzx edx byte ptr [edx+esi+27F8h] +
add eax edx +
movzx ecx ds:byte_100A98C[ecx] +
add eax ecx +
add eax [ebp+var_28] +
mov ecx [ebp+var_2C] +
cmp eax [ecx] +
jnb loc_10138F8  +
mov [ecx] eax +
mov eax [ebp+var_10] +
mov [ecx-10h] ebx +
mov eax [eax] +
mov [ecx-14h] eax +
inc [ebp+arg_0]  +
mov eax [ebp+arg_0] +
add [ebp+var_10] 4 +
add ecx 18h +
mov [ebp+var_2C] ecx +
cmp eax [ebp+var_4] +
ja loc_1013741  +
jmp loc_101389F  +
mov ecx [esi+edx*4+50h] +
lea eax [edx+ebx] +
mov [ebp+var_30] eax +
imul eax eax +
add eax edi +
mov [ebp+var_8] ecx +
mov [eax] ecx +
mov [eax+4] ebx +
cmp ecx 3 +
jnz loc_1013947  +
cmp edx 10h +
jle loc_1013947  +
mov eax ebx +
sub eax [esi+4] +
add eax 5 +
push eax  +
inc ebx  +
push ebx  +
push esi  +
call sub_10159A0  +
jmp loc_1013972  +
xor eax eax +
inc eax  +
mov [ebp+arg_0] eax +
cmp edx eax +
jbe loc_1013972  +
mov eax [ebp+arg_0] +
mov ecx eax +
sub ecx [esi+4] +
add eax ebx +
lea ecx [ecx+ebx+4] +
push ecx  +
push eax  +
push esi  +
call sub_10159A0  +
inc [ebp+arg_0]  +
mov eax [ebp+arg_0] +
cmp eax [ebp+var_4] +
jb loc_1013951  +
mov eax [ebp+var_8] +
mov ebx [ebp+var_30] +
cmp eax 3 +
jb loc_1013991  +
mov ecx [esi+48h] +
mov [esi+4Ch] ecx +
mov ecx [esi+44h] +
add eax 0FFFFFFFEh +
mov [esi+48h] ecx +
mov [esi+44h] eax +
jmp loc_10139A3  +
test eax eax +
jz loc_10139A3  +
mov ecx [esi+44h] +
lea eax [esi+eax*4+44h] +
mov edx [eax] +
mov [esi+44h] edx +
mov [eax] ecx +
and [ebp+arg_0] 0 +
mov eax ebx +
imul eax eax +
mov ecx [eax+edi+4] +
mov eax ecx +
imul eax eax +
inc [ebp+arg_0]  +
mov edx ecx +
mov ecx [eax+edi+4] +
mov [eax+edi+4] ebx +
mov [ebp+var_30] edx +
mov ebx edx +
cmp edx [ebp+var_24] +
jnz loc_10139B0  +
mov eax [esi+24h] +
add eax [ebp+arg_0] +
cmp eax 0FFF8h +
jnb loc_10139E6  +
mov eax [esi+28h] +
add eax [ebp+arg_0] +
cmp eax 7FF8h +
jb loc_10139F0  +
push [ebp+var_30]  +
call sub_10133EA  +
jmp loc_10139CC  +
mov eax ebx +
imul eax eax +
lea ecx [ebx+1] +
lea eax [eax+edi+4] +
cmp [eax] ecx +
mov [ebp+var_30] ecx +
mov ecx [esi+24h] +
jbe loc_1013A4B  +
mov edx [esi+34h] +
shr ecx 3 +
add ecx edx +
mov [ebp+var_30] ecx +
mov ecx [esi+24h] +
and ecx 7 +
mov dl 1 +
shl dl cl +
mov ecx [ebp+var_30] +
or [ecx] dl +
mov cl [eax] +
mov edx [esi+24h] +
sub cl bl +
mov ebx [esi+30h] +
sub cl 2 +
mov [edx+ebx] cl +
inc dword ptr [esi+24h]  +
mov ecx [eax] +
mov edx [esi+28h] +
imul ecx ecx +
mov ebx [esi+2Ch] +
mov ecx [ecx+edi] +
mov [ebx+edx*4] ecx +
inc dword ptr [esi+28h]  +
mov ebx [eax] +
jmp loc_1013A5C  +
mov eax [esi] +
mov al [ebx+eax] +
mov edx [esi+30h] +
mov ebx [ebp+var_30] +
mov [ecx+edx] al +
inc dword ptr [esi+24h]  +
dec [ebp+arg_0]  +
jnz loc_10139F0  +
mov eax [esi+24h] +
lea edi [esi+2534h] +
mov [ebp+arg_0] ebx +
cmp eax [edi] +
jb loc_1013A7C  +
call sub_101338F  +
add dword ptr [edi] 1000h +
cmp byte ptr [esi+981h] 0 +
jz loc_1013596  +
cmp dword ptr [esi+24h] 0FE00h +
jnb loc_1013A9F  +
cmp dword ptr [esi+28h] 7E00h +
jb loc_1013596  +
lea eax [ebp+arg_0] +
push eax  +
call sub_1013437  +
test eax eax +
jnz loc_1013593  +
mov ebx [ebp+arg_0] +
jmp loc_1013B81  +
mov ecx [esi+eax*4+50h] +
mov [ebp+var_8] ecx +
cmp ecx 3 +
jnz loc_1013ADE  +
cmp eax 10h +
jle loc_1013ADE  +
mov eax ebx +
sub eax [esi+4] +
add eax 5 +
push eax  +
lea eax [ebx+1] +
push eax  +
push esi  +
call sub_10159A0  +
jmp loc_1013AFF  +
xor edi edi +
inc edi  +
cmp eax edi +
jbe loc_1013B02  +
mov eax edi +
sub eax [esi+4] +
lea eax [eax+ebx+4] +
push eax  +
lea eax [edi+ebx] +
push eax  +
push esi  +
call sub_10159A0  +
inc edi  +
cmp edi [ebp+var_4] +
jb loc_1013AE5  +
mov eax [ebp+var_4] +
mov ecx [esi+24h] +
mov edi [esi+34h] +
mov edx ecx +
shr edx 3 +
add edi edx +
and ecx 7 +
mov dl 1 +
shl dl cl +
add ebx eax +
sub al 2 +
mov [ebp+arg_0] ebx +
or [edi] dl +
mov edx [esi+24h] +
mov ecx [esi+30h] +
mov [ecx+edx] al +
inc dword ptr [esi+24h]  +
mov ecx [esi+28h] +
mov eax [ebp+var_8] +
mov edx [esi+2Ch] +
mov [edx+ecx*4] eax +
inc dword ptr [esi+28h]  +
cmp eax 3 +
jb loc_1013B56  +
mov eax [esi+48h] +
mov [esi+4Ch] eax +
mov eax [esi+44h] +
mov [esi+48h] eax +
mov eax [ebp+var_8] +
add eax 0FFFFFFFEh +
mov [esi+44h] eax +
jmp loc_1013B6B  +
mov eax [ebp+var_8] +
test eax eax +
jz loc_1013B6B  +
mov ecx [esi+44h] +
lea eax [esi+eax*4+44h] +
mov edx [eax] +
mov [esi+44h] edx +
mov [eax] ecx +
cmp dword ptr [esi+24h] 0FFF8h +
jnb loc_1013B81  +
cmp dword ptr [esi+28h] 7FF8h +
jb loc_1013596  +
push ebx  +
call sub_10133EA  +
jmp loc_1013596  +
mov eax ebx +
sub eax [esi+4] +
cmp [ebp+arg_4] 8000h +
mov [esi+990h] eax +
jge loc_1013BC6  +
cmp byte ptr [esi+981h] 0 +
jz loc_1013C94  +
lea eax [ebp+arg_0] +
push eax  +
call sub_1013437  +
mov ebx [ebp+arg_0] +
test eax eax +
jnz loc_1013596  +
jmp loc_1013C94  +
add eax 36h +
xor edi edi +
mov [ebp+var_30] eax +
inc edi  +
push [ebp+var_30]  +
mov eax ebx +
sub eax edi +
push eax  +
push esi  +
call sub_1015ACE  +
inc edi  +
cmp edi 32h +
jbe loc_1013BCF  +
mov eax [esi] +
sub eax [esi+4334h] +
mov ecx [esi+4] +
add eax ebx +
cmp eax ecx +
jb loc_1013C94  +
sub eax ecx +
cmp eax [esi+98Ch] +
jb loc_1013C94  +
cmp byte ptr [esi+981h] 0 +
jz loc_1013C23  +
lea eax [ebp+arg_0] +
push eax  +
call sub_1013437  +
test eax eax +
jnz loc_1013593  +
mov ebx [ebp+arg_0] +
mov eax [esi+4334h] +
push dword ptr [esi+4]  +
mov ecx [esi+98Ch] +
add ecx eax +
push ecx  +
push eax  +
call memmove  +
mov ecx [esi+4] +
mov eax [esi+4338h] +
shl ecx 2 +
push ecx  +
mov ecx [esi+98Ch] +
lea ecx [eax+ecx*4] +
push ecx  +
push eax  +
call memmove  +
mov ecx [esi+4] +
mov eax [esi+433Ch] +
shl ecx 2 +
push ecx  +
mov ecx [esi+98Ch] +
lea ecx [eax+ecx*4] +
push ecx  +
push eax  +
call memmove  +
mov eax ebx +
sub eax [esi+4] +
add esp 24h +
mov [esi+990h] eax +
mov eax [esi+98Ch] +
sub [esi] eax +
shl eax 2 +
sub [esi+0Ch] eax +
sub [esi+10h] eax +
pop edi  +
mov [esi+458h] ebx +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
mov eax [esi+458h] +
sub eax [esi+4334h] +
push 8000h  +
add eax [esi] +
push eax  +
push esi  +
call sub_1013FE3  +
xor ebx ebx +
cmp eax ebx +
mov [ebp+arg_0] eax +
jle loc_1013D8D  +
mov edx [esi+458h] +
add eax edx +
cmp eax edx +
jnb loc_1013D84  +
mov ecx [esi+4] +
add ecx ecx +
sub edx ecx +
sub [esi+994h] edx +
sub [esi+990h] edx +
push edi  +
mov [esi+458h] ecx +
xor edi edi +
mov eax [esi+8] +
lea ecx [edi+eax] +
cmp [ecx] edx +
jbe loc_1013D11  +
sub [ecx] edx +
jmp loc_1013D13  +
mov [ecx] ebx +
add edi 4 +
cmp edi 40000h +
jb loc_1013D03  +
mov eax [esi+98Ch] +
mov ecx [esi+4] +
lea eax [eax+ecx+1101h] +
test eax eax +
jbe loc_1013D51  +
mov ecx [esi+4338h] +
lea ecx [ecx+ebx*4] +
mov edi [ecx] +
test edi edi +
jz loc_1013D4C  +
cmp edi edx +
jbe loc_1013D49  +
sub [ecx] edx +
jmp loc_1013D4C  +
and dword ptr [ecx] 0 +
inc ebx  +
cmp ebx eax +
jb loc_1013D32  +
xor ebx ebx +
test eax eax +
jbe loc_1013D76  +
mov ecx [esi+433Ch] +
lea ecx [ecx+ebx*4] +
mov edi [ecx] +
test edi edi +
jz loc_1013D71  +
cmp edi edx +
jbe loc_1013D6E  +
sub [ecx] edx +
jmp loc_1013D71  +
and dword ptr [ecx] 0 +
inc ebx  +
cmp ebx eax +
jb loc_1013D57  +
add [esi] edx +
mov ecx edx +
shl ecx 2 +
add [esi+0Ch] ecx +
add [esi+10h] ecx +
pop edi  +
push [ebp+arg_0]  +
push esi  +
call sub_1013507  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov dl [eax+18h] +
movsx ecx dl +
sub ecx [ebp+arg_4] +
push esi  +
mov esi [ebp+arg_8] +
shl esi cl +
mov cl dl +
sub cl byte ptr [ebp+arg_4] +
or [eax+14h] esi +
cmp cl 10h +
mov [eax+18h] cl +
pop esi  +
jg loc_1013E11  +
mov ecx [eax+860h] +
cmp ecx [eax+864h] +
jb loc_1013DE1  +
mov ecx [eax+85Ch] +
mov dword ptr [eax+1Ch] 1 +
mov [eax+860h] ecx +
mov ecx [eax+860h] +
mov dl [eax+16h] +
mov [ecx] dl +
inc dword ptr [eax+860h]  +
mov ecx [eax+860h] +
mov dl [eax+17h] +
mov [ecx] dl +
inc dword ptr [eax+860h]  +
shl dword ptr [eax+14h] 10h +
add byte ptr [eax+18h] 10h +
cmp byte ptr [eax+18h] 10h +
jle loc_1013DC0  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push 9800h  +
call dword ptr [esi+4348h]  +
pop ecx  +
mov [esi+85Ch] eax +
test eax eax +
jz loc_1013E4D  +
mov [esi+860h] eax +
add eax 97C0h +
mov [esi+864h] eax +
xor eax eax +
inc eax  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
lea esi [eax+85Ch] +
mov ecx [esi] +
test ecx ecx +
jz loc_1013E77  +
push ecx  +
call dword ptr [eax+434Ch]  +
and dword ptr [esi] 0 +
pop ecx  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
and dword ptr [eax+9A0h] 0 +
and dword ptr [eax+878h] 0 +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [edi+99Ch] +
test ebx ebx +
jg loc_1013EB4  +
xor eax eax +
jmp loc_1013EDC  +
cmp [ebp+arg_4] ebx +
jge loc_1013EBC  +
mov ebx [ebp+arg_4] +
push esi  +
push ebx  +
lea esi [edi+998h] +
push dword ptr [esi]  +
push [ebp+arg_0]  +
call memcpy  +
sub [edi+99Ch] ebx +
add esp 0Ch +
add [esi] ebx +
mov eax ebx +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
mov eax dword_1017000 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
xor esi esi +
cmp [ecx+878h] esi +
jz loc_1013F12  +
mov [ecx+874h] esi +
jmp loc_1013FCE  +
mov eax [ecx+9A0h] +
add eax ebx +
cmp eax 0Ah +
jnb loc_1013F34  +
mov [ecx+874h] esi +
mov dword ptr [ecx+878h] 1 +
jmp loc_1013FCE  +
cmp ebx 6 +
jg loc_1013F44  +
mov [ecx+9A0h] eax +
jmp loc_1013FCE  +
push edi  +
lea eax [edx+ebx] +
mov [ebp+var_10] eax +
add eax 0FFFFFFFAh +
mov esi eax +
lea edi [ebp+var_C] +
movs   +
movs   +
mov edi [ebp+var_10] +
add edi 0FFFFFFFAh +
mov eax 0E8E8E8E8h +
stos   +
stos   +
mov eax [ecx+9A0h] +
lea ebx [eax+ebx-0Ah] +
mov [ebp+var_14] ebx +
jmp loc_1013F7A  +
inc edx  +
inc dword ptr [ecx+9A0h]  +
cmp byte ptr [edx] 0E8h +
jnz loc_1013F73  +
mov esi [ecx+9A0h] +
inc edx  +
cmp esi ebx +
jnb loc_1013FB8  +
mov eax [edx] +
lea edi [esi+eax] +
test edi edi +
jl loc_1013FA9  +
mov ebx [ecx+874h] +
add esi ebx +
cmp edi esi +
jnb loc_1013FA9  +
cmp edi ebx +
jb loc_1013FA7  +
sub eax ebx +
mov edi eax +
mov [edx] edi +
mov ebx [ebp+var_14] +
add edx 4 +
add dword ptr [ecx+9A0h] 5 +
jmp loc_1013F7A  +
mov edi [ebp+var_10] +
add edi 0FFFFFFFAh +
lea esi [ebp+var_C] +
movs   +
movs   +
add ebx 0Ah +
mov [ecx+9A0h] ebx +
pop edi  +
mov ecx [ebp+var_4] +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_10026CE  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_8] 0 +
jg loc_1013FF2  +
xor eax eax +
jmp loc_1014043  +
push ebx  +
push edi  +
mov edi [ebp+arg_0] +
mov eax [edi+4334h] +
push [ebp+arg_8]  +
add eax [ebp+arg_4] +
push eax  +
call sub_1013EA0  +
mov ebx eax +
test ebx ebx +
jge loc_1014013  +
xor eax eax +
jmp loc_1014041  +
cmp dword ptr [edi+874h] 0 +
push esi  +
jz loc_1014040  +
lea esi [edi+4340h] +
cmp dword ptr [esi] 8000h +
jnb loc_1014040  +
mov edx [edi+4334h] +
add edx [ebp+arg_4] +
push ebx  +
mov ecx edi +
call sub_1013EE6  +
inc dword ptr [esi]  +
mov eax ebx +
pop esi  +
pop edi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0B8h +
mov eax dword_1017000 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push ebx  +
push esi  +
push edi  +
push 60h  +
mov [ebp+var_B0] eax +
lea eax [ebp+var_7C] +
mov ebx ecx +
mov edi edx +
push 0  +
push eax  +
mov [ebp+var_B8] ebx +
mov [ebp+var_B4] edi +
call memset  +
xor eax eax +
add esp 0Ch +
cmp [ebp+arg_4] eax +
jle loc_101411F  +
lea esi [eax+1] +
xor edx edx +
cmp esi [ebp+arg_4] +
jge loc_10140FD  +
mov cl [ebx+eax] +
cmp [ebx+esi] cl +
jnz loc_10140B1  +
inc edx  +
inc esi  +
cmp esi [ebp+arg_4] +
jl loc_10140A5  +
cmp edx 4 +
jl loc_10140FD  +
test cl cl +
jnz loc_10140D3  +
cmp edx 33h +
jle loc_10140C2  +
push 33h  +
pop edx  +
cmp edx 13h +
jg loc_10140CD  +
inc [ebp+var_5A]  +
jmp loc_10140F7  +
inc [ebp+var_58]  +
jmp loc_10140F7  +
cmp edx 5 +
jle loc_10140DB  +
push 5  +
pop edx  +
movzx ecx byte ptr [edi+eax] +
movzx esi byte ptr [ebx+eax] +
sub ecx esi +
movzx ecx ds:byte_1014289[ecx] +
lea ecx [ebp+ecx*2+var_7C] +
inc word ptr [ecx]  +
inc [ebp+var_56]  +
lea eax [eax+edx-1] +
jmp loc_1014115  +
movzx ecx byte ptr [edi+eax] +
movzx edx byte ptr [ebx+eax] +
sub ecx edx +
movzx ecx ds:byte_1014289[ecx] +
lea ecx [ebp+ecx*2+var_7C] +
inc word ptr [ecx]  +
inc eax  +
cmp eax [ebp+arg_4] +
jl loc_1014098  +
push 1  +
lea eax [ebp+var_AC] +
push eax  +
lea eax [ebp+var_1C] +
push eax  +
lea eax [ebp+var_7C] +
push eax  +
push 14h  +
push [ebp+var_B0]  +
call sub_1015EF6  +
xor esi esi +
movsx eax byte ptr [ebp+esi+var_1C] +
push eax  +
push 4  +
push [ebp+var_B0]  +
call sub_1013D98  +
inc esi  +
cmp esi 14h +
jl loc_101413F  +
xor esi esi +
cmp [ebp+arg_4] esi +
jle loc_1014258  +
lea eax [esi+1] +
xor edi edi +
cmp eax [ebp+arg_4] +
jge loc_10141A4  +
mov cl [ebx+esi] +
cmp [ebx+eax] cl +
jnz loc_101417C  +
inc edi  +
inc eax  +
cmp eax [ebp+arg_4] +
jl loc_1014170  +
cmp edi 4 +
jl loc_10141A4  +
test cl cl +
jnz loc_1014198  +
cmp edi 33h +
jle loc_101418D  +
push 33h  +
pop edi  +
cmp edi 13h +
setnle bl  +
add bl 11h +
jmp loc_10141BA  +
cmp edi 5 +
jle loc_10141A0  +
push 5  +
pop edi  +
mov bl 13h +
jmp loc_10141BA  +
mov eax [ebp+var_B4] +
movzx ecx byte ptr [ebx+esi] +
movzx eax byte ptr [eax+esi] +
sub eax ecx +
mov bl ds:byte_1014289[eax] +
movsx eax bl +
movzx ecx word ptr [ebp+eax*2+var_AC] +
movsx eax byte ptr [ebp+eax+var_1C] +
push ecx  +
push eax  +
push [ebp+var_B0]  +
call sub_1013D98  +
cmp bl 11h +
jnz loc_10141E4  +
lea eax [edi-4] +
push eax  +
push 4  +
jmp loc_1014233  +
cmp bl 12h +
jnz loc_10141F1  +
lea eax [edi-14h] +
push eax  +
push 5  +
jmp loc_1014233  +
cmp bl 13h +
jnz loc_1014242  +
lea eax [edi-4] +
push eax  +
push 1  +
push [ebp+var_B0]  +
call sub_1013D98  +
mov eax [ebp+var_B4] +
movzx eax byte ptr [eax+esi] +
mov ecx [ebp+var_B8] +
movzx ecx byte ptr [ecx+esi] +
sub eax ecx +
movsx eax ds:byte_1014289[eax] +
movzx ecx word ptr [ebp+eax*2+var_AC] +
movsx eax byte ptr [ebp+eax+var_1C] +
push ecx  +
push eax  +
push [ebp+var_B0]  +
call sub_1013D98  +
lea esi [esi+edi-1] +
mov ebx [ebp+var_B8] +
inc esi  +
cmp esi [ebp+arg_4] +
jl loc_1014163  +
mov edi [ebp+var_B4] +
push [ebp+arg_4]  +
push ebx  +
push edi  +
call memcpy  +
mov ecx [ebp+var_4] +
add esp 0Ch +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_10026CE  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_4]  +
mov esi [ebp+arg_0] +
lea eax [esi+33ECh] +
push eax  +
lea eax [esi+2544h] +
push eax  +
lea eax [esi+28FCh] +
push eax  +
mov eax [esi+870h] +
lea eax ds:100h[eax*8] +
push eax  +
push esi  +
call sub_1015EF6  +
push [ebp+arg_4]  +
lea eax [esi+4006h] +
push eax  +
lea eax [esi+2801h] +
push eax  +
lea eax [esi+3C22h] +
push eax  +
push 0F9h  +
push esi  +
call sub_1015EF6  +
push 1  +
lea eax [esi+4312h] +
push eax  +
lea eax [esi+4322h] +
push eax  +
lea eax [esi+42F2h] +
push eax  +
push 8  +
push esi  +
call sub_1015EF6  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
mov al [ecx+55Ch] +
add al 12h +
movzx eax al +
cmp eax [ecx+870h] +
jnb loc_1014365  +
push esi  +
lea esi ds:100h[eax*8] +
lea edx [ecx+eax*8+2644h] +
cmp esi 2BDh +
jnb loc_1014355  +
mov byte ptr [edx] 64h +
inc eax  +
add esi 8 +
add edx 8 +
cmp eax [ecx+870h] +
jb loc_101434A  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push 100h  +
lea edx [esi+3964h] +
lea ecx [esi+2544h] +
push esi  +
call sub_101404C  +
mov ecx [esi+870h] +
shl ecx 3 +
mov eax 1BCh +
cmp ecx eax +
jnb loc_10143A2  +
mov eax ecx +
push eax  +
lea edx [esi+3A64h] +
lea ecx [esi+2644h] +
push esi  +
call sub_101404C  +
push 0F9h  +
lea edx [esi+41F8h] +
lea ecx [esi+2801h] +
push esi  +
call sub_101404C  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
push 1  +
lea eax [esi+4312h] +
push eax  +
lea edi [esi+4322h] +
push edi  +
lea eax [esi+42F2h] +
push eax  +
push 8  +
push esi  +
call sub_1015EF6  +
xor ebx ebx +
movzx eax byte ptr [edi+ebx] +
push eax  +
push 3  +
push esi  +
call sub_1013D98  +
inc ebx  +
cmp ebx 8 +
jl loc_1014402  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
xor ecx ecx +
lea edx [eax+ecx+2544h] +
cmp byte ptr [edx] 0 +
jnz loc_101443A  +
mov byte ptr [edx] 0Bh +
inc ecx  +
cmp ecx 100h +
jnb loc_1014455  +
jmp loc_101442B  +
lea edx [eax+ecx+2544h] +
cmp byte ptr [edx] 0 +
jnz loc_1014454  +
mov byte ptr [edx] 0Ch +
inc ecx  +
mov edx [eax+870h] +
lea edx ds:100h[edx*8] +
cmp ecx edx +
jb loc_1014445  +
lea ecx [eax+2801h] +
mov edx 0F9h +
cmp byte ptr [ecx] 0 +
jnz loc_1014479  +
mov byte ptr [ecx] 8 +
inc ecx  +
dec edx  +
jnz loc_1014471  +
push eax  +
call sub_1014320  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
push 2  +
pop ebx  +
push 4  +
mov byte ptr [esi+45Ch] 0 +
mov byte ptr [esi+45Dh] 1 +
mov [esi+45Eh] bl +
mov byte ptr [esi+45Fh] 3 +
mov byte ptr [ebp+arg_0] 4 +
pop edi  +
test ebx ebx +
jle loc_10144D6  +
push ebx  +
push [ebp+arg_0]  +
lea eax [edi+esi+45Ch] +
push eax  +
call memset  +
add esp 0Ch +
add edi ebx +
inc byte ptr [ebp+arg_0]  +
test ebx ebx +
jle loc_10144F3  +
push ebx  +
push [ebp+arg_0]  +
lea eax [edi+esi+45Ch] +
push eax  +
call memset  +
add esp 0Ch +
add edi ebx +
inc byte ptr [ebp+arg_0]  +
add ebx ebx +
cmp edi 400h +
jl loc_10144BC  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
xor cl cl +
mov edx eax +
test eax eax +
jz loc_1014526  +
test dl 1 +
jz loc_1014522  +
inc cl  +
sar edx 1 +
jnz loc_101451B  +
mov edx [ebp+arg_0] +
mov [edx+eax+881h] cl +
inc eax  +
cmp eax 100h +
jl loc_1014513  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
push edi  +
mov edi [ebp+arg_4] +
lea ecx [edi-1] +
xor dl dl +
test ecx ecx +
jl loc_101457A  +
mov esi [eax+2Ch] +
lea esi [esi+ecx*4] +
cmp dword ptr [esi] 2 +
jbe loc_101456B  +
inc dl  +
cmp dl 3 +
jb loc_101456D  +
jmp loc_101457C  +
xor dl dl +
dec ecx  +
sub esi 4 +
test ecx ecx +
jge loc_101455D  +
cmp dl 3 +
jnb loc_101457C  +
xor ecx ecx +
cmp ecx edi +
jge loc_10145B8  +
push ebx  +
mov edx [eax+2Ch] +
mov edx [edx+ecx*4] +
test edx edx +
jz loc_10145B2  +
cmp edx 2 +
ja loc_10145A0  +
mov ebx [eax+38h] +
lea edx [eax+edx*4+38h] +
mov esi [edx] +
mov [edx] ebx +
mov [eax+38h] esi +
jmp loc_10145B2  +
mov esi [eax+3Ch] +
mov [eax+40h] esi +
mov esi [eax+38h] +
add edx 0FFFFFFFEh +
mov [eax+3Ch] esi +
mov [eax+38h] edx +
inc ecx  +
cmp ecx edi +
jl loc_1014581  +
pop ebx  +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax [ebp+arg_0] +
push esi  +
mov [ebp+var_4] 4B0h +
xor edx edx +
lea ecx [eax+28FCh] +
push edi  +
movzx edi word ptr [ecx] +
movzx esi byte ptr [eax+edx+2544h] +
imul esi edi +
add [ebp+var_4] esi +
inc edx  +
inc ecx  +
inc ecx  +
cmp edx 100h +
jb loc_10145DE  +
cmp dword ptr [eax+870h] 0 +
mov byte ptr [ebp+arg_0+3] 0 +
jbe loc_1014653  +
xor edx edx +
push ebx  +
movzx esi ds:byte_100A98C[edx] +
lea ecx ds:100h[edx*8] +
lea edx [eax+ecx+2544h] +
lea ecx [eax+ecx*2+28FCh] +
mov [ebp+var_8] 8 +
movzx edi byte ptr [edx] +
movzx ebx word ptr [ecx] +
add edi esi +
imul edi ebx +
add [ebp+var_4] edi +
inc ecx  +
inc ecx  +
inc edx  +
dec [ebp+var_8]  +
jnz loc_101462D  +
inc byte ptr [ebp+arg_0+3]  +
movzx edx byte ptr [ebp+arg_0+3] +
cmp edx [eax+870h] +
jb loc_101460A  +
pop ebx  +
xor edx edx +
lea ecx [eax+3C22h] +
movzx edi word ptr [ecx] +
movzx esi byte ptr [eax+edx+2801h] +
imul esi edi +
add [ebp+var_4] esi +
inc edx  +
inc ecx  +
inc ecx  +
cmp edx 0F9h +
jb loc_101465B  +
mov eax [ebp+var_4] +
add eax 7 +
pop edi  +
shr eax 3 +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
cmp dword ptr [esi+868h] 0 +
jbe loc_10146CC  +
push esi  +
call sub_10132D4  +
mov ecx [esi+85Ch] +
mov eax [esi+860h] +
sub eax ecx +
test eax eax +
jle loc_10146CC  +
push dword ptr [esi+868h]  +
push eax  +
push ecx  +
push dword ptr [esi+4344h]  +
call dword ptr [esi+4350h]  +
add esp 10h +
mov eax [esi+85Ch] +
and dword ptr [esi+868h] 0 +
and dword ptr [esi+14h] 0 +
mov [esi+860h] eax +
mov byte ptr [esi+18h] 20h +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
movsx eax byte ptr [esi+18h] +
push edi  +
push 0  +
sub eax 10h +
push eax  +
push esi  +
call sub_1013D98  +
push 3  +
pop edi  +
lea ecx [esi+38h] +
push ebx  +
mov eax [ecx] +
push 4  +
pop edx  +
mov ebx [esi+860h] +
mov [ebx] al +
inc dword ptr [esi+860h]  +
shr eax 8 +
dec edx  +
jnz loc_1014717  +
add ecx 4 +
dec edi  +
jnz loc_1014712  +
mov edi [ebp+arg_8] +
and edi 1 +
cmp [ebp+arg_8] edx +
jbe loc_101477B  +
mov ebx [ebp+arg_4] +
mov eax [esi] +
mov al [ebx+eax] +
mov ecx [esi+860h] +
mov [ecx] al +
inc dword ptr [esi+860h]  +
inc ebx  +
dec [ebp+arg_8]  +
inc dword ptr [esi+868h]  +
cmp dword ptr [esi+868h] 8000h +
jnz loc_1014775  +
push esi  +
call sub_101468B  +
mov byte ptr [esi+880h] 0 +
cmp [ebp+arg_8] 0 +
ja loc_101473F  +
pop ebx  +
test edi edi +
jz loc_101478F  +
mov eax [esi+860h] +
mov byte ptr [eax] 0 +
inc dword ptr [esi+860h]  +
and dword ptr [esi+14h] 0 +
pop edi  +
mov byte ptr [esi+18h] 20h +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push edi  +
xor edi edi +
cmp [ebp+arg_4] edi +
jbe loc_1014ABB  +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
mov [ebp+var_4] edi +
mov edx [esi+34h] +
xor eax eax +
mov ecx edi +
and ecx 7 +
inc eax  +
shl eax cl +
mov ecx edi +
shr ecx 3 +
mov cl [ecx+edx] +
test al cl +
mov eax [esi+30h] +
jnz loc_1014863  +
movzx eax byte ptr [edi+eax] +
movsx ecx byte ptr [esi+18h] +
lea edx [eax+esi+2544h] +
movzx ebx byte ptr [edx] +
movzx eax word ptr [esi+eax*2+33ECh] +
sub ecx ebx +
shl eax cl +
or [esi+14h] eax +
mov al [edx] +
sub [esi+18h] al +
jmp loc_1014851  +
mov eax [esi+860h] +
cmp eax [esi+864h] +
jb loc_1014827  +
mov eax [esi+85Ch] +
mov dword ptr [esi+1Ch] 1 +
mov [esi+860h] eax +
mov eax [esi+860h] +
mov cl [esi+16h] +
mov [eax] cl +
inc dword ptr [esi+860h]  +
mov eax [esi+860h] +
mov cl [esi+17h] +
mov [eax] cl +
inc dword ptr [esi+860h]  +
shl dword ptr [esi+14h] 10h +
add byte ptr [esi+18h] 10h +
cmp byte ptr [esi+18h] 10h +
jle loc_1014806  +
inc edi  +
inc dword ptr [esi+868h]  +
jmp loc_1014A97  +
mov bl [edi+eax] +
mov ecx [ebp+var_4] +
mov eax [esi+2Ch] +
mov eax [ecx+eax] +
add [ebp+var_4] 4 +
push eax  +
inc edi  +
push esi  +
mov byte ptr [ebp+arg_0+3] bl +
mov [ebp+var_C] edi +
mov [ebp+var_8] eax +
call sub_1013328  +
movzx eax al +
cmp bl 7 +
jnb loc_1014917  +
movzx edx bl +
lea ecx [edx+eax*8] +
movzx ebx word ptr [esi+ecx*2+35ECh] +
lea edi [ecx+esi+2644h] +
movsx ecx byte ptr [esi+18h] +
mov [ebp+arg_0] edi +
movzx edi byte ptr [edi] +
sub ecx edi +
shl ebx cl +
mov ecx [ebp+arg_0] +
or [esi+14h] ebx +
mov cl [ecx] +
sub [esi+18h] cl +
jmp loc_101490B  +
mov ecx [esi+860h] +
cmp ecx [esi+864h] +
jb loc_10148E1  +
mov ecx [esi+85Ch] +
mov dword ptr [esi+1Ch] 1 +
mov [esi+860h] ecx +
mov ecx [esi+860h] +
mov bl [esi+16h] +
mov [ecx] bl +
inc dword ptr [esi+860h]  +
mov edi [esi+860h] +
mov cl [esi+17h] +
mov [edi] cl +
inc dword ptr [esi+860h]  +
shl dword ptr [esi+14h] 10h +
add byte ptr [esi+18h] 10h +
cmp byte ptr [esi+18h] 10h +
jg loc_1014A0D  +
jmp loc_10148C0  +
mov ecx eax +
shl ecx 4 +
movzx edi word ptr [ecx+esi+35FAh] +
movsx ecx byte ptr [esi+18h] +
lea edx [esi+eax*8+264Bh] +
movzx ebx byte ptr [edx] +
sub ecx ebx +
shl edi cl +
or [esi+14h] edi +
mov cl [edx] +
sub [esi+18h] cl +
jmp loc_101498B  +
mov ecx [esi+860h] +
cmp ecx [esi+864h] +
jb loc_1014961  +
mov ecx [esi+85Ch] +
mov dword ptr [esi+1Ch] 1 +
mov [esi+860h] ecx +
mov ecx [esi+860h] +
mov dl [esi+16h] +
mov [ecx] dl +
inc dword ptr [esi+860h]  +
mov ecx [esi+860h] +
mov dl [esi+17h] +
mov [ecx] dl +
inc dword ptr [esi+860h]  +
shl dword ptr [esi+14h] 10h +
add byte ptr [esi+18h] 10h +
cmp byte ptr [esi+18h] 10h +
jle loc_1014940  +
movzx edx byte ptr [ebp+arg_0+3] +
movzx ebx byte ptr [edx+esi+27FAh] +
movsx ecx byte ptr [esi+18h] +
movzx edi word ptr [esi+edx*2+3FF8h] +
sub ecx ebx +
shl edi cl +
or [esi+14h] edi +
mov cl [edx+esi+27FAh] +
sub [esi+18h] cl +
jmp loc_1014A07  +
mov ecx [esi+860h] +
cmp ecx [esi+864h] +
jb loc_10149DD  +
mov ecx [esi+85Ch] +
mov dword ptr [esi+1Ch] 1 +
mov [esi+860h] ecx +
mov ecx [esi+860h] +
mov bl [esi+16h] +
mov [ecx] bl +
inc dword ptr [esi+860h]  +
mov edi [esi+860h] +
mov cl [esi+17h] +
mov [edi] cl +
inc dword ptr [esi+860h]  +
shl dword ptr [esi+14h] 10h +
add byte ptr [esi+18h] 10h +
cmp byte ptr [esi+18h] 10h +
jle loc_10149BC  +
mov cl ds:byte_100A98C[eax] +
test cl cl +
jz loc_1014A8B  +
mov edi ds:dword_100A8C0[eax*4] +
and edi [ebp+var_8] +
movzx ebx cl +
movsx ecx byte ptr [esi+18h] +
sub ecx ebx +
shl edi cl +
or [esi+14h] edi +
mov al ds:byte_100A98C[eax] +
sub [esi+18h] al +
jmp loc_1014A85  +
mov eax [esi+860h] +
cmp eax [esi+864h] +
jb loc_1014A5B  +
mov eax [esi+85Ch] +
mov dword ptr [esi+1Ch] 1 +
mov [esi+860h] eax +
mov eax [esi+860h] +
mov cl [esi+16h] +
mov [eax] cl +
inc dword ptr [esi+860h]  +
mov eax [esi+860h] +
mov cl [esi+17h] +
mov [eax] cl +
inc dword ptr [esi+860h]  +
shl dword ptr [esi+14h] 10h +
add byte ptr [esi+18h] 10h +
cmp byte ptr [esi+18h] 10h +
jle loc_1014A3A  +
mov edi [ebp+var_C] +
add edx 2 +
add [esi+868h] edx +
cmp dword ptr [esi+868h] 8000h +
jnz loc_1014AB0  +
push esi  +
call sub_101468B  +
mov byte ptr [esi+880h] 0 +
cmp edi [ebp+arg_4] +
jb loc_10147BE  +
pop esi  +
pop ebx  +
pop edi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
xor eax eax +
mov [ebp+var_4] eax +
cmp [ebp+arg_4] eax +
jbe locret_1014F02  +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov [ebp+var_8] eax +
jmp loc_1014AE9  +
mov eax [ebp+var_4] +
mov ebx [esi+34h] +
xor edi edi +
inc edi  +
mov ecx eax +
and ecx 7 +
mov edx edi +
shl edx cl +
mov ecx eax +
shr ecx 3 +
mov cl [ecx+ebx] +
test dl cl +
mov ecx [esi+30h] +
jnz loc_1014B8E  +
movzx eax byte ptr [eax+ecx] +
movsx ecx byte ptr [esi+18h] +
lea edx [eax+esi+2544h] +
movzx ebx byte ptr [edx] +
movzx eax word ptr [esi+eax*2+33ECh] +
sub ecx ebx +
shl eax cl +
or [esi+14h] eax +
mov al [edx] +
sub [esi+18h] al +
jmp loc_1014B7A  +
mov eax [esi+860h] +
cmp eax [esi+864h] +
jb loc_1014B50  +
mov eax [esi+85Ch] +
mov [esi+1Ch] edi +
mov [esi+860h] eax +
mov eax [esi+860h] +
mov cl [esi+16h] +
mov [eax] cl +
inc dword ptr [esi+860h]  +
mov eax [esi+860h] +
mov cl [esi+17h] +
mov [eax] cl +
inc dword ptr [esi+860h]  +
shl dword ptr [esi+14h] 10h +
add byte ptr [esi+18h] 10h +
cmp byte ptr [esi+18h] 10h +
jle loc_1014B33  +
inc [ebp+var_4]  +
inc dword ptr [esi+868h]  +
jmp loc_1014EDA  +
mov cl [eax+ecx] +
inc eax  +
mov byte ptr [ebp+arg_0+3] cl +
mov ecx [ebp+var_8] +
add [ebp+var_8] 4 +
mov [ebp+var_4] eax +
mov eax [esi+2Ch] +
mov ebx [ecx+eax] +
push ebx  +
push esi  +
mov [ebp+var_C] ebx +
call sub_1013328  +
cmp byte ptr [ebp+arg_0+3] 7 +
movzx eax al +
jnb loc_1014C84  +
movzx ecx byte ptr [ebp+arg_0+3] +
mov [ebp+arg_0] ecx +
lea ecx [ecx+eax*8] +
movzx edi word ptr [esi+ecx*2+35ECh] +
lea edx [ecx+esi+2644h] +
movzx ebx byte ptr [edx] +
movsx ecx byte ptr [esi+18h] +
sub ecx ebx +
shl edi cl +
or [esi+14h] edi +
mov cl [edx] +
sub [esi+18h] cl +
jmp loc_1014C35  +
mov ecx [esi+860h] +
cmp ecx [esi+864h] +
jb loc_1014C0B  +
mov ecx [esi+85Ch] +
mov dword ptr [esi+1Ch] 1 +
mov [esi+860h] ecx +
mov ecx [esi+860h] +
mov dl [esi+16h] +
mov [ecx] dl +
inc dword ptr [esi+860h]  +
mov ecx [esi+860h] +
mov dl [esi+17h] +
mov [ecx] dl +
inc dword ptr [esi+860h]  +
shl dword ptr [esi+14h] 10h +
add byte ptr [esi+18h] 10h +
cmp byte ptr [esi+18h] 10h +
jle loc_1014BEA  +
mov ebx [ebp+var_C] +
mov cl ds:byte_100A98C[eax] +
cmp cl 3 +
jb loc_1014E57  +
jbe loc_1014DDA  +
movzx edx cl +
xor edi edi +
inc edi  +
lea ecx [edx-3] +
shl edi cl +
mov ecx ebx +
shr ecx 3 +
dec edi  +
and edi ecx +
movsx ecx byte ptr [esi+18h] +
sub ecx edx +
add ecx 3 +
shl edi cl +
mov cl 3 +
or [esi+14h] edi +
sub cl ds:byte_100A98C[eax] +
add [esi+18h] cl +
jmp loc_1014DD4  +
movzx edi byte ptr [esi+eax*8+264Bh] +
mov ecx eax +
shl ecx 4 +
movzx edx word ptr [ecx+esi+35FAh] +
movsx ecx byte ptr [esi+18h] +
sub ecx edi +
shl edx cl +
or [esi+14h] edx +
mov cl [esi+eax*8+264Bh] +
sub [esi+18h] cl +
jmp loc_1014CFB  +
mov ecx [esi+860h] +
cmp ecx [esi+864h] +
jb loc_1014CD1  +
mov ecx [esi+85Ch] +
mov dword ptr [esi+1Ch] 1 +
mov [esi+860h] ecx +
mov ecx [esi+860h] +
mov dl [esi+16h] +
mov [ecx] dl +
inc dword ptr [esi+860h]  +
mov edi [esi+860h] +
mov cl [esi+17h] +
mov [edi] cl +
inc dword ptr [esi+860h]  +
shl dword ptr [esi+14h] 10h +
add byte ptr [esi+18h] 10h +
cmp byte ptr [esi+18h] 10h +
jle loc_1014CB0  +
movzx ecx byte ptr [ebp+arg_0+3] +
movzx edx word ptr [esi+ecx*2+3FF8h] +
movzx edi byte ptr [ecx+esi+27FAh] +
mov [ebp+arg_0] ecx +
movsx ecx byte ptr [esi+18h] +
sub ecx edi +
shl edx cl +
mov ecx [ebp+arg_0] +
or [esi+14h] edx +
mov cl [ecx+esi+27FAh] +
sub [esi+18h] cl +
jmp loc_1014D7D  +
mov ecx [esi+860h] +
cmp ecx [esi+864h] +
jb loc_1014D53  +
mov ecx [esi+85Ch] +
mov dword ptr [esi+1Ch] 1 +
mov [esi+860h] ecx +
mov ecx [esi+860h] +
mov dl [esi+16h] +
mov [ecx] dl +
inc dword ptr [esi+860h]  +
mov edi [esi+860h] +
mov cl [esi+17h] +
mov [edi] cl +
inc dword ptr [esi+860h]  +
shl dword ptr [esi+14h] 10h +
add byte ptr [esi+18h] 10h +
cmp byte ptr [esi+18h] 10h +
jg loc_1014C3E  +
jmp loc_1014D32  +
mov eax [esi+860h] +
cmp eax [esi+864h] +
jb loc_1014DAA  +
mov eax [esi+85Ch] +
mov dword ptr [esi+1Ch] 1 +
mov [esi+860h] eax +
mov eax [esi+860h] +
mov cl [esi+16h] +
mov [eax] cl +
inc dword ptr [esi+860h]  +
mov eax [esi+860h] +
mov cl [esi+17h] +
mov [eax] cl +
inc dword ptr [esi+860h]  +
shl dword ptr [esi+14h] 10h +
add byte ptr [esi+18h] 10h +
cmp byte ptr [esi+18h] 10h +
jle loc_1014D89  +
movsx ecx byte ptr [esi+18h] +
and bl 7 +
movzx eax bl +
lea edx [eax+esi+4322h] +
movzx edi byte ptr [edx] +
movzx eax word ptr [esi+eax*2+4312h] +
sub ecx edi +
shl eax cl +
or [esi+14h] eax +
mov al [edx] +
sub [esi+18h] al +
jmp loc_1014E4F  +
mov eax [esi+860h] +
cmp eax [esi+864h] +
jb loc_1014E25  +
mov eax [esi+85Ch] +
mov dword ptr [esi+1Ch] 1 +
mov [esi+860h] eax +
mov eax [esi+860h] +
mov cl [esi+16h] +
mov [eax] cl +
inc dword ptr [esi+860h]  +
mov eax [esi+860h] +
mov cl [esi+17h] +
mov [eax] cl +
inc dword ptr [esi+860h]  +
shl dword ptr [esi+14h] 10h +
add byte ptr [esi+18h] 10h +
cmp byte ptr [esi+18h] 10h +
jg loc_1014ECE  +
jmp loc_1014E04  +
test cl cl +
jz loc_1014ECE  +
mov edx ds:dword_100A8C0[eax*4] +
movzx edi cl +
movsx ecx byte ptr [esi+18h] +
and edx ebx +
sub ecx edi +
shl edx cl +
or [esi+14h] edx +
mov al ds:byte_100A98C[eax] +
sub [esi+18h] al +
jmp loc_1014EC8  +
mov eax [esi+860h] +
cmp eax [esi+864h] +
jb loc_1014E9E  +
mov eax [esi+85Ch] +
mov dword ptr [esi+1Ch] 1 +
mov [esi+860h] eax +
mov eax [esi+860h] +
mov cl [esi+16h] +
mov [eax] cl +
inc dword ptr [esi+860h]  +
mov eax [esi+860h] +
mov cl [esi+17h] +
mov [eax] cl +
inc dword ptr [esi+860h]  +
shl dword ptr [esi+14h] 10h +
add byte ptr [esi+18h] 10h +
cmp byte ptr [esi+18h] 10h +
jle loc_1014E7D  +
mov eax [ebp+arg_0] +
add eax 2 +
add [esi+868h] eax +
cmp dword ptr [esi+868h] 8000h +
jnz loc_1014EF3  +
push esi  +
call sub_101468B  +
mov byte ptr [esi+880h] 0 +
mov eax [ebp+var_4] +
cmp eax [ebp+arg_4] +
jb loc_1014AE6  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov ecx [ebp+arg_0] +
push ebx  +
push esi  +
push edi  +
xor eax eax +
lea edx [ecx+42F2h] +
mov edi edx +
stos   +
stos   +
stos   +
stos   +
mov edi [ebp+arg_4] +
mov esi [ecx+2Ch] +
xor ebx ebx +
mov [ebp+var_4] ebx +
test edi edi +
jbe loc_1014F4E  +
mov eax [esi] +
add esi 4 +
cmp eax 10h +
jb loc_1014F4B  +
and eax 7 +
lea eax [ecx+eax*2+42F2h] +
inc word ptr [eax]  +
dec edi  +
jnz loc_1014F34  +
push 8  +
pop ecx  +
movzx eax word ptr [edx] +
cmp eax [ebp+var_4] +
jbe loc_1014F5C  +
mov [ebp+var_4] eax +
add ebx eax +
inc edx  +
inc edx  +
dec ecx  +
jnz loc_1014F51  +
push 5  +
pop ecx  +
mov eax ebx +
xor edx edx +
div  ecx +
pop edi  +
pop esi  +
pop ebx  +
cmp [ebp+var_4] eax +
jbe loc_1014F7F  +
cmp [ebp+arg_4] 64h +
jb loc_1014F7F  +
push 2  +
pop eax  +
jmp locret_1014F82  +
xor eax eax +
inc eax  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
and [ebp+var_8] 0 +
push edi  +
mov edi eax +
cmp edi [ebp+arg_0] +
jnb loc_1015045  +
push ebx  +
mov ebx ecx +
shl ebx 2 +
mov edx [esi+34h] +
xor eax eax +
mov ecx edi +
and ecx 7 +
inc eax  +
shl eax cl +
mov ecx edi +
shr ecx 3 +
mov cl [ecx+edx] +
test al cl +
mov eax [esi+30h] +
jnz loc_1014FD7  +
movzx eax byte ptr [edi+eax] +
lea eax [esi+eax*2+28FCh] +
inc word ptr [eax]  +
inc [ebp+var_8]  +
jmp loc_101503A  +
mov al [edi+eax] +
mov [ebp+var_1] al +
cmp al 7 +
mov eax [esi+2Ch] +
push dword ptr [eax+ebx]  +
push esi  +
jnb loc_1015000  +
call sub_1013328  +
movzx ecx [ebp+var_1] +
movzx eax al +
lea eax [ecx+eax*8] +
lea eax [esi+eax*2+2AFCh] +
jmp loc_1015023  +
call sub_1013328  +
movzx eax al +
shl eax 4 +
lea eax [eax+esi+2B0Ah] +
inc word ptr [eax]  +
mov eax [esi+30h] +
movzx eax byte ptr [edi+eax] +
lea eax [esi+eax*2+3C14h] +
inc word ptr [eax]  +
mov eax [esi+30h] +
movzx eax byte ptr [edi+eax] +
mov ecx [ebp+var_8] +
lea eax [ecx+eax+2] +
mov [ebp+var_8] eax +
add ebx 4 +
inc edi  +
cmp edi [ebp+arg_0] +
jb loc_1014FA8  +
pop ebx  +
mov eax [ebp+var_8] +
pop edi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
mov eax [esi+870h] +
add eax 20h +
shl eax 4 +
push eax  +
lea eax [esi+28FCh] +
push 0  +
push eax  +
call memset  +
push 1F2h  +
lea eax [esi+3C22h] +
push 0  +
push eax  +
call memset  +
mov ecx [ebp+arg_8] +
mov eax [ebp+arg_4] +
add esp 18h +
push [ebp+arg_C]  +
call sub_1014F8B  +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_8] +
mov eax [ebp+arg_4] +
push esi  +
push [ebp+arg_C]  +
mov esi [ebp+arg_0] +
call sub_1014F8B  +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0C9Ch +
mov eax dword_1017000 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
mov [ebp+var_C88] eax +
mov eax [ebp+arg_4] +
push esi  +
mov esi ecx +
mov [ebp+var_C8C] eax +
mov eax [esi+870h] +
add eax 20h +
mov ecx eax +
shl ecx 3 +
mov [ebp+var_C9C] ecx +
cmp ecx 320h +
jb loc_1015112  +
xor eax eax +
jmp loc_10152F4  +
push ebx  +
push edi  +
mov edi eax +
shl edi 4 +
push edi  +
lea eax [ebp+var_C84] +
push 0  +
push eax  +
call memset  +
push edi  +
lea eax [ebp+var_644] +
push 0  +
push eax  +
call memset  +
mov ecx [ebp+arg_10] +
add esp 18h +
test ecx ecx +
jbe loc_1015271  +
mov eax [ebp+arg_C] +
mov ebx [esi+34h] +
mov edi [esi+30h] +
shl eax 2 +
mov [ebp+var_C90] eax +
mov eax [ebp+arg_8] +
shl eax 2 +
mov [ebp+var_C94] eax +
mov [ebp+var_C98] ecx +
jmp loc_1015171  +
mov eax [ebp+var_C94] +
mov ecx [ebp+var_C88] +
and ecx 7 +
xor edx edx +
inc edx  +
shl edx cl +
mov ecx [ebp+var_C88] +
shr ecx 3 +
mov cl [ecx+ebx] +
test dl cl +
jnz loc_101519B  +
mov eax [ebp+var_C88] +
movzx eax byte ptr [edi+eax] +
jmp loc_10151DF  +
mov ecx [ebp+var_C88] +
cmp byte ptr [edi+ecx] 7 +
mov ecx [esi+2Ch] +
push dword ptr [ecx+eax]  +
push esi  +
jnb loc_10151C9  +
call sub_1013328  +
mov ecx [ebp+var_C88] +
movzx ecx byte ptr [edi+ecx] +
movzx eax al +
lea eax [ecx+eax*8+100h] +
jmp loc_10151D8  +
call sub_1013328  +
movzx eax al +
lea eax ds:107h[eax*8] +
add [ebp+var_C94] 4 +
inc [ebp+var_C88]  +
lea eax [ebp+eax*2+var_C84] +
inc word ptr [eax]  +
mov eax [ebp+var_C8C] +
xor edx edx +
mov ecx eax +
and ecx 7 +
inc edx  +
shl edx cl +
mov ecx eax +
shr ecx 3 +
mov cl [ecx+ebx] +
test dl cl +
jnz loc_1015211  +
movzx eax byte ptr [edi+eax] +
jmp loc_1015255  +
cmp byte ptr [edi+eax] 7 +
mov ecx [ebp+var_C90] +
mov eax [esi+2Ch] +
push dword ptr [ecx+eax]  +
push esi  +
jnb loc_101523F  +
call sub_1013328  +
mov ecx [ebp+var_C8C] +
movzx ecx byte ptr [edi+ecx] +
movzx eax al +
lea eax [ecx+eax*8+100h] +
jmp loc_101524E  +
call sub_1013328  +
movzx eax al +
lea eax ds:107h[eax*8] +
add [ebp+var_C90] 4 +
inc [ebp+var_C8C]  +
lea eax [ebp+eax*2+var_644] +
inc word ptr [eax]  +
dec [ebp+var_C98]  +
jnz loc_101516B  +
xor esi esi +
xor ebx ebx +
cmp [ebp+var_C9C] esi +
jbe loc_10152F0  +
mov edi 100h +
movzx eax word ptr [ebp+esi*2+var_C84] +
mov ecx edi +
cmp ax cx +
movzx eax ax +
jnb loc_101529D  +
movzx eax ds:byte_1015350[eax] +
jmp loc_10152AA  +
shr eax 8 +
movzx eax ds:byte_1015350[eax] +
add eax 8 +
movzx ecx word ptr [ebp+esi*2+var_644] +
mov edx edi +
cmp cx dx +
movzx ecx cx +
jnb loc_10152C5  +
movzx ecx ds:byte_1015350[ecx] +
jmp loc_10152D2  +
shr ecx 8 +
movzx ecx ds:byte_1015350[ecx] +
add ecx 8 +
mov eax ds:dword_1015308[eax*4] +
sub eax ds:dword_1015308[ecx*4] +
cdq   +
xor eax edx +
sub eax edx +
add ebx eax +
inc esi  +
cmp esi [ebp+var_C9C] +
jb loc_1015282  +
pop edi  +
mov eax ebx +
pop ebx  +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop esi  +
call sub_10026CE  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 838h +
mov eax dword_1017000 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_10] +
mov ecx [ebp+arg_0] +
mov edx [ebp+arg_8] +
push esi  +
mov esi [ebp+arg_14] +
push edi  +
xor edi edi +
mov [ebp+var_820] ecx +
mov [ebp+var_82C] eax +
mov [ebp+var_830] esi +
mov [eax] edx +
cmp esi edi +
jz loc_1015497  +
mov eax [ebp+arg_C] +
mov [esi] eax +
mov eax edx +
sub eax [ebp+arg_4] +
cmp eax 1800h +
jnb loc_10154AA  +
xor eax eax +
jmp loc_10156B9  +
mov al [ecx+880h] +
mov [ebp+var_819] al +
cmp al 4 +
jnb loc_10154A3  +
mov esi edx +
shr esi 3 +
xor eax eax +
push ebx  +
mov [ebp+var_818] edi +
cmp esi edi +
jbe loc_101550A  +
test al 7 +
jnz loc_10154F4  +
cmp [ebp+var_818] 408h +
jnb loc_10156B6  +
mov ebx [ebp+var_818] +
inc [ebp+var_818]  +
mov [ebp+ebx*2+var_814] di +
mov ebx [ecx+34h] +
movzx ebx byte ptr [ebx+eax] +
movzx ebx byte ptr [ebx+ecx+881h] +
add edi ebx +
inc eax  +
cmp eax esi +
jb loc_10154CC  +
mov eax [ebp+arg_4] +
add eax 3Fh +
and eax 0FFFFFFC0h +
mov [ebp+arg_4] eax +
add eax 800h +
add edx 0FFFFF000h +
mov [ebp+var_824] eax +
mov [ebp+var_834] edx +
cmp eax edx +
jnb loc_10156B6  +
lea esi [eax+400h] +
mov edi 400h +
jmp loc_101554E  +
mov ecx [ebp+var_820] +
mov eax [ebp+var_824] +
mov edx esi +
shr edx 6 +
movzx edx [ebp+edx*2+var_814] +
push edi  +
push edx  +
mov edx eax +
shr edx 6 +
movzx edx [ebp+edx*2+var_814] +
push edx  +
push esi  +
push eax  +
call sub_10150C5  +
mov ebx 578h +
cmp eax ebx +
jbe loc_101569C  +
lea eax [esi+400h] +
mov edx eax +
shr edx 6 +
movzx edx [ebp+edx*2+var_814] +
push edi  +
push edx  +
lea ecx [esi-800h] +
mov edx ecx +
shr edx 6 +
movzx edx [ebp+edx*2+var_814] +
push edx  +
push eax  +
push ecx  +
mov ecx [ebp+var_820] +
call sub_10150C5  +
cmp eax ebx +
jbe loc_101569C  +
lea eax [esi+800h] +
mov edx eax +
shr edx 6 +
movzx edx [ebp+edx*2+var_814] +
push edi  +
push edx  +
lea ecx [esi-0C00h] +
mov edx ecx +
shr edx 6 +
movzx edx [ebp+edx*2+var_814] +
push edx  +
push eax  +
push ecx  +
mov ecx [ebp+var_820] +
call sub_10150C5  +
cmp eax ebx +
jbe loc_101569C  +
and [ebp+var_828] 0 +
lea ebx [esi-200h] +
lea eax [esi+600h] +
cmp ebx eax +
jnb loc_101569C  +
lea eax [esi-600h] +
mov [ebp+var_818] eax +
mov ecx [ebp+var_820] +
mov eax ebx +
shr eax 6 +
movzx eax [ebp+eax*2+var_814] +
push edi  +
push eax  +
mov eax [ebp+var_818] +
shr eax 6 +
movzx eax [ebp+eax*2+var_814] +
push eax  +
push ebx  +
push [ebp+var_818]  +
call sub_10150C5  +
cmp eax [ebp+var_828] +
jbe loc_1015669  +
mov [ebp+var_828] eax +
mov [ebp+var_838] ebx +
add [ebp+var_818] 40h +
add ebx 40h +
lea eax [esi+600h] +
cmp ebx eax +
jb loc_1015622  +
cmp [ebp+var_828] 6A4h +
jb loc_101569C  +
mov eax [ebp+var_838] +
mov ecx eax +
sub ecx [ebp+arg_4] +
cmp ecx 1000h +
jnb loc_10156C9  +
add [ebp+var_824] edi +
mov eax [ebp+var_824] +
add esi edi +
cmp eax [ebp+var_834] +
jb loc_1015542  +
xor eax eax +
pop ebx  +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_10026CE  +
leave   +
retn 18h  +
mov cl [ebp+var_819] +
mov edx [ebp+var_820] +
inc cl  +
mov [edx+880h] cl +
mov ecx [ebp+var_82C] +
mov [ecx] eax +
mov ecx [ebp+var_830] +
test ecx ecx +
jz loc_10156FC  +
shr eax 6 +
movzx eax [ebp+eax*2+var_814] +
mov [ecx] eax +
xor eax eax +
inc eax  +
jmp loc_10156B8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 24h +
mov ecx [ebp+arg_0] +
mov eax [ecx] +
mov edx [ecx+8] +
push ebx  +
push esi  +
mov esi [ebp+arg_4] +
movzx eax word ptr [esi+eax] +
lea eax [edx+eax*4] +
mov edx [eax] +
mov [eax] esi +
mov ebx [ecx+10h] +
mov eax esi +
sub eax [ecx+4] +
push edi  +
mov edi [ecx+0Ch] +
add eax 4 +
mov [ebp+var_24] eax +
mov [ebp+var_1C] edi +
mov [ebp+var_C] ebx +
cmp edx eax +
ja loc_1015754  +
shl esi 2 +
and dword ptr [esi+ebx] 0 +
and dword ptr [esi+edi] 0 +
xor eax eax +
jmp loc_101591F  +
push 2  +
pop eax  +
mov ebx esi +
mov [ebp+arg_4] eax +
mov [ebp+arg_0] eax +
mov [ebp+var_18] eax +
mov [ebp+var_14] eax +
sub ebx edx +
add ebx eax +
lea eax [edi+esi*4] +
mov [ebp+var_4] eax +
mov eax [ebp+var_C] +
lea eax [eax+esi*4] +
mov [ecx+58h] ebx +
mov [ebp+var_8] eax +
mov eax [ebp+arg_4] +
mov [ebp+var_20] eax +
mov eax [ecx] +
lea ebx [eax+edx] +
lea edi [esi+eax] +
mov eax [ebp+arg_4] +
mov al [ebx+eax] +
mov [ebp+var_10] ebx +
mov ebx [ebp+arg_4] +
cmp al [edi+ebx] +
mov ebx [ebp+var_20] +
jnz loc_10157C5  +
inc ebx  +
cmp ebx 101h +
jge loc_10157DE  +
mov eax [ebp+var_10] +
mov al [ebx+eax] +
cmp al [edi+ebx] +
jnz loc_10157C5  +
inc ebx  +
cmp ebx 101h +
jge loc_10157DE  +
mov eax [ebp+var_10] +
mov al [ebx+eax] +
cmp al [edi+ebx] +
jz loc_101579D  +
mov eax [ebp+var_10] +
mov al [ebx+eax] +
cmp al [edi+ebx] +
jge loc_1015926  +
cmp ebx [ebp+var_14] +
jle loc_1015818  +
cmp ebx [ebp+arg_0] +
jle loc_1015808  +
mov eax esi +
sub eax edx +
add eax 2 +
mov [ebp+arg_4] eax +
mov eax [ebp+arg_0] +
lea eax [ecx+eax*4+50h] +
inc [ebp+arg_0]  +
mov edi [ebp+arg_4] +
add eax 4 +
cmp [ebp+arg_0] ebx +
mov [eax] edi +
jl loc_10157EF  +
cmp ebx 32h +
jge loc_101597D  +
mov eax [ebp+var_18] +
cmp eax ebx +
mov [ebp+var_14] ebx +
mov [ebp+arg_4] eax +
jl loc_1015818  +
mov [ebp+arg_4] ebx +
mov eax [ebp+var_8] +
mov edi [ebp+var_4] +
mov [eax] edx +
mov eax [ebp+var_1C] +
lea eax [eax+edx*4] +
mov edx [eax] +
mov [ebp+var_8] eax +
cmp edx [ebp+var_24] +
ja loc_101577B  +
and dword ptr [edi] 0 +
and dword ptr [eax] 0 +
xor edi edi +
cmp [ebp+arg_0] edi +
jle loc_101585A  +
mov eax [ecx] +
mov edx eax +
sub edx [ecx+44h] +
add edx esi +
add eax esi +
mov bl [edi+eax] +
cmp bl [edx] +
jnz loc_101585A  +
inc edi  +
inc edx  +
cmp edi [ebp+arg_0] +
jl loc_101584C  +
cmp edi 2 +
mov ebx edi +
jl loc_101587A  +
lea eax [ecx+edi*4+50h] +
and dword ptr [eax] 0 +
dec edi  +
sub eax 4 +
cmp edi 2 +
jge loc_1015865  +
cmp ebx 32h +
jg loc_1015902  +
and [ebp+arg_4] 0 +
cmp [ebp+arg_0] 0 +
jle loc_10158A6  +
mov eax [ecx] +
mov edx eax +
sub edx [ecx+48h] +
lea edi [esi+eax] +
add edx esi +
mov eax [ebp+arg_4] +
mov al [edi+eax] +
cmp al [edx] +
jnz loc_10158A6  +
inc [ebp+arg_4]  +
mov eax [ebp+arg_0] +
inc edx  +
cmp [ebp+arg_4] eax +
jl loc_1015890  +
cmp [ebp+arg_4] ebx +
jle loc_10158BE  +
lea eax [ecx+ebx*4+50h] +
inc ebx  +
add eax 4 +
cmp ebx [ebp+arg_4] +
mov dword ptr [eax] 1 +
jl loc_10158AF  +
and [ebp+arg_4] 0 +
cmp [ebp+arg_0] 0 +
jle loc_10158EA  +
mov eax [ecx] +
mov edx eax +
sub edx [ecx+4Ch] +
lea edi [esi+eax] +
add edx esi +
mov eax [ebp+arg_4] +
mov al [edi+eax] +
cmp al [edx] +
jnz loc_10158EA  +
inc [ebp+arg_4]  +
mov eax [ebp+arg_0] +
inc edx  +
cmp [ebp+arg_4] eax +
jl loc_10158D4  +
cmp [ebp+arg_4] ebx +
jle loc_1015902  +
lea ecx [ecx+ebx*4+50h] +
inc ebx  +
add ecx 4 +
cmp ebx [ebp+arg_4] +
mov dword ptr [ecx] 2 +
jl loc_10158F3  +
mov eax 7FFFh +
and esi eax +
sub eax esi +
cmp [ebp+arg_0] eax +
jle loc_101591C  +
cmp eax 2 +
mov [ebp+arg_0] eax +
jge loc_101591C  +
and [ebp+arg_0] 0 +
mov eax [ebp+arg_0] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
cmp ebx [ebp+var_18] +
jle loc_1015965  +
mov eax [ebp+arg_0] +
cmp ebx eax +
jle loc_1015955  +
mov edi esi +
sub edi edx +
add edi 2 +
mov [ebp+arg_4] edi +
lea eax [ecx+eax*4+50h] +
inc [ebp+arg_0]  +
mov edi [ebp+arg_4] +
add eax 4 +
cmp [ebp+arg_0] ebx +
mov [eax] edi +
jl loc_1015940  +
cmp ebx 32h +
jge loc_101597D  +
mov eax [ebp+var_14] +
cmp ebx eax +
mov [ebp+var_18] ebx +
mov [ebp+arg_4] ebx +
jl loc_1015965  +
mov [ebp+arg_4] eax +
mov eax [ebp+var_4] +
mov [eax] edx +
mov eax [ebp+var_C] +
lea edi [eax+edx*4] +
mov edx [edi] +
mov eax [ebp+var_8] +
mov [ebp+var_4] edi +
jmp loc_101582B  +
mov eax [ebp+var_1C] +
mov edi [ebp+var_4] +
shl edx 2 +
mov eax [edx+eax] +
mov [edi] eax +
mov eax [ebp+var_C] +
mov eax [edx+eax] +
mov edx [ebp+var_8] +
mov [edx] eax +
jmp loc_101583A  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
mov edx [ebp+arg_0] +
mov eax [edx] +
mov ecx [edx+8] +
push esi  +
mov esi [ebp+arg_4] +
movzx eax word ptr [esi+eax] +
lea ecx [ecx+eax*4] +
mov eax [ecx] +
mov [ecx] esi +
mov ecx [edx+0Ch] +
push edi  +
mov edi [edx+10h] +
mov [ebp+var_14] ecx +
mov [ebp+var_18] edi +
cmp eax [ebp+arg_8] +
ja loc_10159E1  +
shl esi 2 +
and dword ptr [esi+edi] 0 +
and dword ptr [esi+ecx] 0 +
jmp loc_1015AC3  +
push ebx  +
lea ecx [ecx+esi*4] +
push 2  +
pop ebx  +
mov [ebp+arg_4] ecx +
lea ecx [edi+esi*4] +
mov [ebp+var_C] ebx +
mov [ebp+var_10] ebx +
mov [ebp+var_4] ecx +
mov edx [edx] +
lea edi [edx+eax] +
mov [ebp+var_8] edi +
lea edi [edx+esi] +
mov edx [ebp+var_8] +
mov dl [edx+ebx] +
mov ecx ebx +
cmp dl [edi+ebx] +
jnz loc_1015A35  +
inc ecx  +
cmp ecx 32h +
jge loc_1015AA9  +
mov edx [ebp+var_8] +
mov dl [edx+ecx] +
cmp dl [edi+ecx] +
jnz loc_1015A35  +
inc ecx  +
cmp ecx 32h +
jge loc_1015AA9  +
mov edx [ebp+var_8] +
mov dl [edx+ecx] +
cmp dl [edi+ecx] +
jz loc_1015A0F  +
mov edx [ebp+var_8] +
mov dl [edx+ecx] +
cmp dl [edi+ecx] +
jge loc_1015A6B  +
cmp ecx [ebp+var_10] +
jle loc_1015A56  +
cmp ecx 32h +
jge loc_1015AA9  +
mov ebx [ebp+var_C] +
cmp ebx ecx +
mov [ebp+var_10] ecx +
jl loc_1015A56  +
mov ebx ecx +
mov ecx [ebp+var_4] +
mov [ecx] eax +
mov ecx [ebp+var_14] +
lea edx [ecx+eax*4] +
mov eax [edx] +
mov ecx [ebp+arg_4] +
mov [ebp+var_4] edx +
jmp loc_1015A94  +
cmp ecx [ebp+var_C] +
jle loc_1015A81  +
cmp ecx 32h +
jge loc_1015AA9  +
mov ebx [ebp+var_10] +
cmp ecx ebx +
mov [ebp+var_C] ecx +
jge loc_1015A81  +
mov ebx ecx +
mov ecx [ebp+arg_4] +
mov edx [ebp+var_4] +
mov [ecx] eax +
mov ecx [ebp+var_18] +
lea ecx [ecx+eax*4] +
mov eax [ecx] +
mov [ebp+arg_4] ecx +
cmp eax [ebp+arg_8] +
jbe loc_1015AA1  +
mov edx [ebp+arg_0] +
jmp loc_10159F7  +
and dword ptr [ecx] 0 +
and dword ptr [edx] 0 +
jmp loc_1015AC2  +
mov ecx [ebp+var_14] +
mov edx [ebp+arg_4] +
shl eax 2 +
mov ecx [eax+ecx] +
mov [edx] ecx +
mov ecx [ebp+var_18] +
mov eax [ecx+eax] +
mov ecx [ebp+var_4] +
mov [ecx] eax +
pop ebx  +
pop edi  +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [ebp+arg_4] +
mov edx [eax] +
movzx edx word ptr [ecx+edx] +
push esi  +
mov esi [eax+8] +
lea edx [esi+edx*4] +
cmp [edx] ecx +
jnz loc_1015B08  +
push ebx  +
mov ebx [ebp+arg_8] +
push edi  +
mov edi [eax+0Ch] +
mov eax [eax+10h] +
cmp [edx] ebx +
ja loc_1015B0D  +
xor esi esi +
shl ecx 2 +
mov [edx] esi +
mov [eax+ecx] esi +
mov [ecx+edi] esi +
pop edi  +
pop ebx  +
pop esi  +
pop ebp  +
retn 0Ch  +
shl ecx 2 +
mov esi [ecx+edi] +
cmp esi ebx +
ja loc_1015B1D  +
and dword ptr [ecx+edi] 0 +
xor esi esi +
add ecx eax +
mov [ebp+arg_0] ecx +
mov ecx [ecx] +
cmp ecx ebx +
ja loc_1015B30  +
mov ecx [ebp+arg_0] +
and dword ptr [ecx] 0 +
xor ecx ecx +
cmp esi ecx +
jbe loc_1015B4C  +
cmp esi ebx +
ja loc_1015B3A  +
xor esi esi +
mov [edx] esi +
test esi esi +
jz loc_1015B06  +
mov edx esi +
shl edx 2 +
mov esi [edx+eax] +
add edx eax +
jmp loc_1015B30  +
cmp ecx ebx +
ja loc_1015B52  +
xor ecx ecx +
mov [edx] ecx +
test ecx ecx +
jz loc_1015B06  +
mov edx ecx +
shl edx 2 +
mov ecx [edx+edi] +
add edx edi +
jmp loc_1015B30  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
movsx ebx [ebp+arg_4] +
push esi  +
mov esi [ebp+arg_0] +
cmp ebx [esi+252Ch] +
jge loc_1015B9D  +
mov al [esi+2532h] +
cmp al 10h +
jge loc_1015B8E  +
movsx eax al +
jmp loc_1015B91  +
push 10h  +
pop eax  +
lea eax [esi+eax*2+2508h] +
inc word ptr [eax]  +
jmp loc_1015BC7  +
push edi  +
lea edi [esi+2532h] +
inc byte ptr [edi]  +
movzx eax word ptr [esi+ebx*4+0F2Ch] +
push eax  +
push esi  +
call sub_1015B69  +
movzx eax word ptr [esi+ebx*4+0F2Eh] +
push eax  +
push esi  +
call sub_1015B69  +
dec byte ptr [edi]  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
xor eax eax +
push edi  +
movzx esi ax +
push 8  +
mov eax esi +
pop ecx  +
push [ebp+arg_0]  +
shl esi 10h +
or eax esi +
lea edi [edx+2508h] +
stos   +
push edx  +
stos   +
call sub_1015B69  +
and [ebp+arg_0] 0 +
and [ebp+var_4] 0 +
lea esi [edx+2528h] +
mov bl 10h +
mov eax esi +
mov di [eax] +
mov ecx [ebp+var_4] +
shl di cl +
add word ptr [ebp+arg_0] di +
dec bl  +
dec eax  +
dec eax  +
inc [ebp+var_4]  +
test bl bl +
ja loc_1015C0F  +
xor edi edi +
cmp word ptr [ebp+arg_0] di +
jz loc_1015C6F  +
mov ecx 0FFFFh +
mov eax ecx +
add [esi] ax +
mov al 0Fh +
movzx ebx al +
cmp [edx+ebx*2+2508h] di +
jnz loc_1015C4E  +
dec al  +
jz loc_1015C66  +
jmp loc_1015C3B  +
movzx eax al +
mov ebx ecx +
add [edx+eax*2+2508h] bx +
lea eax [edx+eax*2+250Ah] +
add word ptr [eax] 2 +
add [ebp+arg_0] ecx +
cmp word ptr [ebp+arg_0] di +
jnz loc_1015C34  +
mov cl 10h +
mov [ebp+arg_0] esi +
mov eax [ebp+arg_0] +
mov ax [eax] +
dec ax  +
movzx edi ax +
test di di +
jl loc_1015CA1  +
lea eax [edx+9A8h] +
mov esi [eax] +
movzx esi word ptr [esi] +
mov ebx [edx+9ACh] +
mov [esi+ebx] cl +
add dword ptr [eax] 2 +
dec edi  +
test di di +
jge loc_1015C8A  +
sub [ebp+arg_0] 2 +
dec cl  +
test cl cl +
ja loc_1015C74  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov ecx [ebp+arg_0] +
movsx edx cx +
movzx edx word ptr [eax+edx*2+9B0h] +
add ecx ecx +
mov [ebp+var_4] edx +
movzx edx word ptr [eax+2530h] +
movzx ecx cx +
cmp cx dx +
jg loc_1015D57  +
push ebx  +
push esi  +
push edi  +
jge loc_1015D08  +
mov esi [eax+9A4h] +
movsx edx cx +
movsx edi word ptr [eax+edx*2+9B2h] +
movsx edx word ptr [eax+edx*2+9B0h] +
mov dx [esi+edx*2] +
cmp dx [esi+edi*2] +
jbe loc_1015D08  +
inc ecx  +
mov edx 2BEh +
cmp cx dx +
jge loc_1015D54  +
movsx ebx word ptr [ebp+var_4] +
movsx edx cx +
movzx esi word ptr [eax+edx*2+9B0h] +
mov edx [eax+9A4h] +
mov bx [edx+ebx*2] +
movsx edi si +
cmp bx [edx+edi*2] +
jbe loc_1015D54  +
movsx edx word ptr [ebp+arg_0] +
mov [eax+edx*2+9B0h] si +
movzx edx cx +
mov [ebp+arg_0] edx +
movzx edx word ptr [eax+2530h] +
add ecx ecx +
cmp cx dx +
jle loc_1015CE2  +
pop edi  +
pop esi  +
pop ebx  +
movsx ecx word ptr [ebp+arg_0] +
mov dx word ptr [ebp+var_4] +
mov [eax+ecx*2+9B0h] dx +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 28h +
mov eax dword_1017000 +
xor eax ebp +
mov [ebp+var_4] eax +
xor eax eax +
mov word ptr [ebp+var_28] ax +
mov word ptr [ebp+var_28+2] ax +
mov eax [ebp+arg_0] +
xor ecx ecx +
inc ecx  +
add eax 250Ah +
push edi  +
mov di word ptr [ebp+ecx*2+var_28] +
add di [eax] +
add di di +
mov word ptr [ebp+ecx*2+var_28+2] di +
inc ecx  +
inc eax  +
inc eax  +
cmp ecx 10h +
jle loc_1015D98  +
xor ecx ecx +
cmp [ebp+arg_4] ecx +
pop edi  +
jle loc_1015DD6  +
movsx eax byte ptr [edx+ecx] +
mov ax word ptr [ebp+eax*2+var_28] +
mov [esi+ecx*2] ax +
movsx eax byte ptr [edx+ecx] +
lea eax [ebp+eax*2+var_28] +
inc word ptr [eax]  +
inc ecx  +
cmp ecx [ebp+arg_4] +
jl loc_1015DB8  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_10026CE  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov cx [eax+2530h] +
sub esp 0Ch +
push esi  +
sar cx 1 +
push edi  +
movzx esi cx +
jmp loc_1015E09  +
push esi  +
call sub_1015CB7  +
dec esi  +
cmp si 1 +
jge loc_1015E02  +
mov ecx [ebp+arg_4] +
mov [eax+9A8h] ecx +
movzx ecx word ptr [eax+9B2h] +
movsx edx cx +
cmp edx [eax+252Ch] +
mov [ebp+var_8] ecx +
mov [ebp+var_4] edx +
jge loc_1015E40  +
mov edx [eax+9A8h] +
mov [edx] cx +
add dword ptr [eax+9A8h] 2 +
movzx ecx word ptr [eax+2530h] +
movsx edx cx +
mov dx [eax+edx*2+9B0h] +
dec ecx  +
push 1  +
mov [eax+9B2h] dx +
mov [eax+2530h] cx +
call sub_1015CB7  +
movzx edx word ptr [eax+9B2h] +
movsx ecx dx +
cmp ecx [eax+252Ch] +
mov [ebp+var_C] edx +
jge loc_1015E8D  +
mov esi [eax+9A8h] +
mov [esi] dx +
add dword ptr [eax+9A8h] 2 +
movzx edi word ptr [ebp+arg_0] +
mov cx [ebx+ecx*2] +
mov edx [ebp+var_4] +
add cx [ebx+edx*2] +
inc [ebp+arg_0]  +
movsx esi di +
mov [ebx+esi*2] cx +
push 1  +
mov [eax+9B2h] di +
call sub_1015CB7  +
mov cx word ptr [ebp+var_8] +
mov [eax+esi*4+0F2Ch] cx +
mov cx word ptr [ebp+var_C] +
mov [eax+esi*4+0F2Eh] cx +
cmp word ptr [eax+2530h] 1 +
jg loc_1015E18  +
mov ecx [ebp+arg_4] +
push edi  +
mov edx eax +
mov [eax+9A8h] ecx +
call sub_1015BD2  +
pop edi  +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_8] +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov eax [ebp+arg_4] +
mov [esi+252Ch] eax +
mov eax [ebp+arg_C] +
movzx edx word ptr [esi+252Ch] +
mov [esi+9ACh] eax +
xor eax eax +
xor ecx ecx +
cmp [ebp+arg_4] eax +
mov [esi+9A4h] ebx +
mov byte ptr [esi+2532h] 0 +
mov [esi+2530h] ax +
mov [esi+9B2h] ax +
jle loc_1015FA2  +
mov edi [esi+9ACh] +
mov byte ptr [eax+edi] 0 +
cmp word ptr [ebx+eax*2] 0 +
jz loc_1015F69  +
inc word ptr [esi+2530h]  +
movzx eax word ptr [esi+2530h] +
cwde   +
mov [esi+eax*2+9B0h] cx +
inc ecx  +
movsx eax cx +
cmp eax [ebp+arg_4] +
jl loc_1015F41  +
movzx eax word ptr [esi+2530h] +
cmp ax 2 +
jge loc_1015FB4  +
test ax ax +
jz loc_1015FA2  +
xor eax eax +
inc eax  +
cmp word ptr [esi+9B2h] 0 +
jnz loc_1015F9A  +
mov [ebx+2] ax +
jmp loc_1015F04  +
mov [ebx] ax +
jmp loc_1015F04  +
movsx eax word ptr [esi+9B2h] +
mov edx [ebp+arg_10] +
xor ecx ecx +
mov [edx+eax*2] cx +
jmp loc_1015FD4  +
push [ebp+arg_10]  +
mov eax esi +
push edx  +
call sub_1015DE9  +
cmp [ebp+arg_14] 0 +
jz loc_1015FD4  +
push [ebp+arg_4]  +
mov edx [ebp+arg_C] +
push esi  +
mov esi [ebp+arg_10] +
call sub_1015D70  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 18h  +
***
