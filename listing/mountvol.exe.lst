mov edi edi +
push esi  +
mov esi eax +
xor eax eax +
mov ecx edx +
test edx edx +
jz loc_1001220  +
cmp [esi] ax +
jz loc_100121C  +
inc esi  +
inc esi  +
dec edx  +
jnz loc_1001212  +
test edx edx +
jnz loc_1001225  +
mov eax 80070057h +
pop esi  +
test edi edi +
jz locret_1001236  +
test eax eax +
jl loc_1001233  +
sub ecx edx +
mov [edi] ecx +
retn   +
and dword ptr [edi] 0 +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov ebx eax +
mov esi edx +
xor eax eax +
xor edi edi +
test esi esi +
jz loc_1001271  +
cmp [ebp+arg_4] eax +
jz loc_100126D  +
movzx edx word ptr [ebx] +
test dx dx +
jz loc_100126D  +
mov [ecx] dx +
inc ecx  +
inc ecx  +
inc ebx  +
inc ebx  +
dec esi  +
dec [ebp+arg_4]  +
inc edi  +
test esi esi +
jnz loc_1001250  +
test esi esi +
jnz loc_1001279  +
dec ecx  +
dec ecx  +
dec edi  +
mov eax 8007007Ah +
xor edx edx +
mov [ecx] dx +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_1001287  +
mov [ecx] edi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
cmp dword_1004370 0 +
mov eax [ebp+lpszSrc] +
lea edx [eax+2] +
jz loc_10012CE  +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_10012A8  +
push 0  +
sub eax edx +
lea ecx [ebp+NumberOfBytesWritten] +
push ecx  +
sar eax 1 +
push eax  +
push [ebp+lpszSrc]  +
push hConsoleOutput  +
call ds:WriteConsoleW  +
jmp locret_1001324  +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_10012CE  +
sub eax edx +
sar eax 1 +
push esi  +
lea eax [eax+eax+2] +
push eax  +
push 0  +
call ds:LocalAlloc  +
mov esi eax +
test esi esi +
jz loc_1001323  +
push esi  +
push [ebp+lpszSrc]  +
call ds:CharToOemW  +
mov eax esi +
lea ecx [eax+1] +
mov dl [eax] +
inc eax  +
test dl dl +
jnz loc_10012FF  +
push 0  +
sub eax ecx +
lea ecx [ebp+NumberOfBytesWritten] +
push ecx  +
push eax  +
push esi  +
push hConsoleOutput  +
call ds:WriteFile  +
push esi  +
call ds:LocalFree  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax 2008h +
call __alloca_probe  +
mov eax dword_1004000 +
xor eax ebp +
mov [ebp+var_4] eax +
lea eax [ebp+arg_4] +
mov [ebp+Arguments] eax +
lea eax [ebp+Arguments] +
push eax  +
push 1000h  +
lea eax [ebp+szSrc] +
push eax  +
push 0  +
push [ebp+dwMessageId]  +
push 0  +
push 800h  +
call ds:FormatMessageW  +
lea eax [ebp+szSrc] +
push eax  +
call sub_1001293  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_1002561  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 804h +
mov eax dword_1004000 +
xor eax ebp +
mov [ebp+var_4] eax +
xor eax eax +
push eax  +
push 400h  +
lea ecx [ebp+szSrc] +
push ecx  +
push eax  +
push [ebp+dwMessageId]  +
push eax  +
push 1000h  +
call ds:FormatMessageW  +
lea eax [ebp+szSrc] +
push eax  +
call sub_1001293  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_1002561  +
leave   +
retn 4  +
***
mov eax edx +
push esi  +
lea esi [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_10013EA  +
sub eax esi +
sar eax 1 +
pop esi  +
cmp eax 3 +
jnz loc_100142F  +
push 3Ah  +
pop eax  +
cmp ax [edx+2] +
jnz loc_100142F  +
push 5Ch  +
pop eax  +
cmp ax [edx+4] +
jnz loc_100142F  +
movzx eax word ptr [edx] +
cmp ax 61h +
jb loc_100141F  +
cmp ax 7Ah +
jbe loc_100142B  +
cmp ax 41h +
jb loc_100142F  +
cmp ax 5Ah +
ja loc_100142F  +
xor eax eax +
inc eax  +
retn   +
xor eax eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
mov eax dword_1004000 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
push edi  +
xor eax eax +
xor esi esi +
mov [ebp+var_18] esi +
lea edi [ebp+var_14] +
stos   +
stos   +
stos   +
push esi  +
stos   +
push 14h  +
lea eax [ebp+var_18] +
push eax  +
push 5Ah  +
call ds:NtQuerySystemInformation  +
test eax eax +
jl loc_1001473  +
cmp [ebp+var_8] 2 +
jnz loc_1001473  +
inc esi  +
mov ecx [ebp+var_4] +
pop edi  +
mov eax esi +
xor ecx ebp +
pop esi  +
call sub_1002561  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+BytesReturned] +
push ebx  +
push esi  +
mov eax ecx +
push edi  +
lea esi [eax+2] +
xor edi edi +
mov dx [eax] +
inc eax  +
inc eax  +
cmp dx di +
jnz loc_100149A  +
sub eax esi +
sar eax 1 +
jz loc_10014FE  +
lea esi [ecx+eax*2-2] +
push 5Ch  +
pop eax  +
cmp ax [esi] +
jnz loc_10014FE  +
push 0FFFFFFFFh  +
push 80h  +
push 3  +
push edi  +
push 3  +
push edi  +
xor eax eax +
push ecx  +
mov [esi] ax +
call ds:CreateFileW  +
mov ebx eax +
push 5Ch  +
pop eax  +
mov [esi] ax +
cmp ebx 0FFFFFFFFh +
jz loc_10014FE  +
push edi  +
lea eax [ebp+BytesReturned] +
push eax  +
push edi  +
push edi  +
push edi  +
push edi  +
push 560010h  +
push ebx  +
call ds:DeviceIoControl  +
push ebx  +
mov esi eax +
call ds:CloseHandle  +
mov eax esi +
jmp loc_1001500  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
push edi  +
push [ebp+BytesReturned]  +
push 7  +
call sub_100132D  +
mov esi ds:GetVolumePathNamesForVolumeNameW +
pop ecx  +
pop ecx  +
lea eax [ebp+var_4] +
push eax  +
xor ebx ebx +
push ebx  +
push ebx  +
push [ebp+BytesReturned]  +
call esi  +
test eax eax +
jnz loc_1001554  +
mov edi ds:GetLastError +
call edi  +
cmp eax 0EAh +
jz loc_1001554  +
call edi  +
push eax  +
call sub_1001391  +
jmp loc_10015D8  +
mov eax [ebp+var_4] +
add eax eax +
push eax  +
push ebx  +
call ds:LocalAlloc  +
mov edi eax +
cmp edi ebx +
jnz loc_100156B  +
push 8  +
jmp loc_100154A  +
push ebx  +
push [ebp+var_4]  +
push edi  +
push [ebp+BytesReturned]  +
call esi  +
test eax eax +
jnz loc_1001588  +
push edi  +
call ds:LocalFree  +
call ds:GetLastError  +
jmp loc_1001549  +
cmp [edi] bx +
jnz loc_10015AE  +
push [ebp+BytesReturned]  +
call sub_1001488  +
test eax eax +
jz loc_100159D  +
push 0Ch  +
jmp loc_100159F  +
push 9  +
call sub_100132D  +
pop ecx  +
push edi  +
call ds:LocalFree  +
jmp loc_10015D8  +
mov esi edi +
push esi  +
push 6  +
call sub_100132D  +
pop ecx  +
pop ecx  +
mov ax [esi] +
inc esi  +
inc esi  +
test ax ax +
jnz loc_10015BA  +
cmp [esi] bx +
jnz loc_10015B0  +
push edi  +
call ds:LocalFree  +
push 8  +
call sub_100132D  +
pop ecx  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
push edi  +
push 0FFFFFFFFh  +
push 80h  +
push 3  +
xor esi esi +
push esi  +
push 3  +
push esi  +
push offset FileName  +
mov [ebp+OutBuffer] esi +
call ds:CreateFileW  +
xor ebx ebx +
mov edi eax +
cmp edi 0FFFFFFFFh +
setnz bl  +
cmp ebx esi +
jz loc_1001646  +
push esi  +
lea eax [ebp+BytesReturned] +
push eax  +
push 4  +
lea eax [ebp+OutBuffer] +
push eax  +
push esi  +
push esi  +
push 6D003Ch  +
push edi  +
call ds:DeviceIoControl  +
mov ebx eax +
cmp ebx esi +
jz loc_1001646  +
mov ecx [ebp+arg_0] +
xor eax eax +
cmp [ebp+OutBuffer] 1 +
setz al  +
mov [ecx] eax +
cmp edi 0FFFFFFFFh +
jz loc_1001652  +
push edi  +
call ds:CloseHandle  +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
push edi  +
push 0FFFFFFFFh  +
push 80h  +
push 3  +
xor esi esi +
push esi  +
push 3  +
push 0C0000000h  +
push offset FileName  +
call ds:CreateFileW  +
xor ebx ebx +
mov edi eax +
cmp edi 0FFFFFFFFh +
setnz bl  +
cmp ebx esi +
jz loc_10016BC  +
xor eax eax +
cmp [ebp+arg_0] esi +
push esi  +
setnz al  +
mov [ebp+InBuffer] eax +
lea eax [ebp+BytesReturned] +
push eax  +
push esi  +
push esi  +
push 4  +
lea eax [ebp+InBuffer] +
push eax  +
push 6DC040h  +
push edi  +
call ds:DeviceIoControl  +
mov ebx eax +
cmp edi 0FFFFFFFFh +
jz loc_10016C8  +
push edi  +
call ds:CloseHandle  +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax 1054h +
call __alloca_probe  +
mov eax dword_1004000 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
push 0FFFFFFFFh  +
push 80h  +
push 3  +
xor ebx ebx +
push ebx  +
push 3  +
push 0C0000000h  +
push offset FileName  +
call ds:CreateFileW  +
mov esi eax +
cmp esi 0FFFFFFFFh +
jnz loc_100171A  +
xor eax eax +
jmp loc_1001769  +
push ebx  +
lea eax [ebp+BytesReturned] +
push eax  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push 6DC038h  +
push esi  +
call ds:DeviceIoControl  +
push esi  +
mov [ebp+var_1048] eax +
call ds:CloseHandle  +
cmp [ebp+var_1048] ebx +
jz loc_1001716  +
push edi  +
mov edi 104h +
push edi  +
lea eax [ebp+var_20C] +
push eax  +
call ds:FindFirstVolumeW  +
mov [ebp+var_1050] eax +
cmp eax 0FFFFFFFFh +
jnz loc_1001779  +
xor eax eax +
pop edi  +
mov ecx [ebp+var_4] +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1002561  +
leave   +
retn   +
xor ebx ebx +
lea eax [ebp+var_20C] +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
cmp cx bx +
jnz loc_1001782  +
sub eax edx +
sar eax 1 +
mov ebx eax +
lea esi [ebx+ebx] +
push esi  +
lea eax [ebp+var_20C] +
push eax  +
lea eax [ebp+PathName] +
push eax  +
call memcpy  +
add esp 0Ch +
push 208h  +
lea eax [ebp+var_824] +
push eax  +
lea eax [ebp+var_20C] +
push eax  +
call ds:FindFirstVolumeMountPointW  +
mov [ebp+var_104C] eax +
cmp eax 0FFFFFFFFh +
jz loc_10018A8  +
cmp [ebp+var_1048] 0 +
jz loc_100189C  +
lea eax [ebp+esi+PathName] +
mov [ebp+var_1048] eax +
lea eax [ebp+var_824] +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_10017F7  +
sub eax edx +
sar eax 1 +
mov esi eax +
lea eax [esi+esi] +
push eax  +
lea eax [ebp+var_824] +
push eax  +
push [ebp+var_1048]  +
call memcpy  +
xor eax eax +
add esp 0Ch +
add esi ebx +
mov [ebp+esi*2+PathName] ax +
mov esi ds:GetVolumeNameForVolumeMountPointW +
push edi  +
lea eax [ebp+var_414] +
push eax  +
lea eax [ebp+PathName] +
push eax  +
call esi  +
test eax eax +
jz loc_10018CF  +
push edi  +
lea eax [ebp+var_1044] +
push eax  +
lea eax [ebp+var_414] +
push eax  +
call esi  +
test eax eax +
jnz loc_100187C  +
call ds:GetLastError  +
cmp eax 3 +
jnz loc_10018CF  +
lea eax [ebp+PathName] +
push eax  +
call ds:RemoveDirectoryW  +
test eax eax +
jz loc_10018CF  +
push 208h  +
lea eax [ebp+var_824] +
push eax  +
push [ebp+var_104C]  +
call ds:FindNextVolumeMountPointW  +
test eax eax +
jnz loc_10017EE  +
push [ebp+var_104C]  +
call ds:FindVolumeMountPointClose  +
push edi  +
lea eax [ebp+var_20C] +
push eax  +
push [ebp+var_1050]  +
call ds:FindNextVolumeW  +
mov [ebp+var_1048] eax +
test eax eax +
jnz loc_1001777  +
xor esi esi +
inc esi  +
jmp loc_10018DD  +
push [ebp+var_104C]  +
call ds:FindVolumeMountPointClose  +
xor esi esi +
push [ebp+var_1050]  +
call ds:FindVolumeClose  +
mov eax esi +
jmp loc_1001768  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 218h +
mov eax dword_1004000 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_4] +
mov ecx [ebp+arg_0] +
push esi  +
xor esi esi +
mov [ebp+var_218] eax +
mov [eax] esi +
push 104h  +
lea eax [ebp+FileName] +
push eax  +
push ecx  +
call ds:GetVolumeNameForVolumeMountPointW  +
test eax eax +
jz loc_1001AC5  +
push ebx  +
mov ebx ds:GetVolumePathNamesForVolumeNameW +
lea eax [ebp+var_214] +
push eax  +
push esi  +
push esi  +
lea eax [ebp+FileName] +
push eax  +
call ebx  +
test eax eax +
jnz loc_1001967  +
call ds:GetLastError  +
cmp eax 0EAh +
jz loc_1001967  +
xor eax eax +
jmp loc_1001AC4  +
mov eax [ebp+var_214] +
push edi  +
add eax eax +
push eax  +
push esi  +
call ds:LocalAlloc  +
mov edi eax +
cmp edi esi +
jz loc_1001AC1  +
push esi  +
push [ebp+var_214]  +
lea eax [ebp+FileName] +
push edi  +
push eax  +
call ebx  +
test eax eax +
jnz loc_10019A3  +
push edi  +
call ds:LocalFree  +
jmp loc_1001AC1  +
cmp [edi] si +
jnz loc_10019B5  +
push 57h  +
call ds:SetLastError  +
jmp loc_1001AC1  +
mov eax edi +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_10019B7  +
push edi  +
cmp [eax] si +
jz loc_10019E8  +
call ds:LocalFree  +
mov eax [ebp+var_218] +
push 57h  +
mov dword ptr [eax] 1 +
call ds:SetLastError  +
push 0Eh  +
jmp loc_1001A7A  +
call ds:LocalFree  +
lea eax [ebp+FileName] +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
cmp cx si +
jnz loc_10019F7  +
push 0FFFFFFFFh  +
push 80h  +
sub eax edx +
push 3  +
sar eax 1 +
xor ecx ecx +
push esi  +
mov [ebp+eax*2+var_20E] cx +
dec eax  +
push 3  +
mov [ebp+var_214] eax +
push 0C0000000h  +
lea eax [ebp+FileName] +
push eax  +
call ds:CreateFileW  +
mov ebx eax +
cmp ebx 0FFFFFFFFh +
jz loc_1001AC1  +
mov edi ds:DeviceIoControl +
push esi  +
lea eax [ebp-210h] +
push eax  +
push esi  +
push esi  +
push esi  +
push esi  +
push 560004h  +
push ebx  +
call edi  +
test eax eax +
jnz loc_1001A82  +
push ebx  +
call ds:CloseHandle  +
mov eax [ebp+var_218] +
push 57h  +
mov dword ptr [eax] 1 +
call ds:SetLastError  +
push 0Fh  +
call sub_100132D  +
pop ecx  +
jmp loc_1001AC1  +
push esi  +
lea eax [ebp-210h] +
push eax  +
push esi  +
push esi  +
push esi  +
push esi  +
push 90018h  +
push ebx  +
call edi  +
test eax eax +
jnz loc_1001AA2  +
push 0Bh  +
call sub_100132D  +
pop ecx  +
push esi  +
lea eax [ebp-210h] +
push eax  +
push esi  +
push esi  +
push esi  +
push esi  +
push 90020h  +
push ebx  +
call edi  +
test eax eax +
jnz loc_1001AD4  +
push ebx  +
call ds:CloseHandle  +
xor eax eax +
pop edi  +
pop ebx  +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop esi  +
call sub_1002561  +
leave   +
retn 8  +
push esi  +
lea eax [ebp-210h] +
push eax  +
push esi  +
push esi  +
push esi  +
push esi  +
push 56C00Ch  +
push ebx  +
call edi  +
test eax eax +
jnz loc_1001AF7  +
push ebx  +
call ds:CloseHandle  +
mov eax esi +
jmp loc_1001AC3  +
xor esi esi +
inc esi  +
jmp loc_1001AEC  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_4] +
xor eax eax +
mov ecx 80070057h +
test edx edx +
jz loc_1001B1C  +
cmp edx 7FFFFFFFh +
jbe loc_1001B1E  +
mov eax ecx +
test eax eax +
jl loc_1001B47  +
cmp [ebp+arg_C] 7FFFFFFEh +
jbe loc_1001B37  +
mov edx [ebp+arg_0] +
mov eax ecx +
xor ecx ecx +
mov [edx] cx +
jmp loc_1001B47  +
push [ebp+arg_C]  +
mov eax [ebp+arg_8] +
mov ecx [ebp+arg_0] +
push 0  +
call sub_100123C  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_4] +
push ebx  +
xor eax eax +
push esi  +
mov esi 7FFFFFFFh +
test edx edx +
jz loc_1001B69  +
cmp edx esi +
jbe loc_1001B6E  +
mov eax 80070057h +
mov ebx [ebp+arg_0] +
test eax eax +
jl loc_1001B86  +
push edi  +
lea edi [ebp+arg_0] +
mov eax ebx +
call sub_1001205  +
mov ecx [ebp+arg_0] +
pop edi  +
jmp loc_1001B88  +
xor ecx ecx +
test eax eax +
jl loc_1001B9F  +
mov edx [ebp+arg_4] +
mov eax [ebp+arg_8] +
push esi  +
sub edx ecx +
push 0  +
lea ecx [ebx+ecx*2] +
call sub_100123C  +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
xor eax eax +
test ecx ecx +
jz loc_1001BC0  +
cmp ecx 7FFFFFFFh +
jbe loc_1001BC5  +
mov eax 80070057h +
test eax eax +
jl loc_1001C02  +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
lea eax [ebp+arg_C] +
push eax  +
push [ebp+arg_8]  +
lea esi [ecx-1] +
push esi  +
push edi  +
xor ebx ebx +
call ds:_vsnwprintf  +
add esp 10h +
test eax eax +
jl loc_1001BF2  +
cmp eax esi +
ja loc_1001BF2  +
jnz loc_1001BFD  +
jmp loc_1001BF7  +
mov ebx 8007007Ah +
xor eax eax +
mov [edi+esi*2] ax +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
push edi  +
mov edi ds:LocalAlloc +
mov eax 208h +
push eax  +
push 0  +
mov [ebp+uBytes] eax +
call edi  +
mov ebx ds:LocalFree +
jmp loc_1001C56  +
lea eax [ebp+uBytes] +
push eax  +
push [ebp+uBytes]  +
push esi  +
push 62h  +
call ds:NtQuerySystemInformation  +
mov [ebp+var_8] eax +
test eax eax +
jge loc_1001C65  +
cmp eax 0C0000023h +
jnz loc_1001C7B  +
push esi  +
call ebx  +
push [ebp+uBytes]  +
push 0  +
call edi  +
mov esi eax +
test esi esi +
jnz loc_1001C2E  +
mov [ebp+var_8] 0C000009Ah +
jmp loc_1001C7B  +
movzx eax word ptr [esi] +
shr eax 1 +
push eax  +
push dword ptr [esi+4]  +
push 104h  +
push [ebp+arg_0]  +
call sub_1001B01  +
test esi esi +
jz loc_1001C82  +
push esi  +
call ebx  +
xor eax eax +
cmp [ebp+var_8] eax +
pop edi  +
pop esi  +
setnl al  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 41Ch +
mov eax dword_1004000 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
mov esi [ebp+arg_0] +
test esi esi +
jz loc_1001CB6  +
and dword ptr [esi] 0 +
lea eax [ebp+String2] +
push eax  +
call sub_1001C09  +
test eax eax +
jz loc_1001D40  +
push ebx  +
push 3Ah  +
pop eax  +
mov word ptr [ebp+DeviceName+2] ax +
xor eax eax +
mov [ebp+var_8] ax +
mov bl 41h +
movzx ax bl +
mov word ptr [ebp+DeviceName] ax +
push 104h  +
lea eax [ebp+String1] +
push eax  +
lea eax [ebp+DeviceName] +
push eax  +
call ds:QueryDosDeviceW  +
test eax eax +
jz loc_1001D10  +
lea eax [ebp+String2] +
push eax  +
lea eax [ebp+String1] +
push eax  +
call ds:lstrcmpW  +
test eax eax +
jz loc_1001D19  +
inc bl  +
cmp bl 5Ah +
jbe loc_1001CD6  +
jmp loc_1001D3F  +
push 5Ch  +
pop eax  +
mov [ebp+var_8] ax +
xor eax eax +
mov [ebp+var_6] ax +
test esi esi +
jz loc_1001D32  +
mov dword ptr [esi] 1 +
jmp loc_1001D3F  +
lea eax [ebp+DeviceName] +
push eax  +
push 0Ah  +
call sub_100132D  +
pop ecx  +
pop ecx  +
pop ebx  +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop esi  +
call sub_1002561  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 210h +
mov eax dword_1004000 +
xor eax ebp +
mov [ebp+var_4] eax +
lea eax [ebp+var_210] +
push eax  +
call sub_10015E4  +
test eax eax +
jnz loc_1001D8A  +
call ds:GetLastError  +
push eax  +
call sub_1001391  +
jmp loc_1001E1B  +
push esi  +
push edi  +
mov esi 104h +
push esi  +
lea eax [ebp+BytesReturned] +
push eax  +
call ds:FindFirstVolumeW  +
mov edi eax +
cmp edi 0FFFFFFFFh +
jnz loc_1001DB4  +
call ds:GetLastError  +
push eax  +
call sub_1001391  +
jmp loc_1001E19  +
lea eax [ebp+BytesReturned] +
push eax  +
call sub_100150C  +
push esi  +
lea eax [ebp+BytesReturned] +
push eax  +
push edi  +
call ds:FindNextVolumeW  +
test eax eax +
jnz loc_1001DB4  +
mov esi ds:GetLastError +
call esi  +
cmp eax 12h +
jz loc_1001DF1  +
call esi  +
push eax  +
call sub_1001391  +
push edi  +
call ds:FindVolumeClose  +
jmp loc_1001E19  +
push edi  +
call ds:FindVolumeClose  +
cmp [ebp+var_210] 0 +
jnz loc_1001E09  +
push 0Dh  +
call sub_100132D  +
pop ecx  +
call sub_1001437  +
test eax eax +
jz loc_1001E19  +
push 0  +
call sub_1001C96  +
pop edi  +
pop esi  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_1002561  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20Ch +
mov eax dword_1004000 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
mov esi [ebp+arg_0] +
lea eax [ebp+TargetPath] +
push eax  +
call sub_1001C09  +
test eax eax +
jz loc_1001E85  +
mov eax esi +
lea ecx [eax+2] +
mov dx [eax] +
inc eax  +
inc eax  +
test dx dx +
jnz loc_1001E5A  +
sub eax ecx +
sar eax 1 +
xor ecx ecx +
mov [esi+eax*2-2] cx +
lea eax [ebp+TargetPath] +
push eax  +
push esi  +
push 1  +
call ds:DefineDosDeviceW  +
neg eax  +
sbb eax eax +
neg eax  +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop esi  +
call sub_1002561  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 638h +
mov eax dword_1004000 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
xor edi edi +
push edi  +
mov [ebp+var_624] edi +
mov [ebp+var_634] edi +
mov [ebp+var_628] edi +
mov [ebp+var_62C] edi +
mov [ebp+var_620] edi +
mov [ebp+var_630] edi +
call ds:SetThreadUILanguage  +
push 1  +
call ds:SetErrorMode  +
push edi  +
push edi  +
push 1  +
push edi  +
call ds:HeapSetInformation  +
cmp eax edi +
jnz loc_1001F0B  +
call ds:GetLastError  +
push eax  +
call sub_1001391  +
xor eax eax +
inc eax  +
jmp loc_100204F  +
push ebx  +
push 0FFFFFFF5h  +
call ds:GetStdHandle  +
lea ecx [ebp+Mode] +
push ecx  +
push eax  +
mov hConsoleOutput eax +
call ds:GetConsoleMode  +
cmp [ebp+arg_0] 2 +
mov dword_1004370 eax +
mov ebx offset aHs +
mov edi 104h +
jle loc_1001F75  +
push dword ptr [esi+8]  +
lea eax [ebp+var_414] +
push ebx  +
push edi  +
push eax  +
call sub_1001BAA  +
add esp 10h +
test eax eax +
jl loc_1002245  +
lea eax [ebp+var_414] +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_1001F61  +
sub eax edx +
sar eax 1 +
mov [ebp+var_634] eax +
xor ecx ecx +
inc ecx  +
cmp [ebp+arg_0] ecx +
jle loc_1001FB9  +
push dword ptr [esi+4]  +
lea eax [ebp+DeviceName] +
push ebx  +
push edi  +
push eax  +
call sub_1001BAA  +
add esp 10h +
test eax eax +
jl loc_1002245  +
lea eax [ebp+DeviceName] +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_1001FA2  +
sub eax edx +
sar eax 1 +
xor ecx ecx +
mov [ebp+var_624] eax +
inc ecx  +
cmp [ebp+arg_0] 3 +
jz loc_100205D  +
cmp [ebp+arg_0] 2 +
jnz loc_100200E  +
mov esi [esi+4] +
cmp byte ptr [esi] 2Fh +
jnz loc_100200E  +
mov al [esi+1] +
test al al +
jz loc_100200E  +
cmp byte ptr [esi+2] 0 +
jnz loc_100200E  +
cmp al 72h +
jz loc_1002002  +
cmp al 52h +
jz loc_1002002  +
cmp al 6Eh +
jz loc_1001FFE  +
cmp al 4Eh +
jz loc_1001FFE  +
cmp al 65h +
jz loc_1001FF6  +
cmp al 45h +
jnz loc_100200E  +
push ecx  +
call sub_1001660  +
jmp loc_1002007  +
push 0  +
jmp loc_1001FF7  +
call sub_10016D6  +
test eax eax +
jmp loc_100229F  +
push ecx  +
call sub_100132D  +
pop ecx  +
call sub_1001437  +
test eax eax +
jz loc_1002026  +
push 2  +
call sub_100132D  +
pop ecx  +
push 3  +
call sub_100132D  +
pop ecx  +
call sub_1001437  +
test eax eax +
jz loc_100203F  +
push 4  +
call sub_100132D  +
pop ecx  +
push 5  +
call sub_100132D  +
pop ecx  +
call sub_1001D54  +
xor eax eax +
pop ebx  +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_1002561  +
leave   +
retn   +
mov esi [esi+8] +
cmp byte ptr [esi] 2Fh +
jnz loc_10020AE  +
mov al [esi+1] +
test al al +
jz loc_10020AE  +
cmp byte ptr [esi+2] 0 +
jnz loc_10020AE  +
cmp al 64h +
jz loc_10020A8  +
cmp al 44h +
jz loc_10020A8  +
cmp al 6Ch +
jz loc_1002145  +
cmp al 4Ch +
jz loc_1002145  +
cmp al 70h +
jz loc_10020A2  +
cmp al 50h +
jz loc_10020A2  +
cmp al 73h +
jz loc_100209A  +
cmp al 53h +
jnz loc_10020AE  +
mov [ebp+var_620] ecx +
jmp loc_10020AE  +
mov [ebp+var_630] ecx +
mov [ebp+var_628] ecx +
mov eax [ebp+var_624] +
cmp [ebp+eax*2+var_20E] 5Ch +
mov esi offset dword_100113C +
jz loc_10020E0  +
push esi  +
push edi  +
lea eax [ebp+DeviceName] +
push eax  +
call sub_1001B50  +
test eax eax +
jl loc_1002245  +
inc [ebp+var_624]  +
mov eax [ebp+var_634] +
cmp [ebp+eax*2+var_416] 5Ch +
jz loc_1002107  +
push esi  +
push edi  +
lea eax [ebp+var_414] +
push eax  +
call sub_1001B50  +
test eax eax +
jl loc_1002245  +
xor ebx ebx +
cmp [ebp+var_628] ebx +
jz loc_1002199  +
cmp [ebp+var_630] ebx +
jz loc_1002150  +
lea eax [ebp+var_620] +
push eax  +
lea eax [ebp+DeviceName] +
push eax  +
call sub_10018F5  +
cmp eax ebx +
jnz loc_1002150  +
cmp [ebp+var_620] ebx +
jz loc_10022A5  +
jmp loc_10022B1  +
mov [ebp+var_62C] ecx +
jmp loc_10020AE  +
lea eax [ebp+DeviceName] +
push eax  +
call ds:DeleteVolumeMountPointW  +
cmp eax ebx +
jnz loc_100204C  +
call ds:GetLastError  +
cmp eax 57h +
jnz loc_10022A5  +
mov ecx [ebp+var_624] +
xor eax eax +
mov [ebp+ecx*2+var_20E] ax +
push ebx  +
lea eax [ebp+DeviceName] +
push eax  +
push 2  +
call ds:DefineDosDeviceW  +
jmp loc_100229B  +
cmp [ebp+var_62C] ebx +
jz loc_10021D5  +
push edi  +
lea eax [ebp+var_414] +
push eax  +
lea eax [ebp+DeviceName] +
push eax  +
call ds:GetVolumeNameForVolumeMountPointW  +
mov esi eax +
cmp esi ebx +
jz loc_10022A5  +
lea eax [ebp+var_414] +
push eax  +
push 7  +
call sub_100132D  +
pop ecx  +
pop ecx  +
jmp loc_100229D  +
cmp [ebp+var_620] ebx +
jz loc_1002249  +
call sub_1001437  +
test eax eax +
jz loc_1002245  +
lea edx [ebp+DeviceName] +
call sub_10013E4  +
test eax eax +
jz loc_1002245  +
xor eax eax +
mov [ebp+var_208] ax +
push edi  +
lea eax [ebp+TargetPath] +
push eax  +
mov eax edx +
push eax  +
call ds:QueryDosDeviceW  +
mov [ebp+var_620] eax +
cmp eax ebx +
jnz loc_1002276  +
push 5Ch  +
pop eax  +
mov [ebp+var_208] ax +
lea eax [ebp+var_620] +
push eax  +
call sub_1001C96  +
cmp [ebp+var_620] ebx +
jnz loc_1002245  +
lea eax [ebp+DeviceName] +
push eax  +
call sub_1001E2C  +
jmp loc_100229B  +
push 57h  +
jmp loc_10022AC  +
lea edx [ebp+DeviceName] +
call sub_10013E4  +
test eax eax +
jz loc_1002287  +
xor eax eax +
mov [ebp+var_208] ax +
push edi  +
lea eax [ebp+TargetPath] +
push eax  +
mov eax edx +
push eax  +
call ds:QueryDosDeviceW  +
cmp eax ebx +
jz loc_100227D  +
push 91h  +
jmp loc_10022AC  +
push 5Ch  +
pop eax  +
mov [ebp+var_208] ax +
lea eax [ebp+var_414] +
push eax  +
lea eax [ebp+DeviceName] +
push eax  +
call ds:SetVolumeMountPointW  +
mov esi eax +
cmp esi ebx +
jnz loc_100204C  +
call ds:GetLastError  +
push eax  +
call sub_1001391  +
xor eax eax +
inc eax  +
jmp loc_100204E  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
xor eax eax +
jmp loc_10022DA  +
test eax eax +
jnz loc_10022DF  +
mov ecx [esi] +
test ecx ecx +
jz loc_10022D7  +
call ecx  +
add esi 4 +
cmp esi [ebp+arg_4] +
jb loc_10022CB  +
pop esi  +
pop ebp  +
retn   +
***
mov eax dword_1004044 +
push offset dword_1004034  +
push dword_1004040  +
mov dword_1004034 eax +
push offset dword_1004024  +
push offset dword_1004028  +
push offset dword_1004020  +
call ds:__getmainargs  +
add esp 14h +
mov dword_1004030 eax +
retn   +
***
call __SEH_prolog4  +
xor ebx ebx +
mov [ebp+ms_exc.disabled] ebx +
mov eax large fs:18h +
mov esi [eax+4] +
mov [ebp+var_1C] ebx +
mov edi offset Destination +
push ebx  +
push esi  +
push edi  +
call ds:InterlockedCompareExchange  +
cmp eax ebx +
jz loc_1002367  +
cmp eax esi +
jnz loc_100235A  +
xor esi esi +
inc esi  +
mov [ebp+var_1C] esi +
jmp loc_100236A  +
push 3E8h  +
call ds:Sleep  +
jmp loc_1002341  +
xor esi esi +
inc esi  +
mov eax dword_100437C +
cmp eax esi +
jnz loc_100237D  +
push 1Fh  +
call _amsg_exit  +
pop ecx  +
jmp loc_10023B8  +
mov eax dword_100437C +
test eax eax +
jnz loc_10023B2  +
mov dword_100437C esi +
push offset dword_1001118  +
push offset dword_100110C  +
call sub_10022BE  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_10023B8  +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov eax 0FFh +
jmp loc_1002482  +
mov dword_100403C esi +
mov eax dword_100437C +
cmp eax esi +
jnz loc_10023DC  +
push offset dword_1001108  +
push offset dword_1001100  +
call _initterm  +
pop ecx  +
pop ecx  +
mov dword_100437C 2 +
cmp [ebp+var_1C] ebx +
jnz loc_10023E9  +
push ebx  +
push edi  +
call ds:InterlockedExchange  +
cmp dword_1004384 ebx +
jz loc_100240A  +
push offset dword_1004384  +
call sub_10026B9  +
pop ecx  +
test eax eax +
jz loc_100240A  +
push ebx  +
push 2  +
push ebx  +
call dword_1004384  +
push dword_1004024  +
push dword_1004028  +
push dword_1004020  +
call sub_1001E99  +
add esp 0Ch +
mov dword_1004038 eax +
cmp dword_100402C ebx +
jnz loc_1002468  +
push eax  +
call ds:exit  +
mov eax [ebp-14h] +
mov ecx [eax] +
mov ecx [ecx] +
mov [ebp-20h] ecx +
push eax  +
push ecx  +
call _XcptFilter  +
pop ecx  +
pop ecx  +
retn   +
mov esp [ebp-18h] +
mov eax [ebp-20h] +
mov dword_1004038 eax +
xor ebx ebx +
cmp dword_100402C ebx +
jnz loc_1002468  +
push eax  +
call ds:_exit  +
cmp dword_100403C ebx +
jnz loc_1002476  +
call ds:_cexit  +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov eax dword_1004038 +
call __SEH_epilog4  +
retn   +
***
mov eax 5A4Dh +
cmp ds:1000000h ax +
jz loc_100249F  +
xor eax eax +
jmp loc_10024EC  +
mov eax ds:100003Ch +
lea eax [eax+1000000h] +
cmp dword ptr [eax] 4550h +
jnz loc_100249B  +
movzx ecx word ptr [eax+18h] +
cmp ecx 10Bh +
jz loc_10024D9  +
cmp ecx 20Bh +
jnz loc_100249B  +
cmp dword ptr [eax+84h] 0Eh +
jbe loc_100249B  +
xor ecx ecx +
cmp [eax+0F8h] ecx +
jmp loc_10024E7  +
cmp dword ptr [eax+74h] 0Eh +
jbe loc_100249B  +
xor ecx ecx +
cmp [eax+0E8h] ecx +
setnz cl  +
mov eax ecx +
push 1  +
mov dword_100402C eax +
call sub_1002852  +
push eax  +
call ds:__set_app_type  +
or dword_1004374 0FFFFFFFFh +
or dword_1004378 0FFFFFFFFh +
pop ecx  +
pop ecx  +
call ds:__p__fmode  +
mov ecx dword_100404C +
mov [eax] ecx +
call ds:__p__commode  +
mov ecx dword_1004048 +
mov [eax] ecx +
call sub_10027E4  +
cmp dword_1004018 0 +
jnz loc_1002545  +
push offset sub_10027E4  +
call ds:__setusermatherr  +
pop ecx  +
call sub_10027CC  +
xor eax eax +
retn   +
***
call sub_1002891  +
jmp sub_100231F  +
***
cmp ecx dword_1004000 +
jnz loc_100256C  +
retn 0  +
jmp loc_1002927  +
***
sub ecx eax +
sbb eax eax +
not eax  +
and ecx eax +
mov eax esp +
and eax 0FFFFF000h +
cmp ecx eax +
jb cs20  +
mov eax ecx +
pop ecx  +
xchg eax esp +
mov eax [eax] +
mov [esp+0] eax +
retn   +
sub eax 1000h +
test [eax] eax +
jmp cs10  +
***
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov eax [eax] +
cmp dword ptr [eax] 0E06D7363h +
jnz loc_10025F8  +
cmp dword ptr [eax+10h] 3 +
jnz loc_10025F8  +
mov eax [eax+14h] +
cmp eax 19930520h +
jz loc_10025F2  +
cmp eax 19930521h +
jz loc_10025F2  +
cmp eax 19930522h +
jz loc_10025F2  +
cmp eax 1994000h +
jnz loc_10025F8  +
call ds:?terminate@@YAXXZ  +
xor eax eax +
pop ebp  +
retn 4  +
***
push (offset dword_10025B8+3)  +
call ds:SetUnhandledExceptionFilter  +
xor eax eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
mov eax 5A4Dh +
cmp [ecx] ax +
jz loc_1002646  +
xor eax eax +
pop ebp  +
retn   +
mov eax [ecx+3Ch] +
add eax ecx +
cmp dword ptr [eax] 4550h +
jnz loc_1002642  +
xor edx edx +
mov ecx 10Bh +
cmp [eax+18h] cx +
setz dl  +
mov eax edx +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [eax+3Ch] +
add ecx eax +
movzx eax word ptr [ecx+14h] +
push ebx  +
push esi  +
movzx esi word ptr [ecx+6] +
xor edx edx +
push edi  +
lea eax [eax+ecx+18h] +
test esi esi +
jbe loc_10026AD  +
mov edi [ebp+arg_4] +
mov ecx [eax+0Ch] +
cmp edi ecx +
jb loc_10026A5  +
mov ebx [eax+8] +
add ebx ecx +
cmp edi ebx +
jb loc_10026AF  +
inc edx  +
add eax 28h +
cmp edx esi +
jb loc_1002695  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
call __SEH_prolog4  +
and [ebp+ms_exc.disabled] 0 +
mov esi 1000000h +
push esi  +
call sub_1002630  +
pop ecx  +
test eax eax +
jz loc_1002716  +
mov eax [ebp+arg_0] +
sub eax esi +
push eax  +
push esi  +
call sub_1002670  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1002716  +
mov eax [eax+24h] +
shr eax 1Fh +
not eax  +
and eax 1 +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
jmp loc_100271F  +
mov eax [ebp-14h] +
mov eax [eax] +
mov eax [eax] +
xor ecx ecx +
cmp eax 0C0000005h +
setz cl  +
mov eax ecx +
retn   +
mov esp [ebp-18h] +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
xor eax eax +
call __SEH_epilog4  +
retn   +
***
mov eax [esp+8+arg_4] +
mov ecx [ebp-10h] +
mov large fs:0 ecx +
pop ecx  +
pop edi  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
push ecx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push offset sub_1002561  +
push offset dword_1004000  +
call _except_handler4_common  +
add esp 18h +
pop ebp  +
retn   +
***
call ds:_controlfp  +
pop ecx  +
pop ecx  +
retn   +
***
retn   +
***
call __SEH_prolog4  +
xor eax eax +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_1002845  +
cmp ecx 0FFFFFFFFh +
jz loc_1002845  +
and [ebp+ms_exc.disabled] eax +
mov edx 5A4Dh +
cmp [ecx] dx +
jnz loc_100283E  +
mov edx [ecx+3Ch] +
test edx edx +
jl loc_100283E  +
cmp edx 10000000h +
jnb loc_100283E  +
lea eax [edx+ecx] +
mov [ebp+var_1C] eax +
cmp dword ptr [eax] 4550h +
jz loc_100283E  +
jmp loc_1002839  +
xor eax eax +
inc eax  +
retn   +
mov esp [ebp-18h] +
xor eax eax +
mov [ebp+var_1C] eax +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
call __SEH_epilog4  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
call ds:GetModuleHandleA  +
test eax eax +
jz loc_1002887  +
push eax  +
call sub_10027EC  +
test eax eax +
jz loc_1002887  +
movzx eax word ptr [eax+5Ch] +
cmp ax 2 +
jnz loc_100287C  +
push 2  +
pop eax  +
pop ebp  +
retn   +
cmp ax 3 +
jnz loc_1002887  +
xor eax eax +
inc eax  +
pop ebp  +
retn   +
mov eax [ebp+arg_0] +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov eax dword_1004000 +
and [ebp+SystemTimeAsFileTime.dwLowDateTime] 0 +
and [ebp+SystemTimeAsFileTime.dwHighDateTime] 0 +
push ebx  +
push edi  +
mov edi 0BB40E64Eh +
mov ebx 0FFFF0000h +
cmp eax edi +
jz loc_10028C3  +
test eax ebx +
jz loc_10028C3  +
not eax  +
mov dword_1004004 eax +
jmp loc_100291E  +
push esi  +
lea eax [ebp+SystemTimeAsFileTime] +
push eax  +
call ds:GetSystemTimeAsFileTime  +
mov esi [ebp+SystemTimeAsFileTime.dwHighDateTime] +
xor esi [ebp+SystemTimeAsFileTime.dwLowDateTime] +
call ds:GetCurrentProcessId  +
xor esi eax +
call ds:GetCurrentThreadId  +
xor esi eax +
call ds:GetTickCount  +
xor esi eax +
lea eax [ebp+PerformanceCount] +
push eax  +
call ds:QueryPerformanceCounter  +
mov eax dword ptr [ebp+PerformanceCount+4] +
xor eax dword ptr [ebp+PerformanceCount] +
xor esi eax +
cmp esi edi +
jz loc_100290A  +
test dword_1004000 ebx +
jnz loc_100290F  +
mov esi 0BB40E64Fh +
mov dword_1004000 esi +
not esi  +
mov dword_1004004 esi +
pop esi  +
pop edi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 328h +
mov dword_1004150 eax +
mov dword_100414C ecx +
mov dword_1004148 edx +
mov dword_1004144 ebx +
mov dword_1004140 esi +
mov dword_100413C edi +
mov word_1004168 ss +
mov word_100415C cs +
mov word_1004138 ds +
mov word_1004134 es +
mov word_1004130 fs +
mov word_100412C gs +
pushf   +
pop dword_1004160  +
mov eax [ebp+0] +
mov dword_1004154 eax +
mov eax [ebp+4] +
mov dword_1004158 eax +
lea eax [ebp+8] +
mov dword_1004164 eax +
mov eax [ebp-320h] +
mov dword_10040A0 10001h +
mov eax dword_1004158 +
mov dword_100405C eax +
mov dword_1004050 0C0000409h +
mov dword_1004054 1 +
mov eax dword_1004000 +
mov [ebp-328h] eax +
mov eax dword_1004004 +
mov [ebp-324h] eax +
push 0  +
call ds:SetUnhandledExceptionFilter  +
push offset ExceptionInfo  +
call ds:UnhandledExceptionFilter  +
push 0C0000409h  +
call ds:GetCurrentProcess  +
push eax  +
call ds:TerminateProcess  +
leave   +
retn   +
***
