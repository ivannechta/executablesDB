jmp loc_4013C2  +
xor eax eax +
mov al byte_4CC07D +
retn   +
***
pusha   +
mov ebx 0BCB05000h +
push ebx  +
push 0BADh  +
retn   +
***
mov ecx 0BCh +
or ecx ecx +
jz locret_40147F  +
cmp dwTlsIndex 0 +
jnb loc_401445  +
mov eax 0FEh +
call sub_40141C  +
mov ecx 0BCh +
push ecx  +
push 8  +
call GetProcessHeap  +
push eax  +
call HeapAlloc  +
or eax eax +
jnz loc_401466  +
mov eax 0FDh +
call sub_40141C  +
push eax  +
push eax  +
push dwTlsIndex  +
call ___CRTL_TLS_SetValue  +
push dwTlsIndex  +
call ___CRTL_TLS_InitThread  +
pop edi  +
retn   +
***
cmp dwTlsIndex 0 +
jb locret_4014D4  +
push dwTlsIndex  +
call ___CRTL_TLS_GetValue  +
or eax eax +
jz locret_4014D4  +
push eax  +
push 8  +
call GetProcessHeap  +
push eax  +
call HeapFree  +
push dwTlsIndex  +
call ___CRTL_TLS_ExitThread  +
retn   +
***
retn   +
***
mov eax dwTlsIndex +
mov edx fs:2Ch +
mov eax [edx+eax*4] +
retn   +
***
mov eax offset unk_4CC0A8 +
call @System@RegisterModule$qqrp17System@TLibModule  +
retn   +
***
mov eax offset unk_4CC0A8 +
call @System@UnregisterModule$qqrp17System@TLibModule  +
mov eax hLibModule +
cmp eax dword_4CC0AC +
jz locret_40152D  +
test eax eax +
jz locret_40152D  +
push eax  +
call FreeLibrary  +
retn   +
***
mov eax [ebp+arg_8] +
mov edx [ebp+arg_0] +
cmp [ebp+arg_4] 0 +
jz loc_40154F  +
mov byte_4EAAE4 1 +
mov byte_4EAAE5 1 +
jmp loc_401564  +
mov ecx off_4EAA68 +
mov [ecx] dl +
mov byte_4EAAE4 dl +
mov byte_4EAAE5 0 +
mov hInstance eax +
mov dword_4CC0AC eax +
xor eax eax +
mov dword_4CC0B0 eax +
xor eax eax +
mov dword_4CC0B4 eax +
mov byte_4EAAE6 1 +
call unknown_libname_563  +
cmp byte_4EAAE4 0 +
jnz loc_4015C9  +
mov eax offset sub_401530 +
call @System@FindHInstance$qqrpv  +
mov dword_4CC0B0 eax +
mov eax offset unk_4CC0A4 +
call @System@FindHInstance$qqrpv  +
mov dword_4CC0B4 eax +
call GetCommandLineA  +
mov edx off_4EAA70 +
mov [edx] eax +
mov al [ebp+arg_C] +
xor al 1 +
mov edx off_4EAA7C +
mov [edx] al +
pop ebp  +
retn   +
***
mov ebx off_4EAA78 +
cmp byte_4EAAE4 0 +
jnz loc_4015F3  +
cmp dword ptr [ebx] 0 +
jz loc_4015F3  +
mov edx [ebx] +
mov eax edx +
xor edx edx +
mov [ebx] edx +
mov esi eax +
call esi  +
cmp dword ptr [ebx] 0 +
jnz loc_4015E2  +
call unknown_libname_44  +
pop esi  +
pop ebx  +
retn   +
***
xor eax eax +
push ebp  +
push offset loc_401621  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
inc dword_4EAAF8  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_401628  +
retn   +
jmp unknown_libname_539  +
jmp locret_401620  +
pop ebp  +
retn   +
***
add esp 0FFFFFFD4h +
mov eax offset stru_4CC100 +
push ebx  +
push esi  +
push edi  +
call @__InitExceptBlockLDTC  +
mov [ebp+var_1C] 8 +
mov edx off_4EA6C8 +
mov eax [edx] +
call sub_46C6F0  +
mov [ebp+var_1C] 14h +
mov edx offset aWingraph32 +
lea eax [ebp+var_8] +
call sub_4CA41C  +
inc [ebp+var_10]  +
mov edx [eax] +
mov ecx off_4EA6C8 +
mov eax [ecx] +
call @Forms@TApplication@SetTitle$qqrx17System@AnsiString  +
dec [ebp+var_10]  +
lea eax [ebp+var_8] +
mov edx 2 +
call sub_4CA490  +
mov ecx off_4EA6C8 +
mov eax [ecx] +
mov ecx off_4EA6B8 +
mov edx off_4CC698 +
call sub_46C708  +
mov eax off_4EA6C8 +
mov eax [eax] +
mov ecx off_4EA6BC +
mov edx off_4E5B24 +
call sub_46C708  +
mov eax off_4EA6C8 +
mov eax [eax] +
mov ecx off_4EA6C0 +
mov edx off_4E5CE8 +
call sub_46C708  +
mov eax off_4EA6C8 +
mov eax [eax] +
mov ecx off_4EA6C4 +
mov edx off_4E5E84 +
call sub_46C708  +
mov eax off_4EA6C8 +
mov eax [eax] +
call @Forms@TApplication@Run$qqrv  +
mov [ebp+var_1C] 0 +
jmp loc_40171F  +
mov edx off_4EA6C8 +
mov eax [edx] +
mov edx [ebp-4] +
call sub_46CA80  +
mov word ptr [ebp-1Ch] 10h +
call @_CatchCleanup$qv  +
xor eax eax +
mov edx [ebp+var_2C] +
mov large fs:0 edx +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 10h  +
***
add esp 0FFFFFFD8h +
push ebx  +
call __BeforeDestruction  +
mov ebx edx +
mov [ebp+var_4] eax +
mov eax offset stru_4CC130 +
call @__InitExceptBlockLDTC  +
mov [ebp+var_C] 2 +
test bl bl +
jl loc_40184C  +
mov [ebp+var_18] 8 +
dec [ebp+var_C]  +
mov edx 2 +
mov eax [ebp+var_4] +
add eax 4 +
call sub_4CA490  +
dec [ebp+var_C]  +
xor edx edx +
mov eax [ebp+var_4] +
call sub_4BA7FC  +
mov ecx [ebp+var_28] +
mov large fs:0 ecx +
test bl bl +
jle loc_401862  +
mov eax [ebp+var_4] +
call __ClassDestroy  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
add esp 0FFFFFF88h +
mov eax offset stru_4CC154 +
call @__InitExceptBlockLDTC  +
cmp dword_4CDD84 0 +
jz loc_401908  +
mov edx dword_4EADBC +
push edx  +
mov ecx dword_4EADB8 +
push ecx  +
push offset aDD  +
push 50h  +
lea eax [ebp+buffer] +
push eax  +
call _snprintf  +
add esp 14h +
jmp loc_40192D  +
mov edx dword_4EB62C +
neg edx  +
push edx  +
mov ecx dword_4EB624 +
neg ecx  +
push ecx  +
push offset aDD_0  +
push 50h  +
lea eax [ebp+buffer] +
push eax  +
call _snprintf  +
add esp 14h +
mov [ebp+var_18] 8 +
lea edx [ebp+buffer] +
lea eax [ebp+var_4] +
call sub_4CA41C  +
inc [ebp+var_C]  +
mov ecx _Form1 +
mov edx [eax] +
push edx  +
mov edx 1 +
mov eax [ecx+404h] +
mov eax [eax+208h] +
call sub_486BF4  +
pop edx  +
call unknown_libname_331  +
dec [ebp+var_C]  +
lea eax [ebp+var_4] +
mov edx 2 +
call sub_4CA490  +
mov eax [ebp+var_28] +
mov large fs:0 eax +
mov esp ebp +
pop ebp  +
retn   +
***
add esp 0FFFFFF7Ch +
mov eax offset stru_4CC178 +
call @__InitExceptBlockLDTC  +
cmp dword_4CDD84 0 +
jz loc_4019AB  +
fild  dword_4EADC0 +
fstp  [ebp+var_30] +
jmp loc_4019D5  +
fild  dword_4EBDA4 +
fmul  ds:flt_401A48 +
fstp  [ebp+var_30] +
mov eax dword_4EBDA0 +
test eax eax +
jz loc_4019D5  +
mov [ebp+var_84] eax +
fild  [ebp+var_84] +
fdivr  [ebp+var_30] +
fstp  [ebp+var_30] +
push dword ptr [ebp+var_30+4]  +
push dword ptr [ebp+var_30]  +
push offset a5_2f  +
push 50h  +
lea ecx [ebp+buffer] +
push ecx  +
call _snprintf  +
mov [ebp+var_18] 8 +
add esp 14h +
lea edx [ebp+buffer] +
lea eax [ebp+var_4] +
call sub_4CA41C  +
inc [ebp+var_C]  +
mov ecx [eax] +
mov eax _Form1 +
push ecx  +
mov edx [eax+404h] +
mov eax [edx+208h] +
xor edx edx +
call sub_486BF4  +
pop edx  +
call unknown_libname_331  +
dec [ebp+var_C]  +
lea eax [ebp+var_4] +
mov edx 2 +
call sub_4CA490  +
call sub_4018CC  +
mov eax [ebp+var_28] +
mov large fs:0 eax +
mov esp ebp +
pop ebp  +
retn   +
***
mov eax [ebp+arg_4] +
push eax  +
mov edx [ebp+arg_0] +
push edx  +
call sub_41EB14  +
add esp 8 +
call sub_4018CC  +
pop ebp  +
retn   +
***
mov eax [ebp+arg_0] +
cmp eax 100h +
jge loc_401A9A  +
xor edx edx +
xor ecx ecx +
mov cl byte_4EB418[eax] +
mov dl byte_4EB318[eax] +
movzx eax byte_4EB518[eax] +
shl ecx 8 +
shl eax 10h +
add edx ecx +
add edx eax +
mov eax edx +
pop ebp  +
retn   +
mov eax 0FFh +
pop ebp  +
retn   +
***
add esp 0FFFFFBC8h +
mov eax offset stru_4CC1D8 +
push ebx  +
push esi  +
push edi  +
call @__InitExceptBlockLDTC  +
cmp byte_4CC194 0 +
jz loc_401AD4  +
mov edx [ebp+var_34] +
mov large fs:0 edx +
mov eax edx +
jmp loc_401CCF  +
mov ecx _Form1 +
xor edx edx +
mov eax [ecx+300h] +
call @Controls@TControl@SetHeight$qqri  +
xor edx edx +
mov eax _Form1 +
call sub_402530  +
mov byte_4CC194 1 +
push offset stream  +
push offset mode  +
push offset unk_4EAB0C  +
call sub_4021C0  +
pop ecx  +
push eax  +
call _freopen  +
add esp 0Ch +
push offset stru_4E782C  +
push offset aW_1  +
push offset unk_4EAC14  +
call sub_4021C0  +
pop ecx  +
push eax  +
call _freopen  +
add esp 0Ch +
call @System@ParamCount$qqrv  +
mov edi eax +
inc edi  +
lea eax [edi+1] +
shl eax 2 +
push eax  +
call @$bnwa$qui  +
pop ecx  +
mov [ebp+var_38] eax +
xor ebx ebx +
mov eax [ebp+var_38] +
mov esi eax +
cmp edi ebx +
jle loc_401BA2  +
mov [ebp+var_24] 8 +
xor eax eax +
lea edx [ebp+var_4] +
mov [ebp+var_4] eax +
mov eax ebx +
inc [ebp+var_18]  +
call @System@ParamStr$qqri  +
cmp [ebp+var_4] 0 +
jz loc_401B7C  +
mov edx [ebp+var_4] +
jmp loc_401B81  +
mov edx offset byte_4CC309 +
push edx  +
call _strdup  +
pop ecx  +
mov [esi] eax +
dec [ebp+var_18]  +
lea eax [ebp+var_4] +
mov edx 2 +
call sub_4CA490  +
inc ebx  +
add esi 4 +
cmp edi ebx +
jg loc_401B59  +
mov eax [ebp+var_38] +
xor ecx ecx +
mov [eax+edi*4] ecx +
mov eax [ebp+var_38] +
push eax  +
push edi  +
call sub_42A18C  +
add esp 8 +
call sub_42AF20  +
call sub_401984  +
mov edx dword_4EBD58 +
push edx  +
push offset aWingraph32S  +
push 400h  +
lea ecx [ebp+buffer] +
push ecx  +
call _snprintf  +
mov [ebp+var_24] 14h +
add esp 10h +
lea edx [ebp+buffer] +
lea eax [ebp+var_8] +
call sub_4CA41C  +
inc [ebp+var_18]  +
mov edx [eax] +
mov eax _Form1 +
call @Controls@TControl@SetText$qqrx17System@AnsiString  +
dec [ebp+var_18]  +
lea eax [ebp+var_8] +
mov edx 2 +
call sub_4CA490  +
mov [ebp+var_24] 20h +
lea edx [ebp+buffer] +
lea eax [ebp+var_C] +
call sub_4CA41C  +
inc [ebp+var_18]  +
mov edx [eax] +
mov eax off_4EA6C8 +
mov eax [eax] +
call @Forms@TApplication@SetTitle$qqrx17System@AnsiString  +
dec [ebp+var_18]  +
lea eax [ebp+var_C] +
mov edx 2 +
call sub_4CA490  +
call sub_43FA78  +
mov ecx dword_4EC364 +
push ecx  +
mov eax dword_4EC3BC +
push eax  +
mov edx dword_4EC3B8 +
push edx  +
push offset aDNodesDEdgeSeg  +
push 400h  +
lea ecx [ebp+buffer] +
push ecx  +
call _snprintf  +
mov [ebp+var_24] 2Ch +
add esp 18h +
lea edx [ebp+buffer] +
lea eax [ebp+var_10] +
call sub_4CA41C  +
inc [ebp+var_18]  +
mov ecx [eax] +
mov eax _Form1 +
push ecx  +
mov edx [eax+404h] +
mov eax [edx+208h] +
mov edx 2 +
call sub_486BF4  +
pop edx  +
call unknown_libname_331  +
dec [ebp+var_18]  +
lea eax [ebp+var_10] +
mov edx 2 +
call sub_4CA490  +
mov eax [ebp+var_34] +
mov large fs:0 eax +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
push ebx  +
mov edx [ebp+arg_4] +
xor eax eax +
movsx ecx [ebp+arg_0] +
cmp ecx 8 +
ja loc_401D5E  +
jmp ds:off_401CF1[ecx*4]  +
mov eax 0FFFFFFECh +
jmp loc_401D5E  +
mov eax 14h +
jmp loc_401D5E  +
mov eax 0FFFFFF9Ch +
jmp loc_401D5E  +
mov eax 64h +
jmp loc_401D5E  +
mov ecx [edx] +
mov eax dword_4CC210 +
sub eax ecx +
mov dword_4CC210 ecx +
mov ebx eax +
neg eax  +
shl eax 2 +
sub eax ebx +
shl eax 2 +
jmp loc_401D5E  +
mov dword_4CC210 32h +
mov dword ptr [edx] 32h +
mov dword ptr [edx] 32h +
pop ebx  +
pop ebp  +
retn   +
***
add esp 0FFFFFFB4h +
add esp 0FFFFFFF8h +
add esp 0FFFFFFDCh +
mov eax offset stru_4CC2A8 +
call @__InitExceptBlockLDTC  +
mov [ebp+var_14] 8 +
mov edx offset aSoftwareDatare +
mov eax offset dword_4CC214 +
call sub_4CA41C  +
inc [ebp+var_8]  +
mov edx offset aWidth +
mov eax offset dword_4CC218 +
call sub_4CA41C  +
inc [ebp+var_8]  +
mov edx offset aHeight +
mov eax offset dword_4CC21C +
call sub_4CA41C  +
inc [ebp+var_8]  +
mov edx offset aStickmouse +
mov eax offset dword_4CC220 +
call sub_4CA41C  +
inc [ebp+var_8]  +
mov edx offset aEdgelabels +
mov eax offset dword_4CC224 +
call sub_4CA41C  +
inc [ebp+var_8]  +
mov edx [ebp+var_24] +
mov large fs:0 edx +
mov esp ebp +
pop ebp  +
retn   +
***
add esp 0FFFFFFDCh +
add esp 0FFFFFFD8h +
test dl dl +
push ebx  +
push esi  +
mov [ebp+var_8] dl +
jle loc_401FB4  +
call __ClassCreate  +
mov esi ecx +
mov ebx edx +
mov [ebp+var_4] eax +
mov eax offset stru_4CC474 +
call @__InitExceptBlockLDTC  +
mov [ebp+var_18] 8 +
mov ecx esi +
xor edx edx +
mov eax [ebp+var_4] +
call sub_401FF8  +
add [ebp+var_C] 10h +
mov edx [ebp+var_28] +
mov large fs:0 edx +
mov eax [ebp+var_4] +
test bl bl +
jz loc_401FF1  +
call __AfterConstruction  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
add esp 0FFFFFFD8h +
test dl dl +
push ebx  +
push esi  +
mov [ebp+var_8] dl +
jle loc_40200C  +
call __ClassCreate  +
mov esi ecx +
mov ebx edx +
mov [ebp+var_4] eax +
mov eax offset stru_4CC660 +
call @__InitExceptBlockLDTC  +
mov [ebp+var_18] 8 +
mov ecx esi +
xor edx edx +
mov eax [ebp+var_4] +
call @Forms@TCustomForm@$bctr$qqrp18Classes@TComponent  +
add [ebp+var_C] 0Fh +
mov edx [ebp+var_28] +
mov large fs:0 edx +
mov eax [ebp+var_4] +
test bl bl +
jz loc_402049  +
call __AfterConstruction  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
push ebx  +
push esi  +
push edi  +
mov eax dword_4EAB04 +
mov edi [ebp+arg_0] +
mov ebx [ebp+arg_8] +
add ebx eax +
add edi eax +
mov eax dword_4EAB08 +
mov esi [ebp+arg_C] +
add [ebp+arg_4] eax +
add esi eax +
mov edx [ebp+arg_10] +
push edx  +
call sub_401A68  +
pop ecx  +
mov edx eax +
mov eax dword_4CC18C +
mov eax [eax+10h] +
call @TPen@SetColor$qqr6TColor  +
mov ecx [ebp+arg_4] +
mov edx edi +
mov eax dword_4CC18C +
call @Graphics@TCanvas@MoveTo$qqrii  +
mov ecx esi +
mov edx ebx +
mov eax dword_4CC18C +
call @Graphics@TCanvas@LineTo$qqrii  +
mov edi dword_4CC18C +
mov eax [edi+10h] +
call sub_45AC2C  +
push eax  +
mov ecx esi +
mov edx ebx +
mov eax edi +
call @Graphics@TCanvas@SetPixel$qqrii15Graphics@TColor  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
push ebx  +
push esi  +
push edi  +
mov esi [ebp+arg_4] +
mov ebx [ebp+arg_0] +
add ebx dword_4EAB04 +
add esi dword_4EAB08 +
mov eax [ebp+arg_10] +
push eax  +
call sub_401A68  +
pop ecx  +
mov edx eax +
mov ecx dword_4CC18C +
mov eax [ecx+10h] +
call @TPen@SetColor$qqr6TColor  +
mov edi dword_4CC18C +
mov eax [edi+10h] +
call sub_45AC2C  +
mov edx eax +
mov eax [edi+14h] +
call @Graphics@TBrush@SetColor$qqr15Graphics@TColor  +
mov edx [ebp+arg_8] +
mov eax dword_4CC18C +
add edx ebx +
push edx  +
mov edx ebx +
mov ecx [ebp+arg_C] +
add ecx esi +
push ecx  +
mov ecx esi +
call unknown_libname_153  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
push ebx  +
push esi  +
push edi  +
mov ebx [ebp+arg_4] +
mov esi [ebp+arg_0] +
xor edx edx +
mov eax esi +
cmp ebx edx +
jle loc_402179  +
mov ecx dword_4EAB04 +
add [eax] ecx +
mov ecx dword_4EAB08 +
add [eax+4] ecx +
inc edx  +
add eax 8 +
cmp ebx edx +
jg loc_402160  +
mov eax [ebp+arg_8] +
push eax  +
call sub_401A68  +
pop ecx  +
mov edx eax +
mov eax dword_4CC18C +
mov eax [eax+10h] +
call @TPen@SetColor$qqr6TColor  +
mov edi dword_4CC18C +
mov eax [edi+10h] +
call sub_45AC2C  +
mov edx eax +
mov eax [edi+14h] +
call @Graphics@TBrush@SetColor$qqr15Graphics@TColor  +
lea ecx [ebx-1] +
mov edx esi +
mov eax dword_4CC18C +
call unknown_libname_152  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
add esp 0FFFFFFECh +
push ebx  +
push esi  +
push edi  +
mov esi [ebp+arg_0] +
mov edi offset unk_4CC190 +
push offset name  +
call _getenv  +
pop ecx  +
mov ebx eax +
test ebx ebx +
jnz loc_4021F8  +
push offset aTmp  +
call _getenv  +
pop ecx  +
mov ebx eax +
test ebx ebx +
jnz loc_4021F8  +
mov ebx offset aCTemp +
cmp dword ptr [edi] 0FFFFFFFFh +
jnz loc_402213  +
push 0  +
call _time  +
shl eax 3 +
pop ecx  +
lea eax [eax+eax*4] +
lea eax [eax+eax*4] +
lea eax [eax+eax*4] +
mov [edi] eax +
push ebx  +
push esi  +
call j___stpcpy  +
add esp 8 +
mov ebx eax +
movsx eax byte ptr [ebx-1] +
cmp eax 5Ch +
jz loc_402231  +
cmp eax 2Fh +
jz loc_402231  +
mov byte ptr [ebx] 5Ch +
inc ebx  +
push esi  +
push edi  +
mov esi offset aVcg12345_tmp +
mov edi ebx +
mov eax edi +
mov ecx 3 +
movs   +
movs   +
pop edi  +
pop esi  +
push 0  +
push esi  +
call j__strchr  +
add esp 8 +
mov ebx eax +
add ebx 0FFFFFFF7h +
mov eax [edi] +
push eax  +
push offset a05u  +
push 14h  +
lea edx [ebp+buffer] +
push edx  +
call _snprintf  +
add esp 10h +
lea ecx [ebp+buffer] +
push ecx  +
call _strlen  +
pop ecx  +
lea edx [ebp+var_1A+1] +
add edx eax +
mov eax edx +
mov cl [eax] +
mov [ebx] cl +
mov dl [eax+1] +
mov [ebx+1] dl +
mov cl [eax+2] +
mov [ebx+2] cl +
mov dl [eax+3] +
mov [ebx+3] dl +
mov al [eax+4] +
mov [ebx+4] al +
push 0  +
push esi  +
call j____access  +
add esp 8 +
test eax eax +
jnz loc_4022AC  +
inc dword ptr [edi]  +
jmp loc_402256  +
mov eax esi +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
add esp 0FFFFFFC8h +
mov eax offset stru_4CC4C0 +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
call @__InitExceptBlockLDTC  +
push edi  +
call _ftell  +
pop ecx  +
mov esi eax +
mov ebx esi +
sub ebx [ebp+offset] +
test ebx ebx +
jle loc_402432  +
push 0  +
mov eax [ebp+offset] +
push eax  +
push edi  +
call _fseek  +
add esp 0Ch +
lea edx [ebx+1] +
push edx  +
call @$bnwa$qui  +
pop ecx  +
mov [ebp+ptr] eax +
push edi  +
push 1  +
push ebx  +
mov ecx [ebp+ptr] +
push ecx  +
call _fread  +
mov eax [ebp+ptr] +
xor edx edx +
add esp 10h +
mov byte ptr [eax+ebx] 0 +
mov [ebp+var_24] 8 +
mov [ebp+var_4] edx +
mov eax _Form1 +
inc [ebp+var_18]  +
lea edx [ebp+var_4] +
mov ebx [eax+408h] +
mov eax ebx +
call @TControl@GetText$qqrv  +
lea edx [ebp+var_4] +
push edx  +
lea eax [ebp+var_8] +
mov edx [ebp+ptr] +
call sub_4CA41C  +
inc [ebp+var_18]  +
xor eax eax +
mov [ebp+var_C] eax +
lea edx [ebp+var_8] +
inc [ebp+var_18]  +
lea ecx [ebp+var_C] +
pop eax  +
call @System@AnsiString@$badd$xqqrrx17System@AnsiString  +
lea edx [ebp+var_C] +
mov eax ebx +
mov edx [edx] +
call @Controls@TControl@SetText$qqrx17System@AnsiString  +
dec [ebp+var_18]  +
lea eax [ebp+var_C] +
mov edx 2 +
call sub_4CA490  +
dec [ebp+var_18]  +
lea eax [ebp+var_8] +
mov edx 2 +
call sub_4CA490  +
dec [ebp+var_18]  +
lea eax [ebp+var_4] +
mov edx 2 +
call sub_4CA490  +
mov [ebp+var_24] 14h +
xor ecx ecx +
mov eax _Form1 +
mov [ebp+var_10] ecx +
lea edx [ebp+var_10] +
inc [ebp+var_18]  +
mov ebx [eax+408h] +
mov eax ebx +
call @TControl@GetText$qqrv  +
cmp [ebp+var_10] 0 +
jz loc_4023CD  +
mov edx [ebp+var_10] +
mov edx [edx-4] +
jmp loc_4023CF  +
xor edx edx +
add edx 0FFFFFFFEh +
mov eax ebx +
mov ecx [eax] +
call dword ptr [ecx+0D8h]  +
dec [ebp+var_18]  +
lea eax [ebp+var_10] +
mov edx 2 +
call sub_4CA490  +
mov ecx _Form1 +
push 0  +
push 0  +
push 0B7h  +
mov eax [ecx+408h] +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call SendMessageA  +
mov edx [ebp+ptr] +
push edx  +
call __rtl_close  +
pop ecx  +
mov ecx _Form1 +
mov eax [ecx+300h] +
cmp dword ptr [eax+4Ch] 0 +
jnz loc_402432  +
mov edx 64h +
call @Controls@TControl@SetHeight$qqri  +
mov eax esi +
mov edx [ebp+var_34] +
mov large fs:0 edx +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
mov eax offset +
push eax  +
push offset stru_4E782C  +
call sub_4022B8  +
add esp 8 +
mov offset eax +
mov edx dword_4EAC10 +
push edx  +
push offset stream  +
call sub_4022B8  +
add esp 8 +
mov dword_4EAC10 eax +
mov eax _Form1 +
mov edx [eax] +
call dword ptr [edx+88h]  +
retn   +
***
pop ecx  +
push offset unk_4EAB0C  +
call j_unknown_libname_18  +
pop ecx  +
push offset stru_4E782C  +
call _fclose  +
pop ecx  +
push offset unk_4EAC14  +
call j_unknown_libname_18  +
pop ecx  +
retn   +
***
mov eax ebx +
call sub_4669EC  +
mov dword_4CC18C eax +
mov byte ptr [ebx+1F8h] 1 +
mov dx 6Dh +
mov eax [ebx+30Ch] +
call @Actnlist@TCustomAction@SetShortCut$qqrus  +
mov dx 6Bh +
mov eax [ebx+308h] +
call @Actnlist@TCustomAction@SetShortCut$qqrus  +
push ebx  +
call sub_402D60  +
pop ecx  +
call sub_4018CC  +
mov dl 1 +
mov eax [ebx+40Ch] +
call unknown_libname_212  +
pop ebx  +
retn   +
***
cmp byte_4CC194 0 +
jz locret_40252D  +
push offset sub_40214C  +
push offset sub_4020E0  +
push offset sub_402068  +
call sub_42AE84  +
add esp 0Ch +
call sub_402448  +
retn   +
***
mov ebx eax +
mov eax ebx +
call @Controls@TControl@GetClientWidth$qqrv  +
mov esi eax +
mov eax [ebx+378h] +
sub esi [eax+48h] +
mov eax ebx +
add esi 0FFFFFFFCh +
call @Controls@TControl@GetClientHeight$qqrv  +
mov edx [ebx+320h] +
mov ecx [ebx+404h] +
sub eax [edx+4Ch] +
mov edx [ebx+374h] +
sub eax [ecx+4Ch] +
mov ecx [ebx+300h] +
sub eax [edx+4Ch] +
sub eax [ecx+4Ch] +
mov dword_4EAB04 2 +
mov edx _Form1 +
add eax 0FFFFFFFCh +
mov ecx [edx+320h] +
mov edx [ecx+4Ch] +
push eax  +
add edx 2 +
push esi  +
mov dword_4EAB08 edx +
call sub_42AE2C  +
add esp 8 +
cmp byte_4CC194 0 +
jz loc_4025B3  +
mov eax ebx +
mov ecx [eax] +
call dword ptr [ecx+7Ch]  +
pop esi  +
pop ebx  +
retn   +
***
call sub_42AEA8  +
mov eax ebx +
mov edx [eax] +
call dword ptr [edx+7Ch]  +
pop ebx  +
retn   +
***
lea eax [ebp+arglist] +
add esp 0FFFFFFD8h +
mov eax offset stru_4CC4E0 +
push ebx  +
push esi  +
push edi  +
mov ebx [ebp+arg_0] +
call @__InitExceptBlockLDTC  +
mov eax ebx +
call @Controls@TControl@BringToFront$qqrv  +
mov ecx ebx +
mov dl 1 +
mov eax dword ptr ds:loc_46DED6+2 +
call sub_402738  +
mov esi eax +
mov edx ebx +
mov eax esi +
mov ecx [eax] +
call dword ptr [ecx+68h]  +
mov dl 5 +
mov eax esi +
call @Controls@TControl@SetAlign$qqr15Controls@TAlign  +
mov ecx esi +
mov dl 1 +
mov eax ds:off_44BE10 +
call @Stdctrls@TButton@$bctr$qqrp18Classes@TComponent  +
mov edi eax +
mov edx esi +
mov eax edi +
mov ecx [eax] +
call dword ptr [ecx+68h]  +
mov edx [ebx+48h] +
sub edx [edi+48h] +
sar edx 1 +
jns loc_40265D  +
adc edx 0 +
mov eax edi +
call @Controls@TControl@SetLeft$qqri  +
mov edx [ebx+4Ch] +
sub edx [edi+4Ch] +
sar edx 1 +
jns loc_402671  +
adc edx 0 +
mov eax edi +
call @Controls@TControl@SetTop$qqri  +
push 1  +
push 0  +
lea ecx [ebp+s] +
push ecx  +
call _memset  +
or byte ptr [ebp+s] 4 +
add esp 0Ch +
lea eax [ebp+s] +
or byte ptr [ebp+s] 8 +
mov dl [eax] +
mov eax edi +
call @Controls@TControl@SetAnchors$qqr48System@_Set$t20Controls@TAnchorKind$iuc$0$iuc$3_  +
mov edx [ebx+304h] +
mov eax edi +
call @Controls@TControl@SetAction$qqrp20Classes@TBasicAction  +
xor esi esi +
jmp loc_4026C2  +
mov edx esi +
mov eax [ebx+2F8h] +
call unknown_libname_565  +
xor edx edx +
call @Actnlist@TCustomAction@SetEnabled$qqro  +
inc esi  +
mov eax [ebx+2F8h] +
call sub_448C68  +
cmp esi eax +
jl loc_4026AD  +
mov dl 1 +
mov eax [ebx+304h] +
call @Actnlist@TCustomAction@SetEnabled$qqro  +
mov dl 1 +
mov eax [ebx+3E8h] +
call @Actnlist@TCustomAction@SetEnabled$qqro  +
mov dl 1 +
mov eax [ebx+3DCh] +
call @Actnlist@TCustomAction@SetEnabled$qqro  +
mov eax edi +
mov edx [eax] +
call dword ptr [edx+0C0h]  +
mov ecx off_4EA6C8 +
mov eax [ecx] +
call @Forms@TApplication@HandleMessage$qqrv  +
mov edx off_4EA6C8 +
mov ecx [edx] +
cmp byte ptr [ecx+9Ch] 0 +
jz loc_402702  +
call unknown_libname_1  +
push 0FFFFFFFFh  +
call _exit  +
pop ecx  +
jmp loc_402702  +
***
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
add esp 0FFFFFFD8h +
test dl dl +
push ebx  +
push esi  +
mov [ebp+var_8] dl +
jle loc_40274C  +
call __ClassCreate  +
mov esi ecx +
mov ebx edx +
mov [ebp+var_4] eax +
mov eax offset stru_4CC684 +
call @__InitExceptBlockLDTC  +
mov [ebp+var_18] 8 +
mov ecx esi +
xor edx edx +
mov eax [ebp+var_4] +
call @Extctrls@TCustomPanel@$bctr$qqrp18Classes@TComponent  +
add [ebp+var_C] 0Ch +
mov edx [ebp+var_28] +
mov large fs:0 edx +
mov eax [ebp+var_4] +
test bl bl +
jz loc_402789  +
call __AfterConstruction  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
call unknown_libname_1  +
push ebx  +
call sub_402FE4  +
pop ecx  +
pop ebx  +
retn   +
***
call unknown_libname_1  +
push 0FFFFFFFFh  +
call _exit  +
***
pop ecx  +
retn   +
***
push 2  +
push 3  +
call sub_41E828  +
add esp 8 +
call sub_401984  +
mov eax ebx +
mov edx [eax] +
call dword ptr [edx+7Ch]  +
pop ebx  +
retn   +
***
push 3  +
push 2  +
call sub_41E828  +
add esp 8 +
call sub_401984  +
mov eax ebx +
mov edx [eax] +
call dword ptr [edx+7Ch]  +
pop ebx  +
retn   +
***
push ebx  +
mov eax [eax+3D4h] +
cmp byte ptr [eax+69h] 0 +
jnz loc_4028BA  +
mov edx off_4EA6CC +
mov eax [edx] +
xor edx edx +
call @Forms@TScreen@SetCursor$qqr16Controls@TCursor  +
pop ebp  +
retn 0Ch  +
***
push ecx  +
push 1  +
push 1  +
call sub_41E710  +
add esp 8 +
call sub_401984  +
mov eax ebx +
mov edx [eax] +
call dword ptr [edx+7Ch]  +
pop ebx  +
retn   +
***
call sub_42AF20  +
call sub_401984  +
mov eax ebx +
mov edx [eax] +
call dword ptr [edx+7Ch]  +
pop ebx  +
retn   +
***
call sub_41E948  +
mov eax ebx +
mov edx [eax] +
call dword ptr [edx+7Ch]  +
call sub_4018CC  +
pop ebx  +
retn   +
***
push ebx  +
push esi  +
mov esi ecx +
mov ebx eax +
movzx eax word ptr [esi] +
add eax 0FFFFFFDFh +
cmp eax 7 +
ja loc_402AA5  +
jmp ds:off_40298F[eax*4]  +
test [ebp+arg_0] 4 +
setnz dl  +
and edx 1 +
test dl dl +
jz loc_4029CE  +
push 0  +
push 0FFFFFF9Ch  +
call sub_401A4C  +
add esp 8 +
jmp loc_402A99  +
push 0  +
push 0FFFFFFECh  +
call sub_401A4C  +
add esp 8 +
jmp loc_402A99  +
test [ebp+arg_0] 4 +
setnz cl  +
and ecx 1 +
test cl cl +
jz loc_4029FE  +
push 0  +
push 64h  +
call sub_401A4C  +
add esp 8 +
jmp loc_402A99  +
push 0  +
push 14h  +
call sub_401A4C  +
add esp 8 +
jmp loc_402A99  +
test [ebp+arg_0] 4 +
setnz al  +
and eax 1 +
test al al +
jz loc_402A2B  +
push 0FFFFFF9Ch  +
push 0  +
call sub_401A4C  +
add esp 8 +
jmp loc_402A99  +
push 0FFFFFFECh  +
push 0  +
call sub_401A4C  +
add esp 8 +
jmp loc_402A99  +
test [ebp+arg_0] 4 +
setnz dl  +
and edx 1 +
test dl dl +
jz loc_402A55  +
push 64h  +
push 0  +
call sub_401A4C  +
add esp 8 +
jmp loc_402A99  +
push 14h  +
push 0  +
call sub_401A4C  +
add esp 8 +
jmp loc_402A99  +
mov eax ebx +
call @Controls@TControl@GetClientHeight$qqrv  +
neg eax  +
sar eax 1 +
jns loc_402A73  +
adc eax 0 +
push eax  +
push 0  +
call sub_401A4C  +
add esp 8 +
jmp loc_402A99  +
mov eax ebx +
call @Controls@TControl@GetClientHeight$qqrv  +
sar eax 1 +
jns loc_402A8E  +
adc eax 0 +
push eax  +
push 0  +
call sub_401A4C  +
add esp 8 +
mov word ptr [esi] 0 +
mov eax ebx +
mov edx [eax] +
call dword ptr [edx+7Ch]  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
push ebx  +
mov ebx eax +
mov eax [ebp+arg_0] +
push eax  +
push ecx  +
call sub_401CD8  +
add esp 8 +
test eax eax +
jz loc_402AD5  +
push eax  +
push 0  +
call sub_401A4C  +
add esp 8 +
mov eax ebx +
mov edx [eax] +
call dword ptr [edx+7Ch]  +
pop ebx  +
pop ebp  +
retn 4  +
***
push ebx  +
mov ebx eax +
mov eax [ebp+arg_0] +
push eax  +
push ecx  +
call sub_401CD8  +
add esp 8 +
test eax eax +
jz loc_402B05  +
push 0  +
push eax  +
call sub_401A4C  +
add esp 8 +
mov eax ebx +
mov edx [eax] +
call dword ptr [edx+7Ch]  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov dl 1 +
mov eax [ebx+31Ch] +
call @Actnlist@TCustomAction@SetChecked$qqro  +
xor edx edx +
mov eax [ebx+37Ch] +
call @Actnlist@TCustomAction@SetChecked$qqro  +
xor edx edx +
mov eax [ebx+380h] +
call @Actnlist@TCustomAction@SetChecked$qqro  +
xor edx edx +
mov eax [ebx+384h] +
call @Actnlist@TCustomAction@SetChecked$qqro  +
xor edx edx +
mov eax [ebx+388h] +
call @Actnlist@TCustomAction@SetChecked$qqro  +
push 0  +
call sub_42AED4  +
pop ecx  +
call sub_401984  +
mov eax ebx +
mov edx [eax] +
call dword ptr [edx+7Ch]  +
pop ebx  +
retn   +
***
xor edx edx +
mov eax [ebx+31Ch] +
call @Actnlist@TCustomAction@SetChecked$qqro  +
mov dl 1 +
mov eax [ebx+37Ch] +
call @Actnlist@TCustomAction@SetChecked$qqro  +
xor edx edx +
mov eax [ebx+380h] +
call @Actnlist@TCustomAction@SetChecked$qqro  +
xor edx edx +
mov eax [ebx+384h] +
call @Actnlist@TCustomAction@SetChecked$qqro  +
xor edx edx +
mov eax [ebx+388h] +
call @Actnlist@TCustomAction@SetChecked$qqro  +
push 1  +
call sub_42AED4  +
pop ecx  +
call sub_401984  +
mov eax ebx +
mov edx [eax] +
call dword ptr [edx+7Ch]  +
pop ebx  +
retn   +
***
xor edx edx +
mov eax [ebx+31Ch] +
call @Actnlist@TCustomAction@SetChecked$qqro  +
xor edx edx +
mov eax [ebx+37Ch] +
call @Actnlist@TCustomAction@SetChecked$qqro  +
mov dl 1 +
mov eax [ebx+380h] +
call @Actnlist@TCustomAction@SetChecked$qqro  +
xor edx edx +
mov eax [ebx+384h] +
call @Actnlist@TCustomAction@SetChecked$qqro  +
xor edx edx +
mov eax [ebx+388h] +
call @Actnlist@TCustomAction@SetChecked$qqro  +
push 2  +
call sub_42AED4  +
pop ecx  +
call sub_401984  +
mov eax ebx +
mov edx [eax] +
call dword ptr [edx+7Ch]  +
pop ebx  +
retn   +
***
xor edx edx +
mov eax [ebx+31Ch] +
call @Actnlist@TCustomAction@SetChecked$qqro  +
xor edx edx +
mov eax [ebx+37Ch] +
call @Actnlist@TCustomAction@SetChecked$qqro  +
xor edx edx +
mov eax [ebx+380h] +
call @Actnlist@TCustomAction@SetChecked$qqro  +
mov dl 1 +
mov eax [ebx+384h] +
call @Actnlist@TCustomAction@SetChecked$qqro  +
xor edx edx +
mov eax [ebx+388h] +
call @Actnlist@TCustomAction@SetChecked$qqro  +
push 3  +
call sub_42AED4  +
pop ecx  +
call sub_401984  +
mov eax ebx +
mov edx [eax] +
call dword ptr [edx+7Ch]  +
pop ebx  +
retn   +
***
xor edx edx +
mov eax [ebx+31Ch] +
call @Actnlist@TCustomAction@SetChecked$qqro  +
xor edx edx +
mov eax [ebx+37Ch] +
call @Actnlist@TCustomAction@SetChecked$qqro  +
xor edx edx +
mov eax [ebx+380h] +
call @Actnlist@TCustomAction@SetChecked$qqro  +
xor edx edx +
mov eax [ebx+384h] +
call @Actnlist@TCustomAction@SetChecked$qqro  +
mov dl 1 +
mov eax [ebx+388h] +
call @Actnlist@TCustomAction@SetChecked$qqro  +
push 4  +
call sub_42AED4  +
pop ecx  +
call sub_401984  +
mov eax ebx +
mov edx [eax] +
call dword ptr [edx+7Ch]  +
pop ebx  +
retn   +
***
mov edx [eax+3D4h] +
push ecx  +
push ebx  +
mov [ebp+var_1] cl +
mov ebx eax +
test [ebp+var_1] 1 +
setnz dl  +
and edx 1 +
mov eax [ebp+arg_8] +
test dl dl +
jz loc_402D1E  +
push 0  +
neg eax  +
push eax  +
call sub_401A4C  +
add esp 8 +
jmp loc_402D2B  +
neg eax  +
push eax  +
push 0  +
call sub_401A4C  +
add esp 8 +
mov eax [ebp+arg_0] +
mov byte ptr [eax] 1 +
mov eax ebx +
mov edx [eax] +
call dword ptr [edx+7Ch]  +
pop ebx  +
pop ecx  +
pop ebp  +
retn 0Ch  +
***
mov eax off_4EA6BC +
mov edx [eax] +
mov eax off_4EA6C0 +
mov edx [eax] +
add esp 0FFFFFFD0h +
mov eax offset stru_4CC518 +
push ebx  +
push esi  +
push edi  +
call @__InitExceptBlockLDTC  +
mov eax 1 +
mov ecx [ebp+arg_0] +
test eax eax +
mov dword_4EBD98 eax +
setnz dl  +
and edx 1 +
mov eax [ecx+3F8h] +
call @Actnlist@TCustomAction@SetChecked$qqro  +
mov dl 1 +
mov eax ds:off_4A6CAC +
call @Registry@TRegistry@$bctr$qqrv  +
mov [ebp+var_30] eax +
mov edx dword_4CC214 +
mov eax [ebp+var_30] +
call sub_4A71EC  +
test al al +
jz loc_402F83  +
mov [ebp+var_1C] 8 +
xor ecx ecx +
mov edx dword_4CC214 +
mov eax [ebp+var_30] +
call @Registry@TRegistry@OpenKey$qqrx17System@AnsiStringo  +
mov edx dword_4CC218 +
mov eax [ebp+var_30] +
call @Registry@TRegistry@ValueExists$qqrx17System@AnsiString  +
test al al +
jz loc_402DF8  +
mov edx dword_4CC218 +
mov eax [ebp+var_30] +
call @Registry@TRegistry@ReadInteger$qqrx17System@AnsiString  +
mov edx eax +
mov eax [ebp+arg_0] +
call @Controls@TControl@SetWidth$qqri  +
mov edx dword_4CC21C +
mov eax [ebp+var_30] +
call @Registry@TRegistry@ValueExists$qqrx17System@AnsiString  +
test al al +
jz loc_402E22  +
mov edx dword_4CC21C +
mov eax [ebp+var_30] +
call @Registry@TRegistry@ReadInteger$qqrx17System@AnsiString  +
mov edx eax +
mov eax [ebp+arg_0] +
call @Controls@TControl@SetHeight$qqri  +
mov edx dword_4CC220 +
mov eax [ebp+var_30] +
call @Registry@TRegistry@ValueExists$qqrx17System@AnsiString  +
test al al +
jz loc_402E58  +
mov edx dword_4CC220 +
mov eax [ebp+var_30] +
call @Registry@TRegistry@ReadInteger$qqrx17System@AnsiString  +
test eax eax +
mov ecx [ebp+arg_0] +
setnz dl  +
and edx 1 +
mov eax [ecx+3D4h] +
call @Actnlist@TCustomAction@SetChecked$qqro  +
mov edx dword_4CC224 +
mov eax [ebp+var_30] +
call @Registry@TRegistry@ValueExists$qqrx17System@AnsiString  +
test al al +
jz loc_402E96  +
mov edx dword_4CC224 +
mov eax [ebp+var_30] +
call @Registry@TRegistry@ReadInteger$qqrx17System@AnsiString  +
mov ebx eax +
mov eax [ebp+arg_0] +
test ebx ebx +
mov dword_4EBD98 ebx +
setnz dl  +
and edx 1 +
mov eax [eax+3F8h] +
call @Actnlist@TCustomAction@SetChecked$qqro  +
mov [ebp+var_1C] 0 +
jmp loc_402EA9  +
mov word ptr [ebp-1Ch] 10h +
call @_CatchCleanup$qv  +
mov edx off_4EA6CC +
mov eax [edx] +
call sub_46A27C  +
mov edx [ebp+arg_0] +
mov ecx [edx+40h] +
mov edx [ebp+arg_0] +
add ecx [edx+48h] +
cmp eax ecx +
jg loc_402F16  +
mov eax off_4EA6CC +
mov eax [eax] +
call sub_46A27C  +
push eax  +
mov edx [ebp+arg_0] +
pop ecx  +
mov eax [edx+40h] +
mov edx [ebp+arg_0] +
add eax [edx+48h] +
mov edx [ebp+arg_0] +
sub eax ecx +
mov edx [edx+40h] +
sub edx eax +
mov eax [ebp+arg_0] +
call @Controls@TControl@SetLeft$qqri  +
mov ecx [ebp+arg_0] +
mov eax [ecx+40h] +
test eax eax +
jge loc_402F16  +
mov edx [ebp+arg_0] +
mov edx [edx+48h] +
add edx eax +
mov eax [ebp+arg_0] +
call @Controls@TControl@SetWidth$qqri  +
xor edx edx +
mov eax [ebp+arg_0] +
call @Controls@TControl@SetLeft$qqri  +
mov ecx off_4EA6CC +
mov eax [ecx] +
call sub_46A270  +
mov edx [ebp+arg_0] +
mov ecx [edx+44h] +
mov edx [ebp+arg_0] +
add ecx [edx+4Ch] +
cmp eax ecx +
jg loc_402F83  +
mov eax off_4EA6CC +
mov eax [eax] +
call sub_46A270  +
push eax  +
mov edx [ebp+arg_0] +
pop ecx  +
mov eax [edx+44h] +
mov edx [ebp+arg_0] +
add eax [edx+4Ch] +
mov edx [ebp+arg_0] +
sub eax ecx +
mov edx [edx+44h] +
sub edx eax +
mov eax [ebp+arg_0] +
call @Controls@TControl@SetTop$qqri  +
mov ecx [ebp+arg_0] +
mov eax [ecx+44h] +
test eax eax +
jge loc_402F83  +
mov edx [ebp+arg_0] +
mov edx [edx+4Ch] +
add edx eax +
mov eax [ebp+arg_0] +
call @Controls@TControl@SetHeight$qqri  +
xor edx edx +
mov eax [ebp+arg_0] +
call @Controls@TControl@SetTop$qqri  +
mov eax [ebp+var_30] +
call sub_4A6E1C  +
mov ebx [ebp+var_30] +
mov [ebp+var_8] ebx +
test ebx ebx +
jz loc_402FB3  +
mov eax [ebx] +
mov [ebp+var_4] eax +
mov [ebp+var_1C] 20h +
mov edx 3 +
mov eax [ebp+var_8] +
mov ecx [eax] +
call dword ptr [ecx-4]  +
mov [ebp+var_1C] 14h +
mov edx [ebp+var_2C] +
mov large fs:0 edx +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
add esp 0FFFFFFD4h +
mov eax [ebx+3F8h] +
xor edx edx +
mov eax [ebx+40Ch] +
call unknown_libname_212  +
call sub_401AA4  +
mov ecx dword_4EBD94 +
push ecx  +
call sub_401A68  +
pop ecx  +
mov edx eax +
mov eax ebx +
call @Controls@TControl@SetColor$qqr15Graphics@TColor  +
mov eax ebx +
mov edx [eax] +
call dword ptr [edx+7Ch]  +
xor edx edx +
mov eax ebx +
call @Controls@TControl@SetCursor$qqr16Controls@TCursor  +
pop ebx  +
retn   +
***
add esp 0FFFFFF94h +
mov ebx [ebp-44h] +
mov [ebp-14h] ebx +
test ebx ebx +
jz loc_40347B  +
mov eax [ebx] +
mov [ebp-10h] eax +
mov word ptr [ebp-28h] 50h +
mov edx 3 +
mov eax [ebp-14h] +
mov ecx [eax] +
call dword ptr [ecx-4]  +
mov word ptr [ebp-28h] 44h +
mov edx off_4EA6C4 +
mov eax [edx] +
call sub_46927C  +
mov dl 1 +
mov eax [ebp-3Ch] +
mov ecx [eax] +
call dword ptr [ecx+64h]  +
mov eax [ebp-3Ch] +
call sub_4669EC  +
mov dword_4CC18C eax +
mov edx [ebp-40h] +
mov eax [ebp-3Ch] +
call sub_402530  +
call sub_42AF20  +
cmp word ptr [ebp-26h] 0 +
jz loc_4034B7  +
retn   +
mov edx [ebp-38h] +
mov large fs:0 edx +
mov esp ebp +
mov edi [ebp-78h] +
mov esi [ebp-74h] +
mov ebx [ebp-70h] +
pop ebp  +
retn   +
***
add esp 0FFFFFFE8h +
push ebx  +
push esi  +
mov ebx [ebp+hWnd] +
mov esi [ebp+arg_4] +
lea eax [ebp+Rect] +
push eax  +
push ebx  +
call GetWindowRect  +
mov edx [esi+0Ch] +
add edx 0FFFFFFB8h +
cmp edx [ebp+Rect.top] +
jg loc_403549  +
add [ebp+Rect.top] 24h +
mov ecx [ebp+Rect.left] +
lea edx [ebp+X] +
mov [ebp+X] ecx +
mov eax [ebp+Rect.top] +
mov [ebp-4] eax +
push edx  +
push ebx  +
call GetParent  +
push eax  +
call ScreenToClient  +
push 5  +
push 0  +
push 0  +
mov ecx [ebp-4] +
push ecx  +
mov eax [ebp+X] +
push eax  +
push 0  +
push ebx  +
call SetWindowPos  +
mov eax 1 +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 8  +
***
push edi  +
add esp 0FFFFFFF0h +
mov eax [eax+424h] +
mov ebx [eax+3Ch] +
push offset aPrint  +
push ebx  +
call SetWindowTextA  +
push esp  +
push ebx  +
call GetWindowRect  +
mov edx [esp+10h+var_8] +
mov eax [esp+10h+var_4] +
sub edx [esp+10h+var_10] +
sub eax [esp+10h+var_C] +
add eax 24h +
push 2  +
push eax  +
push edx  +
push 0  +
push 0  +
push 0  +
push ebx  +
call SetWindowPos  +
mov ecx esp +
push ecx  +
push offset EnumFunc  +
push ebx  +
call EnumChildWindows  +
push esp  +
push ebx  +
call GetClientRect  +
mov esi 0Fh +
mov edi [esp+10h+var_4] +
add edi 0FFFFFFB8h +
push offset aPrintGraphOn  +
push edi  +
push esi  +
push ebx  +
call sub_401E04  +
add esp 10h +
add eax 4 +
add esi eax +
push 4D2h  +
push edi  +
push esi  +
push ebx  +
call sub_401D68  +
add esp 10h +
add eax 4 +
add esi eax +
push offset aBy  +
push edi  +
push esi  +
push ebx  +
call sub_401E04  +
add esp 10h +
add eax 4 +
add esi eax +
push 4D3h  +
push edi  +
push esi  +
push ebx  +
call sub_401D68  +
add esp 10h +
add eax 4 +
add esi eax +
push offset aPages  +
push edi  +
push esi  +
push ebx  +
call sub_401E04  +
add esp 10h +
add esp 10h +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push esi  +
mov eax [ebx+424h] +
mov esi [eax+3Ch] +
push 0  +
push 0  +
push 147h  +
push 4D2h  +
push esi  +
call SendDlgItemMessageA  +
inc eax  +
mov [ebx+434h] eax +
push 0  +
push 0  +
push 147h  +
push 4D3h  +
push esi  +
call SendDlgItemMessageA  +
inc eax  +
mov [ebx+438h] eax +
pop esi  +
pop ebx  +
retn   +
***
push ebx  +
push esi  +
push edi  +
mov ebx [ebp+stream] +
push 2  +
push 0  +
push ebx  +
call _fseek  +
add esp 0Ch +
push ebx  +
call _ftell  +
pop ecx  +
mov esi eax +
mov n esi +
test esi esi +
jle loc_4036E1  +
push esi  +
call _malloc  +
pop ecx  +
mov edi eax +
mov ptr edi +
test edi edi +
jnz loc_4036B7  +
push offset aNotEnoughMemor  +
call sub_4025CC  +
pop ecx  +
push 0  +
push 0  +
push ebx  +
call _fseek  +
add esp 0Ch +
mov eax n +
mov edx ptr +
push ebx  +
push eax  +
push 1  +
push edx  +
call _fread  +
add esp 10h +
mov n eax +
push 0  +
push 0  +
push ebx  +
call _fseek  +
add esp 0Ch +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
add esp 0FFFFFFD8h +
push ebx  +
mov ebx eax +
mov eax offset stru_4CC630 +
call @__InitExceptBlockLDTC  +
mov eax [ebx+430h] +
mov edx [eax] +
call dword ptr [edx+3Ch]  +
test al al +
jz loc_4037CF  +
push offset aW  +
xor ecx ecx +
mov [ebp+var_18] 14h +
mov [ebp+var_4] ecx +
lea edx [ebp+var_4] +
inc [ebp+var_C]  +
mov eax [ebx+430h] +
call @Dialogs@TOpenDialog@GetFileName$qqrv  +
cmp [ebp+var_4] 0 +
jz loc_403746  +
mov ecx [ebp+var_4] +
jmp loc_40374B  +
mov ecx offset path +
push ecx  +
call _fopen  +
add esp 8 +
mov ebx eax +
dec [ebp+var_C]  +
lea eax [ebp+var_4] +
mov edx 2 +
call sub_4CA490  +
mov [ebp+var_18] 8 +
test ebx ebx +
jnz loc_40378E  +
push 0  +
push offset aError  +
push offset aCanNotOpenOutp  +
push 0  +
call MessageBoxA  +
mov eax [ebp+var_28] +
mov large fs:0 eax +
jmp loc_4037D8  +
push ebx  +
mov edx n +
push edx  +
push 1  +
mov ecx ptr +
push ecx  +
call _fwrite  +
add esp 10h +
cmp eax n +
jz loc_4037C2  +
push 0  +
push offset aError_0  +
push offset aCanNotWriteToT  +
push 0  +
call MessageBoxA  +
push ebx  +
call _fclose  +
pop ecx  +
mov [ebp+var_18] 0 +
mov eax [ebp+var_28] +
mov large fs:0 eax +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
cmp n 0 +
mov eax [eax+428h] +
setnle dl  +
and edx 1 +
call @Actnlist@TCustomAction@SetEnabled$qqro  +
retn   +
***
add esp 0FFFFFFDCh +
push ebx  +
push esi  +
call __BeforeDestruction  +
mov ebx edx +
mov esi eax +
mov eax offset stru_4CD034 +
call @__InitExceptBlockLDTC  +
test bl bl +
jl loc_4039A8  +
sub [ebp+var_8] 10h +
xor edx edx +
mov eax esi +
call sub_403AE4  +
mov edx [ebp+var_24] +
mov large fs:0 edx +
test bl bl +
jle loc_4039BD  +
mov eax esi +
call __ClassDestroy  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
add esp 0FFFFFFD8h +
test dl dl +
push ebx  +
push esi  +
mov [ebp+var_8] dl +
jle loc_4039D8  +
call __ClassCreate  +
mov esi ecx +
mov ebx edx +
mov [ebp+var_4] eax +
mov eax offset stru_4CD04C +
call @__InitExceptBlockLDTC  +
mov [ebp+var_18] 8 +
mov edx [ebp+arg_0] +
mov ecx esi +
push edx  +
xor edx edx +
mov eax [ebp+var_4] +
call @Forms@TCustomForm@$bctr$qqrp18Classes@TComponenti  +
add [ebp+var_C] 0Fh +
mov ecx [ebp+var_28] +
mov large fs:0 ecx +
mov eax [ebp+var_4] +
test bl bl +
jz loc_403A19  +
call __AfterConstruction  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 4  +
***
add esp 0FFFFFFD8h +
push ebx  +
call __BeforeDestruction  +
mov ebx edx +
mov [ebp+var_4] eax +
mov eax offset stru_4CD070 +
call @__InitExceptBlockLDTC  +
mov [ebp+var_C] 0Fh +
test bl bl +
jl loc_403B1E  +
mov [ebp+var_18] 8 +
sub [ebp+var_C] 0Fh +
xor edx edx +
mov eax [ebp+var_4] +
call @Forms@TCustomForm@$bdtr$qqrv  +
mov edx [ebp+var_28] +
mov large fs:0 edx +
test bl bl +
jle loc_403B34  +
mov eax [ebp+var_4] +
call __ClassDestroy  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
add esp 0FFFFFFD8h +
push ebx  +
call __BeforeDestruction  +
mov ebx edx +
mov [ebp+var_4] eax +
mov eax offset stru_4CD094 +
call @__InitExceptBlockLDTC  +
mov [ebp+var_C] 0Ch +
test bl bl +
jl loc_403BEA  +
mov [ebp+var_18] 8 +
sub [ebp+var_C] 0Ch +
xor edx edx +
mov eax [ebp+var_4] +
call sub_403C68  +
mov edx [ebp+var_28] +
mov large fs:0 edx +
test bl bl +
jle loc_403C00  +
mov eax [ebp+var_4] +
call __ClassDestroy  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
add esp 0FFFFFFD8h +
push ebx  +
call __BeforeDestruction  +
mov ebx edx +
mov [ebp+var_4] eax +
mov eax offset stru_4CD0B8 +
call @__InitExceptBlockLDTC  +
mov [ebp+var_C] 0Bh +
test bl bl +
jl loc_403CA2  +
mov [ebp+var_18] 8 +
sub [ebp+var_C] 0Bh +
xor edx edx +
mov eax [ebp+var_4] +
call @Stdctrls@TCustomMemo@$bdtr$qqrv_0  +
mov edx [ebp+var_28] +
mov large fs:0 edx +
test bl bl +
jle loc_403CB8  +
mov eax [ebp+var_4] +
call __ClassDestroy  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
add esp 0FFFFFFD8h +
push ebx  +
call __BeforeDestruction  +
mov ebx edx +
mov [ebp+var_4] eax +
mov eax offset stru_4CD0DC +
call @__InitExceptBlockLDTC  +
mov [ebp+var_C] 4 +
test bl bl +
jl loc_403F0E  +
mov [ebp+var_18] 8 +
sub [ebp+var_C] 4 +
xor edx edx +
mov eax [ebp+var_4] +
call sub_404064  +
mov edx [ebp+var_28] +
mov large fs:0 edx +
test bl bl +
jle loc_403F24  +
mov eax [ebp+var_4] +
call __ClassDestroy  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
mov esi edx +
mov esi edx +
mov ebx eax +
test ebx ebx +
jz loc_403FF1  +
mov eax [ebx] +
test eax eax +
jz loc_403FE2  +
push eax  +
mov edx [eax] +
call dword ptr [edx+8]  +
xor ecx ecx +
mov [ebx] ecx +
test esi 1 +
jz loc_403FF1  +
push ebx  +
call __rtl_close  +
pop ecx  +
pop esi  +
pop ebx  +
retn   +
***
add esp 0FFFFFFD8h +
push ebx  +
push esi  +
push edi  +
call __BeforeDestruction  +
mov ebx edx +
mov [ebp+var_4] eax +
mov eax offset stru_4CD100 +
call @__InitExceptBlockLDTC  +
mov [ebp+var_C] 3 +
test bl bl +
jl loc_4040B9  +
mov [ebp+var_18] 8 +
dec [ebp+var_C]  +
mov esi [ebp+var_4] +
add esi 4 +
mov edi [esi] +
test edi edi +
jz loc_4040AB  +
push edi  +
mov eax [edi] +
call dword ptr [eax+8]  +
xor edx edx +
mov [esi] edx +
sub [ebp+var_C] 2 +
xor edx edx +
mov eax [ebp+var_4] +
call sub_49D348  +
mov ecx [ebp+var_28] +
mov large fs:0 ecx +
test bl bl +
jle loc_4040CF  +
mov eax [ebp+var_4] +
call __ClassDestroy  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
mov esi edx +
mov esi edx +
mov ebx eax +
test ebx ebx +
jz loc_404309  +
mov eax [ebx] +
test eax eax +
jz loc_4042FA  +
push eax  +
mov edx [eax] +
call dword ptr [edx+8]  +
xor ecx ecx +
mov [ebx] ecx +
test esi 1 +
jz loc_404309  +
push ebx  +
call __rtl_close  +
pop ecx  +
pop esi  +
pop ebx  +
retn   +
***
sub dword_4EAD28 1 +
jb loc_40437E  +
pop ebp  +
retn   +
call sub_401EA8  +
pop ebp  +
retn   +
***
add dword_4EAD28 1 +
jb loc_404396  +
pop ebp  +
retn   +
call sub_401F28  +
pop ebp  +
retn   +
***
mov eax [ebp+arg_0] +
push eax  +
call unknown_libname_48  +
pop ecx  +
pop ebp  +
retn   +
***
call sub_429FB0  +
call sub_44510C  +
xor eax eax +
mov dword_4CD124 eax +
call sub_405098  +
retn   +
***
mov edx dword_4CD154 +
test edx edx +
jz loc_4043E2  +
mov eax edx +
mov ecx [edx+0B8h] +
mov dword_4CD154 ecx +
jmp loc_4043ED  +
push 0BCh  +
call unknown_libname_45  +
pop ecx  +
mov edx dword_4CD124 +
xor ecx ecx +
mov [eax] edx +
xor edx edx +
inc dword_4CD124  +
mov [eax+4] ecx +
xor ecx ecx +
mov [eax+8] edx +
xor edx edx +
mov [eax+0Ch] ecx +
xor ecx ecx +
mov [eax+10h] edx +
mov [eax+14h] ecx +
xor edx edx +
mov dword ptr [eax+38h] 0FFFFFFFFh +
mov byte ptr [eax+2Fh] 0 +
mov dword ptr [eax+3Ch] 0FFFFFFFFh +
mov [eax+20h] edx +
xor ecx ecx +
mov [eax+24h] ecx +
xor edx edx +
mov [eax+54h] edx +
xor ecx ecx +
mov [eax+58h] ecx +
xor edx edx +
mov [eax+40h] edx +
xor ecx ecx +
mov [eax+44h] ecx +
xor edx edx +
mov [eax+48h] edx +
xor ecx ecx +
mov [eax+4Ch] ecx +
xor edx edx +
mov [eax+50h] edx +
xor ecx ecx +
mov byte ptr [eax+64h] 1 +
mov byte ptr [eax+65h] 0 +
mov dword ptr [eax+6Ch] 0FFFFFFFFh +
mov dword ptr [eax+70h] 0FFFFFFFFh +
mov [eax+78h] ecx +
xor edx edx +
mov [eax+7Ch] edx +
xor edx edx +
mov byte ptr [eax+66h] 0 +
mov byte ptr [eax+67h] 0 +
mov byte ptr [eax+68h] 0 +
mov dword ptr [eax+74h] 0BF800000h +
mov dword ptr [eax+80h] 0FFFFFFFFh +
mov [eax+84h] edx +
xor ecx ecx +
mov [eax+88h] ecx +
xor edx edx +
mov [eax+8Ch] edx +
xor ecx ecx +
mov [eax+94h] ecx +
xor edx edx +
mov [eax+98h] edx +
xor ecx ecx +
mov [eax+9Ch] ecx +
xor edx edx +
mov [eax+0A0h] edx +
xor ecx ecx +
mov [eax+0A4h] ecx +
xor edx edx +
mov [eax+0A8h] edx +
xor ecx ecx +
mov [eax+0ACh] ecx +
xor edx edx +
mov [eax+0B0h] edx +
xor ecx ecx +
mov [eax+0B4h] ecx +
xor edx edx +
mov [eax+5Ch] edx +
xor ecx ecx +
mov [eax+0B8h] ecx +
retn   +
***
push ebx  +
call sub_4043C8  +
mov ebx eax +
push ebx  +
mov eax [ebp+arg_0] +
push eax  +
call sub_404724  +
add esp 8 +
mov edx dword_4CD134 +
mov [ebx+60h] edx +
mov eax dword_4CD134 +
test eax eax +
jz loc_40452D  +
mov [eax+5Ch] ebx +
mov dword_4CD134 ebx +
inc dword_4CD128  +
cmp dword_4CD130 0 +
jnz loc_404548  +
mov dword_4CD130 ebx +
mov eax ebx +
pop ebx  +
pop ebp  +
retn   +
***
mov edx dword_4EBD58 +
xor edx edx +
xor ecx ecx +
mov eax [ebp+arg_0] +
mov [eax+4] edx +
mov [eax+8] ecx +
mov dword ptr [eax+38h] 0FFFFFFFFh +
mov byte ptr [eax+2Fh] 0FFh +
mov dword ptr [eax+3Ch] 0FFFFFFFFh +
xor edx edx +
xor ecx ecx +
mov [eax+0Ch] edx +
mov [eax+10h] ecx +
xor edx edx +
xor ecx ecx +
mov [eax+14h] edx +
xor edx edx +
mov [eax+20h] ecx +
mov [eax+24h] edx +
mov byte ptr [eax+28h] 0FFh +
mov byte ptr [eax+2Eh] 0FFh +
mov dword ptr [eax+18h] 0FFFFFFFFh +
mov dword ptr [eax+1Ch] 0FFFFFFFFh +
mov byte ptr [eax+29h] 4 +
mov byte ptr [eax+2Ah] 0FFh +
mov byte ptr [eax+2Bh] 0FFh +
mov byte ptr [eax+2Ch] 0FFh +
mov byte ptr [eax+2Dh] 0FFh +
mov dword ptr [eax+30h] 0FFFFFFFFh +
mov dword ptr [eax+34h] 0FFFFFFFFh +
pop ebp  +
retn   +
***
mov edx [ebp+arg_4] +
mov edx [ebp+arg_4] +
mov eax [ebp+arg_0] +
mov ecx [eax+4] +
mov [edx+4] ecx +
mov ecx [eax+8] +
mov [edx+8] ecx +
mov ecx [eax+38h] +
mov [edx+38h] ecx +
mov cl [eax+2Fh] +
mov [edx+2Fh] cl +
mov ecx [eax+3Ch] +
mov [edx+3Ch] ecx +
mov ecx [eax+0Ch] +
mov [edx+0Ch] ecx +
mov ecx [eax+10h] +
mov [edx+10h] ecx +
mov ecx [eax+14h] +
mov [edx+14h] ecx +
mov ecx [eax+20h] +
mov [edx+20h] ecx +
mov ecx [eax+24h] +
mov [edx+24h] ecx +
mov cl [eax+28h] +
mov [edx+28h] cl +
mov cl [eax+2Eh] +
mov [edx+2Eh] cl +
mov ecx [eax+18h] +
mov [edx+18h] ecx +
mov ecx [eax+1Ch] +
mov [edx+1Ch] ecx +
mov cl [eax+29h] +
mov [edx+29h] cl +
mov cl [eax+2Ah] +
mov [edx+2Ah] cl +
mov cl [eax+2Bh] +
mov [edx+2Bh] cl +
mov cl [eax+2Ch] +
mov [edx+2Ch] cl +
mov cl [eax+2Dh] +
mov [edx+2Dh] cl +
mov ecx [eax+30h] +
mov [edx+30h] ecx +
mov eax [eax+34h] +
mov [edx+34h] eax +
pop ebp  +
retn   +
***
push ebx  +
call sub_4043C8  +
mov ebx eax +
push ebx  +
mov eax [ebp+arg_0] +
push eax  +
call sub_404724  +
mov byte ptr [ebx+2Ah] 0FFh +
mov byte ptr [ebx+64h] 0 +
mov byte ptr [ebx+65h] 1 +
xor edx edx +
add esp 8 +
mov [ebx+80h] edx +
mov ecx dword_4CD13C +
mov [ebx+60h] ecx +
mov eax dword_4CD13C +
test eax eax +
jz loc_4047F1  +
mov [eax+5Ch] ebx +
mov dword_4CD13C ebx +
cmp dword_4CD138 0 +
jnz loc_404806  +
mov dword_4CD138 ebx +
mov eax ebx +
pop ebx  +
pop ebp  +
retn   +
***
call sub_4043C8  +
mov edx [ebp+arg_28] +
mov [eax+3Ch] edx +
mov cl [ebp+arg_0] +
mov [eax+28h] cl +
mov byte ptr [eax+2Eh] 0 +
mov edx [ebp+arg_4] +
mov [eax+18h] edx +
mov ecx [ebp+arg_8] +
mov [eax+1Ch] ecx +
mov dl [ebp+arg_C] +
mov [eax+29h] dl +
mov cl [ebp+arg_10] +
mov [eax+2Ah] cl +
mov dl [ebp+arg_14] +
mov [eax+2Bh] dl +
mov cl [ebp+arg_18] +
mov [eax+2Ch] cl +
mov dl [ebp+arg_1C] +
mov [eax+2Dh] dl +
mov ecx [ebp+arg_20] +
mov [eax+30h] ecx +
xor ecx ecx +
mov edx [ebp+arg_24] +
mov [eax+34h] edx +
xor edx edx +
mov byte ptr [eax+64h] 0 +
mov byte ptr [eax+65h] 1 +
mov [eax+80h] ecx +
mov [eax+60h] edx +
mov ecx dword_4CD150 +
mov [eax+0B8h] ecx +
mov dword_4CD150 eax +
pop ebp  +
retn   +
***
mov eax dword_4CD150 +
test eax eax +
jz loc_4048B9  +
jmp loc_404891  +
mov eax edx +
mov edx [eax+0B8h] +
test edx edx +
jnz loc_40488F  +
mov ecx dword_4CD154 +
xor edx edx +
mov [eax+0B8h] ecx +
mov eax dword_4CD150 +
mov dword_4CD154 eax +
mov dword_4CD150 edx +
xor ecx ecx +
mov dword_4CD144 ecx +
xor eax eax +
mov dword_4CD148 eax +
xor edx edx +
mov dword_4CD14C edx +
retn   +
***
mov eax [ebp+arg_0] +
mov edx dword_4CD154 +
mov [eax+0B8h] edx +
mov dword_4CD154 eax +
pop ebp  +
retn   +
***
push edi  +
mov edi offset aIdAlloc_cV3_91 +
mov ebx dword_4CD138 +
test ebx ebx +
jz loc_4049FA  +
cmp dword ptr [ebx+40h] 0 +
jnz loc_4049F3  +
cmp dword_4D4B04 0 +
jnz loc_4049D7  +
cmp dword ptr [ebx+4] 0 +
jz loc_4049A0  +
mov eax [ebx+4] +
jmp loc_4049A3  +
lea eax [edi+4Ah] +
push eax  +
lea edx [edi+37h] +
push edx  +
push offset stream  +
call _fprintf  +
add esp 0Ch +
lea ecx [edi+4Bh] +
push ecx  +
push offset stream  +
call _fprintf  +
add esp 8 +
lea eax [edi+5Ah] +
push eax  +
push offset stream  +
call _fprintf  +
add esp 8 +
push ebx  +
call sub_404500  +
pop ecx  +
mov esi eax +
lea eax [edi+6Ch] +
mov [esi+4] eax +
mov [esi+44h] ebx +
push esi  +
call sub_404A00  +
pop ecx  +
mov [ebx+40h] eax +
mov ebx [ebx+5Ch] +
test ebx ebx +
jnz loc_404986  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push 0Ch  +
mov edx dword_4CD160 +
test edx edx +
jz loc_404A33  +
mov eax edx +
mov ecx [edx+8] +
mov dword_4CD160 ecx +
jmp loc_404A3B  +
push 0Ch  +
call unknown_libname_45  +
pop ecx  +
mov edx dword_4CD158 +
xor ecx ecx +
mov [eax+8] edx +
xor edx edx +
mov [eax] ecx +
mov [eax+4] edx +
mov dword_4CD158 eax +
retn   +
***
mov edx dword_4CD160 +
test edx edx +
jz loc_404A6B  +
mov eax edx +
mov ecx [edx+8] +
mov dword_4CD160 ecx +
jmp loc_404A73  +
push 0Ch  +
call unknown_libname_45  +
pop ecx  +
mov edx dword_4CD15C +
xor ecx ecx +
mov [eax+8] edx +
xor edx edx +
mov [eax] ecx +
mov [eax+4] edx +
mov dword_4CD15C eax +
retn   +
***
mov eax dword_4CD158 +
mov eax dword_4CD15C +
mov ecx [ebp+arg_0] +
mov edx dword_4CD174 +
test edx edx +
jz loc_404B2B  +
mov eax edx +
mov ecx [edx+58h] +
mov dword_4CD174 ecx +
jmp loc_404B33  +
push 5Ch  +
call unknown_libname_45  +
pop ecx  +
xor edx edx +
xor ecx ecx +
mov [eax] edx +
xor edx edx +
mov [eax+1Ch] ecx +
xor ecx ecx +
mov [eax+4] edx +
xor edx edx +
mov [eax+8] ecx +
xor ecx ecx +
mov [eax+0Ch] edx +
xor edx edx +
mov [eax+10h] ecx +
xor ecx ecx +
mov [eax+14h] edx +
xor edx edx +
mov [eax+18h] ecx +
xor ecx ecx +
mov [eax+20h] edx +
mov [eax+24h] ecx +
mov byte ptr [eax+28h] 0 +
mov byte ptr [eax+29h] 0 +
xor edx edx +
xor ecx ecx +
mov [eax+2Ch] edx +
xor edx edx +
mov byte ptr [eax+42h] 55h +
mov [eax+4Ch] ecx +
xor ecx ecx +
mov byte ptr [eax+41h] 0 +
mov byte ptr [eax+43h] 0 +
mov [eax+44h] edx +
xor edx edx +
mov [eax+48h] ecx +
xor ecx ecx +
mov [eax+50h] edx +
mov [eax+58h] ecx +
mov byte ptr [eax+40h] 1Fh +
retn   +
***
push ebx  +
call sub_404B14  +
mov ebx eax +
push ebx  +
mov eax [ebp+arg_0] +
push eax  +
call sub_404D24  +
add esp 8 +
mov edx dword_4CD16C +
mov [ebx+54h] edx +
mov eax dword_4CD16C +
test eax eax +
jz loc_404BC9  +
mov [eax+50h] ebx +
mov dword_4CD16C ebx +
inc dword_4CD164  +
cmp dword_4CD168 0 +
jnz loc_404BE4  +
mov dword_4CD168 ebx +
mov eax ebx +
pop ebx  +
pop ebp  +
retn   +
***
mov eax [ebp+arg_0] +
xor edx edx +
mov [eax+2Ch] edx +
mov byte ptr [eax+2Ah] 0 +
mov byte ptr [eax+2Bh] 2 +
mov byte ptr [eax+38h] 1 +
mov dword ptr [eax+30h] 1 +
mov dword ptr [eax+34h] 0FFFFFFFFh +
mov byte ptr [eax+39h] 1Fh +
mov byte ptr [eax+40h] 1Fh +
mov byte ptr [eax+3Ch] 0Ah +
mov byte ptr [eax+3Ah] 1 +
mov byte ptr [eax+3Dh] 1Fh +
mov byte ptr [eax+3Eh] 0 +
mov byte ptr [eax+3Bh] 3 +
mov byte ptr [eax+3Fh] 1Fh +
pop ebp  +
retn   +
***
mov eax [ebp+arg_0] +
mov dword ptr [eax+2Ch] offset unk_4CD214 +
mov byte ptr [eax+2Ah] 0FFh +
mov byte ptr [eax+2Bh] 4 +
mov byte ptr [eax+38h] 0FFh +
mov dword ptr [eax+30h] 0FFFFFFFFh +
mov dword ptr [eax+34h] 0FFFFFFFFh +
mov byte ptr [eax+39h] 0FFh +
mov byte ptr [eax+40h] 0FFh +
mov byte ptr [eax+3Ch] 0FFh +
mov byte ptr [eax+3Ah] 0FFh +
mov byte ptr [eax+3Dh] 0FFh +
mov byte ptr [eax+3Eh] 0FFh +
mov byte ptr [eax+3Bh] 0FFh +
mov byte ptr [eax+3Fh] 0FFh +
pop ebp  +
retn   +
***
mov edx [ebp+arg_4] +
mov edx [ebp+arg_4] +
mov eax [ebp+arg_0] +
mov ecx [eax+2Ch] +
mov [edx+2Ch] ecx +
mov cl [eax+2Ah] +
mov [edx+2Ah] cl +
mov cl [eax+2Bh] +
mov [edx+2Bh] cl +
mov cl [eax+38h] +
mov [edx+38h] cl +
mov ecx [eax+30h] +
mov [edx+30h] ecx +
mov ecx [eax+34h] +
mov [edx+34h] ecx +
mov cl [eax+39h] +
mov [edx+39h] cl +
mov cl [eax+40h] +
mov [edx+40h] cl +
mov cl [eax+3Ch] +
mov [edx+3Ch] cl +
mov cl [eax+3Ah] +
mov [edx+3Ah] cl +
mov cl [eax+3Dh] +
mov [edx+3Dh] cl +
mov cl [eax+3Eh] +
mov [edx+3Eh] cl +
mov cl [eax+3Bh] +
mov [edx+3Bh] cl +
mov al [eax+3Fh] +
mov [edx+3Fh] al +
pop ebp  +
retn   +
***
push ebx  +
mov ebx [ebp+arg_10] +
call sub_404B14  +
mov dl [ebp+arg_0] +
mov [eax+2Ah] dl +
mov cl [ebp+arg_4] +
mov [eax+2Bh] cl +
mov dl [ebp+arg_8] +
mov [eax+38h] dl +
mov ecx [ebp+arg_C] +
mov [eax+30h] ecx +
mov edx [ebp+arg_30] +
mov [eax+34h] edx +
mov edx ebx +
mov [eax+39h] dl +
mov cl [ebp+arg_14] +
mov [eax+40h] cl +
xor ecx ecx +
mov [eax+54h] ecx +
mov byte ptr [eax+3Ah] 1 +
mov [eax+3Dh] dl +
mov dl [ebp+arg_18] +
mov [eax+3Ch] dl +
mov dl [ebp+arg_20] +
mov [eax+3Ah] dl +
mov cl [ebp+arg_28] +
mov [eax+3Dh] cl +
mov dl [ebp+arg_1C] +
mov [eax+3Eh] dl +
mov cl [ebp+arg_24] +
mov [eax+3Bh] cl +
mov dl [ebp+arg_2C] +
mov [eax+3Fh] dl +
mov ecx dword_4CD170 +
mov [eax+58h] ecx +
mov dword_4CD170 eax +
pop ebx  +
pop ebp  +
retn   +
***
mov eax dword_4CD170 +
mov edx dword_4CD188 +
test edx edx +
jz loc_404E46  +
mov eax edx +
mov ecx [edx+8] +
mov dword_4CD188 ecx +
jmp loc_404E4E  +
push 0Ch  +
call unknown_libname_45  +
pop ecx  +
mov edx [ebp+arg_0] +
mov [eax] edx +
mov ecx dword_4CD178 +
mov [eax+8] ecx +
mov [eax+4] ecx +
mov dword_4CD178 eax +
pop ebp  +
retn   +
***
mov edx dword_4CD188 +
test edx edx +
jz loc_404E82  +
mov eax edx +
mov ecx [edx+8] +
mov dword_4CD188 ecx +
jmp loc_404E8A  +
push 0Ch  +
call unknown_libname_45  +
pop ecx  +
mov edx [ebp+arg_0] +
mov [eax] edx +
mov ecx dword_4CD17C +
mov [eax+8] ecx +
mov [eax+4] ecx +
mov dword_4CD17C eax +
pop ebp  +
retn   +
***
mov edx dword_4CD188 +
test edx edx +
jz loc_404EBE  +
mov eax edx +
mov ecx [edx+8] +
mov dword_4CD188 ecx +
jmp loc_404EC6  +
push 0Ch  +
call unknown_libname_45  +
pop ecx  +
mov edx [ebp+arg_0] +
mov [eax] edx +
mov ecx dword_4CD180 +
mov [eax+8] ecx +
mov [eax+4] ecx +
mov dword_4CD180 eax +
pop ebp  +
retn   +
***
mov edx dword_4CD188 +
test edx edx +
jz loc_404EF7  +
mov eax edx +
mov ecx [edx+8] +
mov dword_4CD188 ecx +
jmp loc_404EFF  +
push 0Ch  +
call unknown_libname_45  +
pop ecx  +
mov edx dword_4CD184 +
mov [eax+8] edx +
mov dword_4CD184 eax +
retn   +
***
push ebx  +
mov ebx [ebp+arg_0] +
call sub_404EE0  +
mov edx [ebp+arg_4] +
mov [eax] edx +
mov ecx [ebx+94h] +
mov [eax+4] ecx +
mov [ebx+94h] eax +
pop ebx  +
pop ebp  +
retn   +
***
push ebx  +
mov ebx [ebp+arg_0] +
call sub_404EE0  +
mov edx [ebp+arg_4] +
mov [eax] edx +
mov ecx [ebx+98h] +
mov [eax+4] ecx +
mov [ebx+98h] eax +
pop ebx  +
pop ebp  +
retn   +
***
mov eax dword_4CD184 +
mov edx dword_4CD190 +
test edx edx +
jz loc_404FA2  +
mov eax edx +
mov ecx [edx+10h] +
mov dword_4CD190 ecx +
jmp loc_404FAA  +
push 14h  +
call unknown_libname_45  +
pop ecx  +
xor edx edx +
xor ecx ecx +
mov [eax] edx +
mov [eax+4] ecx +
xor edx edx +
xor ecx ecx +
mov [eax+8] edx +
mov [eax+0Ch] ecx +
mov edx dword_4CD18C +
mov [eax+10h] edx +
mov dword_4CD18C eax +
mov ecx [ebp+arg_0] +
mov [ecx+0B4h] eax +
pop ebp  +
retn   +
***
mov eax dword_4CD18C +
mov edx dword_4CD194 +
mov eax [ebp+arg_0] +
mov edx dword_4CD194 +
mov [eax+10h] edx +
mov dword_4CD194 eax +
pop ebp  +
retn   +
***
mov ecx [ebp+arg_0] +
call sub_404884  +
call sub_404DFC  +
call sub_404A8C  +
call sub_404F58  +
call sub_404FD8  +
retn   +
***
xor eax eax +
mov dword_4EAE34 eax +
xor edx edx +
mov dword_4EAE30 edx +
xor ecx ecx +
mov dword_4EAE2C ecx +
xor eax eax +
mov dword_4EAE24 eax +
xor edx edx +
mov dword_4EAE28 edx +
xor ecx ecx +
mov dword_4CD140 ecx +
xor eax eax +
mov dword_4CD144 eax +
xor edx edx +
mov dword_4CD148 edx +
xor ecx ecx +
mov dword_4CD14C ecx +
xor eax eax +
mov dword_4CD128 eax +
xor edx edx +
mov dword_4CD12C edx +
xor ecx ecx +
mov dword_4CD130 ecx +
xor eax eax +
mov dword_4CD134 eax +
xor edx edx +
mov dword_4CD138 edx +
xor ecx ecx +
mov dword_4CD13C ecx +
xor eax eax +
mov dword_4CD150 eax +
xor edx edx +
mov dword_4CD154 edx +
xor ecx ecx +
mov dword_4CD158 ecx +
xor eax eax +
mov dword_4CD160 eax +
xor edx edx +
mov dword_4CD164 edx +
xor ecx ecx +
mov dword_4CD168 ecx +
xor eax eax +
mov dword_4CD16C eax +
xor edx edx +
mov dword_4CD170 edx +
xor ecx ecx +
mov dword_4CD174 ecx +
xor eax eax +
mov dword_4CD178 eax +
xor edx edx +
mov dword_4CD180 edx +
xor ecx ecx +
mov dword_4CD17C ecx +
xor eax eax +
mov dword_4CD184 eax +
xor edx edx +
mov dword_4CD188 edx +
xor ecx ecx +
mov dword_4CD18C ecx +
xor eax eax +
mov dword_4CD190 eax +
xor edx edx +
mov dword_4CD194 edx +
retn   +
***
call sub_40519C  +
call sub_405354  +
retn   +
***
push edi  +
push ebp  +
mov esi offset dword_4EBDA4 +
mov edi offset dword_4EBDA0 +
cmp dword_4D4B10 0 +
jnz loc_405281  +
mov ebx dword_4CD130 +
test ebx ebx +
jz loc_40520D  +
cmp dword ptr [ebx+18h] 0 +
jnz loc_4051CC  +
mov ebx [ebx+5Ch] +
jmp loc_4051BD  +
mov eax [edi] +
imul  dword ptr [ebx+30h] +
push eax  +
mov edx [esi] +
imul edx [ebx+34h] +
push edx  +
call __initmatherr_0  +
mov ecx [esi] +
mov eax [ebx+58h] +
imul  ecx +
cdq   +
mov ebp [edi] +
add esp 8 +
idiv  ebp +
push eax  +
mov eax [ebx+54h] +
imul  ecx +
cdq   +
idiv  ebp +
push eax  +
call __initmatherr  +
add esp 8 +
push ebx  +
call sub_405288  +
pop ecx  +
mov ebx [ebx+5Ch] +
test ebx ebx +
jnz loc_4051C1  +
mov ebx dword_4CD144 +
test ebx ebx +
jz loc_405263  +
cmp dword ptr [ebx+18h] 0 +
jnz loc_405222  +
mov ebx [ebx+5Ch] +
jmp loc_405213  +
mov eax [edi] +
imul  dword ptr [ebx+30h] +
push eax  +
mov edx [esi] +
imul edx [ebx+34h] +
push edx  +
call __initmatherr_0  +
mov ecx [esi] +
mov eax [ebx+58h] +
imul  ecx +
cdq   +
mov ebp [edi] +
add esp 8 +
idiv  ebp +
push eax  +
mov eax [ebx+54h] +
imul  ecx +
cdq   +
idiv  ebp +
push eax  +
call __initmatherr  +
add esp 8 +
push ebx  +
call sub_406760  +
pop ecx  +
mov ebx [ebx+5Ch] +
test ebx ebx +
jnz loc_405217  +
mov ebx dword_4CD14C +
test ebx ebx +
jz loc_405281  +
cmp byte ptr [ebx+68h] 0 +
jz loc_40527A  +
push ebx  +
call sub_41002C  +
pop ecx  +
mov ebx [ebx+5Ch] +
test ebx ebx +
jnz loc_40526D  +
pop ebp  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov eax [ebp+arg_0] +
mov dl [eax+2Fh] +
dec dl  +
jz loc_4052A2  +
dec dl  +
jz loc_4052FB  +
dec dl  +
jz loc_4052D0  +
jmp loc_405326  +
mov cl [eax+67h] +
sub cl 1 +
jb loc_4052B5  +
jz loc_4052BE  +
dec cl  +
jz loc_4052C7  +
jmp loc_40534F  +
push eax  +
call sub_407138  +
pop ecx  +
pop ebp  +
retn   +
push eax  +
call sub_40786C  +
pop ecx  +
pop ebp  +
retn   +
push eax  +
call sub_407FA0  +
pop ecx  +
pop ebp  +
retn   +
mov dl [eax+67h] +
sub dl 1 +
jb loc_4052E0  +
jz loc_4052E9  +
dec dl  +
jz loc_4052F2  +
jmp loc_40534F  +
push eax  +
call sub_4088F0  +
pop ecx  +
pop ebp  +
retn   +
push eax  +
call sub_4090B0  +
pop ecx  +
pop ebp  +
retn   +
push eax  +
call sub_409870  +
pop ecx  +
pop ebp  +
retn   +
mov cl [eax+67h] +
sub cl 1 +
jb loc_40530B  +
jz loc_405314  +
dec cl  +
jz loc_40531D  +
jmp loc_40534F  +
push eax  +
call sub_40A3D0  +
pop ecx  +
pop ebp  +
retn   +
push eax  +
call sub_40A914  +
pop ecx  +
pop ebp  +
retn   +
push eax  +
call sub_40AE5C  +
pop ecx  +
pop ebp  +
retn   +
mov dl [eax+67h] +
sub dl 1 +
jb loc_405336  +
jz loc_40533F  +
dec dl  +
jz loc_405348  +
pop ebp  +
retn   +
push eax  +
call sub_405670  +
pop ecx  +
pop ebp  +
retn   +
push eax  +
call sub_405BF4  +
pop ecx  +
pop ebp  +
retn   +
push eax  +
call sub_40617C  +
pop ecx  +
pop ebp  +
retn   +
***
cmp dword_4D4B14 0 +
push ebx  +
mov ebx [ebp+arg_0] +
test ebx ebx +
jnz loc_405629  +
push 143h  +
push offset a_Drawlib_c  +
push offset aAssertionFaile  +
push offset stream  +
call _fprintf  +
add esp 10h +
push offset aThisIsABugPlea  +
push offset stream  +
call _fprintf  +
add esp 8 +
push 1  +
call _exit  +
pop ecx  +
mov eax [ebx+8] +
push eax  +
call sub_41BF54  +
pop ecx  +
mov cl [ebx+29h] +
test cl cl +
jnz loc_40563E  +
xor eax eax +
jmp loc_405653  +
movsx eax cl +
add eax eax +
add eax 6 +
imul  dword_4CDD34 +
cdq   +
idiv  dword_4CDD38 +
mov ecx dword_4EADA0 +
add ecx eax +
mov dword_4EAD30 ecx +
add eax dword_4EADA4 +
mov dword_4EAD34 eax +
pop ebx  +
pop ebp  +
retn   +
***
add esp 0FFFFFFC8h +
mov ecx dword_4EBDA4 +
push ebx  +
push esi  +
push edi  +
mov ebx dword_4EADA8 +
mov edi [ebp+arg_0] +
mov esi dword_4EADAC +
mov eax [edi+1Ch] +
imul  ecx +
cdq   +
idiv  dword_4EBDA0 +
mov [ebp+var_C] eax +
mov [ebp+var_18] eax +
mov eax [edi+18h] +
imul  ecx +
cdq   +
idiv  dword_4EBDA0 +
mov [ebp+var_10] eax +
mov [ebp+var_14] eax +
cmp ebx dword_4EB628 +
jge loc_405BEC  +
cmp esi dword_4EB630 +
jge loc_405BEC  +
mov edx [ebp+var_14] +
add edx ebx +
cmp edx dword_4EB624 +
jl loc_405BEC  +
mov ecx [ebp+var_18] +
add ecx esi +
cmp ecx dword_4EB62C +
jl loc_405BEC  +
mov eax dword_4CDD84 +
cmp eax 5 +
ja loc_4059D3  +
jmp ds:off_405701[eax*4]  +
cmp [ebp+var_14] 3 +
jle loc_405729  +
cmp [ebp+var_18] 3 +
jg loc_4059D3  +
cmp byte ptr [edi+29h] 0 +
jnz loc_40576D  +
cmp dword_4D4C30 0 +
jz loc_405754  +
movsx edx byte ptr [edi+2Bh] +
push edx  +
mov ecx [ebp+var_18] +
push ecx  +
mov eax [ebp+var_14] +
push eax  +
push esi  +
push ebx  +
call sub_42AA60  +
add esp 14h +
jmp loc_405BEC  +
push 0  +
mov edx [ebp+var_18] +
push edx  +
mov ecx [ebp+var_14] +
push ecx  +
push esi  +
push ebx  +
call sub_42AA60  +
add esp 14h +
jmp loc_405BEC  +
cmp dword_4D4C30 0 +
jz loc_405792  +
movsx eax byte ptr [edi+2Dh] +
push eax  +
mov edx [ebp+var_18] +
push edx  +
mov ecx [ebp+var_14] +
push ecx  +
push esi  +
push ebx  +
call sub_42AA60  +
add esp 14h +
jmp loc_405BEC  +
push 1Fh  +
mov eax [ebp+var_18] +
push eax  +
mov edx [ebp+var_14] +
push edx  +
push esi  +
push ebx  +
call sub_42AA60  +
add esp 14h +
jmp loc_405BEC  +
lea ecx [ebp+var_2C] +
push ecx  +
lea eax [ebp+var_1C] +
push eax  +
push esi  +
push ebx  +
call sub_41E618  +
add esp 10h +
lea edx [ebp+var_30] +
push edx  +
lea ecx [ebp+var_20] +
push ecx  +
mov eax [ebp+var_18] +
add eax esi +
push eax  +
mov edx [ebp+var_14] +
add edx ebx +
push edx  +
call sub_41E618  +
add esp 10h +
mov ecx [ebp+var_20] +
sub ecx [ebp+var_1C] +
test ecx ecx +
jle loc_405BEC  +
mov eax [ebp+var_30] +
sub eax [ebp+var_2C] +
test eax eax +
jle loc_405BEC  +
mov edx [ebp+var_20] +
sub edx [ebp+var_1C] +
cmp edx 3 +
jle loc_40580F  +
mov ecx [ebp+var_30] +
sub ecx [ebp+var_2C] +
cmp ecx 3 +
jg loc_4059D3  +
cmp byte ptr [edi+29h] 0 +
jnz loc_405853  +
cmp dword_4D4C30 0 +
jz loc_40583A  +
movsx eax byte ptr [edi+2Bh] +
push eax  +
mov edx [ebp+var_18] +
push edx  +
mov ecx [ebp+var_14] +
push ecx  +
push esi  +
push ebx  +
call sub_42AA60  +
add esp 14h +
jmp loc_405BEC  +
push 0  +
mov eax [ebp+var_18] +
push eax  +
mov edx [ebp+var_14] +
push edx  +
push esi  +
push ebx  +
call sub_42AA60  +
add esp 14h +
jmp loc_405BEC  +
cmp dword_4D4C30 0 +
jz loc_405878  +
movsx ecx byte ptr [edi+2Dh] +
push ecx  +
mov eax [ebp+var_18] +
push eax  +
mov edx [ebp+var_14] +
push edx  +
push esi  +
push ebx  +
call sub_42AA60  +
add esp 14h +
jmp loc_405BEC  +
push 1Fh  +
mov ecx [ebp+var_18] +
push ecx  +
mov eax [ebp+var_14] +
push eax  +
push esi  +
push ebx  +
call sub_42AA60  +
add esp 14h +
jmp loc_405BEC  +
lea edx [ebp+var_2C] +
push edx  +
lea ecx [ebp+var_1C] +
push ecx  +
push esi  +
push ebx  +
call sub_41E618  +
add esp 10h +
lea eax [ebp+var_30] +
push eax  +
lea edx [ebp+var_20] +
push edx  +
mov ecx [ebp+var_18] +
add ecx esi +
push ecx  +
push ebx  +
call sub_41E618  +
add esp 10h +
lea eax [ebp+var_34] +
push eax  +
lea edx [ebp+var_24] +
push edx  +
mov ecx [ebp+var_18] +
add ecx esi +
push ecx  +
mov eax [ebp+var_14] +
add eax ebx +
push eax  +
call sub_41E618  +
add esp 10h +
lea edx [ebp+var_38] +
push edx  +
lea ecx [ebp+var_28] +
push ecx  +
push esi  +
mov eax [ebp+var_14] +
add eax ebx +
push eax  +
call sub_41E618  +
add esp 10h +
mov edx [ebp+var_30] +
sub edx [ebp+var_2C] +
test edx edx +
jg loc_405905  +
mov ecx [ebp+var_34] +
sub ecx [ebp+var_38] +
test ecx ecx +
jle loc_405BEC  +
mov eax [ebp+var_28] +
sub eax [ebp+var_1C] +
test eax eax +
jg loc_40591D  +
mov edx [ebp+var_24] +
sub edx [ebp+var_20] +
test edx edx +
jle loc_405BEC  +
mov ecx [ebp+var_30] +
sub ecx [ebp+var_2C] +
cmp ecx 3 +
jg loc_405933  +
mov eax [ebp+var_34] +
sub eax [ebp+var_38] +
cmp eax 3 +
jle loc_405951  +
mov edx [ebp+var_28] +
sub edx [ebp+var_1C] +
cmp edx 3 +
jg loc_4059D3  +
mov ecx [ebp+var_24] +
sub ecx [ebp+var_20] +
cmp ecx 3 +
jg loc_4059D3  +
cmp byte ptr [edi+29h] 0 +
jnz loc_405995  +
cmp dword_4D4C30 0 +
jz loc_40597C  +
movsx eax byte ptr [edi+2Bh] +
push eax  +
mov edx [ebp+var_18] +
push edx  +
mov ecx [ebp+var_14] +
push ecx  +
push esi  +
push ebx  +
call sub_42AA60  +
add esp 14h +
jmp loc_405BEC  +
push 0  +
mov eax [ebp+var_18] +
push eax  +
mov edx [ebp+var_14] +
push edx  +
push esi  +
push ebx  +
call sub_42AA60  +
add esp 14h +
jmp loc_405BEC  +
cmp dword_4D4C30 0 +
jz loc_4059BA  +
movsx ecx byte ptr [edi+2Dh] +
push ecx  +
mov eax [ebp+var_18] +
push eax  +
mov edx [ebp+var_14] +
push edx  +
push esi  +
push ebx  +
call sub_42AA60  +
add esp 14h +
jmp loc_405BEC  +
push 1Fh  +
mov ecx [ebp+var_18] +
push ecx  +
mov eax [ebp+var_14] +
push eax  +
push esi  +
push ebx  +
call sub_42AA60  +
add esp 14h +
jmp loc_405BEC  +
mov eax dword_4EB624 +
cmp ebx eax +
jge loc_4059E6  +
add ebx [ebp+var_14] +
sub ebx eax +
mov [ebp+var_14] ebx +
mov ebx eax +
mov edx [ebp+var_14] +
add edx ebx +
mov eax dword_4EB628 +
cmp edx eax +
jl loc_4059FA  +
sub eax ebx +
dec eax  +
mov [ebp+var_14] eax +
mov eax dword_4EB62C +
cmp esi eax +
jge loc_405A0D  +
add esi [ebp+var_18] +
sub esi eax +
mov [ebp+var_18] esi +
mov esi eax +
mov edx [ebp+var_18] +
add edx esi +
mov eax dword_4EB630 +
cmp edx eax +
jl loc_405A21  +
sub eax esi +
dec eax  +
mov [ebp+var_18] eax +
mov cl [edi+29h] +
test cl cl +
jnz loc_405A34  +
xor eax eax +
mov [ebp+var_4] eax +
xor edx edx +
mov [ebp+var_8] edx +
jmp loc_405A6B  +
movsx eax cl +
imul  dword_4CDD34 +
cdq   +
idiv  dword_4CDD38 +
mov [ebp+var_4] eax +
cmp [ebp+var_4] 1 +
jge loc_405A54  +
mov [ebp+var_4] 1 +
movsx eax byte ptr [edi+29h] +
add eax 3 +
imul  dword_4CDD34 +
cdq   +
idiv  dword_4CDD38 +
mov [ebp+var_8] eax +
cmp dword_4D4C30 0 +
jz loc_405ABF  +
movsx eax byte ptr [edi+2Bh] +
mov dword_4EAD2C eax +
push eax  +
mov edx [ebp+var_18] +
push edx  +
mov ecx [ebp+var_14] +
push ecx  +
push esi  +
push ebx  +
call sub_42AA60  +
add esp 14h +
cmp [ebp+var_4] 0 +
jz loc_405B03  +
movsx eax byte ptr [edi+2Dh] +
push eax  +
mov edx [ebp+var_4] +
push edx  +
mov edx dword_4EADAC +
mov ecx [ebp+var_C] +
push ecx  +
mov ecx dword_4EADA8 +
mov eax [ebp+var_10] +
push eax  +
push edx  +
push ecx  +
call sub_406F44  +
add esp 18h +
jmp loc_405B03  +
push 0  +
xor eax eax +
mov edx [ebp+var_18] +
mov dword_4EAD2C eax +
push edx  +
mov ecx [ebp+var_14] +
push ecx  +
push esi  +
push ebx  +
call sub_42AA60  +
add esp 14h +
cmp [ebp+var_4] 0 +
jz loc_405B03  +
push 1Fh  +
mov eax [ebp+var_4] +
push eax  +
mov eax dword_4EADAC +
mov edx [ebp+var_C] +
push edx  +
mov edx dword_4EADA8 +
mov ecx [ebp+var_10] +
push ecx  +
push eax  +
push edx  +
call sub_406F44  +
add esp 18h +
mov eax dword_4CDD38 +
test eax eax +
jz loc_405BEC  +
mov edx dword_4CDD3C +
mov ecx dword_4CDD40 +
imul ecx dword_4CDD34 +
imul edx eax +
cmp edx ecx +
jg loc_405BEC  +
mov eax [edi+8] +
push eax  +
call sub_41BF54  +
pop ecx  +
mov dl [edi+28h] +
dec dl  +
jz loc_405B45  +
dec dl  +
jz loc_405B66  +
jmp loc_405B96  +
mov ecx [ebp+var_8] +
add dword_4EADA8 ecx +
mov eax [ebp+var_C] +
sub eax dword_4EADA4 +
sar eax 1 +
jns loc_405B5E  +
adc eax 0 +
add dword_4EADAC eax +
jmp loc_405BC2  +
mov edx dword_4EADA8 +
sub edx [ebp+var_8] +
add edx [ebp+var_10] +
sub edx dword_4EADA0 +
mov dword_4EADA8 edx +
mov ecx [ebp+var_C] +
sub ecx dword_4EADA4 +
sar ecx 1 +
jns loc_405B8E  +
adc ecx 0 +
add dword_4EADAC ecx +
jmp loc_405BC2  +
mov eax [ebp+var_10] +
sub eax dword_4EADA0 +
sar eax 1 +
jns loc_405BA6  +
adc eax 0 +
add dword_4EADA8 eax +
mov edx [ebp+var_C] +
sub edx dword_4EADA4 +
sar edx 1 +
jns loc_405BBC  +
adc edx 0 +
add dword_4EADAC edx +
cmp dword_4D4C30 0 +
jz loc_405BDE  +
movsx ecx byte ptr [edi+2Ch] +
push ecx  +
mov eax [edi+8] +
push eax  +
call sub_41BC44  +
add esp 8 +
jmp loc_405BEC  +
push 1Fh  +
mov edx [edi+8] +
push edx  +
call sub_41BC44  +
add esp 8 +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
add esp 0FFFFFFC8h +
mov ecx dword_4EBDA4 +
push ebx  +
push esi  +
push edi  +
mov ebx dword_4EADA8 +
mov edi [ebp+arg_0] +
mov esi dword_4EADAC +
mov eax [edi+1Ch] +
imul  ecx +
cdq   +
idiv  dword_4EBDA0 +
mov [ebp+var_C] eax +
mov [ebp+var_18] eax +
mov eax [edi+18h] +
imul  ecx +
cdq   +
idiv  dword_4EBDA0 +
mov [ebp+var_10] eax +
mov [ebp+var_14] eax +
cmp ebx dword_4EB628 +
jge loc_406173  +
cmp esi dword_4EB630 +
jge loc_406173  +
mov edx [ebp+var_14] +
add edx ebx +
cmp edx dword_4EB624 +
jl loc_406173  +
mov ecx [ebp+var_18] +
add ecx esi +
cmp ecx dword_4EB62C +
jl loc_406173  +
mov eax dword_4CDD84 +
cmp eax 5 +
ja loc_405F57  +
jmp ds:off_405C85[eax*4]  +
cmp [ebp+var_14] 3 +
jle loc_405CAD  +
cmp [ebp+var_18] 3 +
jg loc_405F57  +
cmp byte ptr [edi+29h] 0 +
jnz loc_405CF1  +
cmp dword_4D4C30 0 +
jz loc_405CD8  +
movsx edx byte ptr [edi+2Dh] +
push edx  +
mov ecx [ebp+var_18] +
push ecx  +
mov eax [ebp+var_14] +
push eax  +
push esi  +
push ebx  +
call sub_42AA60  +
add esp 14h +
jmp loc_406173  +
push 1Fh  +
mov edx [ebp+var_18] +
push edx  +
mov ecx [ebp+var_14] +
push ecx  +
push esi  +
push ebx  +
call sub_42AA60  +
add esp 14h +
jmp loc_406173  +
cmp dword_4D4C30 0 +
jz loc_405D16  +
movsx eax byte ptr [edi+2Bh] +
push eax  +
mov edx [ebp+var_18] +
push edx  +
mov ecx [ebp+var_14] +
push ecx  +
push esi  +
push ebx  +
call sub_42AA60  +
add esp 14h +
jmp loc_406173  +
push 0  +
mov eax [ebp+var_18] +
push eax  +
mov edx [ebp+var_14] +
push edx  +
push esi  +
push ebx  +
call sub_42AA60  +
add esp 14h +
jmp loc_406173  +
lea ecx [ebp+var_2C] +
push ecx  +
lea eax [ebp+var_1C] +
push eax  +
push esi  +
push ebx  +
call sub_41E618  +
add esp 10h +
lea edx [ebp+var_30] +
push edx  +
lea ecx [ebp+var_20] +
push ecx  +
mov eax [ebp+var_18] +
add eax esi +
push eax  +
mov edx [ebp+var_14] +
add edx ebx +
push edx  +
call sub_41E618  +
add esp 10h +
mov ecx [ebp+var_20] +
sub ecx [ebp+var_1C] +
test ecx ecx +
jle loc_406173  +
mov eax [ebp+var_30] +
sub eax [ebp+var_2C] +
test eax eax +
jle loc_406173  +
mov edx [ebp+var_20] +
sub edx [ebp+var_1C] +
cmp edx 3 +
jle loc_405D93  +
mov ecx [ebp+var_30] +
sub ecx [ebp+var_2C] +
cmp ecx 3 +
jg loc_405F57  +
cmp byte ptr [edi+29h] 0 +
jnz loc_405DD7  +
cmp dword_4D4C30 0 +
jz loc_405DBE  +
movsx eax byte ptr [edi+2Dh] +
push eax  +
mov edx [ebp+var_18] +
push edx  +
mov ecx [ebp+var_14] +
push ecx  +
push esi  +
push ebx  +
call sub_42AA60  +
add esp 14h +
jmp loc_406173  +
push 1Fh  +
mov eax [ebp+var_18] +
push eax  +
mov edx [ebp+var_14] +
push edx  +
push esi  +
push ebx  +
call sub_42AA60  +
add esp 14h +
jmp loc_406173  +
cmp dword_4D4C30 0 +
jz loc_405DFC  +
movsx ecx byte ptr [edi+2Bh] +
push ecx  +
mov eax [ebp+var_18] +
push eax  +
mov edx [ebp+var_14] +
push edx  +
push esi  +
push ebx  +
call sub_42AA60  +
add esp 14h +
jmp loc_406173  +
push 0  +
mov ecx [ebp+var_18] +
push ecx  +
mov eax [ebp+var_14] +
push eax  +
push esi  +
push ebx  +
call sub_42AA60  +
add esp 14h +
jmp loc_406173  +
lea edx [ebp+var_2C] +
push edx  +
lea ecx [ebp+var_1C] +
push ecx  +
push esi  +
push ebx  +
call sub_41E618  +
add esp 10h +
lea eax [ebp+var_30] +
push eax  +
lea edx [ebp+var_20] +
push edx  +
mov ecx [ebp+var_18] +
add ecx esi +
push ecx  +
push ebx  +
call sub_41E618  +
add esp 10h +
lea eax [ebp+var_34] +
push eax  +
lea edx [ebp+var_24] +
push edx  +
mov ecx [ebp+var_18] +
add ecx esi +
push ecx  +
mov eax [ebp+var_14] +
add eax ebx +
push eax  +
call sub_41E618  +
add esp 10h +
lea edx [ebp+var_38] +
push edx  +
lea ecx [ebp+var_28] +
push ecx  +
push esi  +
mov eax [ebp+var_14] +
add eax ebx +
push eax  +
call sub_41E618  +
add esp 10h +
mov edx [ebp+var_30] +
sub edx [ebp+var_2C] +
test edx edx +
jg loc_405E89  +
mov ecx [ebp+var_34] +
sub ecx [ebp+var_38] +
test ecx ecx +
jle loc_406173  +
mov eax [ebp+var_28] +
sub eax [ebp+var_1C] +
test eax eax +
jg loc_405EA1  +
mov edx [ebp+var_24] +
sub edx [ebp+var_20] +
test edx edx +
jle loc_406173  +
mov ecx [ebp+var_30] +
sub ecx [ebp+var_2C] +
cmp ecx 3 +
jg loc_405EB7  +
mov eax [ebp+var_34] +
sub eax [ebp+var_38] +
cmp eax 3 +
jle loc_405ED5  +
mov edx [ebp+var_28] +
sub edx [ebp+var_1C] +
cmp edx 3 +
jg loc_405F57  +
mov ecx [ebp+var_24] +
sub ecx [ebp+var_20] +
cmp ecx 3 +
jg loc_405F57  +
cmp byte ptr [edi+29h] 0 +
jnz loc_405F19  +
cmp dword_4D4C30 0 +
jz loc_405F00  +
movsx eax byte ptr [edi+2Bh] +
push eax  +
mov edx [ebp+var_18] +
push edx  +
mov ecx [ebp+var_14] +
push ecx  +
push esi  +
push ebx  +
call sub_42AA60  +
add esp 14h +
jmp loc_406173  +
push 0  +
mov eax [ebp+var_18] +
push eax  +
mov edx [ebp+var_14] +
push edx  +
push esi  +
push ebx  +
call sub_42AA60  +
add esp 14h +
jmp loc_406173  +
cmp dword_4D4C30 0 +
jz loc_405F3E  +
movsx ecx byte ptr [edi+2Dh] +
push ecx  +
mov eax [ebp+var_18] +
push eax  +
mov edx [ebp+var_14] +
push edx  +
push esi  +
push ebx  +
call sub_42AA60  +
add esp 14h +
jmp loc_406173  +
push 1Fh  +
mov ecx [ebp+var_18] +
push ecx  +
mov eax [ebp+var_14] +
push eax  +
push esi  +
push ebx  +
call sub_42AA60  +
add esp 14h +
jmp loc_406173  +
mov eax dword_4EB624 +
cmp ebx eax +
jge loc_405F6A  +
add ebx [ebp+var_14] +
sub ebx eax +
mov [ebp+var_14] ebx +
mov ebx eax +
mov edx [ebp+var_14] +
add edx ebx +
mov eax dword_4EB628 +
cmp edx eax +
jl loc_405F7E  +
sub eax ebx +
dec eax  +
mov [ebp+var_14] eax +
mov eax dword_4EB62C +
cmp esi eax +
jge loc_405F91  +
add esi [ebp+var_18] +
sub esi eax +
mov [ebp+var_18] esi +
mov esi eax +
mov edx [ebp+var_18] +
add edx esi +
mov eax dword_4EB630 +
cmp edx eax +
jl loc_405FA5  +
sub eax esi +
dec eax  +
mov [ebp+var_18] eax +
mov cl [edi+29h] +
test cl cl +
jnz loc_405FB8  +
xor eax eax +
mov [ebp+var_4] eax +
xor edx edx +
mov [ebp+var_8] edx +
jmp loc_405FEF  +
movsx eax cl +
imul  dword_4CDD34 +
cdq   +
idiv  dword_4CDD38 +
mov [ebp+var_4] eax +
cmp [ebp+var_4] 1 +
jge loc_405FD8  +
mov [ebp+var_4] 1 +
movsx eax byte ptr [edi+29h] +
add eax 3 +
imul  dword_4CDD34 +
cdq   +
idiv  dword_4CDD38 +
mov [ebp+var_8] eax +
cmp dword_4D4C30 0 +
jz loc_406043  +
movsx eax byte ptr [edi+2Dh] +
mov dword_4EAD2C eax +
push eax  +
mov edx [ebp+var_18] +
push edx  +
mov ecx [ebp+var_14] +
push ecx  +
push esi  +
push ebx  +
call sub_42AA60  +
add esp 14h +
cmp [ebp+var_4] 0 +
jz loc_40608A  +
movsx eax byte ptr [edi+2Bh] +
push eax  +
mov edx [ebp+var_4] +
push edx  +
mov edx dword_4EADAC +
mov ecx [ebp+var_C] +
push ecx  +
mov ecx dword_4EADA8 +
mov eax [ebp+var_10] +
push eax  +
push edx  +
push ecx  +
call sub_406F44  +
add esp 18h +
jmp loc_40608A  +
mov dword_4EAD2C 1Fh +
push 1Fh  +
mov eax [ebp+var_18] +
push eax  +
mov edx [ebp+var_14] +
push edx  +
push esi  +
push ebx  +
call sub_42AA60  +
add esp 14h +
cmp [ebp+var_4] 0 +
jz loc_40608A  +
push 0  +
mov ecx [ebp+var_4] +
push ecx  +
mov ecx dword_4EADAC +
mov eax [ebp+var_C] +
push eax  +
mov eax dword_4EADA8 +
mov edx [ebp+var_10] +
push edx  +
push ecx  +
push eax  +
call sub_406F44  +
add esp 18h +
mov eax dword_4CDD38 +
test eax eax +
jz loc_406173  +
mov edx dword_4CDD3C +
mov ecx dword_4CDD40 +
imul ecx dword_4CDD34 +
imul edx eax +
cmp edx ecx +
jg loc_406173  +
mov eax [edi+8] +
push eax  +
call sub_41BF54  +
pop ecx  +
mov dl [edi+28h] +
dec dl  +
jz loc_4060CC  +
dec dl  +
jz loc_4060ED  +
jmp loc_40611D  +
mov ecx [ebp+var_8] +
add dword_4EADA8 ecx +
mov eax [ebp+var_C] +
sub eax dword_4EADA4 +
sar eax 1 +
jns loc_4060E5  +
adc eax 0 +
add dword_4EADAC eax +
jmp loc_406149  +
mov edx dword_4EADA8 +
sub edx [ebp+var_8] +
add edx [ebp+var_10] +
sub edx dword_4EADA0 +
mov dword_4EADA8 edx +
mov ecx [ebp+var_C] +
sub ecx dword_4EADA4 +
sar ecx 1 +
jns loc_406115  +
adc ecx 0 +
add dword_4EADAC ecx +
jmp loc_406149  +
mov eax [ebp+var_10] +
sub eax dword_4EADA0 +
sar eax 1 +
jns loc_40612D  +
adc eax 0 +
add dword_4EADA8 eax +
mov edx [ebp+var_C] +
sub edx dword_4EADA4 +
sar edx 1 +
jns loc_406143  +
adc edx 0 +
add dword_4EADAC edx +
cmp dword_4D4C30 0 +
jz loc_406165  +
movsx ecx byte ptr [edi+2Bh] +
push ecx  +
mov eax [edi+8] +
push eax  +
call sub_41BC44  +
add esp 8 +
jmp loc_406173  +
push 0  +
mov edx [edi+8] +
push edx  +
call sub_41BC44  +
add esp 8 +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
add esp 0FFFFFFCCh +
mov ecx dword_4EBDA4 +
push ebx  +
push esi  +
push edi  +
mov edi dword_4EBDA0 +
mov eax [ebp+arg_0] +
mov ebx dword_4EADA8 +
mov esi dword_4EADAC +
mov eax [eax+1Ch] +
imul  ecx +
cdq   +
idiv  edi +
mov [ebp+var_C] eax +
mov [ebp+var_14] eax +
mov eax [ebp+arg_0] +
mov eax [eax+18h] +
imul  ecx +
cdq   +
idiv  edi +
cmp ebx dword_4EB628 +
mov [ebp+var_10] eax +
mov edi eax +
jge loc_406757  +
cmp esi dword_4EB630 +
jge loc_406757  +
lea edx [edi+ebx] +
cmp edx dword_4EB624 +
jl loc_406757  +
mov ecx [ebp+var_14] +
add ecx esi +
cmp ecx dword_4EB62C +
jl loc_406757  +
mov eax dword_4CDD84 +
cmp eax 5 +
ja loc_4064C9  +
jmp ds:off_40620B[eax*4]  +
cmp edi 3 +
jle loc_406232  +
cmp [ebp+var_14] 3 +
jg loc_4064C9  +
mov edx [ebp+arg_0] +
cmp byte ptr [edx+29h] 0 +
jnz loc_406276  +
cmp dword_4D4C30 0 +
jz loc_406260  +
mov ecx [ebp+arg_0] +
movsx eax byte ptr [ecx+2Bh] +
push eax  +
mov edx [ebp+var_14] +
push edx  +
push edi  +
push esi  +
push ebx  +
call sub_42AA60  +
add esp 14h +
jmp loc_406757  +
push 0  +
mov ecx [ebp+var_14] +
push ecx  +
push edi  +
push esi  +
push ebx  +
call sub_42AA60  +
add esp 14h +
jmp loc_406757  +
cmp dword_4D4C30 0 +
jz loc_40629B  +
mov eax [ebp+arg_0] +
movsx edx byte ptr [eax+2Dh] +
push edx  +
mov ecx [ebp+var_14] +
push ecx  +
push edi  +
push esi  +
push ebx  +
call sub_42AA60  +
add esp 14h +
jmp loc_406757  +
push 1Fh  +
mov eax [ebp+var_14] +
push eax  +
push edi  +
push esi  +
push ebx  +
call sub_42AA60  +
add esp 14h +
jmp loc_406757  +
lea edx [ebp+var_28] +
push edx  +
lea ecx [ebp+var_18] +
push ecx  +
push esi  +
push ebx  +
call sub_41E618  +
add esp 10h +
lea eax [ebp+var_2C] +
push eax  +
lea edx [ebp+var_1C] +
push edx  +
mov ecx [ebp+var_14] +
add ecx esi +
push ecx  +
lea eax [edi+ebx] +
push eax  +
call sub_41E618  +
add esp 10h +
mov edx [ebp+var_1C] +
sub edx [ebp+var_18] +
test edx edx +
jle loc_406757  +
mov ecx [ebp+var_2C] +
sub ecx [ebp+var_28] +
test ecx ecx +
jle loc_406757  +
mov eax [ebp+var_1C] +
sub eax [ebp+var_18] +
cmp eax 3 +
jle loc_406313  +
mov edx [ebp+var_2C] +
sub edx [ebp+var_28] +
cmp edx 3 +
jg loc_4064C9  +
mov ecx [ebp+arg_0] +
cmp byte ptr [ecx+29h] 0 +
jnz loc_406357  +
cmp dword_4D4C30 0 +
jz loc_406341  +
mov eax [ebp+arg_0] +
movsx edx byte ptr [eax+2Bh] +
push edx  +
mov ecx [ebp+var_14] +
push ecx  +
push edi  +
push esi  +
push ebx  +
call sub_42AA60  +
add esp 14h +
jmp loc_406757  +
push 0  +
mov eax [ebp+var_14] +
push eax  +
push edi  +
push esi  +
push ebx  +
call sub_42AA60  +
add esp 14h +
jmp loc_406757  +
cmp dword_4D4C30 0 +
jz loc_40637C  +
mov edx [ebp+arg_0] +
movsx ecx byte ptr [edx+2Dh] +
push ecx  +
mov eax [ebp+var_14] +
push eax  +
push edi  +
push esi  +
push ebx  +
call sub_42AA60  +
add esp 14h +
jmp loc_406757  +
push 1Fh  +
mov edx [ebp+var_14] +
push edx  +
push edi  +
push esi  +
push ebx  +
call sub_42AA60  +
add esp 14h +
jmp loc_406757  +
lea ecx [ebp+var_28] +
push ecx  +
lea eax [ebp+var_18] +
push eax  +
push esi  +
push ebx  +
call sub_41E618  +
add esp 10h +
lea edx [ebp+var_2C] +
push edx  +
lea ecx [ebp+var_1C] +
push ecx  +
mov eax [ebp+var_14] +
add eax esi +
push eax  +
push ebx  +
call sub_41E618  +
add esp 10h +
lea edx [ebp+var_30] +
push edx  +
lea ecx [ebp+var_20] +
push ecx  +
mov eax [ebp+var_14] +
add eax esi +
push eax  +
lea edx [edi+ebx] +
push edx  +
call sub_41E618  +
add esp 10h +
lea ecx [ebp+var_34] +
lea eax [ebp+var_24] +
lea edx [edi+ebx] +
push ecx  +
push eax  +
push esi  +
push edx  +
call sub_41E618  +
add esp 10h +
mov ecx [ebp+var_2C] +
sub ecx [ebp+var_28] +
test ecx ecx +
jg loc_406402  +
mov eax [ebp+var_30] +
sub eax [ebp+var_34] +
test eax eax +
jle loc_406757  +
mov edx [ebp+var_24] +
sub edx [ebp+var_18] +
test edx edx +
jg loc_40641A  +
mov ecx [ebp+var_20] +
sub ecx [ebp+var_1C] +
test ecx ecx +
jle loc_406757  +
mov eax [ebp+var_2C] +
sub eax [ebp+var_28] +
cmp eax 3 +
jg loc_406430  +
mov edx [ebp+var_30] +
sub edx [ebp+var_34] +
cmp edx 3 +
jle loc_40644A  +
mov ecx [ebp+var_24] +
sub ecx [ebp+var_18] +
cmp ecx 3 +
jg loc_4064C9  +
mov eax [ebp+var_20] +
sub eax [ebp+var_1C] +
cmp eax 3 +
jg loc_4064C9  +
mov edx [ebp+arg_0] +
cmp byte ptr [edx+29h] 0 +
jnz loc_40648E  +
cmp dword_4D4C30 0 +
jz loc_406478  +
mov ecx [ebp+arg_0] +
movsx eax byte ptr [ecx+2Bh] +
push eax  +
mov edx [ebp+var_14] +
push edx  +
push edi  +
push esi  +
push ebx  +
call sub_42AA60  +
add esp 14h +
jmp loc_406757  +
push 0  +
mov ecx [ebp+var_14] +
push ecx  +
push edi  +
push esi  +
push ebx  +
call sub_42AA60  +
add esp 14h +
jmp loc_406757  +
cmp dword_4D4C30 0 +
jz loc_4064B3  +
mov eax [ebp+arg_0] +
movsx edx byte ptr [eax+2Dh] +
push edx  +
mov ecx [ebp+var_14] +
push ecx  +
push edi  +
push esi  +
push ebx  +
call sub_42AA60  +
add esp 14h +
jmp loc_406757  +
push 1Fh  +
mov eax [ebp+var_14] +
push eax  +
push edi  +
push esi  +
push ebx  +
call sub_42AA60  +
add esp 14h +
jmp loc_406757  +
mov eax dword_4EB624 +
cmp ebx eax +
jge loc_4064D8  +
add edi ebx +
mov ebx eax +
sub edi eax +
lea edx [edi+ebx] +
mov eax dword_4EB628 +
cmp edx eax +
jl loc_4064E9  +
mov edi eax +
sub edi ebx +
dec edi  +
mov eax dword_4EB62C +
cmp esi eax +
jge loc_4064FC  +
add esi [ebp+var_14] +
sub esi eax +
mov [ebp+var_14] esi +
mov esi eax +
mov edx [ebp+var_14] +
add edx esi +
mov eax dword_4EB630 +
cmp edx eax +
jl loc_406510  +
sub eax esi +
dec eax  +
mov [ebp+var_14] eax +
mov ecx [ebp+arg_0] +
mov cl [ecx+29h] +
test cl cl +
jnz loc_406526  +
xor eax eax +
mov [ebp+var_4] eax +
xor edx edx +
mov [ebp+var_8] edx +
jmp loc_406560  +
movsx eax cl +
imul  dword_4CDD34 +
cdq   +
idiv  dword_4CDD38 +
mov [ebp+var_4] eax +
cmp [ebp+var_4] 1 +
jge loc_406546  +
mov [ebp+var_4] 1 +
mov ecx [ebp+arg_0] +
movsx eax byte ptr [ecx+29h] +
add eax 3 +
imul  dword_4CDD34 +
cdq   +
idiv  dword_4CDD38 +
mov [ebp+var_8] eax +
cmp dword_4D4C30 0 +
jz loc_4065F1  +
mov ecx [ebp+arg_0] +
movsx eax byte ptr [ecx+2Dh] +
mov dword_4EAD2C eax +
push eax  +
mov edx [ebp+var_14] +
push edx  +
mov ecx edi +
sar ecx 1 +
jns loc_406587  +
adc ecx 0 +
push ecx  +
push esi  +
push ebx  +
call sub_42AA60  +
add esp 14h +
mov eax [ebp+arg_0] +
movsx edx byte ptr [eax+2Bh] +
push edx  +
mov ecx [ebp+var_14] +
push ecx  +
mov eax edi +
sar eax 1 +
jns loc_4065A7  +
adc eax 0 +
push eax  +
push esi  +
sar edi 1 +
jns loc_4065B0  +
adc edi 0 +
add ebx edi +
inc ebx  +
push ebx  +
call sub_42AA60  +
add esp 14h +
cmp [ebp+var_4] 0 +
jz loc_406661  +
mov edx [ebp+arg_0] +
movsx ecx byte ptr [edx+2Dh] +
push ecx  +
mov eax [ebp+var_4] +
push eax  +
mov eax dword_4EADAC +
mov edx [ebp+var_C] +
push edx  +
mov edx dword_4EADA8 +
mov ecx [ebp+var_10] +
push ecx  +
push eax  +
push edx  +
call sub_406F44  +
add esp 18h +
jmp loc_406661  +
mov eax 1Fh +
mov dword_4EAD2C eax +
push eax  +
mov edx [ebp+var_14] +
push edx  +
mov ecx edi +
sar ecx 1 +
jns loc_406609  +
adc ecx 0 +
push ecx  +
push esi  +
push ebx  +
call sub_42AA60  +
add esp 14h +
mov edx edi +
sar edx 1 +
push 0  +
mov eax [ebp+var_14] +
push eax  +
jns loc_406623  +
adc edx 0 +
push edx  +
push esi  +
sar edi 1 +
jns loc_40662C  +
adc edi 0 +
add ebx edi +
inc ebx  +
push ebx  +
call sub_42AA60  +
add esp 14h +
cmp [ebp+var_4] 0 +
jz loc_406661  +
push 1Fh  +
mov ecx [ebp+var_4] +
push ecx  +
mov ecx dword_4EADAC +
mov eax [ebp+var_C] +
push eax  +
mov eax dword_4EADA8 +
mov edx [ebp+var_10] +
push edx  +
push ecx  +
push eax  +
call sub_406F44  +
add esp 18h +
mov eax dword_4CDD38 +
test eax eax +
jz loc_406757  +
mov edx dword_4CDD3C +
mov ecx dword_4CDD40 +
imul ecx dword_4CDD34 +
imul edx eax +
cmp edx ecx +
jg loc_406757  +
mov eax [ebp+arg_0] +
mov edx [eax+8] +
push edx  +
call sub_41BF54  +
pop ecx  +
mov ecx [ebp+arg_0] +
mov al [ecx+28h] +
dec al  +
jz loc_4066A9  +
dec al  +
jz loc_4066CA  +
jmp loc_4066F8  +
mov edx [ebp+var_8] +
add dword_4EADA8 edx +
mov ecx [ebp+var_C] +
sub ecx dword_4EADA4 +
sar ecx 1 +
jns loc_4066C2  +
adc ecx 0 +
add dword_4EADAC ecx +
jmp loc_406724  +
mov eax dword_4EADA8 +
sub eax [ebp+var_8] +
add eax [ebp+var_10] +
sub eax dword_4EADA0 +
mov dword_4EADA8 eax +
mov edx [ebp+var_C] +
sub edx dword_4EADA4 +
sar edx 1 +
jns loc_4066F0  +
adc edx 0 +
add dword_4EADAC edx +
jmp loc_406724  +
mov ecx [ebp+var_10] +
sub ecx dword_4EADA0 +
sar ecx 1 +
jns loc_406708  +
adc ecx 0 +
add dword_4EADA8 ecx +
mov eax [ebp+var_C] +
sub eax dword_4EADA4 +
sar eax 1 +
jns loc_40671E  +
adc eax 0 +
add dword_4EADAC eax +
cmp dword_4D4C30 0 +
jz loc_406746  +
mov edx [ebp+arg_0] +
movsx ecx byte ptr [edx+2Bh] +
push ecx  +
mov eax [ebp+arg_0] +
mov edx [eax+8] +
push edx  +
call sub_41BC44  +
add esp 8 +
jmp loc_406757  +
push 0  +
mov ecx [ebp+arg_0] +
mov eax [ecx+8] +
push eax  +
call sub_41BC44  +
add esp 8 +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
add esp 0FFFFFFD4h +
mov ecx dword_4EBDA4 +
push ebx  +
push esi  +
push edi  +
mov edi dword_4EBDA0 +
mov eax [ebp+arg_0] +
mov ebx dword_4EADA8 +
mov esi dword_4EADAC +
mov eax [eax+1Ch] +
imul  ecx +
cdq   +
idiv  edi +
mov [ebp+var_4] eax +
mov [ebp+var_C] eax +
mov eax [ebp+arg_0] +
mov eax [eax+18h] +
imul  ecx +
cdq   +
idiv  edi +
cmp ebx dword_4EB628 +
mov [ebp+var_8] eax +
mov edi eax +
jge loc_406AF7  +
cmp esi dword_4EB630 +
jge loc_406AF7  +
lea edx [edi+ebx] +
cmp edx dword_4EB624 +
jl loc_406AF7  +
mov ecx [ebp+var_C] +
add ecx esi +
cmp ecx dword_4EB62C +
jl loc_406AF7  +
mov eax dword_4CDD84 +
cmp eax 5 +
ja loc_4069DD  +
jmp ds:off_4067EF[eax*4]  +
cmp edi 3 +
jle loc_406816  +
cmp [ebp+var_C] 3 +
jg loc_4069DD  +
cmp dword_4D4C30 0 +
jz loc_40683B  +
mov edx [ebp+arg_0] +
movsx ecx byte ptr [edx+2Bh] +
push ecx  +
mov eax [ebp+var_C] +
push eax  +
push edi  +
push esi  +
push ebx  +
call sub_42AA60  +
add esp 14h +
jmp loc_406AF7  +
push 0  +
mov edx [ebp+var_C] +
push edx  +
push edi  +
push esi  +
push ebx  +
call sub_42AA60  +
add esp 14h +
jmp loc_406AF7  +
lea ecx [ebp+var_20] +
push ecx  +
lea eax [ebp+var_10] +
push eax  +
push esi  +
push ebx  +
call sub_41E618  +
add esp 10h +
lea edx [ebp+var_24] +
push edx  +
lea ecx [ebp+var_14] +
push ecx  +
mov eax [ebp+var_C] +
add eax esi +
push eax  +
lea edx [edi+ebx] +
push edx  +
call sub_41E618  +
add esp 10h +
mov ecx [ebp+var_14] +
sub ecx [ebp+var_10] +
test ecx ecx +
jle loc_406AF7  +
mov eax [ebp+var_24] +
sub eax [ebp+var_20] +
test eax eax +
jle loc_406AF7  +
mov edx [ebp+var_14] +
sub edx [ebp+var_10] +
cmp edx 3 +
jle loc_4068B3  +
mov ecx [ebp+var_24] +
sub ecx [ebp+var_20] +
cmp ecx 3 +
jg loc_4069DD  +
cmp dword_4D4C30 0 +
jz loc_4068D8  +
mov eax [ebp+arg_0] +
movsx edx byte ptr [eax+2Bh] +
push edx  +
mov ecx [ebp+var_C] +
push ecx  +
push edi  +
push esi  +
push ebx  +
call sub_42AA60  +
add esp 14h +
jmp loc_406AF7  +
push 0  +
mov eax [ebp+var_C] +
push eax  +
push edi  +
push esi  +
push ebx  +
call sub_42AA60  +
add esp 14h +
jmp loc_406AF7  +
lea edx [ebp+var_20] +
push edx  +
lea ecx [ebp+var_10] +
push ecx  +
push esi  +
push ebx  +
call sub_41E618  +
add esp 10h +
lea eax [ebp+var_24] +
push eax  +
lea edx [ebp+var_14] +
push edx  +
mov ecx [ebp+var_C] +
add ecx esi +
push ecx  +
push ebx  +
call sub_41E618  +
add esp 10h +
lea eax [ebp+var_28] +
push eax  +
lea edx [ebp+var_18] +
push edx  +
mov ecx [ebp+var_C] +
add ecx esi +
push ecx  +
lea eax [edi+ebx] +
push eax  +
call sub_41E618  +
add esp 10h +
lea edx [ebp+var_2C] +
lea ecx [ebp+var_1C] +
lea eax [edi+ebx] +
push edx  +
push ecx  +
push esi  +
push eax  +
call sub_41E618  +
add esp 10h +
mov edx [ebp+var_24] +
sub edx [ebp+var_20] +
test edx edx +
jg loc_40695E  +
mov ecx [ebp+var_28] +
sub ecx [ebp+var_2C] +
test ecx ecx +
jle loc_406AF7  +
mov eax [ebp+var_1C] +
sub eax [ebp+var_10] +
test eax eax +
jg loc_406976  +
mov edx [ebp+var_18] +
sub edx [ebp+var_14] +
test edx edx +
jle loc_406AF7  +
mov ecx [ebp+var_24] +
sub ecx [ebp+var_20] +
cmp ecx 3 +
jg loc_40698C  +
mov eax [ebp+var_28] +
sub eax [ebp+var_2C] +
cmp eax 3 +
jle loc_4069A2  +
mov edx [ebp+var_1C] +
sub edx [ebp+var_10] +
cmp edx 3 +
jg loc_4069DD  +
mov ecx [ebp+var_18] +
sub ecx [ebp+var_14] +
cmp ecx 3 +
jg loc_4069DD  +
cmp dword_4D4C30 0 +
jz loc_4069C7  +
mov eax [ebp+arg_0] +
movsx edx byte ptr [eax+2Bh] +
push edx  +
mov ecx [ebp+var_C] +
push ecx  +
push edi  +
push esi  +
push ebx  +
call sub_42AA60  +
add esp 14h +
jmp loc_406AF7  +
push 0  +
mov eax [ebp+var_C] +
push eax  +
push edi  +
push esi  +
push ebx  +
call sub_42AA60  +
add esp 14h +
jmp loc_406AF7  +
mov eax dword_4EB624 +
cmp ebx eax +
jge loc_4069EC  +
add edi ebx +
mov ebx eax +
sub edi eax +
lea edx [edi+ebx] +
mov eax dword_4EB628 +
cmp edx eax +
jl loc_4069FD  +
mov edi eax +
sub edi ebx +
dec edi  +
mov eax dword_4EB62C +
cmp esi eax +
jge loc_406A10  +
add esi [ebp+var_C] +
sub esi eax +
mov [ebp+var_C] esi +
mov esi eax +
mov edx [ebp+var_C] +
add edx esi +
mov eax dword_4EB630 +
cmp edx eax +
jl loc_406A24  +
sub eax esi +
dec eax  +
mov [ebp+var_C] eax +
cmp dword_4D4C30 0 +
jz loc_406A4B  +
mov ecx [ebp+arg_0] +
movsx eax byte ptr [ecx+2Bh] +
mov dword_4EAD2C eax +
push eax  +
mov edx [ebp+var_C] +
push edx  +
push edi  +
push esi  +
push ebx  +
call sub_42AA60  +
add esp 14h +
jmp loc_406A64  +
push 0  +
xor ecx ecx +
mov eax [ebp+var_C] +
mov dword_4EAD2C ecx +
push eax  +
push edi  +
push esi  +
push ebx  +
call sub_42AA60  +
add esp 14h +
mov eax dword_4CDD38 +
test eax eax +
jz loc_406AF7  +
mov edx dword_4CDD3C +
mov ecx dword_4CDD40 +
imul ecx dword_4CDD34 +
imul edx eax +
cmp edx ecx +
jg loc_406AF7  +
mov eax [ebp+arg_0] +
mov edx [eax+8] +
push edx  +
call sub_41BF54  +
pop ecx  +
mov ecx [ebp+var_8] +
sub ecx dword_4EADA0 +
sar ecx 1 +
jns loc_406AA8  +
adc ecx 0 +
add dword_4EADA8 ecx +
mov eax [ebp+var_4] +
sub eax dword_4EADA4 +
sar eax 1 +
jns loc_406ABE  +
adc eax 0 +
add dword_4EADAC eax +
cmp dword_4D4C30 0 +
jz loc_406AE6  +
mov edx [ebp+arg_0] +
movsx ecx byte ptr [edx+2Ch] +
push ecx  +
mov eax [ebp+arg_0] +
mov edx [eax+8] +
push edx  +
call sub_41BC44  +
add esp 8 +
jmp loc_406AF7  +
push 1Fh  +
mov ecx [ebp+arg_0] +
mov eax [ecx+8] +
push eax  +
call sub_41BC44  +
add esp 8 +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
add esp 0FFFFFFD0h +
add esp 0FFFFFFF0h +
push ebx  +
push esi  +
push edi  +
mov esi [ebp+arg_4] +
mov ebx [ebp+arg_0] +
mov edi [ebp+arg_10] +
mov [ebp+var_4] ebx +
mov [ebp+var_8] esi +
cmp ebx dword_4EB628 +
mov eax [ebp+arg_8] +
mov [ebp+var_C] eax +
mov edx [ebp+arg_C] +
mov [ebp+var_10] edx +
jge loc_4070A2  +
cmp esi dword_4EB630 +
jge loc_4070A2  +
mov ecx [ebp+arg_8] +
add ecx ebx +
mov eax dword_4EB624 +
cmp ecx eax +
jl loc_4070A2  +
mov ecx [ebp+arg_C] +
add ecx esi +
mov edx dword_4EB62C +
cmp ecx edx +
jl loc_4070A2  +
cmp eax ebx +
jle loc_406FB6  +
mov [ebp+var_4] eax +
mov ecx [ebp+arg_8] +
add ecx ebx +
sub ecx eax +
mov [ebp+var_C] ecx +
cmp edx esi +
jle loc_406FC7  +
mov [ebp+var_8] edx +
mov eax [ebp+arg_C] +
add eax esi +
sub eax edx +
mov [ebp+var_10] eax +
mov edx [ebp+var_4] +
add edx [ebp+var_C] +
cmp edx dword_4EB628 +
jl loc_406FE1  +
mov eax dword_4EB628 +
sub eax [ebp+var_4] +
dec eax  +
mov [ebp+var_C] eax +
mov edx [ebp+var_8] +
add edx [ebp+var_10] +
cmp edx dword_4EB630 +
jl loc_406FFC  +
mov ecx dword_4EB630 +
sub ecx [ebp+var_8] +
dec ecx  +
mov [ebp+var_10] ecx +
cmp esi dword_4EB62C +
jl loc_407022  +
cmp esi dword_4EB630 +
jge loc_407022  +
mov eax [ebp+arg_14] +
push eax  +
push edi  +
mov edx [ebp+var_C] +
push edx  +
push esi  +
mov ecx [ebp+var_4] +
push ecx  +
call sub_42AA60  +
add esp 14h +
cmp ebx dword_4EB624 +
jl loc_407048  +
cmp ebx dword_4EB628 +
jge loc_407048  +
mov eax [ebp+arg_14] +
push eax  +
mov edx [ebp+var_10] +
push edx  +
push edi  +
mov ecx [ebp+var_8] +
push ecx  +
push ebx  +
call sub_42AA60  +
add esp 14h +
mov eax [ebp+arg_C] +
add eax esi +
sub eax edi +
cmp eax dword_4EB62C +
jl loc_407075  +
cmp eax dword_4EB630 +
jge loc_407075  +
mov edx [ebp+arg_14] +
push edx  +
push edi  +
mov ecx [ebp+var_C] +
push ecx  +
push eax  +
mov eax [ebp+var_4] +
push eax  +
call sub_42AA60  +
add esp 14h +
mov eax [ebp+arg_8] +
add eax ebx +
sub eax edi +
cmp eax dword_4EB624 +
jl loc_4070A2  +
cmp eax dword_4EB628 +
jge loc_4070A2  +
mov edx [ebp+arg_14] +
push edx  +
mov ecx [ebp+var_10] +
push ecx  +
push edi  +
mov edx [ebp+var_8] +
push edx  +
push eax  +
call sub_42AA60  +
add esp 14h +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
push ebx  +
mov ebx [ebp+arg_0] +
test ebx ebx +
jnz loc_4070ED  +
push 40Ch  +
push offset a_Drawlib_c_0  +
push offset aAssertionFai_0  +
push offset stream  +
call _fprintf  +
add esp 10h +
push offset aThisIsABugPl_0  +
push offset stream  +
call _fprintf  +
add esp 8 +
push 1  +
call _exit  +
pop ecx  +
mov eax [ebx+8] +
push eax  +
call sub_41BF54  +
pop ecx  +
mov cl [ebx+29h] +
test cl cl +
jnz loc_407102  +
xor eax eax +
jmp loc_407117  +
movsx eax cl +
add eax eax +
add eax 0FFFFFFFEh +
imul  dword_4CDD34 +
cdq   +
idiv  dword_4CDD38 +
mov ecx dword_4EADA0 +
add ecx eax +
add ecx ecx +
mov dword_4EAD30 ecx +
add eax dword_4EADA4 +
add eax eax +
mov dword_4EAD34 eax +
pop ebx  +
pop ebp  +
retn   +
***
add esp 0FFFFFFD0h +
mov eax dword_4EADA8 +
mov edx dword_4EADAC +
mov ecx dword_4EBDA4 +
push ebx  +
push esi  +
push edi  +
mov [ebp+var_C] eax +
mov [ebp+var_10] edx +
mov ebx dword_4EBDA0 +
mov eax [ebp+arg_0] +
mov eax [eax+1Ch] +
imul  ecx +
cdq   +
idiv  ebx +
mov esi eax +
mov eax [ebp+arg_0] +
mov eax [eax+18h] +
imul  ecx +
cdq   +
idiv  ebx +
mov edi eax +
mov eax [ebp+var_C] +
cmp eax dword_4EB628 +
jge loc_407862  +
mov edx [ebp+var_10] +
cmp edx dword_4EB630 +
jge loc_407862  +
mov ecx [ebp+var_C] +
add ecx edi +
cmp ecx dword_4EB624 +
jl loc_407862  +
mov eax [ebp+var_10] +
add eax esi +
cmp eax dword_4EB62C +
jl loc_407862  +
mov edx dword_4CDD84 +
cmp edx 5 +
ja loc_4074C6  +
jmp ds:off_4071CE[edx*4]  +
cmp edi 3 +
jle loc_4071F4  +
cmp esi 3 +
jg loc_4074C6  +
mov ecx [ebp+arg_0] +
cmp byte ptr [ecx+29h] 0 +
jnz loc_40723E  +
cmp dword_4D4C30 0 +
jz loc_407225  +
mov eax [ebp+arg_0] +
movsx edx byte ptr [eax+2Bh] +
push edx  +
push esi  +
push edi  +
mov ecx [ebp+var_10] +
push ecx  +
mov eax [ebp+var_C] +
push eax  +
call sub_42AA60  +
add esp 14h +
jmp loc_407862  +
push 0  +
push esi  +
push edi  +
mov edx [ebp+var_10] +
push edx  +
mov ecx [ebp+var_C] +
push ecx  +
call sub_42AA60  +
add esp 14h +
jmp loc_407862  +
cmp dword_4D4C30 0 +
jz loc_407266  +
mov eax [ebp+arg_0] +
movsx edx byte ptr [eax+2Dh] +
push edx  +
push esi  +
push edi  +
mov ecx [ebp+var_10] +
push ecx  +
mov eax [ebp+var_C] +
push eax  +
call sub_42AA60  +
add esp 14h +
jmp loc_407862  +
push 1Fh  +
push esi  +
push edi  +
mov edx [ebp+var_10] +
push edx  +
mov ecx [ebp+var_C] +
push ecx  +
call sub_42AA60  +
add esp 14h +
jmp loc_407862  +
lea eax [ebp+var_24] +
lea edx [ebp+var_14] +
push eax  +
push edx  +
mov ecx [ebp+var_10] +
push ecx  +
mov eax [ebp+var_C] +
push eax  +
call sub_41E618  +
add esp 10h +
lea edx [ebp+var_28] +
push edx  +
lea ecx [ebp+var_18] +
push ecx  +
mov eax [ebp+var_10] +
add eax esi +
push eax  +
mov edx [ebp+var_C] +
add edx edi +
push edx  +
call sub_41E618  +
add esp 10h +
mov ecx [ebp+var_18] +
sub ecx [ebp+var_14] +
test ecx ecx +
jle loc_407862  +
mov eax [ebp+var_28] +
sub eax [ebp+var_24] +
test eax eax +
jle loc_407862  +
mov edx [ebp+var_18] +
sub edx [ebp+var_14] +
cmp edx 3 +
jle loc_4072E9  +
mov ecx [ebp+var_28] +
sub ecx [ebp+var_24] +
cmp ecx 3 +
jg loc_4074C6  +
mov eax [ebp+arg_0] +
cmp byte ptr [eax+29h] 0 +
jnz loc_407333  +
cmp dword_4D4C30 0 +
jz loc_40731A  +
mov edx [ebp+arg_0] +
movsx ecx byte ptr [edx+2Bh] +
push ecx  +
push esi  +
push edi  +
mov eax [ebp+var_10] +
push eax  +
mov edx [ebp+var_C] +
push edx  +
call sub_42AA60  +
add esp 14h +
jmp loc_407862  +
push 0  +
push esi  +
push edi  +
mov ecx [ebp+var_10] +
push ecx  +
mov eax [ebp+var_C] +
push eax  +
call sub_42AA60  +
add esp 14h +
jmp loc_407862  +
cmp dword_4D4C30 0 +
jz loc_40735B  +
mov edx [ebp+arg_0] +
movsx ecx byte ptr [edx+2Dh] +
push ecx  +
push esi  +
push edi  +
mov eax [ebp+var_10] +
push eax  +
mov edx [ebp+var_C] +
push edx  +
call sub_42AA60  +
add esp 14h +
jmp loc_407862  +
push 1Fh  +
push esi  +
push edi  +
mov ecx [ebp+var_10] +
push ecx  +
mov eax [ebp+var_C] +
push eax  +
call sub_42AA60  +
add esp 14h +
jmp loc_407862  +
lea edx [ebp+var_24] +
lea ecx [ebp+var_14] +
push edx  +
push ecx  +
mov eax [ebp+var_10] +
push eax  +
mov edx [ebp+var_C] +
push edx  +
call sub_41E618  +
add esp 10h +
lea ecx [ebp+var_28] +
push ecx  +
lea eax [ebp+var_18] +
push eax  +
mov ebx [ebp+var_10] +
add ebx esi +
push ebx  +
mov eax [ebp+var_C] +
push eax  +
call sub_41E618  +
add esp 10h +
lea edx [ebp+var_2C] +
push edx  +
lea ecx [ebp+var_1C] +
push ecx  +
push ebx  +
mov eax [ebp+var_C] +
add eax edi +
push eax  +
call sub_41E618  +
add esp 10h +
lea edx [ebp+var_30] +
push edx  +
lea ecx [ebp+var_20] +
push ecx  +
mov eax [ebp+var_10] +
push eax  +
mov edx [ebp+var_C] +
add edx edi +
push edx  +
call sub_41E618  +
add esp 10h +
mov ecx [ebp+var_28] +
sub ecx [ebp+var_24] +
test ecx ecx +
jg loc_4073EF  +
mov eax [ebp+var_2C] +
sub eax [ebp+var_30] +
test eax eax +
jle loc_407862  +
mov edx [ebp+var_20] +
sub edx [ebp+var_14] +
test edx edx +
jg loc_407407  +
mov ecx [ebp+var_1C] +
sub ecx [ebp+var_18] +
test ecx ecx +
jle loc_407862  +
mov eax [ebp+var_28] +
sub eax [ebp+var_24] +
cmp eax 3 +
jg loc_40741D  +
mov edx [ebp+var_2C] +
sub edx [ebp+var_30] +
cmp edx 3 +
jle loc_40743B  +
mov ecx [ebp+var_20] +
sub ecx [ebp+var_14] +
cmp ecx 3 +
jg loc_4074C6  +
mov eax [ebp+var_1C] +
sub eax [ebp+var_18] +
cmp eax 3 +
jg loc_4074C6  +
mov edx [ebp+arg_0] +
cmp byte ptr [edx+29h] 0 +
jnz loc_407485  +
cmp dword_4D4C30 0 +
jz loc_40746C  +
mov ecx [ebp+arg_0] +
movsx eax byte ptr [ecx+2Bh] +
push eax  +
push esi  +
push edi  +
mov edx [ebp+var_10] +
push edx  +
mov ecx [ebp+var_C] +
push ecx  +
call sub_42AA60  +
add esp 14h +
jmp loc_407862  +
push 0  +
push esi  +
push edi  +
mov eax [ebp+var_10] +
push eax  +
mov edx [ebp+var_C] +
push edx  +
call sub_42AA60  +
add esp 14h +
jmp loc_407862  +
cmp dword_4D4C30 0 +
jz loc_4074AD  +
mov ecx [ebp+arg_0] +
movsx eax byte ptr [ecx+2Dh] +
push eax  +
push esi  +
push edi  +
mov edx [ebp+var_10] +
push edx  +
mov ecx [ebp+var_C] +
push ecx  +
call sub_42AA60  +
add esp 14h +
jmp loc_407862  +
push 1Fh  +
push esi  +
push edi  +
mov eax [ebp+var_10] +
push eax  +
mov edx [ebp+var_C] +
push edx  +
call sub_42AA60  +
add esp 14h +
jmp loc_407862  +
mov ecx [ebp+arg_0] +
mov cl [ecx+29h] +
test cl cl +
jnz loc_4074DC  +
xor eax eax +
mov [ebp+var_4] eax +
xor edx edx +
mov [ebp+var_8] edx +
jmp loc_407511  +
movsx ebx cl +
mov eax ebx +
imul  dword_4CDD34 +
cdq   +
idiv  dword_4CDD38 +
mov [ebp+var_4] eax +
cmp [ebp+var_4] 1 +
jge loc_4074FE  +
mov [ebp+var_4] 1 +
mov eax ebx +
dec eax  +
imul  dword_4CDD34 +
cdq   +
idiv  dword_4CDD38 +
mov [ebp+var_8] eax +
cmp dword_4D4C30 0 +
jz loc_407528  +
mov ecx [ebp+arg_0] +
movsx eax byte ptr [ecx+2Bh] +
mov dword_4EAD2C eax +
jmp loc_407530  +
xor edx edx +
mov dword_4EAD2C edx +
cmp esi edi +
jge loc_4075EB  +
xor ebx ebx +
jmp loc_407580  +
mov eax dword_4EAD2C +
push eax  +
mov eax ebx +
imul  esi +
cdq   +
idiv  edi +
mov edx esi +
push 1  +
sar edx 1 +
jns loc_407554  +
adc edx 0 +
add edx [ebp+var_10] +
add eax edx +
push eax  +
mov eax ebx +
imul  esi +
cdq   +
idiv  edi +
mov ecx [ebp+var_C] +
mov edx esi +
add ecx ebx +
sar edx 1 +
push ecx  +
jns loc_407570  +
adc edx 0 +
add edx [ebp+var_10] +
sub edx eax +
push edx  +
push ecx  +
call sub_40C8E8  +
add esp 18h +
inc ebx  +
lea eax [edi+1] +
sar eax 1 +
jns loc_40758A  +
adc eax 0 +
cmp ebx eax +
jle loc_40753C  +
xor ebx ebx +
jmp loc_4075D8  +
mov eax dword_4EAD2C +
push eax  +
mov eax ebx +
imul  esi +
cdq   +
idiv  edi +
mov edx esi +
push 1  +
sar edx 1 +
jns loc_4075AA  +
adc edx 0 +
add edx [ebp+var_10] +
add eax edx +
push eax  +
mov eax ebx +
imul  esi +
cdq   +
idiv  edi +
mov ecx [ebp+var_C] +
mov edx esi +
add ecx edi +
sub ecx ebx +
sar edx 1 +
push ecx  +
jns loc_4075C8  +
adc edx 0 +
add edx [ebp+var_10] +
sub edx eax +
push edx  +
push ecx  +
call sub_40C8E8  +
add esp 18h +
inc ebx  +
lea eax [edi+1] +
sar eax 1 +
jns loc_4075E2  +
adc eax 0 +
cmp ebx eax +
jle loc_407592  +
jmp loc_40768D  +
xor ebx ebx +
jmp loc_40762C  +
mov eax dword_4EAD2C +
mov ecx edi +
push eax  +
push 1  +
mov edx [ebp+var_10] +
mov eax ebx +
add edx ebx +
push edx  +
imul  edi +
cdq   +
idiv  esi +
sar ecx 1 +
jns loc_40760D  +
adc ecx 0 +
add ecx [ebp+var_C] +
add eax ecx +
push eax  +
mov eax [ebp+var_10] +
add eax ebx +
push eax  +
mov eax ebx +
imul  edi +
cdq   +
idiv  esi +
sub ecx eax +
push ecx  +
call sub_40C8E8  +
add esp 18h +
inc ebx  +
lea ecx [esi+1] +
sar ecx 1 +
jns loc_407636  +
adc ecx 0 +
cmp ebx ecx +
jle loc_4075EF  +
xor ebx ebx +
jmp loc_40767F  +
mov eax dword_4EAD2C +
mov ecx edi +
push eax  +
push 1  +
mov edx [ebp+var_10] +
mov eax ebx +
add edx esi +
sub edx ebx +
push edx  +
imul  edi +
cdq   +
idiv  esi +
sar ecx 1 +
jns loc_40765E  +
adc ecx 0 +
add ecx [ebp+var_C] +
add eax ecx +
push eax  +
mov eax [ebp+var_10] +
add eax esi +
sub eax ebx +
push eax  +
mov eax ebx +
imul  edi +
cdq   +
idiv  esi +
sub ecx eax +
push ecx  +
call sub_40C8E8  +
add esp 18h +
inc ebx  +
lea ecx [esi+1] +
sar ecx 1 +
jns loc_407689  +
adc ecx 0 +
cmp ebx ecx +
jle loc_40763E  +
mov eax dword_4CDD38 +
test eax eax +
jz loc_4076BD  +
mov edx dword_4CDD3C +
mov ecx dword_4CDD40 +
imul ecx dword_4CDD34 +
imul edx eax +
cmp edx ecx +
jg loc_4076BD  +
mov eax [ebp+arg_0] +
mov edx [eax+8] +
push edx  +
call sub_41BF54  +
pop ecx  +
mov ecx [ebp+arg_0] +
mov al [ecx+28h] +
dec al  +
jz loc_4076D0  +
dec al  +
jz loc_407723  +
jmp loc_40777C  +
lea edx [edi+3] +
test edx edx +
jns loc_4076DA  +
add edx 3 +
sar edx 2 +
lea ecx [esi+3] +
add edx dword_4EADA8 +
add edx [ebp+var_8] +
test ecx ecx +
mov dword_4EADA8 edx +
jns loc_4076F6  +
add ecx 3 +
sar ecx 2 +
add ecx dword_4EADAC +
lea eax [esi+1] +
sar eax 1 +
jns loc_407709  +
adc eax 0 +
sub eax dword_4EADA4 +
sar eax 1 +
jns loc_407716  +
adc eax 0 +
add ecx eax +
mov dword_4EADAC ecx +
jmp loc_4077DF  +
lea edx [edi+edi*2] +
add edx 3 +
test edx edx +
jns loc_407730  +
add edx 3 +
sar edx 2 +
lea ecx [esi+3] +
add edx dword_4EADA8 +
sub edx [ebp+var_8] +
sub edx dword_4EADA0 +
test ecx ecx +
mov dword_4EADA8 edx +
jns loc_407752  +
add ecx 3 +
sar ecx 2 +
add ecx dword_4EADAC +
lea eax [esi+1] +
sar eax 1 +
jns loc_407765  +
adc eax 0 +
sub eax dword_4EADA4 +
sar eax 1 +
jns loc_407772  +
adc eax 0 +
add ecx eax +
mov dword_4EADAC ecx +
jmp loc_4077DF  +
lea edx [edi+3] +
test edx edx +
jns loc_407786  +
add edx 3 +
sar edx 2 +
add edx dword_4EADA8 +
lea ecx [edi+1] +
sar ecx 1 +
jns loc_407799  +
adc ecx 0 +
sub ecx dword_4EADA0 +
sar ecx 1 +
jns loc_4077A6  +
adc ecx 0 +
add edx ecx +
mov dword_4EADA8 edx +
lea eax [esi+3] +
test eax eax +
jns loc_4077B8  +
add eax 3 +
sar eax 2 +
add eax dword_4EADAC +
lea edx [esi+1] +
sar edx 1 +
jns loc_4077CB  +
adc edx 0 +
sub edx dword_4EADA4 +
sar edx 1 +
jns loc_4077D8  +
adc edx 0 +
add eax edx +
mov dword_4EADAC eax +
cmp dword_4D4C30 0 +
jz loc_407801  +
mov ecx [ebp+arg_0] +
movsx eax byte ptr [ecx+2Ch] +
push eax  +
mov edx [ebp+arg_0] +
mov ecx [edx+8] +
push ecx  +
call sub_41BC44  +
add esp 8 +
jmp loc_407812  +
push 1Fh  +
mov eax [ebp+arg_0] +
mov edx [eax+8] +
push edx  +
call sub_41BC44  +
add esp 8 +
cmp [ebp+var_4] 0 +
jz loc_407862  +
cmp [ebp+var_4] 1 +
jle loc_407821  +
inc [ebp+var_4]  +
cmp dword_4D4C30 0 +
jz loc_40784A  +
mov ecx [ebp+arg_0] +
movsx eax byte ptr [ecx+2Dh] +
push eax  +
mov edx [ebp+var_4] +
push edx  +
push esi  +
push edi  +
mov ecx [ebp+var_10] +
push ecx  +
mov eax [ebp+var_C] +
push eax  +
call sub_408798  +
add esp 18h +
jmp loc_407862  +
push 1Fh  +
mov edx [ebp+var_4] +
push edx  +
push esi  +
push edi  +
mov ecx [ebp+var_10] +
push ecx  +
mov eax [ebp+var_C] +
push eax  +
call sub_408798  +
add esp 18h +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
add esp 0FFFFFFD0h +
mov eax dword_4EADA8 +
mov edx dword_4EADAC +
mov ecx dword_4EBDA4 +
push ebx  +
push esi  +
push edi  +
mov [ebp+var_C] eax +
mov [ebp+var_10] edx +
mov ebx dword_4EBDA0 +
mov eax [ebp+arg_0] +
mov eax [eax+1Ch] +
imul  ecx +
cdq   +
idiv  ebx +
mov esi eax +
mov eax [ebp+arg_0] +
mov eax [eax+18h] +
imul  ecx +
cdq   +
idiv  ebx +
mov edi eax +
mov eax [ebp+var_C] +
cmp eax dword_4EB628 +
jge loc_407F98  +
mov edx [ebp+var_10] +
cmp edx dword_4EB630 +
jge loc_407F98  +
mov ecx [ebp+var_C] +
add ecx edi +
cmp ecx dword_4EB624 +
jl loc_407F98  +
mov eax [ebp+var_10] +
add eax esi +
cmp eax dword_4EB62C +
jl loc_407F98  +
mov edx dword_4CDD84 +
cmp edx 5 +
ja loc_407BFA  +
jmp ds:off_407902[edx*4]  +
cmp edi 3 +
jle loc_407928  +
cmp esi 3 +
jg loc_407BFA  +
mov ecx [ebp+arg_0] +
cmp byte ptr [ecx+29h] 0 +
jnz loc_407972  +
cmp dword_4D4C30 0 +
jz loc_407959  +
mov eax [ebp+arg_0] +
movsx edx byte ptr [eax+2Dh] +
push edx  +
push esi  +
push edi  +
mov ecx [ebp+var_10] +
push ecx  +
mov eax [ebp+var_C] +
push eax  +
call sub_42AA60  +
add esp 14h +
jmp loc_407F98  +
push 1Fh  +
push esi  +
push edi  +
mov edx [ebp+var_10] +
push edx  +
mov ecx [ebp+var_C] +
push ecx  +
call sub_42AA60  +
add esp 14h +
jmp loc_407F98  +
cmp dword_4D4C30 0 +
jz loc_40799A  +
mov eax [ebp+arg_0] +
movsx edx byte ptr [eax+2Bh] +
push edx  +
push esi  +
push edi  +
mov ecx [ebp+var_10] +
push ecx  +
mov eax [ebp+var_C] +
push eax  +
call sub_42AA60  +
add esp 14h +
jmp loc_407F98  +
push 0  +
push esi  +
push edi  +
mov edx [ebp+var_10] +
push edx  +
mov ecx [ebp+var_C] +
push ecx  +
call sub_42AA60  +
add esp 14h +
jmp loc_407F98  +
lea eax [ebp+var_24] +
lea edx [ebp+var_14] +
push eax  +
push edx  +
mov ecx [ebp+var_10] +
push ecx  +
mov eax [ebp+var_C] +
push eax  +
call sub_41E618  +
add esp 10h +
lea edx [ebp+var_28] +
push edx  +
lea ecx [ebp+var_18] +
push ecx  +
mov eax [ebp+var_10] +
add eax esi +
push eax  +
mov edx [ebp+var_C] +
add edx edi +
push edx  +
call sub_41E618  +
add esp 10h +
mov ecx [ebp+var_18] +
sub ecx [ebp+var_14] +
test ecx ecx +
jle loc_407F98  +
mov eax [ebp+var_28] +
sub eax [ebp+var_24] +
test eax eax +
jle loc_407F98  +
mov edx [ebp+var_18] +
sub edx [ebp+var_14] +
cmp edx 3 +
jle loc_407A1D  +
mov ecx [ebp+var_28] +
sub ecx [ebp+var_24] +
cmp ecx 3 +
jg loc_407BFA  +
mov eax [ebp+arg_0] +
cmp byte ptr [eax+29h] 0 +
jnz loc_407A67  +
cmp dword_4D4C30 0 +
jz loc_407A4E  +
mov edx [ebp+arg_0] +
movsx ecx byte ptr [edx+2Dh] +
push ecx  +
push esi  +
push edi  +
mov eax [ebp+var_10] +
push eax  +
mov edx [ebp+var_C] +
push edx  +
call sub_42AA60  +
add esp 14h +
jmp loc_407F98  +
push 1Fh  +
push esi  +
push edi  +
mov ecx [ebp+var_10] +
push ecx  +
mov eax [ebp+var_C] +
push eax  +
call sub_42AA60  +
add esp 14h +
jmp loc_407F98  +
cmp dword_4D4C30 0 +
jz loc_407A8F  +
mov edx [ebp+arg_0] +
movsx ecx byte ptr [edx+2Bh] +
push ecx  +
push esi  +
push edi  +
mov eax [ebp+var_10] +
push eax  +
mov edx [ebp+var_C] +
push edx  +
call sub_42AA60  +
add esp 14h +
jmp loc_407F98  +
push 0  +
push esi  +
push edi  +
mov ecx [ebp+var_10] +
push ecx  +
mov eax [ebp+var_C] +
push eax  +
call sub_42AA60  +
add esp 14h +
jmp loc_407F98  +
lea edx [ebp+var_24] +
lea ecx [ebp+var_14] +
push edx  +
push ecx  +
mov eax [ebp+var_10] +
push eax  +
mov edx [ebp+var_C] +
push edx  +
call sub_41E618  +
add esp 10h +
lea ecx [ebp+var_28] +
push ecx  +
lea eax [ebp+var_18] +
push eax  +
mov ebx [ebp+var_10] +
add ebx esi +
push ebx  +
mov eax [ebp+var_C] +
push eax  +
call sub_41E618  +
add esp 10h +
lea edx [ebp+var_2C] +
push edx  +
lea ecx [ebp+var_1C] +
push ecx  +
push ebx  +
mov eax [ebp+var_C] +
add eax edi +
push eax  +
call sub_41E618  +
add esp 10h +
lea edx [ebp+var_30] +
push edx  +
lea ecx [ebp+var_20] +
push ecx  +
mov eax [ebp+var_10] +
push eax  +
mov edx [ebp+var_C] +
add edx edi +
push edx  +
call sub_41E618  +
add esp 10h +
mov ecx [ebp+var_28] +
sub ecx [ebp+var_24] +
test ecx ecx +
jg loc_407B23  +
mov eax [ebp+var_2C] +
sub eax [ebp+var_30] +
test eax eax +
jle loc_407F98  +
mov edx [ebp+var_20] +
sub edx [ebp+var_14] +
test edx edx +
jg loc_407B3B  +
mov ecx [ebp+var_1C] +
sub ecx [ebp+var_18] +
test ecx ecx +
jle loc_407F98  +
mov eax [ebp+var_28] +
sub eax [ebp+var_24] +
cmp eax 3 +
jg loc_407B51  +
mov edx [ebp+var_2C] +
sub edx [ebp+var_30] +
cmp edx 3 +
jle loc_407B6F  +
mov ecx [ebp+var_20] +
sub ecx [ebp+var_14] +
cmp ecx 3 +
jg loc_407BFA  +
mov eax [ebp+var_1C] +
sub eax [ebp+var_18] +
cmp eax 3 +
jg loc_407BFA  +
mov edx [ebp+arg_0] +
cmp byte ptr [edx+29h] 0 +
jnz loc_407BB9  +
cmp dword_4D4C30 0 +
jz loc_407BA0  +
mov ecx [ebp+arg_0] +
movsx eax byte ptr [ecx+2Bh] +
push eax  +
push esi  +
push edi  +
mov edx [ebp+var_10] +
push edx  +
mov ecx [ebp+var_C] +
push ecx  +
call sub_42AA60  +
add esp 14h +
jmp loc_407F98  +
push 0  +
push esi  +
push edi  +
mov eax [ebp+var_10] +
push eax  +
mov edx [ebp+var_C] +
push edx  +
call sub_42AA60  +
add esp 14h +
jmp loc_407F98  +
cmp dword_4D4C30 0 +
jz loc_407BE1  +
mov ecx [ebp+arg_0] +
movsx eax byte ptr [ecx+2Dh] +
push eax  +
push esi  +
push edi  +
mov edx [ebp+var_10] +
push edx  +
mov ecx [ebp+var_C] +
push ecx  +
call sub_42AA60  +
add esp 14h +
jmp loc_407F98  +
push 1Fh  +
push esi  +
push edi  +
mov eax [ebp+var_10] +
push eax  +
mov edx [ebp+var_C] +
push edx  +
call sub_42AA60  +
add esp 14h +
jmp loc_407F98  +
mov ecx [ebp+arg_0] +
mov cl [ecx+29h] +
test cl cl +
jnz loc_407C10  +
xor eax eax +
mov [ebp+var_4] eax +
xor edx edx +
mov [ebp+var_8] edx +
jmp loc_407C45  +
movsx ebx cl +
mov eax ebx +
imul  dword_4CDD34 +
cdq   +
idiv  dword_4CDD38 +
mov [ebp+var_4] eax +
cmp [ebp+var_4] 1 +
jge loc_407C32  +
mov [ebp+var_4] 1 +
mov eax ebx +
dec eax  +
imul  dword_4CDD34 +
cdq   +
idiv  dword_4CDD38 +
mov [ebp+var_8] eax +
cmp dword_4D4C30 0 +
jz loc_407C5C  +
mov ecx [ebp+arg_0] +
movsx eax byte ptr [ecx+2Dh] +
mov dword_4EAD2C eax +
jmp loc_407C66  +
mov dword_4EAD2C 1Fh +
cmp esi edi +
jge loc_407D21  +
xor ebx ebx +
jmp loc_407CB6  +
mov eax dword_4EAD2C +
push eax  +
mov eax ebx +
imul  esi +
cdq   +
idiv  edi +
mov edx esi +
push 1  +
sar edx 1 +
jns loc_407C8A  +
adc edx 0 +
add edx [ebp+var_10] +
add eax edx +
push eax  +
mov eax ebx +
imul  esi +
cdq   +
idiv  edi +
mov ecx [ebp+var_C] +
mov edx esi +
add ecx ebx +
sar edx 1 +
push ecx  +
jns loc_407CA6  +
adc edx 0 +
add edx [ebp+var_10] +
sub edx eax +
push edx  +
push ecx  +
call sub_40C8E8  +
add esp 18h +
inc ebx  +
lea eax [edi+1] +
sar eax 1 +
jns loc_407CC0  +
adc eax 0 +
cmp ebx eax +
jle loc_407C72  +
xor ebx ebx +
jmp loc_407D0E  +
mov eax dword_4EAD2C +
push eax  +
mov eax ebx +
imul  esi +
cdq   +
idiv  edi +
mov edx esi +
push 1  +
sar edx 1 +
jns loc_407CE0  +
adc edx 0 +
add edx [ebp+var_10] +
add eax edx +
push eax  +
mov eax ebx +
imul  esi +
cdq   +
idiv  edi +
mov ecx [ebp+var_C] +
mov edx esi +
add ecx edi +
sub ecx ebx +
sar edx 1 +
push ecx  +
jns loc_407CFE  +
adc edx 0 +
add edx [ebp+var_10] +
sub edx eax +
push edx  +
push ecx  +
call sub_40C8E8  +
add esp 18h +
inc ebx  +
lea eax [edi+1] +
sar eax 1 +
jns loc_407D18  +
adc eax 0 +
cmp ebx eax +
jle loc_407CC8  +
jmp loc_407DC3  +
xor ebx ebx +
jmp loc_407D62  +
mov eax dword_4EAD2C +
mov ecx edi +
push eax  +
push 1  +
mov edx [ebp+var_10] +
mov eax ebx +
add edx ebx +
push edx  +
imul  edi +
cdq   +
idiv  esi +
sar ecx 1 +
jns loc_407D43  +
adc ecx 0 +
add ecx [ebp+var_C] +
add eax ecx +
push eax  +
mov eax [ebp+var_10] +
add eax ebx +
push eax  +
mov eax ebx +
imul  edi +
cdq   +
idiv  esi +
sub ecx eax +
push ecx  +
call sub_40C8E8  +
add esp 18h +
inc ebx  +
lea ecx [esi+1] +
sar ecx 1 +
jns loc_407D6C  +
adc ecx 0 +
cmp ebx ecx +
jle loc_407D25  +
xor ebx ebx +
jmp loc_407DB5  +
mov eax dword_4EAD2C +
mov ecx edi +
push eax  +
push 1  +
mov edx [ebp+var_10] +
mov eax ebx +
add edx esi +
sub edx ebx +
push edx  +
imul  edi +
cdq   +
idiv  esi +
sar ecx 1 +
jns loc_407D94  +
adc ecx 0 +
add ecx [ebp+var_C] +
add eax ecx +
push eax  +
mov eax [ebp+var_10] +
add eax esi +
sub eax ebx +
push eax  +
mov eax ebx +
imul  edi +
cdq   +
idiv  esi +
sub ecx eax +
push ecx  +
call sub_40C8E8  +
add esp 18h +
inc ebx  +
lea ecx [esi+1] +
sar ecx 1 +
jns loc_407DBF  +
adc ecx 0 +
cmp ebx ecx +
jle loc_407D74  +
mov eax dword_4CDD38 +
test eax eax +
jz loc_407DF3  +
mov edx dword_4CDD3C +
mov ecx dword_4CDD40 +
imul ecx dword_4CDD34 +
imul edx eax +
cmp edx ecx +
jg loc_407DF3  +
mov eax [ebp+arg_0] +
mov edx [eax+8] +
push edx  +
call sub_41BF54  +
pop ecx  +
mov ecx [ebp+arg_0] +
mov al [ecx+28h] +
dec al  +
jz loc_407E06  +
dec al  +
jz loc_407E59  +
jmp loc_407EB2  +
lea edx [edi+3] +
test edx edx +
jns loc_407E10  +
add edx 3 +
sar edx 2 +
lea ecx [esi+3] +
add edx dword_4EADA8 +
add edx [ebp+var_8] +
test ecx ecx +
mov dword_4EADA8 edx +
jns loc_407E2C  +
add ecx 3 +
sar ecx 2 +
add ecx dword_4EADAC +
lea eax [esi+1] +
sar eax 1 +
jns loc_407E3F  +
adc eax 0 +
sub eax dword_4EADA4 +
sar eax 1 +
jns loc_407E4C  +
adc eax 0 +
add ecx eax +
mov dword_4EADAC ecx +
jmp loc_407F15  +
lea edx [edi+edi*2] +
add edx 3 +
test edx edx +
jns loc_407E66  +
add edx 3 +
sar edx 2 +
lea ecx [esi+3] +
add edx dword_4EADA8 +
sub edx [ebp+var_8] +
sub edx dword_4EADA0 +
test ecx ecx +
mov dword_4EADA8 edx +
jns loc_407E88  +
add ecx 3 +
sar ecx 2 +
add ecx dword_4EADAC +
lea eax [esi+1] +
sar eax 1 +
jns loc_407E9B  +
adc eax 0 +
sub eax dword_4EADA4 +
sar eax 1 +
jns loc_407EA8  +
adc eax 0 +
add ecx eax +
mov dword_4EADAC ecx +
jmp loc_407F15  +
lea edx [edi+3] +
test edx edx +
jns loc_407EBC  +
add edx 3 +
sar edx 2 +
add edx dword_4EADA8 +
lea ecx [edi+1] +
sar ecx 1 +
jns loc_407ECF  +
adc ecx 0 +
sub ecx dword_4EADA0 +
sar ecx 1 +
jns loc_407EDC  +
adc ecx 0 +
add edx ecx +
mov dword_4EADA8 edx +
lea eax [esi+3] +
test eax eax +
jns loc_407EEE  +
add eax 3 +
sar eax 2 +
add eax dword_4EADAC +
lea edx [esi+1] +
sar edx 1 +
jns loc_407F01  +
adc edx 0 +
sub edx dword_4EADA4 +
sar edx 1 +
jns loc_407F0E  +
adc edx 0 +
add eax edx +
mov dword_4EADAC eax +
cmp dword_4D4C30 0 +
jz loc_407F37  +
mov ecx [ebp+arg_0] +
movsx eax byte ptr [ecx+2Bh] +
push eax  +
mov edx [ebp+arg_0] +
mov ecx [edx+8] +
push ecx  +
call sub_41BC44  +
add esp 8 +
jmp loc_407F48  +
push 0  +
mov eax [ebp+arg_0] +
mov edx [eax+8] +
push edx  +
call sub_41BC44  +
add esp 8 +
cmp [ebp+var_4] 0 +
jz loc_407F98  +
cmp [ebp+var_4] 1 +
jle loc_407F57  +
inc [ebp+var_4]  +
cmp dword_4D4C30 0 +
jz loc_407F80  +
mov ecx [ebp+arg_0] +
movsx eax byte ptr [ecx+2Bh] +
push eax  +
mov edx [ebp+var_4] +
push edx  +
push esi  +
push edi  +
mov ecx [ebp+var_10] +
push ecx  +
mov eax [ebp+var_C] +
push eax  +
call sub_408798  +
add esp 18h +
jmp loc_407F98  +
push 0  +
mov edx [ebp+var_4] +
push edx  +
push esi  +
push edi  +
mov ecx [ebp+var_10] +
push ecx  +
mov eax [ebp+var_C] +
push eax  +
call sub_408798  +
add esp 18h +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
add esp 0FFFFFFD0h +
push ebx  +
push ebx  +
mov ebx [ebp+arg_0] +
test ebx ebx +
jnz loc_4088A5  +
push 62Ah  +
push offset a_Drawlib_c_1  +
push offset aAssertionFai_1  +
push offset stream  +
call _fprintf  +
add esp 10h +
push offset aThisIsABugPl_1  +
push offset stream  +
call _fprintf  +
add esp 8 +
push 1  +
call _exit  +
pop ecx  +
mov eax [ebx+8] +
push eax  +
call sub_41BF54  +
pop ecx  +
mov cl [ebx+29h] +
test cl cl +
jnz loc_4088BA  +
xor eax eax +
jmp loc_4088CF  +
movsx eax cl +
add eax eax +
add eax 0FFFFFFFEh +
imul  dword_4CDD34 +
cdq   +
idiv  dword_4CDD38 +
mov ecx dword_4EADA0 +
add ecx eax +
add ecx ecx +
mov dword_4EAD30 ecx +
add eax dword_4EADA4 +
add eax eax +
mov dword_4EAD34 eax +
pop ebx  +
pop ebp  +
retn   +
***
add esp 0FFFFFFC8h +
mov eax dword_4EADA8 +
mov edx dword_4EADAC +
mov ecx dword_4EBDA4 +
push ebx  +
push esi  +
push edi  +
mov [ebp+var_C] eax +
mov [ebp+var_10] edx +
mov esi dword_4EBDA0 +
mov eax [ebp+arg_0] +
mov eax [eax+1Ch] +
imul  ecx +
cdq   +
idiv  esi +
mov ebx eax +
mov eax [ebp+arg_0] +
mov eax [eax+18h] +
imul  ecx +
cdq   +
idiv  esi +
mov ecx [ebp+var_C] +
mov esi eax +
cmp ecx dword_4EB628 +
jge loc_4090A7  +
mov eax [ebp+var_10] +
cmp eax dword_4EB630 +
jge loc_4090A7  +
mov edx [ebp+var_C] +
add edx esi +
cmp edx dword_4EB624 +
jl loc_4090A7  +
mov ecx [ebp+var_10] +
add ecx ebx +
cmp ecx dword_4EB62C +
jl loc_4090A7  +
mov eax dword_4CDD84 +
cmp eax 5 +
ja loc_408C7D  +
jmp ds:off_408985[eax*4]  +
cmp esi 3 +
jle loc_4089AB  +
cmp ebx 3 +
jg loc_408C7D  +
mov edx [ebp+arg_0] +
cmp byte ptr [edx+29h] 0 +
jnz loc_4089F5  +
cmp dword_4D4C30 0 +
jz loc_4089DC  +
mov ecx [ebp+arg_0] +
movsx eax byte ptr [ecx+2Bh] +
push eax  +
push ebx  +
push esi  +
mov edx [ebp+var_10] +
push edx  +
mov ecx [ebp+var_C] +
push ecx  +
call sub_42AA60  +
add esp 14h +
jmp loc_4090A7  +
push 0  +
push ebx  +
push esi  +
mov eax [ebp+var_10] +
push eax  +
mov edx [ebp+var_C] +
push edx  +
call sub_42AA60  +
add esp 14h +
jmp loc_4090A7  +
cmp dword_4D4C30 0 +
jz loc_408A1D  +
mov ecx [ebp+arg_0] +
movsx eax byte ptr [ecx+2Dh] +
push eax  +
push ebx  +
push esi  +
mov edx [ebp+var_10] +
push edx  +
mov ecx [ebp+var_C] +
push ecx  +
call sub_42AA60  +
add esp 14h +
jmp loc_4090A7  +
push 1Fh  +
push ebx  +
push esi  +
mov eax [ebp+var_10] +
push eax  +
mov edx [ebp+var_C] +
push edx  +
call sub_42AA60  +
add esp 14h +
jmp loc_4090A7  +
lea ecx [ebp+var_2C] +
lea eax [ebp+var_1C] +
push ecx  +
push eax  +
mov edx [ebp+var_10] +
push edx  +
mov ecx [ebp+var_C] +
push ecx  +
call sub_41E618  +
add esp 10h +
lea eax [ebp+var_30] +
push eax  +
lea edx [ebp+var_20] +
push edx  +
mov ecx [ebp+var_10] +
add ecx ebx +
push ecx  +
mov eax [ebp+var_C] +
add eax esi +
push eax  +
call sub_41E618  +
add esp 10h +
mov edx [ebp+var_20] +
sub edx [ebp+var_1C] +
test edx edx +
jle loc_4090A7  +
mov ecx [ebp+var_30] +
sub ecx [ebp+var_2C] +
test ecx ecx +
jle loc_4090A7  +
mov eax [ebp+var_20] +
sub eax [ebp+var_1C] +
cmp eax 3 +
jle loc_408AA0  +
mov edx [ebp+var_30] +
sub edx [ebp+var_2C] +
cmp edx 3 +
jg loc_408C7D  +
mov ecx [ebp+arg_0] +
cmp byte ptr [ecx+29h] 0 +
jnz loc_408AEA  +
cmp dword_4D4C30 0 +
jz loc_408AD1  +
mov eax [ebp+arg_0] +
movsx edx byte ptr [eax+2Bh] +
push edx  +
push ebx  +
push esi  +
mov ecx [ebp+var_10] +
push ecx  +
mov eax [ebp+var_C] +
push eax  +
call sub_42AA60  +
add esp 14h +
jmp loc_4090A7  +
push 0  +
push ebx  +
push esi  +
mov edx [ebp+var_10] +
push edx  +
mov ecx [ebp+var_C] +
push ecx  +
call sub_42AA60  +
add esp 14h +
jmp loc_4090A7  +
cmp dword_4D4C30 0 +
jz loc_408B12  +
mov eax [ebp+arg_0] +
movsx edx byte ptr [eax+2Dh] +
push edx  +
push ebx  +
push esi  +
mov ecx [ebp+var_10] +
push ecx  +
mov eax [ebp+var_C] +
push eax  +
call sub_42AA60  +
add esp 14h +
jmp loc_4090A7  +
push 1Fh  +
push ebx  +
push esi  +
mov edx [ebp+var_10] +
push edx  +
mov ecx [ebp+var_C] +
push ecx  +
call sub_42AA60  +
add esp 14h +
jmp loc_4090A7  +
lea eax [ebp+var_2C] +
lea edx [ebp+var_1C] +
push eax  +
push edx  +
mov ecx [ebp+var_10] +
push ecx  +
mov eax [ebp+var_C] +
push eax  +
call sub_41E618  +
add esp 10h +
lea edx [ebp+var_30] +
push edx  +
lea ecx [ebp+var_20] +
push ecx  +
mov edi [ebp+var_10] +
add edi ebx +
push edi  +
mov eax [ebp+var_C] +
push eax  +
call sub_41E618  +
add esp 10h +
lea edx [ebp+var_34] +
push edx  +
lea ecx [ebp+var_24] +
push ecx  +
push edi  +
mov eax [ebp+var_C] +
add eax esi +
push eax  +
call sub_41E618  +
add esp 10h +
lea edx [ebp+var_38] +
push edx  +
lea ecx [ebp+var_28] +
push ecx  +
mov eax [ebp+var_10] +
push eax  +
mov edx [ebp+var_C] +
add edx esi +
push edx  +
call sub_41E618  +
add esp 10h +
mov ecx [ebp+var_30] +
sub ecx [ebp+var_2C] +
test ecx ecx +
jg loc_408BA6  +
mov eax [ebp+var_34] +
sub eax [ebp+var_38] +
test eax eax +
jle loc_4090A7  +
mov edx [ebp+var_28] +
sub edx [ebp+var_1C] +
test edx edx +
jg loc_408BBE  +
mov ecx [ebp+var_24] +
sub ecx [ebp+var_20] +
test ecx ecx +
jle loc_4090A7  +
mov eax [ebp+var_30] +
sub eax [ebp+var_2C] +
cmp eax 3 +
jg loc_408BD4  +
mov edx [ebp+var_34] +
sub edx [ebp+var_38] +
cmp edx 3 +
jle loc_408BF2  +
mov ecx [ebp+var_28] +
sub ecx [ebp+var_1C] +
cmp ecx 3 +
jg loc_408C7D  +
mov eax [ebp+var_24] +
sub eax [ebp+var_20] +
cmp eax 3 +
jg loc_408C7D  +
mov edx [ebp+arg_0] +
cmp byte ptr [edx+29h] 0 +
jnz loc_408C3C  +
cmp dword_4D4C30 0 +
jz loc_408C23  +
mov ecx [ebp+arg_0] +
movsx eax byte ptr [ecx+2Bh] +
push eax  +
push ebx  +
push esi  +
mov edx [ebp+var_10] +
push edx  +
mov ecx [ebp+var_C] +
push ecx  +
call sub_42AA60  +
add esp 14h +
jmp loc_4090A7  +
push 0  +
push ebx  +
push esi  +
mov eax [ebp+var_10] +
push eax  +
mov edx [ebp+var_C] +
push edx  +
call sub_42AA60  +
add esp 14h +
jmp loc_4090A7  +
cmp dword_4D4C30 0 +
jz loc_408C64  +
mov ecx [ebp+arg_0] +
movsx eax byte ptr [ecx+2Dh] +
push eax  +
push ebx  +
push esi  +
mov edx [ebp+var_10] +
push edx  +
mov ecx [ebp+var_C] +
push ecx  +
call sub_42AA60  +
add esp 14h +
jmp loc_4090A7  +
push 1Fh  +
push ebx  +
push esi  +
mov eax [ebp+var_10] +
push eax  +
mov edx [ebp+var_C] +
push edx  +
call sub_42AA60  +
add esp 14h +
jmp loc_4090A7  +
mov ecx [ebp+arg_0] +
mov cl [ecx+29h] +
test cl cl +
jnz loc_408C93  +
xor eax eax +
mov [ebp+var_4] eax +
xor edx edx +
mov [ebp+var_8] edx +
jmp loc_408CC8  +
movsx edi cl +
mov eax edi +
imul  dword_4CDD34 +
cdq   +
idiv  dword_4CDD38 +
mov [ebp+var_4] eax +
cmp [ebp+var_4] 1 +
jge loc_408CB5  +
mov [ebp+var_4] 1 +
mov eax edi +
dec eax  +
imul  dword_4CDD34 +
cdq   +
idiv  dword_4CDD38 +
mov [ebp+var_8] eax +
cmp dword_4D4C30 0 +
jz loc_408CDF  +
mov ecx [ebp+arg_0] +
movsx eax byte ptr [ecx+2Bh] +
mov dword_4EAD2C eax +
jmp loc_408CE7  +
xor edx edx +
mov dword_4EAD2C edx +
mov ecx dword_4EBD8C +
sub ecx 1 +
jb loc_408E32  +
jz loc_408D07  +
dec ecx  +
jz loc_408D6C  +
dec ecx  +
jz loc_408DD3  +
jmp loc_408E87  +
xor edi edi +
cmp esi edi +
jle loc_408E87  +
mov eax dword_4EAD2C +
push eax  +
push 1  +
mov eax edi +
imul  ebx +
cdq   +
idiv  esi +
sar eax 1 +
jns loc_408D27  +
adc eax 0 +
mov edx ebx +
sar edx 1 +
jns loc_408D30  +
adc edx 0 +
add edx [ebp+var_10] +
add eax edx +
push eax  +
mov ecx [ebp+var_C] +
add ecx edi +
push ecx  +
mov eax edi +
imul  ebx +
cdq   +
idiv  esi +
sar eax 1 +
jns loc_408D4A  +
adc eax 0 +
mov edx ebx +
sar edx 1 +
jns loc_408D53  +
adc edx 0 +
add edx [ebp+var_10] +
sub edx eax +
push edx  +
push ecx  +
call sub_40C8E8  +
add esp 18h +
inc edi  +
cmp esi edi +
jg loc_408D11  +
jmp loc_408E87  +
xor edi edi +
cmp esi edi +
jle loc_408E87  +
mov eax dword_4EAD2C +
push eax  +
push 1  +
mov eax edi +
imul  ebx +
cdq   +
idiv  esi +
sar eax 1 +
jns loc_408D8C  +
adc eax 0 +
mov edx ebx +
sar edx 1 +
jns loc_408D95  +
adc edx 0 +
add edx [ebp+var_10] +
add eax edx +
push eax  +
mov ecx [ebp+var_C] +
add ecx esi +
sub ecx edi +
push ecx  +
mov eax edi +
imul  ebx +
cdq   +
idiv  esi +
sar eax 1 +
jns loc_408DB1  +
adc eax 0 +
mov edx ebx +
sar edx 1 +
jns loc_408DBA  +
adc edx 0 +
add edx [ebp+var_10] +
sub edx eax +
push edx  +
push ecx  +
call sub_40C8E8  +
add esp 18h +
inc edi  +
cmp esi edi +
jg loc_408D76  +
jmp loc_408E87  +
xor edi edi +
cmp ebx edi +
jle loc_408E87  +
mov eax dword_4EAD2C +
push eax  +
push 1  +
mov edx [ebp+var_10] +
add edx ebx +
sub edx edi +
push edx  +
mov eax edi +
imul  esi +
cdq   +
idiv  ebx +
sar eax 1 +
jns loc_408DFB  +
adc eax 0 +
mov ecx esi +
sar ecx 1 +
jns loc_408E04  +
adc ecx 0 +
add ecx [ebp+var_C] +
add eax ecx +
push eax  +
mov eax [ebp+var_10] +
add eax ebx +
sub eax edi +
push eax  +
mov eax edi +
imul  esi +
cdq   +
idiv  ebx +
sar eax 1 +
jns loc_408E20  +
adc eax 0 +
sub ecx eax +
push ecx  +
call sub_40C8E8  +
add esp 18h +
inc edi  +
cmp ebx edi +
jg loc_408DDD  +
jmp loc_408E87  +
xor edi edi +
cmp ebx edi +
jle loc_408E87  +
mov eax dword_4EAD2C +
push eax  +
push 1  +
mov edx [ebp+var_10] +
add edx edi +
push edx  +
mov eax edi +
imul  esi +
cdq   +
idiv  ebx +
sar eax 1 +
jns loc_408E54  +
adc eax 0 +
mov ecx esi +
sar ecx 1 +
jns loc_408E5D  +
adc ecx 0 +
add ecx [ebp+var_C] +
add eax ecx +
push eax  +
mov eax [ebp+var_10] +
add eax edi +
push eax  +
mov eax edi +
imul  esi +
cdq   +
idiv  ebx +
sar eax 1 +
jns loc_408E77  +
adc eax 0 +
sub ecx eax +
push ecx  +
call sub_40C8E8  +
add esp 18h +
inc edi  +
cmp ebx edi +
jg loc_408E38  +
mov eax dword_4CDD38 +
test eax eax +
jz loc_408EB7  +
mov edx dword_4CDD3C +
mov ecx dword_4CDD40 +
imul ecx dword_4CDD34 +
imul edx eax +
cmp edx ecx +
jg loc_408EB7  +
mov eax [ebp+arg_0] +
mov edx [eax+8] +
push edx  +
call sub_41BF54  +
pop ecx  +
mov ecx dword_4EBD8C +
sub ecx 1 +
jb loc_408F19  +
jz loc_408ECC  +
dec ecx  +
jz loc_408EEB  +
dec ecx  +
jz loc_408F02  +
jmp loc_408F36  +
lea eax [esi+1] +
sar eax 1 +
jns loc_408ED6  +
adc eax 0 +
mov [ebp+var_14] eax +
lea edx [ebx+3] +
test edx edx +
jns loc_408EE3  +
add edx 3 +
sar edx 2 +
mov [ebp+var_18] edx +
jmp loc_408F36  +
xor ecx ecx +
mov [ebp+var_14] ecx +
lea eax [ebx+3] +
test eax eax +
jns loc_408EFA  +
add eax 3 +
sar eax 2 +
mov [ebp+var_18] eax +
jmp loc_408F36  +
lea edx [esi+2] +
test edx edx +
jns loc_408F0C  +
add edx 3 +
sar edx 2 +
mov [ebp+var_14] edx +
xor ecx ecx +
mov [ebp+var_18] ecx +
jmp loc_408F36  +
lea eax [esi+2] +
test eax eax +
jns loc_408F23  +
add eax 3 +
sar eax 2 +
mov [ebp+var_14] eax +
lea edx [ebx+1] +
sar edx 1 +
jns loc_408F33  +
adc edx 0 +
mov [ebp+var_18] edx +
mov ecx [ebp+arg_0] +
mov al [ecx+28h] +
dec al  +
jz loc_408F49  +
dec al  +
jz loc_408F88  +
jmp loc_408FD4  +
mov edx dword_4EADA8 +
add edx [ebp+var_14] +
add edx [ebp+var_8] +
mov dword_4EADA8 edx +
mov ecx dword_4EADAC +
add ecx [ebp+var_18] +
lea eax [ebx+1] +
sar eax 1 +
jns loc_408F6E  +
adc eax 0 +
sub eax dword_4EADA4 +
sar eax 1 +
jns loc_408F7B  +
adc eax 0 +
add ecx eax +
mov dword_4EADAC ecx +
jmp loc_409024  +
mov edx dword_4EADA8 +
add edx [ebp+var_14] +
lea ecx [esi+1] +
sar ecx 1 +
jns loc_408F9B  +
adc ecx 0 +
add edx ecx +
sub edx [ebp+var_8] +
sub edx dword_4EADA0 +
mov dword_4EADA8 edx +
mov eax dword_4EADAC +
add eax [ebp+var_18] +
lea edx [ebx+1] +
sar edx 1 +
jns loc_408FBE  +
adc edx 0 +
sub edx dword_4EADA4 +
sar edx 1 +
jns loc_408FCB  +
adc edx 0 +
add eax edx +
mov dword_4EADAC eax +
jmp loc_409024  +
mov ecx dword_4EADA8 +
add ecx [ebp+var_14] +
lea eax [esi+1] +
sar eax 1 +
jns loc_408FE7  +
adc eax 0 +
sub eax dword_4EADA0 +
sar eax 1 +
jns loc_408FF4  +
adc eax 0 +
add ecx eax +
mov dword_4EADA8 ecx +
mov edx dword_4EADAC +
add edx [ebp+var_18] +
lea ecx [ebx+1] +
sar ecx 1 +
jns loc_40900F  +
adc ecx 0 +
sub ecx dword_4EADA4 +
sar ecx 1 +
jns loc_40901C  +
adc ecx 0 +
add edx ecx +
mov dword_4EADAC edx +
cmp dword_4D4C30 0 +
jz loc_409046  +
mov eax [ebp+arg_0] +
movsx edx byte ptr [eax+2Ch] +
push edx  +
mov ecx [ebp+arg_0] +
mov eax [ecx+8] +
push eax  +
call sub_41BC44  +
add esp 8 +
jmp loc_409057  +
push 1Fh  +
mov edx [ebp+arg_0] +
mov ecx [edx+8] +
push ecx  +
call sub_41BC44  +
add esp 8 +
cmp [ebp+var_4] 0 +
jz loc_4090A7  +
cmp [ebp+var_4] 1 +
jle loc_409066  +
inc [ebp+var_4]  +
cmp dword_4D4C30 0 +
jz loc_40908F  +
mov eax [ebp+arg_0] +
movsx edx byte ptr [eax+2Dh] +
push edx  +
mov ecx [ebp+var_4] +
push ecx  +
push ebx  +
push esi  +
mov eax [ebp+var_10] +
push eax  +
mov edx [ebp+var_C] +
push edx  +
call sub_40A158  +
add esp 18h +
jmp loc_4090A7  +
push 1Fh  +
mov ecx [ebp+var_4] +
push ecx  +
push ebx  +
push esi  +
mov eax [ebp+var_10] +
push eax  +
mov edx [ebp+var_C] +
push edx  +
call sub_40A158  +
add esp 18h +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
add esp 0FFFFFFC8h +
add esp 0FFFFFFC4h +
mov eax dword_4EADA8 +
mov edx dword_4EADAC +
mov ecx dword_4EBDA4 +
push ebx  +
push esi  +
push edi  +
mov [ebp+var_10] eax +
mov [ebp+var_14] edx +
mov ebx dword_4EBDA0 +
mov eax [ebp+arg_0] +
mov eax [eax+1Ch] +
imul  ecx +
cdq   +
idiv  ebx +
mov esi eax +
mov eax [ebp+arg_0] +
mov eax [eax+18h] +
imul  ecx +
cdq   +
idiv  ebx +
mov edi eax +
mov eax [ebp+var_10] +
cmp eax dword_4EB628 +
jge loc_40A150  +
mov edx [ebp+var_14] +
cmp edx dword_4EB630 +
jge loc_40A150  +
mov ecx [ebp+var_10] +
add ecx edi +
cmp ecx dword_4EB624 +
jl loc_40A150  +
mov eax [ebp+var_14] +
add eax esi +
cmp eax dword_4EB62C +
jl loc_40A150  +
mov edx dword_4CDD84 +
cmp edx 5 +
ja loc_409BFE  +
jmp ds:off_409906[edx*4]  +
cmp edi 3 +
jle loc_40992C  +
cmp esi 3 +
jg loc_409BFE  +
mov ecx [ebp+arg_0] +
cmp byte ptr [ecx+29h] 0 +
jnz loc_409976  +
cmp dword_4D4C30 0 +
jz loc_40995D  +
mov eax [ebp+arg_0] +
movsx edx byte ptr [eax+2Bh] +
push edx  +
push esi  +
push edi  +
mov ecx [ebp+var_14] +
push ecx  +
mov eax [ebp+var_10] +
push eax  +
call sub_42AA60  +
add esp 14h +
jmp loc_40A150  +
push 0  +
push esi  +
push edi  +
mov edx [ebp+var_14] +
push edx  +
mov ecx [ebp+var_10] +
push ecx  +
call sub_42AA60  +
add esp 14h +
jmp loc_40A150  +
cmp dword_4D4C30 0 +
jz loc_40999E  +
mov eax [ebp+arg_0] +
movsx edx byte ptr [eax+2Dh] +
push edx  +
push esi  +
push edi  +
mov ecx [ebp+var_14] +
push ecx  +
mov eax [ebp+var_10] +
push eax  +
call sub_42AA60  +
add esp 14h +
jmp loc_40A150  +
push 1Fh  +
push esi  +
push edi  +
mov edx [ebp+var_14] +
push edx  +
mov ecx [ebp+var_10] +
push ecx  +
call sub_42AA60  +
add esp 14h +
jmp loc_40A150  +
lea eax [ebp+var_30] +
lea edx [ebp+var_20] +
push eax  +
push edx  +
mov ecx [ebp+var_14] +
push ecx  +
mov eax [ebp+var_10] +
push eax  +
call sub_41E618  +
add esp 10h +
lea edx [ebp+var_34] +
push edx  +
lea ecx [ebp+var_24] +
push ecx  +
mov eax [ebp+var_14] +
add eax esi +
push eax  +
mov edx [ebp+var_10] +
add edx edi +
push edx  +
call sub_41E618  +
add esp 10h +
mov ecx [ebp+var_24] +
sub ecx [ebp+var_20] +
test ecx ecx +
jle loc_40A150  +
mov eax [ebp+var_34] +
sub eax [ebp+var_30] +
test eax eax +
jle loc_40A150  +
mov edx [ebp+var_24] +
sub edx [ebp+var_20] +
cmp edx 3 +
jle loc_409A21  +
mov ecx [ebp+var_34] +
sub ecx [ebp+var_30] +
cmp ecx 3 +
jg loc_409BFE  +
mov eax [ebp+arg_0] +
cmp byte ptr [eax+29h] 0 +
jnz loc_409A6B  +
cmp dword_4D4C30 0 +
jz loc_409A52  +
mov edx [ebp+arg_0] +
movsx ecx byte ptr [edx+2Bh] +
push ecx  +
push esi  +
push edi  +
mov eax [ebp+var_14] +
push eax  +
mov edx [ebp+var_10] +
push edx  +
call sub_42AA60  +
add esp 14h +
jmp loc_40A150  +
push 0  +
push esi  +
push edi  +
mov ecx [ebp+var_14] +
push ecx  +
mov eax [ebp+var_10] +
push eax  +
call sub_42AA60  +
add esp 14h +
jmp loc_40A150  +
cmp dword_4D4C30 0 +
jz loc_409A93  +
mov edx [ebp+arg_0] +
movsx ecx byte ptr [edx+2Dh] +
push ecx  +
push esi  +
push edi  +
mov eax [ebp+var_14] +
push eax  +
mov edx [ebp+var_10] +
push edx  +
call sub_42AA60  +
add esp 14h +
jmp loc_40A150  +
push 1Fh  +
push esi  +
push edi  +
mov ecx [ebp+var_14] +
push ecx  +
mov eax [ebp+var_10] +
push eax  +
call sub_42AA60  +
add esp 14h +
jmp loc_40A150  +
lea edx [ebp+var_30] +
lea ecx [ebp+var_20] +
push edx  +
push ecx  +
mov eax [ebp+var_14] +
push eax  +
mov edx [ebp+var_10] +
push edx  +
call sub_41E618  +
add esp 10h +
lea ecx [ebp+var_34] +
push ecx  +
lea eax [ebp+var_24] +
push eax  +
mov ebx [ebp+var_14] +
add ebx esi +
push ebx  +
mov eax [ebp+var_10] +
push eax  +
call sub_41E618  +
add esp 10h +
lea edx [ebp+var_38] +
push edx  +
lea ecx [ebp+var_28] +
push ecx  +
push ebx  +
mov eax [ebp+var_10] +
add eax edi +
push eax  +
call sub_41E618  +
add esp 10h +
lea edx [ebp+var_3C] +
push edx  +
lea ecx [ebp+var_2C] +
push ecx  +
mov eax [ebp+var_14] +
push eax  +
mov edx [ebp+var_10] +
add edx edi +
push edx  +
call sub_41E618  +
add esp 10h +
mov ecx [ebp+var_34] +
sub ecx [ebp+var_30] +
test ecx ecx +
jg loc_409B27  +
mov eax [ebp+var_38] +
sub eax [ebp+var_3C] +
test eax eax +
jle loc_40A150  +
mov edx [ebp+var_2C] +
sub edx [ebp+var_20] +
test edx edx +
jg loc_409B3F  +
mov ecx [ebp+var_28] +
sub ecx [ebp+var_24] +
test ecx ecx +
jle loc_40A150  +
mov eax [ebp+var_34] +
sub eax [ebp+var_30] +
cmp eax 3 +
jg loc_409B55  +
mov edx [ebp+var_38] +
sub edx [ebp+var_3C] +
cmp edx 3 +
jle loc_409B73  +
mov ecx [ebp+var_2C] +
sub ecx [ebp+var_20] +
cmp ecx 3 +
jg loc_409BFE  +
mov eax [ebp+var_28] +
sub eax [ebp+var_24] +
cmp eax 3 +
jg loc_409BFE  +
mov edx [ebp+arg_0] +
cmp byte ptr [edx+29h] 0 +
jnz loc_409BBD  +
cmp dword_4D4C30 0 +
jz loc_409BA4  +
mov ecx [ebp+arg_0] +
movsx eax byte ptr [ecx+2Bh] +
push eax  +
push esi  +
push edi  +
mov edx [ebp+var_14] +
push edx  +
mov ecx [ebp+var_10] +
push ecx  +
call sub_42AA60  +
add esp 14h +
jmp loc_40A150  +
push 0  +
push esi  +
push edi  +
mov eax [ebp+var_14] +
push eax  +
mov edx [ebp+var_10] +
push edx  +
call sub_42AA60  +
add esp 14h +
jmp loc_40A150  +
cmp dword_4D4C30 0 +
jz loc_409BE5  +
mov ecx [ebp+arg_0] +
movsx eax byte ptr [ecx+2Dh] +
push eax  +
push esi  +
push edi  +
mov edx [ebp+var_14] +
push edx  +
mov ecx [ebp+var_10] +
push ecx  +
call sub_42AA60  +
add esp 14h +
jmp loc_40A150  +
push 1Fh  +
push esi  +
push edi  +
mov eax [ebp+var_14] +
push eax  +
mov edx [ebp+var_10] +
push edx  +
call sub_42AA60  +
add esp 14h +
jmp loc_40A150  +
mov ecx [ebp+arg_0] +
mov cl [ecx+29h] +
test cl cl +
jnz loc_409C14  +
xor eax eax +
mov [ebp+var_4] eax +
xor edx edx +
mov [ebp+var_C] edx +
jmp loc_409C49  +
movsx ebx cl +
mov eax ebx +
imul  dword_4CDD34 +
cdq   +
idiv  dword_4CDD38 +
mov [ebp+var_4] eax +
cmp [ebp+var_4] 1 +
jge loc_409C36  +
mov [ebp+var_4] 1 +
mov eax ebx +
dec eax  +
imul  dword_4CDD34 +
cdq   +
idiv  dword_4CDD38 +
mov [ebp+var_C] eax +
cmp dword_4D4C30 0 +
jz loc_409C6A  +
mov ecx [ebp+arg_0] +
mov edx [ebp+arg_0] +
movsx eax byte ptr [ecx+2Dh] +
mov dword_4EAD2C eax +
movsx ecx byte ptr [edx+2Bh] +
mov [ebp+var_8] ecx +
jmp loc_409C79  +
mov dword_4EAD2C 1Fh +
xor eax eax +
mov [ebp+var_8] eax +
mov edx dword_4EBD8C +
sub edx 1 +
jb loc_409E93  +
jz loc_409C9D  +
dec edx  +
jz loc_409D3F  +
dec edx  +
jz loc_409DE9  +
jmp loc_409F30  +
xor ebx ebx +
cmp edi ebx +
jle loc_409F30  +
mov eax dword_4EAD2C +
mov edx esi +
push eax  +
push 1  +
sar edx 1 +
jns loc_409CB8  +
adc edx 0 +
add edx [ebp+var_14] +
push edx  +
mov ecx [ebp+var_10] +
add ecx ebx +
push ecx  +
mov eax ebx +
imul  esi +
cdq   +
idiv  edi +
sar eax 1 +
jns loc_409CD0  +
adc eax 0 +
mov ecx esi +
sar ecx 1 +
jns loc_409CD9  +
adc ecx 0 +
add ecx [ebp+var_14] +
sub ecx eax +
push ecx  +
mov eax [ebp+var_10] +
add eax ebx +
push eax  +
call sub_40C8E8  +
add esp 18h +
mov edx [ebp+var_8] +
push edx  +
push 1  +
mov eax ebx +
imul  esi +
cdq   +
idiv  edi +
sar eax 1 +
jns loc_409D01  +
adc eax 0 +
mov ecx esi +
sar ecx 1 +
jns loc_409D0A  +
adc ecx 0 +
add ecx [ebp+var_14] +
add eax ecx +
push eax  +
mov eax [ebp+var_10] +
add eax ebx +
push eax  +
mov edx esi +
sar edx 1 +
jns loc_409D1F  +
adc edx 0 +
add edx [ebp+var_14] +
push edx  +
mov ecx [ebp+var_10] +
add ecx ebx +
push ecx  +
call sub_40C8E8  +
add esp 18h +
inc ebx  +
cmp edi ebx +
jg loc_409CA7  +
jmp loc_409F30  +
xor ebx ebx +
cmp edi ebx +
jle loc_409F30  +
mov eax dword_4EAD2C +
mov edx esi +
push eax  +
push 1  +
sar edx 1 +
jns loc_409D5A  +
adc edx 0 +
add edx [ebp+var_14] +
push edx  +
mov ecx [ebp+var_10] +
add ecx edi +
sub ecx ebx +
push ecx  +
mov eax ebx +
imul  esi +
cdq   +
idiv  edi +
sar eax 1 +
jns loc_409D74  +
adc eax 0 +
mov ecx esi +
sar ecx 1 +
jns loc_409D7D  +
adc ecx 0 +
add ecx [ebp+var_14] +
sub ecx eax +
push ecx  +
mov eax [ebp+var_10] +
add eax edi +
sub eax ebx +
push eax  +
call sub_40C8E8  +
add esp 18h +
mov edx [ebp+var_8] +
push edx  +
push 1  +
mov eax ebx +
imul  esi +
cdq   +
idiv  edi +
sar eax 1 +
jns loc_409DA7  +
adc eax 0 +
mov ecx esi +
sar ecx 1 +
jns loc_409DB0  +
adc ecx 0 +
add ecx [ebp+var_14] +
add eax ecx +
push eax  +
mov eax [ebp+var_10] +
add eax edi +
sub eax ebx +
push eax  +
mov edx esi +
sar edx 1 +
jns loc_409DC7  +
adc edx 0 +
add edx [ebp+var_14] +
push edx  +
mov ecx [ebp+var_10] +
add ecx edi +
sub ecx ebx +
push ecx  +
call sub_40C8E8  +
add esp 18h +
inc ebx  +
cmp edi ebx +
jg loc_409D49  +
jmp loc_409F30  +
xor ebx ebx +
cmp esi ebx +
jle loc_409F30  +
mov eax dword_4EAD2C +
push eax  +
push 1  +
mov edx [ebp+var_14] +
add edx esi +
sub edx ebx +
push edx  +
mov ecx edi +
sar ecx 1 +
jns loc_409E0C  +
adc ecx 0 +
add ecx [ebp+var_10] +
push ecx  +
mov eax [ebp+var_14] +
add eax esi +
sub eax ebx +
push eax  +
mov eax ebx +
imul  edi +
cdq   +
idiv  esi +
sar eax 1 +
jns loc_409E26  +
adc eax 0 +
mov ecx edi +
sar ecx 1 +
jns loc_409E2F  +
adc ecx 0 +
add ecx [ebp+var_10] +
sub ecx eax +
push ecx  +
call sub_40C8E8  +
add esp 18h +
mov eax [ebp+var_8] +
push eax  +
push 1  +
mov edx [ebp+var_14] +
add edx esi +
sub edx ebx +
push edx  +
mov eax ebx +
imul  edi +
cdq   +
idiv  esi +
sar eax 1 +
jns loc_409E59  +
adc eax 0 +
mov ecx edi +
sar ecx 1 +
jns loc_409E62  +
adc ecx 0 +
add ecx [ebp+var_10] +
add eax ecx +
push eax  +
mov eax [ebp+var_14] +
add eax esi +
sub eax ebx +
push eax  +
mov edx edi +
sar edx 1 +
jns loc_409E79  +
adc edx 0 +
add edx [ebp+var_10] +
push edx  +
call sub_40C8E8  +
add esp 18h +
inc ebx  +
cmp esi ebx +
jg loc_409DF3  +
jmp loc_409F30  +
xor ebx ebx +
cmp esi ebx +
jle loc_409F30  +
mov eax dword_4EAD2C +
push eax  +
push 1  +
mov edx [ebp+var_14] +
add edx ebx +
push edx  +
mov ecx edi +
sar ecx 1 +
jns loc_409EB4  +
adc ecx 0 +
add ecx [ebp+var_10] +
push ecx  +
mov eax [ebp+var_14] +
add eax ebx +
push eax  +
mov eax ebx +
imul  edi +
cdq   +
idiv  esi +
sar eax 1 +
jns loc_409ECC  +
adc eax 0 +
mov ecx edi +
sar ecx 1 +
jns loc_409ED5  +
adc ecx 0 +
add ecx [ebp+var_10] +
sub ecx eax +
push ecx  +
call sub_40C8E8  +
add esp 18h +
mov eax [ebp+var_8] +
push eax  +
push 1  +
mov edx [ebp+var_14] +
add edx ebx +
push edx  +
mov eax ebx +
imul  edi +
cdq   +
idiv  esi +
sar eax 1 +
jns loc_409EFD  +
adc eax 0 +
mov ecx edi +
sar ecx 1 +
jns loc_409F06  +
adc ecx 0 +
add ecx [ebp+var_10] +
add eax ecx +
push eax  +
mov eax [ebp+var_14] +
add eax ebx +
push eax  +
mov edx edi +
sar edx 1 +
jns loc_409F1B  +
adc edx 0 +
add edx [ebp+var_10] +
push edx  +
call sub_40C8E8  +
add esp 18h +
inc ebx  +
cmp esi ebx +
jg loc_409E9D  +
mov eax dword_4CDD38 +
test eax eax +
jz loc_409F60  +
mov edx dword_4CDD3C +
mov ecx dword_4CDD40 +
imul ecx dword_4CDD34 +
imul edx eax +
cmp edx ecx +
jg loc_409F60  +
mov eax [ebp+arg_0] +
mov edx [eax+8] +
push edx  +
call sub_41BF54  +
pop ecx  +
mov ecx dword_4EBD8C +
sub ecx 1 +
jb loc_409FC2  +
jz loc_409F75  +
dec ecx  +
jz loc_409F94  +
dec ecx  +
jz loc_409FAB  +
jmp loc_409FDF  +
lea eax [edi+1] +
sar eax 1 +
jns loc_409F7F  +
adc eax 0 +
mov [ebp+var_18] eax +
lea edx [esi+3] +
test edx edx +
jns loc_409F8C  +
add edx 3 +
sar edx 2 +
mov [ebp+var_1C] edx +
jmp loc_409FDF  +
xor ecx ecx +
mov [ebp+var_18] ecx +
lea eax [esi+3] +
test eax eax +
jns loc_409FA3  +
add eax 3 +
sar eax 2 +
mov [ebp+var_1C] eax +
jmp loc_409FDF  +
lea edx [edi+2] +
test edx edx +
jns loc_409FB5  +
add edx 3 +
sar edx 2 +
mov [ebp+var_18] edx +
xor ecx ecx +
mov [ebp+var_1C] ecx +
jmp loc_409FDF  +
lea eax [edi+2] +
test eax eax +
jns loc_409FCC  +
add eax 3 +
sar eax 2 +
mov [ebp+var_18] eax +
lea edx [esi+1] +
sar edx 1 +
jns loc_409FDC  +
adc edx 0 +
mov [ebp+var_1C] edx +
mov ecx [ebp+arg_0] +
mov al [ecx+28h] +
dec al  +
jz loc_409FF2  +
dec al  +
jz loc_40A031  +
jmp loc_40A07D  +
mov edx dword_4EADA8 +
add edx [ebp+var_18] +
add edx [ebp+var_C] +
mov dword_4EADA8 edx +
mov ecx dword_4EADAC +
add ecx [ebp+var_1C] +
lea eax [esi+1] +
sar eax 1 +
jns loc_40A017  +
adc eax 0 +
sub eax dword_4EADA4 +
sar eax 1 +
jns loc_40A024  +
adc eax 0 +
add ecx eax +
mov dword_4EADAC ecx +
jmp loc_40A0CD  +
mov edx dword_4EADA8 +
add edx [ebp+var_18] +
lea ecx [edi+1] +
sar ecx 1 +
jns loc_40A044  +
adc ecx 0 +
add edx ecx +
sub edx [ebp+var_C] +
sub edx dword_4EADA0 +
mov dword_4EADA8 edx +
mov eax dword_4EADAC +
add eax [ebp+var_1C] +
lea edx [esi+1] +
sar edx 1 +
jns loc_40A067  +
adc edx 0 +
sub edx dword_4EADA4 +
sar edx 1 +
jns loc_40A074  +
adc edx 0 +
add eax edx +
mov dword_4EADAC eax +
jmp loc_40A0CD  +
mov ecx dword_4EADA8 +
add ecx [ebp+var_18] +
lea eax [edi+1] +
sar eax 1 +
jns loc_40A090  +
adc eax 0 +
sub eax dword_4EADA0 +
sar eax 1 +
jns loc_40A09D  +
adc eax 0 +
add ecx eax +
mov dword_4EADA8 ecx +
mov edx dword_4EADAC +
add edx [ebp+var_1C] +
lea ecx [esi+1] +
sar ecx 1 +
jns loc_40A0B8  +
adc ecx 0 +
sub ecx dword_4EADA4 +
sar ecx 1 +
jns loc_40A0C5  +
adc ecx 0 +
add edx ecx +
mov dword_4EADAC edx +
cmp dword_4D4C30 0 +
jz loc_40A0EF  +
mov eax [ebp+arg_0] +
movsx edx byte ptr [eax+2Bh] +
push edx  +
mov ecx [ebp+arg_0] +
mov eax [ecx+8] +
push eax  +
call sub_41BC44  +
add esp 8 +
jmp loc_40A100  +
push 0  +
mov edx [ebp+arg_0] +
mov ecx [edx+8] +
push ecx  +
call sub_41BC44  +
add esp 8 +
cmp [ebp+var_4] 0 +
jz loc_40A150  +
cmp [ebp+var_4] 1 +
jle loc_40A10F  +
inc [ebp+var_4]  +
cmp dword_4D4C30 0 +
jz loc_40A138  +
mov eax [ebp+arg_0] +
movsx edx byte ptr [eax+2Dh] +
push edx  +
mov ecx [ebp+var_4] +
push ecx  +
push esi  +
push edi  +
mov eax [ebp+var_14] +
push eax  +
mov edx [ebp+var_10] +
push edx  +
call sub_40A158  +
add esp 18h +
jmp loc_40A150  +
push 1Fh  +
mov ecx [ebp+var_4] +
push ecx  +
push esi  +
push edi  +
mov eax [ebp+var_14] +
push eax  +
mov edx [ebp+var_10] +
push edx  +
call sub_40A158  +
add esp 18h +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
push ebx  +
push ebx  +
mov ebx [ebp+arg_0] +
test ebx ebx +
jnz loc_40A36D  +
push 8D5h  +
push offset a_Drawlib_c_2  +
push offset aAssertionFai_2  +
push offset stream  +
call _fprintf  +
add esp 10h +
push offset aThisIsABugPl_2  +
push offset stream  +
call _fprintf  +
add esp 8 +
push 1  +
call _exit  +
pop ecx  +
mov eax [ebx+8] +
push eax  +
call sub_41BF54  +
pop ecx  +
mov cl [ebx+29h] +
test cl cl +
jnz loc_40A382  +
xor ecx ecx +
jmp loc_40A399  +
movsx eax cl +
add eax eax +
add eax 0FFFFFFFEh +
imul  dword_4CDD34 +
cdq   +
idiv  dword_4CDD38 +
mov ecx eax +
mov eax dword_4EADA0 +
mov ebx 3E8h +
add eax ecx +
imul eax eax +
cdq   +
idiv  ebx +
mov dword_4EAD30 eax +
add ecx dword_4EADA4 +
imul eax ecx +
cdq   +
mov ecx 3E8h +
idiv  ecx +
mov dword_4EAD34 eax +
pop ebx  +
pop ebp  +
retn   +
***
add esp 0FFFFFFD0h +
add esp 0FFFFFFD0h +
mov ecx dword_4EBDA4 +
push ebx  +
push esi  +
push edi  +
mov esi dword_4EADA8 +
mov ebx [ebp+arg_0] +
mov edi dword_4EADAC +
mov eax [ebx+1Ch] +
imul  ecx +
cdq   +
idiv  dword_4EBDA0 +
mov [ebp+var_10] eax +
mov eax [ebx+18h] +
imul  ecx +
cdq   +
idiv  dword_4EBDA0 +
cmp esi dword_4EB628 +
mov [ebp+var_C] eax +
jge loc_40AE54  +
cmp edi dword_4EB630 +
jge loc_40AE54  +
mov ecx [ebp+var_C] +
add ecx esi +
cmp ecx dword_4EB624 +
jl loc_40AE54  +
mov eax [ebp+var_10] +
add eax edi +
cmp eax dword_4EB62C +
jl loc_40AE54  +
mov edx dword_4CDD84 +
cmp edx 5 +
ja loc_40AC72  +
jmp ds:off_40A9A0[edx*4]  +
cmp [ebp+var_C] 3 +
jle loc_40A9C8  +
cmp [ebp+var_10] 3 +
jg loc_40AC72  +
cmp byte ptr [ebx+29h] 0 +
jnz loc_40AA0C  +
cmp dword_4D4C30 0 +
jz loc_40A9F3  +
movsx ecx byte ptr [ebx+2Dh] +
push ecx  +
mov eax [ebp+var_10] +
push eax  +
mov edx [ebp+var_C] +
push edx  +
push edi  +
push esi  +
call sub_42AA60  +
add esp 14h +
jmp loc_40AE54  +
push 1Fh  +
mov ecx [ebp+var_10] +
push ecx  +
mov eax [ebp+var_C] +
push eax  +
push edi  +
push esi  +
call sub_42AA60  +
add esp 14h +
jmp loc_40AE54  +
cmp dword_4D4C30 0 +
jz loc_40AA31  +
movsx edx byte ptr [ebx+2Bh] +
push edx  +
mov ecx [ebp+var_10] +
push ecx  +
mov eax [ebp+var_C] +
push eax  +
push edi  +
push esi  +
call sub_42AA60  +
add esp 14h +
jmp loc_40AE54  +
push 0  +
mov edx [ebp+var_10] +
push edx  +
mov ecx [ebp+var_C] +
push ecx  +
push edi  +
push esi  +
call sub_42AA60  +
add esp 14h +
jmp loc_40AE54  +
lea eax [ebp+var_24] +
push eax  +
lea edx [ebp+var_14] +
push edx  +
push edi  +
push esi  +
call sub_41E618  +
add esp 10h +
lea ecx [ebp+var_28] +
push ecx  +
lea eax [ebp+var_18] +
push eax  +
mov edx [ebp+var_10] +
add edx edi +
push edx  +
mov ecx [ebp+var_C] +
add ecx esi +
push ecx  +
call sub_41E618  +
add esp 10h +
mov eax [ebp+var_18] +
sub eax [ebp+var_14] +
test eax eax +
jle loc_40AE54  +
mov edx [ebp+var_28] +
sub edx [ebp+var_24] +
test edx edx +
jle loc_40AE54  +
mov ecx [ebp+var_18] +
sub ecx [ebp+var_14] +
cmp ecx 3 +
jle loc_40AAAE  +
mov eax [ebp+var_28] +
sub eax [ebp+var_24] +
cmp eax 3 +
jg loc_40AC72  +
cmp byte ptr [ebx+29h] 0 +
jnz loc_40AAF2  +
cmp dword_4D4C30 0 +
jz loc_40AAD9  +
movsx edx byte ptr [ebx+2Dh] +
push edx  +
mov ecx [ebp+var_10] +
push ecx  +
mov eax [ebp+var_C] +
push eax  +
push edi  +
push esi  +
call sub_42AA60  +
add esp 14h +
jmp loc_40AE54  +
push 1Fh  +
mov edx [ebp+var_10] +
push edx  +
mov ecx [ebp+var_C] +
push ecx  +
push edi  +
push esi  +
call sub_42AA60  +
add esp 14h +
jmp loc_40AE54  +
cmp dword_4D4C30 0 +
jz loc_40AB17  +
movsx eax byte ptr [ebx+2Bh] +
push eax  +
mov edx [ebp+var_10] +
push edx  +
mov ecx [ebp+var_C] +
push ecx  +
push edi  +
push esi  +
call sub_42AA60  +
add esp 14h +
jmp loc_40AE54  +
push 0  +
mov eax [ebp+var_10] +
push eax  +
mov edx [ebp+var_C] +
push edx  +
push edi  +
push esi  +
call sub_42AA60  +
add esp 14h +
jmp loc_40AE54  +
lea ecx [ebp+var_24] +
push ecx  +
lea eax [ebp+var_14] +
push eax  +
push edi  +
push esi  +
call sub_41E618  +
add esp 10h +
lea edx [ebp+var_28] +
push edx  +
lea ecx [ebp+var_18] +
push ecx  +
mov eax [ebp+var_10] +
add eax edi +
push eax  +
push esi  +
call sub_41E618  +
add esp 10h +
lea edx [ebp+var_2C] +
push edx  +
lea ecx [ebp+var_1C] +
push ecx  +
mov eax [ebp+var_10] +
add eax edi +
push eax  +
mov edx [ebp+var_C] +
add edx esi +
push edx  +
call sub_41E618  +
add esp 10h +
lea ecx [ebp+var_30] +
push ecx  +
lea eax [ebp+var_20] +
push eax  +
push edi  +
mov edx [ebp+var_C] +
add edx esi +
push edx  +
call sub_41E618  +
add esp 10h +
mov ecx [ebp+var_28] +
sub ecx [ebp+var_24] +
test ecx ecx +
jg loc_40ABA4  +
mov eax [ebp+var_2C] +
sub eax [ebp+var_30] +
test eax eax +
jle loc_40AE54  +
mov edx [ebp+var_20] +
sub edx [ebp+var_14] +
test edx edx +
jg loc_40ABBC  +
mov ecx [ebp+var_1C] +
sub ecx [ebp+var_18] +
test ecx ecx +
jle loc_40AE54  +
mov eax [ebp+var_28] +
sub eax [ebp+var_24] +
cmp eax 3 +
jg loc_40ABD2  +
mov edx [ebp+var_2C] +
sub edx [ebp+var_30] +
cmp edx 3 +
jle loc_40ABF0  +
mov ecx [ebp+var_20] +
sub ecx [ebp+var_14] +
cmp ecx 3 +
jg loc_40AC72  +
mov eax [ebp+var_1C] +
sub eax [ebp+var_18] +
cmp eax 3 +
jg loc_40AC72  +
cmp byte ptr [ebx+29h] 0 +
jnz loc_40AC34  +
cmp dword_4D4C30 0 +
jz loc_40AC1B  +
movsx edx byte ptr [ebx+2Bh] +
push edx  +
mov ecx [ebp+var_10] +
push ecx  +
mov eax [ebp+var_C] +
push eax  +
push edi  +
push esi  +
call sub_42AA60  +
add esp 14h +
jmp loc_40AE54  +
push 0  +
mov edx [ebp+var_10] +
push edx  +
mov ecx [ebp+var_C] +
push ecx  +
push edi  +
push esi  +
call sub_42AA60  +
add esp 14h +
jmp loc_40AE54  +
cmp dword_4D4C30 0 +
jz loc_40AC59  +
movsx eax byte ptr [ebx+2Dh] +
push eax  +
mov edx [ebp+var_10] +
push edx  +
mov ecx [ebp+var_C] +
push ecx  +
push edi  +
push esi  +
call sub_42AA60  +
add esp 14h +
jmp loc_40AE54  +
push 1Fh  +
mov eax [ebp+var_10] +
push eax  +
mov edx [ebp+var_C] +
push edx  +
push edi  +
push esi  +
call sub_42AA60  +
add esp 14h +
jmp loc_40AE54  +
mov cl [ebx+29h] +
test cl cl +
jnz loc_40AC85  +
xor eax eax +
mov [ebp+var_4] eax +
xor edx edx +
mov [ebp+var_8] edx +
jmp loc_40ACBA  +
movsx eax cl +
imul  dword_4CDD34 +
cdq   +
idiv  dword_4CDD38 +
mov [ebp+var_4] eax +
cmp [ebp+var_4] 1 +
jge loc_40ACA5  +
mov [ebp+var_4] 1 +
movsx eax byte ptr [ebx+29h] +
dec eax  +
imul  dword_4CDD34 +
cdq   +
idiv  dword_4CDD38 +
mov [ebp+var_8] eax +
cmp dword_4D4C30 0 +
jz loc_40ACCF  +
movsx ecx byte ptr [ebx+2Dh] +
mov dword_4EAD2C ecx +
jmp loc_40ACD9  +
mov dword_4EAD2C 1Fh +
mov eax dword_4EAD2C +
push eax  +
push eax  +
mov edx [ebp+var_10] +
push edx  +
mov ecx [ebp+var_C] +
push ecx  +
push edi  +
push esi  +
call sub_40B624  +
add esp 18h +
mov eax dword_4CDD38 +
test eax eax +
jz loc_40AD1F  +
mov edx dword_4CDD3C +
mov ecx dword_4CDD40 +
imul ecx dword_4CDD34 +
imul edx eax +
cmp edx ecx +
jg loc_40AD1F  +
mov eax [ebx+8] +
push eax  +
call sub_41BF54  +
pop ecx  +
mov dl [ebx+28h] +
dec dl  +
jz loc_40AD2F  +
dec dl  +
jz loc_40AD6A  +
jmp loc_40ADB1  +
mov eax [ebp+var_C] +
mov edx eax +
lea eax [edx+eax*8] +
lea eax [edx+eax*8] +
add eax eax +
mov ecx 3E8h +
cdq   +
idiv  ecx +
add eax dword_4EADA8 +
add eax [ebp+var_8] +
mov dword_4EADA8 eax +
mov eax [ebp+var_10] +
sub eax dword_4EADA4 +
sar eax 1 +
jns loc_40AD62  +
adc eax 0 +
add dword_4EADAC eax +
jmp loc_40ADDD  +
mov eax [ebp+var_C] +
mov edx eax +
lea eax [edx+eax*8] +
lea eax [edx+eax*8] +
add eax eax +
mov ecx 3E8h +
cdq   +
idiv  ecx +
mov edx dword_4EADA8 +
add edx [ebp+var_C] +
sub edx eax +
sub edx [ebp+var_8] +
sub edx dword_4EADA0 +
mov dword_4EADA8 edx +
mov eax [ebp+var_10] +
sub eax dword_4EADA4 +
sar eax 1 +
jns loc_40ADA9  +
adc eax 0 +
add dword_4EADAC eax +
jmp loc_40ADDD  +
mov ecx [ebp+var_C] +
sub ecx dword_4EADA0 +
sar ecx 1 +
jns loc_40ADC1  +
adc ecx 0 +
add dword_4EADA8 ecx +
mov eax [ebp+var_10] +
sub eax dword_4EADA4 +
sar eax 1 +
jns loc_40ADD7  +
adc eax 0 +
add dword_4EADAC eax +
cmp dword_4D4C30 0 +
jz loc_40ADF9  +
movsx edx byte ptr [ebx+2Bh] +
push edx  +
mov ecx [ebx+8] +
push ecx  +
call sub_41BC44  +
add esp 8 +
jmp loc_40AE07  +
push 0  +
mov eax [ebx+8] +
push eax  +
call sub_41BC44  +
add esp 8 +
cmp [ebp+var_4] 0 +
jz loc_40AE54  +
cmp [ebp+var_4] 1 +
jle loc_40AE16  +
inc [ebp+var_4]  +
cmp dword_4D4C30 0 +
jz loc_40AE3C  +
movsx edx byte ptr [ebx+2Bh] +
push edx  +
mov ecx [ebp+var_4] +
push ecx  +
mov eax [ebp+var_10] +
push eax  +
mov edx [ebp+var_C] +
push edx  +
push edi  +
push esi  +
call sub_40B3D0  +
add esp 18h +
jmp loc_40AE54  +
push 0  +
mov ecx [ebp+var_4] +
push ecx  +
mov eax [ebp+var_10] +
push eax  +
mov edx [ebp+var_C] +
push edx  +
push edi  +
push esi  +
call sub_40B3D0  +
add esp 18h +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
add esp 0FFFFFFD0h +
mov ecx dword_4EBDA4 +
push ebx  +
push esi  +
push edi  +
mov esi dword_4EADA8 +
mov ebx [ebp+arg_0] +
mov edi dword_4EADAC +
mov eax [ebx+1Ch] +
imul  ecx +
cdq   +
idiv  dword_4EBDA0 +
mov [ebp+var_10] eax +
mov eax [ebx+18h] +
imul  ecx +
cdq   +
idiv  dword_4EBDA0 +
cmp esi dword_4EB628 +
mov [ebp+var_C] eax +
jge loc_40B3C6  +
cmp edi dword_4EB630 +
jge loc_40B3C6  +
mov ecx [ebp+var_C] +
add ecx esi +
cmp ecx dword_4EB624 +
jl loc_40B3C6  +
mov eax [ebp+var_10] +
add eax edi +
cmp eax dword_4EB62C +
jl loc_40B3C6  +
mov edx dword_4CDD84 +
cmp edx 5 +
ja loc_40B1BA  +
jmp ds:off_40AEE8[edx*4]  +
cmp [ebp+var_C] 3 +
jle loc_40AF10  +
cmp [ebp+var_10] 3 +
jg loc_40B1BA  +
cmp byte ptr [ebx+29h] 0 +
jnz loc_40AF54  +
cmp dword_4D4C30 0 +
jz loc_40AF3B  +
movsx ecx byte ptr [ebx+2Bh] +
push ecx  +
mov eax [ebp+var_10] +
push eax  +
mov edx [ebp+var_C] +
push edx  +
push edi  +
push esi  +
call sub_42AA60  +
add esp 14h +
jmp loc_40B3C6  +
push 0  +
mov ecx [ebp+var_10] +
push ecx  +
mov eax [ebp+var_C] +
push eax  +
push edi  +
push esi  +
call sub_42AA60  +
add esp 14h +
jmp loc_40B3C6  +
cmp dword_4D4C30 0 +
jz loc_40AF79  +
movsx edx byte ptr [ebx+2Dh] +
push edx  +
mov ecx [ebp+var_10] +
push ecx  +
mov eax [ebp+var_C] +
push eax  +
push edi  +
push esi  +
call sub_42AA60  +
add esp 14h +
jmp loc_40B3C6  +
push 1Fh  +
mov edx [ebp+var_10] +
push edx  +
mov ecx [ebp+var_C] +
push ecx  +
push edi  +
push esi  +
call sub_42AA60  +
add esp 14h +
jmp loc_40B3C6  +
lea eax [ebp+var_24] +
push eax  +
lea edx [ebp+var_14] +
push edx  +
push edi  +
push esi  +
call sub_41E618  +
add esp 10h +
lea ecx [ebp+var_28] +
push ecx  +
lea eax [ebp+var_18] +
push eax  +
mov edx [ebp+var_10] +
add edx edi +
push edx  +
mov ecx [ebp+var_C] +
add ecx esi +
push ecx  +
call sub_41E618  +
add esp 10h +
mov eax [ebp+var_18] +
sub eax [ebp+var_14] +
test eax eax +
jle loc_40B3C6  +
mov edx [ebp+var_28] +
sub edx [ebp+var_24] +
test edx edx +
jle loc_40B3C6  +
mov ecx [ebp+var_18] +
sub ecx [ebp+var_14] +
cmp ecx 3 +
jle loc_40AFF6  +
mov eax [ebp+var_28] +
sub eax [ebp+var_24] +
cmp eax 3 +
jg loc_40B1BA  +
cmp byte ptr [ebx+29h] 0 +
jnz loc_40B03A  +
cmp dword_4D4C30 0 +
jz loc_40B021  +
movsx edx byte ptr [ebx+2Bh] +
push edx  +
mov ecx [ebp+var_10] +
push ecx  +
mov eax [ebp+var_C] +
push eax  +
push edi  +
push esi  +
call sub_42AA60  +
add esp 14h +
jmp loc_40B3C6  +
push 0  +
mov edx [ebp+var_10] +
push edx  +
mov ecx [ebp+var_C] +
push ecx  +
push edi  +
push esi  +
call sub_42AA60  +
add esp 14h +
jmp loc_40B3C6  +
cmp dword_4D4C30 0 +
jz loc_40B05F  +
movsx eax byte ptr [ebx+2Dh] +
push eax  +
mov edx [ebp+var_10] +
push edx  +
mov ecx [ebp+var_C] +
push ecx  +
push edi  +
push esi  +
call sub_42AA60  +
add esp 14h +
jmp loc_40B3C6  +
push 1Fh  +
mov eax [ebp+var_10] +
push eax  +
mov edx [ebp+var_C] +
push edx  +
push edi  +
push esi  +
call sub_42AA60  +
add esp 14h +
jmp loc_40B3C6  +
lea ecx [ebp+var_24] +
push ecx  +
lea eax [ebp+var_14] +
push eax  +
push edi  +
push esi  +
call sub_41E618  +
add esp 10h +
lea edx [ebp+var_28] +
push edx  +
lea ecx [ebp+var_18] +
push ecx  +
mov eax [ebp+var_10] +
add eax edi +
push eax  +
push esi  +
call sub_41E618  +
add esp 10h +
lea edx [ebp+var_2C] +
push edx  +
lea ecx [ebp+var_1C] +
push ecx  +
mov eax [ebp+var_10] +
add eax edi +
push eax  +
mov edx [ebp+var_C] +
add edx esi +
push edx  +
call sub_41E618  +
add esp 10h +
lea ecx [ebp+var_30] +
push ecx  +
lea eax [ebp+var_20] +
push eax  +
push edi  +
mov edx [ebp+var_C] +
add edx esi +
push edx  +
call sub_41E618  +
add esp 10h +
mov ecx [ebp+var_28] +
sub ecx [ebp+var_24] +
test ecx ecx +
jg loc_40B0EC  +
mov eax [ebp+var_2C] +
sub eax [ebp+var_30] +
test eax eax +
jle loc_40B3C6  +
mov edx [ebp+var_20] +
sub edx [ebp+var_14] +
test edx edx +
jg loc_40B104  +
mov ecx [ebp+var_1C] +
sub ecx [ebp+var_18] +
test ecx ecx +
jle loc_40B3C6  +
mov eax [ebp+var_28] +
sub eax [ebp+var_24] +
cmp eax 3 +
jg loc_40B11A  +
mov edx [ebp+var_2C] +
sub edx [ebp+var_30] +
cmp edx 3 +
jle loc_40B138  +
mov ecx [ebp+var_20] +
sub ecx [ebp+var_14] +
cmp ecx 3 +
jg loc_40B1BA  +
mov eax [ebp+var_1C] +
sub eax [ebp+var_18] +
cmp eax 3 +
jg loc_40B1BA  +
cmp byte ptr [ebx+29h] 0 +
jnz loc_40B17C  +
cmp dword_4D4C30 0 +
jz loc_40B163  +
movsx edx byte ptr [ebx+2Bh] +
push edx  +
mov ecx [ebp+var_10] +
push ecx  +
mov eax [ebp+var_C] +
push eax  +
push edi  +
push esi  +
call sub_42AA60  +
add esp 14h +
jmp loc_40B3C6  +
push 0  +
mov edx [ebp+var_10] +
push edx  +
mov ecx [ebp+var_C] +
push ecx  +
push edi  +
push esi  +
call sub_42AA60  +
add esp 14h +
jmp loc_40B3C6  +
cmp dword_4D4C30 0 +
jz loc_40B1A1  +
movsx eax byte ptr [ebx+2Dh] +
push eax  +
mov edx [ebp+var_10] +
push edx  +
mov ecx [ebp+var_C] +
push ecx  +
push edi  +
push esi  +
call sub_42AA60  +
add esp 14h +
jmp loc_40B3C6  +
push 1Fh  +
mov eax [ebp+var_10] +
push eax  +
mov edx [ebp+var_C] +
push edx  +
push edi  +
push esi  +
call sub_42AA60  +
add esp 14h +
jmp loc_40B3C6  +
mov cl [ebx+29h] +
test cl cl +
jnz loc_40B1CD  +
xor eax eax +
mov [ebp+var_4] eax +
xor edx edx +
mov [ebp+var_8] edx +
jmp loc_40B202  +
movsx eax cl +
imul  dword_4CDD34 +
cdq   +
idiv  dword_4CDD38 +
mov [ebp+var_4] eax +
cmp [ebp+var_4] 1 +
jge loc_40B1ED  +
mov [ebp+var_4] 1 +
movsx eax byte ptr [ebx+29h] +
dec eax  +
imul  dword_4CDD34 +
cdq   +
idiv  dword_4CDD38 +
mov [ebp+var_8] eax +
cmp dword_4D4C30 0 +
jz loc_40B217  +
movsx ecx byte ptr [ebx+2Dh] +
mov dword_4EAD2C ecx +
jmp loc_40B221  +
mov dword_4EAD2C 1Fh +
cmp dword_4D4C30 0 +
jz loc_40B249  +
mov eax dword_4EAD2C +
push eax  +
movsx edx byte ptr [ebx+2Bh] +
push edx  +
mov ecx [ebp+var_10] +
push ecx  +
mov eax [ebp+var_C] +
push eax  +
push edi  +
push esi  +
call sub_40B624  +
add esp 18h +
jmp loc_40B264  +
mov edx dword_4EAD2C +
push edx  +
push 0  +
mov ecx [ebp+var_10] +
push ecx  +
mov eax [ebp+var_C] +
push eax  +
push edi  +
push esi  +
call sub_40B624  +
add esp 18h +
mov eax dword_4CDD38 +
test eax eax +
jz loc_40B291  +
mov edx dword_4CDD3C +
mov ecx dword_4CDD40 +
imul ecx dword_4CDD34 +
imul edx eax +
cmp edx ecx +
jg loc_40B291  +
mov eax [ebx+8] +
push eax  +
call sub_41BF54  +
pop ecx  +
mov dl [ebx+28h] +
dec dl  +
jz loc_40B2A1  +
dec dl  +
jz loc_40B2DC  +
jmp loc_40B323  +
mov eax [ebp+var_C] +
mov edx eax +
lea eax [edx+eax*8] +
lea eax [edx+eax*8] +
add eax eax +
mov ecx 3E8h +
cdq   +
idiv  ecx +
add eax dword_4EADA8 +
add eax [ebp+var_8] +
mov dword_4EADA8 eax +
mov eax [ebp+var_10] +
sub eax dword_4EADA4 +
sar eax 1 +
jns loc_40B2D4  +
adc eax 0 +
add dword_4EADAC eax +
jmp loc_40B34F  +
mov eax [ebp+var_C] +
mov edx eax +
lea eax [edx+eax*8] +
lea eax [edx+eax*8] +
add eax eax +
mov ecx 3E8h +
cdq   +
idiv  ecx +
mov edx dword_4EADA8 +
add edx [ebp+var_C] +
sub edx eax +
sub edx [ebp+var_8] +
sub edx dword_4EADA0 +
mov dword_4EADA8 edx +
mov eax [ebp+var_10] +
sub eax dword_4EADA4 +
sar eax 1 +
jns loc_40B31B  +
adc eax 0 +
add dword_4EADAC eax +
jmp loc_40B34F  +
mov ecx [ebp+var_C] +
sub ecx dword_4EADA0 +
sar ecx 1 +
jns loc_40B333  +
adc ecx 0 +
add dword_4EADA8 ecx +
mov eax [ebp+var_10] +
sub eax dword_4EADA4 +
sar eax 1 +
jns loc_40B349  +
adc eax 0 +
add dword_4EADAC eax +
cmp dword_4D4C30 0 +
jz loc_40B36B  +
movsx edx byte ptr [ebx+2Bh] +
push edx  +
mov ecx [ebx+8] +
push ecx  +
call sub_41BC44  +
add esp 8 +
jmp loc_40B379  +
push 0  +
mov eax [ebx+8] +
push eax  +
call sub_41BC44  +
add esp 8 +
cmp [ebp+var_4] 0 +
jz loc_40B3C6  +
cmp [ebp+var_4] 1 +
jle loc_40B388  +
inc [ebp+var_4]  +
cmp dword_4D4C30 0 +
jz loc_40B3AE  +
movsx edx byte ptr [ebx+2Dh] +
push edx  +
mov ecx [ebp+var_4] +
push ecx  +
mov eax [ebp+var_10] +
push eax  +
mov edx [ebp+var_C] +
push edx  +
push edi  +
push esi  +
call sub_40B3D0  +
add esp 18h +
jmp loc_40B3C6  +
push 1Fh  +
mov ecx [ebp+var_4] +
push ecx  +
mov eax [ebp+var_10] +
push eax  +
mov edx [ebp+var_C] +
push edx  +
push edi  +
push esi  +
call sub_40B3D0  +
add esp 18h +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
add esp 0FFFFFFF4h +
xor eax eax +
push ebx  +
push esi  +
push edi  +
mov ebx [ebp+arg_C] +
mov esi [ebp+arg_8] +
mov edx ebx +
mov [ebp+var_8] eax +
sar edx 1 +
jns loc_40B3ED  +
adc edx 0 +
mov [ebp+var_C] edx +
mov edi 1 +
jmp loc_40B588  +
mov eax edi +
mov ecx ebx +
imul  ebx +
cdq   +
idiv  esi +
imul  edi +
imul  ebx +
cdq   +
idiv  esi +
imul ecx ebx +
test ecx ecx +
jns loc_40B414  +
add ecx 3 +
sar ecx 2 +
sub ecx eax +
mov [ebp+var_4] ecx +
cmp [ebp+var_4] 0 +
jl loc_40B43D  +
fild  [ebp+var_4] +
add esp 0FFFFFFF8h +
fstp  [esp+20h+var_20] +
call _sqrt  +
add esp 8 +
call @_ftol$qv  +
mov [ebp+var_4] eax +
jmp loc_40B442  +
xor eax eax +
mov [ebp+var_4] eax +
mov edx [ebp+arg_14] +
push edx  +
mov ecx [ebp+arg_10] +
push ecx  +
mov eax ebx +
sar eax 1 +
jns loc_40B453  +
adc eax 0 +
add eax [ebp+arg_4] +
add eax [ebp+var_4] +
push eax  +
mov edx esi +
sar edx 1 +
jns loc_40B463  +
adc edx 0 +
add edx [ebp+arg_0] +
add edx edi +
push edx  +
mov ecx ebx +
sar ecx 1 +
jns loc_40B472  +
adc ecx 0 +
add ecx [ebp+arg_4] +
add ecx [ebp+var_C] +
push ecx  +
mov eax esi +
sar eax 1 +
jns loc_40B482  +
adc eax 0 +
add eax [ebp+arg_0] +
add eax [ebp+var_8] +
push eax  +
call sub_40C8E8  +
add esp 18h +
mov edx [ebp+arg_14] +
mov eax ebx +
sar eax 1 +
push edx  +
mov ecx [ebp+arg_10] +
push ecx  +
jns loc_40B4A2  +
adc eax 0 +
add eax [ebp+arg_4] +
add eax [ebp+var_4] +
push eax  +
mov edx esi +
sar edx 1 +
jns loc_40B4B2  +
adc edx 0 +
add edx [ebp+arg_0] +
sub edx edi +
push edx  +
mov ecx ebx +
sar ecx 1 +
jns loc_40B4C1  +
adc ecx 0 +
add ecx [ebp+arg_4] +
add ecx [ebp+var_C] +
push ecx  +
mov eax esi +
sar eax 1 +
jns loc_40B4D1  +
adc eax 0 +
add eax [ebp+arg_0] +
sub eax [ebp+var_8] +
push eax  +
call sub_40C8E8  +
add esp 18h +
mov edx [ebp+arg_14] +
mov eax ebx +
sar eax 1 +
push edx  +
mov ecx [ebp+arg_10] +
push ecx  +
jns loc_40B4F1  +
adc eax 0 +
add eax [ebp+arg_4] +
sub eax [ebp+var_4] +
push eax  +
mov edx esi +
sar edx 1 +
jns loc_40B501  +
adc edx 0 +
add edx [ebp+arg_0] +
add edx edi +
push edx  +
mov ecx ebx +
sar ecx 1 +
jns loc_40B510  +
adc ecx 0 +
add ecx [ebp+arg_4] +
sub ecx [ebp+var_C] +
push ecx  +
mov eax esi +
sar eax 1 +
jns loc_40B520  +
adc eax 0 +
add eax [ebp+arg_0] +
add eax [ebp+var_8] +
push eax  +
call sub_40C8E8  +
add esp 18h +
mov edx [ebp+arg_14] +
mov eax ebx +
sar eax 1 +
push edx  +
mov ecx [ebp+arg_10] +
push ecx  +
jns loc_40B540  +
adc eax 0 +
add eax [ebp+arg_4] +
sub eax [ebp+var_4] +
push eax  +
mov edx esi +
sar edx 1 +
jns loc_40B550  +
adc edx 0 +
add edx [ebp+arg_0] +
sub edx edi +
push edx  +
mov ecx ebx +
sar ecx 1 +
jns loc_40B55F  +
adc ecx 0 +
add ecx [ebp+arg_4] +
sub ecx [ebp+var_C] +
push ecx  +
mov eax esi +
sar eax 1 +
jns loc_40B56F  +
adc eax 0 +
add eax [ebp+arg_0] +
sub eax [ebp+var_8] +
push eax  +
call sub_40C8E8  +
mov [ebp+var_8] edi +
add esp 18h +
mov edx [ebp+var_4] +
inc edi  +
mov [ebp+var_C] edx +
lea ecx [esi+1] +
sar ecx 1 +
jns loc_40B592  +
adc ecx 0 +
cmp edi ecx +
jle loc_40B3FA  +
mov ecx [ebp+arg_14] +
push ecx  +
mov ecx [ebp+arg_10] +
push ecx  +
mov edx ebx +
sar edx 1 +
jns loc_40B5AB  +
adc edx 0 +
add edx [ebp+arg_4] +
mov ecx edx +
sub ecx [ebp+var_C] +
push ecx  +
mov eax esi +
sar eax 1 +
jns loc_40B5BD  +
adc eax 0 +
add eax [ebp+arg_0] +
add eax [ebp+var_8] +
push eax  +
add edx [ebp+var_C] +
push edx  +
mov edi esi +
sar edi 1 +
jns loc_40B5D1  +
adc edi 0 +
add edi [ebp+arg_0] +
push eax  +
call sub_40C8E8  +
add esp 18h +
mov edx [ebp+arg_14] +
push edx  +
mov ecx [ebp+arg_10] +
push ecx  +
mov edx ebx +
sar edx 1 +
jns loc_40B5EE  +
adc edx 0 +
add edx [ebp+arg_4] +
sub edx [ebp+var_C] +
push edx  +
mov eax esi +
sar eax 1 +
jns loc_40B5FE  +
adc eax 0 +
add eax [ebp+arg_0] +
sub eax [ebp+var_8] +
push eax  +
sar ebx 1 +
jns loc_40B60C  +
adc ebx 0 +
add ebx [ebp+arg_4] +
add ebx [ebp+var_C] +
push ebx  +
push eax  +
call sub_40C8E8  +
add esp 18h +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
push ecx  +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_C] +
xor ebx ebx +
jmp loc_40B704  +
mov eax ebx +
mov esi edi +
imul  edi +
cdq   +
idiv  [ebp+arg_8] +
imul  ebx +
imul  edi +
cdq   +
idiv  [ebp+arg_8] +
imul esi edi +
test esi esi +
jns loc_40B651  +
add esi 3 +
sar esi 2 +
sub esi eax +
test esi esi +
jl loc_40B677  +
mov [ebp+var_4] esi +
fild  [ebp+var_4] +
add esp 0FFFFFFF8h +
fstp  [esp+18h+var_18] +
call _sqrt  +
add esp 8 +
call @_ftol$qv  +
mov esi eax +
jmp loc_40B679  +
xor esi esi +
mov ecx [ebp+arg_10] +
mov edx edi +
push ecx  +
push 1  +
sar edx 1 +
jns loc_40B688  +
adc edx 0 +
add edx [ebp+arg_4] +
mov ecx edx +
sub ecx esi +
push ecx  +
mov eax [ebp+arg_8] +
sar eax 1 +
jns loc_40B69A  +
adc eax 0 +
add eax [ebp+arg_0] +
add edx esi +
add eax ebx +
push eax  +
push edx  +
mov edx [ebp+arg_8] +
sar edx 1 +
jns loc_40B6AD  +
adc edx 0 +
add edx [ebp+arg_0] +
push eax  +
call sub_40C8E8  +
add esp 18h +
mov edx [ebp+arg_14] +
mov ecx edi +
sar ecx 1 +
push edx  +
push 1  +
jns loc_40B6C8  +
adc ecx 0 +
add ecx [ebp+arg_4] +
sub ecx esi +
push ecx  +
mov eax [ebp+arg_8] +
sar eax 1 +
jns loc_40B6D8  +
adc eax 0 +
add eax [ebp+arg_0] +
sub eax ebx +
push eax  +
mov edx edi +
sar edx 1 +
jns loc_40B6E7  +
adc edx 0 +
add edx [ebp+arg_4] +
add esi edx +
push esi  +
mov ecx [ebp+arg_8] +
sar ecx 1 +
jns loc_40B6F7  +
adc ecx 0 +
add ecx [ebp+arg_0] +
push eax  +
call sub_40C8E8  +
add esp 18h +
inc ebx  +
mov eax [ebp+arg_8] +
inc eax  +
sar eax 1 +
jns loc_40B70F  +
adc eax 0 +
cmp ebx eax +
jle loc_40B635  +
pop edi  +
pop esi  +
pop ebx  +
pop ecx  +
pop ebp  +
retn   +
***
push ecx  +
add esp 0FFFFFFF8h +
push ebx  +
push esi  +
push edi  +
mov ebx [ebp+arg_0] +
movsx eax byte ptr [ebx+3Ch] +
imul  dword_4EBDA4 +
cdq   +
idiv  dword_4EBDA0 +
mov esi eax +
movsx edi byte ptr [ebx+3Dh] +
movsx ecx byte ptr [ebx+3Ah] +
movsx eax byte ptr [ebx+2Bh] +
imul  dword_4EBDA4 +
cdq   +
idiv  dword_4EBDA0 +
mov [ebp+var_8] eax +
cmp dword_4D4C30 0 +
jnz loc_40B8B9  +
mov edi 1Fh +
mov eax 1 +
test ecx ecx +
jnz loc_40B8C4  +
xor eax eax +
cmp ecx 3 +
jnz loc_40B8CB  +
xor eax eax +
cmp [ebp+arg_4] 0 +
jz loc_40B8DE  +
mov edx [ebx+1Ch] +
cmp byte ptr [edx+68h] 0 +
jnz loc_40B8E9  +
xor eax eax +
jmp loc_40B8E9  +
mov edx [ebx+1Ch] +
cmp byte ptr [edx+68h] 0 +
jz loc_40B8E9  +
xor eax eax +
test eax eax +
jz loc_40BB65  +
cmp [ebp+arg_4] 0 +
jnz loc_40B983  +
cmp dword_4EBDB0 1 +
jnz loc_40B983  +
mov eax [ebx+14h] +
imul  dword_4EBDA4 +
cdq   +
idiv  dword_4EBDA0 +
mov [ebp+var_4] eax +
mov eax [ebx+18h] +
imul  dword_4EBDA4 +
cdq   +
idiv  dword_4EBDA0 +
mov edx dword_4EAD3C +
cmp edx [ebp+var_4] +
jnz loc_40B95D  +
cmp eax dword_4EAD44 +
jnz loc_40B95D  +
mov eax [ebx+0Ch] +
imul  dword_4EBDA4 +
cdq   +
idiv  dword_4EBDA0 +
mov [ebp+var_4] eax +
mov eax [ebx+10h] +
imul  dword_4EBDA4 +
cdq   +
idiv  dword_4EBDA0 +
mov edx [ebp+var_8] +
push edx  +
push ecx  +
push edi  +
push esi  +
push eax  +
mov eax [ebp+var_4] +
push eax  +
mov ecx dword_4EAD44 +
push ecx  +
mov eax dword_4EAD3C +
push eax  +
call sub_410BB0  +
add esp 20h +
jmp loc_40BB65  +
movsx edx byte ptr [ebx+28h] +
cmp edx 8 +
ja loc_40BB65  +
jmp ds:off_40B997[edx*4]  +
mov eax [ebp+var_8] +
mov edx dword_4EAD44 +
push eax  +
push ecx  +
push edi  +
push esi  +
push edx  +
mov ecx dword_4EAD3C +
push ecx  +
call sub_410FA0  +
add esp 18h +
mov eax esi +
shl eax 3 +
sub eax esi +
mov ecx 0Ah +
cdq   +
idiv  ecx +
add dword_4EAD44 eax +
jmp loc_40BB65  +
mov eax [ebp+var_8] +
mov edx dword_4EAD44 +
push eax  +
push ecx  +
push edi  +
push esi  +
push edx  +
mov ecx dword_4EAD3C +
push ecx  +
call sub_4112F4  +
add esp 18h +
mov eax esi +
shl eax 3 +
sub eax esi +
mov ecx 0Ah +
cdq   +
idiv  ecx +
sub dword_4EAD44 eax +
jmp loc_40BB65  +
mov eax [ebp+var_8] +
mov edx dword_4EAD44 +
push eax  +
push ecx  +
push edi  +
push esi  +
push edx  +
mov ecx dword_4EAD3C +
push ecx  +
call sub_411784  +
add esp 18h +
mov eax esi +
shl eax 3 +
sub eax esi +
mov ecx 0Ah +
cdq   +
idiv  ecx +
add dword_4EAD3C eax +
jmp loc_40BB65  +
mov eax [ebp+var_8] +
mov edx dword_4EAD44 +
push eax  +
push ecx  +
push edi  +
push esi  +
push edx  +
mov ecx dword_4EAD3C +
push ecx  +
call sub_411654  +
add esp 18h +
mov eax esi +
shl eax 3 +
sub eax esi +
mov ecx 0Ah +
cdq   +
idiv  ecx +
sub dword_4EAD3C eax +
jmp loc_40BB65  +
mov eax [ebp+var_8] +
mov edx dword_4EAD44 +
push eax  +
push ecx  +
push edi  +
push esi  +
push edx  +
mov ecx dword_4EAD3C +
push ecx  +
call sub_411424  +
add esp 18h +
mov eax esi +
sar eax 1 +
jns loc_40BABD  +
adc eax 0 +
sub dword_4EAD3C eax +
sub dword_4EAD44 eax +
jmp loc_40BB65  +
mov edx [ebp+var_8] +
push edx  +
push ecx  +
push edi  +
push esi  +
mov ecx dword_4EAD44 +
push ecx  +
mov eax dword_4EAD3C +
push eax  +
call sub_4111E0  +
add esp 18h +
mov eax esi +
sar eax 1 +
jns loc_40BAF3  +
adc eax 0 +
add dword_4EAD3C eax +
add dword_4EAD44 eax +
jmp loc_40BB65  +
mov edx [ebp+var_8] +
push edx  +
push ecx  +
push edi  +
push esi  +
mov ecx dword_4EAD44 +
push ecx  +
mov eax dword_4EAD3C +
push eax  +
call sub_41153C  +
add esp 18h +
mov eax esi +
sar eax 1 +
jns loc_40BB26  +
adc eax 0 +
add dword_4EAD3C eax +
sub dword_4EAD44 eax +
jmp loc_40BB65  +
mov edx [ebp+var_8] +
push edx  +
push ecx  +
push edi  +
push esi  +
mov ecx dword_4EAD44 +
push ecx  +
mov eax dword_4EAD3C +
push eax  +
call sub_4110CC  +
add esp 18h +
mov eax esi +
sar eax 1 +
jns loc_40BB59  +
adc eax 0 +
sub dword_4EAD3C eax +
add dword_4EAD44 eax +
movsx eax byte ptr [ebx+3Eh] +
imul  dword_4EBDA4 +
cdq   +
idiv  dword_4EBDA0 +
mov esi eax +
movsx edi byte ptr [ebx+3Fh] +
movsx ecx byte ptr [ebx+3Bh] +
cmp dword_4D4C30 0 +
jnz loc_40BB8E  +
mov edi 1Fh +
mov eax 1 +
test ecx ecx +
jnz loc_40BB99  +
xor eax eax +
cmp ecx 3 +
jnz loc_40BBA0  +
xor eax eax +
cmp [ebp+arg_4] 0 +
jz loc_40BBB2  +
mov edx [ebx] +
cmp byte ptr [edx+68h] 0 +
jnz loc_40BBBC  +
xor eax eax +
jmp loc_40BBBC  +
mov edx [ebx] +
cmp byte ptr [edx+68h] 0 +
jz loc_40BBBC  +
xor eax eax +
test eax eax +
jz loc_40BE38  +
cmp [ebp+arg_4] 0 +
jnz loc_40BC56  +
cmp dword_4EBDB0 1 +
jnz loc_40BC56  +
mov eax [ebx+0Ch] +
imul  dword_4EBDA4 +
cdq   +
idiv  dword_4EBDA0 +
mov [ebp+var_4] eax +
mov eax [ebx+10h] +
imul  dword_4EBDA4 +
cdq   +
idiv  dword_4EBDA0 +
mov edx dword_4EAD38 +
cmp edx [ebp+var_4] +
jnz loc_40BC30  +
cmp eax dword_4EAD40 +
jnz loc_40BC30  +
mov eax [ebx+14h] +
imul  dword_4EBDA4 +
cdq   +
idiv  dword_4EBDA0 +
mov [ebp+var_4] eax +
mov eax [ebx+18h] +
imul  dword_4EBDA4 +
cdq   +
idiv  dword_4EBDA0 +
mov edx [ebp+var_8] +
push edx  +
push ecx  +
push edi  +
push esi  +
push eax  +
mov eax [ebp+var_4] +
push eax  +
mov ecx dword_4EAD40 +
push ecx  +
mov eax dword_4EAD38 +
push eax  +
call sub_410BB0  +
add esp 20h +
jmp loc_40BE38  +
movsx edx byte ptr [ebx+29h] +
cmp edx 8 +
ja loc_40BE38  +
jmp ds:off_40BC6A[edx*4]  +
mov eax [ebp+var_8] +
mov edx dword_4EAD40 +
push eax  +
push ecx  +
push edi  +
push esi  +
push edx  +
mov ecx dword_4EAD38 +
push ecx  +
call sub_410FA0  +
add esp 18h +
mov eax esi +
shl eax 3 +
sub eax esi +
mov ecx 0Ah +
cdq   +
idiv  ecx +
add dword_4EAD40 eax +
jmp loc_40BE38  +
mov eax [ebp+var_8] +
mov edx dword_4EAD40 +
push eax  +
push ecx  +
push edi  +
push esi  +
push edx  +
mov ecx dword_4EAD38 +
push ecx  +
call sub_4112F4  +
add esp 18h +
mov eax esi +
shl eax 3 +
sub eax esi +
mov ecx 0Ah +
cdq   +
idiv  ecx +
sub dword_4EAD40 eax +
jmp loc_40BE38  +
mov eax [ebp+var_8] +
mov edx dword_4EAD40 +
push eax  +
push ecx  +
push edi  +
push esi  +
push edx  +
mov ecx dword_4EAD38 +
push ecx  +
call sub_411784  +
add esp 18h +
mov eax esi +
shl eax 3 +
sub eax esi +
mov ecx 0Ah +
cdq   +
idiv  ecx +
add dword_4EAD38 eax +
jmp loc_40BE38  +
mov eax [ebp+var_8] +
mov edx dword_4EAD40 +
push eax  +
push ecx  +
push edi  +
push esi  +
push edx  +
mov ecx dword_4EAD38 +
push ecx  +
call sub_411654  +
add esp 18h +
mov eax esi +
shl eax 3 +
sub eax esi +
mov ecx 0Ah +
cdq   +
idiv  ecx +
sub dword_4EAD38 eax +
jmp loc_40BE38  +
mov eax [ebp+var_8] +
mov edx dword_4EAD40 +
push eax  +
push ecx  +
push edi  +
push esi  +
push edx  +
mov ecx dword_4EAD38 +
push ecx  +
call sub_411424  +
add esp 18h +
mov eax esi +
sar eax 1 +
jns loc_40BD90  +
adc eax 0 +
sub dword_4EAD38 eax +
sub dword_4EAD40 eax +
jmp loc_40BE38  +
mov edx [ebp+var_8] +
push edx  +
push ecx  +
push edi  +
push esi  +
mov ecx dword_4EAD40 +
push ecx  +
mov eax dword_4EAD38 +
push eax  +
call sub_4111E0  +
add esp 18h +
mov eax esi +
sar eax 1 +
jns loc_40BDC6  +
adc eax 0 +
add dword_4EAD38 eax +
add dword_4EAD40 eax +
jmp loc_40BE38  +
mov edx [ebp+var_8] +
push edx  +
push ecx  +
push edi  +
push esi  +
mov ecx dword_4EAD40 +
push ecx  +
mov eax dword_4EAD38 +
push eax  +
call sub_41153C  +
add esp 18h +
mov eax esi +
sar eax 1 +
jns loc_40BDF9  +
adc eax 0 +
add dword_4EAD38 eax +
sub dword_4EAD40 eax +
jmp loc_40BE38  +
mov edx [ebp+var_8] +
push edx  +
push ecx  +
push edi  +
push esi  +
mov ecx dword_4EAD40 +
push ecx  +
mov eax dword_4EAD38 +
push eax  +
call sub_4110CC  +
add esp 18h +
mov eax esi +
sar eax 1 +
jns loc_40BE2C  +
adc eax 0 +
sub dword_4EAD38 eax +
add dword_4EAD40 eax +
pop edi  +
pop esi  +
pop ebx  +
pop ecx  +
pop ecx  +
pop ebp  +
retn   +
***
add esp 0FFFFFFDCh +
add esp 0FFFFFF9Ch +
mov ecx dword_4EBDA4 +
push ebx  +
push esi  +
push edi  +
mov ebx dword_4EBDA0 +
mov eax [ebp+arg_0] +
mov eax [eax+4] +
imul  ecx +
cdq   +
idiv  ebx +
mov [ebp+var_14] eax +
mov eax [ebp+arg_0] +
mov eax [eax+20h] +
imul  ecx +
cdq   +
idiv  ebx +
mov [ebp+var_18] eax +
mov eax [ebp+arg_0] +
mov edx [eax] +
mov [ebp+var_8] edx +
mov eax [ebp+var_8] +
mov edx [eax+30h] +
imul edx ebx +
push edx  +
mov eax [ebp+var_8] +
mov edx [eax+34h] +
imul edx ecx +
push edx  +
call __initmatherr_0  +
mov eax [ebp+var_8] +
mov ecx dword_4EBDA4 +
mov ebx dword_4EBDA0 +
add esp 8 +
mov eax [eax+58h] +
imul  ecx +
cdq   +
idiv  ebx +
push eax  +
mov eax [ebp+var_8] +
mov eax [eax+54h] +
imul  ecx +
cdq   +
idiv  ebx +
push eax  +
call __initmatherr  +
mov eax [ebp+var_8] +
mov ecx dword_4EBDA4 +
mov ebx dword_4EBDA0 +
add esp 8 +
mov eax [eax+1Ch] +
imul  ecx +
cdq   +
idiv  ebx +
mov [ebp+var_C] eax +
mov eax [ebp+var_8] +
mov eax [eax+18h] +
imul  ecx +
cdq   +
idiv  ebx +
mov [ebp+var_10] eax +
mov ecx [ebp+var_8] +
mov eax [ecx+8] +
push eax  +
call sub_41BF54  +
mov eax dword_4CDD34 +
pop ecx  +
add eax eax +
mov ecx [ebp+var_C] +
sub ecx dword_4EADA4 +
lea eax [eax+eax*4] +
cdq   +
idiv  dword_4CDD38 +
sar ecx 1 +
jns loc_40C21F  +
adc ecx 0 +
add ecx dword_4EADAC +
sub ecx eax +
mov [ebp+var_1C] ecx +
mov eax [ebp+arg_0] +
mov edx [eax+1Ch] +
mov eax [edx+0B4h] +
cmp dword ptr [eax+8] 0 +
jz loc_40C45F  +
mov esi [eax+0Ch] +
movsx eax byte ptr [esi+2Bh] +
imul  dword_4EBDA4 +
cdq   +
idiv  dword_4EBDA0 +
mov [ebp+var_24] eax +
cmp [ebp+var_24] 0 +
jnz loc_40C264  +
mov [ebp+var_24] 1 +
movsx ecx byte ptr [esi+39h] +
mov [ebp+var_28] ecx +
cmp dword_4D4C30 0 +
jnz loc_40C27B  +
mov [ebp+var_28] 1Fh +
movsx eax byte ptr [esi+41h] +
neg eax  +
shl eax 4 +
imul  dword_4CDD34 +
cdq   +
idiv  dword_4CDD38 +
add eax [ebp+var_1C] +
mov [ebp+var_20] eax +
mov ebx eax +
mov eax [ebp+var_8] +
mov dl [eax+2Fh] +
dec dl  +
jz loc_40C2B4  +
dec dl  +
jz loc_40C381  +
dec dl  +
jz loc_40C31C  +
jmp loc_40C41F  +
mov ecx [ebp+var_C] +
sar ecx 1 +
jns loc_40C2BE  +
adc ecx 0 +
mov eax ebx +
sub eax dword_4EADAC +
cmp ecx eax +
jle loc_40C2E5  +
mov eax [ebp+var_C] +
sar eax 1 +
jns loc_40C2D4  +
adc eax 0 +
sub eax ebx +
add eax dword_4EADAC +
imul  [ebp+var_10] +
cdq   +
idiv  [ebp+var_C] +
jmp loc_40C300  +
mov eax ebx +
sub eax dword_4EADAC +
mov edx [ebp+var_C] +
sar edx 1 +
jns loc_40C2F7  +
adc edx 0 +
sub eax edx +
imul  [ebp+var_10] +
cdq   +
idiv  [ebp+var_C] +
mov ecx [ebp+var_14] +
cmp ecx [ebp+var_18] +
jge loc_40C312  +
mov edi [ebp+var_14] +
sub edi eax +
jmp loc_40C422  +
mov edi [ebp+var_14] +
add edi eax +
jmp loc_40C422  +
mov eax [ebp+var_C] +
test eax eax +
jns loc_40C326  +
add eax 3 +
sar eax 2 +
add ebx eax +
mov [ebp+var_20] ebx +
mov eax [ebp+var_C] +
sub eax ebx +
add eax dword_4EADAC +
imul  [ebp+var_10] +
sar eax 1 +
jns loc_40C343  +
adc eax 0 +
cdq   +
idiv  [ebp+var_C] +
mov ecx [ebp+var_14] +
cmp ecx [ebp+var_18] +
jge loc_40C368  +
mov edi [ebp+var_14] +
sub edi eax +
mov eax [ebp+var_10] +
test eax eax +
jns loc_40C35E  +
add eax 3 +
sar eax 2 +
add edi eax +
jmp loc_40C422  +
mov edi [ebp+var_14] +
add edi eax +
mov eax [ebp+var_10] +
test eax eax +
jns loc_40C377  +
add eax 3 +
sar eax 2 +
sub edi eax +
jmp loc_40C422  +
mov edx [ebp+var_10] +
imul edx [ebp+var_10] +
mov [ebp+var_2C] edx +
fild  [ebp+var_2C] +
mov ecx [ebp+var_C] +
imul ecx [ebp+var_C] +
mov [ebp+var_30] ecx +
fild  [ebp+var_30] +
fdivp st(1) st +
fild  [ebp+var_C] +
fmul  ds:flt_40C8E0 +
mov [ebp+var_34] ebx +
fild  [ebp+var_34] +
fsubp st(1) st +
fild  dword_4EADAC +
faddp st(1) st +
fmulp st(1) st +
fild  [ebp+var_C] +
fmul  ds:flt_40C8E0 +
mov [ebp+var_38] ebx +
fild  [ebp+var_38] +
fsubp st(1) st +
fild  dword_4EADAC +
faddp st(1) st +
fmulp st(1) st +
mov eax [ebp+var_10] +
imul  [ebp+var_10] +
mov [ebp+var_3C] eax +
fild  [ebp+var_3C] +
fmul  ds:flt_40C8E4 +
fsubrp st(1) st +
add esp 0FFFFFFF8h +
fstp  [esp+78h+var_78] +
call _sqrt  +
add esp 8 +
call @_ftol$qv  +
push eax  +
mov eax [ebp+var_10] +
inc eax  +
sar eax 1 +
jns loc_40C406  +
adc eax 0 +
pop edx  +
sub eax edx +
mov ecx [ebp+var_14] +
cmp ecx [ebp+var_18] +
jge loc_40C418  +
mov edi [ebp+var_14] +
sub edi eax +
jmp loc_40C422  +
mov edi [ebp+var_14] +
add edi eax +
jmp loc_40C422  +
mov edi [ebp+var_14] +
mov dword_4EAD38 edi +
mov dword_4EAD40 ebx +
push 1  +
push esi  +
call sub_40B870  +
add esp 8 +
mov edi dword_4EAD38 +
mov ebx dword_4EAD40 +
mov eax [ebp+var_28] +
push eax  +
mov edx [ebp+var_24] +
push edx  +
mov ecx [ebp+var_20] +
push ecx  +
mov eax [ebp+var_18] +
push eax  +
push ebx  +
push edi  +
call sub_40C8E8  +
add esp 18h +
mov edx [ebp+arg_0] +
mov ecx [edx+1Ch] +
mov eax [ecx+98h] +
mov [ebp+var_4] eax +
cmp [ebp+var_4] 0 +
jz loc_40C69A  +
mov edx [ebp+var_4] +
mov esi [edx] +
movsx eax byte ptr [esi+2Bh] +
imul  dword_4EBDA4 +
cdq   +
idiv  dword_4EBDA0 +
mov [ebp+var_24] eax +
cmp [ebp+var_24] 0 +
jnz loc_40C49E  +
mov [ebp+var_24] 1 +
movsx ecx byte ptr [esi+39h] +
mov [ebp+var_28] ecx +
cmp dword_4D4C30 0 +
jnz loc_40C4B5  +
mov [ebp+var_28] 1Fh +
movsx eax byte ptr [esi+41h] +
neg eax  +
shl eax 4 +
imul  dword_4CDD34 +
cdq   +
idiv  dword_4CDD38 +
add eax [ebp+var_1C] +
mov [ebp+var_20] eax +
mov ebx eax +
mov eax [ebp+var_8] +
mov dl [eax+2Fh] +
dec dl  +
jz loc_40C4EE  +
dec dl  +
jz loc_40C5A9  +
dec dl  +
jz loc_40C544  +
jmp loc_40C647  +
mov ecx [ebp+var_C] +
sar ecx 1 +
jns loc_40C4F8  +
adc ecx 0 +
mov eax ebx +
sub eax dword_4EADAC +
cmp ecx eax +
jle loc_40C517  +
mov eax ecx +
sub eax ebx +
add eax dword_4EADAC +
imul  [ebp+var_10] +
cdq   +
idiv  [ebp+var_C] +
jmp loc_40C528  +
mov eax ebx +
sub eax dword_4EADAC +
sub eax ecx +
imul  [ebp+var_10] +
cdq   +
idiv  [ebp+var_C] +
mov ecx [ebp+var_14] +
cmp ecx [ebp+var_18] +
jge loc_40C53A  +
mov edi [ebp+var_14] +
sub edi eax +
jmp loc_40C64A  +
mov edi [ebp+var_14] +
add edi eax +
jmp loc_40C64A  +
mov eax [ebp+var_C] +
test eax eax +
jns loc_40C54E  +
add eax 3 +
sar eax 2 +
add ebx eax +
mov [ebp+var_20] ebx +
mov eax [ebp+var_C] +
sub eax ebx +
add eax dword_4EADAC +
imul  [ebp+var_10] +
sar eax 1 +
jns loc_40C56B  +
adc eax 0 +
cdq   +
idiv  [ebp+var_C] +
mov ecx [ebp+var_14] +
cmp ecx [ebp+var_18] +
jge loc_40C590  +
mov edi [ebp+var_14] +
sub edi eax +
mov eax [ebp+var_10] +
test eax eax +
jns loc_40C586  +
add eax 3 +
sar eax 2 +
add edi eax +
jmp loc_40C64A  +
mov edi [ebp+var_14] +
add edi eax +
mov eax [ebp+var_10] +
test eax eax +
jns loc_40C59F  +
add eax 3 +
sar eax 2 +
sub edi eax +
jmp loc_40C64A  +
mov edx [ebp+var_10] +
imul edx [ebp+var_10] +
mov [ebp+var_40] edx +
fild  [ebp+var_40] +
mov ecx [ebp+var_C] +
imul ecx [ebp+var_C] +
mov [ebp+var_44] ecx +
fild  [ebp+var_44] +
fdivp st(1) st +
fild  [ebp+var_C] +
fmul  ds:flt_40C8E0 +
mov [ebp+var_48] ebx +
fild  [ebp+var_48] +
fsubp st(1) st +
fild  dword_4EADAC +
faddp st(1) st +
fmulp st(1) st +
fild  [ebp+var_C] +
fmul  ds:flt_40C8E0 +
mov [ebp+var_4C] ebx +
fild  [ebp+var_4C] +
fsubp st(1) st +
fild  dword_4EADAC +
faddp st(1) st +
fmulp st(1) st +
mov eax [ebp+var_10] +
imul  [ebp+var_10] +
mov [ebp+var_50] eax +
fild  [ebp+var_50] +
fmul  ds:flt_40C8E4 +
fsubrp st(1) st +
add esp 0FFFFFFF8h +
fstp  [esp+78h+var_78] +
call _sqrt  +
add esp 8 +
call @_ftol$qv  +
push eax  +
mov eax [ebp+var_10] +
inc eax  +
sar eax 1 +
jns loc_40C62E  +
adc eax 0 +
pop edx  +
sub eax edx +
mov ecx [ebp+var_14] +
cmp ecx [ebp+var_18] +
jge loc_40C640  +
mov edi [ebp+var_14] +
sub edi eax +
jmp loc_40C64A  +
mov edi [ebp+var_14] +
add edi eax +
jmp loc_40C64A  +
mov edi [ebp+var_14] +
mov dword_4EAD38 edi +
mov dword_4EAD40 ebx +
push 1  +
push esi  +
call sub_40B870  +
add esp 8 +
mov edi dword_4EAD38 +
mov ebx dword_4EAD40 +
mov eax [ebp+var_28] +
push eax  +
mov edx [ebp+var_24] +
push edx  +
mov ecx [ebp+var_20] +
push ecx  +
mov eax [ebp+var_18] +
push eax  +
push ebx  +
push edi  +
call sub_40C8E8  +
add esp 18h +
mov edx [ebp+var_4] +
mov ecx [edx+4] +
mov [ebp+var_4] ecx +
cmp [ebp+var_4] 0 +
jnz loc_40C478  +
mov eax [ebp+arg_0] +
mov edx [eax+1Ch] +
mov ecx [edx+94h] +
mov [ebp+var_4] ecx +
cmp [ebp+var_4] 0 +
jz loc_40C8D7  +
mov eax [ebp+var_4] +
mov esi [eax] +
movsx eax byte ptr [esi+2Bh] +
imul  dword_4EBDA4 +
cdq   +
idiv  dword_4EBDA0 +
mov [ebp+var_24] eax +
cmp [ebp+var_24] 0 +
jnz loc_40C6D9  +
mov [ebp+var_24] 1 +
movsx ecx byte ptr [esi+39h] +
mov [ebp+var_28] ecx +
cmp dword_4D4C30 0 +
jnz loc_40C6F0  +
mov [ebp+var_28] 1Fh +
movsx eax byte ptr [esi+41h] +
neg eax  +
shl eax 4 +
imul  dword_4CDD34 +
cdq   +
idiv  dword_4CDD38 +
add eax [ebp+var_1C] +
mov [ebp+var_20] eax +
mov ebx eax +
mov eax [ebp+var_8] +
mov dl [eax+2Fh] +
dec dl  +
jz loc_40C729  +
dec dl  +
jz loc_40C7E4  +
dec dl  +
jz loc_40C77F  +
jmp loc_40C882  +
mov ecx [ebp+var_C] +
sar ecx 1 +
jns loc_40C733  +
adc ecx 0 +
mov eax ebx +
sub eax dword_4EADAC +
cmp ecx eax +
jle loc_40C752  +
mov eax ecx +
sub eax ebx +
add eax dword_4EADAC +
imul  [ebp+var_10] +
cdq   +
idiv  [ebp+var_C] +
jmp loc_40C763  +
mov eax ebx +
sub eax dword_4EADAC +
sub eax ecx +
imul  [ebp+var_10] +
cdq   +
idiv  [ebp+var_C] +
mov ecx [ebp+var_14] +
cmp ecx [ebp+var_18] +
jge loc_40C775  +
mov edi [ebp+var_14] +
sub edi eax +
jmp loc_40C885  +
mov edi [ebp+var_14] +
add edi eax +
jmp loc_40C885  +
mov eax [ebp+var_C] +
test eax eax +
jns loc_40C789  +
add eax 3 +
sar eax 2 +
add ebx eax +
mov [ebp+var_20] ebx +
mov eax [ebp+var_C] +
sub eax ebx +
add eax dword_4EADAC +
imul  [ebp+var_10] +
sar eax 1 +
jns loc_40C7A6  +
adc eax 0 +
cdq   +
idiv  [ebp+var_C] +
mov ecx [ebp+var_14] +
cmp ecx [ebp+var_18] +
jge loc_40C7CB  +
mov edi [ebp+var_14] +
sub edi eax +
mov eax [ebp+var_10] +
test eax eax +
jns loc_40C7C1  +
add eax 3 +
sar eax 2 +
add edi eax +
jmp loc_40C885  +
mov edi [ebp+var_14] +
add edi eax +
mov eax [ebp+var_10] +
test eax eax +
jns loc_40C7DA  +
add eax 3 +
sar eax 2 +
sub edi eax +
jmp loc_40C885  +
mov edx [ebp+var_10] +
imul edx [ebp+var_10] +
mov [ebp+var_54] edx +
fild  [ebp+var_54] +
mov ecx [ebp+var_C] +
imul ecx [ebp+var_C] +
mov [ebp+var_58] ecx +
fild  [ebp+var_58] +
fdivp st(1) st +
fild  [ebp+var_C] +
fmul  ds:flt_40C8E0 +
mov [ebp+var_5C] ebx +
fild  [ebp+var_5C] +
fsubp st(1) st +
fild  dword_4EADAC +
faddp st(1) st +
fmulp st(1) st +
fild  [ebp+var_C] +
fmul  ds:flt_40C8E0 +
mov [ebp+var_60] ebx +
fild  [ebp+var_60] +
fsubp st(1) st +
fild  dword_4EADAC +
faddp st(1) st +
fmulp st(1) st +
mov eax [ebp+var_10] +
imul  [ebp+var_10] +
mov [ebp+var_64] eax +
fild  [ebp+var_64] +
fmul  ds:flt_40C8E4 +
fsubrp st(1) st +
add esp 0FFFFFFF8h +
fstp  [esp+78h+var_78] +
call _sqrt  +
add esp 8 +
call @_ftol$qv  +
push eax  +
mov eax [ebp+var_10] +
inc eax  +
sar eax 1 +
jns loc_40C869  +
adc eax 0 +
pop edx  +
sub eax edx +
mov ecx [ebp+var_14] +
cmp ecx [ebp+var_18] +
jge loc_40C87B  +
mov edi [ebp+var_14] +
sub edi eax +
jmp loc_40C885  +
mov edi [ebp+var_14] +
add edi eax +
jmp loc_40C885  +
mov edi [ebp+var_14] +
mov dword_4EAD3C edi +
mov dword_4EAD44 ebx +
push 1  +
push esi  +
call sub_40B870  +
add esp 8 +
mov eax dword_4EAD44 +
mov [ebp+var_20] eax +
mov edi dword_4EAD3C +
mov edx [ebp+var_28] +
push edx  +
mov ecx [ebp+var_24] +
push ecx  +
mov eax [ebp+var_20] +
push eax  +
mov edx [ebp+var_18] +
push edx  +
push ebx  +
push edi  +
call sub_40C8E8  +
add esp 18h +
mov ecx [ebp+var_4] +
mov eax [ecx+4] +
mov [ebp+var_4] eax +
cmp [ebp+var_4] 0 +
jnz loc_40C6B3  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_8] +
mov esi [ebp+arg_4] +
mov ebx [ebp+arg_0] +
mov eax [ebp+arg_C] +
push eax  +
push edi  +
push esi  +
push ebx  +
call sub_40B720  +
add esp 10h +
cmp eax 8 +
ja loc_40CB5D  +
jmp ds:off_40C916[eax*4]  +
push esi  +
push ebx  +
mov edx [ebp+arg_C] +
push edx  +
push edi  +
call sub_4118B0  +
add esp 10h +
test eax eax +
jz loc_40CB5D  +
mov ecx [ebp+arg_14] +
mov edx dword_4EAD44 +
push ecx  +
mov ecx dword_4EAD3C +
mov eax [ebp+arg_10] +
push eax  +
push edx  +
push ecx  +
mov eax dword_4EAD40 +
push eax  +
mov edx dword_4EAD38 +
push edx  +
call sub_40CB64  +
add esp 18h +
jmp loc_40CB5D  +
mov ecx [ebp+arg_C] +
push ecx  +
push edi  +
push esi  +
push ebx  +
call sub_4118B0  +
add esp 10h +
test eax eax +
jz loc_40CB5D  +
mov eax [ebp+arg_14] +
mov ecx dword_4EAD44 +
push eax  +
mov eax dword_4EAD3C +
mov edx [ebp+arg_10] +
push edx  +
push ecx  +
push eax  +
mov edx dword_4EAD40 +
push edx  +
mov ecx dword_4EAD38 +
push ecx  +
call sub_40CB64  +
add esp 18h +
jmp loc_40CB5D  +
mov eax [ebp+arg_C] +
push eax  +
push edi  +
push esi  +
push ebx  +
call sub_4118B0  +
add esp 10h +
test eax eax +
jz loc_40CB5D  +
mov edx [ebp+arg_14] +
mov eax dword_4EAD44 +
push edx  +
mov edx dword_4EAD3C +
mov ecx [ebp+arg_10] +
push ecx  +
push eax  +
push edx  +
mov ecx dword_4EAD40 +
push ecx  +
mov eax dword_4EAD38 +
push eax  +
call sub_40CC60  +
add esp 18h +
jmp loc_40CB5D  +
push esi  +
push ebx  +
mov edx [ebp+arg_C] +
push edx  +
push edi  +
call sub_4118B0  +
add esp 10h +
test eax eax +
jz loc_40CB5D  +
mov ecx [ebp+arg_14] +
mov edx dword_4EAD44 +
push ecx  +
mov ecx dword_4EAD3C +
mov eax [ebp+arg_10] +
push eax  +
push edx  +
push ecx  +
mov eax dword_4EAD40 +
push eax  +
mov edx dword_4EAD38 +
push edx  +
call sub_40CC60  +
add esp 18h +
jmp loc_40CB5D  +
mov ecx [ebp+arg_C] +
push ecx  +
push edi  +
push esi  +
push ebx  +
call sub_4118B0  +
add esp 10h +
test eax eax +
jz loc_40CB5D  +
mov eax [ebp+arg_14] +
mov ecx dword_4EAD44 +
push eax  +
mov eax dword_4EAD3C +
mov edx [ebp+arg_10] +
push edx  +
push ecx  +
push eax  +
mov edx dword_4EAD40 +
push edx  +
mov ecx dword_4EAD38 +
push ecx  +
call sub_40CD5C  +
add esp 18h +
jmp loc_40CB5D  +
push esi  +
push ebx  +
mov eax [ebp+arg_C] +
push eax  +
push edi  +
call sub_4118B0  +
add esp 10h +
test eax eax +
jz loc_40CB5D  +
mov edx [ebp+arg_14] +
mov eax dword_4EAD44 +
push edx  +
mov edx dword_4EAD3C +
mov ecx [ebp+arg_10] +
push ecx  +
push eax  +
push edx  +
mov ecx dword_4EAD40 +
push ecx  +
mov eax dword_4EAD38 +
push eax  +
call sub_40CD5C  +
add esp 18h +
jmp loc_40CB5D  +
mov edx [ebp+arg_C] +
push edx  +
push edi  +
push esi  +
push ebx  +
call sub_4118B0  +
add esp 10h +
test eax eax +
jz loc_40CB5D  +
mov ecx [ebp+arg_14] +
mov edx dword_4EAD44 +
push ecx  +
mov ecx dword_4EAD3C +
mov eax [ebp+arg_10] +
push eax  +
push edx  +
push ecx  +
mov eax dword_4EAD40 +
push eax  +
mov edx dword_4EAD38 +
push edx  +
call sub_40CF14  +
add esp 18h +
jmp loc_40CB5D  +
push esi  +
push ebx  +
mov ecx [ebp+arg_C] +
push ecx  +
push edi  +
call sub_4118B0  +
add esp 10h +
test eax eax +
jz loc_40CB5D  +
mov eax [ebp+arg_14] +
mov ecx dword_4EAD44 +
push eax  +
mov eax dword_4EAD3C +
mov edx [ebp+arg_10] +
push edx  +
push ecx  +
push eax  +
mov edx dword_4EAD40 +
push edx  +
mov ecx dword_4EAD38 +
push ecx  +
call sub_40CF14  +
add esp 18h +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
push ebx  +
push esi  +
push edi  +
mov ebx [ebp+arg_10] +
mov eax [ebp+arg_C] +
cmp eax [ebp+arg_4] +
jge loc_40CBAB  +
push 0D9Bh  +
push offset a_Drawlib_c_3  +
push offset aAssertionFai_3  +
push offset stream  +
call _fprintf  +
add esp 10h +
push offset aThisIsABugPl_3  +
push offset stream  +
call _fprintf  +
add esp 8 +
push 1  +
call _exit  +
pop ecx  +
mov edx [ebp+arg_14] +
push edx  +
mov ecx [ebp+arg_C] +
push ecx  +
mov eax [ebp+arg_8] +
push eax  +
mov edx [ebp+arg_4] +
push edx  +
mov ecx [ebp+arg_0] +
push ecx  +
call sub_42A938  +
add esp 14h +
cmp ebx 1 +
jle loc_40CC58  +
mov eax ebx +
sar eax 1 +
jns loc_40CBD9  +
adc eax 0 +
mov edi eax +
mov esi eax +
and ebx 80000001h +
jns loc_40CBEA  +
dec ebx  +
or ebx 0FFFFFFFEh +
inc ebx  +
dec ebx  +
jnz loc_40CBEE  +
inc esi  +
xor ebx ebx +
cmp edi ebx +
jle loc_40CC23  +
mov eax [ebp+arg_14] +
push eax  +
mov edx [ebp+arg_C] +
add edx edi +
dec edx  +
sub edx ebx +
push edx  +
mov ecx [ebp+arg_8] +
sub ecx ebx +
push ecx  +
mov eax [ebp+arg_4] +
sub eax edi +
add eax ebx +
inc eax  +
push eax  +
mov edx [ebp+arg_0] +
sub edx ebx +
push edx  +
call sub_42A938  +
add esp 14h +
inc ebx  +
cmp edi ebx +
jg loc_40CBF4  +
xor ebx ebx +
cmp esi ebx +
jle loc_40CC58  +
mov eax [ebp+arg_14] +
push eax  +
mov edx [ebp+arg_C] +
add edx esi +
dec edx  +
sub edx ebx +
push edx  +
mov ecx [ebp+arg_8] +
add ecx ebx +
push ecx  +
mov eax [ebp+arg_4] +
sub eax esi +
add eax ebx +
inc eax  +
push eax  +
mov edx [ebp+arg_0] +
add edx ebx +
push edx  +
call sub_42A938  +
add esp 14h +
inc ebx  +
cmp esi ebx +
jg loc_40CC29  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
push ebx  +
push esi  +
push edi  +
mov ebx [ebp+arg_10] +
mov eax [ebp+arg_8] +
cmp eax [ebp+arg_0] +
jle loc_40CCA7  +
push 0DBCh  +
push offset a_Drawlib_c_4  +
push offset aAssertionFai_4  +
push offset stream  +
call _fprintf  +
add esp 10h +
push offset aThisIsABugPl_4  +
push offset stream  +
call _fprintf  +
add esp 8 +
push 1  +
call _exit  +
pop ecx  +
mov edx [ebp+arg_14] +
push edx  +
mov ecx [ebp+arg_C] +
push ecx  +
mov eax [ebp+arg_8] +
push eax  +
mov edx [ebp+arg_4] +
push edx  +
mov ecx [ebp+arg_0] +
push ecx  +
call sub_42A938  +
add esp 14h +
cmp ebx 1 +
jle loc_40CD54  +
mov eax ebx +
sar eax 1 +
jns loc_40CCD5  +
adc eax 0 +
mov edi eax +
mov esi eax +
and ebx 80000001h +
jns loc_40CCE6  +
dec ebx  +
or ebx 0FFFFFFFEh +
inc ebx  +
dec ebx  +
jnz loc_40CCEA  +
inc esi  +
xor ebx ebx +
cmp edi ebx +
jle loc_40CD1F  +
mov eax [ebp+arg_14] +
push eax  +
mov edx [ebp+arg_C] +
sub edx ebx +
push edx  +
mov ecx [ebp+arg_8] +
sub ecx edi +
add ecx ebx +
inc ecx  +
push ecx  +
mov eax [ebp+arg_4] +
sub eax ebx +
push eax  +
mov edx [ebp+arg_0] +
add edx edi +
dec edx  +
sub edx ebx +
push edx  +
call sub_42A938  +
add esp 14h +
inc ebx  +
cmp edi ebx +
jg loc_40CCF0  +
xor ebx ebx +
cmp esi ebx +
jle loc_40CD54  +
mov eax [ebp+arg_14] +
push eax  +
mov edx [ebp+arg_C] +
add edx ebx +
push edx  +
mov ecx [ebp+arg_8] +
sub ecx esi +
add ecx ebx +
inc ecx  +
push ecx  +
mov eax [ebp+arg_4] +
add eax ebx +
push eax  +
mov edx [ebp+arg_0] +
add edx esi +
dec edx  +
sub edx ebx +
push edx  +
call sub_42A938  +
add esp 14h +
inc ebx  +
cmp esi ebx +
jg loc_40CD25  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
push ebx  +
push ebx  +
add esp 0FFFFFFDCh +
add esp 0FFFFFF9Ch +
mov ecx dword_4EBDA4 +
push ebx  +
push esi  +
push edi  +
mov ebx dword_4EBDA0 +
mov eax [ebp+arg_0] +
mov eax [eax+4] +
imul  ecx +
cdq   +
idiv  ebx +
mov [ebp+var_14] eax +
mov eax [ebp+arg_0] +
mov eax [eax+20h] +
imul  ecx +
cdq   +
idiv  ebx +
mov [ebp+var_18] eax +
mov eax [ebp+arg_0] +
mov edx [eax] +
mov [ebp+var_8] edx +
mov eax [ebp+var_8] +
mov edx [eax+30h] +
imul edx ebx +
push edx  +
mov eax [ebp+var_8] +
mov edx [eax+34h] +
imul edx ecx +
push edx  +
call __initmatherr_0  +
mov eax [ebp+var_8] +
mov ecx dword_4EBDA4 +
mov ebx dword_4EBDA0 +
add esp 8 +
mov eax [eax+58h] +
imul  ecx +
cdq   +
idiv  ebx +
push eax  +
mov eax [ebp+var_8] +
mov eax [eax+54h] +
imul  ecx +
cdq   +
idiv  ebx +
push eax  +
call __initmatherr  +
mov eax [ebp+var_8] +
mov ecx dword_4EBDA4 +
mov ebx dword_4EBDA0 +
add esp 8 +
mov eax [eax+1Ch] +
imul  ecx +
cdq   +
idiv  ebx +
mov [ebp+var_C] eax +
mov eax [ebp+var_8] +
mov eax [eax+18h] +
imul  ecx +
cdq   +
idiv  ebx +
mov [ebp+var_10] eax +
mov ecx [ebp+var_8] +
mov eax [ecx+8] +
push eax  +
call sub_41BF54  +
mov eax dword_4CDD34 +
pop ecx  +
add eax eax +
mov ecx [ebp+var_C] +
sub ecx dword_4EADA4 +
lea eax [eax+eax*4] +
cdq   +
idiv  dword_4CDD38 +
sar ecx 1 +
jns loc_40D49F  +
adc ecx 0 +
add ecx dword_4EADAC +
sub ecx eax +
mov [ebp+var_1C] ecx +
mov eax [ebp+arg_0] +
mov edx [eax+1Ch] +
mov eax [edx+0B4h] +
cmp dword ptr [eax+8] 0 +
jz loc_40D6DF  +
mov esi [eax+0Ch] +
movsx eax byte ptr [esi+2Bh] +
imul  dword_4EBDA4 +
cdq   +
idiv  dword_4EBDA0 +
mov [ebp+var_24] eax +
cmp [ebp+var_24] 0 +
jnz loc_40D4E4  +
mov [ebp+var_24] 1 +
movsx ecx byte ptr [esi+39h] +
mov [ebp+var_28] ecx +
cmp dword_4D4C30 0 +
jnz loc_40D4FB  +
mov [ebp+var_28] 1Fh +
movsx eax byte ptr [esi+41h] +
neg eax  +
shl eax 4 +
imul  dword_4CDD34 +
cdq   +
idiv  dword_4CDD38 +
add eax [ebp+var_1C] +
mov [ebp+var_20] eax +
mov ebx eax +
mov eax [ebp+var_8] +
mov dl [eax+2Fh] +
dec dl  +
jz loc_40D534  +
dec dl  +
jz loc_40D601  +
dec dl  +
jz loc_40D59C  +
jmp loc_40D69F  +
mov ecx [ebp+var_C] +
sar ecx 1 +
jns loc_40D53E  +
adc ecx 0 +
mov eax ebx +
sub eax dword_4EADAC +
cmp ecx eax +
jle loc_40D565  +
mov eax [ebp+var_C] +
sar eax 1 +
jns loc_40D554  +
adc eax 0 +
sub eax ebx +
add eax dword_4EADAC +
imul  [ebp+var_10] +
cdq   +
idiv  [ebp+var_C] +
jmp loc_40D580  +
mov eax ebx +
sub eax dword_4EADAC +
mov edx [ebp+var_C] +
sar edx 1 +
jns loc_40D577  +
adc edx 0 +
sub eax edx +
imul  [ebp+var_10] +
cdq   +
idiv  [ebp+var_C] +
mov ecx [ebp+var_14] +
cmp ecx [ebp+var_18] +
jge loc_40D592  +
mov edi [ebp+var_14] +
sub edi eax +
jmp loc_40D6A2  +
mov edi [ebp+var_14] +
add edi eax +
jmp loc_40D6A2  +
mov eax [ebp+var_C] +
test eax eax +
jns loc_40D5A6  +
add eax 3 +
sar eax 2 +
add ebx eax +
mov [ebp+var_20] ebx +
mov eax [ebp+var_C] +
sub eax ebx +
add eax dword_4EADAC +
imul  [ebp+var_10] +
sar eax 1 +
jns loc_40D5C3  +
adc eax 0 +
cdq   +
idiv  [ebp+var_C] +
mov ecx [ebp+var_14] +
cmp ecx [ebp+var_18] +
jge loc_40D5E8  +
mov edi [ebp+var_14] +
sub edi eax +
mov eax [ebp+var_10] +
test eax eax +
jns loc_40D5DE  +
add eax 3 +
sar eax 2 +
add edi eax +
jmp loc_40D6A2  +
mov edi [ebp+var_14] +
add edi eax +
mov eax [ebp+var_10] +
test eax eax +
jns loc_40D5F7  +
add eax 3 +
sar eax 2 +
sub edi eax +
jmp loc_40D6A2  +
mov edx [ebp+var_10] +
imul edx [ebp+var_10] +
mov [ebp+var_2C] edx +
fild  [ebp+var_2C] +
mov ecx [ebp+var_C] +
imul ecx [ebp+var_C] +
mov [ebp+var_30] ecx +
fild  [ebp+var_30] +
fdivp st(1) st +
fild  [ebp+var_C] +
fmul  ds:flt_40DB5C +
mov [ebp+var_34] ebx +
fild  [ebp+var_34] +
fsubp st(1) st +
fild  dword_4EADAC +
faddp st(1) st +
fmulp st(1) st +
fild  [ebp+var_C] +
fmul  ds:flt_40DB5C +
mov [ebp+var_38] ebx +
fild  [ebp+var_38] +
fsubp st(1) st +
fild  dword_4EADAC +
faddp st(1) st +
fmulp st(1) st +
mov eax [ebp+var_10] +
imul  [ebp+var_10] +
mov [ebp+var_3C] eax +
fild  [ebp+var_3C] +
fmul  ds:flt_40DB60 +
fsubrp st(1) st +
add esp 0FFFFFFF8h +
fstp  [esp+78h+var_78] +
call _sqrt  +
add esp 8 +
call @_ftol$qv  +
push eax  +
mov eax [ebp+var_10] +
inc eax  +
sar eax 1 +
jns loc_40D686  +
adc eax 0 +
pop edx  +
sub eax edx +
mov ecx [ebp+var_14] +
cmp ecx [ebp+var_18] +
jge loc_40D698  +
mov edi [ebp+var_14] +
sub edi eax +
jmp loc_40D6A2  +
mov edi [ebp+var_14] +
add edi eax +
jmp loc_40D6A2  +
mov edi [ebp+var_14] +
mov dword_4EAD38 edi +
mov dword_4EAD40 ebx +
push 1  +
push esi  +
call sub_40B870  +
add esp 8 +
mov edi dword_4EAD38 +
mov ebx dword_4EAD40 +
mov eax [ebp+var_28] +
push eax  +
mov edx [ebp+var_24] +
push edx  +
mov ecx [ebp+var_20] +
push ecx  +
mov eax [ebp+var_18] +
push eax  +
push ebx  +
push edi  +
call sub_40DB64  +
add esp 18h +
mov edx [ebp+arg_0] +
mov ecx [edx+1Ch] +
mov eax [ecx+98h] +
mov [ebp+var_4] eax +
cmp [ebp+var_4] 0 +
jz loc_40D91A  +
mov edx [ebp+var_4] +
mov esi [edx] +
movsx eax byte ptr [esi+2Bh] +
imul  dword_4EBDA4 +
cdq   +
idiv  dword_4EBDA0 +
mov [ebp+var_24] eax +
cmp [ebp+var_24] 0 +
jnz loc_40D71E  +
mov [ebp+var_24] 1 +
movsx ecx byte ptr [esi+39h] +
mov [ebp+var_28] ecx +
cmp dword_4D4C30 0 +
jnz loc_40D735  +
mov [ebp+var_28] 1Fh +
movsx eax byte ptr [esi+41h] +
neg eax  +
shl eax 4 +
imul  dword_4CDD34 +
cdq   +
idiv  dword_4CDD38 +
add eax [ebp+var_1C] +
mov [ebp+var_20] eax +
mov ebx eax +
mov eax [ebp+var_8] +
mov dl [eax+2Fh] +
dec dl  +
jz loc_40D76E  +
dec dl  +
jz loc_40D829  +
dec dl  +
jz loc_40D7C4  +
jmp loc_40D8C7  +
mov ecx [ebp+var_C] +
sar ecx 1 +
jns loc_40D778  +
adc ecx 0 +
mov eax ebx +
sub eax dword_4EADAC +
cmp ecx eax +
jle loc_40D797  +
mov eax ecx +
sub eax ebx +
add eax dword_4EADAC +
imul  [ebp+var_10] +
cdq   +
idiv  [ebp+var_C] +
jmp loc_40D7A8  +
mov eax ebx +
sub eax dword_4EADAC +
sub eax ecx +
imul  [ebp+var_10] +
cdq   +
idiv  [ebp+var_C] +
mov ecx [ebp+var_14] +
cmp ecx [ebp+var_18] +
jge loc_40D7BA  +
mov edi [ebp+var_14] +
sub edi eax +
jmp loc_40D8CA  +
mov edi [ebp+var_14] +
add edi eax +
jmp loc_40D8CA  +
mov eax [ebp+var_C] +
test eax eax +
jns loc_40D7CE  +
add eax 3 +
sar eax 2 +
add ebx eax +
mov [ebp+var_20] ebx +
mov eax [ebp+var_C] +
sub eax ebx +
add eax dword_4EADAC +
imul  [ebp+var_10] +
sar eax 1 +
jns loc_40D7EB  +
adc eax 0 +
cdq   +
idiv  [ebp+var_C] +
mov ecx [ebp+var_14] +
cmp ecx [ebp+var_18] +
jge loc_40D810  +
mov edi [ebp+var_14] +
sub edi eax +
mov eax [ebp+var_10] +
test eax eax +
jns loc_40D806  +
add eax 3 +
sar eax 2 +
add edi eax +
jmp loc_40D8CA  +
mov edi [ebp+var_14] +
add edi eax +
mov eax [ebp+var_10] +
test eax eax +
jns loc_40D81F  +
add eax 3 +
sar eax 2 +
sub edi eax +
jmp loc_40D8CA  +
mov edx [ebp+var_10] +
imul edx [ebp+var_10] +
mov [ebp+var_40] edx +
fild  [ebp+var_40] +
mov ecx [ebp+var_C] +
imul ecx [ebp+var_C] +
mov [ebp+var_44] ecx +
fild  [ebp+var_44] +
fdivp st(1) st +
fild  [ebp+var_C] +
fmul  ds:flt_40DB5C +
mov [ebp+var_48] ebx +
fild  [ebp+var_48] +
fsubp st(1) st +
fild  dword_4EADAC +
faddp st(1) st +
fmulp st(1) st +
fild  [ebp+var_C] +
fmul  ds:flt_40DB5C +
mov [ebp+var_4C] ebx +
fild  [ebp+var_4C] +
fsubp st(1) st +
fild  dword_4EADAC +
faddp st(1) st +
fmulp st(1) st +
mov eax [ebp+var_10] +
imul  [ebp+var_10] +
mov [ebp+var_50] eax +
fild  [ebp+var_50] +
fmul  ds:flt_40DB60 +
fsubrp st(1) st +
add esp 0FFFFFFF8h +
fstp  [esp+78h+var_78] +
call _sqrt  +
add esp 8 +
call @_ftol$qv  +
push eax  +
mov eax [ebp+var_10] +
inc eax  +
sar eax 1 +
jns loc_40D8AE  +
adc eax 0 +
pop edx  +
sub eax edx +
mov ecx [ebp+var_14] +
cmp ecx [ebp+var_18] +
jge loc_40D8C0  +
mov edi [ebp+var_14] +
sub edi eax +
jmp loc_40D8CA  +
mov edi [ebp+var_14] +
add edi eax +
jmp loc_40D8CA  +
mov edi [ebp+var_14] +
mov dword_4EAD38 edi +
mov dword_4EAD40 ebx +
push 1  +
push esi  +
call sub_40B870  +
add esp 8 +
mov edi dword_4EAD38 +
mov ebx dword_4EAD40 +
mov eax [ebp+var_28] +
push eax  +
mov edx [ebp+var_24] +
push edx  +
mov ecx [ebp+var_20] +
push ecx  +
mov eax [ebp+var_18] +
push eax  +
push ebx  +
push edi  +
call sub_40DB64  +
add esp 18h +
mov edx [ebp+var_4] +
mov ecx [edx+4] +
mov [ebp+var_4] ecx +
cmp [ebp+var_4] 0 +
jnz loc_40D6F8  +
mov eax [ebp+arg_0] +
mov edx [eax+1Ch] +
mov ecx [edx+94h] +
mov [ebp+var_4] ecx +
cmp [ebp+var_4] 0 +
jz loc_40DB55  +
mov eax [ebp+var_4] +
mov esi [eax] +
movsx eax byte ptr [esi+2Bh] +
imul  dword_4EBDA4 +
cdq   +
idiv  dword_4EBDA0 +
mov [ebp+var_24] eax +
cmp [ebp+var_24] 0 +
jnz loc_40D959  +
mov [ebp+var_24] 1 +
movsx ecx byte ptr [esi+39h] +
mov [ebp+var_28] ecx +
cmp dword_4D4C30 0 +
jnz loc_40D970  +
mov [ebp+var_28] 1Fh +
movsx eax byte ptr [esi+41h] +
neg eax  +
shl eax 4 +
imul  dword_4CDD34 +
cdq   +
idiv  dword_4CDD38 +
add eax [ebp+var_1C] +
mov [ebp+var_20] eax +
mov ebx eax +
mov eax [ebp+var_8] +
mov dl [eax+2Fh] +
dec dl  +
jz loc_40D9A9  +
dec dl  +
jz loc_40DA64  +
dec dl  +
jz loc_40D9FF  +
jmp loc_40DB02  +
mov ecx [ebp+var_C] +
sar ecx 1 +
jns loc_40D9B3  +
adc ecx 0 +
mov eax ebx +
sub eax dword_4EADAC +
cmp ecx eax +
jle loc_40D9D2  +
mov eax ecx +
sub eax ebx +
add eax dword_4EADAC +
imul  [ebp+var_10] +
cdq   +
idiv  [ebp+var_C] +
jmp loc_40D9E3  +
mov eax ebx +
sub eax dword_4EADAC +
sub eax ecx +
imul  [ebp+var_10] +
cdq   +
idiv  [ebp+var_C] +
mov ecx [ebp+var_14] +
cmp ecx [ebp+var_18] +
jge loc_40D9F5  +
mov edi [ebp+var_14] +
sub edi eax +
jmp loc_40DB05  +
mov edi [ebp+var_14] +
add edi eax +
jmp loc_40DB05  +
mov eax [ebp+var_C] +
test eax eax +
jns loc_40DA09  +
add eax 3 +
sar eax 2 +
add ebx eax +
mov [ebp+var_20] ebx +
mov eax [ebp+var_C] +
sub eax ebx +
add eax dword_4EADAC +
imul  [ebp+var_10] +
sar eax 1 +
jns loc_40DA26  +
adc eax 0 +
cdq   +
idiv  [ebp+var_C] +
mov ecx [ebp+var_14] +
cmp ecx [ebp+var_18] +
jge loc_40DA4B  +
mov edi [ebp+var_14] +
sub edi eax +
mov eax [ebp+var_10] +
test eax eax +
jns loc_40DA41  +
add eax 3 +
sar eax 2 +
add edi eax +
jmp loc_40DB05  +
mov edi [ebp+var_14] +
add edi eax +
mov eax [ebp+var_10] +
test eax eax +
jns loc_40DA5A  +
add eax 3 +
sar eax 2 +
sub edi eax +
jmp loc_40DB05  +
mov edx [ebp+var_10] +
imul edx [ebp+var_10] +
mov [ebp+var_54] edx +
fild  [ebp+var_54] +
mov ecx [ebp+var_C] +
imul ecx [ebp+var_C] +
mov [ebp+var_58] ecx +
fild  [ebp+var_58] +
fdivp st(1) st +
fild  [ebp+var_C] +
fmul  ds:flt_40DB5C +
mov [ebp+var_5C] ebx +
fild  [ebp+var_5C] +
fsubp st(1) st +
fild  dword_4EADAC +
faddp st(1) st +
fmulp st(1) st +
fild  [ebp+var_C] +
fmul  ds:flt_40DB5C +
mov [ebp+var_60] ebx +
fild  [ebp+var_60] +
fsubp st(1) st +
fild  dword_4EADAC +
faddp st(1) st +
fmulp st(1) st +
mov eax [ebp+var_10] +
imul  [ebp+var_10] +
mov [ebp+var_64] eax +
fild  [ebp+var_64] +
fmul  ds:flt_40DB60 +
fsubrp st(1) st +
add esp 0FFFFFFF8h +
fstp  [esp+78h+var_78] +
call _sqrt  +
add esp 8 +
call @_ftol$qv  +
push eax  +
mov eax [ebp+var_10] +
inc eax  +
sar eax 1 +
jns loc_40DAE9  +
adc eax 0 +
pop edx  +
sub eax edx +
mov ecx [ebp+var_14] +
cmp ecx [ebp+var_18] +
jge loc_40DAFB  +
mov edi [ebp+var_14] +
sub edi eax +
jmp loc_40DB05  +
mov edi [ebp+var_14] +
add edi eax +
jmp loc_40DB05  +
mov edi [ebp+var_14] +
mov dword_4EAD3C edi +
mov dword_4EAD44 ebx +
push 1  +
push esi  +
call sub_40B870  +
add esp 8 +
mov edi dword_4EAD3C +
mov ebx dword_4EAD44 +
mov eax [ebp+var_28] +
push eax  +
mov edx [ebp+var_24] +
push edx  +
mov ecx [ebp+var_20] +
push ecx  +
mov eax [ebp+var_18] +
push eax  +
push ebx  +
push edi  +
call sub_40DB64  +
add esp 18h +
mov edx [ebp+var_4] +
mov ecx [edx+4] +
mov [ebp+var_4] ecx +
cmp [ebp+var_4] 0 +
jnz loc_40D933  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_8] +
mov esi [ebp+arg_4] +
mov ebx [ebp+arg_0] +
mov eax [ebp+arg_C] +
push eax  +
push edi  +
push esi  +
push ebx  +
call sub_40B720  +
add esp 10h +
cmp eax 8 +
ja loc_40DDD9  +
jmp ds:off_40DB92[eax*4]  +
push esi  +
push ebx  +
mov edx [ebp+arg_C] +
push edx  +
push edi  +
call sub_4118B0  +
add esp 10h +
test eax eax +
jz loc_40DDD9  +
mov ecx [ebp+arg_14] +
mov edx dword_4EAD44 +
push ecx  +
mov ecx dword_4EAD3C +
mov eax [ebp+arg_10] +
push eax  +
push edx  +
push ecx  +
mov eax dword_4EAD40 +
push eax  +
mov edx dword_4EAD38 +
push edx  +
call sub_40DDE0  +
add esp 18h +
jmp loc_40DDD9  +
mov ecx [ebp+arg_C] +
push ecx  +
push edi  +
push esi  +
push ebx  +
call sub_4118B0  +
add esp 10h +
test eax eax +
jz loc_40DDD9  +
mov eax [ebp+arg_14] +
mov ecx dword_4EAD44 +
push eax  +
mov eax dword_4EAD3C +
mov edx [ebp+arg_10] +
push edx  +
push ecx  +
push eax  +
mov edx dword_4EAD40 +
push edx  +
mov ecx dword_4EAD38 +
push ecx  +
call sub_40DDE0  +
add esp 18h +
jmp loc_40DDD9  +
mov eax [ebp+arg_C] +
push eax  +
push edi  +
push esi  +
push ebx  +
call sub_4118B0  +
add esp 10h +
test eax eax +
jz loc_40DDD9  +
mov edx [ebp+arg_14] +
mov eax dword_4EAD44 +
push edx  +
mov edx dword_4EAD3C +
mov ecx [ebp+arg_10] +
push ecx  +
push eax  +
push edx  +
mov ecx dword_4EAD40 +
push ecx  +
mov eax dword_4EAD38 +
push eax  +
call sub_40E10C  +
add esp 18h +
jmp loc_40DDD9  +
push esi  +
push ebx  +
mov edx [ebp+arg_C] +
push edx  +
push edi  +
call sub_4118B0  +
add esp 10h +
test eax eax +
jz loc_40DDD9  +
mov ecx [ebp+arg_14] +
mov edx dword_4EAD44 +
push ecx  +
mov ecx dword_4EAD3C +
mov eax [ebp+arg_10] +
push eax  +
push edx  +
push ecx  +
mov eax dword_4EAD40 +
push eax  +
mov edx dword_4EAD38 +
push edx  +
call sub_40E10C  +
add esp 18h +
jmp loc_40DDD9  +
mov ecx [ebp+arg_C] +
push ecx  +
push edi  +
push esi  +
push ebx  +
call sub_4118B0  +
add esp 10h +
test eax eax +
jz loc_40DDD9  +
mov eax [ebp+arg_14] +
mov ecx dword_4EAD44 +
push eax  +
mov eax dword_4EAD3C +
mov edx [ebp+arg_10] +
push edx  +
push ecx  +
push eax  +
mov edx dword_4EAD40 +
push edx  +
mov ecx dword_4EAD38 +
push ecx  +
call sub_40E43C  +
add esp 18h +
jmp loc_40DDD9  +
push esi  +
push ebx  +
mov eax [ebp+arg_C] +
push eax  +
push edi  +
call sub_4118B0  +
add esp 10h +
test eax eax +
jz loc_40DDD9  +
mov edx [ebp+arg_14] +
mov eax dword_4EAD44 +
push edx  +
mov edx dword_4EAD3C +
mov ecx [ebp+arg_10] +
push ecx  +
push eax  +
push edx  +
mov ecx dword_4EAD40 +
push ecx  +
mov eax dword_4EAD38 +
push eax  +
call sub_40E43C  +
add esp 18h +
jmp loc_40DDD9  +
mov edx [ebp+arg_C] +
push edx  +
push edi  +
push esi  +
push ebx  +
call sub_4118B0  +
add esp 10h +
test eax eax +
jz loc_40DDD9  +
mov ecx [ebp+arg_14] +
mov edx dword_4EAD44 +
push ecx  +
mov ecx dword_4EAD3C +
mov eax [ebp+arg_10] +
push eax  +
push edx  +
push ecx  +
mov eax dword_4EAD40 +
push eax  +
mov edx dword_4EAD38 +
push edx  +
call sub_40E6A0  +
add esp 18h +
jmp loc_40DDD9  +
push esi  +
push ebx  +
mov ecx [ebp+arg_C] +
push ecx  +
push edi  +
call sub_4118B0  +
add esp 10h +
test eax eax +
jz loc_40DDD9  +
mov eax [ebp+arg_14] +
mov ecx dword_4EAD44 +
push eax  +
mov eax dword_4EAD3C +
mov edx [ebp+arg_10] +
push edx  +
push ecx  +
push eax  +
mov edx dword_4EAD40 +
push edx  +
mov ecx dword_4EAD38 +
push ecx  +
call sub_40E6A0  +
add esp 18h +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
add esp 0FFFFFFE4h +
push ebx  +
push esi  +
push edi  +
mov ebx [ebp+arg_C] +
mov esi [ebp+arg_8] +
cmp ebx [ebp+arg_4] +
jz loc_40E103  +
cmp ebx [ebp+arg_4] +
jg loc_40DE33  +
push 0F54h  +
push offset a_Drawlib_c_9  +
push offset aAssertionFai_9  +
push offset stream  +
call _fprintf  +
add esp 10h +
push offset aThisIsABugPl_9  +
push offset stream  +
call _fprintf  +
add esp 8 +
push 1  +
call _exit  +
pop ecx  +
mov eax esi +
mov edx ebx +
sub eax [ebp+arg_0] +
mov [ebp+var_18] eax +
mov ecx eax +
sub edx [ebp+arg_4] +
test ecx ecx +
mov [ebp+var_1C] edx +
mov edi edx +
jge loc_40DE4D  +
neg ecx  +
test edi edi +
jge loc_40DE53  +
neg edi  +
cmp edi ecx +
jg loc_40DE7C  +
mov eax edi +
add eax eax +
lea eax [eax+eax*4] +
lea eax [eax+eax*4] +
cdq   +
idiv  ecx +
mov ecx dword_4CD21C[eax*4] +
mov [ebp+var_10] ecx +
xor ecx ecx +
mov eax dword_4CD2E8[eax*4] +
mov [ebp+var_14] eax +
jmp loc_40DEA2  +
mov eax ecx +
add eax eax +
lea eax [eax+eax*4] +
lea eax [eax+eax*4] +
cdq   +
idiv  edi +
mov ecx dword_4CD21C[eax*4] +
mov [ebp+var_14] ecx +
mov ecx 1 +
mov eax dword_4CD2E8[eax*4] +
mov [ebp+var_10] eax +
mov eax [ebp+var_10] +
mov edi dword_4EBDA4 +
imul  edi +
cdq   +
idiv  dword_4EBDA0 +
mov [ebp+var_10] eax +
mov eax [ebp+var_14] +
imul  edi +
cdq   +
idiv  dword_4EBDA0 +
mov [ebp+var_14] eax +
cmp [ebp+var_10] 0 +
jnz loc_40DEDD  +
cmp [ebp+var_14] 0 +
jnz loc_40DEDD  +
mov eax 1 +
mov [ebp+var_14] eax +
mov [ebp+var_10] eax +
xor edx edx +
test ecx ecx +
mov [ebp+var_4] edx +
mov edi [ebp+arg_0] +
mov eax [ebp+arg_4] +
mov [ebp+var_C] eax +
jnz loc_40DEF9  +
cmp [ebp+var_10] 0 +
jnz loc_40E002  +
mov edx [ebp+var_14] +
mov [ebp+var_8] edx +
cmp esi [ebp+arg_0] +
jge loc_40DFEC  +
jmp loc_40DF70  +
mov edi [ebp+var_4] +
imul edi [ebp+var_8] +
mov eax edi +
imul  [ebp+var_18] +
cdq   +
idiv  [ebp+var_1C] +
mov ecx eax +
add ecx [ebp+arg_0] +
cmp esi ecx +
jle loc_40DF25  +
mov ecx esi +
mov eax edi +
add eax [ebp+arg_4] +
cmp ebx eax +
jge loc_40DF30  +
mov eax ebx +
mov edi ecx +
sub edi [ebp+var_10] +
cmp esi edi +
jle loc_40DF40  +
mov edi esi +
mov ecx [ebp+var_10] +
add ecx esi +
mov edx [ebp+var_14] +
add edx eax +
mov [ebp+var_C] edx +
cmp ebx [ebp+var_C] +
jge loc_40DF55  +
mov [ebp+var_C] ebx +
mov eax ebx +
sub eax [ebp+var_14] +
mov edx [ebp+arg_14] +
push edx  +
mov edx [ebp+arg_10] +
push edx  +
mov edx [ebp+var_C] +
push edx  +
push edi  +
push eax  +
push ecx  +
call sub_40CB64  +
add esp 18h +
add [ebp+var_4] 2 +
sub edi [ebp+var_10] +
cmp esi edi +
jl loc_40DF0A  +
mov eax [ebp+var_C] +
add eax [ebp+var_14] +
cmp ebx eax +
jg loc_40DF0A  +
jmp loc_40E103  +
mov edi [ebp+var_4] +
imul edi [ebp+var_8] +
mov eax edi +
imul  [ebp+var_18] +
cdq   +
idiv  [ebp+var_1C] +
mov ecx eax +
add ecx [ebp+arg_0] +
cmp esi ecx +
jge loc_40DFA1  +
mov ecx esi +
mov eax edi +
add eax [ebp+arg_4] +
cmp ebx eax +
jge loc_40DFAC  +
mov eax ebx +
mov edi [ebp+var_10] +
add edi ecx +
cmp esi edi +
jge loc_40DFBC  +
mov edi esi +
mov ecx esi +
sub ecx [ebp+var_10] +
mov edx [ebp+var_14] +
add edx eax +
mov [ebp+var_C] edx +
cmp ebx [ebp+var_C] +
jge loc_40DFD1  +
mov [ebp+var_C] ebx +
mov eax ebx +
sub eax [ebp+var_14] +
mov edx [ebp+arg_14] +
push edx  +
mov edx [ebp+arg_10] +
push edx  +
mov edx [ebp+var_C] +
push edx  +
push edi  +
push eax  +
push ecx  +
call sub_40CB64  +
add esp 18h +
add [ebp+var_4] 2 +
add edi [ebp+var_10] +
cmp esi edi +
jg loc_40DF86  +
mov eax [ebp+var_C] +
add eax [ebp+var_14] +
cmp ebx eax +
jg loc_40DF86  +
jmp loc_40E103  +
mov ecx [ebp+var_10] +
mov [ebp+var_8] ecx +
cmp esi [ebp+arg_0] +
jge loc_40E0F2  +
jmp loc_40E07B  +
mov edi [ebp+var_4] +
mov ecx [ebp+arg_0] +
imul edi [ebp+var_8] +
sub ecx edi +
cmp esi ecx +
jle loc_40E025  +
mov ecx esi +
mov eax edi +
imul  [ebp+var_1C] +
cdq   +
idiv  [ebp+var_18] +
push eax  +
mov eax [ebp+arg_4] +
pop edx  +
sub eax edx +
cmp ebx eax +
jge loc_40E03B  +
mov eax ebx +
mov edi ecx +
sub edi [ebp+var_10] +
cmp esi edi +
jle loc_40E04B  +
mov edi esi +
mov ecx [ebp+var_10] +
add ecx esi +
mov edx [ebp+var_14] +
add edx eax +
mov [ebp+var_C] edx +
cmp ebx [ebp+var_C] +
jge loc_40E060  +
mov [ebp+var_C] ebx +
mov eax ebx +
sub eax [ebp+var_14] +
mov edx [ebp+arg_14] +
push edx  +
mov edx [ebp+arg_10] +
push edx  +
mov edx [ebp+var_C] +
push edx  +
push edi  +
push eax  +
push ecx  +
call sub_40CB64  +
add esp 18h +
add [ebp+var_4] 2 +
sub edi [ebp+var_10] +
cmp esi edi +
jl loc_40E013  +
mov eax [ebp+var_C] +
add eax [ebp+var_14] +
cmp ebx eax +
jg loc_40E013  +
jmp loc_40E103  +
mov edi [ebp+var_4] +
imul edi [ebp+var_8] +
mov ecx edi +
add ecx [ebp+arg_0] +
cmp esi ecx +
jge loc_40E0A0  +
mov ecx esi +
mov eax edi +
imul  [ebp+var_1C] +
cdq   +
idiv  [ebp+var_18] +
add eax [ebp+arg_4] +
cmp ebx eax +
jge loc_40E0B2  +
mov eax ebx +
mov edi [ebp+var_10] +
add edi ecx +
cmp esi edi +
jge loc_40E0C2  +
mov edi esi +
mov ecx esi +
sub ecx [ebp+var_10] +
mov edx [ebp+var_14] +
add edx eax +
mov [ebp+var_C] edx +
cmp ebx [ebp+var_C] +
jge loc_40E0D7  +
mov [ebp+var_C] ebx +
mov eax ebx +
sub eax [ebp+var_14] +
mov edx [ebp+arg_14] +
push edx  +
mov edx [ebp+arg_10] +
push edx  +
mov edx [ebp+var_C] +
push edx  +
push edi  +
push eax  +
push ecx  +
call sub_40CB64  +
add esp 18h +
add [ebp+var_4] 2 +
add edi [ebp+var_10] +
cmp esi edi +
jg loc_40E08E  +
mov eax [ebp+var_C] +
add eax [ebp+var_14] +
cmp ebx eax +
jg loc_40E08E  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
add esp 0FFFFFFE4h +
push ebx  +
push esi  +
push edi  +
mov esi [ebp+arg_C] +
mov ebx [ebp+arg_8] +
cmp ebx [ebp+arg_0] +
jz loc_40E433  +
cmp ebx [ebp+arg_0] +
jl loc_40E15F  +
push 0FD5h  +
push offset a_Drawlib_c_10  +
push offset aAssertionFa_10  +
push offset stream  +
call _fprintf  +
add esp 10h +
push offset aThisIsABugP_10  +
push offset stream  +
call _fprintf  +
add esp 8 +
push 1  +
call _exit  +
pop ecx  +
mov eax ebx +
mov edx esi +
sub eax [ebp+arg_0] +
mov [ebp+var_18] eax +
mov ecx eax +
sub edx [ebp+arg_4] +
test ecx ecx +
mov [ebp+var_1C] edx +
mov edi edx +
jge loc_40E179  +
neg ecx  +
test edi edi +
jge loc_40E17F  +
neg edi  +
cmp edi ecx +
jg loc_40E1A8  +
mov eax edi +
add eax eax +
lea eax [eax+eax*4] +
lea eax [eax+eax*4] +
cdq   +
idiv  ecx +
mov ecx dword_4CD21C[eax*4] +
mov [ebp+var_10] ecx +
xor ecx ecx +
mov eax dword_4CD2E8[eax*4] +
mov [ebp+var_14] eax +
jmp loc_40E1CE  +
mov eax ecx +
add eax eax +
lea eax [eax+eax*4] +
lea eax [eax+eax*4] +
cdq   +
idiv  edi +
mov ecx dword_4CD21C[eax*4] +
mov [ebp+var_14] ecx +
mov ecx 1 +
mov eax dword_4CD2E8[eax*4] +
mov [ebp+var_10] eax +
mov eax [ebp+var_10] +
mov edi dword_4EBDA4 +
imul  edi +
cdq   +
idiv  dword_4EBDA0 +
mov [ebp+var_10] eax +
mov eax [ebp+var_14] +
imul  edi +
cdq   +
idiv  dword_4EBDA0 +
mov [ebp+var_14] eax +
cmp [ebp+var_10] 0 +
jnz loc_40E209  +
cmp [ebp+var_14] 0 +
jnz loc_40E209  +
mov eax 1 +
mov [ebp+var_14] eax +
mov [ebp+var_10] eax +
xor edx edx +
test ecx ecx +
mov [ebp+var_4] edx +
mov edi [ebp+arg_0] +
mov eax [ebp+arg_4] +
mov [ebp+var_C] eax +
jnz loc_40E225  +
cmp [ebp+var_10] 0 +
jnz loc_40E32E  +
mov edx [ebp+var_14] +
mov [ebp+var_8] edx +
cmp esi [ebp+arg_4] +
jge loc_40E318  +
jmp loc_40E29C  +
mov edi [ebp+var_4] +
mov ecx [ebp+arg_0] +
imul edi [ebp+var_8] +
mov eax edi +
imul  [ebp+var_18] +
cdq   +
idiv  [ebp+var_1C] +
sub ecx eax +
cmp ebx ecx +
jle loc_40E251  +
mov ecx ebx +
mov eax [ebp+arg_4] +
sub eax edi +
cmp esi eax +
jle loc_40E25C  +
mov eax esi +
mov edi ecx +
sub edi [ebp+var_10] +
cmp ebx edi +
jle loc_40E26C  +
mov edi ebx +
mov ecx [ebp+var_10] +
add ecx ebx +
mov edx eax +
sub edx [ebp+var_14] +
mov [ebp+var_C] edx +
cmp esi [ebp+var_C] +
jle loc_40E281  +
mov [ebp+var_C] esi +
mov eax [ebp+var_14] +
add eax esi +
mov edx [ebp+arg_14] +
push edx  +
mov edx [ebp+arg_10] +
push edx  +
mov edx [ebp+var_C] +
push edx  +
push edi  +
push eax  +
push ecx  +
call sub_40CC60  +
add esp 18h +
add [ebp+var_4] 2 +
sub edi [ebp+var_10] +
cmp ebx edi +
jl loc_40E236  +
mov eax [ebp+var_C] +
sub eax [ebp+var_14] +
cmp esi eax +
jl loc_40E236  +
jmp loc_40E433  +
mov edi [ebp+var_4] +
imul edi [ebp+var_8] +
mov eax edi +
imul  [ebp+var_18] +
cdq   +
idiv  [ebp+var_1C] +
mov ecx eax +
add ecx [ebp+arg_0] +
cmp ebx ecx +
jle loc_40E2CD  +
mov ecx ebx +
mov eax edi +
add eax [ebp+arg_4] +
cmp esi eax +
jge loc_40E2D8  +
mov eax esi +
mov edi ecx +
sub edi [ebp+var_10] +
cmp ebx edi +
jle loc_40E2E8  +
mov edi ebx +
mov ecx [ebp+var_10] +
add ecx ebx +
mov edx [ebp+var_14] +
add edx eax +
mov [ebp+var_C] edx +
cmp esi [ebp+var_C] +
jge loc_40E2FD  +
mov [ebp+var_C] esi +
mov eax esi +
sub eax [ebp+var_14] +
mov edx [ebp+arg_14] +
push edx  +
mov edx [ebp+arg_10] +
push edx  +
mov edx [ebp+var_C] +
push edx  +
push edi  +
push eax  +
push ecx  +
call sub_40CC60  +
add esp 18h +
add [ebp+var_4] 2 +
sub edi [ebp+var_10] +
cmp ebx edi +
jl loc_40E2B2  +
mov eax [ebp+var_C] +
add eax [ebp+var_14] +
cmp esi eax +
jg loc_40E2B2  +
jmp loc_40E433  +
mov ecx [ebp+var_10] +
mov [ebp+var_8] ecx +
cmp esi [ebp+arg_4] +
jge loc_40E422  +
jmp loc_40E3A7  +
mov edi [ebp+var_4] +
mov ecx [ebp+arg_0] +
imul edi [ebp+var_8] +
sub ecx edi +
cmp ebx ecx +
jle loc_40E351  +
mov ecx ebx +
mov eax edi +
imul  [ebp+var_1C] +
cdq   +
idiv  [ebp+var_18] +
push eax  +
mov eax [ebp+arg_4] +
pop edx  +
sub eax edx +
cmp esi eax +
jle loc_40E367  +
mov eax esi +
mov edi ecx +
sub edi [ebp+var_10] +
cmp ebx edi +
jle loc_40E377  +
mov edi ebx +
mov ecx [ebp+var_10] +
add ecx ebx +
mov edx eax +
sub edx [ebp+var_14] +
mov [ebp+var_C] edx +
cmp esi [ebp+var_C] +
jle loc_40E38C  +
mov [ebp+var_C] esi +
mov eax [ebp+var_14] +
add eax esi +
mov edx [ebp+arg_14] +
push edx  +
mov edx [ebp+arg_10] +
push edx  +
mov edx [ebp+var_C] +
push edx  +
push edi  +
push eax  +
push ecx  +
call sub_40CC60  +
add esp 18h +
add [ebp+var_4] 2 +
sub edi [ebp+var_10] +
cmp ebx edi +
jl loc_40E33F  +
mov eax [ebp+var_C] +
sub eax [ebp+var_14] +
cmp esi eax +
jl loc_40E33F  +
jmp loc_40E433  +
mov edi [ebp+var_4] +
mov ecx [ebp+arg_0] +
imul edi [ebp+var_8] +
sub ecx edi +
cmp ebx ecx +
jle loc_40E3CC  +
mov ecx ebx +
mov eax edi +
imul  [ebp+var_1C] +
cdq   +
idiv  [ebp+var_18] +
push eax  +
mov eax [ebp+arg_4] +
pop edx  +
sub eax edx +
cmp esi eax +
jge loc_40E3E2  +
mov eax esi +
mov edi ecx +
sub edi [ebp+var_10] +
cmp ebx edi +
jle loc_40E3F2  +
mov edi ebx +
mov ecx [ebp+var_10] +
add ecx ebx +
mov edx [ebp+var_14] +
add edx eax +
mov [ebp+var_C] edx +
cmp esi [ebp+var_C] +
jge loc_40E407  +
mov [ebp+var_C] esi +
mov eax esi +
sub eax [ebp+var_14] +
mov edx [ebp+arg_14] +
push edx  +
mov edx [ebp+arg_10] +
push edx  +
mov edx [ebp+var_C] +
push edx  +
push edi  +
push eax  +
push ecx  +
call sub_40CC60  +
add esp 18h +
add [ebp+var_4] 2 +
sub edi [ebp+var_10] +
cmp ebx edi +
jl loc_40E3BA  +
mov eax [ebp+var_C] +
add eax [ebp+var_14] +
cmp esi eax +
jg loc_40E3BA  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
add esp 0FFFFFFE4h +
push ebx  +
push esi  +
push edi  +
mov esi [ebp+arg_C] +
mov ebx [ebp+arg_8] +
cmp ebx [ebp+arg_0] +
jz loc_40E697  +
cmp esi [ebp+arg_4] +
jz loc_40E697  +
cmp esi [ebp+arg_4] +
jg loc_40E498  +
push 1056h  +
push offset a_Drawlib_c_11  +
push offset aAssertionFa_11  +
push offset stream  +
call _fprintf  +
add esp 10h +
push offset aThisIsABugP_11  +
push offset stream  +
call _fprintf  +
add esp 8 +
push 1  +
call _exit  +
pop ecx  +
cmp ebx [ebp+arg_0] +
jg loc_40E4D3  +
push 1057h  +
push offset a_Drawlib_c_12  +
push offset aAssertionFa_12  +
push offset stream  +
call _fprintf  +
add esp 10h +
push offset aThisIsABugP_12  +
push offset stream  +
call _fprintf  +
add esp 8 +
push 1  +
call _exit  +
pop ecx  +
mov eax ebx +
mov edx esi +
sub eax [ebp+arg_0] +
mov [ebp+var_18] eax +
mov ecx eax +
sub edx [ebp+arg_4] +
test ecx ecx +
mov [ebp+var_1C] edx +
mov edi edx +
jge loc_40E4ED  +
neg ecx  +
test edi edi +
jge loc_40E4F3  +
neg edi  +
cmp edi ecx +
jg loc_40E51C  +
mov eax edi +
add eax eax +
lea eax [eax+eax*4] +
lea eax [eax+eax*4] +
cdq   +
idiv  ecx +
mov ecx dword_4CD21C[eax*4] +
mov [ebp+var_10] ecx +
xor ecx ecx +
mov eax dword_4CD2E8[eax*4] +
mov [ebp+var_14] eax +
jmp loc_40E542  +
mov eax ecx +
add eax eax +
lea eax [eax+eax*4] +
lea eax [eax+eax*4] +
cdq   +
idiv  edi +
mov ecx dword_4CD21C[eax*4] +
mov [ebp+var_14] ecx +
mov ecx 1 +
mov eax dword_4CD2E8[eax*4] +
mov [ebp+var_10] eax +
mov eax [ebp+var_10] +
mov edi dword_4EBDA4 +
imul  edi +
cdq   +
idiv  dword_4EBDA0 +
mov [ebp+var_10] eax +
mov eax [ebp+var_14] +
imul  edi +
cdq   +
idiv  dword_4EBDA0 +
mov [ebp+var_14] eax +
cmp [ebp+var_10] 0 +
jnz loc_40E57D  +
cmp [ebp+var_14] 0 +
jnz loc_40E57D  +
mov eax 1 +
mov [ebp+var_14] eax +
mov [ebp+var_10] eax +
xor edx edx +
test ecx ecx +
mov [ebp+var_4] edx +
mov edi [ebp+arg_0] +
mov eax [ebp+arg_4] +
mov [ebp+var_C] eax +
jnz loc_40E599  +
cmp [ebp+var_10] 0 +
jnz loc_40E61A  +
mov edx [ebp+var_14] +
mov [ebp+var_8] edx +
jmp loc_40E607  +
mov edi [ebp+var_4] +
imul edi [ebp+var_8] +
mov eax edi +
imul  [ebp+var_18] +
cdq   +
idiv  [ebp+var_1C] +
mov ecx eax +
add ecx [ebp+arg_0] +
cmp ebx ecx +
jge loc_40E5BC  +
mov ecx ebx +
mov eax edi +
add eax [ebp+arg_4] +
cmp esi eax +
jge loc_40E5C7  +
mov eax esi +
mov edi [ebp+var_10] +
add edi ecx +
cmp ebx edi +
jge loc_40E5D7  +
mov edi ebx +
mov ecx ebx +
sub ecx [ebp+var_10] +
mov edx [ebp+var_14] +
add edx eax +
mov [ebp+var_C] edx +
cmp esi [ebp+var_C] +
jge loc_40E5EC  +
mov [ebp+var_C] esi +
mov eax esi +
sub eax [ebp+var_14] +
mov edx [ebp+arg_14] +
push edx  +
mov edx [ebp+arg_10] +
push edx  +
mov edx [ebp+var_C] +
push edx  +
push edi  +
push eax  +
push ecx  +
call sub_40CD5C  +
add esp 18h +
add [ebp+var_4] 2 +
add edi [ebp+var_10] +
cmp ebx edi +
jg loc_40E5A1  +
mov eax [ebp+var_C] +
add eax [ebp+var_14] +
cmp esi eax +
jg loc_40E5A1  +
jmp loc_40E697  +
mov ecx [ebp+var_10] +
mov [ebp+var_8] ecx +
jmp loc_40E686  +
mov edi [ebp+var_4] +
imul edi [ebp+var_8] +
mov ecx edi +
add ecx [ebp+arg_0] +
cmp ebx ecx +
jge loc_40E634  +
mov ecx ebx +
mov eax edi +
imul  [ebp+var_1C] +
cdq   +
idiv  [ebp+var_18] +
add eax [ebp+arg_4] +
cmp esi eax +
jge loc_40E646  +
mov eax esi +
mov edi [ebp+var_10] +
add edi ecx +
cmp ebx edi +
jge loc_40E656  +
mov edi ebx +
mov ecx ebx +
sub ecx [ebp+var_10] +
mov edx [ebp+var_14] +
add edx eax +
mov [ebp+var_C] edx +
cmp esi [ebp+var_C] +
jge loc_40E66B  +
mov [ebp+var_C] esi +
mov eax esi +
sub eax [ebp+var_14] +
mov edx [ebp+arg_14] +
push edx  +
mov edx [ebp+arg_10] +
push edx  +
mov edx [ebp+var_C] +
push edx  +
push edi  +
push eax  +
push ecx  +
call sub_40CD5C  +
add esp 18h +
add [ebp+var_4] 2 +
add edi [ebp+var_10] +
cmp ebx edi +
jg loc_40E622  +
mov eax [ebp+var_C] +
add eax [ebp+var_14] +
cmp esi eax +
jg loc_40E622  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
add esp 0FFFFFFE4h +
push ebx  +
push esi  +
push edi  +
mov esi [ebp+arg_C] +
mov ebx [ebp+arg_8] +
cmp ebx [ebp+arg_0] +
jz loc_40E902  +
cmp esi [ebp+arg_4] +
jz loc_40E902  +
cmp esi [ebp+arg_4] +
jg loc_40E6FC  +
push 10BAh  +
push offset a_Drawlib_c_13  +
push offset aAssertionFa_13  +
push offset stream  +
call _fprintf  +
add esp 10h +
push offset aThisIsABugP_13  +
push offset stream  +
call _fprintf  +
add esp 8 +
push 1  +
call _exit  +
pop ecx  +
cmp ebx [ebp+arg_0] +
jl loc_40E737  +
push 10BBh  +
push offset a_Drawlib_c_14  +
push offset aAssertionFa_14  +
push offset stream  +
call _fprintf  +
add esp 10h +
push offset aThisIsABugP_14  +
push offset stream  +
call _fprintf  +
add esp 8 +
push 1  +
call _exit  +
pop ecx  +
mov eax ebx +
mov edx esi +
sub eax [ebp+arg_0] +
mov [ebp+var_18] eax +
mov ecx eax +
sub edx [ebp+arg_4] +
test ecx ecx +
mov [ebp+var_1C] edx +
mov edi edx +
jge loc_40E751  +
neg ecx  +
test edi edi +
jge loc_40E757  +
neg edi  +
cmp edi ecx +
jg loc_40E780  +
mov eax edi +
add eax eax +
lea eax [eax+eax*4] +
lea eax [eax+eax*4] +
cdq   +
idiv  ecx +
mov ecx dword_4CD21C[eax*4] +
mov [ebp+var_10] ecx +
xor ecx ecx +
mov eax dword_4CD2E8[eax*4] +
mov [ebp+var_14] eax +
jmp loc_40E7A6  +
mov eax ecx +
add eax eax +
lea eax [eax+eax*4] +
lea eax [eax+eax*4] +
cdq   +
idiv  edi +
mov ecx dword_4CD21C[eax*4] +
mov [ebp+var_14] ecx +
mov ecx 1 +
mov eax dword_4CD2E8[eax*4] +
mov [ebp+var_10] eax +
mov eax [ebp+var_10] +
mov edi dword_4EBDA4 +
imul  edi +
cdq   +
idiv  dword_4EBDA0 +
mov [ebp+var_10] eax +
mov eax [ebp+var_14] +
imul  edi +
cdq   +
idiv  dword_4EBDA0 +
mov [ebp+var_14] eax +
cmp [ebp+var_10] 0 +
jnz loc_40E7E1  +
cmp [ebp+var_14] 0 +
jnz loc_40E7E1  +
mov eax 1 +
mov [ebp+var_14] eax +
mov [ebp+var_10] eax +
xor edx edx +
test ecx ecx +
mov [ebp+var_4] edx +
mov edi [ebp+arg_0] +
mov eax [ebp+arg_4] +
mov [ebp+var_C] eax +
jnz loc_40E7FD  +
cmp [ebp+var_10] 0 +
jnz loc_40E881  +
mov edx [ebp+var_14] +
mov [ebp+var_8] edx +
jmp loc_40E86B  +
mov edi [ebp+var_4] +
imul edi [ebp+var_8] +
mov eax edi +
imul  [ebp+var_18] +
cdq   +
idiv  [ebp+var_1C] +
mov ecx eax +
add ecx [ebp+arg_0] +
cmp ebx ecx +
jle loc_40E820  +
mov ecx ebx +
mov eax edi +
add eax [ebp+arg_4] +
cmp esi eax +
jge loc_40E82B  +
mov eax esi +
mov edi ecx +
sub edi [ebp+var_10] +
cmp ebx edi +
jle loc_40E83B  +
mov edi ebx +
mov ecx [ebp+var_10] +
add ecx ebx +
mov edx [ebp+var_14] +
add edx eax +
mov [ebp+var_C] edx +
cmp esi [ebp+var_C] +
jge loc_40E850  +
mov [ebp+var_C] esi +
mov eax esi +
sub eax [ebp+var_14] +
mov edx [ebp+arg_14] +
push edx  +
mov edx [ebp+arg_10] +
push edx  +
mov edx [ebp+var_C] +
push edx  +
push edi  +
push eax  +
push ecx  +
call sub_40CF14  +
add esp 18h +
add [ebp+var_4] 2 +
sub edi [ebp+var_10] +
cmp ebx edi +
jl loc_40E805  +
mov eax [ebp+var_C] +
add eax [ebp+var_14] +
cmp esi eax +
jg loc_40E805  +
jmp loc_40E902  +
mov ecx [ebp+var_10] +
mov [ebp+var_8] ecx +
jmp loc_40E8F1  +
mov edi [ebp+var_4] +
mov ecx [ebp+arg_0] +
imul edi [ebp+var_8] +
sub ecx edi +
cmp ebx ecx +
jle loc_40E89B  +
mov ecx ebx +
mov eax edi +
imul  [ebp+var_1C] +
cdq   +
idiv  [ebp+var_18] +
push eax  +
mov eax [ebp+arg_4] +
pop edx  +
sub eax edx +
cmp esi eax +
jge loc_40E8B1  +
mov eax esi +
mov edi ecx +
sub edi [ebp+var_10] +
cmp ebx edi +
jle loc_40E8C1  +
mov edi ebx +
mov ecx [ebp+var_10] +
add ecx ebx +
mov edx [ebp+var_14] +
add edx eax +
mov [ebp+var_C] edx +
cmp esi [ebp+var_C] +
jge loc_40E8D6  +
mov [ebp+var_C] esi +
mov eax esi +
sub eax [ebp+var_14] +
mov edx [ebp+arg_14] +
push edx  +
mov edx [ebp+arg_10] +
push edx  +
mov edx [ebp+var_C] +
push edx  +
push edi  +
push eax  +
push ecx  +
call sub_40CF14  +
add esp 18h +
add [ebp+var_4] 2 +
sub edi [ebp+var_10] +
cmp ebx edi +
jl loc_40E889  +
mov eax [ebp+var_C] +
add eax [ebp+var_14] +
cmp esi eax +
jg loc_40E889  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
add esp 0FFFFFFDCh +
add esp 0FFFFFF9Ch +
mov ecx dword_4EBDA4 +
push ebx  +
push esi  +
push edi  +
mov ebx dword_4EBDA0 +
mov eax [ebp+arg_0] +
mov eax [eax+4] +
imul  ecx +
cdq   +
idiv  ebx +
mov [ebp+var_14] eax +
mov eax [ebp+arg_0] +
mov eax [eax+20h] +
imul  ecx +
cdq   +
idiv  ebx +
mov [ebp+var_18] eax +
mov eax [ebp+arg_0] +
mov edx [eax] +
mov [ebp+var_8] edx +
mov eax [ebp+var_8] +
mov edx [eax+30h] +
imul edx ebx +
push edx  +
mov eax [ebp+var_8] +
mov edx [eax+34h] +
imul edx ecx +
push edx  +
call __initmatherr_0  +
mov eax [ebp+var_8] +
mov ecx dword_4EBDA4 +
mov ebx dword_4EBDA0 +
add esp 8 +
mov eax [eax+58h] +
imul  ecx +
cdq   +
idiv  ebx +
push eax  +
mov eax [ebp+var_8] +
mov eax [eax+54h] +
imul  ecx +
cdq   +
idiv  ebx +
push eax  +
call __initmatherr  +
mov eax [ebp+var_8] +
mov ecx dword_4EBDA4 +
mov ebx dword_4EBDA0 +
add esp 8 +
mov eax [eax+1Ch] +
imul  ecx +
cdq   +
idiv  ebx +
mov [ebp+var_C] eax +
mov eax [ebp+var_8] +
mov eax [eax+18h] +
imul  ecx +
cdq   +
idiv  ebx +
mov [ebp+var_10] eax +
mov ecx [ebp+var_8] +
mov eax [ecx+8] +
push eax  +
call sub_41BF54  +
mov eax dword_4CDD34 +
pop ecx  +
add eax eax +
mov ecx [ebp+var_C] +
sub ecx dword_4EADA4 +
lea eax [eax+eax*4] +
cdq   +
idiv  dword_4CDD38 +
sar ecx 1 +
jns loc_40ECEB  +
adc ecx 0 +
add ecx dword_4EADAC +
sub ecx eax +
mov [ebp+var_1C] ecx +
mov eax [ebp+arg_0] +
mov edx [eax+1Ch] +
mov eax [edx+0B4h] +
cmp dword ptr [eax+8] 0 +
jz loc_40EF2B  +
mov esi [eax+0Ch] +
movsx eax byte ptr [esi+2Bh] +
imul  dword_4EBDA4 +
cdq   +
idiv  dword_4EBDA0 +
mov [ebp+var_24] eax +
cmp [ebp+var_24] 0 +
jnz loc_40ED30  +
mov [ebp+var_24] 1 +
movsx ecx byte ptr [esi+39h] +
mov [ebp+var_28] ecx +
cmp dword_4D4C30 0 +
jnz loc_40ED47  +
mov [ebp+var_28] 1Fh +
movsx eax byte ptr [esi+41h] +
neg eax  +
shl eax 4 +
imul  dword_4CDD34 +
cdq   +
idiv  dword_4CDD38 +
add eax [ebp+var_1C] +
mov [ebp+var_20] eax +
mov ebx eax +
mov eax [ebp+var_8] +
mov dl [eax+2Fh] +
dec dl  +
jz loc_40ED80  +
dec dl  +
jz loc_40EE4D  +
dec dl  +
jz loc_40EDE8  +
jmp loc_40EEEB  +
mov ecx [ebp+var_C] +
sar ecx 1 +
jns loc_40ED8A  +
adc ecx 0 +
mov eax ebx +
sub eax dword_4EADAC +
cmp ecx eax +
jle loc_40EDB1  +
mov eax [ebp+var_C] +
sar eax 1 +
jns loc_40EDA0  +
adc eax 0 +
sub eax ebx +
add eax dword_4EADAC +
imul  [ebp+var_10] +
cdq   +
idiv  [ebp+var_C] +
jmp loc_40EDCC  +
mov eax ebx +
sub eax dword_4EADAC +
mov edx [ebp+var_C] +
sar edx 1 +
jns loc_40EDC3  +
adc edx 0 +
sub eax edx +
imul  [ebp+var_10] +
cdq   +
idiv  [ebp+var_C] +
mov ecx [ebp+var_14] +
cmp ecx [ebp+var_18] +
jge loc_40EDDE  +
mov edi [ebp+var_14] +
sub edi eax +
jmp loc_40EEEE  +
mov edi [ebp+var_14] +
add edi eax +
jmp loc_40EEEE  +
mov eax [ebp+var_C] +
test eax eax +
jns loc_40EDF2  +
add eax 3 +
sar eax 2 +
add ebx eax +
mov [ebp+var_20] ebx +
mov eax [ebp+var_C] +
sub eax ebx +
add eax dword_4EADAC +
imul  [ebp+var_10] +
sar eax 1 +
jns loc_40EE0F  +
adc eax 0 +
cdq   +
idiv  [ebp+var_C] +
mov ecx [ebp+var_14] +
cmp ecx [ebp+var_18] +
jge loc_40EE34  +
mov edi [ebp+var_14] +
sub edi eax +
mov eax [ebp+var_10] +
test eax eax +
jns loc_40EE2A  +
add eax 3 +
sar eax 2 +
add edi eax +
jmp loc_40EEEE  +
mov edi [ebp+var_14] +
add edi eax +
mov eax [ebp+var_10] +
test eax eax +
jns loc_40EE43  +
add eax 3 +
sar eax 2 +
sub edi eax +
jmp loc_40EEEE  +
mov edx [ebp+var_10] +
imul edx [ebp+var_10] +
mov [ebp+var_2C] edx +
fild  [ebp+var_2C] +
mov ecx [ebp+var_C] +
imul ecx [ebp+var_C] +
mov [ebp+var_30] ecx +
fild  [ebp+var_30] +
fdivp st(1) st +
fild  [ebp+var_C] +
fmul  ds:flt_40F3A8 +
mov [ebp+var_34] ebx +
fild  [ebp+var_34] +
fsubp st(1) st +
fild  dword_4EADAC +
faddp st(1) st +
fmulp st(1) st +
fild  [ebp+var_C] +
fmul  ds:flt_40F3A8 +
mov [ebp+var_38] ebx +
fild  [ebp+var_38] +
fsubp st(1) st +
fild  dword_4EADAC +
faddp st(1) st +
fmulp st(1) st +
mov eax [ebp+var_10] +
imul  [ebp+var_10] +
mov [ebp+var_3C] eax +
fild  [ebp+var_3C] +
fmul  ds:flt_40F3AC +
fsubrp st(1) st +
add esp 0FFFFFFF8h +
fstp  [esp+78h+var_78] +
call _sqrt  +
add esp 8 +
call @_ftol$qv  +
push eax  +
mov eax [ebp+var_10] +
inc eax  +
sar eax 1 +
jns loc_40EED2  +
adc eax 0 +
pop edx  +
sub eax edx +
mov ecx [ebp+var_14] +
cmp ecx [ebp+var_18] +
jge loc_40EEE4  +
mov edi [ebp+var_14] +
sub edi eax +
jmp loc_40EEEE  +
mov edi [ebp+var_14] +
add edi eax +
jmp loc_40EEEE  +
mov edi [ebp+var_14] +
mov dword_4EAD38 edi +
mov dword_4EAD40 ebx +
push 1  +
push esi  +
call sub_40B870  +
add esp 8 +
mov edi dword_4EAD38 +
mov ebx dword_4EAD40 +
mov eax [ebp+var_28] +
push eax  +
mov edx [ebp+var_24] +
push edx  +
mov ecx [ebp+var_20] +
push ecx  +
mov eax [ebp+var_18] +
push eax  +
push ebx  +
push edi  +
call sub_40F3B0  +
add esp 18h +
mov edx [ebp+arg_0] +
mov ecx [edx+1Ch] +
mov eax [ecx+98h] +
mov [ebp+var_4] eax +
cmp [ebp+var_4] 0 +
jz loc_40F166  +
mov edx [ebp+var_4] +
mov esi [edx] +
movsx eax byte ptr [esi+2Bh] +
imul  dword_4EBDA4 +
cdq   +
idiv  dword_4EBDA0 +
mov [ebp+var_24] eax +
cmp [ebp+var_24] 0 +
jnz loc_40EF6A  +
mov [ebp+var_24] 1 +
movsx ecx byte ptr [esi+39h] +
mov [ebp+var_28] ecx +
cmp dword_4D4C30 0 +
jnz loc_40EF81  +
mov [ebp+var_28] 1Fh +
movsx eax byte ptr [esi+41h] +
neg eax  +
shl eax 4 +
imul  dword_4CDD34 +
cdq   +
idiv  dword_4CDD38 +
add eax [ebp+var_1C] +
mov [ebp+var_20] eax +
mov ebx eax +
mov eax [ebp+var_8] +
mov dl [eax+2Fh] +
dec dl  +
jz loc_40EFBA  +
dec dl  +
jz loc_40F075  +
dec dl  +
jz loc_40F010  +
jmp loc_40F113  +
mov ecx [ebp+var_C] +
sar ecx 1 +
jns loc_40EFC4  +
adc ecx 0 +
mov eax ebx +
sub eax dword_4EADAC +
cmp ecx eax +
jle loc_40EFE3  +
mov eax ecx +
sub eax ebx +
add eax dword_4EADAC +
imul  [ebp+var_10] +
cdq   +
idiv  [ebp+var_C] +
jmp loc_40EFF4  +
mov eax ebx +
sub eax dword_4EADAC +
sub eax ecx +
imul  [ebp+var_10] +
cdq   +
idiv  [ebp+var_C] +
mov ecx [ebp+var_14] +
cmp ecx [ebp+var_18] +
jge loc_40F006  +
mov edi [ebp+var_14] +
sub edi eax +
jmp loc_40F116  +
mov edi [ebp+var_14] +
add edi eax +
jmp loc_40F116  +
mov eax [ebp+var_C] +
test eax eax +
jns loc_40F01A  +
add eax 3 +
sar eax 2 +
add ebx eax +
mov [ebp+var_20] ebx +
mov eax [ebp+var_C] +
sub eax ebx +
add eax dword_4EADAC +
imul  [ebp+var_10] +
sar eax 1 +
jns loc_40F037  +
adc eax 0 +
cdq   +
idiv  [ebp+var_C] +
mov ecx [ebp+var_14] +
cmp ecx [ebp+var_18] +
jge loc_40F05C  +
mov edi [ebp+var_14] +
sub edi eax +
mov eax [ebp+var_10] +
test eax eax +
jns loc_40F052  +
add eax 3 +
sar eax 2 +
add edi eax +
jmp loc_40F116  +
mov edi [ebp+var_14] +
add edi eax +
mov eax [ebp+var_10] +
test eax eax +
jns loc_40F06B  +
add eax 3 +
sar eax 2 +
sub edi eax +
jmp loc_40F116  +
mov edx [ebp+var_10] +
imul edx [ebp+var_10] +
mov [ebp+var_40] edx +
fild  [ebp+var_40] +
mov ecx [ebp+var_C] +
imul ecx [ebp+var_C] +
mov [ebp+var_44] ecx +
fild  [ebp+var_44] +
fdivp st(1) st +
fild  [ebp+var_C] +
fmul  ds:flt_40F3A8 +
mov [ebp+var_48] ebx +
fild  [ebp+var_48] +
fsubp st(1) st +
fild  dword_4EADAC +
faddp st(1) st +
fmulp st(1) st +
fild  [ebp+var_C] +
fmul  ds:flt_40F3A8 +
mov [ebp+var_4C] ebx +
fild  [ebp+var_4C] +
fsubp st(1) st +
fild  dword_4EADAC +
faddp st(1) st +
fmulp st(1) st +
mov eax [ebp+var_10] +
imul  [ebp+var_10] +
mov [ebp+var_50] eax +
fild  [ebp+var_50] +
fmul  ds:flt_40F3AC +
fsubrp st(1) st +
add esp 0FFFFFFF8h +
fstp  [esp+78h+var_78] +
call _sqrt  +
add esp 8 +
call @_ftol$qv  +
push eax  +
mov eax [ebp+var_10] +
inc eax  +
sar eax 1 +
jns loc_40F0FA  +
adc eax 0 +
pop edx  +
sub eax edx +
mov ecx [ebp+var_14] +
cmp ecx [ebp+var_18] +
jge loc_40F10C  +
mov edi [ebp+var_14] +
sub edi eax +
jmp loc_40F116  +
mov edi [ebp+var_14] +
add edi eax +
jmp loc_40F116  +
mov edi [ebp+var_14] +
mov dword_4EAD38 edi +
mov dword_4EAD40 ebx +
push 1  +
push esi  +
call sub_40B870  +
add esp 8 +
mov edi dword_4EAD38 +
mov ebx dword_4EAD40 +
mov eax [ebp+var_28] +
push eax  +
mov edx [ebp+var_24] +
push edx  +
mov ecx [ebp+var_20] +
push ecx  +
mov eax [ebp+var_18] +
push eax  +
push ebx  +
push edi  +
call sub_40F3B0  +
add esp 18h +
mov edx [ebp+var_4] +
mov ecx [edx+4] +
mov [ebp+var_4] ecx +
cmp [ebp+var_4] 0 +
jnz loc_40EF44  +
mov eax [ebp+arg_0] +
mov edx [eax+1Ch] +
mov ecx [edx+94h] +
mov [ebp+var_4] ecx +
cmp [ebp+var_4] 0 +
jz loc_40F3A1  +
mov eax [ebp+var_4] +
mov esi [eax] +
movsx eax byte ptr [esi+2Bh] +
imul  dword_4EBDA4 +
cdq   +
idiv  dword_4EBDA0 +
mov [ebp+var_24] eax +
cmp [ebp+var_24] 0 +
jnz loc_40F1A5  +
mov [ebp+var_24] 1 +
movsx ecx byte ptr [esi+39h] +
mov [ebp+var_28] ecx +
cmp dword_4D4C30 0 +
jnz loc_40F1BC  +
mov [ebp+var_28] 1Fh +
movsx eax byte ptr [esi+41h] +
neg eax  +
shl eax 4 +
imul  dword_4CDD34 +
cdq   +
idiv  dword_4CDD38 +
add eax [ebp+var_1C] +
mov [ebp+var_20] eax +
mov ebx eax +
mov eax [ebp+var_8] +
mov dl [eax+2Fh] +
dec dl  +
jz loc_40F1F5  +
dec dl  +
jz loc_40F2B0  +
dec dl  +
jz loc_40F24B  +
jmp loc_40F34E  +
mov ecx [ebp+var_C] +
sar ecx 1 +
jns loc_40F1FF  +
adc ecx 0 +
mov eax ebx +
sub eax dword_4EADAC +
cmp ecx eax +
jle loc_40F21E  +
mov eax ecx +
sub eax ebx +
add eax dword_4EADAC +
imul  [ebp+var_10] +
cdq   +
idiv  [ebp+var_C] +
jmp loc_40F22F  +
mov eax ebx +
sub eax dword_4EADAC +
sub eax ecx +
imul  [ebp+var_10] +
cdq   +
idiv  [ebp+var_C] +
mov ecx [ebp+var_14] +
cmp ecx [ebp+var_18] +
jge loc_40F241  +
mov edi [ebp+var_14] +
sub edi eax +
jmp loc_40F351  +
mov edi [ebp+var_14] +
add edi eax +
jmp loc_40F351  +
mov eax [ebp+var_C] +
test eax eax +
jns loc_40F255  +
add eax 3 +
sar eax 2 +
add ebx eax +
mov [ebp+var_20] ebx +
mov eax [ebp+var_C] +
sub eax ebx +
add eax dword_4EADAC +
imul  [ebp+var_10] +
sar eax 1 +
jns loc_40F272  +
adc eax 0 +
cdq   +
idiv  [ebp+var_C] +
mov ecx [ebp+var_14] +
cmp ecx [ebp+var_18] +
jge loc_40F297  +
mov edi [ebp+var_14] +
sub edi eax +
mov eax [ebp+var_10] +
test eax eax +
jns loc_40F28D  +
add eax 3 +
sar eax 2 +
add edi eax +
jmp loc_40F351  +
mov edi [ebp+var_14] +
add edi eax +
mov eax [ebp+var_10] +
test eax eax +
jns loc_40F2A6  +
add eax 3 +
sar eax 2 +
sub edi eax +
jmp loc_40F351  +
mov edx [ebp+var_10] +
imul edx [ebp+var_10] +
mov [ebp+var_54] edx +
fild  [ebp+var_54] +
mov ecx [ebp+var_C] +
imul ecx [ebp+var_C] +
mov [ebp+var_58] ecx +
fild  [ebp+var_58] +
fdivp st(1) st +
fild  [ebp+var_C] +
fmul  ds:flt_40F3A8 +
mov [ebp+var_5C] ebx +
fild  [ebp+var_5C] +
fsubp st(1) st +
fild  dword_4EADAC +
faddp st(1) st +
fmulp st(1) st +
fild  [ebp+var_C] +
fmul  ds:flt_40F3A8 +
mov [ebp+var_60] ebx +
fild  [ebp+var_60] +
fsubp st(1) st +
fild  dword_4EADAC +
faddp st(1) st +
fmulp st(1) st +
mov eax [ebp+var_10] +
imul  [ebp+var_10] +
mov [ebp+var_64] eax +
fild  [ebp+var_64] +
fmul  ds:flt_40F3AC +
fsubrp st(1) st +
add esp 0FFFFFFF8h +
fstp  [esp+78h+var_78] +
call _sqrt  +
add esp 8 +
call @_ftol$qv  +
push eax  +
mov eax [ebp+var_10] +
inc eax  +
sar eax 1 +
jns loc_40F335  +
adc eax 0 +
pop edx  +
sub eax edx +
mov ecx [ebp+var_14] +
cmp ecx [ebp+var_18] +
jge loc_40F347  +
mov edi [ebp+var_14] +
sub edi eax +
jmp loc_40F351  +
mov edi [ebp+var_14] +
add edi eax +
jmp loc_40F351  +
mov edi [ebp+var_14] +
mov dword_4EAD3C edi +
mov dword_4EAD44 ebx +
push 1  +
push esi  +
call sub_40B870  +
add esp 8 +
mov edi dword_4EAD3C +
mov ebx dword_4EAD44 +
mov eax [ebp+var_28] +
push eax  +
mov edx [ebp+var_24] +
push edx  +
mov ecx [ebp+var_20] +
push ecx  +
mov eax [ebp+var_18] +
push eax  +
push ebx  +
push edi  +
call sub_40F3B0  +
add esp 18h +
mov edx [ebp+var_4] +
mov ecx [edx+4] +
mov [ebp+var_4] ecx +
cmp [ebp+var_4] 0 +
jnz loc_40F17F  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_8] +
mov esi [ebp+arg_4] +
mov ebx [ebp+arg_0] +
mov eax [ebp+arg_C] +
push eax  +
push edi  +
push esi  +
push ebx  +
call sub_40B720  +
add esp 10h +
cmp eax 8 +
ja loc_40F625  +
jmp ds:off_40F3DE[eax*4]  +
push esi  +
push ebx  +
mov edx [ebp+arg_C] +
push edx  +
push edi  +
call sub_4118B0  +
add esp 10h +
test eax eax +
jz loc_40F625  +
mov ecx [ebp+arg_14] +
mov edx dword_4EAD44 +
push ecx  +
mov ecx dword_4EAD3C +
mov eax [ebp+arg_10] +
push eax  +
push edx  +
push ecx  +
mov eax dword_4EAD40 +
push eax  +
mov edx dword_4EAD38 +
push edx  +
call sub_40F62C  +
add esp 18h +
jmp loc_40F625  +
mov ecx [ebp+arg_C] +
push ecx  +
push edi  +
push esi  +
push ebx  +
call sub_4118B0  +
add esp 10h +
test eax eax +
jz loc_40F625  +
mov eax [ebp+arg_14] +
mov ecx dword_4EAD44 +
push eax  +
mov eax dword_4EAD3C +
mov edx [ebp+arg_10] +
push edx  +
push ecx  +
push eax  +
mov edx dword_4EAD40 +
push edx  +
mov ecx dword_4EAD38 +
push ecx  +
call sub_40F62C  +
add esp 18h +
jmp loc_40F625  +
mov eax [ebp+arg_C] +
push eax  +
push edi  +
push esi  +
push ebx  +
call sub_4118B0  +
add esp 10h +
test eax eax +
jz loc_40F625  +
mov edx [ebp+arg_14] +
mov eax dword_4EAD44 +
push edx  +
mov edx dword_4EAD3C +
mov ecx [ebp+arg_10] +
push ecx  +
push eax  +
push edx  +
mov ecx dword_4EAD40 +
push ecx  +
mov eax dword_4EAD38 +
push eax  +
call sub_40F8E8  +
add esp 18h +
jmp loc_40F625  +
push esi  +
push ebx  +
mov edx [ebp+arg_C] +
push edx  +
push edi  +
call sub_4118B0  +
add esp 10h +
test eax eax +
jz loc_40F625  +
mov ecx [ebp+arg_14] +
mov edx dword_4EAD44 +
push ecx  +
mov ecx dword_4EAD3C +
mov eax [ebp+arg_10] +
push eax  +
push edx  +
push ecx  +
mov eax dword_4EAD40 +
push eax  +
mov edx dword_4EAD38 +
push edx  +
call sub_40F8E8  +
add esp 18h +
jmp loc_40F625  +
mov ecx [ebp+arg_C] +
push ecx  +
push edi  +
push esi  +
push ebx  +
call sub_4118B0  +
add esp 10h +
test eax eax +
jz loc_40F625  +
mov eax [ebp+arg_14] +
mov ecx dword_4EAD44 +
push eax  +
mov eax dword_4EAD3C +
mov edx [ebp+arg_10] +
push edx  +
push ecx  +
push eax  +
mov edx dword_4EAD40 +
push edx  +
mov ecx dword_4EAD38 +
push ecx  +
call sub_40FBA4  +
add esp 18h +
jmp loc_40F625  +
push esi  +
push ebx  +
mov eax [ebp+arg_C] +
push eax  +
push edi  +
call sub_4118B0  +
add esp 10h +
test eax eax +
jz loc_40F625  +
mov edx [ebp+arg_14] +
mov eax dword_4EAD44 +
push edx  +
mov edx dword_4EAD3C +
mov ecx [ebp+arg_10] +
push ecx  +
push eax  +
push edx  +
mov ecx dword_4EAD40 +
push ecx  +
mov eax dword_4EAD38 +
push eax  +
call sub_40FBA4  +
add esp 18h +
jmp loc_40F625  +
mov edx [ebp+arg_C] +
push edx  +
push edi  +
push esi  +
push ebx  +
call sub_4118B0  +
add esp 10h +
test eax eax +
jz loc_40F625  +
mov ecx [ebp+arg_14] +
mov edx dword_4EAD44 +
push ecx  +
mov ecx dword_4EAD3C +
mov eax [ebp+arg_10] +
push eax  +
push edx  +
push ecx  +
mov eax dword_4EAD40 +
push eax  +
mov edx dword_4EAD38 +
push edx  +
call sub_40FDE8  +
add esp 18h +
jmp loc_40F625  +
push esi  +
push ebx  +
mov ecx [ebp+arg_C] +
push ecx  +
push edi  +
call sub_4118B0  +
add esp 10h +
test eax eax +
jz loc_40F625  +
mov eax [ebp+arg_14] +
mov ecx dword_4EAD44 +
push eax  +
mov eax dword_4EAD3C +
mov edx [ebp+arg_10] +
push edx  +
push ecx  +
push eax  +
mov edx dword_4EAD40 +
push edx  +
mov ecx dword_4EAD38 +
push ecx  +
call sub_40FDE8  +
add esp 18h +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
add esp 0FFFFFFECh +
add esp 0FFFFFFECh +
add esp 0FFFFFFECh +
push ebx  +
push esi  +
push edi  +
mov eax [ebp+arg_0] +
cmp eax [ebp+arg_8] +
jz loc_40FDDF  +
mov edx [ebp+arg_4] +
cmp edx [ebp+arg_C] +
jz loc_40FDDF  +
mov ecx [ebp+arg_C] +
cmp ecx [ebp+arg_4] +
jg loc_40FC03  +
push 132Eh  +
push offset a_Drawlib_c_17  +
push offset aAssertionFa_17  +
push offset stream  +
call _fprintf  +
add esp 10h +
push offset aThisIsABugP_17  +
push offset stream  +
call _fprintf  +
add esp 8 +
push 1  +
call _exit  +
pop ecx  +
mov eax [ebp+arg_8] +
cmp eax [ebp+arg_0] +
jg loc_40FC41  +
push 132Fh  +
push offset a_Drawlib_c_18  +
push offset aAssertionFa_18  +
push offset stream  +
call _fprintf  +
add esp 10h +
push offset aThisIsABugP_18  +
push offset stream  +
call _fprintf  +
add esp 8 +
push 1  +
call _exit  +
pop ecx  +
mov edx [ebp+arg_8] +
sub edx [ebp+arg_0] +
mov [ebp+var_10] edx +
mov ecx edx +
mov eax [ebp+arg_C] +
sub eax [ebp+arg_4] +
mov [ebp+var_14] eax +
mov ebx eax +
test ecx ecx +
jge loc_40FC5D  +
neg ecx  +
test ebx ebx +
jge loc_40FC63  +
neg ebx  +
cmp ebx ecx +
jg loc_40FCA4  +
mov eax ebx +
add eax eax +
lea eax [eax+eax*4] +
lea eax [eax+eax*4] +
cdq   +
idiv  ecx +
mov ecx eax +
mov eax dword_4CD21C[ecx*4] +
lea eax [eax+eax*2] +
mov ebx 0Ch +
cdq   +
idiv  ebx +
mov [ebp+var_8] eax +
mov eax dword_4CD2E8[ecx*4] +
lea eax [eax+eax*2] +
mov ecx 0Ch +
cdq   +
idiv  ecx +
mov [ebp+var_C] eax +
xor ecx ecx +
jmp loc_40FCE2  +
mov eax ecx +
add eax eax +
lea eax [eax+eax*4] +
lea eax [eax+eax*4] +
cdq   +
idiv  ebx +
mov ecx eax +
mov eax dword_4CD21C[ecx*4] +
lea eax [eax+eax*2] +
mov ebx 0Ch +
cdq   +
idiv  ebx +
mov [ebp+var_C] eax +
mov eax dword_4CD2E8[ecx*4] +
lea eax [eax+eax*2] +
mov ecx 0Ch +
cdq   +
idiv  ecx +
mov [ebp+var_8] eax +
mov ecx 1 +
mov eax [ebp+var_8] +
mov ebx dword_4EBDA4 +
imul  ebx +
mov esi dword_4EBDA0 +
cdq   +
idiv  esi +
mov [ebp+var_8] eax +
mov eax [ebp+var_C] +
imul  ebx +
cdq   +
idiv  esi +
mov [ebp+var_C] eax +
cmp [ebp+var_8] 0 +
jnz loc_40FD1B  +
cmp [ebp+var_C] 0 +
jnz loc_40FD1B  +
mov eax 1 +
mov [ebp+var_C] eax +
mov [ebp+var_8] eax +
xor edi edi +
mov ebx [ebp+arg_0] +
mov esi [ebp+arg_4] +
test ecx ecx +
jnz loc_40FD2D  +
cmp [ebp+var_8] 0 +
jnz loc_40FD87  +
mov eax [ebp+var_C] +
mov [ebp+var_4] eax +
jmp loc_40FD75  +
mov ecx edi +
imul ecx [ebp+var_4] +
mov eax ecx +
imul  [ebp+var_10] +
cdq   +
idiv  [ebp+var_14] +
mov ebx eax +
add ebx [ebp+arg_0] +
cmp ebx [ebp+arg_8] +
jle loc_40FD51  +
mov ebx [ebp+arg_8] +
mov esi ecx +
add esi [ebp+arg_4] +
cmp esi [ebp+arg_C] +
jle loc_40FD5E  +
mov esi [ebp+arg_C] +
mov eax [ebp+arg_14] +
push eax  +
mov edx [ebp+arg_10] +
push edx  +
push esi  +
push ebx  +
push esi  +
push ebx  +
call sub_40CD5C  +
add esp 18h +
add edi 2 +
add ebx [ebp+var_8] +
cmp ebx [ebp+arg_8] +
jl loc_40FD35  +
add esi [ebp+var_C] +
cmp esi [ebp+arg_C] +
jl loc_40FD35  +
jmp loc_40FDDF  +
mov ecx [ebp+var_8] +
mov [ebp+var_4] ecx +
jmp loc_40FDCF  +
mov ecx edi +
imul ecx [ebp+var_4] +
mov ebx ecx +
add ebx [ebp+arg_0] +
cmp ebx [ebp+arg_8] +
jle loc_40FDA2  +
mov ebx [ebp+arg_8] +
mov eax ecx +
imul  [ebp+var_14] +
cdq   +
idiv  [ebp+var_10] +
mov esi eax +
add esi [ebp+arg_4] +
cmp esi [ebp+arg_C] +
jle loc_40FDB8  +
mov esi [ebp+arg_C] +
mov eax [ebp+arg_14] +
push eax  +
mov edx [ebp+arg_10] +
push edx  +
push esi  +
push ebx  +
push esi  +
push ebx  +
call sub_40CD5C  +
add esp 18h +
add edi 2 +
add ebx [ebp+var_8] +
cmp ebx [ebp+arg_8] +
jl loc_40FD8F  +
add esi [ebp+var_C] +
cmp esi [ebp+arg_C] +
jl loc_40FD8F  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
add esp 0FFFFFFECh +
push ebx  +
push esi  +
push edi  +
mov eax [ebp+arg_0] +
cmp eax [ebp+arg_8] +
jz loc_410023  +
mov edx [ebp+arg_4] +
cmp edx [ebp+arg_C] +
jz loc_410023  +
mov ecx [ebp+arg_C] +
cmp ecx [ebp+arg_4] +
jg loc_40FE47  +
push 138Bh  +
push offset a_Drawlib_c_19  +
push offset aAssertionFa_19  +
push offset stream  +
call _fprintf  +
add esp 10h +
push offset aThisIsABugP_19  +
push offset stream  +
call _fprintf  +
add esp 8 +
push 1  +
call _exit  +
pop ecx  +
mov eax [ebp+arg_8] +
cmp eax [ebp+arg_0] +
jl loc_40FE85  +
push 138Ch  +
push offset a_Drawlib_c_20  +
push offset aAssertionFa_20  +
push offset stream  +
call _fprintf  +
add esp 10h +
push offset aThisIsABugP_20  +
push offset stream  +
call _fprintf  +
add esp 8 +
push 1  +
call _exit  +
pop ecx  +
mov edx [ebp+arg_8] +
sub edx [ebp+arg_0] +
mov [ebp+var_10] edx +
mov ecx edx +
mov eax [ebp+arg_C] +
sub eax [ebp+arg_4] +
mov [ebp+var_14] eax +
mov ebx eax +
test ecx ecx +
jge loc_40FEA1  +
neg ecx  +
test ebx ebx +
jge loc_40FEA7  +
neg ebx  +
cmp ebx ecx +
jg loc_40FEE8  +
mov eax ebx +
add eax eax +
lea eax [eax+eax*4] +
lea eax [eax+eax*4] +
cdq   +
idiv  ecx +
mov ecx eax +
mov eax dword_4CD21C[ecx*4] +
lea eax [eax+eax*2] +
mov ebx 0Ch +
cdq   +
idiv  ebx +
mov [ebp+var_8] eax +
mov eax dword_4CD2E8[ecx*4] +
lea eax [eax+eax*2] +
mov ecx 0Ch +
cdq   +
idiv  ecx +
mov [ebp+var_C] eax +
xor ecx ecx +
jmp loc_40FF26  +
mov eax ecx +
add eax eax +
lea eax [eax+eax*4] +
lea eax [eax+eax*4] +
cdq   +
idiv  ebx +
mov ecx eax +
mov eax dword_4CD21C[ecx*4] +
lea eax [eax+eax*2] +
mov ebx 0Ch +
cdq   +
idiv  ebx +
mov [ebp+var_C] eax +
mov eax dword_4CD2E8[ecx*4] +
lea eax [eax+eax*2] +
mov ecx 0Ch +
cdq   +
idiv  ecx +
mov [ebp+var_8] eax +
mov ecx 1 +
mov eax [ebp+var_8] +
mov ebx dword_4EBDA4 +
imul  ebx +
mov esi dword_4EBDA0 +
cdq   +
idiv  esi +
mov [ebp+var_8] eax +
mov eax [ebp+var_C] +
imul  ebx +
cdq   +
idiv  esi +
mov [ebp+var_C] eax +
cmp [ebp+var_8] 0 +
jnz loc_40FF5F  +
cmp [ebp+var_C] 0 +
jnz loc_40FF5F  +
mov eax 1 +
mov [ebp+var_C] eax +
mov [ebp+var_8] eax +
xor edi edi +
mov ebx [ebp+arg_0] +
mov esi [ebp+arg_4] +
test ecx ecx +
jnz loc_40FF71  +
cmp [ebp+var_8] 0 +
jnz loc_40FFCB  +
mov eax [ebp+var_C] +
mov [ebp+var_4] eax +
jmp loc_40FFB9  +
mov ecx edi +
imul ecx [ebp+var_4] +
mov eax ecx +
imul  [ebp+var_10] +
cdq   +
idiv  [ebp+var_14] +
mov ebx eax +
add ebx [ebp+arg_0] +
cmp ebx [ebp+arg_8] +
jge loc_40FF95  +
mov ebx [ebp+arg_8] +
mov esi ecx +
add esi [ebp+arg_4] +
cmp esi [ebp+arg_C] +
jle loc_40FFA2  +
mov esi [ebp+arg_C] +
mov eax [ebp+arg_14] +
push eax  +
mov edx [ebp+arg_10] +
push edx  +
push esi  +
push ebx  +
push esi  +
push ebx  +
call sub_40CF14  +
add esp 18h +
add edi 2 +
sub ebx [ebp+var_8] +
cmp ebx [ebp+arg_8] +
jg loc_40FF79  +
add esi [ebp+var_C] +
cmp esi [ebp+arg_C] +
jl loc_40FF79  +
jmp loc_410023  +
mov ecx [ebp+var_8] +
mov [ebp+var_4] ecx +
jmp loc_410013  +
mov ecx edi +
mov ebx [ebp+arg_0] +
imul ecx [ebp+var_4] +
sub ebx ecx +
cmp ebx [ebp+arg_8] +
jge loc_40FFE6  +
mov ebx [ebp+arg_8] +
mov eax ecx +
mov esi [ebp+arg_4] +
imul  [ebp+var_14] +
cdq   +
idiv  [ebp+var_10] +
sub esi eax +
cmp esi [ebp+arg_C] +
jle loc_40FFFC  +
mov esi [ebp+arg_C] +
mov eax [ebp+arg_14] +
push eax  +
mov edx [ebp+arg_10] +
push edx  +
push esi  +
push ebx  +
push esi  +
push ebx  +
call sub_40CF14  +
add esp 18h +
add edi 2 +
sub ebx [ebp+var_8] +
cmp ebx [ebp+arg_8] +
jg loc_40FFD3  +
add esi [ebp+var_C] +
cmp esi [ebp+arg_C] +
jl loc_40FFD3  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
add esp 0FFFFFFE4h +
cmp dword_4D4B7C 0 +
push ebx  +
push esi  +
push edi  +
jnz loc_41085A  +
mov eax [ebp+arg_0] +
mov edi dword_4EBDA4 +
cmp dword_4D4C30 0 +
mov edx [eax+0B4h] +
mov ecx [edx+4] +
movsx eax byte ptr [ecx+2Bh] +
imul  edi +
cdq   +
idiv  dword_4EBDA0 +
mov esi eax +
mov eax [ecx+20h] +
imul  edi +
cdq   +
idiv  dword_4EBDA0 +
mov [ebp+var_4] eax +
test esi esi +
mov ebx [ecx] +
mov eax [ebx+30h] +
imul  dword_4EBDA0 +
push eax  +
mov edx [ebx+34h] +
imul edx edi +
push edx  +
call __initmatherr_0  +
add esp 8 +
mov eax [ebx+58h] +
imul  dword_4EBDA4 +
cdq   +
idiv  dword_4EBDA0 +
push eax  +
mov eax [ebx+54h] +
imul  dword_4EBDA4 +
cdq   +
idiv  dword_4EBDA0 +
push eax  +
call __initmatherr  +
add esp 8 +
mov eax [ebx+1Ch] +
imul  dword_4EBDA4 +
cdq   +
idiv  dword_4EBDA0 +
mov esi eax +
mov eax [ebx+8] +
push eax  +
call sub_41BF54  +
mov eax dword_4CDD34 +
pop ecx  +
add eax eax +
mov ecx esi +
sub ecx dword_4EADA4 +
lea eax [eax+eax*4] +
cdq   +
idiv  dword_4CDD38 +
sar ecx 1 +
jns loc_4100FC  +
adc ecx 0 +
add ecx dword_4EADAC +
sub ecx eax +
mov [ebp+var_18] ecx +
cmp byte ptr [ebx+2Fh] 3 +
jnz loc_41011A  +
test esi esi +
jns loc_410114  +
add esi 3 +
sar esi 2 +
add [ebp+var_18] esi +
mov eax [ebp+arg_0] +
mov edx [eax+0B4h] +
cmp dword ptr [edx+8] 0 +
jz loc_410302  +
mov ecx [ebp+arg_0] +
mov eax [ecx+0B4h] +
mov ecx [eax+0Ch] +
movsx eax byte ptr [ecx+2Bh] +
imul  dword_4EBDA4 +
cdq   +
idiv  dword_4EBDA0 +
mov esi eax +
test esi esi +
jnz loc_410155  +
mov esi 1 +
movsx eax byte ptr [ecx+39h] +
mov [ebp+var_14] eax +
cmp dword_4D4C30 0 +
jnz loc_41016C  +
mov [ebp+var_14] 1Fh +
movsx eax byte ptr [ecx+41h] +
neg eax  +
shl eax 4 +
imul  dword_4CDD34 +
cdq   +
idiv  dword_4CDD38 +
add eax [ebp+var_18] +
mov [ebp+var_C] eax +
mov eax [ecx+4] +
imul  dword_4EBDA4 +
cdq   +
idiv  dword_4EBDA0 +
mov [ebp+var_8] eax +
mov eax [ecx+8] +
imul  dword_4EBDA4 +
cdq   +
idiv  dword_4EBDA0 +
mov [ebp+var_10] eax +
cmp dword_4D4B68 1 +
jnz loc_410294  +
mov cl [ecx+2Ah] +
sub cl 1 +
jb loc_4101DA  +
jz loc_410258  +
dec cl  +
jz loc_410219  +
dec cl  +
jz loc_410302  +
jmp loc_410302  +
mov eax [ebp+var_14] +
push eax  +
push esi  +
mov edx [ebp+var_C] +
push edx  +
mov ecx [ebp+var_8] +
push ecx  +
mov eax [ebp+var_C] +
push eax  +
mov edx [ebp+var_4] +
push edx  +
call sub_40C8E8  +
add esp 18h +
mov ecx [ebp+var_14] +
push ecx  +
push esi  +
mov eax [ebp+var_10] +
push eax  +
mov edx [ebp+var_8] +
push edx  +
mov ecx [ebp+var_C] +
push ecx  +
mov eax [ebp+var_8] +
push eax  +
call sub_40C8E8  +
add esp 18h +
jmp loc_410302  +
mov edx [ebp+var_14] +
push edx  +
push esi  +
mov ecx [ebp+var_C] +
push ecx  +
mov eax [ebp+var_8] +
push eax  +
mov edx [ebp+var_C] +
push edx  +
mov ecx [ebp+var_4] +
push ecx  +
call sub_40DB64  +
add esp 18h +
mov eax [ebp+var_14] +
push eax  +
push esi  +
mov edx [ebp+var_10] +
push edx  +
mov ecx [ebp+var_8] +
push ecx  +
mov eax [ebp+var_C] +
push eax  +
mov edx [ebp+var_8] +
push edx  +
call sub_40DB64  +
add esp 18h +
jmp loc_410302  +
mov ecx [ebp+var_14] +
push ecx  +
push esi  +
mov eax [ebp+var_C] +
push eax  +
mov edx [ebp+var_8] +
push edx  +
mov ecx [ebp+var_C] +
push ecx  +
mov eax [ebp+var_4] +
push eax  +
call sub_40F3B0  +
add esp 18h +
mov edx [ebp+var_14] +
push edx  +
push esi  +
mov ecx [ebp+var_10] +
push ecx  +
mov eax [ebp+var_8] +
push eax  +
mov edx [ebp+var_C] +
push edx  +
mov ecx [ebp+var_8] +
push ecx  +
call sub_40F3B0  +
add esp 18h +
jmp loc_410302  +
mov al [ecx+2Ah] +
sub al 1 +
jb loc_4102A7  +
jz loc_4102E5  +
dec al  +
jz loc_4102C6  +
dec al  +
jz loc_410302  +
jmp loc_410302  +
mov edx [ebp+var_14] +
push edx  +
push esi  +
mov ecx [ebp+var_10] +
push ecx  +
mov eax [ebp+var_8] +
push eax  +
mov edx [ebp+var_C] +
push edx  +
mov ecx [ebp+var_4] +
push ecx  +
call sub_40C8E8  +
add esp 18h +
jmp loc_410302  +
mov eax [ebp+var_14] +
push eax  +
push esi  +
mov edx [ebp+var_10] +
push edx  +
mov ecx [ebp+var_8] +
push ecx  +
mov eax [ebp+var_C] +
push eax  +
mov edx [ebp+var_4] +
push edx  +
call sub_40DB64  +
add esp 18h +
jmp loc_410302  +
mov ecx [ebp+var_14] +
push ecx  +
push esi  +
mov eax [ebp+var_10] +
push eax  +
mov edx [ebp+var_8] +
push edx  +
mov ecx [ebp+var_C] +
push ecx  +
mov eax [ebp+var_4] +
push eax  +
call sub_40F3B0  +
add esp 18h +
mov edx [ebp+arg_0] +
mov ebx [edx+98h] +
test ebx ebx +
jz loc_4105AE  +
mov edi [ebx] +
mov ecx edi +
movsx eax byte ptr [ecx+2Bh] +
imul  dword_4EBDA4 +
cdq   +
idiv  dword_4EBDA0 +
mov esi eax +
test esi esi +
jnz loc_410333  +
mov esi 1 +
movsx eax byte ptr [ecx+39h] +
mov [ebp+var_14] eax +
cmp dword_4D4C30 0 +
jnz loc_41034A  +
mov [ebp+var_14] 1Fh +
movsx eax byte ptr [ecx+41h] +
neg eax  +
shl eax 4 +
imul  dword_4CDD34 +
cdq   +
idiv  dword_4CDD38 +
add eax [ebp+var_18] +
mov [ebp+var_C] eax +
mov eax [edi+4] +
imul  dword_4EBDA4 +
cdq   +
idiv  dword_4EBDA0 +
mov [ebp+var_8] eax +
mov eax [edi+8] +
imul  dword_4EBDA4 +
cdq   +
idiv  dword_4EBDA0 +
mov [ebp+var_10] eax +
cmp dword_4D4B68 1 +
jnz loc_410534  +
xor eax eax +
mov [ebp+var_1C] eax +
mov edx [ebp+arg_0] +
mov eax [edx+94h] +
test eax eax +
jz loc_4103D1  +
mov edx [ebx] +
mov edi [eax] +
mov edx [edx+4] +
cmp edx [edi+20h] +
jnz loc_4103CA  +
mov edx [ebx] +
mov edi [eax] +
mov dl [edx+41h] +
cmp dl [edi+41h] +
jle loc_4103CA  +
mov [ebp+var_1C] 1 +
mov eax [eax+4] +
test eax eax +
jnz loc_4103AB  +
cmp [ebp+var_1C] 0 +
jz loc_41045B  +
mov al [ecx+2Ah] +
sub al 1 +
jb loc_4103F5  +
jz loc_410439  +
dec al  +
jz loc_410417  +
dec al  +
jz loc_4105A3  +
jmp loc_4105A3  +
mov edx [ebp+var_14] +
push edx  +
push esi  +
mov ecx [ebp+var_10] +
push ecx  +
mov eax [ebp+var_8] +
push eax  +
mov edx [ebp+var_C] +
push edx  +
mov ecx [ebp+var_4] +
push ecx  +
call sub_40C8E8  +
add esp 18h +
jmp loc_4105A3  +
mov eax [ebp+var_14] +
push eax  +
push esi  +
mov edx [ebp+var_10] +
push edx  +
mov ecx [ebp+var_8] +
push ecx  +
mov eax [ebp+var_C] +
push eax  +
mov edx [ebp+var_4] +
push edx  +
call sub_40DB64  +
add esp 18h +
jmp loc_4105A3  +
mov ecx [ebp+var_14] +
push ecx  +
push esi  +
mov eax [ebp+var_10] +
push eax  +
mov edx [ebp+var_8] +
push edx  +
mov ecx [ebp+var_C] +
push ecx  +
mov eax [ebp+var_4] +
push eax  +
call sub_40F3B0  +
add esp 18h +
jmp loc_4105A3  +
mov dl [ecx+2Ah] +
sub dl 1 +
jb loc_41047A  +
jz loc_4104F8  +
dec dl  +
jz loc_4104B9  +
dec dl  +
jz loc_4105A3  +
jmp loc_4105A3  +
mov ecx [ebp+var_14] +
push ecx  +
push esi  +
mov eax [ebp+var_C] +
push eax  +
mov edx [ebp+var_8] +
push edx  +
mov ecx [ebp+var_C] +
push ecx  +
mov eax [ebp+var_4] +
push eax  +
call sub_40C8E8  +
add esp 18h +
mov edx [ebp+var_14] +
push edx  +
push esi  +
mov ecx [ebp+var_10] +
push ecx  +
mov eax [ebp+var_8] +
push eax  +
mov edx [ebp+var_C] +
push edx  +
mov ecx [ebp+var_8] +
push ecx  +
call sub_40C8E8  +
add esp 18h +
jmp loc_4105A3  +
mov eax [ebp+var_14] +
push eax  +
push esi  +
mov edx [ebp+var_C] +
push edx  +
mov ecx [ebp+var_8] +
push ecx  +
mov eax [ebp+var_C] +
push eax  +
mov edx [ebp+var_4] +
push edx  +
call sub_40DB64  +
add esp 18h +
mov ecx [ebp+var_14] +
push ecx  +
push esi  +
mov eax [ebp+var_10] +
push eax  +
mov edx [ebp+var_8] +
push edx  +
mov ecx [ebp+var_C] +
push ecx  +
mov eax [ebp+var_8] +
push eax  +
call sub_40DB64  +
add esp 18h +
jmp loc_4105A3  +
mov edx [ebp+var_14] +
push edx  +
push esi  +
mov ecx [ebp+var_C] +
push ecx  +
mov eax [ebp+var_8] +
push eax  +
mov edx [ebp+var_C] +
push edx  +
mov ecx [ebp+var_4] +
push ecx  +
call sub_40F3B0  +
add esp 18h +
mov eax [ebp+var_14] +
push eax  +
push esi  +
mov edx [ebp+var_10] +
push edx  +
mov ecx [ebp+var_8] +
push ecx  +
mov eax [ebp+var_C] +
push eax  +
mov edx [ebp+var_8] +
push edx  +
call sub_40F3B0  +
add esp 18h +
jmp loc_4105A3  +
mov cl [ecx+2Ah] +
sub cl 1 +
jb loc_410548  +
jz loc_410586  +
dec cl  +
jz loc_410567  +
dec cl  +
jz loc_4105A3  +
jmp loc_4105A3  +
mov eax [ebp+var_14] +
push eax  +
push esi  +
mov edx [ebp+var_10] +
push edx  +
mov ecx [ebp+var_8] +
push ecx  +
mov eax [ebp+var_C] +
push eax  +
mov edx [ebp+var_4] +
push edx  +
call sub_40C8E8  +
add esp 18h +
jmp loc_4105A3  +
mov ecx [ebp+var_14] +
push ecx  +
push esi  +
mov eax [ebp+var_10] +
push eax  +
mov edx [ebp+var_8] +
push edx  +
mov ecx [ebp+var_C] +
push ecx  +
mov eax [ebp+var_4] +
push eax  +
call sub_40DB64  +
add esp 18h +
jmp loc_4105A3  +
mov edx [ebp+var_14] +
push edx  +
push esi  +
mov ecx [ebp+var_10] +
push ecx  +
mov eax [ebp+var_8] +
push eax  +
mov edx [ebp+var_C] +
push edx  +
mov ecx [ebp+var_4] +
push ecx  +
call sub_40F3B0  +
add esp 18h +
mov ebx [ebx+4] +
test ebx ebx +
jnz loc_410313  +
mov eax [ebp+arg_0] +
mov ebx [eax+94h] +
test ebx ebx +
jz loc_41085A  +
mov edi [ebx] +
mov ecx edi +
movsx eax byte ptr [ecx+2Bh] +
imul  dword_4EBDA4 +
cdq   +
idiv  dword_4EBDA0 +
mov esi eax +
test esi esi +
jnz loc_4105DF  +
mov esi 1 +
movsx eax byte ptr [ecx+39h] +
mov [ebp+var_14] eax +
cmp dword_4D4C30 0 +
jnz loc_4105F6  +
mov [ebp+var_14] 1Fh +
movsx eax byte ptr [ecx+41h] +
neg eax  +
shl eax 4 +
imul  dword_4CDD34 +
cdq   +
idiv  dword_4CDD38 +
add eax [ebp+var_18] +
mov [ebp+var_C] eax +
mov eax [edi+20h] +
imul  dword_4EBDA4 +
cdq   +
idiv  dword_4EBDA0 +
mov [ebp+var_8] eax +
mov eax [edi+24h] +
imul  dword_4EBDA4 +
cdq   +
idiv  dword_4EBDA0 +
mov [ebp+var_10] eax +
cmp dword_4D4B68 1 +
jnz loc_4107E0  +
xor eax eax +
mov [ebp+var_1C] eax +
mov edx [ebp+arg_0] +
mov eax [edx+98h] +
test eax eax +
jz loc_41067D  +
mov edx [ebx] +
mov edi [eax] +
mov edx [edx+20h] +
cmp edx [edi+4] +
jnz loc_410676  +
mov edx [ebx] +
mov edi [eax] +
mov dl [edx+41h] +
cmp dl [edi+41h] +
jge loc_410676  +
mov [ebp+var_1C] 1 +
mov eax [eax+4] +
test eax eax +
jnz loc_410657  +
cmp [ebp+var_1C] 0 +
jz loc_410707  +
mov al [ecx+2Ah] +
sub al 1 +
jb loc_4106A1  +
jz loc_4106E5  +
dec al  +
jz loc_4106C3  +
dec al  +
jz loc_41084F  +
jmp loc_41084F  +
mov edx [ebp+var_14] +
push edx  +
push esi  +
mov ecx [ebp+var_10] +
push ecx  +
mov eax [ebp+var_8] +
push eax  +
mov edx [ebp+var_C] +
push edx  +
mov ecx [ebp+var_4] +
push ecx  +
call sub_40C8E8  +
add esp 18h +
jmp loc_41084F  +
mov eax [ebp+var_14] +
push eax  +
push esi  +
mov edx [ebp+var_10] +
push edx  +
mov ecx [ebp+var_8] +
push ecx  +
mov eax [ebp+var_C] +
push eax  +
mov edx [ebp+var_4] +
push edx  +
call sub_40DB64  +
add esp 18h +
jmp loc_41084F  +
mov ecx [ebp+var_14] +
push ecx  +
push esi  +
mov eax [ebp+var_10] +
push eax  +
mov edx [ebp+var_8] +
push edx  +
mov ecx [ebp+var_C] +
push ecx  +
mov eax [ebp+var_4] +
push eax  +
call sub_40F3B0  +
add esp 18h +
jmp loc_41084F  +
mov dl [ecx+2Ah] +
sub dl 1 +
jb loc_410726  +
jz loc_4107A4  +
dec dl  +
jz loc_410765  +
dec dl  +
jz loc_41084F  +
jmp loc_41084F  +
mov ecx [ebp+var_14] +
push ecx  +
push esi  +
mov eax [ebp+var_C] +
push eax  +
mov edx [ebp+var_8] +
push edx  +
mov ecx [ebp+var_C] +
push ecx  +
mov eax [ebp+var_4] +
push eax  +
call sub_40C8E8  +
add esp 18h +
mov edx [ebp+var_14] +
push edx  +
push esi  +
mov ecx [ebp+var_10] +
push ecx  +
mov eax [ebp+var_8] +
push eax  +
mov edx [ebp+var_C] +
push edx  +
mov ecx [ebp+var_8] +
push ecx  +
call sub_40C8E8  +
add esp 18h +
jmp loc_41084F  +
mov eax [ebp+var_14] +
push eax  +
push esi  +
mov edx [ebp+var_C] +
push edx  +
mov ecx [ebp+var_8] +
push ecx  +
mov eax [ebp+var_C] +
push eax  +
mov edx [ebp+var_4] +
push edx  +
call sub_40DB64  +
add esp 18h +
mov ecx [ebp+var_14] +
push ecx  +
push esi  +
mov eax [ebp+var_10] +
push eax  +
mov edx [ebp+var_8] +
push edx  +
mov ecx [ebp+var_C] +
push ecx  +
mov eax [ebp+var_8] +
push eax  +
call sub_40DB64  +
add esp 18h +
jmp loc_41084F  +
mov edx [ebp+var_14] +
push edx  +
push esi  +
mov ecx [ebp+var_C] +
push ecx  +
mov eax [ebp+var_8] +
push eax  +
mov edx [ebp+var_C] +
push edx  +
mov ecx [ebp+var_4] +
push ecx  +
call sub_40F3B0  +
add esp 18h +
mov eax [ebp+var_14] +
push eax  +
push esi  +
mov edx [ebp+var_10] +
push edx  +
mov ecx [ebp+var_8] +
push ecx  +
mov eax [ebp+var_C] +
push eax  +
mov edx [ebp+var_8] +
push edx  +
call sub_40F3B0  +
add esp 18h +
jmp loc_41084F  +
mov cl [ecx+2Ah] +
sub cl 1 +
jb loc_4107F4  +
jz loc_410832  +
dec cl  +
jz loc_410813  +
dec cl  +
jz loc_41084F  +
jmp loc_41084F  +
mov eax [ebp+var_14] +
push eax  +
push esi  +
mov edx [ebp+var_10] +
push edx  +
mov ecx [ebp+var_8] +
push ecx  +
mov eax [ebp+var_C] +
push eax  +
mov edx [ebp+var_4] +
push edx  +
call sub_40C8E8  +
add esp 18h +
jmp loc_41084F  +
mov ecx [ebp+var_14] +
push ecx  +
push esi  +
mov eax [ebp+var_10] +
push eax  +
mov edx [ebp+var_8] +
push edx  +
mov ecx [ebp+var_C] +
push ecx  +
mov eax [ebp+var_4] +
push eax  +
call sub_40DB64  +
add esp 18h +
jmp loc_41084F  +
mov edx [ebp+var_14] +
push edx  +
push esi  +
mov ecx [ebp+var_10] +
push ecx  +
mov eax [ebp+var_8] +
push eax  +
mov edx [ebp+var_C] +
push edx  +
mov ecx [ebp+var_4] +
push ecx  +
call sub_40F3B0  +
add esp 18h +
mov ebx [ebx+4] +
test ebx ebx +
jnz loc_4105BF  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
add esp 0FFFFFFC8h +
push ebx  +
push esi  +
push edi  +
push 64h  +
call sub_42A930  +
pop ecx  +
cmp dword_4D4B80 1 +
jge loc_410888  +
mov dword_4D4B80 1 +
cmp dword_4D4B80 64h +
jle loc_41089B  +
mov dword_4D4B80 64h +
mov eax [ebp+arg_8] +
mov ecx dword_4D4B80 +
sub eax [ebp+arg_0] +
imul  ecx +
cdq   +
mov ebx 64h +
mov esi 64h +
idiv  ebx +
mov ebx eax +
mov eax [ebp+arg_C] +
sub eax [ebp+arg_4] +
add ebx [ebp+arg_0] +
imul  ecx +
cdq   +
idiv  esi +
mov esi eax +
mov eax [ebp+arg_10] +
sub eax [ebp+arg_18] +
add esi [ebp+arg_4] +
imul  ecx +
cdq   +
mov edi 64h +
idiv  edi +
mov edi eax +
mov eax [ebp+arg_14] +
sub eax [ebp+arg_1C] +
add edi [ebp+arg_18] +
imul  ecx +
cdq   +
mov ecx 64h +
sub edi ebx +
idiv  ecx +
mov edx ebx +
sub edx [ebp+arg_0] +
add eax [ebp+arg_1C] +
sub eax esi +
lea ecx [edx+edx*2] +
mov [ebp+var_C] ecx +
lea edx [edi+edi*2] +
sub edx [ebp+var_C] +
lea eax [eax+eax*2] +
mov [ebp+var_8] edx +
mov edx esi +
mov ecx [ebp+arg_18] +
sub ecx [ebp+arg_0] +
sub ecx [ebp+var_8] +
sub ecx [ebp+var_C] +
mov [ebp+var_4] ecx +
sub edx [ebp+arg_4] +
lea ecx [edx+edx*2] +
mov [ebp+var_18] ecx +
sub eax [ebp+var_18] +
mov [ebp+var_14] eax +
mov eax [ebp+arg_1C] +
sub eax [ebp+arg_4] +
sub eax [ebp+var_14] +
sub eax [ebp+var_18] +
mov [ebp+var_10] eax +
mov eax dword_4EBDA4 +
add eax eax +
lea eax [eax+eax*4] +
lea eax [eax+eax*4] +
cdq   +
idiv  dword_4EBDA0 +
mov esi eax +
cmp esi 2 +
jge loc_41095D  +
mov esi 2 +
mov eax [ebp+arg_0] +
mov [ebp+var_24] eax +
mov edx [ebp+arg_4] +
mov [ebp+var_28] edx +
mov ecx [ebp+arg_0] +
mov [ebp+var_2C] ecx +
mov eax [ebp+arg_4] +
mov [ebp+var_30] eax +
mov edx [ebp+arg_28] +
dec edx  +
jz loc_410985  +
dec edx  +
jnz loc_4109C5  +
mov [ebp+var_38] 1 +
mov ecx [ebp+arg_24] +
push ecx  +
mov eax [ebp+arg_20] +
push eax  +
mov edx [ebp+arg_4] +
push edx  +
mov ecx [ebp+arg_0] +
push ecx  +
mov eax [ebp+arg_4] +
push eax  +
mov edx [ebp+arg_0] +
push edx  +
call sub_40C8E8  +
add esp 18h +
mov ecx [ebp+arg_24] +
push ecx  +
mov eax [ebp+arg_20] +
push eax  +
mov edx [ebp+arg_1C] +
push edx  +
mov ecx [ebp+arg_18] +
push ecx  +
mov eax [ebp+arg_1C] +
push eax  +
mov edx [ebp+arg_18] +
push edx  +
call sub_40C8E8  +
add esp 18h +
mov ebx 1 +
cmp esi ebx +
jl loc_410BA8  +
mov eax [ebp+var_4] +
imul  ebx +
imul  ebx +
imul  ebx +
cdq   +
idiv  esi +
cdq   +
idiv  esi +
cdq   +
idiv  esi +
mov ecx eax +
mov eax [ebp+var_8] +
imul  ebx +
imul  ebx +
cdq   +
idiv  esi +
cdq   +
idiv  esi +
add ecx eax +
mov eax [ebp+var_C] +
imul  ebx +
cdq   +
idiv  esi +
add ecx eax +
add ecx [ebp+arg_0] +
mov [ebp+var_1C] ecx +
mov eax [ebp+var_10] +
imul  ebx +
imul  ebx +
imul  ebx +
cdq   +
idiv  esi +
cdq   +
idiv  esi +
cdq   +
idiv  esi +
mov ecx eax +
mov eax [ebp+var_14] +
imul  ebx +
imul  ebx +
cdq   +
idiv  esi +
cdq   +
idiv  esi +
add ecx eax +
mov eax [ebp+var_18] +
imul  ebx +
cdq   +
idiv  esi +
add ecx eax +
add ecx [ebp+arg_4] +
mov [ebp+var_20] ecx +
mov ecx [ebp+var_1C] +
mov edi [ebp+var_20] +
sub edi [ebp+var_28] +
sub ecx [ebp+var_24] +
cmp esi ebx +
jnz loc_410A56  +
mov eax [ebp+arg_18] +
mov [ebp+var_1C] eax +
mov edx [ebp+arg_1C] +
mov [ebp+var_20] edx +
jmp loc_410A85  +
cmp [ebp+arg_28] 0 +
jnz loc_410A6D  +
test ecx ecx +
jnz loc_410A6D  +
mov eax edi +
imul  edi +
cmp eax 4 +
jle loc_410B9F  +
cmp [ebp+arg_28] 0 +
jnz loc_410A85  +
test edi edi +
jnz loc_410A85  +
mov edx ecx +
imul edx ecx +
cmp edx 4 +
jle loc_410B9F  +
mov eax [ebp+arg_28] +
sub eax 1 +
jb loc_410AA2  +
jz loc_410B3E  +
dec eax  +
jz loc_410AC7  +
dec eax  +
jz loc_410B93  +
jmp loc_410B93  +
mov edx [ebp+arg_24] +
push edx  +
mov ecx [ebp+arg_20] +
push ecx  +
mov eax [ebp+var_20] +
push eax  +
mov edx [ebp+var_1C] +
push edx  +
mov ecx [ebp+var_28] +
push ecx  +
mov eax [ebp+var_24] +
push eax  +
call sub_40C8E8  +
add esp 18h +
jmp loc_410B93  +
mov eax dword_4EBDA4 +
mov ecx [ebp+var_1C] +
mov edx eax +
mov edi [ebp+var_20] +
shl eax 4 +
sub edi [ebp+var_30] +
sub eax edx +
cdq   +
idiv  dword_4EBDA0 +
sub ecx [ebp+var_2C] +
mov [ebp+var_34] eax +
mov eax ecx +
imul  ecx +
mov ecx edi +
mov edx [ebp+var_34] +
imul ecx edi +
imul edx [ebp+var_34] +
add eax ecx +
cmp eax edx +
jle loc_410B16  +
mov eax 1 +
sub eax [ebp+var_38] +
mov [ebp+var_38] eax +
mov ecx [ebp+var_24] +
mov [ebp+var_2C] ecx +
mov eax [ebp+var_28] +
mov [ebp+var_30] eax +
cmp [ebp+var_38] 0 +
jz loc_410B93  +
mov edx [ebp+arg_24] +
push edx  +
mov ecx [ebp+arg_20] +
push ecx  +
mov eax [ebp+var_20] +
push eax  +
mov edx [ebp+var_1C] +
push edx  +
mov ecx [ebp+var_28] +
push ecx  +
mov eax [ebp+var_24] +
push eax  +
call sub_40C8E8  +
add esp 18h +
jmp loc_410B93  +
mov eax dword_4EBDA4 +
push ecx  +
mov ecx 0Ch +
lea eax [eax+eax*4] +
lea eax [eax+eax*8] +
cdq   +
idiv  ecx +
cdq   +
idiv  dword_4EBDA0 +
pop ecx  +
mov [ebp+var_34] eax +
mov eax ecx +
imul  ecx +
mov ecx edi +
mov edx [ebp+var_34] +
imul ecx edi +
imul edx [ebp+var_34] +
add eax ecx +
cmp eax edx +
jl loc_410B9F  +
mov eax [ebp+arg_24] +
push eax  +
mov ecx [ebp+arg_20] +
push ecx  +
mov eax [ebp+var_20] +
push eax  +
mov edx [ebp+var_1C] +
push edx  +
mov ecx [ebp+var_20] +
push ecx  +
mov eax [ebp+var_1C] +
push eax  +
call sub_40C8E8  +
add esp 18h +
mov edx [ebp+var_1C] +
mov [ebp+var_24] edx +
mov ecx [ebp+var_20] +
mov [ebp+var_28] ecx +
inc ebx  +
cmp esi ebx +
jge loc_4109D2  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
add esp 0FFFFFFE0h +
add esp 0FFFFFFF0h +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_4] +
mov esi [ebp+arg_0] +
cmp esi dword_4EB624 +
jl loc_4110C4  +
cmp esi dword_4EB628 +
jge loc_4110C4  +
cmp edi dword_4EB62C +
jl loc_4110C4  +
cmp edi dword_4EB630 +
jge loc_4110C4  +
cmp [ebp+arg_10] 2 +
jnz loc_41108F  +
mov eax [ebp+arg_8] +
mov ecx 0Ah +
mov edx eax +
shl eax 3 +
sub eax edx +
cdq   +
idiv  ecx +
mov ebx eax +
mov eax dword_4EAD38 +
mov [ebp+var_4] eax +
mov edx dword_4EAD40 +
mov [ebp+var_8] edx +
mov ecx dword_4EAD3C +
mov [ebp+var_C] ecx +
mov eax dword_4EAD44 +
mov [ebp+var_10] eax +
dec ebx  +
mov edx [ebp+arg_C] +
push edx  +
mov edx esi +
mov ecx [ebp+arg_14] +
lea eax [ebx+edi] +
push ecx  +
push edi  +
push esi  +
push eax  +
sub edx ebx +
push edx  +
call sub_40C8E8  +
add esp 18h +
mov ecx [ebp+arg_C] +
lea edx [ebx+edi] +
push ecx  +
mov eax [ebp+arg_14] +
lea ecx [ebx+esi] +
push eax  +
push edi  +
push esi  +
push edx  +
push ecx  +
call sub_40C8E8  +
add esp 18h +
mov eax [ebp+arg_C] +
add ebx edi +
push eax  +
mov edx [ebp+arg_14] +
push edx  +
push edi  +
push esi  +
push ebx  +
push esi  +
call sub_40C8E8  +
add esp 18h +
mov eax [ebp+var_4] +
mov dword_4EAD38 eax +
mov edx [ebp+var_8] +
mov dword_4EAD40 edx +
mov ecx [ebp+var_C] +
mov dword_4EAD3C ecx +
mov eax [ebp+var_10] +
mov dword_4EAD44 eax +
jmp loc_4110C4  +
xor ebx ebx +
jmp loc_4110AE  +
mov edx [ebp+arg_C] +
push edx  +
lea eax [ebx+edi] +
push eax  +
lea ecx [ebx+esi] +
push ecx  +
push eax  +
mov eax esi +
sub eax ebx +
push eax  +
call sub_42A938  +
add esp 14h +
inc ebx  +
mov eax [ebp+arg_8] +
mov edx eax +
shl eax 3 +
sub eax edx +
mov ecx 0Ah +
cdq   +
idiv  ecx +
cmp ebx eax +
jl loc_411093  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
add esp 0FFFFFFF0h +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_4] +
mov esi [ebp+arg_0] +
cmp esi dword_4EB624 +
jl loc_4111D7  +
cmp esi dword_4EB628 +
jge loc_4111D7  +
cmp edi dword_4EB62C +
jl loc_4111D7  +
cmp edi dword_4EB630 +
jge loc_4111D7  +
cmp [ebp+arg_10] 2 +
jnz loc_4111AF  +
mov ebx [ebp+arg_8] +
mov eax dword_4EAD38 +
mov [ebp+var_4] eax +
mov edx dword_4EAD40 +
mov [ebp+var_8] edx +
mov ecx dword_4EAD3C +
mov [ebp+var_C] ecx +
mov eax dword_4EAD44 +
mov [ebp+var_10] eax +
mov eax esi +
mov edx [ebp+arg_C] +
dec ebx  +
push edx  +
sub eax ebx +
mov ecx [ebp+arg_14] +
push ecx  +
push edi  +
push esi  +
push edi  +
push eax  +
call sub_40C8E8  +
add esp 18h +
mov edx [ebp+arg_C] +
add ebx edi +
push edx  +
mov ecx [ebp+arg_14] +
push ecx  +
push edi  +
push esi  +
push ebx  +
push esi  +
call sub_40C8E8  +
add esp 18h +
mov edx [ebp+arg_C] +
push edx  +
mov ecx [ebp+arg_14] +
push ecx  +
push edi  +
push esi  +
mov eax [ebp+arg_8] +
sar eax 1 +
jns loc_41117D  +
adc eax 0 +
add edi eax +
push edi  +
sub esi eax +
push esi  +
call sub_40C8E8  +
add esp 18h +
mov eax [ebp+var_4] +
mov dword_4EAD38 eax +
mov edx [ebp+var_8] +
mov dword_4EAD40 edx +
mov ecx [ebp+var_C] +
mov dword_4EAD3C ecx +
mov eax [ebp+var_10] +
mov dword_4EAD44 eax +
jmp loc_4111D7  +
xor ebx ebx +
cmp ebx [ebp+arg_8] +
jge loc_4111D7  +
mov edx [ebp+arg_C] +
push edx  +
lea eax [ebx+edi] +
push eax  +
push esi  +
push eax  +
mov ecx esi +
sub ecx [ebp+arg_8] +
add ecx ebx +
inc ecx  +
push ecx  +
call sub_42A938  +
add esp 14h +
inc ebx  +
cmp ebx [ebp+arg_8] +
jl loc_4111B6  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
add esp 0FFFFFFF0h +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_4] +
mov esi [ebp+arg_0] +
cmp esi dword_4EB624 +
jl loc_4112EA  +
cmp esi dword_4EB628 +
jge loc_4112EA  +
cmp edi dword_4EB62C +
jl loc_4112EA  +
cmp edi dword_4EB630 +
jge loc_4112EA  +
cmp [ebp+arg_10] 2 +
jnz loc_4112C2  +
mov ebx [ebp+arg_8] +
mov eax dword_4EAD38 +
mov [ebp+var_4] eax +
mov edx dword_4EAD40 +
mov [ebp+var_8] edx +
mov ecx dword_4EAD3C +
mov [ebp+var_C] ecx +
mov eax dword_4EAD44 +
mov [ebp+var_10] eax +
dec ebx  +
mov edx [ebp+arg_C] +
push edx  +
lea eax [ebx+esi] +
mov ecx [ebp+arg_14] +
push ecx  +
push edi  +
push esi  +
push edi  +
push eax  +
call sub_40C8E8  +
add esp 18h +
mov edx [ebp+arg_C] +
add ebx edi +
push edx  +
mov ecx [ebp+arg_14] +
push ecx  +
push edi  +
push esi  +
push ebx  +
push esi  +
call sub_40C8E8  +
add esp 18h +
mov edx [ebp+arg_C] +
push edx  +
mov ecx [ebp+arg_14] +
push ecx  +
push edi  +
push esi  +
mov eax [ebp+arg_8] +
sar eax 1 +
jns loc_411290  +
adc eax 0 +
add edi eax +
push edi  +
add esi eax +
push esi  +
call sub_40C8E8  +
add esp 18h +
mov eax [ebp+var_4] +
mov dword_4EAD38 eax +
mov edx [ebp+var_8] +
mov dword_4EAD40 edx +
mov ecx [ebp+var_C] +
mov dword_4EAD3C ecx +
mov eax [ebp+var_10] +
mov dword_4EAD44 eax +
jmp loc_4112EA  +
xor ebx ebx +
cmp ebx [ebp+arg_8] +
jge loc_4112EA  +
mov edx [ebp+arg_C] +
lea eax [ebx+edi] +
push edx  +
push eax  +
mov ecx [ebp+arg_8] +
add ecx esi +
dec ecx  +
sub ecx ebx +
push ecx  +
push eax  +
push esi  +
call sub_42A938  +
add esp 14h +
inc ebx  +
cmp ebx [ebp+arg_8] +
jl loc_4112C9  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
add esp 0FFFFFFF0h +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_4] +
mov esi [ebp+arg_0] +
cmp esi dword_4EB624 +
jl loc_41141C  +
cmp esi dword_4EB628 +
jge loc_41141C  +
cmp edi dword_4EB62C +
jl loc_41141C  +
cmp edi dword_4EB630 +
jge loc_41141C  +
cmp [ebp+arg_10] 2 +
jnz loc_4113E6  +
mov eax [ebp+arg_8] +
mov ecx 0Ah +
mov edx eax +
shl eax 3 +
sub eax edx +
cdq   +
idiv  ecx +
mov ebx eax +
mov eax dword_4EAD38 +
mov [ebp+var_4] eax +
mov edx dword_4EAD40 +
mov [ebp+var_8] edx +
mov ecx dword_4EAD3C +
mov [ebp+var_C] ecx +
mov eax dword_4EAD44 +
mov [ebp+var_10] eax +
dec ebx  +
mov edx [ebp+arg_C] +
mov eax edi +
push edx  +
sub eax ebx +
mov ecx [ebp+arg_14] +
mov edx esi +
push ecx  +
push edi  +
push esi  +
push eax  +
sub edx ebx +
push edx  +
call sub_40C8E8  +
add esp 18h +
mov ecx [ebp+arg_C] +
mov edx edi +
sub edx ebx +
push ecx  +
mov eax [ebp+arg_14] +
lea ecx [ebx+esi] +
push eax  +
push edi  +
push esi  +
push edx  +
push ecx  +
call sub_40C8E8  +
add esp 18h +
mov eax [ebp+arg_C] +
push eax  +
mov edx [ebp+arg_14] +
push edx  +
push edi  +
push esi  +
sub edi ebx +
push edi  +
push esi  +
call sub_40C8E8  +
add esp 18h +
mov ecx [ebp+var_4] +
mov dword_4EAD38 ecx +
mov eax [ebp+var_8] +
mov dword_4EAD40 eax +
mov edx [ebp+var_C] +
mov dword_4EAD3C edx +
mov ecx [ebp+var_10] +
mov dword_4EAD44 ecx +
jmp loc_41141C  +
xor ebx ebx +
jmp loc_411406  +
mov edx [ebp+arg_C] +
mov eax edi +
sub eax ebx +
push edx  +
push eax  +
lea ecx [ebx+esi] +
push ecx  +
push eax  +
mov eax esi +
sub eax ebx +
push eax  +
call sub_42A938  +
add esp 14h +
inc ebx  +
mov eax [ebp+arg_8] +
mov edx eax +
shl eax 3 +
sub eax edx +
mov ecx 0Ah +
cdq   +
idiv  ecx +
cmp ebx eax +
jl loc_4113EA  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
add esp 0FFFFFFF0h +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_4] +
mov esi [ebp+arg_0] +
cmp esi dword_4EB624 +
jl loc_411533  +
cmp esi dword_4EB628 +
jge loc_411533  +
cmp edi dword_4EB62C +
jl loc_411533  +
cmp edi dword_4EB630 +
jge loc_411533  +
cmp [ebp+arg_10] 2 +
jnz loc_41150A  +
mov ebx [ebp+arg_8] +
mov eax dword_4EAD38 +
mov [ebp+var_4] eax +
mov edx dword_4EAD40 +
mov [ebp+var_8] edx +
mov ecx dword_4EAD3C +
mov [ebp+var_C] ecx +
mov eax dword_4EAD44 +
mov [ebp+var_10] eax +
mov eax esi +
mov edx [ebp+arg_C] +
dec ebx  +
push edx  +
sub eax ebx +
mov ecx [ebp+arg_14] +
push ecx  +
push edi  +
push esi  +
push edi  +
push eax  +
call sub_40C8E8  +
add esp 18h +
mov edx [ebp+arg_C] +
mov eax edi +
sub eax ebx +
push edx  +
mov ecx [ebp+arg_14] +
push ecx  +
push edi  +
push esi  +
push eax  +
push esi  +
call sub_40C8E8  +
add esp 18h +
mov edx [ebp+arg_C] +
push edx  +
mov ecx [ebp+arg_14] +
push ecx  +
push edi  +
push esi  +
mov eax [ebp+arg_8] +
sar eax 1 +
jns loc_4114D7  +
adc eax 0 +
sub edi eax +
push edi  +
sub esi eax +
push esi  +
call sub_40C8E8  +
add esp 18h +
mov edx [ebp+var_4] +
mov dword_4EAD38 edx +
mov ecx [ebp+var_8] +
mov dword_4EAD40 ecx +
mov eax [ebp+var_C] +
mov dword_4EAD3C eax +
mov edx [ebp+var_10] +
mov dword_4EAD44 edx +
jmp loc_411533  +
xor ebx ebx +
cmp ebx [ebp+arg_8] +
jge loc_411533  +
mov edx [ebp+arg_C] +
mov eax edi +
sub eax ebx +
push edx  +
push eax  +
push esi  +
push eax  +
mov ecx esi +
sub ecx [ebp+arg_8] +
add ecx ebx +
inc ecx  +
push ecx  +
call sub_42A938  +
add esp 14h +
inc ebx  +
cmp ebx [ebp+arg_8] +
jl loc_411511  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
add esp 0FFFFFFF0h +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_4] +
mov esi [ebp+arg_0] +
cmp esi dword_4EB624 +
jl loc_41164A  +
cmp esi dword_4EB628 +
jge loc_41164A  +
cmp edi dword_4EB62C +
jl loc_41164A  +
cmp edi dword_4EB630 +
jge loc_41164A  +
cmp [ebp+arg_10] 2 +
jnz loc_411621  +
mov ebx [ebp+arg_8] +
mov eax dword_4EAD38 +
mov [ebp+var_4] eax +
mov edx dword_4EAD40 +
mov [ebp+var_8] edx +
mov ecx dword_4EAD3C +
mov [ebp+var_C] ecx +
mov eax dword_4EAD44 +
mov [ebp+var_10] eax +
dec ebx  +
mov edx [ebp+arg_C] +
push edx  +
lea eax [ebx+esi] +
mov ecx [ebp+arg_14] +
push ecx  +
push edi  +
push esi  +
push edi  +
push eax  +
call sub_40C8E8  +
add esp 18h +
mov edx [ebp+arg_C] +
mov eax edi +
sub eax ebx +
push edx  +
mov ecx [ebp+arg_14] +
push ecx  +
push edi  +
push esi  +
push eax  +
push esi  +
call sub_40C8E8  +
add esp 18h +
mov edx [ebp+arg_C] +
push edx  +
mov ecx [ebp+arg_14] +
push ecx  +
push edi  +
push esi  +
mov eax [ebp+arg_8] +
sar eax 1 +
jns loc_4115EE  +
adc eax 0 +
sub edi eax +
push edi  +
add esi eax +
push esi  +
call sub_40C8E8  +
add esp 18h +
mov edx [ebp+var_4] +
mov dword_4EAD38 edx +
mov ecx [ebp+var_8] +
mov dword_4EAD40 ecx +
mov eax [ebp+var_C] +
mov dword_4EAD3C eax +
mov edx [ebp+var_10] +
mov dword_4EAD44 edx +
jmp loc_41164A  +
xor ebx ebx +
cmp ebx [ebp+arg_8] +
jge loc_41164A  +
mov edx [ebp+arg_C] +
mov eax edi +
sub eax ebx +
push edx  +
push eax  +
mov ecx [ebp+arg_8] +
add ecx esi +
dec ecx  +
sub ecx ebx +
push ecx  +
push eax  +
push esi  +
call sub_42A938  +
add esp 14h +
inc ebx  +
cmp ebx [ebp+arg_8] +
jl loc_411628  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
add esp 0FFFFFFF0h +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_4] +
mov esi [ebp+arg_0] +
cmp esi dword_4EB624 +
jl loc_41177C  +
cmp esi dword_4EB628 +
jge loc_41177C  +
cmp edi dword_4EB62C +
jl loc_41177C  +
cmp edi dword_4EB630 +
jge loc_41177C  +
cmp [ebp+arg_10] 2 +
jnz loc_411746  +
mov eax [ebp+arg_8] +
mov ecx 0Ah +
mov edx eax +
shl eax 3 +
sub eax edx +
cdq   +
idiv  ecx +
mov ebx eax +
mov eax dword_4EAD38 +
mov [ebp+var_4] eax +
mov edx dword_4EAD40 +
mov [ebp+var_8] edx +
mov ecx dword_4EAD3C +
mov [ebp+var_C] ecx +
mov eax dword_4EAD44 +
mov [ebp+var_10] eax +
dec ebx  +
mov edx [ebp+arg_C] +
mov eax edi +
push edx  +
sub eax ebx +
mov ecx [ebp+arg_14] +
mov edx esi +
push ecx  +
push edi  +
push esi  +
push eax  +
sub edx ebx +
push edx  +
call sub_40C8E8  +
add esp 18h +
mov ecx [ebp+arg_C] +
lea edx [ebx+edi] +
push ecx  +
mov eax [ebp+arg_14] +
mov ecx esi +
push eax  +
push edi  +
push esi  +
push edx  +
sub ecx ebx +
push ecx  +
call sub_40C8E8  +
add esp 18h +
mov eax [ebp+arg_C] +
push eax  +
mov edx [ebp+arg_14] +
push edx  +
push edi  +
push esi  +
push edi  +
sub esi ebx +
push esi  +
call sub_40C8E8  +
add esp 18h +
mov ecx [ebp+var_4] +
mov dword_4EAD38 ecx +
mov eax [ebp+var_8] +
mov dword_4EAD40 eax +
mov edx [ebp+var_C] +
mov dword_4EAD3C edx +
mov ecx [ebp+var_10] +
mov dword_4EAD44 ecx +
jmp loc_41177C  +
xor ebx ebx +
jmp loc_411766  +
mov edx [ebp+arg_C] +
lea ecx [ebx+edi] +
push edx  +
mov eax esi +
sub eax ebx +
mov edx edi +
push ecx  +
push eax  +
sub edx ebx +
push edx  +
push eax  +
call sub_42A938  +
add esp 14h +
inc ebx  +
mov eax [ebp+arg_8] +
mov ecx eax +
shl eax 3 +
sub eax ecx +
mov ecx 0Ah +
cdq   +
idiv  ecx +
cmp ebx eax +
jl loc_41174A  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
add esp 0FFFFFFF0h +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_4] +
mov esi [ebp+arg_0] +
cmp esi dword_4EB624 +
jl loc_4118A8  +
cmp esi dword_4EB628 +
jge loc_4118A8  +
cmp edi dword_4EB62C +
jl loc_4118A8  +
cmp edi dword_4EB630 +
jge loc_4118A8  +
cmp [ebp+arg_10] 2 +
jnz loc_411873  +
mov eax [ebp+arg_8] +
mov ecx 0Ah +
mov edx eax +
shl eax 3 +
sub eax edx +
cdq   +
idiv  ecx +
mov ebx eax +
mov eax dword_4EAD38 +
mov [ebp+var_4] eax +
mov edx dword_4EAD40 +
mov [ebp+var_8] edx +
mov ecx dword_4EAD3C +
mov [ebp+var_C] ecx +
mov eax dword_4EAD44 +
mov [ebp+var_10] eax +
dec ebx  +
mov edx [ebp+arg_C] +
mov eax edi +
push edx  +
sub eax ebx +
mov ecx [ebp+arg_14] +
lea edx [ebx+esi] +
push ecx  +
push edi  +
push esi  +
push eax  +
push edx  +
call sub_40C8E8  +
add esp 18h +
mov ecx [ebp+arg_C] +
lea edx [ebx+edi] +
push ecx  +
mov eax [ebp+arg_14] +
lea ecx [ebx+esi] +
push eax  +
push edi  +
push esi  +
push edx  +
push ecx  +
call sub_40C8E8  +
add esp 18h +
mov eax [ebp+arg_C] +
add ebx esi +
push eax  +
mov edx [ebp+arg_14] +
push edx  +
push edi  +
push esi  +
push edi  +
push ebx  +
call sub_40C8E8  +
add esp 18h +
mov eax [ebp+var_4] +
mov dword_4EAD38 eax +
mov edx [ebp+var_8] +
mov dword_4EAD40 edx +
mov ecx [ebp+var_C] +
mov dword_4EAD3C ecx +
mov eax [ebp+var_10] +
mov dword_4EAD44 eax +
jmp loc_4118A8  +
xor ebx ebx +
jmp loc_411892  +
mov edx [ebp+arg_C] +
lea ecx [ebx+edi] +
push edx  +
lea eax [ebx+esi] +
mov edx edi +
push ecx  +
push eax  +
sub edx ebx +
push edx  +
push eax  +
call sub_42A938  +
add esp 14h +
inc ebx  +
mov eax [ebp+arg_8] +
mov ecx eax +
shl eax 3 +
sub eax ecx +
mov ecx 0Ah +
cdq   +
idiv  ecx +
cmp ebx eax +
jl loc_411877  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
push ebx  +
add esp 0FFFFFFCCh +
add esp 0FFFFFF94h +
mov ecx dword_4EBDA4 +
push ebx  +
push esi  +
push edi  +
mov ebx dword_4EBDA0 +
mov eax [ebp+arg_0] +
mov edi offset unk_4EAD8C +
mov eax [eax+4] +
imul  ecx +
cdq   +
idiv  ebx +
mov [ebp+var_14] eax +
mov eax [ebp+arg_0] +
mov eax [eax+20h] +
imul  ecx +
cdq   +
idiv  ebx +
mov [ebp+var_18] eax +
mov eax [ebp+arg_0] +
mov edx [eax] +
mov [ebp+var_8] edx +
mov eax [ebp+var_8] +
mov edx [eax+30h] +
imul edx ebx +
push edx  +
mov eax [ebp+var_8] +
mov edx [eax+34h] +
imul edx ecx +
push edx  +
call __initmatherr_0  +
add esp 8 +
mov ecx [ebp+var_8] +
mov eax [ecx+58h] +
imul  dword_4EBDA4 +
cdq   +
idiv  dword_4EBDA0 +
push eax  +
mov ecx [ebp+var_8] +
mov eax [ecx+54h] +
imul  dword_4EBDA4 +
cdq   +
idiv  dword_4EBDA0 +
push eax  +
call __initmatherr  +
add esp 8 +
mov ecx [ebp+var_8] +
mov eax [ecx+1Ch] +
imul  dword_4EBDA4 +
cdq   +
idiv  dword_4EBDA0 +
mov [ebp+var_C] eax +
mov ecx [ebp+var_8] +
mov eax [ecx+18h] +
imul  dword_4EBDA4 +
cdq   +
idiv  dword_4EBDA0 +
mov [ebp+var_10] eax +
mov ecx [ebp+var_8] +
mov eax [ecx+8] +
push eax  +
call sub_41BF54  +
mov eax dword_4CDD34 +
pop ecx  +
add eax eax +
mov ecx [ebp+var_C] +
sub ecx dword_4EADA4 +
lea eax [eax+eax*4] +
cdq   +
idiv  dword_4CDD38 +
sar ecx 1 +
jns loc_41470C  +
adc ecx 0 +
add ecx dword_4EADAC +
sub ecx eax +
xor eax eax +
mov [ebp+var_1C] ecx +
mov [edi] eax +
mov edx [ebp+arg_0] +
mov ecx [edx+1Ch] +
mov eax [ecx+0B4h] +
cmp dword ptr [eax+8] 0 +
jz loc_4149FE  +
mov edx [ebp+arg_0] +
mov ecx [edx+1Ch] +
mov eax [ecx+0B4h] +
mov ebx [eax+0Ch] +
movsx eax byte ptr [ebx+2Bh] +
imul  dword_4EBDA4 +
cdq   +
idiv  dword_4EBDA0 +
mov [ebp+var_28] eax +
cmp [ebp+var_28] 0 +
jnz loc_414761  +
mov [ebp+var_28] 1 +
movsx ecx byte ptr [ebx+39h] +
mov [ebp+var_2C] ecx +
cmp dword_4D4C30 0 +
jnz loc_414778  +
mov [ebp+var_2C] 1Fh +
mov eax [ebp+arg_0] +
movsx edx byte ptr [eax+2Ah] +
mov [ebp+var_30] edx +
movsx eax byte ptr [ebx+41h] +
neg eax  +
shl eax 4 +
imul  dword_4CDD34 +
cdq   +
idiv  dword_4CDD38 +
add eax [ebp+var_1C] +
mov [ebp+var_20] eax +
mov esi eax +
mov eax [ebp+var_8] +
mov dl [eax+2Fh] +
dec dl  +
jz loc_4147BB  +
dec dl  +
jz loc_414890  +
dec dl  +
jz loc_414827  +
jmp loc_414932  +
mov ecx [ebp+var_C] +
sar ecx 1 +
jns loc_4147C5  +
adc ecx 0 +
mov eax esi +
sub eax dword_4EADAC +
cmp ecx eax +
jle loc_4147EC  +
mov eax [ebp+var_C] +
sar eax 1 +
jns loc_4147DB  +
adc eax 0 +
sub eax esi +
add eax dword_4EADAC +
imul  [ebp+var_10] +
cdq   +
idiv  [ebp+var_C] +
jmp loc_414807  +
mov eax esi +
sub eax dword_4EADAC +
mov edx [ebp+var_C] +
sar edx 1 +
jns loc_4147FE  +
adc edx 0 +
sub eax edx +
imul  [ebp+var_10] +
cdq   +
idiv  [ebp+var_C] +
mov ecx [ebp+var_14] +
cmp ecx [ebp+var_18] +
jge loc_41481C  +
mov edx [ebp+var_14] +
sub edx eax +
mov [ebp+var_24] edx +
jmp loc_414938  +
add eax [ebp+var_14] +
mov [ebp+var_24] eax +
jmp loc_414938  +
mov eax [ebp+var_C] +
test eax eax +
jns loc_414831  +
add eax 3 +
sar eax 2 +
add esi eax +
mov [ebp+var_20] esi +
mov eax [ebp+var_C] +
sub eax esi +
add eax dword_4EADAC +
imul  [ebp+var_10] +
sar eax 1 +
jns loc_41484E  +
adc eax 0 +
cdq   +
idiv  [ebp+var_C] +
mov ecx [ebp+var_14] +
cmp ecx [ebp+var_18] +
jge loc_414876  +
mov edx [ebp+var_14] +
sub edx eax +
mov eax [ebp+var_10] +
test eax eax +
jns loc_414869  +
add eax 3 +
sar eax 2 +
add edx eax +
mov [ebp+var_24] edx +
jmp loc_414938  +
add eax [ebp+var_14] +
mov ecx [ebp+var_10] +
test ecx ecx +
jns loc_414883  +
add ecx 3 +
sar ecx 2 +
sub eax ecx +
mov [ebp+var_24] eax +
jmp loc_414938  +
mov eax [ebp+var_10] +
imul  [ebp+var_10] +
mov [ebp+var_34] eax +
fild  [ebp+var_34] +
mov edx [ebp+var_C] +
imul edx [ebp+var_C] +
mov [ebp+var_38] edx +
fild  [ebp+var_38] +
fdivp st(1) st +
fild  [ebp+var_C] +
fmul  ds:flt_414FBC +
mov [ebp+var_3C] esi +
fild  [ebp+var_3C] +
fsubp st(1) st +
fild  dword_4EADAC +
faddp st(1) st +
fmulp st(1) st +
fild  [ebp+var_C] +
fmul  ds:flt_414FBC +
mov [ebp+var_40] esi +
fild  [ebp+var_40] +
fsubp st(1) st +
fild  dword_4EADAC +
faddp st(1) st +
fmulp st(1) st +
mov ecx [ebp+var_10] +
imul ecx [ebp+var_10] +
mov [ebp+var_44] ecx +
fild  [ebp+var_44] +
fmul  ds:flt_414FC0 +
fsubrp st(1) st +
add esp 0FFFFFFF8h +
fstp  [esp+80h+var_80] +
call _sqrt  +
add esp 8 +
call @_ftol$qv  +
push eax  +
mov eax [ebp+var_10] +
inc eax  +
sar eax 1 +
jns loc_414915  +
adc eax 0 +
pop edx  +
sub eax edx +
mov ecx [ebp+var_14] +
cmp ecx [ebp+var_18] +
jge loc_41492A  +
mov edx [ebp+var_14] +
sub edx eax +
mov [ebp+var_24] edx +
jmp loc_414938  +
add eax [ebp+var_14] +
mov [ebp+var_24] eax +
jmp loc_414938  +
mov eax [ebp+var_14] +
mov [ebp+var_24] eax +
mov ecx [ebp+var_24] +
push 1  +
mov dword_4EAD38 ecx +
mov dword_4EAD40 esi +
push ebx  +
call sub_40B870  +
mov eax dword_4EAD38 +
mov esi dword_4EAD40 +
mov [ebp+var_24] eax +
add esp 8 +
mov eax [edi] +
mov edx [ebp+var_24] +
mov dword_4EAD54[eax*4] edx +
mov ecx [edi] +
mov dword_4EAD70[ecx*4] esi +
inc dword ptr [edi]  +
mov eax [edi] +
mov edx [ebp+var_18] +
mov dword_4EAD54[eax*4] edx +
mov ecx [edi] +
mov eax [ebp+var_20] +
mov dword_4EAD70[ecx*4] eax +
inc dword ptr [edi]  +
mov eax [ebx+4] +
mov ecx [edi] +
imul  dword_4EBDA4 +
cdq   +
idiv  dword_4EBDA0 +
mov dword_4EAD54[ecx*4] eax +
mov eax [ebx+8] +
mov ecx [edi] +
imul  dword_4EBDA4 +
cdq   +
idiv  dword_4EBDA0 +
mov dword_4EAD70[ecx*4] eax +
inc dword ptr [edi]  +
mov eax [ebp+var_30] +
push eax  +
mov eax dword_4EAD74 +
mov edx [ebp+var_28] +
push edx  +
mov edx dword_4EAD58 +
mov ecx [ebp+var_2C] +
push ecx  +
push eax  +
push edx  +
mov ecx dword_4EAD70 +
push ecx  +
mov eax dword_4EAD54 +
push eax  +
call sub_415074  +
add esp 1Ch +
push 0  +
push ebx  +
call sub_413FF8  +
add esp 8 +
mov edx [ebp+arg_0] +
mov ecx [edx+1Ch] +
mov eax [ecx+98h] +
mov [ebp+var_4] eax +
cmp [ebp+var_4] 0 +
jz loc_414CD9  +
xor edx edx +
mov [edi] edx +
mov ecx [ebp+var_4] +
mov ebx [ecx] +
movsx eax byte ptr [ebx+2Bh] +
imul  dword_4EBDA4 +
cdq   +
idiv  dword_4EBDA0 +
mov [ebp+var_28] eax +
cmp [ebp+var_28] 0 +
jnz loc_414A41  +
mov [ebp+var_28] 1 +
movsx ecx byte ptr [ebx+39h] +
mov [ebp+var_2C] ecx +
cmp dword_4D4C30 0 +
jnz loc_414A58  +
mov [ebp+var_2C] 1Fh +
movsx eax byte ptr [ebx+2Ah] +
mov [ebp+var_30] eax +
movsx eax byte ptr [ebx+41h] +
neg eax  +
shl eax 4 +
imul  dword_4CDD34 +
cdq   +
idiv  dword_4CDD38 +
add eax [ebp+var_1C] +
mov [ebp+var_20] eax +
mov esi eax +
mov eax [ebp+var_8] +
mov dl [eax+2Fh] +
dec dl  +
jz loc_414A98  +
dec dl  +
jz loc_414B5B  +
dec dl  +
jz loc_414AF2  +
jmp loc_414BFD  +
mov ecx [ebp+var_C] +
sar ecx 1 +
jns loc_414AA2  +
adc ecx 0 +
mov eax esi +
sub eax dword_4EADAC +
cmp ecx eax +
jle loc_414AC1  +
mov eax ecx +
sub eax esi +
add eax dword_4EADAC +
imul  [ebp+var_10] +
cdq   +
idiv  [ebp+var_C] +
jmp loc_414AD2  +
mov eax esi +
sub eax dword_4EADAC +
sub eax ecx +
imul  [ebp+var_10] +
cdq   +
idiv  [ebp+var_C] +
mov ecx [ebp+var_14] +
cmp ecx [ebp+var_18] +
jge loc_414AE7  +
mov edx [ebp+var_14] +
sub edx eax +
mov [ebp+var_24] edx +
jmp loc_414C03  +
add eax [ebp+var_14] +
mov [ebp+var_24] eax +
jmp loc_414C03  +
mov eax [ebp+var_C] +
test eax eax +
jns loc_414AFC  +
add eax 3 +
sar eax 2 +
add esi eax +
mov [ebp+var_20] esi +
mov eax [ebp+var_C] +
sub eax esi +
add eax dword_4EADAC +
imul  [ebp+var_10] +
sar eax 1 +
jns loc_414B19  +
adc eax 0 +
cdq   +
idiv  [ebp+var_C] +
mov ecx [ebp+var_14] +
cmp ecx [ebp+var_18] +
jge loc_414B41  +
mov edx [ebp+var_14] +
sub edx eax +
mov eax [ebp+var_10] +
test eax eax +
jns loc_414B34  +
add eax 3 +
sar eax 2 +
add edx eax +
mov [ebp+var_24] edx +
jmp loc_414C03  +
add eax [ebp+var_14] +
mov ecx [ebp+var_10] +
test ecx ecx +
jns loc_414B4E  +
add ecx 3 +
sar ecx 2 +
sub eax ecx +
mov [ebp+var_24] eax +
jmp loc_414C03  +
mov eax [ebp+var_10] +
imul  [ebp+var_10] +
mov [ebp+var_48] eax +
fild  [ebp+var_48] +
mov edx [ebp+var_C] +
imul edx [ebp+var_C] +
mov [ebp+var_4C] edx +
fild  [ebp+var_4C] +
fdivp st(1) st +
fild  [ebp+var_C] +
fmul  ds:flt_414FBC +
mov [ebp+var_50] esi +
fild  [ebp+var_50] +
fsubp st(1) st +
fild  dword_4EADAC +
faddp st(1) st +
fmulp st(1) st +
fild  [ebp+var_C] +
fmul  ds:flt_414FBC +
mov [ebp+var_54] esi +
fild  [ebp+var_54] +
fsubp st(1) st +
fild  dword_4EADAC +
faddp st(1) st +
fmulp st(1) st +
mov ecx [ebp+var_10] +
imul ecx [ebp+var_10] +
mov [ebp+var_58] ecx +
fild  [ebp+var_58] +
fmul  ds:flt_414FC0 +
fsubrp st(1) st +
add esp 0FFFFFFF8h +
fstp  [esp+80h+var_80] +
call _sqrt  +
add esp 8 +
call @_ftol$qv  +
push eax  +
mov eax [ebp+var_10] +
inc eax  +
sar eax 1 +
jns loc_414BE0  +
adc eax 0 +
pop edx  +
sub eax edx +
mov ecx [ebp+var_14] +
cmp ecx [ebp+var_18] +
jge loc_414BF5  +
mov edx [ebp+var_14] +
sub edx eax +
mov [ebp+var_24] edx +
jmp loc_414C03  +
add eax [ebp+var_14] +
mov [ebp+var_24] eax +
jmp loc_414C03  +
mov eax [ebp+var_14] +
mov [ebp+var_24] eax +
mov ecx [ebp+var_24] +
push 1  +
mov dword_4EAD38 ecx +
mov dword_4EAD40 esi +
push ebx  +
call sub_40B870  +
mov eax dword_4EAD38 +
mov esi dword_4EAD40 +
mov [ebp+var_24] eax +
add esp 8 +
mov eax [edi] +
mov edx [ebp+var_24] +
mov dword_4EAD54[eax*4] edx +
mov ecx [edi] +
mov dword_4EAD70[ecx*4] esi +
inc dword ptr [edi]  +
mov eax [edi] +
mov edx [ebp+var_18] +
mov dword_4EAD54[eax*4] edx +
mov ecx [edi] +
mov eax [ebp+var_20] +
mov dword_4EAD70[ecx*4] eax +
inc dword ptr [edi]  +
mov eax [ebx+4] +
mov ecx dword_4EBDA4 +
imul  ecx +
cdq   +
mov esi dword_4EBDA0 +
idiv  esi +
mov edx [edi] +
mov dword_4EAD54[edx*4] eax +
mov eax [ebx+8] +
imul  ecx +
cdq   +
idiv  esi +
mov ecx [edi] +
mov dword_4EAD70[ecx*4] eax +
inc dword ptr [edi]  +
mov eax [ebp+var_30] +
mov ecx dword_4EAD74 +
push eax  +
mov eax [ebp+var_28] +
push eax  +
mov eax dword_4EAD58 +
mov edx [ebp+var_2C] +
push edx  +
push ecx  +
push eax  +
mov edx dword_4EAD70 +
push edx  +
mov ecx dword_4EAD54 +
push ecx  +
call sub_415074  +
add esp 1Ch +
push 0  +
push ebx  +
call sub_413FF8  +
add esp 8 +
mov eax [ebp+var_4] +
mov edx [eax+4] +
mov [ebp+var_4] edx +
cmp [ebp+var_4] 0 +
jnz loc_414A17  +
mov ecx [ebp+arg_0] +
mov eax [ecx+1Ch] +
mov edx [eax+94h] +
mov [ebp+var_4] edx +
cmp [ebp+var_4] 0 +
jz loc_414FB4  +
xor ecx ecx +
mov [edi] ecx +
mov eax [ebp+var_4] +
mov ebx [eax] +
movsx eax byte ptr [ebx+2Bh] +
imul  dword_4EBDA4 +
cdq   +
idiv  dword_4EBDA0 +
mov [ebp+var_28] eax +
cmp [ebp+var_28] 0 +
jnz loc_414D1C  +
mov [ebp+var_28] 1 +
movsx ecx byte ptr [ebx+39h] +
mov [ebp+var_2C] ecx +
cmp dword_4D4C30 0 +
jnz loc_414D33  +
mov [ebp+var_2C] 1Fh +
movsx eax byte ptr [ebx+2Ah] +
mov [ebp+var_30] eax +
movsx eax byte ptr [ebx+41h] +
neg eax  +
shl eax 4 +
imul  dword_4CDD34 +
cdq   +
idiv  dword_4CDD38 +
add eax [ebp+var_1C] +
mov [ebp+var_20] eax +
mov esi eax +
mov eax [ebp+var_8] +
mov dl [eax+2Fh] +
dec dl  +
jz loc_414D73  +
dec dl  +
jz loc_414E36  +
dec dl  +
jz loc_414DCD  +
jmp loc_414ED8  +
mov ecx [ebp+var_C] +
sar ecx 1 +
jns loc_414D7D  +
adc ecx 0 +
mov eax esi +
sub eax dword_4EADAC +
cmp ecx eax +
jle loc_414D9C  +
mov eax ecx +
sub eax esi +
add eax dword_4EADAC +
imul  [ebp+var_10] +
cdq   +
idiv  [ebp+var_C] +
jmp loc_414DAD  +
mov eax esi +
sub eax dword_4EADAC +
sub eax ecx +
imul  [ebp+var_10] +
cdq   +
idiv  [ebp+var_C] +
mov ecx [ebp+var_14] +
cmp ecx [ebp+var_18] +
jge loc_414DC2  +
mov edx [ebp+var_14] +
sub edx eax +
mov [ebp+var_24] edx +
jmp loc_414EDE  +
add eax [ebp+var_14] +
mov [ebp+var_24] eax +
jmp loc_414EDE  +
mov eax [ebp+var_C] +
test eax eax +
jns loc_414DD7  +
add eax 3 +
sar eax 2 +
add esi eax +
mov [ebp+var_20] esi +
mov eax [ebp+var_C] +
sub eax esi +
add eax dword_4EADAC +
imul  [ebp+var_10] +
sar eax 1 +
jns loc_414DF4  +
adc eax 0 +
cdq   +
idiv  [ebp+var_C] +
mov ecx [ebp+var_14] +
cmp ecx [ebp+var_18] +
jge loc_414E1C  +
mov edx [ebp+var_14] +
sub edx eax +
mov eax [ebp+var_10] +
test eax eax +
jns loc_414E0F  +
add eax 3 +
sar eax 2 +
add edx eax +
mov [ebp+var_24] edx +
jmp loc_414EDE  +
add eax [ebp+var_14] +
mov ecx [ebp+var_10] +
test ecx ecx +
jns loc_414E29  +
add ecx 3 +
sar ecx 2 +
sub eax ecx +
mov [ebp+var_24] eax +
jmp loc_414EDE  +
mov eax [ebp+var_10] +
imul  [ebp+var_10] +
mov [ebp+var_5C] eax +
fild  [ebp+var_5C] +
mov edx [ebp+var_C] +
imul edx [ebp+var_C] +
mov [ebp+var_60] edx +
fild  [ebp+var_60] +
fdivp st(1) st +
fild  [ebp+var_C] +
fmul  ds:flt_414FBC +
mov [ebp+var_64] esi +
fild  [ebp+var_64] +
fsubp st(1) st +
fild  dword_4EADAC +
faddp st(1) st +
fmulp st(1) st +
fild  [ebp+var_C] +
fmul  ds:flt_414FBC +
mov [ebp+var_68] esi +
fild  [ebp+var_68] +
fsubp st(1) st +
fild  dword_4EADAC +
faddp st(1) st +
fmulp st(1) st +
mov ecx [ebp+var_10] +
imul ecx [ebp+var_10] +
mov [ebp+var_6C] ecx +
fild  [ebp+var_6C] +
fmul  ds:flt_414FC0 +
fsubrp st(1) st +
add esp 0FFFFFFF8h +
fstp  [esp+80h+var_80] +
call _sqrt  +
add esp 8 +
call @_ftol$qv  +
push eax  +
mov eax [ebp+var_10] +
inc eax  +
sar eax 1 +
jns loc_414EBB  +
adc eax 0 +
pop edx  +
sub eax edx +
mov ecx [ebp+var_14] +
cmp ecx [ebp+var_18] +
jge loc_414ED0  +
mov edx [ebp+var_14] +
sub edx eax +
mov [ebp+var_24] edx +
jmp loc_414EDE  +
add eax [ebp+var_14] +
mov [ebp+var_24] eax +
jmp loc_414EDE  +
mov eax [ebp+var_14] +
mov [ebp+var_24] eax +
mov ecx [ebp+var_24] +
push 1  +
mov dword_4EAD3C ecx +
mov dword_4EAD44 esi +
push ebx  +
call sub_40B870  +
mov eax dword_4EAD3C +
mov esi dword_4EAD44 +
mov [ebp+var_24] eax +
add esp 8 +
mov eax [edi] +
mov edx [ebp+var_24] +
mov dword_4EAD54[eax*4] edx +
mov ecx [edi] +
mov dword_4EAD70[ecx*4] esi +
inc dword ptr [edi]  +
mov eax [edi] +
mov edx [ebp+var_18] +
mov dword_4EAD54[eax*4] edx +
mov ecx [edi] +
mov eax [ebp+var_20] +
mov dword_4EAD70[ecx*4] eax +
inc dword ptr [edi]  +
mov eax [ebx+20h] +
mov ecx dword_4EBDA4 +
imul  ecx +
cdq   +
mov esi dword_4EBDA0 +
idiv  esi +
mov edx [edi] +
mov dword_4EAD54[edx*4] eax +
mov eax [ebx+24h] +
imul  ecx +
cdq   +
idiv  esi +
mov ecx [edi] +
mov dword_4EAD70[ecx*4] eax +
inc dword ptr [edi]  +
mov eax [ebp+var_30] +
mov ecx dword_4EAD74 +
push eax  +
mov eax [ebp+var_28] +
push eax  +
mov eax dword_4EAD58 +
mov edx [ebp+var_2C] +
push edx  +
push ecx  +
push eax  +
mov edx dword_4EAD70 +
push edx  +
mov ecx dword_4EAD54 +
push ecx  +
call sub_415074  +
add esp 1Ch +
push 0  +
push ebx  +
call sub_413FF8  +
add esp 8 +
mov eax [ebp+var_4] +
mov edx [eax+4] +
mov [ebp+var_4] edx +
cmp [ebp+var_4] 0 +
jnz loc_414CF2  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
push ebx  +
mov ebx [ebp+arg_4] +
mov edx [ebp+arg_0] +
xor eax eax +
mov ecx [edx+0B4h] +
test ecx ecx +
jz loc_414FED  +
cmp dword ptr [ecx+4] 0 +
jz loc_414FED  +
test eax eax +
jnz loc_414FE7  +
mov eax [ecx+4] +
cmp ebx eax +
jnz loc_414FED  +
xor eax eax +
test ecx ecx +
jz loc_415004  +
cmp dword ptr [ecx+0Ch] 0 +
jz loc_415004  +
test eax eax +
jnz loc_414FFE  +
mov eax [ecx+0Ch] +
cmp ebx eax +
jnz loc_415004  +
xor eax eax +
mov ecx [edx+98h] +
test ecx ecx +
jz loc_41501A  +
test eax eax +
jnz loc_415014  +
mov eax [ecx] +
cmp ebx eax +
jnz loc_41501A  +
xor eax eax +
mov ecx [edx+98h] +
test ecx ecx +
jz loc_415039  +
cmp dword ptr [ecx+4] 0 +
jz loc_415039  +
test eax eax +
jnz loc_415033  +
mov eax [ecx+4] +
mov eax [eax] +
cmp ebx eax +
jnz loc_415039  +
xor eax eax +
mov ecx [edx+94h] +
test ecx ecx +
jz loc_41504F  +
test eax eax +
jnz loc_415049  +
mov eax [ecx] +
cmp ebx eax +
jnz loc_41504F  +
xor eax eax +
mov ecx [edx+94h] +
test ecx ecx +
jz loc_41506E  +
cmp dword ptr [ecx+4] 0 +
jz loc_41506E  +
test eax eax +
jnz loc_415068  +
mov edx [ecx+4] +
mov eax [edx] +
cmp ebx eax +
jnz loc_41506E  +
xor eax eax +
pop ebx  +
pop ebp  +
retn   +
***
push ebx  +
push esi  +
mov edx [ebp+arg_C] +
mov eax [ebp+arg_8] +
mov esi [ebp+arg_4] +
mov ecx [ebp+arg_0] +
add eax ecx +
sar eax 1 +
jns loc_41508E  +
adc eax 0 +
add edx esi +
sar edx 1 +
jns loc_415097  +
adc edx 0 +
mov ebx [ebp+arg_18] +
sub ebx 1 +
jb loc_4150A9  +
jz loc_4150D5  +
dec ebx  +
jz loc_4150BF  +
dec ebx  +
jz loc_4150E9  +
jmp loc_4150E9  +
mov ebx [ebp+arg_10] +
push ebx  +
mov ebx [ebp+arg_14] +
push ebx  +
push edx  +
push eax  +
push esi  +
push ecx  +
call sub_40C8E8  +
add esp 18h +
jmp loc_4150E9  +
mov ebx [ebp+arg_10] +
push ebx  +
mov ebx [ebp+arg_14] +
push ebx  +
push edx  +
push eax  +
push esi  +
push ecx  +
call sub_40DB64  +
add esp 18h +
jmp loc_4150E9  +
mov ebx [ebp+arg_10] +
push ebx  +
mov ebx [ebp+arg_14] +
push ebx  +
push edx  +
push eax  +
push esi  +
push ecx  +
call sub_40F3B0  +
add esp 18h +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
push ebx  +
push esi  +
mov ecx [ebp+arg_8] +
mov eax [ebp+arg_0] +
mov esi [ebp+arg_C] +
mov edx [ebp+arg_4] +
lea eax [ecx+eax] +
sar eax 1 +
jns loc_41510B  +
adc eax 0 +
lea edx [esi+edx] +
sar edx 1 +
jns loc_415115  +
adc edx 0 +
mov ebx [ebp+arg_18] +
sub ebx 1 +
jb loc_415127  +
jz loc_415153  +
dec ebx  +
jz loc_41513D  +
dec ebx  +
jz loc_415167  +
jmp loc_415167  +
mov ebx [ebp+arg_10] +
push ebx  +
mov ebx [ebp+arg_14] +
push ebx  +
push esi  +
push ecx  +
push edx  +
push eax  +
call sub_40C8E8  +
add esp 18h +
jmp loc_415167  +
mov ebx [ebp+arg_10] +
push ebx  +
mov ebx [ebp+arg_14] +
push ebx  +
push esi  +
push ecx  +
push edx  +
push eax  +
call sub_40DB64  +
add esp 18h +
jmp loc_415167  +
mov ebx [ebp+arg_10] +
push ebx  +
mov ebx [ebp+arg_14] +
push ebx  +
push esi  +
push ecx  +
push edx  +
push eax  +
call sub_40F3B0  +
add esp 18h +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
add esp 0FFFFFFD0h +
push ebx  +
push esi  +
push edi  +
mov esi [ebp+arg_8] +
mov eax [ebp+arg_0] +
add eax esi +
mov edi [ebp+arg_C] +
sar eax 1 +
jns loc_415187  +
adc eax 0 +
mov [ebp+arg_0] eax +
mov dword_4EAD90 eax +
mov edx [ebp+arg_4] +
add edx edi +
sar edx 1 +
jns loc_41519B  +
adc edx 0 +
mov [ebp+arg_4] edx +
mov dword_4EAD94 edx +
mov ecx [ebp+arg_10] +
add ecx esi +
sar ecx 1 +
jns loc_4151B0  +
adc ecx 0 +
mov [ebp+arg_10] ecx +
mov dword_4EAD98 ecx +
mov ecx [ebp+arg_14] +
add ecx edi +
sar ecx 1 +
jns loc_4151C5  +
adc ecx 0 +
sub eax esi +
mov [ebp+arg_14] ecx +
mov [ebp+var_14] eax +
mov dword_4EAD9C ecx +
fild  [ebp+var_14] +
mov eax dword_4EAD90 +
sub edx edi +
sub eax esi +
mov [ebp+var_18] eax +
fild  [ebp+var_18] +
mov [ebp+var_1C] edx +
mov edx dword_4EAD94 +
sub edx edi +
fmulp st(1) st +
fild  [ebp+var_1C] +
mov [ebp+var_20] edx +
fild  [ebp+var_20] +
fmulp st(1) st +
faddp st(1) st +
fstp  [ebp+x] +
push dword ptr [ebp+x+4]  +
push dword ptr [ebp+x]  +
call _sqrt  +
add esp 8 +
call @_ftol$qv  +
mov ebx eax +
mov eax dword_4EAD98 +
sub eax esi +
mov edx dword_4EAD98 +
mov [ebp+var_24] eax +
sub edx esi +
fild  [ebp+var_24] +
mov [ebp+var_28] edx +
mov ecx dword_4EAD9C +
sub ecx edi +
mov eax dword_4EAD9C +
fild  [ebp+var_28] +
mov [ebp+var_2C] ecx +
sub eax edi +
fmulp st(1) st +
fild  [ebp+var_2C] +
mov [ebp+var_30] eax +
fild  [ebp+var_30] +
fmulp st(1) st +
faddp st(1) st +
fstp  [ebp+var_10] +
push dword ptr [ebp+var_10+4]  +
push dword ptr [ebp+var_10]  +
call _sqrt  +
add esp 8 +
call @_ftol$qv  +
mov ecx eax +
mov edx ebx +
add edx edx +
lea eax [ecx+ecx*2] +
cmp edx eax +
jle loc_41529E  +
mov eax dword_4EAD90 +
sub eax esi +
imul  ecx +
cdq   +
idiv  ebx +
add eax esi +
mov dword_4EAD90 eax +
mov eax dword_4EAD94 +
sub eax edi +
imul  ecx +
cdq   +
idiv  ebx +
add eax edi +
mov dword_4EAD94 eax +
jmp loc_4152CF  +
mov eax ecx +
add eax eax +
lea edx [ebx+ebx*2] +
cmp eax edx +
jle loc_4152CF  +
mov eax dword_4EAD98 +
sub eax esi +
imul  ebx +
cdq   +
idiv  ecx +
add eax esi +
mov dword_4EAD98 eax +
mov eax dword_4EAD9C +
sub eax edi +
imul  ebx +
cdq   +
idiv  ecx +
add eax edi +
mov dword_4EAD9C eax +
mov ebx dword_4CD130 +
test ebx ebx +
jz loc_415329  +
mov eax [ebx+54h] +
mov ecx dword_4EBDA4 +
imul  ecx +
cdq   +
idiv  dword_4EBDA0 +
cmp esi eax +
jnz loc_4152FF  +
mov eax [ebx+58h] +
imul  ecx +
cdq   +
idiv  dword_4EBDA0 +
cmp edi eax +
jz loc_415322  +
cmp ebx dword_4EAD48 +
jz loc_415322  +
cmp ebx dword_4EAD4C +
jz loc_415322  +
cmp ebx dword_4EAD50 +
jz loc_415322  +
push edi  +
push esi  +
push ebx  +
call sub_415730  +
add esp 0Ch +
mov ebx [ebx+5Ch] +
test ebx ebx +
jnz loc_4152D9  +
mov ebx dword_4CD144 +
test ebx ebx +
jz loc_415383  +
mov eax [ebx+54h] +
mov ecx dword_4EBDA4 +
imul  ecx +
cdq   +
idiv  dword_4EBDA0 +
cmp esi eax +
jnz loc_415359  +
mov eax [ebx+58h] +
imul  ecx +
cdq   +
idiv  dword_4EBDA0 +
cmp edi eax +
jz loc_41537C  +
cmp ebx dword_4EAD48 +
jz loc_41537C  +
cmp ebx dword_4EAD4C +
jz loc_41537C  +
cmp ebx dword_4EAD50 +
jz loc_41537C  +
push edi  +
push esi  +
push ebx  +
call sub_415730  +
add esp 0Ch +
mov ebx [ebx+5Ch] +
test ebx ebx +
jnz loc_415333  +
mov ebx dword_4CD14C +
test ebx ebx +
jz loc_41542E  +
mov eax [ebx+54h] +
mov ecx dword_4EBDA4 +
imul  ecx +
cdq   +
idiv  dword_4EBDA0 +
cmp esi eax +
jnz loc_4153B7  +
mov eax [ebx+58h] +
imul  ecx +
cdq   +
idiv  dword_4EBDA0 +
cmp edi eax +
jz loc_415423  +
cmp ebx dword_4EAD48 +
jz loc_415423  +
cmp ebx dword_4EAD4C +
jz loc_415423  +
cmp ebx dword_4EAD50 +
jz loc_415423  +
xor eax eax +
mov ecx dword_4EAD48 +
mov ecx [ecx+6Ch] +
mov edx [ebx+6Ch] +
cmp ecx edx +
jnz loc_4153E6  +
mov eax dword_4EAD48 +
mov ecx dword_4EAD4C +
cmp edx [ecx+6Ch] +
jnz loc_4153F6  +
mov eax dword_4EAD4C +
mov ecx dword_4EAD50 +
cmp edx [ecx+6Ch] +
jnz loc_415406  +
mov eax dword_4EAD50 +
test eax eax +
jz loc_415418  +
push edi  +
push esi  +
push eax  +
push ebx  +
call sub_4155C8  +
add esp 10h +
jmp loc_415423  +
push edi  +
push esi  +
push ebx  +
call sub_415730  +
add esp 0Ch +
mov ebx [ebx+5Ch] +
test ebx ebx +
jnz loc_415391  +
cmp esi dword_4EAD90 +
jnz loc_41543E  +
cmp esi dword_4EAD94 +
jz loc_415481  +
cmp esi dword_4EAD98 +
jnz loc_41544E  +
cmp esi dword_4EAD9C +
jz loc_415481  +
mov edx [ebp+arg_20] +
mov ecx dword_4EAD9C +
push edx  +
mov eax [ebp+arg_18] +
push eax  +
mov eax dword_4EAD98 +
mov edx [ebp+arg_1C] +
push edx  +
push ecx  +
push eax  +
push edi  +
push esi  +
push edi  +
push esi  +
mov edx dword_4EAD94 +
push edx  +
mov ecx dword_4EAD90 +
push ecx  +
call sub_410864  +
add esp 2Ch +
mov eax dword_4EAD90 +
cmp eax [ebp+arg_0] +
jnz loc_41549A  +
mov edx dword_4EAD94 +
cmp edx [ebp+arg_4] +
jz loc_41551F  +
mov ecx [ebp+arg_20] +
sub ecx 1 +
jb loc_4154AC  +
jz loc_4154FA  +
dec ecx  +
jz loc_4154D3  +
dec ecx  +
jz loc_41551F  +
jmp loc_41551F  +
mov eax [ebp+arg_18] +
mov ecx dword_4EAD94 +
push eax  +
mov eax dword_4EAD90 +
mov edx [ebp+arg_1C] +
push edx  +
push ecx  +
push eax  +
mov edx [ebp+arg_4] +
push edx  +
mov ecx [ebp+arg_0] +
push ecx  +
call sub_40C8E8  +
add esp 18h +
jmp loc_41551F  +
mov eax [ebp+arg_18] +
mov ecx dword_4EAD94 +
push eax  +
mov eax dword_4EAD90 +
mov edx [ebp+arg_1C] +
push edx  +
push ecx  +
push eax  +
mov edx [ebp+arg_4] +
push edx  +
mov ecx [ebp+arg_0] +
push ecx  +
call sub_40DB64  +
add esp 18h +
jmp loc_41551F  +
mov eax [ebp+arg_18] +
mov ecx dword_4EAD94 +
push eax  +
mov eax dword_4EAD90 +
mov edx [ebp+arg_1C] +
push edx  +
push ecx  +
push eax  +
mov edx [ebp+arg_4] +
push edx  +
mov ecx [ebp+arg_0] +
push ecx  +
call sub_40F3B0  +
add esp 18h +
mov eax dword_4EAD98 +
cmp eax [ebp+arg_10] +
jnz loc_415538  +
mov edx dword_4EAD9C +
cmp edx [ebp+arg_14] +
jz loc_4155C0  +
mov ecx [ebp+arg_20] +
sub ecx 1 +
jb loc_41554A  +
jz loc_41559A  +
dec ecx  +
jz loc_415572  +
dec ecx  +
jz loc_4155C0  +
jmp loc_4155C0  +
mov eax [ebp+arg_18] +
push eax  +
mov edx [ebp+arg_1C] +
push edx  +
mov edx dword_4EAD9C +
mov ecx [ebp+arg_14] +
push ecx  +
mov ecx dword_4EAD98 +
mov eax [ebp+arg_10] +
push eax  +
push edx  +
push ecx  +
call sub_40C8E8  +
add esp 18h +
jmp loc_4155C0  +
mov eax [ebp+arg_18] +
push eax  +
mov edx [ebp+arg_1C] +
push edx  +
mov edx dword_4EAD9C +
mov ecx [ebp+arg_14] +
push ecx  +
mov ecx dword_4EAD98 +
mov eax [ebp+arg_10] +
push eax  +
push edx  +
push ecx  +
call sub_40DB64  +
add esp 18h +
jmp loc_4155C0  +
mov eax [ebp+arg_18] +
push eax  +
mov edx [ebp+arg_1C] +
push edx  +
mov edx dword_4EAD9C +
mov ecx [ebp+arg_14] +
push ecx  +
mov ecx dword_4EAD98 +
mov eax [ebp+arg_10] +
push eax  +
push edx  +
push ecx  +
call sub_40F3B0  +
add esp 18h +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
add esp 0FFFFFFE8h +
push ebx  +
add esp 0FFFFFFE8h +
push ebx  +
push esi  +
push edi  +
mov edi dword_4EBDA4 +
mov esi [ebp+arg_0] +
mov ecx [ebp+arg_8] +
mov eax esi +
mov ebx [ebp+arg_C] +
imul  edi +
cdq   +
idiv  dword_4EBDA0 +
mov esi eax +
mov eax [ebp+arg_4] +
imul  edi +
cdq   +
idiv  dword_4EBDA0 +
mov [ebp+arg_4] eax +
cmp ecx esi +
jnz loc_415B01  +
cmp ebx [ebp+arg_4] +
jz loc_415E9C  +
cmp esi dword_4EAD90 +
jnz loc_415B18  +
mov eax [ebp+arg_4] +
cmp eax dword_4EAD94 +
jz loc_415E9C  +
cmp esi dword_4EAD98 +
jnz loc_415B2F  +
mov eax [ebp+arg_4] +
cmp eax dword_4EAD9C +
jz loc_415E9C  +
mov eax dword_4EAD98 +
cmp eax dword_4EAD90 +
jnz loc_415B44  +
cmp ecx eax +
jz loc_415E9C  +
mov eax dword_4EAD9C +
cmp eax dword_4EAD94 +
jnz loc_415B59  +
cmp ebx eax +
jz loc_415E9C  +
mov edx dword_4EAD90 +
cmp edx dword_4EAD98 +
jnz loc_415B78  +
mov eax dword_4EAD94 +
cmp eax dword_4EAD9C +
jz loc_415E9C  +
cmp ecx dword_4EAD90 +
jnz loc_415B8C  +
cmp ebx dword_4EAD94 +
jz loc_415E9C  +
cmp ecx dword_4EAD98 +
jnz loc_415BA0  +
cmp ebx dword_4EAD9C +
jz loc_415E9C  +
cmp esi dword_4EAD90 +
jg loc_415BB8  +
cmp esi dword_4EAD98 +
jg loc_415BB8  +
cmp ecx esi +
jge loc_415E9C  +
cmp esi dword_4EAD90 +
jl loc_415BD0  +
cmp esi dword_4EAD98 +
jl loc_415BD0  +
cmp ecx esi +
jle loc_415E9C  +
mov edx [ebp+arg_4] +
cmp edx dword_4EAD94 +
jg loc_415BEF  +
mov eax [ebp+arg_4] +
cmp eax dword_4EAD9C +
jg loc_415BEF  +
cmp ebx [ebp+arg_4] +
jge loc_415E9C  +
mov edx dword_4EAD94 +
cmp edx [ebp+arg_4] +
jg loc_415C0E  +
mov eax [ebp+arg_4] +
cmp eax dword_4EAD9C +
jl loc_415C0E  +
cmp ebx [ebp+arg_4] +
jle loc_415E9C  +
mov edi dword_4EAD98 +
mov eax dword_4EAD90 +
cmp edi eax +
jz loc_415D60  +
mov edi edx +
sub edi dword_4EAD9C +
mov [ebp+var_C] edi +
mov edi eax +
sub edi dword_4EAD98 +
cmp ecx eax +
mov [ebp+var_10] edi +
jz loc_415CB3  +
sub edx ebx +
sub eax ecx +
mov [ebp+var_14] edx +
mov [ebp+var_18] eax +
mov eax [ebp+var_14] +
imul  [ebp+var_10] +
mov edx [ebp+var_C] +
imul edx [ebp+var_18] +
cmp eax edx +
jz loc_415E9C  +
mov eax ebx +
mov edi [ebp+var_14] +
imul  [ebp+var_10] +
imul  [ebp+var_18] +
mov edx [ebp+arg_4] +
imul edx [ebp+var_10] +
imul edx [ebp+var_18] +
sub eax edx +
mov edx esi +
imul edx [ebp+var_C] +
imul edx [ebp+var_18] +
add eax edx +
mov edx ecx +
imul edx [ebp+var_14] +
imul edx [ebp+var_10] +
sub eax edx +
mov edx [ebp+var_C] +
imul edx [ebp+var_18] +
imul edi [ebp+var_10] +
sub edx edi +
mov edi edx +
cdq   +
idiv  edi +
mov [ebp+var_4] eax +
mov eax [ebp+var_4] +
sub eax esi +
imul  [ebp+var_C] +
cdq   +
idiv  [ebp+var_10] +
add eax [ebp+arg_4] +
mov [ebp+var_8] eax +
jmp loc_415CC8  +
mov [ebp+var_4] ecx +
mov eax [ebp+var_4] +
sub eax esi +
imul  [ebp+var_C] +
cdq   +
idiv  [ebp+var_10] +
add eax [ebp+arg_4] +
mov [ebp+var_8] eax +
cmp ecx dword_4EAD98 +
jz loc_415D4E  +
mov eax dword_4EAD9C +
mov edx dword_4EAD98 +
sub eax ebx +
sub edx ecx +
mov [ebp+var_14] eax +
mov [ebp+var_18] edx +
mov eax [ebp+var_14] +
imul  [ebp+var_10] +
mov edx [ebp+var_C] +
imul edx [ebp+var_18] +
cmp eax edx +
jz loc_415E9C  +
mov eax ebx +
mov edi [ebp+var_14] +
imul  [ebp+var_10] +
imul  [ebp+var_18] +
mov edx [ebp+arg_4] +
imul edx [ebp+var_10] +
imul edx [ebp+var_18] +
sub eax edx +
mov edx esi +
imul edx [ebp+var_C] +
imul edx [ebp+var_18] +
add eax edx +
mov edx ecx +
imul edx [ebp+var_14] +
imul edx [ebp+var_10] +
sub eax edx +
mov edx [ebp+var_C] +
imul edx [ebp+var_18] +
imul edi [ebp+var_10] +
sub edx edi +
mov edi edx +
cdq   +
idiv  edi +
mov edi eax +
mov eax edi +
sub eax esi +
imul  [ebp+var_C] +
cdq   +
idiv  [ebp+var_10] +
add eax [ebp+arg_4] +
jmp loc_415DAD  +
mov edi ecx +
mov eax edi +
sub eax esi +
imul  [ebp+var_C] +
cdq   +
idiv  [ebp+var_10] +
add eax [ebp+arg_4] +
jmp loc_415DAD  +
mov eax dword_4EAD94 +
mov edx dword_4EAD90 +
sub eax ebx +
sub edx ecx +
mov [ebp+var_14] eax +
mov [ebp+var_18] edx +
mov [ebp+var_4] esi +
mov edi esi +
mov eax [ebp+var_4] +
sub eax ecx +
imul  [ebp+var_14] +
cdq   +
idiv  [ebp+var_18] +
add eax ebx +
mov edx dword_4EAD98 +
mov [ebp+var_8] eax +
mov eax dword_4EAD9C +
sub eax ebx +
sub edx ecx +
mov [ebp+var_14] eax +
mov eax edi +
sub eax ecx +
mov [ebp+var_18] edx +
imul  [ebp+var_14] +
cdq   +
idiv  [ebp+var_18] +
add eax ebx +
mov edx [ebp+var_4] +
sub edx ecx +
test edx edx +
jle loc_415DC4  +
mov edx dword_4EAD90 +
sub edx ecx +
js loc_415E9C  +
mov edx [ebp+var_8] +
sub edx ebx +
test edx edx +
jle loc_415DDB  +
mov edx dword_4EAD94 +
sub edx ebx +
js loc_415E9C  +
mov edx edi +
sub edx ecx +
test edx edx +
jle loc_415DF1  +
mov edx dword_4EAD98 +
sub edx ecx +
js loc_415E9C  +
mov edx eax +
sub edx ebx +
test edx edx +
jle loc_415E07  +
mov edx dword_4EAD9C +
sub edx ebx +
js loc_415E9C  +
mov edx dword_4EAD90 +
cmp ecx edx +
jge loc_415E1A  +
cmp edx [ebp+var_4] +
jl loc_415E9C  +
mov edx dword_4EAD90 +
cmp ecx edx +
jle loc_415E29  +
cmp edx [ebp+var_4] +
jg loc_415E9C  +
mov edx dword_4EAD94 +
cmp ebx edx +
jge loc_415E38  +
cmp edx [ebp+var_8] +
jl loc_415E9C  +
mov edx dword_4EAD94 +
cmp ebx edx +
jle loc_415E47  +
cmp edx [ebp+var_8] +
jg loc_415E9C  +
mov edx dword_4EAD98 +
cmp ecx edx +
jge loc_415E55  +
cmp edx edi +
jl loc_415E9C  +
mov edx dword_4EAD98 +
cmp ecx edx +
jle loc_415E63  +
cmp edx edi +
jg loc_415E9C  +
mov edx dword_4EAD9C +
cmp ebx edx +
jge loc_415E71  +
cmp edx eax +
jl loc_415E9C  +
mov edx dword_4EAD9C +
cmp ebx edx +
jle loc_415E7F  +
cmp edx eax +
jg loc_415E9C  +
mov ecx [ebp+var_4] +
mov edx [ebp+var_8] +
mov dword_4EAD90 ecx +
mov dword_4EAD94 edx +
mov dword_4EAD98 edi +
mov dword_4EAD9C eax +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
push ebx  +
mov ecx dword_4CDD34 +
mov ebx dword_4CDD38 +
mov eax ecx +
imul  [ebp+arg_0] +
cdq   +
idiv  ebx +
add eax dword_4EADA8 +
mov dword_4EADB0 eax +
mov eax ecx +
imul  [ebp+arg_4] +
cdq   +
idiv  ebx +
add eax dword_4EADAC +
mov dword_4EADB4 eax +
pop ebx  +
pop ebp  +
retn   +
***
add esp 0FFFFFFF8h +
mov ecx dword_4CDD34 +
mov eax ecx +
push ebx  +
push esi  +
push edi  +
imul  [ebp+arg_0] +
cdq   +
mov ebx dword_4CDD38 +
idiv  ebx +
mov esi eax +
mov eax ecx +
imul  [ebp+arg_4] +
cdq   +
idiv  ebx +
mov edi eax +
mov eax dword_4CDD44 +
imul  ecx +
cdq   +
idiv  ebx +
add edi dword_4EADAC +
add esi dword_4EADA8 +
mov ebx eax +
cmp ebx 1 +
jle loc_415FE0  +
mov ecx [ebp+arg_8] +
push ecx  +
push edi  +
push esi  +
mov eax dword_4EADB4 +
push eax  +
mov edx dword_4EADB0 +
push edx  +
call sub_42A938  +
add esp 14h +
mov eax ebx +
sar eax 1 +
jns loc_415F4E  +
adc eax 0 +
mov [ebp+var_4] eax +
mov [ebp+var_8] eax +
and ebx 80000001h +
jns loc_415F61  +
dec ebx  +
or ebx 0FFFFFFFEh +
inc ebx  +
dec ebx  +
jnz loc_415F67  +
inc [ebp+var_8]  +
xor ebx ebx +
cmp ebx [ebp+var_4] +
jge loc_415FA3  +
mov eax [ebp+arg_8] +
mov ecx esi +
push eax  +
sub ecx ebx +
mov edx [ebp+var_4] +
mov eax dword_4EADB4 +
add edx edi +
dec edx  +
sub edx ebx +
push edx  +
push ecx  +
sub eax [ebp+var_4] +
mov edx dword_4EADB0 +
add eax ebx +
inc eax  +
sub edx ebx +
push eax  +
push edx  +
call sub_42A938  +
add esp 14h +
inc ebx  +
cmp ebx [ebp+var_4] +
jl loc_415F6E  +
xor ebx ebx +
cmp ebx [ebp+var_8] +
jge loc_415FFB  +
mov eax [ebp+arg_8] +
lea ecx [ebx+esi] +
push eax  +
mov eax dword_4EADB4 +
mov edx [ebp+var_8] +
add edx edi +
dec edx  +
sub edx ebx +
push edx  +
push ecx  +
sub eax [ebp+var_8] +
mov edx dword_4EADB0 +
add eax ebx +
inc eax  +
add edx ebx +
push eax  +
push edx  +
call sub_42A938  +
add esp 14h +
inc ebx  +
cmp ebx [ebp+var_8] +
jl loc_415FAA  +
jmp loc_415FFB  +
mov ecx [ebp+arg_8] +
push ecx  +
push edi  +
push esi  +
mov eax dword_4EADB4 +
push eax  +
mov edx dword_4EADB0 +
push edx  +
call sub_42A938  +
add esp 14h +
mov dword_4EADB0 esi +
mov dword_4EADB4 edi +
pop edi  +
pop esi  +
pop ebx  +
pop ecx  +
pop ecx  +
pop ebp  +
retn   +
***
push ebx  +
mov ebx [ebp+arg_4] +
mov eax [ebp+arg_0] +
add eax 0FFFFFFE0h +
cmp eax 5Eh +
ja loc_418678  +
jmp ds:off_41602D[eax*4]  +
pop ebx  +
pop ebp  +
retn   +
push 2  +
push 3  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 8  +
push 3  +
call sub_415EE0  +
add esp 0Ch +
push 0Bh  +
push 3  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 0Bh  +
push 3  +
call sub_415EE0  +
add esp 0Ch +
pop ebx  +
pop ebp  +
retn   +
push 2  +
push 2  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 4  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
push 2  +
push 5  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 4  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
pop ebx  +
pop ebp  +
retn   +
push 0Bh  +
push 1  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 2  +
push 3  +
call sub_415EE0  +
add esp 0Ch +
push 5  +
push 1  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 5  +
push 7  +
call sub_415EE0  +
add esp 0Ch +
push 9  +
push 0  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 9  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push 0Bh  +
push 4  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 2  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
pop ebx  +
pop ebp  +
retn   +
push 4  +
push 5  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 3  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 2  +
push 4  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 2  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 3  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 4  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 6  +
push 3  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 6  +
push 4  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 8  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Ah  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Bh  +
push 4  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Bh  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Ah  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 9  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push 1  +
push 3  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 0Ch  +
push 3  +
call sub_415EE0  +
add esp 0Ch +
pop ebx  +
pop ebp  +
retn   +
push 3  +
push 0  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 2  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 2  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 3  +
push 3  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 4  +
push 3  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 5  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 5  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 4  +
push 0  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 3  +
push 0  +
call sub_415EE0  +
add esp 0Ch +
push 9  +
push 3  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 8  +
push 4  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 8  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 9  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Ah  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Bh  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Bh  +
push 4  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Ah  +
push 3  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 9  +
push 3  +
call sub_415EE0  +
add esp 0Ch +
push 2  +
push 6  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 0Bh  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
pop ebx  +
pop ebp  +
retn   +
push 7  +
push 6  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 0Bh  +
push 3  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Bh  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Ah  +
push 0  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 7  +
push 0  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 4  +
push 4  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 3  +
push 4  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 2  +
push 3  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 2  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 3  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 4  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 5  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 9  +
push 4  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Ah  +
push 4  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Bh  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
pop ebx  +
pop ebp  +
retn   +
push 2  +
push 4  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 3  +
push 4  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 5  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
pop ebx  +
pop ebp  +
retn   +
push 1  +
push 5  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 4  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 9  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Ch  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
pop ebx  +
pop ebp  +
retn   +
push 1  +
push 2  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 4  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 9  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Ch  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
pop ebx  +
pop ebp  +
retn   +
push 5  +
push 1  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 6  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 6  +
push 4  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 7  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push 4  +
push 3  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 8  +
push 3  +
call sub_415EE0  +
add esp 0Ch +
push 7  +
push 1  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 6  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 6  +
push 4  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 5  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
pop ebx  +
pop ebp  +
retn   +
push 7  +
push 0  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 7  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push 0Ah  +
push 3  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 4  +
push 3  +
call sub_415EE0  +
add esp 0Ch +
pop ebx  +
pop ebp  +
retn   +
push 0Ah  +
push 4  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 0Ah  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Bh  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Bh  +
push 4  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Ah  +
push 4  +
call sub_415EE0  +
add esp 0Ch +
push 0Bh  +
push 5  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 0Ch  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Eh  +
push 3  +
call sub_415EE0  +
add esp 0Ch +
pop ebx  +
pop ebp  +
retn   +
push 7  +
push 1  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 7  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
pop ebx  +
pop ebp  +
retn   +
push 0Ah  +
push 4  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 0Ah  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Bh  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Bh  +
push 4  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Ah  +
push 4  +
call sub_415EE0  +
add esp 0Ch +
pop ebx  +
pop ebp  +
retn   +
push 0Ch  +
push 0  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 1  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
pop ebx  +
pop ebp  +
retn   +
push 0Ah  +
push 2  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 3  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 2  +
push 3  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 2  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 3  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Ah  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Bh  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Bh  +
push 3  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Ah  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
pop ebx  +
pop ebp  +
retn   +
push 0Bh  +
push 2  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 0Bh  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push 0Bh  +
push 4  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 2  +
push 4  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 4  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
pop ebx  +
pop ebp  +
retn   +
push 4  +
push 1  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 3  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 2  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 2  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 3  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 4  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Bh  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Bh  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
pop ebx  +
pop ebp  +
retn   +
push 4  +
push 1  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 3  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 2  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 2  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 3  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 5  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 6  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 6  +
push 3  +
call sub_415EE0  +
add esp 0Ch +
push 6  +
push 5  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 7  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Ah  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Bh  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Bh  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Ah  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 9  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
pop ebx  +
pop ebp  +
retn   +
push 0Bh  +
push 5  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 2  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 8  +
push 0  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 8  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
pop ebx  +
pop ebp  +
retn   +
push 2  +
push 6  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 2  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 6  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 6  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 7  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Ah  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Bh  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Bh  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Ah  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 9  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
pop ebx  +
pop ebp  +
retn   +
push 3  +
push 6  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 2  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 2  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 3  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Ah  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Bh  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Bh  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Ah  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 7  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 6  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 6  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
pop ebx  +
pop ebp  +
retn   +
push 3  +
push 1  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 2  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 2  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Ah  +
push 4  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Bh  +
push 4  +
call sub_415EE0  +
add esp 0Ch +
pop ebx  +
pop ebp  +
retn   +
push 5  +
push 1  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 3  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 2  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 2  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 3  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 5  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 6  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 6  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 5  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push 6  +
push 5  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 7  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Ah  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Bh  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Bh  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Ah  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 7  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 6  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
pop ebx  +
pop ebp  +
retn   +
push 0Ah  +
push 1  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 0Bh  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Bh  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Ah  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 3  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 2  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 2  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 3  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 6  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 7  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 7  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
pop ebx  +
pop ebp  +
retn   +
push 5  +
push 4  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 5  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 6  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 6  +
push 4  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 5  +
push 4  +
call sub_415EE0  +
add esp 0Ch +
push 0Ah  +
push 4  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 0Ah  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Bh  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Bh  +
push 4  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Ah  +
push 4  +
call sub_415EE0  +
add esp 0Ch +
pop ebx  +
pop ebp  +
retn   +
push 5  +
push 4  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 5  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 6  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 6  +
push 4  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 5  +
push 4  +
call sub_415EE0  +
add esp 0Ch +
push 0Ah  +
push 4  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 0Ah  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Bh  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Bh  +
push 4  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Ah  +
push 4  +
call sub_415EE0  +
add esp 0Ch +
push 0Bh  +
push 5  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 0Ch  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Eh  +
push 3  +
call sub_415EE0  +
add esp 0Ch +
pop ebx  +
pop ebp  +
retn   +
push 1  +
push 6  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 6  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Bh  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
pop ebx  +
pop ebp  +
retn   +
push 5  +
push 1  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 5  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push 9  +
push 1  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 9  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
pop ebx  +
pop ebp  +
retn   +
push 1  +
push 1  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 6  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Bh  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
pop ebx  +
pop ebp  +
retn   +
push 4  +
push 1  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 3  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 2  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 2  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 3  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 4  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 7  +
push 4  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 8  +
push 4  +
call sub_415EE0  +
add esp 0Ch +
push 0Bh  +
push 4  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 0Bh  +
push 4  +
call sub_415EE0  +
add esp 0Ch +
pop ebx  +
pop ebp  +
retn   +
push 0Ah  +
push 6  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 0Bh  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Bh  +
push 3  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 9  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 4  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 2  +
push 3  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 2  +
push 4  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 4  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 7  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 8  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 8  +
push 4  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 7  +
push 3  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 6  +
push 3  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 5  +
push 4  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 5  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 6  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
pop ebx  +
pop ebp  +
retn   +
push 0Bh  +
push 1  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 8  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 2  +
push 3  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 2  +
push 4  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 8  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Bh  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push 8  +
push 1  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 8  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
pop ebx  +
pop ebp  +
retn   +
push 0Bh  +
push 1  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 2  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 2  +
push 4  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 3  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 5  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 6  +
push 4  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 6  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push 6  +
push 4  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 8  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Ah  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Bh  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Bh  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
pop ebx  +
pop ebp  +
retn   +
push 4  +
push 6  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 3  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 2  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 2  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 3  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Ah  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Bh  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Bh  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Ah  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 9  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
pop ebx  +
pop ebp  +
retn   +
push 2  +
push 1  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 0Bh  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Bh  +
push 4  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 9  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 4  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 2  +
push 4  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 2  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
pop ebx  +
pop ebp  +
retn   +
push 2  +
push 1  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 0Bh  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Bh  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push 2  +
push 1  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 2  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push 6  +
push 1  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 6  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
pop ebx  +
pop ebp  +
retn   +
push 2  +
push 1  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 0Bh  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push 2  +
push 1  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 2  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push 6  +
push 1  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 6  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
pop ebx  +
pop ebp  +
retn   +
push 4  +
push 6  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 3  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 2  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 2  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 3  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Ah  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Bh  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Bh  +
push 4  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Ah  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push 0Bh  +
push 6  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 7  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 7  +
push 4  +
call sub_415EE0  +
add esp 0Ch +
pop ebx  +
pop ebp  +
retn   +
push 2  +
push 1  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 0Bh  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push 2  +
push 6  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 0Bh  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push 6  +
push 1  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 6  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
pop ebx  +
pop ebp  +
retn   +
push 2  +
push 1  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 2  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push 2  +
push 3  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 0Bh  +
push 3  +
call sub_415EE0  +
add esp 0Ch +
push 0Bh  +
push 1  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 0Bh  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
pop ebx  +
pop ebp  +
retn   +
push 2  +
push 3  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 2  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push 2  +
push 5  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 0Ah  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Bh  +
push 4  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Bh  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Ah  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 9  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
pop ebx  +
pop ebp  +
retn   +
push 2  +
push 1  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 0Bh  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push 7  +
push 1  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 2  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push 7  +
push 1  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 0Bh  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
pop ebx  +
pop ebp  +
retn   +
push 2  +
push 1  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 0Bh  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Bh  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
pop ebx  +
pop ebp  +
retn   +
push 0Bh  +
push 0  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 2  +
push 0  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 9  +
push 3  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 2  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Bh  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
pop ebx  +
pop ebp  +
retn   +
push 0Bh  +
push 1  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 2  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Bh  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 2  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
pop ebx  +
pop ebp  +
retn   +
push 0Ah  +
push 1  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 3  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 2  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 2  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 3  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Ah  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Bh  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Bh  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Ah  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
pop ebx  +
pop ebp  +
retn   +
push 2  +
push 1  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 0Bh  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push 2  +
push 1  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 2  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 3  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 5  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 6  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 6  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
pop ebx  +
pop ebp  +
retn   +
push 0Ah  +
push 1  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 3  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 2  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 2  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 3  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Ah  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Bh  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Bh  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Ah  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push 0Bh  +
push 2  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 0Eh  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Eh  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
pop ebx  +
pop ebp  +
retn   +
push 2  +
push 1  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 0Bh  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push 2  +
push 1  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 2  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 3  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 5  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 6  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 6  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push 6  +
push 3  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 0Bh  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
pop ebx  +
pop ebp  +
retn   +
push 4  +
push 6  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 3  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 2  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 2  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 3  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 4  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 6  +
push 3  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 6  +
push 4  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 8  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Ah  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Bh  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Bh  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Ah  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 9  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
pop ebx  +
pop ebp  +
retn   +
push 2  +
push 0  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 2  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push 2  +
push 3  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 0Bh  +
push 3  +
call sub_415EE0  +
add esp 0Ch +
pop ebx  +
pop ebp  +
retn   +
push 2  +
push 1  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 0Ah  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Bh  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Bh  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Ah  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 2  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
pop ebx  +
pop ebp  +
retn   +
push 2  +
push 1  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 0Bh  +
push 3  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Bh  +
push 4  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 2  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
pop ebx  +
pop ebp  +
retn   +
push 2  +
push 0  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 0Bh  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 5  +
push 3  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Bh  +
push 4  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 2  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
pop ebx  +
pop ebp  +
retn   +
push 2  +
push 1  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 3  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Ah  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Bh  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push 0Bh  +
push 1  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 0Ah  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 3  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 2  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
pop ebx  +
pop ebp  +
retn   +
push 2  +
push 0  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 7  +
push 3  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 2  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push 7  +
push 3  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 0Bh  +
push 3  +
call sub_415EE0  +
add esp 0Ch +
pop ebx  +
pop ebp  +
retn   +
push 2  +
push 1  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 2  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 4  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 9  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Bh  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Bh  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
pop ebx  +
pop ebp  +
retn   +
push 1  +
push 5  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 1  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Dh  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Dh  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
pop ebx  +
pop ebp  +
retn   +
push 1  +
push 0  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 0Ch  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
pop ebx  +
pop ebp  +
retn   +
push 1  +
push 2  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 1  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Dh  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Dh  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
pop ebx  +
pop ebp  +
retn   +
push 5  +
push 1  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 3  +
push 3  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 3  +
push 4  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 5  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
pop ebx  +
pop ebp  +
retn   +
push 0Ch  +
push 0  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 0Ch  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
pop ebx  +
pop ebp  +
retn   +
push 2  +
push 2  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 3  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 5  +
push 4  +
call sub_415EE0  +
add esp 0Ch +
pop ebx  +
pop ebp  +
retn   +
push 6  +
push 1  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 5  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 5  +
push 4  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 6  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Ah  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Bh  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push 0Ah  +
push 5  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 0Bh  +
push 4  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Bh  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Ah  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 9  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 8  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 8  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
pop ebx  +
pop ebp  +
retn   +
push 2  +
push 1  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 0Bh  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push 6  +
push 1  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 5  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 5  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 6  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Ah  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Bh  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Bh  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Ah  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
pop ebx  +
pop ebp  +
retn   +
push 6  +
push 6  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 5  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 5  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 6  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Ah  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Bh  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Bh  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Ah  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
pop ebx  +
pop ebp  +
retn   +
push 2  +
push 6  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 0Bh  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push 6  +
push 6  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 5  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 5  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 6  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Ah  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Bh  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Bh  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Ah  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
pop ebx  +
pop ebp  +
retn   +
push 8  +
push 1  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 8  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 6  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 5  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 5  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 6  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Ah  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Bh  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Bh  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Ah  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
pop ebx  +
pop ebp  +
retn   +
push 6  +
push 1  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 6  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push 0Bh  +
push 3  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 3  +
push 3  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 2  +
push 4  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 2  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 3  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
pop ebx  +
pop ebp  +
retn   +
push 6  +
push 6  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 5  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 5  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 6  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Ah  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Bh  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Bh  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Ah  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push 5  +
push 6  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 0Dh  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Eh  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Eh  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Dh  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
pop ebx  +
pop ebp  +
retn   +
push 2  +
push 1  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 0Bh  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push 6  +
push 1  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 5  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 5  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 6  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Bh  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
pop ebx  +
pop ebp  +
retn   +
push 2  +
push 4  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 1  +
push 4  +
call sub_415EE0  +
add esp 0Ch +
push 5  +
push 2  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 5  +
push 4  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Bh  +
push 4  +
call sub_415EE0  +
add esp 0Ch +
pop ebx  +
pop ebp  +
retn   +
push 2  +
push 5  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 1  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push 5  +
push 3  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 5  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Dh  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Eh  +
push 4  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Eh  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Dh  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
pop ebx  +
pop ebp  +
retn   +
push 2  +
push 1  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 0Bh  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push 9  +
push 1  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 9  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 6  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push 9  +
push 2  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 0Bh  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
pop ebx  +
pop ebp  +
retn   +
push 2  +
push 2  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 2  +
push 4  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Bh  +
push 4  +
call sub_415EE0  +
add esp 0Ch +
pop ebx  +
pop ebp  +
retn   +
push 0Bh  +
push 0  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 5  +
push 0  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 5  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 6  +
push 3  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Bh  +
push 3  +
call sub_415EE0  +
add esp 0Ch +
push 6  +
push 3  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 5  +
push 4  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 5  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 6  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Bh  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
pop ebx  +
pop ebp  +
retn   +
push 0Bh  +
push 1  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 5  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push 6  +
push 1  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 5  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 5  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 6  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Bh  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
pop ebx  +
pop ebp  +
retn   +
push 6  +
push 1  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 5  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 5  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 6  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Ah  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Bh  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Bh  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Ah  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 6  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
pop ebx  +
pop ebp  +
retn   +
push 6  +
push 1  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 5  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 5  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 6  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Ah  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Bh  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Bh  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Ah  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 5  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Fh  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
pop ebx  +
pop ebp  +
retn   +
push 6  +
push 1  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 5  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 5  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 6  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Ah  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Bh  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Bh  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Ah  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 6  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push 5  +
push 6  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 0Fh  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
pop ebx  +
pop ebp  +
retn   +
push 0Bh  +
push 1  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 5  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push 6  +
push 1  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 5  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 5  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 6  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
pop ebx  +
pop ebp  +
retn   +
push 6  +
push 6  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 5  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 5  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 6  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 7  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 8  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 8  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 9  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Ah  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Bh  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Bh  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Ah  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
pop ebx  +
pop ebp  +
retn   +
push 5  +
push 1  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 5  +
push 4  +
call sub_415EE0  +
add esp 0Ch +
push 3  +
push 3  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 0Ah  +
push 3  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Bh  +
push 4  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Bh  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Ah  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
pop ebx  +
pop ebp  +
retn   +
push 5  +
push 6  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 0Bh  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push 0Ah  +
push 6  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 0Bh  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Bh  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Ah  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 5  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
pop ebx  +
pop ebp  +
retn   +
push 5  +
push 1  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 0Bh  +
push 4  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 5  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
pop ebx  +
pop ebp  +
retn   +
push 5  +
push 0  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 0Ah  +
push 0  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Bh  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Bh  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Ah  +
push 3  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 7  +
push 3  +
call sub_415EE0  +
add esp 0Ch +
push 0Ah  +
push 3  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 0Bh  +
push 4  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Bh  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Ah  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 5  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
pop ebx  +
pop ebp  +
retn   +
push 5  +
push 1  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 6  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Ah  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Bh  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push 0Bh  +
push 1  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 0Ah  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 6  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 5  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
pop ebx  +
pop ebp  +
retn   +
push 5  +
push 1  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 0Ch  +
push 4  +
call sub_415EE0  +
add esp 0Ch +
push 5  +
push 6  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 0Ch  +
push 4  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Fh  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Eh  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
pop ebx  +
pop ebp  +
retn   +
push 5  +
push 1  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 5  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Bh  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Bh  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
pop ebx  +
pop ebp  +
retn   +
push 1  +
push 6  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 1  +
push 4  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 2  +
push 3  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 6  +
push 3  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 7  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 7  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 7  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 8  +
push 3  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Ch  +
push 3  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Dh  +
push 4  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Dh  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
pop ebx  +
pop ebp  +
retn   +
push 1  +
push 3  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 0Ch  +
push 3  +
call sub_415EE0  +
add esp 0Ch +
pop ebx  +
pop ebp  +
retn   +
push 1  +
push 1  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 1  +
push 3  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 2  +
push 4  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 6  +
push 4  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 7  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 7  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 7  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 8  +
push 4  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Ch  +
push 4  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Dh  +
push 3  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Dh  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
pop ebx  +
pop ebp  +
retn   +
push 4  +
push 1  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 3  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 3  +
push 3  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 4  +
push 4  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 4  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 3  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
pop ebx  +
pop ebp  +
retn   +
***
push ebx  +
mov ebx [ebp+arg_4] +
mov eax [ebp+arg_0] +
add eax 0FFFFFFF0h +
cmp eax 6Fh +
ja loc_41BBDA  +
jmp ds:off_418699[eax*4]  +
push 5  +
push 2  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 5  +
push 4  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Bh  +
push 4  +
call sub_415EE0  +
add esp 0Ch +
pop ebx  +
pop ebp  +
retn   +
push 1  +
push 2  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 2  +
push 4  +
call sub_415EE0  +
add esp 0Ch +
pop ebx  +
pop ebp  +
retn   +
push 1  +
push 4  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 2  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
pop ebx  +
pop ebp  +
retn   +
push 2  +
push 2  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 1  +
push 3  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 2  +
push 4  +
call sub_415EE0  +
add esp 0Ch +
pop ebx  +
pop ebp  +
retn   +
push 2  +
push 1  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 1  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 2  +
push 4  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 1  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
pop ebx  +
pop ebp  +
retn   +
push 1  +
push 1  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 1  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
pop ebx  +
pop ebp  +
retn   +
push 1  +
push 1  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 2  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 2  +
push 4  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 1  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
pop ebx  +
pop ebp  +
retn   +
push 1  +
push 4  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 2  +
push 4  +
call sub_415EE0  +
add esp 0Ch +
pop ebx  +
pop ebp  +
retn   +
push 1  +
push 2  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 2  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
push 1  +
push 4  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 2  +
push 4  +
call sub_415EE0  +
add esp 0Ch +
pop ebx  +
pop ebp  +
retn   +
push 1  +
push 2  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 1  +
push 3  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 2  +
push 4  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 3  +
push 4  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 4  +
push 3  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 4  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 3  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 2  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 1  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
pop ebx  +
pop ebp  +
retn   +
push 0Bh  +
push 3  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 0Dh  +
push 3  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Dh  +
push 4  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Eh  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Fh  +
push 4  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Fh  +
push 3  +
call sub_415EE0  +
add esp 0Ch +
pop ebx  +
pop ebp  +
retn   +
push 1  +
push 3  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 2  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push 1  +
push 5  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 2  +
push 3  +
call sub_415EE0  +
add esp 0Ch +
pop ebx  +
pop ebp  +
retn   +
push 0Bh  +
push 4  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 0Dh  +
push 3  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Eh  +
push 3  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Eh  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
pop ebx  +
pop ebp  +
retn   +
push 1  +
push 2  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 2  +
push 3  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 1  +
push 4  +
call sub_415EE0  +
add esp 0Ch +
pop ebx  +
pop ebp  +
retn   +
push 0Eh  +
push 3  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 8  +
push 3  +
call sub_415EE0  +
add esp 0Ch +
push 5  +
push 3  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 5  +
push 3  +
call sub_415EE0  +
add esp 0Ch +
pop ebx  +
pop ebp  +
retn   +
push 6  +
push 6  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 5  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 5  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 6  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Ah  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Bh  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Bh  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Ah  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push 4  +
push 4  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 0Ch  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
pop ebx  +
pop ebp  +
retn   +
push 4  +
push 6  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 3  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 2  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 2  +
push 3  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 3  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 7  +
push 3  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Bh  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Ah  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Bh  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Ah  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push 7  +
push 1  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 7  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
pop ebx  +
pop ebp  +
retn   +
push 5  +
push 1  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 4  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 4  +
push 4  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 5  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 7  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 8  +
push 4  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 8  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 7  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 5  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push 3  +
push 0  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 4  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push 9  +
push 0  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 8  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push 3  +
push 6  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 4  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push 9  +
push 6  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 8  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
pop ebx  +
pop ebp  +
retn   +
push 2  +
push 0  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 7  +
push 3  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 2  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push 7  +
push 3  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 0Bh  +
push 3  +
call sub_415EE0  +
add esp 0Ch +
push 7  +
push 0  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 7  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push 9  +
push 0  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 9  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
pop ebx  +
pop ebp  +
retn   +
push 1  +
push 3  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 5  +
push 3  +
call sub_415EE0  +
add esp 0Ch +
push 7  +
push 3  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 0Bh  +
push 3  +
call sub_415EE0  +
add esp 0Ch +
pop ebx  +
pop ebp  +
retn   +
push 3  +
push 6  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 2  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 2  +
push 3  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 3  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 4  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 8  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 9  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Ah  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Ah  +
push 3  +
call sub_415EE0  +
add esp 0Ch +
push 6  +
push 4  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 6  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 7  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 8  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Ch  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Dh  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Eh  +
push 4  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Eh  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Dh  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
pop ebx  +
pop ebp  +
retn   +
push 4  +
push 0  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 3  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 3  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 4  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Ah  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Bh  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Bh  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Ah  +
push 0  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 4  +
push 0  +
call sub_415EE0  +
add esp 0Ch +
push 5  +
push 4  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 5  +
push 3  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 6  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 8  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 9  +
push 3  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 9  +
push 4  +
call sub_415EE0  +
add esp 0Ch +
pop ebx  +
pop ebp  +
retn   +
push 2  +
push 2  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 2  +
push 3  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 3  +
push 4  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 6  +
push 4  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 7  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push 6  +
push 4  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 7  +
push 3  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 7  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 6  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 5  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 4  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 4  +
push 4  +
call sub_415EE0  +
add esp 0Ch +
push 9  +
push 1  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 9  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
pop ebx  +
pop ebp  +
retn   +
push 5  +
push 4  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 8  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Bh  +
push 4  +
call sub_415EE0  +
add esp 0Ch +
push 5  +
push 6  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 8  +
push 3  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Bh  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
pop ebx  +
pop ebp  +
retn   +
push 5  +
push 1  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 5  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 9  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
pop ebx  +
pop ebp  +
retn   +
push 8  +
push 1  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 8  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
pop ebx  +
pop ebp  +
retn   +
push 4  +
push 0  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 3  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 3  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 4  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Ah  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Bh  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Bh  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Ah  +
push 0  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 4  +
push 0  +
call sub_415EE0  +
add esp 0Ch +
push 9  +
push 2  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 5  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 5  +
push 3  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 6  +
push 4  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 7  +
push 3  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 7  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 9  +
push 4  +
call sub_415EE0  +
add esp 0Ch +
pop ebx  +
pop ebp  +
retn   +
push 6  +
push 0  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 6  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push 9  +
push 3  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 3  +
push 3  +
call sub_415EE0  +
add esp 0Ch +
push 0Bh  +
push 0  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 0Bh  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
pop ebx  +
pop ebp  +
retn   +
push 3  +
push 2  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 2  +
push 3  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 2  +
push 4  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 3  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 4  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 8  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 8  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
pop ebx  +
pop ebp  +
retn   +
push 3  +
push 2  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 2  +
push 3  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 2  +
push 4  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 3  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 4  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 5  +
push 4  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 5  +
push 3  +
call sub_415EE0  +
add esp 0Ch +
push 5  +
push 4  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 6  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 7  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 8  +
push 4  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 8  +
push 3  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 7  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
pop ebx  +
pop ebp  +
retn   +
push 5  +
push 6  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 0Bh  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push 0Ah  +
push 6  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 0Bh  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Bh  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Ah  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 5  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push 0Ah  +
push 1  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 0Eh  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
pop ebx  +
pop ebp  +
retn   +
push 0Bh  +
push 6  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 2  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push 0Bh  +
push 4  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 2  +
push 4  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 2  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 3  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 4  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 5  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 5  +
push 4  +
call sub_415EE0  +
add esp 0Ch +
pop ebx  +
pop ebp  +
retn   +
push 6  +
push 4  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 6  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 7  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 7  +
push 4  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 6  +
push 4  +
call sub_415EE0  +
add esp 0Ch +
pop ebx  +
pop ebp  +
retn   +
push 3  +
push 2  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 2  +
push 3  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 8  +
push 3  +
call sub_415EE0  +
add esp 0Ch +
push 8  +
push 2  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 8  +
push 4  +
call sub_415EE0  +
add esp 0Ch +
pop ebx  +
pop ebp  +
retn   +
push 2  +
push 2  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 2  +
push 4  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 3  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 6  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 7  +
push 4  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 7  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 6  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 3  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 2  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
push 9  +
push 1  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 9  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
pop ebx  +
pop ebp  +
retn   +
push 5  +
push 1  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 8  +
push 4  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Bh  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push 5  +
push 3  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 8  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Bh  +
push 3  +
call sub_415EE0  +
add esp 0Ch +
pop ebx  +
pop ebp  +
retn   +
push 3  +
push 0  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 2  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 8  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push 8  +
push 0  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 8  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
push 0Bh  +
push 0  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 2  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push 0Dh  +
push 5  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 7  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Bh  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Bh  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
pop ebx  +
pop ebp  +
retn   +
push 3  +
push 0  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 2  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 8  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push 8  +
push 0  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 8  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
push 0Bh  +
push 0  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 2  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push 8  +
push 3  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 7  +
push 4  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 7  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 8  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 9  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Dh  +
push 3  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Dh  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
pop ebx  +
pop ebp  +
retn   +
push 2  +
push 0  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 1  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 1  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 2  +
push 3  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 3  +
push 3  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 4  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 4  +
push 0  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 4  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 5  +
push 3  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 6  +
push 3  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 7  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 7  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 6  +
push 0  +
call sub_415EE0  +
add esp 0Ch +
push 0Bh  +
push 0  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 2  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push 0Dh  +
push 5  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 7  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Bh  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Bh  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
pop ebx  +
pop ebp  +
retn   +
push 0Ch  +
push 6  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 0Dh  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Eh  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Eh  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Dh  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Ch  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 9  +
push 3  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 8  +
push 3  +
call sub_415EE0  +
add esp 0Ch +
push 4  +
push 3  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 4  +
push 3  +
call sub_415EE0  +
add esp 0Ch +
pop ebx  +
pop ebp  +
retn   +
push 0Bh  +
push 1  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 8  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 2  +
push 3  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 2  +
push 4  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 8  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Bh  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push 8  +
push 1  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 8  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push 0  +
push 2  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 1  +
push 4  +
call sub_415EE0  +
add esp 0Ch +
pop ebx  +
pop ebp  +
retn   +
push 0Bh  +
push 1  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 8  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 2  +
push 3  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 2  +
push 4  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 8  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Bh  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push 8  +
push 1  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 8  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push 0  +
push 5  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 1  +
push 3  +
call sub_415EE0  +
add esp 0Ch +
pop ebx  +
pop ebp  +
retn   +
push 0Bh  +
push 1  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 8  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 2  +
push 3  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 2  +
push 4  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 8  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Bh  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push 8  +
push 1  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 8  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push 1  +
push 2  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 0  +
push 3  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 1  +
push 4  +
call sub_415EE0  +
add esp 0Ch +
pop ebx  +
pop ebp  +
retn   +
push 0Bh  +
push 1  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 8  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 2  +
push 3  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 2  +
push 4  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 8  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Bh  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push 8  +
push 1  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 8  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push 1  +
push 1  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 0  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 1  +
push 4  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
pop ebx  +
pop ebp  +
retn   +
push 0Bh  +
push 1  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 8  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 2  +
push 3  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 2  +
push 4  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 8  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Bh  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push 8  +
push 1  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 8  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push 0  +
push 2  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 1  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
push 0  +
push 5  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 1  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
pop ebx  +
pop ebp  +
retn   +
push 0Bh  +
push 1  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 8  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 2  +
push 3  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 2  +
push 4  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 8  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Bh  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push 8  +
push 1  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 8  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push 0  +
push 3  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 0  +
push 4  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 1  +
push 4  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 1  +
push 3  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0  +
push 3  +
call sub_415EE0  +
add esp 0Ch +
pop ebx  +
pop ebp  +
retn   +
push 0Bh  +
push 1  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 8  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 2  +
push 3  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 2  +
push 4  +
call sub_415EE0  +
add esp 0Ch +
push 8  +
push 1  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 8  +
push 4  +
call sub_415EE0  +
add esp 0Ch +
push 2  +
push 4  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 0Bh  +
push 4  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Bh  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push 2  +
push 4  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 2  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push 6  +
push 4  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 6  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
pop ebx  +
pop ebp  +
retn   +
push 4  +
push 6  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 3  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 2  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 2  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 3  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Ah  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Bh  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Bh  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Ah  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 9  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push 0Bh  +
push 3  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 0Dh  +
push 3  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Dh  +
push 4  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Eh  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Fh  +
push 4  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Fh  +
push 3  +
call sub_415EE0  +
add esp 0Ch +
pop ebx  +
pop ebp  +
retn   +
push 2  +
push 1  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 0Bh  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Bh  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push 2  +
push 1  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 2  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push 6  +
push 1  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 6  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push 0  +
push 2  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 1  +
push 4  +
call sub_415EE0  +
add esp 0Ch +
pop ebx  +
pop ebp  +
retn   +
push 2  +
push 1  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 0Bh  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Bh  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push 2  +
push 1  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 2  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push 6  +
push 1  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 6  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push 1  +
push 3  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 0  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
pop ebx  +
pop ebp  +
retn   +
push 2  +
push 1  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 0Bh  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Bh  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push 2  +
push 1  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 2  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push 6  +
push 1  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 6  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push 1  +
push 2  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 0  +
push 3  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 1  +
push 4  +
call sub_415EE0  +
add esp 0Ch +
pop ebx  +
pop ebp  +
retn   +
push 2  +
push 1  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 0Bh  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Bh  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push 2  +
push 1  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 2  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push 6  +
push 1  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 6  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push 0  +
push 2  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 0  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
push 0  +
push 5  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 0  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
pop ebx  +
pop ebp  +
retn   +
push 2  +
push 1  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 2  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push 2  +
push 3  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 0Bh  +
push 3  +
call sub_415EE0  +
add esp 0Ch +
push 0Bh  +
push 1  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 0Bh  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push 0  +
push 2  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 1  +
push 4  +
call sub_415EE0  +
add esp 0Ch +
pop ebx  +
pop ebp  +
retn   +
push 2  +
push 1  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 2  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push 2  +
push 3  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 0Bh  +
push 3  +
call sub_415EE0  +
add esp 0Ch +
push 0Bh  +
push 1  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 0Bh  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push 1  +
push 2  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 0  +
push 4  +
call sub_415EE0  +
add esp 0Ch +
pop ebx  +
pop ebp  +
retn   +
push 2  +
push 1  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 2  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push 2  +
push 3  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 0Bh  +
push 3  +
call sub_415EE0  +
add esp 0Ch +
push 0Bh  +
push 1  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 0Bh  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push 1  +
push 2  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 0  +
push 3  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 1  +
push 4  +
call sub_415EE0  +
add esp 0Ch +
pop ebx  +
pop ebp  +
retn   +
push 2  +
push 1  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 2  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push 2  +
push 3  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 0Bh  +
push 3  +
call sub_415EE0  +
add esp 0Ch +
push 0Bh  +
push 1  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 0Bh  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push 0  +
push 2  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 0  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
push 0  +
push 4  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 0  +
push 4  +
call sub_415EE0  +
add esp 0Ch +
pop ebx  +
pop ebp  +
retn   +
push 2  +
push 1  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 0Bh  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Bh  +
push 4  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 9  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 4  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 2  +
push 4  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 2  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push 6  +
push 0  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 6  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
pop ebx  +
pop ebp  +
retn   +
push 0Bh  +
push 1  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 2  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Bh  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 2  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push 1  +
push 1  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 0  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 1  +
push 4  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
pop ebx  +
pop ebp  +
retn   +
push 0Ah  +
push 1  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 3  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 2  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 2  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 3  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Ah  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Bh  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Bh  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Ah  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push 0  +
push 2  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 1  +
push 4  +
call sub_415EE0  +
add esp 0Ch +
pop ebx  +
pop ebp  +
retn   +
push 0Ah  +
push 1  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 3  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 2  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 2  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 3  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Ah  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Bh  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Bh  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Ah  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push 1  +
push 3  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 0  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
pop ebx  +
pop ebp  +
retn   +
push 0Ah  +
push 1  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 3  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 2  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 2  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 3  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Ah  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Bh  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Bh  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Ah  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push 1  +
push 2  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 0  +
push 3  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 1  +
push 4  +
call sub_415EE0  +
add esp 0Ch +
pop ebx  +
pop ebp  +
retn   +
push 0Ah  +
push 1  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 3  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 2  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 2  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 3  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Ah  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Bh  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Bh  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Ah  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push 1  +
push 1  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 0  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 1  +
push 4  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
pop ebx  +
pop ebp  +
retn   +
push 0Ah  +
push 1  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 3  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 2  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 2  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 3  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Ah  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Bh  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Bh  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Ah  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push 0  +
push 2  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 1  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
push 0  +
push 5  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 1  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
pop ebx  +
pop ebp  +
retn   +
push 4  +
push 1  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 0Ah  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push 4  +
push 6  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 0Ah  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
pop ebx  +
pop ebp  +
retn   +
push 0Ah  +
push 1  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 3  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 2  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 2  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 3  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Ah  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Bh  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Bh  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Ah  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push 0Ch  +
push 0  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 1  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
pop ebx  +
pop ebp  +
retn   +
push 2  +
push 1  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 0Ah  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Bh  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Bh  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Ah  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 2  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push 0  +
push 2  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 1  +
push 4  +
call sub_415EE0  +
add esp 0Ch +
pop ebx  +
pop ebp  +
retn   +
push 2  +
push 1  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 0Ah  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Bh  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Bh  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Ah  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 2  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push 1  +
push 3  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 0  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
pop ebx  +
pop ebp  +
retn   +
push 2  +
push 1  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 0Ah  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Bh  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Bh  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Ah  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 2  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push 1  +
push 2  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 0  +
push 3  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 1  +
push 4  +
call sub_415EE0  +
add esp 0Ch +
pop ebx  +
pop ebp  +
retn   +
push 2  +
push 1  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 0Ah  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Bh  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Bh  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Ah  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 2  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push 0  +
push 2  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 1  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
push 0  +
push 5  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 1  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
pop ebx  +
pop ebp  +
retn   +
push 2  +
push 0  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 7  +
push 3  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 2  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push 7  +
push 3  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 0Bh  +
push 3  +
call sub_415EE0  +
add esp 0Ch +
push 1  +
push 2  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 0  +
push 4  +
call sub_415EE0  +
add esp 0Ch +
pop ebx  +
pop ebp  +
retn   +
push 7  +
push 1  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 7  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 8  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Ah  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Bh  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Bh  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 5  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Fh  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
pop ebx  +
pop ebp  +
retn   +
push 0Ch  +
push 1  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 3  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 2  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 2  +
push 4  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 3  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 4  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 6  +
push 3  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 6  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 7  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Ah  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Bh  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Bh  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
pop ebx  +
pop ebp  +
retn   +
push 6  +
push 1  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 5  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 5  +
push 4  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 6  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Ah  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Bh  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push 0Ah  +
push 5  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 0Bh  +
push 4  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Bh  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Ah  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 9  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 8  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 8  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push 2  +
push 2  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 3  +
push 4  +
call sub_415EE0  +
add esp 0Ch +
pop ebx  +
pop ebp  +
retn   +
push 6  +
push 1  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 5  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 5  +
push 4  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 6  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Ah  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Bh  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push 0Ah  +
push 5  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 0Bh  +
push 4  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Bh  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Ah  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 9  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 8  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 8  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push 3  +
push 3  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 2  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
pop ebx  +
pop ebp  +
retn   +
push 6  +
push 1  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 5  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 5  +
push 4  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 6  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Ah  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Bh  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push 0Ah  +
push 5  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 0Bh  +
push 4  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Bh  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Ah  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 9  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 8  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 8  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push 3  +
push 2  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 2  +
push 3  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 3  +
push 4  +
call sub_415EE0  +
add esp 0Ch +
pop ebx  +
pop ebp  +
retn   +
push 6  +
push 1  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 5  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 5  +
push 4  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 6  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Ah  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Bh  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push 0Ah  +
push 5  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 0Bh  +
push 4  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Bh  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Ah  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 9  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 8  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 8  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push 3  +
push 1  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 2  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 3  +
push 4  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 2  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
pop ebx  +
pop ebp  +
retn   +
push 6  +
push 1  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 5  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 5  +
push 4  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 6  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Ah  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Bh  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push 0Ah  +
push 5  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 0Bh  +
push 4  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Bh  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Ah  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 9  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 8  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 8  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push 2  +
push 2  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 3  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
push 2  +
push 5  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 3  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
pop ebx  +
pop ebp  +
retn   +
push 6  +
push 1  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 5  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 5  +
push 4  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 6  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Ah  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Bh  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push 0Ah  +
push 5  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 0Bh  +
push 4  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Bh  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Ah  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 9  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 8  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 8  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push 1  +
push 2  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 1  +
push 3  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 2  +
push 4  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 3  +
push 4  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 4  +
push 3  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 4  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 3  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 2  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 1  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
pop ebx  +
pop ebp  +
retn   +
push 6  +
push 0  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 5  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 5  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 6  +
push 3  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Ah  +
push 3  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Bh  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Bh  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Ah  +
push 0  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 9  +
push 0  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 8  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 8  +
push 3  +
call sub_415EE0  +
add esp 0Ch +
push 8  +
push 3  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 8  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 6  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 5  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 5  +
push 4  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 6  +
push 3  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Ah  +
push 3  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Bh  +
push 4  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Bh  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Ah  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
pop ebx  +
pop ebp  +
retn   +
push 6  +
push 6  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 5  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 5  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 6  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Ah  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Bh  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Bh  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Ah  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push 0Bh  +
push 3  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 0Dh  +
push 3  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Dh  +
push 4  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Eh  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Fh  +
push 4  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Fh  +
push 3  +
call sub_415EE0  +
add esp 0Ch +
pop ebx  +
pop ebp  +
retn   +
push 8  +
push 1  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 8  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 6  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 5  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 5  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 6  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Ah  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Bh  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Bh  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Ah  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push 2  +
push 2  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 3  +
push 4  +
call sub_415EE0  +
add esp 0Ch +
pop ebx  +
pop ebp  +
retn   +
push 8  +
push 1  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 8  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 6  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 5  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 5  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 6  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Ah  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Bh  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Bh  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Ah  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push 3  +
push 3  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 2  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
pop ebx  +
pop ebp  +
retn   +
push 8  +
push 1  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 8  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 6  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 5  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 5  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 6  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Ah  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Bh  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Bh  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Ah  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push 3  +
push 2  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 2  +
push 3  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 3  +
push 4  +
call sub_415EE0  +
add esp 0Ch +
pop ebx  +
pop ebp  +
retn   +
push 8  +
push 1  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 8  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 6  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 5  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 5  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 6  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Ah  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Bh  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Bh  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Ah  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push 2  +
push 2  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 3  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
push 2  +
push 5  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 3  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
pop ebx  +
pop ebp  +
retn   +
push 5  +
push 2  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 5  +
push 4  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Bh  +
push 4  +
call sub_415EE0  +
add esp 0Ch +
push 2  +
push 3  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 3  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
pop ebx  +
pop ebp  +
retn   +
push 5  +
push 2  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 5  +
push 4  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Bh  +
push 4  +
call sub_415EE0  +
add esp 0Ch +
push 3  +
push 3  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 2  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
pop ebx  +
pop ebp  +
retn   +
push 5  +
push 2  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 5  +
push 4  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Bh  +
push 4  +
call sub_415EE0  +
add esp 0Ch +
push 3  +
push 3  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 2  +
push 4  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 3  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
pop ebx  +
pop ebp  +
retn   +
push 5  +
push 2  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 5  +
push 4  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Bh  +
push 4  +
call sub_415EE0  +
add esp 0Ch +
push 2  +
push 3  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 3  +
push 3  +
call sub_415EE0  +
add esp 0Ch +
push 2  +
push 5  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 3  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
pop ebx  +
pop ebp  +
retn   +
push 6  +
push 1  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 5  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 5  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 6  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Ah  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Bh  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Bh  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Ah  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 6  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push 5  +
push 5  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 2  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push 4  +
push 1  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 2  +
push 3  +
call sub_415EE0  +
add esp 0Ch +
pop ebx  +
pop ebp  +
retn   +
push 0Bh  +
push 1  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 5  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push 6  +
push 1  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 5  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 5  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 6  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Bh  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push 3  +
push 2  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 2  +
push 3  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 3  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 2  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
pop ebx  +
pop ebp  +
retn   +
push 6  +
push 1  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 5  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 5  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 6  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Ah  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Bh  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Bh  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Ah  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 6  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push 2  +
push 2  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 3  +
push 4  +
call sub_415EE0  +
add esp 0Ch +
pop ebx  +
pop ebp  +
retn   +
push 6  +
push 1  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 5  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 5  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 6  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Ah  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Bh  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Bh  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Ah  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 6  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push 3  +
push 3  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 2  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
pop ebx  +
pop ebp  +
retn   +
push 6  +
push 1  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 5  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 5  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 6  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Ah  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Bh  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Bh  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Ah  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 6  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push 3  +
push 2  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 2  +
push 3  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 3  +
push 4  +
call sub_415EE0  +
add esp 0Ch +
pop ebx  +
pop ebp  +
retn   +
push 6  +
push 1  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 5  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 5  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 6  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Ah  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Bh  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Bh  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Ah  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 6  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push 3  +
push 2  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 2  +
push 3  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 3  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 2  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
pop ebx  +
pop ebp  +
retn   +
push 6  +
push 1  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 5  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 5  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 6  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Ah  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Bh  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Bh  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Ah  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 6  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push 2  +
push 2  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 3  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
push 2  +
push 5  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 3  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
pop ebx  +
pop ebp  +
retn   +
push 7  +
push 1  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 7  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push 5  +
push 3  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 5  +
push 3  +
call sub_415EE0  +
add esp 0Ch +
push 9  +
push 3  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 9  +
push 3  +
call sub_415EE0  +
add esp 0Ch +
pop ebx  +
pop ebp  +
retn   +
push 6  +
push 1  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 5  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 5  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 6  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Ah  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Bh  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Bh  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Ah  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 6  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push 0Ch  +
push 0  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 4  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
pop ebx  +
pop ebp  +
retn   +
push 5  +
push 6  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 0Bh  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push 0Ah  +
push 6  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 0Bh  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Bh  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Ah  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 5  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push 2  +
push 2  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 3  +
push 4  +
call sub_415EE0  +
add esp 0Ch +
pop ebx  +
pop ebp  +
retn   +
push 5  +
push 6  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 0Bh  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push 0Ah  +
push 6  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 0Bh  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Bh  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Ah  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 5  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push 3  +
push 3  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 2  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
pop ebx  +
pop ebp  +
retn   +
push 5  +
push 6  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 0Bh  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push 0Ah  +
push 6  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 0Bh  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Bh  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Ah  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 5  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push 3  +
push 2  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 2  +
push 3  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 3  +
push 4  +
call sub_415EE0  +
add esp 0Ch +
pop ebx  +
pop ebp  +
retn   +
push 5  +
push 6  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 0Bh  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push 0Ah  +
push 6  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 0Bh  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Bh  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Ah  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 5  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push 2  +
push 2  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 3  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
push 2  +
push 5  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 3  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
pop ebx  +
pop ebp  +
retn   +
push 5  +
push 1  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 0Ch  +
push 4  +
call sub_415EE0  +
add esp 0Ch +
push 5  +
push 6  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 0Ch  +
push 4  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Fh  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Eh  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push 3  +
push 2  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 2  +
push 4  +
call sub_415EE0  +
add esp 0Ch +
pop ebx  +
pop ebp  +
retn   +
push 2  +
push 1  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 5  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 5  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 6  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Ah  +
push 6  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Bh  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Bh  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 5  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Fh  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
pop ebx  +
pop ebp  +
retn   +
push 5  +
push 1  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 0Ch  +
push 4  +
call sub_415EE0  +
add esp 0Ch +
push 5  +
push 6  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 0Ch  +
push 4  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Fh  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
push ebx  +
push 0Eh  +
push 1  +
call sub_415EE0  +
add esp 0Ch +
push 2  +
push 2  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 3  +
push 2  +
call sub_415EE0  +
add esp 0Ch +
push 2  +
push 5  +
call sub_415EA4  +
add esp 8 +
push ebx  +
push 3  +
push 5  +
call sub_415EE0  +
add esp 0Ch +
pop ebx  +
pop ebp  +
retn   +
***
push ebx  +
add esp 0FFFFFFE8h +
mov eax dword_4CDD38 +
test eax eax +
push ebx  +
push esi  +
push edi  +
mov ebx [ebp+arg_0] +
jz loc_41BF4C  +
mov edx dword_4CDD3C +
mov ecx dword_4CDD40 +
imul ecx dword_4CDD34 +
imul edx eax +
cmp edx ecx +
jg loc_41BF4C  +
xor eax eax +
mov edx dword_4EADA8 +
mov [ebp+var_C] eax +
mov [ebp+var_10] eax +
mov [ebp+var_4] edx +
mov ecx dword_4EADAC +
mov [ebp+var_8] ecx +
mov edi eax +
mov eax [ebp+arg_4] +
xor edx edx +
mov [ebp+var_14] eax +
mov [ebp+var_18] edx +
mov dword_4CDD44 1 +
jmp loc_41BF12  +
mov eax [ebp+var_C] +
mov ecx dword_4CDD34 +
shl eax 3 +
mov esi dword_4CDD38 +
imul  ecx +
cdq   +
idiv  esi +
add eax [ebp+var_4] +
mov dword_4EADA8 eax +
mov eax edi +
shl eax 4 +
imul  ecx +
cdq   +
idiv  esi +
add eax [ebp+var_8] +
mov dword_4EADAC eax +
mov eax edi +
shl eax 4 +
add eax 10h +
imul  ecx +
cdq   +
idiv  esi +
add eax [ebp+var_8] +
cmp eax dword_4EB630 +
jge loc_41BF4C  +
movsx eax byte ptr [ebx] +
add eax 0FFFFFFF9h +
cmp eax 6 +
ja loc_41BEB2  +
jmp ds:off_41BD14[eax*4]  +
xor ecx ecx +
inc edi  +
mov [ebp+var_C] ecx +
jmp loc_41BF05  +
add [ebp+var_C] 8 +
jmp loc_41BF05  +
push offset format  +
call _printf  +
pop ecx  +
push offset stru_4E782C  +
call _fflush  +
pop ecx  +
jmp loc_41BF05  +
dec [ebp+var_C]  +
jmp loc_41BF05  +
inc ebx  +
mov al [ebx] +
test al al +
jz loc_41BF4C  +
cmp al 75h +
jnz loc_41BD82  +
mov [ebp+var_18] 1 +
jmp loc_41BE84  +
cmp al 6Eh +
jnz loc_41BD9A  +
xor edx edx +
mov dword_4CDD44 1 +
mov [ebp+var_18] edx +
jmp loc_41BE84  +
cmp al 62h +
jnz loc_41BDAD  +
mov dword_4CDD44 3 +
jmp loc_41BE84  +
cmp al 42h +
jnz loc_41BDC0  +
mov dword_4CDD44 4 +
jmp loc_41BE84  +
cmp al 69h +
jnz loc_41BE5F  +
inc ebx  +
movsx eax byte ptr [ebx] +
test eax eax +
jz loc_41BF4C  +
inc ebx  +
mov ecx eax +
sub ecx 30h +
movsx eax byte ptr [ebx] +
test eax eax +
jz loc_41BF4C  +
mov edx ecx +
inc ebx  +
add edx edx +
sub eax 30h +
lea edx [edx+edx*4] +
add edx eax +
movsx eax byte ptr [ebx] +
test eax eax +
mov ecx edx +
jz loc_41BF4C  +
mov edx ecx +
add edx edx +
lea edx [edx+edx*4] +
sub eax 30h +
add edx eax +
mov ecx edx +
mov eax dword_4EADAC +
cmp eax dword_4EB62C +
jl loc_41BE5A  +
mov edx dword_4EADA8 +
cmp edx dword_4EB624 +
jl loc_41BE5A  +
mov eax [ebp+var_C] +
shl eax 3 +
add eax 8 +
imul  dword_4CDD34 +
cdq   +
idiv  dword_4CDD38 +
add eax [ebp+var_4] +
cmp eax dword_4EB628 +
jge loc_41BE5A  +
mov eax [ebp+var_18] +
push eax  +
mov edx [ebp+var_14] +
push edx  +
push ecx  +
call sub_41BBE0  +
add esp 0Ch +
inc [ebp+var_C]  +
jmp loc_41BE84  +
movsx ecx byte ptr [ebx] +
inc ebx  +
sub ecx 30h +
mov [ebp+var_14] ecx +
movsx eax byte ptr [ebx] +
test eax eax +
jz loc_41BF4C  +
mov edx [ebp+var_14] +
add edx edx +
lea edx [edx+edx*4] +
sub eax 30h +
add edx eax +
mov [ebp+var_14] edx +
cmp [ebp+var_14] 0 +
jge loc_41BE90  +
mov ecx [ebp+arg_4] +
mov [ebp+var_14] ecx +
mov eax [ebp+var_14] +
cmp eax dword_4D4BC8 +
jl loc_41BEA1  +
mov edx [ebp+arg_4] +
mov [ebp+var_14] edx +
cmp dword_4D4C30 0 +
jnz loc_41BF05  +
mov ecx [ebp+arg_4] +
mov [ebp+var_14] ecx +
jmp loc_41BF05  +
mov eax dword_4EADAC +
cmp eax dword_4EB62C +
jl loc_41BF02  +
mov edx dword_4EADA8 +
cmp edx dword_4EB624 +
jl loc_41BF02  +
mov eax [ebp+var_C] +
shl eax 3 +
add eax 8 +
imul  dword_4CDD34 +
cdq   +
idiv  dword_4CDD38 +
add eax [ebp+var_4] +
cmp eax dword_4EB628 +
jge loc_41BF02  +
mov ecx [ebp+var_18] +
push ecx  +
mov eax [ebp+var_14] +
push eax  +
movsx edx byte ptr [ebx] +
push edx  +
call sub_41BBE0  +
add esp 0Ch +
inc [ebp+var_C]  +
inc [ebp+var_10]  +
cmp [ebp+var_10] 4E20h +
jg loc_41BF4C  +
inc ebx  +
cmp byte ptr [ebx] 0 +
jnz loc_41BCB1  +
mov eax [ebp+var_C] +
mov ecx dword_4CDD34 +
shl eax 3 +
mov ebx dword_4CDD38 +
imul  ecx +
cdq   +
idiv  ebx +
add eax [ebp+var_4] +
mov dword_4EADA8 eax +
mov eax edi +
shl eax 4 +
imul  ecx +
cdq   +
idiv  ebx +
add eax [ebp+var_8] +
mov dword_4EADAC eax +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
push ebx  +
push esi  +
push edi  +
mov edi 1 +
xor eax eax +
mov edx eax +
mov esi eax +
mov eax [ebp+arg_0] +
jmp loc_41C10F  +
movsx ecx cl +
add ecx 0FFFFFFF9h +
cmp ecx 6 +
ja loc_41C10D  +
jmp ds:off_41BF83[ecx*4]  +
inc edi  +
cmp esi edx +
jge loc_41BFA6  +
mov esi edx +
xor edx edx +
jmp loc_41C10E  +
add edx 8 +
jmp loc_41C10E  +
dec edx  +
jmp loc_41C10E  +
inc eax  +
mov cl [eax] +
test cl cl +
jnz loc_41BFF7  +
cmp esi edx +
jge loc_41BFC8  +
mov esi edx +
mov eax esi +
mov ecx dword_4CDD34 +
shl eax 3 +
mov ebx dword_4CDD38 +
imul  ecx +
cdq   +
idiv  ebx +
mov dword_4EADA0 eax +
mov eax edi +
shl eax 4 +
imul  ecx +
cdq   +
idiv  ebx +
mov dword_4EADA4 eax +
jmp loc_41C149  +
cmp cl 75h +
jz loc_41C10E  +
cmp cl 6Eh +
jz loc_41C10E  +
cmp cl 62h +
jz loc_41C10E  +
cmp cl 42h +
jz loc_41C10E  +
cmp cl 69h +
jnz loc_41C0D5  +
inc eax  +
cmp byte ptr [eax] 0 +
jnz loc_41C05F  +
cmp esi edx +
jge loc_41C030  +
mov esi edx +
mov eax esi +
mov ecx dword_4CDD34 +
shl eax 3 +
mov ebx dword_4CDD38 +
imul  ecx +
cdq   +
idiv  ebx +
mov dword_4EADA0 eax +
mov eax edi +
shl eax 4 +
imul  ecx +
cdq   +
idiv  ebx +
mov dword_4EADA4 eax +
jmp loc_41C149  +
inc eax  +
cmp byte ptr [eax] 0 +
jnz loc_41C09A  +
cmp esi edx +
jge loc_41C06B  +
mov esi edx +
mov eax esi +
mov ecx dword_4CDD34 +
shl eax 3 +
mov ebx dword_4CDD38 +
imul  ecx +
cdq   +
idiv  ebx +
mov dword_4EADA0 eax +
mov eax edi +
shl eax 4 +
imul  ecx +
cdq   +
idiv  ebx +
mov dword_4EADA4 eax +
jmp loc_41C149  +
inc eax  +
cmp byte ptr [eax] 0 +
jnz loc_41C0D2  +
cmp esi edx +
jge loc_41C0A6  +
mov esi edx +
mov eax esi +
mov ecx dword_4CDD34 +
shl eax 3 +
mov ebx dword_4CDD38 +
imul  ecx +
cdq   +
idiv  ebx +
mov dword_4EADA0 eax +
mov eax edi +
shl eax 4 +
imul  ecx +
cdq   +
idiv  ebx +
mov dword_4EADA4 eax +
jmp loc_41C149  +
inc edx  +
jmp loc_41C10E  +
inc eax  +
cmp byte ptr [eax] 0 +
jnz loc_41C10E  +
cmp esi edx +
jge loc_41C0E1  +
mov esi edx +
mov eax esi +
mov ecx dword_4CDD34 +
shl eax 3 +
mov ebx dword_4CDD38 +
imul  ecx +
cdq   +
idiv  ebx +
mov dword_4EADA0 eax +
mov eax edi +
shl eax 4 +
imul  ecx +
cdq   +
idiv  ebx +
mov dword_4EADA4 eax +
jmp loc_41C149  +
inc edx  +
inc eax  +
mov cl [eax] +
test cl cl +
jnz loc_41BF6D  +
cmp esi edx +
jge loc_41C11F  +
mov esi edx +
mov eax esi +
mov ecx dword_4CDD34 +
shl eax 3 +
mov ebx dword_4CDD38 +
imul  ecx +
cdq   +
idiv  ebx +
mov dword_4EADA0 eax +
mov eax edi +
shl eax 4 +
imul  ecx +
cdq   +
idiv  ebx +
mov dword_4EADA4 eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
mov eax [ebp+arg_0] +
mov edx [ebp+arg_4] +
mov dword_4EADA8 eax +
mov dword_4EADAC edx +
pop ebp  +
retn   +
***
mov eax [ebp+arg_0] +
mov edx [ebp+arg_4] +
mov dword_4CDD34 eax +
mov dword_4CDD38 edx +
pop ebp  +
retn   +
***
mov ecx dword_4EADE4 +
push ebx  +
mov edx dword_4EADD8 +
mov ebx dword_4EADB8 +
sub edx ecx +
push esi  +
mov eax dword_4EADF0 +
mov esi edx +
sub eax ebx +
imul esi eax +
mov dword_4EAE0C esi +
mov esi dword_4EADC0 +
imul eax esi +
shl edx 2 +
lea edx [edx+edx*4] +
lea edx [edx+edx*4] +
sub eax edx +
mov edx ecx +
mov dword_4EAE10 eax +
mov eax ebx +
sub edx dword_4EADD4 +
sub eax dword_4EADEC +
mov ecx edx +
imul ecx eax +
imul eax esi +
shl edx 2 +
mov dword_4EAE04 ecx +
lea edx [edx+edx*4] +
lea edx [edx+edx*4] +
sub eax edx +
mov dword_4EAE08 eax +
mov eax dword_4EADE0 +
mov ecx dword_4EADF8 +
sub ecx dword_4EADBC +
sub eax dword_4EADE8 +
imul  ecx +
mov dword_4EAE1C eax +
mov eax dword_4EADF8 +
sub eax dword_4EADBC +
imul  dword_4EADC0 +
mov edx dword_4EADE0 +
sub edx dword_4EADE8 +
mov ecx edx +
shl ecx 2 +
lea ecx [ecx+ecx*4] +
lea ecx [ecx+ecx*4] +
sub eax ecx +
mov dword_4EAE20 eax +
mov eax dword_4EADE8 +
mov edx dword_4EADBC +
sub edx dword_4EADF4 +
sub eax dword_4EADDC +
imul  edx +
mov dword_4EAE14 eax +
mov ecx dword_4EADBC +
mov eax dword_4EADE8 +
sub ecx dword_4EADF4 +
sub eax dword_4EADDC +
imul ecx dword_4EADC0 +
mov edx eax +
shl edx 2 +
lea edx [edx+edx*4] +
lea edx [edx+edx*4] +
sub ecx edx +
mov dword_4EAE18 ecx +
cmp dword_4EAE0C 0 +
jnz loc_41C29E  +
mov dword_4EAE0C 1 +
cmp dword_4EAE04 0 +
jnz loc_41C2B1  +
mov dword_4EAE04 1 +
cmp dword_4EAE1C 0 +
jnz loc_41C2C4  +
mov dword_4EAE1C 1 +
cmp dword_4EAE14 0 +
jnz loc_41C2D7  +
mov dword_4EAE14 1 +
cmp dword_4EAE10 0 +
jnz loc_41C2EA  +
mov dword_4EAE10 1 +
cmp dword_4EAE08 0 +
jnz loc_41C2FD  +
mov dword_4EAE08 1 +
cmp dword_4EAE20 0 +
jnz loc_41C310  +
mov dword_4EAE20 1 +
cmp dword_4EAE18 0 +
jnz loc_41C323  +
mov dword_4EAE18 1 +
call sub_41EE28  +
cmp dword_4CDD88 0 +
jz loc_41C3C4  +
mov esi dword_4EADF0 +
inc esi  +
cmp esi 4E20h +
jle loc_41C349  +
mov esi 4E20h +
xor ebx ebx +
cmp esi ebx +
jle loc_41C35F  +
mov eax dword_4CDD88 +
mov word ptr [eax+ebx*2] 0 +
inc ebx  +
cmp esi ebx +
jg loc_41C34F  +
mov eax dword_4EADD4 +
cmp eax dword_4EADD8 +
jge loc_41C395  +
mov ebx eax +
jmp loc_41C38D  +
push ebx  +
call sub_41CCB4  +
pop ecx  +
test eax eax +
jl loc_41C38C  +
cmp eax 4E20h +
jge loc_41C38C  +
mov edx dword_4CDD88 +
mov [edx+eax*2] bx +
inc ebx  +
cmp ebx dword_4EADD8 +
jle loc_41C370  +
mov eax dword_4CDD88 +
xor ebx ebx +
cmp esi ebx +
mov ax [eax] +
jle loc_41C3C4  +
mov edx dword_4CDD88 +
cmp word ptr [edx+ebx*2] 0 +
jnz loc_41C3B6  +
mov [edx+ebx*2] ax +
jmp loc_41C3BF  +
mov eax dword_4CDD88 +
mov ax [eax+ebx*2] +
inc ebx  +
cmp esi ebx +
jg loc_41C3A3  +
cmp dword_4CDD8C 0 +
jz loc_41C460  +
mov esi dword_4EADF8 +
inc esi  +
cmp esi 4E20h +
jle loc_41C3E5  +
mov esi 4E20h +
xor ebx ebx +
cmp esi ebx +
jle loc_41C3FB  +
mov eax dword_4CDD8C +
mov word ptr [eax+ebx*2] 0 +
inc ebx  +
cmp esi ebx +
jg loc_41C3EB  +
mov eax dword_4EADDC +
cmp eax dword_4EADE0 +
jge loc_41C431  +
mov ebx eax +
jmp loc_41C429  +
push ebx  +
call sub_41CD54  +
pop ecx  +
test eax eax +
jl loc_41C428  +
cmp eax 4E20h +
jge loc_41C428  +
mov edx dword_4CDD8C +
mov [edx+eax*2] bx +
inc ebx  +
cmp ebx dword_4EADE0 +
jle loc_41C40C  +
mov eax dword_4CDD8C +
xor ebx ebx +
cmp esi ebx +
mov ax [eax] +
jle loc_41C460  +
mov edx dword_4CDD8C +
cmp word ptr [edx+ebx*2] 0 +
jnz loc_41C452  +
mov [edx+ebx*2] ax +
jmp loc_41C45B  +
mov eax dword_4CDD8C +
mov ax [eax+ebx*2] +
inc ebx  +
cmp esi ebx +
jg loc_41C43F  +
xor edx edx +
xor ecx ecx +
mov dword_4EADC4 edx +
mov dword_4EADC8 4E1Fh +
mov dword_4EADCC ecx +
mov dword_4EADD0 4E1Fh +
pop esi  +
pop ebx  +
retn   +
***
push ebx  +
push esi  +
push edi  +
mov ebx [ebp+arg_C] +
mov ecx [ebp+arg_8] +
mov edx [ebp+arg_4] +
mov eax [ebp+arg_0] +
test eax eax +
jnz loc_41C4AA  +
test edx edx +
jnz loc_41C4AA  +
test ecx ecx +
jnz loc_41C4AA  +
test ebx ebx +
jz loc_41C4C1  +
mov dword_4EADD4 eax +
mov dword_4EADD8 edx +
mov dword_4EADDC ecx +
mov dword_4EADE0 ebx +
xor ecx ecx +
xor ebx ebx +
mov dword_4EADEC ecx +
mov eax [ebp+arg_10] +
mov edi dword_4EC3B0 +
mov edx [ebp+arg_14] +
add edi dword_4EBD7C +
push ecx  +
mov dword_4EADF0 edi +
mov dword_4EADF4 ebx +
mov esi dword_4EC3B4 +
add esi dword_4EBD80 +
mov dword_4EADF8 esi +
mov dword_4EADB8 eax +
mov dword_4EADBC edx +
mov eax dword_4EADD8 +
mov edx dword_4EADB8 +
sub eax dword_4EADD4 +
sub edx ecx +
imul  edx +
mov edx edi +
sub edx ecx +
mov ecx edx +
cdq   +
idiv  ecx +
mov dword_4EADE4 eax +
pop ecx  +
mov eax dword_4EADE0 +
mov edx dword_4EADBC +
sub eax dword_4EADDC +
sub edx ebx +
imul  edx +
mov edx esi +
push ecx  +
sub edx ebx +
mov ecx edx +
cdq   +
idiv  ecx +
mov dword_4EADE8 eax +
pop ecx  +
mov eax dword_4EADD8 +
cmp eax dword_4EADE4 +
jg loc_41C56A  +
mov eax dword_4EADD8 +
add eax 0FFFFFFFBh +
mov dword_4EADE4 eax +
mov edx dword_4EADD4 +
cmp edx dword_4EADE4 +
jl loc_41C585  +
mov eax dword_4EADD4 +
add eax 5 +
mov dword_4EADE4 eax +
mov edx dword_4EADD4 +
add edx 5 +
cmp edx dword_4EADD8 +
jnz loc_41C5A3  +
mov eax dword_4EADD4 +
add eax 2 +
mov dword_4EADE4 eax +
mov edx dword_4EADE8 +
cmp edx dword_4EADE0 +
jl loc_41C5BE  +
mov eax dword_4EADE0 +
add eax 0FFFFFFFBh +
mov dword_4EADE8 eax +
mov edx dword_4EADE8 +
cmp edx dword_4EADDC +
jg loc_41C5D9  +
mov eax dword_4EADDC +
add eax 5 +
mov dword_4EADE8 eax +
mov edx dword_4EADDC +
add edx 5 +
cmp edx dword_4EADE0 +
jnz loc_41C5F7  +
mov eax dword_4EADDC +
add eax 2 +
mov dword_4EADE8 eax +
cmp edi dword_4EADB8 +
jg loc_41C60E  +
mov edx dword_4EADF0 +
add edx 0FFFFFFFBh +
mov dword_4EADB8 edx +
cmp ecx dword_4EADB8 +
jl loc_41C620  +
mov eax ecx +
add eax 5 +
mov dword_4EADB8 eax +
mov edx ecx +
add edx 5 +
cmp edi edx +
jnz loc_41C632  +
add ecx 2 +
mov dword_4EADB8 ecx +
cmp esi dword_4EADBC +
jg loc_41C645  +
mov ecx esi +
add ecx 0FFFFFFFBh +
mov dword_4EADBC ecx +
cmp ebx dword_4EADBC +
jl loc_41C657  +
mov eax ebx +
add eax 5 +
mov dword_4EADBC eax +
mov edx ebx +
add edx 5 +
cmp esi edx +
jnz loc_41C669  +
add ebx 2 +
mov dword_4EADBC ebx +
xor ecx ecx +
xor eax eax +
mov dword_4EB624 ecx +
mov dword_4EB628 7FFFFFFFh +
mov dword_4EB62C eax +
mov dword_4EB630 7FFFFFFFh +
call sub_41C180  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
retn   +
***
add esp 0FFFFFFF8h +
mov eax dword_4EADDC +
mov edx dword_4EADE0 +
push ebx  +
push esi  +
push edi  +
mov [ebp+var_4] eax +
mov [ebp+var_8] edx +
mov ecx [ebp+arg_0] +
mov edi dword_4EADD8 +
mov esi dword_4EADD4 +
mov dword_4EADD4 ecx +
mov eax [ebp+arg_4] +
mov edx [ebp+arg_8] +
mov dword_4EADD8 eax +
mov dword_4EADDC edx +
mov ecx [ebp+arg_C] +
xor ebx ebx +
mov dword_4EADE0 ecx +
call sub_41C740  +
add ebx eax +
cmp esi dword_4EADD4 +
jz loc_41C701  +
mov eax 1 +
jmp loc_41C736  +
cmp edi dword_4EADD8 +
jz loc_41C710  +
mov eax 1 +
jmp loc_41C736  +
mov edx [ebp+var_4] +
cmp edx dword_4EADDC +
jz loc_41C722  +
mov eax 1 +
jmp loc_41C736  +
mov edx [ebp+var_8] +
cmp edx dword_4EADE0 +
jz loc_41C734  +
mov eax 1 +
jmp loc_41C736  +
mov eax ebx +
pop edi  +
pop esi  +
pop ebx  +
pop ecx  +
pop ecx  +
pop ebp  +
retn   +
***
push edi  +
push ebp  +
push ecx  +
mov eax dword_4EADE8 +
mov ebx dword_4EADD8 +
mov [esp+4+var_4] eax +
mov ecx dword_4EADEC +
mov esi dword_4EADD4 +
mov eax ebx +
mov edx dword_4EADB8 +
sub edx ecx +
sub eax esi +
imul  edx +
mov edx dword_4EADF0 +
mov ebp dword_4EADE4 +
sub edx ecx +
mov ecx edx +
cdq   +
idiv  ecx +
mov dword_4EADE4 eax +
mov edi dword_4EADE0 +
mov edx dword_4EADBC +
sub edx dword_4EADF4 +
mov ecx dword_4EADDC +
mov eax edi +
push ecx  +
sub eax ecx +
imul  edx +
mov edx dword_4EADF8 +
sub edx dword_4EADF4 +
mov ecx edx +
cdq   +
idiv  ecx +
mov dword_4EADE8 eax +
pop ecx  +
cmp ebx dword_4EADE4 +
jg loc_41C7D0  +
mov eax dword_4EADD8 +
add eax 0FFFFFFFBh +
mov dword_4EADE4 eax +
cmp esi dword_4EADE4 +
jl loc_41C7E5  +
mov eax dword_4EADD4 +
add eax 5 +
mov dword_4EADE4 eax +
add esi 5 +
cmp ebx esi +
jnz loc_41C7FB  +
mov edx dword_4EADD4 +
add edx 2 +
mov dword_4EADE4 edx +
cmp edi dword_4EADE8 +
jg loc_41C810  +
mov eax dword_4EADE0 +
add eax 0FFFFFFFBh +
mov dword_4EADE8 eax +
cmp ecx dword_4EADE8 +
jl loc_41C823  +
mov edx ecx +
add edx 5 +
mov dword_4EADE8 edx +
mov eax ecx +
add eax 5 +
cmp edi eax +
jnz loc_41C835  +
add ecx 2 +
mov dword_4EADE8 ecx +
call sub_41C180  +
cmp ebp dword_4EADE4 +
jz loc_41C849  +
mov eax 1 +
jmp loc_41C85D  +
mov edx [esp+4+var_4] +
cmp edx dword_4EADE8 +
jz loc_41C85B  +
mov eax 1 +
jmp loc_41C85D  +
xor eax eax +
pop edx  +
pop ebp  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push ebx  +
push esi  +
push edi  +
mov edi dword_4EADBC +
mov eax [ebp+arg_0] +
mov esi dword_4EADB8 +
mov dword_4EADB8 eax +
mov edx [ebp+arg_4] +
mov dword_4EADBC edx +
xor ebx ebx +
mov edx dword_4EADF0 +
cmp eax edx +
jl loc_41C89D  +
mov eax edx +
add eax 0FFFFFFFBh +
mov dword_4EADB8 eax +
mov eax dword_4EADEC +
cmp eax dword_4EADB8 +
jl loc_41C8B5  +
mov ecx eax +
add ecx 5 +
mov dword_4EADB8 ecx +
mov ecx eax +
add ecx 5 +
cmp edx ecx +
jnz loc_41C8C6  +
add eax 2 +
mov dword_4EADB8 eax +
mov edx dword_4EADF8 +
cmp edx dword_4EADBC +
jg loc_41C8DE  +
mov eax edx +
add eax 0FFFFFFFBh +
mov dword_4EADBC eax +
mov eax dword_4EADF4 +
cmp eax dword_4EADBC +
jl loc_41C8F6  +
mov ecx eax +
add ecx 5 +
mov dword_4EADBC ecx +
mov ecx eax +
add ecx 5 +
cmp edx ecx +
jnz loc_41C907  +
add eax 2 +
mov dword_4EADBC eax +
call sub_41C740  +
add ebx eax +
cmp esi dword_4EADB8 +
jz loc_41C91D  +
mov eax 1 +
jmp loc_41C92E  +
cmp edi dword_4EADBC +
jz loc_41C92C  +
mov eax 1 +
jmp loc_41C92E  +
mov eax ebx +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
mov edx [ebp+arg_4] +
push ebx  +
push ebx  +
push ebx  +
push esi  +
mov eax [ebp+arg_0] +
mov edx dword_4EADE4 +
cmp eax edx +
jle loc_41CD09  +
mov ebx dword_4EAE10 +
mov ecx eax +
neg ebx  +
sub ecx edx +
mov esi dword_4EAE0C +
imul ebx ecx +
mov eax esi +
imul  dword_4EADC0 +
add ebx eax +
test ebx ebx +
jz loc_41CD02  +
imul ecx esi +
mov eax ecx +
shl eax 2 +
lea eax [eax+eax*4] +
lea eax [eax+eax*4] +
cdq   +
idiv  ebx +
add eax dword_4EADB8 +
jmp loc_41CD4D  +
mov eax 4E20h +
jmp loc_41CD4D  +
mov ebx dword_4EAE08 +
mov ecx edx +
neg ebx  +
sub ecx eax +
mov esi dword_4EAE04 +
imul ebx ecx +
mov eax esi +
imul  dword_4EADC0 +
add ebx eax +
test ebx ebx +
jz loc_41CD48  +
imul ecx esi +
mov eax ecx +
shl eax 2 +
lea eax [eax+eax*4] +
lea eax [eax+eax*4] +
cdq   +
idiv  ebx +
push eax  +
mov eax dword_4EADB8 +
pop edx  +
sub eax edx +
jmp loc_41CD4D  +
mov eax 4E20h +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
push ebx  +
push esi  +
mov eax [ebp+arg_0] +
mov edx dword_4EADE8 +
cmp eax edx +
jle loc_41CDA9  +
mov ebx dword_4EAE20 +
mov ecx eax +
neg ebx  +
sub ecx edx +
mov esi dword_4EAE1C +
imul ebx ecx +
mov eax esi +
imul  dword_4EADC0 +
add ebx eax +
test ebx ebx +
jz loc_41CDA2  +
imul ecx esi +
mov eax ecx +
shl eax 2 +
lea eax [eax+eax*4] +
lea eax [eax+eax*4] +
cdq   +
idiv  ebx +
add eax dword_4EADBC +
jmp loc_41CDED  +
mov eax 4E20h +
jmp loc_41CDED  +
mov ebx dword_4EAE18 +
mov ecx edx +
neg ebx  +
sub ecx eax +
mov esi dword_4EAE14 +
imul ebx ecx +
mov eax esi +
imul  dword_4EADC0 +
add ebx eax +
test ebx ebx +
jz loc_41CDE8  +
imul ecx esi +
mov eax ecx +
shl eax 2 +
lea eax [eax+eax*4] +
lea eax [eax+eax*4] +
cdq   +
idiv  ebx +
push eax  +
mov eax dword_4EADBC +
pop edx  +
sub eax edx +
jmp loc_41CDED  +
mov eax 4E20h +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
mov ecx dword_4EADE4 +
mov edx dword_4EADD8 +
sub edx ecx +
push ebx  +
mov eax dword_4CDD90 +
mov ebx edx +
imul ebx eax +
mov dword_4EAE0C ebx +
push esi  +
mov esi dword_4EADC0 +
push edi  +
imul esi eax +
shl edx 2 +
lea edx [edx+edx*4] +
lea edx [edx+edx*4] +
sub esi edx +
mov edx ecx +
mov dword_4EAE10 esi +
sub edx dword_4EADD4 +
mov esi edx +
imul esi eax +
mov dword_4EAE04 esi +
mov eax edx +
mov ecx dword_4EADC0 +
imul ecx dword_4CDD90 +
shl eax 2 +
lea eax [eax+eax*4] +
lea eax [eax+eax*4] +
sub ecx eax +
mov dword_4EAE08 ecx +
mov eax dword_4EADE0 +
mov edx dword_4EADE8 +
mov edi eax +
sub eax edx +
sub edi edx +
imul edi dword_4CDD90 +
mov dword_4EAE1C edi +
mov edi dword_4EADC0 +
imul edi dword_4CDD90 +
shl eax 2 +
lea eax [eax+eax*4] +
lea eax [eax+eax*4] +
sub edi eax +
mov dword_4EAE20 edi +
mov edx dword_4EADE8 +
sub edx dword_4EADDC +
imul edx dword_4CDD90 +
mov dword_4EAE14 edx +
mov eax dword_4EADC0 +
imul  dword_4CDD90 +
mov edx dword_4EADE8 +
sub edx dword_4EADDC +
shl edx 2 +
lea edx [edx+edx*4] +
lea edx [edx+edx*4] +
sub eax edx +
test ebx ebx +
mov dword_4EAE18 eax +
jnz loc_41CEEC  +
mov dword_4EAE0C 1 +
test esi esi +
jnz loc_41CEFA  +
mov dword_4EAE04 1 +
cmp dword_4EAE1C 0 +
jnz loc_41CF0D  +
mov dword_4EAE1C 1 +
cmp dword_4EAE14 0 +
jnz loc_41CF20  +
mov dword_4EAE14 1 +
cmp dword_4EAE10 0 +
jg loc_41CF33  +
mov dword_4EAE10 1 +
test ecx ecx +
jg loc_41CF41  +
mov dword_4EAE08 1 +
cmp dword_4EAE20 0 +
jg loc_41CF54  +
mov dword_4EAE20 1 +
cmp dword_4EAE18 0 +
jg loc_41CF67  +
mov dword_4EAE18 1 +
call sub_41EE28  +
cmp dword_4CDD88 0 +
jz loc_41D03C  +
mov esi dword_4EADF0 +
inc esi  +
cmp esi 4E20h +
jle loc_41CF8D  +
mov esi 4E20h +
xor ebx ebx +
cmp esi ebx +
jle loc_41CFA3  +
mov eax dword_4CDD88 +
mov word ptr [eax+ebx*2] 0 +
inc ebx  +
cmp esi ebx +
jg loc_41CF93  +
xor ebx ebx +
jmp loc_41CFC4  +
push ebx  +
call sub_41CCB4  +
pop ecx  +
test eax eax +
jl loc_41CFC3  +
cmp eax 4E20h +
jge loc_41CFC3  +
mov edx dword_4CDD88 +
mov [edx+eax*2] bx +
inc ebx  +
cmp ebx dword_4EBD74 +
jle loc_41CFA7  +
mov eax dword_4CDD88 +
xor ebx ebx +
cmp esi ebx +
mov ax [eax] +
jle loc_41CFFB  +
mov edx dword_4CDD88 +
cmp word ptr [edx+ebx*2] 0 +
jnz loc_41CFED  +
mov [edx+ebx*2] ax +
jmp loc_41CFF6  +
mov eax dword_4CDD88 +
mov ax [eax+ebx*2] +
inc ebx  +
cmp esi ebx +
jg loc_41CFDA  +
push ebx  +
call sub_41CCB4  +
pop ecx  +
mov esi eax +
mov dword_4EADC4 esi +
test esi esi +
jge loc_41D015  +
xor eax eax +
mov dword_4EADC4 eax +
mov edx dword_4EBD74 +
push edx  +
call sub_41CCB4  +
pop ecx  +
mov ebx eax +
mov dword_4EADC8 ebx +
cmp ebx 4E1Fh +
jle loc_41D03C  +
mov dword_4EADC8 4E1Fh +
cmp dword_4CDD8C 0 +
jz loc_41D116  +
mov esi dword_4EADF8 +
inc esi  +
cmp esi 4E20h +
jle loc_41D05D  +
mov esi 4E20h +
xor ebx ebx +
cmp esi ebx +
jle loc_41D073  +
mov eax dword_4CDD8C +
mov word ptr [eax+ebx*2] 0 +
inc ebx  +
cmp esi ebx +
jg loc_41D063  +
xor ebx ebx +
xor eax eax +
jmp loc_41D096  +
push ebx  +
call sub_41CD54  +
pop ecx  +
test eax eax +
jl loc_41D095  +
cmp eax 4E20h +
jge loc_41D095  +
mov edx dword_4CDD8C +
mov [edx+eax*2] bx +
inc ebx  +
cmp eax 4E20h +
jge loc_41D0A5  +
cmp ebx dword_4EBD78 +
jl loc_41D079  +
mov ecx dword_4CDD8C +
xor ebx ebx +
cmp esi ebx +
mov ax [ecx] +
jle loc_41D0D5  +
mov edx dword_4CDD8C +
cmp word ptr [edx+ebx*2] 0 +
jnz loc_41D0C7  +
mov [edx+ebx*2] ax +
jmp loc_41D0D0  +
mov eax dword_4CDD8C +
mov ax [eax+ebx*2] +
inc ebx  +
cmp esi ebx +
jg loc_41D0B4  +
push ebx  +
call sub_41CD54  +
pop ecx  +
mov esi eax +
mov dword_4EADCC esi +
test esi esi +
jge loc_41D0EF  +
xor eax eax +
mov dword_4EADCC eax +
mov edx dword_4EBD78 +
push edx  +
call sub_41CD54  +
pop ecx  +
mov ebx eax +
mov dword_4EADD0 ebx +
cmp ebx 4E1Fh +
jle loc_41D116  +
mov dword_4EADD0 4E1Fh +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push ebx  +
retn   +
***
push ecx  +
push ebx  +
push esi  +
push edi  +
mov ebx dword_4EADD4 +
mov esi dword_4EADD8 +
mov edi dword_4EADDC +
mov eax dword_4EADE0 +
mov [ebp+var_4] eax +
mov edx [ebp+arg_0] +
mov dword_4EADD4 edx +
mov eax [ebp+arg_4] +
mov dword_4EADD8 eax +
mov ecx [ebp+arg_8] +
mov dword_4EADDC ecx +
mov ecx [ebp+arg_C] +
mov dword_4EADE0 ecx +
add eax edx +
sar eax 1 +
jns loc_41D37D  +
adc eax 0 +
mov dword_4EADE4 eax +
mov eax dword_4EADE0 +
add eax dword_4EADDC +
sar eax 1 +
jns loc_41D394  +
adc eax 0 +
mov dword_4EADE8 eax +
call sub_41CDF4  +
cmp ebx dword_4EADD4 +
jz loc_41D3AD  +
mov eax 1 +
jmp loc_41D3DF  +
cmp esi dword_4EADD8 +
jz loc_41D3BC  +
mov eax 1 +
jmp loc_41D3DF  +
cmp edi dword_4EADDC +
jz loc_41D3CB  +
mov eax 1 +
jmp loc_41D3DF  +
mov edx [ebp+var_4] +
cmp edx dword_4EADE0 +
jz loc_41D3DD  +
mov eax 1 +
jmp loc_41D3DF  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ecx  +
pop ebp  +
retn   +
***
push ebx  +
push esi  +
push edi  +
mov ebx dword_4EADB8 +
mov esi dword_4EADBC +
mov eax [ebp+arg_0] +
mov dword_4EADB8 eax +
mov ecx [ebp+arg_4] +
mov dword_4EADBC ecx +
mov edx dword_4EADF0 +
cmp eax edx +
jl loc_41D41F  +
mov eax edx +
add eax 0FFFFFFFBh +
mov dword_4EADB8 eax +
mov eax dword_4EADEC +
cmp eax dword_4EADB8 +
jl loc_41D437  +
mov edi eax +
add edi 5 +
mov dword_4EADB8 edi +
mov edi eax +
add edi 5 +
cmp edx edi +
jnz loc_41D448  +
add eax 2 +
mov dword_4EADB8 eax +
mov edx dword_4EADF8 +
cmp ecx edx +
jl loc_41D45C  +
mov eax edx +
add eax 0FFFFFFFBh +
mov dword_4EADBC eax +
mov eax dword_4EADF4 +
cmp eax dword_4EADBC +
jl loc_41D474  +
mov ecx eax +
add ecx 5 +
mov dword_4EADBC ecx +
mov ecx eax +
add ecx 5 +
cmp edx ecx +
jnz loc_41D485  +
add eax 2 +
mov dword_4EADBC eax +
call sub_41CDF4  +
cmp ebx dword_4EADB8 +
jz loc_41D499  +
mov eax 1 +
jmp loc_41D4AA  +
cmp esi dword_4EADBC +
jz loc_41D4A8  +
mov eax 1 +
jmp loc_41D4AA  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
mov edx [ebp+arg_4] +
push ebx  +
xor eax eax +
xor edx edx +
mov dword_4EADC4 eax +
push ebx  +
mov dword_4EADC8 0FFFFFFFFh +
mov dword_4EADCC edx +
push esi  +
push edi  +
mov dword_4EADD0 0FFFFFFFFh +
add esp 0FFFFFFE4h +
mov eax dword_4EADD4 +
mov edi offset dword_4EAE0C +
add eax 5 +
mov esi 7FFFFFFFh +
mov dword_4EADE4 eax +
jmp loc_41D693  +
sub eax edx +
mov edx dword_4EADF0 +
sub edx dword_4EADB8 +
mov ecx eax +
imul ecx edx +
mov [edi] ecx +
xor ebx ebx +
mov ecx dword_4EADC0 +
imul ecx edx +
shl eax 2 +
lea eax [eax+eax*4] +
lea eax [eax+eax*4] +
sub ecx eax +
mov dword_4EAE10 ecx +
cmp dword ptr [edi] 0 +
jnz loc_41D60D  +
mov dword ptr [edi] 1 +
cmp dword_4EAE10 0 +
jnz loc_41D620  +
mov dword_4EAE10 1 +
fild  dword_4EAE10 +
lea edx [esp+28h+var_24] +
fild  dword ptr [edi] +
push edx  +
lea eax [esp+2Ch+var_28] +
push eax  +
fdivp st(1) st +
fstp  dbl_4EADFC +
mov edx dword_4EADBC +
mov ecx dword_4EADEC +
push edx  +
push ecx  +
call sub_41DD4C  +
add esp 10h +
mov eax dword_4EADD4 +
cmp eax [esp+28h+var_28] +
jle loc_41D661  +
sub eax [esp+28h+var_28] +
add ebx eax +
jmp loc_41D668  +
mov edx [esp+28h+var_28] +
sub edx eax +
add ebx edx +
cmp esi ebx +
jle loc_41D68C  +
mov esi ebx +
mov eax dword ptr dbl_4EADFC +
mov dword ptr [esp+28h+var_1C] eax +
mov eax dword ptr dbl_4EADFC+4 +
mov dword ptr [esp+28h+var_1C+4] eax +
mov edx dword_4EADE4 +
mov [esp+28h+var_20] edx +
add dword_4EADE4 5 +
mov eax dword_4EADD8 +
mov ecx eax +
add ecx 0FFFFFFFBh +
mov edx dword_4EADE4 +
cmp ecx edx +
jg loc_41D5D1  +
mov eax [esp+28h+var_20] +
mov dword_4EADE4 eax +
mov esi 7FFFFFFFh +
mov eax dword_4EADDC +
add eax 5 +
mov dword_4EADE8 eax +
jmp loc_41D790  +
sub eax edx +
mov edx dword_4EADF8 +
sub edx dword_4EADBC +
mov ecx eax +
imul ecx edx +
mov [edi] ecx +
xor ebx ebx +
mov ecx dword_4EADC0 +
imul ecx edx +
shl eax 2 +
lea eax [eax+eax*4] +
lea eax [eax+eax*4] +
sub ecx eax +
mov dword_4EAE10 ecx +
cmp dword ptr [edi] 0 +
jnz loc_41D707  +
mov dword ptr [edi] 1 +
cmp dword_4EAE10 0 +
jnz loc_41D71A  +
mov dword_4EAE10 1 +
fild  dword_4EAE10 +
lea edx [esp+28h+var_24] +
fild  dword ptr [edi] +
push edx  +
lea eax [esp+2Ch+var_28] +
push eax  +
fdivp st(1) st +
fstp  dbl_4EADFC +
mov edx dword_4EADF4 +
mov ecx dword_4EADB8 +
push edx  +
push ecx  +
call sub_41DD4C  +
add esp 10h +
mov eax dword_4EADDC +
cmp eax [esp+28h+var_24] +
jle loc_41D75D  +
sub eax [esp+28h+var_24] +
add ebx eax +
jmp loc_41D765  +
mov edx [esp+28h+var_24] +
sub edx eax +
add ebx edx +
cmp esi ebx +
jle loc_41D789  +
mov esi ebx +
mov eax dword ptr dbl_4EADFC +
mov dword ptr [esp+28h+var_14] eax +
mov eax dword ptr dbl_4EADFC+4 +
mov dword ptr [esp+28h+var_14+4] eax +
mov edx dword_4EADE8 +
mov [esp+28h+var_20] edx +
add dword_4EADE8 5 +
mov eax dword_4EADE0 +
mov ecx eax +
add ecx 0FFFFFFFBh +
mov edx dword_4EADE8 +
cmp ecx edx +
jg loc_41D6CB  +
fld  [esp+28h+var_14] +
fcomp  [esp+28h+var_1C] +
mov eax [esp+28h+var_20] +
mov dword_4EADE8 eax +
fnstsw  ax +
sahf   +
jbe loc_41D7D4  +
mov edx dword ptr [esp+28h+var_14] +
mov dword ptr dbl_4EADFC edx +
mov edx dword ptr [esp+28h+var_14+4] +
mov dword ptr dbl_4EADFC+4 edx +
jmp loc_41D7E8  +
mov ecx dword ptr [esp+28h+var_1C] +
mov dword ptr dbl_4EADFC ecx +
mov ecx dword ptr [esp+28h+var_1C+4] +
mov dword ptr dbl_4EADFC+4 ecx +
add esp 1Ch +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push ebx  +
push esi  +
push edi  +
mov ebx [ebp+arg_C] +
mov ecx [ebp+arg_8] +
mov edx [ebp+arg_4] +
mov eax [ebp+arg_0] +
test eax eax +
jnz loc_41D812  +
test edx edx +
jnz loc_41D812  +
test ecx ecx +
jnz loc_41D812  +
test ebx ebx +
jz loc_41D829  +
mov dword_4EADD4 eax +
mov dword_4EADD8 edx +
mov dword_4EADDC ecx +
mov dword_4EADE0 ebx +
xor ecx ecx +
xor ebx ebx +
mov dword_4EADEC ecx +
mov eax [ebp+arg_10] +
mov edi dword_4EC3B0 +
mov edx [ebp+arg_14] +
add edi dword_4EBD7C +
push ecx  +
mov dword_4EADF0 edi +
mov dword_4EADF4 ebx +
mov esi dword_4EC3B4 +
add esi dword_4EBD80 +
mov dword_4EADF8 esi +
mov dword_4EADB8 eax +
mov dword_4EADBC edx +
mov eax dword_4EADD8 +
mov edx dword_4EADB8 +
sub eax dword_4EADD4 +
sub edx ecx +
imul  edx +
mov edx edi +
sub edx ecx +
mov ecx edx +
cdq   +
idiv  ecx +
mov dword_4EADE4 eax +
pop ecx  +
mov eax dword_4EADE0 +
mov edx dword_4EADBC +
sub eax dword_4EADDC +
sub edx ebx +
imul  edx +
mov edx esi +
push ecx  +
sub edx ebx +
mov ecx edx +
cdq   +
idiv  ecx +
mov dword_4EADE8 eax +
pop ecx  +
mov eax dword_4EADD8 +
cmp eax dword_4EADE4 +
jg loc_41D8D2  +
mov eax dword_4EADD8 +
add eax 0FFFFFFFBh +
mov dword_4EADE4 eax +
mov edx dword_4EADD4 +
cmp edx dword_4EADE4 +
jl loc_41D8ED  +
mov eax dword_4EADD4 +
add eax 5 +
mov dword_4EADE4 eax +
mov edx dword_4EADD4 +
add edx 5 +
cmp edx dword_4EADD8 +
jnz loc_41D90B  +
mov eax dword_4EADD4 +
add eax 2 +
mov dword_4EADE4 eax +
mov edx dword_4EADE8 +
cmp edx dword_4EADE0 +
jl loc_41D926  +
mov eax dword_4EADE0 +
add eax 0FFFFFFFBh +
mov dword_4EADE8 eax +
mov edx dword_4EADE8 +
cmp edx dword_4EADDC +
jg loc_41D941  +
mov eax dword_4EADDC +
add eax 5 +
mov dword_4EADE8 eax +
mov edx dword_4EADDC +
add edx 5 +
cmp edx dword_4EADE0 +
jnz loc_41D95F  +
mov eax dword_4EADDC +
add eax 2 +
mov dword_4EADE8 eax +
cmp edi dword_4EADB8 +
jg loc_41D976  +
mov edx dword_4EADF0 +
add edx 0FFFFFFFBh +
mov dword_4EADB8 edx +
cmp ecx dword_4EADB8 +
jl loc_41D988  +
mov eax ecx +
add eax 5 +
mov dword_4EADB8 eax +
mov edx ecx +
add edx 5 +
cmp edi edx +
jnz loc_41D99A  +
add ecx 2 +
mov dword_4EADB8 ecx +
cmp esi dword_4EADBC +
jg loc_41D9AD  +
mov ecx esi +
add ecx 0FFFFFFFBh +
mov dword_4EADBC ecx +
cmp ebx dword_4EADBC +
jl loc_41D9BF  +
mov eax ebx +
add eax 5 +
mov dword_4EADBC eax +
mov edx ebx +
add edx 5 +
cmp esi edx +
jnz loc_41D9D1  +
add ebx 2 +
mov dword_4EADBC ebx +
xor ecx ecx +
xor eax eax +
mov dword_4EB624 ecx +
mov dword_4EB628 7FFFFFFFh +
mov dword_4EB62C eax +
mov dword_4EB630 7FFFFFFFh +
call sub_41D58C  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
retn   +
***
add esp 0FFFFFFF8h +
mov eax dword_4EADDC +
mov edx dword_4EADE0 +
push ebx  +
push esi  +
push edi  +
mov [ebp+var_4] eax +
mov [ebp+var_8] edx +
mov ecx [ebp+arg_0] +
mov edi dword_4EADD8 +
mov esi dword_4EADD4 +
mov dword_4EADD4 ecx +
mov eax [ebp+arg_4] +
mov edx [ebp+arg_8] +
mov dword_4EADD8 eax +
mov dword_4EADDC edx +
mov ecx [ebp+arg_C] +
xor ebx ebx +
mov dword_4EADE0 ecx +
call sub_41DAA8  +
add ebx eax +
cmp esi dword_4EADD4 +
jz loc_41DA69  +
mov eax 1 +
jmp loc_41DA9E  +
cmp edi dword_4EADD8 +
jz loc_41DA78  +
mov eax 1 +
jmp loc_41DA9E  +
mov edx [ebp+var_4] +
cmp edx dword_4EADDC +
jz loc_41DA8A  +
mov eax 1 +
jmp loc_41DA9E  +
mov edx [ebp+var_8] +
cmp edx dword_4EADE0 +
jz loc_41DA9C  +
mov eax 1 +
jmp loc_41DA9E  +
mov eax ebx +
pop edi  +
pop esi  +
pop ebx  +
pop ecx  +
pop ecx  +
pop ebp  +
retn   +
***
push edi  +
push ebp  +
push ecx  +
mov eax dword_4EADE8 +
mov ebx dword_4EADD8 +
mov [esp+4+var_4] eax +
mov ecx dword_4EADEC +
mov esi dword_4EADD4 +
mov eax ebx +
mov edx dword_4EADB8 +
sub edx ecx +
sub eax esi +
imul  edx +
mov edx dword_4EADF0 +
mov ebp dword_4EADE4 +
sub edx ecx +
mov ecx edx +
cdq   +
idiv  ecx +
mov dword_4EADE4 eax +
mov edi dword_4EADE0 +
mov edx dword_4EADBC +
sub edx dword_4EADF4 +
mov ecx dword_4EADDC +
mov eax edi +
push ecx  +
sub eax ecx +
imul  edx +
mov edx dword_4EADF8 +
sub edx dword_4EADF4 +
mov ecx edx +
cdq   +
idiv  ecx +
mov dword_4EADE8 eax +
pop ecx  +
cmp ebx dword_4EADE4 +
jg loc_41DB38  +
mov eax dword_4EADD8 +
add eax 0FFFFFFFBh +
mov dword_4EADE4 eax +
cmp esi dword_4EADE4 +
jl loc_41DB4D  +
mov eax dword_4EADD4 +
add eax 5 +
mov dword_4EADE4 eax +
add esi 5 +
cmp ebx esi +
jnz loc_41DB63  +
mov edx dword_4EADD4 +
add edx 2 +
mov dword_4EADE4 edx +
cmp edi dword_4EADE8 +
jg loc_41DB78  +
mov eax dword_4EADE0 +
add eax 0FFFFFFFBh +
mov dword_4EADE8 eax +
cmp ecx dword_4EADE8 +
jl loc_41DB8B  +
mov edx ecx +
add edx 5 +
mov dword_4EADE8 edx +
mov eax ecx +
add eax 5 +
cmp edi eax +
jnz loc_41DB9D  +
add ecx 2 +
mov dword_4EADE8 ecx +
call sub_41D58C  +
cmp ebp dword_4EADE4 +
jz loc_41DBB1  +
mov eax 1 +
jmp loc_41DBC5  +
mov edx [esp+4+var_4] +
cmp edx dword_4EADE8 +
jz loc_41DBC3  +
mov eax 1 +
jmp loc_41DBC5  +
xor eax eax +
pop edx  +
pop ebp  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push ebx  +
push esi  +
push edi  +
mov edi dword_4EADBC +
mov eax [ebp+arg_0] +
mov esi dword_4EADB8 +
mov dword_4EADB8 eax +
mov edx [ebp+arg_4] +
mov dword_4EADBC edx +
xor ebx ebx +
mov edx dword_4EADF0 +
cmp eax edx +
jl loc_41DC05  +
mov eax edx +
add eax 0FFFFFFFBh +
mov dword_4EADB8 eax +
mov eax dword_4EADEC +
cmp eax dword_4EADB8 +
jl loc_41DC1D  +
mov ecx eax +
add ecx 5 +
mov dword_4EADB8 ecx +
mov ecx eax +
add ecx 5 +
cmp edx ecx +
jnz loc_41DC2E  +
add eax 2 +
mov dword_4EADB8 eax +
mov edx dword_4EADF8 +
cmp edx dword_4EADBC +
jg loc_41DC46  +
mov eax edx +
add eax 0FFFFFFFBh +
mov dword_4EADBC eax +
mov eax dword_4EADF4 +
cmp eax dword_4EADBC +
jl loc_41DC5E  +
mov ecx eax +
add ecx 5 +
mov dword_4EADBC ecx +
mov ecx eax +
add ecx 5 +
cmp edx ecx +
jnz loc_41DC6F  +
add eax 2 +
mov dword_4EADBC eax +
call sub_41DAA8  +
add ebx eax +
cmp esi dword_4EADB8 +
jz loc_41DC85  +
mov eax 1 +
jmp loc_41DC96  +
cmp edi dword_4EADBC +
jz loc_41DC94  +
mov eax 1 +
jmp loc_41DC96  +
mov eax ebx +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
mov edx [ebp+arg_4] +
add esp 0FFFFFFD0h +
mov eax [ebp+arg_0] +
sub eax dword_4EADB8 +
mov [ebp+var_2C] eax +
fild  [ebp+var_2C] +
fstp  [ebp+var_8] +
mov edx [ebp+arg_4] +
sub edx dword_4EADBC +
mov [ebp+var_30] edx +
fild  [ebp+var_30] +
fstp  [ebp+var_10] +
fld  [ebp+var_8] +
fmul  [ebp+var_8] +
fld  [ebp+var_10] +
fmul  [ebp+var_10] +
faddp st(1) st +
add esp 0FFFFFFF8h +
fstp  [esp+38h+var_38] +
call _sqrt  +
fstp  [ebp+var_18] +
fld  dbl_4EADFC +
fmul  [ebp+var_18] +
add esp 8 +
fadd  ds:flt_41DE1C +
fstp  [ebp+var_28] +
fld  [ebp+var_28] +
fcomp  ds:flt_41DE20 +
fnstsw  ax +
sahf   +
ja loc_41DDC3  +
mov dword ptr [ebp+var_28] 9999999Ah +
mov dword ptr [ebp+var_28+4] 3FB99999h +
fild  dword_4EADC0 +
fmul  [ebp+var_18] +
fdiv  [ebp+var_28] +
fstp  [ebp+var_20] +
fld  [ebp+var_18] +
fcomp  ds:flt_41DE20 +
fnstsw  ax +
sahf   +
jz loc_41DDE9  +
fld  [ebp+var_18] +
fdivr  [ebp+var_20] +
fstp  [ebp+var_20] +
fld  [ebp+var_8] +
fmul  [ebp+var_20] +
call @_ftol$qv  +
add eax dword_4EADE4 +
mov edx [ebp+arg_8] +
mov [edx] eax +
fld  [ebp+var_10] +
fmul  [ebp+var_20] +
call @_ftol$qv  +
add eax dword_4EADE8 +
mov edx [ebp+arg_C] +
mov [edx] eax +
mov esp ebp +
pop ebp  +
retn   +
***
add esp 0FFFFFFE4h +
mov eax [ebp+arg_0] +
sub eax dword_4EADE4 +
mov [ebp+var_18] eax +
fild  [ebp+var_18] +
fstp  [ebp+var_4] +
mov edx [ebp+arg_4] +
sub edx dword_4EADE8 +
mov [ebp+var_1C] edx +
fild  [ebp+var_1C] +
fstp  [ebp+var_8] +
fld  [ebp+var_4] +
fmul  [ebp+var_4] +
fld  [ebp+var_8] +
fmul  [ebp+var_8] +
faddp st(1) st +
add esp 0FFFFFFF8h +
fstp  [esp+24h+var_24] +
call _sqrt  +
fstp  [ebp+var_10] +
fld  dbl_4EADFC +
fchs   +
fmul  [ebp+var_10] +
add esp 8 +
fild  dword_4EADC0 +
faddp st(1) st +
fstp  [ebp+var_14] +
fld  [ebp+var_14] +
fcomp  ds:flt_41DEE0 +
fnstsw  ax +
sahf   +
ja loc_41DE98  +
mov [ebp+var_14] 3DCCCCCDh +
fld  ds:flt_41DEE4 +
fmul  [ebp+var_10] +
fdiv  [ebp+var_14] +
fstp  [ebp+var_C] +
fld  [ebp+var_4] +
fmul  [ebp+var_C] +
fdiv  [ebp+var_10] +
call @_ftol$qv  +
add eax dword_4EADB8 +
mov edx [ebp+arg_8] +
mov [edx] eax +
fld  [ebp+var_8] +
fmul  [ebp+var_C] +
fdiv  [ebp+var_10] +
call @_ftol$qv  +
add eax dword_4EADBC +
mov edx [ebp+arg_C] +
mov [edx] eax +
mov esp ebp +
pop ebp  +
retn   +
***
xor eax eax +
push ebx  +
retn   +
***
push ecx  +
push ebx  +
push esi  +
push edi  +
mov ebx dword_4EADB8 +
mov esi dword_4EADBC +
mov eax [ebp+arg_0] +
mov dword_4EADB8 eax +
mov ecx [ebp+arg_4] +
mov dword_4EADBC ecx +
mov edx dword_4EADF0 +
cmp eax edx +
jl loc_41E24F  +
mov eax edx +
add eax 0FFFFFFFBh +
mov dword_4EADB8 eax +
mov eax dword_4EADEC +
cmp eax dword_4EADB8 +
jl loc_41E267  +
mov edi eax +
add edi 5 +
mov dword_4EADB8 edi +
mov edi eax +
add edi 5 +
cmp edx edi +
jnz loc_41E278  +
add eax 2 +
mov dword_4EADB8 eax +
mov edx dword_4EADF8 +
cmp ecx edx +
jl loc_41E28C  +
mov eax edx +
add eax 0FFFFFFFBh +
mov dword_4EADBC eax +
mov eax dword_4EADF4 +
cmp eax dword_4EADBC +
jl loc_41E2A4  +
mov ecx eax +
add ecx 5 +
mov dword_4EADBC ecx +
mov ecx eax +
add ecx 5 +
cmp edx ecx +
jnz loc_41E2B5  +
add eax 2 +
mov dword_4EADBC eax +
call sub_41DEE8  +
cmp ebx dword_4EADB8 +
jz loc_41E2C9  +
mov eax 1 +
jmp loc_41E2DA  +
cmp esi dword_4EADBC +
jz loc_41E2D8  +
mov eax 1 +
jmp loc_41E2DA  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
mov edx [ebp+arg_4] +
push ebx  +
mov eax dword_4EBDA4 +
cmp dword_4CDD84 0 +
push ecx  +
push ebx  +
push esi  +
xor ebx ebx +
mov esi [ebp+arg_C] +
mov ecx [ebp+arg_8] +
mov edx [ebp+arg_4] +
mov eax [ebp+arg_0] +
cmp dword_4CDD88 0 +
mov [ebp+var_4] ebx +
jz loc_41E65B  +
cmp eax dword_4EADC4 +
jl loc_41E65B  +
cmp eax dword_4EADC8 +
jg loc_41E65B  +
mov ebx dword_4CDD88 +
movsx ebx word ptr [ebx+eax*2] +
mov [ecx] ebx +
mov [ebp+var_4] 1 +
cmp dword_4CDD8C 0 +
jz loc_41E686  +
cmp edx dword_4EADCC +
jl loc_41E686  +
cmp edx dword_4EADD0 +
jg loc_41E686  +
mov ebx dword_4CDD8C +
movsx ebx word ptr [ebx+edx*2] +
mov [esi] ebx +
cmp [ebp+var_4] 0 +
jnz loc_41E6BC  +
mov ebx dword_4CDD84 +
sub ebx 2 +
jz loc_41E69C  +
dec ebx  +
jz loc_41E6AA  +
dec ebx  +
jz loc_41E69C  +
dec ebx  +
jz loc_41E6AA  +
jmp loc_41E6B8  +
push esi  +
push ecx  +
push edx  +
push eax  +
call sub_41C9E4  +
add esp 10h +
jmp loc_41E6BC  +
push esi  +
push ecx  +
push edx  +
push eax  +
call sub_41DD4C  +
add esp 10h +
jmp loc_41E6BC  +
mov [ecx] eax +
mov [esi] edx +
pop esi  +
pop ebx  +
pop ecx  +
pop ebp  +
retn   +
***
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+14h] +
mov ecx [ebp+10h] +
mov edx [ebp+0Ch] +
mov eax [ebp+8] +
mov ebx dword_4CDD84 +
sub ebx 2 +
jz loc_41E6EB  +
dec ebx  +
jz loc_41E6F9  +
dec ebx  +
jz loc_41E6EB  +
dec ebx  +
jz loc_41E6F9  +
jmp loc_41E707  +
push esi  +
push ecx  +
push edx  +
push eax  +
call sub_41CB58  +
add esp 10h +
jmp loc_41E70B  +
push esi  +
push ecx  +
push edx  +
push eax  +
call sub_41DE24  +
add esp 10h +
jmp loc_41E70B  +
mov [ecx] eax +
mov [esi] edx +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
push ebx  +
push esi  +
push edi  +
mov ecx [ebp+arg_4] +
mov ebx [ebp+arg_0] +
test ecx ecx +
jnz loc_41E72C  +
mov dword_4EADC0 64h +
jmp loc_41E73F  +
mov eax ebx +
shl eax 2 +
lea eax [eax+eax*4] +
lea eax [eax+eax*4] +
cdq   +
idiv  ecx +
mov dword_4EADC0 eax +
cmp dword_4EADC0 0 +
jg loc_41E752  +
mov dword_4EADC0 1 +
cmp dword_4EADC0 1388h +
jl loc_41E768  +
mov dword_4EADC0 1388h +
mov eax dword_4CDD84 +
sub eax 2 +
jz loc_41E77D  +
dec eax  +
jz loc_41E791  +
dec eax  +
jz loc_41E787  +
dec eax  +
jz loc_41E79B  +
jmp loc_41E7A2  +
call sub_41C698  +
jmp loc_41E821  +
call sub_41D328  +
jmp loc_41E821  +
call sub_41DA00  +
jmp loc_41E821  +
call sub_41E180  +
jmp loc_41E821  +
mov eax dword_4EB624 +
mov edi dword_4EBDA0 +
imul  edi +
cdq   +
idiv  dword_4EBDA4 +
mov esi eax +
mov eax dword_4EB62C +
imul  edi +
cdq   +
idiv  dword_4EBDA4 +
mov edi eax +
mov dword_4EBDA4 ebx +
mov dword_4EBDA0 ecx +
call sub_41EC60  +
mov eax esi +
mov ecx dword_4EBDA4 +
imul  ecx +
mov ebx dword_4EBDA0 +
cdq   +
idiv  ebx +
mov dword_4EB624 eax +
mov eax edi +
imul  ecx +
cdq   +
idiv  ebx +
mov esi eax +
mov dword_4EB62C esi +
mov eax dword_4EB624 +
add eax dword_4EBD74 +
mov dword_4EB628 eax +
mov edx dword_4EBD78 +
add edx esi +
add edx 3Ch +
mov dword_4EB630 edx +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
add esp 0FFFFFFF8h +
push ebx  +
push esi  +
push edi  +
mov ecx [ebp+arg_4] +
mov edi [ebp+arg_0] +
test ecx ecx +
jnz loc_41E847  +
mov dword_4EADC0 64h +
jmp loc_41E856  +
mov eax dword_4EADC0 +
imul  edi +
cdq   +
idiv  ecx +
mov dword_4EADC0 eax +
cmp dword_4EADC0 0 +
jg loc_41E869  +
mov dword_4EADC0 1 +
cmp dword_4EADC0 1388h +
jl loc_41E87F  +
mov dword_4EADC0 1388h +
mov eax dword_4CDD84 +
sub eax 2 +
jz loc_41E894  +
dec eax  +
jz loc_41E8A8  +
dec eax  +
jz loc_41E89E  +
dec eax  +
jz loc_41E8B2  +
jmp loc_41E8BC  +
call sub_41C698  +
jmp loc_41E940  +
call sub_41D328  +
jmp loc_41E940  +
call sub_41DA00  +
jmp loc_41E940  +
call sub_41E180  +
jmp loc_41E940  +
mov ebx dword_4EBDA0 +
mov eax dword_4EB624 +
imul  ebx +
cdq   +
mov esi dword_4EBDA4 +
idiv  esi +
mov [ebp+var_4] eax +
mov eax dword_4EB62C +
imul  ebx +
cdq   +
idiv  esi +
imul esi edi +
imul ebx ecx +
mov dword_4EBDA4 esi +
mov dword_4EBDA0 ebx +
mov [ebp+var_8] eax +
call sub_41EC60  +
mov ecx dword_4EBDA4 +
mov eax [ebp+var_4] +
imul  ecx +
cdq   +
mov ebx dword_4EBDA0 +
idiv  ebx +
mov esi eax +
mov eax [ebp+var_8] +
imul  ecx +
cdq   +
idiv  ebx +
mov edi eax +
mov dword_4EB624 esi +
mov dword_4EB62C edi +
add esi dword_4EBD74 +
mov dword_4EB628 esi +
mov eax dword_4EBD78 +
add eax edi +
add eax 3Ch +
mov dword_4EB630 eax +
pop edi  +
pop esi  +
pop ebx  +
pop ecx  +
pop ecx  +
pop ebp  +
retn   +
***
mov eax dword_4EADEC +
add eax dword_4EADF0 +
sar eax 1 +
jns loc_41E95A  +
adc eax 0 +
mov edx dword_4EADF4 +
add edx dword_4EADF8 +
sar edx 1 +
jns loc_41E96D  +
adc edx 0 +
mov ecx dword_4CDD84 +
sub ecx 2 +
jz loc_41E983  +
dec ecx  +
jz loc_41E999  +
dec ecx  +
jz loc_41E98E  +
dec ecx  +
jz loc_41E9A4  +
jmp loc_41E9AF  +
push edx  +
push eax  +
call sub_41C864  +
add esp 8 +
retn   +
push edx  +
push eax  +
call sub_41D3E8  +
add esp 8 +
retn   +
push edx  +
push eax  +
call sub_41DBCC  +
add esp 8 +
retn   +
push edx  +
push eax  +
call sub_41E218  +
add esp 8 +
retn   +
xor eax eax +
cmp dword_4EB624 0 +
jz loc_41E9BF  +
mov eax 1 +
cmp dword_4EB62C 0 +
jz loc_41E9CD  +
mov eax 1 +
xor edx edx +
xor ecx ecx +
mov dword_4EB624 edx +
mov dword_4EB62C ecx +
add edx dword_4EBD74 +
mov dword_4EB628 edx +
mov edx dword_4EBD78 +
add edx ecx +
add edx 3Ch +
mov dword_4EB630 edx +
retn   +
***
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov edx dword_4CDD84 +
sub edx 2 +
jz loc_41EA18  +
dec edx  +
jz loc_41EA3C  +
dec edx  +
jz loc_41EA2A  +
dec edx  +
jz loc_41EA4E  +
jmp loc_41EA60  +
mov ecx dword_4EADBC +
push ecx  +
push eax  +
call sub_41C864  +
add esp 8 +
pop ebp  +
retn   +
***
mov edx dword_4EADBC +
push edx  +
push eax  +
call sub_41D3E8  +
add esp 8 +
pop ebp  +
retn   +
***
mov ecx dword_4EADBC +
push ecx  +
push eax  +
call sub_41DBCC  +
add esp 8 +
pop ebp  +
retn   +
***
mov edx dword_4EADBC +
push edx  +
push eax  +
call sub_41E218  +
add esp 8 +
pop ebp  +
retn   +
***
xor edx edx +
cmp eax dword_4EB624 +
jz loc_41EA6F  +
mov edx 1 +
mov ecx eax +
mov eax edx +
mov dword_4EB624 ecx +
add ecx dword_4EBD74 +
mov dword_4EB628 ecx +
pop ebp  +
retn   +
***
push eax  +
mov eax dword_4EADB8 +
push eax  +
call sub_41C864  +
add esp 8 +
pop ebp  +
retn   +
***
push eax  +
mov ecx dword_4EADB8 +
push ecx  +
call sub_41D3E8  +
add esp 8 +
pop ebp  +
retn   +
***
push eax  +
mov eax dword_4EADB8 +
push eax  +
call sub_41DBCC  +
add esp 8 +
pop ebp  +
retn   +
***
push eax  +
mov edx dword_4EADB8 +
push edx  +
call sub_41E218  +
add esp 8 +
pop ebp  +
retn   +
***
mov ecx dword_4CDD84 +
sub ecx 2 +
mov edx [ebp+arg_4] +
mov eax [ebp+arg_0] +
jz loc_41EB33  +
dec ecx  +
jz loc_41EB4B  +
dec ecx  +
jz loc_41EB3F  +
dec ecx  +
jz loc_41EB57  +
jmp loc_41EB63  +
push edx  +
push eax  +
call sub_41C934  +
add esp 8 +
pop ebp  +
retn   +
push edx  +
push eax  +
call sub_41D4B0  +
add esp 8 +
pop ebp  +
retn   +
push edx  +
push eax  +
call sub_41DC9C  +
add esp 8 +
pop ebp  +
retn   +
push edx  +
push eax  +
call sub_41E2E0  +
add esp 8 +
pop ebp  +
retn   +
add dword_4EB624 eax +
add dword_4EB62C edx +
mov ecx dword_4EB624 +
add ecx dword_4EBD74 +
mov dword_4EB628 ecx +
mov ecx dword_4EBD78 +
add ecx dword_4EB62C +
add ecx 3Ch +
test eax eax +
mov dword_4EB630 ecx +
jnz loc_41EBA2  +
test edx edx +
jnz loc_41EBA2  +
xor eax eax +
pop ebp  +
retn   +
mov eax 1 +
pop ebp  +
retn   +
***
mov eax dword_4CDD84 +
mov eax dword_4CDD84 +
sub eax 4 +
jz loc_41EC42  +
dec eax  +
jz loc_41EC4E  +
jmp loc_41EC5A  +
mov edx [ebp+arg_0] +
push edx  +
call sub_41D560  +
pop ecx  +
pop ebp  +
retn   +
mov ecx [ebp+arg_0] +
push ecx  +
call sub_41E390  +
pop ecx  +
pop ebp  +
retn   +
xor eax eax +
pop ebp  +
retn   +
***
push esi  +
push edi  +
cmp dword ptr [ecx] 0 +
mov ebx offset dword_4EBDA4 +
jge loc_41EC7A  +
mov eax [ecx] +
mov edx eax +
neg eax  +
mov [ecx] eax +
cmp dword ptr [ebx] 0 +
jge loc_41EC87  +
mov eax [ebx] +
mov edx eax +
neg eax  +
mov [ebx] eax +
mov eax [ecx] +
cmp eax [ebx] +
jnz loc_41EC96  +
mov edx 1 +
mov [ebx] edx +
mov [ecx] edx +
cmp dword ptr [ecx] 0 +
jnz loc_41ECA1  +
mov dword ptr [ecx] 1 +
cmp dword ptr [ebx] 0 +
jnz loc_41ECAC  +
mov dword ptr [ebx] 1 +
mov eax [ecx] +
mov edx [ebx] +
cmp eax edx +
jge loc_41ECE9  +
shl eax 3 +
lea eax [eax+eax*4] +
lea eax [eax+eax*4] +
lea eax [eax+eax*4] +
lea eax [eax+eax*4] +
cmp edx eax +
jle loc_41ECD3  +
mov dword ptr [ecx] 1 +
mov dword ptr [ebx] 1388h +
mov eax [ebx] +
shl eax 2 +
lea eax [eax+eax*2] +
lea eax [eax+eax*4] +
cdq   +
idiv  dword ptr [ecx] +
mov [ebx] eax +
mov dword ptr [ecx] 3Ch +
mov eax [ecx] +
mov edx [ebx] +
cmp eax edx +
jle loc_41ED3C  +
shl edx 3 +
lea edx [edx+edx*4] +
lea edx [edx+edx*4] +
lea edx [edx+edx*4] +
lea edx [edx+edx*4] +
cmp eax edx +
jle loc_41ED10  +
mov dword ptr [ecx] 1388h +
mov dword ptr [ebx] 1 +
mov eax [ecx] +
shl eax 2 +
lea eax [eax+eax*2] +
lea eax [eax+eax*4] +
cdq   +
idiv  dword ptr [ebx] +
mov [ecx] eax +
mov dword ptr [ebx] 3Ch +
jmp loc_41ED3C  +
sar eax 1 +
jns loc_41ED2F  +
adc eax 0 +
mov [ecx] eax +
mov eax [ebx] +
sar eax 1 +
jns loc_41ED3A  +
adc eax 0 +
mov [ebx] eax +
mov eax [ecx] +
mov edx eax +
and edx 80000001h +
jns loc_41ED4D  +
dec edx  +
or edx 0FFFFFFFEh +
inc edx  +
test edx edx +
jnz loc_41ED7E  +
mov edx [ebx] +
and edx 80000001h +
jns loc_41ED60  +
dec edx  +
or edx 0FFFFFFFEh +
inc edx  +
test edx edx +
jz loc_41ED28  +
jmp loc_41ED7E  +
mov eax esi +
mov esi 3 +
cdq   +
idiv  esi +
mov [ecx] eax +
mov eax [ebx] +
mov esi 3 +
cdq   +
idiv  esi +
mov [ebx] eax +
mov esi [ecx] +
mov eax esi +
mov edi 3 +
cdq   +
idiv  edi +
test edx edx +
jnz loc_41EDB6  +
mov eax [ebx] +
mov edi 3 +
cdq   +
idiv  edi +
test edx edx +
jz loc_41ED66  +
jmp loc_41EDB6  +
mov eax esi +
mov esi 5 +
cdq   +
idiv  esi +
mov [ecx] eax +
mov eax [ebx] +
mov esi 5 +
cdq   +
idiv  esi +
mov [ebx] eax +
mov esi [ecx] +
mov eax esi +
mov edi 5 +
cdq   +
idiv  edi +
test edx edx +
jnz loc_41EDEE  +
mov eax [ebx] +
mov edi 5 +
cdq   +
idiv  edi +
test edx edx +
jz loc_41ED9E  +
jmp loc_41EDEE  +
mov eax esi +
mov esi 7 +
cdq   +
idiv  esi +
mov [ecx] eax +
mov eax [ebx] +
mov esi 7 +
cdq   +
idiv  esi +
mov [ebx] eax +
mov esi [ecx] +
mov eax esi +
mov edi 7 +
cdq   +
idiv  edi +
test edx edx +
jnz loc_41EE0C  +
mov eax [ebx] +
mov edi 7 +
cdq   +
idiv  edi +
test edx edx +
jz loc_41EDD6  +
cmp dword ptr [ecx] 0 +
jnz loc_41EE17  +
mov dword ptr [ecx] 1 +
cmp dword ptr [ebx] 0 +
jnz loc_41EE22  +
mov dword ptr [ebx] 1 +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
push ebp  +
add esp 0FFFFFFD8h +
mov esi offset dword_4EAE10 +
mov edi offset dword_4EAE08 +
mov ebp offset dword_4EAE20 +
cmp dword_4EAE0C 0 +
jg loc_41EE7D  +
push 89Eh  +
push offset a_Fisheye_c  +
push offset aAssertionFa_21  +
push offset stream  +
call _fprintf  +
add esp 10h +
push offset aThisIsABugP_21  +
push offset stream  +
call _fprintf  +
add esp 8 +
push 1  +
call _exit  +
pop ecx  +
cmp dword ptr [esi] 0 +
jge loc_41EE87  +
or ebx 0FFFFFFFFh +
jmp loc_41EE8C  +
mov ebx 1 +
mov eax [esi] +
imul  ebx +
mov [esi] eax +
mov edx dword_4EAE0C +
cmp eax edx +
jge loc_41EF5C  +
mov [esp+28h+var_20] edx +
fild  [esp+28h+var_20] +
mov [esp+28h+var_1C] eax +
fild  [esp+28h+var_1C] +
fdivp st(1) st +
fstp  [esp+28h+var_28] +
fld  [esp+28h+var_28] +
fcomp  ds:flt_41F5D4 +
fnstsw  ax +
sahf   +
jnb loc_41EEEE  +
fld  [esp+28h+var_28] +
fmul  ds:flt_41F5D8 +
fadd  ds:flt_41F5DC +
call @_ftol$qv  +
mov dword_4EAE0C eax +
mov edx ebx +
shl edx 2 +
lea edx [edx+edx*4] +
lea edx [edx+edx*4] +
mov [esi] edx +
jmp loc_41F013  +
fld  [esp+28h+var_28] +
fcomp  ds:flt_41F5D8 +
fnstsw  ax +
sahf   +
jnb loc_41EF23  +
fld  [esp+28h+var_28] +
fmul  ds:flt_41F5D4 +
fadd  ds:flt_41F5DC +
call @_ftol$qv  +
mov dword_4EAE0C eax +
mov edx ebx +
add edx edx +
lea edx [edx+edx*4] +
mov [esi] edx +
jmp loc_41F013  +
fld  [esp+28h+var_28] +
fcomp  ds:flt_41F5E0 +
fnstsw  ax +
sahf   +
jbe loc_41EF42  +
mov dword_4EAE0C 3E8h +
mov [esi] ebx +
jmp loc_41F013  +
fld  [esp+28h+var_28] +
fadd  ds:flt_41F5DC +
call @_ftol$qv  +
mov dword_4EAE0C eax +
mov [esi] ebx +
jmp loc_41F013  +
fild  dword ptr [esi] +
fild  dword_4EAE0C +
fdivp st(1) st +
fstp  [esp+28h+var_28] +
fld  [esp+28h+var_28] +
fcomp  ds:flt_41F5D4 +
fnstsw  ax +
sahf   +
jnb loc_41EF9B  +
fld  [esp+28h+var_28] +
fmul  ds:flt_41F5D8 +
fadd  ds:flt_41F5DC +
call @_ftol$qv  +
imul  ebx +
mov [esi] eax +
mov dword_4EAE0C 64h +
jmp loc_41F013  +
fld  [esp+28h+var_28] +
fcomp  ds:flt_41F5D8 +
fnstsw  ax +
sahf   +
jnb loc_41EFCD  +
fld  [esp+28h+var_28] +
fmul  ds:flt_41F5D4 +
fadd  ds:flt_41F5DC +
call @_ftol$qv  +
imul  ebx +
mov [esi] eax +
mov dword_4EAE0C 0Ah +
jmp loc_41F013  +
fld  [esp+28h+var_28] +
fcomp  ds:flt_41F5E0 +
fnstsw  ax +
sahf   +
jbe loc_41EFF7  +
mov edx ebx +
shl edx 3 +
lea edx [edx+edx*4] +
lea edx [edx+edx*4] +
lea edx [edx+edx*4] +
mov [esi] edx +
mov dword_4EAE0C 1 +
jmp loc_41F013  +
fld  [esp+28h+var_28] +
fadd  ds:flt_41F5DC +
call @_ftol$qv  +
imul  ebx +
mov [esi] eax +
mov dword_4EAE0C 1 +
cmp dword_4EAE04 0 +
jg loc_41F052  +
push 8C5h  +
push offset a_Fisheye_c_0  +
push offset aAssertionFa_22  +
push offset stream  +
call _fprintf  +
add esp 10h +
push offset aThisIsABugP_22  +
push offset stream  +
call _fprintf  +
add esp 8 +
push 1  +
call _exit  +
pop ecx  +
cmp dword ptr [edi] 0 +
jge loc_41F05C  +
or ebx 0FFFFFFFFh +
jmp loc_41F061  +
mov ebx 1 +
mov eax [edi] +
imul  ebx +
mov [edi] eax +
mov edx dword_4EAE04 +
cmp eax edx +
jge loc_41F131  +
mov [esp+28h+var_18] edx +
fild  [esp+28h+var_18] +
mov [esp+28h+var_14] eax +
fild  [esp+28h+var_14] +
fdivp st(1) st +
fstp  [esp+28h+var_28] +
fld  [esp+28h+var_28] +
fcomp  ds:flt_41F5D4 +
fnstsw  ax +
sahf   +
jnb loc_41F0C3  +
fld  [esp+28h+var_28] +
fmul  ds:flt_41F5D8 +
fadd  ds:flt_41F5DC +
call @_ftol$qv  +
mov dword_4EAE04 eax +
mov edx ebx +
shl edx 2 +
lea edx [edx+edx*4] +
lea edx [edx+edx*4] +
mov [edi] edx +
jmp loc_41F1E8  +
fld  [esp+28h+var_28] +
fcomp  ds:flt_41F5D8 +
fnstsw  ax +
sahf   +
jnb loc_41F0F8  +
fld  [esp+28h+var_28] +
fmul  ds:flt_41F5D4 +
fadd  ds:flt_41F5DC +
call @_ftol$qv  +
mov dword_4EAE04 eax +
mov edx ebx +
add edx edx +
lea edx [edx+edx*4] +
mov [edi] edx +
jmp loc_41F1E8  +
fld  [esp+28h+var_28] +
fcomp  ds:flt_41F5E0 +
fnstsw  ax +
sahf   +
jbe loc_41F117  +
mov dword_4EAE04 3E8h +
mov [edi] ebx +
jmp loc_41F1E8  +
fld  [esp+28h+var_28] +
fadd  ds:flt_41F5DC +
call @_ftol$qv  +
mov dword_4EAE04 eax +
mov [edi] ebx +
jmp loc_41F1E8  +
fild  dword ptr [edi] +
fild  dword_4EAE04 +
fdivp st(1) st +
fstp  [esp+28h+var_28] +
fld  [esp+28h+var_28] +
fcomp  ds:flt_41F5D4 +
fnstsw  ax +
sahf   +
jnb loc_41F170  +
fld  [esp+28h+var_28] +
fmul  ds:flt_41F5D8 +
fadd  ds:flt_41F5DC +
call @_ftol$qv  +
imul  ebx +
mov [edi] eax +
mov dword_4EAE04 64h +
jmp loc_41F1E8  +
fld  [esp+28h+var_28] +
fcomp  ds:flt_41F5D8 +
fnstsw  ax +
sahf   +
jnb loc_41F1A2  +
fld  [esp+28h+var_28] +
fmul  ds:flt_41F5D4 +
fadd  ds:flt_41F5DC +
call @_ftol$qv  +
imul  ebx +
mov [edi] eax +
mov dword_4EAE04 0Ah +
jmp loc_41F1E8  +
fld  [esp+28h+var_28] +
fcomp  ds:flt_41F5E0 +
fnstsw  ax +
sahf   +
jbe loc_41F1CC  +
mov edx ebx +
shl edx 3 +
lea edx [edx+edx*4] +
lea edx [edx+edx*4] +
lea edx [edx+edx*4] +
mov [edi] edx +
mov dword_4EAE04 1 +
jmp loc_41F1E8  +
fld  [esp+28h+var_28] +
fadd  ds:flt_41F5DC +
call @_ftol$qv  +
imul  ebx +
mov [edi] eax +
mov dword_4EAE04 1 +
cmp dword_4EAE1C 0 +
jg loc_41F227  +
push 8ECh  +
push offset a_Fisheye_c_1  +
push offset aAssertionFa_23  +
push offset stream  +
call _fprintf  +
add esp 10h +
push offset aThisIsABugP_23  +
push offset stream  +
call _fprintf  +
add esp 8 +
push 1  +
call _exit  +
pop ecx  +
cmp dword ptr [ebp+0] 0 +
jge loc_41F232  +
or ebx 0FFFFFFFFh +
jmp loc_41F237  +
mov ebx 1 +
mov eax [ebp+0] +
imul  ebx +
mov [ebp+0] eax +
mov edx dword_4EAE1C +
cmp eax edx +
jge loc_41F30D  +
mov [esp+28h+var_10] edx +
fild  [esp+28h+var_10] +
mov [esp+28h+var_C] eax +
fild  [esp+28h+var_C] +
fdivp st(1) st +
fstp  [esp+28h+var_28] +
fld  [esp+28h+var_28] +
fcomp  ds:flt_41F5D4 +
fnstsw  ax +
sahf   +
jnb loc_41F29C  +
fld  [esp+28h+var_28] +
fmul  ds:flt_41F5D8 +
fadd  ds:flt_41F5DC +
call @_ftol$qv  +
mov dword_4EAE1C eax +
mov edx ebx +
shl edx 2 +
lea edx [edx+edx*4] +
lea edx [edx+edx*4] +
mov [ebp+0] edx +
jmp loc_41F3C9  +
fld  [esp+28h+var_28] +
fcomp  ds:flt_41F5D8 +
fnstsw  ax +
sahf   +
jnb loc_41F2D2  +
fld  [esp+28h+var_28] +
fmul  ds:flt_41F5D4 +
fadd  ds:flt_41F5DC +
call @_ftol$qv  +
mov dword_4EAE1C eax +
mov edx ebx +
add edx edx +
lea edx [edx+edx*4] +
mov [ebp+0] edx +
jmp loc_41F3C9  +
fld  [esp+28h+var_28] +
fcomp  ds:flt_41F5E0 +
fnstsw  ax +
sahf   +
jbe loc_41F2F2  +
mov dword_4EAE1C 3E8h +
mov [ebp+0] ebx +
jmp loc_41F3C9  +
fld  [esp+28h+var_28] +
fadd  ds:flt_41F5DC +
call @_ftol$qv  +
mov dword_4EAE1C eax +
mov [ebp+0] ebx +
jmp loc_41F3C9  +
fild  dword ptr [ebp+0] +
fild  dword_4EAE1C +
fdivp st(1) st +
fstp  [esp+28h+var_28] +
fld  [esp+28h+var_28] +
fcomp  ds:flt_41F5D4 +
fnstsw  ax +
sahf   +
jnb loc_41F34E  +
fld  [esp+28h+var_28] +
fmul  ds:flt_41F5D8 +
fadd  ds:flt_41F5DC +
call @_ftol$qv  +
imul  ebx +
mov [ebp+0] eax +
mov dword_4EAE1C 64h +
jmp loc_41F3C9  +
fld  [esp+28h+var_28] +
fcomp  ds:flt_41F5D8 +
fnstsw  ax +
sahf   +
jnb loc_41F381  +
fld  [esp+28h+var_28] +
fmul  ds:flt_41F5D4 +
fadd  ds:flt_41F5DC +
call @_ftol$qv  +
imul  ebx +
mov [ebp+0] eax +
mov dword_4EAE1C 0Ah +
jmp loc_41F3C9  +
fld  [esp+28h+var_28] +
fcomp  ds:flt_41F5E0 +
fnstsw  ax +
sahf   +
jbe loc_41F3AC  +
mov edx ebx +
shl edx 3 +
lea edx [edx+edx*4] +
lea edx [edx+edx*4] +
lea edx [edx+edx*4] +
mov [ebp+0] edx +
mov dword_4EAE1C 1 +
jmp loc_41F3C9  +
fld  [esp+28h+var_28] +
fadd  ds:flt_41F5DC +
call @_ftol$qv  +
imul  ebx +
mov [ebp+0] eax +
mov dword_4EAE1C 1 +
cmp dword_4EAE14 0 +
jg loc_41F408  +
push 913h  +
push offset a_Fisheye_c_2  +
push offset aAssertionFa_24  +
push offset stream  +
call _fprintf  +
add esp 10h +
push offset aThisIsABugP_24  +
push offset stream  +
call _fprintf  +
add esp 8 +
push 1  +
call _exit  +
pop ecx  +
cmp dword_4EAE18 0 +
jge loc_41F416  +
or ebx 0FFFFFFFFh +
jmp loc_41F41B  +
mov ebx 1 +
mov eax dword_4EAE18 +
imul  ebx +
mov dword_4EAE18 eax +
mov edx dword_4EAE14 +
cmp eax edx +
jge loc_41F501  +
mov [esp+28h+var_8] edx +
fild  [esp+28h+var_8] +
mov [esp+28h+var_4] eax +
fild  [esp+28h+var_4] +
fdivp st(1) st +
fstp  [esp+28h+var_28] +
fld  [esp+28h+var_28] +
fcomp  ds:flt_41F5D4 +
fnstsw  ax +
sahf   +
jnb loc_41F487  +
fld  [esp+28h+var_28] +
fmul  ds:flt_41F5D8 +
fadd  ds:flt_41F5DC +
call @_ftol$qv  +
mov dword_4EAE14 eax +
mov edx ebx +
shl edx 2 +
lea edx [edx+edx*4] +
lea edx [edx+edx*4] +
mov dword_4EAE18 edx +
jmp loc_41F5CC  +
fld  [esp+28h+var_28] +
fcomp  ds:flt_41F5D8 +
fnstsw  ax +
sahf   +
jnb loc_41F4C0  +
fld  [esp+28h+var_28] +
fmul  ds:flt_41F5D4 +
fadd  ds:flt_41F5DC +
call @_ftol$qv  +
mov dword_4EAE14 eax +
mov edx ebx +
add edx edx +
lea edx [edx+edx*4] +
mov dword_4EAE18 edx +
jmp loc_41F5CC  +
fld  [esp+28h+var_28] +
fcomp  ds:flt_41F5E0 +
fnstsw  ax +
sahf   +
jbe loc_41F4E3  +
mov dword_4EAE14 3E8h +
mov dword_4EAE18 ebx +
jmp loc_41F5CC  +
fld  [esp+28h+var_28] +
fadd  ds:flt_41F5DC +
call @_ftol$qv  +
mov dword_4EAE14 eax +
mov dword_4EAE18 ebx +
jmp loc_41F5CC  +
fild  dword_4EAE18 +
fild  dword_4EAE14 +
fdivp st(1) st +
fstp  [esp+28h+var_28] +
fld  [esp+28h+var_28] +
fcomp  ds:flt_41F5D4 +
fnstsw  ax +
sahf   +
jnb loc_41F54A  +
fld  [esp+28h+var_28] +
fmul  ds:flt_41F5D8 +
fadd  ds:flt_41F5DC +
call @_ftol$qv  +
imul  ebx +
mov dword_4EAE18 eax +
mov dword_4EAE14 64h +
jmp loc_41F5CC  +
fld  [esp+28h+var_28] +
fcomp  ds:flt_41F5D8 +
fnstsw  ax +
sahf   +
jnb loc_41F57F  +
fld  [esp+28h+var_28] +
fmul  ds:flt_41F5D4 +
fadd  ds:flt_41F5DC +
call @_ftol$qv  +
imul  ebx +
mov dword_4EAE18 eax +
mov dword_4EAE14 0Ah +
jmp loc_41F5CC  +
fld  [esp+28h+var_28] +
fcomp  ds:flt_41F5E0 +
fnstsw  ax +
sahf   +
jbe loc_41F5AD  +
mov edx ebx +
shl edx 3 +
lea edx [edx+edx*4] +
lea edx [edx+edx*4] +
lea edx [edx+edx*4] +
mov dword_4EAE18 edx +
mov dword_4EAE14 1 +
jmp loc_41F5CC  +
fld  [esp+28h+var_28] +
fadd  ds:flt_41F5DC +
call @_ftol$qv  +
imul  ebx +
mov dword_4EAE18 eax +
mov dword_4EAE14 1 +
add esp 28h +
pop ebp  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
test ebx ebx +
jz loc_41F603  +
mov eax [ebx] +
mov byte ptr [eax+67h] 0 +
push eax  +
call sub_41F6F8  +
pop ecx  +
mov ebx [ebx+4] +
test ebx ebx +
jnz loc_41F5EF  +
mov ebx dword_4EAE28 +
test ebx ebx +
jz loc_41F61A  +
mov eax [ebx] +
mov byte ptr [eax+67h] 0 +
mov ebx [ebx+4] +
test ebx ebx +
jnz loc_41F60D  +
mov ebx dword_4EAE2C +
test ebx ebx +
jz loc_41F631  +
mov eax [ebx] +
mov byte ptr [eax+67h] 0 +
mov ebx [ebx+4] +
test ebx ebx +
jnz loc_41F624  +
mov ebx dword_4EAE30 +
test ebx ebx +
jz loc_41F648  +
mov eax [ebx] +
mov byte ptr [eax+67h] 0 +
mov ebx [ebx+4] +
test ebx ebx +
jnz loc_41F63B  +
mov ebx dword_4EAE34 +
test ebx ebx +
jz loc_41F65F  +
mov eax [ebx] +
mov byte ptr [eax+67h] 0 +
mov ebx [ebx+4] +
test ebx ebx +
jnz loc_41F652  +
call sub_404ABC  +
xor edx edx +
mov dword_4EAE34 edx +
xor ecx ecx +
mov dword_4EAE30 ecx +
xor eax eax +
mov dword_4EAE2C eax +
xor edx edx +
mov dword_4EAE24 edx +
xor ecx ecx +
mov dword_4EAE28 ecx +
pop ebx  +
retn   +
***
push ebx  +
mov ebx [ebp+arg_0] +
test ebx ebx +
jz loc_41F6F2  +
cmp byte ptr [ebx+67h] 1 +
jnz loc_41F6D2  +
mov byte ptr [ebx+67h] 0 +
mov eax dword_4EAE24 +
mov edx offset dword_4EAE24 +
test eax eax +
jz loc_41F6C8  +
cmp ebx [eax] +
jnz loc_41F6BE  +
mov ecx [eax+4] +
mov [edx] ecx +
jmp loc_41F6C8  +
lea edx [eax+4] +
mov eax [eax+4] +
test eax eax +
jnz loc_41F6B3  +
push ebx  +
call sub_41F6F8  +
pop ecx  +
pop ebx  +
pop ebp  +
retn   +
mov byte ptr [ebx+67h] 1 +
call sub_404A54  +
mov [eax] ebx +
mov ecx dword_4EAE24 +
mov [eax+4] ecx +
mov dword_4EAE24 eax +
push ebx  +
call sub_41F6F8  +
pop ecx  +
pop ebx  +
pop ebp  +
retn   +
***
push ebx  +
push esi  +
mov eax [ebp+arg_0] +
movsx esi byte ptr [eax+67h] +
mov ebx [eax+40h] +
test ebx ebx +
jz loc_41F726  +
mov eax [ebx] +
mov edx esi +
mov [eax+67h] dl +
cmp dword ptr [eax+40h] 0 +
jz loc_41F71F  +
push eax  +
call sub_41F6F8  +
pop ecx  +
mov ebx [ebx+4] +
test ebx ebx +
jnz loc_41F70B  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+8] +
test ebx ebx +
jz loc_41F780  +
cmp byte ptr [ebx+67h] 1 +
jnz loc_41F767  +
mov byte ptr [ebx+67h] 0 +
mov eax dword_4EAE28 +
mov edx offset dword_4EAE28 +
test eax eax +
jz loc_41F780  +
cmp ebx [eax] +
jnz loc_41F75A  +
mov ecx [eax+4] +
mov [edx] ecx +
jmp loc_41F780  +
lea edx [eax+4] +
mov eax [eax+4] +
test eax eax +
jnz loc_41F74F  +
pop ebx  +
pop ebp  +
retn   +
***
mov byte ptr [ebx+67h] 1 +
call sub_404A54  +
mov [eax] ebx +
mov ecx dword_4EAE28 +
mov [eax+4] ecx +
mov dword_4EAE28 eax +
pop ebx  +
pop ebp  +
retn   +
***
push ebx  +
mov ebx [ebp+arg_0] +
test ebx ebx +
jz loc_41F7DE  +
cmp byte ptr [ebx+67h] 2 +
jnz loc_41F7BF  +
mov byte ptr [ebx+67h] 0 +
mov eax dword_4EAE30 +
mov edx offset dword_4EAE30 +
test eax eax +
jz loc_41F7DE  +
cmp ebx [eax] +
jnz loc_41F7B2  +
mov ecx [eax+4] +
mov [edx] ecx +
jmp loc_41F7DE  +
lea edx [eax+4] +
mov eax [eax+4] +
test eax eax +
jnz loc_41F7A7  +
pop ebx  +
pop ebp  +
retn   +
cmp byte ptr [ebx+67h] 1 +
jz loc_41F7DE  +
mov byte ptr [ebx+67h] 2 +
call sub_404A54  +
mov [eax] ebx +
mov ecx dword_4EAE30 +
mov [eax+4] ecx +
mov dword_4EAE30 eax +
pop ebx  +
pop ebp  +
retn   +
***
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+8] +
test ebx ebx +
jz loc_41F838  +
cmp byte ptr [ebx+67h] 1 +
jnz loc_41F81F  +
mov byte ptr [ebx+67h] 0 +
mov eax dword_4EAE34 +
mov edx offset dword_4EAE34 +
test eax eax +
jz loc_41F838  +
cmp ebx [eax] +
jnz loc_41F812  +
mov ecx [eax+4] +
mov [edx] ecx +
jmp loc_41F838  +
lea edx [eax+4] +
mov eax [eax+4] +
test eax eax +
jnz loc_41F807  +
pop ebx  +
pop ebp  +
retn   +
***
mov byte ptr [ebx+67h] 1 +
call sub_404A54  +
mov [eax] ebx +
mov ecx dword_4EAE34 +
mov [eax+4] ecx +
mov dword_4EAE34 eax +
pop ebx  +
pop ebp  +
retn   +
***
push ebx  +
mov ebx [ebp+arg_0] +
test ebx ebx +
jz loc_41F890  +
cmp byte ptr [ebx+67h] 1 +
jnz loc_41F877  +
mov byte ptr [ebx+67h] 0 +
mov eax dword_4EAE2C +
mov edx offset dword_4EAE2C +
test eax eax +
jz loc_41F890  +
cmp ebx [eax] +
jnz loc_41F86A  +
mov ecx [eax+4] +
mov [edx] ecx +
jmp loc_41F890  +
lea edx [eax+4] +
mov eax [eax+4] +
test eax eax +
jnz loc_41F85F  +
pop ebx  +
pop ebp  +
retn   +
mov byte ptr [ebx+67h] 1 +
call sub_404A54  +
mov [eax] ebx +
mov ecx dword_4EAE2C +
mov [eax+4] ecx +
mov dword_4EAE2C eax +
pop ebx  +
pop ebp  +
retn   +
***
mov edx [ebp+arg_0] +
push edi  +
mov edi offset dword_4EBDE0 +
cmp dword_4CD144 0 +
jz loc_41F90B  +
push 2A0h  +
push offset a_Folding_c_17  +
push offset aAssertionFa_44  +
push offset stream  +
call _fprintf  +
add esp 10h +
push offset aThisIsABugP_44  +
push offset stream  +
call _fprintf  +
add esp 8 +
push 1  +
call _exit  +
pop ecx  +
cmp dword_4CD150 0 +
jz loc_41F94A  +
push 2A1h  +
push offset a_Folding_c_18  +
push offset aAssertionFa_45  +
push offset stream  +
call _fprintf  +
add esp 10h +
push offset aThisIsABugP_45  +
push offset stream  +
call _fprintf  +
add esp 8 +
push 1  +
call _exit  +
pop ecx  +
cmp dword_4CD170 0 +
jz loc_41F989  +
push 2A2h  +
push offset a_Folding_c_19  +
push offset aAssertionFa_46  +
push offset stream  +
call _fprintf  +
add esp 10h +
push offset aThisIsABugP_46  +
push offset stream  +
call _fprintf  +
add esp 8 +
push 1  +
call _exit  +
pop ecx  +
cmp dword_4EBD98 0 +
jnz loc_41F999  +
xor eax eax +
mov dword_4D4B34 eax +
cmp dword_4EBD9C 1 +
jnz loc_41F9AA  +
xor edx edx +
mov dword_4D4B34 edx +
push 66h  +
call sub_42A930  +
pop ecx  +
mov eax dword_4CD140 +
test eax eax +
jz loc_41F9CF  +
mov ebx [eax+5Ch] +
push 4  +
push eax  +
call sub_41FC60  +
add esp 8 +
mov eax ebx +
test eax eax +
jnz loc_41F9BB  +
xor edx edx +
mov dword_4CD140 edx +
mov ebx dword_4EAE24 +
test ebx ebx +
jz loc_41F9F1  +
mov eax [ebx] +
push eax  +
call sub_41FDA8  +
pop ecx  +
mov ebx [ebx+4] +
test ebx ebx +
jnz loc_41F9E1  +
mov ebx dword_4EAE28 +
test ebx ebx +
jz loc_41FA0B  +
mov eax [ebx] +
push eax  +
call sub_41FDC8  +
pop ecx  +
mov ebx [ebx+4] +
test ebx ebx +
jnz loc_41F9FB  +
mov ebx dword_4EAE34 +
test ebx ebx +
jz loc_41FA25  +
mov eax [ebx] +
push eax  +
call sub_42013C  +
pop ecx  +
mov ebx [ebx+4] +
test ebx ebx +
jnz loc_41FA15  +
push 66h  +
call sub_42A930  +
pop ecx  +
call sub_420718  +
call sub_421244  +
call sub_4202E4  +
xor esi esi +
mov ebx dword_4EAE30 +
test ebx ebx +
jz loc_41FA67  +
mov eax [ebx] +
test eax eax +
jz loc_41FA60  +
movsx edx byte ptr [eax+2Ah] +
cmp esi edx +
jnz loc_41FA60  +
push esi  +
push eax  +
call sub_41FE14  +
add esp 8 +
mov ebx [ebx+4] +
test ebx ebx +
jnz loc_41FA48  +
inc esi  +
cmp esi 11h +
jl loc_41FA3E  +
call sub_420718  +
cmp dword_4EBD98 1 +
jnz loc_41FA94  +
cmp dword_4EBD9C 0 +
jnz loc_41FA94  +
cmp dword_4D4B34 0 +
jnz loc_41FA94  +
call sub_42126C  +
jmp loc_41FA99  +
call sub_421244  +
push 66h  +
call sub_42A930  +
pop ecx  +
call sub_4202E4  +
call sub_4208DC  +
mov dword ptr [edi] 1 +
mov eax dword_4CD130 +
jmp loc_41FAD5  +
mov edx [eax+20h] +
test edx edx +
jnz loc_41FAC9  +
cmp dword ptr [eax+24h] 0 +
jnz loc_41FAC9  +
xor ecx ecx +
mov [edi] ecx +
mov [eax+54h] edx +
mov edx [eax+24h] +
mov [eax+58h] edx +
mov eax [eax+5Ch] +
test eax eax +
jz loc_41FADE  +
cmp dword ptr [edi] 0 +
jnz loc_41FAB8  +
cmp dword ptr [edi] 0 +
jz loc_41FB24  +
cmp dword_4EBD98 1 +
jnz loc_41FB24  +
call sub_404884  +
call sub_420718  +
call sub_421244  +
push 66h  +
call sub_42A930  +
pop ecx  +
call sub_4202E4  +
mov eax dword_4CD130 +
test eax eax +
jz loc_41FB24  +
mov ecx [eax+20h] +
mov [eax+54h] ecx +
mov edx [eax+24h] +
mov [eax+58h] edx +
mov eax [eax+5Ch] +
test eax eax +
jnz loc_41FB11  +
push 66h  +
call sub_42A930  +
pop ecx  +
cmp dword_4D4B18 0 +
jz loc_41FB3A  +
call sub_421368  +
cmp dword ptr [edi] 0 +
jnz loc_41FB4D  +
cmp dword_4D4B18 0 +
jnz loc_41FB4D  +
call sub_4214FC  +
call sub_41F5E4  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push ebx  +
push esi  +
mov esi [ebp+arg_4] +
mov ebx [ebp+arg_0] +
test ebx ebx +
jnz loc_41FB9D  +
push 361h  +
push offset a_Folding_c  +
push offset aAssertionFa_25  +
push offset stream  +
call _fprintf  +
add esp 10h +
push offset aThisIsABugP_25  +
push offset stream  +
call _fprintf  +
add esp 8 +
push 1  +
call _exit  +
pop ecx  +
test esi esi +
jnz loc_41FBD7  +
push 362h  +
push offset a_Folding_c_0  +
push offset aAssertionFa_26  +
push offset stream  +
call _fprintf  +
add esp 10h +
push offset aThisIsABugP_26  +
push offset stream  +
call _fprintf  +
add esp 8 +
push 1  +
call _exit  +
pop ecx  +
cmp byte ptr [ebx+64h] 0 +
jz loc_41FC59  +
mov byte ptr [ebx+64h] 0 +
mov eax esi +
mov [ebx+65h] al +
mov eax [ebx+60h] +
test eax eax +
jz loc_41FBF5  +
mov edx [ebx+5Ch] +
mov [eax+5Ch] edx +
jmp loc_41FBFE  +
mov ecx [ebx+5Ch] +
mov dword_4CD130 ecx +
mov eax [ebx+5Ch] +
test eax eax +
jz loc_41FC0D  +
mov edx [ebx+60h] +
mov [eax+60h] edx +
jmp loc_41FC16  +
mov ecx [ebx+60h] +
mov dword_4CD134 ecx +
xor eax eax +
xor edx edx +
mov [ebx+5Ch] eax +
mov [ebx+60h] edx +
cmp dword ptr [ebx+40h] 0 +
jz loc_41FC53  +
dec esi  +
jnz loc_41FC53  +
mov ecx dword_4CD13C +
mov [ebx+60h] ecx +
mov eax dword_4CD13C +
test eax eax +
jz loc_41FC3E  +
mov [eax+5Ch] ebx +
mov dword_4CD13C ebx +
cmp dword_4CD138 0 +
jnz loc_41FC53  +
mov dword_4CD138 ebx +
dec dword_4CD128  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
test edi edi +
jz loc_41FE0E  +
mov esi [edi+40h] +
test esi esi +
jz loc_41FE03  +
mov ebx [esi] +
push 2  +
push ebx  +
call sub_41FC60  +
add esp 8 +
cmp dword ptr [ebx+40h] 0 +
jz loc_41FDFC  +
cmp byte ptr [ebx+65h] 1 +
jnz loc_41FDFC  +
push ebx  +
call sub_41FDC8  +
pop ecx  +
mov esi [esi+4] +
test esi esi +
jnz loc_41FDDC  +
push 1  +
push edi  +
call sub_41FB58  +
add esp 8 +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
push ebx  +
push ebx  +
push esi  +
push edi  +
cmp [ebp+arg_0] 0 +
mov edi [ebp+arg_8] +
jnz loc_41FF39  +
push 462h  +
push offset a_Folding_c_4  +
push offset aAssertionFa_30  +
push offset stream  +
call _fprintf  +
add esp 10h +
push offset aThisIsABugP_30  +
push offset stream  +
call _fprintf  +
add esp 8 +
push 1  +
call _exit  +
pop ecx  +
cmp [ebp+arg_4] 0 +
jnz loc_41FF75  +
push 463h  +
push offset a_Folding_c_5  +
push offset aAssertionFa_31  +
push offset stream  +
call _fprintf  +
add esp 10h +
push offset aThisIsABugP_31  +
push offset stream  +
call _fprintf  +
add esp 8 +
push 1  +
call _exit  +
pop ecx  +
mov eax [ebp+arg_0] +
cmp byte ptr [eax+64h] 0 +
jz loc_420134  +
mov edx [ebp+arg_0] +
mov ecx [edx+50h] +
cmp ecx [ebp+arg_4] +
jz loc_420134  +
mov eax [ebp+arg_0] +
cmp eax [ebp+arg_4] +
jz loc_420134  +
mov edx [ebp+arg_0] +
mov ecx [ebp+arg_4] +
mov [edx+50h] ecx +
mov eax [ebp+arg_0] +
push eax  +
call sub_404A00  +
pop ecx  +
mov edx [ebp+arg_4] +
cmp dword ptr [edx+4Ch] 0 +
jnz loc_41FFC6  +
xor ecx ecx +
mov [eax+4] ecx +
mov edx [ebp+arg_4] +
mov [edx+4Ch] eax +
jmp loc_41FFD5  +
mov ecx [ebp+arg_4] +
mov edx [ecx+4Ch] +
mov [eax+4] edx +
mov ecx [ebp+arg_4] +
mov [ecx+4Ch] eax +
push 3  +
mov eax [ebp+arg_0] +
push eax  +
call sub_41FB58  +
add esp 8 +
mov eax [ebp+arg_0] +
mov ebx [eax+98h] +
test ebx ebx +
jz loc_420024  +
mov esi [ebx] +
movsx eax byte ptr [esi+38h] +
cmp edi eax +
jl loc_42001D  +
mov edx [esi+1Ch] +
push edx  +
call sub_41F894  +
pop ecx  +
test eax eax +
jnz loc_42001D  +
mov byte ptr [esi+43h] 1 +
push edi  +
mov ecx [ebp+arg_4] +
push ecx  +
mov eax [esi+1Ch] +
push eax  +
call sub_41FEF4  +
add esp 0Ch +
mov ebx [ebx+4] +
test ebx ebx +
jnz loc_41FFF0  +
mov edx [ebp+arg_0] +
mov ebx [edx+94h] +
test ebx ebx +
jz loc_4200A2  +
mov esi [ebx] +
push esi  +
call sub_4210FC  +
pop ecx  +
mov edi eax +
cmp esi edi +
jz loc_42009B  +
push esi  +
call sub_420DE4  +
pop ecx  +
test edi edi +
jz loc_420089  +
mov eax [edi+1Ch] +
cmp eax [ebp+arg_4] +
jz loc_420089  +
push 493h  +
push offset a_Folding_c_6  +
push offset aAssertionFa_32  +
push offset stream  +
call _fprintf  +
add esp 10h +
push offset aThisIsABugP_32  +
push offset stream  +
call _fprintf  +
add esp 8 +
push 1  +
call _exit  +
pop ecx  +
test edi edi +
jz loc_42009B  +
mov edx [edi] +
cmp edx [ebp+arg_4] +
jz loc_42009B  +
push edi  +
call sub_420CDC  +
pop ecx  +
mov ebx [ebx+4] +
test ebx ebx +
jnz loc_420031  +
mov ecx [ebp+arg_0] +
mov ebx [ecx+98h] +
test ebx ebx +
jz loc_420120  +
mov esi [ebx] +
push esi  +
call sub_4210FC  +
pop ecx  +
mov edi eax +
cmp esi edi +
jz loc_420119  +
push esi  +
call sub_420DE4  +
pop ecx  +
test edi edi +
jz loc_420106  +
mov eax [edi] +
cmp eax [ebp+arg_4] +
jz loc_420106  +
push 4A6h  +
push offset a_Folding_c_7  +
push offset aAssertionFa_33  +
push offset stream  +
call _fprintf  +
add esp 10h +
push offset aThisIsABugP_33  +
push offset stream  +
call _fprintf  +
add esp 8 +
push 1  +
call _exit  +
pop ecx  +
test edi edi +
jz loc_420119  +
mov edx [edi+1Ch] +
cmp edx [ebp+arg_4] +
jz loc_420119  +
push edi  +
call sub_420CDC  +
pop ecx  +
mov ebx [ebx+4] +
test ebx ebx +
jnz loc_4200AF  +
mov ecx [ebp+arg_0] +
xor eax eax +
mov [ecx+98h] eax +
mov edx [ebp+arg_0] +
mov [edx+94h] eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
push ebx  +
push esi  +
push edi  +
mov ebx [ebp+arg_0] +
test ebx ebx +
jnz loc_42017F  +
push 4BFh  +
push offset a_Folding_c_8  +
push offset aAssertionFa_34  +
push offset stream  +
call _fprintf  +
add esp 10h +
push offset aThisIsABugP_34  +
push offset stream  +
call _fprintf  +
add esp 8 +
push 1  +
call _exit  +
pop ecx  +
mov eax [ebx+48h] +
test eax eax +
jz loc_420244  +
mov esi [ebx+4Ch] +
mov edx [eax+8] +
mov [ebx+8] edx +
mov edi esi +
mov cl [eax+28h] +
mov [ebx+28h] cl +
mov edx [eax+18h] +
mov [ebx+18h] edx +
mov ecx [eax+1Ch] +
mov [ebx+1Ch] ecx +
mov dl [eax+29h] +
mov [ebx+29h] dl +
mov ecx [eax+20h] +
mov [ebx+20h] ecx +
mov edx [eax+24h] +
mov [ebx+24h] edx +
mov cl [eax+2Ah] +
mov [ebx+2Ah] cl +
mov dl [eax+2Bh] +
mov [ebx+2Bh] dl +
mov cl [eax+2Ch] +
mov [ebx+2Ch] cl +
mov dl [eax+2Dh] +
mov [ebx+2Dh] dl +
mov ecx [eax+30h] +
mov [ebx+30h] ecx +
mov edx [eax+34h] +
mov [ebx+34h] edx +
mov ecx [eax+0Ch] +
mov [ebx+0Ch] ecx +
mov edx [eax+10h] +
mov [ebx+10h] edx +
mov ecx [eax+14h] +
mov [ebx+14h] ecx +
mov edx [eax+38h] +
mov [ebx+38h] edx +
mov cl [eax+2Fh] +
mov [ebx+2Fh] cl +
mov edx [eax+3Ch] +
mov [ebx+3Ch] edx +
mov ecx [eax+44h] +
mov [ebx+44h] ecx +
mov edx [eax+48h] +
mov [ebx+48h] edx +
mov ecx [eax+4Ch] +
mov [ebx+4Ch] ecx +
mov edx [eax+50h] +
mov [ebx+50h] edx +
push eax  +
call sub_4048D4  +
pop ecx  +
test esi esi +
jz loc_42023D  +
mov eax [esi] +
xor ecx ecx +
mov [eax+50h] ecx +
push 3  +
push eax  +
call sub_41FC60  +
add esp 8 +
mov esi [esi+4] +
test esi esi +
jnz loc_420224  +
push edi  +
call sub_404AEC  +
pop ecx  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
cmp dword_4CDF6C 0 +
jz locret_42026D  +
xor eax eax +
jmp loc_420265  +
mov edx dword_4CDF6C +
xor ecx ecx +
mov [edx+eax*4] ecx +
inc eax  +
cmp eax dword_4EBDD8 +
jl loc_420259  +
retn   +
***
push ebx  +
mov ebx [ebp+arg_0] +
cmp byte ptr [ebx+64h] 0 +
jnz loc_4202C4  +
mov eax [ebx+60h] +
test eax eax +
jz loc_42028C  +
mov edx [ebx+5Ch] +
mov [eax+5Ch] edx +
jmp loc_420295  +
mov ecx [ebx+5Ch] +
mov dword_4CD144 ecx +
mov eax [ebx+5Ch] +
test eax eax +
jz loc_4202A4  +
mov edx [ebx+60h] +
mov [eax+60h] edx +
jmp loc_4202AD  +
mov ecx [ebx+60h] +
mov dword_4CD148 ecx +
xor eax eax +
mov [ebx+60h] eax +
mov edx dword_4EAE38 +
mov [ebx+5Ch] edx +
mov dword_4EAE38 ebx +
pop ebx  +
pop ebp  +
retn   +
push 4  +
push ebx  +
call sub_41FB58  +
add esp 8 +
mov ecx dword_4CD140 +
mov [ebx+5Ch] ecx +
mov dword_4CD140 ebx +
pop ebx  +
pop ebp  +
retn   +
***
push esi  +
push edi  +
mov dword_4EAE38 eax +
push ebp  +
mov edi dword_4CD130 +
push ecx  +
test edi edi +
jz loc_42040C  +
mov eax [edi+5Ch] +
mov [esp+10h+var_10] eax +
mov eax [edi+94h] +
test eax eax +
jnz loc_42031B  +
cmp dword ptr [edi+98h] 0 +
jz loc_4203F1  +
mov ebp 1 +
mov esi eax +
jmp loc_420378  +
mov ebx [esi] +
cmp byte ptr [ebx+38h] 0 +
jg loc_420362  +
push 54Ch  +
push offset a_Folding_c_20  +
push offset aAssertionFa_47  +
push offset stream  +
call _fprintf  +
add esp 10h +
push offset aThisIsABugP_47  +
push offset stream  +
call _fprintf  +
add esp 8 +
push 1  +
call _exit  +
pop ecx  +
movsx eax byte ptr [ebx+38h] +
mov edx dword_4CDF6C +
cmp dword ptr [edx+eax*4-4] 0 +
jnz loc_420375  +
xor ebp ebp +
mov esi [esi+4] +
test esi esi +
jz loc_420380  +
test ebp ebp +
jnz loc_420324  +
mov esi [edi+98h] +
jmp loc_4203DC  +
mov ebx [esi] +
cmp byte ptr [ebx+38h] 0 +
jg loc_4203C6  +
push 553h  +
push offset a_Folding_c_21  +
push offset aAssertionFa_48  +
push offset stream  +
call _fprintf  +
add esp 10h +
push offset aThisIsABugP_48  +
push offset stream  +
call _fprintf  +
add esp 8 +
push 1  +
call _exit  +
pop ecx  +
movsx eax byte ptr [ebx+38h] +
mov edx dword_4CDF6C +
cmp dword ptr [edx+eax*4-4] 0 +
jnz loc_4203D9  +
xor ebp ebp +
mov esi [esi+4] +
test esi esi +
jz loc_4203E4  +
test ebp ebp +
jnz loc_420388  +
test ebp ebp +
jz loc_420401  +
push edi  +
call sub_420270  +
pop ecx  +
jmp loc_420401  +
cmp dword_4D4B1C 0 +
jz loc_420401  +
push edi  +
call sub_420270  +
pop ecx  +
mov edi [esp+10h+var_10] +
test edi edi +
jnz loc_4202FE  +
mov edi dword_4CD144 +
test edi edi +
jz loc_420528  +
mov eax [edi+5Ch] +
mov [esp+10h+var_10] eax +
mov eax [edi+94h] +
test eax eax +
jnz loc_420437  +
cmp dword ptr [edi+98h] 0 +
jz loc_42050D  +
mov ebp 1 +
mov esi eax +
jmp loc_420494  +
mov ebx [esi] +
cmp byte ptr [ebx+38h] 0 +
jg loc_42047E  +
push 564h  +
push offset a_Folding_c_22  +
push offset aAssertionFa_49  +
push offset stream  +
call _fprintf  +
add esp 10h +
push offset aThisIsABugP_49  +
push offset stream  +
call _fprintf  +
add esp 8 +
push 1  +
call _exit  +
pop ecx  +
movsx eax byte ptr [ebx+38h] +
mov edx dword_4CDF6C +
cmp dword ptr [edx+eax*4-4] 0 +
jnz loc_420491  +
xor ebp ebp +
mov esi [esi+4] +
test esi esi +
jz loc_42049C  +
test ebp ebp +
jnz loc_420440  +
mov esi [edi+98h] +
jmp loc_4204F8  +
mov ebx [esi] +
cmp byte ptr [ebx+38h] 0 +
jg loc_4204E2  +
push 56Bh  +
push offset a_Folding_c_23  +
push offset aAssertionFa_50  +
push offset stream  +
call _fprintf  +
add esp 10h +
push offset aThisIsABugP_50  +
push offset stream  +
call _fprintf  +
add esp 8 +
push 1  +
call _exit  +
pop ecx  +
movsx eax byte ptr [ebx+38h] +
mov edx dword_4CDF6C +
cmp dword ptr [edx+eax*4-4] 0 +
jnz loc_4204F5  +
xor ebp ebp +
mov esi [esi+4] +
test esi esi +
jz loc_420500  +
test ebp ebp +
jnz loc_4204A4  +
test ebp ebp +
jz loc_42051D  +
push edi  +
call sub_420270  +
pop ecx  +
jmp loc_42051D  +
cmp dword_4D4B1C 0 +
jz loc_42051D  +
push edi  +
call sub_420270  +
pop ecx  +
mov edi [esp+10h+var_10] +
test edi edi +
jnz loc_42041A  +
mov edi dword_4CD140 +
test edi edi +
jz loc_420599  +
mov esi [edi+98h] +
test esi esi +
jz loc_420592  +
mov ebp [esi+4] +
mov ebx [esi] +
test ebx ebx +
jnz loc_42057B  +
push 57Ch  +
push offset a_Folding_c_24  +
push offset aAssertionFa_51  +
push offset stream  +
call _fprintf  +
add esp 10h +
push offset aThisIsABugP_51  +
push offset stream  +
call _fprintf  +
add esp 8 +
push 1  +
call _exit  +
pop ecx  +
cmp byte ptr [ebx+43h] 0 +
jnz loc_420588  +
push ebx  +
call sub_420DE4  +
pop ecx  +
mov byte ptr [ebx+43h] 1 +
mov esi ebp +
test esi esi +
jnz loc_42053C  +
mov edi [edi+5Ch] +
test edi edi +
jnz loc_420532  +
mov edi dword_4CD144 +
test edi edi +
jz loc_4205C1  +
mov eax [edi+5Ch] +
mov [esp+10h+var_10] eax +
mov esi [edi+94h] +
test esi esi +
jnz loc_4205BA  +
push edi  +
call sub_420270  +
pop ecx  +
mov edi [esp+10h+var_10] +
test edi edi +
jnz loc_4205A3  +
mov edi dword_4EAE38 +
test edi edi +
jz loc_420632  +
mov esi [edi+98h] +
test esi esi +
jz loc_42062B  +
mov ebp [esi+4] +
mov ebx [esi] +
test ebx ebx +
jnz loc_420614  +
push 598h  +
push offset a_Folding_c_25  +
push offset aAssertionFa_52  +
push offset stream  +
call _fprintf  +
add esp 10h +
push offset aThisIsABugP_52  +
push offset stream  +
call _fprintf  +
add esp 8 +
push 1  +
call _exit  +
pop ecx  +
cmp byte ptr [ebx+43h] 0 +
jnz loc_420621  +
push ebx  +
call sub_420DE4  +
pop ecx  +
mov byte ptr [ebx+43h] 1 +
mov esi ebp +
test esi esi +
jnz loc_4205D5  +
mov edi [edi+5Ch] +
test edi edi +
jnz loc_4205CB  +
mov ebx dword_4CD168 +
test ebx ebx +
jz loc_4206A1  +
cmp byte ptr [ebx+38h] 0 +
jg loc_420678  +
push 5A2h  +
push offset a_Folding_c_26  +
push offset aAssertionFa_53  +
push offset stream  +
call _fprintf  +
add esp 10h +
push offset aThisIsABugP_53  +
push offset stream  +
call _fprintf  +
add esp 8 +
push 1  +
call _exit  +
pop ecx  +
movsx eax byte ptr [ebx+38h] +
mov edx dword_4CDF6C +
cmp dword ptr [edx+eax*4-4] 0 +
jz loc_42069A  +
cmp byte ptr [ebx+43h] 0 +
jnz loc_420696  +
push ebx  +
call sub_420DE4  +
pop ecx  +
mov byte ptr [ebx+43h] 1 +
mov ebx [ebx+50h] +
test ebx ebx +
jnz loc_42063C  +
mov ebx dword_4CD170 +
test ebx ebx +
jz loc_420710  +
cmp byte ptr [ebx+38h] 0 +
jg loc_4206E7  +
push 5ABh  +
push offset a_Folding_c_27  +
push offset aAssertionFa_54  +
push offset stream  +
call _fprintf  +
add esp 10h +
push offset aThisIsABugP_54  +
push offset stream  +
call _fprintf  +
add esp 8 +
push 1  +
call _exit  +
pop ecx  +
movsx eax byte ptr [ebx+38h] +
mov edx dword_4CDF6C +
cmp dword ptr [edx+eax*4-4] 0 +
jz loc_420709  +
cmp byte ptr [ebx+43h] 0 +
jnz loc_420705  +
push ebx  +
call sub_420DE4  +
pop ecx  +
mov byte ptr [ebx+43h] 1 +
mov ebx [ebx+58h] +
test ebx ebx +
jnz loc_4206AB  +
pop edx  +
pop ebp  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
cmp dword_4CD144 0 +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_4208D7  +
mov dword ptr [eax+6Ch] 0FFFFFFFFh +
mov dword ptr [eax+70h] 0FFFFFFFFh +
mov byte ptr [eax+66h] 0 +
mov byte ptr [eax+67h] 0 +
xor edx edx +
xor ecx ecx +
mov [eax+84h] edx +
xor edx edx +
mov [eax+88h] ecx +
xor ecx ecx +
mov [eax+80h] edx +
xor edx edx +
mov [eax+54h] ecx +
xor ecx ecx +
mov [eax+58h] edx +
xor edx edx +
mov [eax+0B4h] ecx +
mov [eax+94h] edx +
xor ecx ecx +
mov [eax+98h] edx +
mov [eax+0B0h] ecx +
xor edx edx +
mov [eax+0ACh] ecx +
mov [eax+0A8h] edx +
mov [eax+0A4h] edx +
mov eax [eax+5Ch] +
test eax eax +
jnz loc_420866  +
pop ebp  +
retn   +
***
push edi  +
push ebp  +
mov edi offset unk_4CDF70 +
mov ebx dword_4CD130 +
xor eax eax +
test ebx ebx +
jz loc_420901  +
inc eax  +
mov edx [ebx] +
mov [ebx+80h] edx +
mov ebx [ebx+5Ch] +
test ebx ebx +
jnz loc_4208F1  +
mov esi eax +
cmp esi 2 +
jl loc_420BE8  +
lea ebx [esi+2] +
cmp ebx dword_4CDF74 +
jle loc_420950  +
mov eax [edi] +
test eax eax +
jz loc_420924  +
push eax  +
call _free  +
pop ecx  +
mov edx ebx +
shl edx 2 +
push edx  +
call _malloc  +
pop ecx  +
mov ebp eax +
mov [edi] ebp +
test ebp ebp +
jnz loc_42094A  +
push offset unk_4CE968  +
push offset aMemoryExhaus_2  +
call sub_42A3F8  +
add esp 8 +
mov dword_4CDF74 ebx +
mov ebx dword_4CD130 +
xor eax eax +
test ebx ebx +
jz loc_420969  +
mov edx [edi] +
mov [edx+eax*4] ebx +
inc eax  +
mov ebx [ebx+5Ch] +
test ebx ebx +
jnz loc_42095C  +
push offset fcmp  +
push 4  +
push esi  +
mov ecx [edi] +
push ecx  +
call _qsort  +
add esp 10h +
cmp dword_4D4C40 0 +
jle loc_4209A3  +
push 0Ah  +
call sub_43FD4C  +
pop ecx  +
test eax eax +
jz loc_4209A3  +
mov dword_4D4B20 1 +
push 74h  +
call sub_42A930  +
pop ecx  +
mov ebx dword_4CD130 +
mov eax dword_4D4B20 +
add eax 0FFFFFFFCh +
cmp eax 7 +
ja loc_420B50  +
jmp ds:off_4209C1[eax*4]  +
test ebx ebx +
jz loc_420B50  +
cmp dword_4D4C40 0 +
jle loc_420A15  +
push 0Fh  +
call sub_43FD4C  +
pop ecx  +
test eax eax +
jz loc_420A15  +
push 74h  +
call sub_42A930  +
pop ecx  +
mov dword_4D4B20 1 +
jmp loc_420B50  +
mov eax dword_4CD130 +
test eax eax +
jz loc_420A29  +
mov byte ptr [eax+66h] 0 +
mov eax [eax+5Ch] +
test eax eax +
jnz loc_420A1E  +
push ebx  +
call sub_420C28  +
neg eax  +
pop ecx  +
mov [ebx+80h] eax +
mov ebx [ebx+5Ch] +
test ebx ebx +
jnz loc_4209E9  +
jmp loc_420B50  +
test ebx ebx +
jz loc_420B50  +
cmp dword_4D4C40 0 +
jle loc_420A78  +
push 0Fh  +
call sub_43FD4C  +
pop ecx  +
test eax eax +
jz loc_420A78  +
push 74h  +
call sub_42A930  +
pop ecx  +
mov dword_4D4B20 1 +
jmp loc_420B50  +
mov eax dword_4CD130 +
test eax eax +
jz loc_420A8C  +
mov byte ptr [eax+66h] 0 +
mov eax [eax+5Ch] +
test eax eax +
jnz loc_420A81  +
push ebx  +
call sub_420C28  +
pop ecx  +
mov [ebx+80h] eax +
mov ebx [ebx+5Ch] +
test ebx ebx +
jnz loc_420A4C  +
jmp loc_420B50  +
test ebx ebx +
jz loc_420B50  +
push ebx  +
call sub_420C6C  +
pop ecx  +
mov [ebx+80h] eax +
mov ebx [ebx+5Ch] +
test ebx ebx +
jnz loc_420AAD  +
jmp loc_420B50  +
test ebx ebx +
jz loc_420B50  +
push ebx  +
call sub_420C6C  +
neg eax  +
pop ecx  +
mov [ebx+80h] eax +
mov ebx [ebx+5Ch] +
test ebx ebx +
jnz loc_420ACE  +
jmp loc_420B50  +
test ebx ebx +
jz loc_420B50  +
push ebx  +
call sub_420C8C  +
pop ecx  +
mov [ebx+80h] eax +
mov ebx [ebx+5Ch] +
test ebx ebx +
jnz loc_420AEA  +
jmp loc_420B50  +
test ebx ebx +
jz loc_420B50  +
push ebx  +
call sub_420C8C  +
neg eax  +
pop ecx  +
mov [ebx+80h] eax +
mov ebx [ebx+5Ch] +
test ebx ebx +
jnz loc_420B04  +
jmp loc_420B50  +
test ebx ebx +
jz loc_420B50  +
push ebx  +
call sub_420CAC  +
pop ecx  +
mov [ebx+80h] eax +
mov ebx [ebx+5Ch] +
test ebx ebx +
jnz loc_420B20  +
jmp loc_420B50  +
test ebx ebx +
jz loc_420B50  +
push ebx  +
call sub_420CAC  +
neg eax  +
pop ecx  +
mov [ebx+80h] eax +
mov ebx [ebx+5Ch] +
test ebx ebx +
jnz loc_420B3A  +
mov edx dword_4D4B20 +
add edx 0FFFFFFFCh +
sub edx 8 +
jb loc_420B60  +
jmp loc_420B73  +
push offset fcmp  +
push 4  +
push esi  +
mov ecx [edi] +
push ecx  +
call _qsort  +
add esp 10h +
mov eax 1 +
jmp loc_420B94  +
mov edx [edi] +
mov ecx [edi] +
mov edx [edx+eax*4] +
mov ecx [ecx+eax*4+4] +
mov [edx+5Ch] ecx +
mov ecx [edi] +
mov ebx [edi] +
mov ecx [ecx+eax*4-4] +
inc eax  +
mov [edx+60h] ecx +
lea edx [esi-1] +
cmp eax edx +
jl loc_420B7A  +
mov eax [edi] +
mov edx [eax] +
mov ecx [eax+4] +
xor eax eax +
mov [edx+5Ch] ecx +
mov ecx [edi] +
mov [edx+60h] eax +
xor edx edx +
mov eax [ecx+esi*4-4] +
mov [eax+5Ch] edx +
mov ecx [edi] +
mov edx [edi] +
mov ecx [ecx+esi*4-8] +
mov [eax+60h] ecx +
mov ecx [edx] +
mov dword_4CD130 ecx +
mov ebx ecx +
mov edx [edi] +
mov dword_4CD134 eax +
test ebx ebx +
jz loc_420BE8  +
xor eax eax +
mov [ebx+80h] eax +
mov byte ptr [ebx+66h] 0 +
mov ebx [ebx+5Ch] +
test ebx ebx +
jnz loc_420BD5  +
pop ebp  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push ebx  +
mov edx [ebp+arg_4] +
mov eax [ebp+arg_0] +
mov ecx [eax] +
mov ebx [edx] +
mov ebx [ebx+80h] +
mov ecx [ecx+80h] +
cmp ebx ecx +
jge loc_420C16  +
mov eax 1 +
pop ebx  +
pop ebp  +
retn   +
cmp ebx ecx +
jle loc_420C20  +
or eax 0FFFFFFFFh +
pop ebx  +
pop ebp  +
retn   +
xor eax eax +
pop ebx  +
pop ebp  +
retn   +
***
push ebx  +
push esi  +
mov eax [ebp+arg_0] +
cmp byte ptr [eax+66h] 0 +
jz loc_420C3A  +
xor eax eax +
jmp loc_420C66  +
mov byte ptr [eax+66h] 1 +
mov ebx [eax+98h] +
xor esi esi +
test ebx ebx +
jz loc_420C64  +
mov eax [ebx] +
mov edx [eax+1Ch] +
push edx  +
call sub_420C28  +
pop ecx  +
inc eax  +
cmp esi eax +
jge loc_420C5D  +
mov esi eax +
mov ebx [ebx+4] +
test ebx ebx +
jnz loc_420C4A  +
mov eax esi +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
mov eax [ebp+arg_0] +
mov eax [eax+94h] +
xor edx edx +
test eax eax +
jz loc_420C86  +
inc edx  +
mov eax [eax+4] +
test eax eax +
jnz loc_420C7E  +
mov eax edx +
pop ebp  +
retn   +
***
mov eax [ebp+arg_0] +
mov eax [eax+98h] +
xor edx edx +
test eax eax +
jz loc_420CA6  +
inc edx  +
mov eax [eax+4] +
test eax eax +
jnz loc_420C9E  +
mov eax edx +
pop ebp  +
retn   +
***
mov ecx [ebp+arg_0] +
push ebx  +
mov ebx [ebp+arg_0] +
test ebx ebx +
jnz loc_420D1D  +
push 75Ch  +
push offset a_Folding_c_9  +
push offset aAssertionFa_35  +
push offset stream  +
call _fprintf  +
add esp 10h +
push offset aThisIsABugP_35  +
push offset stream  +
call _fprintf  +
add esp 8 +
push 1  +
call _exit  +
pop ecx  +
cmp dword ptr [ebx] 0 +
jnz loc_420D58  +
push 75Dh  +
push offset a_Folding_c_10  +
push offset aAssertionFa_36  +
push offset stream  +
call _fprintf  +
add esp 10h +
push offset aThisIsABugP_36  +
push offset stream  +
call _fprintf  +
add esp 8 +
push 1  +
call _exit  +
pop ecx  +
cmp dword ptr [ebx+1Ch] 0 +
jnz loc_420D94  +
push 75Eh  +
push offset a_Folding_c_11  +
push offset aAssertionFa_37  +
push offset stream  +
call _fprintf  +
add esp 10h +
push offset aThisIsABugP_37  +
push offset stream  +
call _fprintf  +
add esp 8 +
push 1  +
call _exit  +
pop ecx  +
mov eax [ebx] +
mov eax [eax+98h] +
test eax eax +
jz loc_420DAB  +
cmp ebx [eax] +
jz loc_420DE0  +
mov eax [eax+4] +
test eax eax +
jnz loc_420DA0  +
mov edx [ebx+1Ch] +
mov eax [edx+94h] +
test eax eax +
jz loc_420DC3  +
cmp ebx [eax] +
jz loc_420DE0  +
mov eax [eax+4] +
test eax eax +
jnz loc_420DB8  +
push ebx  +
mov edx [ebx+1Ch] +
push edx  +
call sub_404F10  +
add esp 8 +
push ebx  +
mov ecx [ebx] +
push ecx  +
call sub_404F34  +
mov byte ptr [ebx+43h] 0 +
add esp 8 +
pop ebx  +
pop ebp  +
retn   +
***
push ecx  +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push 0FFFFFFFFh  +
push 1  +
push 1  +
movsx eax byte ptr [esi+40h] +
push eax  +
push eax  +
mov edx dword_4EBD94 +
push edx  +
push 0FFFFFFFFh  +
push 0  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0  +
call sub_40480C  +
mov ebx eax +
mov eax [esi] +
mov ecx [esi+1Ch] +
add esp 2Ch +
mov edx [eax+20h] +
add edx [ecx+20h] +
sar edx 1 +
jns loc_420F49  +
adc edx 0 +
mov [ebx+20h] edx +
mov eax [esi] +
mov ecx [esi+1Ch] +
mov edx [eax+24h] +
add edx [ecx+24h] +
sar edx 1 +
jns loc_420F5E  +
adc edx 0 +
mov [ebx+24h] edx +
mov dword ptr [ebx+4] offset unk_4CEBD3 +
mov eax [esi+2Ch] +
mov [ebx+8] eax +
mov dword ptr [ebx+34h] 1 +
mov dword ptr [ebx+30h] 1 +
push esi  +
push ebx  +
call sub_420FC8  +
xor edx edx +
xor ecx ecx +
mov [ebx+5Ch] edx +
mov [ebx+60h] ecx +
mov eax dword_4CD148 +
add esp 8 +
mov [ebx+60h] eax +
mov eax dword_4CD148 +
test eax eax +
jz loc_420FA4  +
mov [eax+5Ch] ebx +
mov dword_4CD148 ebx +
cmp dword_4CD144 0 +
jnz loc_420FB9  +
mov dword_4CD144 ebx +
mov byte ptr [esi+43h] 1 +
mov [esi+4Ch] ebx +
mov eax ebx +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_4] +
mov ebx [ebp+arg_0] +
test ebx ebx +
jnz loc_42100E  +
push 7D0h  +
push offset a_Folding_c_15  +
push offset aAssertionFa_41  +
push offset stream  +
call _fprintf  +
add esp 10h +
push offset aThisIsABugP_41  +
push offset stream  +
call _fprintf  +
add esp 8 +
push 1  +
call _exit  +
pop ecx  +
xor edx edx +
mov eax edx +
mov esi [ebx+8] +
test esi esi +
jz loc_421086  +
cmp dword ptr [ebx+30h] 0 +
jnz loc_421026  +
mov dword ptr [ebx+30h] 1 +
mov eax [ebx+30h] +
push eax  +
mov edx [ebx+34h] +
push edx  +
call __initmatherr_0  +
add esp 8 +
push esi  +
call sub_41BF54  +
pop ecx  +
movsx eax byte ptr [edi+2Bh] +
sar eax 1 +
jns loc_421048  +
adc eax 0 +
inc eax  +
add dword_4EADA0 eax +
add dword_4EADA4 eax +
mov edx dword_4EADA0 +
mov [ebx+18h] edx +
mov ecx dword_4EADA4 +
mov [ebx+1Ch] ecx +
mov eax dword_4EADA0 +
sar eax 1 +
jns loc_421073  +
adc eax 0 +
sub [ebx+20h] eax +
mov edx dword_4EADA4 +
sar edx 1 +
jns loc_421083  +
adc edx 0 +
sub [ebx+24h] edx +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
mov eax [ebp+arg_0] +
add esp 0FFFFFFF8h +
push ebx  +
push esi  +
push edi  +
mov esi [ebp+arg_0] +
test esi esi +
jnz loc_421142  +
push 827h  +
push offset a_Folding_c_16  +
push offset aAssertionFa_42  +
push offset stream  +
call _fprintf  +
add esp 10h +
push offset aThisIsABugP_42  +
push offset stream  +
call _fprintf  +
add esp 8 +
push 1  +
call _exit  +
pop ecx  +
cmp byte ptr [esi+43h] 0 +
jz loc_42114F  +
xor eax eax +
jmp loc_42123B  +
mov edx [esi] +
mov [ebp+var_4] edx +
mov ebx [esi+1Ch] +
mov eax [ebp+var_4] +
cmp byte ptr [eax+64h] 0 +
jz loc_42116D  +
cmp byte ptr [ebx+64h] 0 +
jz loc_42116D  +
mov eax esi +
jmp loc_42123B  +
mov byte ptr [esi+43h] 1 +
mov edx [ebp+var_4] +
push edx  +
call sub_42108C  +
pop ecx  +
mov edi eax +
push ebx  +
call sub_42108C  +
pop ecx  +
mov [ebp+var_8] eax +
cmp edi [ebp+var_4] +
jnz loc_421191  +
cmp ebx [ebp+var_8] +
jz loc_42119D  +
cmp edi [ebp+var_8] +
jnz loc_42119D  +
xor eax eax +
jmp loc_42123B  +
test edi edi +
jz loc_4211A7  +
cmp [ebp+var_8] 0 +
jnz loc_4211AE  +
xor eax eax +
jmp loc_42123B  +
mov ebx dword_4CD170 +
test ebx ebx +
jz loc_4211CF  +
cmp edi [ebx] +
jnz loc_4211C8  +
mov eax [ebx+1Ch] +
cmp eax [ebp+var_8] +
jnz loc_4211C8  +
mov eax ebx +
jmp loc_42123B  +
mov ebx [ebx+58h] +
test ebx ebx +
jnz loc_4211B8  +
mov edx [esi+34h] +
push edx  +
movsx ecx byte ptr [esi+3Fh] +
push ecx  +
movsx eax byte ptr [esi+3Dh] +
push eax  +
movsx edx byte ptr [esi+3Bh] +
push edx  +
movsx ecx byte ptr [esi+3Ah] +
push ecx  +
movsx eax byte ptr [esi+3Eh] +
push eax  +
movsx edx byte ptr [esi+3Ch] +
push edx  +
movsx ecx byte ptr [esi+40h] +
push ecx  +
movsx eax byte ptr [esi+39h] +
push eax  +
mov edx [esi+30h] +
push edx  +
movsx ecx byte ptr [esi+38h] +
push ecx  +
movsx eax byte ptr [esi+2Bh] +
push eax  +
movsx edx byte ptr [esi+2Ah] +
push edx  +
call sub_404D84  +
add esp 34h +
mov ebx eax +
cmp edi [ebp+var_4] +
jnz loc_421223  +
mov al [esi+41h] +
mov [ebx+41h] al +
push ebx  +
push offset unk_4EBEB4  +
call sub_404C80  +
mov [ebx] edi +
add esp 8 +
mov edx [ebp+var_8] +
mov eax ebx +
mov [ebx+1Ch] edx +
pop edi  +
pop esi  +
pop ebx  +
pop ecx  +
pop ecx  +
pop ebp  +
retn   +
***
test ebx ebx +
jz loc_421268  +
push ebx  +
call sub_4210FC  +
pop ecx  +
test eax eax +
jz loc_421261  +
push eax  +
call sub_420CDC  +
pop ecx  +
mov ebx [ebx+50h] +
test ebx ebx +
jnz loc_42124F  +
pop ebx  +
retn   +
***
push edi  +
push edi  +
push ebp  +
add esp 0FFFFFFF8h +
mov eax dword_4CD130 +
mov [esp+8+var_8] eax +
cmp [esp+8+var_8] 0 +
jz loc_42148F  +
mov edx [esp+8+var_8] +
mov edi [edx+98h] +
test edi edi +
jz loc_42147C  +
mov eax [edi+4] +
mov [esp+8+var_4] eax +
mov edx [esp+8+var_8] +
mov esi [edx+98h] +
xor ebp ebp +
test esi esi +
jz loc_421463  +
cmp edi esi +
jz loc_4213B7  +
mov ecx 1 +
jmp loc_4213B9  +
xor ecx ecx +
mov eax [edi] +
mov edx [esi] +
mov ebx [eax] +
cmp ebx [edx] +
jz loc_4213C5  +
xor ecx ecx +
mov ebx [eax+1Ch] +
cmp ebx [edx+1Ch] +
jz loc_4213CF  +
xor ecx ecx +
mov bl [eax+2Ah] +
cmp bl [edx+2Ah] +
jz loc_4213D9  +
xor ecx ecx +
mov bl [eax+2Bh] +
cmp bl [edx+2Bh] +
jle loc_4213E3  +
xor ecx ecx +
mov ebx [eax+30h] +
cmp ebx [edx+30h] +
jle loc_4213ED  +
xor ecx ecx +
mov ebx [eax+34h] +
cmp ebx [edx+34h] +
jz loc_4213F7  +
xor ecx ecx +
mov bl [eax+38h] +
cmp bl [edx+38h] +
jz loc_421401  +
xor ecx ecx +
mov bl [eax+39h] +
cmp bl [edx+39h] +
jz loc_42140B  +
xor ecx ecx +
mov bl [eax+3Ch] +
cmp bl [edx+3Ch] +
jz loc_421415  +
xor ecx ecx +
mov bl [eax+3Eh] +
cmp bl [edx+3Eh] +
jz loc_42141F  +
xor ecx ecx +
mov bl [eax+3Ah] +
cmp bl [edx+3Ah] +
jz loc_421429  +
xor ecx ecx +
mov bl [eax+3Bh] +
cmp bl [edx+3Bh] +
jz loc_421433  +
xor ecx ecx +
mov bl [eax+3Dh] +
cmp bl [edx+3Dh] +
jz loc_42143D  +
xor ecx ecx +
mov bl [eax+3Fh] +
cmp bl [edx+3Fh] +
jz loc_421447  +
xor ecx ecx +
mov al [eax+41h] +
cmp al [edx+41h] +
jz loc_421451  +
xor ecx ecx +
test ecx ecx +
jz loc_421458  +
inc ebp  +
jmp loc_421463  +
mov esi [esi+4] +
test esi esi +
jnz loc_4213AC  +
test ebp ebp +
jz loc_421470  +
mov eax [edi] +
push eax  +
call sub_420DE4  +
pop ecx  +
mov edi [esp+8+var_4] +
test edi edi +
jnz loc_421392  +
mov eax [esp+8+var_8] +
mov edx [eax+5Ch] +
mov [esp+8+var_8] edx +
cmp [esp+8+var_8] 0 +
jnz loc_421381  +
mov ecx dword_4CD144 +
mov [esp+8+var_8] ecx +
cmp [esp+8+var_8] 0 +
jz loc_4214F2  +
mov eax [esp+8+var_8] +
mov edi [eax+98h] +
cmp dword ptr [edi+4] 0 +
jz loc_4214E3  +
push 90Ah  +
push offset a_Folding_c_31  +
push offset aAssertionFa_58  +
push offset stream  +
call _fprintf  +
add esp 10h +
push offset aThisIsABugP_58  +
push offset stream  +
call _fprintf  +
add esp 8 +
push 1  +
call _exit  +
pop ecx  +
mov eax [esp+8+var_8] +
mov edx [eax+5Ch] +
mov [esp+8+var_8] edx +
cmp [esp+8+var_8] 0 +
jnz loc_42149E  +
pop ecx  +
pop edx  +
pop ebp  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
add esp 0FFFFFFF8h +
mov eax dword_4CD130 +
mov [esp+8+var_8] eax +
cmp [esp+8+var_8] 0 +
jz loc_42165C  +
mov edx [esp+8+var_8] +
mov edx [edx+98h] +
test edx edx +
jz loc_421649  +
mov eax [edx+4] +
mov [esp+8+var_4] eax +
mov eax [edx] +
mov ecx [eax+1Ch] +
cmp ecx [eax] +
jnz loc_42153A  +
mov edx [esp+8+var_4] +
jmp loc_42151C  +
mov eax [esp+8+var_8] +
mov eax [eax+98h] +
xor ecx ecx +
test eax eax +
jz loc_421563  +
cmp edx eax +
jz loc_42155C  +
mov ebx [eax] +
mov esi [edx] +
mov ebx [ebx+1Ch] +
cmp ebx [esi+1Ch] +
jnz loc_42155C  +
inc ecx  +
jmp loc_421563  +
mov eax [eax+4] +
test eax eax +
jnz loc_421549  +
test ecx ecx +
jz loc_42163D  +
mov ebx [edx] +
push ebx  +
call sub_420F08  +
mov esi eax +
pop ecx  +
xor eax eax +
mov dword ptr [esi+8] offset unk_4CED09 +
mov [esi+1Ch] eax +
mov [esi+18h] eax +
mov edx [ebx+34h] +
push edx  +
movsx ecx byte ptr [ebx+3Fh] +
push ecx  +
movsx eax byte ptr [ebx+3Dh] +
push eax  +
movsx edx byte ptr [ebx+3Bh] +
push edx  +
push 0  +
movsx ecx byte ptr [ebx+3Eh] +
push ecx  +
push 0  +
movsx eax byte ptr [ebx+40h] +
push eax  +
movsx edx byte ptr [ebx+39h] +
push edx  +
mov ecx [ebx+30h] +
push ecx  +
movsx eax byte ptr [ebx+38h] +
push eax  +
movsx edx byte ptr [ebx+2Bh] +
push edx  +
movsx ecx byte ptr [ebx+2Ah] +
push ecx  +
call sub_404D84  +
add esp 34h +
mov dl [ebx+41h] +
mov [eax+41h] dl +
mov ecx [esp+8+var_8] +
mov [eax] ecx +
mov [eax+1Ch] esi +
mov edx [ebx+2Ch] +
mov [eax+2Ch] edx +
push eax  +
call sub_420CDC  +
pop ecx  +
mov eax [ebx+34h] +
push eax  +
movsx ecx byte ptr [ebx+3Fh] +
push ecx  +
movsx eax byte ptr [ebx+3Dh] +
push eax  +
push 0  +
movsx edx byte ptr [ebx+3Ah] +
push edx  +
push 0  +
movsx ecx byte ptr [ebx+3Ch] +
push ecx  +
movsx eax byte ptr [ebx+40h] +
push eax  +
movsx edx byte ptr [ebx+39h] +
push edx  +
mov ecx [ebx+30h] +
push ecx  +
movsx eax byte ptr [ebx+38h] +
push eax  +
movsx edx byte ptr [ebx+2Bh] +
push edx  +
movsx ecx byte ptr [ebx+2Ah] +
push ecx  +
call sub_404D84  +
mov [eax] esi +
add esp 34h +
mov edx [ebx+1Ch] +
xor ecx ecx +
mov [eax+1Ch] edx +
mov [eax+2Ch] ecx +
push eax  +
call sub_420CDC  +
pop ecx  +
push ebx  +
call sub_420DE4  +
pop ecx  +
mov edx [esp+8+var_4] +
test edx edx +
jnz loc_421524  +
mov eax [esp+8+var_8] +
mov ecx [eax+5Ch] +
mov [esp+8+var_8] ecx +
cmp [esp+8+var_8] 0 +
jnz loc_421513  +
pop ecx  +
pop edx  +
pop esi  +
pop ebx  +
retn   +
***
retn   +
***
push edi  +
cmp dword_4CED14 0 +
jz loc_4216F1  +
cmp dword_4CED18 0 +
jnz loc_42168B  +
mov dword_4CED18 1 +
cmp dword_4CED28 0 +
jnz loc_42169E  +
mov dword_4CED28 offset stru_4E7814 +
cmp dword_4CED2C 0 +
jnz loc_4216B1  +
mov dword_4CED2C offset stru_4E782C +
mov eax dword_4CED0C +
test eax eax +
jz loc_4216CC  +
mov edx dword_4CED28 +
push edx  +
push eax  +
call sub_429CF0  +
add esp 8 +
jmp loc_4216E5  +
push 4000h  +
mov ecx dword_4CED28 +
push ecx  +
call sub_429C6C  +
add esp 8 +
mov dword_4CED0C eax +
call sub_429C3C  +
xor eax eax +
mov dword_4CED14 eax +
mov esi dword_4CED10 +
mov al byte_4EAE40 +
mov [esi] al +
mov edi esi +
mov ebx dword_4CED18 +
xor eax eax +
cmp word_4CED30[ebx*2] 0 +
mov al [esi] +
mov al byte_4CFD38[eax*4] +
jz loc_421743  +
mov dword_4EAE50 ebx +
mov dword_4EAE54 esi +
jmp loc_421743  +
movsx ecx word_4D1220[ebx*2] +
mov ebx ecx +
cmp ebx 804h +
jl loc_421743  +
mov al byte_4D0138[edx*4] +
movsx ecx word_4D0204[ebx*2] +
movsx edx al +
add ecx edx +
movsx ecx word_4D33B6[ecx*2] +
cmp ebx ecx +
jnz loc_42172A  +
movsx edx word_4D0204[ebx*2] +
movsx eax al +
add edx eax +
inc esi  +
movsx eax word_4D223C[edx*2] +
mov ebx eax +
cmp word_4D0204[ebx*2] 88Ah +
jnz loc_421706  +
movsx eax word_4CED30[ebx*2] +
mov s edi +
mov edx esi +
sub edx edi +
mov dword_4EAE3C edx +
mov cl [esi] +
mov byte_4EAE40 cl +
mov byte ptr [esi] 0 +
mov dword_4CED10 esi +
cmp eax 165h +
ja loc_429732  +
jmp ds:off_4217BB[eax*4]  +
mov al byte_4EAE40 +
mov [esi] al +
mov esi dword_4EAE54 +
mov ebx dword_4EAE50 +
jmp loc_421780  +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov edx dword_4EAE58 +
mov dword_4EC83C edx +
mov dword_4EC834 edx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov ecx dword_4EAE5C +
sub ecx eax +
mov dword_4EC838 ecx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 102h +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 103h +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 103h +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 104h +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 105h +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 106h +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 107h +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 107h +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 108h +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 108h +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 109h +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 109h +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 10Ah +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 10Ah +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 10Bh +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 10Bh +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 10Ch +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 10Ch +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 10Dh +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 10Dh +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 10Dh +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 10Eh +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 10Eh +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 10Eh +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 10Fh +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 10Fh +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 10Fh +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 110h +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 110h +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 111h +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 111h +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 112h +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 113h +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 114h +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 115h +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 116h +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 117h +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 118h +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 119h +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 119h +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 11Ah +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 11Ah +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 11Bh +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 11Bh +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 11Ch +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 11Ch +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 11Dh +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 11Eh +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 11Fh +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 11Fh +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 11Fh +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 120h +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 121h +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 122h +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 122h +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 123h +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 124h +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 125h +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 126h +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 127h +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 127h +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 128h +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 129h +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 12Ah +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 12Bh +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 12Ch +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 12Ch +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 12Dh +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 12Dh +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 12Eh +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 12Eh +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 12Fh +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 130h +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 131h +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 132h +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 133h +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 133h +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 134h +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 135h +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 136h +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 137h +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 138h +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 138h +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 138h +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 139h +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 13Ah +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 13Ah +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 13Bh +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 13Bh +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 13Ch +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 13Dh +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 13Eh +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 13Fh +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 140h +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 141h +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 141h +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 142h +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 142h +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 143h +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 143h +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 144h +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 145h +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 146h +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 147h +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 148h +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 149h +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 14Ah +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 14Ah +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 14Bh +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 14Bh +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 14Ch +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 14Ch +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 14Dh +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 14Eh +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 14Eh +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 14Fh +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 150h +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 151h +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 152h +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 153h +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 153h +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 154h +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 155h +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 155h +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 156h +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 156h +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 157h +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 158h +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 159h +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 159h +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 15Ah +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 15Ah +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 15Bh +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 15Bh +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 15Ch +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 15Ch +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 15Dh +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 15Dh +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 155h +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 155h +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 15Eh +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 15Fh +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 160h +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 161h +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 162h +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 163h +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 163h +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 164h +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 165h +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 166h +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 167h +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 168h +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 169h +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 169h +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 16Ah +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 16Bh +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 16Bh +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 16Ch +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 16Ch +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 16Dh +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 16Dh +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 16Eh +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 16Eh +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 16Fh +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 16Fh +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 170h +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 170h +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 171h +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 171h +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 172h +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 172h +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 173h +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 173h +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 174h +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 174h +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 175h +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 175h +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 176h +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 176h +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 177h +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 178h +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 179h +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 179h +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 17Ah +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 17Bh +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 17Ch +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 17Dh +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 17Dh +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 17Eh +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 17Fh +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 180h +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 181h +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 182h +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 183h +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 184h +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 184h +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 185h +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 186h +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 186h +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 187h +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 187h +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 188h +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 189h +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 18Ah +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 18Ah +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 18Ah +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 18Ah +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 18Bh +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 18Ch +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 18Dh +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 18Eh +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 18Fh +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 190h +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 191h +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 192h +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 193h +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 194h +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 195h +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 196h +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 197h +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 198h +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 199h +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 19Ah +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 19Ah +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 19Bh +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 19Ch +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 19Ch +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 19Dh +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 19Dh +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 19Dh +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 19Eh +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 19Fh +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 1A0h +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 1A1h +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 1A1h +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 1A2h +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 1A3h +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 1A4h +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 1A5h +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 1A6h +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 1A7h +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 1A7h +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 1A8h +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 1A9h +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 1AAh +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 1ABh +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 1ACh +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 1ADh +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 1ADh +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 1AEh +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 1AEh +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 1AFh +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 1B0h +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 1B1h +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 1B2h +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 1B3h +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 1B4h +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 1B4h +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 1B5h +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 1B5h +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 1B6h +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 1B6h +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 1B7h +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 1B7h +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 1B8h +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 1B9h +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 1BAh +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 1BBh +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 1BCh +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 1BDh +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 1BEh +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 1BFh +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 1BFh +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 1BFh +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 1BFh +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 1C0h +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 1C1h +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 1C2h +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 1C3h +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 1C3h +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 1C4h +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 172h +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 172h +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 1C5h +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 1C5h +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 1C6h +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 1C7h +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 1C8h +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 1C8h +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 1C9h +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 1C9h +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 169h +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 169h +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 1CAh +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 1CAh +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 1CBh +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 1CCh +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 1CDh +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 1CDh +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 1CEh +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 1CEh +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 1CFh +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 1CFh +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 1D0h +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 1D1h +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 1D2h +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 1D2h +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 1D3h +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 1D4h +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 1D5h +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 1D5h +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 1D6h +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 1D6h +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 1D7h +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 1D8h +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 1D9h +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 1DAh +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 1DBh +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 1DCh +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 1DDh +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 1DEh +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 1DFh +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 1E0h +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 1E1h +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 1E2h +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 1E3h +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 1E4h +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 1E5h +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 1E6h +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 1E7h +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 1E8h +
jmp loc_429742  +
mov edx s +
push edx  +
call sub_444BB4  +
pop ecx  +
jmp loc_4216F1  +
mov ecx s +
push ecx  +
call sub_444BB4  +
pop ecx  +
jmp loc_4216F1  +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
jmp loc_4216F1  +
inc dword_4EAE5C  +
jmp loc_4216F1  +
inc dword_4EAE58  +
mov dword_4EAE5C 1 +
jmp loc_4216F1  +
mov edx s +
push edx  +
call sub_444DD0  +
pop ecx  +
mov dword ptr dbl_4EC828 eax +
mov ecx s +
push ecx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov eax dword_4EAE58 +
mov dword_4EC83C eax +
mov dword_4EC834 eax +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
mov ecx dword_4EAE5C +
sub ecx eax +
mov dword_4EC838 ecx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 1E9h +
jmp loc_429742  +
mov edx s +
push edx  +
call _atof  +
pop ecx  +
fstp  dbl_4EC828 +
mov ecx s +
push ecx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov eax dword_4EAE58 +
mov dword_4EC83C eax +
mov dword_4EC834 eax +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
mov ecx dword_4EAE5C +
sub ecx eax +
mov dword_4EC838 ecx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 1EAh +
jmp loc_429742  +
mov ebx s +
mov al [ebx+1] +
push ebx  +
mov byte ptr dbl_4EC828 al +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov edx dword_4EAE58 +
mov dword_4EC83C edx +
mov dword_4EC834 edx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov ecx dword_4EAE5C +
sub ecx eax +
mov dword_4EC838 ecx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 1EBh +
jmp loc_429742  +
mov ebx s +
push ebx  +
call _strlen  +
pop ecx  +
mov byte ptr [ebx+eax-1] 0 +
mov eax s +
inc eax  +
push eax  +
call sub_444C3C  +
pop ecx  +
mov edx s +
inc edx  +
push edx  +
call sub_42A030  +
pop ecx  +
mov dword ptr dbl_4EC828 eax +
mov eax s +
jmp loc_42911A  +
cmp dl 0Ah +
jnz loc_429113  +
mov dword_4EAE5C 1 +
inc dword_4EAE58  +
jmp loc_429119  +
inc dword_4EAE5C  +
inc eax  +
mov dl [eax] +
test dl dl +
jnz loc_4290FC  +
mov ecx s +
push ecx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov eax dword_4EAE58 +
mov dword_4EC83C eax +
mov dword_4EC834 eax +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
mov ecx dword_4EAE5C +
sub ecx eax +
mov dword_4EC838 ecx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 1ECh +
jmp loc_429742  +
mov eax s +
jmp loc_42919B  +
cmp dl 0Ah +
jnz loc_429194  +
mov dword_4EAE5C 1 +
inc dword_4EAE58  +
jmp loc_42919A  +
inc dword_4EAE5C  +
inc eax  +
mov dl [eax] +
test dl dl +
jnz loc_42917D  +
jmp loc_4216F1  +
mov eax s +
jmp loc_4291CB  +
cmp dl 0Ah +
jnz loc_4291C4  +
mov dword_4EAE5C 1 +
inc dword_4EAE58  +
jmp loc_4291CA  +
inc dword_4EAE5C  +
inc eax  +
mov dl [eax] +
test dl dl +
jnz loc_4291AD  +
jmp loc_4216F1  +
mov ecx s +
push ecx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov eax dword_4EAE58 +
mov dword_4EC83C eax +
mov dword_4EC834 eax +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
mov ecx dword_4EAE5C +
sub ecx eax +
mov dword_4EC838 ecx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 7Bh +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 7Dh +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 3Ah +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 78h +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 79h +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 7Ah +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 2Ah +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 5Bh +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 5Dh +
jmp loc_429742  +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov ecx dword_4EAE58 +
mov dword_4EC83C ecx +
mov dword_4EC834 ecx +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
mov edx dword_4EAE5C +
sub edx eax +
mov dword_4EC838 edx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 2Dh +
jmp loc_429742  +
mov edx s +
movsx ecx byte ptr [edx] +
push ecx  +
push offset aScannerReadsUn  +
push offset buffer  +
call _sprintf  +
add esp 0Ch +
push offset buffer  +
mov eax dword_4EAE5C +
push eax  +
mov edx dword_4EAE58 +
push edx  +
call sub_444EC0  +
add esp 0Ch +
mov ecx s +
push ecx  +
call _strlen  +
pop ecx  +
add eax dword_4EAE5C +
mov dword_4EAE5C eax +
mov eax dword_4EAE58 +
mov dword_4EC83C eax +
mov dword_4EC834 eax +
mov edx s +
push edx  +
call _strlen  +
pop ecx  +
mov ecx dword_4EAE5C +
sub ecx eax +
mov dword_4EC838 ecx +
mov eax dword_4EAE5C +
mov dword_4EC840 eax +
mov eax 20h +
jmp loc_429742  +
mov edx dword_4CED2C +
mov ecx dword_4EAE3C +
push edx  +
push 1  +
push ecx  +
mov eax s +
push eax  +
call _fwrite  +
add esp 10h +
jmp loc_4216F1  +
xor eax eax +
jmp loc_429742  +
mov ebx esi +
mov al byte_4EAE40 +
sub ebx s +
mov [esi] al +
mov eax dword_4CED0C +
mov edx dword_4CED28 +
dec ebx  +
mov ecx [eax] +
cmp ecx edx +
jz loc_429625  +
mov [eax] edx +
mov eax [eax+10h] +
mov dword_4EAE44 eax +
mov edx dword_4CED0C +
mov ecx [edx+4] +
add ecx dword_4EAE44 +
cmp ecx dword_4CED10 +
jb loc_42967C  +
add ebx s +
mov dword_4CED10 ebx +
call sub_42994C  +
mov ebx eax +
push ebx  +
call sub_4299D8  +
pop ecx  +
mov edi s +
test eax eax +
jz loc_421780  +
inc dword_4CED10  +
mov ebx eax +
mov esi dword_4CED10 +
jmp loc_421706  +
jmp loc_4216F1  +
call sub_429748  +
sub eax 1 +
jb loc_4296E2  +
jz loc_429690  +
dec eax  +
jz loc_429706  +
jmp loc_4216F1  +
xor eax eax +
mov dword_4EAE48 eax +
call @_rw_stderr_version$qv  +
test eax eax +
jz loc_4296C3  +
mov edx s +
mov dword_4CED10 edx +
mov eax dword_4CED18 +
dec eax  +
sar eax 1 +
jns loc_4296B9  +
adc eax 0 +
add eax 165h +
jmp loc_4217A9  +
cmp dword_4EAE48 0 +
jnz loc_4216F1  +
mov edx dword_4CED28 +
push edx  +
call sub_429BB0  +
pop ecx  +
jmp loc_4216F1  +
add ebx s +
mov dword_4CED10 ebx +
call sub_42994C  +
mov ebx eax +
mov esi dword_4CED10 +
mov edi s +
jmp loc_421706  +
mov eax dword_4CED0C +
mov edx [eax+4] +
add edx dword_4EAE44 +
mov dword_4CED10 edx +
call sub_42994C  +
mov ebx eax +
mov esi dword_4CED10 +
mov edi s +
jmp loc_421780  +
push offset aFatalFlexScann  +
call sub_429E10  +
pop ecx  +
jmp loc_4216F1  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov eax dword_4CED0C +
push edi  +
mov edi offset word_4D0204 +
mov eax dword_4CED18 +
mov ecx s +
jmp loc_4299CA  +
cmp byte ptr [ecx] 0 +
jz loc_429973  +
xor edx edx +
mov dl [ecx] +
mov dl byte_4CFD38[edx*4] +
jmp loc_429975  +
mov dl 1 +
cmp word_4CED30[eax*2] 0 +
jz loc_4299A3  +
mov dword_4EAE50 eax +
mov dword_4EAE54 ecx +
jmp loc_4299A3  +
movsx eax word_4D1220[eax*2] +
cmp eax 804h +
jl loc_4299A3  +
mov dl byte_4D0138[esi*4] +
movsx ebx word ptr [edi+eax*2] +
movsx esi dl +
add ebx esi +
movsx ebx word_4D33B6[ebx*2] +
cmp eax ebx +
jnz loc_42998D  +
movsx eax word ptr [edi+eax*2] +
movsx edx dl +
add eax edx +
movsx eax word_4D223C[eax*2] +
inc ecx  +
cmp ecx dword_4CED10 +
jb loc_429961  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push ebx  +
mov eax [ebp+arg_0] +
mov ecx dword_4CED10 +
mov dl 1 +
cmp word_4CED30[eax*2] 0 +
jz loc_429A15  +
mov dword_4EAE50 eax +
mov dword_4EAE54 ecx +
jmp loc_429A15  +
movsx eax word_4D1220[eax*2] +
cmp eax 804h +
jl loc_429A15  +
mov dl byte_4D0138[ecx*4] +
movsx ebx word_4D0204[eax*2] +
movsx ecx dl +
add ebx ecx +
movsx ebx word_4D33B6[ebx*2] +
cmp eax ebx +
jnz loc_4299FF  +
movsx eax word_4D0204[eax*2] +
movsx edx dl +
add eax edx +
movsx ecx word_4D223C[eax*2] +
mov eax ecx +
cmp eax 803h +
setz dl  +
and edx 1 +
test edx edx +
jz loc_429A58  +
xor ecx ecx +
jmp loc_429A5A  +
mov ecx eax +
mov eax ecx +
pop ebx  +
pop ebp  +
retn   +
***
mov dl byte_4EAE40 +
test dl dl +
mov eax [ebx] +
mov [eax] dl +
jnz loc_429B99  +
mov ecx dword_4CED0C +
mov edx [ecx+4] +
add edx dword_4EAE44 +
cmp eax edx +
jnb loc_429B40  +
mov byte ptr [eax] 0 +
jmp loc_429B99  +
mov eax [ebx] +
mov s eax +
inc dword ptr [ebx]  +
call sub_429748  +
sub eax 1 +
jb loc_429B84  +
jz loc_429B5A  +
dec eax  +
jz loc_429B8E  +
jmp loc_429B99  +
call @_rw_stderr_version$qv  +
test eax eax +
jz loc_429B70  +
mov ecx s +
or eax 0FFFFFFFFh +
mov [ebx] ecx +
pop ebx  +
retn   +
mov edx dword_4CED28 +
push edx  +
call sub_429BB0  +
pop ecx  +
call sub_429B14  +
pop ebx  +
retn   +
mov ecx s +
mov [ebx] ecx +
jmp loc_429B99  +
push offset aUnexpectedLast  +
call sub_429E10  +
pop ecx  +
mov edx [ebx] +
movsx eax byte ptr [edx] +
mov byte ptr [edx] 0 +
inc dword ptr [ebx]  +
mov ecx [ebx] +
mov dl [ecx] +
mov byte_4EAE40 dl +
pop ebx  +
retn   +
***
cmp dword_4CED0C 0 +
jnz loc_429BD4  +
push 4000h  +
mov eax dword_4CED28 +
push eax  +
call sub_429C6C  +
add esp 8 +
mov dword_4CED0C eax +
mov edx [ebp+arg_0] +
push edx  +
mov ecx dword_4CED0C +
push ecx  +
call sub_429CF0  +
add esp 8 +
call sub_429C3C  +
pop ebp  +
retn   +
***
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov edx dword_4CED0C +
cmp eax edx +
jz loc_429C38  +
test edx edx +
jz loc_429C24  +
mov edx dword_4CED10 +
mov cl byte_4EAE40 +
mov [edx] cl +
mov ecx dword_4CED0C +
mov [ecx+8] edx +
mov edx dword_4EAE44 +
mov [ecx+10h] edx +
mov dword_4CED0C eax +
call sub_429C3C  +
mov dword_4EAE48 1 +
pop ebp  +
retn   +
***
mov eax dword_4CED0C +
mov edx [eax+10h] +
mov dword_4EAE44 edx +
mov edx [eax+8] +
mov dword_4CED10 edx +
mov s edx +
mov eax [eax] +
mov dword_4CED28 eax +
mov cl [edx] +
mov byte_4EAE40 cl +
retn   +
***
push ebx  +
push esi  +
push edi  +
push 20h  +
call unknown_libname_46  +
pop ecx  +
mov ebx eax +
test ebx ebx +
jnz loc_429C8B  +
push offset aOutOfDynamicMe  +
call sub_429E10  +
pop ecx  +
mov esi [ebp+arg_4] +
mov [ebx+0Ch] esi +
add esi 2 +
push esi  +
call unknown_libname_46  +
pop ecx  +
mov edi eax +
mov [ebx+4] edi +
test edi edi +
jnz loc_429CAF  +
push offset aOutOfDynamic_0  +
call sub_429E10  +
pop ecx  +
mov eax [ebp+arg_0] +
push eax  +
push ebx  +
call sub_429CF0  +
add esp 8 +
mov eax ebx +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+8] +
cmp ebx dword_4CED0C +
jnz loc_429CDA  +
xor eax eax +
mov dword_4CED0C eax +
mov edx [ebx+4] +
push edx  +
call @$bdele$qpv  +
pop ecx  +
push ebx  +
call @$bdele$qpv  +
pop ecx  +
pop ebx  +
pop ebp  +
retn   +
***
push ebx  +
push esi  +
mov ebx [ebp+arg_0] +
mov esi [ebp+arg_4] +
mov [ebx] esi +
mov eax [ebx+4] +
mov byte ptr [eax] 0Ah +
mov dword ptr [ebx+10h] 1 +
mov eax [ebx+4] +
mov byte ptr [eax+1] 0 +
mov byte ptr [eax+2] 0 +
inc eax  +
test esi esi +
mov [ebx+8] eax +
jz loc_429D2A  +
movsx edx byte ptr [esi+16h] +
push edx  +
call j____isatty  +
pop ecx  +
jmp loc_429D2C  +
xor eax eax +
mov [ebx+14h] eax +
xor edx edx +
mov dword ptr [ebx+18h] 1 +
mov [ebx+1Ch] edx +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
push ebp  +
mov ebp esp +
push ebx  +
mov eax dword_4CED1C +
cmp eax dword_4CED20 +
jl loc_429DA0  +
add dword_4CED20 19h +
mov ebx dword_4CED20 +
shl ebx 2 +
cmp dword_4CED24 0 +
jnz loc_429D78  +
push ebx  +
call unknown_libname_46  +
pop ecx  +
mov dword_4CED24 eax +
jmp loc_429D8C  +
push ebx  +
mov eax dword_4CED24 +
push eax  +
call sub_429E40  +
add esp 8 +
mov dword_4CED24 eax +
cmp dword_4CED24 0 +
jnz loc_429DA0  +
push offset aOutOfMemoryExp  +
call sub_429E10  +
pop ecx  +
mov eax dword_4CED18 +
mov edx dword_4CED24 +
dec eax  +
mov ecx dword_4CED1C +
sar eax 1 +
jns loc_429DB9  +
adc eax 0 +
mov [edx+ecx*4] eax +
inc dword_4CED1C  +
mov edx [ebp+8] +
add edx edx +
inc edx  +
mov dword_4CED18 edx +
pop ebx  +
pop ebp  +
retn   +
***
dec dword_4CED1C  +
jns loc_429DE7  +
push offset aStartCondition  +
call sub_429E10  +
pop ecx  +
mov eax dword_4CED24 +
mov edx dword_4CED1C +
mov ecx [eax+edx*4] +
add ecx ecx +
inc ecx  +
mov dword_4CED18 ecx +
retn   +
***
mov eax [ebp+arglist] +
push eax  +
push offset aS_7  +
call sub_4025CC  +
add esp 8 +
push 1  +
call sub_42A918  +
pop ecx  +
pop ebp  +
retn   +
***
mov eax [ebp+size] +
push eax  +
call _malloc  +
pop ecx  +
pop ebp  +
retn   +
***
mov eax [ebp+size] +
push eax  +
mov edx [ebp+block] +
push edx  +
call _realloc  +
add esp 8 +
pop ebp  +
retn   +
***
mov eax [ebp+block] +
push eax  +
call _free  +
pop ecx  +
pop ebp  +
retn   +
***
mov dword_4CED14 1 +
retn   +
***
mov eax [ebp+arg_0] +
push eax  +
push offset aFatalErrorS  +
push offset stream  +
call _fprintf  +
add esp 0Ch +
push offset aAborted  +
call sub_4025CC  +
pop ecx  +
push 0FFFFFFFFh  +
call sub_42A918  +
pop ecx  +
pop ebp  +
retn   +
***
push edi  +
push edi  +
push ebp  +
mov ebp offset dword_4D4540 +
mov edi [ebp+0] +
add edi edi +
push 4  +
lea eax [edi+1] +
push eax  +
call _calloc  +
add esp 8 +
mov esi eax +
test esi esi +
jnz loc_429F75  +
push offset aMemoryExhaus_1  +
call sub_429E74  +
pop ecx  +
mov edx esi +
mov eax block +
xor ecx ecx +
jmp loc_429F8B  +
mov ebx [eax] +
add eax 4 +
mov [edx] ebx +
add edx 4 +
inc ecx  +
cmp ecx [ebp+0] +
jl loc_429F80  +
mov eax block +
test eax eax +
jz loc_429FA0  +
push eax  +
call _free  +
pop ecx  +
mov block esi +
mov [ebp+0] edi +
pop ebp  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov eax block +
test eax eax +
jz loc_429FC0  +
push eax  +
call _free  +
pop ecx  +
xor edx edx +
mov block edx +
mov eax dword_4D4544 +
test eax eax +
jz loc_429FD8  +
push eax  +
call _free  +
pop ecx  +
xor edx edx +
mov dword_4D4544 edx +
retn   +
***
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
xor ecx ecx +
jmp loc_42A00A  +
mov eax ecx +
add eax eax +
lea eax [eax+eax*4] +
movsx edx bl +
add eax edx +
add eax 0FFFFFFD0h +
mov ecx 563Fh +
cdq   +
idiv  ecx +
mov ecx edx +
inc esi  +
mov bl [esi] +
test bl bl +
jnz loc_429FF0  +
test ecx ecx +
jge loc_42A01A  +
mov eax ecx +
neg eax  +
jmp loc_42A01C  +
mov eax ecx +
mov ecx eax +
mov eax ecx +
mov ecx 563Fh +
cdq   +
idiv  ecx +
mov eax edx +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
add esp 0FFFFFFF8h +
cmp dword_4D4544 0 +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
jnz loc_42A04A  +
call sub_429EA4  +
push edi  +
call sub_429FE4  +
pop ecx  +
mov [ebp+var_4] eax +
mov eax dword_4D4544 +
mov edx [ebp+var_4] +
mov ebx [eax+edx*4] +
or esi 0FFFFFFFFh +
test ebx ebx +
jz loc_42A09C  +
mov edx block +
mov ecx [ebx] +
mov eax edi +
mov edx [edx+ecx*4] +
mov cl [eax] +
cmp cl [edx] +
jnz loc_42A095  +
test cl cl +
jz loc_42A08F  +
mov cl [eax+1] +
cmp cl [edx+1] +
jnz loc_42A095  +
add eax 2 +
add edx 2 +
test cl cl +
jnz loc_42A073  +
jnz loc_42A095  +
mov esi [ebx] +
jmp loc_42A09C  +
mov ebx [ebx+4] +
test ebx ebx +
jnz loc_42A066  +
cmp esi 0FFFFFFFFh +
jnz loc_42A12A  +
mov eax dword_4D4540 +
dec eax  +
cmp eax dword_4D4548 +
jnz loc_42A0B8  +
call sub_429F48  +
push 8  +
call unknown_libname_48  +
pop ecx  +
mov ebx eax +
mov esi dword_4D4548 +
inc dword_4D4548  +
mov [ebx] esi +
mov eax dword_4D4544 +
mov edx [ebp+var_4] +
mov ecx [eax+edx*4] +
mov [ebx+4] ecx +
push edi  +
call _strlen  +
pop ecx  +
inc eax  +
push eax  +
call unknown_libname_48  +
pop ecx  +
mov [ebp+var_8] eax +
mov eax [ebp+var_8] +
push esi  +
mov esi eax +
xor eax eax +
push edi  +
or ecx 0FFFFFFFFh +
scas   +
not ecx  +
sub edi ecx +
mov edx ecx +
xchg esi edi +
shr ecx 2 +
mov eax edi +
movs   +
mov ecx edx +
and ecx 3 +
movs   +
pop edi  +
pop esi  +
mov edx block +
mov [edx+esi*4] eax +
mov eax dword_4D4544 +
mov ecx [ebp+var_4] +
mov [eax+ecx*4] ebx +
mov eax esi +
pop edi  +
pop esi  +
pop ebx  +
pop ecx  +
pop ecx  +
pop ebp  +
retn   +
***
push ebx  +
cmp dword_4D4544 0 +
mov ebx [ebp+arg_0] +
jnz loc_42A15D  +
call sub_429EA4  +
test ebx ebx +
jge loc_42A16B  +
mov eax block +
mov eax [eax] +
pop ebx  +
pop ebp  +
retn   +
cmp ebx dword_4D4548 +
jge loc_42A17F  +
mov edx block +
mov eax [edx+ebx*4] +
pop ebx  +
pop ebp  +
retn   +
mov edx block +
mov eax [edx] +
pop ebx  +
pop ebp  +
retn   +
***
push ebx  +
push esi  +
push edi  +
or eax 0FFFFFFFFh +
cmp al 0FFh +
mov edi offset stru_4E7814 +
mov esi [ebp+arg_0] +
jz loc_42A1C3  +
push offset aWarningOnThisS  +
lea edx [edi+30h] +
push edx  +
call _fprintf  +
add esp 8 +
push offset aThisMayYieldPr  +
lea ecx [edi+30h] +
push ecx  +
call _fprintf  +
add esp 8 +
xor ebx ebx +
mov edx offset aRevision3_17 +
mov eax offset aDate1995020811 +
cmp byte ptr [eax] 24h +
jnz loc_42A1D7  +
mov byte ptr [eax] 20h +
cmp byte ptr [edx] 24h +
jnz loc_42A1DF  +
mov byte ptr [edx] 20h +
inc ebx  +
inc edx  +
inc eax  +
cmp ebx 30h +
jl loc_42A1CF  +
push offset aRevision3_17  +
push offset aV_1_3  +
push offset aUsaarVisualiza  +
push offset byte_4EAF60  +
call _sprintf  +
add esp 10h +
call nullsub_2  +
or ecx 0FFFFFFFFh +
mov dword_4EBD78 ecx +
mov dword_4EBD74 ecx +
cmp esi 1 +
jg loc_42A234  +
push offset aPleaseSpecifyT  +
call _printf  +
pop ecx  +
push offset aAborting  +
call sub_4025CC  +
pop ecx  +
jmp loc_42A24A  +
mov eax [ebp+arg_4] +
push eax  +
push esi  +
call sub_42BA54  +
add esp 8 +
test eax eax +
jnz loc_42A24A  +
call sub_42CE78  +
call sub_42CDB0  +
call sub_42CED8  +
cmp byte_4EB634 0 +
jnz loc_42A2AE  +
push offset aFilename  +
call _printf  +
pop ecx  +
lea edx [edi+18h] +
push edx  +
call _fflush  +
pop ecx  +
xor ebx ebx +
mov esi offset byte_4EB634 +
push edi  +
call sub_4C1D34  +
pop ecx  +
mov [esi] al +
test eax eax +
jz loc_42A2AE  +
cmp eax 0FFFFFFFFh +
jnz loc_42A290  +
mov byte ptr [esi] 0 +
jmp loc_42A2AE  +
cmp eax 0Ah +
jnz loc_42A29A  +
mov byte ptr [esi] 0 +
jmp loc_42A2AE  +
cmp eax 0Dh +
jnz loc_42A2A4  +
mov byte ptr [esi] 0 +
jmp loc_42A2AE  +
inc ebx  +
inc esi  +
cmp ebx 320h +
jl loc_42A279  +
xor ebx ebx +
mov eax offset byte_4EB634 +
cmp byte ptr [eax] 20h +
jnz loc_42A2C4  +
inc ebx  +
inc eax  +
cmp ebx 320h +
jl loc_42A2B5  +
mov edx 320h +
sub edx ebx +
add ebx offset byte_4EB634 +
push edx  +
push ebx  +
push offset dest  +
call _strncpy  +
add esp 0Ch +
mov byte_4EBC75 0 +
xor ebx ebx +
mov eax offset dest +
cmp byte ptr [eax] 20h +
jnz loc_42A2FD  +
inc ebx  +
inc eax  +
cmp ebx 320h +
jl loc_42A2EE  +
cmp ebx 320h +
jnz loc_42A30A  +
call sub_42CE78  +
cmp dest[ebx] 0 +
jnz loc_42A318  +
call sub_42CE78  +
cmp dword_4D4B0C 0 +
jz loc_42A36A  +
xor edx edx +
xor ecx ecx +
mov dword_4D4B38 edx +
mov dword_4D4B3C 2 +
mov dword_4D4B48 ecx +
xor eax eax +
mov dword_4D4B44 2 +
mov dword_4D4B54 eax +
mov dword_4D4B50 2 +
mov dword_4D4B64 2 +
mov dword_4D4B58 2 +
call sub_42A424  +
call sub_42A540  +
call sub_42A8E0  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+8] +
mov eax ebx +
jmp loc_42A38C  +
inc eax  +
cmp byte ptr [eax] 0 +
jnz loc_42A38B  +
cmp ebx eax +
jnb loc_42A396  +
dec eax  +
cmp byte ptr [eax] 2Fh +
jnz loc_42A3A0  +
xor eax eax +
pop ebx  +
pop ebp  +
retn   +
***
mov eax ebx +
mov edx offset asc_4D49D7 +
mov cl [eax] +
cmp cl [edx] +
jnz loc_42A3C3  +
test cl cl +
jz loc_42A3CA  +
mov cl [eax+1] +
cmp cl [edx+1] +
jnz loc_42A3C3  +
add eax 2 +
add edx 2 +
test cl cl +
jnz loc_42A3A7  +
jz loc_42A3CA  +
cmp byte ptr [ebx] 0 +
jnz loc_42A3CF  +
xor eax eax +
pop ebx  +
pop ebp  +
retn   +
***
push offset aR  +
push ebx  +
call _fopen  +
add esp 8 +
test eax eax +
jz loc_42A3ED  +
push eax  +
call _fclose  +
pop ecx  +
xor eax eax +
pop ebx  +
pop ebp  +
retn   +
***
mov eax 1 +
pop ebx  +
pop ebp  +
retn   +
***
mov eax [ebp+arg_4] +
push eax  +
mov edx [ebp+arg_0] +
push edx  +
push offset aFatalErrorSS  +
push offset stream  +
call _fprintf  +
add esp 10h +
push offset aAborted_0  +
call sub_4025CC  +
pop ecx  +
pop ebp  +
retn   +
***
mov esi offset dword_4CED28 +
xor eax eax +
mov dword_4EBDC8 eax +
xor edx edx +
mov eax offset unk_4EBDCC +
xor ecx ecx +
inc edx  +
mov [eax] ecx +
add eax 4 +
cmp edx 3 +
jl loc_42A439  +
call sub_4043B0  +
xor edx edx +
mov eax offset byte_4EB634 +
mov [esi] edx +
mov edx offset aR_0 +
mov cl [eax] +
cmp cl [edx] +
jnz loc_42A47F  +
test cl cl +
jz loc_42A475  +
mov cl [eax+1] +
cmp cl [edx+1] +
jnz loc_42A47F  +
add eax 2 +
add edx 2 +
test cl cl +
jnz loc_42A459  +
jnz loc_42A47F  +
mov dword ptr [esi] offset stru_4E7814 +
jmp loc_42A4B4  +
push (offset aR_0+2)  +
push offset byte_4EB634  +
call _fopen  +
add esp 8 +
mov ebx eax +
mov [esi] ebx +
test ebx ebx +
jnz loc_42A4AB  +
push offset byte_4EB634  +
push offset aCannotOpen  +
call sub_42A3F8  +
add esp 8 +
mov eax [esi] +
push eax  +
call sub_403670  +
pop ecx  +
call sub_43FD44  +
mov eax dword_4D4C40 +
test eax eax +
jle loc_42A4C9  +
push eax  +
call sub_43FD14  +
pop ecx  +
call sub_444B88  +
mov ebx eax +
mov eax [esi] +
test eax eax +
jz loc_42A4E4  +
cmp eax offset stru_4E7814 +
jz loc_42A4E4  +
push eax  +
call _fclose  +
pop ecx  +
test ebx ebx +
jle loc_42A4FD  +
push offset unk_4D4A19  +
push offset aSyntaxError  +
call sub_42A3F8  +
add esp 8 +
pop esi  +
pop ebx  +
retn   +
cmp dword_4EC420 0 +
jnz loc_42A53C  +
push 17Ch  +
push offset a_Main_c  +
push offset aAssertionFa_43  +
push offset stream  +
call _fprintf  +
add esp 10h +
push offset aThisIsABugP_43  +
push offset stream  +
call _fprintf  +
add esp 8 +
push 1  +
call _exit  +
pop ecx  +
pop esi  +
pop ebx  +
retn   +
***
call unknown_libname_45  +
pop ecx  +
mov ebx eax +
mov dword_4EBD58 ebx +
push 0FEh  +
push offset byte_4EB634  +
push ebx  +
call _strncpy  +
add esp 0Ch +
mov eax dword_4EBD58 +
mov byte ptr [eax+0FFh] 0 +
mov dword_4EBD5C 0FFFFFFFFh +
mov dword_4EBD60 0FFFFFFFFh +
cmp dword_4D4B88 0 +
jnz loc_42A597  +
call nullsub_1  +
jmp loc_42A5A8  +
mov edx 2BCh +
mov dword_4EBD68 edx +
mov dword_4EBD64 edx +
xor eax eax +
xor ecx ecx +
mov dword_4EBD6C eax +
mov dword_4EBD70 ecx +
mov eax dword_4D4C44 +
cmp eax 1 +
sbb eax eax +
neg eax  +
test eax eax +
jz loc_42A5D6  +
mov edx dword_4EBD64 +
add edx 0Ah +
mov dword_4EBD74 edx +
test eax eax +
jz loc_42A5E9  +
mov ecx dword_4EBD68 +
add ecx 0Ah +
mov dword_4EBD78 ecx +
mov dword_4EBD7C 5 +
xor eax eax +
mov dword_4EBD80 5 +
mov dword_4EBDB4 eax +
mov dword_4EBD84 14h +
xor edx edx +
mov dword_4EBD88 46h +
mov dword_4EBD8C edx +
xor ecx ecx +
xor eax eax +
mov dword_4EBD90 ecx +
xor edx edx +
mov dword_4EBD94 eax +
mov dword_4EBD9C edx +
mov dword_4EBDA0 1 +
mov dword_4EBDA4 1 +
mov dword_4EBDA8 1 +
xor ecx ecx +
mov dword_4EBDAC 1 +
mov dword_4EBDB0 ecx +
mov dword_4EBDB8 1 +
mov dword_4EBDBC 1 +
mov dword_4EBDC0 1 +
call sub_42024C  +
cmp dword_4D4C30 0FFFFFFFFh +
jnz loc_42A6AF  +
cmp dword_4EB618 1 +
jnz loc_42A6A5  +
xor eax eax +
mov dword_4D4C30 eax +
jmp loc_42A6AF  +
mov dword_4D4C30 1 +
call sub_42E1C0  +
cmp dword_4EC41C 0 +
jz loc_42A6CF  +
push offset unk_4D4A92  +
push offset aWrongSpecifica  +
call sub_42A3F8  +
add esp 8 +
call sub_404974  +
mov dword_4D4C44 1 +
mov eax dword_4D4C34 +
mov dword_4EB624 eax +
add eax dword_4EBD74 +
mov dword_4EB628 eax +
mov eax dword_4D4C38 +
mov dword_4EB62C eax +
mov edx dword_4EBD78 +
add edx eax +
add edx 3Ch +
mov dword_4EB630 edx +
call sub_42A718  +
pop ebx  +
retn   +
***
test eax eax +
jle loc_42A729  +
push eax  +
call sub_43FD14  +
pop ecx  +
call sub_40507C  +
cmp dword_4EC41C 0 +
jnz loc_42A73C  +
call sub_41F8C4  +
cmp dword_4EBDE0 0 +
jnz loc_42A8D1  +
mov eax dword_4D4B48 +
cmp eax dword_4D4B44 +
jle loc_42A75B  +
mov dword_4D4B44 eax +
mov eax dword_4D4B54 +
cmp eax dword_4D4B50 +
jle loc_42A76D  +
mov dword_4D4B50 eax +
mov eax dword_4D4B38 +
cmp eax dword_4D4B3C +
jle loc_42A77F  +
mov dword_4D4B3C eax +
cmp dword_4D4B6C 1 +
jnz loc_42A792  +
mov dword_4D4B68 1 +
cmp dword_4D4B68 1 +
jnz loc_42A7AE  +
cmp dword_4D4B5C 0 +
jnz loc_42A7AE  +
mov dword_4D4B5C 1 +
cmp dword_4D4B5C 1 +
jnz loc_42A7CA  +
cmp dword_4D4B60 0 +
jnz loc_42A7CA  +
mov dword_4D4B60 1 +
cmp dword_4D4B5C 0 +
jnz loc_42A7E6  +
cmp dword_4D4B60 1 +
jnz loc_42A7E6  +
mov dword_4D4B5C 1 +
cmp dword_4D4B5C 1 +
jnz loc_42A7FF  +
xor edx edx +
xor ecx ecx +
mov dword_4D4B54 edx +
mov dword_4D4B50 ecx +
cmp dword_4EBDC0 0 +
jg loc_42A812  +
mov dword_4EBDC0 1 +
cmp dword_4EBDB8 0 +
jg loc_42A825  +
mov dword_4EBDB8 1 +
mov ebx dword_4EBDB8 +
mov eax ebx +
mov ecx dword_4EBDC0 +
cdq   +
idiv  ecx +
test edx edx +
jz loc_42A846  +
mov eax ebx +
cdq   +
idiv  ecx +
imul  ecx +
mov dword_4EBDB8 eax +
call sub_431270  +
cmp dword_4EC41C 0 +
jz loc_42A866  +
push offset unk_4D4AA7  +
push offset aWrongSpecifi_0  +
call sub_42A3F8  +
add esp 8 +
cmp dword_4D4B20 14h +
jz loc_42A8AF  +
call sub_434960  +
cmp dword_4EC41C 0 +
jz loc_42A88F  +
push offset unk_4D4ABC  +
push offset aWrongSpecifi_1  +
call sub_42A3F8  +
add esp 8 +
call sub_43897C  +
cmp dword_4EC41C 0 +
jz loc_42A8AF  +
push offset unk_4D4AD1  +
push offset aWrongSpecifi_2  +
call sub_42A3F8  +
add esp 8 +
call sub_43C4E0  +
cmp dword_4EC41C 0 +
jz loc_42A8D6  +
push offset unk_4D4AE6  +
push offset aWrongSpecifi_3  +
call sub_42A3F8  +
add esp 8 +
jmp loc_42A8D6  +
call sub_42DA34  +
call sub_43FD44  +
pop ebx  +
retn   +
***
push 12Ch  +
push 0  +
push 12Ch  +
push 0  +
call sub_41E3BC  +
add esp 18h +
cmp dword_4D4C3C 0 +
jz locret_42A914  +
push offset byte_4EB634  +
call j_unknown_libname_18  +
pop ecx  +
retn   +
***
call unknown_libname_1  +
mov ebp esp +
pop ebp  +
retn   +
***
add esp 0FFFFFFE8h +
add esp 0FFFFFEF8h +
push ebx  +
push esi  +
push edi  +
xor ebx ebx +
mov esi [ebp+arg_0] +
mov edi [ebp+arg_4] +
mov eax esi +
mov edx edi +
mov dword_4EBD64 eax +
mov dword_4EBD68 edx +
cmp eax dword_4EBD74 +
jle loc_42AE5B  +
mov dword_4EBD74 eax +
mov ebx 1 +
cmp edx dword_4EBD78 +
jle loc_42AE6E  +
mov dword_4EBD78 edx +
mov ebx 1 +
push edi  +
push 0  +
push esi  +
push 0  +
call sub_41EBAC  +
add esp 10h +
mov eax ebx +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
mov eax [ebp+arg_0] +
call sub_42A424  +
call sub_42A540  +
push 0C8h  +
push 0C8h  +
push 12Ch  +
push 0  +
push 12Ch  +
push 0  +
call sub_41E3BC  +
add esp 18h +
retn   +
***
push ebx  +
mov esi dword_4EBD64 +
mov ebx dword_4EBD68 +
call sub_41E948  +
mov eax dword_4EC3B0 +
mov ecx dword_4EC3B4 +
mov edx eax +
imul edx ebx +
imul ecx esi +
cmp edx ecx +
jle loc_42AF6F  +
cmp esi 28h +
jg loc_42AF5D  +
push eax  +
push 1  +
call sub_41E710  +
add esp 8 +
pop esi  +
pop ebx  +
retn   +
mov eax dword_4EC3B0 +
push eax  +
push esi  +
call sub_41E710  +
add esp 8 +
pop esi  +
pop ebx  +
retn   +
cmp ebx 19h +
jg loc_42AF88  +
mov edx dword_4EC3B4 +
push edx  +
push 1  +
call sub_41E710  +
add esp 8 +
pop esi  +
pop ebx  +
retn   +
mov ecx dword_4EC3B4 +
push ecx  +
push ebx  +
call sub_41E710  +
add esp 8 +
pop esi  +
pop ebx  +
retn   +
***
push ebx  +
push esi  +
push edi  +
mov eax dword_4D4AEC +
cmp eax dword_4EAFEC +
jl loc_42AFBD  +
mov dword_4EBDE4 1 +
xor eax eax +
jmp loc_42B01E  +
mov ebx [ebp+arg_0] +
mov eax dword_4EAFF0 +
mov edx dword_4D4AEC +
mov esi [eax+edx*4] +
jmp loc_42AFD2  +
inc ebx  +
inc esi  +
cmp byte ptr [ebx] 0 +
jz loc_42AFF6  +
cmp byte ptr [esi] 0 +
jz loc_42AFF6  +
mov al [ebx] +
cmp al [esi] +
jz loc_42AFD0  +
movsx edi byte ptr [ebx] +
push edi  +
call __ltoupper  +
pop ecx  +
movsx edx byte ptr [esi] +
cmp eax edx +
jz loc_42AFD0  +
jmp loc_42AFF6  +
inc ebx  +
cmp byte ptr [ebx] 20h +
jz loc_42AFF5  +
cmp byte ptr [ebx] 0 +
jz loc_42B005  +
xor eax eax +
jmp loc_42B01E  +
inc esi  +
cmp byte ptr [esi] 20h +
jz loc_42B004  +
cmp byte ptr [esi] 0 +
jz loc_42B013  +
xor eax eax +
jmp loc_42B01E  +
inc dword_4D4AEC  +
mov eax 1 +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
push ecx  +
push ebx  +
mov eax dword_4D4AEC +
push esi  +
push edi  +
mov [ebp+var_4] eax +
cmp eax dword_4EAFEC +
jl loc_42B04C  +
mov dword_4EBDE4 1 +
xor eax eax +
jmp loc_42B155  +
mov esi [ebp+arg_0] +
mov eax dword_4EAFF0 +
mov edx dword_4D4AEC +
mov ebx [eax+edx*4] +
jmp loc_42B061  +
inc esi  +
inc ebx  +
cmp byte ptr [esi] 0 +
jz loc_42B085  +
cmp byte ptr [ebx] 0 +
jz loc_42B085  +
mov al [esi] +
cmp al [ebx] +
jz loc_42B05F  +
movsx edi byte ptr [esi] +
push edi  +
call __ltoupper  +
pop ecx  +
movsx edx byte ptr [ebx] +
cmp eax edx +
jz loc_42B05F  +
jmp loc_42B085  +
inc esi  +
cmp byte ptr [esi] 20h +
jz loc_42B084  +
cmp byte ptr [esi] 0 +
jz loc_42B097  +
xor eax eax +
jmp loc_42B155  +
inc ebx  +
cmp byte ptr [ebx] 20h +
jz loc_42B096  +
cmp byte ptr [ebx] 0 +
jnz loc_42B103  +
inc dword_4D4AEC  +
mov ecx dword_4D4AEC +
cmp ecx dword_4EAFEC +
jl loc_42B0F4  +
mov dword_4EBDE4 1 +
mov eax [ebp+arg_0] +
push eax  +
push offset aOptionErrorAtS  +
push offset stream  +
call _fprintf  +
add esp 0Ch +
push offset aMissingInteger  +
push offset stream  +
call _fprintf  +
add esp 8 +
mov edx [ebp+var_4] +
mov dword_4D4AEC edx +
xor eax eax +
jmp loc_42B155  +
mov edx dword_4EAFF0 +
mov ecx dword_4D4AEC +
mov ebx [edx+ecx*4] +
mov al [ebx] +
cmp al 30h +
jz loc_42B13E  +
cmp al 31h +
jz loc_42B13E  +
cmp al 32h +
jz loc_42B13E  +
cmp al 33h +
jz loc_42B13E  +
cmp al 34h +
jz loc_42B13E  +
cmp al 2Dh +
jz loc_42B13E  +
cmp al 35h +
jz loc_42B13E  +
cmp al 36h +
jz loc_42B13E  +
cmp al 37h +
jz loc_42B13E  +
cmp al 38h +
jz loc_42B13E  +
cmp al 39h +
jz loc_42B13E  +
mov edx [ebp+var_4] +
xor eax eax +
mov dword_4D4AEC edx +
jmp loc_42B155  +
push ebx  +
call _atol  +
mov edx [ebp+arg_4] +
pop ecx  +
mov [edx] eax +
mov eax 1 +
inc dword_4D4AEC  +
pop edi  +
pop esi  +
pop ebx  +
pop ecx  +
pop ebp  +
retn   +
***
push ecx  +
push ebx  +
mov eax dword_4D4AEC +
push esi  +
push edi  +
mov [ebp+var_4] eax +
cmp eax dword_4EAFEC +
jl loc_42B184  +
mov dword_4EBDE4 1 +
xor eax eax +
jmp loc_42B29F  +
mov ebx [ebp+arg_0] +
mov eax dword_4EAFF0 +
mov edx dword_4D4AEC +
mov esi [eax+edx*4] +
jmp loc_42B199  +
inc ebx  +
inc esi  +
cmp byte ptr [ebx] 0 +
jz loc_42B1BD  +
cmp byte ptr [esi] 0 +
jz loc_42B1BD  +
mov al [ebx] +
cmp al [esi] +
jz loc_42B197  +
movsx edi byte ptr [ebx] +
push edi  +
call __ltoupper  +
pop ecx  +
movsx edx byte ptr [esi] +
cmp eax edx +
jz loc_42B197  +
jmp loc_42B1BD  +
inc ebx  +
cmp byte ptr [ebx] 20h +
jz loc_42B1BC  +
cmp byte ptr [ebx] 0 +
jz loc_42B1CF  +
xor eax eax +
jmp loc_42B29F  +
inc esi  +
cmp byte ptr [esi] 20h +
jz loc_42B1CE  +
cmp byte ptr [esi] 0 +
jnz loc_42B23B  +
inc dword_4D4AEC  +
mov ecx dword_4D4AEC +
cmp ecx dword_4EAFEC +
jl loc_42B22C  +
mov dword_4EBDE4 1 +
mov eax [ebp+arg_0] +
push eax  +
push offset aOptionErrorA_0  +
push offset stream  +
call _fprintf  +
add esp 0Ch +
push offset aMissingStringA  +
push offset stream  +
call _fprintf  +
add esp 8 +
mov edx [ebp+var_4] +
mov dword_4D4AEC edx +
xor eax eax +
jmp loc_42B29F  +
mov edx dword_4EAFF0 +
mov ecx dword_4D4AEC +
mov esi [edx+ecx*4] +
mov ebx [ebp+arg_4] +
jmp loc_42B242  +
inc ebx  +
inc esi  +
cmp byte ptr [ebx] 0 +
jz loc_42B266  +
cmp byte ptr [esi] 0 +
jz loc_42B266  +
mov al [ebx] +
cmp al [esi] +
jz loc_42B240  +
movsx edi byte ptr [ebx] +
push edi  +
call __ltoupper  +
pop ecx  +
movsx edx byte ptr [esi] +
cmp eax edx +
jz loc_42B240  +
jmp loc_42B266  +
inc ebx  +
cmp byte ptr [ebx] 20h +
jz loc_42B265  +
cmp byte ptr [ebx] 0 +
jz loc_42B27D  +
mov eax [ebp+var_4] +
mov dword_4D4AEC eax +
xor eax eax +
jmp loc_42B29F  +
inc esi  +
cmp byte ptr [esi] 20h +
jz loc_42B27C  +
cmp byte ptr [esi] 0 +
jz loc_42B294  +
mov edx [ebp+var_4] +
xor eax eax +
mov dword_4D4AEC edx +
jmp loc_42B29F  +
inc dword_4D4AEC  +
mov eax 1 +
pop edi  +
pop esi  +
pop ebx  +
pop ecx  +
pop ebp  +
retn   +
***
push ecx  +
push ebx  +
mov eax dword_4D4AEC +
push esi  +
push edi  +
mov [ebp+var_4] eax +
cmp eax dword_4EAFEC +
jl loc_42B2D0  +
mov dword_4EBDE4 1 +
xor eax eax +
jmp loc_42B3EA  +
mov esi [ebp+arg_0] +
mov eax dword_4EAFF0 +
mov edx dword_4D4AEC +
mov ebx [eax+edx*4] +
jmp loc_42B2E5  +
inc esi  +
inc ebx  +
cmp byte ptr [esi] 0 +
jz loc_42B309  +
cmp byte ptr [ebx] 0 +
jz loc_42B309  +
mov al [esi] +
cmp al [ebx] +
jz loc_42B2E3  +
movsx edi byte ptr [esi] +
push edi  +
call __ltoupper  +
pop ecx  +
movsx edx byte ptr [ebx] +
cmp eax edx +
jz loc_42B2E3  +
jmp loc_42B309  +
inc esi  +
cmp byte ptr [esi] 20h +
jz loc_42B308  +
cmp byte ptr [esi] 0 +
jz loc_42B31B  +
xor eax eax +
jmp loc_42B3EA  +
inc ebx  +
cmp byte ptr [ebx] 20h +
jz loc_42B31A  +
cmp byte ptr [ebx] 0 +
jz loc_42B32C  +
xor eax eax +
jmp loc_42B3EA  +
inc dword_4D4AEC  +
mov edx dword_4D4AEC +
cmp edx dword_4EAFEC +
jl loc_42B37E  +
mov dword_4EBDE4 1 +
mov ecx [ebp+arg_0] +
push ecx  +
push offset aOptionErrorA_1  +
push offset stream  +
call _fprintf  +
add esp 0Ch +
push offset aMissingFileNam  +
push offset stream  +
call _fprintf  +
add esp 8 +
mov eax [ebp+var_4] +
mov dword_4D4AEC eax +
xor eax eax +
jmp loc_42B3EA  +
mov edx dword_4EAFF0 +
mov ecx dword_4D4AEC +
mov ebx [edx+ecx*4] +
cmp byte ptr [ebx] 2Dh +
jnz loc_42B3CD  +
mov dword_4EBDE4 1 +
push ebx  +
push offset aOptionErrorA_2  +
push offset stream  +
call _fprintf  +
add esp 0Ch +
push offset aFileNamesShoul  +
push offset stream  +
call _fprintf  +
add esp 8 +
mov eax [ebp+var_4] +
mov dword_4D4AEC eax +
xor eax eax +
jmp loc_42B3EA  +
push 320h  +
push ebx  +
mov edx [ebp+dest] +
push edx  +
call _strncpy  +
add esp 0Ch +
mov eax 1 +
inc dword_4D4AEC  +
pop edi  +
pop esi  +
pop ebx  +
pop ecx  +
pop ebp  +
retn   +
***
add esp 0FFFFFFF8h +
mov eax dword_4D4AEC +
cmp eax dword_4EAFEC +
push ebx  +
push esi  +
push edi  +
mov [ebp+var_8] eax +
jl loc_42B512  +
mov dword_4EBDE4 1 +
xor eax eax +
jmp loc_42BA28  +
mov esi [ebp+arg_0] +
mov eax dword_4EAFF0 +
mov edx dword_4D4AEC +
mov ebx [eax+edx*4] +
jmp loc_42B527  +
inc esi  +
inc ebx  +
cmp byte ptr [esi] 0 +
jz loc_42B54B  +
cmp byte ptr [ebx] 0 +
jz loc_42B54B  +
mov al [esi] +
cmp al [ebx] +
jz loc_42B525  +
movsx edi byte ptr [esi] +
push edi  +
call __ltoupper  +
pop ecx  +
movsx edx byte ptr [ebx] +
cmp eax edx +
jz loc_42B525  +
jmp loc_42B54B  +
inc esi  +
cmp byte ptr [esi] 20h +
jz loc_42B54A  +
cmp byte ptr [esi] 0 +
jz loc_42B55D  +
xor eax eax +
jmp loc_42BA28  +
inc ebx  +
cmp byte ptr [ebx] 20h +
jz loc_42B55C  +
cmp byte ptr [ebx] 0 +
jnz loc_42B5CC  +
inc dword_4D4AEC  +
mov ecx dword_4D4AEC +
cmp ecx dword_4EAFEC +
jl loc_42B5BD  +
mov dword_4EBDE4 1 +
mov eax [ebp+arg_0] +
push eax  +
push offset aOptionErrorA_4  +
push offset stream  +
call _fprintf  +
add esp 0Ch +
push offset aMissingFloatAr  +
push offset stream  +
call _fprintf  +
add esp 8 +
mov edx [ebp+var_8] +
mov dword_4D4AEC edx +
xor eax eax +
jmp loc_42BA28  +
mov edx dword_4EAFF0 +
mov ecx dword_4D4AEC +
mov ebx [edx+ecx*4] +
mov al [ebx] +
cmp al 30h +
jz loc_42B60E  +
cmp al 31h +
jz loc_42B60E  +
cmp al 32h +
jz loc_42B60E  +
cmp al 33h +
jz loc_42B60E  +
cmp al 34h +
jz loc_42B60E  +
cmp al 35h +
jz loc_42B60E  +
cmp al 36h +
jz loc_42B60E  +
cmp al 37h +
jz loc_42B60E  +
cmp al 38h +
jz loc_42B60E  +
cmp al 39h +
jz loc_42B60E  +
cmp al 2Eh +
jz loc_42B60E  +
cmp al 20h +
jz loc_42B60E  +
mov edx [ebp+var_8] +
xor eax eax +
mov dword_4D4AEC edx +
jmp loc_42BA28  +
push ebx  +
call _atof  +
pop ecx  +
fstp  [ebp+var_4] +
jmp loc_42B61B  +
inc ebx  +
mov al [ebx] +
cmp al 30h +
jz loc_42B61A  +
cmp al 31h +
jz loc_42B61A  +
cmp al 32h +
jz loc_42B61A  +
cmp al 33h +
jz loc_42B61A  +
cmp al 34h +
jz loc_42B61A  +
cmp al 35h +
jz loc_42B61A  +
cmp al 36h +
jz loc_42B61A  +
cmp al 37h +
jz loc_42B61A  +
cmp al 38h +
jz loc_42B61A  +
cmp al 39h +
jz loc_42B61A  +
cmp al 2Eh +
jz loc_42B61A  +
cmp al 20h +
jz loc_42B61A  +
jmp loc_42B650  +
inc ebx  +
cmp byte ptr [ebx] 20h +
jz loc_42B64F  +
cmp byte ptr [ebx] 0 +
jnz loc_42B6BE  +
inc dword_4D4AEC  +
mov edx dword_4D4AEC +
cmp edx dword_4EAFEC +
jl loc_42B6AF  +
mov dword_4EBDE4 1 +
mov ecx [ebp+arg_0] +
push ecx  +
push offset aOptionErrorA_5  +
push offset stream  +
call _fprintf  +
add esp 0Ch +
push offset aMissingUnit  +
push offset stream  +
call _fprintf  +
add esp 8 +
mov eax [ebp+var_8] +
mov dword_4D4AEC eax +
xor eax eax +
jmp loc_42BA28  +
mov edx dword_4EAFF0 +
mov ecx dword_4D4AEC +
mov ebx [edx+ecx*4] +
mov eax ebx +
mov edx offset aIn +
mov cl [eax] +
cmp cl [edx] +
jnz loc_42B6F4  +
test cl cl +
jz loc_42B6E1  +
mov cl [eax+1] +
cmp cl [edx+1] +
jnz loc_42B6F4  +
add eax 2 +
add edx 2 +
test cl cl +
jnz loc_42B6C5  +
jnz loc_42B6F4  +
fld  [ebp+var_4] +
fmul  ds:dbl_42BA30 +
fstp  [ebp+var_4] +
jmp loc_42BA15  +
mov eax ebx +
mov edx offset aInch +
mov cl [eax] +
cmp cl [edx] +
jnz loc_42B72A  +
test cl cl +
jz loc_42B717  +
mov cl [eax+1] +
cmp cl [edx+1] +
jnz loc_42B72A  +
add eax 2 +
add edx 2 +
test cl cl +
jnz loc_42B6FB  +
jnz loc_42B72A  +
fld  [ebp+var_4] +
fmul  ds:dbl_42BA30 +
fstp  [ebp+var_4] +
jmp loc_42BA15  +
mov eax ebx +
mov edx offset aFt +
mov cl [eax] +
cmp cl [edx] +
jnz loc_42B760  +
test cl cl +
jz loc_42B74D  +
mov cl [eax+1] +
cmp cl [edx+1] +
jnz loc_42B760  +
add eax 2 +
add edx 2 +
test cl cl +
jnz loc_42B731  +
jnz loc_42B760  +
fld  [ebp+var_4] +
fmul  ds:dbl_42BA38 +
fstp  [ebp+var_4] +
jmp loc_42BA15  +
mov eax ebx +
mov edx offset aFoot +
mov cl [eax] +
cmp cl [edx] +
jnz loc_42B796  +
test cl cl +
jz loc_42B783  +
mov cl [eax+1] +
cmp cl [edx+1] +
jnz loc_42B796  +
add eax 2 +
add edx 2 +
test cl cl +
jnz loc_42B767  +
jnz loc_42B796  +
fld  [ebp+var_4] +
fmul  ds:dbl_42BA38 +
fstp  [ebp+var_4] +
jmp loc_42BA15  +
mov eax ebx +
mov edx offset aFeet +
mov cl [eax] +
cmp cl [edx] +
jnz loc_42B7CC  +
test cl cl +
jz loc_42B7B9  +
mov cl [eax+1] +
cmp cl [edx+1] +
jnz loc_42B7CC  +
add eax 2 +
add edx 2 +
test cl cl +
jnz loc_42B79D  +
jnz loc_42B7CC  +
fld  [ebp+var_4] +
fmul  ds:dbl_42BA38 +
fstp  [ebp+var_4] +
jmp loc_42BA15  +
mov eax ebx +
mov edx offset aFoots +
mov cl [eax] +
cmp cl [edx] +
jnz loc_42B802  +
test cl cl +
jz loc_42B7EF  +
mov cl [eax+1] +
cmp cl [edx+1] +
jnz loc_42B802  +
add eax 2 +
add edx 2 +
test cl cl +
jnz loc_42B7D3  +
jnz loc_42B802  +
fld  [ebp+var_4] +
fmul  ds:dbl_42BA38 +
fstp  [ebp+var_4] +
jmp loc_42BA15  +
mov eax ebx +
mov edx offset aMm +
mov cl [eax] +
cmp cl [edx] +
jnz loc_42B838  +
test cl cl +
jz loc_42B825  +
mov cl [eax+1] +
cmp cl [edx+1] +
jnz loc_42B838  +
add eax 2 +
add edx 2 +
test cl cl +
jnz loc_42B809  +
jnz loc_42B838  +
fld  ds:tbyte_42BA40 +
fmul  [ebp+var_4] +
fstp  [ebp+var_4] +
jmp loc_42BA15  +
mov eax ebx +
mov edx offset aMillimeter +
mov cl [eax] +
cmp cl [edx] +
jnz loc_42B86E  +
test cl cl +
jz loc_42B85B  +
mov cl [eax+1] +
cmp cl [edx+1] +
jnz loc_42B86E  +
add eax 2 +
add edx 2 +
test cl cl +
jnz loc_42B83F  +
jnz loc_42B86E  +
fld  ds:tbyte_42BA40 +
fmul  [ebp+var_4] +
fstp  [ebp+var_4] +
jmp loc_42BA15  +
mov eax ebx +
mov edx offset aCm +
mov cl [eax] +
cmp cl [edx] +
jnz loc_42B89E  +
test cl cl +
jz loc_42B891  +
mov cl [eax+1] +
cmp cl [edx+1] +
jnz loc_42B89E  +
add eax 2 +
add edx 2 +
test cl cl +
jnz loc_42B875  +
jnz loc_42B89E  +
mov eax [ebp+var_4] +
mov [ebp+var_4] eax +
jmp loc_42BA15  +
mov eax ebx +
mov edx offset aCentimeter +
mov cl [eax] +
cmp cl [edx] +
jnz loc_42B8CE  +
test cl cl +
jz loc_42B8C1  +
mov cl [eax+1] +
cmp cl [edx+1] +
jnz loc_42B8CE  +
add eax 2 +
add edx 2 +
test cl cl +
jnz loc_42B8A5  +
jnz loc_42B8CE  +
mov eax [ebp+var_4] +
mov [ebp+var_4] eax +
jmp loc_42BA15  +
mov eax ebx +
mov edx offset aDecimeter +
mov cl [eax] +
cmp cl [edx] +
jnz loc_42B904  +
test cl cl +
jz loc_42B8F1  +
mov cl [eax+1] +
cmp cl [edx+1] +
jnz loc_42B904  +
add eax 2 +
add edx 2 +
test cl cl +
jnz loc_42B8D5  +
jnz loc_42B904  +
fld  [ebp+var_4] +
fmul  ds:flt_42BA4C +
fstp  [ebp+var_4] +
jmp loc_42BA15  +
mov eax ebx +
mov edx offset aDezimeter +
mov cl [eax] +
cmp cl [edx] +
jnz loc_42B93A  +
test cl cl +
jz loc_42B927  +
mov cl [eax+1] +
cmp cl [edx+1] +
jnz loc_42B93A  +
add eax 2 +
add edx 2 +
test cl cl +
jnz loc_42B90B  +
jnz loc_42B93A  +
fld  [ebp+var_4] +
fmul  ds:flt_42BA4C +
fstp  [ebp+var_4] +
jmp loc_42BA15  +
mov eax ebx +
mov edx offset aDm +
mov cl [eax] +
cmp cl [edx] +
jnz loc_42B970  +
test cl cl +
jz loc_42B95D  +
mov cl [eax+1] +
cmp cl [edx+1] +
jnz loc_42B970  +
add eax 2 +
add edx 2 +
test cl cl +
jnz loc_42B941  +
jnz loc_42B970  +
fld  [ebp+var_4] +
fmul  ds:flt_42BA4C +
fstp  [ebp+var_4] +
jmp loc_42BA15  +
mov eax ebx +
mov edx offset aM +
mov cl [eax] +
cmp cl [edx] +
jnz loc_42B9A3  +
test cl cl +
jz loc_42B993  +
mov cl [eax+1] +
cmp cl [edx+1] +
jnz loc_42B9A3  +
add eax 2 +
add edx 2 +
test cl cl +
jnz loc_42B977  +
jnz loc_42B9A3  +
fld  [ebp+var_4] +
fmul  ds:flt_42BA50 +
fstp  [ebp+var_4] +
jmp loc_42BA15  +
mov eax ebx +
mov edx offset aMeter +
mov cl [eax] +
cmp cl [edx] +
jnz loc_42B9D6  +
test cl cl +
jz loc_42B9C6  +
mov cl [eax+1] +
cmp cl [edx+1] +
jnz loc_42B9D6  +
add eax 2 +
add edx 2 +
test cl cl +
jnz loc_42B9AA  +
jnz loc_42B9D6  +
fld  [ebp+var_4] +
fmul  ds:flt_42BA50 +
fstp  [ebp+var_4] +
jmp loc_42BA15  +
mov dword_4EBDE4 1 +
mov eax [ebp+arg_0] +
push eax  +
push offset aOptionErrorA_6  +
push offset stream  +
call _fprintf  +
add esp 0Ch +
push offset aMissingUnit_0  +
push offset stream  +
call _fprintf  +
add esp 8 +
mov edx [ebp+var_8] +
mov dword_4D4AEC edx +
xor eax eax +
jmp loc_42BA28  +
mov edx [ebp+arg_4] +
mov ecx [ebp+var_4] +
mov eax 1 +
mov [edx] ecx +
inc dword_4D4AEC  +
pop edi  +
pop esi  +
pop ebx  +
pop ecx  +
pop ecx  +
pop ebp  +
retn   +
***
push ecx  +
push ebx  +
push esi  +
push edi  +
mov eax [ebp+arg_0] +
mov dword_4EAFF4 1 +
mov edx [ebp+arg_4] +
mov dword_4EAFEC eax +
mov dword_4EAFF0 edx +
xor ecx ecx +
xor eax eax +
mov dword_4EBDE4 ecx +
xor edx edx +
mov dword_4EBDE8 eax +
mov dword_4EBDEC edx +
xor ecx ecx +
mov dword_4EBDF0 ecx +
mov byte_4EB634 0 +
mov edi offset unk_4D4B94 +
mov esi offset dword_4D4B20 +
mov ebx offset aIdOptions_cV1_ +
jmp loc_42CD6D  +
lea eax [ebx+20Ah] +
push eax  +
call sub_42AF9C  +
pop ecx  +
test eax eax +
jz loc_42BAD0  +
mov dword_4EBDE8 1 +
jmp loc_42CD60  +
lea edx [ebx+20Dh] +
push edx  +
call sub_42AF9C  +
pop ecx  +
test eax eax +
jz loc_42BAF0  +
mov dword_4EBDE8 1 +
jmp loc_42CD60  +
lea ecx [ebx+210h] +
push ecx  +
call sub_42AF9C  +
pop ecx  +
test eax eax +
jz loc_42BB10  +
mov dword_4EBDE8 1 +
jmp loc_42CD60  +
lea eax [ebx+216h] +
push eax  +
call sub_42AF9C  +
pop ecx  +
test eax eax +
jz loc_42BB30  +
mov dword_4EBDEC 1 +
jmp loc_42CD60  +
lea edx [ebx+219h] +
push edx  +
call sub_42AF9C  +
pop ecx  +
test eax eax +
jz loc_42BB50  +
mov dword_4EBDEC 1 +
jmp loc_42CD60  +
push offset unk_4D4B84  +
lea ecx [ebx+222h] +
push ecx  +
call sub_42B024  +
add esp 8 +
test eax eax +
jnz loc_42CD60  +
push offset unk_4D4B84  +
lea eax [ebx+225h] +
push eax  +
call sub_42B024  +
add esp 8 +
test eax eax +
jnz loc_42CD60  +
push offset dword_4D4B64  +
lea edx [ebx+230h] +
push edx  +
call sub_42B024  +
add esp 8 +
test eax eax +
jnz loc_42CD60  +
push offset dword_4D4B64  +
lea ecx [ebx+233h] +
push ecx  +
call sub_42B024  +
add esp 8 +
test eax eax +
jnz loc_42CD60  +
push offset dword_4D4B64  +
lea eax [ebx+239h] +
push eax  +
call sub_42B024  +
add esp 8 +
test eax eax +
jnz loc_42CD60  +
lea edx [ebx+242h] +
push edx  +
call sub_42AF9C  +
pop ecx  +
test eax eax +
jz loc_42BBFA  +
xor ecx ecx +
mov dword_4D4B24 ecx +
jmp loc_42CD60  +
lea eax [ebx+248h] +
push eax  +
call sub_42AF9C  +
pop ecx  +
test eax eax +
jz loc_42BC1A  +
mov dword_4D4B24 2 +
jmp loc_42CD60  +
push offset dword_4D4B3C  +
lea edx [ebx+254h] +
push edx  +
call sub_42B024  +
add esp 8 +
test eax eax +
jnz loc_42CD60  +
push offset dword_4D4B3C  +
lea ecx [ebx+257h] +
push ecx  +
call sub_42B024  +
add esp 8 +
test eax eax +
jnz loc_42CD60  +
push offset dword_4D4B3C  +
lea eax [ebx+25Dh] +
push eax  +
call sub_42B024  +
add esp 8 +
test eax eax +
jnz loc_42CD60  +
push offset dword_4D4B38  +
lea edx [ebx+267h] +
push edx  +
call sub_42B024  +
add esp 8 +
test eax eax +
jnz loc_42CD60  +
push offset dword_4D4B08  +
lea ecx [ebx+26Dh] +
push ecx  +
call sub_42B024  +
add esp 8 +
test eax eax +
jnz loc_42CD60  +
push offset dword_4D4B08  +
lea eax [ebx+270h] +
push eax  +
call sub_42B024  +
add esp 8 +
test eax eax +
jnz loc_42CD60  +
lea edx [ebx+277h] +
push edx  +
call sub_42AF9C  +
pop ecx  +
test eax eax +
jz loc_42BCE2  +
mov dword_4D4B0C 1 +
jmp loc_42CD60  +
lea ecx [ebx+27Ah] +
push ecx  +
call sub_42AF9C  +
pop ecx  +
test eax eax +
jz loc_42BD02  +
mov dword_4D4B0C 1 +
jmp loc_42CD60  +
lea eax [ebx+280h] +
push eax  +
call sub_42AF9C  +
pop ecx  +
test eax eax +
jz loc_42BD22  +
mov dword_4D4B1C 1 +
jmp loc_42CD60  +
lea edx [ebx+28Dh] +
push edx  +
call sub_42AF9C  +
pop ecx  +
test eax eax +
jz loc_42BD42  +
mov dword_4D4B1C 1 +
jmp loc_42CD60  +
lea ecx [ebx+29Ch] +
push ecx  +
call sub_42AF9C  +
pop ecx  +
test eax eax +
jz loc_42BD62  +
mov dword_4D4B34 1 +
jmp loc_42CD60  +
lea eax [ebx+29Fh] +
push eax  +
call sub_42AF9C  +
pop ecx  +
test eax eax +
jz loc_42BD82  +
mov dword_4D4B34 1 +
jmp loc_42CD60  +
lea edx [ebx+2ABh] +
push edx  +
call sub_42AF9C  +
pop ecx  +
test eax eax +
jz loc_42BDA2  +
mov dword_4D4B00 1 +
jmp loc_42CD60  +
lea ecx [ebx+2AEh] +
push ecx  +
call sub_42AF9C  +
pop ecx  +
test eax eax +
jz loc_42BDC2  +
mov dword_4D4B00 1 +
jmp loc_42CD60  +
lea eax [ebx+2B5h] +
push eax  +
call sub_42AF9C  +
pop ecx  +
test eax eax +
jz loc_42BDE2  +
mov dword_4D4B24 1 +
jmp loc_42CD60  +
lea edx [ebx+2BDh] +
push edx  +
call sub_42AF9C  +
pop ecx  +
test eax eax +
jz loc_42BE02  +
mov dword_4D4B24 3 +
jmp loc_42CD60  +
lea ecx [ebx+2C9h] +
push ecx  +
call sub_42AF9C  +
pop ecx  +
test eax eax +
jz loc_42BE22  +
mov dword_4D4B68 1 +
jmp loc_42CD60  +
lea eax [ebx+2D4h] +
push eax  +
call sub_42AF9C  +
pop ecx  +
test eax eax +
jz loc_42BE42  +
mov dword_4D4B68 1 +
jmp loc_42CD60  +
lea edx [ebx+2DFh] +
push edx  +
call sub_42AF9C  +
pop ecx  +
test eax eax +
jz loc_42BE62  +
mov dword_4D4B68 2 +
jmp loc_42CD60  +
lea ecx [ebx+2ECh] +
push ecx  +
call sub_42AF9C  +
pop ecx  +
test eax eax +
jz loc_42BE82  +
mov dword_4D4B68 2 +
jmp loc_42CD60  +
lea eax [ebx+2F9h] +
push eax  +
call sub_42AF9C  +
pop ecx  +
test eax eax +
jz loc_42BEA2  +
mov dword_4D4B40 1 +
jmp loc_42CD60  +
lea edx [ebx+301h] +
push edx  +
call sub_42AF9C  +
pop ecx  +
test eax eax +
jz loc_42BEC2  +
mov dword_4D4B40 1 +
jmp loc_42CD60  +
lea ecx [ebx+30Ah] +
push ecx  +
call sub_42AF9C  +
pop ecx  +
test eax eax +
jz loc_42BEDF  +
xor eax eax +
mov dword_4D4B28 eax +
jmp loc_42CD60  +
lea edx [ebx+313h] +
push edx  +
call sub_42AF9C  +
pop ecx  +
test eax eax +
jz loc_42BEFD  +
xor ecx ecx +
mov dword_4D4B28 ecx +
jmp loc_42CD60  +
lea eax [ebx+31Ch] +
push eax  +
call sub_42AF9C  +
pop ecx  +
test eax eax +
jz loc_42BF1B  +
xor edx edx +
mov dword_4D4B28 edx +
jmp loc_42CD60  +
lea ecx [ebx+327h] +
push ecx  +
call sub_42AF9C  +
pop ecx  +
test eax eax +
jz loc_42BF38  +
xor eax eax +
mov dword_4D4B30 eax +
jmp loc_42CD60  +
lea edx [ebx+32Fh] +
push edx  +
call sub_42AF9C  +
pop ecx  +
test eax eax +
jz loc_42BF56  +
xor ecx ecx +
mov dword_4D4B30 ecx +
jmp loc_42CD60  +
lea eax [ebx+33Bh] +
push eax  +
call sub_42AF9C  +
pop ecx  +
test eax eax +
jz loc_42BF74  +
xor edx edx +
mov dword_4D4B2C edx +
jmp loc_42CD60  +
lea ecx [ebx+347h] +
push ecx  +
call sub_42AF9C  +
pop ecx  +
test eax eax +
jz loc_42BF94  +
mov dword_4D4B10 1 +
jmp loc_42CD60  +
lea eax [ebx+350h] +
push eax  +
call sub_42AF9C  +
pop ecx  +
test eax eax +
jz loc_42BFB4  +
mov dword_4D4B14 1 +
jmp loc_42CD60  +
lea edx [ebx+359h] +
push edx  +
call sub_42AF9C  +
pop ecx  +
test eax eax +
jz loc_42BFD4  +
mov dword_4D4B68 1 +
jmp loc_42CD60  +
lea ecx [ebx+365h] +
push ecx  +
call sub_42AF9C  +
pop ecx  +
test eax eax +
jz loc_42BFF4  +
mov dword_4D4B68 2 +
jmp loc_42CD60  +
push offset dword_4D4B44  +
lea eax [ebx+373h] +
push eax  +
call sub_42B024  +
add esp 8 +
test eax eax +
jnz loc_42CD60  +
push offset dword_4D4B44  +
lea edx [ebx+376h] +
push edx  +
call sub_42B024  +
add esp 8 +
test eax eax +
jnz loc_42CD60  +
push offset dword_4D4B44  +
lea ecx [ebx+37Ch] +
push ecx  +
call sub_42B024  +
add esp 8 +
test eax eax +
jnz loc_42CD60  +
push offset dword_4D4B48  +
lea eax [ebx+386h] +
push eax  +
call sub_42B024  +
add esp 8 +
test eax eax +
jnz loc_42CD60  +
lea edx [ebx+38Ch] +
push edx  +
call sub_42AF9C  +
pop ecx  +
test eax eax +
jz loc_42C084  +
mov dword_4D4B5C 1 +
jmp loc_42CD60  +
lea ecx [ebx+392h] +
push ecx  +
call sub_42AF9C  +
pop ecx  +
test eax eax +
jz loc_42C0A4  +
mov dword_4D4B5C 2 +
jmp loc_42CD60  +
push offset dword_4D4B50  +
lea eax [ebx+39Ah] +
push eax  +
call sub_42B024  +
add esp 8 +
test eax eax +
jnz loc_42CD60  +
lea edx [ebx+39Dh] +
push edx  +
call sub_42AF9C  +
pop ecx  +
test eax eax +
jz loc_42C0F4  +
push 0  +
lea ecx [ebx+3A5h] +
push ecx  +
call j____access  +
add esp 8 +
test eax eax +
setnz al  +
and eax 1 +
mov dword_4D4C3C eax +
jmp loc_42CD60  +
push offset dword_4D4B50  +
lea edx [ebx+3AEh] +
push edx  +
call sub_42B024  +
add esp 8 +
test eax eax +
jnz loc_42CD60  +
push offset dword_4D4B50  +
lea ecx [ebx+3B4h] +
push ecx  +
call sub_42B024  +
add esp 8 +
test eax eax +
jnz loc_42CD60  +
push offset dword_4D4B54  +
lea eax [ebx+3C0h] +
push eax  +
call sub_42B024  +
add esp 8 +
test eax eax +
jnz loc_42CD60  +
lea edx [ebx+3C6h] +
push edx  +
call sub_42AF9C  +
pop ecx  +
test eax eax +
jz loc_42C168  +
mov dword_4D4B6C 1 +
jmp loc_42CD60  +
lea ecx [ebx+3D2h] +
push ecx  +
call sub_42AF9C  +
pop ecx  +
test eax eax +
jz loc_42C188  +
mov dword_4D4B6C 1 +
jmp loc_42CD60  +
lea eax [ebx+3DEh] +
push eax  +
call sub_42AF9C  +
pop ecx  +
test eax eax +
jz loc_42C1A8  +
mov dword_4D4B6C 2 +
jmp loc_42CD60  +
lea edx [ebx+3ECh] +
push edx  +
call sub_42AF9C  +
pop ecx  +
test eax eax +
jz loc_42C1C8  +
mov dword_4D4B6C 2 +
jmp loc_42CD60  +
push offset dword_4D4B58  +
lea ecx [ebx+3FAh] +
push ecx  +
call sub_42B024  +
add esp 8 +
test eax eax +
jnz loc_42CD60  +
lea eax [ebx+400h] +
push eax  +
call sub_42AF9C  +
pop ecx  +
test eax eax +
jz loc_42C204  +
mov dword_4D4B60 1 +
jmp loc_42CD60  +
lea edx [ebx+40Ah] +
push edx  +
call sub_42AF9C  +
pop ecx  +
test eax eax +
jz loc_42C224  +
mov dword_4D4B60 2 +
jmp loc_42CD60  +
lea ecx [ebx+416h] +
push ecx  +
call sub_42AF9C  +
pop ecx  +
test eax eax +
jz loc_42C244  +
mov dword_4D4B18 1 +
jmp loc_42CD60  +
lea eax [ebx+419h] +
push eax  +
call sub_42AF9C  +
pop ecx  +
test eax eax +
jz loc_42C264  +
mov dword_4D4B18 1 +
jmp loc_42CD60  +
lea edx [ebx+424h] +
push edx  +
call sub_42AF9C  +
pop ecx  +
test eax eax +
jz loc_42C284  +
mov dword_4D4B04 1 +
jmp loc_42CD60  +
lea ecx [ebx+42Ch] +
push ecx  +
call sub_42AF9C  +
pop ecx  +
test eax eax +
jz loc_42C2A4  +
mov dword_4D4B7C 1 +
jmp loc_42CD60  +
push offset dword_4D4C40  +
lea eax [ebx+434h] +
push eax  +
call sub_42B024  +
add esp 8 +
test eax eax +
jz loc_42C2D8  +
cmp dword_4D4C40 1 +
jg loc_42CD60  +
mov dword_4D4C40 1 +
jmp loc_42CD60  +
push offset dword_4D4C40  +
lea edx [ebx+437h] +
push edx  +
call sub_42B024  +
add esp 8 +
test eax eax +
jz loc_42C30C  +
cmp dword_4D4C40 1 +
jg loc_42CD60  +
mov dword_4D4C40 1 +
jmp loc_42CD60  +
lea ecx [ebp+var_4] +
push ecx  +
lea eax [ebx+442h] +
push eax  +
call sub_42B024  +
add esp 8 +
test eax eax +
jz loc_42C33B  +
cmp [ebp+var_4] 0 +
jle loc_42CD60  +
mov edx [ebp+var_4] +
mov dword_4D4C34 edx +
jmp loc_42CD60  +
lea ecx [ebp+var_4] +
push ecx  +
lea eax [ebx+448h] +
push eax  +
call sub_42B024  +
add esp 8 +
test eax eax +
jz loc_42C36A  +
cmp [ebp+var_4] 0 +
jle loc_42CD60  +
mov edx [ebp+var_4] +
mov dword_4D4C38 edx +
jmp loc_42CD60  +
lea ecx [ebx+44Eh] +
push ecx  +
call sub_42AF9C  +
pop ecx  +
test eax eax +
jz loc_42C38D  +
xor eax eax +
mov dword_4D4C30 eax +
mov dword ptr [edi] 3 +
jmp loc_42CD60  +
lea edx [ebx+45Ah] +
push edx  +
call sub_42AF9C  +
pop ecx  +
test eax eax +
jz loc_42C3B1  +
xor ecx ecx +
mov dword_4D4C30 ecx +
mov dword ptr [edi] 3 +
jmp loc_42CD60  +
lea eax [ebx+464h] +
push eax  +
call sub_42AF9C  +
pop ecx  +
test eax eax +
jz loc_42C3D5  +
xor edx edx +
mov dword_4D4C30 edx +
mov dword ptr [edi] 3 +
jmp loc_42CD60  +
lea ecx [ebx+472h] +
push ecx  +
lea eax [ebx+46Fh] +
push eax  +
call sub_42B15C  +
add esp 8 +
test eax eax +
jz loc_42C3F8  +
xor edx edx +
mov [esi] edx +
jmp loc_42CD60  +
lea ecx [ebx+47Ch] +
push ecx  +
lea eax [ebx+479h] +
push eax  +
call sub_42B15C  +
add esp 8 +
test eax eax +
jz loc_42C41D  +
mov dword ptr [esi] 0Ch +
jmp loc_42CD60  +
lea edx [ebx+483h] +
push edx  +
lea ecx [ebx+480h] +
push ecx  +
call sub_42B15C  +
add esp 8 +
test eax eax +
jz loc_42C442  +
mov dword ptr [esi] 3 +
jmp loc_42CD60  +
lea eax [ebx+488h] +
push eax  +
lea edx [ebx+485h] +
push edx  +
call sub_42B15C  +
add esp 8 +
test eax eax +
jz loc_42C467  +
mov dword ptr [esi] 3 +
jmp loc_42CD60  +
lea ecx [ebx+497h] +
push ecx  +
lea eax [ebx+494h] +
push eax  +
call sub_42B15C  +
add esp 8 +
test eax eax +
jz loc_42C48C  +
mov dword ptr [esi] 1 +
jmp loc_42CD60  +
lea edx [ebx+49Ch] +
push edx  +
lea ecx [ebx+499h] +
push ecx  +
call sub_42B15C  +
add esp 8 +
test eax eax +
jz loc_42C4B1  +
mov dword ptr [esi] 1 +
jmp loc_42CD60  +
lea eax [ebx+4A8h] +
push eax  +
lea edx [ebx+4A5h] +
push edx  +
call sub_42B15C  +
add esp 8 +
test eax eax +
jz loc_42C4D6  +
mov dword ptr [esi] 4 +
jmp loc_42CD60  +
lea ecx [ebx+4AEh] +
push ecx  +
lea eax [ebx+4ABh] +
push eax  +
call sub_42B15C  +
add esp 8 +
test eax eax +
jz loc_42C4FB  +
mov dword ptr [esi] 4 +
jmp loc_42CD60  +
lea edx [ebx+4BEh] +
push edx  +
lea ecx [ebx+4BBh] +
push ecx  +
call sub_42B15C  +
add esp 8 +
test eax eax +
jz loc_42C520  +
mov dword ptr [esi] 2 +
jmp loc_42CD60  +
lea eax [ebx+4C3h] +
push eax  +
lea edx [ebx+4C0h] +
push edx  +
call sub_42B15C  +
add esp 8 +
test eax eax +
jz loc_42C545  +
mov dword ptr [esi] 2 +
jmp loc_42CD60  +
lea ecx [ebx+4CFh] +
push ecx  +
lea eax [ebx+4CCh] +
push eax  +
call sub_42B15C  +
add esp 8 +
test eax eax +
jz loc_42C56A  +
mov dword ptr [esi] 5 +
jmp loc_42CD60  +
lea edx [ebx+4D5h] +
push edx  +
lea ecx [ebx+4D2h] +
push ecx  +
call sub_42B15C  +
add esp 8 +
test eax eax +
jz loc_42C58F  +
mov dword ptr [esi] 5 +
jmp loc_42CD60  +
lea eax [ebx+4E5h] +
push eax  +
lea edx [ebx+4E2h] +
push edx  +
call sub_42B15C  +
add esp 8 +
test eax eax +
jz loc_42C5B4  +
mov dword ptr [esi] 6 +
jmp loc_42CD60  +
lea ecx [ebx+4F1h] +
push ecx  +
lea eax [ebx+4EEh] +
push eax  +
call sub_42B15C  +
add esp 8 +
test eax eax +
jz loc_42C5D9  +
mov dword ptr [esi] 6 +
jmp loc_42CD60  +
lea edx [ebx+500h] +
push edx  +
lea ecx [ebx+4FDh] +
push ecx  +
call sub_42B15C  +
add esp 8 +
test eax eax +
jz loc_42C5FE  +
mov dword ptr [esi] 7 +
jmp loc_42CD60  +
lea eax [ebx+50Ch] +
push eax  +
lea edx [ebx+509h] +
push edx  +
call sub_42B15C  +
add esp 8 +
test eax eax +
jz loc_42C623  +
mov dword ptr [esi] 7 +
jmp loc_42CD60  +
lea ecx [ebx+51Bh] +
push ecx  +
lea eax [ebx+518h] +
push eax  +
call sub_42B15C  +
add esp 8 +
test eax eax +
jz loc_42C648  +
mov dword ptr [esi] 8 +
jmp loc_42CD60  +
lea edx [ebx+528h] +
push edx  +
lea ecx [ebx+525h] +
push ecx  +
call sub_42B15C  +
add esp 8 +
test eax eax +
jz loc_42C66D  +
mov dword ptr [esi] 8 +
jmp loc_42CD60  +
lea eax [ebx+538h] +
push eax  +
lea edx [ebx+535h] +
push edx  +
call sub_42B15C  +
add esp 8 +
test eax eax +
jz loc_42C692  +
mov dword ptr [esi] 9 +
jmp loc_42CD60  +
lea ecx [ebx+545h] +
push ecx  +
lea eax [ebx+542h] +
push eax  +
call sub_42B15C  +
add esp 8 +
test eax eax +
jz loc_42C6B7  +
mov dword ptr [esi] 9 +
jmp loc_42CD60  +
lea edx [ebx+555h] +
push edx  +
lea ecx [ebx+552h] +
push ecx  +
call sub_42B15C  +
add esp 8 +
test eax eax +
jz loc_42C6DC  +
mov dword ptr [esi] 0Ah +
jmp loc_42CD60  +
lea eax [ebx+55Fh] +
push eax  +
lea edx [ebx+55Ch] +
push edx  +
call sub_42B15C  +
add esp 8 +
test eax eax +
jz loc_42C701  +
mov dword ptr [esi] 0Ah +
jmp loc_42CD60  +
lea ecx [ebx+56Ch] +
push ecx  +
lea eax [ebx+569h] +
push eax  +
call sub_42B15C  +
add esp 8 +
test eax eax +
jz loc_42C726  +
mov dword ptr [esi] 0Bh +
jmp loc_42CD60  +
lea edx [ebx+576h] +
push edx  +
lea ecx [ebx+573h] +
push ecx  +
call sub_42B15C  +
add esp 8 +
test eax eax +
jz loc_42C74B  +
mov dword ptr [esi] 0Bh +
jmp loc_42CD60  +
lea eax [ebx+583h] +
push eax  +
lea edx [ebx+580h] +
push edx  +
call sub_42B15C  +
add esp 8 +
test eax eax +
jz loc_42C770  +
mov dword ptr [esi] 14h +
jmp loc_42CD60  +
lea ecx [ebx+58Eh] +
push ecx  +
lea eax [ebx+588h] +
push eax  +
call sub_42B15C  +
add esp 8 +
test eax eax +
jz loc_42C797  +
xor edx edx +
mov dword_4CDD84 edx +
jmp loc_42CD60  +
lea ecx [ebx+59Bh] +
push ecx  +
lea eax [ebx+595h] +
push eax  +
call sub_42B15C  +
add esp 8 +
test eax eax +
jz loc_42C7C0  +
mov dword_4CDD84 2 +
jmp loc_42CD60  +
lea edx [ebx+5A7h] +
push edx  +
lea ecx [ebx+5A1h] +
push ecx  +
call sub_42B15C  +
add esp 8 +
test eax eax +
jz loc_42C7E9  +
mov dword_4CDD84 3 +
jmp loc_42CD60  +
lea eax [ebx+5B3h] +
push eax  +
lea edx [ebx+5ADh] +
push edx  +
call sub_42B15C  +
add esp 8 +
test eax eax +
jz loc_42C812  +
mov dword_4CDD84 4 +
jmp loc_42CD60  +
lea ecx [ebx+5C0h] +
push ecx  +
lea eax [ebx+5BAh] +
push eax  +
call sub_42B15C  +
add esp 8 +
test eax eax +
jz loc_42C83B  +
mov dword_4CDD84 5 +
jmp loc_42CD60  +
push offset byte_4EAFF8  +
lea edx [ebx+5C7h] +
push edx  +
call sub_42B2A8  +
add esp 8 +
test eax eax +
jz loc_42C86A  +
mov dword_4D4B88 1 +
xor ecx ecx +
mov dword_4D4B8C ecx +
jmp loc_42CD60  +
push offset byte_4EAFF8  +
lea eax [ebx+5D2h] +
push eax  +
call sub_42B2A8  +
add esp 8 +
test eax eax +
jz loc_42C8A1  +
mov dword_4D4B88 1 +
mov dword_4D4B8C 1 +
mov dword ptr [edi] 3 +
jmp loc_42CD60  +
push offset byte_4EAFF8  +
lea edx [ebx+5DDh] +
push edx  +
call sub_42B2A8  +
add esp 8 +
test eax eax +
jz loc_42C8D8  +
mov dword_4D4B88 1 +
mov dword_4D4B8C 2 +
mov dword ptr [edi] 1 +
jmp loc_42CD60  +
push offset byte_4EAFF8  +
lea ecx [ebx+5E8h] +
push ecx  +
call sub_42B2A8  +
add esp 8 +
test eax eax +
jz loc_42C909  +
mov dword_4D4B88 1 +
mov dword_4D4B8C 3 +
jmp loc_42CD60  +
lea eax [ebx+5F9h] +
push eax  +
lea edx [ebx+5F2h] +
push edx  +
call sub_42B15C  +
add esp 8 +
test eax eax +
jz loc_42C932  +
mov dword_4D4B90 1 +
jmp loc_42CD60  +
lea ecx [ebx+603h] +
push ecx  +
lea eax [ebx+5FCh] +
push eax  +
call sub_42B15C  +
add esp 8 +
test eax eax +
jz loc_42C95B  +
mov dword_4D4B90 2 +
jmp loc_42CD60  +
lea edx [ebx+60Dh] +
push edx  +
lea ecx [ebx+606h] +
push ecx  +
call sub_42B15C  +
add esp 8 +
test eax eax +
jz loc_42C984  +
mov dword_4D4B90 3 +
jmp loc_42CD60  +
lea eax [ebx+617h] +
push eax  +
lea edx [ebx+610h] +
push edx  +
call sub_42B15C  +
add esp 8 +
test eax eax +
jz loc_42C9AD  +
mov dword_4D4B90 4 +
jmp loc_42CD60  +
lea ecx [ebx+624h] +
push ecx  +
lea eax [ebx+61Dh] +
push eax  +
call sub_42B15C  +
add esp 8 +
test eax eax +
jz loc_42C9D6  +
mov dword_4D4B90 4 +
jmp loc_42CD60  +
lea edx [ebx+633h] +
push edx  +
lea ecx [ebx+62Ch] +
push ecx  +
call sub_42B15C  +
add esp 8 +
test eax eax +
jz loc_42C9FF  +
mov dword_4D4B90 5 +
jmp loc_42CD60  +
lea eax [ebx+63Fh] +
push eax  +
lea edx [ebx+638h] +
push edx  +
call sub_42B15C  +
add esp 8 +
test eax eax +
jz loc_42CA28  +
mov dword_4D4B90 5 +
jmp loc_42CD60  +
lea ecx [ebx+64Dh] +
push ecx  +
lea eax [ebx+646h] +
push eax  +
call sub_42B15C  +
add esp 8 +
test eax eax +
jz loc_42CA51  +
mov dword_4D4B90 6 +
jmp loc_42CD60  +
lea edx [ebx+659h] +
push edx  +
lea ecx [ebx+652h] +
push ecx  +
call sub_42B15C  +
add esp 8 +
test eax eax +
jz loc_42CA7A  +
mov dword_4D4B90 6 +
jmp loc_42CD60  +
lea eax [ebx+65Fh] +
push eax  +
call sub_42AF9C  +
pop ecx  +
test eax eax +
jz loc_42CA98  +
xor edx edx +
mov dword_4D4BC4 edx +
jmp loc_42CD60  +
lea ecx [ebx+66Eh] +
push ecx  +
call sub_42AF9C  +
pop ecx  +
test eax eax +
jz loc_42CAB4  +
mov dword ptr [edi] 1 +
jmp loc_42CD60  +
lea eax [ebx+675h] +
push eax  +
call sub_42AF9C  +
pop ecx  +
test eax eax +
jz loc_42CAD0  +
mov dword ptr [edi] 1 +
jmp loc_42CD60  +
lea edx [ebx+67Dh] +
push edx  +
call sub_42AF9C  +
pop ecx  +
test eax eax +
jz loc_42CAEC  +
mov dword ptr [edi] 2 +
jmp loc_42CD60  +
lea ecx [ebx+683h] +
push ecx  +
call sub_42AF9C  +
pop ecx  +
test eax eax +
jz loc_42CB08  +
mov dword ptr [edi] 2 +
jmp loc_42CD60  +
lea eax [ebx+689h] +
push eax  +
call sub_42AF9C  +
pop ecx  +
test eax eax +
jz loc_42CB28  +
mov dword_4D4B98 1 +
jmp loc_42CD60  +
lea edx [ebx+693h] +
push edx  +
call sub_42AF9C  +
pop ecx  +
test eax eax +
jz loc_42CB48  +
mov dword_4D4B98 2 +
jmp loc_42CD60  +
push offset dword_4D4B9C  +
lea ecx [ebx+69Eh] +
push ecx  +
call sub_42B024  +
add esp 8 +
test eax eax +
jz loc_42CBCF  +
cmp dword_4D4B9C 10h +
jle loc_42CB78  +
mov dword_4D4B9C 5 +
jmp loc_42CD60  +
cmp dword_4D4B9C 9 +
jle loc_42CB90  +
mov dword_4D4B9C 4 +
jmp loc_42CD60  +
cmp dword_4D4B9C 4 +
jle loc_42CBA8  +
mov dword_4D4B9C 3 +
jmp loc_42CD60  +
cmp dword_4D4B9C 1 +
jle loc_42CBC0  +
mov dword_4D4B9C 2 +
jmp loc_42CD60  +
mov dword_4D4B9C 1 +
jmp loc_42CD60  +
push offset unk_4D4BA0  +
lea eax [ebx+6A5h] +
push eax  +
call sub_42B024  +
add esp 8 +
test eax eax +
jnz loc_42CD60  +
push offset unk_4D4BA4  +
lea edx [ebx+6ABh] +
push edx  +
call sub_42B024  +
add esp 8 +
test eax eax +
jnz loc_42CD60  +
lea ecx [ebp+var_4] +
push ecx  +
lea eax [ebx+6B1h] +
push eax  +
call sub_42B024  +
add esp 8 +
test eax eax +
jz loc_42CC34  +
fild  [ebp+var_4] +
fld  ds:tbyte_42CDA4 +
fmulp st(1) st +
fstp  flt_4D4BA8 +
jmp loc_42CD60  +
push offset unk_4D4BAC  +
lea edx [ebx+6B8h] +
push edx  +
call sub_42B4E8  +
add esp 8 +
test eax eax +
jnz loc_42CD60  +
push offset unk_4D4BB0  +
lea ecx [ebx+6BFh] +
push ecx  +
call sub_42B4E8  +
add esp 8 +
test eax eax +
jnz loc_42CD60  +
push offset unk_4D4BB4  +
lea eax [ebx+6C7h] +
push eax  +
call sub_42B4E8  +
add esp 8 +
test eax eax +
jnz loc_42CD60  +
push offset unk_4D4BB8  +
lea edx [ebx+6CBh] +
push edx  +
call sub_42B4E8  +
add esp 8 +
test eax eax +
jnz loc_42CD60  +
push offset unk_4D4BBC  +
lea ecx [ebx+6CFh] +
push ecx  +
call sub_42B4E8  +
add esp 8 +
test eax eax +
jnz loc_42CD60  +
push offset unk_4D4BC0  +
lea eax [ebx+6D3h] +
push eax  +
call sub_42B4E8  +
add esp 8 +
test eax eax +
jnz loc_42CD60  +
lea edx [ebx+6D7h] +
push edx  +
call sub_42AF9C  +
pop ecx  +
test eax eax +
jz loc_42CCF9  +
mov dword_4EBDF0 1 +
jmp loc_42CD60  +
mov ecx dword_4EAFF0 +
mov eax dword_4D4AEC +
mov eax [ecx+eax*4] +
cmp byte ptr [eax] 2Dh +
jnz loc_42CD18  +
mov dword_4EBDE4 1 +
jmp loc_42CD60  +
push 320h  +
mov edx dword_4EAFF0 +
mov ecx dword_4D4AEC +
push eax  +
push offset byte_4EB634  +
call _strncpy  +
add esp 0Ch +
inc dword_4D4AEC  +
mov byte_4EB954 0 +
cmp dword_4EBDF0 0 +
jz loc_42CD59  +
mov dword_4EBDE4 1 +
jmp loc_42CD60  +
mov eax 1 +
jmp loc_42CD9C  +
cmp dword_4EBDE4 0 +
jz loc_42CD6D  +
xor eax eax +
jmp loc_42CD9C  +
mov edx dword_4D4AEC +
cmp edx dword_4EAFEC +
jl loc_42BAB0  +
cmp dword_4EBDF0 0 +
jz loc_42CD97  +
lea esi [ebx+6D9h] +
mov edi offset byte_4EB634 +
mov eax edi +
movs   +
mov eax 1 +
pop edi  +
pop esi  +
pop ebx  +
pop ecx  +
pop ebp  +
retn   +
***
cmp dword_4EBDEC 0 +
jz loc_42CE75  +
push offset aV_1_3  +
lea eax [ebx+6DBh] +
push eax  +
call _printf  +
add esp 8 +
lea edx [ebx+703h] +
push edx  +
call _printf  +
pop ecx  +
push offset aDate1995020811  +
push (offset aRevision3_17+1)  +
lea ecx [ebx+72Eh] +
push ecx  +
call _printf  +
add esp 0Ch +
lea eax [ebx+735h] +
push eax  +
call _printf  +
pop ecx  +
lea edx [ebx+779h] +
push edx  +
call _printf  +
pop ecx  +
lea ecx [ebx+7B9h] +
push ecx  +
call _printf  +
pop ecx  +
lea eax [ebx+7FBh] +
push eax  +
call _printf  +
pop ecx  +
lea edx [ebx+83Eh] +
push edx  +
call _printf  +
pop ecx  +
lea ecx [ebx+87Eh] +
push ecx  +
call _printf  +
pop ecx  +
lea eax [ebx+8A3h] +
push eax  +
call _printf  +
pop ecx  +
cmp byte_4EB634 0 +
jz loc_42CE75  +
push offset byte_4EB634  +
lea edx [ebx+8DFh] +
push edx  +
call _printf  +
add esp 8 +
pop ebx  +
retn   +
***
call _printf  +
add esp 8 +
push offset aDate1995020811  +
push (offset aRevision3_17+1)  +
push offset aSS  +
call _printf  +
add esp 0Ch +
mov eax dword_4EAFF0 +
mov edx [eax] +
push edx  +
push offset aUsageSOptionsF  +
call _printf  +
add esp 8 +
mov ecx dword_4EAFF0 +
mov eax [ecx] +
push eax  +
push offset aEnterSHForHelp  +
call _printf  +
add esp 8 +
push 0  +
call _exit  +
pop ecx  +
retn   +
***
cmp dword_4EBDE8 0 +
jz loc_42DA30  +
push offset aV_1_3  +
lea eax [ebx+98Dh] +
push eax  +
call _printf  +
add esp 8 +
lea edx [ebx+9D4h] +
push offset aDate1995020811  +
push (offset aRevision3_17+1)  +
push edx  +
call _printf  +
add esp 0Ch +
mov ecx dword_4EAFF0 +
mov eax [ecx] +
push eax  +
lea edx [ebx+9DCh] +
push edx  +
call _printf  +
add esp 8 +
lea ecx [ebx+9FFh] +
push ecx  +
call _printf  +
pop ecx  +
lea eax [ebx+0A11h] +
push eax  +
call _printf  +
pop ecx  +
lea edx [ebx+0A23h] +
push edx  +
call _printf  +
pop ecx  +
lea ecx [ebx+0A5Eh] +
push ecx  +
call _printf  +
pop ecx  +
lea eax [ebx+0A7Dh] +
push eax  +
call _printf  +
pop ecx  +
lea edx [ebx+0AADh] +
push edx  +
call _printf  +
pop ecx  +
lea ecx [ebx+0ADDh] +
push ecx  +
call _printf  +
pop ecx  +
lea eax [ebx+0AF6h] +
push eax  +
call _printf  +
pop ecx  +
lea edx [ebx+0B1Bh] +
push edx  +
call _printf  +
pop ecx  +
lea ecx [ebx+0B34h] +
push ecx  +
call _printf  +
pop ecx  +
lea eax [ebx+0B75h] +
push eax  +
call _printf  +
pop ecx  +
lea edx [ebx+0B92h] +
push edx  +
call _printf  +
pop ecx  +
lea ecx [ebx+0BE1h] +
push ecx  +
call _printf  +
pop ecx  +
lea eax [ebx+0C30h] +
push eax  +
call _printf  +
pop ecx  +
lea edx [ebx+0C7Fh] +
push edx  +
call _printf  +
pop ecx  +
lea ecx [ebx+0CACh] +
push ecx  +
call _printf  +
pop ecx  +
lea eax [ebx+0CFBh] +
push eax  +
call _printf  +
pop ecx  +
lea edx [ebx+0D19h] +
push edx  +
call _printf  +
pop ecx  +
lea ecx [ebx+0D60h] +
push ecx  +
call _printf  +
pop ecx  +
lea eax [ebx+0DAFh] +
push eax  +
call _printf  +
pop ecx  +
lea edx [ebx+0DFBh] +
push edx  +
call _printf  +
pop ecx  +
lea ecx [ebx+0E4Ah] +
push ecx  +
call _printf  +
pop ecx  +
lea eax [ebx+0E99h] +
push eax  +
call _printf  +
pop ecx  +
lea edx [ebx+0EBFh] +
push edx  +
call _printf  +
pop ecx  +
lea ecx [ebx+0F0Eh] +
push ecx  +
call _printf  +
pop ecx  +
lea eax [ebx+0F5Dh] +
push eax  +
call _printf  +
pop ecx  +
lea edx [ebx+0F83h] +
push edx  +
call _printf  +
pop ecx  +
lea ecx [ebx+0F9Ah] +
push ecx  +
call _printf  +
pop ecx  +
lea eax [ebx+0FE9h] +
push eax  +
call _printf  +
pop ecx  +
lea edx [ebx+1029h] +
push edx  +
call _printf  +
pop ecx  +
lea ecx [ebx+1043h] +
push ecx  +
call _printf  +
pop ecx  +
lea eax [ebx+1092h] +
push eax  +
call _printf  +
pop ecx  +
lea edx [ebx+10BEh] +
push edx  +
call _printf  +
pop ecx  +
lea ecx [ebx+10DCh] +
push ecx  +
call _printf  +
pop ecx  +
lea eax [ebx+1122h] +
push eax  +
call _printf  +
pop ecx  +
lea edx [ebx+1171h] +
push edx  +
call _printf  +
pop ecx  +
lea ecx [ebx+11C0h] +
push ecx  +
call _printf  +
pop ecx  +
lea eax [ebx+11DFh] +
push eax  +
call _printf  +
pop ecx  +
lea edx [ebx+1214h] +
push edx  +
call _printf  +
pop ecx  +
lea ecx [ebx+1263h] +
push ecx  +
call _printf  +
pop ecx  +
lea eax [ebx+128Fh] +
push eax  +
call _printf  +
pop ecx  +
lea edx [ebx+12C9h] +
push edx  +
call _printf  +
pop ecx  +
lea ecx [ebx+1318h] +
push ecx  +
call _printf  +
pop ecx  +
lea eax [ebx+1367h] +
push eax  +
call _printf  +
pop ecx  +
lea edx [ebx+139Ah] +
push edx  +
call _printf  +
pop ecx  +
lea ecx [ebx+13E3h] +
push ecx  +
call _printf  +
pop ecx  +
lea eax [ebx+141Dh] +
push eax  +
call _printf  +
pop ecx  +
lea edx [ebx+146Ch] +
push edx  +
call _printf  +
pop ecx  +
lea ecx [ebx+1498h] +
push ecx  +
call _printf  +
pop ecx  +
lea eax [ebx+14B7h] +
push eax  +
call _printf  +
pop ecx  +
lea edx [ebx+1506h] +
push edx  +
call _printf  +
pop ecx  +
lea ecx [ebx+1541h] +
push ecx  +
call _printf  +
pop ecx  +
lea eax [ebx+1570h] +
push eax  +
call _printf  +
pop ecx  +
lea edx [ebx+1572h] +
push edx  +
call _printf  +
pop ecx  +
lea ecx [ebx+1598h] +
push ecx  +
call _printf  +
pop ecx  +
lea eax [ebx+15BEh] +
push eax  +
call _printf  +
pop ecx  +
lea edx [ebx+15DBh] +
push edx  +
call _printf  +
pop ecx  +
lea ecx [ebx+162Ah] +
push ecx  +
call _printf  +
pop ecx  +
lea eax [ebx+1679h] +
push eax  +
call _printf  +
pop ecx  +
lea edx [ebx+16AFh] +
push edx  +
call _printf  +
pop ecx  +
lea ecx [ebx+16E6h] +
push ecx  +
call _printf  +
pop ecx  +
lea eax [ebx+172Fh] +
push eax  +
call _printf  +
pop ecx  +
lea edx [ebx+1758h] +
push edx  +
call _printf  +
pop ecx  +
lea ecx [ebx+17A7h] +
push ecx  +
call _printf  +
pop ecx  +
lea eax [ebx+17D3h] +
push eax  +
call _printf  +
pop ecx  +
lea edx [ebx+17FDh] +
push edx  +
call _printf  +
pop ecx  +
lea ecx [ebx+184Ch] +
push ecx  +
call _printf  +
pop ecx  +
lea eax [ebx+187Eh] +
push eax  +
call _printf  +
pop ecx  +
lea edx [ebx+18CDh] +
push edx  +
call _printf  +
pop ecx  +
lea ecx [ebx+18F8h] +
push ecx  +
call _printf  +
pop ecx  +
lea eax [ebx+1922h] +
push eax  +
call _printf  +
pop ecx  +
lea edx [ebx+1971h] +
push edx  +
call _printf  +
pop ecx  +
lea ecx [ebx+19A4h] +
push ecx  +
call _printf  +
pop ecx  +
lea eax [ebx+19F3h] +
push eax  +
call _printf  +
pop ecx  +
lea edx [ebx+1A24h] +
push edx  +
call _printf  +
pop ecx  +
lea ecx [ebx+1A50h] +
push ecx  +
call _printf  +
pop ecx  +
lea eax [ebx+1A9Fh] +
push eax  +
call _printf  +
pop ecx  +
lea edx [ebx+1AD4h] +
push edx  +
call _printf  +
pop ecx  +
lea ecx [ebx+1B23h] +
push ecx  +
call _printf  +
pop ecx  +
lea eax [ebx+1B56h] +
push eax  +
call _printf  +
pop ecx  +
lea edx [ebx+1BA5h] +
push edx  +
call _printf  +
pop ecx  +
lea ecx [ebx+1BD5h] +
push ecx  +
call _printf  +
pop ecx  +
lea eax [ebx+1BE9h] +
push eax  +
call _printf  +
pop ecx  +
lea edx [ebx+1C38h] +
push edx  +
call _printf  +
pop ecx  +
lea ecx [ebx+1C84h] +
push ecx  +
call _printf  +
pop ecx  +
lea eax [ebx+1C9Bh] +
push eax  +
call _printf  +
pop ecx  +
lea edx [ebx+1CEAh] +
push edx  +
call _printf  +
pop ecx  +
lea ecx [ebx+1D1Ch] +
push ecx  +
call _printf  +
pop ecx  +
lea eax [ebx+1D1Eh] +
push eax  +
call _printf  +
pop ecx  +
lea edx [ebx+1D54h] +
push edx  +
call _printf  +
pop ecx  +
lea ecx [ebx+1D8Ah] +
push ecx  +
call _printf  +
pop ecx  +
lea eax [ebx+1DD9h] +
push eax  +
call _printf  +
pop ecx  +
lea edx [ebx+1E28h] +
push edx  +
call _printf  +
pop ecx  +
lea ecx [ebx+1E51h] +
push ecx  +
call _printf  +
pop ecx  +
lea eax [ebx+1EA0h] +
push eax  +
call _printf  +
pop ecx  +
lea edx [ebx+1ECFh] +
push edx  +
call _printf  +
pop ecx  +
lea ecx [ebx+1EE5h] +
push ecx  +
call _printf  +
pop ecx  +
lea eax [ebx+1F34h] +
push eax  +
call _printf  +
pop ecx  +
lea edx [ebx+1F6Ah] +
push edx  +
call _printf  +
pop ecx  +
lea ecx [ebx+1FA9h] +
push ecx  +
call _printf  +
pop ecx  +
lea eax [ebx+1FE8h] +
push eax  +
call _printf  +
pop ecx  +
lea edx [ebx+2000h] +
push edx  +
call _printf  +
pop ecx  +
lea ecx [ebx+203Dh] +
push ecx  +
call _printf  +
pop ecx  +
lea eax [ebx+2055h] +
push eax  +
call _printf  +
pop ecx  +
lea edx [ebx+2092h] +
push edx  +
call _printf  +
pop ecx  +
lea ecx [ebx+20B0h] +
push ecx  +
call _printf  +
pop ecx  +
lea eax [ebx+20FFh] +
push eax  +
call _printf  +
pop ecx  +
lea edx [ebx+211Dh] +
push edx  +
call _printf  +
pop ecx  +
lea ecx [ebx+213Bh] +
push ecx  +
call _printf  +
pop ecx  +
lea eax [ebx+218Ah] +
push eax  +
call _printf  +
pop ecx  +
lea edx [ebx+21A8h] +
push edx  +
call _printf  +
pop ecx  +
lea ecx [ebx+21C8h] +
push ecx  +
call _printf  +
pop ecx  +
lea eax [ebx+2217h] +
push eax  +
call _printf  +
pop ecx  +
lea edx [ebx+2236h] +
push edx  +
call _printf  +
pop ecx  +
lea ecx [ebx+2256h] +
push ecx  +
call _printf  +
pop ecx  +
lea eax [ebx+22A5h] +
push eax  +
call _printf  +
pop ecx  +
lea edx [ebx+22C4h] +
push edx  +
call _printf  +
pop ecx  +
lea ecx [ebx+22DEh] +
push ecx  +
call _printf  +
pop ecx  +
lea eax [ebx+232Dh] +
push eax  +
call _printf  +
pop ecx  +
lea edx [ebx+2349h] +
push edx  +
call _printf  +
pop ecx  +
lea ecx [ebx+2363h] +
push ecx  +
call _printf  +
pop ecx  +
lea eax [ebx+23B2h] +
push eax  +
call _printf  +
pop ecx  +
lea edx [ebx+23CEh] +
push edx  +
call _printf  +
pop ecx  +
lea ecx [ebx+241Dh] +
push ecx  +
call _printf  +
pop ecx  +
lea eax [ebx+243Bh] +
push eax  +
call _printf  +
pop ecx  +
lea edx [ebx+243Dh] +
push edx  +
call _printf  +
pop ecx  +
lea ecx [ebx+2463h] +
push ecx  +
call _printf  +
pop ecx  +
lea eax [ebx+2489h] +
push eax  +
call _printf  +
pop ecx  +
lea edx [ebx+24C5h] +
push edx  +
call _printf  +
pop ecx  +
lea ecx [ebx+2514h] +
push ecx  +
call _printf  +
pop ecx  +
lea eax [ebx+2563h] +
push eax  +
call _printf  +
pop ecx  +
lea edx [ebx+2594h] +
push edx  +
call _printf  +
pop ecx  +
lea ecx [ebx+25E3h] +
push ecx  +
call _printf  +
pop ecx  +
lea eax [ebx+2631h] +
push eax  +
call _printf  +
pop ecx  +
lea edx [ebx+2680h] +
push edx  +
call _printf  +
pop ecx  +
lea ecx [ebx+26CFh] +
push ecx  +
call _printf  +
pop ecx  +
lea eax [ebx+26F6h] +
push eax  +
call _printf  +
pop ecx  +
lea edx [ebx+2745h] +
push edx  +
call _printf  +
pop ecx  +
lea ecx [ebx+2793h] +
push ecx  +
call _printf  +
pop ecx  +
lea eax [ebx+27E2h] +
push eax  +
call _printf  +
pop ecx  +
lea edx [ebx+2816h] +
push edx  +
call _printf  +
pop ecx  +
lea ecx [ebx+2844h] +
push ecx  +
call _printf  +
pop ecx  +
lea eax [ebx+2872h] +
push eax  +
call _printf  +
pop ecx  +
lea edx [ebx+28C1h] +
push edx  +
call _printf  +
pop ecx  +
lea ecx [ebx+2910h] +
push ecx  +
call _printf  +
pop ecx  +
lea eax [ebx+295Fh] +
push eax  +
call _printf  +
pop ecx  +
lea edx [ebx+29AEh] +
push edx  +
call _printf  +
pop ecx  +
lea ecx [ebx+29B0h] +
push ecx  +
call _printf  +
pop ecx  +
lea eax [ebx+29D1h] +
push eax  +
call _printf  +
pop ecx  +
lea edx [ebx+29F2h] +
push edx  +
call _printf  +
pop ecx  +
lea ecx [ebx+2A0Ah] +
push ecx  +
call _printf  +
pop ecx  +
lea eax [ebx+2A59h] +
push eax  +
call _printf  +
pop ecx  +
lea edx [ebx+2AA8h] +
push edx  +
call _printf  +
pop ecx  +
lea ecx [ebx+2AF7h] +
push ecx  +
call _printf  +
pop ecx  +
lea eax [ebx+2B19h] +
push eax  +
call _printf  +
pop ecx  +
lea edx [ebx+2B30h] +
push edx  +
call _printf  +
pop ecx  +
lea ecx [ebx+2B7Fh] +
push ecx  +
call _printf  +
pop ecx  +
lea eax [ebx+2BCEh] +
push eax  +
call _printf  +
pop ecx  +
lea edx [ebx+2BEDh] +
push edx  +
call _printf  +
pop ecx  +
lea ecx [ebx+2C05h] +
push ecx  +
call _printf  +
pop ecx  +
lea eax [ebx+2C54h] +
push eax  +
call _printf  +
pop ecx  +
lea edx [ebx+2CA3h] +
push edx  +
call _printf  +
pop ecx  +
lea ecx [ebx+2CDDh] +
push ecx  +
call _printf  +
pop ecx  +
lea eax [ebx+2CF5h] +
push eax  +
call _printf  +
pop ecx  +
lea edx [ebx+2D44h] +
push edx  +
call _printf  +
pop ecx  +
lea ecx [ebx+2D93h] +
push ecx  +
call _printf  +
pop ecx  +
lea eax [ebx+2DBDh] +
push eax  +
call _printf  +
pop ecx  +
lea edx [ebx+2E07h] +
push edx  +
call _printf  +
pop ecx  +
lea ecx [ebx+2E44h] +
push ecx  +
call _printf  +
pop ecx  +
lea eax [ebx+2E93h] +
push eax  +
call _printf  +
pop ecx  +
lea edx [ebx+2EC2h] +
push edx  +
call _printf  +
pop ecx  +
lea ecx [ebx+2EFEh] +
push ecx  +
call _printf  +
pop ecx  +
lea eax [ebx+2F40h] +
push eax  +
call _printf  +
pop ecx  +
lea edx [ebx+2F8Dh] +
push edx  +
call _printf  +
pop ecx  +
lea ecx [ebx+2FD3h] +
push ecx  +
call _printf  +
pop ecx  +
lea eax [ebx+3010h] +
push eax  +
call _printf  +
pop ecx  +
lea edx [ebx+305Fh] +
push edx  +
call _printf  +
pop ecx  +
lea ecx [ebx+3085h] +
push ecx  +
call _printf  +
pop ecx  +
lea eax [ebx+30C8h] +
push eax  +
call _printf  +
pop ecx  +
lea edx [ebx+3110h] +
push edx  +
call _printf  +
pop ecx  +
lea ecx [ebx+3156h] +
push ecx  +
call _printf  +
pop ecx  +
lea eax [ebx+31A5h] +
push eax  +
call _printf  +
pop ecx  +
lea edx [ebx+31F4h] +
push edx  +
call _printf  +
pop ecx  +
lea ecx [ebx+3217h] +
push ecx  +
call _printf  +
pop ecx  +
lea eax [ebx+322Fh] +
push eax  +
call _printf  +
pop ecx  +
lea edx [ebx+327Eh] +
push edx  +
call _printf  +
pop ecx  +
lea ecx [ebx+32C5h] +
push ecx  +
call _printf  +
pop ecx  +
lea eax [ebx+330Eh] +
push eax  +
call _printf  +
pop ecx  +
lea edx [ebx+3327h] +
push edx  +
call _printf  +
pop ecx  +
lea ecx [ebx+3376h] +
push ecx  +
call _printf  +
pop ecx  +
lea eax [ebx+33BDh] +
push eax  +
call _printf  +
pop ecx  +
lea edx [ebx+3406h] +
push edx  +
call _printf  +
pop ecx  +
lea ecx [ebx+341Bh] +
push ecx  +
call _printf  +
pop ecx  +
lea eax [ebx+346Ah] +
push eax  +
call _printf  +
pop ecx  +
lea edx [ebx+34B9h] +
push edx  +
call _printf  +
pop ecx  +
lea ecx [ebx+3508h] +
push ecx  +
call _printf  +
pop ecx  +
lea eax [ebx+3530h] +
push eax  +
call _printf  +
pop ecx  +
lea edx [ebx+3579h] +
push edx  +
call _printf  +
pop ecx  +
lea ecx [ebx+358Eh] +
push ecx  +
call _printf  +
pop ecx  +
lea eax [ebx+35DDh] +
push eax  +
call _printf  +
pop ecx  +
lea edx [ebx+362Ch] +
push edx  +
call _printf  +
pop ecx  +
lea ecx [ebx+367Bh] +
push ecx  +
call _printf  +
pop ecx  +
lea eax [ebx+36A3h] +
push eax  +
call _printf  +
pop ecx  +
lea edx [ebx+36ECh] +
push edx  +
call _printf  +
pop ecx  +
lea ecx [ebx+3701h] +
push ecx  +
call _printf  +
pop ecx  +
lea eax [ebx+3750h] +
push eax  +
call _printf  +
pop ecx  +
lea edx [ebx+379Fh] +
push edx  +
call _printf  +
pop ecx  +
lea ecx [ebx+37EEh] +
push ecx  +
call _printf  +
pop ecx  +
lea eax [ebx+3816h] +
push eax  +
call _printf  +
pop ecx  +
lea edx [ebx+385Fh] +
push edx  +
call _printf  +
pop ecx  +
lea ecx [ebx+3874h] +
push ecx  +
call _printf  +
pop ecx  +
lea eax [ebx+38C3h] +
push eax  +
call _printf  +
pop ecx  +
lea edx [ebx+3912h] +
push edx  +
call _printf  +
pop ecx  +
lea ecx [ebx+3961h] +
push ecx  +
call _printf  +
pop ecx  +
lea eax [ebx+3989h] +
push eax  +
call _printf  +
pop ecx  +
lea edx [ebx+39D2h] +
push edx  +
call _printf  +
pop ecx  +
push 0  +
call _exit  +
pop ecx  +
pop ebx  +
retn   +
***
push edi  +
push ebp  +
push ecx  +
xor eax eax +
mov dword_4EC338 eax +
mov dword_4EC334 eax +
mov ebx dword_4CD130 +
test ebx ebx +
jz loc_42DA5D  +
push ebx  +
call sub_42DDF8  +
pop ecx  +
mov ebx [ebx+5Ch] +
test ebx ebx +
jnz loc_42DA4F  +
mov ebx dword_4CD144 +
test ebx ebx +
jz loc_42DA75  +
push ebx  +
call sub_42DDF8  +
pop ecx  +
mov ebx [ebx+5Ch] +
test ebx ebx +
jnz loc_42DA67  +
call sub_4318D0  +
call sub_43164C  +
mov ebx dword_4CD14C +
test ebx ebx +
jz loc_42DB7E  +
cmp byte ptr [ebx+68h] 0 +
jz loc_42DB73  +
cmp dword ptr [ebx+0B4h] 0 +
jnz loc_42DAD6  +
push 0D3h  +
push offset a_Prepare_c  +
push offset aAssertionFa_59  +
push offset stream  +
call _fprintf  +
add esp 10h +
push offset aThisIsABugP_59  +
push offset stream  +
call _fprintf  +
add esp 8 +
push 1  +
call _exit  +
pop ecx  +
mov eax [ebx+0B4h] +
xor esi esi +
mov edx [eax] +
mov [esp+4+var_4] edx +
mov ecx [esp+4+var_4] +
mov eax [ecx+58h] +
mov [ebx+58h] eax +
mov edx [esp+4+var_4] +
mov ecx [edx+1Ch] +
xor edx edx +
mov [ebx+1Ch] ecx +
xor ecx ecx +
mov eax [ebx+94h] +
test eax eax +
jz loc_42DB13  +
mov edi [eax] +
mov eax [eax+4] +
inc edx  +
inc esi  +
mov edi [edi] +
add ecx [edi+54h] +
test eax eax +
jnz loc_42DB03  +
mov eax [ebx+98h] +
xor edi edi +
test eax eax +
jz loc_42DB30  +
mov ebp [eax] +
mov eax [eax+4] +
inc edi  +
inc esi  +
mov ebp [ebp+1Ch] +
add ecx [ebp+54h] +
test eax eax +
jnz loc_42DB1F  +
cmp edx edi +
jge loc_42DB36  +
mov edx edi +
inc edx  +
mov eax ecx +
imul edx dword_4EBD84 +
mov [ebx+18h] edx +
cdq   +
idiv  esi +
mov ecx [esp+4+var_4] +
mov edx [esp+4+var_4] +
mov edi [ecx+54h] +
add edi [edx+18h] +
cmp eax edi +
jl loc_42DB61  +
add edi dword_4EBD84 +
mov [ebx+54h] edi +
jmp loc_42DB73  +
mov eax [esp+4+var_4] +
mov ecx [eax+54h] +
sub ecx [ebx+18h] +
sub ecx dword_4EBD84 +
mov [ebx+54h] ecx +
mov ebx [ebx+5Ch] +
test ebx ebx +
jnz loc_42DA8D  +
xor eax eax +
mov dword_4EC338 eax +
mov dword_4EC334 eax +
mov ebx dword_4CD130 +
test ebx ebx +
jz loc_42DBA2  +
push ebx  +
call sub_42DE70  +
pop ecx  +
mov ebx [ebx+5Ch] +
test ebx ebx +
jnz loc_42DB94  +
mov ebx dword_4CD144 +
test ebx ebx +
jz loc_42DBBA  +
push ebx  +
call sub_42DE70  +
pop ecx  +
mov ebx [ebx+5Ch] +
test ebx ebx +
jnz loc_42DBAC  +
mov ebx dword_4CD14C +
test ebx ebx +
jz loc_42DBD2  +
push ebx  +
call sub_42DE70  +
pop ecx  +
mov ebx [ebx+5Ch] +
test ebx ebx +
jnz loc_42DBC4  +
mov ebx dword_4CD130 +
test ebx ebx +
jz loc_42DBEA  +
push ebx  +
call sub_42DDA0  +
pop ecx  +
mov ebx [ebx+5Ch] +
test ebx ebx +
jnz loc_42DBDC  +
mov ebx dword_4CD144 +
test ebx ebx +
jz loc_42DC02  +
push ebx  +
call sub_42DDA0  +
pop ecx  +
mov ebx [ebx+5Ch] +
test ebx ebx +
jnz loc_42DBF4  +
mov ebx dword_4CD14C +
test ebx ebx +
jz loc_42DC1A  +
push ebx  +
call sub_42DDA0  +
pop ecx  +
mov ebx [ebx+5Ch] +
test ebx ebx +
jnz loc_42DC0C  +
mov eax dword_4EC334 +
cmp eax dword_4EC338 +
jle loc_42DC2F  +
mov ebx dword_4EC334 +
jmp loc_42DC35  +
mov ebx dword_4EC338 +
lea esi [ebx+2] +
cmp esi dword_4D8654 +
jle loc_42DC80  +
mov eax dword_4D8650 +
test eax eax +
jz loc_42DC50  +
push eax  +
call _free  +
pop ecx  +
mov edx esi +
shl edx 2 +
push edx  +
call _malloc  +
pop ecx  +
mov edi eax +
mov dword_4D8650 edi +
test edi edi +
jnz loc_42DC7A  +
push offset unk_4D8706  +
push offset aMemoryExhaus_3  +
call sub_42A3F8  +
add esp 8 +
mov dword_4D8654 esi +
mov ebx dword_4CD130 +
test ebx ebx +
jz loc_42DC98  +
push ebx  +
call sub_42E040  +
pop ecx  +
mov ebx [ebx+5Ch] +
test ebx ebx +
jnz loc_42DC8A  +
mov ebx dword_4CD144 +
test ebx ebx +
jz loc_42DCB0  +
push ebx  +
call sub_42E040  +
pop ecx  +
mov ebx [ebx+5Ch] +
test ebx ebx +
jnz loc_42DCA2  +
mov ebx dword_4CD14C +
test ebx ebx +
jz loc_42DCC8  +
push ebx  +
call sub_42E040  +
pop ecx  +
mov ebx [ebx+5Ch] +
test ebx ebx +
jnz loc_42DCBA  +
mov ebx dword_4CD130 +
test ebx ebx +
jz loc_42DCE4  +
push 1  +
push ebx  +
call sub_43C5D0  +
add esp 8 +
mov ebx [ebx+5Ch] +
test ebx ebx +
jnz loc_42DCD2  +
mov ebx dword_4CD144 +
test ebx ebx +
jz loc_42DD00  +
push 1  +
push ebx  +
call sub_43C5D0  +
add esp 8 +
mov ebx [ebx+5Ch] +
test ebx ebx +
jnz loc_42DCEE  +
mov ebx dword_4CD14C +
test ebx ebx +
jz loc_42DD1C  +
push 1  +
push ebx  +
call sub_43C5D0  +
add esp 8 +
mov ebx [ebx+5Ch] +
test ebx ebx +
jnz loc_42DD0A  +
mov ebx dword_4CD130 +
test ebx ebx +
jz loc_42DD34  +
push ebx  +
call sub_43C9F0  +
pop ecx  +
mov ebx [ebx+5Ch] +
test ebx ebx +
jnz loc_42DD26  +
mov ebx dword_4CD144 +
test ebx ebx +
jz loc_42DD4C  +
push ebx  +
call sub_43C9F0  +
pop ecx  +
mov ebx [ebx+5Ch] +
test ebx ebx +
jnz loc_42DD3E  +
mov ebx dword_4CD14C +
test ebx ebx +
jz loc_42DD64  +
push ebx  +
call sub_43C9F0  +
pop ecx  +
mov ebx [ebx+5Ch] +
test ebx ebx +
jnz loc_42DD56  +
mov ebx dword_4CD130 +
test ebx ebx +
jz loc_42DD7C  +
push ebx  +
call sub_43F064  +
pop ecx  +
mov ebx [ebx+5Ch] +
test ebx ebx +
jnz loc_42DD6E  +
mov ebx dword_4CD14C +
test ebx ebx +
jz loc_42DD94  +
push ebx  +
call sub_43F064  +
pop ecx  +
mov ebx [ebx+5Ch] +
test ebx ebx +
jnz loc_42DD86  +
call sub_43F9DC  +
pop edx  +
pop ebp  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov ecx [ebp+arg_0] +
push ebx  +
mov ebx [ebp+arg_0] +
cmp dword ptr [ebx+18h] 0FFFFFFFFh +
jz loc_42DE0B  +
cmp dword ptr [ebx+1Ch] 0FFFFFFFFh +
jnz loc_42DE4E  +
mov eax [ebx+30h] +
push eax  +
mov edx [ebx+34h] +
push edx  +
call __initmatherr_0  +
add esp 8 +
mov cl [ebx+2Fh] +
dec cl  +
jz loc_42DE2C  +
dec cl  +
jz loc_42DE3E  +
dec cl  +
jz loc_42DE35  +
jmp loc_42DE47  +
push ebx  +
call sub_4070AC  +
pop ecx  +
jmp loc_42DE4E  +
push ebx  +
call sub_408864  +
pop ecx  +
jmp loc_42DE4E  +
push ebx  +
call sub_40A32C  +
pop ecx  +
jmp loc_42DE4E  +
push ebx  +
call sub_4055E8  +
pop ecx  +
cmp dword ptr [ebx+18h] 0FFFFFFFFh +
jnz loc_42DE5C  +
mov eax dword_4EAD30 +
mov [ebx+18h] eax +
cmp dword ptr [ebx+1Ch] 0FFFFFFFFh +
jnz loc_42DE6B  +
mov edx dword_4EAD34 +
mov [ebx+1Ch] edx +
pop ebx  +
pop ebp  +
retn   +
***
add esp 0FFFFFFF4h +
push ebx  +
push esi  +
push edi  +
mov eax [ebp+arg_0] +
mov ebx [eax+98h] +
test ebx ebx +
jz loc_42E037  +
mov eax [ebx+4] +
mov [ebp+var_4] eax +
mov edx [ebx] +
mov eax [edx] +
mov edx [eax+54h] +
mov ecx [eax+18h] +
sar ecx 1 +
jns loc_42DEA1  +
adc ecx 0 +
add edx ecx +
mov [ebp+var_8] edx +
mov esi [eax+58h] +
mov eax [eax+1Ch] +
sar eax 1 +
jns loc_42DEB3  +
adc eax 0 +
add esi eax +
mov edx [ebx] +
mov eax [edx+1Ch] +
mov edx [eax+54h] +
mov ecx [eax+18h] +
sar ecx 1 +
jns loc_42DEC7  +
adc ecx 0 +
add edx ecx +
mov [ebp+var_C] edx +
mov edi [eax+58h] +
mov eax [eax+1Ch] +
sar eax 1 +
jns loc_42DED9  +
adc eax 0 +
mov edx [ebx] +
add edi eax +
mov ecx [edx+1Ch] +
mov edx [ebx] +
mov eax [ecx+58h] +
mov ecx [edx+1Ch] +
mov edx [ebx] +
add eax [ecx+1Ch] +
mov ecx [edx] +
cmp eax [ecx+58h] +
jge loc_42DF64  +
mov eax [ebx] +
push eax  +
call sub_43446C  +
pop ecx  +
cmp edi esi +
jnz loc_42DF0C  +
mov eax [ebx] +
mov dword ptr [eax+44h] 80000000h +
jmp loc_42DF2E  +
mov edx [ebp+var_8] +
sub edx [ebp+var_C] +
mov eax edx +
mov edx esi +
shl eax 3 +
sub edx edi +
mov ecx edx +
lea eax [eax+eax*4] +
lea eax [eax+eax*4] +
lea eax [eax+eax*4] +
cdq   +
idiv  ecx +
mov edx [ebx] +
mov [edx+44h] eax +
cmp edi esi +
jnz loc_42DF40  +
mov eax [ebx] +
mov dword ptr [eax+48h] 7FFFFFFFh +
jmp loc_42E02C  +
mov ecx [ebp+var_8] +
sub esi edi +
sub ecx [ebp+var_C] +
mov eax ecx +
neg eax  +
shl eax 6 +
add eax ecx +
lea eax [ecx+eax*2] +
mov ecx [ebx] +
shl eax 3 +
cdq   +
idiv  esi +
mov [ecx+48h] eax +
jmp loc_42E02C  +
mov eax [ebx] +
mov edx [eax] +
mov ecx [edx+58h] +
mov edx [ebx] +
mov edx [edx] +
add ecx [edx+1Ch] +
mov edx [eax+1Ch] +
cmp ecx [edx+58h] +
jge loc_42DFD7  +
cmp edi esi +
jnz loc_42DF87  +
mov dword ptr [eax+44h] 80000000h +
jmp loc_42DFA7  +
mov eax [ebp+var_8] +
mov edx esi +
sub eax [ebp+var_C] +
sub edx edi +
shl eax 3 +
mov ecx edx +
lea eax [eax+eax*4] +
lea eax [eax+eax*4] +
lea eax [eax+eax*4] +
cdq   +
idiv  ecx +
mov edx [ebx] +
mov [edx+44h] eax +
cmp edi esi +
jnz loc_42DFB6  +
mov eax [ebx] +
mov dword ptr [eax+48h] 7FFFFFFFh +
jmp loc_42E02C  +
mov ecx [ebp+var_8] +
sub esi edi +
sub ecx [ebp+var_C] +
mov eax ecx +
neg eax  +
shl eax 6 +
add eax ecx +
lea eax [ecx+eax*2] +
mov ecx [ebx] +
shl eax 3 +
cdq   +
idiv  esi +
mov [ecx+48h] eax +
jmp loc_42E02C  +
mov eax [ebx] +
mov edx [eax+1Ch] +
mov ecx [edx+54h] +
add ecx [edx+18h] +
mov edx [eax] +
cmp ecx [edx+54h] +
jge loc_42DFFD  +
mov dword ptr [eax+44h] 80000000h +
mov dword ptr [eax+48h] 7FFFFFFFh +
mov byte ptr [eax+42h] 6Ch +
jmp loc_42E02C  +
mov eax [ebx] +
mov edx [eax] +
mov ecx [edx+54h] +
add ecx [edx+18h] +
mov edx [eax+1Ch] +
cmp ecx [edx+54h] +
jge loc_42E023  +
mov dword ptr [eax+44h] 7FFFFFFFh +
mov dword ptr [eax+48h] 80000000h +
mov byte ptr [eax+42h] 72h +
jmp loc_42E02C  +
mov eax [ebx] +
push eax  +
call sub_420DE4  +
pop ecx  +
mov ebx [ebp+var_4] +
test ebx ebx +
jnz loc_42DE8A  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
push ebx  +
push esi  +
push edi  +
mov ebx [ebp+arg_0] +
mov esi offset dword_4D8650 +
test ebx ebx +
jnz loc_42E088  +
push 1BBh  +
push offset a_Prepare_c_0  +
push offset aAssertionFa_60  +
push offset stream  +
call _fprintf  +
add esp 10h +
push offset aThisIsABugP_60  +
push offset stream  +
call _fprintf  +
add esp 8 +
push 1  +
call _exit  +
pop ecx  +
xor edx edx +
mov eax [ebx+94h] +
test eax eax +
jz loc_42E0A3  +
mov ecx [esi] +
mov edi [eax] +
mov [ecx+edx*4] edi +
inc edx  +
mov eax [eax+4] +
test eax eax +
jnz loc_42E094  +
push offset sub_42E160  +
push 4  +
mov eax [ebx+84h] +
push eax  +
mov edx [esi] +
push edx  +
call _qsort  +
add esp 10h +
xor edx edx +
mov eax [ebx+94h] +
test eax eax +
jz loc_42E0D7  +
mov ecx [esi] +
mov ecx [ecx+edx*4] +
mov [eax] ecx +
inc edx  +
mov eax [eax+4] +
test eax eax +
jnz loc_42E0C8  +
test edx edx +
jz loc_42E0F1  +
mov eax [esi] +
mov eax [eax] +
mov [ebx+0A4h] eax +
mov ecx [esi] +
mov edx [ecx+edx*4-4] +
mov [ebx+0A8h] edx +
xor edx edx +
mov eax [ebx+98h] +
test eax eax +
jz loc_42E10C  +
mov ecx [esi] +
mov edi [eax] +
mov [ecx+edx*4] edi +
inc edx  +
mov eax [eax+4] +
test eax eax +
jnz loc_42E0FD  +
push offset sub_42E190  +
push 4  +
mov eax [ebx+88h] +
push eax  +
mov edx [esi] +
push edx  +
call _qsort  +
add esp 10h +
xor edx edx +
mov eax [ebx+98h] +
test eax eax +
jz loc_42E140  +
mov ecx [esi] +
mov ecx [ecx+edx*4] +
mov [eax] ecx +
inc edx  +
mov eax [eax+4] +
test eax eax +
jnz loc_42E131  +
test edx edx +
jz loc_42E15A  +
mov eax [esi] +
mov eax [eax] +
mov [ebx+0ACh] eax +
mov ecx [esi] +
mov edx [ecx+edx*4-4] +
mov [ebx+0B0h] edx +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
push ebx  +
mov edx [ebp+arg_4] +
mov eax [ebp+arg_0] +
mov ecx [eax] +
mov ebx [edx] +
mov ebx [ebx+48h] +
mov ecx [ecx+48h] +
cmp ebx ecx +
jge loc_42E180  +
mov eax 1 +
pop ebx  +
pop ebp  +
retn   +
cmp ebx ecx +
jle loc_42E18A  +
or eax 0FFFFFFFFh +
pop ebx  +
pop ebp  +
retn   +
xor eax eax +
pop ebx  +
pop ebp  +
retn   +
***
push ebx  +
mov edx [ebp+arg_4] +
mov eax [ebp+arg_0] +
mov ecx [eax] +
mov ebx [edx] +
mov ebx [ebx+44h] +
mov ecx [ecx+44h] +
cmp ebx ecx +
jge loc_42E1B0  +
mov eax 1 +
pop ebx  +
pop ebp  +
retn   +
cmp ebx ecx +
jle loc_42E1BA  +
or eax 0FFFFFFFFh +
pop ebx  +
pop ebp  +
retn   +
xor eax eax +
pop ebx  +
pop ebp  +
retn   +
***
push edi  +
push ebp  +
add esp 0FFFFFEE0h +
cmp dword_4CD130 0 +
jz loc_42E209  +
push 0E5h  +
push offset a_Step0_c  +
push offset aAssertionFa_61  +
push offset stream  +
call _fprintf  +
add esp 10h +
push offset aThisIsABugP_61  +
push offset stream  +
call _fprintf  +
add esp 8 +
push 1  +
call _exit  +
pop ecx  +
cmp dword_4CD138 0 +
jz loc_42E248  +
push 0E6h  +
push offset a_Step0_c_0  +
push offset aAssertionFa_62  +
push offset stream  +
call _fprintf  +
add esp 10h +
push offset aThisIsABugP_62  +
push offset stream  +
call _fprintf  +
add esp 8 +
push 1  +
call _exit  +
pop ecx  +
cmp dword_4CD168 0 +
jz loc_42E287  +
push 0E7h  +
push offset a_Step0_c_1  +
push offset aAssertionFa_63  +
push offset stream  +
call _fprintf  +
add esp 10h +
push offset aThisIsABugP_63  +
push offset stream  +
call _fprintf  +
add esp 8 +
push 1  +
call _exit  +
pop ecx  +
cmp dword_4CD178 0 +
jz loc_42E2C6  +
push 0E8h  +
push offset a_Step0_c_2  +
push offset aAssertionFa_64  +
push offset stream  +
call _fprintf  +
add esp 10h +
push offset aThisIsABugP_64  +
push offset stream  +
call _fprintf  +
add esp 8 +
push 1  +
call _exit  +
pop ecx  +
cmp dword_4CD180 0 +
jz loc_42E305  +
push 0E9h  +
push offset a_Step0_c_3  +
push offset aAssertionFa_65  +
push offset stream  +
call _fprintf  +
add esp 10h +
push offset aThisIsABugP_65  +
push offset stream  +
call _fprintf  +
add esp 8 +
push 1  +
call _exit  +
pop ecx  +
cmp dword_4CD17C 0 +
jz loc_42E344  +
push 0EAh  +
push offset a_Step0_c_4  +
push offset aAssertionFa_66  +
push offset stream  +
call _fprintf  +
add esp 10h +
push offset aThisIsABugP_66  +
push offset stream  +
call _fprintf  +
add esp 8 +
push 1  +
call _exit  +
pop ecx  +
mov [esp+120h+var_11C] offset byte_4EB518 +
mov dword_4D4BCC 1 +
mov dword_4D4BC8 20h +
mov [esp+120h+var_120] offset unk_4D4C10 +
xor eax eax +
mov edi offset byte_4EB418 +
mov esi offset unk_4D4BF0 +
mov ecx offset byte_4EB318 +
mov edx offset unk_4D4BD0 +
mov bl [edx] +
inc edx  +
mov [ecx] bl +
inc ecx  +
mov bl [esi] +
inc esi  +
mov [edi] bl +
inc edi  +
mov ebx [esp+120h+var_120] +
mov ebp [esp+120h+var_11C] +
inc eax  +
mov bl [ebx] +
mov [ebp+0] bl +
inc [esp+120h+var_11C]  +
inc [esp+120h+var_120]  +
cmp eax 20h +
jl loc_42E37D  +
xor eax eax +
mov dword_4EBDC4 eax +
mov dword_4EBDD8 1 +
mov edx dword_4EC420 +
push edx  +
call sub_430B58  +
pop ecx  +
mov eax dword_4EBDD8 +
cmp eax 80h +
jle loc_42E403  +
push eax  +
push offset aWarningYouUseD  +
push offset stream  +
call _fprintf  +
add esp 0Ch +
push offset aThisMayProduce  +
push offset stream  +
call _fprintf  +
add esp 8 +
push offset aPleaseDoNotUse  +
push offset stream  +
call _fprintf  +
add esp 8 +
mov eax dword_4D4C74 +
test eax eax +
jz loc_42E413  +
push eax  +
call _free  +
pop ecx  +
mov edx dword_4EBDD8 +
shl edx 2 +
push edx  +
call _malloc  +
pop ecx  +
mov dword_4D4C74 eax +
xor eax eax +
jmp loc_42E438  +
mov edx dword_4D4C74 +
xor ecx ecx +
mov [edx+eax*4] ecx +
inc eax  +
cmp eax dword_4EBDD8 +
jl loc_42E42C  +
mov eax dword_4CDF6C +
test eax eax +
jz loc_42E450  +
push eax  +
call _free  +
pop ecx  +
mov edx dword_4EBDD8 +
shl edx 2 +
push edx  +
call _malloc  +
pop ecx  +
mov dword_4CDF6C eax +
push offset unk_4EBDF8  +
call sub_4045D4  +
pop ecx  +
push offset unk_4EBEB4  +
call sub_404C34  +
pop ecx  +
xor eax eax +
xor ecx ecx +
xor edx edx +
mov dword_4EBF14 ecx +
mov dword_4EBF18 eax +
mov dword_4EBF1C edx +
xor ecx ecx +
mov dword_4EBF20 ecx +
call sub_42024C  +
call sub_41F5E4  +
call sub_430E70  +
xor eax eax +
mov dword_4EBF10 eax +
lea edx [esp+120h+var_118] +
push edx  +
call sub_404550  +
pop ecx  +
mov eax dword_4EC420 +
lea ecx [esp+120h+var_118] +
push ecx  +
push 0  +
push eax  +
call sub_42E55C  +
add esp 0Ch +
lea edx [esp+120h+var_5C] +
push edx  +
call sub_404BEC  +
pop ecx  +
lea ecx [esp+120h+var_5C] +
push ecx  +
mov eax dword_4EC420 +
push eax  +
call sub_42F8B8  +
add esp 8 +
add esp 120h +
pop ebp  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push ebx  +
push esi  +
push edi  +
mov ebx [ebp+arg_0] +
test ebx ebx +
jz loc_42E555  +
mov eax [ebx] +
push eax  +
call sub_445450  +
pop ecx  +
mov edi eax +
mov eax [ebx] +
cmp eax 0F6h +
jnz loc_42E529  +
inc dword_4EBF24  +
jmp loc_42E536  +
cmp eax 0F5h +
jnz loc_42E536  +
inc dword_4EBF24  +
mov esi 1 +
lea eax [ebx+20h] +
mov ebx eax +
cmp edi esi +
jl loc_42E555  +
mov edx [ebx] +
push edx  +
call sub_42E500  +
pop ecx  +
inc esi  +
add ebx 4 +
cmp edi esi +
jge loc_42E544  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
add esp 0FFFFFF1Ch +
push ebx  +
push esi  +
push edi  +
mov ebx [ebp+arg_0] +
push 61h  +
call sub_42A930  +
pop ecx  +
lea eax [ebp+var_E4] +
push eax  +
mov edx [ebp+arg_8] +
push edx  +
call sub_404724  +
add esp 8 +
cmp [ebp+arg_4] 0 +
jz loc_42E5C0  +
mov ecx [ebp+arg_4] +
cmp dword ptr [ecx+30h] 0 +
jle loc_42E59D  +
mov eax [ebp+arg_4] +
mov edx [eax+30h] +
jmp loc_42E5A2  +
mov edx 1 +
mov [ebp+var_C] edx +
mov eax [ebp+arg_4] +
cmp dword ptr [eax+34h] 0 +
jle loc_42E5B6  +
mov ecx [ebp+arg_4] +
mov eax [ecx+34h] +
jmp loc_42E5BB  +
mov eax 1 +
mov [ebp+var_10] eax +
jmp loc_42E5CB  +
mov edx 1 +
mov [ebp+var_10] edx +
mov [ebp+var_C] edx +
xor eax eax +
xor ecx ecx +
mov [ebp+var_14] eax +
mov [ebp+var_8] ecx +
test ebx ebx +
jz loc_42E5E5  +
cmp dword ptr [ebx] 0FCh +
jz loc_42F895  +
push 1B1h  +
push offset a_Step0_c_5  +
push offset aAssertionFa_67  +
push offset stream  +
call _fprintf  +
add esp 10h +
push offset aThisIsABugP_67  +
push offset stream  +
call _fprintf  +
add esp 8 +
push 1  +
call _exit  +
pop ecx  +
jmp loc_42F895  +
mov esi [ebx+20h] +
test esi esi +
jnz loc_42E65D  +
push 1B4h  +
push offset a_Step0_c_6  +
push offset aAssertionFa_68  +
push offset stream  +
call _fprintf  +
add esp 10h +
push offset aThisIsABugP_68  +
push offset stream  +
call _fprintf  +
add esp 8 +
push 1  +
call _exit  +
pop ecx  +
mov eax [esi] +
add eax 0FFFFFF0Bh +
cmp eax 6 +
ja loc_42F892  +
jmp ds:off_42E674[eax*4]  +
lea edx [ebp+var_E4] +
push edx  +
call sub_4047B0  +
pop ecx  +
mov [ebp+var_4] eax +
cmp dword_4EBF10 0 +
jle loc_42E6D3  +
mov ecx [ebp+var_4] +
mov eax [ebp+arg_4] +
mov [ecx+44h] eax +
mov edx [ebp+var_4] +
push edx  +
call sub_404A00  +
cmp [ebp+var_8] 0 +
pop ecx  +
jz loc_42E6CA  +
mov ecx [ebp+var_8] +
mov [ecx+4] eax +
jmp loc_42E6D0  +
mov edx [ebp+arg_4] +
mov [edx+40h] eax +
mov [ebp+var_8] eax +
mov eax [ebp+var_10] +
push eax  +
mov ecx [ebp+var_C] +
push ecx  +
mov eax [ebp+var_4] +
push eax  +
mov edx [esi+20h] +
push edx  +
call sub_42FCE4  +
add esp 10h +
inc dword_4EBF10  +
lea ecx [ebp+var_E4] +
push ecx  +
mov eax [ebp+var_4] +
push eax  +
mov edx [esi+20h] +
push edx  +
call sub_42E55C  +
add esp 0Ch +
dec dword_4EBF10  +
jmp loc_42F892  +
mov edi [esi+20h] +
test edi edi +
jnz loc_42E750  +
push 1C6h  +
push offset a_Step0_c_7  +
push offset aAssertionFa_69  +
push offset stream  +
call _fprintf  +
add esp 10h +
push offset aThisIsABugP_69  +
push offset stream  +
call _fprintf  +
add esp 8 +
push 1  +
call _exit  +
pop ecx  +
mov eax [edi] +
add eax 0FFFFFFAFh +
cmp eax 9Eh +
ja loc_42F6C0  +
mov al ds:byte_42E76D[eax] +
jmp ds:off_42E80C[eax*4]  +
cmp dword_4EBF10 0 +
jnz loc_42F892  +
mov edx [edi+20h] +
mov ecx [edx+18h] +
push ecx  +
call sub_42A148  +
pop ecx  +
mov dword_4EBD58 eax +
jmp loc_42F892  +
cmp dword_4EBF10 0 +
jnz loc_42F892  +
mov eax [edi+20h] +
mov edx [eax+18h] +
mov dword_4EBD5C edx +
jmp loc_42F892  +
cmp dword_4EBF10 0 +
jnz loc_42F892  +
mov ecx [edi+20h] +
mov eax [ecx+18h] +
mov dword_4EBD60 eax +
jmp loc_42F892  +
cmp dword_4EBF10 0 +
jnz loc_42F892  +
mov edx [edi+20h] +
mov eax [edx+18h] +
mov dword_4EBD64 eax +
test eax eax +
jg loc_42E991  +
mov dword_4EBD64 64h +
mov dword_4EBD6C 1 +
jmp loc_42F892  +
cmp dword_4EBF10 0 +
jnz loc_42F892  +
mov edx [edi+20h] +
mov eax [edx+18h] +
mov dword_4EBD68 eax +
test eax eax +
jg loc_42E9C6  +
mov dword_4EBD68 64h +
mov dword_4EBD70 1 +
jmp loc_42F892  +
cmp dword_4EBF10 0 +
jnz loc_42F892  +
cmp dword_4D4C44 0 +
jnz loc_42E9F7  +
mov edx [edi+20h] +
mov ecx [edx+18h] +
mov dword_4EBD74 ecx +
cmp dword_4EBD74 0C8h +
jg loc_42EA0D  +
mov dword_4EBD74 0C8h +
mov eax dword_4EB61C +
add eax eax +
cmp eax dword_4EBD74 +
jge loc_42EA21  +
mov dword_4EBD74 eax +
mov eax dword_4EBD74 +
cmp eax dword_4EBD64 +
jge loc_42F892  +
mov dword_4EBD64 eax +
mov dword_4EBD6C 1 +
jmp loc_42F892  +
cmp dword_4EBF10 0 +
jnz loc_42F892  +
cmp dword_4D4C44 0 +
jnz loc_42EA68  +
mov edx [edi+20h] +
mov ecx [edx+18h] +
mov dword_4EBD78 ecx +
cmp dword_4EBD78 0C8h +
jg loc_42EA7E  +
mov dword_4EBD78 0C8h +
mov eax dword_4EB620 +
add eax eax +
cmp eax dword_4EBD78 +
jge loc_42EA92  +
mov dword_4EBD78 eax +
mov eax dword_4EBD78 +
cmp eax dword_4EBD68 +
jge loc_42F892  +
mov dword_4EBD68 eax +
mov dword_4EBD70 1 +
jmp loc_42F892  +
cmp dword_4EBF10 0 +
jnz loc_42F892  +
mov edx [edi+20h] +
mov esi [edx+18h] +
test esi esi +
jle loc_42F892  +
cmp esi 3 +
jg loc_42F892  +
mov dword_4EBDC8 1 +
mov eax [edi+24h] +
mov edx [eax+18h] +
push edx  +
call sub_42A148  +
pop ecx  +
mov dword_4EBDC8[esi*4] eax +
jmp loc_42F892  +
cmp dword_4EBF10 0 +
jnz loc_42F892  +
mov ecx [edi+20h] +
mov esi [ecx+18h] +
test esi esi +
jle loc_42F892  +
cmp esi dword_4EBDD8 +
jg loc_42F892  +
mov dword_4EBDDC 1 +
mov eax [edi+24h] +
mov edx [eax+18h] +
push edx  +
call sub_42A148  +
pop ecx  +
mov ecx dword_4D4C74 +
mov [ecx+esi*4-4] eax +
jmp loc_42F892  +
cmp dword_4EBF10 0 +
jnz loc_42F892  +
mov eax [edi+20h] +
mov edx [eax+18h] +
mov dword_4EBD7C edx +
jmp loc_42F892  +
cmp dword_4EBF10 0 +
jnz loc_42F892  +
mov ecx [edi+20h] +
mov eax [ecx+18h] +
mov dword_4EBD80 eax +
jmp loc_42F892  +
cmp dword_4EBF10 0 +
jnz loc_42F892  +
mov edx [edi+20h] +
mov ecx [edx+18h] +
mov dword_4EBD84 ecx +
jmp loc_42F892  +
cmp dword_4EBF10 0 +
jnz loc_42F892  +
mov eax [edi+20h] +
mov edx [eax+18h] +
mov dword_4EBDB4 edx +
jmp loc_42F892  +
cmp dword_4EBF10 0 +
jnz loc_42F892  +
mov ecx [edi+20h] +
mov eax [ecx+18h] +
mov dword_4EBD88 eax +
jmp loc_42F892  +
cmp dword_4EBF10 0 +
jnz loc_42F892  +
mov edx [edi+20h] +
mov ecx [edx+18h] +
mov dword_4EBDB8 ecx +
jmp loc_42F892  +
cmp dword_4EBF10 0 +
jnz loc_42F892  +
mov eax [edi+20h] +
mov edx [eax+18h] +
mov dword_4EBDC0 edx +
jmp loc_42F892  +
cmp dword_4EBF10 0 +
jnz loc_42F892  +
mov ecx [edi+20h] +
mov eax [ecx+18h] +
mov dword_4EBDBC eax +
jmp loc_42F892  +
cmp dword_4EBF10 0 +
jnz loc_42F892  +
mov edx [edi+20h] +
mov ecx [edx+18h] +
mov dword_4D4B80 ecx +
jmp loc_42F892  +
cmp dword_4EBF10 0 +
jnz loc_42F892  +
mov eax [edi+20h] +
mov edx [eax+18h] +
mov dword_4D4B70 edx +
jmp loc_42F892  +
cmp dword_4EBF10 0 +
jnz loc_42F892  +
mov ecx [edi+20h] +
mov eax [ecx+18h] +
mov dword_4D4B74 eax +
jmp loc_42F892  +
cmp dword_4EBF10 0 +
jnz loc_42F892  +
mov edx [edi+20h] +
mov ecx [edx+18h] +
mov dword_4D4B78 ecx +
jmp loc_42F892  +
cmp dword_4EBF10 0 +
jnz loc_42F892  +
mov eax [edi+20h] +
mov edx [eax+18h] +
mov dword_4D4B64 edx +
jmp loc_42F892  +
cmp dword_4EBF10 0 +
jnz loc_42F892  +
mov ecx [edi+20h] +
mov eax [ecx+18h] +
mov dword_4D4B38 eax +
jmp loc_42F892  +
cmp dword_4EBF10 0 +
jnz loc_42F892  +
mov edx [edi+20h] +
mov ecx [edx+18h] +
mov dword_4D4B3C ecx +
jmp loc_42F892  +
cmp dword_4EBF10 0 +
jnz loc_42F892  +
mov eax [edi+20h] +
mov edx [eax+18h] +
mov dword_4D4B48 edx +
jmp loc_42F892  +
cmp dword_4EBF10 0 +
jnz loc_42F892  +
mov ecx [edi+20h] +
mov eax [ecx+18h] +
mov dword_4D4B44 eax +
jmp loc_42F892  +
cmp dword_4EBF10 0 +
jnz loc_42F892  +
mov edx [edi+20h] +
mov ecx [edx+18h] +
mov dword_4D4B54 ecx +
jmp loc_42F892  +
cmp dword_4EBF10 0 +
jnz loc_42F892  +
mov eax [edi+20h] +
mov edx [eax+18h] +
mov dword_4D4B50 edx +
jmp loc_42F892  +
cmp dword_4EBF10 0 +
jnz loc_42F892  +
mov ecx [edi+20h] +
mov eax [ecx+18h] +
mov dword_4D4B58 eax +
jmp loc_42F892  +
cmp dword_4EBF10 0 +
jnz loc_42F892  +
mov edx [edi+20h] +
mov ecx [edx] +
sub ecx 43h +
jz loc_42EDBD  +
dec ecx  +
jz loc_42EDC9  +
sub ecx 7 +
jz loc_42EDD8  +
jmp loc_42EDE7  +
xor eax eax +
mov dword_4EBDA8 eax +
jmp loc_42F892  +
mov dword_4EBDA8 2 +
jmp loc_42F892  +
mov dword_4EBDA8 1 +
jmp loc_42F892  +
push 263h  +
push offset a_Step0_c_8  +
push offset aAssertionFa_70  +
push offset stream  +
call _fprintf  +
add esp 10h +
push offset aThisIsABugP_70  +
push offset stream  +
call _fprintf  +
add esp 8 +
push 1  +
call _exit  +
pop ecx  +
jmp loc_42F892  +
cmp dword_4EBF10 0 +
jnz loc_42F892  +
mov edx [edi+20h] +
mov ecx [edx] +
sub ecx 76h +
jz loc_42EE5D  +
dec ecx  +
jz loc_42EE4E  +
dec ecx  +
jz loc_42EE6C  +
dec ecx  +
jnz loc_42EE7B  +
xor eax eax +
mov dword_4EBD8C eax +
jmp loc_42F892  +
mov dword_4EBD8C 1 +
jmp loc_42F892  +
mov dword_4EBD8C 2 +
jmp loc_42F892  +
mov dword_4EBD8C 3 +
jmp loc_42F892  +
push 277h  +
push offset a_Step0_c_9  +
push offset aAssertionFa_71  +
push offset stream  +
call _fprintf  +
add esp 10h +
push offset aThisIsABugP_71  +
push offset stream  +
call _fprintf  +
add esp 8 +
push 1  +
call _exit  +
pop ecx  +
jmp loc_42F892  +
cmp dword_4EBF10 0 +
jnz loc_42F892  +
mov edx [edi+20h] +
push edx  +
call sub_430B00  +
pop ecx  +
mov dword_4EBDAC eax +
jmp loc_42F892  +
cmp dword_4EBF10 0 +
jnz loc_42F892  +
mov ecx [edi+20h] +
mov eax [ecx] +
sub eax 56h +
jz loc_42EEFE  +
dec eax  +
jnz loc_42EF0D  +
xor edx edx +
mov dword_4EBDB0 edx +
jmp loc_42F892  +
mov dword_4EBDB0 1 +
jmp loc_42F892  +
push 289h  +
push offset a_Step0_c_10  +
push offset aAssertionFa_72  +
push offset stream  +
call _fprintf  +
add esp 10h +
push offset aThisIsABugP_72  +
push offset stream  +
call _fprintf  +
add esp 8 +
push 1  +
call _exit  +
pop ecx  +
jmp loc_42F892  +
cmp dword_4EBF10 0 +
jnz loc_42F892  +
mov ecx [edi+20h] +
push ecx  +
call sub_4308FC  +
pop ecx  +
mov dword_4EBD94 eax +
jmp loc_42F892  +
cmp dword_4EBF10 0 +
jnz loc_42F892  +
push offset aAttributeFoldi  +
mov eax [edi+8] +
push eax  +
mov edx [edi+4] +
push edx  +
call sub_444EC0  +
add esp 0Ch +
jmp loc_42F892  +
cmp dword_4EBF10 0 +
jnz loc_42F892  +
push offset aAttributeStatu  +
mov ecx [edi+8] +
push ecx  +
mov eax [edi+4] +
push eax  +
call sub_444EC0  +
add esp 0Ch +
jmp loc_42F892  +
mov edx [edi+20h] +
mov eax [edx+18h] +
dec eax  +
cmp dword_4EBF10 0 +
jnz loc_42F892  +
test eax eax +
jl loc_42EFE9  +
cmp eax dword_4EBDD8 +
jge loc_42EFE9  +
mov edx dword_4CDF6C +
mov dword ptr [edx+eax*4] 1 +
jmp loc_42F892  +
push offset aAttributeHidde  +
mov ecx [edi+8] +
push ecx  +
mov eax [edi+4] +
push eax  +
call sub_444EC0  +
add esp 0Ch +
jmp loc_42F892  +
cmp dword_4EBF10 0 +
jnz loc_42F892  +
mov edx [edi+20h] +
push edx  +
call sub_430B00  +
pop ecx  +
mov dword_4D4B34 eax +
jmp loc_42F892  +
cmp dword_4EBF10 0 +
jnz loc_42F892  +
mov ecx [edi+20h] +
push ecx  +
call sub_430B00  +
pop ecx  +
mov dword_4EBD98 eax +
jmp loc_42F892  +
cmp dword_4EBF10 0 +
jnz loc_42F892  +
mov eax [edi+20h] +
push eax  +
call sub_430B00  +
pop ecx  +
mov esi eax +
mov dword_4EBD9C esi +
dec esi  +
jnz loc_42F892  +
mov dword_4EBD98 1 +
jmp loc_42F892  +
cmp dword_4EBF10 0 +
jnz loc_42F892  +
mov eax [edi+20h] +
push eax  +
call sub_430B00  +
pop ecx  +
mov dword_4D4B30 eax +
jmp loc_42F892  +
cmp dword_4EBF10 0 +
jnz loc_42F892  +
mov edx [edi+20h] +
push edx  +
call sub_430B00  +
pop ecx  +
mov ecx 1 +
sub ecx eax +
mov dword_4D4B40 ecx +
jmp loc_42F892  +
cmp dword_4EBF10 0 +
jnz loc_42F892  +
mov eax [edi+20h] +
push eax  +
call sub_430B00  +
pop ecx  +
mov dword_4D4B28 eax +
jmp loc_42F892  +
cmp dword_4EBF10 0 +
jnz loc_42F892  +
mov edx [edi+20h] +
mov ecx [edx] +
sub ecx 5Ch +
jz loc_42F12F  +
dec ecx  +
jz loc_42F120  +
dec ecx  +
jz loc_42F111  +
dec ecx  +
jnz loc_42F13E  +
xor eax eax +
mov dword_4D4B24 eax +
jmp loc_42F892  +
mov dword_4D4B24 1 +
jmp loc_42F892  +
mov dword_4D4B24 2 +
jmp loc_42F892  +
mov dword_4D4B24 3 +
jmp loc_42F892  +
push 2D0h  +
push offset a_Step0_c_11  +
push offset aAssertionFa_73  +
push offset stream  +
call _fprintf  +
add esp 10h +
push offset aThisIsABugP_73  +
push offset stream  +
call _fprintf  +
add esp 8 +
push 1  +
call _exit  +
pop ecx  +
jmp loc_42F892  +
cmp dword_4EBF10 0 +
jnz loc_42F892  +
mov edx [edi+20h] +
push edx  +
call sub_430B00  +
pop ecx  +
mov ecx 2 +
sub ecx eax +
mov dword_4D4B68 ecx +
jmp loc_42F892  +
cmp dword_4EBF10 0 +
jnz loc_42F892  +
mov eax [edi+20h] +
push eax  +
call sub_430B00  +
pop ecx  +
mov edx 2 +
sub edx eax +
mov dword_4D4B6C edx +
jmp loc_42F892  +
cmp dword_4EBF10 0 +
jnz loc_42F892  +
mov ecx [edi+20h] +
push ecx  +
call sub_430B00  +
pop ecx  +
mov edx 2 +
sub edx eax +
mov dword_4D4B60 edx +
jmp loc_42F892  +
cmp dword_4EBF10 0 +
jnz loc_42F892  +
mov eax [edi+20h] +
push eax  +
call sub_430B00  +
pop ecx  +
mov ecx 2 +
sub ecx eax +
mov dword_4D4B5C ecx +
jmp loc_42F892  +
cmp dword_4EBF10 0 +
jnz loc_42F892  +
mov eax [edi+20h] +
push eax  +
call sub_430B00  +
pop ecx  +
mov dword_4D4B1C eax +
jmp loc_42F892  +
cmp dword_4EBF10 0 +
jnz loc_42F892  +
mov edx [edi+20h] +
push edx  +
call sub_430B00  +
pop ecx  +
mov ecx 1 +
sub ecx eax +
mov dword_4D4B10 ecx +
jmp loc_42F892  +
cmp dword_4EBF10 0 +
jnz loc_42F892  +
mov eax [edi+20h] +
push eax  +
call sub_430B00  +
pop ecx  +
mov edx 1 +
sub edx eax +
mov dword_4D4B14 edx +
jmp loc_42F892  +
cmp dword_4EBF10 0 +
jnz loc_42F892  +
mov ecx [edi+20h] +
push ecx  +
call sub_430B00  +
pop ecx  +
mov dword_4D4B7C eax +
jmp loc_42F892  +
cmp dword_4EBF10 0 +
jnz loc_42F892  +
mov eax [edi+20h] +
mov edx [eax] +
sub edx 58h +
jz loc_42F2FE  +
dec edx  +
jz loc_42F2E0  +
dec edx  +
jz loc_42F2EF  +
dec edx  +
jnz loc_42F30D  +
mov dword_4CDD84 2 +
jmp loc_42F892  +
mov dword_4CDD84 3 +
jmp loc_42F892  +
mov dword_4CDD84 4 +
jmp loc_42F892  +
mov dword_4CDD84 5 +
jmp loc_42F892  +
push 304h  +
push offset a_Step0_c_12  +
push offset aAssertionFa_74  +
push offset stream  +
call _fprintf  +
add esp 10h +
push offset aThisIsABugP_74  +
push offset stream  +
call _fprintf  +
add esp 8 +
push 1  +
call _exit  +
pop ecx  +
jmp loc_42F892  +
cmp dword_4EBF10 0 +
jnz loc_42F892  +
xor ecx ecx +
mov dword_4D4B2C ecx +
jmp loc_42F892  +
mov eax [edi+20h] +
mov esi [eax+18h] +
mov eax [edi+24h] +
cmp esi 0FFh +
mov edx [eax+18h] +
mov [ebp+var_18] edx +
mov ecx [edi+28h] +
mov eax [ecx+18h] +
mov [ebp+var_20] eax +
mov edx [edi+2Ch] +
mov ecx [edx+18h] +
mov [ebp+var_1C] ecx +
jl loc_42F3A0  +
push offset aOnly254ColorEn  +
mov eax [edi+8] +
push eax  +
mov edx [edi+4] +
push edx  +
call sub_444EC0  +
add esp 0Ch +
lea eax [esi+2] +
cmp eax dword_4D4BC8 +
jle loc_42F3B0  +
mov dword_4D4BC8 eax +
mov dl byte ptr [ebp+var_18] +
mov byte_4EB318[esi] dl +
mov cl byte ptr [ebp+var_1C] +
mov byte_4EB518[esi] cl +
mov al byte ptr [ebp+var_20] +
mov byte_4EB418[esi] al +
mov edx dword_4D4BC8 +
mov byte_4EB317[edx] 0 +
mov ecx dword_4D4BC8 +
mov byte_4EB517[ecx] 0 +
mov eax dword_4D4BC8 +
mov byte_4EB417[eax] 0 +
mov dword_4D4BCC 1 +
jmp loc_42F892  +
cmp dword_4EBF10 0 +
jnz loc_42F892  +
mov edx [edi+20h] +
mov ecx [edx+18h] +
mov dword ptr [ebp+var_28] ecx +
mov ecx [edx+1Ch] +
mov dword ptr [ebp+var_28+4] ecx +
fld  [ebp+var_28] +
fcomp  ds:flt_42F8AC +
fnstsw  ax +
sahf   +
jnb loc_42F432  +
fld  [ebp+var_28] +
fchs   +
fstp  [ebp+var_28] +
fld  [ebp+var_28] +
fcomp  ds:flt_42F8B0 +
fnstsw  ax +
sahf   +
jbe loc_42F45F  +
mov dword_4EBDA4 64h +
fld  ds:flt_42F8B4 +
fdiv  [ebp+var_28] +
call @_ftol$qv  +
mov dword_4EBDA0 eax +
jmp loc_42F47C  +
fld  [ebp+var_28] +
fmul  ds:flt_42F8B4 +
call @_ftol$qv  +
mov dword_4EBDA4 eax +
mov dword_4EBDA0 64h +
mov eax [ebp+var_C] +
imul  dword_4EBDA0 +
mov dword_4EBDA0 eax +
mov edx [ebp+var_10] +
imul edx dword_4EBDA4 +
mov dword_4EBDA4 edx +
test eax eax +
jnz loc_42F4A8  +
mov dword_4EBDA0 1 +
test edx edx +
jnz loc_42F892  +
mov dword_4EBDA4 1 +
jmp loc_42F892  +
cmp dword_4EBF10 0 +
jnz loc_42F892  +
mov ecx [edi+20h] +
mov eax [ecx+18h] +
imul  [ebp+var_C] +
mov dword_4EBDA0 eax +
test eax eax +
jg loc_42F892  +
mov dword_4EBDA0 1 +
jmp loc_42F892  +
cmp dword_4EBF10 0 +
jnz loc_42F892  +
mov edx [edi+20h] +
mov eax [edx+18h] +
imul  [ebp+var_10] +
mov dword_4EBDA4 eax +
test eax eax +
jg loc_42F892  +
mov dword_4EBDA4 1 +
jmp loc_42F892  +
cmp dword_4EBF10 0 +
jnz loc_42F892  +
mov edx [edi+20h] +
mov ecx [edx+18h] +
mov dword_4DD94C ecx +
jmp loc_42F892  +
cmp dword_4EBF10 0 +
jnz loc_42F892  +
mov eax [edi+20h] +
mov edx [eax+18h] +
mov dword ptr dbl_4DD950 edx +
mov edx [eax+1Ch] +
mov dword ptr dbl_4DD950+4 edx +
jmp loc_42F892  +
cmp dword_4EBF10 0 +
jnz loc_42F892  +
cmp dword ptr [edi+20h] 0 +
jnz loc_42F5B1  +
push 34Fh  +
push offset a_Step0_c_13  +
push offset aAssertionFa_75  +
push offset stream  +
call _fprintf  +
add esp 10h +
push offset aThisIsABugP_75  +
push offset stream  +
call _fprintf  +
add esp 8 +
push 1  +
call _exit  +
pop ecx  +
mov ecx [edi+20h] +
mov eax [ecx] +
add eax 0FFFFFF9Bh +
cmp eax 0Ch +
ja loc_42F892  +
jmp ds:off_42F5C9[eax*4]  +
mov dword_4D4B20 1 +
jmp loc_42F892  +
mov dword_4D4B20 2 +
jmp loc_42F892  +
mov dword_4D4B20 3 +
jmp loc_42F892  +
mov dword_4D4B20 4 +
jmp loc_42F892  +
mov dword_4D4B20 5 +
jmp loc_42F892  +
mov dword_4D4B20 0Bh +
jmp loc_42F892  +
mov dword_4D4B20 0Ah +
jmp loc_42F892  +
mov dword_4D4B20 7 +
jmp loc_42F892  +
mov dword_4D4B20 6 +
jmp loc_42F892  +
mov dword_4D4B20 9 +
jmp loc_42F892  +
mov dword_4D4B20 8 +
jmp loc_42F892  +
mov dword_4D4B20 14h +
jmp loc_42F892  +
mov dword_4D4B20 0Ch +
jmp loc_42F892  +
cmp dword_4D4B04 0 +
jnz loc_42F892  +
mov edx [edi] +
push edx  +
call sub_445440  +
pop ecx  +
push eax  +
mov ecx [edi+4] +
push ecx  +
push offset aLineDAttribute  +
push offset stream  +
call _fprintf  +
add esp 10h +
push offset aCurrentlyNotIm  +
push offset stream  +
call _fprintf  +
add esp 8 +
jmp loc_42F892  +
cmp dword_4EBF10 0 +
jz loc_42F727  +
push offset aFoldingDefault  +
mov eax [edi+8] +
push eax  +
mov edx [edi+4] +
push edx  +
call sub_444EC0  +
add esp 0Ch +
jmp loc_42F892  +
mov edi [esi+20h] +
test edi edi +
jnz loc_42F764  +
push 38Ch  +
push offset a_Step0_c_14  +
push offset aAssertionFa_76  +
push offset stream  +
call _fprintf  +
add esp 10h +
push offset aThisIsABugP_76  +
push offset stream  +
call _fprintf  +
add esp 8 +
push 1  +
call _exit  +
pop ecx  +
mov eax [edi] +
sub eax 0E1h +
jz loc_42F789  +
sub eax 0Eh +
jnz loc_42F79E  +
push offset aFoldnode_title  +
mov edx [edi+8] +
push edx  +
mov ecx [edi+4] +
push ecx  +
call sub_444EC0  +
add esp 0Ch +
jmp loc_42F79E  +
push offset aFoldnode_foldN  +
mov eax [edi+8] +
push eax  +
mov edx [edi+4] +
push edx  +
call sub_444EC0  +
add esp 0Ch +
push offset dword_4EBF20  +
mov ecx [ebp+var_10] +
push ecx  +
mov eax [ebp+var_C] +
push eax  +
push offset unk_4EBDF8  +
push edi  +
call sub_43005C  +
add esp 14h +
jmp loc_42F892  +
mov edi [esi+20h] +
test edi edi +
jnz loc_42F7FB  +
push 39Fh  +
push offset a_Step0_c_15  +
push offset aAssertionFa_77  +
push offset stream  +
call _fprintf  +
add esp 10h +
push offset aThisIsABugP_77  +
push offset stream  +
call _fprintf  +
add esp 8 +
push 1  +
call _exit  +
pop ecx  +
mov eax [edi] +
sub eax 0EFh +
jnz loc_42F819  +
push offset aNode_titleNotA  +
mov edx [edi+8] +
push edx  +
mov ecx [edi+4] +
push ecx  +
call sub_444EC0  +
add esp 0Ch +
lea eax [ebp+var_14] +
push eax  +
lea eax [ebp+var_E4] +
mov edx [ebp+var_10] +
push edx  +
mov ecx [ebp+var_C] +
push ecx  +
push eax  +
push edi  +
call sub_43005C  +
add esp 14h +
jmp loc_42F892  +
lea edx [ebp+var_E4] +
push edx  +
call sub_404500  +
pop ecx  +
mov [ebp+var_4] eax +
cmp dword_4EBF10 0 +
jle loc_42F87A  +
mov ecx [ebp+var_4] +
mov eax [ebp+arg_4] +
mov [ecx+44h] eax +
mov edx [ebp+var_4] +
push edx  +
call sub_404A00  +
cmp [ebp+var_8] 0 +
pop ecx  +
jz loc_42F871  +
mov ecx [ebp+var_8] +
mov [ecx+4] eax +
jmp loc_42F877  +
mov edx [ebp+arg_4] +
mov [edx+40h] eax +
mov [ebp+var_8] eax +
mov eax [ebp+var_10] +
push eax  +
mov ecx [ebp+var_C] +
push ecx  +
mov eax [ebp+var_4] +
push eax  +
mov edx [esi+20h] +
push edx  +
call sub_42FF44  +
add esp 10h +
mov ebx [ebx+24h] +
test ebx ebx +
jz loc_42F8A5  +
cmp dword ptr [ebx] 0FCh +
jz loc_42E620  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
add esp 0FFFFFF94h +
push ebx  +
push esi  +
push edi  +
mov ebx [ebp+arg_0] +
push 61h  +
call sub_42A930  +
pop ecx  +
lea eax [ebp+var_6C] +
push eax  +
mov edx [ebp+arg_4] +
push edx  +
call sub_404D24  +
add esp 8 +
xor ecx ecx +
mov [ebp+var_8] ecx +
xor eax eax +
mov [ebp+var_C] eax +
xor edx edx +
mov [ebp+var_10] edx +
test ebx ebx +
jz loc_42F8FB  +
cmp dword ptr [ebx] 0FCh +
jz loc_42FCCB  +
push 3F1h  +
push offset a_Step0_c_16  +
push offset aAssertionFa_78  +
push offset stream  +
call _fprintf  +
add esp 10h +
push offset aThisIsABugP_78  +
push offset stream  +
call _fprintf  +
add esp 8 +
push 1  +
call _exit  +
pop ecx  +
jmp loc_42FCCB  +
mov esi [ebx+20h] +
test esi esi +
jnz loc_42F973  +
push 3F4h  +
push offset a_Step0_c_17  +
push offset aAssertionFa_79  +
push offset stream  +
call _fprintf  +
add esp 10h +
push offset aThisIsABugP_79  +
push offset stream  +
call _fprintf  +
add esp 8 +
push 1  +
call _exit  +
pop ecx  +
mov eax [esi] +
add eax 0FFFFFF0Fh +
cmp eax 8 +
ja loc_42FCC8  +
jmp ds:off_42F98A[eax*4]  +
inc dword_4EBF10  +
lea edx [ebp+var_6C] +
push edx  +
mov ecx [esi+20h] +
push ecx  +
call sub_42F8B8  +
add esp 8 +
dec dword_4EBF10  +
jmp loc_42FCC8  +
cmp dword_4EBF10 0 +
jz loc_42F9F8  +
push offset aFoldingDefau_0  +
mov eax [ebp+var_4] +
mov edx [eax+8] +
push edx  +
mov ecx [ebp+var_4] +
mov eax [ecx+4] +
push eax  +
call sub_444EC0  +
add esp 0Ch +
jmp loc_42FCC8  +
mov edx [esi+20h] +
mov [ebp+var_4] edx +
cmp [ebp+var_4] 0 +
jnz loc_42FA3A  +
push 404h  +
push offset a_Step0_c_18  +
push offset aAssertionFa_80  +
push offset stream  +
call _fprintf  +
add esp 10h +
push offset aThisIsABugP_80  +
push offset stream  +
call _fprintf  +
add esp 8 +
push 1  +
call _exit  +
pop ecx  +
mov ecx [ebp+var_4] +
mov eax [ecx] +
sub eax 33h +
jz loc_42FA6B  +
add eax 0FFFFFFF3h +
sub eax 2 +
jb loc_42FA4E  +
jmp loc_42FA86  +
push offset aFoldedge_sourc  +
mov edx [ebp+var_4] +
mov ecx [edx+8] +
push ecx  +
mov eax [ebp+var_4] +
mov edx [eax+4] +
push edx  +
call sub_444EC0  +
add esp 0Ch +
jmp loc_42FA86  +
push offset aFoldedge_ancho  +
mov ecx [ebp+var_4] +
mov eax [ecx+8] +
push eax  +
mov edx [ebp+var_4] +
mov ecx [edx+4] +
push ecx  +
call sub_444EC0  +
add esp 0Ch +
push offset dword_4EBF1C  +
push offset dword_4EBF18  +
push offset dword_4EBF14  +
push offset unk_4EBEB4  +
mov eax [ebp+var_4] +
push eax  +
call sub_43052C  +
add esp 14h +
jmp loc_42FCC8  +
mov edx [esi+20h] +
mov [ebp+var_4] edx +
cmp [ebp+var_4] 0 +
jnz loc_42FAED  +
push 419h  +
push offset a_Step0_c_19  +
push offset aAssertionFa_81  +
push offset stream  +
call _fprintf  +
add esp 10h +
push offset aThisIsABugP_81  +
push offset stream  +
call _fprintf  +
add esp 8 +
push 1  +
call _exit  +
pop ecx  +
mov ecx [ebp+var_4] +
mov eax [ecx] +
sub eax 33h +
jz loc_42FB1E  +
add eax 0FFFFFFF3h +
sub eax 2 +
jb loc_42FB01  +
jmp loc_42FB39  +
push offset aEdge_sourcenam  +
mov edx [ebp+var_4] +
mov ecx [edx+8] +
push ecx  +
mov eax [ebp+var_4] +
mov edx [eax+4] +
push edx  +
call sub_444EC0  +
add esp 0Ch +
jmp loc_42FB39  +
push offset aEdge_anchorNot  +
mov ecx [ebp+var_4] +
mov eax [ecx+8] +
push eax  +
mov edx [ebp+var_4] +
mov ecx [edx+4] +
push ecx  +
call sub_444EC0  +
add esp 0Ch +
lea eax [ebp+var_10] +
lea edx [ebp+var_C] +
push eax  +
push edx  +
lea ecx [ebp+var_8] +
lea eax [ebp+var_6C] +
push ecx  +
push eax  +
mov edx [ebp+var_4] +
push edx  +
call sub_43052C  +
add esp 14h +
jmp loc_42FCC8  +
lea ecx [ebp+var_6C] +
push ecx  +
call sub_404B9C  +
pop ecx  +
mov edi eax +
push edi  +
mov eax [esi+20h] +
push eax  +
call sub_43042C  +
add esp 8 +
jmp loc_42FCC8  +
lea edx [ebp+var_6C] +
push edx  +
call sub_404B9C  +
pop ecx  +
mov edi eax +
push edi  +
mov eax [esi+20h] +
push eax  +
call sub_43042C  +
add esp 8 +
mov edx [edi] +
cmp edx [edi+1Ch] +
jnz loc_42FBC3  +
cmp dword_4D4B04 0 +
jnz loc_42FCC8  +
mov ecx [ebp+var_4] +
mov eax [ecx+4] +
push eax  +
push offset aLineDSelfLoopN  +
push offset stream  +
call _fprintf  +
add esp 0Ch +
jmp loc_42FCC8  +
cmp byte ptr [edi+41h] 0 +
jz loc_42FBF4  +
cmp dword_4D4B04 0 +
jnz loc_42FCC8  +
mov edx [ebp+var_4] +
mov ecx [edx+4] +
push ecx  +
push offset aLineDNearEdgeW  +
push offset stream  +
call _fprintf  +
add esp 0Ch +
jmp loc_42FCC8  +
cmp dword ptr [edi+2Ch] 0 +
jz loc_42FC25  +
cmp dword_4D4B04 0 +
jnz loc_42FCC8  +
mov eax [ebp+var_4] +
mov edx [eax+4] +
push edx  +
push offset aLineDNearEdg_0  +
push offset stream  +
call _fprintf  +
add esp 0Ch +
jmp loc_42FCC8  +
push edi  +
call sub_404E2C  +
pop ecx  +
jmp loc_42FCC8  +
lea ecx [ebp+var_6C] +
push ecx  +
call sub_404B9C  +
pop ecx  +
mov edi eax +
push edi  +
mov eax [esi+20h] +
push eax  +
call sub_43042C  +
add esp 8 +
mov edx [edi] +
cmp edx [edi+1Ch] +
jnz loc_42FC75  +
cmp dword_4D4B04 0 +
jnz loc_42FCC8  +
mov ecx [ebp+var_4] +
mov eax [ecx+4] +
push eax  +
push offset aLineDSelfLoo_0  +
push offset stream  +
call _fprintf  +
add esp 0Ch +
jmp loc_42FCC8  +
cmp byte ptr [edi+41h] 0 +
jz loc_42FC9F  +
cmp dword_4D4B04 0 +
jnz loc_42FCC8  +
mov edx [ebp+var_4] +
mov ecx [edx+4] +
push ecx  +
push offset aLineDNearEdg_1  +
push offset stream  +
call _fprintf  +
add esp 0Ch +
jmp loc_42FCC8  +
push edi  +
call sub_404E68  +
pop ecx  +
jmp loc_42FCC8  +
lea eax [ebp+var_6C] +
push eax  +
call sub_404B9C  +
pop ecx  +
mov edi eax +
push edi  +
mov eax [esi+20h] +
push eax  +
call sub_43042C  +
add esp 8 +
push edi  +
call sub_404EA4  +
pop ecx  +
mov ebx [ebx+24h] +
test ebx ebx +
jz loc_42FCDB  +
cmp dword ptr [ebx] 0FCh +
jz loc_42F936  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
push ecx  +
push ecx  +
push ebx  +
push esi  +
push edi  +
cmp [ebp+arg_0] 0 +
mov edi [ebp+arg_4] +
jz loc_42FF92  +
mov eax [ebp+arg_0] +
cmp dword ptr [eax] 55h +
jz loc_42FF92  +
push 51Bh  +
push offset a_Step0_c_24  +
push offset aAssertionFa_86  +
push offset stream  +
call _fprintf  +
add esp 10h +
push offset aThisIsABugP_86  +
push offset stream  +
call _fprintf  +
add esp 8 +
push 1  +
call _exit  +
pop ecx  +
xor edx edx +
mov [ebp+var_4] edx +
mov ebx [ebp+arg_0] +
jmp loc_42FFF2  +
mov esi [ebx+20h] +
test esi esi +
jnz loc_42FFD9  +
push 521h  +
push offset a_Step0_c_25  +
push offset aAssertionFa_87  +
push offset stream  +
call _fprintf  +
add esp 10h +
push offset aThisIsABugP_87  +
push offset stream  +
call _fprintf  +
add esp 8 +
push 1  +
call _exit  +
pop ecx  +
lea eax [ebp+var_4] +
push eax  +
mov edx [ebp+arg_C] +
push edx  +
mov ecx [ebp+arg_8] +
push ecx  +
push edi  +
push esi  +
call sub_43005C  +
add esp 14h +
mov ebx [ebx+24h] +
test ebx ebx +
jz loc_42FFFB  +
cmp dword ptr [ebx] 55h +
jz loc_42FF9C  +
cmp dword ptr [edi+4] 0 +
jnz loc_43001C  +
push offset aMissingTitleOf  +
mov eax [ebp+arg_0] +
mov edx [eax+8] +
push edx  +
mov ecx [ebp+arg_0] +
mov eax [ecx+4] +
push eax  +
call sub_444EC0  +
add esp 0Ch +
cmp dword ptr [edi+8] 0 +
jnz loc_430028  +
mov edx [edi+4] +
mov [edi+8] edx +
cmp byte ptr [edi+2Ah] 0 +
jnz loc_43003B  +
mov byte ptr [edi+2Ah] 0FFh +
push edi  +
call sub_41F83C  +
pop ecx  +
jmp loc_430048  +
cmp byte ptr [edi+2Ah] 0 +
jle loc_430048  +
push edi  +
call sub_41F784  +
pop ecx  +
push edi  +
mov ecx [ebp+arg_0] +
push ecx  +
call sub_430DD8  +
add esp 8 +
pop edi  +
pop esi  +
pop ebx  +
pop ecx  +
pop ebp  +
retn   +
***
add esp 0FFFFFFF8h +
push ebx  +
push esi  +
mov esi [ebp+arg_4] +
mov ebx [ebp+arg_0] +
test ebx ebx +
jnz loc_4300A4  +
push 555h  +
push offset a_Step0_c_26  +
push offset aAssertionFa_88  +
push offset stream  +
call _fprintf  +
add esp 10h +
push offset aThisIsABugP_88  +
push offset stream  +
call _fprintf  +
add esp 8 +
push 1  +
call _exit  +
pop ecx  +
mov eax [ebx] +
cmp eax 0E4h +
jg loc_430126  +
jz loc_430297  +
cmp eax 0DEh +
jg loc_4300FD  +
jz loc_4303C5  +
cmp eax 0DBh +
jg loc_4300E6  +
jz loc_4301D0  +
sub eax 51h +
jz loc_4302FE  +
sub eax 89h +
jz loc_430219  +
jmp loc_4303DE  +
sub eax 0DCh +
jz loc_4301DE  +
dec eax  +
jz loc_430227  +
jmp loc_4303DE  +
add eax 0FFFFFF21h +
cmp eax 4 +
ja loc_4303DE  +
jmp ds:off_430112[eax*4]  +
add eax 0FFFFFF1Bh +
cmp eax 0Ah +
ja loc_4303DE  +
jmp ds:off_43013B[eax*4]  +
mov edx [ebx+20h] +
mov ecx [edx+18h] +
push ecx  +
call sub_42A148  +
pop ecx  +
mov [esi+4] eax +
jmp loc_430419  +
mov eax [ebx+20h] +
mov edx [eax+18h] +
push edx  +
call sub_42A148  +
pop ecx  +
mov [esi+8] eax +
jmp loc_430419  +
mov ecx [ebx+20h] +
mov eax [ecx+18h] +
push eax  +
call sub_42A148  +
pop ecx  +
mov [esi+0Ch] eax +
jmp loc_430419  +
mov edx [ebx+20h] +
mov ecx [edx+18h] +
push ecx  +
call sub_42A148  +
pop ecx  +
mov [esi+10h] eax +
jmp loc_430419  +
mov eax [ebx+20h] +
mov edx [eax+18h] +
push edx  +
call sub_42A148  +
pop ecx  +
mov [esi+14h] eax +
jmp loc_430419  +
mov ecx [ebx+20h] +
mov eax [ecx+18h] +
mov [esi+38h] eax +
jmp loc_430419  +
mov edx [ebx+20h] +
mov ecx [edx] +
sub ecx 45h +
jz loc_430210  +
dec ecx  +
jz loc_430207  +
dec ecx  +
jz loc_4301FE  +
dec ecx  +
jnz loc_430419  +
mov byte ptr [esi+2Fh] 0 +
jmp loc_430419  +
mov byte ptr [esi+2Fh] 1 +
jmp loc_430419  +
mov byte ptr [esi+2Fh] 2 +
jmp loc_430419  +
mov byte ptr [esi+2Fh] 3 +
jmp loc_430419  +
mov eax [ebx+20h] +
mov edx [eax+18h] +
mov [esi+3Ch] edx +
jmp loc_430419  +
mov ecx [ebx+20h] +
mov eax [ecx] +
sub eax 49h +
jz loc_43024D  +
dec eax  +
jz loc_430244  +
dec eax  +
jnz loc_430419  +
mov byte ptr [esi+28h] 0 +
jmp loc_430419  +
mov byte ptr [esi+28h] 1 +
jmp loc_430419  +
mov byte ptr [esi+28h] 2 +
jmp loc_430419  +
mov edx [ebx+20h] +
mov ecx [edx+18h] +
mov [esi+18h] ecx +
jmp loc_430419  +
mov eax [ebx+20h] +
mov edx [eax+18h] +
mov [esi+1Ch] edx +
jmp loc_430419  +
mov ecx [ebx+20h] +
mov al [ecx+18h] +
mov [esi+29h] al +
jmp loc_430419  +
mov edx [ebx+20h] +
mov ecx [edx+18h] +
mov [esi+20h] ecx +
mov eax [ebx+24h] +
mov edx [eax+18h] +
mov [esi+24h] edx +
jmp loc_430419  +
mov ecx [ebx+20h] +
mov eax [ecx+18h] +
mov [esi+20h] eax +
jmp loc_430419  +
mov edx [ebx+20h] +
mov ecx [edx+18h] +
mov [esi+24h] ecx +
jmp loc_430419  +
mov eax [ebx+20h] +
mov dl [eax+18h] +
mov [esi+2Ah] dl +
jmp loc_430419  +
mov ecx [ebx+20h] +
push ecx  +
call sub_4308FC  +
pop ecx  +
mov [esi+2Bh] al +
jmp loc_430419  +
mov eax [ebx+20h] +
push eax  +
call sub_4308FC  +
pop ecx  +
mov [esi+2Ch] al +
mov edx [ebp+arg_10] +
cmp dword ptr [edx] 0 +
jnz loc_430419  +
mov ecx [ebx+20h] +
push ecx  +
call sub_4308FC  +
pop ecx  +
mov [esi+2Dh] al +
jmp loc_430419  +
mov eax [ebx+20h] +
push eax  +
call sub_4308FC  +
pop ecx  +
mov [esi+2Dh] al +
mov edx [ebp+arg_10] +
mov dword ptr [edx] 1 +
jmp loc_430419  +
mov ecx [ebx+20h] +
mov eax [ecx+18h] +
mov dword ptr [ebp+var_8] eax +
mov eax [ecx+1Ch] +
mov dword ptr [ebp+var_8+4] eax +
fld  [ebp+var_8] +
fcomp  ds:flt_430420 +
fnstsw  ax +
sahf   +
jnb loc_43033E  +
fld  [ebp+var_8] +
fchs   +
fstp  [ebp+var_8] +
fld  [ebp+var_8] +
fcomp  ds:flt_430424 +
fnstsw  ax +
sahf   +
jbe loc_430366  +
mov dword ptr [esi+34h] 64h +
fld  ds:flt_430428 +
fdiv  [ebp+var_8] +
call @_ftol$qv  +
mov [esi+30h] eax +
jmp loc_43037E  +
fld  [ebp+var_8] +
fmul  ds:flt_430428 +
call @_ftol$qv  +
mov [esi+34h] eax +
mov dword ptr [esi+30h] 64h +
mov edx [ebp+arg_8] +
imul edx [esi+30h] +
mov [esi+30h] edx +
mov ecx [ebp+arg_C] +
imul ecx [esi+34h] +
mov [esi+34h] ecx +
cmp dword ptr [esi+30h] 0 +
jnz loc_43039F  +
mov dword ptr [esi+30h] 1 +
cmp dword ptr [esi+34h] 0 +
jnz loc_4303AC  +
mov dword ptr [esi+34h] 1 +
mov eax [ebx+20h] +
mov eax [eax+18h] +
imul  [ebp+arg_8] +
mov [esi+30h] eax +
test eax eax +
jnz loc_430419  +
mov dword ptr [esi+30h] 1 +
jmp loc_430419  +
mov edx [ebx+20h] +
mov eax [edx+18h] +
imul  [ebp+arg_C] +
mov [esi+34h] eax +
test eax eax +
jnz loc_430419  +
mov dword ptr [esi+34h] 1 +
jmp loc_430419  +
cmp dword_4D4B04 0 +
jnz loc_430419  +
mov edx [ebx] +
push edx  +
call sub_445440  +
pop ecx  +
push eax  +
mov ecx [ebx+4] +
push ecx  +
push offset aLineDAttribu_0  +
push offset stream  +
call _fprintf  +
add esp 10h +
push offset aCurrentlyNot_1  +
push offset stream  +
call _fprintf  +
add esp 8 +
pop esi  +
pop ebx  +
pop ecx  +
pop ecx  +
pop ebp  +
retn   +
***
add esp 0FFFFFFF4h +
push ebx  +
push ebx  +
mov eax [ebp+arg_0] +
mov edx [eax] +
add edx 0FFFFFF84h +
cmp edx 20h +
ja loc_430AC1  +
jmp ds:off_430918[edx*4]  +
mov eax 1Fh +
pop ebx  +
pop ebp  +
retn   +
mov eax 1 +
pop ebx  +
pop ebp  +
retn   +
mov eax 2 +
pop ebx  +
pop ebp  +
retn   +
mov eax 3 +
pop ebx  +
pop ebp  +
retn   +
mov eax 4 +
pop ebx  +
pop ebp  +
retn   +
mov eax 5 +
pop ebx  +
pop ebp  +
retn   +
mov eax 6 +
pop ebx  +
pop ebp  +
retn   +
xor eax eax +
pop ebx  +
pop ebp  +
retn   +
mov eax 7 +
pop ebx  +
pop ebp  +
retn   +
mov eax 8 +
pop ebx  +
pop ebp  +
retn   +
mov eax 9 +
pop ebx  +
pop ebp  +
retn   +
mov eax 0Ah +
pop ebx  +
pop ebp  +
retn   +
mov eax 0Bh +
pop ebx  +
pop ebp  +
retn   +
mov eax 0Ch +
pop ebx  +
pop ebp  +
retn   +
mov eax 0Dh +
pop ebx  +
pop ebp  +
retn   +
mov eax 0Eh +
pop ebx  +
pop ebp  +
retn   +
mov eax 0Fh +
pop ebx  +
pop ebp  +
retn   +
mov eax 10h +
pop ebx  +
pop ebp  +
retn   +
mov eax 11h +
pop ebx  +
pop ebp  +
retn   +
mov eax 12h +
pop ebx  +
pop ebp  +
retn   +
mov eax 13h +
pop ebx  +
pop ebp  +
retn   +
mov eax 14h +
pop ebx  +
pop ebp  +
retn   +
mov eax 15h +
pop ebx  +
pop ebp  +
retn   +
mov eax 16h +
pop ebx  +
pop ebp  +
retn   +
mov eax 17h +
pop ebx  +
pop ebp  +
retn   +
mov eax 18h +
pop ebx  +
pop ebp  +
retn   +
mov eax 19h +
pop ebx  +
pop ebp  +
retn   +
mov eax 1Ah +
pop ebx  +
pop ebp  +
retn   +
mov eax 1Bh +
pop ebx  +
pop ebp  +
retn   +
mov eax 1Ch +
pop ebx  +
pop ebp  +
retn   +
mov eax 1Dh +
pop ebx  +
pop ebp  +
retn   +
mov eax 1Eh +
pop ebx  +
pop ebp  +
retn   +
mov edx [eax+20h] +
mov ebx [edx+18h] +
cmp ebx dword_4D4BC8 +
jl loc_430ABC  +
push offset aIllegalColorIn  +
mov edx [eax+8] +
push edx  +
mov eax [eax+4] +
push eax  +
call sub_444EC0  +
add esp 0Ch +
mov eax ebx +
pop ebx  +
pop ebp  +
retn   +
push 6BBh  +
push offset a_Step0_c_33  +
push offset aAssertionFa_95  +
push offset stream  +
call _fprintf  +
add esp 10h +
push offset aThisIsABugP_95  +
push offset stream  +
call _fprintf  +
add esp 8 +
push 1  +
call _exit  +
pop ecx  +
mov eax 1Fh +
pop ebx  +
pop ebp  +
retn   +
***
mov eax [ebp+arg_0] +
mov edx [eax] +
sub edx 60h +
jz loc_430B17  +
dec edx  +
jnz loc_430B1B  +
mov eax 1 +
pop ebp  +
retn   +
xor eax eax +
pop ebp  +
retn   +
push 6D3h  +
push offset a_Step0_c_34  +
push offset aAssertionFa_96  +
push offset stream  +
call _fprintf  +
add esp 10h +
push offset aThisIsABugP_96  +
push offset stream  +
call _fprintf  +
add esp 8 +
push 1  +
call _exit  +
pop ecx  +
xor eax eax +
pop ebp  +
retn   +
***
push ebx  +
push esi  +
push edi  +
mov esi [ebp+arg_0] +
test esi esi +
jz loc_430B71  +
cmp dword ptr [esi] 0FCh +
jz loc_430D62  +
push 6EEh  +
push offset a_Step0_c_35  +
push offset aAssertionFa_97  +
push offset stream  +
call _fprintf  +
add esp 10h +
push offset aThisIsABugP_97  +
push offset stream  +
call _fprintf  +
add esp 8 +
push 1  +
call _exit  +
pop ecx  +
jmp loc_430D62  +
mov ebx [esi+20h] +
test ebx ebx +
jnz loc_430BE9  +
push 6F1h  +
push offset a_Step0_c_36  +
push offset aAssertionFa_98  +
push offset stream  +
call _fprintf  +
add esp 10h +
push offset aThisIsABugP_98  +
push offset stream  +
call _fprintf  +
add esp 8 +
push 1  +
call _exit  +
pop ecx  +
mov eax [ebx] +
add eax 0FFFFFF0Fh +
cmp eax 0Ah +
ja loc_430D5F  +
mov al ds:byte_430C06[eax] +
jmp ds:off_430C11[eax*4]  +
mov edx [ebx+20h] +
push edx  +
call sub_430B58  +
pop ecx  +
jmp loc_430D5F  +
mov edi [ebx+20h] +
test edi edi +
jnz loc_430C71  +
push 6FAh  +
push offset a_Step0_c_37  +
push offset asc_4D9B9C  +
push offset stream  +
call _fprintf  +
add esp 10h +
push offset asc_4D9BCC  +
push offset stream  +
call _fprintf  +
add esp 8 +
push 1  +
call _exit  +
pop ecx  +
mov eax [edi] +
add eax 0FFFFFF33h +
sub eax 2 +
jb loc_430C82  +
jmp loc_430D5F  +
mov edx [edi+20h] +
mov eax [edx+18h] +
cmp eax dword_4EBDD8 +
jle loc_430D5F  +
mov dword_4EBDD8 eax +
jmp loc_430D5F  +
mov edi [ebx+20h] +
test edi edi +
jnz loc_430CDB  +
push 708h  +
push offset a_Step0_c_38  +
push offset asc_4D9C01  +
push offset stream  +
call _fprintf  +
add esp 10h +
push offset asc_4D9C31  +
push offset stream  +
call _fprintf  +
add esp 8 +
push 1  +
call _exit  +
pop ecx  +
mov eax [edi] +
sub eax 3Eh +
jnz loc_430D5F  +
mov edx [edi+20h] +
mov eax [edx+18h] +
cmp eax dword_4EBDD8 +
jle loc_430D5F  +
mov dword_4EBDD8 eax +
jmp loc_430D5F  +
mov ebx [ebx+20h] +
jmp loc_430D56  +
mov edi [ebx+20h] +
test edi edi +
jnz loc_430D39  +
push 719h  +
push offset a_Step0_c_39  +
push offset asc_4D9C66  +
push offset stream  +
call _fprintf  +
add esp 10h +
push offset asc_4D9C96  +
push offset stream  +
call _fprintf  +
add esp 8 +
push 1  +
call _exit  +
pop ecx  +
mov eax [edi] +
sub eax 3Eh +
jnz loc_430D53  +
mov edx [edi+20h] +
mov eax [edx+18h] +
cmp eax dword_4EBDD8 +
jle loc_430D53  +
mov dword_4EBDD8 eax +
mov ebx [ebx+24h] +
test ebx ebx +
jz loc_430D5F  +
cmp dword ptr [ebx] 54h +
jz loc_430CFC  +
mov esi [esi+24h] +
test esi esi +
jz loc_430D72  +
cmp dword ptr [esi] 0FCh +
jz loc_430BAC  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
push ebx  +
push esi  +
push edi  +
mov esi [ebp+arg_4] +
mov edi [ebp+arg_0] +
push esi  +
call sub_431094  +
pop ecx  +
mov ebx eax +
test ebx ebx +
jnz loc_430DB9  +
push esi  +
push offset aUndefinedNodeS  +
push offset byte_4EBF28  +
call _sprintf  +
add esp 0Ch +
push offset byte_4EBF28  +
mov eax [edi+8] +
push eax  +
mov edx [edi+4] +
push edx  +
call sub_444EC0  +
add esp 0Ch +
mov eax ebx +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
test eax eax +
jnz loc_430DCE  +
xor eax eax +
pop ebp  +
retn   +
***
push eax  +
call sub_431094  +
pop ecx  +
pop ebp  +
retn   +
***
push ebx  +
push esi  +
mov ebx [ebp+arg_4] +
test ebx ebx +
jnz loc_430E1A  +
push 775h  +
push offset a_Step0_c_40  +
push offset asc_4D9CDD  +
push offset stream  +
call _fprintf  +
add esp 10h +
push offset asc_4D9D0D  +
push offset stream  +
call _fprintf  +
add esp 8 +
push 1  +
call _exit  +
pop ecx  +
mov esi [ebx+4] +
test esi esi +
jz loc_430E63  +
cmp dword_4D4B0C 0 +
jnz loc_430E63  +
push esi  +
call sub_431094  +
pop ecx  +
test eax eax +
jz loc_430E63  +
push esi  +
push offset aDoubleDefinedN  +
push offset byte_4EBF28  +
call _sprintf  +
add esp 0Ch +
push offset byte_4EBF28  +
mov eax [ebp+arg_0] +
mov edx [eax+8] +
push edx  +
mov ecx [ebp+arg_0] +
mov eax [ecx+4] +
push eax  +
call sub_444EC0  +
add esp 0Ch +
push ebx  +
call sub_430FD4  +
pop ecx  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
push edi  +
mov edi offset dword_4D8778 +
mov esi offset dword_4EBF24 +
mov ebx offset dword_4D8774 +
cmp dword ptr [edi] 0 +
jnz loc_430F42  +
xor eax eax +
mov [esi] eax +
mov edx dword_4EC420 +
push edx  +
call sub_42E500  +
pop ecx  +
mov eax [esi] +
cmp eax 7530h +
jle loc_430EAD  +
mov dword ptr [ebx] 7D03h +
jmp loc_430F1C  +
cmp eax 61A8h +
jle loc_430EBC  +
mov dword ptr [ebx] 753Bh +
jmp loc_430F1C  +
cmp eax 4E20h +
jle loc_430ECB  +
mov dword ptr [ebx] 61B5h +
jmp loc_430F1C  +
cmp eax 3A98h +
jle loc_430EDA  +
mov dword ptr [ebx] 4E2Bh +
jmp loc_430F1C  +
cmp eax 2710h +
jle loc_430EE9  +
mov dword ptr [ebx] 3AA5h +
jmp loc_430F1C  +
cmp eax 1D4Ch +
jle loc_430EF8  +
mov dword ptr [ebx] 2717h +
jmp loc_430F1C  +
cmp eax 1388h +
jle loc_430F07  +
mov dword ptr [ebx] 1D53h +
jmp loc_430F1C  +
cmp eax 7D0h +
jle loc_430F16  +
mov dword ptr [ebx] 138Bh +
jmp loc_430F1C  +
mov dword ptr [ebx] 7D3h +
mov edx [ebx] +
shl edx 2 +
push edx  +
call _malloc  +
pop ecx  +
mov esi eax +
mov [edi] esi +
test esi esi +
jnz loc_430F42  +
push offset unk_4D9D6A  +
push offset aMemoryExhaus_4  +
call sub_42A3F8  +
add esp 8 +
xor eax eax +
jmp loc_430F4E  +
mov edx [edi] +
xor ecx ecx +
mov [edx+eax*4] ecx +
inc eax  +
cmp eax [ebx] +
jl loc_430F46  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push ebx  +
push esi  +
mov ebx [ebp+arg_0] +
test ebx ebx +
jnz loc_430F9A  +
push 7D1h  +
push offset a_Step0_c_41  +
push offset asc_4D9D6B  +
push offset stream  +
call _fprintf  +
add esp 10h +
push offset asc_4D9D9B  +
push offset stream  +
call _fprintf  +
add esp 8 +
push 1  +
call _exit  +
pop ecx  +
xor esi esi +
jmp loc_430FB7  +
mov eax esi +
add eax eax +
lea eax [eax+eax*4] +
movsx edx cl +
add eax edx +
add eax 65h +
cdq   +
idiv  dword_4D8774 +
mov esi edx +
inc ebx  +
mov cl [ebx] +
test cl cl +
jnz loc_430F9E  +
test esi esi +
jge loc_430FC3  +
neg esi  +
mov eax esi +
cdq   +
idiv  dword_4D8774 +
mov eax edx +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
push ebx  +
push ebx  +
push esi  +
push edi  +
mov esi [ebp+arg_0] +
push esi  +
call sub_430F58  +
pop ecx  +
mov edx dword_4D8778 +
mov ebx [edx+eax*4] +
test ebx ebx +
jz loc_4310EC  +
mov edi [ebx+4] +
cmp esi edi +
jnz loc_4310BC  +
mov eax ebx +
jmp loc_4310EE  +
mov eax esi +
mov edx edi +
mov cl [eax] +
cmp cl [edx] +
jnz loc_4310E2  +
test cl cl +
jz loc_4310DC  +
mov cl [eax+1] +
cmp cl [edx+1] +
jnz loc_4310E2  +
add eax 2 +
add edx 2 +
test cl cl +
jnz loc_4310C0  +
jnz loc_4310E2  +
mov eax ebx +
jmp loc_4310EE  +
mov ebx [ebx+0B8h] +
test ebx ebx +
jnz loc_4310B1  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
push ebx  +
push esi  +
push edi  +
mov ebx offset dword_4EBDF4 +
mov esi offset dword_4D8778 +
xor eax eax +
mov dword_4EC328 eax +
xor edx edx +
mov dword_4EC32C edx +
xor ecx ecx +
mov [ebx] ecx +
xor edx edx +
mov eax [esi] +
mov ecx eax +
jmp loc_431159  +
mov eax [esi] +
cmp dword ptr [eax+edx*4] 0 +
jz loc_431155  +
cmp dword_4EC328 0 +
jnz loc_431143  +
mov eax [esi] +
mov edi dword_4EC32C +
mov eax [eax+edi*4] +
mov dword_4EC328 eax +
mov dword_4EC32C edx +
mov eax [ecx] +
test eax eax +
jz loc_431155  +
inc dword ptr [ebx]  +
mov eax [eax+0B8h] +
test eax eax +
jnz loc_431149  +
inc edx  +
add ecx 4 +
cmp edx dword_4D8774 +
jl loc_43111C  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+8] +
test ebx ebx +
jge loc_4311A9  +
push 84Eh  +
push offset a_Step0_c_44  +
push offset asc_4D9EB2  +
push offset stream  +
call _fprintf  +
add esp 10h +
push offset asc_4D9EE2  +
push offset stream  +
call _fprintf  +
add esp 8 +
push 1  +
call _exit  +
***
pop ecx  +
cmp dword_4EC328 0 +
jz loc_431200  +
cmp dword_4EBDF4 0 +
jz loc_431200  +
xor edx edx +
mov eax dword_4D8778 +
mov ecx eax +
jmp loc_4311F8  +
mov eax dword_4D8778 +
cmp dword ptr [eax+edx*4] 0 +
jz loc_4311F4  +
mov eax [ecx] +
test eax eax +
jz loc_4311F4  +
test ebx ebx +
jnz loc_4311E9  +
mov dword_4EC328 eax +
mov dword_4EC32C edx +
pop ebx  +
pop ebp  +
retn   +
***
dec ebx  +
mov eax [eax+0B8h] +
test eax eax +
jnz loc_4311D7  +
inc edx  +
add ecx 4 +
cmp edx dword_4D8774 +
jl loc_4311C6  +
pop ebx  +
pop ebp  +
retn   +
***
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+8] +
mov eax dword_4EC328 +
test eax eax +
jnz loc_431219  +
xor eax eax +
jmp loc_43126B  +
test esi esi +
jge loc_43121F  +
xor esi esi +
mov edx dword_4EC32C +
mov ecx eax +
test esi esi +
jle loc_431269  +
dec esi  +
mov eax [ecx+0B8h] +
test eax eax +
jz loc_43123A  +
mov ecx eax +
jmp loc_431265  +
inc edx  +
xor ecx ecx +
mov eax dword_4D8778 +
lea eax [eax+edx*4] +
jmp loc_431255  +
mov ebx [eax] +
test ebx ebx +
jz loc_431251  +
mov ecx ebx +
jmp loc_43125D  +
inc edx  +
add eax 4 +
cmp edx dword_4D8774 +
jl loc_431247  +
test ecx ecx +
jnz loc_431265  +
xor eax eax +
jmp loc_43126B  +
test esi esi +
jg loc_43122B  +
mov eax ecx +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
push edi  +
mov esi offset dword_4D9F1C +
mov edi offset dword_4D9F20 +
cmp dword_4CD14C 0 +
jz loc_4312B9  +
push 5Ch  +
push offset a_Step1_c  +
push offset asc_4D9F5D  +
push offset stream  +
call _fprintf  +
add esp 10h +
push offset asc_4D9F8D  +
push offset stream  +
call _fprintf  +
add esp 8 +
push 1  +
call _exit  +
pop ecx  +
call sub_4318D0  +
call sub_431574  +
call sub_43164C  +
call sub_431B84  +
call sub_431934  +
cmp dword_4D4B20 3 +
jnz loc_4312E2  +
call sub_4324C0  +
jmp loc_4312F7  +
cmp dword_4D4B20 0 +
jnz loc_4312F2  +
call sub_432848  +
jmp loc_4312F7  +
call sub_431E50  +
cmp dword_4D4B34 1 +
jnz loc_431305  +
call sub_433114  +
cmp dword_4D4B30 1 +
jnz loc_431313  +
call sub_43337C  +
mov eax [edi] +
add eax 2 +
cmp eax dword_4D9F24 +
jle loc_431367  +
mov eax [esi] +
test eax eax +
jz loc_43132D  +
push eax  +
call _free  +
pop ecx  +
mov edx [edi] +
add edx 2 +
mov ecx edx +
shl ecx 3 +
sub ecx edx +
shl ecx 2 +
push ecx  +
call _malloc  +
pop ecx  +
mov ebx eax +
mov [esi] ebx +
test ebx ebx +
jnz loc_43135D  +
push offset unk_4D9FD3  +
push offset aMemoryExhaus_5  +
call sub_42A3F8  +
add esp 8 +
mov eax [edi] +
add eax 2 +
mov dword_4D9F24 eax +
xor eax eax +
jmp loc_43138B  +
mov edx eax +
mov ecx [esi] +
shl edx 3 +
xor ebx ebx +
sub edx eax +
mov [ecx+edx*4] ebx +
xor ebx ebx +
mov [ecx+edx*4+10h] ebx +
xor ebx ebx +
mov [ecx+edx*4+14h] ebx +
inc eax  +
mov byte ptr [ecx+edx*4+18h] 1 +
mov edx [edi] +
add edx 2 +
cmp eax edx +
jl loc_43136B  +
call sub_43382C  +
call sub_433C5C  +
call sub_434694  +
cmp dword_4D4B20 14h +
jnz loc_4313E2  +
call sub_43FD94  +
mov ebx eax +
mov dword_4D4B20 ebx +
cmp ebx 14h +
jz loc_4313E2  +
push offset aThisIsNotADown  +
push offset stream  +
call _fprintf  +
add esp 8 +
push offset aContinuingWith  +
push offset stream  +
call _fprintf  +
add esp 8 +
call sub_4348D0  +
cmp dword_4D4B20 14h +
jz loc_4313F5  +
call sub_43398C  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push ebx  +
mov ebx [ebp+arg_0] +
test ebx ebx +
jnz loc_43143A  +
push 74h  +
push offset a_Step1_c_0  +
push offset asc_4DA012  +
push offset stream  +
call _fprintf  +
add esp 10h +
push offset asc_4DA042  +
push offset stream  +
call _fprintf  +
add esp 8 +
push 1  +
call _exit  +
pop ecx  +
mov eax [ebx+5Ch] +
test eax eax +
jz loc_431449  +
mov edx [ebx+60h] +
mov [eax+60h] edx +
jmp loc_431452  +
mov ecx [ebx+60h] +
mov dword_4CD134 ecx +
mov eax [ebx+60h] +
test eax eax +
jz loc_431461  +
mov edx [ebx+5Ch] +
mov [eax+5Ch] edx +
jmp loc_43146A  +
mov ecx [ebx+5Ch] +
mov dword_4CD130 ecx +
mov eax dword_4EC33C +
mov edx offset dword_4EC33C +
test eax eax +
jz loc_431488  +
mov ecx [eax] +
cmp ecx [ebx] +
jge loc_431488  +
lea edx [eax+5Ch] +
mov eax [eax+5Ch] +
test eax eax +
jnz loc_431478  +
mov [edx] ebx +
test eax eax +
jz loc_431496  +
mov ecx [eax+60h] +
mov [ebx+60h] ecx +
jmp loc_43149F  +
mov edx dword_4EC340 +
mov [ebx+60h] edx +
mov [ebx+5Ch] eax +
test eax eax +
jz loc_4314AC  +
mov [eax+60h] ebx +
pop ebx  +
pop ebp  +
retn   +
mov dword_4EC340 ebx +
pop ebx  +
pop ebp  +
retn   +
***
push ebx  +
mov dword_4EC33C eax +
xor edx edx +
mov dword_4EC340 edx +
xor ecx ecx +
mov dword_4EC344 ecx +
xor eax eax +
mov dword_4EC348 eax +
mov eax dword_4CD130 +
test eax eax +
jz loc_4315C7  +
cmp dword ptr [eax+94h] 0 +
mov ebx [eax+5Ch] +
jnz loc_4315B1  +
push eax  +
call sub_4313FC  +
pop ecx  +
jmp loc_4315C1  +
cmp dword ptr [eax+98h] 0 +
jnz loc_4315C1  +
push eax  +
call sub_4314B8  +
pop ecx  +
mov eax ebx +
test eax eax +
jnz loc_43159C  +
cmp dword_4EC33C 0 +
jz loc_43160A  +
mov eax dword_4CD130 +
test eax eax +
jz loc_4315E2  +
mov edx dword_4EC340 +
mov [eax+60h] edx +
mov eax dword_4EC340 +
mov edx dword_4CD130 +
mov [eax+5Ch] edx +
mov ecx dword_4EC33C +
mov dword_4CD130 ecx +
cmp dword_4CD134 0 +
jnz loc_43160A  +
mov dword_4CD134 eax +
mov eax dword_4EC344 +
test eax eax +
jz loc_431648  +
mov edx dword_4CD134 +
test edx edx +
jz loc_431620  +
mov [edx+5Ch] eax +
mov eax dword_4EC344 +
mov edx dword_4CD134 +
mov [eax+60h] edx +
mov ecx dword_4EC348 +
mov dword_4CD134 ecx +
cmp dword_4CD130 0 +
jnz loc_431648  +
mov dword_4CD130 eax +
pop ebx  +
retn   +
***
jz loc_43168C  +
push ecx  +
mov ebx dword_4CD180 +
test ebx ebx +
jz loc_43192F  +
mov eax [ebx] +
cmp byte ptr [eax+43h] 0 +
jnz loc_4318ED  +
push eax  +
call sub_43446C  +
pop ecx  +
jmp loc_431928  +
mov edx [ebx] +
mov eax [edx+4Ch] +
test eax eax +
jz loc_431928  +
mov edx [eax+98h] +
mov esi [eax+94h] +
test edx edx +
jz loc_431915  +
mov eax [edx] +
cmp byte ptr [eax+43h] 0 +
jnz loc_431915  +
push eax  +
call sub_43446C  +
pop ecx  +
test esi esi +
jz loc_431928  +
mov eax [esi] +
cmp byte ptr [eax+43h] 0 +
jnz loc_431928  +
push eax  +
call sub_43446C  +
pop ecx  +
mov ebx [ebx+4] +
test ebx ebx +
jnz loc_4318DC  +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
push edi  +
push ebp  +
mov ebx dword_4CD178 +
test ebx ebx +
jz loc_431DC5  +
mov eax [ebx] +
cmp byte ptr [eax+43h] 0 +
jnz loc_431DBA  +
mov edx [eax] +
mov eax [eax+1Ch] +
mov ebp 1 +
mov esi [edx+0B4h] +
test esi esi +
mov edi [eax+0B4h] +
jz loc_431BC9  +
cmp dword ptr [esi] 0 +
jz loc_431BC9  +
cmp dword ptr [esi+8] 0 +
jz loc_431BC9  +
xor ebp ebp +
test edi edi +
jz loc_431BDA  +
cmp dword ptr [edi] 0 +
jz loc_431BDA  +
cmp dword ptr [edi+8] 0 +
jz loc_431BDA  +
xor ebp ebp +
mov eax [ebx] +
mov edx [eax] +
push edx  +
push 0  +
mov ecx [eax+1Ch] +
push ecx  +
call sub_431DCC  +
add esp 0Ch +
test eax eax +
jz loc_431BF3  +
xor ebp ebp +
test ebp ebp +
jz loc_431D3C  +
test esi esi +
jnz loc_431C1A  +
mov eax [ebx] +
mov edx [eax] +
push edx  +
call sub_404F88  +
mov esi eax +
mov eax [ebx] +
pop ecx  +
mov edx [eax+1Ch] +
mov [esi] edx +
mov ecx [ebx] +
mov [esi+4] ecx +
jmp loc_431C2D  +
cmp dword ptr [esi+8] 0 +
jnz loc_431C2D  +
mov eax [ebx] +
mov edx [eax+1Ch] +
mov [esi+8] edx +
mov ecx [ebx] +
mov [esi+0Ch] ecx +
test edi edi +
jnz loc_431C4C  +
mov eax [ebx] +
mov edx [eax+1Ch] +
push edx  +
call sub_404F88  +
mov edi eax +
mov eax [ebx] +
pop ecx  +
mov edx [eax] +
mov [edi] edx +
mov ecx [ebx] +
mov [edi+4] ecx +
jmp loc_431C5E  +
cmp dword ptr [edi+8] 0 +
jnz loc_431C5E  +
mov eax [ebx] +
mov edx [eax] +
mov [edi+8] edx +
mov ecx [ebx] +
mov [edi+0Ch] ecx +
mov eax [ebx] +
mov edx [eax] +
mov edx [edx+38h] +
test edx edx +
jl loc_431D09  +
mov ecx [eax+1Ch] +
cmp dword ptr [ecx+38h] 0 +
jl loc_431D09  +
mov eax [eax+1Ch] +
cmp dword ptr [eax+38h] 0 +
setnl al  +
and eax 1 +
cmp edx eax +
jz loc_431D09  +
cmp dword_4D4B04 0 +
jnz loc_431D09  +
push offset aNearedgeConn_0  +
push offset stream  +
call _fprintf  +
add esp 8 +
mov edx [ebx] +
mov ecx [edx] +
mov eax [ecx+4] +
cmp byte ptr [eax] 0 +
jz loc_431CC5  +
push eax  +
push offset aS_1  +
push offset stream  +
call _fprintf  +
add esp 0Ch +
push offset asc_4DA297  +
push offset stream  +
call _fprintf  +
add esp 8 +
mov edx [ebx] +
mov ecx [edx+1Ch] +
mov eax [ecx+4] +
cmp byte ptr [eax] 0 +
jz loc_431CF7  +
push eax  +
push offset aS_2  +
push offset stream  +
call _fprintf  +
add esp 0Ch +
push offset aLevelOfTargetI  +
push offset stream  +
call _fprintf  +
add esp 8 +
mov edx [ebx] +
mov ecx [edx] +
mov eax [ecx+38h] +
test eax eax +
jl loc_431D1A  +
mov edx [edx+1Ch] +
mov [edx+38h] eax +
mov edx [ebx] +
mov eax [edx+1Ch] +
mov eax [eax+38h] +
test eax eax +
jl loc_431D2B  +
mov edx [edx] +
mov [edx+38h] eax +
mov ecx [ebx] +
push ecx  +
call sub_420DE4  +
pop ecx  +
mov eax [ebx] +
mov byte ptr [eax+43h] 0 +
jmp loc_431DBA  +
cmp dword_4D4B04 0 +
jnz loc_431DBA  +
push offset aNearedgeConn_1  +
push offset stream  +
call _fprintf  +
add esp 8 +
mov edx [ebx] +
mov ecx [edx] +
mov eax [ecx+4] +
cmp byte ptr [eax] 0 +
jz loc_431D76  +
push eax  +
push offset aS_3  +
push offset stream  +
call _fprintf  +
add esp 0Ch +
push offset asc_4DA2DD  +
push offset stream  +
call _fprintf  +
add esp 8 +
mov edx [ebx] +
mov ecx [edx+1Ch] +
mov eax [ecx+4] +
cmp byte ptr [eax] 0 +
jz loc_431DA8  +
push eax  +
push offset aS_4  +
push offset stream  +
call _fprintf  +
add esp 0Ch +
push offset aIgnoredSorry_0  +
push offset stream  +
call _fprintf  +
add esp 8 +
mov ebx [ebx+4] +
test ebx ebx +
jnz loc_431B96  +
pop ebp  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push ebx  +
push esi  +
push edi  +
cmp dword_4D4B2C 0 +
mov esi [ebp+arg_0] +
jnz loc_431DE5  +
mov eax 1 +
jmp loc_431E4A  +
test esi esi +
jnz loc_431DED  +
xor eax eax +
jmp loc_431E4A  +
cmp esi [ebp+arg_8] +
jnz loc_431DF9  +
mov eax 1 +
jmp loc_431E4A  +
xor edi edi +
mov ebx [esi+0B4h] +
test ebx ebx +
jnz loc_431E09  +
xor eax eax +
jmp loc_431E4A  +
cmp dword ptr [ebx] 0 +
jz loc_431E27  +
mov edx [ebx] +
cmp edx [ebp+arg_4] +
jz loc_431E27  +
mov ecx [ebp+arg_8] +
push ecx  +
push esi  +
mov eax [ebx] +
push eax  +
call sub_431DCC  +
add esp 0Ch +
or edi eax +
cmp dword ptr [ebx+8] 0 +
jz loc_431E48  +
mov edx [ebx+8] +
cmp edx [ebp+arg_4] +
jz loc_431E48  +
mov ecx [ebp+arg_8] +
push ecx  +
push esi  +
mov eax [ebx+8] +
push eax  +
call sub_431DCC  +
add esp 0Ch +
or edi eax +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
push edi  +
push ebp  +
mov esi offset aIdStep1_cV3_11 +
mov edi offset stru_4E7814 +
mov dword_4EC34C 1 +
xor eax eax +
mov dword_4D9F20 eax +
push 70h  +
call sub_42A930  +
pop ecx  +
mov ebx dword_4CD130 +
test ebx ebx +
jz loc_431E9C  +
cmp byte ptr [ebx+66h] 0 +
jnz loc_431E95  +
xor eax eax +
push ebx  +
mov dword_4EC350 eax +
call sub_4320F8  +
pop ecx  +
mov ebx [ebx+5Ch] +
test ebx ebx +
jnz loc_431E81  +
mov ebx dword_4CD144 +
test ebx ebx +
jz loc_431EED  +
cmp byte ptr [ebx+66h] 0 +
jnz loc_431EE6  +
push 1ACh  +
lea eax [esi+3F7h] +
push eax  +
lea edx [esi+3D1h] +
push edx  +
lea ecx [edi+30h] +
push ecx  +
call _fprintf  +
add esp 10h +
lea eax [esi+401h] +
push eax  +
lea edx [edi+30h] +
push edx  +
call _fprintf  +
add esp 8 +
push 1  +
call _exit  +
pop ecx  +
mov ebx [ebx+5Ch] +
test ebx ebx +
jnz loc_431EA6  +
mov eax dword_4D4B20 +
cmp eax 0Ch +
jz loc_4320F2  +
cmp eax 14h +
jz loc_4320F2  +
cmp dword_4D4C40 0 +
jle loc_431F26  +
push 1Eh  +
call sub_43FD4C  +
pop ecx  +
test eax eax +
jz loc_431F26  +
push 74h  +
call sub_42A930  +
pop ecx  +
jmp loc_4320F2  +
mov ebp dword_4D9F20 +
push 70h  +
call sub_42A930  +
pop ecx  +
mov ebx dword_4CD130 +
test ebx ebx +
jz loc_431F49  +
mov byte ptr [ebx+66h] 0 +
mov ebx [ebx+5Ch] +
test ebx ebx +
jnz loc_431F3E  +
mov ebx dword_4CD144 +
test ebx ebx +
jz loc_431F5E  +
mov byte ptr [ebx+66h] 0 +
mov ebx [ebx+5Ch] +
test ebx ebx +
jnz loc_431F53  +
mov ebx dword_4CD14C +
test ebx ebx +
jz loc_431F73  +
mov byte ptr [ebx+66h] 0 +
mov ebx [ebx+5Ch] +
test ebx ebx +
jnz loc_431F68  +
mov dword_4EC34C 1 +
xor eax eax +
mov dword_4D9F20 eax +
mov ebx dword_4CD130 +
test ebx ebx +
jz loc_431FA9  +
cmp byte ptr [ebx+66h] 0 +
jnz loc_431FA2  +
xor eax eax +
push ebx  +
mov dword_4EC350 eax +
call sub_4322C0  +
pop ecx  +
mov ebx [ebx+5Ch] +
test ebx ebx +
jnz loc_431F8E  +
mov ebx dword_4CD144 +
test ebx ebx +
jz loc_431FFA  +
cmp byte ptr [ebx+66h] 0 +
jnz loc_431FF3  +
push 1BAh  +
lea eax [esi+45Ch] +
push eax  +
lea edx [esi+436h] +
push edx  +
lea ecx [edi+30h] +
push ecx  +
call _fprintf  +
add esp 10h +
lea eax [esi+466h] +
push eax  +
lea edx [edi+30h] +
push edx  +
call _fprintf  +
add esp 8 +
push 1  +
call _exit  +
pop ecx  +
mov ebx [ebx+5Ch] +
test ebx ebx +
jnz loc_431FB3  +
cmp dword_4D4B20 1 +
jnz loc_43200F  +
cmp ebp dword_4D9F20 +
jle loc_4320F2  +
cmp dword_4D4B20 2 +
jnz loc_432024  +
cmp ebp dword_4D9F20 +
jge loc_4320F2  +
push 70h  +
call sub_42A930  +
pop ecx  +
mov ebx dword_4CD130 +
test ebx ebx +
jz loc_432041  +
mov byte ptr [ebx+66h] 0 +
mov ebx [ebx+5Ch] +
test ebx ebx +
jnz loc_432036  +
mov ebx dword_4CD144 +
test ebx ebx +
jz loc_432056  +
mov byte ptr [ebx+66h] 0 +
mov ebx [ebx+5Ch] +
test ebx ebx +
jnz loc_43204B  +
mov ebx dword_4CD14C +
test ebx ebx +
jz loc_43206B  +
mov byte ptr [ebx+66h] 0 +
mov ebx [ebx+5Ch] +
test ebx ebx +
jnz loc_432060  +
mov dword_4EC34C 1 +
xor eax eax +
mov dword_4D9F20 eax +
mov ebx dword_4CD130 +
test ebx ebx +
jz loc_4320A1  +
cmp byte ptr [ebx+66h] 0 +
jnz loc_43209A  +
xor eax eax +
push ebx  +
mov dword_4EC350 eax +
call sub_4320F8  +
pop ecx  +
mov ebx [ebx+5Ch] +
test ebx ebx +
jnz loc_432086  +
mov ebx dword_4CD144 +
test ebx ebx +
jz loc_4320F2  +
cmp byte ptr [ebx+66h] 0 +
jnz loc_4320EB  +
push 1C8h  +
lea eax [esi+4C1h] +
push eax  +
lea edx [esi+49Bh] +
push edx  +
lea ecx [edi+30h] +
push ecx  +
call _fprintf  +
add esp 10h +
lea eax [esi+4CBh] +
push eax  +
lea edx [edi+30h] +
push edx  +
call _fprintf  +
add esp 8 +
push 1  +
call _exit  +
pop ecx  +
mov ebx [ebx+5Ch] +
test ebx ebx +
jnz loc_4320AB  +
pop ebp  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push ebx  +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
test edi edi +
jnz loc_432303  +
push 1F3h  +
push offset a_Step1_c_8  +
push offset asc_4DA557  +
push offset stream  +
call _fprintf  +
add esp 10h +
push offset asc_4DA587  +
push offset stream  +
call _fprintf  +
add esp 8 +
push 1  +
call _exit  +
pop ecx  +
cmp byte ptr [edi+66h] 0 +
jnz loc_432406  +
mov byte ptr [edi+66h] 1 +
mov eax dword_4EC34C +
mov [edi+80h] eax +
inc dword_4EC34C  +
mov eax [edi+38h] +
test eax eax +
jl loc_43232E  +
mov dword_4EC350 eax +
mov edx dword_4EC350 +
mov [edi+6Ch] edx +
mov ecx dword_4EC350 +
cmp ecx dword_4D9F20 +
jle loc_43234C  +
mov eax dword_4EC350 +
jmp loc_432351  +
mov eax dword_4D9F20 +
mov dword_4D9F20 eax +
mov eax [edi+0B4h] +
test eax eax +
jz loc_432381  +
mov edx [eax] +
test edx edx +
jz loc_43236D  +
push edx  +
call sub_4322C0  +
pop ecx  +
mov ecx [edi+0B4h] +
mov eax [ecx+8] +
test eax eax +
jz loc_432381  +
push eax  +
call sub_4322C0  +
pop ecx  +
mov esi 1 +
or esi 0FFFFFFFFh +
mov ebx [edi+98h] +
test ebx ebx +
jz loc_4323ED  +
mov eax [ebx] +
cmp edi [eax] +
jz loc_4323CF  +
push 200h  +
push offset a_Step1_c_9  +
push offset asc_4DA5BC  +
push offset stream  +
call _fprintf  +
add esp 10h +
push offset asc_4DA5EC  +
push offset stream  +
call _fprintf  +
add esp 8 +
push 1  +
call _exit  +
pop ecx  +
mov edx [ebx] +
mov eax [edx+1Ch] +
cmp byte ptr [eax+66h] 0 +
jnz loc_4323E6  +
mov edx [ebx] +
cmp esi [edx+30h] +
jge loc_4323E6  +
mov ecx [ebx] +
mov esi [ecx+30h] +
mov ebx [ebx+4] +
test ebx ebx +
jnz loc_432393  +
cmp esi 0FFFFFFFFh +
jz loc_432406  +
push esi  +
push edi  +
mov eax [edi+98h] +
push eax  +
call sub_43240C  +
add esp 0Ch +
inc esi  +
jg loc_432386  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
push ebx  +
mov edx dword_4EC358 +
mov eax dword_4EC354 +
test eax eax +
jz loc_4324BB  +
mov edx [eax+4] +
mov dword_4EC354 edx +
mov ecx dword_4EC358 +
mov [eax+4] ecx +
mov dword_4EC358 eax +
mov eax [eax] +
retn   +
xor eax eax +
retn   +
***
xor eax eax +
push ebx  +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_8] +
mov esi [ebp+arg_0] +
mov eax [esi+38h] +
test eax eax +
jl loc_4326A0  +
cmp eax edi +
jz loc_4326A0  +
cmp dword_4D4B04 0 +
jnz loc_4326A0  +
push offset aLevelSpecifica  +
push offset stream  +
call _fprintf  +
add esp 8 +
push offset aBecauseNearedg  +
push offset stream  +
call _fprintf  +
add esp 8 +
mov [esi+6Ch] edi +
mov byte ptr [esi+66h] 1 +
mov ebx [esi+0B4h] +
test ebx ebx +
jz loc_4326CA  +
cmp dword ptr [ebx] 0 +
jz loc_4326CA  +
mov eax [ebx] +
cmp eax [ebp+arg_4] +
jz loc_4326CA  +
push edi  +
push esi  +
mov edx [ebx] +
push edx  +
call sub_43265C  +
add esp 0Ch +
test ebx ebx +
jz loc_4326EA  +
cmp dword ptr [ebx+8] 0 +
jz loc_4326EA  +
mov ecx [ebx+8] +
cmp ecx [ebp+arg_4] +
jz loc_4326EA  +
push edi  +
push esi  +
mov eax [ebx+8] +
push eax  +
call sub_43265C  +
add esp 0Ch +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_4] +
mov esi [ebp+arg_0] +
mov ebx [esi+98h] +
test ebx ebx +
jz loc_432737  +
mov eax [ebx] +
mov eax [eax+1Ch] +
push eax  +
push eax  +
call sub_432778  +
add esp 8 +
test eax eax +
jnz loc_432730  +
mov edx [ebx] +
mov ecx [edx+1Ch] +
cmp byte ptr [ecx+66h] 0 +
jnz loc_432730  +
mov eax [ebx] +
mov edx [eax+1Ch] +
push edx  +
call sub_432464  +
pop ecx  +
mov ebx [ebx+4] +
test ebx ebx +
jnz loc_432706  +
mov ebx [esi+0B4h] +
test ebx ebx +
jz loc_432756  +
cmp dword ptr [ebx] 0 +
jz loc_432756  +
cmp edi [ebx] +
jz loc_432756  +
push esi  +
mov eax [ebx] +
push eax  +
call sub_4326F0  +
add esp 8 +
test ebx ebx +
jz loc_432772  +
cmp dword ptr [ebx+8] 0 +
jz loc_432772  +
cmp edi [ebx+8] +
jz loc_432772  +
push esi  +
mov edx [ebx+8] +
push edx  +
call sub_4326F0  +
add esp 8 +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
xor esi esi +
mov eax [edi+94h] +
test eax eax +
jz loc_43279F  +
mov edx [eax] +
mov ecx [edx] +
cmp byte ptr [ecx+66h] 0 +
jnz loc_432798  +
inc esi  +
mov eax [eax+4] +
test eax eax +
jnz loc_43278D  +
mov ebx [edi+0B4h] +
test ebx ebx +
jz loc_4327C3  +
cmp dword ptr [ebx] 0 +
jz loc_4327C3  +
mov eax [ebx] +
cmp eax [ebp+arg_4] +
jz loc_4327C3  +
push edi  +
mov edx [ebx] +
push edx  +
call sub_432778  +
add esp 8 +
add esi eax +
test ebx ebx +
jz loc_4327E4  +
cmp dword ptr [ebx+8] 0 +
jz loc_4327E4  +
mov ecx [ebx+8] +
cmp ecx [ebp+arg_4] +
jz loc_4327E4  +
push edi  +
mov eax [ebx+8] +
push eax  +
call sub_432778  +
add esp 8 +
add esi eax +
mov eax esi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
push ebx  +
mov ebx [ebp+arg_4] +
mov edx dword_4EC358 +
test edx edx +
jz loc_43280A  +
mov eax edx +
mov ecx [edx+4] +
mov dword_4EC358 ecx +
jmp loc_43280F  +
call sub_404A1C  +
mov edx [ebp+arg_0] +
mov [eax] edx +
mov ecx [ebx] +
mov [eax+4] ecx +
mov [ebx] eax +
pop ebx  +
pop ebp  +
retn   +
***
mov edx [ebp+arg_0] +
mov eax [edx] +
test eax eax +
jz loc_432843  +
mov ecx [eax+4] +
mov [edx] ecx +
mov edx dword_4EC358 +
mov [eax+4] edx +
mov dword_4EC358 eax +
mov eax [eax] +
pop ebp  +
retn   +
xor eax eax +
pop ebp  +
retn   +
***
mov esi offset unk_4EC35C +
xor eax eax +
mov dword_4EC358 eax +
xor edx edx +
mov [esi] edx +
mov dword_4D9F20 1 +
mov ebx dword_4CD130 +
test ebx ebx +
jz loc_43288C  +
cmp byte ptr [ebx+65h] 0 +
jnz loc_43287E  +
push esi  +
push ebx  +
call sub_4327EC  +
add esp 8 +
mov dword ptr [ebx+6Ch] 1 +
mov ebx [ebx+5Ch] +
test ebx ebx +
jnz loc_43286E  +
mov ebx dword_4CD144 +
test ebx ebx +
jz loc_4328AE  +
push esi  +
push ebx  +
call sub_4327EC  +
mov dword ptr [ebx+6Ch] 1 +
mov ebx [ebx+5Ch] +
add esp 8 +
test ebx ebx +
jnz loc_432896  +
mov ebx dword_4CD14C +
test ebx ebx +
jz loc_4328D0  +
push esi  +
push ebx  +
call sub_4327EC  +
mov dword ptr [ebx+6Ch] 1 +
mov ebx [ebx+5Ch] +
add esp 8 +
test ebx ebx +
jnz loc_4328B8  +
push esi  +
call sub_4328DC  +
pop ecx  +
pop esi  +
pop ebx  +
retn   +
***
add esp 0FFFFFFF8h +
push ebx  +
mov ebx [ebp+arg_0] +
mov edx [ebx] +
test edx edx +
jz loc_432905  +
mov eax [edx] +
xor ecx ecx +
mov [eax+6Ch] ecx +
mov [eax+66h] cl +
xor ecx ecx +
mov [eax+7Ch] ecx +
mov [eax+78h] ecx +
mov edx [edx+4] +
test edx edx +
jnz loc_4328EC  +
xor eax eax +
xor edx edx +
mov [ebp+var_4] eax +
mov [ebp+var_8] edx +
push 70h  +
call sub_42A930  +
pop ecx  +
push ebx  +
call sub_432820  +
pop ecx  +
test eax eax +
jz loc_43293E  +
lea edx [ebp+var_4] +
lea ecx [ebp+var_8] +
push edx  +
push ecx  +
push eax  +
call sub_432944  +
add esp 0Ch +
push ebx  +
call sub_432820  +
pop ecx  +
test eax eax +
jnz loc_432922  +
pop ebx  +
pop ecx  +
pop ecx  +
pop ebp  +
retn   +
***
add esp 0FFFFFFF0h +
push ebx  +
push esi  +
push edi  +
cmp [ebp+arg_0] 0 +
mov esi [ebp+arg_4] +
jnz loc_43298C  +
push 2B6h  +
push offset a_Step1_c_10  +
push offset asc_4DA661  +
push offset stream  +
call _fprintf  +
add esp 10h +
push offset asc_4DA691  +
push offset stream  +
call _fprintf  +
add esp 8 +
push 1  +
call _exit  +
pop ecx  +
mov eax [ebp+arg_0] +
cmp byte ptr [eax+66h] 0 +
jnz loc_432D68  +
mov edx [ebp+arg_0] +
mov byte ptr [edx+66h] 1 +
mov ecx [ebp+arg_0] +
mov dword ptr [ecx+7Ch] 1 +
mov eax [esi] +
mov edx [ebp+arg_0] +
mov [edx+80h] eax +
mov ecx [esi] +
mov eax [ebp+arg_0] +
mov [eax+78h] ecx +
inc dword ptr [esi]  +
mov edx [ebp+arg_8] +
push edx  +
mov ecx [ebp+arg_0] +
push ecx  +
call sub_4327EC  +
add esp 8 +
mov eax [ebp+arg_0] +
mov eax [eax+0B4h] +
test eax eax +
jz loc_432A46  +
mov edx [eax] +
test edx edx +
jz loc_432A0C  +
mov edi edx +
mov eax [ebp+arg_8] +
push eax  +
push esi  +
push edi  +
call sub_432944  +
add esp 0Ch +
cmp dword ptr [edi+7Ch] 0 +
jz loc_432A0C  +
mov edx [edi+78h] +
mov ecx [ebp+arg_0] +
cmp edx [ecx+78h] +
jge loc_432A0C  +
mov eax [edi+78h] +
mov edx [ebp+arg_0] +
mov [edx+78h] eax +
mov ecx [ebp+arg_0] +
mov eax [ecx+0B4h] +
mov eax [eax+8] +
test eax eax +
jz loc_432A46  +
mov edi eax +
mov eax [ebp+arg_8] +
push eax  +
push esi  +
push edi  +
call sub_432944  +
add esp 0Ch +
cmp dword ptr [edi+7Ch] 0 +
jz loc_432A46  +
mov edx [edi+78h] +
mov ecx [ebp+arg_0] +
cmp edx [ecx+78h] +
jge loc_432A46  +
mov eax [edi+78h] +
mov edx [ebp+arg_0] +
mov [edx+78h] eax +
mov ecx [ebp+arg_0] +
mov ebx [ecx+94h] +
test ebx ebx +
jz loc_432ACC  +
mov eax [ebx] +
mov edx [eax+1Ch] +
cmp edx [ebp+arg_0] +
jz loc_432A93  +
push 2CCh  +
push offset a_Step1_c_11  +
push offset asc_4DA6C6  +
push offset stream  +
call _fprintf  +
add esp 10h +
push offset asc_4DA6F6  +
push offset stream  +
call _fprintf  +
add esp 8 +
push 1  +
call _exit  +
pop ecx  +
mov ecx [ebx] +
mov edi [ecx] +
cmp dword ptr [edi+6Ch] 0 +
jnz loc_432AC5  +
mov eax [ebp+arg_8] +
push eax  +
push esi  +
push edi  +
call sub_432944  +
add esp 0Ch +
cmp dword ptr [edi+7Ch] 0 +
jz loc_432AC5  +
mov edx [edi+78h] +
mov ecx [ebp+arg_0] +
cmp edx [ecx+78h] +
jge loc_432AC5  +
mov eax [edi+78h] +
mov edx [ebp+arg_0] +
mov [edx+78h] eax +
mov ebx [ebx+4] +
test ebx ebx +
jnz loc_432A53  +
mov ecx [ebp+arg_0] +
mov edx [ebp+arg_0] +
mov eax [ecx+78h] +
cmp eax [edx+80h] +
jnz loc_432D68  +
mov ecx [ebp+arg_8] +
mov eax [ecx] +
mov [ebp+var_4] eax +
mov esi eax +
test esi esi +
jnz loc_432B25  +
push 2D5h  +
push offset a_Step1_c_12  +
push offset asc_4DA72B  +
push offset stream  +
call _fprintf  +
add esp 10h +
push offset asc_4DA75B  +
push offset stream  +
call _fprintf  +
add esp 8 +
push 1  +
call _exit  +
pop ecx  +
mov edi [esi] +
cmp edi [ebp+arg_0] +
jz loc_432B75  +
xor eax eax +
mov [edi+7Ch] eax +
mov esi [esi+4] +
test esi esi +
jnz loc_432B6E  +
push 2D7h  +
push offset a_Step1_c_13  +
push offset asc_4DA790  +
push offset stream  +
call _fprintf  +
add esp 10h +
push offset asc_4DA7C0  +
push offset stream  +
call _fprintf  +
add esp 8 +
push 1  +
call _exit  +
pop ecx  +
mov edi [esi] +
cmp edi [ebp+arg_0] +
jnz loc_432B2C  +
cmp edi [ebp+arg_0] +
jz loc_432BB0  +
push 2D8h  +
push offset a_Step1_c_14  +
push offset asc_4DA7F5  +
push offset stream  +
call _fprintf  +
add esp 10h +
push offset asc_4DA825  +
push offset stream  +
call _fprintf  +
add esp 8 +
push 1  +
call _exit  +
pop ecx  +
mov eax [ebp+arg_0] +
xor edx edx +
mov [eax+7Ch] edx +
xor edx edx +
mov ecx [ebp+arg_8] +
mov eax [esi+4] +
mov [ecx] eax +
mov [esi+4] edx +
mov [ebp+var_10] 0FFFFFFFFh +
mov esi [ebp+var_4] +
test esi esi +
jz loc_432C02  +
mov eax [esi] +
mov [ebp+arg_0] eax +
mov edx [ebp+arg_0] +
mov ebx [edx+94h] +
test ebx ebx +
jz loc_432BFB  +
mov eax [ebx] +
mov edi [eax] +
mov eax [edi+6Ch] +
cmp eax [ebp+var_10] +
jle loc_432BF4  +
mov [ebp+var_10] eax +
mov ebx [ebx+4] +
test ebx ebx +
jnz loc_432BE5  +
mov esi [esi+4] +
test esi esi +
jnz loc_432BD3  +
cmp [ebp+var_4] 0 +
jnz loc_432C3E  +
push 2EBh  +
push offset a_Step1_c_15  +
push offset asc_4DA85A  +
push offset stream  +
call _fprintf  +
add esp 10h +
push offset asc_4DA88A  +
push offset stream  +
call _fprintf  +
add esp 8 +
push 1  +
call _exit  +
pop ecx  +
mov edx [ebp+var_4] +
push edx  +
call sub_432D70  +
pop ecx  +
test eax eax +
jz loc_432CA4  +
inc [ebp+var_10]  +
lea ecx [ebp+var_4] +
push ecx  +
call sub_432820  +
pop ecx  +
mov edi eax +
test edi edi +
jz loc_432D68  +
mov eax [edi+38h] +
test eax eax +
jl loc_432C6F  +
mov [edi+6Ch] eax +
jmp loc_432C75  +
mov edx [ebp+var_10] +
mov [edi+6Ch] edx +
mov ecx [edi+6Ch] +
cmp ecx dword_4D9F20 +
jle loc_432C85  +
mov eax [edi+6Ch] +
jmp loc_432C8A  +
mov eax dword_4D9F20 +
mov dword_4D9F20 eax +
lea edx [ebp+var_4] +
push edx  +
call sub_432820  +
pop ecx  +
mov edi eax +
test edi edi +
jnz loc_432C63  +
jmp loc_432D68  +
mov esi [ebp+var_4] +
test esi esi +
jz loc_432CBB  +
mov eax [esi] +
mov dword ptr [eax+6Ch] 7FFFFFFFh +
mov esi [esi+4] +
test esi esi +
jnz loc_432CAB  +
mov edx [ebp+var_4] +
xor edi edi +
xor eax eax +
mov ebx 7FFFFFFFh +
mov ecx [edx] +
mov [ebp+var_8] ecx +
mov [ebp+var_C] eax +
mov esi [ebp+var_4] +
test esi esi +
jz loc_432D50  +
mov eax [esi] +
mov [ebp+arg_0] eax +
push 1  +
push 0  +
mov edx [ebp+arg_0] +
push edx  +
call sub_432F18  +
add esp 0Ch +
cmp ebx eax +
jle loc_432CFC  +
mov ebx eax +
mov eax [ebp+arg_0] +
mov [ebp+var_8] eax +
mov esi [esi+4] +
jmp loc_432CD2  +
cmp ebx eax +
jge loc_432D05  +
mov esi [esi+4] +
jmp loc_432CD2  +
push 0  +
mov edx [ebp+arg_0] +
push edx  +
call sub_433030  +
add esp 8 +
cmp edi eax +
jge loc_432D24  +
mov edi eax +
mov eax [ebp+arg_0] +
mov [ebp+var_8] eax +
mov esi [esi+4] +
jmp loc_432CD2  +
cmp edi eax +
jle loc_432D2D  +
mov esi [esi+4] +
jmp loc_432CD2  +
push 0  +
mov edx [ebp+arg_0] +
push edx  +
call sub_432FA8  +
add esp 8 +
cmp eax [ebp+var_C] +
jle loc_432D49  +
mov [ebp+var_C] eax +
mov ecx [ebp+arg_0] +
mov [ebp+var_8] ecx +
mov esi [esi+4] +
test esi esi +
jnz loc_432CD6  +
push 0  +
mov eax [ebp+var_8] +
push eax  +
call sub_4330A8  +
add esp 8 +
lea edx [ebp+var_4] +
push edx  +
call sub_4328DC  +
pop ecx  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
push ebx  +
push esi  +
push edi  +
mov esi [ebp+arg_0] +
mov edi offset aIdStep1_cV3_11 +
test esi esi +
jnz loc_432DBE  +
push 312h  +
lea eax [edi+9BDh] +
push eax  +
lea edx [edi+997h] +
push edx  +
push offset stream  +
call _fprintf  +
add esp 10h +
lea ecx [edi+9C7h] +
push ecx  +
push offset stream  +
call _fprintf  +
add esp 8 +
push 1  +
call _exit  +
pop ecx  +
xor edx edx +
mov eax 1 +
mov ebx esi +
test ebx ebx +
jz loc_432DDD  +
inc edx  +
mov ecx [ebx] +
cmp dword ptr [ecx+38h] 0 +
jge loc_432DD6  +
xor eax eax +
mov ebx [ebx+4] +
test ebx ebx +
jnz loc_432DCB  +
test eax eax +
jz loc_432DEB  +
mov eax 1 +
jmp loc_432F10  +
dec edx  +
jnz loc_432DF8  +
mov eax 1 +
jmp loc_432F10  +
mov ebx esi +
test ebx ebx +
jz loc_432E4F  +
mov eax [ebx] +
cmp byte ptr [eax+66h] 1 +
jz loc_432E42  +
push 317h  +
lea edx [edi+0A22h] +
push edx  +
lea ecx [edi+9FCh] +
push ecx  +
push offset stream  +
call _fprintf  +
add esp 10h +
lea eax [edi+0A2Ch] +
push eax  +
push offset stream  +
call _fprintf  +
add esp 8 +
push 1  +
call _exit  +
pop ecx  +
mov edx [ebx] +
mov byte ptr [edx+66h] 0 +
mov ebx [ebx+4] +
test ebx ebx +
jnz loc_432DFE  +
mov edx 1 +
mov eax [esi] +
mov byte ptr [eax+66h] 1 +
xor edx edx +
mov ebx esi +
test ebx ebx +
jz loc_432ED7  +
mov eax [ebx] +
cmp byte ptr [eax+66h] 0 +
jz loc_432ED0  +
mov eax [eax+0B4h] +
test eax eax +
jz loc_432EA0  +
cmp dword ptr [eax+4] 0 +
jz loc_432EA0  +
mov ecx [eax+4] +
mov edi [ecx] +
cmp byte ptr [edi+66h] 0 +
jnz loc_432E86  +
inc edx  +
mov ecx [ecx+1Ch] +
cmp byte ptr [ecx+66h] 0 +
jnz loc_432E90  +
inc edx  +
mov ecx [eax+4] +
mov edi [ecx] +
mov byte ptr [edi+66h] 1 +
mov ecx [ecx+1Ch] +
mov byte ptr [ecx+66h] 1 +
test eax eax +
jz loc_432ED0  +
cmp dword ptr [eax+0Ch] 0 +
jz loc_432ED0  +
mov ecx [eax+0Ch] +
mov edi [ecx] +
cmp byte ptr [edi+66h] 0 +
jnz loc_432EB6  +
inc edx  +
mov ecx [ecx+1Ch] +
cmp byte ptr [ecx+66h] 0 +
jnz loc_432EC0  +
inc edx  +
mov ecx [eax+0Ch] +
mov edi [ecx] +
mov byte ptr [edi+66h] 1 +
mov eax [ecx+1Ch] +
mov byte ptr [eax+66h] 1 +
mov ebx [ebx+4] +
test ebx ebx +
jnz loc_432E62  +
test edx edx +
jnz loc_432E5A  +
mov eax 1 +
mov ebx esi +
test ebx ebx +
jz loc_432EFD  +
mov edx [ebx] +
cmp byte ptr [edx+66h] 0 +
jnz loc_432EF6  +
xor eax eax +
jmp loc_432EFD  +
mov ebx [ebx+4] +
test ebx ebx +
jnz loc_432EEA  +
mov ebx esi +
test ebx ebx +
jz loc_432F10  +
mov edx [ebx] +
mov byte ptr [edx+66h] 1 +
mov ebx [ebx+4] +
test ebx ebx +
jnz loc_432F03  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
push ebx  +
push esi  +
push edi  +
xor ebx ebx +
mov eax [ebp+arg_0] +
mov edi [ebp+arg_8] +
mov eax [eax+98h] +
test eax eax +
jz loc_432F4F  +
mov edx [eax] +
mov ecx [edx+1Ch] +
cmp dword ptr [ecx+6Ch] 7FFFFFFFh +
jnz loc_432F48  +
test edi edi +
jz loc_432F47  +
add ebx [edx+30h] +
jmp loc_432F48  +
inc ebx  +
mov eax [eax+4] +
test eax eax +
jnz loc_432F30  +
mov eax [ebp+arg_0] +
mov esi [eax+0B4h] +
test esi esi +
jnz loc_432F60  +
mov eax ebx +
jmp loc_432FA1  +
cmp dword ptr [esi] 0 +
jz loc_432F7E  +
mov edx [esi] +
cmp edx [ebp+arg_4] +
jz loc_432F7E  +
push edi  +
mov ecx [ebp+arg_0] +
push ecx  +
mov eax [esi] +
push eax  +
call sub_432F18  +
add esp 0Ch +
add ebx eax +
cmp dword ptr [esi+8] 0 +
jz loc_432F9F  +
mov edx [esi+8] +
cmp edx [ebp+arg_4] +
jz loc_432F9F  +
push edi  +
mov ecx [ebp+arg_0] +
push ecx  +
mov eax [esi+8] +
push eax  +
call sub_432F18  +
add esp 0Ch +
add ebx eax +
mov eax ebx +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
push ebx  +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
xor esi esi +
mov eax [edi+94h] +
test eax eax +
jz loc_43305A  +
mov edx [eax] +
mov ecx [edx] +
cmp dword ptr [ecx+6Ch] 7FFFFFFFh +
jnz loc_433053  +
inc esi  +
mov eax [eax+4] +
test eax eax +
jnz loc_433045  +
mov ebx [edi+0B4h] +
test ebx ebx +
jnz loc_433068  +
mov eax esi +
jmp loc_4330A1  +
cmp dword ptr [ebx] 0 +
jz loc_433082  +
mov edx [ebx] +
cmp edx [ebp+arg_4] +
jz loc_433082  +
push edi  +
mov ecx [ebx] +
push ecx  +
call sub_433030  +
add esp 8 +
add esi eax +
cmp dword ptr [ebx+8] 0 +
jz loc_43309F  +
mov eax [ebx+8] +
cmp eax [ebp+arg_4] +
jz loc_43309F  +
push edi  +
mov edx [ebx+8] +
push edx  +
call sub_433030  +
add esp 8 +
add esi eax +
mov eax esi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
push ebx  +
push edi  +
push ebp  +
push ecx  +
mov ebx offset aIdStep1_cV3_11 +
mov edi offset stru_4E7814 +
mov esi dword_4CD130 +
test esi esi +
jz loc_433138  +
mov byte ptr [esi+66h] 0 +
mov esi [esi+5Ch] +
test esi esi +
jnz loc_43312D  +
mov esi dword_4CD14C +
test esi esi +
jz loc_43314D  +
mov byte ptr [esi+66h] 0 +
mov esi [esi+5Ch] +
test esi esi +
jnz loc_433142  +
mov esi dword_4CD144 +
test esi esi +
jz loc_433162  +
mov byte ptr [esi+66h] 0 +
mov esi [esi+5Ch] +
test esi esi +
jnz loc_433157  +
shl dword_4D9F20 1 +
mov esi dword_4CD130 +
test esi esi +
jz loc_4331C2  +
cmp byte ptr [esi+66h] 0 +
jnz loc_433181  +
shl dword ptr [esi+6Ch] 1 +
mov byte ptr [esi+66h] 1 +
jmp loc_4331BB  +
push 37Ah  +
lea eax [ebx+0A87h] +
push eax  +
lea edx [ebx+0A61h] +
push edx  +
lea ecx [edi+30h] +
push ecx  +
call _fprintf  +
add esp 10h +
lea eax [ebx+0A91h] +
push eax  +
lea edx [edi+30h] +
push edx  +
call _fprintf  +
add esp 8 +
push 1  +
call _exit  +
pop ecx  +
mov esi [esi+5Ch] +
test esi esi +
jnz loc_433172  +
mov esi dword_4CD14C +
test esi esi +
jz loc_43321C  +
cmp byte ptr [esi+66h] 0 +
jnz loc_4331DB  +
shl dword ptr [esi+6Ch] 1 +
mov byte ptr [esi+66h] 1 +
jmp loc_433215  +
push 37Fh  +
lea eax [ebx+0AECh] +
push eax  +
lea edx [ebx+0AC6h] +
push edx  +
lea ecx [edi+30h] +
push ecx  +
call _fprintf  +
add esp 10h +
lea eax [ebx+0AF6h] +
push eax  +
lea edx [edi+30h] +
push edx  +
call _fprintf  +
add esp 8 +
push 1  +
call _exit  +
pop ecx  +
mov esi [esi+5Ch] +
test esi esi +
jnz loc_4331CC  +
mov esi dword_4CD144 +
test esi esi +
jz loc_433276  +
cmp byte ptr [esi+66h] 0 +
jnz loc_433235  +
shl dword ptr [esi+6Ch] 1 +
mov byte ptr [esi+66h] 1 +
jmp loc_43326F  +
push 384h  +
lea eax [ebx+0B51h] +
push eax  +
lea edx [ebx+0B2Bh] +
push edx  +
lea ecx [edi+30h] +
push ecx  +
call _fprintf  +
add esp 10h +
lea eax [ebx+0B5Bh] +
push eax  +
lea edx [edi+30h] +
push edx  +
call _fprintf  +
add esp 8 +
push 1  +
call _exit  +
pop ecx  +
mov esi [esi+5Ch] +
test esi esi +
jnz loc_433226  +
mov esi dword_4CD130 +
test esi esi +
jz loc_4332F5  +
mov ebx [esi+98h] +
test ebx ebx +
jz loc_4332EE  +
mov ebp [ebx+4] +
mov eax [ebx] +
cmp dword ptr [eax+2Ch] 0 +
jz loc_4332E8  +
push eax  +
call sub_420F08  +
mov edi eax +
mov eax [ebx] +
pop ecx  +
mov edx [eax+1Ch] +
mov [esp+4+var_4] edx +
mov ecx [eax] +
mov edx [ebx] +
mov eax [ecx+6Ch] +
mov ecx [edx+1Ch] +
add eax [ecx+6Ch] +
sar eax 1 +
jns loc_4332BA  +
adc eax 0 +
mov [edi+6Ch] eax +
push 0  +
mov eax [ebx] +
push eax  +
push edi  +
push esi  +
call sub_4344D8  +
add esp 10h +
push 1  +
mov edx [ebx] +
push edx  +
mov ecx [esp+0Ch+var_4] +
push ecx  +
push edi  +
call sub_4344D8  +
add esp 10h +
mov eax [ebx] +
push eax  +
call sub_420DE4  +
pop ecx  +
mov ebx ebp +
test ebx ebx +
jnz loc_43328A  +
mov esi [esi+5Ch] +
test esi esi +
jnz loc_433280  +
mov esi dword_4CD150 +
test esi esi +
jz loc_433374  +
mov ebx [esi+98h] +
test ebx ebx +
jz loc_43336D  +
mov ebp [ebx+4] +
mov eax [ebx] +
cmp dword ptr [eax+2Ch] 0 +
jz loc_433367  +
push eax  +
call sub_420F08  +
mov edi eax +
mov eax [ebx] +
pop ecx  +
mov edx [eax+1Ch] +
mov [esp+4+var_4] edx +
mov ecx [eax] +
mov edx [ebx] +
mov eax [ecx+6Ch] +
mov ecx [edx+1Ch] +
add eax [ecx+6Ch] +
sar eax 1 +
jns loc_433339  +
adc eax 0 +
mov [edi+6Ch] eax +
push 0  +
mov eax [ebx] +
push eax  +
push edi  +
push esi  +
call sub_4344D8  +
add esp 10h +
push 1  +
mov edx [ebx] +
push edx  +
mov ecx [esp+0Ch+var_4] +
push ecx  +
push edi  +
call sub_4344D8  +
add esp 10h +
mov eax [ebx] +
push eax  +
call sub_420DE4  +
pop ecx  +
mov ebx ebp +
test ebx ebx +
jnz loc_433309  +
mov esi [esi+5Ch] +
test esi esi +
jnz loc_4332FF  +
pop edx  +
pop ebp  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
xor edi edi +
mov esi 1 +
xor esi esi +
push 70h  +
call sub_42A930  +
pop ecx  +
cmp dword_4D4C40 0 +
jle loc_4333AF  +
push 1Eh  +
call sub_43FD4C  +
pop ecx  +
test eax eax +
jz loc_4333AF  +
push 74h  +
call sub_42A930  +
pop ecx  +
jmp loc_43340B  +
mov ebx dword_4CD130 +
test ebx ebx +
jz loc_4333D6  +
cmp dword ptr [ebx+0B4h] 0 +
jnz loc_4333CF  +
push 0  +
push ebx  +
call sub_433410  +
add esp 8 +
add esi eax +
mov ebx [ebx+5Ch] +
test ebx ebx +
jnz loc_4333B9  +
mov ebx dword_4CD144 +
test ebx ebx +
jz loc_4333FD  +
cmp dword ptr [ebx+0B4h] 0 +
jnz loc_4333F6  +
push 1  +
push ebx  +
call sub_433410  +
add esp 8 +
add esi eax +
mov ebx [ebx+5Ch] +
test ebx ebx +
jnz loc_4333E0  +
inc edi  +
cmp edi 32h +
jge loc_43340B  +
test esi esi +
jnz loc_433386  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
add esp 0FFFFFFF0h +
push ebx  +
push esi  +
push edi  +
mov eax [ebp+arg_0] +
cmp dword ptr [eax+38h] 0 +
jl loc_433429  +
xor eax eax +
jmp loc_433823  +
xor edx edx +
mov [ebp+var_4] edx +
mov ecx edx +
mov eax [ebp+arg_0] +
mov ebx [eax+6Ch] +
mov eax [ebp+arg_0] +
cmp dword ptr [eax+98h] 0 +
jz loc_43344E  +
mov eax [ebp+arg_0] +
cmp dword ptr [eax+94h] 0 +
jnz loc_433457  +
mov [ebp+var_C] 1 +
jmp loc_43345C  +
xor eax eax +
mov [ebp+var_C] eax +
mov eax [ebp+arg_0] +
mov eax [eax+94h] +
test eax eax +
jz loc_433494  +
mov esi [eax] +
inc edx  +
add ecx [esi+30h] +
mov esi [esi] +
cmp ebx [esi+6Ch] +
jz loc_43348D  +
mov edi [eax] +
mov esi [eax] +
mov edi [edi] +
mov esi [esi+30h] +
mov edi [edi+6Ch] +
sub edi ebx +
add edi [ebp+var_C] +
imul esi edi +
add [ebp+var_4] esi +
mov eax [eax+4] +
test eax eax +
jnz loc_433469  +
mov eax [ebp+arg_0] +
mov eax [eax+98h] +
test eax eax +
jz loc_4334CE  +
mov esi [eax] +
inc edx  +
add ecx [esi+30h] +
mov esi [esi+1Ch] +
cmp ebx [esi+6Ch] +
jz loc_4334C7  +
mov edi [eax] +
mov esi [eax] +
mov edi [edi+1Ch] +
mov esi [esi+30h] +
mov edi [edi+6Ch] +
sub edi ebx +
sub edi [ebp+var_C] +
imul esi edi +
add [ebp+var_4] esi +
mov eax [eax+4] +
test eax eax +
jnz loc_4334A1  +
test edx edx +
jnz loc_4334E1  +
mov eax [ebp+arg_0] +
xor edx edx +
mov [eax+6Ch] edx +
xor eax eax +
jmp loc_433823  +
test ecx ecx +
jnz loc_4334EC  +
xor eax eax +
jmp loc_433823  +
xor edx edx +
mov [ebp+var_8] edx +
mov eax [ebp+var_4] +
cdq   +
idiv  ecx +
mov esi eax +
cmp esi 0FFFFFFFEh +
jg loc_433509  +
mov [ebp+var_8] 1 +
add ebx esi +
jmp loc_433516  +
test esi esi +
jle loc_433516  +
mov [ebp+var_8] 1 +
add ebx esi +
cmp [ebp+var_8] 0 +
jnz loc_433523  +
xor eax eax +
jmp loc_433823  +
mov eax dword_4D4B20 +
cmp eax 3 +
jz loc_433535  +
test eax eax +
jnz loc_43369B  +
cmp dword_4D4B2C 0 +
jz loc_433545  +
xor edx edx +
mov [ebp+var_C] edx +
jmp loc_43354C  +
mov [ebp+var_C] 1 +
mov ecx [ebp+arg_0] +
cmp ebx [ecx+6Ch] +
jle loc_4335BC  +
mov eax [ebp+arg_0] +
mov eax [eax+98h] +
test eax eax +
jz loc_433581  +
mov edx [eax] +
mov ecx [edx+1Ch] +
mov edx [ecx+6Ch] +
mov ecx [ebp+arg_0] +
cmp edx [ecx+6Ch] +
jle loc_43357A  +
cmp edx ebx +
jg loc_43357A  +
mov ebx edx +
sub ebx [ebp+var_C] +
mov eax [eax+4] +
test eax eax +
jnz loc_433561  +
mov eax [ebp+arg_0] +
mov eax [eax+94h] +
test eax eax +
jz loc_4335AD  +
mov edx [eax] +
mov ecx [edx] +
mov edx [ecx+6Ch] +
mov ecx [ebp+arg_0] +
cmp edx [ecx+6Ch] +
jle loc_4335A6  +
cmp edx ebx +
jg loc_4335A6  +
mov ebx edx +
sub ebx [ebp+var_C] +
mov eax [eax+4] +
test eax eax +
jnz loc_43358E  +
mov eax [ebp+arg_0] +
cmp ebx [eax+6Ch] +
jg loc_4335BC  +
xor eax eax +
jmp loc_433823  +
mov edx [ebp+arg_0] +
cmp ebx [edx+6Ch] +
jge loc_43362C  +
mov ecx [ebp+arg_0] +
mov eax [ecx+98h] +
test eax eax +
jz loc_4335F1  +
mov edx [eax] +
mov ecx [edx+1Ch] +
mov edx [ecx+6Ch] +
mov ecx [ebp+arg_0] +
cmp edx [ecx+6Ch] +
jge loc_4335EA  +
cmp edx ebx +
jl loc_4335EA  +
mov ebx edx +
add ebx [ebp+var_C] +
mov eax [eax+4] +
test eax eax +
jnz loc_4335D1  +
mov eax [ebp+arg_0] +
mov eax [eax+94h] +
test eax eax +
jz loc_43361D  +
mov edx [eax] +
mov ecx [edx] +
mov edx [ecx+6Ch] +
mov ecx [ebp+arg_0] +
cmp edx [ecx+6Ch] +
jge loc_433616  +
cmp edx ebx +
jl loc_433616  +
mov ebx edx +
add ebx [ebp+var_C] +
mov eax [eax+4] +
test eax eax +
jnz loc_4335FE  +
mov eax [ebp+arg_0] +
cmp ebx [eax+6Ch] +
jl loc_43362C  +
xor eax eax +
jmp loc_433823  +
mov edx [ebp+arg_0] +
mov eax [edx+94h] +
test eax eax +
jz loc_433662  +
mov edx [eax] +
cmp byte ptr [edx+42h] 52h +
jz loc_43365B  +
mov ecx [eax] +
mov edx [ecx] +
mov edx [edx+6Ch] +
cmp ebx edx +
jge loc_43365B  +
mov ecx [ebp+arg_0] +
cmp edx [ecx+6Ch] +
jg loc_43365B  +
xor eax eax +
jmp loc_433823  +
mov eax [eax+4] +
test eax eax +
jnz loc_433639  +
mov eax [ebp+arg_0] +
mov eax [eax+98h] +
test eax eax +
jz loc_4336E4  +
mov edx [eax] +
cmp byte ptr [edx+42h] 52h +
jz loc_433692  +
mov ecx [eax] +
mov edx [ecx+1Ch] +
mov edx [edx+6Ch] +
cmp ebx edx +
jle loc_433692  +
mov ecx [ebp+arg_0] +
cmp edx [ecx+6Ch] +
jl loc_433692  +
xor eax eax +
jmp loc_433823  +
mov eax [eax+4] +
test eax eax +
jnz loc_43366F  +
jmp loc_4336E4  +
mov eax [ebp+arg_0] +
mov eax [eax+94h] +
test eax eax +
jz loc_4336BF  +
mov edx [eax] +
mov ecx [edx] +
cmp ebx [ecx+6Ch] +
jnz loc_4336B8  +
xor eax eax +
jmp loc_433823  +
mov eax [eax+4] +
test eax eax +
jnz loc_4336A8  +
mov edx [ebp+arg_0] +
mov eax [edx+98h] +
test eax eax +
jz loc_4336E4  +
mov edx [eax] +
mov ecx [edx+1Ch] +
cmp ebx [ecx+6Ch] +
jnz loc_4336DD  +
xor eax eax +
jmp loc_433823  +
mov eax [eax+4] +
test eax eax +
jnz loc_4336CC  +
xor edx edx +
mov [ebp+var_C] edx +
mov ecx [ebp+arg_0] +
mov eax [ecx+94h] +
test eax eax +
jz loc_43376C  +
mov edx [eax] +
mov ecx [edx] +
cmp ebx [ecx+6Ch] +
jnz loc_433765  +
inc [ebp+var_C]  +
cmp dword ptr [ecx+0B4h] 0 +
jz loc_433712  +
xor eax eax +
jmp loc_433823  +
xor edx edx +
mov [ebp+var_10] edx +
mov edx [ecx+94h] +
test edx edx +
jz loc_433737  +
mov esi [ecx+6Ch] +
mov edi [edx] +
mov edi [edi] +
cmp esi [edi+6Ch] +
jnz loc_433730  +
inc [ebp+var_10]  +
mov edx [edx+4] +
test edx edx +
jnz loc_433721  +
mov edx [ecx+98h] +
test edx edx +
jz loc_433758  +
mov esi [ecx+6Ch] +
mov edi [edx] +
mov edi [edi+1Ch] +
cmp esi [edi+6Ch] +
jnz loc_433751  +
inc [ebp+var_10]  +
mov edx [edx+4] +
test edx edx +
jnz loc_433741  +
cmp [ebp+var_10] 1 +
jle loc_433765  +
xor eax eax +
jmp loc_433823  +
mov eax [eax+4] +
test eax eax +
jnz loc_4336F6  +
mov edx [ebp+arg_0] +
mov eax [edx+98h] +
test eax eax +
jz loc_4337ED  +
mov edx [eax] +
mov ecx [edx+1Ch] +
cmp ebx [ecx+6Ch] +
jnz loc_4337E6  +
inc [ebp+var_C]  +
cmp dword ptr [ecx+0B4h] 0 +
jz loc_433796  +
xor eax eax +
jmp loc_433823  +
xor edx edx +
mov [ebp+var_10] edx +
mov edx [ecx+94h] +
test edx edx +
jz loc_4337BB  +
mov esi [ecx+6Ch] +
mov edi [edx] +
mov edi [edi] +
cmp esi [edi+6Ch] +
jnz loc_4337B4  +
inc [ebp+var_10]  +
mov edx [edx+4] +
test edx edx +
jnz loc_4337A5  +
mov edx [ecx+98h] +
test edx edx +
jz loc_4337DC  +
mov esi [ecx+6Ch] +
mov edi [edx] +
mov edi [edi+1Ch] +
cmp esi [edi+6Ch] +
jnz loc_4337D5  +
inc [ebp+var_10]  +
mov edx [edx+4] +
test edx edx +
jnz loc_4337C5  +
cmp [ebp+var_10] 1 +
jle loc_4337E6  +
xor eax eax +
jmp loc_433823  +
mov eax [eax+4] +
test eax eax +
jnz loc_433779  +
cmp [ebp+var_C] 2 +
jle loc_4337F7  +
xor eax eax +
jmp loc_433823  +
test ebx ebx +
jge loc_4337FF  +
xor eax eax +
jmp loc_433823  +
cmp ebx dword_4D9F20 +
jle loc_43380B  +
xor eax eax +
jmp loc_433823  +
mov edx [ebp+arg_0] +
cmp ebx [edx+6Ch] +
jz loc_43381A  +
mov [ebp+var_8] 1 +
mov ecx [ebp+arg_0] +
mov [ecx+6Ch] ebx +
mov eax [ebp+var_8] +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
push edi  +
mov edi offset dword_4D9F1C +
mov ebx dword_4CD130 +
test ebx ebx +
jz loc_4338A3  +
mov esi [ebx+6Ch] +
cmp esi dword_4D9F20 +
jle loc_43387F  +
push 43Dh  +
push offset a_Step1_c_16  +
push offset asc_4DAAB8  +
push offset stream  +
call _fprintf  +
add esp 10h +
push offset asc_4DAAE8  +
push offset stream  +
call _fprintf  +
add esp 8 +
push 1  +
call _exit  +
pop ecx  +
call sub_404A1C  +
mov edx esi +
shl edx 3 +
sub edx esi +
mov ecx [edi] +
mov ecx [ecx+edx*4+14h] +
mov [eax+4] ecx +
mov ecx [edi] +
mov [ecx+edx*4+14h] eax +
mov [eax] ebx +
mov ebx [ebx+5Ch] +
test ebx ebx +
jnz loc_43383E  +
mov ebx dword_4CD144 +
test ebx ebx +
jz loc_433914  +
mov esi [ebx+6Ch] +
mov eax dword_4D9F20 +
inc eax  +
cmp esi eax +
jle loc_4338F0  +
push 441h  +
push offset a_Step1_c_17  +
push offset asc_4DAB1D  +
push offset stream  +
call _fprintf  +
add esp 10h +
push offset asc_4DAB4D  +
push offset stream  +
call _fprintf  +
add esp 8 +
push 1  +
call _exit  +
pop ecx  +
call sub_404A1C  +
mov edx esi +
shl edx 3 +
sub edx esi +
mov ecx [edi] +
mov ecx [ecx+edx*4+14h] +
mov [eax+4] ecx +
mov ecx [edi] +
mov [ecx+edx*4+14h] eax +
mov [eax] ebx +
mov ebx [ebx+5Ch] +
test ebx ebx +
jnz loc_4338AD  +
mov ebx dword_4CD14C +
test ebx ebx +
jz loc_433985  +
mov esi [ebx+6Ch] +
mov eax dword_4D9F20 +
inc eax  +
cmp esi eax +
jle loc_433961  +
push 445h  +
push offset a_Step1_c_18  +
push offset asc_4DAB82  +
push offset stream  +
call _fprintf  +
add esp 10h +
push offset asc_4DABB2  +
push offset stream  +
call _fprintf  +
add esp 8 +
push 1  +
call _exit  +
pop ecx  +
call sub_404A1C  +
mov edx esi +
shl edx 3 +
sub edx esi +
mov ecx [edi] +
mov ecx [ecx+edx*4+14h] +
mov [eax+4] ecx +
mov ecx [edi] +
mov [ecx+edx*4+14h] eax +
mov [eax] ebx +
mov ebx [ebx+5Ch] +
test ebx ebx +
jnz loc_43391E  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
push ebp  +
push ecx  +
xor eax eax +
mov dword_4EC338 eax +
mov dword_4EC334 eax +
xor ebp ebp +
jmp loc_433B7E  +
mov eax ebp +
shl eax 3 +
sub eax ebp +
mov edx dword_4D9F1C +
mov edi [edx+eax*4+14h] +
test edi edi +
jz loc_4339C6  +
mov eax [edi] +
mov byte ptr [eax+66h] 0 +
mov edi [edi+4] +
test edi edi +
jnz loc_4339B9  +
mov eax ebp +
shl eax 3 +
sub eax ebp +
mov edx dword_4D9F1C +
mov edi [edx+eax*4+14h] +
mov edx dword_4D9F1C +
cmp dword ptr [edx+eax*4+10h] 0 +
jz loc_433A1A  +
push 454h  +
push offset a_Step1_c_19  +
push offset asc_4DABE7  +
push offset stream  +
call _fprintf  +
add esp 10h +
push offset asc_4DAC17  +
push offset stream  +
call _fprintf  +
add esp 8 +
push 1  +
call _exit  +
pop ecx  +
test edi edi +
jz loc_433B7D  +
mov esi [edi] +
xor eax eax +
mov [esp+4+var_4] eax +
xor ebx ebx +
mov eax [esi+0B4h] +
test eax eax +
jz loc_433A8F  +
cmp dword ptr [eax+4] 0 +
jz loc_433A4A  +
mov edx [eax+4] +
mov ecx [edx+1Ch] +
cmp ecx [eax] +
jz loc_433A4A  +
mov ebx 1 +
cmp dword ptr [eax+0Ch] 0 +
jz loc_433A60  +
mov edx [eax+0Ch] +
mov ecx [edx+1Ch] +
cmp ecx [eax+8] +
jz loc_433A60  +
mov ebx 1 +
cmp dword ptr [eax+4] 0 +
jz loc_433A77  +
mov edx [eax+4] +
mov ecx [edx+1Ch] +
cmp ecx [eax] +
jnz loc_433A77  +
mov [esp+4+var_4] 1 +
cmp dword ptr [eax+0Ch] 0 +
jz loc_433A8F  +
mov edx [eax+0Ch] +
mov ecx [edx+1Ch] +
cmp ecx [eax+8] +
jnz loc_433A8F  +
mov [esp+4+var_4] 1 +
cmp [esp+4+var_4] 0 +
jz loc_433AAD  +
test ebx ebx +
jnz loc_433AAD  +
mov eax [edi] +
cmp byte ptr [eax+66h] 0 +
jnz loc_433AAD  +
push 0  +
push esi  +
push esi  +
call sub_433B94  +
add esp 0Ch +
test ebx ebx +
jnz loc_433ADE  +
mov eax [edi] +
cmp byte ptr [eax+66h] 0 +
jnz loc_433ADE  +
call sub_404A1C  +
mov edx ebp +
shl edx 3 +
sub edx ebp +
mov ecx dword_4D9F1C +
mov ecx [ecx+edx*4+10h] +
mov [eax+4] ecx +
mov ecx dword_4D9F1C +
mov [ecx+edx*4+10h] eax +
mov [eax] esi +
mov ebx [esi+98h] +
test ebx ebx +
jz loc_433B35  +
inc dword ptr [esi+88h]  +
mov eax [ebx] +
mov edx [eax+1Ch] +
cmp ebp [edx+6Ch] +
jle loc_433B2E  +
push 465h  +
push offset a_Step1_c_20  +
push offset asc_4DAC4C  +
push offset stream  +
call _fprintf  +
add esp 10h +
push offset asc_4DAC7C  +
push offset stream  +
call _fprintf  +
add esp 8 +
push 1  +
call _exit  +
pop ecx  +
mov ebx [ebx+4] +
test ebx ebx +
jnz loc_433AE8  +
mov ebx [esi+94h] +
test ebx ebx +
jz loc_433B4C  +
inc dword ptr [esi+84h]  +
mov ebx [ebx+4] +
test ebx ebx +
jnz loc_433B3F  +
mov eax [esi+88h] +
cmp eax dword_4EC338 +
jle loc_433B5F  +
mov dword_4EC338 eax +
mov eax [esi+84h] +
cmp eax dword_4EC334 +
jle loc_433B72  +
mov dword_4EC334 eax +
mov edi [edi+4] +
test edi edi +
jnz loc_433A22  +
inc ebp  +
mov edx dword_4D9F20 +
inc edx  +
cmp ebp edx +
jle loc_4339A4  +
pop edx  +
pop ebp  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_4] +
mov esi [ebp+arg_0] +
cmp edi esi +
jz loc_433BA8  +
mov byte ptr [edi+66h] 1 +
cmp edi esi +
jnz loc_433BC4  +
mov eax [edi+98h] +
mov [edi+0A0h] eax +
mov edx [esi+94h] +
mov [esi+9Ch] edx +
mov ebx [edi+98h] +
cmp edi esi +
jnz loc_433BD6  +
xor eax eax +
mov [esi+98h] eax +
test ebx ebx +
jz loc_433BF1  +
mov edx [ebx] +
push edx  +
push esi  +
call sub_404F34  +
add esp 8 +
mov ecx [ebx] +
mov [ecx] esi +
mov ebx [ebx+4] +
test ebx ebx +
jnz loc_433BDA  +
mov ebx [edi+94h] +
cmp edi esi +
jnz loc_433C03  +
xor eax eax +
mov [esi+94h] eax +
test ebx ebx +
jz loc_433C1F  +
mov edx [ebx] +
push edx  +
push esi  +
call sub_404F10  +
add esp 8 +
mov ecx [ebx] +
mov [ecx+1Ch] esi +
mov ebx [ebx+4] +
test ebx ebx +
jnz loc_433C07  +
mov ebx [edi+0B4h] +
test ebx ebx +
jz loc_433C56  +
mov eax [ebx] +
test eax eax +
jz loc_433C3F  +
cmp eax [ebp+arg_8] +
jz loc_433C3F  +
push edi  +
push eax  +
push esi  +
call sub_433B94  +
add esp 0Ch +
mov eax [ebx+8] +
test eax eax +
jz loc_433C56  +
cmp eax [ebp+arg_8] +
jz loc_433C56  +
push edi  +
push eax  +
push esi  +
call sub_433B94  +
add esp 0Ch +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
push edi  +
add esp 0FFFFFFE8h +
push ebx  +
push esi  +
push edi  +
cmp [ebp+arg_0] 0 +
mov ebx [ebp+arg_4] +
jnz loc_433F58  +
push 4C0h  +
push offset a_Step1_c_22  +
push offset asc_4DAD16  +
push offset stream  +
call _fprintf  +
add esp 10h +
push offset asc_4DAD46  +
push offset stream  +
call _fprintf  +
add esp 8 +
push 1  +
call _exit  +
pop ecx  +
test ebx ebx +
jnz loc_433F92  +
push 4C0h  +
push offset a_Step1_c_23  +
push offset asc_4DAD7B  +
push offset stream  +
call _fprintf  +
add esp 10h +
push offset asc_4DADAB  +
push offset stream  +
call _fprintf  +
add esp 8 +
push 1  +
call _exit  +
pop ecx  +
cmp dword ptr [ebx] 0 +
jnz loc_433FCD  +
push 4C1h  +
push offset a_Step1_c_24  +
push offset asc_4DADE0  +
push offset stream  +
call _fprintf  +
add esp 10h +
push offset asc_4DAE10  +
push offset stream  +
call _fprintf  +
add esp 8 +
push 1  +
call _exit  +
pop ecx  +
mov eax [ebp+arg_0] +
mov edx [eax+6Ch] +
cmp edx [ebp+arg_8] +
jz loc_43400E  +
push 4C1h  +
push offset a_Step1_c_25  +
push offset asc_4DAE45  +
push offset stream  +
call _fprintf  +
add esp 10h +
push offset asc_4DAE75  +
push offset stream  +
call _fprintf  +
add esp 8 +
push 1  +
call _exit  +
pop ecx  +
mov ecx [ebx] +
mov eax [ecx] +
cmp eax [ebp+arg_0] +
jz loc_43404D  +
push 4C3h  +
push offset a_Step1_c_26  +
push offset asc_4DAEAA  +
push offset stream  +
call _fprintf  +
add esp 10h +
push offset asc_4DAEDA  +
push offset stream  +
call _fprintf  +
add esp 8 +
push 1  +
call _exit  +
pop ecx  +
mov eax [ebx] +
mov edx [eax+1Ch] +
mov ecx [edx+6Ch] +
sub ecx [ebp+arg_8] +
mov [ebp+var_4] ecx +
cmp [ebp+var_4] 0 +
jge loc_434081  +
push eax  +
call sub_43446C  +
pop ecx  +
mov esi eax +
mov eax [esi] +
mov eax [eax] +
mov edx [eax+6Ch] +
push edx  +
push esi  +
push eax  +
call sub_433F10  +
add esp 0Ch +
jmp loc_434463  +
cmp [ebp+var_4] 0 +
jnz loc_4343A5  +
mov eax [ebx] +
cmp byte ptr [eax+42h] 52h +
jnz loc_4340B3  +
push eax  +
call sub_43446C  +
pop ecx  +
mov esi eax +
mov eax [esi] +
mov eax [eax] +
mov edx [eax+6Ch] +
push edx  +
push esi  +
push eax  +
call sub_433F10  +
add esp 0Ch +
jmp loc_434463  +
mov eax [ebx] +
mov edx [eax+1Ch] +
cmp edx [eax] +
jnz loc_4341DA  +
cmp edx [ebp+arg_0] +
jz loc_4340FB  +
push 4D5h  +
push offset a_Step1_c_27  +
push offset asc_4DAF0F  +
push offset stream  +
call _fprintf  +
add esp 10h +
push offset asc_4DAF3F  +
push offset stream  +
call _fprintf  +
add esp 8 +
push 1  +
call _exit  +
pop ecx  +
mov ecx [ebp+arg_8] +
cmp ecx dword_4D9F20 +
jle loc_43413C  +
push 4D6h  +
push offset a_Step1_c_28  +
push offset asc_4DAF74  +
push offset stream  +
call _fprintf  +
add esp 10h +
push offset asc_4DAFA4  +
push offset stream  +
call _fprintf  +
add esp 8 +
push 1  +
call _exit  +
pop ecx  +
mov esi [ebp+arg_8] +
inc esi  +
push esi  +
call sub_4345B8  +
pop ecx  +
mov edi eax +
push esi  +
call sub_4345B8  +
pop ecx  +
mov [ebp+var_C] eax +
mov eax [ebx] +
mov ecx [ebp+var_C] +
mov edx [eax+34h] +
mov [ecx+3Ch] edx +
mov [edi+3Ch] edx +
push 0  +
mov eax [ebx] +
push eax  +
push edi  +
mov ecx [ebp+arg_0] +
push ecx  +
call sub_4344D8  +
add esp 10h +
push 2  +
mov eax [ebx] +
push eax  +
mov edx [ebp+var_C] +
push edx  +
push edi  +
call sub_4344D8  +
add esp 10h +
mov edi eax +
push 1  +
mov ecx [ebx] +
push ecx  +
mov eax [ebp+arg_0] +
push eax  +
mov edx [ebp+var_C] +
push edx  +
call sub_4344D8  +
mov edx [ebx] +
mov esi eax +
mov eax [edi] +
add esp 10h +
mov ecx [edx+2Ch] +
mov [eax+2Ch] ecx +
mov edx [edi] +
mov edx [edx] +
mov ecx [edx+6Ch] +
push ecx  +
push edi  +
push edx  +
call sub_433F10  +
add esp 0Ch +
mov eax [esi] +
mov eax [eax] +
mov edx [eax+6Ch] +
push edx  +
push esi  +
push eax  +
call sub_433F10  +
add esp 0Ch +
mov ecx [ebx] +
push ecx  +
call sub_420DE4  +
pop ecx  +
jmp loc_434463  +
mov eax [ebp+arg_0] +
mov esi [eax+0B4h] +
mov eax [ebx] +
mov edx [eax+1Ch] +
mov ecx [edx+0B4h] +
mov [ebp+var_10] ecx +
mov [ebp+var_14] 1 +
test esi esi +
jz loc_43420C  +
cmp dword ptr [esi] 0 +
jz loc_43420C  +
cmp dword ptr [esi+8] 0 +
jz loc_43420C  +
xor eax eax +
mov [ebp+var_14] eax +
cmp [ebp+var_10] 0 +
jz loc_434228  +
mov edx [ebp+var_10] +
cmp dword ptr [edx] 0 +
jz loc_434228  +
mov ecx [ebp+var_10] +
cmp dword ptr [ecx+8] 0 +
jz loc_434228  +
xor eax eax +
mov [ebp+var_14] eax +
mov eax [ebx] +
mov edx [eax] +
push edx  +
push 0  +
mov ecx [eax+1Ch] +
push ecx  +
call sub_431DCC  +
add esp 0Ch +
test eax eax +
jz loc_434244  +
xor eax eax +
mov [ebp+var_14] eax +
cmp [ebp+var_14] 0 +
jz loc_4342D4  +
test esi esi +
jnz loc_43426C  +
mov edx [ebp+arg_0] +
push edx  +
call sub_404F88  +
mov esi eax +
mov eax [ebx] +
pop ecx  +
mov edx [eax+1Ch] +
mov [esi] edx +
mov ecx [ebx] +
mov [esi+4] ecx +
jmp loc_43427F  +
cmp dword ptr [esi+8] 0 +
jnz loc_43427F  +
mov eax [ebx] +
mov edx [eax+1Ch] +
mov [esi+8] edx +
mov ecx [ebx] +
mov [esi+0Ch] ecx +
cmp [ebp+var_10] 0 +
jnz loc_4342A6  +
mov eax [ebx] +
mov edx [eax+1Ch] +
push edx  +
call sub_404F88  +
pop ecx  +
mov [ebp+var_10] eax +
mov ecx [ebp+var_10] +
mov eax [ebp+arg_0] +
mov [ecx] eax +
mov edx [ebp+var_10] +
mov ecx [ebx] +
mov [edx+4] ecx +
jmp loc_4342C0  +
mov eax [ebp+var_10] +
cmp dword ptr [eax+8] 0 +
jnz loc_4342C0  +
mov edx [ebp+var_10] +
mov ecx [ebp+arg_0] +
mov [edx+8] ecx +
mov eax [ebp+var_10] +
mov edx [ebx] +
mov [eax+0Ch] edx +
mov ecx [ebx] +
push ecx  +
call sub_420DE4  +
pop ecx  +
mov eax [ebx] +
mov byte ptr [eax+43h] 0 +
jmp loc_434463  +
mov edx [ebp+arg_8] +
cmp edx dword_4D9F20 +
jg loc_4342EE  +
mov ecx [ebp+arg_8] +
inc ecx  +
push ecx  +
call sub_4345B8  +
pop ecx  +
mov edi eax +
jmp loc_434339  +
cmp [ebp+arg_8] 0 +
jle loc_434303  +
mov eax [ebp+arg_8] +
dec eax  +
push eax  +
call sub_4345B8  +
pop ecx  +
mov edi eax +
jmp loc_434339  +
push 505h  +
push offset a_Step1_c_29  +
push offset asc_4DAFD9  +
push offset stream  +
call _fprintf  +
add esp 10h +
push offset asc_4DB009  +
push offset stream  +
call _fprintf  +
add esp 8 +
push 1  +
call _exit  +
pop ecx  +
mov eax [ebx] +
mov edx [eax+34h] +
mov [edi+3Ch] edx +
push 0  +
mov ecx [ebx] +
push ecx  +
push edi  +
mov eax [ebp+arg_0] +
push eax  +
call sub_4344D8  +
add esp 10h +
mov esi eax +
push 1  +
mov eax [ebx] +
push eax  +
mov edx [eax+1Ch] +
push edx  +
push edi  +
call sub_4344D8  +
mov edi eax +
mov ecx [ebx] +
add esp 10h +
mov edx [edi] +
mov eax [ecx+2Ch] +
mov [edx+2Ch] eax +
mov ecx [esi] +
mov eax [ecx] +
mov edx [eax+6Ch] +
push edx  +
push esi  +
push eax  +
call sub_433F10  +
add esp 0Ch +
mov ecx [edi] +
mov eax [ecx] +
mov edx [eax+6Ch] +
push edx  +
push edi  +
push eax  +
call sub_433F10  +
add esp 0Ch +
mov ecx [ebx] +
push ecx  +
call sub_420DE4  +
pop ecx  +
jmp loc_434463  +
cmp [ebp+var_4] 1 +
jz loc_434463  +
cmp [ebp+var_4] 1 +
jle loc_434463  +
mov edi [ebp+arg_0] +
xor eax eax +
mov [ebp+var_18] eax +
mov esi eax +
mov [ebp+var_8] 1 +
mov eax [ebp+var_8] +
cmp eax [ebp+var_4] +
jge loc_434434  +
mov edx [ebp+arg_8] +
add edx [ebp+var_8] +
push edx  +
call sub_4345B8  +
pop ecx  +
mov [ebp+var_C] eax +
mov ecx [ebx] +
mov edx [ebp+var_C] +
mov eax [ecx+34h] +
mov [edx+3Ch] eax +
push esi  +
mov ecx [ebx] +
push ecx  +
mov eax [ebp+var_C] +
push eax  +
push edi  +
call sub_4344D8  +
mov edx [ebp+var_4] +
add esp 10h +
inc edx  +
mov esi eax +
sar edx 1 +
jns loc_43440B  +
adc edx 0 +
cmp edx [ebp+var_8] +
jnz loc_434421  +
mov ecx [ebx] +
mov edx [esi] +
mov eax [ecx+2Ch] +
mov [edx+2Ch] eax +
mov [ebp+var_18] 1 +
mov edi [ebp+var_C] +
mov esi 2 +
inc [ebp+var_8]  +
mov eax [ebp+var_8] +
cmp eax [ebp+var_4] +
jl loc_4343D2  +
push 1  +
mov edx [ebx] +
push edx  +
mov ecx [ebx] +
mov eax [ecx+1Ch] +
push eax  +
push edi  +
call sub_4344D8  +
add esp 10h +
mov esi eax +
cmp [ebp+var_18] 0 +
jnz loc_43445A  +
mov eax [ebx] +
mov ecx [esi] +
mov edx [eax+2Ch] +
mov [ecx+2Ch] edx +
mov eax [ebx] +
push eax  +
call sub_420DE4  +
pop ecx  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
push ebx  +
mov ebx [ebp+arg_0] +
push ebx  +
call sub_420DE4  +
pop ecx  +
mov eax [ebx] +
mov edx [ebx+1Ch] +
mov [ebx] edx +
mov [ebx+1Ch] eax +
cmp byte ptr [ebx+42h] 52h +
jnz loc_434490  +
mov byte ptr [ebx+42h] 55h +
jmp loc_4344A0  +
cmp byte ptr [ebx+42h] 53h +
jnz loc_43449C  +
mov byte ptr [ebx+42h] 53h +
jmp loc_4344A0  +
mov byte ptr [ebx+42h] 52h +
mov al [ebx+3Ch] +
mov dl [ebx+3Eh] +
mov [ebx+3Ch] dl +
mov [ebx+3Eh] al +
mov al [ebx+3Dh] +
mov dl [ebx+3Fh] +
mov [ebx+3Dh] dl +
mov [ebx+3Fh] al +
mov al [ebx+3Ah] +
mov dl [ebx+3Bh] +
mov [ebx+3Ah] dl +
mov [ebx+3Bh] al +
push ebx  +
call sub_420CDC  +
pop ecx  +
mov ecx [ebx] +
mov eax [ecx+98h] +
pop ebx  +
pop ebp  +
retn   +
***
push ebx  +
push esi  +
push edi  +
mov ebx [ebp+arg_8] +
mov edi [ebp+arg_0] +
mov eax [ebx+34h] +
push eax  +
movsx edx byte ptr [ebx+3Fh] +
push edx  +
movsx ecx byte ptr [ebx+3Dh] +
push ecx  +
movsx eax byte ptr [ebx+3Bh] +
push eax  +
movsx edx byte ptr [ebx+3Ah] +
push edx  +
movsx ecx byte ptr [ebx+3Eh] +
push ecx  +
movsx eax byte ptr [ebx+3Ch] +
push eax  +
movsx edx byte ptr [ebx+40h] +
push edx  +
movsx ecx byte ptr [ebx+39h] +
push ecx  +
mov eax [ebx+30h] +
push eax  +
movsx edx byte ptr [ebx+38h] +
push edx  +
movsx ecx byte ptr [ebx+2Bh] +
push ecx  +
movsx eax byte ptr [ebx+2Ah] +
push eax  +
call sub_404D84  +
add esp 34h +
mov esi eax +
mov eax [ebx+2Ch] +
mov [esi+2Ch] eax +
mov dl [ebx+41h] +
mov [esi+41h] dl +
mov [esi] edi +
mov ecx [ebp+arg_4] +
mov [esi+1Ch] ecx +
mov eax [ebp+arg_C] +
sub eax 1 +
jb loc_434550  +
jz loc_43455F  +
dec eax  +
jz loc_43456E  +
jmp loc_434588  +
mov byte ptr [esi+3Ah] 0 +
mov byte ptr [esi+3Ch] 0 +
xor edx edx +
mov [esi+2Ch] edx +
jmp loc_434588  +
mov byte ptr [esi+3Bh] 0 +
mov byte ptr [esi+3Eh] 0 +
xor ecx ecx +
mov [esi+2Ch] ecx +
jmp loc_434588  +
mov byte ptr [esi+3Ah] 0 +
mov byte ptr [esi+3Ch] 0 +
xor eax eax +
xor edx edx +
mov [esi+2Ch] eax +
mov byte ptr [esi+3Bh] 0 +
mov byte ptr [esi+3Eh] 0 +
mov [esi+2Ch] edx +
cmp byte ptr [ebx+42h] 53h +
jnz loc_434594  +
mov byte ptr [esi+42h] 55h +
jmp loc_43459A  +
mov cl [ebx+42h] +
mov [esi+42h] cl +
cmp edi [ebp+arg_4] +
jnz loc_4345A3  +
mov byte ptr [esi+42h] 53h +
push esi  +
call sub_420CDC  +
pop ecx  +
mov eax [esi] +
mov eax [eax+98h] +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
mov eax dword_4D9F20 +
inc eax  +
cmp esi eax +
jle loc_434600  +
push 55Bh  +
push offset a_Step1_c_30  +
push offset asc_4DB03E  +
push offset stream  +
call _fprintf  +
add esp 10h +
push offset asc_4DB06E  +
push offset stream  +
call _fprintf  +
add esp 8 +
push 1  +
call _exit  +
pop ecx  +
push 0FFFFFFFFh  +
push 1  +
push 1  +
mov eax dword_4EBD94 +
push eax  +
push eax  +
push eax  +
push 0FFFFFFFFh  +
push 0  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0  +
call sub_40480C  +
mov ebx eax +
xor eax eax +
add esp 2Ch +
mov dword ptr [ebx+4] offset unk_4DB0A3 +
mov dword ptr [ebx+8] offset unk_4DB0A4 +
mov [ebx+6Ch] esi +
mov dword ptr [ebx+3Ch] 0FFFFFFFFh +
mov [ebx+60h] eax +
mov edx dword_4CD14C +
mov [ebx+5Ch] edx +
mov eax dword_4CD14C +
test eax eax +
jz loc_434654  +
mov [eax+60h] ebx +
mov dword_4CD14C ebx +
inc dword_4CD12C  +
test esi esi +
jge loc_434668  +
mov eax ebx +
jmp loc_43468F  +
call sub_404A1C  +
mov edx esi +
shl edx 3 +
sub edx esi +
mov ecx dword_4D9F1C +
mov ecx [ecx+edx*4+14h] +
mov [eax+4] ecx +
mov ecx dword_4D9F1C +
mov [ecx+edx*4+14h] eax +
mov [eax] ebx +
mov eax ebx +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
push edi  +
push ebp  +
push ecx  +
xor eax eax +
mov [esp+4+var_4] eax +
jmp loc_43471A  +
mov edx [esp+4+var_4] +
mov ecx edx +
shl edx 3 +
sub edx ecx +
mov eax dword_4D9F1C +
mov ebp [eax+edx*4+14h] +
test ebp ebp +
jz loc_434717  +
mov edi [ebp+0] +
mov ebx [edi+98h] +
test ebx ebx +
jz loc_434710  +
mov eax [ebx] +
cmp edi [eax] +
jz loc_434700  +
push 56Fh  +
push offset a_Step1_c_31  +
push offset asc_4DB0A5  +
push offset stream  +
call _fprintf  +
add esp 10h +
push offset asc_4DB0D5  +
push offset stream  +
call _fprintf  +
add esp 8 +
push 1  +
call _exit  +
pop ecx  +
mov esi [ebx+4] +
push ebx  +
call sub_434730  +
pop ecx  +
mov ebx esi +
test ebx ebx +
jnz loc_4346C4  +
mov ebp [ebp+4] +
test ebp ebp +
jnz loc_4346B7  +
inc [esp+4+var_4]  +
mov eax [esp+4+var_4] +
cmp eax dword_4D9F20 +
jle loc_4346A0  +
pop edx  +
pop ebp  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
add esp 0FFFFFFF4h +
push ebx  +
push esi  +
push edi  +
mov eax [ebp+arg_0] +
mov eax [eax] +
mov ebx eax +
mov eax [eax] +
mov esi [eax+98h] +
test esi esi +
jz loc_4348C8  +
mov eax [esi+4] +
mov [ebp+var_4] eax +
mov eax [esi] +
cmp eax ebx +
jz loc_43476B  +
mov edx 1 +
mov [ebp+var_C] edx +
mov [ebp+var_8] edx +
mov edi edx +
jmp loc_434775  +
xor edx edx +
mov [ebp+var_C] edx +
mov [ebp+var_8] edx +
mov edi edx +
mov ecx [ebx] +
cmp ecx [eax] +
jz loc_43477D  +
xor edi edi +
mov ecx [ebx+1Ch] +
cmp ecx [eax+1Ch] +
jz loc_434787  +
xor edi edi +
mov cl [ebx+2Ah] +
cmp cl [eax+2Ah] +
jz loc_434791  +
xor edx edx +
mov cl [ebx+2Bh] +
cmp cl [eax+2Bh] +
jle loc_43479B  +
xor edx edx +
mov ecx [ebx+30h] +
cmp ecx [eax+30h] +
jle loc_4347A5  +
xor edx edx +
mov ecx [ebx+34h] +
cmp ecx [eax+34h] +
jz loc_4347AF  +
xor edx edx +
mov cl [ebx+38h] +
cmp cl [eax+38h] +
jz loc_4347B9  +
xor edx edx +
mov cl [ebx+39h] +
cmp cl [eax+39h] +
jz loc_4347C3  +
xor edx edx +
mov cl [ebx+3Ch] +
cmp cl [eax+3Ch] +
jz loc_4347D0  +
xor ecx ecx +
mov [ebp+var_8] ecx +
mov cl [ebx+3Eh] +
cmp cl [eax+3Eh] +
jz loc_4347DD  +
xor ecx ecx +
mov [ebp+var_C] ecx +
mov cl [ebx+3Ah] +
cmp cl [eax+3Ah] +
jz loc_4347EA  +
xor ecx ecx +
mov [ebp+var_8] ecx +
mov cl [ebx+3Bh] +
cmp cl [eax+3Bh] +
jz loc_4347F7  +
xor ecx ecx +
mov [ebp+var_C] ecx +
mov cl [ebx+3Dh] +
cmp cl [eax+3Dh] +
jz loc_434804  +
xor ecx ecx +
mov [ebp+var_8] ecx +
mov cl [ebx+3Fh] +
cmp cl [eax+3Fh] +
jz loc_434811  +
xor ecx ecx +
mov [ebp+var_C] ecx +
mov cl [ebx+41h] +
cmp cl [eax+41h] +
jz loc_43481B  +
xor edx edx +
test edi edi +
jz loc_434844  +
test edx edx +
jz loc_434844  +
cmp [ebp+var_8] 0 +
jz loc_434844  +
cmp [ebp+var_C] 0 +
jz loc_434844  +
cmp dword_4D4B18 0 +
jz loc_434844  +
push ebx  +
call sub_420DE4  +
pop ecx  +
jmp loc_4348C8  +
test edi edi +
jz loc_4348BD  +
mov eax [esi] +
mov eax [eax+1Ch] +
mov edx [eax+6Ch] +
push edx  +
call sub_4345B8  +
pop ecx  +
mov esi eax +
mov ecx [ebx+34h] +
mov [esi+3Ch] ecx +
push 0  +
push ebx  +
push esi  +
mov eax [ebp+arg_0] +
mov edx [eax] +
mov ecx [edx] +
push ecx  +
call sub_4344D8  +
add esp 10h +
mov edx [eax] +
mov edx [edx] +
mov ecx [edx+6Ch] +
push ecx  +
push eax  +
push edx  +
call sub_433F10  +
add esp 0Ch +
push 1  +
mov eax [ebp+arg_0] +
mov eax [eax] +
push eax  +
mov edx [eax+1Ch] +
push edx  +
push esi  +
call sub_4344D8  +
add esp 10h +
mov edx [eax] +
mov ecx [ebx+2Ch] +
mov [edx+2Ch] ecx +
mov ecx [eax] +
mov esi [ecx] +
mov ecx [esi+6Ch] +
push ecx  +
push eax  +
push esi  +
call sub_433F10  +
add esp 0Ch +
push ebx  +
call sub_420DE4  +
pop ecx  +
jmp loc_4348C8  +
mov esi [ebp+var_4] +
test esi esi +
jnz loc_434750  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
xor eax eax +
push edi  +
push ebp  +
mov esi offset dword_4EC368 +
mov edi offset dword_4EC364 +
cmp dword_4D9F1C 0 +
jnz loc_4349AA  +
push 76h  +
push offset a_Step2_c  +
push offset asc_4DB179  +
push offset stream  +
call _fprintf  +
add esp 10h +
push offset asc_4DB1A9  +
push offset stream  +
call _fprintf  +
add esp 8 +
push 1  +
call _exit  +
pop ecx  +
call sub_434BE8  +
mov eax dword_4EC360 +
add eax 2 +
cmp eax dword_4DB12C +
jle loc_434A44  +
mov eax dword_4DB128 +
test eax eax +
jz loc_4349D3  +
push eax  +
call _free  +
pop ecx  +
mov eax dword_4DB130 +
test eax eax +
jz loc_4349E3  +
push eax  +
call _free  +
pop ecx  +
mov edx dword_4EC360 +
add edx 2 +
shl edx 2 +
push edx  +
call _malloc  +
pop ecx  +
mov dword_4DB128 eax +
mov ecx dword_4EC360 +
add ecx 2 +
shl ecx 2 +
push ecx  +
call _malloc  +
pop ecx  +
mov dword_4DB130 eax +
cmp dword_4DB128 0 +
jz loc_434A25  +
cmp dword_4DB130 0 +
jnz loc_434A37  +
push offset unk_4DB1EF  +
push offset aMemoryExhaus_6  +
call sub_42A3F8  +
add esp 8 +
mov eax dword_4EC360 +
add eax 2 +
mov dword_4DB12C eax +
mov edx dword_4EC334 +
cmp edx dword_4EC338 +
jle loc_434A5A  +
mov ebx dword_4EC334 +
jmp loc_434A60  +
mov ebx dword_4EC338 +
lea ebp [ebx+2] +
cmp ebp dword_4DB124 +
jle loc_434AD8  +
mov eax dword_4DB11C +
test eax eax +
jz loc_434A7B  +
push eax  +
call _free  +
pop ecx  +
mov eax dword_4DB120 +
test eax eax +
jz loc_434A8B  +
push eax  +
call _free  +
pop ecx  +
mov edx ebp +
shl edx 2 +
push edx  +
call _malloc  +
pop ecx  +
mov dword_4DB11C eax +
shl ebp 2 +
push ebp  +
call _malloc  +
pop ecx  +
mov dword_4DB120 eax +
cmp dword_4DB11C 0 +
jz loc_434ABD  +
cmp dword_4DB120 0 +
jnz loc_434ACF  +
push offset unk_4DB201  +
push offset aMemoryExhaus_7  +
call sub_42A3F8  +
add esp 8 +
add ebx 2 +
mov dword_4DB124 ebx +
call sub_434D7C  +
call sub_434FD8  +
call sub_43504C  +
call sub_435334  +
xor ebx ebx +
jmp loc_434B0C  +
mov eax ebx +
mov edx dword_4DB114 +
shl eax 3 +
sub eax ebx +
inc ebx  +
mov ecx [edx+eax*4+8] +
mov edx dword_4D9F1C +
mov [edx+eax*4+8] ecx +
mov eax dword_4D9F20 +
inc eax  +
cmp ebx eax +
jle loc_434AF0  +
call sub_435284  +
mov [edi] eax +
call sub_4362D0  +
or ebx 0FFFFFFFFh +
xor eax eax +
mov [esi] eax +
jmp loc_434B76  +
mov edx [esi] +
cmp edx dword_4D4B3C +
jl loc_434B3F  +
push 74h  +
call sub_42A930  +
pop ecx  +
jmp loc_434B7A  +
cmp dword_4D4C40 0 +
jle loc_434B5E  +
push 3Ch  +
call sub_43FD4C  +
pop ecx  +
test eax eax +
jz loc_434B5E  +
push 74h  +
call sub_42A930  +
pop ecx  +
jmp loc_434B7A  +
mov ebx [edi] +
call sub_4362E4  +
inc dword ptr [esi]  +
mov eax [esi] +
cmp eax dword_4D4B38 +
jge loc_434B76  +
lea edx [ebx+1] +
mov [edi] edx +
cmp ebx [edi] +
jnz loc_434B2B  +
mov ebx [edi] +
test ebx ebx +
jle loc_434B88  +
push 0  +
call sub_435EC0  +
pop ecx  +
push 62h  +
call sub_42A930  +
pop ecx  +
call sub_4381E4  +
push 62h  +
call sub_42A930  +
pop ecx  +
test ebx ebx +
jle loc_434BA9  +
push 1  +
call sub_435EC0  +
pop ecx  +
cmp dword_4D4B28 0 +
jz loc_434BBB  +
test ebx ebx +
jle loc_434BBB  +
call sub_436288  +
call sub_435334  +
call sub_435284  +
mov [edi] eax +
mov eax dword_4DB114 +
push eax  +
mov edx dword_4D9F1C +
push edx  +
call sub_438088  +
add esp 8 +
call sub_4386E4  +
pop ebp  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
mov eax dword_4D9F20 +
add eax 2 +
cmp eax dword_4DB118 +
jle loc_434C50  +
mov eax dword_4DB114 +
test eax eax +
jz loc_434C0B  +
push eax  +
call _free  +
pop ecx  +
mov edx dword_4D9F20 +
add edx 2 +
mov ecx edx +
shl ecx 3 +
sub ecx edx +
shl ecx 2 +
push ecx  +
call _malloc  +
pop ecx  +
mov ebx eax +
mov dword_4DB114 ebx +
test ebx ebx +
jnz loc_434C43  +
push offset unk_4DB213  +
push offset aMemoryExhaus_8  +
call sub_42A3F8  +
add esp 8 +
mov eax dword_4D9F20 +
add eax 2 +
mov dword_4DB118 eax +
xor edx edx +
xor esi esi +
mov dword_4EC360 edx +
jmp loc_434D68  +
mov eax esi +
shl eax 3 +
sub eax esi +
mov edx dword_4DB114 +
xor ecx ecx +
mov [edx+eax*4+8] ecx +
xor ecx ecx +
mov [edx+eax*4+10h] ecx +
xor ecx ecx +
mov [edx+eax*4+14h] ecx +
xor edi edi +
mov edx dword_4D9F1C +
mov ebx [edx+eax*4+14h] +
test ebx ebx +
jz loc_434C96  +
inc edi  +
mov ebx [ebx+4] +
test ebx ebx +
jnz loc_434C8E  +
cmp edi dword_4EC360 +
jle loc_434CA4  +
mov dword_4EC360 edi +
xor edi edi +
mov eax esi +
shl eax 3 +
sub eax esi +
mov edx dword_4D9F1C +
mov ebx [edx+eax*4+10h] +
test ebx ebx +
jz loc_434CEA  +
inc edi  +
call sub_404A1C  +
mov edx esi +
shl edx 3 +
sub edx esi +
mov ecx dword_4DB114 +
mov ecx [ecx+edx*4+14h] +
mov [eax+4] ecx +
mov ecx dword_4DB114 +
mov [ecx+edx*4+14h] eax +
mov edx [ebx] +
mov [eax] edx +
mov ebx [ebx+4] +
test ebx ebx +
jnz loc_434CBB  +
mov eax esi +
shl eax 3 +
sub eax esi +
mov ecx dword_4D9F1C +
mov [ecx+eax*4] edi +
mov edx dword_4DB114 +
mov [edx+eax*4] edi +
mov ecx dword_4D9F1C +
mov cl [ecx+eax*4+18h] +
mov [edx+eax*4+18h] cl +
cmp edi dword_4EC360 +
jle loc_434D1F  +
mov dword_4EC360 edi +
mov edx dword_4D9F1C +
xor ecx ecx +
mov [edx+eax*4+14h] ecx +
mov edx dword_4D9F1C +
mov ebx [edx+eax*4+10h] +
test ebx ebx +
jz loc_434D67  +
call sub_404A1C  +
mov edx esi +
shl edx 3 +
sub edx esi +
mov ecx dword_4D9F1C +
mov ecx [ecx+edx*4+14h] +
mov [eax+4] ecx +
mov ecx dword_4D9F1C +
mov [ecx+edx*4+14h] eax +
mov edx [ebx] +
mov [eax] edx +
mov ebx [ebx+4] +
test ebx ebx +
jnz loc_434D39  +
inc esi  +
mov eax dword_4D9F20 +
inc eax  +
cmp esi eax +
jle loc_434C5F  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
push ebp  +
add esp 0FFFFFFF8h +
mov edi offset aIdStep2_cV3_12 +
mov ebp offset stru_4E7814 +
xor esi esi +
jmp loc_434E0A  +
mov eax esi +
shl eax 3 +
sub eax esi +
mov edx dword_4DB114 +
mov ebx [edx+eax*4+14h] +
test ebx ebx +
jz loc_434E09  +
mov eax [ebx] +
cmp byte ptr [eax+66h] 0 +
jz loc_434DE8  +
push 0CEh  +
lea edx [edi+0F6h] +
push edx  +
lea ecx [edi+0D0h] +
push ecx  +
lea eax [ebp+30h] +
push eax  +
call _fprintf  +
add esp 10h +
lea edx [edi+100h] +
push edx  +
lea ecx [ebp+30h] +
push ecx  +
call _fprintf  +
add esp 8 +
push 1  +
call _exit  +
pop ecx  +
mov eax [ebx] +
mov eax [eax+98h] +
test eax eax +
jz loc_434E02  +
mov edx [eax] +
xor ecx ecx +
mov [edx+44h] ecx +
mov eax [eax+4] +
test eax eax +
jnz loc_434DF4  +
mov ebx [ebx+4] +
test ebx ebx +
jnz loc_434DA6  +
inc esi  +
mov eax dword_4D9F20 +
inc eax  +
cmp esi eax +
jle loc_434D91  +
xor esi esi +
jmp loc_434E78  +
mov ecx dword_4EBDC4 +
test ecx ecx +
jl loc_434E77  +
mov eax esi +
shl eax 3 +
sub eax esi +
mov edx dword_4DB114 +
mov ebx [edx+eax*4+14h] +
test ebx ebx +
jz loc_434E72  +
mov eax [ebx] +
mov eax [eax+98h] +
test eax eax +
jz loc_434E6B  +
mov edi [eax] +
mov edx edi +
cmp ecx [edx+30h] +
jnz loc_434E64  +
mov edi [edi+1Ch] +
cmp byte ptr [edi+66h] 0 +
jnz loc_434E64  +
mov byte ptr [edi+66h] 1 +
mov dword ptr [edx+44h] 1 +
mov eax [eax+4] +
test eax eax +
jnz loc_434E47  +
mov ebx [ebx+4] +
test ebx ebx +
jnz loc_434E3B  +
dec ecx  +
test ecx ecx +
jge loc_434E26  +
inc esi  +
mov eax dword_4D9F20 +
inc eax  +
cmp esi eax +
jle loc_434E1C  +
mov esi 1 +
jmp loc_434F76  +
push 64h  +
push esi  +
call sub_437D90  +
add esp 8 +
mov edx esi +
shl edx 3 +
mov ecx dword_4DB114 +
sub edx esi +
mov dword ptr [esp+8+var_8] 9999999Ah +
mov dword ptr [esp+8+var_8+4] 3FB99999h +
mov ebx [ecx+edx*4+14h] +
test ebx ebx +
jz loc_434EDF  +
mov edi [ebx] +
push edi  +
call sub_4377D8  +
pop ecx  +
fstp  dword ptr [edi+74h] +
fld  dword ptr [edi+74h] +
fcomp  [esp+8+var_8] +
fnstsw  ax +
sahf   +
jbe loc_434ED8  +
fld  dword ptr [edi+74h] +
fstp  [esp+8+var_8] +
mov ebx [ebx+4] +
test ebx ebx +
jnz loc_434EBB  +
fld  [esp+8+var_8] +
fadd  ds:flt_434FD4 +
fstp  [esp+8+var_8] +
mov edx esi +
shl edx 3 +
sub edx esi +
mov ecx dword_4DB114 +
mov ebx [ecx+edx*4-8] +
test ebx ebx +
jz loc_434F37  +
mov eax [ebx] +
mov eax [eax+98h] +
test eax eax +
jz loc_434F30  +
mov ecx [eax] +
mov edx ecx +
cmp dword ptr [edx+44h] 0 +
jz loc_434F29  +
mov edi [ecx+1Ch] +
mov edx [ebx] +
fild  dword ptr [edx+70h] +
fld  dword ptr [edi+74h] +
fdiv  [esp+8+var_8] +
faddp st(1) st +
fstp  dword ptr [edi+74h] +
mov eax [eax+4] +
test eax eax +
jnz loc_434F0C  +
mov ebx [ebx+4] +
test ebx ebx +
jnz loc_434F00  +
mov eax esi +
shl eax 3 +
sub eax esi +
mov ecx dword_4D9F1C +
mov eax [ecx+eax*4] +
test eax eax +
jz loc_434F6E  +
mov edx esi +
mov dword_4DB110 0D3h +
shl edx 3 +
mov ecx dword_4D9F1C +
sub edx esi +
dec eax  +
push eax  +
push 0  +
call sub_437C40  +
add esp 8 +
push esi  +
call sub_437E80  +
pop ecx  +
inc esi  +
mov eax dword_4D9F20 +
inc eax  +
cmp esi eax +
jle loc_434E8C  +
xor esi esi +
jmp loc_434FAB  +
mov eax esi +
shl eax 3 +
sub eax esi +
mov edx dword_4DB114 +
mov ebx [edx+eax*4+14h] +
test ebx ebx +
jz loc_434FAA  +
mov eax [ebx] +
mov byte ptr [eax+66h] 0 +
mov ebx [ebx+4] +
test ebx ebx +
jnz loc_434F9D  +
inc esi  +
mov edx dword_4D9F20 +
inc edx  +
cmp esi edx +
jle loc_434F88  +
mov ecx dword_4DB114 +
push ecx  +
mov eax dword_4D9F1C +
push eax  +
call sub_438088  +
add esp 8 +
pop ecx  +
pop edx  +
pop ebp  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
xor eax eax +
push esi  +
push edi  +
xor esi esi +
mov dword_4EC36C eax +
jmp loc_43503D  +
mov eax esi +
shl eax 3 +
sub eax esi +
mov edx dword_4DB114 +
mov eax [edx+eax*4+14h] +
xor edi edi +
test eax eax +
jz loc_43501F  +
mov edx [eax] +
mov ecx [edx+3Ch] +
test ecx ecx +
jl loc_43500A  +
mov edi 1 +
cmp ecx dword_4EC36C +
jle loc_435018  +
mov dword_4EC36C ecx +
mov eax [eax+4] +
test eax eax +
jnz loc_434FFC  +
mov eax esi +
mov edx dword_4D9F1C +
shl eax 3 +
mov ecx edi +
sub eax esi +
inc esi  +
mov [edx+eax*4+18h] cl +
mov edx dword_4DB114 +
mov [edx+eax*4+18h] cl +
mov eax dword_4D9F20 +
inc eax  +
cmp esi eax +
jle loc_434FE5  +
pop edi  +
pop esi  +
retn   +
***
push edi  +
push ebp  +
push ecx  +
xor ebx ebx +
jmp loc_435079  +
mov eax ebx +
shl eax 3 +
sub eax ebx +
mov edx dword_4DB114 +
mov edx [edx+eax*4+14h] +
test edx edx +
jz loc_435078  +
mov eax [edx] +
xor ecx ecx +
mov [eax+74h] ecx +
mov edx [edx+4] +
test edx edx +
jnz loc_43506A  +
inc ebx  +
mov eax dword_4D9F20 +
inc eax  +
cmp ebx eax +
jle loc_435055  +
mov [esp+4+var_4] 1 +
mov esi 1 +
push 75h  +
call sub_42A930  +
pop ecx  +
mov eax dword_4D9F1C +
inc [esp+4+var_4]  +
xor esi esi +
xor edi edi +
xor ebx ebx +
lea ebp [eax+14h] +
jmp loc_4350D4  +
mov edx [ebp+0] +
test edx edx +
jz loc_4350CC  +
mov ecx [edx] +
fld  dword ptr [ecx+74h] +
fcomp  ds:flt_4351D4 +
fnstsw  ax +
sahf   +
jnz loc_4350C5  +
mov edi ecx +
jmp loc_4350CC  +
mov edx [edx+4] +
test edx edx +
jnz loc_4350B1  +
test edi edi +
jnz loc_4350DE  +
inc ebx  +
add ebp 1Ch +
mov eax dword_4D9F20 +
inc eax  +
cmp ebx eax +
jle loc_4350AA  +
test edi edi +
jz loc_435138  +
fld  dword ptr [edi+74h] +
fcomp  ds:flt_4351D4 +
fnstsw  ax +
sahf   +
jz loc_435126  +
push 10Dh  +
push offset a_Step2_c_0  +
push offset asc_4DB279  +
push offset stream  +
call _fprintf  +
add esp 10h +
push offset asc_4DB2A9  +
push offset stream  +
call _fprintf  +
add esp 8 +
push 1  +
call _exit  +
pop ecx  +
mov esi 1 +
mov eax [esp+4+var_4] +
push eax  +
push edi  +
call sub_4351D8  +
add esp 8 +
test esi esi +
jnz loc_43508F  +
xor ebx ebx +
jmp loc_4351AD  +
mov eax ebx +
shl eax 3 +
sub eax ebx +
mov edx dword_4DB114 +
mov edx [edx+eax*4+14h] +
xor eax eax +
test edx edx +
jz loc_43516E  +
mov ecx dword_4DB128 +
mov esi [edx] +
mov [ecx+eax*4] esi +
inc eax  +
mov edx [edx+4] +
test edx edx +
jnz loc_43515B  +
mov eax ebx +
shl eax 3 +
sub eax ebx +
mov edx dword_4D9F1C +
mov eax [edx+eax*4] +
test eax eax +
jz loc_4351A5  +
mov edx ebx +
mov dword_4DB110 0D3h +
shl edx 3 +
mov ecx dword_4D9F1C +
sub edx ebx +
dec eax  +
push eax  +
push 0  +
call sub_437C40  +
add esp 8 +
push ebx  +
call sub_437E80  +
pop ecx  +
inc ebx  +
mov eax dword_4D9F20 +
inc eax  +
cmp ebx eax +
jle loc_435144  +
mov edx dword_4DB114 +
push edx  +
mov ecx dword_4D9F1C +
push ecx  +
call sub_438088  +
add esp 8 +
pop edx  +
pop ebp  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
add esp 0FFFFFFECh +
push ebx  +
push esi  +
push edi  +
mov esi [ebp+arg_4] +
mov edi [ebp+arg_0] +
fld  dword ptr [edi+74h] +
fcomp  ds:flt_435280 +
fnstsw  ax +
sahf   +
jnz loc_435279  +
mov eax [edi+3Ch] +
test eax eax +
jl loc_435222  +
mov [ebp+var_4] esi +
mov edx dword_4EC36C +
fild  [ebp+var_4] +
inc edx  +
mov [ebp+var_8] edx +
fild  [ebp+var_8] +
mov [ebp+var_C] eax +
fmulp st(1) st +
fild  [ebp+var_C] +
faddp st(1) st +
fstp  dword ptr [edi+74h] +
jmp loc_43523A  +
mov [ebp+var_10] esi +
mov ecx dword_4EC36C +
fild  [ebp+var_10] +
inc ecx  +
mov [ebp+var_14] ecx +
fild  [ebp+var_14] +
fmulp st(1) st +
fstp  dword ptr [edi+74h] +
mov ebx [edi+98h] +
test ebx ebx +
jz loc_43525A  +
push esi  +
mov eax [ebx] +
mov edx [eax+1Ch] +
push edx  +
call sub_4351D8  +
add esp 8 +
mov ebx [ebx+4] +
test ebx ebx +
jnz loc_435244  +
mov ebx [edi+94h] +
test ebx ebx +
jz loc_435279  +
push esi  +
mov eax [ebx] +
mov edx [eax] +
push edx  +
call sub_4351D8  +
add esp 8 +
mov ebx [ebx+4] +
test ebx ebx +
jnz loc_435264  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
jnz loc_4352C4  +
push 128h  +
push offset a_Step2_c_1  +
push offset asc_4DB2DE  +
push offset stream  +
call _fprintf  +
add esp 10h +
push offset asc_4DB30E  +
push offset stream  +
call _fprintf  +
add esp 8 +
push 1  +
call _exit  +
pop ecx  +
xor ebx ebx +
xor edx edx +
mov eax dword_4DB114 +
add eax 8 +
jmp loc_4352D8  +
add ebx [eax] +
inc edx  +
add eax 1Ch +
cmp edx dword_4D9F20 +
jle loc_4352D2  +
mov edx dword_4D9F20 +
mov ecx edx +
shl edx 3 +
sub edx ecx +
mov eax dword_4DB114 +
cmp dword ptr [eax+edx*4+24h] 0 +
jz loc_43532F  +
push 12Ah  +
push offset a_Step2_c_2  +
push offset asc_4DB343  +
push offset stream  +
call _fprintf  +
add esp 10h +
push offset asc_4DB373  +
push offset stream  +
call _fprintf  +
add esp 8 +
push 1  +
call _exit  +
pop ecx  +
mov eax ebx +
pop ebx  +
retn   +
***
jnz loc_435374  +
push 130h  +
push offset a_Step2_c_3  +
push offset asc_4DB3A8  +
push offset stream  +
call _fprintf  +
add esp 10h +
push offset asc_4DB3D8  +
push offset stream  +
call _fprintf  +
add esp 8 +
push 1  +
call _exit  +
pop ecx  +
xor ebx ebx +
jmp loc_435391  +
push ebx  +
call sub_43539C  +
mov edx ebx +
pop ecx  +
shl edx 3 +
mov ecx dword_4DB114 +
sub edx ebx +
inc ebx  +
mov [ecx+edx*4+8] eax +
cmp ebx dword_4D9F20 +
jle loc_435378  +
pop ebx  +
retn   +
***
push ecx  +
push ebx  +
push esi  +
push edi  +
cmp dword_4DB114 0 +
jnz loc_4353E2  +
push 139h  +
push offset a_Step2_c_4  +
push offset asc_4DB40D  +
push offset stream  +
call _fprintf  +
add esp 10h +
push offset asc_4DB43D  +
push offset stream  +
call _fprintf  +
add esp 8 +
push 1  +
call _exit  +
pop ecx  +
cmp dword_4DB134 0 +
jz loc_435421  +
push 139h  +
push offset a_Step2_c_5  +
push offset asc_4DB472  +
push offset stream  +
call _fprintf  +
add esp 10h +
push offset asc_4DB4A2  +
push offset stream  +
call _fprintf  +
add esp 8 +
push 1  +
call _exit  +
pop ecx  +
cmp dword_4DB13C 0 +
jz loc_435460  +
push 13Ah  +
push offset a_Step2_c_6  +
push offset asc_4DB4D7  +
push offset stream  +
call _fprintf  +
add esp 10h +
push offset asc_4DB507  +
push offset stream  +
call _fprintf  +
add esp 8 +
push 1  +
call _exit  +
pop ecx  +
cmp [ebp+arg_0] 0 +
jge loc_43549C  +
push 13Ah  +
push offset a_Step2_c_7  +
push offset asc_4DB53C  +
push offset stream  +
call _fprintf  +
add esp 10h +
push offset asc_4DB56C  +
push offset stream  +
call _fprintf  +
add esp 8 +
push 1  +
call _exit  +
pop ecx  +
mov eax [ebp+arg_0] +
cmp eax dword_4D9F20 +
jle loc_4354DD  +
push 13Ah  +
push offset a_Step2_c_8  +
push offset asc_4DB5A1  +
push offset stream  +
call _fprintf  +
add esp 10h +
push offset asc_4DB5D1  +
push offset stream  +
call _fprintf  +
add esp 8 +
push 1  +
call _exit  +
pop ecx  +
mov edx [ebp+arg_0] +
mov ecx edx +
shl edx 3 +
sub edx ecx +
mov eax dword_4DB114 +
mov esi [eax+edx*4+14h] +
test esi esi +
jz loc_435509  +
mov eax [esi] +
mov edx [eax+98h] +
mov [eax+90h] edx +
mov esi [esi+4] +
test esi esi +
jnz loc_4354F4  +
mov ecx [ebp+arg_0] +
mov eax ecx +
shl ecx 3 +
sub ecx eax +
mov edx dword_4DB114 +
mov edi [edx+ecx*4+30h] +
test edi edi +
jz loc_435536  +
mov eax [edi] +
mov edx [eax+94h] +
mov [eax+90h] edx +
mov edi [edi+4] +
test edi edi +
jnz loc_435521  +
mov [ebp+var_4] 1 +
mov ecx [ebp+arg_0] +
mov eax ecx +
shl ecx 3 +
sub ecx eax +
mov edx dword_4DB114 +
mov esi [edx+ecx*4+14h] +
test esi esi +
jz loc_4355E8  +
mov eax [esi] +
xor edx edx +
mov [eax+8Ch] edx +
mov ecx [ebp+var_4] +
mov [eax+70h] ecx +
mov ebx [eax+98h] +
test ebx ebx +
jz loc_4355D9  +
mov eax [ebx] +
mov edx [eax+1Ch] +
cmp dword ptr [edx+90h] 0 +
jnz loc_4355B7  +
push 149h  +
push offset a_Step2_c_9  +
push offset asc_4DB606  +
push offset stream  +
call _fprintf  +
add esp 10h +
push offset asc_4DB636  +
push offset stream  +
call _fprintf  +
add esp 8 +
push 1  +
call _exit  +
pop ecx  +
mov eax [ebx] +
mov edx [eax+1Ch] +
mov edx [edx+90h] +
mov [edx] eax +
mov eax [edx+4] +
mov ecx [ebx] +
mov edx [ecx+1Ch] +
mov [edx+90h] eax +
mov ebx [ebx+4] +
test ebx ebx +
jnz loc_435573  +
mov esi [esi+4] +
add [ebp+var_4] 2 +
test esi esi +
jnz loc_435559  +
mov [ebp+var_4] 2 +
mov eax [ebp+arg_0] +
mov ecx eax +
shl eax 3 +
sub eax ecx +
mov edx dword_4DB114 +
mov edi [edx+eax*4+30h] +
test edi edi +
jz loc_435697  +
mov eax [edi] +
xor edx edx +
mov [eax+8Ch] edx +
mov ecx [ebp+var_4] +
mov [eax+70h] ecx +
mov ebx [eax+94h] +
test ebx ebx +
jz loc_435688  +
mov eax [ebx] +
mov edx [eax] +
cmp dword ptr [edx+90h] 0 +
jnz loc_435668  +
push 15Ch  +
push offset a_Step2_c_10  +
push offset asc_4DB66B  +
push offset stream  +
call _fprintf  +
add esp 10h +
push offset asc_4DB69B  +
push offset stream  +
call _fprintf  +
add esp 8 +
push 1  +
call _exit  +
pop ecx  +
mov eax [ebx] +
mov edx [eax] +
mov edx [edx+90h] +
mov [edx] eax +
mov eax [edx+4] +
mov ecx [ebx] +
mov edx [ecx] +
mov [edx+90h] eax +
mov ebx [ebx+4] +
test ebx ebx +
jnz loc_435625  +
mov edi [edi+4] +
add [ebp+var_4] 2 +
test edi edi +
jnz loc_43560B  +
xor eax eax +
xor ecx ecx +
mov dword_4EC378 eax +
mov dword_4EC370 ecx +
xor eax eax +
mov dword_4EC374 ecx +
mov dword_4DB138 eax +
mov dword_4DB134 eax +
mov eax [ebp+arg_0] +
xor edx edx +
mov ecx eax +
mov dword_4DB140 edx +
shl eax 3 +
mov dword_4DB13C edx +
sub eax ecx +
mov edx dword_4DB114 +
mov esi [edx+eax*4+14h] +
mov edx dword_4DB114 +
mov edi [edx+eax*4+30h] +
jmp loc_435706  +
test esi esi +
jz loc_4356F6  +
mov eax [esi] +
push eax  +
call sub_435818  +
pop ecx  +
mov esi [esi+4] +
test edi edi +
jz loc_435706  +
mov edx [edi] +
push edx  +
call sub_4358F8  +
pop ecx  +
mov edi [edi+4] +
test esi esi +
jnz loc_4356E6  +
test edi edi +
jnz loc_4356E6  +
cmp dword_4EC374 0 +
jz loc_43574D  +
push 16Ch  +
push offset a_Step2_c_11  +
push offset asc_4DB6D0  +
push offset stream  +
call _fprintf  +
add esp 10h +
push offset asc_4DB700  +
push offset stream  +
call _fprintf  +
add esp 8 +
push 1  +
call _exit  +
pop ecx  +
cmp dword_4EC370 0 +
jz loc_43578C  +
push 16Dh  +
push offset a_Step2_c_12  +
push offset asc_4DB735  +
push offset stream  +
call _fprintf  +
add esp 10h +
push offset asc_4DB765  +
push offset stream  +
call _fprintf  +
add esp 8 +
push 1  +
call _exit  +
pop ecx  +
cmp dword_4DB134 0 +
jz loc_4357CB  +
push 16Dh  +
push offset a_Step2_c_13  +
push offset asc_4DB79A  +
push offset stream  +
call _fprintf  +
add esp 10h +
push offset asc_4DB7CA  +
push offset stream  +
call _fprintf  +
add esp 8 +
push 1  +
call _exit  +
pop ecx  +
cmp dword_4DB13C 0 +
jz loc_43580A  +
push 16Dh  +
push offset a_Step2_c_14  +
push offset asc_4DB7FF  +
push offset stream  +
call _fprintf  +
add esp 10h +
push offset asc_4DB82F  +
push offset stream  +
call _fprintf  +
add esp 8 +
push 1  +
call _exit  +
pop ecx  +
mov eax dword_4EC378 +
pop edi  +
pop esi  +
pop ebx  +
pop ecx  +
pop ebp  +
retn   +
***
add esp 0FFFFFFF4h +
push ebx  +
push esi  +
push edi  +
mov esi [ebp+arg_0] +
test esi esi +
jnz loc_43585E  +
push 174h  +
push offset a_Step2_c_15  +
push offset asc_4DB864  +
push offset stream  +
call _fprintf  +
add esp 10h +
push offset asc_4DB894  +
push offset stream  +
call _fprintf  +
add esp 8 +
push 1  +
call _exit  +
pop ecx  +
xor eax eax +
mov [ebp+var_C] eax +
mov [ebp+var_8] eax +
mov [ebp+var_4] eax +
cmp dword ptr [esi+8Ch] 0 +
jz loc_4358B8  +
mov ebx dword_4DB13C +
test ebx ebx +
jz loc_4358A6  +
mov edi [ebx+10h] +
cmp esi [ebx] +
jnz loc_435895  +
inc [ebp+var_4]  +
mov eax [ebp+var_8] +
add [ebp+var_C] eax +
push ebx  +
call sub_435ACC  +
pop ecx  +
jmp loc_435898  +
inc [ebp+var_8]  +
cmp ebx [esi+8Ch] +
jz loc_4358A6  +
mov ebx edi +
test ebx ebx +
jnz loc_43587C  +
mov eax [ebp+var_4] +
imul  dword_4EC370 +
add eax [ebp+var_C] +
add dword_4EC378 eax +
mov ebx [esi+98h] +
test ebx ebx +
jz loc_4358EE  +
mov eax [ebx] +
mov eax [eax+1Ch] +
mov edx [eax+70h] +
cmp edx [esi+70h] +
jle loc_4358E7  +
push eax  +
call sub_435A50  +
pop ecx  +
mov ecx [ebx] +
mov eax [ecx+1Ch] +
mov edx dword_4DB138 +
mov [eax+8Ch] edx +
mov ebx [ebx+4] +
test ebx ebx +
jnz loc_4358C2  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
add esp 0FFFFFFF4h +
push ebx  +
push esi  +
push edi  +
mov esi [ebp+arg_0] +
test esi esi +
jnz loc_43593E  +
push 185h  +
push offset a_Step2_c_16  +
push offset asc_4DB8C9  +
push offset stream  +
call _fprintf  +
add esp 10h +
push offset asc_4DB8F9  +
push offset stream  +
call _fprintf  +
add esp 8 +
push 1  +
call _exit  +
pop ecx  +
xor eax eax +
mov [ebp+var_C] eax +
mov [ebp+var_8] eax +
mov [ebp+var_4] eax +
cmp dword ptr [esi+8Ch] 0 +
jz loc_435998  +
mov ebx dword_4DB134 +
test ebx ebx +
jz loc_435986  +
mov edi [ebx+10h] +
cmp esi [ebx] +
jnz loc_435975  +
inc [ebp+var_4]  +
mov eax [ebp+var_8] +
add [ebp+var_C] eax +
push ebx  +
call sub_435B88  +
pop ecx  +
jmp loc_435978  +
inc [ebp+var_8]  +
cmp ebx [esi+8Ch] +
jz loc_435986  +
mov ebx edi +
test ebx ebx +
jnz loc_43595C  +
mov eax [ebp+var_4] +
imul  dword_4EC374 +
add eax [ebp+var_C] +
add dword_4EC378 eax +
mov ebx [esi+94h] +
test ebx ebx +
jz loc_4359CC  +
mov eax [ebx] +
mov eax [eax] +
mov edx [eax+70h] +
cmp edx [esi+70h] +
jle loc_4359C5  +
push eax  +
call sub_4359D4  +
pop ecx  +
mov ecx [ebx] +
mov eax [ecx] +
mov edx dword_4DB140 +
mov [eax+8Ch] edx +
mov ebx [ebx+4] +
test ebx ebx +
jnz loc_4359A2  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
push ebx  +
mov ebx [ebp+arg_0] +
test ebx ebx +
jnz loc_435A15  +
push 196h  +
push offset a_Step2_c_17  +
push offset asc_4DB92E  +
push offset stream  +
call _fprintf  +
add esp 10h +
push offset asc_4DB95E  +
push offset stream  +
call _fprintf  +
add esp 8 +
push 1  +
call _exit  +
pop ecx  +
mov eax dword_4DB140 +
push eax  +
push ebx  +
call sub_405008  +
add esp 8 +
cmp dword_4DB13C 0 +
jnz loc_435A32  +
mov dword_4DB13C eax +
mov edx dword_4DB140 +
test edx edx +
jz loc_435A3F  +
mov [edx+10h] eax +
mov dword_4DB140 eax +
inc dword_4EC374  +
pop ebx  +
pop ebp  +
retn   +
***
push ebx  +
mov ebx [ebp+arg_0] +
test ebx ebx +
jnz loc_435A91  +
push 19Eh  +
push offset a_Step2_c_18  +
push offset asc_4DB993  +
push offset stream  +
call _fprintf  +
add esp 10h +
push offset asc_4DB9C3  +
push offset stream  +
call _fprintf  +
add esp 8 +
push 1  +
call _exit  +
pop ecx  +
mov eax dword_4DB138 +
push eax  +
push ebx  +
call sub_405008  +
add esp 8 +
cmp dword_4DB134 0 +
jnz loc_435AAE  +
mov dword_4DB134 eax +
mov edx dword_4DB138 +
test edx edx +
jz loc_435ABB  +
mov [edx+10h] eax +
mov dword_4DB138 eax +
inc dword_4EC370  +
pop ebx  +
pop ebp  +
retn   +
***
push ebx  +
push ebx  +
push ebx  +
add esp 0FFFFFFF8h +
add esp 0FFFFFFF8h +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
cmp dword_4D4B28 0 +
jz loc_435F15  +
cmp dword_4D4C40 0 +
jle loc_435EF0  +
push 3Ch  +
call sub_43FD4C  +
pop ecx  +
test eax eax +
jz loc_435EF0  +
push 74h  +
call sub_42A930  +
pop ecx  +
jmp loc_435F15  +
push 6Ch  +
call sub_42A930  +
pop ecx  +
xor ebx ebx +
jmp loc_435F0B  +
push esi  +
push ebx  +
call sub_435DB4  +
add esp 8 +
test eax eax +
jnz loc_435EFC  +
inc ebx  +
mov eax dword_4D9F20 +
inc eax  +
cmp ebx eax +
jle loc_435EFC  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
jmp loc_435F46  +
mov eax ecx +
shl eax 3 +
sub eax ecx +
mov edx dword_4DB114 +
mov eax [edx+eax*4+14h] +
xor edx edx +
test eax eax +
jz loc_435F45  +
mov ebx [eax] +
mov [ebx+70h] edx +
inc edx  +
mov eax [eax+4] +
test eax eax +
jnz loc_435F38  +
inc ecx  +
mov eax dword_4D9F20 +
inc eax  +
cmp ecx eax +
jle loc_435F21  +
pop ebx  +
retn   +
***
mov edx [ebp+arg_0] +
cmp dword ptr [edx+0B4h] 0 +
jz loc_435F6A  +
mov eax 1 +
pop ebp  +
retn   +
mov eax [edx+98h] +
test eax eax +
jnz loc_435F7B  +
mov eax 1 +
pop ebp  +
retn   +
cmp dword ptr [eax+4] 0 +
jz loc_435F88  +
mov eax 1 +
pop ebp  +
retn   +
mov eax [edx+94h] +
test eax eax +
jnz loc_435F99  +
mov eax 1 +
pop ebp  +
retn   +
cmp dword ptr [eax+4] 0 +
jz loc_435FA6  +
mov eax 1 +
pop ebp  +
retn   +
xor eax eax +
pop ebp  +
retn   +
***
push ebx  +
push esi  +
mov esi [ebp+arg_4] +
mov ebx [ebp+arg_0] +
push ebx  +
call sub_435F54  +
pop ecx  +
test eax eax +
jz loc_435FC6  +
xor eax eax +
jmp loc_43603B  +
push esi  +
call sub_435F54  +
pop ecx  +
test eax eax +
jz loc_435FD5  +
xor eax eax +
jmp loc_43603B  +
mov eax [ebx+70h] +
sub eax [esi+70h] +
mov edx eax +
imul edx eax +
dec edx  +
jz loc_435FE7  +
xor eax eax +
jmp loc_43603B  +
cmp [ebp+arg_8] 53h +
jnz loc_436005  +
mov edx [ebx+98h] +
mov ecx [edx] +
mov edx [ecx+1Ch] +
mov ecx [esi+98h] +
mov ecx [ecx] +
mov ecx [ecx+1Ch] +
jmp loc_436019  +
mov edx [ebx+94h] +
mov ecx [esi+94h] +
mov ecx [ecx] +
mov edx [edx] +
mov edx [edx] +
mov ecx [ecx] +
mov ebx [edx+70h] +
sub ebx [ecx+70h] +
imul eax ebx +
test eax eax +
jge loc_43602D  +
mov eax 1 +
jmp loc_43603B  +
mov eax [ebp+arg_8] +
push eax  +
push ecx  +
push edx  +
call sub_435FAC  +
add esp 0Ch +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
add esp 0FFFFFFF8h +
push ebx  +
push esi  +
push edi  +
mov esi [ebp+arg_4] +
mov ebx [ebp+arg_0] +
push ebx  +
call sub_435F54  +
pop ecx  +
test eax eax +
jnz loc_4361D0  +
push esi  +
call sub_435F54  +
pop ecx  +
test eax eax +
jnz loc_4361D0  +
mov eax [ebx+70h] +
sub eax [esi+70h] +
mov [ebp+var_4] eax +
mov edx [ebp+var_4] +
imul edx [ebp+var_4] +
dec edx  +
jnz loc_4361D0  +
mov ecx [esi+6Ch] +
cmp ecx [ebx+6Ch] +
jz loc_4360C2  +
push 220h  +
push offset a_Step2_c_25  +
push offset asc_4DBC56  +
push offset stream  +
call _fprintf  +
add esp 10h +
push offset asc_4DBC86  +
push offset stream  +
call _fprintf  +
add esp 8 +
push 1  +
call _exit  +
pop ecx  +
xor eax eax +
mov [ebp+var_8] eax +
mov edi eax +
mov eax [ebx+6Ch] +
mov edx eax +
shl eax 3 +
sub eax edx +
mov ecx dword_4DB114 +
mov eax [ecx+eax*4+14h] +
test eax eax +
jz loc_4360F7  +
mov edx [eax] +
cmp ebx edx +
jnz loc_4360E9  +
mov edi eax +
cmp esi edx +
jnz loc_4360F0  +
mov [ebp+var_8] eax +
mov eax [eax+4] +
test eax eax +
jnz loc_4360E1  +
test edi edi +
jnz loc_436131  +
push 224h  +
push offset a_Step2_c_26  +
push offset asc_4DBCBB  +
push offset stream  +
call _fprintf  +
add esp 10h +
push offset asc_4DBCEB  +
push offset stream  +
call _fprintf  +
add esp 8 +
push 1  +
call _exit  +
pop ecx  +
cmp [ebp+var_8] 0 +
jnz loc_43616D  +
push 224h  +
push offset a_Step2_c_27  +
push offset asc_4DBD20  +
push offset stream  +
call _fprintf  +
add esp 10h +
push offset asc_4DBD50  +
push offset stream  +
call _fprintf  +
add esp 8 +
push 1  +
call _exit  +
pop ecx  +
mov [edi] esi +
mov eax [ebp+var_8] +
mov [eax] ebx +
mov eax [ebx+70h] +
mov edx [esi+70h] +
mov [ebx+70h] edx +
mov [esi+70h] eax +
cmp [ebp+arg_8] 53h +
jnz loc_43619E  +
mov ecx [ebx+98h] +
mov edx [esi+98h] +
mov eax [ecx] +
mov ecx [edx] +
mov edx [ecx+1Ch] +
mov eax [eax+1Ch] +
jmp loc_4361B2  +
mov eax [ebx+94h] +
mov edx [esi+94h] +
mov ecx [eax] +
mov eax [ecx] +
mov ecx [edx] +
mov edx [ecx] +
mov ecx [eax+70h] +
sub ecx [edx+70h] +
mov ebx [ebp+var_4] +
imul ebx ecx +
test ebx ebx +
jl loc_4361D0  +
mov ecx [ebp+arg_8] +
push ecx  +
push edx  +
push eax  +
call sub_436040  +
add esp 0Ch +
pop edi  +
pop esi  +
pop ebx  +
pop ecx  +
pop ecx  +
pop ebp  +
retn   +
***
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov esi [edi+98h] +
test esi esi +
jz loc_436233  +
mov ebx [edi+98h] +
test ebx ebx +
jz loc_43622C  +
push 53h  +
mov eax [ebx] +
mov edx [eax+1Ch] +
push edx  +
mov ecx [esi] +
mov eax [ecx+1Ch] +
push eax  +
call sub_435FAC  +
add esp 0Ch +
test eax eax +
jz loc_436225  +
push 53h  +
mov edx [ebx] +
mov ecx [edx+1Ch] +
push ecx  +
mov eax [esi] +
mov edx [eax+1Ch] +
push edx  +
call sub_436040  +
add esp 0Ch +
mov ebx [ebx+4] +
test ebx ebx +
jnz loc_4361F5  +
mov esi [esi+4] +
test esi esi +
jnz loc_4361EB  +
mov esi [edi+94h] +
test esi esi +
jz loc_436281  +
mov ebx [edi+94h] +
test ebx ebx +
jz loc_43627A  +
push 50h  +
mov eax [ebx] +
mov edx [eax] +
push edx  +
mov ecx [esi] +
mov eax [ecx] +
push eax  +
call sub_435FAC  +
add esp 0Ch +
test eax eax +
jz loc_436273  +
push 50h  +
mov edx [ebx] +
mov ecx [edx] +
push ecx  +
mov eax [esi] +
mov edx [eax] +
push edx  +
call sub_436040  +
add esp 0Ch +
mov ebx [ebx+4] +
test ebx ebx +
jnz loc_436247  +
mov esi [esi+4] +
test esi esi +
jnz loc_43623D  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
jle loc_4362A8  +
push 3Ch  +
call sub_43FD4C  +
pop ecx  +
test eax eax +
jz loc_4362A8  +
push 74h  +
call sub_42A930  +
pop ecx  +
pop ebx  +
retn   +
push 6Ch  +
call sub_42A930  +
pop ecx  +
call sub_435F1C  +
mov ebx dword_4CD130 +
test ebx ebx +
jz loc_4362CD  +
push ebx  +
call sub_4361D8  +
pop ecx  +
mov ebx [ebx+5Ch] +
test ebx ebx +
jnz loc_4362BF  +
pop ebx  +
retn   +
***
xor eax eax +
mov dword_4EC37C eax +
mov dword_4EC380 1 +
retn   +
***
push edi  +
push ebp  +
push ecx  +
cmp dword_4DB114 0 +
jnz loc_436328  +
push 262h  +
push offset a_Step2_c_28  +
push offset asc_4DBD85  +
push offset stream  +
call _fprintf  +
add esp 10h +
push offset asc_4DBDB5  +
push offset stream  +
call _fprintf  +
add esp 8 +
push 1  +
call _exit  +
pop ecx  +
xor eax eax +
mov ebp eax +
mov esi eax +
mov [esp+4+var_4] 1 +
jmp loc_436580  +
inc dword_4EC368  +
mov eax dword_4EC368 +
cmp eax dword_4D4B3C +
jl loc_43635A  +
push 74h  +
call sub_42A930  +
pop ecx  +
jmp loc_436593  +
cmp dword_4D4C40 0 +
jle loc_43637C  +
push 3Ch  +
call sub_43FD4C  +
pop ecx  +
test eax eax +
jz loc_43637C  +
push 74h  +
call sub_42A930  +
pop ecx  +
jmp loc_436593  +
xor edx edx +
mov [esp+4+var_4] edx +
call sub_4368CC  +
call sub_435284  +
mov ebx eax +
xor edi edi +
cmp ebx dword_4EC364 +
jl loc_4363A4  +
mov eax dword_4EC368 +
cmp eax dword_4D4B38 +
jge loc_4363CE  +
mov [esp+4+var_4] 1 +
mov edx dword_4DB114 +
push edx  +
mov ecx dword_4D9F1C +
push ecx  +
call sub_438088  +
add esp 8 +
mov dword_4EC364 ebx +
mov ebp esi +
jmp loc_436474  +
cmp dword_4EC37C 0 +
jz loc_43644E  +
mov eax dword_4D9F1C +
push eax  +
mov edx dword_4DB114 +
push edx  +
call sub_438088  +
add esp 8 +
call sub_4368CC  +
call sub_435284  +
mov ebx eax +
cmp ebx dword_4EC364 +
jge loc_436426  +
mov [esp+4+var_4] 1 +
mov eax dword_4DB114 +
push eax  +
mov edx dword_4D9F1C +
push edx  +
call sub_438088  +
add esp 8 +
mov dword_4EC364 ebx +
mov ebp esi +
jmp loc_436474  +
cmp ebx dword_4EC364 +
jle loc_436447  +
mov eax dword_4D9F1C +
push eax  +
mov edx dword_4DB114 +
push edx  +
call sub_438088  +
add esp 8 +
mov esi ebp +
jmp loc_436474  +
mov edi 1 +
jmp loc_436474  +
cmp ebx dword_4EC364 +
jnz loc_43645D  +
mov edi 1 +
jmp loc_436474  +
mov eax dword_4D9F1C +
push eax  +
mov edx dword_4DB114 +
push edx  +
call sub_438088  +
add esp 8 +
mov esi ebp +
mov dword_4EC37C edi +
call sub_4368EC  +
call sub_435284  +
mov ebx eax +
xor edi edi +
cmp ebx dword_4EC364 +
jl loc_43649D  +
mov eax dword_4EC368 +
cmp eax dword_4D4B38 +
jge loc_4364C7  +
mov [esp+4+var_4] 1 +
mov edx dword_4DB114 +
push edx  +
mov ecx dword_4D9F1C +
push ecx  +
call sub_438088  +
add esp 8 +
mov dword_4EC364 ebx +
mov ebp esi +
jmp loc_43656D  +
cmp dword_4EC37C 0 +
jz loc_436547  +
mov eax dword_4D9F1C +
push eax  +
mov edx dword_4DB114 +
push edx  +
call sub_438088  +
add esp 8 +
call sub_4368EC  +
call sub_435284  +
mov ebx eax +
cmp ebx dword_4EC364 +
jge loc_43651F  +
mov [esp+4+var_4] 1 +
mov eax dword_4DB114 +
push eax  +
mov edx dword_4D9F1C +
push edx  +
call sub_438088  +
add esp 8 +
mov dword_4EC364 ebx +
mov ebp esi +
jmp loc_43656D  +
cmp ebx dword_4EC364 +
jle loc_436540  +
mov eax dword_4D9F1C +
push eax  +
mov edx dword_4DB114 +
push edx  +
call sub_438088  +
add esp 8 +
mov esi ebp +
jmp loc_43656D  +
mov edi 1 +
jmp loc_43656D  +
cmp ebx dword_4EC364 +
jnz loc_436556  +
mov edi 1 +
jmp loc_43656D  +
mov eax dword_4D9F1C +
push eax  +
mov edx dword_4DB114 +
push edx  +
call sub_438088  +
add esp 8 +
mov esi ebp +
mov dword_4EC37C edi +
cmp dword_4EC364 0 +
jz loc_4368C3  +
cmp dword_4EC380 0 +
jz loc_436593  +
cmp [esp+4+var_4] 0 +
jnz loc_43633A  +
cmp dword_4EC364 0 +
jz loc_4368C3  +
cmp dword_4D4B40 0 +
jnz loc_4368C3  +
xor eax eax +
xor edx edx +
mov ebp edx +
mov esi edx +
mov dword_4EC380 eax +
mov [esp+4+var_4] 1 +
inc dword_4EC368  +
mov eax dword_4EC368 +
cmp eax dword_4D4B3C +
jl loc_4365E1  +
push 74h  +
call sub_42A930  +
pop ecx  +
jmp loc_43673C  +
cmp dword_4D4C40 0 +
jle loc_436603  +
push 3Ch  +
call sub_43FD4C  +
pop ecx  +
test eax eax +
jz loc_436603  +
push 74h  +
call sub_42A930  +
pop ecx  +
jmp loc_43673C  +
xor edx edx +
mov dword_4EC384 esi +
mov [esp+4+var_4] edx +
call sub_436DB4  +
mov esi dword_4EC384 +
cmp esi dword_4D9F20 +
jle loc_436623  +
xor esi esi +
call sub_435284  +
mov ebx eax +
xor edi edi +
cmp ebx dword_4EC364 +
jge loc_43665D  +
mov [esp+4+var_4] 1 +
mov eax dword_4DB114 +
push eax  +
mov edx dword_4D9F1C +
push edx  +
call sub_438088  +
add esp 8 +
mov dword_4EC364 ebx +
mov ebp esi +
jmp loc_43671F  +
cmp dword_4EC37C 0 +
jz loc_4366F9  +
mov eax dword_4D9F1C +
push eax  +
mov edx dword_4DB114 +
push edx  +
call sub_438088  +
add esp 8 +
mov esi ebp +
mov dword_4EC384 ebp +
call sub_436DB4  +
mov esi dword_4EC384 +
cmp esi dword_4D9F20 +
jle loc_43669C  +
xor esi esi +
call sub_435284  +
mov ebx eax +
cmp ebx dword_4EC364 +
jge loc_4366D1  +
mov [esp+4+var_4] 1 +
mov eax dword_4DB114 +
push eax  +
mov edx dword_4D9F1C +
push edx  +
call sub_438088  +
add esp 8 +
mov dword_4EC364 ebx +
mov ebp esi +
jmp loc_43671F  +
cmp ebx dword_4EC364 +
jle loc_4366F2  +
mov eax dword_4D9F1C +
push eax  +
mov edx dword_4DB114 +
push edx  +
call sub_438088  +
add esp 8 +
mov esi ebp +
jmp loc_43671F  +
mov edi 1 +
jmp loc_43671F  +
cmp ebx dword_4EC364 +
jnz loc_436708  +
mov edi 1 +
jmp loc_43671F  +
mov eax dword_4D9F1C +
push eax  +
mov edx dword_4DB114 +
push edx  +
call sub_438088  +
add esp 8 +
mov esi ebp +
mov dword_4EC37C edi +
cmp dword_4EC364 0 +
jz loc_4368C3  +
cmp [esp+4+var_4] 0 +
jnz loc_4365C1  +
mov ebp dword_4D9F20 +
mov [esp+4+var_4] 1 +
inc ebp  +
mov esi ebp +
inc dword_4EC368  +
mov eax dword_4EC368 +
cmp eax dword_4D4B3C +
jl loc_43676C  +
push 74h  +
call sub_42A930  +
pop ecx  +
jmp loc_4368C3  +
cmp dword_4D4C40 0 +
jle loc_43678E  +
push 3Ch  +
call sub_43FD4C  +
pop ecx  +
test eax eax +
jz loc_43678E  +
push 74h  +
call sub_42A930  +
pop ecx  +
jmp loc_4368C3  +
xor edx edx +
mov dword_4EC384 esi +
mov [esp+4+var_4] edx +
call sub_4371D4  +
mov esi dword_4EC384 +
test esi esi +
jge loc_4367AE  +
mov esi dword_4D9F20 +
call sub_435284  +
mov ebx eax +
xor edi edi +
cmp ebx dword_4EC364 +
jge loc_4367E8  +
mov [esp+4+var_4] 1 +
mov eax dword_4DB114 +
push eax  +
mov edx dword_4D9F1C +
push edx  +
call sub_438088  +
add esp 8 +
mov dword_4EC364 ebx +
mov ebp esi +
jmp loc_4368AA  +
cmp dword_4EC37C 0 +
jz loc_436884  +
mov eax dword_4D9F1C +
push eax  +
mov edx dword_4DB114 +
push edx  +
call sub_438088  +
add esp 8 +
mov esi ebp +
mov dword_4EC384 ebp +
call sub_4371D4  +
mov esi dword_4EC384 +
test esi esi +
jge loc_436827  +
mov esi dword_4D9F20 +
call sub_435284  +
mov ebx eax +
cmp ebx dword_4EC364 +
jge loc_43685C  +
mov [esp+4+var_4] 1 +
mov eax dword_4DB114 +
push eax  +
mov edx dword_4D9F1C +
push edx  +
call sub_438088  +
add esp 8 +
mov dword_4EC364 ebx +
mov ebp esi +
jmp loc_4368AA  +
cmp ebx dword_4EC364 +
jle loc_43687D  +
mov eax dword_4D9F1C +
push eax  +
mov edx dword_4DB114 +
push edx  +
call sub_438088  +
add esp 8 +
mov esi ebp +
jmp loc_4368AA  +
mov edi 1 +
jmp loc_4368AA  +
cmp ebx dword_4EC364 +
jnz loc_436893  +
mov edi 1 +
jmp loc_4368AA  +
mov eax dword_4D9F1C +
push eax  +
mov edx dword_4DB114 +
push edx  +
call sub_438088  +
add esp 8 +
mov esi ebp +
mov dword_4EC37C edi +
cmp dword_4EC364 0 +
jz loc_4368C3  +
cmp [esp+4+var_4] 0 +
jnz loc_43674C  +
pop edx  +
pop ebp  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
call sub_42A930  +
pop ecx  +
xor ebx ebx +
jmp loc_4368E1  +
push ebx  +
call sub_436910  +
pop ecx  +
inc ebx  +
cmp ebx dword_4D9F20 +
jle loc_4368D9  +
pop ebx  +
retn   +
***
call sub_42A930  +
pop ecx  +
mov ebx dword_4D9F20 +
test ebx ebx +
jl loc_43690B  +
push ebx  +
call sub_436B6C  +
pop ecx  +
dec ebx  +
test ebx ebx +
jge loc_4368FF  +
pop ebx  +
retn   +
***
add esp 0FFFFFFE8h +
push ebx  +
push esi  +
push edi  +
mov ebx [ebp+arg_0] +
mov edi offset dword_4DB128 +
test ebx ebx +
jge loc_43695B  +
push 2A5h  +
push offset a_Step2_c_29  +
push offset asc_4DBDEA  +
push offset stream  +
call _fprintf  +
add esp 10h +
push offset asc_4DBE1A  +
push offset stream  +
call _fprintf  +
add esp 8 +
push 1  +
call _exit  +
pop ecx  +
cmp ebx dword_4D9F20 +
jle loc_436999  +
push 2A5h  +
push offset a_Step2_c_30  +
push offset asc_4DBE4F  +
push offset stream  +
call _fprintf  +
add esp 10h +
push offset asc_4DBE7F  +
push offset stream  +
call _fprintf  +
add esp 8 +
push 1  +
call _exit  +
pop ecx  +
push 64h  +
lea eax [ebx+1] +
push eax  +
call sub_437D90  +
add esp 8 +
mov edx dword_4D4B24 +
sub edx 1 +
jb loc_4369C3  +
jz loc_4369F4  +
dec edx  +
jz loc_436A25  +
dec edx  +
jz loc_436A6F  +
jmp loc_436AB7  +
xor esi esi +
jmp loc_4369DC  +
mov eax [edi] +
mov edx [eax+esi*4] +
push edx  +
call sub_4377D8  +
pop ecx  +
mov ecx [edi] +
mov eax [ecx+esi*4] +
inc esi  +
fstp  dword ptr [eax+74h] +
mov edx ebx +
shl edx 3 +
sub edx ebx +
mov ecx dword_4D9F1C +
cmp esi [ecx+edx*4+1Ch] +
jl loc_4369C7  +
jmp loc_436AB7  +
xor esi esi +
jmp loc_436A0D  +
mov eax [edi] +
mov edx [eax+esi*4] +
push edx  +
call sub_437A14  +
pop ecx  +
mov ecx [edi] +
mov eax [ecx+esi*4] +
inc esi  +
fstp  dword ptr [eax+74h] +
mov edx ebx +
shl edx 3 +
sub edx ebx +
mov ecx dword_4D9F1C +
cmp esi [ecx+edx*4+1Ch] +
jl loc_4369F8  +
jmp loc_436AB7  +
xor esi esi +
jmp loc_436A5A  +
mov eax [edi] +
mov edx [eax+esi*4] +
push edx  +
call sub_4377D8  +
pop ecx  +
fstp  [ebp+var_C] +
mov ecx [edi] +
mov eax [ecx+esi*4] +
push eax  +
call sub_437A14  +
pop ecx  +
fld  ds:tbyte_436B60 +
fmulp st(1) st +
mov edx [edi] +
fld  [ebp+var_C] +
faddp st(1) st +
mov ecx [edx+esi*4] +
inc esi  +
fstp  dword ptr [ecx+74h] +
mov eax ebx +
shl eax 3 +
sub eax ebx +
mov edx dword_4D9F1C +
cmp esi [edx+eax*4+1Ch] +
jl loc_436A29  +
jmp loc_436AB7  +
xor esi esi +
jmp loc_436AA4  +
mov eax [edi] +
mov edx [eax+esi*4] +
push edx  +
call sub_437A14  +
pop ecx  +
fstp  [ebp+var_18] +
mov ecx [edi] +
mov eax [ecx+esi*4] +
push eax  +
call sub_4377D8  +
pop ecx  +
fld  ds:tbyte_436B60 +
fmulp st(1) st +
mov edx [edi] +
fld  [ebp+var_18] +
faddp st(1) st +
mov ecx [edx+esi*4] +
inc esi  +
fstp  dword ptr [ecx+74h] +
mov eax ebx +
shl eax 3 +
sub eax ebx +
mov edx dword_4D9F1C +
cmp esi [edx+eax*4+1Ch] +
jl loc_436A73  +
mov edi ebx +
shl edi 3 +
sub edi ebx +
mov eax dword_4D9F1C +
mov eax [eax+edi*4+1Ch] +
test eax eax +
jz loc_436AEE  +
mov edx ebx +
mov dword_4DB110 0D3h +
shl edx 3 +
mov ecx dword_4D9F1C +
sub edx ebx +
dec eax  +
push eax  +
push 0  +
call sub_437C40  +
add esp 8 +
lea esi [ebx+1] +
push esi  +
call sub_437EFC  +
pop ecx  +
push esi  +
call sub_437E80  +
pop ecx  +
mov eax dword_4D9F1C +
cmp byte ptr [eax+edi*4+34h] 0 +
jz loc_436B12  +
push esi  +
call sub_437FF8  +
pop ecx  +
push ebx  +
call sub_43539C  +
pop ecx  +
mov edx dword_4DB114 +
cmp eax [edx+edi*4+8] +
jg loc_436B4F  +
mov ecx dword_4DB114 +
mov [ecx+edi*4+8] eax +
cmp ebx dword_4D9F20 +
jge loc_436B48  +
push esi  +
call sub_43539C  +
pop ecx  +
mov edx dword_4DB114 +
mov [edx+edi*4+24h] eax +
mov eax 1 +
jmp loc_436B58  +
push esi  +
call sub_437F7C  +
pop ecx  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
add esp 0FFFFFFE8h +
push ebx  +
push esi  +
push edi  +
mov ebx [ebp+arg_0] +
mov edi offset dword_4DB128 +
test ebx ebx +
jge loc_436BB7  +
push 2BAh  +
push offset a_Step2_c_31  +
push offset asc_4DBEB4  +
push offset stream  +
call _fprintf  +
add esp 10h +
push offset asc_4DBEE4  +
push offset stream  +
call _fprintf  +
add esp 8 +
push 1  +
call _exit  +
pop ecx  +
cmp ebx dword_4D9F20 +
jle loc_436BF5  +
push 2BAh  +
push offset a_Step2_c_32  +
push offset asc_4DBF19  +
push offset stream  +
call _fprintf  +
add esp 10h +
push offset asc_4DBF49  +
push offset stream  +
call _fprintf  +
add esp 8 +
push 1  +
call _exit  +
pop ecx  +
push 75h  +
push ebx  +
call sub_437D90  +
add esp 8 +
mov eax dword_4D4B24 +
sub eax 1 +
jb loc_436C1B  +
jz loc_436C4B  +
dec eax  +
jz loc_436C7B  +
dec eax  +
jz loc_436CC4  +
jmp loc_436D0B  +
xor esi esi +
jmp loc_436C34  +
mov eax [edi] +
mov edx [eax+esi*4] +
push edx  +
call sub_437738  +
pop ecx  +
mov ecx [edi] +
mov eax [ecx+esi*4] +
inc esi  +
fstp  dword ptr [eax+74h] +
mov edx ebx +
shl edx 3 +
sub edx ebx +
mov ecx dword_4D9F1C +
cmp esi [ecx+edx*4] +
jl loc_436C1F  +
jmp loc_436D0B  +
xor esi esi +
jmp loc_436C64  +
mov eax [edi] +
mov edx [eax+esi*4] +
push edx  +
call sub_437874  +
pop ecx  +
mov ecx [edi] +
mov eax [ecx+esi*4] +
inc esi  +
fstp  dword ptr [eax+74h] +
mov edx ebx +
shl edx 3 +
sub edx ebx +
mov ecx dword_4D9F1C +
cmp esi [ecx+edx*4] +
jl loc_436C4F  +
jmp loc_436D0B  +
xor esi esi +
jmp loc_436CB0  +
mov eax [edi] +
mov edx [eax+esi*4] +
push edx  +
call sub_437738  +
pop ecx  +
fstp  [ebp+var_C] +
mov ecx [edi] +
mov eax [ecx+esi*4] +
push eax  +
call sub_437874  +
pop ecx  +
fld  ds:tbyte_436DA8 +
fmulp st(1) st +
mov edx [edi] +
fld  [ebp+var_C] +
faddp st(1) st +
mov ecx [edx+esi*4] +
inc esi  +
fstp  dword ptr [ecx+74h] +
mov eax ebx +
shl eax 3 +
sub eax ebx +
mov edx dword_4D9F1C +
cmp esi [edx+eax*4] +
jl loc_436C7F  +
jmp loc_436D0B  +
xor esi esi +
jmp loc_436CF9  +
mov eax [edi] +
mov edx [eax+esi*4] +
push edx  +
call sub_437874  +
pop ecx  +
fstp  [ebp+var_18] +
mov ecx [edi] +
mov eax [ecx+esi*4] +
push eax  +
call sub_437738  +
pop ecx  +
fld  ds:tbyte_436DA8 +
fmulp st(1) st +
mov edx [edi] +
fld  [ebp+var_18] +
faddp st(1) st +
mov ecx [edx+esi*4] +
inc esi  +
fstp  dword ptr [ecx+74h] +
mov eax ebx +
shl eax 3 +
sub eax ebx +
mov edx dword_4D9F1C +
cmp esi [edx+eax*4] +
jl loc_436CC8  +
mov esi ebx +
shl esi 3 +
sub esi ebx +
mov eax dword_4D9F1C +
mov eax [eax+esi*4] +
test eax eax +
jz loc_436D41  +
mov edx ebx +
mov dword_4DB110 0D3h +
shl edx 3 +
mov ecx dword_4D9F1C +
sub edx ebx +
dec eax  +
push eax  +
push 0  +
call sub_437C40  +
add esp 8 +
push ebx  +
call sub_437EFC  +
pop ecx  +
push ebx  +
call sub_437E80  +
pop ecx  +
mov eax dword_4D9F1C +
cmp byte ptr [eax+esi*4+18h] 0 +
jz loc_436D62  +
push ebx  +
call sub_437FF8  +
pop ecx  +
push ebx  +
call sub_43539C  +
pop ecx  +
mov edx dword_4DB114 +
cmp eax [edx+esi*4+8] +
jg loc_436D98  +
mov [edx+esi*4+8] eax +
test ebx ebx +
jle loc_436D91  +
lea ecx [ebx-1] +
push ecx  +
call sub_43539C  +
pop ecx  +
mov edx dword_4DB114 +
mov [edx+esi*4-14h] eax +
mov eax 1 +
jmp loc_436DA1  +
push ebx  +
call sub_437F7C  +
pop ecx  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
push edi  +
push ebp  +
add esp 0FFFFFFD0h +
mov edi offset dword_4DB128 +
mov ebp offset dword_4D9F1C +
push 42h  +
call sub_42A930  +
pop ecx  +
mov eax dword_4EC384 +
cmp eax dword_4D9F20 +
jg loc_436FCB  +
mov esi eax +
jmp loc_436FBF  +
cmp dword_4D4C40 0 +
jle loc_436E07  +
push 3Ch  +
call sub_43FD4C  +
pop ecx  +
test eax eax +
jz loc_436E07  +
push 74h  +
call sub_42A930  +
pop ecx  +
jmp loc_436FCB  +
push 75h  +
push esi  +
call sub_437D90  +
add esp 8 +
mov eax dword_4D4B24 +
sub eax 1 +
jb loc_436E2D  +
jz loc_436E5A  +
dec eax  +
jz loc_436E87  +
dec eax  +
jz loc_436ECD  +
jmp loc_436F13  +
xor ebx ebx +
jmp loc_436E46  +
mov eax [edi] +
mov edx [eax+ebx*4] +
push edx  +
call sub_437738  +
pop ecx  +
mov ecx [edi] +
mov eax [ecx+ebx*4] +
inc ebx  +
fstp  dword ptr [eax+74h] +
mov edx esi +
shl edx 3 +
sub edx esi +
mov ecx [ebp+0] +
cmp ebx [ecx+edx*4] +
jl loc_436E31  +
jmp loc_436F13  +
xor ebx ebx +
jmp loc_436E73  +
mov eax [edi] +
mov edx [eax+ebx*4] +
push edx  +
call sub_437874  +
pop ecx  +
mov ecx [edi] +
mov eax [ecx+ebx*4] +
inc ebx  +
fstp  dword ptr [eax+74h] +
mov edx esi +
shl edx 3 +
sub edx esi +
mov ecx [ebp+0] +
cmp ebx [ecx+edx*4] +
jl loc_436E5E  +
jmp loc_436F13  +
xor ebx ebx +
jmp loc_436EBC  +
mov eax [edi] +
mov edx [eax+ebx*4] +
push edx  +
call sub_437738  +
pop ecx  +
fstp  [esp+30h+var_30] +
mov ecx [edi] +
mov eax [ecx+ebx*4] +
push eax  +
call sub_437874  +
pop ecx  +
fld  ds:tbyte_4371C8 +
fmulp st(1) st +
mov edx [edi] +
fld  [esp+30h+var_30] +
faddp st(1) st +
mov ecx [edx+ebx*4] +
inc ebx  +
fstp  dword ptr [ecx+74h] +
mov eax esi +
shl eax 3 +
sub eax esi +
mov edx [ebp+0] +
cmp ebx [edx+eax*4] +
jl loc_436E8B  +
jmp loc_436F13  +
xor ebx ebx +
jmp loc_436F04  +
mov eax [edi] +
mov edx [eax+ebx*4] +
push edx  +
call sub_437874  +
pop ecx  +
fstp  [esp+30h+var_24] +
mov ecx [edi] +
mov eax [ecx+ebx*4] +
push eax  +
call sub_437738  +
pop ecx  +
fld  ds:tbyte_4371C8 +
fmulp st(1) st +
mov edx [edi] +
fld  [esp+30h+var_24] +
faddp st(1) st +
mov ecx [edx+ebx*4] +
inc ebx  +
fstp  dword ptr [ecx+74h] +
mov eax esi +
shl eax 3 +
sub eax esi +
mov edx [ebp+0] +
cmp ebx [edx+eax*4] +
jl loc_436ED1  +
mov ebx esi +
shl ebx 3 +
sub ebx esi +
mov eax [ebp+0] +
mov eax [eax+ebx*4] +
test eax eax +
jz loc_436F44  +
mov edx esi +
mov dword_4DB110 0D3h +
shl edx 3 +
mov ecx [ebp+0] +
sub edx esi +
dec eax  +
push eax  +
push 0  +
call sub_437C40  +
add esp 8 +
mov eax [ebp+0] +
mov edx [eax+ebx*4] +
push edx  +
call sub_437680  +
pop ecx  +
test eax eax +
jz loc_436FBE  +
push esi  +
call sub_437E80  +
pop ecx  +
mov ecx [ebp+0] +
cmp byte ptr [ecx+ebx*4+18h] 0 +
jz loc_436F6D  +
push esi  +
call sub_437FF8  +
pop ecx  +
test esi esi +
jle loc_436F85  +
lea eax [esi-1] +
push eax  +
call sub_43539C  +
pop ecx  +
mov edx dword_4DB114 +
mov [edx+ebx*4-14h] eax +
cmp esi dword_4D9F20 +
jg loc_436F9E  +
push esi  +
call sub_43539C  +
pop ecx  +
mov ecx dword_4DB114 +
mov [ecx+ebx*4+8] eax +
push esi  +
call sub_4375F0  +
pop ecx  +
call sub_435284  +
cmp eax dword_4EC364 +
jge loc_436FBE  +
inc esi  +
mov dword_4EC384 esi +
jmp loc_4371BF  +
inc esi  +
cmp esi dword_4D9F20 +
jle loc_436DE5  +
xor esi esi +
jmp loc_4371AB  +
cmp dword_4D4C40 0 +
jle loc_436FF4  +
push 3Ch  +
call sub_43FD4C  +
pop ecx  +
test eax eax +
jz loc_436FF4  +
push 74h  +
call sub_42A930  +
pop ecx  +
jmp loc_4371BF  +
push 75h  +
push esi  +
call sub_437D90  +
add esp 8 +
mov eax dword_4D4B24 +
sub eax 1 +
jb loc_43701A  +
jz loc_437047  +
dec eax  +
jz loc_437074  +
dec eax  +
jz loc_4370BC  +
jmp loc_437102  +
xor ebx ebx +
jmp loc_437033  +
mov eax [edi] +
mov edx [eax+ebx*4] +
push edx  +
call sub_4377D8  +
pop ecx  +
mov ecx [edi] +
mov eax [ecx+ebx*4] +
inc ebx  +
fstp  dword ptr [eax+74h] +
mov edx esi +
shl edx 3 +
sub edx esi +
mov ecx [ebp+0] +
cmp ebx [ecx+edx*4] +
jl loc_43701E  +
jmp loc_437102  +
xor ebx ebx +
jmp loc_437060  +
mov eax [edi] +
mov edx [eax+ebx*4] +
push edx  +
call sub_437A14  +
pop ecx  +
mov ecx [edi] +
mov eax [ecx+ebx*4] +
inc ebx  +
fstp  dword ptr [eax+74h] +
mov edx esi +
shl edx 3 +
sub edx esi +
mov ecx [ebp+0] +
cmp ebx [ecx+edx*4] +
jl loc_43704B  +
jmp loc_437102  +
xor ebx ebx +
jmp loc_4370AB  +
mov eax [edi] +
mov edx [eax+ebx*4] +
push edx  +
call sub_4377D8  +
pop ecx  +
fstp  [esp+30h+var_18] +
mov ecx [edi] +
mov eax [ecx+ebx*4] +
push eax  +
call sub_437A14  +
pop ecx  +
fld  ds:tbyte_4371C8 +
fmulp st(1) st +
mov edx [edi] +
fld  [esp+30h+var_18] +
faddp st(1) st +
mov ecx [edx+ebx*4] +
inc ebx  +
fstp  dword ptr [ecx+74h] +
mov eax esi +
shl eax 3 +
sub eax esi +
mov edx [ebp+0] +
cmp ebx [edx+eax*4] +
jl loc_437078  +
jmp loc_437102  +
xor ebx ebx +
jmp loc_4370F3  +
mov eax [edi] +
mov edx [eax+ebx*4] +
push edx  +
call sub_437A14  +
pop ecx  +
fstp  [esp+30h+var_C] +
mov ecx [edi] +
mov eax [ecx+ebx*4] +
push eax  +
call sub_4377D8  +
pop ecx  +
fld  ds:tbyte_4371C8 +
fmulp st(1) st +
mov edx [edi] +
fld  [esp+30h+var_C] +
faddp st(1) st +
mov ecx [edx+ebx*4] +
inc ebx  +
fstp  dword ptr [ecx+74h] +
mov eax esi +
shl eax 3 +
sub eax esi +
mov edx [ebp+0] +
cmp ebx [edx+eax*4] +
jl loc_4370C0  +
mov ebx esi +
shl ebx 3 +
sub ebx esi +
mov eax [ebp+0] +
mov eax [eax+ebx*4] +
test eax eax +
jz loc_437133  +
mov edx esi +
mov dword_4DB110 0D3h +
shl edx 3 +
mov ecx [ebp+0] +
sub edx esi +
dec eax  +
push eax  +
push 0  +
call sub_437C40  +
add esp 8 +
mov eax [ebp+0] +
mov edx [eax+ebx*4] +
push edx  +
call sub_437680  +
pop ecx  +
test eax eax +
jz loc_4371AA  +
push esi  +
call sub_437E80  +
pop ecx  +
mov ecx [ebp+0] +
cmp byte ptr [ecx+ebx*4+18h] 0 +
jz loc_43715C  +
push esi  +
call sub_437FF8  +
pop ecx  +
test esi esi +
jle loc_437174  +
lea eax [esi-1] +
push eax  +
call sub_43539C  +
pop ecx  +
mov edx dword_4DB114 +
mov [edx+ebx*4-14h] eax +
cmp esi dword_4D9F20 +
jg loc_43718D  +
push esi  +
call sub_43539C  +
pop ecx  +
mov ecx dword_4DB114 +
mov [ecx+ebx*4+8] eax +
push esi  +
call sub_4375F0  +
pop ecx  +
call sub_435284  +
cmp eax dword_4EC364 +
jge loc_4371AA  +
inc esi  +
mov dword_4EC384 esi +
jmp loc_4371BF  +
inc esi  +
cmp esi dword_4EC384 +
jge loc_4371BF  +
cmp esi dword_4D9F20 +
jle loc_436FD2  +
add esp 30h +
pop ebp  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
push ebp  +
add esp 0FFFFFFD0h +
mov edi offset dword_4DB128 +
mov ebp offset dword_4D9F1C +
push 42h  +
call sub_42A930  +
pop ecx  +
mov eax dword_4EC384 +
test eax eax +
jle loc_4373E6  +
mov esi eax +
test esi esi +
jle loc_4373E6  +
cmp dword_4D4C40 0 +
jle loc_437226  +
push 3Ch  +
call sub_43FD4C  +
pop ecx  +
test eax eax +
jz loc_437226  +
push 74h  +
call sub_42A930  +
pop ecx  +
jmp loc_4373E6  +
push 64h  +
push esi  +
call sub_437D90  +
add esp 8 +
mov eax dword_4D4B24 +
sub eax 1 +
jb loc_43724C  +
jz loc_437279  +
dec eax  +
jz loc_4372A6  +
dec eax  +
jz loc_4372EC  +
jmp loc_437332  +
xor ebx ebx +
jmp loc_437265  +
mov eax [edi] +
mov edx [eax+ebx*4] +
push edx  +
call sub_4377D8  +
pop ecx  +
mov ecx [edi] +
mov eax [ecx+ebx*4] +
inc ebx  +
fstp  dword ptr [eax+74h] +
mov edx esi +
shl edx 3 +
sub edx esi +
mov ecx [ebp+0] +
cmp ebx [ecx+edx*4] +
jl loc_437250  +
jmp loc_437332  +
xor ebx ebx +
jmp loc_437292  +
mov eax [edi] +
mov edx [eax+ebx*4] +
push edx  +
call sub_437A14  +
pop ecx  +
mov ecx [edi] +
mov eax [ecx+ebx*4] +
inc ebx  +
fstp  dword ptr [eax+74h] +
mov edx esi +
shl edx 3 +
sub edx esi +
mov ecx [ebp+0] +
cmp ebx [ecx+edx*4] +
jl loc_43727D  +
jmp loc_437332  +
xor ebx ebx +
jmp loc_4372DB  +
mov eax [edi] +
mov edx [eax+ebx*4] +
push edx  +
call sub_4377D8  +
pop ecx  +
fstp  [esp+30h+var_30] +
mov ecx [edi] +
mov eax [ecx+ebx*4] +
push eax  +
call sub_437A14  +
pop ecx  +
fld  ds:tbyte_4375E4 +
fmulp st(1) st +
mov edx [edi] +
fld  [esp+30h+var_30] +
faddp st(1) st +
mov ecx [edx+ebx*4] +
inc ebx  +
fstp  dword ptr [ecx+74h] +
mov eax esi +
shl eax 3 +
sub eax esi +
mov edx [ebp+0] +
cmp ebx [edx+eax*4] +
jl loc_4372AA  +
jmp loc_437332  +
xor ebx ebx +
jmp loc_437323  +
mov eax [edi] +
mov edx [eax+ebx*4] +
push edx  +
call sub_437874  +
pop ecx  +
fstp  [esp+30h+var_24] +
mov ecx [edi] +
mov eax [ecx+ebx*4] +
push eax  +
call sub_4377D8  +
pop ecx  +
fld  ds:tbyte_4375E4 +
fmulp st(1) st +
mov edx [edi] +
fld  [esp+30h+var_24] +
faddp st(1) st +
mov ecx [edx+ebx*4] +
inc ebx  +
fstp  dword ptr [ecx+74h] +
mov eax esi +
shl eax 3 +
sub eax esi +
mov edx [ebp+0] +
cmp ebx [edx+eax*4] +
jl loc_4372F0  +
mov ebx esi +
shl ebx 3 +
sub ebx esi +
mov eax [ebp+0] +
mov eax [eax+ebx*4] +
test eax eax +
jz loc_437363  +
mov edx esi +
mov dword_4DB110 0D3h +
shl edx 3 +
mov ecx [ebp+0] +
sub edx esi +
dec eax  +
push eax  +
push 0  +
call sub_437C40  +
add esp 8 +
mov eax [ebp+0] +
mov edx [eax+ebx*4] +
push edx  +
call sub_437680  +
pop ecx  +
test eax eax +
jz loc_4373DD  +
push esi  +
call sub_437E80  +
pop ecx  +
mov ecx [ebp+0] +
cmp byte ptr [ecx+ebx*4+18h] 0 +
jz loc_43738C  +
push esi  +
call sub_437FF8  +
pop ecx  +
test esi esi +
jle loc_4373A4  +
lea eax [esi-1] +
push eax  +
call sub_43539C  +
pop ecx  +
mov edx dword_4DB114 +
mov [edx+ebx*4-14h] eax +
cmp esi dword_4D9F20 +
jg loc_4373BD  +
push esi  +
call sub_43539C  +
pop ecx  +
mov ecx dword_4DB114 +
mov [ecx+ebx*4+8] eax +
push esi  +
call sub_437638  +
pop ecx  +
call sub_435284  +
cmp eax dword_4EC364 +
jge loc_4373DD  +
dec esi  +
mov dword_4EC384 esi +
jmp loc_4375DB  +
dec esi  +
test esi esi +
jg loc_437204  +
mov esi dword_4D9F20 +
inc esi  +
jmp loc_4375CB  +
cmp dword_4D4C40 0 +
jle loc_437414  +
push 3Ch  +
call sub_43FD4C  +
pop ecx  +
test eax eax +
jz loc_437414  +
push 74h  +
call sub_42A930  +
pop ecx  +
jmp loc_4375DB  +
push 64h  +
push esi  +
call sub_437D90  +
add esp 8 +
mov eax dword_4D4B24 +
sub eax 1 +
jb loc_43743A  +
jz loc_437467  +
dec eax  +
jz loc_437494  +
dec eax  +
jz loc_4374DC  +
jmp loc_437522  +
xor ebx ebx +
jmp loc_437453  +
mov eax [edi] +
mov edx [eax+ebx*4] +
push edx  +
call sub_4377D8  +
pop ecx  +
mov ecx [edi] +
mov eax [ecx+ebx*4] +
inc ebx  +
fstp  dword ptr [eax+74h] +
mov edx esi +
shl edx 3 +
sub edx esi +
mov ecx [ebp+0] +
cmp ebx [ecx+edx*4] +
jl loc_43743E  +
jmp loc_437522  +
xor ebx ebx +
jmp loc_437480  +
mov eax [edi] +
mov edx [eax+ebx*4] +
push edx  +
call sub_437A14  +
pop ecx  +
mov ecx [edi] +
mov eax [ecx+ebx*4] +
inc ebx  +
fstp  dword ptr [eax+74h] +
mov edx esi +
shl edx 3 +
sub edx esi +
mov ecx [ebp+0] +
cmp ebx [ecx+edx*4] +
jl loc_43746B  +
jmp loc_437522  +
xor ebx ebx +
jmp loc_4374CB  +
mov eax [edi] +
mov edx [eax+ebx*4] +
push edx  +
call sub_4377D8  +
pop ecx  +
fstp  [esp+30h+var_18] +
mov ecx [edi] +
mov eax [ecx+ebx*4] +
push eax  +
call sub_437A14  +
pop ecx  +
fld  ds:tbyte_4375E4 +
fmulp st(1) st +
mov edx [edi] +
fld  [esp+30h+var_18] +
faddp st(1) st +
mov ecx [edx+ebx*4] +
inc ebx  +
fstp  dword ptr [ecx+74h] +
mov eax esi +
shl eax 3 +
sub eax esi +
mov edx [ebp+0] +
cmp ebx [edx+eax*4] +
jl loc_437498  +
jmp loc_437522  +
xor ebx ebx +
jmp loc_437513  +
mov eax [edi] +
mov edx [eax+ebx*4] +
push edx  +
call sub_437A14  +
pop ecx  +
fstp  [esp+30h+var_C] +
mov ecx [edi] +
mov eax [ecx+ebx*4] +
push eax  +
call sub_4377D8  +
pop ecx  +
fld  ds:tbyte_4375E4 +
fmulp st(1) st +
mov edx [edi] +
fld  [esp+30h+var_C] +
faddp st(1) st +
mov ecx [edx+ebx*4] +
inc ebx  +
fstp  dword ptr [ecx+74h] +
mov eax esi +
shl eax 3 +
sub eax esi +
mov edx [ebp+0] +
cmp ebx [edx+eax*4] +
jl loc_4374E0  +
mov ebx esi +
shl ebx 3 +
sub ebx esi +
mov eax [ebp+0] +
mov eax [eax+ebx*4] +
test eax eax +
jz loc_437553  +
mov edx esi +
mov dword_4DB110 0D3h +
shl edx 3 +
mov ecx [ebp+0] +
sub edx esi +
dec eax  +
push eax  +
push 0  +
call sub_437C40  +
add esp 8 +
mov eax [ebp+0] +
mov edx [eax+ebx*4] +
push edx  +
call sub_437680  +
pop ecx  +
test eax eax +
jz loc_4375CA  +
push esi  +
call sub_437E80  +
pop ecx  +
mov ecx [ebp+0] +
cmp byte ptr [ecx+ebx*4+18h] 0 +
jz loc_43757C  +
push esi  +
call sub_437FF8  +
pop ecx  +
test esi esi +
jle loc_437594  +
lea eax [esi-1] +
push eax  +
call sub_43539C  +
pop ecx  +
mov edx dword_4DB114 +
mov [edx+ebx*4-14h] eax +
cmp esi dword_4D9F20 +
jg loc_4375AD  +
push esi  +
call sub_43539C  +
pop ecx  +
mov ecx dword_4DB114 +
mov [ecx+ebx*4+8] eax +
push esi  +
call sub_437638  +
pop ecx  +
call sub_435284  +
cmp eax dword_4EC364 +
jge loc_4375CA  +
dec esi  +
mov dword_4EC384 esi +
jmp loc_4375DB  +
dec esi  +
cmp esi dword_4EC384 +
jle loc_4375DB  +
test esi esi +
jg loc_4373F2  +
add esp 30h +
pop ebp  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
test esi esi +
jle loc_437613  +
lea ebx [esi-1] +
test ebx ebx +
jl loc_437613  +
push ebx  +
call sub_436B6C  +
pop ecx  +
test eax eax +
jz loc_437613  +
dec ebx  +
test ebx ebx +
jge loc_437603  +
cmp esi dword_4D9F20 +
jg loc_437633  +
mov ebx esi +
jmp loc_43762B  +
push ebx  +
call sub_436910  +
pop ecx  +
test eax eax +
jz loc_437633  +
inc ebx  +
cmp ebx dword_4D9F20 +
jle loc_43761F  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
cmp esi dword_4D9F20 +
jg loc_437660  +
mov ebx esi +
jmp loc_437658  +
push ebx  +
call sub_436910  +
pop ecx  +
test eax eax +
jz loc_437660  +
inc ebx  +
cmp ebx dword_4D9F20 +
jle loc_43764C  +
test esi esi +
jle loc_43767B  +
lea ebx [esi-1] +
test ebx ebx +
jl loc_43767B  +
push ebx  +
call sub_436B6C  +
pop ecx  +
test eax eax +
jz loc_43767B  +
dec ebx  +
test ebx ebx +
jge loc_43766B  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
push ecx  +
add esp 0FFFFFFF8h +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
test esi esi +
jnz loc_43777D  +
push 35Dh  +
push offset a_Step2_c_33  +
push offset asc_4DBF7E  +
push offset stream  +
call _fprintf  +
add esp 10h +
push offset asc_4DBFAE  +
push offset stream  +
call _fprintf  +
add esp 8 +
push 1  +
call _exit  +
pop ecx  +
cmp dword ptr [esi+88h] 0 +
jnz loc_43778E  +
fld  ds:flt_4377D4 +
jmp loc_4377CB  +
xor edx edx +
mov eax [esi+98h] +
test eax eax +
jz loc_4377B4  +
mov ecx [eax] +
mov eax [eax+4] +
mov ebx [ecx+1Ch] +
movsx ecx byte ptr [ecx+41h] +
mov ebx [ebx+70h] +
shl ebx 8 +
add edx ebx +
sub edx ecx +
test eax eax +
jnz loc_43779A  +
mov [ebp+var_4] edx +
fild  [ebp+var_4] +
mov eax [esi+88h] +
shl eax 8 +
mov [ebp+var_8] eax +
fild  [ebp+var_8] +
fdivp st(1) st +
pop esi  +
pop ebx  +
pop ecx  +
pop ecx  +
pop ebp  +
retn   +
***
add esp 0FFFFFFF8h +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
test esi esi +
jnz loc_43781D  +
push 369h  +
push offset a_Step2_c_34  +
push offset asc_4DBFE3  +
push offset stream  +
call _fprintf  +
add esp 10h +
push offset asc_4DC013  +
push offset stream  +
call _fprintf  +
add esp 8 +
push 1  +
call _exit  +
pop ecx  +
cmp dword ptr [esi+84h] 0 +
jnz loc_43782E  +
fld  ds:flt_437870 +
jmp loc_43786A  +
xor edx edx +
mov eax [esi+94h] +
test eax eax +
jz loc_437853  +
mov ecx [eax] +
mov eax [eax+4] +
mov ebx [ecx] +
movsx ecx byte ptr [ecx+41h] +
mov ebx [ebx+70h] +
shl ebx 8 +
add edx ebx +
add edx ecx +
test eax eax +
jnz loc_43783A  +
mov [ebp+var_4] edx +
fild  [ebp+var_4] +
mov eax [esi+84h] +
shl eax 8 +
mov [ebp+var_8] eax +
fild  [ebp+var_8] +
fdivp st(1) st +
pop esi  +
pop ebx  +
pop ecx  +
pop ecx  +
pop ebp  +
retn   +
***
add esp 0FFFFFFF0h +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
test esi esi +
jnz loc_4378B9  +
push 375h  +
push offset a_Step2_c_35  +
push offset asc_4DC048  +
push offset stream  +
call _fprintf  +
add esp 10h +
push offset asc_4DC078  +
push offset stream  +
call _fprintf  +
add esp 8 +
push 1  +
call _exit  +
pop ecx  +
mov eax [esi+88h] +
sub eax 1 +
jb loc_4378CB  +
jz loc_4378D6  +
dec eax  +
jz loc_4378FB  +
jmp loc_437925  +
fld  ds:flt_437A08 +
jmp loc_437A00  +
mov edx [esi+98h] +
mov eax [edx] +
mov edx [eax+1Ch] +
fild  dword ptr [edx+70h] +
movsx ecx byte ptr [eax+41h] +
mov [ebp+var_4] ecx +
fild  [ebp+var_4] +
fmul  ds:flt_437A0C +
fsubp st(1) st +
jmp loc_437A00  +
mov eax [esi+98h] +
mov edx [eax] +
mov eax [eax+4] +
mov eax [eax] +
mov ecx [edx+1Ch] +
mov edx [eax+1Ch] +
mov ebx [ecx+70h] +
add ebx [edx+70h] +
mov [ebp+var_8] ebx +
fild  [ebp+var_8] +
fmul  ds:flt_437A10 +
jmp loc_437A00  +
xor ebx ebx +
mov eax [esi+98h] +
test eax eax +
jz loc_437947  +
mov edx [eax] +
mov ecx [edx+1Ch] +
mov edx dword_4DB130 +
mov [edx+ebx*4] ecx +
inc ebx  +
mov eax [eax+4] +
test eax eax +
jnz loc_437931  +
test ebx ebx +
jz loc_437961  +
push offset sub_437C10  +
push 4  +
push ebx  +
mov eax dword_4DB130 +
push eax  +
call _qsort  +
add esp 10h +
mov ecx ebx +
and ecx 80000001h +
jns loc_437970  +
dec ecx  +
or ecx 0FFFFFFFEh +
inc ecx  +
test ecx ecx +
jz loc_437988  +
sar ebx 1 +
jns loc_43797B  +
adc ebx 0 +
mov eax dword_4DB130 +
mov edx [eax+ebx*4] +
fild  dword ptr [edx+70h] +
jmp loc_437A00  +
mov edx ebx +
sar edx 1 +
jns loc_437991  +
adc edx 0 +
mov eax dword_4DB130 +
mov ecx [eax+edx*4-4] +
mov eax [eax] +
mov ecx [ecx+70h] +
sub ecx [eax+70h] +
mov eax ecx +
mov ecx dword_4DB130 +
mov edx [ecx+edx*4] +
mov ecx dword_4DB130 +
mov ecx [ecx+ebx*4-4] +
mov ecx [ecx+70h] +
sub ecx [edx+70h] +
mov edx ecx +
mov ecx ebx +
sar ecx 1 +
jns loc_4379C8  +
adc ecx 0 +
mov esi dword_4DB130 +
mov ecx [esi+ecx*4-4] +
mov ecx [ecx+70h] +
imul ecx edx +
sar ebx 1 +
jns loc_4379DF  +
adc ebx 0 +
mov esi dword_4DB130 +
mov ebx [esi+ebx*4] +
mov ebx [ebx+70h] +
imul ebx eax +
add ecx ebx +
mov [ebp+var_C] ecx +
fild  [ebp+var_C] +
add edx eax +
mov [ebp+var_10] edx +
fild  [ebp+var_10] +
fdivp st(1) st +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
add esp 0FFFFFFF0h +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
test esi esi +
jnz loc_437A59  +
push 392h  +
push offset a_Step2_c_36  +
push offset asc_4DC0AD  +
push offset stream  +
call _fprintf  +
add esp 10h +
push offset asc_4DC0DD  +
push offset stream  +
call _fprintf  +
add esp 8 +
push 1  +
call _exit  +
pop ecx  +
mov eax [esi+84h] +
sub eax 1 +
jb loc_437A6B  +
jz loc_437A76  +
dec eax  +
jz loc_437A9A  +
jmp loc_437AC2  +
fld  ds:flt_437BA4 +
jmp loc_437B9C  +
mov edx [esi+94h] +
mov eax [edx] +
mov edx [eax] +
fild  dword ptr [edx+70h] +
movsx ecx byte ptr [eax+41h] +
mov [ebp+var_4] ecx +
fild  [ebp+var_4] +
fmul  ds:flt_437BA8 +
faddp st(1) st +
jmp loc_437B9C  +
mov eax [esi+94h] +
mov edx [eax] +
mov eax [eax+4] +
mov eax [eax] +
mov ecx [edx] +
mov edx [eax] +
mov ebx [ecx+70h] +
add ebx [edx+70h] +
mov [ebp+var_8] ebx +
fild  [ebp+var_8] +
fmul  ds:flt_437BAC +
jmp loc_437B9C  +
xor ebx ebx +
mov eax [esi+94h] +
test eax eax +
jz loc_437AE3  +
mov edx [eax] +
mov ecx [edx] +
mov edx dword_4DB130 +
mov [edx+ebx*4] ecx +
inc ebx  +
mov eax [eax+4] +
test eax eax +
jnz loc_437ACE  +
test ebx ebx +
jz loc_437AFD  +
push offset sub_437C10  +
push 4  +
push ebx  +
mov eax dword_4DB130 +
push eax  +
call _qsort  +
add esp 10h +
mov ecx ebx +
and ecx 80000001h +
jns loc_437B0C  +
dec ecx  +
or ecx 0FFFFFFFEh +
inc ecx  +
test ecx ecx +
jz loc_437B24  +
sar ebx 1 +
jns loc_437B17  +
adc ebx 0 +
mov eax dword_4DB130 +
mov edx [eax+ebx*4] +
fild  dword ptr [edx+70h] +
jmp loc_437B9C  +
mov edx ebx +
sar edx 1 +
jns loc_437B2D  +
adc edx 0 +
mov eax dword_4DB130 +
mov ecx [eax+edx*4-4] +
mov eax [eax] +
mov ecx [ecx+70h] +
sub ecx [eax+70h] +
mov eax ecx +
mov ecx dword_4DB130 +
mov edx [ecx+edx*4] +
mov ecx dword_4DB130 +
mov ecx [ecx+ebx*4-4] +
mov ecx [ecx+70h] +
sub ecx [edx+70h] +
mov edx ecx +
mov ecx ebx +
sar ecx 1 +
jns loc_437B64  +
adc ecx 0 +
mov esi dword_4DB130 +
mov ecx [esi+ecx*4-4] +
mov ecx [ecx+70h] +
imul ecx edx +
sar ebx 1 +
jns loc_437B7B  +
adc ebx 0 +
mov esi dword_4DB130 +
mov ebx [esi+ebx*4] +
mov ebx [ebx+70h] +
imul ebx eax +
add ecx ebx +
mov [ebp+var_C] ecx +
fild  [ebp+var_C] +
add edx eax +
mov [ebp+var_10] edx +
fild  [ebp+var_10] +
fdivp st(1) st +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
push ebp  +
mov ebp esp +
mov ecx [ebp+0Ch] +
mov edx [ebp+8] +
mov eax [edx] +
fld  dword ptr [eax+74h] +
fcomp  ds:flt_437C0C +
fnstsw  ax +
sahf   +
jz loc_437BD9  +
mov eax [ecx] +
fld  dword ptr [eax+74h] +
fcomp  ds:flt_437C0C +
fnstsw  ax +
sahf   +
jnz loc_437BDD  +
xor eax eax +
pop ebp  +
retn   +
***
mov eax [edx] +
fld  dword ptr [eax+74h] +
mov eax [ecx] +
fcomp  dword ptr [eax+74h] +
fnstsw  ax +
sahf   +
jbe loc_437BF3  +
mov eax 1 +
pop ebp  +
retn   +
***
mov edx [edx] +
mov ecx [ecx] +
fld  dword ptr [edx+74h] +
fcomp  dword ptr [ecx+74h] +
fnstsw  ax +
sahf   +
jnb loc_437C07  +
or eax 0FFFFFFFFh +
pop ebp  +
retn   +
***
xor eax eax +
pop ebp  +
retn   +
***
push ebx  +
mov edx [ebp+arg_4] +
mov eax [ebp+arg_0] +
mov ecx [eax] +
mov ebx [edx] +
mov ebx [ebx+70h] +
mov ecx [ecx+70h] +
cmp ebx ecx +
jge loc_437C30  +
mov eax 1 +
pop ebx  +
pop ebp  +
retn   +
cmp ebx ecx +
jle loc_437C3A  +
or eax 0FFFFFFFFh +
pop ebx  +
pop ebp  +
retn   +
xor eax eax +
pop ebx  +
pop ebp  +
retn   +
***
add esp 0FFFFFFF8h +
push ebx  +
push esi  +
push edi  +
mov ecx offset dword_4DB128 +
mov eax [ebp+arg_4] +
sub eax [ebp+arg_0] +
mov [ebp+var_4] eax +
cmp [ebp+var_4] 5 +
jle loc_437C9F  +
mov esi dword_4DB110 +
mov eax esi +
cdq   +
idiv  [ebp+var_4] +
mov ebx edx +
add ebx [ebp+arg_0] +
mov eax esi +
add eax 2A8Bh +
mov esi 7FFFFFFFh +
cdq   +
idiv  esi +
mov dword_4DB110 edx +
mov eax [ecx] +
mov edx [ebp+arg_0] +
mov edx [eax+edx*4] +
mov [ebp+var_8] edx +
mov edx [ebp+arg_0] +
mov esi [ecx] +
mov esi [esi+ebx*4] +
mov [eax+edx*4] esi +
mov edx [ebp+var_8] +
mov [eax+ebx*4] edx +
mov eax [ecx] +
mov edx [ebp+arg_0] +
mov ebx [ebp+arg_4] +
inc ebx  +
mov esi [eax+edx*4] +
mov edx [ebp+arg_0] +
fld  dword ptr [esi+74h] +
fcomp  ds:flt_437D8C +
fnstsw  ax +
sahf   +
jnz loc_437CCB  +
mov ebx [ebp+var_4] +
sar ebx 1 +
jns loc_437CC6  +
adc ebx 0 +
add ebx [ebp+arg_0] +
jmp loc_437D3D  +
cmp ebx edx +
jle loc_437D3D  +
dec ebx  +
mov eax [ecx] +
mov eax [eax+ebx*4] +
fld  dword ptr [eax+74h] +
fcomp  ds:flt_437D8C +
fnstsw  ax +
sahf   +
jz loc_437CF3  +
mov eax [ecx] +
mov eax [eax+ebx*4] +
fld  dword ptr [eax+74h] +
fcomp  dword ptr [esi+74h] +
fnstsw  ax +
sahf   +
ja loc_437CCF  +
inc edx  +
cmp ebx edx +
jl loc_437D1B  +
mov eax [ecx] +
mov eax [eax+edx*4] +
fld  dword ptr [eax+74h] +
fcomp  ds:flt_437D8C +
fnstsw  ax +
sahf   +
jz loc_437D1B  +
mov eax [ecx] +
mov eax [eax+edx*4] +
fld  dword ptr [eax+74h] +
fcomp  dword ptr [esi+74h] +
fnstsw  ax +
sahf   +
jb loc_437CF3  +
cmp ebx edx +
jle loc_437D39  +
mov eax [ecx] +
mov eax [eax+ebx*4] +
mov [ebp+var_8] eax +
mov eax [ecx] +
mov edi [ecx] +
mov eax [eax+edx*4] +
mov [edi+ebx*4] eax +
mov eax [ecx] +
mov edi [ebp+var_8] +
mov [eax+edx*4] edi +
cmp ebx edx +
jg loc_437CCF  +
mov eax [ecx] +
mov edx [ebp+arg_0] +
mov edx [eax+edx*4] +
mov [ebp+var_8] edx +
mov edx [ebp+arg_0] +
mov esi [ecx] +
mov esi [esi+ebx*4] +
mov [eax+edx*4] esi +
mov edx [ebp+var_8] +
mov [eax+ebx*4] edx +
lea eax [ebx-1] +
cmp eax [ebp+arg_0] +
jle loc_437D6E  +
push eax  +
mov ecx [ebp+arg_0] +
push ecx  +
call sub_437C40  +
add esp 8 +
lea eax [ebx+1] +
cmp eax [ebp+arg_4] +
jge loc_437D83  +
mov edx [ebp+arg_4] +
push edx  +
push eax  +
call sub_437C40  +
add esp 8 +
pop edi  +
pop esi  +
pop ebx  +
pop ecx  +
pop ecx  +
pop ebp  +
retn   +
***
push ebx  +
push ebx  +
push ebx  +
push esi  +
mov ecx [ebp+arg_0] +
xor edx edx +
mov eax ecx +
shl eax 3 +
sub eax ecx +
mov ebx dword_4DB114 +
mov eax [ebx+eax*4+14h] +
test eax eax +
jz loc_437F2E  +
mov ebx dword_4DB130 +
mov esi [eax] +
mov [ebx+edx*4] esi +
inc edx  +
mov eax [eax+4] +
test eax eax +
jnz loc_437F1B  +
mov eax ecx +
shl eax 3 +
sub eax ecx +
mov ecx dword_4DB114 +
cmp edx [ecx+eax*4] +
jz loc_437F76  +
push 3E8h  +
push offset a_Step2_c_40  +
push offset asc_4DC241  +
push offset stream  +
call _fprintf  +
add esp 10h +
push offset asc_4DC271  +
push offset stream  +
call _fprintf  +
add esp 8 +
push 1  +
call _exit  +
pop ecx  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
push ebx  +
push ebx  +
add esp 0FFFFFFF8h +
xor eax eax +
push ebx  +
push esi  +
push edi  +
mov [ebp+var_4] eax +
mov edx [ebp+arg_0] +
lea ecx [edx+8] +
mov [ebp+var_8] ecx +
mov eax [ebp+arg_4] +
lea edi [eax+8] +
jmp loc_4381CC  +
mov edx [ebp+var_8] +
mov eax [edi] +
mov [edx] eax +
mov eax [ebp+var_8] +
mov ecx [ebp+var_8] +
mov esi [edi+0Ch] +
mov edx [eax-8] +
cmp edx [edi-8] +
mov ebx [ecx+0Ch] +
jnz loc_43811A  +
test esi esi +
jz loc_4381C2  +
test ebx ebx +
jnz loc_438107  +
push 407h  +
push offset a_Step2_c_42  +
push offset asc_4DC30B  +
push offset stream  +
call _fprintf  +
add esp 10h +
push offset asc_4DC33B  +
push offset stream  +
call _fprintf  +
add esp 8 +
push 1  +
call _exit  +
pop ecx  +
mov ecx [esi] +
mov [ebx] ecx +
mov ebx [ebx+4] +
mov esi [esi+4] +
test esi esi +
jnz loc_4380CD  +
jmp loc_4381C2  +
mov eax [ebp+var_8] +
mov edx [eax-8] +
cmp edx [edi-8] +
jl loc_43815B  +
push 40Dh  +
push offset a_Step2_c_43  +
push offset asc_4DC370  +
push offset stream  +
call _fprintf  +
add esp 10h +
push offset asc_4DC3A0  +
push offset stream  +
call _fprintf  +
add esp 8 +
push 1  +
call _exit  +
pop ecx  +
test esi esi +
jz loc_4381B9  +
test ebx ebx +
jnz loc_438199  +
push 40Dh  +
push offset a_Step2_c_44  +
push offset asc_4DC3D5  +
push offset stream  +
call _fprintf  +
add esp 10h +
push offset asc_4DC405  +
push offset stream  +
call _fprintf  +
add esp 8 +
push 1  +
call _exit  +
pop ecx  +
mov ecx [esi] +
mov [ebx] ecx +
mov esi [esi+4] +
test esi esi +
jz loc_4381B2  +
cmp dword ptr [ebx+4] 0 +
jnz loc_4381B2  +
call sub_404A1C  +
mov [ebx+4] eax +
mov ebx [ebx+4] +
test esi esi +
jnz loc_43815F  +
mov eax [edi-8] +
mov edx [ebp+var_8] +
mov [edx-8] eax +
inc [ebp+var_4]  +
add [ebp+var_8] 1Ch +
add edi 1Ch +
mov ecx dword_4D9F20 +
inc ecx  +
cmp ecx [ebp+var_4] +
jge loc_4380AA  +
pop edi  +
pop esi  +
pop ebx  +
pop ecx  +
pop ecx  +
pop ebp  +
retn   +
***
push ebp  +
push ecx  +
push ebx  +
push esi  +
push edi  +
mov esi [ebp+arg_4] +
mov ebx [esi+0B4h] +
mov eax [esi+0A0h] +
mov [esi+98h] eax +
mov edx [esi+9Ch] +
mov [esi+94h] edx +
xor edx edx +
mov eax [esi+98h] +
test eax eax +
jz loc_4382F0  +
inc edx  +
mov eax [eax+4] +
test eax eax +
jnz loc_4382E8  +
mov [esi+88h] edx +
xor edx edx +
mov eax [esi+94h] +
test eax eax +
jz loc_43830A  +
inc edx  +
mov eax [eax+4] +
test eax eax +
jnz loc_438302  +
mov [esi+84h] edx +
xor ecx ecx +
mov dword_4EC394 ecx +
mov dword_4EC390 ecx +
mov dword_4EC38C ecx +
mov dword_4EC388 ecx +
mov eax [ebx+4] +
test eax eax +
jz loc_438344  +
mov edx [eax+1Ch] +
cmp edx [ebx] +
jnz loc_438344  +
push esi  +
mov eax [ebx] +
push eax  +
call sub_4385B4  +
add esp 8 +
mov eax [ebx+0Ch] +
test eax eax +
jz loc_438360  +
mov edx [eax+1Ch] +
cmp edx [ebx+8] +
jnz loc_438360  +
push esi  +
mov ecx [ebx+8] +
push ecx  +
call sub_438648  +
add esp 8 +
push esi  +
mov eax [ebp+arg_0] +
push eax  +
call sub_4384C4  +
add esp 8 +
xor edi edi +
cmp [ebp+arg_0] 0 +
jle loc_438382  +
mov eax [ebp+arg_0] +
dec eax  +
push eax  +
call sub_43539C  +
pop ecx  +
add edi eax +
mov edx [ebp+arg_0] +
cmp edx dword_4D9F20 +
jg loc_438399  +
mov ecx [ebp+arg_0] +
push ecx  +
call sub_43539C  +
pop ecx  +
add edi eax +
mov eax dword_4EC398 +
mov edx dword_4EC39C +
mov [eax] edx +
mov ecx dword_4EC39C +
mov eax dword_4EC3A0 +
mov [ecx+4] eax +
xor edx edx +
mov dword_4EC394 edx +
mov dword_4EC390 edx +
mov dword_4EC38C edx +
mov dword_4EC388 edx +
mov eax [ebx+4] +
test eax eax +
jz loc_4383E8  +
mov ecx [eax+1Ch] +
cmp ecx [ebx] +
jnz loc_4383E8  +
push esi  +
mov eax [ebx] +
push eax  +
call sub_438648  +
add esp 8 +
mov eax [ebx+0Ch] +
test eax eax +
jz loc_438404  +
mov edx [eax+1Ch] +
cmp edx [ebx+8] +
jnz loc_438404  +
push esi  +
mov ecx [ebx+8] +
push ecx  +
call sub_4385B4  +
add esp 8 +
push esi  +
mov eax [ebp+arg_0] +
push eax  +
call sub_4384C4  +
add esp 8 +
xor edx edx +
mov [ebp+var_4] edx +
cmp [ebp+arg_0] 0 +
jle loc_43842A  +
mov ecx [ebp+arg_0] +
dec ecx  +
push ecx  +
call sub_43539C  +
pop ecx  +
add [ebp+var_4] eax +
mov eax [ebp+arg_0] +
cmp eax dword_4D9F20 +
jg loc_438442  +
mov edx [ebp+arg_0] +
push edx  +
call sub_43539C  +
pop ecx  +
add [ebp+var_4] eax +
cmp edi [ebp+var_4] +
jge loc_4384BC  +
mov ecx dword_4EC398 +
mov eax dword_4EC39C +
mov [ecx] eax +
mov edx dword_4EC39C +
mov ecx dword_4EC3A0 +
mov [edx+4] ecx +
xor eax eax +
mov dword_4EC394 eax +
mov dword_4EC390 eax +
mov dword_4EC38C eax +
mov dword_4EC388 eax +
mov eax [ebx+4] +
test eax eax +
jz loc_438493  +
mov edx [eax+1Ch] +
cmp edx [ebx] +
jnz loc_438493  +
push esi  +
mov ecx [ebx] +
push ecx  +
call sub_4385B4  +
add esp 8 +
mov eax [ebx+0Ch] +
test eax eax +
jz loc_4384AF  +
mov edx [eax+1Ch] +
cmp edx [ebx+8] +
jnz loc_4384AF  +
push esi  +
mov ecx [ebx+8] +
push ecx  +
call sub_438648  +
add esp 8 +
push esi  +
mov eax [ebp+arg_0] +
push eax  +
call sub_4384C4  +
add esp 8 +
pop edi  +
pop esi  +
pop ebx  +
pop ecx  +
pop ebp  +
retn   +
***
push ebx  +
push esi  +
push edi  +
mov edx dword_4DB114 +
mov edi [ebp+arg_0] +
mov eax [ebp+arg_4] +
mov esi edi +
mov ecx edi +
shl esi 3 +
shl ecx 3 +
sub esi edi +
sub ecx edi +
shl esi 2 +
add esi edx +
mov ebx [edx+ecx*4+14h] +
add esi 14h +
test ebx ebx +
jz loc_438502  +
cmp eax [ebx] +
jz loc_438502  +
lea esi [ebx+4] +
mov ebx [ebx+4] +
test ebx ebx +
jnz loc_4384F4  +
test ebx ebx +
jnz loc_43853C  +
push 44Ah  +
push offset a_Step2_c_45  +
push offset asc_4DC43A  +
push offset stream  +
call _fprintf  +
add esp 10h +
push offset asc_4DC46A  +
push offset stream  +
call _fprintf  +
add esp 8 +
push 1  +
call _exit  +
pop ecx  +
mov dword_4EC398 esi +
mov dword_4EC39C ebx +
mov eax [ebx+4] +
mov dword_4EC3A0 eax +
mov eax dword_4EC388 +
test eax eax +
jz loc_438564  +
mov [esi] eax +
mov edx dword_4EC38C +
mov [edx+4] ebx +
lea esi [ebx+4] +
mov ebx [ebx+4] +
mov eax dword_4EC390 +
test eax eax +
jz loc_43857E  +
mov [esi] eax +
mov edx dword_4EC394 +
mov [edx+4] ebx +
xor eax eax +
mov edx edi +
shl edx 3 +
sub edx edi +
mov ecx dword_4DB114 +
mov ebx [ecx+edx*4+14h] +
test ebx ebx +
jz loc_43859D  +
inc eax  +
mov ebx [ebx+4] +
test ebx ebx +
jnz loc_438595  +
mov edx edi +
shl edx 3 +
sub edx edi +
mov ecx dword_4DB114 +
mov [ecx+edx*4] eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_4] +
mov ebx [ebp+arg_0] +
mov eax [ebx+98h] +
test eax eax +
jz loc_4385D5  +
mov edx [eax] +
mov [edx] ebx +
mov eax [eax+4] +
test eax eax +
jnz loc_4385CA  +
mov eax [ebx+94h] +
test eax eax +
jz loc_4385EB  +
mov edx [eax] +
mov [edx+1Ch] ebx +
mov eax [eax+4] +
test eax eax +
jnz loc_4385DF  +
call sub_404A1C  +
mov [eax] ebx +
mov ecx dword_4EC388 +
mov [eax+4] ecx +
mov dword_4EC388 eax +
cmp dword_4EC38C 0 +
jnz loc_43860E  +
mov dword_4EC38C eax +
mov esi [ebx+0B4h] +
test esi esi +
jz loc_438641  +
mov eax [esi] +
test eax eax +
jz loc_43862C  +
cmp edi eax +
jz loc_43862C  +
push ebx  +
push eax  +
call sub_4385B4  +
add esp 8 +
mov eax [esi+8] +
test eax eax +
jz loc_438641  +
cmp edi eax +
jz loc_438641  +
push ebx  +
push eax  +
call sub_4385B4  +
add esp 8 +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_4] +
mov ebx [ebp+arg_0] +
mov eax [ebx+98h] +
test eax eax +
jz loc_438669  +
mov edx [eax] +
mov [edx] ebx +
mov eax [eax+4] +
test eax eax +
jnz loc_43865E  +
mov eax [ebx+94h] +
test eax eax +
jz loc_43867F  +
mov edx [eax] +
mov [edx+1Ch] ebx +
mov eax [eax+4] +
test eax eax +
jnz loc_438673  +
call sub_404A1C  +
mov [eax] ebx +
mov edx dword_4EC394 +
test edx edx +
jz loc_438693  +
mov [edx+4] eax +
xor ecx ecx +
mov [eax+4] ecx +
mov dword_4EC394 eax +
cmp dword_4EC390 0 +
jnz loc_4386AB  +
mov dword_4EC390 eax +
mov esi [ebx+0B4h] +
test esi esi +
jz loc_4386DE  +
mov eax [esi] +
test eax eax +
jz loc_4386C9  +
cmp edi eax +
jz loc_4386C9  +
push ebx  +
push eax  +
call sub_438648  +
add esp 8 +
mov eax [esi+8] +
test eax eax +
jz loc_4386DE  +
cmp edi eax +
jz loc_4386DE  +
push ebx  +
push eax  +
call sub_438648  +
add esp 8 +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
push edi  +
xor esi esi +
jmp loc_438710  +
mov eax esi +
shl eax 3 +
sub eax esi +
mov edx dword_4D9F1C +
mov ebx [edx+eax*4+14h] +
xor eax eax +
test ebx ebx +
jz loc_43870F  +
mov edx [ebx] +
mov [edx+70h] eax +
inc eax  +
mov ebx [ebx+4] +
test ebx ebx +
jnz loc_438702  +
inc esi  +
mov ecx dword_4D9F20 +
inc ecx  +
cmp esi ecx +
jle loc_4386EB  +
xor esi esi +
jmp loc_4387C0  +
mov eax esi +
mov edx dword_4D9F1C +
shl eax 3 +
xor ecx ecx +
sub eax esi +
xor edi edi +
mov ebx [edx+eax*4+14h] +
mov [edx+eax*4+10h] ecx +
test ebx ebx +
jz loc_438777  +
inc edi  +
call sub_404A1C  +
mov edx esi +
shl edx 3 +
sub edx esi +
mov ecx dword_4D9F1C +
mov ecx [ecx+edx*4+10h] +
mov [eax+4] ecx +
mov ecx dword_4D9F1C +
mov [ecx+edx*4+10h] eax +
mov edx [ebx] +
mov [eax] edx +
mov eax [ebx] +
push eax  +
call sub_4387D4  +
pop ecx  +
mov ebx [ebx+4] +
test ebx ebx +
jnz loc_43873F  +
mov eax esi +
shl eax 3 +
sub eax esi +
mov edx dword_4D9F1C +
cmp edi [edx+eax*4] +
jz loc_4387BF  +
push 488h  +
push offset a_Step2_c_46  +
push offset asc_4DC49F  +
push offset stream  +
call _fprintf  +
add esp 10h +
push offset asc_4DC4CF  +
push offset stream  +
call _fprintf  +
add esp 8 +
push 1  +
call _exit  +
pop ecx  +
inc esi  +
mov ecx dword_4D9F20 +
inc ecx  +
cmp esi ecx +
jle loc_438722  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push ebx  +
push esi  +
push edi  +
mov ebx [ebp+arg_0] +
mov esi offset dword_4DB120 +
test ebx ebx +
jnz loc_43881C  +
push 48Eh  +
push offset a_Step2_c_47  +
push offset asc_4DC504  +
push offset stream  +
call _fprintf  +
add esp 10h +
push offset asc_4DC534  +
push offset stream  +
call _fprintf  +
add esp 8 +
push 1  +
call _exit  +
pop ecx  +
xor edx edx +
mov eax [ebx+94h] +
test eax eax +
jz loc_438837  +
mov ecx [esi] +
mov edi [eax] +
mov [ecx+edx*4] edi +
inc edx  +
mov eax [eax+4] +
test eax eax +
jnz loc_438828  +
push offset sub_438910  +
push 4  +
mov eax [ebx+84h] +
push eax  +
mov edx [esi] +
push edx  +
call _qsort  +
add esp 10h +
xor edx edx +
mov eax [ebx+94h] +
test eax eax +
jz loc_43886B  +
mov ecx [esi] +
mov ecx [ecx+edx*4] +
mov [eax] ecx +
inc edx  +
mov eax [eax+4] +
test eax eax +
jnz loc_43885C  +
xor eax eax +
mov [ebx+0A8h] eax +
mov [ebx+0A4h] eax +
test edx edx +
jz loc_438893  +
mov ecx [esi] +
mov eax [ecx] +
mov [ebx+0A4h] eax +
mov ecx [esi] +
mov edx [ecx+edx*4-4] +
mov [ebx+0A8h] edx +
xor edx edx +
mov eax [ebx+98h] +
test eax eax +
jz loc_4388AE  +
mov ecx [esi] +
mov edi [eax] +
mov [ecx+edx*4] edi +
inc edx  +
mov eax [eax+4] +
test eax eax +
jnz loc_43889F  +
push offset sub_438944  +
push 4  +
mov eax [ebx+88h] +
push eax  +
mov edx [esi] +
push edx  +
call _qsort  +
add esp 10h +
xor edx edx +
mov eax [ebx+98h] +
test eax eax +
jz loc_4388E2  +
mov ecx [esi] +
mov ecx [ecx+edx*4] +
mov [eax] ecx +
inc edx  +
mov eax [eax+4] +
test eax eax +
jnz loc_4388D3  +
xor eax eax +
mov [ebx+0B0h] eax +
mov [ebx+0ACh] eax +
test edx edx +
jz loc_43890A  +
mov ecx [esi] +
mov eax [ecx] +
mov [ebx+0ACh] eax +
mov ecx [esi] +
mov edx [ecx+edx*4-4] +
mov [ebx+0B0h] edx +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
push ebx  +
mov edx [ebp+arg_4] +
mov eax [ebp+arg_0] +
mov ecx [eax] +
mov ebx [edx] +
mov ebx [ebx] +
mov ecx [ecx] +
mov ecx [ecx+70h] +
mov ebx [ebx+70h] +
cmp ebx ecx +
jge loc_438934  +
mov eax 1 +
pop ebx  +
pop ebp  +
retn   +
cmp ebx ecx +
jle loc_43893E  +
or eax 0FFFFFFFFh +
pop ebx  +
pop ebp  +
retn   +
xor eax eax +
pop ebx  +
pop ebp  +
retn   +
***
push ebx  +
mov edx [ebp+arg_4] +
mov eax [ebp+arg_0] +
mov ecx [eax] +
mov ebx [edx] +
mov ebx [ebx+1Ch] +
mov ecx [ecx+1Ch] +
mov ecx [ecx+70h] +
mov ebx [ebx+70h] +
cmp ebx ecx +
jge loc_43896A  +
mov eax 1 +
pop ebx  +
pop ebp  +
retn   +
cmp ebx ecx +
jle loc_438974  +
or eax 0FFFFFFFFh +
pop ebx  +
pop ebp  +
retn   +
xor eax eax +
pop ebx  +
pop ebp  +
retn   +
***
cmp dword_4D9F1C 0 +
push offset unk_4DC65A  +
push offset aAssertion1Abou  +
call sub_42A3F8  +
add esp 8 +
push offset unk_4DC67F  +
push offset aAssertion2Abou  +
call sub_42A3F8  +
add esp 8 +
mov eax dword_4EC360 +
add eax 2 +
cmp eax dword_4EC3A4 +
jle loc_438B05  +
mov eax dword_4DC570 +
test eax eax +
jz loc_438A4F  +
push eax  +
call _free  +
pop ecx  +
mov eax dword_4DC57C +
test eax eax +
jz loc_438A5F  +
push eax  +
call _free  +
pop ecx  +
mov eax dword_4DC580 +
test eax eax +
jz loc_438A6F  +
push eax  +
call _free  +
pop ecx  +
mov edx dword_4EC360 +
add edx 2 +
shl edx 2 +
push edx  +
call _malloc  +
pop ecx  +
mov dword_4DC570 eax +
mov ecx dword_4EC360 +
add ecx 2 +
shl ecx 2 +
push ecx  +
call _malloc  +
pop ecx  +
mov dword_4DC57C eax +
mov eax dword_4EC360 +
add eax 2 +
shl eax 2 +
push eax  +
call _malloc  +
pop ecx  +
mov ebx eax +
mov dword_4DC580 ebx +
mov eax dword_4DC57C +
mov dword_4DC574 eax +
mov dword_4DC578 ebx +
cmp dword_4DC570 0 +
jz loc_438AE4  +
cmp dword_4DC574 0 +
jz loc_438AE4  +
cmp dword_4DC578 0 +
jnz loc_438AF6  +
push offset unk_4DC691  +
push offset aMemoryExhaus_9  +
call sub_42A3F8  +
add esp 8 +
mov edx dword_4EC360 +
add edx 2 +
mov dword_4EC3A4 edx +
pop ebx  +
retn   +
***
push edi  +
push ebp  +
push ecx  +
mov ebp offset dword_4EBD8C +
mov ebx dword_4CD130 +
test ebx ebx +
jz loc_438B43  +
push ebx  +
call sub_42DDF8  +
pop ecx  +
mov eax [ebp+0] +
cmp eax 1 +
jz loc_438B30  +
cmp eax 2 +
jnz loc_438B3C  +
mov esi [ebx+18h] +
mov eax [ebx+1Ch] +
mov [ebx+18h] eax +
mov [ebx+1Ch] esi +
mov ebx [ebx+5Ch] +
test ebx ebx +
jnz loc_438B1C  +
mov eax [ebp+0] +
cmp eax 1 +
jz loc_438B50  +
cmp eax 2 +
jnz loc_438B6D  +
mov ebx dword_4CD144 +
test ebx ebx +
jz loc_438B6D  +
mov esi [ebx+18h] +
mov eax [ebx+1Ch] +
mov [ebx+18h] eax +
mov [ebx+1Ch] esi +
mov ebx [ebx+5Ch] +
test ebx ebx +
jnz loc_438B5A  +
mov ebx dword_4CD14C +
test ebx ebx +
jz loc_438C64  +
cmp byte ptr [ebx+68h] 0 +
jz loc_438C36  +
mov eax [ebx+94h] +
xor esi esi +
test eax eax +
jz loc_438B99  +
mov eax [eax+4] +
inc esi  +
test eax eax +
jnz loc_438B91  +
mov eax [ebx+98h] +
xor edi edi +
test eax eax +
jz loc_438BAD  +
mov eax [eax+4] +
inc edi  +
test eax eax +
jnz loc_438BA5  +
mov [esp+4+var_4] esi +
cmp esi edi +
jge loc_438BB7  +
mov [esp+4+var_4] edi +
cmp dword ptr [ebx+0B4h] 0 +
jnz loc_438BF6  +
push 96h  +
push offset a_Step3_c_0  +
push offset asc_4DC692  +
push offset stream  +
call _fprintf  +
add esp 10h +
push offset asc_4DC6C2  +
push offset stream  +
call _fprintf  +
add esp 8 +
push 1  +
call _exit  +
pop ecx  +
mov eax [ebx+0B4h] +
mov edx [eax] +
mov ecx [edx+1Ch] +
mov [ebx+1Ch] ecx +
mov eax [esp+4+var_4] +
inc eax  +
imul  dword_4EBD84 +
mov [ebx+18h] eax +
cmp dword_4D4B68 1 +
jnz loc_438C40  +
cmp esi 1 +
jg loc_438C28  +
test edi edi +
jnz loc_438C28  +
xor edx edx +
mov [ebx+18h] edx +
test esi esi +
jnz loc_438C40  +
dec edi  +
jg loc_438C40  +
xor ecx ecx +
mov [ebx+18h] ecx +
jmp loc_438C40  +
xor eax eax +
xor edx edx +
mov [ebx+18h] eax +
mov [ebx+1Ch] edx +
mov eax [ebp+0] +
cmp eax 1 +
jz loc_438C4D  +
cmp eax 2 +
jnz loc_438C59  +
mov esi [ebx+18h] +
mov eax [ebx+1Ch] +
mov [ebx+18h] eax +
mov [ebx+1Ch] esi +
mov ebx [ebx+5Ch] +
test ebx ebx +
jnz loc_438B7B  +
pop edx  +
pop ebp  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
push ebp  +
add esp 0FFFFFFF8h +
cmp dword_4EBD88 5 +
jge loc_438C86  +
mov dword_4EBD88 5 +
cmp dword_4EBD84 5 +
jge loc_438C99  +
mov dword_4EBD84 5 +
cmp dword_4EBDB4 0 +
jnz loc_438CD3  +
cmp dword_4D4B7C 0 +
jz loc_438CC2  +
mov eax dword_4EBD84 +
shl eax 2 +
mov ecx 5 +
cdq   +
idiv  ecx +
mov dword_4EBDB4 eax +
jmp loc_438CD3  +
mov eax dword_4EBD84 +
sar eax 1 +
jns loc_438CCE  +
adc eax 0 +
mov dword_4EBDB4 eax +
cmp dword_4D4B80 1 +
jge loc_438CE6  +
mov dword_4D4B80 1 +
cmp dword_4D4B80 64h +
jle loc_438CF9  +
mov dword_4D4B80 64h +
mov edx dword_4EBD80 +
mov [esp+8+var_8] edx +
mov eax [esp+8+var_8] +
mov ecx dword_4EBDBC +
add eax ecx +
dec eax  +
cdq   +
idiv  ecx +
imul  ecx +
mov [esp+8+var_8] eax +
xor eax eax +
mov [esp+8+var_4] eax +
jmp loc_438E5E  +
mov eax [esp+8+var_4] +
mov ecx dword_4D9F1C +
mov edx eax +
xor esi esi +
shl eax 3 +
mov ebp dword_4EBD7C +
sub eax edx +
mov ebx [ecx+eax*4+14h] +
test ebx ebx +
jz loc_438DCE  +
mov ecx [ebx] +
cmp dword ptr [ecx+18h] 0 +
jnz loc_438D7F  +
cmp dword ptr [ecx+1Ch] 0 +
jnz loc_438D7F  +
mov eax [ecx+18h] +
sar eax 1 +
jns loc_438D5E  +
adc eax 0 +
add eax ebp +
mov edi dword_4EBDC0 +
add eax edi +
dec eax  +
cdq   +
idiv  edi +
imul  edi +
mov edx [ecx+18h] +
sar edx 1 +
jns loc_438D78  +
adc edx 0 +
sub eax edx +
mov [ecx+54h] eax +
jmp loc_438DA8  +
mov eax [ecx+18h] +
sar eax 1 +
jns loc_438D89  +
adc eax 0 +
add eax ebp +
mov edi dword_4EBDB8 +
add eax edi +
dec eax  +
cdq   +
idiv  edi +
imul  edi +
mov edx [ecx+18h] +
sar edx 1 +
jns loc_438DA3  +
adc edx 0 +
sub eax edx +
mov [ecx+54h] eax +
mov eax [esp+8+var_8] +
mov [ecx+58h] eax +
mov ebp [ecx+54h] +
add ebp [ecx+18h] +
add ebp dword_4EBD84 +
mov eax [ecx+1Ch] +
cmp esi eax +
jge loc_438DC3  +
mov esi eax +
mov ebx [ebx+4] +
test ebx ebx +
jnz loc_438D46  +
cmp dword_4EBDA8 1 +
jnz loc_438E0A  +
mov eax [esp+8+var_4] +
mov edx eax +
shl eax 3 +
sub eax edx +
mov ecx dword_4D9F1C +
mov ebx [ecx+eax*4+14h] +
test ebx ebx +
jz loc_438E3D  +
mov eax [ebx] +
mov edx esi +
sub edx [eax+1Ch] +
sar edx 1 +
jns loc_438DFE  +
adc edx 0 +
add [eax+58h] edx +
mov ebx [ebx+4] +
test ebx ebx +
jnz loc_438DF0  +
jmp loc_438E3D  +
cmp dword_4EBDA8 2 +
jnz loc_438E3D  +
mov ecx [esp+8+var_4] +
mov eax ecx +
shl ecx 3 +
sub ecx eax +
mov edx dword_4D9F1C +
mov ebx [edx+ecx*4+14h] +
test ebx ebx +
jz loc_438E3D  +
mov eax [ebx] +
mov edx esi +
sub edx [eax+1Ch] +
add [eax+58h] edx +
mov ebx [ebx+4] +
test ebx ebx +
jnz loc_438E2C  +
add esi dword_4EBD88 +
add [esp+8+var_8] esi +
mov eax [esp+8+var_8] +
mov ecx dword_4EBDBC +
add eax ecx +
dec eax  +
cdq   +
idiv  ecx +
imul  ecx +
mov [esp+8+var_8] eax +
inc [esp+8+var_4]  +
mov eax dword_4D9F20 +
inc eax  +
cmp eax [esp+8+var_4] +
jge loc_438D21  +
pop ecx  +
pop edx  +
pop ebp  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
push edi  +
xor edx edx +
mov eax dword_4D9F1C +
push ecx  +
add eax 14h +
mov ebx 7FFFFFFFh +
mov ecx ebx +
mov [esp+4+var_4] eax +
jmp loc_438F5B  +
mov eax [esp+4+var_4] +
mov eax [eax] +
test eax eax +
jz loc_438F56  +
mov edi [eax] +
mov esi [edi+54h] +
cmp ecx esi +
jle loc_438F46  +
mov ecx esi +
mov esi [edi+58h] +
cmp ebx esi +
jle loc_438F4F  +
mov ebx esi +
mov eax [eax+4] +
test eax eax +
jnz loc_438F3B  +
inc edx  +
add [esp+4+var_4] 1Ch +
mov eax dword_4D9F20 +
inc eax  +
cmp edx eax +
jle loc_438F32  +
sub ecx dword_4EBD7C +
sub ebx dword_4EBD80 +
mov eax ecx +
mov esi dword_4EBDB8 +
cdq   +
idiv  esi +
imul  esi +
mov ecx eax +
mov eax ebx +
cdq   +
idiv  esi +
imul  esi +
mov ebx eax +
xor edx edx +
jmp loc_438FB4  +
mov eax edx +
shl eax 3 +
sub eax edx +
mov esi dword_4D9F1C +
mov eax [esi+eax*4+14h] +
test eax eax +
jz loc_438FB3  +
mov esi [eax] +
sub [esi+54h] ecx +
mov esi [eax] +
sub [esi+58h] ebx +
mov eax [eax+4] +
test eax eax +
jnz loc_438FA2  +
inc edx  +
mov eax dword_4D9F20 +
inc eax  +
cmp edx eax +
jle loc_438F8D  +
pop edx  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push ebp  +
push ecx  +
xor esi esi +
jmp loc_438FEF  +
mov eax esi +
shl eax 3 +
sub eax esi +
mov edx dword_4D9F1C +
mov eax [edx+eax*4+14h] +
test eax eax +
jz loc_438FEE  +
mov edx [eax] +
mov byte ptr [edx+66h] 0 +
mov eax [eax+4] +
test eax eax +
jnz loc_438FE1  +
inc esi  +
mov ecx dword_4D9F20 +
inc ecx  +
cmp esi ecx +
jle loc_438FCC  +
mov eax dword_4EBD7C +
mov [esp+4+var_4] 1 +
sub eax dword_4EBD84 +
add eax 0FFFFFFFBh +
mov dword_4EC3A8 eax +
mov eax dword_4D9F1C +
xor edx edx +
xor ebp ebp +
xor esi esi +
mov [esp+4+var_4] edx +
lea ecx [eax+14h] +
mov ebx 7FFFFFFFh +
jmp loc_439051  +
mov eax [ecx] +
test eax eax +
jz loc_43904D  +
mov edx [eax] +
cmp byte ptr [edx+66h] 0 +
jnz loc_439046  +
cmp ebx [edx+54h] +
jle loc_43904D  +
mov ebp edx +
mov ebx [ebp+54h] +
jmp loc_43904D  +
mov eax [eax+4] +
test eax eax +
jnz loc_439032  +
inc esi  +
add ecx 1Ch +
mov eax dword_4D9F20 +
inc eax  +
cmp esi eax +
jle loc_43902C  +
test ebp ebp +
jz loc_4390EC  +
cmp byte ptr [ebp+66h] 0 +
jz loc_43909F  +
push 0F8h  +
push offset a_Step3_c_2  +
push offset asc_4DC75C  +
push offset stream  +
call _fprintf  +
add esp 10h +
push offset asc_4DC78C  +
push offset stream  +
call _fprintf  +
add esp 8 +
push 1  +
call _exit  +
pop ecx  +
mov [esp+4+var_4] 1 +
mov eax dword_4EC3A8 +
mov ecx eax +
mov edx dword_4EBD84 +
add ecx edx +
add ecx 5 +
cmp ebx ecx +
jle loc_4390E5  +
mov esi ebx +
sub esi eax +
sub esi edx +
add esi 0FFFFFFFBh +
mov eax esi +
mov ecx dword_4EBDB8 +
cdq   +
idiv  ecx +
imul  ecx +
mov esi eax +
push esi  +
push ebp  +
call sub_4391C8  +
add esp 8 +
push esi  +
call sub_4390FC  +
pop ecx  +
push ebp  +
call sub_439258  +
pop ecx  +
cmp [esp+4+var_4] 0 +
jnz loc_439014  +
pop edx  +
pop ebp  +
pop esi  +
pop ebx  +
retn   +
***
push ecx  +
push ebx  +
push esi  +
mov ebx 1 +
xor ebx ebx +
xor eax eax +
mov [ebp+var_4] eax +
xor esi esi +
mov eax dword_4D9F1C +
lea ecx [eax+14h] +
jmp loc_439152  +
mov eax [ecx] +
test eax eax +
jz loc_43914A  +
mov edx [eax] +
cmp byte ptr [edx+66h] 0 +
jnz loc_439143  +
mov edx [eax+4] +
test edx edx +
jz loc_439143  +
mov edx [edx] +
cmp byte ptr [edx+66h] 0 +
jz loc_439143  +
mov eax [eax] +
mov ebx 1 +
mov [ebp+var_4] eax +
jmp loc_43914A  +
mov eax [eax+4] +
test eax eax +
jnz loc_439120  +
test ebx ebx +
jnz loc_43915C  +
inc esi  +
add ecx 1Ch +
mov eax dword_4D9F20 +
inc eax  +
cmp esi eax +
jle loc_43911A  +
test ebx ebx +
jz loc_4391B9  +
mov edx [ebp+var_4] +
cmp byte ptr [edx+66h] 0 +
jz loc_43919F  +
push 110h  +
push offset a_Step3_c_3  +
push offset asc_4DC7C1  +
push offset stream  +
call _fprintf  +
add esp 10h +
push offset asc_4DC7F1  +
push offset stream  +
call _fprintf  +
add esp 8 +
push 1  +
call _exit  +
pop ecx  +
mov ecx [ebp+arg_0] +
push ecx  +
mov eax [ebp+var_4] +
push eax  +
call sub_4391C8  +
add esp 8 +
mov edx [ebp+var_4] +
push edx  +
call sub_439258  +
pop ecx  +
test ebx ebx +
jnz loc_439107  +
pop esi  +
pop ebx  +
pop ecx  +
pop ebp  +
retn   +
***
push ebx  +
push esi  +
push edi  +
mov esi [ebp+arg_4] +
mov edi [ebp+arg_0] +
cmp byte ptr [edi+66h] 0 +
jnz loc_439251  +
mov byte ptr [edi+66h] 1 +
sub [edi+54h] esi +
mov eax [edi+0B4h] +
test eax eax +
jz loc_439212  +
mov edx [eax] +
test edx edx +
jz loc_4391FB  +
push esi  +
push edx  +
call sub_4391C8  +
add esp 8 +
mov ecx [edi+0B4h] +
mov eax [ecx+8] +
test eax eax +
jz loc_439212  +
push esi  +
push eax  +
call sub_4391C8  +
add esp 8 +
mov ebx [edi+98h] +
test ebx ebx +
jz loc_439232  +
push esi  +
mov eax [ebx] +
mov edx [eax+1Ch] +
push edx  +
call sub_4391C8  +
add esp 8 +
mov ebx [ebx+4] +
test ebx ebx +
jnz loc_43921C  +
mov ebx [edi+94h] +
test ebx ebx +
jz loc_439251  +
push esi  +
mov eax [ebx] +
mov edx [eax] +
push edx  +
call sub_4391C8  +
add esp 8 +
mov ebx [ebx+4] +
test ebx ebx +
jnz loc_43923C  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
cmp byte ptr [esi+66h] 2 +
jz loc_4392E1  +
mov byte ptr [esi+66h] 2 +
mov eax [esi+54h] +
add eax [esi+18h] +
cmp eax dword_4EC3A8 +
jle loc_43927D  +
mov dword_4EC3A8 eax +
mov eax [esi+0B4h] +
test eax eax +
jz loc_4392A8  +
mov edx [eax] +
test edx edx +
jz loc_439294  +
push edx  +
call sub_439258  +
pop ecx  +
mov ecx [esi+0B4h] +
mov eax [ecx+8] +
test eax eax +
jz loc_4392A8  +
push eax  +
call sub_439258  +
pop ecx  +
mov ebx [esi+98h] +
test ebx ebx +
jz loc_4392C5  +
mov eax [ebx] +
mov edx [eax+1Ch] +
push edx  +
call sub_439258  +
pop ecx  +
mov ebx [ebx+4] +
test ebx ebx +
jnz loc_4392B2  +
mov ebx [esi+94h] +
test ebx ebx +
jz loc_4392E1  +
mov eax [ebx] +
mov edx [eax] +
push edx  +
call sub_439258  +
pop ecx  +
mov ebx [ebx+4] +
test ebx ebx +
jnz loc_4392CF  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
push edi  +
xor esi esi +
jmp loc_439374  +
mov eax esi +
shl eax 3 +
sub eax esi +
mov edx dword_4D9F1C +
mov ebx [edx+eax*4+14h] +
test ebx ebx +
jz loc_439373  +
mov edx [ebx] +
mov eax [edx+0B4h] +
xor ecx ecx +
test eax eax +
jz loc_439361  +
cmp dword ptr [eax] 0 +
jz loc_43933A  +
mov edi [eax] +
mov edi [edi+54h] +
cmp edi [edx+54h] +
jge loc_43933A  +
mov edi [eax+4] +
mov edi [edi+30h] +
imul edi dword_4D4B78 +
test edi edi +
jnz loc_43933A  +
mov ecx 1 +
cmp dword ptr [eax+8] 0 +
jz loc_439361  +
mov edi [eax+8] +
mov edi [edi+54h] +
cmp edi [edx+54h] +
jge loc_439361  +
mov eax [eax+0Ch] +
mov edi [eax+30h] +
imul edi dword_4D4B78 +
test edi edi +
jnz loc_439361  +
mov ecx 1 +
test ecx ecx +
jz loc_43936C  +
push edx  +
call sub_439388  +
pop ecx  +
mov ebx [ebx+4] +
test ebx ebx +
jnz loc_439307  +
inc esi  +
mov eax dword_4D9F20 +
inc eax  +
cmp esi eax +
jle loc_4392F2  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push ebx  +
push ebx  +
push edi  +
push edi  +
push ebp  +
push ecx  +
xor eax eax +
mov edi eax +
mov esi eax +
mov [esp+4+var_4] eax +
xor ebp ebp +
jmp loc_439729  +
mov eax ebp +
shl eax 3 +
sub eax ebp +
mov edx dword_4D9F1C +
mov ebx [edx+eax*4+14h] +
test ebx ebx +
jz loc_439728  +
mov eax [ebx] +
push eax  +
call sub_43BCA8  +
pop ecx  +
test eax eax +
jge loc_43970E  +
neg eax  +
add esi eax +
mov edx [ebx] +
push edx  +
call sub_43BDF0  +
pop ecx  +
test eax eax +
jge loc_43971F  +
neg eax  +
add edi eax +
mov ebx [ebx+4] +
test ebx ebx +
jnz loc_4396FF  +
inc ebp  +
mov ecx dword_4D9F20 +
inc ecx  +
cmp ebp ecx +
jle loc_4396EA  +
cmp esi dword_4DC588 +
jge loc_439758  +
mov [esp+4+var_4] 1 +
mov dword_4DC588 esi +
mov dword_4DC584 esi +
xor eax eax +
mov dword_4DC594 eax +
jmp loc_439782  +
cmp esi dword_4DC584 +
jge loc_43976D  +
mov [esp+4+var_4] 1 +
mov dword_4DC584 esi +
cmp dword_4DC594 1 +
jge loc_439782  +
mov dword_4DC584 esi +
inc dword_4DC594  +
cmp edi dword_4DC590 +
jge loc_4397A6  +
mov [esp+4+var_4] 1 +
mov dword_4DC590 edi +
mov dword_4DC58C edi +
xor eax eax +
mov dword_4DC598 eax +
jmp loc_4397D0  +
cmp edi dword_4DC58C +
jge loc_4397BB  +
mov [esp+4+var_4] 1 +
mov dword_4DC58C edi +
cmp dword_4DC598 1 +
jge loc_4397D0  +
mov dword_4DC58C edi +
inc dword_4DC598  +
mov eax [esp+4+var_4] +
pop edx  +
pop ebp  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push ebx  +
push esi  +
push edi  +
xor edi edi +
xor ebx ebx +
cmp [ebp+arg_0] 0 +
jz loc_43984A  +
mov esi 1 +
jmp loc_43981E  +
mov eax 1 +
sub eax ebx +
mov ebx eax +
push ebx  +
push esi  +
call sub_439B5C  +
add esp 8 +
add edi eax +
mov edx 1 +
sub edx ebx +
mov ebx edx +
push ebx  +
push esi  +
call sub_439B5C  +
add esp 8 +
add edi eax +
inc esi  +
mov ecx dword_4D9F20 +
inc ecx  +
cmp esi ecx +
jle loc_4397F3  +
cmp dword_4D4B5C 1 +
jnz loc_43984A  +
xor esi esi +
jmp loc_439840  +
push esi  +
call sub_43A4CC  +
pop ecx  +
add edi eax +
inc esi  +
mov eax dword_4D9F20 +
inc eax  +
cmp esi eax +
jle loc_439836  +
mov esi dword_4D9F20 +
test esi esi +
jl loc_439883  +
mov eax 1 +
sub eax ebx +
mov ebx eax +
push ebx  +
push esi  +
call sub_439A24  +
add esp 8 +
add edi eax +
mov edx 1 +
sub edx ebx +
mov ebx edx +
push ebx  +
push esi  +
call sub_439A24  +
add esp 8 +
add edi eax +
dec esi  +
test esi esi +
jge loc_439854  +
cmp dword_4D4B5C 1 +
jnz loc_4398A4  +
xor esi esi +
jmp loc_43989A  +
push esi  +
call sub_43A4CC  +
pop ecx  +
add edi eax +
inc esi  +
mov eax dword_4D9F20 +
inc eax  +
cmp esi eax +
jle loc_439890  +
cmp [ebp+arg_0] 0 +
jnz loc_439908  +
mov esi 1 +
jmp loc_4398DC  +
mov eax 1 +
sub eax ebx +
mov ebx eax +
push ebx  +
push esi  +
call sub_439B5C  +
add esp 8 +
add edi eax +
mov edx 1 +
sub edx ebx +
mov ebx edx +
push ebx  +
push esi  +
call sub_439B5C  +
add esp 8 +
add edi eax +
inc esi  +
mov ecx dword_4D9F20 +
inc ecx  +
cmp esi ecx +
jle loc_4398B1  +
cmp dword_4D4B5C 1 +
jnz loc_439908  +
xor esi esi +
jmp loc_4398FE  +
push esi  +
call sub_43A4CC  +
pop ecx  +
add edi eax +
inc esi  +
mov eax dword_4D9F20 +
inc eax  +
cmp esi eax +
jle loc_4398F4  +
cmp dword_4D4B4C 0 +
jz loc_43996B  +
mov esi dword_4D9F20 +
test esi esi +
jl loc_43994A  +
mov eax 1 +
sub eax ebx +
mov ebx eax +
push ebx  +
push esi  +
call sub_439C8C  +
add esp 8 +
add edi eax +
mov edx 1 +
sub edx ebx +
mov ebx edx +
push ebx  +
push esi  +
call sub_439C8C  +
add esp 8 +
add edi eax +
dec esi  +
test esi esi +
jge loc_43991B  +
cmp dword_4D4B5C 1 +
jnz loc_43996B  +
xor esi esi +
jmp loc_439961  +
push esi  +
call sub_43A4CC  +
pop ecx  +
add edi eax +
inc esi  +
mov eax dword_4D9F20 +
inc eax  +
cmp esi eax +
jle loc_439957  +
test edi edi +
jz loc_439976  +
mov eax 1 +
jmp loc_439978  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
push ebx  +
mov eax [ebp+arg_0] +
test eax eax +
jnz loc_4399DA  +
xor eax eax +
pop ebp  +
retn   +
mov eax [eax+98h] +
xor edx edx +
test eax eax +
jz loc_4399EE  +
inc edx  +
mov eax [eax+4] +
test eax eax +
jnz loc_4399E6  +
dec edx  +
setz al  +
and eax 1 +
pop ebp  +
retn   +
***
mov eax [ebp+arg_0] +
test eax eax +
jnz loc_439A06  +
xor eax eax +
pop ebp  +
retn   +
mov eax [eax+94h] +
xor edx edx +
test eax eax +
jz loc_439A1A  +
inc edx  +
mov eax [eax+4] +
test eax eax +
jnz loc_439A12  +
dec edx  +
setz al  +
and eax 1 +
pop ebp  +
retn   +
***
push ebx  +
push esi  +
push edi  +
mov eax [ebp+arg_0] +
cmp eax dword_4D9F20 +
jle loc_439A6B  +
push 1DDh  +
push offset a_Step3_c_5  +
push offset asc_4DC88B  +
push offset stream  +
call _fprintf  +
add esp 10h +
push offset asc_4DC8BB  +
push offset stream  +
call _fprintf  +
add esp 8 +
push 1  +
call _exit  +
pop ecx  +
mov edx [ebp+arg_0] +
push edx  +
call sub_43C40C  +
pop ecx  +
mov edx dword_4D9F1C +
mov ecx [ebp+arg_0] +
xor esi esi +
mov eax ecx +
mov edi 1 +
shl ecx 3 +
sub ecx eax +
mov ebx [edx+ecx*4+14h] +
test ebx ebx +
jz loc_439AEF  +
mov eax [ebx] +
push eax  +
call sub_43BCA8  +
pop ecx  +
mov edx dword_4DC570 +
mov [edx+esi*4] eax +
test edi edi +
jge loc_439AC4  +
mov ecx dword_4DC570 +
cmp dword ptr [ecx+esi*4] 0 +
jl loc_439AC4  +
mov eax dword_4DC574 +
mov dword ptr [eax+esi*4] 1 +
jmp loc_439AD1  +
mov edx dword_4DC574 +
mov dword ptr [edx+esi*4] 7FFFFFFFh +
mov ecx dword_4DC570 +
cmp dword ptr [ecx+esi*4] 0 +
jge loc_439AE2  +
or edi 0FFFFFFFFh +
jmp loc_439AE7  +
mov edi 1 +
inc esi  +
mov ebx [ebx+4] +
test ebx ebx +
jnz loc_439A94  +
mov eax dword_4DC574 +
mov dword ptr [eax] 1 +
cmp dword_4D4B5C 1 +
jnz loc_439B44  +
mov edx [ebp+arg_0] +
mov ecx edx +
shl edx 3 +
sub edx ecx +
mov eax dword_4D9F1C +
mov ebx [eax+edx*4+14h] +
test ebx ebx +
jz loc_439B32  +
mov eax [ebx] +
push eax  +
call sub_4399CC  +
pop ecx  +
mov edx [ebx] +
mov [edx+80h] eax +
mov ebx [ebx+4] +
test ebx ebx +
jnz loc_439B1A  +
mov ecx [ebp+arg_4] +
push ecx  +
mov eax [ebp+arg_0] +
push eax  +
call sub_43A0E0  +
add esp 8 +
jmp loc_439B54  +
mov edx [ebp+arg_4] +
push edx  +
mov ecx [ebp+arg_0] +
push ecx  +
call sub_439DD8  +
add esp 8 +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
push ebx  +
push esi  +
push edi  +
cmp [ebp+arg_0] 0 +
jg loc_439B9E  +
push 1ECh  +
push offset a_Step3_c_6  +
push offset asc_4DC8F0  +
push offset stream  +
call _fprintf  +
add esp 10h +
push offset asc_4DC920  +
push offset stream  +
call _fprintf  +
add esp 8 +
push 1  +
call _exit  +
pop ecx  +
mov eax [ebp+arg_0] +
push eax  +
call sub_43C40C  +
mov edx [ebp+arg_0] +
pop ecx  +
mov ecx edx +
mov eax dword_4D9F1C +
shl edx 3 +
xor esi esi +
sub edx ecx +
mov edi 1 +
mov ebx [eax+edx*4+14h] +
test ebx ebx +
jz loc_439C21  +
mov eax [ebx] +
push eax  +
call sub_43BDF0  +
pop ecx  +
mov edx dword_4DC570 +
mov [edx+esi*4] eax +
test edi edi +
jge loc_439BF6  +
mov ecx dword_4DC570 +
cmp dword ptr [ecx+esi*4] 0 +
jl loc_439BF6  +
mov eax dword_4DC574 +
mov dword ptr [eax+esi*4] 1 +
jmp loc_439C03  +
mov edx dword_4DC574 +
mov dword ptr [edx+esi*4] 7FFFFFFFh +
mov ecx dword_4DC570 +
cmp dword ptr [ecx+esi*4] 0 +
jge loc_439C14  +
or edi 0FFFFFFFFh +
jmp loc_439C19  +
mov edi 1 +
inc esi  +
mov ebx [ebx+4] +
test ebx ebx +
jnz loc_439BC6  +
mov eax dword_4DC574 +
mov dword ptr [eax] 1 +
cmp dword_4D4B5C 1 +
jnz loc_439C76  +
mov edx [ebp+arg_0] +
mov ecx edx +
shl edx 3 +
sub edx ecx +
mov eax dword_4D9F1C +
mov ebx [eax+edx*4+14h] +
test ebx ebx +
jz loc_439C64  +
mov eax [ebx] +
push eax  +
call sub_4399F8  +
pop ecx  +
mov edx [ebx] +
mov [edx+80h] eax +
mov ebx [ebx+4] +
test ebx ebx +
jnz loc_439C4C  +
mov ecx [ebp+arg_4] +
push ecx  +
mov eax [ebp+arg_0] +
push eax  +
call sub_43A0E0  +
add esp 8 +
jmp loc_439C86  +
mov edx [ebp+arg_4] +
push edx  +
mov ecx [ebp+arg_0] +
push ecx  +
call sub_439DD8  +
add esp 8 +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
add esp 0FFFFFFF4h +
push ebx  +
push esi  +
push edi  +
mov eax [ebp+arg_0] +
cmp eax dword_4D9F20 +
jle loc_439CD6  +
push 1FBh  +
push offset a_Step3_c_7  +
push offset asc_4DC955  +
push offset stream  +
call _fprintf  +
add esp 10h +
push offset asc_4DC985  +
push offset stream  +
call _fprintf  +
add esp 8 +
push 1  +
call _exit  +
pop ecx  +
mov edx [ebp+arg_0] +
push edx  +
call sub_43C40C  +
pop ecx  +
mov edx dword_4D9F1C +
mov ecx [ebp+arg_0] +
xor ebx ebx +
mov eax ecx +
shl ecx 3 +
sub ecx eax +
xor eax eax +
mov esi [edx+ecx*4+14h] +
mov [ebp+var_4] 1 +
mov [ebp+var_8] eax +
test esi esi +
jz loc_439DB5  +
mov edi [esi] +
cmp dword ptr [edi+18h] 0 +
jnz loc_439D4E  +
mov eax [esi+4] +
xor edx edx +
mov [ebp+var_C] edx +
test eax eax +
jz loc_439D32  +
mov edx [eax] +
cmp dword ptr [edx+18h] 0 +
jz loc_439D2B  +
mov [ebp+var_C] edx +
jmp loc_439D32  +
mov eax [eax+4] +
test eax eax +
jnz loc_439D1E  +
mov eax [ebp+var_C] +
push eax  +
mov ecx [ebp+var_8] +
push ecx  +
push edi  +
call sub_43C20C  +
add esp 0Ch +
mov edx dword_4DC570 +
mov [edx+ebx*4] eax +
jmp loc_439D61  +
push edi  +
call sub_43BF38  +
pop ecx  +
mov ecx dword_4DC570 +
mov [ecx+ebx*4] eax +
mov [ebp+var_8] edi +
cmp [ebp+var_4] 0 +
jge loc_439D80  +
mov eax dword_4DC570 +
cmp dword ptr [eax+ebx*4] 0 +
jl loc_439D80  +
mov eax dword_4DC574 +
mov dword ptr [eax+ebx*4] 1 +
jmp loc_439D8D  +
mov edx dword_4DC574 +
mov dword ptr [edx+ebx*4] 7FFFFFFFh +
mov ecx dword_4DC570 +
cmp dword ptr [ecx+ebx*4] 0 +
jge loc_439DA2  +
mov [ebp+var_4] 0FFFFFFFFh +
jmp loc_439DA9  +
mov [ebp+var_4] 1 +
inc ebx  +
mov esi [esi+4] +
test esi esi +
jnz loc_439D0A  +
mov eax dword_4DC574 +
mov dword ptr [eax] 1 +
mov edx [ebp+arg_4] +
push edx  +
mov ecx [ebp+arg_0] +
push ecx  +
call sub_439DD8  +
add esp 8 +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
add esp 0FFFFFFF4h +
add esp 0FFFFFFE4h +
push ebx  +
push esi  +
push edi  +
mov eax [ebp+arg_0] +
mov edx eax +
shl eax 3 +
sub eax edx +
mov ecx dword_4D9F1C +
mov ebx [ecx+eax*4+14h] +
xor esi esi +
test ebx ebx +
jz loc_43A151  +
mov eax [ebx] +
mov edx [ebx+4] +
test edx edx +
jz loc_43A149  +
mov ecx [edx] +
mov [ebp+var_1C] ecx +
mov edx [eax+54h] +
mov ecx [ebp+var_1C] +
add edx [eax+18h] +
add edx dword_4EBD84 +
cmp edx [ecx+54h] +
jge loc_43A149  +
mov edx [ebp+var_1C] +
mov ecx [edx+54h] +
sub ecx [eax+54h] +
sub ecx [eax+18h] +
mov eax dword_4EBDB8 +
add eax eax +
cmp ecx eax +
jle loc_43A149  +
mov eax dword_4DC574 +
mov dword ptr [eax+esi*4+4] 1 +
inc esi  +
mov ebx [ebx+4] +
test ebx ebx +
jnz loc_43A103  +
mov [ebp+var_4] 1 +
xor edx edx +
mov [ebp+var_4] edx +
mov ecx [ebp+arg_0] +
mov eax ecx +
shl ecx 3 +
sub ecx eax +
mov edx dword_4D9F1C +
mov ebx [edx+ecx*4+14h] +
xor esi esi +
test ebx ebx +
jz loc_43A1AA  +
mov eax [ebx] +
cmp dword ptr [eax+80h] 0 +
jz loc_43A1A2  +
mov edx dword_4DC570 +
cmp dword ptr [edx+esi*4] 0 +
jnz loc_43A1A2  +
mov eax dword_4DC574 +
mov dword ptr [eax+esi*4] 1 +
mov dword ptr [eax+esi*4+4] 1 +
inc esi  +
mov ebx [ebx+4] +
test ebx ebx +
jnz loc_43A177  +
mov edx [ebp+arg_0] +
mov eax dword_4D9F1C +
mov ecx edx +
xor esi esi +
shl edx 3 +
sub edx ecx +
or ecx 0FFFFFFFFh +
mov ebx [eax+edx*4+14h] +
xor eax eax +
mov [ebp+var_8] 1 +
mov [ebp+var_C] eax +
xor edx edx +
mov [ebp+var_14] edx +
xor eax eax +
xor edx edx +
mov [ebp+var_18] eax +
mov [ebp+var_10] edx +
test ebx ebx +
jz loc_43A290  +
mov eax dword_4DC574 +
cmp dword ptr [eax+esi*4] 7FFFFFFFh +
jz loc_43A248  +
cmp ecx 0FFFFFFFFh +
jz loc_43A22B  +
mov eax edi +
cdq   +
idiv  [ebp+var_8] +
mov edx dword_4DC574 +
mov [edx+ecx*4] eax +
cmp [ebp+var_10] 0 +
jz loc_43A22B  +
cmp [ebp+var_C] 0 +
jle loc_43A220  +
mov eax dword_4DC574 +
mov edx [ebp+var_14] +
mov [eax+ecx*4] edx +
jmp loc_43A22B  +
mov eax dword_4DC574 +
mov edx [ebp+var_18] +
mov [eax+ecx*4] edx +
xor eax eax +
xor ecx ecx +
mov [ebp+var_14] eax +
mov [ebp+var_18] ecx +
xor eax eax +
xor edx edx +
mov [ebp+var_C] eax +
xor edi edi +
xor eax eax +
mov [ebp+var_10] edx +
mov [ebp+var_8] eax +
mov ecx esi +
mov edx [ebx] +
cmp dword ptr [edx+80h] 0 +
jz loc_43A279  +
mov eax dword_4DC570 +
mov eax [eax+esi*4] +
add [ebp+var_C] eax +
cmp [ebp+var_14] 0 +
jnz loc_43A26D  +
mov edx dword_4DC570 +
mov [ebp+var_14] eax +
mov edx dword_4DC570 +
mov [ebp+var_18] eax +
inc [ebp+var_10]  +
mov eax dword_4DC570 +
add edi [eax+esi*4] +
inc [ebp+var_8]  +
inc esi  +
mov ebx [ebx+4] +
test ebx ebx +
jnz loc_43A1E5  +
cmp ecx 0FFFFFFFFh +
jz loc_43A2A4  +
mov eax edi +
cdq   +
idiv  [ebp+var_8] +
mov edx dword_4DC574 +
mov [edx+ecx*4] eax +
mov eax [ebp+arg_0] +
mov edx dword_4D9F1C +
mov ecx eax +
xor esi esi +
shl eax 3 +
xor edi edi +
sub eax ecx +
mov ebx [edx+eax*4+14h] +
test ebx ebx +
jz loc_43A3E0  +
mov eax dword_4DC574 +
mov eax [eax+esi*4] +
cmp eax 7FFFFFFFh +
jz loc_43A2DB  +
mov edx dword_4DC574 +
mov edi eax +
mov edx [ebx+4] +
test edx edx +
jz loc_43A3D4  +
mov eax dword_4DC574 +
cmp dword ptr [eax+esi*4+4] 7FFFFFFFh +
jz loc_43A3D4  +
mov eax [ebx] +
mov edx [edx] +
mov [ebp+var_1C] edx +
mov ecx [eax+54h] +
mov edx [ebp+var_1C] +
add ecx [eax+18h] +
add ecx dword_4EBD84 +
cmp ecx [edx+54h] +
jge loc_43A330  +
mov ecx [ebp+var_1C] +
mov edx [ecx+54h] +
mov ecx dword_4EBDB8 +
sub edx [eax+54h] +
add ecx ecx +
sub edx [eax+18h] +
cmp edx ecx +
jg loc_43A3D4  +
cmp dword ptr [eax+80h] 0 +
jnz loc_43A3D4  +
mov eax [ebp+var_1C] +
cmp dword ptr [eax+80h] 0 +
jnz loc_43A3D4  +
test edi edi +
jl loc_43A37E  +
mov eax dword_4DC574 +
cmp dword ptr [eax+esi*4+4] 0 +
jl loc_43A37E  +
mov edx dword_4DC574 +
cmp edi [edx+esi*4+4] +
jl loc_43A37E  +
mov ecx dword_4DC574 +
mov dword ptr [ecx+esi*4+4] 7FFFFFFFh +
mov [ebp+var_4] 1 +
test edi edi +
jge loc_43A3AF  +
mov eax dword_4DC574 +
cmp dword ptr [eax+esi*4+4] 0 +
jge loc_43A3AF  +
mov edx dword_4DC574 +
cmp edi [edx+esi*4+4] +
jl loc_43A3AF  +
mov ecx dword_4DC574 +
mov dword ptr [ecx+esi*4+4] 7FFFFFFFh +
mov [ebp+var_4] 1 +
test edi edi +
jle loc_43A3D4  +
mov eax dword_4DC574 +
cmp dword ptr [eax+esi*4+4] 0 +
jge loc_43A3D4  +
mov edx dword_4DC574 +
mov dword ptr [edx+esi*4+4] 7FFFFFFFh +
mov [ebp+var_4] 1 +
inc esi  +
mov ebx [ebx+4] +
test ebx ebx +
jnz loc_43A2C4  +
cmp [ebp+var_4] 0 +
jnz loc_43A158  +
mov ecx [ebp+arg_0] +
mov edx dword_4D9F1C +
mov eax ecx +
xor esi esi +
shl ecx 3 +
sub ecx eax +
mov eax dword_4DC574 +
cmp dword ptr [eax] 7FFFFFFFh +
mov ebx [edx+ecx*4+14h] +
jnz loc_43A443  +
push 245h  +
push offset a_Step3_c_9  +
push offset asc_4DCA1F  +
push offset stream  +
call _fprintf  +
add esp 10h +
push offset asc_4DCA4F  +
push offset stream  +
call _fprintf  +
add esp 8 +
push 1  +
call _exit  +
pop ecx  +
test ebx ebx +
jz loc_43A483  +
mov edx dword_4DC574 +
mov eax [edx+esi*4] +
cmp eax 7FFFFFFFh +
jz loc_43A466  +
mov edx dword_4DC574 +
mov edi eax +
imul edi dword_4EC3AC +
mov eax dword_4DC570 +
mov [eax+esi*4] edi +
mov edx dword_4DC574 +
mov dword ptr [edx+esi*4] 1 +
inc esi  +
mov ebx [ebx+4] +
test ebx ebx +
jnz loc_43A447  +
cmp [ebp+arg_4] 0 +
jz loc_43A4A5  +
mov ecx [ebp+arg_0] +
push ecx  +
call sub_43BAB0  +
pop ecx  +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push eax  +
call sub_43B94C  +
pop ecx  +
add [ebp+var_4] eax +
jmp loc_43A4BF  +
mov edx [ebp+arg_0] +
push edx  +
call sub_43B94C  +
pop ecx  +
mov [ebp+var_4] eax +
mov ecx [ebp+arg_0] +
push ecx  +
call sub_43BAB0  +
pop ecx  +
add [ebp+var_4] eax +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
add esp 0FFFFFFE8h +
push ebx  +
push esi  +
push edi  +
cmp [ebp+arg_0] 0 +
jge loc_43A511  +
push 251h  +
push offset a_Step3_c_10  +
push offset asc_4DCA84  +
push offset stream  +
call _fprintf  +
add esp 10h +
push offset asc_4DCAB4  +
push offset stream  +
call _fprintf  +
add esp 8 +
push 1  +
call _exit  +
pop ecx  +
mov eax [ebp+arg_0] +
push eax  +
call sub_43C40C  +
pop ecx  +
mov [ebp+var_8] 5 +
mov [ebp+var_C] 1 +
dec [ebp+var_8]  +
cmp [ebp+var_8] 0 +
jl loc_43A78C  +
xor edx edx +
xor eax eax +
mov [ebp+var_C] edx +
mov [ebp+var_18] eax +
mov edx [ebp+arg_0] +
mov eax dword_4D9F1C +
mov ecx edx +
xor edi edi +
shl edx 3 +
sub edx ecx +
mov edx [eax+edx*4+14h] +
mov [ebp+var_4] edx +
cmp [ebp+var_4] 0 +
jz loc_43A768  +
mov ecx dword_4DC570 +
xor eax eax +
mov [ecx+edi*4] eax +
mov edx dword_4DC574 +
mov dword ptr [edx+edi*4] 1 +
mov ecx [ebp+var_4] +
mov ebx [ecx] +
mov eax 7FFFFFFFh +
mov [ebp+var_10] eax +
mov [ebp+var_14] eax +
mov edx [ebp+var_4] +
cmp dword ptr [edx+4] 0 +
jz loc_43A5D5  +
cmp dword ptr [ebx+18h] 0 +
mov edx dword_4EBD84 +
jnz loc_43A5AB  +
cmp dword ptr [ebx+1Ch] 0 +
jnz loc_43A5AB  +
mov edx dword_4EBDB4 +
mov eax [ebp+var_4] +
mov ecx [eax+4] +
mov eax [ecx] +
cmp dword ptr [eax+18h] 0 +
jnz loc_43A5C5  +
cmp dword ptr [eax+1Ch] 0 +
jnz loc_43A5C5  +
mov edx dword_4EBDB4 +
mov ecx [eax+54h] +
mov eax [ebx+54h] +
add eax [ebx+18h] +
add edx eax +
sub ecx edx +
mov [ebp+var_14] ecx +
cmp [ebp+var_18] 0 +
jz loc_43A618  +
cmp dword ptr [ebx+18h] 0 +
mov edx dword_4EBD84 +
jnz loc_43A5F3  +
cmp dword ptr [ebx+1Ch] 0 +
jnz loc_43A5F3  +
mov edx dword_4EBDB4 +
mov eax [ebp+var_18] +
cmp dword ptr [eax+18h] 0 +
jnz loc_43A608  +
cmp dword ptr [eax+1Ch] 0 +
jnz loc_43A608  +
mov edx dword_4EBDB4 +
mov ecx [eax+54h] +
add ecx [eax+18h] +
add edx ecx +
mov eax [ebx+54h] +
sub eax edx +
mov [ebp+var_10] eax +
push ebx  +
call sub_4399CC  +
pop ecx  +
test eax eax +
jz loc_43A6C4  +
push ebx  +
call sub_4399F8  +
pop ecx  +
test eax eax +
jz loc_43A6C4  +
push ebx  +
call sub_43BCA8  +
pop ecx  +
mov esi eax +
push ebx  +
call sub_43BDF0  +
pop ecx  +
test eax eax +
jle loc_43A661  +
test esi esi +
jz loc_43A661  +
cmp eax [ebp+var_14] +
jg loc_43A661  +
mov edx dword_4DC570 +
mov [edx+edi*4] eax +
jmp loc_43A751  +
test eax eax +
jge loc_43A680  +
test esi esi +
jz loc_43A680  +
mov ecx eax +
neg ecx  +
cmp ecx [ebp+var_10] +
jg loc_43A680  +
mov edx dword_4DC570 +
mov [edx+edi*4] eax +
jmp loc_43A751  +
test esi esi +
jle loc_43A69A  +
test eax eax +
jz loc_43A69A  +
cmp esi [ebp+var_14] +
jg loc_43A69A  +
mov eax dword_4DC570 +
mov [eax+edi*4] esi +
jmp loc_43A751  +
test esi esi +
jge loc_43A751  +
test eax eax +
jz loc_43A751  +
mov ecx esi +
neg ecx  +
cmp ecx [ebp+var_10] +
jg loc_43A751  +
mov eax dword_4DC570 +
mov [eax+edi*4] esi +
jmp loc_43A751  +
push ebx  +
call sub_4399CC  +
pop ecx  +
test eax eax +
jz loc_43A70C  +
cmp dword ptr [ebx+94h] 0 +
jnz loc_43A70C  +
push ebx  +
call sub_43BCA8  +
pop ecx  +
mov esi eax +
test esi esi +
jle loc_43A6F4  +
cmp esi [ebp+var_14] +
jg loc_43A6F4  +
mov eax dword_4DC570 +
mov [eax+edi*4] esi +
jmp loc_43A751  +
test esi esi +
jge loc_43A751  +
mov edx esi +
neg edx  +
cmp edx [ebp+var_10] +
jg loc_43A751  +
mov ecx dword_4DC570 +
mov [ecx+edi*4] esi +
jmp loc_43A751  +
push ebx  +
call sub_4399F8  +
pop ecx  +
test eax eax +
jz loc_43A751  +
cmp dword ptr [ebx+98h] 0 +
jnz loc_43A751  +
push ebx  +
call sub_43BDF0  +
pop ecx  +
test eax eax +
jle loc_43A73B  +
cmp eax [ebp+var_14] +
jg loc_43A73B  +
mov edx dword_4DC570 +
mov [edx+edi*4] eax +
jmp loc_43A751  +
test eax eax +
jge loc_43A751  +
mov ecx eax +
neg ecx  +
cmp ecx [ebp+var_10] +
jg loc_43A751  +
mov edx dword_4DC570 +
mov [edx+edi*4] eax +
mov [ebp+var_18] ebx +
mov eax [ebp+var_4] +
mov ecx [eax+4] +
mov [ebp+var_4] ecx +
inc edi  +
cmp [ebp+var_4] 0 +
jnz loc_43A562  +
mov eax [ebp+arg_0] +
push eax  +
call sub_43BAB0  +
pop ecx  +
add [ebp+var_C] eax +
mov edx [ebp+arg_0] +
push edx  +
call sub_43B94C  +
pop ecx  +
add [ebp+var_C] eax +
cmp [ebp+var_C] 0 +
jnz loc_43A529  +
mov eax [ebp+var_C] +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
push edi  +
add esp 0FFFFFFD8h +
add esp 0FFFFFFF8h +
push ebx  +
push esi  +
push edi  +
mov [ebp+var_8] 1 +
mov ebx [ebp+arg_0] +
jmp loc_43B4C6  +
cmp [ebp+var_8] 0 +
jz loc_43B4D9  +
mov edx [ebp+arg_4] +
mov eax [ebx+54h] +
sub edx eax +
mov ecx [ebx+18h] +
sar ecx 1 +
jns loc_43B2D8  +
adc ecx 0 +
sub edx ecx +
mov [ebp+var_4] edx +
mov edi eax +
add edi [ebp+var_4] +
cmp [ebp+var_4] 0 +
jge loc_43B2FE  +
mov eax [ebx+6Ch] +
mov edx eax +
shl eax 3 +
sub eax edx +
mov ecx dword_4D9F1C +
mov esi [ecx+eax*4+10h] +
jmp loc_43B312  +
mov eax [ebx+6Ch] +
mov edx eax +
shl eax 3 +
sub eax edx +
mov ecx dword_4D9F1C +
mov esi [ecx+eax*4+14h] +
test esi esi +
jz loc_43B321  +
cmp ebx [esi] +
jz loc_43B321  +
mov esi [esi+4] +
test esi esi +
jnz loc_43B316  +
test esi esi +
jnz loc_43B35B  +
push 336h  +
push offset a_Step3_c_11  +
push offset asc_4DCAE9  +
push offset stream  +
call _fprintf  +
add esp 10h +
push offset asc_4DCB19  +
push offset stream  +
call _fprintf  +
add esp 8 +
push 1  +
call _exit  +
pop ecx  +
cmp [ebp+var_4] 0 +
mov esi [esi+4] +
jge loc_43B3FF  +
test esi esi +
jz loc_43B499  +
cmp dword ptr [ebx+18h] 0 +
mov eax [esi] +
jz loc_43B37E  +
cmp dword ptr [eax+18h] 0 +
jnz loc_43B38C  +
mov ecx [eax+54h] +
add ecx [eax+18h] +
add ecx dword_4EBDB4 +
jmp loc_43B398  +
mov ecx [eax+54h] +
add ecx [eax+18h] +
add ecx dword_4EBD84 +
mov esi [ebx+18h] +
test esi esi +
jnz loc_43B3C7  +
mov eax esi +
sar eax 1 +
jns loc_43B3A8  +
adc eax 0 +
add eax edi +
cdq   +
idiv  dword_4EBDC0 +
imul  dword_4EBDC0 +
mov edx [ebx+18h] +
sar edx 1 +
jns loc_43B3C1  +
adc edx 0 +
sub eax edx +
mov edi eax +
jmp loc_43B3ED  +
mov eax esi +
sar eax 1 +
jns loc_43B3D0  +
adc eax 0 +
add eax edi +
cdq   +
idiv  dword_4EBDB8 +
imul  dword_4EBDB8 +
mov edx [ebx+18h] +
sar edx 1 +
jns loc_43B3E9  +
adc edx 0 +
sub eax edx +
mov edi eax +
cmp ecx edi +
jle loc_43B499  +
xor eax eax +
mov [ebp+var_8] eax +
jmp loc_43B499  +
cmp [ebp+var_4] 0 +
jle loc_43B499  +
test esi esi +
jz loc_43B499  +
mov eax [esi] +
mov edx [ebx+18h] +
test edx edx +
jz loc_43B420  +
cmp dword ptr [eax+18h] 0 +
jnz loc_43B42D  +
mov ecx [eax+54h] +
sub ecx dword_4EBDB4 +
sub ecx edx +
jmp loc_43B438  +
mov ecx [eax+54h] +
sub ecx dword_4EBD84 +
sub ecx edx +
cmp dword ptr [ebx+18h] 0 +
jnz loc_43B468  +
mov eax [ebx+18h] +
sar eax 1 +
jns loc_43B448  +
adc eax 0 +
add eax edi +
mov esi dword_4EBDC0 +
add eax esi +
dec eax  +
cdq   +
idiv  esi +
imul  esi +
mov edx [ebx+18h] +
sar edx 1 +
jns loc_43B462  +
adc edx 0 +
sub eax edx +
mov edi eax +
jmp loc_43B490  +
mov eax [ebx+18h] +
sar eax 1 +
jns loc_43B472  +
adc eax 0 +
add eax edi +
mov esi dword_4EBDB8 +
add eax esi +
dec eax  +
cdq   +
idiv  esi +
imul  esi +
mov edx [ebx+18h] +
sar edx 1 +
jns loc_43B48C  +
adc edx 0 +
sub eax edx +
mov edi eax +
cmp ecx edi +
jge loc_43B499  +
xor eax eax +
mov [ebp+var_8] eax +
cmp [ebp+arg_8] 0 +
jz loc_43B4B3  +
mov eax [ebx+94h] +
test eax eax +
jz loc_43B4AF  +
mov edx [eax] +
mov ebx [edx] +
jmp loc_43B4C6  +
xor ebx ebx +
jmp loc_43B4C6  +
mov eax [ebx+98h] +
test eax eax +
jz loc_43B4C4  +
mov edx [eax] +
mov ebx [edx+1Ch] +
jmp loc_43B4C6  +
xor ebx ebx +
test ebx ebx +
jz loc_43B4D9  +
push ebx  +
call sub_439980  +
pop ecx  +
test eax eax +
jnz loc_43B2BC  +
mov eax [ebp+var_8] +
pop edi  +
pop esi  +
pop ebx  +
pop ecx  +
pop ecx  +
pop ebp  +
retn   +
***
add esp 0FFFFFFF8h +
push ebx  +
push esi  +
push edi  +
mov [ebp+var_8] 1 +
mov ebx [ebp+arg_0] +
jmp loc_43B6ED  +
cmp [ebp+var_8] 0 +
jz loc_43B700  +
mov edx [ebp+arg_4] +
mov eax [ebx+54h] +
sub edx eax +
mov ecx [ebx+18h] +
sar ecx 1 +
jns loc_43B518  +
adc ecx 0 +
sub edx ecx +
mov [ebp+var_4] edx +
mov edi eax +
add edi [ebp+var_4] +
cmp [ebp+var_4] 0 +
jge loc_43B53E  +
mov eax [ebx+6Ch] +
mov edx eax +
shl eax 3 +
sub eax edx +
mov ecx dword_4D9F1C +
mov esi [ecx+eax*4+10h] +
jmp loc_43B552  +
mov eax [ebx+6Ch] +
mov edx eax +
shl eax 3 +
sub eax edx +
mov ecx dword_4D9F1C +
mov esi [ecx+eax*4+14h] +
test esi esi +
jz loc_43B561  +
cmp ebx [esi] +
jz loc_43B561  +
mov esi [esi+4] +
test esi esi +
jnz loc_43B556  +
test esi esi +
jnz loc_43B59B  +
push 35Ch  +
push offset a_Step3_c_12  +
push offset asc_4DCB4E  +
push offset stream  +
call _fprintf  +
add esp 10h +
push offset asc_4DCB7E  +
push offset stream  +
call _fprintf  +
add esp 8 +
push 1  +
call _exit  +
pop ecx  +
cmp [ebp+var_4] 0 +
mov esi [esi+4] +
jge loc_43B634  +
mov ecx [ebx+18h] +
test ecx ecx +
jnz loc_43B5C0  +
mov eax edi +
mov ecx dword_4EBDC0 +
cdq   +
idiv  ecx +
imul  ecx +
mov edi eax +
jmp loc_43B5E6  +
mov eax ecx +
sar eax 1 +
jns loc_43B5C9  +
adc eax 0 +
add eax edi +
mov ecx [ebx+18h] +
cdq   +
idiv  dword_4EBDB8 +
imul  dword_4EBDB8 +
sar ecx 1 +
jns loc_43B5E2  +
adc ecx 0 +
sub eax ecx +
mov edi eax +
test esi esi +
jnz loc_43B5F2  +
mov [ebx+54h] edi +
jmp loc_43B6C0  +
cmp dword ptr [ebx+18h] 0 +
mov eax [esi] +
jz loc_43B600  +
cmp dword ptr [eax+18h] 0 +
jnz loc_43B610  +
mov edx [eax+54h] +
add edx [eax+18h] +
add edx dword_4EBDB4 +
mov eax edx +
jmp loc_43B61E  +
mov ecx [eax+54h] +
add ecx [eax+18h] +
add ecx dword_4EBD84 +
mov eax ecx +
cmp eax edi +
jg loc_43B62A  +
mov [ebx+54h] edi +
jmp loc_43B6C0  +
xor eax eax +
mov [ebp+var_8] eax +
jmp loc_43B6C0  +
cmp [ebp+var_4] 0 +
jle loc_43B6C0  +
cmp dword ptr [ebx+18h] 0 +
jnz loc_43B658  +
mov ecx dword_4EBDC0 +
mov eax ecx +
add eax edi +
dec eax  +
cdq   +
idiv  ecx +
imul  ecx +
mov edi eax +
jmp loc_43B680  +
mov eax [ebx+18h] +
sar eax 1 +
jns loc_43B662  +
adc eax 0 +
add eax edi +
mov ecx dword_4EBDB8 +
add eax ecx +
dec eax  +
cdq   +
idiv  ecx +
imul  ecx +
mov edx [ebx+18h] +
sar edx 1 +
jns loc_43B67C  +
adc edx 0 +
sub eax edx +
mov edi eax +
test esi esi +
jnz loc_43B689  +
mov [ebx+54h] edi +
jmp loc_43B6C0  +
mov eax [esi] +
mov edx [ebx+18h] +
test edx edx +
jz loc_43B698  +
cmp dword ptr [eax+18h] 0 +
jnz loc_43B6A5  +
mov eax [eax+54h] +
sub eax dword_4EBDB4 +
sub eax edx +
jmp loc_43B6B2  +
mov ecx [eax+54h] +
sub ecx dword_4EBD84 +
sub ecx edx +
mov eax ecx +
cmp eax edi +
jl loc_43B6BB  +
mov [ebx+54h] edi +
jmp loc_43B6C0  +
xor eax eax +
mov [ebp+var_8] eax +
cmp [ebp+arg_8] 0 +
jz loc_43B6DA  +
mov eax [ebx+94h] +
test eax eax +
jz loc_43B6D6  +
mov edx [eax] +
mov ebx [edx] +
jmp loc_43B6ED  +
xor ebx ebx +
jmp loc_43B6ED  +
mov eax [ebx+98h] +
test eax eax +
jz loc_43B6EB  +
mov edx [eax] +
mov ebx [edx+1Ch] +
jmp loc_43B6ED  +
xor ebx ebx +
test ebx ebx +
jz loc_43B700  +
push ebx  +
call sub_439980  +
pop ecx  +
test eax eax +
jnz loc_43B4FC  +
pop edi  +
pop esi  +
pop ebx  +
pop ecx  +
pop ecx  +
pop ebp  +
retn   +
***
push edi  +
push edi  +
push ebp  +
push ecx  +
xor ebp ebp +
xor eax eax +
mov [esp+4+var_4] eax +
jmp loc_43B845  +
mov edx [esp+4+var_4] +
mov ecx edx +
shl edx 3 +
sub edx ecx +
mov eax dword_4D9F1C +
mov edi [eax+edx*4+14h] +
test edi edi +
jz loc_43B842  +
xor esi esi +
mov eax [edi] +
mov ebx [eax+98h] +
test ebx ebx +
jz loc_43B815  +
mov eax [ebx] +
push eax  +
call sub_43BC2C  +
pop ecx  +
add esi eax +
mov ebx [ebx+4] +
test ebx ebx +
jnz loc_43B803  +
mov edx [edi] +
mov ebx [edx+94h] +
test ebx ebx +
jz loc_43B833  +
mov eax [ebx] +
push eax  +
call sub_43BC6C  +
pop ecx  +
add esi eax +
mov ebx [ebx+4] +
test ebx ebx +
jnz loc_43B821  +
test esi esi +
jge loc_43B839  +
neg esi  +
add ebp esi +
mov edi [edi+4] +
test edi edi +
jnz loc_43B7F5  +
inc [esp+4+var_4]  +
mov edx dword_4D9F20 +
inc edx  +
cmp edx [esp+4+var_4] +
jge loc_43B7DE  +
mov eax ebp +
pop edx  +
pop ebp  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
add esp 0FFFFFFF4h +
push ebx  +
push esi  +
push edi  +
mov eax [ebp+arg_0] +
push eax  +
call sub_43C40C  +
mov edx [ebp+arg_0] +
pop ecx  +
mov ecx edx +
mov eax dword_4D9F1C +
shl edx 3 +
xor ebx ebx +
sub edx ecx +
mov esi [eax+edx*4+14h] +
xor eax eax +
xor edx edx +
mov [ebp+var_4] eax +
mov [ebp+var_8] edx +
test esi esi +
jz loc_43B909  +
mov edi [esi] +
cmp dword ptr [edi+18h] 0 +
jnz loc_43B8D6  +
mov eax [esi+4] +
xor edx edx +
mov [ebp+var_C] edx +
test eax eax +
jz loc_43B8BA  +
mov edx [eax] +
cmp dword ptr [edx+18h] 0 +
jz loc_43B8B3  +
mov [ebp+var_C] edx +
jmp loc_43B8BA  +
mov eax [eax+4] +
test eax eax +
jnz loc_43B8A6  +
mov eax [ebp+var_C] +
push eax  +
mov ecx [ebp+var_8] +
push ecx  +
push edi  +
call sub_43C20C  +
add esp 0Ch +
mov edx dword_4DC570 +
mov [edx+ebx*4] eax +
jmp loc_43B8E9  +
push edi  +
call sub_43BF38  +
pop ecx  +
mov ecx dword_4DC570 +
mov [ecx+ebx*4] eax +
mov [ebp+var_8] edi +
mov eax dword_4DC570 +
mov edx dword_4DC574 +
mov eax [eax+ebx*4] +
add [ebp+var_4] eax +
mov dword ptr [edx+ebx*4] 1 +
inc ebx  +
mov esi [esi+4] +
test esi esi +
jnz loc_43B892  +
cmp [ebp+var_4] 0 +
jl loc_43B929  +
mov ecx [ebp+arg_0] +
push ecx  +
call sub_43BAB0  +
pop ecx  +
mov ebx eax +
mov eax [ebp+arg_0] +
push eax  +
call sub_43B94C  +
pop ecx  +
add ebx eax +
jmp loc_43B941  +
mov edx [ebp+arg_0] +
push edx  +
call sub_43B94C  +
pop ecx  +
mov ebx eax +
mov eax [ebp+arg_0] +
push eax  +
call sub_43BAB0  +
pop ecx  +
add ebx eax +
mov eax ebx +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
add esp 0FFFFFFF8h +
push ebx  +
push esi  +
push edi  +
cmp [ebp+arg_0] 0 +
jl loc_43B966  +
mov eax dword_4D9F20 +
inc eax  +
cmp eax [ebp+arg_0] +
jge loc_43B99C  +
push 3A7h  +
push offset a_Step3_c_13  +
push offset asc_4DCBB3  +
push offset stream  +
call _fprintf  +
add esp 10h +
push offset asc_4DCBE3  +
push offset stream  +
call _fprintf  +
add esp 8 +
push 1  +
call _exit  +
pop ecx  +
xor ebx ebx +
xor esi esi +
jmp loc_43BA8A  +
mov eax dword_4DC574 +
mov ecx [eax+esi*4] +
test ecx ecx +
jz loc_43B9C5  +
mov edx dword_4DC570 +
mov eax [edx+esi*4] +
mov edx dword_4DC574 +
cdq   +
idiv  ecx +
jmp loc_43B9C7  +
xor eax eax +
mov ecx dword_4DC578 +
test eax eax +
mov ecx [ecx+esi*4] +
jge loc_43BA87  +
mov edx [ecx+54h] +
mov [ebp+var_4] edx +
add eax [ebp+var_4] +
test ebx ebx +
mov [ecx+54h] eax +
jz loc_43BA1E  +
cmp dword ptr [ecx+18h] 0 +
jz loc_43B9F4  +
cmp dword ptr [ebx+18h] 0 +
jnz loc_43BA0A  +
mov eax [ebx+54h] +
add eax [ebx+18h] +
add eax dword_4EBDB4 +
cmp eax [ecx+54h] +
jle loc_43BA1E  +
mov [ecx+54h] eax +
jmp loc_43BA1E  +
mov eax [ebx+54h] +
add eax [ebx+18h] +
add eax dword_4EBD84 +
cmp eax [ecx+54h] +
jle loc_43BA1E  +
mov [ecx+54h] eax +
mov edi [ecx+18h] +
test edi edi +
jnz loc_43BA56  +
cmp dword ptr [ecx+1Ch] 0 +
jnz loc_43BA56  +
mov eax edi +
sar eax 1 +
jns loc_43BA34  +
adc eax 0 +
add eax [ecx+54h] +
mov ebx dword_4EBDC0 +
add eax ebx +
dec eax  +
cdq   +
idiv  ebx +
imul  ebx +
mov edx [ecx+18h] +
sar edx 1 +
jns loc_43BA4F  +
adc edx 0 +
sub eax edx +
mov [ecx+54h] eax +
jmp loc_43BA78  +
mov edi [ecx+18h] +
sar edi 1 +
jns loc_43BA60  +
adc edi 0 +
mov eax edi +
add eax [ecx+54h] +
mov ebx dword_4EBDB8 +
add eax ebx +
dec eax  +
cdq   +
idiv  ebx +
imul  ebx +
sub eax edi +
mov [ecx+54h] eax +
mov eax [ecx+54h] +
cmp eax [ebp+var_4] +
jge loc_43BA87  +
mov [ebp+var_8] 1 +
mov ebx ecx +
inc esi  +
mov eax [ebp+arg_0] +
mov edx eax +
shl eax 3 +
sub eax edx +
mov ecx dword_4D9F1C +
cmp esi [ecx+eax*4] +
jl loc_43B9A5  +
mov eax [ebp+var_8] +
pop edi  +
pop esi  +
pop ebx  +
pop ecx  +
pop ecx  +
pop ebp  +
retn   +
***
add esp 0FFFFFFF8h +
push ebx  +
push esi  +
push edi  +
mov esi [ebp+arg_0] +
test esi esi +
jl loc_43BACA  +
mov eax dword_4D9F20 +
inc eax  +
cmp esi eax +
jle loc_43BB00  +
push 3C4h  +
push offset a_Step3_c_14  +
push offset asc_4DCC18  +
push offset stream  +
call _fprintf  +
add esp 10h +
push offset asc_4DCC48  +
push offset stream  +
call _fprintf  +
add esp 8 +
push 1  +
call _exit  +
pop ecx  +
mov edx esi +
mov ecx dword_4D9F1C +
shl edx 3 +
xor eax eax +
sub edx esi +
mov [ebp+var_8] eax +
xor ebx ebx +
mov eax [ecx+edx*4] +
dec eax  +
mov esi eax +
test esi esi +
jl loc_43BC1F  +
mov edx dword_4DC574 +
mov ecx [edx+esi*4] +
test ecx ecx +
jz loc_43BB42  +
mov eax dword_4DC570 +
mov eax [eax+esi*4] +
mov edx dword_4DC574 +
cdq   +
idiv  ecx +
jmp loc_43BB44  +
xor eax eax +
mov ecx dword_4DC578 +
test eax eax +
mov ecx [ecx+esi*4] +
jle loc_43BC14  +
mov edx [ecx+54h] +
mov [ebp+var_4] edx +
add eax [ebp+var_4] +
test ebx ebx +
mov [ecx+54h] eax +
jz loc_43BBB1  +
mov eax [ecx+18h] +
test eax eax +
jz loc_43BB72  +
cmp dword ptr [ebx+18h] 0 +
jnz loc_43BB91  +
mov edi [ecx+54h] +
add edi eax +
add edi dword_4EBDB4 +
mov edx [ebx+54h] +
cmp edi edx +
jle loc_43BBB1  +
sub edx eax +
sub edx dword_4EBDB4 +
mov [ecx+54h] edx +
jmp loc_43BBB1  +
mov edi [ecx+54h] +
mov edx [ecx+18h] +
add edi edx +
add edi dword_4EBD84 +
mov eax [ebx+54h] +
cmp edi eax +
jle loc_43BBB1  +
sub eax edx +
sub eax dword_4EBD84 +
mov [ecx+54h] eax +
mov ebx [ecx+18h] +
test ebx ebx +
jnz loc_43BBE6  +
cmp dword ptr [ecx+1Ch] 0 +
jnz loc_43BBE6  +
mov eax ebx +
sar eax 1 +
jns loc_43BBC7  +
adc eax 0 +
add eax [ecx+54h] +
mov edi dword_4EBDC0 +
cdq   +
idiv  edi +
imul  edi +
mov edx [ecx+18h] +
sar edx 1 +
jns loc_43BBDF  +
adc edx 0 +
sub eax edx +
mov [ecx+54h] eax +
jmp loc_43BC05  +
mov edi [ecx+18h] +
sar edi 1 +
jns loc_43BBF0  +
adc edi 0 +
mov eax edi +
add eax [ecx+54h] +
mov ebx dword_4EBDB8 +
cdq   +
idiv  ebx +
imul  ebx +
sub eax edi +
mov [ecx+54h] eax +
mov eax [ecx+54h] +
cmp eax [ebp+var_4] +
jle loc_43BC14  +
mov [ebp+var_8] 1 +
mov ebx ecx +
dec esi  +
test esi esi +
jge loc_43BB22  +
mov eax [ebp+var_8] +
pop edi  +
pop esi  +
pop ebx  +
pop ecx  +
pop ecx  +
pop ebp  +
retn   +
***
push ebx  +
push esi  +
push edi  +
mov ecx [ebp+arg_0] +
mov ebx [ecx] +
mov esi [ecx+1Ch] +
mov eax [esi+18h] +
imul  dword ptr [ecx+48h] +
mov edx [esi+7Ch] +
inc edx  +
mov edi edx +
cdq   +
idiv  edi +
add eax [esi+54h] +
mov esi eax +
mov eax [ebx+18h] +
imul  dword ptr [ecx+44h] +
mov edx [ebx+78h] +
inc edx  +
mov ecx edx +
cdq   +
idiv  ecx +
add eax [ebx+54h] +
sub esi eax +
mov eax esi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
push ebx  +
push esi  +
push edi  +
mov ecx [ebp+arg_0] +
mov esi [ecx+1Ch] +
mov ebx [ecx] +
mov eax [esi+18h] +
imul  dword ptr [ecx+48h] +
mov edx [esi+7Ch] +
inc edx  +
mov edi edx +
cdq   +
idiv  edi +
add eax [esi+54h] +
mov esi eax +
mov eax [ebx+18h] +
imul  dword ptr [ecx+44h] +
mov edx [ebx+78h] +
inc edx  +
mov ecx edx +
cdq   +
idiv  ecx +
add eax [ebx+54h] +
sub eax esi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
push ecx  +
push ebx  +
push esi  +
push edi  +
mov esi [ebp+arg_0] +
xor eax eax +
xor edi edi +
mov ebx [esi+98h] +
test ebx ebx +
mov [ebp+var_4] eax +
jz loc_43BCF2  +
mov edx [ebx] +
push edx  +
call sub_43BC2C  +
pop ecx  +
mov ecx [ebx] +
mov edx [ecx+30h] +
imul edx dword_4D4B70 +
imul  edx +
add edi eax +
mov eax [ebx] +
mov ecx [eax+30h] +
imul ecx dword_4D4B70 +
add [ebp+var_4] ecx +
mov ebx [ebx+4] +
test ebx ebx +
jnz loc_43BCC3  +
mov eax [esi+0B4h] +
test eax eax +
jz loc_43BDD7  +
mov edx [eax] +
test edx edx +
jz loc_43BD6A  +
mov ecx [esi+54h] +
cmp ecx [edx+54h] +
jle loc_43BD35  +
mov ecx [eax] +
mov ecx [ecx+54h] +
add ecx [edx+18h] +
add ecx dword_4EBD84 +
mov edx [esi+54h] +
sub edx ecx +
mov ecx [eax+4] +
mov ecx [ecx+30h] +
imul ecx dword_4D4B78 +
imul edx ecx +
sub edi edx +
jmp loc_43BD5A  +
mov edx [esi+54h] +
mov ecx [eax] +
add edx [esi+18h] +
add edx dword_4EBD84 +
mov ecx [ecx+54h] +
sub ecx edx +
mov edx [eax+4] +
mov edx [edx+30h] +
imul edx dword_4D4B78 +
imul ecx edx +
add edi ecx +
mov ecx [eax+4] +
mov edx [ecx+30h] +
imul edx dword_4D4B78 +
add [ebp+var_4] edx +
mov edx [eax+8] +
test edx edx +
jz loc_43BDD7  +
mov ecx [esi+54h] +
cmp ecx [edx+54h] +
jle loc_43BDA1  +
mov ecx [eax+8] +
mov ecx [ecx+54h] +
add ecx [edx+18h] +
add ecx dword_4EBD84 +
mov edx [esi+54h] +
sub edx ecx +
mov ecx [eax+0Ch] +
mov ecx [ecx+30h] +
imul ecx dword_4D4B78 +
imul edx ecx +
sub edi edx +
jmp loc_43BDC7  +
mov edx [esi+54h] +
mov ecx [eax+8] +
add edx [esi+18h] +
add edx dword_4EBD84 +
mov ecx [ecx+54h] +
sub ecx edx +
mov edx [eax+0Ch] +
mov edx [edx+30h] +
imul edx dword_4D4B78 +
imul ecx edx +
add edi ecx +
mov eax [eax+0Ch] +
mov ecx [eax+30h] +
imul ecx dword_4D4B78 +
add [ebp+var_4] ecx +
cmp [ebp+var_4] 0 +
jz loc_43BDE5  +
mov eax edi +
cdq   +
idiv  [ebp+var_4] +
jmp loc_43BDE7  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ecx  +
pop ebp  +
retn   +
***
push ecx  +
push ebx  +
push esi  +
push edi  +
mov esi [ebp+arg_0] +
xor eax eax +
xor edi edi +
mov ebx [esi+94h] +
test ebx ebx +
mov [ebp+var_4] eax +
jz loc_43BE3A  +
mov edx [ebx] +
push edx  +
call sub_43BC6C  +
pop ecx  +
mov ecx [ebx] +
mov edx [ecx+30h] +
imul edx dword_4D4B74 +
imul  edx +
add edi eax +
mov eax [ebx] +
mov ecx [eax+30h] +
imul ecx dword_4D4B74 +
add [ebp+var_4] ecx +
mov ebx [ebx+4] +
test ebx ebx +
jnz loc_43BE0B  +
mov eax [esi+0B4h] +
test eax eax +
jz loc_43BF1F  +
mov edx [eax] +
test edx edx +
jz loc_43BEB2  +
mov ecx [esi+54h] +
cmp ecx [edx+54h] +
jle loc_43BE7D  +
mov ecx [eax] +
mov ecx [ecx+54h] +
add ecx [edx+18h] +
add ecx dword_4EBD84 +
mov edx [esi+54h] +
sub edx ecx +
mov ecx [eax+4] +
mov ecx [ecx+30h] +
imul ecx dword_4D4B78 +
imul edx ecx +
sub edi edx +
jmp loc_43BEA2  +
mov edx [esi+54h] +
mov ecx [eax] +
add edx [esi+18h] +
add edx dword_4EBD84 +
mov ecx [ecx+54h] +
sub ecx edx +
mov edx [eax+4] +
mov edx [edx+30h] +
imul edx dword_4D4B78 +
imul ecx edx +
add edi ecx +
mov ecx [eax+4] +
mov edx [ecx+30h] +
imul edx dword_4D4B78 +
add [ebp+var_4] edx +
mov edx [eax+8] +
test edx edx +
jz loc_43BF1F  +
mov ecx [esi+54h] +
cmp ecx [edx+54h] +
jle loc_43BEE9  +
mov ecx [eax+8] +
mov ecx [ecx+54h] +
add ecx [edx+18h] +
add ecx dword_4EBD84 +
mov edx [esi+54h] +
sub edx ecx +
mov ecx [eax+0Ch] +
mov ecx [ecx+30h] +
imul ecx dword_4D4B78 +
imul edx ecx +
sub edi edx +
jmp loc_43BF0F  +
mov edx [esi+54h] +
mov ecx [eax+8] +
add edx [esi+18h] +
add edx dword_4EBD84 +
mov ecx [ecx+54h] +
sub ecx edx +
mov edx [eax+0Ch] +
mov edx [edx+30h] +
imul edx dword_4D4B78 +
imul ecx edx +
add edi ecx +
mov eax [eax+0Ch] +
mov ecx [eax+30h] +
imul ecx dword_4D4B78 +
add [ebp+var_4] ecx +
cmp [ebp+var_4] 0 +
jz loc_43BF2D  +
mov eax edi +
cdq   +
idiv  [ebp+var_4] +
jmp loc_43BF2F  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ecx  +
pop ebp  +
retn   +
***
add esp 0FFFFFFF4h +
xor eax eax +
push ebx  +
push esi  +
push edi  +
xor edi edi +
mov esi [ebp+arg_0] +
mov [ebp+var_C] eax +
cmp dword_4D4B70 1 +
jnz loc_43C0A3  +
cmp dword_4D4B74 1 +
jnz loc_43C0A3  +
cmp dword ptr [esi+98h] 0 +
jz loc_43C0A3  +
mov edx [esi+98h] +
cmp dword ptr [edx+4] 0 +
jnz loc_43C0A3  +
cmp dword ptr [esi+94h] 0 +
jz loc_43C0A3  +
mov ecx [esi+94h] +
cmp dword ptr [ecx+4] 0 +
jnz loc_43C0A3  +
mov eax [esi+98h] +
mov edx [eax] +
mov eax [esi+94h] +
mov ecx [edx+30h] +
mov edx [eax] +
cmp ecx [edx+30h] +
jnz loc_43C0A3  +
cmp dword ptr [esi+0B4h] 0 +
jnz loc_43C0A3  +
mov ecx [esi+94h] +
mov ecx [ecx] +
mov eax [ecx+48h] +
mov ebx [ecx] +
imul  dword ptr [esi+18h] +
mov edx [esi+7Ch] +
inc edx  +
mov edi edx +
cdq   +
idiv  edi +
mov edi eax +
mov eax [ebx+18h] +
imul  dword ptr [ecx+44h] +
mov edx [ebx+78h] +
add edi [esi+54h] +
inc edx  +
mov ecx edx +
cdq   +
idiv  ecx +
add eax [ebx+54h] +
sub edi eax +
mov [ebp+var_4] edi +
mov eax [esi+98h] +
mov ecx [eax] +
mov eax [ecx+44h] +
mov ebx [ecx+1Ch] +
imul  dword ptr [esi+18h] +
mov edx [esi+78h] +
inc edx  +
mov edi edx +
cdq   +
idiv  edi +
mov edi eax +
mov eax [ebx+18h] +
imul  dword ptr [ecx+48h] +
mov edx [ebx+7Ch] +
add edi [esi+54h] +
inc edx  +
mov ecx edx +
cdq   +
idiv  ecx +
add eax [ebx+54h] +
sub eax edi +
mov [ebp+var_8] eax +
mov edi [esi+1Ch] +
sar edi 1 +
jns loc_43C03D  +
adc edi 0 +
add edi [esi+58h] +
mov eax [esi+94h] +
mov edx [eax] +
mov eax [edx] +
mov edx [eax+58h] +
mov ecx [eax+1Ch] +
sar ecx 1 +
jns loc_43C057  +
adc ecx 0 +
add edx ecx +
mov ecx edi +
mov eax edx +
sub ecx eax +
mov eax [esi+98h] +
mov edx [eax] +
mov eax [edx+1Ch] +
mov edx [esi+98h] +
mov edx [edx] +
mov eax [eax+58h] +
mov edx [edx+1Ch] +
mov edx [edx+1Ch] +
sar edx 1 +
jns loc_43C082  +
adc edx 0 +
add eax edx +
mov ebx eax +
mov eax [ebp+var_8] +
imul  ecx +
sub ebx edi +
mov edx [ebp+var_4] +
imul edx ebx +
sub eax edx +
add ebx ecx +
cdq   +
idiv  ebx +
mov edi eax +
mov eax edi +
jmp loc_43C202  +
mov ebx [esi+98h] +
test ebx ebx +
jz loc_43C0D8  +
mov eax [ebx] +
push eax  +
call sub_43BC2C  +
mov edx [ebx] +
pop ecx  +
mov ecx [ebx] +
imul  dword ptr [edx+30h] +
imul  dword_4D4B70 +
add edi eax +
mov eax [ecx+30h] +
imul  dword_4D4B70 +
add [ebp+var_C] eax +
mov ebx [ebx+4] +
test ebx ebx +
jnz loc_43C0AD  +
mov ebx [esi+94h] +
test ebx ebx +
jz loc_43C10D  +
mov eax [ebx] +
push eax  +
call sub_43BC6C  +
mov edx [ebx] +
pop ecx  +
mov ecx [ebx] +
imul  dword ptr [edx+30h] +
imul  dword_4D4B74 +
add edi eax +
mov eax [ecx+30h] +
imul  dword_4D4B74 +
add [ebp+var_C] eax +
mov ebx [ebx+4] +
test ebx ebx +
jnz loc_43C0E2  +
mov eax [esi+0B4h] +
test eax eax +
jz loc_43C1F2  +
mov edx [eax] +
test edx edx +
jz loc_43C185  +
mov ecx [edx+54h] +
cmp ecx [esi+54h] +
jge loc_43C150  +
mov ecx [eax] +
mov ecx [ecx+54h] +
add ecx [edx+18h] +
add ecx dword_4EBD84 +
mov edx [esi+54h] +
sub edx ecx +
mov ecx [eax+4] +
mov ecx [ecx+30h] +
imul ecx dword_4D4B78 +
imul edx ecx +
sub edi edx +
jmp loc_43C175  +
mov ecx [esi+54h] +
mov edx [eax] +
add ecx [esi+18h] +
add ecx dword_4EBD84 +
mov edx [edx+54h] +
sub edx ecx +
mov ecx [eax+4] +
mov ecx [ecx+30h] +
imul ecx dword_4D4B78 +
imul edx ecx +
add edi edx +
mov edx [eax+4] +
mov edx [edx+30h] +
imul edx dword_4D4B78 +
add [ebp+var_C] edx +
mov edx [eax+8] +
test edx edx +
jz loc_43C1F2  +
mov ecx [edx+54h] +
cmp ecx [esi+54h] +
jge loc_43C1BC  +
mov ecx [eax+8] +
mov ecx [ecx+54h] +
add ecx [edx+18h] +
add ecx dword_4EBD84 +
mov edx [esi+54h] +
sub edx ecx +
mov ecx [eax+0Ch] +
mov ecx [ecx+30h] +
imul ecx dword_4D4B78 +
imul edx ecx +
sub edi edx +
jmp loc_43C1E2  +
mov ecx [esi+54h] +
mov edx [eax+8] +
add ecx [esi+18h] +
add ecx dword_4EBD84 +
mov edx [edx+54h] +
sub edx ecx +
mov ecx [eax+0Ch] +
mov ecx [ecx+30h] +
imul ecx dword_4D4B78 +
imul edx ecx +
add edi edx +
mov eax [eax+0Ch] +
mov edx [eax+30h] +
imul edx dword_4D4B78 +
add [ebp+var_C] edx +
cmp [ebp+var_C] 0 +
jz loc_43C200  +
mov eax edi +
cdq   +
idiv  [ebp+var_C] +
jmp loc_43C202  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
add esp 0FFFFFFE8h +
push ebx  +
push esi  +
push edi  +
mov esi [ebp+arg_4] +
mov ebx [ebp+arg_0] +
push ebx  +
call sub_43BF38  +
pop ecx  +
mov ecx eax +
mov eax [ebx+94h] +
test eax eax +
jz loc_43C234  +
mov edx [eax] +
mov eax [edx] +
jmp loc_43C23B  +
mov eax ecx +
jmp loc_43C403  +
mov edx [ebx+98h] +
test edx edx +
jz loc_43C24F  +
mov edx [edx] +
mov edx [edx+1Ch] +
mov [ebp+var_4] edx +
jmp loc_43C256  +
mov eax ecx +
jmp loc_43C403  +
mov edx [eax+54h] +
mov [ebp+var_8] edx +
mov eax [eax+58h] +
mov [ebp+var_C] eax +
mov eax [ebp+var_4] +
mov edi [ebx+54h] +
mov ebx [ebx+58h] +
mov edx [eax+54h] +
mov [ebp+var_10] edx +
mov eax [ebp+var_4] +
mov edx [eax+58h] +
mov [ebp+var_14] edx +
cmp edi [ebp+var_8] +
jle loc_43C28B  +
cmp edi [ebp+var_10] +
jle loc_43C28B  +
mov eax ecx +
jmp loc_43C403  +
cmp edi [ebp+var_8] +
jge loc_43C29C  +
cmp edi [ebp+var_10] +
jge loc_43C29C  +
mov eax ecx +
jmp loc_43C403  +
mov edx [ebp+var_8] +
cmp edx [ebp+var_10] +
jge loc_43C35F  +
cmp [ebp+arg_8] 0 +
jz loc_43C304  +
test ecx ecx +
jle loc_43C304  +
mov eax [ebp+arg_8] +
mov edx [eax+54h] +
mov [ebp+var_18] edx +
mov eax [ebp+arg_8] +
mov esi [eax+58h] +
mov eax [ebp+arg_8] +
add esi [eax+1Ch] +
sub esi ebx +
mov edx esi +
sub edx [ebp+var_14] +
add edx ebx +
test edx edx +
jnz loc_43C2DB  +
mov eax ecx +
jmp loc_43C403  +
mov eax [ebp+var_10] +
imul  esi +
mov edx [ebp+var_14] +
sub esi [ebp+var_14] +
sub edx ebx +
add ebx esi +
imul edx [ebp+var_18] +
sub eax edx +
cdq   +
idiv  ebx +
sub eax edi +
cmp ecx eax +
jle loc_43C401  +
mov ecx eax +
jmp loc_43C401  +
test esi esi +
jz loc_43C401  +
test ecx ecx +
jge loc_43C401  +
mov eax [esi+54h] +
add eax [esi+18h] +
mov [ebp+var_18] eax +
mov eax [esi+58h] +
sub eax ebx +
mov esi eax +
mov edx esi +
sub edx [ebp+var_C] +
add edx ebx +
test edx edx +
jnz loc_43C336  +
mov eax ecx +
jmp loc_43C403  +
mov eax [ebp+var_8] +
imul  esi +
mov edx [ebp+var_C] +
sub esi [ebp+var_C] +
sub edx ebx +
add ebx esi +
imul edx [ebp+var_18] +
sub eax edx +
cdq   +
idiv  ebx +
sub eax edi +
cmp ecx eax +
jge loc_43C401  +
mov ecx eax +
jmp loc_43C401  +
mov eax [ebp+var_8] +
cmp eax [ebp+var_10] +
jle loc_43C401  +
test esi esi +
jz loc_43C3B7  +
test ecx ecx +
jge loc_43C3B7  +
mov eax [esi+54h] +
add eax [esi+18h] +
mov [ebp+var_18] eax +
mov edx [esi+58h] +
add edx [esi+1Ch] +
sub edx ebx +
mov esi edx +
mov eax esi +
sub eax [ebp+var_14] +
add eax ebx +
test eax eax +
jnz loc_43C395  +
mov eax ecx +
jmp loc_43C403  +
mov eax [ebp+var_10] +
imul  esi +
mov edx [ebp+var_14] +
sub esi [ebp+var_14] +
sub edx ebx +
add ebx esi +
imul edx [ebp+var_18] +
sub eax edx +
cdq   +
idiv  ebx +
sub eax edi +
cmp ecx eax +
jge loc_43C401  +
mov ecx eax +
jmp loc_43C401  +
cmp [ebp+arg_8] 0 +
jz loc_43C401  +
test ecx ecx +
jle loc_43C401  +
mov eax [ebp+arg_8] +
mov eax [eax+54h] +
mov [ebp+var_18] eax +
mov edx [ebp+arg_8] +
mov esi [edx+58h] +
sub esi ebx +
mov eax esi +
sub eax [ebp+var_C] +
add eax ebx +
test eax eax +
jnz loc_43C3E1  +
mov eax ecx +
jmp loc_43C403  +
mov eax [ebp+var_8] +
imul  esi +
mov edx [ebp+var_C] +
sub esi [ebp+var_C] +
sub edx ebx +
add ebx esi +
imul edx [ebp+var_18] +
sub eax edx +
cdq   +
idiv  ebx +
sub eax edi +
cmp ecx eax +
jle loc_43C401  +
mov ecx eax +
mov eax ecx +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
xor ebx ebx +
mov eax edi +
shl eax 3 +
sub eax edi +
mov edx dword_4D9F1C +
mov esi [edx+eax*4+14h] +
test esi esi +
jz loc_43C491  +
mov eax [esi] +
cmp ebx [eax+70h] +
jz loc_43C469  +
push 4C3h  +
push offset a_Step3_c_15  +
push offset asc_4DCC7D  +
push offset stream  +
call _fprintf  +
add esp 10h +
push offset asc_4DCCAD  +
push offset stream  +
call _fprintf  +
add esp 8 +
push 1  +
call _exit  +
pop ecx  +
mov edx dword_4DC578 +
mov ecx [esi] +
mov [edx+ebx*4] ecx +
mov eax dword_4DC570 +
xor edx edx +
mov [eax+ebx*4] edx +
mov ecx dword_4DC574 +
xor eax eax +
mov [ecx+ebx*4] eax +
inc ebx  +
mov esi [esi+4] +
test esi esi +
jnz loc_43C42C  +
mov edx edi +
shl edx 3 +
sub edx edi +
mov ecx dword_4D9F1C +
cmp ebx [ecx+edx*4] +
jz loc_43C4D9  +
push 4C6h  +
push offset a_Step3_c_16  +
push offset asc_4DCCE2  +
push offset stream  +
call _fprintf  +
add esp 10h +
push offset asc_4DCD12  +
push offset stream  +
call _fprintf  +
add esp 8 +
push 1  +
call _exit  +
pop ecx  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
cmp dword_4D9F1C 0 +
jnz loc_43C51C  +
push 4Eh  +
push offset a_Step4_c  +
push offset asc_4DCD91  +
push offset stream  +
call _fprintf  +
add esp 10h +
push offset asc_4DCDC1  +
push offset stream  +
call _fprintf  +
add esp 8 +
push 1  +
call _exit  +
pop ecx  +
call sub_43C9A4  +
cmp dword_4D4B68 1 +
jz loc_43C536  +
call sub_43D8E0  +
call sub_43E95C  +
jmp loc_43C53B  +
call sub_43CF10  +
call sub_43F018  +
mov eax dword_4EBD8C +
cmp eax 3 +
jz loc_43C54F  +
cmp eax 2 +
jnz loc_43C554  +
call sub_43F7FC  +
mov eax dword_4EBD8C +
cmp eax 1 +
jz loc_43C563  +
cmp eax 2 +
jnz loc_43C568  +
call sub_43F658  +
call sub_43F9DC  +
retn   +
***
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
mov ebx dword_4CD130 +
test ebx ebx +
jz loc_43C593  +
push esi  +
push ebx  +
call sub_43C5D0  +
add esp 8 +
mov ebx [ebx+5Ch] +
test ebx ebx +
jnz loc_43C582  +
mov ebx dword_4CD144 +
test ebx ebx +
jz loc_43C5AE  +
push esi  +
push ebx  +
call sub_43C5D0  +
add esp 8 +
mov ebx [ebx+5Ch] +
test ebx ebx +
jnz loc_43C59D  +
mov ebx dword_4CD14C +
test ebx ebx +
jz loc_43C5C9  +
push esi  +
push ebx  +
call sub_43C5D0  +
add esp 8 +
mov ebx [ebx+5Ch] +
test ebx ebx +
jnz loc_43C5B8  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
add esp 0FFFFFFE8h +
test ebx ebx +
jz loc_43C9BD  +
push ebx  +
call sub_43C9F0  +
pop ecx  +
mov ebx [ebx+5Ch] +
test ebx ebx +
jnz loc_43C9AF  +
mov ebx dword_4CD144 +
test ebx ebx +
jz loc_43C9D5  +
push ebx  +
call sub_43C9F0  +
pop ecx  +
mov ebx [ebx+5Ch] +
test ebx ebx +
jnz loc_43C9C7  +
mov ebx dword_4CD14C +
test ebx ebx +
jz loc_43C9ED  +
push ebx  +
call sub_43C9F0  +
pop ecx  +
mov ebx [ebx+5Ch] +
test ebx ebx +
jnz loc_43C9DF  +
pop ebx  +
retn   +
***
add esp 0FFFFFFC0h +
push ebx  +
push esi  +
push edi  +
cmp [ebp+arg_0] 0 +
jnz loc_43CA35  +
push 0CDh  +
push offset a_Step4_c_0  +
push offset asc_4DCDF6  +
push offset stream  +
call _fprintf  +
add esp 10h +
push offset asc_4DCE26  +
push offset stream  +
call _fprintf  +
add esp 8 +
push 1  +
call _exit  +
pop ecx  +
mov eax [ebp+arg_0] +
mov edx [eax+18h] +
mov [ebp+var_8] edx +
mov ecx [ebp+arg_0] +
mov eax [ecx+1Ch] +
mov [ebp+var_C] eax +
mov edx [ebp+arg_0] +
mov eax [ebp+arg_0] +
mov edi [edx+54h] +
mov edx [eax+58h] +
mov [ebp+var_4] edx +
mov ecx [ebp+arg_0] +
mov eax [ecx+7Ch] +
mov [ebp+var_10] eax +
mov edx [ebp+arg_0] +
mov ecx [edx+78h] +
mov [ebp+var_14] ecx +
mov eax [ebp+arg_0] +
mov dl [eax+2Fh] +
sub dl 3 +
jnz loc_43CA85  +
mov ecx [ebp+var_8] +
test ecx ecx +
jns loc_43CA7D  +
add ecx 3 +
sar ecx 2 +
mov [ebp+var_18] ecx +
jmp loc_43CA8A  +
xor eax eax +
mov [ebp+var_18] eax +
mov edx [ebp+arg_0] +
mov eax [edx+0B4h] +
test eax eax +
jz loc_43CB94  +
cmp dword ptr [eax] 0 +
jz loc_43CB17  +
mov ebx [eax+4] +
mov edx [ebx] +
cmp edx [ebp+arg_0] +
jnz loc_43CAE2  +
mov ecx [ebp+var_C] +
sar ecx 1 +
jns loc_43CAB4  +
adc ecx 0 +
add ecx [ebp+var_4] +
mov [ebx+8] ecx +
mov [ebx+10h] ecx +
mov edx [ebx+1Ch] +
cmp edi [edx+54h] +
jle loc_43CAD2  +
mov edx [ebp+var_18] +
add edx edi +
mov [ebx+4] edx +
mov [ebx+0Ch] edx +
jmp loc_43CB17  +
mov ecx edi +
sub ecx [ebp+var_18] +
add ecx [ebp+var_8] +
mov [ebx+4] ecx +
mov [ebx+0Ch] ecx +
jmp loc_43CB17  +
mov edx [ebp+var_C] +
sar edx 1 +
jns loc_43CAEC  +
adc edx 0 +
add edx [ebp+var_4] +
mov [ebx+24h] edx +
mov [ebx+18h] edx +
mov ecx [ebx] +
cmp edi [ecx+54h] +
jle loc_43CB09  +
mov edx [ebp+var_18] +
add edx edi +
mov [ebx+20h] edx +
mov [ebx+14h] edx +
jmp loc_43CB17  +
mov ecx edi +
sub ecx [ebp+var_18] +
add ecx [ebp+var_8] +
mov [ebx+20h] ecx +
mov [ebx+14h] ecx +
cmp dword ptr [eax+8] 0 +
jz loc_43CB94  +
mov ebx [eax+0Ch] +
mov eax [ebx] +
cmp eax [ebp+arg_0] +
jnz loc_43CB5F  +
mov edx [ebp+var_C] +
sar edx 1 +
jns loc_43CB31  +
adc edx 0 +
add edx [ebp+var_4] +
mov [ebx+8] edx +
mov [ebx+10h] edx +
mov eax [ebx+1Ch] +
cmp edi [eax+54h] +
jle loc_43CB4F  +
mov ecx [ebp+var_18] +
add ecx edi +
mov [ebx+4] ecx +
mov [ebx+0Ch] ecx +
jmp loc_43CB94  +
mov eax edi +
sub eax [ebp+var_18] +
add eax [ebp+var_8] +
mov [ebx+4] eax +
mov [ebx+0Ch] eax +
jmp loc_43CB94  +
mov edx [ebp+var_C] +
sar edx 1 +
jns loc_43CB69  +
adc edx 0 +
add edx [ebp+var_4] +
mov [ebx+24h] edx +
mov [ebx+18h] edx +
mov eax [ebx] +
cmp edi [eax+54h] +
jle loc_43CB86  +
mov ecx [ebp+var_18] +
add ecx edi +
mov [ebx+20h] ecx +
mov [ebx+14h] ecx +
jmp loc_43CB94  +
mov eax edi +
sub eax [ebp+var_18] +
add eax [ebp+var_8] +
mov [ebx+20h] eax +
mov [ebx+14h] eax +
mov edx [ebp+arg_0] +
mov esi [edx+98h] +
test esi esi +
jz loc_43CD24  +
mov ebx [esi] +
mov al [ebx+42h] +
sub al 6Ch +
jz loc_43CBB4  +
sub al 6 +
jz loc_43CBD7  +
jmp loc_43CBFD  +
mov edx [ebp+var_C] +
sar edx 1 +
jns loc_43CBBE  +
adc edx 0 +
add edx [ebp+var_4] +
mov [ebx+8] edx +
mov [ebx+10h] edx +
mov eax [ebp+var_18] +
add eax edi +
mov [ebx+4] eax +
mov [ebx+0Ch] eax +
jmp loc_43CD19  +
mov edx [ebp+var_C] +
sar edx 1 +
jns loc_43CBE1  +
adc edx 0 +
add edx [ebp+var_4] +
mov [ebx+8] edx +
mov [ebx+10h] edx +
mov eax [ebp+var_8] +
add eax edi +
sub eax [ebp+var_18] +
mov [ebx+4] eax +
mov [ebx+0Ch] eax +
jmp loc_43CD19  +
mov eax [ebp+var_8] +
imul  dword ptr [ebx+44h] +
mov edx [ebp+var_14] +
inc edx  +
mov ecx edx +
cdq   +
idiv  ecx +
add eax edi +
mov [ebx+4] eax +
mov [ebx+0Ch] eax +
mov eax [ebp+arg_0] +
mov dl [eax+2Fh] +
dec dl  +
jz loc_43CC27  +
dec dl  +
jz loc_43CC7C  +
jmp loc_43CD0A  +
mov ecx [ebx+4] +
mov eax ecx +
sub eax edi +
mov edx [ebp+var_8] +
sar edx 1 +
jns loc_43CC38  +
adc edx 0 +
cmp eax edx +
jge loc_43CC54  +
mov eax [ebp+var_8] +
inc eax  +
sar eax 1 +
jns loc_43CC47  +
adc eax 0 +
sub eax ecx +
add eax edi +
imul  [ebp+var_C] +
cdq   +
idiv  [ebp+var_8] +
jmp loc_43CC6C  +
mov eax [ebp+var_8] +
inc eax  +
neg eax  +
sar eax 1 +
jns loc_43CC61  +
adc eax 0 +
add eax ecx +
sub eax edi +
imul  [ebp+var_C] +
cdq   +
idiv  [ebp+var_8] +
mov ecx [ebp+var_4] +
add ecx [ebp+var_C] +
sub ecx eax +
mov [ebx+8] ecx +
jmp loc_43CD13  +
mov eax [ebp+var_C] +
imul  [ebp+var_C] +
mov [ebp+var_1C] eax +
mov edx [ebp+var_8] +
imul edx [ebp+var_8] +
fild  [ebp+var_1C] +
mov [ebp+var_20] edx +
mov ecx [ebx+4] +
fild  [ebp+var_20] +
sub ecx edi +
fdivp st(1) st +
mov [ebp+var_24] ecx +
fild  [ebp+var_24] +
fild  [ebp+var_8] +
fmul  ds:flt_43CF08 +
fsubp st(1) st +
mov eax [ebx+4] +
sub eax edi +
fmulp st(1) st +
mov [ebp+var_28] eax +
fild  [ebp+var_28] +
fild  [ebp+var_8] +
fmul  ds:flt_43CF08 +
fsubp st(1) st +
fmulp st(1) st +
mov edx [ebp+var_C] +
imul edx [ebp+var_C] +
mov [ebp+var_2C] edx +
fild  [ebp+var_2C] +
fmul  ds:flt_43CF0C +
fsubrp st(1) st +
add esp 0FFFFFFF8h +
fstp  [esp+54h+var_54] +
call _sqrt  +
add esp 8 +
call @_ftol$qv  +
push eax  +
mov eax [ebp+var_C] +
sar eax 1 +
jns loc_43CCFA  +
adc eax 0 +
mov ecx [ebp+var_4] +
pop edx  +
add ecx [ebp+var_C] +
sub eax edx +
sub ecx eax +
mov [ebx+8] ecx +
jmp loc_43CD13  +
mov eax [ebp+var_4] +
add eax [ebp+var_C] +
mov [ebx+8] eax +
mov edx [ebx+8] +
mov [ebx+10h] edx +
mov esi [esi+4] +
test esi esi +
jnz loc_43CBA5  +
mov ecx [ebp+arg_0] +
mov esi [ecx+94h] +
test esi esi +
jz loc_43CEFF  +
mov ebx [esi] +
mov al [ebx+42h] +
sub al 6Ch +
jz loc_43CD44  +
sub al 6 +
jz loc_43CD6A  +
jmp loc_43CD8D  +
mov edx [ebp+var_C] +
sar edx 1 +
jns loc_43CD4E  +
adc edx 0 +
add edx [ebp+var_4] +
mov [ebx+24h] edx +
mov [ebx+18h] edx +
mov eax [ebp+var_8] +
add eax edi +
sub eax [ebp+var_18] +
mov [ebx+20h] eax +
mov [ebx+14h] eax +
jmp loc_43CEF4  +
mov edx [ebp+var_C] +
sar edx 1 +
jns loc_43CD74  +
adc edx 0 +
add edx [ebp+var_4] +
mov [ebx+24h] edx +
mov [ebx+18h] edx +
mov eax [ebp+var_18] +
add eax edi +
mov [ebx+20h] eax +
mov [ebx+14h] eax +
jmp loc_43CEF4  +
mov eax [ebp+var_8] +
imul  dword ptr [ebx+48h] +
mov edx [ebp+var_10] +
inc edx  +
mov ecx edx +
cdq   +
idiv  ecx +
add eax edi +
mov [ebx+20h] eax +
mov [ebx+14h] eax +
mov eax [ebp+arg_0] +
mov dl [eax+2Fh] +
dec dl  +
jz loc_43CDBF  +
dec dl  +
jz loc_43CE0F  +
dec dl  +
jz loc_43CE97  +
jmp loc_43CEE8  +
mov ecx [ebx+20h] +
mov eax ecx +
sub eax edi +
mov edx [ebp+var_8] +
sar edx 1 +
jns loc_43CDD0  +
adc edx 0 +
cmp eax edx +
jge loc_43CDEC  +
mov eax [ebp+var_8] +
inc eax  +
sar eax 1 +
jns loc_43CDDF  +
adc eax 0 +
sub eax ecx +
add eax edi +
imul  [ebp+var_C] +
cdq   +
idiv  [ebp+var_8] +
jmp loc_43CE04  +
mov eax [ebp+var_8] +
inc eax  +
neg eax  +
sar eax 1 +
jns loc_43CDF9  +
adc eax 0 +
add eax ecx +
sub eax edi +
imul  [ebp+var_C] +
cdq   +
idiv  [ebp+var_8] +
add eax [ebp+var_4] +
mov [ebx+24h] eax +
jmp loc_43CEEE  +
mov ecx [ebp+var_C] +
imul ecx [ebp+var_C] +
mov [ebp+var_30] ecx +
mov eax [ebp+var_8] +
imul  [ebp+var_8] +
fild  [ebp+var_30] +
mov [ebp+var_34] eax +
mov edx [ebx+20h] +
fild  [ebp+var_34] +
sub edx edi +
fdivp st(1) st +
mov [ebp+var_38] edx +
fild  [ebp+var_38] +
fild  [ebp+var_8] +
fmul  ds:flt_43CF08 +
fsubp st(1) st +
mov ecx [ebx+20h] +
sub ecx edi +
fmulp st(1) st +
mov [ebp+var_3C] ecx +
fild  [ebp+var_3C] +
fild  [ebp+var_8] +
fmul  ds:flt_43CF08 +
fsubp st(1) st +
fmulp st(1) st +
mov eax [ebp+var_C] +
imul  [ebp+var_C] +
mov [ebp+var_40] eax +
fild  [ebp+var_40] +
fmul  ds:flt_43CF0C +
fsubrp st(1) st +
add esp 0FFFFFFF8h +
fstp  [esp+54h+var_54] +
call _sqrt  +
add esp 8 +
call @_ftol$qv  +
push eax  +
mov eax [ebp+var_C] +
sar eax 1 +
jns loc_43CE8C  +
adc eax 0 +
pop edx  +
sub eax edx +
add eax [ebp+var_4] +
mov [ebx+24h] eax +
jmp loc_43CEEE  +
mov ecx [ebx+20h] +
mov eax ecx +
sub eax edi +
mov edx [ebp+var_8] +
sar edx 1 +
jns loc_43CEA8  +
adc edx 0 +
cmp eax edx +
jge loc_43CEC6  +
mov eax [ebp+var_8] +
inc eax  +
sar eax 1 +
jns loc_43CEB7  +
adc eax 0 +
sub eax ecx +
add eax edi +
imul  [ebp+var_C] +
add eax eax +
cdq   +
idiv  [ebp+var_8] +
jmp loc_43CEE0  +
mov eax [ebp+var_8] +
inc eax  +
neg eax  +
sar eax 1 +
jns loc_43CED3  +
adc eax 0 +
add eax ecx +
sub eax edi +
imul  [ebp+var_C] +
add eax eax +
cdq   +
idiv  [ebp+var_8] +
add eax [ebp+var_4] +
mov [ebx+24h] eax +
jmp loc_43CEEE  +
mov ecx [ebp+var_4] +
mov [ebx+24h] ecx +
mov eax [ebx+24h] +
mov [ebx+18h] eax +
mov esi [esi+4] +
test esi esi +
jnz loc_43CD35  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
push edi  +
push ebp  +
cmp dword_4D9F1C 0 +
jnz loc_43CF53  +
push 12Bh  +
push offset a_Step4_c_1  +
push offset asc_4DCE5B  +
push offset stream  +
call _fprintf  +
add esp 10h +
push offset asc_4DCE8B  +
push offset stream  +
call _fprintf  +
add esp 8 +
push 1  +
call _exit  +
pop ecx  +
xor edi edi +
jmp loc_43D011  +
mov eax edi +
mov ecx 14h +
cdq   +
idiv  ecx +
test edx edx +
jnz loc_43CF70  +
push 65h  +
call sub_42A930  +
pop ecx  +
mov eax edi +
mov edx dword_4D9F1C +
shl eax 3 +
xor ebx ebx +
sub eax edi +
mov esi 7FFFFFFFh +
mov eax [edx+eax*4+10h] +
test eax eax +
jz loc_43CFB7  +
mov edx [eax] +
mov ecx [edx+70h] +
mov edx dword_4DC57C +
mov [edx+ecx*4] eax +
mov edx [eax] +
mov ecx [edx+58h] +
add ecx [edx+1Ch] +
cmp ebx ecx +
jge loc_43CFB0  +
mov edx [eax] +
mov ebx [edx+58h] +
mov edx [eax] +
add ebx [edx+1Ch] +
mov eax [eax+4] +
test eax eax +
jnz loc_43CF8C  +
mov eax edi +
shl eax 3 +
sub eax edi +
mov ecx dword_4D9F1C +
mov eax [ecx+eax*4+2Ch] +
test eax eax +
jz loc_43CFEC  +
mov edx [eax] +
mov ecx [edx+70h] +
mov edx dword_4DC580 +
mov [edx+ecx*4] eax +
mov ecx [eax] +
mov edx [ecx+58h] +
cmp esi edx +
jle loc_43CFE5  +
mov esi edx +
mov eax [eax+4] +
test eax eax +
jnz loc_43CFCC  +
push edi  +
call sub_43D038  +
mov ebp eax +
mov eax esi +
sub eax ebx +
pop ecx  +
cmp eax 14h +
jle loc_43D004  +
add esi 0FFFFFFF6h +
add ebx 0Ah +
push esi  +
push ebx  +
push ebp  +
push edi  +
call sub_43D71C  +
add esp 10h +
inc edi  +
cmp edi dword_4D9F20 +
jle loc_43CF5A  +
push esi  +
push ebx  +
push ebp  +
mov edx dword_4D9F20 +
inc edx  +
push edx  +
call sub_43D71C  +
add esp 10h +
pop ebp  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push ecx  +
push ebx  +
push ebx  +
push esi  +
mov esi [ebp+arg_4] +
mov ebx [ebp+arg_0] +
test ebx ebx +
jnz loc_43D3A1  +
push 179h  +
push offset a_Step4_c_5  +
push offset asc_4DCFEF  +
push offset stream  +
call _fprintf  +
add esp 10h +
push offset asc_4DD01F  +
push offset stream  +
call _fprintf  +
add esp 8 +
push 1  +
call _exit  +
pop ecx  +
mov eax dword_4EC3F0 +
add eax dword_4EC3EC +
cmp eax dword_4EC3F4 +
jle loc_43D3B9  +
mov dword_4EC3F4 eax +
cmp esi dword_4EC3FC +
jle loc_43D457  +
mov dword_4EC3FC esi +
mov ebx [ebx+94h] +
test ebx ebx +
jz loc_43D3F8  +
mov eax [ebx] +
mov edx [eax+20h] +
cmp esi edx +
jnz loc_43D3F1  +
cmp edx [eax+4] +
jg loc_43D3F1  +
mov ecx [ebx] +
mov edx [ecx] +
push edx  +
push eax  +
call sub_43D45C  +
add esp 8 +
mov ebx [ebx+4] +
test ebx ebx +
jnz loc_43D3D5  +
mov eax dword_4EC3F0 +
add eax dword_4EC3EC +
cmp eax dword_4EC3F4 +
jle loc_43D410  +
mov dword_4EC3F4 eax +
mov eax dword_4DCD4C +
test eax eax +
jz loc_43D42E  +
mov ebx [eax+10h] +
cmp esi [eax+8] +
jl loc_43D428  +
push eax  +
call sub_43D660  +
pop ecx  +
mov eax ebx +
test eax eax +
jnz loc_43D419  +
xor edx edx +
mov dword_4EC3EC edx +
mov eax dword_4DCD4C +
test eax eax +
jz loc_43D457  +
mov edx [eax+4] +
cmp edx dword_4EC3EC +
jle loc_43D450  +
mov dword_4EC3EC edx +
mov eax [eax+10h] +
test eax eax +
jnz loc_43D43F  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ecx  +
push ebx  +
push esi  +
push edi  +
mov esi [ebp+arg_C] +
mov eax [ebp+arg_0] +
mov edx eax +
shl eax 3 +
sub eax edx +
mov ecx dword_4D9F1C +
mov eax [ecx+eax*4+14h] +
mov [ebp+var_4] eax +
cmp [ebp+var_4] 0 +
jz loc_43D7CE  +
mov edx [ebp+var_4] +
mov ecx [edx] +
mov ebx [ecx+98h] +
test ebx ebx +
jz loc_43D7BB  +
mov ecx [ebx] +
cmp dword_4D4B6C 1 +
jnz loc_43D775  +
mov eax esi +
sub eax [ebp+arg_8] +
sar eax 1 +
jns loc_43D76D  +
adc eax 0 +
push eax  +
mov eax esi +
pop edx  +
sub eax edx +
jmp loc_43D7AE  +
mov eax [ecx+4] +
cmp eax [ecx+20h] +
jl loc_43D798  +
mov edi [ebp+arg_4] +
mov eax esi +
inc edi  +
sub eax [ebp+arg_8] +
mov edx edi +
sub edx [ecx+10h] +
imul  edx +
cdq   +
idiv  edi +
push eax  +
mov eax esi +
pop edx  +
sub eax edx +
jmp loc_43D7AE  +
mov edi [ebp+arg_4] +
mov eax esi +
inc edi  +
sub eax [ebp+arg_8] +
mov edx edi +
sub edx [ecx+10h] +
imul  edx +
cdq   +
idiv  edi +
add eax [ebp+arg_8] +
mov [ecx+10h] eax +
mov [ecx+18h] eax +
mov ebx [ebx+4] +
test ebx ebx +
jnz loc_43D756  +
mov eax [ebp+var_4] +
mov ecx [eax+4] +
mov [ebp+var_4] ecx +
cmp [ebp+var_4] 0 +
jnz loc_43D747  +
mov eax [ebp+arg_0] +
mov edx eax +
shl eax 3 +
sub eax edx +
mov ecx dword_4D9F1C +
mov eax [ecx+eax*4+14h] +
mov [ebp+var_4] eax +
cmp [ebp+var_4] 0 +
jz loc_43D8D7  +
mov edx [ebp+var_4] +
mov edx [edx] +
cmp dword ptr [edx+18h] 0 +
jnz loc_43D85C  +
cmp dword ptr [edx+1Ch] 0 +
jnz loc_43D85C  +
cmp dword ptr [edx+98h] 0 +
jz loc_43D85C  +
mov eax [edx+98h] +
cmp dword ptr [eax+4] 0 +
jz loc_43D85C  +
mov ecx [edx+98h] +
mov eax [ecx+4] +
cmp dword ptr [eax+4] 0 +
jnz loc_43D85C  +
cmp dword ptr [edx+94h] 0 +
jnz loc_43D85C  +
mov eax [edx+98h] +
mov ecx [eax] +
mov eax [eax+4] +
mov eax [eax] +
mov ecx [ecx+10h] +
mov eax [eax+10h] +
cmp eax ecx +
jle loc_43D846  +
mov eax ecx +
mov [edx+58h] eax +
mov ecx [edx+98h] +
mov ebx [ecx] +
mov [ebx+8] eax +
mov ecx [ecx+4] +
mov ecx [ecx] +
mov [ecx+8] eax +
cmp dword ptr [edx+18h] 0 +
jnz loc_43D8C4  +
cmp dword ptr [edx+1Ch] 0 +
jnz loc_43D8C4  +
cmp dword ptr [edx+94h] 0 +
jz loc_43D8C4  +
mov eax [edx+94h] +
cmp dword ptr [eax+4] 0 +
jz loc_43D8C4  +
mov eax [edx+94h] +
mov ecx [eax+4] +
cmp dword ptr [ecx+4] 0 +
jnz loc_43D8C4  +
cmp dword ptr [edx+98h] 0 +
jnz loc_43D8C4  +
mov eax [edx+94h] +
mov ecx [eax] +
mov eax [eax+4] +
mov eax [eax] +
mov ecx [ecx+18h] +
mov eax [eax+18h] +
cmp eax ecx +
jge loc_43D8AE  +
mov eax ecx +
mov [edx+58h] eax +
mov ecx [edx+94h] +
mov ebx [ecx] +
mov [ebx+24h] eax +
mov edx [ecx+4] +
mov ecx [edx] +
mov [ecx+24h] eax +
mov eax [ebp+var_4] +
mov eax [eax+4] +
mov [ebp+var_4] eax +
cmp [ebp+var_4] 0 +
jnz loc_43D7EF  +
pop edi  +
pop esi  +
pop ebx  +
pop ecx  +
pop ebp  +
retn   +
***
push edi  +
push ebp  +
add esp 0FFFFFFF4h +
cmp dword_4D9F1C 0 +
jnz loc_43D926  +
push 1EAh  +
push offset a_Step4_c_12  +
push offset asc_4DD2B2  +
push offset stream  +
call _fprintf  +
add esp 10h +
push offset asc_4DD2E2  +
push offset stream  +
call _fprintf  +
add esp 8 +
push 1  +
call _exit  +
pop ecx  +
xor eax eax +
mov [esp+0Ch+var_C] eax +
jmp loc_43DC03  +
mov eax [esp+0Ch+var_C] +
mov ecx 0Ah +
cdq   +
idiv  ecx +
test edx edx +
jnz loc_43D947  +
push 65h  +
call sub_42A930  +
pop ecx  +
mov eax [esp+0Ch+var_C] +
mov ecx dword_4D9F1C +
mov edx eax +
shl eax 3 +
sub eax edx +
mov edx 7FFFFFFFh +
mov ebx [ecx+eax*4+14h] +
xor ecx ecx +
test ebx ebx +
jz loc_43D981  +
mov eax [ebx] +
mov ebp [eax+58h] +
cmp edx ebp +
jle loc_43D971  +
mov edx ebp +
add ebp [eax+1Ch] +
cmp ecx ebp +
jge loc_43D97A  +
mov ecx ebp +
mov ebx [ebx+4] +
test ebx ebx +
jnz loc_43D966  +
mov eax [esp+0Ch+var_C] +
mov ebx eax +
shl eax 3 +
sub eax ebx +
mov ebx dword_4D9F1C +
mov ebx [ebx+eax*4+14h] +
test ebx ebx +
jz loc_43DA60  +
mov eax [ebx] +
cmp dword ptr [eax+18h] 0 +
jnz loc_43D9FA  +
cmp dword ptr [eax+1Ch] 0 +
jnz loc_43D9FA  +
cmp dword ptr [eax+98h] 0 +
jz loc_43D9FA  +
mov esi [eax+98h] +
cmp dword ptr [esi+4] 0 +
jz loc_43D9FA  +
mov esi [eax+98h] +
mov esi [esi+4] +
cmp dword ptr [esi+4] 0 +
jnz loc_43D9FA  +
cmp dword ptr [eax+94h] 0 +
jnz loc_43D9FA  +
mov [eax+58h] ecx +
mov esi [eax+98h] +
mov esi [esi] +
mov [esi+8] ecx +
mov [esi+10h] ecx +
mov esi [eax+98h] +
mov esi [esi+4] +
mov esi [esi] +
mov [esi+8] ecx +
mov [esi+10h] ecx +
cmp dword ptr [eax+18h] 0 +
jnz loc_43DA55  +
cmp dword ptr [eax+1Ch] 0 +
jnz loc_43DA55  +
cmp dword ptr [eax+94h] 0 +
jz loc_43DA55  +
mov esi [eax+94h] +
cmp dword ptr [esi+4] 0 +
jz loc_43DA55  +
mov esi [eax+94h] +
mov esi [esi+4] +
cmp dword ptr [esi+4] 0 +
jnz loc_43DA55  +
cmp dword ptr [eax+98h] 0 +
jnz loc_43DA55  +
mov [eax+58h] edx +
mov esi [eax+94h] +
mov esi [esi] +
mov [esi+24h] edx +
mov [esi+18h] edx +
mov esi [eax+94h] +
mov esi [esi+4] +
mov esi [esi] +
mov [esi+24h] edx +
mov [esi+18h] edx +
mov ebx [ebx+4] +
test ebx ebx +
jnz loc_43D99D  +
xor eax eax +
mov [esp+0Ch+var_8] eax +
mov [esp+0Ch+var_4] 7FFFFFFFh +
mov edx [esp+0Ch+var_C] +
mov ecx edx +
shl edx 3 +
sub edx ecx +
mov eax dword_4D9F1C +
mov ebx [eax+edx*4+10h] +
test ebx ebx +
jz loc_43DAB6  +
mov eax [ebx] +
mov edx [eax+70h] +
mov ecx dword_4DC57C +
mov [ecx+edx*4] ebx +
mov eax [ebx] +
mov edx [eax+58h] +
add edx [eax+1Ch] +
cmp edx [esp+0Ch+var_8] +
jle loc_43DAAF  +
mov ecx [ebx] +
mov edx [ebx] +
mov eax [ecx+58h] +
add eax [edx+1Ch] +
mov [esp+0Ch+var_8] eax +
mov ebx [ebx+4] +
test ebx ebx +
jnz loc_43DA85  +
mov ecx [esp+0Ch+var_C] +
mov eax ecx +
shl ecx 3 +
sub ecx eax +
mov edx dword_4D9F1C +
mov ebx [edx+ecx*4+2Ch] +
test ebx ebx +
jz loc_43DAF2  +
mov eax [ebx] +
mov edx [eax+70h] +
mov ecx dword_4DC580 +
mov [ecx+edx*4] ebx +
mov eax [ebx] +
mov eax [eax+58h] +
cmp eax [esp+0Ch+var_4] +
jge loc_43DAEB  +
mov [esp+0Ch+var_4] eax +
mov ebx [ebx+4] +
test ebx ebx +
jnz loc_43DACE  +
mov ebp 1 +
mov edi 1 +
inc ebp  +
cmp ebp dword_4D4B64 +
jle loc_43DB12  +
push 74h  +
call sub_42A930  +
pop ecx  +
jmp loc_43DBA3  +
cmp dword_4D4C40 0 +
jle loc_43DB31  +
push 64h  +
call sub_43FD4C  +
pop ecx  +
test eax eax +
jz loc_43DB31  +
push 74h  +
call sub_42A930  +
pop ecx  +
jmp loc_43DBA3  +
xor edi edi +
mov eax [esp+0Ch+var_C] +
mov edx eax +
shl eax 3 +
sub eax edx +
mov ecx dword_4D9F1C +
mov ebx [ecx+eax*4+14h] +
test ebx ebx +
jz loc_43DB67  +
push ebx  +
call sub_43DD74  +
pop ecx  +
mov esi eax +
push esi  +
push ebx  +
call sub_43DC1C  +
add esp 8 +
add edi eax +
mov ebx [ebx+4] +
test ebx ebx +
jnz loc_43DB4B  +
mov eax [esp+0Ch+var_C] +
mov edx eax +
shl eax 3 +
sub eax edx +
mov ecx dword_4D9F1C +
mov ebx [ecx+eax*4+30h] +
test ebx ebx +
jz loc_43DB9B  +
push ebx  +
call sub_43E290  +
pop ecx  +
mov esi eax +
push esi  +
push ebx  +
call sub_43DCC8  +
add esp 8 +
add edi eax +
mov ebx [ebx+4] +
test ebx ebx +
jnz loc_43DB7F  +
test edi edi +
jnz loc_43DAFC  +
test edi edi +
jz loc_43DC00  +
mov eax [esp+0Ch+var_C] +
mov edx eax +
shl eax 3 +
sub eax edx +
mov ecx dword_4D9F1C +
mov ebx [ecx+eax*4+14h] +
test ebx ebx +
jz loc_43DBD4  +
mov eax [esp+0Ch+var_8] +
push eax  +
push ebx  +
call sub_43DC1C  +
add esp 8 +
mov ebx [ebx+4] +
test ebx ebx +
jnz loc_43DBBF  +
mov edx [esp+0Ch+var_C] +
mov ecx edx +
shl edx 3 +
sub edx ecx +
mov eax dword_4D9F1C +
mov ebx [eax+edx*4+30h] +
test ebx ebx +
jz loc_43DC00  +
mov eax [esp+0Ch+var_4] +
push eax  +
push ebx  +
call sub_43DCC8  +
add esp 8 +
mov ebx [ebx+4] +
test ebx ebx +
jnz loc_43DBEB  +
inc [esp+0Ch+var_C]  +
mov edx [esp+0Ch+var_C] +
cmp edx dword_4D9F20 +
jle loc_43D930  +
add esp 0Ch +
pop ebp  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push ebx  +
push esi  +
mov ebx [ebp+arg_4] +
mov esi [ebp+arg_0] +
test esi esi +
jnz loc_43DC61  +
push 233h  +
push offset a_Step4_c_13  +
push offset asc_4DD317  +
push offset stream  +
call _fprintf  +
add esp 10h +
push offset asc_4DD347  +
push offset stream  +
call _fprintf  +
add esp 8 +
push 1  +
call _exit  +
pop ecx  +
cmp dword ptr [esi] 0 +
jnz loc_43DC9C  +
push 234h  +
push offset a_Step4_c_14  +
push offset asc_4DD37C  +
push offset stream  +
call _fprintf  +
add esp 10h +
push offset asc_4DD3AC  +
push offset stream  +
call _fprintf  +
add esp 8 +
push 1  +
call _exit  +
pop ecx  +
xor ecx ecx +
mov eax [esi] +
mov eax [eax+98h] +
test eax eax +
jz loc_43DCC0  +
mov edx [eax] +
cmp ebx [edx+10h] +
jle loc_43DCB9  +
mov [edx+10h] ebx +
mov ecx 1 +
mov eax [eax+4] +
test eax eax +
jnz loc_43DCAA  +
mov eax ecx +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
push ebx  +
push esi  +
mov ebx [ebp+arg_4] +
mov esi [ebp+arg_0] +
test esi esi +
jnz loc_43DD0D  +
push 23Eh  +
push offset a_Step4_c_15  +
push offset asc_4DD3E1  +
push offset stream  +
call _fprintf  +
add esp 10h +
push offset asc_4DD411  +
push offset stream  +
call _fprintf  +
add esp 8 +
push 1  +
call _exit  +
pop ecx  +
cmp dword ptr [esi] 0 +
jnz loc_43DD48  +
push 23Fh  +
push offset a_Step4_c_16  +
push offset asc_4DD446  +
push offset stream  +
call _fprintf  +
add esp 10h +
push offset asc_4DD476  +
push offset stream  +
call _fprintf  +
add esp 8 +
push 1  +
call _exit  +
pop ecx  +
xor ecx ecx +
mov eax [esi] +
mov eax [eax+94h] +
test eax eax +
jz loc_43DD6C  +
mov edx [eax] +
cmp ebx [edx+18h] +
jge loc_43DD65  +
mov [edx+18h] ebx +
mov ecx 1 +
mov eax [eax+4] +
test eax eax +
jnz loc_43DD56  +
mov eax ecx +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
push ebx  +
push esi  +
push edi  +
mov ebx [ebp+arg_0] +
test ebx ebx +
jnz loc_43DDB7  +
push 249h  +
push offset a_Step4_c_17  +
push offset asc_4DD4AB  +
push offset stream  +
call _fprintf  +
add esp 10h +
push offset asc_4DD4DB  +
push offset stream  +
call _fprintf  +
add esp 8 +
push 1  +
call _exit  +
pop ecx  +
cmp dword ptr [ebx] 0 +
jnz loc_43DDF2  +
push 24Ah  +
push offset a_Step4_c_18  +
push offset asc_4DD510  +
push offset stream  +
call _fprintf  +
add esp 10h +
push offset asc_4DD540  +
push offset stream  +
call _fprintf  +
add esp 8 +
push 1  +
call _exit  +
pop ecx  +
xor edi edi +
mov eax [ebx] +
mov esi [eax+0ACh] +
test esi esi +
jnz loc_43DE04  +
mov eax edi +
jmp loc_43DE72  +
push ebx  +
push esi  +
call sub_43DE78  +
mov edi eax +
mov eax [ebx] +
add esp 8 +
mov esi [eax+0B0h] +
test esi esi +
jnz loc_43DE52  +
push 24Ch  +
push offset a_Step4_c_19  +
push offset asc_4DD575  +
push offset stream  +
call _fprintf  +
add esp 10h +
push offset asc_4DD5A5  +
push offset stream  +
call _fprintf  +
add esp 8 +
push 1  +
call _exit  +
pop ecx  +
mov eax [ebx] +
cmp esi [eax+0ACh] +
jnz loc_43DE60  +
mov eax edi +
jmp loc_43DE72  +
push ebx  +
push esi  +
call sub_43DE78  +
add esp 8 +
cmp edi eax +
jge loc_43DE70  +
mov edi eax +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
add esp 0FFFFFFE8h +
xor eax eax +
push ebx  +
push esi  +
push edi  +
mov ebx 0Ah +
mov ecx [ebp+arg_4] +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
mov edx [ebp+arg_0] +
mov edi [eax+14h] +
mov eax [ebp+arg_0] +
mov esi [edx+4] +
mov edx [eax+18h] +
mov [ebp+var_8] edx +
mov eax [ebp+arg_0] +
movsx edx byte ptr [eax+3Eh] +
mov eax edx +
shl eax 3 +
sub eax edx +
cdq   +
idiv  ebx +
add eax 2 +
cmp edi esi +
mov [ebp+var_10] eax +
jle loc_43E098  +
mov eax [ecx+4] +
mov [ebp+var_18] eax +
cmp [ebp+var_18] 0 +
jz loc_43E284  +
mov edx [ebp+var_18] +
mov ebx [edx] +
cmp byte ptr [ebx+68h] 0 +
jnz loc_43DFD3  +
mov ecx [ebx+54h] +
cmp edi ecx +
jle loc_43E284  +
cmp byte ptr [ebx+2Fh] 1 +
jnz loc_43DF96  +
sub ecx 3 +
mov eax ecx +
sub eax esi +
imul  [ebp+var_10] +
mov edx edi +
sub edx esi +
push ecx  +
mov ecx edx +
cdq   +
idiv  ecx +
pop ecx  +
mov edx [ebx+1Ch] +
sar edx 1 +
jns loc_43DF15  +
adc edx 0 +
add edx [ebx+58h] +
add eax edx +
cmp esi ecx +
mov [ebp+var_C] eax +
jg loc_43DF43  +
mov edx [ebp+var_C] +
mov eax esi +
sub edx [ebp+var_8] +
sub eax edi +
imul  edx +
mov edx ecx +
push ecx  +
sub edx edi +
mov ecx edx +
cdq   +
idiv  ecx +
add eax [ebp+var_8] +
pop ecx  +
cmp eax [ebp+var_4] +
jle loc_43DF43  +
mov [ebp+var_4] eax +
mov eax [ebx+18h] +
sar eax 1 +
jns loc_43DF4D  +
adc eax 0 +
add ecx eax +
cmp edi ecx +
jle loc_43E284  +
mov eax ecx +
sub eax esi +
imul  [ebp+var_10] +
mov edx edi +
push ecx  +
sub edx esi +
mov ecx edx +
cdq   +
idiv  ecx +
mov edx [ebx+58h] +
pop ecx  +
add edx [ebx+1Ch] +
add eax edx +
cmp esi ecx +
mov [ebp+var_C] eax +
jg loc_43DFD3  +
mov edx [ebp+var_C] +
mov eax esi +
sub edx [ebp+var_8] +
sub eax edi +
imul  edx +
cdq   +
sub ecx edi +
idiv  ecx +
add eax [ebp+var_8] +
cmp eax [ebp+var_4] +
jle loc_43DFD3  +
mov [ebp+var_4] eax +
jmp loc_43DFD3  +
mov eax ecx +
sub eax esi +
imul  [ebp+var_10] +
mov edx edi +
push ecx  +
sub edx esi +
mov ecx edx +
cdq   +
idiv  ecx +
mov edx [ebx+58h] +
pop ecx  +
add edx [ebx+1Ch] +
add eax edx +
cmp esi ecx +
mov [ebp+var_C] eax +
jg loc_43DFD3  +
mov edx [ebp+var_C] +
mov eax esi +
sub edx [ebp+var_8] +
sub eax edi +
imul  edx +
cdq   +
sub ecx edi +
idiv  ecx +
add eax [ebp+var_8] +
cmp eax [ebp+var_4] +
jle loc_43DFD3  +
mov [ebp+var_4] eax +
mov eax [ebx+0ACh] +
test eax eax +
jz loc_43E080  +
mov ecx [eax+10h] +
cmp ecx [eax+8] +
jz loc_43E080  +
xor edx edx +
mov [ebp+var_14] edx +
mov ecx [eax] +
mov edx [ecx+70h] +
mov ecx [ebp+arg_0] +
mov ecx [ecx] +
cmp edx [ecx+70h] +
jge loc_43E019  +
mov ecx [ebp+arg_0] +
mov edx [eax+1Ch] +
mov ecx [ecx+1Ch] +
mov edx [edx+70h] +
cmp edx [ecx+70h] +
jle loc_43E019  +
mov [ebp+var_14] 1 +
mov ecx [ebp+arg_0] +
mov edx [eax] +
mov ecx [ecx] +
mov edx [edx+70h] +
cmp edx [ecx+70h] +
jle loc_43E040  +
mov ecx [ebp+arg_0] +
mov edx [eax+1Ch] +
mov ecx [ecx+1Ch] +
mov edx [edx+70h] +
cmp edx [ecx+70h] +
jge loc_43E040  +
mov [ebp+var_14] 1 +
mov ecx [eax+0Ch] +
sub ecx dword_4EBDB4 +
add ecx 3 +
cmp edi ecx +
jle loc_43E284  +
mov eax [eax+10h] +
cmp esi ecx +
mov [ebp+var_C] eax +
jg loc_43E080  +
cmp [ebp+var_14] 0 +
jnz loc_43E080  +
mov edx [ebp+var_C] +
mov eax esi +
sub edx [ebp+var_8] +
sub eax edi +
imul  edx +
cdq   +
sub ecx edi +
idiv  ecx +
add eax [ebp+var_8] +
cmp eax [ebp+var_4] +
jle loc_43E080  +
mov [ebp+var_4] eax +
mov eax [ebp+var_18] +
mov ecx [eax+4] +
mov [ebp+var_18] ecx +
cmp [ebp+var_18] 0 +
jnz loc_43DED2  +
jmp loc_43E284  +
cmp esi edi +
jle loc_43E284  +
mov eax [ecx] +
mov edx [eax+70h] +
mov ecx dword_4DC57C +
mov eax [ecx+edx*4] +
mov [ebp+var_18] eax +
mov edx [ebp+var_18] +
mov ecx [edx+4] +
mov [ebp+var_18] ecx +
cmp [ebp+var_18] 0 +
jz loc_43E284  +
mov eax [ebp+var_18] +
mov ebx [eax] +
cmp byte ptr [ebx+68h] 0 +
jnz loc_43E1C8  +
mov ecx [ebx+54h] +
add ecx [ebx+18h] +
cmp edi ecx +
jge loc_43E284  +
cmp byte ptr [ebx+2Fh] 1 +
jnz loc_43E18B  +
add ecx 3 +
mov eax ecx +
sub eax esi +
imul  [ebp+var_10] +
mov edx edi +
sub edx esi +
push ecx  +
mov ecx edx +
cdq   +
idiv  ecx +
pop ecx  +
mov edx [ebx+1Ch] +
sar edx 1 +
jns loc_43E10A  +
adc edx 0 +
add edx [ebx+58h] +
add eax edx +
cmp esi ecx +
mov [ebp+var_C] eax +
jl loc_43E138  +
mov edx [ebp+var_C] +
mov eax esi +
sub edx [ebp+var_8] +
sub eax edi +
imul  edx +
mov edx ecx +
push ecx  +
sub edx edi +
mov ecx edx +
cdq   +
idiv  ecx +
add eax [ebp+var_8] +
pop ecx  +
cmp eax [ebp+var_4] +
jle loc_43E138  +
mov [ebp+var_4] eax +
mov eax [ebx+18h] +
sar eax 1 +
jns loc_43E142  +
adc eax 0 +
sub ecx eax +
cmp edi ecx +
jge loc_43E284  +
mov eax ecx +
sub eax esi +
imul  [ebp+var_10] +
mov edx edi +
push ecx  +
sub edx esi +
mov ecx edx +
cdq   +
idiv  ecx +
mov edx [ebx+58h] +
pop ecx  +
add edx [ebx+1Ch] +
add eax edx +
cmp esi ecx +
mov [ebp+var_C] eax +
jl loc_43E1C8  +
mov edx [ebp+var_C] +
mov eax esi +
sub edx [ebp+var_8] +
sub eax edi +
imul  edx +
cdq   +
sub ecx edi +
idiv  ecx +
add eax [ebp+var_8] +
cmp eax [ebp+var_4] +
jle loc_43E1C8  +
mov [ebp+var_4] eax +
jmp loc_43E1C8  +
mov eax ecx +
sub eax esi +
imul  [ebp+var_10] +
mov edx edi +
push ecx  +
sub edx esi +
mov ecx edx +
cdq   +
idiv  ecx +
mov edx [ebx+58h] +
pop ecx  +
add edx [ebx+1Ch] +
add eax edx +
cmp esi ecx +
mov [ebp+var_C] eax +
jl loc_43E1C8  +
mov edx [ebp+var_C] +
mov eax esi +
sub edx [ebp+var_8] +
sub eax edi +
imul  edx +
cdq   +
sub ecx edi +
idiv  ecx +
add eax [ebp+var_8] +
cmp eax [ebp+var_4] +
jle loc_43E1C8  +
mov [ebp+var_4] eax +
mov eax [ebx+0B0h] +
test eax eax +
jz loc_43E271  +
mov ecx [eax+10h] +
cmp ecx [eax+8] +
jz loc_43E271  +
xor edx edx +
mov [ebp+var_14] edx +
mov ecx [eax] +
mov edx [ecx+70h] +
mov ecx [ebp+arg_0] +
mov ecx [ecx] +
cmp edx [ecx+70h] +
jge loc_43E20E  +
mov ecx [ebp+arg_0] +
mov edx [eax+1Ch] +
mov ecx [ecx+1Ch] +
mov edx [edx+70h] +
cmp edx [ecx+70h] +
jle loc_43E20E  +
mov [ebp+var_14] 1 +
mov ecx [ebp+arg_0] +
mov edx [eax] +
mov ecx [ecx] +
mov edx [edx+70h] +
cmp edx [ecx+70h] +
jle loc_43E235  +
mov ecx [ebp+arg_0] +
mov edx [eax+1Ch] +
mov ecx [ecx+1Ch] +
mov edx [edx+70h] +
cmp edx [ecx+70h] +
jge loc_43E235  +
mov [ebp+var_14] 1 +
mov ecx [eax+0Ch] +
add ecx dword_4EBDB4 +
add ecx 0FFFFFFFDh +
cmp edi ecx +
jge loc_43E284  +
mov eax [eax+10h] +
cmp esi ecx +
mov [ebp+var_C] eax +
jl loc_43E271  +
cmp [ebp+var_14] 0 +
jnz loc_43E271  +
mov edx [ebp+var_C] +
mov eax esi +
sub edx [ebp+var_8] +
sub eax edi +
imul  edx +
cdq   +
sub ecx edi +
idiv  ecx +
add eax [ebp+var_8] +
cmp eax [ebp+var_4] +
jle loc_43E271  +
mov [ebp+var_4] eax +
mov eax [ebp+var_18] +
mov ecx [eax+4] +
mov [ebp+var_18] ecx +
cmp [ebp+var_18] 0 +
jnz loc_43E0C4  +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
push ebx  +
push esi  +
push edi  +
mov ebx [ebp+arg_0] +
test ebx ebx +
jnz loc_43E2D3  +
push 294h  +
push offset a_Step4_c_20  +
push offset asc_4DD5DA  +
push offset stream  +
call _fprintf  +
add esp 10h +
push offset asc_4DD60A  +
push offset stream  +
call _fprintf  +
add esp 8 +
push 1  +
call _exit  +
pop ecx  +
cmp dword ptr [ebx] 0 +
jnz loc_43E30E  +
push 295h  +
push offset a_Step4_c_21  +
push offset asc_4DD63F  +
push offset stream  +
call _fprintf  +
add esp 10h +
push offset asc_4DD66F  +
push offset stream  +
call _fprintf  +
add esp 8 +
push 1  +
call _exit  +
pop ecx  +
mov edi 7FFFFFFFh +
mov eax [ebx] +
mov esi [eax+0A4h] +
test esi esi +
jnz loc_43E323  +
mov eax edi +
jmp loc_43E391  +
push ebx  +
push esi  +
call sub_43E398  +
mov edi eax +
mov eax [ebx] +
add esp 8 +
mov esi [eax+0A8h] +
test esi esi +
jnz loc_43E371  +
push 297h  +
push offset a_Step4_c_22  +
push offset asc_4DD6A4  +
push offset stream  +
call _fprintf  +
add esp 10h +
push offset asc_4DD6D4  +
push offset stream  +
call _fprintf  +
add esp 8 +
push 1  +
call _exit  +
pop ecx  +
mov eax [ebx] +
cmp esi [eax+0A4h] +
jnz loc_43E37F  +
mov eax edi +
jmp loc_43E391  +
push ebx  +
push esi  +
call sub_43E398  +
add esp 8 +
cmp edi eax +
jle loc_43E38F  +
mov edi eax +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
add esp 0FFFFFFE4h +
push ebx  +
push esi  +
push edi  +
mov esi 0Ah +
mov ecx [ebp+arg_4] +
mov [ebp+var_4] 7FFFFFFFh +
mov eax [ebp+arg_0] +
mov ebx [eax+20h] +
mov eax [ebp+arg_0] +
mov edi [eax+0Ch] +
mov eax [ebp+arg_0] +
mov edx [eax+10h] +
mov [ebp+var_8] edx +
mov eax [ebp+arg_0] +
movsx edx byte ptr [eax+3Ch] +
mov eax edx +
shl eax 3 +
sub eax edx +
cdq   +
idiv  esi +
add eax 2 +
cmp edi ebx +
mov [ebp+var_10] eax +
jle loc_43E68D  +
mov eax [ecx+4] +
mov [ebp+var_1C] eax +
cmp [ebp+var_1C] 0 +
jz loc_43E950  +
mov edx [ebp+var_1C] +
mov esi [edx] +
cmp byte ptr [esi+68h] 0 +
jnz loc_43E5C4  +
mov ecx [esi+54h] +
cmp edi ecx +
jle loc_43E950  +
cmp byte ptr [esi+2Fh] 1 +
jnz loc_43E4D2  +
sub ecx 3 +
mov eax ecx +
sub eax ebx +
imul  [ebp+var_10] +
mov edx edi +
sub edx ebx +
push ecx  +
mov ecx edx +
cdq   +
idiv  ecx +
pop ecx  +
mov [ebp+var_14] eax +
mov eax [esi+58h] +
mov edx [esi+1Ch] +
sar edx 1 +
jns loc_43E43D  +
adc edx 0 +
add eax edx +
sub eax [ebp+var_14] +
cmp ebx ecx +
mov [ebp+var_C] eax +
jg loc_43E46B  +
mov edx [ebp+var_C] +
mov eax ebx +
sub edx [ebp+var_8] +
sub eax edi +
imul  edx +
mov edx ecx +
push ecx  +
sub edx edi +
mov ecx edx +
cdq   +
idiv  ecx +
add eax [ebp+var_8] +
pop ecx  +
cmp eax [ebp+var_4] +
jge loc_43E46B  +
mov [ebp+var_4] eax +
mov eax [esi+18h] +
sar eax 1 +
jns loc_43E475  +
adc eax 0 +
add ecx eax +
cmp edi ecx +
jle loc_43E950  +
mov eax ecx +
sub eax ebx +
imul  [ebp+var_10] +
mov edx edi +
push ecx  +
sub edx ebx +
mov ecx edx +
cdq   +
idiv  ecx +
pop ecx  +
mov [ebp+var_14] eax +
mov eax [esi+58h] +
sub eax [ebp+var_14] +
cmp ebx ecx +
mov [ebp+var_C] eax +
jg loc_43E5C4  +
mov edx [ebp+var_C] +
mov eax ebx +
sub edx [ebp+var_8] +
sub eax edi +
imul  edx +
cdq   +
sub ecx edi +
idiv  ecx +
add eax [ebp+var_8] +
test eax eax +
jle loc_43E5C4  +
cmp eax [ebp+var_4] +
jge loc_43E5C4  +
mov [ebp+var_4] eax +
jmp loc_43E5C4  +
cmp byte ptr [esi+2Fh] 3 +
jnz loc_43E582  +
sub ecx 3 +
mov eax ecx +
sub eax ebx +
imul  [ebp+var_10] +
mov edx edi +
push ecx  +
sub edx ebx +
mov ecx edx +
cdq   +
idiv  ecx +
pop ecx  +
mov [ebp+var_14] eax +
mov eax [esi+58h] +
add eax [esi+1Ch] +
sub eax [ebp+var_14] +
cmp ebx ecx +
mov [ebp+var_C] eax +
jg loc_43E52A  +
mov edx [ebp+var_C] +
mov eax ebx +
sub edx [ebp+var_8] +
sub eax edi +
imul  edx +
mov edx ecx +
push ecx  +
sub edx edi +
mov ecx edx +
cdq   +
idiv  ecx +
add eax [ebp+var_8] +
pop ecx  +
test eax eax +
jle loc_43E52A  +
cmp eax [ebp+var_4] +
jge loc_43E52A  +
mov [ebp+var_4] eax +
mov eax [esi+18h] +
sar eax 1 +
jns loc_43E534  +
adc eax 0 +
add ecx eax +
cmp edi ecx +
jle loc_43E950  +
mov eax ecx +
sub eax ebx +
imul  [ebp+var_10] +
mov edx edi +
push ecx  +
sub edx ebx +
mov ecx edx +
cdq   +
idiv  ecx +
pop ecx  +
mov [ebp+var_14] eax +
mov eax [esi+58h] +
sub eax [ebp+var_14] +
cmp ebx ecx +
mov [ebp+var_C] eax +
jg loc_43E5C4  +
mov edx [ebp+var_C] +
mov eax ebx +
sub edx [ebp+var_8] +
sub eax edi +
imul  edx +
cdq   +
sub ecx edi +
idiv  ecx +
add eax [ebp+var_8] +
test eax eax +
jle loc_43E5C4  +
cmp eax [ebp+var_4] +
jge loc_43E5C4  +
mov [ebp+var_4] eax +
jmp loc_43E5C4  +
mov eax ecx +
sub eax ebx +
imul  [ebp+var_10] +
mov edx edi +
push ecx  +
sub edx ebx +
mov ecx edx +
cdq   +
idiv  ecx +
pop ecx  +
mov [ebp+var_14] eax +
mov eax [esi+58h] +
sub eax [ebp+var_14] +
cmp ebx ecx +
mov [ebp+var_C] eax +
jg loc_43E5C4  +
mov edx [ebp+var_C] +
mov eax ebx +
sub edx [ebp+var_8] +
sub eax edi +
imul  edx +
cdq   +
sub ecx edi +
idiv  ecx +
add eax [ebp+var_8] +
test eax eax +
jle loc_43E5C4  +
cmp eax [ebp+var_4] +
jge loc_43E5C4  +
mov [ebp+var_4] eax +
mov eax [esi+0A4h] +
test eax eax +
jz loc_43E675  +
mov ecx [eax+18h] +
cmp ecx [eax+24h] +
jz loc_43E675  +
xor edx edx +
mov [ebp+var_18] edx +
mov ecx [eax] +
mov edx [ecx+70h] +
mov ecx [ebp+arg_0] +
mov ecx [ecx] +
cmp edx [ecx+70h] +
jge loc_43E60A  +
mov ecx [ebp+arg_0] +
mov edx [eax+1Ch] +
mov ecx [ecx+1Ch] +
mov edx [edx+70h] +
cmp edx [ecx+70h] +
jle loc_43E60A  +
mov [ebp+var_18] 1 +
mov ecx [ebp+arg_0] +
mov edx [eax] +
mov ecx [ecx] +
mov edx [edx+70h] +
cmp edx [ecx+70h] +
jle loc_43E631  +
mov ecx [ebp+arg_0] +
mov edx [eax+1Ch] +
mov ecx [ecx+1Ch] +
mov edx [edx+70h] +
cmp edx [ecx+70h] +
jge loc_43E631  +
mov [ebp+var_18] 1 +
mov ecx [eax+14h] +
sub ecx dword_4EBDB4 +
add ecx 3 +
cmp edi ecx +
jle loc_43E950  +
mov eax [eax+18h] +
cmp ebx ecx +
mov [ebp+var_C] eax +
jg loc_43E675  +
cmp [ebp+var_18] 0 +
jnz loc_43E675  +
mov edx [ebp+var_C] +
mov eax ebx +
sub edx [ebp+var_8] +
sub eax edi +
imul  edx +
cdq   +
sub ecx edi +
idiv  ecx +
add eax [ebp+var_8] +
test eax eax +
jle loc_43E675  +
cmp eax [ebp+var_4] +
jge loc_43E675  +
mov [ebp+var_4] eax +
mov eax [ebp+var_1C] +
mov ecx [eax+4] +
mov [ebp+var_1C] ecx +
cmp [ebp+var_1C] 0 +
jnz loc_43E3F4  +
jmp loc_43E950  +
cmp ebx edi +
jle loc_43E950  +
mov eax [ecx] +
mov edx [eax+70h] +
mov ecx dword_4DC580 +
mov eax [ecx+edx*4] +
mov [ebp+var_1C] eax +
mov edx [ebp+var_1C] +
mov ecx [edx+4] +
mov [ebp+var_1C] ecx +
cmp [ebp+var_1C] 0 +
jz loc_43E950  +
mov eax [ebp+var_1C] +
mov esi [eax] +
cmp byte ptr [esi+68h] 0 +
jnz loc_43E890  +
mov ecx [esi+54h] +
add ecx [esi+18h] +
cmp edi ecx +
jge loc_43E950  +
cmp byte ptr [esi+2Fh] 1 +
jnz loc_43E79E  +
add ecx 3 +
mov eax ecx +
sub eax ebx +
imul  [ebp+var_10] +
mov edx edi +
sub edx ebx +
push ecx  +
mov ecx edx +
cdq   +
idiv  ecx +
pop ecx  +
mov [ebp+var_14] eax +
mov eax [esi+58h] +
mov edx [esi+1Ch] +
sar edx 1 +
jns loc_43E705  +
adc edx 0 +
add eax edx +
sub eax [ebp+var_14] +
cmp ebx ecx +
mov [ebp+var_C] eax +
jl loc_43E737  +
mov edx [ebp+var_C] +
mov eax ebx +
sub edx [ebp+var_8] +
sub eax edi +
imul  edx +
mov edx ecx +
push ecx  +
sub edx edi +
mov ecx edx +
cdq   +
idiv  ecx +
add eax [ebp+var_8] +
pop ecx  +
test eax eax +
jle loc_43E737  +
cmp eax [ebp+var_4] +
jge loc_43E737  +
mov [ebp+var_4] eax +
mov eax [esi+18h] +
sar eax 1 +
jns loc_43E741  +
adc eax 0 +
sub ecx eax +
cmp edi ecx +
jge loc_43E950  +
mov eax ecx +
sub eax ebx +
imul  [ebp+var_10] +
mov edx edi +
push ecx  +
sub edx ebx +
mov ecx edx +
cdq   +
idiv  ecx +
pop ecx  +
mov [ebp+var_14] eax +
mov eax [esi+58h] +
sub eax [ebp+var_14] +
cmp ebx ecx +
mov [ebp+var_C] eax +
jl loc_43E890  +
mov edx [ebp+var_C] +
mov eax ebx +
sub edx [ebp+var_8] +
sub eax edi +
imul  edx +
cdq   +
sub ecx edi +
idiv  ecx +
add eax [ebp+var_8] +
test eax eax +
jle loc_43E890  +
cmp eax [ebp+var_4] +
jge loc_43E890  +
mov [ebp+var_4] eax +
jmp loc_43E890  +
cmp byte ptr [esi+2Fh] 3 +
jnz loc_43E84E  +
add ecx 3 +
mov eax ecx +
sub eax ebx +
imul  [ebp+var_10] +
mov edx edi +
push ecx  +
sub edx ebx +
mov ecx edx +
cdq   +
idiv  ecx +
pop ecx  +
mov [ebp+var_14] eax +
mov eax [esi+58h] +
add eax [esi+1Ch] +
sub eax [ebp+var_14] +
cmp ebx ecx +
mov [ebp+var_C] eax +
jl loc_43E7F6  +
mov edx [ebp+var_C] +
mov eax ebx +
sub edx [ebp+var_8] +
sub eax edi +
imul  edx +
mov edx ecx +
push ecx  +
sub edx edi +
mov ecx edx +
cdq   +
idiv  ecx +
add eax [ebp+var_8] +
pop ecx  +
test eax eax +
jle loc_43E7F6  +
cmp eax [ebp+var_4] +
jge loc_43E7F6  +
mov [ebp+var_4] eax +
mov eax [esi+18h] +
sar eax 1 +
jns loc_43E800  +
adc eax 0 +
sub ecx eax +
cmp edi ecx +
jge loc_43E950  +
mov eax ecx +
sub eax ebx +
imul  [ebp+var_10] +
mov edx edi +
push ecx  +
sub edx ebx +
mov ecx edx +
cdq   +
idiv  ecx +
pop ecx  +
mov [ebp+var_14] eax +
mov eax [esi+58h] +
sub eax [ebp+var_14] +
cmp ebx ecx +
mov [ebp+var_C] eax +
jl loc_43E890  +
mov edx [ebp+var_C] +
mov eax ebx +
sub edx [ebp+var_8] +
sub eax edi +
imul  edx +
cdq   +
sub ecx edi +
idiv  ecx +
add eax [ebp+var_8] +
test eax eax +
jle loc_43E890  +
cmp eax [ebp+var_4] +
jge loc_43E890  +
mov [ebp+var_4] eax +
jmp loc_43E890  +
mov eax ecx +
sub eax ebx +
imul  [ebp+var_10] +
mov edx edi +
push ecx  +
sub edx ebx +
mov ecx edx +
cdq   +
idiv  ecx +
pop ecx  +
mov [ebp+var_14] eax +
mov eax [esi+58h] +
sub eax [ebp+var_14] +
cmp ebx ecx +
mov [ebp+var_C] eax +
jl loc_43E890  +
mov edx [ebp+var_C] +
mov eax ebx +
sub edx [ebp+var_8] +
sub eax edi +
imul  edx +
cdq   +
sub ecx edi +
idiv  ecx +
add eax [ebp+var_8] +
test eax eax +
jle loc_43E890  +
cmp eax [ebp+var_4] +
jge loc_43E890  +
mov [ebp+var_4] eax +
mov eax [esi+0A8h] +
test eax eax +
jz loc_43E93D  +
mov ecx [eax+18h] +
cmp ecx [eax+24h] +
jz loc_43E93D  +
xor edx edx +
mov [ebp+var_18] edx +
mov ecx [eax] +
mov edx [ecx+70h] +
mov ecx [ebp+arg_0] +
mov ecx [ecx] +
cmp edx [ecx+70h] +
jge loc_43E8D6  +
mov ecx [ebp+arg_0] +
mov edx [eax+1Ch] +
mov ecx [ecx+1Ch] +
mov edx [edx+70h] +
cmp edx [ecx+70h] +
jle loc_43E8D6  +
mov [ebp+var_18] 1 +
mov ecx [ebp+arg_0] +
mov edx [eax] +
mov ecx [ecx] +
mov edx [edx+70h] +
cmp edx [ecx+70h] +
jle loc_43E8FD  +
mov ecx [ebp+arg_0] +
mov edx [eax+1Ch] +
mov ecx [ecx+1Ch] +
mov edx [edx+70h] +
cmp edx [ecx+70h] +
jge loc_43E8FD  +
mov [ebp+var_18] 1 +
mov ecx [eax+14h] +
add ecx dword_4EBDB4 +
add ecx 0FFFFFFFDh +
cmp edi ecx +
jge loc_43E950  +
mov eax [eax+18h] +
cmp ebx ecx +
mov [ebp+var_C] eax +
jl loc_43E93D  +
cmp [ebp+var_18] 0 +
jnz loc_43E93D  +
mov edx [ebp+var_C] +
mov eax ebx +
sub edx [ebp+var_8] +
sub eax edi +
imul  edx +
cdq   +
sub ecx edi +
idiv  ecx +
add eax [ebp+var_8] +
test eax eax +
jle loc_43E93D  +
cmp eax [ebp+var_4] +
jge loc_43E93D  +
mov [ebp+var_4] eax +
mov eax [ebp+var_1C] +
mov ecx [eax+4] +
mov [ebp+var_1C] ecx +
cmp [ebp+var_1C] 0 +
jnz loc_43E6B9  +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
push edi  +
push ebp  +
add esp 0FFFFFFD8h +
cmp dword_4D9F1C 0 +
jnz loc_43E9A2  +
push 2EAh  +
push offset a_Step4_c_23  +
push offset asc_4DD709  +
push offset stream  +
call _fprintf  +
add esp 10h +
push offset asc_4DD739  +
push offset stream  +
call _fprintf  +
add esp 8 +
push 1  +
call _exit  +
pop ecx  +
xor eax eax +
mov [esp+28h+var_28] eax +
jmp loc_43EFFE  +
mov eax [esp+28h+var_28] +
mov ecx 0Ah +
cdq   +
idiv  ecx +
test edx edx +
jnz loc_43E9C3  +
push 65h  +
call sub_42A930  +
pop ecx  +
mov eax [esp+28h+var_28] +
mov edx eax +
shl eax 3 +
sub eax edx +
mov ecx dword_4D9F1C +
mov eax [ecx+eax*4+10h] +
mov [esp+28h+var_24] eax +
cmp [esp+28h+var_24] 0 +
jz loc_43EA0A  +
mov edx [esp+28h+var_24] +
mov ecx [edx] +
mov eax [ecx+70h] +
mov edx dword_4DC57C +
mov ecx [esp+28h+var_24] +
mov [edx+eax*4] ecx +
mov eax [esp+28h+var_24] +
mov edx [eax+4] +
mov [esp+28h+var_24] edx +
cmp [esp+28h+var_24] 0 +
jnz loc_43E9E2  +
mov ecx [esp+28h+var_28] +
mov eax ecx +
shl ecx 3 +
sub ecx eax +
mov edx dword_4D9F1C +
mov ecx [edx+ecx*4+14h] +
mov [esp+28h+var_24] ecx +
cmp [esp+28h+var_24] 0 +
jz loc_43EFFB  +
mov eax [esp+28h+var_24] +
mov edx [eax] +
mov [esp+28h+var_20] edx +
mov ecx [esp+28h+var_20] +
cmp dword ptr [ecx+18h] 0 +
jnz loc_43EFE5  +
mov eax [esp+28h+var_20] +
cmp dword ptr [eax+98h] 0 +
jz loc_43EFE5  +
mov edx [esp+28h+var_20] +
mov ecx [edx+98h] +
cmp dword ptr [ecx+4] 0 +
jnz loc_43EFE5  +
mov eax [esp+28h+var_20] +
cmp dword ptr [eax+94h] 0 +
jz loc_43EFE5  +
mov edx [esp+28h+var_20] +
mov ecx [edx+94h] +
cmp dword ptr [ecx+4] 0 +
jnz loc_43EFE5  +
mov eax [esp+28h+var_20] +
mov edx [eax+94h] +
mov ecx [edx] +
mov [esp+28h+var_1C] ecx +
mov eax [esp+28h+var_20] +
mov edx [eax+98h] +
mov ecx [edx] +
mov [esp+28h+var_18] ecx +
mov eax [esp+28h+var_18] +
mov edx [eax+8] +
mov [esp+28h+var_10] edx +
mov ecx [esp+28h+var_18] +
mov eax [ecx+10h] +
mov [esp+28h+var_C] eax +
mov edx [esp+28h+var_1C] +
mov ecx [edx+18h] +
mov [esp+28h+var_8] ecx +
mov eax [esp+28h+var_1C] +
mov edx [eax+10h] +
mov [esp+28h+var_14] edx +
mov ecx [esp+28h+var_1C] +
mov eax [ecx+24h] +
cmp eax [esp+28h+var_8] +
jnz loc_43ED51  +
mov edx [esp+28h+var_C] +
cmp edx [esp+28h+var_10] +
jle loc_43ED51  +
mov ecx [esp+28h+var_C] +
cmp ecx [esp+28h+var_14] +
jle loc_43ED51  +
mov eax [esp+28h+var_1C] +
mov edi [eax+0Ch] +
mov eax [esp+28h+var_18] +
mov esi [eax+4] +
mov [esp+28h+var_4] 1 +
cmp esi edi +
jle loc_43EB2B  +
mov eax [esp+28h+var_18] +
cmp esi [eax+14h] +
jl loc_43EB40  +
cmp esi edi +
jle loc_43EC43  +
cmp dword_4D4B7C 0 +
jz loc_43EC43  +
mov edx [esp+28h+var_20] +
mov ecx [edx+70h] +
mov eax dword_4DC57C +
mov ecx [eax+ecx*4] +
mov ecx [ecx+4] +
test ecx ecx +
jz loc_43EC17  +
cmp [esp+28h+var_4] 0 +
jz loc_43EC17  +
mov edx [ecx] +
cmp byte ptr [edx+68h] 0 +
jnz loc_43EBBC  +
mov edx [ecx] +
mov eax [ecx] +
mov eax [eax+18h] +
mov ebx [edx+54h] +
add ebx eax +
test eax eax +
jnz loc_43EB83  +
add ebx dword_4EBDB4 +
cmp edi ebx +
jge loc_43EC17  +
mov edx [ecx] +
mov ebp [edx+58h] +
add ebp 0FFFFFFFEh +
cmp esi ebx +
jl loc_43EBBC  +
mov edx [esp+28h+var_14] +
mov eax esi +
sub edx [esp+28h+var_C] +
sub eax ebx +
imul  edx +
mov edx esi +
sub edx edi +
mov ebx edx +
cdq   +
idiv  ebx +
add eax [esp+28h+var_C] +
cmp eax ebp +
jl loc_43EBBC  +
xor eax eax +
mov [esp+28h+var_4] eax +
mov edx [ecx] +
mov eax [edx+0A8h] +
test eax eax +
jz loc_43EC0C  +
mov edx [eax+18h] +
cmp edx [eax+24h] +
jz loc_43EC0C  +
mov ebx [eax+14h] +
add ebx dword_4EBDB4 +
add ebx 0FFFFFFFDh +
cmp edi ebx +
jge loc_43EC17  +
mov ebp [eax+18h] +
cmp esi ebx +
jl loc_43EC0C  +
mov edx [esp+28h+var_14] +
mov eax esi +
sub edx [esp+28h+var_C] +
sub eax ebx +
imul  edx +
mov edx esi +
sub edx edi +
mov ebx edx +
cdq   +
idiv  ebx +
add eax [esp+28h+var_C] +
cmp eax ebp +
jl loc_43EC0C  +
xor eax eax +
mov [esp+28h+var_4] eax +
mov ecx [ecx+4] +
test ecx ecx +
jnz loc_43EB5A  +
cmp [esp+28h+var_4] 0 +
jz loc_43ED51  +
mov edx [esp+28h+var_18] +
mov eax [esp+28h+var_1C] +
mov ecx [edx+10h] +
mov [eax+24h] ecx +
mov edx [esp+28h+var_1C] +
mov [edx+18h] ecx +
mov eax [esp+28h+var_18] +
mov [eax+8] ecx +
jmp loc_43ED51  +
cmp esi edi +
jge loc_43EC50  +
mov edx [esp+28h+var_18] +
cmp esi [edx+14h] +
jg loc_43EC65  +
cmp esi edi +
jge loc_43ED51  +
cmp dword_4D4B7C 0 +
jz loc_43ED51  +
mov eax [esp+28h+var_24] +
mov ecx [eax+4] +
test ecx ecx +
jz loc_43ED2E  +
cmp [esp+28h+var_4] 0 +
jz loc_43ED2E  +
mov edx [ecx] +
cmp byte ptr [edx+68h] 0 +
jnz loc_43ECD3  +
mov eax [ecx] +
mov ebx [eax+54h] +
mov eax [ecx] +
cmp dword ptr [eax+18h] 0 +
jnz loc_43EC9A  +
sub ebx dword_4EBDB4 +
cmp edi ebx +
jle loc_43ED2E  +
mov edx [ecx] +
mov ebp [edx+58h] +
add ebp 0FFFFFFFEh +
cmp esi ebx +
jg loc_43ECD3  +
mov edx [esp+28h+var_14] +
mov eax esi +
sub edx [esp+28h+var_C] +
sub eax ebx +
imul  edx +
mov edx esi +
sub edx edi +
mov ebx edx +
cdq   +
idiv  ebx +
add eax [esp+28h+var_C] +
cmp eax ebp +
jl loc_43ECD3  +
xor eax eax +
mov [esp+28h+var_4] eax +
mov edx [ecx] +
mov eax [edx+0A4h] +
test eax eax +
jz loc_43ED23  +
mov edx [eax+18h] +
cmp edx [eax+24h] +
jz loc_43ED23  +
mov ebx [eax+14h] +
sub ebx dword_4EBDB4 +
add ebx 3 +
cmp edi ebx +
jle loc_43ED2E  +
mov ebp [eax+18h] +
cmp esi ebx +
jg loc_43ED23  +
mov edx [esp+28h+var_14] +
mov eax esi +
sub edx [esp+28h+var_C] +
sub eax ebx +
imul  edx +
mov edx esi +
sub edx edi +
mov ebx edx +
cdq   +
idiv  ebx +
add eax [esp+28h+var_C] +
cmp eax ebp +
jl loc_43ED23  +
xor eax eax +
mov [esp+28h+var_4] eax +
mov ecx [ecx+4] +
test ecx ecx +
jnz loc_43EC74  +
cmp [esp+28h+var_4] 0 +
jz loc_43ED51  +
mov edx [esp+28h+var_18] +
mov eax [esp+28h+var_1C] +
mov ecx [edx+10h] +
mov [eax+24h] ecx +
mov edx [esp+28h+var_1C] +
mov [edx+18h] ecx +
mov eax [esp+28h+var_18] +
mov [eax+8] ecx +
mov edx [esp+28h+var_18] +
mov eax [edx+18h] +
mov [esp+28h+var_14] eax +
mov edx [esp+28h+var_18] +
mov ecx [edx+8] +
cmp ecx [esp+28h+var_C] +
jnz loc_43EFE5  +
mov eax [esp+28h+var_8] +
cmp eax [esp+28h+var_10] +
jge loc_43EFE5  +
mov edx [esp+28h+var_8] +
cmp edx [esp+28h+var_14] +
jge loc_43EFE5  +
mov eax [esp+28h+var_18] +
mov ecx [esp+28h+var_18] +
mov esi [eax+4] +
mov edi [ecx+14h] +
mov eax [esp+28h+var_8] +
cmp esi edi +
mov [esp+28h+var_C] eax +
mov [esp+28h+var_4] 1 +
jle loc_43EDB4  +
mov edx [esp+28h+var_1C] +
cmp esi [edx+0Ch] +
jl loc_43EDC9  +
cmp esi edi +
jle loc_43EED2  +
cmp dword_4D4B7C 0 +
jz loc_43EED2  +
mov ecx [esp+28h+var_20] +
mov eax [ecx+70h] +
mov edx dword_4DC57C +
mov ecx [edx+eax*4] +
mov ecx [ecx+4] +
test ecx ecx +
jz loc_43EEA6  +
cmp [esp+28h+var_4] 0 +
jz loc_43EEA6  +
mov eax [ecx] +
cmp byte ptr [eax+68h] 0 +
jnz loc_43EE4B  +
mov edx [ecx] +
mov eax [ecx] +
mov eax [eax+18h] +
mov ebx [edx+54h] +
add ebx eax +
test eax eax +
jnz loc_43EE0D  +
add ebx dword_4EBDB4 +
cmp edi ebx +
jge loc_43EEA6  +
mov edx [ecx] +
mov eax [ecx] +
mov ebp [edx+58h] +
add ebp [eax+1Ch] +
add ebp 2 +
cmp esi ebx +
jl loc_43EE4B  +
mov edx [esp+28h+var_14] +
mov eax esi +
sub edx [esp+28h+var_C] +
sub eax ebx +
imul  edx +
mov edx esi +
sub edx edi +
mov ebx edx +
cdq   +
idiv  ebx +
add eax [esp+28h+var_C] +
cmp eax ebp +
jg loc_43EE4B  +
xor eax eax +
mov [esp+28h+var_4] eax +
mov edx [ecx] +
mov eax [edx+0B0h] +
test eax eax +
jz loc_43EE9B  +
mov edx [eax+10h] +
cmp edx [eax+8] +
jz loc_43EE9B  +
mov ebx [eax+0Ch] +
add ebx dword_4EBDB4 +
add ebx 0FFFFFFFDh +
cmp edi ebx +
jge loc_43EEA6  +
mov ebp [eax+10h] +
cmp esi ebx +
jl loc_43EE9B  +
mov edx [esp+28h+var_14] +
mov eax esi +
sub edx [esp+28h+var_C] +
sub eax ebx +
imul  edx +
mov edx esi +
sub edx edi +
mov ebx edx +
cdq   +
idiv  ebx +
add eax [esp+28h+var_C] +
cmp eax ebp +
jg loc_43EE9B  +
xor eax eax +
mov [esp+28h+var_4] eax +
mov ecx [ecx+4] +
test ecx ecx +
jnz loc_43EDE4  +
cmp [esp+28h+var_4] 0 +
jz loc_43EFE5  +
mov edx [esp+28h+var_1C] +
mov eax [esp+28h+var_1C] +
mov ecx [edx+18h] +
mov [eax+24h] ecx +
mov edx [esp+28h+var_18] +
mov [edx+10h] ecx +
mov eax [esp+28h+var_18] +
mov [eax+8] ecx +
jmp loc_43EFE5  +
cmp esi edi +
jge loc_43EEDF  +
mov edx [esp+28h+var_1C] +
cmp esi [edx+0Ch] +
jg loc_43EEF4  +
cmp esi edi +
jge loc_43EFE5  +
cmp dword_4D4B7C 0 +
jz loc_43EFE5  +
mov eax [esp+28h+var_24] +
mov ecx [eax+4] +
test ecx ecx +
jz loc_43EFC2  +
cmp [esp+28h+var_4] 0 +
jz loc_43EFC2  +
mov edx [ecx] +
cmp byte ptr [edx+68h] 0 +
jnz loc_43EF67  +
mov eax [ecx] +
mov ebx [eax+54h] +
mov eax [ecx] +
cmp dword ptr [eax+18h] 0 +
jnz loc_43EF29  +
sub ebx dword_4EBDB4 +
cmp edi ebx +
jle loc_43EFC2  +
mov edx [ecx] +
mov eax [ecx] +
mov ebp [edx+58h] +
add ebp [eax+1Ch] +
add ebp 2 +
cmp esi ebx +
jg loc_43EF67  +
mov edx [esp+28h+var_14] +
mov eax esi +
sub edx [esp+28h+var_C] +
sub eax ebx +
imul  edx +
mov edx esi +
sub edx edi +
mov ebx edx +
cdq   +
idiv  ebx +
add eax [esp+28h+var_C] +
cmp eax ebp +
jg loc_43EF67  +
xor eax eax +
mov [esp+28h+var_4] eax +
mov edx [ecx] +
mov eax [edx+0ACh] +
test eax eax +
jz loc_43EFB7  +
mov edx [eax+10h] +
cmp edx [eax+8] +
jz loc_43EFB7  +
mov ebx [eax+0Ch] +
sub ebx dword_4EBDB4 +
add ebx 3 +
cmp edi ebx +
jle loc_43EFC2  +
mov ebp [eax+10h] +
cmp esi ebx +
jg loc_43EFB7  +
mov edx [esp+28h+var_14] +
mov eax esi +
sub edx [esp+28h+var_C] +
sub eax ebx +
imul  edx +
mov edx esi +
sub edx edi +
mov ebx edx +
cdq   +
idiv  ebx +
add eax [esp+28h+var_C] +
cmp eax ebp +
jg loc_43EFB7  +
xor eax eax +
mov [esp+28h+var_4] eax +
mov ecx [ecx+4] +
test ecx ecx +
jnz loc_43EF03  +
cmp [esp+28h+var_4] 0 +
jz loc_43EFE5  +
mov edx [esp+28h+var_1C] +
mov eax [esp+28h+var_1C] +
mov ecx [edx+18h] +
mov [eax+24h] ecx +
mov edx [esp+28h+var_18] +
mov [edx+10h] ecx +
mov eax [esp+28h+var_18] +
mov [eax+8] ecx +
mov edx [esp+28h+var_24] +
mov eax [edx+4] +
mov [esp+28h+var_24] eax +
cmp [esp+28h+var_24] 0 +
jnz loc_43EA2D  +
inc [esp+28h+var_28]  +
mov edx dword_4D9F20 +
inc edx  +
cmp edx [esp+28h+var_28] +
jge loc_43E9AC  +
add esp 28h +
pop ebp  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
test ebx ebx +
jz loc_43F031  +
push ebx  +
call sub_43F064  +
pop ecx  +
mov ebx [ebx+5Ch] +
test ebx ebx +
jnz loc_43F023  +
mov ebx dword_4CD144 +
test ebx ebx +
jz loc_43F049  +
push ebx  +
call sub_43F064  +
pop ecx  +
mov ebx [ebx+5Ch] +
test ebx ebx +
jnz loc_43F03B  +
mov ebx dword_4CD14C +
test ebx ebx +
jz loc_43F061  +
push ebx  +
call sub_43F064  +
pop ecx  +
mov ebx [ebx+5Ch] +
test ebx ebx +
jnz loc_43F053  +
pop ebx  +
retn   +
***
push ebx  +
push esi  +
push edi  +
mov eax [ebp+arg_0] +
mov esi [eax+0B4h] +
test esi esi +
jz loc_43F0AC  +
cmp dword ptr [esi] 0 +
jz loc_43F091  +
mov eax [esi+4] +
mov edx [eax+1Ch] +
cmp edx [ebp+arg_0] +
jnz loc_43F091  +
mov ecx [esi+4] +
push ecx  +
call sub_43F258  +
pop ecx  +
cmp dword ptr [esi+8] 0 +
jz loc_43F0AC  +
mov eax [esi+0Ch] +
mov edx [eax+1Ch] +
cmp edx [ebp+arg_0] +
jnz loc_43F0AC  +
mov ecx [esi+0Ch] +
push ecx  +
call sub_43F258  +
pop ecx  +
mov eax [ebp+arg_0] +
mov ebx [eax+98h] +
or esi 0FFFFFFFFh +
test ebx ebx +
jz loc_43F0E0  +
mov edx [ebx] +
mov al [edx+42h] +
cmp al 6Ch +
jz loc_43F0D9  +
cmp al 72h +
jz loc_43F0D9  +
mov eax [edx+44h] +
cmp esi eax +
jz loc_43F0D9  +
mov esi eax +
push ebx  +
call sub_43F384  +
pop ecx  +
mov ebx [ebx+4] +
test ebx ebx +
jnz loc_43F0BC  +
mov eax [ebp+arg_0] +
mov ebx [eax+94h] +
or esi 0FFFFFFFFh +
test ebx ebx +
jz loc_43F11F  +
mov edx [ebx] +
mov al [edx+42h] +
cmp al 6Ch +
jz loc_43F0FD  +
cmp al 72h +
jnz loc_43F106  +
push edx  +
call sub_43F258  +
pop ecx  +
jmp loc_43F118  +
mov ecx [ebx] +
mov eax [ecx+48h] +
cmp esi eax +
jz loc_43F118  +
mov esi eax +
push ebx  +
call sub_43F4E4  +
pop ecx  +
mov ebx [ebx+4] +
test ebx ebx +
jnz loc_43F0F0  +
mov eax [ebp+arg_0] +
cmp byte ptr [eax+68h] 0 +
jz loc_43F250  +
mov edx [ebp+arg_0] +
mov esi [edx+0B4h] +
test esi esi +
jz loc_43F13E  +
cmp dword ptr [esi] 0 +
jnz loc_43F174  +
push 36Ah  +
push offset a_Step4_c_24  +
push offset asc_4DD76E  +
push offset stream  +
call _fprintf  +
add esp 10h +
push offset asc_4DD79E  +
push offset stream  +
call _fprintf  +
add esp 8 +
push 1  +
call _exit  +
pop ecx  +
mov eax [esi+4] +
mov edx [eax+1Ch] +
cmp edx [ebp+arg_0] +
jz loc_43F1B5  +
push 36Bh  +
push offset a_Step4_c_25  +
push offset asc_4DD7D3  +
push offset stream  +
call _fprintf  +
add esp 10h +
push offset asc_4DD803  +
push offset stream  +
call _fprintf  +
add esp 8 +
push 1  +
call _exit  +
pop ecx  +
mov eax [esi+4] +
mov edx [eax+4] +
cmp edx [eax+20h] +
jge loc_43F1C7  +
mov edi 8 +
jmp loc_43F1CC  +
mov edi 7 +
mov eax [ebp+arg_0] +
mov ebx [eax+98h] +
test ebx ebx +
jz loc_43F1E7  +
mov eax edi +
mov edx [ebx] +
mov [edx+29h] al +
mov ebx [ebx+4] +
test ebx ebx +
jnz loc_43F1D9  +
mov ecx [ebp+arg_0] +
mov ebx [ecx+94h] +
test ebx ebx +
jz loc_43F202  +
mov eax edi +
mov edx [ebx] +
mov [edx+28h] al +
mov ebx [ebx+4] +
test ebx ebx +
jnz loc_43F1F4  +
cmp dword ptr [esi+8] 0 +
jz loc_43F250  +
mov ecx [esi+0Ch] +
mov eax [ecx] +
cmp eax [ebp+arg_0] +
jz loc_43F248  +
push 377h  +
push offset a_Step4_c_26  +
push offset asc_4DD838  +
push offset stream  +
call _fprintf  +
add esp 10h +
push offset asc_4DD868  +
push offset stream  +
call _fprintf  +
add esp 8 +
push 1  +
call _exit  +
pop ecx  +
mov edx edi +
mov ecx [esi+0Ch] +
mov [ecx+29h] dl +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
add esp 0FFFFFFF4h +
push ebx  +
mov ebx [ebp+arg_0] +
mov eax [ebx+4] +
cmp eax [ebx+20h] +
jnz loc_43F2A0  +
push 37Fh  +
push offset a_Step4_c_27  +
push offset asc_4DD89D  +
push offset stream  +
call _fprintf  +
add esp 10h +
push offset asc_4DD8CD  +
push offset stream  +
call _fprintf  +
add esp 8 +
push 1  +
call _exit  +
pop ecx  +
mov ecx [ebx+24h] +
sub ecx [ebx+8] +
mov [ebp+var_8] ecx +
fild  [ebp+var_8] +
mov edx [ebx+20h] +
mov ecx edx +
mov eax [ebx+4] +
sub ecx eax +
mov [ebp+var_C] ecx +
fild  [ebp+var_C] +
fdivp st(1) st +
fstp  [ebp+var_4] +
cmp edx eax +
jle loc_43F2F3  +
fld  ds:flt_43F37C +
fcomp  [ebp+var_4] +
fnstsw  ax +
sahf   +
ja loc_43F2D9  +
mov byte ptr [ebx+28h] 5 +
jmp loc_43F31F  +
fld  ds:flt_43F380 +
fcomp  [ebp+var_4] +
fnstsw  ax +
sahf   +
jnb loc_43F2ED  +
mov byte ptr [ebx+28h] 7 +
jmp loc_43F31F  +
mov byte ptr [ebx+28h] 2 +
jmp loc_43F31F  +
fld  ds:flt_43F37C +
fcomp  [ebp+var_4] +
fnstsw  ax +
sahf   +
ja loc_43F307  +
mov byte ptr [ebx+28h] 3 +
jmp loc_43F31F  +
fld  ds:flt_43F380 +
fcomp  [ebp+var_4] +
fnstsw  ax +
sahf   +
jnb loc_43F31B  +
mov byte ptr [ebx+28h] 8 +
jmp loc_43F31F  +
mov byte ptr [ebx+28h] 6 +
movsx edx byte ptr [ebx+28h] +
cmp edx 8 +
ja loc_43F375  +
jmp ds:off_43F32F[edx*4]  +
mov byte ptr [ebx+29h] 3 +
jmp loc_43F375  +
mov byte ptr [ebx+29h] 8 +
jmp loc_43F375  +
mov byte ptr [ebx+29h] 6 +
jmp loc_43F375  +
mov byte ptr [ebx+29h] 2 +
jmp loc_43F375  +
mov byte ptr [ebx+29h] 7 +
jmp loc_43F375  +
mov byte ptr [ebx+29h] 5 +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
add esp 0FFFFFFE0h +
push ebx  +
push esi  +
push edi  +
mov esi [ebp+arg_0] +
mov edx esi +
test edx edx +
mov eax [esi] +
mov ecx [eax+44h] +
mov eax 1 +
mov [ebp+var_C] eax +
mov [ebp+var_8] eax +
mov [ebp+var_4] eax +
jz loc_43F44C  +
mov eax [edx] +
cmp ecx [eax+44h] +
jnz loc_43F44C  +
mov ebx [eax+8] +
cmp ebx [eax+10h] +
jz loc_43F3DE  +
mov edi [eax+0Ch] +
sub edi [eax+4] +
mov [ebp+var_14] edi +
fild  [ebp+var_14] +
mov edi [eax+10h] +
sub edi ebx +
mov [ebp+var_18] edi +
fild  [ebp+var_18] +
fdivp st(1) st +
fstp  [ebp+var_10] +
jmp loc_43F3FA  +
mov edi [eax+14h] +
sub edi [eax+4] +
mov [ebp+var_1C] edi +
fild  [ebp+var_1C] +
mov edi [eax+18h] +
sub edi ebx +
mov [ebp+var_20] edi +
fild  [ebp+var_20] +
fdivp st(1) st +
fstp  [ebp+var_10] +
fld  ds:flt_43F4CC +
fcomp  [ebp+var_10] +
fnstsw  ax +
sahf   +
jnb loc_43F416  +
fld  [ebp+var_10] +
fcomp  ds:flt_43F4D0 +
fnstsw  ax +
sahf   +
jb loc_43F41B  +
xor eax eax +
mov [ebp+var_4] eax +
fld  ds:dbl_43F4D4 +
fcomp  [ebp+var_10] +
fnstsw  ax +
sahf   +
jb loc_43F42E  +
xor eax eax +
mov [ebp+var_C] eax +
fld  [ebp+var_10] +
fcomp  ds:dbl_43F4DC +
fnstsw  ax +
sahf   +
jb loc_43F441  +
xor eax eax +
mov [ebp+var_8] eax +
mov edx [edx+4] +
test edx edx +
jnz loc_43F3AD  +
cmp [ebp+var_4] 0 +
jz loc_43F46C  +
mov edx esi +
test edx edx +
jz loc_43F4C4  +
mov eax [edx] +
cmp ecx [eax+44h] +
jnz loc_43F4C4  +
mov byte ptr [eax+29h] 1 +
mov edx [edx+4] +
test edx edx +
jnz loc_43F458  +
jmp loc_43F4C4  +
cmp [ebp+var_C] 0 +
jz loc_43F48C  +
mov edx esi +
test edx edx +
jz loc_43F4C4  +
mov eax [edx] +
cmp ecx [eax+44h] +
jnz loc_43F4C4  +
mov byte ptr [eax+29h] 3 +
mov edx [edx+4] +
test edx edx +
jnz loc_43F478  +
jmp loc_43F4C4  +
cmp [ebp+var_8] 0 +
jz loc_43F4AC  +
mov edx esi +
test edx edx +
jz loc_43F4C4  +
mov eax [edx] +
cmp ecx [eax+44h] +
jnz loc_43F4C4  +
mov byte ptr [eax+29h] 2 +
mov edx [edx+4] +
test edx edx +
jnz loc_43F498  +
jmp loc_43F4C4  +
mov edx esi +
test edx edx +
jz loc_43F4C4  +
mov eax [edx] +
cmp ecx [eax+44h] +
jnz loc_43F4C4  +
mov byte ptr [eax+29h] 1 +
mov edx [edx+4] +
test edx edx +
jnz loc_43F4B2  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
add esp 0FFFFFFDCh +
push ebx  +
push esi  +
push edi  +
mov esi [ebp+arg_0] +
mov edx esi +
test edx edx +
mov eax [esi] +
mov ecx [eax+48h] +
mov eax 1 +
mov [ebp+var_8] eax +
mov [ebp+var_C] eax +
mov [ebp+var_4] eax +
jz loc_43F5BE  +
mov eax [edx] +
cmp ecx [eax+48h] +
jnz loc_43F5BE  +
mov ebx [eax+24h] +
cmp ebx [eax+18h] +
jz loc_43F53C  +
mov edi [eax+20h] +
sub edi [eax+14h] +
mov [ebp+var_14] edi +
fild  [ebp+var_14] +
sub ebx [eax+18h] +
mov [ebp+var_18] ebx +
fild  [ebp+var_18] +
fdivp st(1) st +
fstp  [ebp+var_10] +
jmp loc_43F56C  +
cmp ebx [eax+10h] +
jz loc_43F55D  +
mov edi [eax+20h] +
sub edi [eax+0Ch] +
mov [ebp+var_1C] edi +
fild  [ebp+var_1C] +
sub ebx [eax+10h] +
mov [ebp+var_20] ebx +
fild  [ebp+var_20] +
fdivp st(1) st +
fstp  [ebp+var_10] +
jmp loc_43F56C  +
mov ebx [eax+20h] +
sub ebx [eax+0Ch] +
mov [ebp+var_24] ebx +
fild  [ebp+var_24] +
fstp  [ebp+var_10] +
fld  ds:flt_43F640 +
fcomp  [ebp+var_10] +
fnstsw  ax +
sahf   +
jnb loc_43F588  +
fld  [ebp+var_10] +
fcomp  ds:flt_43F644 +
fnstsw  ax +
sahf   +
jb loc_43F58D  +
xor eax eax +
mov [ebp+var_4] eax +
fld  ds:dbl_43F648 +
fcomp  [ebp+var_10] +
fnstsw  ax +
sahf   +
jb loc_43F5A0  +
xor eax eax +
mov [ebp+var_C] eax +
fld  [ebp+var_10] +
fcomp  ds:dbl_43F650 +
fnstsw  ax +
sahf   +
jb loc_43F5B3  +
xor eax eax +
mov [ebp+var_8] eax +
mov edx [edx+4] +
test edx edx +
jnz loc_43F50D  +
cmp [ebp+var_4] 0 +
jz loc_43F5DE  +
mov edx esi +
test edx edx +
jz loc_43F636  +
mov eax [edx] +
cmp ecx [eax+48h] +
jnz loc_43F636  +
mov byte ptr [eax+28h] 4 +
mov edx [edx+4] +
test edx edx +
jnz loc_43F5CA  +
jmp loc_43F636  +
cmp [ebp+var_C] 0 +
jz loc_43F5FE  +
mov edx esi +
test edx edx +
jz loc_43F636  +
mov eax [edx] +
cmp ecx [eax+48h] +
jnz loc_43F636  +
mov byte ptr [eax+28h] 5 +
mov edx [edx+4] +
test edx edx +
jnz loc_43F5EA  +
jmp loc_43F636  +
cmp [ebp+var_8] 0 +
jz loc_43F61E  +
mov edx esi +
test edx edx +
jz loc_43F636  +
mov eax [edx] +
cmp ecx [eax+48h] +
jnz loc_43F636  +
mov byte ptr [eax+28h] 6 +
mov edx [edx+4] +
test edx edx +
jnz loc_43F60A  +
jmp loc_43F636  +
mov edx esi +
test edx edx +
jz loc_43F636  +
mov eax [edx] +
cmp ecx [eax+48h] +
jnz loc_43F636  +
mov byte ptr [eax+28h] 4 +
mov edx [edx+4] +
test edx edx +
jnz loc_43F624  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
mov eax dword_4CD130 +
push eax  +
call sub_43F680  +
pop ecx  +
mov edx dword_4CD144 +
push edx  +
call sub_43F680  +
pop ecx  +
mov ecx dword_4CD14C +
push ecx  +
call sub_43F680  +
pop ecx  +
retn   +
***
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
test esi esi +
jz loc_43F6F5  +
mov eax [esi+54h] +
mov edx [esi+58h] +
mov [esi+54h] edx +
mov [esi+58h] eax +
mov eax [esi+18h] +
mov edx [esi+1Ch] +
mov [esi+18h] edx +
mov [esi+1Ch] eax +
mov ebx [esi+0B4h] +
test ebx ebx +
jz loc_43F6D4  +
mov eax [ebx+4] +
test eax eax +
jz loc_43F6C1  +
cmp esi [eax+1Ch] +
jnz loc_43F6C1  +
push eax  +
call sub_43F6FC  +
pop ecx  +
mov eax [ebx+0Ch] +
test eax eax +
jz loc_43F6D4  +
cmp esi [eax+1Ch] +
jnz loc_43F6D4  +
push eax  +
call sub_43F6FC  +
pop ecx  +
mov ebx [esi+94h] +
test ebx ebx +
jz loc_43F6EE  +
mov eax [ebx] +
push eax  +
call sub_43F6FC  +
pop ecx  +
mov ebx [ebx+4] +
test ebx ebx +
jnz loc_43F6DE  +
mov esi [esi+5Ch] +
test esi esi +
jnz loc_43F68C  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
mov eax [ebp+arg_0] +
mov ecx offset dword_4EC400 +
push ebx  +
xor eax eax +
mov [ecx] eax +
mov eax dword_4D9F20 +
mov ebx dword_4D9F1C +
inc eax  +
mov edx eax +
shl edx 3 +
sub edx eax +
test eax eax +
lea edx [ebx+edx*4+14h] +
jl loc_43F82E  +
cmp dword ptr [edx] 0 +
jnz loc_43F82E  +
dec eax  +
add edx 0FFFFFFE4h +
test eax eax +
jge loc_43F821  +
mov edx eax +
shl eax 3 +
sub eax edx +
mov edx dword_4D9F1C +
mov eax [edx+eax*4+14h] +
test eax eax +
jz loc_43F862  +
mov edx [eax] +
mov ebx [edx+58h] +
add ebx [edx+1Ch] +
cmp ebx [ecx] +
jle loc_43F85B  +
mov edx [eax] +
mov ebx [eax] +
mov edx [edx+58h] +
add edx [ebx+1Ch] +
mov [ecx] edx +
mov eax [eax+4] +
test eax eax +
jnz loc_43F843  +
mov eax dword_4EBD80 +
add [ecx] eax +
mov edx dword_4CD130 +
push edx  +
call sub_43F894  +
pop ecx  +
mov ecx dword_4CD144 +
push ecx  +
call sub_43F894  +
pop ecx  +
mov eax dword_4CD14C +
push eax  +
call sub_43F894  +
pop ecx  +
pop ebx  +
retn   +
***
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
test esi esi +
jz loc_43F8FF  +
mov eax dword_4EC400 +
sub eax [esi+58h] +
sub eax [esi+1Ch] +
mov [esi+58h] eax +
mov ebx [esi+0B4h] +
test ebx ebx +
jz loc_43F8DE  +
mov eax [ebx+4] +
test eax eax +
jz loc_43F8CB  +
cmp esi [eax+1Ch] +
jnz loc_43F8CB  +
push eax  +
call sub_43F904  +
pop ecx  +
mov eax [ebx+0Ch] +
test eax eax +
jz loc_43F8DE  +
cmp esi [eax+1Ch] +
jnz loc_43F8DE  +
push eax  +
call sub_43F904  +
pop ecx  +
mov ebx [esi+94h] +
test ebx ebx +
jz loc_43F8F8  +
mov eax [ebx] +
push eax  +
call sub_43F904  +
pop ecx  +
mov ebx [ebx+4] +
test ebx ebx +
jnz loc_43F8E8  +
mov esi [esi+5Ch] +
test esi esi +
jnz loc_43F8A0  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
mov eax [ebp+arg_0] +
mov ecx offset dword_4EC3B4 +
push edi  +
mov edi offset dword_4EC3BC +
xor eax eax +
xor edx edx +
mov dword_4EC3B8 eax +
mov [edi] edx +
xor ecx ecx +
xor eax eax +
mov dword_4EC3C0 ecx +
xor edx edx +
mov dword_4EC3C4 eax +
xor ecx ecx +
mov dword_4EC3C8 edx +
xor eax eax +
mov dword_4EC3CC ecx +
xor edx edx +
mov dword_4EC3D0 eax +
mov dword_4EC3D4 edx +
xor ecx ecx +
xor eax eax +
mov dword_4EC3D8 ecx +
xor edx edx +
mov dword_4EC3DC eax +
mov dword_4EC3E0 edx +
mov ecx dword_4CD130 +
test ecx ecx +
jz loc_43FB77  +
mov eax [ecx+0B4h] +
test eax eax +
jz loc_43FB0C  +
mov edx [eax+4] +
test edx edx +
jz loc_43FAFA  +
cmp ecx [edx+1Ch] +
jnz loc_43FAFA  +
inc dword_4EC3C0  +
mov edx [eax+0Ch] +
test edx edx +
jz loc_43FB0C  +
cmp ecx [edx+1Ch] +
jnz loc_43FB0C  +
inc dword_4EC3C0  +
xor eax eax +
mov ebx eax +
mov esi eax +
mov edx eax +
mov eax [ecx+98h] +
test eax eax +
jz loc_43FB27  +
inc edx  +
inc ebx  +
mov eax [eax+4] +
test eax eax +
jnz loc_43FB1E  +
mov eax [ecx+94h] +
test eax eax +
jz loc_43FB3C  +
inc dword ptr [edi]  +
inc edx  +
inc esi  +
mov eax [eax+4] +
test eax eax +
jnz loc_43FB31  +
cmp edx dword_4EC3E0 +
jle loc_43FB4A  +
mov dword_4EC3E0 edx +
cmp esi dword_4EC3D8 +
jle loc_43FB58  +
mov dword_4EC3D8 esi +
cmp ebx dword_4EC3DC +
jle loc_43FB66  +
mov dword_4EC3DC ebx +
inc dword_4EC3B8  +
mov ecx [ecx+5Ch] +
test ecx ecx +
jnz loc_43FADE  +
mov ecx dword_4CD144 +
test ecx ecx +
jz loc_43FC1E  +
mov eax [ecx+0B4h] +
test eax eax +
jz loc_43FBB3  +
mov edx [eax+4] +
test edx edx +
jz loc_43FBA1  +
cmp ecx [edx+1Ch] +
jnz loc_43FBA1  +
inc dword_4EC3C0  +
mov edx [eax+0Ch] +
test edx edx +
jz loc_43FBB3  +
cmp ecx [edx+1Ch] +
jnz loc_43FBB3  +
inc dword_4EC3C0  +
xor eax eax +
mov ebx eax +
mov esi eax +
mov edx eax +
mov eax [ecx+98h] +
test eax eax +
jz loc_43FBCE  +
inc edx  +
inc ebx  +
mov eax [eax+4] +
test eax eax +
jnz loc_43FBC5  +
mov eax [ecx+94h] +
test eax eax +
jz loc_43FBE3  +
inc dword ptr [edi]  +
inc edx  +
inc esi  +
mov eax [eax+4] +
test eax eax +
jnz loc_43FBD8  +
cmp edx dword_4EC3E0 +
jle loc_43FBF1  +
mov dword_4EC3E0 edx +
cmp esi dword_4EC3D8 +
jle loc_43FBFF  +
mov dword_4EC3D8 esi +
cmp ebx dword_4EC3DC +
jle loc_43FC0D  +
mov dword_4EC3DC ebx +
inc dword_4EC3C8  +
mov ecx [ecx+5Ch] +
test ecx ecx +
jnz loc_43FB85  +
mov ecx dword_4CD14C +
test ecx ecx +
jz loc_43FCC5  +
mov eax [ecx+0B4h] +
test eax eax +
jz loc_43FC5A  +
mov edx [eax+4] +
test edx edx +
jz loc_43FC48  +
cmp ecx [edx+1Ch] +
jnz loc_43FC48  +
inc dword_4EC3C0  +
mov edx [eax+0Ch] +
test edx edx +
jz loc_43FC5A  +
cmp ecx [edx+1Ch] +
jnz loc_43FC5A  +
inc dword_4EC3C0  +
xor eax eax +
mov ebx eax +
mov esi eax +
mov edx eax +
mov eax [ecx+98h] +
test eax eax +
jz loc_43FC75  +
inc edx  +
inc ebx  +
mov eax [eax+4] +
test eax eax +
jnz loc_43FC6C  +
mov eax [ecx+94h] +
test eax eax +
jz loc_43FC8A  +
inc dword ptr [edi]  +
inc edx  +
inc esi  +
mov eax [eax+4] +
test eax eax +
jnz loc_43FC7F  +
cmp edx dword_4EC3E0 +
jle loc_43FC98  +
mov dword_4EC3E0 edx +
cmp esi dword_4EC3D8 +
jle loc_43FCA6  +
mov dword_4EC3D8 esi +
cmp ebx dword_4EC3DC +
jle loc_43FCB4  +
mov dword_4EC3DC ebx +
inc dword_4EC3C4  +
mov ecx [ecx+5Ch] +
test ecx ecx +
jnz loc_43FC2C  +
mov ecx dword_4CD140 +
test ecx ecx +
jz loc_43FCDC  +
inc dword_4EC3D0  +
mov ecx [ecx+5Ch] +
test ecx ecx +
jnz loc_43FCCF  +
mov ecx dword_4CD138 +
test ecx ecx +
jz loc_43FCF3  +
inc dword_4EC3CC  +
mov ecx [ecx+5Ch] +
test ecx ecx +
jnz loc_43FCE6  +
mov eax dword_4CD168 +
test eax eax +
jz loc_43FD0F  +
cmp byte ptr [eax+43h] 0 +
jz loc_43FD08  +
inc dword_4EC3D4  +
mov eax [eax+50h] +
test eax eax +
jnz loc_43FCFC  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov eax [ebp+arg_0] +
cmp dword_4DD908 0 +
jg loc_43FD3F  +
cmp eax 1 +
jge loc_43FD2D  +
mov eax 1 +
mov dword_4DD908 eax +
push 0  +
call _time  +
pop ecx  +
mov dword_4EC404 eax +
pop ebp  +
retn   +
***
xor eax eax +
push ebx  +
push 0  +
call _time  +
pop ecx  +
mov ebx eax +
mov dword_4EC408 ebx +
mov ecx ebx +
sub ecx dword_4EC404 +
mov eax [ebp+arg_0] +
imul  dword_4DD908 +
mov ebx 64h +
cdq   +
idiv  ebx +
test eax eax +
jnz loc_43FD82  +
mov eax 1 +
cmp eax ecx +
jnb loc_43FD8E  +
mov eax 1 +
pop ebx  +
pop ebp  +
retn   +
xor eax eax +
pop ebx  +
pop ebp  +
retn   +
***
cmp dword_4D9F1C 0 +
jnz loc_43FDD0  +
push 4Bh  +
push offset a_Tree_c  +
push offset asc_4DD98B  +
push offset stream  +
call _fprintf  +
add esp 10h +
push offset asc_4DD9BA  +
push offset stream  +
call _fprintf  +
add esp 8 +
push 1  +
call _exit  +
pop ecx  +
fld  dbl_4DD950 +
fcomp  ds:flt_43FEE4 +
fnstsw  ax +
sahf   +
jnb loc_43FDEF  +
fld  dbl_4DD950 +
fchs   +
fstp  dbl_4DD950 +
fld  dbl_4DD950 +
fcomp  ds:flt_43FEE8 +
fnstsw  ax +
sahf   +
jbe loc_43FE22  +
fld  ds:flt_43FEEC +
fdiv  dbl_4DD950 +
call @_ftol$qv  +
mov dword_4EC414 eax +
mov dword_4EC410 0Ah +
jmp loc_43FE42  +
fld  dbl_4DD950 +
fmul  ds:flt_43FEEC +
call @_ftol$qv  +
mov dword_4EC410 eax +
mov dword_4EC414 0Ah +
cmp dword_4EC410 0 +
jz loc_43FE54  +
cmp dword_4EC414 0 +
jnz loc_43FE7A  +
xor edx edx +
mov dword ptr dbl_4DD950 edx +
mov dword ptr dbl_4DD950+4 3FE00000h +
mov dword_4EC410 1 +
mov dword_4EC414 2 +
push 54h  +
call sub_42A930  +
pop ecx  +
call sub_43FEF0  +
test eax eax +
jnz loc_43FE8E  +
xor eax eax +
retn   +
push 54h  +
call sub_42A930  +
pop ecx  +
call sub_44005C  +
call sub_440128  +
call sub_438B08  +
call sub_438A04  +
mov edx dword_4DC57C +
mov dword_4DD948 edx +
call sub_440540  +
call sub_4401B0  +
push 54h  +
call sub_42A930  +
pop ecx  +
call sub_440308  +
push 1  +
call sub_43C570  +
pop ecx  +
mov eax 14h +
xor ecx ecx +
mov dword_4EC364 ecx +
retn   +
***
push edi  +
mov eax dword_4CD130 +
test eax eax +
jz loc_43FF07  +
mov byte ptr [eax+66h] 1 +
mov eax [eax+5Ch] +
test eax eax +
jnz loc_43FEFC  +
mov eax dword_4CD144 +
test eax eax +
jz loc_43FF1B  +
mov byte ptr [eax+66h] 1 +
mov eax [eax+5Ch] +
test eax eax +
jnz loc_43FF10  +
mov eax dword_4CD14C +
test eax eax +
jz loc_43FF2F  +
mov byte ptr [eax+66h] 1 +
mov eax [eax+5Ch] +
test eax eax +
jnz loc_43FF24  +
xor esi esi +
jmp loc_43FF93  +
mov eax esi +
shl eax 3 +
sub eax esi +
mov edx dword_4D9F1C +
mov ebx [edx+eax*4+14h] +
test ebx ebx +
jz loc_43FF92  +
mov eax [ebx] +
movsx ecx byte ptr [eax+66h] +
mov edx [eax+0B4h] +
test edx edx +
jz loc_43FF74  +
mov edi [edx+4] +
test edi edi +
jz loc_43FF66  +
cmp eax [edi+1Ch] +
jnz loc_43FF66  +
xor ecx ecx +
mov edi [edx+0Ch] +
test edi edi +
jz loc_43FF74  +
cmp eax [edi+1Ch] +
jnz loc_43FF74  +
xor ecx ecx +
xor edx edx +
test ecx ecx +
jz loc_43FF83  +
push eax  +
call sub_43FFA8  +
pop ecx  +
mov edx eax +
test edx edx +
jz loc_43FF8B  +
xor eax eax +
jmp loc_43FFA3  +
mov ebx [ebx+4] +
test ebx ebx +
jnz loc_43FF48  +
inc esi  +
mov ecx dword_4D9F20 +
inc ecx  +
cmp esi ecx +
jle loc_43FF33  +
mov eax 1 +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push ebx  +
push edi  +
push edi  +
xor eax eax +
mov dword_4EC360 eax +
xor esi esi +
jmp loc_4401A1  +
mov eax esi +
mov edx dword_4D9F1C +
shl eax 3 +
xor ecx ecx +
sub eax esi +
xor edi edi +
mov ebx [edx+eax*4+14h] +
mov [edx+eax*4+10h] ecx +
test ebx ebx +
jz loc_440182  +
inc edi  +
call sub_404A1C  +
mov edx esi +
shl edx 3 +
sub edx esi +
mov ecx dword_4D9F1C +
mov ecx [ecx+edx*4+10h] +
mov [eax+4] ecx +
mov ecx dword_4D9F1C +
mov [ecx+edx*4+10h] eax +
mov edx [ebx] +
mov [eax] edx +
mov ebx [ebx+4] +
test ebx ebx +
jnz loc_440153  +
mov eax esi +
shl eax 3 +
sub eax esi +
mov edx dword_4D9F1C +
mov [edx+eax*4] edi +
cmp edi dword_4EC360 +
jle loc_4401A0  +
mov dword_4EC360 edi +
inc esi  +
mov eax dword_4D9F20 +
inc eax  +
cmp esi eax +
jle loc_440136  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
push ebx  +
mov edx [ebp+arg_4] +
mov eax [ebp+arg_0] +
mov ecx [eax] +
mov ebx [edx] +
mov ebx [ebx+54h] +
mov ecx [ecx+54h] +
cmp ebx ecx +
jge loc_4402F8  +
mov eax 1 +
pop ebx  +
pop ebp  +
retn   +
cmp ebx ecx +
jle loc_440302  +
or eax 0FFFFFFFFh +
pop ebx  +
pop ebp  +
retn   +
xor eax eax +
pop ebx  +
pop ebp  +
retn   +
***
push ecx  +
push edi  +
xor eax eax +
mov dword_4EC418 eax +
cmp dword_4EBD88 5 +
jge loc_44055D  +
mov dword_4EBD88 5 +
cmp dword_4EBD84 5 +
jge loc_440570  +
mov dword_4EBD84 5 +
cmp dword_4EBDB4 0 +
jnz loc_4405AA  +
cmp dword_4D4B7C 0 +
jz loc_440599  +
mov eax dword_4EBD84 +
shl eax 2 +
mov ecx 5 +
cdq   +
idiv  ecx +
mov dword_4EBDB4 eax +
jmp loc_4405AA  +
mov eax dword_4EBD84 +
sar eax 1 +
jns loc_4405A5  +
adc eax 0 +
mov dword_4EBDB4 eax +
cmp dword_4D4B80 1 +
jge loc_4405BD  +
mov dword_4D4B80 1 +
cmp dword_4D4B80 64h +
jle loc_4405D0  +
mov dword_4D4B80 64h +
mov eax dword_4EBD80 +
mov ecx dword_4EBDBC +
add eax ecx +
dec eax  +
cdq   +
idiv  ecx +
imul  ecx +
mov ecx eax +
xor edi edi +
jmp loc_4406A9  +
mov edx edi +
shl edx 3 +
sub edx edi +
mov eax dword_4D9F1C +
mov ebx dword_4EBD7C +
mov [eax+edx*4+4] ebx +
xor eax eax +
mov ebx dword_4D9F1C +
mov ebx [ebx+edx*4+14h] +
test ebx ebx +
jz loc_440627  +
mov edx [ebx] +
mov [edx+58h] ecx +
mov esi [edx+1Ch] +
cmp eax esi +
jge loc_440620  +
mov eax esi +
mov ebx [ebx+4] +
test ebx ebx +
jnz loc_440612  +
cmp dword_4EBDA8 1 +
jnz loc_44065F  +
mov edx edi +
shl edx 3 +
sub edx edi +
mov ebx dword_4D9F1C +
mov ebx [ebx+edx*4+14h] +
test ebx ebx +
jz loc_44068E  +
mov edx [ebx] +
mov esi eax +
sub esi [edx+1Ch] +
sar esi 1 +
jns loc_440653  +
adc esi 0 +
add [edx+58h] esi +
mov ebx [ebx+4] +
test ebx ebx +
jnz loc_440645  +
jmp loc_44068E  +
cmp dword_4EBDA8 2 +
jnz loc_44068E  +
mov edx edi +
shl edx 3 +
sub edx edi +
mov ebx dword_4D9F1C +
mov ebx [ebx+edx*4+14h] +
test ebx ebx +
jz loc_44068E  +
mov edx [ebx] +
mov esi eax +
sub esi [edx+1Ch] +
add [edx+58h] esi +
mov ebx [ebx+4] +
test ebx ebx +
jnz loc_44067D  +
add eax dword_4EBD88 +
mov ebx dword_4EBDBC +
add ecx eax +
mov eax ebx +
add eax ecx +
dec eax  +
cdq   +
idiv  ebx +
imul  ebx +
mov ecx eax +
inc edi  +
mov eax dword_4D9F20 +
inc eax  +
cmp edi eax +
jle loc_4405EC  +
mov esi dword_4CD130 +
test esi esi +
jz loc_4406CC  +
mov byte ptr [esi+66h] 1 +
mov esi [esi+5Ch] +
test esi esi +
jnz loc_4406C1  +
mov esi dword_4CD144 +
test esi esi +
jz loc_4406E1  +
mov byte ptr [esi+66h] 1 +
mov esi [esi+5Ch] +
test esi esi +
jnz loc_4406D6  +
mov esi dword_4CD14C +
test esi esi +
jz loc_4406F6  +
mov byte ptr [esi+66h] 1 +
mov esi [esi+5Ch] +
test esi esi +
jnz loc_4406EB  +
xor eax eax +
xor edi edi +
mov dword_4EC40C eax +
jmp loc_440770  +
mov eax edi +
shl eax 3 +
sub eax edi +
mov edx dword_4D9F1C +
mov ebx [edx+eax*4+14h] +
test ebx ebx +
jz loc_44076F  +
mov esi [ebx] +
movsx edx byte ptr [esi+66h] +
mov eax [esi+0B4h] +
test eax eax +
jz loc_440742  +
mov ecx [eax+4] +
test ecx ecx +
jz loc_440734  +
cmp esi [ecx+1Ch] +
jnz loc_440734  +
xor edx edx +
mov ecx [eax+0Ch] +
test ecx ecx +
jz loc_440742  +
cmp esi [ecx+1Ch] +
jnz loc_440742  +
xor edx edx +
test edx edx +
jz loc_440768  +
push 54h  +
call sub_42A930  +
pop ecx  +
mov eax [esi+18h] +
sar eax 1 +
jns loc_440758  +
adc eax 0 +
add eax dword_4EBD7C +
push eax  +
push esi  +
call sub_440780  +
add esp 8 +
mov ebx [ebx+4] +
test ebx ebx +
jnz loc_440716  +
inc edi  +
mov ecx dword_4D9F20 +
inc ecx  +
cmp edi ecx +
jle loc_440701  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
add esp 0FFFFFFE0h +
push ebx  +
push esi  +
push edi  +
cmp [ebp+arg_4] 0 +
mov esi [ebp+arg_0] +
jge loc_440797  +
xor eax eax +
mov [ebp+arg_4] eax +
test esi esi +
jnz loc_4407A3  +
mov eax [ebp+arg_4] +
jmp loc_44100A  +
mov edx [ebp+arg_4] +
mov [ebp+var_4] edx +
mov byte ptr [esi+66h] 0 +
cmp dword ptr [esi+3Ch] 0FFFFFFFFh +
jz loc_44083F  +
cmp dword_4EC418 0 +
jnz loc_44083F  +
mov dword_4EC418 1 +
cmp dword_4D4B04 0 +
jnz loc_44083F  +
push offset aNoteOnTreeLayo  +
push offset stream  +
call _fprintf  +
add esp 8 +
push offset aTheAttributeHo  +
push offset stream  +
call _fprintf  +
add esp 8 +
push offset aSortsOnlyTheCh  +
push offset stream  +
call _fprintf  +
add esp 8 +
push offset aOfANodeLocally  +
push offset stream  +
call _fprintf  +
add esp 8 +
push offset aButNotTheWhole  +
push offset stream  +
call _fprintf  +
add esp 8 +
push offset asc_4DDC64  +
push offset stream  +
call _fprintf  +
add esp 8 +
mov ecx [esi+6Ch] +
mov [ebp+var_C] ecx +
xor eax eax +
mov [ebp+var_20] eax +
mov [ebp+var_1C] eax +
mov eax [esi+0B4h] +
test eax eax +
jz loc_44087B  +
mov edx [eax+4] +
test edx edx +
jz loc_440869  +
cmp esi [edx+1Ch] +
jz loc_440869  +
mov ecx [edx+1Ch] +
mov [ebp+var_1C] ecx +
mov edx [eax+0Ch] +
test edx edx +
jz loc_44087B  +
cmp esi [edx+1Ch] +
jz loc_44087B  +
mov eax [edx+1Ch] +
mov [ebp+var_20] eax +
cmp [ebp+var_1C] 0 +
jz loc_440A4C  +
cmp [ebp+var_20] 0 +
jz loc_440A4C  +
mov ecx [ebp+var_1C] +
cmp dword ptr [ecx+3Ch] 0FFFFFFFFh +
jnz loc_44090F  +
mov eax [ebp+var_20] +
mov edx [eax+3Ch] +
cmp edx [esi+3Ch] +
jge loc_4408D9  +
mov ecx [esi+18h] +
sar ecx 1 +
jns loc_4408AD  +
adc ecx 0 +
mov edx [ebp+var_20] +
mov eax [ebp+var_4] +
sub eax ecx +
mov ecx [edx+18h] +
sar ecx 1 +
jns loc_4408BF  +
adc ecx 0 +
sub eax ecx +
sub eax dword_4EBD84 +
push eax  +
mov eax [ebp+var_20] +
push eax  +
call sub_440780  +
add esp 8 +
jmp loc_440AE4  +
mov edx [esi+18h] +
sar edx 1 +
jns loc_4408E3  +
adc edx 0 +
mov eax [ebp+var_1C] +
mov ecx [ebp+var_4] +
sub ecx edx +
mov edx [eax+18h] +
sar edx 1 +
jns loc_4408F5  +
adc edx 0 +
sub ecx edx +
sub ecx dword_4EBD84 +
push ecx  +
mov ecx [ebp+var_1C] +
push ecx  +
call sub_440780  +
add esp 8 +
jmp loc_440AE4  +
mov eax [esi+3Ch] +
mov edx [ebp+var_1C] +
cmp eax [edx+3Ch] +
jnz loc_440991  +
mov ecx [esi+3Ch] +
mov eax [ebp+var_20] +
cmp ecx [eax+3Ch] +
jle loc_44095B  +
mov edx [esi+18h] +
sar edx 1 +
jns loc_44092F  +
adc edx 0 +
mov eax [ebp+var_20] +
mov ecx [ebp+var_4] +
sub ecx edx +
mov edx [eax+18h] +
sar edx 1 +
jns loc_440941  +
adc edx 0 +
sub ecx edx +
sub ecx dword_4EBD84 +
push ecx  +
mov ecx [ebp+var_20] +
push ecx  +
call sub_440780  +
add esp 8 +
jmp loc_440AE4  +
mov eax [esi+18h] +
sar eax 1 +
jns loc_440965  +
adc eax 0 +
mov ecx [ebp+var_1C] +
mov edx [ebp+var_4] +
sub edx eax +
mov eax [ecx+18h] +
sar eax 1 +
jns loc_440977  +
adc eax 0 +
sub edx eax +
sub edx dword_4EBD84 +
push edx  +
mov edx [ebp+var_1C] +
push edx  +
call sub_440780  +
add esp 8 +
jmp loc_440AE4  +
mov ecx [ebp+var_1C] +
mov eax [ecx+3Ch] +
cmp eax [esi+3Ch] +
jge loc_4409D2  +
mov edx [esi+18h] +
sar edx 1 +
jns loc_4409A6  +
adc edx 0 +
mov eax [ebp+var_1C] +
mov ecx [ebp+var_4] +
sub ecx edx +
mov edx [eax+18h] +
sar edx 1 +
jns loc_4409B8  +
adc edx 0 +
sub ecx edx +
sub ecx dword_4EBD84 +
push ecx  +
mov ecx [ebp+var_1C] +
push ecx  +
call sub_440780  +
add esp 8 +
jmp loc_440AE4  +
mov eax [ebp+var_20] +
mov ecx [ebp+var_1C] +
mov edx [eax+3Ch] +
cmp edx [ecx+3Ch] +
jge loc_440A16  +
mov eax [esi+18h] +
sar eax 1 +
jns loc_4409EA  +
adc eax 0 +
mov ecx [ebp+var_20] +
mov edx [ebp+var_4] +
sub edx eax +
mov eax [ecx+18h] +
sar eax 1 +
jns loc_4409FC  +
adc eax 0 +
sub edx eax +
sub edx dword_4EBD84 +
push edx  +
mov edx [ebp+var_20] +
push edx  +
call sub_440780  +
add esp 8 +
jmp loc_440AE4  +
mov ecx [esi+18h] +
sar ecx 1 +
jns loc_440A20  +
adc ecx 0 +
mov edx [ebp+var_1C] +
mov eax [ebp+var_4] +
sub eax ecx +
mov ecx [edx+18h] +
sar ecx 1 +
jns loc_440A32  +
adc ecx 0 +
sub eax ecx +
sub eax dword_4EBD84 +
push eax  +
mov eax [ebp+var_1C] +
push eax  +
call sub_440780  +
add esp 8 +
jmp loc_440AE4  +
cmp [ebp+var_1C] 0 +
jz loc_440A99  +
mov edx [ebp+var_1C] +
mov eax [edx+3Ch] +
cmp eax 0FFFFFFFFh +
jz loc_440AE4  +
cmp eax [esi+3Ch] +
jge loc_440AE4  +
mov edx [esi+18h] +
sar edx 1 +
jns loc_440A70  +
adc edx 0 +
mov eax [ebp+var_1C] +
mov ecx [ebp+var_4] +
sub ecx edx +
mov edx [eax+18h] +
sar edx 1 +
jns loc_440A82  +
adc edx 0 +
sub ecx edx +
sub ecx dword_4EBD84 +
push ecx  +
mov ecx [ebp+var_1C] +
push ecx  +
call sub_440780  +
add esp 8 +
jmp loc_440AE4  +
cmp [ebp+var_20] 0 +
jz loc_440AE4  +
mov eax [ebp+var_20] +
cmp dword ptr [eax+3Ch] 0FFFFFFFFh +
jz loc_440AE4  +
mov edx [ebp+var_20] +
mov ecx [edx+3Ch] +
cmp ecx [esi+3Ch] +
jge loc_440AE4  +
mov eax [esi+18h] +
sar eax 1 +
jns loc_440ABD  +
adc eax 0 +
mov ecx [ebp+var_20] +
mov edx [ebp+var_4] +
sub edx eax +
mov eax [ecx+18h] +
sar eax 1 +
jns loc_440ACF  +
adc eax 0 +
sub edx eax +
sub edx dword_4EBD84 +
push edx  +
mov edx [ebp+var_20] +
push edx  +
call sub_440780  +
add esp 8 +
mov ecx [ebp+arg_4] +
mov [ebp+var_4] ecx +
mov eax [ebp+var_C] +
mov ecx eax +
shl eax 3 +
sub eax ecx +
mov ecx dword_4D9F1C +
mov eax [ecx+eax*4+4] +
mov edx [esi+18h] +
sar edx 1 +
jns loc_440B08  +
adc edx 0 +
mov ecx [ebp+var_4] +
sub ecx edx +
cmp eax ecx +
jle loc_440B26  +
mov ecx [ebp+var_C] +
mov ebx ecx +
shl ecx 3 +
sub ecx ebx +
add eax edx +
mov [ebp+var_4] eax +
mov ebx dword_4D9F1C +
mov eax [esi+88h] +
sub eax 1 +
jb loc_440EF1  +
jz loc_440B39  +
jmp loc_440B99  +
mov ebx [esi+98h] +
test ebx ebx +
jnz loc_440B79  +
push 149h  +
push offset a_Tree_c_5  +
push offset asc_4DDC66  +
push offset stream  +
call _fprintf  +
add esp 10h +
push offset asc_4DDC95  +
push offset stream  +
call _fprintf  +
add esp 8 +
push 1  +
call _exit  +
pop ecx  +
mov eax [ebp+var_4] +
push eax  +
mov edx [ebx] +
mov ecx [edx+1Ch] +
push ecx  +
call sub_440780  +
add esp 8 +
mov [ebp+var_8] eax +
mov eax [ebp+var_8] +
mov [ebp+var_4] eax +
jmp loc_440EF1  +
mov ebx [esi+98h] +
xor eax eax +
mov [ebp+var_14] eax +
mov edx 7FFFFFFFh +
test ebx ebx +
jz loc_440BC5  +
mov ecx [ebx] +
mov eax [ecx+1Ch] +
mov ecx [eax+3Ch] +
cmp edx ecx +
jle loc_440BBE  +
mov edx ecx +
mov [ebp+var_14] eax +
mov ebx [ebx+4] +
test ebx ebx +
jnz loc_440BAD  +
mov ebx [esi+98h] +
xor edi edi +
mov edx 80000000h +
test ebx ebx +
jz loc_440BF1  +
mov eax [ebx] +
mov eax [eax+1Ch] +
cmp eax [ebp+var_14] +
jz loc_440BEA  +
cmp edx [eax+3Ch] +
jge loc_440BEA  +
mov edx [eax+3Ch] +
mov edi eax +
mov ebx [ebx+4] +
test ebx ebx +
jnz loc_440BD6  +
cmp [ebp+var_14] 0 +
jz loc_440C00  +
test edi edi +
jz loc_440C00  +
cmp edi [ebp+var_14] +
jnz loc_440C36  +
push 155h  +
push offset a_Tree_c_6  +
push offset asc_4DDCCA  +
push offset stream  +
call _fprintf  +
add esp 10h +
push offset asc_4DDCF9  +
push offset stream  +
call _fprintf  +
add esp 8 +
push 1  +
call _exit  +
pop ecx  +
mov ebx [esi+98h] +
xor ecx ecx +
test ebx ebx +
jz loc_440C51  +
mov eax [ebx] +
mov edx [eax+1Ch] +
add ecx [edx+18h] +
mov ebx [ebx+4] +
test ebx ebx +
jnz loc_440C42  +
mov eax [esi+88h] +
dec eax  +
imul  dword_4EBD84 +
add ecx eax +
mov edx [ebp+var_14] +
mov eax [edx+18h] +
sar eax 1 +
jns loc_440C6D  +
adc eax 0 +
sub ecx eax +
mov edx [edi+18h] +
sar edx 1 +
jns loc_440C79  +
adc edx 0 +
sub ecx edx +
mov eax ecx +
mov ecx [ebp+var_4] +
imul  dword_4EC410 +
cdq   +
idiv  dword_4EC414 +
sub ecx eax +
push ecx  +
mov eax [ebp+var_14] +
push eax  +
call sub_440780  +
add esp 8 +
mov [ebp+var_8] eax +
mov ebx [esi+98h] +
xor eax eax +
mov [ebp+var_18] eax +
mov edx 7FFFFFFFh +
test ebx ebx +
jz loc_440CD4  +
mov ecx [ebx] +
mov eax [ecx+1Ch] +
cmp edi eax +
jz loc_440CCD  +
cmp byte ptr [eax+66h] 0 +
jz loc_440CCD  +
cmp edx [eax+3Ch] +
jle loc_440CCD  +
mov edx [eax+3Ch] +
mov [ebp+var_18] eax +
mov ebx [ebx+4] +
test ebx ebx +
jnz loc_440CB3  +
mov [ebp+var_10] 2 +
cmp [ebp+var_18] 0 +
jz loc_440DE7  +
mov ecx [ebp+var_C] +
cmp ecx dword_4DD94C +
jle loc_440D1E  +
mov eax [ebp+var_10] +
mov edx [ebp+var_4] +
sub edx [ebp+var_8] +
add eax eax +
add eax 0FFFFFFFEh +
mov ecx [esi+88h] +
imul  edx +
cdq   +
dec ecx  +
idiv  ecx +
add eax [ebp+var_8] +
push eax  +
mov eax [ebp+var_18] +
push eax  +
call sub_440780  +
add esp 8 +
mov ecx eax +
jmp loc_440D6D  +
mov ecx [esi+88h] +
mov eax ecx +
inc eax  +
sar eax 1 +
jns loc_440D2E  +
adc eax 0 +
cmp eax [ebp+var_10] +
jl loc_440D5B  +
mov eax [ebp+var_10] +
mov edx [ebp+var_4] +
sub edx [ebp+var_8] +
add eax eax +
add eax 0FFFFFFFEh +
dec ecx  +
imul  edx +
cdq   +
idiv  ecx +
add eax [ebp+var_8] +
push eax  +
mov eax [ebp+var_18] +
push eax  +
call sub_440780  +
add esp 8 +
mov ecx eax +
jmp loc_440D6D  +
mov ecx [ebp+var_4] +
push ecx  +
mov eax [ebp+var_18] +
push eax  +
call sub_440780  +
add esp 8 +
mov ecx eax +
mov edx [ebp+var_C] +
cmp edx dword_4DD94C +
jle loc_440DA5  +
mov eax [esi+88h] +
dec eax  +
sub ecx [ebp+var_8] +
imul  ecx +
mov edx [ebp+var_10] +
add edx edx +
add edx 0FFFFFFFEh +
mov ecx edx +
cdq   +
idiv  ecx +
add eax [ebp+var_8] +
mov [ebp+var_4] eax +
mov eax [ebp+var_4] +
cmp eax [ebp+arg_4] +
jge loc_440DA5  +
mov eax [ebp+arg_4] +
mov [ebp+var_4] eax +
inc [ebp+var_10]  +
mov ebx [esi+98h] +
xor eax eax +
mov [ebp+var_18] eax +
mov edx 7FFFFFFFh +
test ebx ebx +
jz loc_440DDD  +
mov ecx [ebx] +
mov eax [ecx+1Ch] +
cmp edi eax +
jz loc_440DD6  +
cmp byte ptr [eax+66h] 0 +
jz loc_440DD6  +
cmp edx [eax+3Ch] +
jle loc_440DD6  +
mov edx [eax+3Ch] +
mov [ebp+var_18] eax +
mov ebx [ebx+4] +
test ebx ebx +
jnz loc_440DBC  +
cmp [ebp+var_18] 0 +
jnz loc_440CE5  +
mov ecx [ebp+var_C] +
cmp ecx dword_4DD94C +
jle loc_440E1D  +
mov eax [ebp+var_10] +
mov edx [ebp+var_4] +
sub edx [ebp+var_8] +
add eax eax +
add eax 0FFFFFFFEh +
mov ecx [esi+88h] +
imul  edx +
cdq   +
dec ecx  +
idiv  ecx +
add eax [ebp+var_8] +
push eax  +
push edi  +
call sub_440780  +
add esp 8 +
mov ecx eax +
jmp loc_440E6A  +
mov eax [esi+88h] +
inc eax  +
sar eax 1 +
jns loc_440E2B  +
adc eax 0 +
cmp eax [ebp+var_10] +
jl loc_440E5B  +
mov eax [ebp+var_10] +
mov edx [ebp+var_4] +
sub edx [ebp+var_8] +
add eax eax +
add eax 0FFFFFFFEh +
mov ecx [esi+88h] +
imul  edx +
cdq   +
dec ecx  +
idiv  ecx +
add eax [ebp+var_8] +
push eax  +
push edi  +
call sub_440780  +
add esp 8 +
mov ecx eax +
jmp loc_440E6A  +
mov eax [ebp+var_4] +
push eax  +
push edi  +
call sub_440780  +
add esp 8 +
mov ecx eax +
mov eax [ebp+var_C] +
cmp eax dword_4DD94C +
jle loc_440E9C  +
mov edx ecx +
mov eax [esi+88h] +
sub edx [ebp+var_8] +
dec eax  +
imul  edx +
mov edx [ebp+var_10] +
add edx edx +
add edx 0FFFFFFFEh +
mov ebx edx +
cdq   +
idiv  ebx +
add eax [ebp+var_8] +
mov [ebp+var_4] eax +
mov eax [ebp+var_4] +
cmp eax [ebp+arg_4] +
add ecx [ebp+var_8] +
sar ecx 1 +
jns loc_440EA6  +
adc ecx 0 +
mov [ebp+var_4] ecx +
mov edx [ebp+var_C] +
mov ecx edx +
shl edx 3 +
sub edx ecx +
mov eax dword_4D9F1C +
mov edx [eax+edx*4+4] +
mov ecx [esi+18h] +
sar ecx 1 +
jns loc_440EC6  +
adc ecx 0 +
mov eax [ebp+var_4] +
sub eax ecx +
cmp edx eax +
jle loc_440EF1  +
mov edx [ebp+var_C] +
mov ecx edx +
shl edx 3 +
sub edx ecx +
mov eax dword_4D9F1C +
mov edx [eax+edx*4+4] +
mov ecx [esi+18h] +
sar ecx 1 +
jns loc_440EEC  +
adc ecx 0 +
add edx ecx +
mov [ebp+var_4] edx +
mov eax [esi+18h] +
sar eax 1 +
jns loc_440EFB  +
adc eax 0 +
mov edx [ebp+var_4] +
sub edx eax +
mov [esi+54h] edx +
mov ebx [esi+18h] +
test ebx ebx +
jnz loc_440F33  +
cmp dword ptr [esi+1Ch] 0 +
jnz loc_440F33  +
mov eax [esi+54h] +
mov edi ebx +
sar edi 1 +
jns loc_440F1C  +
adc edi 0 +
add eax edi +
mov ecx dword_4EBDC0 +
add eax ecx +
dec eax  +
cdq   +
idiv  ecx +
imul  ecx +
sub eax edi +
mov [esi+54h] eax +
jmp loc_440F55  +
mov eax [esi+54h] +
mov ebx [esi+18h] +
sar ebx 1 +
jns loc_440F40  +
adc ebx 0 +
add eax ebx +
mov ecx dword_4EBDB8 +
add eax ecx +
dec eax  +
cdq   +
idiv  ecx +
imul  ecx +
sub eax ebx +
mov [esi+54h] eax +
mov edx [ebp+var_C] +
mov eax [esi+54h] +
mov ecx edx +
xor ebx ebx +
shl edx 3 +
add eax [esi+18h] +
sub edx ecx +
mov ecx dword_4D9F1C +
add eax dword_4EBD84 +
mov [ecx+edx*4+4] eax +
cmp [ebp+var_1C] 0 +
jz loc_440F89  +
mov eax [ebp+var_1C] +
cmp byte ptr [eax+66h] 0 +
jnz loc_440F89  +
mov ebx [ebp+var_1C] +
cmp [ebp+var_20] 0 +
jz loc_440F9B  +
mov eax [ebp+var_20] +
cmp byte ptr [eax+66h] 0 +
jnz loc_440F9B  +
mov ebx [ebp+var_20] +
cmp [ebp+var_1C] 0 +
jz loc_440FCA  +
mov eax [ebp+var_1C] +
cmp byte ptr [eax+66h] 0 +
jz loc_440FCA  +
mov edx [ebp+var_C] +
mov ecx edx +
shl edx 3 +
sub edx ecx +
mov eax dword_4D9F1C +
mov edx [eax+edx*4+4] +
push edx  +
mov ecx [ebp+var_1C] +
push ecx  +
call sub_440780  +
add esp 8 +
cmp [ebp+var_20] 0 +
jz loc_440FF9  +
mov eax [ebp+var_20] +
cmp byte ptr [eax+66h] 0 +
jz loc_440FF9  +
mov edx [ebp+var_C] +
mov ecx edx +
shl edx 3 +
sub edx ecx +
mov eax dword_4D9F1C +
mov edx [eax+edx*4+4] +
push edx  +
mov ecx [ebp+var_20] +
push ecx  +
call sub_440780  +
add esp 8 +
test ebx ebx +
jz loc_441007  +
push esi  +
push ebx  +
call sub_441014  +
add esp 8 +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
push ebx  +
push esi  +
push edi  +
mov esi [ebp+arg_4] +
mov ebx [ebp+arg_0] +
push 54h  +
call sub_42A930  +
pop ecx  +
mov eax [esi+54h] +
cmp eax [ebx+54h] +
jg loc_441066  +
push 191h  +
push offset a_Tree_c_7  +
push offset asc_4DDD2E  +
push offset stream  +
call _fprintf  +
add esp 10h +
push offset asc_4DDD5D  +
push offset stream  +
call _fprintf  +
add esp 8 +
push 1  +
call _exit  +
pop ecx  +
xor eax eax +
jmp loc_441080  +
mov edx eax +
mov ecx dword_4D9F1C +
shl edx 3 +
sub edx eax +
inc eax  +
mov dword ptr [ecx+edx*4+8] 7FFFFFFFh +
mov edx dword_4D9F20 +
inc edx  +
cmp eax edx +
jle loc_44106A  +
push ebx  +
push esi  +
call sub_4410CC  +
add esp 8 +
push eax  +
push ebx  +
call sub_441190  +
add esp 8 +
mov ecx eax +
mov esi ecx +
sub esi dword_4EBD84 +
test esi esi +
jle loc_4410C4  +
mov eax esi +
mov edi dword_4EBDB8 +
cdq   +
idiv  edi +
imul  edi +
push eax  +
push ebx  +
call sub_441240  +
add esp 8 +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
cmp edi [ebp+arg_4] +
jnz loc_4410E1  +
xor eax eax +
jmp loc_441188  +
mov eax [edi+6Ch] +
mov esi eax +
mov ecx eax +
shl ecx 3 +
sub ecx eax +
mov ebx dword_4D9F1C +
mov ecx [ebx+ecx*4+8] +
mov edx [edi+54h] +
cmp ecx edx +
jle loc_44110F  +
mov ecx eax +
shl eax 3 +
sub eax ecx +
mov ecx dword_4D9F1C +
mov [ecx+eax*4+8] edx +
mov ebx [edi+98h] +
test ebx ebx +
jz loc_441138  +
mov eax [ebp+arg_4] +
push eax  +
mov edx [ebx] +
mov ecx [edx+1Ch] +
push ecx  +
call sub_4410CC  +
add esp 8 +
cmp esi eax +
jge loc_441131  +
mov esi eax +
mov ebx [ebx+4] +
test ebx ebx +
jnz loc_441119  +
mov ebx [edi+0B4h] +
test ebx ebx +
jz loc_441186  +
mov eax [ebx+4] +
test eax eax +
jz loc_441164  +
cmp edi [eax+1Ch] +
jz loc_441164  +
mov edx [ebp+arg_4] +
push edx  +
mov ecx [eax+1Ch] +
push ecx  +
call sub_4410CC  +
add esp 8 +
cmp esi eax +
jge loc_441164  +
mov esi eax +
mov eax [ebx+0Ch] +
test eax eax +
jz loc_441186  +
cmp edi [eax+1Ch] +
jz loc_441186  +
mov edx [ebp+arg_4] +
push edx  +
mov ecx [eax+1Ch] +
push ecx  +
call sub_4410CC  +
add esp 8 +
cmp esi eax +
jge loc_441186  +
mov esi eax +
mov eax esi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov eax [edi+6Ch] +
cmp eax [ebp+arg_4] +
jle loc_4411A8  +
xor eax eax +
jmp loc_441238  +
mov edx eax +
shl edx 3 +
sub edx eax +
mov ecx dword_4D9F1C +
mov esi [ecx+edx*4+8] +
sub esi [edi+54h] +
sub esi [edi+18h] +
mov ebx [edi+98h] +
test ebx ebx +
jz loc_4411E8  +
mov eax [ebp+arg_4] +
push eax  +
mov edx [ebx] +
mov ecx [edx+1Ch] +
push ecx  +
call sub_441190  +
add esp 8 +
cmp esi eax +
jle loc_4411E1  +
mov esi eax +
mov ebx [ebx+4] +
test ebx ebx +
jnz loc_4411C9  +
mov ebx [edi+0B4h] +
test ebx ebx +
jz loc_441236  +
mov eax [ebx+4] +
test eax eax +
jz loc_441214  +
cmp edi [eax+1Ch] +
jz loc_441214  +
mov edx [ebp+arg_4] +
push edx  +
mov ecx [eax+1Ch] +
push ecx  +
call sub_441190  +
add esp 8 +
cmp esi eax +
jle loc_441214  +
mov esi eax +
mov eax [ebx+0Ch] +
test eax eax +
jz loc_441236  +
cmp edi [eax+1Ch] +
jz loc_441236  +
mov edx [ebp+arg_4] +
push edx  +
mov ecx [eax+1Ch] +
push ecx  +
call sub_441190  +
add esp 8 +
cmp esi eax +
jle loc_441236  +
mov esi eax +
mov eax esi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
push ebx  +
push esi  +
push edi  +
mov esi [ebp+arg_4] +
mov edi [ebp+arg_0] +
add [edi+54h] esi +
mov ebx [edi+98h] +
test ebx ebx +
jz loc_44126F  +
push esi  +
mov eax [ebx] +
mov edx [eax+1Ch] +
push edx  +
call sub_441240  +
add esp 8 +
mov ebx [ebx+4] +
test ebx ebx +
jnz loc_441259  +
mov ebx [edi+0B4h] +
test ebx ebx +
jz loc_4412AB  +
mov eax [ebx+4] +
test eax eax +
jz loc_441292  +
cmp edi [eax+1Ch] +
jz loc_441292  +
push esi  +
mov edx [eax+1Ch] +
push edx  +
call sub_441240  +
add esp 8 +
mov eax [ebx+0Ch] +
test eax eax +
jz loc_4412AB  +
cmp edi [eax+1Ch] +
jz loc_4412AB  +
push esi  +
mov edx [eax+1Ch] +
push edx  +
call sub_441240  +
add esp 8 +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
retn   +
***
retn   +
***
retn   +
***
push ebx  +
mov eax [ebp+arg_0] +
mov edx [ebp+arg_4] +
mov ecx [ebp+arg_8] +
jmp loc_4412D5  +
mov bl [eax] +
inc eax  +
mov [edx] bl +
inc edx  +
mov ebx ecx +
add ecx 0FFFFFFFFh +
test ebx ebx +
jg loc_4412CF  +
pop ebx  +
pop ebp  +
retn   +
***
add esp 0FFFFF004h +
push eax  +
add esp 0FFFFF530h +
push ebx  +
push esi  +
push edi  +
lea eax [ebp+var_1D0] +
mov [ebp+var_14] eax +
lea edx [ebp+var_810] +
mov [ebp+var_18] edx +
lea ecx [ebp+var_1AD0] +
mov [ebp+var_1C] ecx +
mov [ebp+var_20] 0C8h +
cmp dword_4EC84C 0 +
jz loc_441334  +
push offset aStartingParse  +
push offset stream  +
call _fprintf  +
add esp 8 +
xor eax eax +
xor edx edx +
mov [ebp+var_4] eax +
mov [ebp+var_C] edx +
mov edi [ebp+var_14] +
xor ecx ecx +
mov eax [ebp+var_18] +
mov dword_4EC848 ecx +
mov [ebp+var_8] eax +
mov dword_4EC824 0FFFFFFFEh +
mov esi [ebp+var_1C] +
add edi 0FFFFFFFEh +
add edi 2 +
mov ax word ptr [ebp+var_4] +
mov [edi] ax +
mov edx [ebp+var_20] +
add edx edx +
add edx [ebp+var_14] +
add edx 0FFFFFFFEh +
cmp edi edx +
jb loc_441530  +
mov ecx [ebp+var_18] +
mov [ebp+var_30] ecx +
mov eax [ebp+var_14] +
mov [ebp+var_34] eax +
mov edx [ebp+var_1C] +
mov [ebp+var_38] edx +
mov ebx edi +
sub ebx [ebp+var_14] +
sar ebx 1 +
jns loc_44139A  +
adc ebx 0 +
inc ebx  +
cmp [ebp+var_20] 2710h +
jl loc_44143C  +
push offset aParserStackOve  +
mov eax s +
push eax  +
call _strlen  +
pop ecx  +
cmp eax 30h +
jnb loc_4413C6  +
mov edx s +
jmp loc_4413CB  +
mov edx offset a?_1 +
push edx  +
cmp dword_4EC824 0 +
jge loc_4413DC  +
mov eax offset a? +
jmp loc_441404  +
cmp dword_4EC824 1ECh +
ja loc_4413F8  +
mov ecx dword_4EC824 +
movsx eax word_4DEA30[ecx*2] +
jmp loc_4413FD  +
mov eax 128h +
mov eax off_4DE58C[eax*4] +
push eax  +
push offset aUnexpectedSSS  +
push offset byte_4EC424  +
call _sprintf  +
add esp 14h +
push offset byte_4EC424  +
mov edx dword_4EAE5C +
push edx  +
mov ecx dword_4EAE58 +
push ecx  +
call sub_444EC0  +
add esp 0Ch +
mov eax 2 +
jmp loc_444B70  +
mov edx [ebp+var_20] +
add edx edx +
mov [ebp+var_20] edx +
cmp [ebp+var_20] 2710h +
jle loc_441454  +
mov [ebp+var_20] 2710h +
push 0  +
mov esi [ebp+var_20] +
mov eax esi +
add eax eax +
push eax  +
call ___alloca_helper  +
pop ecx  +
mov [ebp+var_14] eax +
mov edi ebx +
mov eax edi +
add eax eax +
push eax  +
mov edx [ebp+var_14] +
push edx  +
mov ecx [ebp+var_34] +
push ecx  +
call sub_4412C0  +
add esp 0Ch +
mov eax esi +
shl eax 3 +
push 0  +
push eax  +
call ___alloca_helper  +
mov edx edi +
pop ecx  +
shl edx 3 +
mov [ebp+var_18] eax +
push edx  +
mov ecx [ebp+var_18] +
push ecx  +
mov eax [ebp+var_30] +
push eax  +
call sub_4412C0  +
add esp 0Ch +
mov edx esi +
shl edx 3 +
push 0  +
lea edx [edx+edx*2] +
push edx  +
call ___alloca_helper  +
pop ecx  +
mov [ebp+var_1C] eax +
mov ecx edi +
shl ecx 3 +
lea ecx [ecx+ecx*2] +
push ecx  +
mov eax [ebp+var_1C] +
push eax  +
mov edx [ebp+var_38] +
push edx  +
call sub_4412C0  +
mov eax ebx +
mov esi ebx +
shl eax 3 +
mov edi ebx +
shl esi 3 +
add edi edi +
add eax [ebp+var_18] +
add edi [ebp+var_14] +
add eax 0FFFFFFF8h +
lea esi [esi+esi*2] +
mov [ebp+var_8] eax +
add edi 0FFFFFFFEh +
add esi [ebp+var_1C] +
add esp 0Ch +
add esi 0FFFFFFE8h +
cmp dword_4EC84C 0 +
jz loc_441517  +
mov eax [ebp+var_20] +
push eax  +
push offset aStackSizeIncre  +
push offset stream  +
call _fprintf  +
add esp 0Ch +
mov edx [ebp+var_20] +
add edx edx +
add edx [ebp+var_14] +
add edx 0FFFFFFFEh +
cmp edi edx +
jb loc_441530  +
mov eax 1 +
jmp loc_444B70  +
cmp dword_4EC84C 0 +
jz loc_44154F  +
mov edx [ebp+var_4] +
push edx  +
push offset aEnteringStateD  +
push offset stream  +
call _fprintf  +
add esp 0Ch +
mov ecx [ebp+var_4] +
movsx ebx word_4E09AA[ecx*2] +
cmp ebx 0FFFF8000h +
jz loc_441706  +
cmp dword_4EC824 0FFFFFFFEh +
jnz loc_441594  +
cmp dword_4EC84C 0 +
jz loc_44158A  +
push offset aReadingAToken  +
push offset stream  +
call _fprintf  +
add esp 8 +
call sub_42166C  +
mov dword_4EC824 eax +
cmp dword_4EC824 0 +
jg loc_4415C7  +
xor edx edx +
xor eax eax +
mov dword_4EC824 edx +
mov [ebp+var_10] eax +
cmp dword_4EC84C 0 +
jz loc_441629  +
push offset aNowAtEndOfInpu  +
push offset stream  +
call _fprintf  +
add esp 8 +
jmp loc_441629  +
cmp dword_4EC824 1ECh +
ja loc_4415E3  +
mov ecx dword_4EC824 +
movsx eax word_4DEA30[ecx*2] +
jmp loc_4415E8  +
mov eax 128h +
mov [ebp+var_10] eax +
cmp dword_4EC84C 0 +
jz loc_441629  +
mov edx [ebp+var_10] +
mov ecx off_4DFA98[edx*4] +
push ecx  +
mov eax dword_4EC824 +
push eax  +
push offset aNextTokenIsDS  +
push offset stream  +
call _fprintf  +
add esp 10h +
push offset asc_4E5910  +
push offset stream  +
call _fprintf  +
add esp 8 +
add ebx [ebp+var_10] +
test ebx ebx +
jl loc_441706  +
cmp ebx 5D7h +
jg loc_441706  +
movsx edx word_4E1AD8[ebx*2] +
cmp edx [ebp+var_10] +
jnz loc_441706  +
movsx ecx word_4E0F28[ebx*2] +
mov ebx ecx +
test ebx ebx +
jge loc_441672  +
cmp ebx 0FFFF8000h +
jz loc_444951  +
neg ebx  +
jmp loc_441719  +
test ebx ebx +
jz loc_444951  +
cmp ebx 28Eh +
jnz loc_441689  +
xor eax eax +
jmp loc_444B70  +
cmp dword_4EC84C 0 +
jz loc_4416B5  +
mov edx [ebp+var_10] +
mov ecx off_4DFA98[edx*4] +
push ecx  +
mov eax dword_4EC824 +
push eax  +
push offset aShiftingTokenD  +
push offset stream  +
call _fprintf  +
add esp 10h +
cmp dword_4EC824 0 +
jz loc_4416C8  +
mov dword_4EC824 0FFFFFFFEh +
add [ebp+var_8] 8 +
mov edx [ebp+var_8] +
mov ecx dword ptr dbl_4EC828 +
add esi 18h +
mov [edx] ecx +
mov ecx dword ptr dbl_4EC828+4 +
mov [edx+4] ecx +
push esi  +
push edi  +
mov edi esi +
mov esi offset unk_4EC830 +
mov ecx 6 +
movs   +
cmp [ebp+var_C] 0 +
pop edi  +
pop esi  +
jz loc_4416FE  +
dec [ebp+var_C]  +
mov [ebp+var_4] ebx +
jmp loc_44135F  +
mov eax [ebp+var_4] +
movsx ebx word_4E042C[eax*2] +
test ebx ebx +
jz loc_444951  +
movsx eax word_4E01B4[ebx*2] +
mov [ebp+var_2C] eax +
mov edx 1 +
sub edx [ebp+var_2C] +
cmp dword_4EC84C 0 +
mov ecx [ebp+var_8] +
mov eax [ecx+edx*8] +
mov [ebp+var_28] eax +
mov eax [ecx+edx*8+4] +
mov [ebp+var_24] eax +
jz loc_4417C3  +
movsx edx word_4DF81E[ebx*2] +
push edx  +
push ebx  +
push offset aReducingViaRul  +
push offset stream  +
call _fprintf  +
movsx eax word_4DEE0A[ebx*2] +
add esp 10h +
lea edx unk_4DF082[eax*2] +
mov [ebp+var_40] edx +
jmp loc_441796  +
movsx ecx ax +
mov eax off_4DFA98[ecx*4] +
push eax  +
push offset aS_5  +
push offset stream  +
call _fprintf  +
add esp 0Ch +
add [ebp+var_40] 2 +
mov edx [ebp+var_40] +
mov ax [edx] +
test ax ax +
jg loc_441775  +
movsx edx word_4DFF3C[ebx*2] +
mov ecx off_4DFA98[edx*4] +
push ecx  +
push offset aS_6  +
push offset stream  +
call _fprintf  +
add esp 0Ch +
mov eax ebx +
cmp eax 13Bh +
ja loc_44482A  +
jmp ds:off_4417D7[eax*4]  +
mov edx [ebp+var_8] +
mov ecx [edx-8] +
push ecx  +
call sub_445410  +
pop ecx  +
mov [ebp+var_28] eax +
mov eax [ebp+var_28] +
mov dword_4EC420 eax +
jmp loc_44482A  +
mov edx [ebp+var_8] +
mov ecx [edx-8] +
push ecx  +
lea ecx [esi-18h] +
mov eax [ebp+var_8] +
mov edx [eax] +
push edx  +
push ecx  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 2  +
push 0FCh  +
call sub_44528C  +
add esp 18h +
mov [ebp+var_28] eax +
jmp loc_44482A  +
push 0  +
mov eax [ebp+var_8] +
mov edx [eax] +
push edx  +
push esi  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 2  +
push 0FCh  +
call sub_44528C  +
add esp 18h +
mov [ebp+var_28] eax +
jmp loc_44482A  +
mov ecx [ebp+var_8] +
mov eax [ecx] +
push eax  +
push esi  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 1  +
push 0FBh  +
call sub_44528C  +
add esp 14h +
mov [ebp+var_28] eax +
jmp loc_44482A  +
mov edx [ebp+var_8] +
mov ecx [edx] +
push ecx  +
push esi  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 1  +
push 0FAh  +
call sub_44528C  +
add esp 14h +
mov [ebp+var_28] eax +
jmp loc_44482A  +
mov eax [ebp+var_8] +
mov edx [eax] +
push edx  +
push esi  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 1  +
push 0F9h  +
call sub_44528C  +
add esp 14h +
mov [ebp+var_28] eax +
jmp loc_44482A  +
mov ecx [ebp+var_8] +
mov eax [ecx] +
push eax  +
push esi  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 1  +
push 0F8h  +
call sub_44528C  +
add esp 14h +
mov [ebp+var_28] eax +
jmp loc_44482A  +
mov edx [ebp+var_8] +
mov ecx [edx] +
push ecx  +
push esi  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 1  +
push 0F7h  +
call sub_44528C  +
add esp 14h +
mov [ebp+var_28] eax +
jmp loc_44482A  +
mov eax [ebp+var_8] +
mov edx [eax] +
push edx  +
push esi  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 1  +
push 0F6h  +
call sub_44528C  +
add esp 14h +
mov [ebp+var_28] eax +
jmp loc_44482A  +
mov ecx [ebp+var_8] +
mov eax [ecx] +
push eax  +
push esi  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 1  +
push 0F5h  +
call sub_44528C  +
add esp 14h +
mov [ebp+var_28] eax +
jmp loc_44482A  +
mov edx [ebp+var_8] +
mov ecx [edx] +
push ecx  +
push esi  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 1  +
push 0F4h  +
call sub_44528C  +
add esp 14h +
mov [ebp+var_28] eax +
jmp loc_44482A  +
mov eax [ebp+var_8] +
mov edx [eax] +
push edx  +
push esi  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 1  +
push 0F3h  +
call sub_44528C  +
add esp 14h +
mov [ebp+var_28] eax +
jmp loc_44482A  +
mov ecx [ebp+var_8] +
mov eax [ecx] +
push eax  +
push esi  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 1  +
push 0F2h  +
call sub_44528C  +
add esp 14h +
mov [ebp+var_28] eax +
jmp loc_44482A  +
mov edx [ebp+var_8] +
mov ecx [edx] +
push ecx  +
push esi  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 1  +
push 0F1h  +
call sub_44528C  +
add esp 14h +
mov [ebp+var_28] eax +
jmp loc_44482A  +
mov eax [ebp+var_8] +
mov edx [eax] +
push edx  +
push esi  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 1  +
push 0F0h  +
call sub_44528C  +
add esp 14h +
mov [ebp+var_28] eax +
jmp loc_44482A  +
mov ecx [ebp+var_8] +
lea edx [esi-30h] +
mov eax [ecx] +
push eax  +
push edx  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 1  +
push 0EFh  +
call sub_44528C  +
add esp 14h +
mov [ebp+var_28] eax +
jmp loc_44482A  +
mov ecx [ebp+var_8] +
lea edx [esi-30h] +
mov eax [ecx] +
push eax  +
push edx  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 1  +
push 0EEh  +
call sub_44528C  +
add esp 14h +
mov [ebp+var_28] eax +
jmp loc_44482A  +
mov ecx [ebp+var_8] +
lea edx [esi-30h] +
mov eax [ecx] +
push eax  +
push edx  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 1  +
push 0EDh  +
call sub_44528C  +
add esp 14h +
mov [ebp+var_28] eax +
jmp loc_44482A  +
mov ecx [ebp+var_8] +
lea edx [esi-30h] +
mov eax [ecx] +
push eax  +
push edx  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 1  +
push 0ECh  +
call sub_44528C  +
add esp 14h +
mov [ebp+var_28] eax +
jmp loc_44482A  +
mov ecx [ebp+var_8] +
lea edx [esi-30h] +
mov eax [ecx] +
push eax  +
push edx  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 1  +
push 0EBh  +
call sub_44528C  +
add esp 14h +
mov [ebp+var_28] eax +
jmp loc_44482A  +
mov ecx [ebp+var_8] +
lea edx [esi-30h] +
mov eax [ecx] +
push eax  +
push edx  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 1  +
push 0EAh  +
call sub_44528C  +
add esp 14h +
mov [ebp+var_28] eax +
jmp loc_44482A  +
mov ecx [ebp+var_8] +
lea edx [esi-30h] +
mov eax [ecx] +
push eax  +
push edx  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 1  +
push 0E9h  +
call sub_44528C  +
add esp 14h +
mov [ebp+var_28] eax +
jmp loc_44482A  +
mov ecx [ebp+var_8] +
lea edx [esi-30h] +
mov eax [ecx] +
push eax  +
push edx  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 1  +
push 0E8h  +
call sub_44528C  +
add esp 14h +
mov [ebp+var_28] eax +
jmp loc_44482A  +
mov ecx [ebp+var_8] +
lea edx [esi-30h] +
mov eax [ecx] +
push eax  +
push edx  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 1  +
push 0E7h  +
call sub_44528C  +
add esp 14h +
mov [ebp+var_28] eax +
jmp loc_44482A  +
mov ecx [ebp+var_8] +
lea edx [esi-30h] +
mov eax [ecx] +
push eax  +
push edx  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 1  +
push 0E6h  +
call sub_44528C  +
add esp 14h +
mov [ebp+var_28] eax +
jmp loc_44482A  +
mov ecx [ebp+var_8] +
lea edx [esi-30h] +
mov eax [ecx] +
push eax  +
push edx  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 1  +
push 0E5h  +
call sub_44528C  +
add esp 14h +
mov [ebp+var_28] eax +
jmp loc_44482A  +
mov ecx [ebp+var_8] +
lea edx [esi-30h] +
mov eax [ecx] +
push eax  +
push edx  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 1  +
push 0E4h  +
call sub_44528C  +
add esp 14h +
mov [ebp+var_28] eax +
jmp loc_44482A  +
mov ecx [ebp+var_8] +
lea edx [esi-30h] +
mov eax [ecx] +
push eax  +
push edx  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 1  +
push 0E3h  +
call sub_44528C  +
add esp 14h +
mov [ebp+var_28] eax +
jmp loc_44482A  +
mov ecx [ebp+var_8] +
mov eax [ecx-8] +
push eax  +
lea eax [esi-0C0h] +
mov edx [ebp+var_8] +
mov ecx [edx-20h] +
push ecx  +
push eax  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 2  +
push 0E2h  +
call sub_44528C  +
add esp 18h +
mov [ebp+var_28] eax +
jmp loc_44482A  +
mov edx [ebp+var_8] +
lea eax [esi-30h] +
mov ecx [edx] +
push ecx  +
push eax  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 1  +
push 0E1h  +
call sub_44528C  +
add esp 14h +
mov [ebp+var_28] eax +
jmp loc_44482A  +
mov edx [ebp+var_8] +
lea eax [esi-30h] +
mov ecx [edx] +
push ecx  +
push eax  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 1  +
push 0E0h  +
call sub_44528C  +
add esp 14h +
mov [ebp+var_28] eax +
jmp loc_44482A  +
mov edx [ebp+var_8] +
lea eax [esi-30h] +
mov ecx [edx] +
push ecx  +
push eax  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 1  +
push 0DFh  +
call sub_44528C  +
add esp 14h +
mov [ebp+var_28] eax +
jmp loc_44482A  +
mov edx [ebp+var_8] +
lea eax [esi-30h] +
mov ecx [edx] +
push ecx  +
push eax  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 1  +
push 0DEh  +
call sub_44528C  +
add esp 14h +
mov [ebp+var_28] eax +
jmp loc_44482A  +
mov edx [ebp+var_8] +
lea eax [esi-30h] +
mov ecx [edx] +
push ecx  +
push eax  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 1  +
push 0DDh  +
call sub_44528C  +
add esp 14h +
mov [ebp+var_28] eax +
jmp loc_44482A  +
mov edx [ebp+var_8] +
lea eax [esi-30h] +
mov ecx [edx] +
push ecx  +
push eax  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 1  +
push 0DCh  +
call sub_44528C  +
add esp 14h +
mov [ebp+var_28] eax +
jmp loc_44482A  +
mov edx [ebp+var_8] +
lea eax [esi-30h] +
mov ecx [edx] +
push ecx  +
push eax  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 1  +
push 0DBh  +
call sub_44528C  +
add esp 14h +
mov [ebp+var_28] eax +
jmp loc_44482A  +
mov edx [ebp+var_8] +
lea eax [esi-30h] +
mov ecx [edx] +
push ecx  +
push eax  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 1  +
push 0DBh  +
call sub_44528C  +
add esp 14h +
mov [ebp+var_28] eax +
jmp loc_44482A  +
mov edx [ebp+var_8] +
lea eax [esi-30h] +
mov ecx [edx] +
push ecx  +
push eax  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 1  +
push 0DAh  +
call sub_44528C  +
add esp 14h +
mov [ebp+var_28] eax +
jmp loc_44482A  +
mov edx [ebp+var_8] +
lea eax [esi-30h] +
mov ecx [edx] +
push ecx  +
push eax  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 1  +
push 0D9h  +
call sub_44528C  +
add esp 14h +
mov [ebp+var_28] eax +
jmp loc_44482A  +
mov edx [ebp+var_8] +
lea eax [esi-30h] +
mov ecx [edx] +
push ecx  +
push eax  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 1  +
push 0D8h  +
call sub_44528C  +
add esp 14h +
mov [ebp+var_28] eax +
jmp loc_44482A  +
mov edx [ebp+var_8] +
lea eax [esi-30h] +
mov ecx [edx] +
push ecx  +
push eax  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 1  +
push 0D7h  +
call sub_44528C  +
add esp 14h +
mov [ebp+var_28] eax +
jmp loc_44482A  +
mov edx [ebp+var_8] +
lea eax [esi-30h] +
mov ecx [edx] +
push ecx  +
push eax  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 1  +
push 0D6h  +
call sub_44528C  +
add esp 14h +
mov [ebp+var_28] eax +
jmp loc_44482A  +
mov edx [ebp+var_8] +
lea eax [esi-30h] +
mov ecx [edx] +
push ecx  +
push eax  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 1  +
push 0D5h  +
call sub_44528C  +
add esp 14h +
mov [ebp+var_28] eax +
jmp loc_44482A  +
mov edx [ebp+var_8] +
lea eax [esi-30h] +
mov ecx [edx] +
push ecx  +
push eax  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 1  +
push 0D4h  +
call sub_44528C  +
add esp 14h +
mov [ebp+var_28] eax +
jmp loc_44482A  +
mov edx [ebp+var_8] +
lea eax [esi-30h] +
mov ecx [edx] +
push ecx  +
push eax  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 1  +
push 0D3h  +
call sub_44528C  +
add esp 14h +
mov [ebp+var_28] eax +
jmp loc_44482A  +
mov edx [ebp+var_8] +
lea eax [esi-30h] +
mov ecx [edx] +
push ecx  +
push eax  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 1  +
push 0D2h  +
call sub_44528C  +
add esp 14h +
mov [ebp+var_28] eax +
jmp loc_44482A  +
mov edx [ebp+var_8] +
lea eax [esi-30h] +
mov ecx [edx] +
push ecx  +
push eax  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 1  +
push 0D1h  +
call sub_44528C  +
add esp 14h +
mov [ebp+var_28] eax +
jmp loc_44482A  +
mov edx [ebp+var_8] +
lea eax [esi-30h] +
mov ecx [edx] +
push ecx  +
push eax  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 1  +
push 0D0h  +
call sub_44528C  +
add esp 14h +
mov [ebp+var_28] eax +
jmp loc_44482A  +
mov edx [ebp+var_8] +
lea eax [esi-30h] +
mov ecx [edx] +
push ecx  +
push eax  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 1  +
push 0CFh  +
call sub_44528C  +
add esp 14h +
mov [ebp+var_28] eax +
jmp loc_44482A  +
mov edx [ebp+var_8] +
lea eax [esi-30h] +
mov ecx [edx] +
push ecx  +
push eax  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 1  +
push 0CEh  +
call sub_44528C  +
add esp 14h +
mov [ebp+var_28] eax +
jmp loc_44482A  +
mov edx [ebp+var_8] +
lea eax [esi-30h] +
mov ecx [edx] +
push ecx  +
push eax  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 1  +
push 0CEh  +
call sub_44528C  +
add esp 14h +
mov [ebp+var_28] eax +
jmp loc_44482A  +
mov edx [ebp+var_8] +
mov ecx [edx] +
push ecx  +
lea ecx [esi-48h] +
mov eax [ebp+var_8] +
mov edx [eax-10h] +
push edx  +
push ecx  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 2  +
push 0CDh  +
call sub_44528C  +
add esp 18h +
mov [ebp+var_28] eax +
jmp loc_44482A  +
mov eax [ebp+var_8] +
mov edx [eax] +
push edx  +
lea edx [esi-48h] +
mov ecx [ebp+var_8] +
mov eax [ecx-10h] +
push eax  +
push edx  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 2  +
push 0CCh  +
call sub_44528C  +
add esp 18h +
mov [ebp+var_28] eax +
jmp loc_44482A  +
mov ecx [ebp+var_8] +
mov eax [ecx] +
push eax  +
mov edx [ebp+var_8] +
mov ecx [edx-8] +
push ecx  +
mov eax [ebp+var_8] +
mov edx [eax-10h] +
push edx  +
lea edx [esi-78h] +
mov ecx [ebp+var_8] +
mov eax [ecx-20h] +
push eax  +
push edx  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 4  +
push 0CBh  +
call sub_44528C  +
add esp 20h +
mov [ebp+var_28] eax +
jmp loc_44482A  +
mov ecx [ebp+var_8] +
lea edx [esi-30h] +
mov eax [ecx] +
push eax  +
push edx  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 1  +
push 0CAh  +
call sub_44528C  +
add esp 14h +
mov [ebp+var_28] eax +
jmp loc_44482A  +
mov ecx [ebp+var_8] +
lea edx [esi-30h] +
mov eax [ecx] +
push eax  +
push edx  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 1  +
push 0C9h  +
call sub_44528C  +
add esp 14h +
mov [ebp+var_28] eax +
jmp loc_44482A  +
mov ecx [ebp+var_8] +
lea edx [esi-30h] +
mov eax [ecx] +
push eax  +
push edx  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 1  +
push 0C8h  +
call sub_44528C  +
add esp 14h +
mov [ebp+var_28] eax +
jmp loc_44482A  +
mov ecx [ebp+var_8] +
lea edx [esi-30h] +
mov eax [ecx] +
push eax  +
push edx  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 1  +
push 0C7h  +
call sub_44528C  +
add esp 14h +
mov [ebp+var_28] eax +
jmp loc_44482A  +
mov ecx [ebp+var_8] +
lea edx [esi-30h] +
mov eax [ecx] +
push eax  +
push edx  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 1  +
push 0C6h  +
call sub_44528C  +
add esp 14h +
mov [ebp+var_28] eax +
jmp loc_44482A  +
mov ecx [ebp+var_8] +
lea edx [esi-30h] +
mov eax [ecx] +
push eax  +
push edx  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 1  +
push 0C5h  +
call sub_44528C  +
add esp 14h +
mov [ebp+var_28] eax +
jmp loc_44482A  +
mov ecx [ebp+var_8] +
lea edx [esi-30h] +
mov eax [ecx] +
push eax  +
push edx  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 1  +
push 0C4h  +
call sub_44528C  +
add esp 14h +
mov [ebp+var_28] eax +
jmp loc_44482A  +
mov ecx [ebp+var_8] +
lea edx [esi-30h] +
mov eax [ecx] +
push eax  +
push edx  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 1  +
push 0C3h  +
call sub_44528C  +
add esp 14h +
mov [ebp+var_28] eax +
jmp loc_44482A  +
mov ecx [ebp+var_8] +
lea edx [esi-30h] +
mov eax [ecx] +
push eax  +
push edx  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 1  +
push 0C2h  +
call sub_44528C  +
add esp 14h +
mov [ebp+var_28] eax +
jmp loc_44482A  +
mov ecx [ebp+var_8] +
lea edx [esi-30h] +
mov eax [ecx] +
push eax  +
push edx  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 1  +
push 0C1h  +
call sub_44528C  +
add esp 14h +
mov [ebp+var_28] eax +
jmp loc_44482A  +
mov ecx [ebp+var_8] +
lea edx [esi-30h] +
mov eax [ecx] +
push eax  +
push edx  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 1  +
push 0C0h  +
call sub_44528C  +
add esp 14h +
mov [ebp+var_28] eax +
jmp loc_44482A  +
mov ecx [ebp+var_8] +
lea edx [esi-30h] +
mov eax [ecx] +
push eax  +
push edx  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 1  +
push 0BFh  +
call sub_44528C  +
add esp 14h +
mov [ebp+var_28] eax +
jmp loc_44482A  +
mov ecx [ebp+var_8] +
lea edx [esi-30h] +
mov eax [ecx] +
push eax  +
push edx  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 1  +
push 0BEh  +
call sub_44528C  +
add esp 14h +
mov [ebp+var_28] eax +
jmp loc_44482A  +
mov ecx [ebp+var_8] +
lea edx [esi-30h] +
mov eax [ecx] +
push eax  +
push edx  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 1  +
push 0BDh  +
call sub_44528C  +
add esp 14h +
mov [ebp+var_28] eax +
jmp loc_44482A  +
mov ecx [ebp+var_8] +
lea edx [esi-30h] +
mov eax [ecx] +
push eax  +
push edx  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 1  +
push 0BCh  +
call sub_44528C  +
add esp 14h +
mov [ebp+var_28] eax +
jmp loc_44482A  +
push esi  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 0BBh  +
call sub_445230  +
add esp 0Ch +
mov [ebp+var_28] eax +
jmp loc_44482A  +
lea ecx [esi-30h] +
push ecx  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 0BBh  +
call sub_445230  +
add esp 0Ch +
mov [ebp+var_28] eax +
jmp loc_44482A  +
lea eax [esi-30h] +
push eax  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 0BAh  +
call sub_445230  +
add esp 0Ch +
mov [ebp+var_28] eax +
jmp loc_44482A  +
mov edx [ebp+var_8] +
lea eax [esi-30h] +
mov ecx [edx] +
push ecx  +
push eax  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 1  +
push 0B9h  +
call sub_44528C  +
add esp 14h +
mov [ebp+var_28] eax +
jmp loc_44482A  +
mov edx [ebp+var_8] +
lea eax [esi-30h] +
mov ecx [edx] +
push ecx  +
push eax  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 1  +
push 0B8h  +
call sub_44528C  +
add esp 14h +
mov [ebp+var_28] eax +
jmp loc_44482A  +
mov edx [ebp+var_8] +
lea eax [esi-30h] +
mov ecx [edx] +
push ecx  +
push eax  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 1  +
push 0B7h  +
call sub_44528C  +
add esp 14h +
mov [ebp+var_28] eax +
jmp loc_44482A  +
mov edx [ebp+var_8] +
lea eax [esi-30h] +
mov ecx [edx] +
push ecx  +
push eax  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 1  +
push 0B6h  +
call sub_44528C  +
add esp 14h +
mov [ebp+var_28] eax +
jmp loc_44482A  +
mov edx [ebp+var_8] +
lea eax [esi-30h] +
mov ecx [edx] +
push ecx  +
push eax  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 1  +
push 0B5h  +
call sub_44528C  +
add esp 14h +
mov [ebp+var_28] eax +
jmp loc_44482A  +
mov edx [ebp+var_8] +
lea eax [esi-30h] +
mov ecx [edx] +
push ecx  +
push eax  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 1  +
push 0B4h  +
call sub_44528C  +
add esp 14h +
mov [ebp+var_28] eax +
jmp loc_44482A  +
mov edx [ebp+var_8] +
lea eax [esi-30h] +
mov ecx [edx] +
push ecx  +
push eax  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 1  +
push 0B3h  +
call sub_44528C  +
add esp 14h +
mov [ebp+var_28] eax +
jmp loc_44482A  +
mov edx [ebp+var_8] +
lea eax [esi-30h] +
mov ecx [edx] +
push ecx  +
push eax  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 1  +
push 0B2h  +
call sub_44528C  +
add esp 14h +
mov [ebp+var_28] eax +
jmp loc_44482A  +
mov edx [ebp+var_8] +
lea eax [esi-30h] +
mov ecx [edx] +
push ecx  +
push eax  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 1  +
push 0B1h  +
call sub_44528C  +
add esp 14h +
mov [ebp+var_28] eax +
jmp loc_44482A  +
mov edx [ebp+var_8] +
lea eax [esi-30h] +
mov ecx [edx] +
push ecx  +
push eax  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 1  +
push 0B0h  +
call sub_44528C  +
add esp 14h +
mov [ebp+var_28] eax +
jmp loc_44482A  +
mov edx [ebp+var_8] +
lea eax [esi-30h] +
mov ecx [edx] +
push ecx  +
push eax  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 1  +
push 0AFh  +
call sub_44528C  +
add esp 14h +
mov [ebp+var_28] eax +
jmp loc_44482A  +
mov edx [ebp+var_8] +
lea eax [esi-30h] +
mov ecx [edx] +
push ecx  +
push eax  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 1  +
push 0AEh  +
call sub_44528C  +
add esp 14h +
mov [ebp+var_28] eax +
jmp loc_44482A  +
mov edx [ebp+var_8] +
lea eax [esi-30h] +
mov ecx [edx] +
push ecx  +
push eax  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 1  +
push 0ADh  +
call sub_44528C  +
add esp 14h +
mov [ebp+var_28] eax +
jmp loc_44482A  +
mov edx [ebp+var_8] +
lea eax [esi-30h] +
mov ecx [edx] +
push ecx  +
push eax  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 1  +
push 0ACh  +
call sub_44528C  +
add esp 14h +
mov [ebp+var_28] eax +
jmp loc_44482A  +
mov edx [ebp+var_8] +
lea eax [esi-30h] +
mov ecx [edx] +
push ecx  +
push eax  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 1  +
push 0ABh  +
call sub_44528C  +
add esp 14h +
mov [ebp+var_28] eax +
jmp loc_44482A  +
mov edx [ebp+var_8] +
lea eax [esi-30h] +
mov ecx [edx] +
push ecx  +
push eax  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 1  +
push 0AAh  +
call sub_44528C  +
add esp 14h +
mov [ebp+var_28] eax +
jmp loc_44482A  +
mov edx [ebp+var_8] +
lea eax [esi-30h] +
mov ecx [edx] +
push ecx  +
push eax  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 1  +
push 0A9h  +
call sub_44528C  +
add esp 14h +
mov [ebp+var_28] eax +
jmp loc_44482A  +
mov edx [ebp+var_8] +
lea eax [esi-30h] +
mov ecx [edx] +
push ecx  +
push eax  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 1  +
push 0A8h  +
call sub_44528C  +
add esp 14h +
mov [ebp+var_28] eax +
jmp loc_44482A  +
mov edx [ebp+var_8] +
lea eax [esi-30h] +
mov ecx [edx] +
push ecx  +
push eax  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 1  +
push 0A7h  +
call sub_44528C  +
add esp 14h +
mov [ebp+var_28] eax +
jmp loc_44482A  +
mov edx [ebp+var_8] +
lea eax [esi-30h] +
mov ecx [edx] +
push ecx  +
push eax  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 1  +
push 0A6h  +
call sub_44528C  +
add esp 14h +
mov [ebp+var_28] eax +
jmp loc_44482A  +
mov edx [ebp+var_8] +
lea eax [esi-30h] +
mov ecx [edx] +
push ecx  +
push eax  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 1  +
push 0A5h  +
call sub_44528C  +
add esp 14h +
mov [ebp+var_28] eax +
jmp loc_44482A  +
mov edx [ebp+var_8] +
lea eax [esi-30h] +
mov ecx [edx] +
push ecx  +
push eax  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 1  +
push 0A4h  +
call sub_44528C  +
add esp 14h +
mov [ebp+var_28] eax +
jmp loc_44482A  +
mov edx [ebp+var_8] +
lea eax [esi-30h] +
mov ecx [edx] +
push ecx  +
push eax  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 1  +
push 0A3h  +
call sub_44528C  +
add esp 14h +
mov [ebp+var_28] eax +
jmp loc_44482A  +
mov edx [ebp+var_8] +
lea eax [esi-30h] +
mov ecx [edx] +
push ecx  +
push eax  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 1  +
push 0A2h  +
call sub_44528C  +
add esp 14h +
mov [ebp+var_28] eax +
jmp loc_44482A  +
mov edx [ebp+var_8] +
lea eax [esi-30h] +
mov ecx [edx] +
push ecx  +
push eax  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 1  +
push 0A1h  +
call sub_44528C  +
add esp 14h +
mov [ebp+var_28] eax +
jmp loc_44482A  +
mov edx [ebp+var_8] +
lea eax [esi-30h] +
mov ecx [edx] +
push ecx  +
push eax  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 1  +
push 0A0h  +
call sub_44528C  +
add esp 14h +
mov [ebp+var_28] eax +
jmp loc_44482A  +
mov edx [ebp+var_8] +
lea eax [esi-30h] +
mov ecx [edx] +
push ecx  +
push eax  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 1  +
push 9Fh  +
call sub_44528C  +
add esp 14h +
mov [ebp+var_28] eax +
jmp loc_44482A  +
mov edx [ebp+var_8] +
lea eax [esi-30h] +
mov ecx [edx] +
push ecx  +
push eax  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 1  +
push 9Eh  +
call sub_44528C  +
add esp 14h +
mov [ebp+var_28] eax +
jmp loc_44482A  +
mov edx [ebp+var_8] +
lea eax [esi-30h] +
mov ecx [edx] +
push ecx  +
push eax  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 1  +
push 9Dh  +
call sub_44528C  +
add esp 14h +
mov [ebp+var_28] eax +
jmp loc_44482A  +
push esi  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 9Ch  +
call sub_445230  +
add esp 0Ch +
mov [ebp+var_28] eax +
jmp loc_44482A  +
push esi  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 9Bh  +
call sub_445230  +
add esp 0Ch +
mov [ebp+var_28] eax +
jmp loc_44482A  +
push esi  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 9Ah  +
call sub_445230  +
add esp 0Ch +
mov [ebp+var_28] eax +
jmp loc_44482A  +
push esi  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 99h  +
call sub_445230  +
add esp 0Ch +
mov [ebp+var_28] eax +
jmp loc_44482A  +
push esi  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 98h  +
call sub_445230  +
add esp 0Ch +
mov [ebp+var_28] eax +
jmp loc_44482A  +
push esi  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 97h  +
call sub_445230  +
add esp 0Ch +
mov [ebp+var_28] eax +
jmp loc_44482A  +
push esi  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 96h  +
call sub_445230  +
add esp 0Ch +
mov [ebp+var_28] eax +
jmp loc_44482A  +
push esi  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 95h  +
call sub_445230  +
add esp 0Ch +
mov [ebp+var_28] eax +
jmp loc_44482A  +
push esi  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 94h  +
call sub_445230  +
add esp 0Ch +
mov [ebp+var_28] eax +
jmp loc_44482A  +
push esi  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 93h  +
call sub_445230  +
add esp 0Ch +
mov [ebp+var_28] eax +
jmp loc_44482A  +
push esi  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 92h  +
call sub_445230  +
add esp 0Ch +
mov [ebp+var_28] eax +
jmp loc_44482A  +
push esi  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 91h  +
call sub_445230  +
add esp 0Ch +
mov [ebp+var_28] eax +
jmp loc_44482A  +
push esi  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 90h  +
call sub_445230  +
add esp 0Ch +
mov [ebp+var_28] eax +
jmp loc_44482A  +
push esi  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 8Fh  +
call sub_445230  +
add esp 0Ch +
mov [ebp+var_28] eax +
jmp loc_44482A  +
push esi  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 8Eh  +
call sub_445230  +
add esp 0Ch +
mov [ebp+var_28] eax +
jmp loc_44482A  +
push esi  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 8Dh  +
call sub_445230  +
add esp 0Ch +
mov [ebp+var_28] eax +
jmp loc_44482A  +
push esi  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 8Ch  +
call sub_445230  +
add esp 0Ch +
mov [ebp+var_28] eax +
jmp loc_44482A  +
push esi  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 8Bh  +
call sub_445230  +
add esp 0Ch +
mov [ebp+var_28] eax +
jmp loc_44482A  +
push esi  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 8Ah  +
call sub_445230  +
add esp 0Ch +
mov [ebp+var_28] eax +
jmp loc_44482A  +
push esi  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 89h  +
call sub_445230  +
add esp 0Ch +
mov [ebp+var_28] eax +
jmp loc_44482A  +
push esi  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 88h  +
call sub_445230  +
add esp 0Ch +
mov [ebp+var_28] eax +
jmp loc_44482A  +
push esi  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 87h  +
call sub_445230  +
add esp 0Ch +
mov [ebp+var_28] eax +
jmp loc_44482A  +
push esi  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 86h  +
call sub_445230  +
add esp 0Ch +
mov [ebp+var_28] eax +
jmp loc_44482A  +
push esi  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 85h  +
call sub_445230  +
add esp 0Ch +
mov [ebp+var_28] eax +
jmp loc_44482A  +
push esi  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 84h  +
call sub_445230  +
add esp 0Ch +
mov [ebp+var_28] eax +
jmp loc_44482A  +
push esi  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 83h  +
call sub_445230  +
add esp 0Ch +
mov [ebp+var_28] eax +
jmp loc_44482A  +
push esi  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 82h  +
call sub_445230  +
add esp 0Ch +
mov [ebp+var_28] eax +
jmp loc_44482A  +
push esi  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 81h  +
call sub_445230  +
add esp 0Ch +
mov [ebp+var_28] eax +
jmp loc_44482A  +
push esi  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 80h  +
call sub_445230  +
add esp 0Ch +
mov [ebp+var_28] eax +
jmp loc_44482A  +
push esi  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 7Fh  +
call sub_445230  +
add esp 0Ch +
mov [ebp+var_28] eax +
jmp loc_44482A  +
push esi  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 7Eh  +
call sub_445230  +
add esp 0Ch +
mov [ebp+var_28] eax +
jmp loc_44482A  +
push esi  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 7Dh  +
call sub_445230  +
add esp 0Ch +
mov [ebp+var_28] eax +
jmp loc_44482A  +
mov edx [ebp+var_8] +
mov ecx [edx] +
push ecx  +
push esi  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 1  +
push 7Ch  +
call sub_44528C  +
add esp 14h +
mov [ebp+var_28] eax +
jmp loc_44482A  +
push esi  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 7Bh  +
call sub_445230  +
add esp 0Ch +
mov [ebp+var_28] eax +
jmp loc_44482A  +
push esi  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 7Ah  +
call sub_445230  +
add esp 0Ch +
mov [ebp+var_28] eax +
jmp loc_44482A  +
push esi  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 79h  +
call sub_445230  +
add esp 0Ch +
mov [ebp+var_28] eax +
jmp loc_44482A  +
push esi  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 78h  +
call sub_445230  +
add esp 0Ch +
mov [ebp+var_28] eax +
jmp loc_44482A  +
push esi  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 77h  +
call sub_445230  +
add esp 0Ch +
mov [ebp+var_28] eax +
jmp loc_44482A  +
push esi  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 76h  +
call sub_445230  +
add esp 0Ch +
mov [ebp+var_28] eax +
jmp loc_44482A  +
push esi  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 75h  +
call sub_445230  +
add esp 0Ch +
mov [ebp+var_28] eax +
jmp loc_44482A  +
push esi  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 74h  +
call sub_445230  +
add esp 0Ch +
mov [ebp+var_28] eax +
jmp loc_44482A  +
push esi  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 73h  +
call sub_445230  +
add esp 0Ch +
mov [ebp+var_28] eax +
jmp loc_44482A  +
push esi  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 72h  +
call sub_445230  +
add esp 0Ch +
mov [ebp+var_28] eax +
jmp loc_44482A  +
push esi  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 71h  +
call sub_445230  +
add esp 0Ch +
mov [ebp+var_28] eax +
jmp loc_44482A  +
push esi  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 70h  +
call sub_445230  +
add esp 0Ch +
mov [ebp+var_28] eax +
jmp loc_44482A  +
push esi  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 6Fh  +
call sub_445230  +
add esp 0Ch +
mov [ebp+var_28] eax +
jmp loc_44482A  +
push esi  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 6Eh  +
call sub_445230  +
add esp 0Ch +
mov [ebp+var_28] eax +
jmp loc_44482A  +
push esi  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 6Dh  +
call sub_445230  +
add esp 0Ch +
mov [ebp+var_28] eax +
jmp loc_44482A  +
push esi  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 6Ch  +
call sub_445230  +
add esp 0Ch +
mov [ebp+var_28] eax +
jmp loc_44482A  +
push esi  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 6Bh  +
call sub_445230  +
add esp 0Ch +
mov [ebp+var_28] eax +
jmp loc_44482A  +
push esi  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 6Ah  +
call sub_445230  +
add esp 0Ch +
mov [ebp+var_28] eax +
jmp loc_44482A  +
push esi  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 69h  +
call sub_445230  +
add esp 0Ch +
mov [ebp+var_28] eax +
jmp loc_44482A  +
push esi  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 68h  +
call sub_445230  +
add esp 0Ch +
mov [ebp+var_28] eax +
jmp loc_44482A  +
push esi  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 67h  +
call sub_445230  +
add esp 0Ch +
mov [ebp+var_28] eax +
jmp loc_44482A  +
push esi  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 66h  +
call sub_445230  +
add esp 0Ch +
mov [ebp+var_28] eax +
jmp loc_44482A  +
push esi  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 65h  +
call sub_445230  +
add esp 0Ch +
mov [ebp+var_28] eax +
jmp loc_44482A  +
push esi  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 64h  +
call sub_445230  +
add esp 0Ch +
mov [ebp+var_28] eax +
jmp loc_44482A  +
push esi  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 63h  +
call sub_445230  +
add esp 0Ch +
mov [ebp+var_28] eax +
jmp loc_44482A  +
push esi  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 9Bh  +
call sub_445230  +
add esp 0Ch +
mov [ebp+var_28] eax +
jmp loc_44482A  +
push esi  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 62h  +
call sub_445230  +
add esp 0Ch +
mov [ebp+var_28] eax +
jmp loc_44482A  +
push esi  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 7Fh  +
call sub_445230  +
add esp 0Ch +
mov [ebp+var_28] eax +
jmp loc_44482A  +
push esi  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 61h  +
call sub_445230  +
add esp 0Ch +
mov [ebp+var_28] eax +
jmp loc_44482A  +
push esi  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 60h  +
call sub_445230  +
add esp 0Ch +
mov [ebp+var_28] eax +
jmp loc_44482A  +
push esi  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 5Fh  +
call sub_445230  +
add esp 0Ch +
mov [ebp+var_28] eax +
jmp loc_44482A  +
push esi  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 5Eh  +
call sub_445230  +
add esp 0Ch +
mov [ebp+var_28] eax +
jmp loc_44482A  +
push esi  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 5Dh  +
call sub_445230  +
add esp 0Ch +
mov [ebp+var_28] eax +
jmp loc_44482A  +
push esi  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 5Ch  +
call sub_445230  +
add esp 0Ch +
mov [ebp+var_28] eax +
jmp loc_44482A  +
push esi  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 5Bh  +
call sub_445230  +
add esp 0Ch +
mov [ebp+var_28] eax +
jmp loc_44482A  +
push esi  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 5Ah  +
call sub_445230  +
add esp 0Ch +
mov [ebp+var_28] eax +
jmp loc_44482A  +
push esi  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 59h  +
call sub_445230  +
add esp 0Ch +
mov [ebp+var_28] eax +
jmp loc_44482A  +
push esi  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 58h  +
call sub_445230  +
add esp 0Ch +
mov [ebp+var_28] eax +
jmp loc_44482A  +
push esi  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 57h  +
call sub_445230  +
add esp 0Ch +
mov [ebp+var_28] eax +
jmp loc_44482A  +
push esi  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 56h  +
call sub_445230  +
add esp 0Ch +
mov [ebp+var_28] eax +
jmp loc_44482A  +
mov eax [ebp+var_8] +
mov edx [eax] +
mov [ebp+var_28] edx +
jmp loc_44482A  +
mov ecx [ebp+var_8] +
mov eax [ecx] +
mov [ebp+var_28] eax +
jmp loc_44482A  +
mov edx [ebp+var_8] +
mov ecx [edx] +
mov [ebp+var_28] ecx +
jmp loc_44482A  +
mov eax [ebp+var_8] +
mov edx [eax] +
mov [ebp+var_28] edx +
jmp loc_44482A  +
mov ecx [ebp+var_8] +
mov eax [ecx-8] +
push eax  +
call sub_445410  +
pop ecx  +
mov [ebp+var_28] eax +
jmp loc_44482A  +
mov edx [ebp+var_8] +
mov ecx [edx-8] +
push ecx  +
lea ecx [esi-18h] +
mov eax [ebp+var_8] +
mov edx [eax] +
push edx  +
push ecx  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 2  +
push 55h  +
call sub_44528C  +
add esp 18h +
mov [ebp+var_28] eax +
jmp loc_44482A  +
push 0  +
mov eax [ebp+var_8] +
mov edx [eax] +
push edx  +
push esi  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 2  +
push 55h  +
call sub_44528C  +
add esp 18h +
mov [ebp+var_28] eax +
jmp loc_44482A  +
mov ecx [ebp+var_8] +
mov eax [ecx-8] +
push eax  +
call sub_445410  +
pop ecx  +
mov [ebp+var_28] eax +
jmp loc_44482A  +
mov edx [ebp+var_8] +
mov ecx [edx-8] +
push ecx  +
call sub_445410  +
pop ecx  +
mov [ebp+var_28] eax +
jmp loc_44482A  +
mov eax [ebp+var_8] +
mov edx [eax-8] +
push edx  +
call sub_445410  +
pop ecx  +
mov [ebp+var_28] eax +
jmp loc_44482A  +
mov ecx [ebp+var_8] +
mov eax [ecx-8] +
push eax  +
call sub_445410  +
pop ecx  +
mov [ebp+var_28] eax +
jmp loc_44482A  +
mov edx [ebp+var_8] +
mov ecx [edx-8] +
push ecx  +
lea ecx [esi-18h] +
mov eax [ebp+var_8] +
mov edx [eax] +
push edx  +
push ecx  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 2  +
push 54h  +
call sub_44528C  +
add esp 18h +
mov [ebp+var_28] eax +
jmp loc_44482A  +
push 0  +
mov eax [ebp+var_8] +
mov edx [eax] +
push edx  +
push esi  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 2  +
push 54h  +
call sub_44528C  +
add esp 18h +
mov [ebp+var_28] eax +
jmp loc_44482A  +
mov ecx [ebp+var_8] +
mov eax [ecx-8] +
push eax  +
call sub_445410  +
pop ecx  +
mov [ebp+var_28] eax +
jmp loc_44482A  +
mov edx [ebp+var_8] +
mov ecx [edx-8] +
push ecx  +
lea ecx [esi-18h] +
mov eax [ebp+var_8] +
mov edx [eax] +
push edx  +
push ecx  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 2  +
push 53h  +
call sub_44528C  +
add esp 18h +
mov [ebp+var_28] eax +
jmp loc_44482A  +
push 0  +
mov eax [ebp+var_8] +
mov edx [eax] +
push edx  +
push esi  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 2  +
push 53h  +
call sub_44528C  +
add esp 18h +
mov [ebp+var_28] eax +
jmp loc_44482A  +
mov ecx [ebp+var_8] +
lea edx [esi-30h] +
mov eax [ecx] +
push eax  +
push edx  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 1  +
push 0EFh  +
call sub_44528C  +
add esp 14h +
mov [ebp+var_28] eax +
jmp loc_44482A  +
mov ecx [ebp+var_8] +
lea edx [esi-30h] +
mov eax [ecx] +
push eax  +
push edx  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 1  +
push 0EEh  +
call sub_44528C  +
add esp 14h +
mov [ebp+var_28] eax +
jmp loc_44482A  +
mov ecx [ebp+var_8] +
lea edx [esi-30h] +
mov eax [ecx] +
push eax  +
push edx  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 1  +
push 0EDh  +
call sub_44528C  +
add esp 14h +
mov [ebp+var_28] eax +
jmp loc_44482A  +
mov ecx [ebp+var_8] +
lea edx [esi-30h] +
mov eax [ecx] +
push eax  +
push edx  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 1  +
push 0ECh  +
call sub_44528C  +
add esp 14h +
mov [ebp+var_28] eax +
jmp loc_44482A  +
mov ecx [ebp+var_8] +
lea edx [esi-30h] +
mov eax [ecx] +
push eax  +
push edx  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 1  +
push 0EBh  +
call sub_44528C  +
add esp 14h +
mov [ebp+var_28] eax +
jmp loc_44482A  +
mov ecx [ebp+var_8] +
lea edx [esi-30h] +
mov eax [ecx] +
push eax  +
push edx  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 1  +
push 52h  +
call sub_44528C  +
add esp 14h +
mov [ebp+var_28] eax +
jmp loc_44482A  +
mov ecx [ebp+var_8] +
lea edx [esi-30h] +
mov eax [ecx] +
push eax  +
push edx  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 1  +
push 0EAh  +
call sub_44528C  +
add esp 14h +
mov [ebp+var_28] eax +
jmp loc_44482A  +
mov ecx [ebp+var_8] +
lea edx [esi-30h] +
mov eax [ecx] +
push eax  +
push edx  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 1  +
push 0E9h  +
call sub_44528C  +
add esp 14h +
mov [ebp+var_28] eax +
jmp loc_44482A  +
mov ecx [ebp+var_8] +
lea edx [esi-30h] +
mov eax [ecx] +
push eax  +
push edx  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 1  +
push 51h  +
call sub_44528C  +
add esp 14h +
mov [ebp+var_28] eax +
jmp loc_44482A  +
mov ecx [ebp+var_8] +
lea edx [esi-30h] +
mov eax [ecx] +
push eax  +
push edx  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 1  +
push 50h  +
call sub_44528C  +
add esp 14h +
mov [ebp+var_28] eax +
jmp loc_44482A  +
mov ecx [ebp+var_8] +
lea edx [esi-30h] +
mov eax [ecx] +
push eax  +
push edx  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 1  +
push 4Fh  +
call sub_44528C  +
add esp 14h +
mov [ebp+var_28] eax +
jmp loc_44482A  +
mov ecx [ebp+var_8] +
lea edx [esi-30h] +
mov eax [ecx] +
push eax  +
push edx  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 1  +
push 0A4h  +
call sub_44528C  +
add esp 14h +
mov [ebp+var_28] eax +
jmp loc_44482A  +
mov ecx [ebp+var_8] +
lea edx [esi-30h] +
mov eax [ecx] +
push eax  +
push edx  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 1  +
push 0E7h  +
call sub_44528C  +
add esp 14h +
mov [ebp+var_28] eax +
jmp loc_44482A  +
mov ecx [ebp+var_8] +
lea edx [esi-30h] +
mov eax [ecx] +
push eax  +
push edx  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 1  +
push 0E6h  +
call sub_44528C  +
add esp 14h +
mov [ebp+var_28] eax +
jmp loc_44482A  +
mov ecx [ebp+var_8] +
lea edx [esi-30h] +
mov eax [ecx] +
push eax  +
push edx  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 1  +
push 0E5h  +
call sub_44528C  +
add esp 14h +
mov [ebp+var_28] eax +
jmp loc_44482A  +
mov ecx [ebp+var_8] +
mov eax [ecx-8] +
push eax  +
lea eax [esi-0C0h] +
mov edx [ebp+var_8] +
mov ecx [edx-20h] +
push ecx  +
push eax  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 2  +
push 0E2h  +
call sub_44528C  +
add esp 18h +
mov [ebp+var_28] eax +
jmp loc_44482A  +
mov edx [ebp+var_8] +
lea eax [esi-30h] +
mov ecx [edx] +
push ecx  +
push eax  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 1  +
push 0E1h  +
call sub_44528C  +
add esp 14h +
mov [ebp+var_28] eax +
jmp loc_44482A  +
mov edx [ebp+var_8] +
lea eax [esi-30h] +
mov ecx [edx] +
push ecx  +
push eax  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 1  +
push 0E0h  +
call sub_44528C  +
add esp 14h +
mov [ebp+var_28] eax +
jmp loc_44482A  +
mov edx [ebp+var_8] +
lea eax [esi-30h] +
mov ecx [edx] +
push ecx  +
push eax  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 1  +
push 0DFh  +
call sub_44528C  +
add esp 14h +
mov [ebp+var_28] eax +
jmp loc_44482A  +
mov edx [ebp+var_8] +
lea eax [esi-30h] +
mov ecx [edx] +
push ecx  +
push eax  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 1  +
push 0DEh  +
call sub_44528C  +
add esp 14h +
mov [ebp+var_28] eax +
jmp loc_44482A  +
mov edx [ebp+var_8] +
lea eax [esi-30h] +
mov ecx [edx] +
push ecx  +
push eax  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 1  +
push 4Eh  +
call sub_44528C  +
add esp 14h +
mov [ebp+var_28] eax +
jmp loc_44482A  +
mov edx [ebp+var_8] +
lea eax [esi-30h] +
mov ecx [edx] +
push ecx  +
push eax  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 1  +
push 4Dh  +
call sub_44528C  +
add esp 14h +
mov [ebp+var_28] eax +
jmp loc_44482A  +
mov edx [ebp+var_8] +
lea eax [esi-30h] +
mov ecx [edx] +
push ecx  +
push eax  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 1  +
push 0DDh  +
call sub_44528C  +
add esp 14h +
mov [ebp+var_28] eax +
jmp loc_44482A  +
mov edx [ebp+var_8] +
lea eax [esi-30h] +
mov ecx [edx] +
push ecx  +
push eax  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 1  +
push 4Ch  +
call sub_44528C  +
add esp 14h +
mov [ebp+var_28] eax +
jmp loc_44482A  +
mov edx [ebp+var_8] +
lea eax [esi-30h] +
mov ecx [edx] +
push ecx  +
push eax  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 1  +
push 0DCh  +
call sub_44528C  +
add esp 14h +
mov [ebp+var_28] eax +
jmp loc_44482A  +
mov edx [ebp+var_8] +
lea eax [esi-30h] +
mov ecx [edx] +
push ecx  +
push eax  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 1  +
push 0DBh  +
call sub_44528C  +
add esp 14h +
mov [ebp+var_28] eax +
jmp loc_44482A  +
mov edx [ebp+var_8] +
lea eax [esi-30h] +
mov ecx [edx] +
push ecx  +
push eax  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 1  +
push 0DBh  +
call sub_44528C  +
add esp 14h +
mov [ebp+var_28] eax +
jmp loc_44482A  +
mov edx [ebp+var_8] +
lea eax [esi-30h] +
mov ecx [edx] +
push ecx  +
push eax  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 1  +
push 0DAh  +
call sub_44528C  +
add esp 14h +
mov [ebp+var_28] eax +
jmp loc_44482A  +
push esi  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 4Bh  +
call sub_445230  +
add esp 0Ch +
mov [ebp+var_28] eax +
jmp loc_44482A  +
push esi  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 4Ah  +
call sub_445230  +
add esp 0Ch +
mov [ebp+var_28] eax +
jmp loc_44482A  +
push esi  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 49h  +
call sub_445230  +
add esp 0Ch +
mov [ebp+var_28] eax +
jmp loc_44482A  +
push esi  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 48h  +
call sub_445230  +
add esp 0Ch +
mov [ebp+var_28] eax +
jmp loc_44482A  +
push esi  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 47h  +
call sub_445230  +
add esp 0Ch +
mov [ebp+var_28] eax +
jmp loc_44482A  +
push esi  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 46h  +
call sub_445230  +
add esp 0Ch +
mov [ebp+var_28] eax +
jmp loc_44482A  +
push esi  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 45h  +
call sub_445230  +
add esp 0Ch +
mov [ebp+var_28] eax +
jmp loc_44482A  +
push esi  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 44h  +
call sub_445230  +
add esp 0Ch +
mov [ebp+var_28] eax +
jmp loc_44482A  +
push esi  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 43h  +
call sub_445230  +
add esp 0Ch +
mov [ebp+var_28] eax +
jmp loc_44482A  +
push esi  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 4Bh  +
call sub_445230  +
add esp 0Ch +
mov [ebp+var_28] eax +
jmp loc_44482A  +
push esi  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 44h  +
call sub_445230  +
add esp 0Ch +
mov [ebp+var_28] eax +
jmp loc_44482A  +
push esi  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 43h  +
call sub_445230  +
add esp 0Ch +
mov [ebp+var_28] eax +
jmp loc_44482A  +
push esi  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 42h  +
call sub_445230  +
add esp 0Ch +
mov [ebp+var_28] eax +
jmp loc_44482A  +
mov edx [ebp+var_8] +
lea eax [esi-30h] +
mov ecx [edx] +
push ecx  +
push eax  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 1  +
push 41h  +
call sub_44528C  +
add esp 14h +
mov [ebp+var_28] eax +
jmp loc_44482A  +
mov edx [ebp+var_8] +
lea eax [esi-30h] +
mov ecx [edx] +
push ecx  +
push eax  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 1  +
push 40h  +
call sub_44528C  +
add esp 14h +
mov [ebp+var_28] eax +
jmp loc_44482A  +
mov edx [ebp+var_8] +
lea eax [esi-30h] +
mov ecx [edx] +
push ecx  +
push eax  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 1  +
push 0EEh  +
call sub_44528C  +
add esp 14h +
mov [ebp+var_28] eax +
jmp loc_44482A  +
mov edx [ebp+var_8] +
lea eax [esi-30h] +
mov ecx [edx] +
push ecx  +
push eax  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 1  +
push 0E9h  +
call sub_44528C  +
add esp 14h +
mov [ebp+var_28] eax +
jmp loc_44482A  +
mov edx [ebp+var_8] +
lea eax [esi-30h] +
mov ecx [edx] +
push ecx  +
push eax  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 1  +
push 52h  +
call sub_44528C  +
add esp 14h +
mov [ebp+var_28] eax +
jmp loc_44482A  +
mov edx [ebp+var_8] +
lea eax [esi-30h] +
mov ecx [edx] +
push ecx  +
push eax  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 1  +
push 0EAh  +
call sub_44528C  +
add esp 14h +
mov [ebp+var_28] eax +
jmp loc_44482A  +
mov edx [ebp+var_8] +
lea eax [esi-30h] +
mov ecx [edx] +
push ecx  +
push eax  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 1  +
push 0A4h  +
call sub_44528C  +
add esp 14h +
mov [ebp+var_28] eax +
jmp loc_44482A  +
mov edx [ebp+var_8] +
lea eax [esi-30h] +
mov ecx [edx] +
push ecx  +
push eax  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 1  +
push 3Fh  +
call sub_44528C  +
add esp 14h +
mov [ebp+var_28] eax +
jmp loc_44482A  +
mov edx [ebp+var_8] +
lea eax [esi-30h] +
mov ecx [edx] +
push ecx  +
push eax  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 1  +
push 3Eh  +
call sub_44528C  +
add esp 14h +
mov [ebp+var_28] eax +
jmp loc_44482A  +
mov edx [ebp+var_8] +
lea eax [esi-30h] +
mov ecx [edx] +
push ecx  +
push eax  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 1  +
push 3Dh  +
call sub_44528C  +
add esp 14h +
mov [ebp+var_28] eax +
jmp loc_44482A  +
mov edx [ebp+var_8] +
lea eax [esi-30h] +
mov ecx [edx] +
push ecx  +
push eax  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 1  +
push 3Ch  +
call sub_44528C  +
add esp 14h +
mov [ebp+var_28] eax +
jmp loc_44482A  +
mov edx [ebp+var_8] +
lea eax [esi-30h] +
mov ecx [edx] +
push ecx  +
push eax  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 1  +
push 3Bh  +
call sub_44528C  +
add esp 14h +
mov [ebp+var_28] eax +
jmp loc_44482A  +
mov edx [ebp+var_8] +
lea eax [esi-30h] +
mov ecx [edx] +
push ecx  +
push eax  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 1  +
push 3Ah  +
call sub_44528C  +
add esp 14h +
mov [ebp+var_28] eax +
jmp loc_44482A  +
mov edx [ebp+var_8] +
lea eax [esi-30h] +
mov ecx [edx] +
push ecx  +
push eax  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 1  +
push 39h  +
call sub_44528C  +
add esp 14h +
mov [ebp+var_28] eax +
jmp loc_44482A  +
mov edx [ebp+var_8] +
lea eax [esi-30h] +
mov ecx [edx] +
push ecx  +
push eax  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 1  +
push 38h  +
call sub_44528C  +
add esp 14h +
mov [ebp+var_28] eax +
jmp loc_44482A  +
mov edx [ebp+var_8] +
lea eax [esi-30h] +
mov ecx [edx] +
push ecx  +
push eax  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 1  +
push 37h  +
call sub_44528C  +
add esp 14h +
mov [ebp+var_28] eax +
jmp loc_44482A  +
mov edx [ebp+var_8] +
lea eax [esi-30h] +
mov ecx [edx] +
push ecx  +
push eax  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 1  +
push 36h  +
call sub_44528C  +
add esp 14h +
mov [ebp+var_28] eax +
jmp loc_44482A  +
mov edx [ebp+var_8] +
lea eax [esi-30h] +
mov ecx [edx] +
push ecx  +
push eax  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 1  +
push 35h  +
call sub_44528C  +
add esp 14h +
mov [ebp+var_28] eax +
jmp loc_44482A  +
mov edx [ebp+var_8] +
lea eax [esi-30h] +
mov ecx [edx] +
push ecx  +
push eax  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 1  +
push 34h  +
call sub_44528C  +
add esp 14h +
mov [ebp+var_28] eax +
jmp loc_44482A  +
mov edx [ebp+var_8] +
lea eax [esi-30h] +
mov ecx [edx] +
push ecx  +
push eax  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 1  +
push 33h  +
call sub_44528C  +
add esp 14h +
mov [ebp+var_28] eax +
jmp loc_44482A  +
mov edx [ebp+var_8] +
lea eax [esi-30h] +
mov ecx [edx] +
push ecx  +
push eax  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 1  +
push 0DAh  +
call sub_44528C  +
add esp 14h +
mov [ebp+var_28] eax +
jmp loc_44482A  +
push esi  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 32h  +
call sub_445230  +
add esp 0Ch +
mov [ebp+var_28] eax +
jmp loc_44482A  +
push esi  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 32h  +
call sub_445230  +
add esp 0Ch +
mov [ebp+var_28] eax +
jmp loc_44482A  +
push esi  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 31h  +
call sub_445230  +
add esp 0Ch +
mov [ebp+var_28] eax +
jmp loc_44482A  +
push esi  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 30h  +
call sub_445230  +
add esp 0Ch +
mov [ebp+var_28] eax +
jmp loc_44482A  +
push esi  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 2Fh  +
call sub_445230  +
add esp 0Ch +
mov [ebp+var_28] eax +
jmp loc_44482A  +
push esi  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 2Eh  +
call sub_445230  +
add esp 0Ch +
mov [ebp+var_28] eax +
jmp loc_44482A  +
push esi  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 2Dh  +
call sub_445230  +
add esp 0Ch +
mov [ebp+var_28] eax +
jmp loc_44482A  +
push esi  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 2Ch  +
call sub_445230  +
add esp 0Ch +
mov [ebp+var_28] eax +
jmp loc_44482A  +
mov edx [ebp+var_8] +
lea eax [esi-30h] +
mov ecx [edx] +
push ecx  +
push eax  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 1  +
push 0EFh  +
call sub_44528C  +
add esp 14h +
mov [ebp+var_28] eax +
jmp loc_44482A  +
mov edx [ebp+var_8] +
lea eax [esi-30h] +
mov ecx [edx] +
push ecx  +
push eax  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 1  +
push 3Dh  +
call sub_44528C  +
add esp 14h +
mov [ebp+var_28] eax +
jmp loc_44482A  +
mov edx [ebp+var_8] +
lea eax [esi-30h] +
mov ecx [edx] +
push ecx  +
push eax  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 1  +
push 2Bh  +
call sub_44528C  +
add esp 14h +
mov [ebp+var_28] eax +
jmp loc_44482A  +
mov edx [ebp+var_8] +
lea eax [esi-60h] +
mov ecx [edx-8] +
push ecx  +
push eax  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 1  +
push 2Ah  +
call sub_44528C  +
add esp 14h +
mov [ebp+var_28] eax +
jmp loc_44482A  +
mov edx [ebp+var_8] +
lea eax [esi-30h] +
mov ecx [edx] +
push ecx  +
push eax  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 1  +
push 29h  +
call sub_44528C  +
add esp 14h +
mov [ebp+var_28] eax +
jmp loc_44482A  +
mov edx [ebp+var_8] +
lea eax [esi-30h] +
mov ecx [edx] +
push ecx  +
push eax  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 1  +
push 28h  +
call sub_44528C  +
add esp 14h +
mov [ebp+var_28] eax +
jmp loc_44482A  +
mov edx [ebp+var_8] +
lea eax [esi-30h] +
mov ecx [edx] +
push ecx  +
push eax  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 1  +
push 27h  +
call sub_44528C  +
add esp 14h +
mov [ebp+var_28] eax +
jmp loc_44482A  +
mov edx [ebp+var_8] +
mov ecx [edx] +
push ecx  +
lea ecx [esi-18h] +
mov eax [ebp+var_8] +
mov edx [eax-8] +
push edx  +
push ecx  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 2  +
push 26h  +
call sub_44528C  +
add esp 18h +
mov [ebp+var_28] eax +
jmp loc_44482A  +
mov eax [ebp+var_8] +
mov edx [eax] +
push edx  +
push 0  +
push esi  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 2  +
push 26h  +
call sub_44528C  +
add esp 18h +
mov [ebp+var_28] eax +
jmp loc_44482A  +
push esi  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 25h  +
call sub_445230  +
add esp 0Ch +
mov [ebp+var_28] eax +
jmp loc_44482A  +
push esi  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 24h  +
call sub_445230  +
add esp 0Ch +
mov [ebp+var_28] eax +
jmp loc_44482A  +
push esi  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 23h  +
call sub_445230  +
add esp 0Ch +
mov [ebp+var_28] eax +
jmp loc_44482A  +
push esi  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 22h  +
call sub_445230  +
add esp 0Ch +
mov [ebp+var_28] eax +
jmp loc_44482A  +
push esi  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 21h  +
call sub_445230  +
add esp 0Ch +
mov [ebp+var_28] eax +
jmp loc_44482A  +
push esi  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 20h  +
call sub_445230  +
add esp 0Ch +
mov [ebp+var_28] eax +
jmp loc_44482A  +
push esi  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 1Fh  +
call sub_445230  +
add esp 0Ch +
mov [ebp+var_28] eax +
jmp loc_44482A  +
push esi  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 1Eh  +
call sub_445230  +
add esp 0Ch +
mov [ebp+var_28] eax +
jmp loc_44482A  +
push esi  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 1Dh  +
call sub_445230  +
add esp 0Ch +
mov [ebp+var_28] eax +
jmp loc_44482A  +
push esi  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 1Ch  +
call sub_445230  +
add esp 0Ch +
mov [ebp+var_28] eax +
jmp loc_44482A  +
push esi  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 1Bh  +
call sub_445230  +
add esp 0Ch +
mov [ebp+var_28] eax +
jmp loc_44482A  +
push esi  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 1Ah  +
call sub_445230  +
add esp 0Ch +
mov [ebp+var_28] eax +
jmp loc_44482A  +
push esi  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 19h  +
call sub_445230  +
add esp 0Ch +
mov [ebp+var_28] eax +
jmp loc_44482A  +
push esi  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 18h  +
call sub_445230  +
add esp 0Ch +
mov [ebp+var_28] eax +
jmp loc_44482A  +
push esi  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 17h  +
call sub_445230  +
add esp 0Ch +
mov [ebp+var_28] eax +
jmp loc_44482A  +
push esi  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 16h  +
call sub_445230  +
add esp 0Ch +
mov [ebp+var_28] eax +
jmp loc_44482A  +
push esi  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 15h  +
call sub_445230  +
add esp 0Ch +
mov [ebp+var_28] eax +
jmp loc_44482A  +
push esi  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 14h  +
call sub_445230  +
add esp 0Ch +
mov [ebp+var_28] eax +
jmp loc_44482A  +
push esi  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 13h  +
call sub_445230  +
add esp 0Ch +
mov [ebp+var_28] eax +
jmp loc_44482A  +
push esi  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 12h  +
call sub_445230  +
add esp 0Ch +
mov [ebp+var_28] eax +
jmp loc_44482A  +
push esi  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 11h  +
call sub_445230  +
add esp 0Ch +
mov [ebp+var_28] eax +
jmp loc_44482A  +
push esi  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 10h  +
call sub_445230  +
add esp 0Ch +
mov [ebp+var_28] eax +
jmp loc_44482A  +
push esi  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 0Fh  +
call sub_445230  +
add esp 0Ch +
mov [ebp+var_28] eax +
jmp loc_44482A  +
push esi  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 0Eh  +
call sub_445230  +
add esp 0Ch +
mov [ebp+var_28] eax +
jmp loc_44482A  +
push esi  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 0Dh  +
call sub_445230  +
add esp 0Ch +
mov [ebp+var_28] eax +
jmp loc_44482A  +
push esi  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 0Ch  +
call sub_445230  +
add esp 0Ch +
mov [ebp+var_28] eax +
jmp loc_44482A  +
push esi  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 0Bh  +
call sub_445230  +
add esp 0Ch +
mov [ebp+var_28] eax +
jmp loc_44482A  +
push esi  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 0Ah  +
call sub_445230  +
add esp 0Ch +
mov [ebp+var_28] eax +
jmp loc_44482A  +
push esi  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 9  +
call sub_445230  +
add esp 0Ch +
mov [ebp+var_28] eax +
jmp loc_44482A  +
push esi  +
mov ecx [ebp+var_8] +
mov eax [ecx] +
push eax  +
call sub_4451D8  +
pop ecx  +
push eax  +
push 8  +
call sub_445230  +
add esp 0Ch +
mov [ebp+var_28] eax +
jmp loc_44482A  +
push esi  +
mov edx [ebp+var_8] +
push dword ptr [edx+4]  +
push dword ptr [edx]  +
call sub_445208  +
add esp 8 +
push eax  +
push 7  +
call sub_445230  +
add esp 0Ch +
mov [ebp+var_28] eax +
jmp loc_44482A  +
push esi  +
mov eax [ebp+var_8] +
mov dl [eax] +
push edx  +
call sub_445180  +
pop ecx  +
push eax  +
push 6  +
call sub_445230  +
add esp 0Ch +
mov [ebp+var_28] eax +
jmp loc_44482A  +
push esi  +
mov ecx [ebp+var_8] +
mov eax [ecx] +
push eax  +
call sub_4451D8  +
pop ecx  +
push eax  +
push 5  +
call sub_445230  +
add esp 0Ch +
mov [ebp+var_28] eax +
jmp loc_44482A  +
mov edx [ebp+var_8] +
mov ecx [edx] +
mov [ebp+var_28] ecx +
jmp loc_44482A  +
mov eax [ebp+var_8] +
mov edx [eax-8] +
push edx  +
call sub_445410  +
pop ecx  +
mov [ebp+var_28] eax +
jmp loc_44482A  +
mov ecx [ebp+var_8] +
mov eax [ecx-8] +
push eax  +
lea eax [esi-18h] +
mov edx [ebp+var_8] +
mov ecx [edx] +
push ecx  +
push eax  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 2  +
push 4  +
call sub_44528C  +
add esp 18h +
mov [ebp+var_28] eax +
jmp loc_44482A  +
push 0  +
mov edx [ebp+var_8] +
mov ecx [edx] +
push ecx  +
push esi  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 2  +
push 4  +
call sub_44528C  +
add esp 18h +
mov [ebp+var_28] eax +
jmp loc_44482A  +
mov eax [ebp+var_8] +
mov edx [eax] +
mov [ebp+var_28] edx +
jmp loc_44482A  +
mov ecx [ebp+var_8] +
mov eax [ecx] +
push eax  +
lea eax [esi-30h] +
mov edx [ebp+var_8] +
mov ecx [edx-10h] +
push ecx  +
push eax  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 2  +
push 3  +
call sub_44528C  +
add esp 18h +
mov [ebp+var_28] eax +
jmp loc_44482A  +
mov edx [ebp+var_8] +
mov ecx [edx] +
push ecx  +
lea ecx [esi-30h] +
mov eax [ebp+var_8] +
mov edx [eax-10h] +
push edx  +
push ecx  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 2  +
push 2  +
call sub_44528C  +
add esp 18h +
mov [ebp+var_28] eax +
jmp loc_44482A  +
mov eax [ebp+var_8] +
lea ecx [esi-30h] +
mov edx [eax] +
push edx  +
push ecx  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 1  +
push 1  +
call sub_44528C  +
add esp 14h +
mov [ebp+var_28] eax +
jmp loc_44482A  +
mov eax [ebp+var_8] +
mov edx [eax-8] +
push edx  +
lea edx [esi-60h] +
mov ecx [ebp+var_8] +
mov eax [ecx-18h] +
push eax  +
push edx  +
push 0  +
call sub_4451B8  +
pop ecx  +
push eax  +
push 2  +
push 2  +
call sub_44528C  +
add esp 18h +
mov [ebp+var_28] eax +
jmp loc_44482A  +
push esi  +
mov ecx [ebp+var_8] +
mov eax [ecx] +
push eax  +
call sub_4451D8  +
pop ecx  +
push eax  +
push 0  +
call sub_445230  +
add esp 0Ch +
mov [ebp+var_28] eax +
jmp loc_44482A  +
push esi  +
mov edx [ebp+var_8] +
mov ecx [edx] +
push ecx  +
call sub_4451D8  +
pop ecx  +
push eax  +
push 8  +
call sub_445230  +
add esp 0Ch +
mov [ebp+var_28] eax +
jmp loc_44482A  +
push esi  +
mov eax [ebp+var_8] +
push dword ptr [eax+4]  +
push dword ptr [eax]  +
call sub_445208  +
add esp 8 +
push eax  +
push 7  +
call sub_445230  +
add esp 0Ch +
mov [ebp+var_28] eax +
jmp loc_44482A  +
push esi  +
mov ecx [ebp+var_8] +
mov eax [ecx] +
push eax  +
call sub_4451D8  +
pop ecx  +
push eax  +
push 5  +
call sub_445230  +
add esp 0Ch +
mov [ebp+var_28] eax +
mov edx [ebp+var_2C] +
shl edx 3 +
sub [ebp+var_8] edx +
mov eax [ebp+var_2C] +
mov ecx [ebp+var_2C] +
shl eax 3 +
add ecx ecx +
sub edi ecx +
lea eax [eax+eax*2] +
sub esi eax +
cmp dword_4EC84C 0 +
jz loc_4448A2  +
mov edx [ebp+var_14] +
add edx 0FFFFFFFEh +
mov [ebp+var_3C] edx +
push offset aStateStackNow  +
push offset stream  +
call _fprintf  +
add esp 8 +
cmp edi [ebp+var_3C] +
jz loc_444890  +
add [ebp+var_3C] 2 +
mov ecx [ebp+var_3C] +
movsx eax word ptr [ecx] +
push eax  +
push offset aD  +
push offset stream  +
call _fprintf  +
add esp 0Ch +
cmp edi [ebp+var_3C] +
jnz loc_44486E  +
push offset asc_4E596D  +
push offset stream  +
call _fprintf  +
add esp 8 +
add [ebp+var_8] 8 +
mov edx [ebp+var_8] +
mov ecx [ebp+var_28] +
mov [edx] ecx +
mov ecx [ebp+var_24] +
mov [edx+4] ecx +
add esi 18h +
cmp [ebp+var_2C] 0 +
jnz loc_4448E1  +
mov eax dword_4EC834 +
mov [esi+4] eax +
mov edx dword_4EC838 +
mov [esi+8] edx +
mov ecx [esi-0Ch] +
mov [esi+0Ch] ecx +
mov eax [esi-8] +
mov [esi+10h] eax +
xor edx edx +
mov [esi+14h] edx +
jmp loc_4448F5  +
mov eax [ebp+var_2C] +
lea eax [eax+eax*2] +
mov edx [esi+eax*8-0Ch] +
mov [esi+0Ch] edx +
mov ecx [esi+eax*8-8] +
mov [esi+10h] ecx +
movsx eax word_4DFF3C[ebx*2] +
mov ebx eax +
movsx ecx word ptr [edi] +
movsx edx word_4E0CD8[ebx*2] +
add edx ecx +
mov [ebp+var_4] edx +
cmp [ebp+var_4] 0 +
jl loc_444941  +
cmp [ebp+var_4] 5D7h +
jg loc_444941  +
mov eax [ebp+var_4] +
mov dx word_4E1AD8[eax*2] +
cmp dx [edi] +
jnz loc_444941  +
mov ecx [ebp+var_4] +
movsx eax word_4E0F28[ecx*2] +
mov [ebp+var_4] eax +
jmp loc_44135F  +
movsx edx word_4E075A[ebx*2] +
mov [ebp+var_4] edx +
jmp loc_44135F  +
cmp [ebp+var_C] 0 +
jnz loc_4449EA  +
inc dword_4EC848  +
push offset aParseError  +
mov ecx s +
push ecx  +
call _strlen  +
pop ecx  +
cmp eax 30h +
jnb loc_44497F  +
mov eax s +
jmp loc_444984  +
mov eax offset a?_2 +
push eax  +
cmp dword_4EC824 0 +
jge loc_444995  +
mov edx offset a?_0 +
jmp loc_4449BD  +
cmp dword_4EC824 1ECh +
ja loc_4449B1  +
mov ecx dword_4EC824 +
movsx eax word_4DEA30[ecx*2] +
jmp loc_4449B6  +
mov eax 128h +
mov edx off_4DE58C[eax*4] +
push edx  +
push offset aUnexpectedSS_0  +
push offset byte_4EC424  +
call _sprintf  +
add esp 14h +
push offset byte_4EC424  +
mov ecx dword_4EAE5C +
push ecx  +
mov eax dword_4EAE58 +
push eax  +
call sub_444EC0  +
add esp 0Ch +
cmp [ebp+var_C] 3 +
jnz loc_444A34  +
mov eax dword_4EC824 +
test eax eax +
jnz loc_444A03  +
mov eax 1 +
jmp loc_444B70  +
cmp dword_4EC84C 0 +
jz loc_444A2A  +
mov edx [ebp+var_10] +
mov ecx off_4DFA98[edx*4] +
push ecx  +
push eax  +
push offset aDiscardingToke  +
push offset stream  +
call _fprintf  +
add esp 10h +
mov dword_4EC824 0FFFFFFFEh +
mov [ebp+var_C] 3 +
jmp loc_444AB0  +
cmp edi [ebp+var_14] +
jnz loc_444A4C  +
mov eax 1 +
jmp loc_444B70  +
sub [ebp+var_8] 8 +
sub edi 2 +
sub esi 18h +
cmp dword_4EC84C 0 +
movsx edx word ptr [edi] +
mov [ebp+var_4] edx +
jz loc_444AB0  +
mov ebx [ebp+var_14] +
add ebx 0FFFFFFFEh +
push offset aErrorStateStac  +
push offset stream  +
call _fprintf  +
add esp 8 +
cmp edi ebx +
jz loc_444A9E  +
add ebx 2 +
movsx eax word ptr [ebx] +
push eax  +
push offset aD_0  +
push offset stream  +
call _fprintf  +
add esp 0Ch +
cmp edi ebx +
jnz loc_444A81  +
push offset asc_4E59D1  +
push offset stream  +
call _fprintf  +
add esp 8 +
mov edx [ebp+var_4] +
movsx ebx word_4E09AA[edx*2] +
cmp ebx 0FFFF8000h +
jz loc_444A3D  +
inc ebx  +
test ebx ebx +
jl loc_444A3D  +
cmp ebx 5D7h +
jg loc_444A3D  +
cmp word_4E1AD8[ebx*2] 1 +
jnz loc_444A3D  +
movsx eax word_4E0F28[ebx*2] +
mov ebx eax +
test ebx ebx +
jge loc_444B0C  +
cmp ebx 0FFFF8000h +
jz loc_444A3D  +
neg ebx  +
jmp loc_441719  +
test ebx ebx +
jz loc_444A3D  +
cmp ebx 28Eh +
jnz loc_444B20  +
xor eax eax +
jmp loc_444B70  +
cmp dword_4EC84C 0 +
jz loc_444B3B  +
push offset aShiftingErrorT  +
push offset stream  +
call _fprintf  +
add esp 8 +
add [ebp+var_8] 8 +
mov edx [ebp+var_8] +
mov ecx dword ptr dbl_4EC828 +
add esi 18h +
mov [edx] ecx +
mov ecx dword ptr dbl_4EC828+4 +
mov [edx+4] ecx +
push esi  +
push edi  +
mov edi esi +
mov esi offset unk_4EC830 +
mov ecx 6 +
movs   +
pop edi  +
pop esi  +
mov [ebp+var_4] ebx +
jmp loc_44135F  +
mov esp ebp +
mov edi [ebp+var_1ADC] +
mov esi [ebp+var_1AD8] +
mov ebx [ebp+var_1AD4] +
pop ebp  +
retn   +
***
xor eax eax +
mov dword_4EC41C eax +
call sub_429E68  +
mov dword_4EAE58 1 +
xor edx edx +
mov dword_4EAE5C edx +
call sub_4412E4  +
mov eax dword_4EC41C +
retn   +
***
push ebx  +
push esi  +
push edi  +
mov ebx [ebp+arg_0] +
mov esi ebx +
jmp loc_444BC2  +
inc esi  +
mov al [esi] +
test al al +
jz loc_444BCF  +
cmp al 22h +
jnz loc_444BC1  +
jmp loc_444BCF  +
inc ebx  +
cmp byte ptr [ebx] 0 +
jz loc_444BDE  +
mov al [ebx] +
cmp al 30h +
jl loc_444BCE  +
cmp al 39h +
jg loc_444BCE  +
cmp esi ebx +
jbe loc_444BF6  +
push ebx  +
call _atoi  +
mov dword_4EAE58 eax +
xor edx edx +
mov dword_4EAE5C edx +
pop ecx  +
cmp byte ptr [esi] 0 +
jz loc_444C34  +
inc esi  +
mov ebx esi +
jmp loc_444C01  +
inc ebx  +
mov al [ebx] +
test al al +
jz loc_444C0B  +
cmp al 22h +
jnz loc_444C00  +
mov byte ptr [ebx] 0 +
xor eax eax +
push esi  +
mov edi esi +
or ecx 0FFFFFFFFh +
mov esi offset dest +
scas   +
not ecx  +
sub edi ecx +
mov edx ecx +
xchg esi edi +
shr ecx 2 +
mov eax edi +
movs   +
mov ecx edx +
and ecx 3 +
movs   +
pop esi  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
push ebx  +
mov edx [ebp+arg_0] +
mov eax edx +
jmp loc_444D9D  +
cmp cl 5Ch +
jnz loc_444D97  +
inc eax  +
movsx ecx byte ptr [eax] +
cmp ecx 6Eh +
jg loc_444C7C  +
jz loc_444CB0  +
add ecx 0FFFFFFD0h +
sub ecx 8 +
jb loc_444D53  +
sub ecx 29h +
jz loc_444C95  +
dec ecx  +
jz loc_444C9E  +
sub ecx 4 +
jz loc_444CA7  +
jmp loc_444D90  +
sub ecx 72h +
jz loc_444CB9  +
sub ecx 2 +
jz loc_444CC2  +
sub ecx 2 +
jz loc_444CCB  +
sub ecx 2 +
jz loc_444CD4  +
jmp loc_444D90  +
mov byte ptr [edx] 7 +
inc edx  +
jmp loc_444D9C  +
mov byte ptr [edx] 8 +
inc edx  +
jmp loc_444D9C  +
mov byte ptr [edx] 0Ch +
inc edx  +
jmp loc_444D9C  +
mov byte ptr [edx] 0Ah +
inc edx  +
jmp loc_444D9C  +
mov byte ptr [edx] 0Dh +
inc edx  +
jmp loc_444D9C  +
mov byte ptr [edx] 9 +
inc edx  +
jmp loc_444D9C  +
mov byte ptr [edx] 0Bh +
inc edx  +
jmp loc_444D9C  +
inc eax  +
xor ecx ecx +
jmp loc_444D29  +
mov bl [eax] +
cmp bl 30h +
jl loc_444CF2  +
cmp bl 39h +
jg loc_444CF2  +
shl ecx 4 +
movsx ebx bl +
add ecx ebx +
sub ecx 30h +
jmp loc_444D28  +
mov bl [eax] +
cmp bl 41h +
jl loc_444D0E  +
cmp bl 46h +
jg loc_444D0E  +
shl ecx 4 +
movsx ebx bl +
add ecx ebx +
sub ecx 41h +
add ecx 0Ah +
jmp loc_444D28  +
mov bl [eax] +
cmp bl 61h +
jl loc_444D28  +
cmp bl 66h +
jg loc_444D28  +
shl ecx 4 +
movsx ebx bl +
add ecx ebx +
sub ecx 61h +
add ecx 0Ah +
inc eax  +
mov bl [eax] +
cmp bl 30h +
jl loc_444D35  +
cmp bl 39h +
jle loc_444CD9  +
mov bl [eax] +
cmp bl 41h +
jl loc_444D41  +
cmp bl 46h +
jle loc_444CD9  +
mov bl [eax] +
cmp bl 61h +
jl loc_444D4D  +
cmp bl 66h +
jle loc_444CD9  +
dec eax  +
mov [edx] cl +
inc edx  +
jmp loc_444D9C  +
movsx ecx byte ptr [eax] +
sub ecx 30h +
inc eax  +
mov bl [eax] +
cmp bl 30h +
jl loc_444D8A  +
cmp bl 37h +
jg loc_444D8A  +
movsx ebx bl +
inc eax  +
shl ecx 3 +
add ecx ebx +
mov bl [eax] +
sub ecx 30h +
cmp bl 30h +
jl loc_444D8A  +
cmp bl 37h +
jg loc_444D8A  +
shl ecx 3 +
movsx ebx bl +
add ecx ebx +
sub ecx 30h +
inc eax  +
dec eax  +
mov [edx] cl +
inc edx  +
jmp loc_444D9C  +
mov cl [eax] +
mov [edx] cl +
inc edx  +
jmp loc_444D9C  +
mov cl [eax] +
mov [edx] cl +
inc edx  +
inc eax  +
mov cl [eax] +
test cl cl +
jnz loc_444C4A  +
mov byte ptr [edx] 0 +
pop ebx  +
pop ebp  +
retn   +
***
push esi  +
push ebx  +
push esi  +
push edi  +
mov esi offset byte_4EC850 +
mov eax [ebp+arg_8] +
mov edi eax +
xor eax eax +
or ecx 0FFFFFFFFh +
scas   +
not ecx  +
sub edi ecx +
mov edx ecx +
xchg esi edi +
shr ecx 2 +
mov eax edi +
movs   +
mov ecx edx +
and ecx 3 +
movs   +
movsx eax byte_4EC850 +
push eax  +
call _islower  +
pop ecx  +
test eax eax +
jz loc_444F12  +
movsx ebx byte_4EC850 +
push ebx  +
call __ltoupper  +
pop ecx  +
mov byte_4EC850 al +
push offset byte_4EC850  +
mov eax [ebp+arg_4] +
push eax  +
mov edx [ebp+arg_0] +
push edx  +
push offset dest  +
push offset aSyntaxErrorSLD  +
push offset stream  +
call _fprintf  +
add esp 18h +
inc dword_4EC41C  +
mov ecx dword_4EC41C +
cmp ecx dword_4D4B08 +
jle loc_444F55  +
push offset aTooManySyntaxE  +
call sub_444FD8  +
pop ecx  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov esi offset byte_4EC850 +
mov eax [ebp+10h] +
mov edi eax +
xor eax eax +
or ecx 0FFFFFFFFh +
scas   +
not ecx  +
sub edi ecx +
mov edx ecx +
xchg esi edi +
shr ecx 2 +
mov eax edi +
movs   +
mov ecx edx +
and ecx 3 +
movs   +
movsx eax byte_4EC850 +
push eax  +
call _islower  +
pop ecx  +
test eax eax +
jz loc_444FAE  +
movsx ebx byte_4EC850 +
push ebx  +
call __ltoupper  +
pop ecx  +
mov byte_4EC850 al +
push offset byte_4EC850  +
mov eax [ebp+0Ch] +
push eax  +
mov edx [ebp+8] +
push edx  +
push offset dest  +
push offset aWarningSLDPDS  +
push offset stream  +
call _fprintf  +
add esp 18h +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
mov eax [ebp+arg_0] +
push eax  +
push offset aFatalErrorS_0  +
push offset stream  +
call _fprintf  +
add esp 0Ch +
push offset aAborted_1  +
call sub_4025CC  +
pop ecx  +
push 0FFFFFFFFh  +
call sub_42A918  +
pop ecx  +
pop ebp  +
retn   +
***
shl eax 3 +
lea eax [eax+eax*4] +
push eax  +
call _malloc  +
pop ecx  +
mov ebx eax +
test ebx ebx +
jnz loc_44502C  +
push offset aMemoryExhau_10  +
call sub_444FD8  +
pop ecx  +
mov eax ebx +
mov edx dword_4E268C +
mov [eax] edx +
mov eax ebx +
mov dword_4E268C eax +
mov edx dword_4E268C +
add edx 4 +
mov dword_4F06D4 edx +
mov dword_4F06D0 edx +
mov dword_4F06D8 eax +
mov eax dword_4E2690 +
shl eax 3 +
lea eax [eax+eax*4] +
add eax 0FFFFFFB0h +
add dword_4F06D8 eax +
mov eax dword_4F06D4 +
test al 7 +
jz loc_44507F  +
add eax 7 +
and eax 0FFFFFFF8h +
mov dword_4F06D4 eax +
pop ebx  +
retn   +
***
push ebx  +
push esi  +
push edi  +
mov edi offset dword_4F06D4 +
cmp dword_4E268C 0 +
jnz loc_44509D  +
call sub_445008  +
mov ebx [ebp+arg_0] +
test bl 7 +
jz loc_4450AB  +
add ebx 7 +
and ebx 0FFFFFFF8h +
mov esi [edi] +
mov eax [edi] +
add eax ebx +
mov [edi] eax +
cmp eax dword_4F06D8 +
jbe loc_4450DB  +
call sub_445008  +
mov esi [edi] +
mov eax [edi] +
add eax ebx +
mov [edi] eax +
cmp eax dword_4F06D8 +
jbe loc_4450DB  +
push offset aSyntaxTreeNode  +
call sub_444FD8  +
pop ecx  +
mov eax esi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
mov eax [ebp+arg_0] +
shl eax 2 +
add eax 28h +
push eax  +
call sub_445084  +
pop ecx  +
pop ebp  +
retn   +
***
mov eax [ebp+arg_0] +
push eax  +
call sub_445084  +
pop ecx  +
pop ebp  +
retn   +
***
test eax eax +
jz loc_445125  +
mov ebx [eax] +
push eax  +
call _free  +
pop ecx  +
mov eax ebx +
test eax eax +
jnz loc_445116  +
xor edx edx +
xor ecx ecx +
mov dword_4E268C edx +
mov dword_4E2694 ecx +
pop ebx  +
retn   +
***
mov eax [ebp+arg_0] +
mov edx dword_4E2694 +
mov [eax] edx +
mov dword_4E2694 eax +
pop ebp  +
retn   +
***
jnz loc_44516E  +
call sub_445150  +
mov dl [ebp+arg_0] +
mov [eax] dl +
pop ebp  +
retn   +
***
push ebp  +
mov ebp esp +
call sub_445150  +
mov dx [ebp+8] +
mov [eax] dx +
pop ebp  +
retn   +
***
push ebp  +
mov ebp esp +
call sub_445150  +
mov dx [ebp+8] +
mov [eax] dx +
pop ebp  +
retn   +
***
call sub_445150  +
mov edx [ebp+arg_0] +
mov [eax] edx +
pop ebp  +
retn   +
***
push ebp  +
mov ebp esp +
call sub_445150  +
mov edx [ebp+8] +
mov [eax] edx +
pop ebp  +
retn   +
***
call sub_445150  +
mov edx [ebp+arg_0] +
mov [eax] edx +
pop ebp  +
retn   +
***
push ebp  +
mov ebp esp +
call sub_445150  +
mov edx [ebp+8] +
mov [eax] edx +
pop ebp  +
retn   +
***
push ebp  +
mov ebp esp +
call sub_445150  +
mov edx [ebp+8] +
mov [eax] edx +
pop ebp  +
retn   +
***
call sub_445150  +
mov edx [ebp+arg_0] +
mov [eax] edx +
mov edx [ebp+arg_4] +
mov [eax+4] edx +
pop ebp  +
retn   +
***
push ebp  +
mov ebp esp +
call sub_445150  +
mov edx [ebp+8] +
mov [eax] edx +
pop ebp  +
retn   +
***
push ebx  +
push esi  +
push edi  +
mov esi [ebp+arg_8] +
mov edi [ebp+arg_4] +
push 1  +
call sub_4450E4  +
pop ecx  +
mov ebx eax +
push 8  +
lea eax [ebx+18h] +
push eax  +
push edi  +
call sub_4412C0  +
add esp 0Ch +
push edi  +
call sub_445138  +
pop ecx  +
mov edx [ebp+arg_0] +
mov [ebx] edx +
mov ecx [esi+4] +
mov [ebx+4] ecx +
mov eax [esi+8] +
mov [ebx+8] eax +
xor eax eax +
mov edx [esi+0Ch] +
mov [ebx+0Ch] edx +
xor edx edx +
mov ecx [esi+10h] +
mov [ebx+10h] ecx +
mov [ebx+14h] eax +
mov eax ebx +
mov [ebx+20h] edx +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
push ecx  +
add esp 0FFFFFFF4h +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
test edi edi +
jnz loc_445367  +
mov eax edi +
jmp loc_445407  +
mov edx [edi] +
push edx  +
call sub_445450  +
pop ecx  +
mov [ebp+var_8] eax +
cmp [ebp+var_8] 1 +
jge loc_445380  +
mov ecx 1 +
jmp loc_445383  +
mov ecx [ebp+var_8] +
push ecx  +
call sub_4450E4  +
pop ecx  +
mov esi eax +
push 8  +
lea eax [esi+18h] +
push eax  +
lea edx [edi+18h] +
push edx  +
call sub_4412C0  +
mov ecx [edi] +
add esp 0Ch +
mov [esi] ecx +
lea ebx [esi+20h] +
mov eax [edi+4] +
mov [esi+4] eax +
mov edx [edi+8] +
mov [esi+8] edx +
xor edx edx +
mov ecx [edi+0Ch] +
mov [esi+0Ch] ecx +
xor ecx ecx +
mov eax [edi+10h] +
mov [esi+10h] eax +
mov [esi+14h] edx +
mov [esi+20h] ecx +
lea eax [edi+20h] +
mov [ebp+var_4] 1 +
mov [ebp+var_C] eax +
mov edx [ebp+var_4] +
cmp edx [ebp+var_8] +
jg loc_445405  +
mov ecx [ebp+var_C] +
mov eax [ecx] +
push eax  +
call sub_445350  +
pop ecx  +
mov edi eax +
mov [ebx] edi +
test edi edi +
jz loc_4453F3  +
mov [edi+14h] esi +
inc [ebp+var_4]  +
add ebx 4 +
add [ebp+var_C] 4 +
mov eax [ebp+var_4] +
cmp eax [ebp+var_8] +
jle loc_4453DC  +
mov eax esi +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
xor edx edx +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_445431  +
mov ecx [eax+24h] +
mov [eax+24h] edx +
test edx edx +
jz loc_445429  +
mov [edx+14h] eax +
mov edx eax +
mov eax ecx +
test eax eax +
jnz loc_44541C  +
test edx edx +
jz loc_44543A  +
xor ecx ecx +
mov [edx+14h] ecx +
mov eax edx +
pop ebp  +
retn   +
***
mov eax [ebp+arg_0] +
mov eax off_4DDD9C[eax*4] +
pop ebp  +
retn   +
***
mov eax [ebp+arg_0] +
mov eax dword_4DE194[eax*4] +
pop ebp  +
retn   +
***
add esp 0FFFFFFD8h +
test dl dl +
push ebx  +
push esi  +
mov [ebp+var_8] dl +
jle loc_445474  +
call __ClassCreate  +
mov esi ecx +
mov ebx edx +
mov [ebp+var_4] eax +
mov eax offset stru_4E5AEC +
call @__InitExceptBlockLDTC  +
mov [ebp+var_18] 8 +
mov ecx esi +
xor edx edx +
mov eax [ebp+var_4] +
call sub_401FF8  +
add [ebp+var_C] 10h +
mov edx [ebp+var_28] +
mov large fs:0 edx +
mov eax [ebp+var_4] +
test bl bl +
jz loc_4454B1  +
call __AfterConstruction  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
add esp 0FFFFFFD8h +
push ebx  +
mov ebx eax +
mov eax offset stru_4E5B10 +
call @__InitExceptBlockLDTC  +
push 0Ah  +
push 0  +
push 0  +
xor edx edx +
mov [ebp+var_18] 8 +
mov [ebp+var_4] edx +
lea edx [ebp+var_4] +
inc [ebp+var_C]  +
mov eax [ebx+2F4h] +
call @TControl@GetText$qqrv  +
cmp [ebp+var_4] 0 +
jz loc_445514  +
mov ecx [ebp+var_4] +
jmp loc_445519  +
mov ecx offset File +
mov eax off_4EA6C8 +
push ecx  +
push offset Operation  +
mov edx [eax] +
mov eax [edx+30h] +
push eax  +
call ShellExecuteA  +
dec [ebp+var_C]  +
lea eax [ebp+var_4] +
mov edx 2 +
call sub_4CA490  +
mov ecx [ebp+var_28] +
mov large fs:0 ecx +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
add esp 0FFFFFFDCh +
push ebx  +
push esi  +
call __BeforeDestruction  +
mov ebx edx +
mov esi eax +
mov eax offset stru_4E5CBC +
call @__InitExceptBlockLDTC  +
test bl bl +
jl loc_4455F4  +
sub [ebp+var_8] 10h +
xor edx edx +
mov eax esi +
call sub_403AE4  +
mov edx [ebp+var_24] +
mov large fs:0 edx +
test bl bl +
jle loc_445609  +
mov eax esi +
call __ClassDestroy  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
sub dword_4F16E0 1 +
add dword_4F16E0 1 +
add esp 0FFFFFFD8h +
test dl dl +
push ebx  +
push esi  +
mov [ebp+var_8] dl +
jle loc_445644  +
call __ClassCreate  +
mov esi ecx +
mov ebx edx +
mov [ebp+var_4] eax +
mov eax offset stru_4E5CD4 +
call @__InitExceptBlockLDTC  +
mov [ebp+var_18] 8 +
mov ecx esi +
xor edx edx +
mov eax [ebp+var_4] +
call sub_401FF8  +
add [ebp+var_C] 10h +
mov edx [ebp+var_28] +
mov large fs:0 edx +
mov eax [ebp+var_4] +
test bl bl +
jz loc_445681  +
call __AfterConstruction  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
add esp 0FFFFFFDCh +
push ebx  +
push esi  +
call __BeforeDestruction  +
mov ebx edx +
mov esi eax +
mov eax offset stru_4E5E58 +
call @__InitExceptBlockLDTC  +
test bl bl +
jl loc_445740  +
sub [ebp+var_8] 10h +
xor edx edx +
mov eax esi +
call sub_403AE4  +
mov edx [ebp+var_24] +
mov large fs:0 edx +
test bl bl +
jle loc_445755  +
mov eax esi +
call __ClassDestroy  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
sub dword_4F16E8 1 +
add dword_4F16E8 1 +
add esp 0FFFFFFD8h +
test dl dl +
push ebx  +
push esi  +
mov [ebp+var_8] dl +
jle loc_445790  +
call __ClassCreate  +
mov esi ecx +
mov ebx edx +
mov [ebp+var_4] eax +
mov eax offset stru_4E5E70 +
call @__InitExceptBlockLDTC  +
mov [ebp+var_18] 8 +
mov ecx esi +
xor edx edx +
mov eax [ebp+var_4] +
call sub_401FF8  +
add [ebp+var_C] 10h +
mov edx [ebp+var_28] +
mov large fs:0 edx +
mov eax [ebp+var_4] +
test bl bl +
jz loc_4457CD  +
call __AfterConstruction  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
add esp 0FFFFFFDCh +
push ebx  +
push esi  +
call __BeforeDestruction  +
mov ebx edx +
mov esi eax +
mov eax offset stru_4E5FE4 +
call @__InitExceptBlockLDTC  +
test bl bl +
jl loc_44588C  +
sub [ebp+var_8] 10h +
xor edx edx +
mov eax esi +
call sub_403AE4  +
mov edx [ebp+var_24] +
mov large fs:0 edx +
test bl bl +
jle loc_4458A1  +
mov eax esi +
call __ClassDestroy  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
sub dword_4F16F0 1 +
add dword_4F16F0 1 +
jb loc_4458C6  +
pop ebp  +
retn   +
pop ebp  +
retn   +
***
test dl dl +
jz loc_445A7A  +
add esp 0FFFFFFF0h +
call unknown_libname_535  +
mov ebx edx +
mov esi eax +
xor edx edx +
mov eax esi +
call @System@TObject@$bctr$qqrv  +
mov eax esi +
test bl bl +
jz loc_445A9C  +
call sub_4BABC8  +
pop large dword ptr fs:0  +
add esp 0Ch +
mov eax esi +
pop esi  +
pop ebx  +
retn   +
***
push 0  +
push ebx  +
push esi  +
push edi  +
mov esi ecx +
mov edi edx +
mov ebx eax +
xor eax eax +
push ebp  +
push offset loc_445B24  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov eax esi +
call unknown_libname_540  +
test edi edi +
jnz loc_445ADE  +
cmp dword ptr [ebx+1Ch] 0 +
jz loc_445ADE  +
lea edx [ebp+var_4] +
mov eax [ebx+1Ch] +
mov ecx [eax] +
call dword ptr [ecx+10h]  +
jmp loc_445AE8  +
lea eax [ebp+var_4] +
mov edx edi +
call unknown_libname_543  +
cmp [ebp+var_4] 0 +
jnz loc_445B04  +
cmp dword_4F16F4 0 +
jz loc_445B04  +
lea edx [ebp+var_4] +
mov eax dword_4F16F4 +
mov ecx [eax] +
call dword ptr [ecx+20h]  +
mov eax esi +
mov edx [ebp+var_4] +
call unknown_libname_542  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_445B2B  +
lea eax [ebp+var_4] +
call unknown_libname_540  +
retn   +
jmp unknown_libname_539  +
jmp loc_445B1B  +
pop edi  +
pop esi  +
pop ebx  +
pop ecx  +
pop ebp  +
retn   +
***
mov eax ebx +
call @WinHelpViewer@_16400  +
cmp dword ptr [ebx+1Ch] 0 +
jz loc_445B5D  +
mov edx [ebx+0Ch] +
mov eax [ebx+1Ch] +
mov ecx [eax] +
call dword ptr [ecx+14h]  +
cmp dword ptr [ebx+1Ch] 0 +
jz loc_445B5D  +
lea eax [ebx+1Ch] +
call unknown_libname_560  +
pop ebx  +
retn   +
***
mov eax ebx +
mov edx dword_4F16F8 +
call unknown_libname_542  +
pop ebx  +
retn   +
***
push 0  +
push ebx  +
push esi  +
mov esi edx +
mov ebx eax +
xor eax eax +
push ebp  +
push offset loc_445BDB  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
cmp dword_4F16F4 0 +
jz loc_445BC0  +
lea ecx [ebp+var_4] +
xor edx edx +
mov eax ebx +
call @WinHelpViewer@_16391  +
mov ecx [ebp+var_4] +
mov edx esi +
mov eax dword_4F16F4 +
mov ebx [eax] +
call dword ptr [ebx+0Ch]  +
test al al +
jz loc_445BBC  +
mov ebx 1 +
jmp loc_445BC5  +
xor ebx ebx +
jmp loc_445BC5  +
mov ebx 1 +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_445BE2  +
lea eax [ebp+var_4] +
call unknown_libname_540  +
retn   +
jmp unknown_libname_539  +
jmp loc_445BD2  +
mov eax ebx +
pop esi  +
pop ebx  +
pop ecx  +
pop ebp  +
retn   +
***
push 0  +
push 0  +
push ebx  +
push esi  +
push edi  +
mov edi edx +
mov esi eax +
xor eax eax +
push ebp  +
push offset loc_445C74  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
cmp dword_4F16F4 0 +
jz loc_445C21  +
mov edx edi +
mov eax dword_4F16F4 +
mov ecx [eax] +
call dword ptr [ecx+18h]  +
mov ebx eax +
jmp loc_445C59  +
mov dl 1 +
mov eax ds:off_49ABC4 +
call @System@TObject@$bctr$qqrv  +
mov ebx eax +
lea edx [ebp+var_8] +
mov eax esi +
call sub_445B60  +
push [ebp+var_8]  +
push offset _str___.Text  +
push edi  +
lea eax [ebp+var_4] +
mov edx 3 +
call sub_4BB6D0  +
mov edx [ebp+var_4] +
mov eax ebx +
mov ecx [eax] +
call dword ptr [ecx+38h]  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_445C7B  +
lea eax [ebp+var_8] +
mov edx 2 +
call unknown_libname_541  +
retn   +
jmp unknown_libname_539  +
jmp loc_445C66  +
mov eax ebx +
pop edi  +
pop esi  +
pop ebx  +
pop ecx  +
pop ecx  +
pop ebp  +
retn   +
***
mov al 1 +
retn   +
***
push 0  +
push 0  +
push ebx  +
mov ebx eax +
xor eax eax +
push ebp  +
push offset loc_445D0F  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov eax ebx +
call @WinHelpViewer@_16413  +
test al al +
jz loc_445CF4  +
mov byte ptr [ebx+10h] 2 +
lea edx [ebp+var_8] +
mov eax [ebx+1Ch] +
mov ecx [eax] +
call dword ptr [ecx+10h]  +
mov edx [ebp+var_8] +
lea ecx [ebp+var_4] +
mov eax ebx +
call @WinHelpViewer@_16391  +
cmp [ebp+var_4] 0 +
jz loc_445CF4  +
push 0  +
push 3  +
mov eax [ebp+var_4] +
call unknown_libname_550  +
push eax  +
mov eax [ebx+1Ch] +
mov edx [eax] +
call dword ptr [edx+0Ch]  +
push eax  +
call WinHelpA  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_445D16  +
lea eax [ebp+var_8] +
mov edx 2 +
call unknown_libname_541  +
retn   +
jmp unknown_libname_539  +
jmp loc_445D01  +
pop ebx  +
pop ecx  +
pop ecx  +
pop ebp  +
retn   +
***
add esp 0FFFFFFE4h +
push ebx  +
push esi  +
xor ecx ecx +
mov [ebp+var_1C] ecx +
mov [ebp+var_4] ecx +
mov [ebp+var_8] ecx +
mov esi edx +
mov ebx eax +
xor eax eax +
push ebp  +
push offset loc_445DFA  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
lea eax [ebp+var_4] +
push eax  +
mov [ebp+var_18] esi +
mov [ebp+var_14] 0Bh +
lea ecx [ebp+var_1C] +
xor edx edx +
mov eax ebx +
call @WinHelpViewer@_16391  +
mov eax [ebp+var_1C] +
mov [ebp+var_10] eax +
mov [ebp+var_C] 0Bh +
lea edx [ebp+var_18] +
mov ecx 1 +
mov eax offset _str_IE_AL___s__4___.Text +
call @Sysutils@Format$qqrx17System@AnsiStringpx14System@TVarRecxi  +
mov eax ebx +
call @WinHelpViewer@_16413  +
test al al +
jz loc_445DD7  +
lea ecx [ebp+var_8] +
xor edx edx +
mov eax ebx +
call @WinHelpViewer@_16391  +
push 0  +
mov ecx [ebp+var_4] +
mov dl 1 +
mov eax ebx +
call @WinHelpViewer@_16410  +
test al al +
jz loc_445DD7  +
cmp [ebp+var_8] 0 +
jz loc_445DD7  +
mov byte ptr [ebx+10h] 1 +
lea eax [ebx+14h] +
mov edx [ebp+var_4] +
call unknown_libname_542  +
mov eax [ebp+var_4] +
call unknown_libname_550  +
push eax  +
push 102h  +
mov eax [ebp+var_8] +
call unknown_libname_550  +
push eax  +
mov eax [ebx+1Ch] +
mov edx [eax] +
call dword ptr [edx+0Ch]  +
push eax  +
call WinHelpA  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_445E01  +
lea eax [ebp+var_1C] +
call unknown_libname_540  +
lea eax [ebp+var_8] +
mov edx 2 +
call unknown_libname_541  +
retn   +
jmp unknown_libname_539  +
jmp loc_445DE4  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
mov byte ptr [eax+10h] 3 +
push 0  +
push 2  +
push offset szHelp  +
push 0  +
call WinHelpA  +
retn   +
***
push ebx  +
mov ebx eax +
mov eax ebx +
call @WinHelpViewer@_16400  +
cmp dword ptr [ebx+1Ch] 0 +
jz loc_445E80  +
lea eax [ebx+1Ch] +
call unknown_libname_560  +
cmp dword_4F16F4 0 +
jz loc_445E93  +
mov eax offset dword_4F16F4 +
call unknown_libname_560  +
pop ebx  +
retn   +
***
push 0  +
push ebx  +
push esi  +
push edi  +
mov edi edx +
mov esi eax +
xor eax eax +
push ebp  +
push offset loc_445EF0  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov bl 1 +
cmp dword_4F16F4 0 +
jz loc_445EDA  +
lea ecx [ebp+var_4] +
xor edx edx +
mov eax esi +
call @WinHelpViewer@_16391  +
mov ecx [ebp+var_4] +
mov edx edi +
mov eax dword_4F16F4 +
mov ebx [eax] +
call dword ptr [ebx+10h]  +
mov ebx eax +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_445EF7  +
lea eax [ebp+var_4] +
call unknown_libname_540  +
retn   +
jmp unknown_libname_539  +
jmp loc_445EE7  +
mov eax ebx +
pop edi  +
pop esi  +
pop ebx  +
pop ecx  +
pop ebp  +
retn   +
***
add esp 0FFFFFEF0h +
push ebx  +
push esi  +
xor ecx ecx +
mov [ebp+var_110] ecx +
mov [ebp+var_4] ecx +
mov esi edx +
mov ebx eax +
xor eax eax +
push ebp  +
push offset loc_445FF6  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov [ebp+var_10C] esi +
mov [ebp+var_108] 0Bh +
lea eax [ebp+var_10C] +
push eax  +
push 0  +
mov ecx offset aJumpidS +
lea eax [ebp+dwData] +
mov edx 0FFh +
call sub_4A98BC  +
lea ecx [ebp+var_4] +
xor edx edx +
mov eax ebx +
call @WinHelpViewer@_16391  +
mov eax ebx +
call @WinHelpViewer@_16413  +
test al al +
jz loc_445FD5  +
push 0  +
lea eax [ebp+var_110] +
lea edx [ebp+dwData] +
mov ecx 100h +
call sub_4BB5C0  +
mov ecx [ebp+var_110] +
mov dl 1 +
mov eax ebx +
call @WinHelpViewer@_16410  +
test al al +
jz loc_445FD5  +
cmp [ebp+var_4] 0 +
jz loc_445FD5  +
mov byte ptr [ebx+10h] 1 +
lea eax [ebx+14h] +
lea edx [ebp+dwData] +
mov ecx 100h +
call sub_4BB5C0  +
lea eax [ebp+dwData] +
push eax  +
push 102h  +
mov eax [ebp+var_4] +
call unknown_libname_550  +
push eax  +
mov eax [ebx+1Ch] +
mov edx [eax] +
call dword ptr [edx+0Ch]  +
push eax  +
call WinHelpA  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_445FFD  +
lea eax [ebp+var_110] +
call unknown_libname_540  +
lea eax [ebp+var_4] +
call unknown_libname_540  +
retn   +
jmp unknown_libname_539  +
jmp loc_445FE2  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
add esp 0FFFFFFF8h +
push ebx  +
push esi  +
push edi  +
xor ebx ebx +
mov [ebp+var_8] ebx +
mov [ebp+var_4] ecx +
mov edi edx +
mov esi eax +
xor eax eax +
push ebp  +
push offset loc_446076  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov bl 1 +
cmp dword_4F16F4 0 +
jz loc_446060  +
lea ecx [ebp+var_8] +
mov edx [ebp+var_4] +
mov eax esi +
call @WinHelpViewer@_16391  +
mov ecx [ebp+var_8] +
mov edx edi +
mov eax dword_4F16F4 +
mov ebx [eax] +
call dword ptr [ebx+14h]  +
mov ebx eax +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_44607D  +
lea eax [ebp+var_8] +
call unknown_libname_540  +
retn   +
jmp unknown_libname_539  +
jmp loc_44606D  +
mov eax ebx +
pop edi  +
pop esi  +
pop ebx  +
pop ecx  +
pop ecx  +
pop ebp  +
retn   +
***
push ebp  +
mov ebp esp +
push 0  +
push ebx  +
push esi  +
push edi  +
mov edi ecx +
mov esi edx +
mov ebx eax +
xor eax eax +
push ebp  +
push offset loc_446108  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
lea ecx [ebp-4] +
mov edx edi +
mov eax ebx +
call @WinHelpViewer@_16391  +
mov eax ebx +
call @WinHelpViewer@_16413  +
test al al +
jz loc_4460F2  +
push esi  +
xor ecx ecx +
xor edx edx +
mov eax ebx +
call @WinHelpViewer@_16410  +
test al al +
jz loc_4460F2  +
cmp dword ptr [ebp-4] 0 +
jz loc_4460F2  +
mov byte ptr [ebx+10h] 0 +
mov [ebx+18h] esi +
push esi  +
push 1  +
mov eax [ebp-4] +
call unknown_libname_550  +
push eax  +
mov eax [ebx+1Ch] +
mov edx [eax] +
call dword ptr [edx+0Ch]  +
push eax  +
call WinHelpA  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_44610F  +
lea eax [ebp-4] +
call unknown_libname_540  +
retn   +
***
jmp unknown_libname_539  +
***
jmp loc_4460FF  +
***
pop edi  +
pop esi  +
pop ebx  +
pop ecx  +
pop ebp  +
retn   +
***
add esp 0FFFFFFE8h +
push ebx  +
push esi  +
push edi  +
xor ebx ebx +
mov [ebp+var_18] ebx +
mov [ebp+var_14] ebx +
mov [ebp+var_10] ebx +
mov [ebp+var_8] ecx +
mov [ebp+hWndMain] edx +
mov esi eax +
mov edi [ebp+arg_4] +
xor eax eax +
push ebp  +
push offset loc_446214  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov [ebp+var_9] 0 +
xor ebx ebx +
mov eax esi +
call @WinHelpViewer@_16413  +
test al al +
jz loc_4461F9  +
cmp di 102h +
jz loc_446188  +
cmp di 105h +
jz loc_446188  +
cmp di 201h +
jz loc_446188  +
cmp di 0Ah +
jz loc_446188  +
cmp di 8 +
jz loc_446188  +
cmp di 1 +
jz loc_446188  +
cmp di 101h +
jnz loc_4461A9  +
push 0  +
lea edx [ebp+var_10] +
movzx eax di +
call @Sysutils@IntToStr$qqri  +
mov ecx [ebp+var_10] +
mov dl 1 +
mov eax esi +
call @WinHelpViewer@_16410  +
test al al +
jz loc_4461AB  +
mov bl 1 +
jmp loc_4461AB  +
mov bl 1 +
test bl bl +
jz loc_4461F9  +
mov byte ptr [esi+10h] 1 +
lea edx [ebp+var_14] +
movzx eax di +
call @Sysutils@IntToStr$qqri  +
mov edx [ebp+var_14] +
lea eax [esi+14h] +
call unknown_libname_542  +
mov eax [ebp+dwData] +
push eax  +
movzx eax di +
push eax  +
lea ecx [ebp+var_18] +
mov edx [ebp+var_8] +
mov eax esi +
call @WinHelpViewer@_16391  +
mov eax [ebp+var_18] +
call unknown_libname_550  +
push eax  +
mov eax [ebp+hWndMain] +
push eax  +
call WinHelpA  +
cmp eax 1 +
sbb eax eax +
inc eax  +
mov [ebp+var_9] al +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_44621B  +
lea eax [ebp+var_18] +
mov edx 3 +
call unknown_libname_541  +
retn   +
jmp unknown_libname_539  +
jmp loc_446206  +
mov al [ebp+var_9] +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 8  +
***
add esp 0FFFFFF00h +
push ebx  +
push esi  +
mov ebx [ebp+arg_4] +
mov esi [ebp+hWnd] +
push 100h  +
lea eax [ebp+ClassName] +
push eax  +
push esi  +
call GetClassNameA  +
mov edx offset aMs_winhelp +
lea eax [ebp+ClassName] +
call @Sysutils@StrIComp$qqrpxct1  +
test eax eax +
jnz loc_446266  +
mov [ebx+4] esi +
mov byte ptr [ebx+0Ch] 1 +
mov al [ebx+0Ch] +
xor al 1 +
neg al  +
sbb eax eax +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 8  +
***
add esp 0FFFFFF00h +
push ebx  +
push esi  +
mov ebx [ebp+arg_4] +
mov esi [ebp+hWnd] +
push 100h  +
lea eax [ebp+ClassName] +
push eax  +
push esi  +
call GetClassNameA  +
mov edx offset dword_4462D4 +
lea eax [ebp+ClassName] +
call @Sysutils@StrComp$qqrpxct1  +
test eax eax +
jnz loc_4462C2  +
mov byte ptr [ebx+0Dh] 1 +
mov [ebx+8] esi +
mov al [ebx+0Dh] +
xor al 1 +
neg al  +
sbb eax eax +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 8  +
***
mov byte ptr [eax+0Ch] 0 +
mov byte ptr [eax+0Dh] 0 +
xor edx edx +
mov [eax+4] edx +
push eax  +
push offset @WinHelpViewer@_16407  +
call EnumWindows  +
retn   +
***
add esp 0FFFFFFE8h +
push ebx  +
push esi  +
mov [ebp+var_8] ecx +
mov [ebp+var_1] dl +
mov esi eax +
mov eax [ebp+var_8] +
call unknown_libname_549  +
xor eax eax +
push ebp  +
push offset loc_446372  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov bl 1 +
lea eax [ebp+lParam] +
call @WinHelpViewer@_16409  +
cmp [ebp+var_C] 0 +
jz loc_44635C  +
mov al [ebp+var_1] +
cmp al [esi+10h] +
jnz loc_44635C  +
mov al [ebp+var_1] +
sub al 1 +
jb loc_446352  +
jnz loc_44635C  +
mov edx [esi+14h] +
mov eax [ebp+var_8] +
call @Sysutils@CompareStr$qqrx17System@AnsiStringt1  +
test eax eax +
jnz loc_44635C  +
xor ebx ebx +
jmp loc_44635C  +
mov eax [ebp+arg_0] +
cmp eax [esi+18h] +
jnz loc_44635C  +
xor ebx ebx +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_446379  +
lea eax [ebp+var_8] +
call unknown_libname_540  +
retn   +
jmp unknown_libname_539  +
jmp loc_446369  +
mov eax ebx +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 4  +
***
retn   +
***
add esp 0FFFFFFF0h +
mov esi edx +
lea edi [esp+10h+var_10] +
movs   +
movs   +
movs   +
movs   +
xor eax eax +
cmp [esp+10h+var_3] 0 +
jnz loc_4463A1  +
mov al 1 +
add esp 10h +
pop edi  +
pop esi  +
retn   +
***
add esp 0FFFFFFF0h +
mov esi eax +
xor ebx ebx +
cmp [esp+10h+var_4] 0 +
jz loc_4463D2  +
mov eax esp +
push eax  +
push offset @WinHelpViewer@_16408  +
push 0  +
mov eax [esp+1Ch+hWnd] +
push eax  +
call GetWindowThreadProcessId  +
push eax  +
call EnumThreadWindows  +
mov edx esp +
mov eax esi +
call sub_446384  +
test al al +
jnz loc_4463F5  +
mov edx esp +
mov eax esi +
call @WinHelpViewer@_16412  +
test al al +
jz loc_4463F3  +
mov eax esi +
call @WinHelpViewer@_16414  +
mov bl 1 +
mov eax ebx +
add esp 10h +
pop esi  +
pop ebx  +
retn   +
***
push 0  +
push ebx  +
push esi  +
mov esi eax +
xor eax eax +
push ebp  +
push offset loc_44647D  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov eax esi +
call @WinHelpViewer@_16400  +
call GetTickCount  +
mov ebx eax +
push 0  +
call Sleep  +
call GetTickCount  +
sub eax ebx +
cmp eax 3E8h +
jbe loc_446425  +
lea ecx [ebp+var_4] +
xor edx edx +
mov eax esi +
call @WinHelpViewer@_16391  +
cmp [ebp+var_4] 0 +
jz loc_446467  +
push 0  +
push 9  +
mov eax [ebp+var_4] +
call unknown_libname_550  +
push eax  +
mov eax [esi+1Ch] +
mov edx [eax] +
call dword ptr [edx+0Ch]  +
push eax  +
call WinHelpA  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_446484  +
lea eax [ebp+var_4] +
call unknown_libname_540  +
retn   +
jmp unknown_libname_539  +
jmp loc_446474  +
pop esi  +
pop ebx  +
pop ecx  +
pop ebp  +
retn   +
***
call unknown_libname_536  +
mov ebx edx +
mov esi eax +
mov edx ebx +
and dl 0FCh +
mov eax esi +
call sub_4BA7FC  +
test bl bl +
jle loc_4464AE  +
mov eax esi +
call @System@@ClassDestroy$qqrp14System@TObject  +
pop esi  +
pop ebx  +
retn   +
***
xor eax eax +
xor eax eax +
xor eax eax +
push ebp  +
push offset loc_4465D0  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
inc dword_4F1704  +
jnz loc_4465C2  +
cmp byte_4F1710 0 +
jz loc_4465C2  +
cmp dword_4F1708 0 +
jz loc_4465C2  +
mov eax dword_4F1708 +
push eax  +
call FreeLibrary  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4465D7  +
retn   +
jmp unknown_libname_539  +
jmp locret_4465CF  +
pop ebp  +
retn   +
***
sub dword_4F1704 1 +
retn   +
***
test dl dl +
jz loc_4466E6  +
add esp 0FFFFFFF0h +
call unknown_libname_535  +
mov ebx edx +
mov esi eax +
xor edx edx +
mov eax esi +
call @Actnlist@TCustomAction@$bctr$qqrp18Classes@TComponent  +
mov byte ptr [esi+60h] 0 +
mov eax esi +
test bl bl +
jz loc_44670C  +
call sub_4BABC8  +
pop large dword ptr fs:0  +
add esp 0Ch +
mov eax esi +
pop esi  +
pop ebx  +
retn   +
***
xor eax eax +
push ebp  +
push offset loc_446739  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
inc dword_4F1714  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_446740  +
retn   +
jmp unknown_libname_539  +
jmp locret_446738  +
pop ebp  +
retn   +
***
sub dword_4F1714 1 +
retn   +
***
call @Graphics@ColorToRGB$qqr15Graphics@TColor  +
mov edx eax +
sub edx 1FFFFFFFh +
jz loc_446934  +
dec edx  +
jz loc_446938  +
jmp locret_44693D  +
or eax 0FFFFFFFFh +
retn   +
mov eax 0FF000000h +
retn   +
***
mov edx eax +
sub edx 0FF000000h +
jz loc_446958  +
sub edx 0FFFFFFh +
jnz locret_44695D  +
mov eax 1FFFFFFFh +
retn   +
mov eax 20000000h +
retn   +
***
test dl dl +
jz loc_44696E  +
add esp 0FFFFFFF0h +
call unknown_libname_535  +
mov ebx edx +
mov esi eax +
xor edx edx +
mov eax esi +
call sub_4A4B20  +
mov dword ptr [esi+34h] 10h +
mov dword ptr [esi+30h] 10h +
mov eax esi +
mov edx [eax] +
call dword ptr [edx+34h]  +
mov eax esi +
test bl bl +
jz loc_4469A5  +
call sub_4BABC8  +
pop large dword ptr fs:0  +
add esp 0Ch +
mov eax esi +
pop esi  +
pop ebx  +
retn   +
***
push ebx  +
push esi  +
push edi  +
test dl dl +
jz loc_4469BE  +
add esp 0FFFFFFF0h +
call unknown_libname_535  +
mov esi ecx +
mov ebx edx +
mov edi eax +
xor ecx ecx +
xor edx edx +
mov eax edi +
call sub_4A4B20  +
mov [edi+34h] esi +
mov eax [ebp+arg_0] +
mov [edi+30h] eax +
mov eax edi +
mov edx [eax] +
call dword ptr [edx+34h]  +
mov eax edi +
test bl bl +
jz loc_4469F4  +
call sub_4BABC8  +
pop large dword ptr fs:0  +
add esp 0Ch +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
push edi  +
call unknown_libname_536  +
mov ebx edx +
mov edi eax +
jmp loc_446A1E  +
mov eax esi +
call @TList@Last$qqrv  +
mov edx eax +
mov eax edi +
call @Imglist@TCustomImageList@UnRegisterChanges$qqrp19Imglist@TChangeLink  +
mov esi [edi+4Ch] +
cmp dword ptr [esi+8] 0 +
jg loc_446A0E  +
mov eax [edi+50h] +
call @System@TObject@Free$qqrv  +
mov eax edi +
call @Imglist@TCustomImageList@FreeHandle$qqrv  +
mov eax [edi+4Ch] +
call @System@TObject@Free$qqrv  +
xor eax eax +
mov [edi+4Ch] eax +
mov eax [edi+54h] +
test eax eax +
jz loc_446A4F  +
call @System@TObject@Free$qqrv  +
mov edx ebx +
and dl 0FCh +
mov eax edi +
call sub_4A4B6C  +
test bl bl +
jle loc_446A66  +
mov eax edi +
call @System@@ClassDestroy$qqrp14System@TObject  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push 0  +
cmp dword ptr [eax+3Ch] 0 +
cmp dword ptr [eax+3Ch] 0 +
add esp 0FFFFFFE8h +
mov ebx eax +
mov eax [ebx+34h] +
mov [esp+8+var_4] eax +
mov eax [ebx+30h] +
mov [esp+8+var_8] eax +
push esp  +
lea eax [esp+0Ch+var_4] +
push eax  +
push edx  +
call ImageList_GetIconSize  +
mov eax [esp+8+var_4] +
mov [ebx+34h] eax +
mov eax [esp+8+var_8] +
mov [ebx+30h] eax +
mov eax ebx +
call @Imglist@TCustomImageList@InitBitmap$qqrv  +
pop ecx  +
pop edx  +
pop ebx  +
retn   +
***
cmp edx [esi+34h] +
jz loc_446C74  +
mov [esi+34h] edx +
mov eax esi +
call sub_446B24  +
test al al +
jz loc_446C5B  +
mov eax [esi+30h] +
push eax  +
mov eax [esi+34h] +
push eax  +
mov eax [esi+3Ch] +
push eax  +
call ImageList_SetIconSize  +
mov eax esi +
call @Imglist@TCustomImageList@Clear$qqrv  +
mov eax esi +
call @Imglist@TCustomImageList@InitBitmap$qqrv  +
mov eax esi +
mov si 0FFEFh +
call @System@@CallDynaInst$qqrv  +
pop esi  +
retn   +
***
cmp edx [esi+30h] +
jz loc_446CB8  +
mov [esi+30h] edx +
mov eax esi +
call sub_446B24  +
test al al +
jz loc_446C9F  +
mov eax [esi+30h] +
push eax  +
mov eax [esi+34h] +
push eax  +
mov eax [esi+3Ch] +
push eax  +
call ImageList_SetIconSize  +
mov eax esi +
call @Imglist@TCustomImageList@Clear$qqrv  +
mov eax esi +
call @Imglist@TCustomImageList@InitBitmap$qqrv  +
mov eax esi +
mov si 0FFEFh +
call @System@@CallDynaInst$qqrv  +
pop esi  +
retn   +
***
mov esi edx +
mov ebx eax +
mov eax ebx +
call @Imglist@TCustomImageList@FreeHandle$qqrv  +
test esi esi +
jz loc_446CE4  +
mov edx esi +
mov eax ebx +
call @Imglist@TCustomImageList@SetNewDimensions$qqrui  +
mov [ebx+3Ch] esi +
mov eax ebx +
mov si 0FFEFh +
call @System@@CallDynaInst$qqrv  +
pop esi  +
pop ebx  +
retn   +
***
mov eax ebx +
call @Imglist@TCustomImageList@HandleNeeded$qqrv  +
mov eax [ebx+3Ch] +
pop ebx  +
retn   +
***
push edi  +
mov edi ecx +
mov ebx edx +
mov esi eax +
mov edx ebx +
mov eax esi +
call @Imglist@TCustomImageList@CheckImage$qqrp17Graphics@TGraphic  +
test ebx ebx +
jz loc_446D3D  +
mov eax ebx +
call @Graphics@TBitmap@GetHandleType$qqrv  +
cmp al 1 +
jnz loc_446D22  +
mov eax ebx +
mov edx [eax] +
call dword ptr [edx+64h]  +
jmp loc_446D45  +
mov edx ebx +
mov eax edi +
mov ecx [eax] +
call dword ptr [ecx+8]  +
mov dl 1 +
mov eax edi +
mov ecx [eax] +
call dword ptr [ecx+6Ch]  +
mov eax edi +
mov edx [eax] +
call dword ptr [edx+64h]  +
jmp loc_446D45  +
mov eax [esi+50h] +
mov edx [eax] +
call dword ptr [edx+64h]  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov ebx eax +
mov eax ebx +
call sub_446B24  +
test al al +
jz loc_446D6E  +
cmp byte ptr [ebx+42h] 0 +
jnz loc_446D6E  +
mov eax ebx +
call @Imglist@TCustomImageList@GetHandle$qqrv  +
push eax  +
call ImageList_Destroy  +
xor eax eax +
mov [ebx+3Ch] eax +
mov eax ebx +
mov si 0FFEFh +
call @System@@CallDynaInst$qqrv  +
pop esi  +
pop ebx  +
retn   +
***
push 0  +
push ebx  +
push esi  +
mov ebx eax +
xor eax eax +
push ebp  +
push offset loc_446E17  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov esi [ebx+38h] +
push esi  +
push esi  +
xor eax eax +
mov al [ebx+41h] +
mov eax dword_4E6004[eax*4] +
or eax 0FEh +
push eax  +
mov eax [ebx+30h] +
push eax  +
mov eax [ebx+34h] +
push eax  +
call ImageList_Create  +
mov [ebx+3Ch] eax +
mov eax ebx +
call sub_446B24  +
test al al +
jnz loc_446DEE  +
lea edx [ebp+var_4] +
mov eax off_4EAA90 +
call @System@LoadResString$qqrp20System@TResStringRec  +
mov ecx [ebp+var_4] +
mov dl 1 +
mov eax ds:off_49A578 +
call sub_4AC17C  +
call @System@@RaiseExcept$qqrv  +
mov eax [ebx+44h] +
cmp eax 1FFFFFFFh +
jz loc_446E01  +
mov edx eax +
mov eax ebx +
call @Imglist@TCustomImageList@SetBkColor$qqr15Graphics@TColor  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_446E1E  +
lea eax [ebp+var_4] +
call unknown_libname_540  +
retn   +
jmp unknown_libname_539  +
jmp loc_446E0E  +
pop esi  +
pop ebx  +
pop ecx  +
pop ebp  +
retn   +
***
add esp 0FFFFFFF0h +
push ebx  +
push esi  +
mov esi ecx +
mov ebx edx +
mov [ebp+var_4] eax +
mov dl 1 +
mov eax ds:off_45979C +
call @Graphics@TBitmap@$bctr$qqrv  +
mov [ebp+var_C] eax +
xor eax eax +
push ebp  +
push offset loc_446ED3  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov dl 1 +
mov eax ds:off_45979C +
call @Graphics@TBitmap@$bctr$qqrv  +
mov [ebp+var_10] eax +
xor eax eax +
push ebp  +
push offset loc_446EB6  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov eax [ebp+var_4] +
call @Imglist@TCustomImageList@HandleNeeded$qqrv  +
mov ecx [ebp+var_10] +
mov edx esi +
mov eax [ebp+var_4] +
call @Imglist@TCustomImageList@GetImageHandle$qqrp16Graphics@TBitmapt1  +
push eax  +
mov ecx [ebp+var_C] +
mov edx ebx +
mov eax [ebp+var_4] +
call @Imglist@TCustomImageList@GetImageHandle$qqrp16Graphics@TBitmapt1  +
push eax  +
mov eax [ebp+var_4] +
mov eax [eax+3Ch] +
push eax  +
call ImageList_Add  +
mov [ebp+var_8] eax +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_446EBD  +
mov eax [ebp+var_10] +
call @System@TObject@Free$qqrv  +
retn   +
jmp unknown_libname_539  +
jmp loc_446EAD  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_446EDA  +
mov eax [ebp+var_C] +
call @System@TObject@Free$qqrv  +
retn   +
jmp unknown_libname_539  +
jmp loc_446ECA  +
mov eax [ebp+var_4] +
mov si 0FFEFh +
call @System@@CallDynaInst$qqrv  +
mov eax [ebp+var_8] +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
mov eax ebx +
call sub_446B24  +
test al al +
jz loc_446F0D  +
mov eax ebx +
call @Imglist@TCustomImageList@GetHandle$qqrv  +
push eax  +
call ImageList_GetImageCount  +
pop ebx  +
retn   +
xor eax eax +
pop ebx  +
retn   +
***
push 0  +
push ebx  +
push esi  +
mov esi edx +
mov ebx eax +
xor eax eax +
push ebp  +
push offset loc_446F93  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov eax ebx +
call @Imglist@TCustomImageList@GetCount$qqrv  +
cmp esi eax +
jl loc_446F59  +
lea edx [ebp+var_4] +
mov eax off_4EAA94 +
call @System@LoadResString$qqrp20System@TResStringRec  +
mov ecx [ebp+var_4] +
mov dl 1 +
mov eax ds:off_49A578 +
call sub_4AC17C  +
call @System@@RaiseExcept$qqrv  +
mov eax ebx +
call sub_446B24  +
test al al +
jz loc_446F72  +
push esi  +
mov eax ebx +
call @Imglist@TCustomImageList@GetHandle$qqrv  +
push eax  +
call ImageList_Remove  +
mov eax ebx +
mov si 0FFEFh +
call @System@@CallDynaInst$qqrv  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_446F9A  +
lea eax [ebp+var_4] +
call unknown_libname_540  +
retn   +
jmp unknown_libname_539  +
jmp loc_446F8A  +
pop esi  +
pop ebx  +
pop ecx  +
pop ebp  +
retn   +
***
or edx 0FFFFFFFFh +
call sub_446F14  +
retn   +
***
mov esi edx +
mov ebx eax +
mov eax ebx +
call sub_446B24  +
test al al +
jz loc_446FD0  +
mov eax esi +
call @ImgList@_16398  +
push eax  +
mov eax [ebx+3Ch] +
push eax  +
call ImageList_SetBkColor  +
jmp loc_446FD3  +
mov [ebx+44h] esi +
mov eax ebx +
mov si 0FFEFh +
call @System@@CallDynaInst$qqrv  +
pop esi  +
pop ebx  +
retn   +
***
mov eax ebx +
call sub_446B24  +
test al al +
jz loc_447006  +
mov eax ebx +
call @Imglist@TCustomImageList@GetHandle$qqrv  +
push eax  +
call ImageList_GetBkColor  +
call @ImgList@_16399  +
pop ebx  +
retn   +
mov eax [ebx+44h] +
pop ebx  +
retn   +
***
add esp 0FFFFFFD8h +
push ebx  +
mov ebx [ebp+arg_8] +
push ebx  +
mov ebx [ebp+arg_4] +
push ebx  +
mov bl [eax+40h] +
push ebx  +
mov bl [eax+43h] +
push ebx  +
mov bl [ebp+arg_0] +
push ebx  +
call @Imglist@TCustomImageList@Draw$qqrp16Graphics@TCanvasiii21Imglist@TDrawingStyle18Imglist@TImageTypeo  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
push ebx  +
add esp 0FFFFFFE0h +
push ebx  +
push esi  +
push edi  +
mov [ebp+var_8] edx +
mov [ebp+var_4] eax +
mov eax [ebp+var_4] +
mov eax [eax+30h] +
push eax  +
lea eax [ebp+var_20] +
push eax  +
mov eax [ebp+var_4] +
mov ecx [eax+34h] +
xor edx edx +
xor eax eax +
call sub_49B708  +
mov eax [ebp+var_4] +
call sub_447E10  +
xor eax eax +
push ebp  +
push offset loc_4473D8  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov dl 1 +
mov eax ds:off_45979C +
call @Graphics@TBitmap@$bctr$qqrv  +
mov [ebp+var_C] eax +
xor eax eax +
push ebp  +
push offset loc_4473BB  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov eax [ebp+var_4] +
mov edx [eax+30h] +
mov eax [ebp+var_C] +
mov ecx [eax] +
call dword ptr [ecx+34h]  +
mov eax [ebp+var_4] +
mov edx [eax+34h] +
mov eax [ebp+var_C] +
mov ecx [eax] +
call dword ptr [ecx+40h]  +
mov dl 1 +
mov eax ds:off_45979C +
call @Graphics@TBitmap@$bctr$qqrv  +
mov [ebp+var_10] eax +
xor eax eax +
push ebp  +
push offset loc_44739E  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov dl 1 +
mov eax [ebp+var_10] +
call @Graphics@TBitmap@SetMonochrome$qqro  +
mov eax [ebp+var_4] +
mov edx [eax+30h] +
mov eax [ebp+var_10] +
mov ecx [eax] +
call dword ptr [ecx+34h]  +
mov eax [ebp+var_4] +
mov edx [eax+34h] +
mov eax [ebp+var_10] +
mov ecx [eax] +
call dword ptr [ecx+40h]  +
mov eax [ebp+var_8] +
push eax  +
call ImageList_GetImageCount  +
mov esi eax +
dec esi  +
test esi esi +
jl loc_447388  +
inc esi  +
xor ebx ebx +
mov eax [ebp+var_C] +
call @Graphics@TBitmap@GetCanvas$qqrv  +
mov edi eax +
lea edx [ebp+var_20] +
mov eax edi +
call @Graphics@TCanvas@FillRect$qqrrx11Types@TRect  +
push 0  +
push 0  +
push 0  +
mov eax edi +
call @Graphics@TCanvas@GetHandle$qqrv  +
push eax  +
push ebx  +
mov eax [ebp+var_8] +
push eax  +
call ImageList_Draw  +
mov eax [ebp+var_10] +
call @Graphics@TBitmap@GetCanvas$qqrv  +
mov edi eax +
lea edx [ebp+var_20] +
mov eax edi +
call @Graphics@TCanvas@FillRect$qqrrx11Types@TRect  +
push 10h  +
push 0  +
push 0  +
mov eax edi +
call @Graphics@TCanvas@GetHandle$qqrv  +
push eax  +
push ebx  +
mov eax [ebp+var_8] +
push eax  +
call ImageList_Draw  +
mov ecx [ebp+var_10] +
mov edx [ebp+var_C] +
mov eax [ebp+var_4] +
call sub_446E24  +
inc ebx  +
dec esi  +
jnz loc_44731E  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4473A5  +
mov eax [ebp+var_10] +
call @System@TObject@Free$qqrv  +
retn   +
jmp unknown_libname_539  +
jmp loc_447395  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4473C2  +
mov eax [ebp+var_C] +
call @System@TObject@Free$qqrv  +
retn   +
jmp unknown_libname_539  +
jmp loc_4473B2  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4473DF  +
mov eax [ebp+var_4] +
call @Imglist@TCustomImageList@EndUpdate$qqrv  +
retn   +
jmp unknown_libname_539  +
jmp loc_4473CF  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
mov esi edx +
mov ebx eax +
test esi esi +
jz loc_447402  +
mov eax esi +
call @Imglist@TCustomImageList@GetHandle$qqrv  +
mov edx eax +
mov eax ebx +
call @Imglist@TCustomImageList@CopyImages$qqrui  +
pop esi  +
pop ebx  +
retn   +
***
mov esi edx +
mov ebx eax +
test esi esi +
jnz loc_44741C  +
mov eax ebx +
call @Imglist@TCustomImageList@FreeHandle$qqrv  +
pop esi  +
pop ebx  +
retn   +
mov eax esi +
mov edx ds:off_446850 +
call @System@@IsClass$qqrp14System@TObjectp17System@TMetaClass  +
test al al +
jz loc_4474B9  +
mov eax ebx +
call @Imglist@TCustomImageList@Clear$qqrv  +
mov al [esi+41h] +
mov [ebx+41h] al +
mov al [esi+43h] +
mov [ebx+43h] al +
mov dl [esi+40h] +
mov eax ebx +
call @Imglist@TCustomImageList@SetDrawingStyle$qqr21Imglist@TDrawingStyle  +
mov al [esi+42h] +
mov [ebx+42h] al +
mov eax esi +
call @Imglist@TCustomImageList@GetHandle$qqrv  +
mov edx eax +
mov eax ebx +
call @Imglist@TCustomImageList@SetNewDimensions$qqrui  +
mov eax ebx +
call sub_446B24  +
test al al +
jnz loc_447478  +
mov eax ebx +
call @Imglist@TCustomImageList@HandleNeeded$qqrv  +
jmp loc_44748D  +
mov eax [ebx+30h] +
push eax  +
mov eax [ebx+34h] +
push eax  +
mov eax ebx +
call @Imglist@TCustomImageList@GetHandle$qqrv  +
push eax  +
call ImageList_SetIconSize  +
mov eax esi +
call @Imglist@TCustomImageList@GetHandle$qqrv  +
push eax  +
call ImageList_GetBkColor  +
call @ImgList@_16399  +
mov edx eax +
mov eax ebx +
call @Imglist@TCustomImageList@SetBkColor$qqr15Graphics@TColor  +
mov eax [esi+48h] +
mov [ebx+48h] eax +
mov edx esi +
mov eax ebx +
call unknown_libname_53  +
jmp loc_4474C2  +
mov edx esi +
mov eax ebx +
call @Classes@TPersistent@Assign$qqrp19Classes@TPersistent  +
pop esi  +
pop ebx  +
retn   +
***
mov ebx edx +
push 0  +
cmp dl [esi+40h] +
mov ecx ebx +
push edi  +
push ebp  +
mov ebx eax +
mov byte ptr [ebx+58h] 1 +
cmp dword ptr [ebx+5Ch] 0 +
jg loc_447660  +
mov eax [ebx+4Ch] +
test eax eax +
jz loc_447651  +
mov edi [eax+8] +
dec edi  +
test edi edi +
jl loc_447651  +
inc edi  +
xor ebp ebp +
mov edx ebp +
mov eax [ebx+4Ch] +
call @Classes@TList@Get$qqri  +
mov si 0FFFFh +
call @System@@CallDynaInst$qqrv  +
inc ebp  +
dec edi  +
jnz loc_44763A  +
cmp word ptr [ebx+62h] 0 +
jz loc_447660  +
mov edx ebx +
mov eax [ebx+64h] +
call dword ptr [ebx+60h]  +
pop ebp  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
push ebp  +
mov ebp edx +
mov ebx eax +
mov eax [ebx+4Ch] +
test eax eax +
jz loc_4476A5  +
mov edi [eax+8] +
dec edi  +
test edi edi +
jl loc_4476A5  +
inc edi  +
xor esi esi +
mov edx esi +
mov eax [ebx+4Ch] +
call @Classes@TList@Get$qqri  +
cmp ebp eax +
jnz loc_4476A1  +
xor eax eax +
mov [ebp+4] eax +
mov edx esi +
mov eax [ebx+4Ch] +
call @Classes@TList@Delete$qqri  +
jmp loc_4476A5  +
inc esi  +
dec edi  +
jnz loc_447682  +
pop ebp  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov [edx+4] eax +
mov ecx [eax+4Ch] +
test ecx ecx +
jz locret_4476BD  +
mov eax ecx +
call @Classes@TList@Add$qqrpv  +
retn   +
***
mov esi edx +
mov ebx eax +
mov eax ebx +
call sub_49F1E8  +
push edx  +
push eax  +
mov eax esi +
call sub_49F1E8  +
cmp edx [esp+8+var_4] +
jnz loc_4476DF  +
cmp eax [esp+8+var_8] +
pop edx  +
pop eax  +
jnz loc_4476FB  +
mov eax ebx +
call sub_49F1E8  +
mov ecx eax +
mov edx [esi+4] +
mov eax [ebx+4] +
call @CompareMem$qqrpvt1i  +
test al al +
jnz loc_447700  +
xor eax eax +
pop esi  +
pop ebx  +
retn   +
mov al 1 +
pop esi  +
pop ebx  +
retn   +
***
add esp 0FFFFFFF4h +
push ebx  +
push esi  +
push edi  +
mov esi edx +
mov ebx eax +
test esi esi +
jz loc_44772D  +
mov eax ebx +
call @Imglist@TCustomImageList@GetCount$qqrv  +
mov edi eax +
mov eax esi +
call @Imglist@TCustomImageList@GetCount$qqrv  +
cmp edi eax +
jz loc_447736  +
mov [ebp+var_1] 0 +
jmp loc_4477EB  +
mov eax ebx +
call @Imglist@TCustomImageList@GetCount$qqrv  +
test eax eax +
jnz loc_447755  +
mov eax esi +
call @Imglist@TCustomImageList@GetCount$qqrv  +
test eax eax +
jnz loc_447755  +
mov [ebp+var_1] 1 +
jmp loc_4477EB  +
mov dl 1 +
mov eax ds:off_49AEB4 +
call @System@TObject@$bctr$qqrv  +
mov [ebp+var_8] eax +
xor eax eax +
push ebp  +
push offset loc_4477E4  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov edx [ebp+var_8] +
mov eax ebx +
call @Imglist@TCustomImageList@WriteData$qqrp15Classes@TStream  +
mov dl 1 +
mov eax ds:off_49AEB4 +
call @System@TObject@$bctr$qqrv  +
mov [ebp+var_C] eax +
xor eax eax +
push ebp  +
push offset loc_4477C7  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov edx [ebp+var_C] +
mov eax esi +
call @Imglist@TCustomImageList@WriteData$qqrp15Classes@TStream  +
mov edx [ebp+var_C] +
mov eax [ebp+var_8] +
call @ImgList@_16463  +
mov [ebp+var_1] al +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4477CE  +
mov eax [ebp+var_C] +
call @System@TObject@Free$qqrv  +
retn   +
jmp unknown_libname_539  +
jmp loc_4477BE  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4477EB  +
mov eax [ebp+var_8] +
call @System@TObject@Free$qqrv  +
retn   +
jmp unknown_libname_539  +
jmp loc_4477DB  +
mov al [ebp+var_1] +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
push ebx  +
mov eax [ebp+arg_0] +
mov eax [eax-4] +
cmp dword ptr [eax+20h] 0 +
jz loc_44783F  +
mov eax [ebp+arg_0] +
mov eax [eax-4] +
mov ebx [eax+20h] +
mov eax ebx +
mov edx ds:off_446850 +
call @System@@IsClass$qqrp14System@TObjectp17System@TMetaClass  +
test al al +
jz loc_44783A  +
mov eax [ebp+arg_0] +
mov edx ebx +
mov eax [ebp+arg_0] +
mov eax [eax-8] +
call sub_447708  +
test al al +
jz loc_44783A  +
xor eax eax +
jmp loc_44784F  +
mov al 1 +
pop ebx  +
pop ebp  +
retn   +
mov eax [ebp+arg_0] +
mov eax [eax-8] +
call @Imglist@TCustomImageList@GetCount$qqrv  +
test eax eax +
setnle al  +
pop ebx  +
pop ebp  +
retn   +
***
add esp 0FFFFFFF8h +
push ebx  +
mov [ebp+var_4] edx +
mov [ebp+var_8] eax +
mov edx [ebp+var_4] +
mov eax [ebp+var_8] +
call @Classes@TComponent@DefineProperties$qqrp14Classes@TFiler  +
mov eax [ebp+var_8] +
push eax  +
push offset @Imglist@TCustomImageList@ReadData$qqrp15Classes@TStream  +
mov eax [ebp+var_8] +
push eax  +
push offset @Imglist@TCustomImageList@WriteData$qqrp15Classes@TStream  +
push ebp  +
call @ImgList@_16465  +
pop ecx  +
mov ecx eax +
mov edx offset _str_Bitmap.Text +
mov eax [ebp+var_4] +
mov ebx [eax] +
call dword ptr [ebx+8]  +
pop ebx  +
pop ecx  +
pop ecx  +
pop ebp  +
retn   +
***
add esp 0FFFFFFC0h +
push ebx  +
push esi  +
push edi  +
mov ebx edx +
mov [ebp+var_4] eax +
lea edx [ebp+var_18] +
mov ecx 4 +
mov eax ebx +
call @Classes@TStream@WriteBuffer$qqrpxvi  +
lea edx [ebp+var_1C] +
mov ecx 4 +
mov eax ebx +
call @Classes@TStream@WriteBuffer$qqrpxvi  +
mov dl 1 +
mov eax ds:off_45979C +
call @Graphics@TBitmap@$bctr$qqrv  +
mov [ebp+var_8] eax +
xor eax eax +
push ebp  +
push offset loc_447B30  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov eax ebx +
call sub_49F1B4  +
mov esi eax +
mov edx ebx +
mov eax [ebp+var_8] +
mov ecx [eax] +
call dword ptr [ecx+54h]  +
mov eax [ebp+var_18] +
add eax esi +
cdq   +
push edx  +
push eax  +
mov eax ebx +
call sub_49F1D4  +
mov dl 1 +
mov eax ds:off_45979C +
call @Graphics@TBitmap@$bctr$qqrv  +
mov [ebp+var_10] eax +
xor eax eax +
push ebp  +
push offset loc_447B13  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov edx ebx +
mov eax [ebp+var_10] +
mov ecx [eax] +
call dword ptr [ecx+54h]  +
mov dl 1 +
mov eax ds:off_45979C +
call @Graphics@TBitmap@$bctr$qqrv  +
mov [ebp+var_C] eax +
mov eax [ebp+var_4] +
mov edx [eax+34h] +
mov eax [ebp+var_C] +
mov ecx [eax] +
call dword ptr [ecx+40h]  +
mov eax [ebp+var_4] +
mov edx [eax+30h] +
mov eax [ebp+var_C] +
mov ecx [eax] +
call dword ptr [ecx+34h]  +
mov dl 1 +
mov eax ds:off_45979C +
call @Graphics@TBitmap@$bctr$qqrv  +
mov [ebp+var_14] eax +
mov dl 1 +
mov eax [ebp+var_14] +
call @Graphics@TBitmap@SetMonochrome$qqro  +
mov eax [ebp+var_4] +
mov edx [eax+34h] +
mov eax [ebp+var_14] +
mov ecx [eax] +
call dword ptr [ecx+40h]  +
mov eax [ebp+var_4] +
mov edx [eax+30h] +
mov eax [ebp+var_14] +
mov ecx [eax] +
call dword ptr [ecx+34h]  +
mov eax [ebp+var_4] +
mov eax [eax+30h] +
push eax  +
lea eax [ebp+var_30] +
push eax  +
mov eax [ebp+var_4] +
mov ecx [eax+34h] +
xor edx edx +
xor eax eax +
call sub_49B708  +
mov eax [ebp+var_4] +
call sub_447E10  +
xor eax eax +
push ebp  +
push offset loc_447AF6  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov eax [ebp+var_8] +
mov edx [eax] +
call dword ptr [edx+20h]  +
mov edx [ebp+var_4] +
mov ecx [edx+30h] +
cdq   +
idiv  ecx +
dec eax  +
test eax eax +
jl loc_447AD0  +
inc eax  +
mov [ebp+var_20] eax +
xor edi edi +
cmp [ebp+var_1C] 0 +
jz loc_447AD0  +
mov eax [ebp+var_8] +
mov edx [eax] +
call dword ptr [edx+2Ch]  +
mov edx [ebp+var_4] +
mov ecx [edx+34h] +
cdq   +
idiv  ecx +
mov esi eax +
dec esi  +
test esi esi +
jl loc_447AC6  +
inc esi  +
xor ebx ebx +
cmp [ebp+var_1C] 0 +
jz loc_447AC6  +
mov eax [ebp+var_4] +
mov eax [eax+30h] +
push eax  +
lea eax [ebp+var_40] +
push eax  +
mov eax [ebp+var_4] +
mov ecx [eax+34h] +
mov eax [ebp+var_4] +
mov edx [eax+30h] +
imul edx edi +
mov eax [ebp+var_4] +
mov eax [eax+34h] +
imul eax ebx +
call sub_49B730  +
lea eax [ebp+var_40] +
push eax  +
mov eax [ebp+var_8] +
call @Graphics@TBitmap@GetCanvas$qqrv  +
push eax  +
mov eax [ebp+var_C] +
call @Graphics@TBitmap@GetCanvas$qqrv  +
lea edx [ebp+var_30] +
pop ecx  +
call @Graphics@TCanvas@CopyRect$qqrrx13Windows@TRectp16Graphics@TCanvast1  +
mov eax [ebp+var_4] +
mov eax [eax+30h] +
push eax  +
lea eax [ebp+var_40] +
push eax  +
mov eax [ebp+var_4] +
mov ecx [eax+34h] +
mov eax [ebp+var_4] +
mov edx [eax+30h] +
imul edx edi +
mov eax [ebp+var_4] +
mov eax [eax+34h] +
imul eax ebx +
call sub_49B730  +
lea eax [ebp+var_40] +
push eax  +
mov eax [ebp+var_10] +
call @Graphics@TBitmap@GetCanvas$qqrv  +
push eax  +
mov eax [ebp+var_14] +
call @Graphics@TBitmap@GetCanvas$qqrv  +
lea edx [ebp+var_30] +
pop ecx  +
call @Graphics@TCanvas@CopyRect$qqrrx13Windows@TRectp16Graphics@TCanvast1  +
mov ecx [ebp+var_14] +
mov edx [ebp+var_C] +
mov eax [ebp+var_4] +
call sub_446E24  +
dec [ebp+var_1C]  +
inc ebx  +
dec esi  +
jnz loc_447A17  +
inc edi  +
dec [ebp+var_20]  +
jnz loc_4479EE  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_447AFD  +
mov eax [ebp+var_C] +
call @System@TObject@Free$qqrv  +
mov eax [ebp+var_14] +
call @System@TObject@Free$qqrv  +
mov eax [ebp+var_4] +
call @Imglist@TCustomImageList@EndUpdate$qqrv  +
retn   +
jmp unknown_libname_539  +
jmp loc_447ADD  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_447B1A  +
mov eax [ebp+var_10] +
call @System@TObject@Free$qqrv  +
retn   +
jmp unknown_libname_539  +
jmp loc_447B0A  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_447B37  +
mov eax [ebp+var_8] +
call @System@TObject@Free$qqrv  +
retn   +
jmp unknown_libname_539  +
jmp loc_447B27  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
add esp 0FFFFFFECh +
push ebx  +
push esi  +
mov [ebp+var_8] edx +
mov [ebp+var_4] eax +
push 0  +
mov ecx [ebp+var_8] +
mov dl 1 +
mov eax ds:off_49B0B8 +
call @Sitewiz@TBaseWebModuleFile@$bctr$qqrx17System@AnsiStringt1t1t128Httpapp@TWebModuleCreateMode27Httpapp@TWebModuleCacheMode55System@_Set$t27Webfact@TWebPageAccessFlags$iuc$0$iuc$1_24Sitewiz@TSiteSourceIndext1t1  +
mov [ebp+var_C] eax +
xor eax eax +
push ebp  +
push offset loc_447BA0  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov eax [ebp+var_C] +
test eax eax +
jz loc_447B7A  +
sub eax 0FFFFFFECh +
push eax  +
call ImageList_Read  +
mov edx eax +
mov eax [ebp+var_4] +
call @Imglist@TCustomImageList@SetHandle$qqrui  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_447BA7  +
mov eax [ebp+var_C] +
call @System@TObject@Free$qqrv  +
retn   +
jmp unknown_libname_539  +
jmp loc_447B97  +
mov eax [ebp+var_4] +
call sub_446B24  +
test al al +
jnz loc_447D00  +
xor ebx ebx +
mov dl 1 +
mov eax ds:off_49AEB4 +
call @System@TObject@$bctr$qqrv  +
mov [ebp+var_11+1] eax +
xor eax eax +
push ebp  +
push offset loc_447CD6  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
push 0  +
push 0  +
mov eax [ebp+var_8] +
call sub_49F1D4  +
mov edx [ebp+var_8] +
mov eax [ebp+var_11+1] +
call sub_49F8B8  +
push 0  +
push 12h  +
mov eax [ebp+var_11+1] +
call sub_49F1D4  +
lea edx [ebp-11h] +
mov ecx 1 +
mov eax [ebp+var_11+1] +
mov esi [eax] +
call dword ptr [esi+8]  +
dec eax  +
jnz loc_447C57  +
cmp byte ptr [ebp+var_11] 1 +
jnz loc_447C57  +
push 0  +
push 38h  +
mov eax [ebp+var_11+1] +
call sub_49F1D4  +
lea edx [ebp-12h] +
mov ecx 1 +
mov eax [ebp+var_11+1] +
mov esi [eax] +
call dword ptr [esi+8]  +
dec eax  +
jnz loc_447C57  +
mov al [ebp+var_12] +
or byte ptr [ebp+var_11] al +
push 0  +
push 12h  +
mov eax [ebp+var_11+1] +
call sub_49F1D4  +
lea edx [ebp+var_11] +
mov ecx 1 +
mov eax [ebp+var_11+1] +
mov ebx [eax] +
call dword ptr [ebx+0Ch]  +
dec eax  +
setz bl  +
test bl bl +
jz loc_447CC0  +
push 0  +
push 0  +
mov eax [ebp+var_11+1] +
call sub_49F1D4  +
push 0  +
mov ecx [ebp+var_11+1] +
mov dl 1 +
mov eax ds:off_49B0B8 +
call @Sitewiz@TBaseWebModuleFile@$bctr$qqrx17System@AnsiStringt1t1t128Httpapp@TWebModuleCreateMode27Httpapp@TWebModuleCacheMode55System@_Set$t27Webfact@TWebPageAccessFlags$iuc$0$iuc$1_24Sitewiz@TSiteSourceIndext1t1  +
mov [ebp+var_C] eax +
xor eax eax +
push ebp  +
push offset loc_447CB9  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov eax [ebp+var_C] +
test eax eax +
jz loc_447C93  +
sub eax 0FFFFFFECh +
push eax  +
call ImageList_Read  +
mov edx eax +
mov eax [ebp+var_4] +
call @Imglist@TCustomImageList@SetHandle$qqrui  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_447CC0  +
mov eax [ebp+var_C] +
call @System@TObject@Free$qqrv  +
retn   +
jmp unknown_libname_539  +
jmp loc_447CB0  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_447CDD  +
mov eax [ebp+var_11+1] +
call @System@TObject@Free$qqrv  +
retn   +
jmp unknown_libname_539  +
jmp loc_447CCD  +
mov eax [ebp+var_4] +
call sub_446B24  +
test al al +
jnz loc_447D00  +
mov ecx off_4EAA98 +
mov dl 1 +
mov eax ds:off_49A248 +
call @Sysutils@Exception@$bctr$qqrp20System@TResStringRec  +
call @System@@RaiseExcept$qqrv  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
push edi  +
add esp 0FFFFFFF0h +
mov edi edx +
mov esi eax +
mov eax esi +
call @Imglist@TCustomImageList@FreeHandle$qqrv  +
mov eax edi +
call sub_49F1B4  +
mov [esp+10h+var_4] eax +
mov edx esp +
mov ecx 4 +
mov eax edi +
mov ebx [eax] +
call dword ptr [ebx+8]  +
lea edx [esp+10h+var_C] +
mov ecx 4 +
mov eax edi +
mov ebx [eax] +
call dword ptr [ebx+8]  +
mov bl byte ptr [esp+10h+var_10] +
and bl 0FFh +
mov ax word ptr [esp+10h+var_10] +
shr ax 8 +
mov [esp+10h+var_8] al +
mov eax [esp+10h+var_4] +
cdq   +
push edx  +
push eax  +
mov eax edi +
call sub_49F1D4  +
mov eax [esp+10h+var_10] +
cmp eax [esp+10h+var_C] +
jz loc_447D82  +
cmp bl 49h +
jnz loc_447D82  +
cmp [esp+10h+var_8] 4Ch +
jnz loc_447D82  +
mov edx edi +
mov eax esi +
call @Imglist@TCustomImageList@ReadD3Stream$qqrp15Classes@TStream  +
jmp loc_447D8B  +
mov edx edi +
mov eax esi +
call @Imglist@TCustomImageList@ReadD2Stream$qqrp15Classes@TStream  +
add esp 10h +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push ecx  +
jle loc_447E1E  +
dec dword ptr [eax+5Ch]  +
cmp byte ptr [eax+58h] 0 +
jz loc_447E31  +
mov byte ptr [eax+58h] 0 +
mov si 0FFEFh +
call @System@@CallDynaInst$qqrv  +
pop esi  +
retn   +
***
call unknown_libname_536  +
mov ebx edx +
mov esi eax +
mov eax [esi+4] +
test eax eax +
jz loc_447E4D  +
mov edx esi +
call @Imglist@TCustomImageList@UnRegisterChanges$qqrp19Imglist@TChangeLink  +
mov edx ebx +
and dl 0FCh +
mov eax esi +
call sub_4BA7FC  +
test bl bl +
jle loc_447E64  +
mov eax esi +
call @System@@ClassDestroy$qqrp14System@TObject  +
pop esi  +
pop ebx  +
retn   +
***
jz loc_447E7B  +
mov ebx eax +
mov edx [eax+4] +
mov eax [ebx+0Ch] +
call dword ptr [ebx+8]  +
pop ebx  +
retn   +
***
xor eax eax +
push ebp  +
push offset loc_447EA5  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
inc dword_4F1718  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_447EAC  +
retn   +
jmp unknown_libname_539  +
jmp locret_447EA4  +
pop ebp  +
retn   +
***
sub dword_4F1718 1 +
retn   +
***
call unknown_libname_536  +
mov ebx edx +
mov esi eax +
mov eax [esi+5Ch] +
test eax eax +
jz loc_44891D  +
mov edx esi +
call @Actnlist@TCustomActionList@RemoveAction$qqrp25Actnlist@TContainedAction  +
mov edx ebx +
and dl 0FCh +
mov eax esi +
call sub_4A548C  +
test bl bl +
jle loc_448934  +
mov eax esi +
call @System@@ClassDestroy$qqrp14System@TObject  +
pop esi  +
pop ebx  +
retn   +
***
mov edx [eax+5Ch] +
test edx edx +
jz loc_448949  +
mov edx [edx+30h] +
xchg eax edx +
call unknown_libname_419  +
retn   +
or eax 0FFFFFFFFh +
retn   +
***
retn   +
***
mov edx [eax+5Ch] +
cmp dword ptr [eax+5Ch] 0 +
jz loc_44896D  +
mov al 1 +
retn   +
call sub_4A4F20  +
retn   +
***
push edi  +
mov esi edx +
mov ebx eax +
mov edx esi +
mov eax ebx +
call sub_4A4F80  +
mov edi [esi+2Ch] +
mov eax edi +
mov edx ds:off_448094 +
call @System@@IsClass$qqrp14System@TObjectp17System@TMetaClass  +
test al al +
jz loc_4489A1  +
mov edx edi +
mov eax ebx +
call @Actnlist@TContainedAction@SetActionList$qqrp26Actnlist@TCustomActionList  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
mov esi edx +
mov ebx eax +
mov eax ebx +
call @Actnlist@TContainedAction@GetIndex$qqrv  +
test eax eax +
jl loc_4489EB  +
mov edx [ebx+5Ch] +
mov edi [edx+30h] +
mov edx [edi+8] +
test esi esi +
jge loc_4489C9  +
xor esi esi +
cmp edx esi +
jg loc_4489D0  +
mov esi edx +
dec esi  +
cmp eax esi +
jz loc_4489EB  +
mov edx edi +
xchg eax edx +
call @Classes@TList@Delete$qqri  +
mov eax [ebx+5Ch] +
mov eax [eax+30h] +
mov ecx ebx +
mov edx esi +
call @Classes@TList@Insert$qqripv  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov esi edx +
mov ebx eax +
mov eax esi +
mov edx [ebx+58h] +
call @System@@LStrCmp$qqrv  +
jz loc_448A18  +
lea eax [ebx+58h] +
mov edx esi +
call unknown_libname_542  +
mov eax [ebx+5Ch] +
test eax eax +
jz loc_448A18  +
mov edx [eax] +
call dword ptr [edx+30h]  +
pop esi  +
pop ebx  +
retn   +
***
mov esi edx +
mov esi edx +
mov ebx eax +
test byte ptr [ebx+1Ch] 1 +
jnz loc_448A6A  +
mov eax esi +
mov edx ds:off_448094 +
call @System@@IsClass$qqrp14System@TObjectp17System@TMetaClass  +
test al al +
jz loc_448A6A  +
mov edx esi +
mov eax ebx +
call @Actnlist@TContainedAction@SetActionList$qqrp26Actnlist@TCustomActionList  +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
mov ebx eax +
mov edi [ebx+5Ch] +
test edi edi +
jz loc_448A8D  +
mov edx ebx +
mov eax edi +
mov si 0FFF3h +
call @System@@CallDynaInst$qqrv  +
test al al +
jnz loc_448ABF  +
mov eax off_4EA6C8 +
mov eax [eax] +
mov edx ebx +
call @Forms@TApplication@ExecuteAction$qqrp20Classes@TBasicAction  +
test al al +
jnz loc_448ABF  +
mov eax ebx +
call sub_4A5518  +
test al al +
jnz loc_448ABF  +
mov ecx ebx +
xor edx edx +
mov eax 0B040h +
call @Controls@SendAppMessage$qqruiii  +
dec eax  +
jz loc_448ABF  +
xor eax eax +
jmp loc_448AC1  +
mov al 1 +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
mov ebx eax +
mov edi [ebx+5Ch] +
test edi edi +
jz loc_448AE5  +
mov edx ebx +
mov eax edi +
mov si 0FFF0h +
call @System@@CallDynaInst$qqrv  +
test al al +
jnz loc_448B17  +
mov eax off_4EA6C8 +
mov eax [eax] +
mov edx ebx +
call @Forms@TApplication@UpdateAction$qqrp20Classes@TBasicAction  +
test al al +
jnz loc_448B17  +
mov eax ebx +
call sub_4A5534  +
test al al +
jnz loc_448B17  +
mov ecx ebx +
xor edx edx +
mov eax 0B03Fh +
call @Controls@SendAppMessage$qqruiii  +
dec eax  +
jz loc_448B17  +
xor eax eax +
jmp loc_448B19  +
mov al 1 +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push ecx  +
push edi  +
call unknown_libname_536  +
mov ebx edx +
mov edi eax +
mov eax [edi+34h] +
call @System@TObject@Free$qqrv  +
jmp loc_448BAE  +
mov eax esi +
call @TList@Last$qqrv  +
call @System@TObject@Free$qqrv  +
mov esi [edi+30h] +
cmp dword ptr [esi+8] 0 +
jg loc_448BA2  +
mov eax [edi+30h] +
call @System@TObject@Free$qqrv  +
mov edx ebx +
and dl 0FCh +
mov eax edi +
call sub_4A4B6C  +
test bl bl +
jle loc_448BD6  +
mov eax edi +
call @System@@ClassDestroy$qqrp14System@TObject  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
add esp 0FFFFFFF8h +
push ebx  +
push esi  +
mov [ebp+var_8] edx +
mov [ebp+var_4] eax +
mov eax [ebp+var_4] +
mov eax [eax+30h] +
mov ebx [eax+8] +
dec ebx  +
test ebx ebx +
jl loc_448C1B  +
inc ebx  +
xor esi esi +
mov eax [ebp+var_4] +
mov eax [eax+30h] +
mov eax [eax+4] +
mov eax [eax+esi*4] +
mov edx [eax+4] +
cmp edx [ebp+var_8] +
jnz loc_448C17  +
mov edx eax +
mov eax [ebp+arg_4] +
call [ebp+arg_0]  +
inc esi  +
dec ebx  +
jnz loc_448BFB  +
pop esi  +
pop ebx  +
pop ecx  +
pop ecx  +
pop ebp  +
retn 8  +
***
push edi  +
mov edi ecx +
mov esi edx +
mov ebx eax +
mov edx esi +
mov eax [ebx+30h] +
call unknown_libname_419  +
test eax eax +
jl loc_448C4F  +
mov eax esi +
mov edx ds:off_447F30 +
call unknown_libname_534  +
mov edx edi +
call @Actnlist@TContainedAction@SetIndex$qqri  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov esi edx +
mov ebx eax +
mov edx esi +
mov eax [ebx+30h] +
call @Classes@TList@Get$qqri  +
pop esi  +
pop ebx  +
retn   +
***
mov eax [eax+30h] +
mov eax [eax+8] +
retn   +
***
mov esi edx +
mov ebx eax +
mov eax [ebx+38h] +
test eax eax +
jz loc_448C85  +
mov edx [ebx+34h] +
call @Imglist@TCustomImageList@UnRegisterChanges$qqrp19Imglist@TChangeLink  +
mov eax esi +
mov [ebx+38h] eax +
test eax eax +
jz loc_448CA0  +
mov edx [ebx+34h] +
call @Imglist@TCustomImageList@RegisterChanges$qqrp19Imglist@TChangeLink  +
mov edx ebx +
mov eax [ebx+38h] +
call @Classes@TComponent@FreeNotification$qqrp18Classes@TComponent  +
pop esi  +
pop ebx  +
retn   +
***
cmp edx [eax+38h] +
jnz locret_448CAE  +
mov edx [eax] +
call dword ptr [edx+30h]  +
retn   +
***
push edi  +
mov ebx ecx +
mov edi edx +
mov esi eax +
mov ecx ebx +
mov edx edi +
mov eax esi +
call sub_4A4E3C  +
cmp bl 1 +
jnz loc_448CF3  +
cmp edi [esi+38h] +
jnz loc_448CD9  +
xor edx edx +
mov eax esi +
mov ecx [eax] +
call dword ptr [ecx+34h]  +
jmp loc_448CF3  +
mov eax edi +
mov edx ds:off_447F30 +
call @System@@IsClass$qqrp14System@TObjectp17System@TMetaClass  +
test al al +
jz loc_448CF3  +
mov edx edi +
mov eax esi +
call @Actnlist@TCustomActionList@RemoveAction$qqrp25Actnlist@TContainedAction  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov esi edx +
mov ebx eax +
mov edx esi +
mov eax [ebx+30h] +
call @Classes@TList@Add$qqrpv  +
mov [esi+5Ch] ebx +
mov edx ebx +
mov eax esi +
call @Classes@TComponent@FreeNotification$qqrp18Classes@TComponent  +
pop esi  +
pop ebx  +
retn   +
***
mov esi edx +
push edi  +
mov ebx eax +
cmp word ptr [ebx+42h] 0 +
jz loc_448D48  +
mov edx ebx +
mov eax [ebx+44h] +
call dword ptr [ebx+40h]  +
mov eax [ebx+30h] +
mov esi [eax+8] +
dec esi  +
test esi esi +
jl loc_448D68  +
inc esi  +
xor edi edi +
mov eax [ebx+30h] +
mov eax [eax+4] +
mov eax [eax+edi*4] +
mov edx [eax] +
call dword ptr [edx+30h]  +
inc edi  +
dec esi  +
jnz loc_448D56  +
test byte ptr [ebx+1Ch] 10h +
jz loc_448D96  +
mov esi [ebx+4] +
mov eax esi +
mov edx ds:off_462E1C +
call @System@@IsClass$qqrp14System@TObjectp17System@TMetaClass  +
test al al +
jz loc_448D96  +
cmp dword ptr [esi+250h] 0 +
jz loc_448D96  +
mov eax [esi+250h] +
mov edx [eax] +
call dword ptr [edx+0Ch]  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
mov [esp+1+var_1] 0 +
cmp word ptr [eax+4Ah] 0 +
jz loc_448E3F  +
mov ecx esp +
mov ebx eax +
mov eax [ebx+4Ch] +
call dword ptr [ebx+48h]  +
mov al [esp+1+var_1] +
pop edx  +
pop ebx  +
retn   +
***
mov [esp+1+var_1] 0 +
cmp word ptr [eax+52h] 0 +
jz loc_448E5F  +
mov ecx esp +
mov ebx eax +
mov eax [ebx+54h] +
call dword ptr [ebx+50h]  +
mov al [esp+1+var_1] +
pop edx  +
pop ebx  +
retn   +
***
push edi  +
push ebp  +
push ecx  +
mov [esp+1+var_1] dl +
mov ebx eax +
mov al [ebx+58h] +
cmp al [esp+1+var_1] +
jz loc_448EE8  +
mov al [esp+1+var_1] +
mov [ebx+58h] al +
cmp al 1 +
jz loc_448EE8  +
mov eax [ebx+30h] +
mov esi [eax+8] +
dec esi  +
test esi esi +
jl loc_448EE8  +
inc esi  +
xor ebp ebp +
mov eax [ebx+30h] +
mov eax [eax+4] +
mov edi [eax+ebp*4] +
mov al [esp+1+var_1] +
sub al 1 +
jb loc_448EA8  +
dec al  +
jz loc_448EC8  +
jmp loc_448EE4  +
test edi edi +
jz loc_448EBF  +
cmp byte ptr [ebx+58h] 2 +
jnz loc_448EBF  +
mov dl [edi+94h] +
mov eax edi +
call @Actnlist@TCustomAction@SetEnabled$qqro  +
mov eax edi +
mov edx [eax] +
call dword ptr [edx+44h]  +
jmp loc_448EE4  +
test edi edi +
jz loc_448EE4  +
cmp [esp+1+var_1] 2 +
jnz loc_448EE4  +
mov al [edi+6Ah] +
mov [edi+94h] al +
mov dl 1 +
mov eax edi +
call @Actnlist@TCustomAction@SetEnabled$qqro  +
inc ebp  +
dec esi  +
jnz loc_448E92  +
pop edx  +
pop ebp  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov eax [ebx+10h] +
mov edx ds:off_448424 +
call @System@@IsClass$qqrp14System@TObjectp17System@TMetaClass  +
pop ebx  +
retn   +
***
mov eax [ebx+10h] +
mov edx ds:off_448424 +
call @System@@IsClass$qqrp14System@TObjectp17System@TMetaClass  +
pop ebx  +
retn   +
***
mov eax [ebx+10h] +
mov edx ds:off_448424 +
call @System@@IsClass$qqrp14System@TObjectp17System@TMetaClass  +
pop ebx  +
retn   +
***
mov eax [ebx+10h] +
mov edx ds:off_448424 +
call @System@@IsClass$qqrp14System@TObjectp17System@TMetaClass  +
pop ebx  +
retn   +
***
mov eax [ebx+10h] +
mov edx ds:off_448424 +
call @System@@IsClass$qqrp14System@TObjectp17System@TMetaClass  +
pop ebx  +
retn   +
***
mov eax [ebx+10h] +
mov edx ds:off_448424 +
call @System@@IsClass$qqrp14System@TObjectp17System@TMetaClass  +
pop ebx  +
retn   +
***
mov eax [ebx+10h] +
mov edx ds:off_448424 +
call @System@@IsClass$qqrp14System@TObjectp17System@TMetaClass  +
pop ebx  +
retn   +
***
mov eax [ebx+10h] +
mov edx ds:off_448424 +
call @System@@IsClass$qqrp14System@TObjectp17System@TMetaClass  +
pop ebx  +
retn   +
***
mov eax [ebx+10h] +
mov edx ds:off_448424 +
call @System@@IsClass$qqrp14System@TObjectp17System@TMetaClass  +
pop ebx  +
retn   +
***
mov eax [ebx+10h] +
mov edx ds:off_448424 +
call @System@@IsClass$qqrp14System@TObjectp17System@TMetaClass  +
pop ebx  +
retn   +
***
test dl dl +
jz loc_448FF6  +
add esp 0FFFFFFF0h +
call unknown_libname_535  +
mov ebx edx +
mov esi eax +
xor edx edx +
mov eax esi +
call sub_4A5448  +
mov byte ptr [esi+6Ah] 1 +
mov dword ptr [esi+80h] 0FFFFFFFFh +
mov byte ptr [esi+86h] 1 +
xor eax eax +
mov [esi+90h] eax +
mov eax esi +
test bl bl +
jz loc_449035  +
call sub_4BABC8  +
pop large dword ptr fs:0  +
add esp 0Ch +
mov eax esi +
pop esi  +
pop ebx  +
retn   +
***
call unknown_libname_536  +
mov ebx edx +
mov esi eax +
mov eax [esi+98h] +
call @System@TObject@Free$qqrv  +
mov eax [esi+9Ch] +
call @System@TObject@Free$qqrv  +
cmp dword ptr [esi+90h] 0 +
jz loc_449071  +
lea eax [esi+90h] +
call @Sysutils@FreeAndNil$qqrpv  +
mov edx ebx +
and dl 0FCh +
mov eax esi +
call @Actnlist@TContainedAction@$bdtr$qqrv  +
test bl bl +
jle loc_449088  +
mov eax esi +
call @System@@ClassDestroy$qqrp14System@TObject  +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
push edi  +
push ebp  +
mov ebx edx +
mov ebp eax +
cmp bl [ebp+95h] +
jz loc_449191  +
mov eax [ebp+50h] +
mov edi [eax+8] +
dec edi  +
test edi edi +
jl loc_449184  +
inc edi  +
xor esi esi +
mov edx esi +
mov eax [ebp+50h] +
call @Classes@TList@Get$qqri  +
mov edx ds:off_448834 +
call @System@@IsClass$qqrp14System@TObjectp17System@TMetaClass  +
test al al +
jz loc_449180  +
mov edx esi +
mov eax [ebp+50h] +
call @Classes@TList@Get$qqri  +
mov edx ebx +
mov ecx [eax] +
call dword ptr [ecx+48h]  +
inc esi  +
dec edi  +
jnz loc_449156  +
mov [ebp+95h] bl +
mov eax ebp +
mov edx [eax] +
call dword ptr [edx+30h]  +
pop ebp  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
push ecx  +
mov [esp+4+var_4] edx +
mov ebx eax +
mov eax [esp+4+var_4] +
mov edx [ebx+64h] +
call @System@@LStrCmp$qqrv  +
jz loc_4491F2  +
mov eax [ebx+50h] +
mov esi [eax+8] +
dec esi  +
test esi esi +
jl loc_4491E0  +
inc esi  +
xor edi edi +
mov eax [ebx+50h] +
mov eax [eax+4] +
mov eax [eax+edi*4] +
mov edx ds:off_448834 +
call unknown_libname_534  +
test eax eax +
jz loc_4491DC  +
mov edx [esp+4+var_4] +
mov ecx [eax] +
call dword ptr [ecx+4Ch]  +
inc edi  +
dec esi  +
jnz loc_4491BC  +
lea eax [ebx+64h] +
mov edx [esp+4+var_4] +
call unknown_libname_542  +
mov eax ebx +
mov edx [eax] +
call dword ptr [edx+30h]  +
pop edx  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push ecx  +
push ebx  +
push esi  +
push edi  +
mov ebx edx +
mov [ebp+var_4] eax +
mov eax [ebp+var_4] +
cmp byte ptr [eax+68h] 0 +
jnz loc_4492F7  +
mov eax [ebp+var_4] +
mov byte ptr [eax+68h] 1 +
xor edx edx +
push ebp  +
push offset loc_4492F0  +
push dword ptr fs:[edx]  +
mov fs:[edx] esp +
mov eax [ebp+var_4] +
cmp bl [eax+69h] +
jz loc_4492DB  +
mov eax [ebp+var_4] +
mov eax [eax+50h] +
mov edi [eax+8] +
dec edi  +
test edi edi +
jl loc_449269  +
inc edi  +
xor esi esi +
mov eax [ebp+var_4] +
mov eax [eax+50h] +
mov eax [eax+4] +
mov eax [eax+esi*4] +
mov edx ds:off_448834 +
call unknown_libname_534  +
test eax eax +
jz loc_449265  +
mov edx ebx +
mov ecx [eax] +
call dword ptr [ecx+50h]  +
inc esi  +
dec edi  +
jnz loc_449243  +
mov eax [ebp+var_4] +
mov [eax+69h] bl +
mov eax [ebp+var_4] +
cmp dword ptr [eax+6Ch] 0 +
jle loc_4492D3  +
mov eax [ebp+var_4] +
cmp byte ptr [eax+69h] 0 +
jz loc_4492D3  +
mov eax [ebp+var_4] +
mov eax [eax+5Ch] +
call sub_448C68  +
mov edi eax +
dec edi  +
test edi edi +
jl loc_4492D3  +
inc edi  +
xor esi esi +
mov eax [ebp+var_4] +
mov eax [eax+5Ch] +
mov edx esi +
call unknown_libname_565  +
mov ebx eax +
cmp ebx [ebp+var_4] +
jz loc_4492CF  +
mov eax ebx +
mov edx ds:off_448424 +
call @System@@IsClass$qqrp14System@TObjectp17System@TMetaClass  +
test al al +
jz loc_4492CF  +
mov eax [ebx+6Ch] +
mov edx [ebp+var_4] +
cmp eax [edx+6Ch] +
jnz loc_4492CF  +
xor edx edx +
mov eax ebx +
call @Actnlist@TCustomAction@SetChecked$qqro  +
inc esi  +
dec edi  +
jnz loc_449296  +
mov eax [ebp+var_4] +
mov edx [eax] +
call dword ptr [edx+30h]  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4492F7  +
mov eax [ebp+var_4] +
mov byte ptr [eax+68h] 0 +
retn   +
jmp unknown_libname_539  +
jmp loc_4492E8  +
pop edi  +
pop esi  +
pop ebx  +
pop ecx  +
pop ebp  +
retn   +
***
push edi  +
push ecx  +
mov [esp+1+var_1] dl +
mov ebx eax +
mov al [esp+1+var_1] +
cmp al [ebx+6Ah] +
jz loc_449370  +
mov eax [ebx+5Ch] +
test eax eax +
jz loc_449331  +
mov dl [eax+58h] +
cmp dl 1 +
jnz loc_449328  +
mov al [esp+1+var_1] +
mov [ebx+6Ah] al +
jmp loc_449370  +
cmp dl 2 +
jnz loc_449331  +
mov [esp+1+var_1] 1 +
mov eax [ebx+50h] +
mov esi [eax+8] +
dec esi  +
test esi esi +
jl loc_449363  +
inc esi  +
xor edi edi +
mov eax [ebx+50h] +
mov eax [eax+4] +
mov eax [eax+edi*4] +
mov edx ds:off_448834 +
call unknown_libname_534  +
test eax eax +
jz loc_44935F  +
mov dl [esp+1+var_1] +
mov ecx [eax] +
call dword ptr [ecx+54h]  +
inc edi  +
dec esi  +
jnz loc_44933F  +
mov al [esp+1+var_1] +
mov [ebx+6Ah] al +
mov eax ebx +
mov edx [eax] +
call dword ptr [edx+30h]  +
pop edx  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
push ecx  +
mov [esp+4+var_4] edx +
mov ebx eax +
mov eax [esp+4+var_4] +
cmp eax [ebx+6Ch] +
jz loc_4493C8  +
mov eax [esp+4+var_4] +
mov [ebx+6Ch] eax +
mov eax [ebx+50h] +
mov esi [eax+8] +
dec esi  +
test esi esi +
jl loc_4493C1  +
inc esi  +
xor edi edi +
mov eax [ebx+50h] +
mov eax [eax+4] +
mov eax [eax+edi*4] +
mov edx ds:off_448834 +
call unknown_libname_534  +
test eax eax +
jz loc_4493BD  +
mov edx [esp+4+var_4] +
mov ecx [eax] +
call dword ptr [ecx+58h]  +
inc edi  +
dec esi  +
jnz loc_44939D  +
mov eax ebx +
mov edx [eax] +
call dword ptr [edx+30h]  +
pop edx  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
push edi  +
push ebp  +
mov ebp edx +
mov ebx eax +
mov eax ebp +
mov edx [ebx+78h] +
call @System@@LStrCmp$qqrv  +
jz loc_449489  +
mov eax [ebx+50h] +
mov edi [eax+8] +
dec edi  +
test edi edi +
jl loc_449478  +
inc edi  +
xor esi esi +
mov edx esi +
mov eax [ebx+50h] +
call @Classes@TList@Get$qqri  +
mov edx ds:off_448834 +
call @System@@IsClass$qqrp14System@TObjectp17System@TMetaClass  +
test al al +
jz loc_449474  +
mov edx esi +
mov eax [ebx+50h] +
call @Classes@TList@Get$qqri  +
mov edx ebp +
mov ecx [eax] +
call dword ptr [ecx+60h]  +
inc esi  +
dec edi  +
jnz loc_44944A  +
lea eax [ebx+78h] +
mov edx ebp +
call unknown_libname_542  +
mov eax ebx +
mov edx [eax] +
call dword ptr [edx+30h]  +
pop ebp  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
push ecx  +
mov [esp+4+var_4] edx +
mov ebx eax +
mov eax [esp+4+var_4] +
cmp eax [ebx+74h] +
jz loc_4494E0  +
mov eax [ebx+50h] +
mov esi [eax+8] +
dec esi  +
test esi esi +
jl loc_4494D3  +
inc esi  +
xor edi edi +
mov eax [ebx+50h] +
mov eax [eax+4] +
mov eax [eax+edi*4] +
mov edx ds:off_448834 +
call unknown_libname_534  +
test eax eax +
jz loc_4494CF  +
mov edx [esp+4+var_4] +
mov ecx [eax] +
call dword ptr [ecx+5Ch]  +
inc edi  +
dec esi  +
jnz loc_4494AF  +
mov eax [esp+4+var_4] +
mov [ebx+74h] eax +
mov eax ebx +
mov edx [eax] +
call dword ptr [edx+30h]  +
pop edx  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
push ecx  +
mov [esp+4+var_4] edx +
mov ebx eax +
mov eax [esp+4+var_4] +
mov edx [ebx+7Ch] +
call @System@@LStrCmp$qqrv  +
jz loc_449542  +
mov eax [ebx+50h] +
mov esi [eax+8] +
dec esi  +
test esi esi +
jl loc_449530  +
inc esi  +
xor edi edi +
mov eax [ebx+50h] +
mov eax [eax+4] +
mov eax [eax+edi*4] +
mov edx ds:off_448834 +
call unknown_libname_534  +
test eax eax +
jz loc_44952C  +
mov edx [esp+4+var_4] +
mov ecx [eax] +
call dword ptr [ecx+68h]  +
inc edi  +
dec esi  +
jnz loc_44950C  +
lea eax [ebx+7Ch] +
mov edx [esp+4+var_4] +
call unknown_libname_542  +
mov eax ebx +
mov edx [eax] +
call dword ptr [edx+30h]  +
pop edx  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
push ecx  +
mov [esp+4+var_4] edx +
mov ebx eax +
mov eax [esp+4+var_4] +
cmp eax [ebx+80h] +
jz loc_44959E  +
mov eax [ebx+50h] +
mov esi [eax+8] +
dec esi  +
test esi esi +
jl loc_44958E  +
inc esi  +
xor edi edi +
mov eax [ebx+50h] +
mov eax [eax+4] +
mov eax [eax+edi*4] +
mov edx ds:off_448834 +
call unknown_libname_534  +
test eax eax +
jz loc_44958A  +
mov edx [esp+4+var_4] +
mov ecx [eax] +
call dword ptr [ecx+6Ch]  +
inc edi  +
dec esi  +
jnz loc_44956A  +
mov eax [esp+4+var_4] +
mov [ebx+80h] eax +
mov eax ebx +
mov edx [eax] +
call dword ptr [edx+30h]  +
pop edx  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
push ecx  +
mov [esp+2+var_2] dx +
mov ebx eax +
mov ax [esp+2+var_2] +
cmp ax [ebx+84h] +
jz loc_449600  +
mov eax [ebx+50h] +
mov esi [eax+8] +
dec esi  +
test esi esi +
jl loc_4495EE  +
inc esi  +
xor edi edi +
mov eax [ebx+50h] +
mov eax [eax+4] +
mov eax [eax+edi*4] +
mov edx ds:off_448834 +
call unknown_libname_534  +
test eax eax +
jz loc_4495EA  +
mov dx [esp+2+var_2] +
mov ecx [eax] +
call dword ptr [ecx+70h]  +
inc edi  +
dec esi  +
jnz loc_4495C9  +
mov ax [esp+2+var_2] +
mov [ebx+84h] ax +
mov eax ebx +
mov edx [eax] +
call dword ptr [edx+30h]  +
pop edx  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
push ebp  +
mov ebx edx +
mov ebp eax +
cmp bl [ebp+86h] +
jz loc_449660  +
mov eax [ebp+50h] +
mov edi [eax+8] +
dec edi  +
test edi edi +
jl loc_449653  +
inc edi  +
xor esi esi +
mov eax [ebp+50h] +
mov eax [eax+4] +
mov eax [eax+esi*4] +
mov edx ds:off_448834 +
call unknown_libname_534  +
test eax eax +
jz loc_44964F  +
mov edx esi +
mov eax [ebp+50h] +
call @Classes@TList@Get$qqri  +
mov edx ebx +
mov ecx [eax] +
call dword ptr [ecx+74h]  +
inc esi  +
dec edi  +
jnz loc_449626  +
mov [ebp+86h] bl +
mov eax ebp +
mov edx [eax] +
call dword ptr [edx+30h]  +
pop ebp  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
mov [esp+1+var_1] 1 +
cmp word ptr [eax+8Ah] 0 +
jz loc_4496D4  +
mov ecx esp +
mov ebx eax +
mov eax [ebx+8Ch] +
call dword ptr [ebx+88h]  +
mov al [esp+1+var_1] +
pop edx  +
pop ebx  +
retn   +
***
xor eax eax +
mov edx [ebx+5Ch] +
test edx edx +
jz loc_4496EE  +
cmp byte ptr [edx+58h] 0 +
jnz loc_449728  +
mov eax ebx +
mov edx [eax] +
call dword ptr [edx+44h]  +
cmp byte ptr [ebx+6Ah] 0 +
jz loc_449711  +
cmp byte ptr [ebx+95h] 0 +
jz loc_449711  +
mov dl [ebx+69h] +
xor dl 1 +
mov eax ebx +
call @Actnlist@TCustomAction@SetChecked$qqro  +
cmp byte ptr [ebx+6Ah] 0 +
jz loc_449722  +
mov eax ebx +
call @Actnlist@TContainedAction@Execute$qqrv  +
test al al +
jnz loc_449726  +
xor eax eax +
jmp loc_449728  +
mov al 1 +
pop ebx  +
retn   +
***
cmp dword ptr [ebx+90h] 0 +
jnz loc_44974A  +
mov dl 1 +
mov eax ds:off_4482D4 +
call @System@TObject@$bctr$qqrv  +
mov [ebx+90h] eax +
mov eax [ebx+90h] +
pop ebx  +
retn   +
***
mov esi edx +
mov ebx eax +
cmp dword ptr [ebx+90h] 0 +
jnz loc_449775  +
mov dl 1 +
mov eax ds:off_4482D4 +
call @System@TObject@$bctr$qqrv  +
mov [ebx+90h] eax +
mov edx esi +
mov eax [ebx+90h] +
mov ecx [eax] +
call dword ptr [ecx+8]  +
pop esi  +
pop ebx  +
retn   +
***
mov ebx eax +
mov esi [ebx+90h] +
test esi esi +
jz loc_4497A1  +
mov eax esi +
mov edx [eax] +
call dword ptr [edx+14h]  +
test eax eax +
jg loc_4497A6  +
xor eax eax +
pop esi  +
pop ebx  +
retn   +
mov al 1 +
pop esi  +
pop ebx  +
retn   +
***
call @System@@CallDynaInst$qqrv  +
push edi  +
mov esi edx +
mov ebx eax +
mov edx esi +
mov eax ebx +
call sub_49EBBC  +
mov edi eax +
mov eax esi +
call sub_451EEC  +
movzx ecx ax +
mov edx edi +
mov eax ebx +
mov ebx [eax] +
call dword ptr [ebx+24h]  +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
test dl dl +
jz loc_4497F2  +
add esp 0FFFFFFF0h +
call unknown_libname_535  +
mov ebx edx +
mov esi eax +
xor edx edx +
mov eax esi +
call @Actnlist@TCustomAction@$bctr$qqrp18Classes@TComponent  +
mov byte ptr [esi+60h] 1 +
mov eax esi +
test bl bl +
jz loc_449818  +
call sub_4BABC8  +
pop large dword ptr fs:0  +
add esp 0Ch +
mov eax esi +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
push ebp  +
push ecx  +
mov ebp edx +
mov edi eax +
mov [esp+4+var_4] 0FFFFFFFFh +
mov eax edi +
mov edx [eax] +
call dword ptr [edx+14h]  +
mov esi eax +
dec esi  +
test esi esi +
jl loc_449858  +
inc esi  +
xor ebx ebx +
mov edx ebx +
mov eax edi +
mov ecx [eax] +
call dword ptr [ecx+18h]  +
cmp bp ax +
jnz loc_449854  +
mov [esp+4+var_4] ebx +
jmp loc_449858  +
inc ebx  +
dec esi  +
jnz loc_449841  +
mov eax [esp+4+var_4] +
pop edx  +
pop ebp  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
xor eax eax +
push ebp  +
push offset loc_449889  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
inc dword_4F171C  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_449890  +
retn   +
jmp unknown_libname_539  +
jmp locret_449888  +
pop ebp  +
retn   +
***
sub dword_4F171C 1 +
jnb locret_4498BD  +
mov edx ds:off_471D9C +
mov eax ds:off_448094 +
call sub_49C3C0  +
mov edx ds:off_471D9C +
mov eax ds:off_447F30 +
call sub_49C3C0  +
retn   +
***
xor eax eax +
push ebp  +
push offset loc_4498E5  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
inc dword_4F1720  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4498EC  +
retn   +
jmp unknown_libname_539  +
jmp locret_4498E4  +
pop ebp  +
retn   +
***
sub dword_4F1720 1 +
retn   +
***
test dl dl +
jz loc_449C9E  +
add esp 0FFFFFFF0h +
call unknown_libname_535  +
mov ebx edx +
mov esi eax +
xor edx edx +
mov eax esi +
call @Controls@TWinControl@$bctr$qqrp18Classes@TComponent  +
mov al ds:byte_449CE0 +
mov [esi+208h] al +
mov byte ptr [esi+209h] 1 +
mov byte ptr [esi+20Ah] 2 +
mov eax esi +
test bl bl +
jz loc_449CD9  +
call sub_4BABC8  +
pop large dword ptr fs:0  +
add esp 0Ch +
mov eax esi +
pop esi  +
pop ebx  +
retn   +
***
mov [esp+1+var_1] dl +
mov ebx eax +
mov al [esp+1+var_1] +
cmp al [ebx+208h] +
jz loc_449D06  +
mov al [esp+1+var_1] +
mov [ebx+208h] al +
mov eax ebx +
call @Controls@TWinControl@RecreateWnd$qqrv  +
pop edx  +
pop ebx  +
retn   +
***
cmp dl [eax+209h] +
jz locret_449D1F  +
mov [eax+209h] dl +
call @Controls@TWinControl@RecreateWnd$qqrv  +
retn   +
***
push edi  +
add esp 0FFFFFFE0h +
mov esi edx +
mov ebx eax +
lea edi [esp+20h+var_10] +
push esp  +
mov eax ebx +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call GetClientRect  +
push edi  +
mov eax ebx +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call GetWindowRect  +
push 2  +
push edi  +
mov eax ebx +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
push 0  +
call MapWindowPoints  +
mov eax [edi+4] +
neg eax  +
push eax  +
mov eax [edi] +
neg eax  +
push eax  +
lea eax [esp+28h+rc] +
push eax  +
call OffsetRect  +
mov eax [esp+0Ch] +
push eax  +
mov eax [esp+0Ch] +
push eax  +
mov eax [esp+0Ch] +
push eax  +
mov eax [esp+2Ch+rc] +
push eax  +
push esi  +
call ExcludeClipRect  +
mov eax [edi+4] +
neg eax  +
push eax  +
mov eax [edi] +
neg eax  +
push eax  +
push edi  +
call OffsetRect  +
xor eax eax +
mov al [ebx+208h] +
xor edx edx +
mov dl [ebx+1A5h] +
or eax dword_4E6024[edx*4] +
or eax 2000h +
push eax  +
xor eax eax +
mov al [ebx+209h] +
mov eax dword_4E600C[eax*4] +
xor edx edx +
mov dl [ebx+20Ah] +
or eax dword_4E6018[edx*4] +
push eax  +
push edi  +
push esi  +
call DrawEdge  +
mov eax [edi+0Ch] +
push eax  +
mov eax [edi+8] +
push eax  +
mov eax [edi+4] +
push eax  +
mov eax [edi] +
push eax  +
push esi  +
call IntersectClipRect  +
mov eax [ebx+170h] +
call @Graphics@TBrush@GetHandle$qqrv  +
push eax  +
push edi  +
push esi  +
call FillRect  +
add esp 20h +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
push ebp  +
mov edi edx +
mov ebx eax +
mov esi [edi+8] +
mov eax [ebx+16Ch] +
neg eax  +
push eax  +
mov edx [ebx+16Ch] +
neg edx  +
push eax  +
mov ebp esi +
push ebp  +
call InflateRect  +
xor eax eax +
cmp byte ptr [ebx+209h] 0 +
jz loc_449E55  +
inc eax  +
cmp byte ptr [ebx+20Ah] 0 +
jz loc_449E5F  +
inc eax  +
mov esi ebp +
test byte ptr [ebx+208h] 1 +
jz loc_449E6C  +
add [esi] eax +
test byte ptr [ebx+208h] 2 +
jz loc_449E78  +
add [esi+4] eax +
test byte ptr [ebx+208h] 4 +
jz loc_449E84  +
sub [esi+8] eax +
test byte ptr [ebx+208h] 8 +
jz loc_449E90  +
sub [esi+0Ch] eax +
mov edx edi +
mov eax ebx +
call @Controls@TWinControl@WMNCCalcSize$qqrr22Messages@TWMNCCalcSize  +
pop ebp  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
add esp 0FFFFFFF8h +
mov [ebp+var_4] eax +
mov eax [ebp+var_4] +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call GetWindowDC  +
mov [ebp+hDC] eax +
xor eax eax +
push ebp  +
push offset loc_449EF6  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov edx [ebp+hDC] +
mov eax [ebp+var_4] +
mov ecx [eax] +
call dword ptr [ecx+0C4h]  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_449EFD  +
mov eax [ebp+hDC] +
push eax  +
mov eax [ebp+var_4] +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call ReleaseDC  +
retn   +
jmp unknown_libname_539  +
jmp loc_449EE3  +
pop ecx  +
pop ecx  +
pop ebp  +
retn   +
***
mov esi edx +
mov ebx eax +
mov eax ebx +
call @Controls@TWinControl@RecreateWnd$qqrv  +
mov edx esi +
mov eax ebx +
call @Controls@TWinControl@CMBorderChanged$qqrr17Messages@TMessage  +
pop esi  +
pop ebx  +
retn   +
***
mov eax ebx +
call @Controls@TWinControl@CMCtl3DChanged$qqrr17Messages@TMessage  +
mov al ds:byte_449F40 +
cmp al [ebx+208h] +
jz loc_449F3E  +
mov eax ebx +
call @Controls@TWinControl@RecreateWnd$qqrv  +
pop ebx  +
retn   +
***
test dl dl +
jz loc_449F52  +
add esp 0FFFFFFF0h +
call unknown_libname_535  +
mov ebx edx +
mov esi eax +
xor edx edx +
mov eax esi +
call @Forms@TCustomDockForm@$bctr$qqrp18Classes@TComponent  +
mov edx 1 +
mov eax esi +
call @Controls@TWinControl@SetBorderWidth$qqri  +
mov eax esi +
test bl bl +
jz loc_449F80  +
call sub_4BABC8  +
pop large dword ptr fs:0  +
add esp 0Ch +
mov eax esi +
pop esi  +
pop ebx  +
retn   +
***
mov edx ebx +
call @Forms@TCustomForm@CreateParams$qqrr22Controls@TCreateParams  +
or dword ptr [ebx+4] 80000000h +
pop ebx  +
retn   +
***
add esp 0FFFFFFE8h +
push ebx  +
push esi  +
push edi  +
mov [ebp+var_C] ecx +
mov [ebp+var_8] edx +
mov [ebp+var_4] eax +
mov bl 1 +
mov eax [ebp+var_4] +
cmp byte ptr [eax+301h] 0 +
jnz loc_44A119  +
mov eax [ebp+var_4] +
cmp byte ptr [eax+300h] 0 +
jz loc_44A119  +
mov eax [ebp+var_4] +
call @Controls@TWinControl@GetDockClientCount$qqrv  +
test eax eax +
jz loc_44A119  +
mov eax [ebp+var_8] +
mov eax [eax] +
mov edx [ebp+var_4] +
cmp eax [edx+48h] +
jnz loc_449FFE  +
mov eax [ebp+var_C] +
mov eax [eax] +
mov edx [ebp+var_4] +
cmp eax [edx+4Ch] +
jz loc_44A119  +
mov edi [ebp+var_8] +
mov edi [edi] +
mov esi [ebp+var_C] +
mov esi [esi] +
mov eax [ebp+var_4] +
mov al [eax+300h] +
sub al 1 +
jb loc_44A119  +
jz loc_44A021  +
dec al  +
jz loc_44A02C  +
jmp loc_44A037  +
mov eax [ebp+var_4] +
add esi [eax+2F8h] +
jmp loc_44A03E  +
mov eax [ebp+var_4] +
add edi [eax+2FCh] +
jmp loc_44A03E  +
xor ebx ebx +
jmp loc_44A119  +
mov eax [ebp+var_4] +
mov eax [eax+48h] +
mov edx [ebp+var_4] +
mov [edx+2F0h] eax +
mov eax [ebp+var_4] +
mov eax [eax+4Ch] +
mov edx [ebp+var_4] +
mov [edx+2F4h] eax +
xor edx edx +
mov eax [ebp+var_4] +
call @Controls@TWinControl@GetDockClients$qqri  +
mov [ebp+var_18] eax +
mov eax [ebp+var_4] +
mov eax [eax+48h] +
mov edx [ebp+var_18] +
sub eax [edx+48h] +
mov [ebp+var_10] eax +
mov eax [ebp+var_4] +
mov eax [eax+4Ch] +
mov edx [ebp+var_18] +
sub eax [edx+4Ch] +
mov [ebp+var_14] eax +
mov eax [ebp+var_4] +
mov byte ptr [eax+301h] 1 +
xor eax eax +
push ebp  +
push offset loc_44A0D6  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
sub edi [ebp+var_10] +
push edi  +
sub esi [ebp+var_14] +
push esi  +
mov eax [ebp+var_18] +
mov ecx [eax+44h] +
mov eax [ebp+var_18] +
mov edx [eax+40h] +
mov eax [ebp+var_18] +
mov ebx [eax] +
call dword ptr [ebx+84h]  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_44A0DD  +
mov eax [ebp+var_4] +
mov byte ptr [eax+301h] 0 +
retn   +
jmp unknown_libname_539  +
jmp loc_44A0CB  +
mov eax [ebp-18h] +
mov eax [eax+48h] +
add eax [ebp-10h] +
mov edx [ebp-8] +
mov [edx] eax +
mov eax [ebp-18h] +
mov eax [eax+4Ch] +
add eax [ebp-14h] +
mov edx [ebp-0Ch] +
mov [edx] eax +
mov eax [ebp-4] +
mov eax [eax+48h] +
mov edx [ebp-8] +
cmp eax [edx] +
jnz loc_44A117  +
mov eax [ebp-4] +
mov eax [eax+4Ch] +
mov edx [ebp-0Ch] +
cmp eax [edx] +
jnz loc_44A117  +
xor ebx ebx +
jmp loc_44A119  +
mov bl 1 +
mov eax ebx +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
mov ebx edx +
push ebx  +
mov eax [ebp+arg_0] +
mov eax [eax-4] +
cmp byte ptr [eax+229h] 0 +
jz loc_44A1C2  +
mov eax [ebp+arg_0] +
mov eax [eax-4] +
test byte ptr [eax+228h] 1 +
jz loc_44A1C2  +
mov eax [ebp+arg_0] +
mov eax [eax-4] +
cmp byte ptr [eax+22Fh] 1 +
jz loc_44A1C2  +
push 0  +
mov eax [ebp+arg_0] +
mov eax [eax-4] +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call GetSystemMenu  +
mov ebx eax +
push 0  +
push 0F130h  +
push ebx  +
call DeleteMenu  +
push 0  +
push 0F030h  +
push ebx  +
call DeleteMenu  +
push 0  +
push 0F020h  +
push ebx  +
call DeleteMenu  +
push 0  +
push 0F120h  +
push ebx  +
call DeleteMenu  +
pop ebx  +
pop ebp  +
retn   +
***
push ecx  +
mov [ebp+var_4] eax +
mov eax [ebp+var_4] +
call @Forms@TCustomForm@WMNCCreate$qqrr20Messages@TWMNCCreate  +
mov eax [ebp+var_4] +
test byte ptr [eax+1Ch] 10h +
jnz loc_44A1E7  +
push ebp  +
call @ToolWin@_16415  +
pop ecx  +
pop ecx  +
pop ebp  +
retn   +
***
add esp 0FFFFFFF0h +
mov ebx edx +
mov esi eax +
mov edx ebx +
mov eax esi +
call @Forms@TCustomDockForm@WMNCHitTest$qqrr21Messages@TWMNCHitTest  +
mov edx esp +
mov eax esi +
call @Controls@TControl@GetBoundsRect$qqrv  +
push 20h  +
call GetSystemMetrics  +
mov esi eax +
push 21h  +
call GetSystemMetrics  +
neg eax  +
push eax  +
neg esi  +
push esi  +
lea eax [esp+18h+rc] +
push eax  +
call InflateRect  +
mov eax [ebx+0Ch] +
cmp eax 11h +
ja loc_44A2E1  +
mov al ds:byte_44A240[eax] +
jmp ds:off_44A252[eax*4]  +
movsx eax word ptr [ebx+0Ah] +
cmp eax [esp+10h+rc.top] +
jge loc_44A27D  +
mov dword ptr [ebx+0Ch] 0Ch +
jmp loc_44A2E1  +
mov dword ptr [ebx+0Ch] 0Ah +
jmp loc_44A2E1  +
movsx eax word ptr [ebx+0Ah] +
cmp eax [esp+10h+rc.top] +
jge loc_44A299  +
mov dword ptr [ebx+0Ch] 0Ch +
jmp loc_44A2E1  +
mov dword ptr [ebx+0Ch] 0Bh +
jmp loc_44A2E1  +
mov dword ptr [ebx+0Ch] 2 +
jmp loc_44A2E1  +
movsx eax word ptr [ebx+0Ah] +
cmp eax [esp+10h+rc.bottom] +
jle loc_44A2BE  +
mov dword ptr [ebx+0Ch] 0Fh +
jmp loc_44A2E1  +
mov dword ptr [ebx+0Ch] 0Ah +
jmp loc_44A2E1  +
movsx eax word ptr [ebx+0Ah] +
cmp eax [esp+10h+rc.bottom] +
jle loc_44A2DA  +
mov dword ptr [ebx+0Ch] 0Fh +
jmp loc_44A2E1  +
mov dword ptr [ebx+0Ch] 0Bh +
add esp 10h +
pop esi  +
pop ebx  +
retn   +
***
mov byte ptr [eax+300h] 0 +
mov ecx [edx+4] +
add ecx 0FFFFFFF6h +
sub ecx 2 +
jb loc_44A303  +
jz loc_44A30C  +
sub ecx 3 +
jz loc_44A30C  +
jmp loc_44A313  +
mov byte ptr [eax+300h] 1 +
jmp loc_44A313  +
mov byte ptr [eax+300h] 2 +
call @Forms@TCustomDockForm@WMNCLButtonDown$qqrr24Messages@TWMNCHitMessage  +
retn   +
***
mov eax ebx +
mov eax [edx+4] +
and eax 0FFF0h +
cmp eax 0F000h +
jnz loc_44A37A  +
xor eax eax +
mov [ebx+2FCh] eax +
xor eax eax +
mov [ebx+2F8h] eax +
mov eax ebx +
call @Forms@TCustomForm@WMSysCommand$qqrr22Messages@TWMSysCommand  +
mov byte ptr [ebx+300h] 0 +
pop ebx  +
retn   +
***
xor eax eax +
push ebp  +
push offset loc_44A3B1  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
inc dword_4F1724  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_44A3B8  +
retn   +
jmp unknown_libname_539  +
jmp locret_44A3B0  +
pop ebp  +
retn   +
***
sub dword_4F1724 1 +
retn   +
***
jmp fword ptr [eax+eax+0]  +
***
daa   +
add al [eax] +
jmp dword ptr [edi]  +
***
jmp dword ptr [eax]  +
***
jmp eax  +
***
jmp fword ptr [eax+10044D0h]  +
***
jmp dword ptr [eax+0]  +
***
jmp dword ptr [eax+1004766h]  +
***
jmp fword ptr [esi]  +
***
retf 0ACFFh  +
***
jmp fword ptr [eax+eax+0]  +
***
jmp eax  +
***
pop ss  +
add [ebx] al +
dec ebp  +
imul ebp dword ptr (byte_4CBFFF-4CC053h)[esi] +
add al [eax] +
jmp dword ptr [edx+edi*8+44h]  +
***
jmp fword ptr [eax+eax+0]  +
***
add al [eax] +
jmp dword ptr [eax]  +
***
jmp fword ptr [eax]  +
***
jmp eax  +
***
mov dl 1 +
test eax eax +
jz loc_44CBC7  +
cmp dword ptr [eax+7Ch] 0 +
jnz loc_44CBC9  +
mov eax [eax+30h] +
test eax eax +
jnz loc_44CBBA  +
xor edx edx +
mov eax edx +
retn   +
***
test dl dl +
jz loc_44CCDE  +
add esp 0FFFFFFF0h +
call unknown_libname_535  +
mov ebx edx +
mov esi eax +
xor edx edx +
mov eax esi +
call sub_47DD98  +
mov eax [esi+50h] +
or eax ds:dword_44CD38 +
mov [esi+50h] eax +
mov edx 41h +
mov eax esi +
call @Controls@TControl@SetWidth$qqri  +
mov edx 11h +
mov eax esi +
call @Controls@TControl@SetHeight$qqri  +
mov byte ptr [esi+16Dh] 1 +
mov byte ptr [esi+170h] 1 +
mov eax esi +
test bl bl +
jz loc_44CD32  +
call sub_4BABC8  +
pop large dword ptr fs:0  +
add esp 0Ch +
mov eax esi +
pop esi  +
pop ebx  +
retn   +
***
mov esi edx +
mov ebx eax +
mov edx esi +
mov eax ebx +
call @TControl@GetText$qqrv  +
pop esi  +
pop ebx  +
retn   +
***
push 0  +
push ebx  +
push esi  +
push edi  +
mov esi ecx +
mov edi edx +
mov ebx eax +
xor eax eax +
push ebp  +
push offset loc_44CEA6  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
lea edx [ebp+var_4] +
mov eax ebx +
mov ecx [eax] +
call dword ptr [ecx+90h]  +
test esi 400h +
jz loc_44CDAE  +
cmp [ebp+var_4] 0 +
jz loc_44CDA1  +
cmp byte ptr [ebx+170h] 0 +
jz loc_44CDAE  +
mov eax [ebp+var_4] +
cmp byte ptr [eax] 26h +
jnz loc_44CDAE  +
mov eax [ebp+var_4] +
cmp byte ptr [eax+1] 0 +
jnz loc_44CDAE  +
lea eax [ebp+var_4] +
mov edx offset _str__.Text +
call @System@@LStrCat$qqrv  +
cmp byte ptr [ebx+170h] 0 +
jnz loc_44CDBD  +
or esi 800h +
mov edx esi +
mov eax ebx +
call @Controls@TControl@DrawTextBiDiModeFlags$qqri  +
mov esi eax +
mov edx [ebx+68h] +
mov eax [ebx+160h] +
call unknown_libname_155  +
mov eax ebx +
mov edx [eax] +
call dword ptr [edx+50h]  +
test al al +
jnz loc_44CE6B  +
push 1  +
push 1  +
push edi  +
call OffsetRect  +
mov eax [ebx+160h] +
mov eax [eax+0Ch] +
mov edx 80000014h +
call @Graphics@TFont@SetColor$qqr15Graphics@TColor  +
push esi  +
push edi  +
mov eax [ebp+var_4] +
call sub_4BB610  +
push eax  +
mov eax [ebp+var_4] +
call unknown_libname_550  +
push eax  +
mov eax [ebx+160h] +
call @Graphics@TCanvas@GetHandle$qqrv  +
push eax  +
call DrawTextA  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push edi  +
call OffsetRect  +
mov eax [ebx+160h] +
mov eax [eax+0Ch] +
mov edx 80000010h +
call @Graphics@TFont@SetColor$qqr15Graphics@TColor  +
push esi  +
push edi  +
mov eax [ebp+var_4] +
call sub_4BB610  +
push eax  +
mov eax [ebp+var_4] +
call unknown_libname_550  +
push eax  +
mov eax [ebx+160h] +
call @Graphics@TCanvas@GetHandle$qqrv  +
push eax  +
call DrawTextA  +
jmp loc_44CE90  +
push esi  +
push edi  +
mov eax [ebp+var_4] +
call sub_4BB610  +
push eax  +
mov eax [ebp+var_4] +
call unknown_libname_550  +
push eax  +
mov eax [ebx+160h] +
call @Graphics@TCanvas@GetHandle$qqrv  +
push eax  +
call DrawTextA  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_44CEAD  +
lea eax [ebp+var_4] +
call unknown_libname_540  +
retn   +
jmp unknown_libname_539  +
jmp loc_44CE9D  +
pop edi  +
pop esi  +
pop ebx  +
pop ecx  +
pop ebp  +
retn   +
***
push edi  +
mov ebx eax +
mov eax ebx +
call @Controls@TControl@Loaded$qqrv  +
mov eax ebx +
mov si 0FFC7h +
call @System@@CallDynaInst$qqrv  +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
add esp 0FFFFFFECh +
mov edi eax +
test byte ptr [edi+1Ch] 2 +
jnz loc_44D09E  +
cmp byte ptr [edi+16Dh] 0 +
jz loc_44D09E  +
lea edx [esp+14h+var_13] +
mov eax edi +
mov ecx [eax] +
call dword ptr [ecx+44h]  +
push 0  +
call GetDC  +
mov ebx eax +
mov edx ebx +
mov eax [edi+160h] +
call @Graphics@TCanvas@SetHandle$qqrui  +
xor eax eax +
mov al [edi+16Fh] +
mov cx word_4E6040[eax*2] +
or cx 440h +
movzx ecx cx +
lea edx [esp+14h+var_13] +
mov eax edi +
mov si 0FFC6h +
call @System@@CallDynaInst$qqrv  +
xor edx edx +
mov eax [edi+160h] +
call @Graphics@TCanvas@SetHandle$qqrui  +
push ebx  +
push 0  +
call ReleaseDC  +
mov ebx [edi+40h] +
mov al [edi+16Ch] +
mov [esp+14h+var_14] al +
mov eax edi +
mov si 0FFC8h +
call @System@@CallDynaInst$qqrv  +
test al al +
jz loc_44D076  +
mov eax esp +
call @Controls@ChangeBiDiModeAlignment$qqrr18Classes@TAlignment  +
cmp [esp+14h+var_14] 1 +
jnz loc_44D085  +
mov eax [edi+48h] +
sub eax [esp+14h+var_B] +
add ebx eax +
mov eax [esp+14h+var_B] +
push eax  +
mov eax [esp+18h+var_7] +
push eax  +
mov ecx [edi+44h] +
mov edx ebx +
mov eax edi +
mov ebx [eax] +
call dword ptr [ebx+84h]  +
add esp 14h +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
cmp dl [esi+16Ch] +
jz loc_44D0C0  +
mov [esi+16Ch] dl +
mov eax esi +
mov edx [eax] +
call dword ptr [edx+7Ch]  +
pop esi  +
retn   +
***
jz loc_44D0DC  +
mov [eax+16Dh] dl +
mov si 0FFC7h +
call @System@@CallDynaInst$qqrv  +
pop esi  +
retn   +
***
test byte ptr [eax+50h] 40h +
setnz al  +
xor al 1 +
retn   +
***
mov [eax+168h] edx +
test edx edx +
jz locret_44D0FC  +
xchg eax edx +
call @Classes@TComponent@FreeNotification$qqrp18Classes@TComponent  +
retn   +
***
push esi  +
mov esi eax +
cmp dl [esi+170h] +
jz loc_44D118  +
mov [esi+170h] dl +
mov eax esi +
mov edx [eax] +
call dword ptr [edx+7Ch]  +
pop esi  +
retn   +
***
mov ebx edx +
mov esi eax +
mov eax esi +
call unknown_libname_90  +
cmp bl al +
jz loc_44D152  +
test bl bl +
jz loc_44D140  +
mov eax ds:dword_44D158 +
not eax  +
and eax [esi+50h] +
mov [esi+50h] eax +
jmp loc_44D14B  +
mov eax ds:dword_44D158 +
or eax [esi+50h] +
mov [esi+50h] eax +
mov eax esi +
mov edx [eax] +
call dword ptr [edx+7Ch]  +
pop esi  +
pop ebx  +
retn   +
***
cmp dl [esi+16Eh] +
jz loc_44D174  +
mov [esi+16Eh] dl +
mov eax esi +
mov edx [eax] +
call dword ptr [edx+7Ch]  +
pop esi  +
retn   +
***
mov edi eax +
cmp dl [edi+16Fh] +
jz loc_44D19C  +
mov [edi+16Fh] dl +
mov eax edi +
mov si 0FFC7h +
call @System@@CallDynaInst$qqrv  +
mov eax edi +
mov edx [eax] +
call dword ptr [edx+7Ch]  +
pop edi  +
pop esi  +
retn   +
***
push edi  +
mov ebx ecx +
mov esi edx +
mov edi eax +
mov ecx ebx +
mov edx esi +
mov eax edi +
call @Controls@TControl@Notification$qqrp18Classes@TComponent18Classes@TOperation  +
cmp bl 1 +
jnz loc_44D1C9  +
cmp esi [edi+168h] +
jnz loc_44D1C9  +
xor eax eax +
mov [edi+168h] eax +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov ebx eax +
mov eax ebx +
mov edx [eax] +
call dword ptr [edx+7Ch]  +
mov eax ebx +
mov si 0FFC7h +
call @System@@CallDynaInst$qqrv  +
pop esi  +
pop ebx  +
retn   +
***
mov eax esi +
call sub_4780BC  +
mov eax esi +
mov si 0FFC7h +
call @System@@CallDynaInst$qqrv  +
pop esi  +
retn   +
***
push 0  +
push ebx  +
push esi  +
push edi  +
mov edi edx +
mov ebx eax +
xor eax eax +
push ebp  +
push offset loc_44D291  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
cmp dword ptr [ebx+168h] 0 +
jz loc_44D27B  +
mov eax ebx +
mov edx [eax] +
call dword ptr [edx+50h]  +
test al al +
jz loc_44D27B  +
cmp byte ptr [ebx+170h] 0 +
jz loc_44D27B  +
lea edx [ebp+var_4] +
mov eax ebx +
call @TControl@GetText$qqrv  +
mov edx [ebp+var_4] +
mov ax [edi+4] +
call @Forms@IsAccel$qqrusx17System@AnsiString  +
test al al +
jz loc_44D27B  +
mov ebx [ebx+168h] +
mov eax ebx +
mov si 0FFB8h +
call @System@@CallDynaInst$qqrv  +
test al al +
jz loc_44D27B  +
mov eax ebx +
mov edx [eax] +
call dword ptr [edx+0C0h]  +
mov dword ptr [edi+0Ch] 1 +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_44D298  +
lea eax [ebp+var_4] +
call unknown_libname_540  +
retn   +
jmp unknown_libname_539  +
jmp loc_44D288  +
pop edi  +
pop esi  +
pop ebx  +
pop ecx  +
pop ebp  +
retn   +
***
mov eax ebx +
mov eax ebx +
test dl dl +
jz loc_44D2F6  +
add esp 0FFFFFFF0h +
call unknown_libname_535  +
mov ebx edx +
mov esi eax +
xor edx edx +
mov eax esi +
call @Controls@TWinControl@$bctr$qqrp18Classes@TComponent  +
mov eax off_4EA6D4 +
cmp byte ptr [eax] 0 +
jz loc_44D317  +
mov eax ds:dword_44D388 +
mov [esi+50h] eax +
jmp loc_44D31F  +
mov eax ds:dword_44D38C +
mov [esi+50h] eax +
mov edx 79h +
mov eax esi +
call @Controls@TControl@SetWidth$qqri  +
mov edx 19h +
mov eax esi +
call @Controls@TControl@SetHeight$qqri  +
mov dl 1 +
mov eax esi +
call @Controls@TWinControl@SetTabStop$qqro  +
xor edx edx +
mov eax esi +
call @Controls@TControl@SetParentColor$qqro  +
mov byte ptr [esi+20Ch] 1 +
mov byte ptr [esi+20Fh] 1 +
mov byte ptr [esi+210h] 1 +
mov byte ptr [esi+211h] 1 +
mov eax esi +
call @Stdctrls@TCustomEdit@AdjustHeight$qqrv  +
mov eax esi +
test bl bl +
jz loc_44D381  +
call sub_4BABC8  +
pop large dword ptr fs:0  +
add esp 0Ch +
mov eax esi +
pop esi  +
pop ebx  +
retn   +
***
mov esi edx +
mov ebx eax +
push 0  +
push esi  +
push 0C5h  +
mov eax ebx +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call SendMessageA  +
pop esi  +
pop ebx  +
retn   +
***
cmp dl [eax+20Fh] +
cmp dl [ebx+20Ch] +
jz loc_44D3E3  +
mov [ebx+20Ch] dl +
mov eax ebx +
call @Stdctrls@TCustomEdit@UpdateHeight$qqrv  +
mov eax ebx +
call @Controls@TWinControl@RecreateWnd$qqrv  +
pop ebx  +
retn   +
***
mov esi edx +
mov ebx eax +
cmp esi [ebx+208h] +
jz loc_44D427  +
mov [ebx+208h] esi +
mov eax ebx +
call @Controls@TWinControl@HandleAllocated$qqrv  +
test al al +
jz loc_44D427  +
mov edx esi +
mov eax ebx +
mov ecx [eax] +
call dword ptr [ecx+0C4h]  +
pop esi  +
pop ebx  +
retn   +
***
cmp dl [eax+212h] +
mov esi eax +
mov bl [esi+215h] +
mov eax esi +
call @Controls@TWinControl@HandleAllocated$qqrv  +
test al al +
jz loc_44D470  +
push 0  +
push 0  +
push 0B8h  +
mov eax esi +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call SendMessageA  +
test eax eax +
setnz bl  +
mov eax ebx +
pop esi  +
pop ebx  +
retn   +
***
mov ebx edx +
mov esi eax +
mov eax esi +
call @Controls@TWinControl@HandleAllocated$qqrv  +
test al al +
jz loc_44D4A5  +
push 0  +
xor eax eax +
mov al bl +
push eax  +
push 0B9h  +
mov eax esi +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call SendMessageA  +
pop esi  +
pop ebx  +
retn   +
mov [esi+215h] bl +
pop esi  +
pop ebx  +
retn   +
***
mov ebx edx +
mov esi eax +
cmp bl [esi+20Eh] +
jz loc_44D4E8  +
mov [esi+20Eh] bl +
mov eax esi +
call @Controls@TWinControl@HandleAllocated$qqrv  +
test al al +
jz loc_44D4E8  +
push 0  +
xor eax eax +
mov al bl +
push eax  +
push 0CFh  +
mov eax esi +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call SendMessageA  +
pop esi  +
pop ebx  +
retn   +
***
mov ebx eax +
push 0  +
lea eax [esp+8+wParam] +
push eax  +
push 0B0h  +
mov eax ebx +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call SendMessageA  +
mov eax [esp+4+wParam] +
pop edx  +
pop ebx  +
retn   +
***
mov esi edx +
mov ebx eax +
push esi  +
push esi  +
push 0B1h  +
mov eax ebx +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call SendMessageA  +
pop esi  +
pop ebx  +
retn   +
***
mov ebx eax +
lea eax [esp+8+lParam] +
push eax  +
lea eax [esp+0Ch+wParam] +
push eax  +
push 0B0h  +
mov eax ebx +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call SendMessageA  +
mov eax [esp+8+lParam] +
sub eax [esp+8+wParam] +
pop ecx  +
pop edx  +
pop ebx  +
retn   +
***
add esp 0FFFFFFF8h +
mov esi edx +
mov ebx eax +
lea eax [esp+8+lParam] +
push eax  +
lea eax [esp+0Ch+wParam] +
push eax  +
push 0B0h  +
mov eax ebx +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call SendMessageA  +
add esi [esp+8+wParam] +
mov [esp+8+lParam] esi +
mov eax [esp+8+lParam] +
push eax  +
mov eax [esp+0Ch+wParam] +
push eax  +
push 0B1h  +
mov eax ebx +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call SendMessageA  +
push 0  +
push 0  +
push 0B7h  +
mov eax ebx +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call SendMessageA  +
pop ecx  +
pop edx  +
pop esi  +
pop ebx  +
retn   +
***
push offset byte_44D5DC  +
mov eax ebx +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call SetWindowTextA  +
pop ebx  +
retn   +
***
push 0FFFFFFFFh  +
push 0  +
push 0B1h  +
mov eax ebx +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call SendMessageA  +
pop ebx  +
retn   +
***
add esp 0FFFFFFF4h +
push ebx  +
push esi  +
push edi  +
mov edi ecx +
mov [ebp+var_4] edx +
mov ebx eax +
mov eax ebx +
mov edx [eax] +
call dword ptr [edx+0CCh]  +
mov esi eax +
mov eax ebx +
mov edx [eax] +
call dword ptr [edx+0C8h]  +
mov [ebp+var_8] eax +
mov eax ebx +
call @Controls@TControl@GetTextLen$qqrv  +
inc eax  +
call sub_4A9394  +
mov [ebp+var_C] eax +
xor eax eax +
push ebp  +
push offset loc_44D686  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov eax [ebp+var_C] +
call @Sysutils@StrBufSize$qqrpxc  +
mov ecx eax +
mov edx [ebp+var_C] +
mov eax ebx +
call unknown_libname_272  +
cmp edi [ebp+var_8] +
jg loc_44D660  +
dec edi  +
mov [ebp+var_8] edi +
mov edx [ebp+var_C] +
add edx esi +
mov ecx [ebp+var_8] +
mov eax [ebp+var_4] +
call @Sysutils@StrLCopy$qqrpcpxcui  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_44D68D  +
mov eax [ebp+var_C] +
call sub_4A93E0  +
retn   +
jmp unknown_libname_539  +
jmp loc_44D67D  +
mov eax [ebp+var_8] +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
add esp 0FFFFFFF8h +
mov esi edx +
mov ebx eax +
mov edx esi +
mov eax ebx +
call @Controls@TWinControl@CreateParams$qqrr22Controls@TCreateParams  +
mov ecx offset aEdit +
mov edx esi +
mov eax ebx +
call @Controls@TWinControl@CreateSubClass$qqrr22Controls@TCreateParamspc  +
mov eax [esi+4] +
or eax 0C0h +
xor edx edx +
mov dl [ebx+20Ch] +
or eax dword_4E602C[edx*4] +
cmp byte ptr [ebx+20Dh] 0 +
setnz dl  +
and edx 7Fh +
or eax dword_4E6044[edx*4] +
xor edx edx +
mov dl [ebx+20Eh] +
or eax dword_4E604C[edx*4] +
xor edx edx +
mov dl [ebx+213h] +
or eax dword_4E6054[edx*4] +
xor edx edx +
mov dl [ebx+211h] +
or eax dword_4E6060[edx*4] +
xor edx edx +
mov dl [ebx+212h] +
or eax dword_4E6068[edx*4] +
mov [esi+4] eax +
mov eax off_4EA6D4 +
cmp byte ptr [eax] 0 +
jz loc_44D7E5  +
cmp byte ptr [ebx+1A5h] 0 +
jz loc_44D7E5  +
cmp byte ptr [ebx+20Ch] 1 +
jnz loc_44D7E5  +
and dword ptr [esi+4] 0FF7FFFFFh +
or dword ptr [esi+8] 200h +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
add esp 0FFFFFF74h +
mov ebx eax +
mov eax off_4EA8CC +
cmp byte ptr [eax+0Ch] 0 +
jz loc_44D84D  +
mov eax off_4EA8B8 +
cmp dword ptr [eax] 2 +
jz loc_44D84D  +
test byte ptr [edx+5] 8 +
jz loc_44D84D  +
mov esi edx +
mov edi esp +
mov ecx 23h +
movs   +
and [esp+8Ch+var_88] 0FFFFF7FFh +
mov edx esp +
mov eax ebx +
call @TWinControl@CreateWindowHandle$qqrrx13TCreateParams  +
mov eax [ebx+180h] +
test eax eax +
jz loc_44D854  +
push 0  +
push 1  +
push 0CFh  +
push eax  +
call SendMessageA  +
jmp loc_44D854  +
mov eax ebx +
call @TWinControl@CreateWindowHandle$qqrrx13TCreateParams  +
add esp 8Ch +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push ecx  +
mov [ebp+var_4] eax +
mov eax [ebp+var_4] +
mov byte ptr [eax+214h] 1 +
xor eax eax +
push ebp  +
push offset loc_44D89F  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov eax [ebp+var_4] +
call @Controls@TWinControl@CreateWnd$qqrv  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_44D8A6  +
mov eax [ebp+var_4] +
mov byte ptr [eax+214h] 0 +
retn   +
jmp unknown_libname_539  +
jmp loc_44D894  +
mov eax [ebp+var_4] +
mov edx [eax+208h] +
mov eax [ebp+var_4] +
mov ecx [eax] +
call dword ptr [ecx+0C4h]  +
mov eax [ebp+var_4] +
mov dl [eax+215h] +
mov eax [ebp+var_4] +
call sub_44D478  +
mov eax [ebp+var_4] +
cmp byte ptr [eax+20Dh] 0 +
jz loc_44D8F7  +
push 0  +
mov eax [ebp+var_4] +
movzx eax byte ptr [eax+20Dh] +
push eax  +
push 0CCh  +
mov eax [ebp+var_4] +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call SendMessageA  +
mov eax [ebp+var_4] +
call @Stdctrls@TCustomEdit@UpdateHeight$qqrv  +
pop ecx  +
pop ebp  +
retn   +
***
mov eax ebx +
call @Stdctrls@TCustomEdit@GetModified$qqrv  +
mov [ebx+215h] al +
mov eax ebx +
call @Controls@TWinControl@DestroyWnd$qqrv  +
pop ebx  +
retn   +
***
cmp byte ptr [ebx+20Fh] 0 +
jz loc_44D949  +
cmp byte ptr [ebx+20Ch] 1 +
jnz loc_44D949  +
mov eax ds:dword_44D958 +
or eax [ebx+50h] +
mov [ebx+50h] eax +
mov eax ebx +
call @Stdctrls@TCustomEdit@AdjustHeight$qqrv  +
pop ebx  +
retn   +
mov eax ds:dword_44D958 +
not eax  +
and eax [ebx+50h] +
mov [ebx+50h] eax +
pop ebx  +
retn   +
***
push edi  +
mov eax ebx +
mov ebx edx +
mov esi eax +
mov eax [ebx] +
sub eax 7 +
jnz loc_44DA51  +
mov eax off_4EA8B8 +
cmp dword ptr [eax] 1 +
jnz loc_44DA51  +
mov eax [ebx+4] +
push eax  +
call IsWindow  +
test eax eax +
jnz loc_44DA51  +
xor eax eax +
mov [ebx+4] eax +
mov edx ebx +
mov eax esi +
call @Controls@TWinControl@DefaultHandler$qqrpv  +
pop esi  +
pop ebx  +
retn   +
***
push esi  +
mov esi eax +
mov eax esi +
mov ecx [eax] +
call dword ptr [ecx-10h]  +
mov eax off_4EA6D4 +
cmp byte ptr [eax] 0 +
jz loc_44DA9D  +
push 0FFFFFFF0h  +
mov eax esi +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call GetWindowLongA  +
test al 4 +
jnz loc_44DA9D  +
push 0  +
push 3  +
push 0D3h  +
mov eax esi +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call SendMessageA  +
pop esi  +
retn   +
***
mov esi edx +
mov ebx eax +
mov eax off_4EA6D4 +
cmp byte ptr [eax] 0 +
jz loc_44DAC7  +
cmp byte ptr [ebx+20Ch] 1 +
jnz loc_44DAC7  +
mov eax ebx +
call @Stdctrls@TCustomEdit@UpdateHeight$qqrv  +
mov eax ebx +
call @Controls@TWinControl@RecreateWnd$qqrv  +
mov edx esi +
mov eax ebx +
call @Controls@TWinControl@CMCtl3DChanged$qqrr17Messages@TMessage  +
pop esi  +
pop ebx  +
retn   +
***
mov eax ebx +
call @Controls@TWinControl@CMFontChanged$qqrr17Messages@TMessage  +
test byte ptr [ebx+51h] 2 +
jz loc_44DAF7  +
test byte ptr [ebx+1Ch] 10h +
jz loc_44DAF0  +
test byte ptr [ebx+1Ch] 1 +
jnz loc_44DAF7  +
mov eax ebx +
call @Stdctrls@TCustomEdit@AdjustHeight$qqrv  +
pop ebx  +
retn   +
***
jnz loc_44DB17  +
cmp byte ptr [eax+214h] 0 +
jnz loc_44DB17  +
mov si 0FFB3h +
call @System@@CallDynaInst$qqrv  +
pop esi  +
retn   +
***
mov esi edx +
mov ebx eax +
cmp byte ptr [ebx+210h] 0 +
jz loc_44DB4B  +
test byte ptr [ebx+54h] 1 +
jnz loc_44DB4B  +
push 0FFFFFFF0h  +
mov eax ebx +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call GetWindowLongA  +
test al 4 +
jnz loc_44DB4B  +
mov eax ebx +
call @Stdctrls@TCustomEdit@SelectAll$qqrv  +
mov edx esi +
mov eax ebx +
call @Controls@TWinControl@CMEnter$qqrr20Messages@TWMNoParams  +
pop esi  +
pop ebx  +
retn   +
***
mov eax esi +
mov ecx [eax] +
call dword ptr [ecx-10h]  +
mov eax esi +
call @Controls@TWinControl@HandleAllocated$qqrv  +
test al al +
jz loc_44DB80  +
push 0FFFFFFF0h  +
mov eax esi +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call GetWindowLongA  +
test al 4 +
jz loc_44DB8B  +
mov eax esi +
mov si 0FFB3h +
call @System@@CallDynaInst$qqrv  +
pop esi  +
retn   +
***
mov esi edx +
mov ebx eax +
xor esi esi +
mov eax [ebx+10h] +
call @Controls@TWinControl@HandleAllocated$qqrv  +
test al al +
jnz loc_44DBC7  +
mov eax [ebx+10h] +
cmp dword ptr [eax+64h] 0 +
jz loc_44DC14  +
push 0  +
push 0  +
push 0BAh  +
mov eax [ebx+10h] +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call SendMessageA  +
mov esi eax +
push 0  +
push 0  +
mov eax esi +
dec eax  +
push eax  +
push 0BBh  +
mov eax [ebx+10h] +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call SendMessageA  +
push eax  +
push 0C1h  +
mov eax [ebx+10h] +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call SendMessageA  +
test eax eax +
jnz loc_44DC14  +
dec esi  +
mov eax esi +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
add esp 0FFFFF004h +
push eax  +
mov edi ecx +
mov esi edx +
mov ebx eax +
mov eax esp +
mov word ptr [eax] 1000h +
mov eax esp +
push eax  +
push esi  +
push 0C4h  +
mov eax [ebx+10h] +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call SendMessageA  +
mov ecx eax +
mov edx esp +
mov eax edi +
call @@LStrFromPCharLen$qqrr10AnsiStringpci  +
add esp 1000h +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
mov edi ecx +
mov esi edx +
mov ebx eax +
push 0  +
push esi  +
push 0BBh  +
mov eax [ebx+10h] +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call SendMessageA  +
mov esi eax +
test esi esi +
jl loc_44DCCF  +
push 0  +
push esi  +
push 0C1h  +
mov eax [ebx+10h] +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call SendMessageA  +
add eax esi +
push eax  +
push esi  +
push 0B1h  +
mov eax [ebx+10h] +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call SendMessageA  +
mov eax edi +
call unknown_libname_550  +
push eax  +
push 0  +
push 0C2h  +
mov eax [ebx+10h] +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call SendMessageA  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
add esp 0FFFFFFF8h +
push ebx  +
push esi  +
push edi  +
xor ebx ebx +
mov [ebp+var_8] ebx +
mov [ebp+var_4] ecx +
mov edi edx +
mov esi eax +
xor eax eax +
push ebp  +
push offset loc_44DDBF  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
test edi edi +
jl loc_44DDA9  +
push 0  +
push edi  +
push 0BBh  +
mov eax [esi+10h] +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call SendMessageA  +
mov ebx eax +
test ebx ebx +
jl loc_44DD2D  +
lea eax [ebp+var_8] +
mov ecx offset _str___.Text +
mov edx [ebp+var_4] +
call @System@@LStrCat3$qqrv  +
jmp loc_44DD76  +
push 0  +
dec edi  +
push edi  +
push 0BBh  +
mov eax [esi+10h] +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call SendMessageA  +
mov ebx eax +
test ebx ebx +
jl loc_44DDA9  +
push 0  +
push ebx  +
push 0C1h  +
mov eax [esi+10h] +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call SendMessageA  +
test eax eax +
jz loc_44DDA9  +
add ebx eax +
lea eax [ebp+var_8] +
mov ecx [ebp+var_4] +
mov edx offset _str___.Text +
call @System@@LStrCat3$qqrv  +
push ebx  +
push ebx  +
push 0B1h  +
mov eax [esi+10h] +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call SendMessageA  +
mov eax [ebp+var_8] +
call unknown_libname_550  +
push eax  +
push 0  +
push 0C2h  +
mov eax [esi+10h] +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call SendMessageA  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_44DDC6  +
lea eax [ebp+var_8] +
call unknown_libname_540  +
retn   +
jmp unknown_libname_539  +
jmp loc_44DDB6  +
pop edi  +
pop esi  +
pop ebx  +
pop ecx  +
pop ecx  +
pop ebp  +
retn   +
***
push edi  +
mov edi edx +
mov ebx eax +
push 0  +
push edi  +
push 0BBh  +
mov eax [ebx+10h] +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call SendMessageA  +
mov esi eax +
test esi esi +
jl loc_44DE6A  +
push 0  +
inc edi  +
push edi  +
push 0BBh  +
mov eax [ebx+10h] +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call SendMessageA  +
mov edi eax +
test edi edi +
jge loc_44DE3A  +
push 0  +
push esi  +
push 0C1h  +
mov eax [ebx+10h] +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call SendMessageA  +
mov edi eax +
add edi esi +
push edi  +
push esi  +
push 0B1h  +
mov eax [ebx+10h] +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call SendMessageA  +
mov eax lParam +
push eax  +
push 0  +
push 0C2h  +
mov eax [ebx+10h] +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call SendMessageA  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov eax [esi+10h] +
mov ebx edx +
mov esi eax +
mov eax [esi+10h] +
call @Controls@TWinControl@HandleAllocated$qqrv  +
test al al +
jz loc_44DECC  +
push 0  +
mov eax ebx +
xor al 1 +
and eax 7Fh +
push eax  +
push 0Bh  +
mov eax [esi+10h] +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call SendMessageA  +
xor bl 1 +
test bl bl +
jz loc_44DECC  +
push 0  +
xor ecx ecx +
mov edx 0B019h +
mov eax [esi+10h] +
call @Controls@TControl@Perform$qqruiii  +
mov eax [esi+10h] +
call @Controls@TControl@Refresh$qqrv  +
pop esi  +
pop ebx  +
retn   +
***
mov esi edx +
mov ebx eax +
mov edx esi +
mov eax [ebx+10h] +
call @TControl@GetText$qqrv  +
pop esi  +
pop ebx  +
retn   +
***
push 0  +
push 0  +
push 0  +
push ebx  +
push esi  +
mov esi edx +
mov ebx eax +
xor eax eax +
push ebp  +
push offset loc_44DFAD  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
lea ecx [ebp+lParam] +
mov dl 1 +
mov eax esi +
call sub_4A8A14  +
mov eax [ebp+lParam] +
call sub_4BB610  +
mov esi eax +
mov eax [ebx+10h] +
call @Controls@TControl@GetTextLen$qqrv  +
cmp esi eax +
jnz loc_44DF3B  +
lea edx [ebp+var_8] +
mov eax [ebx+10h] +
call @TControl@GetText$qqrv  +
mov edx [ebp+var_8] +
mov eax [ebp+lParam] +
call @System@@LStrCmp$qqrv  +
jz loc_44DF87  +
mov eax [ebp+lParam] +
push eax  +
push 0  +
push 0Ch  +
mov eax [ebx+10h] +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call SendMessageA  +
test eax eax +
jnz loc_44DF76  +
lea edx [ebp+var_C] +
mov eax off_4EA7D4 +
call @System@LoadResString$qqrp20System@TResStringRec  +
mov ecx [ebp+var_C] +
mov dl 1 +
mov eax ds:off_49A578 +
call sub_4AC17C  +
call @System@@RaiseExcept$qqrv  +
push 0  +
xor ecx ecx +
mov edx 0B012h +
mov eax [ebx+10h] +
call @Controls@TControl@Perform$qqruiii  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_44DFB4  +
lea eax [ebp+var_C] +
call unknown_libname_540  +
lea eax [ebp+var_8] +
call unknown_libname_540  +
lea eax [ebp+lParam] +
call unknown_libname_540  +
retn   +
jmp unknown_libname_539  +
jmp loc_44DF94  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
push ecx  +
call unknown_libname_536  +
push edi  +
push edi  +
mov ebx edx +
mov esi eax +
mov eax off_4EA8CC +
cmp byte ptr [eax+0Ch] 0 +
jz loc_44E14E  +
mov eax off_4EA8B8 +
cmp dword ptr [eax] 2 +
jz loc_44E14E  +
test byte ptr [ebx+5] 8 +
jz loc_44E14E  +
mov eax [ebx+20h] +
push eax  +
mov eax hInstance +
push eax  +
push 0  +
mov eax [ebx+1Ch] +
push eax  +
mov eax [ebx+18h] +
push eax  +
mov eax [ebx+14h] +
push eax  +
mov eax [ebx+10h] +
push eax  +
mov eax [ebx+0Ch] +
push eax  +
mov eax [ebx+4] +
and eax 0FFFFF7FFh +
push eax  +
push offset byte_44E1A4  +
lea eax [ebx+4Ch] +
push eax  +
mov eax [ebx+8] +
push eax  +
call CreateWindowExA  +
mov edi eax +
mov [esi+180h] edi +
test edi edi +
jz loc_44E18A  +
push 0  +
push 1  +
push 0CFh  +
push edi  +
call SendMessageA  +
jmp loc_44E18A  +
mov eax [ebx+20h] +
push eax  +
mov eax hInstance +
push eax  +
push 0  +
mov eax [ebx+1Ch] +
push eax  +
mov eax [ebx+18h] +
push eax  +
mov eax [ebx+14h] +
push eax  +
mov eax [ebx+10h] +
push eax  +
mov eax [ebx+0Ch] +
push eax  +
mov eax [ebx+4] +
push eax  +
push offset byte_44E1A4  +
lea eax [ebx+4Ch] +
push eax  +
mov eax [ebx+8] +
push eax  +
call CreateWindowExA  +
mov [esi+180h] eax +
mov eax [ebx] +
push eax  +
push 0  +
push 0Ch  +
mov eax [esi+180h] +
push eax  +
call SendMessageA  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov esi edx +
mov ebx eax +
push 0  +
push 0  +
push 0B0h  +
mov eax ebx +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call SendMessageA  +
shr eax 10h +
movzx eax ax +
mov [esi] eax +
push 0  +
mov eax [esi] +
push eax  +
push 0C9h  +
mov eax ebx +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call SendMessageA  +
mov [esi+4] eax +
push 0  +
push 0FFFFFFFFh  +
push 0BBh  +
mov eax ebx +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call SendMessageA  +
sub [esi] eax +
pop esi  +
pop ebx  +
retn   +
***
mov esi edx +
mov ebx eax +
push 0  +
mov eax [esi+4] +
push eax  +
push 0BBh  +
mov eax ebx +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call SendMessageA  +
add eax [esi] +
mov esi eax +
push esi  +
push esi  +
push 0B1h  +
mov eax ebx +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call SendMessageA  +
pop esi  +
pop ebx  +
retn   +
***
mov al [eax+224h] +
retn   +
***
mov eax ebx +
call @Controls@TControl@Loaded$qqrv  +
xor edx edx +
mov eax ebx +
call sub_44D478  +
pop ebx  +
retn   +
***
cmp dl [eax+224h] +
mov eax [esi+220h] +
cmp dl [eax+225h] +
cmp dl [eax+226h] +
mov esi edx +
mov ebx eax +
mov edx esi +
mov eax ebx +
mov ecx [eax] +
call dword ptr [ecx-10h]  +
cmp byte ptr [ebx+228h] 0 +
jz loc_44E2CA  +
or dword ptr [esi+0Ch] 2 +
jmp loc_44E2CE  +
and dword ptr [esi+0Ch] 0FFFFFFFDh +
cmp byte ptr [ebx+227h] 0 +
jnz loc_44E2DB  +
and dword ptr [esi+0Ch] 0FFFFFFFBh +
pop esi  +
pop ebx  +
retn   +
***
retn   +
***
mov esi edx +
mov ebx eax +
mov edx esi +
mov eax ebx +
call @Controls@TWinControl@KeyPress$qqrrc  +
cmp byte ptr [esi] 0Dh +
jnz loc_44E308  +
cmp byte ptr [ebx+227h] 0 +
jnz loc_44E308  +
mov byte ptr [esi] 0 +
pop esi  +
pop ebx  +
retn   +
***
push 0  +
push 0  +
push ebx  +
push esi  +
push edi  +
mov edi edx +
mov ebx eax +
xor eax eax +
push ebp  +
push offset loc_44E38E  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
push 0  +
push edi  +
push 150h  +
mov eax [ebx+10h] +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call SendMessageA  +
mov esi eax +
cmp esi 0FFFFFFFFh +
jnz loc_44E378  +
lea edx [ebp+var_4] +
mov eax off_4EA884 +
call @System@LoadResString$qqrp20System@TResStringRec  +
mov edx [ebp+var_4] +
mov ecx edi +
mov eax ebx +
call sub_49E184  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_44E395  +
lea eax [ebp+var_4] +
call unknown_libname_540  +
retn   +
jmp unknown_libname_539  +
jmp loc_44E385  +
mov eax esi +
pop edi  +
pop esi  +
pop ebx  +
pop ecx  +
pop ebp  +
retn   +
***
push edi  +
mov edi ecx +
mov esi edx +
mov ebx eax +
push edi  +
push esi  +
push 151h  +
mov eax [ebx+10h] +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call SendMessageA  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
add esp 0FFFFF004h +
push eax  +
mov edi ecx +
mov esi edx +
mov ebx eax +
mov eax esp +
push eax  +
push esi  +
push 148h  +
mov eax [ebx+10h] +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call SendMessageA  +
cmp eax 0FFFFFFFFh +
jnz loc_44E3F2  +
xor eax eax +
mov edx esp +
mov ecx edi +
xchg eax ecx +
call @@LStrFromPCharLen$qqrr10AnsiStringpci  +
add esp 1000h +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push 0  +
push ebx  +
mov ebx eax +
xor eax eax +
push ebp  +
push offset loc_44E46C  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
lea edx [ebp+var_4] +
mov eax [ebx+10h] +
call @TControl@GetText$qqrv  +
push 0  +
push 0  +
push 14Bh  +
mov eax [ebx+10h] +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call SendMessageA  +
mov edx [ebp+var_4] +
mov eax [ebx+10h] +
call @Controls@TControl@SetText$qqrx17System@AnsiString  +
mov eax [ebx+10h] +
mov edx [eax] +
call dword ptr [edx+88h]  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_44E473  +
lea eax [ebp+var_4] +
call unknown_libname_540  +
retn   +
jmp unknown_libname_539  +
jmp loc_44E463  +
pop ebx  +
pop ecx  +
pop ebp  +
retn   +
***
mov esi edx +
mov ebx eax +
push 0  +
push esi  +
push 144h  +
mov eax [ebx+10h] +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call SendMessageA  +
pop esi  +
pop ebx  +
retn   +
***
mov esi edx +
mov ebx eax +
mov eax esi +
call unknown_libname_550  +
push eax  +
push 0FFFFFFFFh  +
push 158h  +
mov eax [ebx+10h] +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call SendMessageA  +
pop esi  +
pop ebx  +
retn   +
***
mov ebx edx +
mov esi eax +
push 0  +
mov eax ebx +
xor al 1 +
and eax 7Fh +
push eax  +
push 0Bh  +
mov eax [esi+10h] +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call SendMessageA  +
xor bl 1 +
test bl bl +
jz loc_44E4EF  +
mov eax [esi+10h] +
call @Controls@TControl@Refresh$qqrv  +
pop esi  +
pop ebx  +
retn   +
***
push ecx  +
push ebx  +
push esi  +
test dl dl +
jz loc_44E506  +
add esp 0FFFFFFF0h +
call unknown_libname_535  +
mov [ebp+var_1] dl +
mov ebx eax +
xor edx edx +
mov eax ebx +
call @Controls@TWinControl@$bctr$qqrp18Classes@TComponent  +
mov eax off_4EA6D4 +
cmp byte ptr [eax] 0 +
jz loc_44E528  +
mov eax ds:dword_44E5E0 +
mov [ebx+50h] eax +
jmp loc_44E530  +
mov eax ds:dword_44E5E4 +
mov [ebx+50h] eax +
mov edx 91h +
mov eax ebx +
call @Controls@TControl@SetWidth$qqri  +
mov edx 19h +
mov eax ebx +
call @Controls@TControl@SetHeight$qqri  +
mov dl 1 +
mov eax ebx +
call @Controls@TWinControl@SetTabStop$qqro  +
xor edx edx +
mov eax ebx +
call @Controls@TControl@SetParentColor$qqro  +
mov dl 1 +
mov eax ds:off_4713DC +
call @Graphics@TCanvas@$bctr$qqrv  +
mov esi eax +
mov [ebx+208h] esi +
mov eax esi +
mov edx ebx +
call @Controls@TControlCanvas@SetControl$qqrp17Controls@TControl  +
mov dword ptr [ebx+238h] 10h +
push ebx  +
push offset @Stdctrls@TCustomCombo@EditWndProc$qqrr17Messages@TMessage  +
call sub_4A5BA4  +
mov [ebx+24Ch] eax +
push ebx  +
push offset @Stdctrls@TCustomCombo@ListWndProc$qqrr17Messages@TMessage  +
call sub_4A5BA4  +
mov [ebx+254h] eax +
mov dword ptr [ebx+210h] 8 +
mov dword ptr [ebx+214h] 0FFFFFFFFh +
mov dword ptr [ebx+260h] 0FFFFFFFFh +
mov eax ebx +
cmp [ebp+var_1] 0 +
jz loc_44E5D8  +
call sub_4BABC8  +
pop large dword ptr fs:0  +
add esp 0Ch +
mov eax ebx +
pop esi  +
pop ebx  +
pop ecx  +
pop ebp  +
retn   +
***
call unknown_libname_536  +
mov ebx edx +
mov esi eax +
mov eax esi +
call @Controls@TWinControl@HandleAllocated$qqrv  +
test al al +
jz loc_44E608  +
mov eax esi +
mov edx [eax] +
call dword ptr [edx+0ACh]  +
mov eax [esi+254h] +
call @Forms@FreeObjectInstance$qqrpv  +
mov eax [esi+24Ch] +
call @Forms@FreeObjectInstance$qqrpv  +
mov eax [esi+208h] +
call @System@TObject@Free$qqrv  +
mov edx ebx +
and dl 0FCh +
mov eax esi +
call @Controls@TWinControl@$bdtr$qqrv  +
test bl bl +
jle loc_44E640  +
mov eax esi +
call @System@@ClassDestroy$qqrp14System@TObject  +
pop esi  +
pop ebx  +
retn   +
***
mov edx offset dword_44E66C +
mov eax ebx +
call @Controls@TControl@SetTextBuf$qqrpc  +
mov eax [ebx+23Ch] +
mov edx [eax] +
call dword ptr [edx+44h]  +
mov dword ptr [ebx+260h] 0FFFFFFFFh +
pop ebx  +
retn   +
***
mov eax ebx +
push 0FFFF0000h  +
push 0  +
push 142h  +
mov eax ebx +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call SendMessageA  +
pop ebx  +
retn   +
***
push 0  +
push 0  +
push 157h  +
mov eax ebx +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call SendMessageA  +
cmp eax 1 +
sbb eax eax +
inc eax  +
pop ebx  +
retn   +
***
add esp 0FFFFFFF0h +
mov ebx edx +
mov esi eax +
push 0  +
xor eax eax +
mov al bl +
push eax  +
push 14Fh  +
mov eax esi +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call SendMessageA  +
mov edx esp +
mov eax esi +
mov ecx [eax] +
call dword ptr [ecx+44h]  +
push 0FFFFFFFFh  +
lea eax [esp+14h+Rect] +
push eax  +
mov eax esi +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call InvalidateRect  +
add esp 10h +
pop esi  +
pop ebx  +
retn   +
***
test byte ptr [ebx+1Ch] 1 +
jz loc_44E731  +
mov eax [ebx+214h] +
pop ebx  +
retn   +
push 0  +
push 0  +
push 147h  +
mov eax ebx +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call SendMessageA  +
pop ebx  +
retn   +
***
mov esi edx +
mov ebx eax +
test byte ptr [ebx+1Ch] 1 +
jz loc_44E761  +
mov [ebx+214h] esi +
pop esi  +
pop ebx  +
retn   +
mov eax ebx +
mov edx [eax] +
call dword ptr [edx+0C8h]  +
cmp esi eax +
jz loc_44E784  +
push 0  +
push esi  +
push 14Eh  +
mov eax ebx +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call SendMessageA  +
pop esi  +
pop ebx  +
retn   +
***
test edx edx +
mov eax esi +
mov ecx [eax] +
call dword ptr [ecx-10h]  +
cmp dword ptr [esi+64h] 0 +
jz loc_44E7B9  +
mov eax [esi+64h] +
push eax  +
mov eax esi +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call SetWindowTextA  +
pop esi  +
retn   +
***
mov edi edx +
mov esi eax +
mov edx edi +
mov eax esi +
mov ecx [eax] +
call dword ptr [ecx-10h]  +
pop edi  +
pop esi  +
retn   +
***
mov edi edx +
mov esi eax +
mov edx edi +
mov eax esi +
mov ecx [eax] +
call dword ptr [ecx-10h]  +
pop edi  +
pop esi  +
retn   +
***
mov edi edx +
mov esi eax +
mov edx edi +
mov eax esi +
mov ecx [eax] +
call dword ptr [ecx-10h]  +
pop edi  +
pop esi  +
retn   +
***
mov esi edx +
mov ebx eax +
mov edx esi +
mov eax ebx +
mov ecx [eax] +
call dword ptr [ecx-10h]  +
mov eax ebx +
call @Stdctrls@TCustomCombo@GetDroppedDown$qqrv  +
test al al +
jz loc_44E816  +
or dword ptr [esi+0Ch] 4 +
pop esi  +
pop ebx  +
retn   +
***
cmp eax [edx+8] +
mov esi edx +
mov ebx eax +
mov eax off_4EA6D4 +
cmp byte ptr [eax] 0 +
jz loc_44E847  +
mov eax ebx +
call @Controls@TWinControl@RecreateWnd$qqrv  +
mov edx esi +
mov eax ebx +
call @Controls@TWinControl@CMCtl3DChanged$qqrr17Messages@TMessage  +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
add esp 0FFFFFFF0h +
mov esi edx +
mov ebx eax +
cmp dword ptr [esi] 112h +
jnz loc_44E874  +
mov edx esi +
mov eax ebx +
mov ecx [eax] +
call dword ptr [ecx+74h]  +
jmp loc_44E943  +
mov eax [esi] +
cmp eax 100h +
jb loc_44E8A7  +
cmp eax 108h +
ja loc_44E8A7  +
mov eax ebx +
call @Forms@GetParentForm$qqrp17Controls@TControl  +
mov edi eax +
test edi edi +
jz loc_44E8A7  +
mov ecx esi +
mov edx ebx +
mov eax edi +
mov edi [eax] +
call dword ptr [edi+0ECh]  +
test al al +
jnz loc_44E943  +
mov eax [ebx+250h] +
push eax  +
mov edx esi +
mov ecx [ebx+240h] +
mov eax ebx +
mov edi [eax] +
call dword ptr [edi+0F0h]  +
mov eax [esi] +
sub eax 30h +
jz loc_44E924  +
sub eax 1D1h +
jz loc_44E8D3  +
sub eax 2 +
jnz loc_44E943  +
cmp byte ptr [ebx+5Dh] 1 +
jnz loc_44E943  +
push esp  +
call GetCursorPos  +
lea ecx [esp+10h+var_8] +
mov edx esp +
mov eax ebx +
call @Controls@TControl@ScreenToClient$qqrrx14Windows@TPoint  +
mov eax [esp+10h+var_8] +
mov [esp+10h+var_10] eax +
mov eax [esp+0Ch] +
mov [esp+10h+var_C] eax +
mov eax esp +
call unknown_libname_383  +
push eax  +
push 0  +
push 202h  +
mov eax [ebx+240h] +
push eax  +
call SendMessageA  +
or ecx 0FFFFFFFFh +
xor edx edx +
mov eax ebx +
call @Controls@TControl@BeginDrag$qqroi  +
jmp loc_44E943  +
mov eax off_4EA6D4 +
cmp byte ptr [eax] 0 +
jz loc_44E943  +
push 0  +
push 3  +
push 0D3h  +
mov eax [ebx+240h] +
push eax  +
call SendMessageA  +
add esp 10h +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov esi eax +
mov eax [esi+258h] +
push eax  +
mov ecx [esi+244h] +
mov eax esi +
mov ebx [eax] +
call dword ptr [ebx+0F0h]  +
pop esi  +
pop ebx  +
retn   +
***
add esp 0FFFFFFF4h +
push ebx  +
push esi  +
push edi  +
mov esi ecx +
mov ebx edx +
mov [ebp+var_4] eax +
xor eax eax +
push ebp  +
push offset loc_44EC23  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov eax [ebx] +
cmp eax 104h +
jg loc_44E9E2  +
jz loc_44EA83  +
cmp eax 87h +
jg loc_44E9C4  +
jz loc_44EB96  +
sub eax 7 +
jz loc_44EA35  +
dec eax  +
jz loc_44EA69  +
sub eax 7Ch +
jz loc_44EBB6  +
jmp loc_44EBE4  +
sub eax 100h +
jz loc_44EA83  +
dec eax  +
jz loc_44EB07  +
dec eax  +
jz loc_44EAB1  +
jmp loc_44EBE4  +
cmp eax 0BD00h +
jg loc_44EA13  +
jz loc_44EBD0  +
sub eax 105h +
jz loc_44EB07  +
sub eax 0FBh +
jz loc_44EB26  +
sub eax 5 +
jz loc_44EB3C  +
jmp loc_44EBE4  +
sub eax 0BD02h +
jz loc_44EBD0  +
sub eax 2 +
jz loc_44EBD0  +
sub eax 2 +
jz loc_44EBD0  +
jmp loc_44EBE4  +
mov eax [ebp+var_4] +
call @Forms@GetParentForm$qqrp17Controls@TControl  +
mov edi eax +
test edi edi +
jz loc_44EBE4  +
mov edx [ebp+var_4] +
mov eax edi +
mov ecx [eax] +
call dword ptr [ecx+0E4h]  +
test al al +
jnz loc_44EBE4  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
jmp loc_44EC3C  +
mov eax [ebp+var_4] +
test byte ptr [eax+54h] 20h +
jz loc_44EBE4  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
jmp loc_44EC3C  +
mov eax [ebp+var_4] +
cmp esi [eax+244h] +
jz loc_44EBE4  +
mov edx ebx +
mov eax [ebp+var_4] +
call @Controls@TWinControl@DoKeyDown$qqrr15Messages@TWMKey  +
test al al +
jz loc_44EBE4  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
jmp loc_44EC3C  +
mov edx ebx +
mov eax [ebp+var_4] +
call @Controls@TWinControl@DoKeyPress$qqrr15Messages@TWMKey  +
test al al +
jz loc_44EACC  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
jmp loc_44EC3C  +
mov di [ebx+4] +
cmp di 0Dh +
jz loc_44EAE0  +
cmp di 1Bh +
jnz loc_44EBE4  +
mov eax [ebp+var_4] +
call @Stdctrls@TCustomCombo@GetDroppedDown$qqrv  +
test al al +
jz loc_44EBE4  +
xor edx edx +
mov eax [ebp+var_4] +
call @Stdctrls@TCustomCombo@SetDroppedDown$qqro  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
jmp loc_44EC3C  +
mov edx ebx +
mov eax [ebp+var_4] +
call @Controls@TWinControl@DoKeyUp$qqrr15Messages@TWMKey  +
test al al +
jz loc_44EBE4  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
jmp loc_44EC3C  +
mov ecx ebx +
mov eax off_4EA6C8 +
mov eax [eax] +
mov edx [ebp+var_4] +
call @Forms@TApplication@HintMouseMessage$qqrp17Controls@TControlr17Messages@TMessage  +
jmp loc_44EBE4  +
mov eax [ebp+var_4] +
call @StdCtrls@_16445  +
test al al +
jz loc_44EBE4  +
movsx eax word ptr [ebx+8] +
mov [ebp+Points.x] eax +
movsx eax word ptr [ebx+0Ah] +
mov [ebp+Points.y] eax +
push 1  +
lea eax [ebp+Points] +
push eax  +
mov eax [ebp+var_4] +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
push esi  +
call MapWindowPoints  +
mov ax word ptr [ebp+Points.x] +
mov [ebx+8] ax +
mov ax word ptr [ebp+Points.y] +
mov [ebx+0Ah] ax +
mov edx ebx +
mov eax [ebp+var_4] +
mov ecx [eax] +
call dword ptr [ecx+74h]  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
jmp loc_44EC3C  +
mov eax [ebp+var_4] +
call @Stdctrls@TCustomCombo@GetDroppedDown$qqrv  +
test al al +
jz loc_44EBE4  +
mov dword ptr [ebx+0Ch] 4 +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
jmp loc_44EC3C  +
mov eax [ebp+var_4] +
test byte ptr [eax+1Ch] 10h +
jz loc_44EBE4  +
mov dword ptr [ebx+0Ch] 0FFFFFFFFh +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
jmp loc_44EC3C  +
mov edx ebx +
mov eax [ebp+var_4] +
mov ecx [eax] +
call dword ptr [ecx+74h]  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
jmp loc_44EC3C  +
mov eax [ebx+8] +
push eax  +
mov eax [ebx+4] +
push eax  +
mov eax [ebx] +
push eax  +
push esi  +
mov eax [ebp+lpPrevWndFunc] +
push eax  +
call CallWindowProcA  +
mov [ebx+0Ch] eax +
cmp dword ptr [ebx] 203h +
jnz loc_44EC19  +
mov eax [ebp+var_4] +
test byte ptr [eax+50h] 80h +
jz loc_44EC19  +
mov eax [ebp+var_4] +
mov si 0FFE9h +
call @System@@CallDynaInst$qqrv  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
jmp loc_44EC3C  +
jmp @System@@HandleAnyException$qqrv  +
mov eax off_4EA6C8 +
mov eax [eax] +
mov edx [ebp-4] +
call @TApplication@HandleException$qqrp7TObject  +
call @@DoneExcept$qqrv  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 4  +
***
push edi  +
mov edi edx +
mov esi eax +
test byte ptr [esi+1Ch] 10h +
jnz loc_44ECA5  +
mov ebx [edi] +
cmp ebx 201h +
jz loc_44EC67  +
cmp ebx 203h +
jnz loc_44ECA5  +
mov eax esi +
call unknown_libname_273  +
test al al +
jnz loc_44ECA5  +
cmp byte ptr [esi+5Dh] 1 +
jnz loc_44ECA5  +
mov edx edi +
mov eax esi +
call @Controls@TWinControl@IsControlMouseMsg$qqrr17Messages@TWMMouse  +
test al al +
jnz loc_44ED4F  +
mov ax ds:word_44ED54 +
or ax [esi+54h] +
mov [esi+54h] ax +
mov edx edi +
mov eax esi +
mov ecx [eax] +
call dword ptr [ecx-14h]  +
jmp loc_44ED4F  +
mov eax [edi] +
sub eax 5 +
jz loc_44ECC0  +
sub eax 0FDh +
jz loc_44ED13  +
add eax 0FFFFFFD0h +
sub eax 7 +
jb loc_44ECD4  +
jmp loc_44ED46  +
cmp byte ptr [esi+25Ch] 0 +
jz loc_44ED46  +
mov edx edi +
mov eax esi +
mov ecx [eax] +
call dword ptr [ecx-10h]  +
jmp loc_44ED4F  +
mov eax [esi+68h] +
mov eax [eax+18h] +
call @Graphics@ColorToRGB$qqr15Graphics@TColor  +
push eax  +
mov eax [edi+4] +
push eax  +
call SetTextColor  +
mov eax [esi+170h] +
call sub_45AF0C  +
call @Graphics@ColorToRGB$qqr15Graphics@TColor  +
push eax  +
mov eax [edi+4] +
push eax  +
call SetBkColor  +
mov eax [esi+170h] +
call @Graphics@TBrush@GetHandle$qqrv  +
mov [edi+0Ch] eax +
jmp loc_44ED4F  +
mov edx edi +
mov eax esi +
call @Controls@TWinControl@DoKeyPress$qqrr15Messages@TWMKey  +
test al al +
jnz loc_44ED4F  +
mov bx [edi+4] +
cmp bx 0Dh +
jz loc_44ED30  +
cmp bx 1Bh +
jnz loc_44ED46  +
mov eax esi +
call @Stdctrls@TCustomCombo@GetDroppedDown$qqrv  +
test al al +
jz loc_44ED46  +
xor edx edx +
mov eax esi +
call @Stdctrls@TCustomCombo@SetDroppedDown$qqro  +
jmp loc_44ED4F  +
mov edx edi +
mov eax esi +
call @Controls@TWinControl@WndProc$qqrr17Messages@TMessage  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push 0  +
push ebx  +
push esi  +
push edi  +
mov edi eax +
xor eax eax +
push ebp  +
push offset loc_44EEB4  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
movzx eax word ptr [edx+6] +
cmp eax 8 +
ja loc_44EE9E  +
jmp ds:off_44ED84[eax*4]  +
mov eax edi +
mov si 0FFE9h +
call @System@@CallDynaInst$qqrv  +
jmp loc_44EE9E  +
mov eax edi +
mov si 0FFB3h +
call @System@@CallDynaInst$qqrv  +
jmp loc_44EE9E  +
mov byte ptr [edi+25Dh] 0 +
mov eax edi +
mov si 0FFB1h +
call @System@@CallDynaInst$qqrv  +
mov eax edi +
mov edx [eax] +
call dword ptr [edx+0ECh]  +
cmp byte ptr [edi+25Dh] 0 +
jz loc_44EE9E  +
push 0  +
push 0  +
push 1Fh  +
mov eax edi +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call PostMessageA  +
cmp byte ptr [edi+25Eh] 0 +
jnz loc_44EE9E  +
push 0  +
push 0  +
push 14Fh  +
mov eax edi +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call PostMessageA  +
jmp loc_44EE9E  +
mov eax edi +
mov edx [eax] +
call dword ptr [edx+0C8h]  +
mov edx eax +
lea ecx [ebp+var_4] +
mov eax [edi+23Ch] +
mov ebx [eax] +
call dword ptr [ebx+0Ch]  +
mov edx [ebp+var_4] +
mov eax edi +
call @Controls@TControl@SetText$qqrx17System@AnsiString  +
mov eax edi +
mov si 0FFEBh +
call @System@@CallDynaInst$qqrv  +
mov eax edi +
mov si 0FFB2h +
call @System@@CallDynaInst$qqrv  +
jmp loc_44EE9E  +
mov eax edi +
mov si 0FFB0h +
call @System@@CallDynaInst$qqrv  +
jmp loc_44EE9E  +
mov byte ptr [edi+25Eh] 1 +
mov byte ptr [edi+25Dh] 1 +
mov eax edi +
call @Controls@TWinControl@SetIme$qqrv  +
jmp loc_44EE9E  +
mov byte ptr [edi+25Eh] 0 +
mov byte ptr [edi+25Dh] 1 +
mov eax edi +
call @Controls@TWinControl@ResetIme$qqrv  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_44EEBB  +
lea eax [ebp+var_4] +
call unknown_libname_540  +
retn   +
jmp unknown_libname_539  +
jmp loc_44EEAB  +
pop edi  +
pop esi  +
pop ebx  +
pop ecx  +
pop ebp  +
retn   +
***
mov eax ebx +
jz loc_44EF03  +
mov ebx eax +
mov edx eax +
mov eax [ebx+22Ch] +
call dword ptr [ebx+228h]  +
pop ebx  +
retn   +
***
mov esi eax +
mov eax esi +
call @Controls@TControl@Loaded$qqrv  +
mov edi [esi+214h] +
cmp edi 0FFFFFFFFh +
jz loc_44EF2A  +
mov edx edi +
mov eax esi +
mov ecx [eax] +
call dword ptr [ecx+0CCh]  +
pop edi  +
pop esi  +
retn   +
***
mov esi eax +
xor ebx ebx +
mov eax esi +
call @Controls@TWinControl@HandleAllocated$qqrv  +
test al al +
jz loc_44EF5C  +
call GetFocus  +
cmp eax [esi+240h] +
jz loc_44EF5A  +
cmp eax [esi+244h] +
jz loc_44EF5A  +
xor ebx ebx +
jmp loc_44EF5C  +
mov bl 1 +
mov eax ebx +
pop esi  +
pop ebx  +
retn   +
***
jz loc_44EF7F  +
mov ebx eax +
mov edx eax +
mov eax [ebx+234h] +
call dword ptr [ebx+230h]  +
pop ebx  +
retn   +
***
cmp word ptr [eax+222h] 0 +
jz loc_44EFA3  +
mov ebx eax +
mov edx eax +
mov eax [ebx+224h] +
call dword ptr [ebx+220h]  +
pop esi  +
pop ebx  +
retn   +
mov si 0FFB3h +
call @System@@CallDynaInst$qqrv  +
pop esi  +
pop ebx  +
retn   +
***
mov eax ebx +
call @Controls@TWinControl@CreateWnd$qqrv  +
push 0  +
mov eax [ebx+20Ch] +
push eax  +
push 141h  +
mov eax ebx +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call SendMessageA  +
xor eax eax +
mov [ebx+240h] eax +
xor eax eax +
mov [ebx+244h] eax +
pop ebx  +
retn   +
***
push ecx  +
mov esi eax +
mov edi [esi+23Ch] +
test edi edi +
jz loc_44F0BC  +
mov eax edi +
mov ecx [eax] +
call dword ptr [ecx+8]  +
pop edi  +
pop esi  +
retn   +
mov [esi+23Ch] edx +
pop edi  +
pop esi  +
retn   +
***
or edx 0FFFFFFFFh +
push 0  +
mov eax ebx +
mov edx [eax] +
call dword ptr [edx+0C8h]  +
inc eax  +
jz loc_44F187  +
mov eax ebx +
mov edx [eax] +
call dword ptr [edx+0C8h]  +
mov edx eax +
mov eax [ebx+23Ch] +
mov ecx [eax] +
call dword ptr [ecx+48h]  +
pop ebx  +
retn   +
***
mov edx [eax] +
call dword ptr [edx+100h]  +
retn   +
***
mov [eax+210h] edx +
retn   +
***
push ecx  +
push ebx  +
push esi  +
mov esi ecx +
mov [ebp+var_4] edx +
mov ebx eax +
mov eax [ebp+var_4] +
call unknown_libname_549  +
xor eax eax +
push ebp  +
push offset loc_44F1E9  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov ecx esi +
mov edx [ebp+var_4] +
mov eax [ebx+23Ch] +
mov ebx [eax] +
call dword ptr [ebx+3Ch]  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_44F1F0  +
lea eax [ebp+var_4] +
call unknown_libname_540  +
retn   +
jmp unknown_libname_539  +
jmp loc_44F1E0  +
pop esi  +
pop ebx  +
pop ecx  +
pop ebp  +
retn   +
***
mov esi edx +
mov ebx eax +
mov edx esi +
mov eax ebx +
call sub_478AE8  +
mov eax esi +
mov edx ds:off_44BCAC +
call unknown_libname_534  +
mov [ebx+28h] eax +
pop esi  +
pop ebx  +
retn   +
***
mov eax ebx +
call unknown_libname_66  +
test al al +
jz loc_44F24A  +
mov eax [ebx+28h] +
mov edx [eax] +
call dword ptr [edx+0C4h]  +
push eax  +
mov eax [ebx+10h] +
mov edx ds:off_448424 +
call unknown_libname_534  +
pop edx  +
cmp dl [eax+69h] +
jz loc_44F24E  +
xor eax eax +
pop ebx  +
retn   +
mov al 1 +
pop ebx  +
retn   +
***
push ecx  +
push ebx  +
mov ebx edx +
mov [ebp+var_4] eax +
mov eax [ebp+var_4] +
mov edx [eax] +
call dword ptr [edx+24h]  +
test al al +
jz loc_44F2B1  +
mov eax [ebp+var_4] +
mov eax [eax+28h] +
mov byte ptr [eax+208h] 1 +
xor edx edx +
push ebp  +
push offset loc_44F2AA  +
push dword ptr fs:[edx]  +
mov fs:[edx] esp +
mov edx ebx +
mov ecx [eax] +
call dword ptr [ecx+0C8h]  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_44F2B1  +
mov eax [ebp+var_4] +
mov eax [eax+28h] +
mov byte ptr [eax+208h] 0 +
retn   +
jmp unknown_libname_539  +
jmp loc_44F29C  +
pop ebx  +
pop ecx  +
pop ebp  +
retn   +
***
test dl dl +
jz loc_44F2C6  +
add esp 0FFFFFFF0h +
call unknown_libname_535  +
mov ebx edx +
mov esi eax +
xor edx edx +
mov eax esi +
call @Controls@TWinControl@$bctr$qqrp18Classes@TComponent  +
mov eax off_4EA8CC +
cmp byte ptr [eax+0Ch] 0 +
jz loc_44F2EF  +
mov eax off_4EA8B8 +
cmp dword ptr [eax] 2 +
jnz loc_44F2EF  +
mov byte ptr [esi+184h] 0 +
mov eax esi +
test bl bl +
jz loc_44F304  +
call sub_4BABC8  +
pop large dword ptr fs:0  +
add esp 0Ch +
mov eax esi +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
retn   +
***
retn   +
***
push edi  +
mov edi edx +
mov ebx eax +
mov eax [edi] +
sub eax 201h +
jz loc_44F382  +
sub eax 2 +
jz loc_44F382  +
sub eax 0BB0Eh +
jz loc_44F3C3  +
jmp loc_44F3CC  +
test byte ptr [ebx+1Ch] 10h +
jnz loc_44F3CC  +
mov eax ebx +
mov si 0FFB5h +
call @System@@CallDynaInst$qqrv  +
test al al +
jnz loc_44F3CC  +
mov byte ptr [ebx+208h] 1 +
mov eax ebx +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call SetFocus  +
mov byte ptr [ebx+208h] 0 +
mov eax ebx +
mov si 0FFB5h +
call @System@@CallDynaInst$qqrv  +
test al al +
jz loc_44F3D5  +
jmp loc_44F3CC  +
cmp byte ptr [ebx+208h] 0 +
jnz loc_44F3D5  +
mov edx edi +
mov eax ebx +
call @Controls@TWinControl@WndProc$qqrr17Messages@TMessage  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
test dl dl +
jz loc_44F3EA  +
add esp 0FFFFFFF0h +
call unknown_libname_535  +
mov ebx edx +
mov esi eax +
xor edx edx +
mov eax esi +
call @Stdctrls@TButtonControl@$bctr$qqrp18Classes@TComponent  +
mov eax ds:dword_44F43C +
mov [esi+50h] eax +
mov edx 4Bh +
mov eax esi +
call @Controls@TControl@SetWidth$qqri  +
mov edx 19h +
mov eax esi +
call @Controls@TControl@SetHeight$qqri  +
mov dl 1 +
mov eax esi +
call @Controls@TWinControl@SetTabStop$qqro  +
mov eax esi +
test bl bl +
jz loc_44F435  +
call sub_4BABC8  +
pop large dword ptr fs:0  +
add esp 0Ch +
mov eax esi +
pop esi  +
pop ebx  +
retn   +
***
mov eax ebx +
call @Forms@GetParentForm$qqrp17Controls@TControl  +
test eax eax +
jz loc_44F45A  +
mov edx [ebx+214h] +
mov [eax+24Ch] edx +
mov eax ebx +
call @Controls@TControl@Click$qqrv  +
pop ebx  +
retn   +
***
retn   +
***
push edi  +
push ebp  +
mov ebx edx +
mov ebp eax +
mov eax ebp +
call @Controls@TWinControl@HandleAllocated$qqrv  +
test al al +
jz loc_44F4B5  +
test bl bl +
jz loc_44F485  +
mov si 1 +
jmp loc_44F487  +
xor esi esi +
push 0FFFFFFF0h  +
mov eax ebp +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call GetWindowLongA  +
and eax 0Fh +
movzx edi si +
cmp eax edi +
jz loc_44F4B5  +
push 1  +
push edi  +
push 0F4h  +
mov eax ebp +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call SendMessageA  +
pop ebp  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov [ebx+210h] dl +
mov esi edx +
mov ebx eax +
mov edx esi +
mov eax ebx +
call @Controls@TWinControl@CreateParams$qqrr22Controls@TCreateParams  +
mov ecx offset aButton +
mov edx esi +
mov eax ebx +
call @Controls@TWinControl@CreateSubClass$qqrr22Controls@TCreateParamspc  +
xor eax eax +
mov al [ebx+210h] +
mov eax dword_4E60A4[eax*4] +
or [esi+4] eax +
pop esi  +
pop ebx  +
retn   +
***
mov eax ebx +
jnz loc_44F555  +
mov si 0FFEBh +
call @System@@CallDynaInst$qqrv  +
pop esi  +
retn   +
***
push edi  +
mov edi edx +
mov ebx eax +
cmp word ptr [edi+4] 0Dh +
jnz loc_44F56F  +
cmp byte ptr [ebx+212h] 0 +
jnz loc_44F57F  +
cmp word ptr [edi+4] 1Bh +
jnz loc_44F5B4  +
cmp byte ptr [ebx+211h] 0 +
jz loc_44F5B4  +
mov eax [edi+8] +
call @KeyDataToShiftState$qqri  +
mov dl ds:byte_44F5C4 +
cmp dl al +
jnz loc_44F5B4  +
mov eax ebx +
mov si 0FFB8h +
call @System@@CallDynaInst$qqrv  +
test al al +
jz loc_44F5B4  +
mov eax ebx +
mov si 0FFEBh +
call @System@@CallDynaInst$qqrv  +
mov dword ptr [edi+0Ch] 1 +
jmp loc_44F5BD  +
mov edx edi +
mov eax ebx +
call sub_47C160  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push 0  +
push ebx  +
push esi  +
push edi  +
mov edi edx +
mov ebx eax +
xor eax eax +
push ebp  +
push offset loc_44F63E  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
lea edx [ebp+var_4] +
mov eax ebx +
call @TControl@GetText$qqrv  +
mov edx [ebp+var_4] +
mov ax [edi+4] +
call @Forms@IsAccel$qqrusx17System@AnsiString  +
test al al +
jz loc_44F61F  +
mov eax ebx +
mov si 0FFB8h +
call @System@@CallDynaInst$qqrv  +
test al al +
jz loc_44F61F  +
mov eax ebx +
mov si 0FFEBh +
call @System@@CallDynaInst$qqrv  +
mov dword ptr [edi+0Ch] 1 +
jmp loc_44F628  +
mov edx edi +
mov eax ebx +
call sub_47C168  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_44F645  +
lea eax [ebp+var_4] +
call unknown_libname_540  +
retn   +
jmp unknown_libname_539  +
jmp loc_44F635  +
pop edi  +
pop esi  +
pop ebx  +
pop ecx  +
pop ebp  +
retn   +
***
push edi  +
mov esi edx +
mov ebx eax +
mov edi [esi+8] +
mov eax edi +
mov edx ds:off_44BE10 +
call @System@@IsClass$qqrp14System@TObjectp17System@TMetaClass  +
test al al +
jz loc_44F674  +
cmp ebx edi +
setz al  +
mov [ebx+212h] al +
jmp loc_44F680  +
mov al [ebx+210h] +
mov [ebx+212h] al +
mov dl [ebx+212h] +
mov eax ebx +
mov ecx [eax] +
call dword ptr [ecx+0CCh]  +
mov edx esi +
mov eax ebx +
call sub_47C170  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov edi edx +
mov esi eax +
mov edx edi +
mov eax esi +
mov ecx [eax] +
call dword ptr [ecx-10h]  +
pop edi  +
pop esi  +
retn   +
***
test dl dl +
jz loc_44F6C2  +
add esp 0FFFFFFF0h +
call unknown_libname_535  +
mov ebx edx +
mov esi eax +
xor edx edx +
mov eax esi +
call @Controls@TWinControl@$bctr$qqrp18Classes@TComponent  +
mov edx 79h +
mov eax esi +
call @Controls@TControl@SetWidth$qqri  +
push 3  +
call GetSystemMetrics  +
mov edx eax +
mov eax esi +
call @Controls@TControl@SetHeight$qqri  +
mov dl 1 +
mov eax esi +
call @Controls@TWinControl@SetTabStop$qqro  +
mov eax ds:dword_44F768 +
mov [esi+50h] eax +
mov byte ptr [esi+208h] 0 +
xor eax eax +
mov [esi+20Ch] eax +
xor eax eax +
mov [esi+210h] eax +
mov dword ptr [esi+214h] 64h +
mov word ptr [esi+220h] 1 +
mov word ptr [esi+222h] 1 +
mov eax off_4EA8CC +
cmp byte ptr [eax+0Ch] 0 +
jz loc_44F74B  +
mov eax off_4EA8B8 +
cmp dword ptr [eax] 2 +
jnz loc_44F74B  +
mov byte ptr [esi+184h] 0 +
mov eax esi +
test bl bl +
jz loc_44F760  +
call sub_4BABC8  +
pop large dword ptr fs:0  +
add esp 0Ch +
mov eax esi +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
mov edi edx +
mov ebx eax +
mov edx edi +
mov eax ebx +
call @Controls@TWinControl@CreateParams$qqrr22Controls@TCreateParams  +
mov ecx offset aScrollbar +
mov edx edi +
mov eax ebx +
call @Controls@TWinControl@CreateSubClass$qqrr22Controls@TCreateParamspc  +
xor eax eax +
mov al [ebx+208h] +
mov eax dword_4E60AC[eax*4] +
or [edi+4] eax +
cmp byte ptr [ebx+208h] 1 +
jnz loc_44F7BE  +
mov eax ebx +
mov si 0FFC8h +
call @System@@CallDynaInst$qqrv  +
test al al +
jnz loc_44F7BA  +
or dword ptr [edi+4] 4 +
jmp loc_44F7BE  +
or dword ptr [edi+4] 2 +
mov eax ebx +
call @Stdctrls@TScrollBar@NotRightToLeft$qqrv  +
test al al +
jz loc_44F7D5  +
mov dword ptr [ebx+21Ch] 1 +
jmp loc_44F7DF  +
mov dword ptr [ebx+21Ch] 0FFFFFFFFh +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov ebx eax +
lea edx [esp+2Ch+var_10] +
mov eax ebx +
call @Controls@TControl@GetBoundsRect$qqrv  +
mov eax ebx +
call @Controls@TWinControl@CreateWnd$qqrv  +
lea edx [esp+2Ch+var_10] +
mov eax ebx +
call @Controls@TControl@SetBoundsRect$qqrrx11Types@TRect  +
push 0  +
mov eax [ebx+214h] +
push eax  +
mov eax [ebx+210h] +
push eax  +
push 2  +
mov eax ebx +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call SetScrollRange  +
mov [esp+2Ch+var_2C.cbSize] 1Ch +
mov eax [ebx+218h] +
mov [esp+2Ch+var_2C.nPage] eax +
mov [esp+2Ch+var_2C.fMask] 2 +
push 0  +
lea eax [esp+30h+var_2C] +
push eax  +
push 2  +
mov eax ebx +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call SetScrollInfo  +
mov eax ebx +
call @Stdctrls@TScrollBar@NotRightToLeft$qqrv  +
test al al +
jz loc_44F886  +
push 0FFFFFFFFh  +
mov eax [ebx+20Ch] +
push eax  +
push 2  +
mov eax ebx +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call SetScrollPos  +
jmp loc_44F8A4  +
push 0FFFFFFFFh  +
mov eax [ebx+214h] +
sub eax [ebx+20Ch] +
push eax  +
push 2  +
mov eax ebx +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call SetScrollPos  +
add esp 2Ch +
pop ebx  +
retn   +
***
mov eax ebx +
call @Controls@TControl@UseRightToLeftReading$qqrv  +
test al al +
jz loc_44F8C7  +
cmp byte ptr [ebx+208h] 1 +
jz loc_44F8C7  +
xor eax eax +
pop ebx  +
retn   +
mov al 1 +
pop ebx  +
retn   +
***
mov ebx eax +
cmp dl [ebx+208h] +
jz loc_44F903  +
mov [ebx+208h] dl +
test byte ptr [ebx+1Ch] 1 +
jnz loc_44F8FC  +
mov eax [ebx+4Ch] +
push eax  +
mov eax [ebx+48h] +
push eax  +
mov ecx [ebx+44h] +
mov edx [ebx+40h] +
mov eax ebx +
mov esi [eax] +
call dword ptr [esi+84h]  +
mov eax ebx +
call @Controls@TWinControl@RecreateWnd$qqrv  +
pop esi  +
pop ebx  +
retn   +
***
add esp 0FFFFFFF8h +
push ebx  +
push esi  +
push edi  +
xor ebx ebx +
mov [ebp+var_8] ebx +
mov [ebp+nMinPos] ecx +
mov edi edx +
mov ebx eax +
mov esi [ebp+arg_0] +
xor eax eax +
push ebp  +
push offset loc_44FA3F  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
cmp esi [ebp+nMinPos] +
jl loc_44F93B  +
cmp esi [ebx+218h] +
jge loc_44F95C  +
lea edx [ebp+var_8] +
mov eax off_4EA714 +
call @System@LoadResString$qqrp20System@TResStringRec  +
mov ecx [ebp+var_8] +
mov dl 1 +
mov eax ds:off_49A578 +
call sub_4AC17C  +
call @System@@RaiseExcept$qqrv  +
cmp edi [ebp+nMinPos] +
jge loc_44F964  +
mov edi [ebp+nMinPos] +
cmp esi edi +
jge loc_44F96A  +
mov edi esi +
mov eax [ebx+210h] +
cmp eax [ebp+nMinPos] +
jnz loc_44F97D  +
cmp esi [ebx+214h] +
jz loc_44F9B9  +
mov eax [ebp+nMinPos] +
mov [ebx+210h] eax +
mov [ebx+214h] esi +
mov eax ebx +
call @Controls@TWinControl@HandleAllocated$qqrv  +
test al al +
jz loc_44F9B9  +
cmp edi [ebx+20Ch] +
setz al  +
neg al  +
sbb eax eax +
push eax  +
push esi  +
mov eax [ebp+nMinPos] +
push eax  +
push 2  +
mov eax ebx +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call SetScrollRange  +
cmp edi [ebx+20Ch] +
jz loc_44FA29  +
mov [ebx+20Ch] edi +
mov eax ebx +
call @Controls@TWinControl@HandleAllocated$qqrv  +
test al al +
jz loc_44FA15  +
mov eax ebx +
call @Stdctrls@TScrollBar@NotRightToLeft$qqrv  +
test al al +
jz loc_44F9F7  +
push 0FFFFFFFFh  +
mov eax [ebx+20Ch] +
push eax  +
push 2  +
mov eax ebx +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call SetScrollPos  +
jmp loc_44FA15  +
push 0FFFFFFFFh  +
mov eax [ebx+214h] +
sub eax [ebx+20Ch] +
push eax  +
push 2  +
mov eax ebx +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call SetScrollPos  +
mov dl 1 +
mov eax ebx +
mov ecx [eax] +
call dword ptr [ecx+64h]  +
mov eax ebx +
mov si 0FFB3h +
call @System@@CallDynaInst$qqrv  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_44FA46  +
lea eax [ebp+var_8] +
call unknown_libname_540  +
retn   +
jmp unknown_libname_539  +
jmp loc_44FA36  +
pop edi  +
pop esi  +
pop ebx  +
pop ecx  +
pop ecx  +
pop ebp  +
retn 4  +
***
mov ecx [eax+214h] +
push ecx  +
mov ecx [eax+210h] +
call @Stdctrls@TScrollBar@SetParams$qqriii  +
retn   +
***
mov ebx eax +
cmp edx [ebx+218h] +
jz loc_44FAB4  +
cmp edx [ebx+214h] +
jg loc_44FAB4  +
mov [ebx+218h] edx +
mov [esp+1Ch+var_1C.cbSize] 1Ch +
mov [esp+1Ch+var_1C.nPage] edx +
mov [esp+1Ch+var_1C.fMask] 2 +
mov eax ebx +
call @Controls@TWinControl@HandleAllocated$qqrv  +
test al al +
jz loc_44FAB4  +
push 0FFFFFFFFh  +
lea eax [esp+20h+var_1C] +
push eax  +
push 2  +
mov eax ebx +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call SetScrollInfo  +
add esp 1Ch +
pop ebx  +
retn   +
***
mov ecx [eax+214h] +
push ecx  +
mov ecx edx +
mov edx [eax+20Ch] +
call @Stdctrls@TScrollBar@SetParams$qqriii  +
retn   +
***
mov edx [eax+20Ch] +
call @Stdctrls@TScrollBar@SetParams$qqriii  +
retn   +
***
mov eax ebx +
jz loc_44FB2A  +
push edi  +
add esp 0FFFFFFE0h +
mov edi edx +
mov ebx eax +
mov esi [ebx+20Ch] +
xor eax eax +
mov al [edi+4] +
cmp eax 7 +
ja loc_44FC05  +
jmp ds:off_44FB51[eax*4]  +
movzx eax word ptr [ebx+220h] +
imul  dword ptr [ebx+21Ch] +
sub esi eax +
jmp loc_44FC05  +
movzx eax word ptr [ebx+220h] +
imul  dword ptr [ebx+21Ch] +
add esi eax +
jmp loc_44FC05  +
movzx eax word ptr [ebx+222h] +
imul  dword ptr [ebx+21Ch] +
sub esi eax +
jmp loc_44FC05  +
movzx eax word ptr [ebx+222h] +
imul  dword ptr [ebx+21Ch] +
add esi eax +
jmp loc_44FC05  +
mov [esp+20h+var_1C.cbSize] 1Ch +
mov [esp+20h+var_1C.fMask] 17h +
lea eax [esp+20h+var_1C] +
push eax  +
push 2  +
mov eax ebx +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call GetScrollInfo  +
mov esi [esp+20h+var_1C.nTrackPos] +
mov eax ebx +
call @Stdctrls@TScrollBar@NotRightToLeft$qqrv  +
test al al +
jnz loc_44FC05  +
mov eax [ebx+214h] +
sub eax esi +
mov esi eax +
jmp loc_44FC05  +
mov esi [ebx+210h] +
jmp loc_44FC05  +
mov esi [ebx+214h] +
mov eax [ebx+210h] +
cmp esi eax +
jge loc_44FC11  +
mov esi eax +
mov eax [ebx+214h] +
cmp esi eax +
jle loc_44FC1D  +
mov esi eax +
mov [esp+20h+var_20] esi +
mov ecx esp +
mov dl [edi+4] +
mov eax ebx +
mov si 0FFB2h +
call @System@@CallDynaInst$qqrv  +
mov edx [esp+20h+var_20] +
mov eax ebx +
call @Stdctrls@TScrollBar@SetPosition$qqri  +
add esp 20h +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
call @Stdctrls@TScrollBar@DoScroll$qqrr18Messages@TWMScroll  +
retn   +
***
call @Stdctrls@TScrollBar@DoScroll$qqrr18Messages@TWMScroll  +
retn   +
***
mov esi edx +
mov edi edx +
mov esi eax +
mov edx edi +
mov eax esi +
mov ecx [eax] +
call dword ptr [ecx-10h]  +
pop edi  +
pop esi  +
retn   +
***
xor eax eax +
push ebp  +
push offset loc_44FCB5  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
inc dword_4F1728  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_44FCBC  +
retn   +
jmp unknown_libname_539  +
jmp locret_44FCB4  +
pop ebp  +
retn   +
***
sub dword_4F1728 1 +
retn   +
***
cmp dword ptr [eax] 0 +
jz loc_44FDB5  +
mov edx [eax] +
jmp loc_44FD95  +
inc edx  +
cmp byte ptr [edx] 20h +
jz loc_44FD94  +
mov esi edx +
jmp loc_44FD9F  +
inc edx  +
mov cl [edx] +
test cl cl +
jz loc_44FDAA  +
cmp cl 2Ch +
jnz loc_44FD9E  +
cmp byte ptr [edx] 2Ch +
jnz loc_44FDB3  +
mov byte ptr [edx] 0 +
inc edx  +
mov [eax] edx +
mov eax esi +
pop esi  +
retn   +
***
mov ecx ebx +
mov eax off_4EA6C8 +
mov eax [eax] +
call @Forms@TApplication@ProcessMessages$qqrv  +
mov eax dword_4E60B4 +
mov al [eax+1Dh] +
xor al 1 +
neg al  +
sbb eax eax +
pop ebp  +
retn 8  +
***
push ebx  +
push esi  +
push edi  +
test dl dl +
jz loc_44FE8A  +
add esp 0FFFFFFF0h +
call unknown_libname_535  +
mov esi ecx +
mov ebx edx +
mov edi eax +
xor edx edx +
mov eax edi +
call @System@TObject@$bctr$qqrv  +
lea eax [edi+4] +
mov edx esi +
call unknown_libname_545  +
lea eax [edi+8] +
mov edx [ebp+arg_4] +
call unknown_libname_545  +
lea eax [edi+0Ch] +
mov edx [ebp+arg_0] +
call unknown_libname_545  +
mov eax edi +
test bl bl +
jz loc_44FECE  +
call sub_4BABC8  +
pop large dword ptr fs:0  +
add esp 0Ch +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
push 0  +
push 0  +
push ebx  +
push esi  +
mov esi ecx +
mov ebx eax +
xor eax eax +
push ebp  +
push offset loc_44FF4B  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
lea eax [ebp+var_4] +
mov edx esi +
call unknown_libname_545  +
mov edx [ebp+var_4] +
mov eax [ebx+8] +
call @System@@LStrCmp$qqrv  +
jnz loc_44FF28  +
cmp dword ptr [ebx+0Ch] 0 +
jz loc_44FF2C  +
lea eax [ebp+var_8] +
mov edx [ebp+arg_0] +
call unknown_libname_545  +
mov edx [ebp+var_8] +
mov eax [ebx+0Ch] +
call @System@@LStrCmp$qqrv  +
jz loc_44FF2C  +
xor eax eax +
jmp loc_44FF2E  +
mov al 1 +
mov ebx eax +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_44FF52  +
lea eax [ebp+var_8] +
mov edx 2 +
call unknown_libname_541  +
retn   +
jmp unknown_libname_539  +
jmp loc_44FF3D  +
mov eax ebx +
pop esi  +
pop ebx  +
pop ecx  +
pop ecx  +
pop ebp  +
retn 4  +
***
push edi  +
mov dl 1 +
mov eax [ebx+58h] +
call sub_4501CC  +
mov eax ebx +
call @Printers@_16420  +
mov eax [ebx+58h] +
mov edx [eax+20h] +
mov eax ebx +
call @Graphics@TCanvas@SetHandle$qqrui  +
pop ebx  +
retn   +
***
mov dl 1 +
mov eax [ebx+58h] +
call @Printers@TPrinter@CheckPrinting$qqro  +
mov eax ebx +
call @Ddeman@TDdeServerConv@Connect$qqrv  +
mov eax ebx +
call @Printers@_16420  +
pop ebx  +
retn   +
***
push edi  +
mov ebx eax +
push 5Ah  +
mov eax [ebx+58h] +
mov eax [eax+20h] +
push eax  +
call GetDeviceCaps  +
mov esi [ebx+0Ch] +
cmp eax [esi+1Ch] +
jz loc_45010D  +
mov eax esi +
call @Graphics@TFont@GetSize$qqrv  +
mov esi eax +
push 5Ah  +
mov eax [ebx+58h] +
mov eax [eax+20h] +
push eax  +
call GetDeviceCaps  +
mov edi [ebx+0Ch] +
mov [edi+1Ch] eax +
mov edx esi +
mov eax edi +
call @Graphics@TFont@SetSize$qqri  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
test dl dl +
call unknown_libname_536  +
mov ebx edx +
mov esi eax +
cmp byte ptr [esi+1Ch] 0 +
jz loc_450168  +
mov eax esi +
call @Printers@TPrinter@EndDoc$qqrv  +
xor edx edx +
mov eax esi +
call sub_4501CC  +
mov eax esi +
call @Printers@TPrinter@FreePrinters$qqrv  +
mov eax esi +
call @Printers@TPrinter@FreeFonts$qqrv  +
mov eax [esi+4] +
call @System@TObject@Free$qqrv  +
mov eax [esi+2Ch] +
test eax eax +
jz loc_450194  +
push eax  +
call ClosePrinter  +
mov eax [esi+28h] +
test eax eax +
jz loc_4501AF  +
push eax  +
call GlobalUnlock  +
mov eax [esi+28h] +
push eax  +
call GlobalFree  +
xor eax eax +
mov [esi+28h] eax +
mov edx ebx +
and dl 0FCh +
mov eax esi +
call sub_4BA7FC  +
test bl bl +
jle loc_4501C6  +
mov eax esi +
call @System@@ClassDestroy$qqrp14System@TObject  +
pop esi  +
pop ebx  +
retn   +
***
add esp 0FFFFFFF8h +
push 0  +
mov ebx eax +
xor edx edx +
mov eax ebx +
call @Printers@TPrinter@CheckPrinting$qqro  +
mov dl 2 +
mov eax ebx +
call sub_4501CC  +
mov eax ebx +
call @Printers@TPrinter@GetCanvas$qqrv  +
call sub_45B438  +
mov eax ebx +
call @Printers@TPrinter@GetCanvas$qqrv  +
call @Printers@_16420  +
mov byte ptr [ebx+1Ch] 1 +
mov byte ptr [ebx+1Dh] 0 +
mov dword ptr [ebx+0Ch] 1 +
mov eax esp +
xor ecx ecx +
mov edx 14h +
call @System@@FillChar$qqrv  +
mov [esp+14h+var_14] 14h +
mov eax [ebx+18h] +
call unknown_libname_550  +
mov [esp+14h+var_10] eax +
push offset @Printers@_16396  +
mov eax [ebx+20h] +
push eax  +
call SetAbortProc  +
push esp  +
mov eax [ebx+20h] +
push eax  +
call StartDocA  +
mov eax [ebx+20h] +
push eax  +
call StartPage  +
add esp 14h +
pop ebx  +
retn   +
***
mov dl 1 +
mov eax ebx +
call @Printers@TPrinter@CheckPrinting$qqro  +
mov eax [ebx+20h] +
push eax  +
call EndPage  +
cmp byte ptr [ebx+1Dh] 0 +
jnz loc_450414  +
mov eax [ebx+20h] +
push eax  +
call EndDoc  +
mov byte ptr [ebx+1Ch] 0 +
mov byte ptr [ebx+1Dh] 0 +
xor eax eax +
mov [ebx+0Ch] eax +
pop ebx  +
retn   +
***
mov dl 1 +
mov eax ebx +
call @Printers@TPrinter@CheckPrinting$qqro  +
mov eax [ebx+20h] +
push eax  +
call EndPage  +
mov eax [ebx+20h] +
push eax  +
call StartPage  +
inc dword ptr [ebx+0Ch]  +
mov eax ebx +
call @Printers@TPrinter@GetCanvas$qqrv  +
call sub_45B438  +
pop ebx  +
retn   +
***
push ecx  +
push ebx  +
push esi  +
push edi  +
mov [ebp+var_4] ecx +
mov edi edx +
mov ebx eax +
mov eax ebx +
call @Printers@TPrinter@GetPrinterIndex$qqrv  +
push eax  +
mov eax ebx +
call @Printers@TPrinter@GetPrinters$qqrv  +
pop edx  +
mov ecx [eax] +
call dword ptr [ecx+18h]  +
mov esi eax +
mov eax [esi+8] +
call unknown_libname_550  +
mov edx eax +
mov eax edi +
call sub_4A9198  +
mov eax [esi+4] +
call unknown_libname_550  +
mov edx eax +
mov eax [ebp+var_4] +
call sub_4A9198  +
mov eax [esi+0Ch] +
call unknown_libname_550  +
mov edx eax +
mov eax [ebp+arg_4] +
call sub_4A9198  +
mov eax [ebp+arg_0] +
mov edx [ebx+28h] +
mov [eax] edx +
pop edi  +
pop esi  +
pop ebx  +
pop ecx  +
pop ebp  +
retn 8  +
***
mov esi edx +
mov ebx eax +
mov al ds:byte_4504F8 +
mov [ebx+1Eh] al +
test esi 1 +
jz loc_4504DA  +
or byte ptr [ebx+1Eh] 2 +
test esi 100h +
jz loc_4504E6  +
or byte ptr [ebx+1Eh] 1 +
test esi 8000h +
jz loc_4504F2  +
or byte ptr [ebx+1Eh] 4 +
pop esi  +
pop ebx  +
retn   +
***
add esp 0FFFFFF3Ch +
push ebx  +
push esi  +
push edi  +
xor ebx ebx +
mov [ebp+var_B0] ebx +
mov [ebp+var_B4] ebx +
mov [ebp+var_8] ecx +
mov [ebp+pDeviceName] edx +
mov ebx eax +
mov esi [ebp+arg_0] +
xor eax eax +
push ebp  +
push offset loc_450733  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
xor edx edx +
mov eax ebx +
call @Printers@TPrinter@CheckPrinting$qqro  +
mov eax [ebx+28h] +
cmp esi eax +
jz loc_450555  +
test eax eax +
jz loc_450552  +
push eax  +
call GlobalUnlock  +
mov eax [ebx+28h] +
push eax  +
call GlobalFree  +
mov [ebx+28h] esi +
mov esi [ebx+28h] +
test esi esi +
jz loc_450571  +
push esi  +
call GlobalLock  +
mov edi eax +
mov [ebx+24h] edi +
mov edx [edi+28h] +
mov eax ebx +
call unknown_libname_108  +
mov eax ebx +
call @Printers@TPrinter@FreeFonts$qqrv  +
mov eax [ebx+2Ch] +
test eax eax +
jz loc_45058A  +
push eax  +
call ClosePrinter  +
xor eax eax +
mov [ebx+2Ch] eax +
xor edx edx +
mov eax ebx +
call sub_4501CC  +
mov [ebp+var_C] 0FFFFFFFFh +
mov eax ebx +
call @Printers@TPrinter@GetPrinters$qqrv  +
mov [ebp+var_10] eax +
mov eax [ebp+var_10] +
mov edx [eax] +
call dword ptr [edx+14h]  +
mov edi eax +
dec edi  +
test edi edi +
jl loc_4505F1  +
inc edi  +
xor esi esi +
mov eax [ebp+arg_4] +
push eax  +
mov edx esi +
mov eax [ebp+var_10] +
mov ecx [eax] +
call dword ptr [ecx+18h]  +
mov ecx [ebp+pDeviceName] +
mov edx [ebp+var_8] +
call @Printers@_16414  +
test al al +
jz loc_4505ED  +
mov edx esi +
mov eax [ebp+var_10] +
mov ecx [eax] +
call dword ptr [ecx+18h]  +
add eax 0Ch +
mov edx [ebp+arg_4] +
call unknown_libname_545  +
mov [ebp+var_C] esi +
jmp loc_4505F1  +
inc esi  +
dec edi  +
jnz loc_4505B6  +
cmp [ebp+var_C] 0FFFFFFFFh +
jnz loc_450676  +
mov eax [ebx+10h] +
mov edx [eax] +
call dword ptr [edx+14h]  +
mov [ebp+var_C] eax +
mov eax [ebp+pDeviceName] +
push eax  +
mov eax [ebp+arg_4] +
push eax  +
mov ecx [ebp+var_8] +
mov dl 1 +
mov eax ds:off_44FDF8 +
call sub_44FE78  +
push eax  +
lea eax [ebp+var_B0] +
push eax  +
lea edx [ebp+var_B4] +
mov eax off_4EA738 +
call @System@LoadResString$qqrp20System@TResStringRec  +
mov eax [ebp+var_B4] +
mov edx [ebp+pDeviceName] +
mov [ebp+var_C4] edx +
mov [ebp+var_C0] 6 +
mov edx [ebp+arg_4] +
mov [ebp+var_BC] edx +
mov [ebp+var_B8] 6 +
lea edx [ebp+var_C4] +
mov ecx 1 +
call @Sysutils@Format$qqrx17System@AnsiStringpx14System@TVarRecxi  +
mov edx [ebp+var_B0] +
mov eax [ebx+10h] +
pop ecx  +
mov esi [eax] +
call dword ptr [esi+3Ch]  +
mov eax [ebp+var_C] +
mov [ebx+14h] eax +
push 0  +
lea eax [ebx+2Ch] +
push eax  +
mov eax [ebp+pDeviceName] +
push eax  +
call OpenPrinterA  +
test eax eax +
jz loc_450715  +
cmp dword ptr [ebx+28h] 0 +
jnz loc_450702  +
push 0  +
lea eax [ebp+pDevModeInput] +
push eax  +
lea eax [ebp+pDevModeInput] +
push eax  +
mov eax [ebp+pDeviceName] +
push eax  +
mov eax [ebx+2Ch] +
push eax  +
push 0  +
call DocumentPropertiesA  +
push eax  +
push 42h  +
call GlobalAlloc  +
mov esi eax +
mov [ebx+28h] esi +
test esi esi +
jz loc_450702  +
push esi  +
call GlobalLock  +
mov edi eax +
mov [ebx+24h] edi +
push 2  +
push edi  +
push edi  +
mov eax [ebp+pDeviceName] +
push eax  +
mov eax [ebx+2Ch] +
push eax  +
push 0  +
call DocumentPropertiesA  +
test eax eax +
jge loc_450702  +
mov eax [ebx+28h] +
push eax  +
call GlobalUnlock  +
mov eax [ebx+28h] +
push eax  +
call GlobalFree  +
xor eax eax +
mov [ebx+28h] eax +
cmp dword ptr [ebx+28h] 0 +
jz loc_450715  +
mov eax [ebx+24h] +
mov edx [eax+28h] +
mov eax ebx +
call unknown_libname_108  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_45073A  +
lea eax [ebp+var_B4] +
mov edx 2 +
call unknown_libname_541  +
retn   +
jmp unknown_libname_539  +
jmp loc_450722  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 8  +
***
cmp dword ptr [ebx+4] 0 +
jnz loc_45075E  +
mov ecx ebx +
mov dl 1 +
mov eax ds:off_44FF5C +
call sub_45004C  +
mov [ebx+4] eax +
mov eax [ebx+4] +
pop ebx  +
retn   +
***
mov dl 1 +
mov eax ebx +
call sub_4501CC  +
mov eax [ebx+20h] +
pop ebx  +
retn   +
***
mov dl 1 +
mov eax ebx +
call sub_4501CC  +
push 0Ah  +
mov eax [ebx+20h] +
push eax  +
call GetDeviceCaps  +
pop ebx  +
retn   +
***
mov dl 1 +
mov eax ebx +
call sub_4501CC  +
push 8  +
mov eax [ebx+20h] +
push eax  +
call GetDeviceCaps  +
pop ebx  +
retn   +
***
cmp dword ptr [ebx+14h] 0FFFFFFFFh +
jnz loc_4507C0  +
mov eax ebx +
call @Printers@TPrinter@SetToDefaultPrinter$qqrv  +
mov eax [ebx+14h] +
pop ebx  +
retn   +
***
add esp 0FFFFFFC8h +
push ebx  +
push esi  +
push edi  +
xor edx edx +
mov [ebp+var_24] edx +
mov [ebp+var_28] edx +
mov [ebp+var_20] edx +
mov [ebp+var_4] eax +
xor eax eax +
push ebp  +
push offset loc_4509F7  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov eax [ebp+var_4] +
cmp dword ptr [eax+10h] 0 +
jnz loc_4509D6  +
mov dl 1 +
mov eax ds:off_49ABC4 +
call @System@TObject@$bctr$qqrv  +
mov ebx eax +
mov eax [ebp+var_4] +
mov [eax+10h] ebx +
mov edi ebx +
xor edx edx +
push ebp  +
push offset loc_4509B4  +
push dword ptr fs:[edx]  +
mov fs:[edx] esp +
mov eax off_4EA8B8 +
cmp dword ptr [eax] 2 +
jnz loc_450831  +
mov esi 6 +
mov bl 4 +
jmp loc_450838  +
mov esi 2 +
mov bl 5 +
xor eax eax +
mov [ebp+pcbNeeded] eax +
lea eax [ebp+pcReturned] +
push eax  +
lea eax [ebp+pcbNeeded] +
push eax  +
push 0  +
push 0  +
xor eax eax +
mov al bl +
push eax  +
push 0  +
push esi  +
call EnumPrintersA  +
cmp [ebp+pcbNeeded] 0 +
jnz loc_450869  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
jmp loc_4509DC  +
mov eax [ebp+pcbNeeded] +
call sub_4B97C0  +
mov [ebp+pPrinterEnum] eax +
xor edx edx +
push ebp  +
push offset loc_4509A3  +
push dword ptr fs:[edx]  +
mov fs:[edx] esp +
lea eax [ebp+pcReturned] +
push eax  +
lea eax [ebp+pcbNeeded] +
push eax  +
mov eax [ebp+pcbNeeded] +
push eax  +
mov eax [ebp+pPrinterEnum] +
push eax  +
xor eax eax +
mov al bl +
push eax  +
push 0  +
push esi  +
call EnumPrintersA  +
test eax eax +
jnz loc_4508B5  +
call @System@@TryFinallyExit$qqrv  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
jmp loc_4509DC  +
mov eax [ebp+pPrinterEnum] +
mov [ebp+var_10] eax +
mov eax [ebp+pcReturned] +
dec eax  +
test eax eax +
jl loc_45098A  +
inc eax  +
mov [ebp+var_1C] eax +
cmp bl 4 +
jnz loc_450906  +
mov esi [ebp+var_10] +
mov edi [esi] +
push edi  +
push 0  +
xor ecx ecx +
mov dl 1 +
mov eax ds:off_44FDF8 +
call sub_44FE78  +
push eax  +
lea eax [ebp+var_20] +
mov edx edi +
call unknown_libname_545  +
mov edx [ebp+var_20] +
mov eax [ebp+var_4] +
mov eax [eax+10h] +
pop ecx  +
mov esi [eax] +
call dword ptr [esi+3Ch]  +
add [ebp+var_10] 0Ch +
jmp loc_450981  +
mov esi [ebp+var_10] +
mov eax [esi+4] +
mov [ebp+var_8] eax +
lea eax [ebp+var_8] +
call unknown_libname_107  +
mov edi eax +
jmp loc_450978  +
mov eax [esi] +
push eax  +
push edi  +
xor ecx ecx +
mov dl 1 +
mov eax ds:off_44FDF8 +
call sub_44FE78  +
push eax  +
lea eax [ebp+var_24] +
push eax  +
lea edx [ebp+var_28] +
mov eax off_4EA738 +
call @System@LoadResString$qqrp20System@TResStringRec  +
mov eax [ebp+var_28] +
mov edx [esi] +
mov [ebp+var_38] edx +
mov [ebp+var_34] 6 +
mov [ebp+var_30] edi +
mov [ebp+var_2C] 6 +
lea edx [ebp+var_38] +
mov ecx 1 +
call @Sysutils@Format$qqrx17System@AnsiStringpx14System@TVarRecxi  +
mov edx [ebp+var_24] +
mov eax [ebp+var_4] +
mov eax [eax+10h] +
pop ecx  +
mov edi [eax] +
call dword ptr [edi+3Ch]  +
lea eax [ebp+var_8] +
call unknown_libname_107  +
mov edi eax +
cmp byte ptr [edi] 0 +
jnz loc_45091B  +
add [ebp+var_10] 14h +
dec [ebp+var_1C]  +
jnz loc_4508CB  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4509AA  +
mov edx [ebp+pcbNeeded] +
mov eax [ebp+pPrinterEnum] +
call sub_4B97E0  +
retn   +
jmp unknown_libname_539  +
jmp loc_450997  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
jmp loc_4509D6  +
jmp @System@@HandleAnyException$qqrv  +
mov eax [ebp-4] +
mov eax [eax+10h] +
call @System@TObject@Free$qqrv  +
mov eax [ebp-4] +
xor edx edx +
mov [eax+10h] edx +
call @System@@RaiseAgain$qqrv  +
call @@DoneExcept$qqrv  +
mov eax [ebp+var_4] +
mov edi [eax+10h] +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4509FE  +
lea eax [ebp+var_28] +
mov edx 3 +
call unknown_libname_541  +
retn   +
jmp unknown_libname_539  +
jmp loc_4509E9  +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
add esp 0FFFFFBDCh +
push ebx  +
push esi  +
push edi  +
xor edx edx +
mov [ebp+var_424] edx +
mov [ebp+var_420] edx +
mov [ebp+var_41C] edx +
mov [ebp+var_4] eax +
xor eax eax +
push ebp  +
push offset loc_450BE5  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
xor eax eax +
mov [ebp+pcbNeeded] eax +
xor eax eax +
mov [ebp+pcReturned] eax +
lea eax [ebp+pcReturned] +
push eax  +
lea eax [ebp+pcbNeeded] +
push eax  +
push 0  +
push 0  +
push 5  +
push 0  +
push 1  +
call EnumPrintersA  +
test eax eax +
jnz loc_450A94  +
call GetLastError  +
cmp eax 7Ah +
jz loc_450A94  +
call GetLastError  +
cmp eax 7Bh +
jnz loc_450A8F  +
lea edx [ebp+var_41C] +
mov eax off_4EA7D8 +
call @System@LoadResString$qqrp20System@TResStringRec  +
mov eax [ebp+var_41C] +
call sub_44FDBC  +
jmp loc_450A94  +
call sub_4AD4E4  +
mov eax [ebp+pcbNeeded] +
call sub_4A8724  +
mov [ebp+pPrinterEnum] eax +
xor eax eax +
push ebp  +
push offset loc_450BA5  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
lea eax [ebp+pcReturned] +
push eax  +
lea eax [ebp+pcbNeeded] +
push eax  +
mov eax [ebp+pcbNeeded] +
push eax  +
mov eax [ebp+pPrinterEnum] +
push eax  +
push 5  +
push 0  +
push 1  +
call EnumPrintersA  +
cmp [ebp+pcReturned] 0 +
jbe loc_450AD8  +
mov eax [ebp+pPrinterEnum] +
mov eax [eax] +
mov [ebp+var_14] eax +
jmp loc_450B0C  +
push 3FFh  +
lea eax [ebp+ReturnedString] +
push eax  +
push offset Default  +
push offset KeyName  +
push offset AppName  +
call GetProfileStringA  +
lea eax [ebp+ReturnedString] +
mov [ebp+var_10] eax +
lea eax [ebp+var_10] +
call unknown_libname_107  +
mov [ebp+var_14] eax +
mov eax [ebp+var_4] +
call @Printers@TPrinter@GetPrinters$qqrv  +
mov edi eax +
mov eax edi +
mov edx [eax] +
call dword ptr [edx+14h]  +
mov esi eax +
dec esi  +
test esi esi +
jl loc_450B8F  +
inc esi  +
xor ebx ebx +
mov edx ebx +
mov eax edi +
mov ecx [eax] +
call dword ptr [ecx+18h]  +
mov eax [eax+8] +
push eax  +
lea eax [ebp+var_420] +
mov edx [ebp+var_14] +
call unknown_libname_545  +
mov edx [ebp+var_420] +
pop eax  +
call @LibMain@_16446  +
test al al +
jz loc_450B8B  +
mov edx ebx +
mov eax edi +
mov ecx [eax] +
call dword ptr [ecx+18h]  +
mov ebx eax +
mov eax [ebx+0Ch] +
call unknown_libname_550  +
push eax  +
push 0  +
mov eax [ebx+4] +
call unknown_libname_550  +
push eax  +
mov eax [ebx+8] +
call unknown_libname_550  +
mov edx eax +
mov eax [ebp+var_4] +
pop ecx  +
call @Printers@TPrinter@SetPrinter$qqrpct1t1ui  +
call @System@@TryFinallyExit$qqrv  +
jmp loc_450BC7  +
inc ebx  +
dec esi  +
jnz loc_450B27  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_450BAC  +
mov eax [ebp+pPrinterEnum] +
call sub_4B97E0  +
retn   +
jmp unknown_libname_539  +
jmp loc_450B9C  +
lea edx [ebp-424h] +
mov eax off_4EA7D8 +
call @System@LoadResString$qqrp20System@TResStringRec  +
mov eax [ebp-424h] +
call sub_44FDBC  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_450BEC  +
lea eax [ebp+var_424] +
mov edx 3 +
call unknown_libname_541  +
retn   +
jmp unknown_libname_539  +
jmp loc_450BD4  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
push edi  +
add eax 8 +
call @Sysutils@FreeAndNil$qqrpv  +
retn   +
***
cmp dword_4E60B4 0 +
xor eax eax +
push ebp  +
push offset loc_450CA1  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
inc dword_4F172C  +
jnz loc_450C93  +
mov eax dword_4E60B4 +
call @System@TObject@Free$qqrv  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_450CA8  +
retn   +
jmp unknown_libname_539  +
jmp locret_450CA0  +
pop ebp  +
retn   +
***
sub dword_4F172C 1 +
retn   +
***
icebp   +
jmp fword ptr [eax+4Ah]  +
***
jmp fword ptr [esp+ecx*2+45h]  +
***
jmp dword ptr [eax+1FF0000h]  +
***
push edi  +
mov edi eax +
xor esi esi +
mov eax edi +
call @Controls@FindVCLWindow$qqrrx12Types@TPoint  +
mov ebx eax +
test ebx ebx +
jz loc_451BD1  +
push 0  +
mov edx edi +
xor ecx ecx +
mov eax ebx +
call @Controls@TWinControl@ControlAtPos$qqrrx12Types@TPointoo  +
mov esi eax +
test esi esi +
jnz loc_451BD1  +
mov esi ebx +
mov eax esi +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
retn   +
***
call @Menus@_16418  +
push eax  +
mov ecx ebx +
mov dl 1 +
mov eax ds:off_450CB4 +
call @Sysutils@Exception@$bctr$qqrp20System@TResStringRec  +
jmp @System@@RaiseExcept$qqrv  +
***
pop ebx  +
retn   +
***
push ecx  +
add esp 0FFFFFEFCh +
push 0  +
push 0  +
push 0  +
push ebx  +
push esi  +
mov esi edx +
mov [ebp+var_2] ax +
xor eax eax +
push ebp  +
push offset loc_451E75  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov bl byte ptr [ebp+var_2] +
xor eax eax +
mov al bl +
cmp eax 2Dh +
jge loc_451CDE  +
add eax 0FFFFFFF8h +
sub eax 2 +
jb loc_451D27  +
sub eax 3 +
jz loc_451D3F  +
sub eax 0Eh +
jz loc_451D52  +
add eax 0FFFFFFFBh +
sub eax 9 +
jb loc_451D65  +
jmp loc_451DF5  +
cmp eax 41h +
jge loc_451CFE  +
add eax 0FFFFFFD3h +
sub eax 2 +
jb loc_451D80  +
dec eax  +
sub eax 0Ah +
jb loc_451D98  +
jmp loc_451DF5  +
add eax 0FFFFFFBFh +
sub eax 1Ah +
jb loc_451DAC  +
add eax 0FFFFFFFBh +
sub eax 0Ah +
jb loc_451DC0  +
add eax 0FFFFFFFAh +
sub eax 18h +
jb loc_451DD4  +
jmp loc_451DF5  +
lea eax [ebp+var_8] +
xor edx edx +
mov dl bl +
mov edx dword_4E60AC[edx*4] +
call unknown_libname_543  +
jmp loc_451E01  +
lea eax [ebp+var_8] +
mov edx dword_4E60D8 +
call unknown_libname_543  +
jmp loc_451E01  +
lea eax [ebp+var_8] +
mov edx dword_4E60D4 +
call unknown_libname_543  +
jmp loc_451E01  +
lea eax [ebp+var_8] +
add bl 4 +
xor edx edx +
mov dl bl +
mov edx dword_4E604C[edx*4] +
call unknown_libname_543  +
jmp loc_451E01  +
lea eax [ebp+var_8] +
add bl 0Dh +
xor edx edx +
mov dl bl +
mov edx dword_4E6018[edx*4] +
call unknown_libname_543  +
jmp loc_451E01  +
lea eax [ebp+var_8] +
xor edx edx +
mov dl bl +
sub edx 30h +
add edx 30h +
call unknown_libname_544  +
jmp loc_451E01  +
lea eax [ebp+var_8] +
xor edx edx +
mov dl bl +
sub edx 41h +
add edx 41h +
call unknown_libname_544  +
jmp loc_451E01  +
lea eax [ebp+var_8] +
xor edx edx +
mov dl bl +
sub edx 60h +
add edx 30h +
call unknown_libname_544  +
jmp loc_451E01  +
xor eax eax +
mov al bl +
sub eax 6Fh +
lea edx [ebp+var_C] +
call @Sysutils@IntToStr$qqri  +
mov ecx [ebp+var_C] +
lea eax [ebp+var_8] +
mov edx offset _str_F.Text +
call @System@@LStrCat3$qqrv  +
jmp loc_451E01  +
lea edx [ebp+var_8] +
mov ax [ebp+var_2] +
call @Menus@_16425  +
cmp [ebp+var_8] 0 +
jz loc_451E53  +
mov eax esi +
call unknown_libname_540  +
test byte ptr [ebp+var_2+1] 20h +
jz loc_451E21  +
mov eax esi +
mov edx dword_4E6108 +
call @System@@LStrCat$qqrv  +
test byte ptr [ebp+var_2+1] 40h +
jz loc_451E34  +
mov eax esi +
mov edx dword_4E610C +
call @System@@LStrCat$qqrv  +
test byte ptr [ebp+var_2+1] 80h +
jz loc_451E47  +
mov eax esi +
mov edx dword_4E6110 +
call @System@@LStrCat$qqrv  +
mov eax esi +
mov edx [ebp+var_8] +
call @System@@LStrCat$qqrv  +
jmp loc_451E5A  +
mov eax esi +
call unknown_libname_540  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_451E7C  +
lea eax [ebp+var_C] +
mov edx 2 +
call unknown_libname_541  +
retn   +
jmp unknown_libname_539  +
jmp loc_451E67  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
push edi  +
add esp 0FFFFFFF8h +
push ebx  +
push esi  +
push edi  +
xor edx edx +
mov [ebp+var_8] edx +
mov [ebp+var_4] eax +
mov eax [ebp+var_4] +
call unknown_libname_549  +
xor eax eax +
push ebp  +
push offset loc_451FC7  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
xor edi edi +
xor esi esi +
lea eax [ebp+var_4] +
mov edx dword_4E6108 +
call @Menus@_16427  +
test al al +
jz loc_451F30  +
or si 2000h +
jmp loc_451F17  +
lea eax [ebp+var_4] +
mov edx offset _str___0.Text +
call @Menus@_16427  +
test al al +
jz loc_451F48  +
or si 4000h +
jmp loc_451F17  +
lea eax [ebp+var_4] +
mov edx dword_4E610C +
call @Menus@_16427  +
test al al +
jz loc_451F61  +
or si 4000h +
jmp loc_451F17  +
lea eax [ebp+var_4] +
mov edx dword_4E6110 +
call @Menus@_16427  +
test al al +
jz loc_451F7A  +
or si 8000h +
jmp loc_451F17  +
cmp [ebp+var_4] 0 +
jz loc_451FAC  +
mov bx 8 +
lea edx [ebp+var_8] +
mov eax ebx +
call sub_451C8C  +
mov edx [ebp+var_8] +
mov eax [ebp+var_4] +
call unknown_libname_462  +
test eax eax +
jnz loc_451FA4  +
mov edi esi +
or di bx +
jmp loc_451FAC  +
inc ebx  +
cmp bx 256h +
jnz loc_451F84  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_451FCE  +
lea eax [ebp+var_8] +
mov edx 2 +
call unknown_libname_541  +
retn   +
jmp unknown_libname_539  +
jmp loc_451FB9  +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
pop ecx  +
pop ecx  +
pop ebp  +
retn   +
***
call @Classes@TBits@OpenBit$qqrv  +
add esp 0FFFFFFF4h +
add esp 0FFFFFFE8h +
push ebx  +
push esi  +
push edi  +
mov [ebp+var_C] ecx +
mov edi edx +
mov [ebp+var_8] eax +
xor eax eax +
mov [ebp+var_10] eax +
xor eax eax +
mov [ebp+var_14] eax +
xor ebx ebx +
xor esi esi +
test edi edi +
jz loc_452090  +
mov eax edi +
call @Menus@TMenuItem@GetCount$qqrv  +
mov ebx eax +
cmp [ebp+var_C] 0 +
jz loc_4520A0  +
mov eax [ebp+var_C] +
call @Menus@TMenuItem@GetCount$qqrv  +
mov esi eax +
mov [ebp+var_16] 0 +
jmp loc_45214A  +
mov [ebp+var_1] 0FFh +
mov [ebp+var_15] 0FFh +
cmp ebx [ebp+var_10] +
jle loc_4520C6  +
mov edx [ebp+var_10] +
mov eax edi +
call @Menus@TMenuItem@GetItem$qqri  +
mov al [eax+3Fh] +
mov [ebp+var_1] al +
cmp esi [ebp+var_14] +
jle loc_4520DC  +
mov edx [ebp+var_14] +
mov eax [ebp+var_C] +
call @Menus@TMenuItem@GetItem$qqri  +
mov al [eax+3Fh] +
mov [ebp+var_15] al +
mov al [ebp+var_1] +
cmp al [ebp+var_15] +
ja loc_4520F8  +
push ebp  +
lea eax [ebp+var_10] +
mov ecx [ebp+var_8] +
mov edx edi +
call sub_452004  +
pop ecx  +
mov [ebp+var_16] al +
jmp loc_452116  +
mov al [ebp+var_15] +
mov [ebp+var_1] al +
push ebp  +
lea eax [ebp+var_14] +
mov ecx [ebp+var_8] +
mov edx [ebp+var_C] +
call sub_452004  +
pop ecx  +
mov [ebp+var_16] al +
jmp loc_452116  +
inc [ebp+var_10]  +
cmp ebx [ebp+var_10] +
jle loc_452132  +
mov edx [ebp+var_10] +
mov eax edi +
call @Menus@TMenuItem@GetItem$qqri  +
mov al [eax+3Fh] +
cmp al [ebp+var_1] +
jbe loc_452113  +
jmp loc_452132  +
inc [ebp+var_14]  +
cmp esi [ebp+var_14] +
jle loc_45214A  +
mov edx [ebp+var_14] +
mov eax [ebp+var_C] +
call @Menus@TMenuItem@GetItem$qqri  +
mov al [eax+3Fh] +
cmp al [ebp+var_1] +
jbe loc_45212F  +
cmp [ebp+var_16] 0 +
jnz loc_452162  +
cmp ebx [ebp+var_10] +
jg loc_4520A9  +
cmp esi [ebp+var_14] +
jg loc_4520A9  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
mov esi edx +
mov ebx eax +
mov eax esi +
mov edx ds:off_451004 +
call unknown_libname_534  +
mov [ebx+18h] eax +
pop esi  +
pop ebx  +
retn   +
***
mov eax [ebx+10h] +
mov edx ds:off_448424 +
call unknown_libname_534  +
mov al [eax+95h] +
mov edx [ebx+18h] +
cmp al [edx+0A8h] +
setz al  +
pop ebx  +
retn   +
***
mov eax ebx +
call unknown_libname_65  +
test al al +
jz loc_4521DE  +
mov eax [ebx+10h] +
mov edx ds:off_448424 +
call unknown_libname_534  +
mov edx [eax+64h] +
mov eax [ebx+18h] +
mov eax [eax+30h] +
call sub_456F90  +
test al al +
jnz loc_4521E2  +
xor eax eax +
pop ebx  +
retn   +
mov al 1 +
pop ebx  +
retn   +
***
mov eax ebx +
call unknown_libname_66  +
test al al +
jz loc_45220F  +
mov eax [ebx+10h] +
mov edx ds:off_448424 +
call unknown_libname_534  +
mov al [eax+69h] +
mov edx [ebx+18h] +
cmp al [edx+38h] +
jz loc_452213  +
xor eax eax +
pop ebx  +
retn   +
mov al 1 +
pop ebx  +
retn   +
***
mov eax ebx +
call unknown_libname_67  +
test al al +
jz loc_45223F  +
mov eax [ebx+10h] +
mov edx ds:off_448424 +
call unknown_libname_534  +
mov al [eax+6Ah] +
mov edx [ebx+18h] +
cmp al [edx+39h] +
jz loc_452243  +
xor eax eax +
pop ebx  +
retn   +
mov al 1 +
pop ebx  +
retn   +
***
mov eax ebx +
call unknown_libname_69  +
test al al +
jz loc_45226F  +
mov eax [ebx+10h] +
mov edx ds:off_448424 +
call unknown_libname_534  +
mov eax [eax+74h] +
mov edx [ebx+18h] +
cmp eax [edx+54h] +
jz loc_452273  +
xor eax eax +
pop ebx  +
retn   +
mov al 1 +
pop ebx  +
retn   +
***
mov eax ebx +
mov eax [ebx+18h] +
cmp byte ptr [eax+3Dh] 0 +
jz loc_4522DF  +
mov eax ebx +
call unknown_libname_68  +
test al al +
jz loc_4522DF  +
mov eax [ebx+10h] +
mov edx ds:off_448424 +
call unknown_libname_534  +
mov eax [eax+6Ch] +
mov edx [ebx+18h] +
movzx edx byte ptr [edx+3Fh] +
cmp eax edx +
jz loc_4522E3  +
xor eax eax +
pop ebx  +
retn   +
mov al 1 +
pop ebx  +
retn   +
***
mov eax ebx +
call unknown_libname_72  +
test al al +
jz loc_452312  +
mov eax [ebx+10h] +
mov edx ds:off_448424 +
call unknown_libname_534  +
mov eax [eax+80h] +
mov edx [ebx+18h] +
cmp eax [edx+40h] +
jz loc_452316  +
xor eax eax +
pop ebx  +
retn   +
mov al 1 +
pop ebx  +
retn   +
***
mov eax ebx +
mov eax ebx +
call unknown_libname_74  +
test al al +
jz loc_45237A  +
mov eax [ebx+10h] +
mov edx ds:off_448424 +
call unknown_libname_534  +
mov al [eax+86h] +
mov edx [ebx+18h] +
cmp al [edx+3Eh] +
jz loc_45237E  +
xor eax eax +
pop ebx  +
retn   +
mov al 1 +
pop ebx  +
retn   +
***
mov eax ebx +
call sub_4A5430  +
test al al +
jz loc_4523A3  +
mov eax [ebx+18h] +
mov eax [eax+88h] +
mov edx [ebx+10h] +
cmp eax [edx+40h] +
jz loc_4523A7  +
xor eax eax +
pop ebx  +
retn   +
mov al 1 +
pop ebx  +
retn   +
***
mov ebx edx +
mov esi eax +
mov eax esi +
mov edx [eax] +
call dword ptr [edx+78h]  +
test al al +
jz loc_4523C6  +
mov eax [esi+18h] +
mov [eax+0A8h] bl +
pop esi  +
pop ebx  +
retn   +
***
mov esi edx +
mov ebx eax +
mov eax ebx +
mov edx [eax] +
call dword ptr [edx+20h]  +
test al al +
jz loc_4523E7  +
mov edx esi +
mov eax [ebx+18h] +
call @Menus@TMenuItem@SetCaption$qqrx17System@AnsiString  +
pop esi  +
pop ebx  +
retn   +
***
mov ebx edx +
mov esi eax +
mov eax esi +
mov edx [eax] +
call dword ptr [edx+24h]  +
test al al +
jz loc_452407  +
mov edx ebx +
mov eax [esi+18h] +
call @Menus@TMenuItem@SetChecked$qqro  +
pop esi  +
pop ebx  +
retn   +
***
mov ebx edx +
mov esi eax +
mov eax esi +
mov edx [eax] +
call dword ptr [edx+28h]  +
test al al +
jz loc_452427  +
mov edx ebx +
mov eax [esi+18h] +
call @Menus@TMenuItem@SetEnabled$qqro  +
pop esi  +
pop ebx  +
retn   +
***
mov esi edx +
mov ebx eax +
mov eax ebx +
mov edx [eax] +
call dword ptr [edx+30h]  +
test al al +
jz loc_452443  +
mov eax [ebx+18h] +
mov [eax+54h] esi +
pop esi  +
pop ebx  +
retn   +
***
mov esi edx +
mov ebx eax +
mov eax ebx +
mov edx [eax] +
call dword ptr [edx+38h]  +
test al al +
jz loc_452466  +
mov eax [ebx+18h] +
add eax 58h +
mov edx esi +
call unknown_libname_542  +
pop esi  +
pop ebx  +
retn   +
***
mov esi edx +
mov ebx eax +
mov eax ebx +
mov edx [eax] +
call dword ptr [edx+3Ch]  +
test al al +
jz loc_452487  +
mov edx esi +
mov eax [ebx+18h] +
call @Menus@TMenuItem@SetImageIndex$qqri  +
pop esi  +
pop ebx  +
retn   +
***
mov esi edx +
mov ebx eax +
mov eax ebx +
mov edx [eax] +
call dword ptr [edx+40h]  +
test al al +
jz loc_4524A7  +
mov edx esi +
mov eax [ebx+18h] +
call @Menus@TMenuItem@SetShortCut$qqrus  +
pop esi  +
pop ebx  +
retn   +
***
mov ebx edx +
mov esi eax +
mov eax esi +
mov edx [eax] +
call dword ptr [edx+44h]  +
test al al +
jz loc_4524C7  +
mov edx ebx +
mov eax [esi+18h] +
call @Menus@TMenuItem@SetVisible$qqro  +
pop esi  +
pop ebx  +
retn   +
***
push ebx  +
mov ebx eax +
mov eax ebx +
mov edx [eax] +
call dword ptr [edx+8]  +
test al al +
jz loc_4524F2  +
mov eax [ebx+18h] +
mov edx [ebp+arg_0] +
mov [eax+88h] edx +
mov edx [ebp+arg_4] +
mov [eax+8Ch] edx +
pop ebx  +
pop ebp  +
retn 8  +
***
push ecx  +
push ebx  +
push esi  +
test dl dl +
jz loc_45250A  +
add esp 0FFFFFFF0h +
call unknown_libname_535  +
mov [ebp+var_1] dl +
mov ebx eax +
xor edx edx +
mov eax ebx +
call sub_4A4B20  +
mov byte ptr [ebx+3Eh] 1 +
mov byte ptr [ebx+39h] 1 +
mov byte ptr [ebx+3Bh] 2 +
mov byte ptr [ebx+3Ch] 2 +
call @Menus@_16429  +
mov [ebx+50h] ax +
mov dword ptr [ebx+40h] 0FFFFFFFFh +
mov dl 1 +
mov eax ds:off_44674C +
call @System@TObject@$bctr$qqrv  +
mov esi eax +
mov [ebx+78h] esi +
mov [esi+0Ch] ebx +
mov dword ptr [esi+8] offset @Menus@TMenuItem@ImageListChange$qqrp14System@TObject +
mov eax ebx +
cmp [ebp+var_1] 0 +
jz loc_45256A  +
call sub_4BABC8  +
pop large dword ptr fs:0  +
add esp 0Ch +
mov eax ebx +
pop esi  +
pop ebx  +
pop ecx  +
pop ebp  +
retn   +
***
call unknown_libname_536  +
mov ebx edx +
mov esi eax +
mov edx esi +
mov eax dword_4F1734 +
call @Menus@TMenuItemStack@ClearItem$qqrp15Menus@TMenuItem  +
mov eax [esi+64h] +
test eax eax +
jz loc_4525AE  +
mov edx esi +
call @Menus@TMenuItem@Remove$qqrp15Menus@TMenuItem  +
xor eax eax +
mov [esi+64h] eax +
jmp loc_4525AE  +
xor edx edx +
mov eax esi +
call @Menus@TMenuItem@GetItem$qqri  +
call @System@TObject@Free$qqrv  +
mov eax esi +
call @Menus@TMenuItem@GetCount$qqrv  +
test eax eax +
jg loc_4525A0  +
cmp dword ptr [esi+34h] 0 +
jz loc_4525D1  +
xor edx edx +
mov eax esi +
call @Menus@TMenuItem@MergeWith$qqrp15Menus@TMenuItem  +
mov eax [esi+34h] +
push eax  +
call DestroyMenu  +
mov eax [esi+5Ch] +
call @System@TObject@Free$qqrv  +
lea eax [esi+44h] +
call @Sysutils@FreeAndNil$qqrpv  +
lea eax [esi+78h] +
call @Sysutils@FreeAndNil$qqrpv  +
mov ax [esi+50h] +
test ax ax +
jz loc_452601  +
movzx edx ax +
xor ecx ecx +
mov eax dword_4F173C +
call @Classes@TBits@SetBit$qqrio  +
mov eax [esi+4Ch] +
test eax eax +
jz loc_45260D  +
call @System@TObject@Free$qqrv  +
mov edx ebx +
and dl 0FCh +
mov eax esi +
call sub_4A4B6C  +
test bl bl +
jle loc_452624  +
mov eax esi +
call @System@@ClassDestroy$qqrp14System@TObject  +
pop esi  +
pop ebx  +
retn   +
***
add esp 0FFFFFFC0h +
push ebx  +
push esi  +
push edi  +
xor ebx ebx +
mov [ebp+var_40] ebx +
mov [ebp+var_8] ebx +
mov [ebp+var_1] cl +
mov edi edx +
mov ebx eax +
xor eax eax +
push ebp  +
push offset loc_452883  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
cmp byte ptr [ebx+3Eh] 0 +
jz loc_452865  +
lea eax [ebp+var_8] +
mov edx [ebx+30h] +
call unknown_libname_543  +
mov eax ebx +
call @Menus@TMenuItem@GetCount$qqrv  +
test eax eax +
jle loc_45267A  +
mov eax ebx +
call @Menus@TMenuItem@GetHandle$qqrv  +
mov [ebp+var_39.hSubMenu] eax +
jmp loc_4526C4  +
cmp word ptr [ebx+60h] 0 +
jz loc_4526C4  +
mov esi [ebx+64h] +
test esi esi +
jz loc_4526A0  +
cmp dword ptr [esi+64h] 0 +
jnz loc_4526A0  +
mov eax [esi+4] +
mov edx ds:off_45151C +
call @System@@IsClass$qqrp14System@TObjectp17System@TMetaClass  +
test al al +
jnz loc_4526C4  +
push [ebp+var_8]  +
push offset _str___1.Text  +
lea edx [ebp+var_40] +
mov ax [ebx+60h] +
call sub_451C8C  +
push [ebp+var_40]  +
lea eax [ebp+var_8] +
mov edx 3 +
call sub_4BB6D0  +
call GetVersion  +
and eax 0FFh +
cmp ax 4 +
jb loc_4527DE  +
mov [ebp+var_39.cbSize] 2Ch +
mov [ebp+var_39.fMask] 3Fh +
mov eax ebx +
call @Menus@TMenuItem@GetParentMenu$qqrv  +
mov esi eax +
test esi esi +
jz loc_452704  +
cmp byte ptr [esi+40h] 0 +
jnz loc_45271A  +
mov eax ebx +
call @Menus@TMenuItem@GetImageList$qqrv  +
test eax eax +
jnz loc_45271A  +
cmp dword ptr [ebx+4Ch] 0 +
jz loc_452716  +
mov eax [ebx+4Ch] +
mov edx [eax] +
call dword ptr [edx+1Ch]  +
test al al +
jz loc_45271A  +
xor eax eax +
jmp loc_45271C  +
mov al 1 +
mov [ebp+var_9] al +
mov eax [ebx+30h] +
mov edx offset _str___2.Text +
call @System@@LStrCmp$qqrv  +
setz al  +
and eax 7Fh +
mov eax dword_4E6164[eax*4] +
xor edx edx +
mov dl [ebx+3Dh] +
mov edx dword_4E615C[edx*4] +
xor ecx ecx +
mov cl [ebx+48h] +
or edx dword_4E6138[ecx*4] +
or eax edx +
xor edx edx +
mov dl [ebp+var_1] +
or eax dword_4E616C[edx*4] +
xor edx edx +
mov dl [ebp+var_9] +
or eax dword_4E6174[edx*4] +
mov [ebp+var_39.fType] eax +
xor eax eax +
mov al [ebx+38h] +
mov eax dword_4E6144[eax*4] +
xor edx edx +
mov dl [ebx+39h] +
or eax dword_4E6154[edx*4] +
xor edx edx +
mov dl [ebx+3Ah] +
or eax dword_4E614C[edx*4] +
mov [ebp+var_39.fState] eax +
movzx eax word ptr [ebx+50h] +
mov [ebp+var_39.wID] eax +
xor eax eax +
mov [ebp+var_39.hSubMenu] eax +
xor eax eax +
mov [ebp+var_39.hbmpChecked] eax +
xor eax eax +
mov [ebp+var_39.hbmpUnchecked] eax +
mov eax [ebp+var_8] +
call unknown_libname_550  +
mov [ebp+var_39.dwTypeData] eax +
mov eax ebx +
call @Menus@TMenuItem@GetCount$qqrv  +
test eax eax +
jle loc_4527CB  +
mov eax ebx +
call @Menus@TMenuItem@GetHandle$qqrv  +
mov [ebp+var_39.hSubMenu] eax +
lea eax [ebp+var_39] +
push eax  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push edi  +
call InsertMenuItemA  +
jmp loc_452865  +
mov eax [ebx+30h] +
mov edx offset _str___2.Text +
call @System@@LStrCmp$qqrv  +
setz al  +
and eax 7Fh +
mov esi dword_4E6130[eax*4] +
xor eax eax +
mov al [ebx+48h] +
mov eax dword_4E6124[eax*4] +
xor edx edx +
mov dl [ebx+38h] +
or eax dword_4E6114[edx*4] +
xor edx edx +
mov dl [ebx+39h] +
or eax dword_4E611C[edx*4] +
or esi eax +
or esi 400h +
mov eax ebx +
call @Menus@TMenuItem@GetCount$qqrv  +
test eax eax +
jle loc_45284E  +
mov eax [ebx+30h] +
call unknown_libname_550  +
push eax  +
mov eax ebx +
call @Menus@TMenuItem@GetHandle$qqrv  +
push eax  +
or esi 10h +
push esi  +
push 0FFFFFFFFh  +
push edi  +
call InsertMenuA  +
jmp loc_452865  +
mov eax [ebp+var_8] +
call unknown_libname_550  +
push eax  +
movzx eax word ptr [ebx+50h] +
push eax  +
push esi  +
push 0FFFFFFFFh  +
push edi  +
call InsertMenuA  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_45288A  +
lea eax [ebp+var_40] +
call unknown_libname_540  +
lea eax [ebp+var_8] +
call unknown_libname_540  +
retn   +
jmp unknown_libname_539  +
jmp loc_452872  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
mov edx [ebp+arg_0] +
mov cl [edx-5] +
mov edx [ebp+arg_0] +
mov edx [edx-4] +
mov edx [edx+34h] +
call @Menus@TMenuItem@AppendTo$qqruio  +
xor eax eax +
pop ebp  +
retn   +
***
add esp 0FFFFFFF8h +
push ebx  +
mov [ebp+var_4] eax +
mov eax [ebp+var_4] +
mov ebx [eax+70h] +
test ebx ebx +
jz loc_452901  +
mov eax ebx +
mov edx ds:off_45151C +
call @System@@IsClass$qqrp14System@TObjectp17System@TMetaClass  +
test al al +
jz loc_452901  +
xor edx edx +
mov eax [ebp+var_4] +
call @Menus@TMenuItem@InternalRethinkHotkeys$qqro  +
xor edx edx +
mov eax [ebp+var_4] +
call @Menus@TMenuItem@InternalRethinkLines$qqro  +
mov eax [ebp+var_4] +
mov ebx [eax+70h] +
test ebx ebx +
jz loc_452916  +
mov eax ebx +
call @Menus@TMenu@IsRightToLeft$qqrv  +
test al al +
jnz loc_45291A  +
xor eax eax +
jmp loc_45291C  +
mov al 1 +
mov [ebp+var_5] al +
mov eax [ebp+var_4] +
mov edx [eax+68h] +
mov eax offset @Menus@_16469 +
mov ecx [ebp+var_4] +
call sub_452064  +
pop ebx  +
pop ecx  +
pop ecx  +
pop ebp  +
retn   +
***
push 0  +
push ebx  +
push esi  +
mov esi edx +
mov ebx eax +
xor eax eax +
push ebp  +
push offset loc_452982  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
lea edx [ebp+var_4] +
mov eax esi +
call sub_4A1E70  +
mov eax [ebp+var_4] +
call sub_451EEC  +
mov edx eax +
mov eax ebx +
call @Menus@TMenuItem@SetShortCut$qqrus  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_452989  +
lea eax [ebp+var_4] +
call unknown_libname_540  +
retn   +
jmp unknown_libname_539  +
jmp loc_452979  +
pop esi  +
pop ebx  +
pop ecx  +
pop ebp  +
retn   +
***
test edx edx +
jz loc_45299D  +
test byte ptr [edx+1Ch] 8 +
jnz loc_4529C7  +
mov eax [ebx+68h] +
cmp edx eax +
jz loc_4529C7  +
test eax eax +
jz loc_4529AD  +
xor ecx ecx +
mov [eax+6Ch] ecx +
mov eax edx +
mov [ebx+68h] eax +
test eax eax +
jz loc_4529C0  +
mov [eax+6Ch] ebx +
mov edx ebx +
call @Classes@TComponent@FreeNotification$qqrp18Classes@TComponent  +
mov eax ebx +
call @Menus@TMenuItem@RebuildHandle$qqrv  +
pop ebx  +
retn   +
***
mov ebx eax +
push edi  +
push ebp  +
mov ebp eax +
test byte ptr [ebp+1Ch] 8 +
jnz loc_452AD1  +
test byte ptr [ebp+1Ch] 2 +
jz loc_452A27  +
mov byte ptr [ebp+74h] 1 +
jmp loc_452AD1  +
mov eax [ebp+6Ch] +
test eax eax +
jz loc_452A38  +
call @Menus@TMenuItem@RebuildHandle$qqrv  +
jmp loc_452AD1  +
mov eax ebp +
call @Menus@TMenuItem@GetHandle$qqrv  +
push eax  +
call GetMenuItemCount  +
mov esi eax +
test esi esi +
setz bl  +
test esi esi +
jle loc_452A84  +
push 400h  +
mov edi esi +
dec edi  +
push edi  +
mov eax ebp +
call @Menus@TMenuItem@GetHandle$qqrv  +
push eax  +
call GetMenuState  +
test al 4 +
jnz loc_452A7F  +
push 400h  +
push edi  +
mov eax ebp +
call @Menus@TMenuItem@GetHandle$qqrv  +
push eax  +
call RemoveMenu  +
mov bl 1 +
dec esi  +
test esi esi +
jg loc_452A50  +
test bl bl +
jz loc_452AD1  +
cmp dword ptr [ebp+64h] 0 +
jnz loc_452AC1  +
mov eax [ebp+70h] +
mov edx ds:off_45151C +
call @System@@IsClass$qqrp14System@TObjectp17System@TMetaClass  +
test al al +
jz loc_452AC1  +
mov eax ebp +
call @Menus@TMenuItem@GetHandle$qqrv  +
push eax  +
call GetMenuItemCount  +
test eax eax +
jnz loc_452AC1  +
mov eax [ebp+34h] +
push eax  +
call DestroyMenu  +
xor eax eax +
mov [ebp+34h] eax +
jmp loc_452AC8  +
mov eax ebp +
call @Menus@TMenuItem@PopulateMenu$qqrv  +
xor edx edx +
mov eax ebp +
mov ecx [eax] +
call dword ptr [ecx+3Ch]  +
pop ebp  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
cmp dword ptr [ebx+34h] 0 +
jnz loc_452B7C  +
mov eax [ebx+4] +
mov edx ds:off_451800 +
call @System@@IsClass$qqrp14System@TObjectp17System@TMetaClass  +
test al al +
jz loc_452B5D  +
call CreatePopupMenu  +
mov [ebx+34h] eax +
jmp loc_452B65  +
call CreateMenu  +
mov [ebx+34h] eax +
cmp dword ptr [ebx+34h] 0 +
jnz loc_452B75  +
mov eax off_4EA6EC +
call @Menus@_16419  +
mov eax ebx +
call @Menus@TMenuItem@PopulateMenu$qqrv  +
mov eax [ebx+34h] +
pop ebx  +
retn   +
***
mov esi edx +
mov ebx eax +
mov edx esi +
mov eax ebx +
call @Classes@TComponent@DefineProperties$qqrp14Classes@TFiler  +
push ebx  +
push offset sub_452938  +
push 0  +
push 0  +
xor ecx ecx +
mov edx offset _str_ShortCutText.Text +
mov eax esi +
mov ebx [eax] +
call dword ptr [ebx+4]  +
pop esi  +
pop ebx  +
retn   +
***
add esp 0FFFFFFE4h +
push ebx  +
push esi  +
push edi  +
xor ebx ebx +
mov [ebp+var_C] ebx +
mov [ebp+var_8] ecx +
mov [ebp+var_4] edx +
mov esi eax +
mov ebx [ebp+arg_0] +
xor eax eax +
push ebp  +
push offset loc_452DAC  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov eax esi +
call @Menus@TMenuItem@GetParentMenu$qqrv  +
mov edi eax +
test edi edi +
jz loc_452C2A  +
mov eax edi +
call @Menus@TMenu@IsRightToLeft$qqrv  +
test al al +
jz loc_452C2A  +
test bl 0 +
jnz loc_452C14  +
and ebx 0FFFFFFFFh +
or ebx 2 +
jmp loc_452C24  +
mov eax ebx +
and eax 2 +
cmp eax 2 +
jnz loc_452C24  +
and ebx 0FFFFFFFDh +
or ebx 0 +
or ebx 20000h +
lea eax [ebp+var_C] +
mov edx [ebp+var_8] +
call unknown_libname_543  +
test bh 4 +
jz loc_452C5E  +
cmp [ebp+var_C] 0 +
jz loc_452C51  +
mov eax [ebp+var_C] +
cmp byte ptr [eax] 26h +
jnz loc_452C5E  +
mov eax [ebp+var_C] +
cmp byte ptr [eax+1] 0 +
jnz loc_452C5E  +
lea eax [ebp+var_C] +
mov edx offset _str___3.Text +
call @System@@LStrCat$qqrv  +
mov eax [ebp+var_C] +
mov edx offset _str___4.Text +
call @System@@LStrCmp$qqrv  +
jnz loc_452CA1  +
test bh 4 +
jnz loc_452D96  +
mov eax [ebp+lpRect] +
mov esi eax +
lea edi [ebp+qrc] +
movs   +
movs   +
movs   +
movs   +
add [ebp+qrc.top] 4 +
push 2  +
push 6  +
lea eax [ebp+qrc] +
push eax  +
mov eax [ebp+var_4] +
call @Graphics@TCanvas@GetHandle$qqrv  +
push eax  +
call DrawEdge  +
jmp loc_452D96  +
mov eax [ebp+var_4] +
mov eax [eax+14h] +
mov dl 1 +
call @Graphics@TBrush@SetStyle$qqr20Graphics@TBrushStyle  +
cmp byte ptr [esi+3Ah] 0 +
jz loc_452CD0  +
mov eax [ebp+var_4] +
mov edi [eax+0Ch] +
mov eax edi +
call @Graphics@TFont@GetStyle$qqrv  +
mov edx eax +
or dl ds:byte_452DD4 +
mov eax edi +
call @Graphics@TFont@SetStyle$qqr47System@_Set$t19Graphics@TFontStyle$iuc$0$iuc$3_  +
cmp byte ptr [esi+39h] 0 +
jnz loc_452D71  +
cmp [ebp+arg_4] 0 +
jnz loc_452D2F  +
push 1  +
push 1  +
mov eax [ebp+lpRect] +
push eax  +
call OffsetRect  +
mov eax [ebp+var_4] +
mov eax [eax+0Ch] +
mov edx 80000014h +
call @Graphics@TFont@SetColor$qqr15Graphics@TColor  +
push ebx  +
mov eax [ebp+lpRect] +
push eax  +
mov eax [ebp+var_C] +
call sub_4BB610  +
push eax  +
mov eax [ebp+var_C] +
call unknown_libname_550  +
push eax  +
mov eax [ebp+var_4] +
call @Graphics@TCanvas@GetHandle$qqrv  +
push eax  +
call DrawTextA  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
mov eax [ebp+lpRect] +
push eax  +
call OffsetRect  +
cmp [ebp+arg_4] 0 +
jz loc_452D61  +
mov eax 8000000Dh +
call @Graphics@ColorToRGB$qqr15Graphics@TColor  +
mov esi eax +
mov eax 80000010h +
call @Graphics@ColorToRGB$qqr15Graphics@TColor  +
cmp esi eax +
jnz loc_452D61  +
mov eax [ebp+var_4] +
mov eax [eax+0Ch] +
mov edx 80000014h +
call @Graphics@TFont@SetColor$qqr15Graphics@TColor  +
jmp loc_452D71  +
mov eax [ebp+var_4] +
mov eax [eax+0Ch] +
mov edx 80000010h +
call @Graphics@TFont@SetColor$qqr15Graphics@TColor  +
push ebx  +
mov eax [ebp+lpRect] +
push eax  +
mov eax [ebp+var_C] +
call sub_4BB610  +
push eax  +
mov eax [ebp+var_C] +
call unknown_libname_550  +
push eax  +
mov eax [ebp+var_4] +
call @Graphics@TCanvas@GetHandle$qqrv  +
push eax  +
call DrawTextA  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_452DB3  +
lea eax [ebp+var_C] +
call unknown_libname_540  +
retn   +
jmp unknown_libname_539  +
jmp loc_452DA3  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 0Ch  +
***
add esp 0FFFFFFF0h +
push ebx  +
push esi  +
push edi  +
mov esi ecx +
lea edi [ebp+var_10] +
movs   +
movs   +
movs   +
movs   +
cmp word ptr [eax+92h] 0 +
jz loc_452E0E  +
lea ecx [ebp+var_10] +
push ecx  +
mov cl [ebp+arg_0] +
push ecx  +
mov ebx eax +
mov ecx edx +
mov edx eax +
mov eax [ebx+94h] +
call dword ptr [ebx+90h]  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 4  +
***
push 0  +
push ebx  +
push esi  +
push edi  +
xor eax eax +
push ebp  +
push offset loc_453670  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov eax [ebp+arg_0] +
cmp byte ptr [eax-21h] 0 +
jnz loc_452E48  +
mov eax [ebp+arg_0] +
lea edx [eax-20h] +
mov eax [ebp+arg_0] +
mov eax [eax-28h] +
call @Graphics@TCanvas@FillRect$qqrrx11Types@TRect  +
mov eax [ebp+arg_0] +
cmp dword ptr [eax-2Ch] 0 +
jz loc_452E5A  +
mov eax [ebp+arg_0] +
mov byte ptr [eax-2Dh] 0 +
jmp loc_452E87  +
mov eax [ebp+arg_0] +
mov eax [eax-2Ch] +
mov edx ds:off_451800 +
call @System@@IsClass$qqrp14System@TObjectp17System@TMetaClass  +
test al al +
jz loc_452E80  +
mov eax [ebp+arg_0] +
mov eax [eax-2Ch] +
mov al [eax+60h] +
mov edx [ebp+arg_0] +
mov [edx-2Dh] al +
jmp loc_452E87  +
mov eax [ebp+arg_0] +
mov byte ptr [eax-2Dh] 0 +
mov eax [ebp+arg_0] +
mov eax [eax-20h] +
inc eax  +
mov edx [ebp+arg_0] +
mov [edx-10h] eax +
mov eax [ebp+arg_0] +
mov eax [eax-1Ch] +
inc eax  +
mov edx [ebp+arg_0] +
mov [edx-0Ch] eax +
mov eax [ebp+arg_0] +
mov eax [eax-34h] +
mov eax [eax+30h] +
mov edx offset _str___5.Text +
call @System@@LStrCmp$qqrv  +
jnz loc_452EE5  +
mov eax [ebp+arg_0] +
lea edx [eax-20h] +
mov eax [ebp+arg_0] +
mov eax [eax-28h] +
call @Graphics@TCanvas@FillRect$qqrrx11Types@TRect  +
mov eax [ebp+arg_0] +
xor edx edx +
mov [eax-10h] edx +
mov eax [ebp+arg_0] +
mov dword ptr [eax-8] 0FFFFFFFCh +
mov eax [ebp+arg_0] +
mov byte ptr [eax-35h] 0 +
jmp loc_453372  +
mov eax [ebp+arg_0] +
cmp dword ptr [eax-3Ch] 0 +
jz loc_452F35  +
mov eax [ebp+arg_0] +
mov eax [eax-34h] +
mov ebx [eax+40h] +
cmp ebx 0FFFFFFFFh +
jle loc_452F0E  +
mov eax [ebp+arg_0] +
mov eax [ebp+arg_0] +
mov eax [eax-3Ch] +
call @Imglist@TCustomImageList@GetCount$qqrv  +
cmp ebx eax +
jl loc_452F39  +
mov eax [ebp+arg_0] +
mov eax [eax-34h] +
cmp byte ptr [eax+38h] 0 +
jz loc_452F35  +
mov eax [ebp+arg_0] +
mov eax [eax-34h] +
mov esi [eax+4Ch] +
test esi esi +
jz loc_452F39  +
mov eax [ebp+arg_0] +
mov eax esi +
mov edx [eax] +
call dword ptr [edx+1Ch]  +
test al al +
jnz loc_452F39  +
xor eax eax +
jmp loc_452F3B  +
mov al 1 +
mov edx [ebp+arg_0] +
mov [edx-3Dh] al +
mov eax [ebp+arg_0] +
cmp byte ptr [eax-3Dh] 0 +
jnz loc_452F6D  +
mov eax [ebp+arg_0] +
mov eax [eax-34h] +
mov ebx [eax+4Ch] +
test ebx ebx +
jz loc_453315  +
mov eax [ebp+arg_0] +
mov eax ebx +
mov edx [eax] +
call dword ptr [edx+1Ch]  +
test al al +
jnz loc_453315  +
mov eax [ebp+arg_0] +
mov byte ptr [eax-35h] 1 +
mov eax [ebp+arg_0] +
cmp byte ptr [eax-3Dh] 0 +
jz loc_452FA9  +
mov eax [ebp+arg_0] +
mov eax [eax-10h] +
mov edx [ebp+arg_0] +
mov edx [edx-3Ch] +
add eax [edx+34h] +
mov edx [ebp+arg_0] +
mov [edx-8] eax +
mov eax [ebp+arg_0] +
mov eax [eax-0Ch] +
mov edx [ebp+arg_0] +
mov edx [edx-3Ch] +
add eax [edx+30h] +
mov edx [ebp+arg_0] +
mov [edx-4] eax +
jmp loc_452FC7  +
mov eax [ebp+arg_0] +
mov eax [eax-10h] +
add eax 10h +
mov edx [ebp+arg_0] +
mov [edx-8] eax +
mov eax [ebp+arg_0] +
mov eax [eax-0Ch] +
add eax 10h +
mov edx [ebp+arg_0] +
mov [edx-4] eax +
mov eax [ebp+arg_0] +
mov eax [eax-34h] +
cmp byte ptr [eax+38h] 0 +
jz loc_45308A  +
mov eax [ebp+arg_0] +
inc dword ptr [eax-8]  +
mov eax [ebp+arg_0] +
inc dword ptr [eax-4]  +
mov eax [ebp+arg_0] +
mov eax [eax-28h] +
mov eax [eax+14h] +
call sub_45AF0C  +
mov edx [ebp+arg_0] +
mov [edx-44h] eax +
mov eax [ebp+arg_0] +
test byte ptr [eax+0Ch] 1 +
jnz loc_453046  +
mov eax [ebp+arg_0] +
mov eax [eax-28h] +
mov eax [eax+14h] +
call sub_45AF0C  +
mov edx [ebp+arg_0] +
mov [edx-44h] eax +
mov edx 80000014h +
mov eax 8000000Fh +
call @Graphics@AllocPatternBitmap$qqr15Graphics@TColort1  +
mov edx eax +
mov eax [ebp+arg_0] +
mov eax [eax-28h] +
mov eax [eax+14h] +
call @Graphics@TBrush@SetBitmap$qqrp16Graphics@TBitmap  +
mov eax [ebp+arg_0] +
lea edx [eax-10h] +
mov eax [ebp+arg_0] +
mov eax [eax-28h] +
call @Graphics@TCanvas@FillRect$qqrrx11Types@TRect  +
jmp loc_45306A  +
mov eax [ebp+arg_0] +
mov eax [eax-28h] +
mov eax [eax+14h] +
mov edx 8000000Fh +
call @Graphics@TBrush@SetColor$qqr15Graphics@TColor  +
mov eax [ebp+arg_0] +
lea edx [eax-10h] +
mov eax [ebp+arg_0] +
mov eax [eax-28h] +
call @Graphics@TCanvas@FillRect$qqrrx11Types@TRect  +
mov eax [ebp+arg_0] +
mov edx [eax-44h] +
mov eax [ebp+arg_0] +
mov eax [eax-28h] +
mov eax [eax+14h] +
call @Graphics@TBrush@SetColor$qqr15Graphics@TColor  +
mov eax [ebp+arg_0] +
inc dword ptr [eax-10h]  +
mov eax [ebp+arg_0] +
inc dword ptr [eax-0Ch]  +
mov eax [ebp+arg_0] +
cmp byte ptr [eax-3Dh] 0 +
jz loc_4531F1  +
mov eax [ebp+arg_0] +
mov eax [eax-34h] +
mov ebx [eax+40h] +
cmp ebx 0FFFFFFFFh +
jle loc_4530EE  +
mov eax [ebp+arg_0] +
mov eax [ebp+arg_0] +
mov eax [eax-3Ch] +
call @Imglist@TCustomImageList@GetCount$qqrv  +
cmp ebx eax +
jge loc_4530EE  +
mov eax [ebp+arg_0] +
mov eax [eax-0Ch] +
push eax  +
mov eax [ebp+arg_0] +
mov eax [eax-34h] +
mov eax [eax+40h] +
push eax  +
mov eax [ebp+arg_0] +
mov eax [eax-34h] +
mov al [eax+39h] +
push eax  +
mov eax [ebp+arg_0] +
mov ecx [eax-10h] +
mov eax [ebp+arg_0] +
mov edx [eax-28h] +
mov eax [ebp+arg_0] +
mov eax [eax-3Ch] +
call @Imglist@TCustomImageList@Draw$qqrp16Graphics@TCanvasiiio  +
jmp loc_4532FB  +
mov dl 1 +
mov eax ds:off_45979C +
call @Graphics@TBitmap@$bctr$qqrv  +
mov edx [ebp+arg_0] +
mov [edx-48h] eax +
xor eax eax +
push ebp  +
push offset loc_4531EA  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov eax [ebp+arg_0] +
mov eax [eax-48h] +
mov dl 1 +
mov ecx [eax] +
call dword ptr [ecx+3Ch]  +
push 7FF8h  +
push 0  +
call LoadBitmapA  +
mov edx eax +
mov eax [ebp+arg_0] +
mov eax [eax-48h] +
call @Graphics@TBitmap@SetHandle$qqrui  +
mov eax [ebp+arg_0] +
mov eax [eax-28h] +
mov eax [eax+0Ch] +
mov eax [eax+18h] +
mov edx [ebp+arg_0] +
mov [edx-44h] eax +
mov eax [ebp+arg_0] +
mov eax [eax-28h] +
mov eax [eax+0Ch] +
mov edx 80000012h +
call @Graphics@TFont@SetColor$qqr15Graphics@TColor  +
mov eax [ebp+arg_0] +
mov eax [eax-48h] +
push eax  +
mov eax [ebp+arg_0] +
mov eax [eax-48h] +
mov edx [eax] +
call dword ptr [edx+20h]  +
mov edx [ebp+arg_0] +
mov edx [edx-4] +
mov ecx [ebp+arg_0] +
mov esi [ecx-0Ch] +
sub edx esi +
sub edx eax +
sar edx 1 +
jns loc_453182  +
adc edx 0 +
mov eax [ebp+arg_0] +
add edx esi +
inc edx  +
push edx  +
mov eax [ebp+arg_0] +
mov eax [eax-48h] +
mov edx [eax] +
call dword ptr [edx+2Ch]  +
mov edx [ebp+arg_0] +
mov edx [edx-8] +
mov ecx [ebp+arg_0] +
mov ebx [ecx-10h] +
sub edx ebx +
sub edx eax +
sar edx 1 +
jns loc_4531AB  +
adc edx 0 +
mov eax [ebp+arg_0] +
add edx ebx +
inc edx  +
mov eax [ebp+arg_0] +
mov eax [eax-28h] +
pop ecx  +
call sub_45B20C  +
mov eax [ebp+arg_0] +
mov edx [eax-44h] +
mov eax [ebp+arg_0] +
mov eax [eax-28h] +
mov eax [eax+0Ch] +
call @Graphics@TFont@SetColor$qqr15Graphics@TColor  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4532FB  +
mov eax [ebp+arg_0] +
mov eax [eax-48h] +
call @System@TObject@Free$qqrv  +
retn   +
jmp unknown_libname_539  +
jmp loc_4531DE  +
mov eax [ebp+arg_0] +
mov edx [ebp+arg_0] +
lea esi [eax-10h] +
lea edi [edx-58h] +
movs   +
movs   +
movs   +
movs   +
mov eax [ebp+arg_0] +
mov eax [eax-34h] +
mov eax [eax+4Ch] +
mov edx [eax] +
call dword ptr [edx+2Ch]  +
mov edx [ebp+arg_0] +
mov edx [edx-8] +
mov ecx [ebp+arg_0] +
sub edx [ecx-10h] +
cmp eax edx +
jge loc_453269  +
mov eax [ebp+arg_0] +
mov eax [eax-34h] +
mov eax [eax+4Ch] +
mov edx [eax] +
call dword ptr [edx+2Ch]  +
mov edx [ebp+arg_0] +
mov edx [edx-8] +
mov ecx [ebp+arg_0] +
sub edx [ecx-10h] +
sub edx eax +
sar edx 1 +
jns loc_453242  +
adc edx 0 +
mov eax [ebp+arg_0] +
add edx [eax-10h] +
inc edx  +
mov eax [ebp+arg_0] +
mov [eax-10h] edx +
mov eax [ebp+arg_0] +
mov eax [eax-34h] +
mov eax [eax+4Ch] +
mov edx [eax] +
call dword ptr [edx+2Ch]  +
mov edx [ebp+arg_0] +
add eax [edx-10h] +
mov edx [ebp+arg_0] +
mov [edx-8] eax +
mov eax [ebp+arg_0] +
mov eax [eax-34h] +
mov eax [eax+4Ch] +
mov edx [eax] +
call dword ptr [edx+20h]  +
mov edx [ebp+arg_0] +
mov edx [edx-4] +
mov ecx [ebp+arg_0] +
sub edx [ecx-0Ch] +
cmp eax edx +
jge loc_4532D1  +
mov eax [ebp+arg_0] +
mov eax [eax-34h] +
mov eax [eax+4Ch] +
mov edx [eax] +
call dword ptr [edx+20h]  +
mov edx [ebp+arg_0] +
mov edx [edx-4] +
mov ecx [ebp+arg_0] +
sub edx [ecx-0Ch] +
sub edx eax +
sar edx 1 +
jns loc_4532AA  +
adc edx 0 +
mov eax [ebp+arg_0] +
add edx [eax-0Ch] +
inc edx  +
mov eax [ebp+arg_0] +
mov [eax-0Ch] edx +
mov eax [ebp+arg_0] +
mov eax [eax-34h] +
mov eax [eax+4Ch] +
mov edx [eax] +
call dword ptr [edx+20h]  +
mov edx [ebp+arg_0] +
add eax [edx-0Ch] +
mov edx [ebp+arg_0] +
mov [edx-4] eax +
mov eax [ebp+arg_0] +
mov eax [eax-34h] +
mov ecx [eax+4Ch] +
mov eax [ebp+arg_0] +
lea edx [eax-10h] +
mov eax [ebp+arg_0] +
mov eax [eax-28h] +
call unknown_libname_154  +
mov eax [ebp+arg_0] +
mov edx [ebp+arg_0] +
lea esi [eax-58h] +
lea edi [edx-10h] +
movs   +
movs   +
movs   +
movs   +
mov eax [ebp+arg_0] +
mov eax [eax-34h] +
cmp byte ptr [eax+38h] 0 +
jz loc_453372  +
mov eax [ebp+arg_0] +
dec dword ptr [eax-8]  +
mov eax [ebp+arg_0] +
dec dword ptr [eax-4]  +
jmp loc_453372  +
mov eax [ebp+arg_0] +
cmp dword ptr [eax-3Ch] 0 +
jz loc_453353  +
mov eax [ebp+arg_0] +
cmp byte ptr [eax+8] 0 +
jnz loc_453353  +
mov eax [ebp+arg_0] +
mov eax [eax-10h] +
mov edx [ebp+arg_0] +
mov edx [edx-3Ch] +
add eax [edx+34h] +
mov edx [ebp+arg_0] +
mov [edx-8] eax +
mov eax [ebp+arg_0] +
mov eax [eax-0Ch] +
mov edx [ebp+arg_0] +
mov edx [edx-3Ch] +
add eax [edx+30h] +
mov edx [ebp+arg_0] +
mov [edx-4] eax +
jmp loc_45336B  +
mov eax [ebp+arg_0] +
mov eax [eax-10h] +
mov edx [ebp+arg_0] +
mov [edx-8] eax +
mov eax [ebp+arg_0] +
mov eax [eax-0Ch] +
mov edx [ebp+arg_0] +
mov [edx-4] eax +
mov eax [ebp+arg_0] +
mov byte ptr [eax-35h] 0 +
mov eax [ebp+arg_0] +
dec dword ptr [eax-10h]  +
mov eax [ebp+arg_0] +
dec dword ptr [eax-0Ch]  +
mov eax [ebp+arg_0] +
add dword ptr [eax-8] 2 +
mov eax [ebp+arg_0] +
add dword ptr [eax-4] 2 +
mov eax [ebp+arg_0] +
mov eax [eax-34h] +
cmp byte ptr [eax+38h] 0 +
jnz loc_4533AA  +
mov eax [ebp+arg_0] +
cmp byte ptr [eax-21h] 0 +
jz loc_4533D6  +
mov eax [ebp+arg_0] +
cmp byte ptr [eax-35h] 0 +
jz loc_4533D6  +
push 0Fh  +
mov eax [ebp+arg_0] +
mov eax [eax-34h] +
movzx eax byte ptr [eax+38h] +
mov eax edge[eax*4] +
push eax  +
mov eax [ebp+arg_0] +
add eax 0FFFFFFF0h +
push eax  +
mov eax [ebp+arg_0] +
mov eax [eax-28h] +
call @Graphics@TCanvas@GetHandle$qqrv  +
push eax  +
call DrawEdge  +
mov eax [ebp+arg_0] +
cmp byte ptr [eax-21h] 0 +
jz loc_45342B  +
mov eax [ebp+arg_0] +
cmp byte ptr [eax-35h] 0 +
jz loc_4533F5  +
mov eax [ebp+arg_0] +
mov eax [eax-8] +
inc eax  +
mov edx [ebp+arg_0] +
mov [edx-20h] eax +
mov eax [ebp+arg_0] +
cmp byte ptr [eax-59h] 0 +
jz loc_453407  +
mov eax [ebp+arg_0] +
cmp byte ptr [eax+8] 0 +
jnz loc_45341A  +
mov eax [ebp+arg_0] +
mov eax [eax-28h] +
mov eax [eax+14h] +
mov edx 8000000Dh +
call @Graphics@TBrush@SetColor$qqr15Graphics@TColor  +
mov eax [ebp+arg_0] +
lea edx [eax-20h] +
mov eax [ebp+arg_0] +
mov eax [eax-28h] +
call @Graphics@TCanvas@FillRect$qqrrx11Types@TRect  +
mov eax [ebp+arg_0] +
cmp byte ptr [eax+8] 0 +
jz loc_4534A2  +
mov eax [ebp+arg_0] +
cmp byte ptr [eax-59h] 0 +
jz loc_4534A2  +
mov eax [ebp+arg_0] +
cmp byte ptr [eax-21h] 0 +
jz loc_453464  +
push 0Fh  +
push 2  +
mov eax [ebp+arg_0] +
add eax 0FFFFFFE0h +
push eax  +
mov eax [ebp+arg_0] +
mov eax [eax-28h] +
call @Graphics@TCanvas@GetHandle$qqrv  +
push eax  +
call DrawEdge  +
jmp loc_453489  +
mov eax [ebp+arg_0] +
test byte ptr [eax+0Ch] 40h +
jz loc_453489  +
push 0Fh  +
push 4  +
mov eax [ebp+arg_0] +
add eax 0FFFFFFE0h +
push eax  +
mov eax [ebp+arg_0] +
mov eax [eax-28h] +
call @Graphics@TCanvas@GetHandle$qqrv  +
push eax  +
call DrawEdge  +
mov eax [ebp+arg_0] +
cmp byte ptr [eax-21h] 0 +
jnz loc_4534A2  +
push 0FFFFFFFFh  +
push 0  +
mov eax [ebp+arg_0] +
add eax 0FFFFFFE0h +
push eax  +
call OffsetRect  +
mov eax [ebp+arg_0] +
cmp byte ptr [eax-21h] 0 +
jz loc_4534B4  +
mov eax [ebp+arg_0] +
cmp byte ptr [eax-35h] 0 +
jnz loc_4534C1  +
mov eax [ebp+arg_0] +
mov eax [eax-8] +
inc eax  +
mov edx [ebp+arg_0] +
mov [edx-20h] eax +
mov eax [ebp+arg_0] +
add dword ptr [eax-20h] 2 +
mov eax [ebp+arg_0] +
dec dword ptr [eax-18h]  +
mov eax [ebp+arg_0] +
movzx eax byte ptr [eax-2Dh] +
mov ax word_4E617C[eax*2] +
or ax 60h +
movzx eax ax +
mov edx [ebp+arg_0] +
mov [edx-60h] eax +
mov eax [ebp+arg_0] +
cmp byte ptr [eax-61h] 0 +
jz loc_453506  +
mov eax [ebp+arg_0] +
test byte ptr [eax+0Dh] 1 +
jz loc_453506  +
mov eax [ebp+arg_0] +
or dword ptr [eax-60h] 100000h +
mov eax [ebp+arg_0] +
mov edx [ebp+arg_0] +
lea esi [eax-20h] +
lea edi [edx-58h] +
movs   +
movs   +
movs   +
movs   +
mov eax [ebp+arg_0] +
test byte ptr [eax+0Ch] 20h +
jz loc_453533  +
mov eax [ebp+arg_0] +
mov eax [eax-28h] +
mov eax [eax+0Ch] +
mov dl ds:byte_45368C +
call @Graphics@TFont@SetStyle$qqr47System@_Set$t19Graphics@TFontStyle$iuc$0$iuc$3_  +
mov eax [ebp+arg_0] +
add eax 0FFFFFFE0h +
push eax  +
mov eax [ebp+arg_0] +
mov al [eax-21h] +
push eax  +
mov eax [ebp+arg_0] +
mov eax [eax-60h] +
or eax 400h +
or eax 100h +
push eax  +
mov eax [ebp+arg_0] +
mov eax [eax-34h] +
mov ecx [eax+30h] +
mov eax [ebp+arg_0] +
mov edx [eax-28h] +
mov eax [ebp+arg_0] +
mov eax [eax-34h] +
call @Menus@TMenuItem@DoDrawText$qqrp16Graphics@TCanvasx17System@AnsiStringr11Types@TRectoi  +
mov eax [ebp+arg_0] +
mov eax [eax-4Ch] +
mov edx [ebp+arg_0] +
sub eax [edx-54h] +
mov edx [ebp+arg_0] +
mov edx [edx-14h] +
mov ecx [ebp+arg_0] +
sub edx [ecx-1Ch] +
sub eax edx +
sar eax 1 +
jns loc_45358D  +
adc eax 0 +
push eax  +
push 0  +
mov eax [ebp+arg_0] +
add eax 0FFFFFFE0h +
push eax  +
call OffsetRect  +
mov eax [ebp+arg_0] +
cmp byte ptr [eax+8] 0 +
jz loc_4535C7  +
mov eax [ebp+arg_0] +
cmp byte ptr [eax-21h] 0 +
jz loc_4535C7  +
mov eax [ebp+arg_0] +
cmp byte ptr [eax-59h] 0 +
jz loc_4535C7  +
push 0  +
push 1  +
mov eax [ebp+arg_0] +
add eax 0FFFFFFE0h +
push eax  +
call OffsetRect  +
mov eax [ebp+arg_0] +
add eax 0FFFFFFE0h +
push eax  +
mov eax [ebp+arg_0] +
mov al [eax-21h] +
push eax  +
mov eax [ebp+arg_0] +
mov eax [eax-60h] +
push eax  +
mov eax [ebp+arg_0] +
mov eax [eax-34h] +
mov ecx [eax+30h] +
mov eax [ebp+arg_0] +
mov edx [eax-28h] +
mov eax [ebp+arg_0] +
mov eax [eax-34h] +
call @Menus@TMenuItem@DoDrawText$qqrp16Graphics@TCanvasx17System@AnsiStringr11Types@TRectoi  +
mov eax [ebp+arg_0] +
mov eax [eax-34h] +
mov bx [eax+60h] +
test bx bx +
jz loc_45365A  +
mov eax [ebp+arg_0] +
cmp byte ptr [eax+8] 0 +
jnz loc_45365A  +
mov eax [ebp+arg_0] +
mov eax [eax-18h] +
mov edx [ebp+arg_0] +
mov [edx-20h] eax +
mov eax [ebp+arg_0] +
mov eax [eax-50h] +
sub eax 0Ah +
mov edx [ebp+arg_0] +
mov [edx-18h] eax +
mov eax [ebp+arg_0] +
add eax 0FFFFFFE0h +
push eax  +
mov eax [ebp+arg_0] +
mov al [eax-21h] +
push eax  +
push 2  +
lea edx [ebp+var_4] +
mov eax [ebp+arg_0] +
mov eax ebx +
call sub_451C8C  +
mov ecx [ebp+var_4] +
mov eax [ebp+arg_0] +
mov edx [eax-28h] +
mov eax [ebp+arg_0] +
mov eax [eax-34h] +
call @Menus@TMenuItem@DoDrawText$qqrp16Graphics@TCanvasx17System@AnsiStringr11Types@TRectoi  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_453677  +
lea eax [ebp+var_4] +
call unknown_libname_540  +
retn   +
jmp unknown_libname_539  +
jmp loc_453667  +
pop edi  +
pop esi  +
pop ebx  +
pop ecx  +
pop ebp  +
retn   +
***
push 0  +
push ebx  +
push esi  +
push edi  +
xor eax eax +
push ebp  +
push offset loc_453F12  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov eax [ebp+arg_0] +
cmp byte ptr [eax-21h] 0 +
jnz loc_4536C0  +
mov eax [ebp+arg_0] +
lea edx [eax-20h] +
mov eax [ebp+arg_0] +
mov eax [eax-28h] +
call @Graphics@TCanvas@FillRect$qqrrx11Types@TRect  +
mov eax [ebp+arg_0] +
cmp dword ptr [eax-2Ch] 0 +
jz loc_4536D2  +
mov eax [ebp+arg_0] +
mov byte ptr [eax-2Dh] 0 +
jmp loc_4536FF  +
mov eax [ebp+arg_0] +
mov eax [eax-2Ch] +
mov edx ds:off_451800 +
call @System@@IsClass$qqrp14System@TObjectp17System@TMetaClass  +
test al al +
jz loc_4536F8  +
mov eax [ebp+arg_0] +
mov eax [eax-2Ch] +
mov al [eax+60h] +
mov edx [ebp+arg_0] +
mov [edx-2Dh] al +
jmp loc_4536FF  +
mov eax [ebp+arg_0] +
mov byte ptr [eax-2Dh] 0 +
mov eax [ebp+arg_0] +
mov eax [eax-18h] +
dec eax  +
mov edx [ebp+arg_0] +
mov [edx-8] eax +
mov eax [ebp+arg_0] +
mov eax [eax-1Ch] +
inc eax  +
mov edx [ebp+arg_0] +
mov [edx-0Ch] eax +
mov eax [ebp+arg_0] +
mov eax [eax-34h] +
mov eax [eax+30h] +
mov edx offset _str___6.Text +
call @System@@LStrCmp$qqrv  +
jnz loc_453762  +
mov eax [ebp+arg_0] +
lea edx [eax-20h] +
mov eax [ebp+arg_0] +
mov eax [eax-28h] +
call @Graphics@TCanvas@FillRect$qqrrx11Types@TRect  +
mov eax [ebp+arg_0] +
mov eax [eax-8] +
add eax 2 +
mov edx [ebp+arg_0] +
mov [edx-10h] eax +
mov eax [ebp+arg_0] +
xor edx edx +
mov [eax-8] edx +
mov eax [ebp+arg_0] +
mov byte ptr [eax-35h] 0 +
jmp loc_453BF3  +
mov eax [ebp+arg_0] +
cmp dword ptr [eax-3Ch] 0 +
jz loc_4537B2  +
mov eax [ebp+arg_0] +
mov eax [eax-34h] +
mov ebx [eax+40h] +
cmp ebx 0FFFFFFFFh +
jle loc_45378B  +
mov eax [ebp+arg_0] +
mov eax [ebp+arg_0] +
mov eax [eax-3Ch] +
call @Imglist@TCustomImageList@GetCount$qqrv  +
cmp ebx eax +
jl loc_4537B6  +
mov eax [ebp+arg_0] +
mov eax [eax-34h] +
cmp byte ptr [eax+38h] 0 +
jz loc_4537B2  +
mov eax [ebp+arg_0] +
mov eax [eax-34h] +
mov esi [eax+4Ch] +
test esi esi +
jz loc_4537B6  +
mov eax [ebp+arg_0] +
mov eax esi +
mov edx [eax] +
call dword ptr [edx+1Ch]  +
test al al +
jnz loc_4537B6  +
xor eax eax +
jmp loc_4537B8  +
mov al 1 +
mov edx [ebp+arg_0] +
mov [edx-3Dh] al +
mov eax [ebp+arg_0] +
cmp byte ptr [eax-3Dh] 0 +
jnz loc_4537EA  +
mov eax [ebp+arg_0] +
mov eax [eax-34h] +
mov ebx [eax+4Ch] +
test ebx ebx +
jz loc_453B96  +
mov eax [ebp+arg_0] +
mov eax ebx +
mov edx [eax] +
call dword ptr [edx+1Ch]  +
test al al +
jnz loc_453B96  +
mov eax [ebp+arg_0] +
mov byte ptr [eax-35h] 1 +
mov eax [ebp+arg_0] +
cmp byte ptr [eax-3Dh] 0 +
jz loc_453826  +
mov eax [ebp+arg_0] +
mov eax [eax-8] +
mov edx [ebp+arg_0] +
mov edx [edx-3Ch] +
sub eax [edx+34h] +
mov edx [ebp+arg_0] +
mov [edx-10h] eax +
mov eax [ebp+arg_0] +
mov eax [eax-0Ch] +
mov edx [ebp+arg_0] +
mov edx [edx-3Ch] +
add eax [edx+30h] +
mov edx [ebp+arg_0] +
mov [edx-4] eax +
jmp loc_453844  +
mov eax [ebp+arg_0] +
mov eax [eax-8] +
sub eax 10h +
mov edx [ebp+arg_0] +
mov [edx-10h] eax +
mov eax [ebp+arg_0] +
mov eax [eax-0Ch] +
add eax 10h +
mov edx [ebp+arg_0] +
mov [edx-4] eax +
mov eax [ebp+arg_0] +
mov eax [eax-34h] +
cmp byte ptr [eax+38h] 0 +
jz loc_453907  +
mov eax [ebp+arg_0] +
dec dword ptr [eax-10h]  +
mov eax [ebp+arg_0] +
inc dword ptr [eax-4]  +
mov eax [ebp+arg_0] +
mov eax [eax-28h] +
mov eax [eax+14h] +
call sub_45AF0C  +
mov edx [ebp+arg_0] +
mov [edx-44h] eax +
mov eax [ebp+arg_0] +
cmp byte ptr [eax-21h] 0 +
jnz loc_4538C3  +
mov eax [ebp+arg_0] +
mov eax [eax-28h] +
mov eax [eax+14h] +
call sub_45AF0C  +
mov edx [ebp+arg_0] +
mov [edx-44h] eax +
mov edx 80000014h +
mov eax 8000000Fh +
call @Graphics@AllocPatternBitmap$qqr15Graphics@TColort1  +
mov edx eax +
mov eax [ebp+arg_0] +
mov eax [eax-28h] +
mov eax [eax+14h] +
call @Graphics@TBrush@SetBitmap$qqrp16Graphics@TBitmap  +
mov eax [ebp+arg_0] +
lea edx [eax-10h] +
mov eax [ebp+arg_0] +
mov eax [eax-28h] +
call @Graphics@TCanvas@FillRect$qqrrx11Types@TRect  +
jmp loc_4538E7  +
mov eax [ebp+arg_0] +
mov eax [eax-28h] +
mov eax [eax+14h] +
mov edx 8000000Fh +
call @Graphics@TBrush@SetColor$qqr15Graphics@TColor  +
mov eax [ebp+arg_0] +
lea edx [eax-10h] +
mov eax [ebp+arg_0] +
mov eax [eax-28h] +
call @Graphics@TCanvas@FillRect$qqrrx11Types@TRect  +
mov eax [ebp+arg_0] +
mov edx [eax-44h] +
mov eax [ebp+arg_0] +
mov eax [eax-28h] +
mov eax [eax+14h] +
call @Graphics@TBrush@SetColor$qqr15Graphics@TColor  +
mov eax [ebp+arg_0] +
dec dword ptr [eax-8]  +
mov eax [ebp+arg_0] +
inc dword ptr [eax-0Ch]  +
mov eax [ebp+arg_0] +
cmp byte ptr [eax-3Dh] 0 +
jz loc_453A6E  +
mov eax [ebp+arg_0] +
mov eax [eax-34h] +
mov ebx [eax+40h] +
cmp ebx 0FFFFFFFFh +
jle loc_45396B  +
mov eax [ebp+arg_0] +
mov eax [ebp+arg_0] +
mov eax [eax-3Ch] +
call @Imglist@TCustomImageList@GetCount$qqrv  +
cmp ebx eax +
jge loc_45396B  +
mov eax [ebp+arg_0] +
mov eax [eax-0Ch] +
push eax  +
mov eax [ebp+arg_0] +
mov eax [eax-34h] +
mov eax [eax+40h] +
push eax  +
mov eax [ebp+arg_0] +
mov eax [eax-34h] +
mov al [eax+39h] +
push eax  +
mov eax [ebp+arg_0] +
mov ecx [eax-10h] +
mov eax [ebp+arg_0] +
mov edx [eax-28h] +
mov eax [ebp+arg_0] +
mov eax [eax-3Ch] +
call @Imglist@TCustomImageList@Draw$qqrp16Graphics@TCanvasiiio  +
jmp loc_453B7C  +
mov dl 1 +
mov eax ds:off_45979C +
call @Graphics@TBitmap@$bctr$qqrv  +
mov edx [ebp+arg_0] +
mov [edx-48h] eax +
xor eax eax +
push ebp  +
push offset loc_453A67  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov eax [ebp+arg_0] +
mov eax [eax-48h] +
mov dl 1 +
mov ecx [eax] +
call dword ptr [ecx+3Ch]  +
push 7FF8h  +
push 0  +
call LoadBitmapA  +
mov edx eax +
mov eax [ebp+arg_0] +
mov eax [eax-48h] +
call @Graphics@TBitmap@SetHandle$qqrui  +
mov eax [ebp+arg_0] +
mov eax [eax-28h] +
mov eax [eax+0Ch] +
mov eax [eax+18h] +
mov edx [ebp+arg_0] +
mov [edx-44h] eax +
mov eax [ebp+arg_0] +
mov eax [eax-28h] +
mov eax [eax+0Ch] +
mov edx 80000012h +
call @Graphics@TFont@SetColor$qqr15Graphics@TColor  +
mov eax [ebp+arg_0] +
mov eax [eax-48h] +
push eax  +
mov eax [ebp+arg_0] +
mov eax [eax-48h] +
mov edx [eax] +
call dword ptr [edx+20h]  +
mov edx [ebp+arg_0] +
mov edx [edx-4] +
mov ecx [ebp+arg_0] +
mov esi [ecx-0Ch] +
sub edx esi +
sub edx eax +
sar edx 1 +
jns loc_4539FF  +
adc edx 0 +
mov eax [ebp+arg_0] +
add edx esi +
inc edx  +
push edx  +
mov eax [ebp+arg_0] +
mov eax [eax-48h] +
mov edx [eax] +
call dword ptr [edx+2Ch]  +
mov edx [ebp+arg_0] +
mov edx [edx-8] +
mov ecx [ebp+arg_0] +
mov ebx [ecx-10h] +
sub edx ebx +
sub edx eax +
sar edx 1 +
jns loc_453A28  +
adc edx 0 +
mov eax [ebp+arg_0] +
add edx ebx +
inc edx  +
mov eax [ebp+arg_0] +
mov eax [eax-28h] +
pop ecx  +
call sub_45B20C  +
mov eax [ebp+arg_0] +
mov edx [eax-44h] +
mov eax [ebp+arg_0] +
mov eax [eax-28h] +
mov eax [eax+0Ch] +
call @Graphics@TFont@SetColor$qqr15Graphics@TColor  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_453B7C  +
mov eax [ebp+arg_0] +
mov eax [eax-48h] +
call @System@TObject@Free$qqrv  +
retn   +
jmp unknown_libname_539  +
jmp loc_453A5B  +
mov eax [ebp+arg_0] +
mov edx [ebp+arg_0] +
lea esi [eax-10h] +
lea edi [edx-58h] +
movs   +
movs   +
movs   +
movs   +
mov eax [ebp+arg_0] +
mov eax [eax-34h] +
mov eax [eax+4Ch] +
mov edx [eax] +
call dword ptr [edx+2Ch]  +
mov edx [ebp+arg_0] +
mov edx [edx-8] +
mov ecx [ebp+arg_0] +
sub edx [ecx-10h] +
cmp eax edx +
jge loc_453AEA  +
mov eax [ebp+arg_0] +
mov eax [eax-34h] +
mov eax [eax+4Ch] +
mov edx [eax] +
call dword ptr [edx+2Ch]  +
mov edx [ebp+arg_0] +
mov edx [edx-8] +
mov ecx [ebp+arg_0] +
sub edx [ecx-10h] +
sub edx eax +
sar edx 1 +
jns loc_453ABF  +
adc edx 0 +
mov eax [ebp+arg_0] +
mov eax [eax-8] +
sub eax edx +
inc eax  +
mov edx [ebp+arg_0] +
mov [edx-8] eax +
mov eax [ebp+arg_0] +
mov eax [eax-34h] +
mov eax [eax+4Ch] +
mov edx [eax] +
call dword ptr [edx+2Ch]  +
mov edx [ebp+arg_0] +
mov edx [edx-8] +
sub edx eax +
mov eax [ebp+arg_0] +
mov [eax-10h] edx +
mov eax [ebp+arg_0] +
mov eax [eax-34h] +
mov eax [eax+4Ch] +
mov edx [eax] +
call dword ptr [edx+20h]  +
mov edx [ebp+arg_0] +
mov edx [edx-4] +
mov ecx [ebp+arg_0] +
sub edx [ecx-0Ch] +
cmp eax edx +
jge loc_453B52  +
mov eax [ebp+arg_0] +
mov eax [eax-34h] +
mov eax [eax+4Ch] +
mov edx [eax] +
call dword ptr [edx+20h]  +
mov edx [ebp+arg_0] +
mov edx [edx-4] +
mov ecx [ebp+arg_0] +
sub edx [ecx-0Ch] +
sub edx eax +
sar edx 1 +
jns loc_453B2B  +
adc edx 0 +
mov eax [ebp+arg_0] +
add edx [eax-0Ch] +
inc edx  +
mov eax [ebp+arg_0] +
mov [eax-0Ch] edx +
mov eax [ebp+arg_0] +
mov eax [eax-34h] +
mov eax [eax+4Ch] +
mov edx [eax] +
call dword ptr [edx+20h]  +
mov edx [ebp+arg_0] +
add eax [edx-0Ch] +
mov edx [ebp+arg_0] +
mov [edx-4] eax +
mov eax [ebp+arg_0] +
mov eax [eax-34h] +
mov ecx [eax+4Ch] +
mov eax [ebp+arg_0] +
lea edx [eax-10h] +
mov eax [ebp+arg_0] +
mov eax [eax-28h] +
call unknown_libname_154  +
mov eax [ebp+arg_0] +
mov edx [ebp+arg_0] +
lea esi [eax-58h] +
lea edi [edx-10h] +
movs   +
movs   +
movs   +
movs   +
mov eax [ebp+arg_0] +
mov eax [eax-34h] +
cmp byte ptr [eax+38h] 0 +
jz loc_453BF3  +
mov eax [ebp+arg_0] +
dec dword ptr [eax-8]  +
mov eax [ebp+arg_0] +
dec dword ptr [eax-4]  +
jmp loc_453BF3  +
mov eax [ebp+arg_0] +
cmp dword ptr [eax-3Ch] 0 +
jz loc_453BD4  +
mov eax [ebp+arg_0] +
cmp byte ptr [eax+8] 0 +
jnz loc_453BD4  +
mov eax [ebp+arg_0] +
mov eax [eax-8] +
mov edx [ebp+arg_0] +
mov edx [edx-3Ch] +
sub eax [edx+34h] +
mov edx [ebp+arg_0] +
mov [edx-10h] eax +
mov eax [ebp+arg_0] +
mov eax [eax-0Ch] +
mov edx [ebp+arg_0] +
mov edx [edx-3Ch] +
add eax [edx+30h] +
mov edx [ebp+arg_0] +
mov [edx-4] eax +
jmp loc_453BEC  +
mov eax [ebp+arg_0] +
mov eax [eax-8] +
mov edx [ebp+arg_0] +
mov [edx-10h] eax +
mov eax [ebp+arg_0] +
mov eax [eax-0Ch] +
mov edx [ebp+arg_0] +
mov [edx-4] eax +
mov eax [ebp+arg_0] +
mov byte ptr [eax-35h] 0 +
mov eax [ebp+arg_0] +
dec dword ptr [eax-10h]  +
mov eax [ebp+arg_0] +
dec dword ptr [eax-0Ch]  +
mov eax [ebp+arg_0] +
add dword ptr [eax-8] 2 +
mov eax [ebp+arg_0] +
add dword ptr [eax-4] 2 +
mov eax [ebp+arg_0] +
mov eax [eax-34h] +
cmp byte ptr [eax+38h] 0 +
jnz loc_453C2B  +
mov eax [ebp+arg_0] +
cmp byte ptr [eax-21h] 0 +
jz loc_453C57  +
mov eax [ebp+arg_0] +
cmp byte ptr [eax-35h] 0 +
jz loc_453C57  +
push 0Fh  +
mov eax [ebp+arg_0] +
mov eax [eax-34h] +
movzx eax byte ptr [eax+38h] +
mov eax edge[eax*4] +
push eax  +
mov eax [ebp+arg_0] +
add eax 0FFFFFFF0h +
push eax  +
mov eax [ebp+arg_0] +
mov eax [eax-28h] +
call @Graphics@TCanvas@GetHandle$qqrv  +
push eax  +
call DrawEdge  +
mov eax [ebp+arg_0] +
cmp byte ptr [eax-21h] 0 +
jz loc_453CAC  +
mov eax [ebp+arg_0] +
cmp byte ptr [eax-35h] 0 +
jz loc_453C76  +
mov eax [ebp+arg_0] +
mov eax [eax-10h] +
dec eax  +
mov edx [ebp+arg_0] +
mov [edx-18h] eax +
mov eax [ebp+arg_0] +
cmp byte ptr [eax-59h] 0 +
jz loc_453C88  +
mov eax [ebp+arg_0] +
cmp byte ptr [eax+8] 0 +
jnz loc_453C9B  +
mov eax [ebp+arg_0] +
mov eax [eax-28h] +
mov eax [eax+14h] +
mov edx 8000000Dh +
call @Graphics@TBrush@SetColor$qqr15Graphics@TColor  +
mov eax [ebp+arg_0] +
lea edx [eax-20h] +
mov eax [ebp+arg_0] +
mov eax [eax-28h] +
call @Graphics@TCanvas@FillRect$qqrrx11Types@TRect  +
mov eax [ebp+arg_0] +
cmp byte ptr [eax+8] 0 +
jz loc_453D23  +
mov eax [ebp+arg_0] +
cmp byte ptr [eax-59h] 0 +
jz loc_453D23  +
mov eax [ebp+arg_0] +
cmp byte ptr [eax-21h] 0 +
jz loc_453CE5  +
push 0Fh  +
push 2  +
mov eax [ebp+arg_0] +
add eax 0FFFFFFE0h +
push eax  +
mov eax [ebp+arg_0] +
mov eax [eax-28h] +
call @Graphics@TCanvas@GetHandle$qqrv  +
push eax  +
call DrawEdge  +
jmp loc_453D0A  +
mov eax [ebp+arg_0] +
test byte ptr [eax+0Ch] 40h +
jz loc_453D0A  +
push 0Fh  +
push 4  +
mov eax [ebp+arg_0] +
add eax 0FFFFFFE0h +
push eax  +
mov eax [ebp+arg_0] +
mov eax [eax-28h] +
call @Graphics@TCanvas@GetHandle$qqrv  +
push eax  +
call DrawEdge  +
mov eax [ebp+arg_0] +
cmp byte ptr [eax-21h] 0 +
jnz loc_453D23  +
push 0FFFFFFFFh  +
push 0  +
mov eax [ebp+arg_0] +
add eax 0FFFFFFE0h +
push eax  +
call OffsetRect  +
mov eax [ebp+arg_0] +
cmp byte ptr [eax-21h] 0 +
jz loc_453D35  +
mov eax [ebp+arg_0] +
cmp byte ptr [eax-35h] 0 +
jnz loc_453D42  +
mov eax [ebp+arg_0] +
mov eax [eax-10h] +
dec eax  +
mov edx [ebp+arg_0] +
mov [edx-18h] eax +
mov eax [ebp+arg_0] +
add dword ptr [eax-20h] 2 +
mov eax [ebp+arg_0] +
dec dword ptr [eax-18h]  +
mov eax [ebp+arg_0] +
movzx eax byte ptr [eax-2Dh] +
mov ax word_4E617C[eax*2] +
or ax 60h +
movzx eax ax +
mov edx [ebp+arg_0] +
mov [edx-60h] eax +
mov eax [ebp+arg_0] +
cmp byte ptr [eax-61h] 0 +
jz loc_453D87  +
mov eax [ebp+arg_0] +
test byte ptr [eax+0Dh] 1 +
jz loc_453D87  +
mov eax [ebp+arg_0] +
or dword ptr [eax-60h] 100000h +
mov eax [ebp+arg_0] +
mov edx [ebp+arg_0] +
lea esi [eax-20h] +
lea edi [edx-58h] +
movs   +
movs   +
movs   +
movs   +
mov eax [ebp+arg_0] +
test byte ptr [eax+0Ch] 20h +
jz loc_453DB4  +
mov eax [ebp+arg_0] +
mov eax [eax-28h] +
mov eax [eax+0Ch] +
mov dl ds:byte_453F2C +
call @Graphics@TFont@SetStyle$qqr47System@_Set$t19Graphics@TFontStyle$iuc$0$iuc$3_  +
mov eax [ebp+arg_0] +
add eax 0FFFFFFE0h +
push eax  +
mov eax [ebp+arg_0] +
mov al [eax-21h] +
push eax  +
mov eax [ebp+arg_0] +
mov eax [eax-60h] +
or eax 400h +
or eax 100h +
push eax  +
mov eax [ebp+arg_0] +
mov eax [eax-34h] +
mov ecx [eax+30h] +
mov eax [ebp+arg_0] +
mov edx [eax-28h] +
mov eax [ebp+arg_0] +
mov eax [eax-34h] +
call @Menus@TMenuItem@DoDrawText$qqrp16Graphics@TCanvasx17System@AnsiStringr11Types@TRectoi  +
mov eax [ebp+arg_0] +
mov eax [eax-58h] +
mov edx [ebp+arg_0] +
mov [edx-20h] eax +
mov eax [ebp+arg_0] +
mov eax [eax-50h] +
mov edx [ebp+arg_0] +
mov [edx-18h] eax +
mov eax [ebp+arg_0] +
mov eax [eax-4Ch] +
mov edx [ebp+arg_0] +
sub eax [edx-54h] +
mov edx [ebp+arg_0] +
mov edx [edx-14h] +
mov ecx [ebp+arg_0] +
sub edx [ecx-1Ch] +
sub eax edx +
sar eax 1 +
jns loc_453E26  +
adc eax 0 +
push eax  +
push 0  +
mov eax [ebp+arg_0] +
add eax 0FFFFFFE0h +
push eax  +
call OffsetRect  +
mov eax [ebp+arg_0] +
cmp byte ptr [eax+8] 0 +
jz loc_453E60  +
mov eax [ebp+arg_0] +
cmp byte ptr [eax-21h] 0 +
jz loc_453E60  +
mov eax [ebp+arg_0] +
cmp byte ptr [eax-59h] 0 +
jz loc_453E60  +
push 0  +
push 1  +
mov eax [ebp+arg_0] +
add eax 0FFFFFFE0h +
push eax  +
call OffsetRect  +
mov eax [ebp+arg_0] +
add eax 0FFFFFFE0h +
push eax  +
mov eax [ebp+arg_0] +
mov al [eax-21h] +
push eax  +
mov eax [ebp+arg_0] +
mov eax [eax-60h] +
push eax  +
mov eax [ebp+arg_0] +
mov eax [eax-34h] +
mov ecx [eax+30h] +
mov eax [ebp+arg_0] +
mov edx [eax-28h] +
mov eax [ebp+arg_0] +
mov eax [eax-34h] +
call @Menus@TMenuItem@DoDrawText$qqrp16Graphics@TCanvasx17System@AnsiStringr11Types@TRectoi  +
mov eax [ebp+arg_0] +
mov eax [eax-34h] +
mov bx [eax+60h] +
test bx bx +
jz loc_453EFC  +
mov eax [ebp+arg_0] +
cmp byte ptr [eax+8] 0 +
jnz loc_453EFC  +
lea edx [ebp+var_4] +
mov eax [ebp+arg_0] +
mov eax ebx +
call sub_451C8C  +
mov eax [ebp+arg_0] +
mov dword ptr [eax-20h] 0Ah +
mov eax [ebp+arg_0] +
mov eax [eax-28h] +
mov edx [ebp+var_4] +
call @Graphics@TCanvas@TextWidth$qqrx17System@AnsiString  +
mov edx [ebp+arg_0] +
add eax [edx-20h] +
mov edx [ebp+arg_0] +
mov [edx-18h] eax +
mov eax [ebp+arg_0] +
add eax 0FFFFFFE0h +
push eax  +
mov eax [ebp+arg_0] +
mov al [eax-21h] +
push eax  +
push 2  +
mov eax [ebp+arg_0] +
mov edx [eax-28h] +
mov eax [ebp+arg_0] +
mov eax [eax-34h] +
mov ecx [ebp+var_4] +
call @Menus@TMenuItem@DoDrawText$qqrp16Graphics@TCanvasx17System@AnsiStringr11Types@TRectoi  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_453F19  +
lea eax [ebp+var_4] +
call unknown_libname_540  +
retn   +
jmp unknown_libname_539  +
jmp loc_453F09  +
pop edi  +
pop esi  +
pop ebx  +
pop ecx  +
pop ebp  +
retn   +
***
add esp 0FFFFFF9Ch +
push ebx  +
push esi  +
push edi  +
mov esi ecx +
lea edi [ebp+var_20] +
movs   +
movs   +
movs   +
movs   +
mov [ebp+var_28] edx +
mov [ebp+var_34] eax +
mov eax [ebp+var_34] +
call @Menus@TMenuItem@GetParentMenu$qqrv  +
mov [ebp+var_2C] eax +
mov eax [ebp+var_34] +
call @Menus@TMenuItem@GetImageList$qqrv  +
mov [ebp+var_3C] eax +
test [ebp+arg_4] 1 +
setnz al  +
mov [ebp+var_21] al +
mov eax off_4EA8BC +
cmp dword ptr [eax] 4 +
jg loc_453F8A  +
mov eax off_4EA8BC +
cmp dword ptr [eax] 4 +
jnz loc_453F86  +
mov eax off_4EA8C0 +
cmp dword ptr [eax] 0 +
jg loc_453F8A  +
xor eax eax +
jmp loc_453F8C  +
mov al 1 +
mov [ebp+var_59] al +
mov eax off_4EA8BC +
cmp dword ptr [eax] 4 +
jle loc_453FA3  +
mov eax off_4EA8B8 +
cmp dword ptr [eax] 2 +
jz loc_453FA7  +
xor eax eax +
jmp loc_453FA9  +
mov al 1 +
mov [ebp+var_61] al +
cmp [ebp+var_2C] 0 +
jz loc_45401A  +
mov eax [ebp+var_2C] +
cmp byte ptr [eax+40h] 0 +
jnz loc_453FC1  +
cmp [ebp+var_3C] 0 +
jz loc_45401A  +
mov eax [ebp+var_34] +
cmp word ptr [eax+9Ah] 0 +
jnz loc_453FDB  +
mov eax [ebp+var_34] +
cmp word ptr [eax+92h] 0 +
jz loc_45401A  +
mov al [ebp+var_21] +
push eax  +
lea ecx [ebp+var_20] +
mov edx [ebp+var_28] +
mov eax [ebp+var_34] +
mov ebx [eax] +
call dword ptr [ebx+34h]  +
mov eax [ebp+var_34] +
cmp word ptr [eax+9Ah] 0 +
jz loc_45403C  +
lea eax [ebp+var_20] +
push eax  +
mov ax word ptr [ebp+arg_4] +
push eax  +
mov ebx [ebp+var_34] +
mov ecx [ebp+var_28] +
mov edx [ebp+var_34] +
mov eax [ebx+9Ch] +
call dword ptr [ebx+98h]  +
jmp loc_45403C  +
cmp [ebp+var_2C] 0 +
jz loc_454035  +
mov eax [ebp+var_2C] +
call @Menus@TMenu@IsRightToLeft$qqrv  +
test al al +
jnz loc_454035  +
push ebp  +
call @Menus@_16482  +
pop ecx  +
jmp loc_45403C  +
push ebp  +
call @Menus@_16483  +
pop ecx  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 8  +
***
mov edx [eax+64h] +
jmp loc_454053  +
mov edx [edx+64h] +
test edx edx +
jz loc_45405D  +
cmp dword ptr [edx+7Ch] 0 +
jz loc_454050  +
test edx edx +
jz loc_454066  +
mov ebx [edx+7Ch] +
jmp loc_454072  +
call @Menus@TMenuItem@GetParentMenu$qqrv  +
test eax eax +
jz loc_454072  +
mov ebx [eax+48h] +
mov eax ebx +
pop ebx  +
retn   +
***
add esp 0FFFFFEACh +
mov [ebp+pvParam] 154h +
push 0  +
lea eax [ebp+pvParam] +
push eax  +
push 0  +
push 29h  +
call SystemParametersInfoA  +
test eax eax +
jz loc_4540BD  +
mov eax [ebp+arg_0] +
mov eax [eax-4] +
mov edx [ebp+var_BC] +
mov [eax] edx +
mov eax [ebp+arg_0] +
mov eax [eax+8] +
mov edx [ebp+var_B8] +
mov [eax] edx +
mov esp ebp +
pop ebp  +
retn   +
***
add esp 0FFFFFFDCh +
push ebx  +
push esi  +
push edi  +
xor ebx ebx +
mov [ebp+var_24] ebx +
mov [ebp+var_10] ebx +
mov [ebp+var_4] ecx +
mov [ebp+var_8] edx +
mov edi eax +
xor eax eax +
push ebp  +
push offset loc_4542A6  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov eax edi +
mov si 0FFF2h +
call @System@@CallDynaInst$qqrv  +
mov edx ds:off_45151C +
call @System@@IsClass$qqrp14System@TObjectp17System@TMetaClass  +
test al al +
jz loc_454110  +
mov bl 1 +
push ebp  +
call unknown_libname_125  +
pop ecx  +
jmp loc_454112  +
xor ebx ebx +
mov eax edi +
call @Menus@TMenuItem@GetParentMenu$qqrv  +
mov esi eax +
mov eax edi +
call @Menus@TMenuItem@GetImageList$qqrv  +
mov [ebp+var_C] eax +
mov eax [edi+30h] +
mov edx offset _str___7.Text +
call @System@@LStrCmp$qqrv  +
jnz loc_45414A  +
mov eax [ebp+arg_0] +
mov dword ptr [eax] 5 +
mov eax [ebp+var_4] +
mov dword ptr [eax] 0FFFFFFFEh +
xor eax eax +
jmp loc_4541AF  +
cmp [ebp+var_C] 0 +
jz loc_454178  +
cmp dword ptr [edi+40h] 0FFFFFFFFh +
jg loc_45415A  +
test bl bl +
jnz loc_454178  +
mov eax [ebp+var_C] +
mov eax [eax+34h] +
mov edx [ebp+var_4] +
mov [edx] eax +
test bl bl +
jnz loc_454174  +
mov eax [ebp+var_C] +
mov eax [eax+30h] +
mov edx [ebp+arg_0] +
mov [edx] eax +
mov al 1 +
jmp loc_4541AF  +
cmp dword ptr [edi+4Ch] 0 +
jz loc_4541A4  +
mov eax [edi+4Ch] +
mov edx [eax] +
call dword ptr [edx+1Ch]  +
test al al +
jnz loc_4541A4  +
mov eax [ebp+var_4] +
mov dword ptr [eax] 10h +
test bl bl +
jnz loc_4541A0  +
mov eax [ebp+arg_0] +
mov dword ptr [eax] 10h +
mov al 1 +
jmp loc_4541AF  +
mov eax [ebp+var_4] +
mov dword ptr [eax] 0FFFFFFF9h +
xor eax eax +
test al al +
jz loc_4541BD  +
test bl bl +
jnz loc_4541BD  +
mov eax [ebp+var_4] +
add dword ptr [eax] 0Fh +
test bl bl +
jnz loc_4541C7  +
mov eax [ebp+arg_0] +
add dword ptr [eax] 3 +
lea eax [ebp+Rect] +
xor ecx ecx +
mov edx 10h +
call @System@@FillChar$qqrv  +
test esi esi +
jz loc_4541DE  +
xor ebx ebx +
jmp loc_4541F6  +
mov eax esi +
mov edx ds:off_451800 +
call @System@@IsClass$qqrp14System@TObjectp17System@TMetaClass  +
test al al +
jz loc_4541F4  +
mov bl [esi+60h] +
jmp loc_4541F6  +
xor ebx ebx +
mov si [edi+60h] +
test si si +
jz loc_454219  +
lea edx [ebp+var_24] +
mov eax esi +
call sub_451C8C  +
mov ecx [ebp+var_24] +
lea eax [ebp+var_10] +
mov edx [edi+30h] +
call @System@@LStrCat3$qqrv  +
jmp loc_454224  +
lea eax [ebp+var_10] +
mov edx [edi+30h] +
call unknown_libname_543  +
xor eax eax +
mov al bl +
mov ax word_4E618C[eax*2] +
or ax 40h +
or ax 20h +
or ax 100h +
or ax 400h +
movzx eax ax +
lea edx [ebp+Rect] +
push edx  +
push 0  +
push eax  +
mov ecx [ebp+var_10] +
mov edx [ebp+var_8] +
mov eax edi +
call @Menus@TMenuItem@DoDrawText$qqrp16Graphics@TCanvasx17System@AnsiStringr11Types@TRectoi  +
mov eax [ebp+Rect.right] +
sub eax [ebp+Rect.left] +
add eax 7 +
mov edx [ebp+var_4] +
add [edx] eax +
cmp word ptr [edi+0A2h] 0 +
jz loc_454288  +
mov eax [ebp+var_4] +
push eax  +
mov eax [ebp+arg_0] +
push eax  +
mov ecx [ebp+var_8] +
mov edx edi +
mov eax [edi+0A4h] +
call dword ptr [edi+0A0h]  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4542AD  +
lea eax [ebp+var_24] +
call unknown_libname_540  +
lea eax [ebp+var_10] +
call unknown_libname_540  +
retn   +
jmp unknown_libname_539  +
jmp loc_454295  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 4  +
***
retn   +
***
cmp dl [eax+48h] +
mov esi edx +
push edi  +
push edi  +
mov ebx edx +
mov esi eax +
cmp bl [esi+38h] +
jz loc_454396  +
mov [esi+38h] bl +
mov edi [esi+64h] +
test edi edi +
jz loc_454385  +
test byte ptr [esi+1Ch] 2 +
jnz loc_454385  +
xor eax eax +
mov al bl +
mov eax dword_4E6114[eax*4] +
or eax 0 +
push eax  +
movzx eax word ptr [esi+50h] +
push eax  +
mov eax edi +
call @Menus@TMenuItem@GetHandle$qqrv  +
push eax  +
call CheckMenuItem  +
test bl bl +
jz loc_454396  +
cmp byte ptr [esi+3Dh] 0 +
jz loc_454396  +
mov eax esi +
call @Menus@TMenuItem@TurnSiblingsOff$qqrv  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
mov ebx edx +
mov esi eax +
cmp bl [esi+39h] +
jz loc_45440F  +
mov [esi+39h] bl +
mov eax off_4EA8B8 +
cmp dword ptr [eax] 2 +
jnz loc_4543C0  +
mov eax esi +
call @Menus@TMenuItem@GetCount$qqrv  +
test eax eax +
jnz loc_4543CD  +
mov edi [esi+64h] +
test edi edi +
jz loc_4543D8  +
cmp dword ptr [edi+6Ch] 0 +
jz loc_4543D8  +
mov dl 1 +
mov eax esi +
mov ecx [eax] +
call dword ptr [ecx+3Ch]  +
jmp loc_45440F  +
mov edi [esi+64h] +
test edi edi +
jz loc_454406  +
test byte ptr [esi+1Ch] 2 +
jnz loc_454406  +
xor eax eax +
mov al bl +
mov eax dword_4E611C[eax*4] +
or eax 0 +
push eax  +
movzx eax word ptr [esi+50h] +
push eax  +
mov eax edi +
call @Menus@TMenuItem@GetHandle$qqrv  +
push eax  +
call EnableMenuItem  +
xor edx edx +
mov eax esi +
mov ecx [eax] +
call dword ptr [ecx+3Ch]  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
mov ebx edx +
mov esi eax +
cmp bl [esi+3Fh] +
jz loc_454451  +
mov edi [esi+64h] +
test edi edi +
jz loc_45443B  +
mov edx esi +
mov eax edi +
call @Menus@TMenuItem@IndexOf$qqrp15Menus@TMenuItem  +
mov edx eax +
mov ecx ebx +
mov eax edi +
call @Menus@TMenuItem@VerifyGroupIndex$qqriuc  +
mov [esi+3Fh] bl +
cmp byte ptr [esi+38h] 0 +
jz loc_454451  +
cmp byte ptr [esi+3Dh] 0 +
jz loc_454451  +
mov eax esi +
call @Menus@TMenuItem@TurnSiblingsOff$qqrv  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov edx [eax+44h] +
test edx edx +
jz loc_454463  +
mov eax [edx+10h] +
retn   +
xor eax eax +
retn   +
***
mov eax ds:off_450F2C +
retn   +
***
mov edx [eax+5Ch] +
test edx edx +
jnz loc_45447A  +
xor eax eax +
retn   +
mov eax [edx+8] +
retn   +
***
mov esi edx +
mov ebx eax +
cmp dword ptr [ebx+5Ch] 0 +
jnz loc_454496  +
mov eax off_4EA71C +
call @Menus@_16419  +
mov edx esi +
mov eax [ebx+5Ch] +
call @Classes@TList@Get$qqri  +
pop esi  +
pop ebx  +
retn   +
***
cmp dx [eax+60h] +
jz locret_4544B5  +
mov [eax+60h] dx +
mov dl 1 +
mov ecx [eax] +
call dword ptr [ecx+3Ch]  +
retn   +
***
cmp dl [eax+3Eh] +
cmp edx [eax+40h] +
or edx 0FFFFFFFFh +
push edi  +
mov esi edx +
mov ebx eax +
mov eax [ebx+64h] +
test eax eax +
jz loc_454532  +
call @Menus@TMenuItem@GetCount$qqrv  +
test esi esi +
jge loc_454509  +
xor esi esi +
cmp eax esi +
jg loc_454510  +
mov esi eax +
dec esi  +
mov eax ebx +
call @Menus@TMenuItem@GetMenuIndex$qqrv  +
cmp esi eax +
jz loc_454532  +
mov edi [ebx+64h] +
mov edx ebx +
mov eax edi +
call @Menus@TMenuItem@Remove$qqrp15Menus@TMenuItem  +
mov ecx ebx +
mov edx esi +
mov eax edi +
call @Menus@TMenuItem@Insert$qqrip15Menus@TMenuItem  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push ecx  +
mov esi ecx +
mov ebx edx +
mov eax ebx +
mov edx ds:off_451004 +
call unknown_libname_534  +
mov edx esi +
call @Menus@TMenuItem@SetMenuIndex$qqri  +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
mov edx [eax+44h] +
test edx edx +
jz locret_4545FA  +
mov eax edx +
mov edx [eax] +
call dword ptr [edx+1Ch]  +
retn   +
***
push edi  +
push ebp  +
mov esi ecx +
mov edi edx +
mov ebx eax +
cmp dword ptr [esi+64h] 0 +
jz loc_454616  +
mov eax off_4EA720 +
call @Menus@_16419  +
cmp dword ptr [ebx+5Ch] 0 +
jnz loc_45462B  +
mov dl 1 +
mov eax ds:off_49A5D8 +
call @System@TObject@$bctr$qqrv  +
mov [ebx+5Ch] eax +
mov ebp edi +
dec ebp  +
test ebp ebp +
jl loc_454660  +
mov eax [ebx+5Ch] +
cmp ebp [eax+8] +
jge loc_454660  +
mov edx ebp +
mov eax [ebx+5Ch] +
call @Classes@TList@Get$qqri  +
mov al [eax+3Fh] +
cmp al [esi+3Fh] +
jbe loc_454660  +
mov edx ebp +
mov eax [ebx+5Ch] +
call @Classes@TList@Get$qqri  +
mov dl [eax+3Fh] +
mov eax esi +
call @Menus@TMenuItem@SetGroupIndex$qqruc  +
mov cl [esi+3Fh] +
mov edx edi +
mov eax ebx +
call @Menus@TMenuItem@VerifyGroupIndex$qqriuc  +
mov ecx esi +
mov edx edi +
mov eax [ebx+5Ch] +
call @Classes@TList@Insert$qqripv  +
mov [esi+64h] ebx +
mov [esi+84h] ebx +
mov dword ptr [esi+80h] offset @Menus@TMenuItem@SubItemChanged$qqrp14System@TObjectp15Menus@TMenuItemo +
cmp dword ptr [ebx+34h] 0 +
jz loc_454698  +
mov eax ebx +
call @Menus@TMenuItem@RebuildHandle$qqrv  +
mov eax ebx +
call @Menus@TMenuItem@GetCount$qqrv  +
dec eax  +
setz dl  +
mov eax ebx +
mov ecx [eax] +
call dword ptr [ecx+3Ch]  +
pop ebp  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
mov esi edx +
mov ebx eax +
test esi esi +
jl loc_4546CC  +
cmp dword ptr [ebx+5Ch] 0 +
jz loc_4546CC  +
mov eax ebx +
call @Menus@TMenuItem@GetCount$qqrv  +
cmp esi eax +
jl loc_4546D6  +
mov eax off_4EA71C +
call @Menus@_16419  +
mov edx esi +
mov eax [ebx+5Ch] +
call @Classes@TList@Get$qqri  +
mov edi eax +
mov edx esi +
mov eax [ebx+5Ch] +
call @Classes@TList@Delete$qqri  +
xor eax eax +
mov [edi+64h] eax +
xor eax eax +
mov [edi+80h] eax +
mov [edi+84h] eax +
cmp dword ptr [ebx+34h] 0 +
jz loc_45470C  +
mov eax ebx +
call @Menus@TMenuItem@RebuildHandle$qqrv  +
mov eax ebx +
call @Menus@TMenuItem@GetCount$qqrv  +
test eax eax +
setz dl  +
mov eax ebx +
mov ecx [eax] +
call dword ptr [ecx+3Ch]  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov ebx eax +
cmp byte ptr [ebx+39h] 0 +
jz loc_4547D0  +
cmp dword ptr [ebx+44h] 0 +
jnz loc_454741  +
cmp byte ptr [ebx+0A8h] 0 +
jnz loc_45475C  +
mov esi [ebx+44h] +
test esi esi +
jz loc_454769  +
mov eax esi +
mov edx [eax] +
call dword ptr [edx+78h]  +
test al al +
jnz loc_454769  +
cmp byte ptr [ebx+0A8h] 0 +
jz loc_454769  +
mov dl [ebx+38h] +
xor dl 1 +
mov eax ebx +
call @Menus@TMenuItem@SetChecked$qqro  +
cmp word ptr [ebx+8Ah] 0 +
jz loc_4547A0  +
mov eax ebx +
call @Menus@TMenuItem@GetAction$qqrv  +
test eax eax +
jz loc_4547A0  +
mov eax ebx +
call @Menus@TMenuItem@GetAction$qqrv  +
mov eax [eax+40h] +
cmp eax [ebx+88h] +
jz loc_4547A0  +
mov edx ebx +
mov eax [ebx+8Ch] +
call dword ptr [ebx+88h]  +
jmp loc_4547D0  +
test byte ptr [ebx+1Ch] 10h +
jnz loc_4547B8  +
cmp dword ptr [ebx+44h] 0 +
jz loc_4547B8  +
mov edx ebx +
mov eax [ebx+44h] +
mov ecx [eax] +
call dword ptr [ecx+18h]  +
jmp loc_4547D0  +
cmp word ptr [ebx+8Ah] 0 +
jz loc_4547D0  +
mov edx ebx +
mov eax [ebx+8Ch] +
call dword ptr [ebx+88h]  +
pop esi  +
pop ebx  +
retn   +
***
mov esi [eax+5Ch] +
mov esi edx +
mov ebx eax +
mov eax ebx +
call @Menus@TMenuItem@GetCount$qqrv  +
mov edx eax +
mov ecx esi +
mov eax ebx +
call @Menus@TMenuItem@Insert$qqrip15Menus@TMenuItem  +
pop esi  +
pop ebx  +
retn   +
***
mov ebx eax +
mov ebx edx +
mov esi eax +
cmp dword ptr [esi+64h] 0 +
jnz loc_454852  +
mov eax [esi+4] +
mov edx ds:off_451428 +
call @System@@IsClass$qqrp14System@TObjectp17System@TMetaClass  +
test al al +
jz loc_454852  +
xor eax eax +
jmp loc_454854  +
mov eax esi +
cmp word ptr [esi+82h] 0 +
jz loc_45486F  +
push ebx  +
mov ecx eax +
mov edx esi +
mov eax [esi+84h] +
call dword ptr [esi+80h]  +
pop esi  +
pop ebx  +
retn   +
***
push ebx  +
push esi  +
mov esi ecx +
mov ebx eax +
cmp [ebp+arg_0] 0 +
jz loc_454896  +
cmp dword ptr [ebx+34h] 0 +
jnz loc_45488F  +
cmp dword ptr [ebx+6Ch] 0 +
jz loc_454896  +
mov eax ebx +
call @Menus@TMenuItem@RebuildHandle$qqrv  +
mov eax [ebx+64h] +
test eax eax +
jz loc_4548AA  +
push 0  +
mov ecx esi +
mov edx ebx +
call @Menus@TMenuItem@SubItemChanged$qqrp14System@TObjectp15Menus@TMenuItemo  +
jmp loc_4548C5  +
mov esi [ebx+4] +
mov eax esi +
mov edx ds:off_45151C +
call @System@@IsClass$qqrp14System@TObjectp17System@TMetaClass  +
test al al +
jz loc_4548C5  +
mov eax esi +
call @Menus@TMainMenu@ItemChanged$qqrv  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
cmp dword ptr [ebx+4Ch] 0 +
jnz loc_4548E4  +
mov dl 1 +
mov eax ds:off_45979C +
call @Graphics@TBitmap@$bctr$qqrv  +
mov [ebx+4Ch] eax +
mov dl 1 +
mov eax [ebx+4Ch] +
mov ecx [eax] +
call dword ptr [ecx+3Ch]  +
mov eax [ebx+4Ch] +
pop ebx  +
retn   +
***
push edi  +
mov edi edx +
mov ebx eax +
test edi edi +
jnz loc_45490E  +
mov eax [ebx+44h] +
call @System@TObject@Free$qqrv  +
xor eax eax +
mov [ebx+44h] eax +
jmp loc_45495D  +
cmp dword ptr [ebx+44h] 0 +
jnz loc_454929  +
mov eax ebx +
mov si 0FFEEh +
call @System@@CallDynaInst$qqrv  +
mov ecx ebx +
mov dl 1 +
call dword ptr [eax+14h]  +
mov [ebx+44h] eax +
mov edx edi +
mov eax [ebx+44h] +
mov ecx [eax] +
call dword ptr [ecx+0Ch]  +
mov eax [ebx+44h] +
mov [eax+0Ch] ebx +
mov dword ptr [eax+8] offset @Menus@TMenuItem@DoActionChange$qqrp14System@TObject +
test byte ptr [edi+1Ch] 1 +
setnz cl  +
mov edx edi +
mov eax ebx +
mov si 0FFEFh +
call @System@@CallDynaInst$qqrv  +
mov edx ebx +
mov eax edi +
call @Classes@TComponent@FreeNotification$qqrp18Classes@TComponent  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov ebx edx +
mov esi eax +
cmp dword ptr [esi+4Ch] 0 +
jnz loc_45497F  +
mov dl 1 +
mov eax ds:off_45979C +
call @Graphics@TBitmap@$bctr$qqrv  +
mov [esi+4Ch] eax +
mov edx ebx +
mov eax [esi+4Ch] +
mov ecx [eax] +
call dword ptr [ecx+8]  +
mov dl 1 +
mov eax esi +
mov ecx [eax] +
call dword ptr [ecx+3Ch]  +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
mov edx [eax+64h] +
mov esi edx +
mov ebx eax +
mov eax [ebx+64h] +
test eax eax +
jz loc_4549EC  +
mov edx ebx +
call @Menus@TMenuItem@Remove$qqrp15Menus@TMenuItem  +
test esi esi +
jz loc_454A27  +
mov eax esi +
mov edx ds:off_451428 +
call @System@@IsClass$qqrp14System@TObjectp17System@TMetaClass  +
test al al +
jz loc_454A0D  +
mov eax [esi+34h] +
mov edx ebx +
call @Menus@TMenuItem@Add$qqrp15Menus@TMenuItem  +
jmp loc_454A27  +
mov eax esi +
mov edx ds:off_451004 +
call @System@@IsClass$qqrp14System@TObjectp17System@TMetaClass  +
test al al +
jz loc_454A27  +
mov edx ebx +
mov eax esi +
call @Menus@TMenuItem@Add$qqrp15Menus@TMenuItem  +
pop esi  +
pop ebx  +
retn   +
***
jmp loc_454A30  +
mov eax edx +
mov edx [eax+64h] +
test edx edx +
jnz loc_454A2E  +
mov eax [eax+70h] +
retn   +
***
cmp dl [ebx+3Dh] +
jz loc_454A63  +
mov [ebx+3Dh] dl +
cmp byte ptr [ebx+38h] 0 +
jz loc_454A5A  +
cmp byte ptr [ebx+3Dh] 0 +
jz loc_454A5A  +
mov eax ebx +
call @Menus@TMenuItem@TurnSiblingsOff$qqrv  +
mov dl 1 +
mov eax ebx +
mov ecx [eax] +
call dword ptr [ecx+3Ch]  +
pop ebx  +
retn   +
***
push edi  +
mov ebx ecx +
mov edi edx +
mov esi eax +
mov eax edi +
mov edx ds:off_448424 +
call @System@@IsClass$qqrp14System@TObjectp17System@TMetaClass  +
test al al +
jz loc_454B81  +
test bl bl +
jz loc_454A93  +
cmp byte ptr [esi+0A8h] 0 +
jnz loc_454A9F  +
mov al [edi+95h] +
mov [esi+0A8h] al +
test bl bl +
jz loc_454AA9  +
cmp dword ptr [esi+30h] 0 +
jnz loc_454AB3  +
mov edx [edi+64h] +
mov eax esi +
call @Menus@TMenuItem@SetCaption$qqrx17System@AnsiString  +
test bl bl +
jz loc_454ABD  +
cmp byte ptr [esi+38h] 0 +
jnz loc_454AC7  +
mov dl [edi+69h] +
mov eax esi +
call @Menus@TMenuItem@SetChecked$qqro  +
test bl bl +
jz loc_454AD1  +
cmp byte ptr [esi+39h] 1 +
jnz loc_454ADB  +
mov dl [edi+6Ah] +
mov eax esi +
call @Menus@TMenuItem@SetEnabled$qqro  +
test bl bl +
jz loc_454AE5  +
cmp dword ptr [esi+54h] 0 +
jnz loc_454AEB  +
mov eax [edi+74h] +
mov [esi+54h] eax +
test bl bl +
jz loc_454AF5  +
cmp dword ptr [esi+58h] 0 +
jnz loc_454B00  +
lea eax [esi+58h] +
mov edx [edi+7Ch] +
call unknown_libname_542  +
cmp byte ptr [esi+3Dh] 0 +
jz loc_454B1A  +
test bl bl +
jz loc_454B10  +
cmp byte ptr [esi+3Fh] 0 +
jnz loc_454B1A  +
mov dl [edi+6Ch] +
mov eax esi +
call @Menus@TMenuItem@SetGroupIndex$qqruc  +
test bl bl +
jz loc_454B24  +
cmp dword ptr [esi+40h] 0FFFFFFFFh +
jnz loc_454B31  +
mov edx [edi+80h] +
mov eax esi +
call @Menus@TMenuItem@SetImageIndex$qqri  +
test bl bl +
jz loc_454B3C  +
cmp word ptr [esi+60h] 0 +
jnz loc_454B4A  +
mov dx [edi+84h] +
mov eax esi +
call @Menus@TMenuItem@SetShortCut$qqrus  +
test bl bl +
jz loc_454B54  +
cmp byte ptr [esi+3Eh] 1 +
jnz loc_454B61  +
mov dl [edi+86h] +
mov eax esi +
call @Menus@TMenuItem@SetVisible$qqro  +
test bl bl +
jz loc_454B6F  +
cmp word ptr [esi+8Ah] 0 +
jnz loc_454B81  +
mov eax [edi+40h] +
mov [esi+88h] eax +
mov eax [edi+44h] +
mov [esi+8Ch] eax +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov edi edx +
mov esi eax +
mov eax esi +
call @Menus@TMenuItem@GetAction$qqrv  +
cmp edi eax +
jnz loc_454BA8  +
xor ecx ecx +
mov edx edi +
mov eax esi +
mov si 0FFEFh +
call @System@@CallDynaInst$qqrv  +
pop edi  +
pop esi  +
retn   +
***
mov ebx eax +
mov ebx eax +
mov ebx eax +
mov ebx eax +
mov ebx eax +
mov ebx eax +
mov ebx eax +
mov ebx eax +
mov ebx eax +
push edi  +
push edi  +
mov ebx ecx +
mov edi edx +
mov esi eax +
mov ecx ebx +
mov edx edi +
mov eax esi +
call sub_4A4E3C  +
cmp bl 1 +
jnz loc_454D91  +
mov eax esi +
call @Menus@TMenuItem@GetAction$qqrv  +
cmp edi eax +
jnz loc_454D73  +
xor edx edx +
mov eax esi +
call @Menus@TMenuItem@SetAction$qqrp20Classes@TBasicAction  +
jmp loc_454D91  +
cmp edi [esi+7Ch] +
jnz loc_454D83  +
xor edx edx +
mov eax esi +
call @Menus@TMenuItem@SetSubMenuImages$qqrp24Imglist@TCustomImageList  +
jmp loc_454D91  +
cmp edi [esi+68h] +
jnz loc_454D91  +
xor edx edx +
mov eax esi +
call @Menus@TMenuItem@MergeWith$qqrp15Menus@TMenuItem  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov esi edx +
mov ebx eax +
mov eax [ebx+7Ch] +
test eax eax +
jz loc_454DAD  +
mov edx [ebx+78h] +
call @Imglist@TCustomImageList@UnRegisterChanges$qqrp19Imglist@TChangeLink  +
mov eax esi +
mov [ebx+7Ch] eax +
test eax eax +
jz loc_454DC8  +
mov edx [ebx+78h] +
call @Imglist@TCustomImageList@RegisterChanges$qqrp19Imglist@TChangeLink  +
mov edx ebx +
mov eax [ebx+7Ch] +
call @Classes@TComponent@FreeNotification$qqrp18Classes@TComponent  +
mov eax ebx +
call @Menus@TMenuItem@UpdateItems$qqrv  +
pop esi  +
pop ebx  +
retn   +
***
cmp edx [eax+7Ch] +
jnz locret_454DDE  +
call @Menus@TMenuItem@UpdateItems$qqrv  +
retn   +
***
mov esi eax +
xor ebx ebx +
mov eax offset @Menus@_16567 +
mov ecx esi +
mov edx [esi+68h] +
call sub_452064  +
push 1  +
mov ecx esi +
mov edx esi +
mov eax esi +
call @Menus@TMenuItem@SubItemChanged$qqrp14System@TObjectp15Menus@TMenuItemo  +
mov eax ebx +
pop esi  +
pop ebx  +
retn   +
***
mov edx offset @Menus@_16567 +
mov ecx eax +
mov eax [eax+68h] +
xchg eax edx +
call sub_452064  +
retn   +
***
push ebx  +
mov edx [ebp+arg_0] +
mov edx [edx-4] +
call sub_4ACD40  +
test eax eax +
setnz bl  +
test bl bl +
jz loc_454E45  +
mov edx [ebp+arg_0] +
add edx 0FFFFFFFCh +
mov ecx 1 +
xchg eax edx +
call @System@@LStrDelete$qqrv  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn   +
***
push ebx  +
push esi  +
push edi  +
mov eax [ebp+arg_0] +
mov edx [eax-0Ch] +
mov eax [ebp+arg_0] +
mov eax [eax-8] +
mov ecx [eax] +
call dword ptr [ecx+8]  +
mov eax [ebp+arg_0] +
mov eax [eax-0Ch] +
mov edx [eax] +
call dword ptr [edx+14h]  +
mov edx [ebp+arg_0] +
mov [edx-10h] eax +
mov eax [ebp+arg_0] +
mov eax [eax-14h] +
mov edx [eax] +
call dword ptr [edx+14h]  +
mov esi eax +
dec esi  +
test esi esi +
jl loc_454EB7  +
inc esi  +
xor ebx ebx +
mov eax [ebp+arg_0] +
mov eax [eax-14h] +
mov edx ebx +
mov ecx [eax] +
call dword ptr [ecx+18h]  +
push eax  +
mov eax [ebp+arg_0] +
mov eax [eax-14h] +
mov edx ebx +
mov ecx [eax] +
call dword ptr [ecx+18h]  +
mov edx [eax+30h] +
mov eax [ebp+arg_0] +
mov eax [eax-8] +
pop ecx  +
mov edi [eax] +
call dword ptr [edi+3Ch]  +
inc ebx  +
dec esi  +
jnz loc_454E89  +
mov eax [ebp+arg_0] +
add eax 0FFFFFFE8h +
mov edx [ebp+arg_0] +
mov edx [edx-4] +
call unknown_libname_543  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
add esp 0FFFFFFF0h +
push ebx  +
push esi  +
push edi  +
xor ebx ebx +
mov [ebp+var_10] ebx +
mov [ebp+var_C] ebx +
mov [ebp+var_8] ecx +
mov [ebp+var_4] edx +
mov esi eax +
xor eax eax +
push ebp  +
push offset loc_454FF2  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
xor ebx ebx +
mov eax [esi] +
call sub_4BB610  +
test eax eax +
jle loc_454F28  +
mov edi 1 +
mov edx [esi] +
mov dl [edx+edi-1] +
mov ecx off_4EA8C4 +
and edx 0FFh +
bt [ecx] edx +
jnb loc_454F24  +
mov bl 1 +
jmp loc_454F28  +
inc edi  +
dec eax  +
jnz loc_454F09  +
test bl bl +
jz loc_454FC2  +
lea eax [ebp+var_C] +
push eax  +
mov eax [esi] +
call sub_4BB610  +
mov edx eax +
sub edx 3 +
inc edx  +
mov eax [esi] +
mov ecx 3 +
call @System@@LStrCopy$qqrv  +
mov eax [ebp+var_C] +
mov edx offset _str____.Text +
call @System@@LStrCmp$qqrv  +
jnz loc_454FA0  +
lea eax [ebp+var_10] +
push eax  +
mov eax [esi] +
call sub_4BB610  +
mov ecx eax +
sub ecx 3 +
mov eax [esi] +
mov edx 1 +
call @System@@LStrCopy$qqrv  +
push [ebp+var_10]  +
push offset _str__.Text  +
push offset _str__.Text  +
push [ebp+var_4]  +
push offset _str__.Text  +
push offset _str____.Text  +
mov eax esi +
mov edx 6 +
call sub_4BB6D0  +
jmp loc_454FD7  +
push dword ptr [esi]  +
push offset _str__.Text  +
push offset _str__.Text  +
push [ebp+var_4]  +
push offset _str__.Text  +
mov eax esi +
mov edx 5 +
call sub_4BB6D0  +
jmp loc_454FD7  +
cmp [ebp+var_8] 0 +
jz loc_454FD7  +
mov edx esi +
mov ecx [ebp+var_8] +
mov eax offset _str__.Text +
call @System@@LStrInsert$qqrv  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_454FF9  +
lea eax [ebp+var_10] +
mov edx 2 +
call unknown_libname_541  +
retn   +
jmp unknown_libname_539  +
jmp loc_454FE4  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
add esp 0FFFFFFB8h +
push ebx  +
push esi  +
push edi  +
xor ecx ecx +
mov [ebp+var_48] ecx +
mov [ebp+var_44] ecx +
mov [ebp+var_40] ecx +
mov [ebp+var_3C] ecx +
mov [ebp+var_2C] ecx +
mov [ebp+var_30] ecx +
mov [ebp+var_34] ecx +
mov [ebp+var_4] ecx +
mov [ebp+var_18] ecx +
mov [ebp+var_19] dl +
mov ebx eax +
xor eax eax +
push ebp  +
push offset loc_4554CF  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov [ebp+var_1A] 0 +
cmp [ebp+var_19] 0 +
jnz loc_45508C  +
test byte ptr [ebx+1Ch] 10h +
jnz loc_455497  +
mov eax ebx +
call @Menus@TMenuItem@GetAutoHotkeys$qqrv  +
test al al +
jz loc_455497  +
lea eax [ebp+var_4] +
mov edx off_4E60B8 +
call unknown_libname_543  +
xor eax eax +
mov [ebp+var_C] eax +
xor eax eax +
mov [ebp+var_14] eax +
xor eax eax +
mov [ebp+var_20] eax +
xor eax eax +
mov [ebp+var_8] eax +
xor eax eax +
mov [ebp+var_10] eax +
xor eax eax +
push ebp  +
push offset loc_455490  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov dl 1 +
mov eax ds:off_49ABC4 +
call @System@TObject@$bctr$qqrv  +
mov [ebp+var_C] eax +
mov dl 1 +
mov eax ds:off_49ABC4 +
call @System@TObject@$bctr$qqrv  +
mov [ebp+var_14] eax +
mov dl 1 +
mov eax ds:off_49ABC4 +
call @System@TObject@$bctr$qqrv  +
mov [ebp+var_20] eax +
mov dl 1 +
mov eax ds:off_49ABC4 +
call @System@TObject@$bctr$qqrv  +
mov [ebp+var_8] eax +
mov eax ebx +
call @Menus@TMenuItem@GetCount$qqrv  +
dec eax  +
test eax eax +
jl loc_455210  +
inc eax  +
mov [ebp+var_38] eax +
xor esi esi +
mov edx esi +
mov eax ebx +
call @Menus@TMenuItem@GetItem$qqri  +
cmp byte ptr [eax+3Eh] 0 +
jz loc_455206  +
mov edx esi +
mov eax ebx +
call @Menus@TMenuItem@GetItem$qqri  +
mov eax [eax+30h] +
mov edx offset _str___8.Text +
call @System@@LStrCmp$qqrv  +
jz loc_455206  +
mov edx esi +
mov eax ebx +
call @Menus@TMenuItem@GetItem$qqri  +
cmp dword ptr [eax+30h] 0 +
jz loc_455206  +
mov edx esi +
mov eax ebx +
call @Menus@TMenuItem@GetItem$qqri  +
mov eax [eax+30h] +
lea edx [ebp+var_3C] +
call @Menus@GetHotkey$qqrx17System@AnsiString  +
mov eax [ebp+var_3C] +
lea edx [ebp+var_2C] +
call sub_4A87A8  +
cmp [ebp+var_2C] 0 +
jnz loc_45519C  +
mov edx esi +
mov eax ebx +
call @Menus@TMenuItem@GetItem$qqri  +
push eax  +
mov edx esi +
mov eax ebx +
call @Menus@TMenuItem@GetItem$qqri  +
mov ecx [eax+30h] +
xor edx edx +
mov eax [ebp+var_20] +
mov edi [eax] +
call dword ptr [edi+64h]  +
jmp loc_455206  +
mov edx off_4E60B8 +
mov eax [ebp+var_2C] +
call sub_4ACD40  +
test eax eax +
jz loc_455206  +
push ebp  +
mov eax [ebp+var_2C] +
call @Menus@_16541  +
pop ecx  +
test al al +
jnz loc_455206  +
mov edx esi +
mov eax ebx +
call @Menus@TMenuItem@GetItem$qqri  +
add eax 30h +
push eax  +
mov edx esi +
mov eax ebx +
call @Menus@TMenuItem@GetItem$qqri  +
mov eax [eax+30h] +
lea edx [ebp+var_40] +
call sub_456E94  +
mov edx [ebp+var_40] +
pop eax  +
call unknown_libname_542  +
mov edx esi +
mov eax ebx +
call @Menus@TMenuItem@GetItem$qqri  +
push eax  +
mov edx esi +
mov eax ebx +
call @Menus@TMenuItem@GetItem$qqri  +
mov ecx [eax+30h] +
xor edx edx +
mov eax [ebp+var_20] +
mov edi [eax] +
call dword ptr [edi+64h]  +
inc esi  +
dec [ebp+var_38]  +
jnz loc_455113  +
lea eax [ebp+var_34] +
mov edx [ebp+var_4] +
call unknown_libname_543  +
mov eax [ebp+var_20] +
mov edx [eax] +
call dword ptr [edx+14h]  +
dec eax  +
test eax eax +
jl loc_455392  +
inc eax  +
mov [ebp+var_38] eax +
lea eax [ebp+var_4] +
mov edx [ebp+var_34] +
call unknown_libname_543  +
mov edx [ebp+var_20] +
mov eax [ebp+var_14] +
mov ecx [eax] +
call dword ptr [ecx+8]  +
mov eax [ebp+var_C] +
mov edx [eax] +
call dword ptr [edx+44h]  +
mov eax [ebp+var_14] +
mov edx [eax] +
call dword ptr [edx+14h]  +
mov esi eax +
dec esi  +
cmp esi 0 +
jl loc_455326  +
lea ecx [ebp+var_30] +
mov edx esi +
mov eax [ebp+var_14] +
mov ebx [eax] +
call dword ptr [ebx+0Ch]  +
mov ebx 1 +
jmp loc_45530C  +
mov eax [ebp+var_30] +
mov al [eax+ebx-1] +
mov edx off_4EA8C4 +
and eax 0FFh +
bt [edx] eax +
jnb loc_455293  +
inc ebx  +
jmp loc_45530B  +
lea eax [ebp+var_44] +
push eax  +
mov ecx 1 +
mov edx ebx +
mov eax [ebp+var_30] +
call @System@@LStrCopy$qqrv  +
mov eax [ebp+var_44] +
lea edx [ebp+var_2C] +
call sub_4A87A8  +
push ebp  +
mov eax [ebp+var_2C] +
call @Menus@_16541  +
pop ecx  +
test al al +
jz loc_45530B  +
mov eax off_4EA8CC +
cmp byte ptr [eax+0Ch] 0 +
jz loc_4552D9  +
lea eax [ebp+var_30] +
mov ecx ebx +
mov edx [ebp+var_2C] +
call sub_454ED0  +
jmp loc_4552E8  +
lea edx [ebp+var_30] +
mov ecx ebx +
mov eax offset _str___0.Text +
call @System@@LStrInsert$qqrv  +
mov edx esi +
mov eax [ebp+var_14] +
mov ecx [eax] +
call dword ptr [ecx+18h]  +
mov ecx eax +
mov edx [ebp+var_30] +
mov eax [ebp+var_C] +
mov ebx [eax] +
call dword ptr [ebx+3Ch]  +
mov edx esi +
mov eax [ebp+var_14] +
mov ecx [eax] +
call dword ptr [ecx+48h]  +
jmp loc_45531C  +
inc ebx  +
mov eax [ebp+var_30] +
call sub_4BB610  +
cmp ebx eax +
jle loc_455279  +
dec esi  +
cmp esi 0FFFFFFFFh +
jnz loc_455262  +
mov eax [ebp+var_C] +
mov edx [eax] +
call dword ptr [edx+14h]  +
cmp eax [ebp+var_10] +
jle loc_45533A  +
push ebp  +
call @Menus@_16545  +
pop ecx  +
mov eax [ebp+var_14] +
mov edx [eax] +
call dword ptr [edx+14h]  +
test eax eax +
jle loc_455392  +
mov eax [ebp+var_14] +
mov edx [eax] +
call dword ptr [edx+14h]  +
mov edi eax +
dec edi  +
test edi edi +
jl loc_455389  +
inc edi  +
xor esi esi +
mov edx esi +
mov eax [ebp+var_14] +
mov ecx [eax] +
call dword ptr [ecx+18h]  +
mov edx eax +
mov eax [ebp+var_20] +
mov ecx [eax] +
call dword ptr [ecx+5Ch]  +
mov [ebp+var_28] eax +
mov eax [ebp+var_20] +
mov edx [eax] +
call dword ptr [edx+14h]  +
mov ecx eax +
dec ecx  +
mov edx [ebp+var_28] +
mov eax [ebp+var_20] +
mov ebx [eax] +
call dword ptr [ebx+70h]  +
inc esi  +
dec edi  +
jnz loc_455358  +
dec [ebp+var_38]  +
jnz loc_455230  +
cmp [ebp+var_10] 0 +
jnz loc_45539F  +
push ebp  +
call @Menus@_16545  +
pop ecx  +
mov eax [ebp+var_8] +
mov edx [eax] +
call dword ptr [edx+14h]  +
test eax eax +
setnle [ebp+var_1A]  +
mov eax [ebp+var_8] +
mov edx [eax] +
call dword ptr [edx+14h]  +
dec eax  +
test eax eax +
jl loc_455462  +
inc eax  +
mov [ebp+var_38] eax +
xor esi esi +
lea ecx [ebp+var_30] +
mov edx esi +
mov eax [ebp+var_8] +
mov ebx [eax] +
call dword ptr [ebx+0Ch]  +
mov eax off_4EA8CC +
cmp byte ptr [eax+0Ch] 0 +
jz loc_455443  +
mov edx [ebp+var_30] +
mov eax offset _str___0.Text +
call sub_4ACD40  +
test eax eax +
jnz loc_455443  +
cmp [ebp+var_18] 0 +
jz loc_455443  +
mov edx [ebp+var_30] +
mov eax offset _str___0.Text +
call sub_4ACD40  +
test eax eax +
jnz loc_455443  +
lea eax [ebp+var_48] +
push eax  +
mov eax [ebp+var_18] +
call sub_4BB610  +
mov edx eax +
mov ecx 1 +
mov eax [ebp+var_18] +
call @System@@LStrCopy$qqrv  +
mov edx [ebp+var_48] +
lea eax [ebp+var_30] +
xor ecx ecx +
call sub_454ED0  +
mov eax [ebp+var_18] +
call sub_4BB610  +
mov edx eax +
lea eax [ebp+var_18] +
mov ecx 1 +
call @System@@LStrDelete$qqrv  +
mov edx esi +
mov eax [ebp+var_8] +
mov ecx [eax] +
call dword ptr [ecx+18h]  +
add eax 30h +
mov edx [ebp+var_30] +
call unknown_libname_542  +
inc esi  +
dec [ebp+var_38]  +
jnz loc_4553C4  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_455497  +
mov eax [ebp+var_8] +
call @System@TObject@Free$qqrv  +
mov eax [ebp+var_20] +
call @System@TObject@Free$qqrv  +
mov eax [ebp+var_14] +
call @System@TObject@Free$qqrv  +
mov eax [ebp+var_C] +
call @System@TObject@Free$qqrv  +
retn   +
jmp unknown_libname_539  +
jmp loc_45546F  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4554D6  +
lea eax [ebp+var_48] +
mov edx 4 +
call unknown_libname_541  +
lea eax [ebp+var_34] +
mov edx 3 +
call unknown_libname_541  +
lea eax [ebp+var_18] +
call unknown_libname_540  +
lea eax [ebp+var_4] +
call unknown_libname_540  +
retn   +
jmp unknown_libname_539  +
jmp loc_4554A4  +
mov al [ebp+var_1A] +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
cmp dl [eax+3Bh] +
mov eax [ebx+30h] +
mov edx offset _str___9.Text +
call @System@@LStrCmp$qqrv  +
setz al  +
pop ebx  +
retn   +
***
push edi  +
push ebp  +
add esp 0FFFFFFF8h +
mov ebx edx +
mov esi eax +
mov [esp+8+var_8] 0 +
test bl bl +
jnz loc_455558  +
test byte ptr [esi+1Ch] 10h +
jnz loc_455669  +
mov eax esi +
call @Menus@TMenuItem@GetAutoLineReduction$qqrv  +
test al al +
jz loc_455669  +
xor eax eax +
mov [esp+8+var_4] eax +
xor ebp ebp +
mov ebx [esp+8+var_4] +
mov eax esi +
call @Menus@TMenuItem@GetCount$qqrv  +
mov edi eax +
dec edi  +
sub edi ebx +
jl loc_4555B1  +
inc edi  +
mov edx ebx +
mov eax esi +
call @Menus@TMenuItem@GetItem$qqri  +
cmp byte ptr [eax+3Eh] 0 +
jz loc_4555AD  +
mov edx ebx +
mov eax esi +
call @Menus@TMenuItem@GetItem$qqri  +
call @Menus@TMenuItem@IsLine$qqrv  +
test al al +
jz loc_4555A7  +
mov edx ebx +
mov eax esi +
call @Menus@TMenuItem@GetItem$qqri  +
mov byte ptr [eax+3Eh] 0 +
mov [esp+8+var_8] 1 +
jmp loc_4555AD  +
mov [esp+8+var_4] ebx +
jmp loc_4555B1  +
inc ebx  +
dec edi  +
jnz loc_455573  +
mov ebx [esp+8+var_4] +
mov eax esi +
call @Menus@TMenuItem@GetCount$qqrv  +
mov edi eax +
dec edi  +
sub edi ebx +
jl loc_455620  +
inc edi  +
mov edx ebx +
mov eax esi +
call @Menus@TMenuItem@GetItem$qqri  +
call @Menus@TMenuItem@IsLine$qqrv  +
test al al +
jz loc_4555F5  +
test ebp ebp +
jz loc_4555E8  +
cmp byte ptr [ebp+3Eh] 0 +
jz loc_4555E8  +
mov byte ptr [ebp+3Eh] 0 +
mov [esp+8+var_8] 1 +
mov edx ebx +
mov eax esi +
call @Menus@TMenuItem@GetItem$qqri  +
mov ebp eax +
jmp loc_45561C  +
mov edx ebx +
mov eax esi +
call @Menus@TMenuItem@GetItem$qqri  +
cmp byte ptr [eax+3Eh] 0 +
jz loc_45561C  +
test ebp ebp +
jz loc_455616  +
cmp byte ptr [ebp+3Eh] 0 +
jnz loc_455616  +
mov byte ptr [ebp+3Eh] 1 +
mov [esp+8+var_8] 1 +
xor ebp ebp +
mov [esp+8+var_4] ebx +
inc ebx  +
dec edi  +
jnz loc_4555C4  +
mov eax esi +
call @Menus@TMenuItem@GetCount$qqrv  +
mov ebx eax +
dec ebx  +
mov edi [esp+8+var_4] +
sub edi ebx +
jg loc_455669  +
dec edi  +
mov edx ebx +
mov eax esi +
call @Menus@TMenuItem@GetItem$qqri  +
cmp byte ptr [eax+3Eh] 0 +
jz loc_455665  +
mov edx ebx +
mov eax esi +
call @Menus@TMenuItem@GetItem$qqri  +
call @Menus@TMenuItem@IsLine$qqrv  +
test al al +
jz loc_455669  +
mov edx ebx +
mov eax esi +
call @Menus@TMenuItem@GetItem$qqri  +
mov byte ptr [eax+3Eh] 0 +
mov [esp+8+var_8] 1 +
dec ebx  +
inc edi  +
jnz loc_455633  +
mov al [esp+8+var_8] +
pop ecx  +
pop edx  +
pop ebp  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
cmp dl [eax+3Ch] +
mov al [ebx+3Bh] +
mov al [ebx+3Ch] +
push ecx  +
call unknown_libname_536  +
mov ebx edx +
mov esi eax +
mov eax [esi+34h] +
call @System@TObject@Free$qqrv  +
mov eax [esi+44h] +
call @System@TObject@Free$qqrv  +
mov edx ebx +
and dl 0FCh +
mov eax esi +
call sub_4A4B6C  +
test bl bl +
jle loc_4557AA  +
mov eax esi +
call @System@@ClassDestroy$qqrp14System@TObject  +
pop esi  +
pop ebx  +
retn   +
***
push esi  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
mov eax [eax+34h] +
mov si 0FFFDh +
call @System@@CallDynaInst$qqrv  +
pop esi  +
pop ebp  +
retn 8  +
***
mov eax [eax+34h] +
call @Menus@TMenuItem@GetHandle$qqrv  +
retn   +
***
mov eax [esi+34h] +
mov si 0FFF9h +
call @System@@CallDynaInst$qqrv  +
pop esi  +
retn   +
***
mov esi eax +
xor ebx ebx +
mov eax offset @Menus@_16567_0 +
mov ecx esi +
mov edx [esi+68h] +
call sub_452064  +
push 1  +
mov ecx esi +
mov edx esi +
mov eax esi +
call @Menus@TMenuItem@SubItemChanged$qqrp14System@TObjectp15Menus@TMenuItemo  +
mov eax ebx +
pop esi  +
pop ebx  +
retn   +
***
mov edx [eax+34h] +
push ecx  +
push ebx  +
push esi  +
push edi  +
mov ebx eax +
mov [ebp+var_1] 0 +
mov eax [ebp+arg_0] +
cmp byte ptr [eax-1] 0 +
jnz loc_455850  +
mov eax [ebp+arg_0] +
mov eax [eax-8] +
movzx edx word ptr [ebx+50h] +
cmp eax edx +
jz loc_45587B  +
mov eax [ebp+arg_0] +
cmp byte ptr [eax-1] 1 +
jnz loc_455864  +
mov eax [ebp+arg_0] +
mov eax [eax-8] +
cmp eax [ebx+34h] +
jz loc_45587B  +
mov eax [ebp+arg_0] +
cmp byte ptr [eax-1] 2 +
jnz loc_455887  +
mov eax [ebp+arg_0] +
mov eax [eax-8] +
movzx edx word ptr [ebx+60h] +
cmp eax edx +
jnz loc_455887  +
mov eax [ebp+arg_0] +
mov [eax-0Ch] ebx +
mov [ebp+var_1] 1 +
jmp loc_4558B9  +
mov eax ebx +
call @Menus@TMenuItem@GetCount$qqrv  +
mov esi eax +
dec esi  +
test esi esi +
jl loc_4558B9  +
inc esi  +
xor edi edi +
mov eax [ebp+arg_0] +
push eax  +
mov edx edi +
mov eax ebx +
call @Menus@TMenuItem@GetItem$qqri  +
call @Menus@_16569  +
pop ecx  +
test al al +
jz loc_4558B5  +
mov [ebp+var_1] 1 +
jmp loc_4558B9  +
inc edi  +
dec esi  +
jnz loc_455898  +
mov al [ebp+var_1] +
pop edi  +
pop esi  +
pop ebx  +
pop ecx  +
pop ebp  +
retn   +
***
add esp 0FFFFFFF4h +
push ebx  +
mov [ebp+var_1] cl +
mov [ebp+var_8] edx +
xor edx edx +
mov [ebp+var_C] edx +
mov ecx offset @Menus@_16569 +
mov edx [eax+34h] +
mov ebx [edx+68h] +
mov eax edx +
xchg eax ecx +
mov edx ebx +
call sub_452064  +
mov eax [ebp+var_C] +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
push edi  +
push ebp  +
push ecx  +
mov [esp+1+var_1] cl +
mov ebp edx +
mov esi eax +
xor edi edi +
mov bl 1 +
cmp [esp+1+var_1] 0 +
jz loc_45590C  +
xor ebx ebx +
cmp bl 1 +
jnz loc_455938  +
mov eax esi +
mov edx ds:off_451800 +
call @System@@IsClass$qqrp14System@TObjectp17System@TMetaClass  +
test al al +
jz loc_455938  +
mov eax esi +
mov edx [eax] +
call dword ptr [edx+34h]  +
cmp ebp eax +
jnz loc_455938  +
mov eax esi +
call @Menus@TPopupMenu@GetHelpContext$qqrv  +
mov edi eax +
jmp loc_455959  +
mov ecx ebx +
mov edx ebp +
mov eax esi +
call @Menus@TMenu@FindItem$qqri19Menus@TFindItemKind  +
jmp loc_455948  +
mov eax [eax+64h] +
test eax eax +
jz loc_455952  +
cmp dword ptr [eax+54h] 0 +
jz loc_455945  +
test eax eax +
jz loc_455959  +
mov edi [eax+54h] +
mov eax edi +
pop edx  +
pop ebp  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
movzx edx dx +
push edi  +
mov esi eax +
xor ebx ebx +
mov cl 1 +
mov eax esi +
call @Menus@TMenu@FindItem$qqri19Menus@TFindItemKind  +
mov edi eax +
test edi edi +
jz loc_455A20  +
test byte ptr [edi+1Ch] 10h +
jnz loc_4559A7  +
mov eax edi +
call @Menus@TMenuItem@InitiateActions$qqrv  +
mov eax edi +
mov edx [eax] +
call dword ptr [edx+44h]  +
xor edx edx +
mov eax edi +
call @Menus@TMenuItem@InternalRethinkHotkeys$qqro  +
mov ebx eax +
xor edx edx +
mov eax edi +
call @Menus@TMenuItem@InternalRethinkLines$qqro  +
or bl al +
test bl bl +
jz loc_4559CF  +
mov eax edi +
call @Menus@TMenuItem@RebuildHandle$qqrv  +
mov eax off_4EA6C8 +
mov eax [eax] +
mov eax [eax+44h] +
test eax eax +
jz loc_455A1C  +
mov edx off_4EA6C8 +
mov ebx eax +
cmp byte ptr [ebx+22Fh] 2 +
jnz loc_455A1C  +
cmp edi [ebx+258h] +
jnz loc_455A1C  +
push 0  +
push 0  +
push 234h  +
mov eax [ebx+254h] +
push eax  +
call SendMessageA  +
test eax eax +
jz loc_455A1C  +
mov eax ebx +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call DrawMenuBar  +
mov bl 1 +
jmp loc_455A3F  +
test byte ptr [esi+1Ch] 10h +
jnz loc_455A3F  +
mov eax esi +
mov edx ds:off_451800 +
call @System@@IsClass$qqrp14System@TObjectp17System@TMetaClass  +
test al al +
jz loc_455A3F  +
mov eax [esi+34h] +
call @Menus@TMenuItem@InitiateActions$qqrv  +
mov eax ebx +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
cmp byte ptr [eax+40h] 0 +
jnz loc_455A57  +
cmp dword ptr [eax+48h] 0 +
jnz loc_455A57  +
xor eax eax +
retn   +
mov al 1 +
retn   +
***
jmp loc_455A62  +
mov eax [eax+64h] +
dec edx  +
test edx edx +
jle locret_455A6A  +
test eax eax +
jnz loc_455A5E  +
retn   +
***
add esp 0FFFFFFF8h +
push ebx  +
push esi  +
push edi  +
mov esi edx +
mov ebx eax +
mov [ebp+var_1] 1 +
mov eax [ebx] +
mov eax [eax+64h] +
mov [ebp+var_8] eax +
cmp [ebp+var_8] 0 +
jz loc_455A9E  +
mov eax [ebp+arg_0] +
push eax  +
lea edx [esi+1] +
lea eax [ebp+var_8] +
call @Menus@_16576  +
pop ecx  +
mov [ebp+var_1] al +
mov al [ebp+var_1] +
test al al +
jz loc_455BB3  +
sub al 3 +
jz loc_455BB3  +
cmp [ebp+var_1] 2 +
jnz loc_455B2D  +
mov eax [ebp+arg_0] +
cmp dword ptr [eax-4] 0 +
jz loc_455AD3  +
mov eax [ebp+arg_0] +
mov eax [eax-4] +
mov ax [eax+60h] +
mov edx [ebp+arg_0] +
cmp ax [edx-6] +
jz loc_455AFF  +
mov eax [ebp+arg_0] +
movzx edx word ptr [eax-6] +
mov eax [ebp+arg_0] +
mov eax [eax-0Ch] +
mov cl 2 +
call @Menus@TMenu@FindItem$qqri19Menus@TFindItemKind  +
mov edx [ebp+arg_0] +
mov [edx-4] eax +
mov eax [ebp+arg_0] +
cmp dword ptr [eax-4] 0 +
jnz loc_455AFF  +
mov [ebp+var_1] 3 +
jmp loc_455BB3  +
mov eax [ebp+arg_0] +
mov eax [eax-4] +
mov edx esi +
call @Menus@_16575  +
mov [ebx] eax +
cmp dword ptr [ebx] 0 +
jz loc_455BB3  +
mov eax [ebx] +
mov eax [eax+64h] +
cmp eax [ebp+var_8] +
jnz loc_455BB3  +
test esi esi +
jnz loc_455B2D  +
mov [ebp+var_1] 1 +
mov eax [ebx] +
cmp byte ptr [eax+39h] 0 +
jz loc_455BAF  +
xor eax eax +
push ebp  +
push offset loc_455B91  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov eax [ebp+arg_0] +
mov eax [eax-0Ch] +
test byte ptr [eax+1Ch] 10h +
jnz loc_455B56  +
mov eax [ebx] +
call @Menus@TMenuItem@InitiateActions$qqrv  +
mov eax [ebx] +
mov edx [eax] +
call dword ptr [edx+44h]  +
mov eax [ebp+arg_0] +
cmp dword ptr [eax-4] 0 +
jz loc_455B83  +
mov eax [ebx] +
mov edx [ebp+arg_0] +
cmp eax [edx-4] +
jz loc_455B87  +
mov eax [ebp+arg_0] +
mov eax [eax-4] +
mov ax [eax+60h] +
mov edx [ebp+arg_0] +
cmp ax [edx-6] +
jz loc_455B87  +
mov [ebp+var_1] 2 +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
jmp loc_455BB3  +
jmp @System@@HandleAnyException$qqrv  +
mov eax [ebp+8] +
mov edx [eax-0Ch] +
mov eax off_4EA6C8 +
mov eax [eax] +
call @TApplication@HandleException$qqrp7TObject  +
call @@DoneExcept$qqrv  +
jmp loc_455BB3  +
mov [ebp+var_1] 0 +
mov al [ebp+var_1] +
pop edi  +
pop esi  +
pop ebx  +
pop ecx  +
pop ecx  +
pop ebp  +
retn   +
***
add esp 0FFFFFFECh +
xor al 1 +
retn   +
***
add esp 0FFFFFF80h +
mov ebx eax +
mov eax off_4EA8CC +
cmp byte ptr [eax+0Dh] 0 +
jz loc_455D96  +
cmp dword ptr [ebx+38h] 0 +
jz loc_455D96  +
mov eax ebx +
mov edx [eax] +
call dword ptr [edx+34h]  +
mov esi eax +
mov [esp+80h+var_80] 2Ch +
mov [esp+80h+var_7C] 10h +
lea eax [esp+80h+var_50] +
mov [esp+80h+var_5C] eax +
mov [esp+80h+var_58] 50h +
push esp  +
push 0FFFFFFFFh  +
push 0  +
push esi  +
call GetMenuItemInfoA  +
test eax eax +
jz loc_455D96  +
mov eax ebx +
call @Menus@TMenu@IsRightToLeft$qqrv  +
mov edx [esp+80h+var_78] +
and edx 6000h +
cmp edx 1 +
sbb edx edx +
inc edx  +
cmp al dl +
jz loc_455D96  +
mov eax ebx +
call @Menus@TMenu@IsRightToLeft$qqrv  +
and eax 7Fh +
shl eax 0Dh +
lea eax [eax+eax*2] +
mov edx [esp+80h+var_78] +
and edx 0FFFF9FFFh +
or eax edx +
mov [esp+80h+var_78] eax +
mov [esp+80h+var_7C] 10h +
push esp  +
push 0FFFFFFFFh  +
push 0  +
push esi  +
call SetMenuItemInfoA  +
test eax eax +
jz loc_455D96  +
mov eax [ebx+38h] +
push eax  +
call DrawMenuBar  +
add esp 80h +
pop esi  +
pop ebx  +
retn   +
***
add esp 0FFFFFFF4h +
push ebx  +
push esi  +
mov [ebp+hMenu] eax +
mov eax [ebp+hMenu] +
push eax  +
call GetMenuItemCount  +
mov [ebp+var_C] eax +
mov eax [ebp+arg_0] +
lea ebx [eax-200h] +
mov eax [ebp+arg_0] +
add eax 0FFFFFFFBh +
mov [ebp+var_8] eax +
xor esi esi +
jmp loc_455E2D  +
push ebx  +
mov eax [ebp+var_8] +
sub eax ebx +
push eax  +
push 400h  +
mov eax [ebp+arg_0] +
mov eax [eax-204h] +
mov ecx esi +
mov edx [ebp+hMenu] +
call @Menus@TMenu@DoGetMenuString$qqruiuipciui  +
mov eax ebx +
call @Sysutils@StrEnd$qqrpxc  +
mov ebx eax +
push 400h  +
push esi  +
mov eax [ebp+hMenu] +
push eax  +
call GetMenuState  +
test al 2 +
jz loc_455E0F  +
mov byte ptr [ebx] 24h +
inc ebx  +
mov byte ptr [ebx] 0 +
test al 40h +
jz loc_455E1A  +
mov byte ptr [ebx] 40h +
inc ebx  +
mov byte ptr [ebx] 0 +
test al 1 +
jz loc_455E25  +
mov byte ptr [ebx] 23h +
inc ebx  +
mov byte ptr [ebx] 0 +
mov byte ptr [ebx] 3Bh +
inc ebx  +
mov byte ptr [ebx] 0 +
inc esi  +
cmp esi [ebp+var_C] +
jge loc_455E37  +
cmp ebx [ebp+var_8] +
jb loc_455DCD  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
add esp 0FFFFFDFCh +
push ebx  +
mov [ebp+var_204] eax +
xor ebx ebx +
mov byte ptr [ebp+var_200] 0 +
mov eax [ebp+var_204] +
cmp dword ptr [eax+38h] 0 +
jz loc_455E77  +
push ebp  +
mov eax [ebp+var_204] +
mov edx [eax] +
call dword ptr [edx+34h]  +
call @Menus@_16577  +
pop ecx  +
mov eax [ebp+var_204] +
cmp dword ptr [eax+3Ch] 0 +
jz loc_455EA0  +
mov eax [ebp+var_204] +
mov eax [eax+3Ch] +
call unknown_libname_550  +
lea edx [ebp+var_200] +
call @Sysutils@StrComp$qqrpxct1  +
test eax eax +
jz loc_455EBB  +
mov bl 1 +
mov eax [ebp+var_204] +
add eax 3Ch +
lea edx [ebp+var_200] +
mov ecx 200h +
call sub_4BB5C0  +
mov eax ebx +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
cmp dl [eax+40h] +
jz locret_455ED1  +
mov [eax+40h] dl +
call @Menus@TMenu@UpdateItems$qqrv  +
retn   +
***
add esp 0FFFFFFF8h +
mov [ebp+var_4] eax +
mov eax off_4EA8CC +
cmp byte ptr [eax+0Dh] 0 +
jz loc_455F4B  +
mov eax [ebp+var_4] +
mov al [eax+30h] +
mov [ebp+var_5] al +
mov edx [ebp+var_4] +
mov dl [edx+41h] +
mov [ebp+var_6] dl +
xor edx edx +
push ebp  +
push offset loc_455F44  +
push dword ptr fs:[edx]  +
mov fs:[edx] esp +
test al al +
jnz loc_455F18  +
mov dl 1 +
mov eax [ebp+var_4] +
call @Menus@TMenu@SetBiDiMode$qqr17Classes@TBiDiMode  +
jmp loc_455F22  +
xor edx edx +
mov eax [ebp+var_4] +
call @Menus@TMenu@SetBiDiMode$qqr17Classes@TBiDiMode  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_455F4B  +
mov dl [ebp+var_5] +
mov eax [ebp+var_4] +
call @Menus@TMenu@SetBiDiMode$qqr17Classes@TBiDiMode  +
mov eax [ebp+var_4] +
mov dl [ebp+var_6] +
mov [eax+41h] dl +
retn   +
jmp unknown_libname_539  +
jmp loc_455F2F  +
pop ecx  +
pop ecx  +
pop ebp  +
retn   +
***
mov esi edx +
jz loc_455F9D  +
push ecx  +
mov ebx eax +
mov ecx edx +
mov edx eax +
mov eax [ebx+54h] +
call dword ptr [ebx+50h]  +
pop ebx  +
retn   +
***
mov eax ebx +
call sub_4A4F70  +
xor ecx ecx +
xor edx edx +
mov eax ebx +
mov ebx [eax] +
call dword ptr [ebx+30h]  +
pop ebx  +
retn   +
***
push ebx  +
push esi  +
mov esi ecx +
mov ebx eax +
mov ax ds:word_455FEC +
and ax [ebx+1Ch] +
mov dx ds:word_455FF0 +
cmp dx ax +
jnz loc_455FE3  +
mov cl [ebp+arg_0] +
mov edx esi +
mov eax ebx +
mov ebx [eax] +
call dword ptr [ebx+30h]  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
cmp edx [eax+48h] +
jnz locret_455FFE  +
call @Menus@TMenu@UpdateItems$qqrv  +
retn   +
***
mov esi edx +
mov ebx eax +
mov eax [ebx+48h] +
test eax eax +
jz loc_456015  +
mov edx [ebx+44h] +
call @Imglist@TCustomImageList@UnRegisterChanges$qqrp19Imglist@TChangeLink  +
mov eax esi +
mov [ebx+48h] eax +
test eax eax +
jz loc_456030  +
mov edx [ebx+44h] +
call @Imglist@TCustomImageList@RegisterChanges$qqrp19Imglist@TChangeLink  +
mov edx ebx +
mov eax [ebx+48h] +
call @Classes@TComponent@FreeNotification$qqrp18Classes@TComponent  +
mov eax ebx +
call @Menus@TMenu@UpdateItems$qqrv  +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
mov ebx ecx +
mov esi edx +
mov edi eax +
mov ecx ebx +
mov edx esi +
mov eax edi +
call sub_4A4E3C  +
cmp esi [edi+48h] +
jnz loc_456063  +
cmp bl 1 +
jnz loc_456063  +
xor edx edx +
mov eax edi +
call @Menus@TMenu@SetImages$qqrp24Imglist@TCustomImageList  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov edx off_4EA8CC +
push esi  +
xor esi esi +
test dl 10h +
jz loc_4560A4  +
push ecx  +
push eax  +
call GetSubMenu  +
mov edx [ebp+arg_4] +
mov edx [edx-4] +
mov cl 1 +
xchg eax edx +
call @Menus@TMenu@FindItem$qqri19Menus@TFindItemKind  +
mov esi eax +
jmp loc_4560C0  +
push ecx  +
push eax  +
call GetMenuItemID  +
cmp eax 0FFFFFFFFh +
jz loc_4560C0  +
mov edx [ebp+arg_4] +
mov edx [edx-4] +
xor ecx ecx +
xchg eax edx +
call @Menus@TMenu@FindItem$qqri19Menus@TFindItemKind  +
mov esi eax +
test esi esi +
jz loc_4560D3  +
xor eax eax +
mov al [ebp+arg_0] +
mov edx [esi+30h] +
call @Forms@IsAccel$qqrusx17System@AnsiString  +
jmp loc_4560D5  +
xor eax eax +
pop esi  +
pop ebp  +
retn 4  +
***
push 0  +
push 0  +
push 0  +
push 0  +
push ebx  +
push esi  +
mov esi ecx +
mov [ebp+var_2] dx +
xor edx edx +
push ebp  +
push offset loc_4561B1  +
push dword ptr fs:[edx]  +
mov fs:[edx] esp +
test byte ptr [ebp+var_2] 10h +
jz loc_45611C  +
push esi  +
push eax  +
call GetSubMenu  +
mov edx dword ptr [ebp+arg_4] +
mov edx [edx-4] +
mov cl 1 +
xchg eax edx +
call @Menus@TMenu@FindItem$qqri19Menus@TFindItemKind  +
mov ebx eax +
jmp loc_456146  +
mov edx dword ptr [ebp+arg_4] +
mov edx [edx-4] +
mov cl 1 +
xchg eax edx +
call @Menus@TMenu@FindItem$qqri19Menus@TFindItemKind  +
mov ebx eax +
test ebx ebx +
jz loc_456146  +
mov eax ebx +
call @Menus@TMenuItem@GetCount$qqrv  +
cmp esi eax +
jge loc_456146  +
mov edx esi +
mov eax ebx +
call @Menus@TMenuItem@GetItem$qqri  +
mov ebx eax +
test ebx ebx +
jz loc_456194  +
cmp dword ptr [ebx+30h] 0 +
jz loc_456194  +
lea eax [ebp+var_8] +
mov dl [ebp+arg_0] +
call unknown_libname_544  +
mov eax [ebp+var_8] +
push eax  +
lea eax [ebp+var_C] +
mov edx [ebx+30h] +
mov dl [edx] +
call unknown_libname_544  +
mov eax [ebp+var_C] +
pop edx  +
call unknown_libname_462  +
test eax eax +
jnz loc_45618A  +
lea edx [ebp+var_10] +
mov eax [ebx+30h] +
call @Menus@GetHotkey$qqrx17System@AnsiString  +
cmp [ebp+var_10] 0 +
jz loc_45618E  +
xor eax eax +
jmp loc_456190  +
mov al 1 +
mov ebx eax +
jmp loc_456196  +
xor ebx ebx +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4561B8  +
lea eax [ebp+var_10] +
mov edx 3 +
call unknown_libname_541  +
retn   +
jmp unknown_libname_539  +
jmp loc_4561A3  +
mov eax ebx +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 4  +
***
add esp 0FFFFFFE8h +
push ecx  +
push ebx  +
push esi  +
push edi  +
mov esi ecx +
mov edi edx +
mov ebx eax +
mov eax ebx +
call @Menus@TMenu@IsOwnerDraw$qqrv  +
test al al +
jz loc_4563C8  +
xor eax eax +
mov [ebp+var_4] eax +
mov eax [ebp+uFlag] +
push eax  +
push esi  +
push edi  +
call GetMenuState  +
test al 10h +
jz loc_456381  +
push esi  +
push edi  +
call GetSubMenu  +
mov edi eax +
mov cl 1 +
mov edx edi +
mov eax ebx +
call @Menus@TMenu@FindItem$qqri19Menus@TFindItemKind  +
mov [ebp+var_4] eax +
jmp loc_45639D  +
push esi  +
push edi  +
call GetMenuItemID  +
mov esi eax +
cmp esi 0FFFFFFFFh +
jz loc_45639D  +
xor ecx ecx +
mov edx esi +
mov eax ebx +
call @Menus@TMenu@FindItem$qqri19Menus@TFindItemKind  +
mov [ebp+var_4] eax +
cmp [ebp+var_4] 0 +
jz loc_4563C4  +
mov eax [ebp+lpString] +
mov byte ptr [eax] 0 +
mov eax [ebp+var_4] +
mov edx [eax+30h] +
mov ecx [ebp+nMaxCount] +
mov eax [ebp+lpString] +
call sub_4A9244  +
mov eax [ebp+lpString] +
call @Sysutils@StrLen$qqrpxc  +
jmp loc_4563DB  +
xor eax eax +
jmp loc_4563DB  +
mov eax [ebp+uFlag] +
push eax  +
mov eax [ebp+nMaxCount] +
push eax  +
mov eax [ebp+lpString] +
push eax  +
push esi  +
push edi  +
call GetMenuStringA  +
pop edi  +
pop esi  +
pop ebx  +
pop ecx  +
pop ebp  +
retn 0Ch  +
***
cmp dl [eax+30h] +
jz locret_4563F5  +
mov [eax+30h] dl +
mov byte ptr [eax+41h] 0 +
call @Menus@TMenu@DoBiDiModeChanged$qqrv  +
retn   +
***
cmp dl [eax+41h] +
jz locret_456405  +
mov [eax+41h] dl +
call @Menus@TMenu@ParentBiDiModeChanged$qqrv  +
retn   +
***
cmp byte ptr [ebx+41h] 0 +
jz loc_45642B  +
mov eax [ebx+38h] +
call @Controls@FindControl$qqrui  +
test eax eax +
jz loc_45642B  +
mov dl [eax+5Fh] +
mov eax ebx +
call @Menus@TMenu@SetBiDiMode$qqr17Classes@TBiDiMode  +
mov byte ptr [ebx+41h] 1 +
pop ebx  +
retn   +
***
mov esi edx +
mov ebx eax +
cmp byte ptr [ebx+41h] 0 +
jz loc_456457  +
mov eax esi +
mov edx ds:off_471D9C +
call unknown_libname_534  +
mov dl [eax+5Fh] +
mov eax ebx +
call @Menus@TMenu@SetBiDiMode$qqr17Classes@TBiDiMode  +
mov byte ptr [ebx+41h] 1 +
pop esi  +
pop ebx  +
retn   +
***
mov eax [eax+34h] +
movzx eax byte ptr [eax+3Bh] +
mov al byte_4E60C0[eax] +
retn   +
***
and edx 7Fh +
mov eax [eax+34h] +
movzx eax byte ptr [eax+3Ch] +
mov al byte_4E60C0[eax] +
retn   +
***
and edx 7Fh +
cmp dl [eax+5Ch] +
jz locret_4564BA  +
mov [eax+5Ch] dl +
mov edx [eax+38h] +
test edx edx +
jz locret_4564BA  +
push 0  +
push 0  +
push 0B015h  +
push edx  +
call SendMessageA  +
retn   +
***
push ecx  +
test edx edx +
jz loc_456524  +
mov eax [eax+34h] +
mov edx [edx+34h] +
call @Menus@TMenuItem@MergeWith$qqrp15Menus@TMenuItem  +
retn   +
xor edx edx +
mov eax [eax+34h] +
call @Menus@TMenuItem@MergeWith$qqrp15Menus@TMenuItem  +
retn   +
***
test edx edx +
jz locret_456549  +
mov ecx [eax+34h] +
mov ecx [ecx+68h] +
cmp ecx [edx+34h] +
jnz locret_456549  +
xor edx edx +
mov eax [eax+34h] +
call @Menus@TMenuItem@MergeWith$qqrp15Menus@TMenuItem  +
retn   +
***
mov ebx eax +
push 0  +
xor ecx ecx +
xor edx edx +
mov eax ebx +
mov esi [eax] +
call dword ptr [esi+38h]  +
mov eax [ebx+38h] +
test eax eax +
jz loc_456573  +
push 0  +
push 0  +
push 0B015h  +
push eax  +
call SendMessageA  +
pop esi  +
pop ebx  +
retn   +
***
mov edx [eax+58h] +
push ecx  +
push ebx  +
push esi  +
push edi  +
mov [ebp+var_4] eax +
xor eax eax +
push ebp  +
push offset loc_4565B2  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov eax [ebp+var_4] +
mov ecx [eax] +
call dword ptr [ecx+10h]  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
jmp loc_4565CB  +
jmp @System@@HandleAnyException$qqrv  +
mov eax off_4EA6C8 +
mov eax [eax] +
mov edx [ebp-4] +
call @TApplication@HandleException$qqrp7TObject  +
call @@DoneExcept$qqrv  +
pop edi  +
pop esi  +
pop ebx  +
pop ecx  +
pop ebp  +
retn   +
***
add esp 0FFFFFFD0h +
push ebx  +
push esi  +
push edi  +
xor ecx ecx +
mov [ebp+var_30] ecx +
mov esi edx +
mov [ebp+var_4] eax +
xor eax eax +
push ebp  +
push offset loc_456B07  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov eax [esi] +
cmp eax 111h +
jg loc_45661E  +
jz loc_456636  +
sub eax 2Bh +
jz loc_456843  +
dec eax  +
jz loc_45694E  +
sub eax 27h +
jz loc_456741  +
jmp loc_456AD7  +
sub eax 117h +
jz loc_45666C  +
sub eax 8 +
jz loc_4566A1  +
dec eax  +
jz loc_456A8E  +
jmp loc_456AD7  +
mov eax [ebp+var_4] +
mov ebx [eax+8] +
dec ebx  +
test ebx ebx +
jl loc_456AD7  +
inc ebx  +
xor edi edi +
mov edx edi +
mov eax [ebp+var_4] +
call @Classes@TList@Get$qqri  +
mov dx [esi+4] +
call @Menus@TMenu@DispatchCommand$qqrus  +
test al al +
jnz loc_456AF1  +
inc edi  +
dec ebx  +
jnz loc_456648  +
jmp loc_456AD7  +
mov eax [ebp+var_4] +
mov ebx [eax+8] +
dec ebx  +
test ebx ebx +
jl loc_456AD7  +
inc ebx  +
xor edi edi +
mov edx edi +
mov eax [ebp+var_4] +
call @Classes@TList@Get$qqri  +
mov edx [esi+4] +
call @Menus@TMenu@DispatchPopup$qqrui  +
test al al +
jnz loc_456AF1  +
inc edi  +
dec ebx  +
jnz loc_45667E  +
jmp loc_456AD7  +
mov [ebp+var_D] 0 +
test byte ptr [esi+6] 10h +
jz loc_4566AF  +
mov [ebp+var_D] 1 +
mov eax [ebp+var_4] +
mov ebx [eax+8] +
dec ebx  +
test ebx ebx +
jl loc_45672E  +
inc ebx  +
xor edi edi +
cmp [ebp+var_D] 1 +
jnz loc_4566E3  +
mov eax [esi+8] +
test eax eax +
jz loc_4566DA  +
movzx edx word ptr [esi+4] +
push edx  +
push eax  +
call GetSubMenu  +
mov [ebp+var_8] eax +
jmp loc_4566EA  +
mov [ebp+var_8] 0FFFFFFFFh +
jmp loc_4566EA  +
movzx eax word ptr [esi+4] +
mov [ebp+var_8] eax +
mov edx edi +
mov eax [ebp+var_4] +
call @Classes@TList@Get$qqri  +
mov cl [ebp+var_D] +
mov edx [ebp+var_8] +
call @Menus@TMenu@FindItem$qqri19Menus@TFindItemKind  +
mov [ebp+var_C] eax +
cmp [ebp+var_C] 0 +
jz loc_45672A  +
lea edx [ebp+var_30] +
mov eax [ebp+var_C] +
mov eax [eax+58h] +
call sub_47362C  +
mov edx [ebp+var_30] +
mov eax off_4EA6C8 +
mov eax [eax] +
call @Forms@TApplication@SetHint$qqrx17System@AnsiString  +
jmp loc_456AF1  +
inc edi  +
dec ebx  +
jnz loc_4566BD  +
mov eax off_4EA6C8 +
mov eax [eax] +
xor edx edx +
call @Forms@TApplication@SetHint$qqrx17System@AnsiString  +
jmp loc_456AD7  +
mov eax [esi+8] +
mov [ebp+var_20] eax +
mov eax [ebp+var_4] +
mov ebx [eax+8] +
dec ebx  +
test ebx ebx +
jl loc_456AD7  +
inc ebx  +
xor edi edi +
mov edx edi +
mov eax [ebp+var_4] +
call @Classes@TList@Get$qqri  +
mov edx [eax] +
call dword ptr [edx+34h]  +
mov edx [ebp+var_20] +
cmp eax [edx+0Ch] +
jnz loc_456782  +
mov edx edi +
mov eax [ebp+var_4] +
call @Classes@TList@Get$qqri  +
mov eax [eax+34h] +
mov [ebp+var_C] eax +
jmp loc_45679C  +
mov edx edi +
mov eax [ebp+var_4] +
call @Classes@TList@Get$qqri  +
mov edx [ebp+var_20] +
mov edx [edx+0Ch] +
mov cl 1 +
call @Menus@TMenu@FindItem$qqri19Menus@TFindItemKind  +
mov [ebp+var_C] eax +
cmp [ebp+var_C] 0 +
jz loc_456836  +
mov edx edi +
mov eax [ebp+var_4] +
call @Classes@TList@Get$qqri  +
mov edx [ebp+var_20] +
mov edx [edx+8] +
mov cl 1 +
call sub_4558F4  +
test eax eax +
jnz loc_4567D8  +
mov edx edi +
mov eax [ebp+var_4] +
call @Classes@TList@Get$qqri  +
mov edx [ebp+var_20] +
mov edx [edx+0Ch] +
xor ecx ecx +
call sub_4558F4  +
mov edx off_4EA6CC +
mov edx [edx] +
mov edx [edx+6Ch] +
test edx edx +
jz loc_456AF1  +
test eax eax +
jnz loc_4567FA  +
mov eax off_4EA6CC +
mov eax [edx+158h] +
mov ecx off_4EA6CC +
test byte ptr [edx+228h] 8 +
jz loc_456823  +
mov edx off_4EA6C8 +
mov edx [edx] +
mov ecx eax +
mov eax 8 +
xchg eax edx +
call sub_46CD58  +
jmp loc_456AF1  +
mov edx off_4EA6C8 +
mov edx [edx] +
xchg eax edx +
call @Forms@TApplication@HelpContext$qqri  +
jmp loc_456AF1  +
inc edi  +
dec ebx  +
jnz loc_456759  +
jmp loc_456AD7  +
mov eax [esi+8] +
mov [ebp+var_24] eax +
mov eax [ebp+var_4] +
mov ebx [eax+8] +
dec ebx  +
test ebx ebx +
jl loc_456AD7  +
inc ebx  +
xor edi edi +
mov edx edi +
mov eax [ebp+var_4] +
call @Classes@TList@Get$qqri  +
mov edx [ebp+var_24] +
mov edx [edx+8] +
xor ecx ecx +
call @Menus@TMenu@FindItem$qqri19Menus@TFindItemKind  +
mov [ebp+var_C] eax +
cmp [ebp+var_C] 0 +
jz loc_456941  +
mov dl 1 +
mov eax ds:off_4713DC +
call @Graphics@TCanvas@$bctr$qqrv  +
mov [ebp+var_14] eax +
xor eax eax +
push ebp  +
push offset loc_45693A  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov eax [ebp+var_24] +
mov eax [eax+18h] +
push eax  +
call SaveDC  +
mov [ebp+var_18] eax +
xor eax eax +
push ebp  +
push offset loc_45691D  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov eax [ebp+var_24] +
mov edx [eax+18h] +
mov eax [ebp+var_14] +
call @Graphics@TCanvas@SetHandle$qqrui  +
mov eax off_4EA6CC +
mov eax [eax] +
mov edx [eax+88h] +
mov eax [ebp+var_14] +
call unknown_libname_155  +
mov eax [ebp+var_24] +
mov ax [eax+10h] +
push eax  +
mov eax [ebp+var_24] +
lea ecx [eax+1Ch] +
mov edx [ebp+var_14] +
mov eax [ebp+var_C] +
call @Menus@DrawMenuItem$qqrp15Menus@TMenuItemp16Graphics@TCanvasrx11Types@TRect47System@_Set$t18Windows@Windows__1$iuc$0$iuc$12_  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_456924  +
xor edx edx +
mov eax [ebp+var_14] +
call @Graphics@TCanvas@SetHandle$qqrui  +
mov eax [ebp+var_18] +
push eax  +
mov eax [ebp+var_24] +
mov eax [eax+18h] +
push eax  +
call RestoreDC  +
retn   +
jmp unknown_libname_539  +
jmp loc_456902  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_456AF1  +
mov eax [ebp+var_14] +
call @System@TObject@Free$qqrv  +
retn   +
jmp unknown_libname_539  +
jmp loc_456931  +
inc edi  +
dec ebx  +
jnz loc_45685B  +
jmp loc_456AD7  +
mov eax [esi+8] +
mov [ebp+var_28] eax +
mov eax [ebp+var_4] +
mov ebx [eax+8] +
dec ebx  +
test ebx ebx +
jl loc_456AD7  +
inc ebx  +
xor edi edi +
mov edx edi +
mov eax [ebp+var_4] +
call @Classes@TList@Get$qqri  +
mov edx [ebp+var_28] +
mov edx [edx+8] +
xor ecx ecx +
call @Menus@TMenu@FindItem$qqri19Menus@TFindItemKind  +
mov [ebp+var_C] eax +
cmp [ebp+var_C] 0 +
jz loc_456A84  +
mov eax [ebp+var_4] +
mov eax [eax+10h] +
push eax  +
call GetWindowDC  +
mov [ebp+hDC] eax +
xor eax eax +
push ebp  +
push offset loc_456A7D  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov dl 1 +
mov eax ds:off_4713DC +
call @Graphics@TCanvas@$bctr$qqrv  +
mov [ebp+var_14] eax +
xor eax eax +
push ebp  +
push offset loc_456A58  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov eax [ebp+hDC] +
push eax  +
call SaveDC  +
mov [ebp+var_18] eax +
xor eax eax +
push ebp  +
push offset loc_456A3B  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov edx [ebp+hDC] +
mov eax [ebp+var_14] +
call @Graphics@TCanvas@SetHandle$qqrui  +
mov eax off_4EA6CC +
mov eax [eax] +
mov edx [eax+88h] +
mov eax [ebp+var_14] +
call unknown_libname_155  +
mov eax [ebp+var_28] +
add eax 10h +
push eax  +
mov eax [ebp+var_28] +
lea ecx [eax+0Ch] +
mov edx [ebp+var_14] +
mov eax [ebp+var_C] +
mov ebx [eax] +
call dword ptr [ebx+38h]  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_456A42  +
xor edx edx +
mov eax [ebp+var_14] +
call @Graphics@TCanvas@SetHandle$qqrui  +
mov eax [ebp+var_18] +
push eax  +
mov eax [ebp+hDC] +
push eax  +
call RestoreDC  +
retn   +
jmp unknown_libname_539  +
jmp loc_456A23  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_456A5F  +
mov eax [ebp+var_14] +
call @System@TObject@Free$qqrv  +
retn   +
jmp unknown_libname_539  +
jmp loc_456A4F  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_456AF1  +
mov eax [ebp+hDC] +
push eax  +
mov eax [ebp+var_4] +
mov eax [eax+10h] +
push eax  +
call ReleaseDC  +
retn   +
jmp unknown_libname_539  +
jmp loc_456A6C  +
inc edi  +
dec ebx  +
jnz loc_456966  +
jmp loc_456AD7  +
mov eax [ebp+var_4] +
mov ebx [eax+8] +
dec ebx  +
test ebx ebx +
jl loc_456AD7  +
inc ebx  +
xor edi edi +
mov edx edi +
mov eax [ebp+var_4] +
call @Classes@TList@Get$qqri  +
mov [ebp+var_2C] eax +
mov eax [ebp+var_2C] +
mov edx [eax] +
call dword ptr [edx+34h]  +
cmp eax [esi+8] +
jz loc_456AC7  +
mov edx [esi+8] +
mov cl 1 +
mov eax [ebp+var_2C] +
call @Menus@TMenu@FindItem$qqri19Menus@TFindItemKind  +
test eax eax +
jz loc_456AD3  +
mov edx esi +
mov eax [ebp+var_2C] +
call @Menus@TMenu@ProcessMenuChar$qqrr20Messages@TWMMenuChar  +
jmp loc_456AF1  +
inc edi  +
dec ebx  +
jnz loc_456A9C  +
mov eax [esi+8] +
push eax  +
mov eax [esi+4] +
push eax  +
mov eax [esi] +
push eax  +
mov eax [ebp+var_4] +
mov eax [eax+10h] +
push eax  +
call DefWindowProcA  +
mov [esi+0Ch] eax +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_456B0E  +
lea eax [ebp+var_30] +
call unknown_libname_540  +
retn   +
jmp unknown_libname_539  +
jmp loc_456AFE  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
mov esi edx +
mov ebx eax +
cmp dword ptr [ebx+8] 0 +
jnz loc_456B32  +
push ebx  +
push offset @Menus@TPopupList@MainWndProc$qqrr17Messages@TMessage  +
call @Forms@AllocateHWnd$qqrynpqqrr17Messages@TMessage$v  +
mov [ebx+10h] eax +
mov edx esi +
mov eax ebx +
call @Classes@TList@Add$qqrpv  +
pop esi  +
pop ebx  +
retn   +
***
mov eax ebx +
call @Classes@TList@Remove$qqrpv  +
cmp dword ptr [ebx+8] 0 +
jnz loc_456B58  +
mov eax [ebx+10h] +
call @Forms@DeallocateHWnd$qqrui  +
pop ebx  +
retn   +
***
test dl dl +
call unknown_libname_536  +
mov ebx edx +
mov esi eax +
mov edx esi +
mov eax dword_4F1730 +
call sub_456B40  +
mov edx ebx +
and dl 0FCh +
mov eax esi +
call @Menus@TMenu@$bdtr$qqrv  +
test bl bl +
jle loc_456BFE  +
mov eax esi +
call @System@@ClassDestroy$qqrp14System@TObject  +
pop esi  +
pop ebx  +
retn   +
***
jz loc_456C14  +
mov ebx eax +
mov eax [ebx+74h] +
call dword ptr [ebx+70h]  +
pop ebx  +
retn   +
***
mov eax [eax+34h] +
mov eax [eax+54h] +
retn   +
***
mov eax [eax+34h] +
mov [eax+54h] edx +
retn   +
***
mov eax off_4EA8CC +
cmp byte ptr [eax+0Dh] 0 +
jz loc_456C6D  +
cmp byte ptr [ebx+41h] 0 +
jz loc_456C6D  +
lea eax [ebx+58h] +
call @Menus@_16417  +
test eax eax +
jz loc_456C58  +
mov dl [eax+5Fh] +
mov eax ebx +
call @Menus@TMenu@SetBiDiMode$qqr17Classes@TBiDiMode  +
mov byte ptr [ebx+41h] 1 +
jmp loc_456C6D  +
mov eax off_4EA6C8 +
mov eax [eax] +
mov dl [eax+34h] +
mov eax ebx +
call @Menus@TMenu@SetBiDiMode$qqr17Classes@TBiDiMode  +
mov byte ptr [ebx+41h] 1 +
pop ebx  +
retn   +
***
mov ecx off_4EA8CC +
cmp byte ptr [ecx+0Dh] 0 +
jz loc_456CB5  +
cmp byte ptr [eax+41h] 0 +
jz loc_456CAE  +
add eax 58h +
call @Menus@_16417  +
test eax eax +
jz loc_456C9E  +
mov si 0FFC8h +
call @System@@CallDynaInst$qqrv  +
mov edx eax +
jmp loc_456CB5  +
mov eax off_4EA6C8 +
mov eax [eax] +
call @Forms@TApplication@UseRightToLeftAlignment$qqrv  +
mov edx eax +
jmp loc_456CB5  +
cmp byte ptr [eax+30h] 1 +
setz dl  +
mov eax edx +
pop esi  +
retn   +
***
push edi  +
push edi  +
push ebp  +
mov ebp edx +
mov edi eax +
mov eax [edi+4] +
mov esi [eax+8] +
dec esi  +
test esi esi +
jl loc_456DA6  +
inc esi  +
xor ebx ebx +
mov eax [edi+4] +
mov edx ebx +
call @Classes@TList@Get$qqri  +
cmp ebp [eax] +
jnz loc_456DA2  +
mov eax [edi+4] +
mov edx ebx +
call @Classes@TList@Get$qqri  +
xor edx edx +
mov [eax] edx +
inc ebx  +
dec esi  +
jnz loc_456D86  +
pop ebp  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
add esp 0FFFFFFE8h +
push ebx  +
push esi  +
push edi  +
mov esi ecx +
lea edi [ebp+var_15] +
movs   +
movs   +
movs   +
movs   +
mov edi edx +
mov [ebp+var_4] eax +
mov eax off_4EA8BC +
cmp dword ptr [eax] 4 +
jg loc_456DE5  +
mov eax off_4EA8BC +
cmp dword ptr [eax] 4 +
jnz loc_456DE1  +
mov eax off_4EA8C0 +
cmp dword ptr [eax] 0 +
jg loc_456DE5  +
xor ebx ebx +
jmp loc_456DE7  +
mov bl 1 +
mov eax [ebp+var_4] +
mov si 0FFF2h +
call @System@@CallDynaInst$qqrv  +
mov edx ds:off_45151C +
call @System@@IsClass$qqrp14System@TObjectp17System@TMetaClass  +
mov [ebp+var_5] al +
test [ebp+arg_0] 1 +
jz loc_456E33  +
cmp [ebp+var_5] 0 +
jz loc_456E17  +
cmp [ebp+var_5] 0 +
jz loc_456E33  +
test bl bl +
jnz loc_456E33  +
mov edx 8000000Dh +
mov eax [edi+14h] +
call @Graphics@TBrush@SetColor$qqr15Graphics@TColor  +
mov edx 8000000Eh +
mov eax [edi+0Ch] +
call @Graphics@TFont@SetColor$qqr15Graphics@TColor  +
jmp loc_456E73  +
test bl bl +
jz loc_456E59  +
test [ebp+arg_0] 80h +
jz loc_456E59  +
mov edx 80000004h +
mov eax [edi+14h] +
call @Graphics@TBrush@SetColor$qqr15Graphics@TColor  +
mov edx 80000011h +
mov eax [edi+0Ch] +
call @Graphics@TFont@SetColor$qqr15Graphics@TColor  +
jmp loc_456E73  +
mov edx 80000004h +
mov eax [edi+14h] +
call @Graphics@TBrush@SetColor$qqr15Graphics@TColor  +
mov edx 80000007h +
mov eax [edi+0Ch] +
call @Graphics@TFont@SetColor$qqr15Graphics@TColor  +
mov ax word ptr [ebp+arg_0] +
push eax  +
mov al [ebp+var_5] +
push eax  +
lea ecx [ebp+var_15] +
mov edx edi +
mov eax [ebp+var_4] +
mov ebx [eax] +
call dword ptr [ebx+30h]  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 4  +
***
mov esi edx +
mov ebx eax +
mov eax esi +
mov edx ebx +
call unknown_libname_542  +
mov ebx 1 +
jmp loc_456F1C  +
mov eax [esi] +
mov al [eax+ebx-1] +
mov edx off_4EA8C4 +
mov ecx eax +
and ecx 0FFh +
bt [edx] ecx +
jnb loc_456EC6  +
inc ebx  +
jmp loc_456F1B  +
mov edx [esi] +
cmp al 26h +
jnz loc_456F1B  +
mov eax off_4EA8CC +
cmp byte ptr [eax+0Ch] 0 +
jz loc_456F0D  +
cmp ebx 1 +
jle loc_456F0D  +
mov eax [esi] +
call sub_4BB610  +
sub eax ebx +
cmp eax 2 +
jl loc_456F0D  +
mov eax [esi] +
cmp byte ptr [eax+ebx-2] 28h +
jnz loc_456F0D  +
mov eax [esi] +
cmp byte ptr [eax+ebx+1] 29h +
jnz loc_456F0D  +
mov edx ebx +
dec edx  +
mov eax esi +
mov ecx 4 +
call @System@@LStrDelete$qqrv  +
jmp loc_456F1B  +
mov eax esi +
mov ecx 1 +
mov edx ebx +
call @System@@LStrDelete$qqrv  +
inc ebx  +
mov eax [esi] +
call sub_4BB610  +
cmp ebx eax +
jle loc_456EAA  +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
push ebp  +
mov ebp edx +
mov esi eax +
mov eax ebp +
call unknown_libname_540  +
mov ebx 1 +
mov eax esi +
call sub_4BB610  +
mov edi eax +
cmp edi ebx +
jl loc_456F8A  +
mov eax off_4EA8C4 +
mov dl [esi+ebx-1] +
and edx 0FFh +
bt [eax] edx +
jnb loc_456F64  +
inc ebx  +
jmp loc_456F85  +
cmp byte ptr [esi+ebx-1] 26h +
jnz loc_456F85  +
mov eax edi +
sub eax ebx +
dec eax  +
jl loc_456F85  +
inc ebx  +
cmp byte ptr [esi+ebx-1] 26h +
jz loc_456F85  +
mov eax ebp +
mov dl [esi+ebx-1] +
call unknown_libname_544  +
inc ebx  +
cmp edi ebx +
jge loc_456F4D  +
pop ebp  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push 0  +
push 0  +
push ebx  +
push esi  +
mov esi edx +
mov ebx eax +
xor eax eax +
push ebp  +
push offset loc_456FE9  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
lea edx [ebp+var_4] +
mov eax esi +
call sub_456E94  +
mov eax [ebp+var_4] +
push eax  +
lea edx [ebp+var_8] +
mov eax ebx +
call sub_456E94  +
mov eax [ebp+var_8] +
pop edx  +
call @LibMain@_16446  +
mov ebx eax +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_456FF0  +
lea eax [ebp+var_8] +
mov edx 2 +
call unknown_libname_541  +
retn   +
jmp unknown_libname_539  +
jmp loc_456FDB  +
mov eax ebx +
pop esi  +
pop ebx  +
pop ecx  +
pop ecx  +
pop ebp  +
retn   +
***
xor eax eax +
push ebp  +
push offset loc_4570F0  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
inc dword_4F1738  +
jnz loc_4570E2  +
mov eax dword_4F1734 +
call @System@TObject@Free$qqrv  +
mov eax dword_4F1730 +
call @System@TObject@Free$qqrv  +
mov eax dword_4F173C +
call @System@TObject@Free$qqrv  +
mov eax offset unk_4E60CC +
mov ecx 12h +
mov edx ds:@$xp$13System@String +
call @System@@FinalizeArray$qqrpvt1ui  +
mov eax offset off_4E60B8 +
call unknown_libname_540  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4570F7  +
retn   +
jmp unknown_libname_539  +
jmp locret_4570EF  +
pop ebp  +
retn   +
***
sub dword_4F1738 1 +
jnb locret_457180  +
mov eax offset dword_456FF8 +
call @System@@InitResStringImports$qqrv  +
mov eax ds:off_471D9C +
call sub_49C374  +
mov eax ds:off_471D9C +
call sub_49C414  +
mov edx ds:off_471D9C +
mov eax ds:off_451004 +
call sub_49C3C0  +
mov edx ds:off_471D9C +
mov eax ds:off_451428 +
call sub_49C3C0  +
mov eax ds:off_451004 +
call sub_49C2B8  +
mov dl 1 +
mov eax ds:off_49A694 +
call @System@TObject@$bctr$qqrv  +
mov dword_4F173C eax +
mov dl 1 +
mov eax ds:off_451AA4 +
call @System@TObject@$bctr$qqrv  +
mov dword_4F1730 eax +
mov dl 1 +
mov eax ds:off_451B10 +
call sub_4A753C  +
mov dword_4F1734 eax +
retn   +
***
jmp dword ptr [ebp+edx*4+10044h]  +
***
push ecx  +
push ebx  +
push esi  +
mov ebx edx +
mov [ebp+var_4] eax +
mov eax ebx +
mov edx ds:off_45721C +
call @System@@IsClass$qqrp14System@TObjectp17System@TMetaClass  +
test al al +
jz loc_457EDA  +
mov eax [ebp+var_4] +
mov esi [eax+4] +
test esi esi +
jz loc_457E85  +
mov eax esi +
mov edx [eax] +
call dword ptr [edx+20h]  +
xor edx edx +
push ebp  +
push offset loc_457ED3  +
push dword ptr fs:[edx]  +
mov fs:[edx] esp +
mov esi ebx +
mov edx [esi+10h] +
mov eax [ebp+var_4] +
mov ecx [eax] +
call dword ptr [ecx+20h]  +
mov edx [esi+18h] +
mov eax [ebp+var_4] +
mov ecx [eax] +
call dword ptr [ecx+28h]  +
mov edx [esi+14h] +
mov eax [ebp+var_4] +
mov ecx [eax] +
call dword ptr [ecx+24h]  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_457EDA  +
mov eax [ebp+var_4] +
mov eax [eax+4] +
test eax eax +
jz locret_457ED2  +
mov edx [eax] +
call dword ptr [edx+24h]  +
retn   +
jmp unknown_libname_539  +
jmp loc_457EC3  +
pop esi  +
pop ebx  +
pop ecx  +
pop ebp  +
retn   +
***
mov edx [eax+0Ch] +
test edx edx +
jz locret_457EED  +
xchg eax edx +
mov ecx [eax] +
call dword ptr [ecx+1Ch]  +
retn   +
***
test dl dl +
mov esi edx +
mov ebx eax +
mov eax [ebx+10h] +
call sub_4BB610  +
test eax eax +
jle loc_457F4B  +
mov eax esi +
mov edx [ebx+10h] +
call unknown_libname_542  +
pop esi  +
pop ebx  +
retn   +
mov edx esi +
mov eax ebx +
call unknown_libname_576  +
pop esi  +
pop ebx  +
retn   +
***
mov esi edx +
mov ebx eax +
lea eax [ebx+10h] +
mov edx esi +
call unknown_libname_542  +
mov eax ebx +
call @Listactns@TListControlItem@Changed$qqrv  +
pop esi  +
pop ebx  +
retn   +
***
mov [eax+14h] edx +
call @Listactns@TListControlItem@Changed$qqrv  +
retn   +
***
mov [eax+18h] edx +
call @Listactns@TListControlItem@Changed$qqrv  +
retn   +
***
push edi  +
mov edi ecx +
mov esi edx +
mov ebx eax +
mov edx edi +
mov eax ebx +
call sub_458124  +
push eax  +
mov edx esi +
mov eax ebx +
call sub_458124  +
mov edx eax +
mov eax ebx +
pop ecx  +
mov ebx [eax] +
call dword ptr [ebx+28h]  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov eax ebx +
call sub_49D948  +
mov [eax+0Ch] ebx +
pop ebx  +
retn   +
***
mov esi edx +
mov ebx eax +
cmp byte ptr [ebx+1Dh] 0 +
jz loc_457FF2  +
mov eax ebx +
call sub_49DAB8  +
dec eax  +
jle loc_457FF2  +
push esi  +
mov eax ebx +
call sub_49DAB8  +
mov ecx eax +
dec ecx  +
xor edx edx +
mov eax ebx +
call unknown_libname_140  +
pop esi  +
pop ebx  +
retn   +
***
jz loc_45800F  +
push ecx  +
mov ebx eax +
mov ecx edx +
mov edx eax +
mov eax [ebx+24h] +
call dword ptr [ebx+20h]  +
pop ebx  +
retn   +
cmp byte ptr [eax+1Ch] 0 +
jz loc_458023  +
mov eax [ecx+10h] +
mov edx [edx+10h] +
xchg eax edx +
call unknown_libname_461  +
jmp loc_45802F  +
mov eax [ecx+10h] +
mov edx [edx+10h] +
xchg eax edx +
call unknown_libname_462  +
pop ebx  +
retn   +
***
push edi  +
push ebp  +
push ecx  +
mov edi ecx +
mov esi edx +
mov ebx eax +
mov edx esi +
mov eax ebx +
call sub_458124  +
mov ebp eax +
mov edx edi +
mov eax ebx +
call sub_458124  +
mov [esp+4+var_4] eax +
mov edx esi +
mov eax ebx +
call sub_458124  +
call @Classes@TCollectionItem@GetIndex$qqrv  +
mov esi eax +
mov edx edi +
mov eax ebx +
call sub_458124  +
call @Classes@TCollectionItem@GetIndex$qqrv  +
mov edx eax +
mov eax ebp +
mov ecx [eax] +
call dword ptr [ecx+14h]  +
mov edx esi +
mov eax [esp+4+var_4] +
mov ecx [eax] +
call dword ptr [ecx+14h]  +
pop edx  +
pop ebp  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
add esp 0FFFFFFF0h +
mov esi edx +
mov ebx eax +
mov edx esi +
mov eax ebx +
call sub_49DAC0  +
pop esi  +
pop ebx  +
retn   +
***
cmp dl [eax+1Dh] +
jz locret_45814E  +
mov [eax+1Dh] dl +
test dl dl +
jz locret_45814E  +
mov edx offset @ListActns@_16410 +
call @Listactns@TListControlItems@CustomSort$qqrpqqrp27Listactns@TListControlItemsii$i  +
retn   +
***
mov edx offset @ListActns@_16410 +
call @Listactns@TListControlItems@CustomSort$qqrpqqrp27Listactns@TListControlItemsii$i  +
retn   +
***
test dl dl +
jz loc_45816A  +
add esp 0FFFFFFF0h +
call unknown_libname_535  +
mov ebx edx +
mov esi eax +
xor edx edx +
mov eax esi +
call @Actnlist@TCustomAction@$bctr$qqrp18Classes@TComponent  +
mov dword ptr [esi+0C8h] 0FFFFFFFFh +
mov byte ptr [esi+60h] 0 +
mov dl 1 +
mov eax esi +
call @Actnlist@TCustomAction@SetEnabled$qqro  +
mov dl 1 +
mov eax esi +
call @Listactns@TCustomListAction@SetActive$qqrxo  +
mov eax esi +
test bl bl +
jz loc_4581AC  +
call sub_4BABC8  +
pop large dword ptr fs:0  +
add esp 0Ch +
mov eax esi +
pop esi  +
pop ebx  +
retn   +
***
add esp 0FFFFFFF8h +
push ebx  +
push esi  +
push edi  +
mov edi edx +
mov [ebp+var_4] eax +
mov eax [ebp+var_4] +
cmp byte ptr [eax+0A8h] 0 +
jnz loc_4582D4  +
mov eax [ebp+var_4] +
mov byte ptr [eax+0A8h] 1 +
xor eax eax +
push ebp  +
push offset loc_4582CD  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov eax edi +
mov edx ds:off_472FB8 +
call @System@@IsClass$qqrp14System@TObjectp17System@TMetaClass  +
test al al +
jz loc_458287  +
mov eax edi +
mov edx [eax] +
call dword ptr [edx+0C8h]  +
mov edx [ebp+var_4] +
mov [edx+0C8h] eax +
mov eax [ebp+var_4] +
mov eax [eax+50h] +
mov esi [eax+8] +
dec esi  +
test esi esi +
jl loc_458287  +
inc esi  +
xor ebx ebx +
mov eax [ebp+var_4] +
mov eax [eax+50h] +
mov edx ebx +
call @Classes@TList@Get$qqri  +
mov edx ds:off_457D64 +
call @System@@IsClass$qqrp14System@TObjectp17System@TMetaClass  +
test al al +
jz loc_458283  +
mov eax [ebp+var_4] +
mov eax [eax+50h] +
mov edx ebx +
call @Classes@TList@Get$qqri  +
cmp edi [eax+20h] +
jz loc_458283  +
mov eax edi +
mov edx ds:off_472FB8 +
call unknown_libname_534  +
mov [ebp+var_8] eax +
mov eax [ebp+var_8] +
mov edx [eax] +
call dword ptr [edx+0C8h]  +
push eax  +
mov eax [ebp+var_4] +
mov eax [eax+50h] +
mov edx ebx +
call @Classes@TList@Get$qqri  +
pop edx  +
mov ecx [eax] +
call dword ptr [ecx+8Ch]  +
inc ebx  +
dec esi  +
jnz loc_458223  +
mov eax [ebp+var_4] +
cmp word ptr [eax+0C2h] 0 +
jz loc_4582B5  +
mov eax edi +
mov edx ds:off_471D9C +
call unknown_libname_534  +
mov ecx eax +
mov ebx [ebp+var_4] +
mov edx [ebp+var_4] +
mov eax [ebx+0C4h] +
call dword ptr [ebx+0C0h]  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4582D4  +
mov eax [ebp+var_4] +
mov byte ptr [eax+0A8h] 0 +
retn   +
jmp unknown_libname_539  +
jmp loc_4582C2  +
pop edi  +
pop esi  +
pop ebx  +
pop ecx  +
pop ecx  +
pop ebp  +
retn   +
***
mov [esp+4+var_4] 0FFFFFFFFh +
cmp word ptr [eax+0BAh] 0 +
jz loc_458301  +
mov ecx esp +
mov ebx eax +
mov edx eax +
mov eax [ebx+0BCh] +
call dword ptr [ebx+0B8h]  +
mov eax [esp+4+var_4] +
pop edx  +
pop ebx  +
retn   +
***
mov eax ebx +
retn   +
***
mov eax ebx +
call sub_4A4F70  +
mov al [ebx+0A1h] +
test al al +
jz loc_458335  +
mov edx eax +
mov eax ebx +
call @Listactns@TCustomListAction@SetActive$qqrxo  +
mov eax [ebx+0ACh] +
test eax eax +
jz loc_458348  +
mov edx eax +
mov eax ebx +
call @Listactns@TCustomListAction@SetImages$qqrpx24Imglist@TCustomImageList  +
pop ebx  +
retn   +
***
add esp 0FFFFFFF0h +
push edi  +
push edi  +
push ebp  +
mov ebp edx +
mov ebx eax +
cmp byte ptr [ebx+0A0h] 0 +
jz loc_45850E  +
mov eax [ebx+50h] +
mov edi [eax+8] +
dec edi  +
test edi edi +
jl loc_458508  +
inc edi  +
xor esi esi +
mov edx esi +
mov eax [ebx+50h] +
call @Classes@TList@Get$qqri  +
mov edx ds:off_457D64 +
call @System@@IsClass$qqrp14System@TObjectp17System@TMetaClass  +
test al al +
jz loc_458504  +
mov edx esi +
mov eax [ebx+50h] +
call @Classes@TList@Get$qqri  +
mov edx ebp +
mov ecx [eax] +
call dword ptr [ecx+8Ch]  +
inc esi  +
dec edi  +
jnz loc_4584D7  +
mov [ebx+0C8h] ebp +
pop ebp  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push ecx  +
push edi  +
push ebp  +
add esp 0FFFFFFF0h +
mov [esp+10h+var_C] cl +
mov [esp+10h+var_10] edx +
mov esi eax +
mov al [esp+10h+var_C] +
sub al 1 +
jb loc_45858D  +
dec al  +
jz loc_458684  +
jmp loc_45870F  +
mov eax [esi+28h] +
test eax eax +
jz loc_45870F  +
cmp byte ptr [eax+0A0h] 0 +
jz loc_45870F  +
mov eax [eax+50h] +
mov ebx [eax+8] +
dec ebx  +
test ebx ebx +
jl loc_45870F  +
inc ebx  +
xor edi edi +
mov eax [esi+28h] +
mov eax [eax+50h] +
mov edx edi +
call @Classes@TList@Get$qqri  +
mov ebp eax +
mov eax [ebp+20h] +
mov edx ds:off_486590 +
call @System@@IsClass$qqrp14System@TObjectp17System@TMetaClass  +
test al al +
jz loc_458624  +
mov eax [ebp+20h] +
mov edx ds:off_486590 +
call unknown_libname_534  +
mov eax [eax+284h] +
call @Comctrls@TComboExItems@Add$qqrv  +
mov [esp+10h+var_8] eax +
mov eax [esp+10h+var_10] +
mov edx [eax+10h] +
mov eax [esp+10h+var_8] +
mov ecx [eax] +
call dword ptr [ecx+20h]  +
mov eax [esp+10h+var_10] +
mov edx [eax+18h] +
mov eax [esp+10h+var_8] +
mov ecx [eax] +
call dword ptr [ecx+28h]  +
mov eax [esp+10h+var_10] +
mov edx [eax+14h] +
mov eax [esp+10h+var_8] +
mov ecx [eax] +
call dword ptr [ecx+24h]  +
jmp loc_458677  +
mov eax [ebp+20h] +
mov edx ds:off_4848D8 +
call @System@@IsClass$qqrp14System@TObjectp17System@TMetaClass  +
test al al +
jz loc_458677  +
mov eax [ebp+20h] +
mov eax [eax+22Ch] +
call unknown_libname_359  +
mov [esp+10h+var_4] eax +
mov eax [esp+10h+var_10] +
mov edx [eax+10h] +
mov eax [esp+10h+var_4] +
call @Comctrls@TListItem@SetCaption$qqrx17System@AnsiString  +
mov eax [esp+10h+var_10] +
mov ecx [eax+18h] +
xor edx edx +
mov eax [esp+10h+var_4] +
call @Comctrls@TListItem@SetImage$qqrii  +
mov eax [esp+10h+var_10] +
mov edx [eax+14h] +
mov eax [esp+10h+var_4] +
call @Comctrls@TListItem@SetData$qqrpv  +
inc edi  +
dec ebx  +
jnz loc_4585B7  +
jmp loc_45870F  +
mov eax [esi+28h] +
test eax eax +
jz loc_45870F  +
cmp byte ptr [eax+0A0h] 0 +
jz loc_45870F  +
mov eax [eax+50h] +
mov ebx [eax+8] +
dec ebx  +
test ebx ebx +
jl loc_45870F  +
inc ebx  +
xor edi edi +
mov eax [esi+28h] +
mov eax [eax+50h] +
mov edx edi +
call @Classes@TList@Get$qqri  +
mov ebp eax +
mov eax [ebp+20h] +
mov edx ds:off_486590 +
call @System@@IsClass$qqrp14System@TObjectp17System@TMetaClass  +
test al al +
jz loc_4586E1  +
mov eax [esp+10h+var_10] +
call @Classes@TCollectionItem@GetIndex$qqrv  +
mov edx eax +
mov eax [ebp+20h] +
mov eax [eax+23Ch] +
mov ecx [eax] +
call dword ptr [ecx+48h]  +
jmp loc_45870B  +
mov eax [ebp+20h] +
mov edx ds:off_4848D8 +
call @System@@IsClass$qqrp14System@TObjectp17System@TMetaClass  +
test al al +
jz loc_45870B  +
mov eax [esp+10h+var_10] +
call @Classes@TCollectionItem@GetIndex$qqrv  +
mov edx eax +
mov eax [ebp+20h] +
mov eax [eax+22Ch] +
call sub_48CF38  +
inc edi  +
dec ebx  +
jnz loc_4586A6  +
add esp 10h +
pop ebp  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
push ebp  +
push ecx  +
mov ebx edx +
mov edi eax +
mov edx ebx +
mov eax edi +
call nullsub_13  +
mov eax [edi+28h] +
test eax eax +
jz loc_45882B  +
test ebx ebx +
jz loc_45882B  +
cmp byte ptr [eax+0A0h] 0 +
jz loc_45882B  +
cmp byte ptr [eax+0B0h] 0 +
jnz loc_45882B  +
mov eax [eax+50h] +
mov ebp [eax+8] +
dec ebp  +
test ebp ebp +
jl loc_45882B  +
inc ebp  +
mov [esp+4+var_4] 0 +
mov eax [edi+28h] +
mov eax [eax+50h] +
mov edx [esp+4+var_4] +
call @Classes@TList@Get$qqri  +
mov esi eax +
mov eax [esi+20h] +
mov edx ds:off_486590 +
call @System@@IsClass$qqrp14System@TObjectp17System@TMetaClass  +
test al al +
jz loc_4587D6  +
mov eax [esi+20h] +
mov edx ds:off_486590 +
call unknown_libname_534  +
mov esi eax +
mov eax ebx +
call @Classes@TCollectionItem@GetIndex$qqrv  +
mov edx eax +
mov eax [esi+284h] +
call sub_458124  +
mov esi eax +
mov edx [ebx+10h] +
mov eax esi +
mov ecx [eax] +
call dword ptr [ecx+20h]  +
mov edx [ebx+18h] +
mov eax esi +
mov ecx [eax] +
call dword ptr [ecx+28h]  +
mov edx [ebx+14h] +
mov eax esi +
mov ecx [eax] +
call dword ptr [ecx+24h]  +
jmp loc_458821  +
mov eax [esi+20h] +
mov edx ds:off_4848D8 +
call @System@@IsClass$qqrp14System@TObjectp17System@TMetaClass  +
test al al +
jz loc_458821  +
mov eax ebx +
call @Classes@TCollectionItem@GetIndex$qqrv  +
mov edx eax +
mov eax [esi+20h] +
mov eax [eax+22Ch] +
call @Comctrls@TListItems@GetItem$qqri  +
mov esi eax +
mov edx [ebx+10h] +
mov eax esi +
call @Comctrls@TListItem@SetCaption$qqrx17System@AnsiString  +
mov ecx [ebx+18h] +
xor edx edx +
mov eax esi +
call @Comctrls@TListItem@SetImage$qqrii  +
mov edx [ebx+14h] +
mov eax esi +
call @Comctrls@TListItem@SetData$qqrpv  +
inc [esp+4+var_4]  +
dec ebp  +
jnz loc_45876E  +
pop edx  +
pop ebp  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push ecx  +
push ebx  +
push esi  +
test dl dl +
jz loc_458846  +
add esp 0FFFFFFF0h +
call unknown_libname_535  +
mov [ebp+var_1] dl +
mov ebx eax +
xor edx edx +
mov eax ebx +
call @Listactns@TCustomListAction@$bctr$qqrp18Classes@TComponent  +
mov eax ebx +
mov edx [eax] +
call dword ptr [edx+60h]  +
push eax  +
mov ecx ebx +
mov dl 1 +
mov eax ds:off_4579D4 +
call sub_49DE00  +
mov esi eax +
mov [ebx+0D0h] esi +
mov [esi+28h] ebx +
mov eax ebx +
cmp [ebp+var_1] 0 +
jz loc_45888C  +
call sub_4BABC8  +
pop large dword ptr fs:0  +
add esp 0Ch +
mov eax ebx +
pop esi  +
pop ebx  +
pop ecx  +
pop ebp  +
retn   +
***
call unknown_libname_536  +
mov eax [eax+0D0h] +
push edi  +
push ecx  +
mov [esp+4+var_4] ecx +
mov esi edx +
mov edi eax +
test esi esi +
jl loc_4588EE  +
mov eax [edi+0D0h] +
call sub_49DAB8  +
cmp esi eax +
jl loc_4588F2  +
xor ebx ebx +
jmp loc_4588F4  +
mov bl 1 +
test bl bl +
jz loc_45892A  +
mov edx esi +
mov eax [edi+0D0h] +
call sub_458124  +
mov edx eax +
mov eax [esp+4+var_4] +
mov ecx [eax] +
call dword ptr [ecx+8]  +
cmp word ptr [edi+0DAh] 0 +
jz loc_45892A  +
push esp  +
mov ecx esi +
mov edx edi +
mov eax [edi+0DCh] +
call dword ptr [edi+0D8h]  +
mov eax ebx +
pop edx  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
retn   +
***
push edi  +
mov eax [esi+0D0h] +
push edi  +
mov edi ecx +
mov esi edx +
mov ebx eax +
mov edx esi +
mov eax [ebx+0D0h] +
call sub_458124  +
mov edx edi +
mov ecx [eax] +
call dword ptr [ecx+20h]  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov eax [ebx+10h] +
mov edx ds:off_45752C +
call @System@@IsClass$qqrp14System@TObjectp17System@TMetaClass  +
pop ebx  +
retn   +
***
mov ebx eax +
mov esi [ebx+10h] +
mov eax esi +
mov edx ds:off_45752C +
call @System@@IsClass$qqrp14System@TObjectp17System@TMetaClass  +
test al al +
jz loc_4589C9  +
cmp dword ptr [esi+0A4h] 0 +
jnz loc_4589CE  +
xor eax eax +
pop esi  +
pop ebx  +
retn   +
mov al 1 +
pop esi  +
pop ebx  +
retn   +
***
mov ebx eax +
mov ebx edx +
mov esi eax +
test bl bl +
jnz loc_458A43  +
mov ebx [esi+20h] +
mov eax ebx +
mov edx ds:off_472FB8 +
call @System@@IsClass$qqrp14System@TObjectp17System@TMetaClass  +
test al al +
jz loc_458A7E  +
mov eax ebx +
mov edx [eax] +
call dword ptr [edx+0D4h]  +
pop esi  +
pop ebx  +
retn   +
test bl bl +
jz loc_458A65  +
mov eax [esi+10h] +
mov edx ds:off_45752C +
call @System@@IsClass$qqrp14System@TObjectp17System@TMetaClass  +
test al al +
jz loc_458A65  +
mov eax [esi+10h] +
cmp byte ptr [eax+0A0h] 0 +
jz loc_458A7E  +
mov eax [esi+10h] +
mov edx ds:off_45752C +
call @System@@IsClass$qqrp14System@TObjectp17System@TMetaClass  +
test al al +
jz loc_458A7E  +
mov eax esi +
call @Listactns@TListActionLink@RefreshControl$qqrv  +
pop esi  +
pop ebx  +
retn   +
***
add esp 0FFFFFFF0h +
push ebx  +
push esi  +
push edi  +
xor edx edx +
mov [ebp+var_4] edx +
mov esi eax +
xor eax eax +
push ebp  +
push offset loc_458BCB  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov eax [esi+10h] +
mov edx ds:off_45752C +
call @System@@IsClass$qqrp14System@TObjectp17System@TMetaClass  +
test al al +
jz loc_458BB5  +
mov ebx [esi+20h] +
mov eax ebx +
mov edx ds:off_472FB8 +
call @System@@IsClass$qqrp14System@TObjectp17System@TMetaClass  +
test al al +
jz loc_458ADA  +
mov eax ebx +
mov edx [eax] +
call dword ptr [edx+0D4h]  +
mov ebx [esi+10h] +
mov eax ebx +
mov edx ds:off_457A60 +
call @System@@IsClass$qqrp14System@TObjectp17System@TMetaClass  +
test al al +
jz loc_458B50  +
mov eax ebx +
mov edx ds:off_457A60 +
call unknown_libname_534  +
mov edi eax +
mov eax edi +
mov edx [eax] +
call dword ptr [edx+54h]  +
dec eax  +
test eax eax +
jl loc_458BB5  +
inc eax  +
mov [ebp+var_10] eax +
xor ebx ebx +
mov eax [edi+0D0h] +
mov edx ebx +
call sub_458124  +
mov ecx eax +
mov edx ebx +
mov eax edi +
call @Listactns@TStaticListAction@GetItem$qqrxip26Listactns@TListControlItem  +
test al al +
jz loc_458B48  +
mov eax [edi+0D0h] +
mov edx ebx +
call sub_458124  +
mov edx eax +
mov eax esi +
mov ecx [eax] +
call dword ptr [ecx+90h]  +
inc ebx  +
dec [ebp+var_10]  +
jnz loc_458B13  +
jmp loc_458BB5  +
mov eax ebx +
mov edx ds:off_457694 +
call @System@@IsClass$qqrp14System@TObjectp17System@TMetaClass  +
test al al +
jz loc_458BB5  +
mov eax ebx +
mov edx [eax] +
call dword ptr [edx+54h]  +
dec eax  +
test eax eax +
jl loc_458BB5  +
inc eax  +
mov [ebp+var_10] eax +
xor ebx ebx +
mov eax [esi+10h] +
mov edx ds:off_457694 +
call unknown_libname_534  +
mov edi eax +
lea eax [ebp+var_8] +
push eax  +
lea eax [ebp+var_C] +
push eax  +
lea ecx [ebp+var_4] +
mov edx ebx +
mov eax edi +
call @Listactns@TVirtualListAction@GetItem$qqrxir17System@AnsiStringrirpv  +
test al al +
jz loc_458BAF  +
mov eax [ebp+var_C] +
push eax  +
mov ecx [ebp+var_8] +
mov edx [ebp+var_4] +
mov eax esi +
mov edi [eax] +
call dword ptr [edi+94h]  +
inc ebx  +
dec [ebp+var_10]  +
jnz loc_458B73  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_458BD2  +
lea eax [ebp+var_4] +
call unknown_libname_540  +
retn   +
jmp unknown_libname_539  +
jmp loc_458BC2  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
xor eax eax +
push ebp  +
push offset loc_458BFF  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_458C06  +
retn   +
jmp unknown_libname_539  +
jmp locret_458BFE  +
pop ebp  +
retn 4  +
***
push edi  +
mov edi edx +
mov ebx eax +
mov esi [ebx+20h] +
mov eax esi +
mov edx ds:off_472FB8 +
call @System@@IsClass$qqrp14System@TObjectp17System@TMetaClass  +
test al al +
jz loc_458C3E  +
mov eax esi +
mov edx ds:off_472FB8 +
call unknown_libname_534  +
mov edx edi +
mov ecx [eax] +
call dword ptr [ecx+0CCh]  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
xor eax eax +
push ebp  +
push offset loc_458C69  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
inc dword_4F1740  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_458C70  +
retn   +
jmp unknown_libname_539  +
jmp locret_458C68  +
pop ebp  +
retn   +
***
sub dword_4F1740 1 +
retn   +
***
test eax eax +
jz locret_4599CA  +
cmp eax dword_4F1744 +
jz locret_4599CA  +
push eax  +
call DeleteObject  +
retn   +
***
mov ecx edx +
mov edx eax +
xor eax eax +
rol ax 5 +
xor al [edx] +
inc edx  +
dec ecx  +
jnz loc_459A32  +
retn   +
***
test dl dl +
jz loc_459A4E  +
add esp 0FFFFFFF0h +
call unknown_libname_535  +
mov ebx edx +
mov esi eax +
mov [esi+20h] cx +
lea eax [esi+8] +
push eax  +
call InitializeCriticalSection  +
mov eax esi +
test bl bl +
jz loc_459A74  +
call sub_4BABC8  +
pop large dword ptr fs:0  +
add esp 0Ch +
mov eax esi +
pop esi  +
pop ebx  +
retn   +
***
call unknown_libname_536  +
mov ebx edx +
mov esi eax +
lea eax [esi+8] +
push eax  +
call DeleteCriticalSection  +
test bl bl +
jle loc_459A9B  +
mov eax esi +
call @System@@ClassDestroy$qqrp14System@TObject  +
pop esi  +
pop ebx  +
retn   +
***
add eax 8 +
push eax  +
call EnterCriticalSection  +
retn   +
***
add eax 8 +
push eax  +
call LeaveCriticalSection  +
retn   +
***
add esp 0FFFFFFF8h +
add esp 0FFFFFFF0h +
add esp 0FFFFFFF8h +
push ebx  +
push esi  +
push edi  +
mov [ebp+var_8] ecx +
mov ebx edx +
mov [ebp+var_4] eax +
mov eax [ebp+var_4] +
call unknown_libname_144  +
xor eax eax +
push ebp  +
push offset loc_459CB5  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov edi [ebx+10h] +
mov edx [ebp+var_8] +
mov eax [ebp+var_4] +
call sub_459AB8  +
mov esi eax +
mov [ebx+10h] esi +
cmp edi esi +
jz loc_459C95  +
mov eax ebx +
mov si 0FFFDh +
call @System@@CallDynaInst$qqrv  +
mov edx edi +
mov eax [ebp+var_4] +
call sub_459B9C  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_459CBC  +
mov eax [ebp+var_4] +
call sub_459AAC  +
retn   +
jmp unknown_libname_539  +
jmp loc_459CAC  +
pop edi  +
pop esi  +
pop ebx  +
pop ecx  +
pop ecx  +
pop ebp  +
retn   +
***
push ecx  +
push ebx  +
push esi  +
push edi  +
mov edi ecx +
mov esi edx +
mov [ebp+var_4] eax +
mov eax [ebp+var_4] +
call unknown_libname_144  +
xor eax eax +
push ebp  +
push offset loc_459D20  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov ebx [esi+10h] +
cmp edi ebx +
jz loc_459D0A  +
inc dword ptr [edi+4]  +
mov [esi+10h] edi +
mov eax esi +
mov si 0FFFDh +
call @System@@CallDynaInst$qqrv  +
mov edx ebx +
mov eax [ebp+var_4] +
call sub_459B9C  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_459D27  +
mov eax [ebp+var_4] +
call sub_459AAC  +
retn   +
jmp unknown_libname_539  +
jmp loc_459D17  +
pop edi  +
pop esi  +
pop ebx  +
pop ecx  +
pop ebp  +
retn   +
***
push ecx  +
push ebx  +
push esi  +
mov [ebp+var_4] eax +
mov eax [ebp+var_4] +
call unknown_libname_144  +
xor edx edx +
push ebp  +
push offset loc_459D8F  +
push dword ptr fs:[edx]  +
mov fs:[edx] esp +
mov eax [ebp+var_4] +
mov ebx [eax+4] +
test ebx ebx +
jz loc_459D79  +
mov esi ebx +
mov eax [esi+8] +
test eax eax +
jz loc_459D73  +
cmp dword ptr [esi+14h] 0 +
jge loc_459D73  +
push eax  +
call DeleteObject  +
xor eax eax +
mov [esi+8] eax +
mov ebx [ebx] +
test ebx ebx +
jnz loc_459D59  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_459D96  +
mov eax [ebp+var_4] +
call sub_459AAC  +
retn   +
jmp unknown_libname_539  +
jmp loc_459D86  +
pop esi  +
pop ebx  +
pop ecx  +
pop ebp  +
retn   +
***
add esp 0FFFFFFF8h +
push ebx  +
push esi  +
xor eax eax +
mov [ebp+var_4] eax +
mov eax dword_4F179C +
call @Mxarrays@TThreadCustomArray@LockArray$qqrv  +
mov [ebp+var_8] eax +
xor eax eax +
push ebp  +
push offset loc_459E39  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
jmp loc_459DE4  +
mov edx [ebp+var_4] +
mov eax [ebp+var_8] +
call @Classes@TList@Get$qqri  +
mov ebx eax +
mov eax ebx +
call @Graphics@TCanvas@Lock$qqrv  +
inc [ebp+var_4]  +
mov eax ebx +
call @Graphics@TCanvas@DeselectHandles$qqrv  +
mov eax [ebp+var_8] +
mov eax [eax+8] +
cmp eax [ebp+var_4] +
jg loc_459DC6  +
mov eax dword_4F1794 +
call @Graphics@_16469_0  +
mov eax dword_4F1798 +
call @Graphics@_16469_0  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_459E40  +
mov ebx [ebp+var_4] +
dec ebx  +
test ebx ebx +
jl loc_459E2E  +
inc ebx  +
xor esi esi +
mov edx esi +
mov eax [ebp+var_8] +
call @Classes@TList@Get$qqri  +
call @Graphics@TCanvas@Unlock$qqrv  +
inc esi  +
dec ebx  +
jnz loc_459E1B  +
mov eax dword_4F179C +
call sub_49D170  +
retn   +
jmp unknown_libname_539  +
jmp loc_459E10  +
pop esi  +
pop ebx  +
pop ecx  +
pop ecx  +
pop ebp  +
retn   +
***
test eax eax +
call sub_49C664  +
retn   +
***
call @Classes@IdentToInt$qqrx17System@AnsiStringripx22Classes@TIdentMapEntryxi  +
retn   +
***
jz loc_45A2CA  +
mov edx [eax+14h] +
test edx edx +
jz locret_45A2D9  +
push edx  +
call EnterCriticalSection  +
retn   +
***
mov edx [eax+14h] +
test edx edx +
jz locret_45A2E9  +
push edx  +
call LeaveCriticalSection  +
retn   +
***
push 11h  +
mov ecx offset unk_4E6374 +
call sub_49C664  +
retn   +
***
push 11h  +
mov ecx offset unk_4E6374 +
call @Classes@IdentToInt$qqrx17System@AnsiStringripx22Classes@TIdentMapEntryxi  +
retn   +
***
push edi  +
add esp 0FFFFFFA0h +
mov ebx edx +
mov esi eax +
push esi  +
mov edi ebx +
mov esi offset dword_4E61A4 +
mov ecx 0Bh +
movs   +
pop esi  +
test esi esi +
jz loc_45A56B  +
push esp  +
push 3Ch  +
push esi  +
call GetObjectA  +
test eax eax +
jz loc_45A56B  +
mov eax [esp+60h+var_60] +
mov [ebx+4] eax +
cmp [esp+60h+var_50] 2BCh +
jl loc_45A503  +
or byte ptr [ebx+9] 1 +
cmp [esp+60h+var_4C] 1 +
jnz loc_45A50E  +
or byte ptr [ebx+9] 2 +
cmp [esp+60h+var_4B] 1 +
jnz loc_45A519  +
or byte ptr [ebx+9] 4 +
cmp [esp+60h+var_4A] 1 +
jnz loc_45A524  +
or byte ptr [ebx+9] 8 +
mov al [esp+60h+var_49] +
mov [ebx+0Ah] al +
lea eax [esp+60h+var_24] +
lea edx [esp+60h+var_44] +
mov ecx 20h +
call @System@@_CLenToPasStr$qqrp28System@_SmallString$iuc$255_pxci  +
lea edx [esp+60h+var_24] +
lea eax [ebx+0Bh] +
mov cl 1Fh +
call sub_4B9FB8  +
mov al [esp+60h+var_45] +
and al 0Fh +
dec al  +
jz loc_45A55F  +
dec al  +
jnz loc_45A565  +
mov byte ptr [ebx+8] 1 +
jmp loc_45A569  +
mov byte ptr [ebx+8] 2 +
jmp loc_45A569  +
mov byte ptr [ebx+8] 0 +
mov [ebx] esi +
add esp 60h +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
test dl dl +
call unknown_libname_536  +
mov ebx edx +
mov esi eax +
mov edx [esi+10h] +
mov eax dword_4F1790 +
call sub_459B9C  +
test bl bl +
jle loc_45A5EB  +
mov eax esi +
call @System@@ClassDestroy$qqrp14System@TObject  +
pop esi  +
pop ebx  +
retn   +
***
mov eax ebx +
call @Graphics@TGraphicsObject@Changed$qqrv  +
cmp dword ptr [ebx+20h] 0 +
jz loc_45A608  +
mov eax [ebx+20h] +
mov edx [eax] +
call dword ptr [edx+0Ch]  +
pop ebx  +
retn   +
***
add esp 0FFFFFFF8h +
push ebx  +
mov [ebp+var_8] edx +
mov [ebp+var_4] eax +
mov eax [ebp+var_8] +
mov edx ds:off_459130 +
call @System@@IsClass$qqrp14System@TObjectp17System@TMetaClass  +
test al al +
jz loc_45A6CE  +
mov eax [ebp+var_4] +
call @Graphics@TGraphicsObject@Lock$qqrv  +
xor eax eax +
push ebp  +
push offset loc_45A6C7  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov ebx [ebp+var_8] +
mov eax ebx +
call @Graphics@TGraphicsObject@Lock$qqrv  +
xor eax eax +
push ebp  +
push offset loc_45A6AA  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov ecx [ebx+10h] +
mov edx [ebp+var_4] +
mov eax dword_4F1790 +
call @Graphics@_16468  +
mov edx [ebx+18h] +
mov eax [ebp+var_4] +
call @Graphics@TFont@SetColor$qqr15Graphics@TColor  +
mov eax [ebp+var_4] +
mov eax [eax+1Ch] +
cmp eax [ebx+1Ch] +
jz loc_45A694  +
mov eax ebx +
call @Graphics@TFont@GetSize$qqrv  +
mov edx eax +
mov eax [ebp+var_4] +
call @Graphics@TFont@SetSize$qqri  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_45A6B1  +
mov eax [ebp+var_8] +
call @Graphics@TGraphicsObject@Unlock$qqrv  +
retn   +
jmp unknown_libname_539  +
jmp loc_45A6A1  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_45A6D9  +
mov eax [ebp+var_4] +
call @Graphics@TGraphicsObject@Unlock$qqrv  +
retn   +
jmp unknown_libname_539  +
jmp loc_45A6BE  +
mov edx [ebp+var_8] +
mov eax [ebp+var_4] +
call @Classes@TPersistent@Assign$qqrp19Classes@TPersistent  +
pop ebx  +
pop ecx  +
pop ecx  +
pop ebp  +
retn   +
***
mov eax [eax+10h] +
push ecx  +
jz loc_45A75A  +
add esp 0FFFFFFB4h +
push ebx  +
xor edx edx +
mov [ebp+var_4C] edx +
mov [ebp+var_48] edx +
mov [ebp+var_44] edx +
mov ebx eax +
xor eax eax +
push ebp  +
push offset loc_45A8E5  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov eax [ebx+10h] +
mov [ebp+var_4] eax +
mov eax [ebp+var_4] +
cmp dword ptr [eax+8] 0 +
jnz loc_45A8C4  +
mov eax dword_4F1790 +
call unknown_libname_144  +
xor eax eax +
push ebp  +
push offset loc_45A8BD  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov eax [ebp+var_4] +
cmp dword ptr [eax+8] 0 +
jnz loc_45A8A5  +
mov eax [ebp+var_4] +
mov eax [eax+14h] +
mov [ebp+var_40.lfHeight] eax +
xor eax eax +
mov [ebp+var_40.lfWidth] eax +
xor eax eax +
mov [ebp+var_40.lfEscapement] eax +
xor eax eax +
mov [ebp+var_40.lfOrientation] eax +
mov eax [ebp+var_4] +
test byte ptr [eax+19h] 1 +
jz loc_45A7E0  +
mov [ebp+var_40.lfWeight] 2BCh +
jmp loc_45A7E7  +
mov [ebp+var_40.lfWeight] 190h +
mov eax [ebp+var_4] +
test byte ptr [eax+19h] 2 +
setnz al  +
mov [ebp+var_40.lfItalic] al +
mov eax [ebp+var_4] +
test byte ptr [eax+19h] 4 +
setnz al  +
mov [ebp+var_40.lfUnderline] al +
mov eax [ebp+var_4] +
test byte ptr [eax+19h] 8 +
setnz al  +
mov [ebp+var_40.lfStrikeOut] al +
mov eax [ebp+var_4] +
mov al [eax+1Ah] +
mov [ebp+var_40.lfCharSet] al +
lea eax [ebp+var_44] +
mov edx [ebp+var_4] +
add edx 1Bh +
call unknown_libname_547  +
mov eax [ebp+var_44] +
mov edx offset _str_Default.Text +
call unknown_libname_462  +
test eax eax +
jnz loc_45A850  +
lea eax [ebp+var_48] +
mov edx offset aMsSansSerif +
call unknown_libname_547  +
mov edx [ebp+var_48] +
lea eax [ebp+var_40.lfFaceName] +
call sub_4A9220  +
jmp loc_45A869  +
lea eax [ebp+var_4C] +
mov edx [ebp+var_4] +
add edx 1Bh +
call unknown_libname_547  +
mov edx [ebp+var_4C] +
lea eax [ebp+var_40.lfFaceName] +
call sub_4A9220  +
mov [ebp+var_40.lfQuality] 0 +
mov [ebp+var_40.lfOutPrecision] 0 +
mov [ebp+var_40.lfClipPrecision] 0 +
mov eax ebx +
call @Graphics@TFont@GetPitch$qqrv  +
dec al  +
jz loc_45A886  +
dec al  +
jz loc_45A88C  +
jmp loc_45A892  +
mov [ebp+var_40.lfPitchAndFamily] 2 +
jmp loc_45A896  +
mov [ebp+var_40.lfPitchAndFamily] 1 +
jmp loc_45A896  +
mov [ebp+var_40.lfPitchAndFamily] 0 +
lea eax [ebp+var_40] +
push eax  +
call CreateFontIndirectA  +
mov edx [ebp+var_4] +
mov [edx+8] eax +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_45A8C4  +
mov eax dword_4F1790 +
call sub_459AAC  +
retn   +
jmp unknown_libname_539  +
jmp loc_45A8B2  +
mov eax [ebp+var_4] +
mov ebx [eax+8] +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_45A8EC  +
lea eax [ebp+var_4C] +
mov edx 3 +
call unknown_libname_541  +
retn   +
jmp unknown_libname_539  +
jmp loc_45A8D7  +
mov eax ebx +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
add esp 0FFFFFFD4h +
mov esi edx +
mov ebx eax +
mov edx esp +
mov eax esi +
call @Graphics@_16490  +
mov edx esp +
mov eax ebx +
call unknown_libname_147  +
add esp 2Ch +
pop esi  +
pop ebx  +
retn   +
***
mov eax [eax+10h] +
mov eax [eax+14h] +
retn   +
***
add esp 0FFFFFFD4h +
mov esi edx +
mov ebx eax +
mov edx esp +
mov eax ebx +
call @Graphics@TFont@GetData$qqrr18Graphics@TFontData  +
mov [esp+2Ch+var_28] esi +
mov edx esp +
mov eax ebx +
call unknown_libname_147  +
add esp 2Ch +
pop esi  +
pop ebx  +
retn   +
***
mov esi edx +
mov ebx eax +
mov eax esi +
mov edx [ebx+10h] +
add edx 1Bh +
call unknown_libname_547  +
pop esi  +
pop ebx  +
retn   +
***
add esp 0FFFFFED4h +
mov esi edx +
mov ebx eax +
test esi esi +
jz loc_45A9C1  +
mov edx esp +
mov eax ebx +
call @Graphics@TFont@GetData$qqrr18Graphics@TFontData  +
lea eax [esp+12Ch+var_121] +
xor ecx ecx +
mov edx 20h +
call @System@@FillChar$qqrv  +
lea eax [esp+12Ch+var_100] +
mov edx esi +
mov ecx 0FFh +
call @System@@LStrToString$qqrv  +
lea edx [esp+12Ch+var_100] +
lea eax [esp+12Ch+var_121] +
mov cl 1Fh +
call sub_4B9FB8  +
mov edx esp +
mov eax ebx +
call unknown_libname_147  +
add esp 12Ch +
pop esi  +
pop ebx  +
retn   +
***
mov eax [ebx+1Ch] +
push eax  +
push 48h  +
mov eax ebx +
call sub_45A928  +
push eax  +
call MulDiv  +
neg eax  +
pop ebx  +
retn   +
***
mov esi edx +
mov eax [eax+10h] +
mov dl [eax+19h] +
mov eax edx +
retn   +
***
mov [esp+30h+var_30] dl +
mov ebx eax +
lea edx [esp+30h+var_2C] +
mov eax ebx +
call @Graphics@TFont@GetData$qqrr18Graphics@TFontData  +
mov al [esp+30h+var_30] +
mov [esp+30h+var_23] al +
lea edx [esp+30h+var_2C] +
mov eax ebx +
call unknown_libname_147  +
add esp 30h +
pop ebx  +
retn   +
***
mov eax [eax+10h] +
mov al [eax+18h] +
retn   +
***
add esp 0FFFFFFD4h +
mov ebx edx +
mov esi eax +
mov edx esp +
mov eax esi +
call @Graphics@TFont@GetData$qqrr18Graphics@TFontData  +
mov [esp+2Ch+var_24] bl +
mov edx esp +
mov eax esi +
call unknown_libname_147  +
add esp 2Ch +
pop esi  +
pop ebx  +
retn   +
***
mov eax [eax+10h] +
mov al [eax+1Ah] +
retn   +
***
add esp 0FFFFFFD4h +
mov ebx edx +
mov esi eax +
mov edx esp +
mov eax esi +
call @Graphics@TFont@GetData$qqrr18Graphics@TFontData  +
mov [esp+2Ch+var_22] bl +
mov edx esp +
mov eax esi +
call unknown_libname_147  +
add esp 2Ch +
pop esi  +
pop ebx  +
retn   +
***
test dl dl +
jz loc_45AAAE  +
add esp 0FFFFFFF0h +
call unknown_libname_535  +
mov ebx edx +
mov esi eax +
mov edx offset unk_4E6404 +
mov eax dword_4F1794 +
call sub_459AB8  +
mov [esi+10h] eax +
mov byte ptr [esi+18h] 4 +
mov eax esi +
test bl bl +
jz loc_45AADD  +
call sub_4BABC8  +
pop large dword ptr fs:0  +
add esp 0Ch +
mov eax esi +
pop esi  +
pop ebx  +
retn   +
***
call unknown_libname_536  +
mov ebx edx +
mov esi eax +
mov edx [esi+10h] +
mov eax dword_4F1794 +
call sub_459B9C  +
test bl bl +
jle loc_45AB07  +
mov eax esi +
call @System@@ClassDestroy$qqrp14System@TObject  +
pop esi  +
pop ebx  +
retn   +
***
add esp 0FFFFFFF8h +
push ebx  +
mov [ebp+var_8] edx +
mov [ebp+var_4] eax +
mov eax [ebp+var_8] +
mov edx ds:off_4592AC +
call @System@@IsClass$qqrp14System@TObjectp17System@TMetaClass  +
test al al +
jz loc_45ABB2  +
mov eax [ebp+var_4] +
call @Graphics@TGraphicsObject@Lock$qqrv  +
xor eax eax +
push ebp  +
push offset loc_45ABAB  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov ebx [ebp+var_8] +
mov eax ebx +
call @Graphics@TGraphicsObject@Lock$qqrv  +
xor eax eax +
push ebp  +
push offset loc_45AB8E  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov ecx [ebx+10h] +
mov edx [ebp+var_4] +
mov eax dword_4F1794 +
call @Graphics@_16468  +
mov dl [ebx+18h] +
mov eax [ebp+var_4] +
call @Graphics@TPen@SetMode$qqr17Graphics@TPenMode  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_45AB95  +
mov eax [ebp+var_8] +
call @Graphics@TGraphicsObject@Unlock$qqrv  +
retn   +
jmp unknown_libname_539  +
jmp loc_45AB85  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_45ABBD  +
mov eax [ebp+var_4] +
call @Graphics@TGraphicsObject@Unlock$qqrv  +
retn   +
jmp unknown_libname_539  +
jmp loc_45ABA2  +
mov edx [ebp+var_8] +
mov eax [ebp+var_4] +
call @Classes@TPersistent@Assign$qqrp19Classes@TPersistent  +
pop ebx  +
pop ecx  +
pop ecx  +
pop ebp  +
retn   +
***
mov eax [eax+10h] +
lea esi [eax+10h] +
mov edi edx +
movs   +
movs   +
movs   +
movs   +
xor eax eax +
mov [edx] eax +
pop edi  +
pop esi  +
retn   +
***
push ecx  +
mov eax [eax+10h] +
mov eax [eax+14h] +
retn   +
***
add esp 0FFFFFFF0h +
mov esi edx +
mov ebx eax +
mov edx esp +
mov eax ebx +
call @Graphics@TPen@GetData$qqrr17Graphics@TPenData  +
mov [esp+10h+var_C] esi +
mov edx esp +
mov eax ebx +
call unknown_libname_149  +
add esp 10h +
pop esi  +
pop ebx  +
retn   +
***
add esp 0FFFFFFECh +
mov eax [eax+10h] +
mov [ebp+var_4] eax +
mov eax [ebp+var_4] +
cmp dword ptr [eax+8] 0 +
jnz loc_45ACE9  +
mov eax dword_4F1794 +
call unknown_libname_144  +
xor eax eax +
push ebp  +
push offset loc_45ACE2  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov eax [ebp+var_4] +
cmp dword ptr [eax+8] 0 +
jnz loc_45ACCA  +
mov eax [ebp+var_4] +
movzx eax byte ptr [eax+1Ch] +
movzx eax word_4E6414[eax*2] +
mov [ebp+var_14.lopnStyle] eax +
mov eax [ebp+var_4] +
mov eax [eax+18h] +
mov [ebp+var_14.lopnWidth.x] eax +
mov eax [ebp+var_4] +
mov eax [eax+14h] +
call @Graphics@ColorToRGB$qqr15Graphics@TColor  +
mov [ebp+var_14.lopnColor] eax +
lea eax [ebp+var_14] +
push eax  +
call CreatePenIndirect  +
mov edx [ebp+var_4] +
mov [edx+8] eax +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_45ACE9  +
mov eax dword_4F1794 +
call sub_459AAC  +
retn   +
jmp unknown_libname_539  +
jmp loc_45ACD7  +
mov eax [ebp+var_4] +
mov eax [eax+8] +
mov esp ebp +
pop ebp  +
retn   +
***
jz loc_45AD06  +
mov eax [eax+10h] +
mov al [eax+1Ch] +
retn   +
***
add esp 0FFFFFFF0h +
mov ebx edx +
mov esi eax +
mov edx esp +
mov eax esi +
call @Graphics@TPen@GetData$qqrr17Graphics@TPenData  +
mov [esp+10h+var_4] bl +
mov edx esp +
mov eax esi +
call unknown_libname_149  +
add esp 10h +
pop esi  +
pop ebx  +
retn   +
***
mov eax [eax+10h] +
mov eax [eax+18h] +
retn   +
***
add esp 0FFFFFFF0h +
mov esi edx +
mov ebx eax +
test esi esi +
jl loc_45AD63  +
mov edx esp +
mov eax ebx +
call @Graphics@TPen@GetData$qqrr17Graphics@TPenData  +
mov [esp+10h+var_8] esi +
mov edx esp +
mov eax ebx +
call unknown_libname_149  +
add esp 10h +
pop esi  +
pop ebx  +
retn   +
***
test dl dl +
jz loc_45AD7A  +
add esp 0FFFFFFF0h +
call unknown_libname_535  +
mov ebx edx +
mov esi eax +
mov edx offset unk_4E6424 +
mov eax dword_4F1798 +
call sub_459AB8  +
mov [esi+10h] eax +
mov eax esi +
test bl bl +
jz loc_45ADA5  +
call sub_4BABC8  +
pop large dword ptr fs:0  +
add esp 0Ch +
mov eax esi +
pop esi  +
pop ebx  +
retn   +
***
call unknown_libname_536  +
mov ebx edx +
mov esi eax +
mov edx [esi+10h] +
mov eax dword_4F1798 +
call sub_459B9C  +
test bl bl +
jle loc_45ADCF  +
mov eax esi +
call @System@@ClassDestroy$qqrp14System@TObject  +
pop esi  +
pop ebx  +
retn   +
***
add esp 0FFFFFFF8h +
push ebx  +
mov [ebp+var_8] edx +
mov [ebp+var_4] eax +
mov eax [ebp+var_8] +
mov edx ds:off_4593AC +
call @System@@IsClass$qqrp14System@TObjectp17System@TMetaClass  +
test al al +
jz loc_45AE6B  +
mov eax [ebp+var_4] +
call @Graphics@TGraphicsObject@Lock$qqrv  +
xor eax eax +
push ebp  +
push offset loc_45AE64  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov ebx [ebp+var_8] +
mov eax ebx +
call @Graphics@TGraphicsObject@Lock$qqrv  +
xor eax eax +
push ebp  +
push offset loc_45AE47  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov ecx [ebx+10h] +
mov edx [ebp+var_4] +
mov eax dword_4F1798 +
call @Graphics@_16468  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_45AE4E  +
mov eax [ebp+var_8] +
call @Graphics@TGraphicsObject@Unlock$qqrv  +
retn   +
jmp unknown_libname_539  +
jmp loc_45AE3E  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_45AE76  +
mov eax [ebp+var_4] +
call @Graphics@TGraphicsObject@Unlock$qqrv  +
retn   +
jmp unknown_libname_539  +
jmp loc_45AE5B  +
mov edx [ebp+var_8] +
mov eax [ebp+var_4] +
call @Classes@TPersistent@Assign$qqrp19Classes@TPersistent  +
pop ebx  +
pop ecx  +
pop ecx  +
pop ebp  +
retn   +
***
mov eax [eax+10h] +
lea esi [eax+10h] +
mov edi edx +
movs   +
movs   +
movs   +
movs   +
xor eax eax +
mov [edx] eax +
xor eax eax +
mov [edx+8] eax +
pop edi  +
pop esi  +
retn   +
***
push ecx  +
add esp 0FFFFFFF0h +
mov esi offset unk_4E6424 +
mov edi esp +
movs   +
movs   +
movs   +
movs   +
mov [esp+10h+var_8] edx +
mov edx esp +
call unknown_libname_151  +
add esp 10h +
pop edi  +
pop esi  +
retn   +
***
mov eax [eax+10h] +
mov eax [eax+14h] +
retn   +
***
add esp 0FFFFFFF0h +
mov esi edx +
mov ebx eax +
mov edx esp +
mov eax ebx +
call @Graphics@TBrush@GetData$qqrr19Graphics@TBrushData  +
mov [esp+10h+var_C] esi +
cmp [esp+10h+var_4] 1 +
jnz loc_45AF36  +
mov [esp+10h+var_4] 0 +
mov edx esp +
mov eax ebx +
call unknown_libname_151  +
add esp 10h +
pop esi  +
pop ebx  +
retn   +
***
add esp 0FFFFFFF0h +
mov eax [eax+10h] +
mov [ebp+var_4] eax +
mov eax [ebp+var_4] +
cmp dword ptr [eax+8] 0 +
jnz loc_45B01C  +
mov eax dword_4F1798 +
call unknown_libname_144  +
xor edx edx +
push ebp  +
push offset loc_45B015  +
push dword ptr fs:[edx]  +
mov fs:[edx] esp +
mov eax [ebp+var_4] +
cmp dword ptr [eax+8] 0 +
jnz loc_45AFFD  +
mov eax [ebp+var_4] +
mov eax [eax+18h] +
test eax eax +
jz loc_45AFAA  +
mov [ebp+var_10.lbStyle] 3 +
mov dl 1 +
mov ecx [eax] +
call dword ptr [ecx+6Ch]  +
mov eax [ebp+var_4] +
mov eax [eax+18h] +
mov edx [eax] +
call dword ptr [edx+64h]  +
mov [ebp+var_10.lbHatch] eax +
jmp loc_45AFE0  +
xor eax eax +
mov [ebp+var_10.lbHatch] eax +
mov eax [ebp+var_4] +
mov al [eax+1Ch] +
mov edx eax +
sub dl 1 +
jb loc_45AFC0  +
jz loc_45AFC7  +
jmp loc_45AFD0  +
xor eax eax +
mov [ebp+var_10.lbStyle] eax +
jmp loc_45AFE0  +
mov [ebp+var_10.lbStyle] 1 +
jmp loc_45AFE0  +
mov [ebp+var_10.lbStyle] 2 +
and eax 7Fh +
sub eax 2 +
mov [ebp+var_10.lbHatch] eax +
mov eax [ebp+var_4] +
mov eax [eax+14h] +
call @Graphics@ColorToRGB$qqr15Graphics@TColor  +
mov [ebp+var_10.lbColor] eax +
lea eax [ebp+var_10] +
push eax  +
call CreateBrushIndirect  +
mov edx [ebp+var_4] +
mov [edx+8] eax +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_45B01C  +
mov eax dword_4F1798 +
call sub_459AAC  +
retn   +
jmp unknown_libname_539  +
jmp loc_45B00A  +
mov eax [ebp+var_4] +
mov eax [eax+8] +
mov esp ebp +
pop ebp  +
retn   +
***
mov eax [eax+10h] +
mov al [eax+1Ch] +
retn   +
***
add esp 0FFFFFFF0h +
mov ebx edx +
mov esi eax +
mov edx esp +
mov eax esi +
call @Graphics@TBrush@GetData$qqrr19Graphics@TBrushData  +
mov eax ebx +
mov [esp+10h+var_4] al +
cmp al 1 +
jnz loc_45B054  +
mov [esp+10h+var_C] 0FFFFFFh +
mov edx esp +
mov eax esi +
call unknown_libname_151  +
add esp 10h +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
test dl dl +
jz loc_45B073  +
add esp 0FFFFFFF0h +
call unknown_libname_535  +
mov ebx edx +
mov edi eax +
xor edx edx +
mov eax edi +
call @System@TObject@$bctr$qqrv  +
lea eax [edi+38h] +
push eax  +
call InitializeCriticalSection  +
mov dl 1 +
mov eax ds:off_459130 +
call sub_45A574  +
mov esi eax +
mov [edi+0Ch] esi +
mov [esi+0Ch] edi +
mov dword ptr [esi+8] offset @Graphics@TCanvas@FontChanged$qqrp14System@TObject +
lea eax [edi+38h] +
mov [esi+14h] eax +
mov dl 1 +
mov eax ds:off_4592AC +
call @TPen@$bctr$qqrv  +
mov esi eax +
mov [edi+10h] esi +
mov [esi+0Ch] edi +
mov dword ptr [esi+8] offset @Graphics@TCanvas@PenChanged$qqrp14System@TObject +
lea eax [edi+38h] +
mov [esi+14h] eax +
mov dl 1 +
mov eax ds:off_4593AC +
call sub_45AD6C  +
mov esi eax +
mov [edi+14h] esi +
mov [esi+0Ch] edi +
mov dword ptr [esi+8] offset @Graphics@TCanvas@BrushChanged$qqrp14System@TObject +
lea eax [edi+38h] +
mov [esi+14h] eax +
mov dword ptr [edi+20h] 0CC0020h +
mov al ds:byte_45B124 +
mov [edi+8] al +
mov edx edi +
mov eax dword_4F179C +
call @Classes@TThreadList@Add$qqrpv  +
mov eax edi +
test bl bl +
jz loc_45B11C  +
call sub_4BABC8  +
pop large dword ptr fs:0  +
add esp 0Ch +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
call unknown_libname_536  +
mov ebx edx +
mov esi eax +
mov edx esi +
mov eax dword_4F179C +
call sub_49D120  +
xor edx edx +
mov eax esi +
call @Graphics@TCanvas@SetHandle$qqrui  +
mov eax [esi+0Ch] +
call @System@TObject@Free$qqrv  +
mov eax [esi+10h] +
call @System@TObject@Free$qqrv  +
mov eax [esi+14h] +
call @System@TObject@Free$qqrv  +
lea eax [esi+38h] +
push eax  +
call DeleteCriticalSection  +
mov edx ebx +
and dl 0FCh +
mov eax esi +
call sub_49D348  +
test bl bl +
jle loc_45B180  +
mov eax esi +
call @System@@ClassDestroy$qqrp14System@TObject  +
pop esi  +
pop ebx  +
retn   +
***
push ecx  +
push ebx  +
push esi  +
push edi  +
mov [ebp+var_4] ecx +
mov esi edx +
mov ebx eax +
mov edi [ebp+arg_0] +
mov eax ebx +
mov edx [eax] +
call dword ptr [edx+10h]  +
mov dl ds:byte_45B204 +
mov eax ebx +
call @Graphics@TCanvas@RequiredState$qqr50System@_Set$t22Graphics@TCanvasStates$iuc$0$iuc$3_  +
mov dl ds:byte_45B208 +
mov eax [ebp+var_4] +
call @Graphics@TCanvas@RequiredState$qqr50System@_Set$t22Graphics@TCanvasStates$iuc$0$iuc$3_  +
mov edx [ebx+20h] +
push edx  +
mov edx [edi+0Ch] +
sub edx [edi+4] +
push edx  +
mov edx [edi+8] +
sub edx [edi] +
push edx  +
mov edx [edi+4] +
push edx  +
mov edx [edi] +
push edx  +
mov edx [ebp+var_4] +
mov edx [edx+4] +
push edx  +
mov edx [esi+0Ch] +
sub edx [esi+4] +
push edx  +
mov edx [esi+8] +
mov eax [esi] +
sub edx eax +
push edx  +
mov edx [esi+4] +
push edx  +
push eax  +
mov eax [ebx+4] +
push eax  +
call StretchBlt  +
mov eax ebx +
mov edx [eax] +
call dword ptr [edx+0Ch]  +
pop edi  +
pop esi  +
pop ebx  +
pop ecx  +
pop ebp  +
retn 4  +
***
add esp 0FFFFFFECh +
push ebx  +
push esi  +
push edi  +
mov [ebp+var_4] ecx +
mov edi edx +
mov ebx eax +
mov esi [ebp+arg_0] +
test esi esi +
jz loc_45B2A9  +
mov eax esi +
mov edx [eax] +
call dword ptr [edx+1Ch]  +
test al al +
jnz loc_45B2A9  +
mov eax ebx +
mov edx [eax] +
call dword ptr [edx+10h]  +
mov dl ds:byte_45B2B4 +
mov eax ebx +
call @Graphics@TCanvas@RequiredState$qqr50System@_Set$t22Graphics@TCanvasStates$iuc$0$iuc$3_  +
mov eax [ebx+14h] +
call sub_45AF0C  +
call @Graphics@ColorToRGB$qqr15Graphics@TColor  +
push eax  +
mov eax [ebx+4] +
push eax  +
call SetBkColor  +
mov eax [ebx+0Ch] +
mov eax [eax+18h] +
call @Graphics@ColorToRGB$qqr15Graphics@TColor  +
push eax  +
mov eax [ebx+4] +
push eax  +
call SetTextColor  +
mov eax esi +
mov edx [eax] +
call dword ptr [edx+20h]  +
add eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_14] +
push eax  +
mov eax esi +
mov edx [eax] +
call dword ptr [edx+2Ch]  +
mov ecx eax +
add ecx edi +
mov edx [ebp+var_4] +
mov eax edi +
call sub_49B708  +
lea ecx [ebp+var_14] +
mov edx ebx +
mov eax esi +
mov esi [eax] +
call dword ptr [esi+14h]  +
mov eax ebx +
mov edx [eax] +
call dword ptr [edx+0Ch]  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 4  +
***
mov esi edx +
mov ebx eax +
mov eax ebx +
mov edx [eax] +
call dword ptr [edx+10h]  +
mov dl ds:byte_45B2F0 +
mov eax ebx +
call @Graphics@TCanvas@RequiredState$qqr50System@_Set$t22Graphics@TCanvasStates$iuc$0$iuc$3_  +
mov eax [ebx+14h] +
call @Graphics@TBrush@GetHandle$qqrv  +
push eax  +
push esi  +
mov eax [ebx+4] +
push eax  +
call FillRect  +
mov eax ebx +
mov edx [eax] +
call dword ptr [edx+0Ch]  +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
mov edi ecx +
mov esi edx +
mov ebx eax +
mov eax ebx +
mov edx [eax] +
call dword ptr [edx+10h]  +
mov dl ds:byte_45B328 +
mov eax ebx +
call @Graphics@TCanvas@RequiredState$qqr50System@_Set$t22Graphics@TCanvasStates$iuc$0$iuc$3_  +
push edi  +
push esi  +
mov eax [ebx+4] +
push eax  +
call LineTo  +
mov eax ebx +
mov edx [eax] +
call dword ptr [edx+0Ch]  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push offset CriticalSection  +
call EnterCriticalSection  +
inc dword ptr [ebx+50h]  +
push offset CriticalSection  +
call LeaveCriticalSection  +
lea eax [ebx+38h] +
push eax  +
call EnterCriticalSection  +
pop ebx  +
retn   +
***
push edi  +
mov edi ecx +
mov esi edx +
mov ebx eax +
mov dl ds:byte_45B37C +
mov eax ebx +
call @Graphics@TCanvas@RequiredState$qqr50System@_Set$t22Graphics@TCanvasStates$iuc$0$iuc$3_  +
push 0  +
push edi  +
push esi  +
mov eax [ebx+4] +
push eax  +
call MoveToEx  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
mov edi ecx +
mov esi edx +
mov ebx eax +
mov eax ebx +
mov edx [eax] +
call dword ptr [edx+10h]  +
mov dl ds:byte_45B3B4 +
mov eax ebx +
call @Graphics@TCanvas@RequiredState$qqr50System@_Set$t22Graphics@TCanvasStates$iuc$0$iuc$3_  +
inc edi  +
push edi  +
push esi  +
mov eax [ebx+4] +
push eax  +
call Polygon  +
mov eax ebx +
mov edx [eax] +
call dword ptr [edx+0Ch]  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
mov edi ecx +
mov esi edx +
mov ebx eax +
mov eax ebx +
mov edx [eax] +
call dword ptr [edx+10h]  +
mov dl ds:byte_45B3EC +
mov eax ebx +
call @Graphics@TCanvas@RequiredState$qqr50System@_Set$t22Graphics@TCanvasStates$iuc$0$iuc$3_  +
inc edi  +
push edi  +
push esi  +
mov eax [ebx+4] +
push eax  +
call Polyline  +
mov eax ebx +
mov edx [eax] +
call dword ptr [edx+0Ch]  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push ebx  +
push esi  +
push edi  +
mov edi ecx +
mov esi edx +
mov ebx eax +
mov eax ebx +
mov edx [eax] +
call dword ptr [edx+10h]  +
mov dl ds:byte_45B434 +
mov eax ebx +
call @Graphics@TCanvas@RequiredState$qqr50System@_Set$t22Graphics@TCanvasStates$iuc$0$iuc$3_  +
mov eax [ebp+arg_0] +
push eax  +
mov eax [ebp+arg_4] +
push eax  +
push edi  +
push esi  +
mov eax [ebx+4] +
push eax  +
call Rectangle  +
mov eax ebx +
mov edx [eax] +
call dword ptr [edx+0Ch]  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
retn   +
***
push edi  +
mov esi ecx +
mov edi edx +
mov ebx eax +
test esi esi +
jz loc_45B473  +
mov eax ebx +
mov edx [eax] +
call dword ptr [edx+10h]  +
mov dl ds:byte_45B478 +
mov eax ebx +
call @Graphics@TCanvas@RequiredState$qqr50System@_Set$t22Graphics@TCanvasStates$iuc$0$iuc$3_  +
mov ecx edi +
mov edx ebx +
mov eax esi +
mov esi [eax] +
call dword ptr [esi+14h]  +
mov eax ebx +
mov edx [eax] +
call dword ptr [edx+0Ch]  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
add esp 0FFFFFFF8h +
push ecx  +
push ebx  +
push esi  +
push edi  +
mov [ebp+var_4] ecx +
mov edi edx +
mov ebx eax +
mov esi [ebp+arg_0] +
mov eax ebx +
mov edx [eax] +
call dword ptr [edx+10h]  +
mov dl ds:byte_45B530 +
mov eax ebx +
call @Graphics@TCanvas@RequiredState$qqr50System@_Set$t22Graphics@TCanvasStates$iuc$0$iuc$3_  +
mov eax ebx +
call @Graphics@TCanvas@GetCanvasOrientation$qqrv  +
cmp al 1 +
jnz loc_45B4E4  +
mov edx esi +
mov eax ebx +
call @Graphics@TCanvas@TextWidth$qqrx17System@AnsiString  +
inc eax  +
add edi eax +
push 0  +
mov eax esi +
call sub_4BB610  +
push eax  +
mov eax esi +
call unknown_libname_550  +
push eax  +
push 0  +
mov eax [ebx+54h] +
push eax  +
mov eax [ebp+var_4] +
push eax  +
push edi  +
mov eax [ebx+4] +
push eax  +
call ExtTextOutA  +
mov edx esi +
mov eax ebx +
call @Graphics@TCanvas@TextWidth$qqrx17System@AnsiString  +
mov edx eax +
add edx edi +
mov ecx [ebp+var_4] +
mov eax ebx +
call @Graphics@TCanvas@MoveTo$qqrii  +
mov eax ebx +
mov edx [eax] +
call dword ptr [edx+0Ch]  +
pop edi  +
pop esi  +
pop ebx  +
pop ecx  +
pop ebp  +
retn 4  +
***
push edi  +
mov esi ecx +
mov edi edx +
mov ebx eax +
mov dl ds:byte_45B574 +
mov eax ebx +
call @Graphics@TCanvas@RequiredState$qqr50System@_Set$t22Graphics@TCanvasStates$iuc$0$iuc$3_  +
xor eax eax +
mov [esi] eax +
xor eax eax +
mov [esi+4] eax +
push esi  +
mov eax edi +
call sub_4BB610  +
push eax  +
mov eax edi +
call unknown_libname_550  +
push eax  +
mov eax [ebx+4] +
push eax  +
call GetTextExtentPoint32A  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
add esp 0FFFFFFF8h +
add esp 0FFFFFFF8h +
mov esi edx +
mov ebx eax +
mov ecx esp +
mov edx esi +
mov eax ebx +
call sub_45B534  +
mov eax [esp+8+var_4] +
pop ecx  +
pop edx  +
pop esi  +
pop ebx  +
retn   +
***
push ecx  +
push ebx  +
mov ebx eax +
push offset CriticalSection  +
call EnterCriticalSection  +
xor eax eax +
push ebp  +
push offset loc_45B600  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
cmp dword ptr [ebx+50h] 0 +
setz [ebp+var_1]  +
cmp [ebp+var_1] 0 +
jz loc_45B5E8  +
mov eax ebx +
call @Graphics@TCanvas@Lock$qqrv  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_45B607  +
push offset CriticalSection  +
call LeaveCriticalSection  +
retn   +
jmp unknown_libname_539  +
jmp loc_45B5F5  +
mov al [ebp+var_1] +
pop ebx  +
pop ecx  +
pop ebp  +
retn   +
***
lea eax [ebx+38h] +
push eax  +
call LeaveCriticalSection  +
push offset CriticalSection  +
call EnterCriticalSection  +
dec dword ptr [ebx+50h]  +
push offset CriticalSection  +
call LeaveCriticalSection  +
pop ebx  +
retn   +
***
mov eax [esi+0Ch] +
mov ecx [eax] +
call dword ptr [ecx+8]  +
pop esi  +
retn   +
***
mov eax [eax+10h] +
mov ecx [eax] +
call dword ptr [ecx+8]  +
retn   +
***
mov eax [eax+14h] +
mov ecx [eax] +
call dword ptr [ecx+8]  +
retn   +
***
mov esi edx +
mov ebx eax +
mov dl ds:byte_45B680 +
mov eax ebx +
call @Graphics@TCanvas@RequiredState$qqr50System@_Set$t22Graphics@TCanvasStates$iuc$0$iuc$3_  +
push esi  +
mov eax [ebx+4] +
push eax  +
call GetCurrentPositionEx  +
pop esi  +
pop ebx  +
retn   +
***
add esp 0FFFFFFF8h +
mov esi edx +
lea edi [esp+8+var_8] +
movs   +
movs   +
mov ecx [esp+8+var_4] +
mov edx [esp+8+var_8] +
call @Graphics@TCanvas@MoveTo$qqrii  +
pop ecx  +
pop edx  +
pop edi  +
pop esi  +
retn   +
***
push edi  +
mov edi ecx +
mov esi edx +
mov ebx eax +
mov dl ds:byte_45B6CC +
mov eax ebx +
call @Graphics@TCanvas@RequiredState$qqr50System@_Set$t22Graphics@TCanvasStates$iuc$0$iuc$3_  +
push edi  +
push esi  +
mov eax [ebx+4] +
push eax  +
call GetPixel  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push ebx  +
push esi  +
push edi  +
mov edi ecx +
mov esi edx +
mov ebx eax +
mov eax ebx +
mov edx [eax] +
call dword ptr [edx+10h]  +
mov dl ds:byte_45B714 +
mov eax ebx +
call @Graphics@TCanvas@RequiredState$qqr50System@_Set$t22Graphics@TCanvasStates$iuc$0$iuc$3_  +
mov eax [ebp+arg_0] +
call @Graphics@ColorToRGB$qqr15Graphics@TColor  +
push eax  +
push edi  +
push esi  +
mov eax [ebx+4] +
push eax  +
call SetPixel  +
mov eax ebx +
mov edx [eax] +
call dword ptr [edx+0Ch]  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov eax ebx +
mov edx [eax] +
call dword ptr [edx+10h]  +
mov dl ds:byte_45B734 +
mov eax ebx +
call @Graphics@TCanvas@RequiredState$qqr50System@_Set$t22Graphics@TCanvasStates$iuc$0$iuc$3_  +
mov eax [ebx+4] +
pop ebx  +
retn   +
***
mov ebx eax +
mov esi [ebx+4] +
test esi esi +
jz loc_45B78B  +
mov al ds:byte_45B790 +
not eax  +
and al [ebx+8] +
mov dl [ebx+8] +
cmp dl al +
jz loc_45B78B  +
mov eax dword_4F1750 +
push eax  +
push esi  +
call SelectObject  +
mov eax dword_4F1754 +
push eax  +
mov eax [ebx+4] +
push eax  +
call SelectObject  +
mov eax dword_4F1758 +
push eax  +
mov eax [ebx+4] +
push eax  +
call SelectObject  +
mov al ds:byte_45B790 +
not eax  +
and al [ebx+8] +
mov [ebx+8] al +
pop esi  +
pop ebx  +
retn   +
***
add esp 0FFFFFFF8h +
push ecx  +
mov [esp+1+var_1] dl +
mov esi eax +
mov bl [esi+8] +
not ebx  +
and bl [esp+1+var_1] +
mov al ds:byte_45B85C +
cmp al bl +
jz loc_45B858  +
test bl 1 +
jz loc_45B82E  +
mov eax esi +
mov edx [eax] +
call dword ptr [edx+14h]  +
cmp dword ptr [esi+4] 0 +
jnz loc_45B82E  +
mov ecx off_4EA6F0 +
mov dl 1 +
mov eax ds:off_49A578 +
call @Sysutils@Exception@$bctr$qqrp20System@TResStringRec  +
call @System@@RaiseExcept$qqrv  +
test bl 2 +
jz loc_45B83A  +
mov eax esi +
call @Graphics@TCanvas@CreateFont$qqrv  +
test bl 4 +
jz loc_45B846  +
mov eax esi +
call @Graphics@TCanvas@CreatePen$qqrv  +
test bl 8 +
jz loc_45B852  +
mov eax esi +
call @Graphics@TCanvas@CreateBrush$qqrv  +
or bl [esi+8] +
mov [esi+8] bl +
pop edx  +
pop esi  +
pop ebx  +
retn   +
***
jz loc_45B872  +
jz loc_45B886  +
mov eax [ebx+0Ch] +
mov eax [ebx+10h] +
mov eax [ebx+14h] +
call @Graphics@TBrush@GetHandle$qqrv  +
push eax  +
call UnrealizeObject  +
mov eax [ebx+14h] +
call @Graphics@TBrush@GetHandle$qqrv  +
push eax  +
mov eax [ebx+4] +
push eax  +
call SelectObject  +
mov eax [ebx+14h] +
call sub_45B028  +
test al al +
jnz loc_45B937  +
mov eax [ebx+14h] +
call sub_45AF0C  +
call @Graphics@ColorToRGB$qqr15Graphics@TColor  +
push eax  +
mov eax [ebx+4] +
push eax  +
call SetBkColor  +
push 2  +
mov eax [ebx+4] +
push eax  +
call SetBkMode  +
pop ebx  +
retn   +
mov eax [ebx+14h] +
call sub_45AF0C  +
call @Graphics@ColorToRGB$qqr15Graphics@TColor  +
not eax  +
push eax  +
mov eax [ebx+4] +
push eax  +
call SetBkColor  +
push 1  +
mov eax [ebx+4] +
push eax  +
call SetBkMode  +
pop ebx  +
retn   +
***
test byte ptr [ebx+8] 2 +
jz loc_45B97C  +
and byte ptr [ebx+8] 0FDh +
mov eax dword_4F1758 +
push eax  +
mov eax [ebx+4] +
push eax  +
call SelectObject  +
pop ebx  +
retn   +
***
test byte ptr [ebx+8] 4 +
jz loc_45B99C  +
and byte ptr [ebx+8] 0FBh +
mov eax dword_4F1750 +
push eax  +
mov eax [ebx+4] +
push eax  +
call SelectObject  +
pop ebx  +
retn   +
***
test byte ptr [ebx+8] 8 +
jz loc_45B9BC  +
and byte ptr [ebx+8] 0F7h +
mov eax dword_4F1754 +
push eax  +
mov eax [ebx+4] +
push eax  +
call SelectObject  +
pop ebx  +
retn   +
***
mov ecx ebx +
mov ecx ebx +
mov eax off_4EA6D8 +
call sub_45B9D8  +
retn   +
***
mov eax off_4EA6DC +
call sub_45B9D8  +
retn   +
***
push 0  +
add esp 0FFFFFEFCh +
test ebx ebx +
add esp 0FFFFFFCCh +
push ebx  +
push esi  +
push edi  +
mov esi edx +
lea edi [ebp+var_C] +
movs   +
movs   +
mov ebx ecx +
mov [ebp+var_4] eax +
push 0  +
call CreateCompatibleDC  +
mov [ebp+var_18] eax +
push 0  +
call CreateCompatibleDC  +
mov [ebp+var_1C] eax +
xor eax eax +
push ebp  +
push offset loc_45BC62  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
lea eax [ebp+var_34] +
push eax  +
push 18h  +
mov eax [ebp+var_4] +
push eax  +
call GetObjectA  +
test bl bl +
jz loc_45BB76  +
push 0  +
push 1  +
push 1  +
mov eax [ebp+var_8] +
push eax  +
mov eax [ebp+var_C] +
push eax  +
call CreateBitmap  +
mov [ebp+var_10] eax +
jmp loc_45BBD8  +
push 0  +
call GetDC  +
mov [ebp+hDC] eax +
cmp [ebp+hDC] 0 +
jnz loc_45BB8B  +
call sub_45BA5C  +
xor eax eax +
push ebp  +
push offset loc_45BBD1  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov eax [ebp+var_8] +
push eax  +
mov eax [ebp+var_C] +
push eax  +
mov eax [ebp+hDC] +
push eax  +
call CreateCompatibleBitmap  +
mov [ebp+var_10] eax +
cmp [ebp+var_10] 0 +
jnz loc_45BBB8  +
call sub_45BA5C  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_45BBD8  +
mov eax [ebp+hDC] +
push eax  +
push 0  +
call ReleaseDC  +
retn   +
jmp unknown_libname_539  +
jmp loc_45BBC5  +
cmp [ebp+var_10] 0 +
jz loc_45BC42  +
mov eax [ebp+var_4] +
push eax  +
mov eax [ebp+var_18] +
push eax  +
call SelectObject  +
mov ebx eax +
mov eax [ebp+var_10] +
push eax  +
mov eax [ebp+var_1C] +
push eax  +
call SelectObject  +
mov esi eax +
push 0CC0020h  +
mov eax [ebp+var_2C] +
push eax  +
mov eax [ebp+var_30] +
push eax  +
push 0  +
push 0  +
mov eax [ebp+var_18] +
push eax  +
mov eax [ebp+var_8] +
push eax  +
mov eax [ebp+var_C] +
push eax  +
push 0  +
push 0  +
mov eax [ebp+var_1C] +
push eax  +
call StretchBlt  +
test ebx ebx +
jz loc_45BC34  +
push ebx  +
mov eax [ebp+var_18] +
push eax  +
call SelectObject  +
test esi esi +
jz loc_45BC42  +
push esi  +
mov eax [ebp+var_1C] +
push eax  +
call SelectObject  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_45BC69  +
mov eax [ebp+var_18] +
push eax  +
call DeleteDC  +
mov eax [ebp+var_1C] +
push eax  +
call DeleteDC  +
retn   +
jmp unknown_libname_539  +
jmp loc_45BC4F  +
mov eax [ebp+var_10] +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
mov edx eax +
dec ecx  +
add esp 0FFFFFFDCh +
push ebx  +
push esi  +
push edi  +
mov [ebp+var_8] ecx +
mov [ebp+var_4] edx +
mov edi eax +
mov esi [ebp+arg_C] +
mov ebx [ebp+arg_10] +
mov [ebp+var_9] 1 +
mov eax off_4EA8B8 +
cmp dword ptr [eax] 2 +
jnz loc_45BD82  +
cmp ebx [ebp+arg_24] +
jnz loc_45BD82  +
cmp esi [ebp+arg_20] +
jnz loc_45BD82  +
push 1  +
push 1  +
mov eax [ebp+arg_1C] +
push eax  +
call CreateCompatibleBitmap  +
call @Graphics@_16597  +
mov [ebp+var_14] eax +
mov eax [ebp+var_14] +
push eax  +
mov eax [ebp+arg_8] +
push eax  +
call SelectObject  +
mov [ebp+var_14] eax +
xor eax eax +
push ebp  +
push offset loc_45BD7B  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov edx 0CC0020h +
mov eax 0AA0029h +
call unknown_libname_381  +
push eax  +
mov eax [ebp+arg_0] +
push eax  +
mov eax [ebp+arg_4] +
push eax  +
mov eax [ebp+var_14] +
push eax  +
mov eax [ebp+arg_14] +
push eax  +
mov eax [ebp+arg_18] +
push eax  +
mov eax [ebp+arg_1C] +
push eax  +
mov eax [ebp+arg_20] +
push eax  +
mov eax [ebp+arg_24] +
push eax  +
mov eax [ebp+var_8] +
push eax  +
mov eax [ebp+var_4] +
push eax  +
push edi  +
call MaskBlt  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_45BF2F  +
mov eax [ebp+var_14] +
push eax  +
mov eax [ebp+arg_8] +
push eax  +
call SelectObject  +
mov [ebp+var_14] eax +
mov eax [ebp+var_14] +
push eax  +
call DeleteObject  +
retn   +
jmp unknown_libname_539  +
jmp loc_45BD61  +
xor eax eax +
mov [ebp+var_24] eax +
push 0  +
call CreateCompatibleDC  +
call @Graphics@_16597  +
mov [ebp+var_10] eax +
xor eax eax +
push ebp  +
push offset loc_45BF28  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
push esi  +
push ebx  +
mov eax [ebp+arg_1C] +
push eax  +
call CreateCompatibleBitmap  +
call @Graphics@_16597  +
mov [ebp+var_14] eax +
mov eax [ebp+var_14] +
push eax  +
mov eax [ebp+var_10] +
push eax  +
call SelectObject  +
mov [ebp+var_18] eax +
push 0  +
mov eax dword_4F1744 +
push eax  +
mov eax [ebp+arg_1C] +
push eax  +
call SelectPalette  +
mov [ebp+var_24] eax +
push 0  +
mov eax [ebp+var_24] +
push eax  +
mov eax [ebp+arg_1C] +
push eax  +
call SelectPalette  +
cmp [ebp+var_24] 0 +
jz loc_45BE04  +
push 0FFFFFFFFh  +
mov eax [ebp+var_24] +
push eax  +
mov eax [ebp+var_10] +
push eax  +
call SelectPalette  +
mov [ebp+var_24] eax +
jmp loc_45BE18  +
push 0FFFFFFFFh  +
mov eax dword_4F1744 +
push eax  +
mov eax [ebp+var_10] +
push eax  +
call SelectPalette  +
mov [ebp+var_24] eax +
mov eax [ebp+var_10] +
push eax  +
call RealizePalette  +
push 0CC0020h  +
push esi  +
push ebx  +
mov eax [ebp+arg_0] +
push eax  +
mov eax [ebp+arg_4] +
push eax  +
mov eax [ebp+arg_8] +
push eax  +
push esi  +
push ebx  +
push 0  +
push 0  +
mov eax [ebp+var_10] +
push eax  +
call StretchBlt  +
push 440328h  +
push esi  +
push ebx  +
mov eax [ebp+arg_14] +
push eax  +
mov eax [ebp+arg_18] +
push eax  +
mov eax [ebp+arg_1C] +
push eax  +
push esi  +
push ebx  +
push 0  +
push 0  +
mov eax [ebp+var_10] +
push eax  +
call StretchBlt  +
push 0  +
push edi  +
call SetTextColor  +
mov [ebp+var_1C] eax +
push 0FFFFFFh  +
push edi  +
call SetBkColor  +
mov [ebp+var_20] eax +
push 8800C6h  +
push esi  +
push ebx  +
mov eax [ebp+arg_0] +
push eax  +
mov eax [ebp+arg_4] +
push eax  +
mov eax [ebp+arg_8] +
push eax  +
mov eax [ebp+arg_20] +
push eax  +
mov eax [ebp+arg_24] +
push eax  +
mov eax [ebp+var_8] +
push eax  +
mov eax [ebp+var_4] +
push eax  +
push edi  +
call StretchBlt  +
push 660046h  +
push esi  +
push ebx  +
push 0  +
push 0  +
mov eax [ebp+var_10] +
push eax  +
mov eax [ebp+arg_20] +
push eax  +
mov eax [ebp+arg_24] +
push eax  +
mov eax [ebp+var_8] +
push eax  +
mov eax [ebp+var_4] +
push eax  +
push edi  +
call StretchBlt  +
mov eax [ebp+var_1C] +
push eax  +
push edi  +
call SetTextColor  +
mov eax [ebp+var_20] +
push eax  +
push edi  +
call SetBkColor  +
cmp [ebp+var_18] 0 +
jz loc_45BEF3  +
mov eax [ebp+var_18] +
push eax  +
mov eax [ebp+var_10] +
push eax  +
call SelectObject  +
mov eax [ebp+var_14] +
push eax  +
call DeleteObject  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_45BF2F  +
cmp [ebp+var_24] 0 +
jz loc_45BF1E  +
push 0  +
mov eax [ebp+var_24] +
push eax  +
mov eax [ebp+var_10] +
push eax  +
call SelectPalette  +
mov eax [ebp+var_10] +
push eax  +
call DeleteDC  +
retn   +
jmp unknown_libname_539  +
jmp loc_45BF09  +
mov al [ebp+var_9] +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 28h  +
***
push edi  +
mov esi eax +
mov edi esi +
mov edx 0FFh +
lea eax [edi+edx*4] +
lea ecx [edx+edx*2] +
lea ecx [esi+ecx] +
mov bl [ecx+2] +
mov [eax+2] bl +
mov bl [ecx+1] +
mov [eax+1] bl +
mov cl [ecx] +
mov [eax] cl +
mov byte ptr [eax+3] 0 +
dec edx  +
test edx edx +
jnz loc_45BF48  +
mov byte ptr [edi+3] 0 +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
add esp 0FFFFFFD4h +
mov [ebp+var_8] edx +
mov [ebp+var_4] eax +
lea eax [ebp+SystemInfo] +
push eax  +
call GetSystemInfo  +
mov edx [ebp+var_4] +
mov ecx [ebp+var_8] +
dec ecx  +
js loc_45C03D  +
lea eax [ebp+SystemInfo] +
cmp word ptr [eax+20h] 3 +
jz loc_45C024  +
mov eax [edx+ecx*4] +
bswap eax  +
shr eax 8 +
mov [edx+ecx*4] eax +
dec ecx  +
jns loc_45C014  +
jmp loc_45C03D  +
push ebx  +
xor ebx ebx +
mov eax [edx+ecx*4] +
mov bh al +
mov bl ah +
shr eax 10h +
shl ebx 8 +
mov bl al +
mov [edx+ecx*4] ebx +
dec ecx  +
jns loc_45C025  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
add esp 0FFFFFBF8h +
push ebx  +
mov [ebp+var_408.palVersion] 300h +
mov [ebp+var_408.palNumEntries] 10h +
lea edx [ebp+var_408.palPalEntry] +
mov ecx 40h +
call sub_4B9A24  +
push 0  +
call GetDC  +
mov [ebp+hDC] eax +
xor eax eax +
push ebp  +
push offset loc_45C141  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
push 68h  +
mov eax [ebp+hDC] +
push eax  +
call GetDeviceCaps  +
mov ebx eax +
cmp ebx 10h +
jl loc_45C128  +
lea eax [ebp+var_408.palPalEntry] +
push eax  +
push 8  +
push 0  +
mov eax [ebp+hDC] +
push eax  +
call GetSystemPaletteEntries  +
cmp dword ptr [ebp+var_3E8.peRed] 0C0C0C0h +
jnz loc_45C10A  +
lea eax [ebp+var_3E8] +
push eax  +
push 1  +
mov eax ebx +
sub eax 8 +
push eax  +
mov eax [ebp+hDC] +
push eax  +
call GetSystemPaletteEntries  +
movzx eax [ebp+var_408.palNumEntries] +
lea eax [ebp+eax*4+var_420] +
push eax  +
push 7  +
sub ebx 7 +
push ebx  +
mov eax [ebp+hDC] +
push eax  +
call GetSystemPaletteEntries  +
lea eax [ebp+var_3E4] +
push eax  +
push 1  +
push 7  +
mov eax [ebp+hDC] +
push eax  +
call GetSystemPaletteEntries  +
jmp loc_45C128  +
movzx eax [ebp+var_408.palNumEntries] +
lea eax [ebp+eax*4+var_424] +
push eax  +
push 8  +
sub ebx 8 +
push ebx  +
mov eax [ebp+hDC] +
push eax  +
call GetSystemPaletteEntries  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_45C148  +
mov eax [ebp+hDC] +
push eax  +
push 0  +
call ReleaseDC  +
retn   +
jmp unknown_libname_539  +
jmp loc_45C135  +
lea eax [ebp+var_408] +
push eax  +
call CreatePalette  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
add esp 0FFFFFFF8h +
push ebx  +
mov ebx eax +
mov [ebp+var_1] 0 +
cmp dword_4F1744 0 +
jz loc_45C1E9  +
push 0  +
call GetDC  +
mov [ebp+hDC] eax +
xor edx edx +
push ebp  +
push offset loc_45C1E2  +
push dword ptr fs:[edx]  +
mov fs:[edx] esp +
push 68h  +
mov eax [ebp+hDC] +
push eax  +
call GetDeviceCaps  +
cmp eax 10h +
jl loc_45C1C9  +
lea eax [ebx+4] +
push eax  +
push 8  +
push 0  +
mov eax dword_4F1744 +
push eax  +
call GetPaletteEntries  +
movzx eax word ptr [ebx+2] +
lea eax [ebx+eax*4-1Ch] +
push eax  +
push 8  +
push 8  +
mov eax dword_4F1744 +
push eax  +
call GetPaletteEntries  +
mov [ebp+var_1] 1 +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_45C1E9  +
mov eax [ebp+hDC] +
push eax  +
push 0  +
call ReleaseDC  +
retn   +
jmp unknown_libname_539  +
jmp loc_45C1D6  +
mov al [ebp+var_1] +
pop ebx  +
pop ecx  +
pop ecx  +
pop ebp  +
retn   +
***
push edi  +
add esp 0FFFFFBFCh +
mov edi eax +
xor esi esi +
mov [esp+404h+var_404] 300h +
test edi edi +
jz loc_45C243  +
push 0  +
call CreateCompatibleDC  +
mov ebx eax +
push edi  +
push ebx  +
call SelectObject  +
mov edi eax +
lea eax [esp+404h+var_400] +
push eax  +
push 100h  +
push 0  +
push ebx  +
call GetDIBColorTable  +
mov [esp+404h+var_402] ax +
push edi  +
push ebx  +
call SelectObject  +
push ebx  +
call DeleteDC  +
jmp loc_45C256  +
mov [esp+404h+var_402] cx +
mov eax edx +
lea edx [esp+404h+var_400] +
shl ecx 2 +
call sub_4B9A24  +
cmp [esp+404h+var_402] 0 +
jz loc_45C289  +
cmp [esp+404h+var_402] 10h +
jnz loc_45C271  +
mov eax esp +
call @Graphics@_16619  +
test al al +
jnz loc_45C27F  +
movzx edx [esp+404h+var_402] +
lea eax [esp+404h+var_400] +
call @Graphics@_16617  +
mov eax esp +
push eax  +
call CreatePalette  +
mov esi eax +
mov eax esi +
add esp 404h +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
push ecx  +
mov edi ecx +
mov esi edx +
mov ebx eax +
xor eax eax +
mov [esp+4+var_4] eax +
test ebx ebx +
jz loc_45C2E1  +
push esp  +
push 4  +
push ebx  +
call GetObjectA  +
test eax eax +
jz loc_45C2E1  +
cmp [esp+4+var_4] 0 +
jz loc_45C2E1  +
lea eax [edi+1] +
cmp eax [esp+4+var_4] +
jge loc_45C2C9  +
mov [esp+4+var_4] eax +
push esi  +
mov eax [esp+8+var_4] +
push eax  +
push 0  +
push ebx  +
call GetPaletteEntries  +
mov eax esi +
mov edx [esp+4+var_4] +
call @Graphics@_16617  +
mov eax [esp+4+var_4] +
pop edx  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
add esp 0FFFFFFECh +
test eax eax +
jnz locret_45C4B1  +
mov eax 7FFFFFFFh +
retn   +
***
add esp 0FFFFFFF8h +
add esp 0FFFFFF90h +
push ebx  +
push esi  +
push edi  +
mov [ebp+var_C] ecx +
mov [ebp+var_8] edx +
mov [ebp+var_4] eax +
mov ebx [ebp+arg_4] +
mov eax [ebp+var_C] +
shl eax 4 +
mov [ebp+var_14] eax +
mov eax [ebp+var_14] +
call sub_4A8724  +
mov [ebp+var_10] eax +
xor edx edx +
push ebp  +
push offset loc_45C83B  +
push dword ptr fs:[edx]  +
mov fs:[edx] esp +
mov edx [ebp+var_10] +
mov ecx [ebp+var_14] +
mov eax [ebp+var_4] +
mov esi [eax] +
call dword ptr [esi+8]  +
mov eax [ebx] +
or eax [ebx+4] +
jnz loc_45C5AB  +
push 0Bh  +
call GetSystemMetrics  +
mov edx [ebp+arg_0] +
mov [edx] eax +
push 0Ch  +
call GetSystemMetrics  +
mov edx [ebp+arg_0] +
mov [edx+4] eax +
jmp loc_45C5B8  +
mov eax [ebp+arg_0] +
mov edx [ebx] +
mov [eax] edx +
mov edx [ebx+4] +
mov [eax+4] edx +
push 0  +
call GetDC  +
mov [ebp+hDC] eax +
cmp [ebp+hDC] 0 +
jnz loc_45C5CD  +
call sub_45BA08  +
xor edx edx +
push ebp  +
push offset loc_45C62D  +
push dword ptr fs:[edx]  +
mov fs:[edx] esp +
push 0Eh  +
mov eax [ebp+hDC] +
push eax  +
call GetDeviceCaps  +
mov ebx eax +
push 0Ch  +
mov eax [ebp+hDC] +
push eax  +
call GetDeviceCaps  +
imul bx ax +
mov eax ebx +
cmp ax 8 +
jbe loc_45C608  +
mov [ebp+var_1C] 7FFFFFFFh +
jmp loc_45C614  +
mov ecx eax +
mov eax 1 +
shl eax cl +
mov [ebp+var_1C] eax +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_45C634  +
mov eax [ebp+hDC] +
push eax  +
push 0  +
call ReleaseDC  +
retn   +
jmp unknown_libname_539  +
jmp loc_45C621  +
xor eax eax +
mov [ebp+var_24] eax +
mov eax [ebp+var_10] +
movzx eax word ptr [eax+2] +
call @Graphics@_16623  +
mov [ebp+var_20] eax +
mov edi [ebp+var_C] +
dec edi  +
test edi edi +
jle loc_45C69C  +
mov esi 1 +
mov eax esi +
add eax eax +
mov edx [ebp+var_10] +
movzx eax word ptr [edx+eax*8+2] +
call @Graphics@_16623  +
mov ebx eax +
cmp ebx [ebp+var_1C] +
jg loc_45C698  +
cmp ebx [ebp+var_20] +
jl loc_45C698  +
push ebp  +
mov eax esi +
add eax eax +
mov edx [ebp+var_10] +
lea edx [edx+eax*8] +
mov eax [ebp+var_24] +
add eax eax +
mov ecx [ebp+var_10] +
lea eax [ecx+eax*8] +
call @Graphics@_16611_0  +
pop ecx  +
test al al +
jz loc_45C698  +
mov [ebp+var_24] esi +
mov [ebp+var_20] ebx +
inc esi  +
dec edi  +
jnz loc_45C655  +
mov eax [ebp+var_24] +
add eax eax +
mov edx [ebp+var_10] +
lea eax [edx+eax*8] +
mov [ebp+var_40] eax +
mov eax [ebp+var_40] +
movzx eax byte ptr [eax] +
mov edx [ebp+arg_0] +
mov [edx] eax +
mov eax [ebp+var_40] +
movzx eax byte ptr [eax+1] +
mov edx [ebp+arg_0] +
mov [edx+4] eax +
mov eax [ebp+var_40] +
mov eax [eax+8] +
call sub_4A8724  +
mov [ebp+var_2C] eax +
xor eax eax +
push ebp  +
push offset loc_45C81B  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov eax [ebp+var_40] +
mov edx [eax+0Ch] +
mov eax [ebp+var_14] +
add eax [ebp+arg_8] +
sub edx eax +
mov cx 1 +
mov eax [ebp+var_4] +
mov ebx [eax] +
call dword ptr [ebx+10h]  +
mov eax [ebp+var_40] +
mov ecx [eax+8] +
mov ebx [ebp+var_2C] +
mov edx ebx +
mov eax [ebp+var_4] +
mov esi [eax] +
call dword ptr [esi+8]  +
mov eax [ebp+arg_0] +
push eax  +
lea ecx [ebp+var_38] +
lea edx [ebp+var_34] +
mov eax ebx +
call @Graphics@_16609  +
lea eax [ebp+var_70] +
push eax  +
push 18h  +
mov eax [ebp+var_38] +
push eax  +
call GetObjectA  +
lea eax [ebp+var_58] +
push eax  +
push 18h  +
mov eax [ebp+var_34] +
push eax  +
call GetObjectA  +
mov ebx [ebp+var_64] +
imul ebx [ebp+var_68] +
movzx eax [ebp+var_60] +
imul ebx eax +
mov eax [ebp+var_4C] +
imul  [ebp+var_50] +
movzx edx [ebp+var_48] +
imul  edx +
mov [ebp+var_3C] eax +
mov eax [ebp+var_3C] +
add eax ebx +
mov [ebp+var_18] eax +
mov eax [ebp+var_18] +
call sub_4A8724  +
mov [ebp+var_30] eax +
xor eax eax +
push ebp  +
push offset loc_45C7F8  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov edi [ebp+var_30] +
mov esi [ebp+var_30] +
add esi ebx +
push edi  +
push ebx  +
mov eax [ebp+var_38] +
push eax  +
call GetBitmapBits  +
push esi  +
mov eax [ebp+var_3C] +
push eax  +
mov eax [ebp+var_34] +
push eax  +
call GetBitmapBits  +
mov eax [ebp+var_34] +
push eax  +
call DeleteObject  +
mov eax [ebp+var_38] +
push eax  +
call DeleteObject  +
push esi  +
push edi  +
mov al [ebp+var_46] +
push eax  +
mov al byte ptr [ebp+var_48] +
push eax  +
mov eax [ebp+arg_0] +
mov eax [eax+4] +
push eax  +
mov eax [ebp+arg_0] +
mov eax [eax] +
push eax  +
mov eax hInstance +
push eax  +
call CreateIcon  +
mov edx [ebp+var_8] +
mov [edx] eax +
mov eax [ebp+var_8] +
cmp dword ptr [eax] 0 +
jnz loc_45C7DF  +
call sub_45BA5C  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_45C7FF  +
mov edx [ebp+var_18] +
mov eax [ebp+var_30] +
call sub_4B97E0  +
retn   +
jmp unknown_libname_539  +
jmp loc_45C7EC  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_45C822  +
mov eax [ebp+var_40] +
mov edx [eax+8] +
mov eax [ebp+var_2C] +
call sub_4B97E0  +
retn   +
jmp unknown_libname_539  +
jmp loc_45C80C  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_45C842  +
mov edx [ebp+var_14] +
mov eax [ebp+var_10] +
call sub_4B97E0  +
retn   +
jmp unknown_libname_539  +
jmp loc_45C82F  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 0Ch  +
***
push edi  +
add esp 0FFFFFFD8h +
push ebx  +
push esi  +
mov esi ecx +
mov ebx edx +
lea edx [ebp+var_28] +
mov ecx [ebp+arg_0] +
call @Graphics@_16614  +
mov ax [ebp+var_1A] +
cmp ax 8 +
jbe loc_45C962  +
mov dword ptr [ebx] 28h +
test [ebp+var_18] 3 +
jz loc_45C986  +
add dword ptr [ebx] 0Ch +
jmp loc_45C986  +
mov edx [ebp+var_8] +
test edx edx +
jnz loc_45C97C  +
mov ecx eax +
mov eax 1 +
shl eax cl +
shl eax 2 +
add eax 28h +
mov [ebx] eax +
jmp loc_45C986  +
mov eax edx +
shl eax 2 +
add eax 28h +
mov [ebx] eax +
mov eax [ebp+var_14] +
mov [esi] eax +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 4  +
***
retn   +
***
add esp 0FFFFFFF4h +
push ebx  +
test eax eax +
jnz locret_45CA6D  +
call nullsub_4  +
retn   +
***
add esp 0FFFFFFACh +
test dl dl +
jz loc_45CC7A  +
add esp 0FFFFFFF0h +
call unknown_libname_535  +
mov ebx edx +
mov esi eax +
xor edx edx +
mov eax esi +
call @System@TObject@$bctr$qqrv  +
mov eax esi +
test bl bl +
jz loc_45CC9C  +
call sub_4BABC8  +
pop large dword ptr fs:0  +
add esp 0Ch +
mov eax esi +
pop esi  +
pop ebx  +
retn   +
***
cmp word ptr [eax+12h] 0 +
push ebx  +
mov eax [ebp+arg_0] +
mov eax [eax-4] +
cmp dword ptr [eax+20h] 0 +
jz loc_45CD03  +
mov eax [ebp+arg_0] +
mov eax [eax-4] +
mov ebx [eax+20h] +
mov eax ebx +
mov edx ds:off_4595F4 +
call @System@@IsClass$qqrp14System@TObjectp17System@TMetaClass  +
test al al +
jz loc_45CCFE  +
mov eax [ebp+arg_0] +
mov edx ebx +
mov eax [ebp+arg_0] +
mov eax [eax-8] +
mov ecx [eax] +
call dword ptr [ecx+18h]  +
test al al +
jz loc_45CCFE  +
xor eax eax +
jmp loc_45CD10  +
mov al 1 +
pop ebx  +
pop ebp  +
retn   +
mov eax [ebp+arg_0] +
mov eax [eax-8] +
mov edx [eax] +
call dword ptr [edx+1Ch]  +
xor al 1 +
pop ebx  +
pop ebp  +
retn   +
***
add esp 0FFFFFFF8h +
push ebx  +
mov [ebp+var_4] edx +
mov [ebp+var_8] eax +
mov eax [ebp+var_8] +
push eax  +
mov eax [eax] +
mov eax [eax+30h] +
push eax  +
mov eax [ebp+var_8] +
push eax  +
mov eax [eax] +
mov eax [eax+44h] +
push eax  +
push ebp  +
call @Graphics@_16637  +
pop ecx  +
mov ecx eax +
mov edx offset _str_Data.Text +
mov eax [ebp+var_4] +
mov ebx [eax] +
call dword ptr [ebx+8]  +
pop ebx  +
pop ecx  +
pop ecx  +
pop ebp  +
retn   +
***
add esp 0FFFFFFF4h +
push ebx  +
push esi  +
push edi  +
mov esi edx +
mov ebx eax +
test esi esi +
jz loc_45CD85  +
mov eax ebx +
call @System@TObject@ClassType$qqrv  +
mov edi eax +
mov eax esi +
call @System@TObject@ClassType$qqrv  +
cmp edi eax +
jz loc_45CD89  +
xor eax eax +
jmp loc_45CD8B  +
mov al 1 +
mov [ebp+var_1] al +
mov eax ebx +
mov edx [eax] +
call dword ptr [edx+1Ch]  +
test al al +
jnz loc_45CDA4  +
mov eax esi +
mov edx [eax] +
call dword ptr [edx+1Ch]  +
test al al +
jz loc_45CDC8  +
mov eax ebx +
mov edx [eax] +
call dword ptr [edx+1Ch]  +
test al al +
jz loc_45CDBA  +
mov eax esi +
mov edx [eax] +
call dword ptr [edx+1Ch]  +
test al al +
jnz loc_45CDBE  +
xor eax eax +
jmp loc_45CDC0  +
mov al 1 +
mov [ebp+var_1] al +
jmp loc_45CEA1  +
cmp [ebp+var_1] 0 +
jz loc_45CEA1  +
mov dl 1 +
mov eax ds:off_49AEB4 +
call @System@TObject@$bctr$qqrv  +
mov [ebp+var_8] eax +
xor eax eax +
push ebp  +
push offset loc_45CE9A  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov edx [ebp+var_8] +
mov eax ebx +
mov ecx [eax] +
call dword ptr [ecx+44h]  +
mov dl 1 +
mov eax ds:off_49AEB4 +
call @System@TObject@$bctr$qqrv  +
mov [ebp+var_C] eax +
xor eax eax +
push ebp  +
push offset loc_45CE7D  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov edx [ebp+var_C] +
mov eax esi +
mov ecx [eax] +
call dword ptr [ecx+44h]  +
mov eax [ebp+var_8] +
call sub_49F1E8  +
push edx  +
push eax  +
mov eax [ebp+var_C] +
call sub_49F1E8  +
cmp edx [esp+38h+var_34] +
jnz loc_45CE3B  +
cmp eax [esp+38h+var_38] +
pop edx  +
pop eax  +
jnz loc_45CE5E  +
mov eax [ebp+var_8] +
call sub_49F1E8  +
mov ecx eax +
mov eax [ebp+var_C] +
mov edx [eax+4] +
mov eax [ebp+var_8] +
mov eax [eax+4] +
call @CompareMem$qqrpvt1i  +
test al al +
jnz loc_45CE62  +
xor eax eax +
jmp loc_45CE64  +
mov al 1 +
mov [ebp+var_1] al +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_45CE84  +
mov eax [ebp+var_C] +
call @System@TObject@Free$qqrv  +
retn   +
jmp unknown_libname_539  +
jmp loc_45CE74  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_45CEA1  +
mov eax [ebp+var_8] +
call @System@TObject@Free$qqrv  +
retn   +
jmp unknown_libname_539  +
jmp loc_45CE91  +
mov al [ebp+var_1] +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
retn   +
***
push ecx  +
push esi  +
mov esi eax +
push 20h  +
mov ecx edx +
mov eax ds:off_49ADC4 +
mov dl 1 +
call sub_49F6D0  +
mov [ebp+var_4] eax +
xor eax eax +
push ebp  +
push offset loc_45CEFC  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov edx [ebp+var_4] +
mov eax esi +
mov ecx [eax] +
call dword ptr [ecx+54h]  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_45CF03  +
mov eax [ebp+var_4] +
call @System@TObject@Free$qqrv  +
retn   +
jmp unknown_libname_539  +
jmp loc_45CEF3  +
pop esi  +
pop ecx  +
pop ebp  +
retn   +
***
push ebx  +
mov eax esi +
push ecx  +
push esi  +
mov esi eax +
push 0FFFFh  +
mov ecx edx +
mov eax ds:off_49ADC4 +
mov dl 1 +
call sub_49F6D0  +
mov [ebp+var_4] eax +
xor eax eax +
push ebp  +
push offset loc_45CF87  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov edx [ebp+var_4] +
mov eax esi +
mov ecx [eax] +
call dword ptr [ecx+58h]  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_45CF8E  +
mov eax [ebp+var_4] +
call @System@TObject@Free$qqrv  +
retn   +
jmp unknown_libname_539  +
jmp loc_45CF7E  +
pop esi  +
pop ecx  +
pop ebp  +
retn   +
***
cmp dl [eax+21h] +
mov eax esi +
mov ecx [eax] +
call dword ptr [ecx+58h]  +
pop esi  +
retn   +
***
add esp 0FFFFFFF4h +
mov eax dword_4E645C +
call @Mxarrays@TThreadCustomArray@LockArray$qqrv  +
mov [ebp+var_8] eax +
xor eax eax +
push ebp  +
push offset loc_45D0EE  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov eax [ebp+var_8] +
mov eax [eax+8] +
dec eax  +
cmp eax 0 +
jl loc_45D0D6  +
mov [ebp+var_4] eax +
mov edx [ebp+var_4] +
mov eax [ebp+var_8] +
call @Classes@TList@Get$qqri  +
mov [ebp+var_C] eax +
mov eax [ebp+var_C] +
call @Graphics@TCanvas@TryLock$qqrv  +
test al al +
jz loc_45D0CD  +
xor eax eax +
push ebp  +
push offset loc_45D0C6  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov eax [ebp+var_C] +
call @Graphics@_16752  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_45D0CD  +
mov eax [ebp+var_C] +
call @Graphics@TCanvas@Unlock$qqrv  +
retn   +
jmp unknown_libname_539  +
jmp loc_45D0BD  +
dec [ebp+var_4]  +
cmp [ebp+var_4] 0FFFFFFFFh +
jnz loc_45D080  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_45D0F5  +
mov eax dword_4E645C +
call sub_49D170  +
retn   +
jmp unknown_libname_539  +
jmp loc_45D0E3  +
mov esp ebp +
pop ebp  +
retn   +
***
push ecx  +
push edi  +
call unknown_libname_536  +
push ecx  +
push ebx  +
mov [ebp+var_4] eax +
mov eax [ebp+var_4] +
cmp dword ptr [eax+4] 0 +
jz loc_45D27B  +
mov eax [ebp+var_4] +
call @Graphics@TCanvas@Lock$qqrv  +
xor edx edx +
push ebp  +
push offset loc_45D274  +
push dword ptr fs:[edx]  +
mov fs:[edx] esp +
mov eax [ebp+var_4] +
mov eax [eax+5Ch] +
test eax eax +
jz loc_45D222  +
push eax  +
mov eax [ebp+var_4] +
mov eax [eax+4] +
push eax  +
call SelectObject  +
mov eax [ebp+var_4] +
mov eax [eax+60h] +
test eax eax +
jz loc_45D23B  +
push 0FFFFFFFFh  +
push eax  +
mov eax [ebp+var_4] +
mov eax [eax+4] +
push eax  +
call SelectPalette  +
mov eax [ebp+var_4] +
mov ebx [eax+4] +
xor edx edx +
mov eax [ebp+var_4] +
call @Graphics@TCanvas@SetHandle$qqrui  +
push ebx  +
call DeleteDC  +
mov edx [ebp+var_4] +
mov eax dword_4E645C +
call sub_49D120  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_45D27B  +
mov eax [ebp+var_4] +
call @Graphics@TCanvas@Unlock$qqrv  +
retn   +
jmp unknown_libname_539  +
jmp loc_45D26B  +
pop ebx  +
pop ecx  +
pop ebp  +
retn   +
***
push ecx  +
push ebx  +
push esi  +
mov [ebp+var_4] eax +
mov eax [ebp+var_4] +
cmp dword ptr [eax+58h] 0 +
jz loc_45D366  +
mov eax [ebp+var_4] +
call @Graphics@TCanvas@Lock$qqrv  +
xor eax eax +
push ebp  +
push offset loc_45D35F  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov eax [ebp+var_4] +
mov eax [eax+58h] +
call @Graphics@TBitmap@HandleNeeded$qqrv  +
mov eax [ebp+var_4] +
mov eax [eax+58h] +
mov eax [eax+28h] +
mov eax [eax+8] +
call @Graphics@_16749  +
mov eax [ebp+var_4] +
mov eax [eax+58h] +
call @Graphics@TBitmap@PaletteNeeded$qqrv  +
push 0  +
call CreateCompatibleDC  +
mov ebx eax +
mov eax [ebp+var_4] +
mov eax [eax+58h] +
mov eax [eax+28h] +
mov esi [eax+8] +
test esi esi +
jz loc_45D2FB  +
push esi  +
push ebx  +
call SelectObject  +
mov edx [ebp+var_4] +
mov [edx+5Ch] eax +
jmp loc_45D303  +
mov eax [ebp+var_4] +
xor edx edx +
mov [eax+5Ch] edx +
mov eax [ebp+var_4] +
mov eax [eax+58h] +
mov eax [eax+28h] +
mov esi [eax+10h] +
test esi esi +
jz loc_45D32A  +
push 0FFFFFFFFh  +
push esi  +
push ebx  +
call SelectPalette  +
mov edx [ebp+var_4] +
mov [edx+60h] eax +
push ebx  +
call RealizePalette  +
jmp loc_45D332  +
mov eax [ebp+var_4] +
xor edx edx +
mov [eax+60h] edx +
mov edx ebx +
mov eax [ebp+var_4] +
call @Graphics@TCanvas@SetHandle$qqrui  +
mov edx [ebp+var_4] +
mov eax dword_4E645C +
call @Classes@TThreadList@Add$qqrpv  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_45D366  +
mov eax [ebp+var_4] +
call @Graphics@TCanvas@Unlock$qqrv  +
retn   +
jmp unknown_libname_539  +
jmp loc_45D356  +
pop esi  +
pop ebx  +
pop ecx  +
pop ebp  +
retn   +
***
test ebx ebx +
jz loc_45D38D  +
dec dword ptr [ebx+4]  +
cmp dword ptr [ebx+4] 0 +
jnz loc_45D38D  +
mov eax ebx +
mov edx [eax] +
call dword ptr [edx]  +
mov eax ebx +
call @System@TObject@Free$qqrv  +
pop ebx  +
retn   +
***
call unknown_libname_536  +
mov ebx edx +
mov esi eax +
mov eax [esi+14h] +
test eax eax +
jz loc_45D3B5  +
call @Graphics@_16749  +
mov eax [esi+14h] +
push eax  +
call DeleteObject  +
xor eax eax +
mov [esi+14h] eax +
mov eax esi +
mov edx [eax] +
call dword ptr [edx]  +
mov eax [esi+64h] +
test eax eax +
jz loc_45D3C8  +
push eax  +
call CloseHandle  +
lea eax [esi+6Ch] +
call @Sysutils@FreeAndNil$qqrpv  +
mov edx ebx +
and dl 0FCh +
mov eax esi +
call sub_4BA7FC  +
test bl bl +
jle loc_45D3E7  +
mov eax esi +
call @System@@ClassDestroy$qqrp14System@TObject  +
pop esi  +
pop ebx  +
retn   +
***
mov eax [ebx+8] +
test eax eax +
jz loc_45D409  +
cmp eax [ebx+14h] +
jz loc_45D409  +
call @Graphics@_16749  +
mov eax [ebx+8] +
push eax  +
call DeleteObject  +
mov eax [ebx+0Ch] +
test eax eax +
jz loc_45D423  +
call @Graphics@_16749  +
mov eax [ebx+0Ch] +
push eax  +
call DeleteObject  +
xor eax eax +
mov [ebx+0Ch] eax +
mov eax [ebx+10h] +
call @Graphics@_16457  +
xor eax eax +
mov [ebx+8] eax +
xor eax eax +
mov [ebx+10h] eax +
pop ebx  +
retn   +
***
add esp 0FFFFFBF0h +
test byte ptr [eax+28h] 3 +
jz locret_45D53C  +
cmp dword ptr [eax+40h] 0 +
jnz locret_45D53C  +
mov dx [eax+26h] +
cmp dx 10h +
jnz loc_45D521  +
mov dword ptr [eax+40h] 0F800h +
mov dword ptr [eax+44h] 7E0h +
mov dword ptr [eax+48h] 1Fh +
jmp locret_45D53C  +
cmp dx 20h +
jnz locret_45D53C  +
mov dword ptr [eax+40h] 0FF0000h +
mov dword ptr [eax+44h] 0FF00h +
mov dword ptr [eax+48h] 0FFh +
retn   +
***
add esp 0FFFFFF68h +
push ebx  +
push esi  +
push edi  +
mov [ebp+var_C] ecx +
mov [ebp+var_8] edx +
mov [ebp+var_4] eax +
xor eax eax +
mov [ebp+var_10] eax +
mov eax [ebp+arg_4] +
cmp dword ptr [eax+18h] 0 +
jz loc_45D57D  +
mov eax [ebp+arg_4] +
cmp dword ptr [eax+1Ch] 0 +
jz loc_45DB95  +
mov eax [ebp+arg_4] +
cmp dword ptr [eax+20h] 0 +
jz loc_45DB95  +
mov eax [ebp+arg_4] +
cmp dword ptr [eax+18h] 0 +
jnz loc_45D5A0  +
mov eax [ebp+arg_4] +
cmp dword ptr [eax+4] 0 +
jz loc_45DB95  +
mov eax [ebp+arg_4] +
cmp dword ptr [eax+8] 0 +
jz loc_45DB95  +
mov eax [ebp+var_4] +
call @Graphics@_16749  +
xor eax eax +
mov [ebp+var_70] eax +
cmp [ebp+var_4] 0 +
jz loc_45D5CF  +
lea eax [ebp+var_88] +
push eax  +
push 54h  +
mov eax [ebp+var_4] +
push eax  +
call GetObjectA  +
cmp eax 18h +
jge loc_45D5CF  +
call sub_45B9F0  +
push 0  +
call GetDC  +
call @Graphics@_16597  +
mov [ebp+var_18] eax +
mov eax [ebp+var_18] +
push eax  +
call CreateCompatibleDC  +
call @Graphics@_16597  +
mov [ebp+hDC] eax +
xor edx edx +
push ebp  +
push offset loc_45DB8E  +
push dword ptr fs:[edx]  +
mov fs:[edx] esp +
mov eax [ebp+arg_4] +
cmp dword ptr [eax+18h] 28h +
jnb loc_45D664  +
mov eax [ebp+arg_4] +
mov ax [eax+10h] +
mov edx [ebp+arg_4] +
or ax [edx+12h] +
cmp ax 1 +
jnz loc_45D640  +
push 0  +
push 1  +
push 1  +
mov eax [ebp+arg_4] +
mov eax [eax+8] +
push eax  +
mov eax [ebp+arg_4] +
mov eax [eax+4] +
push eax  +
call CreateBitmap  +
call @Graphics@_16597  +
mov [ebp+var_10] eax +
jmp loc_45D89F  +
mov eax [ebp+arg_4] +
mov eax [eax+8] +
push eax  +
mov eax [ebp+arg_4] +
mov eax [eax+4] +
push eax  +
mov eax [ebp+var_18] +
push eax  +
call CreateCompatibleBitmap  +
call @Graphics@_16597  +
mov [ebp+var_10] eax +
jmp loc_45D89F  +
mov eax 42Ch +
call sub_4B97C0  +
mov [ebp+var_24] eax +
xor edx edx +
push ebp  +
push offset loc_45D898  +
push dword ptr fs:[edx]  +
mov fs:[edx] esp +
mov eax [ebp+arg_4] +
mov dword ptr [eax+18h] 28h +
mov eax [ebp+arg_4] +
mov word ptr [eax+24h] 1 +
mov eax [ebp+arg_4] +
cmp word ptr [eax+26h] 0 +
jnz loc_45D6BF  +
push 0Ch  +
mov eax [ebp+var_18] +
push eax  +
call GetDeviceCaps  +
mov ebx eax +
push 0Eh  +
mov eax [ebp+var_18] +
push eax  +
call GetDeviceCaps  +
imul bx ax +
mov eax [ebp+arg_4] +
mov [eax+26h] bx +
mov eax [ebp+arg_4] +
mov edx [ebp+var_24] +
lea esi [eax+18h] +
mov edi edx +
mov ecx 0Ah +
movs   +
mov eax [ebp+arg_4] +
mov eax [eax+1Ch] +
mov edx [ebp+arg_4] +
mov [edx+4] eax +
mov eax [ebp+arg_4] +
mov eax [eax+20h] +
mov edx [ebp+arg_4] +
mov [edx+8] eax +
mov eax [ebp+arg_4] +
cmp word ptr [eax+26h] 8 +
ja loc_45D7BE  +
mov eax [ebp+arg_4] +
cmp word ptr [eax+26h] 1 +
jnz loc_45D729  +
cmp [ebp+var_4] 0 +
jz loc_45D70D  +
cmp [ebp+var_74] 0 +
jnz loc_45D729  +
mov eax [ebp+var_24] +
xor edx edx +
mov [eax+28h] edx +
mov eax [ebp+var_24] +
add eax 28h +
add eax 4 +
mov dword ptr [eax] 0FFFFFFh +
jmp loc_45D7FB  +
cmp [ebp+var_C] 0 +
jz loc_45D747  +
mov eax [ebp+var_24] +
lea edx [eax+28h] +
mov ecx 0FFh +
mov eax [ebp+var_C] +
call @Graphics@_16621  +
jmp loc_45D7FB  +
cmp [ebp+var_4] 0 +
jz loc_45D7FB  +
mov eax [ebp+var_4] +
push eax  +
mov eax [ebp+hDC] +
push eax  +
call SelectObject  +
mov [ebp+var_14] eax +
cmp [ebp+var_70] 0 +
jbe loc_45D78C  +
cmp [ebp+var_74] 0 +
jz loc_45D78C  +
mov eax [ebp+var_24] +
add eax 28h +
push eax  +
push 100h  +
push 0  +
mov eax [ebp+hDC] +
push eax  +
call GetDIBColorTable  +
mov edx [ebp+arg_4] +
mov [edx+38h] eax +
jmp loc_45D7AF  +
push 0  +
mov eax [ebp+var_24] +
push eax  +
push 0  +
mov eax [ebp+arg_4] +
mov eax [eax+20h] +
cdq   +
xor eax edx +
sub eax edx +
push eax  +
push 0  +
mov eax [ebp+var_4] +
push eax  +
mov eax [ebp+hDC] +
push eax  +
call GetDIBits  +
mov eax [ebp+var_14] +
push eax  +
mov eax [ebp+hDC] +
push eax  +
call SelectObject  +
jmp loc_45D7FB  +
mov eax [ebp+arg_4] +
mov ax [eax+26h] +
cmp ax 10h +
jz loc_45D7D4  +
mov edx [ebp+arg_4] +
cmp ax 20h +
jnz loc_45D7FB  +
mov eax [ebp+arg_4] +
test byte ptr [eax+28h] 3 +
jz loc_45D7FB  +
mov eax [ebp+arg_4] +
call @Graphics@_16765  +
mov eax [ebp+var_24] +
lea edx [eax+28h] +
mov eax [ebp+arg_4] +
add eax 40h +
mov ecx 0Ch +
call sub_4B9A24  +
push 0  +
push 0  +
lea eax [ebp+var_28] +
push eax  +
push 0  +
mov eax [ebp+var_24] +
push eax  +
mov eax [ebp+var_18] +
push eax  +
call CreateDIBSection  +
call @Graphics@_16597  +
mov [ebp+var_10] eax +
cmp [ebp+var_28] 0 +
jnz loc_45D825  +
call sub_45BA5C  +
cmp [ebp+var_4] 0 +
jz loc_45D882  +
mov eax [ebp+arg_4] +
mov eax [eax+1Ch] +
cmp eax [ebp+var_84] +
jnz loc_45D882  +
mov eax [ebp+arg_4] +
mov eax [eax+20h] +
cmp eax [ebp+var_80] +
jnz loc_45D882  +
mov eax [ebp+arg_4] +
cmp word ptr [eax+26h] 8 +
jbe loc_45D882  +
push 0  +
mov eax [ebp+var_24] +
push eax  +
mov eax [ebp+var_28] +
push eax  +
mov eax [ebp+arg_4] +
mov eax [eax+20h] +
cdq   +
xor eax edx +
sub eax edx +
push eax  +
push 0  +
mov eax [ebp+var_4] +
push eax  +
mov eax [ebp+hDC] +
push eax  +
call GetDIBits  +
call @System@@TryFinallyExit$qqrv  +
call @System@@TryFinallyExit$qqrv  +
jmp loc_45DB95  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_45D89F  +
mov eax [ebp+var_24] +
call sub_4B97E0  +
retn   +
jmp unknown_libname_539  +
jmp loc_45D88F  +
mov eax [ebp+var_10] +
call @Graphics@_16597  +
mov eax [ebp+var_10] +
push eax  +
mov eax [ebp+hDC] +
push eax  +
call SelectObject  +
call @Graphics@_16597  +
mov [ebp+var_14] eax +
xor eax eax +
push ebp  +
push offset loc_45DB3F  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
xor eax eax +
push ebp  +
push offset loc_45DB2E  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
xor eax eax +
mov [ebp+var_34] eax +
xor ebx ebx +
cmp [ebp+var_C] 0 +
jz loc_45D900  +
push 0  +
mov eax [ebp+var_C] +
push eax  +
mov eax [ebp+hDC] +
push eax  +
call SelectPalette  +
mov [ebp+var_34] eax +
mov eax [ebp+hDC] +
push eax  +
call RealizePalette  +
xor eax eax +
push ebp  +
push offset loc_45DB0C  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
cmp [ebp+arg_0] 0 +
jz loc_45D9CD  +
mov eax [ebp+arg_0] +
mov eax [eax+14h] +
call @Graphics@TBrush@GetHandle$qqrv  +
push eax  +
mov eax [ebp+arg_4] +
mov eax [eax+8] +
push eax  +
lea eax [ebp+rc] +
push eax  +
mov ecx [ebp+arg_4] +
mov ecx [ecx+4] +
xor edx edx +
xor eax eax +
call sub_49B708  +
lea eax [ebp+rc] +
push eax  +
mov eax [ebp+hDC] +
push eax  +
call FillRect  +
mov eax [ebp+arg_0] +
mov eax [eax+0Ch] +
mov eax [eax+18h] +
call @Graphics@ColorToRGB$qqr15Graphics@TColor  +
push eax  +
mov eax [ebp+hDC] +
push eax  +
call SetTextColor  +
mov eax [ebp+arg_0] +
mov eax [eax+14h] +
call sub_45AF0C  +
call @Graphics@ColorToRGB$qqr15Graphics@TColor  +
push eax  +
mov eax [ebp+hDC] +
push eax  +
call SetBkColor  +
mov eax [ebp+arg_4] +
cmp word ptr [eax+26h] 1 +
jnz loc_45D9ED  +
mov eax [ebp+arg_4] +
cmp dword ptr [eax+14h] 0 +
jz loc_45D9ED  +
mov eax [ebp+arg_0] +
mov eax [eax+0Ch] +
mov eax [eax+18h] +
call @Graphics@ColorToRGB$qqr15Graphics@TColor  +
mov dword ptr [ebp+var_30.rgbBlue] eax +
mov eax [ebp+arg_0] +
mov eax [eax+14h] +
call sub_45AF0C  +
call @Graphics@ColorToRGB$qqr15Graphics@TColor  +
mov [ebp+var_2C] eax +
lea eax [ebp+var_30] +
push eax  +
push 2  +
push 0  +
mov eax [ebp+hDC] +
push eax  +
call SetDIBColorTable  +
jmp loc_45D9ED  +
push 0FF0062h  +
mov eax [ebp+arg_4] +
mov eax [eax+8] +
push eax  +
mov eax [ebp+arg_4] +
mov eax [eax+4] +
push eax  +
push 0  +
push 0  +
mov eax [ebp+hDC] +
push eax  +
call PatBlt  +
cmp [ebp+var_4] 0 +
jz loc_45DAE9  +
mov eax [ebp+var_18] +
push eax  +
call CreateCompatibleDC  +
call @Graphics@_16597  +
mov [ebp+var_20] eax +
xor eax eax +
push ebp  +
push offset loc_45DAE2  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov eax [ebp+var_4] +
push eax  +
mov eax [ebp+var_20] +
push eax  +
call SelectObject  +
call @Graphics@_16597  +
mov esi eax +
cmp [ebp+var_8] 0 +
jz loc_45DA4A  +
push 0  +
mov eax [ebp+var_8] +
push eax  +
mov eax [ebp+var_20] +
push eax  +
call SelectPalette  +
mov ebx eax +
mov eax [ebp+var_20] +
push eax  +
call RealizePalette  +
cmp [ebp+arg_0] 0 +
jz loc_45DA82  +
mov eax [ebp+arg_0] +
mov eax [eax+0Ch] +
mov eax [eax+18h] +
call @Graphics@ColorToRGB$qqr15Graphics@TColor  +
push eax  +
mov eax [ebp+var_20] +
push eax  +
call SetTextColor  +
mov eax [ebp+arg_0] +
mov eax [eax+14h] +
call sub_45AF0C  +
call @Graphics@ColorToRGB$qqr15Graphics@TColor  +
push eax  +
mov eax [ebp+var_20] +
push eax  +
call SetBkColor  +
push 0CC0020h  +
push 0  +
push 0  +
mov eax [ebp+var_20] +
push eax  +
mov eax [ebp+arg_4] +
mov eax [eax+8] +
push eax  +
mov eax [ebp+arg_4] +
mov eax [eax+4] +
push eax  +
push 0  +
push 0  +
mov eax [ebp+hDC] +
push eax  +
call BitBlt  +
cmp [ebp+var_8] 0 +
jz loc_45DABC  +
push 0FFFFFFFFh  +
push ebx  +
mov eax [ebp+var_20] +
push eax  +
call SelectPalette  +
push esi  +
mov eax [ebp+var_20] +
push eax  +
call SelectObject  +
call @Graphics@_16597  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_45DAE9  +
mov eax [ebp+var_20] +
push eax  +
call DeleteDC  +
retn   +
jmp unknown_libname_539  +
jmp loc_45DAD8  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_45DB13  +
cmp [ebp+var_C] 0 +
jz locret_45DB0B  +
push 0FFFFFFFFh  +
mov eax [ebp+var_34] +
push eax  +
mov eax [ebp+hDC] +
push eax  +
call SelectPalette  +
retn   +
jmp unknown_libname_539  +
jmp loc_45DAF6  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_45DB35  +
mov eax [ebp+var_14] +
push eax  +
mov eax [ebp+hDC] +
push eax  +
call SelectObject  +
retn   +
jmp unknown_libname_539  +
jmp loc_45DB20  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
jmp loc_45DB57  +
jmp @System@@HandleAnyException$qqrv  +
mov eax [ebp-10h] +
push eax  +
call DeleteObject  +
call @System@@RaiseAgain$qqrv  +
call @@DoneExcept$qqrv  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_45DB95  +
mov eax [ebp+hDC] +
push eax  +
call DeleteDC  +
mov eax [ebp+var_18] +
push eax  +
push 0  +
call ReleaseDC  +
cmp [ebp+var_10] 0 +
jz locret_45DB8D  +
mov eax [ebp+arg_4] +
push eax  +
push 54h  +
mov eax [ebp+var_10] +
push eax  +
call GetObjectA  +
retn   +
jmp unknown_libname_539  +
jmp loc_45DB64  +
mov eax [ebp+var_10] +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 8  +
***
add esp 0FFFFFBF8h +
mov ebx eax +
xor esi esi +
test ebx ebx +
jz loc_45DBFA  +
xor eax eax +
mov [esp+408h+var_408] eax +
push esp  +
push 4  +
push ebx  +
call GetObjectA  +
test eax eax +
jz loc_45DBFA  +
cmp [esp+408h+var_408] 0 +
jz loc_45DBFA  +
mov [esp+408h+var_404.palVersion] 300h +
mov ax word ptr [esp+408h+var_408] +
mov [esp+408h+var_404.palNumEntries] ax +
lea eax [esp+408h+var_404.palPalEntry] +
push eax  +
mov eax [esp+40Ch+var_408] +
push eax  +
push 0  +
push ebx  +
call GetPaletteEntries  +
lea eax [esp+408h+var_404] +
push eax  +
call CreatePalette  +
mov esi eax +
mov eax esi +
add esp 408h +
pop esi  +
pop ebx  +
retn   +
***
add esp 0FFFFFF90h +
push edi  +
call unknown_libname_536  +
add esp 0FFFFFFA8h +
retn   +
***
jmp @__unlockDebuggerData$qv  +
***
mov eax [ebp-4] +
mov edx [eax] +
call dword ptr [edx+24h]  +
test eax eax +
setnz al  +
mov edx [ebp-4] +
mov [edx+22h] al +
mov edx [ebp-4] +
mov eax [ebp-4] +
mov ecx [eax] +
call dword ptr [ecx+10h]  +
jmp loc_45DFA1  +
***
mov edx ebx +
mov eax [ebp+var_4] +
call @Classes@TPersistent@Assign$qqrp19Classes@TPersistent  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
add esp 0FFFFFFA4h +
push ebx  +
push esi  +
push edi  +
mov esi [ebp+arg_0] +
lea edi [ebp+var_5C] +
push ecx  +
mov ecx 15h +
movs   +
pop ecx  +
mov esi ecx +
mov edi edx +
mov ebx eax +
mov eax ebx +
call @Graphics@TBitmap@FreeContext$qqrv  +
xor eax eax +
mov [ebp+var_4] eax +
xor eax eax +
mov [ebp+var_8] eax +
xor eax eax +
push ebp  +
push offset loc_45E037  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
cmp esi dword_4F1744 +
jnz loc_45DFF2  +
mov [ebp+var_8] esi +
jmp loc_45DFFC  +
mov eax esi +
call @Graphics@CopyPalette$qqrui  +
mov [ebp+var_8] eax +
lea eax [ebp+var_5C] +
push eax  +
mov eax [ebx+2Ch] +
push eax  +
mov ecx [ebp+var_8] +
mov edx esi +
mov eax edi +
call @Graphics@_16766  +
mov [ebp+var_4] eax +
lea eax [ebp+var_5C] +
push eax  +
mov eax [ebx+28h] +
mov al [eax+70h] +
push eax  +
push 0  +
mov ecx [ebp+var_8] +
mov edx [ebp+var_4] +
mov eax ebx +
call @Graphics@TBitmap@NewImage$qqruiuirx13tagDIBSECTIONop15Classes@TStream  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
jmp loc_45E05D  +
jmp @System@@HandleAnyException$qqrv  +
mov eax [ebp-8] +
call @Graphics@_16457  +
cmp dword ptr [ebp-4] 0 +
jz loc_45E053  +
mov eax [ebp-4] +
push eax  +
call DeleteObject  +
call @System@@RaiseAgain$qqrv  +
call @@DoneExcept$qqrv  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 4  +
***
mov eax ebx +
call @Graphics@TBitmap@FreeImage$qqrv  +
mov eax [ebx+28h] +
xor edx edx +
mov [eax+50h] edx +
xor edx edx +
mov [eax+54h] edx +
add eax 6Ch +
call @Sysutils@FreeAndNil$qqrpv  +
pop ebx  +
retn   +
***
mov byte ptr [eax+31h] 0 +
call @Graphics@TGraphic@Changed$qqrp14System@TObject  +
retn   +
***
push edi  +
add esp 0FFFFFFACh +
mov ebx eax +
mov dl 1 +
mov eax ds:off_49AEB4 +
call @System@TObject@$bctr$qqrv  +
mov esi eax +
mov edx esi +
mov eax ebx +
mov ecx [eax] +
call dword ptr [ecx+58h]  +
mov eax esi +
call sub_49F1E8  +
push edx  +
push eax  +
mov eax esi +
call sub_49F238  +
mov eax [ebx+28h] +
push esi  +
lea esi [eax+18h] +
lea edi [esp+58h+var_54] +
mov ecx 15h +
movs   +
pop esi  +
xor eax eax +
mov [esp+54h+var_40] eax +
mov eax ebx +
call @Graphics@TBitmap@FreeContext$qqrv  +
lea eax [ebx+2Ch] +
call @Sysutils@FreeAndNil$qqrpv  +
push esp  +
mov eax [ebx+28h] +
mov al [eax+70h] +
push eax  +
push esi  +
xor ecx ecx +
xor edx edx +
mov eax ebx +
call @Graphics@TBitmap@NewImage$qqruiuirx13tagDIBSECTIONop15Classes@TStream  +
add esp 54h +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
add esp 0FFFFFFE4h +
push ebx  +
push esi  +
push edi  +
mov edi ecx +
mov [ebp+var_4] edx +
mov ebx eax +
mov esi [ebx+28h] +
mov dl ds:byte_45E358 +
mov eax [ebp+var_4] +
call @Graphics@TCanvas@RequiredState$qqr50System@_Set$t22Graphics@TCanvasStates$iuc$0$iuc$3_  +
mov eax ebx +
call @Graphics@TBitmap@PaletteNeeded$qqrv  +
xor eax eax +
mov [ebp+var_8] eax +
mov [ebp+var_9] 0 +
mov eax [esi+10h] +
test eax eax +
jz loc_45E166  +
push 0FFFFFFFFh  +
push eax  +
mov eax [ebp+var_4] +
mov eax [eax+4] +
push eax  +
call SelectPalette  +
mov [ebp+var_8] eax +
mov eax [ebp+var_4] +
mov eax [eax+4] +
push eax  +
call RealizePalette  +
mov [ebp+var_9] 1 +
push 0Ch  +
mov eax [ebp+var_4] +
mov eax [eax+4] +
push eax  +
call GetDeviceCaps  +
push eax  +
push 0Eh  +
mov eax [ebp+var_4] +
mov eax [eax+4] +
push eax  +
call GetDeviceCaps  +
pop edx  +
imul edx eax +
mov eax edx +
cmp eax 8 +
jg loc_45E19D  +
movzx edx word ptr [esi+2Ah] +
movzx ecx word ptr [esi+28h] +
imul edx ecx +
cmp eax edx +
jl loc_45E1A1  +
xor eax eax +
jmp loc_45E1A3  +
mov al 1 +
test al al +
jz loc_45E1DF  +
lea eax [ebp+var_11] +
push eax  +
mov eax [ebp+var_4] +
mov eax [eax+4] +
push eax  +
call GetBrushOrgEx  +
push 4  +
mov eax [ebp+var_4] +
mov eax [eax+4] +
push eax  +
call SetStretchBltMode  +
lea eax [ebp+var_11] +
push eax  +
mov eax [ebp+var_11.y] +
push eax  +
mov eax [ebp+var_11.x] +
push eax  +
mov eax [ebp+var_4] +
mov eax [eax+4] +
push eax  +
call SetBrushOrgEx  +
jmp loc_45E1FA  +
mov eax ebx +
call @Graphics@TBitmap@GetMonochrome$qqrv  +
test al al +
jnz loc_45E1FA  +
push 3  +
mov eax [ebp+var_4] +
call @Graphics@TCanvas@GetHandle$qqrv  +
push eax  +
call SetStretchBltMode  +
xor eax eax +
push ebp  +
push offset loc_45E349  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov eax ebx +
mov edx [eax] +
call dword ptr [edx+28h]  +
test al al +
jz loc_45E21A  +
mov eax ebx +
call @Graphics@TBitmap@MaskHandleNeeded$qqrv  +
mov eax ebx +
call @Graphics@TBitmap@GetCanvas$qqrv  +
mov dl ds:byte_45E358 +
call @Graphics@TCanvas@RequiredState$qqr50System@_Set$t22Graphics@TCanvasStates$iuc$0$iuc$3_  +
mov eax ebx +
mov edx [eax] +
call dword ptr [edx+28h]  +
test al al +
jz loc_45E2E5  +
xor eax eax +
mov [ebp+var_1C] eax +
xor eax eax +
mov [ebp+var_18] eax +
xor eax eax +
push ebp  +
push offset loc_45E2DE  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
push 0  +
call CreateCompatibleDC  +
call @Graphics@_16597  +
mov [ebp+var_18] eax +
mov eax [esi+0Ch] +
push eax  +
mov eax [ebp+var_18] +
push eax  +
call SelectObject  +
mov [ebp+var_1C] eax +
mov eax [edi+8] +
sub eax [edi] +
push eax  +
mov eax [edi+0Ch] +
sub eax [edi+4] +
push eax  +
mov eax ebx +
call @Graphics@TBitmap@GetCanvas$qqrv  +
mov eax [eax+4] +
push eax  +
push 0  +
push 0  +
mov eax [esi+1Ch] +
push eax  +
mov eax [esi+20h] +
push eax  +
mov eax [ebp+var_18] +
push eax  +
push 0  +
push 0  +
mov ecx [edi+4] +
mov edx [edi] +
mov eax [ebp+var_4] +
mov eax [eax+4] +
call sub_45BCA8  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_45E323  +
cmp [ebp+var_1C] 0 +
jz loc_45E2CE  +
mov eax [ebp+var_1C] +
push eax  +
mov eax [ebp+var_18] +
push eax  +
call SelectObject  +
cmp [ebp+var_18] 0 +
jz locret_45E2DD  +
mov eax [ebp+var_18] +
push eax  +
call DeleteDC  +
retn   +
jmp unknown_libname_539  +
jmp loc_45E2BB  +
mov eax [ebp+var_4] +
mov eax [eax+20h] +
push eax  +
mov eax [esi+20h] +
push eax  +
mov eax [esi+1Ch] +
push eax  +
push 0  +
push 0  +
mov eax ebx +
call @Graphics@TBitmap@GetCanvas$qqrv  +
mov eax [eax+4] +
push eax  +
mov eax [edi+0Ch] +
sub eax [edi+4] +
push eax  +
mov eax [edi+8] +
sub eax [edi] +
push eax  +
mov eax [edi+4] +
push eax  +
mov eax [edi] +
push eax  +
mov eax [ebp+var_4] +
mov eax [eax+4] +
push eax  +
call StretchBlt  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_45E350  +
cmp [ebp+var_9] 0 +
jz locret_45E348  +
push 0FFFFFFFFh  +
mov eax [ebp+var_8] +
push eax  +
mov eax [ebp+var_4] +
mov eax [eax+4] +
push eax  +
call SelectPalette  +
retn   +
jmp unknown_libname_539  +
jmp loc_45E330  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
mov esi eax +
mov ebx [esi+28h] +
cmp dword ptr [ebx+4] 1 +
jle loc_45E390  +
mov eax esi +
call @Graphics@TBitmap@HandleNeeded$qqrv  +
cmp byte ptr [ebx+71h] 0 +
jz loc_45E37A  +
xor eax eax +
jmp loc_45E37D  +
mov eax [ebx+10h] +
lea edx [ebx+18h] +
push edx  +
mov ecx eax +
mov edx [ebx+8] +
mov eax esi +
call @Graphics@TBitmap@CopyImage$qqruiuirx13tagDIBSECTION  +
pop esi  +
pop ebx  +
retn   +
mov eax [ebx+8] +
test eax eax +
jz loc_45E3BC  +
cmp eax [ebx+14h] +
jz loc_45E3BC  +
mov esi [ebx+14h] +
test esi esi +
jz loc_45E3B2  +
push esi  +
call DeleteObject  +
test eax eax +
jnz loc_45E3B2  +
call sub_45BA5C  +
xor eax eax +
mov [ebx+14h] eax +
xor eax eax +
mov [ebx+2Ch] eax +
pop esi  +
pop ebx  +
retn   +
***
mov eax [eax+28h] +
cmp dword ptr [eax+8] 0 +
jnz loc_45E3D5  +
cmp dword ptr [eax+14h] 0 +
jnz loc_45E3D5  +
cmp dword ptr [eax+6Ch] 0 +
jz loc_45E3D8  +
xor eax eax +
retn   +
mov al 1 +
retn   +
***
mov ebx eax +
cmp dword ptr [ebx+2Ch] 0 +
jnz loc_45E41B  +
mov eax ebx +
call @Graphics@TBitmap@HandleNeeded$qqrv  +
cmp dword ptr [ebx+2Ch] 0 +
jnz loc_45E41B  +
mov ecx ebx +
mov dl 1 +
mov eax ds:off_45CFB4 +
call sub_45D178  +
mov esi eax +
mov [ebx+2Ch] esi +
mov [esi+2Ch] ebx +
mov eax [ebx] +
mov eax [eax+10h] +
mov [esi+28h] eax +
mov [esi+34h] ebx +
mov dword ptr [esi+30h] offset @Graphics@TBitmap@Changing$qqrp14System@TObject +
mov eax [ebx+2Ch] +
pop esi  +
pop ebx  +
retn   +
***
mov eax ebx +
call @Graphics@TBitmap@FreeContext$qqrv  +
mov eax ebx +
call @Graphics@TBitmap@HandleNeeded$qqrv  +
mov edx ebx +
mov eax ebx +
call @Graphics@TBitmap@Changing$qqrp14System@TObject  +
mov eax [ebx+28h] +
mov eax [eax+8] +
pop ebx  +
retn   +
***
mov eax [eax+28h] +
mov edx [eax+8] +
test edx edx +
jz loc_45E457  +
cmp edx [eax+14h] +
jnz loc_45E46E  +
cmp dword ptr [eax+14h] 0 +
jnz loc_45E46B  +
cmp dword ptr [eax+30h] 0 +
jnz loc_45E467  +
mov al 1 +
jmp locret_45E470  +
xor eax eax +
jmp locret_45E470  +
xor eax eax +
retn   +
mov al 1 +
retn   +
***
mov ecx eax +
mov eax [ecx+28h] +
mov eax [eax+20h] +
cdq   +
xor eax edx +
sub eax edx +
retn   +
***
mov eax ebx +
call @Graphics@TBitmap@MaskHandleNeeded$qqrv  +
mov eax [ebx+28h] +
mov eax [eax+0Ch] +
pop ebx  +
retn   +
***
mov eax [eax+28h] +
add eax 18h +
cmp word ptr [eax+10h] 1 +
jnz loc_45E4AC  +
cmp word ptr [eax+12h] 1 +
jz loc_45E4AF  +
xor eax eax +
retn   +
mov al 1 +
retn   +
***
mov eax ebx +
call @Graphics@TBitmap@PaletteNeeded$qqrv  +
mov eax [ebx+28h] +
mov eax [eax+10h] +
pop ebx  +
retn   +
***
mov esi eax +
mov bl 8 +
mov eax esi +
call @Graphics@TBitmap@GetHandleType$qqrv  +
cmp al 1 +
jnz loc_45E4DD  +
xor ebx ebx +
jmp loc_45E544  +
mov eax [esi+28h] +
lea edx [eax+18h] +
lea eax [edx+18h] +
movzx ecx word ptr [eax+0Eh] +
cmp ecx 10h +
jg loc_45E500  +
jz loc_45E518  +
dec ecx  +
jz loc_45E50C  +
sub ecx 3 +
jz loc_45E510  +
sub ecx 4 +
jz loc_45E514  +
jmp loc_45E544  +
sub ecx 18h +
jz loc_45E538  +
sub ecx 8 +
jz loc_45E53C  +
jmp loc_45E544  +
mov bl 1 +
jmp loc_45E544  +
mov bl 2 +
jmp loc_45E544  +
mov bl 3 +
jmp loc_45E544  +
mov eax [eax+10h] +
sub eax 1 +
jb loc_45E527  +
sub eax 2 +
jz loc_45E52B  +
jmp loc_45E544  +
mov bl 4 +
jmp loc_45E544  +
cmp dword ptr [edx+44h] 7E0h +
jnz loc_45E544  +
mov bl 5 +
jmp loc_45E544  +
mov bl 6 +
jmp loc_45E544  +
cmp dword ptr [eax+10h] 0 +
jnz loc_45E544  +
mov bl 7 +
mov eax ebx +
pop esi  +
pop ebx  +
retn   +
***
mov eax [ebx+34h] +
cmp eax 20000000h +
jnz loc_45E585  +
mov eax ebx +
call @Graphics@TBitmap@GetMonochrome$qqrv  +
test al al +
jz loc_45E56B  +
mov eax 0FFFFFFh +
jmp loc_45E58A  +
mov eax ebx +
mov edx [eax] +
call dword ptr [edx+20h]  +
dec eax  +
push eax  +
mov eax ebx +
call @Graphics@TBitmap@GetCanvas$qqrv  +
xor edx edx +
pop ecx  +
call @Graphics@TCanvas@GetPixel$qqrii  +
jmp loc_45E58A  +
call @Graphics@ColorToRGB$qqr15Graphics@TColor  +
or eax 2000000h +
pop ebx  +
retn   +
***
mov eax [eax+28h] +
mov eax [eax+1Ch] +
retn   +
***
mov ebx [eax+28h] +
cmp dword ptr [ebx+8] 0 +
jz loc_45E60C  +
cmp dword ptr [ebx+14h] 0 +
jnz loc_45E60C  +
call @Graphics@TBitmap@PaletteNeeded$qqrv  +
cmp dword ptr [ebx+30h] 0 +
jnz loc_45E5F4  +
lea eax [ebx+18h] +
push eax  +
push 54h  +
mov eax [ebx+8] +
push eax  +
call GetObjectA  +
lea eax [ebx+18h] +
mov edx eax +
add eax 18h +
mov dword ptr [eax] 28h +
mov ecx [edx+4] +
mov [eax+4] ecx +
mov ecx [edx+8] +
mov [eax+8] ecx +
mov word ptr [eax+0Ch] 1 +
mov cx [edx+10h] +
imul cx [edx+12h] +
mov [eax+0Eh] cx +
lea eax [ebx+18h] +
push eax  +
push 0  +
mov esi [ebx+10h] +
mov ecx esi +
mov edx esi +
mov eax [ebx+8] +
call @Graphics@_16766  +
mov [ebx+14h] eax +
pop esi  +
pop ebx  +
retn   +
***
mov edx [eax+2Ch] +
test edx edx +
jz locret_45E61E  +
mov eax edx +
call @Graphics@_16752  +
retn   +
***
add esp 0FFFFFFF0h +
mov ebx eax +
cmp byte ptr [ebx+32h] 0 +
jz loc_45E6D0  +
cmp byte ptr [ebx+31h] 0 +
jnz loc_45E71A  +
mov esi [ebx+28h] +
mov eax [esi+0Ch] +
test eax eax +
jz loc_45E6ED  +
call @Graphics@_16749  +
mov eax [esi+0Ch] +
push eax  +
call DeleteObject  +
xor eax eax +
mov [esi+0Ch] eax +
mov eax ebx +
call @Graphics@TBitmap@FreeContext$qqrv  +
mov eax ebx +
call @Graphics@TBitmap@HandleNeeded$qqrv  +
mov eax ebx +
call @Graphics@TBitmap@GetTransparentColor$qqrv  +
mov ecx eax +
mov edx [esi+10h] +
mov eax [esi+8] +
call @Graphics@_16752_0  +
mov [esi+0Ch] eax +
mov byte ptr [ebx+32h] 1 +
mov byte ptr [ebx+31h] 1 +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
add esp 0FFFFFFACh +
mov ebx edx +
add esp 0FFFFFFF8h +
push ebx  +
push esi  +
push edi  +
mov esi ecx +
mov ebx edx +
mov [ebp+var_4] eax +
mov dl 1 +
mov eax ds:off_45973C +
call @System@TObject@$bctr$qqrv  +
mov [ebp+var_8] eax +
xor eax eax +
push ebp  +
push offset loc_45E907  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov eax [ebp+var_8] +
mov [eax+8] ebx +
mov eax [ebp+var_8] +
mov [eax+10h] esi +
mov eax [ebp+arg_8] +
mov edx [ebp+var_8] +
mov esi eax +
lea edi [edx+18h] +
mov ecx 15h +
movs   +
mov eax [ebp+var_8] +
mov dl [ebp+arg_4] +
mov [eax+70h] dl +
mov eax [ebp+var_8] +
cmp dword ptr [eax+2Ch] 0 +
jz loc_45E8E9  +
mov eax [ebp+var_8] +
mov eax [eax+8] +
mov edx [ebp+var_8] +
mov [edx+14h] eax +
mov eax [ebp+arg_0] +
mov edx ds:off_49AEB4 +
call unknown_libname_534  +
mov edx [ebp+var_8] +
mov [edx+6Ch] eax +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
jmp loc_45E91E  +
jmp @System@@HandleAnyException$qqrv  +
mov eax [ebp-8] +
call @System@TObject@Free$qqrv  +
call @System@@RaiseAgain$qqrv  +
call @@DoneExcept$qqrv  +
push offset stru_4F1760  +
call EnterCriticalSection  +
xor edx edx +
push ebp  +
push offset loc_45E967  +
push dword ptr fs:[edx]  +
mov fs:[edx] esp +
mov eax [ebp+var_4] +
mov eax [eax+28h] +
call @Graphics@TSharedImage@Release$qqrv  +
mov edx [ebp+var_4] +
mov eax [ebp+var_8] +
mov [edx+28h] eax +
call sub_45D36C  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_45E96E  +
push offset stru_4F1760  +
call LeaveCriticalSection  +
retn   +
jmp unknown_libname_539  +
jmp loc_45E95C  +
mov eax [ebp+var_4] +
mov byte ptr [eax+32h] 0 +
pop edi  +
pop esi  +
pop ebx  +
pop ecx  +
pop ecx  +
pop ebp  +
retn 0Ch  +
***
push edi  +
push ecx  +
mov esi edx +
mov ebx eax +
mov edx esp +
mov ecx 4 +
mov eax esi +
mov edi [eax] +
call dword ptr [edi+8]  +
mov ecx [esp+4+var_4] +
mov edx esi +
mov eax ebx +
call @Graphics@TBitmap@ReadStream$qqrp15Classes@TStreami  +
pop edx  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
add esp 0FFFFFF54h +
push edi  +
add esp 0FFFFFF9Ch +
mov esi ecx +
mov edi edx +
mov ebx eax +
mov eax ebx +
call @Graphics@TBitmap@FreeContext$qqrv  +
test esi esi +
jnz loc_45EF4D  +
lea eax [esp+64h+var_56] +
xor ecx ecx +
mov edx 54h +
call @System@@FillChar$qqrv  +
lea eax [esp+64h+var_56] +
push eax  +
push 0  +
push 0  +
xor ecx ecx +
xor edx edx +
mov eax ebx +
call @Graphics@TBitmap@NewImage$qqruiuirx13tagDIBSECTIONop15Classes@TStream  +
jmp loc_45EF77  +
mov edx esp +
mov ecx 0Eh +
mov eax edi +
call @Classes@TStream@WriteBuffer$qqrpxvi  +
cmp [esp+64h+var_64] 4D42h +
jz loc_45EF68  +
call sub_45B9F0  +
push esp  +
mov ecx esi +
sub ecx 0Eh +
mov edx edi +
mov eax ebx +
call @Graphics@TBitmap@ReadDIB$qqrp15Classes@TStreamuip19tagBITMAPFILEHEADER  +
add esp 64h +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
add esp 0FFFFFFA8h +
push ebx  +
push esi  +
push edi  +
mov edi edx +
mov ebx eax +
mov esi [ebx+28h] +
cmp edi [esi+8] +
jz loc_45F03B  +
mov eax ebx +
call @Graphics@TBitmap@FreeContext$qqrv  +
lea eax [ebp+var_58] +
xor ecx ecx +
mov edx 54h +
call @System@@FillChar$qqrv  +
test edi edi +
jz loc_45EFBF  +
lea eax [ebp+var_58] +
push eax  +
push 54h  +
push edi  +
call GetObjectA  +
cmp dword ptr [esi+4] 1 +
jnz loc_45EFD2  +
mov eax [esi+10h] +
mov [ebp+var_4] eax +
xor eax eax +
mov [esi+10h] eax +
jmp loc_45EFEF  +
mov eax [esi+10h] +
cmp eax dword_4F1744 +
jnz loc_45EFE7  +
mov eax dword_4F1744 +
mov [ebp+var_4] eax +
jmp loc_45EFEF  +
call @Graphics@CopyPalette$qqrui  +
mov [ebp+var_4] eax +
xor eax eax +
push ebp  +
push offset loc_45F01B  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
lea eax [ebp+var_58] +
push eax  +
push 0  +
push 0  +
mov ecx [ebp+var_4] +
mov edx edi +
mov eax ebx +
call @Graphics@TBitmap@NewImage$qqruiuirx13tagDIBSECTIONop15Classes@TStream  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
jmp loc_45F032  +
jmp @System@@HandleAnyException$qqrv  +
mov eax [ebp-4] +
call @Graphics@_16457  +
call @System@@RaiseAgain$qqrv  +
call @@DoneExcept$qqrv  +
mov edx ebx +
mov eax ebx +
mov ecx [eax] +
call dword ptr [ecx+10h]  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
push edi  +
push edi  +
add esp 0FFFFFFACh +
mov edi edx +
mov ebx eax +
mov esi [ebx+28h] +
cmp edi [esi+20h] +
jz loc_45F1C6  +
mov eax ebx +
call @Graphics@TBitmap@HandleNeeded$qqrv  +
push esi  +
push edi  +
add esi 18h +
lea edi [esp+5Ch+var_54] +
mov ecx 15h +
movs   +
pop edi  +
pop esi  +
mov [esp+54h+var_4C] edi +
mov [esp+54h+var_34] edi +
push esp  +
mov ecx [esi+10h] +
mov edx [esi+8] +
mov eax ebx +
call @Graphics@TBitmap@CopyImage$qqruiuirx13tagDIBSECTION  +
mov edx ebx +
mov eax ebx +
mov ecx [eax] +
call dword ptr [ecx+10h]  +
add esp 54h +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
add esp 0FFFFFFACh +
mov ebx edx +
mov edi eax +
mov esi [edi+28h] +
lea eax [esi+30h] +
cmp word ptr [eax+0Ch] 1 +
jnz loc_45F1EE  +
cmp word ptr [eax+0Eh] 1 +
jz loc_45F1F2  +
xor eax eax +
jmp loc_45F1F4  +
mov al 1 +
cmp bl al +
jz loc_45F246  +
mov eax edi +
call @Graphics@TBitmap@HandleNeeded$qqrv  +
push esi  +
push edi  +
add esi 18h +
lea edi [esp+5Ch+var_54] +
mov ecx 15h +
movs   +
pop edi  +
pop esi  +
xor eax eax +
mov [esp+54h+var_3C] eax +
xor eax eax +
mov al bl +
mov [esp+54h+var_30] ax +
mov [esp+54h+var_2E] ax +
mov [esp+54h+var_44] ax +
mov [esp+54h+var_42] ax +
push esp  +
mov ecx [esi+10h] +
mov edx [esi+8] +
mov eax edi +
call @Graphics@TBitmap@CopyImage$qqruiuirx13tagDIBSECTION  +
mov edx edi +
mov eax edi +
mov ecx [eax] +
call dword ptr [ecx+10h]  +
add esp 54h +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
add esp 0FFFFFFA8h +
push ebx  +
push esi  +
push edi  +
mov edi edx +
mov ebx eax +
mov eax [ebx+28h] +
cmp edi [eax+10h] +
jz loc_45F31C  +
mov esi eax +
test edi edi +
jnz loc_45F284  +
cmp dword ptr [esi+4] 1 +
jnz loc_45F284  +
mov eax [esi+10h] +
call @Graphics@_16457  +
xor eax eax +
mov [esi+10h] eax +
jmp loc_45F2FF  +
mov eax ebx +
call @Graphics@TBitmap@FreeContext$qqrv  +
mov eax ebx +
call @Graphics@TBitmap@HandleNeeded$qqrv  +
push esi  +
push edi  +
add esi 18h +
lea edi [ebp+var_58] +
mov ecx 15h +
movs   +
pop edi  +
pop esi  +
lea eax [ebp+var_58] +
push eax  +
push 0  +
mov edx [esi+10h] +
mov eax [esi+8] +
mov ecx edi +
call @Graphics@_16766  +
mov [ebp+var_4] eax +
xor eax eax +
push ebp  +
push offset loc_45F2E7  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
lea eax [ebp+var_58] +
push eax  +
mov al [esi+70h] +
push eax  +
push 0  +
mov ecx edi +
mov edx [ebp+var_4] +
mov eax ebx +
call @Graphics@TBitmap@NewImage$qqruiuirx13tagDIBSECTIONop15Classes@TStream  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
jmp loc_45F2FF  +
jmp @System@@HandleAnyException$qqrv  +
mov eax [ebp-4] +
push eax  +
call DeleteObject  +
call @System@@RaiseAgain$qqrv  +
call @@DoneExcept$qqrv  +
mov eax [ebx+28h] +
lea ecx [eax+18h] +
mov eax [eax+14h] +
mov edx edi +
call @Graphics@_16748  +
mov byte ptr [ebx+22h] 1 +
mov edx ebx +
mov eax ebx +
mov ecx [eax] +
call dword ptr [ecx+10h]  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
add esp 0FFFFFFA0h +
push ebx  +
push esi  +
push edi  +
mov ebx edx +
mov [ebp+var_4] eax +
mov eax [ebp+var_4] +
call @Graphics@TBitmap@GetPixelFormat$qqrv  +
cmp bl al +
jz loc_45F483  +
mov eax ebx +
sub al 1 +
jb loc_45F34E  +
sub al 7 +
jz loc_45F35D  +
jmp loc_45F36C  +
mov dl 1 +
mov eax [ebp+var_4] +
mov ecx [eax] +
call dword ptr [ecx+6Ch]  +
jmp loc_45F483  +
mov eax off_4EA6E0 +
call sub_45B9D8  +
jmp loc_45F483  +
lea eax [ebp+var_5D] +
xor ecx ecx +
mov edx 54h +
call @System@@FillChar$qqrv  +
mov eax [ebp+var_4] +
mov eax [eax+28h] +
lea esi [eax+18h] +
lea edi [ebp+var_5D] +
mov ecx 6 +
movs   +
mov [ebp+var_9] 0 +
xor edx edx +
mov [ebp+var_49] edx +
mov [ebp+var_45] 28h +
mov edx [ebp+var_59] +
mov [ebp+var_41] edx +
mov edx [ebp+var_55] +
mov [ebp+var_3D] edx +
mov [ebp+var_39] 1 +
xor edx edx +
mov dl bl +
movzx edx byte_4E6463[edx] +
mov [ebp+var_37] dx +
mov eax [eax+10h] +
mov [ebp+var_8] eax +
sub bl 2 +
jz loc_45F3D5  +
dec bl  +
jz loc_45F3DF  +
sub bl 2 +
jz loc_45F404  +
jmp loc_45F420  +
mov eax dword_4F1744 +
mov [ebp+var_8] eax +
jmp loc_45F420  +
push 0  +
call GetDC  +
call @Graphics@_16597  +
mov ebx eax +
push ebx  +
call CreateHalftonePalette  +
mov [ebp+var_8] eax +
mov [ebp+var_9] 1 +
push ebx  +
push 0  +
call ReleaseDC  +
jmp loc_45F420  +
mov [ebp+var_35] 3 +
mov [ebp+var_1D] 0F800h +
mov [ebp+var_19] 7E0h +
mov [ebp+var_15] 1Fh +
xor eax eax +
push ebp  +
push offset loc_45F471  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
lea eax [ebp+var_5D] +
push eax  +
mov eax [ebp+var_4] +
mov edx [eax] +
call dword ptr [edx+64h]  +
mov edx eax +
mov ecx [ebp+var_8] +
mov eax [ebp+var_4] +
call @Graphics@TBitmap@CopyImage$qqruiuirx13tagDIBSECTION  +
cmp [ebp+var_8] 0 +
setnz al  +
mov edx [ebp+var_4] +
mov [edx+22h] al +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_45F478  +
cmp [ebp+var_9] 0 +
jz locret_45F470  +
mov eax [ebp+var_8] +
push eax  +
call DeleteObject  +
retn   +
jmp unknown_libname_539  +
jmp loc_45F461  +
mov edx [ebp-4] +
mov eax [ebp-4] +
mov ecx [eax] +
call dword ptr [ecx+10h]  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
push edi  +
add esp 0FFFFFFACh +
mov edi edx +
mov ebx eax +
mov esi [ebx+28h] +
cmp edi [esi+1Ch] +
jz loc_45F4D6  +
mov eax ebx +
call @Graphics@TBitmap@HandleNeeded$qqrv  +
push esi  +
push edi  +
add esi 18h +
lea edi [esp+5Ch+var_54] +
mov ecx 15h +
movs   +
pop edi  +
pop esi  +
mov [esp+54h+var_50] edi +
mov [esp+54h+var_38] edi +
push esp  +
mov ecx [esi+10h] +
mov edx [esi+8] +
mov eax ebx +
call @Graphics@TBitmap@CopyImage$qqruiuirx13tagDIBSECTION  +
mov edx ebx +
mov eax ebx +
mov ecx [eax] +
call dword ptr [ecx+10h]  +
add esp 54h +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov cl 1 +
push edi  +
push ebp  +
add esp 0FFFFFBD4h +
mov ebx ecx +
mov edi edx +
mov esi eax +
lea eax [esp+42Ch+var_41C] +
xor ecx ecx +
mov edx 0Eh +
call @System@@FillChar$qqrv  +
mov word ptr [esp+42Ch+var_41C] 4D42h +
mov eax [esi+28h] +
mov ebp [eax+6Ch] +
test ebp ebp +
jz loc_45F553  +
mov eax ebp +
call sub_49F1E8  +
mov [esp+42Ch+var_42C] eax +
test bl bl +
jz loc_45F535  +
mov edx esp +
mov ecx 4 +
mov eax edi +
call sub_49F418  +
mov eax [esi+28h] +
mov ebx [eax+6Ch] +
mov eax ebx +
call sub_49F1E8  +
mov ecx eax +
mov edx [ebx+4] +
mov eax edi +
mov ebx [eax] +
call dword ptr [ebx+0Ch]  +
jmp loc_45F791  +
mov eax esi +
call @Graphics@TBitmap@DIBNeeded$qqrv  +
mov ebp [esi+28h] +
xor eax eax +
mov [esp+42Ch+var_42C] eax +
mov eax [ebp+14h] +
test eax eax +
jz loc_45F685  +
mov edx [ebp+50h] +
push edx  +
lea ecx [esp+430h+var_42C] +
lea edx [esp+430h+var_424] +
call @Graphics@_16628  +
cmp byte ptr [ebp+70h] 0 +
jz loc_45F5A6  +
mov [esp+42Ch+var_424] 0Ch +
mov ax [ebp+3Eh] +
cmp ax 8 +
ja loc_45F5A6  +
mov ecx eax +
mov eax 1 +
shl eax cl +
lea eax [eax+eax*2] +
add [esp+42Ch+var_424] eax +
mov eax [esp+42Ch+var_424] +
add eax 0Eh +
add [esp+42Ch+var_42C] eax +
lea eax [esp+42Ch+var_41C] +
xor ecx ecx +
mov edx 0Eh +
call @System@@FillChar$qqrv  +
mov word ptr [esp+42Ch+var_41C] 4D42h +
mov eax esi +
call @Graphics@TBitmap@GetCanvas$qqrv  +
mov dl ds:byte_45F79C +
call @Graphics@TCanvas@RequiredState$qqr50System@_Set$t22Graphics@TCanvasStates$iuc$0$iuc$3_  +
mov eax [ebp+14h] +
push eax  +
mov eax [esi+2Ch] +
mov eax [eax+4] +
push eax  +
call SelectObject  +
call @Graphics@_16597  +
mov [esp+42Ch+var_420] eax +
lea eax [esp+42Ch+var_402] +
push eax  +
push 100h  +
push 0  +
mov eax [esi+2Ch] +
mov eax [eax+4] +
push eax  +
call GetDIBColorTable  +
mov [esp+42Ch+var_428] eax +
mov eax [esp+42Ch+var_420] +
push eax  +
mov eax [esi+2Ch] +
mov eax [eax+4] +
push eax  +
call SelectObject  +
mov eax [ebp+50h] +
test eax eax +
jbe loc_45F630  +
cmp eax [esp+42Ch+var_428] +
jnb loc_45F630  +
mov [esp+42Ch+var_428] eax +
cmp byte ptr [ebp+70h] 0 +
jnz loc_45F673  +
cmp [esp+42Ch+var_428] 0 +
jnz loc_45F673  +
cmp dword ptr [ebp+10h] 0 +
jz loc_45F673  +
cmp byte ptr [ebp+71h] 0 +
jnz loc_45F673  +
lea edx [esp+42Ch+var_402] +
mov ecx 0FFh +
mov eax [ebp+10h] +
call @Graphics@_16621  +
mov [esp+42Ch+var_428] eax +
cmp word ptr [ebp+3Eh] 8 +
jbe loc_45F673  +
mov eax [esp+42Ch+var_428] +
shl eax 2 +
add [esp+42Ch+var_42C] eax +
add [esp+42Ch+var_424] eax +
mov eax [esp+42Ch+var_42C] +
mov [esp+42Ch+var_41C+2] eax +
mov eax [esp+42Ch+var_424] +
add eax 0Eh +
mov [esp+42Ch+var_412] eax +
test bl bl +
jz loc_45F697  +
mov edx esp +
mov ecx 4 +
mov eax edi +
call sub_49F418  +
cmp [esp+42Ch+var_42C] 0 +
jz loc_45F791  +
lea eax [ebp+18h] +
call @Graphics@_16765  +
cmp [esp+42Ch+var_428] 0 +
jz loc_45F6D7  +
mov eax [ebp+50h] +
test eax eax +
jz loc_45F6BD  +
cmp eax [esp+42Ch+var_428] +
jz loc_45F6C4  +
mov eax [esp+42Ch+var_428] +
mov [ebp+50h] eax +
cmp byte ptr [ebp+70h] 0 +
jz loc_45F6D7  +
lea edx [esp+42Ch+var_428] +
lea eax [esp+42Ch+var_402] +
call @Graphics@_16603  +
cmp byte ptr [ebp+70h] 0 +
jz loc_45F72C  +
lea eax [ebp+30h] +
mov [esp+42Ch+var_40E] 0Ch +
mov dx [eax+4] +
mov [esp+42Ch+var_40A] dx +
mov dx [eax+8] +
mov [esp+42Ch+var_408] dx +
mov [esp+42Ch+var_406] 1 +
mov ax [eax+0Eh] +
mov [esp+42Ch+var_404] ax +
lea edx [esp+42Ch+var_41C] +
mov ecx 0Eh +
mov eax edi +
call sub_49F418  +
lea edx [esp+42Ch+var_40E] +
mov ecx 0Ch +
mov eax edi +
call sub_49F418  +
jmp loc_45F767  +
lea edx [esp+42Ch+var_41C] +
mov ecx 0Eh +
mov eax edi +
call sub_49F418  +
lea edx [ebp+30h] +
mov ecx 28h +
mov eax edi +
call sub_49F418  +
cmp word ptr [ebp+3Eh] 8 +
jbe loc_45F767  +
test byte ptr [ebp+40h] 3 +
jz loc_45F767  +
lea edx [ebp+58h] +
mov ecx 0Ch +
mov eax edi +
call sub_49F418  +
xor eax eax +
mov al [ebp+70h] +
xor ecx ecx +
mov cl byte_4E646C[eax] +
imul ecx [esp+42Ch+var_428] +
lea edx [esp+42Ch+var_402] +
mov eax edi +
call sub_49F418  +
mov edx [ebp+2Ch] +
mov ecx [ebp+44h] +
mov eax edi +
call sub_49F418  +
add esp 42Ch +
pop ebp  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov eax ebx +
call @Graphics@TBitmap@HandleNeeded$qqrv  +
mov edx ebx +
mov eax ebx +
call @Graphics@TBitmap@Changing$qqrp14System@TObject  +
mov eax [ebx+28h] +
mov edx [eax+8] +
mov ecx edx +
cmp edx [eax+14h] +
jnz loc_45F7CA  +
xor edx edx +
mov [eax+14h] edx +
xor edx edx +
mov [eax+2Ch] edx +
xor edx edx +
mov [eax+8] edx +
mov eax ecx +
pop ebx  +
retn   +
***
xor ecx ecx +
add esp 0FFFFFFA8h +
push ebx  +
push esi  +
push edi  +
mov [ebp+var_4] ecx +
mov ebx eax +
mov word ptr [edx] 2 +
mov eax ebx +
call @Graphics@TBitmap@HandleNeeded$qqrv  +
mov esi [ebx+28h] +
push esi  +
add esi 18h +
lea edi [ebp+var_58] +
mov ecx 15h +
movs   +
pop esi  +
xor eax eax +
mov [ebp+var_40] eax +
xor eax eax +
mov [ebp+var_44] eax +
lea eax [ebp+var_58] +
push eax  +
mov eax [ebx+2Ch] +
push eax  +
mov edi [esi+10h] +
mov ecx edi +
mov edx edi +
mov eax [esi+8] +
call @Graphics@_16766  +
mov edx [ebp+var_4] +
mov [edx] eax +
xor eax eax +
push ebp  +
push offset loc_45F856  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov eax [ebx+28h] +
mov eax [eax+10h] +
call @Graphics@CopyPalette$qqrui  +
mov edx [ebp+arg_0] +
mov [edx] eax +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
jmp loc_45F870  +
jmp @System@@HandleAnyException$qqrv  +
mov eax [ebp-4] +
mov eax [eax] +
push eax  +
call DeleteObject  +
call @System@@RaiseAgain$qqrv  +
call @@DoneExcept$qqrv  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 4  +
***
call unknown_libname_536  +
mov ebx edx +
mov esi eax +
mov eax [esi+0Ch] +
call @System@TObject@Free$qqrv  +
mov edx ebx +
and dl 0FCh +
mov eax esi +
call sub_4BA7FC  +
test bl bl +
jle loc_45F8A6  +
mov eax esi +
call @System@@ClassDestroy$qqrp14System@TObject  +
pop esi  +
pop ebx  +
retn   +
***
mov eax [ebx+8] +
test eax eax +
jz loc_45F8BC  +
push eax  +
call DestroyIcon  +
xor eax eax +
mov [ebx+8] eax +
pop ebx  +
retn   +
***
push edi  +
test dl dl +
jz loc_45F8D3  +
add esp 0FFFFFFF0h +
call unknown_libname_535  +
mov ebx edx +
mov edi eax +
xor edx edx +
mov eax edi +
call unknown_libname_567  +
mov byte ptr [edi+21h] 1 +
mov dl 1 +
mov eax ds:off_459884 +
call @System@TObject@$bctr$qqrv  +
mov esi eax +
mov [edi+28h] esi +
mov eax esi +
call sub_45D36C  +
mov eax edi +
test bl bl +
jz loc_45F911  +
call sub_4BABC8  +
pop large dword ptr fs:0  +
add esp 0Ch +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
call unknown_libname_536  +
mov ebx edx +
mov esi eax +
mov eax [esi+28h] +
call @Graphics@TSharedImage@Release$qqrv  +
mov edx ebx +
and dl 0FCh +
mov eax esi +
call sub_49D348  +
test bl bl +
jle loc_45F942  +
mov eax esi +
call @System@@ClassDestroy$qqrp14System@TObject  +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
mov ebx edx +
mov esi eax +
test ebx ebx +
jz loc_45F964  +
mov eax ebx +
mov edx ds:off_4598E0 +
call @System@@IsClass$qqrp14System@TObjectp17System@TMetaClass  +
test al al +
jz loc_45F998  +
test ebx ebx +
jz loc_45F982  +
mov edi ebx +
mov eax [edi+28h] +
call sub_45D36C  +
mov eax [esi+28h] +
call @Graphics@TSharedImage@Release$qqrv  +
mov eax [edi+28h] +
mov [esi+28h] eax +
jmp loc_45F98D  +
xor ecx ecx +
xor edx edx +
mov eax esi +
call @Wsdlimpwriter@TWSDLImporter@ImportTypes$qqrx51System@_DelphiInterface$t23Xmlschema@IXMLSchemaDef_x52System@_DelphiInterface$t24Wsdlimpwriter@IWSDLTypes_  +
mov edx esi +
mov eax esi +
mov ecx [eax] +
call dword ptr [ecx+10h]  +
jmp loc_45F9A1  +
mov edx ebx +
mov eax esi +
call @Classes@TPersistent@Assign$qqrp19Classes@TPersistent  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
mov edi ecx +
mov esi edx +
mov ebx eax +
mov dl ds:byte_45F9E4 +
mov eax esi +
call @Graphics@TCanvas@RequiredState$qqr50System@_Set$t22Graphics@TCanvasStates$iuc$0$iuc$3_  +
push 3  +
push 0  +
push 0  +
push 0  +
push 0  +
mov eax ebx +
call @Graphics@TIcon@GetHandle$qqrv  +
push eax  +
mov eax [edi+4] +
push eax  +
mov eax [edi] +
push eax  +
mov eax [esi+4] +
push eax  +
call DrawIconEx  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov eax [eax+28h] +
cmp dword ptr [eax+8] 0 +
jnz loc_45F9F7  +
cmp dword ptr [eax+0Ch] 0 +
jz loc_45F9FA  +
xor eax eax +
retn   +
mov al 1 +
retn   +
***
mov eax ebx +
call @Graphics@TIcon@HandleNeeded$qqrv  +
mov eax [ebx+28h] +
mov eax [eax+8] +
pop ebx  +
retn   +
***
mov eax [eax+28h] +
mov eax [eax+14h] +
test eax eax +
jnz locret_45FA25  +
push 0Ch  +
call GetSystemMetrics  +
retn   +
***
mov eax [eax+28h] +
mov eax [eax+10h] +
test eax eax +
jnz locret_45FA39  +
push 0Bh  +
call GetSystemMetrics  +
retn   +
***
add esp 0FFFFFFF4h +
add esp 0FFFFFFF4h +
push ebx  +
push esi  +
push edi  +
mov esi eax +
mov ebx [esi+28h] +
cmp dword ptr [ebx+0Ch] 0 +
jnz loc_45FB5E  +
cmp dword ptr [ebx+8] 0 +
jnz loc_45FAD7  +
call sub_45B9FC  +
mov dl 1 +
mov eax ds:off_49AEB4 +
call @System@TObject@$bctr$qqrv  +
mov [ebp+var_4] eax +
xor eax eax +
push ebp  +
push offset loc_45FB41  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov eax esi +
call @Graphics@TIcon@GetHandle$qqrv  +
cmp eax dword_4F175C +
jnz loc_45FB24  +
lea eax [ebp+var_A] +
xor ecx ecx +
mov edx 6 +
call @System@@FillChar$qqrv  +
lea edx [ebp+var_A] +
mov ecx 6 +
mov eax [ebp+var_4] +
call sub_49F418  +
jmp loc_45FB37  +
mov eax esi +
call @Graphics@TIcon@GetHandle$qqrv  +
mov edx eax +
xor ecx ecx +
mov eax [ebp+var_4] +
call @Graphics@_16634  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
jmp loc_45FB58  +
jmp @System@@HandleAnyException$qqrv  +
mov eax [ebp-4] +
call @System@TObject@Free$qqrv  +
call @System@@RaiseAgain$qqrv  +
call @@DoneExcept$qqrv  +
mov eax [ebp+var_4] +
mov [ebx+0Ch] eax +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
add esp 0FFFFFFF4h +
push ebx  +
push esi  +
push edi  +
mov esi edx +
mov ebx eax +
mov dl 1 +
mov eax ds:off_49AEB4 +
call @System@TObject@$bctr$qqrv  +
mov [ebp+var_4] eax +
xor eax eax +
push ebp  +
push offset loc_45FBF7  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov eax esi +
call sub_49F1E8  +
push eax  +
mov eax esi +
call sub_49F1B4  +
pop edx  +
sub edx eax +
mov eax [ebp+var_4] +
mov ecx [eax] +
call dword ptr [ecx]  +
mov eax [ebp+var_4] +
call sub_49F1E8  +
mov ecx eax +
mov eax [ebp+var_4] +
mov edx [eax+4] +
mov eax esi +
call @Classes@TStream@WriteBuffer$qqrpxvi  +
lea edx [ebp+var_A] +
mov ecx 6 +
mov eax [ebp+var_4] +
call @Classes@TStream@WriteBuffer$qqrpxvi  +
mov ax word ptr [ebp+var_A+2] +
sub ax 2 +
jb loc_45FBE1  +
call sub_45B9FC  +
mov ecx [ebp+var_4] +
xor edx edx +
mov eax ebx +
call @Wsdlimpwriter@TWSDLImporter@ImportTypes$qqrx51System@_DelphiInterface$t23Xmlschema@IXMLSchemaDef_x52System@_DelphiInterface$t24Wsdlimpwriter@IWSDLTypes_  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
jmp loc_45FC0E  +
jmp @System@@HandleAnyException$qqrv  +
mov eax [ebp-4] +
call @System@TObject@Free$qqrv  +
call @System@@RaiseAgain$qqrv  +
call @@DoneExcept$qqrv  +
mov edx ebx +
mov eax ebx +
mov ecx [eax] +
call dword ptr [ecx+10h]  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
push ecx  +
push ebx  +
push esi  +
push edi  +
mov edi ecx +
mov esi edx +
mov ebx eax +
mov dl 1 +
mov eax ds:off_459884 +
call @System@TObject@$bctr$qqrv  +
mov [ebp+var_4] eax +
xor eax eax +
push ebp  +
push offset loc_45FC60  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov eax [ebp+var_4] +
mov [eax+8] esi +
mov eax [ebp+var_4] +
mov [eax+0Ch] edi +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
jmp loc_45FC77  +
jmp @System@@HandleAnyException$qqrv  +
mov eax [ebp-4] +
call @System@TObject@Free$qqrv  +
call @System@@RaiseAgain$qqrv  +
call @@DoneExcept$qqrv  +
mov eax [ebp+var_4] +
call sub_45D36C  +
mov eax [ebx+28h] +
call @Graphics@TSharedImage@Release$qqrv  +
mov eax [ebp+var_4] +
mov [ebx+28h] eax +
pop edi  +
pop esi  +
pop ebx  +
pop ecx  +
pop ebp  +
retn   +
***
xor ecx ecx +
mov eax ebx +
call @Wsdlimpwriter@TWSDLImporter@ImportTypes$qqrx51System@_DelphiInterface$t23Xmlschema@IXMLSchemaDef_x52System@_DelphiInterface$t24Wsdlimpwriter@IWSDLTypes_  +
mov edx ebx +
mov eax ebx +
mov ecx [eax] +
call dword ptr [ecx+10h]  +
pop ebx  +
retn   +
***
mov ecx [eax+28h] +
mov ecx [eax+28h] +
mov esi edx +
mov ebx eax +
mov eax ebx +
call @Graphics@TIcon@ImageNeeded$qqrv  +
mov eax [ebx+28h] +
mov ebx [eax+0Ch] +
mov eax ebx +
call sub_49F1E8  +
mov ecx eax +
mov edx [ebx+4] +
mov eax esi +
call sub_49F418  +
pop esi  +
pop ebx  +
retn   +
***
mov eax off_4EA7D0 +
call sub_45B9C0  +
pop ebp  +
retn 4  +
***
mov eax off_4EA7D0 +
call sub_45B9C0  +
pop ebp  +
retn 4  +
***
call GetDC  +
mov ebx eax +
push 5Ah  +
push ebx  +
call GetDeviceCaps  +
mov nNumerator eax +
push ebx  +
push 0  +
call ReleaseDC  +
mov eax offset unk_4E6470 +
mov edx 0Fh +
call @Graphics@_16605  +
mov dword_4F1744 eax +
pop ebx  +
retn   +
***
add esp 0FFFFFFC8h +
mov bl 1 +
push 0  +
call GetDC  +
mov esi eax +
test esi esi +
jz loc_45FDA7  +
mov eax dword_4F1758 +
push eax  +
push esi  +
call SelectObject  +
test eax eax +
jz loc_45FD9F  +
push esp  +
push esi  +
call GetTextMetricsA  +
test eax eax +
jz loc_45FD9F  +
mov bl [esp+38h+var_4] +
push esi  +
push 0  +
call ReleaseDC  +
mov eax ebx +
add esp 38h +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
push 48h  +
mov eax nNumerator +
push eax  +
push 8  +
call MulDiv  +
neg eax  +
mov dword_4E61A8 eax +
mov eax off_4EA8CC +
cmp byte ptr [eax+0Ch] 0 +
jz loc_45FE0B  +
call @Graphics@GetDefFontCharSet$qqrv  +
mov ebx eax +
mov eax ebx +
sub al 80h +
jnz loc_45FE0B  +
mov esi offset dword_45FE10 +
mov edi offset aMsSansSerif +
movs   +
movs   +
movs   +
movs   +
push 48h  +
mov eax nNumerator +
push eax  +
push 9  +
call MulDiv  +
neg eax  +
mov dword_4E61A8 eax +
mov byte_4E61AE bl +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
test dl dl +
jz loc_45FE8A  +
add esp 0FFFFFFF0h +
call unknown_libname_535  +
mov ebx edx +
mov esi eax +
lea eax [esi+8] +
push eax  +
call InitializeCriticalSection  +
mov eax esi +
test bl bl +
jz loc_45FEAC  +
call sub_4BABC8  +
pop large dword ptr fs:0  +
add esp 0Ch +
mov eax esi +
pop esi  +
pop ebx  +
retn   +
***
call unknown_libname_536  +
mov ebx edx +
mov esi eax +
mov eax esi +
call sub_4600AC  +
lea eax [esi+8] +
push eax  +
call DeleteCriticalSection  +
test bl bl +
jle loc_45FEDA  +
mov eax esi +
call @System@@ClassDestroy$qqrp14System@TObject  +
pop esi  +
pop ebx  +
retn   +
***
add eax 8 +
push eax  +
call EnterCriticalSection  +
retn   +
***
add eax 8 +
push eax  +
call LeaveCriticalSection  +
retn   +
***
add esp 0FFFFFFF8h +
push ebx  +
push esi  +
push edi  +
mov esi ecx +
mov ebx edx +
mov [ebp+var_4] eax +
mov eax [ebp+var_4] +
call unknown_libname_168  +
xor eax eax +
push ebp  +
push offset loc_45FF99  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov eax [ebp+var_4] +
mov eax [eax+4] +
mov [ebp+var_8] eax +
jmp loc_45FF31  +
mov eax [ebp+var_8] +
mov eax [eax] +
mov [ebp+var_8] eax +
cmp [ebp+var_8] 0 +
jz loc_45FF47  +
mov eax [ebp+var_8] +
cmp ebx [eax+8] +
jnz loc_45FF29  +
mov eax [ebp+var_8] +
cmp esi [eax+0Ch] +
jnz loc_45FF29  +
cmp [ebp+var_8] 0 +
jnz loc_45FF83  +
mov eax 10h +
call sub_4B97C0  +
mov [ebp+var_8] eax +
mov edi [ebp+var_8] +
mov eax [ebp+var_4] +
mov eax [eax+4] +
mov [edi] eax +
mov ecx esi +
mov edx ebx +
mov eax [ebp+var_4] +
call @Graphics@_16863  +
mov [edi+4] eax +
mov [edi+8] ebx +
mov [edi+0Ch] esi +
mov eax [ebp+var_4] +
mov edx [ebp+var_8] +
mov [eax+4] edx +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_45FFA0  +
mov eax [ebp+var_4] +
call sub_45FEEC  +
retn   +
jmp unknown_libname_539  +
jmp loc_45FF90  +
mov eax [ebp+var_8] +
pop edi  +
pop esi  +
pop ebx  +
pop ecx  +
pop ecx  +
pop ebp  +
retn   +
***
add esp 0FFFFFFE8h +
add esp 0FFFFFFF4h +
mov [ebp+var_4] eax +
jmp loc_460115  +
mov [ebp+var_8] eax +
mov eax [ebp+var_8] +
mov [ebp+var_C] eax +
mov eax [ebp+var_4] +
call unknown_libname_168  +
xor eax eax +
push ebp  +
push offset loc_4600F7  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov eax [ebp+var_C] +
mov eax [eax] +
mov edx [ebp+var_4] +
mov [edx+4] eax +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4600FE  +
mov eax [ebp+var_4] +
call sub_45FEEC  +
retn   +
jmp unknown_libname_539  +
jmp loc_4600EE  +
mov eax [ebp-0Ch] +
mov eax [eax+4] +
test eax eax +
jz loc_46010D  +
call @System@TObject@Free$qqrv  +
mov eax [ebp-8] +
call sub_4B97E0  +
mov eax [ebp+var_4] +
mov eax [eax+4] +
test eax eax +
jnz loc_4600B7  +
mov esp ebp +
pop ebp  +
retn   +
***
mov esi edx +
mov ebx eax +
cmp dword_4F17A0 0 +
jz loc_460155  +
mov eax esi +
call @Graphics@ColorToRGB$qqr15Graphics@TColor  +
push eax  +
mov eax ebx +
call @Graphics@ColorToRGB$qqr15Graphics@TColor  +
mov edx eax +
mov eax dword_4F17A0 +
pop ecx  +
call sub_45FEF8  +
mov eax [eax+4] +
pop esi  +
pop ebx  +
retn   +
xor eax eax +
pop esi  +
pop ebx  +
retn   +
***
xor eax eax +
push ebp  +
push offset loc_460225  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
inc dword_4F1748  +
jnz loc_460217  +
mov eax dword_4F17A0 +
call @System@TObject@Free$qqrv  +
mov eax dword_4E6458 +
call @System@TObject@Free$qqrv  +
mov eax dword_4E6454 +
call @System@TObject@Free$qqrv  +
call @Controls@_16606  +
mov eax dword_4E645C +
call @System@TObject@Free$qqrv  +
mov eax dword_4F179C +
call @System@TObject@Free$qqrv  +
mov eax dword_4F1790 +
call @System@TObject@Free$qqrv  +
mov eax dword_4F1794 +
call @System@TObject@Free$qqrv  +
mov eax dword_4F1798 +
call @System@TObject@Free$qqrv  +
mov eax dword_4F1744 +
push eax  +
call DeleteObject  +
push offset stru_4F1760  +
call DeleteCriticalSection  +
push offset CriticalSection  +
call DeleteCriticalSection  +
mov eax offset unk_4E6374 +
mov ecx 12h +
mov edx ds:off_499F5C +
call @System@@FinalizeArray$qqrpvt1ui  +
mov eax offset unk_4E61D4 +
mov ecx 34h +
mov edx ds:off_499F5C +
call @System@@FinalizeArray$qqrpvt1ui  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_46022C  +
retn   +
jmp unknown_libname_539  +
jmp locret_460224  +
pop ebp  +
retn   +
***
sub dword_4F1748 1 +
jnb locret_46032A  +
call unknown_libname_167  +
push offset stru_4F1760  +
call InitializeCriticalSection  +
push offset CriticalSection  +
call InitializeCriticalSection  +
push 7  +
call GetStockObject  +
mov dword_4F1750 eax +
push 5  +
call GetStockObject  +
mov dword_4F1754 eax +
push 0Dh  +
call GetStockObject  +
mov dword_4F1758 eax +
push 7F00h  +
push 0  +
call LoadIconA  +
mov dword_4F175C eax +
call @Graphics@_16855  +
mov cx 2Ch +
mov dl 1 +
mov eax ds:off_4599CC +
call sub_459A40  +
mov dword_4F1790 eax +
mov cx 10h +
mov dl 1 +
mov eax ds:off_4599CC +
call sub_459A40  +
mov dword_4F1794 eax +
mov cx 10h +
mov dl 1 +
mov eax ds:off_4599CC +
call sub_459A40  +
mov dword_4F1798 eax +
mov dl 1 +
mov eax ds:off_45FE20 +
call sub_45FE7C  +
mov dword_4F17A0 eax +
mov dl 1 +
mov eax ds:off_49A63C +
call @Classes@TThreadList@$bctr$qqrv  +
mov dword_4E645C eax +
mov dl 1 +
mov eax ds:off_49A63C +
call @Classes@TThreadList@$bctr$qqrv  +
mov dword_4F179C eax +
mov ecx offset sub_45A298 +
mov edx offset sub_45A2A8 +
mov eax ds:off_458E40 +
call @Classes@RegisterIntegerConsts$qqrpvpqqrx17System@AnsiStringri$opqqrir17System@AnsiString$o  +
mov ecx offset loc_45A4A0 +
mov edx offset loc_45A4B0 +
mov eax ds:@$xp$21Graphics@TFontCharset +
call @Classes@RegisterIntegerConsts$qqrpvpqqrx17System@AnsiStringri$opqqrir17System@AnsiString$o  +
retn   +
***
add al [eax] +
jmp fword ptr [ebx+ebx*4]  +
***
cmps   +
add [eax] eax +
jmp fword ptr [edi+ecx*8]  +
***
add gs:[ecx] dl +
inc esi  +
add [eax] cl +
add al [eax] +
jmp fword ptr [esi+eax*2+6A000046h]  +
***
pusha   +
add al [eax] +
jmp fword ptr [ebx+ebp*2]  +
***
jmp fword ptr [esi+ebp*2+6A000046h]  +
***
jmp dword ptr [eax+0FF0002h]  +
***
jmp fword ptr [eax+1FF0002h]  +
***
jmp eax  +
***
jmp dword ptr [eax+eax*2+46h]  +
***
jmp fword ptr [eax]  +
***
jmp fword ptr [eax-27h]  +
***
jmp fword ptr [esi]  +
***
jmp dword ptr [eax]  +
***
jmp dword ptr [eax+1004766h]  +
***
push eax  +
add al [eax] +
add [eax] dh +
sub [esi+0] al +
add al fs:[eax] +
add ds:14000F00h bh +
add [edi] ah +
add [edi] dh +
add [ecx+200A100h] al +
add [ecx] dl +
add [edi] edx +
add [eax] esp +
add [edi] ebx +
add [esi] eax +
add [eax] dl +
add [ecx] dl +
add [edx] dl +
add [eax] ebx +
add [edx] ah +
add ch [eax] +
add [ecx] dl +
add dl [ebx+0] +
and al 0 +
sbb al [eax] +
inc esi  +
add [eax-50h] al +
aas   +
mov al 0 +
mov al 17h +
mov al 3Ch +
mov al 1 +
mov al 5 +
mov al 0Dh +
mov al 10h +
mov al 0Eh +
mov al 15h +
mov al 19h +
mov al 1Dh +
mov al 21h +
mov al 12h +
mov al 29h +
mov al 3Dh +
mov al 8 +
mov al 44h +
mov al 0B3h +
push dword ptr [edx-13001201h]  +
push dword ptr [ecx-50004F01h]  +
jmp fword ptr [esi-52000201h]  +
***
jmp fword ptr [edi+edi*8-2F002Fh]  +
***
stc   +
jmp esp  +
***
dec ebp  +
dec esp  +
jmp fword ptr [ebx+24FFC9FFh]  +
***
retn   +
***
retn   +
***
mov ebx edx +
mov esi eax +
test esi esi +
jz loc_463383  +
push 0FFFFFFECh  +
push esi  +
call GetWindowLongA  +
test bl bl +
jz loc_46335E  +
test ah 2 +
jnz loc_463383  +
or eax 200h +
jmp loc_463368  +
test ah 2 +
jz loc_463383  +
and eax 0FFFFFDFFh +
push eax  +
push 0FFFFFFECh  +
push esi  +
call SetWindowLongA  +
push 37h  +
push 0  +
push 0  +
push 0  +
push 0  +
push 0  +
push esi  +
call SetWindowPos  +
pop esi  +
pop ebx  +
retn   +
***
mov eax dword_4F17A4 +
mov eax [eax+30h] +
test eax eax +
jz loc_46339C  +
push 0  +
push eax  +
call ShowOwnedPopups  +
xor edx edx +
mov eax dword_4F17A4 +
call @Forms@TApplication@SetShowHint$qqro  +
mov eax dword_4F17A4 +
call sub_4A4DC0  +
mov eax dword_4F17A4 +
call sub_4A4D68  +
retn   +
***
push ebx  +
mov ebx [ebp+hWnd] +
cmp ebx dword_4E64C8 +
jz loc_463405  +
push ebx  +
call IsWindowVisible  +
test eax eax +
jz loc_463405  +
push ebx  +
call IsWindowEnabled  +
test eax eax +
jz loc_463405  +
mov eax 8 +
call sub_4B97C0  +
mov edx dword_4E64D4 +
mov [eax] edx +
mov [eax+4] ebx +
mov dword_4E64D4 eax +
push 0  +
push ebx  +
call EnableWindow  +
or eax 0FFFFFFFFh +
pop ebx  +
pop ebp  +
retn 8  +
***
add esp 0FFFFFFF4h +
mov esi eax +
test esi esi +
jz loc_4634F8  +
mov ebx esi +
mov eax [ebx+4] +
push eax  +
call IsWindow  +
test eax eax +
jz loc_4634E6  +
push 0FFFFFFFFh  +
mov eax [ebx+4] +
push eax  +
call EnableWindow  +
mov esi [ebx] +
mov edx 8 +
mov eax ebx +
call sub_4B97E0  +
test esi esi +
jnz loc_4634CC  +
pop esi  +
pop ebx  +
retn   +
***
push ebx  +
mov ebx [ebp+hWnd] +
cmp ebx dword_4E64C8 +
jz loc_463555  +
mov eax dword_4F17A4 +
cmp ebx [eax+30h] +
jz loc_463555  +
push ebx  +
call IsWindowVisible  +
test eax eax +
jz loc_463555  +
push ebx  +
call IsWindowEnabled  +
test eax eax +
jz loc_463555  +
push 0FFFFFFECh  +
push ebx  +
call GetWindowLongA  +
test al 8 +
jnz loc_463546  +
cmp dword_4E64CC 0 +
jnz loc_463555  +
mov dword_4E64CC ebx +
jmp loc_463555  +
cmp dword_4E64D0 0 +
jnz loc_463555  +
mov dword_4E64D0 ebx +
or eax 0FFFFFFFFh +
pop ebx  +
pop ebp  +
retn 8  +
***
mov dword_4E64C8 eax +
xor eax eax +
mov dword_4E64CC eax +
xor eax eax +
mov dword_4E64D0 eax +
push 0  +
push offset @Forms@_16451  +
call GetCurrentThreadId  +
push eax  +
call EnumThreadWindows  +
cmp dword_4E64CC 0 +
jz loc_463594  +
mov eax dword_4E64CC +
retn   +
mov eax dword_4E64D0 +
retn   +
***
push 0  +
push ebx  +
add esp 0FFFFFFF8h +
call GetActiveWindow  +
mov [esp+8+var_8] eax +
mov [esp+8+var_4] 0 +
mov eax esp +
push eax  +
push offset @Forms@_16454  +
call GetCurrentThreadId  +
push eax  +
call EnumThreadWindows  +
mov al [esp+8+var_4] +
pop ecx  +
pop edx  +
retn   +
***
push edi  +
push ebp  +
mov ebp eax +
mov eax dword_4F17A8 +
call sub_46A2FC  +
mov esi eax +
dec esi  +
test esi esi +
jl loc_463648  +
inc esi  +
xor edi edi +
mov edx edi +
mov eax dword_4F17A8 +
call @Forms@TScreen@GetForm$qqri  +
mov ebx eax +
test byte ptr [ebx+1Dh] 2 +
jnz loc_463644  +
mov edx [ebx+8] +
mov eax ebp +
call unknown_libname_458  +
test eax eax +
jz loc_46367E  +
inc edi  +
dec esi  +
jnz loc_463622  +
mov eax dword_4F17A8 +
call @Forms@TScreen@GetDataModuleCount$qqrv  +
mov esi eax +
dec esi  +
test esi esi +
jl loc_46367C  +
inc esi  +
xor edi edi +
mov edx edi +
mov eax dword_4F17A8 +
call @Forms@TScreen@GetDataModule$qqri  +
mov ebx eax +
mov edx [ebx+8] +
mov eax ebp +
call unknown_libname_458  +
test eax eax +
jz loc_46367E  +
inc edi  +
dec esi  +
jnz loc_46365C  +
xor ebx ebx +
mov eax ebx +
pop ebp  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov esi eax +
mov bl ds:byte_4636D8 +
test si 4 +
jz loc_46369C  +
or bl 1 +
test si 8 +
jz loc_4636A6  +
or bl 4 +
test si 1 +
jz loc_4636B0  +
or bl 8 +
test si 2 +
jz loc_4636BA  +
or bl 10h +
test si 10h +
jz loc_4636C4  +
or bl 20h +
push 12h  +
call GetKeyState  +
test ax ax +
jge loc_4636D3  +
or bl 2 +
mov eax ebx +
pop esi  +
pop ebx  +
retn   +
***
mov esi eax +
mov bl ds:byte_463714 +
push 10h  +
call GetKeyState  +
test ax ax +
jge loc_4636F5  +
or bl 1 +
push 11h  +
call GetKeyState  +
test ax ax +
jge loc_463704  +
or bl 4 +
test esi 20000000h +
jz loc_46370F  +
or bl 2 +
mov eax ebx +
pop esi  +
pop ebx  +
retn   +
***
mov esi eax +
mov bl ds:byte_463760 +
test byte ptr [esi+10h] 80h +
jz loc_46372B  +
or bl 1 +
test byte ptr [esi+11h] 80h +
jz loc_463734  +
or bl 4 +
test byte ptr [esi+12h] 80h +
jz loc_46373D  +
or bl 2 +
test byte ptr [esi+1] 80h +
jz loc_463746  +
or bl 8 +
test byte ptr [esi+2] 80h +
jz loc_46374F  +
or bl 10h +
test byte ptr [esi+4] 80h +
jz loc_463758  +
or bl 20h +
mov eax ebx +
pop esi  +
pop ebx  +
retn   +
***
push 0  +
push 0  +
push ebx  +
push esi  +
mov esi edx +
mov ebx eax +
xor eax eax +
push ebp  +
push offset loc_4637C2  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
lea edx [ebp+var_4] +
mov eax esi +
call @Menus@GetHotkey$qqrx17System@AnsiString  +
mov eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_8] +
mov edx ebx +
call unknown_libname_544  +
mov eax [ebp+var_8] +
pop edx  +
call unknown_libname_458  +
test eax eax +
setz al  +
mov ebx eax +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4637C9  +
lea eax [ebp+var_8] +
mov edx 2 +
call unknown_libname_541  +
retn   +
jmp unknown_libname_539  +
jmp loc_4637B4  +
mov eax ebx +
pop esi  +
pop ebx  +
pop ecx  +
pop ecx  +
pop ebp  +
retn   +
***
jmp loc_4637DB  +
mov ebx eax +
mov eax [ebx+30h] +
test eax eax +
jnz loc_4637D9  +
mov eax ebx +
mov edx ds:off_462B40 +
call @System@@IsClass$qqrp14System@TObjectp17System@TMetaClass  +
test al al +
jz loc_4637F7  +
mov eax ebx +
pop ebx  +
retn   +
xor eax eax +
pop ebx  +
retn   +
***
add esp 0FFFFFFF4h +
push ebx  +
xor al 1 +
retn   +
***
push edi  +
mov esi edx +
mov ebx eax +
mov eax esi +
mov edx ds:off_461094 +
call @System@@IsClass$qqrp14System@TObjectp17System@TMetaClass  +
test al al +
jz loc_46394E  +
mov edi esi +
mov dl [edi+1Ch] +
mov eax ebx +
call unknown_libname_189  +
mov edx [edi+10h] +
mov eax ebx +
call @Forms@TControlScrollBar@SetRange$qqri  +
mov edx [edi+0Ch] +
mov eax ebx +
call @Forms@TControlScrollBar@SetPosition$qqri  +
mov ax [edi+8] +
mov [ebx+8] ax +
jmp loc_463957  +
mov edx esi +
mov eax ebx +
call @Classes@TPersistent@Assign$qqrp19Classes@TPersistent  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
cmp byte ptr [ebx+18h] 0 +
jnz loc_463991  +
mov eax ebx +
call @Forms@TControlScrollBar@IsScrollBarVisible$qqrv  +
test al al +
jz loc_463991  +
mov eax [ebx+4] +
call @Controls@TControl@UseRightToLeftScrollBar$qqrv  +
test al al +
jnz loc_463987  +
xor edx edx +
mov eax ebx +
call @Forms@TControlScrollBar@SetPosition$qqri  +
jmp loc_463991  +
mov edx [ebx+10h] +
mov eax ebx +
call @Forms@TControlScrollBar@SetPosition$qqri  +
pop ebx  +
retn   +
***
push ebx  +
mov ebx eax +
cmp byte ptr [ebx+57h] 0 +
jz loc_4639F4  +
mov al [ebx+5Bh] +
sub al 1 +
jb loc_4639B1  +
sub al 2 +
jz loc_4639B1  +
dec al  +
jz loc_4639EB  +
jmp loc_4639F4  +
cmp byte ptr [ebx+5Bh] 3 +
jz loc_4639C9  +
mov al ds:byte_4639F8 +
and al [ebx+61h] +
mov dl ds:byte_4639FC +
cmp dl al +
jnz loc_4639F4  +
mov eax [ebp+arg_0] +
mov eax [eax-8] +
mov edx [eax+0Ch] +
add edx [ebx+40h] +
add edx [ebx+48h] +
mov eax [ebp+arg_0] +
mov eax [eax-4] +
call @TeeProcs@_16418  +
mov edx [ebp+arg_0] +
mov [edx-4] eax +
jmp loc_4639F4  +
mov eax [ebp+arg_0] +
mov edx [ebx+48h] +
add [eax-0Ch] edx +
pop ebx  +
pop ebp  +
retn   +
***
push ebx  +
mov ebx eax +
cmp byte ptr [ebx+57h] 0 +
jz loc_463A5A  +
mov al [ebx+5Bh] +
sub al 2 +
jb loc_463A17  +
jz loc_463A51  +
jmp loc_463A5A  +
cmp byte ptr [ebx+5Bh] 1 +
jz loc_463A2F  +
mov al ds:byte_463A60 +
and al [ebx+61h] +
mov dl ds:byte_463A64 +
cmp dl al +
jnz loc_463A5A  +
mov eax [ebp+arg_0] +
mov eax [eax-8] +
mov edx [eax+0Ch] +
add edx [ebx+44h] +
add edx [ebx+4Ch] +
mov eax [ebp+arg_0] +
mov eax [eax-4] +
call @TeeProcs@_16418  +
mov edx [ebp+arg_0] +
mov [edx-4] eax +
jmp loc_463A5A  +
mov eax [ebp+arg_0] +
mov edx [ebx+4Ch] +
add [eax-0Ch] edx +
pop ebx  +
pop ebp  +
retn   +
***
add esp 0FFFFFFF4h +
push ebx  +
push esi  +
mov [ebp+var_8] eax +
mov eax [ebp+var_8] +
mov ebx [eax+4] +
cmp byte ptr [ebx+210h] 0 +
jz loc_463B0D  +
mov eax ebx +
mov edx [eax] +
call dword ptr [edx+0C4h]  +
test al al +
jz loc_463B03  +
xor eax eax +
mov [ebp+var_4] eax +
xor eax eax +
mov [ebp+var_C] eax +
mov eax [ebp+var_8] +
mov eax [eax+4] +
call @Controls@TWinControl@GetControlCount$qqrv  +
mov ebx eax +
dec ebx  +
test ebx ebx +
jl loc_463AEA  +
inc ebx  +
xor esi esi +
mov eax [ebp+var_8] +
cmp byte ptr [eax+18h] 0 +
jnz loc_463AD2  +
push ebp  +
mov eax [ebp+var_8] +
mov eax [eax+4] +
mov edx esi +
call @Controls@TWinControl@GetControl$qqri  +
call @Forms@_16477  +
pop ecx  +
jmp loc_463AE6  +
push ebp  +
mov eax [ebp+var_8] +
mov eax [eax+4] +
mov edx esi +
call @Controls@TWinControl@GetControl$qqri  +
call @Forms@_16478  +
pop ecx  +
inc esi  +
dec ebx  +
jnz loc_463AB3  +
mov edx [ebp+var_4] +
add edx [ebp+var_C] +
mov eax [ebp+var_8] +
movzx eax word ptr [eax+1Ah] +
add edx eax +
mov eax [ebp+var_8] +
call @Forms@TControlScrollBar@DoSetRange$qqri  +
jmp loc_463B0D  +
xor edx edx +
mov eax [ebp+var_8] +
call @Forms@TControlScrollBar@DoSetRange$qqri  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
mov ebx eax +
push ebx  +
mov ebx 100000h +
cmp ax 1 +
jnz loc_463B60  +
mov ebx 200000h +
push 0FFFFFFF0h  +
mov eax [ebp+arg_0] +
mov eax [eax-4] +
mov eax [eax+4] +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call GetWindowLongA  +
test ebx eax +
setnz al  +
pop ebx  +
pop ebp  +
retn   +
***
push ebx  +
add esp 0FFFFFFF4h +
push ebx  +
mov [ebp+var_6] cl +
mov [ebp+var_5] dl +
mov [ebp+var_4] eax +
push 0FFFFFFF0h  +
mov eax [ebp+var_4] +
mov eax [eax+4] +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call GetWindowLongA  +
test eax 840000h +
setnz al  +
and eax 7Fh +
mov [ebp+var_C] eax +
mov eax [ebp+var_4] +
cmp byte ptr [eax+18h] 1 +
jnz loc_463C56  +
push ebp  +
mov dx 15h +
xor eax eax +
call unknown_libname_187  +
pop ecx  +
mov ebx eax +
mov eax [ebp+var_4] +
mov eax [eax+4] +
call @Controls@TControl@GetClientHeight$qqrv  +
add ebx eax +
mov eax ebx +
jmp loc_463C76  +
push ebp  +
mov dx 14h +
mov ax 1 +
call unknown_libname_187  +
pop ecx  +
mov ebx eax +
mov eax [ebp+var_4] +
mov eax [eax+4] +
call @Controls@TControl@GetClientWidth$qqrv  +
add ebx eax +
mov eax ebx +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
xor ecx ecx +
xor edx edx +
mov eax ebx +
call unknown_libname_568  +
cmp eax [ebx+10h] +
setl al  +
pop ebx  +
retn   +
***
add esp 0FFFFFFE4h +
push ebx  +
push esi  +
mov [ebp+var_1C] 1Ch +
mov [ebp+var_18] 10h +
xor ebx ebx +
mov eax [ebp+arg_0] +
mov eax [eax-4] +
cmp byte ptr [eax+18h] 1 +
jnz loc_463CBD  +
mov ebx 1 +
mov eax [ebp+arg_0] +
mov esi [eax-8] +
movsx esi word ptr [esi+6] +
lea eax [ebp+var_1C] +
push eax  +
push ebx  +
mov eax [ebp+arg_0] +
mov eax [eax-4] +
mov eax [eax+4] +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
mov eax off_4EA808 +
mov eax [eax] +
call eax  +
test eax eax +
jz loc_463CEB  +
mov esi [ebp+var_4] +
mov eax esi +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
add esp 0FFFFFFF0h +
push ebx  +
push esi  +
push edi  +
mov [ebp+var_8] edx +
mov [ebp+var_4] eax +
mov eax [ebp+var_4] +
cmp byte ptr [eax+1Fh] 0 +
jz loc_463EAE  +
mov eax [ebp+var_8] +
mov ax [eax+4] +
sub ax 4 +
jnb loc_463EAE  +
mov eax [ebp+var_8] +
mov ax [eax+4] +
sub ax 2 +
jb loc_463D36  +
sub ax 2 +
jb loc_463D57  +
jmp loc_463D7D  +
mov eax [ebp+var_4] +
movzx ebx word ptr [eax+8] +
mov eax ebx +
mov edx [ebp+var_4] +
mov ecx [edx+40h] +
cdq   +
idiv  ecx +
mov [ebp+var_C] eax +
mov eax ebx +
cdq   +
idiv  ecx +
mov [ebp+var_10] edx +
mov esi ecx +
jmp loc_463D89  +
mov eax [ebp+var_4] +
movzx eax word ptr [eax+0Ah] +
mov [ebp+var_C] eax +
mov eax [ebp+var_4] +
mov ecx [eax+3Ch] +
mov eax [ebp+var_C] +
cdq   +
idiv  ecx +
mov [ebp+var_10] edx +
mov eax [ebp+var_C] +
cdq   +
idiv  ecx +
mov [ebp+var_C] eax +
mov esi ecx +
jmp loc_463D89  +
xor esi esi +
xor eax eax +
mov [ebp+var_C] eax +
xor eax eax +
mov [ebp+var_10] eax +
xor edi edi +
test esi esi +
jle loc_463E2E  +
call sub_497850  +
mov ebx eax +
mov eax ebx +
sub eax edi +
mov edx [ebp+var_4] +
mov edx [edx+20h] +
cmp eax edx +
jge loc_463DB0  +
sub edx eax +
push edx  +
call Sleep  +
mov edi ebx +
mov eax [ebp+var_8] +
mov ax [eax+4] +
sub ax 1 +
jb loc_463DCD  +
jz loc_463DE0  +
dec ax  +
jz loc_463DF3  +
dec ax  +
jz loc_463E06  +
jmp loc_463E17  +
mov eax [ebp+var_4] +
mov edx [eax+0Ch] +
sub edx [ebp+var_C] +
mov eax [ebp+var_4] +
call @Forms@TControlScrollBar@SetPosition$qqri  +
jmp loc_463E17  +
mov eax [ebp+var_4] +
mov edx [eax+0Ch] +
add edx [ebp+var_C] +
mov eax [ebp+var_4] +
call @Forms@TControlScrollBar@SetPosition$qqri  +
jmp loc_463E17  +
mov eax [ebp+var_4] +
mov edx [eax+0Ch] +
sub edx [ebp+var_C] +
mov eax [ebp+var_4] +
call @Forms@TControlScrollBar@SetPosition$qqri  +
jmp loc_463E17  +
mov eax [ebp+var_4] +
mov edx [eax+0Ch] +
add edx [ebp+var_C] +
mov eax [ebp+var_4] +
call @Forms@TControlScrollBar@SetPosition$qqri  +
mov eax [ebp+var_4] +
mov eax [eax+4] +
mov edx [eax] +
call dword ptr [edx+88h]  +
dec esi  +
test esi esi +
jg loc_463D93  +
cmp [ebp+var_10] 0 +
jle loc_463FE2  +
mov eax [ebp+var_8] +
mov ax [eax+4] +
sub ax 1 +
jb loc_463E56  +
jz loc_463E6C  +
dec ax  +
jz loc_463E82  +
dec ax  +
jz loc_463E98  +
jmp loc_463FE2  +
mov eax [ebp+var_4] +
mov edx [eax+0Ch] +
sub edx [ebp+var_10] +
mov eax [ebp+var_4] +
call @Forms@TControlScrollBar@SetPosition$qqri  +
jmp loc_463FE2  +
mov eax [ebp+var_4] +
mov edx [eax+0Ch] +
add edx [ebp+var_10] +
mov eax [ebp+var_4] +
call @Forms@TControlScrollBar@SetPosition$qqri  +
jmp loc_463FE2  +
mov eax [ebp+var_4] +
mov edx [eax+0Ch] +
sub edx [ebp+var_10] +
mov eax [ebp+var_4] +
call @Forms@TControlScrollBar@SetPosition$qqri  +
jmp loc_463FE2  +
mov eax [ebp+var_4] +
mov edx [eax+0Ch] +
add edx [ebp+var_10] +
mov eax [ebp+var_4] +
call @Forms@TControlScrollBar@SetPosition$qqri  +
jmp loc_463FE2  +
mov eax [ebp+var_8] +
movsx eax word ptr [eax+4] +
cmp eax 7 +
ja loc_463FE2  +
jmp ds:off_463EC5[eax*4]  +
mov eax [ebp+var_4] +
mov edx [eax+0Ch] +
mov eax [ebp+var_4] +
movzx eax word ptr [eax+8] +
sub edx eax +
mov eax [ebp+var_4] +
call @Forms@TControlScrollBar@SetPosition$qqri  +
jmp loc_463FE2  +
mov eax [ebp+var_4] +
mov edx [eax+0Ch] +
mov eax [ebp+var_4] +
movzx eax word ptr [eax+8] +
add edx eax +
mov eax [ebp+var_4] +
call @Forms@TControlScrollBar@SetPosition$qqri  +
jmp loc_463FE2  +
xor ecx ecx +
mov dl 1 +
mov eax [ebp+var_4] +
call unknown_libname_568  +
mov edx [ebp+var_4] +
mov edx [edx+0Ch] +
sub edx eax +
mov eax [ebp+var_4] +
call @Forms@TControlScrollBar@SetPosition$qqri  +
jmp loc_463FE2  +
xor ecx ecx +
mov dl 1 +
mov eax [ebp+var_4] +
call unknown_libname_568  +
mov edx eax +
mov eax [ebp+var_4] +
add edx [eax+0Ch] +
mov eax [ebp+var_4] +
call @Forms@TControlScrollBar@SetPosition$qqri  +
jmp loc_463FE2  +
mov eax [ebp+var_4] +
cmp dword ptr [eax+14h] 7FFFh +
jle loc_463F7E  +
push ebp  +
call unknown_libname_188  +
pop ecx  +
mov edx eax +
mov eax [ebp+var_4] +
call @Forms@TControlScrollBar@SetPosition$qqri  +
jmp loc_463FE2  +
mov edx [ebp+var_8] +
movsx edx word ptr [edx+6] +
mov eax [ebp+var_4] +
call @Forms@TControlScrollBar@SetPosition$qqri  +
jmp loc_463FE2  +
mov eax [ebp+var_4] +
cmp byte ptr [eax+1Dh] 0 +
jz loc_463FE2  +
mov eax [ebp+var_4] +
cmp dword ptr [eax+14h] 7FFFh +
jle loc_463FB7  +
push ebp  +
call unknown_libname_188  +
pop ecx  +
mov edx eax +
mov eax [ebp+var_4] +
call @Forms@TControlScrollBar@SetPosition$qqri  +
jmp loc_463FE2  +
mov edx [ebp+var_8] +
movsx edx word ptr [edx+6] +
mov eax [ebp+var_4] +
call @Forms@TControlScrollBar@SetPosition$qqri  +
jmp loc_463FE2  +
xor edx edx +
mov eax [ebp+var_4] +
call @Forms@TControlScrollBar@SetPosition$qqri  +
jmp loc_463FE2  +
mov eax [ebp+var_4] +
mov edx [eax+14h] +
mov eax [ebp+var_4] +
call @Forms@TControlScrollBar@SetPosition$qqri  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
mov ebx eax +
cmp edx [ebx+24h] +
jz loc_46402B  +
mov esi edx +
test esi esi +
jnz loc_464013  +
xor eax eax +
mov al [ebx+18h] +
mov eax dword_4E64D8[eax*4] +
push eax  +
mov eax off_4EA7F4 +
mov eax [eax] +
call eax  +
mov edx eax +
mov [ebx+24h] edx +
mov byte ptr [ebx+44h] 1 +
mov eax [ebx+4] +
call @Forms@TScrollingWinControl@UpdateScrollBars$qqrv  +
test esi esi +
jnz loc_46402B  +
xor eax eax +
mov [ebx+24h] eax +
pop esi  +
pop ebx  +
retn   +
***
cmp edx [eax+28h] +
jz locret_464048  +
mov [eax+28h] edx +
mov byte ptr [eax+2Ch] 0 +
mov byte ptr [eax+44h] 1 +
mov eax [eax+4] +
call @Forms@TScrollingWinControl@UpdateScrollBars$qqrv  +
retn   +
***
cmp dl [eax+2Ch] +
jz locret_464062  +
mov [eax+2Ch] dl +
test dl dl +
jz locret_464062  +
mov edx 80000014h +
call @Forms@TControlScrollBar@SetColor$qqr15Graphics@TColor  +
retn   +
***
push edi  +
mov ebx eax +
mov eax [ebx+4] +
test byte ptr [eax+1Ch] 2 +
jz loc_46407A  +
mov [ebx+0Ch] edx +
jmp loc_464121  +
mov eax [ebx+14h] +
cmp edx eax +
jle loc_464085  +
mov edx eax +
jmp loc_46408B  +
test edx edx +
jge loc_46408B  +
xor edx edx +
cmp byte ptr [ebx+18h] 0 +
jnz loc_464095  +
xor esi esi +
jmp loc_464099  +
mov si 1 +
mov eax [ebx+0Ch] +
cmp edx eax +
jz loc_4640ED  +
mov [ebx+0Ch] edx +
cmp byte ptr [ebx+18h] 0 +
jnz loc_4640B9  +
sub eax edx +
mov edx eax +
xor ecx ecx +
mov eax [ebx+4] +
call @Controls@TWinControl@ScrollBy$qqrii  +
jmp loc_4640C7  +
mov ecx eax +
sub ecx edx +
mov eax [ebx+4] +
xor edx edx +
call @Controls@TWinControl@ScrollBy$qqrii  +
mov eax [ebx+4] +
test byte ptr [eax+1Ch] 10h +
jz loc_4640ED  +
call @Forms@GetParentForm$qqrp17Controls@TControl  +
test eax eax +
jz loc_4640ED  +
cmp dword ptr [eax+250h] 0 +
jz loc_4640ED  +
mov eax [eax+250h] +
mov edx [eax] +
call dword ptr [edx+0Ch]  +
movzx edi si +
push edi  +
mov eax [ebx+4] +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
mov eax off_4EA80C +
mov eax [eax] +
call eax  +
cmp eax [ebx+0Ch] +
jz loc_464121  +
push 0FFFFFFFFh  +
mov eax [ebx+0Ch] +
push eax  +
push edi  +
mov eax [ebx+4] +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
mov eax off_4EA810 +
mov eax [eax] +
call eax  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov ebx eax +
cmp edx [ebx+30h] +
jz loc_464167  +
mov esi edx +
test esi esi +
jnz loc_46414F  +
xor eax eax +
mov al [ebx+18h] +
mov eax dword_4E64E0[eax*4] +
push eax  +
mov eax off_4EA7F4 +
mov eax [eax] +
call eax  +
mov edx eax +
mov [ebx+30h] edx +
mov byte ptr [ebx+44h] 1 +
mov eax [ebx+4] +
call @Forms@TScrollingWinControl@UpdateScrollBars$qqrv  +
test esi esi +
jnz loc_464167  +
xor eax eax +
mov [ebx+30h] eax +
pop esi  +
pop ebx  +
retn   +
***
cmp dl [eax+34h] +
jz locret_464180  +
mov [eax+34h] dl +
mov byte ptr [eax+44h] 1 +
mov eax [eax+4] +
call @Forms@TScrollingWinControl@UpdateScrollBars$qqrv  +
retn   +
***
cmp edx [eax+38h] +
jz locret_464198  +
mov [eax+38h] edx +
mov byte ptr [eax+44h] 1 +
mov eax [eax+4] +
call @Forms@TScrollingWinControl@UpdateScrollBars$qqrv  +
retn   +
***
mov ecx edx +
mov [eax+10h] ecx +
test ecx ecx +
jge loc_4641AA  +
xor edx edx +
mov [eax+10h] edx +
mov eax [eax+4] +
call @Forms@TScrollingWinControl@UpdateScrollBars$qqrv  +
retn   +
***
mov ecx [eax+4] +
mov eax [eax+4] +
mov [eax+1Ch] dl +
push ebx  +
add esp 0FFFFFFDCh +
push ebx  +
push esi  +
push edi  +
mov [ebp+var_6] cl +
mov [ebp+var_5] dl +
mov [ebp+var_4] eax +
lea esi [ebp+var_4] +
mov eax [esi] +
xor edx edx +
mov [eax+14h] edx +
xor ebx ebx +
mov eax [esi] +
cmp byte ptr [eax+18h] 1 +
jnz loc_464312  +
mov bx 1 +
mov eax [esi] +
cmp byte ptr [eax+1Ch] 0 +
jz loc_46433E  +
mov cl [ebp+var_6] +
mov dl [ebp+var_5] +
mov eax [esi] +
call unknown_libname_568  +
mov edx [esi] +
mov edi [edx+10h] +
sub edi eax +
mov eax [esi] +
mov [eax+14h] edi +
test edi edi +
jge loc_46433E  +
mov eax [esi] +
xor edx edx +
mov [eax+14h] edx +
mov [ebp+var_22] 1Ch +
mov [ebp+var_1E] 17h +
xor eax eax +
mov [ebp+var_1A] eax +
mov eax [esi] +
cmp dword ptr [eax+14h] 0 +
jle loc_464363  +
mov eax [esi] +
mov eax [eax+10h] +
mov [ebp+var_16] eax +
jmp loc_464368  +
xor eax eax +
mov [ebp+var_16] eax +
mov cl [ebp+var_6] +
mov dl [ebp+var_5] +
mov eax [esi] +
call unknown_libname_568  +
inc eax  +
mov [ebp+var_12] eax +
mov eax [esi] +
mov eax [eax+0Ch] +
mov [ebp+var_E] eax +
mov [ebp+var_A] eax +
push ebp  +
mov eax [esi] +
mov al [eax+44h] +
call @Forms@_16504  +
pop ecx  +
mov eax [esi] +
mov byte ptr [eax+44h] 0 +
push 0FFFFFFFFh  +
lea eax [ebp+var_22] +
push eax  +
movzx eax bx +
push eax  +
mov eax [esi] +
mov eax [eax+4] +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
mov eax off_4EA814 +
mov eax [eax] +
call eax  +
mov eax [esi] +
mov edx [eax+0Ch] +
mov eax [esi] +
call @Forms@TControlScrollBar@SetPosition$qqri  +
xor ecx ecx +
mov dl 1 +
mov eax [esi] +
call unknown_libname_568  +
lea eax [eax+eax*8] +
mov ecx 0Ah +
cdq   +
idiv  ecx +
mov ebx eax +
mov eax [esi] +
mov [eax+0Ah] bx +
mov eax [esi] +
cmp byte ptr [eax+1Fh] 0 +
jz loc_4643F8  +
movzx eax bx +
mov ecx 0Ah +
xor edx edx +
div  ecx +
mov edx [esi] +
mov [edx+8] ax +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
test dl dl +
call unknown_libname_536  +
mov ebx edx +
mov esi eax +
mov eax [esi+208h] +
call @System@TObject@Free$qqrv  +
mov eax [esi+20Ch] +
call @System@TObject@Free$qqrv  +
mov edx ebx +
and dl 0FCh +
mov eax esi +
call @Controls@TWinControl@$bdtr$qqrv  +
test bl bl +
jle loc_4644A0  +
mov eax esi +
call @System@@ClassDestroy$qqrp14System@TObject  +
pop esi  +
pop ebx  +
retn   +
***
mov edx ebx +
mov eax ebx +
call @Controls@TWinControl@CreateWnd$qqrv  +
mov eax off_4EA8CC +
cmp byte ptr [eax+0Dh] 0 +
jnz loc_4644E9  +
mov edx 1 +
mov eax 5 +
call sub_4AC980  +
test al al +
jnz loc_4644E9  +
mov eax ebx +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call @Flatsb@InitializeFlatSB$qqsui  +
mov eax ebx +
call @Forms@TScrollingWinControl@UpdateScrollBars$qqrv  +
pop ebx  +
retn   +
***
push edi  +
mov edi ecx +
mov esi edx +
mov ebx eax +
mov eax ebx +
call @Forms@TScrollingWinControl@CalcAutoRange$qqrv  +
mov ecx edi +
mov edx esi +
mov eax ebx +
call @Controls@TWinControl@AlignControls$qqrp17Controls@TControlr11Types@TRect  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
cmp byte ptr [eax+5Ch] 0 +
jnz loc_46452C  +
cmp byte ptr [eax+1A8h] 0 +
jz loc_46452F  +
cmp byte ptr [eax+1A7h] 0 +
jz loc_46452F  +
xor eax eax +
retn   +
mov al 1 +
retn   +
***
add esp 0FFFFFFF0h +
push ebx  +
push esi  +
push edi  +
mov [ebp+var_4] eax +
mov dl 1 +
mov eax ds:off_49A5D8 +
call @System@TObject@$bctr$qqrv  +
mov [ebp+var_10] eax +
xor eax eax +
push ebp  +
push offset loc_46463C  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov eax [ebp+var_4] +
call @Controls@TControl@GetClientWidth$qqrv  +
mov [ebp+var_8] eax +
mov eax [ebp+var_4] +
mov ebx [eax+208h] +
mov eax ebx +
call @Forms@TControlScrollBar@IsScrollBarVisible$qqrv  +
test al al +
jz loc_464584  +
mov eax [ebx+10h] +
cmp eax [ebp+var_8] +
jg loc_464588  +
xor eax eax +
jmp loc_46458A  +
mov al 1 +
mov [ebp+var_9] al +
cmp [ebp+var_9] 0 +
jz loc_4645A2  +
mov eax [ebx+10h] +
mov [ebp+var_8] eax +
xor edx edx +
mov eax ebx +
call @Forms@TControlScrollBar@SetPosition$qqri  +
mov eax [ebp+var_4] +
call @Controls@TWinControl@GetControlCount$qqrv  +
mov esi eax +
dec esi  +
test esi esi +
jl loc_4645E8  +
inc esi  +
xor ebx ebx +
mov edx ebx +
mov eax [ebp+var_4] +
call @Controls@TWinControl@GetControl$qqri  +
mov edi eax +
mov edx ebx +
mov eax [ebp+var_4] +
call @Controls@TWinControl@GetControl$qqri  +
mov edx eax +
mov eax [ebp+var_10] +
call @Classes@TList@Add$qqrpv  +
mov edx [ebp+var_8] +
sub edx [edi+48h] +
sub edx [edi+40h] +
mov eax edi +
call @Controls@TControl@SetLeft$qqri  +
inc ebx  +
dec esi  +
jnz loc_4645B4  +
mov eax [ebp+var_10] +
mov esi [eax+8] +
dec esi  +
test esi esi +
jl loc_464612  +
inc esi  +
xor ebx ebx +
push 0  +
mov edx ebx +
mov eax [ebp+var_10] +
call @Classes@TList@Get$qqri  +
xor ecx ecx +
mov edx 0B03Eh +
call @Controls@TControl@Perform$qqruiii  +
inc ebx  +
dec esi  +
jnz loc_4645F6  +
cmp [ebp+var_9] 0 +
jz loc_464626  +
mov eax [ebp+var_4] +
mov eax [eax+208h] +
call @Forms@TControlScrollBar@ChangeBiDiPosition$qqrv  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_464643  +
mov eax [ebp+var_10] +
call @System@TObject@Free$qqrv  +
retn   +
jmp unknown_libname_539  +
jmp loc_464633  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
cmp dword ptr [ebx+214h] 0 +
cmp dl [ebx+210h] +
jz loc_4646A8  +
mov [ebx+210h] dl +
test dl dl +
jz loc_46468E  +
mov eax ebx +
call @Forms@TScrollingWinControl@CalcAutoRange$qqrv  +
jmp loc_4646A8  +
xor edx edx +
mov eax [ebx+208h] +
call @Forms@TControlScrollBar@SetRange$qqri  +
xor edx edx +
mov eax [ebx+20Ch] +
call @Forms@TControlScrollBar@SetRange$qqri  +
pop ebx  +
retn   +
***
mov eax [esi+20Ch] +
push ecx  +
mov [ebp+var_4] eax +
mov eax [ebp+var_4] +
cmp byte ptr [eax+218h] 0 +
jnz loc_4647BE  +
mov eax [ebp+var_4] +
call @Controls@TWinControl@HandleAllocated$qqrv  +
test al al +
jz loc_4647BE  +
xor eax eax +
push ebp  +
push offset loc_4647B7  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov eax [ebp+var_4] +
mov byte ptr [eax+218h] 1 +
mov eax [ebp+var_4] +
mov eax [eax+20Ch] +
call @Forms@TControlScrollBar@NeedsScrollBarVisible$qqrv  +
test al al +
jz loc_464743  +
mov eax [ebp+var_4] +
mov eax [eax+208h] +
mov cl 1 +
xor edx edx +
call unknown_libname_569  +
mov eax [ebp+var_4] +
mov eax [eax+20Ch] +
xor ecx ecx +
mov dl 1 +
call unknown_libname_569  +
jmp loc_46479F  +
mov eax [ebp+var_4] +
mov eax [eax+208h] +
call @Forms@TControlScrollBar@NeedsScrollBarVisible$qqrv  +
test al al +
jz loc_46477B  +
mov eax [ebp+var_4] +
mov eax [eax+20Ch] +
mov cl 1 +
xor edx edx +
call unknown_libname_569  +
mov eax [ebp+var_4] +
mov eax [eax+208h] +
xor ecx ecx +
mov dl 1 +
call unknown_libname_569  +
jmp loc_46479F  +
mov eax [ebp+var_4] +
mov eax [eax+20Ch] +
xor ecx ecx +
xor edx edx +
call unknown_libname_569  +
mov eax [ebp+var_4] +
mov eax [eax+208h] +
xor ecx ecx +
mov dl 1 +
call unknown_libname_569  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4647BE  +
mov eax [ebp+var_4] +
mov byte ptr [eax+218h] 0 +
retn   +
jmp unknown_libname_539  +
jmp loc_4647AC  +
pop ecx  +
pop ebp  +
retn   +
***
test edx edx +
jz locret_4647D9  +
test byte ptr [edx+1Ch] 1 +
jnz locret_4647D9  +
test byte ptr [eax+1Ch] 1 +
jnz locret_4647D9  +
call @Forms@TScrollingWinControl@ScrollInView$qqrp17Controls@TControl  +
retn   +
***
push edi  +
push ebp  +
add esp 0FFFFFFE0h +
mov esi edx +
mov ebx eax +
mov edi esp +
test esi esi +
jz loc_464925  +
mov edx edi +
mov eax esi +
mov ecx [eax] +
call dword ptr [ecx+44h]  +
mov eax [ebx+208h] +
movzx eax word ptr [eax+1Ah] +
sub [edi] eax +
add [edi+8] eax +
mov eax [ebx+20Ch] +
movzx eax word ptr [eax+1Ah] +
sub [edi+4] eax +
add [edi+0Ch] eax +
lea ecx [esp+20h+var_8] +
mov edx edi +
mov eax esi +
call @Controls@TControl@ClientToScreen$qqrrx14Windows@TPoint  +
lea edx [esp+20h+var_8] +
lea ecx [esp+20h+var_10] +
mov eax ebx +
call @Controls@TControl@ScreenToClient$qqrrx14Windows@TPoint  +
mov eax [esp+20h+var_10] +
mov [edi] eax +
mov eax [esp+20h+var_C] +
mov [edi+4] eax +
lea ecx [esp+20h+var_8] +
lea edx [edi+8] +
mov eax esi +
call @Controls@TControl@ClientToScreen$qqrrx14Windows@TPoint  +
lea edx [esp+20h+var_8] +
lea ecx [esp+20h+var_10] +
mov eax ebx +
call @Controls@TControl@ScreenToClient$qqrrx14Windows@TPoint  +
mov eax [esp+20h+var_10] +
mov [edi+8] eax +
mov eax [esp+20h+var_C] +
mov [edi+0Ch] eax +
mov esi [edi] +
test esi esi +
jge loc_464885  +
mov eax [ebx+208h] +
mov edx [eax+0Ch] +
add edx esi +
call @Forms@TControlScrollBar@SetPosition$qqri  +
jmp loc_4648C8  +
mov eax ebx +
call @Controls@TControl@GetClientWidth$qqrv  +
mov ebp [edi+8] +
cmp eax ebp +
jge loc_4648C8  +
mov eax ebx +
call @Controls@TControl@GetClientWidth$qqrv  +
sub ebp esi +
cmp eax ebp +
jge loc_4648AC  +
mov eax ebx +
call @Controls@TControl@GetClientWidth$qqrv  +
add eax [edi] +
mov [edi+8] eax +
mov esi [ebx+208h] +
mov eax ebx +
call @Controls@TControl@GetClientWidth$qqrv  +
mov edx [esi+0Ch] +
add edx [edi+8] +
sub edx eax +
mov eax esi +
call @Forms@TControlScrollBar@SetPosition$qqri  +
mov esi [edi+4] +
test esi esi +
jge loc_4648E1  +
mov eax [ebx+20Ch] +
mov edx [eax+0Ch] +
add edx esi +
call @Forms@TControlScrollBar@SetPosition$qqri  +
jmp loc_464925  +
mov eax ebx +
call @Controls@TControl@GetClientHeight$qqrv  +
mov ebp [edi+0Ch] +
cmp eax ebp +
jge loc_464925  +
mov eax ebx +
call @Controls@TControl@GetClientHeight$qqrv  +
sub ebp esi +
cmp eax ebp +
jge loc_464909  +
mov eax ebx +
call @Controls@TControl@GetClientHeight$qqrv  +
add eax [edi+4] +
mov [edi+0Ch] eax +
mov esi [ebx+20Ch] +
mov eax ebx +
call @Controls@TControl@GetClientHeight$qqrv  +
mov edx [esi+0Ch] +
add edx [edi+0Ch] +
sub edx eax +
mov eax esi +
call @Forms@TControlScrollBar@SetPosition$qqri  +
add esp 20h +
pop ebp  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
push edi  +
mov edi ecx +
mov esi edx +
mov ebx eax +
mov ecx edi +
mov edx esi +
mov eax ebx +
call @Forms@TScrollingWinControl@ScaleScrollBars$qqrii  +
mov ecx edi +
mov edx esi +
mov eax ebx +
call @Controls@TWinControl@ChangeScale$qqrii  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push ecx  +
push ebx  +
mov ebx edx +
mov [ebp+var_4] eax +
mov eax [ebp+var_4] +
inc dword ptr [eax+214h]  +
xor edx edx +
push ebp  +
push offset loc_464A66  +
push dword ptr fs:[edx]  +
mov fs:[edx] esp +
mov edx ebx +
mov eax [ebp+var_4] +
call @Controls@TWinControl@WMSize$qqrr16Messages@TWMSize  +
xor eax eax +
mov edx [ebx+4] +
sub edx 1 +
jb loc_464A38  +
jz loc_464A3C  +
dec edx  +
jz loc_464A40  +
jmp loc_464A42  +
xor eax eax +
jmp loc_464A42  +
mov al 1 +
jmp loc_464A42  +
mov al 2 +
mov edx eax +
mov eax [ebp+var_4] +
mov ecx [eax] +
call dword ptr [ecx+0CCh]  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_464A6D  +
mov eax [ebp+var_4] +
dec dword ptr [eax+214h]  +
retn   +
jmp unknown_libname_539  +
jmp loc_464A5C  +
mov eax [ebp+var_4] +
mov byte ptr [eax+218h] 1 +
xor eax eax +
push ebp  +
push offset loc_464AA5  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov eax [ebp+var_4] +
call @Forms@TScrollingWinControl@CalcAutoRange$qqrv  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_464AAC  +
mov eax [ebp+var_4] +
mov byte ptr [eax+218h] 0 +
retn   +
jmp unknown_libname_539  +
jmp loc_464A9A  +
mov eax [ebp+var_4] +
mov eax [eax+208h] +
cmp byte ptr [eax+1Ch] 0 +
jnz loc_464ACA  +
mov eax [ebp+var_4] +
mov eax [eax+20Ch] +
cmp byte ptr [eax+1Ch] 0 +
jz loc_464AD2  +
mov eax [ebp+var_4] +
call @Forms@TScrollingWinControl@UpdateScrollBars$qqrv  +
pop ebx  +
pop ecx  +
pop ebp  +
retn   +
***
cmp dword ptr [edx+8] 0 +
cmp dword ptr [edx+8] 0 +
push edi  +
add esp 0FFFFFFF0h +
mov esi edx +
mov ebx eax +
mov eax ebx +
call @Controls@TControl@GetClientHeight$qqrv  +
mov edx [ebx+20Ch] +
mov edx [edx+10h] +
call @TeeProcs@_16418  +
push eax  +
lea eax [esp+14h+var_10] +
push eax  +
mov eax ebx +
call @Controls@TControl@GetClientWidth$qqrv  +
mov edx eax +
mov edi [ebx+208h] +
mov eax [edi+10h] +
call @TeeProcs@_16418  +
mov ecx eax +
mov eax [ebx+20Ch] +
mov edx [eax+0Ch] +
neg edx  +
mov eax [edi+0Ch] +
neg eax  +
call sub_49B730  +
push esi  +
mov edi esi +
lea esi [esp+14h+var_10] +
movs   +
movs   +
movs   +
movs   +
pop esi  +
mov edx esi +
mov eax ebx +
call nullsub_14  +
add esp 10h +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
add esp 0FFFFFFF4h +
mov [ebp+var_8] edx +
mov [ebp+var_4] eax +
mov eax [ebp+var_8] +
mov eax [eax+4] +
mov [ebp+var_C] eax +
xor eax eax +
push ebp  +
push offset loc_464BF1  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov eax [ebp+var_4] +
mov edx ds:off_461594 +
call @System@@IsClass$qqrp14System@TObjectp17System@TMetaClass  +
test al al +
jnz loc_464BCF  +
mov eax [ebp+var_8] +
mov dword ptr [eax+4] 1 +
mov edx [ebp+var_8] +
mov eax [ebp+var_4] +
call @Controls@TWinControl@CMBiDiModeChanged$qqrr17Messages@TMessage  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_464BF8  +
mov eax [ebp+var_8] +
mov edx [ebp+var_C] +
mov [eax+4] edx +
retn   +
jmp unknown_libname_539  +
jmp loc_464BE7  +
mov eax [ebp+var_4] +
call @Controls@TWinControl@HandleAllocated$qqrv  +
test al al +
jz loc_464C1A  +
mov eax [ebp+var_4] +
mov eax [eax+208h] +
call @Forms@TControlScrollBar@ChangeBiDiPosition$qqrv  +
mov eax [ebp+var_4] +
call @Forms@TScrollingWinControl@UpdateScrollBars$qqrv  +
mov esp ebp +
pop ebp  +
retn   +
***
test dl dl +
jz loc_464C2E  +
add esp 0FFFFFFF0h +
call unknown_libname_535  +
mov ebx edx +
mov esi eax +
xor edx edx +
mov eax esi +
call sub_464400  +
mov eax ds:dword_464C7C +
mov [esi+50h] eax +
mov edx 0B9h +
mov eax esi +
call @Controls@TControl@SetWidth$qqri  +
mov edx 29h +
mov eax esi +
call @Controls@TControl@SetHeight$qqri  +
mov byte ptr [esi+220h] 1 +
mov eax esi +
test bl bl +
jz loc_464C77  +
call sub_4BABC8  +
pop large dword ptr fs:0  +
add esp 0Ch +
mov eax esi +
pop esi  +
pop ebx  +
retn   +
***
mov esi edx +
mov ebx eax +
mov edx esi +
mov eax ebx +
call @Extctrls@TCustomControlBar@CreateParams$qqrr22Controls@TCreateParams  +
xor eax eax +
mov al [ebx+220h] +
mov eax dword_4E651C[eax*4] +
or [esi+4] eax +
mov eax off_4EA6D4 +
cmp byte ptr [eax] 0 +
jz loc_464CCB  +
cmp byte ptr [ebx+1A5h] 0 +
jz loc_464CCB  +
cmp byte ptr [ebx+220h] 1 +
jnz loc_464CCB  +
and dword ptr [esi+4] 0FF7FFFFFh +
or dword ptr [esi+8] 200h +
pop esi  +
pop ebx  +
retn   +
***
cmp dl [eax+220h] +
jz locret_464CE3  +
mov [eax+220h] dl +
call @Controls@TWinControl@RecreateWnd$qqrv  +
retn   +
***
push edi  +
mov edi edx +
mov esi eax +
mov edx edi +
mov eax esi +
mov ecx [eax] +
call dword ptr [ecx-10h]  +
pop edi  +
pop esi  +
retn   +
***
mov esi edx +
add esp 0FFFFFEF4h +
push ebx  +
push esi  +
xor ebx ebx +
mov [ebp+var_10C] ebx +
test dl dl +
jz loc_464D43  +
add esp 0FFFFFFF0h +
call unknown_libname_535  +
mov ebx edx +
mov esi eax +
xor eax eax +
push ebp  +
push offset loc_464E06  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
xor edx edx +
mov eax esi +
call sub_464400  +
mov eax ds:dword_464E2C +
mov [esi+50h] eax +
mov eax esi +
call @System@TObject@ClassType$qqrv  +
cmp eax ds:off_461FDC +
jz loc_464DD5  +
test byte ptr [esi+1Dh] 4 +
jnz loc_464DD5  +
mov edx ds:off_461FDC +
mov eax esi +
call sub_49C974  +
test al al +
jnz loc_464DED  +
lea edx [ebp+var_108] +
mov eax [esi] +
call @System@TObject@ClassName$qqrp17System@TMetaClass  +
lea eax [ebp+var_108] +
mov [ebp+var_8] eax +
mov [ebp+var_4] 4 +
lea eax [ebp+var_8] +
push eax  +
push 0  +
lea edx [ebp+var_10C] +
mov eax off_4EA8A0 +
call @System@LoadResString$qqrp20System@TResStringRec  +
mov ecx [ebp+var_10C] +
mov dl 1 +
mov eax ds:off_49A354 +
call sub_4AC1B8  +
call @System@@RaiseExcept$qqrv  +
jmp loc_464DED  +
mov edx 140h +
mov eax esi +
call @Controls@TControl@SetWidth$qqri  +
mov edx 0F0h +
mov eax esi +
call @Controls@TControl@SetHeight$qqri  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_464E0D  +
lea eax [ebp+var_10C] +
call unknown_libname_540  +
retn   +
jmp unknown_libname_539  +
jmp loc_464DFA  +
mov eax esi +
test bl bl +
jz loc_464E22  +
call sub_4BABC8  +
pop large dword ptr fs:0  +
add esp 0Ch +
mov eax esi +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
mov esi edx +
mov ebx eax +
mov edx esi +
mov eax ebx +
call @Extctrls@TCustomControlBar@CreateParams$qqrr22Controls@TCreateParams  +
cmp dword ptr [ebx+30h] 0 +
jnz loc_464E50  +
mov eax dword_4F17A4 +
mov eax [eax+30h] +
mov [esi+1Ch] eax +
pop esi  +
pop ebx  +
retn   +
***
add esp 0FFFFFFF8h +
push ebx  +
push esi  +
push edi  +
mov esi edx +
mov ebx eax +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
mov edx esi +
mov eax ebx +
call @Controls@TWinControl@GetChildren$qqrynpqqrp18Classes@TComponent$vp18Classes@TComponent  +
cmp ebx esi +
jnz loc_464EB6  +
mov eax ebx +
call @TComponent@GetComponentCount$qqrv  +
dec eax  +
test eax eax +
jl loc_464EB6  +
inc eax  +
mov [ebp+var_8] eax +
mov [ebp+var_4] 0 +
mov edx [ebp+var_4] +
mov eax ebx +
call @Classes@TComponent@GetComponent$qqri  +
mov edi eax +
mov eax edi +
mov si 0FFF1h +
call @System@@CallDynaInst$qqrv  +
test al al +
jnz loc_464EAE  +
mov edx edi +
mov eax [ebp+arg_4] +
call [ebp+arg_0]  +
inc [ebp+var_4]  +
dec [ebp+var_8]  +
jnz loc_464E8B  +
pop edi  +
pop esi  +
pop ebx  +
pop ecx  +
pop ecx  +
pop ebp  +
retn 8  +
***
mov esi edx +
call @Forms@GetParentForm$qqrp17Controls@TControl  +
mov ebx eax +
test ebx ebx +
jz loc_464EF7  +
cmp dword ptr [ebx+2E8h] 0 +
jnz loc_464EEA  +
mov dl 1 +
mov eax ds:off_49A5D8 +
call @System@TObject@$bctr$qqrv  +
mov [ebx+2E8h] eax +
mov edx esi +
mov eax [ebx+2E8h] +
call @Classes@TList@Add$qqrpv  +
pop esi  +
pop ebx  +
retn   +
***
call @Forms@GetParentForm$qqrp17Controls@TControl  +
push edi  +
mov ebx ecx +
mov esi edx +
mov edi eax +
mov ecx ebx +
mov edx esi +
mov eax edi +
call @Controls@TControl@Notification$qqrp18Classes@TComponent18Classes@TOperation  +
sub bl 1 +
jb loc_464F3D  +
jz loc_464F59  +
jmp loc_464F73  +
mov eax esi +
mov edx ds:off_448094 +
call @System@@IsClass$qqrp14System@TObjectp17System@TMetaClass  +
test al al +
jz loc_464F73  +
mov edx esi +
mov eax edi +
call @Forms@TCustomFrame@AddActionList$qqrp26Actnlist@TCustomActionList  +
jmp loc_464F73  +
mov eax esi +
mov edx ds:off_448094 +
call @System@@IsClass$qqrp14System@TObjectp17System@TMetaClass  +
test al al +
jz loc_464F73  +
mov edx esi +
mov eax edi +
call @Forms@TCustomFrame@RemoveActionList$qqrp26Actnlist@TCustomActionList  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push ecx  +
push ecx  +
push ebx  +
mov ebx edx +
mov [ebp+var_4] eax +
mov eax [ebp+var_4] +
cmp dword ptr [eax+30h] 0 +
jz loc_465004  +
push ebp  +
mov al 1 +
call @Forms@_16542  +
pop ecx  +
mov eax [ebp+var_4] +
cmp dword ptr [eax+30h] 0 +
jnz loc_465021  +
mov eax [ebp+var_4] +
call @Controls@TWinControl@HandleAllocated$qqrv  +
test al al +
jz loc_465021  +
mov eax [ebp+var_4] +
call @Controls@TWinControl@DestroyHandle$qqrv  +
mov edx ebx +
mov eax [ebp+var_4] +
call @Controls@TControl@SetParent$qqrp20Controls@TWinControl  +
mov eax [ebp+var_4] +
cmp dword ptr [eax+30h] 0 +
jz loc_46503D  +
push ebp  +
xor eax eax +
call @Forms@_16542  +
pop ecx  +
pop ebx  +
pop ecx  +
pop ebp  +
retn   +
***
add esp 0FFFFFEECh +
push ebx  +
xor ebx ebx +
mov [ebp+var_114] ebx +
test dl dl +
jz loc_465062  +
add esp 0FFFFFFF0h +
call unknown_libname_535  +
mov ebx ecx +
mov [ebp+var_5] dl +
mov [ebp+var_4] eax +
xor eax eax +
push ebp  +
push offset loc_4651A8  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov eax off_4EA82C +
mov eax [eax] +
call sub_4AD944  +
xor eax eax +
push ebp  +
push offset loc_465188  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
push 0  +
mov ecx ebx +
xor edx edx +
mov eax [ebp+var_4] +
mov ebx [eax] +
call dword ptr [ebx+0DCh]  +
mov eax [ebp+var_4] +
call @System@TObject@ClassType$qqrv  +
cmp eax ds:off_462E1C +
jz loc_46516E  +
mov eax [ebp+var_4] +
test byte ptr [eax+1Ch] 10h +
jnz loc_46516E  +
mov eax [ebp+var_4] +
or byte ptr [eax+2ECh] 1 +
xor eax eax +
push ebp  +
push offset loc_465150  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov edx ds:off_462E1C +
mov eax [ebp+var_4] +
call sub_49C974  +
test al al +
jnz loc_465138  +
lea edx [ebp+var_110] +
mov eax [ebp+var_4] +
mov eax [eax] +
call @System@TObject@ClassName$qqrp17System@TMetaClass  +
lea eax [ebp+var_110] +
mov [ebp+var_10] eax +
mov [ebp+var_C] 4 +
lea eax [ebp+var_10] +
push eax  +
push 0  +
lea edx [ebp+var_114] +
mov eax off_4EA8A0 +
call @System@LoadResString$qqrp20System@TResStringRec  +
mov ecx [ebp+var_114] +
mov dl 1 +
mov eax ds:off_49A354 +
call sub_4AC1B8  +
call @System@@RaiseExcept$qqrv  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_465157  +
mov eax [ebp+var_4] +
and byte ptr [eax+2ECh] 0FEh +
retn   +
jmp unknown_libname_539  +
jmp loc_465145  +
mov eax [ebp-4] +
cmp byte ptr [eax+234h] 0 +
jz loc_46516E  +
mov eax [ebp-4] +
mov edx [eax] +
call dword ptr [edx+0D0h]  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_46518F  +
mov eax off_4EA82C +
mov eax [eax] +
call sub_4AD9E0  +
retn   +
jmp unknown_libname_539  +
jmp loc_46517B  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4651AF  +
lea eax [ebp+var_114] +
call unknown_libname_540  +
retn   +
jmp unknown_libname_539  +
jmp loc_46519C  +
mov eax [ebp+var_4] +
cmp [ebp+var_5] 0 +
jz loc_4651C7  +
call sub_4BABC8  +
pop large dword ptr fs:0  +
add esp 0Ch +
mov eax [ebp+var_4] +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
mov ebx eax +
cmp byte ptr [ebx+234h] 0 +
jnz loc_4651E7  +
mov eax ebx +
mov edx [eax] +
call dword ptr [edx+0D0h]  +
test byte ptr [ebx+2ECh] 20h +
jz loc_465202  +
mov eax ebx +
mov si 0FFB3h +
call @System@@CallDynaInst$qqrv  +
and byte ptr [ebx+2ECh] 0DFh +
pop esi  +
pop ebx  +
retn   +
***
push ecx  +
push ebx  +
push esi  +
test dl dl +
jz loc_46521A  +
add esp 0FFFFFFF0h +
call unknown_libname_535  +
mov [ebp+var_1] dl +
mov ebx eax +
xor edx edx +
mov eax ebx +
call sub_464400  +
mov eax ds:dword_465370 +
mov [ebx+50h] eax +
xor edx edx +
mov eax ebx +
call @Controls@TControl@SetLeft$qqri  +
xor edx edx +
mov eax ebx +
call @Controls@TControl@SetTop$qqri  +
mov edx 140h +
mov eax ebx +
call @Controls@TControl@SetWidth$qqri  +
mov edx 0F0h +
mov eax ebx +
call @Controls@TControl@SetHeight$qqri  +
mov dl 1 +
mov eax ds:off_4598E0 +
call @Graphics@TIcon@$bctr$qqrv  +
mov esi eax +
mov [ebx+240h] esi +
push 31h  +
mov eax off_4EA7F4 +
mov eax [eax] +
call eax  +
mov edx eax +
mov eax esi +
mov ecx [eax] +
call dword ptr [ecx+40h]  +
push 32h  +
mov eax off_4EA7F4 +
mov eax [eax] +
call eax  +
mov edx eax +
mov eax [ebx+240h] +
mov ecx [eax] +
call dword ptr [ecx+34h]  +
mov eax [ebx+240h] +
mov [eax+14h] ebx +
mov dword ptr [eax+10h] offset @Forms@TCustomForm@IconChanged$qqrp14System@TObject +
mov dl 1 +
mov eax ds:off_4713DC +
call @Graphics@TCanvas@$bctr$qqrv  +
mov esi eax +
mov [ebx+238h] esi +
mov eax esi +
mov edx ebx +
call @Controls@TControlCanvas@SetControl$qqrp17Controls@TControl  +
mov al ds:byte_465374 +
mov [ebx+228h] al +
mov byte ptr [ebx+229h] 2 +
mov byte ptr [ebx+22Bh] 0 +
mov byte ptr [ebx+231h] 3 +
mov byte ptr [ebx+244h] 0 +
mov eax dword_4F17A8 +
mov eax [eax+40h] +
mov [ebx+25Ch] eax +
mov byte ptr [ebx+235h] 1 +
mov eax ebx +
call @System@TObject@ClassType$qqrv  +
mov [ebx+0B8h] eax +
mov byte ptr [ebx+2E1h] 0FFh +
xor eax eax +
mov [ebx+2E4h] eax +
xor edx edx +
mov eax ebx +
call @Forms@TCustomForm@SetVisible$qqro  +
xor edx edx +
mov eax ebx +
call @Controls@TControl@SetParentColor$qqro  +
xor edx edx +
mov eax ebx +
call @Controls@TControl@SetParentFont$qqro  +
mov dl 1 +
mov eax ebx +
call @Controls@TWinControl@SetCtl3D$qqro  +
mov edx ebx +
mov eax dword_4F17A8 +
call @Forms@TScreen@AddForm$qqrp17Forms@TCustomForm  +
mov eax ebx +
cmp [ebp+var_1] 0 +
jz loc_465366  +
call sub_4BABC8  +
pop large dword ptr fs:0  +
add esp 0Ch +
mov eax ebx +
pop esi  +
pop ebx  +
pop ecx  +
pop ebp  +
retn 4  +
***
mov eax off_4EA82C +
mov eax [eax] +
call sub_4AD944  +
mov eax ebx +
call sub_4A4DC0  +
mov eax dword_4F17A8 +
mov eax [eax+7Ch] +
mov edx ebx +
call @Classes@TList@Remove$qqrpv  +
xor edx edx +
mov eax ebx +
call sub_4A0114  +
cmp dword ptr [ebx+264h] 0 +
jz loc_4653BA  +
mov eax [ebx+264h] +
mov edx [eax] +
call dword ptr [edx+0Ch]  +
cmp byte ptr [ebx+22Fh] 1 +
jz loc_4653CA  +
mov eax ebx +
call sub_46927C  +
cmp byte ptr [ebx+234h] 0 +
jnz loc_4653DD  +
mov eax ebx +
mov edx [eax] +
call dword ptr [edx+0D4h]  +
pop ebx  +
retn   +
***
add esp 0FFFFFFF8h +
call unknown_libname_536  +
mov [ebp+var_5] dl +
mov [ebp+var_4] eax +
mov eax [ebp+var_4] +
test byte ptr [eax+1Ch] 8 +
jnz loc_465406  +
mov eax off_4EA82C +
mov eax [eax] +
call sub_4AD944  +
xor eax eax +
push ebp  +
push offset loc_4654AA  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov eax [ebp+var_4] +
cmp byte ptr [eax+234h] 0 +
jz loc_46542B  +
mov eax [ebp+var_4] +
mov edx [eax] +
call dword ptr [edx+0D4h]  +
xor edx edx +
mov eax [ebp+var_4] +
call @Forms@TCustomForm@MergeMenu$qqro  +
mov eax [ebp+var_4] +
call @Controls@TWinControl@HandleAllocated$qqrv  +
test al al +
jz loc_46544C  +
mov eax [ebp+var_4] +
mov edx [eax] +
call dword ptr [edx+0ACh]  +
mov edx [ebp+var_4] +
mov eax dword_4F17A8 +
call @Forms@TScreen@RemoveForm$qqrp17Forms@TCustomForm  +
mov eax [ebp+var_4] +
mov eax [eax+238h] +
call @System@TObject@Free$qqrv  +
mov eax [ebp+var_4] +
mov eax [eax+240h] +
call @System@TObject@Free$qqrv  +
mov eax [ebp+var_4] +
add eax 2E8h +
call @Sysutils@FreeAndNil$qqrpv  +
mov dl [ebp+var_5] +
and dl 0FCh +
mov eax [ebp+var_4] +
call @Forms@TScrollingWinControl@$bdtr$qqrv  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4654B1  +
mov eax off_4EA82C +
mov eax [eax] +
call sub_4AD9E0  +
retn   +
jmp unknown_libname_539  +
jmp loc_46549D  +
cmp [ebp+var_5] 0 +
jle loc_4654BF  +
mov eax [ebp+var_4] +
call @System@@ClassDestroy$qqrp14System@TObject  +
pop ecx  +
pop ecx  +
pop ebp  +
retn   +
***
push ecx  +
push ecx  +
push ebx  +
push esi  +
push edi  +
mov [ebp+var_4] eax +
mov eax [ebp+var_4] +
cmp word ptr [eax+2DAh] 0 +
jz loc_465598  +
xor eax eax +
push ebp  +
push offset loc_465581  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov ebx [ebp+var_4] +
mov edx [ebp+var_4] +
mov eax [ebx+2DCh] +
call dword ptr [ebx+2D8h]  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
jmp loc_465598  +
jmp @System@@HandleAnyException$qqrv  +
mov edx [ebp-4] +
mov eax dword_4F17A4 +
call @TApplication@HandleException$qqrp7TObject  +
call @@DoneExcept$qqrv  +
pop edi  +
pop esi  +
pop ebx  +
pop ecx  +
pop ebp  +
retn   +
***
push edi  +
push edi  +
push ebp  +
mov ebx ecx +
mov esi edx +
mov edi eax +
mov ecx ebx +
mov edx esi +
mov eax edi +
call @Controls@TControl@Notification$qqrp18Classes@TComponent18Classes@TOperation  +
mov eax ebx +
sub al 1 +
jb loc_4655FE  +
jz loc_465670  +
jmp loc_4656C9  +
mov eax esi +
mov edx ds:off_448094 +
call @System@@IsClass$qqrp14System@TObjectp17System@TMetaClass  +
test al al +
jz loc_46563C  +
cmp dword ptr [edi+2E8h] 0 +
jnz loc_46562A  +
mov dl 1 +
mov eax ds:off_49A5D8 +
call @System@TObject@$bctr$qqrv  +
mov [edi+2E8h] eax +
mov edx esi +
mov eax [edi+2E8h] +
call @Classes@TList@Add$qqrpv  +
jmp loc_4656C9  +
test byte ptr [edi+1Ch] 1 +
jnz loc_4656C9  +
cmp dword ptr [edi+248h] 0 +
jnz loc_4656C9  +
cmp edi [esi+4] +
jnz loc_4656C9  +
mov eax esi +
mov edx ds:off_45151C +
call @System@@IsClass$qqrp14System@TObjectp17System@TMetaClass  +
test al al +
jz loc_4656C9  +
mov edx esi +
mov eax edi +
call @Forms@TCustomForm@SetMenu$qqrp15Menus@TMainMenu  +
jmp loc_4656C9  +
mov ebp [edi+2E8h] +
test ebp ebp +
jz loc_465696  +
mov eax esi +
mov edx ds:off_448094 +
call @System@@IsClass$qqrp14System@TObjectp17System@TMetaClass  +
test al al +
jz loc_465696  +
mov edx esi +
mov eax ebp +
call @Classes@TList@Remove$qqrpv  +
jmp loc_4656C9  +
cmp esi [edi+248h] +
jnz loc_4656A7  +
xor edx edx +
mov eax edi +
call @Forms@TCustomForm@SetMenu$qqrp15Menus@TMainMenu  +
cmp esi [edi+258h] +
jnz loc_4656B8  +
xor edx edx +
mov eax edi +
call @Forms@TCustomForm@SetWindowMenu$qqrp15Menus@TMenuItem  +
cmp esi [edi+260h] +
jnz loc_4656C9  +
xor edx edx +
mov eax edi +
call @Forms@TCustomForm@SetObjectMenuItem$qqrp15Menus@TMenuItem  +
cmp dword ptr [edi+250h] 0 +
jz loc_4656E1  +
mov ecx ebx +
mov edx esi +
mov eax [edi+250h] +
mov ebx [eax] +
call dword ptr [ebx+10h]  +
pop ebp  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push ecx  +
push ebx  +
push esi  +
mov esi edx +
mov [ebp+var_4] eax +
mov eax [ebp+var_4] +
call @Controls@TWinControl@DisableAlign$qqrv  +
xor edx edx +
push ebp  +
push offset loc_46593E  +
push dword ptr fs:[edx]  +
mov fs:[edx] esp +
mov eax [ebp+var_4] +
xor edx edx +
mov [eax+268h] edx +
mov eax [ebp+var_4] +
xor edx edx +
mov [eax+26Ch] edx +
mov eax [ebp+var_4] +
xor edx edx +
mov [eax+270h] edx +
xor ebx ebx +
mov al byte_4EAAE6 +
xor al 1 +
mov edx [ebp+var_4] +
mov [edx+234h] al +
mov edx esi +
mov eax [ebp+var_4] +
call @Customizeactnedit@TCustomizeActnEditDesigner@ActionBarListClickCheck$qqrp14System@TObject  +
mov eax [ebp+var_4] +
cmp dword ptr [eax+25Ch] 0 +
jz loc_4658B2  +
mov eax [ebp+var_4] +
cmp dword ptr [eax+270h] 0 +
jle loc_4658B2  +
mov eax [ebp+var_4] +
test byte ptr [eax+98h] 10h +
jz loc_4657B5  +
mov eax [ebp+var_4] +
mov eax [eax+25Ch] +
mov edx dword_4F17A8 +
cmp eax [edx+40h] +
jz loc_4657B5  +
mov eax [ebp+var_4] +
mov eax [eax+25Ch] +
push eax  +
mov eax dword_4F17A8 +
mov eax [eax+40h] +
push eax  +
mov eax [ebp+var_4] +
mov esi [eax+68h] +
mov eax esi +
call sub_45A928  +
push eax  +
call MulDiv  +
mov edx eax +
mov eax esi +
call @Graphics@TFont@SetHeight$qqri  +
mov eax dword_4F17A8 +
mov eax [eax+40h] +
mov edx [ebp+var_4] +
mov [edx+25Ch] eax +
mov eax [ebp+var_4] +
call unknown_libname_193  +
mov esi eax +
mov eax [ebp+var_4] +
mov eax [eax+270h] +
cmp esi eax +
jz loc_4658B2  +
mov bl 1 +
mov ecx eax +
mov edx esi +
mov eax [ebp+var_4] +
call @Forms@TScrollingWinControl@ScaleScrollBars$qqrii  +
mov eax [ebp+var_4] +
mov ecx [eax+270h] +
mov edx esi +
mov eax [ebp+var_4] +
call @Controls@TWinControl@ScaleControls$qqrii  +
mov eax [ebp+var_4] +
test byte ptr [eax+98h] 4 +
jz loc_465831  +
mov eax [ebp+var_4] +
mov eax [eax+270h] +
push eax  +
push esi  +
mov eax [ebp+var_4] +
mov eax [eax+268h] +
push eax  +
call MulDiv  +
mov edx [ebp+var_4] +
mov [edx+268h] eax +
mov eax [ebp+var_4] +
test byte ptr [eax+98h] 8 +
jz loc_465860  +
mov eax [ebp+var_4] +
mov eax [eax+270h] +
push eax  +
push esi  +
mov eax [ebp+var_4] +
mov eax [eax+26Ch] +
push eax  +
call MulDiv  +
mov edx [ebp+var_4] +
mov [edx+26Ch] eax +
mov eax [ebp+var_4] +
test byte ptr [eax+98h] 20h +
jz loc_4658B2  +
mov eax [ebp+var_4] +
mov eax [eax+270h] +
push eax  +
push esi  +
mov eax [ebp+var_4] +
mov eax [eax+1FAh] +
push eax  +
call MulDiv  +
mov edx [ebp+var_4] +
mov [edx+1FAh] eax +
mov eax [ebp+var_4] +
mov eax [eax+270h] +
push eax  +
push esi  +
mov eax [ebp+var_4] +
mov eax [eax+1FEh] +
push eax  +
call MulDiv  +
mov edx [ebp+var_4] +
mov [edx+1FEh] eax +
mov eax [ebp+var_4] +
mov eax [eax+268h] +
test eax eax +
jle loc_4658C9  +
mov edx eax +
mov eax [ebp+var_4] +
call sub_475EF8  +
mov eax [ebp+var_4] +
mov eax [eax+26Ch] +
test eax eax +
jle loc_4658E0  +
mov edx eax +
mov eax [ebp+var_4] +
call sub_475F3C  +
mov eax [ebp+var_4] +
mov dl ds:byte_46594C +
mov [eax+98h] dl +
test bl bl +
jnz loc_465917  +
mov ecx 1 +
mov edx 1 +
mov eax [ebp+var_4] +
call @Forms@TScrollingWinControl@ScaleScrollBars$qqrii  +
mov ecx 1 +
mov edx 1 +
mov eax [ebp+var_4] +
call @Controls@TWinControl@ScaleControls$qqrii  +
push 0  +
xor ecx ecx +
mov edx 0B03Dh +
mov eax [ebp+var_4] +
call @Controls@TControl@Perform$qqruiii  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_465945  +
mov eax [ebp+var_4] +
call @Controls@TWinControl@EnableAlign$qqrv  +
retn   +
jmp unknown_libname_539  +
jmp loc_465935  +
pop esi  +
pop ebx  +
pop ecx  +
pop ebp  +
retn   +
***
push edi  +
mov esi edx +
mov ebx eax +
mov edx esi +
mov eax ebx +
call @Controls@TWinControl@DefineProperties$qqrp14Classes@TFiler  +
push 0  +
push 0  +
push ebx  +
push offset sub_465A54  +
mov cl [ebx+5Eh] +
xor cl 1 +
mov edx offset _str_PixelsPerInch.Text +
mov eax esi +
mov edi [eax] +
call dword ptr [edi+4]  +
push ebx  +
push offset @Forms@TCustomForm@ReadTextHeight$qqrp15Classes@TReader  +
push ebx  +
push offset sub_465A38  +
mov cl [ebx+5Eh] +
xor cl 1 +
mov edx offset _str_TextHeight.Text +
mov eax esi +
mov edi [eax] +
call dword ptr [edi+4]  +
push ebx  +
push offset @Forms@TCustomForm@ReadIgnoreFontProperty$qqrp15Classes@TReader  +
push 0  +
push 0  +
xor ecx ecx +
mov edx offset _str_IgnoreFontPrope.Text +
mov eax esi +
mov ebx [eax] +
call dword ptr [ebx+4]  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov esi edx +
mov ebx eax +
mov eax esi +
call @Classes@TReader@ReadBoolean$qqrv  +
test al al +
jz loc_465A1A  +
mov dl 1 +
mov eax ebx +
call @Controls@TControl@SetParentFont$qqro  +
pop esi  +
pop ebx  +
retn   +
***
mov esi edx +
mov ebx eax +
mov eax esi +
call @Classes@TReader@ReadInteger$qqrv  +
mov [ebx+270h] eax +
pop esi  +
pop ebx  +
retn   +
***
mov esi edx +
mov ebx eax +
mov eax ebx +
call unknown_libname_193  +
mov edx eax +
mov eax esi +
call @TWriter@WriteInteger$qqri  +
pop esi  +
pop ebx  +
retn   +
***
mov esi edx +
mov ebx eax +
mov eax ebx +
call @Forms@TCustomForm@GetPixelsPerInch$qqrv  +
mov edx eax +
mov eax esi +
call @TWriter@WriteInteger$qqri  +
pop esi  +
pop ebx  +
retn   +
***
mov eax ebx +
call sub_4669EC  +
mov edx offset _str_0.Text +
call @Graphics@TCanvas@TextHeight$qqrx17System@AnsiString  +
pop ebx  +
retn   +
***
push edi  +
push ebp  +
mov edi ecx +
mov esi edx +
mov ebx eax +
mov ecx edi +
mov edx esi +
mov eax ebx +
call @Forms@TScrollingWinControl@ScaleScrollBars$qqrii  +
mov ecx edi +
mov edx esi +
mov eax ebx +
call @Controls@TWinControl@ScaleControls$qqrii  +
mov eax ebx +
call @TCustomForm@IsClientSizeStored$qqrv  +
test al al +
jz loc_465AF5  +
mov eax ebx +
call @Controls@TControl@GetClientHeight$qqrv  +
mov ebp eax +
push edi  +
push esi  +
mov eax ebx +
call @Controls@TControl@GetClientWidth$qqrv  +
push eax  +
call MulDiv  +
mov edx eax +
mov eax ebx +
call @Forms@TCustomForm@SetClientWidth$qqri  +
push edi  +
push esi  +
push ebp  +
call MulDiv  +
mov edx eax +
mov eax ebx +
call @Forms@TCustomForm@SetClientHeight$qqri  +
push edi  +
push esi  +
mov ebp [ebx+68h] +
mov eax ebp +
call @Graphics@TFont@GetSize$qqrv  +
push eax  +
call MulDiv  +
mov edx eax +
mov eax ebp +
call @Graphics@TFont@SetSize$qqri  +
pop ebp  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov eax off_4EA6D4 +
cmp byte ptr [eax] 0 +
jz loc_465B57  +
mov eax ebx +
call @Controls@TWinControl@HandleAllocated$qqrv  +
test al al +
jz loc_465B6F  +
cmp byte ptr [ebx+229h] 3 +
jz loc_465B6F  +
mov eax ebx +
call @Forms@TCustomForm@GetIconHandle$qqrv  +
push eax  +
push 1  +
push 80h  +
mov eax ebx +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call SendMessageA  +
pop ebx  +
retn   +
mov eax ebx +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call IsIconic  +
test eax eax +
jz loc_465B6F  +
mov eax ebx +
mov edx [eax] +
call dword ptr [edx+7Ch]  +
pop ebx  +
retn   +
***
mov eax ebx +
call @Forms@TCustomForm@IsFormSizeStored$qqrv  +
xor al 1 +
pop ebx  +
retn   +
***
cmp byte ptr [eax+210h] 0 +
jnz loc_465BA8  +
mov edx [eax+208h] +
cmp dword ptr [edx+10h] 0 +
jnz loc_465BA8  +
mov eax [eax+20Ch] +
cmp dword ptr [eax+10h] 0 +
jnz loc_465BA8  +
xor eax eax +
retn   +
mov al 1 +
retn   +
***
mov eax ebx +
call @Forms@TCustomForm@IsForm$qqrv  +
test al al +
jz loc_465BD6  +
mov al [ebx+229h] +
sub al 2 +
jz loc_465BCC  +
sub al 3 +
jz loc_465BCC  +
xor eax eax +
jmp loc_465BCE  +
mov al 1 +
cmp al [ebx+210h] +
jnz loc_465BDA  +
xor eax eax +
pop ebx  +
retn   +
mov al 1 +
pop ebx  +
retn   +
***
jz loc_465BFD  +
mov ecx edx +
mov ebx eax +
mov edx eax +
mov eax [ebx+294h] +
call dword ptr [ebx+290h]  +
pop ebx  +
retn   +
***
jz loc_465C1B  +
mov ebx eax +
mov edx eax +
mov eax [ebx+2B4h] +
call dword ptr [ebx+2B0h]  +
pop ebx  +
retn   +
***
jz loc_465C3B  +
mov ebx eax +
mov edx eax +
mov eax [ebx+2CCh] +
call dword ptr [ebx+2C8h]  +
pop ebx  +
retn   +
***
mov esi edx +
mov ebx eax +
mov eax ebx +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call IsIconic  +
test eax eax +
jz loc_465CBA  +
push 0  +
push 0  +
push 0  +
push 0  +
push esi  +
call SetRect  +
push 0FFFFFFECh  +
mov eax ebx +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call GetWindowLongA  +
push eax  +
cmp dword ptr [ebx+248h] 0 +
setnz al  +
neg al  +
sbb eax eax +
push eax  +
push 0FFFFFFF0h  +
mov eax ebx +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call GetWindowLongA  +
push eax  +
push esi  +
call AdjustWindowRectEx  +
mov eax [ebx+4Ch] +
sub eax [esi+0Ch] +
add eax [esi+4] +
push eax  +
mov eax [ebx+48h] +
sub eax [esi+8] +
add eax [esi] +
push eax  +
push 0  +
push 0  +
push esi  +
call SetRect  +
pop esi  +
pop ebx  +
retn   +
mov edx esi +
mov eax ebx +
call @Controls@TWinControl@GetClientRect$qqrv  +
pop esi  +
pop ebx  +
retn   +
***
add esp 0FFFFFFF8h +
push ebx  +
push esi  +
push edi  +
mov esi edx +
mov ebx eax +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
mov edx esi +
mov eax ebx +
call @Controls@TWinControl@GetChildren$qqrynpqqrp18Classes@TComponent$vp18Classes@TComponent  +
cmp ebx esi +
jnz loc_465D2A  +
mov eax ebx +
call @TComponent@GetComponentCount$qqrv  +
dec eax  +
test eax eax +
jl loc_465D2A  +
inc eax  +
mov [ebp+var_8] eax +
mov [ebp+var_4] 0 +
mov edx [ebp+var_4] +
mov eax ebx +
call @Classes@TComponent@GetComponent$qqri  +
mov edi eax +
mov eax edi +
mov si 0FFF1h +
call @System@@CallDynaInst$qqrv  +
test al al +
jnz loc_465D22  +
mov edx edi +
mov eax [ebp+arg_4] +
call [ebp+arg_0]  +
inc [ebp+var_4]  +
dec [ebp+var_8]  +
jnz loc_465CFF  +
pop edi  +
pop esi  +
pop ebx  +
pop ecx  +
pop ecx  +
pop ebp  +
retn 8  +
***
mov ebx eax +
cmp dword ptr [ebx+0A0h] 0 +
jnz loc_465D55  +
mov eax ebx +
mov edx [eax] +
call dword ptr [edx+58h]  +
mov esi eax +
mov eax ebx +
call @System@TObject@ClassType$qqrv  +
cmp esi eax +
jz loc_465D5A  +
xor eax eax +
pop esi  +
pop ebx  +
retn   +
mov al 1 +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
push ebp  +
add esp 0FFFFFFF4h +
mov [esp+0Ch+var_8] ecx +
mov [esp+0Ch+var_C] edx +
mov ebp eax +
mov eax [esp+0Ch+var_C] +
mov edx ds:off_471D9C +
call @System@@IsClass$qqrp14System@TObjectp17System@TMetaClass  +
test al al +
jz loc_465D92  +
mov ecx [esp+0Ch+var_8] +
mov edx [esp+0Ch+var_C] +
mov eax ebp +
call sub_47D240  +
jmp loc_465DEA  +
mov eax ebp +
call @Controls@TWinControl@GetControlCount$qqrv  +
sub [esp+0Ch+var_8] eax +
mov [esp+0Ch+var_4] 0FFFFFFFFh +
mov eax ebp +
call @TComponent@GetComponentCount$qqrv  +
mov ebx eax +
dec ebx  +
test ebx ebx +
jl loc_465DEA  +
inc ebx  +
xor edi edi +
mov edx edi +
mov eax ebp +
call @Classes@TComponent@GetComponent$qqri  +
mov si 0FFF1h +
call @System@@CallDynaInst$qqrv  +
test al al +
jnz loc_465DE6  +
inc [esp+0Ch+var_4]  +
mov eax [esp+0Ch+var_4] +
cmp eax [esp+0Ch+var_8] +
jnz loc_465DE6  +
mov edx edi +
mov eax [esp+0Ch+var_C] +
call @Classes@TComponent@SetComponentIndex$qqri  +
jmp loc_465DEA  +
inc edi  +
dec ebx  +
jnz loc_465DB6  +
add esp 0Ch +
pop ebp  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
cmp dl [ebx+60h] +
jz loc_465E19  +
mov eax ebx +
call @Controls@TControl@SetParentBiDiMode$qqro  +
cmp dword ptr [ebx+30h] 0 +
jnz loc_465E19  +
push 0  +
xor ecx ecx +
mov edx 0B03Dh +
mov eax ebx +
call @Controls@TControl@Perform$qqruiii  +
pop ebx  +
retn   +
***
test byte ptr [ebx+54h] 8 +
jz loc_465E3E  +
mov [ebx+268h] edx +
mov al ds:byte_465E48 +
or al [ebx+98h] +
mov [ebx+98h] al +
pop ebx  +
retn   +
mov eax ebx +
call sub_475EF8  +
pop ebx  +
retn   +
***
test byte ptr [ebx+54h] 8 +
jz loc_465E6E  +
mov [ebx+26Ch] edx +
mov al ds:byte_465E78 +
or al [ebx+98h] +
mov [ebx+98h] al +
pop ebx  +
retn   +
mov eax ebx +
call sub_475F3C  +
pop ebx  +
retn   +
***
mov ebx edx +
mov esi eax +
test byte ptr [esi+2ECh] 1 +
jz loc_465EA2  +
test bl bl +
jz loc_465E98  +
or byte ptr [esi+2ECh] 2 +
jmp loc_465EBB  +
and byte ptr [esi+2ECh] 0FDh +
pop esi  +
pop ebx  +
retn   +
test bl bl +
jz loc_465EB2  +
cmp bl [esi+57h] +
jz loc_465EB2  +
mov eax esi +
call @Forms@TCustomForm@SetWindowToMonitor$qqrv  +
mov edx ebx +
mov eax esi +
call @Controls@TControl@SetVisible$qqro  +
pop esi  +
pop ebx  +
retn   +
***
push 0  +
xor edx edx +
push ebp  +
push offset loc_465F19  +
push dword ptr fs:[edx]  +
mov fs:[edx] esp +
cmp byte ptr [eax+22Fh] 1 +
jnz loc_465F03  +
cmp byte ptr [eax+57h] 0 +
jz loc_465F03  +
lea edx [ebp+var_4] +
mov eax off_4EA708 +
call @System@LoadResString$qqrp20System@TResStringRec  +
mov ecx [ebp+var_4] +
mov dl 1 +
mov eax ds:off_49A578 +
call sub_4AC17C  +
call @System@@RaiseExcept$qqrv  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_465F20  +
lea eax [ebp+var_4] +
call unknown_libname_540  +
retn   +
jmp unknown_libname_539  +
jmp loc_465F10  +
pop ecx  +
pop ebp  +
retn   +
***
retn   +
***
mov esi edx +
mov ebx eax +
mov eax [ebx+30h] +
cmp esi eax +
jz loc_465F5A  +
cmp ebx esi +
jz loc_465F5A  +
test eax eax +
jnz loc_465F44  +
mov eax ebx +
call @Controls@TWinControl@DestroyHandle$qqrv  +
mov edx esi +
mov eax ebx +
call @Controls@TControl@SetParent$qqrp20Controls@TWinControl  +
cmp dword ptr [ebx+30h] 0 +
jnz loc_465F5A  +
mov eax ebx +
call @Controls@TWinControl@UpdateControlState$qqrv  +
pop esi  +
pop ebx  +
retn   +
***
push ebx  +
push esi  +
push edi  +
mov edi ecx +
mov esi edx +
mov ebx eax +
mov eax [ebp+arg_0] +
push eax  +
mov ecx edi +
mov edx esi +
mov eax ebx +
call @Classes@TComponent@ValidateRename$qqrp18Classes@TComponentx17System@AnsiStringt2  +
cmp dword ptr [ebx+250h] 0 +
jz loc_465F97  +
mov eax [ebp+arg_0] +
push eax  +
mov ecx edi +
mov edx esi +
mov eax [ebx+250h] +
mov ebx [eax] +
call dword ptr [ebx+2Ch]  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
add esp 0FFFFFFECh +
push ebx  +
push esi  +
push edi  +
mov ebx edx +
mov [ebp+var_4] eax +
mov eax [ebx] +
mov edx eax +
cmp edx 46h +
jg loc_465FDA  +
jz loc_4660AA  +
add edx 0FFFFFFFAh +
sub edx 3 +
jb loc_465FEE  +
sub edx 22h +
jz loc_46611F  +
dec edx  +
jz loc_466220  +
jmp loc_46634E  +
sub edx 0B01Ah +
jz loc_466089  +
dec edx  +
jz loc_466068  +
jmp loc_46634E  +
cmp byte_4E64C0 0 +
jz loc_4663C6  +
cmp dword ptr [ebx] 7 +
jnz loc_4663BC  +
mov eax [ebp+var_4] +
test byte ptr [eax+1Ch] 10h +
jnz loc_4663BC  +
xor esi esi +
mov eax [ebp+var_4] +
cmp byte ptr [eax+22Fh] 2 +
jnz loc_46603C  +
mov eax [ebp+var_4] +
call @Forms@TCustomForm@GetActiveMDIChild$qqrv  +
test eax eax +
jz loc_466055  +
mov eax [ebp+var_4] +
call @Forms@TCustomForm@GetActiveMDIChild$qqrv  +
call @Controls@TWinControl@GetHandle$qqrv  +
mov esi eax +
jmp loc_466055  +
mov eax [ebp+var_4] +
mov eax [eax+220h] +
test eax eax +
jz loc_466055  +
cmp eax [ebp+var_4] +
jz loc_466055  +
call @Controls@TWinControl@GetHandle$qqrv  +
mov esi eax +
test esi esi +
jz loc_4663BC  +
push esi  +
call SetFocus  +
jmp loc_4663C6  +
mov eax [ebp+var_4] +
cmp dword ptr [eax+0A0h] 0 +
jz loc_4663BC  +
mov eax [ebp+var_4] +
mov si 0FFB1h +
call @System@@CallDynaInst$qqrv  +
jmp loc_4663BC  +
mov eax [ebp+var_4] +
cmp dword ptr [eax+0A0h] 0 +
jz loc_4663BC  +
mov eax [ebp+var_4] +
mov si 0FFB3h +
call @System@@CallDynaInst$qqrv  +
jmp loc_4663BC  +
mov eax [ebp+var_4] +
mov ax [eax+1Ch] +
and ax ds:word_4663D0 +
mov dx ds:word_4663D4 +
cmp dx ax +
jnz loc_4663BC  +
mov eax [ebp+var_4] +
mov al [eax+230h] +
dec eax  +
sub al 2 +
jnb loc_4660E9  +
mov eax [ebp+var_4] +
cmp byte ptr [eax+22Bh] 2 +
jz loc_4660E9  +
mov eax [ebx+8] +
or dword ptr [eax+18h] 2 +
mov eax [ebp+var_4] +
mov al [eax+230h] +
sub al 1 +
jz loc_4660FE  +
sub al 2 +
jnz loc_4663BC  +
mov eax [ebp+var_4] +
mov al [eax+229h] +
sub al 2 +
jz loc_466113  +
sub al 3 +
jnz loc_4663BC  +
mov eax [ebx+8] +
or dword ptr [eax+18h] 1 +
jmp loc_4663BC  +
mov eax [ebx+8] +
mov [ebp+var_14] eax +
mov eax [ebp+var_14] +
cmp dword ptr [eax] 1 +
jnz loc_4663BC  +
mov eax [ebp+var_4] +
cmp dword ptr [eax+248h] 0 +
jz loc_4663BC  +
mov eax [ebp+var_14] +
mov edx [eax+8] +
mov eax [ebp+var_4] +
mov eax [eax+248h] +
xor ecx ecx +
call @Menus@TMenu@FindItem$qqri19Menus@TFindItemKind  +
mov edi eax +
test edi edi +
jz loc_4663BC  +
mov dl 1 +
mov eax ds:off_4713DC +
call @Graphics@TCanvas@$bctr$qqrv  +
mov [ebp+var_C] eax +
xor eax eax +
push ebp  +
push offset loc_466219  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov eax [ebp+var_14] +
mov eax [eax+18h] +
push eax  +
call SaveDC  +
mov [ebp+var_8] eax +
xor eax eax +
push ebp  +
push offset loc_4661FC  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov eax [ebp+var_14] +
mov edx [eax+18h] +
mov eax [ebp+var_C] +
call @Graphics@TCanvas@SetHandle$qqrui  +
mov eax dword_4F17A8 +
mov edx [eax+88h] +
mov eax [ebp+var_C] +
call unknown_libname_155  +
mov eax [ebp+var_14] +
mov ax [eax+10h] +
push eax  +
mov eax [ebp+var_14] +
lea ecx [eax+1Ch] +
mov edx [ebp+var_C] +
mov eax edi +
call @Menus@DrawMenuItem$qqrp15Menus@TMenuItemp16Graphics@TCanvasrx11Types@TRect47System@_Set$t18Windows@Windows__1$iuc$0$iuc$12_  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_466203  +
xor edx edx +
mov eax [ebp+var_C] +
call @Graphics@TCanvas@SetHandle$qqrui  +
mov eax [ebp+var_8] +
push eax  +
mov eax [ebp+var_14] +
mov eax [eax+18h] +
push eax  +
call RestoreDC  +
retn   +
jmp unknown_libname_539  +
jmp loc_4661E1  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4663C6  +
mov eax [ebp+var_C] +
call @System@TObject@Free$qqrv  +
retn   +
jmp unknown_libname_539  +
jmp loc_466210  +
mov esi [ebx+8] +
cmp dword ptr [esi] 1 +
jnz loc_4663BC  +
mov eax [ebp+var_4] +
cmp dword ptr [eax+248h] 0 +
jz loc_4663BC  +
mov edx [esi+8] +
mov eax [ebp+var_4] +
mov eax [eax+248h] +
xor ecx ecx +
call @Menus@TMenu@FindItem$qqri19Menus@TFindItemKind  +
mov edi eax +
test edi edi +
jz loc_4663BC  +
mov eax [ebp+var_4] +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call GetWindowDC  +
mov [ebp+hDC] eax +
xor eax eax +
push ebp  +
push offset loc_466347  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov dl 1 +
mov eax ds:off_4713DC +
call @Graphics@TCanvas@$bctr$qqrv  +
mov [ebp+var_C] eax +
xor eax eax +
push ebp  +
push offset loc_466320  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov eax [ebp+hDC] +
push eax  +
call SaveDC  +
mov [ebp+var_8] eax +
xor eax eax +
push ebp  +
push offset loc_466303  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov edx [ebp+hDC] +
mov eax [ebp+var_C] +
call @Graphics@TCanvas@SetHandle$qqrui  +
mov eax dword_4F17A8 +
mov edx [eax+88h] +
mov eax [ebp+var_C] +
call unknown_libname_155  +
lea eax [esi+10h] +
push eax  +
lea ecx [esi+0Ch] +
mov edx [ebp+var_C] +
mov eax edi +
mov ebx [eax] +
call dword ptr [ebx+38h]  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_46630A  +
xor edx edx +
mov eax [ebp+var_C] +
call @Graphics@TCanvas@SetHandle$qqrui  +
mov eax [ebp+var_8] +
push eax  +
mov eax [ebp+hDC] +
push eax  +
call RestoreDC  +
retn   +
jmp unknown_libname_539  +
jmp loc_4662EB  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_466327  +
mov eax [ebp+var_C] +
call @System@TObject@Free$qqrv  +
retn   +
jmp unknown_libname_539  +
jmp loc_466317  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4663C6  +
mov eax [ebp+hDC] +
push eax  +
mov eax [ebp+var_4] +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call ReleaseDC  +
retn   +
jmp unknown_libname_539  +
jmp loc_466334  +
cmp eax dword_4F17B0 +
jnz loc_4663BC  +
push 0  +
xor ecx ecx +
mov edx 0B025h +
mov eax [ebp+var_4] +
call @Controls@TControl@Perform$qqruiii  +
push 0  +
xor ecx ecx +
mov edx 0B024h +
mov eax [ebp+var_4] +
call @Controls@TControl@Perform$qqruiii  +
push 0  +
xor ecx ecx +
mov edx 0B035h +
mov eax [ebp+var_4] +
call @Controls@TControl@Perform$qqruiii  +
push 0  +
xor ecx ecx +
mov edx 0B009h +
mov eax [ebp+var_4] +
call @Controls@TControl@Perform$qqruiii  +
push 0  +
xor ecx ecx +
mov edx 0B008h +
mov eax [ebp+var_4] +
call @Controls@TControl@Perform$qqruiii  +
push 0  +
xor ecx ecx +
mov edx 0B03Dh +
mov eax [ebp+var_4] +
call @Controls@TControl@Perform$qqruiii  +
mov edx ebx +
mov eax [ebp+var_4] +
call @Controls@TWinControl@WndProc$qqrr17Messages@TMessage  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
mov eax [ebp+arg_0] +
mov eax [eax-8] +
mov eax [eax+8] +
push eax  +
mov eax [ebp+arg_0] +
mov eax [eax-8] +
mov eax [eax+4] +
push eax  +
mov eax [ebp+arg_0] +
mov eax [eax-8] +
mov eax [eax] +
push eax  +
mov eax [ebp+arg_0] +
mov eax [eax-4] +
mov eax [eax+254h] +
push eax  +
mov eax [ebp+arg_0] +
mov eax [eax-4] +
mov eax [eax+274h] +
push eax  +
call CallWindowProcA  +
mov edx [ebp+arg_0] +
mov edx [edx-8] +
mov [edx+0Ch] eax +
pop ebp  +
retn   +
***
push ebx  +
push esi  +
mov eax [ebp+arg_0] +
mov eax [eax-4] +
call @Forms@TCustomForm@GetMDIChildCount$qqrv  +
mov ebx eax +
dec ebx  +
test ebx ebx +
jl loc_46645C  +
inc ebx  +
xor esi esi +
mov eax [ebp+arg_0] +
mov eax [eax-4] +
mov edx esi +
call @Forms@TCustomForm@GetMDIChildren$qqri  +
cmp byte ptr [eax+22Bh] 2 +
jnz loc_466458  +
mov al 1 +
jmp loc_46645E  +
inc esi  +
dec ebx  +
jnz loc_46643E  +
xor eax eax +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
add esp 0FFFFFFA4h +
mov [ebp+var_8] edx +
mov [ebp+var_4] eax +
mov eax [ebp+var_8] +
mov eax [eax] +
sub eax 0Fh +
jz loc_466531  +
sub eax 5 +
jz loc_4664B4  +
sub eax 2Bh +
jz loc_4664ED  +
sub eax 45h +
jnz loc_4665A0  +
push ebp  +
call @Forms@_16588  +
pop ecx  +
mov eax [ebp+var_8] +
cmp dword ptr [eax+0Ch] 1 +
jnz loc_4665A7  +
mov eax [ebp+var_8] +
mov dword ptr [eax+0Ch] 0FFFFFFFFh +
jmp loc_4665A7  +
mov eax [ebp+var_4] +
mov eax [eax+170h] +
call @Graphics@TBrush@GetHandle$qqrv  +
push eax  +
lea edx [ebp+rc] +
mov eax [ebp+var_4] +
mov ecx [eax] +
call dword ptr [ecx+44h]  +
lea eax [ebp+rc] +
push eax  +
mov eax [ebp+var_8] +
mov eax [eax+4] +
push eax  +
call FillRect  +
mov eax [ebp+var_8] +
mov dword ptr [eax+0Ch] 1 +
jmp loc_4665A7  +
push ebp  +
call @Forms@_16588  +
pop ecx  +
mov eax [ebp+var_4] +
cmp byte ptr [eax+22Fh] 2 +
jnz loc_4665A7  +
mov eax [ebp+var_4] +
call @Forms@TCustomForm@GetMDIChildCount$qqrv  +
test eax eax +
jz loc_46651F  +
push ebp  +
call @Forms@_16589  +
pop ecx  +
test al al +
jz loc_46651F  +
xor edx edx +
jmp loc_466521  +
mov dl 1 +
mov eax [ebp+var_4] +
mov eax [eax+254h] +
call @Forms@_16442  +
jmp loc_4665A7  +
mov eax [ebp+var_8] +
mov eax [eax+4] +
mov [ebp+var_C] eax +
cmp [ebp+var_C] 0 +
jnz loc_466559  +
lea eax [ebp+Paint] +
push eax  +
mov eax [ebp+var_4] +
mov eax [eax+254h] +
push eax  +
call BeginPaint  +
mov edx [ebp+var_8] +
mov [edx+4] eax +
xor eax eax +
push ebp  +
push offset loc_466599  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov edx [ebp+var_8] +
mov eax [ebp+var_4] +
call @Controls@TWinControl@PaintHandler$qqrr17Messages@TWMPaint  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4665A7  +
cmp [ebp+var_C] 0 +
jnz locret_466598  +
lea eax [ebp+Paint] +
push eax  +
mov eax [ebp+var_4] +
mov eax [eax+254h] +
push eax  +
call EndPaint  +
retn   +
jmp unknown_libname_539  +
jmp loc_46657F  +
push ebp  +
call @Forms@_16588  +
pop ecx  +
mov esp ebp +
pop ebp  +
retn   +
***
push edi  +
mov ebx ecx +
mov esi eax +
mov ecx ebx +
mov eax esi +
call @Forms@TScrollingWinControl@AlignControls$qqrp17Controls@TControlr11Types@TRect  +
mov eax [esi+254h] +
test eax eax +
jz loc_4665E3  +
push 14h  +
mov ecx [ebx+0Ch] +
mov edi [ebx+4] +
sub ecx edi +
push ecx  +
mov ecx [ebx+8] +
mov edx [ebx] +
sub ecx edx +
push ecx  +
push edi  +
push edx  +
push 1  +
push eax  +
call SetWindowPos  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
push ecx  +
mov ebx eax +
mov eax ebx +
call sub_464B90  +
mov eax ebx +
call @Controls@TWinControl@HandleAllocated$qqrv  +
test al al +
jz loc_46663D  +
push 0FFFFFFECh  +
mov eax ebx +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call GetWindowLongA  +
and eax 0FFFFEFFFh +
and eax 0FFFFDFFFh +
and eax 0FFFFBFFFh +
mov [esp+4+var_4] eax +
mov edx esp +
mov eax ebx +
call @Controls@TWinControl@AddBiDiModeExStyle$qqrrui  +
mov eax [esp+4+var_4] +
push eax  +
push 0FFFFFFECh  +
mov eax ebx +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call SetWindowLongA  +
mov eax ebx +
call @TComponent@GetComponentCount$qqrv  +
mov edi eax +
dec edi  +
test edi edi +
jl loc_466678  +
inc edi  +
xor esi esi +
mov edx esi +
mov eax ebx +
call @Classes@TComponent@GetComponent$qqri  +
mov edx ds:off_451428 +
call @System@@IsClass$qqrp14System@TObjectp17System@TMetaClass  +
test al al +
jz loc_466674  +
mov edx esi +
mov eax ebx +
call @Classes@TComponent@GetComponent$qqri  +
call @Menus@TMenu@ParentBiDiModeChanged$qqrv  +
inc esi  +
dec edi  +
jnz loc_46664E  +
pop edx  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push ecx  +
mov [ebp+var_4] eax +
mov eax [ebp+var_4] +
cmp byte ptr [eax+244h] 0 +
jnz loc_466704  +
mov eax [ebp+var_4] +
mov byte ptr [eax+244h] 1 +
xor edx edx +
push ebp  +
push offset loc_4666FD  +
push dword ptr fs:[edx]  +
mov fs:[edx] esp +
mov eax [ebp+var_4] +
cmp byte ptr [eax+60h] 0 +
jz loc_4666E5  +
mov eax [ebp+var_4] +
mov eax [eax+30h] +
test eax eax +
jnz loc_4666D0  +
mov eax dword_4F17A4 +
mov dl [eax+34h] +
mov eax [ebp+var_4] +
mov ecx [eax] +
call dword ptr [ecx+70h]  +
jmp loc_4666DB  +
mov dl [eax+5Fh] +
mov eax [ebp+var_4] +
mov ecx [eax] +
call dword ptr [ecx+70h]  +
mov dl 1 +
mov eax [ebp+var_4] +
mov ecx [eax] +
call dword ptr [ecx+6Ch]  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_466704  +
mov eax [ebp+var_4] +
mov byte ptr [eax+244h] 0 +
retn   +
jmp unknown_libname_539  +
jmp loc_4666F2  +
pop ecx  +
pop ebp  +
retn   +
***
mov [esp+1+var_1] dl +
mov ebx eax +
mov al [esp+1+var_1] +
cmp al [ebx+228h] +
jz loc_466730  +
mov al [esp+1+var_1] +
mov [ebx+228h] al +
test byte ptr [ebx+1Ch] 10h +
jnz loc_466730  +
mov eax ebx +
call @Controls@TWinControl@RecreateWnd$qqrv  +
pop edx  +
pop ebx  +
retn   +
***
cmp dl [esi+229h] +
jz loc_466769  +
mov eax edx +
mov [esi+229h] al +
sub al 2 +
jz loc_466753  +
sub al 3 +
jz loc_466753  +
xor edx edx +
jmp loc_466755  +
mov dl 1 +
mov eax esi +
call @Forms@TScrollingWinControl@SetAutoScroll$qqro  +
test byte ptr [esi+1Ch] 10h +
jnz loc_466769  +
mov eax esi +
call @Controls@TWinControl@RecreateWnd$qqrv  +
pop esi  +
retn   +
***
push edi  +
push edi  +
xor eax eax +
cmp byte ptr [ebx+22Fh] 2 +
jnz loc_466835  +
cmp dword ptr [ebx+254h] 0 +
jz loc_466835  +
push 0  +
push 0  +
push 229h  +
mov eax [ebx+254h] +
push eax  +
call SendMessageA  +
call @Controls@FindControl$qqrui  +
pop ebx  +
retn   +
***
push edi  +
xor edi edi +
cmp byte ptr [eax+22Fh] 2 +
jnz loc_46687D  +
cmp dword ptr [eax+254h] 0 +
jz loc_46687D  +
mov eax dword_4F17A8 +
call sub_46A2FC  +
mov ebx eax +
dec ebx  +
test ebx ebx +
jl loc_46687D  +
inc ebx  +
xor esi esi +
mov edx esi +
mov eax dword_4F17A8 +
call @Forms@TScreen@GetForm$qqri  +
cmp byte ptr [eax+22Fh] 1 +
jnz loc_466879  +
inc edi  +
inc esi  +
dec ebx  +
jnz loc_466863  +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
mov edi edx +
cmp byte ptr [eax+22Fh] 2 +
jnz loc_4668CD  +
cmp dword ptr [eax+254h] 0 +
jz loc_4668CD  +
mov eax dword_4F17A8 +
call sub_46A2FC  +
mov ebx eax +
dec ebx  +
test ebx ebx +
jl loc_4668CD  +
inc ebx  +
xor esi esi +
mov edx esi +
mov eax dword_4F17A8 +
call @Forms@TScreen@GetForm$qqri  +
cmp byte ptr [eax+22Fh] 1 +
jnz loc_4668C9  +
dec edi  +
test edi edi +
jl loc_4668CF  +
inc esi  +
dec ebx  +
jnz loc_4668AF  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push ebx  +
mov ebx [ebp+arg_C] +
mov dl 1 +
mov eax ds:off_463134 +
call @System@TObject@$bctr$qqrv  +
mov edx [ebp+arg_0] +
mov [eax+4] edx +
mov edx [ebx+8] +
mov [eax+8] edx +
mov edx eax +
mov eax ebx +
call @Classes@TList@Add$qqrpv  +
mov al 1 +
pop ebx  +
pop ebp  +
retn 10h  +
***
push edi  +
push ebp  +
push ecx  +
mov ebx eax +
mov ebp offset dword_4F17A8 +
xor eax eax +
mov [esp+4+var_4] eax +
push 2  +
mov eax ebx +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
mov eax off_4EA7F8 +
mov eax [eax] +
call eax  +
mov edi eax +
mov eax [ebp+0] +
call @Forms@TScreen@GetMonitorCount$qqrv  +
mov ebx eax +
dec ebx  +
test ebx ebx +
jl loc_466961  +
inc ebx  +
xor esi esi +
mov edx esi +
mov eax [ebp+0] +
call @Forms@TScreen@GetMonitor$qqri  +
cmp edi [eax+4] +
jnz loc_46695D  +
mov edx esi +
mov eax [ebp+0] +
call @Forms@TScreen@GetMonitor$qqri  +
mov [esp+4+var_4] eax +
jmp loc_4669E2  +
inc esi  +
dec ebx  +
jnz loc_46693C  +
mov eax [ebp+0] +
call @Forms@TScreen@GetMonitorCount$qqrv  +
mov ebx eax +
dec ebx  +
test ebx ebx +
jl loc_466989  +
inc ebx  +
xor esi esi +
mov eax [ebp+0] +
mov eax [eax+58h] +
mov edx esi +
call @Classes@TList@Get$qqri  +
call @System@TObject@Free$qqrv  +
inc esi  +
dec ebx  +
jnz loc_466973  +
mov eax [ebp+0] +
mov eax [eax+58h] +
mov edx [eax] +
call dword ptr [edx+8]  +
mov eax [ebp+0] +
mov eax [eax+58h] +
push eax  +
mov eax offset @Forms@_16602 +
push eax  +
push 0  +
push 0  +
mov eax off_4EA804 +
mov eax [eax] +
call eax  +
mov eax [ebp+0] +
call @Forms@TScreen@GetMonitorCount$qqrv  +
mov ebx eax +
dec ebx  +
test ebx ebx +
jl loc_4669E2  +
inc ebx  +
xor esi esi +
mov edx esi +
mov eax [ebp+0] +
call @Forms@TScreen@GetMonitor$qqri  +
cmp edi [eax+4] +
jnz loc_4669DE  +
mov edx esi +
mov eax [ebp+0] +
call @Forms@TScreen@GetMonitor$qqri  +
mov [esp+4+var_4] eax +
jmp loc_4669E2  +
inc esi  +
dec ebx  +
jnz loc_4669C0  +
mov eax [esp+4+var_4] +
pop edx  +
pop ebp  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov eax [eax+238h] +
retn   +
***
mov eax [eax+240h] +
xor al 1 +
retn   +
***
mov eax ebx +
call @Forms@TCustomForm@IsForm$qqrv  +
test al al +
jz loc_466A25  +
mov eax [ebx+240h] +
call @Graphics@TIcon@GetHandle$qqrv  +
test eax eax +
jnz loc_466A29  +
xor eax eax +
pop ebx  +
retn   +
mov al 1 +
pop ebx  +
retn   +
***
mov ebx edx +
mov esi eax +
cmp bl [esi+22Fh] +
jz loc_466AAB  +
cmp bl 1 +
jnz loc_466A55  +
cmp byte ptr [esi+230h] 0 +
jnz loc_466A55  +
mov dl 1 +
mov eax esi +
call @Forms@TCustomForm@SetPosition$qqr15Forms@TPosition  +
test byte ptr [esi+1Ch] 10h +
jnz loc_466A62  +
mov eax esi +
call @Controls@TWinControl@DestroyHandle$qqrv  +
mov al [esi+22Fh] +
mov [esi+22Fh] bl +
cmp bl 2 +
jz loc_466A77  +
cmp al 2 +
jnz loc_466A90  +
cmp byte ptr [esi+1A5h] 0 +
jnz loc_466A90  +
mov eax esi +
call @Forms@TCustomForm@NormalColor$qqrv  +
mov edx eax +
mov eax esi +
call @Controls@TControl@SetColor$qqr15Graphics@TColor  +
test byte ptr [esi+1Ch] 10h +
jnz loc_466A9D  +
mov eax esi +
call @Controls@TWinControl@UpdateControlState$qqrv  +
cmp bl 1 +
jnz loc_466AAB  +
mov dl 1 +
mov eax esi +
call @Forms@TCustomForm@SetVisible$qqro  +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
push ebp  +
mov ebp eax +
cmp byte ptr [ebp+22Fh] 2 +
jnz loc_466B24  +
cmp dword ptr [ebp+254h] 0 +
jz loc_466B24  +
xor esi esi +
mov eax [ebp+248h] +
test eax eax +
jz loc_466ADB  +
mov edx [eax] +
call dword ptr [edx+34h]  +
mov esi eax +
xor edi edi +
mov eax [ebp+258h] +
test eax eax +
jz loc_466AEE  +
call @Menus@TMenuItem@GetHandle$qqrv  +
mov edi eax +
mov eax ebp +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call GetMenu  +
cmp esi eax +
setnz bl  +
push edi  +
push esi  +
push 230h  +
mov eax [ebp+254h] +
push eax  +
call SendMessageA  +
test bl bl +
jz loc_466B24  +
mov eax ebp +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call DrawMenuBar  +
pop ebp  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov [eax+260h] ebx +
test ebx ebx +
jz loc_466B4B  +
mov edx eax +
mov eax ebx +
call @Classes@TComponent@FreeNotification$qqrp18Classes@TComponent  +
xor edx edx +
mov eax ebx +
call @Menus@TMenuItem@SetEnabled$qqro  +
pop ebx  +
retn   +
***
cmp edx [ebx+258h] +
jz loc_466B75  +
mov [ebx+258h] edx +
test edx edx +
jz loc_466B6E  +
mov eax edx +
mov edx ebx +
call @Classes@TComponent@FreeNotification$qqrp18Classes@TComponent  +
mov eax ebx +
call @Forms@TCustomForm@RefreshMDIMenu$qqrv  +
pop ebx  +
retn   +
***
add esp 0FFFFFFF0h +
mov eax [eax+25Ch] +
test eax eax +
jnz locret_466D5E  +
mov eax dword_4F17A8 +
mov eax [eax+40h] +
retn   +
***
mov esi edx +
mov ebx eax +
mov eax ebx +
call @Forms@TCustomForm@GetPixelsPerInch$qqrv  +
cmp esi eax +
jz loc_466D8F  +
test esi esi +
jz loc_466D7A  +
cmp esi 24h +
jl loc_466D8F  +
test byte ptr [ebx+1Ch] 1 +
jz loc_466D89  +
cmp dword ptr [ebx+25Ch] 0 +
jz loc_466D8F  +
mov [ebx+25Ch] esi +
pop esi  +
pop ebx  +
retn   +
***
cmp dl [eax+230h] +
jz locret_466DAD  +
mov [eax+230h] dl +
test byte ptr [eax+1Ch] 10h +
jnz locret_466DAD  +
call @Controls@TWinControl@RecreateWnd$qqrv  +
retn   +
***
cmp dword ptr [eax+25Ch] 0 +
setnz al  +
retn   +
***
mov ebx edx +
mov esi eax +
mov eax esi +
call @Forms@TCustomForm@GetScaled$qqrv  +
cmp bl al +
jz loc_466DE7  +
xor eax eax +
mov [esi+25Ch] eax +
test bl bl +
jz loc_466DE7  +
mov eax dword_4F17A8 +
mov eax [eax+40h] +
mov [esi+25Ch] eax +
pop esi  +
pop ebx  +
retn   +
***
mov eax ebx +
call @Controls@TWinControl@CMColorChanged$qqrr17Messages@TMessage  +
mov eax [ebx+238h] +
test eax eax +
jz loc_466E0B  +
mov eax [eax+14h] +
mov edx [ebx+70h] +
call @Graphics@TBrush@SetColor$qqr15Graphics@TColor  +
pop ebx  +
retn   +
***
mov edx 80000005h +
cmp byte ptr [eax+22Fh] 2 +
jnz loc_466E23  +
mov edx 8000000Ch +
mov eax edx +
retn   +
***
mov eax ebx +
mov eax ebx +
call @Controls@TWinControl@CMFontChanged$qqrr17Messages@TMessage  +
mov eax [ebx+238h] +
test eax eax +
jz loc_466E8C  +
mov edx [ebx+68h] +
call unknown_libname_155  +
pop ebx  +
retn   +
***
mov eax ebx +
call @Forms@TCustomForm@RefreshMDIMenu$qqrv  +
mov edx [ebx+248h] +
mov eax ebx +
call @Forms@TCustomForm@SetMenu$qqrp15Menus@TMainMenu  +
pop ebx  +
retn   +
***
mov ebx edx +
mov esi eax +
cmp bl [esi+22Bh] +
jz loc_466EE8  +
mov [esi+22Bh] bl +
test byte ptr [esi+1Ch] 10h +
jnz loc_466EE8  +
cmp byte ptr [esi+1A6h] 0 +
jz loc_466EE8  +
xor eax eax +
mov al bl +
mov eax nCmdShow[eax*4] +
push eax  +
mov eax esi +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call ShowWindow  +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
push edi  +
push ecx  +
mov esi edx +
mov edi eax +
mov edx esi +
mov eax edi +
call @Extctrls@TCustomControlBar@CreateParams$qqrr22Controls@TCreateParams  +
mov edx esi +
mov eax edi +
call @Forms@TCustomForm@InitAlphaBlending$qqrr22Controls@TCreateParams  +
cmp dword ptr [edi+30h] 0 +
jnz loc_46727B  +
cmp dword ptr [edi+190h] 0 +
jnz loc_46727B  +
mov eax dword_4F17A4 +
mov eax [eax+30h] +
mov [esi+1Ch] eax +
and dword ptr [esi+4] 0BFFCFFFFh +
mov dword ptr [esi+24h] 8 +
test byte ptr [edi+1Ch] 10h +
jz loc_46729A  +
cmp dword ptr [edi+30h] 0 +
jnz loc_46729A  +
or dword ptr [esi+4] 0CF0000h +
jmp loc_46744B  +
mov al [edi+230h] +
dec eax  +
sub al 2 +
jnb loc_4672B3  +
mov dword ptr [esi+0Ch] 80000000h +
mov dword ptr [esi+10h] 80000000h +
mov bl [edi+228h] +
mov al [edi+229h] +
mov [esp+1+var_1] al +
cmp byte ptr [edi+22Fh] 1 +
jnz loc_4672DA  +
mov al [esp+1+var_1] +
test al al +
jz loc_4672D6  +
sub al 3 +
jnz loc_4672DA  +
mov [esp+1+var_1] 2 +
xor eax eax +
mov al [esp+1+var_1] +
cmp eax 5 +
ja loc_46739E  +
jmp ds:off_4672EF[eax*4]  +
cmp dword ptr [edi+30h] 0 +
jnz loc_46731D  +
cmp dword ptr [edi+190h] 0 +
jnz loc_46731D  +
or dword ptr [esi+4] 80000000h +
mov bl ds:byte_467450 +
jmp loc_46739E  +
or dword ptr [esi+4] 0C00000h +
jmp loc_46739E  +
or dword ptr [esi+4] 0C40000h +
mov al [edi+230h] +
sub al 1 +
jz loc_467343  +
sub al 2 +
jnz loc_46739E  +
mov dword ptr [esi+14h] 80000000h +
mov dword ptr [esi+18h] 80000000h +
jmp loc_46739E  +
mov eax [esi+4] +
or eax 80000000h +
or eax 0C00000h +
mov [esi+4] eax +
mov dword ptr [esi+8] 101h +
lea edx [esi+8] +
mov eax edi +
call @Controls@TWinControl@AddBiDiModeExStyle$qqrrui  +
mov eax off_4EA6D4 +
cmp byte ptr [eax] 0 +
jnz loc_46738E  +
mov eax [esi+4] +
or eax 400000h +
or eax 80h +
mov [esi+4] eax +
mov al ds:byte_467454 +
and al bl +
mov ebx eax +
mov dword ptr [esi+24h] 2808h +
mov al [esp+1+var_1] +
add al 0FCh +
sub al 2 +
jnb loc_4673C1  +
mov dword ptr [esi+8] 80h +
lea edx [esi+8] +
mov eax edi +
call @Controls@TWinControl@AddBiDiModeExStyle$qqrrui  +
mov al ds:byte_467458 +
and al bl +
mov ebx eax +
mov al [esp+1+var_1] +
sub al 3 +
jnb loc_46740E  +
cmp byte ptr [edi+22Fh] 1 +
jnz loc_4673D6  +
test bl 1 +
jz loc_4673EE  +
test bl 2 +
jz loc_4673E2  +
or dword ptr [esi+4] 20000h +
test bl 4 +
jz loc_4673EE  +
or dword ptr [esi+4] 10000h +
mov al [edi+22Bh] +
cmp al 1 +
jnz loc_467401  +
or dword ptr [esi+4] 20000000h +
jmp loc_467415  +
cmp al 2 +
jnz loc_467415  +
or dword ptr [esi+4] 1000000h +
jmp loc_467415  +
mov byte ptr [edi+22Bh] 0 +
test bl 1 +
jz loc_467421  +
or dword ptr [esi+4] 80000h +
test bl 8 +
jz loc_46742D  +
or dword ptr [esi+8] 400h +
test byte ptr [edi+1Dh] 2 +
jz loc_46743A  +
and dword ptr [esi+4] 0FF3FFFFFh +
cmp byte ptr [edi+22Fh] 1 +
jnz loc_46744B  +
mov eax offset DefMDIChildProcA +
mov [esi+28h] eax +
pop edx  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
add esp 0FFFFFFF8h +
mov ebx eax +
mov eax ebx +
call @Forms@TScrollingWinControl@CreateWnd$qqrv  +
mov eax off_4EA6D4 +
cmp byte ptr [eax] 0 +
jz loc_4674B1  +
cmp byte ptr [ebx+229h] 3 +
jz loc_46749B  +
mov eax ebx +
call @Forms@TCustomForm@GetIconHandle$qqrv  +
push eax  +
push 1  +
push 80h  +
mov eax ebx +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call SendMessageA  +
jmp loc_4674B1  +
push 0  +
push 1  +
push 80h  +
mov eax ebx +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call SendMessageA  +
test byte ptr [ebx+1Ch] 10h +
jnz loc_467589  +
mov al [ebx+22Fh] +
sub al 2 +
jz loc_4674D2  +
dec al  +
jz loc_467570  +
jmp loc_467589  +
mov [esp+8+var_4] 0FF00h +
xor eax eax +
mov [esp+8+var_8] eax +
mov esi [ebx+258h] +
test esi esi +
jz loc_4674F3  +
mov eax esi +
call @Menus@TMenuItem@GetHandle$qqrv  +
mov [esp+8+var_8] eax +
push esp  +
mov eax hInstance +
push eax  +
push 0  +
mov eax ebx +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
mov eax ebx +
call @Controls@TControl@GetClientHeight$qqrv  +
push eax  +
mov eax ebx +
call @Controls@TControl@GetClientWidth$qqrv  +
push eax  +
push 0  +
push 0  +
push 56330001h  +
push 0  +
push offset aMdiclient  +
push 200h  +
call CreateWindowExA  +
mov [ebx+254h] eax +
push ebx  +
push offset @Forms@TCustomForm@ClientWndProc$qqrr17Messages@TMessage  +
call sub_4A5BA4  +
mov [ebx+278h] eax +
push 0FFFFFFFCh  +
mov eax [ebx+254h] +
push eax  +
call GetWindowLongA  +
mov [ebx+274h] eax +
mov eax [ebx+278h] +
push eax  +
push 0FFFFFFFCh  +
mov eax [ebx+254h] +
push eax  +
call SetWindowLongA  +
jmp loc_467589  +
push 13h  +
push 0  +
push 0  +
push 0  +
push 0  +
push 0FFFFFFFFh  +
mov eax ebx +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call SetWindowPos  +
pop ecx  +
pop edx  +
pop esi  +
pop ebx  +
retn   +
***
add esp 0FFFFFF4Ch +
push ebx  +
push esi  +
push edi  +
xor ecx ecx +
mov [ebp+var_B4] ecx +
mov ebx eax +
xor eax eax +
push ebp  +
push offset loc_4676C5  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
cmp byte ptr [ebx+22Fh] 1 +
jnz loc_467678  +
test byte ptr [ebx+1Ch] 10h +
jnz loc_467678  +
mov eax dword_4F17A4 +
mov eax [eax+44h] +
test eax eax +
jz loc_4675EC  +
cmp dword ptr [eax+254h] 0 +
jnz loc_467613  +
lea edx [ebp+var_B4] +
mov eax off_4EA740 +
call @System@LoadResString$qqrp20System@TResStringRec  +
mov ecx [ebp+var_B4] +
mov dl 1 +
mov eax ds:off_49A578 +
call sub_4AC17C  +
call @System@@RaiseExcept$qqrv  +
lea eax [edx+4Ch] +
mov [ebp+lParam] eax +
mov eax [edx] +
mov [ebp+var_20] eax +
mov eax hInstance +
mov [ebp+var_1C] eax +
mov eax [edx+0Ch] +
mov [ebp+var_18] eax +
mov eax [edx+10h] +
mov [ebp+var_14] eax +
mov eax [edx+14h] +
mov [ebp+var_10] eax +
mov eax [edx+18h] +
mov [ebp+var_C] eax +
mov eax [edx+4] +
mov [ebp+var_8] eax +
mov eax [edx+20h] +
mov [ebp+var_4] eax +
lea eax [ebp+lParam] +
push eax  +
push 0  +
push 220h  +
mov eax dword_4F17A4 +
mov eax [eax+44h] +
mov eax [eax+254h] +
push eax  +
call SendMessageA  +
mov [ebx+180h] eax +
or byte ptr [ebx+2ECh] 10h +
jmp loc_4676A5  +
mov esi edx +
lea edi [ebp+var_B0] +
mov ecx 23h +
movs   +
and [ebp+var_A8] 0FFF7FFFFh +
lea edx [ebp+var_B0] +
mov eax ebx +
call @TWinControl@CreateWindowHandle$qqrrx13TCreateParams  +
and byte ptr [ebx+2ECh] 0EFh +
mov eax ebx +
call @Forms@TCustomForm@SetLayeredAttribs$qqrv  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4676CC  +
lea eax [ebp+var_B4] +
call unknown_libname_540  +
retn   +
jmp unknown_libname_539  +
jmp loc_4676B9  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
test byte ptr [ebx+2ECh] 10h +
jz loc_467705  +
push 0  +
mov eax ebx +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
push 221h  +
mov eax dword_4F17A4 +
mov eax [eax+44h] +
mov eax [eax+254h] +
push eax  +
call SendMessageA  +
jmp loc_46770C  +
mov eax ebx +
call @Controls@TWinControl@DestroyWindowHandle$qqrv  +
xor eax eax +
mov [ebx+254h] eax +
pop ebx  +
retn   +
***
mov esi edx +
mov ebx eax +
cmp dword ptr [ebx+254h] 0 +
jz loc_46776E  +
cmp dword ptr [esi] 5 +
jnz loc_467749  +
mov eax [esi+8] +
push eax  +
mov eax [esi+4] +
push eax  +
mov eax [esi] +
push eax  +
mov eax ebx +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call DefWindowProcA  +
mov [esi+0Ch] eax +
jmp loc_467777  +
mov eax [esi+8] +
push eax  +
mov eax [esi+4] +
push eax  +
mov eax [esi] +
push eax  +
mov eax [ebx+254h] +
push eax  +
mov eax ebx +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call DefFrameProcA  +
mov [esi+0Ch] eax +
pop esi  +
pop ebx  +
retn   +
mov edx esi +
mov eax ebx +
call @Controls@TWinControl@DefaultHandler$qqrpv  +
pop esi  +
pop ebx  +
retn   +
***
push 0  +
push ebx  +
push esi  +
push edi  +
mov edi edx +
mov ebx eax +
xor eax eax +
push ebp  +
push offset loc_467824  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
cmp edi [ebx+220h] +
jz loc_46780E  +
test edi edi +
jz loc_4677E7  +
cmp ebx edi +
jz loc_4677C6  +
mov eax edi +
call @Forms@GetParentForm$qqrp17Controls@TControl  +
cmp ebx eax +
jnz loc_4677C6  +
test byte ptr [ebx+1Ch] 1 +
jnz loc_4677E7  +
mov eax edi +
mov si 0FFB8h +
call @System@@CallDynaInst$qqrv  +
test al al +
jnz loc_4677E7  +
lea edx [ebp+var_4] +
mov eax off_4EA6FC +
call @System@LoadResString$qqrp20System@TResStringRec  +
mov ecx [ebp+var_4] +
mov dl 1 +
mov eax ds:off_49A578 +
call sub_4AC17C  +
call @System@@RaiseExcept$qqrv  +
mov [ebx+220h] edi +
test byte ptr [ebx+1Ch] 1 +
jnz loc_46780E  +
cmp byte ptr [ebx+22Eh] 0 +
jz loc_467803  +
mov eax ebx +
call @Forms@TCustomForm@SetWindowFocus$qqrv  +
mov eax ebx +
mov si 0FFB2h +
call @System@@CallDynaInst$qqrv  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_46782B  +
lea eax [ebp+var_4] +
call unknown_libname_540  +
retn   +
jmp unknown_libname_539  +
jmp loc_46781B  +
pop edi  +
pop esi  +
pop ebx  +
pop ecx  +
pop ebp  +
retn   +
***
push edi  +
mov ebx ecx +
mov esi edx +
mov edi eax +
test bl bl +
jz loc_46785B  +
mov edx [edi+224h] +
mov eax esi +
call @Controls@TWinControl@ContainsControl$qqrp17Controls@TControl  +
test al al +
jz loc_46785B  +
mov eax [esi+30h] +
mov [edi+224h] eax +
mov edx [edi+220h] +
mov eax esi +
call @Controls@TWinControl@ContainsControl$qqrp17Controls@TControl  +
test al al +
jz loc_467875  +
xor edx edx +
mov eax edi +
call @Forms@TCustomForm@SetActiveControl$qqrp20Controls@TWinControl  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov esi eax +
mov bl [esi+22Eh] +
mov eax esi +
call @Forms@TCustomForm@SetActiveControl$qqrp20Controls@TWinControl  +
test bl bl +
jnz loc_46789B  +
mov eax esi +
mov edx [eax] +
call dword ptr [edx+0C0h]  +
pop esi  +
pop ebx  +
retn   +
***
push ecx  +
push ebx  +
push esi  +
push edi  +
mov [ebp+var_4] edx +
mov edi eax +
xor ebx ebx +
inc dword_4E64C4  +
cmp dword ptr [edi+250h] 0 +
jnz loc_4678D5  +
cmp edi [ebp+var_4] +
jz loc_4678CD  +
mov eax [ebp+var_4] +
mov [edi+220h] eax +
jmp loc_4678D5  +
xor eax eax +
mov [edi+220h] eax +
mov eax dword_4F17A8 +
mov edx [ebp+var_4] +
mov [eax+64h] edx +
mov eax dword_4F17A8 +
mov [eax+68h] edi +
mov eax dword_4F17A8 +
mov eax [eax+50h] +
mov edx edi +
call @Classes@TList@Remove$qqrpv  +
mov eax dword_4F17A8 +
mov eax [eax+50h] +
mov ecx edi +
xor edx edx +
call @Classes@TList@Insert$qqripv  +
mov eax edi +
mov edx ds:off_462E1C +
call @System@@IsClass$qqrp14System@TObjectp17System@TMetaClass  +
test al al +
jz loc_467943  +
mov eax dword_4F17A8 +
mov [eax+6Ch] edi +
mov eax dword_4F17A8 +
mov eax [eax+4Ch] +
mov edx edi +
call @Classes@TList@Remove$qqrpv  +
mov eax dword_4F17A8 +
mov eax [eax+4Ch] +
mov ecx edi +
xor edx edx +
call @Classes@TList@Insert$qqripv  +
jmp loc_46794D  +
mov eax dword_4F17A8 +
xor edx edx +
mov [eax+6Ch] edx +
mov eax [ebp+var_4] +
test byte ptr [eax+54h] 20h +
jnz loc_467B23  +
mov eax [ebp+var_4] +
mov ax [eax+54h] +
or ax ds:word_467B2C +
mov edx [ebp+var_4] +
mov [edx+54h] ax +
xor edx edx +
push ebp  +
push offset loc_467B10  +
push dword ptr fs:[edx]  +
mov fs:[edx] esp +
mov eax dword_4F17A8 +
mov eax [eax+78h] +
cmp edi eax +
jz loc_4679DD  +
test eax eax +
jz loc_4679B7  +
call @Controls@TWinControl@GetHandle$qqrv  +
mov esi eax +
mov eax dword_4F17A8 +
xor edx edx +
mov [eax+78h] edx +
mov dx 0B001h +
mov eax esi +
call unknown_libname_186  +
test al al +
jnz loc_4679B7  +
call @System@@TryFinallyExit$qqrv  +
jmp loc_467B23  +
mov eax dword_4F17A8 +
mov [eax+78h] edi +
mov eax edi +
call @Controls@TWinControl@GetHandle$qqrv  +
mov dx 0B000h +
call unknown_libname_186  +
test al al +
jnz loc_4679DD  +
call @System@@TryFinallyExit$qqrv  +
jmp loc_467B23  +
cmp dword ptr [edi+224h] 0 +
jnz loc_4679EC  +
mov [edi+224h] edi +
mov eax [edi+224h] +
cmp eax [ebp+var_4] +
jz loc_467AEB  +
jmp loc_467A32  +
mov eax [edi+224h] +
call @Controls@TWinControl@GetHandle$qqrv  +
mov esi eax +
mov eax [edi+224h] +
mov eax [eax+30h] +
mov [edi+224h] eax +
mov dx 0B01Bh +
mov eax esi +
call unknown_libname_186  +
test al al +
jnz loc_467A32  +
call @System@@TryFinallyExit$qqrv  +
jmp loc_467B23  +
mov esi [edi+224h] +
test esi esi +
jz loc_467A82  +
mov eax esi +
mov edx [ebp+var_4] +
call @Controls@TWinControl@ContainsControl$qqrp17Controls@TControl  +
test al al +
jz loc_4679FD  +
jmp loc_467A82  +
mov esi [ebp+var_4] +
jmp loc_467A53  +
mov esi eax +
mov eax [esi+30h] +
cmp eax [edi+224h] +
jnz loc_467A51  +
mov [edi+224h] esi +
mov eax esi +
call @Controls@TWinControl@GetHandle$qqrv  +
mov dx 0B01Ah +
call unknown_libname_186  +
test al al +
jnz loc_467A82  +
call @System@@TryFinallyExit$qqrv  +
jmp loc_467B23  +
mov eax [edi+224h] +
cmp eax [ebp+var_4] +
jnz loc_467A4C  +
mov eax [ebp+var_4] +
mov esi [eax+30h] +
test esi esi +
jz loc_467ABC  +
mov eax esi +
mov edx ds:off_461330 +
call @System@@IsClass$qqrp14System@TObjectp17System@TMetaClass  +
test al al +
jz loc_467AB5  +
mov edx [ebp+var_4] +
mov eax esi +
mov ecx [eax] +
call dword ptr [ecx+0C8h]  +
mov esi [esi+30h] +
test esi esi +
jnz loc_467A97  +
mov eax [ebp+var_4] +
push eax  +
xor ecx ecx +
mov edx 0B007h +
mov eax edi +
call @Controls@TControl@Perform$qqruiii  +
mov eax [edi+27Ch] +
test eax eax +
jz loc_467AEB  +
cmp eax [ebp+var_4] +
jz loc_467AEB  +
push 0  +
xor ecx ecx +
mov edx 0B02Ah +
call @Controls@TControl@Perform$qqruiii  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_467B17  +
mov eax [ebp+var_4] +
mov dx ds:word_467B2C +
not edx  +
and dx [eax+54h] +
mov eax [ebp+var_4] +
mov [eax+54h] dx +
retn   +
jmp unknown_libname_539  +
jmp loc_467AF8  +
mov eax dword_4F17A8 +
call @Forms@TScreen@UpdateLastActive$qqrv  +
mov bl 1 +
mov eax ebx +
pop edi  +
pop esi  +
pop ebx  +
pop ecx  +
pop ebp  +
retn   +
***
mov edx [eax+220h] +
test edx edx +
jz loc_467B4D  +
cmp dword ptr [eax+250h] 0 +
jnz loc_467B4D  +
mov ebx edx +
jmp loc_467B4F  +
mov ebx eax +
mov eax ebx +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call SetFocus  +
mov eax ebx +
call @Controls@TWinControl@GetHandle$qqrv  +
mov esi eax +
call GetFocus  +
cmp esi eax +
jnz loc_467B7E  +
push 0  +
xor ecx ecx +
mov edx 0B029h +
mov eax ebx +
call @Controls@TControl@Perform$qqruiii  +
pop esi  +
pop ebx  +
retn   +
***
mov ebx edx +
mov esi edx +
jnz loc_467CDC  +
mov ecx dword_4F17A4 +
cmp dword ptr [ecx+44h] 0 +
jz loc_467CDC  +
mov ecx dword_4F17A4 +
mov ecx [ecx+44h] +
cmp dword ptr [ecx+248h] 0 +
jz loc_467CDC  +
mov ecx dword_4F17A4 +
cmp eax [ecx+44h] +
jz loc_467CDC  +
cmp byte ptr [eax+22Fh] 1 +
jz loc_467C8E  +
mov ecx dword_4F17A4 +
mov ecx [ecx+44h] +
cmp byte ptr [ecx+22Fh] 2 +
jz loc_467CDC  +
xor esi esi +
test byte ptr [eax+1Ch] 10h +
jnz loc_467CBA  +
cmp dword ptr [eax+248h] 0 +
jz loc_467CBA  +
mov ecx [eax+248h] +
cmp byte ptr [ecx+5Ch] 0 +
jnz loc_467CB4  +
cmp byte ptr [eax+22Fh] 1 +
jnz loc_467CBA  +
mov esi [eax+248h] +
mov eax dword_4F17A4 +
mov eax [eax+44h] +
mov eax [eax+248h] +
test dl dl +
jz loc_467CD5  +
mov edx esi +
call @Menus@TMainMenu@Merge$qqrp15Menus@TMainMenu  +
jmp loc_467CDC  +
mov edx esi +
call @Menus@TMainMenu@Unmerge$qqrp15Menus@TMainMenu  +
pop esi  +
retn   +
***
push edi  +
push ebp  +
mov edi ecx +
mov ebx edx +
mov ebp eax +
test ebx ebx +
jz loc_467D24  +
jmp loc_467CF2  +
mov ebx esi +
mov esi [ebx+30h] +
test esi esi +
jz loc_467D0A  +
mov eax ebx +
mov edx ds:off_462B40 +
call @System@@IsClass$qqrp14System@TObjectp17System@TMetaClass  +
test al al +
jz loc_467CF0  +
test ebx ebx +
jz loc_467D24  +
cmp edi ebx +
jz loc_467D24  +
push 0  +
push 0  +
push ebp  +
mov eax ebx +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call SendMessageA  +
pop ebp  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov ecx ebx +
mov edx [ebx+220h] +
mov eax 0B000h +
call @Forms@_16640  +
cmp word ptr [ebx+28Ah] 0 +
jz loc_467D59  +
mov edx ebx +
mov eax [ebx+28Ch] +
call dword ptr [ebx+288h]  +
pop ebx  +
retn   +
***
mov ecx ebx +
mov edx [ebx+220h] +
mov eax 0B001h +
call @Forms@_16640  +
cmp word ptr [ebx+2A2h] 0 +
jz loc_467D89  +
mov edx ebx +
mov eax [ebx+2A4h] +
call dword ptr [ebx+2A0h]  +
pop ebx  +
retn   +
***
jz loc_467DA7  +
mov ebx eax +
mov edx eax +
mov eax [ebx+2BCh] +
call dword ptr [ebx+2B8h]  +
pop ebx  +
retn   +
***
mov eax [eax+240h] +
call @Graphics@TIcon@GetHandle$qqrv  +
test eax eax +
jnz locret_467DC5  +
mov eax dword_4F17A4 +
call @Forms@TApplication@GetIconHandle$qqrv  +
retn   +
***
push ecx  +
push ebx  +
push esi  +
mov ebx edx +
mov [ebp+var_4] eax +
mov eax [ebp+var_4] +
mov eax [eax+238h] +
call @Graphics@TCanvas@Lock$qqrv  +
xor eax eax +
push ebp  +
push offset loc_467E76  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov eax [ebp+var_4] +
mov eax [eax+238h] +
mov edx ebx +
call @Graphics@TCanvas@SetHandle$qqrui  +
xor eax eax +
push ebp  +
push offset loc_467E53  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov eax [ebp+var_4] +
cmp dword ptr [eax+250h] 0 +
jz loc_467E29  +
mov eax [ebp+var_4] +
mov eax [eax+250h] +
mov edx [eax] +
call dword ptr [edx+28h]  +
jmp loc_467E35  +
mov eax [ebp+var_4] +
mov si 0FFACh +
call @System@@CallDynaInst$qqrv  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_467E5A  +
mov eax [ebp+var_4] +
mov eax [eax+238h] +
xor edx edx +
call @Graphics@TCanvas@SetHandle$qqrui  +
retn   +
jmp unknown_libname_539  +
jmp loc_467E42  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_467E7D  +
mov eax [ebp+var_4] +
mov eax [eax+238h] +
call @Graphics@TCanvas@Unlock$qqrv  +
retn   +
jmp unknown_libname_539  +
jmp loc_467E67  +
pop esi  +
pop ebx  +
pop ecx  +
pop ebp  +
retn   +
***
push edi  +
push ebp  +
add esp 0FFFFFFF0h +
mov [esp+10h+var_C] dl +
mov [esp+10h+var_10] eax +
xor ebx ebx +
mov eax [esp+10h+var_10] +
call @Forms@TCustomForm@GetActiveMDIChild$qqrv  +
mov [esp+10h+var_4] eax +
cmp [esp+10h+var_4] 0 +
jz loc_467EBA  +
mov dl [esp+10h+var_C] +
mov eax [esp+10h+var_4] +
mov si 0FFD1h +
call @System@@CallDynaInst$qqrv  +
mov ebx eax +
mov eax [esp+10h+var_10] +
call @Forms@TCustomForm@GetMDIChildCount$qqrv  +
mov ebp eax +
dec ebp  +
test ebp ebp +
jl loc_467F04  +
inc ebp  +
mov [esp+10h+var_8] 0 +
test [esp+10h+var_C] bl +
jnz loc_467F18  +
mov edx [esp+10h+var_8] +
mov eax [esp+10h+var_10] +
call @Forms@TCustomForm@GetMDIChildren$qqri  +
mov edi eax +
cmp edi [esp+10h+var_4] +
jz loc_467EFD  +
mov dl [esp+10h+var_C] +
mov eax edi +
mov si 0FFD1h +
call @System@@CallDynaInst$qqrv  +
or bl al +
inc [esp+10h+var_8]  +
dec ebp  +
jnz loc_467ED2  +
test [esp+10h+var_C] bl +
jnz loc_467F18  +
mov dl [esp+10h+var_C] +
mov eax [esp+10h+var_10] +
call @Controls@TWinControl@PaletteChanged$qqro  +
mov ebx eax +
mov eax ebx +
add esp 10h +
pop ebp  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
add esp 0FFFFFFC0h +
mov esi edx +
mov ebx eax +
mov eax ebx +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call IsIconic  +
test eax eax +
jnz loc_467F67  +
mov ax ds:word_467FA0 +
or ax [ebx+54h] +
mov [ebx+54h] ax +
mov edx esi +
mov eax ebx +
call @Controls@TWinControl@WMPaint$qqrr17Messages@TWMPaint  +
mov ax ds:word_467FA0 +
not eax  +
and ax [ebx+54h] +
mov [ebx+54h] ax +
jmp loc_467F97  +
push esp  +
mov eax ebx +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call BeginPaint  +
mov esi eax +
mov eax ebx +
call @Forms@TCustomForm@GetIconHandle$qqrv  +
push eax  +
push 0  +
push 0  +
push esi  +
call DrawIcon  +
push esp  +
mov eax ebx +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call EndPaint  +
add esp 40h +
pop esi  +
pop ebx  +
retn   +
***
add esp 0FFFFFFF0h +
mov esi edx +
mov ebx eax +
cmp byte ptr [ebx+22Fh] 1 +
jnz loc_467FFD  +
cmp byte ptr [ebx+22Fh] 1 +
jnz loc_467FF4  +
test byte ptr [ebx+1Ch] 10h +
jnz loc_467FF4  +
mov eax dword_4F17A4 +
mov eax [eax+44h] +
mov eax [eax+170h] +
call @Graphics@TBrush@GetHandle$qqrv  +
push eax  +
lea edx [esp+14h+rc] +
mov eax ebx +
mov ecx [eax] +
call dword ptr [ecx+44h]  +
lea eax [esp+14h+rc] +
push eax  +
mov eax [esi+4] +
push eax  +
call FillRect  +
jmp loc_467FFD  +
mov edx esi +
mov eax ebx +
mov ecx [eax] +
call dword ptr [ecx-10h]  +
add esp 10h +
pop esi  +
pop ebx  +
retn   +
***
push esi  +
push edi  +
mov edi edx +
mov esi eax +
mov eax esi +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call IsIconic  +
test eax eax +
jnz loc_468027  +
mov edx edi +
mov eax esi +
call @Controls@TWinControl@WMEraseBkgnd$qqrr22Messages@TWMEraseBkgnd  +
pop edi  +
pop esi  +
retn   +
***
mov dword ptr [edi] 27h +
mov edx edi +
mov eax esi +
mov ecx [eax] +
call dword ptr [ecx-10h]  +
pop edi  +
pop esi  +
retn   +
***
mov esi edx +
mov ebx eax +
mov eax ebx +
call @Forms@TCustomForm@GetIconHandle$qqrv  +
mov [esi+0Ch] eax +
pop esi  +
pop ebx  +
retn   +
***
push ebx  +
mov eax [ebp+arg_0] +
mov eax [eax-4] +
cmp byte ptr [eax+229h] 0 +
jz loc_468146  +
mov eax [ebp+arg_0] +
mov eax [eax-4] +
test byte ptr [eax+228h] 1 +
jz loc_468146  +
mov eax [ebp+arg_0] +
mov eax [eax-4] +
cmp byte ptr [eax+22Fh] 1 +
jz loc_468146  +
push 0  +
mov eax [ebp+arg_0] +
mov eax [eax-4] +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call GetSystemMenu  +
mov ebx eax +
mov eax [ebp+arg_0] +
mov eax [eax-4] +
cmp byte ptr [eax+229h] 3 +
jnz loc_46810E  +
push 0  +
push 0F130h  +
push ebx  +
call DeleteMenu  +
push 400h  +
push 7  +
push ebx  +
call DeleteMenu  +
push 400h  +
push 5  +
push ebx  +
call DeleteMenu  +
push 0  +
push 0F030h  +
push ebx  +
call DeleteMenu  +
push 0  +
push 0F020h  +
push ebx  +
call DeleteMenu  +
push 0  +
push 0F000h  +
push ebx  +
call DeleteMenu  +
push 0  +
push 0F120h  +
push ebx  +
call DeleteMenu  +
jmp loc_468146  +
mov eax [ebp+arg_0] +
mov eax [eax-4] +
test byte ptr [eax+228h] 2 +
jnz loc_46812A  +
push 1  +
push 0F020h  +
push ebx  +
call EnableMenuItem  +
mov eax [ebp+arg_0] +
mov eax [eax-4] +
test byte ptr [eax+228h] 4 +
jnz loc_468146  +
push 1  +
push 0F030h  +
push ebx  +
call EnableMenuItem  +
pop ebx  +
pop ebp  +
retn   +
***
push ecx  +
mov [ebp+var_4] eax +
mov eax [ebp+var_4] +
mov ecx [eax] +
call dword ptr [ecx-10h]  +
mov eax [ebp+var_4] +
mov edx [eax+248h] +
mov eax [ebp+var_4] +
call @Forms@TCustomForm@SetMenu$qqrp15Menus@TMainMenu  +
mov eax [ebp+var_4] +
test byte ptr [eax+1Ch] 10h +
jnz loc_46817C  +
push ebp  +
call @Forms@_16651  +
pop ecx  +
pop ecx  +
pop ebp  +
retn   +
***
mov esi edx +
mov ebx eax +
cmp dword ptr [esi+4] 2 +
jnz loc_468201  +
cmp byte ptr [ebx+9Bh] 1 +
jnz loc_468201  +
test byte ptr [ebx+1Ch] 10h +
jnz loc_468201  +
mov eax ebx +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call IsIconic  +
test eax eax +
jnz loc_468201  +
push 7  +
push 0  +
push 0  +
push 0  +
push 0  +
push 0  +
mov eax ebx +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call SetWindowPos  +
mov eax [esi+8] +
push eax  +
mov eax [esi+4] +
push eax  +
push 0A2h  +
mov eax ebx +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call PostMessageA  +
cmp byte ptr [ebx+22Eh] 0 +
jz loc_46820A  +
mov eax ebx +
mov edx [eax] +
call dword ptr [edx+54h]  +
mov edx eax +
xor dl 1 +
or ecx 0FFFFFFFFh +
mov eax ebx +
call @Controls@TControl@BeginDrag$qqroi  +
pop esi  +
pop ebx  +
retn   +
mov edx esi +
mov eax ebx +
call @Controls@TControl@WMNCLButtonDown$qqrr24Messages@TWMNCHitMessage  +
pop esi  +
pop ebx  +
retn   +
***
mov esi edx +
mov esi edx +
mov ecx [eax+248h] +
test ecx ecx +
jz locret_4682B8  +
mov edx [edx+4] +
mov eax ecx +
call @Menus@TMenu@DispatchPopup$qqrui  +
retn   +
***
mov esi edx +
mov ebx eax +
mov eax [ebx+248h] +
test eax eax +
jz loc_4682E5  +
mov edx esi +
call @Menus@TMenu@ProcessMenuChar$qqrr20Messages@TWMMenuChar  +
cmp dword ptr [esi+0Ch] 0 +
jnz loc_4682EE  +
mov edx esi +
mov eax ebx +
mov ecx [eax] +
call dword ptr [ecx-10h]  +
pop esi  +
pop ebx  +
retn   +
mov edx esi +
mov eax ebx +
mov ecx [eax] +
call dword ptr [ecx-10h]  +
pop esi  +
pop ebx  +
retn   +
***
push 0  +
cmp byte ptr [eax+22Fh] 2 +
jnz loc_4683AB  +
test byte ptr [eax+1Ch] 10h +
jz locret_4683B8  +
cmp word ptr [edx+4] 0 +
setnz dl  +
call @Forms@TCustomForm@SetActive$qqro  +
retn   +
***
mov ebx eax +
test byte ptr [ebx+1Ch] 10h +
jnz loc_4683CC  +
mov [ebx+22Bh] dl +
cmp dl 1 +
jz loc_4683DC  +
mov eax ebx +
mov si 0FFD0h +
call @System@@CallDynaInst$qqrv  +
cmp dword ptr [ebx+264h] 0 +
jz loc_4683F0  +
mov eax [ebx+264h] +
mov edx [eax] +
call dword ptr [edx+10h]  +
pop esi  +
pop ebx  +
retn   +
***
retn   +
***
mov esi edx +
mov ebx edx +
xor edx edx +
mov [ebx+0Ch] edx +
test byte ptr [eax+1Ch] 10h +
jnz loc_468455  +
cmp byte ptr [eax+22Fh] 1 +
jz loc_468455  +
cmp dword ptr [eax+248h] 0 +
jz loc_468455  +
mov edx [eax+248h] +
cmp byte ptr [edx+5Ch] 0 +
jz loc_46847B  +
mov esi [ebx+8] +
xor edx edx +
call @Forms@TCustomForm@SendCancelMode$qqrp17Controls@TControl  +
movzx ecx word ptr [esi+8] +
mov edx [esi+4] +
mov eax 0B017h +
call @Controls@SendAppMessage$qqruiii  +
test eax eax +
jz loc_46847B  +
mov dword ptr [ebx+0Ch] 1 +
pop esi  +
pop ebx  +
retn   +
***
mov esi edx +
mov ebx eax +
mov eax [esi+4] +
and eax 0FFF0h +
cmp eax 0F020h +
jnz loc_4684AD  +
mov eax dword_4F17A4 +
cmp ebx [eax+44h] +
jnz loc_4684AD  +
mov edx esi +
mov eax dword_4F17A4 +
call @Forms@TApplication@WndProc$qqrr17Messages@TMessage  +
jmp loc_4684DA  +
mov eax [esi+4] +
and eax 0FFF0h +
cmp eax 0F010h +
jnz loc_4684D1  +
test byte ptr [ebx+1Ch] 10h +
jnz loc_4684D1  +
cmp byte ptr [ebx+5Bh] 0 +
jz loc_4684D1  +
cmp byte ptr [ebx+22Bh] 1 +
jnz loc_4684DA  +
mov edx esi +
mov eax ebx +
call @Controls@TWinControl@WMSysCommand$qqrr22Messages@TWMSysCommand  +
mov eax [esi+4] +
and eax 0FFF0h +
cmp eax 0F020h +
jz loc_4684F0  +
cmp eax 0F120h +
jnz loc_468507  +
test byte ptr [ebx+1Ch] 10h +
jnz loc_468507  +
cmp byte ptr [ebx+5Bh] 0 +
jz loc_468507  +
mov eax ebx +
mov si 0FFD0h +
call @System@@CallDynaInst$qqrv  +
pop esi  +
pop ebx  +
retn   +
***
mov esi edx +
mov ebx eax +
mov eax [esi+8] +
dec eax  +
jz loc_46851F  +
sub eax 2 +
jz loc_468566  +
jmp loc_468596  +
mov eax ebx +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call IsIconic  +
test eax eax +
jz loc_468539  +
mov byte ptr [ebx+22Ch] 2 +
jmp loc_46855A  +
mov eax ebx +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call IsZoomed  +
test eax eax +
jz loc_468553  +
mov byte ptr [ebx+22Ch] 3 +
jmp loc_46855A  +
mov byte ptr [ebx+22Ch] 1 +
mov edx esi +
mov eax ebx +
mov ecx [eax] +
call dword ptr [ecx-10h]  +
pop esi  +
pop ebx  +
retn   +
cmp byte ptr [ebx+22Ch] 0 +
jz loc_46859F  +
xor eax eax +
mov al [ebx+22Ch] +
mov eax dword_4E652C[eax*4] +
push eax  +
mov eax ebx +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call ShowWindow  +
mov byte ptr [ebx+22Ch] 0 +
pop esi  +
pop ebx  +
retn   +
mov edx esi +
mov eax ebx +
mov ecx [eax] +
call dword ptr [ecx-10h]  +
pop esi  +
pop ebx  +
retn   +
***
mov ebx edx +
cmp word ptr [edx+8] 0 +
jz loc_46860D  +
mov eax [edx+4] +
push eax  +
call SetFocus  +
retn   +
push 1  +
mov ecx [edx+4] +
cmp ecx 1 +
sbb ecx ecx +
neg ecx  +
mov edx [eax+220h] +
call @Controls@TWinControl@SelectNext$qqrp20Controls@TWinControloo  +
retn   +
***
mov esi edx +
mov ebx eax +
xor edx edx +
mov eax ebx +
call @Forms@TCustomForm@SendCancelMode$qqrp17Controls@TControl  +
mov edx esi +
mov eax ebx +
mov ecx [eax] +
call dword ptr [ecx-10h]  +
pop esi  +
pop ebx  +
retn   +
***
push ebx  +
mov ebx eax +
xor eax eax +
test ebx ebx +
jz loc_46867E  +
mov eax [ebp+arg_0] +
mov eax [eax-4] +
mov eax [eax+8] +
mov edx [eax+8] +
mov cl 1 +
mov eax ebx +
call sub_4558F4  +
test eax eax +
jnz loc_46867E  +
mov eax [ebp+arg_0] +
mov eax [eax-4] +
mov eax [eax+8] +
mov edx [eax+0Ch] +
xor ecx ecx +
mov eax ebx +
call sub_4558F4  +
pop ebx  +
pop ebp  +
retn   +
***
mov esi eax +
xor ebx ebx +
cmp byte ptr [esi+150h] 1 +
jnz loc_4686A0  +
cmp dword ptr [esi+158h] 0 +
jz loc_4686A0  +
mov bl 1 +
jmp loc_4686B4  +
cmp byte ptr [esi+150h] 0 +
jnz loc_4686B4  +
cmp dword ptr [esi+154h] 0 +
jz loc_4686B4  +
mov bl 1 +
mov eax ebx +
pop esi  +
pop ebx  +
retn   +
***
push ebx  +
mov ebx eax +
cmp byte ptr [ebx+150h] 1 +
jnz loc_4686D8  +
mov byte ptr [edx] 1 +
mov eax [ebx+158h] +
mov [ecx] eax +
jmp loc_4686E9  +
mov byte ptr [edx] 0 +
mov eax [ebp+arg_0] +
mov edx [ebx+154h] +
call unknown_libname_542  +
pop ebx  +
pop ebp  +
retn 4  +
***
add esp 0FFFFFFDCh +
push ebx  +
push esi  +
xor ecx ecx +
mov [ebp+var_10] ecx +
mov [ebp+var_4] edx +
mov esi eax +
xor eax eax +
push ebp  +
push offset loc_46884C  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
test byte ptr [esi+1Ch] 10h +
jz loc_468725  +
mov edx [ebp+var_4] +
mov eax esi +
mov ecx [eax] +
call dword ptr [ecx-10h]  +
jmp loc_468836  +
mov eax [ebp+var_4] +
mov eax [eax+8] +
cmp dword ptr [eax+4] 1 +
jnz loc_46878E  +
mov eax [eax+0Ch] +
call @Controls@FindControl$qqrui  +
mov ebx eax +
jmp loc_468740  +
mov ebx [ebx+30h] +
test ebx ebx +
jz loc_46874F  +
mov eax ebx +
call @Forms@_16671  +
test al al +
jz loc_46873D  +
test ebx ebx +
jz loc_468836  +
lea eax [ebp+var_10] +
push eax  +
lea ecx [ebp+var_8] +
lea edx [ebp-9] +
mov eax ebx +
call @Forms@_16672  +
lea ecx [ebp+var_24] +
xor edx edx +
xor eax eax +
call @Olectrls@TOleControl@GetVariantProp$qqri  +
lea edx [ebp+var_24] +
lea ecx [ebp+var_1C] +
mov eax ebx +
call @Controls@TControl@ClientToScreen$qqrrx14Windows@TPoint  +
lea eax [ebp+var_1C] +
call unknown_libname_383  +
mov [ebp+var_14] eax +
jmp loc_4687D9  +
mov [ebp+var_9] 1 +
push ebp  +
mov eax [esi+248h] +
call sub_468644  +
pop ecx  +
mov [ebp+var_8] eax +
cmp [ebp+var_8] 0 +
jnz loc_4687B5  +
push ebp  +
mov eax [esi+7Ch] +
call sub_468644  +
pop ecx  +
mov [ebp+var_8] eax +
lea ecx [ebp+var_24] +
xor edx edx +
xor eax eax +
call @Olectrls@TOleControl@GetVariantProp$qqri  +
lea edx [ebp+var_24] +
lea ecx [ebp+var_1C] +
mov eax esi +
call @Controls@TControl@ClientToScreen$qqrrx14Windows@TPoint  +
lea eax [ebp+var_1C] +
call unknown_libname_383  +
mov [ebp+var_14] eax +
test byte ptr [esi+228h] 8 +
jz loc_46880E  +
cmp [ebp+var_9] 1 +
jnz loc_46880E  +
mov ecx [ebp+var_14] +
mov edx 0Dh +
mov eax dword_4F17A4 +
call sub_46CD58  +
mov ecx [ebp+var_8] +
mov edx 8 +
mov eax dword_4F17A4 +
call sub_46CD58  +
jmp loc_468836  +
cmp [ebp+var_9] 1 +
jnz loc_468823  +
mov edx [ebp+var_8] +
mov eax dword_4F17A4 +
call @Forms@TApplication@HelpContext$qqri  +
jmp loc_468836  +
cmp [ebp+var_9] 0 +
jnz loc_468836  +
mov edx [ebp+var_10] +
mov eax dword_4F17A4 +
call @Forms@TApplication@HelpKeyword$qqrx17System@AnsiString  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_468853  +
lea eax [ebp+var_10] +
call unknown_libname_540  +
retn   +
jmp unknown_libname_539  +
jmp loc_468843  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
push ecx  +
mov [esp+4+var_4] edx +
mov esi eax +
test byte ptr [esi+1Ch] 2 +
jnz loc_4688BF  +
cmp byte ptr [esi+22Ah] 0 +
jz loc_4688BF  +
mov edx [esp+4+var_4] +
mov edx [edx+8] +
mov eax [esi+74h] +
lea ecx [edx+18h] +
mov ebx [eax+14h] +
test ebx ebx +
jbe loc_468888  +
mov [ecx] ebx +
mov ebx [eax+10h] +
test ebx ebx +
jbe loc_468892  +
mov [ecx+4] ebx +
lea ecx [edx+20h] +
mov ebx [eax+0Ch] +
test ebx ebx +
jbe loc_46889E  +
mov [ecx] ebx +
mov ebx [eax+8] +
test ebx ebx +
jbe loc_4688A8  +
mov [ecx+4] ebx +
lea eax [edx+20h] +
push eax  +
lea eax [edx+24h] +
push eax  +
lea ecx [edx+1Ch] +
lea eax [edx+18h] +
mov edx eax +
mov eax esi +
mov ebx [eax] +
call dword ptr [ebx+38h]  +
mov edx [esp+4+var_4] +
mov eax esi +
mov ecx [eax] +
call dword ptr [ecx-10h]  +
pop edx  +
pop esi  +
pop ebx  +
retn   +
***
push ecx  +
push ebx  +
push esi  +
mov esi edx +
mov [ebp+var_4] eax +
mov ebx [esi+8] +
mov eax [ebp+var_4] +
mov ax [eax+1Ch] +
and ax ds:word_468960 +
mov dx ds:word_468964 +
cmp dx ax +
jnz loc_468914  +
test byte ptr [ebx+18h] 1 +
jnz loc_468914  +
mov eax [ebx+10h] +
mov edx [ebp+var_4] +
cmp eax [edx+48h] +
jnz loc_468918  +
mov eax [ebx+14h] +
mov edx [ebp+var_4] +
cmp eax [edx+4Ch] +
jnz loc_468918  +
xor eax eax +
jmp loc_46891A  +
mov al 1 +
mov edx [ebp+var_4] +
mov [edx+22Ah] al +
xor eax eax +
push ebp  +
push offset loc_468953  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov edx esi +
mov eax [ebp+var_4] +
call @Controls@TWinControl@WMWindowPosChanging$qqrr24Messages@TWMWindowPosMsg  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_46895A  +
mov eax [ebp+var_4] +
mov byte ptr [eax+22Ah] 0 +
retn   +
jmp unknown_libname_539  +
jmp loc_468948  +
pop esi  +
pop ebx  +
pop ecx  +
pop ebp  +
retn   +
***
mov ebx eax +
test byte ptr [ebx+1Ch] 2 +
jnz loc_468980  +
mov eax ebx +
mov si 0FFB3h +
call @System@@CallDynaInst$qqrv  +
pop esi  +
pop ebx  +
retn   +
or byte ptr [ebx+2ECh] 20h +
pop esi  +
pop ebx  +
retn   +
***
mov ebx eax +
test byte ptr [ebx+1Ch] 2 +
jnz loc_4689A4  +
mov eax ebx +
mov si 0FFB1h +
call @System@@CallDynaInst$qqrv  +
pop esi  +
pop ebx  +
retn   +
and byte ptr [ebx+2ECh] 0DFh +
pop esi  +
pop ebx  +
retn   +
***
mov esi edx +
mov ebx eax +
push 12h  +
call GetKeyState  +
test ax ax +
jl loc_468A3E  +
mov ax [esi+4] +
sub ax 9 +
jz loc_4689D7  +
add eax 0FFFFFFE4h +
sub ax 4 +
jb loc_468A09  +
jmp loc_468A3E  +
push 11h  +
call GetKeyState  +
test ax ax +
jl loc_468A3E  +
push 1  +
push 10h  +
call GetKeyState  +
test ax ax +
setnl cl  +
mov edx [ebx+220h] +
mov eax ebx +
call @Controls@TWinControl@SelectNext$qqrp20Controls@TWinControloo  +
mov dword ptr [esi+0Ch] 1 +
pop esi  +
pop ebx  +
retn   +
mov eax [ebx+220h] +
test eax eax +
jz loc_468A47  +
push 0  +
mov dx [esi+4] +
cmp dx 27h +
jz loc_468A29  +
cmp dx 28h +
jz loc_468A29  +
xor ecx ecx +
jmp loc_468A2B  +
mov cl 1 +
mov edx [eax+30h] +
xchg eax edx +
call @Controls@TWinControl@SelectNext$qqrp20Controls@TWinControloo  +
mov dword ptr [esi+0Ch] 1 +
pop esi  +
pop ebx  +
retn   +
mov edx esi +
mov eax ebx +
call sub_47C160  +
pop esi  +
pop ebx  +
retn   +
***
add esp 0FFFFFFF8h +
mov eax [ebx+240h] +
call @Graphics@TIcon@GetHandle$qqrv  +
test eax eax +
jnz loc_468FDF  +
xor edx edx +
mov eax ebx +
call @Forms@TCustomForm@IconChanged$qqrp14System@TObject  +
pop ebx  +
retn   +
***
retn   +
***
mov eax esi +
mov ecx [eax] +
call dword ptr [ecx-10h]  +
cmp byte ptr [esi+22Fh] 1 +
jnz loc_469038  +
mov eax dword_4F17A4 +
cmp dword ptr [eax+44h] 0 +
jz loc_469038  +
mov eax dword_4F17A4 +
mov eax [eax+44h] +
cmp dword ptr [eax+254h] 0 +
jz loc_469038  +
push 0  +
push 0  +
push 234h  +
mov eax dword_4F17A4 +
mov eax [eax+44h] +
mov eax [eax+254h] +
push eax  +
call SendMessageA  +
pop esi  +
retn   +
***
call dword ptr [ecx-10h]  +
retn   +
***
push ecx  +
push esi  +
mov esi eax +
cmp byte ptr [esi+59h] 0 +
jz loc_4690A9  +
cmp dword ptr [edx+4] 0 +
jz loc_469064  +
mov eax [esi+68h] +
mov edx [edx+8] +
mov ecx [eax] +
call dword ptr [ecx+8]  +
jmp loc_4690A9  +
mov dl 1 +
mov eax ds:off_459130 +
call sub_45A574  +
mov [ebp+var_4] eax +
xor eax eax +
push ebp  +
push offset loc_4690A2  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov eax [esi+68h] +
mov edx [ebp+var_4] +
mov ecx [eax] +
call dword ptr [ecx+8]  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4690A9  +
mov eax [ebp+var_4] +
call @System@TObject@Free$qqrv  +
retn   +
jmp unknown_libname_539  +
jmp loc_469099  +
pop esi  +
pop ecx  +
pop ebp  +
retn   +
***
push edi  +
mov ebx edx +
mov edi eax +
mov edx ebx +
mov eax edi +
mov si 0FFABh +
call @System@@CallDynaInst$qqrv  +
test al al +
jz loc_4690D1  +
mov dword ptr [ebx+0Ch] 1 +
jmp loc_4690D6  +
xor eax eax +
mov [ebx+0Ch] eax +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push ecx  +
mov ebx eax +
test byte ptr [ebx+2ECh] 8 +
jz loc_4690F9  +
mov dword ptr [ebx+24Ch] 2 +
jmp loc_469179  +
mov eax ebx +
mov edx [eax] +
call dword ptr [edx+0E0h]  +
test al al +
jz loc_469179  +
cmp byte ptr [ebx+22Fh] 1 +
jnz loc_469125  +
test byte ptr [ebx+228h] 2 +
jz loc_46911F  +
mov [esp+1+var_1] 3 +
jmp loc_469129  +
mov [esp+1+var_1] 0 +
jmp loc_469129  +
mov [esp+1+var_1] 1 +
mov edx esp +
mov eax ebx +
mov si 0FFB0h +
call @System@@CallDynaInst$qqrv  +
cmp [esp+1+var_1] 0 +
jz loc_469179  +
mov eax dword_4F17A4 +
cmp ebx [eax+44h] +
jnz loc_469152  +
mov eax dword_4F17A4 +
call @Forms@TApplication@Terminate$qqrv  +
jmp loc_469179  +
cmp [esp+1+var_1] 1 +
jnz loc_469161  +
mov eax ebx +
call sub_46927C  +
jmp loc_469179  +
cmp [esp+1+var_1] 3 +
jnz loc_469172  +
mov dl 1 +
mov eax ebx +
call @Forms@TCustomForm@SetWindowState$qqr18Forms@TWindowState  +
jmp loc_469179  +
mov eax ebx +
call unknown_libname_571  +
pop edx  +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
push ecx  +
mov ebx eax +
cmp byte ptr [ebx+22Fh] 2 +
jnz loc_4691BD  +
mov [esp+1+var_1] 0 +
mov eax ebx +
call @Forms@TCustomForm@GetMDIChildCount$qqrv  +
mov esi eax +
dec esi  +
test esi esi +
jl loc_4691BD  +
inc esi  +
xor edi edi +
mov edx edi +
mov eax ebx +
call @Forms@TCustomForm@GetMDIChildren$qqri  +
mov edx [eax] +
call dword ptr [edx+0E0h]  +
test al al +
jz loc_4691DB  +
inc edi  +
dec esi  +
jnz loc_4691A4  +
mov [esp+1+var_1] 1 +
cmp word ptr [ebx+29Ah] 0 +
jz loc_4691DB  +
mov ecx esp +
mov edx ebx +
mov eax [ebx+29Ch] +
call dword ptr [ebx+298h]  +
mov al [esp+1+var_1] +
pop edx  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
add esp 0FFFFFFF8h +
push ebx  +
push esi  +
push edi  +
mov [ebp+var_5+1] eax +
xor eax eax +
push ebp  +
push offset loc_469250  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov byte ptr [ebp+var_5] 0 +
mov eax [ebp+var_5+1] +
mov edx [eax] +
call dword ptr [edx+0E0h]  +
test al al +
jz loc_469224  +
mov byte ptr [ebp+var_5] 1 +
lea edx [ebp+var_5] +
mov eax [ebp+var_5+1] +
mov si 0FFB0h +
call @System@@CallDynaInst$qqrv  +
mov al byte ptr [ebp+var_5] +
sub al 1 +
jb loc_469231  +
dec al  +
jz loc_46923E  +
jmp loc_469246  +
mov eax [ebp+var_5+1] +
xor edx edx +
mov [eax+24Ch] edx +
jmp loc_469246  +
mov eax [ebp+var_5+1] +
call unknown_libname_571  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
jmp loc_469272  +
jmp @System@@HandleAnyException$qqrv  +
mov eax [ebp-4] +
xor edx edx +
mov [eax+24Ch] edx +
mov edx [ebp-4] +
mov eax dword_4F17A4 +
call @TApplication@HandleException$qqrp7TObject  +
call @@DoneExcept$qqrv  +
pop edi  +
pop esi  +
pop ebx  +
pop ecx  +
pop ecx  +
pop ebp  +
retn   +
***
xor edx edx +
mov dl 1 +
mov eax ebx +
call @Forms@TCustomForm@SetVisible$qqro  +
mov eax ebx +
call @Controls@TControl@BringToFront$qqrv  +
pop ebx  +
retn   +
***
push 0  +
push ebx  +
mov ebx eax +
xor eax eax +
push ebp  +
push offset loc_46930A  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
cmp byte ptr [ebx+22Eh] 0 +
jnz loc_4692F4  +
cmp byte ptr [ebx+57h] 0 +
jz loc_4692CC  +
mov eax ebx +
mov edx [eax] +
call dword ptr [edx+50h]  +
test al al +
jnz loc_4692ED  +
lea edx [ebp+var_4] +
mov eax off_4EA6FC +
call @System@LoadResString$qqrp20System@TResStringRec  +
mov ecx [ebp+var_4] +
mov dl 1 +
mov eax ds:off_49A578 +
call sub_4AC17C  +
call @System@@RaiseExcept$qqrv  +
mov eax ebx +
call @Forms@TCustomForm@SetWindowFocus$qqrv  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_469311  +
lea eax [ebp+var_4] +
call unknown_libname_540  +
retn   +
jmp unknown_libname_539  +
jmp loc_469301  +
pop ebx  +
pop ecx  +
pop ebp  +
retn   +
***
push 0  +
push 0  +
push 0B021h  +
mov eax ebx +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call PostMessageA  +
pop ebx  +
retn   +
***
add esp 0FFFFFFE0h +
push ecx  +
push ebx  +
push esi  +
push edi  +
mov [ebp+var_4] eax +
mov eax [ebp+var_4] +
cmp byte ptr [eax+1A6h] 0 +
jz loc_46963C  +
mov eax [ebp+var_4] +
call @Controls@TWinControl@GetControlCount$qqrv  +
mov esi eax +
dec esi  +
test esi esi +
jl loc_46963C  +
inc esi  +
xor edi edi +
mov edx edi +
mov eax [ebp+var_4] +
call @Controls@TWinControl@GetControl$qqri  +
mov ebx eax +
test byte ptr [ebx+51h] 80h +
jz loc_46961B  +
cmp byte ptr [ebx+57h] 0 +
jz loc_46961B  +
mov eax ebx +
mov edx [eax] +
call dword ptr [edx+78h]  +
mov eax ebx +
mov edx ds:off_472320 +
call @System@@IsClass$qqrp14System@TObjectp17System@TMetaClass  +
test al al +
jz loc_469638  +
mov eax [ebp+arg_0] +
push eax  +
mov eax ebx +
call @Forms@_16697  +
pop ecx  +
inc edi  +
dec esi  +
jnz loc_4695FC  +
pop edi  +
pop esi  +
pop ebx  +
pop ecx  +
pop ebp  +
retn   +
***
push ebx  +
push esi  +
push edi  +
mov ebx eax +
test byte ptr [ebx+1Ch] 10h +
jnz loc_4696A6  +
cmp byte ptr [ebx+1A6h] 0 +
jz loc_4696A6  +
mov eax ebx +
mov edx [eax] +
call dword ptr [edx+78h]  +
mov esi [ebx+248h] +
test esi esi +
jz loc_46969D  +
mov eax [esi+34h] +
call @Menus@TMenuItem@GetCount$qqrv  +
dec eax  +
test eax eax +
jl loc_46969D  +
inc eax  +
mov esi eax +
xor edi edi +
mov eax [ebx+248h] +
mov eax [eax+34h] +
mov edx edi +
call @Menus@TMenuItem@GetItem$qqri  +
cmp byte ptr [eax+3Eh] 0 +
jz loc_469699  +
mov edx [eax] +
call dword ptr [edx+40h]  +
inc edi  +
dec esi  +
jnz loc_46967E  +
push ebp  +
mov eax ebx +
call @Forms@_16697  +
pop ecx  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
cmp dword ptr [eax+30h] 0 +
jnz loc_4696BF  +
mov edx eax +
mov eax dword_4F17A8 +
call @Forms@TScreen@AlignForm$qqrp17Forms@TCustomForm  +
retn   +
call @Controls@TControl@RequestAlign$qqrv  +
retn   +
***
mov esi edx +
mov ebx eax +
mov edx esi +
mov eax ebx +
call @Controls@TWinControl@WMWinIniChange$qqrr17Messages@TMessage  +
cmp dword ptr [esi+4] 2Fh +
jnz loc_4696E8  +
mov eax ebx +
mov si 0FFD0h +
call @System@@CallDynaInst$qqrv  +
pop esi  +
pop ebx  +
retn   +
***
push ebx  +
push esi  +
mov ebx eax +
test ebx ebx +
jz loc_46970F  +
mov eax [ebp+arg_0] +
mov edx [eax-4] +
mov edx [edx+8] +
mov eax ebx +
mov si 0FFF3h +
call @System@@CallDynaInst$qqrv  +
test al al +
jnz loc_469713  +
xor eax eax +
jmp loc_469715  +
mov al 1 +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
push ecx  +
push ebx  +
push esi  +
push edi  +
mov [ebp+var_4] eax +
mov eax [ebp+var_4] +
cmp byte ptr [eax+1A6h] 0 +
jz loc_46978F  +
mov eax [ebp+var_4] +
call @Controls@TWinControl@GetControlCount$qqrv  +
mov esi eax +
dec esi  +
test esi esi +
jl loc_46978F  +
inc esi  +
xor edi edi +
mov edx edi +
mov eax [ebp+var_4] +
call @Controls@TWinControl@GetControl$qqri  +
mov ebx eax +
cmp byte ptr [ebx+57h] 0 +
jz loc_469766  +
mov eax [ebp+arg_0] +
push eax  +
mov eax ebx +
call @Forms@_16702  +
pop ecx  +
test al al +
jnz loc_469787  +
mov eax ebx +
mov edx ds:off_472320 +
call @System@@IsClass$qqrp14System@TObjectp17System@TMetaClass  +
test al al +
jz loc_46978B  +
mov eax [ebp+arg_0] +
push eax  +
mov eax ebx +
call @Forms@_16703  +
pop ecx  +
test al al +
jz loc_46978B  +
mov al 1 +
jmp loc_469791  +
inc edi  +
dec esi  +
jnz loc_469744  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ecx  +
pop ebp  +
retn   +
***
push ecx  +
push ebx  +
mov [ebp+var_4] edx +
mov ebx eax +
test byte ptr [ebx+1Ch] 10h +
jnz loc_4697E6  +
cmp byte ptr [ebx+1A6h] 0 +
jz loc_4697E6  +
push ebp  +
mov eax [ebx+220h] +
call @Forms@_16702  +
pop ecx  +
test al al +
jnz loc_4697DC  +
push ebp  +
mov eax ebx +
call @Forms@_16702  +
pop ecx  +
test al al +
jnz loc_4697DC  +
push ebp  +
mov eax ebx +
call @Forms@_16703  +
pop ecx  +
test al al +
jz loc_4697E6  +
mov eax [ebp+var_4] +
mov dword ptr [eax+0Ch] 1 +
pop ebx  +
pop ecx  +
pop ebp  +
retn   +
***
push ebx  +
push esi  +
mov ebx eax +
test ebx ebx +
jz loc_46980F  +
mov eax [ebp+arg_0] +
mov edx [eax-4] +
mov edx [edx+8] +
mov eax ebx +
mov si 0FFF0h +
call @System@@CallDynaInst$qqrv  +
test al al +
jnz loc_469813  +
xor eax eax +
jmp loc_469815  +
mov al 1 +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
push ecx  +
push ebx  +
push esi  +
push edi  +
mov [ebp+var_4] eax +
mov eax [ebp+var_4] +
cmp byte ptr [eax+1A6h] 0 +
jz loc_46988F  +
mov eax [ebp+var_4] +
call @Controls@TWinControl@GetControlCount$qqrv  +
mov esi eax +
dec esi  +
test esi esi +
jl loc_46988F  +
inc esi  +
xor edi edi +
mov edx edi +
mov eax [ebp+var_4] +
call @Controls@TWinControl@GetControl$qqri  +
mov ebx eax +
cmp byte ptr [ebx+57h] 0 +
jz loc_469866  +
mov eax [ebp+arg_0] +
push eax  +
mov eax ebx +
call @Forms@_16705  +
pop ecx  +
test al al +
jnz loc_469887  +
mov eax ebx +
mov edx ds:off_472320 +
call @System@@IsClass$qqrp14System@TObjectp17System@TMetaClass  +
test al al +
jz loc_46988B  +
mov eax [ebp+arg_0] +
push eax  +
mov eax ebx +
call @Forms@_16703_0  +
pop ecx  +
test al al +
jz loc_46988B  +
mov al 1 +
jmp loc_469891  +
inc edi  +
dec esi  +
jnz loc_469844  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ecx  +
pop ebp  +
retn   +
***
push ecx  +
push ebx  +
mov [ebp+var_4] edx +
mov ebx eax +
test byte ptr [ebx+1Ch] 10h +
jnz loc_4698E6  +
cmp byte ptr [ebx+1A6h] 0 +
jz loc_4698E6  +
push ebp  +
mov eax [ebx+220h] +
call @Forms@_16705  +
pop ecx  +
test al al +
jnz loc_4698DC  +
push ebp  +
mov eax ebx +
call @Forms@_16705  +
pop ecx  +
test al al +
jnz loc_4698DC  +
push ebp  +
mov eax ebx +
call @Forms@_16703_0  +
pop ecx  +
test al al +
jz loc_4698E6  +
mov eax [ebp+var_4] +
mov dword ptr [eax+0Ch] 1 +
pop ebx  +
pop ecx  +
pop ebp  +
retn   +
***
push ebx  +
push esi  +
mov eax [ebp+arg_0] +
mov eax [eax-4] +
mov eax [eax+2E8h] +
test eax eax +
jz loc_469939  +
mov edx [ebp+arg_0] +
mov ebx [eax+8] +
dec ebx  +
test ebx ebx +
jl loc_469939  +
inc ebx  +
xor esi esi +
mov eax [ebp+arg_0] +
mov eax [eax-4] +
mov eax [eax+2E8h] +
mov edx esi +
call @Classes@TList@Get$qqri  +
mov edx [ebp+arg_0] +
mov edx [edx-8] +
call @Actnlist@TCustomActionList@IsShortCut$qqrr15Messages@TWMKey  +
test al al +
jz loc_469935  +
mov al 1 +
jmp loc_46993B  +
inc esi  +
dec ebx  +
jnz loc_46990F  +
xor eax eax +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
add esp 0FFFFFFF4h +
push ebx  +
push edi  +
mov esi edx +
mov ebx eax +
mov edi [ebx+224h] +
test edi edi +
jz loc_469A21  +
mov eax [esi+8] +
push eax  +
mov ecx [esi+4] +
mov edx 0B043h +
mov eax edi +
call @Controls@TControl@Perform$qqruiii  +
mov [esi+0Ch] eax +
jmp loc_469A2A  +
mov edx esi +
mov eax ebx +
call @Controls@TControl@MouseWheelHandler$qqrr17Messages@TMessage  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov edx eax +
mov eax dword_4F17A4 +
call @TApplication@HandleException$qqrp7TObject  +
mov al 1 +
retn   +
***
mov ebx eax +
test byte ptr [ebx+1Ch] 10h +
jnz loc_469B14  +
cmp dword_4E64B8 0 +
jz loc_469B14  +
mov eax ebx +
call @Controls@TWinControl@HandleAllocated$qqrv  +
test al al +
jz loc_469B14  +
push 0FFFFFFECh  +
mov eax ebx +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call GetWindowLongA  +
mov esi eax +
cmp byte ptr [ebx+2E0h] 0 +
jnz loc_469A8D  +
cmp byte ptr [ebx+2E2h] 0 +
jz loc_469AE8  +
test esi 80000h +
jnz loc_469AAB  +
or esi 80000h +
push esi  +
push 0FFFFFFECh  +
mov eax ebx +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call SetWindowLongA  +
xor eax eax +
mov al [ebx+2E0h] +
mov eax dword_4E6548[eax*4] +
xor edx edx +
mov dl [ebx+2E2h] +
or eax dword_4E6550[edx*4] +
push eax  +
mov al [ebx+2E1h] +
push eax  +
mov eax [ebx+2E4h] +
push eax  +
mov eax ebx +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call dword_4E64B8  +
jmp loc_469B14  +
and esi 0FFF7FFFFh +
push esi  +
push 0FFFFFFECh  +
mov eax ebx +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call SetWindowLongA  +
push 485h  +
push 0  +
push 0  +
mov eax ebx +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call RedrawWindow  +
pop esi  +
pop ebx  +
retn   +
***
cmp dl [eax+2E0h] +
cmp dl [eax+2E1h] +
cmp edx [eax+2E4h] +
cmp dl [eax+2E2h] +
test byte ptr [eax+1Ch] 10h +
jnz locret_469B90  +
cmp dword_4E64B8 0 +
jz locret_469B90  +
cmp byte ptr [eax+2E0h] 0 +
jnz loc_469B89  +
cmp byte ptr [eax+2E2h] 0 +
jz locret_469B90  +
or dword ptr [edx+8] 80000h +
retn   +
***
push ecx  +
push ebx  +
push esi  +
test dl dl +
jz loc_469BA6  +
add esp 0FFFFFFF0h +
call unknown_libname_535  +
mov [ebp+var_1] dl +
mov ebx eax +
push 0  +
xor edx edx +
mov eax ebx +
mov esi [eax] +
call dword ptr [esi+0DCh]  +
xor edx edx +
mov eax ebx +
call @Forms@TScrollingWinControl@SetAutoScroll$qqro  +
mov dl 5 +
mov eax ebx +
call @Forms@TCustomForm@SetBorderStyle$qqr22Forms@TFormBorderStyle  +
mov dl 1 +
mov eax ebx +
call @Controls@TWinControl@SetDockSite$qqro  +
mov dl 3 +
mov eax ebx +
call @Forms@TCustomForm@SetFormStyle$qqr16Forms@TFormStyle  +
mov eax ebx +
cmp [ebp+var_1] 0 +
jz loc_469BF4  +
call sub_4BABC8  +
pop large dword ptr fs:0  +
add esp 0Ch +
mov eax ebx +
pop esi  +
pop ebx  +
pop ecx  +
pop ebp  +
retn   +
***
add esp 0FFFFFFF4h +
mov eax ebx +
call nullsub_47  +
mov eax ebx +
call @Controls@TWinControl@GetDockClientCount$qqrv  +
test eax eax +
jnz loc_469CFC  +
mov eax ebx +
call unknown_libname_571  +
pop ebx  +
retn   +
***
push edi  +
add esp 0FFFFFFF8h +
push ebx  +
push esi  +
push edi  +
mov esi [ebp+arg_4] +
lea edi [ebp+var_8] +
movs   +
movs   +
mov ebx eax +
mov eax ebx +
call @Controls@TWinControl@GetDockClientCount$qqrv  +
test eax eax +
mov eax [ebp+arg_0] +
setz byte ptr [eax]  +
pop edi  +
pop esi  +
pop ebx  +
pop ecx  +
pop ecx  +
pop ebp  +
retn 8  +
***
mov esi edx +
mov ebx eax +
mov edx esi +
mov eax ebx +
call @Controls@TWinControl@WMNCHitTest$qqrr21Messages@TWMNCHitTest  +
test byte ptr [ebx+1Ch] 10h +
jnz loc_469D9A  +
cmp dword ptr [esi+0Ch] 1 +
jnz loc_469D9A  +
mov dword ptr [esi+0Ch] 2 +
pop esi  +
pop ebx  +
retn   +
***
mov esi edx +
mov ebx eax +
cmp dword ptr [esi+4] 2 +
jnz loc_469E29  +
cmp byte ptr [ebx+9Bh] 1 +
jz loc_469E29  +
test byte ptr [ebx+1Ch] 10h +
jnz loc_469E29  +
mov eax ebx +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call IsIconic  +
test eax eax +
jnz loc_469E29  +
mov eax ebx +
call @Controls@TWinControl@GetDockClientCount$qqrv  +
test eax eax +
jle loc_469E29  +
push 7  +
push 0  +
push 0  +
push 0  +
push 0  +
push 0  +
mov eax ebx +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call SetWindowPos  +
mov eax [esi+8] +
push eax  +
mov eax [esi+4] +
push eax  +
push 0A2h  +
mov eax ebx +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call PostMessageA  +
cmp byte ptr [ebx+22Eh] 0 +
jz loc_469E32  +
xor edx edx +
mov eax ebx +
call @Controls@TWinControl@GetDockClients$qqri  +
or ecx 0FFFFFFFFh +
mov dl 1 +
call @Controls@TControl@BeginDrag$qqroi  +
pop esi  +
pop ebx  +
retn   +
mov edx esi +
mov eax ebx +
call @Forms@TCustomForm@WMNCLButtonDown$qqrr24Messages@TWMNCHitMessage  +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
add esp 0FFFFFFF0h +
mov ebx edx +
mov esi eax +
mov edx ebx +
mov eax esi +
call unknown_libname_288  +
cmp dword ptr [ebx+8] 0 +
jnz loc_469E87  +
mov eax [ebx+4] +
push eax  +
xor ecx ecx +
mov edx 0B039h +
mov eax esi +
call @Controls@TControl@Perform$qqruiii  +
mov edi [ebx+4] +
cmp esi [edi+0A0h] +
jnz loc_469E87  +
mov edx esp +
mov eax edi +
call @Controls@TControl@GetBoundsRect$qqrv  +
mov ecx esp +
mov eax edi +
or edx 0FFFFFFFFh +
mov si 0FFCCh +
call @System@@CallDynaInst$qqrv  +
add esp 10h +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push 0  +
push ebx  +
push esi  +
mov ebx edx +
mov esi eax +
xor eax eax +
push ebp  +
push offset loc_469F56  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov edx ebx +
mov eax esi +
mov ecx [eax] +
call dword ptr [ecx-10h]  +
mov eax [ebx+8] +
mov eax [eax] +
sub eax 0Ch +
jz loc_469ED2  +
sub eax 0AFFFh +
jnz loc_469F40  +
mov eax [ebx+4] +
mov dl [eax+57h] +
mov eax esi +
call @Forms@TCustomForm@SetVisible$qqro  +
jmp loc_469F40  +
mov eax [ebx+4] +
call @Controls@TControl@GetTextLen$qqrv  +
mov ecx eax +
inc ecx  +
lea eax [ebp+var_4] +
xor edx edx +
call @@LStrFromPCharLen$qqrr10AnsiStringpci  +
mov eax [ebp+var_4] +
call sub_4BB610  +
push eax  +
mov eax [ebp+var_4] +
call unknown_libname_550  +
mov edx eax +
mov eax [ebx+4] +
pop ecx  +
call unknown_libname_272  +
mov eax [ebp+var_4] +
call sub_4BB610  +
test eax eax +
jle loc_469F36  +
mov ebx 1 +
mov edx [ebp+var_4] +
mov dl [edx+ebx-1] +
sub dl 0Ah +
jz loc_469F25  +
sub dl 3 +
jnz loc_469F32  +
mov edx ebx +
dec edx  +
lea eax [ebp+var_4] +
call @System@@LStrSetLength$qqrv  +
jmp loc_469F36  +
inc ebx  +
dec eax  +
jnz loc_469F14  +
mov edx [ebp+var_4] +
mov eax esi +
call @Controls@TControl@SetText$qqrx17System@AnsiString  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_469F5D  +
lea eax [ebp+var_4] +
call unknown_libname_540  +
retn   +
jmp unknown_libname_539  +
jmp loc_469F4D  +
pop esi  +
pop ebx  +
pop ecx  +
pop ebp  +
retn   +
***
mov edx ebx +
call @Controls@TWinControl@CMUnDockClient$qqrr24Controls@TCMUnDockClient  +
mov eax [ebx+8] +
xor edx edx +
call @Controls@TControl@SetAlign$qqr15Controls@TAlign  +
pop ebx  +
retn   +
***
push edi  +
mov ebx eax +
mov edx esp +
mov eax ebx +
call @Forms@TMonitor@GetBoundsRect$qqrv  +
mov eax [esp+10h+var_10] +
add esp 10h +
pop ebx  +
retn   +
***
mov ebx eax +
mov ebx eax +
mov ebx eax +
mov edx esp +
mov eax ebx +
call @Forms@TMonitor@GetBoundsRect$qqrv  +
mov eax [esp+10h+var_8] +
sub eax [esp+10h+var_10] +
add esp 10h +
pop ebx  +
retn   +
***
push edi  +
add esp 0FFFFFFD8h +
mov ebx edx +
mov [esp+28h+var_28] 28h +
push esp  +
mov eax [eax+4] +
push eax  +
mov eax off_4EA800 +
mov eax [eax] +
call eax  +
mov edi ebx +
lea esi [esp+4] +
movs   +
movs   +
movs   +
movs   +
add esp 28h +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push ecx  +
push ebx  +
push esi  +
test dl dl +
jz loc_46A062  +
add esp 0FFFFFFF0h +
call unknown_libname_535  +
mov [ebp+var_1] dl +
mov ebx eax +
xor edx edx +
mov eax ebx +
call sub_4A4B20  +
mov eax off_4EA818 +
mov [eax+4] ebx +
mov dword ptr [eax] offset loc_46A3F4 +
mov eax off_4EA81C +
mov [eax+4] ebx +
mov dword ptr [eax] offset loc_46A400 +
mov eax ebx +
call @Forms@TScreen@CreateCursors$qqrv  +
push 0  +
call GetKeyboardLayout  +
mov [ebx+3Ch] eax +
mov dl 1 +
mov eax ds:off_49A5D8 +
call @System@TObject@$bctr$qqrv  +
mov [ebx+4Ch] eax +
mov dl 1 +
mov eax ds:off_49A5D8 +
call @System@TObject@$bctr$qqrv  +
mov [ebx+50h] eax +
mov dl 1 +
mov eax ds:off_49A5D8 +
call @System@TObject@$bctr$qqrv  +
mov [ebx+54h] eax +
mov dl 1 +
mov eax ds:off_49A5D8 +
call @System@TObject@$bctr$qqrv  +
mov [ebx+58h] eax +
mov dl 1 +
mov eax ds:off_49A5D8 +
call @System@TObject@$bctr$qqrv  +
mov [ebx+7Ch] eax +
push 0  +
call GetDC  +
mov esi eax +
push 5Ah  +
push esi  +
call GetDeviceCaps  +
mov [ebx+40h] eax +
push esi  +
push 0  +
call ReleaseDC  +
mov eax [ebx+58h] +
push eax  +
mov eax offset @Forms@_16602 +
push eax  +
push 0  +
push 0  +
mov eax off_4EA804 +
mov eax [eax] +
call eax  +
mov dl 1 +
mov eax ds:off_459130 +
call sub_45A574  +
mov [ebx+84h] eax +
mov dl 1 +
mov eax ds:off_459130 +
call sub_45A574  +
mov [ebx+88h] eax +
mov dl 1 +
mov eax ds:off_459130 +
call sub_45A574  +
mov [ebx+80h] eax +
mov eax ebx +
call @Forms@TScreen@GetMetricSettings$qqrv  +
mov eax [ebx+84h] +
mov [eax+0Ch] ebx +
mov dword ptr [eax+8] offset @Forms@TScreen@IconFontChanged$qqrp14System@TObject +
mov eax [ebx+88h] +
mov [eax+0Ch] ebx +
mov dword ptr [eax+8] offset @Forms@TScreen@IconFontChanged$qqrp14System@TObject +
mov eax [ebx+80h] +
mov [eax+0Ch] ebx +
mov dword ptr [eax+8] offset @Forms@TScreen@IconFontChanged$qqrp14System@TObject +
mov eax ebx +
cmp [ebp+var_1] 0 +
jz loc_46A19F  +
call sub_4BABC8  +
pop large dword ptr fs:0  +
add esp 0Ch +
mov eax ebx +
pop esi  +
pop ebx  +
pop ecx  +
pop ebp  +
retn   +
***
push edi  +
push ebp  +
call unknown_libname_536  +
mov ebx edx +
mov ebp eax +
mov eax [ebp+80h] +
call @System@TObject@Free$qqrv  +
mov eax [ebp+88h] +
call @System@TObject@Free$qqrv  +
mov eax [ebp+84h] +
call @System@TObject@Free$qqrv  +
mov eax [ebp+54h] +
call @System@TObject@Free$qqrv  +
mov eax [ebp+50h] +
call @System@TObject@Free$qqrv  +
mov eax [ebp+4Ch] +
call @System@TObject@Free$qqrv  +
mov eax [ebp+30h] +
call @System@TObject@Free$qqrv  +
mov eax [ebp+34h] +
call @System@TObject@Free$qqrv  +
mov eax [ebp+7Ch] +
call @System@TObject@Free$qqrv  +
mov eax [ebp+58h] +
test eax eax +
jz loc_46A22B  +
mov esi [eax+8] +
dec esi  +
test esi esi +
jl loc_46A22B  +
inc esi  +
xor edi edi +
mov eax [ebp+58h] +
mov edx edi +
call @Classes@TList@Get$qqri  +
call @System@TObject@Free$qqrv  +
inc edi  +
dec esi  +
jnz loc_46A218  +
mov eax [ebp+58h] +
call @System@TObject@Free$qqrv  +
mov eax ebp +
call @Forms@TScreen@DestroyCursors$qqrv  +
mov eax off_4EA818 +
xor edx edx +
mov [eax] edx +
mov [eax+4] edx +
mov eax off_4EA81C +
xor edx edx +
mov [eax] edx +
mov [eax+4] edx +
mov edx ebx +
and dl 0FCh +
mov eax ebp +
call sub_4A4B6C  +
test bl bl +
jle loc_46A269  +
mov eax ebp +
call @System@@ClassDestroy$qqrp14System@TObject  +
pop ebp  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov eax [eax] +
mov eax [eax] +
mov eax [eax] +
mov eax [eax] +
mov eax [eax] +
mov eax [eax] +
mov esi edx +
mov ebx eax +
mov edx esi +
mov eax [ebx+58h] +
call @Classes@TList@Get$qqri  +
pop esi  +
pop ebx  +
retn   +
***
mov edx [eax+58h] +
mov edx [edx+8] +
test edx edx +
jnz loc_46A2E2  +
push 50h  +
mov eax off_4EA7F4 +
mov eax [eax] +
call eax  +
retn   +
mov eax edx +
retn   +
***
mov esi edx +
mov ebx eax +
mov edx esi +
mov eax [ebx+4Ch] +
call @Classes@TList@Get$qqri  +
pop esi  +
pop ebx  +
retn   +
***
mov eax [eax+4Ch] +
mov eax [eax+8] +
retn   +
***
mov esi edx +
mov ebx eax +
mov edx esi +
mov eax [ebx+50h] +
call @Classes@TList@Get$qqri  +
pop esi  +
pop ebx  +
retn   +
***
mov eax [eax+50h] +
mov eax [eax+8] +
retn   +
***
mov eax [ebx+68h] +
cmp eax [ebx+74h] +
jz loc_46A346  +
mov [ebx+74h] eax +
cmp word ptr [ebx+9Ah] 0 +
jz loc_46A346  +
mov edx ebx +
mov eax [ebx+9Ch] +
call dword ptr [ebx+98h]  +
mov eax [ebx+64h] +
cmp eax [ebx+70h] +
jz loc_46A369  +
mov [ebx+70h] eax +
cmp word ptr [ebx+92h] 0 +
jz loc_46A369  +
mov edx ebx +
mov eax [ebx+94h] +
call dword ptr [ebx+90h]  +
pop ebx  +
retn   +
***
mov esi edx +
mov esi edx +
mov ebx eax +
mov edx esi +
mov eax [ebx+50h] +
call @Classes@TList@Remove$qqrpv  +
mov edx esi +
mov eax [ebx+4Ch] +
call @Classes@TList@Remove$qqrpv  +
mov eax dword_4F17A4 +
call @Forms@TApplication@UpdateVisible$qqrv  +
mov eax [ebx+50h] +
cmp dword ptr [eax+8] 0 +
jnz loc_46A3EF  +
mov eax dword_4F17A4 +
cmp dword ptr [eax+84h] 0 +
jz loc_46A3EF  +
mov eax dword_4F17A4 +
mov eax [eax+84h] +
call sub_47E100  +
pop esi  +
pop ebx  +
retn   +
***
mov eax [eax+54h] +
call @Classes@TList@Add$qqrpv  +
retn   +
***
mov eax [eax+54h] +
call @Classes@TList@Remove$qqrpv  +
retn   +
***
push edi  +
push ebp  +
mov ebp eax +
push 7F00h  +
push 0  +
call LoadCursorA  +
mov [ebp+60h] eax +
mov ebx 0FFFFFFEAh +
mov esi offset unk_4E6558 +
cmp ebx 0FFFFFFEFh +
jl loc_46A435  +
cmp ebx 0FFFFFFF4h +
jle loc_46A43A  +
cmp ebx 0FFFFFFEBh +
jnz loc_46A442  +
mov edi hInstance +
jmp loc_46A444  +
xor edi edi +
mov eax [esi] +
push eax  +
push edi  +
call LoadCursorA  +
mov ecx eax +
mov edx ebx +
mov eax ebp +
call @Forms@TScreen@InsertCursor$qqriui  +
inc ebx  +
add esi 4 +
cmp ebx 0FFFFFFFFh +
jnz loc_46A42B  +
pop ebp  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
push edi  +
push edi  +
mov edi ecx +
mov esi edx +
mov ebx eax +
mov eax 0Ch +
call sub_4B97C0  +
mov edx [ebx+5Ch] +
mov [eax] edx +
mov [eax+4] esi +
mov [eax+8] edi +
mov [ebx+5Ch] eax +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
add esp 0FFFFFDA0h +
push ebx  +
xor edx edx +
mov [ebp+var_260] edx +
mov [ebp+var_4] eax +
xor eax eax +
push ebp  +
push offset loc_46A6DF  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov eax [ebp+var_4] +
cmp dword ptr [eax+34h] 0 +
jnz loc_46A6C0  +
mov dl 1 +
mov eax ds:off_49ABC4 +
call @System@TObject@$bctr$qqrv  +
mov edx [ebp+var_4] +
mov [edx+34h] eax +
mov eax [ebp+var_4] +
add eax 38h +
call unknown_libname_540  +
lea eax [ebp+List] +
push eax  +
push 40h  +
call GetKeyboardLayoutList  +
dec eax  +
test eax eax +
jl loc_46A6AF  +
inc eax  +
mov [ebp+var_10] eax +
lea eax [ebp+List] +
mov [ebp+var_14] eax +
mov eax [ebp+var_14] +
mov eax [eax] +
call unknown_libname_296  +
test al al +
jz loc_46A6A2  +
lea eax [ebp+hKey] +
push eax  +
push 20019h  +
push 0  +
push 0  +
mov eax [ebp+var_14] +
mov eax [eax] +
mov [ebp+var_25C] eax +
mov [ebp+var_258] 0 +
lea ecx [ebp+var_25C] +
mov edx offset aSystemCurrentc +
lea eax [ebp+var_254] +
call sub_4A987C  +
push eax  +
push 80000002h  +
call RegOpenKeyExA  +
test eax eax +
jnz loc_46A6A2  +
xor eax eax +
push ebp  +
push offset loc_46A69B  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov [ebp+cbData] 100h +
lea eax [ebp+cbData] +
push eax  +
lea eax [ebp+Data] +
push eax  +
push 0  +
push 0  +
push offset ValueName  +
mov eax [ebp+hKey] +
push eax  +
call RegQueryValueExA  +
test eax eax +
jnz loc_46A684  +
lea eax [ebp+var_260] +
lea edx [ebp+Data] +
mov ecx 100h +
call sub_4BB5C0  +
mov edx [ebp+var_260] +
mov eax [ebp+var_14] +
mov ecx [eax] +
mov eax [ebp+var_4] +
mov eax [eax+34h] +
mov ebx [eax] +
call dword ptr [ebx+3Ch]  +
mov eax [ebp+var_14] +
mov eax [eax] +
mov edx [ebp+var_4] +
cmp eax [edx+3Ch] +
jnz loc_46A684  +
mov eax [ebp+var_4] +
add eax 38h +
lea edx [ebp+Data] +
mov ecx 100h +
call sub_4BB5C0  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_46A6A2  +
mov eax [ebp+hKey] +
push eax  +
call RegCloseKey  +
retn   +
jmp unknown_libname_539  +
jmp loc_46A691  +
add [ebp+var_14] 4 +
dec [ebp+var_10]  +
jnz loc_46A5A5  +
mov eax [ebp+var_4] +
mov eax [eax+34h] +
mov byte ptr [eax+1Dh] 0 +
mov dl 1 +
call sub_49F104  +
mov eax [ebp+var_4] +
mov ebx [eax+34h] +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_46A6E6  +
lea eax [ebp+var_260] +
call unknown_libname_540  +
retn   +
jmp unknown_libname_539  +
jmp loc_46A6D3  +
mov eax ebx +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
mov esi edx +
mov ebx eax +
mov eax ebx +
call @Forms@TScreen@GetImes$qqrv  +
mov eax esi +
mov edx [ebx+38h] +
call unknown_libname_542  +
pop esi  +
pop ebx  +
retn   +
***
mov esi edx +
mov ebx eax +
mov dx 0B035h +
mov eax dword_4F17A4 +
call sub_46CFB4  +
cmp esi [ebx+80h] +
jnz loc_46A79B  +
cmp dword_4F17A4 0 +
jz loc_46A79B  +
mov eax dword_4F17A4 +
cmp byte ptr [eax+88h] 0 +
jz loc_46A79B  +
xor edx edx +
mov eax dword_4F17A4 +
call @Forms@TApplication@SetShowHint$qqro  +
mov dl 1 +
mov eax dword_4F17A4 +
call @Forms@TApplication@SetShowHint$qqro  +
pop esi  +
pop ebx  +
retn   +
***
mov esi edx +
mov ebx eax +
mov edx esi +
mov eax [ebx+54h] +
call @Classes@TList@Get$qqri  +
pop esi  +
pop ebx  +
retn   +
***
mov eax [eax+54h] +
mov eax [eax+8] +
retn   +
***
xor ecx ecx +
cmp edx 0FFFFFFFFh +
jz loc_46A7DF  +
mov ecx [eax+5Ch] +
jmp loc_46A7CA  +
mov ecx [ecx] +
test ecx ecx +
jz loc_46A7D3  +
cmp edx [ecx+4] +
jnz loc_46A7C8  +
test ecx ecx +
jnz loc_46A7DC  +
mov ecx [eax+60h] +
jmp loc_46A7DF  +
mov ecx [ecx+8] +
mov eax ecx +
retn   +
***
push edi  +
push ebp  +
add esp 0FFFFFFF8h +
mov esi edx +
mov ebx eax +
cmp si [ebx+44h] +
jz loc_46A868  +
mov [ebx+44h] si +
test si si +
jnz loc_46A858  +
push esp  +
call GetCursorPos  +
push [esp+8+Point.y]  +
push [esp+0Ch+Point.x]  +
call WindowFromPoint  +
mov edi eax +
test edi edi +
jz loc_46A858  +
push 0  +
push edi  +
call GetWindowThreadProcessId  +
mov ebp eax +
call GetCurrentThreadId  +
cmp ebp eax +
jnz loc_46A858  +
mov eax esp +
call unknown_libname_383  +
push eax  +
push 0  +
push 84h  +
push edi  +
call SendMessageA  +
mov ebx eax +
mov dx 200h +
mov eax ebx +
call unknown_libname_380  +
push eax  +
push edi  +
push 20h  +
push edi  +
call SendMessageA  +
jmp loc_46A86B  +
movsx edx si +
mov eax ebx +
call @Forms@TScreen@GetCursors$qqri  +
push eax  +
call SetCursor  +
inc dword ptr [ebx+48h]  +
pop ecx  +
pop edx  +
pop ebp  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
add esp 0FFFFFE6Ch +
push ebx  +
mov ebx eax +
mov [ebp+var_1] 0 +
cmp dword_4F17A4 0 +
jz loc_46A89B  +
mov eax dword_4F17A4 +
mov al [eax+88h] +
mov [ebp+var_1] al +
xor eax eax +
push ebp  +
push offset loc_46A9B9  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
cmp dword_4F17A4 0 +
jz loc_46A8BE  +
xor edx edx +
mov eax dword_4F17A4 +
call @Forms@TApplication@SetShowHint$qqro  +
push 0  +
lea eax [ebp+pvParam] +
push eax  +
push 3Ch  +
push 1Fh  +
call SystemParametersInfoA  +
test eax eax +
jz loc_46A8E9  +
lea eax [ebp+pvParam] +
push eax  +
call CreateFontIndirectA  +
mov edx eax +
mov eax [ebx+84h] +
call @Graphics@TFont@SetHandle$qqrui  +
jmp loc_46A8FD  +
push 0Dh  +
call GetStockObject  +
mov edx eax +
mov eax [ebx+84h] +
call @Graphics@TFont@SetHandle$qqrui  +
mov [ebp+var_191] 154h +
push 0  +
lea eax [ebp+var_191] +
push eax  +
push 0  +
push 29h  +
call SystemParametersInfoA  +
test eax eax +
jz loc_46A951  +
lea eax [ebp+var_B5] +
push eax  +
call CreateFontIndirectA  +
mov edx eax +
mov eax [ebx+80h] +
call @Graphics@TFont@SetHandle$qqrui  +
lea eax [ebp+var_F1] +
push eax  +
call CreateFontIndirectA  +
mov edx eax +
mov eax [ebx+88h] +
call @Graphics@TFont@SetHandle$qqrui  +
jmp loc_46A975  +
mov eax [ebx+80h] +
mov edx 8 +
call @Graphics@TFont@SetSize$qqri  +
push 0Dh  +
call GetStockObject  +
mov edx eax +
mov eax [ebx+88h] +
call @Graphics@TFont@SetHandle$qqrui  +
mov eax [ebx+80h] +
mov edx 80000017h +
call @Graphics@TFont@SetColor$qqr15Graphics@TColor  +
mov eax [ebx+88h] +
mov edx 80000007h +
call @Graphics@TFont@SetColor$qqr15Graphics@TColor  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_46A9C0  +
cmp dword_4F17A4 0 +
jz locret_46A9B8  +
mov dl [ebp+var_1] +
mov eax dword_4F17A4 +
call @Forms@TApplication@SetShowHint$qqro  +
retn   +
jmp unknown_libname_539  +
jmp loc_46A9A2  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
inc word ptr [eax+8Ch]  +
dec word ptr [eax+8Ch]  +
xor edx edx +
push ecx  +
push ebx  +
mov [ebp+var_1] cl +
xor ecx ecx +
mov bl [ebp+var_1] +
dec bl  +
jz loc_46AA17  +
dec bl  +
jz loc_46AA22  +
dec bl  +
jz loc_46AA35  +
dec bl  +
jz loc_46AA40  +
jmp loc_46AA51  +
mov edx [edx+44h] +
cmp edx [eax+44h] +
setnle cl  +
jmp loc_46AA51  +
mov ecx [edx+44h] +
add ecx [edx+4Ch] +
mov edx [eax+44h] +
add edx [eax+4Ch] +
cmp ecx edx +
setl cl  +
jmp loc_46AA51  +
mov edx [edx+40h] +
cmp edx [eax+40h] +
setnle cl  +
jmp loc_46AA51  +
mov ecx [edx+40h] +
add ecx [edx+48h] +
mov edx [eax+40h] +
add edx [eax+48h] +
cmp ecx edx +
setl cl  +
mov eax ecx +
pop ebx  +
pop ecx  +
pop ebp  +
retn   +
***
add esp 0FFFFFFF0h +
add esp 0FFFFFFF8h +
push ebx  +
push esi  +
push edi  +
mov [ebp+var_1] al +
mov eax [ebp+arg_0] +
mov eax [eax-8] +
mov edx [eax] +
call dword ptr [edx+8]  +
mov eax [ebp+arg_0] +
cmp dword ptr [eax-0Ch] 0 +
jz loc_46AC7A  +
mov eax [ebp+arg_0] +
mov eax [eax-0Ch] +
cmp dword ptr [eax+30h] 0 +
jnz loc_46AC7A  +
mov eax [ebp+arg_0] +
mov eax [eax-0Ch] +
test byte ptr [eax+1Ch] 10h +
jnz loc_46AC7A  +
mov eax [ebp+arg_0] +
mov eax [eax-0Ch] +
cmp byte ptr [eax+57h] 0 +
jz loc_46AC7A  +
mov eax [ebp+arg_0] +
mov eax [eax-0Ch] +
mov al [eax+5Bh] +
cmp al [ebp+var_1] +
jnz loc_46AC7A  +
mov eax [ebp+arg_0] +
mov eax [eax-0Ch] +
cmp byte ptr [eax+22Bh] 1 +
jz loc_46AC7A  +
mov eax [ebp+arg_0] +
mov edx [eax-0Ch] +
mov eax [ebp+arg_0] +
mov eax [eax-8] +
call @Classes@TList@Add$qqrpv  +
mov eax [ebp+arg_0] +
mov eax [eax-10h] +
call @Forms@TScreen@GetCustomFormCount$qqrv  +
mov edi eax +
dec edi  +
test edi edi +
jl loc_46AD15  +
inc edi  +
mov [ebp+var_8] 0 +
mov eax [ebp+arg_0] +
mov eax [eax-10h] +
mov edx [ebp+var_8] +
call @Forms@TScreen@GetCustomForms$qqri  +
mov ebx eax +
cmp dword ptr [ebx+30h] 0 +
jnz loc_46AD0F  +
mov al [ebx+5Bh] +
cmp al [ebp+var_1] +
jnz loc_46AD0F  +
test byte ptr [ebx+1Ch] 10h +
jnz loc_46AD0F  +
cmp byte ptr [ebx+57h] 0 +
jz loc_46AD0F  +
cmp byte ptr [ebx+22Bh] 1 +
jz loc_46AD0F  +
mov eax [ebp+arg_0] +
cmp ebx [eax-0Ch] +
jz loc_46AD0F  +
xor esi esi +
jmp loc_46ACD8  +
inc esi  +
mov eax [ebp+arg_0] +
mov eax [eax-8] +
cmp esi [eax+8] +
jge loc_46AD00  +
mov eax [ebp+arg_0] +
mov eax [eax-8] +
mov edx esi +
call @Classes@TList@Get$qqri  +
mov edx eax +
mov cl [ebp+var_1] +
mov eax ebx +
call @Forms@_16787  +
test al al +
jz loc_46ACD7  +
mov eax [ebp+arg_0] +
mov eax [eax-8] +
mov ecx ebx +
mov edx esi +
call @Classes@TList@Insert$qqripv  +
inc [ebp+var_8]  +
dec edi  +
jnz loc_46AC98  +
mov eax [ebp+arg_0] +
mov eax [eax-8] +
mov edi [eax+8] +
dec edi  +
test edi edi +
jl loc_46AD4C  +
inc edi  +
mov [ebp+var_8] 0 +
mov eax [ebp+arg_0] +
push eax  +
mov eax [ebp+arg_0] +
mov eax [eax-8] +
mov edx [ebp+var_8] +
call @Classes@TList@Get$qqri  +
mov dl [ebp+var_1] +
call @Forms@_16788  +
pop ecx  +
inc [ebp+var_8]  +
dec edi  +
jnz loc_46AD2B  +
pop edi  +
pop esi  +
pop ebx  +
pop ecx  +
pop ecx  +
pop ebp  +
retn   +
***
push ebx  +
push esi  +
mov bl 1 +
mov eax [ebp+arg_0] +
mov eax [eax-10h] +
call @Forms@TScreen@GetCustomFormCount$qqrv  +
mov esi eax +
dec esi  +
cmp esi 0 +
jl loc_46ADA2  +
mov eax [ebp+arg_0] +
mov eax [eax-10h] +
mov edx esi +
call @Forms@TScreen@GetCustomForms$qqri  +
cmp dword ptr [eax+30h] 0 +
jnz loc_46AD9C  +
test byte ptr [eax+1Ch] 10h +
jnz loc_46AD9C  +
cmp byte ptr [eax+5Bh] 0 +
jz loc_46AD9C  +
cmp byte ptr [eax+57h] 0 +
jz loc_46AD9C  +
cmp byte ptr [eax+22Bh] 1 +
jnz loc_46ADA4  +
dec esi  +
cmp esi 0FFFFFFFFh +
jnz loc_46AD6E  +
xor ebx ebx +
mov eax ebx +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
add esp 0FFFFFFF0h +
mov [ebp+var_4] ecx +
mov [ebp+var_C] edx +
mov [ebp+var_10] eax +
push ebp  +
call @Forms@_16790  +
pop ecx  +
test al al +
jz loc_46AE2D  +
mov dl 1 +
mov eax ds:off_49A5D8 +
call @System@TObject@$bctr$qqrv  +
mov [ebp+var_8] eax +
xor eax eax +
push ebp  +
push offset loc_46AE26  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
push ebp  +
mov al 1 +
call @Forms@_16789  +
pop ecx  +
push ebp  +
mov al 2 +
call @Forms@_16789  +
pop ecx  +
push ebp  +
mov al 3 +
call @Forms@_16789  +
pop ecx  +
push ebp  +
mov al 4 +
call @Forms@_16789  +
pop ecx  +
push ebp  +
mov al 5 +
call @Forms@_16789  +
pop ecx  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_46AE2D  +
mov eax [ebp+var_8] +
call @System@TObject@Free$qqrv  +
retn   +
jmp unknown_libname_539  +
jmp loc_46AE1D  +
mov esp ebp +
pop ebp  +
retn   +
***
add esp 0FFFFFFECh +
push ebx  +
mov ebx edx +
mov [ebp+var_4] eax +
mov eax [ebp+var_4] +
cmp word ptr [eax+8Ch] 0 +
jz loc_46AE5A  +
mov eax [ebp+var_4] +
or word ptr [eax+8Eh] 10h +
jmp loc_46AEB4  +
mov eax [ebp+var_4] +
call @Forms@TScreen@DisableAlign$qqrv  +
xor eax eax +
push ebp  +
push offset loc_46AEAD  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
push 0  +
lea eax [ebp+pvParam] +
push eax  +
push 0  +
push 30h  +
call SystemParametersInfoA  +
lea ecx [ebp+pvParam] +
mov edx ebx +
mov eax [ebp+var_4] +
call sub_46ADAC  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_46AEB4  +
mov eax [ebp+var_4] +
and word ptr [eax+8Eh] 0FFEFh +
mov eax [ebp+var_4] +
call @Forms@TScreen@EnableAlign$qqrv  +
retn   +
jmp unknown_libname_539  +
jmp loc_46AE99  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
add eax 30h +
call @Sysutils@FreeAndNil$qqrpv  +
retn   +
***
mov esi edx +
mov ebx eax +
test ebx ebx +
jz loc_46AEF4  +
cmp dword ptr [ebx+80h] 0 +
jnz loc_46AEE0  +
mov ebx [ebx+30h] +
jmp loc_46AEF0  +
mov eax esi +
mov edx [ebx+80h] +
call unknown_libname_542  +
pop esi  +
pop ebx  +
retn   +
test ebx ebx +
jnz loc_46AED2  +
mov eax esi +
call unknown_libname_540  +
pop esi  +
pop ebx  +
retn   +
***
jmp loc_46AF05  +
mov eax [eax+30h] +
test eax eax +
jz loc_46AF12  +
cmp byte ptr [eax+99h] 0 +
jz loc_46AF02  +
test eax eax +
jz locret_46AF1E  +
test byte ptr [eax+1Ch] 10h +
jz locret_46AF1E  +
xor eax eax +
retn   +
***
push ebx  +
push esi  +
push edi  +
cmp dword_4F17A4 0 +
jz loc_46AF6B  +
xor eax eax +
push ebp  +
push offset loc_46AF51  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov eax dword_4F17A4 +
call @Forms@TApplication@HintTimerExpired$qqrv  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
jmp loc_46AF6B  +
jmp @System@@HandleAnyException$qqrv  +
mov edx dword_4F17A4 +
mov eax dword_4F17A4 +
call @TApplication@HandleException$qqrp7TObject  +
call @@DoneExcept$qqrv  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 10h  +
***
add esp 0FFFFFFF8h +
push ebx  +
push esi  +
push edi  +
mov esi [ebp+lParam] +
mov ebx [ebp+nCode] +
push esi  +
mov eax [ebp+wParam] +
push eax  +
push ebx  +
mov eax hhk +
push eax  +
call CallNextHookEx  +
mov edi eax +
test ebx ebx +
jl loc_46B008  +
cmp dword_4F17A4 0 +
jz loc_46B008  +
mov edx esi +
mov eax dword_4F17A4 +
call @Forms@TApplication@IsHintMsg$qqrr6tagMSG  +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
cmp byte ptr [eax+0A5h] 0 +
jnz loc_46B085  +
cmp hhk 0 +
jnz loc_46B046  +
call GetCurrentThreadId  +
push eax  +
push 0  +
mov eax offset @Forms@_16799 +
push eax  +
push 3  +
call SetWindowsHookExA  +
mov hhk eax +
cmp hHandle 0 +
jnz loc_46B061  +
push 0  +
push 0  +
push 0  +
push 0  +
call CreateEventA  +
mov hHandle eax +
cmp dword_4F17C0 0 +
jnz loc_46B085  +
push esp  +
push 0  +
push 0  +
push offset @Forms@_16798  +
push 3E8h  +
push 0  +
call CreateThread  +
mov dword_4F17C0 eax +
pop edx  +
retn   +
***
cmp hhk 0 +
add esp 0FFFFFFF8h +
mov [esp+8+pvParam] 8 +
push 0  +
lea eax [esp+0Ch+pvParam] +
push eax  +
push 8  +
push 48h  +
call SystemParametersInfoA  +
test eax eax +
jz loc_46B10D  +
cmp [esp+8+var_4] 0 +
setnz al  +
pop ecx  +
pop edx  +
retn   +
xor eax eax +
pop ecx  +
pop edx  +
retn   +
***
add esp 0FFFFFFF8h +
mov [esp+8+pvParam] 8 +
cmp al 1 +
cmc   +
sbb eax eax +
mov [esp+8+var_4] eax +
push 0  +
lea eax [esp+0Ch+pvParam] +
push eax  +
push 8  +
push 49h  +
call SystemParametersInfoA  +
pop ecx  +
pop edx  +
retn   +
***
push edi  +
mov edi edx +
mov esi eax +
call @Forms@_16809  +
mov ebx eax +
test bl bl +
jz loc_46B155  +
xor eax eax +
call @Forms@_16803  +
push edi  +
push esi  +
call ShowWindow  +
test bl bl +
jz loc_46B167  +
mov al 1 +
call @Forms@_16803  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
mov ebx ecx +
mov esi edx +
mov edi eax +
xor eax eax +
mov al bl +
mov eax dword_4E65AC[eax*4] +
push eax  +
push dword ptr [esi+4]  +
push dword ptr [esi]  +
mov eax off_4EA7FC +
mov eax [eax] +
call eax  +
mov edx eax +
mov eax edi +
call @Forms@TScreen@FindMonitor$qqri  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
add esp 0FFFFFEFCh +
push ebx  +
push esi  +
test dl dl +
jz loc_46B1C3  +
add esp 0FFFFFFF0h +
call unknown_libname_535  +
mov [ebp+var_1] dl +
mov ebx eax +
xor edx edx +
mov eax ebx +
call sub_4A4B20  +
mov eax off_4EA820 +
cmp word ptr [eax+2] 0 +
jnz loc_46B1EB  +
mov eax off_4EA820 +
mov [eax+4] ebx +
mov dword ptr [eax] offset @TApplication@HandleException$qqrp7TObject +
mov eax off_4EA824 +
cmp word ptr [eax+2] 0 +
jnz loc_46B205  +
mov eax off_4EA824 +
mov [eax+4] ebx +
mov dword ptr [eax] offset sub_46CA80 +
mov byte ptr [ebx+34h] 0 +
mov dl 1 +
mov eax ds:off_49A5D8 +
call @System@TObject@$bctr$qqrv  +
mov [ebx+90h] eax +
mov dl 1 +
mov eax ds:off_49A5D8 +
call @System@TObject@$bctr$qqrv  +
mov [ebx+0A8h] eax +
xor eax eax +
mov [ebx+60h] eax +
xor eax eax +
mov [ebx+84h] eax +
mov dword ptr [ebx+5Ch] 80000018h +
mov dword ptr [ebx+78h] 1F4h +
mov byte ptr [ebx+7Ch] 1 +
xor eax eax +
mov [ebx+80h] eax +
mov dword ptr [ebx+74h] 9C4h +
mov byte ptr [ebx+88h] 0 +
mov byte ptr [ebx+9Dh] 1 +
mov byte ptr [ebx+0B4h] 1 +
mov dl 1 +
mov eax ds:off_4598E0 +
call @Graphics@TIcon@$bctr$qqrv  +
mov esi eax +
mov [ebx+98h] esi +
push offset IconName  +
mov eax off_4EAA60 +
mov eax [eax] +
push eax  +
call LoadIconA  +
mov edx eax +
mov eax esi +
call unknown_libname_164  +
mov eax [ebx+98h] +
mov [eax+14h] ebx +
mov dword ptr [eax+10h] offset @Forms@TApplication@IconChanged$qqrp14System@TObject +
push 100h  +
lea eax [ebp+szDst] +
push eax  +
mov eax off_4EAA60 +
mov eax [eax] +
push eax  +
call GetModuleFileNameA  +
lea eax [ebp+szDst] +
push eax  +
lea eax [ebp+szDst] +
push eax  +
call OemToCharA  +
lea eax [ebp+szDst] +
mov dl 5Ch +
call @Sysutils@AnsiStrRScan$qqrpcc  +
test eax eax +
jz loc_46B2FA  +
lea edx [eax+1] +
lea eax [ebp+szDst] +
call sub_4A9198  +
lea eax [ebp+szDst] +
mov dl 2Eh +
call @Sysutils@AnsiStrScan$qqrpcc  +
test eax eax +
jz loc_46B30E  +
mov byte ptr [eax] 0 +
lea eax [ebp+szDst] +
inc eax  +
push eax  +
call CharLowerA  +
lea eax [ebx+8Ch] +
lea edx [ebp+szDst] +
mov ecx 100h +
call sub_4BB5C0  +
mov eax off_4EAA68 +
cmp byte ptr [eax] 0 +
jnz loc_46B342  +
mov eax ebx +
call @Forms@TApplication@CreateHandle$qqrv  +
mov byte ptr [ebx+59h] 1 +
mov byte ptr [ebx+5Ah] 1 +
mov byte ptr [ebx+5Bh] 1 +
mov byte ptr [ebx+9Eh] 1 +
xor eax eax +
mov [ebx+0A0h] eax +
mov eax ebx +
call @Forms@TApplication@ValidateHelpSystem$qqrv  +
mov eax ebx +
call @Forms@TApplication@HookSynchronizeWakeup$qqrv  +
mov eax ebx +
cmp [ebp+var_1] 0 +
jz loc_46B382  +
call sub_4BABC8  +
pop large dword ptr fs:0  +
add esp 0Ch +
mov eax ebx +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
add esp 0FFFFFFF0h +
add esp 0FFFFFFD4h +
push ebx  +
xor edx edx +
mov [ebp+var_2C] edx +
mov ebx eax +
xor eax eax +
push ebp  +
push offset loc_46B64B  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
cmp byte ptr [ebx+0A4h] 0 +
jnz loc_46B635  +
mov eax off_4EAA7C +
cmp byte ptr [eax] 0 +
jnz loc_46B635  +
push ebx  +
push offset @Forms@TApplication@WndProc$qqrr17Messages@TMessage  +
call sub_4A5BA4  +
mov [ebx+40h] eax +
lea eax [ebp+WndClass] +
push eax  +
mov eax WndClass.lpszClassName +
push eax  +
mov eax hInstance +
push eax  +
call GetClassInfoA  +
test eax eax +
jnz loc_46B54C  +
mov eax hInstance +
mov WndClass.hInstance eax +
push offset WndClass  +
call RegisterClassA  +
test ax ax +
jnz loc_46B54C  +
lea edx [ebp+var_2C] +
mov eax off_4EA6F8 +
call @System@LoadResString$qqrp20System@TResStringRec  +
mov ecx [ebp+var_2C] +
mov dl 1 +
mov eax ds:off_49A51C +
call sub_4AC17C  +
call @System@@RaiseExcept$qqrv  +
push 0  +
mov eax off_4EA7F4 +
mov eax [eax] +
call eax  +
sar eax 1 +
jns loc_46B55E  +
adc eax 0 +
push eax  +
push 1  +
mov eax off_4EA7F4 +
mov eax [eax] +
call eax  +
sar eax 1 +
jns loc_46B571  +
adc eax 0 +
push eax  +
push 0  +
push 0  +
push 0  +
push 0  +
mov eax hInstance +
push eax  +
push 0  +
mov eax [ebx+8Ch] +
call unknown_libname_550  +
mov edx eax +
mov ecx 84CA0000h +
mov eax WndClass.lpszClassName +
call sub_4978DC  +
mov [ebx+30h] eax +
lea eax [ebx+8Ch] +
call unknown_libname_540  +
mov byte ptr [ebx+0A4h] 1 +
mov eax [ebx+40h] +
push eax  +
push 0FFFFFFFCh  +
mov eax [ebx+30h] +
push eax  +
call SetWindowLongA  +
mov eax off_4EA6D4 +
cmp byte ptr [eax] 0 +
jz loc_46B5F7  +
mov eax ebx +
call @Forms@TApplication@GetIconHandle$qqrv  +
push eax  +
push 1  +
push 80h  +
mov eax [ebx+30h] +
push eax  +
call SendMessageA  +
mov eax ebx +
call @Forms@TApplication@GetIconHandle$qqrv  +
push eax  +
push 0FFFFFFF2h  +
mov eax [ebx+30h] +
push eax  +
call SetClassLongA  +
push 0  +
mov eax [ebx+30h] +
push eax  +
call GetSystemMenu  +
mov ebx eax +
push 0  +
push 0F030h  +
push ebx  +
call DeleteMenu  +
push 0  +
push 0F000h  +
push ebx  +
call DeleteMenu  +
mov eax off_4EA6D4 +
cmp byte ptr [eax] 0 +
jz loc_46B635  +
push 0  +
push 0F010h  +
push ebx  +
call DeleteMenu  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_46B652  +
lea eax [ebp+var_2C] +
call unknown_libname_540  +
retn   +
jmp unknown_libname_539  +
jmp loc_46B642  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
mov ecx offset dword_4F17A8 +
push ebx  +
push esi  +
push edi  +
mov ebx [ebp+hWnd] +
or esi 0FFFFFFFFh +
push 4  +
push ebx  +
call GetWindow  +
mov edx dword_4F17A4 +
cmp eax [edx+30h] +
jnz loc_46B71E  +
push 0FFFFFFECh  +
push ebx  +
call GetWindowLongA  +
test al 8 +
jz loc_46B717  +
mov eax dword_4F17A4 +
mov edi [eax+44h] +
test edi edi +
jz loc_46B703  +
mov eax [ebp+arg_4] +
cmp byte ptr [eax+4] 0 +
jnz loc_46B703  +
mov eax edi +
call @Controls@TWinControl@GetHandle$qqrv  +
cmp ebx eax +
jz loc_46B717  +
mov eax dword_4F17A4 +
mov eax [eax+90h] +
mov edx ebx +
call @Classes@TList@Add$qqrpv  +
jmp loc_46B71E  +
mov eax [ebp+arg_4] +
mov [eax] ebx +
xor esi esi +
mov eax esi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
add esp 0FFFFFFF8h +
mov ebx eax +
mov eax dword_4F17A4 +
cmp dword ptr [eax+30h] 0 +
jz loc_46B7D2  +
cmp dword ptr [ebx+94h] 0 +
jnz loc_46B7CC  +
mov eax [ebx+30h] +
mov [esp+8+hWndInsertAfter] eax +
mov [esp+8+var_4] dl +
mov eax esp +
push eax  +
push offset @Forms@_16821  +
call EnumWindows  +
mov eax [ebx+90h] +
cmp dword ptr [eax+8] 0 +
jz loc_46B7CC  +
push 3  +
mov eax [esp+0Ch+hWndInsertAfter] +
push eax  +
call GetWindow  +
mov esi eax +
mov [esp+8+hWndInsertAfter] esi +
push 0FFFFFFECh  +
push esi  +
call GetWindowLongA  +
test al 8 +
jz loc_46B792  +
mov [esp+8+hWndInsertAfter] 0FFFFFFFEh +
mov eax [ebx+90h] +
mov esi [eax+8] +
dec esi  +
cmp esi 0 +
jl loc_46B7CC  +
push 213h  +
push 0  +
push 0  +
push 0  +
push 0  +
mov eax [esp+1Ch+hWndInsertAfter] +
push eax  +
mov edx esi +
mov eax [ebx+90h] +
call @Classes@TList@Get$qqri  +
push eax  +
call SetWindowPos  +
dec esi  +
cmp esi 0FFFFFFFFh +
jnz loc_46B7A1  +
inc dword ptr [ebx+94h]  +
pop ecx  +
pop edx  +
pop esi  +
pop ebx  +
retn   +
***
xor edx edx +
mov dl 1 +
mov ebx eax +
mov edx off_4EA8CC +
mov edx off_4EA8CC +
push edi  +
mov edi edx +
mov esi eax +
xor ebx ebx +
mov eax [edi] +
cmp eax dword_4F17B0 +
jz loc_46B89C  +
cmp eax 1Ah +
jnz loc_46B8D5  +
cmp byte ptr [esi+59h] 0 +
jz loc_46B8B1  +
push 400h  +
call SetThreadLocale  +
call @Sysutils@GetFormatSettings$qqrv  +
cmp byte ptr [esi+5Ah] 0 +
jz loc_46B8C1  +
mov eax dword_4F17A8 +
call @Forms@TScreen@GetMetricSettings$qqrv  +
mov eax [edi] +
cmp eax dword_4F17B0 +
jnz loc_46B8D5  +
mov eax dword_4F17A8 +
call @Forms@TScreen@ResetFonts$qqrv  +
mov eax ebx +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push 0  +
push ebx  +
push esi  +
mov esi edx +
mov ebx eax +
xor eax eax +
push ebp  +
push offset loc_46B939  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
cmp word ptr [ebx+122h] 0 +
jz loc_46B923  +
lea eax [ebp+var_4] +
mov edx [esi+8] +
call unknown_libname_545  +
mov eax [ebp+var_4] +
push eax  +
lea eax [esi+0Ch] +
push eax  +
mov ecx [esi+4] +
mov edx ebx +
mov eax [ebx+124h] +
call dword ptr [ebx+120h]  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_46B940  +
lea eax [ebp+var_4] +
call unknown_libname_540  +
retn   +
jmp unknown_libname_539  +
jmp loc_46B930  +
pop esi  +
pop ebx  +
pop ecx  +
pop ebp  +
retn   +
***
mov eax [ebp+arg_0] +
mov eax [eax-8] +
mov eax [eax+8] +
push eax  +
mov eax [ebp+arg_0] +
mov eax [eax-8] +
mov eax [eax+4] +
push eax  +
mov eax [ebp+arg_0] +
mov eax [eax-8] +
mov eax [eax] +
push eax  +
mov eax [ebp+arg_0] +
mov eax [eax-4] +
mov eax [eax+30h] +
push eax  +
call DefWindowProcA  +
mov edx [ebp+arg_0] +
mov edx [edx-8] +
mov [edx+0Ch] eax +
pop ebp  +
retn   +
***
add esp 0FFFFFFC0h +
push ebx  +
lea eax [ebp+Paint] +
push eax  +
mov eax [ebp+arg_0] +
mov eax [eax-4] +
mov eax [eax+30h] +
push eax  +
call BeginPaint  +
mov ebx eax +
mov eax [ebp+arg_0] +
mov eax [eax-4] +
call @Forms@TApplication@GetIconHandle$qqrv  +
push eax  +
push 0  +
push 0  +
push ebx  +
call DrawIcon  +
lea eax [ebp+Paint] +
push eax  +
mov eax [ebp+arg_0] +
mov eax [eax-4] +
mov eax [eax+30h] +
push eax  +
call EndPaint  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
add esp 0FFFFFFF8h +
push ebx  +
push esi  +
push edi  +
mov [ebp+var_8] edx +
mov [ebp+var_4] eax +
xor edx edx +
push ebp  +
push offset loc_46C060  +
push dword ptr fs:[edx]  +
mov fs:[edx] esp +
mov eax [ebp+var_8] +
xor edx edx +
mov [eax+0Ch] edx +
mov eax [ebp+var_4] +
mov eax [eax+0A8h] +
mov ebx [eax+8] +
dec ebx  +
test ebx ebx +
jl loc_46BA38  +
inc ebx  +
xor esi esi +
mov eax [ebp+var_4] +
mov eax [eax+0A8h] +
mov edx esi +
call @Classes@TList@Get$qqri  +
mov edi eax +
mov edx [ebp+var_8] +
mov eax [edi+4] +
call dword ptr [edi]  +
test al al +
jz loc_46BA34  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
jmp loc_46C075  +
inc esi  +
dec ebx  +
jnz loc_46BA09  +
mov edx [ebp+var_8] +
mov eax [ebp+var_4] +
call @Forms@TApplication@CheckIniChange$qqrr17Messages@TMessage  +
mov ebx [ebp+var_8] +
mov ebx [ebx] +
mov eax ebx +
cmp eax 53h +
jg loc_46BB01  +
jz loc_46BF94  +
cmp eax 16h +
jg loc_46BAC8  +
jz loc_46BD59  +
cmp eax 14h +
ja loc_46C04F  +
jmp ds:off_46BA74[eax*4]  +
cmp eax 1Dh +
jg loc_46BAEA  +
jz loc_46C035  +
sub eax 1Ah +
jz loc_46C00F  +
sub eax 2 +
jz loc_46BC58  +
jmp loc_46C04F  +
sub eax 37h +
jz loc_46BC24  +
sub eax 13h +
jz loc_46BD75  +
jmp loc_46C04F  +
cmp eax 0B017h +
jg loc_46BB4C  +
jz loc_46BE6C  +
cmp eax 0B000h +
jg loc_46BB33  +
jz loc_46BF05  +
sub eax 112h +
jz loc_46BB8E  +
add eax 0FFFFFFE0h +
sub eax 7 +
jb loc_46BD2D  +
jmp loc_46C04F  +
sub eax 0B001h +
jz loc_46BF2D  +
sub eax 15h +
jz loc_46BE4A  +
jmp loc_46C04F  +
cmp eax 0B020h +
jg loc_46BB72  +
jz loc_46BFAE  +
sub eax 0B01Ah +
jz loc_46BF55  +
sub eax 5 +
jz loc_46BF94  +
jmp loc_46C04F  +
sub eax 0B031h +
jz loc_46BFE4  +
add eax 0FFFFFFF2h +
sub eax 2 +
jb loc_46BE29  +
jmp loc_46C04F  +
mov eax [ebp+var_8] +
mov eax [eax+4] +
and eax 0FFF0h +
sub eax 0F020h +
jz loc_46BBA9  +
sub eax 100h +
jz loc_46BBB6  +
jmp loc_46BBC3  +
mov eax [ebp+var_4] +
call @Forms@TApplication@Minimize$qqrv  +
jmp loc_46C056  +
mov eax [ebp+var_4] +
call @Forms@TApplication@Restore$qqrv  +
jmp loc_46C056  +
push ebp  +
call unknown_libname_208  +
pop ecx  +
jmp loc_46C056  +
mov eax [ebp+var_4] +
mov eax [eax+44h] +
test eax eax +
jz loc_46C056  +
call @Forms@TCustomForm@Close$qqrv  +
jmp loc_46C056  +
mov eax [ebp+var_4] +
mov eax [eax+30h] +
push eax  +
call IsIconic  +
test eax eax +
jz loc_46BC03  +
push ebp  +
call @Forms@_16833  +
pop ecx  +
jmp loc_46C056  +
push ebp  +
call unknown_libname_208  +
pop ecx  +
jmp loc_46C056  +
mov eax [ebp+var_8] +
mov dword ptr [eax] 27h +
push ebp  +
call unknown_libname_208  +
pop ecx  +
jmp loc_46C056  +
mov eax [ebp+var_4] +
call @Forms@TApplication@GetIconHandle$qqrv  +
mov edx [ebp+var_8] +
mov [edx+0Ch] eax +
jmp loc_46C056  +
push 0  +
push 0  +
push 0B01Ah  +
mov eax [ebp+var_4] +
mov eax [eax+30h] +
push eax  +
call PostMessageA  +
push ebp  +
call unknown_libname_208  +
pop ecx  +
jmp loc_46C056  +
push ebp  +
call unknown_libname_208  +
pop ecx  +
mov eax [ebp+var_8] +
cmp dword ptr [eax+4] 1 +
sbb eax eax +
inc eax  +
mov edx [ebp+var_4] +
mov [edx+9Dh] al +
mov eax [ebp+var_8] +
cmp dword ptr [eax+4] 0 +
jz loc_46BC9D  +
mov eax [ebp+var_4] +
call @Forms@TApplication@RestoreTopMosts$qqrv  +
push 0  +
push 0  +
push 0B000h  +
mov eax [ebp+var_4] +
mov eax [eax+30h] +
push eax  +
call PostMessageA  +
jmp loc_46C056  +
mov eax [ebp+var_4] +
call sub_46B7D8  +
push 0  +
push 0  +
push 0B001h  +
mov eax [ebp+var_4] +
mov eax [eax+30h] +
push eax  +
call PostMessageA  +
jmp loc_46C056  +
mov eax [ebp+var_8] +
cmp dword ptr [eax+4] 0 +
jz loc_46BCF9  +
mov eax [ebp+var_4] +
call @Forms@TApplication@RestoreTopMosts$qqrv  +
mov eax [ebp+var_4] +
mov eax [eax+0ACh] +
test eax eax +
jz loc_46BCED  +
call sub_4634C4  +
mov eax [ebp+var_4] +
xor edx edx +
mov [eax+0ACh] edx +
push ebp  +
call unknown_libname_208  +
pop ecx  +
jmp loc_46C056  +
push ebp  +
call unknown_libname_208  +
pop ecx  +
mov eax [ebp+var_4] +
cmp dword ptr [eax+0ACh] 0 +
jnz loc_46BD20  +
mov eax [ebp+var_4] +
mov eax [eax+30h] +
call sub_463410  +
mov edx [ebp+var_4] +
mov [edx+0ACh] eax +
mov eax [ebp+var_4] +
call sub_46B7E0  +
jmp loc_46C056  +
mov esi [ebp+var_8] +
mov esi [esi+8] +
push esi  +
mov eax [ebp+var_8] +
mov eax [eax+4] +
push eax  +
mov eax [ebp+var_8] +
add ebx 0BC00h +
push ebx  +
mov eax [ebp+var_8] +
push esi  +
call SendMessageA  +
mov edx [ebp+var_8] +
mov [edx+0Ch] eax +
jmp loc_46C056  +
mov eax [ebp+var_8] +
cmp dword ptr [eax+4] 0 +
jz loc_46C056  +
mov eax [ebp+var_4] +
mov byte ptr [eax+9Ch] 1 +
jmp loc_46C056  +
mov eax [ebp+var_8] +
mov eax [eax+8] +
cmp dword ptr [eax] 0DE534454h +
jnz loc_46C056  +
mov eax [ebp+var_4] +
cmp byte ptr [eax+9Eh] 0 +
jz loc_46C056  +
mov eax [ebp+var_4] +
cmp dword ptr [eax+0A0h] 0 +
jnz loc_46BE1C  +
mov edx 8000h +
mov eax offset _str_vcltest3_dll.Text +
call @Sysutils@SafeLoadLibrary$qqrx17System@AnsiStringui  +
mov ebx eax +
mov eax [ebp+var_4] +
mov [eax+0A0h] ebx +
test ebx ebx +
jz loc_46BE01  +
mov eax [ebp+var_8] +
xor edx edx +
mov [eax+0Ch] edx +
push offset ProcName  +
mov eax [ebp+var_4] +
mov eax [eax+0A0h] +
push eax  +
call GetProcAddress  +
mov esi eax +
mov ebx esi +
test esi esi +
jz loc_46C056  +
mov eax [ebp+var_8] +
mov eax [eax+8] +
mov edx [eax+8] +
push edx  +
mov edx [ebp+var_8] +
mov eax [eax+4] +
push eax  +
call ebx  +
jmp loc_46C056  +
call GetLastError  +
mov edx [ebp+var_8] +
mov [edx+0Ch] eax +
mov eax [ebp+var_4] +
xor edx edx +
mov [eax+0A0h] edx +
jmp loc_46C056  +
mov eax [ebp+var_8] +
xor edx edx +
mov [eax+0Ch] edx +
jmp loc_46C056  +
mov ecx [ebp+var_8] +
mov ecx [ecx+8] +
mov eax [ebp+var_8] +
mov edx ebx +
mov eax [ebp+var_4] +
call @Forms@TApplication@DispatchAction$qqrip20Classes@TBasicAction  +
and eax 7Fh +
mov edx [ebp+var_8] +
mov [edx+0Ch] eax +
jmp loc_46C056  +
mov edx [ebp+var_8] +
mov eax [ebp+var_4] +
call @Forms@TApplication@IsShortCut$qqrr15Messages@TWMKey  +
test al al +
jz loc_46C056  +
mov eax [ebp+var_8] +
mov dword ptr [eax+0Ch] 1 +
jmp loc_46C056  +
mov eax [ebp+var_4] +
mov eax [eax+44h] +
test eax eax +
jz loc_46C056  +
mov esi eax +
mov eax esi +
call @Controls@TWinControl@GetHandle$qqrv  +
test eax eax +
jz loc_46C056  +
mov eax esi +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call IsWindowEnabled  +
test eax eax +
jz loc_46C056  +
mov eax esi +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call IsWindowVisible  +
test eax eax +
jz loc_46C056  +
mov byte_4E64C0 0 +
call GetFocus  +
mov ebx eax +
mov eax esi +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call SetFocus  +
mov eax [ebp+var_8] +
mov eax [eax+8] +
push eax  +
mov ecx [ebp+var_8] +
mov ecx [ecx+4] +
mov edx 112h +
mov eax esi +
call @Controls@TControl@Perform$qqruiii  +
push ebx  +
call SetFocus  +
mov byte_4E64C0 1 +
mov eax [ebp+var_8] +
mov dword ptr [eax+0Ch] 1 +
jmp loc_46C056  +
mov eax [ebp+var_4] +
cmp word ptr [eax+0FAh] 0 +
jz loc_46C056  +
mov ebx [ebp+var_4] +
mov edx [ebp+var_4] +
mov eax [ebx+0FCh] +
call dword ptr [ebx+0F8h]  +
jmp loc_46C056  +
mov eax [ebp+var_4] +
cmp word ptr [eax+0F2h] 0 +
jz loc_46C056  +
mov ebx [ebp+var_4] +
mov edx [ebp+var_4] +
mov eax [ebx+0F4h] +
call dword ptr [ebx+0F0h]  +
jmp loc_46C056  +
mov eax [ebp+var_4] +
mov eax [eax+30h] +
push eax  +
call IsIconic  +
test eax eax +
jnz loc_46C056  +
call GetFocus  +
mov edx [ebp+var_4] +
cmp eax [edx+30h] +
jnz loc_46C056  +
xor eax eax +
call unknown_libname_185  +
test eax eax +
jz loc_46C056  +
push eax  +
call SetFocus  +
jmp loc_46C056  +
mov ecx [ebp+var_8] +
mov ecx [ecx+8] +
mov edx [ebp+var_8] +
mov dx [edx+4] +
mov eax [ebp+var_4] +
call @Forms@TApplication@InvokeHelp$qqrusi  +
jmp loc_46C056  +
mov eax [ebp+var_8] +
cmp dword ptr [eax+4] 0 +
jnz loc_46BFCF  +
mov eax [ebp+var_8] +
mov eax [eax+8] +
push dword ptr [eax+4]  +
push dword ptr [eax]  +
mov eax [ebp+var_4] +
call @Forms@TApplication@HookMainWindow$qqrynpqqrr17Messages@TMessage$o  +
jmp loc_46C056  +
mov eax [ebp+var_8] +
mov eax [eax+8] +
push dword ptr [eax+4]  +
push dword ptr [eax]  +
mov eax [ebp+var_4] +
call @Forms@TApplication@UnhookMainWindow$qqrynpqqrr17Messages@TMessage$o  +
jmp loc_46C056  +
mov eax [ebp+var_8] +
cmp dword ptr [eax+4] 1 +
jnz loc_46BFFE  +
mov eax [ebp+var_4] +
mov eax [eax+0B0h] +
mov edx [ebp+var_8] +
mov [edx+0Ch] eax +
jmp loc_46C056  +
mov eax [ebp+var_8] +
mov eax [eax+8] +
mov edx [ebp+var_4] +
mov [edx+0B0h] eax +
jmp loc_46C056  +
mov edx [ebp+var_8] +
mov edx [edx+4] +
mov eax off_4EA6D0 +
mov eax [eax] +
call @Controls@TMouse@SettingChanged$qqri  +
mov edx [ebp+var_8] +
mov eax [ebp+var_4] +
call @Forms@TApplication@SettingChange$qqrr25Messages@TWMSettingChange  +
push ebp  +
call unknown_libname_208  +
pop ecx  +
jmp loc_46C056  +
mov eax dword_4F17A8 +
call @Forms@TScreen@ResetFonts$qqrv  +
push ebp  +
call unknown_libname_208  +
pop ecx  +
jmp loc_46C056  +
call sub_4A49F4  +
jmp loc_46C056  +
push ebp  +
call unknown_libname_208  +
pop ecx  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
jmp loc_46C075  +
jmp @System@@HandleAnyException$qqrv  +
mov edx [ebp-4] +
mov eax [ebp-4] +
call @TApplication@HandleException$qqrp7TObject  +
call @@DoneExcept$qqrv  +
pop edi  +
pop esi  +
pop ebx  +
pop ecx  +
pop ecx  +
pop ebp  +
retn   +
***
mov eax [eax+98h] +
mov ebx eax +
mov ebx eax +
mov ebx eax +
mov eax [ebx+30h] +
test eax eax +
jz loc_46C2AA  +
push eax  +
call GetLastActivePopup  +
mov esi eax +
test esi esi +
jz loc_46C2AA  +
cmp esi [ebx+30h] +
jz loc_46C2AA  +
push esi  +
call IsWindowVisible  +
test eax eax +
jz loc_46C2AA  +
push esi  +
call IsWindowEnabled  +
test eax eax +
jz loc_46C2AA  +
push esi  +
call SetForegroundWindow  +
pop esi  +
pop ebx  +
retn   +
***
add esp 0FFFFFF00h +
mov esi edx +
mov ebx eax +
cmp byte ptr [ebx+0A4h] 0 +
jz loc_46C2E5  +
push 100h  +
lea eax [esp+104h+String] +
push eax  +
mov eax [ebx+30h] +
push eax  +
call GetWindowTextA  +
mov ecx eax +
mov edx esp +
mov eax esi +
call @@LStrFromPCharLen$qqrr10AnsiStringpci  +
jmp loc_46C2F2  +
mov eax esi +
mov edx [ebx+8Ch] +
call unknown_libname_542  +
add esp 100h +
pop esi  +
pop ebx  +
retn   +
***
push 0  +
push ebx  +
push esi  +
mov esi edx +
mov ebx eax +
xor eax eax +
push ebp  +
push offset loc_46C37E  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
cmp byte ptr [ebx+0A4h] 0 +
jz loc_46C35B  +
lea edx [ebp+var_4] +
mov eax ebx +
call @Forms@TApplication@GetTitle$qqrv  +
mov eax [ebp+var_4] +
mov edx esi +
call @System@@LStrCmp$qqrv  +
jnz loc_46C33D  +
cmp dword ptr [ebx+8Ch] 0 +
jz loc_46C368  +
mov eax esi +
call unknown_libname_550  +
push eax  +
mov eax [ebx+30h] +
push eax  +
call SetWindowTextA  +
lea eax [ebx+8Ch] +
call unknown_libname_540  +
jmp loc_46C368  +
lea eax [ebx+8Ch] +
mov edx esi +
call unknown_libname_542  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_46C385  +
lea eax [ebp+var_4] +
call unknown_libname_540  +
retn   +
jmp unknown_libname_539  +
jmp loc_46C375  +
pop esi  +
pop ebx  +
pop ecx  +
pop ebp  +
retn   +
***
push edi  +
push edi  +
push edi  +
push edi  +
push ebp  +
mov edi edx +
mov ebp eax +
xor ebx ebx +
mov esi [ebp+84h] +
test esi esi +
jz loc_46C4CF  +
mov edx edi +
mov eax esi +
mov ecx [eax] +
call dword ptr [ecx+0D8h]  +
test al al +
jz loc_46C4CF  +
mov eax ebp +
call @Forms@TApplication@CancelHint$qqrv  +
mov eax ebx +
pop ebp  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
push ebp  +
push ecx  +
mov ebp edx +
mov ebx eax +
mov [esp+1+var_1] 0 +
cmp word ptr [ebx+112h] 0 +
jz loc_46C4FF  +
mov ecx esp +
mov edx ebp +
mov eax [ebx+114h] +
call dword ptr [ebx+110h]  +
cmp [esp+1+var_1] 0 +
jnz loc_46C533  +
mov edi [ebx+44h] +
test edi edi +
jz loc_46C52F  +
mov eax edi +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call IsWindowEnabled  +
test eax eax +
jz loc_46C52F  +
mov edx ebp +
mov eax [ebx+44h] +
mov si 0FFABh +
call @System@@CallDynaInst$qqrv  +
test al al +
jnz loc_46C533  +
xor eax eax +
jmp loc_46C535  +
mov al 1 +
mov [esp+1+var_1] al +
mov al [esp+1+var_1] +
pop edx  +
pop ebp  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
mov ebx eax +
mov ebx eax +
mov edx esp +
mov eax ebx +
call @Forms@TApplication@ProcessMessage$qqrr6tagMSG  +
test al al +
jnz loc_46C610  +
mov edx esp +
mov eax ebx +
call @Forms@TApplication@Idle$qqrrx6tagMSG  +
add esp 1Ch +
pop ebx  +
retn   +
***
push ebx  +
mov ebx eax +
cmp byte ptr [ebx+0A4h] 0 +
jnz loc_46C641  +
mov eax [ebx+30h] +
test eax eax +
jz loc_46C66E  +
lea edx [ebp+lParam] +
push edx  +
push 0  +
push 0B020h  +
push eax  +
call SendMessageA  +
jmp loc_46C66E  +
mov eax [ebx+0A8h] +
call @Classes@TList@Expand$qqrv  +
mov eax 8 +
call sub_4B97C0  +
mov edx [ebp+lParam] +
mov [eax] edx +
mov edx [ebp+arg_4] +
mov [eax+4] edx +
mov edx eax +
mov eax [ebx+0A8h] +
call @Classes@TList@Add$qqrpv  +
pop ebx  +
pop ebp  +
retn 8  +
***
push ebx  +
cmp dword ptr [eax] 0 +
jz loc_46C705  +
mov ebx off_4EAA74 +
mov ebx [ebx] +
call ebx  +
pop ebx  +
retn   +
***
push ecx  +
push ebx  +
push esi  +
push edi  +
mov [ebp+var_4] ecx +
mov ebx edx +
mov esi eax +
mov eax ebx +
call dword ptr [eax-0Ch]  +
mov ebx eax +
mov eax [ebp+var_4] +
mov [eax] ebx +
xor eax eax +
push ebp  +
push offset loc_46C746  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov ecx esi +
or edx 0FFFFFFFFh +
mov eax ebx +
mov edi [eax] +
call dword ptr [edi+2Ch]  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
jmp loc_46C75C  +
jmp @System@@HandleAnyException$qqrv  +
mov eax [ebp-4] +
xor edx edx +
mov [eax] edx +
call @System@@RaiseAgain$qqrv  +
call @@DoneExcept$qqrv  +
cmp dword ptr [esi+44h] 0 +
jnz loc_46C77F  +
mov eax ebx +
mov edx ds:off_462E1C +
call @System@@IsClass$qqrp14System@TObjectp17System@TMetaClass  +
test al al +
jz loc_46C77F  +
mov edi ebx +
mov eax edi +
call @Controls@TWinControl@HandleNeeded$qqrv  +
mov [esi+44h] edi +
pop edi  +
pop esi  +
pop ebx  +
pop ecx  +
pop ebp  +
retn   +
***
push ecx  +
push ebx  +
push esi  +
push edi  +
mov [ebp+var_4] eax +
mov eax [ebp+var_4] +
mov byte ptr [eax+0A5h] 1 +
xor edx edx +
push ebp  +
push offset loc_46C866  +
push dword ptr fs:[edx]  +
mov fs:[edx] esp +
mov eax offset @Forms@_16447 +
call sub_4A8770  +
mov eax [ebp+var_4] +
mov eax [eax+44h] +
test eax eax +
jz loc_46C84E  +
mov edx off_4EAA6C +
mov edx [edx] +
sub edx 3 +
jz loc_46C7DD  +
sub edx 4 +
jnz loc_46C7E4  +
mov byte ptr [eax+22Bh] 1 +
jmp loc_46C7E4  +
mov dl 2 +
call @Forms@TCustomForm@SetWindowState$qqr18Forms@TWindowState  +
mov eax [ebp+var_4] +
cmp byte ptr [eax+5Bh] 0 +
jz loc_46C80D  +
mov eax [ebp+var_4] +
mov eax [eax+44h] +
cmp byte ptr [eax+22Bh] 1 +
jnz loc_46C806  +
mov eax [ebp+var_4] +
call @Forms@TApplication@Minimize$qqrv  +
jmp loc_46C80D  +
mov dl 1 +
call @Forms@TCustomForm@SetVisible$qqro  +
xor eax eax +
push ebp  +
push offset loc_46C82D  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov eax [ebp+var_4] +
call @Forms@TApplication@HandleMessage$qqrv  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
jmp loc_46C842  +
jmp @System@@HandleAnyException$qqrv  +
mov edx [ebp-4] +
mov eax [ebp-4] +
call @TApplication@HandleException$qqrp7TObject  +
call @@DoneExcept$qqrv  +
mov eax [ebp+var_4] +
cmp byte ptr [eax+9Ch] 0 +
jz loc_46C80D  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_46C86D  +
mov eax [ebp+var_4] +
mov byte ptr [eax+0A5h] 0 +
retn   +
jmp unknown_libname_539  +
jmp loc_46C85B  +
pop edi  +
pop esi  +
pop ebx  +
pop ecx  +
pop ebp  +
retn   +
***
call @Sysutils@CallTerminateProcs$qqrv  +
test al al +
jz locret_46C884  +
push 0  +
call PostQuitMessage  +
retn   +
***
mov esi edx +
mov ebx eax +
call GetCapture  +
test eax eax +
jz loc_46C8A8  +
push 0  +
push 0  +
push 1Fh  +
call GetCapture  +
push eax  +
call SendMessageA  +
call @System@ExceptObject$qqrv  +
mov edx ds:off_4A7A78 +
call @System@@IsClass$qqrp14System@TObjectp17System@TMetaClass  +
test al al +
jz loc_46C902  +
call @System@ExceptObject$qqrv  +
mov edx ds:off_4A7AE0 +
call @System@@IsClass$qqrp14System@TObjectp17System@TMetaClass  +
test al al +
jnz loc_46C913  +
cmp word ptr [ebx+0CAh] 0 +
jz loc_46C8F1  +
call @System@ExceptObject$qqrv  +
mov ecx eax +
mov edx esi +
mov eax [ebx+0CCh] +
call dword ptr [ebx+0C8h]  +
jmp loc_46C913  +
call @System@ExceptObject$qqrv  +
mov edx eax +
mov eax ebx +
call sub_46CA80  +
pop esi  +
pop ebx  +
retn   +
call @System@ExceptAddr$qqrv  +
push eax  +
call @System@ExceptObject$qqrv  +
pop edx  +
call sub_4AC0C4  +
pop esi  +
pop ebx  +
retn   +
***
add esp 0FFFFFFACh +
add esp 0FFFFFEF8h +
push ebx  +
push esi  +
xor ecx ecx +
mov [ebp+var_108] ecx +
mov [ebp+var_4] ecx +
mov esi edx +
mov ebx eax +
xor eax eax +
push ebp  +
push offset loc_46CB3B  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
lea eax [ebp+var_4] +
mov edx [esi+4] +
call unknown_libname_543  +
cmp [ebp+var_4] 0 +
jz loc_46CAED  +
mov eax [ebp+var_4] +
call sub_4A8FE8  +
mov edx eax +
lea eax [ebp+var_104] +
call @System@@_CToPasStr$qqrp28System@_SmallString$iuc$255_pxc  +
lea eax [ebp+var_104] +
mov edx offset dword_46CB48 +
call @System@@PStrCmp$qqrv  +
jbe loc_46CAED  +
lea eax [ebp+var_4] +
mov edx offset _str__.Text +
call @System@@LStrCat$qqrv  +
push 10h  +
lea edx [ebp+var_108] +
mov eax ebx +
call @Forms@TApplication@GetTitle$qqrv  +
mov eax [ebp+var_108] +
call unknown_libname_550  +
push eax  +
mov eax [ebp+var_4] +
call unknown_libname_550  +
mov edx eax +
mov eax ebx +
pop ecx  +
call @Forms@TApplication@MessageBox$qqrpxct1i  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_46CB42  +
lea eax [ebp+var_108] +
call unknown_libname_540  +
lea eax [ebp+var_4] +
call unknown_libname_540  +
retn   +
jmp unknown_libname_539  +
jmp loc_46CB27  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
push edi  +
push 0  +
push ebx  +
push esi  +
push edi  +
mov edi edx +
mov esi eax +
xor eax eax +
push ebp  +
push offset loc_46CCE0  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov bl 1 +
mov eax esi +
call @Forms@TApplication@ValidateHelpSystem$qqrv  +
test al al +
jz loc_46CCC8  +
lea edx [ebp+var_4] +
mov eax esi +
call @Forms@TApplication@GetCurrentHelpFile$qqrv  +
mov ecx [ebp+var_4] +
mov edx edi +
mov eax [esi+4Ch] +
mov esi [eax] +
call dword ptr [esi+0Ch]  +
jmp loc_46CCCA  +
xor ebx ebx +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_46CCE7  +
lea eax [ebp+var_4] +
call unknown_libname_540  +
retn   +
jmp unknown_libname_539  +
jmp loc_46CCD7  +
mov eax ebx +
pop edi  +
pop esi  +
pop ebx  +
pop ecx  +
pop ebp  +
retn   +
***
push 0  +
push ebx  +
push esi  +
push edi  +
mov edi edx +
mov esi eax +
xor eax eax +
push ebp  +
push offset loc_46CD48  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov bl 1 +
mov eax esi +
call @Forms@TApplication@ValidateHelpSystem$qqrv  +
test al al +
jz loc_46CD30  +
lea edx [ebp+var_4] +
mov eax esi +
call @Forms@TApplication@GetCurrentHelpFile$qqrv  +
mov ecx [ebp+var_4] +
mov edx edi +
mov eax [esi+4Ch] +
mov esi [eax] +
call dword ptr [esi+10h]  +
jmp loc_46CD32  +
xor ebx ebx +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_46CD4F  +
lea eax [ebp+var_4] +
call unknown_libname_540  +
retn   +
jmp unknown_libname_539  +
jmp loc_46CD3F  +
mov eax ebx +
pop edi  +
pop esi  +
pop ebx  +
pop ecx  +
pop ebp  +
retn   +
***
retn   +
***
mov ebx eax +
cmp dl [ebx+88h] +
jz loc_46CDAB  +
mov eax edx +
mov [ebx+88h] al +
test al al +
jz loc_46CD98  +
mov ecx ebx +
mov dl 1 +
mov eax off_4E64BC +
call dword ptr [eax+2Ch]  +
mov esi eax +
mov [ebx+84h] esi +
mov edx [ebx+5Ch] +
mov eax esi +
call @Controls@TControl@SetColor$qqr15Graphics@TColor  +
jmp loc_46CDAB  +
mov eax [ebx+84h] +
call @System@TObject@Free$qqrv  +
xor eax eax +
mov [ebx+84h] eax +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
push edi  +
add esp 0FFFFFFF0h +
push edi  +
mov edi edx +
mov eax dword_4F17A8 +
call sub_46A2FC  +
mov ebx eax +
dec ebx  +
test ebx ebx +
jl loc_46CFE9  +
inc ebx  +
xor esi esi +
push 0  +
mov edx esi +
mov eax dword_4F17A8 +
call @Forms@TScreen@GetForm$qqri  +
movzx edx di +
xor ecx ecx +
call @Controls@TControl@Perform$qqruiii  +
inc esi  +
dec ebx  +
jnz loc_46CFCD  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov eax off_4EA6D4 +
cmp byte ptr [eax] 0 +
jz loc_46D02A  +
mov eax ebx +
call @Forms@TApplication@GetIconHandle$qqrv  +
push eax  +
push 1  +
push 80h  +
mov eax [ebx+30h] +
push eax  +
call SendMessageA  +
mov eax ebx +
call @Forms@TApplication@GetIconHandle$qqrv  +
push eax  +
push 0FFFFFFF2h  +
mov eax [ebx+30h] +
push eax  +
call SetClassLongA  +
jmp loc_46D044  +
mov eax [ebx+30h] +
push eax  +
call IsIconic  +
test eax eax +
jz loc_46D044  +
push 0FFFFFFFFh  +
push 0  +
mov eax [ebx+30h] +
push eax  +
call InvalidateRect  +
mov dx 0B01Dh +
mov eax ebx +
call sub_46CFB4  +
pop ebx  +
retn   +
***
push ecx  +
push ebx  +
push esi  +
mov esi edx +
mov ebx eax +
mov eax [ebx+54h] +
mov edx esi +
call @System@@LStrCmp$qqrv  +
jz loc_46D0E0  +
lea eax [ebx+54h] +
mov edx esi +
call unknown_libname_542  +
cmp word ptr [ebx+0E2h] 0 +
jz loc_46D08E  +
mov edx ebx +
mov eax [ebx+0E4h] +
call dword ptr [ebx+0E0h]  +
jmp loc_46D0E0  +
mov ecx ebx +
mov dl 1 +
mov eax ds:off_4465E4 +
call unknown_libname_50  +
mov [ebp+var_4] eax +
mov edx esi +
mov eax [ebp+var_4] +
call @Actnlist@TCustomAction@SetHint$qqrx17System@AnsiString  +
xor eax eax +
push ebp  +
push offset loc_46D0D9  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov eax [ebp+var_4] +
mov si 0FFEFh +
call @System@@CallDynaInst$qqrv  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_46D0E0  +
mov eax [ebp+var_4] +
call @System@TObject@Free$qqrv  +
retn   +
jmp unknown_libname_539  +
jmp loc_46D0D0  +
pop esi  +
pop ebx  +
pop ecx  +
pop ebp  +
retn   +
***
push ebx  +
mov ebx eax +
mov eax [ebp+arg_0] +
mov eax [eax-4] +
mov eax [eax+30h] +
push eax  +
call IsWindowVisible  +
cmp eax 1 +
sbb eax eax +
inc eax  +
cmp al byte_4E65E0 +
jnz loc_46D13F  +
cmp bl byte_4E65E0 +
jz loc_46D13F  +
xor eax eax +
mov al bl +
movzx eax word_4E65E4[eax*2] +
push eax  +
push 0  +
push 0  +
push 0  +
push 0  +
push 0  +
mov eax [ebp+arg_0] +
mov eax [eax-4] +
mov eax [eax+30h] +
push eax  +
call SetWindowPos  +
mov byte_4E65E0 bl +
pop ebx  +
pop ebp  +
retn   +
***
push ecx  +
push ebx  +
push esi  +
push edi  +
mov [ebp+var_4] eax +
mov eax [ebp+var_4] +
cmp dword ptr [eax+30h] 0 +
jz loc_46D1C3  +
mov eax dword_4F17A8 +
call sub_46A2FC  +
mov esi eax +
dec esi  +
test esi esi +
jl loc_46D1BA  +
inc esi  +
xor edi edi +
mov edx edi +
mov eax dword_4F17A8 +
call @Forms@TScreen@GetForm$qqri  +
mov ebx eax +
cmp byte ptr [ebx+57h] 0 +
jz loc_46D1B6  +
cmp dword ptr [ebx+190h] 0 +
jz loc_46D1AB  +
mov eax ebx +
call @Controls@TWinControl@HandleAllocated$qqrv  +
test al al +
jnz loc_46D1AB  +
mov eax [ebx+190h] +
push eax  +
mov eax ebx +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call IsChild  +
test eax eax +
jnz loc_46D1B6  +
push ebp  +
mov al 1 +
call @Forms@_16877  +
pop ecx  +
jmp loc_46D1C3  +
inc edi  +
dec esi  +
jnz loc_46D16B  +
push ebp  +
xor eax eax +
call @Forms@_16877  +
pop ecx  +
pop edi  +
pop esi  +
pop ebx  +
pop ecx  +
pop ebp  +
retn   +
***
mov esi eax +
xor ebx ebx +
cmp dword ptr [esi+4Ch] 0 +
jnz loc_46D1E5  +
lea eax [esi+4Ch] +
call unknown_libname_560  +
call sub_4991EC  +
cmp dword ptr [esi+4Ch] 0 +
jz loc_46D1ED  +
mov bl 1 +
mov eax ebx +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
mov ebx ecx +
mov esi edx +
mov edi eax +
mov eax edi +
call @Forms@TApplication@StopHintTimer$qqrv  +
push offset unknown_libname_205  +
push esi  +
push 0  +
push 0  +
call SetTimer  +
mov [edi+8Ah] ax +
mov [edi+89h] bl +
cmp word ptr [edi+8Ah] 0 +
jnz loc_46D231  +
mov eax edi +
call @Forms@TApplication@CancelHint$qqrv  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov ax [ebx+8Ah] +
test ax ax +
jz loc_46D25B  +
movzx eax ax +
push eax  +
push 0  +
call KillTimer  +
mov word ptr [ebx+8Ah] 0 +
pop ebx  +
retn   +
***
push edi  +
push ebp  +
add esp 0FFFFFFE0h +
mov ebp ecx +
mov edi edx +
mov esi eax +
lea edx [esp+20h+var_8] +
mov eax [ebp+8] +
call unknown_libname_382  +
lea edx [esp+20h+var_8] +
lea ecx [esp+20h+pt] +
mov eax edi +
call @Controls@TControl@ClientToScreen$qqrrx14Windows@TPoint  +
lea eax [esp+20h+pt] +
mov dl 1 +
call @Controls@FindDragTarget$qqrrx14Windows@TPointo  +
call @Forms@_16796  +
mov ebx eax +
test ebx ebx +
jz loc_46D2A7  +
cmp byte ptr [ebx+99h] 0 +
jnz loc_46D2B3  +
mov eax esi +
call @Forms@TApplication@CancelHint$qqrv  +
jmp loc_46D367  +
cmp ebx [esi+60h] +
jnz loc_46D2E8  +
lea edx [esp+20h+var_8] +
mov eax [ebp+8] +
call unknown_libname_382  +
lea edx [esp+20h+var_8] +
lea ecx [esp+20h+pt] +
mov eax edi +
call @Controls@TControl@ClientToScreen$qqrrx14Windows@TPoint  +
push [esp+20h+pt.y]  +
push [esp+24h+pt.x]  +
lea eax [esi+64h] +
push eax  +
call PtInRect  +
test eax eax +
jnz loc_46D367  +
mov al [esi+58h] +
mov [esp+20h+var_1C] al +
cmp [esp+20h+var_1C] 0 +
jz loc_46D301  +
mov eax [esi+80h] +
mov [esp+20h+var_20] eax +
jmp loc_46D307  +
mov eax [esi+78h] +
mov [esp+20h+var_20] eax +
mov eax esp +
push eax  +
xor ecx ecx +
mov cl [esp+24h+var_1C] +
mov edx 0B041h +
mov eax ebx +
call @Controls@TControl@Perform$qqruiii  +
cmp [esp+20h+var_1C] 0 +
jz loc_46D34A  +
cmp [esp+20h+var_20] 0 +
jnz loc_46D34A  +
mov al [esp+20h+var_1C] +
mov [esi+58h] al +
mov [esi+60h] ebx +
lea eax [esp+20h+Point] +
push eax  +
call GetCursorPos  +
lea edx [esp+20h+Point] +
mov eax esi +
call @Forms@TApplication@ActivateHint$qqrrx12Types@TPoint  +
jmp loc_46D367  +
mov eax esi +
call @Forms@TApplication@CancelHint$qqrv  +
mov al [esp+20h+var_1C] +
mov [esi+58h] al +
mov [esi+60h] ebx +
xor ecx ecx +
mov edx [esp+20h+var_20] +
mov eax esi +
call @Forms@TApplication@StartHintTimer$qqri16Forms@TTimerMode  +
add esp 20h +
pop ebp  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov ebx eax +
mov eax ebx +
call @Forms@TApplication@StopHintTimer$qqrv  +
mov al [ebx+89h] +
sub al 1 +
jb loc_46D392  +
jnz loc_46D3A1  +
mov eax ebx +
call @Forms@TApplication@HideHint$qqrv  +
jmp loc_46D3A1  +
push esp  +
call GetCursorPos  +
mov edx esp +
mov eax ebx +
call @Forms@TApplication@ActivateHint$qqrrx12Types@TPoint  +
pop ecx  +
pop edx  +
pop ebx  +
retn   +
***
mov ebx eax +
cmp dword ptr [ebx+60h] 0 +
jz loc_46D411  +
mov eax ebx +
call @Forms@TApplication@HideHint$qqrv  +
xor eax eax +
mov [ebx+60h] eax +
mov byte ptr [ebx+58h] 0 +
call unknown_libname_206  +
mov eax ebx +
call @Forms@TApplication@StopHintTimer$qqrv  +
pop ebx  +
retn   +
***
mov edx edi +
mov edi eax +
pop eax  +
scas   +
mov eax ecx +
mov edi edx +
retn   +
***
add esp 0FFFFFFD8h +
push ebx  +
push esi  +
push edi  +
push 0Eh  +
mov eax off_4EA7F4 +
mov eax [eax] +
call eax  +
mov [ebp+var_4] eax +
lea eax [ebp+piconinfo] +
push eax  +
call GetCursor  +
push eax  +
call GetIconInfo  +
test eax eax +
jz loc_46D56D  +
xor edx edx +
push ebp  +
push offset loc_46D566  +
push dword ptr fs:[edx]  +
mov fs:[edx] esp +
lea ecx [ebp+var_C] +
lea edx [ebp+var_8] +
mov eax [ebp-1Ch] +
call sub_45C994  +
mov eax [ebp+var_8] +
add eax [ebp+var_C] +
call sub_4A8724  +
mov [ebp+var_10] eax +
xor edx edx +
push ebp  +
push offset loc_46D537  +
push dword ptr fs:[edx]  +
mov fs:[edx] esp +
mov ebx [ebp+var_10] +
add ebx [ebp+var_8] +
push ebx  +
mov esi [ebp+var_10] +
mov ecx esi +
xor edx edx +
mov eax [ebp-1Ch] +
call unknown_libname_160  +
test al al +
jz loc_46D51B  +
mov eax [ebp+var_10] +
cmp word ptr [eax+0Eh] 1 +
jnz loc_46D51B  +
mov eax [esi+4] +
mov edx eax +
movzx ecx word ptr [esi+0Eh] +
imul edx ecx +
add edx 1Fh +
and edx 0FFFFFFE0h +
test edx edx +
jns loc_46D4C7  +
add edx 7 +
sar edx 3 +
mov [ebp+var_14] edx +
mov edi eax +
imul edi [ebp+var_14] +
add ebx [ebp+var_C] +
sub ebx edi +
mov ecx 0FFh +
mov edx edi +
mov eax ebx +
call @Forms@_16886  +
mov [ebp+var_4] eax +
cmp [ebp+var_4] 0 +
jnz loc_46D50B  +
mov eax [esi+8] +
mov edx [esi+4] +
add edx edx +
cmp eax edx +
jl loc_46D50B  +
mov eax ebx +
sub eax edi +
xor ecx ecx +
mov edx edi +
call @Forms@_16886  +
mov [ebp+var_4] eax +
mov eax [ebp+var_4] +
cdq   +
idiv  [ebp+var_14] +
mov [ebp+var_4] eax +
mov eax [ebp-20h] +
sub [ebp+var_4] eax +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_46D53E  +
mov edx [ebp+var_8] +
add edx [ebp+var_C] +
mov eax [ebp+var_10] +
call sub_4B97E0  +
retn   +
jmp unknown_libname_539  +
jmp loc_46D528  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_46D56D  +
mov eax [ebp-18h] +
test eax eax +
jz loc_46D558  +
push eax  +
call DeleteObject  +
mov eax [ebp-1Ch] +
test eax eax +
jz locret_46D565  +
push eax  +
call DeleteObject  +
retn   +
jmp unknown_libname_539  +
jmp loc_46D54B  +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
push ebx  +
push esi  +
mov ebx eax +
test ebx ebx +
jnz loc_46D589  +
mov ebx off_4E64BC +
mov eax [ebp+arg_0] +
mov eax [eax-4] +
mov esi [eax+84h] +
test esi esi +
jz loc_46D5A7  +
mov eax [ebp+arg_0] +
mov eax esi +
call @System@TObject@ClassType$qqrv  +
cmp ebx eax +
jz loc_46D5D1  +
mov eax [ebp+arg_0] +
mov eax [eax-4] +
mov eax [eax+84h] +
call @System@TObject@Free$qqrv  +
mov eax [ebp+arg_0] +
mov ecx [eax-4] +
mov dl 1 +
mov eax ebx +
call dword ptr [eax+2Ch]  +
mov edx [ebp+arg_0] +
mov edx [edx-4] +
mov [edx+84h] eax +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
push 0  +
push ebx  +
push esi  +
xor edx edx +
push ebp  +
push offset loc_46D660  +
push dword ptr fs:[edx]  +
mov fs:[edx] esp +
xor esi esi +
mov ebx eax +
test ebx ebx +
jz loc_46D64A  +
jmp loc_46D645  +
mov eax ebx +
jmp loc_46D5FC  +
inc ebx  +
mov dl [ebx] +
test dl dl +
jz loc_46D60C  +
sub dl 0Ah +
jz loc_46D60C  +
sub dl 3 +
jnz loc_46D5FB  +
mov ecx ebx +
sub ecx eax +
lea edx [ebp+var_4] +
xchg eax edx +
call @@LStrFromPCharLen$qqrr10AnsiStringpci  +
mov eax [ebp+arg_0] +
mov eax [eax-4] +
mov eax [eax+84h] +
mov eax [eax+208h] +
mov edx [ebp+var_4] +
call @Graphics@TCanvas@TextWidth$qqrx17System@AnsiString  +
cmp esi eax +
jge loc_46D639  +
mov esi eax +
cmp byte ptr [ebx] 0Dh +
jnz loc_46D63F  +
inc ebx  +
cmp byte ptr [ebx] 0Ah +
jnz loc_46D645  +
inc ebx  +
cmp byte ptr [ebx] 0 +
jnz loc_46D5F7  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_46D667  +
lea eax [ebp+var_4] +
call unknown_libname_540  +
retn   +
jmp unknown_libname_539  +
jmp loc_46D657  +
mov eax esi +
pop esi  +
pop ebx  +
pop ecx  +
pop ebp  +
retn   +
***
add esp 0FFFFFF70h +
push edi  +
mov edi edx +
mov esi eax +
mov eax dword_4F17A8 +
mov ebx [eax+68h] +
test ebx ebx +
jz loc_46DA2F  +
cmp dword ptr [ebx+23Ch] 0 +
jz loc_46DA2F  +
mov eax edi +
mov edx [ebx+23Ch] +
call unknown_libname_542  +
jmp loc_46DA39  +
mov eax edi +
mov edx [esi+50h] +
call unknown_libname_542  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
push ebp  +
add esp 0FFFFFFF8h +
mov ebx ecx +
mov [esp+8+var_8] edx +
mov esi eax +
mov eax dword_4F17A8 +
mov edi [eax+6Ch] +
test edi edi +
jz loc_46DA6B  +
push ebx  +
xor ecx ecx +
mov edx [esp+0Ch+var_8] +
mov eax edi +
call @Controls@TControl@Perform$qqruiii  +
dec eax  +
jz loc_46DA8B  +
mov ebp [esi+44h] +
cmp edi ebp +
jz loc_46DA87  +
test ebp ebp +
jz loc_46DA87  +
push ebx  +
xor ecx ecx +
mov edx [esp+0Ch+var_8] +
mov eax ebp +
call @Controls@TControl@Perform$qqruiii  +
dec eax  +
jz loc_46DA8B  +
xor eax eax +
jmp loc_46DA8D  +
mov al 1 +
mov [esp+8+var_4] al +
cmp [esp+8+var_4] 0 +
jnz loc_46DAC4  +
mov eax ebx +
mov edx ds:off_448424 +
call @System@@IsClass$qqrp14System@TObjectp17System@TMetaClass  +
test al al +
jz loc_46DAC4  +
cmp byte ptr [ebx+6Ah] 0 +
jz loc_46DAC4  +
cmp byte ptr [ebx+60h] 0 +
jz loc_46DAC4  +
cmp word ptr [ebx+42h] 0 +
setnz dl  +
mov eax ebx +
call @Actnlist@TCustomAction@SetEnabled$qqro  +
mov al [esp+8+var_4] +
pop ecx  +
pop edx  +
pop ebp  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov [esp+1+var_1] 0 +
cmp word ptr [eax+0BAh] 0 +
jz loc_46DAF0  +
mov ecx esp +
mov ebx eax +
mov eax [ebx+0BCh] +
call dword ptr [ebx+0B8h]  +
mov al [esp+1+var_1] +
pop edx  +
pop ebx  +
retn   +
***
mov [esp+1+var_1] 0 +
cmp word ptr [eax+0C2h] 0 +
jz loc_46DB18  +
mov ecx esp +
mov ebx eax +
mov eax [ebx+0C4h] +
call dword ptr [ebx+0C0h]  +
mov al [esp+1+var_1] +
pop edx  +
pop ebx  +
retn   +
***
call GetModuleHandleA  +
mov ebx eax +
test ebx ebx +
jz loc_46DB41  +
push offset aSetlayeredwind  +
push ebx  +
call GetProcAddress  +
mov dword_4E64B8 eax +
pop ebx  +
retn   +
***
mov edx off_4EA828 +
mov eax off_4EA828 +
xor edx edx +
mov [eax] edx +
mov [eax+4] edx +
retn   +
***
xor eax eax +
sub dword_4F17AC 1 +
jnb locret_46DC39  +
mov eax offset dword_46DB9C +
call @System@@InitImports$qqrv  +
call @Forms@_16897  +
push offset aTaskbarcreated  +
call RegisterWindowMessageA  +
mov dword_4F17B0 eax +
mov eax offset @Forms@_16456 +
call sub_49C6A8  +
retn   +
***
pop es  +
add [ebx] bh +
mov al 12h +
mov al 10h +
mov al 32h +
mov al 47h +
add [eax] bh +
mov al 0CAh +
jmp fword ptr [eax-43FFB915h]  +
***
jmp loc_46DED1  +
or eax [eax] +
or [ebp+78h] al +
jz loc_46DF14  +
jz loc_46DF45  +
ins  dx +
jnb $+2  +
add byte ptr ds:(loc_46DF23+1)[eax] dl +
lods   +
test al 47h +
add [edi-583FFFB5h] ah +
dec ebx  +
add [eax+ebp*8] al +
inc edi  +
add [edi+edx*8+47h] ch +
add ah bh +
mov al ds:0D3740047h +
dec ecx  +
add [eax-7BFFB87Bh] dh +
pop ecx  +
inc edi  +
add ah ah +
lea eax [edi+0] +
les esp [edx+47h] +
add [eax-6FFFB5AEh] ch +
dec edi  +
dec edx  +
add [eax-4FFFB5B1h] cl +
push edx  +
dec edx  +
add [edx+ebp*8-2D7FFFBAh] bh +
inc edi  +
add ah cl +
inc esi  +
add al ch +
setalc   +
inc edi  +
add al bh +
push edi  +
inc edi  +
add [eax-33h] al +
inc edi  +
add [eax-33h] ah +
inc edi  +
add [eax+400047CAh] bh +
push edi  +
inc edi  +
add [edi+edx*2+47h] al +
add [eax-53FFB879h] al +
xchg eax [edi+0] +
lods   +
bound eax [edi+0] +
mov esp 38004758h +
inc edi  +
add [eax-3BFFB89Dh] dh +
inc di  +
add [eax+65h] dh +
inc edi  +
add [eax-59h] cl +
inc edi  +
add [eax] dh +
mov [edi+0] al +
or al 0CBh +
inc edi  +
add [eax-3BFFB835h] cl +
mov byte ptr [edi+0] 6Ch +
retf   +
***
pop ds  +
add al [eax] +
jmp dword ptr [eax+10046EEh]  +
***
cmps   +
add [eax] eax +
jmp fword ptr [edi+ecx*8]  +
***
jmp fword ptr [eax]  +
***
add esp 0FFFFFFD8h +
push ebx  +
mov ebx [ebp+arg_0] +
mov ebx [ebx-4] +
mov eax [ebx+8] +
mov [ebp+var_8] eax +
mov eax [ebx+4] +
mov [ebp+var_4] eax +
mov eax [ebx] +
mov [ebp+var_10] eax +
mov eax [ebx+0Ch] +
mov [ebp+var_C] eax +
mov eax [ebp+arg_0] +
mov edx [eax-0Ch] +
mov eax [ebp+arg_0] +
mov eax [eax-8] +
mov eax [eax+10h] +
call @TPen@SetColor$qqr6TColor  +
mov eax [ebp+var_10] +
mov [ebp+var_28] eax +
mov eax [ebp+var_C] +
mov [ebp+var_24] eax +
mov eax [ebx] +
mov [ebp+var_20] eax +
mov eax [ebx+4] +
mov [ebp+var_1C] eax +
mov eax [ebp+var_8] +
mov [ebp+var_18] eax +
mov eax [ebp+var_4] +
mov [ebp+var_14] eax +
lea edx [ebp+var_28] +
mov eax [ebp+arg_0] +
mov eax [eax-8] +
mov ecx 2 +
call sub_45B3B8  +
mov eax [ebp+arg_0] +
mov edx [eax+0Ch] +
mov eax [ebp+arg_0] +
mov eax [eax-8] +
mov eax [eax+10h] +
call @TPen@SetColor$qqr6TColor  +
dec [ebp+var_10]  +
mov eax [ebp+var_8] +
mov [ebp+var_28] eax +
mov eax [ebp+var_4] +
mov [ebp+var_24] eax +
mov eax [ebx+8] +
mov [ebp+var_20] eax +
mov eax [ebx+0Ch] +
mov [ebp+var_1C] eax +
mov eax [ebp+var_10] +
mov [ebp+var_18] eax +
mov eax [ebp+var_C] +
mov [ebp+var_14] eax +
lea edx [ebp+var_28] +
mov eax [ebp+arg_0] +
mov eax [eax-8] +
mov ecx 2 +
call sub_45B3B8  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
add esp 0FFFFFFF4h +
push ebx  +
mov [ebp+var_C] ecx +
mov [ebp+lprc] edx +
mov [ebp+var_8] eax +
mov ebx [ebp+arg_0] +
mov eax [ebp+var_8] +
mov eax [eax+10h] +
mov edx 1 +
call @Graphics@TPen@SetWidth$qqri  +
mov eax [ebp+lprc] +
dec dword ptr [eax+0Ch]  +
mov eax [ebp+lprc] +
dec dword ptr [eax+8]  +
test ebx ebx +
jle loc_46E8D4  +
dec ebx  +
push ebp  +
call sub_46E7C4  +
pop ecx  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
mov eax [ebp+lprc] +
push eax  +
call InflateRect  +
test ebx ebx +
jg loc_46E8BB  +
mov eax [ebp+lprc] +
inc dword ptr [eax+0Ch]  +
mov eax [ebp+lprc] +
inc dword ptr [eax+8]  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 8  +
***
test dl dl +
jz loc_46E8F6  +
add esp 0FFFFFFF0h +
call unknown_libname_535  +
mov ebx edx +
mov esi eax +
xor edx edx +
mov eax esi +
call sub_4A4B20  +
mov byte ptr [esi+40h] 1 +
mov dword ptr [esi+30h] 3E8h +
push esi  +
push offset loc_46E970  +
call @Forms@AllocateHWnd$qqrynpqqrr17Messages@TMessage$v  +
mov [esi+34h] eax +
mov eax esi +
test bl bl +
jz loc_46E931  +
call sub_4BABC8  +
pop large dword ptr fs:0  +
add esp 0Ch +
mov eax esi +
pop esi  +
pop ebx  +
retn   +
push ebx  +
push esi  +
call unknown_libname_536  +
mov ebx edx +
mov esi eax +
mov byte ptr [esi+40h] 0 +
mov eax esi +
call @Extctrls@TTimer@UpdateTimer$qqrv  +
mov eax [esi+34h] +
call @Forms@DeallocateHWnd$qqrui  +
mov edx ebx +
and dl 0FCh +
mov eax esi +
call sub_4A4B6C  +
test bl bl +
jle loc_46E96D  +
mov eax esi +
call @System@@ClassDestroy$qqrp14System@TObject  +
pop esi  +
pop ebx  +
retn   +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
push edi  +
mov ebx edx +
mov [ebp-4] eax +
mov esi [ebx] +
cmp esi 113h +
jnz loc_46E9C5  +
xor eax eax +
push ebp  +
push offset loc_46E9AA  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov eax [ebp-4] +
mov si 0FFEFh +
call @System@@CallDynaInst$qqrv  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
jmp loc_46E9DD  +
jmp @System@@HandleAnyException$qqrv  +
mov eax off_4EA6C8 +
mov eax [eax] +
mov edx [ebp-4] +
call @TApplication@HandleException$qqrp7TObject  +
call @@DoneExcept$qqrv  +
jmp loc_46E9DD  +
mov eax [ebx+8] +
push eax  +
mov eax [ebx+4] +
push eax  +
push esi  +
mov eax [ebp-4] +
mov eax [eax+34h] +
push eax  +
call DefWindowProcA  +
mov [ebx+0Ch] eax +
pop edi  +
pop esi  +
pop ebx  +
pop ecx  +
pop ebp  +
retn   +
***
push 0  +
push ebx  +
push esi  +
mov ebx eax +
xor eax eax +
push ebp  +
push offset loc_46EA63  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
push 1  +
mov eax [ebx+34h] +
push eax  +
call KillTimer  +
mov esi [ebx+30h] +
test esi esi +
jz loc_46EA4D  +
cmp byte ptr [ebx+40h] 0 +
jz loc_46EA4D  +
cmp word ptr [ebx+3Ah] 0 +
jz loc_46EA4D  +
push 0  +
push esi  +
push 1  +
mov eax [ebx+34h] +
push eax  +
call SetTimer  +
test eax eax +
jnz loc_46EA4D  +
lea edx [ebp+var_4] +
mov eax off_4EA728 +
call @System@LoadResString$qqrp20System@TResStringRec  +
mov ecx [ebp+var_4] +
mov dl 1 +
mov eax ds:off_49A51C +
call sub_4AC17C  +
call @System@@RaiseExcept$qqrv  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_46EA6A  +
lea eax [ebp+var_4] +
call unknown_libname_540  +
retn   +
jmp unknown_libname_539  +
jmp loc_46EA5A  +
pop esi  +
pop ebx  +
pop ecx  +
pop ebp  +
retn   +
***
cmp dl [eax+40h] +
jz locret_46EA7D  +
mov [eax+40h] dl +
call @Extctrls@TTimer@UpdateTimer$qqrv  +
retn   +
***
cmp edx [eax+30h] +
jz locret_46EA8D  +
mov [eax+30h] edx +
call @Extctrls@TTimer@UpdateTimer$qqrv  +
retn   +
***
mov edx [ebp+arg_0] +
jz loc_46EABA  +
test dl dl +
jz loc_46EACA  +
add esp 0FFFFFFF0h +
call unknown_libname_535  +
mov ebx edx +
mov esi eax +
xor edx edx +
mov eax esi +
call sub_47E7A8  +
mov eax ds:dword_46EB50 +
mov [esi+50h] eax +
mov edx 0B9h +
mov eax esi +
call @Controls@TControl@SetWidth$qqri  +
mov edx 29h +
mov eax esi +
call @Controls@TControl@SetHeight$qqri  +
mov byte ptr [esi+21Fh] 2 +
mov dl 2 +
mov eax esi +
call @Extctrls@TCustomPanel@SetBevelOuter$qqr18Controls@TBevelCut  +
mov edx 1 +
mov eax esi +
call @Extctrls@TCustomPanel@SetBevelWidth$qqri  +
mov byte ptr [esi+21Ch] 0 +
mov edx 8000000Fh +
mov eax esi +
call @Controls@TControl@SetColor$qqr15Graphics@TColor  +
mov byte ptr [esi+21Dh] 1 +
mov dl 1 +
mov eax esi +
call @Controls@TWinControl@SetUseDockManager$qqro  +
mov eax esi +
test bl bl +
jz loc_46EB4B  +
call sub_4BABC8  +
pop large dword ptr fs:0  +
add esp 0Ch +
mov eax esi +
pop esi  +
pop ebx  +
retn   +
***
mov esi edx +
mov ebx eax +
mov edx esi +
mov eax ebx +
call @Controls@TWinControl@CreateParams$qqrr22Controls@TCreateParams  +
xor eax eax +
mov al [ebx+21Ch] +
mov eax dword_4E65E8[eax*4] +
or [esi+4] eax +
mov eax off_4EA6D4 +
cmp byte ptr [eax] 0 +
jz loc_46EB9F  +
cmp byte ptr [ebx+1A5h] 0 +
jz loc_46EB9F  +
cmp byte ptr [ebx+21Ch] 1 +
jnz loc_46EB9F  +
and dword ptr [esi+4] 0FF7FFFFFh +
or dword ptr [esi+8] 200h +
and dword ptr [esi+24h] 0FFFFFFFCh +
pop esi  +
pop ebx  +
retn   +
***
push ebx  +
mov ebx eax +
mov eax ebx +
call @Controls@TWinControl@CMBorderChanged$qqrr17Messages@TMessage  +
mov eax ebx +
mov edx [eax] +
call dword ptr [edx+7Ch]  +
pop ebx  +
retn   +
***
mov edx [eax] +
call dword ptr [edx+7Ch]  +
retn   +
***
mov esi edx +
cmp byte ptr [eax+21Eh] 0 +
jnz locret_46EC00  +
mov dword ptr [edx+0Ch] 1 +
retn   +
***
add esp 0FFFFFFECh +
push ebx  +
push esi  +
push edi  +
xor ecx ecx +
mov [ebp+var_14] ecx +
mov edi edx +
mov ebx eax +
xor eax eax +
push ebp  +
push offset loc_46ECF4  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
cmp byte ptr [ebx+21Dh] 0 +
jnz loc_46EC3D  +
lea edx [ebp+var_14] +
mov eax ebx +
call @TControl@GetText$qqrv  +
cmp [ebp+var_14] 0 +
jz loc_46EC49  +
mov eax ebx +
mov edx [eax] +
call dword ptr [edx+7Ch]  +
jmp loc_46ECD5  +
mov esi [ebx+218h] +
cmp byte ptr [ebx+211h] 0 +
jz loc_46EC5E  +
add esi [ebx+214h] +
cmp byte ptr [ebx+212h] 0 +
jz loc_46EC6D  +
add esi [ebx+214h] +
test esi esi +
jle loc_46ECD5  +
mov eax [ebx+48h] +
mov [ebp+Rect.right] eax +
mov eax [ebx+4Ch] +
mov [ebp+Rect.bottom] eax +
mov eax [edi+8] +
mov eax [eax+10h] +
cmp eax [ebp+Rect.right] +
jz loc_46ECA9  +
xor eax eax +
mov [ebp+Rect.top] eax +
mov eax [ebp+Rect.right] +
sub eax esi +
dec eax  +
mov [ebp+Rect.left] eax +
push 0FFFFFFFFh  +
lea eax [ebp+Rect] +
push eax  +
mov eax ebx +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call InvalidateRect  +
mov eax [edi+8] +
mov eax [eax+14h] +
cmp eax [ebp+Rect.bottom] +
jz loc_46ECD5  +
xor eax eax +
mov [ebp+Rect.left] eax +
mov eax [ebp+Rect.bottom] +
sub eax esi +
dec eax  +
mov [ebp+Rect.top] eax +
push 0FFFFFFFFh  +
lea eax [ebp+Rect] +
push eax  +
mov eax ebx +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call InvalidateRect  +
mov edx edi +
mov eax ebx +
call @Controls@TWinControl@WMWindowPosChanged$qqrr24Messages@TWMWindowPosMsg  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_46ECFB  +
lea eax [ebp+var_14] +
call unknown_libname_540  +
retn   +
jmp unknown_libname_539  +
jmp loc_46ECEB  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
mov edx [ebp+arg_0] +
mov dword ptr [edx-4] 80000014h +
cmp al 1 +
jnz loc_46ED1F  +
mov edx [ebp+arg_0] +
mov dword ptr [edx-4] 80000010h +
mov edx [ebp+arg_0] +
mov dword ptr [edx-8] 80000010h +
cmp al 1 +
jnz loc_46ED37  +
mov eax [ebp+arg_0] +
mov dword ptr [eax-8] 80000014h +
pop ebp  +
retn   +
***
add esp 0FFFFFFE4h +
push ebx  +
push esi  +
push edi  +
xor edx edx +
mov [ebp+var_1C] edx +
mov ebx eax +
xor eax eax +
push ebp  +
push offset loc_46EE85  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
lea edx [ebp+Rect] +
mov eax ebx +
mov ecx [eax] +
call dword ptr [ecx+44h]  +
mov al [ebx+212h] +
test al al +
jz loc_46ED91  +
push ebp  +
call @ExtCtrls@_16491  +
pop ecx  +
mov eax [ebp+var_8] +
push eax  +
mov eax [ebx+214h] +
push eax  +
lea edx [ebp+Rect] +
mov ecx [ebp+var_4] +
mov eax [ebx+208h] +
call unknown_libname_211  +
mov eax [ebx+70h] +
push eax  +
mov edx [ebx+218h] +
push edx  +
lea edx [ebp+Rect] +
mov ecx eax +
mov eax [ebx+208h] +
call unknown_libname_211  +
mov al [ebx+211h] +
test al al +
jz loc_46EDD9  +
push ebp  +
call @ExtCtrls@_16491  +
pop ecx  +
mov eax [ebp+var_8] +
push eax  +
mov eax [ebx+214h] +
push eax  +
lea edx [ebp+Rect] +
mov ecx [ebp+var_4] +
mov eax [ebx+208h] +
call unknown_libname_211  +
mov esi [ebx+208h] +
mov edx [ebx+70h] +
mov eax [esi+14h] +
call @Graphics@TBrush@SetColor$qqr15Graphics@TColor  +
lea edx [ebp+Rect] +
mov eax esi +
call @Graphics@TCanvas@FillRect$qqrrx11Types@TRect  +
mov dl 1 +
mov eax [esi+14h] +
call @Graphics@TBrush@SetStyle$qqr20Graphics@TBrushStyle  +
mov edx [ebx+68h] +
mov eax esi +
call unknown_libname_155  +
mov edx offset _str_W.Text +
mov eax esi +
call @Graphics@TCanvas@TextHeight$qqrx17System@AnsiString  +
mov edx [ebp+Rect.bottom] +
add edx [ebp+Rect.top] +
sub edx eax +
sar edx 1 +
jns loc_46EE23  +
adc edx 0 +
mov [ebp+Rect.top] edx +
add eax edx +
mov [ebp+Rect.bottom] eax +
xor eax eax +
mov al [ebx+21Fh] +
mov edi dword_4E65F0[eax*4] +
or edi 44h +
mov edx edi +
mov eax ebx +
call @Controls@TControl@DrawTextBiDiModeFlags$qqri  +
mov edi eax +
push edi  +
lea eax [ebp+Rect] +
push eax  +
push 0FFFFFFFFh  +
lea edx [ebp+var_1C] +
mov eax ebx +
call @TControl@GetText$qqrv  +
mov eax [ebp+var_1C] +
call unknown_libname_550  +
push eax  +
mov eax esi +
call @Graphics@TCanvas@GetHandle$qqrv  +
push eax  +
call DrawTextA  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_46EE8C  +
lea eax [ebp+var_1C] +
call unknown_libname_540  +
retn   +
jmp unknown_libname_539  +
jmp loc_46EE7C  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
mov [eax+21Fh] dl +
mov [ebx+211h] dl +
mov eax ebx +
call sub_4796B0  +
mov eax ebx +
mov edx [eax] +
call dword ptr [edx+7Ch]  +
pop ebx  +
retn   +
***
mov [ebx+212h] dl +
mov eax ebx +
call sub_4796B0  +
mov eax ebx +
mov edx [eax] +
call dword ptr [edx+7Ch]  +
pop ebx  +
retn   +
***
mov [ebx+214h] edx +
mov eax ebx +
call sub_4796B0  +
mov eax ebx +
mov edx [eax] +
call dword ptr [edx+7Ch]  +
pop ebx  +
retn   +
***
mov [ebx+218h] edx +
mov eax ebx +
call sub_4796B0  +
mov eax ebx +
mov edx [eax] +
call dword ptr [edx+7Ch]  +
pop ebx  +
retn   +
***
mov al [eax+21Fh] +
retn   +
***
mov esi edx +
add esp 0FFFFFFE8h +
push ebx  +
push esi  +
push edi  +
mov [ebp+var_8] edx +
mov [ebp+var_4] eax +
mov eax [ebp+var_4] +
cmp byte ptr [eax+5Ch] 0 +
jz loc_46F0B8  +
mov eax [ebp+var_4] +
mov byte ptr [eax+210h] 1 +
xor edx edx +
push ebp  +
push offset loc_46F0B1  +
push dword ptr fs:[edx]  +
mov fs:[edx] esp +
mov eax [ebp+var_8] +
mov eax [eax+4] +
lea esi [eax+44h] +
lea edi [ebp+var_18] +
movs   +
movs   +
movs   +
movs   +
mov eax [ebp+var_4] +
mov al [eax+5Bh] +
dec al  +
jz loc_46F03E  +
dec al  +
jz loc_46F057  +
dec al  +
jz loc_46EFEF  +
dec al  +
jz loc_46F00C  +
jmp loc_46F087  +
mov eax [ebp+var_4] +
cmp dword ptr [eax+48h] 0 +
jnz loc_46F087  +
mov edx [ebp+var_10] +
sub edx [ebp+var_18] +
mov eax [ebp+var_4] +
call @Controls@TControl@SetWidth$qqri  +
jmp loc_46F087  +
mov eax [ebp+var_4] +
cmp dword ptr [eax+48h] 0 +
jnz loc_46F087  +
mov eax [ebp+var_10] +
sub eax [ebp+var_18] +
push eax  +
mov edx [ebp+var_4] +
mov edx [edx+4Ch] +
push edx  +
mov edx [ebp+var_4] +
mov ecx [edx+44h] +
mov edx [ebp+var_4] +
mov edx [edx+40h] +
sub edx eax +
mov eax [ebp+var_4] +
mov ebx [eax] +
call dword ptr [ebx+84h]  +
jmp loc_46F087  +
mov eax [ebp+var_4] +
cmp dword ptr [eax+4Ch] 0 +
jnz loc_46F087  +
mov edx [ebp+var_C] +
sub edx [ebp+var_14] +
mov eax [ebp+var_4] +
call @Controls@TControl@SetHeight$qqri  +
jmp loc_46F087  +
mov eax [ebp+var_4] +
cmp dword ptr [eax+4Ch] 0 +
jnz loc_46F087  +
mov eax [ebp+var_C] +
sub eax [ebp+var_14] +
mov edx [ebp+var_4] +
mov edx [edx+48h] +
push edx  +
push eax  +
mov edx [ebp+var_4] +
mov ecx [edx+44h] +
sub ecx eax +
mov eax [ebp+var_4] +
mov edx [eax+40h] +
mov eax [ebp+var_4] +
mov ebx [eax] +
call dword ptr [ebx+84h]  +
mov edx [ebp+var_8] +
mov eax [ebp+var_4] +
call @Controls@TWinControl@CMDockClient$qqrr22Controls@TCMDockClient  +
call @System@@TryFinallyExit$qqrv  +
jmp loc_46F0C3  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_46F0B8  +
mov eax [ebp+var_4] +
mov byte ptr [eax+210h] 0 +
retn   +
jmp unknown_libname_539  +
jmp loc_46F0A6  +
mov edx [ebp+var_8] +
mov eax [ebp+var_4] +
call @Controls@TWinControl@CMDockClient$qqrr22Controls@TCMDockClient  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
push edi  +
mov edi ecx +
mov esi edx +
mov ebx eax +
cmp byte ptr [ebx+210h] 0 +
jnz loc_46F0ED  +
mov ecx edi +
mov edx esi +
mov eax ebx +
call @Controls@TWinControl@CanAutoSize$qqrrit1  +
test al al +
jnz loc_46F0F1  +
xor eax eax +
jmp loc_46F0F3  +
mov al 1 +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
xor eax eax +
push ebp  +
push offset loc_46F11D  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
inc dword_4F17C4  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_46F124  +
retn   +
jmp unknown_libname_539  +
jmp locret_46F11C  +
pop ebp  +
retn   +
***
sub dword_4F17C4 1 +
jnb locret_46F14B  +
mov eax ds:off_471D9C +
call sub_49C374  +
mov edx ds:off_471D9C +
mov eax ds:off_46DCD4 +
call sub_49C3C0  +
retn   +
***
jmp dword ptr [eax+0]  +
***
push edi  +
push ebx  +
push esi  +
push edi  +
mov esi [ebp+arg_4] +
mov ebx [ebp+hWnd] +
xor edi edi +
cmp esi 110h +
jnz loc_46FAA2  +
mov eax ebx +
call @Dialogs@_16426  +
mov eax dword_4E6600 +
mov [eax+3Ch] ebx +
mov eax dword_4E6600 +
mov eax [eax+40h] +
push eax  +
push 0FFFFFFFCh  +
push ebx  +
call SetWindowLongA  +
mov edx dword_4E6600 +
mov [edx+34h] eax +
mov eax [ebp+lParam] +
push eax  +
mov eax [ebp+wParam] +
push eax  +
push esi  +
push ebx  +
mov eax dword_4E6600 +
mov eax [eax+40h] +
push eax  +
call CallWindowProcA  +
xor eax eax +
mov dword_4E6600 eax +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 10h  +
***
test dl dl +
jz loc_46FABA  +
add esp 0FFFFFFF0h +
call unknown_libname_535  +
mov ebx edx +
mov esi eax +
xor edx edx +
mov eax esi +
call sub_4A4B20  +
mov byte ptr [esi+30h] 1 +
push esi  +
push offset loc_46FB88  +
call sub_4A5BA4  +
mov [esi+40h] eax +
mov eax esi +
test bl bl +
jz loc_46FAEE  +
call sub_4BABC8  +
pop large dword ptr fs:0  +
add esp 0Ch +
mov eax esi +
pop esi  +
pop ebx  +
retn   +
push ebx  +
push esi  +
call unknown_libname_536  +
mov ebx edx +
mov esi eax +
mov eax [esi+40h] +
test eax eax +
jz loc_46FB0B  +
call @Forms@FreeObjectInstance$qqrpv  +
mov edx ebx +
and dl 0FCh +
mov eax esi +
call sub_4A4B6C  +
test bl bl +
jle loc_46FB22  +
mov eax esi +
call @System@@ClassDestroy$qqrp14System@TObject  +
pop esi  +
pop ebx  +
retn   +
xor ecx ecx +
mov edx [edx] +
cmp edx dword_4F17CC +
jnz loc_46FB4D  +
cmp dword ptr [eax+38h] 0 +
jz loc_46FB4D  +
mov edx off_4EA6C8 +
mov edx [edx] +
mov eax [eax+38h] +
xchg eax edx +
call @Forms@TApplication@HelpContext$qqri  +
mov cl 1 +
mov eax ecx +
retn   +
push ebx  +
push esi  +
push edi  +
mov esi edx +
mov ebx eax +
mov edi [ebx+3Ch] +
test edi edi +
jz loc_46FB78  +
mov eax [esi+8] +
push eax  +
mov eax [esi+4] +
push eax  +
mov eax [esi] +
push eax  +
push edi  +
mov eax [ebx+34h] +
push eax  +
call CallWindowProcA  +
mov [esi+0Ch] eax +
jmp loc_46FB81  +
mov edx esi +
mov eax ebx +
call nullsub_16  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
push edi  +
mov [ebp-4] eax +
xor eax eax +
push ebp  +
push offset loc_46FBB2  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov eax [ebp-4] +
mov ecx [eax] +
call dword ptr [ecx+30h]  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
jmp loc_46FBCB  +
jmp @System@@HandleAnyException$qqrv  +
mov eax off_4EA6C8 +
mov eax [eax] +
mov edx [ebp-4] +
call @TApplication@HandleException$qqrp7TObject  +
call @@DoneExcept$qqrv  +
pop edi  +
pop esi  +
pop ebx  +
pop ecx  +
pop ebp  +
retn   +
***
call dword ptr [ecx-14h]  +
retn   +
***
push esi  +
mov esi eax +
mov eax esi +
mov ecx [eax] +
call dword ptr [ecx-10h]  +
mov eax esi +
mov si 0FFEFh +
call @System@@CallDynaInst$qqrv  +
pop esi  +
retn   +
***
mov ebx edx +
mov si 0FFEEh +
call @System@@CallDynaInst$qqrv  +
xor eax eax +
mov [ebx+0Ch] eax +
pop esi  +
pop ebx  +
retn   +
***
mov eax esi +
mov ecx [eax] +
call dword ptr [ecx-10h]  +
xor eax eax +
mov [esi+3Ch] eax +
pop esi  +
retn   +
***
add esp 0FFFFFFE8h +
push ebx  +
push esi  +
mov esi ecx +
mov ebx edx +
mov [ebp+var_8] eax +
call GetActiveWindow  +
mov [ebp+hWnd] eax +
xor eax eax +
call sub_463410  +
mov [ebp+var_14] eax +
call sub_46332C  +
mov [ebp+var_18] eax +
xor eax eax +
push ebp  +
push offset loc_46FCE3  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov eax [ebp+var_8] +
push eax  +
mov eax [eax] +
mov eax [eax+34h] +
push eax  +
mov eax off_4EA6C8 +
mov eax [eax] +
call @Forms@TApplication@HookMainWindow$qqrynpqqrr17Messages@TMessage$o  +
fnstcw  [ebp+var_2] +
xor eax eax +
push ebp  +
push offset loc_46FCB5  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov eax [ebp+var_8] +
mov dword_4E6600 eax +
push esi  +
call ebx  +
mov [ebp+var_C] eax +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_46FCBC  +
fnclex   +
fldcw  [ebp+var_2] +
mov eax [ebp+var_8] +
push eax  +
mov eax [eax] +
mov eax [eax+34h] +
push eax  +
mov eax off_4EA6C8 +
mov eax [eax] +
call @Forms@TApplication@UnhookMainWindow$qqrynpqqrr17Messages@TMessage$o  +
retn   +
jmp unknown_libname_539  +
jmp loc_46FC99  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_46FCEA  +
mov eax [ebp+var_14] +
call sub_4634C4  +
mov eax [ebp+hWnd] +
push eax  +
call SetActiveWindow  +
mov eax [ebp+var_18] +
call sub_463334  +
retn   +
jmp unknown_libname_539  +
jmp loc_46FCC9  +
mov eax [ebp+var_C] +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
jz loc_46FD06  +
jz loc_46FD1A  +
push ecx  +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_C] +
mov ebx [ebp+arg_4] +
mov esi [ebp+hWnd] +
xor eax eax +
mov [ebp+var_4] eax +
cmp ebx 110h +
jnz loc_46FD79  +
mov eax dword_4E6600 +
mov [eax+3Ch] esi +
mov eax dword_4E6600 +
mov eax [eax+40h] +
push eax  +
push 0FFFFFFFCh  +
push esi  +
call SetWindowLongA  +
mov edx dword_4E6600 +
mov [edx+34h] eax +
push edi  +
mov eax [ebp+wParam] +
push eax  +
push ebx  +
push esi  +
mov eax dword_4E6600 +
mov eax [eax+40h] +
push eax  +
call CallWindowProcA  +
xor eax eax +
mov dword_4E6600 eax +
jmp loc_46FD94  +
cmp ebx 4Eh +
jnz loc_46FD94  +
cmp dword ptr [edi+8] 0FFFFFDA7h +
jnz loc_46FD94  +
push 0FFFFFFF8h  +
push esi  +
call GetWindowLongA  +
call @Dialogs@_16426  +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
pop ecx  +
pop ebp  +
retn 10h  +
***
test dl dl +
jz loc_46FDAE  +
add esp 0FFFFFFF0h +
call unknown_libname_535  +
mov ebx edx +
mov esi eax +
xor edx edx +
mov eax esi +
call @Dialogs@TCommonDialog@$bctr$qqrp18Classes@TComponent  +
mov dl 1 +
mov eax ds:off_49ABC4 +
call @System@TObject@$bctr$qqrv  +
mov [esi+58h] eax +
mov eax ds:dword_46FE14 +
mov [esi+5Ch] eax +
mov al ds:byte_46FE18 +
mov [esi+0B0h] al +
mov dl 1 +
mov eax ds:off_49ABC4 +
call @System@TObject@$bctr$qqrv  +
mov [esi+7Ch] eax +
mov dword ptr [esi+64h] 1 +
mov byte ptr [esi+80h] 0 +
mov eax esi +
test bl bl +
jz loc_46FE0F  +
call sub_4BABC8  +
pop large dword ptr fs:0  +
add esp 0Ch +
mov eax esi +
pop esi  +
pop ebx  +
retn   +
***
call unknown_libname_536  +
mov ebx edx +
mov esi eax +
mov eax [esi+7Ch] +
call @System@TObject@Free$qqrv  +
mov eax [esi+58h] +
call @System@TObject@Free$qqrv  +
mov edx ebx +
and dl 0FCh +
mov eax esi +
call loc_46FAF4  +
test bl bl +
jle loc_46FE4E  +
mov eax esi +
call @System@@ClassDestroy$qqrp14System@TObject  +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
mov edi eax +
mov eax edi +
call @Dialogs@TOpenDialog@GetFileNames$qqrr7tagOFNA  +
mov eax edi +
mov si 0FFEDh +
call @System@@CallDynaInst$qqrv  +
mov ebx eax +
mov eax [edi+7Ch] +
mov edx [eax] +
call dword ptr [edx+44h]  +
mov eax ebx +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
mov [esp+1+var_1] 1 +
jz loc_46FFBB  +
mov ebx eax +
mov edx eax +
mov eax [ebx+8Ch] +
call dword ptr [ebx+88h]  +
pop ebx  +
retn   +
***
jz loc_46FFDB  +
mov ebx eax +
mov edx eax +
mov eax [ebx+94h] +
call dword ptr [ebx+90h]  +
pop ebx  +
retn   +
***
jz loc_46FFFB  +
mov ebx eax +
mov edx eax +
mov eax [ebx+9Ch] +
call dword ptr [ebx+98h]  +
pop ebx  +
retn   +
***
push 0  +
mov esi edx +
mov ebx eax +
mov edx esi +
mov eax ebx +
call @Classes@TComponent@DefineProperties$qqrp14Classes@TFiler  +
push ebx  +
push offset unknown_libname_572  +
push 0  +
push 0  +
xor ecx ecx +
mov edx offset _str_FileEditStyle.Text +
mov eax esi +
mov ebx [eax] +
call dword ptr [ebx+4]  +
pop esi  +
pop ebx  +
retn   +
***
mov ebx edx +
mov esi eax +
mov eax ebx +
call unknown_libname_540  +
test esi esi +
jz loc_4700C0  +
mov eax ebx +
mov ecx offset dword_4700CC +
mov edx esi +
call @System@@LStrCat3$qqrv  +
mov eax [ebx] +
call unknown_libname_550  +
mov dl 7Ch +
call @Sysutils@AnsiStrScan$qqrpcc  +
test eax eax +
jz loc_4700C0  +
mov byte ptr [eax] 0 +
inc eax  +
mov dl 7Ch +
call @Sysutils@AnsiStrScan$qqrpcc  +
test eax eax +
jnz loc_4700B1  +
pop esi  +
pop ebx  +
retn   +
***
add esp 0FFFFFF98h +
push ebx  +
push esi  +
xor ecx ecx +
mov [ebp+var_8] ecx +
mov [ebp+var_C] ecx +
mov [ebp+var_10] ecx +
mov [ebp+var_4] edx +
mov ebx eax +
xor eax eax +
push ebp  +
push offset loc_470381  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov eax [ebx+7Ch] +
mov edx [eax] +
call dword ptr [edx+44h]  +
lea eax [ebp+var_68] +
xor ecx ecx +
mov edx 58h +
call @System@@FillChar$qqrv  +
mov eax off_4EA8BC +
cmp dword ptr [eax] 5 +
jl loc_470121  +
mov eax off_4EA8B8 +
cmp dword ptr [eax] 2 +
jz loc_47013F  +
mov eax off_4EA8B8 +
cmp dword ptr [eax] 1 +
jnz loc_470148  +
mov eax off_4EA8BC +
cmp dword ptr [eax] 4 +
jl loc_470148  +
mov eax off_4EA8C0 +
cmp dword ptr [eax] 5Ah +
jl loc_470148  +
mov [ebp+var_68] 58h +
jmp loc_47014F  +
mov [ebp+var_68] 4Ch +
mov eax hInstance +
mov [ebp+var_60] eax +
lea edx [ebp+var_8] +
mov eax [ebx+60h] +
call sub_470080  +
mov eax [ebp+var_8] +
call unknown_libname_550  +
mov [ebp+var_5C] eax +
mov eax [ebx+64h] +
mov [ebp+var_50] eax +
mov [ebx+68h] eax +
test byte ptr [ebx+5Ch] 40h +
jz loc_470185  +
mov [ebp+var_48] 0FFEFh +
jmp loc_47018C  +
mov [ebp+var_48] 104h +
mov edx [ebp+var_48] +
add edx 2 +
lea eax [ebp+var_C] +
call @System@@LStrSetLength$qqrv  +
mov eax [ebp+var_C] +
call unknown_libname_550  +
mov esi eax +
mov [ebp+var_4C] esi +
mov edx [ebp+var_48] +
add edx 2 +
mov eax esi +
xor ecx ecx +
call @System@@FillChar$qqrv  +
mov eax [ebx+78h] +
call unknown_libname_550  +
mov edx eax +
mov ecx [ebp+var_48] +
mov eax [ebp+var_4C] +
call @Sysutils@StrLCopy$qqrpcpxcui  +
cmp dword ptr [ebx+6Ch] 0 +
jnz loc_4701E4  +
cmp byte_4E65FC 0 +
jz loc_4701E4  +
mov eax offset dword_470390 +
mov [ebp+var_3C] eax +
jmp loc_4701EF  +
mov eax [ebx+6Ch] +
call unknown_libname_550  +
mov [ebp+var_3C] eax +
mov eax [ebx+70h] +
call unknown_libname_550  +
mov [ebp+var_38] eax +
mov [ebp+var_34] 20h +
xor eax eax +
mov [ebp+var_14] eax +
xor eax eax +
mov esi offset unk_4E6608 +
mov edx eax +
cmp dl 1Fh +
ja loc_47021B  +
and edx 7Fh +
bt [ebx+5Ch] edx +
jnb loc_470222  +
mov edx [esi] +
or [ebp+var_34] edx +
inc eax  +
add esi 4 +
cmp al 16h +
jnz loc_47020D  +
mov eax off_4EA6D4 +
cmp byte ptr [eax] 0 +
jz loc_470296  +
xor [ebp+var_34] 80000h +
mov eax off_4EA8BC +
cmp dword ptr [eax] 5 +
jl loc_47024F  +
mov eax off_4EA8B8 +
cmp dword ptr [eax] 2 +
jz loc_47026D  +
mov eax off_4EA8B8 +
cmp dword ptr [eax] 1 +
jnz loc_47029D  +
mov eax off_4EA8BC +
cmp dword ptr [eax] 4 +
jl loc_47029D  +
mov eax off_4EA8C0 +
cmp dword ptr [eax] 5Ah +
jl loc_47029D  +
xor eax eax +
mov esi offset unk_4E6660 +
mov edx eax +
cmp dl 7 +
ja loc_470285  +
and edx 7Fh +
bt [ebx+0B0h] edx +
jnb loc_47028C  +
mov edx [esi] +
or [ebp+var_14] edx +
inc eax  +
add esi 4 +
cmp al 1 +
jnz loc_470274  +
jmp loc_47029D  +
and [ebp+var_34] 0FFF7FFFFh +
lea eax [ebp+var_10] +
mov edx [ebx+74h] +
call unknown_libname_543  +
cmp [ebp+var_10] 0 +
jnz loc_4702D1  +
test byte ptr [ebp+var_34+2] 8 +
jnz loc_4702D1  +
lea edx [ebp+var_10] +
mov eax [ebx+78h] +
call @Sysutils@ExtractFileExt$qqrx17System@AnsiString  +
lea eax [ebp+var_10] +
mov ecx 1 +
mov edx 1 +
call @System@@LStrDelete$qqrv  +
cmp [ebp+var_10] 0 +
jz loc_4702E2  +
mov eax [ebp+var_10] +
call unknown_libname_550  +
mov [ebp+var_2C] eax +
test byte ptr [ebx+5Eh] 1 +
jnz loc_4702F2  +
mov eax off_4EA6D4 +
cmp byte ptr [eax] 0 +
jnz loc_4702FB  +
mov [ebp+var_24] offset @Dialogs@_16427 +
jmp loc_470302  +
mov [ebp+var_24] offset @Dialogs@_16440 +
mov eax [ebx+44h] +
test eax eax +
jz loc_470310  +
or [ebp+var_34] 40h +
mov [ebp+var_20] eax +
mov eax off_4EA6C8 +
mov eax [eax] +
mov eax [eax+30h] +
mov [ebp+var_64] eax +
lea ecx [ebp+var_68] +
mov edx [ebp+var_4] +
mov eax ebx +
mov esi [eax] +
call dword ptr [esi+38h]  +
mov esi eax +
test esi esi +
jz loc_470366  +
lea edx [ebp+var_68] +
mov eax ebx +
call @Dialogs@TOpenDialog@GetFileNames$qqrr7tagOFNA  +
test byte ptr [ebp+var_34+1] 4 +
jz loc_470349  +
or dword ptr [ebx+5Ch] 80h +
jmp loc_470350  +
and dword ptr [ebx+5Ch] 0FFFFFF7Fh +
test byte ptr [ebp+var_34] 1 +
jz loc_47035C  +
or dword ptr [ebx+5Ch] 1 +
jmp loc_470360  +
and dword ptr [ebx+5Ch] 0FFFFFFFEh +
mov eax [ebp+var_50] +
mov [ebx+64h] eax +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_470388  +
lea eax [ebp+var_10] +
mov edx 3 +
call unknown_libname_541  +
retn   +
jmp unknown_libname_539  +
jmp loc_470373  +
mov eax esi +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
push ebx  +
push esi  +
push edi  +
mov edi edx +
mov esi eax +
mov eax [ebp+arg_0] +
mov dl [eax-1] +
mov eax esi +
call @Sysutils@AnsiStrScan$qqrpcc  +
mov ebx eax +
test ebx ebx +
jnz loc_4703C5  +
mov eax edi +
mov edx esi +
call unknown_libname_545  +
mov eax esi +
call @Sysutils@StrEnd$qqrpxc  +
mov ebx eax +
jmp loc_4703D3  +
mov ecx ebx +
sub ecx esi +
mov eax edi +
mov edx esi +
call @@LStrFromPCharLen$qqrr10AnsiStringpci  +
inc ebx  +
mov eax ebx +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
push 0  +
push 0  +
push ebx  +
mov ebx eax +
xor eax eax +
push ebp  +
push offset loc_4704C1  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov eax [ebp+arg_0] +
push eax  +
lea edx [ebp+var_4] +
mov eax ebx +
call @Dialogs@_16455  +
pop ecx  +
mov ebx eax +
mov eax [ebp+arg_0] +
push eax  +
lea edx [ebp+var_8] +
mov eax ebx +
call @Dialogs@_16455  +
pop ecx  +
mov ebx eax +
cmp [ebp+var_8] 0 +
jnz loc_47042F  +
mov eax [ebp+arg_0] +
mov eax [eax-8] +
mov eax [eax+7Ch] +
mov edx [ebp+var_4] +
mov ecx [eax] +
call dword ptr [ecx+38h]  +
jmp loc_4704A6  +
mov eax [ebp+var_4] +
call sub_4A8FE8  +
cmp byte ptr [eax] 5Ch +
jz loc_470449  +
lea eax [ebp+var_4] +
mov edx offset _str___10.Text +
call @System@@LStrCat$qqrv  +
mov eax [ebp+var_8] +
cmp byte ptr [eax] 5Ch +
jz loc_47047E  +
mov eax [ebp+var_8] +
call sub_4BB610  +
cmp eax 3 +
jle loc_470470  +
mov eax [ebp+var_8] +
cmp byte ptr [eax+1] 3Ah +
jnz loc_470470  +
mov eax [ebp+var_8] +
cmp byte ptr [eax+2] 5Ch +
jz loc_47047E  +
lea eax [ebp+var_8] +
mov ecx [ebp+var_8] +
mov edx [ebp+var_4] +
call @System@@LStrCat3$qqrv  +
mov eax [ebp+arg_0] +
mov eax [eax-8] +
mov eax [eax+7Ch] +
mov edx [ebp+var_8] +
mov ecx [eax] +
call dword ptr [ecx+38h]  +
mov eax [ebp+arg_0] +
push eax  +
lea edx [ebp+var_8] +
mov eax ebx +
call @Dialogs@_16455  +
pop ecx  +
mov ebx eax +
cmp [ebp+var_8] 0 +
jnz loc_470449  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4704C8  +
lea eax [ebp+var_8] +
mov edx 2 +
call unknown_libname_541  +
retn   +
jmp unknown_libname_539  +
jmp loc_4704B3  +
pop ebx  +
pop ecx  +
pop ecx  +
pop ebp  +
retn   +
***
add esp 0FFFFFFF4h +
push ebx  +
xor ecx ecx +
mov [ebp+var_C] ecx +
mov [ebp+var_8] eax +
xor eax eax +
push ebp  +
push offset loc_470587  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov [ebp+var_1] 0 +
mov eax [ebp+var_8] +
test byte ptr [eax+5Ch] 40h +
jz loc_47051D  +
mov eax [ebp+var_8] +
test byte ptr [eax+5Eh] 1 +
jnz loc_470519  +
mov eax off_4EA6D4 +
cmp byte ptr [eax] 0 +
jnz loc_47051D  +
mov [ebp+var_1] 20h +
mov eax [ebp+var_8] +
test byte ptr [eax+5Ch] 40h +
jz loc_470550  +
push ebp  +
mov eax [edx+1Ch] +
call @Dialogs@_16456  +
pop ecx  +
lea ecx [ebp+var_C] +
mov eax [ebp+var_8] +
mov eax [eax+7Ch] +
xor edx edx +
mov ebx [eax] +
call dword ptr [ebx+0Ch]  +
mov edx [ebp+var_C] +
mov eax [ebp+var_8] +
add eax 78h +
call unknown_libname_542  +
jmp loc_470571  +
push ebp  +
mov eax [edx+1Ch] +
mov edx [ebp+var_8] +
add edx 78h +
call @Dialogs@_16455  +
pop ecx  +
mov eax [ebp+var_8] +
mov edx [eax+78h] +
mov eax [ebp+var_8] +
mov eax [eax+7Ch] +
mov ecx [eax] +
call dword ptr [ecx+38h]  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_47058E  +
lea eax [ebp+var_C] +
call unknown_libname_540  +
retn   +
jmp unknown_libname_539  +
jmp loc_47057E  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
push edi  +
mov esi edx +
mov ebx eax +
mov edi [ebx+3Ch] +
test edi edi +
jz loc_4705D3  +
test byte ptr [ebx+5Eh] 1 +
jnz loc_4705CA  +
push esi  +
push 45Fh  +
push edi  +
call GetDlgItem  +
push eax  +
call GetWindowRect  +
push 2  +
push esi  +
mov eax [ebx+3Ch] +
push eax  +
push 0  +
call MapWindowPoints  +
jmp loc_4705E1  +
push esi  +
push edi  +
call GetClientRect  +
jmp loc_4705E1  +
push 0  +
push esi  +
xor ecx ecx +
xor edx edx +
xor eax eax +
call sub_49B708  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
add esp 0FFFFFEF8h +
mov esi edx +
mov ebx eax +
mov eax off_4EA6D4 +
cmp byte ptr [eax] 0 +
jz loc_47062B  +
cmp dword ptr [ebx+3Ch] 0 +
jz loc_47062B  +
mov eax esp +
push eax  +
push 105h  +
push 465h  +
mov eax [ebx+3Ch] +
push eax  +
call GetParent  +
push eax  +
call SendMessageA  +
mov edx esi +
mov eax esp +
call sub_4A9380  +
jmp loc_470635  +
mov eax esi +
mov edx [ebx+78h] +
call unknown_libname_542  +
add esp 108h +
pop esi  +
pop ebx  +
retn   +
***
cmp dword ptr [eax+3Ch] 0 +
jz loc_47064A  +
mov eax [eax+68h] +
retn   +
mov eax [eax+64h] +
retn   +
***
push edi  +
mov esi edx +
mov edi eax +
mov eax esi +
call sub_4BB610  +
mov ebx eax +
cmp ebx 1 +
jle loc_470686  +
mov edx ebx +
mov eax esi +
call sub_4ACCC8  +
test al al +
jz loc_470686  +
mov ecx ebx +
dec ecx  +
mov edx esi +
mov eax offset _str__.Text +
call sub_4ACCFC  +
test al al +
jnz loc_470686  +
dec ebx  +
lea eax [edi+6Ch] +
push eax  +
mov ecx ebx +
mov edx 1 +
mov eax esi +
call @System@@LStrCopy$qqrv  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov edx offset loc_4CAA70 +
mov eax ebx +
call @Dialogs@TOpenDialog@DoExecute$qqrpv  +
cmp eax 1 +
sbb eax eax +
inc eax  +
pop ebx  +
retn   +
***
jz loc_4706D9  +
mov ebx eax +
mov eax [ebx+0ACh] +
call dword ptr [ebx+0A8h]  +
pop ebx  +
retn   +
***
mov edx offset loc_4CAA76 +
mov eax ebx +
call @Dialogs@TOpenDialog@DoExecute$qqrpv  +
cmp eax 1 +
sbb eax eax +
inc eax  +
pop ebx  +
retn   +
***
add esp 0FFFFF3FCh +
push ebx  +
push esi  +
push edi  +
mov [ebp+var_4] edx +
mov ebx eax +
lea eax [ebp+var_C04] +
push eax  +
push ebx  +
call sub_450C50  +
lea ecx [ebp+var_804] +
lea edx [ebp+var_404] +
call sub_450454  +
cmp dword ptr [ebx] 0 +
jz loc_4707EF  +
lea eax [ebp+var_404] +
call @Sysutils@StrLen$qqrpxc  +
mov ebx eax +
add ebx 8 +
lea eax [ebp+var_804] +
call @Sysutils@StrLen$qqrpxc  +
add ebx eax +
lea eax [ebp+var_C04] +
call @Sysutils@StrLen$qqrpxc  +
add ebx eax +
add ebx 3 +
push ebx  +
push 42h  +
call GlobalAlloc  +
mov edx [ebp+var_4] +
mov [edx] eax +
mov eax [ebp+var_4] +
mov eax [eax] +
push eax  +
call GlobalLock  +
mov esi eax +
xor eax eax +
push ebp  +
push offset loc_4707E8  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov ebx esi +
add ebx 8 +
mov edi esi +
mov eax ebx +
sub ax si +
mov [edi] ax +
lea edx [ebp+var_804] +
mov eax ebx +
call @Sysutils@StrECopy$qqrpcpxc  +
inc eax  +
mov ebx eax +
mov eax ebx +
sub ax si +
mov [edi+2] ax +
lea edx [ebp+var_404] +
mov eax ebx +
call @Sysutils@StrECopy$qqrpcpxc  +
inc eax  +
mov ebx eax +
mov eax ebx +
sub ax si +
mov [edi+4] ax +
lea edx [ebp+var_C04] +
mov eax ebx +
call sub_4A9198  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4707EF  +
mov eax [ebp+var_4] +
mov eax [eax] +
push eax  +
call GlobalUnlock  +
retn   +
jmp unknown_libname_539  +
jmp loc_4707DC  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
add esp 0FFFFFFF8h +
push ebx  +
push esi  +
push edi  +
mov [ebp+hMem] edx +
mov [ebp+var_4] eax +
mov eax [ebp+hMem] +
push eax  +
call GlobalLock  +
mov ebx eax +
xor eax eax +
push ebp  +
push offset loc_470864  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov esi ebx +
movzx eax word ptr [esi+4] +
mov edi ebx +
add eax edi +
push eax  +
mov eax [ebp+var_4] +
push eax  +
call sub_450C50  +
movzx ecx word ptr [esi] +
add ecx edi +
movzx edx word ptr [esi+2] +
add edx edi +
call @Printers@TPrinter@SetPrinter$qqrpct1t1ui  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_47086B  +
mov eax [ebp+hMem] +
push eax  +
call GlobalUnlock  +
mov eax [ebp+hMem] +
push eax  +
call GlobalFree  +
retn   +
jmp unknown_libname_539  +
jmp loc_470851  +
pop edi  +
pop esi  +
pop ebx  +
pop ecx  +
pop ecx  +
pop ebp  +
retn   +
***
add esp 0FFFFFFF8h +
push ebx  +
push esi  +
mov [ebp+hMem] eax +
cmp [ebp+hMem] 0 +
jz loc_4708FD  +
mov eax [ebp+hMem] +
push eax  +
call GlobalSize  +
mov ebx eax +
push ebx  +
push 42h  +
call GlobalAlloc  +
mov [ebp+var_8] eax +
cmp [ebp+var_8] 0 +
jz loc_470902  +
xor edx edx +
push ebp  +
push offset loc_4708F6  +
push dword ptr fs:[edx]  +
mov fs:[edx] esp +
mov eax [ebp+hMem] +
push eax  +
call GlobalLock  +
mov esi eax +
mov eax [ebp+var_8] +
push eax  +
call GlobalLock  +
test esi esi +
jz loc_4708D6  +
test eax eax +
jz loc_4708D6  +
mov edx eax +
mov eax esi +
mov ecx ebx +
call sub_4B9A24  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_470902  +
mov eax [ebp+hMem] +
push eax  +
call GlobalUnlock  +
mov eax [ebp+var_8] +
push eax  +
call GlobalUnlock  +
retn   +
jmp unknown_libname_539  +
jmp loc_4708E3  +
xor eax eax +
mov [ebp+var_8] eax +
mov eax [ebp+var_8] +
pop esi  +
pop ebx  +
pop ecx  +
pop ecx  +
pop ebp  +
retn   +
***
mov ebx eax +
lea eax [esp+48h+var_44] +
xor ecx ecx +
mov edx 42h +
call @System@@FillChar$qqrv  +
mov [esp+48h+var_44] 42h +
mov eax hInstance +
mov [esp+48h+var_22] eax +
lea edx [esp+48h+var_38] +
mov eax esp +
call @Dialogs@_16484  +
mov eax [esp+48h+var_48] +
call @Dialogs@_16483  +
mov [esp+48h+hMem] eax +
mov [esp+48h+var_30] 2040h +
mov [esp+48h+var_16] offset @Dialogs@_16427 +
mov eax off_4EA6C8 +
mov eax [eax] +
mov eax [eax+30h] +
mov [esp+48h+var_40] eax +
lea ecx [esp+48h+var_44] +
mov edx offset loc_4CAA7C +
mov eax ebx +
mov ebx [eax] +
call dword ptr [ebx+38h]  +
cmp eax 1 +
sbb eax eax +
inc eax  +
mov ebx eax +
test bl bl +
jz loc_470993  +
mov edx [esp+48h+var_38] +
mov eax [esp+48h+hMem] +
call @Dialogs@_16485  +
jmp loc_4709AF  +
mov eax [esp+48h+hMem] +
test eax eax +
jz loc_4709A1  +
push eax  +
call GlobalFree  +
mov eax [esp+48h+var_38] +
test eax eax +
jz loc_4709AF  +
push eax  +
call GlobalFree  +
mov eax ebx +
add esp 48h +
pop ebx  +
retn   +
***
add esp 0FFFFFFD0h +
push offset aCommdlg_help  +
call RegisterWindowMessageA  +
mov dword_4F17CC eax +
push offset aCommdlg_findre  +
call RegisterWindowMessageA  +
mov dword_4F17D0 eax +
push 1  +
mov eax hInstance +
mov [esp+34h+var_10] eax +
mov [esp+34h+var_C] 0 +
call GetCurrentThreadId  +
mov [esp+34h+var_8] eax +
mov [esp+34h+var_4] 0 +
lea ecx [esp+34h+var_10] +
mov edx offset aWndprocptr_8x_ +
lea eax [esp+34h+var_30] +
call sub_4A987C  +
push eax  +
call GlobalAddAtomA  +
mov word_4E6604 ax +
add esp 30h +
retn   +
***
xor eax eax +
push ebp  +
push offset loc_470C02  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
inc dword_4F17C8  +
jnz loc_470BF4  +
cmp word_4E6604 0 +
jz loc_470BDF  +
mov ax word_4E6604 +
push eax  +
call GlobalDeleteAtom  +
mov eax offset off_4E6678 +
mov ecx 0Bh +
mov edx ds:@$xp$13System@String +
call @System@@FinalizeArray$qqrpvt1ui  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_470C09  +
retn   +
jmp unknown_libname_539  +
jmp locret_470C01  +
pop ebp  +
retn   +
***
sub dword_4F17C8 1 +
jnb locret_470C34  +
mov eax offset @Dialogs@_16571 +
call @System@@InitImports$qqrv  +
call sub_470A5C  +
mov edx ds:off_471D9C +
mov eax ds:off_46F14C +
call sub_49C3C0  +
retn   +
***
add [ebx+73E98CC0h] al +
retn   +
***
add [ebx+57E98CC0h] al +
les eax [eax] +
add [ebx-74AF7340h] al +
add [ebx+4870840h] cl +
and al 0C3h +
add eax 0FFFFFF8Ch +
push eax  +
mov eax [eax] +
mov eax [eax+0Ch] +
xchg eax [esp] +
retn   +
***
add eax 0FFFFFF8Ch +
push eax  +
mov eax [eax] +
mov eax [eax+28h] +
xchg eax [esp] +
retn   +
***
add eax 0FFFFFF8Ch +
push eax  +
mov eax [eax] +
mov eax [eax+14h] +
xchg eax [esp] +
retn   +
***
add eax 0FFFFFF8Ch +
push eax  +
mov eax [eax] +
mov eax [eax+18h] +
xchg eax [esp] +
retn   +
***
add eax 0FFFFFF8Ch +
push eax  +
mov eax [eax] +
mov eax [eax+20h] +
xchg eax [esp] +
retn   +
***
add eax 0FFFFFF8Ch +
push eax  +
mov eax [eax] +
mov eax [eax+1Ch] +
xchg eax [esp] +
retn   +
***
add eax 0FFFFFF8Ch +
jmp unknown_libname_295  +
***
add dword ptr [esp+4] 0FFFFFF8Ch +
jmp @Variants@TCustomVariantType@QueryInterface$qqsrx5_GUIDpv_1  +
***
add dword ptr [esp+4] 0FFFFFF8Ch +
jmp @Corbaobj@TCorbaImplementation@ObjAddRef$qqsv  +
***
add dword ptr [esp+4] 0FFFFFF8Ch +
jmp unknown_libname_561  +
***
mov dl [eax] +
sub dl 1 +
jb loc_4732D7  +
jz loc_4732DB  +
jmp locret_4732DE  +
mov byte ptr [eax] 1 +
retn   +
mov byte ptr [eax] 0 +
retn   +
***
push ecx  +
push ebx  +
lea ebx [ebp+var_4] +
mov eax hData +
mov edx [ebp+hWnd] +
mov [eax+180h] edx +
mov eax hData +
mov eax [eax+18Ch] +
push eax  +
push 0FFFFFFFCh  +
mov eax [ebp+hWnd] +
push eax  +
call SetWindowLongA  +
push 0FFFFFFF0h  +
mov eax [ebp+hWnd] +
push eax  +
call GetWindowLongA  +
test eax 40000000h +
jz loc_47333D  +
push 0FFFFFFF4h  +
mov eax [ebp+hWnd] +
push eax  +
call GetWindowLongA  +
test eax eax +
jnz loc_47333D  +
mov eax [ebp+hWnd] +
push eax  +
push 0FFFFFFF4h  +
mov eax [ebp+hWnd] +
push eax  +
call SetWindowLongA  +
mov eax hData +
push eax  +
movzx eax nAtom +
push eax  +
mov eax [ebp+hWnd] +
push eax  +
call SetPropA  +
mov eax hData +
push eax  +
movzx eax word_4F1810 +
push eax  +
mov eax [ebp+hWnd] +
push eax  +
call SetPropA  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+hWnd]  +
mov eax hData +
mov hData 0 +
call dword ptr [eax+18Ch]  +
mov [ebp+var_4] eax +
mov eax [ebx] +
pop ebx  +
pop ecx  +
pop ebp  +
retn 10h  +
***
mov ebx eax +
push esp  +
push ebx  +
call GetWindowThreadProcessId  +
call GetCurrentProcessId  +
cmp eax [esp+4+var_4] +
jnz loc_4733C0  +
push 0  +
push 0  +
mov eax Msg +
push eax  +
push ebx  +
call SendMessageA  +
pop edx  +
pop ebx  +
retn   +
xor eax eax +
pop edx  +
pop ebx  +
retn   +
***
xor eax eax +
test ebx ebx +
jz loc_473401  +
mov eax dword_4F1818 +
call unknown_libname_550  +
push eax  +
call GlobalFindAtomA  +
cmp ax nAtom +
jnz loc_4733FA  +
movzx eax nAtom +
push eax  +
push ebx  +
call GetPropA  +
jmp loc_473401  +
mov eax ebx +
call @Controls@_16490  +
pop ebx  +
retn   +
***
mov ebx off_4EA6C8 +
mov ebx [ebx] +
mov esi [ebx+30h] +
test esi esi +
jz loc_473426  +
push ecx  +
push edx  +
push eax  +
mov eax off_4EA6C8 +
push esi  +
call SendMessageA  +
pop esi  +
pop ebx  +
retn   +
xor eax eax +
pop esi  +
pop ebx  +
retn   +
***
push 15h  +
mov ecx offset unk_4E66E4 +
call sub_49C664  +
retn   +
***
push 15h  +
mov ecx offset unk_4E66E4 +
call @Classes@IdentToInt$qqrx17System@AnsiStringripx22Classes@TIdentMapEntryxi  +
retn   +
***
push edi  +
mov edi edx +
mov esi eax +
mov edx esi +
mov eax offset _str___11.Text +
call sub_4ACD40  +
mov ebx eax +
test ebx ebx +
jnz loc_47360C  +
mov eax edi +
mov edx esi +
call unknown_libname_542  +
jmp loc_47361C  +
push edi  +
mov ecx ebx +
dec ecx  +
mov edx 1 +
mov eax esi +
call @System@@LStrCopy$qqrv  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
mov edi edx +
mov esi eax +
mov edx esi +
mov eax offset _str___12.Text +
call sub_4ACD40  +
mov ebx eax +
test ebx ebx +
jnz loc_473650  +
mov eax edi +
mov edx esi +
call unknown_libname_542  +
jmp loc_473660  +
push edi  +
lea edx [ebx+1] +
mov ecx 7FFFFFFFh +
mov eax esi +
call @System@@LStrCopy$qqrv  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
call GetCapture  +
call ReleaseCapture  +
xor eax eax +
mov dword_4E6794 eax +
test ebx ebx +
jz loc_4736D8  +
mov eax ebx +
mov edx ds:off_472320 +
call @System@@IsClass$qqrp14System@TObjectp17System@TMetaClass  +
test al al +
jnz loc_4736CB  +
cmp dword ptr [ebx+30h] 0 +
jz loc_4736D8  +
mov dword_4E6794 ebx +
mov ebx [ebx+30h] +
mov eax ebx +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call SetCapture  +
pop ebx  +
retn   +
***
push edi  +
mov ebx ecx +
mov edi edx +
mov esi eax +
xor eax eax +
mov [ebx] eax +
xor eax eax +
jmp loc_47376A  +
mov edx [ebx] +
mov eax esi +
call @Classes@TList@Get$qqri  +
cmp edi [eax+4] +
setz al  +
test al al +
jnz loc_473771  +
inc dword ptr [ebx]  +
mov edx [ebx] +
cmp edx [esi+8] +
jl loc_473755  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push ebx  +
mov eax [ebp+arg_0] +
mov eax [eax-4] +
call @Controls@TWinControl@GetHandle$qqrv  +
mov ebx eax +
test eax eax +
jz loc_473799  +
mov ebx eax +
push eax  +
call GetParent  +
test eax eax +
jnz loc_47378D  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn   +
***
add esp 0FFFFFFF8h +
push ebx  +
push esi  +
push edi  +
mov [ebp+var_4] edx +
mov esi eax +
mov eax 8 +
call sub_4B97C0  +
mov ebx eax +
mov eax [ebp+var_4] +
mov [ebx] eax +
push ebp  +
call @Controls@_16509  +
pop ecx  +
mov edi eax +
mov [ebx+4] edi +
lea ecx [ebp+var_8] +
mov edx edi +
mov eax esi +
call unknown_libname_261  +
test al al +
jz loc_4737E9  +
mov ecx ebx +
mov edx [ebp+var_8] +
mov eax esi +
call @Classes@TList@Insert$qqripv  +
jmp loc_4737F2  +
mov edx ebx +
mov eax esi +
call @Classes@TList@Add$qqrpv  +
pop edi  +
pop esi  +
pop ebx  +
pop ecx  +
pop ecx  +
pop ebp  +
retn   +
***
push edi  +
mov edi eax +
mov ebx [edi+8] +
dec ebx  +
test ebx ebx +
jl loc_473823  +
inc ebx  +
xor esi esi +
mov edx esi +
mov eax edi +
call @Classes@TList@Get$qqri  +
mov edx 8 +
call sub_4B97E0  +
inc esi  +
dec ebx  +
jnz loc_47380C  +
mov eax edi +
call @Classes@TList@Clear$qqrv  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
push ecx  +
mov ebx eax +
xor edi edi +
mov eax [ebx+8] +
test eax eax +
jz loc_47388C  +
dec eax  +
jnz loc_47384F  +
xor edx edx +
mov eax ebx +
call @Classes@TList@Get$qqri  +
mov edi [eax] +
jmp loc_47388C  +
call GetDesktopWindow  +
push eax  +
call GetTopWindow  +
mov esi eax +
jmp loc_473884  +
mov ecx esp +
mov edx esi +
mov eax ebx +
call unknown_libname_261  +
test al al +
jz loc_47387A  +
mov eax [ebx+4] +
mov edx [esp+4+var_4] +
mov eax [eax+edx*4] +
mov edi [eax] +
jmp loc_473884  +
push 2  +
push esi  +
call GetWindow  +
mov esi eax +
test edi edi +
jnz loc_47388C  +
test esi esi +
jnz loc_47385E  +
mov eax edi +
pop edx  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov ecx [edx+4] +
mov [eax+4] ecx +
mov ecx [edx+8] +
mov [eax+8] ecx +
mov ecx [edx+0Ch] +
mov [eax+0Ch] ecx +
mov ecx [edx+10h] +
mov [eax+10h] ecx +
mov ecx [edx+14h] +
mov [eax+14h] ecx +
mov ecx [edx+18h] +
mov [eax+18h] ecx +
mov ecx [edx+20h] +
mov [eax+20h] ecx +
mov ecx [edx+24h] +
mov [eax+24h] ecx +
mov ecx [edx+28h] +
mov [eax+28h] ecx +
mov ecx [edx+2Ch] +
mov [eax+2Ch] ecx +
retn   +
***
push offset @Controls@TDragObject@MainWndProc$qqrr17Messages@TMessage  +
pop ebp  +
retn 8  +
***
add esp 0FFFFFF00h +
mov esi edx +
mov ebx eax +
mov edx esp +
mov eax [ebx] +
call @System@TObject@ClassName$qqrp17System@TMetaClass  +
mov edx esp +
mov eax esi +
call unknown_libname_547  +
add esp 100h +
pop esi  +
pop ebx  +
retn   +
***
call ReleaseCapture  +
mov eax ebx +
call @Forms@DeallocateHWnd$qqrui  +
pop ebx  +
retn   +
***
add esp 0FFFFFFF4h +
push ebx  +
push esi  +
push edi  +
mov ebx edx +
mov [ebp+var_4] eax +
xor eax eax +
push ebp  +
push offset loc_4739FA  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov eax [ebx] +
cmp eax 215h +
jg loc_47396D  +
jz loc_47399D  +
sub eax 200h +
jz loc_473979  +
sub eax 2 +
jz loc_4739A6  +
sub eax 3 +
jz loc_4739A6  +
jmp loc_4739F0  +
sub eax 0BD00h +
jz loc_4739C4  +
dec eax  +
jz loc_4739AF  +
jmp loc_4739F0  +
lea edx [ebp+Point] +
mov eax [ebx+8] +
call unknown_libname_382  +
lea eax [ebp+Point] +
push eax  +
mov eax hWnd +
push eax  +
call ClientToScreen  +
lea eax [ebp+Point] +
call @Controls@_16561  +
jmp loc_4739F0  +
xor eax eax +
call @Controls@DragDone$qqro  +
jmp loc_4739F0  +
mov al 1 +
call @Controls@DragDone$qqro  +
jmp loc_4739F0  +
cmp dword ptr [ebx+4] 11h +
jnz loc_4739F0  +
mov eax dword_4F1824 +
add eax 0Ch +
call @Controls@_16561  +
jmp loc_4739F0  +
mov eax [ebx+4] +
sub eax 11h +
jz loc_4739D3  +
sub eax 0Ah +
jz loc_4739E2  +
jmp loc_4739F0  +
mov eax dword_4F1824 +
add eax 0Ch +
call @Controls@_16561  +
jmp loc_4739F0  +
mov dword ptr [ebx+0Ch] 1 +
xor eax eax +
call @Controls@DragDone$qqro  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
jmp loc_473A23  +
jmp @System@@HandleAnyException$qqrv  +
cmp dword_4F1820 0 +
jz loc_473A0F  +
xor eax eax +
call @Controls@DragDone$qqro  +
mov eax off_4EA6C8 +
mov eax [eax] +
mov edx [ebp-4] +
call @TApplication@HandleException$qqrp7TObject  +
call @@DoneExcept$qqrv  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
retn   +
***
test dl dl +
jz loc_473A3D  +
mov ax 0FFF4h +
jmp loc_473A41  +
mov ax 0FFF3h +
pop ebp  +
retn 4  +
***
retn   +
***
push ecx  +
push ebx  +
push esi  +
push edi  +
mov [ebp+var_4] eax +
xor eax eax +
push ebp  +
push offset loc_473A82  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov eax [ebp+var_4] +
mov ecx [eax] +
call dword ptr [ecx+0Ch]  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
jmp loc_473A9B  +
jmp @System@@HandleAnyException$qqrv  +
mov eax off_4EA6C8 +
mov eax [eax] +
mov edx [ebp-4] +
call @TApplication@HandleException$qqrp7TObject  +
call @@DoneExcept$qqrv  +
pop edi  +
pop esi  +
pop ebx  +
pop ecx  +
pop ebp  +
retn   +
***
call nullsub_20  +
xor eax eax +
mov dword_4F1850 eax +
retn   +
***
call nullsub_17  +
xor eax eax +
mov dword_4F1850 eax +
retn   +
***
test dl dl +
jz loc_473AD4  +
add esp 0FFFFFFF0h +
call unknown_libname_535  +
mov [eax+38h] ecx +
test dl dl +
jz locret_473AEA  +
call sub_4BABC8  +
pop large dword ptr fs:0  +
add esp 0Ch +
retn   +
***
mov esi edx +
mov ebx eax +
mov edx esi +
mov eax ebx +
call @Controls@TDragObject@Assign$qqrp20Controls@TDragObject  +
mov eax esi +
mov edx ds:off_4710FC +
call @System@@IsClass$qqrp14System@TObjectp17System@TMetaClass  +
test al al +
jz loc_473B12  +
mov eax [esi+38h] +
mov [ebx+38h] eax +
pop esi  +
pop ebx  +
retn   +
***
push ecx  +
push esi  +
push edi  +
mov [ebp+var_4] ecx +
mov edi edx +
mov esi eax +
mov eax [ebp+arg_0] +
push eax  +
mov ecx [ebp+var_4] +
mov edx edi +
mov eax [esi+38h] +
mov si 0FFDDh +
call @System@@CallDynaInst$qqrv  +
pop edi  +
pop esi  +
pop ecx  +
pop ebp  +
retn 4  +
***
push ebx  +
push esi  +
push edi  +
mov edi ecx +
mov ebx eax +
cmp [ebp+arg_0] 0 +
jnz loc_473B62  +
mov eax [ebx+38h] +
mov si 0FFDFh +
call @System@@CallDynaInst$qqrv  +
xor edx edx +
mov eax [ebp+arg_4] +
push eax  +
mov ecx edi +
mov eax ebx +
mov ebx [eax] +
call dword ptr [ebx+24h]  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
test dl dl +
mov eax [eax+38h] +
mov edx [eax] +
call dword ptr [edx+4Ch]  +
retn   +
***
mov eax [ebx+38h] +
mov edx [eax] +
call dword ptr [edx+4Ch]  +
test eax eax +
jz loc_473BB8  +
mov eax [ebx+38h] +
mov edx [eax] +
call dword ptr [edx+4Ch]  +
call sub_47E748  +
pop ebx  +
retn   +
***
mov eax [ebx+38h] +
mov edx [eax] +
call dword ptr [edx+4Ch]  +
test eax eax +
jz loc_473BD8  +
mov eax [ebx+38h] +
mov edx [eax] +
call dword ptr [edx+4Ch]  +
call sub_47E730  +
pop ebx  +
retn   +
***
push ecx  +
call unknown_libname_536  +
mov ebx edx +
mov esi eax +
mov eax [esi+40h] +
call @System@TObject@Free$qqrv  +
mov edx ebx +
and dl 0FCh +
mov eax esi +
call sub_4BA7FC  +
test bl bl +
jle loc_473C6E  +
mov eax esi +
call @System@@ClassDestroy$qqrp14System@TObject  +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
push esi  +
push edi  +
mov edi edx +
mov esi eax +
mov eax [ebp+arg_0] +
push eax  +
mov edx edi +
mov eax [esi+38h] +
mov si 0FFE5h +
call @System@@CallDynaInst$qqrv  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov ebx edx +
push edi  +
add esp 0FFFFFFF0h +
mov esi edx +
lea edi [esp+10h+var_10] +
movs   +
movs   +
movs   +
movs   +
mov ebx eax +
mov eax [ebx+0Ch] +
mov edx [esp+10h+var_10] +
cmp eax edx +
jl loc_473D39  +
cmp eax [esp+10h+var_8] +
jle loc_473D4D  +
sub edx eax +
mov ecx [esp+10h+var_8] +
sub ecx eax +
mov eax ecx +
xchg eax edx +
call @Controls@_16543  +
mov esi eax +
jmp loc_473D4F  +
xor esi esi +
mov eax [ebx+10h] +
mov edx [esp+10h+var_C] +
cmp eax edx +
jl loc_473D60  +
cmp eax [esp+10h+var_4] +
jle loc_473D72  +
sub edx eax +
mov ecx [esp+10h+var_4] +
sub ecx eax +
mov eax ecx +
xchg eax edx +
call @Controls@_16543  +
jmp loc_473D74  +
xor eax eax +
test esi esi +
jnz loc_473D7C  +
test eax eax +
jz loc_473D8B  +
neg eax  +
push eax  +
neg esi  +
push esi  +
lea eax [ebx+44h] +
push eax  +
call OffsetRect  +
add esp 10h +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov edx esi +
mov eax [esi+38h] +
mov si 0FFDBh +
call @System@@CallDynaInst$qqrv  +
pop esi  +
retn   +
***
mov edx esi +
mov eax [esi+38h] +
mov si 0FFDAh +
call @System@@CallDynaInst$qqrv  +
pop esi  +
retn   +
***
xor eax eax +
pop ebp  +
retn 4  +
***
retn   +
***
add esp 0FFFFFFF0h +
push ebx  +
push esi  +
push edi  +
mov ebx [ebp+arg_4] +
mov esi [ebp+hWnd] +
mov edi ebx +
cmp esi [edi+4] +
jnz loc_473DEE  +
xor eax eax +
jmp loc_473E34  +
cmp dword ptr [edi+8] 0 +
jnz loc_473E14  +
lea eax [ebp+rc] +
push eax  +
push esi  +
call GetWindowRect  +
push dword ptr [edi+10h]  +
push dword ptr [edi+0Ch]  +
lea eax [ebp+rc] +
push eax  +
call PtInRect  +
test eax eax +
jz loc_473E14  +
mov [edi+8] esi +
mov edx ebx +
cmp esi [edx+8] +
jnz loc_473E23  +
xor eax eax +
mov byte ptr [edx+14h] 1 +
jmp loc_473E34  +
cmp esi [edx] +
jnz loc_473E31  +
or eax 0FFFFFFFFh +
xor ecx ecx +
mov [edx+8] ecx +
jmp loc_473E34  +
or eax 0FFFFFFFFh +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 8  +
***
add esp 0FFFFFFC4h +
mov eax [ebp+arg_0] +
mov eax [eax-10h] +
mov edx ds:off_472320 +
call @System@@IsClass$qqrp14System@TObjectp17System@TMetaClass  +
test al al +
jz loc_474015  +
mov eax [ebp+arg_0] +
mov eax [eax-14h] +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
mov eax [ebp+arg_0] +
mov eax [eax-10h] +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call IsChild  +
cmp eax 1 +
sbb eax eax +
inc eax  +
pop ebp  +
retn   +
xor eax eax +
pop ebp  +
retn   +
***
add esp 0FFFFFFD8h +
push ebx  +
push esi  +
push edi  +
mov esi eax +
lea edi [ebp+pt] +
movs   +
movs   +
mov [ebp+var_10] edx +
xor eax eax +
mov [ebp+var_18] eax +
cmp dword_4F1848 0 +
jz loc_47416B  +
push 11h  +
call GetKeyState  +
test ax 8000h +
setnz al  +
mov edx off_4EA6C8 +
mov edx [edx] +
xor al [edx+0B4h] +
jz loc_47416B  +
mov eax dword_4F184C +
mov edx [eax] +
call dword ptr [edx+8]  +
mov eax dword_4F1848 +
mov ebx [eax+8] +
dec ebx  +
test ebx ebx +
jl loc_47413A  +
inc ebx  +
xor edi edi +
mov edx edi +
mov eax dword_4F1848 +
call @Classes@TList@Get$qqri  +
mov [ebp+var_14] eax +
mov eax [ebp+var_14] +
cmp eax [ebp+var_10] +
jz loc_474132  +
mov eax [ebp+var_14] +
cmp byte ptr [eax+1A6h] 0 +
jz loc_474132  +
mov eax [ebp+var_14] +
mov edx [eax] +
call dword ptr [edx+50h]  +
test al al +
jz loc_474132  +
mov eax [ebp+var_14] +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call IsWindowVisible  +
test eax eax +
jz loc_474132  +
push ebp  +
call @Controls@_16552  +
pop ecx  +
test al al +
jnz loc_474132  +
mov eax [ebp+var_10] +
mov eax [eax+0A0h] +
cmp eax [ebp+var_14] +
jnz loc_4740EE  +
mov eax [ebp+var_14] +
call @Controls@TWinControl@GetVisibleDockClientCount$qqrv  +
dec eax  +
jle loc_474132  +
mov byte ptr [ebp+var_1] 1 +
lea eax [ebp+pt] +
push eax  +
lea eax [ebp+var_1] +
push eax  +
lea ecx [ebp+rc] +
mov edx [ebp+var_10] +
mov eax [ebp+var_14] +
mov si 0FFBDh +
call @System@@CallDynaInst$qqrv  +
cmp byte ptr [ebp+var_1] 0 +
jz loc_474132  +
push [ebp+pt.y]  +
push [ebp+pt.x]  +
lea eax [ebp+rc] +
push eax  +
call PtInRect  +
test eax eax +
jz loc_474132  +
mov edx [ebp+var_14] +
mov eax dword_4F184C +
call sub_4737A0  +
inc edi  +
dec ebx  +
jnz loc_474081  +
mov eax dword_4F184C +
cmp dword ptr [eax+8] 0 +
jle loc_474152  +
mov eax dword_4F184C +
call @Controls@_16512  +
mov [ebp+var_18] eax +
cmp [ebp+var_18] 0 +
jz loc_47416B  +
push ebp  +
mov eax [ebp+var_18] +
call @Controls@_16551  +
pop ecx  +
test al al +
jnz loc_47416B  +
xor eax eax +
mov [ebp+var_18] eax +
mov eax [ebp+var_18] +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
push edi  +
mov ebx edx +
mov esi eax +
test esi esi +
jz loc_4741D1  +
cmp dword_4F1848 0 +
jnz loc_47419D  +
mov dl 1 +
mov eax ds:off_49A5D8 +
call @System@TObject@$bctr$qqrv  +
mov dword_4F1848 eax +
mov edi esi +
mov edx edi +
mov eax dword_4F1848 +
call unknown_libname_419  +
test bl bl +
jz loc_4741C0  +
inc eax  +
jnz loc_4741D1  +
mov edx edi +
mov eax dword_4F1848 +
call @Classes@TList@Add$qqrpv  +
jmp loc_4741D1  +
cmp eax 0FFFFFFFFh +
jz loc_4741D1  +
mov edx eax +
mov eax dword_4F1848 +
call @Classes@TList@Delete$qqri  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
add esp 0FFFFFFE8h +
push ebx  +
mov [ebp+var_4] ecx +
xor ecx ecx +
test eax eax +
jz loc_474224  +
mov ecx [ebp+arg_0] +
mov ebx [ecx] +
mov [ebp+lParam] ebx +
mov ebx [ecx+4] +
mov [ebp+var_14] ebx +
mov ecx [ebp+arg_4] +
mov [ebp+var_C] ecx +
mov ecx [ebp+var_4] +
mov [ebp+var_10] ecx +
cmp byte_4F1840 2 +
setz cl  +
mov [ebp+var_8] cl +
lea ecx [ebp+lParam] +
push ecx  +
and edx 7Fh +
push edx  +
push 0B02Fh  +
push eax  +
call SendMessageA  +
mov ecx eax +
mov eax ecx +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 8  +
***
xor eax eax +
test ebx ebx +
jz loc_474273  +
mov eax dword_4F1814 +
call unknown_libname_550  +
push eax  +
call GlobalFindAtomA  +
cmp ax word_4F1810 +
jnz loc_474267  +
movzx eax word_4F1810 +
push eax  +
push ebx  +
call GetPropA  +
test eax eax +
setnz al  +
jmp loc_474273  +
mov eax ebx +
call @Controls@_16490  +
test eax eax +
setnz al  +
pop ebx  +
retn   +
***
push dword ptr [eax]  +
push ebx  +
push esi  +
mov esi edx +
mov ebx eax +
test cl cl +
jnz loc_4742D0  +
mov eax ebx +
call @Controls@_16557  +
mov [esi] eax +
push 0  +
push ebx  +
mov eax [esi] +
mov ecx dword_4F1824 +
mov dl 5 +
call @Controls@_16555  +
mov ebx eax +
jmp loc_4742E9  +
mov eax ebx +
mov edx [ebp+arg_0] +
call @Controls@_16553  +
mov ebx eax +
test ebx ebx +
jz loc_4742E9  +
mov eax ebx +
call @Controls@TWinControl@GetHandle$qqrv  +
mov [esi] eax +
mov eax ebx +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov ebx eax +
xor eax eax +
mov edx dword_4F1824 +
mov esi [edx+4] +
test esi esi +
jz loc_47432C  +
push esi  +
mov eax dword_4F1824 +
add eax 0Ch +
push eax  +
mov eax dword_4F1824 +
mov eax [eax+8] +
mov ecx dword_4F1824 +
mov edx ebx +
call @Controls@_16555  +
cmp eax 1 +
sbb eax eax +
inc eax  +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
xor edi edi +
mov eax dword_4F1824 +
mov esi [eax+4] +
test esi esi +
jz loc_4743BD  +
cmp byte ptr [esi+1A7h] 0 +
jz loc_4743BD  +
cmp dword ptr [esi+178h] 0 +
jz loc_4743BD  +
mov eax esi +
call @Controls@TWinControl@GetDockClientCount$qqrv  +
test eax eax +
jz loc_4743BD  +
mov eax esi +
call @Controls@TWinControl@GetDockClientCount$qqrv  +
dec eax  +
jnz loc_474380  +
xor edx edx +
mov eax [esi+178h] +
call @Classes@TList@Get$qqri  +
mov edx dword_4F1824 +
cmp eax [edx+38h] +
jz loc_4743BD  +
mov eax dword_4F1824 +
add eax 0Ch +
xor edx edx +
call @Controls@FindDragTarget$qqrrx14Windows@TPointo  +
mov ebx eax +
jmp loc_4743B5  +
mov edx ebx +
mov eax [esi+178h] +
call unknown_libname_419  +
cmp eax 0FFFFFFFFh +
jz loc_4743B2  +
mov edx eax +
mov eax esi +
call @Controls@TWinControl@GetDockClients$qqri  +
mov edi eax +
jmp loc_4743BD  +
mov ebx [ebx+30h] +
test ebx ebx +
jz loc_4743BD  +
cmp esi ebx +
jnz loc_474393  +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
add esp 0FFFFFFF0h +
mov edi eax +
cmp byte_4F1840 0 +
jnz loc_474402  +
mov eax Point.x +
sub eax [edi] +
cdq   +
xor eax edx +
sub eax edx +
cmp eax dword_4F183C +
jge loc_474402  +
mov eax Point.y +
sub eax [edi+4] +
cdq   +
xor eax edx +
sub eax edx +
cmp eax dword_4F183C +
jl loc_47468B  +
mov eax dword_4F1820 +
push eax  +
mov eax dword_4F1820 +
mov cl [eax+9Bh] +
lea edx [esp+14h+var_10] +
mov eax edi +
call @Controls@_16558  +
mov ebx eax +
cmp byte_4F1840 0 +
jnz loc_47444F  +
cmp dword_4F1844 0 +
jz loc_47444F  +
mov eax Point.y +
push eax  +
call GetDesktopWindow  +
mov edx eax +
mov ecx Point.x +
mov eax dword_4F1844 +
call @Controls@TDragImageList@BeginDrag$qqruiii  +
mov eax dword_4F1820 +
cmp byte ptr [eax+9Bh] 0 +
jnz loc_47446B  +
mov byte_4F1840 1 +
mov byte ptr [esp+10h+var_C] 0 +
jmp loc_47447E  +
cmp byte_4F1840 0 +
setnz byte ptr [esp+10h+var_C]  +
mov byte_4F1840 2 +
mov eax dword_4F1824 +
cmp ebx [eax+4] +
jz loc_4744D3  +
mov al 1 +
call @Controls@_16559  +
cmp dword_4F1824 0 +
jz loc_47468B  +
mov eax dword_4F1824 +
mov [eax+4] ebx +
mov eax dword_4F1824 +
mov edx [esp+10h+var_10] +
mov [eax+8] edx +
mov eax dword_4F1824 +
mov edx [edi] +
mov [eax+0Ch] edx +
mov edx [edi+4] +
mov [eax+10h] edx +
xor eax eax +
call @Controls@_16559  +
cmp dword_4F1824 0 +
jz loc_47468B  +
mov eax dword_4F1824 +
mov edx [edi] +
mov [eax+0Ch] edx +
mov edx [edi+4] +
mov [eax+10h] edx +
mov eax dword_4F1824 +
cmp dword ptr [eax+4] 0 +
jz loc_474514  +
lea ecx [esp+10h+var_8] +
mov edx edi +
mov eax dword_4F1824 +
mov eax [eax+4] +
call @Controls@TControl@ScreenToClient$qqrrx14Windows@TPoint  +
mov eax dword_4F1824 +
mov edx [esp+10h+var_8] +
mov [eax+14h] edx +
mov edx [esp+10h+var_4] +
mov [eax+18h] edx +
mov eax [edi+4] +
push eax  +
mov al 2 +
call @Controls@_16559  +
mov edx eax +
mov ecx [edi] +
mov eax dword_4F1824 +
mov esi [eax] +
call dword ptr [esi+4]  +
mov esi eax +
cmp dword_4F1844 0 +
jz loc_4745A2  +
test ebx ebx +
jz loc_474542  +
test byte ptr [ebx+51h] 20h +
jz loc_474583  +
mov edx esi +
mov eax dword_4F1844 +
call @Controls@TDragImageList@SetDragCursor$qqr16Controls@TCursor  +
mov eax dword_4F1844 +
cmp byte ptr [eax+6Ah] 0 +
jnz loc_474572  +
mov eax [edi+4] +
push eax  +
call GetDesktopWindow  +
mov edx eax +
mov ecx [edi] +
mov eax dword_4F1844 +
call @Controls@TDragImageList@BeginDrag$qqruiii  +
jmp loc_4745A2  +
mov ecx [edi+4] +
mov edx [edi] +
mov eax dword_4F1844 +
call @Controls@TDragImageList@DragMove$qqrii  +
jmp loc_4745A2  +
mov eax dword_4F1844 +
call @Controls@TDragImageList@EndDrag$qqrv  +
movsx edx si +
mov eax off_4EA6CC +
mov eax [eax] +
call @Forms@TScreen@GetCursors$qqri  +
push eax  +
call SetCursor  +
movsx edx si +
mov eax off_4EA6CC +
mov eax [eax] +
call @Forms@TScreen@GetCursors$qqri  +
push eax  +
call SetCursor  +
cmp byte_4F1840 2 +
jnz loc_47468B  +
test ebx ebx +
jnz loc_4745E2  +
mov edx [edi+4] +
push edx  +
mov ecx [edi] +
mov eax dword_4F1824 +
mov edx [eax+38h] +
xchg eax edx +
mov si 0FFE7h +
call @System@@CallDynaInst$qqrv  +
jmp loc_47463E  +
call @Controls@_16560  +
mov ebx eax +
mov eax dword_4F1824 +
mov [eax+58h] ebx +
test ebx ebx +
jnz loc_474619  +
mov eax dword_4F1824 +
lea edx [eax+14h] +
mov eax dword_4F1824 +
mov eax [eax+4] +
mov si 0FFD8h +
call @System@@CallDynaInst$qqrv  +
mov edx dword_4F1824 +
mov [edx+54h] al +
jmp loc_47463E  +
lea ecx [esp+10h+var_8] +
mov edx edi +
mov eax ebx +
call @Controls@TControl@ScreenToClient$qqrrx14Windows@TPoint  +
lea edx [esp+10h+var_8] +
mov eax ebx +
mov si 0FFD8h +
call @System@@CallDynaInst$qqrv  +
mov edx dword_4F1824 +
mov [edx+54h] al +
cmp dword_4F1824 0 +
jz loc_47468B  +
mov ebx dword_4F1824 +
lea edx [ebx+5Ch] +
lea eax [ebx+44h] +
mov ecx 10h +
call @CompareMem$qqrpvt1i  +
test al al +
jnz loc_47468B  +
cmp byte ptr [esp+10h+var_C] 0 +
jz loc_474672  +
mov eax dword_4F1824 +
mov edx [eax] +
call dword ptr [edx+34h]  +
mov eax dword_4F1824 +
mov edx [eax] +
call dword ptr [edx+30h]  +
mov eax dword_4F1824 +
lea esi [eax+44h] +
lea edi [eax+5Ch] +
movs   +
movs   +
movs   +
movs   +
add esp 10h +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
add esp 0FFFFFFE0h +
push ebx  +
push esi  +
push edi  +
mov [ebp+var_4] ecx +
mov ebx edx +
mov edi eax +
mov dword_4F1820 edi +
xor edx edx +
push ebp  +
push offset loc_4749A9  +
push dword ptr fs:[edx]  +
mov fs:[edx] esp +
xor eax eax +
mov [ebp+var_8] eax +
mov byte_4F1828 0 +
cmp byte ptr [edi+9Bh] 0 +
jnz loc_474888  +
lea edx [ebp+var_8] +
mov eax edi +
mov si 0FFDCh +
call @System@@CallDynaInst$qqrv  +
cmp dword_4F1820 0 +
jnz loc_474861  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
jmp loc_4749BF  +
cmp [ebp+var_8] 0 +
jnz loc_474992  +
mov ecx edi +
mov dl 1 +
mov eax ds:off_471218 +
call @Controls@TBaseDragControlObject@$bctr$qqrp17Controls@TControl  +
mov [ebp+var_8] eax +
mov byte_4F1828 1 +
jmp loc_474992  +
lea edx [ebp+var_8] +
mov eax edi +
mov si 0FFE3h +
call @System@@CallDynaInst$qqrv  +
cmp dword_4F1820 0 +
jnz loc_4748AC  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
jmp loc_4749BF  +
cmp [ebp+var_8] 0 +
jnz loc_4748CA  +
mov ecx edi +
mov dl 1 +
mov eax ds:off_471340 +
call @Quickrpt@TQRBasePanel@$bctr$qqrp18Classes@TComponent  +
mov [ebp+var_8] eax +
mov byte_4F1828 1 +
mov eax [ebp+var_8] +
mov esi [eax+38h] +
mov eax esi +
mov edx ds:off_472320 +
call @System@@IsClass$qqrp14System@TObjectp17System@TMetaClass  +
test al al +
jz loc_4748FA  +
mov eax [ebp+var_8] +
add eax 44h +
push eax  +
mov eax esi +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call GetWindowRect  +
jmp loc_474985  +
mov eax [ebp+var_8] +
mov esi [eax+38h] +
cmp dword ptr [esi+30h] 0 +
jnz loc_474931  +
mov eax esi +
mov edx ds:off_472320 +
call @System@@IsClass$qqrp14System@TObjectp17System@TMetaClass  +
test al al +
jnz loc_474931  +
lea eax [ebp+Point] +
push eax  +
call GetCursorPos  +
mov eax [ebp+var_8] +
mov edx [ebp+Point.x] +
mov [eax+44h] edx +
mov edx [ebp+Point.y] +
mov [eax+48h] edx +
jmp loc_474959  +
lea ecx [ebp+var_20] +
xor edx edx +
xor eax eax +
call @Olectrls@TOleControl@GetVariantProp$qqri  +
lea edx [ebp+var_20] +
lea ecx [ebp+var_18] +
mov eax esi +
call @Controls@TControl@ClientToScreen$qqrrx14Windows@TPoint  +
mov eax [ebp+var_8] +
mov edx [ebp+var_18] +
mov [eax+44h] edx +
mov edx [ebp+var_14] +
mov [eax+48h] edx +
mov esi [ebp+var_8] +
mov edx [esi+48h] +
mov eax [ebp+var_8] +
mov edi [eax+38h] +
add edx [edi+4Ch] +
mov eax [esi+44h] +
add eax [edi+48h] +
lea ecx [ebp+var_18] +
call @Olectrls@TOleControl@GetVariantProp$qqri  +
mov eax [ebp+var_8] +
mov edx [ebp+var_18] +
mov [eax+4Ch] edx +
mov edx [ebp+var_14] +
mov [eax+50h] edx +
mov eax [ebp+var_8] +
lea esi [eax+44h] +
lea edi [eax+5Ch] +
movs   +
movs   +
movs   +
movs   +
mov ecx [ebp+var_4] +
mov edx ebx +
mov eax [ebp+var_8] +
call @Controls@_16537  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
jmp loc_4749BF  +
jmp @System@@HandleAnyException$qqrv  +
xor eax eax +
mov dword_4F1820 eax +
call @System@@RaiseAgain$qqrv  +
call @@DoneExcept$qqrv  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
push ebx  +
push esi  +
mov eax dword_4F1824 +
cmp dword ptr [eax+4] 0 +
setnz bl  +
mov eax [ebp+arg_0] +
cmp byte ptr [eax-1] 0 +
jz loc_474A34  +
cmp byte_4F1840 2 +
jnz loc_474A34  +
mov eax dword_4F1820 +
mov edx [eax] +
call dword ptr [edx+54h]  +
test al al +
jnz loc_474A07  +
mov eax dword_4F1820 +
cmp dword ptr [eax+0A0h] 0 +
jnz loc_474A0B  +
mov bl 1 +
jmp loc_474A34  +
mov eax dword_4F1820 +
mov eax [eax+0A0h] +
test eax eax +
jz loc_474A34  +
mov edx dword_4F1824 +
mov edx [edx+4] +
mov ecx dword_4F1820 +
mov si 0FFBEh +
call @System@@CallDynaInst$qqrv  +
mov ebx eax +
mov eax ebx +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
add esp 0FFFFFFF4h +
cmp dword_4F1824 0 +
push dword ptr [eax+4]  +
push dword ptr [eax]  +
call WindowFromPoint  +
mov ebx eax +
xor esi esi +
test ebx ebx +
jz loc_474D59  +
mov eax ebx +
call @Controls@FindControl$qqrui  +
mov esi eax +
test esi esi +
jnz loc_474D59  +
push ebx  +
call GetParent  +
mov ebx eax +
test ebx ebx +
jnz loc_474D40  +
mov eax esi +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
push ebp  +
add esp 0FFFFFFF8h +
mov ebx edx +
mov edi eax +
xor esi esi +
mov eax edi +
call @Controls@FindVCLWindow$qqrrx12Types@TPoint  +
mov ebp eax +
test ebp ebp +
jz loc_474D9E  +
mov esi ebp +
push 0  +
lea ecx [esp+0Ch+var_8] +
mov edx edi +
mov eax ebp +
call @Controls@TControl@ScreenToClient$qqrrx14Windows@TPoint  +
lea edx [esp+0Ch+var_8] +
mov ecx ebx +
mov eax ebp +
call @Controls@TWinControl@ControlAtPos$qqrrx12Types@TPointoo  +
test eax eax +
jz loc_474D9E  +
mov esi eax +
mov eax esi +
pop ecx  +
pop edx  +
pop ebp  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov esi edx +
mov ebx eax +
cmp dword ptr [ebx] 0 +
jnz loc_474DC1  +
mov dl 1 +
mov eax ds:off_49A5D8 +
call @System@TObject@$bctr$qqrv  +
mov [ebx] eax +
mov eax [ebx] +
mov edx esi +
call @Classes@TList@Add$qqrpv  +
pop esi  +
pop ebx  +
retn   +
***
mov eax [ebx] +
call @Classes@TList@Remove$qqrpv  +
mov eax [ebx] +
cmp dword ptr [eax+8] 0 +
jnz loc_474DED  +
mov eax [ebx] +
call @System@TObject@Free$qqrv  +
xor eax eax +
mov [ebx] eax +
pop ebx  +
retn   +
***
push edi  +
add esp 0FFFFFFF8h +
mov edi ecx +
mov esi edx +
mov ebx eax +
push esp  +
push ebx  +
call GetWindowOrgEx  +
push 0  +
mov eax [esp+0Ch+var_4] +
sub eax edi +
push eax  +
mov eax [esp+10h+var_8] +
sub eax esi +
push eax  +
push ebx  +
call SetWindowOrgEx  +
pop ecx  +
pop edx  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
add esp 0FFFFFFF0h +
mov eax dword_4F1854 +
call @Mxarrays@TThreadCustomArray@LockArray$qqrv  +
mov [ebp+var_8] eax +
xor eax eax +
push ebp  +
push offset loc_474ED0  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov eax [ebp+var_8] +
mov eax [eax+8] +
dec eax  +
test eax eax +
jl loc_474EB8  +
inc eax  +
mov [ebp+var_C] eax +
mov [ebp+var_4] 0 +
mov edx [ebp+var_4] +
mov eax [ebp+var_8] +
call @Classes@TList@Get$qqri  +
mov [ebp+var_10] eax +
mov eax [ebp+var_10] +
call @Graphics@TCanvas@TryLock$qqrv  +
test al al +
jz loc_474EB0  +
xor eax eax +
push ebp  +
push offset loc_474EA9  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov eax [ebp+var_10] +
call @Controls@TControlCanvas@FreeHandle$qqrv  +
call @System@@TryFinallyExit$qqrv  +
call @System@@TryFinallyExit$qqrv  +
jmp loc_474ED7  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_474EB0  +
mov eax [ebp+var_10] +
call @Graphics@TCanvas@Unlock$qqrv  +
retn   +
jmp unknown_libname_539  +
jmp loc_474EA0  +
inc [ebp+var_4]  +
dec [ebp+var_C]  +
jnz loc_474E57  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_474ED7  +
mov eax dword_4F1854 +
call sub_49D170  +
retn   +
jmp unknown_libname_539  +
jmp loc_474EC5  +
mov esp ebp +
pop ebp  +
retn   +
***
add esp 0FFFFFFF4h +
mov eax dword_4F1854 +
call @Mxarrays@TThreadCustomArray@LockArray$qqrv  +
mov [ebp+var_8] eax +
xor eax eax +
push ebp  +
push offset loc_474F7A  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov eax [ebp+var_8] +
mov eax [eax+8] +
dec eax  +
cmp eax 0 +
jl loc_474F62  +
mov [ebp+var_4] eax +
mov edx [ebp+var_4] +
mov eax [ebp+var_8] +
call @Classes@TList@Get$qqri  +
mov [ebp+var_C] eax +
mov eax [ebp+var_C] +
call @Graphics@TCanvas@TryLock$qqrv  +
test al al +
jz loc_474F59  +
xor eax eax +
push ebp  +
push offset loc_474F52  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov eax [ebp+var_C] +
call @Controls@TControlCanvas@FreeHandle$qqrv  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_474F59  +
mov eax [ebp+var_C] +
call @Graphics@TCanvas@Unlock$qqrv  +
retn   +
jmp unknown_libname_539  +
jmp loc_474F49  +
dec [ebp+var_4]  +
cmp [ebp+var_4] 0FFFFFFFFh +
jnz loc_474F0C  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_474F81  +
mov eax dword_4F1854 +
call sub_49D170  +
retn   +
jmp unknown_libname_539  +
jmp loc_474F6F  +
mov esp ebp +
pop ebp  +
retn   +
***
call unknown_libname_536  +
push ecx  +
push ebx  +
mov [ebp+var_4] eax +
mov eax [ebp+var_4] +
cmp dword ptr [eax+58h] 0 +
jnz loc_474FD2  +
mov eax [ebp+var_4] +
call nullsub_3  +
jmp loc_475056  +
mov eax [ebp+var_4] +
cmp dword ptr [eax+5Ch] 0 +
jnz loc_475040  +
mov eax dword_4F1854 +
call @Mxarrays@TThreadCustomArray@LockArray$qqrv  +
mov ebx eax +
xor eax eax +
push ebp  +
push offset loc_475039  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
cmp dword ptr [ebx+8] 4 +
jl loc_475000  +
call unknown_libname_265  +
mov eax [ebp+var_4] +
lea edx [eax+60h] +
mov eax [ebp+var_4] +
mov eax [eax+58h] +
mov ecx [eax] +
call dword ptr [ecx+48h]  +
mov edx [ebp+var_4] +
mov [edx+5Ch] eax +
mov edx [ebp+var_4] +
mov eax ebx +
call @Classes@TList@Add$qqrpv  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_475040  +
mov eax dword_4F1854 +
call sub_49D170  +
retn   +
jmp unknown_libname_539  +
jmp loc_47502E  +
mov eax [ebp+var_4] +
mov edx [eax+5Ch] +
mov eax [ebp+var_4] +
call @Graphics@TCanvas@SetHandle$qqrui  +
mov eax [ebp+var_4] +
call @Controls@TControlCanvas@UpdateTextFlags$qqrv  +
pop ebx  +
pop ecx  +
pop ebp  +
retn   +
***
cmp dword ptr [ebx+5Ch] 0 +
jz loc_47508C  +
xor edx edx +
mov eax ebx +
call @Graphics@TCanvas@SetHandle$qqrui  +
mov edx ebx +
mov eax dword_4F1854 +
call sub_49D120  +
mov eax [ebx+5Ch] +
push eax  +
mov eax [ebx+60h] +
push eax  +
call ReleaseDC  +
xor eax eax +
mov [ebx+5Ch] eax +
pop ebx  +
retn   +
***
mov esi edx +
mov ebx eax +
mov esi [ebx+58h] +
test esi esi +
jz loc_4750CE  +
mov eax esi +
call @Controls@TControl@UseRightToLeftReading$qqrv_0  +
test al al +
jz loc_4750C7  +
or dword ptr [ebx+54h] 80h +
jmp loc_4750CE  +
and dword ptr [ebx+54h] 0FFFFFF7Fh +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
mov ebx edx +
mov esi eax +
mov eax ebx +
mov edx ds:off_47166C +
call @System@@IsClass$qqrp14System@TObjectp17System@TMetaClass  +
test al al +
jz loc_475149  +
mov eax ebx +
mov edx [esi+10h] +
mov [eax+10h] edx +
mov edx [esi+8] +
mov [eax+8] edx +
mov edx [esi+14h] +
mov [eax+14h] edx +
mov edx [esi+0Ch] +
mov [eax+0Ch] edx +
mov edx [eax] +
call dword ptr [edx+0Ch]  +
pop esi  +
pop ebx  +
retn   +
mov edx ebx +
mov eax esi +
call sub_49D458  +
pop esi  +
pop ebx  +
retn   +
***
sub edx 1 +
jb loc_47516A  +
jz loc_475187  +
dec edx  +
jz loc_4751A4  +
dec edx  +
jz loc_4751C3  +
jmp loc_4751E0  +
cmp ecx [esi+8] +
jz loc_4751E0  +
mov [esi+8] ecx +
test ecx ecx +
jbe loc_47517E  +
cmp ecx [esi+10h] +
jnb loc_47517E  +
mov [esi+10h] ecx +
mov eax esi +
mov edx [eax] +
call dword ptr [edx+0Ch]  +
pop esi  +
retn   +
cmp ecx [esi+0Ch] +
jz loc_4751E0  +
mov [esi+0Ch] ecx +
test ecx ecx +
jbe loc_47519B  +
cmp ecx [esi+14h] +
jnb loc_47519B  +
mov [esi+14h] ecx +
mov eax esi +
mov edx [eax] +
call dword ptr [edx+0Ch]  +
pop esi  +
retn   +
cmp ecx [esi+10h] +
jz loc_4751E0  +
mov [esi+10h] ecx +
mov eax [esi+8] +
test eax eax +
jbe loc_4751BA  +
cmp eax ecx +
jnb loc_4751BA  +
mov [esi+8] ecx +
mov eax esi +
mov edx [eax] +
call dword ptr [edx+0Ch]  +
pop esi  +
retn   +
cmp ecx [esi+14h] +
jz loc_4751E0  +
mov [esi+14h] ecx +
mov eax [esi+0Ch] +
test eax eax +
jbe loc_4751D9  +
cmp eax ecx +
jnb loc_4751D9  +
mov [esi+0Ch] ecx +
mov eax esi +
mov edx [eax] +
call dword ptr [edx+0Ch]  +
pop esi  +
retn   +
***
jz loc_4751F6  +
mov esi edx +
mov ebx eax +
mov eax esi +
mov edx ds:off_471D9C +
call unknown_libname_534  +
mov [ebx+18h] eax +
pop esi  +
pop ebx  +
retn   +
***
add esp 0FFFFFFE4h +
push ebx  +
push esi  +
push edi  +
xor ecx ecx +
mov [ebp+var_8] ecx +
mov [ebp+var_1C] ecx +
mov edi edx +
mov ebx eax +
xor eax eax +
push ebp  +
push offset loc_4752E1  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov [ebp+var_1] 1 +
mov eax [ebx+10h] +
mov edx ds:off_448424 +
call @System@@IsClass$qqrp14System@TObjectp17System@TMetaClass  +
test al al +
jz loc_4752C3  +
mov edx edi +
mov eax [ebx+10h] +
mov si 0FFEEh +
call @System@@CallDynaInst$qqrv  +
test al al +
jz loc_4752C3  +
mov eax off_4EA6C8 +
mov eax [eax] +
cmp byte ptr [eax+7Ch] 0 +
jz loc_4752C3  +
mov eax [ebx+10h] +
cmp word ptr [eax+84h] 0 +
jz loc_4752C3  +
cmp dword ptr [edi] 0 +
jz loc_4752C3  +
lea eax [ebp+var_8] +
push eax  +
mov eax [edi] +
mov [ebp+var_18] eax +
mov [ebp+var_14] 0Bh +
lea edx [ebp+var_1C] +
mov eax [ebx+10h] +
mov ax [eax+84h] +
call sub_451C8C  +
mov eax [ebp+var_1C] +
mov [ebp+var_10] eax +
mov [ebp+var_C] 0Bh +
lea edx [ebp+var_18] +
mov ecx 1 +
mov eax offset _str__s___s_.Text +
call @Sysutils@Format$qqrx17System@AnsiStringpx14System@TVarRecxi  +
mov edx [ebp+var_8] +
mov eax edi +
call unknown_libname_542  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4752E8  +
lea eax [ebp+var_1C] +
call unknown_libname_540  +
lea eax [ebp+var_8] +
call unknown_libname_540  +
retn   +
jmp unknown_libname_539  +
jmp loc_4752D0  +
mov al [ebp+var_1] +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
push 0  +
mov eax ebx +
call unknown_libname_67  +
test al al +
jz loc_4753A3  +
mov eax [ebx+18h] +
mov edx [eax] +
call dword ptr [edx+50h]  +
push eax  +
mov eax [ebx+10h] +
mov edx ds:off_448424 +
call unknown_libname_534  +
pop edx  +
cmp dl [eax+6Ah] +
jz loc_4753A7  +
xor eax eax +
pop ebx  +
retn   +
mov al 1 +
pop ebx  +
retn   +
***
mov eax ebx +
call unknown_libname_71  +
test al al +
jz loc_4753DB  +
mov eax [ebx+10h] +
mov edx ds:off_448424 +
call unknown_libname_534  +
mov edx [eax+7Ch] +
mov eax [ebx+18h] +
mov eax [eax+80h] +
call @System@@LStrCmp$qqrv  +
jz loc_4753DF  +
xor eax eax +
pop ebx  +
retn   +
mov al 1 +
pop ebx  +
retn   +
***
mov eax ebx +
call unknown_libname_74  +
test al al +
jz loc_47540E  +
mov eax [ebx+10h] +
mov edx ds:off_448424 +
call unknown_libname_534  +
mov al [eax+86h] +
mov edx [ebx+18h] +
cmp al [edx+57h] +
jz loc_475412  +
xor eax eax +
pop ebx  +
retn   +
mov al 1 +
pop ebx  +
retn   +
***
mov eax ebx +
call sub_4A5430  +
test al al +
jz loc_475437  +
mov eax [ebx+18h] +
mov eax [eax+120h] +
mov edx [ebx+10h] +
cmp eax [edx+40h] +
jz loc_47543B  +
xor eax eax +
pop ebx  +
retn   +
mov al 1 +
pop ebx  +
retn   +
***
mov esi edx +
mov ebx eax +
mov eax ebx +
mov edx [eax] +
call dword ptr [edx+20h]  +
test al al +
jz loc_47545B  +
mov edx esi +
mov eax [ebx+18h] +
call @Controls@TControl@SetText$qqrx17System@AnsiString  +
pop esi  +
pop ebx  +
retn   +
***
mov ebx edx +
mov esi eax +
mov eax esi +
mov edx [eax] +
call dword ptr [edx+28h]  +
test al al +
jz loc_47547B  +
mov edx ebx +
mov eax [esi+18h] +
mov ecx [eax] +
call dword ptr [ecx+64h]  +
pop esi  +
pop ebx  +
retn   +
***
mov esi edx +
mov ebx eax +
mov eax ebx +
mov edx [eax] +
call dword ptr [edx+38h]  +
test al al +
jz loc_4754A0  +
mov eax [ebx+18h] +
add eax 80h +
mov edx esi +
call unknown_libname_542  +
pop esi  +
pop ebx  +
retn   +
***
mov ebx edx +
mov esi eax +
mov eax esi +
mov edx [eax] +
call dword ptr [edx+44h]  +
test al al +
jz loc_4754BF  +
mov edx ebx +
mov eax [esi+18h] +
call @Controls@TControl@SetVisible$qqro  +
pop esi  +
pop ebx  +
retn   +
***
push ebx  +
mov ebx eax +
mov eax ebx +
mov edx [eax] +
call dword ptr [edx+8]  +
test al al +
jz loc_4754EA  +
mov eax [ebx+18h] +
mov edx [ebp+arg_0] +
mov [eax+120h] edx +
mov edx [ebp+arg_4] +
mov [eax+124h] edx +
pop ebx  +
pop ebp  +
retn 8  +
***
push edi  +
mov esi edx +
mov ebx eax +
mov eax ebx +
mov edx [eax] +
call dword ptr [edx+34h]  +
test al al +
jz loc_47556F  +
mov edx esi +
mov eax [ebx+18h] +
call @Controls@TControl@SetHelpKeyword$qqrx17System@AnsiString  +
pop esi  +
pop ebx  +
retn   +
***
mov esi edx +
mov ebx eax +
mov eax ebx +
mov edx [eax] +
call dword ptr [edx+34h]  +
test al al +
jz loc_47558F  +
mov edx esi +
mov eax [ebx+18h] +
call @Controls@TControl@SetHelpContext$qqrxi  +
pop esi  +
pop ebx  +
retn   +
***
mov ebx edx +
mov esi eax +
mov eax esi +
mov edx [eax] +
call dword ptr [edx+34h]  +
test al al +
jz loc_4755AE  +
mov eax [esi+18h] +
mov [eax+150h] bl +
pop esi  +
pop ebx  +
retn   +
***
push ecx  +
push ebx  +
push esi  +
test dl dl +
jz loc_4755C6  +
add esp 0FFFFFFF0h +
call unknown_libname_535  +
mov [ebp+var_1] dl +
mov ebx eax +
xor edx edx +
mov eax ebx +
call sub_4A4B20  +
mov [ebx+3Ch] ebx +
mov eax [ebx] +
mov eax [eax+74h] +
mov [ebx+38h] eax +
mov eax ds:dword_475684 +
mov [ebx+50h] eax +
mov dl 1 +
mov eax ds:off_459130 +
call sub_45A574  +
mov esi eax +
mov [ebx+68h] esi +
mov [esi+0Ch] ebx +
mov dword ptr [esi+8] offset @Controls@TControl@FontChanged$qqrp14System@TObject +
mov al ds:byte_475688 +
mov [ebx+61h] al +
mov ecx ebx +
mov dl 1 +
mov eax ds:off_47166C +
call sub_4750D4  +
mov esi eax +
mov [ebx+74h] esi +
mov [esi+1Ch] ebx +
mov dword ptr [esi+18h] offset @Controls@TControl@DoConstraintsChange$qqrp14System@TObject +
mov dword ptr [ebx+70h] 80000005h +
mov byte ptr [ebx+57h] 1 +
mov byte ptr [ebx+58h] 1 +
mov byte ptr [ebx+59h] 1 +
mov byte ptr [ebx+5Ah] 1 +
mov byte ptr [ebx+9Ah] 1 +
mov byte ptr [ebx+60h] 1 +
mov byte ptr [ebx+5Eh] 0 +
mov word ptr [ebx+7Ah] 0FFF4h +
mov eax ds:off_462F60 +
mov [ebx+0B8h] eax +
mov byte ptr [ebx+150h] 1 +
mov eax ebx +
cmp [ebp+var_1] 0 +
jz loc_47567C  +
call sub_4BABC8  +
pop large dword ptr fs:0  +
add esp 0Ch +
mov eax ebx +
pop esi  +
pop ebx  +
pop ecx  +
pop ebp  +
retn   +
***
push edi  +
add esp 0FFFFFFF0h +
call unknown_libname_536  +
mov ebx edx +
mov edi eax +
mov eax off_4EA6C8 +
mov eax [eax] +
mov edx edi +
call @Forms@TApplication@ControlDestroyed$qqrp17Controls@TControl  +
mov eax [edi+0A0h] +
test eax eax +
jz loc_4756F2  +
test byte ptr [eax+1Ch] 8 +
jnz loc_4756F2  +
push edi  +
xor ecx ecx +
mov edx 0B039h +
call @Controls@TControl@Perform$qqruiii  +
xor edx edx +
mov eax edi +
mov ecx [eax] +
call dword ptr [ecx+68h]  +
mov edx esp +
mov eax edi +
call @Controls@TControl@GetBoundsRect$qqrv  +
mov ecx esp +
or edx 0FFFFFFFFh +
mov eax edi +
mov si 0FFCCh +
call @System@@CallDynaInst$qqrv  +
xor eax eax +
mov [edi+0A0h] eax +
jmp loc_4756FB  +
xor edx edx +
mov eax edi +
mov ecx [eax] +
call dword ptr [ecx+68h]  +
mov eax [edi+6Ch] +
call @System@TObject@Free$qqrv  +
xor eax eax +
mov [edi+6Ch] eax +
mov eax [edi+74h] +
call @System@TObject@Free$qqrv  +
mov eax [edi+68h] +
call @System@TObject@Free$qqrv  +
mov eax [edi+64h] +
call sub_4A93E0  +
mov edx ebx +
and dl 0FCh +
mov eax edi +
call sub_4A4B6C  +
test bl bl +
jle loc_475737  +
mov eax edi +
call @System@@ClassDestroy$qqrp14System@TObject  +
add esp 10h +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
retn   +
***
retn   +
***
cmp dword ptr [eax+30h] 0 +
mov esi edx +
push edi  +
push ebp  +
add esp 0FFFFFFF8h +
mov [esp+8+var_8] dl +
mov ebp eax +
xor ebx ebx +
cmp byte ptr [ebp+57h] 0 +
jz loc_4757EC  +
mov eax ebp +
mov si 0FFD7h +
call @System@@CallDynaInst$qqrv  +
mov edi eax +
test edi edi +
jz loc_4757EC  +
lea edx [esp+8+hWnd] +
mov eax ebp +
mov ecx [eax] +
call dword ptr [ecx+48h]  +
mov esi eax +
mov al [esp+8+var_8] +
xor al 1 +
neg al  +
sbb eax eax +
push eax  +
push edi  +
push esi  +
call SelectPalette  +
mov edi eax +
push esi  +
call RealizePalette  +
test eax eax +
jz loc_4757D6  +
mov eax ebp +
mov edx [eax] +
call dword ptr [edx+7Ch]  +
push 0FFFFFFFFh  +
push edi  +
push esi  +
call SelectPalette  +
push esi  +
mov eax [esp+0Ch+hWnd] +
push eax  +
call ReleaseDC  +
mov bl 1 +
mov eax ebx +
pop ecx  +
pop edx  +
pop ebp  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov edx [eax+6Ch] +
test edx edx +
jz loc_475803  +
mov eax [edx+10h] +
retn   +
xor eax eax +
retn   +
***
mov [esp+1+var_1] dl +
mov ebx eax +
mov al [esp+1+var_1] +
cmp al [ebx+61h] +
jz loc_475824  +
mov al [esp+1+var_1] +
mov [ebx+61h] al +
mov eax ebx +
call @Controls@TControl@UpdateAnchorRules$qqrv  +
pop edx  +
pop ebx  +
retn   +
***
push edi  +
mov edi edx +
mov ebx eax +
test edi edi +
jnz loc_475849  +
mov eax [ebx+6Ch] +
call @System@TObject@Free$qqrv  +
xor eax eax +
mov [ebx+6Ch] eax +
and dword ptr [ebx+50h] 0FFFF7FFFh +
jmp loc_47589F  +
or dword ptr [ebx+50h] 8000h +
cmp dword ptr [ebx+6Ch] 0 +
jnz loc_47586B  +
mov eax ebx +
mov si 0FFD9h +
call @System@@CallDynaInst$qqrv  +
mov ecx ebx +
mov dl 1 +
call dword ptr [eax+14h]  +
mov [ebx+6Ch] eax +
mov edx edi +
mov eax [ebx+6Ch] +
mov ecx [eax] +
call dword ptr [ecx+0Ch]  +
mov eax [ebx+6Ch] +
mov [eax+0Ch] ebx +
mov dword ptr [eax+8] offset @Controls@TControl@DoActionChange$qqrp14System@TObject +
test byte ptr [edi+1Ch] 1 +
setnz cl  +
mov edx edi +
mov eax ebx +
mov si 0FFEFh +
call @System@@CallDynaInst$qqrv  +
mov edx ebx +
mov eax edi +
call @Classes@TComponent@FreeNotification$qqrp18Classes@TComponent  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
xor eax eax +
mov al [ebx+5Bh] +
mov al byte_4E66DC[eax] +
cmp al [ebx+61h] +
setnz al  +
pop ebx  +
retn   +
***
mov edx [eax+30h] +
test edx edx +
jz locret_4758CD  +
xchg eax edx +
call @Controls@TWinControl@AlignControl$qqrp17Controls@TControl  +
retn   +
***
jz loc_4758EB  +
mov ebx eax +
mov edx eax +
mov eax [ebx+0FCh] +
call dword ptr [ebx+0F8h]  +
pop ebx  +
retn   +
***
push edi  +
mov esi edx +
mov ebx eax +
or word ptr [ebx+54h] 8 +
mov edi [esi+2Ch] +
mov eax edi +
mov edx ds:off_472320 +
call @System@@IsClass$qqrp14System@TObjectp17System@TMetaClass  +
test al al +
jz loc_475919  +
mov edx edi +
mov eax ebx +
mov ecx [eax] +
call dword ptr [ecx+68h]  +
mov edx esi +
mov eax ebx +
call sub_4A4F80  +
and word ptr [ebx+54h] 0FFF7h +
cmp dword ptr [ebx+30h] 0 +
jz loc_47597D  +
push 0  +
xor ecx ecx +
mov edx 0B009h +
mov eax ebx +
call @Controls@TControl@Perform$qqruiii  +
push 0  +
xor ecx ecx +
mov edx 0B008h +
mov eax ebx +
call @Controls@TControl@Perform$qqruiii  +
push 0  +
xor ecx ecx +
mov edx 0B023h +
mov eax ebx +
call @Controls@TControl@Perform$qqruiii  +
push 0  +
xor ecx ecx +
mov edx 0B035h +
mov eax ebx +
call @Controls@TControl@Perform$qqruiii  +
push 0  +
xor ecx ecx +
mov edx 0B03Dh +
mov eax ebx +
call @Controls@TControl@Perform$qqruiii  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
mov ebx ecx +
mov edi edx +
mov esi eax +
mov ecx ebx +
mov edx edi +
mov eax esi +
call sub_4A4E3C  +
cmp bl 1 +
jnz loc_4759C1  +
cmp edi [esi+7Ch] +
jnz loc_4759AD  +
xor edx edx +
mov eax esi +
call @Controls@TControl@SetPopupMenu$qqrp16Menus@TPopupMenu  +
jmp loc_4759C1  +
mov eax esi +
mov edx [eax] +
call dword ptr [edx+3Ch]  +
cmp edi eax +
jnz loc_4759C1  +
xor edx edx +
mov eax esi +
call @Controls@TControl@SetAction$qqrp20Classes@TBasicAction  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
push ebx  +
push esi  +
push edi  +
mov edi ecx +
mov esi edx +
mov ebx eax +
lea ecx [ebp+arg_0] +
lea edx [ebp+arg_4] +
mov eax ebx +
call @Controls@TControl@CheckNewSize$qqrrit1  +
test al al +
jz loc_475AFF  +
cmp esi [ebx+40h] +
jnz loc_475AA7  +
cmp edi [ebx+44h] +
jnz loc_475AA7  +
mov eax [ebp+arg_4] +
cmp eax [ebx+48h] +
jnz loc_475AA7  +
mov eax [ebp+arg_0] +
cmp eax [ebx+4Ch] +
jz loc_475AFF  +
xor ecx ecx +
mov dl [ebx+57h] +
mov eax ebx +
call @Controls@TControl@InvalidateControl$qqroo  +
mov [ebx+40h] esi +
mov [ebx+44h] edi +
mov eax [ebp+arg_4] +
mov [ebx+48h] eax +
mov eax [ebp+arg_0] +
mov [ebx+4Ch] eax +
mov eax ebx +
call @Controls@TControl@UpdateAnchorRules$qqrv  +
mov eax ebx +
mov edx [eax] +
call dword ptr [edx+7Ch]  +
push 0  +
xor ecx ecx +
mov edx 47h +
mov eax ebx +
call @Controls@TControl@Perform$qqruiii  +
mov eax ebx +
mov si 0FFD0h +
call @System@@CallDynaInst$qqrv  +
test byte ptr [ebx+1Ch] 1 +
jnz loc_475AFF  +
mov eax ebx +
mov si 0FFCFh +
call @System@@CallDynaInst$qqrv  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
add esp 0FFFFFFF0h +
mov esi eax +
cmp byte ptr [esi+62h] 0 +
jnz loc_475C1A  +
test byte ptr [esi+1Ch] 1 +
jnz loc_475C1A  +
mov bl [esi+61h] +
mov al ds:byte_475C20 +
cmp al bl +
jnz loc_475B44  +
xor eax eax +
mov [esi+90h] eax +
xor eax eax +
mov [esi+94h] eax +
jmp loc_475C1A  +
test bl 4 +
jz loc_475B64  +
test bl 1 +
jz loc_475B59  +
mov eax [esi+48h] +
mov [esi+88h] eax +
jmp loc_475B77  +
mov eax [esi+40h] +
mov [esi+88h] eax +
jmp loc_475B77  +
mov eax [esi+48h] +
sar eax 1 +
jns loc_475B6E  +
adc eax 0 +
add eax [esi+40h] +
mov [esi+88h] eax +
test bl 8 +
jz loc_475B97  +
test bl 2 +
jz loc_475B8C  +
mov eax [esi+4Ch] +
mov [esi+8Ch] eax +
jmp loc_475BAA  +
mov eax [esi+44h] +
mov [esi+8Ch] eax +
jmp loc_475BAA  +
mov eax [esi+4Ch] +
sar eax 1 +
jns loc_475BA1  +
adc eax 0 +
add eax [esi+44h] +
mov [esi+8Ch] eax +
mov ebx [esi+30h] +
test ebx ebx +
jz loc_475C1A  +
test byte ptr [ebx+1Ch] 2 +
jz loc_475BD7  +
test byte ptr [esi+1Ch] 10h +
jnz loc_475C1A  +
mov eax [ebx+1FAh] +
mov [esi+90h] eax +
mov eax [ebx+1FEh] +
mov [esi+94h] eax +
jmp loc_475C1A  +
mov eax ebx +
call @Controls@TWinControl@HandleAllocated$qqrv  +
test al al +
jz loc_475C02  +
mov edx esp +
mov eax [esi+30h] +
mov ecx [eax] +
call dword ptr [ecx+44h]  +
mov eax [esp+10h+var_8] +
mov [esi+90h] eax +
mov eax [esp+10h+var_4] +
mov [esi+94h] eax +
jmp loc_475C1A  +
mov eax [esi+30h] +
mov eax [eax+48h] +
mov [esi+90h] eax +
mov eax [esi+30h] +
mov eax [eax+4Ch] +
mov [esi+94h] eax +
add esp 10h +
pop esi  +
pop ebx  +
retn   +
***
mov esi eax +
mov eax [esi+48h] +
push eax  +
mov eax [esi+4Ch] +
push eax  +
mov ecx [esi+44h] +
mov eax esi +
mov ebx [eax] +
call dword ptr [ebx+84h]  +
or byte ptr [esi+98h] 1 +
pop esi  +
pop ebx  +
retn   +
***
mov esi eax +
mov eax [esi+48h] +
push eax  +
mov eax [esi+4Ch] +
push eax  +
mov ecx edx +
mov eax esi +
mov edx [esi+40h] +
mov ebx [eax] +
call dword ptr [ebx+84h]  +
or byte ptr [esi+98h] 2 +
pop esi  +
pop ebx  +
retn   +
***
mov esi eax +
push edx  +
mov eax [esi+4Ch] +
push eax  +
mov ecx [esi+44h] +
mov eax esi +
mov edx [esi+40h] +
mov ebx [eax] +
call dword ptr [ebx+84h]  +
or byte ptr [esi+98h] 4 +
pop esi  +
pop ebx  +
retn   +
***
mov esi eax +
mov eax [esi+48h] +
push eax  +
push edx  +
mov ecx [esi+44h] +
mov eax esi +
mov edx [esi+40h] +
mov ebx [eax] +
call dword ptr [ebx+84h]  +
or byte ptr [esi+98h] 8 +
pop esi  +
pop ebx  +
retn   +
***
add esp 0FFFFFFECh +
push ebx  +
push esi  +
push edi  +
mov esi ecx +
lea edi [ebp+var_14] +
movs   +
movs   +
movs   +
movs   +
mov ebx edx +
mov [ebp+var_4] eax +
mov eax [ebp+var_4] +
cmp ebx [eax+0A0h] +
jz loc_475D1E  +
mov eax [ebp+var_4] +
mov eax [eax+0A0h] +
test eax eax +
jz loc_475CFE  +
cmp dword ptr [eax+178h] 0 +
jz loc_475CFE  +
mov eax [eax+178h] +
mov edx [ebp+var_4] +
call @Classes@TList@Remove$qqrpv  +
test ebx ebx +
jz loc_475D1E  +
cmp ebx 0FFFFFFFFh +
jz loc_475D1E  +
cmp dword ptr [ebx+178h] 0 +
jz loc_475D1E  +
mov eax [ebx+178h] +
mov edx [ebp+var_4] +
call @Classes@TList@Add$qqrpv  +
mov eax [ebp+var_4] +
or word ptr [eax+54h] 400h +
xor edx edx +
push ebp  +
push offset loc_475DB3  +
push dword ptr fs:[edx]  +
mov fs:[edx] esp +
cmp ebx 0FFFFFFFFh +
jz loc_475D4B  +
lea ecx [ebp+var_14] +
mov edx ebx +
mov eax [ebp+var_4] +
mov si 0FFE4h +
call @System@@CallDynaInst$qqrv  +
mov eax [ebp+var_4] +
mov eax [eax+0A0h] +
cmp ebx eax +
jz loc_475D9C  +
mov edi eax +
cmp ebx 0FFFFFFFFh +
jz loc_475D7F  +
mov eax [ebp+var_4] +
mov [eax+0A0h] ebx +
test ebx ebx +
jz loc_475D8A  +
lea ecx [ebp+var_14] +
mov edx [ebp+var_4] +
mov eax ebx +
mov si 0FFC5h +
call @System@@CallDynaInst$qqrv  +
jmp loc_475D8A  +
mov eax [ebp+var_4] +
xor edx edx +
mov [eax+0A0h] edx +
test edi edi +
jz loc_475D9C  +
mov edx [ebp+var_4] +
mov eax edi +
mov si 0FFBFh +
call @System@@CallDynaInst$qqrv  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_475DBA  +
mov eax [ebp+var_4] +
and word ptr [eax+54h] 0FBFFh +
retn   +
jmp unknown_libname_539  +
jmp loc_475DA9  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
push edi  +
mov edi ecx +
mov esi edx +
mov ebx eax +
mov eax ebx +
mov edx ds:off_472320 +
call @System@@IsClass$qqrp14System@TObjectp17System@TMetaClass  +
test al al +
jnz loc_475DEA  +
xor ecx ecx +
mov dl [ebx+57h] +
mov eax ebx +
call @Controls@TControl@InvalidateControl$qqroo  +
cmp esi [ebx+30h] +
jz loc_475DFA  +
mov edx edi +
mov eax ebx +
call @Controls@TControl@UpdateBoundsRect$qqrrx11Types@TRect  +
jmp loc_475E03  +
mov edx edi +
mov eax ebx +
call @Controls@TControl@SetBoundsRect$qqrrx11Types@TRect  +
test esi esi +
jz loc_475E0C  +
cmp esi 0FFFFFFFFh +
jnz loc_475E15  +
xor edx edx +
mov eax ebx +
mov ecx [eax] +
call dword ptr [ecx+68h]  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
test byte ptr [eax+1Ch] 1 +
mov esi edx +
mov ebx eax +
test byte ptr [ebx+1Ch] 1 +
jnz loc_475E43  +
mov byte ptr [ebx+150h] 0 +
lea eax [ebx+154h] +
mov edx esi +
call unknown_libname_542  +
pop esi  +
pop ebx  +
retn   +
***
add esp 0FFFFFFF0h +
mov esi edx +
mov ebx eax +
mov edx esp +
mov eax ebx +
call @Controls@TControl@GetBoundsRect$qqrv  +
mov ecx esp +
mov edx esi +
mov eax ebx +
mov si 0FFCCh +
call @System@@CallDynaInst$qqrv  +
add esp 10h +
pop esi  +
pop ebx  +
retn   +
***
mov ecx [eax+40h] +
mov [edx] ecx +
mov ecx [eax+44h] +
mov [edx+4] ecx +
mov ecx [eax+40h] +
add ecx [eax+48h] +
mov [edx+8] ecx +
mov ecx [eax+44h] +
add ecx [eax+4Ch] +
mov [edx+0Ch] ecx +
retn   +
***
push edi  +
push ebp  +
mov esi eax +
mov eax [edx+8] +
mov edi [edx] +
sub eax edi +
push eax  +
mov eax [edx+0Ch] +
mov ebp [edx+4] +
sub eax ebp +
push eax  +
mov ecx ebp +
mov edx edi +
mov eax esi +
mov ebx [eax] +
call dword ptr [ebx+84h]  +
pop ebp  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
xor ecx ecx +
mov [edx] ecx +
xor ecx ecx +
mov [edx+4] ecx +
mov ecx [eax+48h] +
mov [edx+8] ecx +
mov eax [eax+4Ch] +
mov [edx+0Ch] eax +
retn   +
***
mov ebx eax +
add esp 0FFFFFFF8h +
mov esi edx +
mov ebx eax +
mov eax ebx +
call @Controls@TControl@GetClientHeight$qqrv  +
mov edx eax +
mov ecx esp +
mov eax esi +
call @Olectrls@TOleControl@GetVariantProp$qqri  +
mov edx esp +
mov eax ebx +
call @Controls@TControl@SetClientSize$qqrrx12Types@TPoint  +
pop ecx  +
pop edx  +
pop esi  +
pop ebx  +
retn   +
***
mov ebx eax +
add esp 0FFFFFFF8h +
mov esi edx +
mov ebx eax +
mov eax ebx +
call @Controls@TControl@GetClientWidth$qqrv  +
mov ecx esp +
mov edx esi +
call @Olectrls@TOleControl@GetVariantProp$qqri  +
mov edx esp +
mov eax ebx +
call @Controls@TControl@SetClientSize$qqrrx12Types@TPoint  +
pop ecx  +
pop edx  +
pop esi  +
pop ebx  +
retn   +
***
add esp 0FFFFFFF4h +
push ebx  +
push esi  +
xor ecx ecx +
mov [ebp+var_C] ecx +
mov esi edx +
mov ebx eax +
xor eax eax +
push ebp  +
push offset loc_475FE5  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
cmp dword ptr [ebx+30h] 0 +
jnz loc_475FBA  +
mov eax [ebx+8] +
mov [ebp+var_8] eax +
mov [ebp+var_4] 0Bh +
lea eax [ebp+var_8] +
push eax  +
push 0  +
lea edx [ebp+var_C] +
mov eax off_4EA700 +
call @System@LoadResString$qqrp20System@TResStringRec  +
mov ecx [ebp+var_C] +
mov dl 1 +
mov eax ds:off_49A578 +
call sub_4AC1B8  +
call @System@@RaiseExcept$qqrv  +
mov edx esi +
mov eax [ebx+30h] +
mov ecx [eax] +
call dword ptr [ecx+40h]  +
mov eax [ebx+40h] +
add [esi] eax +
mov eax [ebx+44h] +
add [esi+4] eax +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_475FEC  +
lea eax [ebp+var_C] +
call unknown_libname_540  +
retn   +
jmp unknown_libname_539  +
jmp loc_475FDC  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
push edi  +
push edi  +
mov esi edx +
mov ebx eax +
test ebx ebx +
jz loc_476077  +
mov eax ebx +
mov edx ds:off_462B40 +
call @System@@IsClass$qqrp14System@TObjectp17System@TMetaClass  +
test al al +
jz loc_476070  +
mov edx esi +
mov eax ebx +
call @Forms@TCustomForm@SendCancelMode$qqrp17Controls@TControl  +
mov ebx [ebx+30h] +
test ebx ebx +
jnz loc_476056  +
pop esi  +
pop ebx  +
retn   +
***
add esp 0FFFFFFF0h +
push ebx  +
push esi  +
push edi  +
mov [ebp+var_4] ecx +
mov edi edx +
mov ebx eax +
mov esi [ebx+0A0h] +
test esi esi +
jz loc_4760D6  +
cmp dword_4F1824 0 +
jnz loc_4760D6  +
mov ax ds:word_4760E0 +
and ax [ebx+1Ch] +
mov dx ds:word_4760E4 +
cmp dx ax +
jnz loc_4760D6  +
mov [ebp+var_10] edi +
mov eax [ebp+var_4] +
mov [ebp+var_C] eax +
mov eax [ebp+arg_0] +
mov [ebp+var_8] eax +
lea eax [ebp+var_10] +
push eax  +
mov ecx ebx +
mov edx 0B042h +
mov eax esi +
call @Controls@TControl@Perform$qqruiii  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 4  +
***
mov edx 0B037h +
call @Controls@TControl@Perform$qqruiii  +
retn   +
***
push edi  +
push ebp  +
add esp 0FFFFFFF0h +
mov [esp+10h+var_10] ecx +
mov edi edx +
mov esi eax +
cmp edi [esp+10h+var_10] +
jz loc_476286  +
test byte ptr [esi+1Ch] 1 +
jz loc_47611D  +
mov bl [esi+98h] +
jmp loc_476123  +
mov bl ds:byte_47629C +
test bl 1 +
jz loc_47613A  +
mov eax [esp+10h+var_10] +
push eax  +
push edi  +
mov eax [esi+40h] +
push eax  +
call MulDiv  +
mov ebp eax +
jmp loc_47613D  +
mov ebp [esi+40h] +
test bl 2 +
jz loc_476156  +
mov eax [esp+10h+var_10] +
push eax  +
push edi  +
mov eax [esi+44h] +
push eax  +
call MulDiv  +
mov [esp+10h+var_C] eax +
jmp loc_47615D  +
mov eax [esi+44h] +
mov [esp+10h+var_C] eax +
test bl 4 +
jz loc_47619A  +
test byte ptr [esi+51h] 1 +
jnz loc_47619A  +
test bl 1 +
jz loc_476186  +
mov eax [esp+10h+var_10] +
push eax  +
push edi  +
mov eax [esi+40h] +
add eax [esi+48h] +
push eax  +
call MulDiv  +
sub eax ebp +
mov [esp+10h+var_8] eax +
jmp loc_4761A1  +
mov eax [esp+10h+var_10] +
push eax  +
push edi  +
mov eax [esi+48h] +
push eax  +
call MulDiv  +
mov [esp+10h+var_8] eax +
jmp loc_4761A1  +
mov eax [esi+48h] +
mov [esp+10h+var_8] eax +
test bl 8 +
setnz al  +
test al al +
jz loc_4761EA  +
test byte ptr [esi+51h] 2 +
jnz loc_4761EA  +
test bl 8 +
setnz dl  +
test al al +
jz loc_4761D6  +
mov eax [esp+10h+var_10] +
push eax  +
push edi  +
mov eax [esi+44h] +
add eax [esi+4Ch] +
push eax  +
call MulDiv  +
sub eax [esp+10h+var_C] +
mov [esp+10h+var_4] eax +
jmp loc_4761F1  +
mov eax [esp+10h+var_10] +
push eax  +
push edi  +
mov eax [esi+44h] +
push eax  +
call MulDiv  +
mov [esp+10h+var_4] eax +
jmp loc_4761F1  +
mov eax [esi+4Ch] +
mov [esp+10h+var_4] eax +
mov eax [esp+10h+var_8] +
push eax  +
mov eax [esp+14h+var_4] +
push eax  +
mov ecx [esp+18h+var_C] +
mov edx ebp +
mov eax esi +
mov ebp [eax] +
call dword ptr [ebp+84h]  +
mov eax ebx +
and al ds:byte_4762A0 +
mov dl ds:byte_4762A4 +
cmp dl al +
jz loc_476234  +
mov eax [esp+10h+var_10] +
push eax  +
push edi  +
mov eax [esi+90h] +
push eax  +
call MulDiv  +
mov [esi+90h] eax +
mov eax ebx +
and al ds:byte_4762A8 +
mov dl ds:byte_4762A4 +
cmp dl al +
jz loc_47625D  +
mov eax [esp+10h+var_10] +
push eax  +
push edi  +
mov eax [esi+94h] +
push eax  +
call MulDiv  +
mov [esi+94h] eax +
cmp byte ptr [esi+59h] 0 +
jnz loc_476286  +
test bl 10h +
jz loc_476286  +
mov eax [esp+10h+var_10] +
push eax  +
push edi  +
mov ebx [esi+68h] +
mov eax ebx +
call @Graphics@TFont@GetSize$qqrv  +
push eax  +
call MulDiv  +
mov edx eax +
mov eax ebx +
call @Graphics@TFont@SetSize$qqri  +
mov al ds:byte_4762A4 +
mov [esi+98h] al +
add esp 10h +
pop ebp  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
jz loc_4762C2  +
add esp 0FFFFFFF8h +
push edi  +
mov esi edx +
mov ebx eax +
cmp esi [ebx+30h] +
jz loc_4763F8  +
cmp ebx esi +
jnz loc_4763D6  +
mov ecx off_4EA744 +
mov dl 1 +
mov eax ds:off_49A578 +
call @Sysutils@Exception@$bctr$qqrp20System@TResStringRec  +
call @System@@RaiseExcept$qqrv  +
mov eax [ebx+30h] +
test eax eax +
jz loc_4763E4  +
mov edx ebx +
call sub_479A68  +
test esi esi +
jz loc_4763F8  +
mov edx ebx +
mov eax esi +
call @Controls@TWinControl@InsertControl$qqrp17Controls@TControl  +
mov eax ebx +
call @Controls@TControl@UpdateAnchorRules$qqrv  +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
mov ebx edx +
mov edi eax +
cmp bl [edi+57h] +
jz loc_476433  +
mov eax edi +
mov si 0FFCDh +
call @System@@CallDynaInst$qqrv  +
mov [edi+57h] bl +
push 0  +
xor ecx ecx +
mov cl bl +
mov edx 0B00Bh +
mov eax edi +
call @Controls@TControl@Perform$qqruiii  +
mov eax edi +
mov si 0FFD0h +
call @System@@CallDynaInst$qqrv  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
cmp dl [eax+58h] +
jz locret_47644E  +
mov [eax+58h] dl +
push 0  +
xor ecx ecx +
mov edx 0B00Ch +
call @Controls@TControl@Perform$qqruiii  +
retn   +
***
mov edx 0Eh +
call @Controls@TControl@Perform$qqruiii  +
retn   +
***
call @Controls@TControl@Perform$qqruiii  +
mov edx [eax+0ACh] +
test edx edx +
jle loc_476479  +
mov eax edx +
retn   +
mov eax [eax+4Ch] +
retn   +
***
mov edx [eax+0A8h] +
test edx edx +
jle loc_47648D  +
mov eax edx +
retn   +
mov eax [eax+48h] +
retn   +
***
mov esi edx +
mov ebx eax +
mov [ebx+7Ch] esi +
test esi esi +
jz loc_4764B3  +
mov edx ebx +
mov eax esi +
call @Menus@TMenu@ParentBiDiModeChanged$qqrp14System@TObject  +
mov edx ebx +
mov eax esi +
call @Classes@TComponent@FreeNotification$qqrp18Classes@TComponent  +
pop esi  +
pop ebx  +
retn   +
***
push edx  +
push edi  +
mov edi edx +
mov esi eax +
mov eax esi +
call @Controls@TControl@GetTextLen$qqrv  +
mov ebx eax +
mov eax edi +
mov ecx ebx +
xor edx edx +
call @@LStrFromPCharLen$qqrr10AnsiStringpci  +
test ebx ebx +
jz loc_476507  +
lea ecx [ebx+1] +
mov edx [edi] +
mov eax esi +
call unknown_libname_272  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push 0  +
push ebx  +
push esi  +
mov esi edx +
mov ebx eax +
xor eax eax +
push ebp  +
push offset loc_476561  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
lea edx [ebp+var_4] +
mov eax ebx +
call @TControl@GetText$qqrv  +
mov eax [ebp+var_4] +
mov edx esi +
call @System@@LStrCmp$qqrv  +
jz loc_47654B  +
mov eax esi +
call unknown_libname_550  +
mov edx eax +
mov eax ebx +
call @Controls@TControl@SetTextBuf$qqrpc  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_476568  +
lea eax [ebp+var_4] +
call unknown_libname_540  +
retn   +
jmp unknown_libname_539  +
jmp loc_476558  +
pop esi  +
pop ebx  +
pop ecx  +
pop ebp  +
retn   +
***
cmp dl [eax+5Fh] +
jz locret_47658A  +
mov [eax+5Fh] dl +
mov byte ptr [eax+60h] 0 +
push 0  +
xor ecx ecx +
mov edx 0B03Ch +
call @Controls@TControl@Perform$qqruiii  +
retn   +
***
mov byte ptr [ebx+59h] 0 +
mov byte ptr [ebx+56h] 0 +
mov eax [ebx+68h] +
call sub_45A928  +
cmp eax [ebx+84h] +
jz loc_4765BC  +
or byte ptr [ebx+98h] 10h +
mov eax [ebx+68h] +
call sub_45A928  +
mov [ebx+84h] eax +
push 0  +
xor ecx ecx +
mov edx 0B00Eh +
mov eax ebx +
call @Controls@TControl@Perform$qqruiii  +
pop ebx  +
retn   +
***
mov eax [esi+68h] +
mov ecx [eax] +
call dword ptr [ecx+8]  +
pop esi  +
retn   +
***
cmp byte ptr [eax+59h] 0 +
jnz loc_4765EC  +
cmp byte ptr [eax+56h] 0 +
jz loc_4765EF  +
xor eax eax +
retn   +
mov al 1 +
retn   +
***
mov al [eax+9Ah] +
xor al 1 +
retn   +
***
xor al 1 +
retn   +
***
cmp dl [eax+59h] +
jz locret_47662A  +
mov [eax+59h] dl +
cmp dword ptr [eax+30h] 0 +
jz locret_47662A  +
test byte ptr [eax+1Ch] 2 +
jnz locret_47662A  +
push 0  +
xor ecx ecx +
mov edx 0B008h +
call @Controls@TControl@Perform$qqruiii  +
retn   +
***
cmp dl [eax+99h] +
cmp dl [eax+9Ah] +
jz locret_476678  +
mov [eax+9Ah] dl +
cmp dword ptr [eax+30h] 0 +
jz locret_476678  +
test byte ptr [eax+1Ch] 2 +
jnz locret_476678  +
push 0  +
xor ecx ecx +
mov edx 0B023h +
call @Controls@TControl@Perform$qqruiii  +
retn   +
***
cmp edx [eax+70h] +
jz locret_476696  +
mov [eax+70h] edx +
mov byte ptr [eax+5Ah] 0 +
push 0  +
xor ecx ecx +
mov edx 0B00Dh +
call @Controls@TControl@Perform$qqruiii  +
retn   +
***
xor al 1 +
retn   +
***
cmp dl [eax+5Ah] +
jz locret_4766C2  +
mov [eax+5Ah] dl +
cmp dword ptr [eax+30h] 0 +
jz locret_4766C2  +
test byte ptr [eax+1Ch] 2 +
jnz locret_4766C2  +
push 0  +
xor ecx ecx +
mov edx 0B009h +
call @Controls@TControl@Perform$qqruiii  +
retn   +
***
cmp dl [eax+60h] +
jz locret_4766E6  +
mov [eax+60h] dl +
cmp dword ptr [eax+30h] 0 +
jz locret_4766E6  +
test byte ptr [eax+1Ch] 2 +
jnz locret_4766E6  +
push 0  +
xor ecx ecx +
mov edx 0B03Dh +
call @Controls@TControl@Perform$qqruiii  +
retn   +
***
cmp dx [eax+78h] +
jz locret_476700  +
mov [eax+78h] dx +
push 0  +
xor ecx ecx +
mov edx 0B00Fh +
call @Controls@TControl@Perform$qqruiii  +
retn   +
***
call @Controls@GetCaptureControl$qqrv  +
cmp ebx eax +
setz al  +
pop ebx  +
retn   +
***
mov ebx edx +
mov si 0FFCEh +
call @System@@CallDynaInst$qqrv  +
pop esi  +
retn   +
***
push edi  +
mov esi edx +
mov ebx eax +
mov eax [ebx+30h] +
test eax eax +
jz loc_4767C6  +
mov eax [eax+198h] +
mov edx ebx +
call unknown_libname_419  +
test eax eax +
jl loc_4767C6  +
mov edx [ebx+30h] +
mov edi [edx+198h] +
mov edx [edi+8] +
test esi esi +
jge loc_47677D  +
xor esi esi +
cmp edx esi +
jg loc_476784  +
mov esi edx +
dec esi  +
cmp eax esi +
jz loc_4767C6  +
mov edx edi +
xchg eax edx +
call @Classes@TList@Delete$qqri  +
mov eax [ebx+30h] +
mov eax [eax+198h] +
mov ecx ebx +
mov edx esi +
call @Classes@TList@Insert$qqripv  +
mov cl 1 +
mov dl [ebx+57h] +
mov eax ebx +
call @Controls@TControl@InvalidateControl$qqroo  +
mov eax ebx +
call sub_4637FC  +
test byte ptr [eax+54h] 4 +
jz loc_4767C6  +
mov dl 1 +
mov si 0FFD1h +
call @System@@CallDynaInst$qqrv  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov ecx [eax+30h] +
add esp 0FFFFFFF4h +
push ebx  +
push esi  +
xor ecx ecx +
mov [ebp+var_C] ecx +
mov ebx eax +
xor eax eax +
push ebp  +
push offset loc_476886  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
cmp dword ptr [ebx+30h] 0 +
jnz loc_476844  +
mov eax [ebx+8] +
mov [ebp+var_8] eax +
mov [ebp+var_4] 0Bh +
lea eax [ebp+var_8] +
push eax  +
push 0  +
lea edx [ebp+var_C] +
mov eax off_4EA700 +
call @System@LoadResString$qqrp20System@TResStringRec  +
mov ecx [ebp+var_C] +
mov dl 1 +
mov eax ds:off_49A578 +
call sub_4AC1B8  +
call @System@@RaiseExcept$qqrv  +
mov eax [ebx+30h] +
mov ecx [eax] +
call dword ptr [ecx+48h]  +
mov esi eax +
push 0  +
mov eax [ebx+44h] +
push eax  +
mov eax [ebx+40h] +
push eax  +
push esi  +
call SetViewportOrgEx  +
mov eax [ebx+4Ch] +
push eax  +
mov eax [ebx+48h] +
push eax  +
push 0  +
push 0  +
push esi  +
call IntersectClipRect  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_47688D  +
lea eax [ebp+var_C] +
call unknown_libname_540  +
retn   +
jmp unknown_libname_539  +
jmp loc_47687D  +
mov eax esi +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
add esp 0FFFFFFDCh +
push ebx  +
push esi  +
push edi  +
mov [ebp+var_1] 1 +
mov eax [ebp+arg_0] +
mov eax [eax-4] +
mov eax [eax+30h] +
mov edi [eax+198h] +
mov eax [ebp+arg_0] +
mov edx [eax-4] +
mov eax edi +
call unknown_libname_419  +
mov esi eax +
test esi esi +
jle loc_476915  +
dec esi  +
mov edx esi +
mov eax edi +
call @Classes@TList@Get$qqri  +
mov ebx eax +
cmp byte ptr [ebx+57h] 0 +
jz loc_476911  +
test byte ptr [ebx+50h] 40h +
jz loc_476911  +
lea edx [ebp+rcSrc2] +
mov eax ebx +
call @Controls@TControl@GetBoundsRect$qqrv  +
lea eax [ebp+rcSrc2] +
push eax  +
mov eax [ebp+arg_0] +
add eax 0FFFFFFECh +
push eax  +
lea eax [ebp+rc1] +
push eax  +
call IntersectRect  +
mov eax [ebp+arg_0] +
add eax 0FFFFFFECh +
push eax  +
lea eax [ebp+rc1] +
push eax  +
call EqualRect  +
test eax eax +
jnz loc_476919  +
test esi esi +
jg loc_4768C7  +
mov [ebp+var_1] 0 +
mov al [ebp+var_1] +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
add esp 0FFFFFFE8h +
push ebx  +
mov [ebp+var_15] cl +
mov ebx edx +
mov [ebp+var_4] eax +
test bl bl +
jnz loc_476949  +
mov eax [ebp+var_4] +
test byte ptr [eax+1Ch] 10h +
jz loc_4769A9  +
mov eax [ebp+var_4] +
test byte ptr [eax+51h] 4 +
jnz loc_4769A9  +
mov eax [ebp+var_4] +
cmp dword ptr [eax+30h] 0 +
jz loc_4769A9  +
mov eax [ebp+var_4] +
mov eax [eax+30h] +
call @Controls@TWinControl@HandleAllocated$qqrv  +
test al al +
jz loc_4769A9  +
lea edx [ebp+Rect] +
mov eax [ebp+var_4] +
call @Controls@TControl@GetBoundsRect$qqrv  +
cmp [ebp+var_15] 0 +
jnz loc_476989  +
mov eax [ebp+var_4] +
mov eax [eax+30h] +
test byte ptr [eax+50h] 40h +
jnz loc_476989  +
push ebp  +
call @Controls@_16681  +
pop ecx  +
test al al +
jz loc_47698D  +
xor eax eax +
jmp loc_47698F  +
mov al 1 +
neg al  +
sbb eax eax +
push eax  +
lea eax [ebp+Rect] +
push eax  +
mov eax [ebp+var_4] +
mov eax [eax+30h] +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call InvalidateRect  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
test byte ptr [eax+50h] 40h +
push edi  +
mov edi edx +
mov ebx eax +
mov eax ebx +
call @Forms@GetParentForm$qqrp17Controls@TControl  +
mov esi eax +
test esi esi +
jz loc_4769E7  +
cmp ebx esi +
jz loc_4769E7  +
mov edx edi +
mov eax esi +
mov si 0FFC9h +
call @System@@CallDynaInst$qqrv  +
jmp loc_4769FD  +
mov eax [edi+8] +
push eax  +
mov ecx [edi+4] +
mov edx 0B043h +
mov eax ebx +
call @Controls@TControl@Perform$qqruiii  +
mov [edi+0Ch] eax +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov edx [eax+30h] +
test edx edx +
jz locret_476A15  +
mov eax edx +
mov edx [eax] +
call dword ptr [edx+88h]  +
retn   +
***
mov edx [eax] +
call dword ptr [edx+80h]  +
retn   +
***
add esp 0FFFFFFF8h +
retn   +
***
mov edx off_4EA8CC +
mov edx off_4EA8CC +
mov edx off_4EA8CC +
mov edx off_4EA8CC +
cmp byte ptr [edx+0Dh] 0 +
jz loc_476B7C  +
mov al [eax+5Fh] +
dec eax  +
sub al 2 +
jb loc_476B7F  +
xor eax eax +
retn   +
mov al 1 +
retn   +
***
mov edx dword_4F1804 +
push edi  +
add esp 0FFFFFFF0h +
mov esi ecx +
mov ebx edx +
mov edi eax +
mov eax edi +
mov edx ds:off_462B40 +
call @System@@IsClass$qqrp14System@TObjectp17System@TMetaClass  +
test al al +
jz loc_476BD9  +
cmp byte ptr [edi+9Bh] 1 +
jz loc_476BD9  +
mov ecx off_4EA748 +
mov dl 1 +
mov eax ds:off_49A578 +
call @Sysutils@Exception@$bctr$qqrp20System@TResStringRec  +
call @System@@RaiseExcept$qqrv  +
mov eax edi +
call @Controls@TControl@CalcDockSizes$qqrv  +
cmp dword_4F1820 0 +
jz loc_476BF2  +
cmp dword_4F1820 0FFFFFFFFh +
jnz loc_476C57  +
xor eax eax +
mov dword_4F1820 eax +
test byte ptr [edi+54h] 1 +
jz loc_476C37  +
push esp  +
call GetCursorPos  +
lea ecx [esp+10h+var_8] +
mov edx esp +
mov eax edi +
call @Controls@TControl@ScreenToClient$qqrrx14Windows@TPoint  +
mov eax [esp+10h+var_8] +
mov [esp+10h+var_10] eax +
mov eax [esp+10h+var_4] +
mov [esp+10h+var_C] eax +
mov eax esp +
call unknown_libname_383  +
push eax  +
xor ecx ecx +
mov edx 202h +
mov eax edi +
call @Controls@TControl@Perform$qqruiii  +
test esi esi +
jge loc_476C43  +
mov eax dword_4F1804 +
mov esi [eax+8] +
cmp dword_4F1820 0FFFFFFFFh +
jz loc_476C57  +
mov ecx esi +
mov edx ebx +
mov eax edi +
call @Controls@_16563  +
add esp 10h +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
cmp eax dword_4F1820 +
setz al  +
retn   +
***
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
mov byte ptr [esi] 0 +
cmp word ptr [eax+0F2h] 0 +
jz loc_476CA4  +
mov byte ptr [esi] 1 +
push ecx  +
mov ecx [ebp+arg_8] +
push ecx  +
mov cl [ebp+arg_4] +
push ecx  +
push esi  +
mov ebx eax +
mov ecx edx +
mov edx eax +
mov eax [ebx+0F4h] +
call dword ptr [ebx+0F0h]  +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
push ebx  +
cmp word ptr [eax+0EAh] 0 +
jz loc_476CD1  +
push ecx  +
mov ecx [ebp+arg_0] +
push ecx  +
mov ebx eax +
mov ecx edx +
mov edx eax +
mov eax [ebx+0ECh] +
call dword ptr [ebx+0E8h]  +
pop ebx  +
pop ebp  +
retn 4  +
***
jz loc_476CF5  +
mov ecx edx +
mov ebx eax +
mov edx eax +
mov eax [ebx+114h] +
call dword ptr [ebx+110h]  +
pop ebx  +
retn   +
***
push ebx  +
cmp word ptr [eax+11Ah] 0 +
jz loc_476D1D  +
push ecx  +
mov ecx [ebp+arg_0] +
push ecx  +
mov ebx eax +
mov ecx edx +
mov edx eax +
mov eax [ebx+11Ch] +
call dword ptr [ebx+118h]  +
pop ebx  +
pop ebp  +
retn 4  +
***
push edi  +
push esi  +
mov si 0FFD2h +
call @System@@CallDynaInst$qqrv  +
pop esi  +
pop ebp  +
retn 4  +
***
push ebx  +
cmp word ptr [eax+10Ah] 0 +
jz loc_476E2D  +
push ecx  +
mov ecx [ebp+arg_0] +
push ecx  +
mov ebx eax +
mov ecx edx +
mov edx eax +
mov eax [ebx+10Ch] +
call dword ptr [ebx+108h]  +
pop ebx  +
pop ebp  +
retn 4  +
***
jz loc_476E51  +
mov ecx edx +
mov ebx eax +
mov edx eax +
mov eax [ebx+104h] +
call dword ptr [ebx+100h]  +
pop ebx  +
retn   +
***
add esp 0FFFFFFF4h +
push ebx  +
push esi  +
push edi  +
mov esi [ebp+arg_0] +
lea edi [ebp+var_A+1] +
movs   +
movs   +
mov esi ecx +
mov [ebp+var_1] dl +
mov ebx eax +
mov byte ptr [ebp+var_A] 0 +
cmp word ptr [ebx+13Ah] 0 +
jz loc_476E94  +
push esi  +
lea eax [ebp+var_A+1] +
push eax  +
lea eax [ebp+var_A] +
push eax  +
mov cl [ebp+var_1] +
mov edx ebx +
mov eax [ebx+13Ch] +
call dword ptr [ebx+138h]  +
cmp byte ptr [ebp+var_A] 0 +
jnz loc_476F0B  +
add [ebx+0A4h] esi +
jmp loc_476EF9  +
test ecx ecx +
setl al  +
mov ecx eax +
mov eax [ebx+0A4h] +
cdq   +
xor eax edx +
sub eax edx +
mov esi eax +
sub esi 78h +
mov [ebx+0A4h] esi +
test cl cl +
jz loc_476EE5  +
test esi esi +
jz loc_476ECF  +
neg esi  +
mov [ebx+0A4h] esi +
lea ecx [ebp+var_A+1] +
mov dl [ebp+var_1] +
mov eax ebx +
mov si 0FFE1h +
call @System@@CallDynaInst$qqrv  +
mov byte ptr [ebp+var_A] al +
jmp loc_476EF9  +
lea ecx [ebp+var_A+1] +
mov dl [ebp+var_1] +
mov eax ebx +
mov si 0FFE0h +
call @System@@CallDynaInst$qqrv  +
mov byte ptr [ebp+var_A] al +
mov ecx [ebx+0A4h] +
mov eax ecx +
cdq   +
xor eax edx +
sub eax edx +
cmp eax 78h +
jge loc_476EA2  +
mov al byte ptr [ebp+var_A] +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 4  +
***
push edi  +
add esp 0FFFFFFF4h +
mov esi ecx +
lea edi [esp+0Ch+var_B] +
movs   +
movs   +
mov [esp+0Ch+var_C] dl +
mov byte ptr [esp+0Ch+var_3] 0 +
cmp word ptr [eax+142h] 0 +
jz loc_476F56  +
lea edx [esp+0Ch+var_B] +
push edx  +
lea edx [esp+10h+var_3] +
push edx  +
mov ebx eax +
mov cl [esp+14h+var_C] +
mov edx eax +
mov eax [ebx+144h] +
call dword ptr [ebx+140h]  +
mov al byte ptr [esp+0Ch+var_3] +
add esp 0Ch +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
add esp 0FFFFFFF4h +
mov esi ecx +
lea edi [esp+0Ch+var_B] +
movs   +
movs   +
mov [esp+0Ch+var_C] dl +
mov byte ptr [esp+0Ch+var_3] 0 +
cmp word ptr [eax+14Ah] 0 +
jz loc_476FA2  +
lea edx [esp+0Ch+var_B] +
push edx  +
lea edx [esp+10h+var_3] +
push edx  +
mov ebx eax +
mov cl [esp+14h+var_C] +
mov edx eax +
mov eax [ebx+14Ch] +
call dword ptr [ebx+148h]  +
mov al byte ptr [esp+0Ch+var_3] +
add esp 0Ch +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
add esp 0FFFFFFE0h +
push ebx  +
push esi  +
push edi  +
mov [ebp+var_1] cl +
mov esi edx +
mov eax esi +
mov edx [eax] +
call dword ptr [edx+38h]  +
mov ebx eax +
cmp [ebp+var_1] 0 +
jz loc_476FDB  +
push esi  +
add esi 5Ch +
lea edi [ebp+var_20] +
movs   +
movs   +
movs   +
movs   +
pop esi  +
jmp loc_476FE7  +
push esi  +
add esi 44h +
lea edi [ebp+var_20] +
movs   +
movs   +
movs   +
movs   +
pop esi  +
call GetDesktopWindow  +
mov [ebp+hWnd] eax +
push 402h  +
push 0  +
mov eax [ebp+hWnd] +
push eax  +
call GetDCEx  +
mov [ebp+hDC] eax +
xor eax eax +
push ebp  +
push offset loc_4770CB  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov eax [esi+40h] +
call @Graphics@TBrush@GetHandle$qqrv  +
push eax  +
mov eax [ebp+hDC] +
push eax  +
call SelectObject  +
mov [ebp+var_10] eax +
push 5A0049h  +
push ebx  +
mov eax [ebp+var_18] +
mov esi [ebp+var_20] +
sub eax esi +
sub eax ebx +
push eax  +
mov edi [ebp+var_1C] +
push edi  +
mov eax esi +
add eax ebx +
push eax  +
mov eax [ebp+hDC] +
push eax  +
call PatBlt  +
push 5A0049h  +
mov eax [ebp+var_14] +
sub eax edi +
sub eax ebx +
push eax  +
push ebx  +
mov eax edi +
add eax ebx +
push eax  +
mov eax [ebp+var_18] +
sub eax ebx +
push eax  +
mov eax [ebp+hDC] +
push eax  +
call PatBlt  +
push 5A0049h  +
push ebx  +
mov eax [ebp+var_18] +
sub eax [ebp+var_20] +
sub eax ebx +
push eax  +
mov eax [ebp+var_14] +
sub eax ebx +
push eax  +
push esi  +
mov eax [ebp+hDC] +
push eax  +
call PatBlt  +
push 5A0049h  +
mov eax [ebp+var_14] +
sub eax [ebp+var_1C] +
sub eax ebx +
push eax  +
push ebx  +
push edi  +
push esi  +
mov eax [ebp+hDC] +
push eax  +
call PatBlt  +
mov eax [ebp+var_10] +
push eax  +
mov eax [ebp+hDC] +
push eax  +
call SelectObject  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4770D2  +
mov eax [ebp+hDC] +
push eax  +
mov eax [ebp+hWnd] +
push eax  +
call ReleaseDC  +
retn   +
jmp unknown_libname_539  +
jmp loc_4770BD  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
xor ecx ecx +
mov eax esi +
mov si 0FFE8h +
call @System@@CallDynaInst$qqrv  +
pop esi  +
retn   +
***
mov cl 1 +
mov eax esi +
mov si 0FFE8h +
call @System@@CallDynaInst$qqrv  +
pop esi  +
retn   +
***
push edi  +
push ebp  +
add esp 0FFFFFFF0h +
mov edi edx +
mov [esp+10h+var_10] eax +
mov ebp [edi+8] +
mov esi [ebp+8] +
mov eax esi +
mov edx ds:off_4712A8 +
call @System@@IsClass$qqrp14System@TObjectp17System@TMetaClass  +
mov ebx eax +
cmp byte_4F1828 0 +
jz loc_477142  +
test bl bl +
jnz loc_477142  +
mov eax esi +
mov edx ds:off_47118C +
call unknown_libname_534  +
mov esi [eax+38h] +
lea ecx [esp+10h+var_C+1] +
mov edx ebp +
mov eax [esp+10h+var_10] +
call @Controls@TControl@ScreenToClient$qqrrx14Windows@TPoint  +
mov al [edi+4] +
sub al 3 +
jb loc_47715E  +
jz loc_4771B5  +
jmp loc_4771EA  +
mov byte ptr [esp+10h+var_C] 1 +
test bl bl +
jz loc_477189  +
mov eax [esp+10h+var_7] +
push eax  +
mov al [edi+4] +
push eax  +
lea eax [esp+18h+var_C] +
push eax  +
mov ecx [esp+1Ch+var_C+1] +
mov edx esi +
mov eax [ebp+0Ch] +
mov si 0FFC4h +
call @System@@CallDynaInst$qqrv  +
jmp loc_4771AA  +
mov eax [esp+10h+var_7] +
push eax  +
mov al [edi+4] +
push eax  +
lea eax [esp+18h+var_C] +
push eax  +
mov ecx [esp+1Ch+var_C+1] +
mov edx esi +
mov eax [esp+1Ch+var_10] +
mov si 0FFDEh +
call @System@@CallDynaInst$qqrv  +
xor eax eax +
mov al [esp+1Ch+var_18] +
mov [edi+0Ch] eax +
jmp loc_4771EA  +
test bl bl +
jz loc_4771D2  +
mov eax [esp+10h+var_7] +
push eax  +
mov ecx [esp+14h+var_C+1] +
mov edx esi +
mov eax [ebp+0Ch] +
mov si 0FFB7h +
call @System@@CallDynaInst$qqrv  +
jmp loc_4771EA  +
mov eax [esp+10h+var_7] +
push eax  +
mov ecx [esp+14h+var_C+1] +
mov edx esi +
mov eax [esp+14h+var_10] +
mov si 0FFCBh +
call @System@@CallDynaInst$qqrv  +
add esp 10h +
pop ebp  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
add esp 0FFFFFFCCh +
push ebx  +
push esi  +
push edi  +
mov [ebp+var_4] ecx +
mov edi edx +
mov ebx eax +
test edi edi +
jz loc_477211  +
cmp edi 0FFFFFFFFh +
jnz loc_4772CE  +
mov eax [ebx+0A0h] +
test eax eax +
jz loc_477258  +
cmp byte ptr [eax+1A7h] 0 +
jz loc_477258  +
cmp dword ptr [eax+17Ch] 0 +
jz loc_477258  +
lea ecx [ebp+Points] +
mov eax [eax+17Ch] +
mov edx ebx +
mov esi [eax] +
call dword ptr [esi+14h]  +
push 2  +
lea eax [ebp+Points] +
push eax  +
push 0  +
mov eax [ebx+0A0h] +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call MapWindowPoints  +
jmp loc_477292  +
lea ecx [ebp+var_24] +
mov edx [ebx+44h] +
mov eax [ebx+40h] +
call @Olectrls@TOleControl@GetVariantProp$qqri  +
mov eax [ebp+var_24] +
mov [ebp+Points.x] eax +
mov eax [ebp+var_20] +
mov [ebp+Points.y] eax +
mov esi [ebx+30h] +
test esi esi +
jz loc_477292  +
lea ecx [ebp+var_24] +
lea edx [ebp+Points] +
mov eax esi +
call @Controls@TControl@ClientToScreen$qqrrx14Windows@TPoint  +
mov eax [ebp+var_24] +
mov [ebp+Points.x] eax +
mov eax [ebp+var_20] +
mov [ebp+Points.y] eax +
mov eax ebx +
call @Controls@TControl@GetUndockHeight$qqrv  +
push eax  +
lea eax [ebp+var_34] +
push eax  +
mov eax ebx +
call @Controls@TControl@GetUndockWidth$qqrv  +
mov ecx eax +
mov edx [ebp+Points.y] +
mov eax [ebp+Points.x] +
call sub_49B730  +
lea esi [ebp+var_34] +
lea edi [ebp+Points] +
movs   +
movs   +
movs   +
movs   +
lea edx [ebp+Points] +
mov eax ebx +
call @Controls@TControl@ManualFloat$qqrrx11Types@TRect  +
mov [ebp+var_5] al +
jmp loc_4773C6  +
mov eax ebx +
call @Controls@TControl@CalcDockSizes$qqrv  +
cmp dword ptr [ebx+0A0h] 0 +
jz loc_4772F9  +
mov eax [ebx+0A0h] +
mov ecx ebx +
mov edx edi +
mov si 0FFBEh +
call @System@@CallDynaInst$qqrv  +
test al al +
jnz loc_4772F9  +
xor eax eax +
jmp loc_4772FB  +
mov al 1 +
mov [ebp+var_5] al +
cmp [ebp+var_5] 0 +
jz loc_4773C6  +
mov ecx ebx +
mov dl 1 +
mov eax ds:off_4712A8 +
call @Quickrpt@TQRBasePanel@$bctr$qqrp18Classes@TComponent  +
mov [ebp+var_C] eax +
xor edx edx +
push ebp  +
push offset loc_4773BF  +
push dword ptr fs:[edx]  +
mov fs:[edx] esp +
mov eax [ebx+0A0h] +
test eax eax +
jz loc_47733A  +
call @Controls@TWinControl@GetHandle$qqrv  +
mov esi eax +
jmp loc_47733C  +
xor esi esi +
lea edx [ebp+Points] +
mov eax ebx +
call @Controls@TControl@GetBoundsRect$qqrv  +
test esi esi +
jz loc_477358  +
push 2  +
lea eax [ebp+Points] +
push eax  +
push 0  +
push esi  +
call MapWindowPoints  +
mov eax [ebp+var_C] +
mov [eax+4] edi +
mov eax [ebp+var_C] +
mov dl [ebp+arg_0] +
mov [eax+54h] dl +
mov eax [ebp+var_C] +
mov edx [ebp+var_4] +
mov [eax+58h] edx +
mov eax [ebp+var_C] +
push edi  +
lea edi [eax+44h] +
lea esi [ebp+Points] +
movs   +
movs   +
movs   +
movs   +
pop edi  +
push 1  +
lea eax [ebp+Points] +
push eax  +
mov eax edi +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
push 0  +
call MapWindowPoints  +
mov eax [ebp+Points.y] +
push eax  +
mov ecx [ebp+Points.x] +
mov edx [ebp+var_C] +
mov eax edi +
mov si 0FFB7h +
call @System@@CallDynaInst$qqrv  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4773C6  +
mov eax [ebp+var_C] +
call @System@TObject@Free$qqrv  +
retn   +
jmp unknown_libname_539  +
jmp loc_4773B6  +
mov al [ebp+var_5] +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 4  +
***
push edi  +
add esp 0FFFFFFE0h +
mov esi edx +
lea edi [esp+20h+var_20] +
movs   +
movs   +
movs   +
movs   +
mov edi eax +
mov ebx [edi+0A0h] +
test ebx ebx +
jz loc_477406  +
mov ecx edi +
xor edx edx +
mov eax ebx +
mov si 0FFBEh +
call @System@@CallDynaInst$qqrv  +
test al al +
jnz loc_477406  +
xor eax eax +
jmp loc_477408  +
mov al 1 +
mov ebx eax +
test bl bl +
jz loc_47745E  +
mov edx esp +
mov eax edi +
call @Controls@TControl@CreateFloatingDockSite$qqrrx11Types@TRect  +
mov esi eax +
test esi esi +
jz loc_47744F  +
mov eax esi +
call @Controls@TControl@GetClientHeight$qqrv  +
push eax  +
lea eax [esp+24h+var_10] +
push eax  +
mov eax esi +
call @Controls@TControl@GetClientWidth$qqrv  +
mov ecx eax +
xor edx edx +
xor eax eax +
call sub_49B708  +
lea ecx [esp+20h+var_10] +
mov edx esi +
mov eax edi +
mov si 0FFCCh +
call @System@@CallDynaInst$qqrv  +
jmp loc_47745E  +
mov ecx esp +
mov edx esi +
mov eax edi +
mov si 0FFCCh +
call @System@@CallDynaInst$qqrv  +
mov eax ebx +
add esp 20h +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
call @System@@CallDynaInst$qqrv  +
retn   +
***
mov byte ptr [esp+1+var_1] 1 +
cmp word ptr [eax+0C2h] 0 +
jz loc_4774A0  +
push ecx  +
lea ecx [esp+5+var_1] +
push ecx  +
mov ecx edx +
mov ebx eax +
mov edx eax +
mov eax [ebx+0C4h] +
call dword ptr [ebx+0C0h]  +
mov al byte ptr [esp+1+var_1] +
pop edx  +
pop ebx  +
retn   +
***
add esp 0FFFFFFF0h +
mov [esp+10h+var_C] ecx +
mov [esp+10h+var_10] edx +
mov esi eax +
cmp byte ptr [esi+5Bh] 5 +
jz loc_477509  +
mov eax [esp+10h+var_10] +
mov eax [eax] +
mov [esp+10h+var_8] eax +
mov eax [esp+10h+var_C] +
mov eax [eax] +
mov [esp+10h+var_4] eax +
lea ecx [esp+10h+var_4] +
lea edx [esp+10h+var_8] +
mov eax esi +
mov ebx [eax] +
call dword ptr [ebx+34h]  +
mov dl [esi+5Bh] +
mov ecx edx +
test cl cl +
jz loc_4774EF  +
add cl 0FDh +
sub cl 2 +
jnb loc_4774F8  +
mov ecx [esp+10h+var_10] +
mov ebx [esp+10h+var_8] +
mov [ecx] ebx +
sub dl 3 +
jnb loc_47750B  +
mov edx [esp+10h+var_C] +
mov ecx [esp+10h+var_4] +
mov [edx] ecx +
jmp loc_47750B  +
mov al 1 +
add esp 10h +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
push ebx  +
cmp word ptr [eax+0CAh] 0 +
jz loc_47756D  +
push ecx  +
mov ecx [ebp+arg_4] +
push ecx  +
mov ecx [ebp+arg_0] +
push ecx  +
mov ecx edx +
mov ebx eax +
mov edx eax +
mov eax [ebx+0CCh] +
call dword ptr [ebx+0C8h]  +
pop ebx  +
pop ebp  +
retn 8  +
***
add esp 0FFFFFFF8h +
mov ebx edx +
mov esi eax +
push ebx  +
call GetCursorPos  +
mov ecx esp +
mov edx ebx +
mov eax esi +
call @Controls@TControl@ScreenToClient$qqrrx14Windows@TPoint  +
mov eax [esp+8+var_8] +
mov [ebx] eax +
mov eax [esp+8+var_4] +
mov [ebx+4] eax +
pop ecx  +
pop edx  +
pop esi  +
pop ebx  +
retn   +
***
jz loc_4775C9  +
mov esi [edx] +
cmp esi 204h +
jz loc_4775CD  +
cmp esi 205h +
jz loc_4775CD  +
cmp esi 200h +
jz loc_4775CD  +
cmp esi 206h +
jz loc_4775CD  +
xor eax eax +
pop esi  +
retn   +
mov al 1 +
pop esi  +
retn   +
***
push edi  +
add esp 0FFFFFFF0h +
mov edi ecx +
mov esi edx +
mov edx [eax+74h] +
mov edx [edx+14h] +
test edx edx +
jbe loc_4775ED  +
mov [esp+10h+var_10] edx +
jmp loc_4775F2  +
xor edx edx +
mov [esp+10h+var_10] edx +
mov edx [eax+74h] +
mov edx [edx+10h] +
test edx edx +
jbe loc_477602  +
mov [esp+10h+var_C] edx +
jmp loc_477608  +
xor edx edx +
mov [esp+10h+var_C] edx +
mov edx [eax+74h] +
mov edx [edx+0Ch] +
test edx edx +
jbe loc_477618  +
mov [esp+10h+var_8] edx +
jmp loc_47761E  +
xor edx edx +
mov [esp+10h+var_8] edx +
mov edx [eax+74h] +
mov edx [edx+8] +
test edx edx +
jbe loc_47762E  +
mov [esp+10h+var_4] edx +
jmp loc_477634  +
xor edx edx +
mov [esp+10h+var_4] edx +
lea edx [esp+10h+var_8] +
push edx  +
lea edx [esp+14h+var_4] +
push edx  +
lea ecx [esp+18h+var_C] +
lea edx [esp+18h+var_10] +
mov ebx [eax] +
call dword ptr [ebx+38h]  +
cmp [esp+10h+var_8] 0 +
jle loc_477662  +
mov eax [esi] +
cmp eax [esp+10h+var_8] +
jle loc_477662  +
mov eax [esp+10h+var_8] +
mov [esi] eax +
jmp loc_477674  +
cmp [esp+10h+var_10] 0 +
jle loc_477674  +
mov eax [esi] +
cmp eax [esp+10h+var_10] +
jge loc_477674  +
mov eax [esp+10h+var_10] +
mov [esi] eax +
cmp [esp+10h+var_4] 0 +
jle loc_47768B  +
mov eax [edi] +
cmp eax [esp+10h+var_4] +
jle loc_47768B  +
mov eax [esp+10h+var_4] +
mov [edi] eax +
jmp loc_4776A0  +
cmp [esp+10h+var_C] 0 +
jle loc_4776A0  +
mov eax [edi] +
cmp eax [esp+10h+var_C] +
jge loc_4776A0  +
mov eax [esp+10h+var_C] +
mov [edi] eax +
add esp 10h +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
add esp 0FFFFFFF0h +
push ebx  +
mov [ebp+var_10] edx +
mov [ebp+var_C] ecx +
mov edx [ebp+arg_0] +
mov [ebp+var_8] edx +
xor edx edx +
mov [ebp+var_4] edx +
test eax eax +
jz loc_4776CF  +
lea edx [ebp+var_10] +
mov ebx eax +
mov eax [ebx+3Ch] +
call dword ptr [ebx+38h]  +
mov eax [ebp+var_4] +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 4  +
***
mov eax ebx +
mov ecx [edx] +
mov [eax+40h] ecx +
mov ecx [edx+4] +
mov [eax+44h] ecx +
mov ecx [edx+8] +
sub ecx [edx] +
mov [eax+48h] ecx +
mov ecx [edx+0Ch] +
sub ecx [edx+4] +
mov [eax+4Ch] ecx +
call @Controls@TControl@UpdateAnchorRules$qqrv  +
retn   +
***
add esp 0FFFFFEECh +
push ebx  +
push esi  +
push edi  +
mov ebx edx +
mov esi eax +
test byte ptr [esi+1Ch] 10h +
jz loc_4777C0  +
mov eax esi +
call @Forms@GetParentForm$qqrp17Controls@TControl  +
mov [ebp+var_14] eax +
cmp [ebp+var_14] 0 +
jz loc_4777C0  +
mov eax [ebp+var_14] +
cmp dword ptr [eax+250h] 0 +
jz loc_4777C0  +
mov ecx ebx +
mov eax [ebp+var_14] +
mov eax [eax+250h] +
mov edx esi +
mov edi [eax] +
call dword ptr [edi+24h]  +
test al al +
jnz loc_4778FF  +
mov eax [ebx] +
cmp eax 100h +
jb loc_477800  +
cmp eax 108h +
ja loc_477800  +
mov eax esi +
call @Forms@GetParentForm$qqrp17Controls@TControl  +
mov [ebp+var_14] eax +
cmp [ebp+var_14] 0 +
jz loc_4778F6  +
mov ecx ebx +
mov edx esi +
mov eax [ebp+var_14] +
mov edi [eax] +
call dword ptr [edi+0ECh]  +
test al al +
jnz loc_4778FF  +
jmp loc_4778F6  +
mov eax [ebx] +
cmp eax 200h +
jb loc_4778DF  +
cmp eax 20Ah +
ja loc_4778DF  +
test byte ptr [esi+50h] 80h +
jnz loc_477832  +
sub eax 203h +
jz loc_47782F  +
sub eax 3 +
jz loc_47782F  +
sub eax 3 +
jnz loc_477832  +
sub dword ptr [ebx] 2 +
mov eax [ebx] +
sub eax 200h +
jz loc_477846  +
dec eax  +
jz loc_47785B  +
dec eax  +
jz loc_477878  +
dec eax  +
jz loc_47785B  +
jmp loc_47787F  +
mov ecx ebx +
mov eax off_4EA6C8 +
mov eax [eax] +
mov edx esi +
call @Forms@TApplication@HintMouseMessage$qqrp17Controls@TControlr17Messages@TMessage  +
jmp loc_4778F6  +
cmp byte ptr [esi+5Dh] 1 +
jnz loc_477871  +
mov eax esi +
mov si 0FFEDh +
call @System@@CallDynaInst$qqrv  +
jmp loc_4778FF  +
or word ptr [esi+54h] 1 +
jmp loc_4778F6  +
and word ptr [esi+54h] 0FFFEh +
jmp loc_4778F6  +
mov eax dword_4F1804 +
cmp byte ptr [eax+20h] 0 +
jz loc_4778F6  +
mov eax dword_4F1804 +
cmp dword ptr [eax+1Ch] 0 +
jz loc_4778F6  +
mov eax [ebx] +
mov edx dword_4F1804 +
cmp eax [edx+1Ch] +
jnz loc_4778F6  +
lea eax [ebp+KeyState] +
push eax  +
call GetKeyboardState  +
mov eax [ebx] +
mov [ebp+var_10] eax +
lea eax [ebp+KeyState] +
call @Forms@KeyboardStateToShiftState$qqrpxuc  +
mov [ebp+var_C] al +
mov ax [ebx+4] +
mov [ebp+var_A] ax +
mov eax [ebx+8] +
mov [ebp+var_8] eax +
lea edx [ebp+var_10] +
mov eax esi +
mov si 0FFC9h +
call @System@@CallDynaInst$qqrv  +
jmp loc_4778FF  +
cmp eax 0B00Bh +
jnz loc_4778F6  +
mov edx [ebx+8] +
push edx  +
mov ecx [ebx+4] +
mov edx eax +
mov eax esi +
call @Controls@TControl@SendDockNotification$qqruiii  +
mov edx ebx +
mov eax esi +
mov ecx [eax] +
call dword ptr [ecx-14h]  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
push edi  +
mov ebx edx +
mov esi eax +
mov eax [ebx] +
sub eax 0Ch +
jz loc_477960  +
dec eax  +
jz loc_47791E  +
dec eax  +
jz loc_477946  +
jmp loc_477985  +
mov eax [esi+64h] +
test eax eax +
jz loc_477929  +
mov edi eax +
jmp loc_47792E  +
mov edi offset dword_47798C +
mov ecx [ebx+4] +
dec ecx  +
mov eax [ebx+8] +
mov edx edi +
call @Sysutils@StrLCopy$qqrpcpxcui  +
call @Sysutils@StrLen$qqrpxc  +
mov [ebx+0Ch] eax +
jmp loc_477985  +
mov edi [esi+64h] +
test edi edi +
jnz loc_477954  +
xor eax eax +
mov [ebx+0Ch] eax +
jmp loc_477985  +
mov eax edi +
call @Sysutils@StrLen$qqrpxc  +
mov [ebx+0Ch] eax +
jmp loc_477985  +
mov eax [ebx+8] +
call unknown_libname_466  +
mov edi eax +
mov eax [esi+64h] +
call sub_4A93E0  +
mov [esi+64h] edi +
mov eax [ebx+8] +
push eax  +
mov ecx [ebx+4] +
mov edx [ebx] +
mov eax esi +
call @Controls@TControl@SendDockNotification$qqruiii  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov esi edx +
mov ebx eax +
mov eax esi +
call @Classes@TReader@ReadBoolean$qqrv  +
mov [ebx+5Eh] al +
pop esi  +
pop ebx  +
retn   +
***
mov al [eax+5Eh] +
xchg eax edx +
call unknown_libname_430  +
retn   +
***
mov eax [ebp+arg_0] +
mov eax [eax-4] +
mov eax [eax+20h] +
test eax eax +
jz loc_4779D4  +
mov edx [ebp+arg_0] +
mov al [eax+5Eh] +
mov edx [ebp+arg_0] +
mov edx [edx-8] +
cmp al [edx+5Eh] +
setnz al  +
pop ebp  +
retn   +
mov eax [ebp+arg_0] +
mov eax [eax-8] +
mov al [eax+5Eh] +
pop ebp  +
retn   +
***
add esp 0FFFFFFF8h +
push ebx  +
mov [ebp+var_4] edx +
mov [ebp+var_8] eax +
mov eax [ebp+var_8] +
push eax  +
push offset @Controls@TControl@ReadIsControl$qqrp15Classes@TReader  +
mov eax [ebp+var_8] +
push eax  +
push offset loc_4779A4  +
push ebp  +
call @Controls@_16735  +
pop ecx  +
mov ecx eax +
mov edx offset _str_IsControl.Text +
mov eax [ebp+var_4] +
mov ebx [eax] +
call dword ptr [ebx+4]  +
pop ebx  +
pop ecx  +
pop ecx  +
pop ebp  +
retn   +
***
cmp word ptr [ebx+122h] 0 +
jz loc_477AB7  +
mov ebx eax +
mov edx eax +
mov eax [ebx+12Ch] +
call dword ptr [ebx+128h]  +
pop ebx  +
retn   +
***
push ecx  +
push ebx  +
mov [ebp+var_1] cl +
cmp word ptr [eax+0D2h] 0 +
jz loc_477AEC  +
mov cl [ebp+var_1] +
push ecx  +
mov ecx [ebp+arg_4] +
push ecx  +
mov ecx [ebp+arg_0] +
push ecx  +
mov ebx eax +
mov ecx edx +
mov edx eax +
mov eax [ebx+0D4h] +
call dword ptr [ebx+0D0h]  +
pop ebx  +
pop ecx  +
pop ebp  +
retn 8  +
***
add esp 0FFFFFFF8h +
mov esi edx +
mov ebx eax +
mov edx ebx +
mov eax ebx +
call @Controls@TControl@SendCancelMode$qqrp17Controls@TControl  +
mov edx esi +
mov eax ebx +
mov ecx [eax] +
call dword ptr [ecx-10h]  +
test byte ptr [ebx+50h] 2 +
jz loc_477B9F  +
mov dl 1 +
mov eax ebx +
call @Controls@TControl@SetMouseCapture$qqro  +
test byte ptr [ebx+50h] 8 +
jz loc_477BAA  +
or word ptr [ebx+54h] 2 +
mov al ds:byte_477BC0 +
push eax  +
mov edx esi +
xor ecx ecx +
mov eax ebx +
call @Controls@TControl@DoMouseDown$qqrr17Messages@TWMMouse21Controls@TMouseButton46System@_Set$t18Classes@Classes__1$iuc$0$iuc$6_  +
pop esi  +
pop ebx  +
retn   +
***
mov esi edx +
mov ebx eax +
mov edx ebx +
mov eax ebx +
call @Controls@TControl@SendCancelMode$qqrp17Controls@TControl  +
mov edx esi +
mov eax ebx +
mov ecx [eax] +
call dword ptr [ecx-10h]  +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
mov edi edx +
mov ebx eax +
mov edx ebx +
mov eax ebx +
call @Controls@TControl@SendCancelMode$qqrp17Controls@TControl  +
mov edx edi +
mov eax ebx +
mov ecx [eax] +
call dword ptr [ecx-10h]  +
test byte ptr [ebx+50h] 2 +
jz loc_477C08  +
mov dl 1 +
mov eax ebx +
call @Controls@TControl@SetMouseCapture$qqro  +
test byte ptr [ebx+50h] 8 +
jz loc_477C19  +
mov eax ebx +
mov si 0FFE9h +
call @System@@CallDynaInst$qqrv  +
mov al ds:byte_477C30 +
push eax  +
mov edx edi +
xor ecx ecx +
mov eax ebx +
call @Controls@TControl@DoMouseDown$qqrr17Messages@TWMMouse21Controls@TMouseButton46System@_Set$t18Classes@Classes__1$iuc$0$iuc$6_  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
push ebp  +
add esp 0FFFFFFF0h +
mov ebp ecx +
mov edi edx +
mov esi eax +
xor ebx ebx +
mov eax [edi] +
mov [esp+10h+var_10] eax +
mov eax [ebp+0] +
mov [esp+10h+var_C] eax +
lea ecx [esp+10h+var_C] +
mov edx esp +
mov eax esi +
call @Controls@TControl@DoCanResize$qqrrit1  +
test al al +
jz loc_477CC9  +
mov eax [esp+10h+var_10] +
mov [esp+10h+var_8] eax +
mov eax [esp+10h+var_C] +
mov [esp+10h+var_4] eax +
cmp byte ptr [esi+5Ch] 0 +
jz loc_477CB6  +
lea ecx [esp+10h+var_4] +
lea edx [esp+10h+var_8] +
mov eax esi +
call @Controls@TControl@DoCanAutoSize$qqrrit1  +
test al al +
jz loc_477C9F  +
mov eax [esp+10h+var_8] +
cmp eax [esp+10h+var_10] +
jnz loc_477C9F  +
mov eax [esp+10h+var_4] +
cmp eax [esp+10h+var_C] +
jz loc_477CB6  +
lea ecx [esp+10h+var_4] +
lea edx [esp+10h+var_8] +
mov eax esi +
call @Controls@TControl@DoCanResize$qqrrit1  +
test al al +
jnz loc_477CB6  +
xor ebx ebx +
jmp loc_477CB8  +
mov bl 1 +
test bl bl +
jz loc_477CC9  +
mov eax [esp+10h+var_8] +
mov [edi] eax +
mov eax [esp+10h+var_4] +
mov [ebp+0] eax +
mov eax ebx +
add esp 10h +
pop ebp  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov esi edx +
mov ebx eax +
mov edx esi +
mov eax ebx +
mov ecx [eax] +
call dword ptr [ecx-10h]  +
mov al ds:byte_477CF8 +
push eax  +
mov edx esi +
mov cl 1 +
mov eax ebx +
call @Controls@TControl@DoMouseDown$qqrr17Messages@TWMMouse21Controls@TMouseButton46System@_Set$t18Classes@Classes__1$iuc$0$iuc$6_  +
pop esi  +
pop ebx  +
retn   +
***
mov esi edx +
mov ebx eax +
mov edx esi +
mov eax ebx +
mov ecx [eax] +
call dword ptr [ecx-10h]  +
mov al ds:byte_477D20 +
push eax  +
mov edx esi +
mov cl 1 +
mov eax ebx +
call @Controls@TControl@DoMouseDown$qqrr17Messages@TWMMouse21Controls@TMouseButton46System@_Set$t18Classes@Classes__1$iuc$0$iuc$6_  +
pop esi  +
pop ebx  +
retn   +
***
mov esi edx +
mov ebx eax +
mov edx esi +
mov eax ebx +
mov ecx [eax] +
call dword ptr [ecx-10h]  +
mov al ds:byte_477D48 +
push eax  +
mov edx esi +
mov cl 2 +
mov eax ebx +
call @Controls@TControl@DoMouseDown$qqrr17Messages@TWMMouse21Controls@TMouseButton46System@_Set$t18Classes@Classes__1$iuc$0$iuc$6_  +
pop esi  +
pop ebx  +
retn   +
***
mov esi edx +
mov ebx eax +
mov edx esi +
mov eax ebx +
mov ecx [eax] +
call dword ptr [ecx-10h]  +
mov al ds:byte_477D70 +
push eax  +
mov edx esi +
mov cl 2 +
mov eax ebx +
call @Controls@TControl@DoMouseDown$qqrr17Messages@TWMMouse21Controls@TMouseButton46System@_Set$t18Classes@Classes__1$iuc$0$iuc$6_  +
pop esi  +
pop ebx  +
retn   +
***
push ecx  +
add esp 0FFFFFFF8h +
push ecx  +
push ebx  +
mov [ebp+var_1] cl +
cmp word ptr [eax+0E2h] 0 +
jz loc_477E4C  +
mov cl [ebp+var_1] +
push ecx  +
mov ecx [ebp+arg_4] +
push ecx  +
mov ecx [ebp+arg_0] +
push ecx  +
mov ebx eax +
mov ecx edx +
mov edx eax +
mov eax [ebx+0E4h] +
call dword ptr [ebx+0E0h]  +
pop ebx  +
pop ecx  +
pop ebp  +
retn 8  +
***
push edi  +
mov ebx ecx +
mov esi edx +
mov edi eax +
test byte ptr [edi+51h] 10h +
jnz loc_477E85  +
movsx eax word ptr [esi+8] +
push eax  +
movsx eax word ptr [esi+0Ah] +
push eax  +
mov ax [esi+4] +
call @Forms@KeysToShiftState$qqrus  +
mov ecx eax +
mov edx ebx +
mov eax edi +
mov si 0FFD3h +
call @System@@CallDynaInst$qqrv  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
add esp 0FFFFFFE8h +
mov edi edx +
mov ebx eax +
mov edx edi +
mov eax ebx +
mov ecx [eax] +
call dword ptr [ecx-10h]  +
test byte ptr [ebx+50h] 2 +
jz loc_477EAE  +
xor edx edx +
mov eax ebx +
call @Controls@TControl@SetMouseCapture$qqro  +
test byte ptr [ebx+54h] 2 +
jz loc_477EEF  +
and word ptr [ebx+54h] 0FFFDh +
mov edx esp +
mov eax [edi+8] +
call unknown_libname_382  +
push [esp+18h+pt.y]  +
push [esp+1Ch+pt.x]  +
lea edx [esp+20h+rc] +
mov eax ebx +
mov ecx [eax] +
call dword ptr [ecx+44h]  +
lea eax [esp+20h+rc] +
push eax  +
call PtInRect  +
test eax eax +
jz loc_477EEF  +
mov eax ebx +
mov si 0FFEBh +
call @System@@CallDynaInst$qqrv  +
mov edx edi +
xor ecx ecx +
mov eax ebx +
call @Controls@TControl@DoMouseUp$qqrr17Messages@TWMMouse21Controls@TMouseButton  +
add esp 18h +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov esi edx +
mov ebx eax +
mov edx esi +
mov eax ebx +
mov ecx [eax] +
call dword ptr [ecx-10h]  +
mov edx esi +
mov cl 1 +
mov eax ebx +
call @Controls@TControl@DoMouseUp$qqrr17Messages@TWMMouse21Controls@TMouseButton  +
pop esi  +
pop ebx  +
retn   +
***
mov esi edx +
mov ebx eax +
mov edx esi +
mov eax ebx +
mov ecx [eax] +
call dword ptr [ecx-10h]  +
mov edx esi +
mov cl 2 +
mov eax ebx +
call @Controls@TControl@DoMouseUp$qqrr17Messages@TWMMouse21Controls@TMouseButton  +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
mov ebx edx +
mov edi eax +
mov eax dword_4F1804 +
cmp byte ptr [eax+20h] 0 +
jnz loc_477F6E  +
mov eax dword_4F1804 +
mov byte ptr [eax+20h] 1 +
mov edx 68h +
mov eax dword_4F1804 +
call @Controls@TMouse@SettingChanged$qqri  +
mov ax [ebx+4] +
call @Forms@KeysToShiftState$qqrus  +
mov [ebx+4] al +
mov edx ebx +
mov eax edi +
mov si 0FFC9h +
call @System@@CallDynaInst$qqrv  +
cmp dword ptr [ebx+0Ch] 0 +
jnz loc_477F96  +
mov edx ebx +
mov eax edi +
mov ecx [eax] +
call dword ptr [ecx-10h]  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov eax esi +
mov ecx [eax] +
call dword ptr [ecx-10h]  +
mov eax esi +
call @Controls@TControl@GetMouseCapture$qqrv  +
test al al +
jz loc_477FD2  +
xor edx edx +
mov eax esi +
call @Controls@TControl@SetMouseCapture$qqro  +
test byte ptr [esi+54h] 1 +
jz loc_477FD7  +
push 0FFFFFFFFh  +
xor ecx ecx +
mov edx 202h +
mov eax esi +
call @Controls@TControl@Perform$qqruiii  +
pop esi  +
retn   +
and word ptr [esi+54h] 0FFFEh +
pop esi  +
retn   +
***
mov esi edx +
mov ebx eax +
mov edx esi +
mov eax ebx +
mov ecx [eax] +
call dword ptr [ecx-10h]  +
mov ax ds:word_478084 +
and ax [ebx+1Ch] +
mov dx ds:word_478088 +
cmp dx ax +
jnz loc_47807F  +
mov eax [ebx+74h] +
mov edx [eax+0Ch] +
test edx edx +
jbe loc_478018  +
cmp edx [ebx+48h] +
jge loc_478018  +
mov edx [ebx+48h] +
mov [eax+0Ch] edx +
jmp loc_47802A  +
mov edx [eax+14h] +
test edx edx +
jbe loc_47802A  +
cmp edx [ebx+48h] +
jle loc_47802A  +
mov edx [ebx+48h] +
mov [eax+14h] edx +
mov edx [eax+8] +
test edx edx +
jbe loc_47803E  +
cmp edx [ebx+4Ch] +
jge loc_47803E  +
mov edx [ebx+4Ch] +
mov [eax+8] edx +
jmp loc_478050  +
mov edx [eax+10h] +
test edx edx +
jbe loc_478050  +
cmp edx [ebx+4Ch] +
jle loc_478050  +
mov edx [ebx+4Ch] +
mov [eax+10h] edx +
mov eax [esi+8] +
test eax eax +
jz loc_47807F  +
cmp dword ptr [ebx+0A0h] 0 +
jz loc_47807F  +
test byte ptr [ebx+55h] 4 +
jnz loc_47807F  +
test byte ptr [eax+18h] 1 +
jnz loc_47807F  +
cmp dword ptr [eax+10h] 0 +
jz loc_47807F  +
cmp dword ptr [eax+14h] 0 +
jz loc_47807F  +
mov eax ebx +
call @Controls@TControl@CalcDockSizes$qqrv  +
pop esi  +
pop ebx  +
retn   +
***
test byte ptr [eax+1Ch] 10h +
jz loc_478098  +
test byte ptr [eax+51h] 4 +
jz locret_4780B1  +
cmp byte ptr [eax+57h] 0 +
jz loc_4780A4  +
test byte ptr [eax+50h] 40h +
jnz loc_4780A8  +
xor ecx ecx +
jmp loc_4780AA  +
mov cl 1 +
mov dl 1 +
call @Controls@TControl@InvalidateControl$qqroo  +
retn   +
***
call dword ptr [edx+7Ch]  +
retn   +
***
call dword ptr [edx+7Ch]  +
retn   +
***
call dword ptr [edx+7Ch]  +
retn   +
***
cmp byte ptr [ebx+5Ah] 0 +
jz loc_4780F8  +
cmp dword ptr [edx+4] 0 +
jz loc_4780E7  +
mov edx [edx+8] +
mov eax ebx +
call @Controls@TControl@SetColor$qqr15Graphics@TColor  +
jmp loc_4780F4  +
mov eax [ebx+30h] +
mov edx [eax+70h] +
mov eax ebx +
call @Controls@TControl@SetColor$qqr15Graphics@TColor  +
mov byte ptr [ebx+5Ah] 1 +
pop ebx  +
retn   +
***
mov ebx eax +
cmp byte ptr [ebx+60h] 0 +
jz loc_47811B  +
mov esi [ebx+30h] +
test esi esi +
jz loc_478117  +
mov dl [esi+5Fh] +
mov eax ebx +
mov ecx [eax] +
call dword ptr [ecx+70h]  +
mov byte ptr [ebx+60h] 1 +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
mov eax off_4EA8CC +
cmp byte ptr [eax+0Dh] 0 +
jz loc_478197  +
cmp dword ptr [edx+4] 0 +
jnz loc_478197  +
mov eax esi +
mov edx [eax] +
call dword ptr [edx+7Ch]  +
pop esi  +
retn   +
***
cmp byte ptr [ebx+9Ah] 0 +
jz loc_4781BF  +
mov eax [ebx+30h] +
mov dl [eax+99h] +
mov eax ebx +
call @Controls@TControl@SetShowHint$qqro  +
mov byte ptr [ebx+9Ah] 1 +
pop ebx  +
retn   +
***
cmp byte ptr [ebx+59h] 0 +
jz loc_4781F0  +
cmp dword ptr [edx+4] 0 +
jz loc_4781DF  +
mov edx [edx+8] +
mov eax ebx +
call @Controls@TControl@SetFont$qqrp14Graphics@TFont  +
jmp loc_4781EC  +
mov eax [ebx+30h] +
mov edx [eax+68h] +
mov eax ebx +
call @Controls@TControl@SetFont$qqrp14Graphics@TFont  +
mov byte ptr [ebx+59h] 1 +
pop ebx  +
retn   +
***
cmp byte ptr [ebx+56h] 0 +
jz loc_478215  +
mov eax off_4EA6CC +
mov eax [eax] +
mov edx [eax+84h] +
mov eax ebx +
call @Controls@TControl@SetFont$qqrp14Graphics@TFont  +
mov byte ptr [ebx+56h] 1 +
pop ebx  +
retn   +
***
mov dword ptr [edx+0Ch] 1 +
mov edx [eax+30h] +
test edx edx +
jz locret_478236  +
push eax  +
xor ecx ecx +
mov eax edx +
mov edx 0B013h +
call @Controls@TControl@Perform$qqruiii  +
retn   +
***
mov edx [eax+30h] +
test edx edx +
jz locret_47824E  +
push eax  +
xor ecx ecx +
mov eax edx +
mov edx 0B014h +
call @Controls@TControl@Perform$qqruiii  +
retn   +
***
mov [edx+0Ch] eax +
retn   +
***
push edi  +
add esp 0FFFFFFF0h +
mov esi edx +
lea edi [esp+10h+var_10] +
movs   +
movs   +
movs   +
movs   +
mov ebx eax +
xor esi esi +
mov eax ebx +
mov edx [eax] +
call dword ptr [edx+58h]  +
test eax eax +
jz loc_4782D2  +
mov eax ebx +
mov edx [eax] +
call dword ptr [edx+58h]  +
mov edi eax +
mov eax ebx +
call @System@TObject@ClassType$qqrv  +
cmp edi eax +
jz loc_4782D2  +
mov eax ebx +
mov edx [eax] +
call dword ptr [edx+58h]  +
mov ecx off_4EA6C8 +
mov ecx [ecx] +
mov dl 1 +
call dword ptr [eax+2Ch]  +
mov esi eax +
mov edx [esp+10h+var_C] +
mov eax esi +
call @Controls@TControl@SetTop$qqri  +
mov edx [esp+10h+var_10] +
mov eax esi +
call @Controls@TControl@SetLeft$qqri  +
mov edx [esp+10h+var_8] +
sub edx [esp+10h+var_10] +
mov eax esi +
call sub_475EF8  +
mov edx [esp+10h+var_4] +
sub edx [esp+10h+var_C] +
mov eax esi +
call sub_475F3C  +
mov eax esi +
add esp 10h +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
add esp 0FFFFFFE0h +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
add edi 0FFFFFFFCh +
lea ecx [ebp+var_10] +
mov eax [edi] +
mov edx [eax+44h] +
mov eax [edi] +
mov eax [eax+40h] +
call @Olectrls@TOleControl@GetVariantProp$qqri  +
lea edx [ebp+var_10] +
lea ecx [ebp+var_8] +
mov eax [edi] +
mov eax [eax+30h] +
call @Controls@TControl@ClientToScreen$qqrrx14Windows@TPoint  +
mov eax [ebp+arg_0] +
mov eax [eax-8] +
mov eax [eax+8] +
lea ebx [eax+44h] +
mov eax [ebx+0Ch] +
sub eax [ebx+4] +
mov edx [edi] +
mov esi [edx+30h] +
add eax [esi+4Ch] +
mov edx [edi] +
sub eax [edx+4Ch] +
push eax  +
lea eax [ebp+var_20] +
push eax  +
mov ecx [ebx+8] +
sub ecx [ebx] +
add ecx [esi+48h] +
mov eax [edi] +
sub ecx [eax+48h] +
mov edx [esi+44h] +
add edx [ebx+4] +
sub edx [ebp+var_4] +
mov eax [esi+40h] +
add eax [ebx] +
sub eax [ebp+var_8] +
call sub_49B730  +
lea edx [ebp+var_20] +
mov eax esi +
call @Controls@TControl@SetBoundsRect$qqrrx11Types@TRect  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
add esp 0FFFFFFF8h +
push 0  +
mov esi edx +
mov ebx eax +
mov eax ebx +
mov edx [eax] +
call dword ptr [edx+3Ch]  +
cmp esi eax +
jnz loc_4784E4  +
xor ecx ecx +
mov edx esi +
mov eax ebx +
mov si 0FFEFh +
call @System@@CallDynaInst$qqrv  +
pop esi  +
pop ebx  +
retn   +
***
retn   +
***
mov ebx eax +
mov ebx eax +
mov ebx eax +
mov ebx eax +
mov ebx eax +
mov ebx eax +
mov ebx eax +
mov eax ebx +
call sub_4A4F70  +
mov eax ebx +
mov edx [eax] +
call dword ptr [edx+3Ch]  +
test eax eax +
jz loc_4785DC  +
mov eax ebx +
mov edx [eax] +
call dword ptr [edx+3Ch]  +
mov edx eax +
mov cl 1 +
mov eax ebx +
mov si 0FFEFh +
call @System@@CallDynaInst$qqrv  +
mov eax ebx +
call @Controls@TControl@UpdateAnchorRules$qqrv  +
pop esi  +
pop ebx  +
retn   +
***
push 0  +
push ebx  +
push esi  +
push edi  +
mov esi edx +
mov ebx eax +
xor eax eax +
push ebp  +
push offset loc_478684  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov eax esi +
mov edx ds:off_448424 +
call @System@@IsClass$qqrp14System@TObjectp17System@TMetaClass  +
test al al +
jz loc_478665  +
mov eax ebx +
mov edx [eax] +
call dword ptr [edx+50h]  +
mov edx eax +
mov edi esi +
mov eax edi +
call @Actnlist@TCustomAction@SetEnabled$qqro  +
mov edx [ebx+80h] +
mov eax edi +
call @Actnlist@TCustomAction@SetHint$qqrx17System@AnsiString  +
lea edx [ebp+var_4] +
mov eax ebx +
call @TControl@GetText$qqrv  +
mov edx [ebp+var_4] +
mov eax edi +
call @Actnlist@TCustomAction@SetCaption$qqrx17System@AnsiString  +
mov dl [ebx+57h] +
mov eax edi +
call @Actnlist@TCustomAction@SetVisible$qqro  +
push dword ptr [ebx+124h]  +
push dword ptr [ebx+120h]  +
mov eax edi +
mov edx [eax] +
call dword ptr [edx+34h]  +
jmp loc_47866E  +
mov edx esi +
mov eax ebx +
call sub_49D458  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_47868B  +
lea eax [ebp+var_4] +
call unknown_libname_540  +
retn   +
jmp unknown_libname_539  +
jmp loc_47867B  +
pop edi  +
pop esi  +
pop ebx  +
pop ecx  +
pop ebp  +
retn   +
***
push ecx  +
push ebx  +
push esi  +
mov [ebp+var_4] eax +
xor ebx ebx +
mov ecx edx +
test ecx ecx +
jle loc_4786C6  +
mov esi 1 +
mov edx [ebp+var_4] +
add edx 8 +
fld  qword ptr [edx] +
mov eax [ebp+var_4] +
fcomp  qword ptr [eax+ebx*8] +
fnstsw  ax +
sahf   +
jnb loc_4786BF  +
mov ebx esi +
inc esi  +
add edx 8 +
dec ecx  +
jnz loc_4786B0  +
mov eax ebx +
pop esi  +
pop ebx  +
pop ecx  +
pop ebp  +
retn   +
***
push edi  +
push ebp  +
add esp 0FFFFFFC8h +
mov esi edx +
lea edi [esp+38h+var_38] +
movs   +
movs   +
xor ebx ebx +
mov esi [eax+48h] +
mov edi [eax+4Ch] +
mov eax [esp+38h+var_38] +
test eax eax +
jg loc_4786F4  +
mov bl 3 +
jmp loc_478775  +
cmp esi eax +
jg loc_4786FC  +
mov bl 4 +
jmp loc_478775  +
mov edx [esp+38h+var_34] +
test edx edx +
jg loc_478708  +
mov bl 1 +
jmp loc_478775  +
cmp edi edx +
jg loc_478710  +
mov bl 2 +
jmp loc_478775  +
mov ebp edx +
sub edi edx +
mov [esp+38h+var_30] eax +
sub esi eax +
fild  [esp+38h+var_30] +
fstp  [esp+38h+var_2C] +
wait   +
mov [esp+38h+var_C] esi +
fild  [esp+38h+var_C] +
fstp  [esp+38h+var_24] +
wait   +
mov [esp+38h+var_8] ebp +
fild  [esp+38h+var_8] +
fstp  [esp+38h+var_1C] +
wait   +
mov [esp+38h+var_4] edi +
fild  [esp+38h+var_4] +
fstp  [esp+38h+var_14] +
wait   +
lea eax [esp+38h+var_2C] +
mov edx 3 +
call @Controls@_16789  +
sub eax 1 +
jb loc_478767  +
jz loc_47876B  +
dec eax  +
jz loc_47876F  +
dec eax  +
jz loc_478773  +
jmp loc_478775  +
mov bl 3 +
jmp loc_478775  +
mov bl 4 +
jmp loc_478775  +
mov bl 1 +
jmp loc_478775  +
mov bl 2 +
mov eax ebx +
add esp 38h +
pop ebp  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
cmp dword ptr [ebx+0A0h] 0 +
mov eax [eax+0B8h] +
retn   +
***
jnz loc_4787D1  +
mov edx [eax+48h] +
push edx  +
mov edx [eax+4Ch] +
push edx  +
mov ecx [eax+44h] +
mov edx [eax+40h] +
mov ebx [eax] +
call dword ptr [ebx+84h]  +
pop ebx  +
retn   +
***
push edi  +
mov edi eax +
mov ebx edx +
mov eax edi +
mov si 0FFC8h +
call @System@@CallDynaInst$qqrv  +
test al al +
jz loc_478804  +
mov eax ebx +
and eax 2 +
cmp eax 2 +
jnz loc_4787F9  +
and ebx 0FFFFFFFDh +
jmp loc_478804  +
mov eax ebx +
and eax 1 +
dec eax  +
jz loc_478804  +
or ebx 2 +
mov eax edi +
call @Controls@TControl@DrawTextBiDiModeFlagsReadingOnly$qqrv  +
or ebx eax +
mov eax ebx +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov eax ebx +
call @Controls@TControl@UseRightToLeftReading$qqrv_0  +
test al al +
jz loc_478829  +
mov eax 20000h +
pop ebx  +
retn   +
xor eax eax +
pop ebx  +
retn   +
***
mov edx [eax+6Ch] +
test edx edx +
jz locret_47883E  +
mov eax edx +
mov edx [eax] +
call dword ptr [edx+1Ch]  +
retn   +
***
push edi  +
mov edi edx +
mov ebx eax +
mov esi [ebx+6Ch] +
test esi esi +
jz loc_478866  +
mov eax [edi+8] +
lea edx [eax+38h] +
mov eax esi +
mov ecx [eax] +
call dword ptr [ecx+78h]  +
test al al +
jnz loc_478866  +
mov dword ptr [edi+0Ch] 1 +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
push ebp  +
add esp 0FFFFFFD4h +
mov ebp edx +
mov edi eax +
cmp dword ptr [ebp+0Ch] 0 +
jnz loc_47898B  +
test byte ptr [edi+1Ch] 10h +
jz loc_478895  +
mov edx ebp +
mov eax edi +
mov ecx [eax] +
call dword ptr [ecx-10h]  +
jmp loc_47898B  +
mov edx esp +
mov eax [ebp+8] +
call unknown_libname_382  +
mov eax esp +
call sub_49B758  +
test al al +
jz loc_4788BB  +
mov eax [esp+2Ch+var_2C] +
mov [esp+2Ch+pt.x] eax +
mov eax [esp+2Ch+var_28] +
mov [esp+2Ch+pt.y] eax +
jmp loc_4788F7  +
lea ecx [esp+2Ch+pt] +
mov edx esp +
mov eax edi +
call @Controls@TControl@ScreenToClient$qqrrx14Windows@TPoint  +
push [esp+2Ch+pt.y]  +
push [esp+30h+pt.x]  +
lea edx [esp+34h+rc] +
mov eax edi +
mov ecx [eax] +
call dword ptr [ecx+44h]  +
lea eax [esp+34h+rc] +
push eax  +
call PtInRect  +
test eax eax +
jnz loc_4788F7  +
mov edx ebp +
mov eax edi +
mov ecx [eax] +
call dword ptr [ecx-10h]  +
jmp loc_47898B  +
mov byte ptr [esp+2Ch+var_1C] 0 +
lea ecx [esp+2Ch+var_1C] +
lea edx [esp+2Ch+pt] +
mov eax edi +
mov si 0FFE6h +
call @System@@CallDynaInst$qqrv  +
xor eax eax +
mov al byte ptr [esp+2Ch+var_1C] +
mov [ebp+0Ch] eax +
cmp byte ptr [esp+2Ch+var_1C] 0 +
jnz loc_47898B  +
mov eax edi +
mov si 0FFD6h +
call @System@@CallDynaInst$qqrv  +
mov ebx eax +
test ebx ebx +
jz loc_47897C  +
cmp byte ptr [ebx+61h] 0 +
jz loc_47897C  +
xor edx edx +
mov eax edi +
call @Controls@TControl@SendCancelMode$qqrp17Controls@TControl  +
mov [ebx+64h] edi +
mov eax esp +
call sub_49B758  +
test al al +
jz loc_478967  +
lea ecx [esp+2Ch+var_8] +
xor edx edx +
xor eax eax +
call @Olectrls@TOleControl@GetVariantProp$qqri  +
lea edx [esp+2Ch+var_8] +
mov ecx esp +
mov eax edi +
call @Controls@TControl@ClientToScreen$qqrrx14Windows@TPoint  +
mov ecx [esp+2Ch+var_28] +
mov edx [esp+2Ch+var_2C] +
mov eax ebx +
mov ebx [eax] +
call dword ptr [ebx+40h]  +
mov dword ptr [ebp+0Ch] 1 +
cmp dword ptr [ebp+0Ch] 0 +
jnz loc_47898B  +
mov edx ebp +
mov eax edi +
mov ecx [eax] +
call dword ptr [ecx-10h]  +
add esp 2Ch +
pop ebp  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
add esp 0FFFFFFF8h +
mov esi edx +
lea edi [esp+8+var_8] +
movs   +
movs   +
cmp word ptr [eax+132h] 0 +
jz loc_4789C0  +
push ecx  +
mov ebx eax +
mov edx eax +
lea ecx [esp+0Ch+var_8] +
mov eax [ebx+134h] +
call dword ptr [ebx+130h]  +
pop ecx  +
pop edx  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov eax [eax+74h] +
mov ecx [eax] +
call dword ptr [ecx+8]  +
retn   +
***
add esp 0FFFFFFE8h +
push ebx  +
push esi  +
xor ebx ebx +
mov [ebp+var_18] ebx +
mov [ebp+var_14] ebx +
mov esi ecx +
mov [ebp+var_8] edx +
mov [ebp+var_4] eax +
mov ebx [ebp+arg_0] +
xor eax eax +
push ebp  +
push offset loc_478AD6  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
test esi esi +
jnz loc_478A07  +
mov eax [ebp+var_4] +
mov esi [eax+30h] +
test esi esi +
jnz loc_478A3F  +
mov eax [ebp+var_4] +
mov eax [eax+8] +
mov [ebp+var_10] eax +
mov [ebp+var_C] 0Bh +
lea eax [ebp+var_10] +
push eax  +
push 0  +
lea edx [ebp+var_14] +
mov eax off_4EA700 +
call @System@LoadResString$qqrp20System@TResStringRec  +
mov ecx [ebp+var_14] +
mov dl 1 +
mov eax ds:off_49A578 +
call sub_4AC1B8  +
call @System@@RaiseExcept$qqrv  +
mov eax [ebp+var_8] +
mov edx [eax] +
mov [ebx] edx +
mov edx [eax+4] +
mov [ebx+4] edx +
mov eax [ebp+var_4] +
mov eax [eax+40h] +
add [ebx] eax +
mov eax [ebp+var_4] +
mov eax [eax+44h] +
add [ebx+4] eax +
mov eax [ebp+var_4] +
mov eax [eax+30h] +
test eax eax +
jz loc_478A83  +
cmp dword ptr [eax+30h] 0 +
jz loc_478A78  +
mov edx [eax+40h] +
add [ebx] edx +
mov edx [eax+44h] +
add [ebx+4] edx +
cmp esi eax +
jz loc_478A83  +
mov eax [eax+30h] +
test eax eax +
jnz loc_478A67  +
test eax eax +
jnz loc_478ABB  +
mov eax [ebp+var_4] +
mov eax [eax+8] +
mov [ebp+var_10] eax +
mov [ebp+var_C] 0Bh +
lea eax [ebp+var_10] +
push eax  +
push 0  +
lea edx [ebp+var_18] +
mov eax off_4EA704 +
call @System@LoadResString$qqrp20System@TResStringRec  +
mov ecx [ebp+var_18] +
mov dl 1 +
mov eax ds:off_49A578 +
call sub_4AC1B8  +
call @System@@RaiseExcept$qqrv  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_478ADD  +
lea eax [ebp+var_18] +
mov edx 2 +
call unknown_libname_541  +
retn   +
jmp unknown_libname_539  +
jmp loc_478AC8  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 4  +
***
mov esi edx +
mov ebx eax +
mov edx esi +
mov eax ebx +
call @Controls@TControlActionLink@AssignClient$qqrp14System@TObject_0  +
mov eax esi +
mov edx ds:off_472320 +
call unknown_libname_534  +
mov [ebx+20h] eax +
pop esi  +
pop ebx  +
retn   +
***
call dword ptr [edx+34h]  +
retn   +
***
retn   +
***
add esp 0FFFFFFF8h +
push ebx  +
push esi  +
xor ebx ebx +
mov [ebp+var_8] ebx +
test dl dl +
jz loc_478B35  +
add esp 0FFFFFFF0h +
call unknown_libname_535  +
mov [ebp+var_1] dl +
mov ebx eax +
xor eax eax +
push ebp  +
push offset loc_478C14  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
xor edx edx +
mov eax ebx +
call @Controls@TControl@$bctr$qqrp18Classes@TComponent  +
push ebx  +
push offset @Controls@TWinControl@MainWndProc$qqrr17Messages@TMessage  +
call sub_4A5BA4  +
mov [ebx+18Ch] eax +
mov dl 1 +
mov eax ds:off_4593AC +
call sub_45AD6C  +
mov esi eax +
mov [ebx+170h] esi +
mov edx [ebx+70h] +
mov eax esi +
call @Graphics@TBrush@SetColor$qqr15Graphics@TColor  +
mov byte ptr [ebx+1A9h] 1 +
mov dword ptr [ebx+1A0h] 0FFFFFFFFh +
mov byte ptr [ebx+184h] 3 +
mov eax off_4EA8CC +
cmp dword ptr [eax+4] 11h +
jnz loc_478BB0  +
lea eax [ebx+188h] +
call unknown_libname_540  +
jmp loc_478BCD  +
lea edx [ebp+var_8] +
mov eax off_4EA6CC +
mov eax [eax] +
call @Forms@TScreen@GetDefaultIME$qqrv  +
mov edx [ebp+var_8] +
lea eax [ebx+188h] +
call unknown_libname_542  +
mov byte ptr [ebx+1A7h] 0 +
mov al ds:byte_478C3C +
mov [ebx+162h] al +
mov byte ptr [ebx+163h] 2 +
mov byte ptr [ebx+164h] 1 +
mov dword ptr [ebx+168h] 1 +
mov byte ptr [ebx+150h] 1 +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_478C1B  +
lea eax [ebp+var_8] +
call unknown_libname_540  +
retn   +
jmp unknown_libname_539  +
jmp loc_478C0B  +
mov eax ebx +
cmp [ebp+var_1] 0 +
jz loc_478C32  +
call sub_4BABC8  +
pop large dword ptr fs:0  +
add esp 0Ch +
mov eax ebx +
pop esi  +
pop ebx  +
pop ecx  +
pop ecx  +
pop ebp  +
retn   +
***
push edi  +
call unknown_libname_536  +
mov ebx edx +
mov edi eax +
mov eax edi +
call sub_4A4DC0  +
cmp byte ptr [edi+1A8h] 0 +
jz loc_478C6C  +
mov byte ptr [edi+1A8h] 0 +
xor edx edx +
mov eax edi +
call @Controls@_16554  +
lea eax [edi+17Ch] +
call unknown_libname_560  +
mov eax [edi+178h] +
call @System@TObject@Free$qqrv  +
cmp dword ptr [edi+30h] 0 +
jz loc_478C91  +
mov dl 1 +
mov eax edi +
call @Controls@TWinControl@RemoveFocus$qqro  +
cmp dword ptr [edi+180h] 0 +
jz loc_478CA4  +
mov eax edi +
mov edx [eax] +
call dword ptr [edx+0ACh]  +
mov eax edi +
call @Controls@TWinControl@GetControlCount$qqrv  +
test eax eax +
jz loc_478CD8  +
mov edx eax +
dec edx  +
mov eax edi +
call @Controls@TWinControl@GetControl$qqri  +
mov esi eax +
mov edx esi +
mov eax edi +
call @Controls@TWinControl@Remove$qqrp17Controls@TControl  +
mov dl 1 +
mov eax esi +
mov ecx [eax] +
call dword ptr [ecx-4]  +
mov eax edi +
call @Controls@TWinControl@GetControlCount$qqrv  +
test eax eax +
jnz loc_478CAF  +
mov eax [edi+170h] +
call @System@TObject@Free$qqrv  +
mov eax [edi+18Ch] +
test eax eax +
jz loc_478CF2  +
call @Forms@FreeObjectInstance$qqrpv  +
mov edx ebx +
and dl 0FCh +
mov eax edi +
call @Controls@TControl@$bdtr$qqrv  +
test bl bl +
jle loc_478D09  +
mov eax edi +
call @System@@ClassDestroy$qqrp14System@TObject  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
add esp 0FFFFFFF4h +
push ebx  +
push esi  +
mov [ebp+var_4] eax +
mov eax [ebp+var_4] +
cmp dword ptr [eax+19Ch] 0 +
jz loc_478DDB  +
mov dl 1 +
mov eax ds:off_49A5D8 +
call @System@TObject@$bctr$qqrv  +
mov [ebp+var_C] eax +
xor ecx ecx +
push ebp  +
push offset loc_478DD4  +
push dword ptr fs:[ecx]  +
mov fs:[ecx] esp +
mov eax [ebp+var_4] +
mov eax [eax+19Ch] +
mov eax [eax+8] +
mov [ebp+var_8] eax +
mov edx [ebp+var_8] +
mov eax [ebp+var_C] +
call @Classes@TList@SetCount$qqri  +
mov ebx [ebp+var_8] +
dec ebx  +
test ebx ebx +
jl loc_478D9A  +
inc ebx  +
xor esi esi +
mov eax [ebp+var_4] +
mov eax [eax+19Ch] +
mov edx esi +
call @Classes@TList@Get$qqri  +
mov edx [eax+1A0h] +
test edx edx +
jl loc_478D96  +
cmp edx [ebp+var_8] +
jge loc_478D96  +
mov ecx eax +
mov eax [ebp+var_C] +
call sub_49CE90  +
inc esi  +
dec ebx  +
jnz loc_478D6D  +
mov ebx [ebp+var_8] +
dec ebx  +
test ebx ebx +
jl loc_478DBE  +
inc ebx  +
xor esi esi +
mov edx esi +
mov eax [ebp+var_C] +
call @Classes@TList@Get$qqri  +
test eax eax +
jz loc_478DBA  +
mov edx esi +
call @Controls@TWinControl@UpdateTabOrder$qqrs  +
inc esi  +
dec ebx  +
jnz loc_478DA5  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_478DDB  +
mov eax [ebp+var_C] +
call @System@TObject@Free$qqrv  +
retn   +
jmp unknown_libname_539  +
jmp loc_478DCB  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
push ecx  +
push ebx  +
mov ebx edx +
mov [ebp+var_4] eax +
mov eax [ebp+var_4] +
call @Controls@TWinControl@DisableAlign$qqrv  +
xor eax eax +
push ebp  +
push offset loc_478E24  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov edx ebx +
mov eax [ebp+var_4] +
call @Controls@TControl@ReadState$qqrp15Classes@TReader  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_478E2B  +
mov eax [ebp+var_4] +
call @Controls@TWinControl@EnableAlign$qqrv  +
retn   +
jmp unknown_libname_539  +
jmp loc_478E1B  +
mov eax [ebp+var_4] +
call @Controls@TWinControl@FixupTabList$qqrv  +
mov eax [ebp+var_4] +
cmp dword ptr [eax+30h] 0 +
jz loc_478E4D  +
push 0  +
xor ecx ecx +
mov edx 0B011h +
mov eax [ebp+var_4] +
call @Controls@TControl@Perform$qqruiii  +
mov eax [ebp+var_4] +
call @Controls@TWinControl@UpdateControlState$qqrv  +
pop ebx  +
pop ecx  +
pop ebp  +
retn   +
***
push ecx  +
add esp 0FFFFFFC0h +
push ebx  +
push esi  +
push edi  +
mov esi ecx +
lea edi [ebp+var_30] +
movs   +
movs   +
movs   +
movs   +
mov [ebp+var_5] dl +
mov [ebp+var_4] eax +
cmp [ebp+var_5] 0 +
jz loc_478F21  +
xor eax eax +
mov al [ebp+var_5] +
mov al byte_4E66DC[eax] +
mov edx [ebp+var_4] +
cmp al [edx+61h] +
jz loc_4790F6  +
mov eax [ebp+var_4] +
cmp dword ptr [eax+90h] 0 +
jz loc_4790EC  +
mov eax [ebp+var_4] +
cmp dword ptr [eax+94h] 0 +
jz loc_4790EC  +
mov eax [ebp+var_4] +
mov eax [eax+40h] +
mov [ebp+var_C] eax +
mov eax [ebp+var_4] +
mov eax [eax+44h] +
mov [ebp+var_10] eax +
mov eax [ebp+var_4] +
mov eax [eax+48h] +
mov [ebp+var_14] eax +
mov eax [ebp+var_4] +
mov eax [eax+4Ch] +
mov [ebp+var_18] eax +
mov eax [ebp+var_4] +
mov eax [eax+30h] +
call @Controls@TWinControl@HandleAllocated$qqrv  +
test al al +
jz loc_478F90  +
lea edx [ebp+var_40] +
mov eax [ebp+var_4] +
mov eax [eax+30h] +
mov ecx [eax] +
call dword ptr [ecx+44h]  +
mov eax [ebp+var_38] +
mov [ebp+nNumerator] eax +
mov eax [ebp+var_34] +
mov [ebp+var_1C] eax +
jmp loc_478FA4  +
lea ecx [ebp+nNumerator] +
mov eax [ebp+var_4] +
mov ebx [eax+30h] +
mov edx [ebx+4Ch] +
mov eax [ebx+48h] +
call @Olectrls@TOleControl@GetVariantProp$qqri  +
mov eax [ebp+var_4] +
test byte ptr [eax+61h] 4 +
jz loc_478FEE  +
mov eax [ebp+var_4] +
test byte ptr [eax+61h] 1 +
jz loc_478FD2  +
mov eax [ebp+var_4] +
mov eax [eax+90h] +
mov edx [ebp+var_4] +
sub eax [edx+88h] +
mov edx [ebp+nNumerator] +
sub edx eax +
mov [ebp+var_14] edx +
jmp loc_479023  +
mov eax [ebp+var_4] +
mov eax [eax+90h] +
mov edx [ebp+var_4] +
sub eax [edx+88h] +
mov edx [ebp+nNumerator] +
sub edx eax +
mov [ebp+var_C] edx +
jmp loc_479023  +
mov eax [ebp+var_4] +
test byte ptr [eax+61h] 1 +
jnz loc_479023  +
mov eax [ebp+var_4] +
mov eax [eax+90h] +
push eax  +
mov eax [ebp+nNumerator] +
push eax  +
mov eax [ebp+var_4] +
mov eax [eax+88h] +
push eax  +
call MulDiv  +
mov edx [ebp+var_14] +
sar edx 1 +
jns loc_47901E  +
adc edx 0 +
sub eax edx +
mov [ebp+var_C] eax +
mov eax [ebp+var_4] +
test byte ptr [eax+61h] 8 +
jz loc_47906D  +
mov eax [ebp+var_4] +
test byte ptr [eax+61h] 2 +
jz loc_479051  +
mov eax [ebp+var_4] +
mov eax [eax+94h] +
mov edx [ebp+var_4] +
sub eax [edx+8Ch] +
mov edx [ebp+var_1C] +
sub edx eax +
mov [ebp+var_18] edx +
jmp loc_4790A2  +
mov eax [ebp+var_4] +
mov eax [eax+94h] +
mov edx [ebp+var_4] +
sub eax [edx+8Ch] +
mov edx [ebp+var_1C] +
sub edx eax +
mov [ebp+var_10] edx +
jmp loc_4790A2  +
mov eax [ebp+var_4] +
test byte ptr [eax+61h] 2 +
jnz loc_4790A2  +
mov eax [ebp+var_4] +
mov eax [eax+94h] +
push eax  +
mov eax [ebp+var_1C] +
push eax  +
mov eax [ebp+var_4] +
mov eax [eax+8Ch] +
push eax  +
call MulDiv  +
mov edx [ebp+var_18] +
sar edx 1 +
jns loc_47909D  +
adc edx 0 +
sub eax edx +
mov [ebp+var_10] eax +
mov eax [ebp+var_4] +
mov byte ptr [eax+62h] 1 +
xor eax eax +
push ebp  +
push offset loc_4790E5  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov eax [ebp+var_14] +
push eax  +
mov eax [ebp+var_18] +
push eax  +
mov ecx [ebp+var_10] +
mov edx [ebp+var_C] +
mov eax [ebp+var_4] +
mov ebx [eax] +
call dword ptr [ebx+84h]  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4790EC  +
mov eax [ebp+var_4] +
mov byte ptr [eax+62h] 0 +
retn   +
jmp unknown_libname_539  +
jmp loc_4790DD  +
cmp [ebp+var_5] 0 +
jz loc_479322  +
mov eax [ebp+arg_0] +
mov eax [eax-8] +
mov eax [eax+8] +
mov edx [ebp+arg_0] +
mov edx [edx-8] +
sub eax [edx] +
mov [ebp+var_14] eax +
cmp [ebp+var_14] 0 +
jl loc_47911D  +
mov al [ebp+var_5] +
add al 0FDh +
sub al 2 +
jb loc_47911D  +
sub al 1 +
jnz loc_479126  +
mov eax [ebp+var_4] +
mov eax [eax+48h] +
mov [ebp+var_14] eax +
mov eax [ebp+arg_0] +
mov eax [eax-8] +
mov eax [eax+0Ch] +
mov edx [ebp+arg_0] +
mov edx [edx-8] +
sub eax [edx+4] +
mov [ebp+var_18] eax +
cmp [ebp+var_18] 0 +
jl loc_47914D  +
mov al [ebp+var_5] +
dec eax  +
sub al 2 +
jb loc_47914D  +
sub al 3 +
jnz loc_479156  +
mov eax [ebp+var_4] +
mov eax [eax+4Ch] +
mov [ebp+var_18] eax +
mov eax [ebp+arg_0] +
mov eax [eax-8] +
mov eax [eax] +
mov [ebp+var_C] eax +
mov eax [ebp+arg_0] +
mov eax [eax-8] +
mov eax [eax+4] +
mov [ebp+var_10] eax +
xor eax eax +
mov al [ebp+var_5] +
cmp eax 6 +
ja loc_47922A  +
jmp ds:off_479182[eax*4]  +
mov eax [ebp+arg_0] +
mov eax [eax-8] +
mov edx [ebp+var_18] +
add [eax+4] edx +
jmp loc_47922A  +
mov eax [ebp+arg_0] +
mov eax [eax-8] +
mov edx [ebp+var_18] +
sub [eax+0Ch] edx +
mov eax [ebp+arg_0] +
mov eax [eax-8] +
mov eax [eax+0Ch] +
mov [ebp+var_10] eax +
jmp loc_47922A  +
mov eax [ebp+arg_0] +
mov eax [eax-8] +
mov edx [ebp+var_14] +
add [eax] edx +
jmp loc_47922A  +
mov eax [ebp+arg_0] +
mov eax [eax-8] +
mov edx [ebp+var_14] +
sub [eax+8] edx +
mov eax [ebp+arg_0] +
mov eax [eax-8] +
mov eax [eax+8] +
mov [ebp+var_C] eax +
jmp loc_47922A  +
mov eax [ebp+var_4] +
mov eax [eax+40h] +
mov [ebp+var_C] eax +
mov eax [ebp+var_4] +
mov eax [eax+44h] +
mov [ebp+var_10] eax +
lea eax [ebp+var_10] +
push eax  +
lea eax [ebp+var_14] +
push eax  +
lea eax [ebp+var_18] +
push eax  +
mov eax [ebp+arg_0] +
mov eax [eax-8] +
push eax  +
lea eax [ebp+var_30] +
push eax  +
lea ecx [ebp+var_C] +
mov eax [ebp+arg_0] +
mov eax [eax-4] +
mov edx [ebp+var_4] +
mov ebx [eax] +
call dword ptr [ebx+0A8h]  +
mov eax [ebp+var_4] +
mov byte ptr [eax+62h] 1 +
xor eax eax +
push ebp  +
push offset loc_47926D  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov eax [ebp+var_14] +
push eax  +
mov eax [ebp+var_18] +
push eax  +
mov ecx [ebp+var_10] +
mov edx [ebp+var_C] +
mov eax [ebp+var_4] +
mov ebx [eax] +
call dword ptr [ebx+84h]  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_479274  +
mov eax [ebp+var_4] +
mov byte ptr [eax+62h] 0 +
retn   +
jmp unknown_libname_539  +
jmp loc_479265  +
mov eax [ebp-4] +
mov eax [eax+48h] +
cmp eax [ebp-14h] +
jnz loc_47928E  +
mov edx [ebp-4] +
mov edx [edx+4Ch] +
cmp edx [ebp-18h] +
jz loc_479322  +
xor edx edx +
mov dl [ebp-5] +
cmp edx 5 +
ja loc_479322  +
jmp ds:off_4792A3[edx*4]  +
mov eax [ebp-4] +
mov edx [ebp-18h] +
sub edx [eax+4Ch] +
mov eax [ebp+8] +
mov eax [eax-8] +
sub [eax+4] edx +
jmp loc_479322  +
mov eax [ebp-4] +
mov edx [ebp-18h] +
sub edx [eax+4Ch] +
mov eax [ebp+8] +
mov eax [eax-8] +
add [eax+0Ch] edx +
jmp loc_479322  +
mov edx [ebp-14h] +
sub edx eax +
mov eax [ebp+8] +
mov eax [eax-8] +
sub [eax] edx +
jmp loc_479322  +
mov edx [ebp-14h] +
sub edx eax +
mov eax [ebp+8] +
mov eax [eax-8] +
add [eax+8] edx +
jmp loc_479322  +
mov edx [ebp-14h] +
sub edx eax +
mov eax [ebp+8] +
mov eax [eax-8] +
add [eax+8] edx +
mov eax [ebp-4] +
mov edx [ebp-18h] +
sub edx [eax+4Ch] +
mov eax [ebp+8] +
mov eax [eax-8] +
add [eax+0Ch] edx +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
add esp 0FFFFFFE8h +
push ebx  +
push esi  +
push edi  +
mov ebx eax +
mov eax [ebp+arg_0] +
mov eax [eax-0Ch] +
mov edx [eax] +
call dword ptr [edx+8]  +
mov eax [ebp+arg_0] +
cmp dword ptr [eax-10h] 0 +
jz loc_47938F  +
test bl bl +
jz loc_479373  +
mov eax [ebp+arg_0] +
mov eax [eax-10h] +
cmp byte ptr [eax+57h] 0 +
jnz loc_479373  +
mov eax [ebp+arg_0] +
mov eax [eax-10h] +
test byte ptr [eax+1Ch] 10h +
jz loc_47938F  +
mov eax [ebp+arg_0] +
mov eax [eax-10h] +
test byte ptr [eax+51h] 4 +
jnz loc_47938F  +
mov eax [ebp+arg_0] +
mov eax [eax-10h] +
cmp bl [eax+5Bh] +
jnz loc_47938F  +
mov eax [ebp+arg_0] +
mov edx [eax-10h] +
mov eax [ebp+arg_0] +
mov eax [eax-0Ch] +
call @Classes@TList@Add$qqrpv  +
mov eax [ebp+arg_0] +
mov eax [eax-4] +
call @Controls@TWinControl@GetControlCount$qqrv  +
dec eax  +
test eax eax +
jl loc_47943F  +
inc eax  +
mov [ebp+var_8] eax +
mov [ebp+var_4] 0 +
mov eax [ebp+arg_0] +
mov eax [eax-4] +
mov edx [ebp+var_4] +
call @Controls@TWinControl@GetControl$qqri  +
mov edi eax +
cmp bl [edi+5Bh] +
jnz loc_479433  +
test bl bl +
jz loc_4793EB  +
cmp byte ptr [edi+57h] 0 +
jnz loc_4793EB  +
mov eax ds:dword_479498 +
and eax [edi+50h] +
mov edx ds:dword_479498 +
cmp edx eax +
jz loc_4793EB  +
test byte ptr [edi+1Ch] 10h +
jz loc_479433  +
test byte ptr [edi+51h] 4 +
jnz loc_479433  +
mov eax [ebp+arg_0] +
cmp edi [eax-10h] +
jz loc_479433  +
xor esi esi +
jmp loc_4793F8  +
inc esi  +
mov eax [ebp+arg_0] +
mov eax [eax-0Ch] +
cmp esi [eax+8] +
jge loc_479424  +
mov eax [ebp+arg_0] +
push eax  +
mov eax [ebp+arg_0] +
mov eax [eax-0Ch] +
mov edx esi +
call @Classes@TList@Get$qqri  +
mov edx eax +
mov ecx ebx +
mov eax edi +
call @Controls@_16814  +
pop ecx  +
test al al +
jz loc_4793F7  +
mov eax [ebp+arg_0] +
mov eax [eax-0Ch] +
mov ecx edi +
mov edx esi +
call @Classes@TList@Insert$qqripv  +
inc [ebp+var_4]  +
dec [ebp+var_8]  +
jnz loc_4793AE  +
mov eax [ebp+arg_0] +
mov eax [eax-0Ch] +
mov eax [eax+8] +
dec eax  +
test eax eax +
jl loc_47948F  +
inc eax  +
mov [ebp+var_8] eax +
mov [ebp+var_4] 0 +
mov eax [ebp+arg_0] +
mov eax [eax-0Ch] +
mov [ebp+var_18] eax +
mov eax [ebp+var_4] +
mov [ebp+var_14] eax +
mov [ebp+var_10] bl +
mov eax [ebp+arg_0] +
push eax  +
mov eax [ebp+arg_0] +
mov eax [eax-0Ch] +
mov edx [ebp+var_4] +
call @Classes@TList@Get$qqri  +
lea ecx [ebp+var_18] +
mov edx ebx +
call @Controls@_16815  +
pop ecx  +
inc [ebp+var_4]  +
dec [ebp+var_8]  +
jnz loc_479458  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
add edi 0FFFFFFFCh +
mov bl 1 +
mov eax [edi] +
call @Controls@TWinControl@GetControlCount$qqrv  +
mov esi eax +
dec esi  +
cmp esi 0 +
jl loc_4794E2  +
mov eax [edi] +
mov edx esi +
call @Controls@TWinControl@GetControl$qqri  +
cmp byte ptr [eax+5Bh] 0 +
jnz loc_4794E4  +
mov eax [edi] +
mov edx esi +
call @Controls@TWinControl@GetControl$qqri  +
mov dl ds:byte_4794EC +
cmp dl [eax+61h] +
jnz loc_4794E4  +
dec esi  +
cmp esi 0FFFFFFFFh +
jnz loc_4794B9  +
xor ebx ebx +
mov eax ebx +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
add esp 0FFFFFFF0h +
push esi  +
mov [ebp+var_8] ecx +
mov [ebp+var_10] edx +
mov [ebp+var_4] eax +
mov eax [ebp+var_4] +
cmp byte ptr [eax+1A8h] 0 +
jz loc_479534  +
mov eax [ebp+var_4] +
cmp byte ptr [eax+1A7h] 0 +
jz loc_479534  +
mov eax [ebp+var_4] +
cmp dword ptr [eax+17Ch] 0 +
jz loc_479534  +
mov eax [ebp+var_4] +
mov eax [eax+17Ch] +
xor edx edx +
mov ecx [eax] +
call dword ptr [ecx+2Ch]  +
push ebp  +
call @Controls@_16818  +
pop ecx  +
test al al +
jz loc_4795D6  +
mov edx [ebp+var_8] +
mov eax [ebp+var_4] +
mov ecx [eax] +
call dword ptr [ecx+8Ch]  +
mov dl 1 +
mov eax ds:off_49A5D8 +
call @System@TObject@$bctr$qqrv  +
mov [ebp+var_C] eax +
xor eax eax +
push ebp  +
push offset loc_4795CF  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
push ebp  +
mov al 1 +
call @Controls@_16817  +
pop ecx  +
push ebp  +
mov al 2 +
call @Controls@_16817  +
pop ecx  +
push ebp  +
mov al 3 +
call @Controls@_16817  +
pop ecx  +
push ebp  +
mov al 4 +
call @Controls@_16817  +
pop ecx  +
push ebp  +
mov al 5 +
call @Controls@_16817  +
pop ecx  +
push ebp  +
mov al 6 +
call @Controls@_16817  +
pop ecx  +
push ebp  +
xor eax eax +
call @Controls@_16817  +
pop ecx  +
mov eax [ebp+var_4] +
mov si 0FFC7h +
call @System@@CallDynaInst$qqrv  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4795D6  +
mov eax [ebp+var_C] +
call @System@TObject@Free$qqrv  +
retn   +
jmp unknown_libname_539  +
jmp loc_4795C6  +
mov eax [ebp+var_4] +
cmp byte ptr [eax+1A6h] 0 +
jz loc_4795EE  +
mov eax [ebp+var_4] +
mov si 0FFEEh +
call @System@@CallDynaInst$qqrv  +
pop esi  +
mov esp ebp +
pop ebp  +
retn   +
***
add esp 0FFFFFFECh +
push ebx  +
mov ebx edx +
mov [ebp+var_4] eax +
mov eax [ebp+var_4] +
call @Controls@TWinControl@HandleAllocated$qqrv  +
test al al +
jz loc_479682  +
mov eax [ebp+var_4] +
test byte ptr [eax+1Ch] 8 +
jnz loc_479682  +
mov eax [ebp+var_4] +
cmp word ptr [eax+160h] 0 +
jz loc_47962C  +
mov eax [ebp+var_4] +
or word ptr [eax+54h] 10h +
jmp loc_479682  +
mov eax [ebp+var_4] +
call @Controls@TWinControl@DisableAlign$qqrv  +
xor eax eax +
push ebp  +
push offset loc_47967B  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
lea edx [ebp+var_14] +
mov eax [ebp+var_4] +
mov ecx [eax] +
call dword ptr [ecx+44h]  +
lea ecx [ebp+var_14] +
mov edx ebx +
mov eax [ebp+var_4] +
mov ebx [eax] +
call dword ptr [ebx+90h]  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_479682  +
mov eax [ebp+var_4] +
and word ptr [eax+54h] 0FFEFh +
mov eax [ebp+var_4] +
call @Controls@TWinControl@EnableAlign$qqrv  +
retn   +
jmp unknown_libname_539  +
jmp loc_47966A  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
inc word ptr [eax+160h]  +
dec word ptr [eax+160h]  +
cmp word ptr [eax+160h] 0 +
jnz locret_4796AC  +
test byte ptr [eax+54h] 10h +
jz locret_4796AC  +
call sub_4796B0  +
retn   +
***
xor edx edx +
add esp 0FFFFFFF4h +
push ebx  +
push esi  +
push edi  +
mov [ebp+var_4] eax +
mov dl 1 +
mov eax ds:off_49A5D8 +
call @System@TObject@$bctr$qqrv  +
mov [ebp+var_C] eax +
xor eax eax +
push ebp  +
push offset loc_47977D  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov eax [ebp+var_4] +
call @Controls@TControl@GetClientWidth$qqrv  +
mov [ebp+var_8] eax +
mov eax [ebp+var_4] +
call @Controls@TWinControl@GetControlCount$qqrv  +
mov ebx eax +
dec ebx  +
test ebx ebx +
jl loc_47973D  +
inc ebx  +
xor esi esi +
mov edx esi +
mov eax [ebp+var_4] +
call @Controls@TWinControl@GetControl$qqri  +
mov edi eax +
mov eax [edi+4] +
mov edx [ebp+var_4] +
cmp eax [edx+4] +
jnz loc_479739  +
mov edx esi +
mov eax [ebp+var_4] +
call @Controls@TWinControl@GetControl$qqri  +
mov edx eax +
mov eax [ebp+var_C] +
call @Classes@TList@Add$qqrpv  +
mov edx [ebp+var_8] +
sub edx [edi+48h] +
sub edx [edi+40h] +
mov eax edi +
call @Controls@TControl@SetLeft$qqri  +
inc esi  +
dec ebx  +
jnz loc_4796FE  +
mov eax [ebp+var_C] +
mov ebx [eax+8] +
dec ebx  +
test ebx ebx +
jl loc_479767  +
inc ebx  +
xor esi esi +
push 0  +
mov edx esi +
mov eax [ebp+var_C] +
call @Classes@TList@Get$qqri  +
xor ecx ecx +
mov edx 0B03Eh +
call @Controls@TControl@Perform$qqruiii  +
inc esi  +
dec ebx  +
jnz loc_47974B  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_479784  +
mov eax [ebp+var_C] +
call @System@TObject@Free$qqrv  +
retn   +
jmp unknown_libname_539  +
jmp loc_479774  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
add esp 0FFFFFFF4h +
push ebx  +
push esi  +
push edi  +
mov [ebp+var_5] dl +
mov [ebp+var_4] eax +
mov eax [ebp+var_4] +
call @Controls@TWinControl@GetControlCount$qqrv  +
test eax eax +
jz loc_4798C4  +
mov dl 1 +
mov eax ds:off_49A5D8 +
call @System@TObject@$bctr$qqrv  +
mov [ebp+var_C] eax +
mov eax [ebp+var_4] +
call @Controls@TWinControl@DisableAlign$qqrv  +
xor edx edx +
push ebp  +
push offset loc_479873  +
push dword ptr fs:[edx]  +
mov fs:[edx] esp +
mov eax [ebp+var_4] +
call @Controls@TWinControl@GetControlCount$qqrv  +
mov edi eax +
dec edi  +
test edi edi +
jl loc_47980D  +
inc edi  +
xor ebx ebx +
mov edx ebx +
mov eax [ebp+var_4] +
call @Controls@TWinControl@GetControl$qqri  +
mov al [eax+5Bh] +
add al 0FDh +
sub al 2 +
jnb loc_479809  +
mov edx ebx +
mov eax [ebp+var_4] +
call @Controls@TWinControl@GetControl$qqri  +
mov edx eax +
mov eax [ebp+var_C] +
call @Classes@TList@Add$qqrpv  +
inc ebx  +
dec edi  +
jnz loc_4797E2  +
mov eax [ebp+var_4] +
mov si 0FFC0h +
call @System@@CallDynaInst$qqrv  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_47987A  +
jmp loc_479858  +
mov edx ebx +
dec edx  +
mov eax [ebp+var_C] +
call @Classes@TList@Get$qqri  +
cmp byte ptr [eax+5Bh] 3 +
jnz loc_479842  +
mov dl 4 +
call @Controls@TControl@SetAlign$qqr15Controls@TAlign  +
jmp loc_479849  +
mov dl 3 +
call @Controls@TControl@SetAlign$qqr15Controls@TAlign  +
mov eax [ebp+var_C] +
mov edx [eax+8] +
dec edx  +
mov eax [ebp+var_C] +
call @Classes@TList@Delete$qqri  +
mov eax [ebp+var_C] +
mov ebx [eax+8] +
test ebx ebx +
jg loc_479828  +
mov eax [ebp+var_C] +
call @System@TObject@Free$qqrv  +
mov eax [ebp+var_4] +
call @Controls@TWinControl@EnableAlign$qqrv  +
retn   +
jmp unknown_libname_539  +
jmp loc_479858  +
cmp byte ptr [ebp-5] 0 +
jz loc_4798C4  +
mov eax [ebp-4] +
call @Controls@TWinControl@GetControlCount$qqrv  +
mov edi eax +
dec edi  +
test edi edi +
jl loc_4798C4  +
inc edi  +
xor ebx ebx +
mov edx ebx +
mov eax [ebp-4] +
call @Controls@TWinControl@GetControl$qqri  +
mov edx ds:off_472320 +
call @System@@IsClass$qqrp14System@TObjectp17System@TMetaClass  +
test al al +
jz loc_4798C0  +
mov edx ebx +
mov eax [ebp-4] +
call @Controls@TWinControl@GetControl$qqri  +
mov dl 1 +
mov si 0FFB6h +
call @System@@CallDynaInst$qqrv  +
inc ebx  +
dec edi  +
jnz loc_479892  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
jmp loc_4798D1  +
mov edx [edx+30h] +
test edx edx +
jz loc_4798D9  +
cmp eax edx +
jnz loc_4798CE  +
test edx edx +
setnz al  +
retn   +
***
mov ebx edx +
mov esi eax +
mov eax esi +
call @Forms@GetParentForm$qqrp17Controls@TControl  +
test eax eax +
jz loc_4798FA  +
mov ecx ebx +
mov edx esi +
call @Forms@TCustomForm@DefocusControl$qqrp20Controls@TWinControlo  +
pop esi  +
pop ebx  +
retn   +
***
mov ebx edx +
mov esi eax +
test ebx ebx +
jz loc_479947  +
mov eax ebx +
mov edx ds:off_472320 +
call @System@@IsClass$qqrp14System@TObjectp17System@TMetaClass  +
test al al +
jz loc_479937  +
lea eax [esi+19Ch] +
mov edx ebx +
call @Controls@_16544  +
lea eax [esi+194h] +
mov edx ebx +
call @Controls@_16544  +
jmp loc_479944  +
lea eax [esi+198h] +
mov edx ebx +
call @Controls@_16544  +
mov [ebx+30h] esi +
pop esi  +
pop ebx  +
retn   +
***
mov ebx edx +
push edi  +
mov ebx edx +
mov edi eax +
mov edx edi +
mov eax ebx +
mov si 0FFF5h +
call @System@@CallDynaInst$qqrv  +
push 1  +
mov esi ebx +
mov ecx esi +
mov edx 0B02Ch +
mov eax edi +
call @Controls@TControl@Perform$qqruiii  +
mov edx ebx +
mov eax edi +
call @Controls@TWinControl@Insert$qqrp17Controls@TControl  +
test byte ptr [ebx+1Ch] 2 +
jnz loc_479A52  +
push 0  +
xor ecx ecx +
mov edx 0B009h +
mov eax ebx +
call @Controls@TControl@Perform$qqruiii  +
push 0  +
xor ecx ecx +
mov edx 0B008h +
mov eax ebx +
call @Controls@TControl@Perform$qqruiii  +
push 0  +
xor ecx ecx +
mov edx 0B023h +
mov eax ebx +
call @Controls@TControl@Perform$qqruiii  +
push 0  +
xor ecx ecx +
mov edx 0B03Dh +
mov eax ebx +
call @Controls@TControl@Perform$qqruiii  +
mov eax ebx +
mov edx ds:off_472320 +
call @System@@IsClass$qqrp14System@TObjectp17System@TMetaClass  +
test al al +
jz loc_479A37  +
push 0  +
xor ecx ecx +
mov edx 0B011h +
mov eax ebx +
call @Controls@TControl@Perform$qqruiii  +
mov eax edi +
call @Controls@TWinControl@UpdateControlState$qqrv  +
jmp loc_479A49  +
mov eax edi +
call @Controls@TWinControl@HandleAllocated$qqrv  +
test al al +
jz loc_479A49  +
mov eax ebx +
mov edx [eax] +
call dword ptr [edx+7Ch]  +
mov edx ebx +
mov eax edi +
call @Controls@TWinControl@AlignControl$qqrp17Controls@TControl  +
push 1  +
mov ecx esi +
mov edx 0B036h +
mov eax edi +
call @Controls@TControl@Perform$qqruiii  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
push ebp  +
mov ebx edx +
mov esi eax +
push 0  +
mov edi ebx +
mov ecx edi +
mov edx 0B036h +
mov eax esi +
call @Controls@TControl@Perform$qqruiii  +
mov eax ebx +
mov edx ds:off_472320 +
call @System@@IsClass$qqrp14System@TObjectp17System@TMetaClass  +
test al al +
jz loc_479AA7  +
mov dl 1 +
mov ebp ebx +
mov eax ebp +
call @Controls@TWinControl@RemoveFocus$qqro  +
mov eax ebp +
call @Controls@TWinControl@DestroyHandle$qqrv  +
jmp loc_479ABE  +
mov eax esi +
call @Controls@TWinControl@HandleAllocated$qqrv  +
test al al +
jz loc_479ABE  +
xor ecx ecx +
mov dl [ebx+57h] +
mov eax ebx +
call @Controls@TControl@InvalidateControl$qqroo  +
mov edx ebx +
mov eax esi +
call @Controls@TWinControl@Remove$qqrp17Controls@TControl  +
push 0  +
mov ecx edi +
mov edx 0B02Ch +
mov eax esi +
call @Controls@TControl@Perform$qqruiii  +
mov eax esi +
call sub_4796B0  +
pop ebp  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
xor edx edx +
mov ecx [eax+198h] +
test ecx ecx +
jz loc_479B2F  +
add edx [ecx+8] +
mov ecx [eax+19Ch] +
test ecx ecx +
jz loc_479B3C  +
add edx [ecx+8] +
mov eax edx +
retn   +
***
push edi  +
add esp 0FFFFFFF0h +
movzx edx dx +
mov [esp+10h+var_10] edx +
xor edx edx +
mov [esp+10h+var_C] edx +
xor edx edx +
mov [esp+10h+var_8] edx +
xor edx edx +
mov [esp+10h+var_4] edx +
mov edx esp +
call @Controls@TWinControl@Broadcast$qqrpv  +
add esp 10h +
retn   +
***
push edi  +
mov esi ecx +
mov ebx edx +
test esi esi +
jz loc_479C0F  +
mov edi [ebx+34h] +
lea eax [ebx+24h] +
push eax  +
push esi  +
mov eax hInstance +
push eax  +
call GetClassInfoA  +
test eax eax +
jnz loc_479BFE  +
lea eax [ebx+24h] +
push eax  +
push esi  +
push 0  +
call GetClassInfoA  +
test eax eax +
jnz loc_479BFE  +
lea eax [ebx+24h] +
push eax  +
push esi  +
mov eax off_4EAA60 +
mov eax [eax] +
push eax  +
call GetClassInfoA  +
test eax eax +
jnz loc_479BFE  +
lea eax [ebx+24h] +
push eax  +
push esi  +
mov eax [ebx+34h] +
push eax  +
call GetClassInfoA  +
mov [ebx+34h] edi +
mov eax [ebx+24h] +
and eax 0FFFFBF1Fh +
or eax 3 +
mov [ebx+24h] eax +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
mov edi edx +
mov ebx eax +
mov eax ebx +
call @Controls@TControl@UseRightToLeftReading$qqrv_0  +
test al al +
jz loc_479C2C  +
or dword ptr [edi] 2000h +
mov eax ebx +
call @Controls@TControl@UseRightToLeftScrollBar$qqrv  +
test al al +
jz loc_479C3D  +
or dword ptr [edi] 4000h +
mov eax ebx +
mov si 0FFC8h +
call @System@@CallDynaInst$qqrv  +
test al al +
jz loc_479C75  +
mov eax ebx +
mov si 0FFCAh +
call @System@@CallDynaInst$qqrv  +
test al al +
jnz loc_479C63  +
or dword ptr [edi] 1000h +
jmp loc_479C75  +
mov eax ebx +
mov si 0FFCAh +
call @System@@CallDynaInst$qqrv  +
cmp al 1 +
jnz loc_479C75  +
or dword ptr [edi] 0 +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
add esp 0FFFFFEFCh +
add esp 0FFFFFF40h +
mov ebx edx +
mov esi eax +
mov eax [ebx+20h] +
push eax  +
mov eax [ebx+34h] +
push eax  +
push 0  +
mov eax [ebx+1Ch] +
push eax  +
mov eax [ebx+18h] +
push eax  +
mov eax [ebx+14h] +
push eax  +
mov eax [ebx+10h] +
push eax  +
mov eax [ebx+0Ch] +
push eax  +
mov eax [ebx+4] +
push eax  +
mov eax [ebx] +
push eax  +
lea eax [ebx+4Ch] +
push eax  +
mov eax [ebx+8] +
push eax  +
call CreateWindowExA  +
mov [esi+180h] eax +
pop esi  +
pop ebx  +
retn   +
***
mov esi edx +
add esp 0FFFFFFF0h +
mov ecx [eax] +
push ecx  +
push ebx  +
push esi  +
push edi  +
mov [ebp+var_1] 1 +
mov eax [ebp+arg_0] +
mov eax [eax-4] +
mov ebx [eax+20h] +
test ebx ebx +
jz loc_47A05D  +
mov eax [ebp+arg_0] +
lea edx [ebx+1FAh] +
mov eax [ebp+arg_0] +
mov eax [eax-8] +
add eax 1FAh +
call @Controls@_16843  +
test al al +
jnz loc_47A0EB  +
mov eax [ebp+arg_0] +
mov eax [eax-8] +
mov eax [eax+198h] +
test eax eax +
jz loc_47A0A4  +
mov edx [ebp+arg_0] +
mov ebx [eax+8] +
dec ebx  +
test ebx ebx +
jl loc_47A0A4  +
inc ebx  +
xor esi esi +
mov eax [ebp+arg_0] +
mov eax [eax-8] +
mov eax [eax+198h] +
mov edx esi +
call @Classes@TList@Get$qqri  +
mov edi eax +
cmp byte ptr [edi+5Bh] 0 +
jnz loc_47A0A0  +
mov al ds:byte_47A0F8 +
cmp al [edi+61h] +
jnz loc_47A0EF  +
inc esi  +
dec ebx  +
jnz loc_47A07B  +
mov eax [ebp+arg_0] +
mov eax [eax-8] +
mov eax [eax+19Ch] +
test eax eax +
jz loc_47A0EB  +
mov edx [ebp+arg_0] +
mov ebx [eax+8] +
dec ebx  +
test ebx ebx +
jl loc_47A0EB  +
inc ebx  +
xor esi esi +
mov eax [ebp+arg_0] +
mov eax [eax-8] +
mov eax [eax+19Ch] +
mov edx esi +
call @Classes@TList@Get$qqri  +
mov edi eax +
cmp byte ptr [edi+5Bh] 0 +
jnz loc_47A0E7  +
mov al ds:byte_47A0F8 +
cmp al [edi+61h] +
jnz loc_47A0EF  +
inc esi  +
dec ebx  +
jnz loc_47A0C2  +
mov [ebp+var_1] 0 +
mov al [ebp+var_1] +
pop edi  +
pop esi  +
pop ebx  +
pop ecx  +
pop ebp  +
retn   +
***
add esp 0FFFFFFF8h +
push ebx  +
mov [ebp+var_4] edx +
mov [ebp+var_8] eax +
mov edx [ebp+var_4] +
mov eax [ebp+var_8] +
call unknown_libname_274  +
mov eax [ebp+var_8] +
push eax  +
push offset @Controls@TWinControl@ReadDesignSize$qqrp15Classes@TReader  +
mov eax [ebp+var_8] +
push eax  +
push offset @Controls@TWinControl@WriteDesignSize$qqrp15Classes@TWriter  +
push ebp  +
call @Controls@_16844  +
pop ecx  +
mov ecx eax +
mov edx offset _str_DesignSize.Text +
mov eax [ebp+var_4] +
mov ebx [eax] +
call dword ptr [ebx+4]  +
pop ebx  +
pop ecx  +
pop ecx  +
pop ebp  +
retn   +
***
push edi  +
mov ebx eax +
mov eax ebx +
call @Controls@TControl@GetTextLen$qqrv  +
mov esi eax +
cmp esi 1 +
jge loc_47A17A  +
mov eax offset dword_47A1AC +
call unknown_libname_466  +
mov [ebx+64h] eax +
jmp loc_47A199  +
lea eax [esi+1] +
call sub_4A9394  +
mov edi eax +
mov [ebx+64h] edi +
mov eax edi +
call @Sysutils@StrBufSize$qqrpxc  +
mov ecx eax +
mov edx edi +
mov eax ebx +
call unknown_libname_272  +
call @Controls@_16606_0  +
mov eax ebx +
mov edx [eax] +
call dword ptr [edx+0ACh]  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push ecx  +
mov [ebp+var_4] eax +
mov eax [ebp+var_4] +
or word ptr [eax+54h] 200h +
xor eax eax +
push ebp  +
push offset loc_47A1FD  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov eax [ebp+var_4] +
mov eax [eax+180h] +
push eax  +
call DestroyWindow  +
test eax eax +
jnz loc_47A1E6  +
call sub_4AD4E4  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_47A204  +
mov eax [ebp+var_4] +
and word ptr [eax+54h] 0FDFFh +
retn   +
jmp unknown_libname_539  +
jmp loc_47A1F3  +
mov eax [ebp+var_4] +
xor edx edx +
mov [eax+180h] edx +
pop ecx  +
pop ebp  +
retn   +
***
push edi  +
mov ebx edx +
mov edi eax +
mov eax [edi+19Ch] +
mov edx ebx +
call unknown_libname_419  +
mov esi eax +
inc esi  +
mov eax [edi+19Ch] +
mov ebx [eax+8] +
dec ebx  +
sub ebx esi +
jl loc_47A255  +
inc ebx  +
mov eax [edi+19Ch] +
mov edx esi +
call @Classes@TList@Get$qqri  +
mov eax [eax+180h] +
test eax eax +
jnz loc_47A257  +
inc esi  +
dec ebx  +
jnz loc_47A23A  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
mov ebx eax +
cmp dword ptr [ebx+180h] 0 +
jnz loc_47A2EE  +
mov eax ebx +
mov edx [eax] +
call dword ptr [edx+0A0h]  +
mov esi ebx +
push esi  +
movzx eax nAtom +
push eax  +
mov eax [ebx+180h] +
push eax  +
call SetPropA  +
push esi  +
movzx eax word_4F1810 +
push eax  +
mov eax [ebx+180h] +
push eax  +
call SetPropA  +
mov esi [ebx+30h] +
test esi esi +
jz loc_47A2CB  +
push 13h  +
push 0  +
push 0  +
push 0  +
push 0  +
mov edx ebx +
mov eax esi +
call @Controls@TWinControl@PrecedingWindow$qqrp20Controls@TWinControl  +
push eax  +
mov eax [ebx+180h] +
push eax  +
call SetWindowPos  +
mov eax ebx +
call @Controls@TWinControl@GetControlCount$qqrv  +
mov esi eax +
dec esi  +
test esi esi +
jl loc_47A2EE  +
inc esi  +
xor edi edi +
mov edx edi +
mov eax ebx +
call @Controls@TWinControl@GetControl$qqri  +
call @Controls@TControl@UpdateAnchorRules$qqrv  +
inc edi  +
dec esi  +
jnz loc_47A2DC  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
retn   +
***
add esp 0FFFFFFF0h +
push esi  +
push edi  +
mov esi [ebp+arg_0] +
lea edi [ebp+var_10] +
movs   +
movs   +
movs   +
movs   +
pop edi  +
pop esi  +
mov esp ebp +
pop ebp  +
retn 14h  +
***
push edi  +
mov ebx eax +
cmp dword ptr [ebx+180h] 0 +
jz loc_47A357  +
mov eax [ebx+19Ch] +
test eax eax +
jz loc_47A34D  +
mov esi [eax+8] +
dec esi  +
test esi esi +
jl loc_47A34D  +
inc esi  +
xor edi edi +
mov edx edi +
mov eax [ebx+19Ch] +
call @Classes@TList@Get$qqri  +
call @Controls@TWinControl@DestroyHandle$qqrv  +
inc edi  +
dec esi  +
jnz loc_47A337  +
mov eax ebx +
mov edx [eax] +
call dword ptr [edx+0B0h]  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
cmp dword ptr [eax+180h] 0 +
push edi  +
mov edi eax +
mov eax edi +
mov si 0FFB5h +
call @System@@CallDynaInst$qqrv  +
mov ebx eax +
mov eax edi +
call @Controls@TWinControl@DestroyHandle$qqrv  +
mov eax edi +
call @Controls@TWinControl@UpdateControlState$qqrv  +
test bl bl +
jz loc_47A3AD  +
cmp dword ptr [edi+180h] 0 +
jz loc_47A3AD  +
mov eax [edi+180h] +
push eax  +
call SetFocus  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
add esp 0FFFFFFF8h +
push ebx  +
push esi  +
push edi  +
mov [ebp+var_4] eax +
mov eax [ebp+var_4] +
cmp byte ptr [eax+57h] 0 +
jnz loc_47A3DB  +
mov eax [ebp+var_4] +
test byte ptr [eax+1Ch] 10h +
jz loc_47A3E4  +
mov eax [ebp+var_4] +
test byte ptr [eax+51h] 4 +
jnz loc_47A3E4  +
mov eax [ebp+var_4] +
test byte ptr [eax+54h] 8 +
jz loc_47A3E8  +
xor eax eax +
jmp loc_47A3EA  +
mov al 1 +
mov [ebp+var_5] al +
cmp [ebp+var_5] 0 +
jz loc_47A43B  +
mov eax [ebp+var_4] +
cmp dword ptr [eax+180h] 0 +
jnz loc_47A40A  +
mov eax [ebp+var_4] +
mov edx [eax] +
call dword ptr [edx+94h]  +
mov eax [ebp+var_4] +
mov eax [eax+19Ch] +
test eax eax +
jz loc_47A43B  +
mov ebx [eax+8] +
dec ebx  +
test ebx ebx +
jl loc_47A43B  +
inc ebx  +
xor esi esi +
mov eax [ebp+var_4] +
mov eax [eax+19Ch] +
mov edx esi +
call @Classes@TList@Get$qqri  +
call @Controls@TWinControl@UpdateShowing$qqrv  +
inc esi  +
dec ebx  +
jnz loc_47A422  +
mov eax [ebp+var_4] +
cmp dword ptr [eax+180h] 0 +
jz loc_47A4A7  +
mov eax [ebp+var_4] +
mov al [eax+1A6h] +
cmp al [ebp+var_5] +
jz loc_47A4A7  +
mov eax [ebp+var_4] +
mov dl [ebp+var_5] +
mov [eax+1A6h] dl +
xor eax eax +
push ebp  +
push offset loc_47A48A  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
push 0  +
xor ecx ecx +
mov edx 0B019h +
mov eax [ebp+var_4] +
call @Controls@TControl@Perform$qqruiii  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
jmp loc_47A4A7  +
jmp @System@@HandleAnyException$qqrv  +
mov al [ebp-5] +
xor al 1 +
mov edx [ebp-4] +
mov [edx+1A6h] al +
call @System@@RaiseAgain$qqrv  +
call @@DoneExcept$qqrv  +
pop edi  +
pop esi  +
pop ebx  +
pop ecx  +
pop ecx  +
pop ebp  +
retn   +
***
mov esi eax +
mov ebx esi +
jmp loc_47A4C3  +
mov ebx eax +
cmp byte ptr [ebx+1A6h] 0 +
jz loc_47A4EB  +
mov eax [ebx+30h] +
test eax eax +
jnz loc_47A4B8  +
mov eax ebx +
mov edx ds:off_462B40 +
call @System@@IsClass$qqrp14System@TObjectp17System@TMetaClass  +
test al al +
jnz loc_47A4E4  +
cmp dword ptr [ebx+190h] 0 +
jz loc_47A4EB  +
mov eax esi +
call @Controls@TWinControl@UpdateShowing$qqrv  +
pop esi  +
pop ebx  +
retn   +
***
push ecx  +
push ebx  +
push esi  +
push edi  +
mov [ebp+var_4] eax +
xor eax eax +
push ebp  +
push offset loc_47A548  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
xor eax eax +
push ebp  +
push offset loc_47A537  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov ebx [ebp+var_4] +
mov eax [ebx+3Ch] +
call dword ptr [ebx+38h]  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_47A53E  +
call @Controls@_16606_0  +
call @Controls@_16606  +
retn   +
jmp unknown_libname_539  +
jmp loc_47A52C  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
jmp loc_47A561  +
jmp @System@@HandleAnyException$qqrv  +
mov eax off_4EA6C8 +
mov eax [eax] +
mov edx [ebp+var_4] +
call @TApplication@HandleException$qqrp7TObject  +
call @@DoneExcept$qqrv  +
pop edi  +
pop esi  +
pop ebx  +
pop ecx  +
pop ebp  +
retn   +
***
add esp 0FFFFFFE8h +
push ebx  +
mov ebx eax +
lea ecx [ebp+var_8] +
mov eax [ebp+arg_0] +
mov edx [eax-4] +
mov edx [edx+4] +
sub edx [ebx+44h] +
mov eax [ebp+arg_0] +
mov eax [eax-4] +
mov eax [eax] +
sub eax [ebx+40h] +
call @Olectrls@TOleControl@GetVariantProp$qqri  +
mov eax [ebp+arg_0] +
mov edx [ebp+var_8] +
mov [eax-0Ch] edx +
mov edx [ebp+var_4] +
mov [eax-8] edx +
mov eax [ebp+arg_0] +
push dword ptr [eax-8]  +
push dword ptr [eax-0Ch]  +
lea edx [ebp+rc] +
mov eax ebx +
mov ecx [eax] +
call dword ptr [ecx+44h]  +
lea eax [ebp+rc] +
push eax  +
call PtInRect  +
test eax eax +
jz loc_47A609  +
test byte ptr [ebx+1Ch] 10h +
jz loc_47A5D1  +
cmp byte ptr [ebx+57h] 0 +
jnz loc_47A60D  +
test byte ptr [ebx+51h] 4 +
jz loc_47A60D  +
cmp byte ptr [ebx+57h] 0 +
jz loc_47A609  +
mov eax ebx +
mov edx [eax] +
call dword ptr [edx+50h]  +
test al al +
jnz loc_47A5EB  +
mov eax [ebp+arg_0] +
cmp byte ptr [eax-0Dh] 0 +
jz loc_47A609  +
mov eax [ebp+arg_0] +
add eax 0FFFFFFF4h +
call unknown_libname_383  +
push eax  +
xor ecx ecx +
mov edx 0B00Ah +
mov eax ebx +
call @Controls@TControl@Perform$qqruiii  +
test eax eax +
jnz loc_47A60D  +
xor eax eax +
jmp loc_47A60F  +
mov al 1 +
test al al +
jz loc_47A619  +
mov edx [ebp+arg_0] +
mov [edx-14h] ebx +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
add esp 0FFFFFFECh +
push ebx  +
push esi  +
mov [ebp+var_D] cl +
mov [ebp+var_4] edx +
mov esi eax +
xor eax eax +
mov [ebp+var_14] eax +
cmp [ebp+arg_0] 0 +
jz loc_47A671  +
cmp dword ptr [esi+19Ch] 0 +
jz loc_47A671  +
mov eax [esi+19Ch] +
mov ebx [eax+8] +
dec ebx  +
cmp ebx 0 +
jl loc_47A671  +
push ebp  +
mov edx ebx +
mov eax [esi+19Ch] +
call @Classes@TList@Get$qqri  +
call @Controls@_16859  +
pop ecx  +
test al al +
jnz loc_47A671  +
dec ebx  +
cmp ebx 0FFFFFFFFh +
jnz loc_47A653  +
mov eax [esi+198h] +
test eax eax +
jz loc_47A6A8  +
cmp [ebp+var_14] 0 +
jnz loc_47A6A8  +
mov ebx [eax+8] +
dec ebx  +
cmp ebx 0 +
jl loc_47A6A8  +
push ebp  +
mov edx ebx +
mov eax [esi+198h] +
call @Classes@TList@Get$qqri  +
call @Controls@_16859  +
pop ecx  +
test al al +
jnz loc_47A6A8  +
dec ebx  +
cmp ebx 0FFFFFFFFh +
jnz loc_47A68A  +
mov eax [ebp+var_14] +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 4  +
***
push edi  +
add esp 0FFFFFFF0h +
mov esi edx +
mov edi eax +
mov eax edi +
call @Controls@TWinControl@GetHandle$qqrv  +
mov ebx eax +
call GetCapture  +
cmp ebx eax +
jnz loc_47A6ED  +
xor ebx ebx +
cmp dword_4E6794 0 +
jz loc_47A70A  +
mov eax dword_4E6794 +
cmp edi [eax+30h] +
jnz loc_47A70A  +
mov ebx dword_4E6794 +
jmp loc_47A70A  +
push 0  +
lea edx [esp+14h+var_8] +
mov eax [esi+8] +
call unknown_libname_382  +
lea edx [esp+14h+var_8] +
xor ecx ecx +
mov eax edi +
call @Controls@TWinControl@ControlAtPos$qqrrx12Types@TPointoo  +
mov ebx eax +
xor eax eax +
test ebx ebx +
jz loc_47A73E  +
movsx eax word ptr [esi+8] +
sub eax [ebx+40h] +
mov [esp+10h+var_10] eax +
movsx eax word ptr [esi+0Ah] +
sub eax [ebx+44h] +
mov [esp+10h+var_C] eax +
mov eax esp +
call unknown_libname_383  +
push eax  +
mov ecx [esi+4] +
mov edx [esi] +
mov eax ebx +
call @Controls@TControl@Perform$qqruiii  +
mov [esi+0Ch] eax +
mov al 1 +
add esp 10h +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
add esp 0FFFFFFF0h +
mov esi edx +
mov ebx eax +
mov eax [esi] +
cmp eax 84h +
jg loc_47A773  +
jz loc_47A7CD  +
sub eax 7 +
jz loc_47A794  +
dec eax  +
jz loc_47A7BE  +
sub eax 17h +
jz loc_47A863  +
jmp loc_47A89B  +
add eax 0FFFFFF00h +
sub eax 9 +
jb loc_47A856  +
add eax 0FFFFFF09h +
sub eax 0Bh +
jb loc_47A81E  +
jmp loc_47A89B  +
mov eax ebx +
call @Forms@GetParentForm$qqrp17Controls@TControl  +
mov edi eax +
test edi edi +
jz loc_47A89B  +
mov edx ebx +
mov eax edi +
mov ecx [eax] +
call dword ptr [ecx+0E4h]  +
test al al +
jz loc_47A8A4  +
jmp loc_47A89B  +
test byte ptr [ebx+54h] 20h +
jnz loc_47A8A4  +
jmp loc_47A89B  +
mov edx esi +
mov eax ebx +
call @Controls@TControl@WndProc$qqrr17Messages@TMessage  +
cmp dword ptr [esi+0Ch] 0FFFFFFFFh +
jnz loc_47A8A4  +
push 0  +
lea edx [esp+14h+var_8] +
mov eax [esi+8] +
call unknown_libname_382  +
lea edx [esp+14h+var_8] +
lea ecx [esp+14h+var_10] +
mov eax ebx +
call @Controls@TControl@ScreenToClient$qqrrx14Windows@TPoint  +
lea edx [esp+14h+var_10] +
xor ecx ecx +
mov eax ebx +
call @Controls@TWinControl@ControlAtPos$qqrrx12Types@TPointoo  +
test eax eax +
jz loc_47A8A4  +
mov dword ptr [esi+0Ch] 1 +
jmp loc_47A8A4  +
mov edx esi +
mov eax ebx +
call @Controls@TWinControl@IsControlMouseMsg$qqrr17Messages@TWMMouse  +
test al al +
jz loc_47A89B  +
cmp dword ptr [esi+0Ch] 0 +
jnz loc_47A8A4  +
mov eax ebx +
call @Controls@TWinControl@HandleAllocated$qqrv  +
test al al +
jz loc_47A8A4  +
mov eax [esi+8] +
push eax  +
mov eax [esi+4] +
push eax  +
mov eax [esi] +
push eax  +
mov eax ebx +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call DefWindowProcA  +
jmp loc_47A8A4  +
mov eax ebx +
call unknown_libname_273  +
test al al +
jnz loc_47A8A4  +
jmp loc_47A89B  +
mov eax ebx +
call @Controls@TWinControl@GetHandle$qqrv  +
mov edi eax +
call GetCapture  +
cmp edi eax +
jnz loc_47A89B  +
cmp dword_4E6794 0 +
jz loc_47A89B  +
mov eax dword_4E6794 +
cmp ebx [eax+30h] +
jnz loc_47A89B  +
push 0  +
xor ecx ecx +
mov edx 1Fh +
mov eax dword_4E6794 +
call @Controls@TControl@Perform$qqruiii  +
mov edx esi +
mov eax ebx +
call @Controls@TControl@WndProc$qqrr17Messages@TMessage  +
add esp 10h +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
push ebp  +
mov ebx edx +
mov esi eax +
cmp dword ptr [esi+180h] 0 +
jz loc_47A9A4  +
mov edi [ebx] +
cmp edi 7Bh +
jnz loc_47A8EC  +
cmp dword ptr [esi+30h] 0 +
jz loc_47A8EC  +
mov eax [ebx+8] +
push eax  +
mov ecx [ebx+4] +
mov edx edi +
mov eax [esi+30h] +
call @Controls@TControl@Perform$qqruiii  +
mov ebp eax +
mov [ebx+0Ch] ebp +
test ebp ebp +
jnz loc_47A9AD  +
mov edi [ebx] +
mov eax edi +
add eax 0FFFFFECEh +
sub eax 7 +
jb loc_47A906  +
add eax 0FFFF4407h +
sub eax 7 +
jb loc_47A920  +
jmp loc_47A95F  +
mov ebp [ebx+8] +
push ebp  +
mov eax [ebx+4] +
push eax  +
add edi 0BC00h +
push edi  +
push ebp  +
call SendMessageA  +
mov [ebx+0Ch] eax +
jmp loc_47A98B  +
mov eax [esi+68h] +
mov eax [eax+18h] +
call @Graphics@ColorToRGB$qqr15Graphics@TColor  +
push eax  +
mov eax [ebx+4] +
push eax  +
call SetTextColor  +
mov eax [esi+170h] +
call sub_45AF0C  +
call @Graphics@ColorToRGB$qqr15Graphics@TColor  +
push eax  +
mov eax [ebx+4] +
push eax  +
call SetBkColor  +
mov eax [esi+170h] +
call @Graphics@TBrush@GetHandle$qqrv  +
mov [ebx+0Ch] eax +
jmp loc_47A98B  +
cmp edi Msg +
jnz loc_47A96C  +
mov [ebx+0Ch] esi +
jmp loc_47A98B  +
mov eax [ebx+8] +
push eax  +
mov eax [ebx+4] +
push eax  +
push edi  +
mov eax [esi+180h] +
push eax  +
mov eax [esi+174h] +
push eax  +
call CallWindowProcA  +
mov [ebx+0Ch] eax +
mov eax [ebx] +
cmp eax 0Ch +
jnz loc_47A9AD  +
mov edx [ebx+8] +
push edx  +
mov ecx [ebx+4] +
mov edx eax +
mov eax esi +
call @Controls@TControl@SendDockNotification$qqruiii  +
jmp loc_47A9AD  +
mov edx ebx +
mov eax esi +
call @Controls@TControl@DefaultHandler$qqrpv  +
pop ebp  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
mov esi edx +
xor ebx ebx +
call @Controls@FindControl$qqrui  +
mov edi eax +
test edi edi +
jz loc_47A9E1  +
mov eax [esi+8] +
push eax  +
mov ecx [esi+4] +
mov edx [esi] +
add edx 0BC00h +
mov eax edi +
call @Controls@TControl@Perform$qqruiii  +
mov [esi+0Ch] eax +
mov bl 1 +
mov eax ebx +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
add esp 0FFFFFFB0h +
push ebx  +
push esi  +
push edi  +
mov [ebp+var_8] edx +
mov [ebp+var_4] eax +
mov ebx [ebp+var_8] +
mov ebx [ebx+4] +
test ebx ebx +
jnz loc_47AA15  +
lea eax [ebp+Paint] +
push eax  +
mov eax [ebp+var_4] +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call BeginPaint  +
mov ebx eax +
xor edx edx +
push ebp  +
push offset loc_47AB08  +
push dword ptr fs:[edx]  +
mov fs:[edx] esp +
mov eax [ebp+var_4] +
cmp dword ptr [eax+198h] 0 +
jnz loc_47AA41  +
mov edx ebx +
mov eax [ebp+var_4] +
mov ecx [eax] +
call dword ptr [ecx+0B8h]  +
jmp loc_47AAD3  +
push ebx  +
call SaveDC  +
mov [ebp+var_10] eax +
mov [ebp+var_C] 2 +
mov eax [ebp+var_4] +
mov eax [eax+198h] +
mov edi [eax+8] +
dec edi  +
test edi edi +
jl loc_47AAB6  +
inc edi  +
xor esi esi +
mov eax [ebp+var_4] +
mov eax [eax+198h] +
mov edx esi +
call @Classes@TList@Get$qqri  +
cmp byte ptr [eax+57h] 0 +
jnz loc_47AA87  +
test byte ptr [eax+1Ch] 10h +
jz loc_47AAB2  +
test byte ptr [eax+51h] 4 +
jnz loc_47AAB2  +
test byte ptr [eax+50h] 40h +
jz loc_47AAB2  +
mov edx [eax+44h] +
add edx [eax+4Ch] +
push edx  +
mov edx [eax+40h] +
add edx [eax+48h] +
push edx  +
mov edx [eax+44h] +
push edx  +
mov eax [eax+40h] +
push eax  +
push ebx  +
call ExcludeClipRect  +
mov [ebp+var_C] eax +
cmp [ebp+var_C] 1 +
jz loc_47AAB6  +
inc esi  +
dec edi  +
jnz loc_47AA65  +
cmp [ebp+var_C] 1 +
jz loc_47AAC9  +
mov edx ebx +
mov eax [ebp+var_4] +
mov ecx [eax] +
call dword ptr [ecx+0B8h]  +
mov eax [ebp+var_10] +
push eax  +
push ebx  +
call RestoreDC  +
xor ecx ecx +
mov edx ebx +
mov eax [ebp+var_4] +
call @Controls@TWinControl@PaintControls$qqruip17Controls@TControl  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_47AB0F  +
mov eax [ebp+var_8] +
cmp dword ptr [eax+4] 0 +
jnz locret_47AB07  +
lea eax [ebp+Paint] +
push eax  +
mov eax [ebp+var_4] +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call EndPaint  +
retn   +
jmp unknown_libname_539  +
jmp loc_47AAEC  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
mov esi eax +
mov [esp+10h+var_10] 0Fh +
mov [esp+10h+var_C] edx +
xor eax eax +
mov [esp+10h+var_8] eax +
xor eax eax +
mov [esp+10h+var_4] eax +
mov edx esp +
mov eax esi +
mov ecx [eax] +
call dword ptr [ecx-10h]  +
add esp 10h +
pop esi  +
retn   +
***
push edi  +
add esp 0FFFFFFE0h +
add esp 0FFFFFF94h +
mov ebx edx +
mov ebx edx +
mov esi eax +
mov edx ebx +
mov eax [ebx+8] +
mov eax [eax] +
call @Controls@_16864  +
test al al +
jnz loc_47B067  +
mov edx ebx +
mov eax esi +
mov ecx [eax] +
call dword ptr [ecx-10h]  +
pop esi  +
pop ebx  +
retn   +
***
call sub_459D9C  +
push 0  +
xor ecx ecx +
mov edx 0B024h +
mov eax ebx +
call @Controls@TControl@Perform$qqruiii  +
pop ebx  +
retn   +
***
mov ecx [edx+8] +
push ecx  +
mov ecx [edx+4] +
mov edx 0B025h +
call @Controls@TControl@Perform$qqruiii  +
retn   +
***
mov edx 0B026h +
call @Controls@TControl@Perform$qqruiii  +
retn   +
***
mov edx 0B027h +
call @Controls@TControl@Perform$qqruiii  +
retn   +
***
mov ebx edx +
mov ebx edx +
mov ebx edx +
mov esi eax +
mov edx ebx +
mov eax [ebx+8] +
mov eax [eax+4] +
call @Controls@_16864  +
test al al +
jnz loc_47B11C  +
mov edx ebx +
mov eax esi +
mov ecx [eax] +
call dword ptr [ecx-10h]  +
pop esi  +
pop ebx  +
retn   +
***
mov ebx edx +
mov esi eax +
mov edx ebx +
mov eax [ebx+8] +
mov eax [eax+4] +
call @Controls@_16864  +
test al al +
jnz loc_47B140  +
mov edx ebx +
mov eax esi +
mov ecx [eax] +
call dword ptr [ecx-10h]  +
pop esi  +
pop ebx  +
retn   +
***
mov ebx edx +
mov esi eax +
mov edx ebx +
mov eax [ebx+8] +
mov eax [eax+4] +
call @Controls@_16864  +
test al al +
jnz loc_47B164  +
mov edx ebx +
mov eax esi +
mov ecx [eax] +
call dword ptr [ecx-10h]  +
pop esi  +
pop ebx  +
retn   +
***
mov ebx edx +
mov esi eax +
mov edx ebx +
mov eax [ebx+8] +
mov eax [eax+4] +
call @Controls@_16864  +
test al al +
jnz loc_47B188  +
mov edx ebx +
mov eax esi +
mov ecx [eax] +
call dword ptr [ecx-10h]  +
pop esi  +
pop ebx  +
retn   +
***
add esp 0FFFFFFF0h +
push edi  +
push ecx  +
mov esi edx +
mov edi eax +
cmp byte ptr [edi+1A5h] 0 +
jz loc_47B1FE  +
test byte ptr [edi+50h] 10h +
jz loc_47B1FE  +
cmp dword ptr [edi+30h] 0 +
jz loc_47B1FE  +
mov eax [esi+8] +
test byte ptr [eax+18h] 8 +
jz loc_47B202  +
xor ebx ebx +
jmp loc_47B204  +
mov bl 1 +
mov eax [esi+8] +
test byte ptr [eax+18h] 2 +
jnz loc_47B21D  +
mov eax [edi+180h] +
push eax  +
call IsWindowVisible  +
test eax eax +
jnz loc_47B221  +
xor eax eax +
jmp loc_47B223  +
mov al 1 +
mov [esp+3+var_3] al +
mov eax [esi+8] +
test byte ptr [eax+18h] 1 +
jnz loc_47B23F  +
mov eax [edi+180h] +
push eax  +
call IsWindowVisible  +
test eax eax +
jnz loc_47B243  +
xor eax eax +
jmp loc_47B245  +
mov al 1 +
mov [esp+3+var_2] al +
test bl bl +
jz loc_47B25D  +
mov al [esp+3+var_3] +
or al [esp+3+var_2] +
jz loc_47B25D  +
mov eax edi +
call @Controls@TWinControl@InvalidateFrame$qqrv  +
test byte ptr [edi+55h] 2 +
jnz loc_47B26A  +
mov eax edi +
call @Controls@TWinControl@UpdateBounds$qqrv  +
mov edx esi +
mov eax edi +
call @Controls@TControl@WMWindowPosChanged$qqrr24Messages@TWMWindowPosMsg  +
test bl bl +
jz loc_47B290  +
mov al [esp+3+var_3] +
or al [esp+3+var_2] +
jnz loc_47B289  +
mov eax [esi+8] +
test byte ptr [eax+18h] 0C0h +
jz loc_47B290  +
mov eax edi +
call @Controls@TWinControl@InvalidateFrame$qqrv  +
pop edx  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
mov edi edx +
mov ebx eax +
mov ax ds:word_47B2E0 +
and ax [ebx+1Ch] +
mov dx ds:word_47B2E4 +
cmp dx ax +
jnz loc_47B2D3  +
mov esi [edi+8] +
test byte ptr [esi+18h] 1 +
jnz loc_47B2D3  +
lea ecx [esi+14h] +
lea edx [esi+10h] +
mov eax ebx +
call @Controls@TControl@CheckNewSize$qqrrit1  +
test al al +
jnz loc_47B2D3  +
or dword ptr [esi+18h] 1 +
mov edx edi +
mov eax ebx +
mov ecx [eax] +
call dword ptr [ecx-10h]  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov esi edx +
mov ebx eax +
mov eax ebx +
call @Controls@TWinControl@UpdateBounds$qqrv  +
mov edx esi +
mov eax ebx +
mov ecx [eax] +
call dword ptr [ecx-10h]  +
mov eax ebx +
call sub_4796B0  +
test byte ptr [ebx+1Ch] 1 +
jnz loc_47B316  +
mov eax ebx +
mov si 0FFCFh +
call @System@@CallDynaInst$qqrv  +
pop esi  +
pop ebx  +
retn   +
***
mov eax esi +
mov ecx [eax] +
call dword ptr [ecx-10h]  +
mov eax esi +
call @Controls@TWinControl@UpdateBounds$qqrv  +
pop esi  +
retn   +
***
push edi  +
add esp 0FFFFFFF0h +
mov esi edx +
mov ebx eax +
mov eax [esi+4] +
cmp eax [ebx+180h] +
jnz loc_47B41F  +
mov ax [esi+8] +
sub ax 0FFFEh +
jz loc_47B3E1  +
sub ax 3 +
jnz loc_47B41F  +
mov eax off_4EA6CC +
mov eax [eax] +
mov di [eax+44h] +
test di di +
jnz loc_47B3BE  +
push esp  +
call GetCursorPos  +
push 0  +
lea ecx [esp+14h+var_8] +
lea edx [esp+14h+var_10] +
mov eax ebx +
call @Controls@TControl@ScreenToClient$qqrrx14Windows@TPoint  +
lea edx [esp+14h+var_8] +
xor ecx ecx +
mov eax ebx +
call @Controls@TWinControl@ControlAtPos$qqrrx12Types@TPointoo  +
test eax eax +
jz loc_47B3A9  +
test byte ptr [eax+1Ch] 10h +
jz loc_47B3A5  +
mov di 0FFFEh +
jmp loc_47B3A9  +
mov di [eax+78h] +
test di di +
jnz loc_47B3BE  +
test byte ptr [ebx+1Ch] 10h +
jz loc_47B3BA  +
mov di 0FFFEh +
jmp loc_47B3BE  +
mov di [ebx+78h] +
test di di +
jz loc_47B41F  +
movsx edx di +
mov eax off_4EA6CC +
mov eax [eax] +
call @Forms@TScreen@GetCursors$qqri  +
push eax  +
call SetCursor  +
mov dword ptr [esi+0Ch] 1 +
jmp loc_47B428  +
cmp word ptr [esi+0Ah] 201h +
jnz loc_47B41F  +
mov eax off_4EA6C8 +
mov eax [eax] +
cmp dword ptr [eax+30h] 0 +
jz loc_47B41F  +
mov eax off_4EA6C8 +
mov eax [eax] +
mov eax [eax+30h] +
push eax  +
call GetLastActivePopup  +
mov edi eax +
call GetForegroundWindow  +
cmp edi eax +
jz loc_47B41F  +
mov eax off_4EA6C8 +
mov eax [eax] +
call @Forms@TApplication@BringToFront$qqrv  +
jmp loc_47B428  +
mov edx esi +
mov eax ebx +
mov ecx [eax] +
call dword ptr [ecx-10h]  +
add esp 10h +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov eax esi +
mov ecx [eax] +
call dword ptr [ecx-10h]  +
mov eax esi +
call @Controls@TWinControl@SetIme$qqrv  +
pop esi  +
retn   +
***
mov eax esi +
mov ecx [eax] +
call dword ptr [ecx-10h]  +
mov eax esi +
call @Controls@TWinControl@ResetIme$qqrv  +
pop esi  +
retn   +
***
mov byte ptr [esi+1F9h] 1 +
mov eax esi +
mov ecx [eax] +
call dword ptr [ecx-10h]  +
pop esi  +
retn   +
***
mov byte ptr [esi+1F9h] 0 +
mov eax esi +
mov ecx [eax] +
call dword ptr [ecx-10h]  +
pop esi  +
retn   +
***
push 0  +
push 0  +
push ebx  +
mov ebx eax +
xor eax eax +
push ebp  +
push offset loc_47B5F6  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov eax off_4EA8CC +
cmp byte ptr [eax+0Ch] 0 +
jz loc_47B5E0  +
cmp dword ptr [ebx+188h] 0 +
jz loc_47B5C9  +
lea edx [ebp+var_4] +
mov eax off_4EA6CC +
mov eax [eax] +
call @Forms@TScreen@GetDefaultIME$qqrv  +
mov edx [ebp+var_4] +
mov eax [ebx+188h] +
call unknown_libname_462  +
test eax eax +
jz loc_47B5C9  +
push 1  +
mov eax off_4EA6CC +
mov eax [eax] +
mov eax [eax+3Ch] +
push eax  +
call ActivateKeyboardLayout  +
cmp byte ptr [ebx+184h] 0 +
jnz loc_47B5E0  +
mov eax ebx +
call @Controls@TWinControl@GetHandle$qqrv  +
mov dl 1 +
call @Controls@Win32NLSEnableIME$qqruio  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_47B5FD  +
lea eax [ebp+var_4] +
call unknown_libname_540  +
retn   +
jmp unknown_libname_539  +
jmp loc_47B5ED  +
pop ebx  +
pop ecx  +
pop ebp  +
retn   +
***
mov edx eax +
mov eax esi +
mov ecx [eax] +
call dword ptr [ecx+68h]  +
pop esi  +
retn   +
***
jz loc_47B633  +
mov ebx eax +
mov edx eax +
mov eax [ebx+1C4h] +
call dword ptr [ebx+1C0h]  +
pop ebx  +
retn   +
***
jz loc_47B653  +
mov ebx eax +
mov edx eax +
mov eax [ebx+1CCh] +
call dword ptr [ebx+1C8h]  +
pop ebx  +
retn   +
***
push ebx  +
push ebx  +
cmp word ptr [eax+1BAh] 0 +
jz loc_47B6D5  +
push ecx  +
mov ecx [ebp+arg_8] +
push ecx  +
mov cl [ebp+arg_4] +
push ecx  +
mov ecx [ebp+arg_0] +
push ecx  +
mov ebx eax +
mov ecx edx +
mov edx eax +
mov eax [ebx+1BCh] +
call dword ptr [ebx+1B8h]  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
push ecx  +
push ebx  +
push esi  +
push edi  +
mov [ebp+var_4] ecx +
mov edi edx +
mov ebx eax +
mov edx edi +
mov eax ebx +
mov si 0FFD2h +
call @System@@CallDynaInst$qqrv  +
mov eax [ebp+arg_8] +
push eax  +
mov al [ebp+arg_4] +
push eax  +
mov eax [ebp+arg_0] +
push eax  +
mov ecx [ebp+var_4] +
mov edx edi +
mov eax ebx +
mov si 0FFC3h +
call @System@@CallDynaInst$qqrv  +
pop edi  +
pop esi  +
pop ebx  +
pop ecx  +
pop ebp  +
retn 0Ch  +
***
push edi  +
push edi  +
mov edx [eax+178h] +
test edx edx +
jz loc_47B7A6  +
mov eax [edx+8] +
retn   +
xor eax eax +
retn   +
***
push edi  +
mov edi edx +
mov ebx eax +
mov esi [ebx+178h] +
test esi esi +
jz loc_47B7C8  +
mov edx edi +
mov eax esi +
call @Classes@TList@Get$qqri  +
jmp loc_47B7CA  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
add esp 0FFFFFFF8h +
push ebx  +
push esi  +
push edi  +
mov esi [ebp+arg_4] +
lea edi [ebp+var_8] +
movs   +
movs   +
mov esi ecx +
mov edi edx +
mov ebx eax +
push esi  +
mov eax ebx +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call GetWindowRect  +
push 0Ah  +
push 0Ah  +
push esi  +
call InflateRect  +
cmp word ptr [ebx+1D2h] 0 +
jz loc_47B822  +
push esi  +
lea eax [ebp+var_8] +
push eax  +
mov eax [ebp+arg_0] +
push eax  +
mov ecx edi +
mov edx ebx +
mov eax [ebx+1D4h] +
call dword ptr [ebx+1D0h]  +
pop edi  +
pop esi  +
pop ebx  +
pop ecx  +
pop ecx  +
pop ebp  +
retn 8  +
***
push edi  +
mov esi eax +
mov eax esi +
call @Controls@TWinControl@GetDockClientCount$qqrv  +
mov edi eax +
test edi edi +
jle loc_47B860  +
mov ebx edi +
dec ebx  +
cmp ebx 0 +
jl loc_47B860  +
mov edx ebx +
mov eax [esi+178h] +
call @Classes@TList@Get$qqri  +
cmp byte ptr [eax+57h] 0 +
jnz loc_47B85A  +
dec edi  +
dec ebx  +
cmp ebx 0FFFFFFFFh +
jnz loc_47B846  +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov esi edx +
mov ebx eax +
cmp dword ptr [ebx+17Ch] 0 +
jnz loc_47B8AB  +
cmp byte ptr [ebx+1A8h] 0 +
jz loc_47B8AB  +
cmp byte ptr [ebx+1A7h] 0 +
jz loc_47B8AB  +
mov ecx ebx +
mov dl 1 +
mov eax off_4E66D8 +
call dword ptr [eax+24h]  +
mov edx eax +
test edx edx +
jz loc_47B8A2  +
sub edx 0FFFFFF8Ch +
mov eax esi +
call @System@@IntfCopy$qqrr45System@_DelphiInterface$t17System@IInterface_x45System@_DelphiInterface$t17System@IInterface_  +
jmp loc_47B8B8  +
mov eax esi +
mov edx [ebx+17Ch] +
call @System@@IntfCopy$qqrr45System@_DelphiInterface$t17System@IInterface_x45System@_DelphiInterface$t17System@IInterface_  +
cmp byte ptr [ebx+1F8h] 0 +
jnz loc_47B8CA  +
cmp dword ptr [esi] 0 +
jnz loc_47B8CA  +
xor eax eax +
jmp loc_47B8CC  +
mov al 1 +
mov [ebx+1F8h] al +
pop esi  +
pop ebx  +
retn   +
***
push 0  +
push ebx  +
push esi  +
push edi  +
mov ebx edx +
mov edi eax +
xor eax eax +
push ebp  +
push offset loc_47B980  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
cmp bl [edi+1A8h] +
jz loc_47B96A  +
mov [edi+1A8h] bl +
test byte ptr [edi+1Ch] 10h +
jnz loc_47B96A  +
mov edx ebx +
mov eax edi +
call @Controls@_16554  +
test bl bl +
jnz loc_47B933  +
mov eax [edi+178h] +
call @System@TObject@Free$qqrv  +
xor eax eax +
mov [edi+178h] eax +
lea eax [edi+17Ch] +
call unknown_libname_560  +
jmp loc_47B96A  +
cmp dword ptr [edi+178h] 0 +
jnz loc_47B94E  +
mov dl 1 +
mov eax ds:off_49A5D8 +
call @System@TObject@$bctr$qqrv  +
mov [edi+178h] eax +
lea edx [ebp+var_4] +
mov eax edi +
mov si 0FFC6h +
call @System@@CallDynaInst$qqrv  +
mov edx [ebp+var_4] +
lea eax [edi+17Ch] +
call @System@@IntfCopy$qqrr45System@_DelphiInterface$t17System@IInterface_x45System@_DelphiInterface$t17System@IInterface_  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_47B987  +
lea eax [ebp+var_4] +
call unknown_libname_560  +
retn   +
jmp unknown_libname_539  +
jmp loc_47B977  +
pop edi  +
pop esi  +
pop ebx  +
pop ecx  +
pop ebp  +
retn   +
***
add esp 0FFFFFFE8h +
push ebx  +
push esi  +
push edi  +
mov [ebp+var_8] edx +
mov [ebp+var_4] eax +
mov eax [ebp+var_8] +
cmp dword ptr [eax+0Ch] 0 +
jnz loc_47BA74  +
mov eax [ebp+var_8] +
mov eax [eax+4] +
lea esi [eax+44h] +
lea edi [ebp+Points] +
movs   +
movs   +
movs   +
movs   +
push 2  +
lea eax [ebp+Points] +
push eax  +
mov eax [ebp+var_4] +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
push 0  +
call MapWindowPoints  +
mov eax [ebp+var_4] +
call @Controls@TWinControl@DisableAlign$qqrv  +
xor edx edx +
push ebp  +
push offset loc_47BA52  +
push dword ptr fs:[edx]  +
mov fs:[edx] esp +
mov eax [ebp+var_8] +
mov eax [eax+4] +
mov eax [eax+38h] +
lea ecx [ebp+Points] +
mov edx [ebp+var_4] +
mov si 0FFCCh +
call @System@@CallDynaInst$qqrv  +
mov eax [ebp+var_4] +
cmp byte ptr [eax+1A7h] 0 +
jz loc_47BA3C  +
mov eax [ebp+var_4] +
cmp dword ptr [eax+17Ch] 0 +
jz loc_47BA3C  +
mov eax [ebp+var_8] +
mov eax [eax+4] +
mov edx [eax+58h] +
push edx  +
mov edx [ebp+var_8] +
mov cl [eax+54h] +
mov edx [ebp+var_8] +
mov edx [eax+38h] +
mov eax [ebp+var_4] +
mov eax [eax+17Ch] +
mov ebx [eax] +
call dword ptr [ebx+18h]  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_47BA59  +
mov eax [ebp+var_4] +
call @Controls@TWinControl@EnableAlign$qqrv  +
retn   +
jmp unknown_libname_539  +
jmp loc_47BA49  +
mov eax [ebp-4] +
call @Forms@GetParentForm$qqrp17Controls@TControl  +
test eax eax +
jz loc_47BA6A  +
call @Controls@TControl@BringToFront$qqrv  +
mov eax [ebp-8] +
mov dword ptr [eax+0Ch] 1 +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
xor ecx ecx +
mov [edx+0Ch] ecx +
cmp byte ptr [eax+1A7h] 0 +
jz locret_47BAA1  +
cmp dword ptr [eax+17Ch] 0 +
jz locret_47BAA1  +
mov edx [edx+8] +
mov eax [eax+17Ch] +
mov ecx [eax] +
call dword ptr [ecx+28h]  +
retn   +
***
add esp 0FFFFFFF8h +
push ebx  +
push esi  +
mov ebx edx +
mov [ebp+var_4] eax +
mov eax [ebp+var_4] +
mov edx [eax] +
call dword ptr [edx+58h]  +
mov esi eax +
mov eax [ebp+var_4] +
call @System@TObject@ClassType$qqrv  +
cmp esi eax +
jnz loc_47BB15  +
mov eax [ebp+var_4] +
mov al [eax+57h] +
mov [ebp+var_5] al +
xor eax eax +
push ebp  +
push offset loc_47BB0E  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov eax [ebx+8] +
lea ecx [eax+44h] +
xor edx edx +
mov eax [ebp+var_4] +
mov si 0FFCCh +
call @System@@CallDynaInst$qqrv  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_47BB1F  +
cmp [ebp+var_5] 0 +
jz locret_47BB0D  +
mov eax [ebp+var_4] +
call @Controls@TControl@BringToFront$qqrv  +
retn   +
jmp unknown_libname_539  +
jmp loc_47BAFF  +
mov edx ebx +
mov eax [ebp+var_4] +
call @Controls@TControl@CMFloat$qqrr17Controls@TCMFloat  +
pop esi  +
pop ebx  +
pop ecx  +
pop ecx  +
pop ebp  +
retn   +
***
mov [esp+1+var_1] cl +
push edi  +
push ebp  +
push ecx  +
mov edi edx +
mov esi eax +
mov bl 1 +
mov eax esi +
call @Forms@GetParentForm$qqrp17Controls@TControl  +
mov ebp eax +
test ebp ebp +
jz loc_47BB82  +
cmp esi ebp +
jz loc_47BB82  +
cmp byte ptr [ebp+22Dh] 0 +
jz loc_47BB82  +
mov edx edi +
mov eax ebp +
call @Controls@TWinControl@DoKeyDown$qqrr15Messages@TWMKey  +
test al al +
jnz loc_47BBAD  +
mov eax [edi+8] +
call @KeyDataToShiftState$qqri  +
mov [esp+1+var_1] al +
test byte ptr [esi+51h] 10h +
jnz loc_47BBAB  +
lea edx [edi+4] +
mov cl [esp+1+var_1] +
mov eax esi +
mov si 0FFBCh +
call @System@@CallDynaInst$qqrv  +
cmp word ptr [edi+4] 0 +
jz loc_47BBAD  +
xor ebx ebx +
mov eax ebx +
pop edx  +
pop ebp  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov esi edx +
mov ebx eax +
mov edx esi +
mov eax ebx +
call @Controls@TWinControl@DoKeyDown$qqrr15Messages@TWMKey  +
test al al +
jnz loc_47BBD4  +
mov edx esi +
mov eax ebx +
mov ecx [eax] +
call dword ptr [ecx-10h]  +
pop esi  +
pop ebx  +
retn   +
***
mov esi edx +
mov ebx eax +
mov edx esi +
mov eax ebx +
call @Controls@TWinControl@DoKeyDown$qqrr15Messages@TWMKey  +
test al al +
jnz loc_47BBF4  +
mov edx esi +
mov eax ebx +
mov ecx [eax] +
call dword ptr [ecx-10h]  +
pop esi  +
pop ebx  +
retn   +
***
mov [esp+1+var_1] cl +
push edi  +
push ebp  +
push ecx  +
mov edi edx +
mov esi eax +
mov bl 1 +
mov eax esi +
call @Forms@GetParentForm$qqrp17Controls@TControl  +
mov ebp eax +
test ebp ebp +
jz loc_47BC52  +
cmp esi ebp +
jz loc_47BC52  +
cmp byte ptr [ebp+22Dh] 0 +
jz loc_47BC52  +
mov edx edi +
mov eax ebp +
call @Controls@TWinControl@DoKeyUp$qqrr15Messages@TWMKey  +
test al al +
jnz loc_47BC7D  +
mov eax [edi+8] +
call @KeyDataToShiftState$qqri  +
mov [esp+1+var_1] al +
test byte ptr [esi+51h] 10h +
jnz loc_47BC7B  +
lea edx [edi+4] +
mov cl [esp+1+var_1] +
mov eax esi +
mov si 0FFBBh +
call @System@@CallDynaInst$qqrv  +
cmp word ptr [edi+4] 0 +
jz loc_47BC7D  +
xor ebx ebx +
mov eax ebx +
pop edx  +
pop ebp  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov esi edx +
mov ebx eax +
mov edx esi +
mov eax ebx +
call @Controls@TWinControl@DoKeyUp$qqrr15Messages@TWMKey  +
test al al +
jnz loc_47BCA4  +
mov edx esi +
mov eax ebx +
mov ecx [eax] +
call dword ptr [ecx-10h]  +
pop esi  +
pop ebx  +
retn   +
***
mov esi edx +
mov ebx eax +
mov edx esi +
mov eax ebx +
call @Controls@TWinControl@DoKeyUp$qqrr15Messages@TWMKey  +
test al al +
jnz loc_47BCC4  +
mov edx esi +
mov eax ebx +
mov ecx [eax] +
call dword ptr [ecx-10h]  +
pop esi  +
pop ebx  +
retn   +
***
jz loc_47BCE5  +
mov ecx edx +
mov ebx eax +
mov edx eax +
mov eax [ebx+1E4h] +
call dword ptr [ebx+1E0h]  +
pop ebx  +
retn   +
***
push edi  +
mov esi edx +
mov ebx eax +
mov edx esi +
mov eax ebx +
call @Controls@TWinControl@DoKeyPress$qqrr15Messages@TWMKey  +
test al al +
jnz loc_47BD68  +
mov edx esi +
mov eax ebx +
mov ecx [eax] +
call dword ptr [ecx-10h]  +
pop esi  +
pop ebx  +
retn   +
***
add esp 0FFFFFFF8h +
push ebx  +
push esi  +
push edi  +
mov [ebp+var_4] eax +
mov [ebp+var_5] 0 +
mov eax [ebp+var_4] +
cmp byte ptr [eax+1A6h] 0 +
jz loc_47BE0F  +
mov eax [ebp+var_4] +
call @Controls@TWinControl@GetControlCount$qqrv  +
mov esi eax +
dec esi  +
test esi esi +
jl loc_47BE0F  +
inc esi  +
xor edi edi +
mov edx edi +
mov eax [ebp+var_4] +
call @Controls@TWinControl@GetControl$qqri  +
mov ebx eax +
cmp byte ptr [ebx+57h] 0 +
jz loc_47BE0B  +
mov eax ebx +
mov edx [eax] +
call dword ptr [edx+50h]  +
test al al +
jz loc_47BE0B  +
test byte ptr [ebx+52h] 1 +
jz loc_47BDE4  +
mov eax [ebp+arg_0] +
mov eax [eax-4] +
mov eax [eax+8] +
push eax  +
mov eax [ebp+arg_0] +
mov ecx [eax-4] +
mov ecx [ecx+4] +
mov edx 112h +
mov eax ebx +
call @Controls@TControl@Perform$qqruiii  +
test eax eax +
jnz loc_47BE05  +
mov eax ebx +
mov edx ds:off_472320 +
call @System@@IsClass$qqrp14System@TObjectp17System@TMetaClass  +
test al al +
jz loc_47BE0B  +
mov eax [ebp+arg_0] +
push eax  +
mov eax ebx +
call @Controls@_16927  +
pop ecx  +
test al al +
jz loc_47BE0B  +
mov [ebp+var_5] 1 +
jmp loc_47BE0F  +
inc edi  +
dec esi  +
jnz loc_47BD9E  +
mov al [ebp+var_5] +
pop edi  +
pop esi  +
pop ebx  +
pop ecx  +
pop ecx  +
pop ebp  +
retn   +
***
push ecx  +
push ebx  +
push esi  +
mov [ebp+var_4] edx +
mov ebx eax +
mov eax [ebp+var_4] +
mov eax [eax+4] +
and eax 0FFF0h +
cmp eax 0F100h +
jnz loc_47BE95  +
mov eax [ebp+var_4] +
cmp word ptr [eax+8] 20h +
jz loc_47BE95  +
mov eax [ebp+var_4] +
cmp word ptr [eax+8] 2Dh +
jz loc_47BE95  +
mov eax [ebx+180h] +
push eax  +
call IsIconic  +
test eax eax +
jnz loc_47BE95  +
call GetCapture  +
test eax eax +
jnz loc_47BE95  +
mov eax off_4EA6C8 +
mov eax [eax] +
cmp ebx [eax+44h] +
jz loc_47BE95  +
mov eax ebx +
call @Forms@GetParentForm$qqrp17Controls@TControl  +
mov esi eax +
test esi esi +
jz loc_47BE95  +
mov eax [ebp+var_4] +
push eax  +
xor ecx ecx +
mov edx 0B017h +
mov eax esi +
call @Controls@TControl@Perform$qqruiii  +
test eax eax +
jnz loc_47BEBE  +
mov eax [ebp+var_4] +
mov eax [eax+4] +
and eax 0FFF0h +
cmp eax 0F100h +
jnz loc_47BEB4  +
push ebp  +
mov eax ebx +
call @Controls@_16927  +
pop ecx  +
test al al +
jnz loc_47BEBE  +
mov edx [ebp+var_4] +
mov eax ebx +
mov ecx [eax] +
call dword ptr [ecx-10h]  +
pop esi  +
pop ebx  +
pop ecx  +
pop ebp  +
retn   +
***
mov ebx edx +
push edi  +
mov ebx edx +
mov edi eax +
mov si [ebx+4] +
cmp si 1 +
jz loc_47BEFB  +
cmp si 2 +
jnz loc_47BF09  +
mov edx ebx +
mov eax [ebx+8] +
call @Controls@_16864  +
test al al +
jnz loc_47BF12  +
mov edx ebx +
mov eax edi +
mov ecx [eax] +
call dword ptr [ecx-10h]  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov ebx edx +
mov eax esi +
mov eax esi +
mov ecx [eax] +
call dword ptr [ecx-10h]  +
xor eax eax +
mov [esi+180h] eax +
mov byte ptr [esi+1A6h] 0 +
pop esi  +
retn   +
***
test byte ptr [esi+1Ch] 10h +
jz loc_47BFA0  +
cmp dword ptr [esi+30h] 0 +
jz loc_47BFA0  +
mov dword ptr [edx+0Ch] 1 +
pop esi  +
retn   +
mov eax esi +
mov ecx [eax] +
call dword ptr [ecx-10h]  +
pop esi  +
retn   +
***
push edi  +
push ebp  +
push ecx  +
mov [esp+1+var_1] dl +
mov ebp eax +
mov dl [esp+1+var_1] +
mov eax ebp +
call @Controls@TControl@PaletteChanged$qqro  +
mov ebx eax +
cmp byte ptr [ebp+57h] 0 +
jz loc_47BFF9  +
mov eax ebp +
call @Controls@TWinControl@GetControlCount$qqrv  +
mov edi eax +
dec edi  +
cmp edi 0 +
jl loc_47BFF9  +
test [esp+1+var_1] bl +
jnz loc_47BFF9  +
mov edx edi +
mov eax ebp +
call @Controls@TWinControl@GetControl$qqri  +
mov dl [esp+1+var_1] +
mov si 0FFD1h +
call @System@@CallDynaInst$qqrv  +
or bl al +
dec edi  +
cmp edi 0FFFFFFFFh +
jnz loc_47BFD7  +
mov eax ebx +
pop edx  +
pop ebp  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
mov edi edx +
mov ebx eax +
or word ptr [ebx+54h] 4 +
mov dl 1 +
mov eax ebx +
mov si 0FFD1h +
call @System@@CallDynaInst$qqrv  +
and eax 7Fh +
mov [edi+0Ch] eax +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
mov edi edx +
mov ebx eax +
xor edx edx +
mov eax ebx +
mov si 0FFD1h +
call @System@@CallDynaInst$qqrv  +
and eax 7Fh +
mov [edi+0Ch] eax +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov eax esi +
mov ecx [eax] +
call dword ptr [ecx-10h]  +
mov dx 0B023h +
mov eax esi +
call @Controls@TWinControl@NotifyControls$qqrus  +
pop esi  +
retn   +
***
mov esi edx +
mov ebx eax +
mov edx esi +
mov eax ebx +
call @Controls@TControl@CMBiDiModeChanged$qqrr17Messages@TMessage  +
mov eax off_4EA8CC +
cmp byte ptr [eax+0Dh] 0 +
jz loc_47C087  +
cmp dword ptr [esi+4] 0 +
jnz loc_47C087  +
mov eax ebx +
call @Controls@TWinControl@RecreateWnd$qqrv  +
mov dx 0B03Dh +
mov eax ebx +
call @Controls@TWinControl@NotifyControls$qqrus  +
pop esi  +
pop ebx  +
retn   +
***
mov ebx eax +
mov eax off_4EA8CC +
cmp byte ptr [eax+0Dh] 0 +
jz loc_47C0FC  +
mov eax ebx +
call @Controls@TControl@UseRightToLeftReading$qqrv_0  +
test al al +
jz loc_47C0D8  +
mov eax off_4EA6C8 +
mov eax [eax] +
cmp dword ptr [eax+38h] 0 +
jz loc_47C0FC  +
push 1  +
mov eax off_4EA6C8 +
mov eax [eax] +
mov eax [eax+38h] +
call unknown_libname_550  +
push eax  +
call LoadKeyboardLayoutA  +
jmp loc_47C0FC  +
mov eax off_4EA6C8 +
mov eax [eax] +
cmp dword ptr [eax+3Ch] 0 +
jz loc_47C0FC  +
push 1  +
mov eax off_4EA6C8 +
mov eax [eax] +
mov eax [eax+3Ch] +
call unknown_libname_550  +
push eax  +
call LoadKeyboardLayoutA  +
mov eax ebx +
mov si 0FFC2h +
call @System@@CallDynaInst$qqrv  +
pop esi  +
pop ebx  +
retn   +
***
call @System@@CallDynaInst$qqrv  +
mov esi edx +
mov ebx eax +
mov edx esi +
mov eax ebx +
call @Controls@TWinControl@IsControlMouseMsg$qqrr17Messages@TWMMouse  +
test al al +
jnz loc_47C134  +
mov edx esi +
mov eax ebx +
call sub_478250  +
pop esi  +
pop ebx  +
retn   +
***
test ecx ecx +
jz loc_47C148  +
mov ebx ecx +
mov eax [ebx+3Ch] +
call dword ptr [ebx+38h]  +
pop ebx  +
retn   +
***
test ecx ecx +
jz loc_47C15C  +
mov ebx ecx +
mov eax [ebx+3Ch] +
call dword ptr [ebx+38h]  +
pop ebx  +
retn   +
***
retn   +
***
retn   +
***
retn   +
***
cmp byte ptr [ebx+57h] 0 +
jnz loc_47C190  +
cmp dword ptr [ebx+30h] 0 +
jz loc_47C190  +
xor edx edx +
mov eax ebx +
call @Controls@TWinControl@RemoveFocus$qqro  +
test byte ptr [ebx+1Ch] 10h +
jz loc_47C19C  +
test byte ptr [ebx+51h] 4 +
jz loc_47C1A3  +
mov eax ebx +
call @Controls@TWinControl@UpdateControlState$qqrv  +
pop ebx  +
retn   +
***
xor edx edx +
mov eax ebx +
mov eax ebx +
call sub_4780C4  +
mov edx [ebx+70h] +
mov eax [ebx+170h] +
call @Graphics@TBrush@SetColor$qqr15Graphics@TColor  +
mov dx 0B009h +
mov eax ebx +
call @Controls@TWinControl@NotifyControls$qqrus  +
pop ebx  +
retn   +
***
mov eax ebx +
call sub_4780BC  +
mov eax ebx +
call @Controls@TWinControl@HandleAllocated$qqrv  +
test al al +
jz loc_47C26D  +
push 0  +
mov eax [ebx+68h] +
call @Graphics@TFont@GetHandle$qqrv  +
mov ecx eax +
mov edx 30h +
mov eax ebx +
call @Controls@TControl@Perform$qqruiii  +
mov dx 0B008h +
mov eax ebx +
call @Controls@TWinControl@NotifyControls$qqrus  +
pop ebx  +
retn   +
***
mov ebx eax +
call GetCapture  +
test eax eax +
jnz loc_47C2B5  +
push esp  +
call GetCursorPos  +
mov eax esp +
xor edx edx +
call @Controls@FindDragTarget$qqrrx14Windows@TPointo  +
cmp ebx eax +
jnz loc_47C2B5  +
push 1  +
mov eax ebx +
call @Controls@TWinControl@GetHandle$qqrv  +
mov ecx eax +
mov edx 20h +
mov eax ebx +
call @Controls@TControl@Perform$qqruiii  +
pop ecx  +
pop edx  +
pop ebx  +
retn   +
***
mov eax esi +
mov ecx [eax] +
call dword ptr [ecx-10h]  +
mov eax esi +
call @Controls@TWinControl@HandleAllocated$qqrv  +
test al al +
jz loc_47C2F7  +
push 37h  +
push 0  +
push 0  +
push 0  +
push 0  +
push 0  +
mov eax esi +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call SetWindowPos  +
cmp byte ptr [esi+57h] 0 +
jz loc_47C2F7  +
mov eax esi +
mov edx [eax] +
call dword ptr [edx+7Ch]  +
pop esi  +
retn   +
***
test byte ptr [ebx+50h] 10h +
jz loc_47C32D  +
cmp dword ptr [ebx+30h] 0 +
jz loc_47C32D  +
mov eax ebx +
call @Controls@TWinControl@HandleAllocated$qqrv  +
test al al +
jz loc_47C32D  +
mov eax [ebx+180h] +
push eax  +
call IsWindowVisible  +
test eax eax +
jz loc_47C32D  +
mov eax ebx +
call @Controls@TWinControl@InvalidateFrame$qqrv  +
mov dx 0B011h +
mov eax ebx +
call @Controls@TWinControl@NotifyControls$qqrus  +
pop ebx  +
retn   +
***
cmp byte ptr [ebx+1A9h] 0 +
jz loc_47C377  +
cmp dword ptr [edx+4] 0 +
jz loc_47C360  +
cmp dword ptr [edx+8] 0 +
setnz al  +
mov edx eax +
mov eax ebx +
call @Controls@TWinControl@SetCtl3D$qqro  +
jmp loc_47C370  +
mov eax [ebx+30h] +
mov dl [eax+1A5h] +
mov eax ebx +
call @Controls@TWinControl@SetCtl3D$qqro  +
mov byte ptr [ebx+1A9h] 1 +
pop ebx  +
retn   +
***
retn   +
***
retn   +
***
retn   +
***
retn   +
***
push edi  +
test ecx ecx +
jz loc_47C408  +
mov ebx ecx +
mov eax [ebx+3Ch] +
call dword ptr [ebx+38h]  +
pop ebx  +
retn   +
***
mov esi edx +
mov ebx eax +
mov edx esi +
mov eax ebx +
call @Controls@TControl@CMSysFontChanged$qqrr17Messages@TMessage  +
mov edx esi +
mov eax ebx +
call @Controls@TWinControl@Broadcast$qqrpv  +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
push edi  +
mov esi edx +
mov ebx eax +
mov dword ptr [esi+0Ch] 1 +
mov edx esi +
mov eax ebx +
call @Controls@TWinControl@IsMenuKey$qqrr15Messages@TWMKey  +
test al al +
jnz loc_47C58E  +
test byte ptr [ebx+1Ch] 10h +
jnz loc_47C589  +
push ebx  +
movzx ecx word ptr [esi+4] +
mov edx 0B02Eh +
mov eax ebx +
call @Controls@TControl@Perform$qqruiii  +
test eax eax +
jnz loc_47C58E  +
xor edi edi +
movzx eax word ptr [esi+4] +
cmp eax 1Bh +
jg loc_47C51C  +
jz loc_47C539  +
sub eax 3 +
jz loc_47C539  +
sub eax 6 +
jz loc_47C52B  +
sub eax 4 +
jz loc_47C539  +
jmp loc_47C53E  +
add eax 0FFFFFFDBh +
sub eax 4 +
jb loc_47C532  +
sub eax 2 +
jz loc_47C539  +
jmp loc_47C53E  +
mov edi 2 +
jmp loc_47C53E  +
mov edi 1 +
jmp loc_47C53E  +
mov edi 4 +
test edi edi +
jz loc_47C589  +
push 0  +
movzx ecx word ptr [esi+4] +
mov edx 0B01Eh +
mov eax ebx +
call @Controls@TControl@Perform$qqruiii  +
test eax eax +
jnz loc_47C589  +
push 0  +
xor ecx ecx +
mov edx 87h +
mov eax ebx +
call @Controls@TControl@Perform$qqruiii  +
test edi eax +
jnz loc_47C589  +
mov eax [esi+8] +
push eax  +
mov eax ebx +
call @Forms@GetParentForm$qqrp17Controls@TControl  +
movzx ecx word ptr [esi+4] +
mov edx 0B005h +
call @Controls@TControl@Perform$qqruiii  +
test eax eax +
jnz loc_47C58E  +
xor eax eax +
mov [esi+0Ch] eax +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
mov esi edx +
mov ebx eax +
test byte ptr [ebx+1Ch] 10h +
jnz loc_47C5E1  +
mov di [esi+4] +
movzx eax di +
cmp eax 1Bh +
jg loc_47C5C0  +
jz loc_47C5CD  +
sub eax 3 +
jz loc_47C5CD  +
sub eax 6 +
jz loc_47C5CD  +
sub eax 4 +
jz loc_47C5CD  +
jmp loc_47C5E1  +
add eax 0FFFFFFDBh +
sub eax 4 +
jb loc_47C5CD  +
sub eax 2 +
jnz loc_47C5E1  +
push 0  +
movzx ecx di +
mov edx 0B01Eh +
mov eax ebx +
call @Controls@TControl@Perform$qqruiii  +
mov [esi+0Ch] eax +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov esi edx +
mov esi edx +
mov ebx eax +
mov dword ptr [esi+0Ch] 1 +
mov edx esi +
mov eax ebx +
call @Controls@TWinControl@IsMenuKey$qqrr15Messages@TWMKey  +
test al al +
jnz loc_47C68B  +
test byte ptr [ebx+1Ch] 10h +
jnz loc_47C686  +
push ebx  +
movzx ecx word ptr [esi+4] +
mov edx 0B02Eh +
mov eax ebx +
call @Controls@TControl@Perform$qqruiii  +
test eax eax +
jnz loc_47C68B  +
mov eax [esi+8] +
push eax  +
mov eax ebx +
call @Forms@GetParentForm$qqrp17Controls@TControl  +
movzx ecx word ptr [esi+4] +
mov edx 0B005h +
call @Controls@TControl@Perform$qqruiii  +
test eax eax +
jnz loc_47C68B  +
xor eax eax +
mov [esi+0Ch] eax +
pop esi  +
pop ebx  +
retn   +
***
mov esi edx +
mov ebx eax +
test byte ptr [ebx+1Ch] 10h +
jnz loc_47C6BF  +
cmp word ptr [esi+4] 20h +
jz loc_47C6BF  +
mov eax [esi+8] +
push eax  +
mov eax ebx +
call @Forms@GetParentForm$qqrp17Controls@TControl  +
movzx ecx word ptr [esi+4] +
mov edx 0B006h +
call @Controls@TControl@Perform$qqruiii  +
mov [esi+0Ch] eax +
pop esi  +
pop ebx  +
retn   +
***
add esp 0FFFFFFC4h +
push ebx  +
push esi  +
push edi  +
mov edi ecx +
mov esi edx +
mov ebx eax +
cmp esi [ebx+40h] +
jnz loc_47C6F1  +
cmp edi [ebx+44h] +
jnz loc_47C6F1  +
mov eax [ebp+arg_4] +
cmp eax [ebx+48h] +
jnz loc_47C6F1  +
mov eax [ebp+cy] +
cmp eax [ebx+4Ch] +
jz loc_47C792  +
mov eax ebx +
call @Controls@TWinControl@HandleAllocated$qqrv  +
test al al +
jz loc_47C728  +
mov eax [ebx+180h] +
push eax  +
call IsIconic  +
test eax eax +
jnz loc_47C728  +
push 14h  +
mov eax [ebp+cy] +
push eax  +
mov eax [ebp+arg_4] +
push eax  +
push edi  +
push esi  +
push 0  +
mov eax [ebx+180h] +
push eax  +
call SetWindowPos  +
jmp loc_47C780  +
mov [ebx+40h] esi +
mov [ebx+44h] edi +
mov eax [ebp+arg_4] +
mov [ebx+48h] eax +
mov eax [ebp+cy] +
mov [ebx+4Ch] eax +
mov eax ebx +
call @Controls@TWinControl@HandleAllocated$qqrv  +
test al al +
jz loc_47C780  +
mov [ebp+wndpl.length] 2Ch +
lea eax [ebp+wndpl] +
push eax  +
mov eax [ebx+180h] +
push eax  +
call GetWindowPlacement  +
lea edx [ebp+var_3C] +
mov eax ebx +
call @Controls@TControl@GetBoundsRect$qqrv  +
lea esi [ebp+var_3C] +
lea edi [ebp+wndpl.rcNormalPosition] +
movs   +
movs   +
movs   +
movs   +
lea eax [ebp+wndpl] +
push eax  +
mov eax [ebx+180h] +
push eax  +
call SetWindowPlacement  +
mov eax ebx +
call @Controls@TControl@UpdateAnchorRules$qqrv  +
mov eax ebx +
mov si 0FFD0h +
call @System@@CallDynaInst$qqrv  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 8  +
***
push edi  +
push ebp  +
add esp 0FFFFFFF8h +
mov [esp+8+var_4] ecx +
mov [esp+8+var_8] edx +
mov ebp eax +
mov eax ebp +
call @Controls@TWinControl@GetControlCount$qqrv  +
mov ebx eax +
dec ebx  +
test ebx ebx +
jl loc_47C7DA  +
inc ebx  +
xor edi edi +
mov edx edi +
mov eax ebp +
call @Controls@TWinControl@GetControl$qqri  +
mov ecx [esp+8+var_4] +
mov edx [esp+8+var_8] +
mov si 0FFECh +
call @System@@CallDynaInst$qqrv  +
inc edi  +
dec ebx  +
jnz loc_47C7BD  +
pop ecx  +
pop edx  +
pop ebp  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push ecx  +
push ebx  +
push esi  +
mov esi ecx +
mov ebx edx +
mov [ebp+var_4] eax +
mov eax [ebp+var_4] +
call @Controls@TWinControl@DisableAlign$qqrv  +
xor eax eax +
push ebp  +
push offset loc_47C882  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov ecx esi +
mov edx ebx +
mov eax [ebp+var_4] +
call @Controls@TWinControl@ScaleControls$qqrii  +
cmp esi ebx +
jz loc_47C860  +
mov eax [ebp+var_4] +
test byte ptr [eax+1Ch] 2 +
jz loc_47C860  +
mov eax [ebp+var_4] +
test byte ptr [eax+98h] 20h +
jz loc_47C860  +
push esi  +
push ebx  +
mov eax [ebp+var_4] +
mov eax [eax+1FAh] +
push eax  +
call MulDiv  +
mov edx [ebp+var_4] +
mov [edx+1FAh] eax +
push esi  +
push ebx  +
mov eax [ebp+var_4] +
mov eax [eax+1FEh] +
push eax  +
call MulDiv  +
mov edx [ebp+var_4] +
mov [edx+1FEh] eax +
mov ecx esi +
mov edx ebx +
mov eax [ebp+var_4] +
call @Controls@TControl@ChangeScale$qqrii  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_47C889  +
mov eax [ebp+var_4] +
call @Controls@TWinControl@EnableAlign$qqrv  +
retn   +
jmp unknown_libname_539  +
jmp loc_47C879  +
pop esi  +
pop ebx  +
pop ecx  +
pop ebp  +
retn   +
***
push edi  +
test esi esi +
jz loc_47C97C  +
mov edx eax +
mov eax esi +
mov ecx [eax] +
call dword ptr [ecx+0BCh]  +
pop esi  +
retn   +
***
push edi  +
push ebp  +
mov esi edx +
mov ebx eax +
mov eax [ebx+30h] +
test eax eax +
jz loc_47CA52  +
mov edx [eax+198h] +
test edx edx +
jz loc_47C9A0  +
sub esi [edx+8] +
mov eax [eax+19Ch] +
mov edx ebx +
call unknown_libname_419  +
mov edi eax +
test edi edi +
jl loc_47C9EB  +
mov eax [ebx+30h] +
mov edx [eax+19Ch] +
mov eax [edx+8] +
test esi esi +
jge loc_47C9C5  +
xor esi esi +
cmp eax esi +
jg loc_47C9CC  +
mov esi eax +
dec esi  +
cmp edi esi +
jz loc_47C9EB  +
mov eax edx +
mov edx edi +
call @Classes@TList@Delete$qqri  +
mov eax [ebx+30h] +
mov eax [eax+19Ch] +
mov ecx ebx +
mov edx esi +
call @Classes@TList@Insert$qqripv  +
cmp dword ptr [ebx+180h] 0 +
jz loc_47CA52  +
test esi esi +
jnz loc_47C9FF  +
mov eax 1 +
jmp loc_47CA3B  +
mov eax [ebx+30h] +
mov ebp [eax+19Ch] +
mov eax [ebp+8] +
dec eax  +
cmp esi eax +
jnz loc_47CA14  +
xor eax eax +
jmp loc_47CA3B  +
cmp edi esi +
jge loc_47CA29  +
lea edx [esi+1] +
mov eax ebp +
call @Classes@TList@Get$qqri  +
call @Controls@TWinControl@GetHandle$qqrv  +
jmp loc_47CA3B  +
cmp edi esi +
jle loc_47CA52  +
mov eax ebp +
mov edx esi +
call @Classes@TList@Get$qqri  +
call @Controls@TWinControl@GetHandle$qqrv  +
push 3  +
push 0  +
push 0  +
push 0  +
push 0  +
push eax  +
mov eax [ebx+180h] +
push eax  +
call SetWindowPos  +
pop ebp  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov ebx [eax+30h] +
test ebx ebx +
jz loc_47CA8E  +
test dl dl +
jz loc_47CA71  +
mov edx [ebx+19Ch] +
mov ecx [edx+8] +
dec ecx  +
jmp loc_47CA73  +
xor ecx ecx +
xor edx edx +
mov esi [ebx+198h] +
test esi esi +
jz loc_47CA82  +
mov edx [esi+8] +
add ecx edx +
mov edx ecx +
call @Controls@TWinControl@SetZOrderPosition$qqri  +
pop esi  +
pop ebx  +
retn   +
mov ecx [eax+180h] +
test ecx ecx +
jz loc_47CAB4  +
push 3  +
push 0  +
push 0  +
push 0  +
push 0  +
and edx 7Fh +
movzx edx word_4E679C[edx*2] +
push edx  +
push ecx  +
call SetWindowPos  +
pop esi  +
pop ebx  +
retn   +
***
mov esi edx +
mov ebx eax +
test byte ptr [ebx+1Ch] 10h +
jz loc_47CAD7  +
push 12h  +
push 0  +
mov eax ebx +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call GetDCEx  +
jmp loc_47CAE4  +
mov eax ebx +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call GetDC  +
test eax eax +
jnz loc_47CAFF  +
mov ecx off_4EA6F4 +
mov dl 1 +
mov eax ds:off_49A51C +
call @Sysutils@Exception@$bctr$qqrp20System@TResStringRec  +
call @System@@RaiseExcept$qqrv  +
mov edx [ebx+180h] +
mov [esi] edx +
pop esi  +
pop ebx  +
retn   +
***
mov edx 0B034h +
call @Controls@TControl@Perform$qqruiii  +
retn   +
***
mov esi edx +
mov ebx eax +
mov eax ebx +
call @Controls@TWinControl@HandleAllocated$qqrv  +
test al al +
jz loc_47CB67  +
mov eax [ebx+30h] +
test eax eax +
jz loc_47CB45  +
push 0  +
mov ecx 1 +
mov edx 0B034h +
call @Controls@TControl@Perform$qqruiii  +
cmp dword ptr [esi+4] 0 +
jnz loc_47CB67  +
test byte ptr [ebx+50h] 40h +
setnz al  +
xor al 1 +
neg al  +
sbb eax eax +
push eax  +
push 0  +
mov eax [ebx+180h] +
push eax  +
call InvalidateRect  +
pop esi  +
pop ebx  +
retn   +
***
mov eax ebx +
mov eax ebx +
mov edx [eax] +
call dword ptr [edx+7Ch]  +
mov eax ebx +
mov edx [eax] +
call dword ptr [edx+88h]  +
pop ebx  +
retn   +
***
mov ebx eax +
push ecx  +
mov ebx eax +
mov [esp+1+var_1] 0 +
mov eax ebx +
call @Forms@GetParentForm$qqrp17Controls@TControl  +
mov esi eax +
test esi esi +
jz loc_47CC0E  +
cmp esi ebx +
jz loc_47CC0A  +
cmp byte ptr [ebx+57h] 0 +
jz loc_47CC0E  +
mov eax ebx +
mov edx [eax] +
call dword ptr [edx+50h]  +
test al al +
jz loc_47CC0E  +
mov ebx [ebx+30h] +
cmp esi ebx +
jnz loc_47CBF2  +
mov [esp+1+var_1] 1 +
mov al [esp+1+var_1] +
pop edx  +
pop esi  +
pop ebx  +
retn   +
***
mov eax ebx +
cmp dword ptr [ebx+180h] 0 +
jz loc_47CC69  +
call GetFocus  +
cmp eax [ebx+180h] +
jz loc_47CC6D  +
xor eax eax +
pop ebx  +
retn   +
mov al 1 +
pop ebx  +
retn   +
***
cmp dword ptr [ebx+180h] 0 +
mov eax ebx +
call @Controls@TWinControl@HandleNeeded$qqrv  +
mov eax [ebx+180h] +
pop ebx  +
retn   +
***
push edi  +
push ebp  +
mov ebx edx +
mov edi eax +
push 0  +
push ebx  +
xor ecx ecx +
mov edx 7FFFFFFFh +
mov eax 7FFFFFFFh +
call sub_49B708  +
mov eax edi +
call @Controls@TWinControl@GetControlCount$qqrv  +
mov esi eax +
dec esi  +
test esi esi +
jl loc_47CD3A  +
inc esi  +
xor ebp ebp +
mov edx ebp +
mov eax edi +
call @Controls@TWinControl@GetControl$qqri  +
cmp byte ptr [eax+57h] 0 +
jnz loc_47CCF4  +
test byte ptr [eax+1Ch] 10h +
jz loc_47CD36  +
test byte ptr [eax+51h] 4 +
jnz loc_47CD36  +
mov edx [ebx] +
cmp edx [eax+40h] +
jle loc_47CD00  +
mov edx [eax+40h] +
mov [ebx] edx +
mov edx [ebx+4] +
cmp edx [eax+44h] +
jle loc_47CD0E  +
mov edx [eax+44h] +
mov [ebx+4] edx +
mov edx [eax+40h] +
add edx [eax+48h] +
cmp edx [ebx+8] +
jle loc_47CD22  +
mov edx [eax+40h] +
add edx [eax+48h] +
mov [ebx+8] edx +
mov edx [eax+44h] +
add edx [eax+4Ch] +
cmp edx [ebx+0Ch] +
jle loc_47CD36  +
mov edx [eax+44h] +
add edx [eax+4Ch] +
mov [ebx+0Ch] edx +
inc ebp  +
dec esi  +
jnz loc_47CCD9  +
pop ebp  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov ebx edx +
mov esi edx +
mov ebx eax +
push esi  +
mov eax ebx +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call GetClientRect  +
pop esi  +
pop ebx  +
retn   +
***
mov ebx eax +
cmp edx [eax+16Ch] +
jz locret_47CDD4  +
mov [eax+16Ch] edx +
push 0  +
xor ecx ecx +
mov edx 0B03Bh +
call @Controls@TControl@Perform$qqruiii  +
retn   +
***
cmp dl [eax+1A5h] +
mov al [eax+1A9h] +
xor al 1 +
retn   +
***
cmp dl [eax+1A9h] +
jz locret_47CE30  +
mov [eax+1A9h] dl +
cmp dword ptr [eax+30h] 0 +
jz locret_47CE30  +
test byte ptr [eax+1Ch] 2 +
jnz locret_47CE30  +
push 0  +
xor ecx ecx +
mov edx 0B011h +
call @Controls@TControl@Perform$qqruiii  +
retn   +
***
mov ebx eax +
mov esi [ebx+30h] +
test esi esi +
jz loc_47CE4F  +
mov eax [esi+194h] +
mov edx ebx +
call unknown_libname_419  +
pop esi  +
pop ebx  +
retn   +
or eax 0FFFFFFFFh +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
push ebp  +
mov esi edx +
mov ebx eax +
mov eax ebx +
call @Controls@TWinControl@GetTabOrder$qqrv  +
movsx eax ax +
test eax eax +
jl loc_47CEAC  +
mov edx [ebx+30h] +
mov ebp [edx+194h] +
mov edx [ebp+8] +
test si si +
jge loc_47CE81  +
xor esi esi +
movsx ecx si +
cmp edx ecx +
jg loc_47CE8B  +
mov esi edx +
dec esi  +
movsx edi si +
cmp eax edi +
jz loc_47CEAC  +
mov edx ebp +
xchg eax edx +
call @Classes@TList@Delete$qqri  +
mov edx edi +
mov eax [ebx+30h] +
mov eax [eax+194h] +
mov ecx ebx +
call @Classes@TList@Insert$qqripv  +
pop ebp  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
test byte ptr [eax+54h] 8 +
jz loc_47CEC4  +
movsx edx dx +
mov [eax+1A0h] edx +
retn   +
call @Controls@TWinControl@UpdateTabOrder$qqrs  +
retn   +
***
mov ebx edx +
mov esi eax +
cmp bl [esi+1A4h] +
jz loc_47CF26  +
mov [esi+1A4h] bl +
mov eax esi +
call @Controls@TWinControl@HandleAllocated$qqrv  +
test al al +
jz loc_47CF16  +
push 0FFFFFFF0h  +
mov eax [esi+180h] +
push eax  +
call GetWindowLongA  +
and eax 0FFFEFFFFh +
test bl bl +
jz loc_47CF07  +
or eax 10000h +
push eax  +
push 0FFFFFFF0h  +
mov eax [esi+180h] +
push eax  +
call SetWindowLongA  +
push 0  +
xor ecx ecx +
mov edx 0B028h +
mov eax esi +
call @Controls@TControl@Perform$qqruiii  +
pop esi  +
pop ebx  +
retn   +
***
push 0  +
cmp dword ptr [eax+180h] 0 +
setnz al  +
retn   +
***
push edi  +
add esp 0FFFFFFC4h +
mov ebx eax +
mov eax [ebx+180h] +
push eax  +
call IsIconic  +
test eax eax +
jz loc_47CFE5  +
mov [esp+3Ch+wndpl.length] 2Ch +
lea eax [esp+3Ch+wndpl] +
push eax  +
mov eax [ebx+180h] +
push eax  +
call GetWindowPlacement  +
lea esi [esp+3Ch+wndpl.rcNormalPosition] +
mov edi esp +
movs   +
movs   +
movs   +
movs   +
jmp loc_47CFF2  +
push esp  +
mov eax [ebx+180h] +
push eax  +
call GetWindowRect  +
push 0FFFFFFF0h  +
mov eax [ebx+180h] +
push eax  +
call GetWindowLongA  +
test eax 40000000h +
jz loc_47D02D  +
push 0FFFFFFF8h  +
mov eax [ebx+180h] +
push eax  +
call GetWindowLongA  +
mov esi eax +
test esi esi +
jz loc_47D02D  +
push esp  +
push esi  +
call ScreenToClient  +
lea eax [esp+3Ch+Point] +
push eax  +
push esi  +
call ScreenToClient  +
mov eax [esp+3Ch+var_3C] +
mov [ebx+40h] eax +
mov eax [esp+3Ch+var_38] +
mov [ebx+44h] eax +
mov eax [esp+3Ch+Point.x] +
sub eax [esp+3Ch+var_3C] +
mov [ebx+48h] eax +
mov eax [esp+3Ch+Point.y] +
sub eax [esp+3Ch+var_38] +
mov [ebx+4Ch] eax +
mov eax ebx +
call @Controls@TControl@UpdateAnchorRules$qqrv  +
add esp 3Ch +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
push ebp  +
add esp 0FFFFFFF8h +
mov [esp+8+var_8] edx +
mov ebp eax +
mov eax [ebp+194h] +
test eax eax +
jz loc_47D0B7  +
mov edi [eax+8] +
dec edi  +
test edi edi +
jl loc_47D0B7  +
inc edi  +
mov [esp+8+var_4] 0 +
mov eax [ebp+194h] +
mov edx [esp+8+var_4] +
call @Classes@TList@Get$qqri  +
mov ebx eax +
mov edx ebx +
mov eax [esp+8+var_8] +
call @Classes@TList@Add$qqrpv  +
mov edx [esp+8+var_8] +
mov eax ebx +
mov si 0FFB4h +
call @System@@CallDynaInst$qqrv  +
inc [esp+8+var_4]  +
dec edi  +
jnz loc_47D087  +
pop ecx  +
pop edx  +
pop ebp  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
add esp 0FFFFFFECh +
push ebx  +
push esi  +
push edi  +
mov [ebp+var_5] cl +
mov edi edx +
mov [ebp+var_4] eax +
xor eax eax +
mov [ebp+var_C] eax +
mov dl 1 +
mov eax ds:off_49A5D8 +
call @System@TObject@$bctr$qqrv  +
mov [ebp+var_14] eax +
xor eax eax +
push ebp  +
push offset loc_47D1B6  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov edx [ebp+var_14] +
mov eax [ebp+var_4] +
mov si 0FFB4h +
call @System@@CallDynaInst$qqrv  +
mov eax [ebp+var_14] +
cmp dword ptr [eax+8] 0 +
jle loc_47D1A0  +
mov edx edi +
mov eax [ebp+var_14] +
call unknown_libname_419  +
mov [ebp+var_10] eax +
cmp [ebp+var_10] 0FFFFFFFFh +
jnz loc_47D139  +
cmp [ebp+var_5] 0 +
jz loc_47D134  +
mov eax [ebp+var_14] +
mov eax [eax+8] +
dec eax  +
mov [ebp+var_10] eax +
jmp loc_47D139  +
xor eax eax +
mov [ebp+var_10] eax +
mov ebx [ebp+var_10] +
cmp [ebp+var_5] 0 +
jz loc_47D14F  +
inc ebx  +
mov eax [ebp+var_14] +
cmp ebx [eax+8] +
jnz loc_47D15A  +
xor ebx ebx +
jmp loc_47D15A  +
test ebx ebx +
jnz loc_47D159  +
mov eax [ebp+var_14] +
mov ebx [eax+8] +
dec ebx  +
mov edx ebx +
mov eax [ebp+var_14] +
call @Classes@TList@Get$qqri  +
mov edi eax +
mov eax edi +
mov si 0FFB8h +
call @System@@CallDynaInst$qqrv  +
test al al +
jz loc_47D195  +
cmp [ebp+arg_4] 0 +
jz loc_47D184  +
cmp byte ptr [edi+1A4h] 0 +
jz loc_47D195  +
cmp [ebp+arg_0] 0 +
jz loc_47D192  +
mov eax [edi+30h] +
cmp eax [ebp+var_4] +
jnz loc_47D195  +
mov [ebp+var_C] edi +
cmp [ebp+var_C] 0 +
jnz loc_47D1A0  +
cmp ebx [ebp+var_10] +
jnz loc_47D13C  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_47D1BD  +
mov eax [ebp+var_14] +
call @System@TObject@Free$qqrv  +
retn   +
jmp unknown_libname_539  +
jmp loc_47D1AD  +
mov eax [ebp+var_C] +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 8  +
***
push ecx  +
add esp 0FFFFFFF8h +
push ebx  +
push esi  +
mov [ebp+var_8] edx +
mov [ebp+var_4] eax +
mov eax [ebp+var_4] +
call @Controls@TWinControl@GetControlCount$qqrv  +
mov ebx eax +
dec ebx  +
test ebx ebx +
jl loc_47D236  +
inc ebx  +
xor esi esi +
mov edx esi +
mov eax [ebp+var_4] +
call @Controls@TWinControl@GetControl$qqri  +
mov edx [eax+4] +
cmp edx [ebp+var_8] +
jnz loc_47D232  +
mov edx eax +
mov eax [ebp+arg_4] +
call [ebp+arg_0]  +
inc esi  +
dec ebx  +
jnz loc_47D218  +
pop esi  +
pop ebx  +
pop ecx  +
pop ecx  +
pop ebp  +
retn 8  +
***
mov esi ecx +
retn   +
***
push ebx  +
push esi  +
push edi  +
mov edi edx +
mov esi eax +
mov eax [esi+74h] +
cmp dword ptr [eax+14h] 0 +
jbe loc_47D2A5  +
mov edx [esi+74h] +
mov edx [edx+14h] +
mov [edi] edx +
jmp loc_47D2A9  +
xor edx edx +
mov [edi] edx +
cmp dword ptr [eax+10h] 0 +
jbe loc_47D2B9  +
mov edx [esi+74h] +
mov edx [edx+10h] +
mov [ecx] edx +
jmp loc_47D2BD  +
xor edx edx +
mov [ecx] edx +
cmp dword ptr [eax+0Ch] 0 +
jbe loc_47D2D0  +
mov edx [esi+74h] +
mov edx [edx+0Ch] +
mov ebx [ebp+arg_4] +
mov [ebx] edx +
jmp loc_47D2D7  +
mov edx [ebp+arg_4] +
xor ebx ebx +
mov [edx] ebx +
cmp dword ptr [eax+8] 0 +
jbe loc_47D2EA  +
mov eax [esi+74h] +
mov eax [eax+8] +
mov edx [ebp+arg_0] +
mov [edx] eax +
jmp loc_47D2F1  +
mov eax [ebp+arg_0] +
xor edx edx +
mov [eax] edx +
mov eax [ebp+arg_4] +
push eax  +
mov eax [ebp+arg_0] +
push eax  +
mov edx edi +
mov eax esi +
mov ebx [eax] +
call dword ptr [ebx+38h]  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
add esp 0FFFFFFA0h +
push ebx  +
push esi  +
push edi  +
mov [ebp+var_8] ecx +
mov [ebp+var_4] edx +
mov esi eax +
mov eax esi +
call @Controls@TWinControl@HandleAllocated$qqrv  +
test al al +
jz loc_47D6D5  +
mov eax esi +
call @Controls@TWinControl@GetControlCount$qqrv  +
test eax eax +
jz loc_47D6D5  +
lea edx [ebp+rc] +
mov eax esi +
mov ecx [eax] +
call dword ptr [ecx+44h]  +
lea edx [ebp+rc] +
mov eax esi +
mov ecx [eax] +
call dword ptr [ecx+8Ch]  +
lea eax [ebp+rc] +
push eax  +
call IsRectEmpty  +
test eax eax +
jnz loc_47D6D5  +
mov eax [esi+48h] +
mov edx [ebp+rc.right] +
sub edx [ebp+rc.left] +
sub eax edx +
mov [ebp+var_C] eax +
mov edx [esi+4Ch] +
mov ecx [ebp+rc.bottom] +
sub ecx [ebp+rc.top] +
sub edx ecx +
mov [ebp+var_10] edx +
mov [ebp+var_14] eax +
mov [ebp+var_18] edx +
mov eax [ebp+var_4] +
cmp dword ptr [eax] 0 +
jle loc_47D395  +
mov eax [ebp+var_4] +
mov edx [ebp+var_C] +
sub [eax] edx +
mov eax [ebp+var_8] +
cmp dword ptr [eax] 0 +
jle loc_47D3A5  +
mov eax [ebp+var_8] +
mov edx [ebp+var_10] +
sub [eax] edx +
mov eax [ebp+arg_4] +
cmp dword ptr [eax] 0 +
jle loc_47D3B5  +
mov eax [ebp+arg_4] +
mov edx [ebp+var_14] +
sub [eax] edx +
mov eax [ebp+arg_0] +
cmp dword ptr [eax] 0 +
jle loc_47D3C5  +
mov eax [ebp+arg_0] +
mov edx [ebp+var_18] +
sub [eax] edx +
xor ecx ecx +
push ebp  +
push offset loc_47D6CE  +
push dword ptr fs:[ecx]  +
mov fs:[ecx] esp +
xor eax eax +
mov [ebp+var_20] eax +
xor eax eax +
mov [ebp+var_30] eax +
xor eax eax +
mov [ebp+var_24] eax +
xor eax eax +
mov [ebp+var_34] eax +
xor eax eax +
mov [ebp+var_28] eax +
xor eax eax +
mov [ebp+var_38] eax +
xor eax eax +
mov [ebp+var_2C] eax +
xor eax eax +
mov [ebp+var_3C] eax +
mov eax esi +
call @Controls@TWinControl@GetControlCount$qqrv  +
mov edi eax +
dec edi  +
test edi edi +
jl loc_47D5F8  +
inc edi  +
mov [ebp+var_1C] 0 +
mov edx [ebp+var_1C] +
mov eax esi +
call @Controls@TWinControl@GetControl$qqri  +
mov ebx eax +
cmp byte ptr [ebx+57h] 0 +
jnz loc_47D43B  +
test byte ptr [ebx+1Ch] 10h +
jz loc_47D5EE  +
test byte ptr [ebx+51h] 4 +
jnz loc_47D5EE  +
lea eax [ebp+var_44] +
push eax  +
lea eax [ebp+var_4C] +
push eax  +
lea ecx [ebp+var_48] +
lea edx [ebp+var_40] +
mov eax ebx +
call @Controls@_17016  +
mov al [ebx+5Bh] +
sub al 1 +
jb loc_47D46D  +
sub al 2 +
jb loc_47D461  +
sub al 2 +
jz loc_47D467  +
jmp loc_47D4B6  +
mov [ebp+var_4D] 1 +
jmp loc_47D4BA  +
mov [ebp+var_4D] 2 +
jmp loc_47D4BA  +
mov al [ebx+61h] +
and al ds:byte_47D6E0 +
mov dl ds:byte_47D6E0 +
cmp dl al +
jnz loc_47D4B0  +
mov [ebp+var_4D] 1 +
cmp [ebp+var_40] 0 +
jle loc_47D499  +
mov eax [ebp+rc.right] +
sub eax [ebp+rc.left] +
sub eax [ebx+48h] +
sub eax [ebp+var_40] +
mov [ebp+var_40] eax +
cmp [ebp+var_44] 0 +
jle loc_47D4BA  +
mov eax [ebp+rc.right] +
sub eax [ebp+rc.left] +
add eax [ebp+var_44] +
sub eax [ebx+48h] +
mov [ebp+var_44] eax +
jmp loc_47D4BA  +
mov [ebp+var_4D] 0 +
jmp loc_47D4BA  +
mov [ebp+var_4D] 3 +
mov al [ebx+5Bh] +
sub al 1 +
jb loc_47D4D3  +
add al 0FEh +
sub al 2 +
jb loc_47D4CB  +
jz loc_47D4CF  +
jmp loc_47D518  +
mov al 1 +
jmp loc_47D51A  +
mov al 2 +
jmp loc_47D51A  +
mov al [ebx+61h] +
and al ds:byte_47D6E4 +
mov dl ds:byte_47D6E4 +
cmp dl al +
jnz loc_47D514  +
mov al 1 +
cmp [ebp+var_48] 0 +
jle loc_47D4FD  +
mov edx [ebp+rc.bottom] +
sub edx [ebp+rc.top] +
sub edx [ebx+4Ch] +
sub edx [ebp+var_48] +
mov [ebp+var_48] edx +
cmp [ebp+var_4C] 0 +
jle loc_47D51A  +
mov edx [ebp+rc.bottom] +
sub edx [ebp+rc.top] +
add edx [ebp+var_4C] +
sub edx [ebx+4Ch] +
mov [ebp+var_4C] edx +
jmp loc_47D51A  +
xor eax eax +
jmp loc_47D51A  +
mov al 3 +
mov dl [ebp+var_4D] +
dec edx  +
sub dl 2 +
jb loc_47D527  +
jz loc_47D57D  +
jmp loc_47D586  +
cmp [ebp+var_40] 0 +
jle loc_47D551  +
mov edx [ebp+var_4] +
mov edx [edx] +
cmp edx [ebp+var_40] +
jge loc_47D551  +
mov edx [ebp+var_4] +
mov ecx [ebp+var_40] +
mov [edx] ecx +
mov edx [ebp+var_4] +
mov edx [edx] +
cmp edx [ebp+var_20] +
jle loc_47D551  +
mov edx [ebp+var_4] +
mov edx [edx] +
mov [ebp+var_20] edx +
cmp [ebp+var_44] 0 +
jle loc_47D586  +
mov edx [ebp+arg_4] +
mov edx [edx] +
cmp edx [ebp+var_44] +
jle loc_47D586  +
mov edx [ebp+arg_4] +
mov ecx [ebp+var_44] +
mov [edx] ecx +
mov edx [ebp+arg_4] +
mov edx [edx] +
cmp edx [ebp+var_24] +
jle loc_47D586  +
mov edx [ebp+arg_4] +
mov edx [edx] +
mov [ebp+var_24] edx +
jmp loc_47D586  +
mov edx [ebx+48h] +
add [ebp+var_30] edx +
add [ebp+var_34] edx +
dec eax  +
sub al 2 +
jb loc_47D58F  +
jz loc_47D5E5  +
jmp loc_47D5EE  +
cmp [ebp+var_48] 0 +
jle loc_47D5B9  +
mov eax [ebp+var_8] +
mov eax [eax] +
cmp eax [ebp+var_48] +
jge loc_47D5B9  +
mov eax [ebp+var_8] +
mov edx [ebp+var_48] +
mov [eax] edx +
mov eax [ebp+var_8] +
mov eax [eax] +
cmp eax [ebp+var_28] +
jle loc_47D5B9  +
mov eax [ebp+var_8] +
mov eax [eax] +
mov [ebp+var_28] eax +
cmp [ebp+var_4C] 0 +
jle loc_47D5EE  +
mov eax [ebp+arg_0] +
mov eax [eax] +
cmp eax [ebp+var_4C] +
jle loc_47D5EE  +
mov eax [ebp+arg_0] +
mov edx [ebp+var_4C] +
mov [eax] edx +
mov eax [ebp+arg_0] +
mov eax [eax] +
cmp eax [ebp+var_2C] +
jle loc_47D5EE  +
mov eax [ebp+arg_0] +
mov eax [eax] +
mov [ebp+var_2C] eax +
jmp loc_47D5EE  +
mov eax [ebx+4Ch] +
add [ebp+var_38] eax +
add [ebp+var_3C] eax +
inc [ebp+var_1C]  +
dec edi  +
jnz loc_47D415  +
cmp [ebp+var_20] 0 +
jle loc_47D616  +
mov eax [ebp+var_20] +
add eax [ebp+var_30] +
mov edx [ebp+var_4] +
cmp eax [edx] +
jle loc_47D616  +
mov eax [ebp+var_20] +
add eax [ebp+var_30] +
mov edx [ebp+var_4] +
mov [edx] eax +
cmp [ebp+var_24] 0 +
jle loc_47D63C  +
mov eax [ebp+arg_4] +
cmp dword ptr [eax] 0 +
jz loc_47D631  +
mov eax [ebp+var_24] +
add eax [ebp+var_34] +
mov edx [ebp+arg_4] +
cmp eax [edx] +
jle loc_47D63C  +
mov eax [ebp+var_24] +
add eax [ebp+var_34] +
mov edx [ebp+arg_4] +
mov [edx] eax +
cmp [ebp+var_28] 0 +
jle loc_47D65A  +
mov eax [ebp+var_28] +
add eax [ebp+var_38] +
mov edx [ebp+var_8] +
cmp eax [edx] +
jle loc_47D65A  +
mov eax [ebp+var_28] +
add eax [ebp+var_38] +
mov edx [ebp+var_8] +
mov [edx] eax +
cmp [ebp+var_2C] 0 +
jle loc_47D680  +
mov eax [ebp+arg_0] +
cmp dword ptr [eax] 0 +
jz loc_47D675  +
mov eax [ebp+var_2C] +
add eax [ebp+var_3C] +
mov edx [ebp+arg_0] +
cmp eax [edx] +
jle loc_47D680  +
mov eax [ebp+var_2C] +
add eax [ebp+var_3C] +
mov edx [ebp+arg_0] +
mov [edx] eax +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_47D6D5  +
mov eax [ebp+var_4] +
cmp dword ptr [eax] 0 +
jle loc_47D69D  +
mov eax [ebp+var_4] +
mov edx [ebp+var_C] +
add [eax] edx +
mov eax [ebp+var_8] +
cmp dword ptr [eax] 0 +
jle loc_47D6AD  +
mov eax [ebp+var_8] +
mov edx [ebp+var_10] +
add [eax] edx +
mov eax [ebp+arg_4] +
cmp dword ptr [eax] 0 +
jle loc_47D6BD  +
mov eax [ebp+arg_4] +
mov edx [ebp+var_14] +
add [eax] edx +
mov eax [ebp+arg_0] +
cmp dword ptr [eax] 0 +
jle locret_47D6CD  +
mov eax [ebp+arg_0] +
mov edx [ebp+var_18] +
add [eax] edx +
retn   +
jmp unknown_libname_539  +
jmp loc_47D68D  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 8  +
***
push ebx  +
push esi  +
push edi  +
mov edi ecx +
mov esi edx +
mov ebx eax +
mov eax [ebp+arg_4] +
push eax  +
mov eax [ebp+arg_0] +
push eax  +
mov ecx edi +
mov edx esi +
mov eax ebx +
call @Controls@TWinControl@CalcConstraints$qqrrit1t1t1  +
mov eax [ebp+arg_4] +
push eax  +
mov eax [ebp+arg_0] +
push eax  +
mov ecx edi +
mov edx esi +
mov eax ebx +
call @Controls@TControl@ConstrainedResize$qqrrit1t1t1  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
push edi  +
retn   +
***
mov esi edx +
add esp 0FFFFFFC8h +
sub edx 1 +
jb loc_47D971  +
jz loc_47D98E  +
jmp locret_47D9AA  +
cmp cl [eax+163h] +
jz locret_47D9AA  +
mov [eax+163h] cl +
push 0  +
xor ecx ecx +
mov edx 0B03Bh +
call @Controls@TControl@Perform$qqruiii  +
retn   +
cmp cl [eax+164h] +
jz locret_47D9AA  +
mov [eax+164h] cl +
push 0  +
xor ecx ecx +
mov edx 0B03Bh +
call @Controls@TControl@Perform$qqruiii  +
retn   +
***
mov [esp+1+var_1] dl +
mov ebx eax +
mov al [ebx+162h] +
cmp al [esp+1+var_1] +
jz loc_47D9D7  +
mov al [esp+1+var_1] +
mov [ebx+162h] al +
push 0  +
xor ecx ecx +
mov edx 0B03Bh +
mov eax ebx +
call @Controls@TControl@Perform$qqruiii  +
pop edx  +
pop ebx  +
retn   +
***
cmp dl [eax+165h] +
jz locret_47D9F8  +
mov [eax+165h] dl +
push 0  +
xor ecx ecx +
mov edx 0B03Bh +
call @Controls@TControl@Perform$qqruiii  +
retn   +
***
cmp edx [eax+168h] +
jz locret_47DA18  +
mov [eax+168h] edx +
push 0  +
xor ecx ecx +
mov edx 0B03Bh +
call @Controls@TControl@Perform$qqruiii  +
retn   +
***
push edi  +
mov esi edx +
mov ebx eax +
mov edx esi +
mov eax ebx +
mov ecx [eax] +
call dword ptr [ecx-10h]  +
mov eax [esi+8] +
mov esi eax +
mov eax [ebx+16Ch] +
neg eax  +
push eax  +
mov edx [ebx+16Ch] +
neg edx  +
push eax  +
mov edi esi +
push edi  +
call InflateRect  +
cmp byte ptr [ebx+165h] 0 +
jz loc_47DAA5  +
xor eax eax +
cmp byte ptr [ebx+163h] 0 +
jz loc_47DA65  +
add eax [ebx+168h] +
cmp byte ptr [ebx+164h] 0 +
jz loc_47DA74  +
add eax [ebx+168h] +
mov esi edi +
test byte ptr [ebx+162h] 1 +
jz loc_47DA81  +
add [esi] eax +
test byte ptr [ebx+162h] 2 +
jz loc_47DA8D  +
add [esi+4] eax +
test byte ptr [ebx+162h] 4 +
jz loc_47DA99  +
sub [esi+8] eax +
test byte ptr [ebx+162h] 8 +
jz loc_47DAA5  +
sub [esi+0Ch] eax +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
add esp 0FFFFFFC4h +
push ebx  +
push esi  +
push edi  +
mov [ebp+var_8] edx +
mov [ebp+var_4] eax +
mov eax [ebp+var_4] +
cmp byte ptr [eax+165h] 0 +
jnz loc_47DAD7  +
mov eax [ebp+var_4] +
cmp dword ptr [eax+16Ch] 0 +
jbe loc_47DD19  +
mov eax [ebp+var_4] +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call GetWindowDC  +
mov [ebp+hDC] eax +
xor edx edx +
push ebp  +
push offset loc_47DD12  +
push dword ptr fs:[edx]  +
mov fs:[edx] esp +
lea eax [ebp+rc] +
push eax  +
mov eax [ebp+var_4] +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call GetClientRect  +
lea eax [ebp+qrc] +
push eax  +
mov eax [ebp+var_4] +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call GetWindowRect  +
push 2  +
lea eax [ebp+qrc] +
push eax  +
mov eax [ebp+var_4] +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
push 0  +
call MapWindowPoints  +
mov eax [ebp-28h] +
neg eax  +
push eax  +
mov eax [ebp+qrc] +
neg eax  +
push eax  +
lea eax [ebp+rc] +
push eax  +
call OffsetRect  +
mov eax [ebp+rc.bottom] +
push eax  +
mov eax [ebp+rc.right] +
push eax  +
mov eax [ebp+rc.top] +
push eax  +
mov eax [ebp+rc.left] +
push eax  +
mov eax [ebp+hDC] +
push eax  +
call ExcludeClipRect  +
lea esi [ebp+qrc] +
lea edi [ebp+var_3C] +
movs   +
movs   +
movs   +
movs   +
mov eax [ebp+var_4] +
mov eax [eax+16Ch] +
push eax  +
push eax  +
lea eax [ebp+rc] +
push eax  +
call InflateRect  +
lea esi [ebp+rc] +
lea edi [ebp+qrc] +
movs   +
movs   +
movs   +
movs   +
mov eax [ebp+var_4] +
cmp byte ptr [eax+165h] 0 +
jz loc_47DC9E  +
xor ebx ebx +
mov eax [ebp+var_4] +
cmp byte ptr [eax+163h] 0 +
jz loc_47DBAD  +
mov eax [ebp+var_4] +
add ebx [eax+168h] +
mov eax [ebp+var_4] +
cmp byte ptr [eax+164h] 0 +
jz loc_47DBC2  +
mov eax [ebp+var_4] +
add ebx [eax+168h] +
push 0FFFFFFF0h  +
mov eax [ebp+var_4] +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call GetWindowLongA  +
mov esi eax +
mov eax [ebp+var_4] +
test byte ptr [eax+162h] 1 +
jz loc_47DBE3  +
sub [ebp+qrc] ebx +
mov eax [ebp+var_4] +
test byte ptr [eax+162h] 2 +
jz loc_47DBF2  +
sub [ebp-28h] ebx +
mov eax [ebp+var_4] +
test byte ptr [eax+162h] 4 +
jz loc_47DC01  +
add [ebp-24h] ebx +
test esi 200000h +
jz loc_47DC17  +
push 14h  +
mov eax off_4EA7F4 +
mov eax [eax] +
call eax  +
add [ebp-24h] eax +
mov eax [ebp+var_4] +
test byte ptr [eax+162h] 8 +
jz loc_47DC26  +
add [ebp-20h] ebx +
test esi 100000h +
jz loc_47DC3C  +
push 15h  +
mov eax off_4EA7F4 +
mov eax [eax] +
call eax  +
add [ebp-20h] eax +
mov eax [ebp+var_4] +
movzx eax byte ptr [eax+162h] +
mov edx [ebp+var_4] +
movzx edx byte ptr [edx+165h] +
or eax dword_4E67C0[edx*4] +
mov edx [ebp+var_4] +
movzx edx byte ptr [edx+1A5h] +
or eax dword_4E67D0[edx*4] +
or eax 2000h +
push eax  +
mov eax [ebp+var_4] +
movzx eax byte ptr [eax+163h] +
mov eax dword_4E67A0[eax*4] +
mov edx [ebp+var_4] +
movzx edx byte ptr [edx+164h] +
or eax dword_4E67B0[edx*4] +
push eax  +
lea eax [ebp+qrc] +
push eax  +
mov eax [ebp+hDC] +
push eax  +
call DrawEdge  +
mov eax [ebp-20h] +
push eax  +
mov eax [ebp-24h] +
push eax  +
mov eax [ebp-28h] +
push eax  +
mov eax [ebp+qrc] +
push eax  +
mov eax [ebp+hDC] +
push eax  +
call IntersectClipRect  +
lea esi [ebp+var_3C] +
lea edi [ebp+qrc] +
movs   +
movs   +
movs   +
movs   +
mov eax [ebp-28h] +
neg eax  +
push eax  +
mov eax [ebp+qrc] +
neg eax  +
push eax  +
lea eax [ebp+qrc] +
push eax  +
call OffsetRect  +
mov eax [ebp+var_4] +
mov eax [eax+170h] +
call @Graphics@TBrush@GetHandle$qqrv  +
push eax  +
lea eax [ebp+qrc] +
push eax  +
mov eax [ebp+hDC] +
push eax  +
call FillRect  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_47DD19  +
mov eax [ebp+hDC] +
push eax  +
mov eax [ebp+var_4] +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call ReleaseDC  +
retn   +
jmp unknown_libname_539  +
jmp loc_47DCFF  +
mov edx [ebp+var_8] +
mov eax [ebp+var_4] +
mov ecx [eax] +
call dword ptr [ecx-10h]  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
push edi  +
add esp 0FFFFFFF0h +
mov ebx edx +
mov esi eax +
cmp dword ptr [ebx+0Ch] 0 +
jnz loc_47DD90  +
push 0  +
lea edx [esp+14h+var_8] +
mov eax [ebx+8] +
call unknown_libname_382  +
lea edx [esp+14h+var_8] +
lea ecx [esp+14h+var_10] +
mov eax esi +
call @Controls@TControl@ScreenToClient$qqrrx14Windows@TPoint  +
lea edx [esp+14h+var_10] +
xor ecx ecx +
mov eax esi +
call @Controls@TWinControl@ControlAtPos$qqrrx12Types@TPointoo  +
mov edi eax +
test edi edi +
jz loc_47DD81  +
mov eax [ebx+8] +
push eax  +
xor ecx ecx +
mov edx 7Bh +
mov eax edi +
call @Controls@TControl@Perform$qqruiii  +
mov [ebx+0Ch] eax +
cmp dword ptr [ebx+0Ch] 0 +
jnz loc_47DD90  +
mov edx ebx +
mov eax esi +
call @Controls@TControl@WMContextMenu$qqrr23Messages@TWMContextMenu  +
add esp 10h +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push ecx  +
push ebx  +
push esi  +
test dl dl +
jz loc_47DDAA  +
add esp 0FFFFFFF0h +
call unknown_libname_535  +
mov [ebp+var_1] dl +
mov ebx eax +
xor edx edx +
mov eax ebx +
call @Controls@TControl@$bctr$qqrp18Classes@TComponent  +
mov dl 1 +
mov eax ds:off_4713DC +
call @Graphics@TCanvas@$bctr$qqrv  +
mov esi eax +
mov [ebx+160h] esi +
mov eax esi +
mov edx ebx +
call @Controls@TControlCanvas@SetControl$qqrp17Controls@TControl  +
mov eax ebx +
cmp [ebp+var_1] 0 +
jz loc_47DDEC  +
call sub_4BABC8  +
pop large dword ptr fs:0  +
add esp 0Ch +
mov eax ebx +
pop esi  +
pop ebx  +
pop ecx  +
pop ebp  +
retn   +
***
call unknown_libname_536  +
mov ebx edx +
mov esi eax +
cmp esi dword_4E6794 +
jnz loc_47DE0E  +
xor eax eax +
call @Controls@SetCaptureControl$qqrp17Controls@TControl  +
mov eax [esi+160h] +
call @System@TObject@Free$qqrv  +
mov edx ebx +
and dl 0FCh +
mov eax esi +
call @Controls@TControl@$bdtr$qqrv  +
test bl bl +
jle loc_47DE30  +
mov eax esi +
call @System@@ClassDestroy$qqrp14System@TObject  +
pop esi  +
pop ebx  +
retn   +
***
push ecx  +
push ebx  +
mov ebx edx +
mov [ebp+var_4] eax +
cmp dword ptr [ebx+4] 0 +
jz loc_47DED6  +
mov eax [ebp+var_4] +
mov eax [eax+160h] +
call @Graphics@TCanvas@Lock$qqrv  +
xor eax eax +
push ebp  +
push offset loc_47DECF  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov edx [ebx+4] +
mov eax [ebp+var_4] +
mov eax [eax+160h] +
call @Graphics@TCanvas@SetHandle$qqrui  +
xor eax eax +
push ebp  +
push offset loc_47DEAC  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov eax [ebp+var_4] +
mov edx [eax] +
call dword ptr [edx+8Ch]  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_47DEB3  +
mov eax [ebp+var_4] +
mov eax [eax+160h] +
xor edx edx +
call @Graphics@TCanvas@SetHandle$qqrui  +
retn   +
jmp unknown_libname_539  +
jmp loc_47DE9B  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_47DED6  +
mov eax [ebp+var_4] +
mov eax [eax+160h] +
call @Graphics@TCanvas@Unlock$qqrv  +
retn   +
jmp unknown_libname_539  +
jmp loc_47DEC0  +
pop ebx  +
pop ecx  +
pop ebp  +
retn   +
***
test dl dl +
jz loc_47DEEE  +
add esp 0FFFFFFF0h +
call unknown_libname_535  +
mov ebx edx +
mov esi eax +
xor edx edx +
mov eax esi +
call sub_47E7A8  +
mov edx 80FFFFh +
mov eax esi +
call @Controls@TControl@SetColor$qqr15Graphics@TColor  +
mov eax off_4EA6CC +
mov eax [eax] +
mov edx [eax+80h] +
mov eax [esi+208h] +
call unknown_libname_155  +
mov eax [esi+208h] +
mov eax [eax+14h] +
mov dl 1 +
call @Graphics@TBrush@SetStyle$qqr20Graphics@TBrushStyle  +
mov eax esi +
test bl bl +
jz loc_47DF44  +
call sub_4BABC8  +
pop large dword ptr fs:0  +
add esp 0Ch +
mov eax esi +
pop esi  +
pop ebx  +
retn   +
***
mov ebx edx +
mov esi eax +
mov edx ebx +
mov eax esi +
call @Controls@TWinControl@CreateParams$qqrr22Controls@TCreateParams  +
mov dword ptr [ebx+4] 80800000h +
or dword ptr [ebx+24h] 800h +
cmp byte_4F1808 0 +
jz loc_47DF79  +
mov dword ptr [ebx+8] 80h +
lea edx [ebx+8] +
mov eax esi +
call @Controls@TWinControl@AddBiDiModeExStyle$qqrrui  +
pop esi  +
pop ebx  +
retn   +
***
add esp 0FFFFFFF8h +
mov [ebp+var_4] eax +
mov eax [ebp+var_4] +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call GetWindowDC  +
mov [ebp+hDC] eax +
xor eax eax +
push ebp  +
push offset loc_47DFE6  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov edx [ebp+hDC] +
mov eax [ebp+var_4] +
mov ecx [eax] +
call dword ptr [ecx+0C8h]  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_47DFED  +
mov eax [ebp+hDC] +
push eax  +
mov eax [ebp+var_4] +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call ReleaseDC  +
retn   +
jmp unknown_libname_539  +
jmp loc_47DFD3  +
pop ecx  +
pop ecx  +
pop ebp  +
retn   +
***
add esp 0FFFFFFECh +
push ebx  +
xor edx edx +
mov [ebp+var_14] edx +
mov ebx eax +
xor eax eax +
push ebp  +
push offset loc_47E08D  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
lea edx [ebp+Rect] +
mov eax ebx +
mov ecx [eax] +
call dword ptr [ecx+44h]  +
add [ebp+Rect.left] 2 +
add [ebp+Rect.top] 2 +
mov eax off_4EA6CC +
mov eax [eax] +
mov eax [eax+80h] +
mov edx [eax+18h] +
mov eax [ebx+208h] +
mov eax [eax+0Ch] +
call @Graphics@TFont@SetColor$qqr15Graphics@TColor  +
mov eax ebx +
call @Controls@TControl@DrawTextBiDiModeFlagsReadingOnly$qqrv  +
or eax 810h +
push eax  +
lea eax [ebp+Rect] +
push eax  +
push 0FFFFFFFFh  +
lea edx [ebp+var_14] +
mov eax ebx +
call @TControl@GetText$qqrv  +
mov eax [ebp+var_14] +
call unknown_libname_550  +
push eax  +
mov eax [ebx+208h] +
call @Graphics@TCanvas@GetHandle$qqrv  +
push eax  +
call DrawTextA  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_47E094  +
lea eax [ebp+var_14] +
call unknown_libname_540  +
retn   +
jmp unknown_libname_539  +
jmp loc_47E084  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
cmp eax 100h +
retn   +
***
push 0  +
push 0  +
push esi  +
mov esi eax +
xor eax eax +
push ebp  +
push offset loc_47E193  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov eax esi +
mov ecx [eax] +
call dword ptr [ecx-10h]  +
cmp byte ptr [esi+210h] 0 +
jnz loc_47E178  +
lea edx [ebp+var_4] +
mov eax esi +
call @TControl@GetText$qqrv  +
mov edx [ebp+var_4] +
mov eax [esi+208h] +
call @Graphics@TCanvas@TextWidth$qqrx17System@AnsiString  +
mov edx eax +
add edx 6 +
mov eax esi +
call @Controls@TControl@SetWidth$qqri  +
lea edx [ebp+var_8] +
mov eax esi +
call @TControl@GetText$qqrv  +
mov edx [ebp+var_8] +
mov eax [esi+208h] +
call @Graphics@TCanvas@TextHeight$qqrx17System@AnsiString  +
mov edx eax +
add edx 4 +
mov eax esi +
call @Controls@TControl@SetHeight$qqri  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_47E19A  +
lea eax [ebp+var_8] +
mov edx 2 +
call unknown_libname_541  +
retn   +
jmp unknown_libname_539  +
jmp loc_47E185  +
pop esi  +
pop ecx  +
pop ecx  +
pop ebp  +
retn   +
***
add esp 0FFFFFFE0h +
push ebx  +
push esi  +
push edi  +
mov esi edx +
lea edi [ebp+X] +
movs   +
movs   +
movs   +
movs   +
mov ebx ecx +
mov [ebp+var_4] eax +
mov esi off_4EA6CC +
mov eax [ebp+var_4] +
mov byte ptr [eax+210h] 1 +
xor eax eax +
push ebp  +
push offset loc_47E367  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov edx ebx +
mov eax [ebp+var_4] +
call @Controls@TControl@SetText$qqrx17System@AnsiString  +
add [ebp+var_C] 4 +
lea edx [ebp+X] +
mov eax [ebp+var_4] +
call @Controls@TControl@UpdateBoundsRect$qqrrx11Types@TRect  +
mov eax [esi] +
call sub_46A2A0  +
mov edx [ebp+var_4] +
mov edx [edx+4Ch] +
add edx [ebp+Y] +
cmp eax edx +
jge loc_47E212  +
mov eax [esi] +
call sub_46A2A0  +
mov edx [ebp+var_4] +
sub eax [edx+4Ch] +
mov [ebp+Y] eax +
mov eax [esi] +
call sub_46A2AC  +
mov edx [ebp+var_4] +
mov edx [edx+48h] +
add edx [ebp+X] +
cmp eax edx +
jge loc_47E236  +
mov eax [esi] +
call sub_46A2AC  +
mov edx [ebp+var_4] +
sub eax [edx+48h] +
mov [ebp+X] eax +
mov eax [esi] +
call sub_46A294  +
cmp eax [ebp+X] +
jle loc_47E24C  +
mov eax [esi] +
call sub_46A294  +
mov [ebp+X] eax +
mov eax [esi] +
call sub_46A288  +
cmp eax [ebp+var_C] +
jle loc_47E262  +
mov eax [esi] +
call sub_46A288  +
mov [ebp+var_C] eax +
push 10h  +
mov eax [ebp+var_4] +
mov eax [eax+4Ch] +
push eax  +
mov eax [ebp+var_4] +
mov eax [eax+48h] +
push eax  +
mov eax [ebp+Y] +
push eax  +
mov eax [ebp+X] +
push eax  +
push 0FFFFFFFFh  +
mov eax [ebp+var_4] +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call SetWindowPos  +
call GetTickCount  +
mov edx [ebp+var_4] +
sub eax [edx+214h] +
cmp eax 0FAh +
jbe loc_47E329  +
mov eax ebx +
call sub_4BB610  +
cmp eax 64h +
jge loc_47E329  +
cmp dword_4E66D0 0 +
jz loc_47E329  +
push 0  +
lea eax [ebp+pvParam] +
push eax  +
push 0  +
push 1016h  +
call SystemParametersInfoA  +
cmp [ebp+pvParam] 0 +
jz loc_47E329  +
push 0  +
lea eax [ebp+pvParam] +
push eax  +
push 0  +
push 1018h  +
call SystemParametersInfoA  +
cmp [ebp+pvParam] 0 +
jz loc_47E2EC  +
mov bl 2 +
jmp loc_47E307  +
lea edx [ebp+var_20] +
mov eax dword_4F1804 +
call sub_4813F0  +
mov eax [ebp+var_1C] +
cmp eax [ebp+Y] +
jle loc_47E305  +
xor ebx ebx +
jmp loc_47E307  +
mov bl 1 +
xor eax eax +
mov al bl +
mov eax dword_4E67D8[eax*4] +
or eax 40000h +
push eax  +
push 64h  +
mov eax [ebp+var_4] +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call dword_4E66D0  +
push 4  +
mov eax [ebp+var_4] +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call ShowWindow  +
mov eax [ebp+var_4] +
mov edx [eax] +
call dword ptr [edx+7Ch]  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_47E36E  +
call GetTickCount  +
mov edx [ebp+var_4] +
mov [edx+214h] eax +
mov eax [ebp+var_4] +
mov byte ptr [eax+210h] 0 +
retn   +
jmp unknown_libname_539  +
jmp loc_47E34E  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
add esp 0FFFFFFF0h +
push ebx  +
push esi  +
push edi  +
mov esi edx +
lea edi [ebp+var_10] +
movs   +
movs   +
movs   +
movs   +
lea edx [ebp+var_10] +
mov ebx [eax] +
call dword ptr [ebx+0CCh]  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 4  +
***
push ecx  +
push ebx  +
push esi  +
push edi  +
mov [ebp+var_4] ecx +
mov edi edx +
mov esi eax +
mov ebx [ebp+arg_0] +
push 0  +
push ebx  +
mov ecx edi +
xor edx edx +
xor eax eax +
call sub_49B708  +
mov eax esi +
call @Controls@TControl@DrawTextBiDiModeFlagsReadingOnly$qqrv  +
or eax 0C10h +
push eax  +
push ebx  +
push 0FFFFFFFFh  +
mov eax [ebp+var_4] +
call unknown_libname_550  +
push eax  +
mov eax [esi+208h] +
call @Graphics@TCanvas@GetHandle$qqrv  +
push eax  +
call DrawTextA  +
add dword ptr [ebx+8] 6 +
add dword ptr [ebx+0Ch] 2 +
pop edi  +
pop esi  +
pop ebx  +
pop ecx  +
pop ebp  +
retn 8  +
***
add esp 0FFFFFFF0h +
mov esi edx +
mov ebx eax +
mov eax [ebx+4Ch] +
push eax  +
lea eax [esp+14h+qrc] +
push eax  +
mov ecx [ebx+48h] +
xor edx edx +
xor eax eax +
call sub_49B708  +
push 0Fh  +
push 1  +
lea eax [esp+18h+qrc] +
push eax  +
push esi  +
call DrawEdge  +
add esp 10h +
pop esi  +
pop ebx  +
retn   +
***
mov esi edx +
add esp 0FFFFFFE8h +
mov eax ebx +
call sub_446A6C  +
or edx 0FFFFFFFFh +
mov eax ebx +
call @Controls@TDragImageList@SetDragCursor$qqr16Controls@TCursor  +
pop ebx  +
retn   +
***
add esp 0FFFFFFF4h +
push ebx  +
push esi  +
push edi  +
mov edi ecx +
mov esi edx +
mov ebx eax +
mov eax ebx +
call sub_446B24  +
test al al +
jz loc_47E5B5  +
mov [ebx+78h] esi +
mov [ebx+70h] edi +
mov eax [ebp+arg_0] +
mov [ebx+74h] eax +
mov eax [ebp+arg_0] +
push eax  +
push edi  +
push esi  +
mov eax ebx +
call @Imglist@TCustomImageList@GetHandle$qqrv  +
push eax  +
call ImageList_BeginDrag  +
mov al 1 +
mov [ebx+6Ah] al +
jmp loc_47E5B7  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
cmp dx [eax+68h] +
jz locret_47E5D5  +
mov [eax+68h] dx +
cmp byte ptr [eax+6Ah] 0 +
jz locret_47E5D5  +
call @Controls@TDragImageList@CombineDragCursor$qqrv  +
retn   +
***
mov esi edx +
mov ebx eax +
mov edx esi +
mov eax ebx +
call sub_447608  +
mov eax ebx +
call sub_446B24  +
test al al +
jz loc_47E600  +
cmp byte ptr [ebx+6Ah] 0 +
jz loc_47E600  +
push esi  +
push 0  +
call ImageList_GetDragImage  +
pop esi  +
pop ebx  +
retn   +
***
push ecx  +
add esp 0FFFFFFF4h +
push ebx  +
push esi  +
push edi  +
mov [ebp+var_4] ecx +
mov esi edx +
mov edi eax +
xor ebx ebx +
mov eax edi +
call sub_446B24  +
test al al +
jz loc_47E6BA  +
cmp esi [edi+6Ch] +
jz loc_47E6BA  +
mov eax edi +
call @Controls@TDragImageList@DragUnlock$qqrv  +
mov ebx esi +
mov [edi+6Ch] ebx +
lea eax [ebp+var_C] +
push eax  +
mov ecx [ebp+arg_0] +
mov edx [ebp+var_4] +
mov eax ebx +
call @Controls@_17053  +
mov eax [ebp+var_8] +
push eax  +
mov eax [ebp+var_C] +
push eax  +
mov eax [edi+6Ch] +
push eax  +
call ImageList_DragEnter  +
cmp eax 1 +
sbb ebx ebx +
inc ebx  +
mov eax ebx +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 4  +
***
mov eax ebx +
push edi  +
add esp 0FFFFFFF8h +
mov edi ecx +
mov esi edx +
mov ebx eax +
mov eax ebx +
call sub_446B24  +
test al al +
jz loc_47E727  +
push esp  +
mov ecx edi +
mov edx esi +
mov eax [ebx+6Ch] +
call @Controls@_17053  +
mov eax [esp+8+var_4] +
push eax  +
mov eax [esp+0Ch+var_8] +
push eax  +
call ImageList_DragMove  +
cmp eax 1 +
sbb eax eax +
inc eax  +
jmp loc_47E729  +
xor eax eax +
pop ecx  +
pop edx  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov eax ebx +
call sub_446B24  +
test al al +
jz loc_47E745  +
push 0FFFFFFFFh  +
call ImageList_DragShowNolock  +
pop ebx  +
retn   +
***
mov eax ebx +
call sub_446B24  +
test al al +
jz loc_47E75D  +
push 0  +
call ImageList_DragShowNolock  +
pop ebx  +
retn   +
***
mov esi eax +
mov eax esi +
call sub_446B24  +
test al al +
jz loc_47E79E  +
cmp byte ptr [esi+6Ah] 0 +
jz loc_47E79E  +
mov eax esi +
call @Controls@TDragImageList@DragUnlock$qqrv  +
call ImageList_EndDrag  +
cmp eax 1 +
sbb ebx ebx +
inc ebx  +
mov byte ptr [esi+6Ah] 0 +
or edx 0FFFFFFFFh +
mov eax esi +
call @Controls@TDragImageList@SetDragCursor$qqr16Controls@TCursor  +
push 0FFFFFFFFh  +
call ShowCursor  +
jmp loc_47E7A0  +
xor ebx ebx +
mov eax ebx +
pop esi  +
pop ebx  +
retn   +
***
push ecx  +
push ebx  +
push esi  +
test dl dl +
jz loc_47E7BA  +
add esp 0FFFFFFF0h +
call unknown_libname_535  +
mov [ebp+var_1] dl +
mov ebx eax +
xor edx edx +
mov eax ebx +
call @Controls@TWinControl@$bctr$qqrp18Classes@TComponent  +
mov dl 1 +
mov eax ds:off_4713DC +
call @Graphics@TCanvas@$bctr$qqrv  +
mov esi eax +
mov [ebx+208h] esi +
mov eax esi +
mov edx ebx +
call @Controls@TControlCanvas@SetControl$qqrp17Controls@TControl  +
mov eax ebx +
cmp [ebp+var_1] 0 +
jz loc_47E7FC  +
call sub_4BABC8  +
pop large dword ptr fs:0  +
add esp 0Ch +
mov eax ebx +
pop esi  +
pop ebx  +
pop ecx  +
pop ebp  +
retn   +
***
call unknown_libname_536  +
mov esi edx +
mov ebx eax +
or word ptr [ebx+54h] 100h +
mov edx esi +
mov eax ebx +
call @Controls@TWinControl@WMPaint$qqrr17Messages@TWMPaint  +
and word ptr [ebx+54h] 0FEFFh +
pop esi  +
pop ebx  +
retn   +
***
push ecx  +
push ebx  +
mov ebx edx +
mov [ebp+var_4] eax +
mov eax [ebp+var_4] +
mov eax [eax+208h] +
call @Graphics@TCanvas@Lock$qqrv  +
xor eax eax +
push ebp  +
push offset loc_47E8F2  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov eax [ebp+var_4] +
mov eax [eax+208h] +
mov edx ebx +
call @Graphics@TCanvas@SetHandle$qqrui  +
xor eax eax +
push ebp  +
push offset loc_47E8CF  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov eax [ebp+var_4] +
mov eax [eax+208h] +
call @Controls@TControlCanvas@UpdateTextFlags$qqrv  +
mov eax [ebp+var_4] +
mov edx [eax] +
call dword ptr [edx+0C4h]  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_47E8D6  +
mov eax [ebp+var_4] +
mov eax [eax+208h] +
xor edx edx +
call @Graphics@TCanvas@SetHandle$qqrui  +
retn   +
jmp unknown_libname_539  +
jmp loc_47E8BE  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_47E8F9  +
mov eax [ebp+var_4] +
mov eax [eax+208h] +
call @Graphics@TCanvas@Unlock$qqrv  +
retn   +
jmp unknown_libname_539  +
jmp loc_47E8E3  +
pop ebx  +
pop ecx  +
pop ebp  +
retn   +
***
jmp loc_47E90C  +
mov ebx [ebx+0Ch] +
test ebx ebx +
jz loc_47E91B  +
mov eax ebx +
call @Controls@TDockZone@GetVisible$qqrv  +
test al al +
jz loc_47E909  +
mov eax ebx +
pop ebx  +
retn   +
***
mov edx [eax+14h] +
test edx edx +
jz loc_47E92D  +
cmp byte ptr [edx+10h] 0 +
jnz loc_47E93E  +
mov edx [eax+1Ch] +
cmp eax [edx+64h] +
jnz loc_47E93B  +
cmp byte ptr [eax+10h] 0 +
jnz loc_47E93E  +
xor eax eax +
retn   +
mov al 1 +
retn   +
***
test dl dl +
jz loc_47E950  +
add esp 0FFFFFFF0h +
call unknown_libname_535  +
mov [eax+1Ch] ecx +
test dl dl +
jz locret_47E966  +
call sub_4BABC8  +
pop large dword ptr fs:0  +
add esp 0Ch +
retn   +
***
xor edx edx +
call sub_47EF90  +
test eax eax +
jz loc_47E992  +
call sub_47EF68  +
inc ebx  +
test eax eax +
jnz loc_47E988  +
mov eax ebx +
pop ebx  +
retn   +
***
mov edx [eax+4] +
mov edx [eax+1Ch] +
cmp eax [edx+64h] +
jnz loc_47E9D8  +
mov edx eax +
jmp loc_47E9DB  +
mov edx [eax+14h] +
mov cl [edx+10h] +
cmp cl 1 +
jnz loc_47E9EE  +
mov edx 1 +
call @Controls@TDockZone@GetTopLeft$qqri  +
retn   +
cmp cl 2 +
jnz loc_47E9FF  +
mov edx 2 +
call @Controls@TDockZone@GetTopLeft$qqri  +
jmp locret_47EA12  +
xor ecx ecx +
mov dl 1 +
mov eax ds:off_4A7A78 +
call sub_4AC17C  +
call @System@@RaiseExcept$qqrv  +
retn   +
***
mov edx [eax+1Ch] +
cmp eax [edx+64h] +
jnz loc_47EA20  +
mov edx eax +
jmp loc_47EA23  +
mov edx [eax+14h] +
mov cl [edx+10h] +
cmp cl 1 +
jnz loc_47EA36  +
mov edx 1 +
call @Controls@TDockZone@GetHeightWidth$qqri  +
retn   +
cmp cl 2 +
jnz loc_47EA47  +
mov edx 2 +
call @Controls@TDockZone@GetHeightWidth$qqri  +
jmp locret_47EA5A  +
xor ecx ecx +
mov dl 1 +
mov eax ds:off_4A7A78 +
call sub_4AC17C  +
call @System@@RaiseExcept$qqrv  +
retn   +
***
add esp 0FFFFFFF0h +
mov edi edx +
mov esi eax +
mov eax esi +
jmp loc_47EA85  +
mov ecx edi +
mov edx [eax+14h] +
cmp cl [edx+10h] +
jnz loc_47EA83  +
cmp dword ptr [eax+18h] 0 +
jz loc_47EA83  +
mov eax [eax+18h] +
call @Controls@TDockZone@GetZoneLimit$qqrv  +
jmp loc_47EAC1  +
mov eax edx +
mov edx [esi+1Ch] +
cmp eax [edx+64h] +
jnz loc_47EA69  +
mov edx esp +
mov eax [esi+1Ch] +
mov eax [eax+14h] +
mov ecx [eax] +
call dword ptr [ecx+44h]  +
mov edx esp +
mov eax [esi+1Ch] +
mov eax [eax+14h] +
mov ecx [eax] +
call dword ptr [ecx+8Ch]  +
mov eax edi +
dec al  +
jz loc_47EAB9  +
dec al  +
jnz loc_47EABF  +
mov eax [esp+10h+var_10] +
jmp loc_47EAC1  +
mov eax [esp+10h+var_C] +
jmp loc_47EAC1  +
xor eax eax +
add esp 10h +
pop edi  +
pop esi  +
retn   +
***
push edi  +
push edi  +
mov esi eax +
mov eax esi +
call @Controls@TDockZone@GetVisibleChildCount$qqrv  +
test eax eax +
jz loc_47EC1B  +
cmp byte ptr [esi+10h] 0 +
jz loc_47EC1B  +
mov eax esi +
call sub_47EF90  +
mov ebx eax +
mov al [esi+10h] +
dec al  +
jz loc_47EBAC  +
dec al  +
jz loc_47EBBC  +
jmp loc_47EBCC  +
mov edx 1 +
mov eax esi +
call @Controls@TDockZone@GetHeightWidth$qqri  +
mov edi eax +
jmp loc_47EBCE  +
mov edx 2 +
mov eax esi +
call @Controls@TDockZone@GetHeightWidth$qqri  +
mov edi eax +
jmp loc_47EBCE  +
xor edi edi +
mov eax esi +
call @Controls@TDockZone@GetVisibleChildCount$qqrv  +
push eax  +
mov eax edi +
pop edx  +
mov ecx edx +
cdq   +
idiv  ecx +
mov esi eax +
test ebx ebx +
jz loc_47EC1B  +
cmp dword ptr [ebx+0Ch] 0 +
jnz loc_47EBF5  +
mov edx edi +
mov eax ebx +
call sub_47EEB8  +
jmp loc_47EC07  +
mov eax ebx +
call unknown_libname_291  +
mov edx eax +
add edx esi +
mov eax ebx +
call sub_47EEB8  +
mov eax ebx +
call @Controls@TDockZone@Update$qqrv  +
mov eax ebx +
call sub_47EF68  +
mov ebx eax +
test ebx ebx +
jnz loc_47EBE4  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
mov esi edx +
mov ebx eax +
mov eax esi +
call unknown_libname_540  +
mov edi [ebx+4] +
test edi edi +
jz loc_47EC5F  +
cmp dword ptr [edi+8] 0 +
jnz loc_47EC52  +
mov ecx off_4EA7E0 +
mov dl 1 +
mov eax ds:off_4A7A78 +
call @Sysutils@Exception@$bctr$qqrp20System@TResStringRec  +
call @System@@RaiseExcept$qqrv  +
mov eax esi +
mov edx [ebx+4] +
mov edx [edx+8] +
call unknown_libname_542  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
add esp 0FFFFFFF4h +
push ebx  +
push esi  +
mov ebx eax +
xor eax eax +
mov [ebp+var_8] eax +
mov eax [ebx+1Ch] +
mov [ebp+var_C] eax +
lea ecx [ebp+var_8] +
mov eax [ebp+var_C] +
mov eax [eax+14h] +
mov si 0FFB9h +
call @System@@CallDynaInst$qqrv  +
cmp [ebp+var_8] 0 +
setnz [ebp+var_1]  +
cmp [ebp+var_1] 0 +
jz loc_47ECDC  +
mov eax [ebp+var_C] +
mov [eax+38h] ebx +
xor eax eax +
push ebp  +
push offset loc_47ECD5  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
push 0  +
mov eax [ebp+var_C] +
mov edx [eax+14h] +
xor ecx ecx +
mov eax [ebp+var_8] +
call @Controls@TControl@ManualDock$qqrp20Controls@TWinControlp17Controls@TControl15Controls@TAlign  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_47ECDC  +
mov eax [ebp+var_C] +
xor edx edx +
mov [eax+38h] edx +
retn   +
jmp unknown_libname_539  +
jmp loc_47ECCC  +
mov al [ebp+var_1] +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
push ebx  +
add esp 0FFFFFFECh +
push ebx  +
push esi  +
push edi  +
mov [ebp+var_4] eax +
mov eax [ebp+var_4] +
mov eax [eax+4] +
test eax eax +
jz loc_47EE87  +
cmp byte ptr [eax+57h] 0 +
jz loc_47EE87  +
mov edx [ebp+var_4] +
mov edx [edx+1Ch] +
cmp dword ptr [edx+6Ch] 0 +
jnz loc_47EE87  +
mov edx [ebp+var_4] +
mov edx [edx+14h] +
mov dl [edx+10h] +
mov [eax+9Ch] dl +
mov edx 2 +
mov eax [ebp+var_4] +
call @Controls@TDockZone@GetHeightWidth$qqri  +
mov ebx eax +
mov edx 1 +
mov eax [ebp+var_4] +
call @Controls@TDockZone@GetHeightWidth$qqri  +
mov esi eax +
push ebp  +
call @Controls@_17084  +
pop ecx  +
test al al +
jz loc_47EDA4  +
mov eax [ebp+var_4] +
mov eax [eax+14h] +
cmp byte ptr [eax+10h] 1 +
jnz loc_47ED9B  +
mov eax [ebp+var_4] +
mov eax [eax+1Ch] +
sub ebx [eax+0Ch] +
jmp loc_47EDA4  +
mov eax [ebp+var_4] +
mov eax [eax+1Ch] +
sub esi [eax+0Ch] +
mov eax [ebp+var_4] +
call sub_47EF68  +
test eax eax +
jnz loc_47EE1E  +
mov eax [ebp+var_4] +
mov eax [eax+14h] +
mov edx [ebp+var_4] +
mov edx [edx+1Ch] +
cmp eax [edx+64h] +
jz loc_47EDEB  +
mov eax [ebp+var_4] +
mov eax [eax+14h] +
mov al [eax+10h] +
mov edx [ebp+var_4] +
mov edx [edx+1Ch] +
mov edx [edx+64h] +
cmp al [edx+10h] +
jnz loc_47EDEB  +
mov eax [ebp+var_4] +
call @Controls@TDockZone@GetZoneLimit$qqrv  +
mov edx [ebp+var_4] +
mov edx [edx+1Ch] +
cmp eax [edx+68h] +
jl loc_47EE1E  +
mov eax [ebp+var_4] +
mov eax [eax+14h] +
mov al [eax+10h] +
mov edx [ebp+var_4] +
mov edx [edx+1Ch] +
mov edx [edx+64h] +
cmp al [edx+10h] +
jz loc_47EE3E  +
mov eax [ebp+var_4] +
call @Controls@TDockZone@GetZoneLimit$qqrv  +
mov edi eax +
mov eax [ebp+var_4] +
mov eax [eax+1Ch] +
mov eax [eax+64h] +
call @Controls@TDockZone@GetZoneLimit$qqrv  +
cmp edi eax +
jge loc_47EE3E  +
mov eax [ebp+var_4] +
mov eax [eax+14h] +
cmp byte ptr [eax+10h] 1 +
jnz loc_47EE35  +
mov eax [ebp+var_4] +
mov eax [eax+1Ch] +
sub esi [eax+0Ch] +
jmp loc_47EE3E  +
mov eax [ebp+var_4] +
mov eax [eax+1Ch] +
sub ebx [eax+0Ch] +
push esi  +
lea eax [ebp+var_14] +
push eax  +
mov edx 1 +
mov eax [ebp+var_4] +
call @Controls@TDockZone@GetTopLeft$qqri  +
push eax  +
mov edx 2 +
mov eax [ebp+var_4] +
call @Controls@TDockZone@GetTopLeft$qqri  +
mov ecx ebx +
pop edx  +
call sub_49B730  +
lea ecx [ebp+var_14] +
mov eax [ebp+var_4] +
mov edx [eax+4] +
mov eax [ebp+var_4] +
mov eax [eax+1Ch] +
mov ebx [eax] +
call dword ptr [ebx]  +
lea edx [ebp+var_14] +
mov eax [ebp+var_4] +
mov eax [eax+4] +
call @Controls@TControl@SetBoundsRect$qqrrx11Types@TRect  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
mov eax ebx +
call @Controls@TDockZone@GetVisible$qqrv  +
test al al +
jnz loc_47EEB2  +
mov eax ebx +
call @Controls@_17072  +
test al al +
jz loc_47EEB2  +
mov eax ebx +
call unknown_libname_291  +
pop ebx  +
retn   +
mov eax [ebx+20h] +
pop ebx  +
retn   +
***
mov eax [eax+8] +
jmp loc_47EEC3  +
mov eax edx +
mov edx [eax+0Ch] +
test edx edx +
jnz loc_47EEC1  +
retn   +
***
mov esi edx +
mov ebx eax +
mov edx esi +
mov eax ebx +
call sub_47EEB8  +
mov ebx [ebx+8] +
test ebx ebx +
jz loc_47EF02  +
mov eax ebx +
call unknown_libname_290  +
test eax eax +
jle loc_47EEFB  +
mov eax ebx +
call @Controls@_17088  +
mov edx esi +
call @Controls@TDockZone@ExpandZoneLimit$qqri  +
mov ebx [ebx+0Ch] +
test ebx ebx +
jnz loc_47EEE2  +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
mov esi eax +
mov ebx [esi+8] +
test ebx ebx +
jz loc_47EF61  +
mov eax ebx +
call @Controls@TDockZone@GetZoneLimit$qqrv  +
mov edi eax +
mov eax ebx +
call unknown_libname_291  +
cmp edi eax +
jl loc_47EF3C  +
mov eax ebx +
call @Controls@TDockZone@GetZoneLimit$qqrv  +
mov edi eax +
mov eax esi +
call unknown_libname_292  +
cmp edi eax +
jle loc_47EF53  +
mov eax esi +
call @Controls@TDockZone@ResetChildren$qqrv  +
mov eax [esi+1Ch] +
push eax  +
push offset @Controls@TDockTree@UpdateZone$qqrp18Controls@TDockZone  +
mov edx esi +
call @Controls@TDockTree@ForEachAt$qqrp18Controls@TDockZoneynpqqrp18Controls@TDockZone$v  +
mov eax ebx +
call @Controls@TDockZone@ResetZoneLimits$qqrv  +
mov ebx [ebx+0Ch] +
test ebx ebx +
jnz loc_47EF14  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov eax [eax+0Ch] +
call @Controls@_17071  +
retn   +
***
jmp loc_47EF7D  +
mov eax [eax+8] +
call @Controls@_17071  +
retn   +
***
add esp 0FFFFFFF4h +
push ebx  +
push esi  +
push edi  +
test dl dl +
jz loc_47EFB1  +
add esp 0FFFFFFF0h +
call unknown_libname_535  +
mov [ebp+var_C] ecx +
mov [ebp+var_5] dl +
mov [ebp+var_4] eax +
xor edx edx +
mov eax [ebp+var_4] +
call @System@TObject@$bctr$qqrv  +
mov eax [ebp+var_4] +
mov dword ptr [eax+0Ch] 4 +
mov eax [ebp+var_4] +
mov edx [ebp+var_C] +
mov [eax+14h] edx +
mov eax [ebp+var_4] +
mov dword ptr [eax+70h] 40000h +
mov eax [ebp+var_4] +
mov dword ptr [eax+18h] 0Ch +
mov eax [ebp+var_C] +
mov al [eax+5Bh] +
cmp al 1 +
jz loc_47EFF9  +
cmp al 2 +
jnz loc_47EFFD  +
xor eax eax +
jmp loc_47EFFF  +
mov al 1 +
mov edx [ebp+var_4] +
mov [edx+1Ch] al +
mov ecx [ebp+var_4] +
mov dl 1 +
mov eax ds:off_472D94 +
call unknown_libname_289  +
mov edx [ebp+var_4] +
mov [edx+64h] eax +
mov dl 1 +
mov eax ds:off_4593AC +
call sub_45AD6C  +
mov ebx eax +
mov eax [ebp+var_4] +
mov [eax+10h] ebx +
mov edx 0FFFFFFh +
xor eax eax +
call @Graphics@AllocPatternBitmap$qqr15Graphics@TColort1  +
mov edx eax +
mov eax ebx +
call @Graphics@TBrush@SetBitmap$qqrp16Graphics@TBitmap  +
mov eax [ebp+var_4] +
call sub_47F16C  +
xor eax eax +
push ebp  +
push offset loc_47F0A8  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov eax [ebp+var_C] +
call @Controls@TWinControl@GetControlCount$qqrv  +
mov ebx eax +
dec ebx  +
test ebx ebx +
jl loc_47F087  +
inc ebx  +
xor esi esi +
push 0  +
mov edx esi +
mov eax [ebp+var_C] +
call @Controls@TWinControl@GetControl$qqri  +
mov edx eax +
mov cl 3 +
mov eax [ebp+var_4] +
mov edi [eax] +
call dword ptr [edi+8]  +
inc esi  +
dec ebx  +
jnz loc_47F06B  +
mov eax [ebp+var_4] +
mov eax [eax+64h] +
call @Controls@TDockZone@ResetChildren$qqrv  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_47F0AF  +
mov eax [ebp+var_4] +
call @Controls@TDockTree@EndUpdate$qqrv  +
retn   +
jmp unknown_libname_539  +
jmp loc_47F09F  +
mov eax [ebp+var_C] +
test byte ptr [eax+1Ch] 10h +
jnz loc_47F0E0  +
mov eax [ebp+var_4] +
mov edx [ebp+var_4] +
mov edx [edx+14h] +
mov ecx [edx+38h] +
mov [eax+30h] ecx +
mov ecx [edx+3Ch] +
mov [eax+34h] ecx +
mov eax [ebp+var_4] +
mov eax [eax+14h] +
mov edx [ebp+var_4] +
mov [eax+3Ch] edx +
mov dword ptr [eax+38h] offset @Controls@TDockTree@WindowProc$qqrr17Messages@TMessage +
mov eax [ebp+var_4] +
cmp [ebp+var_5] 0 +
jz loc_47F0F8  +
call sub_4BABC8  +
pop large dword ptr fs:0  +
add esp 0Ch +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
call unknown_libname_536  +
mov eax [eax+14h] +
dec dword ptr [eax+6Ch]  +
push ebx  +
mov ebx eax +
mov eax [ebp+arg_0] +
mov eax [eax-4] +
cmp eax [ebx+4] +
jnz loc_47F19E  +
mov eax [ebp+arg_0] +
mov [eax-8] ebx +
pop ebx  +
pop ebp  +
retn   +
mov eax [ebp+arg_0] +
cmp dword ptr [eax-8] 0 +
jnz loc_47F1BA  +
cmp dword ptr [ebx+0Ch] 0 +
jz loc_47F1BA  +
mov eax [ebp+arg_0] +
push eax  +
mov eax [ebx+0Ch] +
call @Controls@_17099  +
pop ecx  +
mov eax [ebp+arg_0] +
cmp dword ptr [eax-8] 0 +
jnz loc_47F1D6  +
cmp dword ptr [ebx+8] 0 +
jz loc_47F1D6  +
mov eax [ebp+arg_0] +
push eax  +
mov eax [ebx+8] +
call @Controls@_17099  +
pop ecx  +
pop ebx  +
pop ebp  +
retn   +
***
add esp 0FFFFFFF8h +
mov [ebp+var_4] edx +
xor edx edx +
mov [ebp+var_8] edx +
cmp [ebp+var_4] 0 +
jz loc_47F200  +
cmp dword ptr [eax+64h] 0 +
jz loc_47F200  +
push ebp  +
mov eax [eax+64h] +
call @Controls@_17099  +
pop ecx  +
mov eax [ebp+var_8] +
pop ecx  +
pop ecx  +
pop ebp  +
retn   +
***
push ebx  +
push esi  +
mov ebx eax +
mov eax [ebp+arg_0] +
lea esi [eax+8] +
mov edx ebx +
mov eax [esi+4] +
call dword ptr [esi]  +
mov eax [ebx+0Ch] +
test eax eax +
jz loc_47F22D  +
mov edx [ebp+arg_0] +
push edx  +
call @Controls@_17101  +
pop ecx  +
mov eax [ebx+8] +
test eax eax +
jz loc_47F23E  +
mov edx [ebp+arg_0] +
push edx  +
call @Controls@_17101  +
pop ecx  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
test edx edx +
jnz loc_47F24E  +
mov edx [eax+64h] +
push ebp  +
mov eax edx +
call @Controls@_17101  +
pop ecx  +
pop ebp  +
retn 8  +
***
push edi  +
add esp 0FFFFFFF0h +
mov esi ecx +
call @Controls@TDockTree@FindControlZone$qqrp17Controls@TControl  +
mov ebx eax +
test ebx ebx +
jnz loc_47F27F  +
mov eax esi +
xor ecx ecx +
mov edx 10h +
call @System@@FillChar$qqrv  +
jmp loc_47F2C6  +
mov edx 1 +
mov eax ebx +
call @Controls@TDockZone@GetHeightWidth$qqri  +
push eax  +
lea eax [esp+14h+var_10] +
push eax  +
mov edx 2 +
mov eax ebx +
call @Controls@TDockZone@GetHeightWidth$qqri  +
push eax  +
mov edx 1 +
mov eax ebx +
call @Controls@TDockZone@GetTopLeft$qqri  +
push eax  +
mov edx 2 +
mov eax ebx +
call @Controls@TDockZone@GetTopLeft$qqri  +
pop edx  +
pop ecx  +
call sub_49B730  +
mov edi esi +
mov esi esp +
movs   +
movs   +
movs   +
movs   +
add esp 10h +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
call @Controls@TDockTree@InternalHitTest$qqrrx12Types@TPointri  +
add esp 0FFFFFFD0h +
push ecx  +
push ebx  +
push esi  +
push edi  +
mov edi ecx +
mov [ebp+var_4] edx +
mov esi eax +
mov ecx esi +
mov dl 1 +
mov eax ds:off_472D94 +
call unknown_libname_289  +
mov ebx eax +
mov al [ebp+arg_4] +
mov [ebx+10h] al +
test edi edi +
jnz loc_47F5F9  +
mov edx [esi+68h] +
mov eax ebx +
call sub_47EEB8  +
mov eax [esi+64h] +
call @Controls@TDockZone@GetZoneLimit$qqrv  +
mov [esi+68h] eax +
mov al [ebp+arg_4] +
mov [esi+48h] al +
xor eax eax +
mov [esi+40h] eax +
mov dword ptr [esi+44h] 3FE00000h +
cmp [ebp+arg_0] 0 +
jz loc_47F57C  +
mov eax [esi+64h] +
mov [ebx+8] eax +
mov eax [esi+64h] +
mov [eax+14h] ebx +
mov edx [ebp+var_4] +
mov [eax+0Ch] edx +
mov edx [ebp+var_4] +
mov [edx+18h] eax +
mov eax [ebp+var_4] +
mov [eax+14h] ebx +
mov [esi+64h] ebx +
push esi  +
push offset @Controls@TDockTree@ScaleZone$qqrp18Controls@TDockZone  +
mov edx [ebx+8] +
mov eax esi +
call @Controls@TDockTree@ForEachAt$qqrp18Controls@TDockZoneynpqqrp18Controls@TDockZone$v  +
jmp loc_47F5E8  +
mov eax [ebp+var_4] +
mov [ebx+8] eax +
mov eax [esi+64h] +
mov [eax+14h] ebx +
mov edx [ebp+var_4] +
mov [eax+18h] edx +
mov edx [ebp+var_4] +
mov [edx+0Ch] eax +
mov eax [ebp+var_4] +
mov [eax+14h] ebx +
mov [esi+64h] ebx +
push esi  +
push offset @Controls@TDockTree@ScaleZone$qqrp18Controls@TDockZone  +
mov edx [ebx+8] +
mov eax esi +
call @Controls@TDockTree@ForEachAt$qqrp18Controls@TDockZoneynpqqrp18Controls@TDockZone$v  +
mov eax [esi+64h] +
call @Controls@TDockZone@GetZoneLimit$qqrv  +
sar eax 1 +
jns loc_47F5BC  +
adc eax 0 +
mov [esi+4Ch] eax +
push esi  +
push offset @Controls@TDockTree@ShiftZone$qqrp18Controls@TDockZone  +
mov edx [ebx+8] +
mov eax esi +
call @Controls@TDockTree@ForEachAt$qqrp18Controls@TDockZoneynpqqrp18Controls@TDockZone$v  +
mov eax [esi+64h] +
call @Controls@TDockZone@GetZoneLimit$qqrv  +
mov edx eax +
sar edx 1 +
jns loc_47F5E0  +
adc edx 0 +
mov eax [ebp+var_4] +
call sub_47EEB8  +
push esi  +
push offset @Controls@TDockTree@UpdateZone$qqrp18Controls@TDockZone  +
xor edx edx +
mov eax esi +
call @Controls@TDockTree@ForEachAt$qqrp18Controls@TDockZoneynpqqrp18Controls@TDockZone$v  +
jmp loc_47F670  +
mov eax edi +
call @Controls@TDockZone@GetZoneLimit$qqrv  +
mov edx eax +
mov eax ebx +
call sub_47EEB8  +
mov eax [edi+14h] +
mov [ebx+14h] eax +
mov eax [edi+18h] +
mov [ebx+18h] eax +
test eax eax +
jz loc_47F61C  +
mov [eax+0Ch] ebx +
mov eax [edi+0Ch] +
mov [ebx+0Ch] eax +
test eax eax +
jz loc_47F629  +
mov [eax+18h] ebx +
mov eax [ebx+14h] +
cmp edi [eax+8] +
jnz loc_47F634  +
mov [eax+8] ebx +
mov eax [ebp+var_4] +
mov [eax+14h] ebx +
mov [edi+14h] ebx +
cmp [ebp+arg_0] 0 +
jz loc_47F659  +
mov [ebx+8] edi +
xor eax eax +
mov [edi+18h] eax +
mov eax [ebp+var_4] +
mov [edi+0Ch] eax +
mov eax [ebp+var_4] +
mov [eax+18h] edi +
jmp loc_47F670  +
mov eax [ebp+var_4] +
mov [ebx+8] eax +
mov eax [ebp+var_4] +
mov [edi+18h] eax +
xor eax eax +
mov [edi+0Ch] eax +
mov eax [ebp+var_4] +
mov [eax+0Ch] edi +
mov eax ebx +
call @Controls@TDockZone@ResetChildren$qqrv  +
mov eax ebx +
call @Controls@TDockZone@ResetZoneLimits$qqrv  +
push esi  +
push offset @Controls@TDockTree@UpdateZone$qqrp18Controls@TDockZone  +
xor edx edx +
mov eax esi +
call @Controls@TDockTree@ForEachAt$qqrp18Controls@TDockZoneynpqqrp18Controls@TDockZone$v  +
pop edi  +
pop esi  +
pop ebx  +
pop ecx  +
pop ebp  +
retn 8  +
***
push ebx  +
mov ebx ecx +
mov ecx [ebp+arg_0] +
test ebx ebx +
jnz loc_47F6BA  +
mov eax [eax+64h] +
mov ebx [eax+8] +
test cl cl +
jz loc_47F6BA  +
jmp loc_47F6B3  +
mov ebx eax +
mov eax [ebx+0Ch] +
test eax eax +
jnz loc_47F6B1  +
test cl cl +
jz loc_47F6D9  +
mov eax [ebx+14h] +
mov [edx+14h] eax +
mov [edx+18h] ebx +
mov eax [ebx+0Ch] +
mov [edx+0Ch] eax +
test eax eax +
jz loc_47F6D4  +
mov [eax+18h] edx +
mov [ebx+0Ch] edx +
jmp loc_47F6FA  +
mov [edx+0Ch] ebx +
mov eax [ebx+18h] +
mov [edx+18h] eax +
test eax eax +
jz loc_47F6E9  +
mov [eax+0Ch] edx +
mov [ebx+18h] edx +
mov eax [ebx+14h] +
mov [edx+14h] eax +
cmp ebx [eax+8] +
jnz loc_47F6FA  +
mov [eax+8] edx +
mov eax [ebx+14h] +
call @Controls@TDockZone@ResetChildren$qqrv  +
mov eax [ebx+14h] +
call @Controls@TDockZone@ResetZoneLimits$qqrv  +
pop ebx  +
pop ebp  +
retn 4  +
***
push ebx  +
add esp 0FFFFFFE8h +
add esp 0FFFFFFF0h +
push ebx  +
mov [ebp+var_C] ecx +
mov [ebp+var_4] edx +
mov [ebp+var_8] eax +
xor eax eax +
mov [ebp+var_10] eax +
mov eax [ebp+var_C] +
xor edx edx +
mov [eax] edx +
push ebp  +
mov eax [ebp+var_4] +
call @Controls@_17111  +
pop ecx  +
mov ebx eax +
test ebx ebx +
jz loc_47FA28  +
mov eax [ebp+var_8] +
mov eax [eax+14h] +
cmp eax [ebx+0A0h] +
jnz loc_47FA28  +
mov edx ebx +
mov eax [ebp+var_8] +
call @Controls@TDockTree@FindControlZone$qqrp17Controls@TControl  +
mov [ebp+var_10] eax +
cmp [ebp+var_10] 0 +
jz loc_47FA4D  +
mov eax [ebp+var_C] +
mov dword ptr [eax] 1 +
jmp loc_47FA4D  +
mov eax [ebp+var_8] +
mov eax [eax+64h] +
call sub_47EF90  +
test eax eax +
jz loc_47FA4D  +
test ebx ebx +
jnz loc_47FA4D  +
push ebp  +
mov eax [ebp+var_8] +
mov eax [eax+64h] +
call sub_47EF90  +
call @Controls@_17110  +
pop ecx  +
mov eax [ebp+var_10] +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
push ecx  +
push ebx  +
push esi  +
mov ebx eax +
mov eax ebx +
call unknown_libname_540  +
lea edx [ebp+var_4] +
mov eax [ebp+arg_0] +
mov eax [eax-4] +
mov ecx 4 +
mov esi [eax] +
call dword ptr [esi+8]  +
cmp [ebp+var_4] 0 +
jle loc_47FA9A  +
mov eax ebx +
mov edx [ebp+var_4] +
call @System@@LStrSetLength$qqrv  +
mov edx [ebx] +
mov eax [ebp+arg_0] +
mov eax [eax-4] +
mov ecx [ebp+var_4] +
mov ebx [eax] +
call dword ptr [ebx+8]  +
pop esi  +
pop ebx  +
pop ecx  +
pop ebp  +
retn   +
***
add esp 0FFFFFFE0h +
push ebx  +
push esi  +
push edi  +
xor ecx ecx +
mov [ebp+var_C] ecx +
mov [ebp+var_4] edx +
mov [ebp+var_8] eax +
xor eax eax +
push ebp  +
push offset loc_47FC98  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov eax [ebp+var_8] +
mov edx [eax+64h] +
mov eax [ebp+var_8] +
call @Controls@TDockTree@PruneZone$qqrp18Controls@TDockZone  +
mov eax [ebp+var_8] +
call sub_47F16C  +
xor edx edx +
push ebp  +
push offset loc_47FC7B  +
push dword ptr fs:[edx]  +
mov fs:[edx] esp +
lea edx [ebp+var_1C] +
mov ecx 4 +
mov eax [ebp+var_4] +
mov ebx [eax] +
call dword ptr [ebx+8]  +
lea edx [ebp+var_20] +
mov ecx 4 +
mov eax [ebp+var_4] +
mov ebx [eax] +
call dword ptr [ebx+8]  +
mov edi [ebp+var_20] +
dec edi  +
test edi edi +
jl loc_47FB63  +
inc edi  +
mov [ebp+var_1C] 0 +
push ebp  +
lea eax [ebp+var_C] +
call @Controls@_17114  +
pop ecx  +
cmp [ebp+var_C] 0 +
jz loc_47FB5D  +
lea ecx [ebp+var_10] +
mov eax [ebp+var_8] +
mov eax [eax+14h] +
mov edx [ebp+var_C] +
mov si 0FFB9h +
call @System@@CallDynaInst$qqrv  +
cmp [ebp+var_10] 0 +
jz loc_47FB5D  +
xor edx edx +
mov eax [ebp+var_10] +
call @Controls@TControl@SetVisible$qqro  +
push 0  +
mov eax [ebp+var_8] +
mov edx [eax+14h] +
xor ecx ecx +
mov eax [ebp+var_10] +
call @Controls@TControl@ManualDock$qqrp20Controls@TWinControlp17Controls@TControl15Controls@TAlign  +
inc [ebp+var_1C]  +
dec edi  +
jnz loc_47FB16  +
mov eax [ebp+var_8] +
lea edx [eax+68h] +
mov ecx 4 +
mov eax [ebp+var_4] +
mov ebx [eax] +
call dword ptr [ebx+8]  +
xor eax eax +
mov [ebp+var_18] eax +
xor esi esi +
lea edx [ebp+var_14] +
mov ecx 4 +
mov eax [ebp+var_4] +
mov ebx [eax] +
call dword ptr [ebx+8]  +
mov eax [ebp+var_14] +
cmp eax dword_4E67F4 +
jz loc_47FC65  +
mov ecx [ebp+var_8] +
mov dl 1 +
mov eax ds:off_472D94 +
call unknown_libname_289  +
mov ebx eax +
lea edx [ebx+10h] +
mov ecx 1 +
mov eax [ebp+var_4] +
mov edi [eax] +
call dword ptr [edi+8]  +
lea edx [ebx+20h] +
mov ecx 4 +
mov eax [ebp+var_4] +
mov edi [eax] +
call dword ptr [edi+8]  +
push ebp  +
lea eax [ebp+var_C] +
call @Controls@_17114  +
pop ecx  +
cmp [ebp+var_C] 0 +
jz loc_47FBF4  +
mov edx [ebp+var_C] +
mov eax ebx +
call @Controls@TDockZone@SetControlName$qqrx17System@AnsiString  +
test al al +
jnz loc_47FBF4  +
mov eax ebx +
call @System@TObject@Free$qqrv  +
jmp loc_47FB7D  +
cmp [ebp+var_14] 0 +
jnz loc_47FC02  +
mov eax [ebp+var_8] +
mov [eax+64h] ebx +
jmp loc_47FC58  +
mov eax [ebp+var_14] +
cmp eax [ebp+var_18] +
jnz loc_47FC18  +
mov [esi+0Ch] ebx +
mov [ebx+18h] esi +
mov eax [esi+14h] +
mov [ebx+14h] eax +
jmp loc_47FC58  +
mov eax [ebp+var_14] +
cmp eax [ebp+var_18] +
jle loc_47FC28  +
mov [esi+8] ebx +
mov [ebx+14h] esi +
jmp loc_47FC58  +
mov eax [ebp+var_14] +
cmp eax [ebp+var_18] +
jge loc_47FC58  +
mov eax esi +
mov edi [ebp+var_18] +
sub edi [ebp+var_14] +
test edi edi +
jle loc_47FC4C  +
mov [ebp+var_1C] 1 +
mov eax [eax+14h] +
inc [ebp+var_1C]  +
dec edi  +
jnz loc_47FC43  +
mov [eax+0Ch] ebx +
mov [ebx+18h] eax +
mov eax [eax+14h] +
mov [ebx+14h] eax +
mov eax [ebp+var_14] +
mov [ebp+var_18] eax +
mov esi ebx +
jmp loc_47FB7D  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_47FC82  +
mov eax [ebp+var_8] +
call @Controls@TDockTree@EndUpdate$qqrv  +
retn   +
jmp unknown_libname_539  +
jmp loc_47FC72  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_47FC9F  +
lea eax [ebp+var_C] +
call unknown_libname_540  +
retn   +
jmp unknown_libname_539  +
jmp loc_47FC8F  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
add esp 0FFFFFFF0h +
push ebx  +
push esi  +
push edi  +
mov esi edx +
mov ebx eax +
push 0  +
push 1  +
mov eax [ebp+arg_0] +
mov eax [eax-8] +
mov edi [eax+18h] +
mov eax edi +
add eax esi +
sub eax 2 +
push eax  +
lea eax [ebp+var_10] +
push eax  +
mov eax [ebp+arg_0] +
mov ecx edi +
add ecx ebx +
sub ecx 2 +
mov edx esi +
mov eax ebx +
call sub_49B708  +
lea eax [ebp+var_10] +
push eax  +
mov eax [ebp+arg_0] +
mov eax [eax-4] +
call @Graphics@TCanvas@GetHandle$qqrv  +
push eax  +
call DrawFrameControl  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
push ebx  +
push esi  +
push edi  +
mov esi ecx +
mov ebx edx +
mov edi eax +
mov eax [ebp+arg_4] +
mov eax [eax-4] +
mov eax [eax+10h] +
mov edx 80000014h +
call @TPen@SetColor$qqr6TColor  +
mov eax [ebp+arg_4] +
mov eax [eax-4] +
mov ecx ebx +
mov edx esi +
call @Graphics@TCanvas@MoveTo$qqrii  +
mov eax [ebp+arg_4] +
mov eax [eax-4] +
mov ecx ebx +
mov edx edi +
call @Graphics@TCanvas@LineTo$qqrii  +
mov eax [ebp+arg_4] +
mov eax [eax-4] +
mov ecx [ebp+arg_0] +
mov edx edi +
call @Graphics@TCanvas@LineTo$qqrii  +
mov eax [ebp+arg_4] +
mov eax [eax-4] +
mov eax [eax+10h] +
mov edx 80000010h +
call @TPen@SetColor$qqr6TColor  +
mov eax [ebp+arg_4] +
mov eax [eax-4] +
mov ecx [ebp+arg_0] +
mov edx esi +
call @Graphics@TCanvas@LineTo$qqrii  +
mov ecx ebx +
dec ecx  +
mov eax [ebp+arg_4] +
mov eax [eax-4] +
mov edx esi +
call @Graphics@TCanvas@LineTo$qqrii  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
add esp 0FFFFFFF8h +
push ebx  +
mov [ebp+var_4] edx +
mov [ebp+var_8] eax +
mov ebx [ebp+arg_0] +
mov eax [ebp+var_8] +
mov eax [eax+14h] +
mov al [eax+5Bh] +
dec eax  +
sub al 2 +
jnb loc_47FDFA  +
push ebp  +
mov edx [ebx+4] +
inc edx  +
mov eax [ebx] +
inc eax  +
call @Controls@_17054  +
pop ecx  +
push ebp  +
mov edx [ebx+0Ch] +
sub edx 2 +
push edx  +
mov edx [ebx+4] +
mov ecx [ebp+var_8] +
add edx [ecx+18h] +
inc edx  +
mov eax [ebx] +
mov ecx eax +
add ecx 5 +
add eax 3 +
call @Controls@_17117  +
pop ecx  +
push ebp  +
mov edx [ebx+0Ch] +
sub edx 2 +
push edx  +
mov edx [ebx+4] +
mov ecx [ebp+var_8] +
add edx [ecx+18h] +
inc edx  +
mov eax [ebx] +
mov ecx eax +
add ecx 8 +
add eax 6 +
call @Controls@_17117  +
pop ecx  +
jmp loc_47FE5B  +
push ebp  +
mov eax [ebx+8] +
mov edx [ebp+var_8] +
sub eax [edx+18h] +
inc eax  +
mov edx [ebx+4] +
inc edx  +
call @Controls@_17054  +
pop ecx  +
push ebp  +
mov eax [ebx+4] +
mov edx eax +
add edx 5 +
push edx  +
mov ecx [ebx+8] +
mov edx [ebp+var_8] +
sub ecx [edx+18h] +
sub ecx 2 +
mov edx eax +
add edx 3 +
mov eax [ebx] +
add eax 2 +
call @Controls@_17117  +
pop ecx  +
push ebp  +
mov eax [ebx+4] +
mov edx eax +
add edx 8 +
push edx  +
mov ecx [ebx+8] +
mov edx [ebp+var_8] +
sub ecx [edx+18h] +
sub ecx 2 +
mov edx eax +
add edx 6 +
mov eax [ebx] +
add eax 2 +
call @Controls@_17117  +
pop ecx  +
pop ebx  +
pop ecx  +
pop ecx  +
pop ebp  +
retn 4  +
***
add esp 0FFFFFFE4h +
add esp 0FFFFFFE4h +
push ebx  +
push esi  +
push edi  +
mov ebx ecx +
mov esi eax +
mov eax [esi+14h] +
call @Controls@TWinControl@GetVisibleDockClientCount$qqrv  +
mov edi eax +
test ebx ebx +
jz loc_47FFF5  +
cmp byte ptr [ebx+9Ch] 0 +
jz loc_47FFF5  +
cmp edi 2 +
jge loc_4800A1  +
mov eax [esi+14h] +
call @Controls@TControl@GetClientHeight$qqrv  +
push eax  +
lea eax [ebp+var_1C] +
push eax  +
mov eax [esi+14h] +
call @Controls@TControl@GetClientWidth$qqrv  +
mov ecx eax +
xor edx edx +
xor eax eax +
call sub_49B708  +
mov eax [ebp+lpPoints] +
push esi  +
push edi  +
lea esi [ebp+var_1C] +
mov edi eax +
movs   +
movs   +
movs   +
movs   +
pop edi  +
pop esi  +
test edi edi +
jle loc_48011C  +
mov al [ebp+arg_4] +
dec al  +
jz loc_480074  +
dec al  +
jz loc_48008C  +
dec al  +
jz loc_480045  +
dec al  +
jz loc_48005D  +
jmp loc_48011C  +
mov eax [ebp+lpPoints] +
mov eax [eax+8] +
sar eax 1 +
jns loc_480052  +
adc eax 0 +
mov edx [ebp+lpPoints] +
mov [edx+8] eax +
jmp loc_48011C  +
mov eax [ebp+lpPoints] +
mov eax [eax+8] +
sar eax 1 +
jns loc_48006A  +
adc eax 0 +
mov edx [ebp+lpPoints] +
mov [edx] eax +
jmp loc_48011C  +
mov eax [ebp+lpPoints] +
mov eax [eax+0Ch] +
sar eax 1 +
jns loc_480081  +
adc eax 0 +
mov edx [ebp+lpPoints] +
mov [edx+0Ch] eax +
jmp loc_48011C  +
mov eax [ebp+lpPoints] +
mov eax [eax+0Ch] +
sar eax 1 +
jns loc_480099  +
adc eax 0 +
mov edx [ebp+lpPoints] +
mov [edx+4] eax +
jmp loc_48011C  +
mov eax [ebx+40h] +
mov [ebp+var_4] eax +
mov eax [ebx+44h] +
mov [ebp+var_8] eax +
mov eax [ebx+48h] +
mov edi eax +
mov edx [ebx+4Ch] +
mov [ebp+var_C] edx +
mov dl [ebp+arg_4] +
add dl 0FDh +
sub dl 2 +
jnb loc_4800CE  +
mov edi eax +
sar edi 1 +
jns loc_4800E3  +
adc edi 0 +
jmp loc_4800E3  +
mov al [ebp+arg_4] +
dec eax  +
sub al 2 +
jnb loc_4800E3  +
mov eax [ebx+4Ch] +
sar eax 1 +
jns loc_4800E0  +
adc eax 0 +
mov [ebp+var_C] eax +
mov al [ebp+arg_4] +
sub al 2 +
jz loc_4800F3  +
sub al 2 +
jnz loc_4800F9  +
add [ebp+var_4] edi +
jmp loc_4800F9  +
mov eax [ebp+var_C] +
add [ebp+var_8] eax +
mov eax [ebp+var_C] +
push eax  +
lea eax [ebp+var_1C] +
push eax  +
mov ecx edi +
mov edx [ebp+var_8] +
mov eax [ebp+var_4] +
call sub_49B730  +
mov eax [ebp+lpPoints] +
push esi  +
lea esi [ebp+var_1C] +
mov edi eax +
movs   +
movs   +
movs   +
movs   +
pop esi  +
push 2  +
mov eax [ebp+lpPoints] +
push eax  +
push 0  +
mov eax [esi+14h] +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call MapWindowPoints  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 8  +
***
push ebx  +
mov ebx eax +
mov eax [ebx+0Ch] +
test eax eax +
jz loc_480153  +
mov edx [ebp+arg_0] +
push edx  +
call @Controls@_17121  +
pop ecx  +
mov eax [ebx+8] +
test eax eax +
jz loc_480164  +
mov edx [ebp+arg_0] +
push edx  +
call @Controls@_17121  +
pop ecx  +
mov eax ebx +
call @System@TObject@Free$qqrv  +
pop ebx  +
pop ebp  +
retn   +
***
push ebx  +
push esi  +
mov ebx edx +
mov esi eax +
test ebx ebx +
jz loc_4801C5  +
mov eax [ebx+8] +
test eax eax +
jz loc_48018B  +
push ebp  +
call @Controls@_17121  +
pop ecx  +
mov eax [ebx+18h] +
test eax eax +
jz loc_48019A  +
mov edx [ebx+0Ch] +
mov [eax+0Ch] edx +
jmp loc_4801A7  +
mov eax [ebx+14h] +
test eax eax +
jz loc_4801A7  +
mov edx [ebx+0Ch] +
mov [eax+8] edx +
mov eax [ebx+0Ch] +
test eax eax +
jz loc_4801B4  +
mov edx [ebx+18h] +
mov [eax+18h] edx +
cmp ebx [esi+64h] +
jnz loc_4801BE  +
xor eax eax +
mov [esi+64h] eax +
mov eax ebx +
call @System@TObject@Free$qqrv  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
mov esi edx +
mov ebx eax +
mov edx esi +
mov eax ebx +
call @Controls@TDockTree@FindControlZone$qqrp17Controls@TControl  +
test eax eax +
jz loc_480203  +
cmp eax [ebx+38h] +
jnz loc_4801EB  +
xor edx edx +
mov [eax+4] edx +
jmp loc_4801F4  +
mov edx eax +
mov eax ebx +
call @Controls@TDockTree@RemoveZone$qqrp18Controls@TDockZone  +
mov byte ptr [esi+9Ch] 0 +
mov eax [ebx+14h] +
mov edx [eax] +
call dword ptr [edx+7Ch]  +
pop esi  +
pop ebx  +
retn   +
***
xor ecx ecx +
push ecx  +
push ecx  +
push ecx  +
push ecx  +
push ebx  +
push esi  +
push edi  +
mov ebx edx +
mov esi eax +
xor eax eax +
push ebp  +
push offset loc_480475  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
test ebx ebx +
jnz loc_480265  +
lea edx [ebp+var_4] +
mov eax off_4EA7E4 +
call @System@LoadResString$qqrp20System@TResStringRec  +
lea eax [ebp+var_4] +
push eax  +
lea edx [ebp+var_8] +
mov eax off_4EA7E8 +
call @System@LoadResString$qqrp20System@TResStringRec  +
mov edx [ebp+var_8] +
pop eax  +
call @System@@LStrCat$qqrv  +
mov ecx [ebp+var_4] +
mov dl 1 +
mov eax ds:off_4A7A78 +
call sub_4AC17C  +
call @System@@RaiseExcept$qqrv  +
cmp dword ptr [ebx+4] 0 +
jnz loc_4802A6  +
lea edx [ebp+var_C] +
mov eax off_4EA7E4 +
call @System@LoadResString$qqrp20System@TResStringRec  +
lea eax [ebp+var_C] +
push eax  +
lea edx [ebp+var_10] +
mov eax off_4EA7EC +
call @System@LoadResString$qqrp20System@TResStringRec  +
mov edx [ebp+var_10] +
pop eax  +
call @System@@LStrCat$qqrv  +
mov ecx [ebp+var_C] +
mov dl 1 +
mov eax ds:off_4A7A78 +
call sub_4AC17C  +
call @System@@RaiseExcept$qqrv  +
mov eax [ebx+14h] +
call unknown_libname_290  +
cmp eax 1 +
jnz loc_4802C4  +
mov eax [esi+64h] +
xor edx edx +
mov [eax+8] edx +
mov byte ptr [eax+10h] 0 +
jmp loc_480453  +
cmp eax 2 +
jnz loc_4803FB  +
mov eax [ebx+18h] +
test eax eax +
jnz loc_4802D9  +
mov edi [ebx+0Ch] +
jmp loc_4802DB  +
mov edi eax +
cmp dword ptr [edi+4] 0 +
jz loc_480340  +
mov edx [esi+64h] +
mov eax [ebx+14h] +
cmp edx eax +
jnz loc_480315  +
mov eax [esi+64h] +
mov [eax+8] edi +
xor eax eax +
mov [edi+18h] eax +
xor eax eax +
mov [edi+0Ch] eax +
mov eax [esi+64h] +
call unknown_libname_292  +
mov edx eax +
mov eax edi +
call sub_47EEB8  +
mov eax edi +
call @Controls@TDockZone@Update$qqrv  +
jmp loc_48032B  +
mov byte ptr [eax+10h] 0 +
mov edx [edi+4] +
mov [eax+4] edx +
xor edx edx +
mov [eax+8] edx +
mov eax edi +
call @System@TObject@Free$qqrv  +
push esi  +
push offset @Controls@TDockTree@UpdateZone$qqrp18Controls@TDockZone  +
mov edx [ebx+14h] +
mov eax esi +
call @Controls@TDockTree@ForEachAt$qqrp18Controls@TDockZoneynpqqrp18Controls@TDockZone$v  +
jmp loc_480453  +
mov eax [ebx+14h] +
cmp eax [esi+64h] +
jnz loc_480383  +
mov edx [esi+68h] +
mov eax edi +
call @Controls@TDockZone@ExpandZoneLimit$qqri  +
mov eax [esi+64h] +
call @Controls@TDockZone@GetZoneLimit$qqrv  +
mov [esi+68h] eax +
mov eax [esi+64h] +
call @System@TObject@Free$qqrv  +
mov [esi+64h] edi +
xor eax eax +
mov [edi+0Ch] eax +
xor eax eax +
mov [edi+18h] eax +
xor eax eax +
mov [edi+14h] eax +
mov eax esi +
call @Controls@TDockTree@UpdateAll$qqrv  +
jmp loc_480453  +
mov eax [ebx+14h] +
mov eax [eax+18h] +
mov edx [edi+8] +
mov [edx+18h] eax +
test eax eax +
jnz loc_4803A1  +
mov eax [edi+8] +
mov edx [ebx+14h] +
mov edx [edx+14h] +
mov [edx+8] eax +
jmp loc_4803A7  +
mov edx [edi+8] +
mov [eax+0Ch] edx +
mov eax [edi+8] +
mov edx [ebx+14h] +
mov edx [edx+14h] +
mov [eax+14h] edx +
mov eax [eax+0Ch] +
mov edx [ebx+14h] +
mov edx [edx+14h] +
mov [eax+14h] edx +
cmp dword ptr [eax+0Ch] 0 +
jnz loc_4803B3  +
mov edx [ebx+14h] +
mov edx [edx+0Ch] +
mov [eax+0Ch] edx +
cmp dword ptr [eax+0Ch] 0 +
jz loc_4803DA  +
mov edx [eax+0Ch] +
mov [edx+18h] eax +
push esi  +
push offset @Controls@TDockTree@UpdateZone$qqrp18Controls@TDockZone  +
mov edx [eax+14h] +
mov eax esi +
call @Controls@TDockTree@ForEachAt$qqrp18Controls@TDockZoneynpqqrp18Controls@TDockZone$v  +
mov eax [ebx+14h] +
call @System@TObject@Free$qqrv  +
mov eax edi +
call @System@TObject@Free$qqrv  +
jmp loc_480453  +
mov eax [ebx+18h] +
test eax eax +
jnz loc_48041A  +
mov eax [ebx+14h] +
mov edx [ebx+0Ch] +
mov [eax+8] edx +
mov eax [ebx+0Ch] +
xor edx edx +
mov [eax+18h] edx +
call @Controls@TDockZone@Update$qqrv  +
jmp loc_480443  +
mov edx [ebx+0Ch] +
mov [eax+0Ch] edx +
mov edx [ebx+0Ch] +
test edx edx +
jz loc_48042A  +
mov [edx+18h] eax +
mov eax ebx +
call @Controls@TDockZone@GetZoneLimit$qqrv  +
mov edx eax +
mov eax [ebx+18h] +
call @Controls@TDockZone@ExpandZoneLimit$qqri  +
mov eax [ebx+18h] +
call @Controls@TDockZone@Update$qqrv  +
push esi  +
push offset @Controls@TDockTree@UpdateZone$qqrp18Controls@TDockZone  +
mov edx [ebx+14h] +
mov eax esi +
call @Controls@TDockTree@ForEachAt$qqrp18Controls@TDockZoneynpqqrp18Controls@TDockZone$v  +
mov eax ebx +
call @System@TObject@Free$qqrv  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_48047C  +
lea eax [ebp+var_10] +
mov edx 4 +
call unknown_libname_541  +
retn   +
jmp unknown_libname_539  +
jmp loc_480467  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
push edi  +
push ecx  +
add esp 0FFFFFFF8h +
push ebx  +
mov [ebp+var_4] eax +
mov eax [ebp+var_4] +
call unknown_libname_549  +
xor eax eax +
push ebp  +
push offset loc_480607  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov eax [ebp+var_4] +
call sub_4BB610  +
mov [ebp+var_8] eax +
lea edx [ebp+var_8] +
mov eax [ebp+arg_0] +
mov eax [eax-4] +
mov ecx 4 +
mov ebx [eax] +
call dword ptr [ebx+0Ch]  +
cmp [ebp+var_8] 0 +
jle loc_4805F1  +
mov edx [ebp+var_4] +
mov eax [ebp+arg_0] +
mov eax [eax-4] +
mov ecx [ebp+var_8] +
mov ebx [eax] +
call dword ptr [ebx+0Ch]  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_48060E  +
lea eax [ebp+var_4] +
call unknown_libname_540  +
retn   +
jmp unknown_libname_539  +
jmp loc_4805FE  +
pop ebx  +
pop ecx  +
pop ecx  +
pop ebp  +
retn   +
***
add esp 0FFFFFFF8h +
add esp 0FFFFFFECh +
push ebx  +
push esi  +
push edi  +
xor ecx ecx +
mov [ebp+var_14] ecx +
mov [ebp+var_4] edx +
mov [ebp+var_8] eax +
xor eax eax +
push ebp  +
push offset loc_480809  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov eax [ebp+var_8] +
lea edx [eax+70h] +
mov ecx 4 +
mov eax [ebp+var_4] +
mov ebx [eax] +
call dword ptr [ebx+0Ch]  +
mov dl 1 +
mov eax ds:off_49ABC4 +
call @System@TObject@$bctr$qqrv  +
mov [ebp+var_10] eax +
xor eax eax +
push ebp  +
push offset loc_4807B8  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov eax [ebp+var_8] +
mov eax [eax+14h] +
call @Controls@TWinControl@GetDockClientCount$qqrv  +
mov ebx eax +
dec ebx  +
test ebx ebx +
jl loc_480761  +
inc ebx  +
xor esi esi +
mov eax [ebp+var_8] +
mov eax [eax+14h] +
mov edx esi +
call @Controls@TWinControl@GetDockClients$qqri  +
mov edi eax +
cmp byte ptr [edi+57h] 0 +
jnz loc_48075D  +
cmp dword ptr [edi+8] 0 +
jz loc_48075D  +
mov edx [edi+8] +
mov eax [ebp+var_10] +
mov ecx [eax] +
call dword ptr [ecx+38h]  +
inc esi  +
dec ebx  +
jnz loc_480737  +
mov eax [ebp+var_10] +
mov edx [eax] +
call dword ptr [edx+14h]  +
mov [ebp+var_C] eax +
lea edx [ebp+var_C] +
mov ecx 4 +
mov eax [ebp+var_4] +
mov ebx [eax] +
call dword ptr [ebx+0Ch]  +
mov ebx [ebp+var_C] +
dec ebx  +
test ebx ebx +
jl loc_4807A2  +
inc ebx  +
xor esi esi +
push ebp  +
lea ecx [ebp+var_14] +
mov edx esi +
mov eax [ebp+var_10] +
mov edi [eax] +
call dword ptr [edi+0Ch]  +
mov eax [ebp+var_14] +
call @Controls@_17127  +
pop ecx  +
inc esi  +
dec ebx  +
jnz loc_480787  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4807BF  +
mov eax [ebp+var_10] +
call @System@TObject@Free$qqrv  +
retn   +
jmp unknown_libname_539  +
jmp loc_4807AF  +
mov eax [ebp+var_8] +
lea edx [eax+68h] +
mov ecx 4 +
mov eax [ebp+var_4] +
mov ebx [eax] +
call dword ptr [ebx+0Ch]  +
push ebp  +
mov eax [ebp+var_8] +
mov eax [eax+64h] +
xor edx edx +
call @Controls@_17128  +
pop ecx  +
mov edx offset dword_4E67F4 +
mov ecx 4 +
mov eax [ebp+var_4] +
mov ebx [eax] +
call dword ptr [ebx+0Ch]  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_480810  +
lea eax [ebp+var_14] +
call unknown_libname_540  +
retn   +
jmp unknown_libname_539  +
jmp loc_480800  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
push ebx  +
push esi  +
mov ebx eax +
test ebx ebx +
jz loc_480899  +
mov eax ebx +
call sub_47EF68  +
test eax eax +
jnz loc_480877  +
mov eax [ebp+arg_0] +
mov eax [eax-4] +
cmp ebx [eax+64h] +
jz loc_480877  +
mov eax ebx +
call @Controls@TDockZone@GetVisible$qqrv  +
test al al +
jz loc_480877  +
mov eax [ebp+arg_0] +
mov eax [eax-4] +
mov eax [eax+64h] +
mov esi [ebx+14h] +
cmp eax esi +
jnz loc_480866  +
mov eax [ebp+arg_0] +
mov eax [eax-4] +
mov edx [eax+68h] +
mov eax ebx +
call sub_47EEB8  +
jmp loc_480877  +
mov eax [esi+14h] +
call @Controls@TDockZone@GetZoneLimit$qqrv  +
mov edx eax +
mov eax ebx +
call sub_47EEB8  +
mov eax [ebp+arg_0] +
push eax  +
mov eax ebx +
call sub_47EF90  +
call @Controls@_17130  +
pop ecx  +
mov eax [ebp+arg_0] +
push eax  +
mov eax ebx +
call sub_47EF68  +
call @Controls@_17130  +
pop ecx  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
push ecx  +
mov [ebp+var_4] eax +
test edx edx +
jnz loc_4808B4  +
mov eax [ebp+var_4] +
mov eax [eax+64h] +
mov edx [eax+8] +
push ebp  +
mov eax edx +
call @Controls@_17130  +
pop ecx  +
mov eax [ebp+var_4] +
mov eax [eax+14h] +
mov edx [eax] +
call dword ptr [edx+7Ch]  +
pop ecx  +
pop ebp  +
retn   +
***
push ebx  +
push esi  +
mov esi edx +
mov ebx eax +
mov edx esi +
mov eax ebx +
call @Controls@TDockTree@FindControlZone$qqrp17Controls@TControl  +
mov [ebx+38h] eax +
pop esi  +
pop ebx  +
retn   +
***
mov ebx edx +
push edi  +
add esp 0FFFFFFF8h +
mov esi ecx +
lea edi [esp+8+var_8] +
movs   +
movs   +
mov ebx eax +
mov [ebx+60h] edx +
mov eax [ebx+14h] +
call @Controls@TWinControl@GetHandle$qqrv  +
mov edx eax +
mov eax dword_4F1804 +
call @Controls@TMouse@SetCapture$qqrxui  +
mov eax [ebx+14h] +
call @Controls@TWinControl@GetHandle$qqrv  +
mov esi eax +
mov [ebx+5Ch] esi +
push 412h  +
push 0  +
push esi  +
call GetDCEx  +
mov [ebx+58h] eax +
mov eax [esp+8+var_8] +
mov [ebx+50h] eax +
mov eax [esp+8+var_4] +
mov [ebx+54h] eax +
mov eax ebx +
call @Controls@TDockTree@DrawSizeSplitter$qqrv  +
pop ecx  +
pop edx  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
xor edx edx +
cmp dword ptr [ebx+6Ch] 0 +
jnz loc_480A14  +
mov eax [ebx+14h] +
call @Controls@TWinControl@GetDockClientCount$qqrv  +
test eax eax +
jle loc_480A14  +
push ebx  +
push offset @Controls@TDockTree@UpdateZone$qqrp18Controls@TDockZone  +
xor edx edx +
mov eax ebx +
call @Controls@TDockTree@ForEachAt$qqrp18Controls@TDockZoneynpqqrp18Controls@TDockZone$v  +
pop ebx  +
retn   +
***
cmp dword ptr [eax+6Ch] 0 +
jnz locret_480A25  +
mov eax edx +
call @Controls@TDockZone@Update$qqrv  +
retn   +
***
add esp 0FFFFFFF0h +
mov ebx eax +
mov esi [ebx+60h] +
test esi esi +
jz loc_480B0B  +
mov eax [esi+14h] +
cmp byte ptr [eax+10h] 1 +
jnz loc_480A86  +
mov edx 2 +
mov eax esi +
call @Controls@TDockZone@GetTopLeft$qqri  +
mov [esp+10h+var_10] eax +
mov eax [ebx+0Ch] +
sar eax 1 +
jns loc_480A5C  +
adc eax 0 +
mov edx [ebx+54h] +
sub edx eax +
mov [esp+10h+var_C] edx +
mov edx 2 +
mov eax [ebx+60h] +
call @Controls@TDockZone@GetHeightWidth$qqri  +
add eax [esp+10h+var_10] +
mov [esp+10h+var_8] eax +
mov eax [esp+10h+var_C] +
add eax [ebx+0Ch] +
mov [esp+10h+var_4] eax +
jmp loc_480AC7  +
mov eax [ebx+0Ch] +
sar eax 1 +
jns loc_480A90  +
adc eax 0 +
mov edx [ebx+50h] +
sub edx eax +
mov [esp+10h+var_10] edx +
mov edx 1 +
mov eax esi +
call @Controls@TDockZone@GetTopLeft$qqri  +
mov [esp+10h+var_C] eax +
mov eax [esp+10h+var_10] +
add eax [ebx+0Ch] +
mov [esp+10h+var_8] eax +
mov edx 1 +
mov eax [ebx+60h] +
call @Controls@TDockZone@GetHeightWidth$qqri  +
add eax [esp+10h+var_C] +
mov [esp+10h+var_4] eax +
mov eax [ebx+10h] +
call @Graphics@TBrush@GetHandle$qqrv  +
push eax  +
mov eax [ebx+58h] +
push eax  +
call SelectObject  +
mov esi eax +
push 5A0049h  +
mov ecx [esp+14h+var_4] +
mov edx [esp+14h+var_C] +
sub ecx edx +
push ecx  +
mov ecx [esp+18h+var_8] +
mov eax [esp+18h+var_10] +
sub ecx eax +
push ecx  +
push edx  +
push eax  +
mov eax [ebx+58h] +
push eax  +
call PatBlt  +
push esi  +
mov eax [ebx+58h] +
push eax  +
call SelectObject  +
add esp 10h +
pop esi  +
pop ebx  +
retn   +
***
push ebx  +
add esp 0FFFFFFF8h +
add esp 0FFFFFFE0h +
push ebx  +
push esi  +
mov ebx eax +
mov eax ebx +
call @Controls@_17072  +
test al al +
jz loc_480C93  +
mov eax ebx +
call unknown_libname_291  +
mov edx [ebx+20h] +
sub edx eax +
mov [ebx+24h] edx +
jmp loc_480C98  +
xor eax eax +
mov [ebx+24h] eax +
mov esi [ebx+14h] +
test esi esi +
jz loc_480CB7  +
mov eax esi +
call @Controls@TDockZone@GetVisible$qqrv  +
test al al +
jnz loc_480CB7  +
mov eax [ebp+arg_0] +
push eax  +
mov eax [ebx+14h] +
call @Controls@_17142  +
pop ecx  +
mov eax ebx +
call @Controls@TDockZone@PrevVisible$qqrv  +
test eax eax +
jz loc_480CD1  +
mov eax ebx +
call @Controls@TDockZone@PrevVisible$qqrv  +
mov edx [ebx+20h] +
call @Controls@TDockZone@ExpandZoneLimit$qqri  +
mov eax [ebp+arg_0] +
mov eax [eax-4] +
push eax  +
push offset @Controls@TDockTree@UpdateZone$qqrp18Controls@TDockZone  +
mov eax [ebp+arg_0] +
mov eax [eax-4] +
mov edx [ebx+14h] +
call @Controls@TDockTree@ForEachAt$qqrp18Controls@TDockZoneynpqqrp18Controls@TDockZone$v  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
push ecx  +
add esp 0FFFFFFF0h +
push ebx  +
push esi  +
mov ebx ecx +
mov esi edx +
mov [ebp+var_4] eax +
mov edx esi +
mov eax [ebp+var_4] +
call @Controls@TDockTree@FindControlZone$qqrp17Controls@TControl  +
test eax eax +
jz loc_480E66  +
test bl bl +
jz loc_480E52  +
push ebp  +
call @Controls@_17143  +
pop ecx  +
jmp loc_480E59  +
push ebp  +
call @Controls@_17142  +
pop ecx  +
mov eax [ebp+var_4] +
mov eax [eax+14h] +
mov edx [eax] +
call dword ptr [edx+7Ch]  +
jmp loc_480EA7  +
test bl bl +
jz loc_480EA7  +
lea ecx [ebp+var_10] +
mov edx [esi+44h] +
mov eax [esi+40h] +
call @Olectrls@TOleControl@GetVariantProp$qqri  +
lea edx [ebp+var_10] +
lea ecx [ebp+var_8] +
mov eax [ebp+var_4] +
call @Controls@TDockTree@InternalHitTest$qqrrx12Types@TPointri  +
test eax eax +
jz loc_480E8F  +
mov ebx [eax+4] +
jmp loc_480E91  +
xor ebx ebx +
push ebx  +
mov edx ebx +
mov eax esi +
call @Controls@_17141  +
mov ecx eax +
mov edx esi +
mov eax [ebp+var_4] +
mov ebx [eax] +
call dword ptr [ebx+8]  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
add edi 0FFFFFFFCh +
mov eax [edi] +
mov ebx [eax+18h] +
mov eax [edi] +
mov esi [eax+60h] +
mov eax [esi+14h] +
cmp byte ptr [eax+10h] 1 +
jnz loc_480F05  +
mov eax esi +
mov edx 1 +
call @Controls@TDockZone@GetTopLeft$qqri  +
add eax ebx +
mov edx [edi] +
cmp eax [edx+54h] +
jl loc_480EE9  +
mov edx [edi] +
mov [edx+54h] eax +
mov eax [edi] +
mov edx [eax+60h] +
mov eax [edi] +
call @Controls@TDockTree@GetNextLimit$qqrp18Controls@TDockZone  +
sub eax ebx +
mov edx [edi] +
cmp eax [edx+54h] +
jg loc_480F39  +
mov edx [edi] +
mov [edx+54h] eax +
jmp loc_480F39  +
mov eax esi +
mov edx 2 +
call @Controls@TDockZone@GetTopLeft$qqri  +
add eax ebx +
mov edx [edi] +
cmp eax [edx+50h] +
jl loc_480F1F  +
mov edx [edi] +
mov [edx+50h] eax +
mov eax [edi] +
mov edx [eax+60h] +
mov eax [edi] +
call @Controls@TDockTree@GetNextLimit$qqrp18Controls@TDockZone  +
sub eax ebx +
mov edx [edi] +
cmp eax [edx+50h] +
jg loc_480F39  +
mov edx [edi] +
mov [edx+50h] eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
add esp 0FFFFFFB8h +
push ebx  +
push esi  +
push edi  +
xor ecx ecx +
mov [ebp+var_48] ecx +
mov ebx edx +
mov [ebp+var_4] eax +
xor eax eax +
push ebp  +
push offset loc_481318  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov eax [ebx] +
cmp eax 202h +
jg loc_480F8C  +
jz loc_48110B  +
sub eax 20h +
jz loc_48117C  +
sub eax 1E0h +
jz loc_480FC9  +
dec eax  +
jz loc_48105B  +
jmp loc_4812ED  +
sub eax 203h +
jz loc_48100C  +
sub eax 0AE2Dh +
jz loc_481223  +
sub eax 12h +
jnz loc_4812ED  +
mov eax [ebx+8] +
cmp dword ptr [eax] 0B00Bh +
jnz loc_4812ED  +
mov ecx [eax+4] +
mov edx [ebx+4] +
mov eax [ebp+var_4] +
call @Controls@TDockTree@ControlVisibilityChanged$qqrp17Controls@TControlo  +
jmp loc_4812ED  +
mov eax [ebp+var_4] +
cmp dword ptr [eax+60h] 0 +
jz loc_4812ED  +
mov eax [ebp+var_4] +
call @Controls@TDockTree@DrawSizeSplitter$qqrv  +
lea edx [ebp+var_44] +
mov eax [ebx+8] +
call unknown_libname_382  +
mov eax [ebp+var_4] +
mov edx [ebp+var_44] +
mov [eax+50h] edx +
mov edx [ebp+var_40] +
mov [eax+54h] edx +
push ebp  +
call @Controls@_17145  +
pop ecx  +
mov eax [ebp+var_4] +
call @Controls@TDockTree@DrawSizeSplitter$qqrv  +
jmp loc_4812ED  +
lea edx [ebp+var_44] +
mov eax [ebx+8] +
call unknown_libname_382  +
lea edx [ebp+var_44] +
lea ecx [ebp+var_10] +
mov eax [ebp+var_4] +
call @Controls@TDockTree@InternalHitTest$qqrrx12Types@TPointri  +
mov esi eax +
test esi esi +
jz loc_4812ED  +
cmp dword ptr [esi+4] 0 +
jz loc_4812ED  +
cmp [ebp+var_10] 2 +
jnz loc_4812ED  +
call @Controls@CancelDrag$qqrv  +
push 1  +
xor ecx ecx +
xor edx edx +
mov eax [esi+4] +
call @Controls@TControl@ManualDock$qqrp20Controls@TWinControlp17Controls@TControl15Controls@TAlign  +
jmp loc_4812ED  +
lea edx [ebp+Point] +
mov eax [ebx+8] +
call unknown_libname_382  +
lea ecx [ebp+var_10] +
lea edx [ebp+Point] +
mov eax [ebp+var_4] +
call @Controls@TDockTree@InternalHitTest$qqrrx12Types@TPointri  +
mov esi eax +
test esi esi +
jz loc_4812ED  +
cmp [ebp+var_10] 12h +
jnz loc_481096  +
lea ecx [ebp+Point] +
mov edx esi +
mov eax [ebp+var_4] +
call @Controls@TDockTree@SplitterMouseDown$qqrp18Controls@TDockZonerx14Windows@TPoint  +
jmp loc_4812ED  +
cmp [ebp+var_10] 2 +
jnz loc_4812ED  +
push 0  +
push 203h  +
push 203h  +
mov eax [ebp+var_4] +
mov eax [eax+14h] +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
lea eax [ebp+Msg] +
push eax  +
call PeekMessageA  +
test eax eax +
jnz loc_4810E2  +
mov eax [esi+4] +
mov edx ds:off_472320 +
call @System@@IsClass$qqrp14System@TObjectp17System@TMetaClass  +
test al al +
jz loc_4810E2  +
mov eax [esi+4] +
mov edx [eax] +
call dword ptr [edx+0C0h]  +
mov eax [esi+4] +
cmp byte ptr [eax+9Bh] 1 +
jnz loc_481302  +
cmp byte ptr [eax+5Dh] 1 +
jnz loc_481302  +
or ecx 0FFFFFFFFh +
xor edx edx +
call @Controls@TControl@BeginDrag$qqroi  +
jmp loc_481302  +
mov eax [ebp+var_4] +
cmp dword ptr [eax+60h] 0 +
jnz loc_48116F  +
lea edx [ebp+Point] +
mov eax [ebx+8] +
call unknown_libname_382  +
lea ecx [ebp+var_10] +
lea edx [ebp+Point] +
mov eax [ebp+var_4] +
call @Controls@TDockTree@InternalHitTest$qqrrx12Types@TPointri  +
mov esi eax +
test esi esi +
jz loc_4812ED  +
cmp [ebp+var_10] 14h +
jnz loc_4812ED  +
mov edi [esi+4] +
mov eax edi +
mov edx ds:off_462B40 +
call @System@@IsClass$qqrp14System@TObjectp17System@TMetaClass  +
test al al +
jz loc_481161  +
mov eax edi +
call @Forms@TCustomForm@Close$qqrv  +
jmp loc_4812ED  +
xor edx edx +
mov eax edi +
call @Controls@TControl@SetVisible$qqro  +
jmp loc_4812ED  +
mov eax [ebp+var_4] +
call @Controls@TDockTree@SplitterMouseUp$qqrv  +
jmp loc_4812ED  +
lea eax [ebp+Point] +
push eax  +
call GetCursorPos  +
lea ecx [ebp+var_44] +
lea edx [ebp+Point] +
mov eax [ebp+var_4] +
mov eax [eax+14h] +
call @Controls@TControl@ScreenToClient$qqrrx14Windows@TPoint  +
mov eax [ebp+var_44] +
mov [ebp+Point.x] eax +
mov eax [ebp+var_40] +
mov [ebp+Point.y] eax +
cmp word ptr [ebx+8] 1 +
jnz loc_4812ED  +
mov eax [ebp+var_4] +
mov eax [eax+14h] +
call @Controls@TWinControl@GetHandle$qqrv  +
cmp eax [ebx+4] +
jnz loc_4812ED  +
mov eax [ebp+var_4] +
mov eax [eax+14h] +
call @Controls@TWinControl@GetVisibleDockClientCount$qqrv  +
test eax eax +
jle loc_4812ED  +
lea ecx [ebp+var_10] +
lea edx [ebp+Point] +
mov eax [ebp+var_4] +
call @Controls@TDockTree@InternalHitTest$qqrrx12Types@TPointri  +
mov esi eax +
test esi esi +
jz loc_4812ED  +
cmp [ebp+var_10] 12h +
jnz loc_4812ED  +
mov eax [esi+14h] +
movzx eax byte ptr [eax+10h] +
movsx edx word_4E67F8[eax*2] +
mov eax off_4EA6CC +
mov eax [eax] +
call @Forms@TScreen@GetCursors$qqri  +
push eax  +
call SetCursor  +
mov dword ptr [ebx+0Ch] 1 +
jmp loc_481302  +
mov edx ebx +
mov esi [ebp+var_4] +
mov eax [esi+34h] +
call dword ptr [esi+30h]  +
cmp dword ptr [ebx+0Ch] 0 +
jnz loc_481302  +
lea ecx [ebp+var_10] +
mov eax [ebx+8] +
lea edx [eax+28h] +
mov eax [ebp+var_4] +
mov esi [eax] +
call dword ptr [esi+4]  +
mov esi eax +
cmp [ebp+var_10] 12h +
jnz loc_481261  +
mov eax [ebx+8] +
add eax 38h +
call unknown_libname_540  +
jmp loc_481302  +
test esi esi +
jz loc_481302  +
mov eax [ebp+var_10] +
sub eax 2 +
jz loc_48127A  +
sub eax 12h +
jnz loc_481302  +
lea edx [ebp+var_20] +
mov eax esi +
call @Controls@TControl@GetBoundsRect$qqrv  +
lea ecx [ebp+var_20] +
mov edx esi +
mov eax [ebp+var_4] +
mov edi [eax] +
call dword ptr [edi]  +
mov eax [ebp+var_20] +
sub eax [esi+40h] +
add eax eax +
sub [ebp+var_20] eax +
mov eax [ebp+var_1C] +
sub eax [esi+44h] +
add eax eax +
sub [ebp+var_1C] eax +
mov eax [esi+48h] +
mov edx [ebp+var_18] +
sub edx [ebp+var_20] +
sub eax edx +
add eax eax +
sub [ebp+var_18] eax +
mov eax [esi+4Ch] +
mov edx [ebp+var_14] +
sub edx [ebp+var_1C] +
sub eax edx +
add eax eax +
sub [ebp+var_14] eax +
lea edx [ebp+var_48] +
mov eax esi +
call @TControl@GetText$qqrv  +
mov edx [ebp+var_48] +
mov eax [ebx+8] +
add eax 38h +
call unknown_libname_542  +
mov eax [ebx+8] +
lea edi [eax+18h] +
lea esi [ebp+var_20] +
movs   +
movs   +
movs   +
movs   +
jmp loc_481302  +
mov eax [ebp+var_4] +
cmp word ptr [eax+32h] 0 +
jz loc_481302  +
mov edx ebx +
mov ebx [ebp+var_4] +
mov eax [ebx+34h] +
call dword ptr [ebx+30h]  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_48131F  +
lea eax [ebp+var_48] +
call unknown_libname_540  +
retn   +
jmp unknown_libname_539  +
jmp loc_48130F  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
test dl dl +
jz loc_481336  +
add esp 0FFFFFFF0h +
call unknown_libname_535  +
mov ebx edx +
mov esi eax +
xor edx edx +
mov eax esi +
call @System@TObject@$bctr$qqrv  +
mov byte ptr [esi+4] 1 +
mov dword ptr [esi+8] 5 +
mov eax off_4EA8B8 +
cmp dword ptr [eax] 2 +
jnz loc_481362  +
mov eax off_4EA8BC +
cmp dword ptr [eax] 4 +
jge loc_48138E  +
mov eax off_4EA8B8 +
cmp dword ptr [eax] 1 +
jnz loc_48138A  +
mov eax off_4EA8BC +
cmp dword ptr [eax] 4 +
jg loc_48138E  +
mov eax off_4EA8BC +
cmp dword ptr [eax] 4 +
jnz loc_48138A  +
mov eax off_4EA8C0 +
cmp dword ptr [eax] 0Ah +
jge loc_48138E  +
xor eax eax +
jmp loc_481390  +
mov al 1 +
mov [esi+0Dh] al +
xor edx edx +
mov eax esi +
call @Controls@TMouse@SettingChanged$qqri  +
mov eax esi +
test bl bl +
jz loc_4813B1  +
call sub_4BABC8  +
pop large dword ptr fs:0  +
add esp 0Ch +
mov eax esi +
pop esi  +
pop ebx  +
retn   +
***
call unknown_libname_536  +
mov ebx edx +
mov esi eax +
xor edx edx +
mov eax esi +
call @Controls@TMouse@SetCapture$qqrxui  +
mov edx ebx +
and dl 0FCh +
mov eax esi +
call sub_4BA7FC  +
test bl bl +
jle loc_4813E3  +
mov eax esi +
call @System@@ClassDestroy$qqrp14System@TObject  +
pop esi  +
pop ebx  +
retn   +
***
retn   +
***
push ebx  +
push 13h  +
mov eax off_4EA7F4 +
mov eax [eax] +
call eax  +
cmp eax 1 +
sbb eax eax +
inc eax  +
mov [ebx+0Ch] al +
pop ebx  +
retn   +
***
mov esi eax +
push 4Bh  +
mov eax off_4EA7F4 +
mov eax [eax] +
call eax  +
cmp eax 1 +
sbb ebx ebx +
inc ebx  +
mov [esi+20h] bl +
test bl bl +
jz loc_481447  +
push 0  +
lea eax [esi+10h] +
push eax  +
push 0  +
push 68h  +
call SystemParametersInfoA  +
pop esi  +
pop ebx  +
retn   +
***
mov ebx eax +
push esp  +
lea eax [ebx+10h] +
push eax  +
lea ecx [ebx+14h] +
lea edx [ebx+24h] +
lea eax [ebx+1Ch] +
call unknown_libname_384  +
mov [ebx+18h] eax +
cmp dword ptr [ebx+1Ch] 0 +
setnz al  +
mov [ebx+20h] al +
pop edx  +
pop ebx  +
retn   +
***
mov esi edx +
mov ebx eax +
mov eax ebx +
call sub_4813E8  +
cmp esi eax +
jz loc_481496  +
test esi esi +
jnz loc_481490  +
call ReleaseCapture  +
jmp loc_481496  +
push esi  +
call SetCapture  +
pop esi  +
pop ebx  +
retn   +
***
sub edx 1 +
jb loc_4814AB  +
sub edx 67h +
jz loc_4814CA  +
jmp loc_4814FB  +
mov eax ebx +
call @Controls@TMouse@GetMouseData$qqrv  +
cmp byte ptr [ebx+0Dh] 0 +
jnz loc_4814C1  +
mov eax ebx +
call @Controls@TMouse@GetRegisteredData$qqrv  +
jmp loc_4814FB  +
mov eax ebx +
call @Controls@TMouse@GetNativeData$qqrv  +
pop ebx  +
retn   +
cmp byte ptr [ebx+20h] 0 +
jz loc_4814FB  +
cmp byte ptr [ebx+0Dh] 0 +
jz loc_4814E7  +
push 0  +
lea eax [ebx+10h] +
push eax  +
push 0  +
push 68h  +
call SystemParametersInfoA  +
jmp loc_4814FB  +
push 0  +
push 0  +
mov eax [ebx+14h] +
push eax  +
mov eax [ebx+18h] +
push eax  +
call SendMessageA  +
mov [ebx+10h] eax +
pop ebx  +
retn   +
***
push ecx  +
push ebx  +
mov eax off_4EA8CC +
cmp byte ptr [eax+0Ch] 0 +
jz loc_48166D  +
push 8000h  +
call SetErrorMode  +
mov [ebp+uMode] eax +
xor eax eax +
push ebp  +
push offset loc_481666  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
cmp dword_4F1858 0 +
jnz loc_481554  +
push offset ModuleName  +
call GetModuleHandleA  +
mov ebx eax +
push offset aWinnlsenableim  +
push ebx  +
call GetProcAddress  +
mov dword_4F1858 eax +
cmp hModule 0 +
jnz loc_48164F  +
push offset LibFileName  +
call LoadLibraryA  +
mov hModule eax +
cmp hModule 0 +
jz loc_48164F  +
push offset aImmgetcontext  +
mov eax hModule +
push eax  +
call GetProcAddress  +
mov dword_4F185C eax +
push offset aImmreleasecont  +
mov eax hModule +
push eax  +
call GetProcAddress  +
mov dword_4F1860 eax +
push offset aImmgetconversi  +
mov eax hModule +
push eax  +
call GetProcAddress  +
mov dword_4F1864 eax +
push offset aImmsetconversi  +
mov eax hModule +
push eax  +
call GetProcAddress  +
mov dword_4F1868 eax +
push offset aImmsetopenstat  +
mov eax hModule +
push eax  +
call GetProcAddress  +
mov dword_4F186C eax +
push offset aImmsetcomposit  +
mov eax hModule +
push eax  +
call GetProcAddress  +
mov dword_4F1870 eax +
push offset aImmsetcompos_0  +
mov eax hModule +
push eax  +
call GetProcAddress  +
mov dword_4F1874 eax +
push offset aImmgetcomposit  +
mov eax hModule +
push eax  +
call GetProcAddress  +
mov dword_4F1878 eax +
push offset aImmisime  +
mov eax hModule +
push eax  +
call GetProcAddress  +
mov dword_4F187C eax +
push offset aImmnotifyime  +
mov eax hModule +
push eax  +
call GetProcAddress  +
mov dword_4F1880 eax +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_48166D  +
mov eax [ebp+uMode] +
push eax  +
call SetErrorMode  +
retn   +
jmp unknown_libname_539  +
jmp loc_48165C  +
pop ebx  +
pop ecx  +
pop ebp  +
retn   +
***
cmp dword_4F1858 0 +
jz loc_481780  +
cmp dl 1 +
cmc   +
sbb edx edx +
push edx  +
push eax  +
call dword_4F1858  +
retn   +
xor eax eax +
retn   +
***
push edi  +
add esp 0FFFFFFF8h +
mov ebx edx +
mov esi eax +
mov eax off_4EA8CC +
cmp byte ptr [eax+0Ch] 0 +
jz loc_481857  +
cmp bl 3 +
jz loc_481857  +
test bl bl +
jnz loc_4817B8  +
xor edx edx +
mov eax esi +
call @Controls@Win32NLSEnableIME$qqruio  +
jmp loc_481857  +
mov dl 1 +
mov eax esi +
call @Controls@Win32NLSEnableIME$qqruio  +
cmp hModule 0 +
jz loc_481857  +
push esi  +
call dword_4F185C  +
mov edi eax +
test edi edi +
jz loc_481857  +
lea eax [esp+4] +
push eax  +
lea eax [esp+4] +
push eax  +
push edi  +
call dword_4F1864  +
mov eax ebx +
dec al  +
jz loc_4817F8  +
dec al  +
jz loc_481803  +
jmp loc_48180E  +
push 0  +
push edi  +
call dword_4F186C  +
jmp loc_48183E  +
push 1  +
push edi  +
call dword_4F186C  +
jmp loc_48183E  +
push 1  +
push edi  +
call dword_4F186C  +
lea eax [esp+4] +
push eax  +
lea eax [esp+4] +
push eax  +
push edi  +
call dword_4F1864  +
mov eax [esp+0] +
and eax 0FFFFFFF4h +
xor edx edx +
mov dl bl +
movzx edx byte ptr hModule[edx] +
or eax edx +
mov [esp+0] eax +
mov eax [esp+4] +
push eax  +
mov eax [esp+4] +
push eax  +
push edi  +
call dword_4F1868  +
push edi  +
push esi  +
call dword_4F1860  +
pop ecx  +
pop edx  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
cmp hModule 0 +
mov eax off_4EA6C8 +
mov eax [eax] +
call @System@TObject@Free$qqrv  +
mov eax off_4EA6C8 +
xor edx edx +
mov [eax] edx +
mov eax off_4EA6CC +
mov eax [eax] +
call @System@TObject@Free$qqrv  +
mov eax off_4EA6CC +
xor edx edx +
mov [eax] edx +
mov eax dword_4F1804 +
call @System@TObject@Free$qqrv  +
xor eax eax +
mov dword_4F1804 eax +
mov eax dword_4F1854 +
call @System@TObject@Free$qqrv  +
mov ax nAtom +
push eax  +
call GlobalDeleteAtom  +
mov eax offset dword_4F1818 +
call unknown_libname_540  +
mov ax word_4F1810 +
push eax  +
call GlobalDeleteAtom  +
mov eax offset dword_4F1814 +
call unknown_libname_540  +
cmp hModule 0 +
jz locret_4818F9  +
mov eax hModule +
push eax  +
call FreeLibrary  +
retn   +
***
add esp 0FFFFFFE0h +
push ebx  +
xor eax eax +
mov [ebp+var_10] eax +
mov [ebp+var_4] eax +
xor eax eax +
push ebp  +
push offset loc_481A74  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
lea eax [ebp+var_4] +
push eax  +
call GetCurrentProcessId  +
mov [ebp+var_C] eax +
mov [ebp+var_8] 0 +
lea edx [ebp+var_C] +
xor ecx ecx +
mov eax offset _str_Delphi__8X.Text +
call @Sysutils@Format$qqrx17System@AnsiStringpx14System@TVarRecxi  +
mov edx [ebp+var_4] +
mov eax offset dword_4F1814 +
call unknown_libname_542  +
mov eax dword_4F1814 +
call unknown_libname_550  +
push eax  +
call GlobalAddAtomA  +
mov word_4F1810 ax +
lea eax [ebp+var_10] +
push eax  +
mov eax hInstance +
mov [ebp+var_20] eax +
mov [ebp+var_1C] 0 +
call GetCurrentThreadId  +
mov [ebp+var_18] eax +
mov [ebp+var_14] 0 +
lea edx [ebp+var_20] +
mov ecx 1 +
mov eax offset _str_ControlOfs__8X_.Text +
call @Sysutils@Format$qqrx17System@AnsiStringpx14System@TVarRecxi  +
mov edx [ebp+var_10] +
mov eax offset dword_4F1818 +
call unknown_libname_542  +
mov eax dword_4F1818 +
call unknown_libname_550  +
push eax  +
call GlobalAddAtomA  +
mov nAtom ax +
mov eax dword_4F1818 +
call unknown_libname_550  +
push eax  +
call RegisterWindowMessageA  +
mov Msg eax +
mov dl 1 +
mov eax ds:off_49A63C +
call @Classes@TThreadList@$bctr$qqrv  +
mov dword_4F1854 eax +
call @Controls@_17160  +
mov dl 1 +
mov eax ds:off_472F64 +
call sub_481328  +
mov dword_4F1804 eax +
xor ecx ecx +
mov dl 1 +
mov eax ds:off_46318C +
call sub_46A050  +
mov edx off_4EA6CC +
mov [edx] eax +
xor ecx ecx +
mov dl 1 +
mov eax ds:off_463244 +
call @Forms@TApplication@$bctr$qqrp18Classes@TComponent  +
mov edx off_4EA6C8 +
mov [edx] eax +
mov eax off_4EA6C8 +
mov eax [eax] +
mov dl 1 +
call @Forms@TApplication@SetShowHint$qqro  +
mov ecx offset loc_4735C8 +
mov edx offset loc_4735D8 +
mov eax ds:@$xp$16Controls@TCursor +
call @Classes@RegisterIntegerConsts$qqrpvpqqrx17System@AnsiStringri$opqqrir17System@AnsiString$o  +
push offset aUser32_0  +
call GetModuleHandleA  +
mov ebx eax +
test ebx ebx +
jz loc_481A56  +
push offset aAnimatewindow  +
push ebx  +
call GetProcAddress  +
mov dword_4E66D0 eax +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_481A7B  +
lea eax [ebp+var_10] +
call unknown_libname_540  +
lea eax [ebp+var_4] +
call unknown_libname_540  +
retn   +
jmp unknown_libname_539  +
jmp loc_481A63  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
mov eax ebx +
mov ecx [eax] +
call dword ptr [ecx+0DCh]  +
mov eax ebx +
mov edx [eax] +
call dword ptr [edx+0E0h]  +
pop ebx  +
retn   +
***
xor eax eax +
xor eax eax +
push ebp  +
push offset loc_481BD2  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
sub dword_4F180C 1 +
jnb loc_481BC4  +
call GetVersion  +
and eax 0FFh +
cmp ax 4 +
setnb byte_4F1808  +
call @Controls@_17181  +
mov eax ds:off_471D9C +
call sub_49C374  +
mov eax ds:off_471D9C +
call sub_49C414  +
mov edx ds:off_471D9C +
mov eax ds:off_446850 +
call sub_49C3C0  +
mov edx ds:off_471D9C +
mov eax ds:off_447F30 +
call sub_49C3C0  +
mov edx ds:off_471D9C +
mov eax ds:off_448094 +
call sub_49C3C0  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_481BD9  +
retn   +
jmp unknown_libname_539  +
jmp locret_481BD1  +
pop ebp  +
retn   +
***
xor eax eax +
push ebp  +
push offset loc_481C31  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
inc dword_4F1884  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_481C38  +
retn   +
jmp unknown_libname_539  +
jmp locret_481C30  +
pop ebp  +
retn   +
***
sub dword_4F1884 1 +
retn   +
***
jmp fword ptr [esi]  +
***
add al [eax] +
jmp fword ptr [edi+ecx*4+48h]  +
***
popa   +
mov esp 280049A0h +
add al [eax] +
jmp fword ptr [eax]  +
***
jmp dword ptr [eax+0]  +
***
jmp esp  +
***
jmp dword ptr [eax+1004766h]  +
***
jmp fword ptr [eax]  +
***
daa   +
add al [eax] +
jmp dword ptr [edi]  +
***
jmp eax  +
***
pusha   +
add al [eax] +
jmp dword ptr [eax+2]  +
***
jmp near ptr loc_484E6C+1  +
jmp dword ptr [eax]  +
***
jmp fword ptr [eax+22h]  +
***
jmp esp  +
***
add al [eax] +
jmp dword ptr [eax]  +
***
jmp fword ptr [ebx+ebp+10049h]  +
***
jmp fword ptr [eax+1FF0002h]  +
***
mov [esp+8+var_8] 8 +
mov [esp+8+var_4] eax +
mov eax esp +
call @Commctrl@InitCommonControlsEx$qqrr23tagINITCOMMONCONTROLSEX  +
cmp eax 1 +
sbb ebx ebx +
inc ebx  +
test bl bl +
jnz loc_48688D  +
call InitCommonControls  +
mov eax ebx +
pop ecx  +
pop edx  +
pop ebx  +
retn   +
***
mov eax ebx +
call @Comctrls@InitCommonControl$qqri  +
test al al +
jnz loc_4868B9  +
mov ecx off_4EAAB4 +
mov dl 1 +
mov eax ds:off_49A4C0 +
call @Sysutils@Exception@$bctr$qqrp20System@TResStringRec  +
call @System@@RaiseExcept$qqrv  +
pop ebx  +
retn   +
***
add esp 0FFFFFFECh +
push ebx  +
push esi  +
xor eax eax +
mov [ebp+var_4] eax +
xor eax eax +
push ebp  +
push offset loc_486994  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
cmp dword_4F1894 0 +
jnz loc_486978  +
lea eax [ebp+var_4] +
mov edx offset _str_comctl32_dll.Text +
call unknown_libname_543  +
lea eax [ebp+dwHandle] +
push eax  +
mov eax [ebp+var_4] +
call unknown_libname_550  +
mov esi eax +
push esi  +
call GetFileVersionInfoSizeA  +
mov ebx eax +
test ebx ebx +
jz loc_486978  +
mov eax ebx +
call sub_4B97C0  +
mov [ebp+pBlock] eax +
xor eax eax +
push ebp  +
push offset loc_486971  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov eax [ebp+pBlock] +
push eax  +
push ebx  +
mov eax [ebp+dwHandle] +
push eax  +
push esi  +
call GetFileVersionInfoA  +
test eax eax +
jz loc_48695B  +
lea eax [ebp+puLen] +
push eax  +
lea eax [ebp+lpBuffer] +
push eax  +
push offset SubBlock  +
mov eax [ebp+pBlock] +
push eax  +
call VerQueryValueA  +
test eax eax +
jz loc_48695B  +
mov eax [ebp+lpBuffer] +
mov eax [eax+8] +
mov dword_4F1894 eax +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_486978  +
mov eax [ebp+pBlock] +
call sub_4B97E0  +
retn   +
jmp unknown_libname_539  +
jmp loc_486968  +
mov ebx dword_4F1894 +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_48699B  +
lea eax [ebp+var_4] +
call unknown_libname_540  +
retn   +
jmp unknown_libname_539  +
jmp loc_48698B  +
mov eax ebx +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
test dl dl +
jz loc_4869CE  +
add esp 0FFFFFFF0h +
call unknown_libname_535  +
mov ebx edx +
mov esi eax +
mov dword ptr [esi+10h] 32h +
mov byte ptr [esi+15h] 1 +
mov byte ptr [esi+17h] 1 +
xor edx edx +
mov eax esi +
call sub_49D6CC  +
mov eax esi +
call @Comctrls@TStatusPanel@ParentBiDiModeChanged$qqrv  +
mov eax esi +
test bl bl +
jz loc_486A06  +
call sub_4BABC8  +
pop large dword ptr fs:0  +
add esp 0Ch +
mov eax esi +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
mov esi edx +
mov ebx eax +
mov eax esi +
mov edx ds:off_482580 +
call @System@@IsClass$qqrp14System@TObjectp17System@TMetaClass  +
test al al +
jz loc_486A5A  +
mov edi esi +
mov edx [edi+0Ch] +
mov eax ebx +
call unknown_libname_331  +
mov edx [edi+10h] +
mov eax ebx +
call sub_486B78  +
mov dl [edi+14h] +
mov eax ebx +
call sub_486B20  +
mov dl [edi+15h] +
mov eax ebx +
call sub_486B30  +
mov dl [edi+18h] +
mov eax ebx +
call sub_486B40  +
jmp loc_486A63  +
mov edx esi +
mov eax ebx +
call @Classes@TPersistent@Assign$qqrp19Classes@TPersistent  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
cmp dl [eax+16h] +
xor al 1 +
retn   +
***
cmp dl [eax+17h] +
jz locret_486A91  +
mov [eax+17h] dl +
call @Comctrls@TStatusPanel@ParentBiDiModeChanged$qqrv  +
retn   +
***
mov ebx eax +
mov edx off_4EA8CC +
mov edx off_4EA8CC +
mov esi edx +
mov ebx eax +
mov eax esi +
mov edx [ebx+0Ch] +
call unknown_libname_542  +
cmp dword ptr [esi] 0 +
jnz loc_486B1A  +
mov edx esi +
mov eax ebx +
call unknown_libname_576  +
pop esi  +
pop ebx  +
retn   +
***
cmp dl [eax+14h] +
cmp dl [eax+15h] +
cmp dl [eax+18h] +
mov esi edx +
cmp edx [eax+10h] +
push edi  +
test dl dl +
jz loc_486B97  +
add esp 0FFFFFFF0h +
call unknown_libname_535  +
mov esi ecx +
mov ebx edx +
mov edi eax +
test esi esi +
jz loc_486BB8  +
mov eax esi +
mov edx [eax] +
call dword ptr [edx+0D0h]  +
mov ecx eax +
xor edx edx +
mov eax edi +
call @Dbexplif@TExploreList@$bctr$qqrp23Dbexplif@TExploreObject  +
jmp loc_486BC7  +
mov ecx ds:off_482580 +
xor edx edx +
mov eax edi +
call @Dbexplif@TExploreList@$bctr$qqrp23Dbexplif@TExploreObject  +
mov [edi+18h] esi +
mov eax edi +
test bl bl +
jz loc_486BDF  +
call sub_4BABC8  +
pop large dword ptr fs:0  +
add esp 0Ch +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov eax ebx +
mov esi edx +
mov ebx eax +
mov edx esi +
mov eax ebx +
call sub_49DAC0  +
pop esi  +
pop ebx  +
retn   +
***
mov esi edx +
mov ebx eax +
test esi esi +
jz loc_486C2C  +
mov eax esi +
call @Classes@TCollectionItem@GetIndex$qqrv  +
mov edx eax +
xor ecx ecx +
mov eax [ebx+18h] +
call @Comctrls@TCustomStatusBar@UpdatePanel$qqrio  +
pop esi  +
pop ebx  +
retn   +
xor ecx ecx +
mov dl 1 +
mov eax [ebx+18h] +
call @Comctrls@TCustomStatusBar@UpdatePanels$qqroo  +
pop esi  +
pop ebx  +
retn   +
***
push ecx  +
push ebx  +
push esi  +
test dl dl +
jz loc_486C4E  +
add esp 0FFFFFFF0h +
call unknown_libname_535  +
mov [ebp+var_1] dl +
mov ebx eax +
xor edx edx +
mov eax ebx +
call @Controls@TWinControl@$bctr$qqrp18Classes@TComponent  +
mov eax ds:dword_486CF0 +
mov [ebx+50h] eax +
mov edx 8000000Fh +
mov eax ebx +
call @Controls@TControl@SetColor$qqr15Graphics@TColor  +
mov edx 13h +
mov eax ebx +
call @Controls@TControl@SetHeight$qqri  +
mov dl 2 +
mov eax ebx +
call @Controls@TControl@SetAlign$qqr15Controls@TAlign  +
mov eax ebx +
mov edx [eax] +
call dword ptr [edx+0C8h]  +
mov [ebx+208h] eax +
mov dl 1 +
mov eax ds:off_4713DC +
call @Graphics@TCanvas@$bctr$qqrv  +
mov esi eax +
mov [ebx+20Ch] esi +
mov eax esi +
mov edx ebx +
call @Controls@TControlCanvas@SetControl$qqrp17Controls@TControl  +
mov byte ptr [ebx+215h] 1 +
xor edx edx +
mov eax ebx +
call @Controls@TControl@SetParentFont$qqro  +
mov byte ptr [ebx+217h] 1 +
mov eax ebx +
call @Comctrls@TCustomStatusBar@SyncToSystemFont$qqrv  +
mov eax ebx +
cmp [ebp+var_1] 0 +
jz loc_486CE7  +
call sub_4BABC8  +
pop large dword ptr fs:0  +
add esp 0Ch +
mov eax ebx +
pop esi  +
pop ebx  +
pop ecx  +
pop ebp  +
retn   +
***
call unknown_libname_536  +
mov ebx edx +
mov esi eax +
mov eax [esi+20Ch] +
call @System@TObject@Free$qqrv  +
mov eax [esi+208h] +
call @System@TObject@Free$qqrv  +
mov edx ebx +
and dl 0FCh +
mov eax esi +
call @Controls@TWinControl@$bdtr$qqrv  +
test bl bl +
jle loc_486D2C  +
mov eax esi +
call @System@@ClassDestroy$qqrp14System@TObject  +
pop esi  +
pop ebx  +
retn   +
***
mov esi edx +
mov ebx eax +
mov eax 4 +
call @Comctrls@InitCommonControl$qqri  +
mov edx esi +
mov eax ebx +
call @Controls@TWinControl@CreateParams$qqrr22Controls@TCreateParams  +
mov ecx offset aMsctls_statusb +
mov edx esi +
mov eax ebx +
call @Controls@TWinControl@CreateSubClass$qqrr22Controls@TCreateParamspc  +
cmp byte ptr [ebx+215h] 0 +
jz loc_486D69  +
cmp byte ptr [ebx+216h] 0 +
jnz loc_486D6D  +
xor eax eax +
jmp loc_486D6F  +
mov al 1 +
and eax 7Fh +
mov eax dword_4E6828[eax*4] +
or [esi+4] eax +
and dword ptr [esi+24h] 0FFFFFFFDh +
pop esi  +
pop ebx  +
retn   +
***
xor edx edx +
jz loc_486E3F  +
mov ebx eax +
mov edx eax +
mov eax [ebx+22Ch] +
call dword ptr [ebx+228h]  +
mov al 1 +
pop ebx  +
retn   +
xor eax eax +
pop ebx  +
retn   +
***
jz loc_486E64  +
push ecx  +
mov ebx eax +
mov ecx edx +
mov edx eax +
mov eax [ebx+224h] +
call dword ptr [ebx+220h]  +
pop ebx  +
retn   +
mov edx ecx +
mov eax [eax+20Ch] +
call @Graphics@TCanvas@FillRect$qqrrx11Types@TRect  +
pop ebx  +
retn   +
***
cmp dl [ebx+214h] +
jz loc_486EBD  +
mov [ebx+214h] dl +
mov eax ebx +
call @Controls@TWinControl@HandleAllocated$qqrv  +
test al al +
jz loc_486EBD  +
push 0  +
xor eax eax +
mov al [ebx+214h] +
push eax  +
push 409h  +
mov eax ebx +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call SendMessageA  +
pop ebx  +
retn   +
***
push ecx  +
push ebx  +
mov [ebp+var_1] cl +
mov ebx edx +
cmp [ebp+arg_0] 0 +
jz loc_486ED8  +
lea eax [ebp-1] +
call @Controls@ChangeBiDiModeAlignment$qqrr18Classes@TAlignment  +
mov al [ebp+var_1] +
dec al  +
jz loc_486EF6  +
dec al  +
jnz loc_486F07  +
mov edx ebx +
mov ecx 1 +
mov eax offset _str___13.Text +
call @System@@LStrInsert$qqrv  +
jmp loc_486F07  +
mov edx ebx +
mov ecx 1 +
mov eax offset _str____0.Text +
call @System@@LStrInsert$qqrv  +
pop ebx  +
pop ecx  +
pop ebp  +
retn 4  +
***
mov ebx eax +
mov eax ebx +
mov si 0FFC8h +
call @System@@CallDynaInst$qqrv  +
push eax  +
lea edx [ebx+210h] +
xor ecx ecx +
mov eax ebx +
call unknown_libname_333  +
mov eax ebx +
call @Controls@TWinControl@HandleAllocated$qqrv  +
test al al +
jz loc_486F87  +
mov eax [ebx+210h] +
call unknown_libname_550  +
push eax  +
mov eax ebx +
call @Controls@TControl@UseRightToLeftReading$qqrv_0  +
and eax 7Fh +
mov eax dword_4E6830[eax*4] +
or eax 0FFh +
push eax  +
push 401h  +
mov eax ebx +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call SendMessageA  +
pop esi  +
pop ebx  +
retn   +
***
mov esi edx +
push edi  +
mov ebx eax +
mov eax ebx +
call @Controls@TWinControl@CMBiDiModeChanged$qqrr17Messages@TMessage  +
mov eax ebx +
call @Controls@TWinControl@HandleAllocated$qqrv  +
test al al +
jz loc_48702A  +
cmp byte ptr [ebx+214h] 0 +
jnz loc_487023  +
mov eax [ebx+208h] +
call sub_49DAB8  +
mov edi eax +
dec edi  +
test edi edi +
jl loc_487016  +
inc edi  +
xor esi esi +
mov edx esi +
mov eax [ebx+208h] +
call sub_486BF4  +
cmp byte ptr [eax+17h] 0 +
jz loc_487012  +
mov edx esi +
mov eax [ebx+208h] +
call sub_486BF4  +
call @Comctrls@TStatusPanel@ParentBiDiModeChanged$qqrv  +
inc esi  +
dec edi  +
jnz loc_486FED  +
mov cl 1 +
mov dl 1 +
mov eax ebx +
call @Comctrls@TCustomStatusBar@UpdatePanels$qqroo  +
jmp loc_48702A  +
mov eax ebx +
call @Comctrls@TCustomStatusBar@UpdateSimpleText$qqrv  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
add esp 0FFFFFFF0h +
push ebx  +
push esi  +
push edi  +
mov [ebp+var_4] eax +
mov eax [ebp+var_4] +
call @Controls@TWinControl@HandleAllocated$qqrv  +
test al al +
jz loc_4871E8  +
mov eax [ebp+var_4] +
cmp byte ptr [eax+214h] 0 +
jnz loc_4871E8  +
mov eax [ebp+var_4] +
mov eax [eax+208h] +
call sub_49DAB8  +
test eax eax +
jle loc_4871E8  +
mov eax [ebp+var_4] +
call @Controls@TControl@GetClientWidth$qqrv  +
mov [ebp+var_C] eax +
mov eax [ebp+var_4] +
mov eax [eax+208h] +
xor edx edx +
call sub_486BF4  +
mov eax [eax+10h] +
mov [ebp+var_8] eax +
mov eax [ebp+var_4] +
mov eax [eax+208h] +
call sub_49DAB8  +
mov ebx eax +
sub ebx 2 +
test ebx ebx +
jl loc_4870C7  +
inc ebx  +
xor esi esi +
mov eax [ebp+var_4] +
mov eax [eax+208h] +
mov edx esi +
call sub_486BF4  +
mov eax [eax+10h] +
sub [ebp+var_C] eax +
inc esi  +
dec ebx  +
jnz loc_4870AD  +
mov ecx [ebp+var_4] +
mov dl 1 +
mov eax ds:off_482724 +
call @Comctrls@TStatusPanels@$bctr$qqrp25Comctrls@TCustomStatusBar  +
mov [ebp+var_10] eax +
xor eax eax +
push ebp  +
push offset loc_48718A  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov eax [ebp+var_4] +
mov eax [eax+208h] +
call sub_49DAB8  +
mov ebx eax +
dec ebx  +
test ebx ebx +
jl loc_487126  +
inc ebx  +
xor esi esi +
mov eax [ebp+var_10] +
call sub_486BE8  +
mov edi eax +
mov eax [ebp+var_4] +
mov eax [eax+208h] +
mov edx esi +
call sub_486BF4  +
mov edx eax +
mov eax edi +
mov ecx [eax] +
call dword ptr [ecx+8]  +
inc esi  +
dec ebx  +
jnz loc_4870FF  +
mov eax [ebp+var_4] +
mov eax [eax+208h] +
call sub_49DAB8  +
mov ebx eax +
dec ebx  +
test ebx ebx +
jl loc_487174  +
inc ebx  +
xor esi esi +
mov eax [ebp+var_4] +
mov eax [eax+208h] +
call sub_49DAB8  +
mov edx eax +
sub edx esi +
dec edx  +
mov eax [ebp+var_10] +
call sub_486BF4  +
push eax  +
mov eax [ebp+var_4] +
mov eax [eax+208h] +
mov edx esi +
call sub_486BF4  +
pop edx  +
mov ecx [eax] +
call dword ptr [ecx+8]  +
inc esi  +
dec ebx  +
jnz loc_48713E  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_487191  +
mov eax [ebp+var_10] +
call @System@TObject@Free$qqrv  +
retn   +
jmp unknown_libname_539  +
jmp loc_487181  +
mov eax [ebp-4] +
mov eax [eax+208h] +
call sub_49DAB8  +
dec eax  +
jle loc_4871DC  +
mov eax [ebp-4] +
mov ebx [eax+208h] +
mov eax ebx +
call sub_49DAB8  +
mov edx eax +
dec edx  +
mov eax ebx +
call sub_486BF4  +
mov edx [ebp-8] +
call sub_486B78  +
mov eax [ebp-4] +
mov eax [eax+208h] +
xor edx edx +
call sub_486BF4  +
mov edx [ebp-0Ch] +
call sub_486B78  +
mov cl 1 +
mov dl 1 +
mov eax [ebp-4] +
call @Comctrls@TCustomStatusBar@UpdatePanels$qqroo  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
cmp dl [eax+215h] +
jz locret_487205  +
mov [eax+215h] dl +
mov dl 1 +
call @Comctrls@TCustomStatusBar@ValidateSizeGrip$qqro  +
retn   +
***
cmp byte ptr [ebx+217h] 0 +
jz loc_487235  +
mov eax off_4EA6CC +
mov eax [eax] +
mov edx [eax+80h] +
mov eax ebx +
call @Controls@TControl@SetFont$qqrp14Graphics@TFont  +
mov edx 80000012h +
mov eax [ebx+68h] +
call @Graphics@TFont@SetColor$qqr15Graphics@TColor  +
pop ebx  +
retn   +
***
add esp 0FFFFFFE8h +
push ebx  +
push esi  +
push edi  +
xor ebx ebx +
mov [ebp+var_8] ebx +
mov [ebp+var_1] cl +
mov ebx edx +
mov esi eax +
xor eax eax +
push ebp  +
push offset loc_487398  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov eax esi +
call @Controls@TWinControl@HandleAllocated$qqrv  +
test al al +
jz loc_487382  +
mov edx ebx +
mov eax [esi+208h] +
call sub_486BF4  +
mov ebx eax +
cmp [ebp+var_1] 0 +
jnz loc_4872B9  +
mov byte ptr [ebx+19h] 1 +
lea eax [ebp+Rect] +
push eax  +
mov eax ebx +
call @Classes@TCollectionItem@GetIndex$qqrv  +
push eax  +
push 40Ah  +
mov eax esi +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call SendMessageA  +
push 0FFFFFFFFh  +
lea eax [ebp+Rect] +
push eax  +
mov eax esi +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call InvalidateRect  +
jmp loc_487382  +
cmp byte ptr [ebx+19h] 0 +
jz loc_487382  +
mov byte ptr [ebx+19h] 0 +
xor edi edi +
mov al [ebx+15h] +
sub al 1 +
jb loc_4872D6  +
dec al  +
jz loc_4872DD  +
jmp loc_4872E2  +
mov edi 100h +
jmp loc_4872E2  +
mov edi 200h +
mov eax ebx +
call @Comctrls@TStatusPanel@UseRightToLeftReading$qqrv  +
test al al +
jz loc_4872F3  +
or edi 400h +
cmp byte ptr [ebx+18h] 1 +
jnz loc_4872FF  +
or edi 1000h +
lea eax [ebp+var_8] +
mov edx [ebx+0Ch] +
call unknown_libname_543  +
mov eax ebx +
call @Comctrls@TStatusPanel@UseRightToLeftAlignment$qqrv  +
test al al +
jz loc_48732C  +
mov eax ebx +
call @Comctrls@TStatusPanel@UseRightToLeftAlignment$qqrv  +
push eax  +
lea edx [ebp+var_8] +
mov cl [ebx+14h] +
mov eax esi +
call unknown_libname_333  +
jmp loc_48735D  +
mov al [ebx+14h] +
dec al  +
jz loc_48734B  +
dec al  +
jnz loc_48735D  +
lea edx [ebp+var_8] +
mov ecx 1 +
mov eax offset _str___14.Text +
call @System@@LStrInsert$qqrv  +
jmp loc_48735D  +
lea edx [ebp+var_8] +
mov ecx 1 +
mov eax offset _str____1.Text +
call @System@@LStrInsert$qqrv  +
mov eax [ebp+var_8] +
call unknown_libname_550  +
push eax  +
mov eax ebx +
call @Classes@TCollectionItem@GetIndex$qqrv  +
or edi eax +
push edi  +
push 401h  +
mov eax esi +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call SendMessageA  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_48739F  +
lea eax [ebp+var_8] +
call unknown_libname_540  +
retn   +
jmp unknown_libname_539  +
jmp loc_48738F  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
push edi  +
push ebp  +
add esp 0FFFFFDF4h +
mov [esp+20Ch+var_20C] cl +
mov ebx edx +
mov esi eax +
mov eax esi +
call @Controls@TWinControl@HandleAllocated$qqrv  +
test al al +
jz loc_4874C9  +
mov eax [esi+208h] +
call sub_49DAB8  +
mov [esp+20Ch+wParam] eax +
test bl bl +
jz loc_4874AD  +
cmp [esp+20Ch+wParam] 80h +
jle loc_487409  +
mov [esp+20Ch+wParam] 80h +
cmp [esp+20Ch+wParam] 0 +
jnz loc_48744C  +
mov [esp+20Ch+lParam] 0FFFFFFFFh +
lea eax [esp+20Ch+lParam] +
push eax  +
push 1  +
push 404h  +
mov eax esi +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call SendMessageA  +
push offset dword_4874D4  +
push 0  +
push 401h  +
mov eax esi +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call SendMessageA  +
jmp loc_4874AD  +
xor eax eax +
mov [esp+20Ch+var_204] eax +
mov ebp [esp+20Ch+wParam] +
sub ebp 2 +
test ebp ebp +
jl loc_487485  +
inc ebp  +
xor edi edi +
lea ebx [esp+20Ch+lParam] +
mov edx edi +
mov eax [esi+208h] +
call sub_486BF4  +
mov eax [eax+10h] +
add [esp+20Ch+var_204] eax +
mov eax [esp+20Ch+var_204] +
mov [ebx] eax +
inc edi  +
add ebx 4 +
dec ebp  +
jnz loc_487464  +
mov eax [esp+20Ch+wParam] +
mov [esp+eax*4+20Ch+var_204] 0FFFFFFFFh +
lea eax [esp+20Ch+lParam] +
push eax  +
mov eax [esp+210h+wParam] +
push eax  +
push 404h  +
mov eax esi +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call SendMessageA  +
mov ebp [esp+20Ch+wParam] +
dec ebp  +
test ebp ebp +
jl loc_4874C9  +
inc ebp  +
xor edi edi +
mov cl [esp+20Ch+var_20C] +
mov edx edi +
mov eax esi +
call @Comctrls@TCustomStatusBar@UpdatePanel$qqrio  +
inc edi  +
dec ebp  +
jnz loc_4874B9  +
add esp 20Ch +
pop ebp  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov ebx edx +
mov esi eax +
mov edx ebx +
mov eax esi +
call sub_47C384  +
mov eax [ebx+4] +
test eax eax +
jz loc_4874F3  +
cmp eax 2Ah +
jnz loc_4874FA  +
mov eax esi +
call @Comctrls@TCustomStatusBar@SyncToSystemFont$qqrv  +
pop esi  +
pop ebx  +
retn   +
***
add esp 0FFFFFFF0h +
mov esi edx +
mov ebx eax +
mov eax [ebx+210h] +
call sub_4BB610  +
mov [esi+0Ch] eax +
pop esi  +
pop ebx  +
retn   +
***
mov esi edx +
mov ebx eax +
mov cl 1 +
xor edx edx +
mov eax ebx +
call @Comctrls@TCustomStatusBar@UpdatePanels$qqroo  +
mov edx esi +
mov eax ebx +
call @Controls@TWinControl@WMPaint$qqrr17Messages@TWMPaint  +
pop esi  +
pop ebx  +
retn   +
***
mov ebx eax +
test byte ptr [ebx+1Ch] 1 +
jnz loc_487659  +
mov eax ebx +
mov si 0FFCFh +
call @System@@CallDynaInst$qqrv  +
mov eax ebx +
mov edx [eax] +
call dword ptr [edx+80h]  +
pop esi  +
pop ebx  +
retn   +
***
cmp byte ptr [eax+217h] 0 +
jnz loc_48767D  +
cmp byte ptr [eax+59h] 0 +
jnz loc_48767D  +
cmp byte ptr [eax+56h] 0 +
jz loc_487680  +
xor eax eax +
retn   +
mov al 1 +
retn   +
***
cmp dl [ebx+217h] +
jz loc_4876AF  +
mov [ebx+217h] dl +
test dl dl +
jz loc_4876AF  +
cmp byte ptr [ebx+59h] 0 +
jz loc_4876A8  +
xor edx edx +
mov eax ebx +
call @Controls@TControl@SetParentFont$qqro  +
mov eax ebx +
call @Comctrls@TCustomStatusBar@SyncToSystemFont$qqrv  +
pop ebx  +
retn   +
***
mov eax ebx +
call @Controls@TWinControl@CMColorChanged$qqrr17Messages@TMessage  +
mov eax ebx +
call @Controls@TWinControl@RecreateWnd$qqrv  +
pop ebx  +
retn   +
***
mov eax ebx +
call @Controls@TControl@CMParentFontChanged$qqrr17Messages@TMessage  +
cmp byte ptr [ebx+217h] 0 +
jz loc_4876E8  +
cmp byte ptr [ebx+59h] 0 +
jz loc_4876E8  +
mov byte ptr [ebx+217h] 0 +
pop ebx  +
retn   +
***
mov esi edx +
mov eax ebx +
call sub_47C37C  +
mov eax ebx +
call @Controls@TWinControl@RecreateWnd$qqrv  +
pop ebx  +
retn   +
***
mov eax ebx +
call sub_47C40C  +
mov eax ebx +
call @Comctrls@TCustomStatusBar@SyncToSystemFont$qqrv  +
pop ebx  +
retn   +
***
cmp byte ptr [eax+217h] 0 +
jz loc_4877A4  +
mov cl ds:byte_4877B0 +
mov [eax+98h] cl +
mov ecx ebx +
call @Controls@TWinControl@ChangeScale$qqrii  +
pop ebx  +
retn   +
***
push ebx  +
mov ebx eax +
mov eax [ebp+arg_4] +
push eax  +
mov eax [ebp+cy] +
push eax  +
mov eax ebx +
call @Controls@TWinControl@SetBounds$qqriiii  +
mov dl 1 +
mov eax ebx +
call @Comctrls@TCustomStatusBar@ValidateSizeGrip$qqro  +
pop ebx  +
pop ebp  +
retn 8  +
***
retn   +
***
push edi  +
add esp 0FFFFFFECh +
mov [esp+14h+var_14] dl +
mov edi eax +
xor ebx ebx +
mov eax edi +
call @Forms@GetParentForm$qqrp17Controls@TControl  +
mov esi eax +
test esi esi +
jz loc_487849  +
mov al [esi+229h] +
sub al 2 +
jz loc_487808  +
sub al 3 +
jnz loc_487849  +
lea eax [esp+14h+var_13] +
push eax  +
lea ecx [esp+18h+var_8] +
mov edx [edi+4Ch] +
mov eax [edi+48h] +
call @Classes@Point$qqrii  +
lea edx [esp+18h+var_8] +
mov ecx esi +
mov eax edi +
call @Controls@TControl@ClientToParent$qqrrx12Types@TPointp20Controls@TWinControl  +
mov eax esi +
call @Controls@TControl@GetClientWidth$qqrv  +
cmp eax [esp+18h+var_18+1] +
jnz loc_487843  +
mov eax esi +
call @Controls@TControl@GetClientHeight$qqrv  +
cmp eax [esp+18h+var_13] +
jz loc_487847  +
xor ebx ebx +
jmp loc_487849  +
mov bl 1 +
cmp bl [edi+216h] +
jz loc_487864  +
mov [edi+216h] bl +
cmp byte ptr [esp+18h+var_18] 0 +
jz loc_487864  +
mov eax edi +
call @Controls@TWinControl@RecreateWnd$qqrv  +
add esp 14h +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov ebx eax +
mov ecx eax +
mov dl 1 +
mov eax ds:off_482724 +
call @Comctrls@TStatusPanels@$bctr$qqrp25Comctrls@TCustomStatusBar  +
retn   +
***
retn   +
***
push ecx  +
mov ecx ebx +
push edi  +
mov eax ebx +
call sub_487A34  +
call @Controls@TWinControl@GetHandle$qqrv  +
pop ebx  +
retn   +
***
mov eax [eax+4] +
mov eax [eax+4] +
retn   +
***
mov esi edx +
mov ebx eax +
test esi esi +
jz loc_487A75  +
mov eax ebx +
call sub_4881C8  +
test eax eax +
jnz loc_487A55  +
xor eax eax +
jmp loc_487A77  +
mov eax ebx +
call sub_4881C8  +
cmp esi eax +
jnz loc_487A64  +
mov al 1 +
jmp loc_487A77  +
mov eax ebx +
call sub_4881C8  +
mov edx esi +
call @Comctrls@TTreeNode@HasAsParent$qqrp18Comctrls@TTreeNode  +
pop esi  +
pop ebx  +
retn   +
mov al 1 +
pop esi  +
pop ebx  +
retn   +
***
add esp 0FFFFFFD8h +
mov esi edx +
mov ebx eax +
cmp byte ptr [ebx+24h] 0 +
jnz loc_487B07  +
mov eax esi +
mov edx [ebx+8] +
call @System@@LStrCmp$qqrv  +
jz loc_487B07  +
lea eax [ebx+8] +
mov edx esi +
call unknown_libname_542  +
mov [esp+28h+var_28] 1 +
mov eax [ebx+10h] +
mov [esp+28h+var_24] eax +
mov [esp+28h+var_18] 0FFFFFFFFh +
mov eax ebx +
call sub_487A20  +
mov edx esp +
call unknown_libname_399  +
mov eax ebx +
call sub_487A34  +
mov al [eax+25Bh] +
add al 0FEh +
sub al 2 +
jnb loc_487B07  +
cmp byte ptr [ebx+25h] 0 +
jz loc_487B07  +
mov eax ebx +
call sub_4881C8  +
test eax eax +
jz loc_487AF9  +
mov eax ebx +
call sub_4881C8  +
xor edx edx +
call unknown_libname_339  +
jmp loc_487B07  +
mov eax ebx +
call sub_487A34  +
xor edx edx +
call unknown_libname_341  +
add esp 28h +
pop esi  +
pop ebx  +
retn   +
***
cmp byte ptr [ebx+24h] 0 +
jnz loc_487B7C  +
cmp edx [ebx+0Ch] +
jz loc_487B7C  +
mov [ebx+0Ch] edx +
mov eax ebx +
call sub_487A34  +
mov al [eax+25Bh] +
sub al 1 +
jz loc_487B36  +
sub al 2 +
jnz loc_487B7C  +
mov eax ebx +
call sub_487A34  +
cmp word ptr [eax+2D2h] 0 +
jz loc_487B7C  +
cmp byte ptr [ebx+24h] 0 +
jnz loc_487B7C  +
cmp byte ptr [ebx+25h] 0 +
jz loc_487B7C  +
mov eax ebx +
call sub_4881C8  +
test eax eax +
jz loc_487B6E  +
mov eax ebx +
call sub_4881C8  +
xor edx edx +
call unknown_libname_339  +
jmp loc_487B7C  +
mov eax ebx +
call sub_487A34  +
xor edx edx +
call unknown_libname_341  +
pop ebx  +
retn   +
***
add esp 0FFFFFFD4h +
mov [esp+2Ch+var_2C] dl +
mov esi eax +
xor ebx ebx +
cmp byte ptr [esi+24h] 0 +
jnz loc_487C0A  +
mov [esp+2Ch+lParam] 8 +
mov eax [esi+10h] +
mov [esp+2Ch+var_27] eax +
mov eax esi +
call sub_487A20  +
lea edx [esp+2Ch+lParam] +
call unknown_libname_398  +
test eax eax +
jz loc_487C0A  +
xor eax eax +
mov al [esp+2Ch+var_2C] +
cmp eax 4 +
ja loc_487C0A  +
jmp ds:off_487BC6[eax*4]  +
test [esp+2Ch+var_23] 4 +
setnz bl  +
jmp loc_487C0A  +
test [esp+2Ch+var_23] 1 +
setnz bl  +
jmp loc_487C0A  +
test [esp+2Ch+var_23] 2 +
setnz bl  +
jmp loc_487C0A  +
test [esp+2Ch+var_23] 20h +
setnz bl  +
jmp loc_487C0A  +
test [esp+2Ch+var_23] 8 +
setnz bl  +
mov eax ebx +
add esp 2Ch +
pop esi  +
pop ebx  +
retn   +
***
mov ebx eax +
mov ebx eax +
cmp byte ptr [ebx+24h] 0 +
jnz loc_487D00  +
cmp edx [ebx+14h] +
jz loc_487D00  +
mov eax edx +
mov [ebx+14h] eax +
mov [esp+28h+var_28] 12h +
mov edx [ebx+10h] +
mov [esp+28h+var_24] edx +
mov edx [ebx+4] +
mov edx [edx+4] +
cmp word ptr [edx+31Ah] 0 +
jz loc_487CEE  +
mov [esp+28h+var_10] 0FFFFFFFFh +
jmp loc_487CF2  +
mov [esp+28h+var_10] eax +
mov eax ebx +
call sub_487A20  +
mov edx esp +
call unknown_libname_399  +
add esp 28h +
pop ebx  +
retn   +
***
mov ebx eax +
cmp byte ptr [ebx+24h] 0 +
jnz loc_487D58  +
cmp edx [ebx+18h] +
jz loc_487D58  +
mov eax edx +
mov [ebx+18h] eax +
mov [esp+28h+var_28] 30h +
mov edx [ebx+10h] +
mov [esp+28h+var_24] edx +
mov edx [ebx+4] +
mov edx [edx+4] +
cmp word ptr [edx+322h] 0 +
jz loc_487D46  +
mov [esp+28h+var_C] 0FFFFFFFFh +
jmp loc_487D4A  +
mov [esp+28h+var_C] eax +
mov eax ebx +
call sub_487A20  +
mov edx esp +
call unknown_libname_399  +
add esp 28h +
pop ebx  +
retn   +
***
add esp 0FFFFFFD8h +
mov ebx eax +
cmp byte ptr [ebx+24h] 0 +
jnz loc_487DA7  +
cmp edx [ebx+1Ch] +
jz loc_487DA7  +
mov esi edx +
mov [ebx+1Ch] esi +
mov [esp+28h+var_28] 18h +
mov [esp+28h+var_1C] 0F00h +
mov eax [ebx+10h] +
mov [esp+28h+var_24] eax +
mov eax esi +
inc eax  +
call sub_4987EC  +
mov [esp+28h+var_20] eax +
mov eax ebx +
call sub_487A20  +
mov edx esp +
call unknown_libname_399  +
add esp 28h +
pop esi  +
pop ebx  +
retn   +
***
add esp 0FFFFFFD8h +
mov esi edx +
mov ebx eax +
cmp byte ptr [ebx+24h] 0 +
jnz loc_487DFC  +
cmp esi [ebx+20h] +
jz loc_487DFC  +
mov [ebx+20h] esi +
test esi esi +
jl loc_487DCC  +
dec esi  +
mov [esp+28h+var_28] 18h +
mov [esp+28h+var_1C] 0F000h +
mov eax [ebx+10h] +
mov [esp+28h+var_24] eax +
lea eax [esi+1] +
call sub_498834  +
mov [esp+28h+var_20] eax +
mov eax ebx +
call sub_487A20  +
mov edx esp +
call unknown_libname_399  +
add esp 28h +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
mov esi edx +
xor edi edi +
xor ebx ebx +
call sub_48828C  +
test eax eax +
jz loc_487E26  +
inc edi  +
mov edx eax +
call unknown_libname_337  +
cmp esi edi +
jl loc_487E2C  +
test eax eax +
jnz loc_487E16  +
cmp esi edi +
jnz loc_487E2C  +
mov bl 1 +
mov eax ebx +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push ecx  +
mov [esp+1+var_1] dl +
mov esi eax +
xor ebx ebx +
cmp byte ptr [esi+24h] 0 +
jnz loc_487E7F  +
mov eax esi +
call @Comctrls@TTreeNode@GetChildren$qqrv  +
test al al +
jz loc_487E7F  +
cmp [esp+1+var_1] 0 +
jz loc_487E6B  +
mov eax esi +
call sub_487A34  +
mov edx esi +
mov si 0FFB0h +
call @System@@CallDynaInst$qqrv  +
mov ebx eax +
jmp loc_487E7F  +
mov eax esi +
call sub_487A34  +
mov edx esi +
mov si 0FFB1h +
call @System@@CallDynaInst$qqrv  +
mov ebx eax +
mov eax ebx +
pop edx  +
pop esi  +
pop ebx  +
retn   +
***
mov ebx edx +
push ecx  +
push ebx  +
push esi  +
mov ebx edx +
mov [ebp+var_4] eax +
mov eax [ebp+var_4] +
cmp byte ptr [eax+24h] 0 +
jnz loc_487FB6  +
test cl cl +
jz loc_487F1A  +
mov esi [ebp+var_4] +
xor ecx ecx +
mov edx ebx +
mov eax esi +
call @Comctrls@TTreeNode@ExpandItem$qqroo  +
mov eax esi +
call @Comctrls@TTreeNode@GetNext$qqrv  +
mov esi eax +
test esi esi +
jz loc_487FB6  +
mov edx [ebp+var_4] +
mov eax esi +
call @Comctrls@TTreeNode@HasAsParent$qqrp18Comctrls@TTreeNode  +
test al al +
jnz loc_487EEB  +
jmp loc_487FB6  +
mov eax [ebp+var_4] +
call sub_487A34  +
mov byte ptr [eax+245h] 1 +
xor eax eax +
push ebp  +
push offset loc_487FAF  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
xor esi esi +
test bl bl +
jz loc_487F5C  +
mov dl 1 +
mov eax [ebp+var_4] +
call @Comctrls@TTreeNode@DoCanExpand$qqro  +
test al al +
jz loc_487F79  +
mov esi 2 +
mov dl 1 +
mov eax [ebp+var_4] +
call @Comctrls@TTreeNode@DoExpand$qqro  +
jmp loc_487F79  +
xor edx edx +
mov eax [ebp+var_4] +
call @Comctrls@TTreeNode@DoCanExpand$qqro  +
test al al +
jz loc_487F79  +
mov esi 1 +
xor edx edx +
mov eax [ebp+var_4] +
call @Comctrls@TTreeNode@DoExpand$qqro  +
test esi esi +
jz loc_487F92  +
mov eax [ebp+var_4] +
call sub_487A20  +
mov edx [ebp+var_4] +
mov edx [edx+10h] +
mov ecx esi +
call @Commctrl@TreeView_Expand$qqruip9_TREEITEMi  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_487FB6  +
mov eax [ebp+var_4] +
call sub_487A34  +
mov byte ptr [eax+245h] 0 +
retn   +
jmp unknown_libname_539  +
jmp loc_487F9F  +
pop esi  +
pop ebx  +
pop ecx  +
pop ebp  +
retn   +
***
mov ecx edx +
mov dl 1 +
call @Comctrls@TTreeNode@ExpandItem$qqroo  +
retn   +
***
mov ecx edx +
xor edx edx +
call @Comctrls@TTreeNode@ExpandItem$qqroo  +
retn   +
***
mov dl 4 +
mov ebx edx +
mov dl 3 +
mov ebx edx +
mov esi eax +
cmp byte ptr [esi+24h] 0 +
jnz loc_4880A6  +
mov eax esi +
call sub_487A20  +
test eax eax +
jz loc_4880A6  +
cmp dword ptr [esi+10h] 0 +
jz loc_4880A6  +
mov eax esi +
call sub_488008  +
cmp bl al +
jz loc_48806C  +
test bl bl +
jz loc_488051  +
mov eax esi +
call sub_487A20  +
mov edx [esi+10h] +
call @Commctrl@TreeView_SelectItem$qqruip9_TREEITEM  +
jmp loc_4880A6  +
mov eax esi +
call sub_488008  +
test al al +
jz loc_4880A6  +
mov eax esi +
call sub_487A20  +
xor edx edx +
call @Commctrl@TreeView_SelectItem$qqruip9_TREEITEM  +
jmp loc_4880A6  +
mov eax esi +
call sub_487A34  +
cmp byte ptr [eax+274h] 0 +
jz loc_4880A6  +
mov eax esi +
call sub_487A34  +
mov eax [eax+278h] +
cmp dword ptr [eax+8] 1 +
jle loc_4880A6  +
mov eax esi +
call sub_487A34  +
mov cl ds:byte_4880AC +
mov edx esi +
mov ebx [eax] +
call dword ptr [ebx+0E0h]  +
pop esi  +
pop ebx  +
retn   +
***
xor edx edx +
mov ebx edx +
mov esi eax +
mov eax esi +
call sub_4880B0  +
cmp bl al +
jz loc_4880D4  +
mov ecx ebx +
xor edx edx +
mov eax esi +
call @Comctrls@TTreeNode@SetState$qqr19Comctrls@TNodeStateo  +
pop esi  +
pop ebx  +
retn   +
***
mov dl 1 +
mov ebx edx +
add esp 0FFFFFFD8h +
mov esi eax +
xor ebx ebx +
cmp byte ptr [esi+24h] 0 +
jnz loc_48815F  +
mov [esp+28h+var_28] 40h +
mov eax [esi+10h] +
mov [esp+28h+var_24] eax +
mov eax esi +
call sub_487A20  +
mov edx esp +
call unknown_libname_398  +
test eax eax +
jz loc_48815F  +
cmp [esp+28h+var_8] 0 +
setnle bl  +
mov eax ebx +
add esp 28h +
pop esi  +
pop ebx  +
retn   +
***
mov ebx edx +
mov esi eax +
mov eax esi +
call sub_488188  +
cmp bl al +
jz loc_488184  +
mov ecx ebx +
mov dl 2 +
mov eax esi +
call @Comctrls@TTreeNode@SetState$qqr19Comctrls@TNodeStateo  +
pop esi  +
pop ebx  +
retn   +
***
mov dl 2 +
mov ebx eax +
cmp byte ptr [ebx+24h] 0 +
jnz loc_4881C0  +
mov [esp+28h+var_28] 40h +
mov eax [ebx+10h] +
mov [esp+28h+var_24] eax +
xor eax eax +
mov al dl +
mov [esp+28h+var_8] eax +
mov eax ebx +
call sub_487A20  +
mov edx esp +
call unknown_libname_399  +
add esp 28h +
pop ebx  +
retn   +
***
mov ebx eax +
xor esi esi +
mov eax ebx +
call sub_487A20  +
test eax eax +
jz loc_4881FC  +
cmp dword ptr [ebx+10h] 0 +
jz loc_4881FC  +
mov esi [ebx+4] +
mov eax esi +
call unknown_libname_340  +
mov edx [ebx+10h] +
call unknown_libname_397  +
mov edx eax +
mov eax esi +
call sub_488954  +
mov esi eax +
mov eax esi +
pop esi  +
pop ebx  +
retn   +
***
mov ebx eax +
xor esi esi +
mov eax ebx +
call sub_487A20  +
test eax eax +
jz loc_488238  +
cmp dword ptr [ebx+10h] 0 +
jz loc_488238  +
mov esi [ebx+4] +
mov eax esi +
call unknown_libname_340  +
mov edx [ebx+10h] +
call @Commctrl@TreeView_GetNextSibling$qqruip9_TREEITEM  +
mov edx eax +
mov eax esi +
call sub_488954  +
mov esi eax +
mov eax esi +
pop esi  +
pop ebx  +
retn   +
***
mov ebx eax +
xor esi esi +
mov eax ebx +
call sub_487A20  +
test eax eax +
jz loc_488274  +
cmp dword ptr [ebx+10h] 0 +
jz loc_488274  +
mov esi [ebx+4] +
mov eax esi +
call unknown_libname_340  +
mov edx [ebx+10h] +
call @Commctrl@TreeView_GetPrevSibling$qqruip9_TREEITEM  +
mov edx eax +
mov eax esi +
call sub_488954  +
mov esi eax +
mov eax esi +
pop esi  +
pop ebx  +
retn   +
***
test edx edx +
jz loc_488288  +
mov eax edx +
call @Comctrls@TTreeNode@getNextSibling$qqrv  +
retn   +
xor eax eax +
retn   +
***
mov ebx eax +
xor esi esi +
mov eax ebx +
call sub_487A20  +
test eax eax +
jz loc_4882C0  +
cmp dword ptr [ebx+10h] 0 +
jz loc_4882C0  +
mov esi [ebx+4] +
mov eax esi +
call unknown_libname_340  +
mov edx [ebx+10h] +
call unknown_libname_396  +
mov edx eax +
mov eax esi +
call sub_488954  +
mov esi eax +
mov eax esi +
pop esi  +
pop ebx  +
retn   +
***
mov ebx eax +
xor esi esi +
mov eax ebx +
call sub_487A20  +
test eax eax +
jz loc_488338  +
cmp dword ptr [ebx+10h] 0 +
jz loc_488338  +
mov eax ebx +
call sub_487A20  +
mov edx [ebx+10h] +
call unknown_libname_396  +
test eax eax +
jnz loc_488301  +
mov eax ebx +
call sub_487A20  +
mov edx [ebx+10h] +
call @Commctrl@TreeView_GetNextSibling$qqruip9_TREEITEM  +
mov esi [ebx+10h] +
jmp loc_488324  +
mov eax ebx +
call sub_487A20  +
mov edx esi +
call unknown_libname_397  +
mov esi eax +
mov eax ebx +
call sub_487A20  +
mov edx esi +
call @Commctrl@TreeView_GetNextSibling$qqruip9_TREEITEM  +
test eax eax +
jnz loc_48832C  +
test esi esi +
jnz loc_488306  +
mov edx eax +
mov eax [ebx+4] +
call sub_488954  +
mov esi eax +
mov eax esi +
pop esi  +
pop ebx  +
retn   +
***
add esp 0FFFFFFF0h +
push ebx  +
push esi  +
push edi  +
xor ecx ecx +
mov [ebp+var_4] ecx +
mov [ebp+var_8] ecx +
mov esi edx +
mov edi eax +
xor eax eax +
push ebp  +
push offset loc_4883CE  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov eax edi +
call sub_48828C  +
mov ebx eax +
jmp loc_48837A  +
mov edx ebx +
mov eax edi +
call unknown_libname_337  +
mov ebx eax +
dec esi  +
test ebx ebx +
jz loc_488382  +
test esi esi +
jg loc_48836E  +
test ebx ebx +
jnz loc_4883B3  +
lea eax [ebp+var_4] +
push eax  +
lea edx [ebp+var_8] +
mov eax off_4EA884 +
call @System@LoadResString$qqrp20System@TResStringRec  +
mov eax [ebp+var_8] +
mov [ebp+var_10] esi +
mov [ebp+var_C] 0 +
lea edx [ebp+var_10] +
xor ecx ecx +
call @Sysutils@Format$qqrx17System@AnsiStringpx14System@TVarRecxi  +
mov eax [ebp+var_4] +
call sub_48792C  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4883D5  +
lea eax [ebp+var_8] +
mov edx 2 +
call unknown_libname_541  +
retn   +
jmp unknown_libname_539  +
jmp loc_4883C0  +
mov eax ebx +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
push edi  +
call sub_48828C  +
add esp 0FFFFFFA4h +
add esp 0FFFFFFE8h +
xor edx edx +
call @Comctrls@TTreeNode@CustomSort$qqrpqqsiii$iio  +
retn   +
***
add esp 0FFFFFFF0h +
push ebx  +
push esi  +
push edi  +
mov edi ecx +
mov esi edx +
mov ebx eax +
mov [ebp+var_1] 0 +
cmp byte ptr [ebx+24h] 0 +
jnz loc_4887D1  +
mov eax [ebx+4] +
call sub_488984  +
test esi esi +
jnz loc_488773  +
mov eax offset @ComCtrls@_16891 +
mov [ebp+var_9] eax +
jmp loc_488776  +
mov [ebp+var_9] esi +
mov eax [ebx+10h] +
mov [ebp+lParam] eax +
mov [ebp+var_5] edi +
mov eax ebx +
call sub_487A20  +
lea edx [ebp+lParam] +
xor ecx ecx +
call @Commctrl@TreeView_SortChildrenCB$qqruirx11tagTVSORTCBi  +
cmp eax 1 +
sbb eax eax +
inc eax  +
mov [ebp+var_1] al +
cmp [ebp+arg_0] 0 +
jz loc_4887D1  +
mov eax ebx +
call sub_48828C  +
mov ebx eax +
test ebx ebx +
jz loc_4887D1  +
mov eax ebx +
call @Comctrls@TTreeNode@GetChildren$qqrv  +
test al al +
jz loc_4887C4  +
push 1  +
mov ecx edi +
mov edx esi +
mov eax ebx +
call @Comctrls@TTreeNode@CustomSort$qqrpqqsiii$iio  +
mov eax ebx +
call @Comctrls@TTreeNode@getNextSibling$qqrv  +
mov ebx eax +
test ebx ebx +
jnz loc_4887AC  +
mov al [ebp+var_1] +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 4  +
***
mov esi edx +
mov eax [eax+4] +
call @Controls@TWinControl@GetHandle$qqrv  +
retn   +
***
mov byte ptr [edx+25h] 1 +
mov dword ptr [ecx] 27h +
mov [ecx+24h] edx +
mov dword ptr [ecx+10h] 0FFFFFFFFh +
mov dword ptr [ecx+18h] 0FFFFFFFFh +
mov dword ptr [ecx+1Ch] 0FFFFFFFFh +
retn   +
***
add esp 0FFFFFFCCh +
mov eax ebx +
call unknown_libname_340  +
call @Commctrl@TreeView_GetRoot$qqrui  +
mov edx eax +
mov eax ebx +
call sub_488954  +
pop ebx  +
retn   +
***
mov ebx eax +
mov [eax+0Ch] edx +
retn   +
***
xor edx edx +
call @Comctrls@TCustomTreeView@CustomSort$qqrpqqsiii$iio  +
retn   +
***
add esp 0FFFFFFECh +
test dl dl +
jz loc_488A56  +
add esp 0FFFFFFF0h +
call unknown_libname_535  +
mov ebx edx +
mov esi eax +
xor edx edx +
mov eax esi +
call @Controls@TWinControl@$bctr$qqrp18Classes@TComponent  +
mov edx 96h +
mov eax esi +
call @Controls@TControl@SetWidth$qqri  +
mov edx 2Dh +
mov eax esi +
call @Controls@TControl@SetHeight$qqri  +
mov dl 1 +
mov eax esi +
call @Controls@TWinControl@SetTabStop$qqro  +
xor eax eax +
mov [esi+21Ch] eax +
mov dword ptr [esi+220h] 0Ah +
mov dword ptr [esi+20Ch] 1 +
mov dword ptr [esi+210h] 2 +
mov dword ptr [esi+224h] 1 +
mov dword ptr [esi+214h] 14h +
mov byte ptr [esi+209h] 0 +
mov byte ptr [esi+20Ah] 1 +
mov byte ptr [esi+208h] 0 +
mov eax ds:dword_488B04 +
not eax  +
and eax [esi+50h] +
mov [esi+50h] eax +
mov byte ptr [esi+218h] 1 +
mov eax esi +
test bl bl +
jz loc_488AFC  +
call sub_4BABC8  +
pop large dword ptr fs:0  +
add esp 0Ch +
mov eax esi +
pop esi  +
pop ebx  +
retn   +
***
mov esi edx +
mov ebx eax +
mov eax 4 +
call @Comctrls@InitCommonControl$qqri  +
mov edx esi +
mov eax ebx +
call @Controls@TWinControl@CreateParams$qqrr22Controls@TCreateParams  +
mov ecx offset aMsctls_trackba +
mov edx esi +
mov eax ebx +
call @Controls@TWinControl@CreateSubClass$qqrr22Controls@TCreateParamspc  +
mov eax [esi+4] +
xor edx edx +
mov dl [ebx+208h] +
or eax dword_4E6838[edx*4] +
xor edx edx +
mov dl [ebx+20Ah] +
or eax dword_4E6840[edx*4] +
xor edx edx +
mov dl [ebx+209h] +
or eax dword_4E684C[edx*4] +
or eax 40h +
or eax 20h +
mov [esi+4] eax +
mov eax [esi+24h] +
and eax 0FFFFFFFCh +
or eax 8 +
mov [esi+24h] eax +
cmp byte ptr [ebx+218h] 0 +
jnz loc_488B84  +
or dword ptr [esi+4] 80h +
pop esi  +
pop ebx  +
retn   +
***
mov eax ebx +
call @Controls@TWinControl@CreateWnd$qqrv  +
mov eax ebx +
call @Controls@TWinControl@HandleAllocated$qqrv  +
test al al +
jz loc_488C79  +
push 0  +
mov eax [ebx+214h] +
push eax  +
push 41Bh  +
mov eax ebx +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call SendMessageA  +
mov eax [ebx+20Ch] +
push eax  +
push 0  +
push 417h  +
mov eax ebx +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call SendMessageA  +
mov eax [ebx+210h] +
push eax  +
push 0  +
push 415h  +
mov eax ebx +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call SendMessageA  +
mov eax [ebx+21Ch] +
push eax  +
push 0  +
push 407h  +
mov eax ebx +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call SendMessageA  +
mov eax [ebx+220h] +
push eax  +
push 0  +
push 408h  +
mov eax ebx +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call SendMessageA  +
mov eax ebx +
call @Comctrls@TTrackBar@UpdateSelection$qqrv  +
mov eax [ebx+228h] +
push eax  +
push 1  +
push 405h  +
mov eax ebx +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call SendMessageA  +
push 1  +
mov eax [ebx+224h] +
push eax  +
push 414h  +
mov eax ebx +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call SendMessageA  +
pop ebx  +
retn   +
***
retn   +
***
push edi  +
push edi  +
mov eax ebx +
call @Controls@TWinControl@HandleAllocated$qqrv  +
test al al +
jz loc_488D2A  +
push 0  +
push 0  +
push 41Ch  +
mov eax ebx +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call SendMessageA  +
pop ebx  +
retn   +
mov eax [ebx+214h] +
pop ebx  +
retn   +
***
mov ebx eax +
cmp dl [ebx+208h] +
jz loc_488D7B  +
mov [ebx+208h] dl +
mov ax ds:word_488D80 +
and ax [ebx+1Ch] +
mov dx ds:word_488D84 +
cmp dx ax +
jnz loc_488D74  +
mov eax [ebx+4Ch] +
push eax  +
mov eax [ebx+48h] +
push eax  +
mov ecx [ebx+44h] +
mov edx [ebx+40h] +
mov eax ebx +
mov esi [eax] +
call dword ptr [esi+84h]  +
mov eax ebx +
call @Controls@TWinControl@RecreateWnd$qqrv  +
pop esi  +
pop ebx  +
retn   +
***
add esp 0FFFFFEF4h +
push ebx  +
push esi  +
push edi  +
xor ebx ebx +
mov [ebp+var_10C] ebx +
mov edi ecx +
mov esi edx +
mov ebx eax +
xor eax eax +
push ebp  +
push offset loc_488EC1  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
cmp edi [ebp+lParam] +
jle loc_488DFC  +
lea edx [ebp+var_108] +
mov eax [ebx] +
call @System@TObject@ClassName$qqrp17System@TMetaClass  +
lea eax [ebp+var_108] +
mov [ebp+var_8] eax +
mov [ebp+var_4] 4 +
lea eax [ebp+var_8] +
push eax  +
push 0  +
lea edx [ebp+var_10C] +
mov eax off_4EA718 +
call @System@LoadResString$qqrp20System@TResStringRec  +
mov ecx [ebp+var_10C] +
mov dl 1 +
mov eax ds:off_49A578 +
call sub_4AC1B8  +
call @System@@RaiseExcept$qqrv  +
cmp edi esi +
jle loc_488E02  +
mov esi edi +
cmp esi [ebp+lParam] +
jle loc_488E0A  +
mov esi [ebp+lParam] +
cmp edi [ebx+21Ch] +
jz loc_488E38  +
mov [ebx+21Ch] edi +
mov eax ebx +
call @Controls@TWinControl@HandleAllocated$qqrv  +
test al al +
jz loc_488E38  +
push edi  +
push 1  +
push 407h  +
mov eax ebx +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call SendMessageA  +
mov eax [ebx+220h] +
cmp eax [ebp+lParam] +
jz loc_488E6F  +
mov eax [ebp+lParam] +
mov [ebx+220h] eax +
mov eax ebx +
call @Controls@TWinControl@HandleAllocated$qqrv  +
test al al +
jz loc_488E6F  +
mov eax [ebp+lParam] +
push eax  +
push 1  +
push 408h  +
mov eax ebx +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call SendMessageA  +
cmp esi [ebx+228h] +
jz loc_488EA8  +
mov [ebx+228h] esi +
mov eax ebx +
call @Controls@TWinControl@HandleAllocated$qqrv  +
test al al +
jz loc_488E9D  +
push esi  +
push 1  +
push 405h  +
mov eax ebx +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call SendMessageA  +
mov eax ebx +
mov si 0FFB3h +
call @System@@CallDynaInst$qqrv  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_488EC8  +
lea eax [ebp+var_10C] +
call unknown_libname_540  +
retn   +
jmp unknown_libname_539  +
jmp loc_488EB5  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 4  +
***
mov ecx [eax+220h] +
push ecx  +
mov ecx [eax+21Ch] +
call @TTrackBar@SetParams$qqriii  +
retn   +
***
mov ecx [eax+220h] +
cmp edx ecx +
jg locret_488F00  +
push ecx  +
mov ecx [eax+228h] +
xchg ecx edx +
call @TTrackBar@SetParams$qqriii  +
retn   +
***
mov ecx [eax+21Ch] +
cmp edx ecx +
jl locret_488F1A  +
push edx  +
mov edx [eax+228h] +
call @TTrackBar@SetParams$qqriii  +
retn   +
***
cmp edx [ebx+224h] +
jz loc_488F53  +
mov [ebx+224h] edx +
mov eax ebx +
call @Controls@TWinControl@HandleAllocated$qqrv  +
test al al +
jz loc_488F53  +
push 1  +
mov eax [ebx+224h] +
push eax  +
push 414h  +
mov eax ebx +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call SendMessageA  +
pop ebx  +
retn   +
***
cmp dl [eax+20Ah] +
jz locret_488F6B  +
mov [eax+20Ah] dl +
call @Controls@TWinControl@RecreateWnd$qqrv  +
retn   +
***
cmp edx [ebx+20Ch] +
jz loc_488FB7  +
mov [ebx+20Ch] edx +
mov eax ebx +
call @Controls@TWinControl@HandleAllocated$qqrv  +
test al al +
jz loc_488FB7  +
mov eax [ebx+20Ch] +
push eax  +
push 0  +
push 417h  +
mov eax ebx +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call SendMessageA  +
pop ebx  +
retn   +
***
cmp edx [ebx+210h] +
jz loc_488FF3  +
mov [ebx+210h] edx +
mov eax ebx +
call @Controls@TWinControl@HandleAllocated$qqrv  +
test al al +
jz loc_488FF3  +
mov eax [ebx+210h] +
push eax  +
push 0  +
push 415h  +
mov eax ebx +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call SendMessageA  +
pop ebx  +
retn   +
***
mov esi edx +
mov ebx eax +
cmp esi [ebx+214h] +
jz loc_48902C  +
mov [ebx+214h] esi +
mov eax ebx +
call @Controls@TWinControl@HandleAllocated$qqrv  +
test al al +
jz loc_48902C  +
push 0  +
push esi  +
push 41Bh  +
mov eax ebx +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call SendMessageA  +
pop esi  +
pop ebx  +
retn   +
***
mov eax ebx +
call @Controls@TWinControl@HandleAllocated$qqrv  +
test al al +
jz loc_4890A4  +
cmp dword ptr [ebx+22Ch] 0 +
jnz loc_48907C  +
cmp dword ptr [ebx+230h] 0 +
jnz loc_48907C  +
push 0  +
push 1  +
push 413h  +
mov eax ebx +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call SendMessageA  +
jmp loc_4890A4  +
mov dx [ebx+230h] +
mov ax [ebx+22Ch] +
call unknown_libname_380  +
push eax  +
push 1  +
push 40Ah  +
mov eax ebx +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call SendMessageA  +
pop ebx  +
retn   +
***
cmp edx [eax+22Ch] +
cmp edx [eax+230h] +
jz loc_4890EB  +
mov ebx eax +
mov edx eax +
mov eax [ebx+23Ch] +
call dword ptr [ebx+238h]  +
pop ebx  +
retn   +
***
push ebx  +
mov eax ebx +
xor ecx ecx +
mov edx 3Ch +
call @System@@FillChar$qqrv  +
mov dword ptr [ebx] 3Ch +
pop ebx  +
retn   +
***
mov esi edx +
mov ebx eax +
mov edx esi +
mov eax ebx +
call unknown_libname_573  +
mov eax [ebx+4] +
call @Controls@TWinControl@HandleAllocated$qqrv  +
test al al +
jz loc_48918E  +
push esi  +
cmp byte ptr [ebx+8] 0 +
setz al  +
and eax 7Fh +
push eax  +
push 43Ah  +
mov eax [ebx+4] +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call SendMessageA  +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
mov edi edx +
mov ebx eax +
cmp byte ptr [ebx+8] 0 +
jnz loc_4891A8  +
mov esi 1 +
jmp loc_4891AA  +
xor esi esi +
mov eax [ebx+4] +
call @Controls@TWinControl@HandleAllocated$qqrv  +
test al al +
jz loc_4891CB  +
push edi  +
push esi  +
push 444h  +
mov eax [ebx+4] +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call SendMessageA  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
add esp 0FFFFFFC4h +
mov edx esp +
call unknown_libname_347  +
mov al [esp+3Ch+var_24] +
add esp 3Ch +
retn   +
***
add esp 0FFFFFFC4h +
mov ebx edx +
mov esi eax +
mov edx esp +
mov eax esi +
call unknown_libname_573  +
mov [esp+3Ch+var_38] 8000000h +
mov [esp+3Ch+var_24] bl +
mov edx esp +
mov eax esi +
call unknown_libname_348  +
add esp 3Ch +
pop esi  +
pop ebx  +
retn   +
***
add esp 0FFFFFFC4h +
add esp 0FFFFFFC4h +
mov esi edx +
mov ebx eax +
mov edx esp +
mov eax ebx +
call unknown_libname_573  +
mov [esp+3Ch+var_38] 40000000h +
cmp esi 80000008h +
jnz loc_489260  +
mov [esp+3Ch+var_34] 40000000h +
jmp loc_48926B  +
mov eax esi +
call @Graphics@ColorToRGB$qqr15Graphics@TColor  +
mov [esp+3Ch+var_28] eax +
mov edx esp +
mov eax ebx +
call unknown_libname_348  +
add esp 3Ch +
pop esi  +
pop ebx  +
retn   +
***
mov ebx edx +
mov edx esp +
call unknown_libname_347  +
mov eax ebx +
lea edx [esp+3Ch+var_22] +
mov ecx 20h +
call sub_4BB5C0  +
add esp 3Ch +
pop ebx  +
retn   +
***
add esp 0FFFFFFC0h +
push ebx  +
mov [ebp+var_4] edx +
mov ebx eax +
mov eax [ebp+var_4] +
call unknown_libname_549  +
xor eax eax +
push ebp  +
push offset loc_489303  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
lea edx [ebp+var_40] +
mov eax ebx +
call unknown_libname_573  +
mov [ebp+var_3C] 20000000h +
lea eax [ebp+var_26] +
mov ecx 1Fh +
mov edx [ebp+var_4] +
call sub_4A9244  +
lea edx [ebp+var_40] +
mov eax ebx +
call unknown_libname_348  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_48930A  +
lea eax [ebp+var_4] +
call unknown_libname_540  +
retn   +
jmp unknown_libname_539  +
jmp loc_4892FA  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
add esp 0FFFFFFC4h +
mov bl ds:byte_48935C +
mov edx esp +
call unknown_libname_347  +
mov esi [esp+3Ch+var_34] +
test esi 1 +
jz loc_489331  +
or bl 1 +
test esi 2 +
jz loc_48933C  +
or bl 2 +
test esi 4 +
jz loc_489347  +
or bl 4 +
test esi 8 +
jz loc_489352  +
or bl 8 +
mov eax ebx +
add esp 3Ch +
pop esi  +
pop ebx  +
retn   +
***
mov [esp+40h+var_40] dl +
add esp 0FFFFFFC4h +
mov edx esp +
call unknown_libname_347  +
mov eax [esp+3Ch+var_30] +
mov ecx 14h +
cdq   +
idiv  ecx +
add esp 3Ch +
retn   +
***
add esp 0FFFFFFC4h +
mov esi edx +
mov ebx eax +
mov edx esp +
mov eax ebx +
call unknown_libname_573  +
mov [esp+3Ch+var_38] 80000000h +
mov eax esi +
shl eax 2 +
lea eax [eax+eax*4] +
mov [esp+3Ch+var_30] eax +
mov edx esp +
mov eax ebx +
call unknown_libname_348  +
add esp 3Ch +
pop esi  +
pop ebx  +
retn   +
***
add esp 0FFFFFFC4h +
mov edx esp +
call unknown_libname_347  +
mov al [esp+3Ch+var_23] +
and al 3 +
sub al 1 +
jb loc_489428  +
jz loc_489430  +
dec al  +
jz loc_48942C  +
jmp loc_489434  +
xor eax eax +
jmp loc_489436  +
mov al 1 +
jmp loc_489436  +
mov al 2 +
jmp loc_489436  +
xor eax eax +
add esp 3Ch +
retn   +
***
add esp 0FFFFFFC4h +
mov ebx edx +
mov esi eax +
mov edx esp +
mov eax esi +
call unknown_libname_573  +
dec bl  +
jz loc_489458  +
dec bl  +
jz loc_48945F  +
jmp loc_489466  +
mov [esp+3Ch+var_23] 2 +
jmp loc_48946B  +
mov [esp+3Ch+var_23] 1 +
jmp loc_48946B  +
mov [esp+3Ch+var_23] 0 +
mov edx esp +
mov eax esi +
call unknown_libname_348  +
add esp 3Ch +
pop esi  +
pop ebx  +
retn   +
***
push 0  +
push 0  +
push ebx  +
push esi  +
push edi  +
mov ebx edx +
mov esi eax +
xor eax eax +
push ebp  +
push offset loc_4895AB  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov eax ebx +
mov edx ds:off_459130 +
call @System@@IsClass$qqrp14System@TObjectp17System@TMetaClass  +
test al al +
jz loc_48950E  +
mov edi ebx +
mov edx [edi+18h] +
mov eax esi +
call @Comctrls@TTextAttributes@SetColor$qqr15Graphics@TColor  +
lea edx [ebp+var_4] +
mov eax edi +
call @Graphics@TFont@GetName$qqrv  +
mov edx [ebp+var_4] +
mov eax esi +
call sub_4892A0  +
mov eax edi +
call @Graphics@TFont@GetCharset$qqrv  +
mov edx eax +
mov eax esi +
call @Comctrls@TTextAttributes@SetCharset$qqruc  +
mov eax edi +
call @Graphics@TFont@GetStyle$qqrv  +
mov edx eax +
mov eax esi +
call @Comctrls@TTextAttributes@SetStyle$qqr47System@_Set$t19Graphics@TFontStyle$iuc$0$iuc$3_  +
mov eax edi +
call @Graphics@TFont@GetSize$qqrv  +
mov edx eax +
mov eax esi +
call @Comctrls@TTextAttributes@SetSize$qqri  +
mov eax edi +
call @Graphics@TFont@GetPitch$qqrv  +
mov edx eax +
mov eax esi +
call @Comctrls@TTextAttributes@SetPitch$qqr19Graphics@TFontPitch  +
jmp loc_489590  +
mov eax ebx +
mov edx ds:off_48343C +
call @System@@IsClass$qqrp14System@TObjectp17System@TMetaClass  +
test al al +
jz loc_489587  +
mov edi ebx +
mov eax edi +
call @Comctrls@TTextAttributes@GetColor$qqrv  +
mov edx eax +
mov eax esi +
call @Comctrls@TTextAttributes@SetColor$qqr15Graphics@TColor  +
lea edx [ebp+var_8] +
mov eax edi +
call sub_48927C  +
mov edx [ebp+var_8] +
mov eax esi +
call sub_4892A0  +
mov eax edi +
call @Comctrls@TTextAttributes@GetCharset$qqrv  +
mov edx eax +
mov eax esi +
call @Comctrls@TTextAttributes@SetCharset$qqruc  +
mov eax edi +
call @Comctrls@TTextAttributes@GetStyle$qqrv  +
mov edx eax +
mov eax esi +
call @Comctrls@TTextAttributes@SetStyle$qqr47System@_Set$t19Graphics@TFontStyle$iuc$0$iuc$3_  +
mov eax edi +
call @Comctrls@TTextAttributes@GetPitch$qqrv  +
mov edx eax +
mov eax esi +
call @Comctrls@TTextAttributes@SetPitch$qqr19Graphics@TFontPitch  +
mov eax edi +
call @Comctrls@TTextAttributes@GetSize$qqrv  +
mov edx eax +
mov eax esi +
call @Comctrls@TTextAttributes@SetSize$qqri  +
jmp loc_489590  +
mov edx ebx +
mov eax esi +
call @Classes@TPersistent@Assign$qqrp19Classes@TPersistent  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4895B2  +
lea eax [ebp+var_8] +
mov edx 2 +
call unknown_libname_541  +
retn   +
jmp unknown_libname_539  +
jmp loc_48959D  +
pop edi  +
pop esi  +
pop ebx  +
pop ecx  +
pop ecx  +
pop ebp  +
retn   +
***
push 0  +
push edi  +
mov eax ebx +
xor ecx ecx +
mov edx 9Ch +
call @System@@FillChar$qqrv  +
mov dword ptr [ebx] 9Ch +
pop ebx  +
retn   +
***
mov esi edx +
push edi  +
mov edi edx +
mov ebx eax +
mov eax [ebx+4] +
call @Controls@TWinControl@HandleNeeded$qqrv  +
mov eax [ebx+4] +
call @Controls@TWinControl@HandleAllocated$qqrv  +
test al al +
jz loc_4897D7  +
mov eax [ebx+4] +
mov si 0FFC8h +
call @System@@CallDynaInst$qqrv  +
test al al +
jz loc_4897C1  +
mov ax [edi+18h] +
cmp ax 1 +
jnz loc_4897B5  +
mov word ptr [edi+18h] 2 +
jmp loc_4897C1  +
cmp ax 2 +
jnz loc_4897C1  +
mov word ptr [edi+18h] 1 +
push edi  +
push 0  +
push 447h  +
mov eax [ebx+4] +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call SendMessageA  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
add esp 0FFFFFF64h +
mov edx esp +
call @Comctrls@TParaAttributes@GetAttributes$qqrr11_paraformat  +
mov ax [esp+9Ch+var_84] +
dec eax  +
add esp 9Ch +
retn   +
***
add esp 0FFFFFF64h +
mov ebx edx +
mov esi eax +
mov edx esp +
mov eax esi +
call @Comctrls@TParaAttributes@InitPara$qqrr11_paraformat  +
mov [esp+9Ch+var_98] 8 +
xor eax eax +
mov al bl +
inc eax  +
mov [esp+9Ch+var_84] ax +
mov edx esp +
mov eax esi +
call @Comctrls@TParaAttributes@SetAttributes$qqrr11_paraformat  +
add esp 9Ch +
pop esi  +
pop ebx  +
retn   +
***
add esp 0FFFFFF64h +
add esp 0FFFFFF64h +
mov ebx edx +
mov esi eax +
mov eax ebx +
sub al 1 +
jb loc_48987A  +
jnz loc_489883  +
mov eax esi +
call @Comctrls@TParaAttributes@GetLeftIndent$qqrv  +
cmp eax 0Ah +
jge loc_489883  +
mov edx 0Ah +
mov eax esi +
call @TParaAttributes@SetLeftIndent$qqri  +
jmp loc_489883  +
xor edx edx +
mov eax esi +
call @TParaAttributes@SetLeftIndent$qqri  +
mov edx esp +
mov eax esi +
call @Comctrls@TParaAttributes@InitPara$qqrr11_paraformat  +
mov [esp+9Ch+var_98] 20h +
xor eax eax +
mov al bl +
mov [esp+9Ch+var_94] ax +
mov edx esp +
mov eax esi +
call @Comctrls@TParaAttributes@SetAttributes$qqrr11_paraformat  +
add esp 9Ch +
pop esi  +
pop ebx  +
retn   +
***
add esp 0FFFFFF64h +
add esp 0FFFFFF64h +
mov esi edx +
mov ebx eax +
mov edx esp +
mov eax ebx +
call @Comctrls@TParaAttributes@InitPara$qqrr11_paraformat  +
mov [esp+9Ch+var_98] 1 +
mov eax esi +
shl eax 2 +
lea eax [eax+eax*4] +
mov [esp+9Ch+var_90] eax +
mov edx esp +
mov eax ebx +
call @Comctrls@TParaAttributes@SetAttributes$qqrr11_paraformat  +
add esp 9Ch +
pop esi  +
pop ebx  +
retn   +
***
add esp 0FFFFFF64h +
add esp 0FFFFFF64h +
mov esi edx +
mov ebx eax +
mov edx esp +
mov eax ebx +
call @Comctrls@TParaAttributes@InitPara$qqrr11_paraformat  +
mov [esp+9Ch+var_98] 4 +
mov eax esi +
shl eax 2 +
lea eax [eax+eax*4] +
mov [esp+9Ch+var_88] eax +
mov edx esp +
mov eax ebx +
call @Comctrls@TParaAttributes@SetAttributes$qqrr11_paraformat  +
add esp 9Ch +
pop esi  +
pop ebx  +
retn   +
***
add esp 0FFFFFF64h +
add esp 0FFFFFF64h +
mov esi edx +
mov ebx eax +
mov edx esp +
mov eax ebx +
call @Comctrls@TParaAttributes@InitPara$qqrr11_paraformat  +
mov [esp+9Ch+var_98] 2 +
mov eax esi +
shl eax 2 +
lea eax [eax+eax*4] +
mov [esp+9Ch+var_8C] eax +
mov edx esp +
mov eax ebx +
call @Comctrls@TParaAttributes@SetAttributes$qqrr11_paraformat  +
add esp 9Ch +
pop esi  +
pop ebx  +
retn   +
***
mov ebx edx +
push edi  +
add esp 0FFFFFF64h +
mov edi ecx +
mov ebx edx +
mov esi eax +
mov edx esp +
mov eax esi +
call @Comctrls@TParaAttributes@GetAttributes$qqrr11_paraformat  +
mov eax edi +
shl eax 2 +
lea eax [eax+eax*4] +
xor edx edx +
mov dl bl +
mov [esp+edx*4+9Ch+var_80] eax +
mov [esp+9Ch+var_98] 10h +
xor eax eax +
mov al bl +
cmp ax [esp+9Ch+var_82] +
jle loc_489A2C  +
mov [esp+9Ch+var_82] ax +
mov edx esp +
mov eax esi +
call @Comctrls@TParaAttributes@SetAttributes$qqrr11_paraformat  +
add esp 9Ch +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
push ebp  +
mov edi edx +
mov esi eax +
mov eax edi +
mov edx ds:off_4834D0 +
call @System@@IsClass$qqrp14System@TObjectp17System@TMetaClass  +
test al al +
jz loc_489ACB  +
mov ebx edi +
mov eax ebx +
call @Comctrls@TParaAttributes@GetAlignment$qqrv  +
mov edx eax +
mov eax esi +
call @Comctrls@TParaAttributes@SetAlignment$qqr18Classes@TAlignment  +
mov eax ebx +
call @Comctrls@TParaAttributes@GetFirstIndent$qqrv  +
mov edx eax +
mov eax esi +
call @TParaAttributes@SetFirstIndent$qqri  +
mov eax ebx +
call @Comctrls@TParaAttributes@GetLeftIndent$qqrv  +
mov edx eax +
mov eax esi +
call @TParaAttributes@SetLeftIndent$qqri  +
mov eax ebx +
call @Comctrls@TParaAttributes@GetRightIndent$qqrv  +
mov edx eax +
mov eax esi +
call @TParaAttributes@SetRightIndent$qqri  +
mov eax ebx +
call @Comctrls@TParaAttributes@GetNumbering$qqrv  +
mov edx eax +
mov eax esi +
call @Comctrls@TParaAttributes@SetNumbering$qqr24Comctrls@TNumberingStyle  +
xor ebp ebp +
mov ebx ebp +
mov edx ebx +
mov eax edi +
call @Comctrls@TParaAttributes@GetTab$qqruc  +
mov ecx eax +
mov edx ebx +
mov eax esi +
call @TParaAttributes@SetTab$qqruci  +
inc ebp  +
cmp ebp 20h +
jnz loc_489AAD  +
jmp loc_489AD4  +
mov edx edi +
mov eax esi +
call @Classes@TPersistent@Assign$qqrp19Classes@TPersistent  +
pop ebp  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push ebx  +
push ebx  +
mov eax ecx +
mov ecx [ebp+arg_0] +
xchg eax edx +
mov ebx [eax] +
call dword ptr [ebx+0Ch]  +
pop ebx  +
pop ebp  +
retn 4  +
***
call unknown_libname_536  +
mov ebx edx +
mov esi eax +
mov eax [esi+18h] +
call @System@TObject@Free$qqrv  +
mov edx ebx +
and dl 0FCh +
mov eax esi +
call sub_49DE48  +
test bl bl +
jle loc_489C3A  +
mov eax esi +
call @System@@ClassDestroy$qqrp14System@TObject  +
pop esi  +
pop ebx  +
retn   +
***
add esp 0FFFFFFF0h +
mov [ebp+var_4] eax +
mov eax [ebp+var_4] +
mov eax [eax+10h] +
mov ecx [eax+250h] +
mov [ebp+var_10] ecx +
mov ecx [eax+254h] +
mov [ebp+var_C] ecx +
xor ecx ecx +
mov [eax+250h] ecx +
mov [eax+254h] ecx +
xor eax eax +
push ebp  +
push offset loc_489CAB  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov eax [ebp+var_4] +
call @TStrings@AddStrings$qqrp8TStrings  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_489CB2  +
mov eax [ebp+var_4] +
mov eax [eax+10h] +
mov edx [ebp+var_10] +
mov [eax+250h] edx +
mov edx [ebp+var_C] +
mov [eax+254h] edx +
retn   +
jmp unknown_libname_539  +
jmp loc_489C92  +
mov esp ebp +
pop ebp  +
retn   +
***
mov ebx eax +
push 0  +
push 0  +
push 0BAh  +
mov eax [ebx+10h] +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call SendMessageA  +
mov esi eax +
push 0  +
push 0  +
mov eax esi +
dec eax  +
push eax  +
push 0BBh  +
mov eax [ebx+10h] +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call SendMessageA  +
push eax  +
push 0C1h  +
mov eax [ebx+10h] +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call SendMessageA  +
test eax eax +
jnz loc_489D09  +
dec esi  +
mov eax esi +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
add esp 0FFFFF004h +
push eax  +
mov edi ecx +
mov esi edx +
mov ebx eax +
mov eax esp +
mov word ptr [eax] 1000h +
mov eax esp +
push eax  +
push esi  +
push 0C4h  +
mov eax [ebx+10h] +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call SendMessageA  +
cmp [esp+eax+1000h+var_1002] 0Dh +
jnz loc_489D4F  +
cmp [esp+eax+1000h+var_1001] 0Ah +
jnz loc_489D4F  +
sub eax 2 +
mov edx esp +
mov ecx edi +
xchg eax ecx +
call @@LStrFromPCharLen$qqrr10AnsiStringpci  +
add esp 1000h +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
add esp 0FFFFFFE0h +
push ebx  +
push esi  +
push edi  +
xor ebx ebx +
mov [ebp+var_20] ebx +
mov [ebp+var_1C] ebx +
mov [ebp+var_10] ebx +
mov [ebp+var_4] ecx +
mov esi edx +
mov ebx eax +
xor eax eax +
push ebp  +
push offset loc_489F58  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
test esi esi +
jl loc_489F35  +
push 0  +
push esi  +
push 0BBh  +
mov eax [ebx+10h] +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call SendMessageA  +
mov edi eax +
mov [ebp+lParam] edi +
test edi edi +
jl loc_489E47  +
mov esi offset dword_489F68 +
jmp loc_489E94  +
push 0  +
dec esi  +
push esi  +
push 0BBh  +
mov eax [ebx+10h] +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call SendMessageA  +
mov edi eax +
mov [ebp+lParam] edi +
test edi edi +
jl loc_489F35  +
push 0  +
mov eax [ebp+lParam] +
push eax  +
push 0C1h  +
mov eax [ebx+10h] +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call SendMessageA  +
test eax eax +
jz loc_489F35  +
add [ebp+lParam] eax +
mov esi offset dword_489F70 +
mov eax [ebp+lParam] +
mov [ebp+var_8] eax +
lea eax [ebp+lParam] +
push eax  +
push 0  +
push 437h  +
mov eax [ebx+10h] +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call SendMessageA  +
lea eax [ebp+var_10] +
push eax  +
mov eax [ebp+var_4] +
mov [ebp+var_18] eax +
mov [ebp+var_14] 0Bh +
lea eax [ebp+var_18] +
push eax  +
lea eax [ebp+var_1C] +
mov edx esi +
call unknown_libname_545  +
mov eax [ebp+var_1C] +
xor ecx ecx +
pop edx  +
call @Sysutils@Format$qqrx17System@AnsiStringpx14System@TVarRecxi  +
mov eax [ebp+var_10] +
call unknown_libname_550  +
push eax  +
push 0  +
push 0C2h  +
mov eax [ebx+10h] +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call SendMessageA  +
mov eax [ebx+10h] +
mov edx [eax] +
call dword ptr [edx+0CCh]  +
mov ebx eax +
mov eax [ebp+var_10] +
call sub_4BB610  +
add eax [ebp+var_8] +
cmp ebx eax +
jz loc_489F35  +
lea edx [ebp+var_20] +
mov eax off_4EAAA8 +
call @System@LoadResString$qqrp20System@TResStringRec  +
mov ecx [ebp+var_20] +
mov dl 1 +
mov eax ds:off_49A51C +
call sub_4AC17C  +
call @System@@RaiseExcept$qqrv  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_489F5F  +
lea eax [ebp+var_20] +
mov edx 2 +
call unknown_libname_541  +
lea eax [ebp+var_10] +
call unknown_libname_540  +
retn   +
jmp unknown_libname_539  +
jmp loc_489F42  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
push edi  +
add esp 0FFFFFFF8h +
mov esi edx +
mov ebx eax +
test esi esi +
jl loc_48A020  +
push 0  +
push esi  +
push 0BBh  +
mov eax [ebx+10h] +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call SendMessageA  +
mov edi eax +
mov [esp+8+wParam] edi +
inc edi  +
jz loc_48A020  +
push 0  +
inc esi  +
push esi  +
push 0BBh  +
mov eax [ebx+10h] +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call SendMessageA  +
mov edi eax +
mov [esp+8+var_4] edi +
inc edi  +
jnz loc_489FED  +
push 0  +
mov eax [esp+0Ch+wParam] +
push eax  +
push 0C1h  +
mov eax [ebx+10h] +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call SendMessageA  +
add eax [esp+8+wParam] +
mov [esp+8+var_4] eax +
mov eax esp +
push eax  +
push 0  +
push 437h  +
mov eax [ebx+10h] +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call SendMessageA  +
mov eax off_4E6858 +
push eax  +
push 0  +
push 0C2h  +
mov eax [ebx+10h] +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call SendMessageA  +
pop ecx  +
pop edx  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov eax [esi+10h] +
push edi  +
mov ebx edx +
mov esi eax +
mov edi [esi+10h] +
cmp byte ptr [edi+1A6h] 0 +
jz loc_48A064  +
push 0  +
mov eax ebx +
xor al 1 +
and eax 7Fh +
push eax  +
push 0Bh  +
mov eax edi +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call SendMessageA  +
test bl bl +
jnz loc_48A081  +
mov eax [esi+10h] +
call @Controls@TControl@Refresh$qqrv  +
push 0  +
xor ecx ecx +
mov edx 0B012h +
mov eax [esi+10h] +
call @Controls@TControl@Perform$qqruiii  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov ebx [eax+10h] +
test dl dl +
jz loc_48A0AE  +
push 0  +
push 0  +
push 43Bh  +
mov eax ebx +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call SendMessageA  +
mov esi eax +
or esi 1 +
jmp loc_48A0C9  +
push 0  +
push 0  +
push 43Bh  +
mov eax ebx +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call SendMessageA  +
mov esi eax +
and esi 0FFFFFFFEh +
push esi  +
push 0  +
push 445h  +
mov eax ebx +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call SendMessageA  +
pop esi  +
pop ebx  +
retn   +
***
push ecx  +
push ebx  +
mov ebx edx +
mov [ebp+var_4] eax +
xor edx edx +
mov eax [ebp+var_4] +
call @ComCtrls@_17234  +
xor eax eax +
push ebp  +
push offset loc_48A128  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov edx ebx +
mov eax [ebp+var_4] +
call @TStrings@SetTextStr$qqrx10AnsiString  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_48A12F  +
mov dl 1 +
mov eax [ebp+var_4] +
call @ComCtrls@_17234  +
retn   +
jmp unknown_libname_539  +
jmp loc_48A11D  +
pop ebx  +
pop ecx  +
pop ebp  +
retn   +
***
mov edi eax +
mov esi edx +
mov edx eax +
cld   +
lods   +
or al al +
jz loc_48A15E  +
cmp al 0Ah +
jz loc_48A155  +
stos   +
cmp al 0Dh +
jnz loc_48A13D  +
mov al 0Ah +
stos   +
lods   +
cmp al 0Ah +
jz loc_48A13D  +
jmp loc_48A13E  +
mov eax 0A0Dh +
stos   +
jmp loc_48A13D  +
stos   +
lea eax [edi-1] +
sub eax edx +
pop edi  +
pop esi  +
retn   +
***
push ebx  +
push esi  +
push edi  +
xor esi esi +
mov ebx [ebp+arg_0] +
xor eax eax +
push ebp  +
push offset loc_48A1AD  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov eax [ebp+arg_C] +
xor edx edx +
mov [eax] edx +
cmp dword ptr [ebx] 0 +
jz loc_48A1A3  +
mov eax [ebp+arg_8] +
push eax  +
mov edx [ebx+4] +
mov eax [ebx] +
mov ecx [ebp+arg_4] +
mov ebx [eax] +
call dword ptr [ebx+4]  +
mov edx [ebp+arg_C] +
mov [edx] eax +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
jmp loc_48A1BC  +
jmp @System@@HandleAnyException$qqrv  +
mov esi 2 +
call @@DoneExcept$qqrv  +
mov eax esi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 10h  +
***
add esp 0FFFFFFF0h +
push ebx  +
push esi  +
push edi  +
mov ebx [ebp+arg_C] +
mov esi [ebp+arg_8] +
xor eax eax +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
mov [ebp+var_10] eax +
lea eax [esi+1] +
call sub_4A9394  +
mov [ebp+var_8] eax +
xor eax eax +
push ebp  +
push offset loc_48A2A8  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
sar esi 1 +
jns loc_48A202  +
adc esi 0 +
xor eax eax +
mov [ebx] eax +
mov eax [ebp+var_8] +
add eax esi +
mov [ebp+var_C] eax +
xor eax eax +
push ebp  +
push offset loc_48A281  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov eax [ebp+var_10] +
cmp dword ptr [eax] 0 +
jz loc_48A239  +
push esi  +
mov eax [ebp+var_10] +
mov edx [eax+4] +
mov eax [ebp+var_10] +
mov eax [eax] +
mov ecx [ebp+var_C] +
mov esi [eax] +
call dword ptr [esi]  +
mov [ebx] eax +
cmp dword ptr [ebx] 0 +
jle loc_48A277  +
mov eax [ebx] +
mov edx [ebp+var_C] +
mov byte ptr [edx+eax] 0 +
mov eax [ebx] +
mov edx [ebp+var_C] +
cmp byte ptr [edx+eax-1] 0Dh +
jnz loc_48A25D  +
mov eax [ebx] +
mov edx [ebp+var_C] +
mov byte ptr [edx+eax-1] 0 +
mov edx [ebp+var_C] +
mov eax [ebp+var_8] +
call unknown_libname_351  +
mov [ebx] eax +
mov ecx [ebx] +
mov edx [ebp+arg_4] +
mov eax [ebp+var_8] +
call sub_4B9A24  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
jmp loc_48A292  +
jmp @System@@HandleAnyException$qqrv  +
mov dword ptr [ebp-4] 1 +
call @@DoneExcept$qqrv  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_48A2AF  +
mov eax [ebp+var_8] +
call sub_4A93E0  +
retn   +
jmp unknown_libname_539  +
jmp loc_48A29F  +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 10h  +
***
add esp 0FFFFFFE0h +
push ebx  +
push esi  +
push edi  +
xor ecx ecx +
mov [ebp+var_20] ecx +
mov esi edx +
mov [ebp+var_4] eax +
xor eax eax +
push ebp  +
push offset loc_48A40F  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov [ebp+var_8] esi +
mov eax [ebp+var_4] +
mov eax [eax+18h] +
test eax eax +
jz loc_48A2EF  +
mov [ebp+var_10] eax +
jmp loc_48A305  +
mov eax [ebp+var_4] +
mov eax [eax+10h] +
mov eax [eax+25Ch] +
mov dl 1 +
call @System@TObject@$bctr$qqrv  +
mov [ebp+var_10] eax +
mov eax [ebp+var_10] +
mov [ebp+var_C] eax +
xor eax eax +
push ebp  +
push offset loc_48A3F2  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
lea eax [ebp+var_C] +
mov [ebp+lParam] eax +
mov eax offset sub_48A1C8 +
mov [ebp+var_14] eax +
xor eax eax +
mov [ebp+var_18] eax +
mov eax esi +
call sub_49F1B4  +
mov edi eax +
mov eax [ebp+var_4] +
cmp byte ptr [eax+14h] 0 +
jz loc_48A345  +
mov ebx 1 +
jmp loc_48A34A  +
mov ebx 2 +
lea eax [ebp+lParam] +
push eax  +
push ebx  +
push 449h  +
mov eax [ebp+var_4] +
mov eax [eax+10h] +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call SendMessageA  +
cmp ebx 2 +
jnz loc_48A3D3  +
cmp [ebp+var_18] 0 +
jz loc_48A3D3  +
mov eax edi +
cdq   +
push edx  +
push eax  +
mov eax esi +
call sub_49F1D4  +
mov eax [ebp+var_4] +
cmp byte ptr [eax+14h] 0 +
jz loc_48A38C  +
mov ebx 2 +
jmp loc_48A391  +
mov ebx 1 +
lea eax [ebp+lParam] +
push eax  +
push ebx  +
push 449h  +
mov eax [ebp+var_4] +
mov eax [eax+10h] +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call SendMessageA  +
cmp [ebp+var_18] 0 +
jz loc_48A3D3  +
lea edx [ebp+var_20] +
mov eax off_4EAAAC +
call @System@LoadResString$qqrp20System@TResStringRec  +
mov ecx [ebp+var_20] +
mov dl 1 +
mov eax ds:off_49A51C +
call sub_4AC17C  +
call @System@@RaiseExcept$qqrv  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_48A3F9  +
mov eax [ebp+var_4] +
cmp dword ptr [eax+18h] 0 +
jnz locret_48A3F1  +
mov eax [ebp+var_10] +
call @System@TObject@Free$qqrv  +
retn   +
jmp unknown_libname_539  +
jmp loc_48A3E0  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_48A416  +
lea eax [ebp+var_20] +
call unknown_libname_540  +
retn   +
jmp unknown_libname_539  +
jmp loc_48A406  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
add esp 0FFFFFFE0h +
push ebx  +
xor ecx ecx +
mov [ebp+var_20] ecx +
mov ebx edx +
mov [ebp+var_4] eax +
xor eax eax +
push ebp  +
push offset loc_48A521  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov eax [ebp+var_4] +
mov eax [eax+18h] +
test eax eax +
jz loc_48A44E  +
mov [ebp+var_10] eax +
jmp loc_48A464  +
mov eax [ebp+var_4] +
mov eax [eax+10h] +
mov eax [eax+25Ch] +
mov dl 1 +
call @System@TObject@$bctr$qqrv  +
mov [ebp+var_10] eax +
mov [ebp+var_8] ebx +
mov eax [ebp+var_10] +
mov [ebp+var_C] eax +
xor eax eax +
push ebp  +
push offset loc_48A504  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
lea eax [ebp+var_C] +
mov [ebp+lParam] eax +
mov eax offset sub_48A168 +
mov [ebp+var_14] eax +
xor eax eax +
mov [ebp+var_18] eax +
mov eax [ebp+var_4] +
cmp byte ptr [eax+14h] 0 +
jz loc_48A49E  +
mov ebx 1 +
jmp loc_48A4A3  +
mov ebx 2 +
lea eax [ebp+lParam] +
push eax  +
push ebx  +
push 44Ah  +
mov eax [ebp+var_4] +
mov eax [eax+10h] +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call SendMessageA  +
cmp [ebp+var_18] 0 +
jz loc_48A4E5  +
lea edx [ebp+var_20] +
mov eax off_4EAAB0 +
call @System@LoadResString$qqrp20System@TResStringRec  +
mov ecx [ebp+var_20] +
mov dl 1 +
mov eax ds:off_49A51C +
call sub_4AC17C  +
call @System@@RaiseExcept$qqrv  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_48A50B  +
mov eax [ebp+var_4] +
cmp dword ptr [eax+18h] 0 +
jnz locret_48A503  +
mov eax [ebp+var_10] +
call @System@TObject@Free$qqrv  +
retn   +
jmp unknown_libname_539  +
jmp loc_48A4F2  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_48A528  +
lea eax [ebp+var_20] +
call unknown_libname_540  +
retn   +
jmp unknown_libname_539  +
jmp loc_48A518  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
push 0  +
push 0  +
push 0  +
push ebx  +
push esi  +
push edi  +
mov edi edx +
mov [ebp+var_4] eax +
xor eax eax +
push ebp  +
push offset loc_48A629  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
lea edx [ebp+var_C] +
mov eax edi +
call @Sysutils@ExtractFileExt$qqrx17System@AnsiString  +
mov eax [ebp+var_C] +
lea edx [ebp+var_8] +
call sub_4ACD78  +
lea eax [ebp+var_8] +
mov ecx 1 +
mov edx 1 +
call @System@@LStrDelete$qqrv  +
mov ebx off_4E6824 +
test ebx ebx +
jz loc_48A596  +
mov esi ebx +
mov eax [esi+4] +
mov edx [ebp+var_8] +
call @System@@LStrCmp$qqrv  +
jz loc_48A596  +
mov ebx [esi+8] +
test ebx ebx +
jnz loc_48A580  +
test ebx ebx +
jnz loc_48A59F  +
mov ebx offset off_4E6818 +
mov eax [ebp+var_4] +
cmp dword ptr [eax+18h] 0 +
jnz loc_48A5B7  +
mov eax [ebx] +
mov dl 1 +
call @System@TObject@$bctr$qqrv  +
mov edx [ebp+var_4] +
mov [edx+18h] eax +
xor eax eax +
push ebp  +
push offset loc_48A5D9  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov edx edi +
mov eax [ebp+var_4] +
call sub_49E63C  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
jmp loc_48A5FB  +
jmp @System@@HandleAnyException$qqrv  +
mov eax [ebp-4] +
mov eax [eax+18h] +
call @System@TObject@Free$qqrv  +
mov eax [ebp-4] +
xor edx edx +
mov [eax+18h] edx +
call @System@@RaiseAgain$qqrv  +
call @@DoneExcept$qqrv  +
mov eax [ebp+var_4] +
mov eax [eax+10h] +
mov edx 7FFFFFF0h +
mov ecx [eax] +
call dword ptr [ecx+0C4h]  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_48A630  +
lea eax [ebp+var_C] +
mov edx 2 +
call unknown_libname_541  +
retn   +
jmp unknown_libname_539  +
jmp loc_48A61B  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
push 0  +
push ecx  +
call unknown_libname_536  +
mov eax ebx +
call sub_44D5C4  +
xor edx edx +
mov eax ebx +
call sub_44D478  +
pop ebx  +
retn   +
***
mov esi edx +
mov ebx eax +
cmp dword_4F1890 0 +
jnz loc_48A8EA  +
push offset aRiched32_dll  +
call LoadLibraryA  +
mov dword_4F1890 eax +
cmp dword_4F1890 20h +
ja loc_48A8EA  +
xor eax eax +
mov dword_4F1890 eax +
mov edx esi +
mov eax ebx +
call @Stdctrls@TCustomMemo@CreateParams$qqrr22Controls@TCreateParams  +
mov ecx offset aRichedit +
mov edx esi +
mov eax ebx +
call @Controls@TWinControl@CreateSubClass$qqrr22Controls@TCreateParamspc  +
mov eax [esi+4] +
xor edx edx +
mov dl [ebx+230h] +
or eax dword_4E685C[edx*4] +
xor edx edx +
mov dl [ebx+258h] +
or eax dword_4E6864[edx*4] +
mov [esi+4] eax +
and dword ptr [esi+24h] 0FFFFFFFCh +
pop esi  +
pop ebx  +
retn   +
***
add esp 0FFFFFFF8h +
add esp 0FFFFFFF8h +
mov [ebp+var_4] eax +
mov eax [ebp+var_4] +
call @Stdctrls@TCustomEdit@GetModified$qqrv  +
mov edx [ebp+var_4] +
mov [edx+259h] al +
mov dl 1 +
mov eax ds:off_49AEB4 +
call @System@TObject@$bctr$qqrv  +
mov edx [ebp+var_4] +
mov [edx+24Ch] eax +
mov eax [ebp+var_4] +
call @Comctrls@TCustomRichEdit@GetPlainText$qqrv  +
mov [ebp+var_5] al +
mov eax [ebp+var_4] +
test byte ptr [eax+1Ch] 10h +
setnz al  +
mov [ebp+var_6] al +
mov dl [ebp+var_6] +
mov eax [ebp+var_4] +
call @Comctrls@TCustomRichEdit@SetPlainText$qqro  +
lea edx [ebp+var_6] +
mov eax [ebp+var_4] +
mov eax [eax+24Ch] +
mov ecx 1 +
call sub_49F418  +
xor eax eax +
push ebp  +
push offset loc_48AB28  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov eax [ebp+var_4] +
mov edx [eax+24Ch] +
mov eax [ebp+var_4] +
mov eax [eax+248h] +
mov ecx [eax] +
call dword ptr [ecx+78h]  +
push 0  +
push 0  +
mov eax [ebp+var_4] +
mov eax [eax+24Ch] +
call sub_49F1D4  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_48AB2F  +
mov dl [ebp+var_5] +
mov eax [ebp+var_4] +
call @Comctrls@TCustomRichEdit@SetPlainText$qqro  +
retn   +
jmp unknown_libname_539  +
jmp loc_48AB1C  +
mov eax [ebp+var_4] +
call @Stdctrls@TCustomEdit@DestroyWnd$qqrv  +
pop ecx  +
pop ecx  +
pop ebp  +
retn   +
***
retn   +
***
mov edx [eax+68h] +
mov eax [eax+238h] +
mov ecx [eax] +
call dword ptr [ecx+8]  +
retn   +
***
add esp 0FFFFFFF0h +
mov edx [eax+68h] +
mov eax [eax+238h] +
mov ecx [eax] +
call dword ptr [ecx+8]  +
retn   +
***
mov esi edx +
mov ebx eax +
push esi  +
push 0  +
push 435h  +
mov eax ebx +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call SendMessageA  +
pop esi  +
pop ebx  +
retn   +
***
add esp 0FFFFFFF8h +
mov esi edx +
mov ebx eax +
mov eax esp +
push eax  +
push 0  +
push 434h  +
mov eax ebx +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call SendMessageA  +
mov eax [esp+8+var_4] +
mov [esi] eax +
mov eax [esi] +
push eax  +
push 0  +
push 436h  +
mov eax ebx +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call SendMessageA  +
mov [esi+4] eax +
push 0  +
push 0FFFFFFFFh  +
push 0BBh  +
mov eax ebx +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call SendMessageA  +
sub [esi] eax +
pop ecx  +
pop edx  +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
add esp 0FFFFFFF8h +
mov esi edx +
mov ebx eax +
push 0  +
mov eax [esi+4] +
push eax  +
push 0BBh  +
mov eax ebx +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call SendMessageA  +
mov edi eax +
add edi [esi] +
mov [esp+8+var_8] edi +
mov [esp+8+var_4] edi +
mov eax esp +
push eax  +
push 0  +
push 437h  +
mov eax ebx +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call SendMessageA  +
pop ecx  +
pop edx  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov ebx eax +
mov ebx eax +
push 0  +
push ebx  +
push esi  +
push edi  +
mov esi ecx +
mov edi edx +
mov ebx eax +
xor eax eax +
push ebp  +
push offset loc_48AD38  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
lea edx [ebp+var_4] +
mov eax ebx +
mov ecx [eax] +
call dword ptr [ecx+0D0h]  +
mov eax [ebp+var_4] +
call sub_4BB610  +
mov ebx eax +
mov eax [ebp+var_4] +
call sub_4BB610  +
cmp esi eax +
jg loc_48AD16  +
mov ebx esi +
dec ebx  +
mov ecx ebx +
mov edx [ebp+var_4] +
mov eax edi +
call sub_4A9244  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_48AD3F  +
lea eax [ebp+var_4] +
call unknown_libname_540  +
retn   +
jmp unknown_libname_539  +
jmp loc_48AD2F  +
mov eax ebx +
pop edi  +
pop esi  +
pop ebx  +
pop ecx  +
pop ebp  +
retn   +
***
mov esi edx +
mov ebx eax +
mov eax ebx +
mov edx [eax] +
call dword ptr [edx+0C8h]  +
mov edx eax +
inc edx  +
mov eax esi +
call @System@@LStrSetLength$qqrv  +
mov eax [esi] +
call unknown_libname_550  +
push eax  +
push 0  +
push 43Eh  +
mov eax ebx +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call SendMessageA  +
mov edx esi +
xchg eax edx +
call @System@@LStrSetLength$qqrv  +
pop esi  +
pop ebx  +
retn   +
***
add esp 0FFFFFF64h +
mov esi edx +
mov ebx eax +
mov eax ebx +
call @Controls@TWinControl@HandleNeeded$qqrv  +
mov edx esi +
mov eax ebx +
call @Controls@TWinControl@CMBiDiModeChanged$qqrr17Messages@TMessage  +
mov edx esp +
mov eax [ebx+23Ch] +
call @Comctrls@TParaAttributes@GetAttributes$qqrr11_paraformat  +
mov [esp+9Ch+var_98] 8 +
xor eax eax +
mov al [ebx+224h] +
inc eax  +
mov [esp+9Ch+var_84] ax +
mov edx esp +
mov eax [ebx+23Ch] +
call @Comctrls@TParaAttributes@SetAttributes$qqrr11_paraformat  +
add esp 9Ch +
pop esi  +
pop ebx  +
retn   +
***
cmp dl [eax+230h] +
cmp dl [ebx+258h] +
add esp 0FFFFFFF8h +
mov esi edx +
mov ebx eax +
mov eax esp +
push eax  +
push 0  +
push 434h  +
mov eax ebx +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call SendMessageA  +
add esi [esp+8+var_8] +
mov [esp+8+var_4] esi +
mov eax esp +
push eax  +
push 0  +
push 437h  +
mov eax ebx +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call SendMessageA  +
push 0  +
push 0  +
push 431h  +
mov eax ebx +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call SendMessageA  +
pop ecx  +
pop edx  +
pop esi  +
pop ebx  +
retn   +
***
mov eax [eax+248h] +
mov al [eax+14h] +
retn   +
***
mov eax [eax+248h] +
mov [eax+14h] dl +
retn   +
***
mov eax ebx +
call @Controls@TWinControl@CMColorChanged$qqrr17Messages@TMessage  +
mov eax [ebx+70h] +
call @Graphics@ColorToRGB$qqr15Graphics@TColor  +
push eax  +
push 0  +
push 443h  +
mov eax ebx +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call SendMessageA  +
pop ebx  +
retn   +
***
mov eax [esi+248h] +
mov ebx eax +
add esp 0FFFFFFB8h +
push ebx  +
push esi  +
push edi  +
mov ebx edx +
mov [ebp+var_4] eax +
lea eax [ebp+lParam] +
xor ecx ecx +
mov edx 30h +
call @System@@FillChar$qqrv  +
call sub_450C50  +
mov esi eax +
lea eax [esi+18h] +
mov edx ebx +
call unknown_libname_542  +
mov eax esi +
call @Printers@TPrinter@BeginDoc$qqrv  +
mov eax esi +
call @Printers@TPrinter@GetHandle$qqrv  +
mov ebx eax +
mov [ebp+lParam] ebx +
mov [ebp+var_34] ebx +
push 58h  +
mov eax esi +
call @Printers@TPrinter@GetHandle$qqrv  +
push eax  +
call GetDeviceCaps  +
mov ebx eax +
push 5Ah  +
mov eax esi +
call @Printers@TPrinter@GetHandle$qqrv  +
push eax  +
call GetDeviceCaps  +
mov edi eax +
mov eax [ebp+var_4] +
add eax 278h +
call sub_4A77EC  +
test al al +
jz loc_48AF9F  +
mov eax esi +
call @Printers@TPrinter@GetPageWidth$qqrv  +
imul eax eax +
cdq   +
idiv  ebx +
mov [ebp+var_28] eax +
mov eax esi +
call @Printers@TPrinter@GetPageHeight$qqrv  +
imul eax eax +
cdq   +
idiv  edi +
mov [ebp+var_24] eax +
jmp loc_48AFEB  +
mov eax [ebp+var_4] +
imul eax [eax+278h] +
cdq   +
idiv  ebx +
mov [ebp+var_30] eax +
mov eax [ebp+var_4] +
imul eax [eax+27Ch] +
cdq   +
idiv  edi +
mov [ebp+var_2C] eax +
mov eax [ebp+var_4] +
imul eax [eax+280h] +
cdq   +
idiv  ebx +
mov [ebp+var_28] eax +
mov eax [ebp+var_4] +
imul eax [eax+284h] +
cdq   +
idiv  edi +
mov [ebp+var_24] eax +
push esi  +
lea esi [ebp+var_30] +
lea edi [ebp+var_20] +
movs   +
movs   +
movs   +
movs   +
pop esi  +
push esi  +
lea esi [ebp+var_30] +
lea edi [ebp+var_48] +
movs   +
movs   +
movs   +
movs   +
pop esi  +
xor ebx ebx +
mov eax [ebp+var_4] +
call @Controls@TControl@GetTextLen$qqrv  +
mov edi eax +
mov [ebp+var_C] 0FFFFFFFFh +
push 1  +
mov eax [ebp+lParam] +
push eax  +
call SetMapMode  +
mov [ebp+var_8] eax +
push 0  +
push 0  +
push 439h  +
mov eax [ebp+var_4] +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call SendMessageA  +
xor eax eax +
push ebp  +
push offset loc_48B0C7  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
push esi  +
push edi  +
lea esi [ebp+var_48] +
lea edi [ebp+var_30] +
movs   +
movs   +
movs   +
movs   +
pop edi  +
pop esi  +
mov [ebp+var_10] ebx +
lea eax [ebp+lParam] +
push eax  +
push 1  +
push 439h  +
mov eax [ebp+var_4] +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call SendMessageA  +
mov ebx eax +
cmp edi ebx +
jle loc_48B085  +
cmp ebx 0FFFFFFFFh +
jz loc_48B085  +
mov eax esi +
call sub_450424  +
cmp edi ebx +
jle loc_48B08E  +
cmp ebx 0FFFFFFFFh +
jnz loc_48B049  +
mov eax esi +
call @Printers@TPrinter@EndDoc$qqrv  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_48B0CE  +
push 0  +
push 0  +
push 439h  +
mov eax [ebp+var_4] +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call SendMessageA  +
mov eax [ebp+var_8] +
push eax  +
mov eax [ebp+lParam] +
push eax  +
call SetMapMode  +
retn   +
jmp unknown_libname_539  +
jmp loc_48B0A2  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
add esp 0FFFFFFD0h +
add esp 0FFFFFFF4h +
mov esi edx +
mov ebx eax +
mov edx esi +
mov eax ebx +
call @Controls@TWinControl@WMSetCursor$qqrr21Messages@TWMSetCursor  +
cmp dword ptr [esi+0Ch] 0 +
jnz loc_48B221  +
mov dword ptr [esi+0Ch] 1 +
push esp  +
call GetCursorPos  +
mov eax esp +
call unknown_libname_383  +
mov [esp+0Ch+var_4] eax +
mov dx word ptr [esp+0Ch+var_4+2] +
mov ax word ptr [esp+0Ch+var_4] +
call unknown_libname_380  +
push eax  +
xor ecx ecx +
mov edx 84h +
mov eax ebx +
call @Controls@TControl@Perform$qqruiii  +
dec eax  +
jz loc_48B20A  +
add eax 0FFFFFFFBh +
sub eax 2 +
jnb loc_48B221  +
mov eax off_4EA6CC +
mov eax [eax] +
mov edx 0FFFFFFFEh +
call @Forms@TScreen@GetCursors$qqri  +
push eax  +
call SetCursor  +
jmp loc_48B221  +
mov eax off_4EA6CC +
mov eax [eax] +
mov edx 0FFFFFFFCh +
call @Forms@TScreen@GetCursors$qqri  +
push eax  +
call SetCursor  +
add esp 0Ch +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
mov ebx edx +
mov esi eax +
mov eax [ebx+8] +
mov edx [eax+8] +
sub edx 701h +
jz loc_48B259  +
dec edx  +
jz loc_48B24C  +
sub edx 2 +
jz loc_48B284  +
sub edx 4 +
jz loc_48B268  +
jmp loc_48B29E  +
mov eax esi +
mov si 0FFB2h +
call @System@@CallDynaInst$qqrv  +
jmp loc_48B29E  +
lea edx [eax+0Ch] +
mov eax esi +
mov ecx [eax] +
call dword ptr [ecx+0ECh]  +
jmp loc_48B29E  +
mov edi eax +
mov ecx [edi+10h] +
mov edx [edi+0Ch] +
mov eax esi +
call @Comctrls@TCustomRichEdit@SaveClipboard$qqrii  +
test al al +
jnz loc_48B29E  +
mov dword ptr [ebx+0Ch] 1 +
jmp loc_48B29E  +
lea edi [eax+18h] +
mov ecx [edi+4] +
mov edx [edi] +
mov eax esi +
call @Comctrls@TCustomRichEdit@ProtectChange$qqrii  +
test al al +
jnz loc_48B29E  +
mov dword ptr [ebx+0Ch] 1 +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov byte ptr [esp+1+var_1] 1 +
cmp word ptr [eax+272h] 0 +
jz loc_48B2CC  +
push ecx  +
lea ecx [esp+5+var_1] +
push ecx  +
mov ebx eax +
mov ecx edx +
mov edx eax +
mov eax [ebx+274h] +
call dword ptr [ebx+270h]  +
mov al byte ptr [esp+1+var_1] +
pop edx  +
pop ebx  +
retn   +
***
mov byte ptr [esp+1+var_1] 0 +
cmp word ptr [eax+26Ah] 0 +
jz loc_48B2FC  +
push ecx  +
lea ecx [esp+5+var_1] +
push ecx  +
mov ebx eax +
mov ecx edx +
mov edx eax +
mov eax [ebx+26Ch] +
call dword ptr [ebx+268h]  +
mov al byte ptr [esp+1+var_1] +
pop edx  +
pop ebx  +
retn   +
***
jz loc_48B31F  +
mov ebx eax +
mov edx eax +
mov eax [ebx+254h] +
call dword ptr [ebx+250h]  +
pop ebx  +
retn   +
***
jz loc_48B341  +
mov ecx edx +
mov ebx eax +
mov edx eax +
mov eax [ebx+264h] +
call dword ptr [ebx+260h]  +
pop ebx  +
retn   +
***
add esp 0FFFFFFDCh +
push ebx  +
push esi  +
push edi  +
test dl dl +
jz loc_48B359  +
add esp 0FFFFFFF0h +
call unknown_libname_535  +
mov esi ecx +
mov [ebp+var_1] dl +
mov ebx eax +
mov eax esi +
call sub_49DAB8  +
mov [ebx+28h] eax +
mov ecx esi +
xor edx edx +
mov eax ebx +
call sub_49D6CC  +
mov dword ptr [ebx+24h] 32h +
mov byte ptr [ebx+0Ch] 0 +
or eax 0FFFFFFFFh +
mov [ebx+1Ch] eax +
mov [ebp+var_21] 13h +
xor edx edx +
mov [ebp+var_1D] edx +
mov edx [ebx+24h] +
mov [ebp+var_19] edx +
mov [ebp+var_9] eax +
mov edi esi +
mov eax edi +
call sub_48B920  +
call @Controls@TWinControl@HandleAllocated$qqrv  +
test al al +
jz loc_48B3CA  +
mov eax ebx +
call @Classes@TCollectionItem@GetIndex$qqrv  +
push eax  +
mov eax edi +
call sub_48B920  +
call @Controls@TWinControl@GetHandle$qqrv  +
lea ecx [ebp+var_21] +
pop edx  +
call unknown_libname_393  +
mov eax ebx +
cmp [ebp+var_1] 0 +
jz loc_48B3E1  +
call sub_4BABC8  +
pop large dword ptr fs:0  +
add esp 0Ch +
mov eax ebx +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
push edi  +
mov esi edx +
mov ebx eax +
mov edx esi +
mov eax ebx +
call nullsub_5  +
push ebx  +
push offset sub_48B494  +
push ebx  +
push offset sub_48B4BC  +
cmp dword ptr [ebx+24h] 0FFFFFFFFh +
setle cl  +
mov edx offset _str_WidthType.Text +
mov eax esi +
mov ebx [eax] +
call dword ptr [ebx+4]  +
pop esi  +
pop ebx  +
retn   +
***
mov ebx edx +
mov esi eax +
mov eax ebx +
call sub_4A11B4  +
mov eax ebx +
call @Classes@TReader@ReadInteger$qqrv  +
mov edx eax +
mov eax esi +
call @Comctrls@TListColumn@SetWidth$qqri  +
mov eax ebx +
call sub_4A11BC  +
pop esi  +
pop ebx  +
retn   +
***
mov ebx edx +
mov esi eax +
mov eax ebx +
call sub_4A3388  +
mov edx [esi+24h] +
mov eax ebx +
call @TWriter@WriteInteger$qqri  +
mov eax ebx +
call sub_4A3390  +
pop esi  +
pop ebx  +
retn   +
***
add esp 0FFFFFFF8h +
mov eax [ebp+arg_0] +
mov eax [eax-4] +
mov eax [eax+4] +
call sub_48B920  +
mov [ebp+var_8] eax +
mov eax [ebp+var_8] +
call @Controls@TWinControl@HandleAllocated$qqrv  +
test al al +
jnz loc_48B5CD  +
mov eax [ebp+var_8] +
mov ax [eax+1Ch] +
and ax ds:word_48B5D4 +
mov dx ds:word_48B5D8 +
cmp dx ax +
jnz loc_48B5CD  +
mov eax [ebp+var_8] +
cmp byte ptr [eax+289h] 0 +
jnz loc_48B5CD  +
mov eax [ebp+var_8] +
mov eax [eax+248h] +
test eax eax +
jnz loc_48B559  +
mov dl 1 +
mov eax ds:off_49AEB4 +
call @System@TObject@$bctr$qqrv  +
mov edx [ebp+var_8] +
mov [edx+248h] eax +
jmp loc_48B562  +
push 0  +
push 0  +
call sub_49F238  +
push 400h  +
mov eax [ebp+var_8] +
mov ecx [eax+248h] +
mov dl 1 +
mov eax ds:off_49B290 +
call sub_49FBA4  +
mov [ebp+var_4] eax +
xor eax eax +
push ebp  +
push offset loc_48B5C6  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov eax [ebp+arg_0] +
mov eax [eax-4] +
mov edx [eax+4] +
mov eax [ebp+var_4] +
call sub_4A2B74  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_48B5CD  +
mov eax [ebp+var_4] +
call @System@TObject@Free$qqrv  +
push 0  +
push 0  +
mov eax [ebp+var_8] +
mov eax [eax+248h] +
call sub_49F1D4  +
retn   +
jmp unknown_libname_539  +
jmp loc_48B5AB  +
pop ecx  +
pop ecx  +
pop ebp  +
retn   +
***
push ecx  +
push ebx  +
push esi  +
mov [ebp+var_4] eax +
mov eax [ebp+var_4] +
mov eax [eax+4] +
call sub_49DAB8  +
mov ebx eax +
dec ebx  +
test ebx ebx +
jl loc_48B611  +
inc ebx  +
xor esi esi +
mov eax [ebp+var_4] +
mov eax [eax+4] +
mov edx esi +
call sub_49DAC0  +
cmp dword ptr [eax+24h] 0FFFFFFFFh +
jle loc_48B611  +
inc esi  +
dec ebx  +
jnz loc_48B5FA  +
mov eax [ebp+var_4] +
mov eax [eax+4] +
call sub_49DAB8  +
cmp esi eax +
setnz dl  +
mov eax [ebp+var_4] +
call sub_49D734  +
push ebp  +
call @ComCtrls@_17328  +
pop ecx  +
pop esi  +
pop ebx  +
pop ecx  +
pop ebp  +
retn   +
***
push 0  +
push ebx  +
push esi  +
push edi  +
mov esi eax +
xor eax eax +
push ebp  +
push offset loc_48B6FE  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov eax esi +
call @Classes@TCollectionItem@SetIndex$qqri  +
mov eax [esi+4] +
call sub_49DAB8  +
push eax  +
lea eax [ebp+var_4] +
mov ecx 1 +
mov edx ds:off_48B638 +
call unknown_libname_559  +
add esp 4 +
mov eax [esi+4] +
call sub_49DAB8  +
mov edi eax +
dec edi  +
test edi edi +
jl loc_48B6C3  +
inc edi  +
xor ebx ebx +
mov edx ebx +
mov eax [esi+4] +
call sub_49DAC0  +
mov eax [eax+28h] +
mov edx [ebp+var_4] +
mov [edx+ebx*4] eax +
inc ebx  +
dec edi  +
jnz loc_48B6AC  +
mov eax [esi+4] +
call sub_49DAB8  +
push eax  +
mov eax [esi+4] +
call sub_48B920  +
call @Controls@TWinControl@GetHandle$qqrv  +
mov ecx [ebp+var_4] +
pop edx  +
call @Commctrl@ListView_SetColumnOrderArray$qqruiipi  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_48B705  +
lea eax [ebp+var_4] +
mov edx ds:off_48B638 +
call @System@@DynArrayClear$qqrrpvpv  +
retn   +
jmp unknown_libname_539  +
jmp loc_48B6EF  +
pop edi  +
pop esi  +
pop ebx  +
pop ecx  +
pop ebp  +
retn   +
***
mov esi edx +
mov ebx eax +
mov eax [ebx+10h] +
mov edx esi +
call @System@@LStrCmp$qqrv  +
jz loc_48B72F  +
lea eax [ebx+10h] +
mov edx esi +
call unknown_libname_542  +
mov eax ebx +
call @TListColumn@DoChange$qqrv  +
pop esi  +
pop ebx  +
retn   +
***
cmp dword ptr [ebx+24h] 0 +
xor al 1 +
retn   +
***
cmp edx [eax+24h] +
jz locret_48B791  +
mov ecx [eax+18h] +
cmp edx ecx +
jge loc_48B77C  +
test edx edx +
jl loc_48B77C  +
mov edx ecx +
jmp loc_48B789  +
mov ecx [eax+14h] +
test ecx ecx +
jle loc_48B789  +
cmp ecx edx +
jge loc_48B789  +
mov edx ecx +
mov [eax+24h] edx +
call @TListColumn@DoChange$qqrv  +
retn   +
***
mov ebx edx +
mov esi eax +
cmp bl [esi+0Ch] +
jz loc_48B7C6  +
mov eax esi +
call @Classes@TCollectionItem@GetIndex$qqrv  +
test eax eax +
jz loc_48B7C6  +
mov [esi+0Ch] bl +
xor edx edx +
mov eax esi +
call sub_49D734  +
mov eax [esi+4] +
call sub_48B920  +
mov edx [eax] +
call dword ptr [edx+80h]  +
pop esi  +
pop ebx  +
retn   +
***
mov ebx eax +
cmp dl [ebx+0Dh] +
jz loc_48B7FC  +
mov [ebx+0Dh] dl +
mov eax [ebx+4] +
call sub_48B920  +
test eax eax +
jz loc_48B7F5  +
mov eax [ebx+4] +
call sub_48B920  +
mov si 0FFEEh +
call @System@@CallDynaInst$qqrv  +
mov eax ebx +
call @TListColumn@DoChange$qqrv  +
pop esi  +
pop ebx  +
retn   +
***
cmp edx [eax+1Ch] +
jz locret_48B80D  +
mov [eax+1Ch] edx +
call @TListColumn@DoChange$qqrv  +
retn   +
***
cmp edx [eax+14h] +
cmp edx [eax+18h] +
mov esi edx +
mov ebx eax +
mov eax esi +
mov edx ds:off_484344 +
call @System@@IsClass$qqrp14System@TObjectp17System@TMetaClass  +
test al al +
jz loc_48B896  +
mov dl [esi+0Ch] +
mov eax ebx +
call @Comctrls@TListColumn@SetAlignment$qqr18Classes@TAlignment  +
mov dl [esi+0Dh] +
mov eax ebx +
call @Comctrls@TListColumn@SetAutoSize$qqro  +
mov edx [esi+10h] +
mov eax ebx +
call sub_48B70C  +
mov edx [esi+1Ch] +
mov eax ebx +
call @Httpprod@THTMLTableAttributes@SetBorder$qqri  +
mov edx [esi+14h] +
mov eax ebx +
call unknown_libname_357  +
mov edx [esi+18h] +
mov eax ebx +
call sub_48B820  +
mov eax esi +
call @Comctrls@TListColumn@GetWidth$qqrv  +
mov edx eax +
mov eax ebx +
call @Comctrls@TListColumn@SetWidth$qqri  +
pop esi  +
pop ebx  +
retn   +
mov edx esi +
mov eax ebx +
call @Classes@TPersistent@Assign$qqrp19Classes@TPersistent  +
pop esi  +
pop ebx  +
retn   +
***
mov esi edx +
mov ebx eax +
mov eax esi +
mov edx [ebx+10h] +
call unknown_libname_542  +
cmp dword ptr [esi] 0 +
jnz loc_48B8C2  +
mov edx esi +
mov eax ebx +
call unknown_libname_576  +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
test dl dl +
jz loc_48B8D7  +
add esp 0FFFFFFF0h +
call unknown_libname_535  +
mov esi ecx +
mov ebx edx +
mov edi eax +
mov ecx ds:off_484344 +
xor edx edx +
mov eax edi +
call @Dbexplif@TExploreList@$bctr$qqrp23Dbexplif@TExploreObject  +
mov [edi+18h] esi +
mov eax edi +
test bl bl +
jz loc_48B904  +
call sub_4BABC8  +
pop large dword ptr fs:0  +
add esp 0Ch +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov esi edx +
mov ebx eax +
mov edx esi +
mov eax ebx +
call sub_49DAC0  +
pop esi  +
pop ebx  +
retn   +
***
mov esi edx +
mov ebx eax +
test esi esi +
jz loc_48B94A  +
mov eax esi +
call @Classes@TCollectionItem@GetIndex$qqrv  +
push eax  +
mov eax ebx +
call sub_48B920  +
pop edx  +
call @Comctrls@TCustomListView@UpdateColumn$qqri  +
pop esi  +
pop ebx  +
retn   +
mov eax ebx +
call sub_48B920  +
call @Comctrls@TCustomListView@UpdateColumns$qqrv  +
pop esi  +
pop ebx  +
retn   +
***
add esp 0FFFFFFDCh +
push ebx  +
push esi  +
push edi  +
mov [ebp+var_4] eax +
lea edi [ebp+var_24] +
mov eax [ebp+var_4] +
call sub_48B920  +
call @Controls@TWinControl@HandleAllocated$qqrv  +
test al al +
jz loc_48BA3E  +
mov eax [ebp+var_4] +
mov edx [eax] +
call dword ptr [edx+20h]  +
xor eax eax +
push ebp  +
push offset loc_48BA37  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov eax [ebp+var_4] +
call sub_49DAB8  +
mov ebx eax +
dec ebx  +
cmp ebx 0 +
jl loc_48B9C0  +
mov eax [ebp+var_4] +
call sub_48B920  +
call @Controls@TWinControl@GetHandle$qqrv  +
mov edx ebx +
call @Commctrl@ListView_DeleteColumn$qqruii  +
dec ebx  +
cmp ebx 0FFFFFFFFh +
jnz loc_48B9A6  +
mov eax [ebp+var_4] +
call sub_49DAB8  +
mov esi eax +
dec esi  +
test esi esi +
jl loc_48BA14  +
inc esi  +
xor ebx ebx +
mov dword ptr [edi] 3 +
xor eax eax +
mov [edi+4] eax +
mov edx ebx +
mov eax [ebp+var_4] +
call sub_48B90C  +
mov eax [eax+24h] +
mov [edi+8] eax +
mov eax [ebp+var_4] +
call sub_48B920  +
call @Controls@TWinControl@GetHandle$qqrv  +
mov ecx edi +
mov edx ebx +
call unknown_libname_393  +
mov edx ebx +
mov eax [ebp+var_4] +
call sub_48B90C  +
mov [eax+28h] ebx +
inc ebx  +
dec esi  +
jnz loc_48B9D2  +
mov eax [ebp+var_4] +
call sub_48B920  +
call @Comctrls@TCustomListView@UpdateColumns$qqrv  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_48BA3E  +
mov eax [ebp+var_4] +
mov edx [eax] +
call dword ptr [edx+24h]  +
retn   +
jmp unknown_libname_539  +
jmp loc_48BA2E  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
test dl dl +
mov esi edx +
mov ebx eax +
mov eax esi +
mov edx [ebx+1Ch] +
call unknown_libname_542  +
pop esi  +
pop ebx  +
retn   +
***
mov esi edx +
mov ebx eax +
lea eax [ebx+1Ch] +
mov edx esi +
call unknown_libname_542  +
mov dl 1 +
mov eax ebx +
call sub_49D734  +
pop esi  +
pop ebx  +
retn   +
***
add esp 0FFFFFFF8h +
mov esi edx +
mov ebx eax +
mov edx esi +
mov eax ebx +
call sub_49DAC0  +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
test dl dl +
jz loc_48BCDF  +
add esp 0FFFFFFF0h +
call unknown_libname_535  +
mov esi ecx +
mov ebx edx +
mov edi eax +
xor edx edx +
mov eax edi +
call @System@TObject@$bctr$qqrv  +
mov [edi+30h] esi +
mov dl 1 +
mov eax ds:off_49A5D8 +
call @System@TObject@$bctr$qqrv  +
mov [edi+34h] eax +
mov eax edi +
test bl bl +
jz loc_48BD15  +
call sub_4BABC8  +
pop large dword ptr fs:0  +
add esp 0Ch +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
call unknown_libname_536  +
mov ebx edx +
mov esi eax +
mov eax [esi+34h] +
call @System@TObject@Free$qqrv  +
mov edx ebx +
and dl 0FCh +
mov eax esi +
call @Classes@TStringList@$bdtr$qqrv  +
test bl bl +
jle loc_48BD46  +
mov eax esi +
call @System@@ClassDestroy$qqrp14System@TObject  +
pop esi  +
pop ebx  +
retn   +
***
mov ebx eax +
mov eax ebx +
call sub_49EBBC  +
mov esi eax +
or edx 0FFFFFFFFh +
mov eax [ebx+34h] +
call @Classes@TList@Add$qqrpv  +
lea edx [esi+1] +
mov eax ebx +
call @ComCtrls@_17292  +
mov eax esi +
pop esi  +
pop ebx  +
retn   +
***
mov ebx eax +
mov eax ebx +
call sub_49EBC8  +
mov esi eax +
or edx 0FFFFFFFFh +
mov eax [ebx+34h] +
call @Classes@TList@Add$qqrpv  +
lea edx [esi+1] +
mov eax ebx +
call @ComCtrls@_17292  +
mov eax esi +
pop esi  +
pop ebx  +
retn   +
***
mov eax ebx +
mov esi edx +
mov eax [eax+30h] +
mov esi edx +
mov eax [eax+30h] +
call sub_48BF94  +
mov ebx eax +
mov eax ebx +
call @Comctrls@TCustomListView@ColumnsShowing$qqrv  +
test al al +
jz loc_48BE20  +
mov eax [ebx+23Ch] +
call sub_49DAB8  +
cmp esi eax +
jge loc_48BE20  +
mov edx esi +
mov eax ebx +
call @Comctrls@TCustomListView@GetColumnFromIndex$qqri  +
cmp dword ptr [eax+24h] 0FFFFFFFFh +
jnz loc_48BE20  +
mov edx esi +
mov eax ebx +
call @Comctrls@TCustomListView@UpdateColumn$qqri  +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
mov ebx edx +
mov esi eax +
mov edx ebx +
mov eax esi +
call sub_49EEDC  +
or ecx 0FFFFFFFFh +
mov edx ebx +
mov eax [esi+34h] +
call @Classes@TList@Insert$qqripv  +
lea edi [ebx+1] +
mov eax esi +
mov edx [eax] +
call dword ptr [edx+14h]  +
mov ebx eax +
sub ebx edi +
jl loc_48BE5F  +
inc ebx  +
mov edx edi +
mov eax esi +
call @ComCtrls@_17292  +
inc edi  +
dec ebx  +
jnz loc_48BE52  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov esi edx +
mov esi edx +
mov eax [eax+30h] +
mov esi edx +
mov ebx eax +
mov edx esi +
mov eax [ebx+34h] +
call @Classes@TList@Get$qqri  +
pop esi  +
pop ebx  +
retn   +
***
mov eax [eax+34h] +
call sub_49CE90  +
retn   +
***
test dl dl +
jz loc_48BEE6  +
add esp 0FFFFFFF0h +
call unknown_libname_535  +
mov ebx edx +
mov esi eax +
mov [esi+4] ecx +
mov ecx esi +
mov dl 1 +
mov eax ds:off_48BBBC +
call sub_48BCD0  +
mov [esi+8] eax +
mov dword ptr [esi+1Ch] 0FFFFFFFFh +
mov dword ptr [esi+20h] 0FFFFFFFFh +
mov eax esi +
test bl bl +
jz loc_48BF21  +
call sub_4BABC8  +
pop large dword ptr fs:0  +
add esp 0Ch +
mov eax esi +
pop esi  +
pop ebx  +
retn   +
***
call unknown_libname_536  +
mov eax [eax+4] +
mov eax [eax+4] +
retn   +
***
cmp byte ptr [ebx+28h] 0 +
jnz loc_48BFBB  +
mov eax ebx +
call sub_48BF94  +
cmp ebx [eax+28Ch] +
jz loc_48BFBB  +
mov eax ebx +
call @System@TObject@Free$qqrv  +
pop ebx  +
retn   +
***
mov eax ebx +
call sub_48BF94  +
call @Controls@TWinControl@GetHandle$qqrv  +
pop ebx  +
retn   +
***
mov esi eax +
mov eax [esi+4] +
mov ebx [eax+4] +
cmp byte ptr [ebx+244h] 0 +
jnz loc_48C00F  +
mov eax ebx +
call @Controls@TWinControl@HandleAllocated$qqrv  +
test al al +
jz loc_48C00F  +
mov eax esi +
call @Comctrls@TListItem@GetIndex$qqrv  +
push eax  +
mov eax ebx +
call @Controls@TWinControl@GetHandle$qqrv  +
pop edx  +
call @Commctrl@ListView_GetCheckState$qqruii  +
test eax eax +
setnz al  +
pop esi  +
pop ebx  +
retn   +
mov al [esi+2Ah] +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
mov ebx edx +
mov edi eax +
mov eax edi +
call @Comctrls@TListItem@GetChecked$qqrv  +
cmp bl al +
jz loc_48C05E  +
mov [edi+2Ah] bl +
mov eax [edi+4] +
mov esi [eax+4] +
cmp byte ptr [esi+244h] 0 +
jnz loc_48C05E  +
mov eax esi +
call @Controls@TWinControl@HandleAllocated$qqrv  +
test al al +
jz loc_48C05E  +
mov eax edi +
call @Comctrls@TListItem@GetIndex$qqrv  +
push eax  +
mov eax esi +
call @Controls@TWinControl@GetHandle$qqrv  +
mov ecx ebx +
pop edx  +
call unknown_libname_394  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov eax ebx +
call @Comctrls@TListItem@GetIndex$qqrv  +
push eax  +
mov eax ebx +
call sub_48BFC0  +
pop edx  +
call @Commctrl@ListView_Update$qqruii  +
pop ebx  +
retn   +
***
mov esi edx +
cmp edx [ebx+0Ch] +
jz loc_48C15C  +
mov [ebx+0Ch] edx +
mov eax ebx +
call sub_48BF94  +
mov al [eax+229h] +
sub al 1 +
jz loc_48C150  +
sub al 2 +
jnz loc_48C15C  +
mov eax ebx +
call sub_48BF94  +
call @Comctrls@TCustomListView@AlphaSort$qqrv  +
pop ebx  +
retn   +
***
mov esi eax +
push edi  +
push edi  +
mov ebx eax +
cmp edx [ebx+14h] +
jz loc_48C3D9  +
mov [ebx+14h] edx +
mov eax [ebx+4] +
mov eax [eax+4] +
cmp byte ptr [eax+244h] 0 +
jnz loc_48C3D9  +
mov [esp+28h+var_28] 10h +
mov [esp+28h+var_4] edx +
mov eax ebx +
call @Comctrls@TListItem@GetIndex$qqrv  +
mov [esp+28h+var_24] eax +
xor eax eax +
mov [esp+28h+var_20] eax +
mov eax ebx +
call sub_48BFC0  +
mov edx esp +
call unknown_libname_387  +
mov eax ebx +
call @Comctrls@TListItem@GetIndex$qqrv  +
push eax  +
mov eax ebx +
call @Comctrls@TListItem@GetIndex$qqrv  +
push eax  +
mov eax ebx +
call sub_48BF94  +
pop edx  +
pop ecx  +
call sub_48DC00  +
add esp 28h +
pop ebx  +
retn   +
***
mov esi edx +
mov ebx eax +
mov eax esi +
mov edx ds:off_4845BC +
call @System@@IsClass$qqrp14System@TObjectp17System@TMetaClass  +
test al al +
jz loc_48C46B  +
mov eax esi +
mov edx ds:off_4845BC +
call unknown_libname_534  +
mov esi eax +
mov edx [esi+24h] +
mov eax ebx +
call @Comctrls@TListItem@SetCaption$qqrx17System@AnsiString  +
mov edx [esi+0Ch] +
mov eax ebx +
call @Comctrls@TListItem@SetData$qqrpv  +
mov ecx [esi+10h] +
xor edx edx +
mov eax ebx +
call @Comctrls@TListItem@SetImage$qqrii  +
mov edx [esi+14h] +
mov eax ebx +
call @Comctrls@TListItem@SetIndent$qqri  +
mov ecx [esi+1Ch] +
mov edx 1 +
mov eax ebx +
call @Comctrls@TListItem@SetImage$qqrii  +
mov ecx [esi+20h] +
mov edx 2 +
mov eax ebx +
call @Comctrls@TListItem@SetImage$qqrii  +
mov edx [esi+8] +
mov eax ebx +
call @Comctrls@TListItem@SetSubItems$qqrp16Classes@TStrings  +
mov eax esi +
call @Comctrls@TListItem@GetChecked$qqrv  +
mov edx eax +
mov eax ebx +
call @Comctrls@TListItem@SetChecked$qqro  +
pop esi  +
pop ebx  +
retn   +
mov edx esi +
mov eax ebx +
call @Classes@TPersistent@Assign$qqrp19Classes@TPersistent  +
pop esi  +
pop ebx  +
retn   +
***
mov esi edx +
mov ebx eax +
mov eax [ebx+24h] +
mov edx [esi+24h] +
call @System@@LStrCmp$qqrv  +
jnz loc_48C493  +
mov eax [ebx+0Ch] +
cmp eax [esi+0Ch] +
jz loc_48C498  +
xor eax eax +
pop esi  +
pop ebx  +
retn   +
mov al 1 +
pop esi  +
pop ebx  +
retn   +
***
test edx edx +
jz loc_48C4AF  +
mov eax [esi+8] +
mov ecx [eax] +
call dword ptr [ecx+8]  +
pop esi  +
retn   +
***
mov edx [eax+4] +
mov ecx [edx+4] +
cmp byte ptr [ecx+244h] 0 +
jz loc_48C4C7  +
mov eax [eax+18h] +
retn   +
xchg eax edx +
call sub_48C6EC  +
retn   +
***
push edi  +
mov eax [eax+8] +
call @ComCtrls@_17378  +
retn   +
***
push edi  +
add esp 0FFFFFFD8h +
mov edi ecx +
mov esi edx +
mov ebx eax +
mov edx esi +
mov eax [ebx+8] +
call @ComCtrls@_17378  +
cmp edi eax +
jz loc_48C56E  +
mov ecx edi +
mov edx esi +
mov eax [ebx+8] +
call sub_48BECC  +
mov eax [ebx+4] +
mov eax [eax+4] +
cmp byte ptr [eax+244h] 0 +
jnz loc_48C56E  +
mov [esp+28h+var_28] 2 +
mov [esp+28h+var_C] 0FFFFFFFFh +
mov eax ebx +
call @Comctrls@TListItem@GetIndex$qqrv  +
mov [esp+28h+var_24] eax +
inc esi  +
mov [esp+28h+var_20] esi +
mov eax ebx +
call sub_48BFC0  +
mov edx esp +
call unknown_libname_387  +
add esp 28h +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
call unknown_libname_536  +
or ecx 0FFFFFFFFh +
xor edx edx +
call @Comctrls@TListItems@AddItem$qqrp18Comctrls@TListItemi  +
retn   +
***
push edi  +
add esp 0FFFFFFD8h +
mov esi ecx +
mov ebx eax +
test edx edx +
jnz loc_48C609  +
mov eax [ebx+4] +
mov edx [eax] +
call dword ptr [edx+0F4h]  +
mov edi eax +
jmp loc_48C60B  +
mov edi edx +
test esi esi +
jge loc_48C618  +
mov eax ebx +
call sub_48C63C  +
mov esi eax +
push esp  +
mov ecx edi +
mov edx esi +
mov eax ebx +
call @Comctrls@TListItems@CreateItem$qqrip18Comctrls@TListItem  +
push esp  +
mov eax ebx +
call unknown_libname_360  +
pop edx  +
call unknown_libname_388  +
mov eax edi +
add esp 28h +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov eax [ebx+4] +
call @Controls@TWinControl@HandleAllocated$qqrv  +
test al al +
jz loc_48C659  +
mov eax ebx +
call unknown_libname_360  +
call @Commctrl@ListView_GetItemCount$qqrui  +
pop ebx  +
retn   +
xor eax eax +
pop ebx  +
retn   +
***
mov eax [eax+4] +
call @Controls@TWinControl@GetHandle$qqrv  +
retn   +
***
push edi  +
add esp 0FFFFFFD8h +
mov edi edx +
mov ebx eax +
xor esi esi +
mov eax [ebx+4] +
call @Controls@TWinControl@HandleAllocated$qqrv  +
test al al +
jz loc_48C6E2  +
mov eax [ebx+4] +
cmp byte ptr [eax+244h] 0 +
jz loc_48C6BB  +
mov eax esp +
xor ecx ecx +
mov edx 28h +
call @System@@FillChar$qqrv  +
xor eax eax +
mov [esp+28h+var_28] eax +
mov [esp+28h+var_24] edi +
xor eax eax +
mov [esp+28h+var_20] eax +
mov edx esp +
mov eax [ebx+4] +
call sub_48E504  +
mov esi eax +
jmp loc_48C6E2  +
mov [esp+28h+var_28] 4 +
mov [esp+28h+var_24] edi +
xor eax eax +
mov [esp+28h+var_20] eax +
mov eax ebx +
call unknown_libname_360  +
mov edx esp +
call unknown_libname_386  +
test eax eax +
jz loc_48C6E2  +
mov esi [esp+28h+var_8] +
mov eax esi +
add esp 28h +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov ebx eax +
mov [esp+18h+var_18] 1 +
mov [esp+18h+var_10] edx +
mov eax ebx +
call unknown_libname_360  +
mov ecx esp +
or edx 0FFFFFFFFh +
call @Commctrl@ListView_FindItem$qqruiirx14tagLVFINDINFOA  +
add esp 18h +
pop ebx  +
retn   +
***
mov esi edx +
mov eax [ebx+4] +
call @Controls@TWinControl@HandleAllocated$qqrv  +
test al al +
jz loc_48C74B  +
mov eax ebx +
call unknown_libname_360  +
call unknown_libname_389  +
pop ebx  +
retn   +
***
cmp dword ptr [ebx+8] 0 +
jnz loc_48C762  +
mov dl 1 +
mov eax ebx +
call @Comctrls@TListItems@SetUpdateState$qqro  +
inc dword ptr [ebx+8]  +
pop ebx  +
retn   +
***
push ecx  +
dec dword ptr [eax+8]  +
cmp dword ptr [eax+8] 0 +
jnz locret_48C93C  +
xor edx edx +
call @Comctrls@TListItems@SetUpdateState$qqro  +
retn   +
***
push edi  +
push ebp  +
mov ebx edx +
mov edi eax +
mov eax ebx +
mov edx ds:off_484654 +
call @System@@IsClass$qqrp14System@TObjectp17System@TMetaClass  +
test al al +
jz loc_48C990  +
mov eax edi +
call sub_48C730  +
mov ebp ebx +
mov eax ebp +
call sub_48C63C  +
mov ebx eax +
dec ebx  +
test ebx ebx +
jl loc_48C999  +
inc ebx  +
xor esi esi +
mov edx esi +
mov eax ebp +
call @Comctrls@TListItems@GetItem$qqri  +
push eax  +
mov eax edi +
call unknown_libname_359  +
pop edx  +
mov ecx [eax] +
call dword ptr [ecx+8]  +
inc esi  +
dec ebx  +
jnz loc_48C973  +
jmp loc_48C999  +
mov edx ebx +
mov eax edi +
call @Classes@TPersistent@Assign$qqrp19Classes@TPersistent  +
pop ebp  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push ecx  +
push ebx  +
push esi  +
push edi  +
mov eax [ebp+arg_0] +
mov eax [eax-4] +
mov edi [eax+20h] +
test edi edi +
jnz loc_48C9C6  +
mov eax [ebp+arg_0] +
mov eax [eax-8] +
call sub_48C63C  +
test eax eax +
setnle bl  +
jmp loc_48CA26  +
mov eax edi +
call sub_48C63C  +
mov ebx eax +
mov eax [ebp+arg_0] +
mov eax [eax-8] +
call sub_48C63C  +
cmp ebx eax +
jz loc_48C9E2  +
mov bl 1 +
jmp loc_48CA26  +
xor ebx ebx +
mov eax [ebp+arg_0] +
mov eax [eax-8] +
call sub_48C63C  +
dec eax  +
test eax eax +
jl loc_48CA26  +
inc eax  +
mov [ebp+var_4] eax +
xor esi esi +
mov edx esi +
mov eax edi +
call @Comctrls@TListItems@GetItem$qqri  +
push eax  +
mov eax [ebp+arg_0] +
mov eax [eax-8] +
mov edx esi +
call @Comctrls@TListItems@GetItem$qqri  +
pop edx  +
call @Comctrls@TListItem@IsEqual$qqrp18Comctrls@TListItem  +
mov ebx eax +
xor bl 1 +
test bl bl +
jnz loc_48CA26  +
inc esi  +
dec [ebp+var_4]  +
jnz loc_48C9FA  +
mov eax ebx +
pop edi  +
pop esi  +
pop ebx  +
pop ecx  +
pop ebp  +
retn   +
***
add esp 0FFFFFFF8h +
push ebx  +
mov [ebp+var_4] edx +
mov [ebp+var_8] eax +
mov edx [ebp+var_4] +
mov eax [ebp+var_8] +
call nullsub_5  +
mov eax [ebp+var_8] +
push eax  +
push offset @Comctrls@TListItems@ReadData$qqrp15Classes@TStream  +
mov eax [ebp+var_8] +
push eax  +
push offset @Comctrls@TListItems@WriteData$qqrp15Classes@TStream  +
push ebp  +
call @ComCtrls@_16991  +
pop ecx  +
mov ecx eax +
mov edx offset _str_Data_0.Text +
mov eax [ebp+var_4] +
mov ebx [eax] +
call dword ptr [ebx+8]  +
pop ebx  +
pop ecx  +
pop ecx  +
pop ebp  +
retn   +
***
add esp 0FFFFFFD4h +
call sub_4BB610  +
cmp eax 0FFh +
jle locret_48CC91  +
mov eax 0FFh +
retn   +
***
add esp 0FFFFFFC8h +
push ebx  +
push esi  +
push edi  +
xor ecx ecx +
mov [ebp+var_38] ecx +
mov [ebp+var_34] ecx +
mov [ebp+var_8] edx +
mov [ebp+var_4] eax +
xor eax eax +
push ebp  +
push offset loc_48CF29  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov [ebp+var_10] 8 +
mov eax [ebp+var_4] +
call sub_48C63C  +
dec eax  +
test eax eax +
jl loc_48CD48  +
inc eax  +
mov [ebp+var_28] eax +
mov [ebp+var_C] 0 +
mov edx [ebp+var_C] +
mov eax [ebp+var_4] +
call @Comctrls@TListItems@GetItem$qqri  +
mov eax [eax+24h] +
call sub_48CC80  +
mov [ebp+var_14] eax +
mov edx [ebp+var_C] +
mov eax [ebp+var_4] +
call @Comctrls@TListItems@GetItem$qqri  +
mov eax [eax+8] +
mov edx [eax] +
call dword ptr [edx+14h]  +
mov ebx eax +
dec ebx  +
test ebx ebx +
jl loc_48CD37  +
inc ebx  +
xor esi esi +
mov edx [ebp+var_C] +
mov eax [ebp+var_4] +
call @Comctrls@TListItems@GetItem$qqri  +
mov eax [eax+8] +
lea ecx [ebp+var_34] +
mov edx esi +
mov edi [eax] +
call dword ptr [edi+0Ch]  +
mov eax [ebp+var_34] +
call sub_48CC80  +
inc eax  +
add [ebp+var_14] eax +
add [ebp+var_14] 2 +
inc esi  +
dec ebx  +
jnz loc_48CD0B  +
mov eax [ebp+var_14] +
add eax 15h +
add [ebp+var_10] eax +
inc [ebp+var_C]  +
dec [ebp+var_28]  +
jnz loc_48CCD8  +
mov eax [ebp+var_10] +
call sub_4A8724  +
mov [ebp+var_1C] eax +
xor edx edx +
push ebp  +
push offset loc_48CF07  +
push dword ptr fs:[edx]  +
mov fs:[edx] esp +
mov eax [ebp+var_1C] +
mov edx [ebp+var_10] +
mov [eax] edx +
mov eax [ebp+var_4] +
call sub_48C63C  +
mov edx [ebp+var_1C] +
mov [edx+4] eax +
mov eax [ebp+var_1C] +
add eax 8 +
mov [ebp+var_20] eax +
xor eax eax +
mov [ebp+var_24] eax +
mov eax [ebp+var_4] +
call sub_48C63C  +
dec eax  +
test eax eax +
jl loc_48CE86  +
inc eax  +
mov [ebp+var_28] eax +
mov [ebp+var_C] 0 +
mov edx [ebp+var_C] +
mov eax [ebp+var_4] +
call @Comctrls@TListItems@GetItem$qqri  +
mov [ebp+var_2C] eax +
mov eax [ebp+var_20] +
add eax 14h +
mov edx [ebp+var_2C] +
mov edx [edx+24h] +
mov ecx 0FFh +
call @System@@LStrToString$qqrv  +
mov eax [ebp+var_2C] +
mov eax [eax+10h] +
mov edx [ebp+var_20] +
mov [edx] eax +
mov eax [ebp+var_2C] +
mov eax [eax+1Ch] +
mov edx [ebp+var_20] +
mov [edx+8] eax +
mov eax [ebp+var_2C] +
mov eax [eax+20h] +
mov edx [ebp+var_20] +
mov [edx+4] eax +
mov eax [ebp+var_2C] +
mov eax [eax+0Ch] +
mov edx [ebp+var_20] +
mov [edx+10h] eax +
mov eax [ebp+var_2C] +
mov eax [eax+8] +
mov edx [eax] +
call dword ptr [edx+14h]  +
mov edx [ebp+var_20] +
mov [edx+0Ch] eax +
mov eax [ebp+var_20] +
add eax 14h +
mov [ebp+var_24] eax +
mov eax [ebp+var_20] +
movzx eax byte ptr [eax+14h] +
inc eax  +
add [ebp+var_24] eax +
xor eax eax +
mov [ebp+var_18] eax +
mov eax [ebp+var_2C] +
mov eax [eax+8] +
mov edx [eax] +
call dword ptr [edx+14h]  +
mov ebx eax +
dec ebx  +
test ebx ebx +
jl loc_48CE6A  +
inc ebx  +
xor esi esi +
lea ecx [ebp+var_38] +
mov eax [ebp+var_2C] +
mov eax [eax+8] +
mov edx esi +
mov edi [eax] +
call dword ptr [edi+0Ch]  +
mov edx [ebp+var_38] +
mov eax [ebp+var_24] +
mov ecx 0FFh +
call @System@@LStrToString$qqrv  +
mov eax [ebp+var_24] +
movzx eax byte ptr [eax] +
mov [ebp+var_14] eax +
mov eax [ebp+var_14] +
inc eax  +
add [ebp+var_18] eax +
add [ebp+var_24] eax +
inc esi  +
dec ebx  +
jnz loc_48CE33  +
mov eax [ebp+var_20] +
movzx eax byte ptr [eax+14h] +
add eax 15h +
add eax [ebp+var_18] +
add [ebp+var_20] eax +
inc [ebp+var_C]  +
dec [ebp+var_28]  +
jnz loc_48CDA1  +
mov edi [ebp+var_24] +
mov eax [ebp+var_4] +
call sub_48C63C  +
dec eax  +
test eax eax +
jl loc_48CEE0  +
inc eax  +
mov [ebp+var_28] eax +
mov [ebp+var_C] 0 +
mov edx [ebp+var_C] +
mov eax [ebp+var_4] +
call @Comctrls@TListItems@GetItem$qqri  +
mov [ebp+var_30] eax +
mov eax [ebp+var_30] +
mov eax [eax+8] +
mov edx [eax] +
call dword ptr [edx+14h]  +
mov ebx eax +
dec ebx  +
test ebx ebx +
jl loc_48CED8  +
inc ebx  +
xor esi esi +
mov edx esi +
mov eax [ebp+var_30] +
call sub_48C500  +
mov [edi] ax +
add edi 2 +
inc esi  +
dec ebx  +
jnz loc_48CEC4  +
inc [ebp+var_C]  +
dec [ebp+var_28]  +
jnz loc_48CEA1  +
mov edx [ebp+var_1C] +
mov ecx [ebp+var_10] +
mov eax [ebp+var_8] +
call sub_49F418  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_48CF0E  +
mov edx [ebp+var_10] +
mov eax [ebp+var_1C] +
call sub_4B97E0  +
retn   +
jmp unknown_libname_539  +
jmp loc_48CEFB  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_48CF30  +
lea eax [ebp+var_38] +
mov edx 2 +
call unknown_libname_541  +
retn   +
jmp unknown_libname_539  +
jmp loc_48CF1B  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
mov esi edx +
mov ebx eax +
mov edx esi +
mov eax ebx +
call @Comctrls@TListItems@GetItem$qqri  +
call @Comctrls@TListItem@Delete$qqrv  +
pop esi  +
pop ebx  +
retn   +
***
mov eax [ebp+arg_0] +
mov dword ptr [eax] 6 +
mov [eax+4] edx +
xor edx edx +
mov [eax+8] edx +
mov dword ptr [eax+1Ch] 0FFFFFFFFh +
mov [eax+20h] ecx +
pop ebp  +
retn 4  +
***
push edi  +
test dl dl +
jz loc_48CF83  +
add esp 0FFFFFFF0h +
call unknown_libname_535  +
mov esi ecx +
mov ebx edx +
mov edi eax +
xor edx edx +
mov eax edi +
call @System@TObject@$bctr$qqrv  +
test esi esi +
jnz loc_48CFAD  +
mov ecx off_4EAAA4 +
mov dl 1 +
mov eax ds:off_4A7A78 +
call @Sysutils@Exception@$bctr$qqrp20System@TResStringRec  +
call @System@@RaiseExcept$qqrv  +
mov [edi+4] esi +
xor edx edx +
mov eax edi +
call @Comctrls@TIconOptions@SetArrangement$qqr25Comctrls@TIconArrangement  +
xor edx edx +
mov eax edi +
call @Comctrls@TIconOptions@SetAutoArrange$qqro  +
mov dl 1 +
mov eax edi +
call @Comctrls@TIconOptions@SetWrapText$qqro  +
mov eax edi +
test bl bl +
jz loc_48CFE0  +
call sub_4BABC8  +
pop large dword ptr fs:0  +
add esp 0Ch +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
cmp dl [eax+8] +
jz locret_48CFF8  +
mov [eax+8] dl +
mov eax [eax+4] +
call @Controls@TWinControl@RecreateWnd$qqrv  +
retn   +
***
cmp dl [eax+9] +
jz locret_48D00C  +
mov [eax+9] dl +
mov eax [eax+4] +
call @Controls@TWinControl@RecreateWnd$qqrv  +
retn   +
***
cmp dl [eax+0Ah] +
jz locret_48D020  +
mov [eax+0Ah] dl +
mov eax [eax+4] +
call @Controls@TWinControl@RecreateWnd$qqrv  +
retn   +
***
push ecx  +
push ecx  +
push ebx  +
push esi  +
test dl dl +
jz loc_48D0A2  +
add esp 0FFFFFFF0h +
call unknown_libname_535  +
mov [ebp+var_1] dl +
mov ebx eax +
xor edx edx +
mov eax ebx +
call @Controls@TWinControl@$bctr$qqrp18Classes@TComponent  +
mov eax ds:dword_48D270 +
not eax  +
and eax [ebx+50h] +
or eax ds:dword_48D274 +
mov [ebx+50h] eax +
mov edx 0FAh +
mov eax ebx +
call @Controls@TControl@SetWidth$qqri  +
mov edx 96h +
mov eax ebx +
call @Controls@TControl@SetHeight$qqri  +
mov dl 1 +
mov eax ebx +
call unknown_libname_363  +
xor edx edx +
mov eax ebx +
mov ecx [eax] +
call dword ptr [ecx+124h]  +
xor edx edx +
mov eax ebx +
call @Controls@TControl@SetParentColor$qqro  +
mov dl 1 +
mov eax ebx +
call @Controls@TWinControl@SetTabStop$qqro  +
mov dl 1 +
mov eax ebx +
call @Comctrls@TCustomListView@SetHideSelection$qqro  +
mov dl 1 +
mov eax ebx +
call @Comctrls@TCustomListView@SetColumnHeaders$qqro  +
mov dl 1 +
mov eax ebx +
call unknown_libname_364  +
mov dl 1 +
mov eax ds:off_4713DC +
call @Graphics@TCanvas@$bctr$qqrv  +
mov esi eax +
mov [ebx+210h] esi +
mov eax esi +
mov edx ebx +
call @Controls@TControlCanvas@SetControl$qqrp17Controls@TControl  +
mov dword ptr [ebx+26Ch] 0FFFFFFFFh +
mov ecx ebx +
mov dl 1 +
mov eax ds:off_484508 +
call sub_48B8C8  +
mov [ebx+23Ch] eax +
mov eax ebx +
mov edx [eax] +
call dword ptr [edx+0F8h]  +
mov [ebx+22Ch] eax +
mov eax ebx +
mov edx [eax] +
call dword ptr [edx+0F4h]  +
mov [ebx+28Ch] eax +
mov ecx ebx +
mov dl 1 +
mov eax ds:off_484870 +
call @Comctrls@TIconOptions@$bctr$qqrp24Comctrls@TCustomListView  +
mov [ebx+234h] eax +
mov eax ds:off_4846E0 +
push eax  +
mov ecx ebx +
mov dl 1 +
mov eax ds:off_48478C +
call sub_49DE00  +
mov [ebx+290h] eax +
mov byte ptr [ebx+294h] 0 +
mov byte ptr [ebx+295h] 0 +
xor eax eax +
mov [ebx+2A0h] eax +
push 20h  +
mov ecx 20h +
mov dl 1 +
mov eax ds:off_472AB8 +
call @TCustomImageList@$bctr$qqrii  +
mov [ebx+224h] eax +
push ebx  +
push offset @Comctrls@TCustomListView@EditWndProc$qqrr17Messages@TMessage  +
call sub_4A5BA4  +
mov [ebx+250h] eax +
push ebx  +
push offset @Comctrls@TCustomListView@HeaderWndProc$qqrr17Messages@TMessage  +
call sub_4A5BA4  +
mov [ebx+25Ch] eax +
mov dl 1 +
mov eax ds:off_44674C +
call @System@TObject@$bctr$qqrv  +
mov esi eax +
mov [ebx+27Ch] esi +
mov [esi+0Ch] ebx +
mov dword ptr [esi+8] offset @Comctrls@TCustomListView@ImageListChange$qqrp14System@TObject +
mov dl 1 +
mov eax ds:off_44674C +
call @System@TObject@$bctr$qqrv  +
mov esi eax +
mov [ebx+280h] esi +
mov [esi+0Ch] ebx +
mov dword ptr [esi+8] offset @Comctrls@TCustomListView@ImageListChange$qqrp14System@TObject +
mov dl 1 +
mov eax ds:off_44674C +
call @System@TObject@$bctr$qqrv  +
mov esi eax +
mov [ebx+284h] esi +
mov [esi+0Ch] ebx +
mov dword ptr [esi+8] offset @Comctrls@TCustomListView@ImageListChange$qqrp14System@TObject +
mov eax ebx +
cmp [ebp+var_1] 0 +
jz loc_48D268  +
call sub_4BABC8  +
pop large dword ptr fs:0  +
add esp 0Ch +
mov eax ebx +
pop esi  +
pop ebx  +
pop ecx  +
pop ebp  +
retn   +
***
call unknown_libname_536  +
mov esi edx +
mov ebx eax +
mov eax 1 +
call @Comctrls@InitCommonControl$qqri  +
mov edx esi +
mov eax ebx +
call @Controls@TWinControl@CreateParams$qqrr22Controls@TCreateParams  +
mov ecx offset aSyslistview32 +
mov edx esi +
mov eax ebx +
call @Controls@TWinControl@CreateSubClass$qqrr22Controls@TCreateParamspc  +
mov edx [esi+4] +
or edx 2000000h +
xor ecx ecx +
mov cl [ebx+215h] +
or edx dword_4E68B8[ecx*4] +
xor ecx ecx +
mov cl [ebx+214h] +
or edx dword_4E6880[ecx*4] +
mov eax [ebx+234h] +
xor ecx ecx +
mov cl [eax+8] +
or edx dword_4E68A0[ecx*4] +
xor ecx ecx +
mov cl [ebx+216h] +
or edx dword_4E6888[ecx*4] +
xor ecx ecx +
mov cl [ebx+228h] +
or edx dword_4E6890[ecx*4] +
xor ecx ecx +
mov cl [ebx+238h] +
or edx dword_4E6898[ecx*4] +
xor ecx ecx +
mov cl [eax+9] +
or edx dword_4E68A8[ecx*4] +
movzx eax byte ptr [eax+0Ah] +
or edx dword_4E68B0[eax*4] +
xor eax eax +
mov al [ebx+22Bh] +
or edx dword_4E68C8[eax*4] +
xor eax eax +
mov al [ebx+22Ah] +
or edx dword_4E68D0[eax*4] +
or edx 40h +
mov [esi+4] edx +
cmp byte ptr [ebx+244h] 0 +
jz loc_48D450  +
or dword ptr [esi+4] 1000h +
cmp byte ptr [ebx+245h] 0 +
jz loc_48D460  +
or dword ptr [esi+4] 400h +
cmp byte ptr [ebx+1A5h] 0 +
jz loc_48D48A  +
mov eax off_4EA6D4 +
cmp byte ptr [eax] 0 +
jz loc_48D48A  +
cmp byte ptr [ebx+214h] 1 +
jnz loc_48D48A  +
and dword ptr [esi+4] 0FF7FFFFFh +
or dword ptr [esi+8] 200h +
and dword ptr [esi+24h] 0FFFFFFFCh +
pop esi  +
pop ebx  +
retn   +
***
push ecx  +
mov eax [ebp+arg_0] +
mov eax [eax-4] +
cmp dword ptr [eax+248h] 0 +
jz loc_48D554  +
mov eax [ebp+arg_0] +
mov eax [eax-4] +
mov eax [eax+23Ch] +
call sub_49DA14  +
push 400h  +
mov eax [ebp+arg_0] +
mov eax [eax-4] +
mov ecx [eax+248h] +
mov dl 1 +
mov eax ds:off_49B200 +
call sub_49FBA4  +
mov [ebp+var_4] eax +
xor eax eax +
push ebp  +
push offset loc_48D52C  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov eax [ebp+var_4] +
call unknown_libname_427  +
mov eax [ebp+arg_0] +
mov eax [eax-4] +
mov edx [eax+23Ch] +
mov eax [ebp+var_4] +
call sub_4A0860  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_48D533  +
mov eax [ebp+var_4] +
call @System@TObject@Free$qqrv  +
retn   +
jmp unknown_libname_539  +
jmp loc_48D523  +
mov eax [ebp+8] +
mov eax [eax-4] +
mov eax [eax+248h] +
mov dl 1 +
mov ecx [eax] +
call dword ptr [ecx-4]  +
mov eax [ebp+8] +
mov eax [eax-4] +
xor edx edx +
mov [eax+248h] edx +
pop ecx  +
pop ebp  +
retn   +
***
push ecx  +
push ebx  +
mov [ebp+var_4] eax +
mov eax [ebp+var_4] +
call @Controls@TWinControl@CreateWnd$qqrv  +
mov eax [ebp+var_4] +
call @Comctrls@TCustomListView@ResetExStyles$qqrv  +
mov eax [ebp+var_4] +
mov edx [eax+70h] +
mov eax [ebp+var_4] +
call @Comctrls@TCustomListView@SetTextBkColor$qqr15Graphics@TColor  +
mov eax [ebp+var_4] +
mov eax [eax+68h] +
mov edx [eax+18h] +
mov eax [ebp+var_4] +
call @Comctrls@TCustomListView@SetTextColor$qqr15Graphics@TColor  +
mov eax [ebp+var_4] +
mov edx [eax+268h] +
mov eax [ebp+var_4] +
call @Comctrls@TCustomListView@SetAllocBy$qqri  +
mov eax [ebp+var_4] +
cmp dword ptr [eax+240h] 0 +
jz loc_48D689  +
mov eax [ebp+var_4] +
mov eax [eax+22Ch] +
call sub_48C750  +
mov eax [ebp+var_4] +
mov byte ptr [eax+289h] 1 +
xor eax eax +
push ebp  +
push offset loc_48D682  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov eax [ebp+var_4] +
mov eax [eax+23Ch] +
call sub_49DA14  +
mov eax [ebp+var_4] +
mov eax [eax+240h] +
mov edx [ebp+var_4] +
call @Classes@TStream@ReadComponent$qqrp18Classes@TComponent  +
mov eax [ebp+var_4] +
mov eax [eax+240h] +
mov dl 1 +
mov ecx [eax] +
call dword ptr [ecx-4]  +
mov eax [ebp+var_4] +
xor edx edx +
mov [eax+240h] edx +
mov eax [ebp+var_4] +
cmp byte ptr [eax+244h] 0 +
jz loc_48D633  +
mov eax [ebp+var_4] +
mov edx [eax+2A0h] +
mov eax [ebp+var_4] +
mov eax [eax+22Ch] +
call sub_48C714  +
mov eax [ebp+var_4] +
cmp byte ptr [eax+274h] 0 +
jz loc_48D647  +
mov eax [ebp+var_4] +
call @Comctrls@TCustomListView@RestoreChecks$qqrv  +
push ebp  +
call @ComCtrls@_17453  +
pop ecx  +
mov eax [ebp+var_4] +
mov edx [eax+68h] +
mov eax [ebp+var_4] +
call @Controls@TControl@SetFont$qqrp14Graphics@TFont  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_48D689  +
mov eax [ebp+var_4] +
mov eax [eax+22Ch] +
call unknown_libname_361  +
mov eax [ebp+var_4] +
mov byte ptr [eax+289h] 0 +
retn   +
jmp unknown_libname_539  +
jmp loc_48D669  +
mov eax [ebp+var_4] +
mov eax [eax+23Ch] +
call @Comctrls@TListColumns@UpdateCols$qqrv  +
mov eax [ebp+var_4] +
mov ebx [eax+218h] +
test ebx ebx +
jz loc_48D6C9  +
mov eax ebx +
call sub_446B24  +
test al al +
jz loc_48D6C9  +
mov eax [ebp+var_4] +
mov eax [eax+218h] +
call @Imglist@TCustomImageList@GetHandle$qqrv  +
mov edx eax +
xor ecx ecx +
mov eax [ebp+var_4] +
call sub_48D7BC  +
mov eax [ebp+var_4] +
mov ebx [eax+21Ch] +
test ebx ebx +
jz loc_48D6FE  +
mov eax ebx +
call sub_446B24  +
test al al +
jz loc_48D6FE  +
mov eax [ebp+var_4] +
mov eax [eax+21Ch] +
call @Imglist@TCustomImageList@GetHandle$qqrv  +
mov edx eax +
mov ecx 1 +
mov eax [ebp+var_4] +
call sub_48D7BC  +
mov eax [ebp+var_4] +
mov ebx [eax+220h] +
test ebx ebx +
jz loc_48D733  +
mov eax ebx +
call sub_446B24  +
test al al +
jz loc_48D733  +
mov eax [ebp+var_4] +
mov eax [eax+220h] +
call @Imglist@TCustomImageList@GetHandle$qqrv  +
mov edx eax +
mov ecx 2 +
mov eax [ebp+var_4] +
call sub_48D7BC  +
mov eax [ebp+var_4] +
call sub_49013C  +
pop ebx  +
pop ecx  +
pop ebp  +
retn   +
***
mov eax [ebx+240h] +
test eax eax +
jnz loc_48D761  +
mov dl 1 +
mov eax ds:off_49AEB4 +
call @System@TObject@$bctr$qqrv  +
mov [ebx+240h] eax +
jmp loc_48D76A  +
push 0  +
push 0  +
call sub_49F238  +
cmp byte ptr [ebx+244h] 0 +
jz loc_48D784  +
mov eax [ebx+22Ch] +
call sub_48C63C  +
mov [ebx+2A0h] eax +
mov edx ebx +
mov eax [ebx+240h] +
call sub_49F5A4  +
push 0  +
push 0  +
mov eax [ebx+240h] +
call sub_49F1D4  +
cmp byte ptr [ebx+274h] 0 +
jz loc_48D7B0  +
mov eax ebx +
call @Comctrls@TCustomListView@SaveChecks$qqrv  +
mov eax ebx +
call @Controls@TWinControl@DestroyWnd$qqrv  +
pop ebx  +
retn   +
***
push edi  +
push edi  +
mov esi edx +
mov ebx eax +
mov eax ebx +
call @Controls@TWinControl@HandleAllocated$qqrv  +
test al al +
jz loc_48D851  +
mov edi esi +
mov eax edi +
call sub_446B24  +
test al al +
jz loc_48D80C  +
mov eax edi +
call @Imglist@TCustomImageList@GetHandle$qqrv  +
jmp loc_48D80E  +
xor eax eax +
cmp esi [ebx+218h] +
jnz loc_48D823  +
xor ecx ecx +
mov edx eax +
mov eax ebx +
call sub_48D7BC  +
jmp loc_48D851  +
cmp esi [ebx+21Ch] +
jnz loc_48D83B  +
mov ecx 1 +
mov edx eax +
mov eax ebx +
call sub_48D7BC  +
jmp loc_48D851  +
cmp esi [ebx+220h] +
jnz loc_48D851  +
mov ecx 2 +
mov edx eax +
mov eax ebx +
call sub_48D7BC  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
mov ebx ecx +
mov esi edx +
mov edi eax +
mov ecx ebx +
mov edx esi +
mov eax edi +
call @Controls@TControl@Notification$qqrp18Classes@TComponent18Classes@TOperation  +
cmp bl 1 +
jnz loc_48D8A4  +
cmp esi [edi+218h] +
jnz loc_48D882  +
xor edx edx +
mov eax edi +
call @Comctrls@TCustomListView@SetLargeImages$qqrp24Imglist@TCustomImageList  +
cmp esi [edi+21Ch] +
jnz loc_48D893  +
xor edx edx +
mov eax edi +
call @Comctrls@TCustomListView@SetSmallImages$qqrp24Imglist@TCustomImageList  +
cmp esi [edi+220h] +
jnz loc_48D8A4  +
xor edx edx +
mov eax edi +
call @Comctrls@TCustomListView@SetStateImages$qqrp24Imglist@TCustomImageList  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push 0  +
push ecx  +
push ecx  +
push edi  +
mov edi ecx +
mov esi edx +
mov ebx eax +
mov eax ebx +
call @Controls@TWinControl@GetHandle$qqrv  +
mov ecx edi +
mov edx esi +
call @Commctrl@ListView_RedrawItems$qqruiii  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
mov ebx eax +
mov eax ebx +
call @Controls@TWinControl@HandleAllocated$qqrv  +
test al al +
jz loc_48DD0E  +
xor edi edi +
mov eax [ebx+220h] +
test eax eax +
jz loc_48DC4B  +
mov edi eax +
xor edx edx +
mov eax ebx +
call @Comctrls@TCustomListView@SetStateImages$qqrp24Imglist@TCustomImageList  +
mov esi 402h +
cmp byte ptr [ebx+274h] 0 +
jz loc_48DC5E  +
mov esi 4 +
cmp byte ptr [ebx+277h] 0 +
jz loc_48DC6A  +
or esi 1 +
cmp byte ptr [ebx+278h] 0 +
jz loc_48DC76  +
or esi 8 +
cmp byte ptr [ebx+27Ah] 0 +
jz loc_48DC82  +
or esi 20h +
cmp byte ptr [ebx+275h] 0 +
jz loc_48DC91  +
or esi 100h +
cmp byte ptr [ebx+276h] 0 +
jz loc_48DC9D  +
or esi 10h +
cmp byte ptr [ebx+294h] 0 +
jz loc_48DCAC  +
or esi 2000h +
test byte ptr [ebx+279h] 1 +
jz loc_48DCBA  +
or esi 40h +
jmp loc_48DCD5  +
mov al ds:byte_48DD14 +
and al [ebx+279h] +
mov dl ds:byte_48DD18 +
cmp dl al +
jz loc_48DCD5  +
or esi 80h +
test byte ptr [ebx+279h] 4 +
jz loc_48DCE4  +
or esi 800h +
test byte ptr [ebx+279h] 2 +
jz loc_48DCF3  +
or esi 1000h +
mov eax ebx +
call @Controls@TWinControl@GetHandle$qqrv  +
mov edx esi +
call @Commctrl@ListView_SetExtendedListViewStyle$qqruiui  +
test edi edi +
jz loc_48DD0E  +
mov edx edi +
mov eax ebx +
call @Comctrls@TCustomListView@SetStateImages$qqrp24Imglist@TCustomImageList  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
push ebp  +
push ecx  +
mov ebx eax +
mov eax [ebx+22Ch] +
call sub_48C63C  +
mov edi eax +
dec edi  +
test edi edi +
jl loc_48DD8D  +
inc edi  +
xor esi esi +
mov eax [ebx+24Ch] +
test eax eax +
jz loc_48DD65  +
mov edx esp +
mov ecx 1 +
mov ebp [eax] +
call dword ptr [ebp+8]  +
mov edx esi +
mov eax [ebx+22Ch] +
call @Comctrls@TListItems@GetItem$qqri  +
mov dl [esp+1+var_1] +
call @Comctrls@TListItem@SetChecked$qqro  +
jmp loc_48DD89  +
mov edx esi +
mov eax [ebx+22Ch] +
call @Comctrls@TListItems@GetItem$qqri  +
mov al [eax+2Ah] +
push eax  +
mov edx esi +
mov eax [ebx+22Ch] +
call @Comctrls@TListItems@GetItem$qqri  +
pop edx  +
call @Comctrls@TListItem@SetChecked$qqro  +
inc esi  +
dec edi  +
jnz loc_48DD38  +
mov eax [ebx+24Ch] +
call @System@TObject@Free$qqrv  +
xor eax eax +
mov [ebx+24Ch] eax +
pop edx  +
pop ebp  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
push ebp  +
push ecx  +
mov ebx eax +
mov eax [ebx+24Ch] +
test eax eax +
jnz loc_48DDCD  +
mov dl 1 +
mov eax ds:off_49AEB4 +
call @System@TObject@$bctr$qqrv  +
mov [ebx+24Ch] eax +
jmp loc_48DDD6  +
push 0  +
push 0  +
call sub_49F238  +
mov eax [ebx+22Ch] +
call sub_48C63C  +
mov esi eax +
dec esi  +
test esi esi +
jl loc_48DE16  +
inc esi  +
xor edi edi +
mov edx edi +
mov eax [ebx+22Ch] +
call @Comctrls@TListItems@GetItem$qqri  +
call @Comctrls@TListItem@GetChecked$qqrv  +
mov [esp+1+var_1] al +
mov edx esp +
mov ecx 1 +
mov eax [ebx+24Ch] +
mov ebp [eax] +
call dword ptr [ebp+0Ch]  +
inc edi  +
dec esi  +
jnz loc_48DDEB  +
push 0  +
push 0  +
mov eax [ebx+24Ch] +
call sub_49F1D4  +
pop edx  +
pop ebp  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
cmp dl [eax+214h] +
cmp dl [eax+22Ah] +
mov esi edx +
mov ebx eax +
test esi esi +
jge loc_48DEFF  +
mov eax ebx +
call @Comctrls@TCustomListView@GetSelected$qqrv  +
test eax eax +
jz loc_48DF18  +
mov eax ebx +
call @Comctrls@TCustomListView@GetSelected$qqrv  +
xor ecx ecx +
mov edx 3 +
call @Comctrls@TListItem@SetState$qqrio  +
pop esi  +
pop ebx  +
retn   +
mov edx esi +
mov eax [ebx+22Ch] +
call @Comctrls@TListItems@GetItem$qqri  +
mov cl 1 +
mov edx 3 +
call @Comctrls@TListItem@SetState$qqrio  +
pop esi  +
pop ebx  +
retn   +
***
cmp dl [eax+228h] +
cmp dl [eax+22Bh] +
mov eax [ebx+68h] +
mov eax [eax+18h] +
call @Graphics@ColorToRGB$qqr15Graphics@TColor  +
push eax  +
mov eax ebx +
call @Controls@TWinControl@GetHandle$qqrv  +
pop edx  +
call @Commctrl@ListView_SetTextColor$qqruiui  +
pop ebx  +
retn   +
***
mov eax [ebx+70h] +
call @Graphics@ColorToRGB$qqr15Graphics@TColor  +
push eax  +
mov eax ebx +
call @Controls@TWinControl@GetHandle$qqrv  +
pop edx  +
call @Commctrl@ListView_SetTextBkColor$qqruiui  +
mov eax [ebx+70h] +
call @Graphics@ColorToRGB$qqr15Graphics@TColor  +
push eax  +
mov eax ebx +
call @Controls@TWinControl@GetHandle$qqrv  +
pop edx  +
call @Commctrl@MonthCal_GetCurSel$qqruir11_SYSTEMTIME  +
pop ebx  +
retn   +
***
mov esi edx +
mov eax ebx +
call @Controls@TWinControl@CMColorChanged$qqrr17Messages@TMessage  +
mov eax ebx +
call @Controls@TWinControl@HandleAllocated$qqrv  +
test al al +
jz loc_48DFE7  +
mov edx [ebx+70h] +
mov eax ebx +
call @Comctrls@TCustomListView@SetTextBkColor$qqr15Graphics@TColor  +
pop ebx  +
retn   +
***
mov esi edx +
mov ebx eax +
cmp byte ptr [ebx+214h] 1 +
jnz loc_48E002  +
mov eax ebx +
call @Controls@TWinControl@RecreateWnd$qqrv  +
mov edx esi +
mov eax ebx +
call @Controls@TWinControl@CMCtl3DChanged$qqrr17Messages@TMessage  +
pop esi  +
pop ebx  +
retn   +
***
add esp 0FFFFFFDCh +
push ebx  +
push esi  +
push edi  +
xor ecx ecx +
mov [ebp+var_C] ecx +
mov esi edx +
mov ebx eax +
xor eax eax +
push ebp  +
push offset loc_48E20F  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov edx esi +
mov eax ebx +
call @Controls@TWinControl@WMNotify$qqrr18Messages@TWMNotify  +
mov eax ebx +
call @Comctrls@TCustomListView@ValidHeaderHandle$qqrv  +
test al al +
jz loc_48E1F9  +
mov eax [esi+8] +
mov eax [eax] +
cmp eax [ebx+264h] +
jnz loc_48E1F9  +
mov edx [esi+8] +
mov eax edx +
mov eax [eax+8] +
sub eax 0FFFFFEC9h +
jz loc_48E0C7  +
sub eax 4 +
jz loc_48E082  +
sub eax 2 +
jz loc_48E0D3  +
sub eax 12Ch +
jz loc_48E11B  +
jmp loc_48E1F9  +
mov eax edx +
mov edi [eax+14h] +
test byte ptr [edi] 1 +
jz loc_48E1F9  +
mov edx [eax+0Ch] +
mov eax ebx +
call @Comctrls@TCustomListView@GetColumnFromTag$qqri  +
mov esi eax +
mov eax [esi+18h] +
cmp eax [edi+4] +
jl loc_48E0A9  +
mov [edi+4] eax +
jmp loc_48E0B8  +
mov eax [esi+14h] +
test eax eax +
jle loc_48E0B8  +
cmp eax [edi+4] +
jg loc_48E0B8  +
mov [edi+4] eax +
mov edx [edi+4] +
mov eax esi +
call @Comctrls@TListColumn@SetWidth$qqri  +
jmp loc_48E1F9  +
mov byte ptr [ebx+295h] 1 +
jmp loc_48E1F9  +
mov edi edx +
mov edx [edi+0Ch] +
mov eax ebx +
call @Comctrls@TCustomListView@GetColumnFromTag$qqri  +
mov esi eax +
mov eax ebx +
call @Controls@TWinControl@GetHandle$qqrv  +
mov edx [edi+0Ch] +
call @Commctrl@ListView_GetColumnWidth$qqruii  +
mov edx eax +
mov eax esi +
call @Comctrls@TListColumn@SetWidth$qqri  +
xor ecx ecx +
xor edx edx +
mov eax ebx +
mov esi [eax] +
call dword ptr [esi+120h]  +
test al al +
jz loc_48E1F9  +
mov eax ebx +
mov edx [eax] +
call dword ptr [edx+7Ch]  +
jmp loc_48E1F9  +
call GetMessagePos  +
call sub_49784C  +
movzx eax ax +
push eax  +
call GetMessagePos  +
movzx eax ax +
lea ecx [ebp+var_8] +
pop edx  +
call @Classes@Point$qqrii  +
lea ecx [ebp+Point] +
lea edx [ebp+var_8] +
mov eax ebx +
call @Controls@TControl@ScreenToClient$qqrrx14Windows@TPoint  +
push [ebp+Point.y]  +
push [ebp+Point.x]  +
mov eax ebx +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call ChildWindowFromPoint  +
mov esi eax +
test esi esi +
jz loc_48E1F9  +
mov eax ebx +
call @Controls@TWinControl@GetHandle$qqrv  +
cmp esi eax +
jz loc_48E1F9  +
lea eax [ebp+var_C] +
mov edx 50h +
call @System@@LStrSetLength$qqrv  +
mov eax [ebp+var_C] +
call sub_4BB610  +
push eax  +
mov eax [ebp+var_C] +
call unknown_libname_550  +
push eax  +
push esi  +
call GetClassNameA  +
mov edx eax +
lea eax [ebp+var_C] +
call @System@@LStrSetLength$qqrv  +
mov eax [ebp+var_C] +
mov edx offset _str_SysHeader32.Text +
call @System@@LStrCmp$qqrv  +
jnz loc_48E1F9  +
lea ecx [ebp+Point] +
lea edx [ebp+var_8] +
mov eax ebx +
call @Controls@TControl@ScreenToClient$qqrrx14Windows@TPoint  +
mov eax [ebp+Point.x] +
mov [ebp+lParam] eax +
mov eax [ebp+Point.y] +
mov [ebp+var_18] eax +
lea eax [ebp+lParam] +
push eax  +
push 1  +
push 1206h  +
push esi  +
call SendMessageA  +
test eax eax +
jl loc_48E1F9  +
mov edx [ebp+var_10] +
mov eax ebx +
call @Comctrls@TCustomListView@GetColumnFromTag$qqri  +
mov edx eax +
lea ecx [ebp+lParam] +
mov eax ebx +
mov si 0FFAFh +
call @System@@CallDynaInst$qqrv  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_48E216  +
lea eax [ebp+var_C] +
call unknown_libname_540  +
retn   +
jmp unknown_libname_539  +
jmp loc_48E206  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
cmp byte ptr [eax+215h] 3 +
setz al  +
retn   +
***
cmp dword ptr [eax+264h] 0 +
setnz al  +
retn   +
***
push ebx  +
mov ebx eax +
mov eax ebx +
call @Controls@TWinControl@CMFontChanged$qqrr17Messages@TMessage  +
mov eax ebx +
call @Controls@TWinControl@HandleAllocated$qqrv  +
test al al +
jz loc_48E289  +
mov eax [ebx+68h] +
mov edx [eax+18h] +
mov eax ebx +
call @Comctrls@TCustomListView@SetTextColor$qqr15Graphics@TColor  +
mov eax ebx +
call @Comctrls@TCustomListView@ValidHeaderHandle$qqrv  +
test al al +
jz loc_48E289  +
push 0FFFFFFFFh  +
push 0  +
mov eax [ebx+264h] +
push eax  +
call InvalidateRect  +
pop ebx  +
retn   +
***
cmp dl [eax+238h] +
mov ebx eax +
push edi  +
mov ebx eax +
or esi 0FFFFFFFFh +
mov eax ebx +
call @Comctrls@TCustomListView@GetSelected$qqrv  +
test eax eax +
jz loc_48E394  +
mov eax ebx +
call @Comctrls@TCustomListView@GetSelected$qqrv  +
call @Comctrls@TListItem@GetIndex$qqrv  +
mov esi eax +
mov eax esi +
pop esi  +
pop ebx  +
retn   +
***
jz loc_48E3BD  +
mov ebx eax +
mov ecx edx +
mov edx eax +
mov eax [ebx+30Ch] +
call dword ptr [ebx+308h]  +
mov al 1 +
pop ebx  +
retn   +
xor eax eax +
pop ebx  +
retn   +
***
push ecx  +
push ebx  +
mov [ebp+var_4] 0FFFFFFFFh +
cmp word ptr [eax+312h] 0 +
jz loc_48E405  +
push ecx  +
mov ecx [ebp+arg_10] +
push ecx  +
mov ecx [ebp+arg_C] +
push ecx  +
mov ecx [ebp+arg_8] +
push ecx  +
mov cl [ebp+arg_4] +
push ecx  +
mov cl [ebp+arg_0] +
push ecx  +
lea ecx [ebp+var_4] +
push ecx  +
mov ebx eax +
mov ecx edx +
mov edx eax +
mov eax [ebx+314h] +
call dword ptr [ebx+310h]  +
mov eax [ebp+var_4] +
pop ebx  +
pop ecx  +
pop ebp  +
retn 14h  +
***
jz loc_48E432  +
push ecx  +
mov ebx eax +
mov ecx edx +
mov edx eax +
mov eax [ebx+31Ch] +
call dword ptr [ebx+318h]  +
mov al 1 +
pop ebx  +
retn   +
xor eax eax +
pop ebx  +
retn   +
***
push ebx  +
mov ebx eax +
mov eax ds:off_4845BC +
mov [esp+4+var_4] eax +
cmp word ptr [ebx+372h] 0 +
jz loc_48E492  +
mov ecx esp +
mov edx ebx +
mov eax [ebx+374h] +
call dword ptr [ebx+370h]  +
mov ecx [ebx+22Ch] +
mov dl 1 +
mov eax [esp+4+var_4] +
call @Comctrls@TListItem@$bctr$qqrp19Comctrls@TListItems  +
pop edx  +
pop ebx  +
retn   +
***
mov ecx eax +
mov dl 1 +
mov eax ds:off_484654 +
call sub_48C578  +
retn   +
***
mov esi eax +
mov bl ds:byte_48E500 +
test esi 1 +
jz loc_48E4CD  +
or bl 1 +
test esi 2 +
jz loc_48E4D8  +
or bl 2 +
test esi 4 +
jz loc_48E4E3  +
or bl 4 +
test esi 8 +
jz loc_48E4EE  +
or bl 8 +
test esi 10h +
jz loc_48E4F9  +
or bl 10h +
mov eax ebx +
pop esi  +
pop ebx  +
retn   +
***
add esp 0FFFFFFD4h +
push ebx  +
push esi  +
push edi  +
xor ecx ecx +
mov [ebp+var_4] ecx +
mov esi edx +
lea edi [ebp+var_2C] +
mov ecx 0Ah +
movs   +
mov esi eax +
xor eax eax +
push ebp  +
push offset loc_48E623  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov edi [ebp+var_2C] +
test edi 4 +
jz loc_48E541  +
mov ebx [ebp+var_C] +
jmp loc_48E60D  +
cmp byte ptr [esi+244h] 0 +
jz loc_48E5FD  +
cmp [ebp+var_28] 0 +
jge loc_48E55B  +
xor ebx ebx +
jmp loc_48E60D  +
cmp [ebp+var_24] 0 +
jnz loc_48E5F5  +
mov eax edi +
call @ComCtrls@_17504  +
mov ebx eax +
mov edi [esi+28Ch] +
mov eax [ebp+var_28] +
mov [edi+18h] eax +
mov eax [ebp+var_C] +
mov [edi+0Ch] eax +
mov eax [edi+8] +
mov edx [eax] +
call dword ptr [edx+44h]  +
test bl 1 +
jz loc_48E5A0  +
cmp [ebp+var_18] 0 +
jz loc_48E5A0  +
lea edx [ebp+var_4] +
mov eax [ebp+var_18] +
call sub_4A9380  +
jmp loc_48E5A8  +
lea eax [ebp+var_4] +
call unknown_libname_540  +
mov eax [esi+28Ch] +
add eax 24h +
mov edx [ebp+var_4] +
call unknown_libname_542  +
test bl 2 +
jz loc_48E5CA  +
mov eax [esi+28Ch] +
mov edx [ebp+var_10] +
mov [eax+10h] edx +
test bl 10h +
jz loc_48E5DB  +
mov eax [esi+28Ch] +
mov edx [ebp+var_8] +
mov [eax+14h] edx +
mov ecx ebx +
mov edx [esi+28Ch] +
mov eax esi +
mov ebx [eax] +
call dword ptr [ebx+110h]  +
mov ebx [esi+28Ch] +
jmp loc_48E60D  +
mov ebx [esi+28Ch] +
jmp loc_48E60D  +
mov edx [ebp+var_28] +
mov eax [esi+22Ch] +
call @Comctrls@TListItems@GetItem$qqri  +
mov ebx eax +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_48E62A  +
lea eax [ebp+var_4] +
call unknown_libname_540  +
retn   +
jmp unknown_libname_539  +
jmp loc_48E61A  +
mov eax ebx +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
mov eax ebx +
call @Controls@TWinControl@GetHandle$qqrv  +
call @Commctrl@ListView_GetSelectedCount$qqrui  +
pop ebx  +
retn   +
***
test al 1 +
jz loc_48E64F  +
xor eax eax +
retn   +
test al 8 +
jz loc_48E657  +
mov al 1 +
jmp locret_48E669  +
test al 2 +
jz loc_48E65F  +
mov al 2 +
jmp locret_48E669  +
test al 40h +
jz loc_48E667  +
mov al 3 +
jmp locret_48E669  +
xor eax eax +
retn   +
***
mov esi eax +
mov bl ds:byte_48E6B4 +
test esi 20h +
jz loc_48E681  +
or bl 20h +
test esi 4 +
jz loc_48E68C  +
or bl 2 +
test esi 8 +
jz loc_48E697  +
or bl 4 +
test esi 1 +
jz loc_48E6A2  +
or bl 8 +
test esi 2 +
jz loc_48E6AD  +
or bl 10h +
mov eax ebx +
pop esi  +
pop ebx  +
retn   +
***
add esp 0FFFFFF5Ch +
push edi  +
push ebp  +
push ecx  +
mov [esp+4+var_4] ecx +
mov ebp edx +
mov ebx eax +
test byte ptr [ebx+98h] 4 +
jz loc_48F3D7  +
mov eax [ebx+23Ch] +
call sub_49DAB8  +
mov edi eax +
dec edi  +
test edi edi +
jl loc_48F3D7  +
inc edi  +
xor esi esi +
mov eax [esp+4+var_4] +
push eax  +
push ebp  +
mov edx esi +
mov eax [ebx+23Ch] +
call sub_48B90C  +
call @Comctrls@TListColumn@GetWidth$qqrv  +
push eax  +
call MulDiv  +
push eax  +
mov edx esi +
mov eax [ebx+23Ch] +
call sub_48B90C  +
pop edx  +
call @Comctrls@TListColumn@SetWidth$qqri  +
inc esi  +
dec edi  +
jnz loc_48F3A2  +
mov ecx [esp+4+var_4] +
mov edx ebp +
mov eax ebx +
call @Controls@TWinControl@ChangeScale$qqrii  +
pop edx  +
pop ebp  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
jz loc_48F409  +
mov ebx eax +
mov ecx edx +
mov edx eax +
mov eax [ebx+2D4h] +
call dword ptr [ebx+2D0h]  +
pop ebx  +
retn   +
***
push edi  +
jz loc_48F459  +
mov ebx eax +
mov ecx edx +
mov edx eax +
mov eax [ebx+364h] +
call dword ptr [ebx+360h]  +
pop ebx  +
retn   +
***
push ecx  +
push ebx  +
push esi  +
mov esi ecx +
mov [ebp+var_4] edx +
mov ebx eax +
mov eax [ebp+var_4] +
call unknown_libname_549  +
xor eax eax +
push ebp  +
push offset loc_48F4B5  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov eax [ebx+22Ch] +
call unknown_libname_359  +
mov ebx eax +
mov edx [ebp+var_4] +
mov eax ebx +
call @Comctrls@TListItem@SetCaption$qqrx17System@AnsiString  +
mov edx esi +
mov eax ebx +
call @Comctrls@TListItem@SetData$qqrpv  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_48F4BC  +
lea eax [ebp+var_4] +
call unknown_libname_540  +
retn   +
jmp unknown_libname_539  +
jmp loc_48F4AC  +
pop esi  +
pop ebx  +
pop ecx  +
pop ebp  +
retn   +
***
mov byte ptr [esp+1+var_1] 1 +
dec ecx  +
jz loc_48F4D7  +
dec ecx  +
jz loc_48F4DB  +
sub ecx 6 +
jz loc_48F4DF  +
jmp loc_48F503  +
xor ecx ecx +
jmp loc_48F4E1  +
mov cl 1 +
jmp loc_48F4E1  +
mov cl 2 +
cmp word ptr [eax+2CAh] 0 +
jz loc_48F503  +
push ecx  +
lea ecx [esp+5+var_1] +
push ecx  +
mov ebx eax +
mov ecx edx +
mov edx eax +
mov eax [ebx+2CCh] +
call dword ptr [ebx+2C8h]  +
mov al byte ptr [esp+1+var_1] +
pop edx  +
pop ebx  +
retn   +
***
jz loc_48F51A  +
dec ecx  +
jz loc_48F51E  +
sub ecx 6 +
jz loc_48F522  +
jmp loc_48F541  +
xor ecx ecx +
jmp loc_48F524  +
mov cl 1 +
jmp loc_48F524  +
mov cl 2 +
cmp word ptr [eax+2C2h] 0 +
jz loc_48F541  +
push ecx  +
mov ebx eax +
mov ecx edx +
mov edx eax +
mov eax [ebx+2C4h] +
call dword ptr [ebx+2C0h]  +
pop ebx  +
retn   +
***
mov ebx edx +
mov [esp+1+var_1] 1 +
cmp word ptr [eax+342h] 0 +
jz loc_48F59F  +
push esp  +
mov ebx eax +
mov ecx edx +
mov edx eax +
mov eax [ebx+344h] +
call dword ptr [ebx+340h]  +
mov al [esp+1+var_1] +
pop edx  +
pop ebx  +
retn   +
***
push 0  +
push ebx  +
push esi  +
mov esi edx +
mov ebx eax +
xor eax eax +
push ebp  +
push offset loc_48F619  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
lea eax [ebp+var_4] +
mov edx [esi+14h] +
call unknown_libname_545  +
mov edx esi +
mov eax ebx +
call sub_48E504  +
mov esi eax +
cmp word ptr [ebx+33Ah] 0 +
jz loc_48F5F5  +
lea eax [ebp+var_4] +
push eax  +
mov ecx esi +
mov edx ebx +
mov eax [ebx+33Ch] +
call dword ptr [ebx+338h]  +
test esi esi +
jz loc_48F603  +
mov edx [ebp+var_4] +
mov eax esi +
call @Comctrls@TListItem@SetCaption$qqrx17System@AnsiString  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_48F620  +
lea eax [ebp+var_4] +
call unknown_libname_540  +
retn   +
jmp unknown_libname_539  +
jmp loc_48F610  +
pop esi  +
pop ebx  +
pop ecx  +
pop ebp  +
retn   +
***
mov eax ebx +
push edi  +
mov esi edx +
mov ebx eax +
test byte ptr [ebx+1Ch] 10h +
jnz loc_48F69A  +
mov edi [esi] +
cmp edi 201h +
jz loc_48F663  +
cmp edi 203h +
jnz loc_48F69A  +
mov eax ebx +
call unknown_libname_273  +
test al al +
jnz loc_48F69A  +
cmp byte ptr [ebx+5Dh] 1 +
jnz loc_48F69A  +
mov edx esi +
mov eax ebx +
call @Controls@TWinControl@IsControlMouseMsg$qqrr17Messages@TWMMouse  +
test al al +
jnz loc_48F6BB  +
mov ax ds:word_48F6C0 +
or ax [ebx+54h] +
mov [ebx+54h] ax +
mov edx esi +
mov eax ebx +
mov ecx [eax] +
call dword ptr [ecx-14h]  +
jmp loc_48F6BB  +
mov eax [esi] +
cmp eax 0Fh +
jz loc_48F6A6  +
cmp eax 14h +
jnz loc_48F6B2  +
mov eax [ebx+22Ch] +
cmp byte ptr [eax+0Ch] 0 +
jnz loc_48F6BB  +
mov edx esi +
mov eax ebx +
call @Controls@TWinControl@WndProc$qqrr17Messages@TMessage  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
add esp 0FFFFFFD8h +
mov ebx eax +
mov eax ebx +
call @Controls@TControl@DoStartDrag$qqrrp20Controls@TDragObject  +
xor eax eax +
mov [ebx+270h] eax +
push esp  +
call GetCursorPos  +
lea ecx [esp+28h+var_8] +
mov edx esp +
mov eax ebx +
call @Controls@TControl@ScreenToClient$qqrrx14Windows@TPoint  +
mov eax [esp+28h+var_8] +
mov [esp+28h+var_28] eax +
mov eax [esp+28h+var_4] +
mov [esp+28h+var_24] eax +
mov eax [ebx+26Ch] +
cmp eax 0FFFFFFFFh +
jz loc_48F718  +
mov edx eax +
mov eax [ebx+22Ch] +
call @Comctrls@TListItems@GetItem$qqri  +
mov esi eax +
jmp loc_48F71A  +
xor esi esi +
mov dword ptr [ebx+26Ch] 0FFFFFFFFh +
test esi esi +
jnz loc_48F738  +
mov ecx [esp+28h+var_24] +
mov edx [esp+28h+var_28] +
mov eax ebx +
call @TCustomListView@GetItemAt$qqrii  +
mov esi eax +
test esi esi +
jz loc_48F78F  +
mov eax esi +
call @Comctrls@TListItem@GetIndex$qqrv  +
push eax  +
mov eax ebx +
call @Controls@TWinControl@GetHandle$qqrv  +
lea ecx [esp+2Ch+var_20] +
pop edx  +
call @Commctrl@ListView_CreateDragImage$qqruiirx14Windows@TPoint  +
test eax eax +
jz loc_48F78F  +
mov ebx [ebx+224h] +
mov edx eax +
mov eax ebx +
call @Imglist@TCustomImageList@SetHandle$qqrui  +
lea ecx [esp+28h+var_18] +
xor edx edx +
mov eax esi +
call sub_48C4D0  +
mov eax [esp+28h+var_24] +
sub eax [esp+28h+var_14] +
push eax  +
mov ecx [esp+2Ch+var_28] +
sub ecx [esp+2Ch+var_18] +
xor edx edx +
mov eax ebx +
call @Controls@TDragImageList@SetDragImage$qqriii  +
add esp 28h +
pop esi  +
pop ebx  +
retn   +
***
push ebx  +
mov ebx eax +
mov eax [ebp+arg_0] +
push eax  +
mov eax ebx +
call @Controls@TControl@DoEndDrag$qqrp14System@TObjectii  +
mov eax [ebx+224h] +
call @Controls@TDragImageList@EndDrag$qqrv  +
xor eax eax +
mov [ebx+270h] eax +
pop ebx  +
pop ebp  +
retn 4  +
***
push edi  +
add esp 0FFFFFFF0h +
mov esi edx +
mov ebx eax +
mov edx esi +
mov eax ebx +
call @Controls@TWinControl@CMDrag$qqrr16Controls@TCMDrag  +
mov edi [esi+8] +
mov al [esi+4] +
dec al  +
jz loc_48F819  +
dec al  +
jz loc_48F7EE  +
dec al  +
jz loc_48F84E  +
jmp loc_48F8F0  +
mov ecx esp +
mov edx edi +
mov eax ebx +
call @Controls@TControl@ScreenToClient$qqrrx14Windows@TPoint  +
mov eax [esp+10h+var_C] +
push eax  +
cmp dword ptr [esi+0Ch] 0 +
setnz al  +
push eax  +
mov edx [edi+8] +
mov ecx [esp+18h+var_10] +
mov eax ebx +
call @Comctrls@TCustomListView@DoDragOver$qqrp20Controls@TDragObjectiio  +
jmp loc_48F8F0  +
mov eax [edi+8] +
mov edx [eax] +
call dword ptr [edx+18h]  +
mov eax ebx +
call @Comctrls@TCustomListView@GetDropTarget$qqrv  +
mov [ebx+270h] eax +
xor edx edx +
mov eax ebx +
call @Comctrls@TCustomListView@SetDropTarget$qqrp18Comctrls@TListItem  +
mov eax ebx +
mov edx [eax] +
call dword ptr [edx+88h]  +
mov eax [edi+8] +
mov edx [eax] +
call dword ptr [edx+20h]  +
jmp loc_48F8F0  +
xor eax eax +
mov [ebx+270h] eax +
cmp byte ptr [ebx+244h] 0 +
jz loc_48F8F0  +
mov al [ebx+215h] +
sub al 2 +
jnb loc_48F88B  +
lea ecx [esp+10h+var_8] +
xor edx edx +
xor eax eax +
call @Classes@Point$qqrii  +
lea edx [esp+10h+var_8] +
mov cl 4 +
mov eax ebx +
call @Comctrls@TCustomListView@GetNearestItem$qqrrx12Types@TPoint25Comctrls@TSearchDirection  +
mov esi eax +
jmp loc_48F894  +
mov eax ebx +
call @Comctrls@TCustomListView@GetTopItem$qqrv  +
mov esi eax +
test esi esi +
jz loc_48F8F0  +
mov eax esi +
call @Comctrls@TListItem@GetIndex$qqrv  +
push eax  +
mov eax [ebx+22Ch] +
call sub_48C63C  +
mov edi eax +
dec edi  +
pop eax  +
sub edi eax +
jl loc_48F8F0  +
inc edi  +
mov esi eax +
mov edx esi +
mov eax [ebx+22Ch] +
call @Comctrls@TListItems@GetItem$qqri  +
mov edx 1 +
call @Comctrls@TListItem@GetState$qqri  +
test al al +
jz loc_48F8EC  +
mov edx esi +
mov eax [ebx+22Ch] +
call @Comctrls@TListItems@GetItem$qqri  +
xor ecx ecx +
mov edx 1 +
call @Comctrls@TListItem@SetState$qqrio  +
jmp loc_48F8F0  +
inc esi  +
dec edi  +
jnz loc_48F8B6  +
add esp 10h +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push ecx  +
mov eax ebx +
call @Controls@TWinControl@HandleAllocated$qqrv  +
test al al +
jz loc_48F9A9  +
mov eax ebx +
call @Controls@TWinControl@GetHandle$qqrv  +
mov edx offset @ComCtrls@_17439 +
xor ecx ecx +
call @Commctrl@ListView_SortItems$qqruipqqsiii$ii  +
cmp eax 1 +
sbb eax eax +
inc eax  +
pop ebx  +
retn   +
xor eax eax +
pop ebx  +
retn   +
***
cmp dl [eax+229h] +
mov esi edx +
mov ebx eax +
mov eax ebx +
call @Controls@TWinControl@GetHandle$qqrv  +
mov edx esi +
call @Commctrl@ListView_GetOrigin$qqruir14Windows@TPoint  +
pop esi  +
pop ebx  +
retn   +
***
mov ebx eax +
xor esi esi +
mov al [ebx+215h] +
sub al 2 +
jb loc_48FA30  +
mov eax ebx +
call @Controls@TWinControl@GetHandle$qqrv  +
call @Commctrl@ListView_GetTopIndex$qqrui  +
cmp eax 0FFFFFFFFh +
jz loc_48FA30  +
mov edx eax +
mov eax [ebx+22Ch] +
call @Comctrls@TListItems@GetItem$qqri  +
mov esi eax +
mov eax esi +
pop esi  +
pop ebx  +
retn   +
***
mov esi edx +
mov esi edx +
mov ebx eax +
mov eax [ebx+21Ch] +
cmp esi eax +
jz loc_48FB1B  +
test eax eax +
jz loc_48FAC7  +
mov edx [ebx+280h] +
call @Imglist@TCustomImageList@UnRegisterChanges$qqrp19Imglist@TChangeLink  +
mov eax esi +
mov [ebx+21Ch] eax +
test eax eax +
jz loc_48FB06  +
mov edx [ebx+280h] +
call @Imglist@TCustomImageList@RegisterChanges$qqrp19Imglist@TChangeLink  +
mov edx ebx +
mov eax [ebx+21Ch] +
call @Classes@TComponent@FreeNotification$qqrp18Classes@TComponent  +
mov eax [ebx+21Ch] +
call @Imglist@TCustomImageList@GetHandle$qqrv  +
mov edx eax +
mov ecx 1 +
mov eax ebx +
call sub_48D7BC  +
jmp loc_48FB14  +
mov ecx 1 +
xor edx edx +
mov eax ebx +
call sub_48D7BC  +
mov eax ebx +
mov edx [eax] +
call dword ptr [edx+7Ch]  +
pop esi  +
pop ebx  +
retn   +
***
mov esi edx +
mov ebx eax +
mov eax [ebx+220h] +
cmp esi eax +
jz loc_48FBD6  +
test eax eax +
jz loc_48FB43  +
mov edx [ebx+284h] +
call @Imglist@TCustomImageList@UnRegisterChanges$qqrp19Imglist@TChangeLink  +
mov [ebx+220h] esi +
cmp byte ptr [ebx+274h] 0 +
jz loc_48FB59  +
mov eax ebx +
call @Comctrls@TCustomListView@SaveChecks$qqrv  +
mov eax [ebx+220h] +
test eax eax +
jz loc_48FBA6  +
mov edx [ebx+284h] +
call @Imglist@TCustomImageList@RegisterChanges$qqrp19Imglist@TChangeLink  +
mov edx ebx +
mov eax [ebx+220h] +
call @Classes@TComponent@FreeNotification$qqrp18Classes@TComponent  +
mov eax [ebx+220h] +
call @Imglist@TCustomImageList@GetHandle$qqrv  +
mov edx eax +
mov ecx 2 +
mov eax ebx +
call sub_48D7BC  +
cmp byte ptr [ebx+274h] 0 +
jz loc_48FBCF  +
mov eax ebx +
call @Comctrls@TCustomListView@RestoreChecks$qqrv  +
jmp loc_48FBCF  +
mov ecx 2 +
xor edx edx +
mov eax ebx +
call sub_48D7BC  +
cmp byte ptr [ebx+274h] 0 +
jz loc_48FBCF  +
xor edx edx +
mov eax ebx +
call @Comctrls@TCustomListView@SetCheckboxes$qqro  +
mov dl 1 +
mov eax ebx +
call @Comctrls@TCustomListView@SetCheckboxes$qqro  +
mov eax ebx +
mov edx [eax] +
call dword ptr [edx+7Ch]  +
pop esi  +
pop ebx  +
retn   +
***
mov eax [eax+23Ch] +
mov dl ds:byte_48FBFC +
push edx  +
mov cl 4 +
xor edx edx +
call @Comctrls@TCustomListView@GetNextItem$qqrp18Comctrls@TListItem25Comctrls@TSearchDirection47System@_Set$t19Comctrls@TItemState$iuc$0$iuc$5_  +
retn   +
***
mov al ds:byte_48FC20 +
push eax  +
mov cl 4 +
xor edx edx +
mov eax ebx +
call @Comctrls@TCustomListView@GetNextItem$qqrp18Comctrls@TListItem25Comctrls@TSearchDirection47System@_Set$t19Comctrls@TItemState$iuc$0$iuc$5_  +
test eax eax +
jnz loc_48FC1E  +
mov eax [ebx+270h] +
pop ebx  +
retn   +
***
mov esi edx +
mov ebx eax +
mov eax ebx +
call @Controls@TWinControl@HandleAllocated$qqrv  +
test al al +
jz loc_48FC64  +
test esi esi +
jz loc_48FC49  +
mov cl 1 +
mov edx 1 +
mov eax esi +
call @Comctrls@TListItem@SetState$qqrio  +
jmp loc_48FC64  +
mov eax ebx +
call @Comctrls@TCustomListView@GetDropTarget$qqrv  +
mov esi eax +
test esi esi +
jz loc_48FC64  +
xor ecx ecx +
mov edx 1 +
mov eax esi +
call @Comctrls@TListItem@SetState$qqrio  +
pop esi  +
pop ebx  +
retn   +
***
jz loc_48FC85  +
mov ebx eax +
mov ecx edx +
mov edx eax +
mov eax [ebx+34Ch] +
call dword ptr [ebx+348h]  +
pop ebx  +
retn   +
***
add esp 0FFFFFFF8h +
push ebx  +
push esi  +
push edi  +
mov [ebp+var_1] cl +
mov edi edx +
mov ebx eax +
xor eax eax +
mov [ebp+var_8] eax +
mov eax ebx +
call @Controls@TWinControl@HandleAllocated$qqrv  +
test al al +
jz loc_48FD4E  +
xor esi esi +
xor eax eax +
mov al [ebp+var_1] +
cmp eax 4 +
ja loc_48FCF1  +
jmp ds:off_48FCBF[eax*4]  +
mov esi 100h +
jmp loc_48FCF1  +
mov esi 200h +
jmp loc_48FCF1  +
mov esi 400h +
jmp loc_48FCF1  +
mov esi 800h +
jmp loc_48FCF1  +
xor esi esi +
test edi edi +
jz loc_48FD00  +
mov eax edi +
call @Comctrls@TListItem@GetIndex$qqrv  +
mov edi eax +
jmp loc_48FD03  +
or edi 0FFFFFFFFh +
test [ebp+arg_0] 2 +
jz loc_48FD0C  +
or esi 4 +
test [ebp+arg_0] 4 +
jz loc_48FD15  +
or esi 8 +
test [ebp+arg_0] 8 +
jz loc_48FD1E  +
or esi 1 +
test [ebp+arg_0] 10h +
jz loc_48FD27  +
or esi 2 +
mov eax ebx +
call @Controls@TWinControl@GetHandle$qqrv  +
mov ecx esi +
mov edx edi +
call sub_4988AC  +
mov edi eax +
cmp edi 0FFFFFFFFh +
jz loc_48FD4E  +
mov edx edi +
mov eax [ebx+22Ch] +
call @Comctrls@TListItems@GetItem$qqri  +
mov [ebp+var_8] eax +
mov eax [ebp+var_8] +
pop edi  +
pop esi  +
pop ebx  +
pop ecx  +
pop ecx  +
pop ebp  +
retn 4  +
***
push edi  +
add esp 0FFFFFFE0h +
mov esi edx +
lea edi [esp+20h+var_20] +
movs   +
movs   +
mov ebx ecx +
mov esi eax +
mov [esp+20h+lParam] 40h +
mov eax [esp+20h+var_20] +
mov [esp+20h+var_C] eax +
mov eax [esp+20h+var_1C] +
mov [esp+20h+var_8] eax +
xor eax eax +
mov al bl +
mov eax dword_4E68E8[eax*4] +
mov [esp+20h+var_4] eax +
mov eax esi +
call @Controls@TWinControl@GetHandle$qqrv  +
lea ecx [esp+20h+lParam] +
or edx 0FFFFFFFFh +
call @Commctrl@ListView_FindItem$qqruiirx14tagLVFINDINFOA  +
cmp eax 0FFFFFFFFh +
jz loc_48FDBA  +
mov edx eax +
mov eax [esi+22Ch] +
call @Comctrls@TListItems@GetItem$qqri  +
jmp loc_48FDBC  +
xor eax eax +
add esp 20h +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
push ebp  +
add esp 0FFFFFFE4h +
mov ebp ecx +
mov edi edx +
mov ebx eax +
xor esi esi +
mov eax ebx +
call @Controls@TWinControl@HandleAllocated$qqrv  +
test al al +
jz loc_48FE1C  +
lea ecx [esp+1Ch+var_8] +
mov edx ebp +
mov eax edi +
call @Classes@Point$qqrii  +
mov eax [esp+1Ch+var_8] +
mov [esp+1Ch+var_1C] eax +
mov eax [esp+1Ch+var_4] +
mov [esp+1Ch+var_18] eax +
mov eax ebx +
call @Controls@TWinControl@GetHandle$qqrv  +
mov edx esp +
call unknown_libname_390  +
cmp eax 0FFFFFFFFh +
jz loc_48FE1C  +
mov edx eax +
mov eax [ebx+22Ch] +
call @Comctrls@TListItems@GetItem$qqri  +
mov esi eax +
mov eax esi +
add esp 1Ch +
pop ebp  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov ebx edx +
push edi  +
mov ebx eax +
mov eax ebx +
call @Controls@TWinControl@HandleAllocated$qqrv  +
test al al +
jz loc_48FE83  +
cmp byte ptr [ebx+295h] 0 +
jnz loc_48FE83  +
mov eax [ebx+23Ch] +
call sub_49DAB8  +
mov esi eax +
dec esi  +
test esi esi +
jl loc_48FE83  +
inc esi  +
xor edi edi +
mov edx edi +
mov eax ebx +
call @Comctrls@TCustomListView@UpdateColumn$qqri  +
inc edi  +
dec esi  +
jnz loc_48FE76  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
push ebp  +
add esp 0FFFFFFDCh +
mov ebp edx +
mov ebx eax +
mov eax ebx +
call @Controls@TWinControl@HandleAllocated$qqrv  +
test al al +
jz loc_48FFCF  +
mov edx ebp +
mov eax [ebx+23Ch] +
call sub_48B90C  +
mov edi eax +
mov [esp+24h+var_23] 15h +
mov eax [edi+1Ch] +
mov [esp+24h+var_B] eax +
mov eax [edi+10h] +
call unknown_libname_550  +
mov [esp+24h+var_17] eax +
mov al [edi+0Ch] +
mov [esp+24h+var_24] al +
mov eax edi +
call @Classes@TCollectionItem@GetIndex$qqrv  +
test eax eax +
jz loc_48FF03  +
mov eax ebx +
mov si 0FFC8h +
call @System@@CallDynaInst$qqrv  +
and eax 7Fh +
lea eax [eax+eax*2] +
lea eax unk_4E6914[eax*4] +
xor edx edx +
mov dl [esp+24h+var_24] +
mov eax [eax+edx*4] +
mov [esp+24h+var_1F] eax +
jmp loc_48FF09  +
xor eax eax +
mov [esp+24h+var_1F] eax +
cmp dword ptr [edi+1Ch] 0FFFFFFFFh +
jz loc_48FF23  +
mov eax [esp+24h+var_1F] +
or eax 800h +
or eax 8000h +
mov [esp+24h+var_1F] eax +
jmp loc_48FF28  +
and [esp+24h+var_23] 0FFFFFFEFh +
mov eax [edi+24h] +
cmp eax 0FFFFFFFFh +
jle loc_48FF5D  +
or [esp+24h+var_23] 2 +
mov [esp+24h+var_1B] eax +
mov edx ebp +
mov eax [ebx+23Ch] +
call sub_48B90C  +
mov eax [eax+28h] +
push eax  +
mov eax ebx +
call @Controls@TWinControl@GetHandle$qqrv  +
lea ecx [esp+28h+var_23] +
pop edx  +
call unknown_libname_392  +
jmp loc_48FFCF  +
mov edx ebp +
mov eax [ebx+23Ch] +
call sub_48B90C  +
mov eax [eax+28h] +
push eax  +
mov eax ebx +
call @Controls@TWinControl@GetHandle$qqrv  +
lea ecx [esp+28h+var_23] +
pop edx  +
call unknown_libname_392  +
cmp byte ptr [ebx+215h] 2 +
jnz loc_48FF9C  +
mov eax ebx +
call @Controls@TWinControl@GetHandle$qqrv  +
mov ecx [edi+24h] +
or edx 0FFFFFFFFh +
call sub_4989D0  +
jmp loc_48FFCF  +
cmp byte ptr [ebx+215h] 3 +
jnz loc_48FFCF  +
cmp byte ptr [ebx+244h] 0 +
jnz loc_48FFCF  +
mov edx ebp +
mov eax [ebx+23Ch] +
call sub_48B90C  +
mov eax [eax+28h] +
push eax  +
mov eax ebx +
call @Controls@TWinControl@GetHandle$qqrv  +
mov ecx [edi+24h] +
pop edx  +
call sub_4989D0  +
add esp 24h +
pop ebp  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
push ebp  +
add esp 0FFFFFFECh +
mov edi edx +
mov esi eax +
mov eax esi +
mov edx [eax] +
call dword ptr [edx+0C0h]  +
mov ax [edi+4] +
call @Forms@KeysToShiftState$qqrus  +
mov ebx eax +
mov byte ptr [esi+230h] 0 +
mov dword ptr [esi+26Ch] 0FFFFFFFFh +
mov edx edi +
mov eax esi +
call @Controls@TControl@WMLButtonDown$qqrr17Messages@TWMMouse  +
cmp byte ptr [esi+5Dh] 1 +
jnz loc_49006A  +
cmp byte ptr [esi+228h] 0 +
jz loc_49006A  +
test bl 1 +
jnz loc_49006A  +
test bl 4 +
jnz loc_49006A  +
cmp byte ptr [esi+230h] 0 +
jnz loc_49006A  +
movsx ecx word ptr [edi+0Ah] +
movsx edx word ptr [edi+8] +
mov eax esi +
call @TCustomListView@GetItemAt$qqrii  +
mov ebp eax +
test ebp ebp +
jz loc_49006A  +
mov edx 3 +
mov eax ebp +
call @Comctrls@TListItem@GetState$qqri  +
test al al +
jz loc_49006A  +
or ecx 0FFFFFFFFh +
xor edx edx +
mov eax esi +
call @Controls@TControl@BeginDrag$qqroi  +
jmp loc_490133  +
cmp byte ptr [esi+230h] 0 +
jz loc_4900E9  +
push esp  +
call GetCursorPos  +
lea ecx [esp+14h+var_8] +
mov edx esp +
mov eax esi +
call @Controls@TControl@ScreenToClient$qqrrx14Windows@TPoint  +
lea eax [esp+14h+var_8] +
call unknown_libname_383  +
mov [esp+14h+var_C] eax +
mov eax esi +
call unknown_libname_273  +
test al al +
jnz loc_4900C5  +
mov dx word ptr [esp+14h+var_C+2] +
mov ax word ptr [esp+14h+var_C] +
call unknown_libname_380  +
push eax  +
xor ecx ecx +
mov edx 202h +
mov eax esi +
call @Controls@TControl@Perform$qqruiii  +
mov byte ptr [esi+230h] 0 +
jmp loc_490133  +
mov dx word ptr [esp+14h+var_C+2] +
mov ax word ptr [esp+14h+var_C] +
call unknown_libname_380  +
push eax  +
push 0  +
push 202h  +
call GetCapture  +
push eax  +
call SendMessageA  +
jmp loc_490133  +
cmp byte ptr [esi+5Dh] 1 +
jnz loc_490133  +
cmp byte ptr [esi+228h] 0 +
jz loc_490102  +
test bl 1 +
jnz loc_490133  +
test bl 4 +
jnz loc_490133  +
movsx ecx word ptr [edi+0Ah] +
movsx edx word ptr [edi+8] +
mov eax esi +
call @TCustomListView@GetItemAt$qqrii  +
mov ebp eax +
test ebp ebp +
jz loc_490133  +
mov edx 3 +
mov eax ebp +
call @Comctrls@TListItem@GetState$qqri  +
test al al +
jz loc_490133  +
or ecx 0FFFFFFFFh +
xor edx edx +
mov eax esi +
call @Controls@TControl@BeginDrag$qqroi  +
add esp 14h +
pop ebp  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
add esp 0FFFFFFECh +
push ebx  +
push esi  +
push edi  +
mov [ebp+var_4] eax +
mov dl 1 +
mov eax ds:off_49A5D8 +
call @System@TObject@$bctr$qqrv  +
mov [ebp+var_14] eax +
xor edx edx +
push ebp  +
push offset loc_4902C0  +
push dword ptr fs:[edx]  +
mov fs:[edx] esp +
mov eax [ebp+var_4] +
call @Controls@TControl@GetClientWidth$qqrv  +
mov [ebp+var_C] eax +
mov eax [ebp+var_4] +
mov eax [eax+23Ch] +
call sub_49DAB8  +
mov edi eax +
dec edi  +
test edi edi +
jl loc_4901BA  +
inc edi  +
xor ebx ebx +
mov eax [ebp+var_4] +
mov eax [eax+23Ch] +
mov edx ebx +
call sub_48B90C  +
mov esi eax +
cmp byte ptr [esi+0Dh] 0 +
jz loc_4901AC  +
mov edx esi +
mov eax [ebp+var_14] +
call @Classes@TList@Add$qqrpv  +
jmp loc_4901B6  +
mov eax esi +
call @Comctrls@TListColumn@GetWidth$qqrv  +
sub [ebp+var_C] eax +
inc ebx  +
dec edi  +
jnz loc_490188  +
mov eax [ebp+var_14] +
cmp dword ptr [eax+8] 0 +
jle loc_4902AA  +
mov eax [ebp+var_4] +
mov eax [eax+23Ch] +
mov edx [eax] +
call dword ptr [edx+20h]  +
xor edx edx +
push ebp  +
push offset loc_4902A3  +
push dword ptr fs:[edx]  +
mov fs:[edx] esp +
mov eax [ebp+var_14] +
mov eax [eax+8] +
mov [ebp+var_8] eax +
mov eax [ebp+var_C] +
cdq   +
idiv  [ebp+var_8] +
mov [ebp+var_10] edx +
mov eax [ebp+var_C] +
cdq   +
idiv  [ebp+var_8] +
mov edi eax +
mov ebx [ebp+var_8] +
dec ebx  +
cmp ebx 0 +
jl loc_49022A  +
mov edx ebx +
mov eax [ebp+var_14] +
call @Classes@TList@Get$qqri  +
mov esi eax +
test ebx ebx +
jnz loc_49021B  +
add edi [ebp+var_10] +
mov edx edi +
mov eax esi +
call @Comctrls@TListColumn@SetWidth$qqri  +
dec ebx  +
cmp ebx 0FFFFFFFFh +
jnz loc_490208  +
mov eax [ebp+var_C] +
cdq   +
idiv  [ebp+var_8] +
mov edi eax +
mov ebx [ebp+var_8] +
dec ebx  +
cmp ebx 0 +
jl loc_490274  +
mov edx ebx +
mov eax [ebp+var_14] +
call @Classes@TList@Get$qqri  +
mov esi eax +
test ebx ebx +
jnz loc_49024F  +
add edi [ebp+var_10] +
mov eax esi +
call @Comctrls@TListColumn@GetWidth$qqrv  +
cmp edi eax +
jz loc_49026E  +
mov edx ebx +
mov eax [ebp+var_14] +
call @Classes@TList@Delete$qqri  +
mov eax esi +
call @Comctrls@TListColumn@GetWidth$qqrv  +
sub [ebp+var_C] eax +
dec ebx  +
cmp ebx 0FFFFFFFFh +
jnz loc_49023C  +
mov eax [ebp+var_14] +
mov eax [eax+8] +
test eax eax +
jz loc_490287  +
cmp eax [ebp+var_8] +
jnz loc_4901E3  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4902AA  +
mov eax [ebp+var_4] +
mov eax [eax+23Ch] +
mov edx [eax] +
call dword ptr [edx+24h]  +
retn   +
jmp unknown_libname_539  +
jmp loc_490294  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4902C7  +
mov eax [ebp+var_14] +
call @System@TObject@Free$qqrv  +
retn   +
jmp unknown_libname_539  +
jmp loc_4902B7  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
mov esi edx +
mov ebx eax +
test byte ptr [ebx+1Ch] 2 +
jnz loc_4902F7  +
mov eax [esi+8] +
test byte ptr [eax+18h] 1 +
jnz loc_4902F7  +
mov eax ebx +
call @Controls@TWinControl@HandleAllocated$qqrv  +
test al al +
jz loc_4902F7  +
mov eax ebx +
call sub_49013C  +
mov edx esi +
mov eax ebx +
call @Controls@TWinControl@WMWindowPosChanged$qqrr24Messages@TWMWindowPosMsg  +
pop esi  +
pop ebx  +
retn   +
***
add esp 0FFFFFFF0h +
mov byte ptr [eax+28Ah] 1 +
test cl cl +
jnz loc_4904E9  +
cmp dl 2 +
jnz loc_49046B  +
cmp word ptr [eax+302h] 0 +
jnz loc_490464  +
cmp word ptr [eax+2BAh] 0 +
jnz loc_490464  +
xor eax eax +
jmp locret_490540  +
mov al 1 +
jmp locret_490540  +
cmp dl 1 +
jnz loc_4904A6  +
cmp word ptr [eax+2FAh] 0 +
jnz loc_49049F  +
cmp word ptr [eax+2B2h] 0 +
jnz loc_49049F  +
cmp word ptr [eax+302h] 0 +
jnz loc_49049F  +
cmp word ptr [eax+2BAh] 0 +
jnz loc_49049F  +
xor eax eax +
jmp locret_490540  +
mov al 1 +
jmp locret_490540  +
cmp word ptr [eax+2F2h] 0 +
jnz loc_4904E6  +
cmp word ptr [eax+2AAh] 0 +
jnz loc_4904E6  +
cmp word ptr [eax+2FAh] 0 +
jnz loc_4904E6  +
cmp word ptr [eax+2B2h] 0 +
jnz loc_4904E6  +
cmp word ptr [eax+302h] 0 +
jnz loc_4904E6  +
cmp word ptr [eax+2BAh] 0 +
jnz loc_4904E6  +
xor eax eax +
jmp locret_490540  +
mov al 1 +
retn   +
cmp dl 2 +
jnz loc_4904FB  +
cmp word ptr [eax+2BAh] 0 +
setnz al  +
jmp locret_490540  +
cmp dl 1 +
jnz loc_49051C  +
cmp word ptr [eax+2B2h] 0 +
jnz loc_490518  +
cmp word ptr [eax+2BAh] 0 +
jnz loc_490518  +
xor eax eax +
jmp locret_490540  +
mov al 1 +
jmp locret_490540  +
cmp word ptr [eax+2AAh] 0 +
jnz loc_49053E  +
cmp word ptr [eax+2B2h] 0 +
jnz loc_49053E  +
cmp word ptr [eax+2BAh] 0 +
jnz loc_49053E  +
xor eax eax +
jmp locret_490540  +
mov al 1 +
retn   +
***
push edi  +
push ecx  +
mov ebx ecx +
mov edi edx +
mov esi eax +
mov [esp+1+var_1] 1 +
test bl bl +
jnz loc_490571  +
cmp word ptr [esi+2F2h] 0 +
jz loc_490571  +
push esp  +
mov ecx edi +
mov edx esi +
mov eax [esi+2F4h] +
call dword ptr [esi+2F0h]  +
cmp word ptr [esi+2AAh] 0 +
jz loc_490591  +
push ebx  +
lea eax [esp+5+var_1] +
push eax  +
mov ecx edi +
mov edx esi +
mov eax [esi+2ACh] +
call dword ptr [esi+2A8h]  +
mov al [esp+1+var_1] +
pop edx  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
add esp 0FFFFFFF8h +
add esp 0FFFFFFF4h +
push ebx  +
push esi  +
mov [ebp+var_9+1] ecx +
mov [ebp+var_4] edx +
mov esi eax +
mov ebx [ebp+arg_0] +
mov byte ptr [ebp+var_9] 1 +
test bl bl +
jnz loc_49064F  +
cmp word ptr [esi+302h] 0 +
jz loc_49064F  +
mov eax [ebp+var_9+1] +
push eax  +
mov ax [ebp+arg_4] +
push eax  +
lea eax [ebp+var_9] +
push eax  +
mov ecx [ebp+var_4] +
mov edx esi +
mov eax [esi+304h] +
call dword ptr [esi+300h]  +
cmp word ptr [esi+2BAh] 0 +
jz loc_490678  +
mov eax [ebp+var_9+1] +
push eax  +
mov ax [ebp+arg_4] +
push eax  +
push ebx  +
lea eax [ebp+var_9] +
push eax  +
mov ecx [ebp+var_4] +
mov edx esi +
mov eax [esi+2BCh] +
call dword ptr [esi+2B8h]  +
mov al byte ptr [ebp+var_9] +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 8  +
***
add esp 0FFFFFFF0h +
push ebx  +
push esi  +
push edi  +
mov esi ecx +
lea edi [ebp+var_10] +
movs   +
movs   +
movs   +
movs   +
mov esi edx +
mov ebx eax +
mov eax [ebx+210h] +
call @Controls@TControlCanvas@UpdateTextFlags$qqrv  +
cmp word ptr [ebx+332h] 0 +
jz loc_4906CA  +
lea eax [ebp+var_10] +
push eax  +
mov ax [ebp+arg_0] +
push eax  +
mov ecx esi +
mov edx ebx +
mov eax [ebx+334h] +
call dword ptr [ebx+330h]  +
jmp loc_4906F0  +
lea edx [ebp+var_10] +
mov eax [ebx+210h] +
call @Graphics@TCanvas@FillRect$qqrrx11Types@TRect  +
mov eax [esi+24h] +
push eax  +
mov edx [ebp+var_10] +
add edx 2 +
mov ecx [ebp+var_C] +
mov eax [ebx+210h] +
call sub_45B4A8  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 4  +
***
push ebx  +
push esi  +
push edi  +
mov esi ecx +
mov edi edx +
mov ebx eax +
cmp word ptr [ebx+352h] 0 +
jz loc_490737  +
mov eax [edi+8] +
mov edx [eax] +
call dword ptr [edx+14h]  +
cmp esi eax +
jge loc_490737  +
test esi esi +
jl loc_490737  +
push esi  +
mov eax [ebp+arg_0] +
push eax  +
mov ecx edi +
mov edx ebx +
mov eax [ebx+354h] +
call dword ptr [ebx+350h]  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
add esp 0FFFFFFD4h +
push ebx  +
push esi  +
push edi  +
xor edx edx +
mov [ebp+var_2C] edx +
mov [ebp+var_28] edx +
mov ebx eax +
xor eax eax +
push ebp  +
push offset loc_490897  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov esi [ebx+210h] +
mov dl 1 +
mov eax [esi+14h] +
call @Graphics@TBrush@SetStyle$qqr20Graphics@TBrushStyle  +
mov eax [ebx+290h] +
call sub_49DAB8  +
dec eax  +
test eax eax +
jl loc_49087C  +
inc eax  +
mov [ebp+var_C] eax +
xor edi edi +
mov edx edi +
mov eax [ebx+290h] +
call sub_48BBA8  +
mov edx [eax+20h] +
mov eax [esi+10h] +
call @TPen@SetColor$qqr6TColor  +
mov dl 2 +
mov eax [esi+10h] +
call @Graphics@TPen@SetStyle$qqr18Graphics@TPenStyle  +
lea edx [ebp+var_24] +
mov eax ebx +
call sub_48F9E8  +
mov eax [ebp+var_24] +
neg eax  +
mov [ebp+var_4] eax +
lea edx [ebp+var_24] +
mov eax ebx +
call sub_48F9E8  +
mov eax [ebp+var_20] +
neg eax  +
mov [ebp+var_8] eax +
mov edx edi +
mov eax [ebx+290h] +
call sub_48BBA8  +
push esi  +
push edi  +
lea esi [eax+0Ch] +
lea edi [ebp+var_1C] +
movs   +
movs   +
movs   +
movs   +
pop edi  +
pop esi  +
lea eax [ebp+var_1C] +
mov ecx [ebp+var_8] +
mov edx [ebp+var_4] +
call sub_4A7804  +
mov eax [ebp+var_14] +
push eax  +
mov eax [ebp+var_10] +
push eax  +
mov ecx [ebp+var_18] +
mov edx [ebp+var_1C] +
mov eax esi +
call unknown_libname_153  +
mov edx edi +
mov eax [ebx+290h] +
call sub_48BBA8  +
lea edx [ebp+var_28] +
mov ecx [eax] +
call dword ptr [ecx+0Ch]  +
cmp [ebp+var_28] 0 +
jz loc_490872  +
xor edx edx +
mov eax [esi+10h] +
call @Graphics@TPen@SetStyle$qqr18Graphics@TPenStyle  +
mov edx edi +
mov eax [ebx+290h] +
call sub_48BBA8  +
mov edx [eax+20h] +
mov eax [esi+0Ch] +
call @Graphics@TFont@SetColor$qqr15Graphics@TColor  +
mov edx edi +
mov eax [ebx+290h] +
call sub_48BBA8  +
lea edx [ebp+var_2C] +
mov ecx [eax] +
call dword ptr [ecx+0Ch]  +
mov eax [ebp+var_2C] +
push eax  +
mov ecx [ebp+var_10] +
mov edx [ebp+var_1C] +
mov eax esi +
call sub_45B4A8  +
inc edi  +
dec [ebp+var_C]  +
jnz loc_49078B  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_49089E  +
lea eax [ebp+var_2C] +
mov edx 2 +
call unknown_libname_541  +
retn   +
jmp unknown_libname_539  +
jmp loc_490889  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
mov eax ebx +
call @Controls@TWinControl@WMPaint$qqrr17Messages@TWMPaint  +
mov al [ebx+215h] +
sub al 2 +
jnb loc_4908CC  +
cmp byte ptr [ebx+294h] 0 +
jz loc_4908CC  +
mov eax ebx +
call @Comctrls@TCustomListView@DrawWorkAreas$qqrv  +
pop ebx  +
retn   +
***
add esp 0FFFFFFE0h +
push ebx  +
push esi  +
push edi  +
xor ecx ecx +
mov [ebp+var_8] ecx +
mov esi edx +
mov ebx eax +
xor eax eax +
push ebp  +
push offset loc_4909E9  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
cmp word ptr [ebx+35Ah] 0 +
jz loc_4909CA  +
mov eax [esi+8] +
mov ecx [eax+2Ch] +
mov edx [eax+28h] +
mov eax ebx +
call @TCustomListView@GetItemAt$qqrii  +
mov [ebp+var_4] eax +
cmp [ebp+var_4] 0 +
jz loc_4909D3  +
lea eax [ebp+var_8] +
mov edx [ebp+var_4] +
mov edx [edx+24h] +
call unknown_libname_543  +
lea ecx [ebp+var_8] +
mov edx [ebp+var_4] +
mov eax ebx +
mov edi [eax] +
call dword ptr [edi+108h]  +
lea ecx [ebp+var_18] +
xor edx edx +
mov eax [ebp+var_4] +
call sub_48C4D0  +
lea ecx [ebp+var_20] +
lea edx [ebp+var_18] +
mov eax ebx +
call @Controls@TControl@ClientToScreen$qqrrx14Windows@TPoint  +
mov eax [ebp+var_20] +
mov [ebp+var_18] eax +
mov eax [ebp+var_1C] +
mov [ebp+var_14] eax +
lea ecx [ebp+var_20] +
lea edx [ebp+var_10] +
mov eax ebx +
call @Controls@TControl@ClientToScreen$qqrrx14Windows@TPoint  +
mov eax [ebp+var_20] +
mov [ebp+var_10] eax +
mov eax [ebp+var_1C] +
mov [ebp+var_C] eax +
mov eax [esi+8] +
mov edi eax +
mov eax [esi+8] +
push esi  +
push edi  +
lea edi [eax+18h] +
lea esi [ebp+var_18] +
movs   +
movs   +
movs   +
movs   +
pop edi  +
pop esi  +
mov eax [esi+8] +
add eax 38h +
mov edx [ebp+var_8] +
call unknown_libname_542  +
push 0Eh  +
call GetSystemMetrics  +
add eax [edi+1Ch] +
mov [edi+0Ch] eax +
push 0Dh  +
call GetSystemMetrics  +
add eax [edi+18h] +
mov [edi+8] eax +
mov eax ebx +
call @Controls@TControl@GetClientWidth$qqrv  +
mov edx [esi+8] +
mov [edx+10h] eax +
xor eax eax +
mov [esi+0Ch] eax +
jmp loc_4909D3  +
mov edx esi +
mov eax ebx +
call @Controls@TControl@CMHintShow$qqrr17Messages@TMessage  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4909F0  +
lea eax [ebp+var_8] +
call unknown_libname_540  +
retn   +
jmp unknown_libname_539  +
jmp loc_4909E0  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
jz loc_490A16  +
push ecx  +
push edi  +
push ebp  +
mov ebp edx +
mov edi eax +
mov eax [edi+23Ch] +
call sub_49DAB8  +
mov ebx eax +
dec ebx  +
test ebx ebx +
jl loc_490A8F  +
inc ebx  +
xor esi esi +
mov eax [edi+23Ch] +
mov edx esi +
call sub_48B90C  +
cmp ebp [eax+28h] +
jz loc_490A91  +
inc esi  +
dec ebx  +
jnz loc_490A79  +
xor eax eax +
pop ebp  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
add esp 0FFFFFFE0h +
mov esi edx +
mov ebx eax +
test byte ptr [ebx+1Ch] 10h +
jnz loc_490AB1  +
mov eax ebx +
mov edx [eax] +
call dword ptr [edx+0C0h]  +
mov eax [esi+8] +
call sub_49B76C  +
test al al +
jz loc_490AFE  +
mov eax ebx +
call @Comctrls@TCustomListView@GetSelected$qqrv  +
test eax eax +
jz loc_490AFE  +
mov eax ebx +
call @Comctrls@TCustomListView@GetSelected$qqrv  +
mov ecx esp +
mov dl 3 +
call sub_48C4D0  +
lea edx [esp+20h+var_8] +
mov eax esp +
call sub_4A7838  +
lea edx [esp+20h+var_8] +
lea ecx [esp+20h+var_10] +
mov eax ebx +
call @Controls@TControl@ClientToScreen$qqrrx14Windows@TPoint  +
lea eax [esp+20h+var_10] +
call unknown_libname_383  +
mov [esi+8] eax +
mov edx esi +
mov eax ebx +
call @Controls@TWinControl@WMContextMenu$qqrr23Messages@TWMContextMenu  +
add esp 20h +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
mov edi eax +
mov eax [edi+22Ch] +
call sub_48C63C  +
mov ebx eax +
dec ebx  +
test ebx ebx +
jl loc_490B47  +
inc ebx  +
xor esi esi +
mov eax [edi+22Ch] +
mov edx esi +
call @Comctrls@TListItems@GetItem$qqri  +
xor ecx ecx +
mov edx 3 +
call @Comctrls@TListItem@SetState$qqrio  +
inc esi  +
dec ebx  +
jnz loc_490B2A  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
push ebp  +
push ecx  +
mov [esp+4+var_4] edx +
mov esi eax +
mov eax [esi+22Ch] +
call sub_48C63C  +
mov edi eax +
dec edi  +
test edi edi +
jl loc_490BB8  +
inc edi  +
xor ebx ebx +
mov edx ebx +
mov eax [esi+22Ch] +
call @Comctrls@TListItems@GetItem$qqri  +
mov edx 3 +
call @Comctrls@TListItem@GetState$qqri  +
test al al +
jz loc_490BB4  +
mov edx ebx +
mov eax [esi+22Ch] +
call @Comctrls@TListItems@GetItem$qqri  +
mov eax [eax+0Ch] +
push eax  +
mov edx ebx +
mov eax [esi+22Ch] +
call @Comctrls@TListItems@GetItem$qqri  +
mov edx [eax+24h] +
mov eax [esp+8+var_4] +
pop ecx  +
mov ebp [eax] +
call dword ptr [ebp+0D0h]  +
inc ebx  +
dec edi  +
jnz loc_490B6B  +
pop edx  +
pop ebp  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push ecx  +
push ebx  +
push esi  +
mov [ebp+var_4] eax +
mov eax [ebp+var_4] +
mov eax [eax+22Ch] +
call sub_48C750  +
xor eax eax +
push ebp  +
push offset loc_490C59  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov eax [ebp+var_4] +
mov eax [eax+22Ch] +
call sub_48C63C  +
mov ebx eax +
dec ebx  +
cmp ebx 0 +
jl loc_490C3D  +
mov eax [ebp+var_4] +
mov eax [eax+22Ch] +
mov edx ebx +
call @Comctrls@TListItems@GetItem$qqri  +
mov edx 3 +
call @Comctrls@TListItem@GetState$qqri  +
test al al +
jz loc_490C37  +
mov eax [ebp+var_4] +
mov eax [eax+22Ch] +
mov edx ebx +
call @Comctrls@TListItems@GetItem$qqri  +
mov edx eax +
mov eax [ebp+var_4] +
mov si 0FFAEh +
call @System@@CallDynaInst$qqrv  +
dec ebx  +
cmp ebx 0FFFFFFFFh +
jnz loc_490BFB  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_490C60  +
mov eax [ebp+var_4] +
mov eax [eax+22Ch] +
call unknown_libname_361  +
retn   +
jmp unknown_libname_539  +
jmp loc_490C4A  +
pop esi  +
pop ebx  +
pop ecx  +
pop ebp  +
retn   +
***
mov eax [eax+22Ch] +
push edi  +
mov edi eax +
mov eax [edi+22Ch] +
call sub_48C63C  +
mov ebx eax +
dec ebx  +
test ebx ebx +
jl loc_490CAB  +
inc ebx  +
xor esi esi +
mov eax [edi+22Ch] +
mov edx esi +
call @Comctrls@TListItems@GetItem$qqri  +
mov cl 1 +
mov edx 3 +
call @Comctrls@TListItem@SetState$qqrio  +
inc esi  +
dec ebx  +
jnz loc_490C8E  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push ecx  +
mov [ebp+var_4] eax +
mov eax [ebp+var_4] +
mov eax [eax+22Ch] +
call sub_48C750  +
xor eax eax +
push ebp  +
push offset loc_490CFD  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov eax [ebp+var_4] +
mov eax [eax+22Ch] +
call sub_48C730  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_490D04  +
mov eax [ebp+var_4] +
mov eax [eax+22Ch] +
call unknown_libname_361  +
retn   +
jmp unknown_libname_539  +
jmp loc_490CEE  +
pop ecx  +
pop ebp  +
retn   +
***
retn   +
***
push edi  +
test dl dl +
jz loc_490D82  +
add esp 0FFFFFFF0h +
call unknown_libname_535  +
mov ebx edx +
mov esi eax +
xor edx edx +
mov eax esi +
call sub_47DD98  +
mov eax ds:dword_490DDC +
mov [esi+50h] eax +
mov edx 17h +
mov eax esi +
call @Controls@TControl@SetWidth$qqri  +
mov edx 16h +
mov eax esi +
call @Controls@TControl@SetHeight$qqri  +
mov dword ptr [esi+16Ch] 0FFFFFFFFh +
mov byte ptr [esi+17Dh] 0 +
mov eax esi +
test bl bl +
jz loc_490DD5  +
call sub_4BABC8  +
pop large dword ptr fs:0  +
add esp 0Ch +
mov eax esi +
pop esi  +
pop ebx  +
retn   +
***
push ecx  +
push ecx  +
push ebx  +
push esi  +
push edi  +
mov esi ecx +
mov [ebp+var_1] dl +
mov ebx eax +
mov edi [ebp+arg_0] +
push edi  +
mov ecx esi +
mov dl [ebp+var_1] +
mov eax ebx +
call @Controls@TControl@MouseMove$qqr46System@_Set$t18Classes@Classes__1$iuc$0$iuc$6_ii  +
cmp byte ptr [ebx+17Dh] 2 +
jnz loc_490E8D  +
mov eax ebx +
call @Controls@TControl@GetMouseCapture$qqrv  +
test al al +
jz loc_490E8D  +
test esi esi +
jl loc_490E80  +
mov eax ebx +
call @Controls@TControl@GetClientWidth$qqrv  +
cmp esi eax +
jge loc_490E80  +
test edi edi +
jl loc_490E80  +
mov eax ebx +
call @Controls@TControl@GetClientHeight$qqrv  +
cmp edi eax +
jle loc_490E84  +
xor edx edx +
jmp loc_490E86  +
mov dl 1 +
mov eax ebx +
call @Comctrls@TToolButton@SetDown$qqro  +
pop edi  +
pop esi  +
pop ebx  +
pop ecx  +
pop ebp  +
retn 4  +
***
push ecx  +
push ebx  +
push esi  +
push edi  +
mov [ebp+var_2] cl +
mov [ebp+var_1] dl +
mov ebx eax +
mov edi [ebp+arg_0] +
mov esi [ebp+arg_4] +
push esi  +
push edi  +
mov cl [ebp+var_2] +
mov dl [ebp+var_1] +
mov eax ebx +
call @Controls@TControl@MouseUp$qqr21Controls@TMouseButton46System@_Set$t18Classes@Classes__1$iuc$0$iuc$6_ii  +
cmp [ebp+var_1] 0 +
jnz loc_490EF2  +
test esi esi +
jl loc_490EF2  +
mov eax ebx +
call @Controls@TControl@GetClientWidth$qqrv  +
cmp esi eax +
jge loc_490EF2  +
test edi edi +
jl loc_490EF2  +
mov eax ebx +
call @Controls@TControl@GetClientHeight$qqrv  +
cmp edi eax +
jg loc_490EF2  +
cmp byte ptr [ebx+17Dh] 2 +
jnz loc_490EF2  +
xor edx edx +
mov eax ebx +
call @Comctrls@TToolButton@SetDown$qqro  +
pop edi  +
pop esi  +
pop ebx  +
pop ecx  +
pop ebp  +
retn 8  +
***
retn   +
***
push edi  +
mov ebx ecx +
mov edi edx +
mov esi eax +
mov ecx ebx +
mov edx edi +
mov eax esi +
call @Controls@TControl@Notification$qqrp18Classes@TComponent18Classes@TOperation  +
cmp bl 1 +
jnz loc_490F41  +
cmp edi [esi+178h] +
jnz loc_490F30  +
xor edx edx +
mov eax esi +
call @Comctrls@TToolButton@SetDropdownMenu$qqrp16Menus@TPopupMenu  +
jmp loc_490F41  +
cmp edi [esi+174h] +
jnz loc_490F41  +
xor edx edx +
mov eax esi +
call @Comctrls@TToolButton@SetMenuItem$qqrp15Menus@TMenuItem  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov eax esi +
mov ecx [eax] +
call dword ptr [ecx-10h]  +
mov eax esi +
mov edx [eax] +
call dword ptr [edx+9Ch]  +
test byte ptr [esi+1Ch] 1 +
jnz loc_490F95  +
cmp dword ptr [esi+184h] 0 +
jz loc_490F95  +
mov eax [esi+184h] +
cmp byte ptr [eax+227h] 0 +
jz loc_490F95  +
mov eax [esi+184h] +
xor edx edx +
mov [eax+210h] edx +
xor edx edx +
mov [eax+214h] edx +
call @Comctrls@TToolBar@RecreateButtons$qqrv  +
pop esi  +
retn   +
***
add esp 0FFFFFFF0h +
push edi  +
push edi  +
mov esi eax +
xor ebx ebx +
cmp byte ptr [esi+16Ah] 0 +
jz loc_4913A3  +
cmp byte ptr [esi+17Dh] 1 +
jnz loc_49139D  +
or bl byte_4E692C +
jmp loc_4913A3  +
or bl byte_4E692E +
mov eax esi +
mov edx [eax] +
call dword ptr [edx+50h]  +
test al al +
jz loc_4913C9  +
mov edi [esi+184h] +
test edi edi +
jz loc_4913C3  +
mov eax edi +
mov edx [eax] +
call dword ptr [edx+50h]  +
test al al +
jz loc_4913C9  +
or bl byte_4E6930 +
cmp byte ptr [esi+57h] 0 +
jnz loc_4913DB  +
test byte ptr [esi+1Ch] 10h +
jnz loc_4913DB  +
or bl byte_4E6932 +
cmp byte ptr [esi+170h] 0 +
jz loc_4913EA  +
or bl byte_4E6934 +
cmp byte ptr [esi+17Ch] 0 +
jz loc_4913F9  +
or bl byte_4E6936 +
cmp byte ptr [esi+171h] 0 +
jz loc_491408  +
or bl byte_4E693A +
mov eax ebx +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
cmp dl [ebx+169h] +
jz loc_491464  +
mov [ebx+169h] dl +
mov eax ebx +
mov edx [eax] +
call dword ptr [edx+9Ch]  +
test byte ptr [ebx+1Ch] 1 +
jnz loc_491464  +
cmp dword ptr [ebx+184h] 0 +
jz loc_491464  +
mov eax [ebx+184h] +
cmp byte ptr [eax+227h] 0 +
jz loc_491464  +
mov eax [ebx+184h] +
xor edx edx +
mov [eax+210h] edx +
xor edx edx +
mov [eax+214h] edx +
call @Comctrls@TToolBar@RecreateButtons$qqrv  +
pop ebx  +
retn   +
***
mov ebx edx +
mov esi eax +
test bl 3 +
setnz al  +
mov [esi+16Ah] al +
test bl 4 +
setnz dl  +
mov eax esi +
mov ecx [eax] +
call dword ptr [ecx+64h]  +
test byte ptr [esi+1Ch] 10h +
jnz loc_49149A  +
test bl 8 +
setz dl  +
mov eax esi +
call @Controls@TControl@SetVisible$qqro  +
cmp byte ptr [esi+16Ah] 0 +
jnz loc_4914A8  +
test bl 10h +
jnz loc_4914AC  +
xor eax eax +
jmp loc_4914AE  +
mov al 1 +
mov [esi+170h] al +
test bl 20h +
setnz al  +
mov [esi+17Ch] al +
test bl 80h +
setnz al  +
mov [esi+171h] al +
pop esi  +
pop ebx  +
retn   +
***
add esp 0FFFFFFECh +
mov ebx eax +
test byte ptr [ebx+1Ch] 10h +
jnz loc_491561  +
cmp dword ptr [ebx+184h] 0 +
jz loc_491561  +
mov eax [ebx+184h] +
test eax eax +
jz loc_491543  +
mov esi eax +
mov eax esp +
push eax  +
mov eax ebx +
call @Comctrls@TToolButton@GetIndex$qqrv  +
mov ecx eax +
mov edx 417h +
mov eax esi +
call @Controls@TControl@Perform$qqruiii  +
test eax eax +
jz loc_491532  +
mov al [ebx+57h] +
xor al 1 +
and eax 7Fh +
xor edx edx +
call unknown_libname_380  +
push eax  +
mov ecx [esp+18h+var_10] +
mov edx 404h +
mov eax esi +
call @Controls@TControl@Perform$qqruiii  +
cmp byte ptr [esi+5Ch] 0 +
jz loc_491543  +
mov eax esi +
mov si 0FFEEh +
call @System@@CallDynaInst$qqrv  +
mov eax ebx +
mov edx [eax] +
call dword ptr [edx+9Ch]  +
mov eax ebx +
call @Comctrls@TToolButton@GetIndex$qqrv  +
mov edx eax +
mov eax [ebx+184h] +
call @Comctrls@TToolBar@RepositionButtons$qqri  +
add esp 14h +
pop esi  +
pop ebx  +
retn   +
***
mov ebx eax +
mov esi [ebx+184h] +
test esi esi +
jz loc_491596  +
mov eax ebx +
mov edx [eax] +
call dword ptr [edx+50h]  +
and eax 7Fh +
push eax  +
mov eax ebx +
call @Comctrls@TToolButton@GetIndex$qqrv  +
mov ecx eax +
mov edx 401h +
mov eax esi +
call @Controls@TControl@Perform$qqruiii  +
pop esi  +
pop ebx  +
retn   +
***
mov cl [eax+17Dh] +
push edi  +
mov ebx edx +
mov esi eax +
cmp bl [esi+16Ah] +
jz loc_49161A  +
mov [esi+16Ah] bl +
mov edi [esi+184h] +
test edi edi +
jz loc_49161A  +
xor eax eax +
mov al bl +
xor edx edx +
call unknown_libname_380  +
push eax  +
mov eax esi +
call @Comctrls@TToolButton@GetIndex$qqrv  +
mov ecx eax +
cmp byte ptr [esi+17Dh] 1 +
setz al  +
and eax 7Fh +
mov edx dword_4E6948[eax*4] +
mov eax edi +
call @Controls@TControl@Perform$qqruiii  +
mov eax [esi+184h] +
call @Comctrls@TToolBar@UpdateButtonStates$qqrv  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
cmp edx [eax+178h] +
jz locret_491638  +
mov [eax+178h] edx +
test edx edx +
jz locret_491638  +
xchg eax edx +
call @Classes@TComponent@FreeNotification$qqrp18Classes@TComponent  +
retn   +
***
cmp dl [esi+16Bh] +
jz loc_491657  +
mov [esi+16Bh] dl +
mov eax esi +
mov edx [eax] +
call dword ptr [edx+9Ch]  +
pop esi  +
retn   +
***
mov esi edx +
mov ebx eax +
cmp esi [ebx+16Ch] +
jz loc_4916BC  +
mov [ebx+16Ch] esi +
cmp dword ptr [ebx+184h] 0 +
jz loc_4916BC  +
mov eax ebx +
mov edx [eax] +
call dword ptr [edx+98h]  +
push esi  +
mov eax ebx +
call @Comctrls@TToolButton@GetIndex$qqrv  +
mov ecx eax +
mov edx 42Bh +
mov eax [ebx+184h] +
call @Controls@TControl@Perform$qqruiii  +
mov eax [ebx+184h] +
cmp byte ptr [eax+22Ah] 0 +
jnz loc_4916B5  +
cmp byte ptr [eax+229h] 0 +
jz loc_4916BC  +
mov eax ebx +
mov edx [eax] +
call dword ptr [edx+7Ch]  +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
mov ebx edx +
mov esi eax +
cmp bl [esi+171h] +
jz loc_4916F9  +
mov [esi+171h] bl +
mov edi [esi+184h] +
test edi edi +
jz loc_4916F9  +
xor eax eax +
mov al bl +
push eax  +
mov eax esi +
call @Comctrls@TToolButton@GetIndex$qqrv  +
mov ecx eax +
mov edx 406h +
mov eax edi +
call @Controls@TControl@Perform$qqruiii  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
mov ebx edx +
mov esi eax +
cmp bl [esi+170h] +
jz loc_491746  +
test bl bl +
jz loc_49171C  +
xor edx edx +
mov eax esi +
call @Comctrls@TToolButton@SetDown$qqro  +
mov [esi+170h] bl +
mov edi [esi+184h] +
test edi edi +
jz loc_491746  +
xor eax eax +
mov al bl +
push eax  +
mov eax esi +
call @Comctrls@TToolButton@GetIndex$qqrv  +
mov ecx eax +
mov edx 405h +
mov eax edi +
call @Controls@TControl@Perform$qqruiii  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov esi edx +
cmp dl [esi+17Dh] +
jz loc_491879  +
mov [esi+17Dh] dl +
mov eax esi +
mov edx [eax] +
call dword ptr [edx+7Ch]  +
test byte ptr [esi+1Ch] 1 +
jnz loc_491879  +
cmp dword ptr [esi+184h] 0 +
jz loc_491879  +
mov eax [esi+184h] +
cmp byte ptr [eax+227h] 0 +
jz loc_491819  +
xor edx edx +
mov [eax+210h] edx +
xor edx edx +
mov [eax+214h] edx +
call @Comctrls@TToolBar@RecreateButtons$qqrv  +
jmp loc_49186A  +
mov dl [esi+17Dh] +
mov ecx edx +
add cl 0FDh +
sub cl 2 +
jnb loc_491835  +
mov eax esi +
mov edx [eax] +
call dword ptr [edx+98h]  +
jmp loc_49184B  +
cmp dl 2 +
jnz loc_491841  +
call @Comctrls@TToolBar@RecreateButtons$qqrv  +
jmp loc_49184B  +
mov eax esi +
mov edx [eax] +
call dword ptr [edx+9Ch]  +
mov eax [esi+184h] +
call @Comctrls@TToolBar@ResizeButtons$qqrv  +
mov eax esi +
call @Comctrls@TToolButton@GetIndex$qqrv  +
mov edx eax +
mov eax [esi+184h] +
call @Comctrls@TToolBar@RepositionButtons$qqri  +
mov eax [esi+184h] +
mov si 0FFEEh +
call @System@@CallDynaInst$qqrv  +
pop esi  +
retn   +
***
cmp dl [esi+17Ch] +
jz loc_4918A0  +
mov [esi+17Ch] dl +
cmp dword ptr [esi+184h] 0 +
jz loc_4918A0  +
mov eax esi +
mov edx [eax] +
call dword ptr [edx+98h]  +
pop esi  +
retn   +
***
inc dword ptr [eax+180h]  +
retn   +
***
dec dword ptr [eax+180h]  +
retn   +
***
mov edx [eax+184h] +
test edx edx +
jz loc_4918CB  +
mov edx [edx+218h] +
xchg eax edx +
call unknown_libname_419  +
retn   +
or eax 0FFFFFFFFh +
retn   +
***
mov al [eax+17Dh] +
add al 0FDh +
sub al 2 +
setb al  +
retn   +
***
mov ebx eax +
mov esi [ebx+184h] +
test esi esi +
jz loc_491900  +
mov eax ebx +
call @Comctrls@TToolButton@GetIndex$qqrv  +
mov edx eax +
mov eax esi +
call @Comctrls@TToolBar@RefreshButton$qqri  +
test al al +
pop esi  +
pop ebx  +
retn   +
***
mov ebx eax +
mov esi [ebx+184h] +
test esi esi +
jz loc_491922  +
mov eax ebx +
call @Comctrls@TToolButton@GetIndex$qqrv  +
mov edx eax +
mov eax esi +
call @Comctrls@TToolBar@UpdateButton$qqri  +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
mov ebx eax +
mov ebx eax +
push edi  +
mov ebx ecx +
mov esi edx +
mov edi eax +
mov ecx ebx +
mov edx esi +
mov eax edi +
call @Controls@TControl@ActionChange$qqrp14System@TObjecto  +
mov eax esi +
mov edx ds:off_448424 +
call @System@@IsClass$qqrp14System@TObjectp17System@TMetaClass  +
test al al +
jz loc_491A0A  +
test bl bl +
jz loc_4919E6  +
cmp byte ptr [edi+16Ah] 0 +
jnz loc_4919F0  +
mov dl [esi+69h] +
mov eax edi +
call @Comctrls@TToolButton@SetDown$qqro  +
test bl bl +
jz loc_4919FD  +
cmp dword ptr [edi+16Ch] 0FFFFFFFFh +
jnz loc_491A0A  +
mov edx [esi+80h] +
mov eax edi +
call @Comctrls@TToolButton@SetImageIndex$qqri  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
retn   +
***
push edi  +
mov esi edx +
mov ebx eax +
mov edx esi +
mov eax ebx +
call @Controls@TControl@AssignTo$qqrp19Classes@TPersistent  +
mov eax esi +
mov edx ds:off_448424 +
call @System@@IsClass$qqrp14System@TObjectp17System@TMetaClass  +
test al al +
jz loc_491A55  +
mov dl [ebx+16Ah] +
mov edi esi +
mov eax edi +
call @Actnlist@TCustomAction@SetChecked$qqro  +
mov edx [ebx+16Ch] +
mov eax edi +
call @Actnlist@TCustomAction@SetImageIndex$qqri  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
mov edi edx +
mov esi eax +
mov edx edi +
mov eax esi +
call sub_4A5010  +
test byte ptr [esi+1Ch] 1 +
jz loc_491AB2  +
mov eax edi +
mov edx ds:off_485648 +
call @System@@IsClass$qqrp14System@TObjectp17System@TMetaClass  +
test al al +
jz loc_491AB2  +
mov al [esi+17Dh] +
add al 0FDh +
sub al 2 +
jnb loc_491A94  +
mov eax [esi+48h] +
jmp loc_491A9A  +
mov eax [edi+210h] +
push eax  +
mov eax [edi+214h] +
push eax  +
mov ecx [esi+44h] +
mov edx [esi+40h] +
mov eax esi +
mov ebx [eax] +
call dword ptr [ebx+84h]  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
add esp 0FFFFFFECh +
push ebx  +
push esi  +
test dl dl +
jz loc_491ACC  +
add esp 0FFFFFFF0h +
call unknown_libname_535  +
mov [ebp+var_1] dl +
mov ebx eax +
xor edx edx +
mov eax ebx +
call @Toolwin@TToolWindow@$bctr$qqrp18Classes@TComponent  +
mov eax ds:dword_491C58 +
mov [ebx+50h] eax +
mov edx 96h +
mov eax ebx +
call @Controls@TControl@SetWidth$qqri  +
mov edx 1Dh +
mov eax ebx +
call @Controls@TControl@SetHeight$qqri  +
mov dl 1 +
mov eax ebx +
call @Controls@TControl@SetAlign$qqr15Controls@TAlign  +
mov dl ds:byte_491C5C +
mov eax ebx +
call @Toolwin@TToolWindow@SetEdgeBorders$qqr47System@_Set$t19Toolwin@TEdgeBorder$iuc$0$iuc$3_  +
mov dword ptr [ebx+210h] 17h +
mov dword ptr [ebx+214h] 16h +
mov byte ptr [ebx+225h] 0 +
mov byte ptr [ebx+226h] 0 +
mov byte ptr [ebx+248h] 1 +
mov byte ptr [ebx+22Bh] 1 +
mov dl 1 +
mov eax ds:off_49A5D8 +
call @System@TObject@$bctr$qqrv  +
mov [ebx+218h] eax +
mov dl 1 +
mov eax ds:off_4713DC +
call @Graphics@TCanvas@$bctr$qqrv  +
mov esi eax +
mov [ebx+220h] esi +
mov eax esi +
mov edx ebx +
call @Controls@TControlCanvas@SetControl$qqrp17Controls@TControl  +
mov dl 1 +
mov eax ds:off_44674C +
call @System@TObject@$bctr$qqrv  +
mov esi eax +
mov [ebx+230h] esi +
mov [esi+0Ch] ebx +
mov dword ptr [esi+8] offset @Comctrls@TToolBar@ImageListChange$qqrp14System@TObject +
mov dl 1 +
mov eax ds:off_44674C +
call @System@TObject@$bctr$qqrv  +
mov esi eax +
mov [ebx+238h] esi +
mov [esi+0Ch] ebx +
mov dword ptr [esi+8] offset @Comctrls@TToolBar@DisabledImageListChange$qqrp14System@TObject +
mov dl 1 +
mov eax ds:off_44674C +
call @System@TObject@$bctr$qqrv  +
mov esi eax +
mov [ebx+240h] esi +
mov [esi+0Ch] ebx +
mov dword ptr [esi+8] offset @Comctrls@TToolBar@HotImageListChange$qqrp14System@TObject +
mov dl 1 +
mov eax ds:off_45979C +
call @Graphics@TBitmap@$bctr$qqrv  +
mov esi eax +
mov [ebx+24Ch] esi +
mov edx 1 +
mov eax esi +
mov ecx [eax] +
call dword ptr [ecx+40h]  +
mov edx 1 +
mov eax esi +
mov ecx [eax] +
call dword ptr [ecx+34h]  +
mov eax esi +
call @Graphics@TBitmap@GetCanvas$qqrv  +
mov eax [eax+14h] +
mov edx 8000000Fh +
call @Graphics@TBrush@SetColor$qqr15Graphics@TColor  +
push 1  +
lea eax [ebp+var_14] +
push eax  +
mov ecx 1 +
xor edx edx +
xor eax eax +
call sub_4A7768  +
lea eax [ebp+var_14] +
push eax  +
mov eax esi +
call @Graphics@TBitmap@GetCanvas$qqrv  +
pop edx  +
call @Graphics@TCanvas@FillRect$qqrrx11Types@TRect  +
mov eax ds:off_449AF8 +
mov [ebx+0B8h] eax +
mov eax ebx +
cmp [ebp+var_1] 0 +
jz loc_491C50  +
call sub_4BABC8  +
pop large dword ptr fs:0  +
add esp 0Ch +
mov eax ebx +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
push edi  +
push ebp  +
call unknown_libname_536  +
mov ebx edx +
mov ebp eax +
mov eax [ebp+24Ch] +
call @System@TObject@Free$qqrv  +
mov eax [ebp+240h] +
call @System@TObject@Free$qqrv  +
mov eax [ebp+238h] +
call @System@TObject@Free$qqrv  +
mov eax [ebp+230h] +
call @System@TObject@Free$qqrv  +
mov eax [ebp+218h] +
mov edi [eax+8] +
dec edi  +
test edi edi +
jl loc_491CDF  +
inc edi  +
xor esi esi +
mov eax [ebp+218h] +
mov edx esi +
call @Classes@TList@Get$qqri  +
mov edx ds:off_484D68 +
call @System@@IsClass$qqrp14System@TObjectp17System@TMetaClass  +
test al al +
jz loc_491CDB  +
mov eax [ebp+218h] +
mov edx esi +
call @Classes@TList@Get$qqri  +
xor edx edx +
mov [eax+184h] edx +
inc esi  +
dec edi  +
jnz loc_491CAA  +
mov eax [ebp+218h] +
call @System@TObject@Free$qqrv  +
mov eax [ebp+220h] +
call @System@TObject@Free$qqrv  +
mov edx ebx +
and dl 0FCh +
mov eax ebp +
call @Controls@TWinControl@$bdtr$qqrv  +
test bl bl +
jle loc_491D0C  +
mov eax ebp +
call @System@@ClassDestroy$qqrp14System@TObject  +
pop ebp  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov esi edx +
mov ebx eax +
mov eax 4 +
call @Comctrls@InitCommonControl$qqri  +
mov [ebx+248h] al +
mov edx esi +
mov eax ebx +
call @Controls@TWinControl@CreateParams$qqrr22Controls@TCreateParams  +
mov ecx offset aToolbarwindow3 +
mov edx esi +
mov eax ebx +
call @Controls@TWinControl@CreateSubClass$qqrr22Controls@TCreateParamspc  +
mov eax [esi+4] +
or eax 4Eh +
xor edx edx +
mov dl [ebx+229h] +
or eax dword_4E6958[edx*4] +
xor edx edx +
mov dl [ebx+228h] +
or eax dword_4E6950[edx*4] +
xor edx edx +
mov dl [ebx+22Ah] +
or eax dword_4E6960[edx*4] +
xor edx edx +
mov dl [ebx+225h] +
or eax dword_4E6968[edx*4] +
mov [esi+4] eax +
cmp byte ptr [ebx+227h] 0 +
jz loc_491D96  +
or dword ptr [esi+4] 8000h +
and dword ptr [esi+24h] 0FFFFFFFCh +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
add esp 0FFFFFFC8h +
mov ebx eax +
mov eax ebx +
call @Controls@TWinControl@CreateWnd$qqrv  +
call sub_4868BC  +
cmp eax 40047h +
jl loc_491DED  +
push 0  +
xor ecx ecx +
mov edx 455h +
mov eax ebx +
call @Controls@TControl@Perform$qqruiii  +
or eax 1 +
push eax  +
xor ecx ecx +
mov edx 454h +
mov eax ebx +
call @Controls@TControl@Perform$qqruiii  +
xor eax eax +
mov [ebx+250h] eax +
push 0Dh  +
call GetStockObject  +
mov esi eax +
test esi esi +
jz loc_491E44  +
push 0  +
call GetDC  +
mov edi eax +
test edi edi +
jz loc_491E44  +
push esi  +
push edi  +
call SelectObject  +
mov esi eax +
push esp  +
push edi  +
call GetTextMetricsA  +
test eax eax +
jz loc_491E35  +
mov eax [esp+38h+var_38] +
sub eax [esp+38h+var_2C] +
sub eax [esp+38h+var_28] +
inc eax  +
mov [ebx+25Ch] eax +
push esi  +
push edi  +
call SelectObject  +
push edi  +
push 0  +
call ReleaseDC  +
mov eax ebx +
call @Comctrls@TToolBar@RecreateButtons$qqrv  +
mov eax ebx +
mov edx [eax] +
call dword ptr [edx+7Ch]  +
add esp 38h +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
add esp 0FFFFFFF8h +
push ebx  +
push esi  +
push edi  +
mov esi ecx +
mov ebx edx +
mov [ebp+var_4] eax +
mov eax [ebp+var_4] +
call @Comctrls@TToolBar@BeginUpdate$qqrv  +
xor edx edx +
push ebp  +
push offset loc_491F73  +
push dword ptr fs:[edx]  +
mov fs:[edx] esp +
mov eax [ebp+var_4] +
call @Controls@TWinControl@HandleNeeded$qqrv  +
push 0  +
mov ecx 14h +
mov edx 41Eh +
mov eax [ebp+var_4] +
call @Controls@TControl@Perform$qqruiii  +
push 0  +
mov eax [ebp+var_4] +
mov ecx [eax+244h] +
mov edx 42Fh +
mov eax [ebp+var_4] +
call @Controls@TControl@Perform$qqruiii  +
mov eax [ebp+var_4] +
mov eax [eax+22Ch] +
test eax eax +
jz loc_491ECE  +
mov edi [eax+34h] +
mov eax [eax+30h] +
mov [ebp+var_8] eax +
jmp loc_491F05  +
mov eax [ebp+var_4] +
mov eax [eax+234h] +
test eax eax +
jz loc_491EE6  +
mov edi [eax+34h] +
mov eax [eax+30h] +
mov [ebp+var_8] eax +
jmp loc_491F05  +
mov eax [ebp+var_4] +
mov eax [eax+23Ch] +
test eax eax +
jz loc_491EFE  +
mov edi [eax+34h] +
mov eax [eax+30h] +
mov [ebp+var_8] eax +
jmp loc_491F05  +
xor edi edi +
xor eax eax +
mov [ebp+var_8] eax +
mov dx word ptr [ebp+var_8] +
mov eax edi +
call sub_4978D4  +
push eax  +
xor ecx ecx +
mov edx 420h +
mov eax [ebp+var_4] +
call @Controls@TControl@Perform$qqruiii  +
test ebx ebx +
jg loc_491F29  +
mov ebx 1 +
test esi esi +
jg loc_491F32  +
mov esi 1 +
mov edx esi +
mov eax ebx +
call sub_4978D4  +
push eax  +
xor ecx ecx +
mov edx 41Fh +
mov eax [ebp+var_4] +
call @Controls@TControl@Perform$qqruiii  +
mov eax [ebp+var_4] +
mov [eax+210h] ebx +
mov eax [ebp+var_4] +
mov [eax+214h] esi +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_491F7A  +
mov eax [ebp+var_4] +
call @Comctrls@TToolBar@EndUpdate$qqrv  +
retn   +
jmp unknown_libname_539  +
jmp loc_491F6A  +
mov eax [ebp+var_4] +
call @Comctrls@TToolBar@InternalButtonCount$qqrv  +
mov ebx eax +
dec ebx  +
test ebx ebx +
jl loc_491F9E  +
inc ebx  +
push 0  +
xor ecx ecx +
mov edx 416h +
mov eax [ebp+var_4] +
call @Controls@TControl@Perform$qqruiii  +
dec ebx  +
jnz loc_491F8A  +
mov eax [ebp+var_4] +
call @Comctrls@TToolBar@UpdateButtons$qqrv  +
mov eax [ebp+var_4] +
call @Comctrls@TToolBar@UpdateImages$qqrv  +
mov eax [ebp+var_4] +
lea ecx [eax+214h] +
mov eax [ebp+var_4] +
lea edx [eax+210h] +
mov eax [ebp+var_4] +
call @Comctrls@TToolBar@GetButtonSize$qqrrit1  +
pop edi  +
pop esi  +
pop ebx  +
pop ecx  +
pop ecx  +
pop ebp  +
retn   +
***
add esp 0FFFFFFD8h +
push ebx  +
push esi  +
push edi  +
mov esi edx +
mov edi eax +
test byte ptr [edi+1Ch] 1 +
jnz loc_4920FA  +
lea eax [ebp+var_18] +
push eax  +
mov ecx esi +
mov edx 417h +
mov eax edi +
call @Controls@TControl@Perform$qqruiii  +
test eax eax +
jz loc_4920FA  +
lea eax [ebp+var_28] +
push eax  +
mov ecx esi +
mov edx 41Dh +
mov eax edi +
call @Controls@TControl@Perform$qqruiii  +
test eax eax +
jz loc_4920FA  +
mov eax [ebp+var_C] +
mov [ebp+var_4] eax +
mov eax [ebp+var_4] +
mov edx ds:off_484D68 +
call @System@@IsClass$qqrp14System@TObjectp17System@TMetaClass  +
mov ebx eax +
test bl bl +
jz loc_492040  +
mov eax [ebp+var_4] +
mov edx [eax] +
call dword ptr [edx+90h]  +
xor ecx ecx +
push ebp  +
push offset loc_4920F3  +
push dword ptr fs:[ecx]  +
mov fs:[ecx] esp +
mov eax [ebp+var_4] +
mov edx ds:off_484D68 +
call @System@@IsClass$qqrp14System@TObjectp17System@TMetaClass  +
test bl bl +
jnz loc_4920BD  +
mov eax [ebp+var_4] +
mov edx ds:off_472320 +
call @System@@IsClass$qqrp14System@TObjectp17System@TMetaClass  +
test al al +
jz loc_492079  +
mov eax edi +
call @Controls@TWinControl@HandleNeeded$qqrv  +
lea edx [ebp+var_28] +
mov eax [ebp+var_4] +
call @Controls@TControl@SetBoundsRect$qqrrx11Types@TRect  +
mov edx [ebp+var_1C] +
mov esi [ebp+var_24] +
sub edx esi +
mov eax [ebp+var_4] +
mov eax [eax+4Ch] +
cmp edx eax +
jle loc_4920C8  +
mov edi edx +
sub edi eax +
sar edi 1 +
jns loc_4920A1  +
adc edi 0 +
mov edx [ebp+var_20] +
sub edx [ebp+var_28] +
push edx  +
push eax  +
mov ecx esi +
add ecx edi +
mov edx [ebp+var_28] +
mov eax [ebp+var_4] +
mov ebx [eax] +
call dword ptr [ebx+84h]  +
jmp loc_4920C8  +
lea edx [ebp+var_28] +
mov eax [ebp+var_4] +
call @Controls@TControl@SetBoundsRect$qqrrx11Types@TRect  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4920FA  +
mov eax [ebp+var_4] +
mov edx ds:off_484D68 +
call @System@@IsClass$qqrp14System@TObjectp17System@TMetaClass  +
test al al +
jz locret_4920F2  +
mov eax [ebp+var_4] +
mov edx [eax] +
call dword ptr [edx+94h]  +
retn   +
jmp unknown_libname_539  +
jmp loc_4920D5  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
push ecx  +
push ebx  +
push esi  +
mov ebx edx +
mov [ebp+var_4] eax +
mov eax [ebp+var_4] +
test byte ptr [eax+1Ch] 1 +
jnz loc_492175  +
mov eax [ebp+var_4] +
cmp dword ptr [eax+258h] 0 +
jg loc_492175  +
mov eax [ebp+var_4] +
call @Comctrls@TToolBar@BeginUpdate$qqrv  +
xor eax eax +
push ebp  +
push offset loc_49216E  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov eax [ebp+var_4] +
call @Comctrls@TToolBar@InternalButtonCount$qqrv  +
mov esi eax +
dec esi  +
sub ebx esi +
jg loc_492158  +
dec ebx  +
mov edx esi +
mov eax [ebp+var_4] +
call @Comctrls@TToolBar@RepositionButton$qqri  +
dec esi  +
inc ebx  +
jnz loc_49214A  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_492175  +
mov eax [ebp+var_4] +
call @Comctrls@TToolBar@EndUpdate$qqrv  +
retn   +
jmp unknown_libname_539  +
jmp loc_492165  +
pop esi  +
pop ebx  +
pop ecx  +
pop ebp  +
retn   +
***
push edi  +
cmp edx [eax+214h] +
cmp edx [eax+210h] +
push edi  +
mov esi edx +
mov ebx eax +
mov eax esi +
mov edx ds:off_484D68 +
call @System@@IsClass$qqrp14System@TObjectp17System@TMetaClass  +
test al al +
jz loc_49229A  +
mov [esi+184h] ebx +
test byte ptr [esi+1Ch] 1 +
jnz loc_4922F7  +
mov edx esi +
mov eax [ebx+218h] +
call unknown_libname_419  +
test eax eax +
jl loc_4922C5  +
mov edx [esi+44h] +
push edx  +
mov ecx [esi+40h] +
mov edx eax +
mov eax ebx +
call @Comctrls@TToolBar@ReorderButton$qqriii  +
mov edi eax +
jmp loc_49230F  +
mov edx [esi+44h] +
push edx  +
mov ecx [esi+40h] +
mov edx eax +
mov eax ebx +
call @Comctrls@TToolBar@ButtonIndex$qqriii  +
mov edi eax +
mov ecx esi +
mov edx edi +
mov eax [ebx+218h] +
call @Classes@TList@Insert$qqripv  +
push edi  +
mov ecx edi +
mov edx 415h +
mov eax ebx +
call @Comctrls@TToolBar@UpdateItem$qqriii  +
jmp loc_49230F  +
mov edx esi +
mov eax [ebx+218h] +
call @Classes@TList@Add$qqrpv  +
mov edi eax +
mov edx edi +
mov eax ebx +
call @Comctrls@TToolBar@UpdateButton$qqri  +
cmp byte ptr [ebx+22Bh] 0 +
jz loc_492323  +
xor edx edx +
mov eax ebx +
call @Comctrls@TToolBar@RepositionButtons$qqri  +
jmp loc_49232C  +
mov edx edi +
mov eax ebx +
call @Comctrls@TToolBar@RepositionButtons$qqri  +
mov eax ebx +
call @Comctrls@TToolBar@RecreateButtons$qqrv  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov esi edx +
mov ebx eax +
mov edx esi +
mov eax [ebx+218h] +
call unknown_libname_419  +
test eax eax +
jl loc_4923C4  +
mov eax esi +
mov edx ds:off_484D68 +
call @System@@IsClass$qqrp14System@TObjectp17System@TMetaClass  +
test al al +
jz loc_492368  +
xor eax eax +
mov [esi+184h] eax +
mov edx esi +
mov eax [ebx+218h] +
call @Classes@TList@Remove$qqrpv  +
mov esi eax +
cmp byte ptr [ebx+226h] 0 +
jz loc_492389  +
cmp byte ptr [ebx+254h] 0 +
jz loc_4923C4  +
push 0  +
mov ecx esi +
mov edx 416h +
mov eax ebx +
call @Controls@TControl@Perform$qqruiii  +
mov eax ebx +
call @Comctrls@TToolBar@ResizeButtons$qqrv  +
cmp byte ptr [ebx+22Bh] 0 +
jz loc_4923B4  +
xor edx edx +
mov eax ebx +
call @Comctrls@TToolBar@RepositionButtons$qqri  +
jmp loc_4923BD  +
mov edx esi +
mov eax ebx +
call @Comctrls@TToolBar@RepositionButtons$qqri  +
mov eax ebx +
call @Comctrls@TToolBar@RecreateButtons$qqrv  +
pop esi  +
pop ebx  +
retn   +
***
add esp 0FFFFF004h +
push eax  +
add esp 0FFFFFFE0h +
push ebx  +
push esi  +
push edi  +
xor ebx ebx +
mov [ebp+var_1020] ebx +
mov [ebp+var_8] ebx +
mov edi ecx +
mov [ebp+var_4] edx +
mov esi eax +
xor eax eax +
push ebp  +
push offset loc_492593  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov edx edi +
mov eax [esi+218h] +
call @Classes@TList@Get$qqri  +
mov ebx eax +
mov eax ebx +
mov edx ds:off_484D68 +
call @System@@IsClass$qqrp14System@TObjectp17System@TMetaClass  +
test al al +
jz loc_49251A  +
lea eax [ebp+var_1C] +
xor ecx ecx +
mov edx 14h +
call @System@@FillChar$qqrv  +
mov al [ebx+17Dh] +
mov edx eax +
add dl 0FDh +
sub dl 2 +
jnb loc_492446  +
mov edx [ebx+48h] +
mov [ebp+var_1C] edx +
mov [ebp+var_18] edi +
jmp loc_49245F  +
mov edx [ebx+16Ch] +
test edx edx +
jge loc_492459  +
mov [ebp+var_1C] 0FFFFFFFEh +
jmp loc_49245C  +
mov [ebp+var_1C] edx +
mov [ebp+var_18] edi +
and eax 7Fh +
mov al byte_4E693C[eax*2] +
mov [ebp+var_13] al +
mov edi ebx +
cmp byte ptr [edi+169h] 0 +
jz loc_492487  +
call sub_4868BC  +
cmp eax 40047h +
jl loc_492487  +
or [ebp+var_13] 10h +
mov eax edi +
call @Comctrls@TToolButton@GetButtonState$qqrv  +
mov [ebp+var_14] al +
cmp byte ptr [edi+16Bh] 0 +
jz loc_49249E  +
or [ebp+var_13] 4 +
mov [ebp+var_10] ebx +
cmp byte ptr [esi+227h] 0 +
jz loc_492511  +
lea edx [ebp+var_1020] +
mov eax edi +
call @TControl@GetText$qqrv  +
cmp [ebp+var_1020] 0 +
jz loc_4924CC  +
lea edx [ebp+var_8] +
mov eax edi +
call @TControl@GetText$qqrv  +
jmp loc_4924D9  +
lea eax [ebp+var_8] +
mov edx offset _str___15.Text +
call unknown_libname_543  +
lea eax [ebp+var_101C] +
mov edx [ebp+var_8] +
call sub_4A9220  +
mov eax [ebp+var_8] +
call sub_4BB610  +
mov byte ptr [ebp+eax+var_101C+1] 0 +
lea eax [ebp+var_101C] +
push eax  +
xor ecx ecx +
mov edx 41Ch +
mov eax esi +
call @Controls@TControl@Perform$qqruiii  +
mov [ebp+var_C] eax +
jmp loc_49255C  +
mov [ebp+var_C] 0FFFFFFFFh +
jmp loc_49255C  +
lea eax [ebp+var_1C] +
xor ecx ecx +
mov edx 14h +
call @System@@FillChar$qqrv  +
mov al byte ptr word_4E6942 +
mov [ebp+var_13] al +
mov eax [ebx+48h] +
mov [ebp+var_1C] eax +
mov [ebp+var_18] 0FFFFFFFFh +
cmp byte ptr [ebx+57h] 0 +
jnz loc_492552  +
test byte ptr [ebx+1Ch] 10h +
jnz loc_492552  +
mov al byte_4E6932 +
or [ebp+var_14] al +
mov [ebp+var_10] ebx +
mov [ebp+var_C] 0FFFFFFFFh +
lea eax [ebp+var_1C] +
push eax  +
mov ecx [ebp+arg_0] +
mov edx [ebp+var_4] +
mov eax esi +
call @Controls@TControl@Perform$qqruiii  +
test eax eax +
setnz bl  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_49259A  +
lea eax [ebp+var_1020] +
call unknown_libname_540  +
lea eax [ebp+var_8] +
call unknown_libname_540  +
retn   +
jmp unknown_libname_539  +
jmp loc_49257F  +
mov eax ebx +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 4  +
***
add esp 0FFFFF004h +
push eax  +
add esp 0FFFFFFD0h +
push ebx  +
push esi  +
push edi  +
xor ebx ebx +
mov [ebp+var_1030] ebx +
mov [ebp+var_C] ebx +
mov [ebp+var_8] ecx +
mov [ebp+var_4] edx +
mov esi eax +
xor eax eax +
push ebp  +
push offset loc_49277B  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov edx [ebp+var_8] +
mov eax [esi+218h] +
call @Classes@TList@Get$qqri  +
mov ebx eax +
lea eax [ebp+var_2C] +
xor ecx ecx +
mov edx 20h +
call @System@@FillChar$qqrv  +
mov [ebp+var_2C] 20h +
mov eax ebx +
mov edx ds:off_484D68 +
call @System@@IsClass$qqrp14System@TObjectp17System@TMetaClass  +
test al al +
jz loc_492719  +
mov [ebp+var_28] 7Ch +
mov edi ebx +
mov al [edi+17Dh] +
mov edx eax +
add dl 0FDh +
sub dl 2 +
jnb loc_492641  +
mov edx [ebp+var_8] +
mov [ebp+var_24] edx +
jmp loc_492661  +
or [ebp+var_28] 1 +
mov edx [edi+16Ch] +
test edx edx +
jge loc_492658  +
mov [ebp+var_20] 0FFFFFFFEh +
jmp loc_49265B  +
mov [ebp+var_20] edx +
mov edx [ebp+var_8] +
mov [ebp+var_24] edx +
mov dx [edi+48h] +
mov [ebp+var_1A] dx +
and eax 7Fh +
mov al byte_4E693C[eax*2] +
mov [ebp+var_1B] al +
cmp byte ptr [edi+169h] 0 +
jz loc_492683  +
or [ebp+var_1B] 10h +
cmp byte ptr [edi+16Bh] 0 +
jz loc_492690  +
or [ebp+var_1B] 4 +
mov eax edi +
call @Comctrls@TToolButton@GetButtonState$qqrv  +
mov [ebp+var_1C] al +
mov [ebp+var_18] ebx +
cmp byte ptr [esi+227h] 0 +
jz loc_49270D  +
lea edx [ebp+var_1030] +
mov eax edi +
call @TControl@GetText$qqrv  +
cmp [ebp+var_1030] 0 +
jz loc_4926C8  +
lea edx [ebp+var_C] +
mov eax edi +
call @TControl@GetText$qqrv  +
jmp loc_4926D5  +
lea eax [ebp+var_C] +
mov edx offset _str___16.Text +
call unknown_libname_543  +
lea eax [ebp+var_102C] +
mov edx [ebp+var_C] +
call sub_4A9220  +
mov eax [ebp+var_C] +
call sub_4BB610  +
mov byte ptr [ebp+eax+var_102C+1] 0 +
lea eax [ebp+var_102C] +
mov [ebp+var_14] eax +
mov eax [ebp+var_C] +
call sub_4BB610  +
mov [ebp+var_10] eax +
or [ebp+var_28] 2 +
jmp loc_492744  +
xor eax eax +
mov [ebp+var_14] eax +
xor eax eax +
mov [ebp+var_10] eax +
jmp loc_492744  +
mov [ebp+var_28] 7Eh +
mov al byte ptr word_4E6942 +
mov [ebp+var_1B] al +
mov ax [ebx+48h] +
mov [ebp+var_1A] ax +
mov [ebp+var_24] 0FFFFFFFFh +
mov [ebp+var_18] ebx +
xor eax eax +
mov [ebp+var_14] eax +
xor eax eax +
mov [ebp+var_10] eax +
lea eax [ebp+var_2C] +
push eax  +
mov ecx [ebp+arg_0] +
mov edx [ebp+var_4] +
mov eax esi +
call @Controls@TControl@Perform$qqruiii  +
test eax eax +
setnz bl  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_492782  +
lea eax [ebp+var_1030] +
call unknown_libname_540  +
lea eax [ebp+var_C] +
call unknown_libname_540  +
retn   +
jmp unknown_libname_539  +
jmp loc_492767  +
mov eax ebx +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 4  +
***
add esp 0FFFFFFF4h +
add esp 0FFFFFFF8h +
push ebx  +
mov ebx edx +
mov [ebp+var_4] eax +
mov eax [ebp+var_4] +
test byte ptr [eax+1Ch] 1 +
jnz loc_492999  +
mov eax [ebp+var_4] +
cmp dword ptr [eax+258h] 0 +
jg loc_492999  +
mov eax [ebp+var_4] +
call @Comctrls@TToolBar@BeginUpdate$qqrv  +
xor eax eax +
push ebp  +
push offset loc_492992  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov eax [ebp+var_4] +
call @Controls@TWinControl@HandleNeeded$qqrv  +
push 0FFFFFFF0h  +
mov eax [ebp+var_4] +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call GetWindowLongA  +
mov [ebp+dwNewLong] eax +
mov eax [ebp+dwNewLong] +
and eax 0EFFFFFFFh +
push eax  +
push 0FFFFFFF0h  +
mov eax [ebp+var_4] +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call SetWindowLongA  +
xor eax eax +
push ebp  +
push offset loc_492975  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov eax [ebp+var_4] +
call @Comctrls@TToolBar@InternalButtonCount$qqrv  +
cmp ebx eax +
jge loc_492943  +
push ebx  +
mov ecx ebx +
mov edx 442h +
mov eax [ebp+var_4] +
call @Comctrls@TToolBar@UpdateItem2$qqriii  +
jmp loc_492953  +
push ebx  +
mov ecx ebx +
mov edx 415h +
mov eax [ebp+var_4] +
call @Comctrls@TToolBar@UpdateItem$qqriii  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_49297C  +
mov eax [ebp+dwNewLong] +
push eax  +
push 0FFFFFFF0h  +
mov eax [ebp+var_4] +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call SetWindowLongA  +
retn   +
jmp unknown_libname_539  +
jmp loc_492960  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_492999  +
mov eax [ebp+var_4] +
call @Comctrls@TToolBar@EndUpdate$qqrv  +
retn   +
jmp unknown_libname_539  +
jmp loc_492989  +
pop ebx  +
pop ecx  +
pop ecx  +
pop ebp  +
retn   +
***
add esp 0FFFFFFF8h +
push ebx  +
push esi  +
push edi  +
mov [ebp+var_4] eax +
mov eax [ebp+var_4] +
call @Comctrls@TToolBar@BeginUpdate$qqrv  +
xor eax eax +
push ebp  +
push offset loc_492A8B  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov eax [ebp+var_4] +
call @Controls@TWinControl@HandleNeeded$qqrv  +
push 0FFFFFFF0h  +
mov eax [ebp+var_4] +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call GetWindowLongA  +
mov [ebp+dwNewLong] eax +
mov eax [ebp+dwNewLong] +
and eax 0EFFFFFFFh +
push eax  +
push 0FFFFFFF0h  +
mov eax [ebp+var_4] +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call SetWindowLongA  +
xor eax eax +
push ebp  +
push offset loc_492A6E  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov eax [ebp+var_4] +
call @Comctrls@TToolBar@InternalButtonCount$qqrv  +
mov edi eax +
mov eax [ebp+var_4] +
mov eax [eax+218h] +
mov esi [eax+8] +
dec esi  +
test esi esi +
jl loc_492A4C  +
inc esi  +
xor ebx ebx +
cmp edi ebx +
jle loc_492A38  +
push ebx  +
mov ecx ebx +
mov edx 442h +
mov eax [ebp+var_4] +
call @Comctrls@TToolBar@UpdateItem2$qqriii  +
jmp loc_492A48  +
push ebx  +
mov ecx ebx +
mov edx 415h +
mov eax [ebp+var_4] +
call @Comctrls@TToolBar@UpdateItem$qqriii  +
inc ebx  +
dec esi  +
jnz loc_492A22  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_492A75  +
mov eax [ebp+dwNewLong] +
push eax  +
push 0FFFFFFF0h  +
mov eax [ebp+var_4] +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call SetWindowLongA  +
retn   +
jmp unknown_libname_539  +
jmp loc_492A59  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_492A92  +
mov eax [ebp+var_4] +
call @Comctrls@TToolBar@EndUpdate$qqrv  +
retn   +
jmp unknown_libname_539  +
jmp loc_492A82  +
xor edx edx +
mov eax [ebp+var_4] +
call @Comctrls@TToolBar@RepositionButtons$qqri  +
pop edi  +
pop esi  +
pop ebx  +
pop ecx  +
pop ecx  +
pop ebp  +
retn   +
***
add esp 0FFFFFFECh +
mov esi edx +
mov ebx eax +
mov eax esp +
push eax  +
mov ecx esi +
mov edx 417h +
mov eax ebx +
call @Controls@TControl@Perform$qqruiii  +
test eax eax +
jz loc_492AFC  +
mov dl [esp+14h+var_C] +
mov eax [esp+14h+var_8] +
call @Comctrls@TToolButton@SetButtonState$qqruc  +
mov eax [esp+14h+var_8] +
call @Comctrls@TToolButton@GetButtonState$qqrv  +
and eax 0FFh +
xor edx edx +
call unknown_libname_380  +
push eax  +
mov eax [esp+18h+var_8] +
call @Comctrls@TToolButton@GetIndex$qqrv  +
mov ecx eax +
mov edx 411h +
mov eax ebx +
call @Controls@TControl@Perform$qqruiii  +
add esp 14h +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
mov edi eax +
mov eax [edi+218h] +
mov esi [eax+8] +
dec esi  +
test esi esi +
jl loc_492B43  +
inc esi  +
xor ebx ebx +
mov eax [edi+218h] +
mov edx ebx +
call @Classes@TList@Get$qqri  +
mov edx ds:off_484D68 +
call @System@@IsClass$qqrp14System@TObjectp17System@TMetaClass  +
test al al +
jz loc_492B3F  +
mov edx ebx +
mov eax edi +
call @Comctrls@TToolBar@UpdateButtonState$qqri  +
inc ebx  +
dec esi  +
jnz loc_492B1A  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
cmp dl [esi+227h] +
jz loc_492B71  +
mov [esi+227h] dl +
test byte ptr [esi+1Ch] 1 +
jnz loc_492B66  +
mov eax esi +
call @Controls@TWinControl@RecreateWnd$qqrv  +
mov eax esi +
mov si 0FFEEh +
call @System@@CallDynaInst$qqrv  +
pop esi  +
retn   +
***
mov esi edx +
mov ebx eax +
mov edx esi +
mov eax [ebx+218h] +
call @Classes@TList@Get$qqri  +
pop esi  +
pop ebx  +
retn   +
***
mov eax [eax+218h] +
mov eax [eax+8] +
retn   +
***
cmp dl [eax+229h] +
cmp dl [eax+22Ah] +
cmp dl [esi+22Bh] +
push edi  +
mov ebx ecx +
mov esi edx +
mov edi eax +
mov ecx ebx +
mov edx esi +
mov eax edi +
call @Controls@TControl@Notification$qqrp18Classes@TComponent18Classes@TOperation  +
cmp bl 1 +
jnz loc_492C55  +
cmp esi [edi+22Ch] +
jnz loc_492C22  +
xor edx edx +
mov eax edi +
call @Comctrls@TToolBar@SetImages$qqrp24Imglist@TCustomImageList  +
cmp esi [edi+23Ch] +
jnz loc_492C33  +
xor edx edx +
mov eax edi +
call @Comctrls@TToolBar@SetHotImages$qqrp24Imglist@TCustomImageList  +
cmp esi [edi+234h] +
jnz loc_492C44  +
xor edx edx +
mov eax edi +
call @Comctrls@TToolBar@SetDisabledImages$qqrp24Imglist@TCustomImageList  +
cmp esi [edi+2DCh] +
jnz loc_492C55  +
xor edx edx +
mov eax edi +
call @Comctrls@TToolBar@SetMenu$qqrpx15Menus@TMainMenu  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
add esp 0FFFFFFE8h +
push ebx  +
push esi  +
push edi  +
mov ebx eax +
mov dl 1 +
mov eax ds:off_45979C +
call @Graphics@TBitmap@$bctr$qqrv  +
mov [ebp+var_8] eax +
xor eax eax +
push ebp  +
push offset loc_492D41  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov eax ebx +
call @Imglist@TCustomImageList@GetCount$qqrv  +
mov edx eax +
imul edx [ebx+34h] +
mov eax [ebp+var_8] +
mov ecx [eax] +
call dword ptr [ecx+40h]  +
mov edx [ebx+30h] +
mov eax [ebp+var_8] +
mov ecx [eax] +
call dword ptr [ecx+34h]  +
mov eax [ebp+arg_0] +
mov eax [eax-4] +
mov eax [eax+4Ch] +
push eax  +
lea eax [ebp+var_18] +
push eax  +
mov eax [ebp+arg_0] +
mov eax [eax-4] +
mov ecx [eax+48h] +
xor edx edx +
xor eax eax +
call sub_4A7768  +
mov eax [ebp+var_8] +
call @Graphics@TBitmap@GetCanvas$qqrv  +
mov esi eax +
mov eax [esi+14h] +
mov edx 8000000Fh +
call @Graphics@TBrush@SetColor$qqr15Graphics@TColor  +
lea edx [ebp+var_18] +
mov eax esi +
call @Graphics@TCanvas@FillRect$qqrrx11Types@TRect  +
mov eax ebx +
call @Imglist@TCustomImageList@GetCount$qqrv  +
mov edi eax +
dec edi  +
test edi edi +
jl loc_492D20  +
inc edi  +
xor esi esi +
push 1  +
push 0  +
mov eax [ebx+34h] +
imul  esi +
push eax  +
mov eax [ebp+var_8] +
call @Graphics@TBitmap@GetCanvas$qqrv  +
call @Graphics@TCanvas@GetHandle$qqrv  +
push eax  +
push esi  +
mov eax ebx +
call @Imglist@TCustomImageList@GetHandle$qqrv  +
push eax  +
call ImageList_Draw  +
inc esi  +
dec edi  +
jnz loc_492CF6  +
mov eax [ebp+var_8] +
call @Graphics@TBitmap@ReleaseHandle$qqrv  +
mov [ebp+var_4] eax +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_492D48  +
mov eax [ebp+var_8] +
call @System@TObject@Free$qqrv  +
retn   +
jmp unknown_libname_539  +
jmp loc_492D38  +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
add esp 0FFFFFFD8h +
mov [ebp+var_4] eax +
test edx edx +
jz loc_492D6F  +
push ebp  +
mov eax edx +
call @ComCtrls@_17718  +
pop ecx  +
mov [ebp+var_10] eax +
jmp loc_492DC5  +
mov dl 1 +
mov eax ds:off_45979C +
call @Graphics@TBitmap@$bctr$qqrv  +
mov [ebp+var_14] eax +
xor eax eax +
push ebp  +
push offset loc_492DBE  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov eax [ebp+var_4] +
mov edx [eax+24Ch] +
mov eax [ebp+var_14] +
mov ecx [eax] +
call dword ptr [ecx+8]  +
mov eax [ebp+var_14] +
call @Graphics@TBitmap@ReleaseHandle$qqrv  +
mov [ebp+var_10] eax +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_492DC5  +
mov eax [ebp+var_14] +
call @System@TObject@Free$qqrv  +
retn   +
jmp unknown_libname_539  +
jmp loc_492DB5  +
mov eax [ebp+var_4] +
mov eax [eax+250h] +
test eax eax +
jnz loc_492DFA  +
xor eax eax +
mov [ebp+var_C] eax +
mov eax [ebp+var_10] +
mov [ebp+var_8] eax +
lea eax [ebp+var_C] +
push eax  +
mov eax [ebp+var_4] +
call @Comctrls@TToolBar@GetButtonCount$qqrv  +
mov ecx eax +
mov edx 413h +
mov eax [ebp+var_4] +
call @Controls@TControl@Perform$qqruiii  +
jmp loc_492E3E  +
xor edx edx +
mov [ebp+var_28] edx +
mov [ebp+var_24] eax +
xor eax eax +
mov [ebp+var_20] eax +
mov eax [ebp+var_10] +
mov [ebp+var_1C] eax +
mov eax [ebp+var_4] +
call @Comctrls@TToolBar@GetButtonCount$qqrv  +
mov [ebp+var_18] eax +
lea eax [ebp+var_28] +
push eax  +
xor ecx ecx +
mov edx 42Eh +
mov eax [ebp+var_4] +
call @Controls@TControl@Perform$qqruiii  +
mov eax [ebp+var_4] +
mov eax [eax+250h] +
test eax eax +
jz loc_492E3E  +
push eax  +
call DeleteObject  +
mov eax [ebp+var_4] +
mov edx [ebp+var_10] +
mov [eax+250h] edx +
mov esp ebp +
pop ebp  +
retn   +
***
mov ebx eax +
cmp byte ptr [ebx+248h] 0 +
jz loc_492EAE  +
mov esi [ebx+22Ch] +
test esi esi +
jz loc_492E77  +
mov eax esi +
call @Imglist@TCustomImageList@GetHandle$qqrv  +
mov edx eax +
mov eax ebx +
call @Comctrls@TToolBar@SetImageList$qqrui  +
mov esi [ebx+234h] +
test esi esi +
jz loc_492E91  +
mov eax esi +
call @Imglist@TCustomImageList@GetHandle$qqrv  +
mov edx eax +
mov eax ebx +
call @Comctrls@TToolBar@SetDisabledImageList$qqrui  +
mov esi [ebx+23Ch] +
test esi esi +
jz loc_492EC6  +
mov eax esi +
call @Imglist@TCustomImageList@GetHandle$qqrv  +
mov edx eax +
mov eax ebx +
call @Comctrls@TToolBar@SetHotImageList$qqrui  +
pop esi  +
pop ebx  +
retn   +
mov eax ebx +
call @Controls@TWinControl@HandleAllocated$qqrv  +
test al al +
jz loc_492EC6  +
mov edx [ebx+22Ch] +
mov eax ebx +
call sub_492D54  +
pop esi  +
pop ebx  +
retn   +
***
mov esi edx +
mov ebx eax +
mov eax ebx +
call @Controls@TWinControl@HandleAllocated$qqrv  +
test al al +
jz loc_492EEC  +
cmp esi [ebx+22Ch] +
jnz loc_492EEC  +
mov eax ebx +
call @Comctrls@TToolBar@RecreateButtons$qqrv  +
pop esi  +
pop ebx  +
retn   +
***
mov esi edx +
mov ebx eax +
mov eax ebx +
call @Controls@TWinControl@HandleAllocated$qqrv  +
test al al +
jz loc_492F10  +
push esi  +
xor ecx ecx +
mov edx 430h +
mov eax ebx +
call @Controls@TControl@Perform$qqruiii  +
mov eax ebx +
mov edx [eax] +
call dword ptr [edx+7Ch]  +
pop esi  +
pop ebx  +
retn   +
***
mov esi edx +
mov esi edx +
mov ebx eax +
mov eax ebx +
call @Controls@TWinControl@HandleAllocated$qqrv  +
test al al +
jz loc_492F90  +
cmp esi [ebx+234h] +
jnz loc_492F90  +
mov eax ebx +
call @Comctrls@TToolBar@RecreateButtons$qqrv  +
pop esi  +
pop ebx  +
retn   +
***
mov esi edx +
mov ebx eax +
mov eax ebx +
call @Controls@TWinControl@HandleAllocated$qqrv  +
test al al +
jz loc_492FB4  +
push esi  +
xor ecx ecx +
mov edx 436h +
mov eax ebx +
call @Controls@TControl@Perform$qqruiii  +
mov eax ebx +
mov edx [eax] +
call dword ptr [edx+7Ch]  +
pop esi  +
pop ebx  +
retn   +
***
mov esi edx +
mov esi edx +
mov ebx eax +
mov eax ebx +
call @Controls@TWinControl@HandleAllocated$qqrv  +
test al al +
jz loc_493034  +
cmp esi [ebx+23Ch] +
jnz loc_493034  +
mov eax ebx +
call @Comctrls@TToolBar@RecreateButtons$qqrv  +
pop esi  +
pop ebx  +
retn   +
***
mov esi edx +
mov ebx eax +
mov eax ebx +
call @Controls@TWinControl@HandleAllocated$qqrv  +
test al al +
jz loc_493058  +
push esi  +
xor ecx ecx +
mov edx 434h +
mov eax ebx +
call @Controls@TControl@Perform$qqruiii  +
mov eax ebx +
mov edx [eax] +
call dword ptr [edx+7Ch]  +
pop esi  +
pop ebx  +
retn   +
***
mov esi edx +
cmp edx [eax+244h] +
push ecx  +
push ebx  +
push esi  +
push edi  +
mov edi edx +
mov ebx eax +
cmp edi [ebx+2DCh] +
jz loc_49323A  +
test byte ptr [ebx+50h] 1 +
jz loc_4930F8  +
mov eax ds:dword_493240 +
mov [ebx+50h] eax +
mov eax ebx +
call @Controls@TWinControl@RecreateWnd$qqrv  +
mov dl 1 +
mov eax ebx +
call @Comctrls@TToolBar@SetShowCaptions$qqro  +
cmp dword ptr [ebx+2DCh] 0 +
jz loc_49312D  +
mov eax ebx +
call @Comctrls@TToolBar@GetButtonCount$qqrv  +
mov esi eax +
dec esi  +
cmp esi 0 +
jl loc_49312D  +
mov edx esi +
mov eax ebx +
call @Comctrls@TToolBar@GetButton$qqri  +
call @System@TObject@Free$qqrv  +
dec esi  +
cmp esi 0FFFFFFFFh +
jnz loc_493119  +
mov eax [ebx+2DCh] +
test eax eax +
jz loc_49313E  +
mov edx ebx +
call @Classes@TComponent@RemoveFreeNotification$qqrp18Classes@TComponent  +
mov eax edi +
mov [ebx+2DCh] eax +
test eax eax +
jz loc_49323A  +
mov edx ebx +
call @Classes@TComponent@FreeNotification$qqrp18Classes@TComponent  +
mov eax ebx +
call @Comctrls@TToolBar@GetButtonCount$qqrv  +
mov esi eax +
mov eax [ebx+2DCh] +
mov eax [eax+34h] +
call @Menus@TMenuItem@GetCount$qqrv  +
mov edi eax +
dec edi  +
sub edi esi +
jl loc_4931FE  +
inc edi  +
mov ecx ebx +
mov dl 1 +
mov eax ds:off_484D68 +
call @Comctrls@TToolButton@$bctr$qqrp18Classes@TComponent  +
mov [ebp+var_4] eax +
xor eax eax +
push ebp  +
push offset loc_4931DF  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov dl 1 +
mov eax [ebp+var_4] +
mov ecx [eax] +
call dword ptr [ecx+5Ch]  +
mov dl 1 +
mov eax [ebp+var_4] +
call @Comctrls@TToolButton@SetGrouped$qqro  +
mov edx ebx +
mov eax [ebp+var_4] +
mov ecx [eax] +
call dword ptr [ecx+68h]  +
mov eax [ebx+2DCh] +
mov eax [eax+34h] +
mov edx esi +
call @Menus@TMenuItem@GetItem$qqri  +
push eax  +
mov edx esi +
mov eax ebx +
call @Comctrls@TToolBar@GetButton$qqri  +
pop edx  +
call @Comctrls@TToolButton@SetMenuItem$qqrp15Menus@TMenuItem  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
jmp loc_4931F6  +
jmp @System@@HandleAnyException$qqrv  +
mov eax [ebp-4] +
call @System@TObject@Free$qqrv  +
call @System@@RaiseAgain$qqrv  +
call @@DoneExcept$qqrv  +
inc esi  +
dec edi  +
jnz loc_493178  +
mov eax [ebx+2DCh] +
mov eax [eax+34h] +
call @Menus@TMenuItem@GetCount$qqrv  +
mov edi eax +
dec edi  +
test edi edi +
jl loc_49323A  +
inc edi  +
xor esi esi +
mov eax [ebx+2DCh] +
mov eax [eax+34h] +
mov edx esi +
call @Menus@TMenuItem@GetItem$qqri  +
push eax  +
mov edx esi +
mov eax ebx +
call @Comctrls@TToolBar@GetButton$qqri  +
pop edx  +
call @Comctrls@TToolButton@SetMenuItem$qqrp15Menus@TMenuItem  +
inc esi  +
dec edi  +
jnz loc_493216  +
pop edi  +
pop esi  +
pop ebx  +
pop ecx  +
pop ebp  +
retn   +
***
mov ax [ebx+1Ch] +
and ax ds:word_493288 +
mov dx ds:word_49328C +
cmp dx ax +
jz loc_493269  +
mov eax ebx +
call @Controls@TWinControl@HandleAllocated$qqrv  +
test al al +
jz loc_493283  +
mov ecx [ebx+214h] +
mov edx [ebx+210h] +
mov eax ebx +
call @Comctrls@TToolBar@CreateButtons$qqrii  +
mov eax ebx +
call @Comctrls@TToolBar@ResizeButtons$qqrv  +
pop ebx  +
retn   +
***
mov eax esi +
mov ecx [eax] +
call dword ptr [ecx-10h]  +
cmp byte ptr [esi+2C9h] 0 +
jz loc_4932B7  +
cmp byte ptr [esi+2C8h] 0 +
jz loc_4932B7  +
mov eax esi +
mov si 0FFB3h +
call @System@@CallDynaInst$qqrv  +
pop esi  +
retn   +
***
push edi  +
add esp 0FFFFFFF0h +
mov edi edx +
mov ebx eax +
cmp byte ptr [ebx+2C9h] 0 +
jz loc_49335B  +
push 0  +
xor ecx ecx +
mov edx 447h +
mov eax ebx +
call @Controls@TControl@Perform$qqruiii  +
mov esi eax +
mov ax [edi+4] +
sub ax 0Dh +
jz loc_4932FB  +
sub ax 0Eh +
jz loc_493350  +
sub ax 0Dh +
jnz loc_49335B  +
cmp esi 0FFFFFFFFh +
jle loc_493347  +
mov eax [ebx+218h] +
cmp esi [eax+8] +
jge loc_493347  +
mov edx esi +
mov eax [ebx+218h] +
call @Classes@TList@Get$qqri  +
mov esi eax +
lea ecx [esp+10h+var_8] +
mov edx 1 +
mov eax 1 +
call @Classes@Point$qqrii  +
lea edx [esp+10h+var_8] +
mov ecx esp +
mov eax esi +
call @Controls@TControl@ClientToScreen$qqrrx14Windows@TPoint  +
mov edx esi +
mov eax ebx +
mov si 0FFB1h +
call @System@@CallDynaInst$qqrv  +
cmp word ptr [edi+4] 28h +
jz loc_493364  +
jmp loc_49335B  +
mov eax ebx +
mov si 0FFB3h +
call @System@@CallDynaInst$qqrv  +
mov edx edi +
mov eax ebx +
call unknown_libname_281  +
add esp 10h +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
add esp 0FFFFFFF8h +
push ebx  +
push esi  +
push edi  +
mov [ebp+var_4] edx +
mov esi eax +
cmp dword ptr [esi+2DCh] 0 +
jnz loc_4933FD  +
mov eax [esi+218h] +
mov ebx [eax+8] +
dec ebx  +
test ebx ebx +
jl loc_4933B5  +
inc ebx  +
mov [ebp+var_8] 0 +
mov edx [ebp+var_8] +
mov eax [esi+218h] +
call @Classes@TList@Get$qqri  +
mov edx eax +
mov eax [ebp+arg_4] +
call [ebp+arg_0]  +
inc [ebp+var_8]  +
dec ebx  +
jnz loc_493399  +
mov eax esi +
call @Controls@TWinControl@GetControlCount$qqrv  +
mov ebx eax +
dec ebx  +
test ebx ebx +
jl loc_4933FD  +
inc ebx  +
mov [ebp+var_8] 0 +
mov edx [ebp+var_8] +
mov eax esi +
call @Controls@TWinControl@GetControl$qqri  +
mov edi eax +
mov eax [edi+4] +
cmp eax [ebp+var_4] +
jnz loc_4933F7  +
mov edx edi +
mov eax [esi+218h] +
call unknown_libname_419  +
inc eax  +
jnz loc_4933F7  +
mov edx edi +
mov eax [ebp+arg_4] +
call [ebp+arg_0]  +
inc [ebp+var_8]  +
dec ebx  +
jnz loc_4933CB  +
pop edi  +
pop esi  +
pop ebx  +
pop ecx  +
pop ecx  +
pop ebp  +
retn 8  +
***
push edi  +
inc dword ptr [eax+258h]  +
retn   +
***
dec dword ptr [eax+258h]  +
retn   +
***
mov ebx eax +
test byte ptr [ebx+1Ch] 1 +
jnz loc_49349A  +
mov eax ebx +
call @Controls@TWinControl@HandleAllocated$qqrv  +
test al al +
jz loc_49349A  +
push 0  +
xor ecx ecx +
mov edx 421h +
mov eax ebx +
call @Controls@TControl@Perform$qqruiii  +
cmp byte ptr [ebx+5Ch] 0 +
jz loc_49349A  +
mov eax ebx +
mov si 0FFEEh +
call @System@@CallDynaInst$qqrv  +
pop esi  +
pop ebx  +
retn   +
***
mov edx 418h +
call @Controls@TControl@Perform$qqruiii  +
retn   +
***
add esp 0FFFFFFC4h +
push ebx  +
push esi  +
push edi  +
mov [ebp+var_4] ecx +
mov edi edx +
mov esi eax +
test edi edi +
jl loc_4934D7  +
mov eax [esi+218h] +
cmp dword ptr [eax+8] 1 +
jg loc_4934D7  +
mov ebx edi +
jmp loc_4935EF  +
xor ebx ebx +
mov eax [esi+218h] +
cmp dword ptr [eax+8] 0 +
jz loc_4935EF  +
xor eax eax +
mov [ebp+var_C] eax +
xor eax eax +
mov [ebp+var_10] eax +
xor eax eax +
mov [ebp+var_14] eax +
mov [ebp+var_8] 7FFFFFFFh +
jmp loc_493585  +
cmp edi ebx +
jz loc_493581  +
mov edx ebx +
mov eax [esi+218h] +
call @Classes@TList@Get$qqri  +
mov [ebp+var_18] eax +
mov eax [ebp+var_18] +
mov edx ds:off_484D68 +
call @System@@IsClass$qqrp14System@TObjectp17System@TMetaClass  +
test al al +
jz loc_493536  +
mov eax [ebp+var_18] +
cmp byte ptr [eax+17Ch] 0 +
jnz loc_493544  +
mov eax [esi+218h] +
mov eax [eax+8] +
dec eax  +
cmp ebx eax +
jnz loc_493584  +
mov eax [ebp+var_18] +
push dword ptr [eax+44h]  +
mov eax [ebp+arg_0] +
pop edx  +
sub eax edx +
cdq   +
xor eax edx +
sub eax edx +
mov ecx eax +
cmp ecx [ebp+var_8] +
jge loc_493579  +
mov eax [ebp+var_18] +
push dword ptr [eax+44h]  +
mov eax [ebp+arg_0] +
pop edx  +
sub eax edx +
cdq   +
xor eax edx +
sub eax edx +
mov [ebp+var_8] ecx +
mov eax [ebp+var_C] +
mov [ebp+var_10] eax +
mov [ebp+var_14] ebx +
lea eax [ebx+1] +
mov [ebp+var_C] eax +
jmp loc_493584  +
mov [ebp+var_14] ebx +
inc ebx  +
cmp [ebp+var_8] 0 +
jle loc_49359A  +
mov eax [esi+218h] +
cmp ebx [eax+8] +
jl loc_493504  +
mov ebx [ebp+var_10] +
mov eax [ebp+var_14] +
sub eax ebx +
jl loc_4935C7  +
inc eax  +
mov [ebp+var_1C] eax +
cmp edi ebx +
jz loc_4935C1  +
mov edx ebx +
mov eax [esi+218h] +
call @Classes@TList@Get$qqri  +
mov eax [eax+40h] +
cmp eax [ebp+var_4] +
jge loc_4935C7  +
inc ebx  +
dec [ebp+var_1C]  +
jnz loc_4935A8  +
lea eax [edi+1] +
cmp ebx eax +
jnz loc_4935EF  +
mov eax [ebp+var_10] +
mov edx [ebp+var_14] +
lea ecx [ebp+var_3C] +
mov ah 20h +
call @System@@SetRange$qqrv  +
mov eax edi +
cmp eax 0FFh +
ja loc_4935EB  +
bt [ebp+var_3C] eax +
jnb loc_4935EF  +
mov ebx edi +
mov eax ebx +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 4  +
***
add esp 0FFFFFFF8h +
push ebx  +
push esi  +
mov ebx edx +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push eax  +
mov edx ebx +
mov eax [ebp+var_4] +
call @Comctrls@TToolBar@ButtonIndex$qqriii  +
mov [ebp+var_8] eax +
cmp ebx [ebp+var_8] +
jz loc_4936B8  +
cmp ebx [ebp+var_8] +
jge loc_49362B  +
dec [ebp+var_8]  +
mov eax [ebp+var_4] +
mov eax [eax+218h] +
mov edx ebx +
call @Classes@TList@Get$qqri  +
mov esi eax +
mov eax [ebp+var_4] +
mov eax [eax+218h] +
mov edx ebx +
call @Classes@TList@Delete$qqri  +
mov eax [ebp+var_4] +
mov eax [eax+218h] +
mov ecx esi +
mov edx [ebp+var_8] +
call @Classes@TList@Insert$qqripv  +
mov eax [ebp+var_4] +
call @Comctrls@TToolBar@BeginUpdate$qqrv  +
xor eax eax +
push ebp  +
push offset loc_4936B1  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
push 0  +
mov ecx ebx +
mov edx 416h +
mov eax [ebp+var_4] +
call @Controls@TControl@Perform$qqruiii  +
mov eax [ebp+var_8] +
push eax  +
mov ecx [ebp+var_8] +
mov edx 415h +
mov eax [ebp+var_4] +
call @Comctrls@TToolBar@UpdateItem$qqriii  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4936B8  +
mov eax [ebp+var_4] +
call @Comctrls@TToolBar@EndUpdate$qqrv  +
retn   +
jmp unknown_libname_539  +
jmp loc_4936A8  +
mov eax [ebp+var_8] +
pop esi  +
pop ebx  +
pop ecx  +
pop ecx  +
pop ebp  +
retn 4  +
***
push edi  +
push ebp  +
add esp 0FFFFFFECh +
mov edi edx +
mov ebp eax +
mov edx edi +
mov eax [ebp+218h] +
call unknown_libname_419  +
mov esi eax +
cmp esi 0FFFFFFFFh +
jz loc_49378F  +
mov eax [edi+44h] +
push eax  +
mov ecx [edi+40h] +
mov edx esi +
mov eax ebp +
call @Comctrls@TToolBar@ReorderButton$qqriii  +
cmp esi eax +
setnz bl  +
mov [esp+18h+var_18] 0 +
test bl bl +
jz loc_493719  +
mov edx edi +
mov eax [ebp+218h] +
call unknown_libname_419  +
cmp esi eax +
jle loc_493744  +
mov esi eax +
jmp loc_493744  +
lea eax [esp+18h+var_17] +
push eax  +
mov ecx esi +
mov edx 41Dh +
mov eax ebp +
call @Controls@TControl@Perform$qqruiii  +
test eax eax +
jz loc_493744  +
mov eax [edi+48h] +
mov edx [esp+18h+var_F] +
sub edx [esp+18h+var_17] +
cmp eax edx +
setnz [esp+18h+var_18]  +
mov bl [esp+18h+var_18] +
test byte ptr [ebp+1Ch] 10h +
jz loc_493761  +
mov eax [edi+4Ch] +
cmp eax [ebp+214h] +
jz loc_493761  +
mov edx [edi+4Ch] +
mov eax ebp +
call unknown_libname_368  +
jmp loc_49378F  +
test bl bl +
jz loc_493786  +
cmp [esp+18h+var_18] 0 +
jz loc_493774  +
mov edx esi +
mov eax ebp +
call @Comctrls@TToolBar@RefreshButton$qqri  +
mov eax ebp +
call @Comctrls@TToolBar@ResizeButtons$qqrv  +
xor edx edx +
mov eax ebp +
call @Comctrls@TToolBar@RepositionButtons$qqri  +
jmp loc_49378F  +
mov edx esi +
mov eax ebp +
call @Comctrls@TToolBar@RepositionButton$qqri  +
add esp 14h +
pop ebp  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov esi edx +
mov ebx eax +
cmp dword ptr [ebx+258h] 0 +
jg loc_4937D0  +
test esi esi +
jnz loc_4937B6  +
xor edx edx +
mov eax ebx +
call @Comctrls@TToolBar@RepositionButtons$qqri  +
jmp loc_4937D0  +
mov eax esi +
mov edx ds:off_484D68 +
call @System@@IsClass$qqrp14System@TObjectp17System@TMetaClass  +
test al al +
jnz loc_4937D0  +
mov edx esi +
mov eax ebx +
call @Comctrls@TToolBar@AdjustControl$qqrp17Controls@TControl  +
pop esi  +
pop ebx  +
retn   +
***
mov edi edx +
mov esi eax +
cmp byte ptr [esi+22Ah] 0 +
jnz loc_4937F3  +
mov edx edi +
mov eax esi +
call @Controls@TWinControl@WMEraseBkgnd$qqrr22Messages@TWMEraseBkgnd  +
pop edi  +
pop esi  +
retn   +
mov edx edi +
mov eax esi +
mov ecx [eax] +
call dword ptr [ecx-10h]  +
pop edi  +
pop esi  +
retn   +
***
cmp byte ptr [eax+2C9h] 0 +
jz locret_493810  +
mov dword ptr [edx+0Ch] 1 +
retn   +
***
mov ebx edx +
mov esi eax +
mov eax [esi+21Ch] +
call unknown_libname_550  +
mov edx eax +
mov ecx [ebx+4] +
dec ecx  +
mov eax [ebx+8] +
call @Sysutils@StrLCopy$qqrpcpxcui  +
call @Sysutils@StrLen$qqrpxc  +
mov [ebx+0Ch] eax +
pop esi  +
pop ebx  +
retn   +
***
mov esi edx +
mov ebx eax +
mov eax [ebx+21Ch] +
call sub_4BB610  +
mov [esi+0Ch] eax +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
mov ebx edx +
mov ebx eax +
mov eax ebx +
call @Controls@TWinControl@WMSize$qqrr16Messages@TWMSize  +
cmp byte ptr [ebx+5Ch] 0 +
jnz loc_4938CD  +
mov eax [ebx+48h] +
mov [esp+8+var_8] eax +
mov eax [ebx+4Ch] +
mov [esp+8+var_4] eax +
lea ecx [esp+8+var_4] +
mov edx esp +
mov eax ebx +
call @Comctrls@TToolBar@WrapButtons$qqrrit1  +
pop ecx  +
pop edx  +
pop ebx  +
retn   +
***
mov esi edx +
mov ebx eax +
mov eax ebx +
call @Forms@GetParentForm$qqrp17Controls@TControl  +
test eax eax +
jz loc_4938EF  +
mov edx esi +
mov ecx [eax] +
call dword ptr [ecx-14h]  +
pop esi  +
pop ebx  +
retn   +
mov edx esi +
mov eax ebx +
mov ecx [eax] +
call dword ptr [ecx-10h]  +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
add esp 0FFFFFFF0h +
mov esi edx +
mov ebx eax +
cmp byte ptr [ebx+22Ah] 0 +
jz loc_493A30  +
mov eax [esi+8] +
mov eax [eax+18h] +
and eax 3 +
cmp eax 3 +
jz loc_493A30  +
cmp dword ptr [ebx+30h] 0 +
jz loc_493A30  +
mov eax [ebx+30h] +
call @Controls@TWinControl@HandleAllocated$qqrv  +
test al al +
jz loc_493A30  +
mov edx esp +
mov eax ebx +
call @Controls@TControl@GetBoundsRect$qqrv  +
push 0FFFFFFFFh  +
lea eax [esp+14h+Rect] +
push eax  +
mov eax [ebx+30h] +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call InvalidateRect  +
mov edx esi +
mov eax ebx +
call @Controls@TWinControl@WMWindowPosChanging$qqrr24Messages@TWMWindowPosMsg  +
add esp 10h +
pop esi  +
pop ebx  +
retn   +
***
add esp 0FFFFFFE8h +
push ebx  +
push esi  +
push edi  +
mov [ebp+var_8] edx +
mov [ebp+var_4] eax +
mov eax [ebp+var_4] +
xor edx edx +
mov [eax] edx +
mov eax [ebp+var_8] +
xor edx edx +
mov [eax] edx +
mov eax [ebp+arg_0] +
mov eax [eax-4] +
mov eax [eax+244h] +
mov [ebp+var_10] eax +
xor eax eax +
mov [ebp+var_14] eax +
mov eax [ebp+arg_0] +
mov eax [eax-4] +
mov eax [eax+218h] +
mov edi [eax+8] +
dec edi  +
test edi edi +
jl loc_493C23  +
inc edi  +
xor esi esi +
mov eax [ebp+arg_0] +
mov eax [eax-4] +
mov eax [eax+218h] +
mov edx esi +
call @Classes@TList@Get$qqri  +
mov ebx eax +
mov eax [ebp+arg_0] +
mov eax [eax-4] +
test byte ptr [eax+1Ch] 10h +
jnz loc_493AB7  +
cmp byte ptr [ebx+57h] 0 +
jz loc_493C1B  +
mov eax ebx +
mov edx ds:off_484D68 +
call @System@@IsClass$qqrp14System@TObjectp17System@TMetaClass  +
test al al +
jz loc_493B02  +
mov eax [ebp+arg_0] +
mov eax [eax-4] +
mov eax [eax+218h] +
mov eax [eax+8] +
dec eax  +
cmp esi eax +
jge loc_493B02  +
mov eax [ebp+arg_0] +
cmp dword ptr [eax-8] 0 +
jz loc_493AF7  +
mov eax [ebp+arg_0] +
mov eax [eax-8] +
mov edx esi +
call unknown_libname_420  +
mov [ebp+var_9] al +
jmp loc_493B06  +
mov al [ebx+17Ch] +
mov [ebp+var_9] al +
jmp loc_493B06  +
mov [ebp+var_9] 0 +
mov eax ebx +
mov edx ds:off_484D68 +
call @System@@IsClass$qqrp14System@TObjectp17System@TMetaClass  +
test al al +
jz loc_493BC2  +
mov al [ebx+17Dh] +
add al 0FDh +
sub al 2 +
jnb loc_493BC2  +
mov eax [ebx+48h] +
mov [ebp+var_18] eax +
call sub_4868BC  +
cmp eax 40047h +
jl loc_493B58  +
mov eax [ebp+arg_0] +
mov eax [eax-4] +
cmp byte ptr [eax+229h] 0 +
jnz loc_493B68  +
call sub_4868BC  +
cmp eax 40048h +
jl loc_493B68  +
mov eax [ebp+var_18] +
add eax eax +
mov ecx 3 +
cdq   +
idiv  ecx +
mov [ebp+var_18] eax +
cmp [ebp+var_9] 0 +
jz loc_493BA2  +
mov eax [ebp+arg_0] +
mov eax [eax-4] +
mov eax [eax+218h] +
mov eax [eax+8] +
dec eax  +
cmp esi eax +
jge loc_493BA2  +
mov eax [ebp+arg_0] +
mov eax [eax-4] +
mov eax [eax+214h] +
add eax [ebp+var_14] +
add eax [ebp+var_18] +
mov edx [ebp+var_8] +
cmp eax [edx] +
jle loc_493BB4  +
mov edx [ebp+var_8] +
mov [edx] eax +
jmp loc_493BB4  +
mov eax [ebp+var_10] +
add eax [ebx+48h] +
mov edx [ebp+var_4] +
cmp eax [edx] +
jle loc_493BB4  +
mov edx [ebp+var_4] +
mov [edx] eax +
cmp [ebp+var_9] 0 +
jz loc_493BEF  +
mov eax [ebp+var_18] +
add [ebp+var_14] eax +
jmp loc_493BEF  +
mov eax [ebp+var_10] +
add eax [ebx+48h] +
mov edx [ebp+var_4] +
cmp eax [edx] +
jle loc_493BD4  +
mov edx [ebp+var_4] +
mov [edx] eax +
mov eax [ebp+arg_0] +
mov eax [eax-4] +
mov eax [eax+214h] +
add eax [ebp+var_14] +
mov edx [ebp+var_8] +
cmp eax [edx] +
jle loc_493BEF  +
mov edx [ebp+var_8] +
mov [edx] eax +
cmp [ebp+var_9] 0 +
jz loc_493C15  +
mov eax [ebp+arg_0] +
mov eax [eax-4] +
mov eax [eax+244h] +
mov [ebp+var_10] eax +
mov eax [ebp+arg_0] +
mov eax [eax-4] +
mov eax [eax+214h] +
add [ebp+var_14] eax +
jmp loc_493C1B  +
mov eax [ebx+48h] +
add [ebp+var_10] eax +
inc esi  +
dec edi  +
jnz loc_493A8C  +
mov eax [ebp+var_8] +
cmp dword ptr [eax] 0 +
jle loc_493C40  +
mov eax [ebp+arg_0] +
mov eax [eax-4] +
cmp byte ptr [eax+229h] 0 +
jnz loc_493C40  +
mov eax [ebp+var_8] +
add dword ptr [eax] 2 +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
add esp 0FFFFFFF0h +
add esp 0FFFFFFDCh +
push ebx  +
mov [ebp+var_4] edx +
lea ecx [ebp+var_24] +
or edx 0FFFFFFFFh +
or eax 0FFFFFFFFh +
call @Classes@Point$qqrii  +
lea ecx [ebp+var_1C] +
xor edx edx +
xor eax eax +
call @Classes@Point$qqrii  +
xor ebx ebx +
mov eax [ebp+arg_0] +
push eax  +
xor eax eax +
call @ComCtrls@_17757  +
pop ecx  +
mov eax [ebp+arg_0] +
push eax  +
lea edx [ebp+var_10] +
lea eax [ebp+var_14] +
call @ComCtrls@_17756  +
pop ecx  +
mov eax [ebp+arg_0] +
push eax  +
mov eax 7FFFFFFFh +
call @ComCtrls@_17757  +
pop ecx  +
mov eax [ebp+arg_0] +
push eax  +
lea edx [ebp+var_8] +
lea eax [ebp+var_C] +
call @ComCtrls@_17756  +
pop ecx  +
jmp loc_493F50  +
mov ecx [ebp+var_1C] +
mov [ebp+var_24] ecx +
mov ecx [ebp+var_18] +
mov [ebp+var_20] ecx +
mov ecx eax +
add ecx edx +
sar ecx 1 +
jns loc_493ED1  +
adc ecx 0 +
mov [ebp+var_1C] ecx +
mov eax [ebp+arg_0] +
push eax  +
mov eax ecx +
call @ComCtrls@_17757  +
pop ecx  +
mov ebx eax +
mov eax [ebp+arg_0] +
push eax  +
lea edx [ebp+var_18] +
lea eax [ebp+var_1C] +
call @ComCtrls@_17756  +
pop ecx  +
mov edx [ebp+var_4] +
mov edx [edx] +
mov eax [ebp+var_18] +
cmp edx eax +
jge loc_493F2D  +
mov eax [ebp+var_14] +
cmp eax [ebp+var_1C] +
jnz loc_493F1F  +
mov eax [ebp+var_10] +
cmp eax [ebp+var_18] +
jnz loc_493F1F  +
mov eax [ebp+arg_0] +
push eax  +
mov eax [ebp+var_C] +
call @ComCtrls@_17757  +
pop ecx  +
mov ebx eax +
jmp loc_493F5E  +
mov eax [ebp+var_1C] +
mov [ebp+var_14] eax +
mov eax [ebp+var_18] +
mov [ebp+var_10] eax +
jmp loc_493F50  +
mov edx [ebp+var_4] +
cmp eax [edx] +
jge loc_493F5E  +
mov eax [ebp+var_1C] +
mov [ebp+var_C] eax +
mov eax [ebp+var_18] +
mov [ebp+var_8] eax +
mov eax [ebp+var_24] +
cmp eax [ebp+var_1C] +
jnz loc_493F50  +
mov eax [ebp+var_20] +
cmp eax [ebp+var_18] +
jz loc_493F5E  +
mov edx [ebp+var_C] +
mov eax [ebp+var_14] +
cmp edx eax +
jg loc_493EBA  +
mov eax ebx +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
add esp 0FFFFFFF0h +
add esp 0FFFFFFC0h +
retn   +
***
mov esi edx +
mov ebx eax +
mov edx esi +
mov eax ebx +
mov ecx [eax] +
call dword ptr [ecx-10h]  +
cmp dword ptr [esi+8] 0 +
jz loc_49426E  +
mov edx [esi+4] +
mov eax ebx +
call @Comctrls@TToolBar@InsertButton$qqrp17Controls@TControl  +
pop esi  +
pop ebx  +
retn   +
mov edx [esi+4] +
mov eax ebx +
call @Comctrls@TToolBar@RemoveButton$qqrp17Controls@TControl  +
pop esi  +
pop ebx  +
retn   +
***
mov esi edx +
mov ebx eax +
cmp byte ptr [ebx+2C9h] 0 +
jz loc_4942B0  +
test byte ptr [ebx+1Ch] 10h +
jnz loc_4942B0  +
mov eax [esi+8] +
push eax  +
movzx ecx word ptr [esi+4] +
mov edx 0B006h +
mov eax ebx +
call @Controls@TControl@Perform$qqruiii  +
test eax eax +
jz loc_4942B0  +
mov dword ptr [esi+0Ch] 1 +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
mov esi edx +
mov ebx eax +
mov edx esi +
mov eax ebx +
call @Controls@TWinControl@CMEnabledChanged$qqrr17Messages@TMessage  +
mov edx esi +
mov eax ebx +
call @Controls@TWinControl@Broadcast$qqrpv  +
pop esi  +
pop ebx  +
retn   +
***
mov eax ebx +
call @Controls@TWinControl@CMColorChanged$qqrr17Messages@TMessage  +
mov eax ebx +
call @Controls@TWinControl@RecreateWnd$qqrv  +
pop ebx  +
retn   +
***
mov eax ebx +
mov ebx edx +
mov eax ebx +
call sub_47C40C  +
mov eax ebx +
call @Controls@TWinControl@RecreateWnd$qqrv  +
pop ebx  +
retn   +
***
mov eax ebx +
call @Comctrls@TToolBar@ClearTempMenu$qqrv  +
mov byte ptr [ebx+2D9h] 0 +
call sub_4868BC  +
cmp eax 50050h +
jnz loc_4943F5  +
cmp dword ptr [ebx+2D4h] 0 +
jz loc_4943F5  +
mov eax [ebx+2D4h] +
mov edx [eax] +
call dword ptr [edx+7Ch]  +
mov byte ptr [ebx+2C8h] 1 +
pop ebx  +
retn   +
***
add esp 0FFFFFFA8h +
push ebx  +
push esi  +
mov [ebp+var_A+2] edx +
mov [ebp+var_4] eax +
mov ebx [ebp+var_A+2] +
mov ebx [ebx+8] +
mov eax [ebx+8] +
cmp eax 0FFFFFD3Fh +
jg loc_494461  +
jz loc_494C2C  +
add eax 2CBh +
cmp eax 9 +
ja loc_494C52  +
jmp ds:off_494439[eax*4]  +
sub eax 0FFFFFD40h +
jz loc_494BAC  +
dec eax  +
jz loc_494B59  +
sub eax 3 +
jz loc_494ACB  +
sub eax 2B0h +
jz loc_4944C2  +
jmp loc_494C52  +
mov eax [ebp+var_A+2] +
lea eax [ebx+10h] +
push eax  +
mov ecx [ebx+0Ch] +
mov edx 417h +
mov eax [ebp+var_4] +
call @Controls@TControl@Perform$qqruiii  +
test eax eax +
jz loc_494C52  +
mov esi [ebx+1Ch] +
test esi esi +
jz loc_494C52  +
mov eax esi +
mov si 0FFC7h +
call @System@@CallDynaInst$qqrv  +
jmp loc_494C52  +
mov eax [ebp+var_A+2] +
xor edx edx +
push ebp  +
push offset loc_494A06  +
push dword ptr fs:[edx]  +
mov fs:[edx] esp +
mov eax [ebp+var_4] +
mov eax [eax+220h] +
call @Graphics@TCanvas@Lock$qqrv  +
mov eax [ebp+var_A+2] +
xor edx edx +
mov [eax+0Ch] edx +
test byte ptr [ebx+0Eh] 1 +
jnz loc_4946F4  +
lea edx [ebp+var_1A] +
mov eax [ebp+var_4] +
mov ecx [eax] +
call dword ptr [ecx+44h]  +
mov eax [ebx+0Ch] +
dec eax  +
jz loc_49451E  +
dec eax  +
jz loc_494670  +
dec eax  +
jz loc_49469C  +
dec eax  +
jz loc_4946C8  +
jmp loc_4949EA  +
xor ecx ecx +
xor edx edx +
mov eax [ebp+var_4] +
mov esi [eax] +
call dword ptr [esi+0D8h]  +
test al al +
jz loc_494606  +
xor eax eax +
push ebp  +
push offset loc_4945FF  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov edx [ebx+10h] +
mov eax [ebp+var_4] +
mov eax [eax+220h] +
call @Graphics@TCanvas@SetHandle$qqrui  +
mov eax [ebp+var_4] +
mov edx [eax+68h] +
mov eax [ebp+var_4] +
mov eax [eax+220h] +
call unknown_libname_155  +
mov eax [ebp+var_4] +
mov edx [eax+170h] +
mov eax [ebp+var_4] +
mov eax [eax+220h] +
call unknown_libname_157  +
lea edx [ebp+var_1A] +
xor ecx ecx +
mov eax [ebp+var_4] +
mov esi [eax] +
call dword ptr [esi+0C8h]  +
mov byte ptr [ebp+var_A+1] al +
cmp byte ptr [ebp+var_A+1] 0 +
jnz loc_4945B1  +
mov eax [ebp+var_A+2] +
mov dword ptr [eax+0Ch] 4 +
call @System@@TryFinallyExit$qqrv  +
call @System@@TryFinallyExit$qqrv  +
jmp loc_494C52  +
mov eax [ebp+var_4] +
mov eax [eax+220h] +
mov eax [eax+0Ch] +
mov eax [eax+18h] +
call @Graphics@ColorToRGB$qqr15Graphics@TColor  +
mov [ebx+3Ch] eax +
mov eax [ebp+var_4] +
mov eax [eax+220h] +
mov eax [eax+14h] +
call sub_45AF0C  +
call @Graphics@ColorToRGB$qqr15Graphics@TColor  +
mov [ebx+48h] eax +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_494606  +
mov eax [ebp+var_4] +
mov eax [eax+220h] +
xor edx edx +
call @Graphics@TCanvas@SetHandle$qqrui  +
retn   +
jmp unknown_libname_539  +
jmp loc_4945EE  +
xor ecx ecx +
mov dl 1 +
mov eax [ebp+var_4] +
mov ebx [eax] +
call dword ptr [ebx+0D8h]  +
test al al +
jnz loc_49462C  +
mov cl 2 +
mov dl 1 +
mov eax [ebp+var_4] +
mov ebx [eax] +
call dword ptr [ebx+0D8h]  +
test al al +
jz loc_494633  +
mov eax [ebp+var_A+2] +
or dword ptr [eax+0Ch] 20h +
mov cl 1 +
mov dl 1 +
mov eax [ebp+var_4] +
mov ebx [eax] +
call dword ptr [ebx+0D8h]  +
test al al +
jz loc_49464D  +
mov eax [ebp+var_A+2] +
or dword ptr [eax+0Ch] 10h +
mov cl 3 +
mov dl 1 +
mov eax [ebp+var_4] +
mov ebx [eax] +
call dword ptr [ebx+0D8h]  +
test al al +
jz loc_4949EA  +
mov eax [ebp+var_A+2] +
or dword ptr [eax+0Ch] 40h +
jmp loc_4949EA  +
mov cl 1 +
xor edx edx +
mov eax [ebp+var_4] +
mov ebx [eax] +
call dword ptr [ebx+0D8h]  +
test al al +
jz loc_4949EA  +
lea edx [ebp+var_1A] +
mov cl 1 +
mov eax [ebp+var_4] +
mov ebx [eax] +
call dword ptr [ebx+0C8h]  +
jmp loc_4949EA  +
mov cl 2 +
xor edx edx +
mov eax [ebp+var_4] +
mov ebx [eax] +
call dword ptr [ebx+0D8h]  +
test al al +
jz loc_4949EA  +
lea edx [ebp+var_1A] +
mov cl 2 +
mov eax [ebp+var_4] +
mov ebx [eax] +
call dword ptr [ebx+0C8h]  +
jmp loc_4949EA  +
mov cl 3 +
xor edx edx +
mov eax [ebp+var_4] +
mov ebx [eax] +
call dword ptr [ebx+0D8h]  +
test al al +
jz loc_4949EA  +
lea edx [ebp+var_1A] +
mov cl 3 +
mov eax [ebp+var_4] +
mov ebx [eax] +
call dword ptr [ebx+0C8h]  +
jmp loc_4949EA  +
mov edx [ebx+24h] +
mov eax [ebp+var_4] +
call @Comctrls@TToolBar@GetButton$qqri  +
mov esi eax +
test esi esi +
jnz loc_49470F  +
call @System@@TryFinallyExit$qqrv  +
jmp loc_494C52  +
mov eax [ebx+0Ch] +
sub eax 10001h +
jz loc_494733  +
dec eax  +
jz loc_494995  +
dec eax  +
jz loc_4949B2  +
dec eax  +
jz loc_4949CF  +
jmp loc_4949EA  +
test dword ptr [ebx+0Ch] 10002h +
jz loc_49478C  +
mov eax [ebp+var_4] +
cmp dword ptr [eax+2E8h] 0 +
jz loc_49478C  +
mov eax [ebp+var_4] +
cmp dword ptr [eax+2ECh] 0 +
jz loc_49478C  +
mov eax [ebp+var_4] +
mov eax [eax+2ECh] +
push eax  +
mov eax [ebx+10h] +
push eax  +
call SelectObject  +
mov eax [ebp+var_4] +
mov eax [eax+2E8h] +
push eax  +
call DeleteObject  +
mov eax [ebp+var_4] +
xor edx edx +
mov [eax+2E8h] edx +
mov eax [ebp+var_4] +
xor edx edx +
mov [eax+2ECh] edx +
xor edx edx +
push ebp  +
push offset loc_49498E  +
push dword ptr fs:[edx]  +
mov fs:[edx] esp +
mov edx [ebx+10h] +
mov eax [ebp+var_4] +
mov eax [eax+220h] +
call @Graphics@TCanvas@SetHandle$qqrui  +
mov eax [ebp+var_4] +
mov edx [eax+68h] +
mov eax [ebp+var_4] +
mov eax [eax+220h] +
call unknown_libname_155  +
mov eax [ebp+var_4] +
mov edx [eax+170h] +
mov eax [ebp+var_4] +
mov eax [eax+220h] +
call unknown_libname_157  +
mov eax [ebp+var_4] +
mov eax [eax+220h] +
mov edx [eax+0Ch] +
mov ecx [ebp+var_4] +
mov [edx+0Ch] ecx +
mov dword ptr [edx+8] offset @Comctrls@TToolBar@CanvasChanged$qqrp14System@TObject +
mov eax [eax+14h] +
mov edx [ebp+var_4] +
mov [eax+0Ch] edx +
mov dword ptr [eax+8] offset @Comctrls@TToolBar@CanvasChanged$qqrp14System@TObject +
mov eax [ebp+var_4] +
mov byte ptr [eax+224h] 0 +
mov al ds:byte_494C58 +
mov byte ptr [ebp+var_A] al +
push 0  +
lea eax [ebp+var_A] +
push eax  +
mov cx [ebx+28h] +
mov edx esi +
mov eax [ebp+var_4] +
mov esi [eax] +
call dword ptr [esi+0CCh]  +
mov byte ptr [ebp+var_A+1] al +
test byte ptr [ebp+var_A] 1 +
jz loc_49483B  +
mov eax [ebp+var_A+2] +
or dword ptr [eax+0Ch] 10000h +
test byte ptr [ebp+var_A] 2 +
jz loc_49484B  +
mov eax [ebp+var_A+2] +
or dword ptr [eax+0Ch] 20000h +
test byte ptr [ebp+var_A] 4 +
jz loc_49485B  +
mov eax [ebp+var_A+2] +
or dword ptr [eax+0Ch] 40000h +
test byte ptr [ebp+var_A] 8 +
jz loc_49486B  +
mov eax [ebp+var_A+2] +
or dword ptr [eax+0Ch] 80000h +
test byte ptr [ebp+var_A] 10h +
jz loc_49487B  +
mov eax [ebp+var_A+2] +
or dword ptr [eax+0Ch] 100000h +
mov eax [ebp+var_4] +
mov eax [eax+220h] +
mov eax [eax+0Ch] +
mov eax [eax+18h] +
call @Graphics@ColorToRGB$qqr15Graphics@TColor  +
mov [ebx+3Ch] eax +
mov eax [ebp+var_4] +
mov eax [eax+220h] +
mov eax [eax+14h] +
call sub_45AF0C  +
call @Graphics@ColorToRGB$qqr15Graphics@TColor  +
mov [ebx+48h] eax +
cmp byte ptr [ebp+var_A+1] 0 +
jnz loc_4948C7  +
mov eax [ebp+var_A+2] +
or dword ptr [eax+0Ch] 4 +
call @System@@TryFinallyExit$qqrv  +
call @System@@TryFinallyExit$qqrv  +
jmp loc_494C52  +
mov eax [ebp+var_4] +
cmp byte ptr [eax+224h] 0 +
jz loc_494970  +
mov eax [ebp+var_4] +
mov byte ptr [eax+224h] 0 +
mov eax [ebp+var_4] +
mov esi [eax+220h] +
mov eax [esi+0Ch] +
xor edx edx +
mov [eax+8] edx +
mov [eax+0Ch] edx +
mov eax [esi+14h] +
xor edx edx +
mov [eax+8] edx +
mov [eax+0Ch] edx +
lea eax [ebp+var_56] +
push eax  +
push 3Ch  +
mov eax [esi+0Ch] +
call @Graphics@TFont@GetHandle$qqrv  +
push eax  +
call GetObjectA  +
test eax eax +
jz loc_494956  +
mov eax [ebp+var_4] +
mov eax [eax+220h] +
xor edx edx +
call @Graphics@TCanvas@SetHandle$qqrui  +
lea eax [ebp+var_56] +
push eax  +
call CreateFontIndirectA  +
mov esi eax +
mov eax [ebp+var_4] +
mov [eax+2E8h] esi +
push esi  +
mov eax [ebx+10h] +
push eax  +
call SelectObject  +
mov edx [ebp+var_4] +
mov [edx+2ECh] eax +
mov eax [ebp+var_A+2] +
or dword ptr [eax+0Ch] 2 +
mov cl 1 +
mov dl 1 +
mov eax [ebp+var_4] +
mov ebx [eax] +
call dword ptr [ebx+0D8h]  +
test al al +
jz loc_494970  +
mov eax [ebp+var_A+2] +
or dword ptr [eax+0Ch] 10h +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4949EA  +
mov eax [ebp+var_4] +
mov eax [eax+220h] +
xor edx edx +
call @Graphics@TCanvas@SetHandle$qqrui  +
retn   +
jmp unknown_libname_539  +
jmp loc_49497D  +
test esi esi +
jz loc_4949EA  +
push 1  +
lea eax [ebp+var_A] +
push eax  +
mov cx [ebx+28h] +
mov edx esi +
mov eax [ebp+var_4] +
mov ebx [eax] +
call dword ptr [ebx+0CCh]  +
jmp loc_4949EA  +
test esi esi +
jz loc_4949EA  +
push 2  +
lea eax [ebp+var_A] +
push eax  +
mov cx [ebx+28h] +
mov edx esi +
mov eax [ebp+var_4] +
mov ebx [eax] +
call dword ptr [ebx+0CCh]  +
jmp loc_4949EA  +
test esi esi +
jz loc_4949EA  +
push 3  +
lea eax [ebp+var_A] +
push eax  +
mov cx [ebx+28h] +
mov edx esi +
mov eax [ebp+var_4] +
mov ebx [eax] +
call dword ptr [ebx+0CCh]  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_494C52  +
mov eax [ebp+var_4] +
mov eax [eax+220h] +
call @Graphics@TCanvas@Unlock$qqrv  +
retn   +
jmp unknown_libname_539  +
jmp loc_4949F7  +
mov eax [ebp+var_A+2] +
mov edx [ebx+0Ch] +
mov eax [ebp+var_4] +
mov ecx [eax] +
call dword ptr [ecx+0D0h]  +
and eax 7Fh +
mov edx [ebp+var_A+2] +
mov [edx+0Ch] eax +
mov edx [ebx+1Ch] +
mov eax [ebp+var_4] +
mov eax [eax+218h] +
call unknown_libname_419  +
test eax eax +
jge loc_494A52  +
mov eax [ebx+1Ch] +
mov edx ds:off_484D68 +
call @System@@IsClass$qqrp14System@TObjectp17System@TMetaClass  +
test al al +
jnz loc_494C52  +
cmp dword ptr [ebx+1Ch] 0 +
jnz loc_494C52  +
xor eax eax +
mov al [ebx+19h] +
cmp ax word_4E6942 +
jnz loc_494C52  +
mov eax [ebp+var_4] +
mov ecx [eax+4] +
mov dl 1 +
mov eax ds:off_484D68 +
call @Comctrls@TToolButton@$bctr$qqrp18Classes@TComponent  +
mov esi eax +
mov dl 3 +
mov eax esi +
call @Comctrls@TToolButton@SetStyle$qqr25Comctrls@TToolButtonStyle  +
mov edx [ebx+0Ch] +
mov eax [ebp+var_4] +
mov eax [eax+218h] +
mov ecx esi +
call @Classes@TList@Insert$qqripv  +
mov eax [ebp+var_4] +
inc dword ptr [eax+260h]  +
jmp loc_494C52  +
mov eax [ebp+var_A+2] +
mov edx [ebx+0Ch] +
mov eax [ebp+var_4] +
mov ecx [eax] +
call dword ptr [ecx+0D4h]  +
and eax 7Fh +
mov edx [ebp+var_A+2] +
mov [edx+0Ch] eax +
jmp loc_494C52  +
mov eax [ebp+var_4] +
cmp byte ptr [eax+226h] 0 +
jz loc_494C52  +
mov eax [ebp+var_A+2] +
mov edx ebx +
mov eax [ebp+var_4] +
call @Comctrls@TToolBar@DoGetButton$qqrp13tagNMTOOLBARA  +
and eax 7Fh +
mov edx [ebp+var_A+2] +
mov [edx+0Ch] eax +
jmp loc_494C52  +
mov eax [ebp+var_4] +
cmp byte ptr [eax+226h] 0 +
jz loc_494C52  +
mov eax [ebp+var_4] +
cmp byte ptr [eax+254h] 0 +
jnz loc_494C52  +
mov eax [ebp+var_4] +
cmp word ptr [eax+2AAh] 0 +
jz loc_494C52  +
mov eax [ebp+var_A+2] +
mov eax [eax+8] +
mov edx [eax+0Ch] +
mov eax [ebp+var_4] +
mov eax [eax+218h] +
call @Classes@TList@Get$qqri  +
mov esi eax +
mov ebx [ebp+var_4] +
mov ecx esi +
mov edx [ebp+var_4] +
mov eax [ebx+2ACh] +
call dword ptr [ebx+2A8h]  +
jmp loc_494C52  +
mov eax [ebp+var_4] +
mov byte ptr [eax+226h] 1 +
mov eax [ebp+var_4] +
xor edx edx +
mov [eax+260h] edx +
mov eax [ebp+var_4] +
cmp word ptr [eax+2BAh] 0 +
jz loc_494B8D  +
mov ebx [ebp+var_4] +
mov edx [ebp+var_4] +
mov eax [ebx+2BCh] +
call dword ptr [ebx+2B8h]  +
mov eax [ebp+var_4] +
cmp byte ptr [eax+254h] 0 +
jnz loc_494C52  +
mov dl 1 +
mov eax [ebp+var_4] +
call @Comctrls@TToolBar@SaveButtons$qqro  +
jmp loc_494C52  +
mov eax [ebp+var_4] +
cmp byte ptr [eax+254h] 0 +
jnz loc_494BCC  +
mov eax [ebp+var_4] +
call @Comctrls@TToolBar@RecreateButtonsFromToolbar$qqrv  +
mov eax [ebp+var_4] +
mov byte ptr [eax+226h] 0 +
jmp loc_494BEB  +
mov eax [ebp+var_4] +
cmp word ptr [eax+2C2h] 0 +
jz loc_494BEB  +
mov ebx [ebp+var_4] +
mov edx [ebp+var_4] +
mov eax [ebx+2C4h] +
call dword ptr [ebx+2C0h]  +
mov eax [ebp+var_4] +
mov byte ptr [eax+254h] 0 +
jmp loc_494C52  +
mov eax [ebp+var_4] +
cmp byte ptr [eax+226h] 0 +
jnz loc_494C0B  +
mov eax [ebp+var_4] +
call @Comctrls@TToolBar@RecreateButtonsFromToolbar$qqrv  +
mov eax [ebp+var_4] +
cmp word ptr [eax+2A2h] 0 +
jz loc_494C52  +
mov ebx [ebp+var_4] +
mov edx [ebp+var_4] +
mov eax [ebx+2A4h] +
call dword ptr [ebx+2A0h]  +
jmp loc_494C52  +
mov eax [ebp+var_4] +
mov byte ptr [eax+254h] 1 +
xor edx edx +
mov eax [ebp+var_4] +
call @Comctrls@TToolBar@SaveButtons$qqro  +
mov eax [ebp+var_4] +
call @Comctrls@TToolBar@RecreateButtonsFromToolbar$qqrv  +
mov eax [ebp+var_4] +
mov byte ptr [eax+254h] 0 +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
push edi  +
add esp 0FFFFFFF8h +
push ebx  +
push esi  +
mov ebx eax +
mov eax [ebp+arg_0] +
mov eax [eax-4] +
call @Controls@TWinControl@GetHandle$qqrv  +
mov esi eax +
call GetCapture  +
cmp esi eax +
jnz loc_494D73  +
call @Controls@GetCaptureControl$qqrv  +
mov edx [ebp+arg_0] +
mov [edx-8] eax +
mov eax [ebp+arg_0] +
cmp dword ptr [eax-8] 0 +
jz loc_494D7B  +
mov eax [ebp+arg_0] +
mov eax [eax-8] +
mov eax [eax+30h] +
mov edx [ebp+arg_0] +
cmp eax [edx-4] +
jz loc_494D7B  +
mov eax [ebp+arg_0] +
xor edx edx +
mov [eax-8] edx +
jmp loc_494D7B  +
mov eax [ebp+arg_0] +
xor edx edx +
mov [eax-8] edx +
push 0  +
lea edx [ebp+var_8] +
mov eax [ebx+8] +
call unknown_libname_382  +
lea edx [ebp+var_8] +
mov eax [ebp+arg_0] +
mov eax [eax-4] +
xor ecx ecx +
call @Controls@TWinControl@ControlAtPos$qqrrx12Types@TPointoo  +
mov edx [ebp+arg_0] +
mov [edx-0Ch] eax +
mov eax [ebp+arg_0] +
cmp dword ptr [eax-0Ch] 0 +
jz loc_494DCB  +
mov eax [ebp+arg_0] +
mov eax [eax-0Ch] +
mov edx ds:off_484D68 +
call @System@@IsClass$qqrp14System@TObjectp17System@TMetaClass  +
test al al +
jz loc_494DCB  +
mov eax [ebp+arg_0] +
mov eax [eax-0Ch] +
call unknown_libname_273  +
test al al +
jz loc_494DCF  +
xor eax eax +
jmp loc_494DD1  +
mov al 1 +
pop esi  +
pop ebx  +
pop ecx  +
pop ecx  +
pop ebp  +
retn   +
***
add esp 0FFFFFFD4h +
push ebx  +
mov ebx eax +
lea eax [ebp+lParam] +
xor ecx ecx +
mov edx 2Ch +
call @System@@FillChar$qqrv  +
mov eax [ebp+arg_0] +
mov eax [eax-4] +
call @Controls@TWinControl@GetHandle$qqrv  +
mov [ebp+lParam] eax +
mov eax [ebp+arg_0] +
mov eax [eax-4] +
call @Controls@TWinControl@GetHandle$qqrv  +
mov [ebp+var_28] eax +
mov [ebp+var_24] 0FFFFFD3Ah +
mov eax ebx +
call @Comctrls@TToolButton@GetIndex$qqrv  +
mov [ebp+var_20] eax +
lea eax [ebp+lParam] +
push eax  +
mov eax [ebp+arg_0] +
mov eax [eax-4] +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
push 4Eh  +
mov eax [ebp+arg_0] +
mov eax [eax-4] +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call SendMessageA  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
add esp 0FFFFFFD4h +
mov [ebp+var_10] edx +
mov [ebp+var_4] eax +
mov eax [ebp+var_4] +
test byte ptr [eax+1Ch] 10h +
jnz loc_495073  +
mov eax [ebp+var_10] +
mov eax [eax] +
sub eax 200h +
jz loc_494E83  +
dec eax  +
jz loc_494F49  +
dec eax  +
jz loc_494EBE  +
dec eax  +
jz loc_494F49  +
jmp loc_495073  +
push ebp  +
mov eax [ebp+var_10] +
call @ComCtrls@_17775  +
pop ecx  +
test al al +
jz loc_494EAE  +
mov eax [ebp+var_C] +
cmp byte ptr [eax+5Dh] 1 +
jz loc_495073  +
mov edx [ebp+var_10] +
mov eax [ebp+var_4] +
mov ecx [eax] +
call dword ptr [ecx-10h]  +
jmp loc_495073  +
mov edx [ebp+var_10] +
mov eax [ebp+var_4] +
mov ecx [eax] +
call dword ptr [ecx-10h]  +
jmp loc_495073  +
push ebp  +
mov eax [ebp+var_10] +
call @ComCtrls@_17775  +
pop ecx  +
test al al +
jz loc_495073  +
mov edx [ebp+var_10] +
mov eax [ebp+var_4] +
mov ecx [eax] +
call dword ptr [ecx-10h]  +
mov eax [ebp+var_8] +
cmp eax [ebp+var_C] +
jnz loc_494F1E  +
mov eax [ebp+var_C] +
cmp byte ptr [eax+16Ah] 0 +
jz loc_494F11  +
cmp byte ptr [eax+16Bh] 0 +
jz loc_494F11  +
cmp byte ptr [eax+168h] 0 +
jz loc_494F11  +
cmp byte ptr [eax+17Dh] 1 +
jnz loc_494F11  +
xor edx edx +
call @Comctrls@TToolButton@SetDown$qqro  +
mov eax [ebp+var_4] +
call @Comctrls@TToolBar@UpdateButtonStates$qqrv  +
jmp loc_495073  +
mov eax [ebp+var_8] +
mov edx ds:off_484D68 +
call @System@@IsClass$qqrp14System@TObjectp17System@TMetaClass  +
test al al +
jnz loc_49507E  +
mov eax [ebp+var_C] +
cmp byte ptr [eax+17Dh] 2 +
jz loc_49507E  +
jmp loc_495073  +
push ebp  +
mov eax [ebp+var_10] +
call @ComCtrls@_17775  +
pop ecx  +
test al al +
jz loc_495073  +
mov eax [ebp+var_4] +
cmp byte ptr [eax+2C9h] 0 +
jz loc_494F7D  +
mov eax [ebp+var_4] +
call @Controls@TControl@GetMouseCapture$qqrv  +
test al al +
jz loc_494F7D  +
mov dl 1 +
mov eax [ebp+var_C] +
call @Controls@TControl@SetMouseCapture$qqro  +
mov eax [ebp+var_C] +
cmp byte ptr [eax+17Dh] 2 +
jnz loc_494FAF  +
call sub_4868BC  +
cmp eax 40047h +
jl loc_494FBA  +
mov eax [ebp+var_C] +
mov eax [eax+40h] +
mov edx [ebp+var_4] +
add eax [edx+210h] +
mov edx [ebp+var_10] +
movsx edx word ptr [edx+8] +
cmp eax edx +
jle loc_494FBA  +
mov edx [ebp+var_10] +
mov eax [ebp+var_4] +
call @Controls@TWinControl@WndProc$qqrr17Messages@TMessage  +
mov eax [ebp+var_C] +
call unknown_libname_273  +
test al al +
jnz loc_494FD1  +
mov edx [ebp+var_10] +
mov eax [ebp+var_4] +
mov ecx [eax] +
call dword ptr [ecx-10h]  +
mov edx [ebp+var_C] +
cmp byte ptr [edx+17Dh] 2 +
jz loc_49507E  +
mov eax [ebp+var_C] +
cmp dword ptr [eax+178h] 0 +
jnz loc_494FFA  +
cmp dword ptr [eax+174h] 0 +
jz loc_49507E  +
xor eax eax +
push ebp  +
push offset loc_49506C  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
push ebp  +
mov eax [ebp+var_C] +
call unknown_libname_574  +
pop ecx  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_49507E  +
xor eax eax +
mov [ebp-28h] eax +
push 1  +
push 201h  +
push 201h  +
mov eax [ebp+var_4] +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
lea eax [ebp+nExitCode] +
push eax  +
call PeekMessageA  +
test eax eax +
jz loc_495057  +
cmp dword ptr [ebp-28h] 12h +
jnz loc_495057  +
mov eax [ebp-24h] +
push eax  +
call PostQuitMessage  +
jmp locret_49506B  +
mov eax [ebp+var_10] +
mov dword ptr [eax] 202h +
mov edx [ebp+var_10] +
mov eax [ebp+var_4] +
mov ecx [eax] +
call dword ptr [ecx-14h]  +
retn   +
jmp unknown_libname_539  +
jmp loc_49501F  +
mov edx [ebp+var_10] +
mov eax [ebp+var_4] +
call @Controls@TWinControl@WndProc$qqrr17Messages@TMessage  +
mov esp ebp +
pop ebp  +
retn   +
***
add esp 0FFFFFFF4h +
push ebx  +
push esi  +
push edi  +
xor ecx ecx +
mov [ebp+var_C] ecx +
mov [ebp+var_6] dx +
mov [ebp+var_4] eax +
xor eax eax +
push ebp  +
push offset loc_495137  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov eax [ebp+var_4] +
mov eax [eax+218h] +
mov esi [eax+8] +
dec esi  +
test esi esi +
jl loc_49511F  +
inc esi  +
xor ebx ebx +
mov eax [ebp+var_4] +
mov eax [eax+218h] +
mov edx ebx +
call @Classes@TList@Get$qqri  +
mov edx ds:off_484D68 +
call @System@@IsClass$qqrp14System@TObjectp17System@TMetaClass  +
test al al +
jz loc_49511B  +
mov eax [ebp+var_4] +
mov eax [eax+218h] +
mov edx ebx +
call @Classes@TList@Get$qqri  +
mov edi eax +
cmp byte ptr [edi+57h] 0 +
jz loc_49511B  +
mov eax edi +
mov edx [eax] +
call dword ptr [edx+50h]  +
test al al +
jz loc_49511B  +
lea edx [ebp+var_C] +
mov eax edi +
call @TControl@GetText$qqrv  +
mov edx [ebp+var_C] +
mov ax [ebp+var_6] +
call @Forms@IsAccel$qqrusx17System@AnsiString  +
test al al +
jnz loc_495121  +
inc ebx  +
dec esi  +
jnz loc_4950BF  +
xor edi edi +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_49513E  +
lea eax [ebp+var_C] +
call unknown_libname_540  +
retn   +
jmp unknown_libname_539  +
jmp loc_49512E  +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
test cl cl +
jnz loc_4951A4  +
cmp dl 1 +
jnz loc_49516D  +
cmp word ptr [eax+282h] 0 +
jnz loc_495169  +
cmp word ptr [eax+272h] 0 +
jnz loc_495169  +
xor eax eax +
jmp locret_4951D8  +
mov al 1 +
jmp locret_4951D8  +
test dl dl +
jnz loc_4951A1  +
cmp word ptr [eax+27Ah] 0 +
jnz loc_49519D  +
cmp word ptr [eax+26Ah] 0 +
jnz loc_49519D  +
cmp word ptr [eax+282h] 0 +
jnz loc_49519D  +
cmp word ptr [eax+272h] 0 +
jnz loc_49519D  +
xor eax eax +
jmp locret_4951D8  +
mov al 1 +
jmp locret_4951D8  +
xor eax eax +
retn   +
cmp dl 1 +
jnz loc_4951B6  +
cmp word ptr [eax+272h] 0 +
setnz al  +
jmp locret_4951D8  +
test dl dl +
jnz loc_4951D6  +
cmp word ptr [eax+26Ah] 0 +
jnz loc_4951D2  +
cmp word ptr [eax+272h] 0 +
jnz loc_4951D2  +
xor eax eax +
jmp locret_4951D8  +
mov al 1 +
jmp locret_4951D8  +
xor eax eax +
retn   +
***
push edi  +
push ecx  +
mov ebx ecx +
mov edi edx +
mov esi eax +
mov [esp+1+var_1] 1 +
test bl bl +
jnz loc_495209  +
cmp word ptr [esi+27Ah] 0 +
jz loc_495209  +
push esp  +
mov ecx edi +
mov edx esi +
mov eax [esi+27Ch] +
call dword ptr [esi+278h]  +
cmp word ptr [esi+26Ah] 0 +
jz loc_495229  +
push ebx  +
lea eax [esp+5+var_1] +
push eax  +
mov ecx edi +
mov edx esi +
mov eax [esi+26Ch] +
call dword ptr [esi+268h]  +
mov al [esp+1+var_1] +
pop edx  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
add esp 0FFFFFFF8h +
mov byte ptr [eax+224h] 1 +
add esp 0FFFFFFF8h +
push ebx  +
push esi  +
push edi  +
mov ebx eax +
mov edi dword_4F189C +
test edi edi +
jz loc_495350  +
mov eax dword_4F18A4 +
mov [ebp+var_4] eax +
mov esi [ebp+var_4] +
mov eax edi +
call @Comctrls@TToolBar@GetButtonCount$qqrv  +
mov [ebp+var_8] eax +
test bl bl +
jz loc_49531B  +
mov eax [ebp+var_8] +
dec eax  +
cmp esi eax +
jnz loc_4952EE  +
xor esi esi +
jmp loc_4952EF  +
inc esi  +
mov edx esi +
mov eax edi +
call @Comctrls@TToolBar@GetButton$qqri  +
mov ebx eax +
cmp byte ptr [ebx+57h] 0 +
jz loc_495314  +
mov eax ebx +
mov edx [eax] +
call dword ptr [edx+50h]  +
test al al +
jz loc_495314  +
cmp byte ptr [ebx+16Bh] 0 +
jnz loc_495352  +
cmp esi [ebp+var_4] +
jnz loc_4952E2  +
jmp loc_495350  +
test esi esi +
jnz loc_495325  +
mov esi [ebp+var_8] +
dec esi  +
jmp loc_495326  +
dec esi  +
mov edx esi +
mov eax edi +
call @Comctrls@TToolBar@GetButton$qqri  +
mov ebx eax +
cmp byte ptr [ebx+57h] 0 +
jz loc_49534B  +
mov eax ebx +
mov edx [eax] +
call dword ptr [edx+50h]  +
test al al +
jz loc_49534B  +
cmp byte ptr [ebx+16Bh] 0 +
jnz loc_495352  +
cmp esi [ebp+var_4] +
jnz loc_49531B  +
xor ebx ebx +
mov eax ebx +
pop edi  +
pop esi  +
pop ebx  +
pop ecx  +
pop ecx  +
pop ebp  +
retn   +
***
add esp 0FFFFFFE8h +
mov byte_4F18B4 0 +
push offset stru_4F18AC  +
call GetCursorPos  +
cmp dword_4F1898 0 +
jnz locret_495664  +
call GetCurrentThreadId  +
push eax  +
push 0  +
mov eax offset @ComCtrls@_17788 +
push eax  +
push 0FFFFFFFFh  +
call SetWindowsHookExA  +
mov dword_4F1898 eax +
retn   +
***
cmp dword_4F1898 0 +
jz loc_49567C  +
mov eax dword_4F1898 +
push eax  +
call UnhookWindowsHookEx  +
xor eax eax +
mov dword_4F1898 eax +
xor eax eax +
mov dword_4F18A8 eax +
xor eax eax +
mov dword_4F189C eax +
mov dword_4F18A4 0FFFFFFFFh +
mov byte_4E6970 0 +
retn   +
***
push esi  +
push edi  +
mov edi [ebp+arg_8] +
cmp [ebp+nCode] 0 +
jnz loc_495715  +
mov eax [edi+4] +
cmp eax 0B001h +
jnz loc_4956CC  +
mov eax dword_4F18A0 +
mov si 0FFB3h +
call @System@@CallDynaInst$qqrv  +
jmp loc_495715  +
cmp eax 111h +
jnz loc_4956DA  +
call unknown_libname_374  +
jmp loc_495715  +
cmp dword_4F1898 0 +
jnz loc_495715  +
mov eax [edi+4] +
cmp eax 102h +
jz loc_495709  +
cmp eax 100h +
jz loc_495709  +
cmp eax 101h +
jz loc_495709  +
cmp eax 104h +
jz loc_495709  +
cmp eax 105h +
jnz loc_495715  +
mov eax dword_4F18A0 +
call @Controls@TWinControl@GetHandle$qqrv  +
mov [edi] eax +
push edi  +
mov eax [ebp+wParam] +
push eax  +
mov eax [ebp+nCode] +
push eax  +
mov eax dword_4F18B8 +
push eax  +
call CallNextHookEx  +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
cmp dword_4F18B8 0 +
cmp dword_4F18B8 0 +
jz loc_495768  +
mov eax dword_4F18B8 +
push eax  +
call UnhookWindowsHookEx  +
xor eax eax +
mov dword_4F18B8 eax +
xor eax eax +
mov dword_4F18A0 eax +
retn   +
***
push edi  +
mov ebx eax +
cmp dword ptr [ebx+2D0h] 0 +
jz loc_49581F  +
cmp dword ptr [ebx+2D4h] 0 +
jz loc_49581F  +
mov eax [ebx+2D4h] +
cmp dword ptr [eax+174h] 0 +
jz loc_49581F  +
cmp dword ptr [ebx+2CCh] 0 +
jz loc_49581F  +
mov eax [ebx+2CCh] +
mov eax [eax+34h] +
call @Menus@TMenuItem@GetCount$qqrv  +
mov esi eax +
dec esi  +
cmp esi 0 +
jl loc_4957FC  +
mov eax [ebx+2CCh] +
mov eax [eax+34h] +
mov edx esi +
call @Menus@TMenuItem@GetItem$qqri  +
mov edi eax +
mov eax [ebx+2CCh] +
mov eax [eax+34h] +
mov edx esi +
call @Menus@TMenuItem@Delete$qqri  +
mov ecx edi +
xor edx edx +
mov eax [ebx+2D0h] +
call @Menus@TMenuItem@Insert$qqrip15Menus@TMenuItem  +
dec esi  +
cmp esi 0FFFFFFFFh +
jnz loc_4957C5  +
mov eax [ebx+2CCh] +
call @System@TObject@Free$qqrv  +
xor eax eax +
mov [ebx+2CCh] eax +
xor eax eax +
mov [ebx+2D4h] eax +
xor eax eax +
mov [ebx+2D0h] eax +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
add esp 0FFFFFFE4h +
push ebx  +
push esi  +
mov [ebp+var_8] edx +
mov [ebp+var_4] eax +
mov [ebp+var_9] 0 +
cmp [ebp+var_8] 0 +
jz loc_495B2C  +
mov eax [ebp+var_4] +
mov byte ptr [eax+2C8h] 0 +
xor edx edx +
push ebp  +
push offset loc_495B25  +
push dword ptr fs:[edx]  +
mov fs:[edx] esp +
mov eax [ebp+var_8] +
mov eax [eax+178h] +
test eax eax +
jz loc_495873  +
mov edx [ebp+var_4] +
mov [edx+2CCh] eax +
jmp loc_495980  +
mov eax [ebp+var_8] +
mov eax [eax+174h] +
test eax eax +
jz loc_495976  +
mov edx [eax] +
call dword ptr [edx+44h]  +
mov eax [ebp+var_4] +
call @Comctrls@TToolBar@ClearTempMenu$qqrv  +
mov ecx [ebp+var_4] +
mov dl 1 +
mov eax ds:off_451800 +
call @Menus@TPopupMenu@$bctr$qqrp18Classes@TComponent  +
mov edx [ebp+var_4] +
mov [edx+2CCh] eax +
mov eax [ebp+var_8] +
mov eax [eax+174h] +
call @Menus@TMenuItem@GetParentMenu$qqrv  +
test eax eax +
jz loc_4958CC  +
mov dl [eax+30h] +
mov eax [ebp+var_4] +
mov eax [eax+2CCh] +
call @Menus@TMenu@SetBiDiMode$qqr17Classes@TBiDiMode  +
mov eax [ebp+var_8] +
mov eax [eax+174h] +
mov edx [eax+54h] +
mov eax [ebp+var_4] +
mov eax [eax+2CCh] +
call @Menus@TPopupMenu@SetHelpContext$qqri  +
mov eax [ebp+var_4] +
mov eax [eax+2CCh] +
mov byte ptr [eax+68h] 1 +
mov eax [ebp+var_8] +
mov eax [eax+174h] +
call @Menus@TMenuItem@GetParentMenu$qqrv  +
test eax eax +
jz loc_495916  +
mov edx [eax+48h] +
mov eax [ebp+var_4] +
mov eax [eax+2CCh] +
call @Menus@TMenu@SetImages$qqrp24Imglist@TCustomImageList  +
mov eax [ebp+var_8] +
mov ebx [eax+174h] +
mov eax [ebp+var_4] +
mov [eax+2D0h] ebx +
mov eax ebx +
call @Menus@TMenuItem@GetCount$qqrv  +
dec eax  +
cmp eax 0 +
jl loc_495980  +
mov ebx eax +
mov eax [ebp+var_4] +
mov eax [eax+2D0h] +
mov edx ebx +
call @Menus@TMenuItem@GetItem$qqri  +
mov esi eax +
mov eax [ebp+var_4] +
mov eax [eax+2D0h] +
mov edx ebx +
call @Menus@TMenuItem@Delete$qqri  +
mov eax [ebp+var_4] +
mov eax [eax+2CCh] +
mov eax [eax+34h] +
mov ecx esi +
xor edx edx +
call @Menus@TMenuItem@Insert$qqrip15Menus@TMenuItem  +
dec ebx  +
cmp ebx 0FFFFFFFFh +
jnz loc_495937  +
jmp loc_495980  +
call @System@@TryFinallyExit$qqrv  +
jmp loc_495B2C  +
xor edx edx +
mov eax [ebp+var_4] +
call @Controls@TControl@SendCancelMode$qqrp17Controls@TControl  +
mov eax [ebp+var_4] +
mov eax [eax+2CCh] +
mov edx [ebp+var_4] +
mov [eax+64h] edx +
mov eax [ebp+var_8] +
cmp byte ptr [eax+16Bh] 0 +
jnz loc_4959B5  +
mov eax [ebp+var_8] +
cmp dword ptr [eax+174h] 0 +
jnz loc_4959B5  +
xor eax eax +
jmp loc_4959B7  +
mov al 1 +
mov [ebp+var_A] al +
cmp [ebp+var_A] 0 +
jz loc_4959DA  +
mov eax [ebp+var_8] +
call @Comctrls@TToolButton@GetIndex$qqrv  +
mov dword_4F18A4 eax +
mov eax [ebp+var_4] +
mov dword_4F189C eax +
call @ComCtrls@_17789  +
push 0  +
or ecx 0FFFFFFFFh +
mov edx 448h +
mov eax [ebp+var_4] +
call @Controls@TControl@Perform$qqruiii  +
xor eax eax +
push ebp  +
push offset loc_495AC7  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov eax [ebp+var_8] +
call @Controls@TControl@GetClientHeight$qqrv  +
mov edx eax +
lea ecx [ebp+var_1C] +
xor eax eax +
call @Classes@Point$qqrii  +
lea edx [ebp+var_1C] +
lea ecx [ebp+var_12] +
mov eax [ebp+var_8] +
call @Controls@TControl@ClientToScreen$qqrrx14Windows@TPoint  +
mov eax [ebp+var_4] +
mov eax [eax+2CCh] +
call @Menus@TMenu@IsRightToLeft$qqrv  +
test al al +
jz loc_495A37  +
mov eax [ebp+var_8] +
mov eax [eax+48h] +
add [ebp+var_12] eax +
mov eax [ebp+var_4] +
mov byte ptr [eax+2D9h] 1 +
lea edx [ebp+var_12] +
mov eax off_4EA6CC +
mov eax [eax] +
xor ecx ecx +
call @Forms@TScreen@MonitorFromPoint$qqrrx12Types@TPoint23Forms@TMonitorDefaultTo  +
call unknown_libname_202  +
mov ebx eax +
push 0Fh  +
call GetSystemMetrics  +
mov esi eax +
mov eax [ebp+var_4] +
mov eax [eax+2CCh] +
mov eax [eax+34h] +
call @Menus@TMenuItem@GetCount$qqrv  +
imul esi eax +
add esi [ebp+var_E] +
cmp ebx esi +
jge loc_495A86  +
mov eax [ebp+var_8] +
mov eax [eax+4Ch] +
sub [ebp+var_E] eax +
call sub_4868BC  +
cmp eax 50050h +
jnz loc_495A9A  +
mov eax [ebp+var_8] +
mov edx [eax] +
call dword ptr [edx+7Ch]  +
mov eax [ebp+var_4] +
mov eax [eax+2CCh] +
mov ecx [ebp+var_E] +
mov edx [ebp+var_12] +
mov ebx [eax] +
call dword ptr [ebx+40h]  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_495ACE  +
cmp [ebp+var_A] 0 +
jz locret_495AC6  +
call unknown_libname_373  +
retn   +
jmp unknown_libname_539  +
jmp loc_495ABB  +
mov eax [ebp-4] +
mov edx [ebp-8] +
mov [eax+2D4h] edx +
cmp byte_4F18B4 0 +
jz loc_495AFC  +
push 0  +
mov eax [ebp-8] +
call @Comctrls@TToolButton@GetIndex$qqrv  +
mov ecx eax +
mov edx 448h +
mov eax [ebp-4] +
call @Controls@TControl@Perform$qqruiii  +
mov [ebp+var_9] 1 +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_495B2C  +
push 0  +
push 0  +
push 1400h  +
mov eax [ebp+var_4] +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call PostMessageA  +
retn   +
jmp unknown_libname_539  +
jmp loc_495B0D  +
mov al [ebp+var_9] +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
push ebx  +
push ecx  +
add esp 0FFFFFFF0h +
mov esi edx +
mov ebx eax +
mov byte ptr [ebx+2C8h] 0 +
lea ecx [esp+10h+var_8] +
xor edx edx +
xor eax eax +
call @Classes@Point$qqrii  +
lea edx [esp+10h+var_8] +
mov ecx esp +
mov eax esi +
call @Controls@TControl@ClientToScreen$qqrrx14Windows@TPoint  +
lea ecx [esp+10h+var_8] +
mov edx esp +
mov eax ebx +
call @Controls@TControl@ScreenToClient$qqrrx14Windows@TPoint  +
lea eax [esp+10h+var_8] +
call unknown_libname_383  +
push eax  +
push 1  +
push 201h  +
mov eax ebx +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call PostMessageA  +
add esp 10h +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
mov edi edx +
mov ebx eax +
push 0  +
mov ecx 1 +
mov edx 449h +
mov eax ebx +
call @Controls@TControl@Perform$qqruiii  +
mov dword_4F18A0 ebx +
mov dl 1 +
mov eax ebx +
call @Controls@TControl@SetMouseCapture$qqro  +
call @ComCtrls@_17693  +
test edi edi +
jz loc_495D08  +
push 0  +
mov eax edi +
call @Comctrls@TToolButton@GetIndex$qqrv  +
mov ecx eax +
mov edx 448h +
mov eax ebx +
call @Controls@TControl@Perform$qqruiii  +
mov edx edi +
mov eax ebx +
mov si 0FFB1h +
call @System@@CallDynaInst$qqrv  +
jmp loc_495D18  +
push 0  +
xor ecx ecx +
mov edx 448h +
mov eax ebx +
call @Controls@TControl@Perform$qqruiii  +
test edi edi +
jnz loc_495D23  +
mov byte ptr [ebx+2C8h] 1 +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
cmp byte ptr [ebx+2C9h] 0 +
jz loc_495D52  +
call unknown_libname_374  +
xor edx edx +
mov eax ebx +
call @Controls@TControl@SetMouseCapture$qqro  +
push 0  +
xor ecx ecx +
mov edx 449h +
mov eax ebx +
call @Controls@TControl@Perform$qqruiii  +
mov byte ptr [ebx+2C9h] 0 +
mov byte ptr [ebx+2C8h] 0 +
push 0  +
or ecx 0FFFFFFFFh +
mov edx 448h +
mov eax ebx +
call @Controls@TControl@Perform$qqruiii  +
pop ebx  +
retn   +
***
push ecx  +
push ebx  +
push esi  +
mov [ebp+var_4] eax +
mov ebx off_4EA6C8 +
mov eax [ebp+var_4] +
cmp byte ptr [eax+2C9h] 0 +
jz loc_495DA7  +
test edx edx +
jz loc_495DA3  +
mov eax [ebp+var_4] +
mov si 0FFB1h +
call @System@@CallDynaInst$qqrv  +
mov al 1 +
jmp loc_495E1D  +
xor eax eax +
jmp loc_495E1D  +
mov eax [ebp+var_4] +
mov si 0FFB0h +
call @System@@CallDynaInst$qqrv  +
xor eax eax +
push ebp  +
push offset loc_495E0D  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov eax [ebp+var_4] +
mov byte ptr [eax+2C9h] 1 +
mov eax [ebx] +
call @Forms@TApplication@HandleMessage$qqrv  +
mov eax [ebx] +
cmp byte ptr [eax+9Ch] 0 +
jz loc_495DE7  +
mov eax [ebp+var_4] +
mov byte ptr [eax+2C9h] 0 +
mov eax [ebp+var_4] +
cmp byte ptr [eax+2C9h] 0 +
jnz loc_495DCB  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_495E14  +
mov eax [ebp+var_4] +
mov si 0FFB3h +
call @System@@CallDynaInst$qqrv  +
retn   +
jmp unknown_libname_539  +
jmp loc_495E00  +
mov eax [ebp-4] +
mov al [eax+2D8h] +
pop esi  +
pop ebx  +
pop ecx  +
pop ebp  +
retn   +
***
mov eax ebx +
call @Controls@TWinControl@HandleAllocated$qqrv  +
test al al +
jz loc_495E60  +
cmp byte ptr [ebx+227h] 0 +
jz loc_495E60  +
push 0  +
mov eax [ebx+68h] +
call @Graphics@TFont@GetHandle$qqrv  +
mov ecx eax +
mov edx 30h +
mov eax ebx +
call @Controls@TControl@Perform$qqruiii  +
test byte ptr [ebx+1Ch] 1 +
jnz loc_495E60  +
mov eax ebx +
call @Controls@TWinControl@RecreateWnd$qqrv  +
mov dx 0B008h +
mov eax ebx +
call @Controls@TWinControl@NotifyControls$qqrus  +
pop ebx  +
retn   +
***
add esp 0FFFFFF70h +
mov [esp+1+var_1] 1 +
cmp word ptr [eax+28Ah] 0 +
jz loc_49605B  +
push esp  +
mov ebx eax +
mov ecx edx +
mov edx eax +
mov eax [ebx+28Ch] +
call dword ptr [ebx+288h]  +
mov al [esp+1+var_1] +
pop edx  +
pop ebx  +
retn   +
***
mov [esp+1+var_1] 1 +
cmp word ptr [eax+292h] 0 +
jz loc_496087  +
push esp  +
mov ebx eax +
mov ecx edx +
mov edx eax +
mov eax [ebx+294h] +
call dword ptr [ebx+290h]  +
mov al [esp+1+var_1] +
pop edx  +
pop ebx  +
retn   +
***
add esp 0FFFFFFF4h +
mov ebx edx +
mov esi eax +
mov [esp+0Ch+var_C] 80000001h +
mov eax [esi+2E0h] +
call unknown_libname_550  +
mov [esp+0Ch+var_8] eax +
mov eax [esi+2E4h] +
call unknown_libname_550  +
mov [esp+0Ch+var_4] eax +
mov eax esp +
push eax  +
xor eax eax +
mov al bl +
push eax  +
push 41Ah  +
mov eax esi +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call SendMessageA  +
add esp 0Ch +
pop esi  +
pop ebx  +
retn   +
***
mov esi edx +
mov ebx eax +
mov edx esi +
mov eax ebx +
call @Controls@TControlActionLink@AssignClient$qqrp14System@TObject_0  +
mov eax esi +
mov edx ds:off_484D68 +
call unknown_libname_534  +
mov [ebx+20h] eax +
pop esi  +
pop ebx  +
retn   +
***
mov eax ebx +
call unknown_libname_66  +
test al al +
jz loc_49612E  +
mov eax [ebx+10h] +
mov edx ds:off_448424 +
call unknown_libname_534  +
mov al [eax+69h] +
mov edx [ebx+20h] +
cmp al [edx+16Ah] +
jz loc_496132  +
xor eax eax +
pop ebx  +
retn   +
mov al 1 +
pop ebx  +
retn   +
***
mov eax ebx +
call unknown_libname_72  +
test al al +
jz loc_496165  +
mov eax [ebx+10h] +
mov edx ds:off_448424 +
call unknown_libname_534  +
mov eax [eax+80h] +
mov edx [ebx+20h] +
cmp eax [edx+16Ch] +
jz loc_496169  +
xor eax eax +
pop ebx  +
retn   +
mov al 1 +
pop ebx  +
retn   +
***
mov ebx edx +
mov esi eax +
mov eax esi +
mov edx [eax] +
call dword ptr [edx+24h]  +
test al al +
jz loc_49618B  +
mov edx ebx +
mov eax [esi+20h] +
call @Comctrls@TToolButton@SetDown$qqro  +
pop esi  +
pop ebx  +
retn   +
***
mov esi edx +
mov ebx eax +
mov eax ebx +
mov edx [eax] +
call dword ptr [edx+3Ch]  +
test al al +
jz loc_4961AB  +
mov edx esi +
mov eax [ebx+20h] +
call @Comctrls@TToolButton@SetImageIndex$qqri  +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
mov eax ebx +
call @Listactns@TListControlItem@SetCaption$qqrx17System@AnsiString  +
mov eax ebx +
call @Classes@TCollectionItem@GetIndex$qqrv  +
mov edx eax +
mov eax [ebx+4] +
mov ecx [eax] +
call dword ptr [ecx+2Ch]  +
mov edx [ebx+4] +
mov al [edx+1Dh] +
cmp al 2 +
jz loc_496225  +
cmp al 3 +
jnz loc_49622C  +
mov eax edx +
call sub_458150  +
pop ebx  +
retn   +
***
mov eax ebx +
call unknown_libname_139  +
mov eax ebx +
call @Classes@TCollectionItem@GetIndex$qqrv  +
mov edx eax +
mov eax [ebx+4] +
mov ecx [eax] +
call dword ptr [ecx+2Ch]  +
mov edx [ebx+4] +
mov al [edx+1Dh] +
cmp al 1 +
jz loc_496259  +
cmp al 3 +
jnz loc_496260  +
mov eax edx +
call sub_458150  +
pop ebx  +
retn   +
***
mov eax ebx +
call sub_49D878  +
mov eax ebx +
call @Classes@TCollectionItem@GetIndex$qqrv  +
mov edx eax +
mov eax [ebx+4] +
mov ecx [eax] +
call dword ptr [ecx+2Ch]  +
pop ebx  +
retn   +
***
mov eax [ebx+1Ch] +
cmp eax 0FFFFFFFFh +
jz loc_496294  +
cmp eax [ebx+18h] +
jnz loc_496297  +
mov [ebx+1Ch] edx +
mov eax ebx +
call @Listactns@TListControlItem@SetImageIndex$qqrxi  +
mov eax ebx +
call @Classes@TCollectionItem@GetIndex$qqrv  +
mov edx eax +
mov eax [ebx+4] +
mov ecx [eax] +
call dword ptr [ecx+2Ch]  +
pop ebx  +
retn   +
***
mov esi edx +
mov [ebx+20h] edx +
mov eax ebx +
call @Classes@TCollectionItem@GetIndex$qqrv  +
mov edx eax +
mov eax [ebx+4] +
mov ecx [eax] +
call dword ptr [ecx+2Ch]  +
pop ebx  +
retn   +
***
mov [ebx+1Ch] edx +
mov eax ebx +
call @Classes@TCollectionItem@GetIndex$qqrv  +
mov edx eax +
mov eax [ebx+4] +
mov ecx [eax] +
call dword ptr [ecx+2Ch]  +
pop ebx  +
retn   +
***
mov eax ebx +
push ecx  +
mov esi edx +
mov ebx eax +
mov edx esi +
mov eax ebx +
call sub_458124  +
pop esi  +
pop ebx  +
retn   +
***
mov esi edx +
mov ebx eax +
mov edx esi +
mov eax ebx +
call sub_49DCB8  +
pop esi  +
pop ebx  +
retn   +
***
mov ebx edx +
push edi  +
push ecx  +
push ebx  +
push esi  +
test dl dl +
jz loc_49650A  +
add esp 0FFFFFFF0h +
call unknown_libname_535  +
mov esi ecx +
mov [ebp+var_1] dl +
mov ebx eax +
mov eax 200h +
call @Comctrls@CheckCommonControl$qqri  +
mov ecx esi +
xor edx edx +
mov eax ebx +
call @Stdctrls@TCustomCombo@$bctr$qqrp18Classes@TComponent  +
push ebx  +
push offset @Comctrls@TCustomComboBoxEx@ComboExWndProc$qqrr17Messages@TMessage  +
call sub_4A5BA4  +
mov [ebx+270h] eax +
mov ecx ebx +
mov dl 1 +
mov eax ds:off_486478 +
call @Comctrls@TComboBoxExStrings@$bctr$qqrp26Comctrls@TCustomComboBoxEx  +
mov edx eax +
mov eax ebx +
mov ecx [eax] +
call dword ptr [ecx+108h]  +
mov eax [ebx+23Ch] +
mov [eax+10h] ebx +
mov eax [eax+14h] +
mov [ebx+284h] eax +
mov dl 1 +
mov eax ds:off_44674C +
call @System@TObject@$bctr$qqrv  +
mov esi eax +
mov [ebx+274h] esi +
mov [esi+0Ch] ebx +
mov dword ptr [esi+8] offset @Comctrls@TCustomComboBoxEx@ImageListChange$qqrp14System@TObject +
mov byte ptr [ebx+281h] 0 +
mov eax ebx +
cmp [ebp+var_1] 0 +
jz loc_49659F  +
call sub_4BABC8  +
pop large dword ptr fs:0  +
add esp 0Ch +
mov eax ebx +
pop esi  +
pop ebx  +
pop ecx  +
pop ebp  +
retn   +
***
call unknown_libname_536  +
mov ebx edx +
mov esi eax +
mov eax [esi+23Ch] +
call @System@TObject@Free$qqrv  +
lea eax [esi+274h] +
call @Sysutils@FreeAndNil$qqrpv  +
mov eax esi +
call @Controls@TWinControl@HandleAllocated$qqrv  +
test al al +
jz loc_4965DE  +
mov eax esi +
mov edx [eax] +
call dword ptr [edx+0ACh]  +
mov eax [esi+270h] +
call @Forms@FreeObjectInstance$qqrpv  +
lea eax [esi+27Ch] +
call @Sysutils@FreeAndNil$qqrpv  +
mov edx ebx +
and dl 0FCh +
mov eax esi +
call @Stdctrls@TCustomCombo@$bdtr$qqrv  +
test bl bl +
jle loc_49660B  +
mov eax esi +
call @System@@ClassDestroy$qqrp14System@TObject  +
pop esi  +
pop ebx  +
retn   +
***
mov eax [edx+8] +
mov ebx edx +
mov esi eax +
mov eax 200h +
call @Comctrls@InitCommonControl$qqri  +
mov edx ebx +
mov eax esi +
call @Controls@TWinControl@CreateParams$qqrr22Controls@TCreateParams  +
mov ecx offset aComboboxex32 +
mov edx ebx +
mov eax esi +
call @Controls@TWinControl@CreateSubClass$qqrr22Controls@TCreateParamspc  +
mov eax [ebx+4] +
or eax 10000h +
or eax 200000h +
or eax 2000000h +
or eax 4 +
or eax 40h +
xor edx edx +
mov dl [esi+281h] +
or eax dword_4E6974[edx*4] +
mov [ebx+4] eax +
and dword ptr [ebx+8] 0FFFFFDFFh +
mov eax [ebx+24h] +
or eax 8 +
and eax 0FFFFFFFCh +
mov [ebx+24h] eax +
pop esi  +
pop ebx  +
retn   +
***
mov esi edx +
mov ebx eax +
mov eax [ebx+278h] +
test eax eax +
jz loc_4966F3  +
mov edx [ebx+274h] +
call @Imglist@TCustomImageList@UnRegisterChanges$qqrp19Imglist@TChangeLink  +
mov eax esi +
mov [ebx+278h] eax +
test eax eax +
jz loc_496745  +
mov edx [ebx+274h] +
call @Imglist@TCustomImageList@RegisterChanges$qqrp19Imglist@TChangeLink  +
mov edx ebx +
mov eax [ebx+278h] +
call @Classes@TComponent@FreeNotification$qqrp18Classes@TComponent  +
mov eax ebx +
call @Controls@TWinControl@HandleAllocated$qqrv  +
test al al +
jz loc_496767  +
mov eax [ebx+278h] +
call @Imglist@TCustomImageList@GetHandle$qqrv  +
push eax  +
push 0  +
push 402h  +
mov eax ebx +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call PostMessageA  +
pop esi  +
pop ebx  +
retn   +
mov eax ebx +
call @Controls@TWinControl@HandleAllocated$qqrv  +
test al al +
jz loc_496767  +
push 0  +
xor ecx ecx +
mov edx 402h +
mov eax ebx +
call @Controls@TControl@Perform$qqruiii  +
mov eax ebx +
call @Controls@TWinControl@RecreateWnd$qqrv  +
pop esi  +
pop ebx  +
retn   +
***
mov esi edx +
mov ebx eax +
mov eax ebx +
call @Controls@TWinControl@HandleAllocated$qqrv  +
test al al +
jz loc_496793  +
mov eax esi +
call @Imglist@TCustomImageList@GetHandle$qqrv  +
push eax  +
xor ecx ecx +
mov edx 402h +
mov eax ebx +
call @Controls@TControl@Perform$qqruiii  +
pop esi  +
pop ebx  +
retn   +
***
mov esi edx +
mov ebx eax +
mov eax [esi] +
add eax 0FFFF42CEh +
sub eax 7 +
jnb loc_4967D1  +
mov eax off_4EA6D4 +
cmp byte ptr [eax] 0 +
jnz loc_4967DA  +
cmp byte ptr [ebx+281h] 2 +
jnb loc_4967DA  +
mov eax [ebx+30h] +
mov eax [eax+170h] +
call @Graphics@TBrush@GetHandle$qqrv  +
mov [esi+0Ch] eax +
pop esi  +
pop ebx  +
retn   +
mov edx esi +
mov eax ebx +
call @Stdctrls@TCustomCombo@WndProc$qqrr17Messages@TMessage  +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
mov ebx ecx +
mov esi edx +
mov edi eax +
mov ecx ebx +
mov edx esi +
mov eax edi +
call @Controls@TControl@Notification$qqrp18Classes@TComponent18Classes@TOperation  +
cmp bl 1 +
jnz loc_49680A  +
cmp esi [edi+278h] +
jnz loc_49680A  +
xor edx edx +
mov eax edi +
call @Comctrls@TCustomComboBoxEx@SetImages$qqrpx24Imglist@TCustomImageList  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov eax ebx +
call @Controls@TControl@CMParentColorChanged$qqrr17Messages@TMessage  +
mov eax off_4EA6D4 +
cmp byte ptr [eax] 0 +
jnz loc_496834  +
cmp byte ptr [ebx+281h] 2 +
jnb loc_496834  +
mov eax ebx +
mov edx [eax] +
call dword ptr [edx+7Ch]  +
pop ebx  +
retn   +
***
mov ebx eax +
mov eax ebx +
call @Controls@TWinControl@CMColorChanged$qqrr17Messages@TMessage  +
mov eax ebx +
call @Controls@TWinControl@HandleAllocated$qqrv  +
test al al +
jz loc_496891  +
mov eax off_4EA6D4 +
cmp byte ptr [eax] 0 +
jz loc_496891  +
mov edx esp +
mov eax ebx +
mov ecx [eax] +
call dword ptr [ecx+44h]  +
mov eax [ebx+268h] +
test eax eax +
jz loc_49687A  +
push 0  +
lea edx [esp+14h+Rect] +
push edx  +
push eax  +
call InvalidateRect  +
mov eax [ebx+240h] +
test eax eax +
jz loc_496891  +
push 0  +
lea edx [esp+14h+Rect] +
push edx  +
push eax  +
call InvalidateRect  +
add esp 10h +
pop ebx  +
retn   +
***
mov esi edx +
mov ebx eax +
cmp byte ptr [ebx+5Dh] 1 +
jnz loc_4968DA  +
cmp byte ptr [ebx+281h] 2 +
jnz loc_4968DA  +
push 15h  +
call GetSystemMetrics  +
mov edx [ebx+48h] +
sub edx eax +
movsx eax word ptr [esi+8] +
cmp edx eax +
jle loc_4968DA  +
mov eax ebx +
mov edx [eax] +
call dword ptr [edx+0C0h]  +
or ecx 0FFFFFFFFh +
xor edx edx +
mov eax ebx +
call @Controls@TControl@BeginDrag$qqroi  +
pop esi  +
pop ebx  +
retn   +
mov edx esi +
mov eax ebx +
call @Controls@TControl@WMLButtonDown$qqrr17Messages@TWMMouse  +
mov eax ebx +
call @Controls@TControl@GetMouseCapture$qqrv  +
test al al +
jz loc_49690A  +
mov eax ebx +
call @Forms@GetParentForm$qqrp17Controls@TControl  +
test eax eax +
jz loc_49690A  +
cmp ebx [eax+220h] +
jz loc_49690A  +
xor edx edx +
mov eax ebx +
call @Controls@TControl@SetMouseCapture$qqro  +
pop esi  +
pop ebx  +
retn   +
***
mov esi eax +
mov eax [esi+26Ch] +
push eax  +
mov ecx [esi+268h] +
mov eax esi +
mov ebx [eax] +
call dword ptr [ebx+0F0h]  +
pop esi  +
pop ebx  +
retn   +
***
push ecx  +
push ebx  +
push esi  +
mov [ebp+var_4] eax +
mov eax [ebp+var_4] +
call @Stdctrls@TCustomCombo@CreateWnd$qqrv  +
push 5  +
mov eax [ebp+var_4] +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call GetWindow  +
mov ebx eax +
mov eax [ebp+var_4] +
mov [eax+248h] ebx +
mov esi ebx +
mov eax [ebp+var_4] +
mov [eax+268h] esi +
push 0FFFFFFFCh  +
push esi  +
call GetWindowLongA  +
mov edx [ebp+var_4] +
mov [edx+26Ch] eax +
mov eax [ebp+var_4] +
mov eax [eax+270h] +
push eax  +
push 0FFFFFFFCh  +
mov eax [ebp+var_4] +
mov eax [eax+268h] +
push eax  +
call SetWindowLongA  +
mov eax [ebp+var_4] +
mov al [eax+281h] +
sub al 2 +
jnb loc_496A4A  +
push 5  +
push 5  +
mov eax [ebp+var_4] +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call GetWindow  +
push eax  +
call GetWindow  +
mov ebx eax +
test ebx ebx +
jz loc_496A4A  +
mov eax [ebp+var_4] +
cmp byte ptr [eax+281h] 1 +
jnz loc_496A13  +
mov eax [ebp+var_4] +
mov esi ebx +
mov [eax+244h] esi +
push 0FFFFFFFCh  +
push esi  +
call GetWindowLongA  +
mov edx [ebp+var_4] +
mov [edx+258h] eax +
mov eax [ebp+var_4] +
mov eax [eax+254h] +
push eax  +
push 0FFFFFFFCh  +
mov eax [ebp+var_4] +
mov eax [eax+244h] +
push eax  +
call SetWindowLongA  +
push 2  +
push ebx  +
call GetWindow  +
mov ebx eax +
mov eax [ebp+var_4] +
mov esi ebx +
mov [eax+240h] esi +
push 0FFFFFFFCh  +
push esi  +
call GetWindowLongA  +
mov edx [ebp+var_4] +
mov [edx+250h] eax +
mov eax [ebp+var_4] +
mov eax [eax+24Ch] +
push eax  +
push 0FFFFFFFCh  +
mov eax [ebp+var_4] +
mov eax [eax+240h] +
push eax  +
call SetWindowLongA  +
mov eax off_4EA6D4 +
cmp byte ptr [eax] 0 +
jz loc_496A78  +
mov eax [ebp+var_4] +
cmp dword ptr [eax+240h] 0 +
jz loc_496A78  +
push 0  +
push 3  +
push 0D3h  +
mov eax [ebp+var_4] +
mov eax [eax+240h] +
push eax  +
call SendMessageA  +
mov eax [ebp+var_4] +
cmp dword ptr [eax+27Ch] 0 +
jz loc_496B39  +
mov eax [ebp+var_4] +
mov eax [eax+284h] +
mov edx [eax] +
call dword ptr [edx+20h]  +
mov eax [ebp+var_4] +
mov byte ptr [eax+280h] 1 +
xor eax eax +
push ebp  +
push offset loc_496B32  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov eax [ebp+var_4] +
mov edx [eax+27Ch] +
mov eax [ebp+var_4] +
mov eax [eax+284h] +
mov ecx [eax] +
call dword ptr [ecx+8]  +
mov eax [ebp+var_4] +
mov eax [eax+284h] +
call sub_49DAB8  +
mov ebx eax +
dec ebx  +
test ebx ebx +
jl loc_496AF1  +
inc ebx  +
xor esi esi +
mov eax [ebp+var_4] +
mov eax [eax+284h] +
mov edx esi +
mov ecx [eax] +
call dword ptr [ecx+2Ch]  +
inc esi  +
dec ebx  +
jnz loc_496ADD  +
mov eax [ebp+var_4] +
add eax 27Ch +
call @Sysutils@FreeAndNil$qqrpv  +
mov eax [ebp+var_4] +
mov edx [eax+68h] +
mov eax [ebp+var_4] +
call @Controls@TControl@SetFont$qqrp14Graphics@TFont  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_496B39  +
mov eax [ebp+var_4] +
mov eax [eax+284h] +
mov edx [eax] +
call dword ptr [edx+24h]  +
mov eax [ebp+var_4] +
mov byte ptr [eax+280h] 0 +
retn   +
jmp unknown_libname_539  +
jmp loc_496B19  +
mov eax [ebp+var_4] +
cmp dword ptr [eax+278h] 0 +
jz loc_496B69  +
mov eax [ebp+var_4] +
mov eax [eax+278h] +
call @Imglist@TCustomImageList@GetHandle$qqrv  +
push eax  +
push 0  +
push 402h  +
mov eax [ebp+var_4] +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call PostMessageA  +
mov eax [ebp+var_4] +
mov dl [eax+282h] +
mov eax [ebp+var_4] +
call @Comctrls@TCustomComboBoxEx@SetStyleEx$qqrx55System@_Set$t27Comctrls@TComboBoxExStyleEx$iuc$0$iuc$4_  +
pop esi  +
pop ebx  +
pop ecx  +
pop ebp  +
retn   +
***
mov eax [eax+23Ch] +
retn   +
***
retn   +
***
push edi  +
push ecx  +
mov [esp+1+var_1] dl +
mov ebx eax +
xor edi edi +
mov al [esp+1+var_1] +
mov [ebx+282h] al +
mov eax ebx +
call @Controls@TWinControl@HandleAllocated$qqrv  +
test al al +
jz loc_496BF4  +
xor eax eax +
mov esi offset unk_4E6980 +
mov edx eax +
cmp dl 7 +
ja loc_496BD3  +
and edx 7Fh +
bt [ebx+282h] edx +
jnb loc_496BD7  +
or edi [esi] +
inc eax  +
add esi 4 +
cmp al 5 +
jnz loc_496BC2  +
push edi  +
push 0  +
push 40Eh  +
mov eax ebx +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call SendMessageA  +
pop edx  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
mov eax ebx +
call @Stdctrls@TCustomCombo@SetDropDownCount$qqrxi  +
mov ax ds:word_496C94 +
and ax [ebx+1Ch] +
mov dx ds:word_496C98 +
cmp dx ax +
jnz loc_496C92  +
mov eax ebx +
call @Controls@TWinControl@HandleAllocated$qqrv  +
test al al +
jz loc_496C92  +
mov eax ebx +
call @Controls@TWinControl@RecreateWnd$qqrv  +
pop ebx  +
retn   +
***
retn   +
***
mov ebx eax +
mov eax [ebx+284h] +
call sub_49DAB8  +
test eax eax +
jle loc_496CE7  +
cmp dword ptr [ebx+27Ch] 0 +
jnz loc_496CE7  +
mov ecx ds:off_4862B8 +
mov dl 1 +
mov eax ds:off_49A8F0 +
call @Dbexplif@TExploreList@$bctr$qqrp23Dbexplif@TExploreObject  +
mov esi eax +
mov [ebx+27Ch] esi +
mov edx [ebx+284h] +
mov eax esi +
mov ecx [eax] +
call dword ptr [ecx+8]  +
mov eax ebx +
call @Controls@TWinControl@DestroyWnd$qqrv  +
pop esi  +
pop ebx  +
retn   +
***
mov esi eax +
xor ebx ebx +
mov eax esi +
call @Controls@TWinControl@HandleAllocated$qqrv  +
test al al +
jz loc_496D28  +
call GetFocus  +
cmp eax [esi+240h] +
jz loc_496D26  +
cmp eax [esi+244h] +
jz loc_496D26  +
cmp eax [esi+268h] +
jz loc_496D26  +
xor ebx ebx +
jmp loc_496D28  +
mov bl 1 +
mov eax ebx +
pop esi  +
pop ebx  +
retn   +
***
mov ecx [eax+220h] +
mov [edx] ecx +
mov ecx [eax+224h] +
mov [edx+4] ecx +
retn   +
***
mov edx [ebp+arg_0] +
mov [eax+220h] edx +
mov edx [ebp+arg_4] +
mov [eax+224h] edx +
pop ebp  +
retn 8  +
***
mov esi edx +
mov eax [eax+14h] +
call @Comctrls@TComboExItems@Add$qqrv  +
mov ebx eax +
mov edx esi +
mov eax ebx +
mov ecx [eax] +
call dword ptr [ecx+20h]  +
mov eax ebx +
call @Classes@TCollectionItem@GetIndex$qqrv  +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
mov edi ecx +
mov esi edx +
mov eax [eax+14h] +
call @Comctrls@TComboExItems@Add$qqrv  +
mov ebx eax +
mov edx esi +
mov eax ebx +
mov ecx [eax] +
call dword ptr [ecx+20h]  +
mov edx edi +
mov eax ebx +
mov ecx [eax] +
call dword ptr [ecx+24h]  +
mov eax ebx +
call @Classes@TCollectionItem@GetIndex$qqrv  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push ecx  +
push edi  +
test dl dl +
jz loc_496E2B  +
add esp 0FFFFFFF0h +
call unknown_libname_535  +
mov esi ecx +
mov ebx edx +
mov edi eax +
xor edx edx +
mov eax edi +
call @System@TObject@$bctr$qqrv  +
mov eax edi +
mov edx [eax] +
call dword ptr [edx+84h]  +
push eax  +
mov eax edi +
mov edx [eax] +
call dword ptr [edx+80h]  +
mov ecx esi +
mov dl 1 +
call sub_49DE00  +
mov [edi+14h] eax +
mov eax edi +
test bl bl +
jz loc_496E70  +
call sub_4BABC8  +
pop large dword ptr fs:0  +
add esp 0Ch +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
call unknown_libname_536  +
mov ebx edx +
mov esi eax +
lea eax [esi+14h] +
call @Sysutils@FreeAndNil$qqrpv  +
mov edx ebx +
and dl 0FCh +
mov eax esi +
call sub_49DE48  +
test bl bl +
jle loc_496EA2  +
mov eax esi +
call @System@@ClassDestroy$qqrp14System@TObject  +
pop esi  +
pop ebx  +
retn   +
***
mov eax [eax+14h] +
call sub_49DD98  +
retn   +
***
add esp 0FFFFFFF8h +
push ebx  +
push esi  +
push edi  +
xor ebx ebx +
mov [ebp+var_4] ebx +
mov edi ecx +
mov esi edx +
mov ebx eax +
xor eax eax +
push ebp  +
push offset loc_496FF1  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov edx edi +
mov eax [ebx+14h] +
call sub_458124  +
mov edx [eax+10h] +
lea eax [ebp+var_4] +
call unknown_libname_543  +
mov edx esi +
mov eax [ebx+14h] +
call sub_458124  +
mov eax [eax+10h] +
push eax  +
mov edx edi +
mov eax [ebx+14h] +
call sub_458124  +
pop edx  +
mov ecx [eax] +
call dword ptr [ecx+20h]  +
mov edx esi +
mov eax [ebx+14h] +
call sub_458124  +
mov edx [ebp+var_4] +
mov ecx [eax] +
call dword ptr [ecx+20h]  +
mov edx edi +
mov eax [ebx+14h] +
call sub_458124  +
mov eax [eax+18h] +
mov [ebp+var_8] eax +
mov edx esi +
mov eax [ebx+14h] +
call sub_458124  +
mov eax [eax+18h] +
push eax  +
mov edx edi +
mov eax [ebx+14h] +
call sub_458124  +
pop edx  +
mov ecx [eax] +
call dword ptr [ecx+28h]  +
mov edx esi +
mov eax [ebx+14h] +
call sub_458124  +
mov edx [ebp+var_8] +
mov ecx [eax] +
call dword ptr [ecx+28h]  +
mov edx edi +
mov eax [ebx+14h] +
call sub_458124  +
mov eax [eax+1Ch] +
mov [ebp+var_8] eax +
mov edx esi +
mov eax [ebx+14h] +
call sub_458124  +
mov eax [eax+1Ch] +
push eax  +
mov edx edi +
mov eax [ebx+14h] +
call sub_458124  +
pop edx  +
mov ecx [eax] +
call dword ptr [ecx+30h]  +
mov edx esi +
mov eax [ebx+14h] +
call sub_458124  +
mov edx [ebp+var_8] +
mov ecx [eax] +
call dword ptr [ecx+30h]  +
mov edx edi +
mov eax [ebx+14h] +
call sub_458124  +
mov eax [eax+20h] +
mov [ebp+var_8] eax +
mov edx esi +
mov eax [ebx+14h] +
call sub_458124  +
mov eax [eax+20h] +
push eax  +
mov edx edi +
mov eax [ebx+14h] +
call sub_458124  +
pop edx  +
mov ecx [eax] +
call dword ptr [ecx+2Ch]  +
mov edx esi +
mov eax [ebx+14h] +
call sub_458124  +
mov edx [ebp+var_8] +
mov ecx [eax] +
call dword ptr [ecx+2Ch]  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_496FF8  +
lea eax [ebp+var_4] +
call unknown_libname_540  +
retn   +
jmp unknown_libname_539  +
jmp loc_496FE8  +
pop edi  +
pop esi  +
pop ebx  +
pop ecx  +
pop ecx  +
pop ebp  +
retn   +
***
push edi  +
mov edi ecx +
mov esi edx +
mov ebx eax +
mov edx esi +
mov eax [ebx+14h] +
call sub_458124  +
mov edx [eax+10h] +
mov eax edi +
call unknown_libname_542  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov eax [eax+14h] +
call sub_49DAB8  +
retn   +
***
mov eax [eax+14h] +
call sub_49DAB8  +
retn   +
***
mov esi edx +
mov ebx eax +
mov edx esi +
mov eax [ebx+14h] +
call sub_458124  +
mov eax [eax+14h] +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
call dword ptr [ecx+54h]  +
retn   +
***
mov eax [eax+14h] +
push edi  +
mov edi ecx +
mov esi edx +
mov ebx eax +
mov edx esi +
mov eax [ebx+14h] +
call sub_458124  +
mov edx edi +
mov ecx [eax] +
call dword ptr [ecx+14h]  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
mov eax [eax+14h] +
mov ebx edx +
mov esi eax +
mov eax [esi+10h] +
call @Controls@TWinControl@HandleAllocated$qqrv  +
test al al +
jz loc_49713F  +
push 0  +
mov eax ebx +
xor al 1 +
and eax 7Fh +
push eax  +
push 0Bh  +
mov eax [esi+10h] +
call @Controls@TWinControl@GetHandle$qqrv  +
push eax  +
call SendMessageA  +
xor bl 1 +
test bl bl +
jz loc_49713F  +
mov eax [esi+10h] +
call @Controls@TControl@Refresh$qqrv  +
pop esi  +
pop ebx  +
retn   +
***
retn   +
***
retn   +
***
push ecx  +
push ebx  +
push esi  +
mov esi ecx +
mov [ebp+var_4] edx +
mov ebx eax +
mov eax [ebp+var_4] +
call unknown_libname_549  +
xor eax eax +
push ebp  +
push offset loc_4971BC  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov eax [ebx+20h] +
mov eax [eax+22Ch] +
call unknown_libname_359  +
mov ebx eax +
mov ecx esi +
xor edx edx +
mov eax ebx +
call @Comctrls@TListItem@SetImage$qqrii  +
mov edx [ebp+var_4] +
mov eax ebx +
call @Comctrls@TListItem@SetCaption$qqrx17System@AnsiString  +
mov edx [ebp+arg_0] +
mov eax ebx +
call @Comctrls@TListItem@SetData$qqrpv  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4971C3  +
lea eax [ebp+var_4] +
call unknown_libname_540  +
retn   +
jmp unknown_libname_539  +
jmp loc_4971B3  +
pop esi  +
pop ebx  +
pop ecx  +
pop ebp  +
retn 4  +
***
mov esi edx +
mov eax [eax+20h] +
mov eax [eax+22Ch] +
call unknown_libname_359  +
mov ebx eax +
mov ecx [esi+18h] +
xor edx edx +
mov eax ebx +
call @Comctrls@TListItem@SetImage$qqrii  +
mov edx [esi+10h] +
mov eax ebx +
call @Comctrls@TListItem@SetCaption$qqrx17System@AnsiString  +
mov edx [esi+14h] +
mov eax ebx +
call @Comctrls@TListItem@SetData$qqrpv  +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
mov edi edx +
mov ebx eax +
mov eax ebx +
mov edx [eax] +
call dword ptr [edx+84h]  +
test al al +
jz loc_497232  +
mov esi [ebx+20h] +
mov eax esi +
mov edx ds:off_4848D8 +
call unknown_libname_534  +
mov edx edi +
mov eax esi +
call @Comctrls@TCustomListView@SetSmallImages$qqrp24Imglist@TCustomImageList  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push ecx  +
push ebx  +
push esi  +
mov esi ecx +
mov [ebp+var_4] edx +
mov ebx eax +
mov eax [ebp+var_4] +
call unknown_libname_549  +
xor eax eax +
push ebp  +
push offset loc_497298  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov eax [ebx+20h] +
mov edx ds:off_486590 +
call unknown_libname_534  +
push esi  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
mov edx [ebp+arg_0] +
push edx  +
mov eax [eax+284h] +
mov ecx esi +
mov edx [ebp+var_4] +
call @Comctrls@TComboExItems@AddItem$qqrx17System@AnsiStringxixixixipv  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_49729F  +
lea eax [ebp+var_4] +
call unknown_libname_540  +
retn   +
jmp unknown_libname_539  +
jmp loc_49728F  +
pop esi  +
pop ebx  +
pop ecx  +
pop ebp  +
retn 4  +
***
mov ebx edx +
mov esi eax +
mov eax [esi+20h] +
mov edx ds:off_486590 +
call unknown_libname_534  +
mov edx [ebx+18h] +
push edx  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
mov ecx [ebx+14h] +
push ecx  +
mov eax [eax+284h] +
mov ecx edx +
mov edx [ebx+10h] +
call @Comctrls@TComboExItems@AddItem$qqrx17System@AnsiStringxixixixipv  +
pop esi  +
pop ebx  +
retn   +
***
xor eax eax +
sub dword_4F1888 1 +
xor eax eax +
push ebp  +
push offset loc_49738D  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
inc dword_4F18C0  +
jnz loc_49737F  +
mov eax dword_4F18C4 +
call @System@TObject@Free$qqrv  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_497394  +
retn   +
jmp unknown_libname_539  +
jmp locret_49738C  +
pop ebp  +
retn   +
***
sub dword_4F18C0 1 +
jnb locret_4973C8  +
push offset szFormat  +
call RegisterClipboardFormatA  +
mov word_4F18BC ax +
push offset aDelphiComponen  +
call RegisterClipboardFormatA  +
mov word_4F18BE ax +
xor eax eax +
mov dword_4F18C4 eax +
retn   +
***
mov bl 0Bh +
mov esi offset unk_4F18CC +
mov eax [esi] +
call @System@TObject@Free$qqrv  +
add esi 4 +
dec bl  +
jnz loc_4973F9  +
pop esi  +
pop ebx  +
retn   +
***
xor eax eax +
push ebp  +
push offset loc_4974B4  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
inc dword_4F18C8  +
jnz loc_4974A6  +
call @Buttons@_16495  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4974BB  +
retn   +
jmp unknown_libname_539  +
jmp locret_4974B3  +
pop ebp  +
retn   +
***
sub dword_4F18C8 1 +
jnb locret_4974E4  +
mov eax offset dword_49740C +
call @System@@InitImports$qqrv  +
mov eax offset unk_4F18CC +
xor ecx ecx +
mov edx 2Ch +
call @System@@FillChar$qqrv  +
retn   +
***
jmp near ptr loc_497594+1  +
retn 0FFh  +
***
retn   +
***
retf 0FFh  +
***
retf   +
***
xor eax eax +
push ebp  +
push offset loc_4977BD  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
inc dword_4F18F8  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4977C4  +
retn   +
jmp unknown_libname_539  +
jmp locret_4977BC  +
pop ebp  +
retn   +
***
xor eax eax +
push ebp  +
push offset loc_4977F5  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
inc dword_4F18FC  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4977FC  +
retn   +
jmp unknown_libname_539  +
jmp locret_4977F4  +
pop ebp  +
retn   +
***
xor eax eax +
push ebp  +
push offset loc_49782D  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
inc dword_4F1900  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_497834  +
retn   +
jmp unknown_libname_539  +
jmp locret_49782C  +
pop ebp  +
retn   +
***
movzx eax ax +
retn   +
***
retn   +
***
call GlobalAlloc  +
push eax  +
call GlobalLock  +
retn   +
***
push eax  +
call GlobalHandle  +
push eax  +
push eax  +
call GlobalUnlock  +
call GlobalReAlloc  +
push eax  +
call GlobalLock  +
retn   +
***
push eax  +
push eax  +
call GlobalUnlock  +
call GlobalFree  +
retn   +
***
shl edx 8 +
movsx eax word ptr [esp+4+var_4] +
mov [esp+0] dx +
mov ax [eax+4] +
mov [esp+4+var_2] ax +
mov eax [esp] +
pop edx  +
retn   +
***
retn   +
***
push ebx  +
mov ebx [ebp+lpParam] +
push ebx  +
mov ebx [ebp+hInstance] +
push ebx  +
mov ebx [ebp+hMenu] +
push ebx  +
mov ebx [ebp+hWndParent] +
push ebx  +
mov ebx [ebp+nHeight] +
push ebx  +
mov ebx [ebp+nWidth] +
push ebx  +
mov ebx [ebp+Y] +
push ebx  +
mov ebx [ebp+X] +
push ebx  +
push ecx  +
push edx  +
push eax  +
push 0  +
call CreateWindowExA  +
pop ebx  +
pop ebp  +
retn 20h  +
***
push ecx  +
push ebx  +
push esi  +
push edi  +
mov edi ecx +
mov esi edx +
mov [ebp+var_4] eax +
push offset WindowName  +
push offset ClassName  +
call FindWindowA  +
mov ebx eax +
push offset String  +
call RegisterWindowMessageA  +
mov edx [ebp+var_4] +
mov [edx] eax +
push offset aMsh_wheelsuppo  +
call RegisterWindowMessageA  +
mov [esi] eax +
push offset aMsh_scroll_lin  +
call RegisterWindowMessageA  +
mov [edi] eax +
cmp dword ptr [esi] 0 +
jz loc_497973  +
test ebx ebx +
jz loc_497973  +
push 0  +
push 0  +
mov eax [esi] +
push eax  +
push ebx  +
call SendMessageA  +
mov edx [ebp+arg_4] +
mov [edx] eax +
jmp loc_49797A  +
mov eax [ebp+arg_4] +
xor edx edx +
mov [eax] edx +
cmp dword ptr [edi] 0 +
jz loc_497997  +
test ebx ebx +
jz loc_497997  +
push 0  +
push 0  +
mov eax [edi] +
push eax  +
push ebx  +
call SendMessageA  +
mov edx [ebp+arg_0] +
mov [edx] eax +
jmp loc_4979A0  +
mov eax [ebp+arg_0] +
mov dword ptr [eax] 3 +
mov eax ebx +
pop edi  +
pop esi  +
pop ebx  +
pop ecx  +
pop ebp  +
retn 8  +
***
xor eax eax +
push ebp  +
push offset loc_497A2D  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
inc dword_4F1904  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_497A34  +
retn   +
jmp unknown_libname_539  +
jmp locret_497A2C  +
pop ebp  +
retn   +
***
xor eax eax +
push ebp  +
push offset loc_497A65  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
inc dword_4F1908  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_497A6C  +
retn   +
jmp unknown_libname_539  +
jmp locret_497A64  +
pop ebp  +
retn   +
***
xor eax eax +
push ebp  +
push offset loc_497A9D  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
inc dword_4F190C  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_497AA4  +
retn   +
jmp unknown_libname_539  +
jmp locret_497A9C  +
pop ebp  +
retn   +
***
xor eax eax +
push ebp  +
push offset loc_497AD5  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
inc dword_4F1910  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_497ADC  +
retn   +
jmp unknown_libname_539  +
jmp locret_497AD4  +
pop ebp  +
retn   +
***
xor eax eax +
push ebp  +
push offset loc_497B0D  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
inc dword_4F1914  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_497B14  +
retn   +
jmp unknown_libname_539  +
jmp locret_497B0C  +
pop ebp  +
retn   +
***
xor eax eax +
push ebp  +
push offset loc_497B45  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
inc dword_4F1918  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_497B4C  +
retn   +
jmp unknown_libname_539  +
jmp locret_497B44  +
pop ebp  +
retn   +
***
push ecx  +
push ebx  +
push esi  +
push edi  +
mov [ebp+var_4] ecx +
mov edi edx +
mov ebx eax +
mov eax [ebp+var_4] +
call unknown_libname_549  +
xor eax eax +
push ebp  +
push offset loc_497C17  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
xor esi esi +
xor eax eax +
mov al bl +
cmp byte_4F1944[eax] 0 +
jnz loc_497C01  +
cmp dword_4F1940 0 +
jz loc_497BE1  +
test bl bl +
jnz loc_497BC9  +
cmp byte_4F194C 0 +
jnz loc_497BC9  +
mov ecx offset _str_GetMonitorInfoA.Text +
mov edx dword_4F192C +
mov al 4 +
call @MultiMon@_16387  +
mov dword_4F192C eax +
cmp byte_4F194C 0 +
jnz loc_497BC9  +
lea eax [ebp+var_4] +
call unknown_libname_540  +
mov eax [ebp+var_4] +
call unknown_libname_550  +
push eax  +
mov eax dword_4F1940 +
push eax  +
call GetProcAddress  +
mov esi eax +
jmp loc_497BE3  +
xor esi esi +
test esi esi +
jnz loc_497BEB  +
mov esi edi +
jmp loc_497BF6  +
test bl bl +
jz loc_497BF6  +
mov byte_4F194C 1 +
xor eax eax +
mov al bl +
mov byte_4F1944[eax] 1 +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_497C1E  +
lea eax [ebp+var_4] +
call unknown_libname_540  +
retn   +
jmp unknown_libname_539  +
jmp loc_497C0E  +
mov eax esi +
pop edi  +
pop esi  +
pop ebx  +
pop ecx  +
pop ebp  +
retn   +
***
push ebx  +
mov ebx [ebp+arg_0] +
cmp byte_4F1944 0 +
jnz loc_497C70  +
mov ecx offset _str_GetSystemMetric.Text +
mov edx dword_4F191C +
xor eax eax +
call @MultiMon@_16387  +
mov dword_4F191C eax +
push ebx  +
call dword_4F191C  +
jmp loc_497CA7  +
or eax 0FFFFFFFFh +
mov edx ebx +
add edx 0FFFFFFB4h +
sub edx 2 +
jb loc_497C8F  +
jz loc_497C93  +
dec edx  +
jz loc_497C97  +
dec edx  +
sub edx 2 +
jnb loc_497C9C  +
mov eax 1 +
jmp loc_497C9C  +
xor eax eax +
jmp loc_497C9C  +
xor ebx ebx +
jmp loc_497C9C  +
mov ebx 1 +
cmp eax 0FFFFFFFFh +
jnz loc_497CA7  +
push ebx  +
call GetSystemMetrics  +
pop ebx  +
pop ebp  +
retn 4  +
***
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_4] +
mov ebx [ebp+arg_0] +
cmp byte_4F1946 0 +
jnz loc_497D00  +
mov ecx offset _str_MonitorFromRect.Text +
mov edx dword_4F1924 +
mov al 2 +
call @MultiMon@_16387  +
mov dword_4F1924 eax +
push edi  +
push ebx  +
call dword_4F1924  +
mov esi eax +
jmp loc_497D35  +
xor esi esi +
mov eax edi +
and eax 3 +
test al al +
jnz loc_497D30  +
cmp dword ptr [ebx+8] 0 +
jle loc_497D35  +
cmp dword ptr [ebx+0Ch] 0 +
jle loc_497D35  +
push 0  +
call dword_4F191C  +
cmp eax [ebx] +
jle loc_497D35  +
push 1  +
call dword_4F191C  +
cmp eax [ebx+4] +
jle loc_497D35  +
mov esi 12340042h +
mov eax esi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
add esp 0FFFFFFD4h +
push ebx  +
push esi  +
mov ebx [ebp+arg_4] +
mov esi [ebp+arg_0] +
cmp byte_4F1945 0 +
jnz loc_497D90  +
mov ecx offset _str_MonitorFromWind.Text +
mov edx dword_4F1920 +
mov al 1 +
call @MultiMon@_16387  +
mov dword_4F1920 eax +
push ebx  +
push esi  +
call dword_4F1920  +
jmp loc_497DCA  +
mov eax ebx +
and eax 3 +
test al al +
jz loc_497DA0  +
mov eax 12340042h +
jmp loc_497DCA  +
push esi  +
call IsIconic  +
test eax eax +
jz loc_497DB6  +
lea eax [ebp+Rect] +
push eax  +
push esi  +
call GetWindowPlacement  +
jmp loc_497DC0  +
lea eax [ebp-10h] +
push eax  +
push esi  +
call GetWindowRect  +
push ebx  +
lea eax [ebp-10h] +
push eax  +
call @MultiMon@_16389  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 8  +
***
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_8] +
cmp byte_4F1947 0 +
jnz loc_497E2A  +
mov ecx offset _str_MonitorFromPoin.Text +
mov edx dword_4F1928 +
mov al 3 +
call @MultiMon@_16387  +
mov dword_4F1928 eax +
push edi  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call dword_4F1928  +
mov ebx eax +
jmp loc_497E60  +
xor ebx ebx +
mov eax edi +
and eax 3 +
test al al +
jnz loc_497E5B  +
mov esi [ebp+arg_0] +
test esi esi +
jl loc_497E60  +
push 0  +
call dword_4F191C  +
cmp esi eax +
jge loc_497E60  +
cmp [ebp+arg_4] 0 +
jl loc_497E60  +
push 1  +
call dword_4F191C  +
cmp eax [ebp+arg_4] +
jle loc_497E60  +
mov ebx 12340042h +
mov eax ebx +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
add esp 0FFFFFFF0h +
push ebx  +
push esi  +
push edi  +
mov esi [ebp+arg_4] +
mov edi [ebp+arg_0] +
cmp byte_4F1948 0 +
jnz loc_497EC3  +
mov ecx offset _str_GetMonitorInfo.Text +
mov edx dword_4F192C +
mov al 4 +
call @MultiMon@_16387  +
mov dword_4F192C eax +
push esi  +
push edi  +
call dword_4F192C  +
mov ebx eax +
jmp loc_497F31  +
xor ebx ebx +
cmp edi 12340042h +
jnz loc_497F31  +
test esi esi +
jz loc_497F31  +
cmp dword ptr [esi] 28h +
jb loc_497F31  +
push 0  +
lea eax [ebp+pvParam] +
push eax  +
push 0  +
push 30h  +
call SystemParametersInfoA  +
test eax eax +
jz loc_497F31  +
xor eax eax +
mov [esi+4] eax +
xor eax eax +
mov [esi+8] eax +
push 0  +
call dword_4F191C  +
mov [esi+0Ch] eax +
push 1  +
call dword_4F191C  +
mov [esi+10h] eax +
push esi  +
lea edi [esi+14h] +
lea esi [ebp+pvParam] +
movs   +
movs   +
movs   +
movs   +
pop esi  +
mov dword ptr [esi+24h] 1 +
cmp dword ptr [esi] 4Ch +
jb loc_497F2F  +
push offset String2  +
lea eax [esi+28h] +
push eax  +
call lstrcpyA  +
mov bl 1 +
mov eax ebx +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 8  +
***
add esp 0FFFFFFF0h +
push ebx  +
push esi  +
push edi  +
mov esi [ebp+arg_4] +
mov edi [ebp+arg_0] +
cmp byte_4F1949 0 +
jnz loc_497F97  +
mov ecx offset _str_GetMonitorInfoA_0.Text +
mov edx dword_4F1930 +
mov al 5 +
call @MultiMon@_16387  +
mov dword_4F1930 eax +
push esi  +
push edi  +
call dword_4F1930  +
mov ebx eax +
jmp loc_498005  +
xor ebx ebx +
cmp edi 12340042h +
jnz loc_498005  +
test esi esi +
jz loc_498005  +
cmp dword ptr [esi] 28h +
jb loc_498005  +
push 0  +
lea eax [ebp+pvParam] +
push eax  +
push 0  +
push 30h  +
call SystemParametersInfoA  +
test eax eax +
jz loc_498005  +
xor eax eax +
mov [esi+4] eax +
xor eax eax +
mov [esi+8] eax +
push 0  +
call dword_4F191C  +
mov [esi+0Ch] eax +
push 1  +
call dword_4F191C  +
mov [esi+10h] eax +
push esi  +
lea edi [esi+14h] +
lea esi [ebp+pvParam] +
movs   +
movs   +
movs   +
movs   +
pop esi  +
mov dword ptr [esi+24h] 1 +
cmp dword ptr [esi] 4Ch +
jb loc_498003  +
push offset aDisplay_0  +
lea eax [esi+28h] +
push eax  +
call lstrcpyA  +
mov bl 1 +
mov eax ebx +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 8  +
***
add esp 0FFFFFFF0h +
push ebx  +
push esi  +
push edi  +
mov esi [ebp+arg_4] +
mov edi [ebp+arg_0] +
cmp byte_4F194A 0 +
jnz loc_49806B  +
mov ecx offset _str_GetMonitorInfoW.Text +
mov edx dword_4F1934 +
mov al 6 +
call @MultiMon@_16387  +
mov dword_4F1934 eax +
push esi  +
push edi  +
call dword_4F1934  +
mov ebx eax +
jmp loc_4980D9  +
xor ebx ebx +
cmp edi 12340042h +
jnz loc_4980D9  +
test esi esi +
jz loc_4980D9  +
cmp dword ptr [esi] 28h +
jb loc_4980D9  +
push 0  +
lea eax [ebp+pvParam] +
push eax  +
push 0  +
push 30h  +
call SystemParametersInfoA  +
test eax eax +
jz loc_4980D9  +
xor eax eax +
mov [esi+4] eax +
xor eax eax +
mov [esi+8] eax +
push 0  +
call dword_4F191C  +
mov [esi+0Ch] eax +
push 1  +
call dword_4F191C  +
mov [esi+10h] eax +
push esi  +
lea edi [esi+14h] +
lea esi [ebp+pvParam] +
movs   +
movs   +
movs   +
movs   +
pop esi  +
mov dword ptr [esi+24h] 1 +
cmp dword ptr [esi] 4Ch +
jb loc_4980D7  +
push offset aDisplay_1  +
lea eax [esi+28h] +
push eax  +
call lstrcpyA  +
mov bl 1 +
mov eax ebx +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 8  +
***
add esp 0FFFFFFD4h +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_4] +
mov esi [ebp+arg_0] +
cmp byte_4F194B 0 +
jnz loc_49814A  +
mov ecx offset _str_EnumDisplayMoni.Text +
mov edx dword_4F1938 +
mov al 7 +
call @MultiMon@_16387  +
mov dword_4F1938 eax +
mov eax [ebp+arg_C] +
push eax  +
mov eax [ebp+arg_8] +
push eax  +
push edi  +
push esi  +
call dword_4F1938  +
mov ebx eax +
jmp loc_49820C  +
xor ebx ebx +
cmp [ebp+arg_8] 0 +
jz loc_49820C  +
xor eax eax +
mov [ebp+rcSrc1.left] eax +
xor eax eax +
mov [ebp+rcSrc1.top] eax +
push 0  +
call dword_4F191C  +
mov [ebp+rcSrc1.right] eax +
push 1  +
call dword_4F191C  +
mov [ebp+rcSrc1.bottom] eax +
test esi esi +
jz loc_4981DF  +
lea eax [ebp+rcSrc2] +
push eax  +
push esi  +
call GetClipBox  +
mov [ebp+var_C] eax +
lea eax [ebp+var_8] +
push eax  +
push esi  +
call GetDCOrgEx  +
test eax eax +
jz loc_49820C  +
mov eax [ebp+var_8.y] +
neg eax  +
push eax  +
mov eax [ebp+var_8.x] +
neg eax  +
push eax  +
lea eax [ebp+rcSrc1] +
push eax  +
call OffsetRect  +
lea eax [ebp+rcSrc2] +
push eax  +
lea eax [ebp+rcSrc1] +
push eax  +
lea eax [ebp+rcSrc1] +
push eax  +
call IntersectRect  +
test eax eax +
jz loc_4981C3  +
test edi edi +
jz loc_4981F9  +
push edi  +
lea eax [ebp+rcSrc1] +
push eax  +
lea eax [ebp+rcSrc1] +
push eax  +
call IntersectRect  +
test eax eax +
jnz loc_4981F9  +
cmp [ebp+var_C] 1 +
jnz loc_49820C  +
mov bl 1 +
jmp loc_49820C  +
test edi edi +
jz loc_4981F9  +
push edi  +
lea eax [ebp+rcSrc1] +
push eax  +
lea eax [ebp+rcSrc1] +
push eax  +
call IntersectRect  +
test eax eax +
jnz loc_4981F9  +
mov bl 1 +
jmp loc_49820C  +
mov eax [ebp+arg_C] +
push eax  +
lea eax [ebp+rcSrc1] +
push eax  +
push esi  +
push 12340042h  +
call [ebp+arg_8]  +
mov ebx eax +
mov eax ebx +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 10h  +
***
mov dword_4F1940 eax +
mov dword_4F191C offset @MultiMon@_16388 +
mov dword_4F1920 offset @MultiMon@_16390 +
mov dword_4F1924 offset @MultiMon@_16389 +
mov dword_4F1928 offset @MultiMon@_16391 +
mov dword_4F192C offset sub_497E88 +
mov dword_4F1930 offset sub_497F5C +
mov dword_4F1934 offset sub_498030 +
mov dword_4F1938 offset @MultiMon@_16395 +
retn   +
***
xor eax eax +
push ebp  +
push offset loc_4982C5  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
inc dword_4F193C  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4982CC  +
retn   +
jmp unknown_libname_539  +
jmp locret_4982C4  +
pop ebp  +
retn   +
***
sub dword_4F193C 1 +
jnb locret_4982DE  +
call @MultiMon@_16396  +
retn   +
***
xor eax eax +
push ebp  +
push offset loc_498305  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
inc dword_4F1950  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_49830C  +
retn   +
jmp unknown_libname_539  +
jmp locret_498304  +
pop ebp  +
retn   +
***
sub dword_4F1950 1 +
retn   +
***
xor eax eax +
push ebp  +
push offset loc_498371  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
inc dword_4F1954  +
jnz loc_498363  +
cmp dword_4E69C4 0 +
jz loc_498359  +
mov eax dword_4E69C4 +
push eax  +
call FreeLibrary  +
mov eax offset off_4E69C0 +
call unknown_libname_540  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_498378  +
retn   +
jmp unknown_libname_539  +
jmp locret_498370  +
pop ebp  +
retn   +
***
xor eax eax +
push ebp  +
push offset loc_4983A9  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
inc dword_4F1958  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4983B0  +
retn   +
jmp unknown_libname_539  +
jmp locret_4983A8  +
pop ebp  +
retn   +
***
cmp dword_4F1984 0 +
cmp dword_4F1988 0 +
push offset aComctl32_dll_0  +
call GetModuleHandleA  +
mov ebx eax +
test ebx ebx +
jz loc_498576  +
push offset aInitializeflat  +
push ebx  +
call GetProcAddress  +
mov dword_4F1988 eax +
push offset aUninitializefl  +
push ebx  +
call GetProcAddress  +
mov dword_4F198C eax +
push offset aFlatsb_getscro  +
push ebx  +
call GetProcAddress  +
mov dword_4F1980 eax +
push offset aFlatsb_setscro  +
push ebx  +
call GetProcAddress  +
mov dword_4F1984 eax +
push offset aFlatsb_enables  +
push ebx  +
call GetProcAddress  +
mov esi eax +
mov dword_4F195C esi +
test esi esi +
jnz loc_49848F  +
mov eax offset EnableScrollBar +
mov dword_4F195C eax +
push offset aFlatsb_showscr  +
push ebx  +
call GetProcAddress  +
mov esi eax +
mov dword_4F1960 esi +
test esi esi +
jnz loc_4984B0  +
mov eax offset ShowScrollBar +
mov dword_4F1960 eax +
push offset aFlatsb_getsc_0  +
push ebx  +
call GetProcAddress  +
mov esi eax +
mov dword_4F1964 esi +
test esi esi +
jnz loc_4984D1  +
mov eax offset GetScrollRange +
mov dword_4F1964 eax +
push offset aFlatsb_getsc_1  +
push ebx  +
call GetProcAddress  +
mov esi eax +
mov dword_4F1968 esi +
test esi esi +
jnz loc_4984F2  +
mov eax offset GetScrollInfo +
mov dword_4F1968 eax +
push offset aFlatsb_getsc_2  +
push ebx  +
call GetProcAddress  +
mov esi eax +
mov dword_4F196C esi +
test esi esi +
jnz loc_498513  +
mov eax offset GetScrollPos +
mov dword_4F196C eax +
push offset aFlatsb_setsc_0  +
push ebx  +
call GetProcAddress  +
mov esi eax +
mov dword_4F1970 esi +
test esi esi +
jnz loc_498534  +
mov eax offset SetScrollPos +
mov dword_4F1970 eax +
push offset aFlatsb_setsc_1  +
push ebx  +
call GetProcAddress  +
mov esi eax +
mov dword_4F1974 esi +
test esi esi +
jnz loc_498555  +
mov eax offset SetScrollInfo +
mov dword_4F1974 eax +
push offset aFlatsb_setsc_2  +
push ebx  +
call GetProcAddress  +
mov esi eax +
mov dword_4F1978 esi +
test esi esi +
jnz loc_498576  +
mov eax offset SetScrollRange +
mov dword_4F1978 eax +
pop esi  +
pop ebx  +
retn   +
***
xor eax eax +
push ebp  +
push offset loc_4986C1  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
inc dword_4F197C  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4986C8  +
retn   +
jmp unknown_libname_539  +
jmp locret_4986C0  +
pop ebp  +
retn   +
***
sub dword_4F197C 1 +
jnb locret_4986DA  +
call @FlatSB@_16389  +
retn   +
***
xor eax eax +
push ebp  +
push offset loc_498701  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
inc dword_4F1990  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_498708  +
retn   +
jmp unknown_libname_539  +
jmp locret_498700  +
pop ebp  +
retn   +
***
xor eax eax +
push ebp  +
push offset loc_498739  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
inc dword_4F1994  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_498740  +
retn   +
jmp unknown_libname_539  +
jmp locret_498738  +
pop ebp  +
retn   +
***
cmp dword_4F199C 0 +
jnz locret_498782  +
push offset aComctl32_dll  +
call GetModuleHandleA  +
mov dword_4F199C eax +
cmp dword_4F199C 0 +
jz locret_498782  +
push offset aInitcommoncont  +
mov eax dword_4F199C +
push eax  +
call GetProcAddress  +
mov dword_4F19A0 eax +
retn   +
***
cmp dword_4F199C 0 +
jnz loc_4987BD  +
call @Commctrl@_16385  +
cmp dword_4F19A0 0 +
jz loc_4987D1  +
push ebx  +
call dword_4F19A0  +
test eax eax +
jnz loc_4987D5  +
xor eax eax +
jmp loc_4987D7  +
mov al 1 +
neg al  +
sbb eax eax +
pop ebx  +
retn   +
***
push eax  +
call ImageList_ReplaceIcon  +
retn   +
***
mov esi edx +
mov ebx eax +
push esi  +
push 0  +
push 1001h  +
push ebx  +
call SendMessageA  +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
mov edi ecx +
mov esi edx +
mov ebx eax +
push esi  +
push edi  +
push 1003h  +
push ebx  +
call SendMessageA  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push 1004h  +
mov esi edx +
mov ebx eax +
push esi  +
push 0  +
push 1005h  +
push ebx  +
call SendMessageA  +
pop esi  +
pop ebx  +
retn   +
***
mov esi edx +
mov ebx eax +
push esi  +
push 0  +
push 1006h  +
push ebx  +
call SendMessageA  +
pop esi  +
pop ebx  +
retn   +
***
mov esi edx +
mov ebx eax +
push esi  +
push 0  +
push 1007h  +
push ebx  +
call SendMessageA  +
pop esi  +
pop ebx  +
retn   +
***
mov esi edx +
mov ebx eax +
push 0  +
push esi  +
push 1008h  +
push ebx  +
call SendMessageA  +
pop esi  +
pop ebx  +
retn   +
***
push 0  +
push edi  +
mov edi ecx +
mov esi edx +
mov ebx eax +
xor edx edx +
mov eax edi +
call unknown_libname_380  +
push eax  +
push esi  +
push 100Ch  +
push ebx  +
call SendMessageA  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push 100Dh  +
push eax  +
call SendMessageA  +
retn   +
***
push ebx  +
push esi  +
push edi  +
mov ebx ecx +
mov edi edx +
mov esi eax +
test ebx ebx +
jz loc_498904  +
mov eax [ebp+arg_0] +
mov [ebx] eax +
push ebx  +
push edi  +
push 100Eh  +
push esi  +
call SendMessageA  +
jmp loc_498912  +
push 0  +
push edi  +
push 100Eh  +
push esi  +
call SendMessageA  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
push 1012h  +
push eax  +
call SendMessageA  +
retn   +
***
push edi  +
mov edi ecx +
mov esi edx +
mov ebx eax +
push edi  +
push esi  +
push 1015h  +
push ebx  +
call SendMessageA  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov esi edx +
mov ebx eax +
push 0  +
push esi  +
push 1016h  +
push ebx  +
call SendMessageA  +
pop esi  +
pop ebx  +
retn   +
***
push 0  +
push edi  +
mov edi ecx +
mov esi edx +
mov ebx eax +
push edi  +
push esi  +
push 101Ah  +
push ebx  +
call SendMessageA  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push 101Bh  +
push eax  +
call SendMessageA  +
retn   +
***
mov esi edx +
mov ebx eax +
push 0  +
push esi  +
push 101Ch  +
push ebx  +
call SendMessageA  +
pop esi  +
pop ebx  +
retn   +
***
mov esi edx +
mov ebx eax +
push 0  +
push esi  +
push 101Dh  +
push ebx  +
call SendMessageA  +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
mov edi ecx +
mov esi edx +
mov ebx eax +
xor edx edx +
mov eax edi +
call unknown_libname_380  +
push eax  +
push esi  +
push 101Eh  +
push ebx  +
call SendMessageA  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
mov edi ecx +
mov esi edx +
mov ebx eax +
push edi  +
push esi  +
push 1021h  +
push ebx  +
call SendMessageA  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov esi edx +
mov ebx eax +
push esi  +
push 0  +
push 1024h  +
push ebx  +
call SendMessageA  +
pop esi  +
pop ebx  +
retn   +
***
mov esi edx +
mov ebx eax +
push esi  +
push 0  +
push 1026h  +
push ebx  +
call SendMessageA  +
pop esi  +
pop ebx  +
retn   +
***
push 1027h  +
mov esi edx +
mov ebx eax +
push esi  +
push 0  +
push 1029h  +
push ebx  +
call SendMessageA  +
pop esi  +
pop ebx  +
retn   +
***
mov esi edx +
add esp 0FFFFFFD8h +
push ebx  +
push esi  +
mov esi edx +
mov ebx eax +
mov eax [ebp+arg_0] +
mov [ebp+var_18] eax +
mov [ebp+var_1C] ecx +
lea eax [ebp+lParam] +
push eax  +
push esi  +
push 102Bh  +
push ebx  +
call SendMessageA  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 4  +
***
push 102Ch  +
push eax  +
call SendMessageA  +
retn   +
***
mov esi edx +
mov ebx eax +
push 0F000h  +
push esi  +
push 102Ch  +
push ebx  +
call SendMessageA  +
shr eax 0Ch +
dec eax  +
pop esi  +
pop ebx  +
retn   +
***
add esp 0FFFFFFD8h +
mov [esp+28h+var_18] 0F000h +
and ecx 1 +
inc ecx  +
shl ecx 0Ch +
mov [esp+28h+var_1C] ecx +
mov ecx esp +
push ecx  +
push edx  +
push 102Bh  +
push eax  +
call SendMessageA  +
add esp 28h +
retn   +
***
add esp 0FFFFFFD8h +
push ebx  +
push esi  +
mov esi edx +
mov ebx eax +
mov [ebp+var_20] ecx +
mov eax [ebp+arg_0] +
mov [ebp+var_14] eax +
lea eax [ebp+lParam] +
push eax  +
push esi  +
push 102Eh  +
push ebx  +
call SendMessageA  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 4  +
***
push 102Fh  +
push eax  +
call SendMessageA  +
retn   +
***
push 102Fh  +
push eax  +
call SendMessageA  +
retn   +
***
push edi  +
mov edi ecx +
mov esi edx +
mov ebx eax +
push esi  +
push edi  +
push 1030h  +
push ebx  +
call SendMessageA  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push 1032h  +
mov esi edx +
mov ebx eax +
push esi  +
push 0  +
push 1036h  +
push ebx  +
call SendMessageA  +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
mov edi ecx +
mov esi edx +
mov ebx eax +
push edi  +
push esi  +
push 103Ah  +
push ebx  +
call SendMessageA  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
mov edi ecx +
mov esi edx +
mov ebx eax +
push edi  +
push esi  +
push 103Bh  +
push ebx  +
call SendMessageA  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
mov edi ecx +
mov esi edx +
mov ebx eax +
push edi  +
push esi  +
push 1041h  +
push ebx  +
call SendMessageA  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov esi edx +
mov ebx eax +
push esi  +
push 0  +
push 1100h  +
push ebx  +
call SendMessageA  +
pop esi  +
pop ebx  +
retn   +
***
mov esi edx +
mov ebx eax +
push esi  +
push 0  +
push 1101h  +
push ebx  +
call SendMessageA  +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
mov edi ecx +
mov esi edx +
mov ebx eax +
push esi  +
push edi  +
push 1102h  +
push ebx  +
call SendMessageA  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
mov edi ecx +
mov esi edx +
mov ebx eax +
push esi  +
push edi  +
push 110Ah  +
push ebx  +
call SendMessageA  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov ecx 4 +
call @Commctrl@TreeView_GetNextItem$qqruip9_TREEITEMi  +
retn   +
***
mov ecx 1 +
call @Commctrl@TreeView_GetNextItem$qqruip9_TREEITEMi  +
retn   +
***
mov ecx 2 +
call @Commctrl@TreeView_GetNextItem$qqruip9_TREEITEMi  +
retn   +
***
mov ecx 3 +
call @Commctrl@TreeView_GetNextItem$qqruip9_TREEITEMi  +
retn   +
***
xor ecx ecx +
xor edx edx +
call @Commctrl@TreeView_GetNextItem$qqruip9_TREEITEMi  +
retn   +
***
push edi  +
mov edi ecx +
mov esi edx +
mov ebx eax +
push esi  +
push edi  +
push 110Bh  +
push ebx  +
call SendMessageA  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov ecx 9 +
call @Commctrl@TreeView_Select$qqruip9_TREEITEMi  +
retn   +
***
mov ecx 8 +
call @Commctrl@TreeView_Select$qqruip9_TREEITEMi  +
retn   +
***
mov esi edx +
mov ebx eax +
push esi  +
push 0  +
push 110Ch  +
push ebx  +
call SendMessageA  +
pop esi  +
pop ebx  +
retn   +
***
mov esi edx +
mov ebx eax +
push esi  +
push 0  +
push 110Dh  +
push ebx  +
call SendMessageA  +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
mov edi ecx +
mov esi edx +
mov ebx eax +
push esi  +
push edi  +
push 1115h  +
push ebx  +
call SendMessageA  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
xor eax eax +
push ebp  +
push offset loc_498D45  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
inc dword_4F1998  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_498D4C  +
retn   +
jmp unknown_libname_539  +
jmp locret_498D44  +
pop ebp  +
retn   +
***
xor eax eax +
push ebp  +
push offset loc_498D7D  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
inc dword_4F19A4  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_498D84  +
retn   +
jmp unknown_libname_539  +
jmp locret_498D7C  +
pop ebp  +
retn   +
***
sub dword_4F19A4 1 +
retn   +
***
add esp 0FFFFFFF4h +
push ebx  +
xor ecx ecx +
mov [ebp+var_C] ecx +
mov [ebp+var_8] edx +
mov [ebp+var_4] eax +
mov eax [ebp+var_4] +
call @System@@IntfAddRef$qqrx45System@_DelphiInterface$t17System@IInterface_  +
mov eax [ebp+var_8] +
test eax eax +
jz loc_499179  +
xor edx edx +
mov [eax] edx +
xor eax eax +
push ebp  +
push offset loc_4991DC  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
cmp dword_4F19AC 0 +
jnz loc_4991A1  +
mov dl 1 +
mov eax ds:off_4990C0 +
call sub_4992CC  +
mov dword_4F19AC eax +
lea ecx [ebp+var_C] +
mov edx [ebp+var_4] +
mov eax dword_4F19AC +
call sub_499340  +
mov edx [ebp+var_C] +
mov eax [ebp+var_8] +
call @System@@IntfCopy$qqrr45System@_DelphiInterface$t17System@IInterface_x45System@_DelphiInterface$t17System@IInterface_  +
xor ebx ebx +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4991E3  +
lea eax [ebp+var_C] +
call unknown_libname_560  +
lea eax [ebp+var_4] +
call unknown_libname_560  +
retn   +
jmp unknown_libname_539  +
jmp loc_4991CB  +
mov eax ebx +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
push ebx  +
mov ebx eax +
test ebx ebx +
jz loc_4991FA  +
xor eax eax +
mov [ebx] eax +
cmp dword_4F19AC 0 +
jnz loc_49921F  +
mov dl 1 +
mov eax ds:off_4990C0 +
call sub_4992CC  +
mov dword_4F19AC eax +
mov eax dword_4F19AC +
push eax  +
call @Corbaobj@TCorbaImplementation@ObjAddRef$qqsv  +
mov eax ebx +
mov edx dword_4F19AC +
test edx edx +
jz loc_49922E  +
sub edx 0FFFFFFF8h +
mov ecx offset dword_499240 +
call @System@@IntfCast$qqrr35System@_DelphiInterface$t8IUnknown_x35System@_DelphiInterface$t8IUnknown_rx5_GUID  +
xor eax eax +
pop ebx  +
pop ebp  +
retn   +
***
push ecx  +
test dl dl +
jz loc_4992DA  +
add esp 0FFFFFFF0h +
call unknown_libname_535  +
mov ebx edx +
mov esi eax +
xor edx edx +
mov eax esi +
call @System@TObject@$bctr$qqrv  +
mov dl 1 +
mov eax ds:off_4A7370 +
call @Contnrs@TObjectList@$bctr$qqrv  +
mov [esi+10h] eax +
mov dl 1 +
mov eax ds:off_4A7370 +
call @Contnrs@TObjectList@$bctr$qqrv  +
mov [esi+14h] eax +
mov dl 1 +
mov eax ds:off_4A7370 +
call @Contnrs@TObjectList@$bctr$qqrv  +
mov [esi+18h] eax +
lea eax [esi+24h] +
call unknown_libname_540  +
mov dword ptr [esi+1Ch] 1 +
mov eax esi +
test bl bl +
jz loc_499338  +
call sub_4BABC8  +
pop large dword ptr fs:0  +
add esp 0Ch +
mov eax esi +
pop esi  +
pop ebx  +
retn   +
***
add esp 0FFFFFFF0h +
push ebx  +
push esi  +
xor ebx ebx +
mov [ebp+var_C] ebx +
mov [ebp+var_10] ebx +
mov [ebp+var_8] ecx +
mov [ebp+var_4] edx +
mov ebx eax +
mov eax [ebp+var_4] +
call @System@@IntfAddRef$qqrx45System@_DelphiInterface$t17System@IInterface_  +
xor eax eax +
push ebp  +
push offset loc_49945A  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov ecx [ebp+var_4] +
mov dl 1 +
mov eax ds:off_498F50 +
call sub_499250  +
mov esi eax +
mov eax [ebx+1Ch] +
mov [esi+8] eax +
mov eax [ebx+10h] +
mov edx [eax+8] +
mov ecx esi +
call sub_4A74F0  +
mov edx [esi+8] +
mov eax [ebp+var_4] +
mov ecx [eax] +
call dword ptr [ecx+24h]  +
lea eax [ebp+var_C] +
call unknown_libname_560  +
mov ecx eax +
mov edx offset dword_499468 +
mov eax [ebp+var_4] +
call @Sysutils@Supports$qqrx35System@_DelphiInterface$t8IUnknown_rx5_GUIDpv  +
test al al +
jz loc_4993DC  +
mov ecx [ebp+var_C] +
mov dl 1 +
mov eax ds:off_498F50 +
call sub_499250  +
mov esi eax +
mov eax [ebx+1Ch] +
mov [esi+8] eax +
mov eax [ebx+14h] +
mov edx [eax+8] +
mov ecx esi +
call sub_4A74F0  +
lea eax [ebp+var_10] +
call unknown_libname_560  +
mov ecx eax +
mov edx offset dword_499468 +
mov eax [ebp+var_4] +
call @Sysutils@Supports$qqrx35System@_DelphiInterface$t8IUnknown_rx5_GUIDpv  +
test al al +
jz loc_49941B  +
mov ecx [ebp+var_10] +
mov dl 1 +
mov eax ds:off_498F50 +
call sub_499250  +
mov esi eax +
mov eax [ebx+1Ch] +
mov [esi+8] eax +
mov eax [ebx+18h] +
mov edx [eax+8] +
mov ecx esi +
call sub_4A74F0  +
inc dword ptr [ebx+1Ch]  +
mov eax [ebp+var_8] +
mov edx ebx +
test edx edx +
jz loc_49942A  +
sub edx 0FFFFFFF8h +
mov ecx offset dword_499468 +
call @System@@IntfCast$qqrr35System@_DelphiInterface$t8IUnknown_x35System@_DelphiInterface$t8IUnknown_rx5_GUID  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_499461  +
lea eax [ebp+var_10] +
call unknown_libname_560  +
lea eax [ebp+var_C] +
call unknown_libname_560  +
lea eax [ebp+var_4] +
call unknown_libname_560  +
retn   +
jmp unknown_libname_539  +
jmp loc_499441  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
push edi  +
mov esi eax +
mov eax [esi+10h] +
mov ebx [eax+8] +
dec ebx  +
test ebx ebx +
jl loc_4994A1  +
inc ebx  +
xor edi edi +
mov edx edi +
mov eax [esi+10h] +
call sub_4A74DC  +
mov eax [eax+4] +
mov edx [eax] +
call dword ptr [edx+2Ch]  +
inc edi  +
dec ebx  +
jnz loc_49948B  +
mov eax [esi+10h] +
mov edx [eax] +
call dword ptr [edx+8]  +
mov eax [esi+14h] +
mov edx [eax] +
call dword ptr [edx+8]  +
mov eax [esi+18h] +
mov edx [eax] +
call dword ptr [edx+8]  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
mov edi eax +
mov eax [edi+10h] +
mov ebx [eax+8] +
dec ebx  +
test ebx ebx +
jl loc_4994E9  +
inc ebx  +
xor esi esi +
mov eax [edi+10h] +
mov edx esi +
call sub_4A74DC  +
mov eax [eax+4] +
mov edx [eax] +
call dword ptr [edx+28h]  +
inc esi  +
dec ebx  +
jnz loc_4994D3  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
add esp 0FFFFFFF0h +
push ebx  +
push esi  +
xor edx edx +
mov [ebp+var_10] edx +
mov ebx eax +
xor eax eax +
push ebp  +
push offset loc_499682  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov esi [ebx+10h] +
cmp dword ptr [esi+8] 1 +
jnz loc_499546  +
mov eax esi +
xor edx edx +
call sub_4A74DC  +
mov eax [eax+4] +
mov edx [eax] +
call dword ptr [edx+18h]  +
test al al +
jz loc_49966C  +
mov eax [ebx+10h] +
xor edx edx +
call sub_4A74DC  +
mov eax [eax+4] +
mov edx [eax] +
call dword ptr [edx+1Ch]  +
jmp loc_49966C  +
cmp dword ptr [ebx+0Ch] 0 +
jz loc_499624  +
mov dl 1 +
mov eax ds:off_49ABC4 +
call @System@TObject@$bctr$qqrv  +
mov [ebp+var_4] eax +
xor eax eax +
push ebp  +
push offset loc_49961D  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov eax [ebx+10h] +
mov eax [eax+8] +
dec eax  +
test eax eax +
jl loc_4995BC  +
inc eax  +
mov [ebp+var_C] eax +
mov [ebp+var_8] 0 +
mov eax [ebx+10h] +
mov edx [ebp+var_8] +
call sub_4A74DC  +
mov esi eax +
mov eax [esi+4] +
mov edx [eax] +
call dword ptr [edx+18h]  +
test al al +
jz loc_4995B4  +
lea edx [ebp+var_10] +
mov eax [esi+4] +
mov ecx [eax] +
call dword ptr [ecx+0Ch]  +
mov edx [ebp+var_10] +
mov ecx esi +
mov eax [ebp+var_4] +
mov esi [eax] +
call dword ptr [esi+3Ch]  +
inc [ebp+var_8]  +
dec [ebp+var_C]  +
jnz loc_499583  +
mov eax [ebp+var_4] +
mov edx [eax] +
call dword ptr [edx+14h]  +
dec eax  +
jle loc_4995F5  +
mov eax [ebp+var_4] +
mov edx [eax] +
call dword ptr [edx+90h]  +
mov eax [ebx+0Ch] +
mov edx [ebp+var_4] +
mov ecx [eax] +
call dword ptr [ecx+10h]  +
mov [ebp+var_8] eax +
mov edx [ebp+var_8] +
mov eax [ebp+var_4] +
mov ecx [eax] +
call dword ptr [ecx+18h]  +
mov eax [eax+4] +
mov edx [eax] +
call dword ptr [edx+1Ch]  +
jmp loc_499607  +
xor edx edx +
mov eax [ebp+var_4] +
mov ecx [eax] +
call dword ptr [ecx+18h]  +
mov eax [eax+4] +
mov edx [eax] +
call dword ptr [edx+1Ch]  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_49966C  +
mov eax [ebp+var_4] +
call @System@TObject@Free$qqrv  +
retn   +
jmp unknown_libname_539  +
jmp loc_499614  +
mov esi [ebx+10h] +
cmp dword ptr [esi+8] 0 +
jle loc_499656  +
mov eax esi +
xor edx edx +
call sub_4A74DC  +
mov eax [eax+4] +
mov edx [eax] +
call dword ptr [edx+18h]  +
test al al +
jz loc_499656  +
mov eax [ebx+10h] +
xor edx edx +
call sub_4A74DC  +
mov eax [eax+4] +
mov edx [eax] +
call dword ptr [edx+1Ch]  +
jmp loc_49966C  +
mov ecx offset off_499134 +
mov dl 1 +
mov eax ds:off_498EEC +
call @Sysutils@Exception@$bctr$qqrp20System@TResStringRec  +
call @System@@RaiseExcept$qqrv  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_499689  +
lea eax [ebp+var_10] +
call unknown_libname_540  +
retn   +
jmp unknown_libname_539  +
jmp loc_499679  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
push 0  +
push 0  +
push 0  +
push 0  +
push ebx  +
push esi  +
push edi  +
mov esi ecx +
mov [ebp+var_4] edx +
mov edi eax +
xor eax eax +
push ebp  +
push offset loc_499775  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
xor ebx ebx +
test esi esi +
jz loc_4996C3  +
lea eax [edi+24h] +
mov edx esi +
call unknown_libname_542  +
mov eax [edi+18h] +
mov eax [eax+8] +
test eax eax +
jle loc_49974C  +
dec eax  +
jnz loc_49970F  +
xor edx edx +
mov eax [edi+18h] +
call sub_4A74DC  +
mov edx [eax+4] +
lea eax [ebp+var_8] +
call @System@@IntfCopy$qqrr45System@_DelphiInterface$t17System@IInterface_x45System@_DelphiInterface$t17System@IInterface_  +
mov ax [ebp+arg_4] +
push eax  +
mov eax [ebp+arg_0] +
push eax  +
lea eax [ebp+var_C] +
mov edx [ebp+var_8] +
mov ecx offset dword_499788 +
call @System@@IntfCast$qqrr35System@_DelphiInterface$t8IUnknown_x35System@_DelphiInterface$t8IUnknown_rx5_GUID  +
mov eax [ebp+var_C] +
mov ecx esi +
mov edx [ebp+var_4] +
mov ebx [eax] +
call dword ptr [ebx+40h]  +
mov ebx eax +
jmp loc_49974C  +
xor edx edx +
mov eax [edi+18h] +
call sub_4A74DC  +
mov edx [eax+4] +
lea eax [ebp+var_8] +
call @System@@IntfCopy$qqrr45System@_DelphiInterface$t17System@IInterface_x45System@_DelphiInterface$t17System@IInterface_  +
mov ax [ebp+arg_4] +
push eax  +
mov eax [ebp+arg_0] +
push eax  +
lea eax [ebp+var_10] +
mov edx [ebp+var_8] +
mov ecx offset dword_499788 +
call @System@@IntfCast$qqrr35System@_DelphiInterface$t8IUnknown_x35System@_DelphiInterface$t8IUnknown_rx5_GUID  +
mov eax [ebp+var_10] +
mov ecx esi +
mov edx [ebp+var_4] +
mov ebx [eax] +
call dword ptr [ebx+40h]  +
mov ebx eax +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_49977C  +
lea eax [ebp+var_10] +
mov edx ds:off_498E74 +
mov ecx 2 +
call @System@@FinalizeArray$qqrpvt1ui  +
lea eax [ebp+var_8] +
call unknown_libname_560  +
retn   +
jmp unknown_libname_539  +
jmp loc_499759  +
mov eax ebx +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 8  +
***
push ebp  +
mov ebp esp +
add esp 0FFFFFFD0h +
push ebx  +
push esi  +
push edi  +
xor ebx ebx +
mov [ebp-30h] ebx +
mov [ebp-20h] ebx +
mov ebx ecx +
mov [ebp-8] edx +
mov [ebp-4] eax +
xor eax eax +
push ebp  +
push offset loc_49999D  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
xor eax eax +
mov [ebp-10h] eax +
xor edi edi +
test ebx ebx +
jz loc_4997D7  +
mov eax [ebp-4] +
add eax 24h +
mov edx ebx +
call unknown_libname_542  +
mov eax [ebp-4] +
mov eax [eax+10h] +
mov eax [eax+8] +
test eax eax +
jle loc_49997F  +
mov ebx eax +
dec ebx  +
test ebx ebx +
jl loc_499816  +
inc ebx  +
xor esi esi +
mov eax [ebp-4] +
mov eax [eax+10h] +
mov edx esi +
call sub_4A74DC  +
mov eax [eax+4] +
mov edx [ebp-8] +
mov ecx [eax] +
call dword ptr [ecx+10h]  +
test eax eax +
jle loc_499812  +
mov [ebp-10h] esi +
inc edi  +
inc esi  +
dec ebx  +
jnz loc_4997F2  +
test edi edi +
jnz loc_499845  +
mov eax [ebp-8] +
call unknown_libname_550  +
mov [ebp-2Ch] eax +
mov byte ptr [ebp-28h] 6 +
lea eax [ebp-2Ch] +
push eax  +
push 0  +
mov ecx offset off_49913C +
mov dl 1 +
mov eax ds:off_498EEC +
call sub_4AC274  +
call @System@@RaiseExcept$qqrv  +
cmp edi 1 +
jnz loc_499863  +
mov eax [ebp-4] +
mov eax [eax+10h] +
mov edx [ebp-10h] +
call sub_4A74DC  +
mov eax [eax+4] +
mov edx [ebp-8] +
mov ecx [eax] +
call dword ptr [ecx+20h]  +
dec edi  +
jle loc_49997F  +
mov dl 1 +
mov eax ds:off_49ABC4 +
call @System@TObject@$bctr$qqrv  +
mov [ebp-14h] eax +
mov eax [ebp-4] +
mov eax [eax+10h] +
mov ebx [eax+8] +
dec ebx  +
test ebx ebx +
jl loc_499905  +
inc ebx  +
xor esi esi +
mov eax [ebp-4] +
mov eax [eax+10h] +
mov edx esi +
call sub_4A74DC  +
mov [ebp-1Ch] eax +
mov eax [ebp-1Ch] +
mov eax [eax+4] +
mov edx [ebp-8] +
mov ecx [eax] +
call dword ptr [ecx+10h]  +
test eax eax +
jle loc_499901  +
mov eax [ebp-1Ch] +
mov eax [eax+4] +
mov edx [ebp-8] +
mov ecx [eax] +
call dword ptr [ecx+14h]  +
mov [ebp-18h] eax +
mov eax [ebp-18h] +
mov edx [eax] +
call dword ptr [edx+14h]  +
dec eax  +
test eax eax +
jl loc_4998F9  +
inc eax  +
mov [ebp-24h] eax +
mov dword ptr [ebp-0Ch] 0 +
lea ecx [ebp-30h] +
mov edx [ebp-0Ch] +
mov eax [ebp-18h] +
mov edi [eax] +
call dword ptr [edi+0Ch]  +
mov edx [ebp-30h] +
mov ecx [ebp-1Ch] +
mov eax [ebp-14h] +
mov edi [eax] +
call dword ptr [edi+3Ch]  +
inc dword ptr [ebp-0Ch]  +
dec dword ptr [ebp-24h]  +
jnz loc_4998D5  +
mov eax [ebp-18h] +
call @System@TObject@Free$qqrv  +
inc esi  +
dec ebx  +
jnz loc_49988A  +
mov eax [ebp-4] +
cmp dword ptr [eax+0Ch] 0 +
jz loc_499953  +
mov eax [ebp-14h] +
mov edx [eax] +
call dword ptr [edx+90h]  +
mov eax [ebp-4] +
mov eax [eax+0Ch] +
mov edx [ebp-14h] +
mov ecx [eax] +
call dword ptr [ecx+0Ch]  +
mov ebx eax +
test ebx ebx +
jl loc_499977  +
mov edx ebx +
mov eax [ebp-14h] +
mov ecx [eax] +
call dword ptr [ecx+18h]  +
mov esi eax +
lea ecx [ebp-20h] +
mov edx ebx +
mov eax [ebp-14h] +
mov ebx [eax] +
call dword ptr [ebx+0Ch]  +
mov eax [esi+4] +
mov edx [ebp-20h] +
mov ecx [eax] +
call dword ptr [ecx+20h]  +
jmp loc_499977  +
xor edx edx +
mov eax [ebp-14h] +
mov ecx [eax] +
call dword ptr [ecx+18h]  +
mov esi eax +
lea ecx [ebp-20h] +
xor edx edx +
mov eax [ebp-14h] +
mov ebx [eax] +
call dword ptr [ebx+0Ch]  +
mov eax [esi+4] +
mov edx [ebp-20h] +
mov ecx [eax] +
call dword ptr [ecx+20h]  +
mov eax [ebp-14h] +
call @System@TObject@Free$qqrv  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4999A4  +
lea eax [ebp-30h] +
call unknown_libname_540  +
lea eax [ebp-20h] +
call unknown_libname_540  +
retn   +
***
jmp unknown_libname_539  +
***
jmp loc_49998C  +
***
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
add esp 0FFFFFFE8h +
push ebx  +
push esi  +
push edi  +
xor ebx ebx +
mov [ebp+var_18] ebx +
mov [ebp+var_14] ebx +
mov [ebp+var_10] ebx +
mov [ebp+var_8] ecx +
mov [ebp+var_4] edx +
mov esi eax +
xor eax eax +
push ebp  +
push offset loc_499A9F  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
cmp [ebp+var_8] 0 +
jz loc_4999E7  +
lea eax [esi+24h] +
mov edx [ebp+var_8] +
call unknown_libname_542  +
mov eax [esi+14h] +
mov eax [eax+8] +
test eax eax +
jnz loc_499A09  +
mov ecx offset off_499144 +
mov dl 1 +
mov eax ds:off_498EEC +
call @Sysutils@Exception@$bctr$qqrp20System@TResStringRec  +
call @System@@RaiseExcept$qqrv  +
jmp loc_499A76  +
mov ebx eax +
dec ebx  +
test ebx ebx +
jl loc_499A76  +
inc ebx  +
mov [ebp+var_C] 0 +
mov edx [ebp+var_C] +
mov eax [esi+14h] +
call sub_4A74DC  +
mov edx [eax+4] +
lea eax [ebp+var_10] +
call @System@@IntfCopy$qqrr45System@_DelphiInterface$t17System@IInterface_x45System@_DelphiInterface$t17System@IInterface_  +
lea eax [ebp+var_14] +
mov edx [ebp+var_10] +
mov ecx offset dword_499AB0 +
call @System@@IntfCast$qqrr35System@_DelphiInterface$t8IUnknown_x35System@_DelphiInterface$t8IUnknown_rx5_GUID  +
mov eax [ebp+var_14] +
mov ecx [ebp+var_8] +
mov edx [ebp+var_4] +
mov edi [eax] +
call dword ptr [edi+38h]  +
test al al +
jz loc_499A70  +
lea eax [ebp+var_18] +
mov edx [ebp+var_10] +
mov ecx offset dword_499AB0 +
call @System@@IntfCast$qqrr35System@_DelphiInterface$t8IUnknown_x35System@_DelphiInterface$t8IUnknown_rx5_GUID  +
mov eax [ebp+var_18] +
mov ecx [ebp+var_8] +
mov edx [ebp+var_4] +
mov ebx [eax] +
call dword ptr [ebx+3Ch]  +
jmp loc_499A76  +
inc [ebp+var_C]  +
dec ebx  +
jnz loc_499A18  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_499AA6  +
lea eax [ebp+var_18] +
mov edx ds:off_498E38 +
mov ecx 2 +
call @System@@FinalizeArray$qqrpvt1ui  +
lea eax [ebp+var_10] +
call unknown_libname_560  +
retn   +
jmp unknown_libname_539  +
jmp loc_499A83  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
push ebp  +
mov ebp esp +
push 0  +
push 0  +
push 0  +
push 0  +
push ebx  +
push esi  +
push edi  +
mov ebx ecx +
mov [ebp-4] edx +
mov esi eax +
xor eax eax +
push ebp  +
push offset loc_499BA3  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
test ebx ebx +
jz loc_499AF9  +
lea eax [esi+24h] +
mov edx ebx +
call unknown_libname_542  +
mov eax [esi+14h] +
mov eax [eax+8] +
test eax eax +
jnz loc_499B1B  +
mov ecx offset off_49914C +
mov dl 1 +
mov eax ds:off_498EEC +
call @Sysutils@Exception@$bctr$qqrp20System@TResStringRec  +
call @System@@RaiseExcept$qqrv  +
jmp loc_499B7A  +
mov ebx eax +
dec ebx  +
test ebx ebx +
jl loc_499B7A  +
inc ebx  +
xor edi edi +
mov edx edi +
mov eax [esi+14h] +
call sub_4A74DC  +
mov edx [eax+4] +
lea eax [ebp-8] +
call @System@@IntfCopy$qqrr45System@_DelphiInterface$t17System@IInterface_x45System@_DelphiInterface$t17System@IInterface_  +
lea eax [ebp-0Ch] +
mov edx [ebp-8] +
mov ecx offset dword_499BB4 +
call @System@@IntfCast$qqrr35System@_DelphiInterface$t8IUnknown_x35System@_DelphiInterface$t8IUnknown_rx5_GUID  +
mov eax [ebp-0Ch] +
mov edx [ebp-4] +
mov ecx [eax] +
call dword ptr [ecx+30h]  +
test al al +
jz loc_499B76  +
lea eax [ebp-10h] +
mov edx [ebp-8] +
mov ecx offset dword_499BB4 +
call @System@@IntfCast$qqrr35System@_DelphiInterface$t8IUnknown_x35System@_DelphiInterface$t8IUnknown_rx5_GUID  +
mov eax [ebp-10h] +
mov edx [ebp-4] +
mov ecx [eax] +
call dword ptr [ecx+34h]  +
jmp loc_499B7A  +
inc edi  +
dec ebx  +
jnz loc_499B25  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_499BAA  +
lea eax [ebp-10h] +
mov edx ds:off_498E38 +
mov ecx 2 +
call @System@@FinalizeArray$qqrpvt1ui  +
lea eax [ebp-8] +
call unknown_libname_560  +
retn   +
***
jmp unknown_libname_539  +
***
jmp loc_499B87  +
***
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
mov [ebp-4] edx +
mov ebx eax +
mov eax [ebp-4] +
call @System@@IntfAddRef$qqrx45System@_DelphiInterface$t17System@IInterface_  +
xor eax eax +
push ebp  +
push offset loc_499C1C  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
cmp dword ptr [ebx+0Ch] 0 +
jz loc_499BF2  +
lea eax [ebx+0Ch] +
call unknown_libname_560  +
lea eax [ebx+0Ch] +
mov edx [ebp-4] +
call @System@@IntfCopy$qqrr45System@_DelphiInterface$t17System@IInterface_x45System@_DelphiInterface$t17System@IInterface_  +
mov eax [ebp-4] +
push eax  +
mov eax [eax] +
call dword ptr [eax+4]  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_499C23  +
lea eax [ebp-4] +
call unknown_libname_560  +
retn   +
***
jmp unknown_libname_539  +
***
jmp loc_499C13  +
***
pop ebx  +
pop ecx  +
pop ebp  +
retn   +
***
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
push edi  +
mov [ebp-4] ecx +
mov edi edx +
mov ebx eax +
mov esi [ebp+0Ch] +
mov eax [ebp-4] +
call unknown_libname_549  +
xor eax eax +
push ebp  +
push offset loc_499CD2  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
cmp dword ptr [ebp-4] 0 +
jz loc_499C60  +
lea eax [ebx+24h] +
mov edx [ebp-4] +
call unknown_libname_542  +
mov eax esi +
dec ax  +
jz loc_499C79  +
dec ax  +
jz loc_499C97  +
dec ax  +
jz loc_499CA0  +
sub ax 5 +
jz loc_499C88  +
jmp loc_499CA9  +
mov ecx [ebp-4] +
mov edx [ebp+8] +
mov eax ebx +
call sub_4999AC  +
jmp loc_499CBA  +
mov ecx [ebp-4] +
mov edx [ebp+8] +
mov eax ebx +
call sub_4999AC  +
jmp loc_499CBA  +
mov eax ebx +
call sub_4994C0  +
jmp loc_499CBA  +
mov eax ebx +
call sub_4994F0  +
jmp loc_499CBA  +
push esi  +
mov eax [ebp+8] +
push eax  +
mov ecx [ebp-4] +
mov edx edi +
mov eax ebx +
call sub_499690  +
mov bl 1 +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_499CD9  +
lea eax [ebp-4] +
call unknown_libname_540  +
retn   +
***
jmp unknown_libname_539  +
***
jmp loc_499CC9  +
***
mov eax ebx +
pop edi  +
pop esi  +
pop ebx  +
pop ecx  +
pop ebp  +
retn 8  +
***
mov eax [eax+20h] +
retn   +
***
push ebx  +
push esi  +
mov esi edx +
mov ebx eax +
mov eax esi +
mov edx [ebx+24h] +
call unknown_libname_542  +
pop esi  +
pop ebx  +
retn   +
***
push ebx  +
push esi  +
push edi  +
push ebp  +
mov ebp edx +
mov edi eax +
mov eax [edi+10h] +
mov esi [eax+8] +
dec esi  +
test esi esi +
jl loc_499D2F  +
inc esi  +
xor ebx ebx +
mov eax [edi+10h] +
mov edx ebx +
call sub_4A74DC  +
cmp ebp [eax+8] +
jnz loc_499D2B  +
mov eax [edi+10h] +
mov edx ebx +
call @Classes@TList@Delete$qqri  +
inc ebx  +
dec esi  +
jnz loc_499D12  +
mov eax [edi+14h] +
mov esi [eax+8] +
dec esi  +
test esi esi +
jl loc_499D5A  +
inc esi  +
xor ebx ebx +
mov eax [edi+14h] +
mov edx ebx +
call sub_4A74DC  +
cmp ebp [eax+8] +
jnz loc_499D56  +
mov eax [edi+14h] +
mov edx ebx +
call @Classes@TList@Delete$qqri  +
inc ebx  +
dec esi  +
jnz loc_499D3D  +
mov eax [edi+18h] +
mov esi [eax+8] +
dec esi  +
test esi esi +
jl loc_499D85  +
inc esi  +
xor ebx ebx +
mov eax [edi+18h] +
mov edx ebx +
call sub_4A74DC  +
cmp ebp [eax+8] +
jnz loc_499D81  +
mov eax [edi+18h] +
mov edx ebx +
call @Classes@TList@Delete$qqri  +
inc ebx  +
dec esi  +
jnz loc_499D68  +
pop ebp  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
call unknown_libname_536  +
mov ebx edx +
mov esi eax +
mov eax esi +
call sub_499478  +
cmp dword ptr [esi+0Ch] 0 +
jz loc_499DAC  +
lea eax [esi+0Ch] +
call unknown_libname_560  +
mov eax [esi+18h] +
call @System@TObject@Free$qqrv  +
mov eax [esi+14h] +
call @System@TObject@Free$qqrv  +
mov eax [esi+10h] +
call @System@TObject@Free$qqrv  +
mov edx ebx +
and dl 0FCh +
mov eax esi +
call sub_4BA7FC  +
test bl bl +
jle loc_499DDB  +
mov eax esi +
call @System@@ClassDestroy$qqrp14System@TObject  +
pop esi  +
pop ebx  +
retn   +
***
xor eax eax +
sub dword_4F19A8 1 +
retn   +
***
or edx [eax+edx*2+65h] +
jb near ptr byte_49A7C7  +
imul esi [ebx+74h] +
nop   +
int 3  +
add dword ptr [esp+4] 0FFFFFFF8h +
mov eax [esp+4] +
mov eax [eax] +
jmp dword ptr [eax+0Ch]  +
***
add dword ptr [esp+4] 0FFFFFFF8h +
jmp loc_49D568  +
***
add dword ptr [esp+4] 0FFFFFFF8h +
jmp loc_49D588  +
***
push edi  +
mov [esp+4+var_2] dx +
mov eax [esp] +
pop edx  +
retn   +
***
push ebx  +
push esi  +
push edi  +
mov edi ecx +
mov esi edx +
mov ebx eax +
mov eax [ebp+arg_4] +
push eax  +
mov eax [ebp+arg_0] +
push eax  +
mov ecx edi +
mov edx esi +
mov eax ebx +
call sub_4A7768  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
push ebx  +
push esi  +
push edi  +
mov edi ecx +
mov esi edx +
mov ebx eax +
mov eax [ebp+arg_4] +
push eax  +
mov eax [ebp+arg_0] +
push eax  +
mov ecx edi +
mov edx esi +
mov eax ebx +
call @Classes@Bounds$qqriiii  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
cmp dword ptr [eax] 0FFFFFFFFh +
jnz loc_49B763  +
cmp dword ptr [eax+4] 0FFFFFFFFh +
jz loc_49B766  +
xor eax eax +
retn   +
mov al 1 +
retn   +
***
cmp word ptr [esp+4+var_4] 0FFFFh +
jnz loc_49B77F  +
cmp word ptr [esp+4+var_4+2] 0FFFFh +
jz loc_49B783  +
xor eax eax +
pop edx  +
retn   +
mov al 1 +
pop edx  +
retn   +
***
mov eax [eax+0Ch] +
call @Classes@TList@Add$qqrpv  +
retn   +
***
push edi  +
push ebp  +
add esp 0FFFFFFF8h +
mov [esp+8+var_4] edx +
mov [esp+8+var_8] eax +
xor ebp ebp +
mov eax [esp+8+var_8] +
mov eax [eax+0Ch] +
mov esi [eax+8] +
dec esi  +
test esi esi +
jl loc_49B89A  +
inc esi  +
xor edi edi +
mov eax [esp+8+var_8] +
mov eax [eax+0Ch] +
mov edx edi +
call @Classes@TList@Get$qqri  +
mov ebx eax +
mov edx ebx +
mov eax [esp+8+var_4] +
call @System@TObject@InheritsFrom$qqrp17System@TMetaClasst1  +
test al al +
jz loc_49B896  +
test ebp ebp +
jz loc_49B894  +
mov edx ebp +
mov eax ebx +
call @System@TObject@InheritsFrom$qqrp17System@TMetaClasst1  +
test al al +
jz loc_49B896  +
mov ebp ebx +
inc edi  +
dec esi  +
jnz loc_49B865  +
mov eax ebp +
pop ecx  +
pop edx  +
pop ebp  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push ecx  +
push ebx  +
push esi  +
push edi  +
mov [ebp+var_4] ecx +
mov edi edx +
mov ebx [ebp+arg_0] +
test edi edi +
jz loc_49B8C4  +
mov edx ebx +
mov eax edi +
call sub_49B844  +
mov esi eax +
jmp loc_49B8C6  +
xor esi esi +
cmp [ebp+var_4] 0 +
jz loc_49B8DA  +
mov edx ebx +
mov eax [ebp+var_4] +
call sub_49B844  +
mov ebx eax +
jmp loc_49B8DC  +
xor ebx ebx +
test esi esi +
jnz loc_49B8ED  +
test ebx ebx +
jnz loc_49B8E8  +
xor eax eax +
jmp loc_49B909  +
mov eax [ebp+var_4] +
jmp loc_49B909  +
test ebx ebx +
jnz loc_49B8F5  +
mov eax edi +
jmp loc_49B909  +
mov edx ebx +
mov eax esi +
call @System@TObject@InheritsFrom$qqrp17System@TMetaClasst1  +
test al al +
jz loc_49B906  +
mov eax edi +
jmp loc_49B909  +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
pop ecx  +
pop ebp  +
retn 4  +
***
push ecx  +
push ebx  +
push esi  +
push edi  +
test dl dl +
jz loc_49B927  +
add esp 0FFFFFFF0h +
call unknown_libname_535  +
mov edi ecx +
mov [ebp+var_1] dl +
mov ebx eax +
xor edx edx +
mov eax ebx +
call @System@TObject@$bctr$qqrv  +
mov dl 1 +
mov eax ds:off_49A5D8 +
call @System@TObject@$bctr$qqrv  +
mov [ebx+4] eax +
mov dl 1 +
mov eax ds:off_49ABC4 +
call @System@TObject@$bctr$qqrv  +
mov [ebx+8] eax +
mov dl 1 +
mov eax ds:off_49A5D8 +
call @System@TObject@$bctr$qqrv  +
mov esi eax +
mov [ebx+0Ch] esi +
mov eax esi +
mov edx edi +
call @Classes@TList@Add$qqrpv  +
mov eax ebx +
cmp [ebp+var_1] 0 +
jz loc_49B986  +
call sub_4BABC8  +
pop large dword ptr fs:0  +
add esp 0Ch +
mov eax ebx +
pop edi  +
pop esi  +
pop ebx  +
pop ecx  +
pop ebp  +
retn   +
***
call unknown_libname_536  +
mov ebx edx +
mov esi eax +
mov edx ebx +
and dl 0FCh +
mov eax esi +
call sub_4BA7FC  +
mov eax [esi+4] +
call @System@TObject@Free$qqrv  +
mov eax [esi+8] +
call @System@TObject@Free$qqrv  +
mov eax [esi+0Ch] +
call @System@TObject@Free$qqrv  +
test bl bl +
jle loc_49B9CA  +
mov eax esi +
call @System@@ClassDestroy$qqrp14System@TObject  +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
push ebp  +
push ecx  +
mov [esp+4+var_4] edx +
mov ebp eax +
mov eax [ebp+4] +
mov esi [eax+8] +
dec esi  +
test esi esi +
jl loc_49BA06  +
inc esi  +
xor ebx ebx +
mov eax [ebp+4] +
mov edx ebx +
call @Classes@TList@Get$qqri  +
mov edi eax +
mov edx [esp+4+var_4] +
mov eax edi +
call sub_4BA770  +
test al al +
jnz loc_49BA27  +
inc ebx  +
dec esi  +
jnz loc_49B9E8  +
mov eax [ebp+8] +
mov edx [esp+4+var_4] +
mov ecx [eax] +
call dword ptr [ecx+54h]  +
mov ebx eax +
test ebx ebx +
jl loc_49BA25  +
mov eax [ebp+8] +
mov edx ebx +
mov ecx [eax] +
call dword ptr [ecx+18h]  +
mov edi eax +
jmp loc_49BA27  +
xor edi edi +
mov eax edi +
pop edx  +
pop ebp  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
push ebp  +
push ecx  +
mov ebp edx +
mov edi eax +
mov [esp+1+var_1] 1 +
mov eax [edi+0Ch] +
mov ebx [eax+8] +
dec ebx  +
test ebx ebx +
jl loc_49BA66  +
inc ebx  +
xor esi esi +
mov eax [edi+0Ch] +
mov edx esi +
call @Classes@TList@Get$qqri  +
mov edx eax +
mov eax ebp +
call @System@TObject@InheritsFrom$qqrp17System@TMetaClasst1  +
test al al +
jnz loc_49BA6A  +
inc esi  +
dec ebx  +
jnz loc_49BA4B  +
mov [esp+1+var_1] 0 +
mov al [esp+1+var_1] +
pop edx  +
pop ebp  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
add esp 0FFFFFEF4h +
mov esi edx +
mov ebx edx +
mov esi eax +
test ebx ebx +
jz loc_49BB4E  +
mov eax esi +
call @System@FindHInstance$qqrpv  +
cmp ebx eax +
jz loc_49BB4E  +
xor eax eax +
pop esi  +
pop ebx  +
retn   +
mov al 1 +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
mov edi edx +
mov esi eax +
mov eax [esi+0Ch] +
mov ebx [eax+8] +
dec ebx  +
cmp ebx 0 +
jl loc_49BB8C  +
mov edx ebx +
mov eax [esi+0Ch] +
call @Classes@TList@Get$qqri  +
mov edx edi +
call sub_49BB34  +
test al al +
jz loc_49BB86  +
mov edx ebx +
mov eax [esi+0Ch] +
call @Classes@TList@Delete$qqri  +
dec ebx  +
cmp ebx 0FFFFFFFFh +
jnz loc_49BB67  +
mov eax [esi+4] +
mov ebx [eax+8] +
dec ebx  +
cmp ebx 0 +
jl loc_49BBBD  +
mov edx ebx +
mov eax [esi+4] +
call @Classes@TList@Get$qqri  +
mov edx edi +
call sub_49BB34  +
test al al +
jz loc_49BBB7  +
mov edx ebx +
mov eax [esi+4] +
call @Classes@TList@Delete$qqri  +
dec ebx  +
cmp ebx 0FFFFFFFFh +
jnz loc_49BB98  +
mov eax [esi+8] +
mov edx [eax] +
call dword ptr [edx+14h]  +
mov ebx eax +
dec ebx  +
cmp ebx 0 +
jl loc_49BBF2  +
mov edx ebx +
mov eax [esi+8] +
mov ecx [eax] +
call dword ptr [ecx+18h]  +
mov edx edi +
call sub_49BB34  +
test al al +
jz loc_49BBEC  +
mov edx ebx +
mov eax [esi+8] +
mov ecx [eax] +
call dword ptr [ecx+48h]  +
dec ebx  +
cmp ebx 0FFFFFFFFh +
jnz loc_49BBCD  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
push ebp  +
push ecx  +
mov [esp+4+var_4] edx +
mov edi eax +
mov eax [edi+20h] +
cmp eax [esp+4+var_4] +
jz loc_49BC3B  +
mov eax [esp+4+var_4] +
mov [edi+20h] eax +
mov eax [edi+4] +
mov esi [eax+8] +
dec esi  +
test esi esi +
jl loc_49BC3B  +
inc esi  +
xor ebp ebp +
mov eax [edi+4] +
mov edx ebp +
call @Classes@TList@Get$qqri  +
mov ebx eax +
mov edx [esp+4+var_4] +
mov eax ebx +
call sub_49BA30  +
mov [ebx+10h] al +
inc ebp  +
dec esi  +
jnz loc_49BC1E  +
pop edx  +
pop ebp  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
test dl dl +
jz loc_49BC53  +
add esp 0FFFFFFF0h +
call unknown_libname_535  +
mov ebx edx +
mov edi eax +
xor edx edx +
mov eax edi +
call @System@TObject@$bctr$qqrv  +
mov dl 1 +
mov eax ds:off_49A5D8 +
call @System@TObject@$bctr$qqrv  +
mov [edi+4] eax +
lea eax [edi+8] +
push eax  +
call InitializeCriticalSection  +
mov ecx ds:off_49A6E8 +
mov dl 1 +
mov eax ds:off_49B788 +
call sub_49B914  +
mov esi eax +
mov eax [edi+4] +
mov edx esi +
call @Classes@TList@Add$qqrpv  +
mov byte ptr [esi+10h] 1 +
mov eax edi +
test bl bl +
jz loc_49BCAF  +
call sub_4BABC8  +
pop large dword ptr fs:0  +
add esp 0Ch +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
push ebp  +
call unknown_libname_536  +
mov ebx edx +
mov esi eax +
lea eax [esi+8] +
push eax  +
call DeleteCriticalSection  +
mov eax [esi+4] +
mov ebp [eax+8] +
dec ebp  +
test ebp ebp +
jl loc_49BCEF  +
inc ebp  +
xor edi edi +
mov eax [esi+4] +
mov edx edi +
call @Classes@TList@Get$qqri  +
call @System@TObject@Free$qqrv  +
inc edi  +
dec ebp  +
jnz loc_49BCDC  +
mov eax [esi+4] +
call @System@TObject@Free$qqrv  +
mov edx ebx +
and dl 0FCh +
mov eax esi +
call sub_4BA7FC  +
test bl bl +
jle loc_49BD0E  +
mov eax esi +
call @System@@ClassDestroy$qqrp14System@TObject  +
pop ebp  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
push edi  +
add esp 0FFFFFEF4h +
xor eax eax +
mov [ebp+var_10C] eax +
xor eax eax +
push ebp  +
push offset loc_49BE1F  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
lea edx [ebp+var_108] +
mov eax [ebp+arg_0] +
mov eax [eax-4] +
call @System@TObject@ClassName$qqrp17System@TMetaClass  +
lea eax [ebp+var_108] +
mov [ebp+var_8] eax +
mov [ebp+var_4] 4 +
lea eax [ebp+var_8] +
push eax  +
push 0  +
lea edx [ebp+var_10C] +
mov eax off_4EA8AC +
call @System@LoadResString$qqrp20System@TResStringRec  +
mov ecx [ebp+var_10C] +
mov dl 1 +
mov eax ds:off_49A1F0 +
call sub_4AC1B8  +
call @System@@RaiseExcept$qqrv  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_49BE26  +
lea eax [ebp+var_10C] +
call unknown_libname_540  +
retn   +
jmp unknown_libname_539  +
jmp loc_49BE13  +
mov esp ebp +
pop ebp  +
retn   +
***
add esp 0FFFFFFE8h +
push ebx  +
push esi  +
push edi  +
mov [ebp+var_4] ecx +
mov [ebp+var_C] edx +
mov [ebp+var_8] eax +
mov edx [ebp+var_4] +
mov eax [ebp+var_8] +
call sub_49BD14  +
mov [ebp+var_10] eax +
cmp [ebp+var_10] 0 +
jnz loc_49BE59  +
push ebp  +
call @Classes@_16609  +
pop ecx  +
mov edx [ebp+var_C] +
mov eax [ebp+var_10] +
call sub_49B838  +
mov eax [ebp+var_8] +
mov eax [eax+4] +
mov eax [eax+8] +
dec eax  +
test eax eax +
jl loc_49BEEC  +
inc eax  +
mov [ebp+var_18] eax +
mov [ebp+var_14] 0 +
mov eax [ebp+var_8] +
mov eax [eax+4] +
mov edx [ebp+var_14] +
call @Classes@TList@Get$qqri  +
mov edi eax +
cmp edi [ebp+var_10] +
jz loc_49BEE4  +
mov eax [edi+4] +
mov ebx [eax+8] +
dec ebx  +
cmp ebx 0 +
jl loc_49BEE4  +
mov eax [edi+4] +
mov edx ebx +
call @Classes@TList@Get$qqri  +
mov esi eax +
mov edx [ebp+var_C] +
mov eax esi +
call @System@TObject@InheritsFrom$qqrp17System@TMetaClasst1  +
test al al +
jz loc_49BEDE  +
mov edx esi +
mov eax [ebp+var_8] +
call sub_49BD14  +
cmp eax [ebp+var_10] +
jnz loc_49BEDE  +
mov eax [edi+4] +
mov edx ebx +
call @Classes@TList@Delete$qqri  +
mov eax [ebp+var_10] +
mov eax [eax+4] +
mov edx esi +
call @Classes@TList@Add$qqrpv  +
dec ebx  +
cmp ebx 0FFFFFFFFh +
jnz loc_49BE9E  +
inc [ebp+var_14]  +
dec [ebp+var_18]  +
jnz loc_49BE7D  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
add eax 8 +
push eax  +
call EnterCriticalSection  +
retn   +
***
mov edx ebx +
call sub_49BD14  +
test eax eax +
jz loc_49BF15  +
mov edx ebx +
call sub_49BA74  +
pop ebx  +
retn   +
***
push edi  +
push ebp  +
push ecx  +
mov ebp edx +
mov edi eax +
mov [esp+1+var_1] 1 +
mov eax [edi+4] +
mov ebx [eax+8] +
dec ebx  +
test ebx ebx +
jl loc_49BF4C  +
inc ebx  +
xor esi esi +
mov eax [edi+4] +
mov edx esi +
call @Classes@TList@Get$qqri  +
mov edx ebp +
call sub_49BB1C  +
test al al +
jnz loc_49BF50  +
inc esi  +
dec ebx  +
jnz loc_49BF33  +
mov [esp+1+var_1] 0 +
mov al [esp+1+var_1] +
pop edx  +
pop ebp  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
push ebp  +
mov ebp edx +
mov edi eax +
mov eax [edi+4] +
mov ebx [eax+8] +
dec ebx  +
test ebx ebx +
jl loc_49BF8E  +
inc ebx  +
xor esi esi +
mov eax [edi+4] +
mov edx esi +
call @Classes@TList@Get$qqri  +
mov eax [eax+0Ch] +
mov edx ebp +
call unknown_libname_419  +
test eax eax +
jge loc_49BFA6  +
inc esi  +
dec ebx  +
jnz loc_49BF72  +
mov ecx ebp +
mov dl 1 +
mov eax ds:off_49B788 +
call sub_49B914  +
mov edx eax +
mov eax [edi+4] +
call @Classes@TList@Add$qqrpv  +
pop ebp  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
add eax 8 +
push eax  +
call LeaveCriticalSection  +
retn   +
***
push edi  +
mov edi edx +
mov esi eax +
mov eax [esi+4] +
mov ebx [eax+8] +
dec ebx  +
cmp ebx 0 +
jl loc_49BFE2  +
mov edx ebx +
mov eax [esi+4] +
call @Classes@TList@Get$qqri  +
mov edx edi +
call sub_49BB54  +
dec ebx  +
cmp ebx 0FFFFFFFFh +
jnz loc_49BFCB  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
add esp 0FFFFFFF4h +
push ebx  +
push esi  +
push edi  +
test dl dl +
jz loc_49BFFD  +
add esp 0FFFFFFF0h +
call unknown_libname_535  +
mov [ebp+var_C] ecx +
mov [ebp+var_5] dl +
mov [ebp+var_4] eax +
xor edx edx +
mov eax [ebp+var_4] +
call @System@TObject@$bctr$qqrv  +
mov dl 1 +
mov eax ds:off_49A5D8 +
call @System@TObject@$bctr$qqrv  +
mov edx [ebp+var_4] +
mov [edx+4] eax +
mov eax dword_4F19C0 +
call unknown_libname_417  +
xor eax eax +
push ebp  +
push offset loc_49C0E7  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
cmp [ebp+var_C] 0 +
jnz loc_49C04B  +
mov eax dword_4F19C0 +
mov eax [eax+20h] +
mov [ebp+var_C] eax +
mov eax dword_4F19C0 +
mov eax [eax+4] +
mov esi [eax+8] +
dec esi  +
test esi esi +
jl loc_49C08E  +
inc esi  +
xor edi edi +
mov eax dword_4F19C0 +
mov eax [eax+4] +
mov edx edi +
call @Classes@TList@Get$qqri  +
mov ebx eax +
mov edx [ebp+var_C] +
mov eax ebx +
call sub_49BA30  +
test al al +
jz loc_49C08A  +
mov eax [ebp+var_4] +
mov eax [eax+4] +
mov edx ebx +
call @Classes@TList@Add$qqrpv  +
inc edi  +
dec esi  +
jnz loc_49C05E  +
cmp [ebp+arg_0] 0 +
jz loc_49C0CF  +
mov eax dword_4F19C0 +
mov eax [eax+4] +
mov esi [eax+8] +
dec esi  +
test esi esi +
jl loc_49C0CF  +
inc esi  +
xor edi edi +
mov eax dword_4F19C0 +
mov eax [eax+4] +
mov edx edi +
call @Classes@TList@Get$qqri  +
mov ebx eax +
cmp byte ptr [ebx+10h] 0 +
jz loc_49C0CB  +
mov eax [ebp+var_4] +
mov eax [eax+4] +
mov edx ebx +
call @Classes@TList@Add$qqrpv  +
inc edi  +
dec esi  +
jnz loc_49C0A7  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_49C0EE  +
mov eax dword_4F19C0 +
call sub_49BFAC  +
retn   +
jmp unknown_libname_539  +
jmp loc_49C0DC  +
mov eax [ebp+var_4] +
cmp [ebp+var_5] 0 +
jz loc_49C106  +
call sub_4BABC8  +
pop large dword ptr fs:0  +
add esp 0Ch +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 4  +
***
call unknown_libname_536  +
mov ebx edx +
mov esi eax +
mov eax [esi+4] +
call @System@TObject@Free$qqrv  +
mov edx ebx +
and dl 0FCh +
mov eax esi +
call sub_4BA7FC  +
test bl bl +
jle loc_49C13E  +
mov eax esi +
call @System@@ClassDestroy$qqrp14System@TObject  +
pop esi  +
pop ebx  +
retn   +
***
add esp 0FFFFFFF8h +
mov eax [eax-38h] +
or eax eax +
jz locret_49C1D6  +
mov eax [eax+2] +
retn   +
***
add esp 0FFFFFFF4h +
push ecx  +
mov esi eax +
mov eax esi +
call sub_49C244  +
mov ebx eax +
test ebx ebx +
jnz loc_49C2B0  +
mov eax esi +
call sub_49C1D8  +
mov eax ebx +
pop esi  +
pop ebx  +
retn   +
***
push ebx  +
mov ebx eax +
mov eax dword_4F19C0 +
call unknown_libname_417  +
xor eax eax +
push ebp  +
push offset loc_49C31D  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
jmp loc_49C2F5  +
mov edx ebx +
mov eax dword_4F19C0 +
call sub_49BF00  +
cmp ebx ds:off_49A6E8 +
jz loc_49C305  +
mov eax ebx +
call @System@TObject@ClassParent$qqrp17System@TMetaClass  +
mov ebx eax +
mov edx ebx +
mov eax dword_4F19C0 +
call sub_49BF18  +
test al al +
jz loc_49C2D8  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_49C324  +
mov eax dword_4F19C0 +
call sub_49BFAC  +
retn   +
jmp unknown_libname_539  +
jmp loc_49C312  +
pop ebx  +
pop ebp  +
retn   +
***
push ebx  +
push ebx  +
push ebx  +
push esi  +
mov esi edx +
mov ebx eax +
mov eax dword_4F19C0 +
call unknown_libname_417  +
xor eax eax +
push ebp  +
push offset loc_49C407  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov ecx esi +
mov edx ebx +
mov eax dword_4F19C0 +
call sub_49BE2C  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_49C40E  +
mov eax dword_4F19C0 +
call sub_49BFAC  +
retn   +
jmp unknown_libname_539  +
jmp loc_49C3FC  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
push ecx  +
push ebx  +
mov ebx eax +
mov eax dword_4F19C0 +
call unknown_libname_417  +
xor eax eax +
push ebp  +
push offset loc_49C462  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov eax dword_4F19C0 +
mov eax [eax+20h] +
mov [ebp+var_4] eax +
mov edx ebx +
mov eax dword_4F19C0 +
call sub_49BBF8  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_49C469  +
mov eax dword_4F19C0 +
call sub_49BFAC  +
retn   +
jmp unknown_libname_539  +
jmp loc_49C457  +
mov eax [ebp+var_4] +
pop ebx  +
pop ecx  +
pop ebp  +
retn   +
***
test dl dl +
jz loc_49C4D7  +
add esp 0FFFFFFF0h +
call unknown_libname_535  +
mov [eax+4] ecx +
mov ecx [ebp+arg_4] +
mov [eax+8] ecx +
mov ecx [ebp+arg_0] +
mov [eax+0Ch] ecx +
test dl dl +
jz loc_49C4F9  +
call sub_4BABC8  +
pop large dword ptr fs:0  +
add esp 0Ch +
pop ebp  +
retn 8  +
***
push edi  +
mov edi ecx +
mov esi edx +
mov ebx eax +
push esi  +
push edi  +
mov ecx ebx +
mov dl 1 +
mov eax ds:off_49C470 +
call @Classes@_16548  +
mov edx eax +
mov eax dword_4F19BC +
call @Classes@TThreadList@Add$qqrpv  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push ecx  +
push ebx  +
push esi  +
push edi  +
mov edi eax +
xor eax eax +
mov [ebp+var_4] eax +
mov eax dword_4F19BC +
call @Mxarrays@TThreadCustomArray@LockArray$qqrv  +
mov esi eax +
xor edx edx +
push ebp  +
push offset loc_49C596  +
push dword ptr fs:[edx]  +
mov fs:[edx] esp +
mov ebx [esi+8] +
dec ebx  +
cmp ebx 0 +
jl loc_49C57E  +
mov edx ebx +
mov eax esi +
call @Classes@TList@Get$qqri  +
cmp edi [eax+4] +
jnz loc_49C578  +
mov eax [eax+0Ch] +
mov [ebp+var_4] eax +
call @System@@TryFinallyExit$qqrv  +
jmp loc_49C59D  +
dec ebx  +
cmp ebx 0FFFFFFFFh +
jnz loc_49C55D  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_49C59D  +
mov eax dword_4F19BC +
call sub_49D170  +
retn   +
jmp unknown_libname_539  +
jmp loc_49C58B  +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
pop ecx  +
pop ebp  +
retn   +
***
push ecx  +
push ebx  +
push esi  +
push edi  +
mov edi eax +
xor eax eax +
mov [ebp+var_4] eax +
mov eax dword_4F19BC +
call @Mxarrays@TThreadCustomArray@LockArray$qqrv  +
mov esi eax +
xor edx edx +
push ebp  +
push offset loc_49C612  +
push dword ptr fs:[edx]  +
mov fs:[edx] esp +
mov ebx [esi+8] +
dec ebx  +
cmp ebx 0 +
jl loc_49C5FA  +
mov edx ebx +
mov eax esi +
call @Classes@TList@Get$qqri  +
cmp edi [eax+4] +
jnz loc_49C5F4  +
mov eax [eax+8] +
mov [ebp+var_4] eax +
call @System@@TryFinallyExit$qqrv  +
jmp loc_49C619  +
dec ebx  +
cmp ebx 0FFFFFFFFh +
jnz loc_49C5D9  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_49C619  +
mov eax dword_4F19BC +
call sub_49D170  +
retn   +
jmp unknown_libname_539  +
jmp loc_49C607  +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
pop ecx  +
pop ebp  +
retn   +
***
push ecx  +
add esp 0FFFFFFF8h +
push ebx  +
push esi  +
push edi  +
mov [ebp+var_4] ecx +
mov edi edx +
mov esi [ebp+arg_0] +
test esi esi +
jl loc_49C697  +
inc esi  +
mov ebx [ebp+var_4] +
cmp eax [ebx] +
jnz loc_49C691  +
mov [ebp+var_5] 1 +
mov eax edi +
mov edx [ebx+4] +
call unknown_libname_542  +
jmp loc_49C69B  +
add ebx 8 +
dec esi  +
jnz loc_49C67D  +
mov [ebp+var_5] 0 +
mov al [ebp+var_5] +
pop edi  +
pop esi  +
pop ebx  +
pop ecx  +
pop ecx  +
pop ebp  +
retn 4  +
***
mov ebx eax +
cmp dword_4F19C4 0 +
jnz loc_49C6C6  +
mov dl 1 +
mov eax ds:off_49A5D8 +
call @System@TObject@$bctr$qqrv  +
mov dword_4F19C4 eax +
mov esi ebx +
mov edx esi +
mov eax dword_4F19C4 +
call unknown_libname_419  +
test eax eax +
jge loc_49C6E4  +
mov edx esi +
mov eax dword_4F19C4 +
call @Classes@TList@Add$qqrpv  +
pop esi  +
pop ebx  +
retn   +
***
cmp dword_4F19C4 0 +
jz locret_49C6FD  +
mov edx eax +
mov eax dword_4F19C4 +
call @Classes@TList@Remove$qqrpv  +
retn   +
***
push edi  +
mov esi eax +
xor eax eax +
cmp dword_4F19C4 0 +
jz loc_49C73B  +
mov edx dword_4F19C4 +
mov ebx [edx+8] +
dec ebx  +
cmp ebx 0 +
jl loc_49C73B  +
mov edx ebx +
mov eax dword_4F19C4 +
call @Classes@TList@Get$qqri  +
mov edi eax +
mov eax esi +
call edi  +
test eax eax +
jnz loc_49C73B  +
dec ebx  +
cmp ebx 0FFFFFFFFh +
jnz loc_49C71F  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
cmp dword_4F19B4 0 +
push ecx  +
push ebx  +
push esi  +
push edi  +
mov esi ecx +
mov ebx edx +
mov edi eax +
test ebx ebx +
jnz loc_49C77B  +
mov ebx hInstance +
push 0Ah  +
mov eax edi +
call unknown_libname_550  +
push eax  +
push ebx  +
call FindResourceA  +
test eax eax +
setnz al  +
test al al +
jz loc_49C7E1  +
push edi  +
push 0Ah  +
mov ecx ebx +
mov dl 1 +
mov eax ds:off_49AF30 +
call @TResourceStream@$bctr$qqruix10AnsiStringpc  +
mov [ebp+var_4] eax +
xor eax eax +
push ebp  +
push offset loc_49C7D8  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov edx [esi] +
mov eax [ebp+var_4] +
call @Classes@TStream@ReadComponent$qqrp18Classes@TComponent  +
mov [esi] eax +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_49C7DF  +
mov eax [ebp+var_4] +
call @System@TObject@Free$qqrv  +
retn   +
jmp unknown_libname_539  +
jmp loc_49C7CF  +
mov al 1 +
pop edi  +
pop esi  +
pop ebx  +
pop ecx  +
pop ebp  +
retn   +
***
mov ebx [eax+4] +
test ebx ebx +
jnz loc_49C811  +
mov dl 1 +
mov eax ds:off_49A5D8 +
call @System@TObject@$bctr$qqrv  +
mov ebx eax +
call @Sysinit@@GetTls$qqrv  +
mov [eax+4] ebx +
call @Sysinit@@GetTls$qqrv  +
mov edx [eax+0] +
mov eax ebx +
call @Classes@TList@Add$qqrpv  +
mov dl 1 +
mov eax ds:off_49A5D8 +
call @System@TObject@$bctr$qqrv  +
mov ebx eax +
call @Sysinit@@GetTls$qqrv  +
mov [eax+0] ebx +
pop ebx  +
retn   +
***
push edi  +
call @Sysinit@@GetTls$qqrv  +
mov edi [eax+0] +
mov ebx [edi+8] +
dec ebx  +
test ebx ebx +
jl loc_49C86B  +
inc ebx  +
xor esi esi +
mov edx esi +
mov eax edi +
call @Classes@TList@Get$qqri  +
mov edx [eax] +
call dword ptr [edx+0Ch]  +
inc esi  +
dec ebx  +
jnz loc_49C859  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
call @Sysinit@@GetTls$qqrv  +
mov eax [eax+0] +
call @System@TObject@Free$qqrv  +
call @Sysinit@@GetTls$qqrv  +
mov ebx [eax+4] +
mov eax ebx +
call @TList@Last$qqrv  +
mov esi eax +
call @Sysinit@@GetTls$qqrv  +
mov [eax+0] esi +
mov edx [ebx+8] +
dec edx  +
mov eax ebx +
call @Classes@TList@Delete$qqri  +
cmp dword ptr [ebx+8] 0 +
jnz loc_49C8C6  +
call @Sysinit@@GetTls$qqrv  +
xor edx edx +
mov [eax+4] edx +
mov eax ebx +
call @System@TObject@Free$qqrv  +
pop esi  +
pop ebx  +
retn   +
***
add esp 0FFFFFEFCh +
push ebx  +
push esi  +
xor edx edx +
mov [ebp+var_4] edx +
mov esi eax +
xor eax eax +
push ebp  +
push offset loc_49C962  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
xor ebx ebx +
cmp esi ds:off_49B454 +
jz loc_49C94C  +
mov eax [ebp+arg_0] +
cmp esi [eax-8] +
jz loc_49C94C  +
mov eax [ebp+arg_0] +
push eax  +
mov eax esi +
call @System@TObject@ClassParent$qqrp17System@TMetaClass  +
call sub_49C8CC  +
pop ecx  +
mov ebx eax +
lea edx [ebp+var_104] +
mov eax esi +
call @System@TObject@ClassName$qqrp17System@TMetaClass  +
lea edx [ebp+var_104] +
lea eax [ebp+var_4] +
call unknown_libname_547  +
mov eax [ebp+var_4] +
push eax  +
mov eax esi +
call sub_4BCA24  +
call sub_4BCA74  +
mov edx eax +
mov eax [ebp+arg_0] +
lea ecx [eax-4] +
pop eax  +
call @Classes@_16554  +
or bl al +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_49C969  +
lea eax [ebp+var_4] +
call unknown_libname_540  +
retn   +
jmp unknown_libname_539  +
jmp loc_49C959  +
mov eax ebx +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
add esp 0FFFFFFF4h +
mov [ebp+var_8] edx +
mov [ebp+var_4] eax +
mov eax dword_4F19B0 +
call sub_4AD944  +
xor eax eax +
push ebp  +
push offset loc_49CA22  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov eax [ebp+var_4] +
mov ax [eax+1Ch] +
and ax ds:word_49CA30 +
mov dx ds:word_49CA34 +
cmp dx ax +
setz [ebp+var_A]  +
cmp [ebp+var_A] 0 +
jz loc_49C9BF  +
call sub_49C7E8  +
xor eax eax +
push ebp  +
push offset loc_49CA03  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
push ebp  +
mov eax [ebp+var_4] +
call @System@TObject@ClassType$qqrv  +
call sub_49C8CC  +
pop ecx  +
mov [ebp+var_9] al +
cmp [ebp+var_A] 0 +
jz loc_49C9EA  +
call @Classes@NotifyGlobalLoading$qqrv  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_49CA0A  +
cmp [ebp+var_A] 0 +
jz locret_49CA02  +
call sub_49C870  +
retn   +
jmp unknown_libname_539  +
jmp loc_49C9F7  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_49CA29  +
mov eax dword_4F19B0 +
call sub_4AD9E0  +
retn   +
jmp unknown_libname_539  +
jmp loc_49CA17  +
mov al [ebp+var_9] +
mov esp ebp +
pop ebp  +
retn   +
***
push ecx  +
push ebx  +
push esi  +
mov ebx ecx +
mov esi edx +
push 400h  +
mov ecx eax +
mov dl 1 +
mov eax ds:off_49B290 +
call sub_49FBA4  +
mov [ebp+var_4] eax +
mov edx ebx +
mov eax [ebp+var_4] +
mov ecx [eax] +
call dword ptr [ecx]  +
mov eax [ebp+var_4] +
mov [eax+1Ch] ebx +
xor eax eax +
push ebp  +
push offset loc_49CA95  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov edx esi +
mov eax [ebp+var_4] +
call sub_4A2B74  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_49CA9C  +
mov eax [ebp+var_4] +
call @System@TObject@Free$qqrv  +
retn   +
jmp unknown_libname_539  +
jmp loc_49CA8C  +
pop esi  +
pop ebx  +
pop ecx  +
pop ebp  +
retn   +
***
add esp 0FFFFFFF4h +
push ebx  +
push esi  +
push edi  +
mov edi ecx +
mov esi edx +
mov ebx eax +
mov [ebp+var_1] 0 +
mov eax ebx +
call @System@TObject@ClassType$qqrv  +
push eax  +
mov eax esi +
call @System@TObject@ClassType$qqrv  +
pop edx  +
cmp edx eax +
jnz loc_49CBBB  +
mov eax ebx +
call sub_49DAB8  +
push eax  +
mov eax esi +
call sub_49DAB8  +
pop edx  +
cmp edx eax +
jnz loc_49CBBB  +
mov dl 1 +
mov eax ds:off_49AEB4 +
call @System@TObject@$bctr$qqrv  +
mov [ebp+var_8] eax +
xor eax eax +
push ebp  +
push offset loc_49CBB4  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov ecx edi +
mov edx ebx +
mov eax [ebp+var_8] +
call sub_49CA38  +
mov dl 1 +
mov eax ds:off_49AEB4 +
call @System@TObject@$bctr$qqrv  +
mov [ebp+var_C] eax +
xor eax eax +
push ebp  +
push offset loc_49CB97  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov ecx [ebp+arg_0] +
mov edx esi +
mov eax [ebp+var_C] +
call sub_49CA38  +
mov eax [ebp+var_8] +
call sub_49F1E8  +
push edx  +
push eax  +
mov eax [ebp+var_C] +
call sub_49F1E8  +
cmp edx [esp+38h+var_34] +
jnz loc_49CB55  +
cmp eax [esp+38h+var_38] +
pop edx  +
pop eax  +
jnz loc_49CB78  +
mov eax [ebp+var_8] +
call sub_49F1E8  +
mov ecx eax +
mov eax [ebp+var_C] +
mov edx [eax+4] +
mov eax [ebp+var_8] +
mov eax [eax+4] +
call @CompareMem$qqrpvt1i  +
test al al +
jnz loc_49CB7C  +
xor eax eax +
jmp loc_49CB7E  +
mov al 1 +
mov [ebp+var_1] al +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_49CB9E  +
mov eax [ebp+var_C] +
call @System@TObject@Free$qqrv  +
retn   +
jmp unknown_libname_539  +
jmp loc_49CB8E  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_49CBBB  +
mov eax [ebp+var_8] +
call @System@TObject@Free$qqrv  +
retn   +
jmp unknown_libname_539  +
jmp loc_49CBAB  +
mov al [ebp+var_1] +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 4  +
***
call unknown_libname_536  +
push edi  +
mov edi edx +
mov ebx eax +
mov esi [ebx+8] +
cmp esi [ebx+0Ch] +
jnz loc_49CBFD  +
mov eax ebx +
mov edx [eax] +
call dword ptr [edx]  +
mov eax [ebx+4] +
mov [eax+esi*4] edi +
inc dword ptr [ebx+8]  +
test edi edi +
jz loc_49CC15  +
xor ecx ecx +
mov edx edi +
mov eax ebx +
mov ebx [eax] +
call dword ptr [ebx+4]  +
mov eax esi +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
xor edx edx +
mov eax ebx +
call @Classes@TList@SetCount$qqri  +
xor edx edx +
mov eax ebx +
call @Classes@TList@SetCapacity$qqri  +
pop ebx  +
retn   +
***
push edi  +
add esp 0FFFFFFF8h +
mov esi ecx +
mov ebx edx +
call sub_49CC94  +
push eax  +
mov [esp+0Ch+var_8] esi +
mov [esp+0Ch+var_4] 0 +
lea eax [esp+0Ch+var_8] +
push eax  +
push 0  +
mov ecx ebx +
mov dl 1 +
mov eax ds:off_49A3B0 +
call sub_4AC1B8  +
jmp @System@@RaiseExcept$qqrv  +
***
pop ecx  +
pop edx  +
pop esi  +
pop ebx  +
retn   +
***
push 0  +
mov eax [ebx+8] +
cmp eax [ebx+0Ch] +
jnz loc_49CD35  +
mov eax ebx +
mov edx [eax] +
call dword ptr [edx]  +
mov eax ebx +
pop ebx  +
retn   +
***
xor edx edx +
mov esi edx +
mov ebx eax +
test esi esi +
jl loc_49CD53  +
cmp esi [ebx+8] +
jl loc_49CD62  +
mov edx off_4EA884 +
mov ecx esi +
mov eax [ebx] +
call @Classes@TList@Error$qqrp17System@TMetaClassp20System@TResStringReci  +
mov eax [ebx+4] +
mov eax [eax+esi*4] +
pop esi  +
pop ebx  +
retn   +
***
mov edx [eax+0Ch] +
cmp edx 40h +
jle loc_49CD82  +
mov ecx edx +
test ecx ecx +
jns loc_49CD7D  +
add ecx 3 +
sar ecx 2 +
jmp loc_49CD93  +
cmp edx 8 +
jle loc_49CD8E  +
mov ecx 10h +
jmp loc_49CD93  +
mov ecx 4 +
add ecx edx +
mov edx ecx +
call @Classes@TList@SetCapacity$qqri  +
retn   +
***
jmp loc_49CDA6  +
inc ecx  +
cmp ecx [eax+8] +
jge loc_49CDB3  +
mov ebx [eax+4] +
cmp edx [ebx+ecx*4] +
jnz loc_49CDA5  +
cmp ecx [eax+8] +
jnz loc_49CDBB  +
or ecx 0FFFFFFFFh +
mov eax ecx +
pop ebx  +
retn   +
***
push edi  +
mov edi ecx +
mov esi edx +
mov ebx eax +
test esi esi +
jl loc_49CDD2  +
cmp esi [ebx+8] +
jle loc_49CDE1  +
mov edx off_4EA884 +
mov ecx esi +
mov eax [ebx] +
call @Classes@TList@Error$qqrp17System@TMetaClassp20System@TResStringReci  +
mov eax [ebx+8] +
cmp eax [ebx+0Ch] +
jnz loc_49CDEF  +
mov eax ebx +
mov edx [eax] +
call dword ptr [edx]  +
mov eax [ebx+8] +
cmp esi eax +
jge loc_49CE0F  +
sub eax esi +
mov ecx eax +
shl ecx 2 +
mov eax [ebx+4] +
lea edx [eax+esi*4+4] +
mov eax [ebx+4] +
lea eax [eax+esi*4] +
call sub_4B9A24  +
mov eax [ebx+4] +
mov [eax+esi*4] edi +
inc dword ptr [ebx+8]  +
test edi edi +
jz loc_49CE27  +
xor ecx ecx +
mov edx edi +
mov eax ebx +
mov ebx [eax] +
call dword ptr [ebx+4]  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov edx [eax+8] +
dec edx  +
call @Classes@TList@Get$qqri  +
retn   +
***
push edi  +
push edi  +
mov edi ecx +
mov esi edx +
mov ebx eax +
test esi esi +
jl loc_49CEA2  +
cmp esi [ebx+8] +
jl loc_49CEB1  +
mov edx off_4EA884 +
mov ecx esi +
mov eax [ebx] +
call @Classes@TList@Error$qqrp17System@TMetaClassp20System@TResStringReci  +
mov edx [ebx+4] +
mov eax [edx+esi*4] +
cmp edi eax +
jz loc_49CEDF  +
mov ecx [ebx+4] +
mov [edx+esi*4] edi +
test eax eax +
jz loc_49CED0  +
mov cl 2 +
mov edx eax +
mov eax ebx +
mov esi [eax] +
call dword ptr [esi+4]  +
test edi edi +
jz loc_49CEDF  +
xor ecx ecx +
mov edx edi +
mov eax ebx +
mov ebx [eax] +
call dword ptr [ebx+4]  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov ebx eax +
mov eax ebx +
call unknown_libname_419  +
mov esi eax +
test esi esi +
jl loc_49CEFE  +
mov edx esi +
mov eax ebx +
call @Classes@TList@Delete$qqri  +
mov eax esi +
pop esi  +
pop ebx  +
retn   +
***
mov esi edx +
mov ebx eax +
cmp esi [ebx+8] +
jl loc_49CF17  +
cmp esi 7FFFFFFh +
jle loc_49CF26  +
mov edx off_4EA87C +
mov ecx esi +
mov eax [ebx] +
call @Classes@TList@Error$qqrp17System@TMetaClassp20System@TResStringReci  +
cmp esi [ebx+0Ch] +
jz loc_49CF3B  +
mov edx esi +
shl edx 2 +
lea eax [ebx+4] +
call unknown_libname_531  +
mov [ebx+0Ch] esi +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
test dl dl +
jz loc_49CFC2  +
add esp 0FFFFFFF0h +
call unknown_libname_535  +
mov ebx edx +
mov esi eax +
xor edx edx +
mov eax esi +
call @System@TObject@$bctr$qqrv  +
lea eax [esi+8] +
push eax  +
call InitializeCriticalSection  +
mov dl 1 +
mov eax ds:off_49A5D8 +
call @System@TObject@$bctr$qqrv  +
mov [esi+4] eax +
mov byte ptr [esi+20h] 0 +
mov eax esi +
test bl bl +
jz loc_49D000  +
call sub_4BABC8  +
pop large dword ptr fs:0  +
add esp 0Ch +
mov eax esi +
pop esi  +
pop ebx  +
retn   +
***
add esp 0FFFFFFF8h +
call unknown_libname_536  +
mov [ebp+var_5] dl +
mov [ebp+var_4] eax +
mov eax [ebp+var_4] +
call @Mxarrays@TThreadCustomArray@LockArray$qqrv  +
xor eax eax +
push ebp  +
push offset loc_49D06A  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov eax [ebp+var_4] +
mov eax [eax+4] +
call @System@TObject@Free$qqrv  +
mov dl [ebp+var_5] +
and dl 0FCh +
mov eax [ebp+var_4] +
call sub_4BA7FC  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_49D071  +
mov eax [ebp+var_4] +
call sub_49D170  +
mov eax [ebp+var_4] +
add eax 8 +
push eax  +
call DeleteCriticalSection  +
retn   +
jmp unknown_libname_539  +
jmp loc_49D055  +
cmp [ebp+var_5] 0 +
jle loc_49D07F  +
mov eax [ebp+var_4] +
call @System@@ClassDestroy$qqrp14System@TObject  +
pop ecx  +
pop ecx  +
pop ebp  +
retn   +
***
push ecx  +
push ebx  +
mov ebx edx +
mov [ebp+var_4] eax +
mov eax [ebp+var_4] +
call @Mxarrays@TThreadCustomArray@LockArray$qqrv  +
xor eax eax +
push ebp  +
push offset loc_49D100  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov eax [ebp+var_4] +
cmp byte ptr [eax+20h] 1 +
jz loc_49D0BD  +
mov eax [ebp+var_4] +
mov eax [eax+4] +
mov edx ebx +
call unknown_libname_419  +
inc eax  +
jnz loc_49D0CC  +
mov eax [ebp+var_4] +
mov eax [eax+4] +
mov edx ebx +
call @Classes@TList@Add$qqrpv  +
jmp loc_49D0EA  +
mov eax [ebp+var_4] +
cmp byte ptr [eax+20h] 2 +
jnz loc_49D0EA  +
mov edx off_4EA850 +
mov eax [ebp+var_4] +
mov eax [eax+4] +
mov eax [eax] +
mov ecx ebx +
call @Classes@TList@Error$qqrp17System@TMetaClassp20System@TResStringReci  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_49D107  +
mov eax [ebp+var_4] +
call sub_49D170  +
retn   +
jmp unknown_libname_539  +
jmp loc_49D0F7  +
pop ebx  +
pop ecx  +
pop ebp  +
retn   +
***
lea eax [ebx+8] +
push eax  +
call EnterCriticalSection  +
mov eax [ebx+4] +
pop ebx  +
retn   +
***
push ecx  +
push ebx  +
mov ebx edx +
mov [ebp+var_4] eax +
mov eax [ebp+var_4] +
call @Mxarrays@TThreadCustomArray@LockArray$qqrv  +
xor eax eax +
push ebp  +
push offset loc_49D163  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov eax [ebp+var_4] +
mov eax [eax+4] +
mov edx ebx +
call @Classes@TList@Remove$qqrpv  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_49D16A  +
mov eax [ebp+var_4] +
call sub_49D170  +
retn   +
jmp unknown_libname_539  +
jmp loc_49D15A  +
pop ebx  +
pop ecx  +
pop ebp  +
retn   +
***
add eax 8 +
push eax  +
call LeaveCriticalSection  +
retn   +
***
call unknown_libname_536  +
mov ebx edx +
mov esi eax +
xor edx edx +
mov eax esi +
call sub_49D1E8  +
mov edx ebx +
and dl 0FCh +
mov eax esi +
call sub_4BA7FC  +
test bl bl +
jle loc_49D1BF  +
mov eax esi +
call @System@@ClassDestroy$qqrp14System@TObject  +
pop esi  +
pop ebx  +
retn   +
***
mov ecx off_4EA83C +
mov ecx eax +
cmp edx eax +
jge loc_49D1E4  +
mov ecx edx +
mov eax ecx +
retn   +
***
push edi  +
push ebp  +
push ecx  +
mov esi edx +
mov ebx eax +
cmp esi [ebx+4] +
jz loc_49D284  +
test esi esi +
jge loc_49D205  +
mov eax ebx +
call sub_49D1C4  +
lea eax [esi+20h] +
dec eax  +
test eax eax +
jns loc_49D210  +
add eax 1Fh +
sar eax 5 +
mov edi eax +
shl edi 2 +
mov eax [ebx+4] +
add eax 20h +
dec eax  +
test eax eax +
jns loc_49D226  +
add eax 1Fh +
sar eax 5 +
mov ebp eax +
shl ebp 2 +
cmp ebp edi +
jz loc_49D281  +
xor eax eax +
mov [esp+4+var_4] eax +
test edi edi +
jz loc_49D251  +
mov eax edi +
call sub_4B97C0  +
mov [esp+4+var_4] eax +
mov eax [esp+4+var_4] +
xor ecx ecx +
mov edx edi +
call @System@@FillChar$qqrv  +
test ebp ebp +
jz loc_49D27B  +
cmp [esp+4+var_4] 0 +
jz loc_49D271  +
mov edx edi +
mov eax ebp +
call @Classes@_16624  +
mov ecx eax +
mov edx [esp+4+var_4] +
mov eax [ebx+8] +
call sub_4B9A24  +
mov edx ebp +
mov eax [ebx+8] +
call sub_4B97E0  +
mov eax [esp+4+var_4] +
mov [ebx+8] eax +
mov [ebx+4] esi +
pop edx  +
pop ebp  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
cmp edx [eax+4] +
jnb loc_49D2A0  +
mov eax [eax+8] +
or cl cl +
jz loc_49D29C  +
bts [eax] edx +
retn   +
btr [eax] edx +
retn   +
cmp edx 0 +
jl sub_49D1C4  +
push eax  +
push edx  +
push ecx  +
inc edx  +
call sub_49D1E8  +
pop ecx  +
pop edx  +
pop eax  +
jmp loc_49D291  +
***
cmp edx [eax+4] +
jnb sub_49D1C4  +
mov eax [eax+8] +
bt [eax] edx +
sbb eax eax +
and eax 1 +
retn   +
***
push edi  +
push ecx  +
mov ebx eax +
mov eax [ebx+4] +
add eax 20h +
dec eax  +
test eax eax +
jns loc_49D2E4  +
add eax 1Fh +
sar eax 5 +
dec eax  +
test eax eax +
jl loc_49D339  +
inc eax  +
mov [esp+4+var_4] eax +
xor esi esi +
mov eax [ebx+8] +
mov edx ds:dword_49D344 +
cmp edx [eax+esi*4] +
jz loc_49D333  +
mov eax [ebx+8] +
mov edi [eax+esi*4] +
xor eax eax +
mov edx eax +
cmp dl 1Fh +
ja loc_49D315  +
and edx 7Fh +
bt edi edx +
jb loc_49D32E  +
mov edx esi +
shl edx 5 +
and eax 7Fh +
add edx eax +
mov eax edx +
mov edx [ebx+4] +
cmp eax edx +
jl loc_49D33C  +
mov eax edx +
jmp loc_49D33C  +
inc eax  +
cmp al 20h +
jnz loc_49D308  +
inc esi  +
dec [esp+4+var_4]  +
jnz loc_49D2F2  +
mov eax [ebx+4] +
pop edx  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
call unknown_libname_536  +
test edx edx +
jz loc_49D37E  +
xchg eax edx +
mov ecx [eax] +
call dword ptr [ecx]  +
retn   +
xor edx edx +
call @Classes@TPersistent@AssignError$qqrp19Classes@TPersistent  +
retn   +
***
add esp 0FFFFFEECh +
push ebx  +
push esi  +
xor ecx ecx +
mov [ebp+var_4] ecx +
mov esi edx +
mov ebx eax +
xor eax eax +
push ebp  +
push offset loc_49D43E  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
test esi esi +
jz loc_49D3CB  +
lea edx [ebp+var_104] +
mov eax [esi] +
call @System@TObject@ClassName$qqrp17System@TMetaClass  +
lea edx [ebp+var_104] +
lea eax [ebp+var_4] +
call unknown_libname_547  +
jmp loc_49D3D8  +
lea eax [ebp+var_4] +
mov edx offset _str_nil.Text +
call unknown_libname_543  +
mov eax [ebp+var_4] +
mov [ebp+var_114] eax +
mov [ebp+var_110] 0Bh +
lea edx [ebp+var_104] +
mov eax [ebx] +
call @System@TObject@ClassName$qqrp17System@TMetaClass  +
lea eax [ebp+var_104] +
mov [ebp+var_10C] eax +
mov [ebp+var_108] 4 +
lea eax [ebp+var_114] +
push eax  +
push 1  +
mov ecx off_4EA838 +
mov dl 1 +
mov eax ds:off_4A80D0 +
call sub_4AC274  +
call @System@@RaiseExcept$qqrv  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_49D445  +
lea eax [ebp+var_4] +
call unknown_libname_540  +
retn   +
jmp unknown_libname_539  +
jmp loc_49D435  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
xchg eax edx +
call @Classes@TPersistent@AssignError$qqrp19Classes@TPersistent  +
retn   +
***
add esp 0FFFFFEFCh +
push ebx  +
push esi  +
push edi  +
xor ecx ecx +
mov [ebp+var_4] ecx +
mov edi edx +
mov ebx eax +
xor eax eax +
push ebp  +
push offset loc_49D4F9  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
lea edx [ebp+var_104] +
mov eax [ebx] +
call @System@TObject@ClassName$qqrp17System@TMetaClass  +
lea edx [ebp+var_104] +
mov eax edi +
call unknown_libname_547  +
mov eax ebx +
mov si 0FFFFh +
call @System@@CallDynaInst$qqrv  +
test eax eax +
jz loc_49D4E3  +
mov eax ebx +
mov si 0FFFFh +
call @System@@CallDynaInst$qqrv  +
lea edx [ebp+var_4] +
mov si 0FFFEh +
call @System@@CallDynaInst$qqrv  +
cmp [ebp+var_4] 0 +
jz loc_49D4E3  +
push [ebp+var_4]  +
push offset _str___0.Text  +
push dword ptr [edi]  +
mov eax edi +
mov edx 3 +
call sub_4BB6D0  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_49D500  +
lea eax [ebp+var_4] +
call unknown_libname_540  +
retn   +
jmp unknown_libname_539  +
jmp loc_49D4F0  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
xor eax eax +
retn   +
***
mov ebx eax +
mov eax ebx +
call nullsub_17  +
mov eax ebx +
mov si 0FFFFh +
call @System@@CallDynaInst$qqrv  +
test eax eax +
jz loc_49D553  +
mov eax ebx +
mov si 0FFFFh +
call @System@@CallDynaInst$qqrv  +
push eax  +
lea eax [ebx+4] +
call unknown_libname_560  +
mov ecx eax +
mov edx offset dword_49D558 +
pop eax  +
call @System@TObject@GetInterface$qqrrx5_GUIDpv  +
pop esi  +
pop ebx  +
retn   +
***
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
cmp dword ptr [eax+4] 0 +
jz loc_49D57F  +
mov eax [eax+4] +
push eax  +
mov eax [eax] +
call dword ptr [eax+4]  +
jmp loc_49D582  +
or eax 0FFFFFFFFh +
pop ebp  +
retn 4  +
***
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
cmp dword ptr [eax+4] 0 +
jz loc_49D59F  +
mov eax [eax+4] +
push eax  +
mov eax [eax] +
call dword ptr [eax+8]  +
jmp loc_49D5A2  +
or eax 0FFFFFFFFh +
pop ebp  +
retn 4  +
***
push ebx  +
mov ebx [ebp+arg_0] +
mov ecx [ebp+arg_8] +
mov edx [ebp+arg_4] +
mov eax ebx +
call @System@TObject@GetInterface$qqrrx5_GUIDpv  +
test al al +
jz loc_49D5C4  +
xor eax eax +
jmp loc_49D5C9  +
mov eax 80004002h +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
push ebx  +
push esi  +
push edi  +
mov edi edx +
mov ebx eax +
test edi edi +
jz loc_49D5E2  +
xor eax eax +
mov [edi] eax +
mov eax edi +
call unknown_libname_560  +
test ebx ebx +
jz loc_49D651  +
mov eax ebx +
mov si 0FFFFh +
call @System@@CallDynaInst$qqrv  +
mov esi eax +
test esi esi +
jnz loc_49D62A  +
mov eax ebx +
mov edx ds:off_49B454 +
call @System@@IsClass$qqrp14System@TObjectp17System@TMetaClass  +
test al al +
jz loc_49D651  +
test byte ptr [ebx+1Ch] 10h +
jz loc_49D651  +
mov eax edi +
call unknown_libname_560  +
push eax  +
push offset dword_49D658  +
push ebx  +
mov eax [ebx] +
call dword ptr [eax+28h]  +
jmp loc_49D651  +
mov eax ebx +
mov edx ds:off_49B454 +
call @System@@IsClass$qqrp14System@TObjectp17System@TMetaClass  +
test al al +
jz loc_49D641  +
test byte ptr [ebx+1Ch] 10h +
jz loc_49D651  +
mov eax edi +
call unknown_libname_560  +
mov edx eax +
mov eax esi +
call sub_49D5D0  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
push 0  +
push ebx  +
push esi  +
push edi  +
mov ebx ecx +
mov esi edx +
mov edi eax +
xor eax eax +
push ebp  +
push offset loc_49D6BD  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
lea eax [ebp+var_4] +
call unknown_libname_560  +
mov edx eax +
mov eax edi +
call sub_49D5D0  +
cmp [ebp+var_4] 0 +
jz loc_49D6A7  +
mov ecx ebx +
mov edx esi +
mov eax [ebp+var_4] +
mov ebx [eax] +
call dword ptr [ebx+10h]  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_49D6C4  +
lea eax [ebp+var_4] +
call unknown_libname_560  +
retn   +
jmp unknown_libname_539  +
jmp loc_49D6B4  +
pop edi  +
pop esi  +
pop ebx  +
pop ecx  +
pop ebp  +
retn   +
***
test dl dl +
jz loc_49D6DA  +
add esp 0FFFFFFF0h +
call unknown_libname_535  +
mov ebx edx +
mov esi eax +
mov edx ecx +
mov eax esi +
mov ecx [eax] +
call dword ptr [ecx+10h]  +
mov eax esi +
test bl bl +
jz loc_49D6FC  +
call sub_4BABC8  +
pop large dword ptr fs:0  +
add esp 0Ch +
mov eax esi +
pop esi  +
pop ebx  +
retn   +
***
call unknown_libname_536  +
mov ebx edx +
mov esi eax +
xor edx edx +
mov eax esi +
mov ecx [eax] +
call dword ptr [ecx+10h]  +
mov edx ebx +
and dl 0FCh +
mov eax esi +
call sub_49D348  +
test bl bl +
jle loc_49D72F  +
mov eax esi +
call @System@@ClassDestroy$qqrp14System@TObject  +
pop esi  +
pop ebx  +
retn   +
***
test esi esi +
jz loc_49D753  +
cmp dword ptr [esi+0Ch] 0 +
jnz loc_49D753  +
test dl dl +
jz loc_49D74A  +
xor edx edx +
jmp loc_49D74C  +
mov edx eax +
mov eax esi +
mov ecx [eax] +
call dword ptr [ecx+1Ch]  +
pop esi  +
retn   +
***
mov edx [eax+4] +
test edx edx +
jz loc_49D769  +
mov edx [edx+8] +
xchg eax edx +
call unknown_libname_419  +
retn   +
or eax 0FFFFFFFFh +
retn   +
***
add esp 0FFFFFF00h +
mov esi edx +
mov ebx eax +
mov edx esp +
mov eax [ebx] +
call @System@TObject@ClassName$qqrp17System@TMetaClass  +
mov edx esp +
mov eax esi +
call unknown_libname_547  +
add esp 100h +
pop esi  +
pop ebx  +
retn   +
***
add esp 0FFFFFEECh +
push ebx  +
push esi  +
push edi  +
xor ecx ecx +
mov [ebp+var_14] ecx +
mov edi edx +
mov ebx eax +
xor eax eax +
push ebp  +
push offset loc_49D82D  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
cmp dword ptr [ebx+4] 0 +
jz loc_49D7FD  +
push edi  +
lea edx [ebp+var_14] +
mov eax [ebx+4] +
mov si 0FFFEh +
call @System@@CallDynaInst$qqrv  +
mov eax [ebp+var_14] +
mov [ebp+var_10] eax +
mov [ebp+var_C] 0Bh +
mov eax ebx +
call @Classes@TCollectionItem@GetIndex$qqrv  +
mov [ebp+var_8] eax +
mov [ebp+var_4] 0 +
lea edx [ebp+var_10] +
mov ecx 1 +
mov eax offset _str__s__d_.Text +
call @Sysutils@Format$qqrx17System@AnsiStringpx14System@TVarRecxi  +
jmp loc_49D817  +
lea edx [ebp+var_114] +
mov eax [ebx] +
call @System@TObject@ClassName$qqrp17System@TMetaClass  +
lea edx [ebp+var_114] +
mov eax edi +
call unknown_libname_547  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_49D834  +
lea eax [ebp+var_14] +
call unknown_libname_540  +
retn   +
jmp unknown_libname_539  +
jmp loc_49D824  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
mov esi edx +
xor edx edx +
mov esi edx +
mov ebx eax +
mov eax ebx +
call @Classes@TCollectionItem@GetIndex$qqrv  +
test eax eax +
jl loc_49D8AC  +
cmp esi eax +
jz loc_49D8AC  +
mov edx [ebx+4] +
mov edx [edx+8] +
mov ecx esi +
xchg eax edx +
call @Classes@TList@Move$qqrii  +
mov dl 1 +
mov eax ebx +
call sub_49D734  +
pop esi  +
pop ebx  +
retn   +
***
test dl dl +
jz loc_49D8BE  +
add esp 0FFFFFFF0h +
call unknown_libname_535  +
mov ebx edx +
mov esi eax +
mov [esi+4] ecx +
mov dl 1 +
mov eax ds:off_49A5D8 +
call @System@TObject@$bctr$qqrv  +
mov [esi+8] eax +
xor ecx ecx +
mov edx esi +
mov eax esi +
call unknown_libname_421  +
mov eax esi +
test bl bl +
jz loc_49D8F4  +
call sub_4BABC8  +
pop large dword ptr fs:0  +
add esp 0Ch +
mov eax esi +
pop esi  +
pop ebx  +
retn   +
***
call unknown_libname_536  +
mov ebx eax +
push ecx  +
push ebx  +
push esi  +
push edi  +
mov esi edx +
mov [ebp+var_4] eax +
mov eax esi +
mov edx ds:off_49A8F0 +
call @System@@IsClass$qqrp14System@TObjectp17System@TMetaClass  +
test al al +
jz loc_49D9ED  +
mov eax [ebp+var_4] +
mov edx [eax] +
call dword ptr [edx+20h]  +
xor eax eax +
push ebp  +
push offset loc_49D9E6  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov eax [ebp+var_4] +
call sub_49DA14  +
mov eax esi +
call sub_49DAB8  +
mov ebx eax +
dec ebx  +
test ebx ebx +
jl loc_49D9D0  +
inc ebx  +
xor edi edi +
mov edx edi +
mov eax esi +
call sub_49DAC0  +
push eax  +
mov eax [ebp+var_4] +
call sub_49D948  +
pop edx  +
mov ecx [eax] +
call dword ptr [ecx+8]  +
inc edi  +
dec ebx  +
jnz loc_49D9B4  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_49D9F7  +
mov eax [ebp+var_4] +
mov edx [eax] +
call dword ptr [edx+24h]  +
retn   +
jmp unknown_libname_539  +
jmp loc_49D9DD  +
mov edx esi +
mov eax [ebp+var_4] +
call @Classes@TPersistent@Assign$qqrp19Classes@TPersistent  +
pop edi  +
pop esi  +
pop ebx  +
pop ecx  +
pop ebp  +
retn   +
***
cmp dword ptr [eax+0Ch] 0 +
jnz locret_49DA11  +
xor edx edx +
mov ecx [eax] +
call dword ptr [ecx+1Ch]  +
retn   +
***
push ecx  +
push ebx  +
mov [ebp+var_4] eax +
mov eax [ebp+var_4] +
mov eax [eax+8] +
cmp dword ptr [eax+8] 0 +
jle loc_49DA75  +
mov eax [ebp+var_4] +
mov edx [eax] +
call dword ptr [edx+20h]  +
xor eax eax +
push ebp  +
push offset loc_49DA6E  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
jmp loc_49DA4C  +
mov eax ebx +
call @TList@Last$qqrv  +
call @System@TObject@Free$qqrv  +
mov eax [ebp+var_4] +
mov ebx [eax+8] +
cmp dword ptr [ebx+8] 0 +
jg loc_49DA40  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_49DA75  +
mov eax [ebp+var_4] +
mov edx [eax] +
call dword ptr [edx+24h]  +
retn   +
jmp unknown_libname_539  +
jmp loc_49DA65  +
pop ebx  +
pop ecx  +
pop ebp  +
retn   +
***
dec dword ptr [eax+0Ch]  +
call sub_49DA04  +
retn   +
***
xor eax eax +
retn   +
***
mov eax ebx +
push ebx  +
mov eax [eax+8] +
mov eax [eax+8] +
retn   +
***
mov esi edx +
mov ebx eax +
mov edx esi +
mov eax [ebx+8] +
call @Classes@TList@Get$qqri  +
pop esi  +
pop ebx  +
retn   +
***
add esp 0FFFFFEF8h +
push ebx  +
push esi  +
push edi  +
xor ecx ecx +
mov [ebp+var_4] ecx +
mov [ebp+var_8] ecx +
mov edi edx +
mov ebx eax +
xor eax eax +
push ebp  +
push offset loc_49DB82  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
lea edx [ebp+var_108] +
mov eax [ebx] +
call @System@TObject@ClassName$qqrp17System@TMetaClass  +
lea edx [ebp+var_108] +
mov eax edi +
call unknown_libname_547  +
mov eax ebx +
mov si 0FFFFh +
call @System@@CallDynaInst$qqrv  +
test eax eax +
jz loc_49DB67  +
mov eax ebx +
mov si 0FFFFh +
call @System@@CallDynaInst$qqrv  +
lea edx [ebp+var_4] +
mov si 0FFFEh +
call @System@@CallDynaInst$qqrv  +
cmp [ebp+var_4] 0 +
jz loc_49DB67  +
lea edx [ebp+var_8] +
mov eax ebx +
call sub_49DB9C  +
cmp [ebp+var_8] 0 +
jz loc_49DB67  +
push [ebp+var_4]  +
push offset _str___1.Text  +
push [ebp+var_8]  +
mov eax edi +
mov edx 3 +
call sub_4BB6D0  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_49DB89  +
lea eax [ebp+var_8] +
mov edx 2 +
call unknown_libname_541  +
retn   +
jmp unknown_libname_539  +
jmp loc_49DB74  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
add esp 0FFFFFFF0h +
push ebx  +
push esi  +
push edi  +
mov [ebp+var_8] edx +
mov [ebp+var_4] eax +
mov eax [ebp+var_8] +
mov edx [ebp+var_4] +
mov edx [edx+14h] +
call unknown_libname_542  +
mov eax [ebp+var_4] +
mov si 0FFFFh +
call @System@@CallDynaInst$qqrv  +
mov [ebp+var_10] eax +
mov eax [ebp+var_8] +
cmp dword ptr [eax] 0 +
jnz loc_49DCAE  +
cmp [ebp+var_10] 0 +
jz loc_49DCAE  +
mov eax [ebp+var_10] +
mov eax [eax] +
call @System@TObject@ClassInfo$qqrp17System@TMetaClass  +
test eax eax +
jz loc_49DCAE  +
mov eax [ebp+var_10] +
mov eax [eax] +
call @System@TObject@ClassInfo$qqrp17System@TMetaClass  +
call unknown_libname_445  +
mov ebx eax +
test ebx ebx +
jz loc_49DCAE  +
cmp word ptr [ebx+8] 0 +
jz loc_49DCAE  +
movsx eax word ptr [ebx+8] +
shl eax 2 +
call sub_4B97C0  +
mov [ebp+var_C] eax +
xor eax eax +
push ebp  +
push offset loc_49DC99  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov eax [ebp+var_10] +
mov eax [eax] +
call @System@TObject@ClassInfo$qqrp17System@TMetaClass  +
mov edx [ebp+var_C] +
call @Typinfo@GetPropInfos$qqrp17Typinfo@TTypeInfopa16380$p17Typinfo@TPropInfo  +
movsx edi word ptr [ebx+8] +
dec edi  +
test edi edi +
jl loc_49DC83  +
inc edi  +
xor ebx ebx +
mov eax [ebp+var_C] +
mov esi [eax+ebx*4] +
mov eax [esi] +
mov eax [eax] +
cmp byte ptr [eax] 7 +
jnz loc_49DC7F  +
mov eax [ebp+var_C] +
mov edx [eax+ebx*4] +
mov eax [ebp+var_10] +
call @Typinfo@GetOrdProp$qqrp14System@TObjectp17Typinfo@TPropInfo  +
cmp eax [ebp+var_4] +
jnz loc_49DC7F  +
mov eax [ebp+var_4] +
add eax 14h +
lea edx [esi+1Ah] +
call unknown_libname_547  +
inc ebx  +
dec edi  +
jnz loc_49DC4F  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_49DCA0  +
mov eax [ebp+var_C] +
call sub_4B97E0  +
retn   +
jmp unknown_libname_539  +
jmp loc_49DC90  +
mov eax [ebp-8] +
mov edx [ebp-4] +
mov edx [edx+14h] +
call unknown_libname_542  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
mov esi edx +
call sub_49D948  +
mov ebx eax +
mov edx esi +
mov eax ebx +
mov ecx [eax] +
call dword ptr [ecx+14h]  +
mov eax ebx +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
mov esi edx +
mov ebx eax +
mov eax esi +
mov edx [ebx+4] +
call @System@@IsClass$qqrp14System@TObjectp17System@TMetaClass  +
test al al +
jnz loc_49DCFB  +
mov edx off_4EA86C +
xor ecx ecx +
mov eax ds:off_49A5D8 +
call @Classes@TList@Error$qqrp17System@TMetaClassp20System@TResStringReci  +
mov edx esi +
mov eax [ebx+8] +
call @Classes@TList@Add$qqrpv  +
mov [esi+4] ebx +
mov eax [ebx+10h] +
mov [esi+8] eax +
inc dword ptr [ebx+10h]  +
mov edx esi +
mov eax ebx +
mov ecx [eax] +
call dword ptr [ecx+18h]  +
xor ecx ecx +
mov edx esi +
mov eax ebx +
mov edi [eax] +
call dword ptr [edi+14h]  +
mov eax ebx +
call sub_49DA04  +
xor ecx ecx +
mov edx esi +
mov eax ebx +
call unknown_libname_421  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
mov esi edx +
mov ebx eax +
mov cl 1 +
mov edx esi +
mov eax ebx +
mov edi [eax] +
call dword ptr [edi+14h]  +
mov eax [ebx+8] +
call @TList@Last$qqrv  +
cmp esi eax +
jnz loc_49DD68  +
mov eax [ebx+8] +
mov edx [eax+8] +
dec edx  +
call @Classes@TList@Delete$qqri  +
jmp loc_49DD72  +
mov edx esi +
mov eax [ebx+8] +
call @Classes@TList@Remove$qqrpv  +
xor eax eax +
mov [esi+4] eax +
mov cl 1 +
mov edx esi +
mov eax ebx +
call unknown_libname_421  +
mov eax ebx +
call sub_49DA04  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
mov esi edx +
mov ebx eax +
mov edx esi +
mov eax [ebx+8] +
call @Classes@TList@Get$qqri  +
mov edx eax +
mov cl 2 +
mov eax ebx +
mov edi [eax] +
call dword ptr [edi+14h]  +
mov edx esi +
mov eax [ebx+8] +
call @Classes@TList@Get$qqri  +
call @System@TObject@Free$qqrv  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
call @System@@CallDynaInst$qqrv  +
sub cl 1 +
jb loc_49DDEB  +
dec cl  +
jz loc_49DDF4  +
jmp loc_49DDFC  +
mov edx esp +
mov ecx [eax] +
call dword ptr [ecx+0Ch]  +
pop edx  +
retn   +
mov edx [esp+4+var_4] +
mov ecx [eax] +
call dword ptr [ecx+10h]  +
pop edx  +
retn   +
***
push ebx  +
push esi  +
test dl dl +
jz loc_49DE11  +
add esp 0FFFFFFF0h +
call unknown_libname_535  +
mov ebx edx +
mov esi eax +
mov [esi+18h] ecx +
mov ecx [ebp+arg_0] +
xor edx edx +
mov eax esi +
call @Dbexplif@TExploreList@$bctr$qqrp23Dbexplif@TExploreObject  +
mov eax esi +
test bl bl +
jz loc_49DE39  +
call sub_4BABC8  +
pop large dword ptr fs:0  +
add esp 0Ch +
mov eax esi +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
call unknown_libname_536  +
mov ebx edx +
mov esi eax +
xor edx edx +
mov eax esi +
call sub_49E988  +
mov edx ebx +
and dl 0FCh +
mov eax esi +
call sub_49D348  +
test bl bl +
jle loc_49DE73  +
mov eax esi +
call @System@@ClassDestroy$qqrp14System@TObject  +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
mov edi edx +
mov ebx eax +
mov eax ebx +
mov edx [eax] +
call dword ptr [edx+14h]  +
mov esi eax +
mov ecx edi +
mov edx esi +
mov eax ebx +
mov ebx [eax] +
call dword ptr [ebx+60h]  +
mov eax esi +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
mov edi ecx +
mov esi eax +
mov eax esi +
mov ecx [eax] +
call dword ptr [ecx+38h]  +
mov ebx eax +
mov ecx edi +
mov edx ebx +
mov eax esi +
mov esi [eax] +
call dword ptr [esi+24h]  +
mov eax ebx +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
add esp 0FFFFFFF4h +
push ebx  +
push esi  +
push edi  +
xor ecx ecx +
mov [ebp+var_C] ecx +
mov [ebp+var_8] edx +
mov [ebp+var_4] eax +
xor eax eax +
push ebp  +
push offset loc_49DF67  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov eax [ebp+var_4] +
call sub_49E008  +
xor eax eax +
push ebp  +
push offset loc_49DF4A  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov eax [ebp+var_8] +
mov edx [eax] +
call dword ptr [edx+14h]  +
mov esi eax +
dec esi  +
test esi esi +
jl loc_49DF34  +
inc esi  +
xor ebx ebx +
lea ecx [ebp+var_C] +
mov edx ebx +
mov eax [ebp+var_8] +
mov edi [eax] +
call dword ptr [edi+0Ch]  +
mov eax [ebp+var_C] +
push eax  +
mov edx ebx +
mov eax [ebp+var_8] +
mov ecx [eax] +
call dword ptr [ecx+18h]  +
mov ecx eax +
mov eax [ebp+var_4] +
pop edx  +
mov edi [eax] +
call dword ptr [edi+3Ch]  +
inc ebx  +
dec esi  +
jnz loc_49DF0A  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_49DF51  +
mov eax [ebp+var_4] +
call loc_49E0C4  +
retn   +
jmp unknown_libname_539  +
jmp loc_49DF41  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_49DF6E  +
lea eax [ebp+var_C] +
call unknown_libname_540  +
retn   +
jmp unknown_libname_539  +
jmp loc_49DF5E  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
push ecx  +
push ebx  +
push esi  +
mov ebx edx +
mov [ebp+var_4] eax +
mov eax ebx +
mov edx ds:off_49AAB8 +
call @System@@IsClass$qqrp14System@TObjectp17System@TMetaClass  +
test al al +
jz loc_49DFF6  +
mov eax [ebp+var_4] +
call sub_49E008  +
xor eax eax +
push ebp  +
push offset loc_49DFEF  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov eax [ebp+var_4] +
mov edx [eax] +
call dword ptr [edx+44h]  +
mov esi ebx +
mov al [esi+4] +
mov edx [ebp+var_4] +
mov [edx+4] al +
mov al [esi+6] +
mov edx [ebp+var_4] +
mov [edx+6] al +
mov al [esi+5] +
mov edx [ebp+var_4] +
mov [edx+5] al +
mov edx esi +
mov eax [ebp+var_4] +
mov ecx [eax] +
call dword ptr [ecx+40h]  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_49E000  +
mov eax [ebp+var_4] +
call loc_49E0C4  +
retn   +
jmp unknown_libname_539  +
jmp loc_49DFE6  +
mov edx ebx +
mov eax [ebp+var_4] +
call @Classes@TPersistent@Assign$qqrp19Classes@TPersistent  +
pop esi  +
pop ebx  +
pop ecx  +
pop ebp  +
retn   +
***
cmp dword ptr [ebx+8] 0 +
jnz loc_49E01A  +
mov dl 1 +
mov eax ebx +
mov ecx [eax] +
call dword ptr [ecx+30h]  +
inc dword ptr [ebx+8]  +
pop ebx  +
retn   +
***
push ebx  +
push esi  +
mov eax [ebp+arg_0] +
mov eax [eax-4] +
mov esi [eax+20h] +
test esi esi +
jz loc_49E05F  +
mov bl 1 +
mov eax [ebp+arg_0] +
mov eax esi +
mov edx ds:off_49AAB8 +
call @System@@IsClass$qqrp14System@TObjectp17System@TMetaClass  +
test al al +
jz loc_49E06F  +
mov eax [ebp+arg_0] +
mov edx esi +
mov eax [ebp+arg_0] +
mov eax [eax-8] +
call @Classes@TStrings@Equals$qqrp16Classes@TStrings  +
mov ebx eax +
xor bl 1 +
jmp loc_49E06F  +
mov eax [ebp+arg_0] +
mov eax [eax-8] +
mov edx [eax] +
call dword ptr [edx+14h]  +
test eax eax +
setnle bl  +
mov eax ebx +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
add esp 0FFFFFFF8h +
push ebx  +
mov [ebp+var_4] edx +
mov [ebp+var_8] eax +
mov eax [ebp+var_8] +
push eax  +
push offset @Httpprod@TBasePageProducer@GetLocateFileService$qqrv  +
mov eax [ebp+var_8] +
push eax  +
push offset @Stdctrls@TCustomComboBox@GetSelText$qqrv  +
push ebp  +
call @Classes@_16681  +
pop ecx  +
mov ecx eax +
mov edx offset _str_Strings.Text +
mov eax [ebp+var_4] +
mov ebx [eax] +
call dword ptr [ebx+4]  +
pop ebx  +
pop ecx  +
pop ecx  +
pop ebp  +
retn   +
***
dec dword ptr [eax+8]  +
cmp dword ptr [eax+8] 0 +
jnz locret_49E0D4  +
xor edx edx +
mov ecx [eax] +
call dword ptr [ecx+30h]  +
retn   +
***
add esp 0FFFFFFECh +
push ebx  +
push esi  +
push edi  +
xor ecx ecx +
mov [ebp+var_10] ecx +
mov [ebp+var_14] ecx +
mov [ebp+var_8] edx +
mov [ebp+var_4] eax +
xor eax eax +
push ebp  +
push offset loc_49E16D  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov [ebp+var_9] 0 +
mov eax [ebp+var_4] +
mov edx [eax] +
call dword ptr [edx+14h]  +
mov ebx eax +
mov eax [ebp+var_8] +
mov edx [eax] +
call dword ptr [edx+14h]  +
cmp ebx eax +
jnz loc_49E152  +
mov esi ebx +
dec esi  +
test esi esi +
jl loc_49E14E  +
inc esi  +
xor ebx ebx +
lea ecx [ebp+var_10] +
mov edx ebx +
mov eax [ebp+var_4] +
mov edi [eax] +
call dword ptr [edi+0Ch]  +
mov eax [ebp+var_10] +
push eax  +
lea ecx [ebp+var_14] +
mov edx ebx +
mov eax [ebp+var_8] +
mov edi [eax] +
call dword ptr [edi+0Ch]  +
mov edx [ebp+var_14] +
pop eax  +
call @System@@LStrCmp$qqrv  +
jnz loc_49E152  +
inc ebx  +
dec esi  +
jnz loc_49E121  +
mov [ebp+var_9] 1 +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_49E174  +
lea eax [ebp+var_14] +
mov edx 2 +
call unknown_libname_541  +
retn   +
jmp unknown_libname_539  +
jmp loc_49E15F  +
mov al [ebp+var_9] +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
add esp 0FFFFFFF8h +
mov esi ecx +
mov ebx edx +
call sub_49E180  +
push eax  +
mov [esp+0Ch+var_8] esi +
mov [esp+0Ch+var_4] 0 +
lea eax [esp+0Ch+var_8] +
push eax  +
push 0  +
mov ecx ebx +
mov dl 1 +
mov eax ds:off_49A460 +
call sub_4AC1B8  +
jmp @System@@RaiseExcept$qqrv  +
***
pop ecx  +
pop edx  +
pop esi  +
pop ebx  +
retn   +
***
push 0  +
push ebx  +
push esi  +
push edi  +
mov edi ecx +
mov esi edx +
mov ebx eax +
xor eax eax +
push ebp  +
push offset loc_49E204  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
lea edx [ebp+var_4] +
mov eax esi +
call @System@LoadResString$qqrp20System@TResStringRec  +
mov edx [ebp+var_4] +
mov ecx edi +
mov eax ebx +
call sub_49E184  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_49E20B  +
lea eax [ebp+var_4] +
call unknown_libname_540  +
retn   +
jmp unknown_libname_539  +
jmp loc_49E1FB  +
pop edi  +
pop esi  +
pop ebx  +
pop ecx  +
pop ebp  +
retn   +
***
add esp 0FFFFFFF0h +
push ebx  +
push esi  +
push edi  +
xor ebx ebx +
mov [ebp+var_10] ebx +
mov [ebp+var_C] ebx +
mov esi ecx +
mov ebx edx +
mov [ebp+var_4] eax +
xor eax eax +
push ebp  +
push offset loc_49E2EC  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov eax [ebp+var_4] +
call sub_49E008  +
xor eax eax +
push ebp  +
push offset loc_49E2CA  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
lea ecx [ebp+var_C] +
mov edx ebx +
mov eax [ebp+var_4] +
mov edi [eax] +
call dword ptr [edi+0Ch]  +
mov edx ebx +
mov eax [ebp+var_4] +
mov ecx [eax] +
call dword ptr [ecx+18h]  +
mov [ebp+var_8] eax +
lea ecx [ebp+var_10] +
mov edx esi +
mov eax [ebp+var_4] +
mov edi [eax] +
call dword ptr [edi+0Ch]  +
mov ecx [ebp+var_10] +
mov edx ebx +
mov eax [ebp+var_4] +
mov edi [eax] +
call dword ptr [edi+20h]  +
mov edx esi +
mov eax [ebp+var_4] +
mov ecx [eax] +
call dword ptr [ecx+18h]  +
mov ecx eax +
mov edx ebx +
mov eax [ebp+var_4] +
mov ebx [eax] +
call dword ptr [ebx+24h]  +
mov ecx [ebp+var_C] +
mov edx esi +
mov eax [ebp+var_4] +
mov ebx [eax] +
call dword ptr [ebx+20h]  +
mov ecx [ebp+var_8] +
mov edx esi +
mov eax [ebp+var_4] +
mov ebx [eax] +
call dword ptr [ebx+24h]  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_49E2D1  +
mov eax [ebp+var_4] +
call loc_49E0C4  +
retn   +
jmp unknown_libname_539  +
jmp loc_49E2C1  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_49E2F3  +
lea eax [ebp+var_10] +
mov edx 2 +
call unknown_libname_541  +
retn   +
jmp unknown_libname_539  +
jmp loc_49E2DE  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
call dword ptr [edx+14h]  +
retn   +
***
retn   +
***
push 0  +
push ebx  +
mov ebx eax +
xor eax eax +
push ebp  +
push offset loc_49E34D  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
lea edx [ebp+var_4] +
mov eax ebx +
mov ecx [eax] +
call dword ptr [ecx+1Ch]  +
mov eax [ebp+var_4] +
call unknown_libname_550  +
call unknown_libname_466  +
mov ebx eax +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_49E354  +
lea eax [ebp+var_4] +
call unknown_libname_540  +
retn   +
jmp unknown_libname_539  +
jmp loc_49E344  +
mov eax ebx +
pop ebx  +
pop ecx  +
pop ebp  +
retn   +
***
add esp 0FFFFFFE0h +
push ebx  +
push esi  +
push edi  +
xor ecx ecx +
mov [ebp+var_20] ecx +
mov [ebp+var_18] ecx +
mov [ebp+var_1C] ecx +
mov [ebp+var_8] edx +
mov [ebp+var_4] eax +
xor eax eax +
push ebp  +
push offset loc_49E467  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov eax [ebp+var_4] +
mov edx [eax] +
call dword ptr [edx+14h]  +
mov [ebp+var_10] eax +
xor ebx ebx +
lea eax [ebp+var_1C] +
mov edx offset _str____2.Text +
call unknown_libname_543  +
mov esi [ebp+var_10] +
dec esi  +
test esi esi +
jl loc_49E3D8  +
inc esi  +
mov [ebp+var_C] 0 +
lea ecx [ebp+var_20] +
mov edx [ebp+var_C] +
mov eax [ebp+var_4] +
mov edi [eax] +
call dword ptr [edi+0Ch]  +
mov eax [ebp+var_20] +
call sub_4BB610  +
mov edi eax +
mov eax [ebp+var_1C] +
call sub_4BB610  +
add edi eax +
add ebx edi +
inc [ebp+var_C]  +
dec esi  +
jnz loc_49E3AE  +
mov eax [ebp+var_8] +
mov ecx ebx +
xor edx edx +
call @@LStrFromPCharLen$qqrr10AnsiStringpci  +
mov eax [ebp+var_8] +
mov eax [eax] +
mov [ebp+var_14] eax +
mov esi [ebp+var_10] +
dec esi  +
test esi esi +
jl loc_49E44C  +
inc esi  +
mov [ebp+var_C] 0 +
lea ecx [ebp+var_18] +
mov edx [ebp+var_C] +
mov eax [ebp+var_4] +
mov ebx [eax] +
call dword ptr [ebx+0Ch]  +
mov eax [ebp+var_18] +
call sub_4BB610  +
mov ebx eax +
test ebx ebx +
jz loc_49E428  +
mov edx [ebp+var_14] +
mov eax [ebp+var_18] +
mov ecx ebx +
call sub_4B9A24  +
add [ebp+var_14] ebx +
mov eax [ebp+var_1C] +
call sub_4BB610  +
mov ebx eax +
test ebx ebx +
jz loc_49E446  +
mov edx [ebp+var_14] +
mov eax [ebp+var_1C] +
mov ecx ebx +
call sub_4B9A24  +
add [ebp+var_14] ebx +
inc [ebp+var_C]  +
dec esi  +
jnz loc_49E3FC  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_49E46E  +
lea eax [ebp+var_20] +
mov edx 3 +
call unknown_libname_541  +
retn   +
jmp unknown_libname_539  +
jmp loc_49E459  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
add esp 0FFFFFFF4h +
push ebx  +
push esi  +
push edi  +
xor ecx ecx +
mov [ebp+var_C] ecx +
mov [ebp+var_4] edx +
mov ebx eax +
xor eax eax +
push ebp  +
push offset loc_49E4FC  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov eax ebx +
mov edx [eax] +
call dword ptr [edx+14h]  +
mov esi eax +
dec esi  +
test esi esi +
jl loc_49E4DF  +
inc esi  +
mov [ebp+var_8] 0 +
lea ecx [ebp+var_C] +
mov edx [ebp+var_8] +
mov eax ebx +
mov edi [eax] +
call dword ptr [edi+0Ch]  +
mov edx [ebp+var_C] +
mov ecx [ebp+var_4] +
mov eax ebx +
mov edi [eax] +
call dword ptr [edi+34h]  +
test eax eax +
jz loc_49E4E6  +
inc [ebp+var_8]  +
dec esi  +
jnz loc_49E4BB  +
mov [ebp+var_8] 0FFFFFFFFh +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_49E503  +
lea eax [ebp+var_C] +
call unknown_libname_540  +
retn   +
jmp unknown_libname_539  +
jmp loc_49E4F3  +
mov eax [ebp+var_8] +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
add esp 0FFFFFFECh +
push ebx  +
push esi  +
xor ecx ecx +
mov [ebp+var_14] ecx +
mov [ebp+var_C] ecx +
mov [ebp+var_4] edx +
mov esi eax +
xor eax eax +
push ebp  +
push offset loc_49E5BC  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov eax esi +
mov edx [eax] +
call dword ptr [edx+14h]  +
dec eax  +
test eax eax +
jl loc_49E597  +
inc eax  +
mov [ebp+var_10] eax +
mov [ebp+var_8] 0 +
lea ecx [ebp+var_C] +
mov edx [ebp+var_8] +
mov eax esi +
mov ebx [eax] +
call dword ptr [ebx+0Ch]  +
mov edx [ebp+var_C] +
mov eax offset _str___17.Text +
call sub_4ACD40  +
mov ebx eax +
test ebx ebx +
jz loc_49E58F  +
lea eax [ebp+var_14] +
push eax  +
mov ecx ebx +
dec ecx  +
mov edx 1 +
mov eax [ebp+var_C] +
call @System@@LStrCopy$qqrv  +
mov edx [ebp+var_14] +
mov ecx [ebp+var_4] +
mov eax esi +
mov ebx [eax] +
call dword ptr [ebx+34h]  +
test eax eax +
jz loc_49E59E  +
inc [ebp+var_8]  +
dec [ebp+var_10]  +
jnz loc_49E54A  +
mov [ebp+var_8] 0FFFFFFFFh +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_49E5C3  +
lea eax [ebp+var_14] +
call unknown_libname_540  +
lea eax [ebp+var_C] +
call unknown_libname_540  +
retn   +
jmp unknown_libname_539  +
jmp loc_49E5AB  +
mov eax [ebp+var_8] +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
push edi  +
push ecx  +
push ebx  +
push esi  +
push edi  +
mov [ebp+var_4] ecx +
mov edi edx +
mov esi eax +
mov ecx [ebp+var_4] +
mov edx edi +
mov eax esi +
mov ebx [eax] +
call dword ptr [ebx+60h]  +
mov ecx [ebp+arg_0] +
mov edx edi +
mov eax esi +
mov ebx [eax] +
call dword ptr [ebx+24h]  +
pop edi  +
pop esi  +
pop ebx  +
pop ecx  +
pop ebp  +
retn 4  +
***
push ecx  +
push esi  +
mov esi eax +
push 20h  +
mov ecx edx +
mov eax ds:off_49ADC4 +
mov dl 1 +
call sub_49F6D0  +
mov [ebp+var_4] eax +
xor eax eax +
push ebp  +
push offset loc_49E684  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov edx [ebp+var_4] +
mov eax esi +
mov ecx [eax] +
call dword ptr [ecx+6Ch]  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_49E68B  +
mov eax [ebp+var_4] +
call @System@TObject@Free$qqrv  +
retn   +
jmp unknown_libname_539  +
jmp loc_49E67B  +
pop esi  +
pop ecx  +
pop ebp  +
retn   +
***
add esp 0FFFFFFF8h +
push ebx  +
push esi  +
xor ecx ecx +
mov [ebp+var_8] ecx +
mov ebx edx +
mov [ebp+var_4] eax +
xor eax eax +
push ebp  +
push offset loc_49E72E  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov eax [ebp+var_4] +
call sub_49E008  +
xor eax eax +
push ebp  +
push offset loc_49E711  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov eax ebx +
call sub_49F1E8  +
mov esi eax +
mov eax ebx +
call sub_49F1B4  +
sub esi eax +
lea eax [ebp+var_8] +
mov ecx esi +
xor edx edx +
call @@LStrFromPCharLen$qqrr10AnsiStringpci  +
mov edx [ebp+var_8] +
mov ecx esi +
mov eax ebx +
mov ebx [eax] +
call dword ptr [ebx+8]  +
mov edx [ebp+var_8] +
mov eax [ebp+var_4] +
mov ecx [eax] +
call dword ptr [ecx+2Ch]  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_49E718  +
mov eax [ebp+var_4] +
call loc_49E0C4  +
retn   +
jmp unknown_libname_539  +
jmp loc_49E708  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_49E735  +
lea eax [ebp+var_8] +
call unknown_libname_540  +
retn   +
jmp unknown_libname_539  +
jmp loc_49E725  +
pop esi  +
pop ebx  +
pop ecx  +
pop ecx  +
pop ebp  +
retn   +
***
add esp 0FFFFFFF8h +
push ebx  +
push esi  +
push edi  +
xor ebx ebx +
mov [ebp+var_8] ebx +
mov esi ecx +
mov ebx edx +
mov [ebp+var_4] eax +
xor eax eax +
push ebp  +
push offset loc_49E7DD  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
cmp esi ebx +
jz loc_49E7C7  +
mov eax [ebp+var_4] +
call sub_49E008  +
xor eax eax +
push ebp  +
push offset loc_49E7C0  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
lea ecx [ebp+var_8] +
mov edx ebx +
mov eax [ebp+var_4] +
mov edi [eax] +
call dword ptr [edi+0Ch]  +
mov edx ebx +
mov eax [ebp+var_4] +
mov ecx [eax] +
call dword ptr [ecx+18h]  +
mov edi eax +
mov edx ebx +
mov eax [ebp+var_4] +
mov ecx [eax] +
call dword ptr [ecx+48h]  +
push edi  +
mov ecx [ebp+var_8] +
mov edx esi +
mov eax [ebp+var_4] +
mov ebx [eax] +
call dword ptr [ebx+64h]  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_49E7C7  +
mov eax [ebp+var_4] +
call loc_49E0C4  +
retn   +
jmp unknown_libname_539  +
jmp loc_49E7B7  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_49E7E4  +
lea eax [ebp+var_8] +
call unknown_libname_540  +
retn   +
jmp unknown_libname_539  +
jmp loc_49E7D4  +
pop edi  +
pop esi  +
pop ebx  +
pop ecx  +
pop ecx  +
pop ebp  +
retn   +
***
push edi  +
push ebp  +
mov ebp ecx +
mov esi edx +
mov ebx eax +
mov edx esi +
mov eax ebx +
mov ecx [eax] +
call dword ptr [ecx+18h]  +
mov edi eax +
mov edx esi +
mov eax ebx +
mov ecx [eax] +
call dword ptr [ecx+48h]  +
push edi  +
mov ecx ebp +
mov edx esi +
mov eax ebx +
mov ebx [eax] +
call dword ptr [ebx+64h]  +
pop ebp  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
add esp 0FFFFFFF4h +
xor ecx ecx +
mov [ebp+var_C] ecx +
mov [ebp+var_8] edx +
mov [ebp+var_4] eax +
xor eax eax +
push ebp  +
push offset loc_49E8C4  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov eax [ebp+var_8] +
call sub_4A11B4  +
mov eax [ebp+var_4] +
call sub_49E008  +
xor eax eax +
push ebp  +
push offset loc_49E89F  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov eax [ebp+var_4] +
mov edx [eax] +
call dword ptr [edx+44h]  +
jmp loc_49E87D  +
lea edx [ebp+var_C] +
mov eax [ebp+var_8] +
call sub_4A1E70  +
mov edx [ebp+var_C] +
mov eax [ebp+var_4] +
mov ecx [eax] +
call dword ptr [ecx+38h]  +
mov eax [ebp+var_8] +
call unknown_libname_425  +
test al al +
jz loc_49E867  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_49E8A6  +
mov eax [ebp+var_4] +
call loc_49E0C4  +
retn   +
jmp unknown_libname_539  +
jmp loc_49E896  +
mov eax [ebp+var_8] +
call sub_4A11BC  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_49E8CB  +
lea eax [ebp+var_C] +
call unknown_libname_540  +
retn   +
jmp unknown_libname_539  +
jmp loc_49E8BB  +
mov esp ebp +
pop ebp  +
retn   +
***
push ecx  +
push esi  +
mov esi eax +
push 0FFFFh  +
mov ecx edx +
mov eax ds:off_49ADC4 +
mov dl 1 +
call sub_49F6D0  +
mov [ebp+var_4] eax +
xor eax eax +
push ebp  +
push offset loc_49E91B  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov edx [ebp+var_4] +
mov eax esi +
mov ecx [eax] +
call dword ptr [ecx+78h]  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_49E922  +
mov eax [ebp+var_4] +
call @System@TObject@Free$qqrv  +
retn   +
jmp unknown_libname_539  +
jmp loc_49E912  +
pop esi  +
pop ecx  +
pop ebp  +
retn   +
***
push 0  +
push ebx  +
push esi  +
mov esi edx +
mov ebx eax +
xor eax eax +
push ebp  +
push offset loc_49E975  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
lea edx [ebp+var_4] +
mov eax ebx +
mov ecx [eax] +
call dword ptr [ecx+1Ch]  +
mov eax [ebp+var_4] +
call sub_4BB610  +
mov ecx eax +
mov edx [ebp+var_4] +
mov eax esi +
call sub_49F418  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_49E97C  +
lea eax [ebp+var_4] +
call unknown_libname_540  +
retn   +
jmp unknown_libname_539  +
jmp loc_49E96C  +
pop esi  +
pop ebx  +
pop ecx  +
pop ebp  +
retn   +
***
mov esi edx +
mov ebx eax +
cmp dword ptr [ebx+0Ch] 0 +
jz loc_49E99C  +
mov eax [ebx+0Ch] +
mov edx [eax] +
call dword ptr [edx+10h]  +
lea eax [ebx+0Ch] +
mov edx esi +
call @System@@IntfCopy$qqrr45System@_DelphiInterface$t17System@IInterface_x45System@_DelphiInterface$t17System@IInterface_  +
cmp dword ptr [ebx+0Ch] 0 +
jz loc_49E9B6  +
mov edx ebx +
mov eax [ebx+0Ch] +
mov ecx [eax] +
call dword ptr [ecx+0Ch]  +
pop esi  +
pop ebx  +
retn   +
***
push 0  +
push ebx  +
push esi  +
mov esi edx +
mov ebx eax +
xor eax eax +
push ebp  +
push offset loc_49E9FF  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
lea eax [ebp+var_4] +
mov edx esi +
call unknown_libname_545  +
mov edx [ebp+var_4] +
mov eax ebx +
mov ecx [eax] +
call dword ptr [ecx+2Ch]  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_49EA06  +
lea eax [ebp+var_4] +
call unknown_libname_540  +
retn   +
jmp unknown_libname_539  +
jmp loc_49E9F6  +
pop esi  +
pop ebx  +
pop ecx  +
pop ebp  +
retn   +
***
add esp 0FFFFFFF8h +
add esp 0FFFFFFF4h +
mov eax edx +
mov edx ecx +
call unknown_libname_462  +
retn   +
***
call unknown_libname_536  +
mov ebx edx +
mov esi eax +
xor eax eax +
mov [esi+20h] eax +
mov [esi+24h] eax +
xor eax eax +
mov [esi+28h] eax +
mov [esi+2Ch] eax +
mov edx ebx +
and dl 0FCh +
mov eax esi +
call sub_49DE48  +
mov eax [esi+14h] +
test eax eax +
jz loc_49EB9E  +
mov ecx eax +
mov eax [esi+10h] +
mov edx ds:@$xp$19Classes@TStringItem +
call @System@@FinalizeArray$qqrpvt1ui  +
xor eax eax +
mov [esi+14h] eax +
xor edx edx +
mov eax esi +
mov ecx [eax] +
call dword ptr [ecx+28h]  +
test bl bl +
jle loc_49EBB7  +
mov eax esi +
call @System@@ClassDestroy$qqrp14System@TObject  +
pop esi  +
pop ebx  +
retn   +
***
mov ebx [eax] +
call dword ptr [ebx+3Ch]  +
pop ebx  +
retn   +
***
push edi  +
push ebp  +
push ecx  +
mov edi ecx +
mov esi edx +
mov ebx eax +
cmp byte ptr [ebx+1Ch] 0 +
jnz loc_49EBE1  +
mov eax [ebx+14h] +
mov [esp+4+var_4] eax +
jmp loc_49EC0F  +
mov ecx esp +
mov edx esi +
mov eax ebx +
mov ebp [eax] +
call dword ptr [ebp+8Ch]  +
test al al +
jz loc_49EC0F  +
mov al [ebx+1Dh] +
sub al 1 +
jb loc_49EC20  +
dec al  +
jz loc_49EC00  +
jmp loc_49EC0F  +
mov edx off_4EA858 +
xor ecx ecx +
mov eax ebx +
call @Classes@TStrings@Error$qqrp20System@TResStringReci  +
push edi  +
mov ecx esi +
mov edx [esp+8+var_4] +
mov eax ebx +
mov ebx [eax] +
call dword ptr [ebx+88h]  +
mov eax [esp+4+var_4] +
pop edx  +
pop ebp  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
jnz loc_49EC44  +
cmp word ptr [eax+22h] 0 +
jz loc_49EC44  +
mov ebx eax +
mov edx eax +
mov eax [ebx+24h] +
call dword ptr [ebx+20h]  +
pop ebx  +
retn   +
***
jnz loc_49EC60  +
cmp word ptr [eax+2Ah] 0 +
jz loc_49EC60  +
mov ebx eax +
mov edx eax +
mov eax [ebx+2Ch] +
call dword ptr [ebx+28h]  +
pop ebx  +
retn   +
***
cmp dword ptr [ebx+14h] 0 +
jz loc_49ECA0  +
mov eax ebx +
mov edx [eax] +
call dword ptr [edx+84h]  +
mov eax [ebx+10h] +
mov ecx [ebx+14h] +
mov edx ds:@$xp$19Classes@TStringItem +
call @System@@FinalizeArray$qqrpvt1ui  +
xor eax eax +
mov [ebx+14h] eax +
xor edx edx +
mov eax ebx +
mov ecx [eax] +
call dword ptr [ecx+28h]  +
mov eax ebx +
mov edx [eax] +
call dword ptr [edx+80h]  +
pop ebx  +
retn   +
***
mov esi edx +
mov ebx eax +
test esi esi +
jl loc_49ECB3  +
cmp esi [ebx+14h] +
jl loc_49ECC2  +
mov edx off_4EA884 +
mov ecx esi +
mov eax ebx +
call @Classes@TStrings@Error$qqrp20System@TResStringReci  +
mov eax ebx +
mov edx [eax] +
call dword ptr [edx+84h]  +
mov eax [ebx+10h] +
lea eax [eax+esi*8] +
mov edx ds:@$xp$19Classes@TStringItem +
call unknown_libname_556  +
dec dword ptr [ebx+14h]  +
mov eax [ebx+14h] +
cmp esi eax +
jge loc_49ED00  +
sub eax esi +
mov ecx eax +
shl ecx 3 +
mov eax [ebx+10h] +
lea edx [eax+esi*8] +
mov eax [ebx+10h] +
lea eax [eax+esi*8+8] +
call sub_4B9A24  +
mov eax ebx +
mov edx [eax] +
call dword ptr [edx+80h]  +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
lea edx [ebx+edx*8] +
mov eax [eax+10h] +
lea eax [eax+ecx*8] +
mov ecx [edx] +
mov ebx [eax] +
mov [edx] ebx +
mov [eax] ecx +
mov ecx [edx+4] +
mov ebx [eax+4] +
mov [edx+4] ebx +
mov [eax+4] ecx +
pop ebx  +
retn   +
***
push edi  +
push ebp  +
add esp 0FFFFFFF0h +
mov [esp+10h+var_C] ecx +
mov [esp+10h+var_10] edx +
mov edi eax +
mov [esp+10h+var_8] 0 +
xor esi esi +
mov eax [edi+14h] +
dec eax  +
mov [esp+10h+var_4] eax +
cmp esi [esp+10h+var_4] +
jg loc_49EDF4  +
mov ebx [esp+10h+var_4] +
add ebx esi +
shr ebx 1 +
mov eax [edi+10h] +
mov edx [eax+ebx*8] +
mov ecx [esp+10h+var_10] +
mov eax edi +
mov ebp [eax] +
call dword ptr [ebp+34h]  +
test eax eax +
jge loc_49EDD6  +
lea esi [ebx+1] +
jmp loc_49EDEE  +
mov edx ebx +
dec edx  +
mov [esp+10h+var_4] edx +
test eax eax +
jnz loc_49EDEE  +
mov [esp+10h+var_8] 1 +
cmp byte ptr [edi+1Dh] 1 +
jz loc_49EDEE  +
mov esi ebx +
cmp esi [esp+10h+var_4] +
jle loc_49EDB5  +
mov eax [esp+10h+var_C] +
mov [eax] esi +
mov al [esp+10h+var_8] +
add esp 10h +
pop ebp  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
mov edi ecx +
mov esi edx +
mov ebx eax +
test esi esi +
jl loc_49EE1A  +
cmp esi [ebx+14h] +
jl loc_49EE29  +
mov edx off_4EA884 +
mov ecx esi +
mov eax ebx +
call @Classes@TStrings@Error$qqrp20System@TResStringReci  +
mov eax edi +
mov edx [ebx+10h] +
mov edx [edx+esi*8] +
call unknown_libname_542  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov esi edx +
cmp edx 40h +
jle loc_49EE83  +
mov esi edx +
test esi esi +
jns loc_49EE7E  +
add esi 3 +
sar esi 2 +
jmp loc_49EE94  +
cmp edx 8 +
jle loc_49EE8F  +
mov esi 10h +
jmp loc_49EE94  +
mov esi 4 +
add esi edx +
mov edx esi +
mov ecx [eax] +
call dword ptr [ecx+28h]  +
pop esi  +
retn   +
***
push ecx  +
mov esi edx +
mov ebx eax +
cmp byte ptr [ebx+1Ch] 0 +
jnz loc_49EEBB  +
mov edx esi +
mov eax ebx +
call sub_49E484  +
mov [esp+4+var_4] eax +
jmp loc_49EED4  +
mov ecx esp +
mov edx esi +
mov eax ebx +
mov ebx [eax] +
call dword ptr [ebx+8Ch]  +
test al al +
jnz loc_49EED4  +
mov [esp+4+var_4] 0FFFFFFFFh +
mov eax [esp+4+var_4] +
pop edx  +
pop esi  +
pop ebx  +
retn   +
***
mov esi eax +
push ebx  +
push esi  +
push edi  +
mov edi ecx +
mov esi edx +
mov ebx eax +
cmp byte ptr [ebx+1Ch] 0 +
jz loc_49EF0D  +
mov edx off_4EA8A8 +
xor ecx ecx +
mov eax ebx +
call @Classes@TStrings@Error$qqrp20System@TResStringReci  +
test esi esi +
jl loc_49EF16  +
cmp esi [ebx+14h] +
jle loc_49EF25  +
mov edx off_4EA884 +
mov ecx esi +
mov eax ebx +
call @Classes@TStrings@Error$qqrp20System@TResStringReci  +
mov eax [ebp+arg_0] +
push eax  +
mov ecx edi +
mov edx esi +
mov eax ebx +
mov ebx [eax] +
call dword ptr [ebx+88h]  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
push ebx  +
push edi  +
mov edi ecx +
mov esi edx +
mov ebx eax +
cmp byte ptr [ebx+1Ch] 0 +
jz loc_49EFD6  +
mov edx off_4EA8A8 +
xor ecx ecx +
mov eax ebx +
call @Classes@TStrings@Error$qqrp20System@TResStringReci  +
test esi esi +
jl loc_49EFDF  +
cmp esi [ebx+14h] +
jl loc_49EFEE  +
mov edx off_4EA884 +
mov ecx esi +
mov eax ebx +
call @Classes@TStrings@Error$qqrp20System@TResStringReci  +
mov eax ebx +
mov edx [eax] +
call dword ptr [edx+84h]  +
mov eax [ebx+10h] +
lea eax [eax+esi*8] +
mov edx edi +
call unknown_libname_542  +
mov eax ebx +
mov edx [eax] +
call dword ptr [edx+80h]  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
add esp 0FFFFFFF0h +
mov esi edx +
mov ebx eax +
mov edx esi +
shl edx 3 +
lea eax [ebx+10h] +
call unknown_libname_531  +
mov [ebx+18h] esi +
pop esi  +
pop ebx  +
retn   +
***
mov ebx edx +
mov esi eax +
cmp bl [esi+1Ch] +
jz loc_49F120  +
test bl bl +
jz loc_49F11D  +
mov eax esi +
mov edx [eax] +
call dword ptr [edx+90h]  +
mov [esi+1Ch] bl +
pop esi  +
pop ebx  +
retn   +
***
test dl dl +
mov edx [eax] +
call dword ptr [edx+80h]  +
retn   +
***
mov ecx [ebx+ecx*8] +
mov edx offset sub_49F13C +
mov ecx [eax] +
call dword ptr [ecx+94h]  +
retn   +
***
mov esi edx +
mov ebx eax +
cmp byte ptr [ebx+1Ch] 0 +
jnz loc_49F194  +
cmp dword ptr [ebx+14h] 1 +
jle loc_49F194  +
mov eax ebx +
mov edx [eax] +
call dword ptr [edx+84h]  +
push esi  +
mov ecx [ebx+14h] +
dec ecx  +
xor edx edx +
mov eax ebx +
call unknown_libname_422  +
mov eax ebx +
mov edx [eax] +
call dword ptr [edx+80h]  +
pop esi  +
pop ebx  +
retn   +
***
cmp byte ptr [eax+1Eh] 0 +
jz loc_49F1A8  +
mov eax edx +
mov edx ecx +
call unknown_libname_461  +
retn   +
mov eax edx +
mov edx ecx +
call unknown_libname_462  +
retn   +
***
add esp 0FFFFFFF8h +
push 0  +
push 0  +
mov dl 1 +
mov ecx [eax] +
call dword ptr [ecx+14h]  +
mov [esp+10h+var_10] eax +
mov [esp+10h+var_C] edx +
mov eax [esp+10h+var_10] +
mov edx [esp+10h+var_C] +
pop ecx  +
pop edx  +
retn   +
***
push [ebp+arg_4]  +
mov ebx eax +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
mov edx [eax] +
call dword ptr [edx+4]  +
pop ebp  +
retn 8  +
***
mov ecx eax +
cmp [ebp+arg_4] 0FFFFFFFFh +
jnz loc_49F262  +
cmp [ebp+arg_0] 80000000h +
jb loc_49F277  +
jmp loc_49F264  +
jl loc_49F277  +
cmp [ebp+arg_4] 0 +
jnz loc_49F275  +
cmp [ebp+arg_0] 7FFFFFFFh +
jbe loc_49F28E  +
jmp loc_49F277  +
jle loc_49F28E  +
mov ecx off_4EA8FC +
mov dl 1 +
mov eax ds:off_4A7DAC +
call @Sysutils@Exception@$bctr$qqrp20System@TResStringRec  +
call @System@@RaiseExcept$qqrv  +
mov eax [ebp+arg_0] +
mov edx eax +
mov eax ecx +
mov ecx [eax] +
call dword ptr [ecx]  +
pop ebp  +
retn 8  +
***
add esp 0FFFFFEF8h +
lea edx [ebp+var_108] +
mov eax [ebp+arg_0] +
mov eax [eax-4] +
mov eax [eax] +
call @System@TObject@ClassName$qqrp17System@TMetaClass  +
lea eax [ebp+var_108] +
mov [ebp+var_8] eax +
mov [ebp+var_4] 4 +
lea eax [ebp+var_8] +
push eax  +
push 0  +
mov ecx off_4EA8A4 +
mov dl 1 +
mov eax ds:off_49A0E0 +
call sub_4AC274  +
call @System@@RaiseExcept$qqrv  +
mov esp ebp +
pop ebp  +
retn   +
***
add esp 0FFFFFFE0h +
push ebx  +
push esi  +
mov [ebp+var_1A] cx +
mov esi edx +
mov [ebp+var_4] eax +
lea ebx [ebp+var_20] +
mov eax [ebp+var_4] +
mov [ebp+var_C] eax +
mov eax [eax] +
mov eax [eax+14h] +
mov [ebp+var_10] eax +
mov eax [ebp+var_4] +
call @System@TObject@ClassType$qqrv  +
mov [ebx] eax +
jmp loc_49F323  +
mov eax [ebx] +
call @System@TObject@ClassParent$qqrp17System@TMetaClass  +
mov [ebx] eax +
cmp dword ptr [ebx] 0 +
jz loc_49F332  +
mov eax [ebx] +
cmp eax ds:off_49ACDC +
jnz loc_49F31A  +
cmp dword ptr [ebx] 0 +
jnz loc_49F33E  +
push ebp  +
call @Classes@_16905  +
pop ecx  +
mov [ebp+var_14] ebx +
mov eax [ebx] +
mov eax [eax+14h] +
mov [ebp+var_18] eax +
mov eax [ebp+var_10] +
cmp eax [ebp+var_18] +
jnz loc_49F358  +
push ebp  +
call @Classes@_16905  +
pop ecx  +
mov eax esi +
cdq   +
push edx  +
push eax  +
mov dl byte ptr [ebp+var_1A] +
mov eax [ebp+var_4] +
mov ecx [eax] +
call dword ptr [ecx+14h]  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
add esp 0FFFFFFF8h +
push ebx  +
push esi  +
mov ebx edx +
mov esi eax +
cmp [ebp+arg_4] 0FFFFFFFFh +
jnz loc_49F38D  +
cmp [ebp+arg_0] 80000000h +
jb loc_49F3A2  +
jmp loc_49F38F  +
jl loc_49F3A2  +
cmp [ebp+arg_4] 0 +
jnz loc_49F3A0  +
cmp [ebp+arg_0] 7FFFFFFFh +
jbe loc_49F3B9  +
jmp loc_49F3A2  +
jle loc_49F3B9  +
mov ecx off_4EA8FC +
mov dl 1 +
mov eax ds:off_4A7DAC +
call @Sysutils@Exception@$bctr$qqrp20System@TResStringRec  +
call @System@@RaiseExcept$qqrv  +
mov eax [ebp+arg_0] +
mov edx eax +
xor ecx ecx +
mov cl bl +
mov eax esi +
mov ebx [eax] +
call dword ptr [ebx+10h]  +
cdq   +
mov [ebp+var_8] eax +
mov [ebp+var_4] edx +
mov eax [ebp+var_8] +
mov edx [ebp+var_4] +
pop esi  +
pop ebx  +
pop ecx  +
pop ecx  +
pop ebp  +
retn 8  +
***
push edi  +
mov ebx ecx +
mov edi edx +
mov esi eax +
test ebx ebx +
jz loc_49F413  +
mov edx edi +
mov ecx ebx +
mov eax esi +
mov esi [eax] +
call dword ptr [esi+8]  +
cmp ebx eax +
jz loc_49F413  +
mov ecx off_4EA890 +
mov dl 1 +
mov eax ds:off_49A248 +
call @Sysutils@Exception@$bctr$qqrp20System@TResStringRec  +
call @System@@RaiseExcept$qqrv  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
mov ebx ecx +
mov edi edx +
mov esi eax +
test ebx ebx +
jz loc_49F44B  +
mov edx edi +
mov ecx ebx +
mov eax esi +
mov esi [eax] +
call dword ptr [esi+0Ch]  +
cmp ebx eax +
jz loc_49F44B  +
mov ecx off_4EA8B4 +
mov dl 1 +
mov eax ds:off_49A2A0 +
call @Sysutils@Exception@$bctr$qqrp20System@TResStringRec  +
call @System@@RaiseExcept$qqrv  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
add esp 0FFFFFFE8h +
push ebx  +
push esi  +
push edi  +
mov edi edx +
mov [ebp+var_4] eax +
cmp [ebp+arg_4] 0 +
jnz loc_49F482  +
cmp [ebp+arg_0] 0 +
jnz loc_49F482  +
push 0  +
push 0  +
mov eax edi +
call sub_49F1D4  +
mov eax edi +
call sub_49F1E8  +
mov [ebp+arg_0] eax +
mov [ebp+arg_4] edx +
mov eax [ebp+arg_0] +
mov [ebp+var_10] eax +
mov eax [ebp+arg_4] +
mov [ebp+var_C] eax +
cmp [ebp+arg_4] 0 +
jnz loc_49F49F  +
cmp [ebp+arg_0] 0F000h +
jbe loc_49F4AA  +
jmp loc_49F4A1  +
jle loc_49F4AA  +
mov [ebp+var_14] 0F000h +
jmp loc_49F4B0  +
mov eax [ebp+arg_0] +
mov [ebp+var_14] eax +
mov eax [ebp+var_14] +
call sub_4B97C0  +
mov [ebp+var_18] eax +
xor eax eax +
push ebp  +
push offset loc_49F52D  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
jmp loc_49F508  +
mov eax [ebp+var_14] +
cdq   +
cmp edx [ebp+arg_4] +
jnz loc_49F4DB  +
cmp eax [ebp+arg_0] +
jnb loc_49F4E2  +
jmp loc_49F4DD  +
jge loc_49F4E2  +
mov ebx [ebp+var_14] +
jmp loc_49F4E5  +
mov ebx [ebp+arg_0] +
mov esi [ebp+var_18] +
mov edx esi +
mov ecx ebx +
mov eax edi +
call @Classes@TStream@WriteBuffer$qqrpxvi  +
mov edx esi +
mov ecx ebx +
mov eax [ebp+var_4] +
call sub_49F418  +
mov eax ebx +
cdq   +
sub [ebp+arg_0] eax +
sbb [ebp+arg_4] edx +
cmp [ebp+arg_4] 0 +
jnz loc_49F4CB  +
cmp [ebp+arg_0] 0 +
jnz loc_49F4CB  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_49F534  +
mov edx [ebp+var_14] +
mov eax [ebp+var_18] +
call sub_4B97E0  +
retn   +
jmp unknown_libname_539  +
jmp loc_49F521  +
mov eax [ebp+var_10] +
mov edx [ebp+var_C] +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 8  +
***
add esp 0FFFFFFF8h +
push ebx  +
mov ebx edx +
push 1000h  +
mov ecx eax +
mov dl 1 +
mov eax ds:off_49B200 +
call sub_49FBA4  +
mov [ebp+var_8] eax +
xor eax eax +
push ebp  +
push offset loc_49F594  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov edx ebx +
mov eax [ebp+var_8] +
call @Classes@TReader@ReadRootComponent$qqrp18Classes@TComponent  +
mov [ebp+var_4] eax +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_49F59B  +
mov eax [ebp+var_8] +
call @System@TObject@Free$qqrv  +
retn   +
jmp unknown_libname_539  +
jmp loc_49F58B  +
mov eax [ebp+var_4] +
pop ebx  +
pop ecx  +
pop ecx  +
pop ebp  +
retn   +
***
mov ebx [eax] +
call dword ptr [ebx+18h]  +
pop ebx  +
retn   +
***
push ecx  +
push edi  +
mov eax [eax+4] +
mov eax [eax+4] +
add esp 0FFFFFFF8h +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
and edx 7Fh +
mov eax [eax+4] +
call unknown_libname_464  +
mov [ebp+var_8] eax +
mov [ebp+var_4] edx +
mov eax [ebp+var_8] +
mov edx [ebp+var_4] +
pop ecx  +
pop ecx  +
pop ebp  +
retn 8  +
***
mov ecx eax +
mov eax ebx +
cdq   +
push edx  +
push eax  +
mov eax ecx +
mov edx [eax] +
call dword ptr [edx+4]  +
pop ebx  +
retn   +
***
push ebx  +
push ebx  +
push esi  +
test dl dl +
jz loc_49F6E1  +
add esp 0FFFFFFF0h +
call unknown_libname_535  +
mov ebx edx +
mov esi eax +
mov ax [ebp+arg_0] +
push eax  +
push 0  +
xor edx edx +
mov eax esi +
call sub_49F714  +
mov eax esi +
test bl bl +
jz loc_49F70A  +
call sub_4BABC8  +
pop large dword ptr fs:0  +
add esp 0Ch +
mov eax esi +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
add esp 0FFFFFFF4h +
call unknown_libname_536  +
mov ebx edx +
mov esi eax +
mov eax [esi+4] +
test eax eax +
jl loc_49F7F3  +
call sub_4A8FE0  +
mov edx ebx +
and dl 0FCh +
mov eax esi +
call sub_4BA7FC  +
test bl bl +
jle loc_49F80A  +
mov eax esi +
call @System@@ClassDestroy$qqrp14System@TObject  +
pop esi  +
pop ebx  +
retn   +
***
mov [eax+4] edx +
mov [eax+8] ecx +
retn   +
***
push edi  +
sub cx 1 +
jb loc_49F85F  +
jz loc_49F864  +
dec cx  +
jz loc_49F869  +
jmp loc_49F86F  +
mov [eax+0Ch] edx +
jmp loc_49F86F  +
add [eax+0Ch] edx +
jmp loc_49F86F  +
add edx [eax+8] +
mov [eax+0Ch] edx +
mov eax [eax+0Ch] +
retn   +
***
call unknown_libname_536  +
xor edx edx +
push edi  +
mov edi edx +
mov esi eax +
push 0  +
push 0  +
mov eax edi +
call sub_49F1D4  +
mov eax edi +
call sub_49F1E8  +
mov ebx eax +
mov edx ebx +
mov eax esi +
mov ecx [eax] +
call dword ptr [ecx]  +
test ebx ebx +
jz loc_49F8EB  +
mov edx [esi+4] +
mov ecx ebx +
mov eax edi +
call @Classes@TStream@WriteBuffer$qqrpxvi  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov [esp+4+var_4] edx +
mov ebx eax +
mov edx esp +
mov eax ebx +
mov ecx [eax] +
call dword ptr [ecx+1Ch]  +
mov edx eax +
mov ecx [ebx+8] +
mov eax ebx +
call @TCustomMemoryStream@SetPointer$qqrpvi  +
mov eax [esp+4+var_4] +
mov [ebx+10h] eax +
pop edx  +
pop ebx  +
retn   +
***
push edi  +
mov esi edx +
mov ebx eax +
mov edi [ebx+0Ch] +
mov edx esi +
mov eax ebx +
call sub_49F8F0  +
mov [ebx+8] esi +
cmp esi edi +
jge loc_49F93F  +
mov cx 2 +
xor edx edx +
mov eax ebx +
mov ebx [eax] +
call dword ptr [ebx+10h]  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
cmp dword ptr [edx] 0 +
jle loc_49F963  +
mov ecx [edx] +
cmp ecx [eax+8] +
jz loc_49F963  +
mov ecx [edx] +
add ecx 1FFFh +
and ecx 0FFFFE000h +
mov [edx] ecx +
mov esi [eax+4] +
mov ecx esi +
mov edi [edx] +
mov ebx [eax+10h] +
cmp edi ebx +
jz loc_49F9C7  +
cmp dword ptr [edx] 0 +
jnz loc_49F981  +
mov eax esi +
call sub_497888  +
xor ecx ecx +
jmp loc_49F9C7  +
test ebx ebx +
jnz loc_49F998  +
mov eax off_4EAA40 +
movzx eax word ptr [eax] +
mov edx [edx] +
call sub_49785C  +
mov ecx eax +
jmp loc_49F9AC  +
mov ecx off_4EAA40 +
movzx ecx word ptr [ecx] +
mov edx [edx] +
mov eax esi +
call @GlobalReAllocPtr$qqrpvii  +
mov ecx eax +
test ecx ecx +
jnz loc_49F9C7  +
mov ecx off_4EA888 +
mov dl 1 +
mov eax ds:off_49A0E0 +
call @Sysutils@Exception@$bctr$qqrp20System@TResStringRec  +
call @System@@RaiseExcept$qqrv  +
mov eax ecx +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
push ebx  +
push esi  +
push edi  +
test dl dl +
jz loc_49FA32  +
add esp 0FFFFFFF0h +
call unknown_libname_535  +
mov esi ecx +
mov ebx edx +
mov edi eax +
xor edx edx +
mov eax edi +
call @System@TObject@$bctr$qqrv  +
mov eax [ebp+lpType] +
push eax  +
mov eax [ebp+arg_4] +
call unknown_libname_550  +
mov ecx eax +
mov edx esi +
mov eax edi +
call unknown_libname_423  +
mov eax edi +
test bl bl +
jz loc_49FA6D  +
call sub_4BABC8  +
pop large dword ptr fs:0  +
add esp 0Ch +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
add esp 0FFFFFFF4h +
xor eax eax +
mov [ebp+var_C] eax +
xor eax eax +
push ebp  +
push offset loc_49FADB  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov eax [ebp+arg_0] +
mov eax [eax-4] +
mov [ebp+var_8] eax +
mov [ebp+var_4] 6 +
lea eax [ebp+var_8] +
push eax  +
push 0  +
lea edx [ebp+var_C] +
mov eax off_4EA8A0 +
call @System@LoadResString$qqrp20System@TResStringRec  +
mov ecx [ebp+var_C] +
mov dl 1 +
mov eax ds:off_49A354 +
call sub_4AC1B8  +
call @System@@RaiseExcept$qqrv  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_49FAE2  +
lea eax [ebp+var_C] +
call unknown_libname_540  +
retn   +
jmp unknown_libname_539  +
jmp loc_49FAD2  +
mov esp ebp +
pop ebp  +
retn   +
***
push ecx  +
call unknown_libname_536  +
mov ebx edx +
mov esi eax +
mov eax [esi+14h] +
call sub_497858  +
mov eax [esi+14h] +
push eax  +
call FreeResource  +
mov edx ebx +
and dl 0FCh +
mov eax esi +
call sub_4BA7FC  +
test bl bl +
jle loc_49FB87  +
mov eax esi +
call @System@@ClassDestroy$qqrp14System@TObject  +
pop esi  +
pop ebx  +
retn   +
***
mov ecx off_4EA840 +
push ebx  +
push esi  +
push edi  +
test dl dl +
jz loc_49FBB6  +
add esp 0FFFFFFF0h +
call unknown_libname_535  +
mov ebx edx +
mov edi eax +
mov esi [ebp+arg_0] +
mov [edi+4] ecx +
mov eax esi +
call sub_4B97C0  +
mov [edi+8] eax +
mov [edi+0Ch] esi +
mov eax edi +
test bl bl +
jz loc_49FBE2  +
call sub_4BABC8  +
pop large dword ptr fs:0  +
add esp 0Ch +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
call unknown_libname_536  +
retn   +
***
push ebx  +
push esi  +
test dl dl +
jz loc_49FD01  +
add esp 0FFFFFFF0h +
call unknown_libname_535  +
mov ebx edx +
mov esi eax +
mov [esi+4] ecx +
mov eax [ebp+arg_C] +
mov [esi+8] eax +
mov eax [ebp+arg_8] +
mov [esi+0Ch] eax +
lea eax [esi+10h] +
mov edx [ebp+arg_4] +
call unknown_libname_542  +
lea eax [esi+14h] +
mov edx [ebp+arg_0] +
call unknown_libname_542  +
mov eax esi +
test bl bl +
jz loc_49FD3F  +
call sub_4BABC8  +
pop large dword ptr fs:0  +
add esp 0Ch +
mov eax esi +
pop esi  +
pop ebx  +
pop ebp  +
retn 10h  +
***
push edi  +
push ebp  +
mov edi eax +
xor eax eax +
mov esi [edi+14h] +
mov ebx esi +
jmp loc_49FD58  +
inc ebx  +
mov dl [ebx] +
test dl dl +
jz loc_49FD63  +
sub dl 2Eh +
jnz loc_49FD57  +
cmp byte ptr [ebx] 0 +
jz loc_49FD8A  +
mov ebp ebx +
sub ebp esi +
mov ecx ebp +
lea eax [edi+10h] +
mov edx esi +
call @@LStrFromPCharLen$qqrr10AnsiStringpci  +
mov ecx ebp +
inc ecx  +
lea eax [edi+14h] +
mov edx 1 +
call @System@@LStrDelete$qqrv  +
mov al 1 +
pop ebp  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov ecx edx +
mov edx [eax+4] +
mov eax [eax+0Ch] +
xchg eax edx +
call @Typinfo@SetOrdProp$qqrp14System@TObjectp17Typinfo@TPropInfoi  +
retn   +
***
push 0  +
push ebx  +
push esi  +
mov esi edx +
mov ebx eax +
xor eax eax +
push ebp  +
push offset loc_49FE17  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
lea eax [ebp+var_4] +
call unknown_libname_560  +
test esi esi +
jz loc_49FDF3  +
mov eax [ebx+0Ch] +
mov eax [eax] +
mov eax [eax] +
call unknown_libname_445  +
add eax 5 +
push eax  +
lea eax [ebp+var_4] +
call unknown_libname_560  +
mov ecx eax +
mov eax esi +
pop edx  +
call sub_4ADB28  +
test al al +
jnz loc_49FDF3  +
lea eax [ebp+var_4] +
call unknown_libname_560  +
mov ecx [ebp+var_4] +
mov edx [ebx+0Ch] +
mov eax [ebx+4] +
call sub_4A6B48  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_49FE1E  +
lea eax [ebp+var_4] +
call unknown_libname_560  +
retn   +
jmp unknown_libname_539  +
jmp loc_49FE0E  +
pop esi  +
pop ebx  +
pop ecx  +
pop ebp  +
retn   +
***
add esp 0FFFFFFF8h +
push ebx  +
push esi  +
push edi  +
xor ecx ecx +
mov [ebp+var_8] ecx +
mov ebx edx +
mov esi eax +
xor eax eax +
push ebp  +
push offset loc_49FECA  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
xor eax eax +
mov [ebp+var_4] eax +
test ebx ebx +
jz loc_49FEB4  +
mov edi esi +
jmp loc_49FEAC  +
mov eax ebx +
jmp loc_49FE56  +
inc ebx  +
mov dl [ebx] +
test dl dl +
jz loc_49FE64  +
add dl 0D3h +
sub dl 2 +
jnb loc_49FE55  +
mov ecx ebx +
sub ecx eax +
lea edx [ebp+var_8] +
xchg eax edx +
call @@LStrFromPCharLen$qqrr10AnsiStringpci  +
mov edx [ebp+var_8] +
mov eax edi +
call sub_4A5028  +
mov esi eax +
test esi esi +
jnz loc_49FE94  +
mov edx offset _str_Owner.Text +
mov eax [ebp+var_8] +
call unknown_libname_459  +
test al al +
jz loc_49FE94  +
mov esi edi +
test esi esi +
jz loc_49FEB4  +
cmp byte ptr [ebx] 2Eh +
jnz loc_49FE9E  +
inc ebx  +
cmp byte ptr [ebx] 2Dh +
jnz loc_49FEA4  +
inc ebx  +
cmp byte ptr [ebx] 3Eh +
jnz loc_49FEAA  +
inc ebx  +
mov edi esi +
cmp byte ptr [ebx] 0 +
jnz loc_49FE51  +
mov [ebp+var_4] edi +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_49FED1  +
lea eax [ebp+var_8] +
call unknown_libname_540  +
retn   +
jmp unknown_libname_539  +
jmp loc_49FEC1  +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
pop ecx  +
pop ecx  +
pop ebp  +
retn   +
***
push ebx  +
push ebx  +
mov ebx eax +
mov eax [ebp+arg_0] +
mov eax [eax-4] +
mov edx ebx +
call unknown_libname_419  +
cmp eax 0FFFFFFFFh +
jz loc_49FF48  +
mov edx [ebp+arg_0] +
mov edx [edx-4] +
xchg eax edx +
call @Classes@TList@Delete$qqri  +
mov eax [ebp+arg_0] +
mov eax [eax-8] +
mov edx ebx +
call unknown_libname_419  +
test eax eax +
jge loc_49FF66  +
mov eax [ebp+arg_0] +
mov eax [eax-8] +
mov edx ebx +
call @Classes@TList@Add$qqrpv  +
pop ebx  +
pop ebp  +
retn   +
***
add esp 0FFFFFFF4h +
push ebx  +
push esi  +
push edi  +
mov eax dword_4F19B0 +
call sub_4AD944  +
xor edx edx +
push ebp  +
push offset loc_4A0105  +
push dword ptr fs:[edx]  +
mov fs:[edx] esp +
mov eax dword_4F19C8 +
call @Mxarrays@TThreadCustomArray@LockArray$qqrv  +
mov edi eax +
xor edx edx +
push ebp  +
push offset loc_4A00E6  +
push dword ptr fs:[edx]  +
mov fs:[edx] esp +
cmp dword ptr [edi+8] 0 +
jle loc_4A00CE  +
mov dl 1 +
mov eax ds:off_49A5D8 +
call @System@TObject@$bctr$qqrv  +
mov [ebp+var_4] eax +
xor edx edx +
push ebp  +
push offset loc_4A00C7  +
push dword ptr fs:[edx]  +
mov fs:[edx] esp +
mov dl 1 +
mov eax ds:off_49A5D8 +
call @System@TObject@$bctr$qqrv  +
mov [ebp+var_8] eax +
xor edx edx +
push ebp  +
push offset loc_4A0075  +
push dword ptr fs:[edx]  +
mov fs:[edx] esp +
xor esi esi +
jmp loc_4A005A  +
mov edx esi +
mov eax edi +
call @Classes@TList@Get$qqri  +
mov ebx eax +
mov eax [ebx+10h] +
call sub_49C700  +
mov [ebp+var_C] eax +
cmp [ebp+var_C] 0 +
jnz loc_4A001A  +
mov edx [ebx+0Ch] +
mov eax [ebx+4] +
call @Typinfo@GetOrdProp$qqrp14System@TObjectp17Typinfo@TPropInfo  +
test eax eax +
jz loc_4A004F  +
cmp [ebp+var_C] 0 +
jz loc_4A0033  +
mov edx [ebx+14h] +
mov eax [ebp+var_C] +
call @Classes@FindNestedComponent$qqrp18Classes@TComponentx17System@AnsiString  +
mov edx eax +
mov eax ebx +
mov ecx [eax] +
call dword ptr [ecx]  +
push ebp  +
mov eax [ebx+4] +
call sub_49FEEC  +
pop ecx  +
mov edx esi +
mov eax edi +
call @Classes@TList@Delete$qqri  +
mov eax ebx +
call @System@TObject@Free$qqrv  +
jmp loc_4A005A  +
push ebp  +
mov eax [ebx+4] +
call unknown_libname_424  +
pop ecx  +
inc esi  +
cmp esi [edi+8] +
jl loc_49FFEF  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4A007C  +
mov eax [ebp+var_8] +
call @System@TObject@Free$qqrv  +
retn   +
jmp unknown_libname_539  +
jmp loc_4A006C  +
mov eax [ebp-4] +
mov ebx [eax+8] +
dec ebx  +
test ebx ebx +
jl loc_4A00B1  +
inc ebx  +
xor esi esi +
mov edx esi +
mov eax [ebp-4] +
call @Classes@TList@Get$qqri  +
mov edi eax +
mov eax edi +
mov edx ds:off_49B454 +
call @System@@IsClass$qqrp14System@TObjectp17System@TMetaClass  +
test al al +
jz loc_4A00AD  +
and word ptr [edi+1Ch] 0FF7Fh +
inc esi  +
dec ebx  +
jnz loc_4A008A  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4A00CE  +
mov eax [ebp+var_4] +
call @System@TObject@Free$qqrv  +
retn   +
jmp unknown_libname_539  +
jmp loc_4A00BE  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4A00ED  +
mov eax dword_4F19C8 +
call sub_49D170  +
retn   +
jmp unknown_libname_539  +
jmp loc_4A00DB  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4A010C  +
mov eax dword_4F19B0 +
call sub_4AD9E0  +
retn   +
jmp unknown_libname_539  +
jmp loc_4A00FA  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
add esp 0FFFFFFF8h +
push ebx  +
push esi  +
push edi  +
mov [ebp+var_8] edx +
mov [ebp+var_4] eax +
cmp dword_4F19C8 0 +
jz loc_4A01B6  +
mov eax dword_4F19C8 +
call @Mxarrays@TThreadCustomArray@LockArray$qqrv  +
mov edi eax +
xor eax eax +
push ebp  +
push offset loc_4A01AF  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov ebx [edi+8] +
dec ebx  +
cmp ebx 0 +
jl loc_4A0197  +
mov edx ebx +
mov eax edi +
call @Classes@TList@Get$qqri  +
mov esi eax +
cmp [ebp+var_4] 0 +
jz loc_4A016C  +
mov eax [esi+8] +
cmp eax [ebp+var_4] +
jnz loc_4A0191  +
cmp [ebp+var_8] 0 +
jz loc_4A0181  +
mov edx [esi+10h] +
mov eax [ebp+var_8] +
call unknown_libname_459  +
test al al +
jz loc_4A0191  +
mov edx ebx +
mov eax edi +
call @Classes@TList@Delete$qqri  +
mov eax esi +
call @System@TObject@Free$qqrv  +
dec ebx  +
cmp ebx 0FFFFFFFFh +
jnz loc_4A0153  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4A01B6  +
mov eax dword_4F19C8 +
call sub_49D170  +
retn   +
jmp unknown_libname_539  +
jmp loc_4A01A4  +
pop edi  +
pop esi  +
pop ebx  +
pop ecx  +
pop ecx  +
pop ebp  +
retn   +
***
push ecx  +
mov ecx ebx +
mov eax off_4EA874 +
call sub_4A0244  +
retn   +
***
mov ebx eax +
push edi  +
call unknown_libname_536  +
mov ebx edx +
mov esi eax +
mov edx [esi+10h] +
sub edx [esi+14h] +
mov eax [esi+4] +
mov cx 1 +
mov edi [eax] +
call dword ptr [edi+10h]  +
mov edx ebx +
and dl 0FCh +
mov eax esi +
call sub_49FBEC  +
test bl bl +
jle loc_4A02C9  +
mov eax esi +
call @System@@ClassDestroy$qqrp14System@TObject  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov ebx edx +
mov esi eax +
mov eax esi +
call unknown_libname_427  +
cmp bl al +
jz loc_4A02F0  +
dec dword ptr [esi+10h]  +
mov eax esi +
call sub_4A2120  +
call sub_4A025C  +
pop esi  +
pop ebx  +
retn   +
***
push ebx  +
add esp 0FFFFFFF4h +
push ebx  +
mov ebx edx +
mov [ebp+var_4] eax +
mov eax [ebp+var_4] +
mov edx [eax+70h] +
mov eax ebx +
call unknown_libname_459  +
test al al +
jz loc_4A03FA  +
cmp [ebp+arg_A] 0 +
jz loc_4A03FA  +
mov eax [ebp+var_4] +
call unknown_libname_427  +
cmp al 0Ah +
jz loc_4A037A  +
mov eax [ebp+var_4] +
dec dword ptr [eax+10h]  +
mov eax [ebp+var_4] +
call sub_4A2120  +
mov eax [ebp+var_4] +
mov byte ptr [eax+78h] 1 +
call sub_4A025C  +
mov dl 1 +
mov eax ds:off_49AEB4 +
call @System@TObject@$bctr$qqrv  +
mov [ebp+var_8] eax +
xor eax eax +
push ebp  +
push offset loc_4A03E8  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
lea edx [ebp+var_C] +
mov ecx 4 +
mov eax [ebp+var_4] +
call @TReader@Read$qqrpvi  +
mov edx [ebp+var_C] +
mov eax [ebp+var_8] +
mov ecx [eax] +
call dword ptr [ecx]  +
mov eax [ebp+var_8] +
mov edx [eax+4] +
mov ecx [ebp+var_C] +
mov eax [ebp+var_4] +
call @TReader@Read$qqrpvi  +
mov eax [ebp+var_4] +
mov byte ptr [eax+78h] 1 +
mov edx [ebp+var_8] +
mov eax [ebp+arg_C] +
call dword ptr [ebp+10h]  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4A03EF  +
mov eax [ebp+var_8] +
call @System@TObject@Free$qqrv  +
retn   +
jmp unknown_libname_539  +
jmp loc_4A03DF  +
mov eax [ebp-4] +
add eax 70h +
call unknown_libname_540  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 10h  +
***
mov eax ebx +
mov [esp+1+var_1] 0 +
push edi  +
add esp 0FFFFFEF8h +
mov esi ecx +
mov edi edx +
mov ebx eax +
lea eax [esp+108h+var_100] +
mov edx esi +
mov ecx 0FFh +
call @System@@LStrToString$qqrv  +
lea edx [esp+108h+var_100] +
mov eax [edi] +
call @System@TObject@MethodAddress$qqrp17System@TMetaClassrx28System@_SmallString$iuc$255_  +
mov [esp+108h+var_108] eax +
cmp [esp+108h+var_108] 0 +
setz byte ptr [esp+108h+var_104]  +
cmp word ptr [ebx+3Ah] 0 +
jz loc_4A0485  +
push esp  +
lea eax [esp+10Ch+var_104] +
push eax  +
mov ecx esi +
mov edx ebx +
mov eax [ebx+3Ch] +
call dword ptr [ebx+38h]  +
cmp byte ptr [esp+108h+var_104] 0 +
jz loc_4A0491  +
call sub_4A025C  +
mov eax [esp+108h+var_108] +
add esp 108h +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push ebx  +
add esp 0FFFFFFF4h +
push ebx  +
push esi  +
push edi  +
xor edx edx +
mov [ebp+var_8] edx +
mov [ebp+var_4] eax +
xor eax eax +
push ebp  +
push offset loc_4A062B  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov eax [ebp+var_4] +
mov eax [eax+30h] +
test eax eax +
jz loc_4A0615  +
xor edx edx +
push ebp  +
push offset loc_4A060E  +
push dword ptr fs:[edx]  +
mov fs:[edx] esp +
mov eax [eax+8] +
dec eax  +
test eax eax +
jl loc_4A05F8  +
inc eax  +
mov [ebp+var_C] eax +
xor esi esi +
mov eax [ebp+var_4] +
mov eax [eax+30h] +
mov edx esi +
call @Classes@TList@Get$qqri  +
mov ebx eax +
lea eax [ebp+var_8] +
mov edx [ebx+14h] +
call unknown_libname_543  +
lea edx [ebp+var_8] +
mov eax [ebp+var_4] +
mov ecx [eax] +
call dword ptr [ecx+20h]  +
mov eax [ebx+8] +
mov edx [ebp+var_8] +
call @Classes@FindNestedComponent$qqrp18Classes@TComponentx17System@AnsiString  +
mov edi eax +
mov eax [ebp+var_4] +
mov eax [eax+30h] +
mov edx esi +
call @Classes@TList@Get$qqri  +
call @Classes@_16821  +
test edi edi +
jnz loc_4A05E6  +
mov eax ebx +
call @Classes@_16797  +
test al al +
jz loc_4A05E6  +
mov eax [ebp+var_4] +
mov eax [eax+30h] +
mov edx esi +
call @Classes@TList@Get$qqri  +
mov edx eax +
mov eax dword_4F19C8 +
call @Classes@TThreadList@Add$qqrpv  +
mov eax [ebp+var_4] +
mov eax [eax+30h] +
xor ecx ecx +
mov edx esi +
call sub_49CE90  +
jmp loc_4A05EE  +
mov edx edi +
mov eax ebx +
mov ecx [eax] +
call dword ptr [ecx]  +
inc esi  +
dec [ebp+var_C]  +
jnz loc_4A0569  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4A0615  +
mov eax [ebp+var_4] +
call @Classes@TReader@FreeFixups$qqrv  +
retn   +
jmp unknown_libname_539  +
jmp loc_4A0605  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4A0632  +
lea eax [ebp+var_8] +
call unknown_libname_540  +
retn   +
jmp unknown_libname_539  +
jmp loc_4A0622  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
mov eax ebx +
call @Classes@TReader@GetPosition$qqrv  +
cdq   +
push edx  +
push eax  +
mov eax [ebx+4] +
call sub_49F1D4  +
xor eax eax +
mov [ebx+10h] eax +
xor eax eax +
mov [ebx+14h] eax +
pop ebx  +
retn   +
***
push edi  +
mov ebx eax +
mov eax [ebx+30h] +
test eax eax +
jz loc_4A0697  +
mov esi [eax+8] +
dec esi  +
test esi esi +
jl loc_4A068A  +
inc esi  +
xor edi edi +
mov edx edi +
mov eax [ebx+30h] +
call @Classes@TList@Get$qqri  +
call @System@TObject@Free$qqrv  +
inc edi  +
dec esi  +
jnz loc_4A0677  +
mov eax [ebx+30h] +
call @System@TObject@Free$qqrv  +
xor eax eax +
mov [ebx+30h] eax +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
mov eax [ebx+4] +
call sub_49F1B4  +
mov edx [ebx+14h] +
sub edx [ebx+10h] +
sub eax edx +
pop ebx  +
retn   +
***
mov eax ebx +
call unknown_libname_427  +
dec dword ptr [ebx+10h]  +
pop ebx  +
retn   +
***
call sub_4A2120  +
mov eax ebx +
call @Registry@_16392  +
pop ebx  +
retn   +
***
push ebx  +
mov edi edx +
mov ebx ecx +
mov esi eax +
jmp loc_4A07AD  +
mov ecx [esi+14h] +
sub ecx [esi+10h] +
ja loc_4A0789  +
mov eax esi +
call sub_4A07B8  +
mov ecx [esi+14h] +
cmp ecx ebx +
jb loc_4A078F  +
mov ecx ebx +
push esi  +
sub ebx ecx +
mov eax [esi+8] +
add eax [esi+10h] +
add [esi+10h] ecx +
mov esi eax +
mov edx ecx +
shr ecx 2 +
cld   +
movs   +
mov ecx edx +
and ecx 3 +
movs   +
pop esi  +
or ebx ebx +
jnz loc_4A0777  +
pop ebx  +
pop edi  +
pop esi  +
retn   +
***
mov ebx eax +
mov edx [ebx+8] +
mov ecx [ebx+0Ch] +
mov eax [ebx+4] +
mov esi [eax] +
call dword ptr [esi+8]  +
mov esi eax +
mov [ebx+14h] esi +
test esi esi +
jnz loc_4A07EA  +
mov ecx off_4EA890 +
mov dl 1 +
mov eax ds:off_49A248 +
call @Sysutils@Exception@$bctr$qqrp20System@TResStringRec  +
call @System@@RaiseExcept$qqrv  +
xor eax eax +
mov [ebx+10h] eax +
pop esi  +
pop ebx  +
retn   +
***
mov eax ebx +
call unknown_libname_427  +
cmp al 9 +
setz al  +
pop ebx  +
retn   +
***
push 0  +
push ecx  +
mov eax [ebp+arg_0] +
test byte ptr [eax-1] 1 +
jnz loc_4A0921  +
mov eax [ebp+arg_0] +
cmp dword ptr [eax-8] 0 +
jz loc_4A0925  +
xor eax eax +
pop ebp  +
retn   +
mov al 1 +
pop ebp  +
retn   +
***
push ebx  +
push esi  +
mov esi eax +
xor ebx ebx +
call @System@ExceptObject$qqrv  +
mov edx ds:off_4A7A78 +
call @System@@IsClass$qqrp14System@TObjectp17System@TMetaClass  +
test al al +
jz loc_4A0984  +
mov eax [ebp+arg_0] +
push eax  +
call unknown_libname_426  +
pop ecx  +
test al al +
jz loc_4A095E  +
mov eax [esi] +
call @System@TObject@Free$qqrv  +
xor eax eax +
mov [esi] eax +
mov eax [ebp+arg_0] +
mov eax [eax-0Ch] +
xor edx edx +
call sub_4A2304  +
call @System@ExceptObject$qqrv  +
mov edx [eax+4] +
mov eax [ebp+arg_0] +
mov eax [eax-0Ch] +
mov ecx [eax] +
call dword ptr [ecx+10h]  +
mov ebx eax +
mov eax ebx +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
push ebx  +
push esi  +
push edi  +
xor eax eax +
push ebp  +
push offset loc_4A0A72  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov eax [ebp+arg_0] +
mov edx [eax-14h] +
mov eax [ebp+arg_0] +
mov eax [eax-0Ch] +
call sub_4A24A4  +
mov ebx eax +
mov eax [ebp+arg_0] +
xor edx edx +
mov [eax-10h] edx +
mov eax [ebp+arg_0] +
mov eax [eax-0Ch] +
cmp word ptr [eax+6Ah] 0 +
jz loc_4A09E3  +
mov eax [ebp+arg_0] +
add eax 0FFFFFFF0h +
push eax  +
mov eax [ebp+arg_0] +
mov esi [eax-0Ch] +
mov eax [ebp+arg_0] +
mov edx [eax-0Ch] +
mov ecx ebx +
mov eax [esi+6Ch] +
call dword ptr [esi+68h]  +
mov eax [ebp+arg_0] +
cmp dword ptr [eax-10h] 0 +
jnz loc_4A0A5D  +
mov eax ebx +
call dword ptr [eax-0Ch]  +
mov edx [ebp+arg_0] +
mov [edx-10h] eax +
mov eax [ebp+arg_0] +
test byte ptr [eax-1] 4 +
jz loc_4A0A17  +
mov eax [ebp+arg_0] +
mov eax [eax-10h] +
or word ptr [eax+1Ch] 1 +
mov eax [ebp+arg_0] +
mov eax [eax-10h] +
or word ptr [eax+1Ch] 200h +
xor eax eax +
push ebp  +
push offset loc_4A0A46  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov eax [ebp+arg_0] +
mov eax [eax-0Ch] +
mov ecx [eax+28h] +
mov eax [ebp+arg_0] +
mov eax [eax-10h] +
or edx 0FFFFFFFFh +
mov ebx [eax] +
call dword ptr [ebx+2Ch]  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
jmp loc_4A0A5D  +
jmp @System@@HandleAnyException$qqrv  +
mov eax [ebp+8] +
xor edx edx +
mov [eax-10h] edx +
call @System@@RaiseAgain$qqrv  +
call @@DoneExcept$qqrv  +
mov eax [ebp+arg_0] +
mov eax [eax-10h] +
or word ptr [eax+1Ch] 1 +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
jmp loc_4A0A95  +
jmp @System@@HandleAnyException$qqrv  +
mov eax [ebp+8] +
push eax  +
mov eax [ebp+8] +
add eax 0FFFFFFF0h +
call @Classes@_16835  +
pop ecx  +
test al al +
jnz loc_4A0A90  +
call @System@@RaiseAgain$qqrv  +
call @@DoneExcept$qqrv  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
push ebx  +
push ebx  +
push esi  +
push edi  +
xor eax eax +
push ebp  +
push offset loc_4A0BB7  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov eax [ebp+arg_0] +
mov edx [eax-14h] +
mov eax [ebp+arg_0] +
mov eax [eax-0Ch] +
call sub_4A24A4  +
mov ecx eax +
mov eax [ebp+arg_0] +
mov edx [eax-18h] +
mov eax [ebp+arg_0] +
mov eax [eax-0Ch] +
mov ebx [eax] +
call dword ptr [ebx+14h]  +
mov edx [ebp+arg_0] +
mov [edx-10h] eax +
mov eax [ebp+arg_0] +
mov eax [eax-10h] +
mov si 0FFF2h +
call @System@@CallDynaInst$qqrv  +
mov ebx eax +
mov eax [ebp+arg_0] +
mov eax [eax-0Ch] +
mov [eax+2Ch] ebx +
mov eax [ebp+arg_0] +
test ebx ebx +
jnz loc_4A0BAD  +
mov eax [ebp+arg_0] +
mov eax [eax-0Ch] +
mov eax [eax+18h] +
mov edx [ebp+arg_0] +
mov edx [edx-0Ch] +
mov [edx+2Ch] eax +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
jmp loc_4A0BDA  +
jmp @System@@HandleAnyException$qqrv  +
mov eax [ebp+8] +
push eax  +
mov eax [ebp+8] +
add eax 0FFFFFFF0h +
call @Classes@_16835  +
pop ecx  +
test al al +
jnz loc_4A0BD5  +
call @System@@RaiseAgain$qqrv  +
call @@DoneExcept$qqrv  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
add esp 0FFFFFFDCh +
push ebx  +
push esi  +
push edi  +
xor ecx ecx +
mov [ebp+var_14] ecx +
mov [ebp+var_18] ecx +
mov [ebp+var_8] edx +
mov [ebp+var_C] eax +
xor eax eax +
push ebp  +
push offset loc_4A0DA5  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
lea ecx [ebp+var_1C] +
lea edx [ebp-1] +
mov eax [ebp+var_C] +
mov ebx [eax] +
call dword ptr [ebx+24h]  +
lea edx [ebp+var_14] +
mov eax [ebp+var_C] +
call @TReader@ReadStr$qqrv  +
lea edx [ebp+var_18] +
mov eax [ebp+var_C] +
call @TReader@ReadStr$qqrv  +
mov eax [ebp+var_C] +
mov eax [eax+2Ch] +
mov [ebp+var_20] eax +
mov eax [ebp+var_C] +
mov eax [eax+1Ch] +
mov [ebp+var_24] eax +
xor eax eax +
push ebp  +
push offset loc_4A0D83  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov eax [ebp+var_8] +
mov [ebp+var_10] eax +
cmp [ebp+var_10] 0 +
jnz loc_4A0C6B  +
test [ebp+var_1] 1 +
jz loc_4A0C64  +
push ebp  +
call @Classes@_16838  +
pop ecx  +
jmp loc_4A0C6B  +
push ebp  +
call @Classes@_16836  +
pop ecx  +
cmp [ebp+var_10] 0 +
jz loc_4A0D63  +
xor eax eax +
push ebp  +
push offset loc_4A0D41  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov eax [ebp+var_10] +
or word ptr [eax+1Ch] 1 +
test [ebp+var_1] 1 +
jnz loc_4A0C98  +
push ebp  +
call sub_4A0A9C  +
pop ecx  +
cmp [ebp+var_10] 0 +
jnz loc_4A0CB0  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
call @System@@TryFinallyExit$qqrv  +
jmp loc_4A0D8A  +
mov eax [ebp+var_10] +
test byte ptr [eax+1Dh] 2 +
jz loc_4A0CC2  +
mov eax [ebp+var_C] +
mov edx [ebp+var_10] +
mov [eax+1Ch] edx +
mov eax [ebp+var_10] +
or word ptr [eax+1Ch] 2 +
mov edx [ebp+var_C] +
mov eax [ebp+var_10] +
mov ecx [eax] +
call dword ptr [ecx+14h]  +
mov eax [ebp+var_10] +
and word ptr [eax+1Ch] 0FFFDh +
test [ebp+var_1] 2 +
jz loc_4A0CF8  +
mov eax [ebp+var_C] +
mov eax [eax+2Ch] +
mov ecx [ebp+var_1C] +
mov edx [ebp+var_10] +
mov si 0FFF9h +
call @System@@CallDynaInst$qqrv  +
test [ebp+var_1] 1 +
jnz loc_4A0D07  +
mov eax [ebp+var_10] +
test byte ptr [eax+1Dh] 2 +
jz loc_4A0D29  +
mov eax [ebp+var_C] +
mov eax [eax+34h] +
mov edx [ebp+var_10] +
call unknown_libname_419  +
test eax eax +
jge loc_4A0D37  +
mov eax [ebp+var_C] +
mov eax [eax+34h] +
mov edx [ebp+var_10] +
call @Classes@TList@Add$qqrpv  +
jmp loc_4A0D37  +
mov eax [ebp+var_C] +
mov eax [eax+34h] +
mov edx [ebp+var_10] +
call @Classes@TList@Add$qqrpv  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
jmp loc_4A0D63  +
jmp @System@@HandleAnyException$qqrv  +
push ebp  +
call unknown_libname_426  +
pop ecx  +
test al al +
jz loc_4A0D59  +
mov eax [ebp-10h] +
call @System@TObject@Free$qqrv  +
call @System@@RaiseAgain$qqrv  +
call @@DoneExcept$qqrv  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4A0D8A  +
mov eax [ebp+var_C] +
mov edx [ebp+var_20] +
mov [eax+2Ch] edx +
mov eax [ebp+var_C] +
mov edx [ebp+var_24] +
mov [eax+1Ch] edx +
retn   +
jmp unknown_libname_539  +
jmp loc_4A0D70  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4A0DAC  +
lea eax [ebp+var_18] +
mov edx 2 +
call unknown_libname_541  +
retn   +
jmp unknown_libname_539  +
jmp loc_4A0D97  +
mov eax [ebp+var_10] +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
push ecx  +
add esp 0FFFFFFF4h +
mov ebx eax +
mov eax ebx +
call unknown_libname_427  +
cmp al 5 +
jnz loc_4A0F19  +
mov edx esp +
mov ecx 0Ah +
mov eax ebx +
call @TReader@Read$qqrpvi  +
jmp loc_4A0F2F  +
dec dword ptr [ebx+10h]  +
mov eax ebx +
call @Classes@TReader@ReadInteger$qqrv  +
mov [esp+10h+var_4] eax +
fild  [esp+10h+var_4] +
fstp  [esp+10h+var_10] +
wait   +
fld  [esp+10h+var_10] +
add esp 10h +
pop ebx  +
retn   +
***
mov ebx eax +
mov eax ebx +
call unknown_libname_427  +
cmp al 0Fh +
jnz loc_4A0F59  +
mov edx esp +
mov ecx 4 +
mov eax ebx +
call @TReader@Read$qqrpvi  +
jmp loc_4A0F6F  +
dec dword ptr [ebx+10h]  +
mov eax ebx +
call @Classes@TReader@ReadInteger$qqrv  +
mov [esp+8+var_4] eax +
fild  [esp+8+var_4] +
fstp  [esp+8+var_8] +
wait   +
fld  [esp+8+var_8] +
pop ecx  +
pop edx  +
pop ebx  +
retn   +
***
mov ebx eax +
mov eax ebx +
call unknown_libname_427  +
cmp al 10h +
jnz loc_4A0F99  +
mov edx esp +
mov ecx 8 +
mov eax ebx +
call @TReader@Read$qqrpvi  +
jmp loc_4A0FB5  +
dec dword ptr [ebx+10h]  +
mov eax ebx +
call @Classes@TReader@ReadInteger$qqrv  +
mov [esp+0Ch+var_4] eax +
fild  [esp+0Ch+var_4] +
fmul  ds:flt_4A0FC0 +
fistp  [esp+0Ch+var_C] +
wait   +
fild  [esp+0Ch+var_C] +
add esp 0Ch +
pop ebx  +
retn   +
***
mov ebx eax +
mov eax ebx +
call unknown_libname_427  +
cmp al 11h +
jnz loc_4A0FE5  +
mov edx esp +
mov ecx 8 +
mov eax ebx +
call @TReader@Read$qqrpvi  +
jmp loc_4A0FFB  +
dec dword ptr [ebx+10h]  +
mov eax ebx +
call @Classes@TReader@ReadInteger$qqrv  +
mov [esp+0Ch+var_4] eax +
fild  [esp+0Ch+var_4] +
fstp  [esp+0Ch+var_C] +
wait   +
fld  [esp+0Ch+var_C] +
add esp 0Ch +
pop ebx  +
retn   +
***
push ecx  +
mov esi edx +
mov ebx eax +
mov eax ebx +
call unknown_libname_427  +
and eax 7Fh +
cmp eax 0Dh +
ja loc_4A10BC  +
mov al ds:byte_4A102B[eax] +
jmp ds:off_4A1039[eax*4]  +
mov edx esp +
mov ecx 1 +
mov eax ebx +
call @TReader@Read$qqrpvi  +
xor ecx ecx +
mov cl [esp+1+var_1] +
mov eax esi +
xor edx edx +
call @@LStrFromPCharLen$qqrr10AnsiStringpci  +
mov eax esi +
call j_@System@_16809_0  +
mov edx eax +
xor ecx ecx +
mov cl [esp+1+var_1] +
mov eax ebx +
call @TReader@Read$qqrpvi  +
jmp loc_4A10C1  +
mov eax esi +
mov edx offset _str_False.Text +
call unknown_libname_542  +
jmp loc_4A10C1  +
mov eax esi +
mov edx offset _str_True.Text +
call unknown_libname_542  +
jmp loc_4A10C1  +
mov eax esi +
mov edx offset _str_nil_0.Text +
call unknown_libname_542  +
jmp loc_4A10C1  +
mov eax esi +
mov edx offset _str_Null.Text +
call unknown_libname_542  +
jmp loc_4A10C1  +
call sub_4A025C  +
pop edx  +
pop esi  +
pop ebx  +
retn   +
***
mov ebx eax +
mov eax ebx +
call unknown_libname_427  +
sub al 2 +
jz loc_4A111F  +
dec al  +
jz loc_4A1139  +
dec al  +
jz loc_4A1153  +
jmp loc_4A1163  +
lea edx [esp+8+var_4] +
mov ecx 1 +
mov eax ebx +
call @TReader@Read$qqrpvi  +
movsx eax byte ptr [esp+8+var_4] +
mov [esp+8+var_8] eax +
jmp loc_4A1168  +
lea edx [esp+8+var_4+2] +
mov ecx 2 +
mov eax ebx +
call @TReader@Read$qqrpvi  +
movsx eax word ptr [esp+8+var_4+2] +
mov [esp+8+var_8] eax +
jmp loc_4A1168  +
mov edx esp +
mov ecx 4 +
mov eax ebx +
call @TReader@Read$qqrpvi  +
jmp loc_4A1168  +
call sub_4A025C  +
mov eax [esp+8+var_8] +
pop ecx  +
pop edx  +
pop ebx  +
retn   +
***
mov ebx eax +
mov eax ebx +
call @Classes@TReader@NextValue$qqrv  +
cmp al 13h +
jnz loc_4A1198  +
mov eax ebx +
call unknown_libname_427  +
mov edx esp +
mov ecx 8 +
mov eax ebx +
call @TReader@Read$qqrpvi  +
jmp loc_4A11A7  +
mov eax ebx +
call @Classes@TReader@ReadInteger$qqrv  +
cdq   +
mov [esp+8+var_8] eax +
mov [esp+8+var_4] edx +
mov eax [esp+8+var_8] +
mov edx [esp+8+var_4] +
pop ecx  +
pop edx  +
pop ebx  +
retn   +
***
mov dl 1 +
xor edx edx +
push edi  +
mov edi ecx +
mov esi edx +
mov ebx eax +
mov al ds:byte_4A1200 +
mov [esi] al +
mov eax ebx +
call @Classes@TReader@NextValue$qqrv  +
and al 0F0h +
cmp al 0F0h +
jnz loc_4A11FA  +
mov eax ebx +
call unknown_libname_427  +
and al 0Fh +
mov [esi] al +
test byte ptr [esi] 2 +
jz loc_4A11FA  +
mov eax ebx +
call @Classes@TReader@ReadInteger$qqrv  +
mov [edi] eax +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
add esp 0FFFFFEDCh +
push ebx  +
xor edx edx +
mov [ebp+var_4] edx +
mov ebx eax +
xor eax eax +
push ebp  +
push offset loc_4A12F5  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
lea eax [ebp+var_4] +
call unknown_libname_540  +
mov eax [ebp+arg_0] +
mov eax [eax-4] +
mov edx ds:off_49B454 +
call @System@@IsClass$qqrp14System@TObjectp17System@TMetaClass  +
test al al +
jz loc_4A1251  +
lea eax [ebp+var_4] +
mov edx [ebp+arg_0] +
mov edx [edx-4] +
mov edx [edx+8] +
call unknown_libname_543  +
cmp [ebp+var_4] 0 +
jnz loc_4A1278  +
lea edx [ebp+var_104] +
mov eax [ebp+arg_0] +
mov eax [eax-4] +
mov eax [eax] +
call @System@TObject@ClassName$qqrp17System@TMetaClass  +
lea edx [ebp+var_104] +
lea eax [ebp+var_4] +
call unknown_libname_547  +
mov eax [ebp+var_4] +
mov [ebp+var_124] eax +
mov [ebp+var_120] 0Bh +
mov eax off_4EA830 +
mov eax [eax] +
mov [ebp+var_11C] eax +
mov [ebp+var_118] 0Bh +
mov eax [ebp+arg_0] +
mov eax [eax-8] +
mov [ebp+var_114] eax +
mov [ebp+var_110] 0Bh +
mov eax [ebx+4] +
mov [ebp+var_10C] eax +
mov [ebp+var_108] 0Bh +
lea eax [ebp+var_124] +
push eax  +
push 3  +
mov ecx off_4EA88C +
mov dl 1 +
mov eax ds:off_49A248 +
call sub_4AC274  +
call @System@@RaiseExcept$qqrv  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4A12FC  +
lea eax [ebp+var_4] +
call unknown_libname_540  +
retn   +
jmp unknown_libname_539  +
jmp loc_4A12EC  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
mov eax [ebp+arg_0] +
mov eax [eax-0Ch] +
call sub_4A2120  +
mov eax off_4EA870 +
call sub_4A0244  +
pop ebp  +
retn   +
***
add esp 0FFFFFFECh +
push ebx  +
push esi  +
push edi  +
xor ecx ecx +
mov [ebp+var_8] ecx +
mov [ebp+var_4] edx +
mov [ebp+var_C] eax +
xor eax eax +
push ebp  +
push offset loc_4A14F0  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
xor edx edx +
push ebp  +
push offset loc_4A14A5  +
push dword ptr fs:[edx]  +
mov fs:[edx] esp +
lea edx [ebp+var_8] +
mov eax [ebp+var_C] +
call @TReader@ReadStr$qqrv  +
xor edx edx +
push ebp  +
push offset loc_4A147E  +
push dword ptr fs:[edx]  +
mov fs:[edx] esp +
mov ebx 1 +
mov eax [ebp+var_8] +
call sub_4BB610  +
mov esi eax +
mov eax [ebp+var_4] +
mov [ebp+var_10] eax +
mov eax [ebp+var_C] +
mov byte ptr [eax+78h] 1 +
mov edi ebx +
jmp loc_4A138A  +
inc ebx  +
cmp esi ebx +
jl loc_4A1398  +
mov eax [ebp+var_8] +
cmp byte ptr [eax+ebx-1] 2Eh +
jnz loc_4A1389  +
mov eax [ebp+var_C] +
add eax 70h +
push eax  +
mov ecx ebx +
sub ecx edi +
mov edx edi +
mov eax [ebp+var_8] +
call @System@@LStrCopy$qqrv  +
cmp esi ebx +
jl loc_4A141A  +
mov eax [ebp+var_10] +
mov eax [eax] +
call @System@TObject@ClassInfo$qqrp17System@TMetaClass  +
mov edx [ebp+var_C] +
mov edx [edx+70h] +
call @Typinfo@GetPropInfo$qqrp17Typinfo@TTypeInfox17System@AnsiString  +
mov edi eax +
test edi edi +
jnz loc_4A13DA  +
mov eax [ebp+var_C] +
mov edx [eax+70h] +
mov eax [ebp+var_C] +
call sub_4A0758  +
xor eax eax +
mov [ebp+var_14] eax +
mov eax [edi] +
mov eax [eax] +
cmp byte ptr [eax] 7 +
jnz loc_4A13F5  +
mov edx edi +
mov eax [ebp+var_10] +
call @Typinfo@GetOrdProp$qqrp14System@TObjectp17Typinfo@TPropInfo  +
mov [ebp+var_14] eax +
mov eax [ebp+var_14] +
mov edx ds:off_49A6E8 +
call @System@@IsClass$qqrp14System@TObjectp17System@TMetaClass  +
test al al +
jnz loc_4A140E  +
push ebp  +
call sub_4A1304  +
pop ecx  +
mov eax [ebp+var_14] +
mov [ebp+var_10] eax +
inc ebx  +
jmp loc_4A1385  +
mov eax [ebp+var_10] +
mov eax [eax] +
call @System@TObject@ClassInfo$qqrp17System@TMetaClass  +
mov edx [ebp+var_C] +
mov edx [edx+70h] +
call @Typinfo@GetPropInfo$qqrp17Typinfo@TTypeInfox17System@AnsiString  +
mov edi eax +
test edi edi +
jz loc_4A1444  +
mov ecx edi +
mov edx [ebp+var_10] +
mov eax [ebp+var_C] +
call @Teengine@TChartSeries@GetMarkText$qqri  +
jmp loc_4A1474  +
mov eax [ebp+var_C] +
mov byte ptr [eax+78h] 0 +
mov edx [ebp+var_C] +
mov eax [ebp+var_10] +
mov ecx [eax] +
call dword ptr [ecx+4]  +
mov eax [ebp+var_C] +
mov byte ptr [eax+78h] 1 +
mov eax [ebp+var_C] +
cmp dword ptr [eax+70h] 0 +
jz loc_4A1474  +
mov eax [ebp+var_C] +
mov edx [eax+70h] +
mov eax [ebp+var_C] +
call sub_4A0758  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
jmp loc_4A149B  +
jmp @System@@HandleOnException$qqrv  +
push ebp  +
call @Classes@_16852  +
pop ecx  +
call @@DoneExcept$qqrv  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
jmp loc_4A14DA  +
jmp @System@@HandleOnException$qqrv  +
mov ebx eax +
mov eax [ebp-0Ch] +
cmp byte ptr [eax+78h] 0 +
jz loc_4A14D0  +
mov edx [ebx+4] +
mov eax [ebp-0Ch] +
mov ecx [eax] +
call dword ptr [ecx+10h]  +
test al al +
jnz loc_4A14D5  +
call @System@@RaiseAgain$qqrv  +
call @@DoneExcept$qqrv  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4A14F7  +
lea eax [ebp+var_8] +
call unknown_libname_540  +
retn   +
jmp unknown_libname_539  +
jmp loc_4A14E7  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
add esp 0FFFFFFF8h +
push ebx  +
push esi  +
push edi  +
mov edi ecx +
mov esi edx +
mov [ebp+var_4] eax +
mov eax [esi] +
mov eax [eax] +
call sub_49C5A8  +
mov ebx eax +
test ebx ebx +
jz loc_4A1539  +
lea edx [ebp+var_8] +
mov eax edi +
call ebx  +
test al al +
jz loc_4A1539  +
mov ecx [ebp+var_8] +
mov edx esi +
mov eax [ebp+var_4] +
call @Typinfo@SetOrdProp$qqrp14System@TObjectp17Typinfo@TPropInfoi  +
jmp loc_4A153E  +
call sub_4A025C  +
pop edi  +
pop esi  +
pop ebx  +
pop ecx  +
pop ecx  +
pop ebp  +
retn   +
***
push ebx  +
push esi  +
push edi  +
mov edi ecx +
mov esi edx +
mov ebx eax +
mov eax [ebp+arg_0] +
mov eax [eax-4] +
mov eax [eax+18h] +
push eax  +
push esi  +
push 0  +
push edi  +
mov ecx ebx +
mov dl 1 +
mov eax ds:off_49FC18 +
call @Classes@_16796  +
mov edx eax +
mov eax [ebp+arg_0] +
mov eax [eax-4] +
mov eax [eax+30h] +
call @Classes@TList@Add$qqrpv  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
xor ecx ecx +
push ecx  +
push ecx  +
push ecx  +
push ecx  +
xor eax eax +
push ebp  +
push offset loc_4A15D7  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
lea edx [ebp+var_10] +
mov eax [ebp+arg_0] +
mov eax [eax-4] +
call sub_4A2720  +
lea ecx [ebp+var_10] +
mov eax [ebp+arg_0] +
mov edx [eax-0Ch] +
mov eax [ebp+arg_0] +
mov eax [eax-8] +
call @TypInfo@_16487_0  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4A15DE  +
lea eax [ebp+var_10] +
call sub_4BC290  +
retn   +
jmp unknown_libname_539  +
jmp loc_4A15CE  +
mov esp ebp +
pop ebp  +
retn   +
***
push 0  +
push 0  +
xor eax eax +
push ebp  +
push offset loc_4A1696  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov eax [ebp+arg_0] +
mov eax [eax-4] +
call @Classes@TReader@NextValue$qqrv  +
cmp al 0Dh +
jnz loc_4A1631  +
mov eax [ebp+arg_0] +
mov eax [eax-4] +
call unknown_libname_427  +
lea eax [ebp+var_4] +
call unknown_libname_560  +
mov eax [ebp+arg_0] +
mov edx [eax-0Ch] +
mov eax [ebp+arg_0] +
mov eax [eax-8] +
mov ecx [ebp+var_4] +
call sub_4A6B48  +
jmp loc_4A1678  +
mov eax [ebp+arg_0] +
mov eax [eax-4] +
mov eax [eax+18h] +
push eax  +
mov eax [ebp+arg_0] +
mov eax [eax-0Ch] +
push eax  +
push 0  +
lea edx [ebp+var_8] +
mov eax [ebp+arg_0] +
mov eax [eax-4] +
call @Classes@TReader@ReadIdent$qqrv  +
mov eax [ebp+var_8] +
push eax  +
mov eax [ebp+arg_0] +
mov ecx [eax-8] +
mov dl 1 +
mov eax ds:off_49FC90 +
call @Classes@_16796  +
mov edx eax +
mov eax [ebp+arg_0] +
mov eax [eax-4] +
mov eax [eax+30h] +
call @Classes@TList@Add$qqrpv  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4A169D  +
lea eax [ebp+var_8] +
call unknown_libname_540  +
lea eax [ebp+var_4] +
call unknown_libname_560  +
retn   +
jmp unknown_libname_539  +
jmp loc_4A1685  +
pop ecx  +
pop ecx  +
pop ebp  +
retn   +
***
push ecx  +
mov ecx 5 +
push 0  +
push 0  +
dec ecx  +
jnz loc_4A16AD  +
xchg ecx [ebp+var_4] +
push ebx  +
mov [ebp+var_C] ecx +
mov [ebp+var_8] edx +
mov [ebp+var_4] eax +
xor eax eax +
push ebp  +
push offset loc_4A199F  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov eax [ebp+var_C] +
cmp dword ptr [eax+8] 0 +
jnz loc_4A1719  +
mov eax [ebp+var_C] +
mov eax [eax] +
mov eax [eax] +
cmp byte ptr [eax] 7 +
jnz loc_4A170F  +
mov edx [ebp+var_C] +
mov eax [ebp+var_8] +
call @Typinfo@GetOrdProp$qqrp14System@TObjectp17Typinfo@TPropInfo  +
mov edx ds:off_49B454 +
call @System@@IsClass$qqrp14System@TObjectp17System@TMetaClass  +
test al al +
jz loc_4A170F  +
mov edx [ebp+var_C] +
mov eax [ebp+var_8] +
call @Typinfo@GetOrdProp$qqrp14System@TObjectp17Typinfo@TPropInfo  +
test byte ptr [eax+24h] 4 +
jnz loc_4A1719  +
mov eax off_4EA894 +
call sub_4A0244  +
mov eax [ebp+var_C] +
mov eax [eax] +
mov ebx [eax] +
xor eax eax +
mov al [ebx] +
cmp eax 10h +
ja loc_4A196F  +
jmp ds:off_4A1734[eax*4]  +
mov eax [ebp+var_4] +
call @Classes@TReader@NextValue$qqrv  +
cmp al 7 +
jnz loc_4A17A2  +
lea edx [ebp+var_18] +
mov eax [ebp+var_4] +
call @Classes@TReader@ReadIdent$qqrv  +
mov ecx [ebp+var_18] +
mov edx [ebp+var_C] +
mov eax [ebp+var_8] +
call @Classes@_16856  +
jmp loc_4A196F  +
mov eax [ebp+var_4] +
call @Classes@TReader@ReadInteger$qqrv  +
mov ecx eax +
mov edx [ebp+var_C] +
mov eax [ebp+var_8] +
call @Typinfo@SetOrdProp$qqrp14System@TObjectp17Typinfo@TPropInfoi  +
jmp loc_4A196F  +
mov eax [ebp+var_4] +
call sub_4A0808  +
xor ecx ecx +
mov cl al +
mov edx [ebp+var_C] +
mov eax [ebp+var_8] +
call @Typinfo@SetOrdProp$qqrp14System@TObjectp17Typinfo@TPropInfoi  +
jmp loc_4A196F  +
lea edx [ebp+var_1C] +
mov eax [ebp+var_4] +
call @Classes@TReader@ReadIdent$qqrv  +
mov edx [ebp+var_1C] +
mov eax ebx +
call sub_4A5FC0  +
mov ecx eax +
mov edx [ebp+var_C] +
mov eax [ebp+var_8] +
call @Typinfo@SetOrdProp$qqrp14System@TObjectp17Typinfo@TPropInfoi  +
jmp loc_4A196F  +
mov eax [ebp+var_4] +
call @Classes@TReader@ReadFloat$qqrv  +
add esp 0FFFFFFF4h +
fstp  [esp+28h+var_28] +
wait   +
mov edx [ebp+var_C] +
mov eax [ebp+var_8] +
call sub_4A6760  +
jmp loc_4A196F  +
lea edx [ebp+var_28+8] +
mov eax [ebp+var_4] +
call sub_4A1E70  +
mov ecx dword ptr [ebp+var_28+8] +
mov edx [ebp+var_C] +
mov eax [ebp+var_8] +
call @Typinfo@SetStrProp$qqrp14System@TObjectp17Typinfo@TPropInfox17System@AnsiString  +
jmp loc_4A196F  +
lea edx [ebp+var_28+4] +
mov eax [ebp+var_4] +
call sub_4A1F2C  +
mov ecx dword ptr [ebp+var_28+4] +
mov edx [ebp+var_C] +
mov eax [ebp+var_8] +
call sub_4A6574  +
jmp loc_4A196F  +
mov edx ebx +
mov eax [ebp+var_4] +
call sub_4A1D54  +
mov ecx eax +
mov edx [ebp+var_C] +
mov eax [ebp+var_8] +
call @Typinfo@SetOrdProp$qqrp14System@TObjectp17Typinfo@TPropInfoi  +
jmp loc_4A196F  +
mov eax [ebp+var_4] +
call @Classes@TReader@NextValue$qqrv  +
sub al 0Dh +
jz loc_4A1888  +
dec al  +
jz loc_4A18A2  +
jmp loc_4A18C4  +
mov eax [ebp+var_4] +
call unknown_libname_427  +
xor ecx ecx +
mov edx [ebp+var_C] +
mov eax [ebp+var_8] +
call @Typinfo@SetOrdProp$qqrp14System@TObjectp17Typinfo@TPropInfoi  +
jmp loc_4A196F  +
mov eax [ebp+var_4] +
call unknown_libname_427  +
mov edx [ebp+var_C] +
mov eax [ebp+var_8] +
call @Typinfo@GetOrdProp$qqrp14System@TObjectp17Typinfo@TPropInfo  +
mov edx eax +
mov eax [ebp+var_4] +
call sub_4A0860  +
jmp loc_4A196F  +
push ebp  +
lea edx [ebp+var_28] +
mov eax [ebp+var_4] +
call @Classes@TReader@ReadIdent$qqrv  +
mov ecx dword ptr [ebp+var_28] +
mov edx [ebp+var_C] +
mov eax [ebp+var_8] +
call @Classes@_16857  +
pop ecx  +
jmp loc_4A196F  +
mov eax [ebp+var_4] +
call @Classes@TReader@NextValue$qqrv  +
cmp al 0Dh +
jnz loc_4A190A  +
mov eax [ebp+var_4] +
call unknown_libname_427  +
mov ecx offset unk_4E6A04 +
mov edx [ebp+var_C] +
mov eax [ebp+var_8] +
call unknown_libname_446  +
jmp loc_4A196F  +
lea edx [ebp+var_2C] +
mov eax [ebp+var_4] +
call @Classes@TReader@ReadIdent$qqrv  +
mov ecx [ebp+var_2C] +
mov eax [ebp+var_4] +
mov edx [eax+18h] +
mov eax [ebp+var_4] +
mov ebx [eax] +
call dword ptr [ebx+18h]  +
mov [ebp+var_14] eax +
mov eax [ebp+var_4] +
mov eax [eax+18h] +
mov [ebp+var_10] eax +
cmp [ebp+var_14] 0 +
jz loc_4A196F  +
lea ecx [ebp+var_14] +
mov edx [ebp+var_C] +
mov eax [ebp+var_8] +
call unknown_libname_446  +
jmp loc_4A196F  +
push ebp  +
call @Classes@_17035  +
pop ecx  +
jmp loc_4A196F  +
mov eax [ebp+var_4] +
call @Classes@TReader@ReadInt64$qqrv  +
push edx  +
push eax  +
mov edx [ebp+var_C] +
mov eax [ebp+var_8] +
call unknown_libname_447  +
jmp loc_4A196F  +
push ebp  +
call @Classes@_17036  +
pop ecx  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4A19A6  +
lea eax [ebp+var_2C] +
mov edx 2 +
call unknown_libname_541  +
lea eax [ebp+var_28+4] +
call unknown_libname_552  +
lea eax [ebp+var_28+8] +
mov edx 3 +
call unknown_libname_541  +
retn   +
jmp unknown_libname_539  +
jmp loc_4A197C  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
add esp 0FFFFFFF0h +
push ebx  +
push esi  +
push edi  +
mov ebx edx +
mov edi eax +
xor esi esi +
mov eax ebx +
mov edx edi +
call unknown_libname_542  +
jmp loc_4A19E8  +
inc esi  +
push ebx  +
mov [ebp+var_10] edi +
mov [ebp+var_C] 0Bh +
mov [ebp+var_8] esi +
mov [ebp+var_4] 0 +
lea edx [ebp+var_10] +
mov ecx 1 +
mov eax offset _str__s__d.Text +
call @Sysutils@Format$qqrx17System@AnsiStringpx14System@TVarRecxi  +
mov eax [ebx] +
call sub_49C740  +
test al al +
jz loc_4A19C6  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
add esp 0FFFFFFD0h +
push ebx  +
push esi  +
push edi  +
xor ecx ecx +
mov [ebp+var_2C] ecx +
mov [ebp+var_30] ecx +
mov [ebp+var_28] ecx +
mov [ebp+var_24] ecx +
mov [ebp+var_20] ecx +
mov [ebp+var_1C] ecx +
mov [ebp+var_8] edx +
mov [ebp+var_4] eax +
xor eax eax +
push ebp  +
push offset loc_4A1D40  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov eax [ebp+var_4] +
call @Classes@TReader@ReadSignature$qqrv  +
xor eax eax +
mov [ebp+var_C] eax +
mov eax dword_4F19B0 +
call sub_4AD944  +
xor edx edx +
push ebp  +
push offset loc_4A1D1E  +
push dword ptr fs:[edx]  +
mov fs:[edx] esp +
xor edx edx +
push ebp  +
push offset j_@System@@HandleAnyException$qqrv  +
push dword ptr fs:[edx]  +
mov fs:[edx] esp +
lea ecx [ebp+var_10] +
lea edx [ebp-11h] +
mov eax [ebp+var_4] +
mov ebx [eax] +
call dword ptr [ebx+24h]  +
cmp [ebp+var_8] 0 +
jnz loc_4A1AB9  +
lea edx [ebp+var_1C] +
mov eax [ebp+var_4] +
call @TReader@ReadStr$qqrv  +
mov eax [ebp+var_1C] +
call @Classes@FindClass$qqrx17System@AnsiString  +
xor ecx ecx +
mov dl 1 +
call dword ptr [eax+2Ch]  +
mov [ebp+var_C] eax +
lea edx [ebp+var_20] +
mov eax [ebp+var_4] +
call @TReader@ReadStr$qqrv  +
mov edx [ebp+var_20] +
mov eax [ebp+var_C] +
mov ecx [eax] +
call dword ptr [ecx+18h]  +
jmp loc_4A1B11  +
mov eax [ebp+var_8] +
mov [ebp+var_C] eax +
lea edx [ebp+var_24] +
mov eax [ebp+var_4] +
call @TReader@ReadStr$qqrv  +
mov eax [ebp+var_C] +
test byte ptr [eax+1Ch] 10h +
jz loc_4A1AE0  +
lea edx [ebp+var_28] +
mov eax [ebp+var_4] +
call @TReader@ReadStr$qqrv  +
jmp loc_4A1B11  +
mov eax [ebp+var_C] +
or word ptr [eax+1Ch] 1 +
mov eax [ebp+var_C] +
or word ptr [eax+1Ch] 2 +
lea edx [ebp+var_30] +
mov eax [ebp+var_4] +
call @TReader@ReadStr$qqrv  +
mov eax [ebp+var_30] +
lea edx [ebp+var_2C] +
call sub_4A19AC  +
mov edx [ebp+var_2C] +
mov eax [ebp+var_C] +
mov ecx [eax] +
call dword ptr [ecx+18h]  +
mov eax [ebp+var_4] +
mov edx [ebp+var_C] +
mov [eax+18h] edx +
push 1  +
mov eax [ebp+var_C] +
call @System@TObject@ClassType$qqrv  +
mov ecx eax +
mov dl 1 +
mov eax ds:off_49B140 +
call @Controls@TDockTree@$bctr$qqrp20Controls@TWinControl_0  +
mov edx [ebp+var_4] +
mov [edx+74h] eax +
xor eax eax +
push ebp  +
push offset loc_4A1C6B  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov eax [ebp+var_4] +
mov edx [ebp+var_C] +
mov [eax+1Ch] edx +
call @Sysinit@@GetTls$qqrv  +
mov eax [eax+0] +
mov [ebp+var_18] eax +
cmp [ebp+var_18] 0 +
jz loc_4A1B6E  +
mov eax [ebp+var_4] +
mov edx [ebp+var_18] +
mov [eax+34h] edx +
jmp loc_4A1B80  +
mov dl 1 +
mov eax ds:off_49A5D8 +
call @System@TObject@$bctr$qqrv  +
mov edx [ebp+var_4] +
mov [edx+34h] eax +
xor eax eax +
push ebp  +
push offset loc_4A1C4B  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov eax [ebp+var_4] +
mov edx [eax+18h] +
mov eax [ebp+var_4] +
mov eax [eax+34h] +
call unknown_libname_419  +
test eax eax +
jge loc_4A1BB4  +
mov eax [ebp+var_4] +
mov edx [eax+18h] +
mov eax [ebp+var_4] +
mov eax [eax+34h] +
call @Classes@TList@Add$qqrpv  +
mov eax [ebp+var_4] +
mov eax [eax+18h] +
mov edx [ebp+var_4] +
mov [edx+28h] eax +
mov eax [ebp+var_4] +
mov eax [eax+18h] +
or word ptr [eax+1Ch] 1 +
mov eax [ebp+var_4] +
mov eax [eax+18h] +
or word ptr [eax+1Ch] 2 +
mov eax [ebp+var_4] +
mov eax [eax+18h] +
mov edx [ebp+var_4] +
mov ecx [eax] +
call dword ptr [ecx+14h]  +
mov eax [ebp+var_4] +
mov eax [eax+18h] +
and word ptr [eax+1Ch] 0FFFDh +
cmp [ebp+var_18] 0 +
jnz loc_4A1C24  +
mov eax [ebp+var_4] +
mov eax [eax+34h] +
mov ebx [eax+8] +
dec ebx  +
test ebx ebx +
jl loc_4A1C24  +
inc ebx  +
mov [ebp+var_10] 0 +
mov eax [ebp+var_4] +
mov eax [eax+34h] +
mov edx [ebp+var_10] +
call @Classes@TList@Get$qqri  +
mov edx [eax] +
call dword ptr [edx+0Ch]  +
inc [ebp+var_10]  +
dec ebx  +
jnz loc_4A1C0B  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4A1C52  +
cmp [ebp+var_18] 0 +
jnz loc_4A1C42  +
mov eax [ebp+var_4] +
mov eax [eax+34h] +
call @System@TObject@Free$qqrv  +
mov eax [ebp+var_4] +
xor edx edx +
mov [eax+34h] edx +
retn   +
jmp unknown_libname_539  +
jmp loc_4A1C31  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4A1C72  +
mov eax [ebp+var_4] +
mov eax [eax+74h] +
call @System@TObject@Free$qqrv  +
retn   +
jmp unknown_libname_539  +
jmp loc_4A1C5F  +
mov edx [ebp+var_C] +
cmp dword ptr [edx+4] 0 +
jz loc_4A1C8B  +
mov eax [ebp+var_C] +
mov eax [eax+4] +
test eax eax +
jz loc_4A1CD5  +
test byte ptr [eax+1Ch] 2 +
jnz loc_4A1CD5  +
xor eax eax +
push ebp  +
push offset loc_4A1CB0  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
call sub_49FF6C  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
jmp loc_4A1CD5  +
***
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
jmp @System@@HandleAnyException$qqrv  +
***
call @System@ExceptObject$qqrv  +
mov edx [eax+4] +
mov eax [ebp-4] +
mov ecx [eax] +
call dword ptr [ecx+10h]  +
test al al +
jnz loc_4A1CCE  +
call @System@@RaiseAgain$qqrv  +
call @@DoneExcept$qqrv  +
jmp loc_4A1C8B  +
***
xor edx edx +
mov eax [ebp-8] +
call sub_4A0114  +
cmp dword ptr [ebp-8] 0 +
jnz loc_4A1CFC  +
mov eax [ebp-0Ch] +
call @System@TObject@Free$qqrv  +
call @System@@RaiseAgain$qqrv  +
call @@DoneExcept$qqrv  +
***
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4A1D25  +
mov eax dword_4F19B0 +
call sub_4AD9E0  +
retn   +
***
jmp unknown_libname_539  +
***
jmp loc_4A1D13  +
***
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4A1D47  +
lea eax [ebp-30h] +
mov edx 6 +
call unknown_libname_541  +
retn   +
***
jmp unknown_libname_539  +
***
jmp loc_4A1D32  +
***
mov eax [ebp-0Ch] +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
add esp 0FFFFFFF8h +
push ebx  +
push esi  +
push edi  +
xor ecx ecx +
mov [ebp+var_8] ecx +
mov ebx edx +
mov [ebp+var_4] eax +
xor eax eax +
push ebp  +
push offset loc_4A1DFE  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
xor eax eax +
push ebp  +
push offset loc_4A1DD1  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov eax [ebp+var_4] +
call unknown_libname_427  +
cmp al 0Bh +
jz loc_4A1D94  +
call sub_4A025C  +
mov eax ebx +
call unknown_libname_445  +
mov eax [eax+1] +
mov esi [eax] +
xor ebx ebx +
lea edx [ebp+var_8] +
mov eax [ebp+var_4] +
call @TReader@ReadStr$qqrv  +
cmp [ebp+var_8] 0 +
jz loc_4A1DC7  +
mov edx [ebp+var_8] +
mov eax esi +
call sub_4A5FC0  +
cmp eax 1Fh +
ja loc_4A1DA2  +
bts ebx eax +
jmp loc_4A1DA2  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
jmp loc_4A1DE8  +
jmp @System@@HandleAnyException$qqrv  +
mov eax [ebp-4] +
call sub_4A2024  +
call @System@@RaiseAgain$qqrv  +
call @@DoneExcept$qqrv  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4A1E05  +
lea eax [ebp+var_8] +
call unknown_libname_540  +
retn   +
jmp unknown_libname_539  +
jmp loc_4A1DF5  +
mov eax ebx +
pop edi  +
pop esi  +
pop ebx  +
pop ecx  +
pop ecx  +
pop ebp  +
retn   +
***
mov ecx 4 +
push ecx  +
add esp 0FFFFFFF8h +
push ebx  +
push esi  +
xor ecx ecx +
mov [ebp+var_8] ecx +
mov esi edx +
mov ebx eax +
xor eax eax +
push ebp  +
push offset loc_4A1F1D  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov eax ebx +
call @Classes@TReader@NextValue$qqrv  +
sub al 12h +
jz loc_4A1E9E  +
sub al 2 +
jnz loc_4A1EB4  +
lea edx [ebp+var_8] +
mov eax ebx +
call sub_4A1F2C  +
mov edx [ebp+var_8] +
mov eax esi +
call unknown_libname_548  +
jmp loc_4A1F07  +
xor eax eax +
mov [ebp+var_4] eax +
mov eax ebx +
call unknown_libname_427  +
sub al 6 +
jz loc_4A1ECA  +
sub al 6 +
jz loc_4A1EDB  +
jmp loc_4A1EEC  +
lea edx [ebp+var_4] +
mov ecx 1 +
mov eax ebx +
call @TReader@Read$qqrpvi  +
jmp loc_4A1EF1  +
lea edx [ebp+var_4] +
mov ecx 4 +
mov eax ebx +
call @TReader@Read$qqrpvi  +
jmp loc_4A1EF1  +
call sub_4A025C  +
mov eax esi +
mov edx [ebp+var_4] +
call @System@@LStrSetLength$qqrv  +
mov edx [esi] +
mov ecx [ebp+var_4] +
mov eax ebx +
call @TReader@Read$qqrpvi  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4A1F24  +
lea eax [ebp+var_8] +
call unknown_libname_552  +
retn   +
jmp unknown_libname_539  +
jmp loc_4A1F14  +
pop esi  +
pop ebx  +
pop ecx  +
pop ecx  +
pop ebp  +
retn   +
***
push 0  +
mov ecx 1 +
call @TReader@Read$qqrpvi  +
mov al [esp+1+var_1] +
pop edx  +
retn   +
***
push 0  +
push ebx  +
mov ebx eax +
xor eax eax +
push ebp  +
push offset loc_4A2060  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
lea edx [ebp+var_4] +
mov eax ebx +
call @TReader@ReadStr$qqrv  +
cmp [ebp+var_4] 0 +
jnz loc_4A203A  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4A2067  +
lea eax [ebp+var_4] +
call unknown_libname_540  +
retn   +
jmp unknown_libname_539  +
jmp loc_4A2057  +
pop ebx  +
pop ecx  +
pop ebp  +
retn   +
***
push ebx  +
push ecx  +
push ebx  +
mov ebx eax +
lea edx [ebp+var_4] +
mov eax [ebp+arg_0] +
mov eax [eax-4] +
mov ecx 4 +
call @TReader@Read$qqrpvi  +
mov edx [ebp+var_4] +
imul edx ebx +
mov eax [ebp+arg_0] +
mov eax [eax-4] +
call sub_4A2518  +
pop ebx  +
pop ecx  +
pop ebp  +
retn   +
***
push ebx  +
add esp 0FFFFFFF8h +
xor edx edx +
mov [ebp+var_8] edx +
mov [ebp+var_4] eax +
xor eax eax +
push ebp  +
push offset loc_4A22AF  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov eax [ebp+var_4] +
call unknown_libname_427  +
and eax 7Fh +
cmp eax 14h +
ja loc_4A2299  +
jmp ds:off_4A2157[eax*4]  +
jmp loc_4A2299  +
push ebp  +
call unknown_libname_428  +
pop ecx  +
jmp loc_4A2299  +
mov edx 1 +
mov eax [ebp+var_4] +
call sub_4A2518  +
jmp loc_4A2299  +
mov edx 2 +
mov eax [ebp+var_4] +
call sub_4A2518  +
jmp loc_4A2299  +
mov edx 4 +
mov eax [ebp+var_4] +
call sub_4A2518  +
jmp loc_4A2299  +
mov edx 0Ah +
mov eax [ebp+var_4] +
call sub_4A2518  +
jmp loc_4A2299  +
lea edx [ebp+var_8] +
mov eax [ebp+var_4] +
call @TReader@ReadStr$qqrv  +
jmp loc_4A2299  +
push ebp  +
mov eax 1 +
call sub_4A2094  +
pop ecx  +
jmp loc_4A2299  +
mov eax [ebp+var_4] +
call sub_4A2024  +
jmp loc_4A2299  +
push ebp  +
mov eax 1 +
call sub_4A2094  +
pop ecx  +
jmp loc_4A2299  +
push ebp  +
call sub_4A20C4  +
pop ecx  +
jmp loc_4A2299  +
mov edx 4 +
mov eax [ebp+var_4] +
call sub_4A2518  +
jmp loc_4A2299  +
mov edx 8 +
mov eax [ebp+var_4] +
call sub_4A2518  +
jmp loc_4A2299  +
mov edx 8 +
mov eax [ebp+var_4] +
call sub_4A2518  +
jmp loc_4A2299  +
push ebp  +
mov eax 2 +
call sub_4A2094  +
pop ecx  +
jmp loc_4A2299  +
mov edx 8 +
mov eax [ebp+var_4] +
call sub_4A2518  +
jmp loc_4A2299  +
push ebp  +
mov eax 1 +
call sub_4A2094  +
pop ecx  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4A22B6  +
lea eax [ebp+var_8] +
call unknown_libname_540  +
retn   +
jmp unknown_libname_539  +
jmp loc_4A22A6  +
pop ecx  +
pop ecx  +
pop ebp  +
retn   +
***
push 0  +
add esp 0FFFFFFF0h +
push ebx  +
push esi  +
xor ecx ecx +
mov [ebp+var_10] ecx +
mov [ebp+var_C] ecx +
mov ebx eax +
xor eax eax +
push ebp  +
push offset loc_4A239C  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
test dl dl +
jz loc_4A2352  +
lea ecx [ebp+var_8] +
lea edx [ebp-1] +
mov eax ebx +
mov esi [eax] +
call dword ptr [esi+24h]  +
lea edx [ebp+var_C] +
mov eax ebx +
call @TReader@ReadStr$qqrv  +
lea edx [ebp+var_10] +
mov eax ebx +
call @TReader@ReadStr$qqrv  +
jmp loc_4A2352  +
mov eax ebx +
call sub_4A22BC  +
mov eax ebx +
call unknown_libname_425  +
test al al +
jz loc_4A234B  +
mov eax ebx +
call sub_4A11BC  +
jmp loc_4A236F  +
mov dl 1 +
mov eax ebx +
call sub_4A2304  +
mov eax ebx +
call unknown_libname_425  +
test al al +
jz loc_4A2366  +
mov eax ebx +
call sub_4A11BC  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4A23A3  +
lea eax [ebp+var_10] +
mov edx 2 +
call unknown_libname_541  +
retn   +
jmp unknown_libname_539  +
jmp loc_4A238E  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
add esp 0FFFFFFF0h +
push ebx  +
push esi  +
push edi  +
xor ebx ebx +
mov [ebp+var_8] ebx +
mov edi ecx +
mov esi edx +
mov ebx eax +
xor eax eax +
push ebp  +
push offset loc_4A2451  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
lea eax [ebp+var_8] +
mov edx esi +
call unknown_libname_543  +
xor eax eax +
mov [ebp+var_4] eax +
mov esi [ebx+1Ch] +
test esi esi +
jz loc_4A23F1  +
mov edx [ebp+var_8] +
mov eax esi +
call sub_4A5028  +
mov [ebp+var_4] eax +
cmp [ebp+var_4] 0 +
jnz loc_4A243B  +
cmp word ptr [ebx+52h] 0 +
jz loc_4A240E  +
push edi  +
lea eax [ebp+var_4] +
push eax  +
mov ecx [ebp+var_8] +
mov edx ebx +
mov eax [ebx+54h] +
call dword ptr [ebx+50h]  +
cmp [ebp+var_4] 0 +
jnz loc_4A243B  +
mov eax [ebp+var_8] +
mov [ebp+var_10] eax +
mov [ebp+var_C] 0Bh +
lea eax [ebp+var_10] +
push eax  +
push 0  +
mov ecx off_4EA834 +
mov dl 1 +
mov eax ds:off_49A248 +
call sub_4AC274  +
call @System@@RaiseExcept$qqrv  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4A2458  +
lea eax [ebp+var_8] +
call unknown_libname_540  +
retn   +
jmp unknown_libname_539  +
jmp loc_4A2448  +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
jz loc_4A2478  +
mov ecx edx +
mov ebx eax +
mov edx eax +
mov eax [ebx+4Ch] +
call dword ptr [ebx+48h]  +
pop ebx  +
retn   +
***
push edi  +
push ecx  +
mov esi edx +
mov ebx eax +
mov ecx esi +
mov edx [ebx+18h] +
mov eax ebx +
call sub_4A069C  +
mov [esp+4+var_4] eax +
cmp [esp+4+var_4] 0 +
jnz loc_4A24DD  +
cmp dword ptr [ebx+1Ch] 0 +
jz loc_4A24DD  +
mov eax [ebx+1Ch] +
cmp eax [ebx+18h] +
jz loc_4A24DD  +
mov ecx esi +
mov edx [ebx+1Ch] +
mov eax ebx +
call sub_4A069C  +
mov [esp+4+var_4] eax +
cmp word ptr [ebx+62h] 0 +
jz loc_4A24EF  +
push esp  +
mov ecx esi +
mov edx ebx +
mov eax [ebx+64h] +
call dword ptr [ebx+60h]  +
cmp [esp+4+var_4] 0 +
jz loc_4A2507  +
mov edx ds:off_49B454 +
mov eax [esp+4+var_4] +
call @System@TObject@InheritsFrom$qqrp17System@TMetaClasst1  +
test al al +
jnz loc_4A250E  +
mov eax esi +
call sub_49C1D8  +
mov eax [esp+4+var_4] +
pop edx  +
pop esi  +
pop ebx  +
retn   +
***
add esp 0FFFFFF00h +
add esp 0FFFFFFE4h +
push ebx  +
xor edx edx +
mov [ebp+var_18] edx +
mov [ebp+var_1C] edx +
mov ebx eax +
xor eax eax +
push ebp  +
push offset loc_4A2704  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov eax [ebp+arg_0] +
mov eax [eax-4] +
mov dl 0Ah +
call @Classes@TReader@CheckValue$qqr18Classes@TValueType  +
mov dl 1 +
mov eax ds:off_49AEB4 +
call @System@TObject@$bctr$qqrv  +
mov [ebp+var_4] eax +
mov dl 1 +
mov eax ds:off_49AEB4 +
call @System@TObject@$bctr$qqrv  +
mov [ebp+var_8] eax +
xor eax eax +
push ebp  +
push offset loc_4A26DF  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
lea edx [ebp+var_10] +
mov eax [ebp+arg_0] +
mov eax [eax-4] +
mov ecx 4 +
call @TReader@Read$qqrpvi  +
mov eax [ebp+var_10] +
cdq   +
push edx  +
push eax  +
mov eax [ebp+var_4] +
call sub_49F238  +
mov eax [ebp+var_4] +
mov edx [eax+4] +
mov eax [ebp+arg_0] +
mov eax [eax-4] +
mov ecx [ebp+var_10] +
call @TReader@Read$qqrpvi  +
push 400h  +
mov ecx [ebp+var_4] +
mov dl 1 +
mov eax ds:off_49B200 +
call sub_49FBA4  +
mov [ebp+var_C] eax +
xor eax eax +
push ebp  +
push offset loc_4A26BA  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
lea edx [ebp+var_18] +
mov eax [ebp+var_C] +
call sub_4A1E70  +
lea edx [ebp+var_10] +
mov ecx 4 +
mov eax [ebp+var_C] +
call @TReader@Read$qqrpvi  +
mov eax [ebp+var_10] +
cdq   +
push edx  +
push eax  +
mov eax [ebp+var_8] +
call sub_49F238  +
mov eax [ebp+var_8] +
mov edx [eax+4] +
mov ecx [ebp+var_10] +
mov eax [ebp+var_C] +
call @TReader@Read$qqrpvi  +
lea edx [ebp+var_14] +
mov eax [ebp+var_18] +
call sub_4B7CA0  +
test al al +
jz loc_4A2676  +
lea eax [ebp+var_1C] +
call unknown_libname_560  +
mov ecx eax +
mov edx offset dword_4A2710 +
mov eax [ebp+var_14] +
call sub_4ADB28  +
test al al +
jnz loc_4A268D  +
mov ecx off_4EA890 +
mov dl 1 +
mov eax ds:off_49A248 +
call @Sysutils@Exception@$bctr$qqrp20System@TResStringRec  +
call @System@@RaiseExcept$qqrv  +
mov eax [ebp+var_14] +
mov ax [eax+4] +
mov [ebx] ax +
mov edx ebx +
mov ecx [ebp+var_8] +
mov eax [ebp+var_1C] +
mov ebx [eax] +
call dword ptr [ebx+0Ch]  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4A26C1  +
mov eax [ebp+var_C] +
call @System@TObject@Free$qqrv  +
retn   +
jmp unknown_libname_539  +
jmp loc_4A26B1  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4A26E6  +
mov eax [ebp+var_8] +
call @System@TObject@Free$qqrv  +
mov eax [ebp+var_4] +
call @System@TObject@Free$qqrv  +
retn   +
jmp unknown_libname_539  +
jmp loc_4A26CE  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4A270B  +
lea eax [ebp+var_1C] +
call unknown_libname_560  +
lea eax [ebp+var_18] +
call unknown_libname_540  +
retn   +
jmp unknown_libname_539  +
jmp loc_4A26F3  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
xor ecx ecx +
push ecx  +
push ecx  +
push ecx  +
push ecx  +
push ecx  +
push ecx  +
push ecx  +
push ebx  +
mov ebx edx +
mov [ebp+var_4] eax +
xor eax eax +
push ebp  +
push offset loc_4A291D  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov eax ebx +
call sub_4BC1C0  +
mov eax [ebp+var_4] +
call @Classes@TReader@NextValue$qqrv  +
and eax 7Fh +
cmp eax 14h +
ja loc_4A28E0  +
jmp ds:off_4A2762[eax*4]  +
mov eax [ebp+var_4] +
call unknown_libname_427  +
cmp al 0Dh +
jz loc_4A28F7  +
mov eax ebx +
call sub_4B7D88  +
jmp loc_4A28F7  +
mov eax [ebp+var_4] +
call @Classes@TReader@ReadInteger$qqrv  +
mov edx eax +
and edx 0FFh +
mov eax ebx +
mov cl 1 +
call sub_4BC218  +
jmp loc_4A28F7  +
mov eax [ebp+var_4] +
call @Classes@TReader@ReadInteger$qqrv  +
mov edx eax +
movsx edx dx +
mov eax ebx +
mov cl 0FEh +
call sub_4BC218  +
jmp loc_4A28F7  +
mov eax [ebp+var_4] +
call @Classes@TReader@ReadInteger$qqrv  +
mov edx eax +
mov eax ebx +
mov cl 0FCh +
call sub_4BC218  +
jmp loc_4A28F7  +
mov eax [ebp+var_4] +
call @Classes@TReader@ReadFloat$qqrv  +
mov eax ebx +
call sub_4BC23C  +
jmp loc_4A28F7  +
mov eax [ebp+var_4] +
call @Classes@TReader@ReadSingle$qqrv  +
mov eax ebx +
call sub_4BC23C  +
jmp loc_4A28F7  +
mov eax [ebp+var_4] +
call @Classes@TReader@ReadCurrency$qqrv  +
mov eax ebx +
call sub_4BC24C  +
jmp loc_4A28F7  +
mov eax [ebp+var_4] +
call @Classes@TReader@ReadDate$qqrv  +
mov eax ebx +
call sub_4BC244  +
jmp loc_4A28F7  +
lea edx [ebp+var_8] +
mov eax [ebp+var_4] +
call sub_4A1E70  +
mov edx [ebp+var_8] +
mov eax ebx +
call sub_4BC254  +
jmp loc_4A28F7  +
lea edx [ebp+var_C] +
mov eax [ebp+var_4] +
call sub_4A1F2C  +
mov edx [ebp+var_C] +
mov eax ebx +
call sub_4BC25C  +
jmp loc_4A28F7  +
mov eax [ebp+var_4] +
call unknown_libname_427  +
cmp al 9 +
setz dl  +
mov eax ebx +
call sub_4BC234  +
jmp loc_4A28F7  +
push ebp  +
lea eax [ebp+var_1C] +
call sub_4A2560  +
pop ecx  +
lea edx [ebp+var_1C] +
mov eax ebx +
call sub_4BC1C8  +
jmp loc_4A28F7  +
mov eax [ebp+var_4] +
call @Classes@TReader@ReadInt64$qqrv  +
push edx  +
push eax  +
mov eax ebx +
call sub_4BC220  +
jmp loc_4A28F7  +
mov ecx off_4EA890 +
mov dl 1 +
mov eax ds:off_49A248 +
call @Sysutils@Exception@$bctr$qqrp20System@TResStringRec  +
call @System@@RaiseExcept$qqrv  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4A2924  +
lea eax [ebp+var_1C] +
call sub_4BC290  +
lea eax [ebp+var_C] +
call unknown_libname_552  +
lea eax [ebp+var_8] +
call unknown_libname_540  +
retn   +
jmp unknown_libname_539  +
jmp loc_4A2904  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
call unknown_libname_536  +
mov eax [eax+30h] +
call @Classes@TList@Add$qqrpv  +
retn   +
***
push ebx  +
mov ebx eax +
test cl cl +
jz loc_4A2984  +
cmp [ebp+arg_2] 0 +
jz loc_4A2984  +
mov eax ebx +
call @Classes@TWriter@WritePropName$qqrx17System@AnsiString  +
mov edx ebx +
mov eax [ebp+arg_4] +
call dword ptr [ebp+8]  +
pop ebx  +
pop ebp  +
retn 10h  +
***
push ebx  +
mov ebx eax +
test cl cl +
jz loc_4A29B1  +
cmp [ebp+arg_2] 0 +
jz loc_4A29B1  +
mov eax ebx +
call @Classes@TWriter@WritePropName$qqrx17System@AnsiString  +
push [ebp+arg_4]  +
push dword ptr [ebp+8]  +
mov eax ebx +
call @Classes@TWriter@WriteBinary$qqrynpqqrp15Classes@TStream$v  +
pop ebx  +
pop ebp  +
retn 10h  +
***
mov eax [ebx+4] +
retn   +
***
mov esi edx +
mov ebx eax +
mov eax [ebx+4] +
call sub_49F1B4  +
cmp eax esi +
jg loc_4A29EB  +
mov edx [ebx+10h] +
add edx eax +
cmp esi edx +
jle loc_4A2A02  +
mov eax ebx +
call @Classes@TWriter@WriteBuffer$qqrv  +
mov eax esi +
cdq   +
push edx  +
push eax  +
mov eax [ebx+4] +
call sub_49F1D4  +
pop esi  +
pop ebx  +
retn   +
sub esi eax +
mov [ebx+10h] esi +
pop esi  +
pop ebx  +
retn   +
***
mov esi edx +
mov ebx eax +
mov edx esi +
mov eax ebx +
call sub_49FC14  +
mov [ebx+1Ch] esi +
pop esi  +
pop ebx  +
retn   +
***
push ebx  +
mov esi edx +
mov ebx ecx +
mov edi eax +
jmp loc_4A2A65  +
mov ecx [edi+0Ch] +
sub ecx [edi+10h] +
ja loc_4A2A41  +
mov eax edi +
call @Classes@TWriter@WriteBuffer$qqrv  +
mov ecx [edi+0Ch] +
cmp ecx ebx +
jb loc_4A2A47  +
mov ecx ebx +
sub ebx ecx +
push edi  +
mov eax [edi+8] +
add eax [edi+10h] +
add [edi+10h] ecx +
mov edi eax +
mov edx ecx +
shr ecx 2 +
cld   +
movs   +
mov ecx edx +
and ecx 3 +
movs   +
pop edi  +
or ebx ebx +
jnz loc_4A2A2F  +
pop ebx  +
pop edi  +
pop esi  +
retn   +
***
add esp 0FFFFFFF8h +
push ebx  +
mov ebx eax +
mov dl 1 +
mov eax ds:off_49AEB4 +
call @System@TObject@$bctr$qqrv  +
mov [ebp+var_4] eax +
xor eax eax +
push ebp  +
push offset loc_4A2AE8  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov edx [ebp+var_4] +
mov eax [ebp+arg_4] +
call [ebp+arg_0]  +
mov dl 0Ah +
mov eax ebx +
call unknown_libname_435  +
mov eax [ebp+var_4] +
call sub_49F1E8  +
mov [ebp+var_8] eax +
lea edx [ebp+var_8] +
mov ecx 4 +
mov eax ebx +
call @TWriter@Write$qqrpxvi  +
mov eax [ebp+var_4] +
mov edx [eax+4] +
mov ecx [ebp+var_8] +
mov eax ebx +
call @TWriter@Write$qqrpxvi  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4A2AEF  +
mov eax [ebp+var_4] +
call @System@TObject@Free$qqrv  +
retn   +
jmp unknown_libname_539  +
jmp loc_4A2ADF  +
pop ebx  +
pop ecx  +
pop ecx  +
pop ebp  +
retn 8  +
***
mov edx [ebx+8] +
test dl dl +
push 0  +
push ebx  +
push esi  +
mov ebx edx +
mov esi eax +
xor eax eax +
push ebp  +
push offset loc_4A2B67  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
lea eax [ebp+var_4] +
mov edx ebx +
call unknown_libname_544  +
mov edx [ebp+var_4] +
mov eax esi +
call sub_4A48D8  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4A2B6E  +
lea eax [ebp+var_4] +
call unknown_libname_540  +
retn   +
jmp unknown_libname_539  +
jmp loc_4A2B5E  +
pop esi  +
pop ebx  +
pop ecx  +
pop ebp  +
retn   +
***
add esp 0FFFFFFF8h +
push ecx  +
push ebx  +
push esi  +
push edi  +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
mov eax [eax-4] +
mov eax [eax+30h] +
mov ebx [eax+8] +
dec ebx  +
test ebx ebx +
jl loc_4A2C57  +
inc ebx  +
xor edi edi +
mov eax [ebp+arg_0] +
mov eax [eax-4] +
mov eax [eax+30h] +
mov edx edi +
call @Classes@TList@Get$qqri  +
mov esi eax +
mov eax [esi+8] +
mov edx [ebp+var_4] +
call unknown_libname_459  +
test al al +
jnz loc_4A2C59  +
inc edi  +
dec ebx  +
jnz loc_4A2C32  +
xor esi esi +
mov eax esi +
pop edi  +
pop esi  +
pop ebx  +
pop ecx  +
pop ebp  +
retn   +
***
add esp 0FFFFFFF0h +
push ebx  +
push esi  +
mov ebx edx +
mov [ebp+var_4] eax +
mov eax [ebp+var_4] +
mov eax [eax+20h] +
mov [ebp+var_8] eax +
mov eax [ebp+var_4] +
mov eax [eax+28h] +
mov [ebp+var_C] eax +
xor eax eax +
push ebp  +
push offset loc_4A2D32  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
or word ptr [ebx+1Ch] 4 +
mov eax [ebp+var_4] +
cmp dword ptr [eax+30h] 0 +
jz loc_4A2CAF  +
push ebp  +
mov eax [ebx+8] +
call @Classes@_16902  +
pop ecx  +
mov edx [ebp+var_4] +
mov [edx+20h] eax +
mov eax [ebp+var_4] +
cmp word ptr [eax+42h] 0 +
jz loc_4A2D03  +
mov eax [ebp+var_4] +
mov esi [eax+20h] +
test esi esi +
jz loc_4A2CD4  +
mov eax esi +
mov edx ds:off_49B454 +
call @System@@IsClass$qqrp14System@TObjectp17System@TMetaClass  +
test al al +
jz loc_4A2D03  +
mov eax [ebp+var_4] +
mov eax [eax+20h] +
mov [ebp+var_10] eax +
mov eax [ebx+8] +
push eax  +
lea eax [ebp+var_10] +
push eax  +
mov eax [ebp+var_4] +
add eax 28h +
push eax  +
mov esi [ebp+var_4] +
mov ecx ebx +
mov edx [ebp+var_4] +
mov eax [esi+44h] +
call dword ptr [esi+40h]  +
mov eax [ebp+var_4] +
mov edx [ebp+var_10] +
mov [eax+20h] edx +
mov edx [ebp+var_4] +
mov eax ebx +
mov ecx [eax] +
call dword ptr [ecx+24h]  +
and word ptr [ebx+1Ch] 0FFFBh +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4A2D39  +
mov eax [ebp+var_4] +
mov edx [ebp+var_8] +
mov [eax+20h] edx +
mov eax [ebp+var_4] +
mov edx [ebp+var_C] +
mov [eax+28h] edx +
retn   +
jmp unknown_libname_539  +
jmp loc_4A2D1F  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
add esp 0FFFFFEC8h +
push ebx  +
push esi  +
xor ecx ecx +
mov [ebp+var_138] ecx +
mov [ebp+var_12C] ecx +
mov [ebp+var_130] ecx +
mov [ebp+var_134] ecx +
mov [ebp+var_8] edx +
mov [ebp+var_4] eax +
xor eax eax +
push ebp  +
push offset loc_4A311C  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
lea edx [ebp+var_128] +
mov eax [ebp+var_8] +
mov eax [eax] +
call @System@TObject@ClassName$qqrp17System@TMetaClass  +
xor ebx ebx +
mov bl byte ptr [ebp+var_128] +
mov eax [ebp+var_8] +
mov eax [eax+8] +
call sub_4BB610  +
add ebx eax +
inc ebx  +
add ebx 5 +
add ebx 3 +
mov eax [ebp+var_4] +
mov eax [eax+0Ch] +
mov edx [ebp+var_4] +
sub eax [edx+10h] +
cmp ebx eax +
jle loc_4A2DBD  +
mov eax [ebp+var_4] +
call @Classes@TWriter@WriteBuffer$qqrv  +
mov eax [ebp+var_4] +
call @TWriter@GetPosition$qqrv  +
mov [ebp+var_C] eax +
mov al ds:byte_4A312C +
mov [ebp+var_25] al +
mov eax [ebp+var_8] +
test byte ptr [eax+1Dh] 2 +
jz loc_4A2E00  +
mov eax [ebp+var_4] +
cmp dword ptr [eax+20h] 0 +
jz loc_4A2DFA  +
mov eax [ebp+var_8] +
test byte ptr [eax+1Ch] 20h +
jz loc_4A2DFA  +
mov eax [ebp+var_4] +
cmp dword ptr [eax+30h] 0 +
jz loc_4A2DFA  +
or [ebp+var_25] 1 +
jmp loc_4A2E0D  +
or [ebp+var_25] 4 +
jmp loc_4A2E0D  +
mov eax [ebp+var_4] +
cmp dword ptr [eax+20h] 0 +
jz loc_4A2E0D  +
or [ebp+var_25] 1 +
mov eax [ebp+var_4] +
mov ebx [eax+30h] +
test ebx ebx +
jz loc_4A2E48  +
mov eax [ebp+var_4] +
mov eax [eax+34h] +
cmp eax [ebx+8] +
jge loc_4A2E48  +
mov eax [ebp+var_4] +
cmp dword ptr [eax+20h] 0 +
jz loc_4A2E44  +
mov eax [ebp+var_4] +
mov edx [eax+34h] +
mov eax [ebp+var_4] +
mov eax [eax+30h] +
call @Classes@TList@Get$qqri  +
mov edx [ebp+var_4] +
cmp eax [edx+20h] +
jz loc_4A2E48  +
or [ebp+var_25] 2 +
mov eax [ebp+var_4] +
mov ecx [eax+38h] +
mov dl [ebp+var_25] +
mov eax [ebp+var_4] +
call unknown_libname_433  +
mov eax [ebp+var_4] +
cmp byte ptr [eax+48h] 0 +
jz loc_4A2ED4  +
mov eax [ebp+var_8] +
call @System@TObject@ClassType$qqrv  +
call @System@TObject@ClassInfo$qqrp17System@TMetaClass  +
call unknown_libname_445  +
lea edx [eax+0Ah] +
lea eax [ebp+var_130] +
call unknown_libname_547  +
push [ebp+var_130]  +
push offset _str___2.Text  +
lea edx [ebp+var_128] +
mov eax [ebp+var_8] +
mov eax [eax] +
call @System@TObject@ClassName$qqrp17System@TMetaClass  +
lea edx [ebp+var_128] +
lea eax [ebp+var_134] +
call unknown_libname_547  +
push [ebp+var_134]  +
lea eax [ebp+var_12C] +
mov edx 3 +
call sub_4BB6D0  +
mov edx [ebp+var_12C] +
mov eax [ebp+var_4] +
call sub_4A47F8  +
jmp loc_4A2F03  +
lea edx [ebp+var_128] +
mov eax [ebp+var_8] +
mov eax [eax] +
call @System@TObject@ClassName$qqrp17System@TMetaClass  +
lea edx [ebp+var_128] +
lea eax [ebp+var_138] +
call unknown_libname_547  +
mov edx [ebp+var_138] +
mov eax [ebp+var_4] +
call sub_4A47F8  +
mov eax [ebp+var_8] +
mov edx [eax+8] +
mov eax [ebp+var_4] +
call sub_4A47F8  +
mov eax [ebp+var_4] +
call @TWriter@GetPosition$qqrv  +
mov [ebp+var_10] eax +
mov eax [ebp+var_4] +
mov eax [eax+30h] +
test eax eax +
jz loc_4A2F46  +
mov edx [ebp+var_4] +
mov edx [edx+34h] +
cmp edx [eax+8] +
jge loc_4A2F46  +
mov eax [ebp+var_4] +
cmp dword ptr [eax+20h] 0 +
jz loc_4A2F40  +
mov eax [ebp+var_4] +
inc dword ptr [eax+34h]  +
mov eax [ebp+var_4] +
inc dword ptr [eax+38h]  +
mov edx [ebp+var_8] +
mov eax [ebp+var_4] +
call @Classes@TWriter@WriteProperties$qqrp19Classes@TPersistent  +
mov eax [ebp+var_4] +
call sub_4A3390  +
mov eax [ebp+var_4] +
mov eax [eax+30h] +
mov [ebp+var_14] eax +
mov eax [ebp+var_4] +
mov eax [eax+34h] +
mov [ebp+var_18] eax +
mov eax [ebp+var_4] +
mov eax [eax+38h] +
mov [ebp+var_1C] eax +
mov eax [ebp+var_4] +
mov eax [eax+18h] +
mov [ebp+var_20] eax +
mov eax [ebp+var_4] +
mov eax [eax+28h] +
mov [ebp+var_24] eax +
xor eax eax +
push ebp  +
push offset loc_4A30BD  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov eax [ebp+var_4] +
xor edx edx +
mov [eax+30h] edx +
mov eax [ebp+var_4] +
xor edx edx +
mov [eax+34h] edx +
mov eax [ebp+var_4] +
xor edx edx +
mov [eax+38h] edx +
mov eax [ebp+var_4] +
cmp byte ptr [eax+24h] 0 +
jnz loc_4A3082  +
xor eax eax +
push ebp  +
push offset loc_4A307B  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov eax [ebp+var_4] +
mov ebx [eax+20h] +
test ebx ebx +
jz loc_4A3035  +
mov eax ebx +
mov edx ds:off_49B454 +
call @System@@IsClass$qqrp14System@TObjectp17System@TMetaClass  +
test al al +
jz loc_4A3035  +
mov eax [ebp+var_4] +
mov ebx [eax+20h] +
mov eax ebx +
mov edx ds:off_49B454 +
call @System@@IsClass$qqrp14System@TObjectp17System@TMetaClass  +
test al al +
jz loc_4A3005  +
test byte ptr [ebx+1Dh] 2 +
jz loc_4A3005  +
mov eax [ebp+var_4] +
mov [eax+28h] ebx +
mov dl 1 +
mov eax ds:off_49A5D8 +
call @System@TObject@$bctr$qqrv  +
mov edx [ebp+var_4] +
mov [edx+30h] eax +
mov eax [ebp+var_4] +
push eax  +
push offset sub_4A2958  +
mov eax [ebp+var_4] +
mov edx [eax+28h] +
mov eax [ebp+var_4] +
mov eax [eax+20h] +
mov si 0FFFDh +
call @System@@CallDynaInst$qqrv  +
mov eax [ebp+var_8] +
test byte ptr [eax+1Dh] 2 +
jz loc_4A3047  +
mov eax [ebp+var_4] +
mov edx [ebp+var_8] +
mov [eax+18h] edx +
mov eax [ebp+var_4] +
push eax  +
push offset @Classes@TWriter@WriteComponent$qqrp18Classes@TComponent  +
mov eax [ebp+var_4] +
mov edx [eax+18h] +
mov eax [ebp+var_8] +
mov si 0FFFDh +
call @System@@CallDynaInst$qqrv  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4A3082  +
mov eax [ebp+var_4] +
mov eax [eax+30h] +
call @System@TObject@Free$qqrv  +
retn   +
jmp unknown_libname_539  +
jmp loc_4A306F  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4A30C4  +
mov eax [ebp+var_4] +
mov edx [ebp+var_14] +
mov [eax+30h] edx +
mov eax [ebp+var_4] +
mov edx [ebp+var_18] +
mov [eax+34h] edx +
mov eax [ebp+var_4] +
mov edx [ebp+var_1C] +
mov [eax+38h] edx +
mov eax [ebp+var_4] +
mov edx [ebp+var_20] +
mov [eax+18h] edx +
mov eax [ebp+var_4] +
mov edx [ebp+var_24] +
mov [eax+28h] edx +
retn   +
jmp unknown_libname_539  +
jmp loc_4A308F  +
mov eax [ebp+var_4] +
call sub_4A3390  +
mov eax [ebp+var_4] +
mov eax [eax+18h] +
cmp eax [ebp+var_8] +
jz loc_4A30FE  +
mov al ds:byte_4A313C +
cmp al [ebp+var_25] +
jnz loc_4A30FE  +
mov eax [ebp+var_4] +
call @TWriter@GetPosition$qqrv  +
mov edx [ebp+var_10] +
add edx 2 +
cmp eax edx +
jnz loc_4A30FE  +
mov edx [ebp+var_C] +
mov eax [ebp+var_4] +
call sub_4A29D0  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4A3123  +
lea eax [ebp+var_138] +
mov edx 4 +
call unknown_libname_541  +
retn   +
jmp unknown_libname_539  +
jmp loc_4A310B  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
mov esi edx +
mov ebx eax +
mov [ebx+28h] ecx +
mov [ebx+20h] ecx +
mov [ebx+18h] esi +
mov [ebx+1Ch] esi +
mov eax ebx +
call unknown_libname_434  +
mov edx esi +
mov eax ebx +
call @Classes@TWriter@WriteComponent$qqrp18Classes@TComponent  +
pop esi  +
pop ebx  +
retn   +
***
push ebx  +
mov ebx eax +
mov dl 5 +
mov eax ebx +
call unknown_libname_435  +
lea edx [ebp+arg_0] +
mov ecx 0Ah +
mov eax ebx +
call @TWriter@Write$qqrpxvi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
push ebx  +
mov ebx eax +
mov dl 0Fh +
mov eax ebx +
call unknown_libname_435  +
lea edx [ebp+arg_0] +
mov ecx 4 +
mov eax ebx +
call @TWriter@Write$qqrpxvi  +
pop ebx  +
pop ebp  +
retn 4  +
***
push ebx  +
mov ebx eax +
mov dl 10h +
mov eax ebx +
call unknown_libname_435  +
lea edx [ebp+arg_0] +
mov ecx 8 +
mov eax ebx +
call @TWriter@Write$qqrpxvi  +
pop ebx  +
pop ebp  +
retn 8  +
***
push ebx  +
mov ebx eax +
mov dl 11h +
mov eax ebx +
call unknown_libname_435  +
lea edx [ebp+arg_0] +
mov ecx 8 +
mov eax ebx +
call @TWriter@Write$qqrpxvi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov esi edx +
mov ebx eax +
mov edx offset _str_False_0.Text +
mov eax esi +
call unknown_libname_459  +
test al al +
jz loc_4A321A  +
mov dl 8 +
mov eax ebx +
call unknown_libname_435  +
pop esi  +
pop ebx  +
retn   +
mov edx offset _str_True_0.Text +
mov eax esi +
call unknown_libname_459  +
test al al +
jz loc_4A3235  +
mov dl 9 +
mov eax ebx +
call unknown_libname_435  +
jmp loc_4A327D  +
mov edx offset _str_Null_0.Text +
mov eax esi +
call unknown_libname_459  +
test al al +
jz loc_4A3250  +
xor edx edx +
mov eax ebx +
call unknown_libname_435  +
jmp loc_4A327D  +
mov edx offset _str_nil_1.Text +
mov eax esi +
call unknown_libname_459  +
test al al +
jz loc_4A326B  +
mov dl 0Dh +
mov eax ebx +
call unknown_libname_435  +
jmp loc_4A327D  +
mov dl 7 +
mov eax ebx +
call unknown_libname_435  +
mov edx esi +
mov eax ebx +
call sub_4A47F8  +
pop esi  +
pop ebx  +
retn   +
***
mov [esp+4+var_4] edx +
mov ebx eax +
cmp [esp+4+var_4] 0FFFFFF80h +
jl loc_4A32E9  +
cmp [esp+4+var_4] 7Fh +
jg loc_4A32E9  +
mov dl 2 +
mov eax ebx +
call unknown_libname_435  +
mov edx esp +
mov ecx 1 +
mov eax ebx +
call @TWriter@Write$qqrpxvi  +
pop edx  +
pop ebx  +
retn   +
cmp [esp+4+var_4] 0FFFF8000h +
jl loc_4A3314  +
cmp [esp+4+var_4] 7FFFh +
jg loc_4A3314  +
mov dl 3 +
mov eax ebx +
call unknown_libname_435  +
mov edx esp +
mov ecx 2 +
mov eax ebx +
call @TWriter@Write$qqrpxvi  +
jmp loc_4A332B  +
mov dl 4 +
mov eax ebx +
call unknown_libname_435  +
mov edx esp +
mov ecx 4 +
mov eax ebx +
call @TWriter@Write$qqrpxvi  +
pop edx  +
pop ebx  +
retn   +
***
push ebx  +
mov ebx eax +
cmp [ebp+arg_4] 0FFFFFFFFh +
jnz loc_4A3347  +
cmp [ebp+arg_0] 80000000h +
jb loc_4A336A  +
jmp loc_4A3349  +
jl loc_4A336A  +
cmp [ebp+arg_4] 0 +
jnz loc_4A335A  +
cmp [ebp+arg_0] 7FFFFFFFh +
ja loc_4A336A  +
jmp loc_4A335C  +
jg loc_4A336A  +
mov eax [ebp+arg_0] +
mov edx eax +
mov eax ebx +
call @TWriter@WriteInteger$qqri  +
jmp loc_4A3382  +
mov dl 13h +
mov eax ebx +
call unknown_libname_435  +
lea edx [ebp+arg_0] +
mov ecx 8 +
mov eax ebx +
call @TWriter@Write$qqrpxvi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov dl 1 +
xor edx edx +
push ecx  +
mov esi ecx +
mov [esp+3+var_3] dl +
mov ebx eax +
mov al ds:byte_4A33D8 +
cmp al [esp+3+var_3] +
jz loc_4A33D4  +
mov al [esp+3+var_3] +
or al 0F0h +
mov [esp+3+var_2] al +
lea edx [esp+3+var_2] +
mov ecx 1 +
mov eax ebx +
call @TWriter@Write$qqrpxvi  +
test [esp+3+var_3] 2 +
jz loc_4A33D4  +
mov edx esi +
mov eax ebx +
call @TWriter@WriteInteger$qqri  +
pop edx  +
pop esi  +
pop ebx  +
retn   +
***
add esp 0FFFFFFF0h +
push ebx  +
push esi  +
push edi  +
mov [ebp+var_8] edx +
mov [ebp+var_4] eax +
mov eax [ebp+var_8] +
mov eax [eax] +
call @System@TObject@ClassInfo$qqrp17System@TMetaClass  +
call unknown_libname_445  +
movsx eax word ptr [eax+8] +
mov [ebp+var_C] eax +
cmp [ebp+var_C] 0 +
jle loc_4A3490  +
mov eax [ebp+var_C] +
shl eax 2 +
call sub_4B97C0  +
mov [ebp+var_10] eax +
xor eax eax +
push ebp  +
push offset loc_4A3489  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov eax [ebp+var_8] +
mov eax [eax] +
call @System@TObject@ClassInfo$qqrp17System@TMetaClass  +
mov edx [ebp+var_10] +
call @Typinfo@GetPropInfos$qqrp17Typinfo@TTypeInfopa16380$p17Typinfo@TPropInfo  +
mov esi [ebp+var_C] +
dec esi  +
test esi esi +
jl loc_4A346D  +
inc esi  +
xor edi edi +
mov eax [ebp+var_10] +
mov ebx [eax+edi*4] +
test ebx ebx +
jz loc_4A346D  +
mov edx ebx +
mov eax [ebp+var_8] +
call @Typinfo@IsStoredProp$qqrp14System@TObjectp17Typinfo@TPropInfo  +
test al al +
jz loc_4A3469  +
mov ecx ebx +
mov edx [ebp+var_8] +
mov eax [ebp+var_4] +
call sub_4A4284  +
inc edi  +
dec esi  +
jnz loc_4A3444  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4A3490  +
mov edx [ebp+var_C] +
shl edx 2 +
mov eax [ebp+var_10] +
call sub_4B97E0  +
retn   +
jmp unknown_libname_539  +
jmp loc_4A347A  +
mov edx [ebp+var_4] +
mov eax [ebp+var_8] +
mov ecx [eax] +
call dword ptr [ecx+4]  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
mov eax [ebp+arg_0] +
mov eax [eax-4] +
cmp dword ptr [eax+20h] 0 +
jz loc_4A34E3  +
mov eax [ebp+arg_0] +
mov eax [eax-4] +
cmp dword ptr [eax+28h] 0 +
jz loc_4A34E3  +
mov eax [ebp+arg_0] +
mov eax [eax-4] +
mov eax [eax+28h] +
call @System@TObject@ClassType$qqrv  +
mov edx eax +
mov eax [ebp+arg_0] +
mov eax [eax-4] +
mov eax [eax+18h] +
mov eax [eax] +
call @System@TObject@InheritsFrom$qqrp17System@TMetaClasst1  +
test al al +
jnz loc_4A34E7  +
xor eax eax +
pop ebp  +
retn   +
mov al 1 +
pop ebp  +
retn   +
***
push 0  +
xor eax eax +
push ebp  +
push offset loc_4A3534  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
lea eax [ebp+var_4] +
mov edx [ebp+arg_0] +
mov edx [edx-8] +
add edx 1Ah +
call unknown_libname_547  +
mov edx [ebp+var_4] +
mov eax [ebp+arg_0] +
mov eax [eax-4] +
call @Classes@TWriter@WritePropName$qqrx17System@AnsiString  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4A353B  +
lea eax [ebp+var_4] +
call unknown_libname_540  +
retn   +
jmp unknown_libname_539  +
jmp loc_4A352B  +
pop ecx  +
pop ebp  +
retn   +
***
push 0  +
push ebx  +
push esi  +
push edi  +
mov esi eax +
xor eax eax +
push ebp  +
push offset loc_4A35C6  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov eax [ebp+arg_0] +
mov eax [eax-0Ch] +
call unknown_libname_445  +
mov eax [eax+1] +
mov edi [eax] +
mov eax [ebp+arg_0] +
mov eax [eax-4] +
mov dl 0Bh +
call unknown_libname_435  +
xor ebx ebx +
mov eax ebx +
cmp eax 1Fh +
ja loc_4A3581  +
bt esi eax +
jnb loc_4A359D  +
lea ecx [ebp+var_4] +
mov edx ebx +
mov eax edi +
call sub_4A5E80  +
mov edx [ebp+var_4] +
mov eax [ebp+arg_0] +
mov eax [eax-4] +
call sub_4A47F8  +
inc ebx  +
cmp ebx 20h +
jnz loc_4A3577  +
mov eax [ebp+arg_0] +
mov eax [eax-4] +
xor edx edx +
call sub_4A47F8  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4A35CD  +
lea eax [ebp+var_4] +
call unknown_libname_540  +
retn   +
jmp unknown_libname_539  +
jmp loc_4A35BD  +
pop edi  +
pop esi  +
pop ebx  +
pop ecx  +
pop ebp  +
retn   +
***
push 0  +
push 0  +
push ebx  +
mov ebx eax +
xor eax eax +
push ebp  +
push offset loc_4A36D6  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov eax [ebp+arg_0] +
push eax  +
call @Classes@_17113  +
pop ecx  +
lea eax [ebp+var_4] +
mov edx [ebp+arg_0] +
mov edx [edx-4] +
mov edx [edx+2Ch] +
call unknown_libname_543  +
xor eax eax +
push ebp  +
push offset loc_4A36B9  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov eax [ebp+arg_0] +
mov eax [eax-4] +
add eax 2Ch +
call unknown_libname_540  +
mov eax [ebp+arg_0] +
mov eax [eax-4] +
mov edx ebx +
call sub_4A2B74  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4A36C0  +
mov eax [ebp+arg_0] +
mov eax [eax-4] +
add eax 2Ch +
mov edx [ebp+var_4] +
call unknown_libname_542  +
retn   +
jmp unknown_libname_539  +
jmp loc_4A36A7  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4A36DD  +
lea eax [ebp+var_4] +
call unknown_libname_540  +
retn   +
jmp unknown_libname_539  +
jmp loc_4A36CD  +
pop ebx  +
pop ecx  +
pop ebp  +
retn   +
***
mov eax [ebp+arg_0] +
add esp 0FFFFFFF8h +
mov eax [ebp+arg_0] +
mov eax [eax+8] +
push eax  +
call sub_4A34A4  +
pop ecx  +
test al al +
jz loc_4A3852  +
mov eax [ebp+arg_0] +
mov eax [eax+8] +
mov edx [eax-8] +
mov eax [ebp+arg_0] +
mov eax [eax+8] +
mov eax [eax-4] +
mov eax [eax+20h] +
call sub_4A6648  +
mov eax [ebp+arg_0] +
fld  tbyte ptr [eax-10h] +
fcompp st(1) st +
fnstsw  ax +
sahf   +
setz al  +
pop ebp  +
retn   +
mov eax [ebp+arg_0] +
fld  tbyte ptr [eax-10h] +
fcomp  ds:flt_4A3868 +
fnstsw  ax +
sahf   +
setz al  +
pop ebp  +
retn   +
***
add esp 0FFFFFFF0h +
mov eax [ebp+arg_0] +
mov edx [eax-8] +
mov eax [ebp+arg_0] +
mov eax [eax-10h] +
call sub_4A6648  +
fstp  [ebp+var_10] +
wait   +
push ebp  +
call sub_4A3814  +
pop ecx  +
test al al +
jnz loc_4A38B2  +
mov eax [ebp+arg_0] +
push eax  +
call @Classes@_17113  +
pop ecx  +
mov ax word ptr [ebp+var_10+8] +
push eax  +
push dword ptr [ebp+var_10+4]  +
push dword ptr [ebp+var_10]  +
mov eax [ebp+arg_0] +
mov eax [eax-4] +
call unknown_libname_431  +
mov esp ebp +
pop ebp  +
retn   +
***
mov eax [ebp+arg_0] +
add esp 0FFFFFFF8h +
mov eax [ebp+arg_0] +
mov edx [eax-8] +
mov eax [ebp+arg_0] +
mov eax [eax-10h] +
call @Typinfo@GetInt64Prop$qqrp14System@TObjectp17Typinfo@TPropInfo  +
mov [ebp+var_8] eax +
mov [ebp+var_4] edx +
push ebp  +
call sub_4A38B8  +
pop ecx  +
test al al +
jnz loc_4A394B  +
mov eax [ebp+arg_0] +
push eax  +
call @Classes@_17113  +
pop ecx  +
push [ebp+var_4]  +
push [ebp+var_8]  +
mov eax [ebp+arg_0] +
mov eax [eax-4] +
call @Classes@TWriter@WriteInteger$qqrj  +
pop ecx  +
pop ecx  +
pop ebp  +
retn   +
***
push 0  +
push 0  +
xor eax eax +
push ebp  +
push offset loc_4A3A38  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
lea ecx [ebp+var_4] +
mov eax [ebp+arg_0] +
mov edx [eax-8] +
mov eax [ebp+arg_0] +
mov eax [eax-10h] +
call sub_4A648C  +
push ebp  +
call sub_4A3950  +
pop ecx  +
test al al +
jnz loc_4A3A22  +
mov eax [ebp+arg_0] +
push eax  +
call @Classes@_17113  +
pop ecx  +
mov eax [ebp+arg_0] +
mov eax [eax-4] +
mov edx [ebp+var_4] +
call sub_4A492C  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4A3A3F  +
lea eax [ebp+var_4] +
call unknown_libname_552  +
retn   +
jmp unknown_libname_539  +
jmp loc_4A3A2F  +
pop ecx  +
pop ebp  +
retn   +
***
mov cl 1 +
test eax eax +
jz loc_4A3A55  +
cmp edx eax +
jz loc_4A3A57  +
mov eax [eax+4] +
test eax eax +
jnz loc_4A3A4A  +
xor ecx ecx +
mov eax ecx +
retn   +
***
push 0  +
push ebx  +
push esi  +
push edi  +
mov esi edx +
mov ebx eax +
xor eax eax +
push ebp  +
push offset loc_4A3B4B  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov eax [ebp+arg_0] +
mov eax [eax-4] +
mov eax [eax+1Ch] +
cmp eax [ebx+4] +
jnz loc_4A3A93  +
mov eax esi +
mov edx [ebx+8] +
call unknown_libname_542  +
jmp loc_4A3B35  +
mov edx [ebp+arg_0] +
cmp eax ebx +
jnz loc_4A3AAB  +
mov eax esi +
mov edx offset _str_Owner_0.Text +
call unknown_libname_542  +
jmp loc_4A3B35  +
mov edi [ebx+4] +
test edi edi +
jz loc_4A3B17  +
cmp dword ptr [edi+8] 0 +
jz loc_4A3B17  +
cmp dword ptr [ebx+8] 0 +
jz loc_4A3B17  +
mov eax [ebp+arg_0] +
mov eax [eax-4] +
mov edx [eax+1Ch] +
mov eax edi +
call @Proxies@_16399  +
test al al +
jz loc_4A3AFB  +
mov eax [ebp+arg_0] +
push eax  +
lea edx [ebp+var_4] +
mov eax [ebx+4] +
call sub_4A3A5C  +
pop ecx  +
push [ebp+var_4]  +
push offset _str___3.Text  +
push dword ptr [ebx+8]  +
mov eax esi +
mov edx 3 +
call sub_4BB6D0  +
jmp loc_4A3B35  +
mov eax [ebx+4] +
push dword ptr [eax+8]  +
push offset _str___3.Text  +
push dword ptr [ebx+8]  +
mov eax esi +
mov edx 3 +
call sub_4BB6D0  +
jmp loc_4A3B35  +
cmp dword ptr [ebx+8] 0 +
jz loc_4A3B2E  +
mov eax esi +
mov ecx offset _str__Owner.Text +
mov edx [ebx+8] +
call @System@@LStrCat3$qqrv  +
jmp loc_4A3B35  +
mov eax esi +
call unknown_libname_540  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4A3B52  +
lea eax [ebp+var_4] +
call unknown_libname_540  +
retn   +
jmp unknown_libname_539  +
jmp loc_4A3B42  +
pop edi  +
pop esi  +
pop ebx  +
pop ecx  +
pop ebp  +
retn   +
***
push ebx  +
push esi  +
mov esi edx +
mov ebx eax +
test ebx ebx +
jz loc_4A3BC0  +
mov eax [ebp+arg_0] +
mov eax [eax-4] +
mov eax [eax+28h] +
cmp eax [ebx+4] +
jnz loc_4A3BC0  +
test esi esi +
jz loc_4A3BC0  +
mov eax [ebp+arg_0] +
mov eax [eax-4] +
mov eax [eax+18h] +
cmp eax [esi+4] +
jnz loc_4A3BC0  +
mov edx [esi+8] +
mov eax [ebx+8] +
call unknown_libname_459  +
test al al +
jnz loc_4A3BC4  +
xor eax eax +
jmp loc_4A3BC6  +
mov al 1 +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
push ebx  +
xor ebx ebx +
mov eax [ebp+arg_0] +
mov eax [eax+8] +
push eax  +
call sub_4A34A4  +
pop ecx  +
test al al +
jz loc_4A3C1E  +
mov eax [ebp+arg_0] +
mov eax [eax+8] +
mov edx [eax-8] +
mov eax [ebp+arg_0] +
mov eax [eax+8] +
mov eax [eax-4] +
mov eax [eax+20h] +
call @Typinfo@GetOrdProp$qqrp14System@TObjectp17Typinfo@TPropInfo  +
mov ebx eax +
mov eax [ebp+arg_0] +
mov eax [eax+8] +
push eax  +
mov eax [ebp+arg_0] +
mov edx [eax-4] +
mov eax ebx +
call sub_4A3B84  +
pop ecx  +
test al al +
jz loc_4A3C1E  +
mov eax [ebp+arg_0] +
mov ebx [eax-4] +
mov eax [ebp+arg_0] +
cmp ebx [eax-4] +
setz al  +
pop ebx  +
pop ebp  +
retn   +
***
xor ecx ecx +
push ecx  +
push ecx  +
push ecx  +
push ecx  +
push ecx  +
xor eax eax +
push ebp  +
push offset loc_4A3E44  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov eax [ebp+arg_0] +
mov edx [eax-8] +
mov eax [ebp+arg_0] +
mov eax [eax-10h] +
call @Typinfo@GetOrdProp$qqrp14System@TObjectp17Typinfo@TPropInfo  +
mov [ebp+var_4] eax +
cmp [ebp+var_4] 0 +
jnz loc_4A3C85  +
push ebp  +
call sub_4A3BCC  +
pop ecx  +
test al al +
jnz loc_4A3C85  +
mov eax [ebp+arg_0] +
push eax  +
call @Classes@_17113  +
pop ecx  +
mov eax [ebp+arg_0] +
mov eax [eax-4] +
mov dl 0Dh +
call unknown_libname_435  +
jmp loc_4A3E29  +
mov eax [ebp+var_4] +
mov edx ds:off_49A6E8 +
call @System@@IsClass$qqrp14System@TObjectp17System@TMetaClass  +
test al al +
jz loc_4A3E29  +
mov eax [ebp+var_4] +
mov edx ds:off_49B454 +
call @System@@IsClass$qqrp14System@TObjectp17System@TMetaClass  +
test al al +
jz loc_4A3CFC  +
mov eax [ebp+var_4] +
test byte ptr [eax+24h] 4 +
jnz loc_4A3CFC  +
push ebp  +
call sub_4A3BCC  +
pop ecx  +
test al al +
jnz loc_4A3E29  +
mov eax [ebp+arg_0] +
push eax  +
lea edx [ebp+var_10] +
mov eax [ebp+var_4] +
call sub_4A3A5C  +
pop ecx  +
cmp [ebp+var_10] 0 +
jz loc_4A3E29  +
mov eax [ebp+arg_0] +
push eax  +
call @Classes@_17113  +
pop ecx  +
mov eax [ebp+arg_0] +
mov eax [eax-4] +
mov edx [ebp+var_10] +
call @Classes@TWriter@WriteIdent$qqrx17System@AnsiString  +
jmp loc_4A3E29  +
mov eax [ebp+arg_0] +
mov eax [eax-4] +
mov eax [eax+20h] +
mov [ebp+var_8] eax +
lea eax [ebp+var_C] +
mov edx [ebp+arg_0] +
mov edx [edx-4] +
mov edx [edx+2Ch] +
call unknown_libname_543  +
xor eax eax +
push ebp  +
push offset loc_4A3DC0  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov eax [ebp+arg_0] +
mov eax [eax-4] +
push dword ptr [eax+2Ch]  +
lea eax [ebp+var_14] +
mov edx [ebp+arg_0] +
mov edx [edx-8] +
add edx 1Ah +
call unknown_libname_547  +
push [ebp+var_14]  +
push offset _str___4.Text  +
mov eax [ebp+arg_0] +
mov eax [eax-4] +
add eax 2Ch +
mov edx 3 +
call sub_4BB6D0  +
mov eax [ebp+arg_0] +
push eax  +
call sub_4A34A4  +
pop ecx  +
test al al +
jz loc_4A3D87  +
mov eax [ebp+arg_0] +
mov edx [eax-8] +
mov eax [ebp+arg_0] +
mov eax [eax-4] +
mov eax [eax+20h] +
call @Typinfo@GetOrdProp$qqrp14System@TObjectp17Typinfo@TPropInfo  +
mov edx [ebp+arg_0] +
mov edx [edx-4] +
mov [edx+20h] eax +
mov eax [ebp+arg_0] +
mov eax [eax-4] +
mov edx [ebp+var_4] +
call @Classes@TWriter@WriteProperties$qqrp19Classes@TPersistent  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4A3DC7  +
mov eax [ebp+arg_0] +
mov eax [eax-4] +
mov edx [ebp+var_8] +
mov [eax+20h] edx +
mov eax [ebp+arg_0] +
mov eax [eax-4] +
add eax 2Ch +
mov edx [ebp+var_C] +
call unknown_libname_542  +
retn   +
jmp unknown_libname_539  +
jmp loc_4A3DA2  +
mov eax [ebp-4] +
mov edx ds:off_49A8F0 +
call @System@@IsClass$qqrp14System@TObjectp17System@TMetaClass  +
test al al +
jz loc_4A3E29  +
mov eax [ebp+8] +
push eax  +
call sub_4A34A4  +
pop ecx  +
test al al +
jz loc_4A3E1C  +
mov eax [ebp+8] +
mov eax [eax-4] +
mov eax [eax+28h] +
push eax  +
mov eax [ebp+8] +
mov edx [eax-8] +
mov eax [ebp+8] +
mov eax [eax-4] +
mov eax [eax+20h] +
call @Typinfo@GetOrdProp$qqrp14System@TObjectp17Typinfo@TPropInfo  +
mov edx eax +
mov eax [ebp+8] +
mov eax [eax-4] +
mov ecx [eax+1Ch] +
mov eax [ebp-4] +
call sub_49CAA4  +
test al al +
jnz loc_4A3E29  +
mov eax [ebp+8] +
push eax  +
mov eax [ebp-4] +
call @Classes@_16921  +
pop ecx  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4A3E4B  +
lea eax [ebp+var_14] +
mov edx 3 +
call unknown_libname_541  +
retn   +
jmp unknown_libname_539  +
jmp loc_4A3E36  +
mov esp ebp +
pop ebp  +
retn   +
***
push 0  +
push 0  +
push ebx  +
xor eax eax +
push ebp  +
push offset loc_4A3F10  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov eax [ebp+arg_0] +
cmp dword ptr [eax-4] 0 +
setz bl  +
mov eax [ebp+arg_0] +
mov eax [eax+8] +
push eax  +
call sub_4A34A4  +
pop ecx  +
test al al +
jz loc_4A3EF2  +
lea ecx [ebp+var_4] +
mov eax [ebp+arg_0] +
mov eax [eax+8] +
mov edx [eax-8] +
mov eax [ebp+arg_0] +
mov eax [eax+8] +
mov eax [eax-4] +
mov eax [eax+20h] +
call sub_4A6AC8  +
mov eax [ebp+arg_0] +
mov eax [eax-4] +
cmp eax [ebp+var_4] +
setz bl  +
test bl bl +
jnz loc_4A3EF2  +
lea eax [ebp+var_8] +
call unknown_libname_560  +
mov ecx eax +
mov edx offset dword_4A3F20 +
mov eax [ebp+var_4] +
call @Sysutils@Supports$qqrx35System@_DelphiInterface$t8IUnknown_rx5_GUIDpv  +
test al al +
jz loc_4A3EF2  +
mov eax [ebp+arg_0] +
mov eax [eax+8] +
push eax  +
mov eax [ebp+var_8] +
mov edx [eax] +
call dword ptr [edx+0Ch]  +
mov edx [ebp+arg_0] +
mov edx [edx-8] +
call sub_4A3B84  +
pop ecx  +
mov ebx eax +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4A3F17  +
lea eax [ebp+var_8] +
call unknown_libname_560  +
lea eax [ebp+var_4] +
call unknown_libname_560  +
retn   +
jmp unknown_libname_539  +
jmp loc_4A3EFF  +
mov eax ebx +
pop ebx  +
pop ecx  +
pop ecx  +
pop ebp  +
retn   +
***
xor ecx ecx +
push ecx  +
push ecx  +
push ecx  +
push ecx  +
push ecx  +
xor eax eax +
push ebp  +
push offset loc_4A4033  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
lea ecx [ebp+var_4] +
mov eax [ebp+arg_0] +
mov edx [eax-8] +
mov eax [ebp+arg_0] +
mov eax [eax-10h] +
call sub_4A6AC8  +
cmp [ebp+var_4] 0 +
jz loc_4A3F7D  +
lea eax [ebp+var_C] +
call unknown_libname_560  +
mov ecx eax +
mov edx offset dword_4A4040 +
mov eax [ebp+var_4] +
call @Sysutils@Supports$qqrx35System@_DelphiInterface$t8IUnknown_rx5_GUIDpv  +
test al al +
jnz loc_4A3FC1  +
mov eax [ebp+arg_0] +
push eax  +
call sub_4A34A4  +
pop ecx  +
test al al +
jz loc_4A4005  +
lea ecx [ebp+var_14] +
mov eax [ebp+arg_0] +
mov edx [eax-8] +
mov eax [ebp+arg_0] +
mov eax [eax-4] +
mov eax [eax+20h] +
call sub_4A6AC8  +
cmp [ebp+var_14] 0 +
jz loc_4A4005  +
mov eax [ebp+arg_0] +
push eax  +
call @Classes@_17113  +
pop ecx  +
mov eax [ebp+arg_0] +
mov eax [eax-4] +
mov dl 0Dh +
call unknown_libname_435  +
jmp loc_4A4005  +
mov eax [ebp+var_C] +
mov edx [eax] +
call dword ptr [edx+0Ch]  +
mov [ebp+var_8] eax +
push ebp  +
call sub_4A3E5C  +
pop ecx  +
test al al +
jnz loc_4A4005  +
mov eax [ebp+arg_0] +
push eax  +
lea edx [ebp+var_10] +
mov eax [ebp+var_8] +
call sub_4A3A5C  +
pop ecx  +
cmp [ebp+var_10] 0 +
jz loc_4A4005  +
mov eax [ebp+arg_0] +
push eax  +
call @Classes@_17113  +
pop ecx  +
mov eax [ebp+arg_0] +
mov eax [eax-4] +
mov edx [ebp+var_10] +
call @Classes@TWriter@WriteIdent$qqrx17System@AnsiString  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4A403A  +
lea eax [ebp+var_14] +
call unknown_libname_560  +
lea eax [ebp+var_10] +
call unknown_libname_540  +
lea eax [ebp+var_C] +
call unknown_libname_560  +
lea eax [ebp+var_4] +
call unknown_libname_560  +
retn   +
jmp unknown_libname_539  +
jmp loc_4A4012  +
mov esp ebp +
pop ebp  +
retn   +
***
add esp 0FFFFFEF8h +
push ebx  +
push esi  +
xor ebx ebx +
mov eax [ebp+arg_0] +
mov eax [eax+8] +
push eax  +
call sub_4A34A4  +
pop ecx  +
test al al +
jz loc_4A408E  +
lea ecx [ebp+var_8] +
mov eax [ebp+arg_0] +
mov eax [eax+8] +
mov edx [eax-8] +
mov eax [ebp+arg_0] +
mov eax [eax+8] +
mov eax [eax-4] +
mov eax [eax+20h] +
call @Typinfo@GetMethodProp$qqrp14System@TObjectp17Typinfo@TPropInfo  +
mov ebx [ebp+var_8] +
mov eax [ebp+arg_0] +
cmp ebx [eax-8] +
jz loc_4A40CB  +
mov eax [ebp+arg_0] +
mov esi [eax-8] +
test esi esi +
jz loc_4A40C7  +
lea ecx [ebp+var_108] +
mov eax [ebp+arg_0] +
mov edx esi +
mov eax [ebp+arg_0] +
mov eax [eax+8] +
mov eax [eax-4] +
mov eax [eax+1Ch] +
mov eax [eax] +
call @System@TObject@MethodName$qqrp17System@TMetaClasspv  +
cmp byte ptr [ebp+var_108] 0 +
jz loc_4A40CB  +
xor eax eax +
jmp loc_4A40CD  +
mov al 1 +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
add esp 0FFFFFEF4h +
push ebx  +
xor eax eax +
mov [ebp+var_C] eax +
xor eax eax +
push ebp  +
push offset loc_4A417A  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
lea ecx [ebp+var_8] +
mov eax [ebp+arg_0] +
mov edx [eax-8] +
mov eax [ebp+arg_0] +
mov eax [eax-10h] +
call @Typinfo@GetMethodProp$qqrp14System@TObjectp17Typinfo@TPropInfo  +
push ebp  +
call sub_4A4050  +
pop ecx  +
test al al +
jnz loc_4A4164  +
mov eax [ebp+arg_0] +
push eax  +
call @Classes@_17113  +
pop ecx  +
mov ebx [ebp+var_8] +
test ebx ebx +
jnz loc_4A4130  +
mov eax [ebp+arg_0] +
mov eax [eax-4] +
mov dl 0Dh +
call unknown_libname_435  +
jmp loc_4A4164  +
lea ecx [ebp+var_10C] +
mov eax [ebp+arg_0] +
mov eax [eax-4] +
mov eax [eax+1Ch] +
mov eax [eax] +
mov edx ebx +
call @System@TObject@MethodName$qqrp17System@TMetaClasspv  +
lea edx [ebp+var_10C] +
lea eax [ebp+var_C] +
call unknown_libname_547  +
mov edx [ebp+var_C] +
mov eax [ebp+arg_0] +
mov eax [eax-4] +
call @Classes@TWriter@WriteIdent$qqrx17System@AnsiString  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4A4181  +
lea eax [ebp+var_C] +
call unknown_libname_540  +
retn   +
jmp unknown_libname_539  +
jmp loc_4A4171  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
xor ecx ecx +
push ecx  +
push ecx  +
push ecx  +
push ecx  +
push ebx  +
xor eax eax +
push ebp  +
push offset loc_4A4203  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov eax [ebp+arg_0] +
mov eax [eax+8] +
push eax  +
call sub_4A34A4  +
pop ecx  +
test al al +
jz loc_4A41E0  +
lea ecx [ebp+var_10] +
mov eax [ebp+arg_0] +
mov eax [eax+8] +
mov edx [eax-8] +
mov eax [ebp+arg_0] +
mov eax [eax+8] +
mov eax [eax-4] +
mov eax [eax+20h] +
call @Typinfo@GetVariantProp$qqrp14System@TObjectp17Typinfo@TPropInfo  +
lea edx [ebp+var_10] +
mov eax [ebp+arg_0] +
add eax 0FFFFFFF0h +
call @Variants@VarSameValue$qqrrx14System@Variantt1  +
mov ebx eax +
jmp loc_4A41ED  +
mov eax [ebp+arg_0] +
add eax 0FFFFFFF0h +
call sub_4B6A40  +
mov ebx eax +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4A420A  +
lea eax [ebp+var_10] +
call sub_4BC290  +
retn   +
jmp unknown_libname_539  +
jmp loc_4A41FA  +
mov eax ebx +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
xor ecx ecx +
push ecx  +
push ecx  +
push ecx  +
push ecx  +
xor eax eax +
push ebp  +
push offset loc_4A4278  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
lea ecx [ebp+var_10] +
mov eax [ebp+arg_0] +
mov edx [eax-8] +
mov eax [ebp+arg_0] +
mov eax [eax-10h] +
call @Typinfo@GetVariantProp$qqrp14System@TObjectp17Typinfo@TPropInfo  +
push ebp  +
call @Classes@_16935  +
pop ecx  +
test al al +
jnz loc_4A4262  +
mov eax [ebp+arg_0] +
push eax  +
call @Classes@_17113  +
pop ecx  +
lea edx [ebp+var_10] +
mov eax [ebp+arg_0] +
mov eax [eax-4] +
call sub_4A439C  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4A427F  +
lea eax [ebp+var_10] +
call sub_4BC290  +
retn   +
jmp unknown_libname_539  +
jmp loc_4A426F  +
mov esp ebp +
pop ebp  +
retn   +
***
add esp 0FFFFFFF0h +
mov [ebp+var_8] ecx +
mov [ebp+var_10] edx +
mov [ebp+var_4] eax +
mov eax [ebp+var_8] +
cmp dword ptr [eax+4] 0 +
jz loc_4A4396  +
mov eax [ebp+var_8] +
cmp dword ptr [eax+8] 0 +
jnz loc_4A42EC  +
mov eax [ebp+var_8] +
mov eax [eax] +
mov eax [eax] +
cmp byte ptr [eax] 7 +
jnz loc_4A4396  +
mov edx [ebp+var_8] +
mov eax [ebp+var_10] +
call @Typinfo@GetOrdProp$qqrp14System@TObjectp17Typinfo@TPropInfo  +
mov edx ds:off_49B454 +
call @System@@IsClass$qqrp14System@TObjectp17System@TMetaClass  +
test al al +
jz loc_4A4396  +
mov edx [ebp+var_8] +
mov eax [ebp+var_10] +
call @Typinfo@GetOrdProp$qqrp14System@TObjectp17Typinfo@TPropInfo  +
test byte ptr [eax+24h] 4 +
jz loc_4A4396  +
mov eax [ebp+var_8] +
mov eax [eax] +
mov eax [eax] +
mov [ebp+var_C] eax +
mov eax [ebp+var_C] +
movzx eax byte ptr [eax] +
cmp eax 10h +
ja loc_4A4396  +
jmp ds:off_4A430C[eax*4]  +
push ebp  +
call @Classes@_17117  +
pop ecx  +
jmp loc_4A4396  +
push ebp  +
call sub_4A386C  +
pop ecx  +
jmp loc_4A4396  +
push ebp  +
call @Classes@_17120  +
pop ecx  +
jmp loc_4A4396  +
push ebp  +
call @Classes@_17123  +
pop ecx  +
jmp loc_4A4396  +
push ebp  +
call sub_4A40D4  +
pop ecx  +
jmp loc_4A4396  +
push ebp  +
call @Classes@_17126  +
pop ecx  +
jmp loc_4A4396  +
push ebp  +
call sub_4A3908  +
pop ecx  +
jmp loc_4A4396  +
push ebp  +
call sub_4A3F30  +
pop ecx  +
mov esp ebp +
pop ebp  +
retn   +
***
add esp 0FFFFFEC4h +
push ebx  +
push esi  +
push edi  +
xor ecx ecx +
mov [ebp+var_3C] ecx +
mov [ebp+var_38] ecx +
mov [ebp+var_34] ecx +
mov [ebp+var_30] ecx +
mov [ebp+var_2C] ecx +
mov [ebp+var_1C] ecx +
mov ebx edx +
mov [ebp+var_4] eax +
xor eax eax +
push ebp  +
push offset loc_4A4775  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov eax ebx +
call sub_4B6DFC  +
test al al +
jz loc_4A43F1  +
mov ecx off_4EA8B4 +
mov dl 1 +
mov eax ds:off_49A2A0 +
call @Sysutils@Exception@$bctr$qqrp20System@TResStringRec  +
call @System@@RaiseExcept$qqrv  +
mov eax ebx +
call sub_4B6A2C  +
and ax 0FFFh +
movzx eax ax +
cmp eax 7 +
jg loc_4A4436  +
jz loc_4A4524  +
cmp eax 6 +
ja loc_4A4588  +
jmp ds:off_4A441A[eax*4]  +
cmp eax 10h +
jge loc_4A444E  +
sub eax 8 +
jz loc_4A4489  +
sub eax 3 +
jz loc_4A453F  +
jmp loc_4A4588  +
add eax 0FFFFFFF0h +
sub eax 3 +
jb loc_4A44BD  +
sub eax 2 +
jb loc_4A4568  +
sub eax 0EBh +
jz loc_4A44A3  +
jmp loc_4A4588  +
mov dl 0Dh +
mov eax [ebp+var_4] +
call unknown_libname_435  +
jmp loc_4A473A  +
xor edx edx +
mov eax [ebp+var_4] +
call unknown_libname_435  +
jmp loc_4A473A  +
lea eax [ebp+var_2C] +
mov edx ebx +
call sub_4BC200  +
mov edx [ebp+var_2C] +
mov eax [ebp+var_4] +
call sub_4A492C  +
jmp loc_4A473A  +
lea eax [ebp+var_30] +
mov edx ebx +
call sub_4BC1F8  +
mov edx [ebp+var_30] +
mov eax [ebp+var_4] +
call sub_4A48D8  +
jmp loc_4A473A  +
mov eax ebx +
call sub_4BC1D0  +
mov edx eax +
mov eax [ebp+var_4] +
call @TWriter@WriteInteger$qqri  +
jmp loc_4A473A  +
mov eax ebx +
call sub_4BC1E8  +
add esp 0FFFFFFFCh +
fstp  [esp+158h+var_158] +
wait   +
mov eax [ebp+var_4] +
call unknown_libname_432  +
jmp loc_4A473A  +
mov eax ebx +
call sub_4BC1E8  +
add esp 0FFFFFFF4h +
fstp  tbyte ptr [esp] +
wait   +
mov eax [ebp+var_4] +
call unknown_libname_431  +
jmp loc_4A473A  +
mov eax ebx +
call sub_4BC1F0  +
add esp 0FFFFFFF8h +
fistp  qword ptr [esp] +
wait   +
mov eax [ebp+var_4] +
call @Classes@TWriter@WriteCurrency$qqrx15System@Currency  +
jmp loc_4A473A  +
mov eax ebx +
call sub_4BC1E8  +
add esp 0FFFFFFF8h +
fstp  qword ptr [esp] +
wait   +
mov eax [ebp+var_4] +
call @Classes@TWriter@WriteDate$qqrx16System@TDateTime  +
jmp loc_4A473A  +
mov eax ebx +
call sub_4BC1E0  +
test al al +
jz loc_4A4559  +
mov dl 9 +
mov eax [ebp+var_4] +
call unknown_libname_435  +
jmp loc_4A473A  +
mov dl 8 +
mov eax [ebp+var_4] +
call unknown_libname_435  +
jmp loc_4A473A  +
mov eax ebx +
call sub_4BC1D8  +
mov [ebp+var_28] eax +
mov [ebp+var_24] edx +
push [ebp+var_24]  +
push [ebp+var_28]  +
mov eax [ebp+var_4] +
call @Classes@TWriter@WriteInteger$qqrj  +
jmp loc_4A473A  +
xor eax eax +
push ebp  +
push offset loc_4A4719  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
lea edx [ebp+var_8] +
mov ax [ebx] +
call sub_4B7BE8  +
test al al +
jz loc_4A45CA  +
lea eax [ebp+var_1C] +
call unknown_libname_560  +
push eax  +
lea eax [ebp+var_34] +
mov edx ebx +
call sub_4BC208  +
mov eax [ebp+var_34] +
mov edx offset dword_4A4784 +
pop ecx  +
call @Sysutils@Supports$qqrx35System@_DelphiInterface$t8IUnknown_rx5_GUIDpv  +
test al al +
jnz loc_4A45E4  +
lea eax [ebp+var_38] +
mov edx ebx +
call sub_4BC1F8  +
mov edx [ebp+var_38] +
mov eax [ebp+var_4] +
call sub_4A48D8  +
jmp loc_4A470F  +
mov dl 1 +
mov eax ds:off_49AEB4 +
call @System@TObject@$bctr$qqrv  +
mov [ebp+var_C] eax +
mov dl 1 +
mov eax ds:off_49AEB4 +
call @System@TObject@$bctr$qqrv  +
mov [ebp+var_10] eax +
xor eax eax +
push ebp  +
push offset loc_4A4708  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
push 400h  +
mov ecx [ebp+var_C] +
mov dl 1 +
mov eax ds:off_49B290 +
call sub_49FBA4  +
mov [ebp+var_14] eax +
xor eax eax +
push ebp  +
push offset loc_4A46AD  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov edx ebx +
mov ecx [ebp+var_10] +
mov eax [ebp+var_1C] +
mov ebx [eax] +
call dword ptr [ebx+10h]  +
mov eax [ebp+var_10] +
call sub_49F1E8  +
mov [ebp+var_18] eax +
lea edx [ebp+var_13C] +
mov eax [ebp+var_8] +
mov eax [eax] +
call @System@TObject@ClassName$qqrp17System@TMetaClass  +
lea edx [ebp+var_13C] +
lea eax [ebp+var_3C] +
call unknown_libname_547  +
mov edx [ebp+var_3C] +
mov eax [ebp+var_14] +
call sub_4A48D8  +
lea edx [ebp+var_18] +
mov ecx 4 +
mov eax [ebp+var_14] +
call @TWriter@Write$qqrpxvi  +
mov eax [ebp+var_10] +
mov edx [eax+4] +
mov ecx [ebp+var_18] +
mov eax [ebp+var_14] +
call @TWriter@Write$qqrpxvi  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4A46B4  +
mov eax [ebp+var_14] +
call @System@TObject@Free$qqrv  +
retn   +
jmp unknown_libname_539  +
jmp loc_4A46A4  +
mov eax [ebp-0Ch] +
call sub_49F1E8  +
mov [ebp-18h] eax +
mov dl 0Ah +
mov eax [ebp-4] +
call unknown_libname_435  +
lea edx [ebp-18h] +
mov ecx 4 +
mov eax [ebp-4] +
call @TWriter@Write$qqrpxvi  +
mov eax [ebp-0Ch] +
mov edx [eax+4] +
mov ecx [ebp-18h] +
mov eax [ebp-4] +
call @TWriter@Write$qqrpxvi  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4A470F  +
mov eax [ebp+var_10] +
call @System@TObject@Free$qqrv  +
mov eax [ebp+var_C] +
call @System@TObject@Free$qqrv  +
retn   +
jmp unknown_libname_539  +
jmp loc_4A46F7  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
jmp loc_4A473A  +
jmp @System@@HandleAnyException$qqrv  +
mov ecx off_4EA8B4 +
mov dl 1 +
mov eax ds:off_49A2A0 +
call @Sysutils@Exception@$bctr$qqrp20System@TResStringRec  +
call @System@@RaiseExcept$qqrv  +
call @@DoneExcept$qqrv  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4A477C  +
lea eax [ebp+var_3C] +
mov edx 2 +
call unknown_libname_541  +
lea eax [ebp+var_34] +
call unknown_libname_560  +
lea eax [ebp+var_30] +
call unknown_libname_540  +
lea eax [ebp+var_2C] +
call unknown_libname_552  +
lea eax [ebp+var_1C] +
call unknown_libname_560  +
retn   +
jmp unknown_libname_539  +
jmp loc_4A4747  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
push 0  +
push ebx  +
push esi  +
mov esi edx +
mov ebx eax +
xor eax eax +
push ebp  +
push offset loc_4A47DA  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
lea eax [ebp+var_4] +
mov ecx esi +
mov edx [ebx+2Ch] +
call @System@@LStrCat3$qqrv  +
mov edx [ebp+var_4] +
mov eax ebx +
call sub_4A47F8  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4A47E1  +
lea eax [ebp+var_4] +
call unknown_libname_540  +
retn   +
jmp unknown_libname_539  +
jmp loc_4A47D1  +
pop esi  +
pop ebx  +
pop ecx  +
pop ebp  +
retn   +
***
mov edx offset dword_4E6A00 +
push ecx  +
mov esi edx +
mov ebx eax +
mov eax esi +
call sub_4BB610  +
mov [esp+4+var_4] eax +
cmp [esp+4+var_4] 0FFh +
jle loc_4A4819  +
mov [esp+4+var_4] 0FFh +
mov edx esp +
mov ecx 1 +
mov eax ebx +
call @TWriter@Write$qqrpxvi  +
mov eax esi +
call unknown_libname_550  +
mov edx eax +
mov ecx [esp+4+var_4] +
mov eax ebx +
call @TWriter@Write$qqrpxvi  +
pop edx  +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
push 0  +
push ebx  +
push esi  +
mov esi edx +
mov ebx eax +
xor eax eax +
push ebp  +
push offset loc_4A491D  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
lea edx [ebp+var_4] +
mov eax esi +
call @System@AnsiToUtf8$qqrx17System@AnsiString  +
mov ecx [ebp+var_4] +
mov edx esi +
mov eax ebx +
call sub_4A4840  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4A4924  +
lea eax [ebp+var_4] +
call unknown_libname_540  +
retn   +
jmp unknown_libname_539  +
jmp loc_4A4914  +
pop esi  +
pop ebx  +
pop ecx  +
pop ebp  +
retn   +
***
push 0  +
mov edx esp +
mov ecx 1 +
call @TWriter@Write$qqrpxvi  +
pop edx  +
retn   +
***
add esp 0FFFFFFF0h +
push ebx  +
push esi  +
push edi  +
call GetCurrentThreadId  +
mov edx off_4EAA64 +
cmp eax [edx] +
jz loc_4A4A35  +
call GetCurrentThreadId  +
mov [ebp+var_10] eax +
mov [ebp+var_C] 0 +
lea eax [ebp+var_10] +
push eax  +
push 0  +
mov ecx off_4EA844 +
mov dl 1 +
mov eax ds:off_49B30C +
call sub_4AC274  +
call @System@@RaiseExcept$qqrv  +
cmp byte_4F19CC 0 +
jz loc_4A4B11  +
push offset stru_4F19D0  +
call EnterCriticalSection  +
xor eax eax +
push ebp  +
push offset loc_4A4B0A  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
cmp dword_4E6A0C 0 +
jz loc_4A4A6E  +
mov eax dword_4E6A0C +
cmp dword ptr [eax+8] 0 +
jg loc_4A4A72  +
xor eax eax +
jmp loc_4A4A74  +
mov al 1 +
mov [ebp+var_1] al +
cmp [ebp+var_1] 0 +
jz loc_4A4AF2  +
jmp loc_4A4AE0  +
xor edx edx +
mov eax dword_4E6A0C +
call @Classes@TList@Get$qqri  +
mov [ebp+var_8] eax +
xor edx edx +
mov eax dword_4E6A0C +
call @Classes@TList@Delete$qqri  +
xor eax eax +
push ebp  +
push offset loc_4A4ABD  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov eax [ebp+var_8] +
mov ebx [eax] +
mov eax [ebx+24h] +
call dword ptr [ebx+20h]  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
jmp loc_4A4AD4  +
jmp @System@@HandleAnyException$qqrv  +
call @System@AcquireExceptionObject$qqrv  +
mov edx [ebp-8] +
mov edx [edx] +
mov [edx+28h] eax +
call @@DoneExcept$qqrv  +
mov eax [ebp+var_8] +
mov eax [eax+4] +
push eax  +
call SetEvent  +
mov eax dword_4E6A0C +
cmp dword ptr [eax+8] 0 +
jg loc_4A4A7F  +
mov byte_4F19CC 0 +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4A4B15  +
push offset stru_4F19D0  +
call LeaveCriticalSection  +
retn   +
jmp unknown_libname_539  +
jmp loc_4A4AFF  +
mov [ebp+var_1] 0 +
mov al [ebp+var_1] +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
push edi  +
test dl dl +
jz loc_4A4B2F  +
add esp 0FFFFFFF0h +
call unknown_libname_535  +
mov esi ecx +
mov ebx edx +
mov edi eax +
mov al ds:byte_4A4B68 +
mov [edi+24h] al +
test esi esi +
jz loc_4A4B4A  +
mov edx edi +
mov eax esi +
call sub_4A4CD8  +
mov eax edi +
test bl bl +
jz loc_4A4B5F  +
call sub_4BABC8  +
pop large dword ptr fs:0  +
add esp 0Ch +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push ecx  +
test byte ptr [eax+1Ch] 8 +
mov esi edx +
mov ebx eax +
mov eax [ebx+4] +
test eax eax +
jz loc_4A4C02  +
cmp eax [esi+4] +
jz loc_4A4C38  +
cmp dword ptr [ebx+14h] 0 +
jnz loc_4A4C17  +
mov dl 1 +
mov eax ds:off_49A5D8 +
call @System@TObject@$bctr$qqrv  +
mov [ebx+14h] eax +
mov edx esi +
mov eax [ebx+14h] +
call unknown_libname_419  +
test eax eax +
jge loc_4A4C38  +
mov edx esi +
mov eax [ebx+14h] +
call @Classes@TList@Add$qqrpv  +
mov edx ebx +
mov eax esi +
call @Classes@TComponent@FreeNotification$qqrp18Classes@TComponent  +
or word ptr [ebx+1Ch] 100h +
pop esi  +
pop ebx  +
retn   +
***
mov esi edx +
mov esi edx +
movzx eax word ptr [eax+18h] +
xchg eax edx +
call @TWriter@WriteInteger$qqri  +
retn   +
***
movzx eax word ptr [eax+1Ah] +
xchg eax edx +
call @TWriter@WriteInteger$qqri  +
retn   +
***
mov esi edx +
mov ebx eax +
cmp dword ptr [ebx+10h] 0 +
jnz loc_4A4C9F  +
mov dl 1 +
mov eax ds:off_49A5D8 +
call @System@TObject@$bctr$qqrv  +
mov [ebx+10h] eax +
mov edx esi +
mov eax [ebx+10h] +
call @Classes@TList@Add$qqrpv  +
mov [esi+4] ebx +
pop esi  +
pop ebx  +
retn   +
***
xor eax eax +
mov [edx+4] eax +
mov eax [ebx+10h] +
call @Classes@TList@Remove$qqrpv  +
mov eax [ebx+10h] +
cmp dword ptr [eax+8] 0 +
jnz loc_4A4CD3  +
call @System@TObject@Free$qqrv  +
xor eax eax +
mov [ebx+10h] eax +
pop ebx  +
retn   +
***
push edi  +
mov ebx edx +
mov edi eax +
mov edx edi +
mov eax ebx +
mov si 0FFF5h +
call @System@@CallDynaInst$qqrv  +
mov eax [ebx+8] +
push eax  +
xor ecx ecx +
mov edx ebx +
mov eax edi +
mov esi [eax] +
call dword ptr [esi+20h]  +
mov edx ebx +
mov eax edi +
call @Classes@TComponent@Insert$qqrp18Classes@TComponent  +
mov dl 1 +
mov eax ebx +
call unknown_libname_577  +
test byte ptr [edi+1Ch] 10h +
jz loc_4A4D1E  +
mov cl 1 +
mov dl 1 +
mov eax ebx +
call sub_4A51A8  +
xor ecx ecx +
mov edx ebx +
mov eax edi +
mov ebx [eax] +
call dword ptr [ebx+10h]  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
mov ebx edx +
mov esi eax +
push 0  +
mov ecx [ebx+8] +
mov edx ebx +
mov eax esi +
mov edi [eax] +
call dword ptr [edi+20h]  +
mov cl 1 +
mov edx ebx +
mov eax esi +
mov edi [eax] +
call dword ptr [edi+10h]  +
xor edx edx +
mov eax ebx +
call unknown_libname_577  +
mov edx ebx +
mov eax esi +
call @Classes@TComponent@Remove$qqrp18Classes@TComponent  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
mov esi eax +
jmp loc_4A4DB1  +
mov eax ebx +
call @TList@Last$qqrv  +
mov edi eax +
test byte ptr [edi+1Dh] 1 +
jnz loc_4A4D94  +
mov ax ds:word_4A4DBC +
and ax [esi+1Ch] +
mov dx ds:word_4A4DBC +
cmp dx ax +
jnz loc_4A4D9F  +
mov edx edi +
mov eax esi +
call @Classes@TComponent@RemoveComponent$qqrp18Classes@TComponent  +
jmp loc_4A4DA8  +
mov edx edi +
mov eax esi +
call @Classes@TComponent@Remove$qqrp18Classes@TComponent  +
mov dl 1 +
mov eax edi +
mov ecx [eax] +
call dword ptr [ecx-4]  +
mov ebx [esi+10h] +
test ebx ebx +
jnz loc_4A4D6F  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
mov ebx eax +
test byte ptr [ebx+1Ch] 8 +
jnz loc_4A4DF5  +
or word ptr [ebx+1Ch] 8 +
mov eax [ebx+10h] +
test eax eax +
jz loc_4A4DF5  +
mov esi [eax+8] +
dec esi  +
test esi esi +
jl loc_4A4DF5  +
inc esi  +
xor edi edi +
mov edx edi +
mov eax [ebx+10h] +
call @Classes@TList@Get$qqri  +
call sub_4A4DC0  +
inc edi  +
dec esi  +
jnz loc_4A4DE2  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov eax [ebx+14h] +
mov esi edx +
mov ebx eax +
mov edx esi +
mov eax ebx +
call @Classes@TComponent@RemoveNotification$qqrp18Classes@TComponent  +
mov edx ebx +
mov eax esi +
call @Classes@TComponent@RemoveNotification$qqrp18Classes@TComponent  +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
push ebp  +
push ecx  +
mov [esp+1+var_1] cl +
mov edi edx +
mov esi eax +
cmp [esp+1+var_1] 1 +
jnz loc_4A4E5B  +
test edi edi +
jz loc_4A4E5B  +
mov edx edi +
mov eax esi +
call @Classes@TComponent@RemoveFreeNotification$qqrp18Classes@TComponent  +
mov eax [esi+10h] +
test eax eax +
jz loc_4A4E90  +
mov ebx [eax+8] +
dec ebx  +
test ebx ebx +
jl loc_4A4E90  +
mov edx ebx +
mov eax [esi+10h] +
call @Classes@TList@Get$qqri  +
mov cl [esp+1+var_1] +
mov edx edi +
mov ebp [eax] +
call dword ptr [ebp+10h]  +
dec ebx  +
mov eax [esi+10h] +
mov eax [eax+8] +
cmp ebx eax +
jl loc_4A4E8C  +
mov ebx eax +
dec ebx  +
test ebx ebx +
jge loc_4A4E6A  +
pop edx  +
pop ebp  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push ecx  +
push ebx  +
push esi  +
push edi  +
mov esi edx +
mov ebx eax +
xor eax eax +
mov [ebp+var_4] eax +
mov eax [esi+20h] +
test eax eax +
jz loc_4A4EB5  +
mov eax [eax+18h] +
mov [ebp+var_4] eax +
push ebx  +
push offset @Classes@TComponent@ReadLeft$qqrp15Classes@TReader  +
push ebx  +
push offset unknown_libname_436  +
mov ax [ebx+18h] +
cmp ax word ptr [ebp+var_4] +
setnz cl  +
mov edx offset _str_Left.Text +
mov eax esi +
mov edi [eax] +
call dword ptr [edi+4]  +
push ebx  +
push offset @Classes@TComponent@ReadTop$qqrp15Classes@TReader  +
push ebx  +
push offset unknown_libname_437  +
mov ax word ptr [ebp+var_4+2] +
cmp ax [ebx+1Ah] +
setnz cl  +
mov edx offset _str_Top.Text +
mov eax esi +
mov ebx [eax] +
call dword ptr [ebx+4]  +
pop edi  +
pop esi  +
pop ebx  +
pop ecx  +
pop ebp  +
retn   +
***
retn   +
***
pop ebp  +
retn 8  +
***
retn   +
***
mov esi edx +
mov ebx eax +
mov eax esi +
mov edx [ebx+8] +
call unknown_libname_542  +
pop esi  +
pop ebx  +
retn   +
***
retn   +
***
or word ptr [ebx+1Ch] 40h +
pop ebx  +
retn   +
***
and word ptr [ebx+1Ch] 0FFBFh +
pop ebx  +
retn   +
***
and word ptr [ebx+1Ch] 0FFFEh +
pop ebx  +
retn   +
***
xchg eax edx +
call @Classes@TReader@ReadData$qqrp18Classes@TComponent  +
retn   +
***
xchg eax edx +
mov ecx [eax] +
call dword ptr [ecx+10h]  +
retn   +
***
add esp 0FFFFFFF4h +
push ebx  +
push esi  +
push edi  +
mov [ebp+var_4] ecx +
mov edi edx +
mov ebx eax +
mov esi [ebp+arg_0] +
test edi edi +
jz loc_4A4FEB  +
mov edx esi +
mov eax [ebp+var_4] +
call unknown_libname_459  +
test al al +
jnz loc_4A4FEB  +
cmp ebx [edi+4] +
jnz loc_4A4FEB  +
mov edx esi +
mov eax ebx +
call sub_4A5028  +
test eax eax +
jz loc_4A4FEB  +
mov [ebp+var_C] esi +
mov [ebp+var_8] 0Bh +
lea eax [ebp+var_C] +
push eax  +
push 0  +
mov ecx off_4EA854 +
mov dl 1 +
mov eax ds:off_49A4C0 +
call sub_4AC274  +
call @System@@RaiseExcept$qqrv  +
test byte ptr [ebx+1Ch] 10h +
jz loc_4A5005  +
cmp dword ptr [ebx+4] 0 +
jz loc_4A5005  +
push esi  +
mov ecx [ebp+var_4] +
mov edx edi +
mov eax [ebx+4] +
mov ebx [eax] +
call dword ptr [ebx+20h]  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 4  +
***
mov eax edx +
mov edx esi +
mov si 0FFF4h +
call @System@@CallDynaInst$qqrv  +
pop esi  +
retn   +
***
push edi  +
push ebp  +
push ecx  +
mov [esp+4+var_4] edx +
mov edi eax +
cmp [esp+4+var_4] 0 +
jz loc_4A506B  +
cmp dword ptr [edi+10h] 0 +
jz loc_4A506B  +
mov eax [edi+10h] +
mov ebx [eax+8] +
dec ebx  +
test ebx ebx +
jl loc_4A506B  +
inc ebx  +
xor ebp ebp +
mov eax [edi+10h] +
mov edx ebp +
call @Classes@TList@Get$qqri  +
mov esi eax +
mov eax [esi+8] +
mov edx [esp+4+var_4] +
call unknown_libname_459  +
test al al +
jnz loc_4A506D  +
inc ebp  +
dec ebx  +
jnz loc_4A504C  +
xor esi esi +
mov eax esi +
pop edx  +
pop ebp  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
add esp 0FFFFFFF8h +
mov esi edx +
mov ebx eax +
mov eax [ebx+8] +
mov edx esi +
call @System@@LStrCmp$qqrv  +
jz loc_4A50FD  +
test esi esi +
jz loc_4A50BF  +
mov eax esi +
call sub_4A8B7C  +
test al al +
jnz loc_4A50BF  +
mov [esp+8+var_8] esi +
mov [esp+8+var_4] 0Bh +
push esp  +
push 0  +
mov ecx off_4EA868 +
mov dl 1 +
mov eax ds:off_49A4C0 +
call sub_4AC274  +
call @System@@RaiseExcept$qqrv  +
mov edi [ebx+4] +
test edi edi +
jz loc_4A50D5  +
push esi  +
mov ecx [ebx+8] +
mov edx ebx +
mov eax edi +
mov edi [eax] +
call dword ptr [edi+20h]  +
jmp loc_4A50E2  +
push esi  +
mov ecx [ebx+8] +
xor edx edx +
mov eax ebx +
mov edi [eax] +
call dword ptr [edi+20h]  +
xor edx edx +
mov eax ebx +
call unknown_libname_577  +
mov edx esi +
mov eax ebx +
call sub_4A5104  +
mov dl 1 +
mov eax ebx +
call unknown_libname_577  +
pop ecx  +
pop edx  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov esi edx +
mov ebx eax +
lea eax [ebx+8] +
mov edx esi +
call unknown_libname_542  +
pop esi  +
pop ebx  +
retn   +
***
mov esi edx +
mov ebx eax +
cmp dword ptr [ebx+10h] 0 +
jnz loc_4A5136  +
mov edx off_4EA884 +
mov ecx esi +
mov eax ds:off_49A5D8 +
call @Classes@TList@Error$qqrp17System@TMetaClassp20System@TResStringReci  +
mov edx esi +
mov eax [ebx+10h] +
call @Classes@TList@Get$qqri  +
pop esi  +
pop ebx  +
retn   +
***
mov edx [eax+10h] +
test edx edx +
jz loc_4A514F  +
mov eax [edx+8] +
retn   +
xor eax eax +
retn   +
***
push edi  +
mov esi edx +
mov ebx eax +
mov eax [ebx+4] +
test eax eax +
jz loc_4A51A1  +
mov eax [eax+10h] +
mov edx ebx +
call unknown_libname_419  +
test eax eax +
jl loc_4A51A1  +
mov edx [ebx+4] +
mov edi [edx+10h] +
mov edx [edi+8] +
test esi esi +
jge loc_4A517F  +
xor esi esi +
cmp edx esi +
jg loc_4A5186  +
mov esi edx +
dec esi  +
cmp eax esi +
jz loc_4A51A1  +
mov edx edi +
xchg eax edx +
call @Classes@TList@Delete$qqri  +
mov eax [ebx+4] +
mov eax [eax+10h] +
mov ecx ebx +
mov edx esi +
call @Classes@TList@Insert$qqripv  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
push ebp  +
push ecx  +
mov [esp+1+var_1] cl +
mov ebx edx +
mov esi eax +
test bl bl +
jz loc_4A51BF  +
or word ptr [esi+1Ch] 10h +
jmp loc_4A51C4  +
and word ptr [esi+1Ch] 0FFEFh +
cmp [esp+1+var_1] 0 +
jz loc_4A51F1  +
mov eax esi +
call @TComponent@GetComponentCount$qqrv  +
mov ebp eax +
dec ebp  +
test ebp ebp +
jl loc_4A51F1  +
inc ebp  +
xor edi edi +
mov edx edi +
mov eax esi +
call @Classes@TComponent@GetComponent$qqri  +
mov cl 1 +
mov edx ebx +
call sub_4A51A8  +
inc edi  +
dec ebp  +
jnz loc_4A51DB  +
pop edx  +
pop ebp  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
add esp 0FFFFFF00h +
mov ebx edx +
mov edi eax +
mov esi [edi+4] +
test esi esi +
jz loc_4A5234  +
mov eax esp +
mov edx [edi+8] +
mov ecx 0FFh +
call @System@@LStrToString$qqrv  +
mov edx esp +
mov eax esi +
call @System@TObject@FieldAddress$qqrrx28System@_SmallString$iuc$255_  +
test eax eax +
jz loc_4A5234  +
test bl bl +
jz loc_4A5230  +
mov [eax] edi +
jmp loc_4A5234  +
xor edx edx +
mov [eax] edx +
add esp 100h +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
mov edi edx +
mov esi eax +
mov edx esi +
mov eax edi +
mov ecx [eax] +
call dword ptr [ecx+38h]  +
mov ebx eax +
test bl bl +
jz loc_4A525F  +
mov edx esi +
mov eax edi +
mov ecx [eax] +
call dword ptr [ecx+40h]  +
mov eax ebx +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
mov edi edx +
mov esi eax +
mov edx esi +
mov eax edi +
mov ecx [eax] +
call dword ptr [ecx+38h]  +
mov ebx eax +
test bl bl +
jz loc_4A5287  +
mov edx esi +
mov eax edi +
mov ecx [eax] +
call dword ptr [ecx+3Ch]  +
mov eax ebx +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
jz loc_4A52A1  +
pop ebp  +
retn 4  +
***
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_8] +
mov esi [ebp+arg_4] +
mov ebx [ebp+arg_0] +
cmp dword ptr [ebx+20h] 0 +
jnz loc_4A52DF  +
mov ecx edi +
mov edx esi +
mov eax ebx +
call @System@TObject@GetInterface$qqrrx5_GUIDpv  +
test al al +
jz loc_4A52D8  +
xor eax eax +
jmp loc_4A52E9  +
mov eax 80004002h +
jmp loc_4A52E9  +
push edi  +
push esi  +
mov eax [ebx+20h] +
push eax  +
mov eax [eax] +
call dword ptr [eax]  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
cmp dword ptr [eax+20h] 0 +
jnz loc_4A5301  +
or eax 0FFFFFFFFh +
jmp loc_4A530A  +
mov eax [eax+20h] +
push eax  +
mov eax [eax] +
call dword ptr [eax+4]  +
pop ebp  +
retn 4  +
***
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
cmp dword ptr [eax+20h] 0 +
jnz loc_4A5321  +
or eax 0FFFFFFFFh +
jmp loc_4A532A  +
mov eax [eax+20h] +
push eax  +
mov eax [eax] +
call dword ptr [eax+8]  +
pop ebp  +
retn 4  +
***
retn   +
***
push edi  +
test dl dl +
jz loc_4A5343  +
add esp 0FFFFFFF0h +
call unknown_libname_535  +
mov esi ecx +
mov ebx edx +
mov edi eax +
xor edx edx +
mov eax edi +
call @System@TObject@$bctr$qqrv  +
mov edx esi +
mov eax edi +
mov ecx [eax] +
call dword ptr [ecx]  +
mov eax edi +
test bl bl +
jz loc_4A536F  +
call sub_4BABC8  +
pop large dword ptr fs:0  +
add esp 0Ch +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
call unknown_libname_536  +
mov ebx edx +
mov esi eax +
mov eax [esi+10h] +
test eax eax +
jz loc_4A5395  +
mov edx esi +
call sub_4A55CC  +
mov edx ebx +
and dl 0FCh +
mov eax esi +
call sub_4BA7FC  +
test bl bl +
jle loc_4A53AC  +
mov eax esi +
call @System@@ClassDestroy$qqrp14System@TObject  +
pop esi  +
pop ebx  +
retn   +
***
jz loc_4A53C3  +
mov ebx eax +
mov edx [eax+10h] +
mov eax [ebx+0Ch] +
call dword ptr [ebx+8]  +
pop ebx  +
retn   +
***
mov esi edx +
mov esi edx +
mov ebx eax +
mov eax [ebx+10h] +
cmp esi eax +
jz loc_4A542C  +
test eax eax +
jz loc_4A541C  +
mov edx ebx +
call sub_4A55CC  +
mov [ebx+10h] esi +
test esi esi +
jz loc_4A542C  +
mov edx ebx +
mov eax esi +
call sub_4A55C0  +
pop esi  +
pop ebx  +
retn   +
***
retn   +
***
pop ebp  +
retn 8  +
***
mov eax [eax+10h] +
mov edx [eax] +
call dword ptr [edx+44h]  +
retn   +
***
test dl dl +
push edi  +
retn   +
***
push edi  +
mov ebx ecx +
mov esi edx +
mov edi eax +
mov ecx ebx +
mov edx esi +
mov eax edi +
call sub_4A4E3C  +
cmp bl 1 +
jnz loc_4A550F  +
cmp esi [edi+30h] +
jnz loc_4A550F  +
xor eax eax +
mov [edi+30h] eax +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
jz loc_4A552E  +
mov ebx eax +
mov edx eax +
mov eax [ebx+44h] +
call dword ptr [ebx+40h]  +
mov al 1 +
pop ebx  +
retn   +
xor eax eax +
pop ebx  +
retn   +
***
jz loc_4A554A  +
mov ebx eax +
mov edx eax +
mov eax [ebx+4Ch] +
call dword ptr [ebx+48h]  +
mov al 1 +
pop ebx  +
retn   +
xor eax eax +
pop ebx  +
retn   +
***
push ebx  +
push esi  +
push edi  +
mov ebx eax +
mov eax [ebp+arg_0] +
cmp eax [ebx+40h] +
jnz loc_4A5568  +
mov eax [ebp+arg_4] +
cmp eax [ebx+44h] +
jz loc_4A55A2  +
mov eax [ebx+50h] +
mov esi [eax+8] +
dec esi  +
test esi esi +
jl loc_4A558F  +
inc esi  +
xor edi edi +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
mov edx edi +
mov eax [ebx+50h] +
call @Classes@TList@Get$qqri  +
mov edx [eax] +
call dword ptr [edx+10h]  +
inc edi  +
dec esi  +
jnz loc_4A5576  +
mov eax [ebp+arg_0] +
mov [ebx+40h] eax +
mov eax [ebp+arg_4] +
mov [ebx+44h] eax +
mov eax ebx +
mov edx [eax] +
call dword ptr [edx+30h]  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
jz loc_4A55BE  +
mov [edx+10h] eax +
push edi  +
push ebp  +
mov ebp edx +
mov edi eax +
mov eax [edi+50h] +
mov esi [eax+8] +
dec esi  +
test esi esi +
jl loc_4A5605  +
inc esi  +
xor ebx ebx +
mov eax [edi+50h] +
mov edx ebx +
call @Classes@TList@Get$qqri  +
cmp ebp eax +
jnz loc_4A5601  +
xor eax eax +
mov [ebp+10h] eax +
mov eax [edi+50h] +
mov edx ebx +
call @Classes@TList@Delete$qqri  +
jmp loc_4A5605  +
inc ebx  +
dec esi  +
jnz loc_4A55E2  +
pop ebp  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push ebx  +
call unknown_libname_536  +
push ebx  +
push esi  +
push edi  +
mov edx [ebp+arg_4] +
mov eax [ebp+arg_0] +
xor ecx ecx +
push ebp  +
push offset loc_4A56DB  +
push dword ptr fs:[ecx]  +
mov fs:[ecx] esp +
test edx edx +
jnz loc_4A56B9  +
mov ebx 80030009h +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
jmp loc_4A56EA  +
mov eax [eax+0Ch] +
mov ecx [ebp+arg_8] +
mov ebx [eax] +
call dword ptr [ebx+8]  +
cmp [ebp+arg_C] 0 +
jz loc_4A56CF  +
mov edx [ebp+arg_C] +
mov [edx] eax +
xor ebx ebx +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
jmp loc_4A56EA  +
jmp @System@@HandleAnyException$qqrv  +
mov ebx 1 +
call @@DoneExcept$qqrv  +
mov eax ebx +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 10h  +
***
push ebx  +
push esi  +
push edi  +
mov edx [ebp+arg_4] +
mov eax [ebp+arg_0] +
xor ecx ecx +
push ebp  +
push offset loc_4A5743  +
push dword ptr fs:[ecx]  +
mov fs:[ecx] esp +
test edx edx +
jnz loc_4A5721  +
mov ebx 80030009h +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
jmp loc_4A5752  +
mov eax [eax+0Ch] +
mov ecx [ebp+arg_8] +
mov ebx [eax] +
call dword ptr [ebx+0Ch]  +
cmp [ebp+arg_C] 0 +
jz loc_4A5737  +
mov edx [ebp+arg_C] +
mov [edx] eax +
xor ebx ebx +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
jmp loc_4A5752  +
jmp @System@@HandleAnyException$qqrv  +
mov ebx 80030103h +
call @@DoneExcept$qqrv  +
mov eax ebx +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 10h  +
***
add esp 0FFFFFFF8h +
push ebx  +
push esi  +
push edi  +
mov ebx [ebp+arg_0] +
xor eax eax +
push ebp  +
push offset loc_4A582A  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
mov eax [ebx+0Ch] +
call sub_49F238  +
mov eax [ebx+0Ch] +
call sub_49F1E8  +
cmp edx [ebp+arg_8] +
jnz loc_4A5815  +
cmp eax [ebp+arg_4] +
jz loc_4A581E  +
mov ebx 80004005h +
jmp loc_4A5820  +
xor ebx ebx +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
jmp loc_4A5839  +
jmp @System@@HandleAnyException$qqrv  +
mov ebx 8000FFFFh +
call @@DoneExcept$qqrv  +
mov eax ebx +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
add esp 0FFFFFFD8h +
xor eax eax +
pop ebp  +
retn 8  +
***
mov eax 80030102h +
mov eax 80030001h +
mov eax 80030001h +
push ebx  +
mov eax [ebp+arg_4] +
test eax eax +
jz loc_4A5AFE  +
xor edx edx +
mov [eax] edx +
mov eax 80004001h +
pop ebp  +
retn 8  +
***
push ebx  +
push esi  +
push edi  +
mov eax dword_4F19BC +
call @Mxarrays@TThreadCustomArray@LockArray$qqrv  +
mov edi eax +
xor eax eax +
push ebp  +
push offset loc_4A5B5D  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov ebx [edi+8] +
dec ebx  +
test ebx ebx +
jl loc_4A5B45  +
inc ebx  +
xor esi esi +
mov edx esi +
mov eax edi +
call @Classes@TList@Get$qqri  +
call @System@TObject@Free$qqrv  +
inc esi  +
dec ebx  +
jnz loc_4A5B33  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4A5B64  +
mov eax dword_4F19BC +
call sub_49D170  +
retn   +
jmp unknown_libname_539  +
jmp loc_4A5B52  +
mov eax dword_4F19BC +
call @System@TObject@Free$qqrv  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
call sub_49C328  +
retn   +
***
xor eax eax +
push eax  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
mov edx esp +
mov eax [ecx+4] +
call dword ptr [ecx]  +
add esp 0Ch +
pop eax  +
pop ebp  +
retn 10h  +
***
add eax 5 +
push ebx  +
test eax eax +
jz locret_4A5C4E  +
mov edx dword_4F19F0 +
mov [eax+5] edx +
mov dword_4F19F0 eax +
retn   +
***
add esp 0FFFFFFD8h +
push ebx  +
mov eax hInstance +
mov stru_4E6A14.hInstance eax +
lea eax [ebp+WndClass] +
push eax  +
mov eax stru_4E6A14.lpszClassName +
push eax  +
mov eax hInstance +
push eax  +
call GetClassInfoA  +
cmp eax 1 +
sbb eax eax +
inc eax  +
test al al +
jz loc_4A5C9A  +
mov edx offset DefWindowProcA +
cmp edx [ebp+WndClass.lpfnWndProc] +
jz loc_4A5CB9  +
test al al +
jz loc_4A5CAF  +
mov eax hInstance +
push eax  +
mov eax stru_4E6A14.lpszClassName +
push eax  +
call UnregisterClassA  +
push offset stru_4E6A14  +
call RegisterClassA  +
push 0  +
mov eax hInstance +
push eax  +
push 0  +
push 0  +
push 0  +
push 0  +
push 0  +
push 0  +
push 80000000h  +
push offset byte_4A5D10  +
mov eax stru_4E6A14.lpszClassName +
push eax  +
push 80h  +
call CreateWindowExA  +
mov ebx eax +
cmp [ebp+arg_2] 0 +
jz loc_4A5D04  +
push [ebp+arg_4]  +
push dword ptr [ebp+8]  +
call sub_4A5BA4  +
push eax  +
push 0FFFFFFFCh  +
push ebx  +
call SetWindowLongA  +
mov eax ebx +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 8  +
***
mov esi eax +
push 0FFFFFFFCh  +
push esi  +
call GetWindowLongA  +
mov ebx eax +
push esi  +
call DestroyWindow  +
cmp ebx offset DefWindowProcA +
jz loc_4A5D37  +
mov eax ebx +
call @Forms@FreeObjectInstance$qqrpv  +
pop esi  +
pop ebx  +
retn   +
***
xor eax eax +
mov eax hInstance +
sub dword_4F19B8 1 +
jnb locret_4A5E45  +
push offset stru_4F19D0  +
call InitializeCriticalSection  +
mov eax offset loc_4A5B74 +
call sub_4BCED8  +
mov dl 1 +
mov eax ds:off_4A8670 +
call sub_4AD844  +
mov dword_4F19B0 eax +
mov dl 1 +
mov eax ds:off_49B7E0 +
call sub_49BC44  +
mov dword_4F19C0 eax +
mov dl 1 +
mov eax ds:off_49A63C +
call @Classes@TThreadList@$bctr$qqrv  +
mov dword_4F19BC eax +
mov dl 1 +
mov eax ds:off_49A63C +
call @Classes@TThreadList@$bctr$qqrv  +
mov dword_4F19C8 eax +
retn   +
***
xor edx edx +
mov dl [eax+1] +
lea eax [eax+edx+2] +
retn   +
***
push 0  +
push ebx  +
push esi  +
push edi  +
mov edi ecx +
mov ebx edx +
mov esi eax +
xor eax eax +
push ebp  +
push offset loc_4A5F5B  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
cmp byte ptr [esi] 1 +
jnz loc_4A5EAF  +
mov edx edi +
mov eax ebx +
call @Sysutils@IntToStr$qqri  +
jmp loc_4A5F45  +
mov eax esi +
call unknown_libname_445  +
mov eax [eax+9] +
mov eax [eax] +
call unknown_libname_445  +
mov edx ds:off_4B8170 +
cmp esi edx +
jz loc_4A5ED0  +
cmp dword ptr [eax+1] 0 +
jge loc_4A5F29  +
cmp edx esi +
jnz loc_4A5EE8  +
mov eax edi +
xor edx edx +
mov dl bl +
mov edx off_4E6A3C[edx*4] +
call unknown_libname_542  +
jmp loc_4A5EFE  +
mov eax edi +
test ebx ebx +
setnz dl  +
and edx 7Fh +
mov edx off_4E6A3C[edx*4] +
call unknown_libname_542  +
mov eax off_4EA8C8 +
mov eax [eax] +
mov edx offset _str_0x.Text +
call unknown_libname_459  +
test al al +
jz loc_4A5F45  +
lea edx [ebp+var_4] +
mov eax [edi] +
call sub_4A87E4  +
mov edx [ebp+var_4] +
mov eax edi +
call unknown_libname_542  +
jmp loc_4A5F45  +
lea esi [eax+0Dh] +
test ebx ebx +
jz loc_4A5F3C  +
xor eax eax +
mov al [esi] +
inc eax  +
add esi eax +
dec ebx  +
test ebx ebx +
jnz loc_4A5F30  +
mov eax edi +
mov edx esi +
call unknown_libname_547  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4A5F62  +
lea eax [ebp+var_4] +
call unknown_libname_540  +
retn   +
jmp unknown_libname_539  +
jmp loc_4A5F52  +
pop edi  +
pop esi  +
pop ebx  +
pop ecx  +
pop ebp  +
retn   +
***
push edi  +
test edx edx +
jz loc_4A5FB6  +
xor ecx ecx +
mov cl [eax+1] +
mov eax [eax+ecx+0Bh] +
mov eax [eax] +
mov cl [eax+1] +
lea esi [eax+ecx+0Fh] +
mov edi [eax+ecx+7] +
xor eax eax +
mov cl [esi] +
cmp ecx [edx-4] +
jnz loc_4A5FAD  +
mov bl [ecx+edx-1] +
xor bl [ecx+esi] +
test bl 0DFh +
jnz loc_4A5FAB  +
dec ecx  +
jnz loc_4A5F9A  +
jmp loc_4A5FB9  +
mov cl [esi] +
inc eax  +
lea esi [ecx+esi+1] +
cmp eax edi +
jle loc_4A5F93  +
or eax 0FFFFFFFFh +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov esi edx +
mov ebx eax +
cmp byte ptr [ebx] 1 +
jnz loc_4A5FD5  +
mov eax esi +
call @Sysutils@StrToInt$qqrx17System@AnsiString  +
pop esi  +
pop ebx  +
retn   +
mov eax ebx +
call unknown_libname_445  +
cmp dword ptr [eax+1] 0 +
jge loc_4A6016  +
mov edx off_4E6A3C +
mov eax esi +
call unknown_libname_459  +
test al al +
jz loc_4A5FF7  +
xor eax eax +
jmp loc_4A601F  +
mov edx off_4E6A40 +
mov eax esi +
call unknown_libname_459  +
test al al +
jz loc_4A600D  +
or eax 0FFFFFFFFh +
jmp loc_4A601F  +
mov eax esi +
call @Sysutils@StrToInt$qqrx17System@AnsiString  +
jmp loc_4A601F  +
mov edx esi +
mov eax ebx +
call @TypInfo@_16456  +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
push edi  +
mov ecx [edx+0Ch] +
test ecx 0FFFFFF00h +
jz loc_4A6112  +
cmp byte ptr [edx+0Fh] 0FEh +
mov edx [edx+10h] +
jb loc_4A6106  +
ja loc_4A6109  +
movsx ecx cx +
add ecx [eax] +
call dword ptr [ecx]  +
retn   +
call ecx  +
retn   +
and ecx 0FFFFFFh +
mov cl [ecx+eax] +
mov al cl +
retn   +
***
mov edi [edx] +
mov edi [edi] +
mov bl 4 +
cmp byte ptr [edi] 7 +
jz loc_4A612E  +
xor ecx ecx +
mov cl [edi+1] +
mov bl [edi+ecx+2] +
mov ecx [edx+4] +
cmp byte ptr [edx+7] 0FEh +
mov edx [edx+10h] +
jb loc_4A6145  +
ja loc_4A6149  +
movsx ecx cx +
add ecx [eax] +
call dword ptr [ecx]  +
jmp loc_4A6162  +
call ecx  +
jmp loc_4A6162  +
and ecx 0FFFFFFh +
add ecx eax +
mov al [ecx] +
cmp bl 2 +
jb loc_4A6162  +
mov ax [ecx] +
cmp bl 4 +
jb loc_4A6162  +
mov eax [ecx] +
cmp bl 4 +
jnb loc_4A6186  +
cmp bl 2 +
jnb loc_4A617C  +
cmp bl 0 +
movsx eax al +
jz loc_4A6186  +
and eax 0FFh +
pop edi  +
pop ebx  +
retn   +
movsx eax ax +
jz loc_4A6186  +
and eax 0FFFFh +
pop edi  +
pop ebx  +
retn   +
***
push edi  +
mov edi edx +
mov esi [edi] +
mov esi [esi] +
mov bl 4 +
cmp byte ptr [esi] 7 +
jz loc_4A61A5  +
xor ebx ebx +
mov bl [esi+1] +
mov bl [esi+ebx+2] +
mov edx [edi+10h] +
cmp edx 80000000h +
jnz loc_4A61B2  +
mov edx ecx +
mov esi [edi+8] +
cmp byte ptr [edi+0Bh] 0FEh +
ja loc_4A61CA  +
jb loc_4A61C6  +
movsx esi si +
add esi [eax] +
call dword ptr [esi]  +
jmp loc_4A61E3  +
call esi  +
jmp loc_4A61E3  +
and esi 0FFFFFFh +
add eax esi +
mov [eax] cl +
cmp bl 2 +
jb loc_4A61E3  +
mov [eax] cx +
cmp bl 4 +
jb loc_4A61E3  +
mov [eax] ecx +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push esi  +
push edi  +
mov edi edx +
mov edx [edi+10h] +
cmp edx 80000000h +
jnz loc_4A61FC  +
mov edx ecx +
mov esi [edi+4] +
cmp byte ptr [edi+7] 0FEh +
ja loc_4A6214  +
jb loc_4A6210  +
movsx esi si +
add esi [eax] +
call dword ptr [esi]  +
jmp loc_4A6225  +
call esi  +
jmp loc_4A6225  +
and esi 0FFFFFFh +
add esi eax +
mov edi ecx +
xor ecx ecx +
mov cl [esi] +
inc ecx  +
movs   +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov esi edx +
mov edx [esi+10h] +
cmp edx 80000000h +
jnz loc_4A623D  +
mov edx ecx +
mov edi [esi+8] +
cmp byte ptr [esi+0Bh] 0FEh +
ja loc_4A6257  +
jb loc_4A6252  +
movsx edi di +
add edi [eax] +
call dword ptr [edi]  +
pop edi  +
pop esi  +
retn   +
call edi  +
pop edi  +
pop esi  +
retn   +
and edi 0FFFFFFh +
add edi eax +
mov eax [esi] +
mov eax [eax] +
mov esi ecx +
xor ecx ecx +
mov cl [eax+1] +
mov cl [eax+ecx+2] +
lods   +
cmp al cl +
jb loc_4A6275  +
mov al cl +
stos   +
mov cl al +
movs   +
pop edi  +
pop esi  +
retn   +
***
mov ebx ecx +
push edi  +
add esp 0FFFFFF00h +
mov edi ecx +
mov esi edx +
mov ebx eax +
mov eax esp +
mov edx edi +
mov ecx 0FFh +
call @System@@LStrToString$qqrv  +
mov ecx esp +
mov edx esi +
mov eax ebx +
call @TypInfo@_16482  +
add esp 100h +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov esi edx +
mov ebx eax +
mov eax ebx +
mov edx esi +
call unknown_libname_542  +
pop esi  +
pop ebx  +
retn   +
***
mov edi edx +
mov edx [edi+10h] +
cmp edx 80000000h +
jnz loc_4A6301  +
mov edx ecx +
mov esi [edi+4] +
cmp byte ptr [edi+7] 0FEh +
ja loc_4A631B  +
jb loc_4A6316  +
movsx esi si +
add esi [eax] +
call dword ptr [esi]  +
pop edi  +
pop esi  +
retn   +
call esi  +
pop edi  +
pop esi  +
retn   +
and esi 0FFFFFFh +
mov edx [esi+eax] +
mov eax ecx +
call sub_4A62DC  +
pop edi  +
pop esi  +
retn   +
***
mov esi edx +
mov edx [esi+10h] +
cmp edx 80000000h +
jnz loc_4A6341  +
mov edx ecx +
mov edi [esi+8] +
cmp byte ptr [esi+0Bh] 0FEh +
ja loc_4A635B  +
jb loc_4A6356  +
movsx edi di +
add edi [eax] +
call dword ptr [edi]  +
pop edi  +
pop esi  +
retn   +
call edi  +
pop edi  +
pop esi  +
retn   +
and edi 0FFFFFFh +
add eax edi +
mov edx ecx +
call sub_4A62DC  +
pop edi  +
pop esi  +
retn   +
***
push 0  +
push ebx  +
push esi  +
push edi  +
mov edi ecx +
mov esi edx +
mov ebx eax +
xor eax eax +
push ebp  +
push offset loc_4A63B8  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
lea ecx [ebp+var_4] +
mov edx esi +
mov eax ebx +
call sub_4A648C  +
mov edx [ebp+var_4] +
mov eax edi +
call unknown_libname_548  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4A63BF  +
lea eax [ebp+var_4] +
call unknown_libname_552  +
retn   +
jmp unknown_libname_539  +
jmp loc_4A63AF  +
pop edi  +
pop esi  +
pop ebx  +
pop ecx  +
pop ebp  +
retn   +
***
push 0  +
push ebx  +
push esi  +
push edi  +
mov edi ecx +
mov esi edx +
mov ebx eax +
xor eax eax +
push ebp  +
push offset loc_4A6410  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
lea eax [ebp+var_4] +
mov edx edi +
call unknown_libname_554  +
mov ecx [ebp+var_4] +
mov edx esi +
mov eax ebx +
call sub_4A6574  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4A6417  +
lea eax [ebp+var_4] +
call unknown_libname_552  +
retn   +
jmp unknown_libname_539  +
jmp loc_4A6407  +
pop edi  +
pop esi  +
pop ebx  +
pop ecx  +
pop ebp  +
retn   +
***
mov ecx [edx] +
mov ecx [ecx] +
mov cl [ecx] +
sub cl 5 +
jz loc_4A6439  +
sub cl 5 +
jz loc_4A6442  +
dec cl  +
jz loc_4A644B  +
jmp loc_4A6454  +
mov ecx ebx +
call @TypInfo@_16458  +
pop ebx  +
retn   +
mov ecx ebx +
call @TypInfo@_16486  +
pop ebx  +
retn   +
mov ecx ebx +
call sub_4A6370  +
pop ebx  +
retn   +
mov eax ebx +
call unknown_libname_540  +
pop ebx  +
retn   +
***
mov ebx [ebx] +
add esp 0FFFFFFF0h +
push ebx  +
push esi  +
xor ebx ebx +
mov [ebp+var_10] ebx +
mov [ebp+var_4] ecx +
mov ebx edx +
mov esi eax +
xor eax eax +
push ebp  +
push offset loc_4A6564  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov eax [ebx] +
mov eax [eax] +
mov al [eax] +
sub al 5 +
jz loc_4A64C5  +
sub al 5 +
jz loc_4A64C5  +
dec al  +
jz loc_4A64DE  +
jmp loc_4A6546  +
lea ecx [ebp+var_10] +
mov edx ebx +
mov eax esi +
call sub_4A6420  +
mov edx [ebp+var_10] +
mov eax [ebp+var_4] +
call unknown_libname_554  +
jmp loc_4A654E  +
mov eax [ebx+4] +
mov edx eax +
and edx 0FF000000h +
cmp edx 0FF000000h +
jnz loc_4A6507  +
mov ebx eax +
and ebx 0FFFFFFh +
add ebx esi +
mov eax [ebp+var_4] +
mov edx [ebx] +
call @System@@WStrAsg$qqrr17System@WideStringx17System@WideString  +
jmp loc_4A654E  +
cmp edx 0FE000000h +
jnz loc_4A651D  +
mov edx [esi] +
movsx eax ax +
add edx eax +
mov eax [edx] +
mov [ebp+var_C] eax +
jmp loc_4A6520  +
mov [ebp+var_C] eax +
mov [ebp+var_8] esi +
mov esi [ebx+10h] +
cmp esi 80000000h +
jnz loc_4A6539  +
mov edx [ebp+var_4] +
mov eax [ebp+var_8] +
call [ebp+var_C]  +
jmp loc_4A654E  +
mov ecx [ebp+var_4] +
mov edx esi +
mov eax [ebp+var_8] +
call [ebp+var_C]  +
jmp loc_4A654E  +
mov eax [ebp+var_4] +
call unknown_libname_552  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4A656B  +
lea eax [ebp+var_10] +
call unknown_libname_540  +
retn   +
jmp unknown_libname_539  +
jmp loc_4A655B  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
add esp 0FFFFFFF4h +
add esp 0FFFFFFECh +
mov ebx edx +
mov edx [ebx+4] +
mov ecx edx +
and ecx 0FF000000h +
cmp ecx 0FF000000h +
jnz loc_4A66F2  +
mov esi edx +
and esi 0FFFFFFh +
add esi eax +
mov eax [ebx] +
mov eax [eax] +
call unknown_libname_445  +
movzx eax byte ptr [eax] +
cmp eax 4 +
ja loc_4A66E2  +
jmp ds:off_4A6688[eax*4]  +
fld  dword ptr [esi] +
fstp  [esp+14h+var_14] +
wait   +
jmp loc_4A6752  +
fld  qword ptr [esi] +
fstp  [esp+14h+var_14] +
wait   +
jmp loc_4A6752  +
mov eax [esi] +
mov dword ptr [esp+14h+var_14] eax +
mov eax [esi+4] +
mov dword ptr [esp+14h+var_14+4] eax +
mov ax [esi+8] +
mov word ptr [esp+14h+var_14+8] ax +
jmp loc_4A6752  +
fild  qword ptr [esi] +
fstp  [esp+14h+var_14] +
wait   +
jmp loc_4A6752  +
fild  qword ptr [esi] +
fdiv  ds:flt_4A675C +
fstp  [esp+14h+var_14] +
wait   +
jmp loc_4A6752  +
xor eax eax +
mov dword ptr [esp+14h+var_14] eax +
mov dword ptr [esp+14h+var_14+4] eax +
mov word ptr [esp+14h+var_14+8] ax +
jmp loc_4A6752  +
cmp ecx 0FE000000h +
jnz loc_4A6709  +
mov ecx [eax] +
movsx edx dx +
add ecx edx +
mov edx [ecx] +
mov [esp+14h+var_8] edx +
jmp loc_4A670D  +
mov [esp+14h+var_8] edx +
mov [esp+14h+var_4] eax +
mov eax [ebx+10h] +
cmp eax 80000000h +
jnz loc_4A6729  +
mov eax [esp+14h+var_4] +
call [esp+14h+var_8]  +
fstp  [esp+14h+var_14] +
wait   +
jmp loc_4A6737  +
mov edx eax +
mov eax [esp+14h+var_4] +
call [esp+14h+var_8]  +
fstp  [esp+14h+var_14] +
wait   +
mov eax [ebx] +
mov eax [eax] +
call unknown_libname_445  +
cmp byte ptr [eax] 4 +
jnz loc_4A6752  +
fld  [esp+14h+var_14] +
fdiv  ds:flt_4A675C +
fstp  [esp+14h+var_14] +
wait   +
fld  [esp+14h+var_14] +
add esp 14h +
pop esi  +
pop ebx  +
retn   +
***
add esp 0FFFFFFF8h +
push ebx  +
push esi  +
push edi  +
mov esi edx +
mov edi eax +
mov ebx [esi+8] +
mov eax [esi] +
mov eax [eax] +
call unknown_libname_445  +
mov al [eax] +
mov edx ebx +
and edx 0FF000000h +
cmp edx 0FF000000h +
jnz loc_4A6806  +
mov edx ebx +
and edx 0FFFFFFh +
add edx edi +
and eax 7Fh +
cmp eax 4 +
ja loc_4A694A  +
jmp ds:off_4A67A8[eax*4]  +
fld  [ebp+arg_0] +
fstp  dword ptr [edx] +
wait   +
jmp loc_4A694A  +
fld  [ebp+arg_0] +
fstp  qword ptr [edx] +
wait   +
jmp loc_4A694A  +
mov eax dword ptr [ebp+arg_0] +
mov [edx] eax +
mov eax dword ptr [ebp+arg_0+4] +
mov [edx+4] eax +
mov ax word ptr [ebp+arg_0+8] +
mov [edx+8] ax +
jmp loc_4A694A  +
fld  [ebp+arg_0] +
fistp  qword ptr [edx] +
wait   +
jmp loc_4A694A  +
fld  [ebp+arg_0] +
fmul  ds:flt_4A6954 +
fistp  qword ptr [edx] +
wait   +
jmp loc_4A694A  +
cmp edx 0FE000000h +
jnz loc_4A681C  +
mov edx [edi] +
movsx ecx bx +
add edx ecx +
mov edx [edx] +
mov [ebp+var_8] edx +
jmp loc_4A681F  +
mov [ebp+var_8] ebx +
mov [ebp+var_4] edi +
mov edx [esi+10h] +
cmp edx 80000000h +
jnz loc_4A68C8  +
and eax 7Fh +
cmp eax 4 +
ja loc_4A694A  +
jmp ds:off_4A6844[eax*4]  +
fld  [ebp+arg_0] +
add esp 0FFFFFFFCh +
fstp  [esp+18h+var_18] +
wait   +
mov eax [ebp+var_4] +
call [ebp+var_8]  +
jmp loc_4A694A  +
fld  [ebp+arg_0] +
add esp 0FFFFFFF8h +
fstp  qword ptr [esp] +
wait   +
mov eax [ebp+var_4] +
call [ebp+var_8]  +
jmp loc_4A694A  +
mov ax word ptr [ebp+arg_0+8] +
push eax  +
push dword ptr [ebp+arg_0+4]  +
push dword ptr [ebp+arg_0]  +
mov eax [ebp+var_4] +
call [ebp+var_8]  +
jmp loc_4A694A  +
fld  [ebp+arg_0] +
add esp 0FFFFFFF8h +
fistp  qword ptr [esp] +
wait   +
mov eax [ebp+var_4] +
call [ebp+var_8]  +
jmp loc_4A694A  +
fld  [ebp+arg_0] +
fmul  ds:flt_4A6954 +
add esp 0FFFFFFF8h +
fistp  qword ptr [esp] +
wait   +
mov eax [ebp+var_4] +
call [ebp+var_8]  +
jmp loc_4A694A  +
and eax 7Fh +
cmp eax 4 +
ja loc_4A694A  +
jmp ds:off_4A68D7[eax*4]  +
fld  [ebp+arg_0] +
add esp 0FFFFFFFCh +
fstp  [esp+18h+var_18] +
wait   +
mov eax [ebp+var_4] +
call [ebp+var_8]  +
jmp loc_4A694A  +
fld  [ebp+arg_0] +
add esp 0FFFFFFF8h +
fstp  qword ptr [esp] +
wait   +
mov eax [ebp+var_4] +
call [ebp+var_8]  +
jmp loc_4A694A  +
mov ax word ptr [ebp+arg_0+8] +
push eax  +
push dword ptr [ebp+arg_0+4]  +
push dword ptr [ebp+arg_0]  +
mov eax [ebp+var_4] +
call [ebp+var_8]  +
jmp loc_4A694A  +
fld  [ebp+arg_0] +
add esp 0FFFFFFF8h +
fistp  qword ptr [esp] +
wait   +
mov eax [ebp+var_4] +
call [ebp+var_8]  +
jmp loc_4A694A  +
fld  [ebp+arg_0] +
fmul  ds:flt_4A6954 +
add esp 0FFFFFFF8h +
fistp  qword ptr [esp] +
wait   +
mov eax [ebp+var_4] +
call [ebp+var_8]  +
pop edi  +
pop esi  +
pop ebx  +
pop ecx  +
pop ecx  +
pop ebp  +
retn 0Ch  +
***
mov esi edx +
mov ebx eax +
mov eax ebx +
mov edx esi +
call sub_4BC1C8  +
pop esi  +
pop ebx  +
retn   +
***
mov edi edx +
mov edx [edi+10h] +
cmp edx 80000000h +
jnz loc_4A697D  +
mov edx ecx +
mov esi [edi+4] +
cmp byte ptr [edi+7] 0FEh +
ja loc_4A6997  +
jb loc_4A6992  +
movsx esi si +
add esi [eax] +
call dword ptr [esi]  +
pop edi  +
pop esi  +
retn   +
call esi  +
pop edi  +
pop esi  +
retn   +
and esi 0FFFFFFh +
lea edx [esi+eax] +
mov eax ecx +
call sub_4A6958  +
pop edi  +
pop esi  +
retn   +
***
mov esi edx +
mov edx [esi+10h] +
cmp edx 80000000h +
jnz loc_4A69BD  +
mov edx ecx +
mov edi [esi+8] +
cmp byte ptr [esi+0Bh] 0FEh +
ja loc_4A69D7  +
jb loc_4A69D2  +
movsx edi di +
add edi [eax] +
call dword ptr [edi]  +
pop edi  +
pop esi  +
retn   +
call edi  +
pop edi  +
pop esi  +
retn   +
and edi 0FFFFFFh +
add eax edi +
mov edx ecx +
call sub_4A6958  +
pop edi  +
pop esi  +
retn   +
***
mov esi edx +
cmp byte ptr [edx+0Bh] 0FEh +
ja loc_4A6A4D  +
mov edx [edx+10h] +
push dword ptr [ecx+4]  +
push dword ptr [ecx]  +
jb loc_4A6A49  +
movsx ebx bx +
add ebx [eax] +
call dword ptr [ebx]  +
pop ebx  +
retn   +
call ebx  +
pop ebx  +
retn   +
and ebx 0FFFFFFh +
add eax ebx +
mov edx [ecx] +
mov ebx [ecx+4] +
mov [eax] edx +
mov [eax+4] ebx +
pop ebx  +
retn   +
***
cmp byte ptr [edx+7] 0FEh +
mov ecx [edx+4] +
mov edx [edx+10h] +
ja loc_4A6A7D  +
jb loc_4A6A7A  +
movsx ecx cx +
add ecx [eax] +
call dword ptr [ecx]  +
retn   +
call ecx  +
retn   +
and ecx 0FFFFFFh +
add eax ecx +
mov edx [eax+4] +
mov eax [eax] +
retn   +
***
cmp byte ptr [edx+0Bh] 0FEh +
mov ecx [edx+8] +
ja loc_4A6AB0  +
mov edx [edx+10h] +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
jb loc_4A6AAC  +
movsx ecx cx +
add ecx [eax] +
call dword ptr [ecx]  +
jmp loc_4A6AC3  +
call ecx  +
jmp loc_4A6AC3  +
and ecx 0FFFFFFh +
add eax ecx +
mov edx [ebp+arg_0] +
mov ecx [ebp+arg_4] +
mov [eax] edx +
mov [eax+4] ecx +
pop ebp  +
retn 8  +
***
add esp 0FFFFFFF4h +
mov [esp+0Ch+var_C] ecx +
mov ebx edx +
mov edx [ebx+4] +
mov ecx edx +
and ecx 0FF000000h +
cmp ecx 0FF000000h +
jnz loc_4A6AFB  +
mov ebx edx +
and ebx 0FFFFFFh +
add ebx eax +
mov eax [esp+0Ch+var_C] +
mov edx [ebx] +
call @System@@IntfCopy$qqrr45System@_DelphiInterface$t17System@IInterface_x45System@_DelphiInterface$t17System@IInterface_  +
jmp loc_4A6B3F  +
cmp ecx 0FE000000h +
jnz loc_4A6B12  +
mov ecx [eax] +
movsx edx dx +
add ecx edx +
mov edx [ecx] +
mov [esp+0Ch+var_8] edx +
jmp loc_4A6B16  +
mov [esp+0Ch+var_8] edx +
mov [esp+0Ch+var_4] eax +
mov esi [ebx+10h] +
cmp esi 80000000h +
jnz loc_4A6B32  +
mov edx [esp+0Ch+var_C] +
mov eax [esp+0Ch+var_4] +
call [esp+0Ch+var_8]  +
jmp loc_4A6B3F  +
mov ecx [esp+0Ch+var_C] +
mov edx esi +
mov eax [esp+0Ch+var_4] +
call [esp+0Ch+var_8]  +
add esp 0Ch +
pop esi  +
pop ebx  +
retn   +
***
add esp 0FFFFFFF8h +
mov esi ecx +
mov ecx [edx+8] +
mov ebx ecx +
and ebx 0FF000000h +
cmp ebx 0FF000000h +
jnz loc_4A6B77  +
mov ebx ecx +
and ebx 0FFFFFFh +
add ebx eax +
mov eax ebx +
mov edx esi +
call @System@@IntfCopy$qqrr45System@_DelphiInterface$t17System@IInterface_x45System@_DelphiInterface$t17System@IInterface_  +
jmp loc_4A6BB4  +
cmp ebx 0FE000000h +
jnz loc_4A6B8D  +
mov ebx [eax] +
movsx ecx cx +
add ebx ecx +
mov ecx [ebx] +
mov [esp+8+var_8] ecx +
jmp loc_4A6B90  +
mov [esp+8+var_8] ecx +
mov [esp+8+var_4] eax +
mov eax [edx+10h] +
cmp eax 80000000h +
jnz loc_4A6BA9  +
mov edx esi +
mov eax [esp+8+var_4] +
call [esp+8+var_8]  +
jmp loc_4A6BB4  +
mov ecx esi +
mov edx eax +
mov eax [esp+8+var_4] +
call [esp+8+var_8]  +
pop ecx  +
pop edx  +
pop esi  +
pop ebx  +
retn   +
***
xor eax eax +
push ebp  +
push offset loc_4A6C02  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
inc dword_4F19F4  +
jnz loc_4A6BF4  +
mov eax offset off_4E6A44 +
call unknown_libname_540  +
mov eax offset off_4E6A3C +
mov ecx 2 +
mov edx ds:@$xp$13System@String +
call @System@@FinalizeArray$qqrpvt1ui  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4A6C09  +
retn   +
jmp unknown_libname_539  +
jmp locret_4A6C01  +
pop ebp  +
retn   +
***
xor eax eax +
push ebp  +
push offset loc_4A6C39  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
inc dword_4F19F8  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4A6C40  +
retn   +
jmp unknown_libname_539  +
jmp locret_4A6C38  +
pop ebp  +
retn   +
***
sub dword_4F19F8 1 +
retn   +
***
mov ebx eax +
test ebx ebx +
dec al  +
jz loc_4A6D66  +
dec al  +
jz loc_4A6D6C  +
dec al  +
jz loc_4A6D72  +
dec al  +
jz loc_4A6D78  +
jmp loc_4A6D7E  +
mov eax 1 +
retn   +
mov eax 2 +
retn   +
mov eax 4 +
retn   +
mov eax 3 +
retn   +
xor eax eax +
retn   +
***
cmp eax 1 +
jnz loc_4A6D8C  +
mov al 1 +
retn   +
cmp eax 2 +
jnz loc_4A6D95  +
mov al 2 +
jmp locret_4A6DA9  +
cmp eax 4 +
jnz loc_4A6D9E  +
mov al 3 +
jmp locret_4A6DA9  +
cmp eax 3 +
jnz loc_4A6DA7  +
mov al 4 +
jmp locret_4A6DA9  +
xor eax eax +
retn   +
***
test dl dl +
jz loc_4A6DBA  +
add esp 0FFFFFFF0h +
call unknown_libname_535  +
mov ebx edx +
mov esi eax +
mov edx 80000001h +
mov eax esi +
call @Registry@TRegistry@SetRootKey$qqrui  +
mov dword ptr [esi+18h] 0F003Fh +
mov byte ptr [esi+0Ch] 1 +
mov eax esi +
test bl bl +
jz loc_4A6DEA  +
call sub_4BABC8  +
pop large dword ptr fs:0  +
add esp 0Ch +
mov eax esi +
pop esi  +
pop ebx  +
retn   +
***
call unknown_libname_536  +
mov eax [ebx+4] +
test eax eax +
jz loc_4A6E47  +
cmp byte ptr [ebx+0Ch] 0 +
jz loc_4A6E34  +
push eax  +
call RegCloseKey  +
jmp loc_4A6E3A  +
push eax  +
call RegFlushKey  +
xor eax eax +
mov [ebx+4] eax +
lea eax [ebx+10h] +
call unknown_libname_540  +
pop ebx  +
retn   +
***
mov esi edx +
mov ebx eax +
mov eax [ebx+8] +
cmp esi eax +
jz loc_4A6E73  +
cmp byte ptr [ebx+14h] 0 +
jz loc_4A6E69  +
push eax  +
call RegCloseKey  +
mov byte ptr [ebx+14h] 0 +
mov [ebx+8] esi +
mov eax ebx +
call sub_4A6E1C  +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
mov edi ecx +
mov esi edx +
mov ebx eax +
mov eax ebx +
call sub_4A6E1C  +
mov [ebx+4] esi +
lea eax [ebx+10h] +
mov edx edi +
call unknown_libname_542  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov ecx [eax+4] +
test ecx ecx +
jz loc_4A6EA7  +
test dl dl +
jnz loc_4A6EAB  +
mov eax [eax+8] +
retn   +
mov eax ecx +
retn   +
***
add esp 0FFFFFFF0h +
push ebx  +
push esi  +
xor ebx ebx +
mov [ebp+var_C] ebx +
mov [ebp+var_1] cl +
mov ebx edx +
mov esi eax +
xor eax eax +
push ebp  +
push offset loc_4A6FB5  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
lea eax [ebp+var_C] +
mov edx ebx +
call unknown_libname_543  +
mov eax [ebp+var_C] +
call @Registry@_16393  +
mov ebx eax +
test bl bl +
jnz loc_4A6EFC  +
lea eax [ebp+var_C] +
mov ecx 1 +
mov edx 1 +
call @System@@LStrDelete$qqrv  +
xor eax eax +
mov [ebp+phkResult] eax +
cmp [ebp+var_1] 0 +
jz loc_4A6F0D  +
cmp [ebp+var_C] 0 +
jnz loc_4A6F37  +
lea eax [ebp+phkResult] +
push eax  +
mov eax [esi+18h] +
push eax  +
push 0  +
mov eax [ebp+var_C] +
call unknown_libname_550  +
push eax  +
mov edx ebx +
mov eax esi +
call unknown_libname_448  +
push eax  +
call RegOpenKeyExA  +
test eax eax +
setz [ebp+var_2]  +
jmp loc_4A6F69  +
lea eax [ebp+dwDisposition] +
push eax  +
lea eax [ebp+phkResult] +
push eax  +
push 0  +
mov eax [esi+18h] +
push eax  +
push 0  +
push 0  +
push 0  +
mov eax [ebp+var_C] +
call unknown_libname_550  +
push eax  +
mov edx ebx +
mov eax esi +
call unknown_libname_448  +
push eax  +
call RegCreateKeyExA  +
test eax eax +
setz [ebp+var_2]  +
cmp [ebp+var_2] 0 +
jz loc_4A6F9F  +
cmp dword ptr [esi+4] 0 +
setnz al  +
test bl al +
jz loc_4A6F92  +
push dword ptr [esi+10h]  +
push offset _str___18.Text  +
push [ebp+var_C]  +
lea eax [ebp+var_C] +
mov edx 3 +
call sub_4BB6D0  +
mov ecx [ebp+var_C] +
mov edx [ebp+phkResult] +
mov eax esi +
call sub_4A6E78  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4A6FBC  +
lea eax [ebp+var_C] +
call unknown_libname_540  +
retn   +
jmp unknown_libname_539  +
jmp loc_4A6FAC  +
mov al [ebp+var_2] +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
push edi  +
push ebp  +
push ecx  +
mov ebp ecx +
mov edi edx +
mov esi eax +
mov eax ebp +
xor ecx ecx +
mov edx 8 +
call @System@@FillChar$qqrv  +
lea eax [ebp+4] +
push eax  +
push 0  +
lea eax [esp+0Ch+Type] +
push eax  +
push 0  +
mov eax edi +
call unknown_libname_550  +
push eax  +
mov eax [esi+4] +
push eax  +
call RegQueryValueExA  +
test eax eax +
setz bl  +
mov eax [esp+4+Type] +
call @Registry@_16395  +
mov [ebp+0] al +
mov eax ebx +
pop edx  +
pop ebp  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push 4  +
push 3  +
lea ecx [esp+0Ch+var_4] +
call @Registry@TRegistry@PutData$qqrx17System@AnsiStringpvi21Registry@TRegDataType  +
pop edx  +
retn   +
***
mov ebx edx +
push 4  +
lea edx [esp+0Ch+cbData] +
push edx  +
lea ecx [esp+10h+Data] +
mov edx ebx +
call @Registry@TRegistry@GetData$qqrx17System@AnsiStringpvir21Registry@TRegDataType  +
cmp byte ptr [esp+8+cbData] 3 +
jz loc_4A705E  +
mov eax ebx +
call @Registry@_16392_0  +
mov eax dword ptr [esp+8+Data] +
pop ecx  +
pop edx  +
pop ebx  +
retn   +
***
add esp 0FFFFFFF4h +
push ebx  +
push esi  +
push edi  +
mov [ebp+lpData] ecx +
mov edi edx +
mov ebx eax +
mov al [ebp+arg_0] +
call @Registry@_16394  +
mov esi eax +
mov eax [ebp+cbData] +
push eax  +
mov eax [ebp+lpData] +
push eax  +
push esi  +
push 0  +
mov eax edi +
call unknown_libname_550  +
push eax  +
mov eax [ebx+4] +
push eax  +
call RegSetValueExA  +
test eax eax +
jz loc_4A70C6  +
mov [ebp+var_C] edi +
mov [ebp+var_8] 0Bh +
lea eax [ebp+var_C] +
push eax  +
push 0  +
mov ecx off_4EA89C +
mov dl 1 +
mov eax ds:off_4A6C4C +
call sub_4AC274  +
call @System@@RaiseExcept$qqrv  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 8  +
***
add esp 0FFFFFFF4h +
push ebx  +
push esi  +
push edi  +
mov edi ecx +
mov esi edx +
mov ebx eax +
xor eax eax +
mov [ebp+Type] eax +
lea eax [ebp+cbData] +
push eax  +
push edi  +
lea eax [ebp+Type] +
push eax  +
push 0  +
mov eax esi +
call unknown_libname_550  +
push eax  +
mov eax [ebx+4] +
push eax  +
call RegQueryValueExA  +
test eax eax +
jz loc_4A7128  +
mov [ebp+var_C] esi +
mov [ebp+var_8] 0Bh +
lea eax [ebp+var_C] +
push eax  +
push 0  +
mov ecx off_4EA898 +
mov dl 1 +
mov eax ds:off_4A6C4C +
call sub_4AC274  +
call @System@@RaiseExcept$qqrv  +
mov ebx [ebp+cbData] +
mov eax [ebp+Type] +
call @Registry@_16395  +
mov edx [ebp+arg_0] +
mov [edx] al +
mov eax ebx +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 8  +
***
add esp 0FFFFFFF8h +
mov ecx esp +
call @Registry@TRegistry@GetDataInfo$qqrx17System@AnsiStringr21Registry@TRegDataInfo  +
pop ecx  +
pop edx  +
retn   +
***
add esp 0FFFFFFF8h +
push ebx  +
push esi  +
xor ecx ecx +
mov [ebp+var_8] ecx +
mov ebx edx +
mov esi eax +
xor eax eax +
push ebp  +
push offset loc_4A71DA  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
lea eax [ebp+var_8] +
mov edx ebx +
call unknown_libname_543  +
mov eax [ebp+var_8] +
call @Registry@_16393  +
mov ebx eax +
test bl bl +
jnz loc_4A719D  +
lea eax [ebp+var_8] +
mov ecx 1 +
mov edx 1 +
call @System@@LStrDelete$qqrv  +
xor eax eax +
mov [ebp+phkResult] eax +
lea eax [ebp+phkResult] +
push eax  +
mov eax [esi+18h] +
push eax  +
push 0  +
mov eax [ebp+var_8] +
call unknown_libname_550  +
push eax  +
mov edx ebx +
mov eax esi +
call unknown_libname_448  +
push eax  +
call RegOpenKeyExA  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4A71E1  +
lea eax [ebp+var_8] +
call unknown_libname_540  +
retn   +
jmp unknown_libname_539  +
jmp loc_4A71D1  +
mov eax [ebp+phkResult] +
pop esi  +
pop ebx  +
pop ecx  +
pop ecx  +
pop ebp  +
retn   +
***
add esp 0FFFFFFF4h +
push ebx  +
mov [ebp+var_4] eax +
mov eax [ebp+var_4] +
mov eax [eax+18h] +
mov [ebp+var_C] eax +
xor eax eax +
push ebp  +
push offset loc_4A7248  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov eax [ebp+var_4] +
mov dword ptr [eax+18h] 20009h +
mov eax [ebp+var_4] +
call @Registry@TRegistry@GetKey$qqrx17System@AnsiString  +
mov ebx eax +
test ebx ebx +
jz loc_4A722B  +
push ebx  +
call RegCloseKey  +
test ebx ebx +
setnz [ebp+var_5]  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4A724F  +
mov eax [ebp+var_4] +
mov edx [ebp+var_C] +
mov [eax+18h] edx +
retn   +
jmp unknown_libname_539  +
jmp loc_4A723E  +
mov al [ebp+var_5] +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
xor eax eax +
push ebp  +
push offset loc_4A72AC  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
inc dword_4F19FC  +
jnz loc_4A729E  +
mov eax offset off_4E6A48 +
mov ecx 2 +
mov edx ds:@$xp$13System@String +
call @System@@FinalizeArray$qqrpvt1ui  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4A72B3  +
retn   +
jmp unknown_libname_539  +
jmp locret_4A72AB  +
pop ebp  +
retn   +
***
cmp edx eax +
jg locret_4A72C6  +
mov eax edx +
retn   +
***
cmp edx eax +
jl locret_4A72CE  +
mov eax edx +
retn   +
***
xor eax eax +
push ebp  +
push offset loc_4A72F5  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
inc dword_4F1A00  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4A72FC  +
retn   +
jmp unknown_libname_539  +
jmp locret_4A72F4  +
pop ebp  +
retn   +
***
sub dword_4F1A00 1 +
retn   +
***
xor eax eax +
push ebp  +
push offset loc_4A735C  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
inc dword_4F1A04  +
jnz loc_4A734E  +
mov eax offset off_4E6A50 +
mov ecx 2 +
mov edx ds:@$xp$13System@String +
call @System@@FinalizeArray$qqrpvt1ui  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4A7363  +
retn   +
jmp unknown_libname_539  +
jmp locret_4A735B  +
pop ebp  +
retn   +
***
sub dword_4F1A04 1 +
retn   +
***
test dl dl +
jz loc_4A74AE  +
add esp 0FFFFFFF0h +
call unknown_libname_535  +
mov ebx edx +
mov esi eax +
xor edx edx +
mov eax esi +
call @System@TObject@$bctr$qqrv  +
mov byte ptr [esi+10h] 1 +
mov eax esi +
test bl bl +
jz loc_4A74D4  +
call sub_4BABC8  +
pop large dword ptr fs:0  +
add esp 0Ch +
mov eax esi +
pop esi  +
pop ebx  +
retn   +
***
mov esi edx +
mov ebx eax +
mov edx esi +
mov eax ebx +
call @Classes@TList@Get$qqri  +
pop esi  +
pop ebx  +
retn   +
***
retn   +
***
push edi  +
mov ebx ecx +
mov edi edx +
mov esi eax +
cmp byte ptr [esi+10h] 0 +
jz loc_4A7513  +
cmp bl 2 +
jnz loc_4A7513  +
mov eax edi +
call @System@TObject@Free$qqrv  +
mov ecx ebx +
mov edx edi +
mov eax esi +
call nullsub_15  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
call dword ptr [edx+4]  +
retn   +
***
mov edx ebx +
mov ecx [eax] +
call dword ptr [ecx]  +
mov eax ebx +
pop ebx  +
retn   +
***
test dl dl +
call unknown_libname_536  +
mov ebx edx +
mov esi eax +
mov eax [esi+4] +
call @System@TObject@Free$qqrv  +
mov edx ebx +
and dl 0FCh +
mov eax esi +
call sub_4BA7FC  +
test bl bl +
jle loc_4A75AA  +
mov eax esi +
call @System@@ClassDestroy$qqrp14System@TObject  +
pop esi  +
pop ebx  +
retn   +
***
mov edx [eax+4] +
mov ecx [edx+8] +
dec ecx  +
mov eax edx +
mov edx ecx +
call @Classes@TList@Get$qqri  +
retn   +
***
mov ebx eax +
mov eax ebx +
mov edx [eax] +
call dword ptr [edx+8]  +
mov esi eax +
mov eax [ebx+4] +
mov edx [eax+8] +
dec edx  +
call @Classes@TList@Delete$qqri  +
mov eax esi +
pop esi  +
pop ebx  +
retn   +
***
mov eax [eax+4] +
call @Classes@TList@Add$qqrpv  +
retn   +
***
xor eax eax +
push ebp  +
push offset loc_4A7615  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
inc dword_4F1A08  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4A761C  +
retn   +
jmp unknown_libname_539  +
jmp locret_4A7614  +
pop ebp  +
retn   +
***
sub dword_4F1A08 1 +
retn   +
***
xor eax eax +
push ebp  +
push offset loc_4A7755  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
inc dword_4F1A0C  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4A775C  +
retn   +
jmp unknown_libname_539  +
jmp locret_4A7754  +
pop ebp  +
retn   +
***
push ebx  +
mov ebx [ebp+arg_0] +
mov [ebx] eax +
mov [ebx+4] edx +
mov eax [ebp+arg_4] +
mov [ebx+0Ch] eax +
mov [ebx+8] ecx +
pop ebx  +
pop ebp  +
retn 8  +
***
mov [ecx+4] edx +
retn   +
***
push edi  +
mov ebx ecx +
mov esi eax +
push esi  +
mov edi esi +
mov esi edx +
movs   +
movs   +
movs   +
movs   +
pop esi  +
mov eax [ebx] +
cmp eax [edx] +
jle loc_4A77A5  +
mov [esi] eax +
mov eax [ebx+4] +
cmp eax [edx+4] +
jle loc_4A77B0  +
mov [esi+4] eax +
mov eax [ebx+8] +
cmp eax [edx+8] +
jge loc_4A77BB  +
mov [esi+8] eax +
mov eax [ebx+0Ch] +
cmp eax [edx+0Ch] +
jge loc_4A77C6  +
mov [esi+0Ch] eax +
mov eax esi +
call sub_4A77EC  +
mov ebx eax +
xor bl 1 +
test bl bl +
jnz loc_4A77E4  +
mov eax esi +
xor ecx ecx +
mov edx 10h +
call @System@@FillChar$qqrv  +
mov eax ebx +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov edx [eax+8] +
cmp edx [eax] +
jle loc_4A77FE  +
mov edx [eax+0Ch] +
cmp edx [eax+4] +
jle loc_4A77FE  +
xor eax eax +
retn   +
mov al 1 +
retn   +
***
test eax eax +
jz loc_4A7816  +
add [eax] edx +
add [eax+8] edx +
add [eax+4] ecx +
add [eax+0Ch] ecx +
mov al 1 +
retn   +
xor eax eax +
retn   +
***
push ebx  +
mov ecx [eax] +
sub ebx ecx +
sar ebx 1 +
jns loc_4A7847  +
adc ebx 0 +
add ebx ecx +
mov [edx] ebx +
mov ebx [eax+0Ch] +
mov ecx [eax+4] +
sub ebx ecx +
sar ebx 1 +
jns loc_4A785A  +
adc ebx 0 +
add ebx ecx +
mov [edx+4] ebx +
pop ebx  +
retn   +
***
xor eax eax +
push ebp  +
push offset loc_4A7889  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
inc dword_4F1A10  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4A7890  +
retn   +
jmp unknown_libname_539  +
jmp locret_4A7888  +
pop ebp  +
retn   +
***
sub dword_4F1A10 1 +
retn   +
***
push ebx  +
push edi  +
mov edi ecx +
mov esi edx +
mov ebx eax +
push esi  +
push edi  +
mov ecx ebx +
mov dl 1 +
mov eax ds:off_4A80D0 +
call sub_4AC274  +
call @System@@RaiseExcept$qqrv  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov ebx eax +
mov eax ebx +
call sub_4B97C0  +
mov esi eax +
mov eax esi +
xor ecx ecx +
mov edx ebx +
call @System@@FillChar$qqrv  +
mov eax esi +
pop esi  +
pop ebx  +
retn   +
***
mov edx [eax] +
mov dword_4E6AD0 edx +
mov edx off_4EAA78 +
mov ecx [eax+4] +
mov [edx] ecx +
mov ebx [eax+8] +
mov edx 0Ch +
call sub_4B97E0  +
call ebx  +
pop ebx  +
retn   +
***
mov eax 0Ch +
call sub_4B97C0  +
mov edx dword_4E6AD0 +
mov [eax] edx +
mov edx off_4EAA78 +
mov edx [edx] +
mov [eax+4] edx +
mov [eax+8] ebx +
mov dword_4E6AD0 eax +
mov eax off_4EAA78 +
mov dword ptr [eax] offset @SysUtils@_16485 +
pop ebx  +
retn   +
***
push edi  +
mov edi edx +
mov esi eax +
mov eax esi +
call sub_4BB610  +
mov ebx eax +
mov eax edi +
mov edx ebx +
call @System@@LStrSetLength$qqrv  +
mov edx esi +
mov esi [edi] +
test ebx ebx +
jz loc_4A87DE  +
mov al [edx] +
cmp al 61h +
jb loc_4A87D5  +
cmp al 7Ah +
ja loc_4A87D5  +
sub al 20h +
mov [esi] al +
inc edx  +
inc esi  +
dec ebx  +
test ebx ebx +
jnz loc_4A87C9  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
mov edi edx +
mov esi eax +
mov eax esi +
call sub_4BB610  +
mov ebx eax +
mov eax edi +
mov edx ebx +
call @System@@LStrSetLength$qqrv  +
mov edx esi +
mov esi [edi] +
test ebx ebx +
jz loc_4A881A  +
mov al [edx] +
cmp al 41h +
jb loc_4A8811  +
cmp al 5Ah +
ja loc_4A8811  +
add al 20h +
mov [esi] al +
inc edx  +
inc esi  +
dec ebx  +
test ebx ebx +
jnz loc_4A8805  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov esi eax +
mov edi edx +
or eax eax +
jz loc_4A882D  +
mov eax [eax-4] +
or edx edx +
jz loc_4A8834  +
mov edx [edx-4] +
mov ecx eax +
cmp ecx edx +
jbe loc_4A883C  +
mov ecx edx +
cmp ecx ecx +
cmps   +
jz loc_4A884A  +
movzx eax byte ptr [esi-1] +
movzx edx byte ptr [edi-1] +
sub eax edx +
pop edi  +
pop esi  +
retn   +
***
mov esi eax +
mov edi edx +
mov edx ecx +
xor eax eax +
and edx 3 +
shr ecx 1 +
shr ecx 1 +
cmps   +
jnz loc_4A886C  +
mov ecx edx +
cmps   +
jnz loc_4A886C  +
inc eax  +
pop edi  +
pop esi  +
retn   +
***
push ebx  +
mov esi eax +
mov edi edx +
or eax eax +
jz loc_4A887E  +
mov eax [eax-4] +
or edx edx +
jz loc_4A8885  +
mov edx [edx-4] +
mov ecx eax +
cmp ecx edx +
jbe loc_4A888D  +
mov ecx edx +
cmp ecx ecx +
cmps   +
jz loc_4A88BD  +
mov bl [esi-1] +
cmp bl 61h +
jb loc_4A88A3  +
cmp bl 7Ah +
ja loc_4A88A3  +
sub bl 20h +
mov bh [edi-1] +
cmp bh 61h +
jb loc_4A88B3  +
cmp bh 7Ah +
ja loc_4A88B3  +
sub bh 20h +
cmp bl bh +
jz loc_4A888F  +
movzx eax bl +
movzx edx bh +
sub eax edx +
pop ebx  +
pop edi  +
pop esi  +
retn   +
***
cmp eax edx +
jz loc_4A88E1  +
or eax eax +
jz locret_4A88E3  +
or edx edx +
jz loc_4A88E4  +
mov ecx [eax-4] +
cmp ecx [edx-4] +
jnz loc_4A88E4  +
call unknown_libname_458  +
test eax eax +
jnz loc_4A88E4  +
mov al 1 +
retn   +
xor eax eax +
retn   +
***
push edi  +
mov edi edx +
mov esi eax +
mov eax esi +
call sub_4BB610  +
mov ebx eax +
mov eax esi +
call unknown_libname_550  +
mov edx eax +
mov eax edi +
mov ecx ebx +
call @@LStrFromPCharLen$qqrr10AnsiStringpci  +
test ebx ebx +
jle loc_4A8917  +
push ebx  +
mov eax [edi] +
push eax  +
call CharLowerBuffA  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov esi edx +
mov esi edx +
mov esi edx +
mov ebx eax +
mov edx esi +
mov eax ebx +
call unknown_libname_462  +
test eax eax +
setz al  +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
push edi  +
push ebp  +
mov ebp edx +
mov edi eax +
mov eax edi +
call sub_4BB610  +
mov esi eax +
mov ebx 1 +
jmp loc_4A89DD  +
inc ebx  +
cmp esi ebx +
jl loc_4A89E8  +
cmp byte ptr [edi+ebx-1] 20h +
jbe loc_4A89DC  +
cmp esi ebx +
jge loc_4A89F6  +
mov eax ebp +
call unknown_libname_540  +
jmp loc_4A8A0C  +
dec esi  +
cmp byte ptr [edi+esi-1] 20h +
jbe loc_4A89F5  +
push ebp  +
mov ecx esi +
sub ecx ebx +
inc ecx  +
mov edx ebx +
mov eax edi +
call @System@@LStrCopy$qqrv  +
pop ebp  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
add esp 0FFFFFFECh +
push ebx  +
push esi  +
push edi  +
xor ebx ebx +
mov [ebp+var_14] ebx +
mov [ebp+var_8] ecx +
mov [ebp+var_1] dl +
mov edi eax +
xor eax eax +
push ebp  +
push offset loc_4A8B6D  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov ebx edi +
mov eax edi +
call sub_4BB610  +
mov esi eax +
add esi ebx +
mov eax edi +
call sub_4BB610  +
mov [ebp+var_C] eax +
cmp esi ebx +
jbe loc_4A8AAB  +
mov al [ebx] +
mov edx eax +
sub dl 0Ah +
jz loc_4A8A63  +
sub dl 3 +
jz loc_4A8A6E  +
jmp loc_4A8A8D  +
cmp [ebp+var_1] 1 +
jnz loc_4A8AA6  +
inc [ebp+var_C]  +
jmp loc_4A8AA6  +
cmp [ebp+var_1] 1 +
jnz loc_4A8A82  +
cmp byte ptr [ebx+1] 0Ah +
jnz loc_4A8A7D  +
inc ebx  +
jmp loc_4A8AA6  +
inc [ebp+var_C]  +
jmp loc_4A8AA6  +
cmp byte ptr [ebx+1] 0Ah +
jnz loc_4A8AA6  +
dec [ebp+var_C]  +
jmp loc_4A8AA6  +
and eax 0FFh +
bt dword_4E6AAC eax +
jnb loc_4A8AA6  +
mov eax ebx +
call sub_4ACC48  +
mov ebx eax +
jmp loc_4A8AA7  +
inc ebx  +
cmp esi ebx +
ja loc_4A8A53  +
lea eax [ebp+var_14] +
mov edx ebx +
call unknown_libname_545  +
mov eax [ebp+var_14] +
call sub_4BB610  +
cmp eax [ebp+var_C] +
jnz loc_4A8AD1  +
mov eax [ebp+var_8] +
mov edx edi +
call unknown_libname_542  +
jmp loc_4A8B57  +
mov ebx edi +
mov eax [ebp+var_8] +
mov ecx [ebp+var_C] +
xor edx edx +
call @@LStrFromPCharLen$qqrr10AnsiStringpci  +
mov edi [ebp+var_8] +
mov edi [edi] +
cmp esi ebx +
jbe loc_4A8B57  +
mov al [ebx] +
mov edx eax +
sub dl 0Ah +
jz loc_4A8AF9  +
sub dl 3 +
jz loc_4A8B0A  +
jmp loc_4A8B21  +
cmp [ebp+var_1] 1 +
jnz loc_4A8B03  +
mov byte ptr [edi] 0Dh +
inc edi  +
mov byte ptr [edi] 0Ah +
inc edi  +
inc ebx  +
jmp loc_4A8B53  +
cmp [ebp+var_1] 1 +
jnz loc_4A8B14  +
mov byte ptr [edi] 0Dh +
inc edi  +
mov byte ptr [edi] 0Ah +
inc edi  +
inc ebx  +
cmp byte ptr [ebx] 0Ah +
jnz loc_4A8B53  +
inc ebx  +
jmp loc_4A8B53  +
and eax 0FFh +
bt dword_4E6AAC eax +
jnb loc_4A8B4D  +
mov eax ebx +
call sub_4ACC28  +
mov [ebp+var_10] eax +
mov edx edi +
mov eax ebx +
mov ecx [ebp+var_10] +
call sub_4B9A24  +
add edi [ebp+var_10] +
add ebx [ebp+var_10] +
jmp loc_4A8B53  +
mov al [ebx] +
mov [edi] al +
inc edi  +
inc ebx  +
cmp esi ebx +
ja loc_4A8AE9  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4A8B74  +
lea eax [ebp+var_14] +
call unknown_libname_540  +
retn   +
jmp unknown_libname_539  +
jmp loc_4A8B64  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
push edi  +
mov esi eax +
xor ebx ebx +
mov eax esi +
call sub_4BB610  +
test eax eax +
jz loc_4A8BD9  +
mov al [esi] +
add al 0BFh +
sub al 1Ah +
jb loc_4A8BA0  +
sub al 4 +
jz loc_4A8BA0  +
add al 0FEh +
sub al 1Ah +
jnb loc_4A8BD9  +
mov eax esi +
call sub_4BB610  +
sub eax 2 +
jl loc_4A8BD7  +
inc eax  +
mov edi 2 +
mov dl [esi+edi-1] +
add dl 0D0h +
sub dl 0Ah +
jb loc_4A8BD3  +
add dl 0F9h +
sub dl 1Ah +
jb loc_4A8BD3  +
sub dl 4 +
jz loc_4A8BD3  +
add dl 0FEh +
sub dl 1Ah +
jnb loc_4A8BD9  +
inc edi  +
dec eax  +
jnz loc_4A8BB2  +
mov bl 1 +
mov eax ebx +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
add esp 0FFFFFFF8h +
push 0  +
mov [esp+0Ch+var_8] eax +
mov [esp+0Ch+var_4] 0 +
lea ecx [esp+0Ch+var_8] +
mov eax edx +
mov edx offset _str__d.Text +
call sub_4A9910  +
pop ecx  +
pop edx  +
retn   +
***
add esp 0FFFFFFF8h +
push 0  +
lea edx [ebp+arg_0] +
mov [ebp+var_8] edx +
mov [ebp+var_4] 10h +
lea ecx [ebp+var_8] +
mov edx offset _str__d_0.Text +
call sub_4A9910  +
pop ecx  +
pop ecx  +
pop ebp  +
retn 8  +
***
add esp 0FFFFFFF0h +
push 1  +
mov [esp+14h+var_10] edx +
mov [esp+14h+var_C] 0 +
mov [esp+14h+var_8] eax +
mov [esp+14h+var_4] 0 +
lea eax [esp+14h+var_10] +
mov edx offset _str____x.Text +
xchg eax ecx +
call sub_4A9910  +
add esp 10h +
retn   +
***
add esp 0FFFFFFF4h +
mov ebx eax +
mov edx esp +
mov eax ebx +
call sub_4BA0E8  +
mov esi eax +
cmp [esp+0Ch+var_C] 0 +
jz loc_4A8CB1  +
mov [esp+0Ch+var_8] ebx +
mov [esp+0Ch+var_4] 0Bh +
lea edx [esp+0Ch+var_8] +
mov eax off_4EA8D0 +
xor ecx ecx +
call unknown_libname_457  +
mov eax esi +
add esp 0Ch +
pop esi  +
pop ebx  +
retn   +
***
mov ebx edx +
mov edx esp +
call sub_4BA0E8  +
cmp [esp+4+var_4] 0 +
jz loc_4A8CCF  +
mov eax ebx +
pop edx  +
pop ebx  +
retn   +
***
push ecx  +
mov esi edx +
mov ebx eax +
mov edx esp +
mov eax ebx +
call sub_4BA0E8  +
mov [esi] eax +
cmp [esp+4+var_4] 0 +
setz al  +
pop edx  +
pop esi  +
pop ebx  +
retn   +
***
push ecx  +
mov eax dword_4F1B1C +
call sub_4BC6BC  +
test eax eax +
jnz loc_4A8D4B  +
push 1  +
mov eax offset dword_4F1B1C +
mov ecx 1 +
mov edx ds:off_4A84C4 +
call unknown_libname_559  +
add esp 4 +
mov eax dword_4F1B1C +
mov edx offset _str_True_2.Text +
call unknown_libname_542  +
mov eax dword_4F1B20 +
call sub_4BC6BC  +
test eax eax +
jnz locret_4A8D82  +
push 1  +
mov eax offset dword_4F1B20 +
mov ecx 1 +
mov edx ds:off_4A84E8 +
call unknown_libname_559  +
add esp 4 +
mov eax dword_4F1B20 +
mov edx offset _str_False_2.Text +
call unknown_libname_542  +
retn   +
***
push ecx  +
push ebx  +
push esi  +
push edi  +
mov [ebp+var_1] 0 +
mov esi edx +
test esi esi +
jl loc_4A8DD5  +
inc esi  +
mov ebx eax +
mov eax [ebp+arg_0] +
mov eax [eax-4] +
mov edx [ebx] +
call @LibMain@_16446  +
test al al +
jz loc_4A8DCF  +
mov [ebp+var_1] 1 +
jmp loc_4A8DD5  +
add ebx 4 +
dec esi  +
jnz loc_4A8DB8  +
mov al [ebp+var_1] +
pop edi  +
pop esi  +
pop ebx  +
pop ecx  +
pop ebp  +
retn   +
***
add esp 0FFFFFFF0h +
push ebx  +
mov ebx edx +
mov [ebp+var_4] eax +
lea edx [ebp+var_10] +
mov eax [ebp+var_4] +
call sub_4AA08C  +
mov edx eax +
test dl dl +
jz loc_4A8E0E  +
fld  [ebp+var_10] +
fcomp  ds:flt_4A8E60 +
fnstsw  ax +
sahf   +
setnz byte ptr [ebx]  +
jmp loc_4A8E57  +
call sub_4A8D14  +
push ebp  +
mov eax dword_4F1B1C +
call sub_4BC6C4  +
mov edx eax +
mov eax dword_4F1B1C +
call sub_4A8DA4  +
pop ecx  +
mov edx eax +
test dl dl +
jz loc_4A8E36  +
mov byte ptr [ebx] 1 +
jmp loc_4A8E57  +
push ebp  +
mov eax dword_4F1B20 +
call sub_4BC6C4  +
mov edx eax +
mov eax dword_4F1B20 +
call sub_4A8DA4  +
pop ecx  +
mov edx eax +
test dl dl +
jz loc_4A8E57  +
mov byte ptr [ebx] 0 +
mov eax edx +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
mov esi ecx +
mov ebx eax +
test dl dl +
jz loc_4A8EB2  +
call sub_4A8D14  +
test bl bl +
jz loc_4A8EA0  +
mov eax esi +
mov edx dword_4F1B1C +
mov edx [edx] +
call unknown_libname_542  +
jmp loc_4A8EC4  +
mov eax esi +
mov edx dword_4F1B20 +
mov edx [edx] +
call unknown_libname_542  +
pop esi  +
pop ebx  +
retn   +
mov eax esi +
xor edx edx +
mov dl bl +
mov edx off_4E6AD4[edx*4] +
call unknown_libname_542  +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
mov ebx edx +
mov edi eax +
or eax 0FFFFFFFFh +
mov esi ebx +
and esi 3 +
cmp esi 2 +
ja loc_4A8F1E  +
mov edx ebx +
and edx 0F0h +
shr edx 4 +
cmp edx 40h +
ja loc_4A8F1E  +
push 0  +
push 80h  +
push 3  +
push 0  +
mov eax ebx +
and eax 0F0h +
shr eax 4 +
mov eax dwShareMode[eax*4] +
push eax  +
mov eax dwDesiredAccess[esi*4] +
push eax  +
mov eax edi +
call unknown_libname_550  +
push eax  +
call CreateFileA  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push 0  +
retn   +
***
push edi  +
push edi  +
add esp 0FFFFFFF8h +
retn   +
***
mov esi eax +
mov eax esi +
call sub_4BB610  +
mov ebx eax +
test ebx ebx +
jz loc_4A9010  +
jmp loc_4A8FFC  +
dec ebx  +
mov edx ebx +
mov eax esi +
call sub_4ACA18  +
cmp al 2 +
jz loc_4A8FFB  +
lea eax [esi+ebx-1] +
pop esi  +
pop ebx  +
retn   +
xor eax eax +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
push ebp  +
mov esi edx +
mov ebx eax +
mov eax esi +
call sub_4BB610  +
mov edi eax +
mov eax ebx +
call unknown_libname_550  +
mov ebp eax +
test edi edi +
jle loc_4A905E  +
mov bl [esi+edi-1] +
test bl bl +
jz loc_4A9059  +
mov edx ebx +
mov eax ebp +
call sub_4A930C  +
test eax eax +
jz loc_4A9059  +
mov edx edi +
mov eax esi +
call sub_4ACA18  +
cmp al 2 +
jnz loc_4A905E  +
dec edi  +
dec edi  +
test edi edi +
jg loc_4A9036  +
mov eax edi +
pop ebp  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
mov edi edx +
mov ebx eax +
mov edx ebx +
mov eax offset _str___.Text +
call sub_4A9018  +
mov esi eax +
push edi  +
lea edx [esi+1] +
mov ecx 7FFFFFFFh +
mov eax ebx +
call @System@@LStrCopy$qqrv  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
mov edi edx +
mov esi eax +
mov edx esi +
mov eax offset _str____.Text +
call sub_4A9018  +
mov ebx eax +
test ebx ebx +
jle loc_4A90D1  +
cmp byte ptr [esi+ebx-1] 2Eh +
jnz loc_4A90D1  +
push edi  +
mov ecx 7FFFFFFFh +
mov edx ebx +
mov eax esi +
call @System@@LStrCopy$qqrv  +
jmp loc_4A90D8  +
mov eax edi +
call unknown_libname_540  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
add esp 0FFFFFFE8h +
push ebx  +
mov eax [ebp+arg_0] +
test eax eax +
jnz loc_4A90F8  +
xor eax eax +
lea edx [ebp+TotalNumberOfClusters] +
push edx  +
lea edx [ebp+NumberOfFreeClusters] +
push edx  +
lea edx [ebp+BytesPerSector] +
push edx  +
lea edx [ebp+SectorsPerCluster] +
push edx  +
push eax  +
call GetDiskFreeSpaceA  +
mov ebx eax +
mov eax [ebp+SectorsPerCluster] +
imul  [ebp+BytesPerSector] +
xor edx edx +
mov [ebp+var_18] eax +
mov [ebp+var_14] edx +
mov eax [ebp+NumberOfFreeClusters] +
xor edx edx +
push edx  +
push eax  +
mov eax [ebp+var_18] +
mov edx [ebp+var_14] +
call unknown_libname_558  +
mov ecx [ebp+arg_4] +
mov [ecx] eax +
mov [ecx+4] edx +
mov eax [ebp+TotalNumberOfClusters] +
xor edx edx +
push edx  +
push eax  +
mov eax [ebp+var_18] +
mov edx [ebp+var_14] +
call unknown_libname_558  +
mov ecx [ebp+arg_8] +
mov [ecx] eax +
mov [ecx+4] edx +
mov eax ebx +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 10h  +
***
mov edx edi +
mov edi eax +
mov ecx 0FFFFFFFFh +
xor al al +
scas   +
mov eax 0FFFFFFFEh +
sub eax ecx +
mov edi edx +
retn   +
***
mov edx edi +
mov edi eax +
mov ecx 0FFFFFFFFh +
xor al al +
scas   +
lea eax [edi-1] +
mov edi edx +
retn   +
***
xchg eax edx +
call sub_4B9A24  +
mov eax esi +
pop esi  +
retn   +
***
mov esi eax +
mov esi eax +
mov edi edx +
mov ecx 0FFFFFFFFh +
xor al al +
scas   +
not ecx  +
mov edi esi +
mov esi edx +
mov edx ecx +
shr ecx 2 +
movs   +
mov ecx edx +
and ecx 3 +
movs   +
lea eax [edi-1] +
pop esi  +
pop edi  +
retn   +
***
push ebx  +
mov esi eax +
mov edi edx +
mov ebx ecx +
xor al al +
test ecx ecx +
jz loc_4A9200  +
scas   +
jnz loc_4A9200  +
inc ecx  +
sub ebx ecx +
mov edi esi +
mov esi edx +
mov edx edi +
mov ecx ebx +
shr ecx 2 +
movs   +
mov ecx ebx +
and ecx 3 +
movs   +
stos   +
mov eax edx +
pop ebx  +
pop esi  +
pop edi  +
retn   +
***
mov ebx edx +
mov esi eax +
mov eax ebx +
call sub_4BB610  +
push eax  +
mov eax ebx +
call unknown_libname_550  +
mov edx eax +
mov eax esi +
pop ecx  +
call @Sysutils@StrLCopy$qqrpcpxcui  +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
mov edi ecx +
mov esi edx +
mov ebx eax +
mov eax esi +
call unknown_libname_550  +
mov edx eax +
mov ecx edi +
mov eax ebx +
call @Sysutils@StrLCopy$qqrpcpxcui  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov edi edx +
mov esi eax +
mov ecx 0FFFFFFFFh +
xor eax eax +
scas   +
not ecx  +
mov edi edx +
xor edx edx +
cmps   +
mov al [esi-1] +
mov dl [edi-1] +
sub eax edx +
pop esi  +
pop edi  +
retn   +
***
mov edi edx +
mov esi eax +
mov ecx 0FFFFFFFFh +
xor eax eax +
scas   +
not ecx  +
mov edi edx +
xor edx edx +
cmps   +
jz loc_4A92C2  +
mov al [esi-1] +
cmp al 61h +
jb loc_4A92AE  +
cmp al 7Ah +
ja loc_4A92AE  +
sub al 20h +
mov dl [edi-1] +
cmp dl 61h +
jb loc_4A92BE  +
cmp dl 7Ah +
ja loc_4A92BE  +
sub dl 20h +
sub eax edx +
jz loc_4A929D  +
pop esi  +
pop edi  +
retn   +
***
push ebx  +
mov edi edx +
mov esi eax +
mov ebx ecx +
xor eax eax +
or ecx ecx +
jz loc_4A9306  +
scas   +
sub ebx ecx +
mov ecx ebx +
mov edi edx +
xor edx edx +
cmps   +
jz loc_4A9306  +
mov al [esi-1] +
cmp al 61h +
jb loc_4A92F2  +
cmp al 7Ah +
ja loc_4A92F2  +
sub al 20h +
mov dl [edi-1] +
cmp dl 61h +
jb loc_4A9302  +
cmp dl 7Ah +
ja loc_4A9302  +
sub dl 20h +
sub eax edx +
jz loc_4A92E1  +
pop ebx  +
pop esi  +
pop edi  +
retn   +
***
mov edi eax +
push ebx  +
or eax eax +
jz loc_4A9377  +
or edx edx +
jz loc_4A9377  +
mov ebx eax +
mov edi edx +
xor al al +
mov ecx 0FFFFFFFFh +
scas   +
not ecx  +
dec ecx  +
jz loc_4A9377  +
mov esi ecx +
mov edi ebx +
mov ecx 0FFFFFFFFh +
scas   +
not ecx  +
sub ecx esi +
jbe loc_4A9377  +
mov edi ebx +
lea ebx [esi-1] +
mov esi edx +
lods   +
scas   +
jnz loc_4A9377  +
mov eax ecx +
push edi  +
mov ecx ebx +
cmps   +
pop edi  +
mov ecx eax +
jnz loc_4A935F  +
lea eax [edi-1] +
jmp loc_4A9379  +
xor eax eax +
pop ebx  +
pop esi  +
pop edi  +
retn   +
***
mov esi edx +
mov ebx eax +
mov eax esi +
mov edx ebx +
call unknown_libname_545  +
pop esi  +
pop ebx  +
retn   +
***
add ebx 4 +
sub eax 4 +
mov eax [eax] +
sub eax 4 +
retn   +
***
mov ebx eax +
test ebx ebx +
jnz loc_4A93C1  +
xor eax eax +
pop esi  +
pop ebx  +
retn   +
mov eax ebx +
call @Sysutils@StrLen$qqrpxc  +
mov esi eax +
inc esi  +
mov eax esi +
call sub_4A9394  +
mov ecx esi +
mov edx ebx +
call sub_4A9188  +
pop esi  +
pop ebx  +
retn   +
***
test eax eax +
jz locret_4A93EE  +
sub eax 4 +
mov edx [eax] +
call sub_4B97E0  +
retn   +
***
push edi  +
mov esi edx +
mov ebx eax +
mov eax ebx +
mov edx esi +
call sub_4BC1F8  +
pop esi  +
pop ebx  +
retn   +
***
mov eax ebx +
add esp 0FFFFFF8Ch +
xor ebx ebx +
and al 0DFh +
mov ecx 0Ah +
lea esi [ebp-51h] +
push ebx  +
push ecx  +
push 0  +
push ecx  +
mov eax [ebx] +
mov edx [ebx+4] +
mov ebx [ebp-4] +
call @System@@_llumod$qqrv  +
pop ecx  +
pop ebx  +
xchg eax edx +
add dl 30h +
cmp dl 3Ah +
jb loc_4A967D  +
add dl 7 +
dec esi  +
mov [esi] dl +
push ebx  +
push ecx  +
push 0  +
push ecx  +
mov eax [ebx] +
mov edx [ebx+4] +
mov ebx [ebp-4] +
call @System@@_lludiv$qqrv  +
pop ecx  +
pop ebx  +
mov [ebx] eax +
mov [ebx+4] edx +
or eax edx +
jnz loc_4A965D  +
lea ecx [ebp-51h] +
sub ecx esi +
mov edx [ebp-24h] +
cmp edx 10h +
jbe loc_4A96AB  +
retn   +
sub edx ecx +
jbe locret_4A96B9  +
add ecx edx +
mov al 30h +
dec esi  +
mov [esi] al +
dec edx  +
jnz loc_4A96B3  +
retn   +
***
mov ecx 0Ah +
lea esi [ebp-61h] +
xor edx edx +
div  ecx +
add dl 30h +
cmp dl 3Ah +
jb loc_4A96FD  +
add dl 7 +
dec esi  +
mov [esi] dl +
or eax eax +
jnz loc_4A96EE  +
lea ecx [ebp-61h] +
sub ecx esi +
mov edx [ebp-24h] +
cmp edx 10h +
jbe loc_4A9712  +
retn   +
sub edx ecx +
jbe locret_4A9720  +
add ecx edx +
mov al 30h +
dec esi  +
mov [esi] al +
dec edx  +
jnz loc_4A971A  +
retn   +
***
lea eax [ebp-14h] +
mov ebx [ebp-4] +
call unknown_libname_540  +
pop eax  +
pop ebx  +
retn   +
***
call sub_4A985C  +
pop edi  +
pop esi  +
pop ebx  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 0Ch  +
***
push ebx  +
push ebx  +
push ecx  +
mov ecx [ebp+arg_0] +
xchg eax ecx +
xchg edx ecx +
call sub_4A9910  +
pop ebp  +
retn 4  +
***
add esp 0FFFFF004h +
push eax  +
add esp 0FFFFFFF8h +
push ebx  +
push esi  +
mov [ebp+var_8] ecx +
mov [ebp+var_4] edx +
mov esi eax +
mov ebx 1000h +
mov eax [ebp+var_4] +
call sub_4BB610  +
cmp eax 0C00h +
jge loc_4A9961  +
mov eax [ebp+var_4] +
call sub_4BB610  +
push eax  +
mov eax [ebp+var_8] +
push eax  +
mov eax [ebp+arg_0] +
push eax  +
mov ecx [ebp+var_4] +
lea eax [ebp+var_1008] +
mov edx 0FFFh +
call sub_4A9468  +
jmp loc_4A996D  +
mov eax [ebp+var_4] +
call sub_4BB610  +
mov ebx eax +
mov eax ebx +
mov edx ebx +
dec edx  +
cmp eax edx +
jl loc_4A99B7  +
jmp loc_4A99A6  +
add ebx ebx +
mov eax esi +
call unknown_libname_540  +
mov eax esi +
mov edx ebx +
call @System@@LStrSetLength$qqrv  +
mov eax [ebp+var_4] +
call sub_4BB610  +
push eax  +
mov eax [ebp+var_8] +
push eax  +
mov eax [ebp+arg_0] +
push eax  +
mov ecx [ebp+var_4] +
mov edx ebx +
dec edx  +
mov eax [esi] +
call sub_4A9468  +
mov edx ebx +
dec edx  +
cmp eax edx +
jge loc_4A9976  +
mov edx esi +
xchg eax edx +
call @System@@LStrSetLength$qqrv  +
jmp loc_4A99C5  +
lea edx [ebp+var_1008] +
mov ecx esi +
xchg eax ecx +
call @@LStrFromPCharLen$qqrr10AnsiStringpci  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 4  +
***
stos   +
or bl bl +
jnz loc_4A99DC  +
xor edx edx +
jmp loc_4A99E6  +
or edx edx +
jge loc_4A99E6  +
mov al 2Dh +
neg edx  +
jmp loc_4A99EC  +
or ah ah +
jz loc_4A99ED  +
mov al ah +
stos   +
xchg eax edx +
push eax  +
mov ebx esp +
xor edx edx +
div  flt_4E6B10[esi] +
add dl 30h +
mov [ebx] dl +
inc ebx  +
dec ecx  +
or eax eax +
jnz loc_4A99F1  +
or ecx ecx +
jg loc_4A99F1  +
dec ebx  +
mov al [ebx] +
stos   +
cmp ebx esp +
jnz loc_4A9A08  +
pop eax  +
pop esi  +
retn   +
***
add esp 0FFFFFFD4h +
push edi  +
push esi  +
push ebx  +
mov [ebp+var_4] eax +
mov al byte_4F1A1B +
mov [ebp+var_5] al +
mov al byte_4F1A1A +
mov [ebp+var_6] al +
mov eax dword_4F1A14 +
mov [ebp+var_C] eax +
mov al byte_4F1A18 +
mov [ebp+var_D] al +
mov al byte_4F1A19 +
mov [ebp+var_E] al +
mov [ebp+var_14] 0 +
mov eax 13h +
cmp cl 0 +
jnz loc_4A9A70  +
mov eax [ebp+arg_4] +
cmp eax 2 +
jge loc_4A9A66  +
mov eax 2 +
cmp eax 12h +
jle loc_4A9A70  +
mov eax 12h +
mov [ebp+arg_4] eax +
push eax  +
mov eax 270Fh +
cmp [ebp+arg_8] 2 +
jb loc_4A9A82  +
mov eax [ebp+arg_0] +
push eax  +
lea eax [ebp+var_2C] +
call @Sysutils@FloatToDecimal$qqrr18Sysutils@TFloatRecpxv20Sysutils@TFloatValueii  +
mov edi [ebp+var_4] +
movzx eax word ptr [ebp+var_2C] +
sub eax 7FFFh +
cmp eax 2 +
jnb loc_4A9AB6  +
mov ecx eax +
call sub_4A9B13  +
lea esi dword_4A9B04[ecx+ecx*2] +
add esi [ebp+var_14] +
mov ecx 3 +
movs   +
jmp loc_4A9AE3  +
lea esi [ebp+var_2C+3] +
movzx ebx [ebp+arg_8] +
cmp bl 1 +
jz loc_4A9AD2  +
cmp bl 4 +
ja loc_4A9AD0  +
movsx eax word ptr [ebp+var_2C] +
cmp eax [ebp+arg_4] +
jle loc_4A9AD2  +
mov bl 0 +
lea ebx off_4A9AF0[ebx*4] +
add ebx [ebp+var_14] +
mov ebx [ebx] +
add ebx [ebp+var_14] +
call ebx  +
mov eax edi +
sub eax [ebp+var_4] +
pop ebx  +
pop esi  +
pop edi  +
jmp loc_4A9CE3  +
***
lods   +
cmp byte ptr [ebp-2Ah] 0 +
call sub_4A9B13  +
call sub_4A9B13  +
xor ebx ebx +
test esi esi +
jz loc_4A9C7D  +
mov ecx [esi-4] +
movs   +
pop esi  +
retn   +
***
inc eax  +
sub ah [eax+eax*2] +
inc eax  +
inc eax  +
and al 20h +
sub al [eax+40h] +
sub ah [eax] +
and al 40h +
inc eax  +
sub [edx+ebp] ah +
sub [eax+2Dh] eax +
and al 2Ah +
inc eax  +
inc eax  +
and al 2Dh +
sub al [eax+40h] +
and al 2Ah +
sub eax 2A284040h +
and al 29h +
inc eax  +
sub eax 4040242Ah +
sub ch ds:2A404024h +
and al 2Dh +
inc eax  +
inc eax  +
sub eax 4024202Ah +
sub eax 402A2024h +
sub ah [eax] +
and al 2Dh +
inc eax  +
and al 20h +
sub ch ds:2D202440h +
sub al [eax+2Ah] +
sub eax 28402420h +
and al 20h +
sub ch [ecx] +
sub [edx] ch +
and [ecx+ebp] ah +
***
mov esp ebp +
pop ebp  +
retn 0Ch  +
***
add esp 0FFFFFFE0h +
mov ax [esi+8] +
mov edx eax +
and eax 7FFFh +
jz loc_4A9D44  +
cmp eax 7FFFh +
jnz loc_4A9D4F  +
test word ptr [esi+6] 8000h +
jz loc_4A9D46  +
cmp dword ptr [esi] 0 +
jnz loc_4A9D43  +
cmp dword ptr [esi+4] 80000000h +
jz loc_4A9D46  +
inc eax  +
xor edx edx +
mov byte ptr [ebx+3] 0 +
jmp loc_4A9E1C  +
fld  tbyte ptr [esi] +
sub eax 3FFFh +
imul eax eax +
sar eax 10h +
inc eax  +
mov [ebp-8] eax +
mov eax 12h +
sub eax [ebp-8] +
fabs   +
push ebx  +
mov ebx [ebp-4] +
call sub_4BA364  +
pop ebx  +
frndint   +
mov edi [ebp-4] +
fld  tbyte_4E6B04[edi] +
fcomp  st(1) +
fstsw  word ptr [ebp-0Ah] +
wait   +
test word ptr [ebp-0Ah] 4100h +
jz loc_4A9D9A  +
fidiv  flt_4E6B10[edi] +
inc dword ptr [ebp-8]  +
fbstp  tbyte ptr [ebp-18h] +
lea edi [ebx+3] +
mov edx 9 +
wait   +
mov al [edx+ebp-19h] +
mov ah al +
shr al 4 +
and ah 0Fh +
add ax 3030h +
stos   +
dec edx  +
jnz loc_4A9DA6  +
xor al al +
stos   +
mov edi [ebp-8] +
add edi [ebp+8] +
jns loc_4A9DCD  +
xor eax eax +
jmp loc_4A9D44  +
cmp edi [ebp+0Ch] +
jb loc_4A9DD5  +
mov edi [ebp+0Ch] +
cmp edi 12h +
jnb loc_4A9E01  +
cmp byte ptr [ebx+edi+3] 35h +
jb loc_4A9E06  +
mov byte ptr [ebx+edi+3] 0 +
dec edi  +
js loc_4A9DF6  +
inc byte ptr [ebx+edi+3]  +
cmp byte ptr [ebx+edi+3] 39h +
ja loc_4A9DE1  +
jmp loc_4A9E15  +
mov word ptr [ebx+3] 31h +
inc dword ptr [ebp-8]  +
jmp loc_4A9E15  +
mov edi 12h +
mov byte ptr [ebx+edi+3] 0 +
dec edi  +
js loc_4A9E27  +
cmp byte ptr [ebx+edi+3] 30h +
jz loc_4A9E06  +
mov dx [esi+8] +
mov eax [ebp-8] +
shr dx 0Fh +
mov [ebx] ax +
mov [ebx+2] dl +
retn   +
xor edx edx +
jmp loc_4A9E19  +
***
mov eax [esi] +
mov edx [esi+4] +
mov ecx eax +
or ecx edx +
jz loc_4A9F01  +
or edx edx +
jns loc_4A9E55  +
neg edx  +
neg eax  +
sbb edx 0 +
xor ecx ecx +
mov edi [ebp+8] +
or edi edi +
jge loc_4A9E60  +
xor edi edi +
cmp edi 4 +
jl loc_4A9E84  +
mov edi 4 +
inc ecx  +
sub eax 0A7640000h +
sbb edx 0DE0B6B3h +
jnb loc_4A9E6A  +
dec ecx  +
add eax 0A7640000h +
adc edx 0DE0B6B3h +
mov [ebp-20h] eax +
mov [ebp-1Ch] edx +
fild  qword ptr [ebp-20h] +
mov edx edi +
mov eax 4 +
sub eax edx +
jz loc_4A9EA2  +
mov edi [ebp-4] +
fidiv  dword ptr ds:loc_4A9E27[edi+eax*4] +
fbstp  tbyte ptr [ebp-18h] +
lea edi [ebx+3] +
wait   +
or ecx ecx +
jnz loc_4A9EC8  +
mov ecx 9 +
mov al [ecx+ebp-19h] +
mov ah al +
shr al 4 +
jnz loc_4A9EDB  +
mov al ah +
and al 0Fh +
jnz loc_4A9EE2  +
dec ecx  +
jnz loc_4A9EB2  +
jmp loc_4A9F01  +
mov al cl +
add al 30h +
stos   +
mov ecx 9 +
mov al [ecx+ebp-19h] +
mov ah al +
shr al 4 +
add al 30h +
stos   +
mov al ah +
and al 0Fh +
add al 30h +
stos   +
dec ecx  +
jnz loc_4A9ED2  +
mov eax edi +
lea ecx [ebx+edx+3] +
sub eax ecx +
mov byte ptr [edi] 0 +
dec edi  +
cmp byte ptr [edi] 30h +
jz loc_4A9EF0  +
mov edx [esi+4] +
shr edx 1Fh +
jmp loc_4A9F08  +
xor eax eax +
xor edx edx +
mov [ebx+3] al +
mov [ebx] ax +
mov [ebx+2] dl +
retn   +
***
add esp 0FFFFFFF4h +
lods   +
xor eax eax +
xor eax eax +
xor edx edx +
mov cl [esi] +
cmp cl 2Bh +
jz loc_4AA006  +
cmp cl 2Dh +
jnz loc_4AA007  +
inc esi  +
mov al [esi] +
sub al 3Ah +
add al 0Ah +
jnb loc_4AA01D  +
inc esi  +
imul edx edx +
add edx eax +
cmp edx 1F4h +
jb loc_4AA007  +
cmp cl 2Dh +
jnz locret_4AA024  +
neg edx  +
retn   +
***
add esp 0FFFFFFC0h +
push ebx  +
mov ebx eax +
push 0  +
push 0Fh  +
push 0  +
lea edx [ebp+arg_0] +
lea eax [ebp+var_40] +
xor ecx ecx +
call @Sysutils@FloatToText$qqrpcpxv20Sysutils@TFloatValue21Sysutils@TFloatFormatii  +
mov ecx eax +
lea edx [ebp+var_40] +
mov eax ebx +
call @@LStrFromPCharLen$qqrr10AnsiStringpci  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 0Ch  +
***
add esp 0FFFFFFC0h +
push ebx  +
mov ebx eax +
push 0  +
push 0  +
push 0  +
lea edx [ebp+arg_0] +
lea eax [ebp+var_40] +
mov cl 1 +
call @Sysutils@FloatToText$qqrpcpxv20Sysutils@TFloatValue21Sysutils@TFloatFormatii  +
mov ecx eax +
lea edx [ebp+var_40] +
mov eax ebx +
call @@LStrFromPCharLen$qqrr10AnsiStringpci  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 8  +
***
mov esi edx +
mov ebx eax +
mov eax ebx +
call unknown_libname_550  +
mov edx esi +
xor ecx ecx +
call @Sysutils@TextToFloat$qqrpcpv20Sysutils@TFloatValue  +
pop esi  +
pop ebx  +
retn   +
***
add esp 0FFFFFFF4h +
mov esi edx +
mov ebx eax +
mov eax ebx +
call unknown_libname_550  +
mov edx esp +
xor ecx ecx +
call @Sysutils@TextToFloat$qqrpcpv20Sysutils@TFloatValue  +
test al al +
jz loc_4AA0CB  +
fld  [esp+0Ch+var_C] +
fstp  qword ptr [esi] +
wait   +
add esp 0Ch +
pop esi  +
pop ebx  +
retn   +
***
add esp 0FFFFFFF4h +
mov esi edx +
mov ebx eax +
mov eax ebx +
call unknown_libname_550  +
mov edx esp +
xor ecx ecx +
call @Sysutils@TextToFloat$qqrpcpv20Sysutils@TFloatValue  +
test al al +
jz loc_4AA0F7  +
fld  [esp+0Ch+var_C] +
fstp  dword ptr [esi] +
wait   +
add esp 0Ch +
pop esi  +
pop ebx  +
retn   +
***
mov esi edx +
mov ebx eax +
mov eax ebx +
call unknown_libname_550  +
mov edx esi +
mov cl 1 +
call @Sysutils@TextToFloat$qqrpcpv20Sysutils@TFloatValue  +
pop esi  +
pop ebx  +
retn   +
***
push ebx  +
add esp 0FFFFFFF8h +
push esi  +
mov esi [ebp+arg_4] +
mov [ebp+var_1] 0 +
cmp ax 18h +
jnb loc_4AA1C1  +
cmp dx 3Ch +
jnb loc_4AA1C1  +
cmp cx 3Ch +
jnb loc_4AA1C1  +
cmp si 3E8h +
jnb loc_4AA1C1  +
movzx eax ax +
imul eax eax +
movzx edx dx +
imul edx edx +
add eax edx +
movzx edx cx +
imul edx edx +
add eax edx +
movzx edx si +
add eax edx +
mov [ebp+var_8] eax +
fild  [ebp+var_8] +
fdiv  ds:flt_4AA1CC +
mov eax [ebp+arg_0] +
fstp  qword ptr [eax] +
wait   +
mov [ebp+var_1] 1 +
mov al [ebp+var_1] +
pop esi  +
pop ecx  +
pop ecx  +
pop ebp  +
retn 8  +
***
add esp 0FFFFFFF4h +
mov ecx eax +
movzx eax cx +
and eax 3 +
test eax eax +
jnz loc_4AA25B  +
movzx ebx cx +
mov eax ebx +
mov esi 64h +
xor edx edx +
div  esi +
test edx edx +
jnz loc_4AA260  +
mov eax ebx +
mov ecx 190h +
xor edx edx +
div  ecx +
test edx edx +
jz loc_4AA260  +
xor eax eax +
pop esi  +
pop ebx  +
retn   +
mov al 1 +
pop esi  +
pop ebx  +
retn   +
***
add esp 0FFFFFFF8h +
add esp 0FFFFFFE8h +
push ebx  +
push esi  +
mov [ebp+var_C] ecx +
mov [ebp+var_8] edx +
mov [ebp+var_4] eax +
mov ebx [ebp+arg_0] +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
lea eax [ebp+var_18] +
call @Sysutils@DateTimeToTimeStamp$qqr16System@TDateTime  +
mov ecx [ebp+var_14] +
test ecx ecx +
jg loc_4AA37D  +
mov eax [ebp+var_4] +
mov word ptr [eax] 0 +
mov eax [ebp+var_8] +
mov word ptr [eax] 0 +
mov eax [ebp+var_C] +
mov word ptr [eax] 0 +
mov word ptr [ebx] 0 +
xor edx edx +
jmp loc_4AA46F  +
mov eax ecx +
mov esi 7 +
cdq   +
idiv  esi +
inc edx  +
mov [ebx] dx +
dec ecx  +
mov bx 1 +
cmp ecx 23AB1h +
jl loc_4AA3AB  +
sub ecx 23AB1h +
add bx 190h +
cmp ecx 23AB1h +
jge loc_4AA398  +
lea eax [ebp-0Eh] +
push eax  +
lea eax [ebp+var_10] +
mov dx 8EACh +
xchg eax ecx +
call unknown_libname_456  +
cmp word ptr [ebp+var_10] 4 +
jnz loc_4AA3CD  +
dec word ptr [ebp+var_10]  +
add word ptr [ebp+var_10+2] 8EACh +
imul ax word ptr [ebp+var_10] +
add bx ax +
lea eax [ebp+var_10+2] +
push eax  +
lea ecx [ebp+var_10] +
movzx eax word ptr [ebp+var_10+2] +
mov dx 5B5h +
call unknown_libname_456  +
mov ax word ptr [ebp+var_10] +
shl eax 2 +
add bx ax +
lea eax [ebp+var_10+2] +
push eax  +
lea ecx [ebp+var_10] +
movzx eax word ptr [ebp+var_10+2] +
mov dx 16Dh +
call unknown_libname_456  +
cmp word ptr [ebp+var_10] 4 +
jnz loc_4AA418  +
dec word ptr [ebp+var_10]  +
add word ptr [ebp+var_10+2] 16Dh +
add bx word ptr [ebp+var_10] +
mov eax ebx +
call unknown_libname_468  +
mov edx eax +
xor eax eax +
mov al dl +
lea eax [eax+eax*2] +
lea esi unk_4E6A7C[eax*8] +
mov ax 1 +
movzx ecx ax +
mov cx [esi+ecx*2-2] +
mov word ptr [ebp+var_10] cx +
mov cx word ptr [ebp+var_10+2] +
cmp cx word ptr [ebp+var_10] +
jb loc_4AA458  +
mov cx word ptr [ebp+var_10] +
sub word ptr [ebp+var_10+2] cx +
inc eax  +
jmp loc_4AA437  +
mov ecx [ebp+var_4] +
mov [ecx] bx +
mov ecx [ebp+var_8] +
mov [ecx] ax +
mov ax word ptr [ebp+var_10+2] +
inc eax  +
mov ecx [ebp+var_C] +
mov [ecx] ax +
mov eax edx +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 0Ch  +
***
push ecx  +
push esi  +
mov esi eax +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
lea eax [ebp-2] +
push eax  +
mov eax esi +
call @SysUtils@_16631  +
pop esi  +
pop ecx  +
pop ebp  +
retn 8  +
***
add esp 0FFFFFFF8h +
add esp 0FFFFFFF0h +
push esp  +
call GetLocalTime  +
mov ax [esp+10h+var_10] +
add esp 10h +
retn   +
***
push ebx  +
mov ecx [ebp+arg_0] +
mov ebx 100h +
sub ebx [ecx-104h] +
cmp edx ebx +
jge loc_4AA4F0  +
mov ebx edx +
test ebx ebx +
jz loc_4AA50E  +
mov edx [ebp+arg_0] +
mov edx [edx-104h] +
mov ecx [ebp+arg_0] +
lea edx [ecx+edx-100h] +
mov ecx ebx +
call sub_4B9A24  +
mov eax [ebp+arg_0] +
add [eax-104h] ebx +
pop ebx  +
pop ebp  +
retn   +
***
push ebx  +
mov ebx eax +
mov eax [ebp+arg_0] +
push eax  +
mov eax ebx +
call sub_4BB610  +
mov edx eax +
mov eax ebx +
call unknown_libname_470  +
pop ecx  +
pop ebx  +
pop ebp  +
retn   +
***
add esp 0FFFFFFE0h +
push ebx  +
push esi  +
mov esi edx +
mov ebx eax +
mov eax [ebp+arg_0] +
push eax  +
push 4  +
mov [ebp+var_20] esi +
mov [ebp+var_1C] 0 +
mov [ebp+var_18] ebx +
mov [ebp+var_14] 0 +
lea eax [ebp+var_20] +
push eax  +
push 1  +
mov ecx offset unk_4E6B20 +
lea eax [ebp+var_10] +
mov edx 10h +
call sub_4A9468  +
mov edx eax +
lea eax [ebp+var_10] +
call unknown_libname_470  +
pop ecx  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
push ebx  +
mov eax [ebp+arg_0] +
add eax 0FFFFFFFCh +
mov edx [eax] +
jmp loc_4AA598  +
inc dword ptr [eax]  +
mov ecx [eax] +
mov cl [ecx] +
mov ebx [ebp+arg_0] +
cmp cl [ebx-5] +
jz loc_4AA596  +
mov eax [eax] +
sub eax edx +
inc eax  +
mov edx [ebp+arg_0] +
mov [edx-0Ch] eax +
pop ebx  +
pop ebp  +
retn   +
***
mov eax [ebp+arg_0] +
mov eax [ebp+arg_0] +
cmp byte ptr [eax-1Dh] 0 +
jnz loc_4AA629  +
mov eax [ebp+arg_0] +
mov eax [eax+8] +
push dword ptr [eax+0Ch]  +
push dword ptr [eax+8]  +
mov eax [ebp+arg_0] +
add eax 0FFFFFFE4h +
push eax  +
mov eax [ebp+arg_0] +
lea ecx [eax-1Ah] +
mov eax [ebp+arg_0] +
lea edx [eax-18h] +
mov eax [ebp+arg_0] +
add eax 0FFFFFFEAh +
call @Sysutils@DecodeTime$qqr16System@TDateTimerust2t2t2  +
mov eax [ebp+arg_0] +
mov byte ptr [eax-1Dh] 1 +
pop ebp  +
retn   +
***
add esp 0FFFFFEE8h +
push ebx  +
push esi  +
xor ecx ecx +
mov [ebp+var_118] ecx +
mov [ebp+var_4] ecx +
mov ebx edx +
mov esi eax +
xor eax eax +
push ebp  +
push offset loc_4AA77A  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov eax ebx +
call unknown_libname_540  +
mov eax [ebp+arg_0] +
mov ax [eax-0Eh] +
mov [ebp+Date.wYear] ax +
mov eax [ebp+arg_0] +
mov ax [eax-10h] +
mov [ebp+Date.wMonth] ax +
mov eax [ebp+arg_0] +
mov ax [eax-12h] +
mov [ebp+Date.wDay] ax +
lea eax [ebp+var_4] +
mov edx offset _str_gg.Text +
call unknown_libname_543  +
push 100h  +
lea eax [ebp+DateStr] +
push eax  +
mov eax [ebp+var_4] +
call unknown_libname_550  +
push eax  +
lea eax [ebp+Date] +
push eax  +
push 4  +
call GetThreadLocale  +
push eax  +
call GetDateFormatA  +
test eax eax +
jz loc_4AA759  +
mov eax ebx +
lea edx [ebp+DateStr] +
mov ecx 100h +
call sub_4BB5C0  +
dec esi  +
jnz loc_4AA759  +
mov eax dword_4F1AD8 +
sub eax 4 +
jz loc_4AA6FC  +
sub eax 0Dh +
jnz loc_4AA759  +
push ebx  +
mov eax [ebx] +
mov edx 1 +
call sub_4ACBC8  +
mov ecx eax +
mov eax [ebx] +
mov edx 1 +
call @System@@LStrCopy$qqrv  +
jmp loc_4AA759  +
cmp dword_4F1ADC 1 +
jnz loc_4AA759  +
mov eax [ebx] +
call sub_4BB610  +
mov edx eax +
mov eax [ebx] +
call sub_4ACA54  +
cmp eax 4 +
jnz loc_4AA759  +
mov eax [ebx] +
mov edx 3 +
call sub_4ACB64  +
mov esi eax +
lea eax [ebp+DateStr] +
add esi eax +
dec esi  +
lea eax [ebp+var_118] +
mov edx esi +
call unknown_libname_545  +
mov eax [ebp+var_118] +
mov edx 2 +
call sub_4ACBC8  +
mov ecx eax +
mov eax ebx +
mov edx esi +
call @@LStrFromPCharLen$qqrr10AnsiStringpci  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4AA781  +
lea eax [ebp+var_118] +
call unknown_libname_540  +
lea eax [ebp+var_4] +
call unknown_libname_540  +
retn   +
jmp unknown_libname_539  +
jmp loc_4AA766  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
add esp 0FFFFFEECh +
push ebx  +
push esi  +
xor ecx ecx +
mov [ebp+var_4] ecx +
mov ebx edx +
mov esi eax +
xor eax eax +
push ebp  +
push offset loc_4AA872  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov eax ebx +
call unknown_libname_540  +
mov eax [ebp+arg_0] +
mov ax [eax-0Eh] +
mov [ebp+Date.wYear] ax +
mov eax [ebp+arg_0] +
mov ax [eax-10h] +
mov [ebp+Date.wMonth] ax +
mov eax [ebp+arg_0] +
mov ax [eax-12h] +
mov [ebp+Date.wDay] ax +
cmp esi 2 +
jg loc_4AA7F2  +
lea eax [ebp+var_4] +
mov edx offset _str_yy.Text +
call unknown_libname_543  +
jmp loc_4AA7FF  +
lea eax [ebp+var_4] +
mov edx offset _str_yyyy.Text +
call unknown_libname_543  +
push 100h  +
lea eax [ebp+DateStr] +
push eax  +
mov eax [ebp+var_4] +
call unknown_libname_550  +
push eax  +
lea eax [ebp+Date] +
push eax  +
push 4  +
call GetThreadLocale  +
push eax  +
call GetDateFormatA  +
test eax eax +
jz loc_4AA85C  +
mov eax ebx +
lea edx [ebp+DateStr] +
mov ecx 100h +
call sub_4BB5C0  +
dec esi  +
jnz loc_4AA85C  +
mov eax [ebx] +
cmp byte ptr [eax] 30h +
jnz loc_4AA85C  +
push ebx  +
mov eax [ebx] +
call sub_4BB610  +
mov ecx eax +
dec ecx  +
mov eax [ebx] +
mov edx 2 +
call @System@@LStrCopy$qqrv  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4AA879  +
lea eax [ebp+var_4] +
call unknown_libname_540  +
retn   +
jmp unknown_libname_539  +
jmp loc_4AA869  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
add esp 0FFFFFFD8h +
push ebx  +
push esi  +
xor edx edx +
mov [ebp+var_28] edx +
mov [ebp+var_24] edx +
mov [ebp+lpsz+1] eax +
xor eax eax +
push ebp  +
push offset loc_4AAFFB  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
cmp [ebp+lpsz+1] 0 +
jz loc_4AAFE0  +
mov eax [ebp+arg_0] +
cmp dword ptr [eax-108h] 2 +
jge loc_4AAFE0  +
mov eax [ebp+arg_0] +
inc dword ptr [eax-108h]  +
mov bl 20h +
mov [ebp+var_13] 0 +
mov [ebp+var_1D] 0 +
mov [ebp+var_1E] 0 +
jmp loc_4AAFCA  +
mov byte ptr [ebp+lpsz] al +
mov eax [ebp+lpsz+1] +
call sub_4ACC48  +
mov [ebp+lpsz+1] eax +
mov al byte ptr [ebp+lpsz] +
and eax 0FFh +
bt dword_4E6AAC eax +
jnb loc_4AA919  +
mov bl 20h +
jmp loc_4AAFCA  +
mov al byte ptr [ebp+lpsz] +
mov edx eax +
add dl 9Fh +
sub dl 1Ah +
jnb loc_4AA928  +
sub al 20h +
mov edx eax +
add dl 0BFh +
sub dl 1Ah +
jnb loc_4AA93F  +
cmp al 4Dh +
jnz loc_4AA93D  +
cmp bl 48h +
jnz loc_4AA93D  +
mov al 4Eh +
mov ebx eax +
and eax 0FFh +
add eax 0FFFFFFDEh +
cmp eax 38h +
ja loc_4AAFB8  +
mov al ds:byte_4AA95D[eax] +
jmp ds:off_4AA996[eax*4]  +
push ebp  +
call unknown_libname_472  +
pop ecx  +
push ebp  +
call sub_4AA5B4  +
pop ecx  +
cmp [ebp+var_C] 2 +
jg loc_4AAA0D  +
mov eax [ebp+arg_0] +
push eax  +
movzx eax [ebp+var_E] +
mov ecx 64h +
xor edx edx +
div  ecx +
mov eax edx +
mov edx 2 +
call unknown_libname_471  +
pop ecx  +
jmp loc_4AAFCA  +
mov eax [ebp+arg_0] +
push eax  +
movzx eax [ebp+var_E] +
mov edx 4 +
call unknown_libname_471  +
pop ecx  +
jmp loc_4AAFCA  +
push ebp  +
call unknown_libname_472  +
pop ecx  +
push ebp  +
call sub_4AA5B4  +
pop ecx  +
mov eax [ebp+arg_0] +
push eax  +
push ebp  +
lea edx [ebp+var_24] +
mov eax [ebp+var_C] +
call sub_4AA62C  +
pop ecx  +
mov eax [ebp+var_24] +
call @SysUtils@_16644  +
pop ecx  +
jmp loc_4AAFCA  +
push ebp  +
call unknown_libname_472  +
pop ecx  +
push ebp  +
call sub_4AA5B4  +
pop ecx  +
mov eax [ebp+arg_0] +
push eax  +
push ebp  +
lea edx [ebp+var_28] +
mov eax [ebp+var_C] +
call @SysUtils@_16651  +
pop ecx  +
mov eax [ebp+var_28] +
call @SysUtils@_16644  +
pop ecx  +
jmp loc_4AAFCA  +
push ebp  +
call unknown_libname_472  +
pop ecx  +
push ebp  +
call sub_4AA5B4  +
pop ecx  +
mov eax [ebp+var_C] +
dec eax  +
sub eax 2 +
jb loc_4AAA9A  +
jz loc_4AAAB0  +
jmp loc_4AAACA  +
mov eax [ebp+arg_0] +
push eax  +
movzx eax [ebp+var_10] +
mov edx [ebp+var_C] +
call unknown_libname_471  +
pop ecx  +
jmp loc_4AAFCA  +
mov eax [ebp+arg_0] +
push eax  +
movzx eax [ebp+var_10] +
mov eax dword_4F1A38[eax*4] +
call @SysUtils@_16644  +
pop ecx  +
jmp loc_4AAFCA  +
mov eax [ebp+arg_0] +
push eax  +
movzx eax [ebp+var_10] +
mov eax dword_4F1A68[eax*4] +
call @SysUtils@_16644  +
pop ecx  +
jmp loc_4AAFCA  +
push ebp  +
call unknown_libname_472  +
pop ecx  +
mov eax [ebp+var_C] +
dec eax  +
sub eax 2 +
jb loc_4AAAFE  +
jz loc_4AAB1B  +
dec eax  +
jz loc_4AAB42  +
dec eax  +
jz loc_4AAB69  +
jmp loc_4AAB7D  +
push ebp  +
call sub_4AA5B4  +
pop ecx  +
mov eax [ebp+arg_0] +
push eax  +
movzx eax [ebp+var_12] +
mov edx [ebp+var_C] +
call unknown_libname_471  +
pop ecx  +
jmp loc_4AAFCA  +
mov eax [ebp+arg_0] +
push eax  +
mov eax [ebp+arg_0] +
push dword ptr [eax+0Ch]  +
push dword ptr [eax+8]  +
call @Sysutils@DayOfWeek$qqr16System@TDateTime  +
movzx eax ax +
mov eax dword_4F1A98[eax*4] +
call @SysUtils@_16644  +
pop ecx  +
jmp loc_4AAFCA  +
mov eax [ebp+arg_0] +
push eax  +
mov eax [ebp+arg_0] +
push dword ptr [eax+0Ch]  +
push dword ptr [eax+8]  +
call @Sysutils@DayOfWeek$qqr16System@TDateTime  +
movzx eax ax +
mov eax dword_4F1AB4[eax*4] +
call @SysUtils@_16644  +
pop ecx  +
jmp loc_4AAFCA  +
mov eax [ebp+arg_0] +
push eax  +
mov eax dword_4F1A20 +
call sub_4AA89C  +
pop ecx  +
jmp loc_4AAFCA  +
mov eax [ebp+arg_0] +
push eax  +
mov eax dword_4F1A24 +
call sub_4AA89C  +
pop ecx  +
jmp loc_4AAFCA  +
push ebp  +
call unknown_libname_472  +
pop ecx  +
push ebp  +
call unknown_libname_473  +
pop ecx  +
mov [ebp+var_1F] 0 +
mov esi [ebp+lpsz+1] +
jmp loc_4AAC40  +
and eax 0FFh +
bt dword_4E6AAC eax +
jnb loc_4AABC4  +
mov eax esi +
call sub_4ACC48  +
mov esi eax +
jmp loc_4AAC40  +
xor eax eax +
mov al [esi] +
cmp eax 48h +
jg loc_4AABE0  +
jz loc_4AAC4A  +
sub eax 22h +
jz loc_4AAC37  +
sub eax 5 +
jz loc_4AAC37  +
sub eax 1Ah +
jz loc_4AABEC  +
jmp loc_4AAC3F  +
sub eax 61h +
jz loc_4AABEC  +
sub eax 7 +
jz loc_4AAC4A  +
jmp loc_4AAC3F  +
cmp [ebp+var_1F] 0 +
jnz loc_4AAC3F  +
mov edx offset dword_4AB008 +
mov ecx 5 +
mov eax esi +
call @Sysutils@StrLIComp$qqrpxct1ui  +
test eax eax +
jz loc_4AAC31  +
mov edx offset dword_4AB010 +
mov ecx 3 +
mov eax esi +
call @Sysutils@StrLIComp$qqrpxct1ui  +
test eax eax +
jz loc_4AAC31  +
mov edx offset aAmpm +
mov ecx 4 +
mov eax esi +
call @Sysutils@StrLIComp$qqrpxct1ui  +
test eax eax +
jnz loc_4AAC4A  +
mov [ebp+var_1E] 1 +
jmp loc_4AAC4A  +
mov al [ebp+var_1F] +
xor al 1 +
mov [ebp+var_1F] al +
inc esi  +
mov al [esi] +
test al al +
jnz loc_4AABAB  +
mov ax [ebp+var_16] +
cmp [ebp+var_1E] 0 +
jz loc_4AAC69  +
test ax ax +
jnz loc_4AAC5F  +
mov ax 0Ch +
jmp loc_4AAC69  +
cmp ax 0Ch +
jbe loc_4AAC69  +
sub ax 0Ch +
cmp [ebp+var_C] 2 +
jle loc_4AAC76  +
mov [ebp+var_C] 2 +
mov edx [ebp+arg_0] +
push edx  +
movzx eax ax +
mov edx [ebp+var_C] +
call unknown_libname_471  +
pop ecx  +
jmp loc_4AAFCA  +
push ebp  +
call unknown_libname_472  +
pop ecx  +
push ebp  +
call unknown_libname_473  +
pop ecx  +
cmp [ebp+var_C] 2 +
jle loc_4AACA6  +
mov [ebp+var_C] 2 +
mov eax [ebp+arg_0] +
push eax  +
movzx eax [ebp+var_18] +
mov edx [ebp+var_C] +
call unknown_libname_471  +
pop ecx  +
jmp loc_4AAFCA  +
push ebp  +
call unknown_libname_472  +
pop ecx  +
push ebp  +
call unknown_libname_473  +
pop ecx  +
cmp [ebp+var_C] 2 +
jle loc_4AACD7  +
mov [ebp+var_C] 2 +
mov eax [ebp+arg_0] +
push eax  +
movzx eax [ebp+var_1A] +
mov edx [ebp+var_C] +
call unknown_libname_471  +
pop ecx  +
jmp loc_4AAFCA  +
push ebp  +
call unknown_libname_472  +
pop ecx  +
cmp [ebp+var_C] 1 +
jnz loc_4AAD0E  +
mov eax [ebp+arg_0] +
push eax  +
mov eax dword_4F1A34 +
call sub_4AA89C  +
pop ecx  +
jmp loc_4AAFCA  +
mov eax [ebp+arg_0] +
push eax  +
mov eax dword_4F1A38 +
call sub_4AA89C  +
pop ecx  +
jmp loc_4AAFCA  +
push ebp  +
call unknown_libname_472  +
pop ecx  +
push ebp  +
call unknown_libname_473  +
pop ecx  +
cmp [ebp+var_C] 3 +
jle loc_4AAD3D  +
mov [ebp+var_C] 3 +
mov eax [ebp+arg_0] +
push eax  +
movzx eax [ebp+var_1C] +
mov edx [ebp+var_C] +
call unknown_libname_471  +
pop ecx  +
jmp loc_4AAFCA  +
push ebp  +
call unknown_libname_473  +
pop ecx  +
mov esi [ebp+lpsz+1] +
dec esi  +
mov edx offset dword_4AB008 +
mov ecx 5 +
mov eax esi +
call @Sysutils@StrLIComp$qqrpxct1ui  +
test eax eax +
jnz loc_4AAD9B  +
cmp [ebp+var_16] 0Ch +
jb loc_4AAD7D  +
add esi 3 +
mov eax [ebp+arg_0] +
push eax  +
mov edx 2 +
mov eax esi +
call unknown_libname_470  +
pop ecx  +
add [ebp+lpsz+1] 4 +
mov [ebp+var_1E] 1 +
jmp loc_4AAFCA  +
mov edx offset dword_4AB010 +
mov ecx 3 +
mov eax esi +
call @Sysutils@StrLIComp$qqrpxct1ui  +
test eax eax +
jnz loc_4AADD8  +
cmp [ebp+var_16] 0Ch +
jb loc_4AADBA  +
add esi 2 +
mov eax [ebp+arg_0] +
push eax  +
mov edx 1 +
mov eax esi +
call unknown_libname_470  +
pop ecx  +
add [ebp+lpsz+1] 2 +
mov [ebp+var_1E] 1 +
jmp loc_4AAFCA  +
mov edx offset aAmpm +
mov ecx 4 +
mov eax esi +
call @Sysutils@StrLIComp$qqrpxct1ui  +
test eax eax +
jnz loc_4AAE21  +
cmp [ebp+var_16] 0Ch +
jnb loc_4AAE05  +
mov eax [ebp+arg_0] +
push eax  +
mov eax dword_4F1A2C +
call @SysUtils@_16644  +
pop ecx  +
jmp loc_4AAE14  +
mov eax [ebp+arg_0] +
push eax  +
mov eax dword_4F1A30 +
call @SysUtils@_16644  +
pop ecx  +
add [ebp+lpsz+1] 3 +
mov [ebp+var_1E] 1 +
jmp loc_4AAFCA  +
mov edx offset aAaaa +
mov ecx 4 +
mov eax esi +
call @Sysutils@StrLIComp$qqrpxct1ui  +
test eax eax +
jnz loc_4AAE68  +
push ebp  +
call sub_4AA5B4  +
pop ecx  +
mov eax [ebp+arg_0] +
push eax  +
mov eax [ebp+arg_0] +
push dword ptr [eax+0Ch]  +
push dword ptr [eax+8]  +
call @Sysutils@DayOfWeek$qqr16System@TDateTime  +
movzx eax ax +
mov eax dword_4F1AB4[eax*4] +
call @SysUtils@_16644  +
pop ecx  +
add [ebp+lpsz+1] 3 +
jmp loc_4AAFCA  +
mov edx offset off_4AB024 +
mov ecx 3 +
mov eax esi +
call @Sysutils@StrLIComp$qqrpxct1ui  +
test eax eax +
jnz loc_4AAEAF  +
push ebp  +
call sub_4AA5B4  +
pop ecx  +
mov eax [ebp+arg_0] +
push eax  +
mov eax [ebp+arg_0] +
push dword ptr [eax+0Ch]  +
push dword ptr [eax+8]  +
call @Sysutils@DayOfWeek$qqr16System@TDateTime  +
movzx eax ax +
mov eax dword_4F1A98[eax*4] +
call @SysUtils@_16644  +
pop ecx  +
add [ebp+lpsz+1] 2 +
jmp loc_4AAFCA  +
mov eax [ebp+arg_0] +
push eax  +
lea eax [ebp+lpsz] +
mov edx 1 +
call unknown_libname_470  +
pop ecx  +
jmp loc_4AAFCA  +
push ebp  +
call unknown_libname_472  +
pop ecx  +
mov eax [ebp+arg_0] +
push eax  +
mov eax dword_4F1A20 +
call sub_4AA89C  +
pop ecx  +
push ebp  +
call unknown_libname_473  +
pop ecx  +
cmp [ebp+var_16] 0 +
jnz loc_4AAEFC  +
cmp [ebp+var_18] 0 +
jnz loc_4AAEFC  +
cmp [ebp+var_1A] 0 +
jz loc_4AAFCA  +
mov eax [ebp+arg_0] +
push eax  +
mov eax offset dword_4AB028 +
mov edx 1 +
call unknown_libname_470  +
pop ecx  +
mov eax [ebp+arg_0] +
push eax  +
mov eax dword_4F1A38 +
call sub_4AA89C  +
pop ecx  +
jmp loc_4AAFCA  +
cmp byte_4F1A1D 0 +
jz loc_4AAFCA  +
mov eax [ebp+arg_0] +
push eax  +
mov eax offset byte_4F1A1D +
mov edx 1 +
call unknown_libname_470  +
pop ecx  +
jmp loc_4AAFCA  +
cmp byte_4F1A28 0 +
jz loc_4AAFCA  +
mov eax [ebp+arg_0] +
push eax  +
mov eax offset byte_4F1A28 +
mov edx 1 +
call unknown_libname_470  +
pop ecx  +
jmp loc_4AAFCA  +
mov esi [ebp+lpsz+1] +
jmp loc_4AAF8C  +
and eax 0FFh +
bt dword_4E6AAC eax +
jnb loc_4AAF89  +
mov eax [ebp+lpsz+1] +
call sub_4ACC48  +
mov [ebp+lpsz+1] eax +
jmp loc_4AAF8C  +
inc [ebp+lpsz+1]  +
mov eax [ebp+lpsz+1] +
mov al [eax] +
test al al +
jz loc_4AAF9A  +
cmp al byte ptr [ebp+lpsz] +
jnz loc_4AAF6E  +
mov eax [ebp+arg_0] +
push eax  +
mov edx [ebp+lpsz+1] +
sub edx esi +
mov eax esi +
call unknown_libname_470  +
pop ecx  +
mov eax [ebp+lpsz+1] +
cmp byte ptr [eax] 0 +
jz loc_4AAFCA  +
inc [ebp+lpsz+1]  +
jmp loc_4AAFCA  +
mov eax [ebp+arg_0] +
push eax  +
lea eax [ebp+lpsz] +
mov edx 1 +
call unknown_libname_470  +
pop ecx  +
mov eax [ebp+lpsz+1] +
mov al [eax] +
test al al +
jnz loc_4AA8F3  +
mov eax [ebp+arg_0] +
dec dword ptr [eax-108h]  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4AB002  +
lea eax [ebp+var_28] +
mov edx 2 +
call unknown_libname_541  +
retn   +
jmp unknown_libname_539  +
jmp loc_4AAFED  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
add esp 0FFFFFEF8h +
push ebx  +
push esi  +
mov ebx edx +
mov esi eax +
xor eax eax +
mov [ebp+var_104] eax +
xor eax eax +
mov [ebp+var_108] eax +
test ebx ebx +
jz loc_4AB05A  +
push ebp  +
mov eax ebx +
call sub_4AA89C  +
pop ecx  +
jmp loc_4AB066  +
push ebp  +
mov eax offset dword_4AB084 +
call sub_4AA89C  +
pop ecx  +
lea edx [ebp+var_100] +
mov eax esi +
mov ecx [ebp+var_104] +
call @@LStrFromPCharLen$qqrr10AnsiStringpci  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 8  +
***
push [ebp+arg_4]  +
push edi  +
add esp 0FFFFFFF4h +
push ebx  +
push esi  +
push edi  +
mov [ebp+var_8] ecx +
mov [ebp+var_4] edx +
mov edi eax +
mov [ebp+var_9] 0 +
mov eax [ebp+arg_0] +
mov byte ptr [eax] 0 +
mov edx [ebp+var_4] +
mov eax edi +
call unknown_libname_474  +
mov ebx [ebp+var_4] +
mov ebx [ebx] +
xor esi esi +
jmp loc_4AB105  +
mov eax esi +
add eax eax +
lea eax [eax+eax*4] +
xor edx edx +
mov dl [edi+ebx-1] +
sub dx 30h +
add ax dx +
mov esi eax +
inc ebx  +
mov eax edi +
call sub_4BB610  +
cmp ebx eax +
jg loc_4AB121  +
mov al [edi+ebx-1] +
add al 0D0h +
sub al 0Ah +
jnb loc_4AB121  +
cmp si 3E8h +
jb loc_4AB0EE  +
mov eax [ebp+var_4] +
cmp ebx [eax] +
jle loc_4AB145  +
mov eax ebx +
mov edx [ebp+var_4] +
mov edx [edx] +
sub al dl +
mov edx [ebp+arg_0] +
mov [edx] al +
mov eax [ebp+var_4] +
mov [eax] ebx +
mov eax [ebp+var_8] +
mov [eax] si +
mov [ebp+var_9] 1 +
mov al [ebp+var_9] +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 4  +
***
add esp 0FFFFFFF8h +
push ebx  +
push esi  +
push edi  +
xor ebx ebx +
mov [ebp+var_8] ebx +
mov edi ecx +
mov esi edx +
mov [ebp+var_4] eax +
xor eax eax +
push ebp  +
push offset loc_4AB1CD  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
xor ebx ebx +
test edi edi +
jz loc_4AB1B7  +
mov edx esi +
mov eax [ebp+var_4] +
call unknown_libname_474  +
lea eax [ebp+var_8] +
push eax  +
mov eax edi +
call sub_4BB610  +
mov ecx eax +
mov edx [esi] +
mov eax [ebp+var_4] +
call @System@@LStrCopy$qqrv  +
mov edx [ebp+var_8] +
mov eax edi +
call unknown_libname_462  +
test eax eax +
jnz loc_4AB1B7  +
mov eax edi +
call sub_4BB610  +
add [esi] eax +
mov bl 1 +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4AB1D4  +
lea eax [ebp+var_8] +
call unknown_libname_540  +
retn   +
jmp unknown_libname_539  +
jmp loc_4AB1C4  +
mov eax ebx +
pop edi  +
pop esi  +
pop ebx  +
pop ecx  +
pop ecx  +
pop ebp  +
retn   +
***
push edi  +
push ecx  +
mov [esp+1+var_1] cl +
mov edi edx +
mov esi eax +
xor ebx ebx +
mov edx edi +
mov eax esi +
call unknown_libname_474  +
mov eax esi +
call sub_4BB610  +
cmp eax [edi] +
jl loc_4AB210  +
mov eax [edi] +
mov al [esi+eax-1] +
cmp al [esp+1+var_1] +
jnz loc_4AB210  +
inc dword ptr [edi]  +
mov bl 1 +
mov eax ebx +
pop edx  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
mov esi eax +
xor ebx ebx +
mov edi 1 +
jmp loc_4AB24F  +
mov al [esi+edi-1] +
and al 0DFh +
sub al 44h +
jz loc_4AB24A  +
dec al  +
jz loc_4AB23E  +
sub al 8 +
jz loc_4AB246  +
sub al 0Ch +
jz loc_4AB242  +
jmp loc_4AB24E  +
mov bl 2 +
jmp loc_4AB25C  +
mov bl 2 +
jmp loc_4AB25C  +
xor ebx ebx +
jmp loc_4AB25C  +
mov bl 1 +
jmp loc_4AB25C  +
inc edi  +
mov eax esi +
call sub_4BB610  +
cmp edi eax +
jle loc_4AB226  +
xor ebx ebx +
mov eax ebx +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov ebx edx +
mov esi eax +
jmp loc_4AB28F  +
mov eax [ebx] +
mov al [esi+eax-1] +
and eax 0FFh +
bt dword_4E6AAC eax +
jnb loc_4AB28D  +
mov edx [ebx] +
mov eax esi +
call sub_4ACC8C  +
mov [ebx] eax +
jmp loc_4AB28F  +
inc dword ptr [ebx]  +
mov eax esi +
call sub_4BB610  +
cmp eax [ebx] +
jl loc_4AB2A6  +
mov eax [ebx] +
mov al [esi+eax-1] +
add al 0D0h +
sub al 0Ah +
jnb loc_4AB26C  +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
push ebp  +
push ecx  +
mov ebp eax +
xor eax eax +
mov [esp+4+var_4] eax +
mov edi 7 +
mov ebx offset unk_4F1AE4 +
mov esi offset dword_4F1B00 +
cmp dword ptr [ebx] 0 +
jz loc_4AB2F5  +
mov eax ebp +
call unknown_libname_550  +
push eax  +
mov eax [ebx] +
call unknown_libname_550  +
pop edx  +
call @AnsiStrPos$qqrpct1  +
test eax eax +
jz loc_4AB2EC  +
mov eax [esi] +
mov [esp+4+var_4] eax +
jmp loc_4AB2F5  +
add esi 4 +
add ebx 4 +
dec edi  +
jnz loc_4AB2C7  +
mov eax [esp+4+var_4] +
pop edx  +
pop ebp  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push ebx  +
mov ebx eax +
cmp dword_4F1AD8 12h +
jnz loc_4AB349  +
cmp ebx 63h +
jg loc_4AB338  +
call unknown_libname_469  +
movzx ecx ax +
mov eax [ebp+arg_0] +
mov eax [eax-4] +
cdq   +
xor eax edx +
sub eax edx +
add ecx eax +
mov eax ecx +
mov ecx 64h +
cdq   +
idiv  ecx +
imul eax eax +
add ebx eax +
mov eax [ebp+arg_0] +
cmp dword ptr [eax-4] 0 +
jle loc_4AB34F  +
mov eax [ebp+arg_0] +
neg dword ptr [eax-4]  +
jmp loc_4AB34F  +
mov eax [ebp+arg_0] +
dec dword ptr [eax-4]  +
mov eax [ebp+arg_0] +
mov eax [eax-4] +
add eax ebx +
pop ebx  +
pop ebp  +
retn   +
***
add esp 0FFFFFFD8h +
push ebx  +
push esi  +
push edi  +
xor ebx ebx +
mov [ebp+var_28] ebx +
mov [ebp+var_24] ebx +
mov [ebp+var_20] ebx +
mov [ebp+var_1C] ebx +
mov [ebp+var_8] ecx +
mov ebx edx +
mov esi eax +
xor eax eax +
push ebp  +
push offset loc_4AB66E  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
xor edi edi +
mov [ebp+var_12] 0 +
mov [ebp+var_14] 0 +
mov [ebp+var_18] 0 +
mov [ebp+var_9] 0 +
mov eax dword_4F1A20 +
call @SysUtils@_16663  +
mov [ebp+var_A] al +
xor eax eax +
mov [ebp+var_4] eax +
mov eax dword_4F1A20 +
cmp byte ptr [eax] 67h +
jnz loc_4AB3EE  +
mov edx ebx +
mov eax esi +
call sub_4AB264  +
lea eax [ebp+var_20] +
push eax  +
mov ecx [ebx] +
dec ecx  +
mov edx 1 +
mov eax esi +
call @System@@LStrCopy$qqrv  +
mov eax [ebp+var_20] +
lea edx [ebp+var_1C] +
call sub_4A89C4  +
mov eax [ebp+var_1C] +
call @SysUtils@_16665  +
mov [ebp+var_4] eax +
jmp loc_4AB40A  +
mov edx dword_4F1A20 +
mov eax offset _str_e.Text +
call sub_4ACD40  +
test eax eax +
jle loc_4AB40A  +
mov eax dword_4F1B00 +
mov [ebp+var_4] eax +
lea eax [ebp-15h] +
push eax  +
lea ecx [ebp-0Ch] +
mov edx ebx +
mov eax esi +
call unknown_libname_475  +
test al al +
jz loc_4AB653  +
mov edx ebx +
mov cl byte_4F1A1D +
mov eax esi +
call unknown_libname_476  +
test al al +
jz loc_4AB653  +
lea eax [ebp-16h] +
push eax  +
lea ecx [ebp+var_E] +
mov edx ebx +
mov eax esi +
call unknown_libname_475  +
test al al +
jz loc_4AB653  +
mov edx ebx +
mov cl byte_4F1A1D +
mov eax esi +
call unknown_libname_476  +
test al al +
jz loc_4AB536  +
lea eax [ebp-17h] +
push eax  +
lea ecx [ebp-10h] +
mov edx ebx +
mov eax esi +
call unknown_libname_475  +
test al al +
jz loc_4AB653  +
mov al [ebp+var_A] +
sub al 1 +
jb loc_4AB48F  +
jz loc_4AB4AB  +
dec al  +
jz loc_4AB4C7  +
jmp loc_4AB4E1  +
mov di [ebp+var_10] +
mov al [ebp+var_17] +
mov [ebp+var_18] al +
mov ax word ptr [ebp+var_E+2] +
mov [ebp+var_12] ax +
mov ax word ptr [ebp+var_E] +
mov [ebp+var_14] ax +
jmp loc_4AB4E1  +
mov di [ebp+var_10] +
mov al [ebp+var_17] +
mov [ebp+var_18] al +
mov ax word ptr [ebp+var_E] +
mov [ebp+var_12] ax +
mov ax word ptr [ebp+var_E+2] +
mov [ebp+var_14] ax +
jmp loc_4AB4E1  +
mov di word ptr [ebp+var_E+2] +
mov al [ebp+var_15] +
mov [ebp+var_18] al +
mov ax word ptr [ebp+var_E] +
mov [ebp+var_12] ax +
mov ax [ebp+var_10] +
mov [ebp+var_14] ax +
cmp [ebp+var_4] 0 +
jle loc_4AB4F5  +
push ebp  +
movzx eax di +
call sub_4AB300  +
pop ecx  +
mov edi eax +
jmp loc_4AB565  +
cmp [ebp+var_18] 2 +
ja loc_4AB565  +
call unknown_libname_469  +
movzx ecx ax +
movzx eax word_4E6A78 +
sub ecx eax +
mov eax ecx +
push ecx  +
mov ecx 64h +
cdq   +
idiv  ecx +
pop ecx  +
imul ax ax +
add di ax +
cmp word_4E6A78 0 +
jbe loc_4AB565  +
movzx eax di +
cmp ecx eax +
jle loc_4AB565  +
add di 64h +
jmp loc_4AB565  +
call unknown_libname_469  +
mov edi eax +
cmp [ebp+var_A] 1 +
jnz loc_4AB555  +
mov ax word ptr [ebp+var_E+2] +
mov [ebp+var_14] ax +
mov ax word ptr [ebp+var_E] +
mov [ebp+var_12] ax +
jmp loc_4AB565  +
mov ax word ptr [ebp+var_E+2] +
mov [ebp+var_12] ax +
mov ax word ptr [ebp+var_E] +
mov [ebp+var_14] ax +
mov edx ebx +
mov cl byte_4F1A1D +
mov eax esi +
call unknown_libname_476  +
mov edx ebx +
mov eax esi +
call unknown_libname_474  +
cmp byte ptr dword_4F1AE0 0 +
jz loc_4AB63D  +
mov edx dword_4F1A20 +
mov eax offset _str_ddd.Text +
call @System@@LStrPos$qqrv  +
test eax eax +
jz loc_4AB63D  +
mov eax dword_4F1A34 +
mov al [eax] +
add al 0D0h +
sub al 0Ah +
jnb loc_4AB5C1  +
mov edx ebx +
mov eax esi +
call sub_4AB264  +
jmp loc_4AB63D  +
jmp loc_4AB5C1  +
inc dword ptr [ebx]  +
mov eax esi +
call sub_4BB610  +
cmp eax [ebx] +
jl loc_4AB5D5  +
mov eax [ebx] +
cmp byte ptr [esi+eax-1] 20h +
jnz loc_4AB5BF  +
mov edx ebx +
mov eax esi +
call unknown_libname_474  +
mov eax esi +
call sub_4BB610  +
cmp eax [ebx] +
jl loc_4AB63D  +
lea eax [ebp+var_24] +
push eax  +
mov eax dword_4F1A2C +
call sub_4BB610  +
mov ecx eax +
mov edx [ebx] +
mov eax esi +
call @System@@LStrCopy$qqrv  +
mov edx [ebp+var_24] +
mov eax dword_4F1A2C +
call unknown_libname_462  +
test eax eax +
jz loc_4AB63D  +
lea eax [ebp+var_28] +
push eax  +
mov eax dword_4F1A30 +
call sub_4BB610  +
mov ecx eax +
mov edx [ebx] +
mov eax esi +
call @System@@LStrCopy$qqrv  +
mov edx [ebp+var_28] +
mov eax dword_4F1A30 +
call unknown_libname_462  +
test eax eax +
jnz loc_4AB5C1  +
mov eax [ebp+var_8] +
push eax  +
mov cx [ebp+var_14] +
mov dx [ebp+var_12] +
mov eax edi +
call sub_4AA268  +
mov [ebp+var_9] al +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4AB675  +
lea eax [ebp+var_28] +
mov edx 4 +
call unknown_libname_541  +
retn   +
jmp unknown_libname_539  +
jmp loc_4AB660  +
mov al [ebp+var_9] +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
push edi  +
push ebp  +
add esp 0FFFFFFF0h +
mov [esp+10h+var_10] ecx +
mov esi edx +
mov ebp eax +
xor ebx ebx +
or edi 0FFFFFFFFh +
mov edx esi +
mov ecx dword_4F1A2C +
mov eax ebp +
call sub_4AB154  +
test al al +
jnz loc_4AB6D0  +
mov edx esi +
mov ecx offset _str_AM.Text +
mov eax ebp +
call sub_4AB154  +
test al al +
jz loc_4AB6D4  +
xor edi edi +
jmp loc_4AB6FE  +
mov edx esi +
mov ecx dword_4F1A30 +
mov eax ebp +
call sub_4AB154  +
test al al +
jnz loc_4AB6F9  +
mov edx esi +
mov ecx offset _str_PM.Text +
mov eax ebp +
call sub_4AB154  +
test al al +
jz loc_4AB6FE  +
mov edi 0Ch +
test edi edi +
jl loc_4AB70B  +
mov edx esi +
mov eax ebp +
call unknown_libname_474  +
lea eax [esp+10h+var_4] +
push eax  +
lea ecx [esp+14h+var_C] +
mov edx esi +
mov eax ebp +
call unknown_libname_475  +
test al al +
jz loc_4AB86E  +
mov edx esi +
mov cl byte_4F1A28 +
mov eax ebp +
call unknown_libname_476  +
test al al +
jz loc_4AB86E  +
mov word ptr [esp+10h+var_C+2] 0 +
mov word ptr [esp+10h+var_8] 0 +
mov word ptr [esp+10h+var_8+2] 0 +
lea eax [esp+10h+var_4] +
push eax  +
lea ecx [esp+14h+var_C+2] +
mov edx esi +
mov eax ebp +
call unknown_libname_475  +
test al al +
jz loc_4AB86E  +
mov edx esi +
mov cl byte_4F1A28 +
mov eax ebp +
call unknown_libname_476  +
test al al +
jz loc_4AB7C5  +
lea eax [esp+10h+var_4] +
push eax  +
lea ecx [esp+14h+var_8] +
mov edx esi +
mov eax ebp +
call unknown_libname_475  +
test al al +
jz loc_4AB86E  +
mov edx esi +
mov cl byte_4F1A1B +
mov eax ebp +
call unknown_libname_476  +
test al al +
jz loc_4AB7C5  +
lea eax [esp+10h+var_4] +
push eax  +
lea ecx [esp+14h+var_8+2] +
mov edx esi +
mov eax ebp +
call unknown_libname_475  +
test al al +
jz loc_4AB86E  +
test edi edi +
jge loc_4AB81C  +
mov edx esi +
mov ecx dword_4F1A2C +
mov eax ebp +
call sub_4AB154  +
test al al +
jnz loc_4AB7EE  +
mov edx esi +
mov ecx offset _str_AM.Text +
mov eax ebp +
call sub_4AB154  +
test al al +
jz loc_4AB7F2  +
xor edi edi +
jmp loc_4AB81C  +
mov edx esi +
mov ecx dword_4F1A30 +
mov eax ebp +
call sub_4AB154  +
test al al +
jnz loc_4AB817  +
mov edx esi +
mov ecx offset _str_PM.Text +
mov eax ebp +
call sub_4AB154  +
test al al +
jz loc_4AB81C  +
mov edi 0Ch +
test edi edi +
jl loc_4AB844  +
cmp word ptr [esp+10h+var_C] 0 +
jz loc_4AB86E  +
cmp word ptr [esp+10h+var_C] 0Ch +
ja loc_4AB86E  +
cmp word ptr [esp+10h+var_C] 0Ch +
jnz loc_4AB83F  +
mov word ptr [esp+10h+var_C] 0 +
add word ptr [esp+10h+var_C] di +
mov edx esi +
mov eax ebp +
call unknown_libname_474  +
mov ax word ptr [esp+10h+var_8+2] +
push eax  +
mov eax [esp+14h+var_10] +
push eax  +
mov cx word ptr [esp+18h+var_8] +
mov dx word ptr [esp+18h+var_C+2] +
mov ax word ptr [esp+18h+var_C] +
call sub_4AA160  +
mov ebx eax +
mov eax ebx +
add esp 10h +
pop ebp  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push ecx  +
mov esi edx +
mov ebx eax +
mov [esp+4+var_4] 1 +
mov ecx esi +
mov edx esp +
mov eax ebx +
call @SysUtils@_16667  +
test al al +
jz loc_4AB8B9  +
mov eax ebx +
call sub_4BB610  +
cmp eax [esp+4+var_4] +
jl loc_4AB8BD  +
xor eax eax +
jmp loc_4AB8BF  +
mov al 1 +
pop edx  +
pop esi  +
pop ebx  +
retn   +
***
push ecx  +
mov esi edx +
mov ebx eax +
mov [esp+4+var_4] 1 +
mov ecx esi +
mov edx esp +
mov eax ebx +
call @SysUtils@_16668  +
test al al +
jz loc_4AB8ED  +
mov eax ebx +
call sub_4BB610  +
cmp eax [esp+4+var_4] +
jl loc_4AB8F1  +
xor eax eax +
jmp loc_4AB8F3  +
mov al 1 +
pop edx  +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
add esp 0FFFFFFE8h +
mov edi edx +
mov esi eax +
mov bl 1 +
mov [esp+18h+var_18] 1 +
xor eax eax +
mov dword ptr [esp+18h+var_8] eax +
mov dword ptr [esp+18h+var_8+4] eax +
lea ecx [esp+18h+var_10] +
mov edx esp +
mov eax esi +
call @SysUtils@_16667  +
test al al +
jz loc_4AB943  +
mov eax esi +
call sub_4BB610  +
cmp eax [esp+18h+var_18] +
jl loc_4AB950  +
lea ecx [esp+18h+var_8] +
mov edx esp +
mov eax esi +
call @SysUtils@_16668  +
test al al +
jnz loc_4AB950  +
mov edx edi +
mov eax esi +
call sub_4AB8C4  +
mov ebx eax +
jmp loc_4AB977  +
fld  [esp+18h+var_10] +
fcomp  ds:flt_4AB980 +
fnstsw  ax +
sahf   +
jb loc_4AB96C  +
fld  [esp+18h+var_10] +
fadd  [esp+18h+var_8] +
fstp  qword ptr [edi] +
wait   +
jmp loc_4AB977  +
fld  [esp+18h+var_10] +
fsub  [esp+18h+var_8] +
fstp  qword ptr [edi] +
wait   +
mov eax ebx +
add esp 18h +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov ebx edx +
push 0  +
push 100h  +
lea edx [esp+108h+Buffer] +
push edx  +
push 0  +
push eax  +
push 0  +
push 3000h  +
call FormatMessageA  +
jmp loc_4AB9AB  +
dec eax  +
test eax eax +
jle loc_4AB9BD  +
mov dl [esp+eax-1] +
sub dl 21h +
jb loc_4AB9AA  +
sub dl 0Dh +
jz loc_4AB9AA  +
mov edx esp +
mov ecx ebx +
xchg eax ecx +
call @@LStrFromPCharLen$qqrr10AnsiStringpci  +
add esp 100h +
pop ebx  +
retn   +
***
add esp 0FFFFFF00h +
push ebx  +
push esi  +
mov esi ecx +
mov ebx [ebp+arg_0] +
push 100h  +
lea ecx [ebp+LCData] +
push ecx  +
push edx  +
push eax  +
call GetLocaleInfoA  +
test eax eax +
jle loc_4ABA09  +
mov ecx eax +
dec ecx  +
lea edx [ebp+LCData] +
mov eax ebx +
call @@LStrFromPCharLen$qqrr10AnsiStringpci  +
jmp loc_4ABA12  +
mov eax ebx +
mov edx esi +
call unknown_libname_542  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 4  +
***
push edi  +
push ecx  +
push ebx  +
push esi  +
push edi  +
mov [ebp+var_4] ecx +
mov edi edx +
mov esi eax +
mov ebx [ebp+arg_0] +
push ebx  +
mov eax [ebp+arg_8] +
mov eax [eax-4] +
xor ecx ecx +
mov edx esi +
call @GetLocaleStr$qqriix10AnsiString  +
cmp dword ptr [ebx] 0 +
jnz loc_4ABA77  +
mov eax [ebp+var_4] +
mov eax [eax+edi*4] +
mov edx ebx +
call @System@LoadResString$qqrp20System@TResStringRec  +
pop edi  +
pop esi  +
pop ebx  +
pop ecx  +
pop ebp  +
retn 8  +
***
xor ecx ecx +
push ecx  +
push ecx  +
push ecx  +
push ecx  +
push ecx  +
push ecx  +
push ebx  +
push esi  +
push edi  +
xor eax eax +
push ebp  +
push offset loc_4ABB93  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
call GetThreadLocale  +
mov [ebp+var_4] eax +
mov ebx 1 +
mov esi offset unk_4F1A3C +
mov edi offset unk_4F1A6C +
push ebp  +
push 0Bh  +
lea eax [ebp+var_C] +
push eax  +
mov ecx offset off_4E6B24 +
mov edx ebx +
dec edx  +
lea eax [ebx+44h] +
dec eax  +
call @SysUtils@_16679  +
pop ecx  +
mov edx [ebp+var_C] +
mov eax esi +
call unknown_libname_542  +
push ebp  +
push 0Bh  +
lea eax [ebp+var_10] +
push eax  +
mov ecx offset off_4E6B54 +
mov edx ebx +
dec edx  +
lea eax [ebx+38h] +
dec eax  +
call @SysUtils@_16679  +
pop ecx  +
mov edx [ebp+var_10] +
mov eax edi +
call unknown_libname_542  +
inc ebx  +
add edi 4 +
add esi 4 +
cmp ebx 0Dh +
jnz loc_4ABAB3  +
mov ebx 1 +
mov esi offset unk_4F1A9C +
mov edi offset unk_4F1AB8 +
lea eax [ebx+5] +
mov ecx 7 +
cdq   +
idiv  ecx +
mov [ebp+var_8] edx +
push ebp  +
push 6  +
lea eax [ebp+var_14] +
push eax  +
mov ecx offset off_4E6B84 +
mov edx ebx +
dec edx  +
mov eax [ebp+var_8] +
add eax 31h +
call @SysUtils@_16679  +
pop ecx  +
mov edx [ebp+var_14] +
mov eax esi +
call unknown_libname_542  +
push ebp  +
push 6  +
lea eax [ebp+var_18] +
push eax  +
mov ecx offset off_4E6BA0 +
mov edx ebx +
dec edx  +
mov eax [ebp+var_8] +
add eax 2Ah +
call @SysUtils@_16679  +
pop ecx  +
mov edx [ebp+var_18] +
mov eax edi +
call unknown_libname_542  +
inc ebx  +
add edi 4 +
add esi 4 +
cmp ebx 8 +
jnz loc_4ABB14  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4ABB9A  +
lea eax [ebp+var_18] +
mov edx 4 +
call unknown_libname_541  +
retn   +
jmp unknown_libname_539  +
jmp loc_4ABB85  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
push ebx  +
push esi  +
xor esi esi +
mov ebx 1 +
jmp loc_4ABBB8  +
cmp ebx 7 +
jz loc_4ABBD6  +
inc ebx  +
cmp dword_4F1AE0[ebx*4] 0 +
jnz loc_4ABBB2  +
lea eax dword_4F1AE0[ebx*4] +
mov edx [ebp+arg_0] +
call unknown_libname_545  +
mov esi 1 +
mov eax esi +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
push 0  +
push ebx  +
push esi  +
xor eax eax +
push ebp  +
push offset loc_4ABC45  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
xor esi esi +
mov ebx 1 +
jmp loc_4ABC04  +
cmp ebx 7 +
jz loc_4ABC2F  +
inc ebx  +
cmp dword_4F1AFC[ebx*4] 0FFFFFFFFh +
jnz loc_4ABBFE  +
lea eax [ebp+var_4] +
mov edx [ebp+arg_0] +
call unknown_libname_545  +
mov eax [ebp+var_4] +
xor edx edx +
call sub_4A8CBC  +
mov dword_4F1AFC[ebx*4] eax +
mov esi 1 +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4ABC4C  +
lea eax [ebp+var_4] +
call unknown_libname_540  +
retn   +
jmp unknown_libname_539  +
jmp loc_4ABC3C  +
mov eax esi +
pop esi  +
pop ebx  +
pop ecx  +
pop ebp  +
retn 4  +
***
push 0  +
push esi  +
xor eax eax +
push ebp  +
push offset loc_4ABCEF  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
lea eax [ebp+var_4] +
push eax  +
call GetThreadLocale  +
mov ecx offset _str_1_1.Text +
mov edx 100Bh +
call @GetLocaleStr$qqriix10AnsiString  +
mov eax [ebp+var_4] +
mov edx 1 +
call sub_4A8CBC  +
mov esi eax +
mov eax esi +
add eax 0FFFFFFFDh +
sub eax 3 +
jnb loc_4ABCD9  +
push 4  +
push esi  +
call GetThreadLocale  +
push eax  +
push offset @SysUtils@_16681  +
call EnumCalendarInfoA  +
mov edx 7 +
mov eax offset dword_4F1B00 +
mov dword ptr [eax] 0FFFFFFFFh +
add eax 4 +
dec edx  +
jnz loc_4ABCBA  +
push 3  +
push esi  +
call GetThreadLocale  +
push eax  +
push offset @SysUtils@_16682  +
call EnumCalendarInfoA  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4ABCF6  +
lea eax [ebp+var_4] +
call unknown_libname_540  +
retn   +
jmp unknown_libname_539  +
jmp loc_4ABCE6  +
pop esi  +
pop ecx  +
pop ebp  +
retn   +
***
xor ecx ecx +
push ecx  +
push ecx  +
push ecx  +
push ecx  +
push ecx  +
push ebx  +
push esi  +
push edi  +
mov edi edx +
mov esi eax +
xor eax eax +
push ebp  +
push offset loc_4ABED2  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov ebx 1 +
mov eax edi +
call unknown_libname_540  +
lea eax [ebp+var_8] +
push eax  +
call GetThreadLocale  +
mov ecx offset _str_1_2.Text +
mov edx 1009h +
call @GetLocaleStr$qqriix10AnsiString  +
mov eax [ebp+var_8] +
mov edx 1 +
call sub_4A8CBC  +
add eax 0FFFFFFFDh +
sub eax 3 +
jb loc_4ABEA8  +
mov eax dword_4F1AD8 +
sub eax 4 +
jz loc_4ABD7A  +
add eax 0FFFFFFF3h +
sub eax 2 +
jb loc_4ABD7A  +
xor eax eax +
jmp loc_4ABD7C  +
mov al 1 +
test al al +
jz loc_4ABDB5  +
jmp loc_4ABDA5  +
mov al [esi+ebx-1] +
sub al 47h +
jz loc_4ABDA4  +
sub al 20h +
jz loc_4ABDA4  +
lea eax [ebp+var_C] +
mov dl [esi+ebx-1] +
call unknown_libname_544  +
mov edx [ebp+var_C] +
mov eax edi +
call @System@@LStrCat$qqrv  +
inc ebx  +
mov eax esi +
call sub_4BB610  +
cmp ebx eax +
jle loc_4ABD82  +
jmp loc_4ABEB7  +
mov eax edi +
mov edx esi +
call unknown_libname_542  +
jmp loc_4ABEB7  +
mov al [esi+ebx-1] +
and eax 0FFh +
bt dword_4E6AAC eax +
jnb loc_4ABE03  +
mov edx ebx +
mov eax esi +
call sub_4ACC50  +
mov [ebp+var_4] eax +
lea eax [ebp+var_10] +
push eax  +
mov ecx [ebp+var_4] +
mov edx ebx +
mov eax esi +
call @System@@LStrCopy$qqrv  +
mov edx [ebp+var_10] +
mov eax edi +
call @System@@LStrCat$qqrv  +
add ebx [ebp+var_4] +
jmp loc_4ABEA8  +
mov edx offset dword_4ABEEC +
lea eax [esi+ebx-1] +
mov ecx 2 +
call @Sysutils@StrLIComp$qqrpxct1ui  +
test eax eax +
jnz loc_4ABE29  +
mov eax edi +
mov edx offset dword_4ABEF8 +
call @System@@LStrCat$qqrv  +
inc ebx  +
jmp loc_4ABEA7  +
mov edx offset aYyyy_0 +
lea eax [esi+ebx-1] +
mov ecx 4 +
call @Sysutils@StrLIComp$qqrpxct1ui  +
test eax eax +
jnz loc_4ABE51  +
mov eax edi +
mov edx offset _str_eeee.Text +
call @System@@LStrCat$qqrv  +
add ebx 3 +
jmp loc_4ABEA7  +
mov edx offset aYy +
lea eax [esi+ebx-1] +
mov ecx 2 +
call @Sysutils@StrLIComp$qqrpxct1ui  +
test eax eax +
jnz loc_4ABE77  +
mov eax edi +
mov edx offset _str_ee.Text +
call @System@@LStrCat$qqrv  +
inc ebx  +
jmp loc_4ABEA7  +
mov al [esi+ebx-1] +
sub al 59h +
jz loc_4ABE83  +
sub al 20h +
jnz loc_4ABE91  +
mov eax edi +
mov edx offset _str_e_0.Text +
call @System@@LStrCat$qqrv  +
jmp loc_4ABEA7  +
lea eax [ebp+var_14] +
mov dl [esi+ebx-1] +
call unknown_libname_544  +
mov edx [ebp+var_14] +
mov eax edi +
call @System@@LStrCat$qqrv  +
inc ebx  +
mov eax esi +
call sub_4BB610  +
cmp ebx eax +
jle loc_4ABDC3  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4ABED9  +
lea eax [ebp+var_14] +
mov edx 4 +
call unknown_libname_541  +
retn   +
jmp unknown_libname_539  +
jmp loc_4ABEC4  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
test eax eax +
jz locret_4ABF39  +
sub eax 1000h +
retn   +
***
add esp 0FFFFFBA8h +
push ebx  +
push esi  +
push edi  +
mov [ebp+var_4] ecx +
mov ebx edx +
mov esi eax +
push 1Ch  +
lea eax [ebp+hModule] +
push eax  +
push ebx  +
call VirtualQuery  +
cmp dword ptr [ebp-320h] 1000h +
jnz loc_4ABF86  +
push 105h  +
lea eax [ebp+Filename] +
push eax  +
mov eax [ebp-32Ch] +
push eax  +
call GetModuleFileNameA  +
test eax eax +
jnz loc_4ABFA9  +
push 105h  +
lea eax [ebp+Filename] +
push eax  +
mov eax hInstance +
push eax  +
call GetModuleFileNameA  +
mov eax ebx +
call unknown_libname_477  +
mov [ebp+var_8] eax +
jmp loc_4ABFB2  +
sub ebx [ebp-32Ch] +
mov [ebp+var_8] ebx +
lea eax [ebp+Filename] +
mov dl 5Ch +
call @Sysutils@AnsiStrRScan$qqrpcc  +
mov edx eax +
inc edx  +
lea eax [ebp+var_10D] +
mov ecx 104h +
call @Sysutils@StrLCopy$qqrpcpxcui  +
mov ebx offset dword_4AC0BC +
mov edi offset dword_4AC0BC +
mov eax esi +
mov edx ds:off_4A7A78 +
call @System@@IsClass$qqrp14System@TObjectp17System@TMetaClass  +
test al al +
jz loc_4AC00E  +
mov eax [esi+4] +
call unknown_libname_550  +
mov ebx eax +
mov eax ebx +
call @Sysutils@StrLen$qqrpxc  +
test eax eax +
jz loc_4AC00E  +
cmp byte ptr [ebx+eax-1] 2Eh +
jz loc_4AC00E  +
mov edi offset dword_4AC0C0 +
push 100h  +
lea eax [ebp+Buffer] +
push eax  +
mov eax off_4EA92C +
mov eax [eax+4] +
push eax  +
mov eax hInstance +
call sub_4BCA74  +
push eax  +
call LoadStringA  +
lea edx [ebp+var_458] +
mov eax [esi] +
call @System@TObject@ClassName$qqrp17System@TMetaClass  +
lea eax [ebp+var_458] +
mov [ebp+var_358] eax +
mov [ebp+var_354] 4 +
lea eax [ebp+var_10D] +
mov [ebp+var_350] eax +
mov [ebp+var_34C] 6 +
mov eax [ebp+var_8] +
mov [ebp+var_348] eax +
mov [ebp+var_344] 5 +
mov [ebp+var_340] ebx +
mov [ebp+var_33C] 6 +
mov [ebp+var_338] edi +
mov [ebp+var_334] 6 +
lea eax [ebp+var_358] +
push eax  +
push 4  +
lea ecx [ebp+Buffer] +
mov edx [ebp+arg_0] +
mov eax [ebp+var_4] +
call sub_4A98BC  +
mov eax [ebp+var_4] +
call @Sysutils@StrLen$qqrpxc  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 4  +
***
add esp 0FFFFFBBCh +
push 400h  +
lea ecx [esp+448h+Text] +
call @Sysutils@ExceptionErrorMessage$qqrp14System@TObjectpvpci  +
mov eax off_4EAA7C +
cmp byte ptr [eax] 0 +
jz loc_4AC131  +
mov eax off_4EAA80 +
call @System@Flush$qqrrpv  +
call @@_IOTest$qqrv  +
push 0  +
lea eax [esp+448h+NumberOfBytesWritten] +
push eax  +
lea eax [esp+44Ch+Text] +
call @Sysutils@StrLen$qqrpxc  +
push eax  +
lea eax [esp+450h+Text] +
push eax  +
push 0FFFFFFF5h  +
call GetStdHandle  +
push eax  +
call WriteFile  +
push 0  +
lea eax [esp+448h+NumberOfBytesWritten] +
push eax  +
push 2  +
push offset _str____3.Text  +
push 0FFFFFFF5h  +
call GetStdHandle  +
push eax  +
call WriteFile  +
jmp loc_4AC167  +
push 40h  +
lea eax [esp+448h+Caption] +
push eax  +
mov eax off_4EA930 +
mov eax [eax+4] +
push eax  +
mov eax hInstance +
call sub_4BCA74  +
push eax  +
call LoadStringA  +
push 2010h  +
lea eax [esp+448h+Caption] +
push eax  +
lea eax [esp+44Ch+Text] +
push eax  +
push 0  +
call MessageBoxA  +
add esp 444h +
retn   +
***
push edi  +
test dl dl +
jz loc_4AC18B  +
add esp 0FFFFFFF0h +
call unknown_libname_535  +
mov esi ecx +
mov ebx edx +
mov edi eax +
lea eax [edi+4] +
mov edx esi +
call unknown_libname_542  +
mov eax edi +
test bl bl +
jz loc_4AC1B0  +
call sub_4BABC8  +
pop large dword ptr fs:0  +
add esp 0Ch +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push 0  +
push edi  +
test dl dl +
jz loc_4AC247  +
add esp 0FFFFFFF0h +
call unknown_libname_535  +
mov esi ecx +
mov ebx edx +
mov edi eax +
lea edx [edi+4] +
mov eax esi +
call @System@LoadResString$qqrp20System@TResStringRec  +
mov eax edi +
test bl bl +
jz loc_4AC26C  +
call sub_4BABC8  +
pop large dword ptr fs:0  +
add esp 0Ch +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push 0  +
push 0  +
push ebx  +
push esi  +
push edi  +
test dl dl +
jz loc_4AC28A  +
add esp 0FFFFFFF0h +
call unknown_libname_535  +
mov esi ecx +
mov ebx edx +
mov edi eax +
xor eax eax +
push ebp  +
push offset loc_4AC2E0  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
lea eax [ebp+var_4] +
push eax  +
lea edx [ebp+var_8] +
mov eax esi +
call @System@LoadResString$qqrp20System@TResStringRec  +
mov eax [ebp+var_8] +
mov edx [ebp+arg_4] +
mov ecx [ebp+arg_0] +
call @Sysutils@Format$qqrx17System@AnsiStringpx14System@TVarRecxi  +
mov edx [ebp+var_4] +
lea eax [edi+4] +
call unknown_libname_542  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4AC2E7  +
lea eax [ebp+var_8] +
mov edx 2 +
call unknown_libname_541  +
retn   +
jmp unknown_libname_539  +
jmp loc_4AC2D2  +
mov eax edi +
test bl bl +
jz loc_4AC2FC  +
call sub_4BABC8  +
pop large dword ptr fs:0  +
add esp 0Ch +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
pop ecx  +
pop ecx  +
pop ebp  +
retn 8  +
***
cmp byte ptr [eax+0Ch] 0 +
jz locret_4AC313  +
call sub_4BA7C0  +
retn   +
***
add esp 0FFFFFFF8h +
xor ebx ebx +
call @System@IOResult$qqrv  +
mov esi eax +
jmp loc_4AC345  +
inc ebx  +
cmp ebx 6 +
jg loc_4AC353  +
cmp esi dword_4E6BBC[ebx*8] +
jnz loc_4AC344  +
cmp ebx 6 +
jg loc_4AC36D  +
mov ecx dword_4E6BC0[ebx*8] +
mov dl 1 +
mov eax ds:off_4A7BEC +
call sub_4AC17C  +
jmp loc_4AC38A  +
mov [esp+8+var_8] esi +
mov [esp+8+var_4] 0 +
push esp  +
push 0  +
mov ecx off_4EA8D8 +
mov dl 1 +
mov eax ds:off_4A7BEC +
call sub_4AC274  +
mov [eax+0Ch] esi +
pop ecx  +
pop edx  +
pop esi  +
pop ebx  +
retn   +
***
mov edx eax +
dec dl  +
jz loc_4AC3C9  +
dec dl  +
jz loc_4AC3D1  +
dec edx  +
sub dl 16h +
jb loc_4AC3D9  +
jmp loc_4AC3F5  +
mov edx dword_4F1B28 +
jmp loc_4AC3FC  +
mov edx dword_4F1B2C +
jmp loc_4AC3FC  +
and eax 0FFh +
lea eax dword_4E6BDC[eax*8] +
mov ecx [eax+4] +
mov eax [eax] +
mov dl 1 +
call sub_4AC17C  +
mov edx eax +
jmp loc_4AC3FC  +
call @SysUtils@_16709  +
mov edx eax +
push ebx  +
mov eax edx +
jmp @System@@RaiseExcept$qqrv  +
***
pop ebx  +
retn   +
***
add esp 0FFFFFFE0h +
mov esp ecx +
mov [esp+0] edx +
mov ebp [ebp+0] +
jmp @System@@RaiseExcept$qqrv  +
***
retn   +
***
call unknown_libname_480  +
lea ecx [ebp+arg_0] +
add ecx 4 +
mov edx [ebp+arg_0] +
call @SysUtils@_16879  +
pop ebp  +
retn 4  +
***
mov eax [eax] +
cmp eax 0C0000092h +
jg loc_4AC52D  +
jz loc_4AC55C  +
cmp eax 0C000008Eh +
jg loc_4AC51F  +
jz loc_4AC55F  +
sub eax 0C0000005h +
jz loc_4AC568  +
sub eax 87h +
jz loc_4AC556  +
dec eax  +
jz loc_4AC565  +
jmp loc_4AC574  +
add eax 3FFFFF71h +
sub eax 2 +
jb loc_4AC55C  +
jz loc_4AC562  +
jmp loc_4AC574  +
cmp eax 0C0000096h +
jg loc_4AC545  +
jz loc_4AC56B  +
sub eax 0C0000093h +
jz loc_4AC565  +
dec eax  +
jz loc_4AC553  +
dec eax  +
jz loc_4AC559  +
jmp loc_4AC574  +
sub eax 0C00000FDh +
jz loc_4AC571  +
sub eax 3Dh +
jz loc_4AC56E  +
jmp loc_4AC574  +
mov al 3 +
retn   +
mov al 4 +
retn   +
mov al 5 +
retn   +
mov al 6 +
retn   +
mov al 7 +
retn   +
mov al 8 +
retn   +
mov al 9 +
retn   +
mov al 0Bh +
retn   +
mov al 0Ch +
retn   +
mov al 0Dh +
retn   +
mov al 0Eh +
retn   +
mov al 16h +
retn   +
***
mov eax ebx +
add esp 0FFFFFE90h +
push ebx  +
push esi  +
xor eax eax +
mov [ebp+var_170] eax +
mov [ebp+var_14C] eax +
mov [ebp+var_154] eax +
mov [ebp+var_150] eax +
mov [ebp+var_4] eax +
xor eax eax +
push ebp  +
push offset loc_4AC74B  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov eax [ebp+arg_0] +
mov ebx [eax-4] +
cmp dword ptr [ebx+14h] 0 +
jnz loc_4AC5E1  +
lea edx [ebp+var_4] +
mov eax off_4EA940 +
call @System@LoadResString$qqrp20System@TResStringRec  +
jmp loc_4AC5EE  +
lea edx [ebp+var_4] +
mov eax off_4EA944 +
call @System@LoadResString$qqrp20System@TResStringRec  +
mov esi [ebx+18h] +
push 1Ch  +
lea eax [ebp+hModule] +
push eax  +
mov eax [ebx+0Ch] +
push eax  +
call VirtualQuery  +
cmp dword ptr [ebp-10h] 1000h +
jnz loc_4AC6C0  +
push 105h  +
lea eax [ebp+Filename] +
push eax  +
mov eax [ebp-1Ch] +
push eax  +
call GetModuleFileNameA  +
test eax eax +
jz loc_4AC6C0  +
mov eax [ebx+0Ch] +
mov [ebp+var_148] eax +
mov [ebp+var_144] 5 +
lea eax [ebp+var_150] +
lea edx [ebp+Filename] +
mov ecx 105h +
call sub_4BB5C0  +
mov eax [ebp+var_150] +
lea edx [ebp+var_14C] +
call @Sysutils@ExtractFileName$qqrx17System@AnsiString  +
mov eax [ebp+var_14C] +
mov [ebp+var_140] eax +
mov [ebp+var_13C] 0Bh +
mov eax [ebp+var_4] +
mov [ebp+var_138] eax +
mov [ebp+var_134] 0Bh +
mov [ebp+var_130] esi +
mov [ebp+var_12C] 5 +
lea eax [ebp+var_148] +
push eax  +
push 3  +
lea edx [ebp+var_154] +
mov eax off_4EA974 +
call @System@LoadResString$qqrp20System@TResStringRec  +
mov ecx [ebp+var_154] +
mov dl 1 +
mov eax ds:off_4A812C +
call sub_4AC1B8  +
mov ebx eax +
jmp loc_4AC71A  +
mov eax [ebx+0Ch] +
mov [ebp+var_16C] eax +
mov [ebp+var_168] 5 +
mov eax [ebp+var_4] +
mov [ebp+var_164] eax +
mov [ebp+var_160] 0Bh +
mov [ebp+var_15C] esi +
mov [ebp+var_158] 5 +
lea eax [ebp+var_16C] +
push eax  +
push 2  +
lea edx [ebp+var_170] +
mov eax off_4EA91C +
call @System@LoadResString$qqrp20System@TResStringRec  +
mov ecx [ebp+var_170] +
mov dl 1 +
mov eax ds:off_4A812C +
call sub_4AC1B8  +
mov ebx eax +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4AC752  +
lea eax [ebp+var_170] +
call unknown_libname_540  +
lea eax [ebp+var_154] +
mov edx 3 +
call unknown_libname_541  +
lea eax [ebp+var_4] +
call unknown_libname_540  +
retn   +
jmp unknown_libname_539  +
jmp loc_4AC727  +
mov eax ebx +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
add esp 0FFFFFFF0h +
push ebx  +
xor edx edx +
mov [ebp+var_10] edx +
mov [ebp+var_4] eax +
xor eax eax +
push ebp  +
push offset loc_4AC817  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov eax [ebp+var_4] +
call @SysUtils@_16718  +
and eax 0FFh +
mov edx eax +
add edx 0FFFFFFFDh +
sub edx 8 +
jb loc_4AC798  +
jz loc_4AC7AF  +
dec edx  +
sub edx 0Ah +
jnb loc_4AC7BA  +
lea eax dword_4E6BDC[eax*8] +
mov ecx [eax+4] +
mov eax [eax] +
mov dl 1 +
call sub_4AC17C  +
mov ebx eax +
jmp loc_4AC7EA  +
push ebp  +
call @SysUtils@_16720  +
pop ecx  +
mov ebx eax +
jmp loc_4AC7EA  +
mov eax [ebp+var_4] +
mov eax [eax] +
mov [ebp+var_C] eax +
mov [ebp+var_8] 0 +
lea eax [ebp+var_C] +
push eax  +
push 0  +
lea edx [ebp+var_10] +
mov eax off_4EA95C +
call @System@LoadResString$qqrp20System@TResStringRec  +
mov ecx [ebp+var_10] +
mov dl 1 +
mov eax ds:off_4A7C9C +
call sub_4AC1B8  +
mov ebx eax +
mov eax ebx +
mov edx ds:off_4A7C44 +
call @System@@IsClass$qqrp14System@TObjectp17System@TMetaClass  +
test al al +
jz loc_4AC801  +
mov eax [ebp+var_4] +
mov [ebx+0Ch] eax +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4AC81E  +
lea eax [ebp+var_10] +
call unknown_libname_540  +
retn   +
jmp unknown_libname_539  +
jmp loc_4AC80E  +
mov eax ebx +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
mov ecx off_4EA8D4 +
mov dl 1 +
mov eax ds:off_4A7B90 +
call @Sysutils@Exception@$bctr$qqrp20System@TResStringRec  +
mov dword_4F1B28 eax +
mov ecx off_4EA914 +
mov dl 1 +
mov eax ds:off_4A8018 +
call @Sysutils@Exception@$bctr$qqrp20System@TResStringRec  +
mov dword_4F1B2C eax +
mov eax off_4EAA48 +
mov dword ptr [eax] offset sub_4AC3B4 +
mov eax off_4EAA44 +
mov dword ptr [eax] offset loc_4AC828 +
mov eax off_4EAA54 +
mov edx ds:off_4A7A78 +
mov [eax] edx +
mov eax off_4EAA4C +
mov dword ptr [eax] offset sub_4AC578 +
mov eax off_4EAA50 +
mov dword ptr [eax] offset sub_4AC75C +
mov eax offset unknown_libname_481 +
mov edx off_4EAA58 +
mov [edx] eax +
mov eax offset loc_4AC4E0 +
mov edx off_4EAA5C +
mov [edx] eax +
retn   +
***
mov eax dword_4F1B28 +
mov byte ptr [eax+0Ch] 1 +
mov eax dword_4F1B28 +
mov edx [eax] +
call dword ptr [edx-8]  +
xor eax eax +
mov dword_4F1B28 eax +
mov eax dword_4F1B2C +
mov byte ptr [eax+0Ch] 1 +
mov eax dword_4F1B2C +
call @System@TObject@Free$qqrv  +
xor eax eax +
mov dword_4F1B2C eax +
mov eax off_4EAA48 +
xor edx edx +
mov [eax] edx +
mov eax off_4EAA44 +
xor edx edx +
mov [eax] edx +
mov eax off_4EAA54 +
xor edx edx +
mov [eax] edx +
mov eax off_4EAA4C +
xor edx edx +
mov [eax] edx +
mov eax off_4EAA50 +
xor edx edx +
mov [eax] edx +
mov eax off_4EAA58 +
xor edx edx +
mov [eax] edx +
retn   +
***
add esp 0FFFFFF6Ch +
mov [esp+94h+var_94] 94h +
push esp  +
call GetVersionExA  +
test eax eax +
jz loc_4AC976  +
mov eax [esp+94h+var_84] +
mov dword_4E6A64 eax +
mov eax [esp+94h+var_90] +
mov dword_4E6A68 eax +
mov eax [esp+94h+var_8C] +
mov dword_4E6A6C eax +
mov eax [esp+94h+var_88] +
mov dword_4E6A70 eax +
mov eax offset unk_4E6A74 +
lea edx [esp+94h+var_80] +
mov ecx 80h +
call sub_4BB5C0  +
add esp 94h +
retn   +
***
cmp eax dword_4E6A68 +
jg loc_4AC99B  +
cmp eax dword_4E6A68 +
jnz loc_4AC998  +
cmp edx dword_4E6A6C +
jge loc_4AC99B  +
xor eax eax +
retn   +
mov al 1 +
retn   +
***
mov edi edx +
xor edx edx +
test eax eax +
jz loc_4ACA10  +
cmp byte ptr [eax+edi] 0 +
jz loc_4ACA10  +
test edi edi +
jnz loc_4AC9C8  +
mov al [eax] +
and eax 0FFh +
bt dword_4E6AAC eax +
jnb loc_4ACA10  +
mov dl 1 +
jmp loc_4ACA10  +
mov esi edi +
dec esi  +
jmp loc_4AC9CE  +
dec esi  +
test esi esi +
jl loc_4AC9E4  +
mov cl [eax+esi] +
and ecx 0FFh +
bt dword_4E6AAC ecx +
jb loc_4AC9CD  +
mov ecx edi +
sub ecx esi +
and ecx 80000001h +
jns loc_4AC9F5  +
dec ecx  +
or ecx 0FFFFFFFEh +
inc ecx  +
test ecx ecx +
jnz loc_4AC9FD  +
mov dl 2 +
jmp loc_4ACA10  +
mov al [eax+edi] +
and eax 0FFh +
bt dword_4E6AAC eax +
jnb loc_4ACA10  +
mov dl 1 +
mov eax edx +
pop edi  +
pop esi  +
retn   +
***
mov esi edx +
mov ebx eax +
xor eax eax +
cmp byte ptr dword_4F1AE0 0 +
jz loc_4ACA38  +
mov eax ebx +
call unknown_libname_550  +
mov edx esi +
dec edx  +
call @SysUtils@_16727  +
pop esi  +
pop ebx  +
retn   +
***
xor ecx ecx +
cmp byte ptr dword_4F1AE0 0 +
jz loc_4ACA4E  +
call @SysUtils@_16727  +
mov ecx eax +
mov eax ecx +
retn   +
***
mov esi edx +
mov ebx eax +
mov eax ebx +
call sub_4BB610  +
cmp esi eax +
jle loc_4ACA6E  +
mov eax ebx +
call sub_4BB610  +
mov esi eax +
mov edx esi +
mov eax ebx +
call sub_4ACA7C  +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
add esp 0FFFFFFF4h +
push ebx  +
push esi  +
push edi  +
mov [ebp+var_8] ecx +
mov [ebp+var_4] edx +
mov edi eax +
mov eax edi +
call sub_4BB610  +
mov [ebp+var_C] eax +
mov esi 1 +
mov ebx 1 +
jmp loc_4ACB1C  +
inc esi  +
mov al [edi+ebx-1] +
and eax 0FFh +
bt dword_4E6AAC eax +
jnb loc_4ACB1B  +
mov edx ebx +
mov eax edi +
call sub_4ACC8C  +
mov ebx eax +
jmp loc_4ACB1C  +
inc ebx  +
cmp ebx [ebp+var_C] +
jge loc_4ACB26  +
cmp esi [ebp+var_4] +
jl loc_4ACAFB  +
cmp esi [ebp+var_4] +
jnz loc_4ACB4E  +
cmp ebx [ebp+var_C] +
jge loc_4ACB4E  +
mov al [edi+ebx-1] +
and eax 0FFh +
bt dword_4E6AAC eax +
jnb loc_4ACB4E  +
mov edx ebx +
mov eax edi +
call sub_4ACC8C  +
dec eax  +
mov ebx eax +
mov eax [ebp+var_8] +
mov [eax] esi +
mov eax [ebp+arg_0] +
mov [eax] ebx +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 4  +
***
add esp 0FFFFFFF8h +
add esp 0FFFFFFF8h +
cmp byte ptr dword_4F1AE0 0 +
jz loc_4ACC3E  +
push ebx  +
call CharNextA  +
sub eax ebx +
pop ebx  +
retn   +
mov eax 1 +
pop ebx  +
retn   +
***
retn   +
***
mov esi edx +
mov ebx eax +
mov eax 1 +
cmp byte ptr dword_4F1AE0 0 +
jz loc_4ACC86  +
mov dl [ebx+esi-1] +
and edx 0FFh +
bt dword_4E6AAC edx +
jnb loc_4ACC86  +
mov eax ebx +
call unknown_libname_550  +
add eax esi +
dec eax  +
call sub_4ACC28  +
pop esi  +
pop ebx  +
retn   +
***
mov ebx edx +
mov esi eax +
lea eax [ebx+1] +
cmp byte ptr dword_4F1AE0 0 +
jz loc_4ACCC2  +
mov dl [esi+ebx-1] +
and edx 0FFh +
bt dword_4E6AAC edx +
jnb loc_4ACCC2  +
mov eax esi +
call unknown_libname_550  +
add eax ebx +
dec eax  +
call sub_4ACC28  +
add eax ebx +
pop esi  +
pop ebx  +
retn   +
***
mov ebx edx +
mov esi eax +
test ebx ebx +
jle loc_4ACCF1  +
mov eax esi +
call sub_4BB610  +
cmp ebx eax +
jg loc_4ACCF1  +
cmp byte ptr [esi+ebx-1] 5Ch +
jnz loc_4ACCF1  +
mov edx ebx +
mov eax esi +
call sub_4ACA18  +
test al al +
jz loc_4ACCF6  +
xor eax eax +
pop esi  +
pop ebx  +
retn   +
mov al 1 +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
push edi  +
push ebp  +
mov esi edx +
mov ebx eax +
xor edi edi +
mov eax ebx +
call unknown_libname_550  +
push eax  +
mov eax esi +
call unknown_libname_550  +
mov ebp eax +
mov eax ebp +
pop edx  +
call @AnsiStrPos$qqrpct1  +
mov ebx eax +
test ebx ebx +
jz loc_4ACD6E  +
mov edi ebx +
sub edi ebp +
inc edi  +
mov eax edi +
pop ebp  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
push edi  +
push ebp  +
add esp 0FFFFFFF8h +
mov ebp edx +
mov esi eax +
xor ebx ebx +
test esi esi +
jz loc_4ACE9A  +
cmp byte ptr [esi] 0 +
jz loc_4ACE9A  +
test ebp ebp +
jz loc_4ACE9A  +
cmp byte ptr [ebp+0] 0 +
jz loc_4ACE9A  +
mov eax esi +
call @Sysutils@StrLen$qqrpxc  +
mov [esp+8+var_8] eax +
mov eax ebp +
call @Sysutils@StrLen$qqrpxc  +
mov edi eax +
mov edx ebp +
mov eax esi +
call @Sysutils@StrPos$qqrpxct1  +
mov ebx eax +
jmp loc_4ACE87  +
mov edx ebx +
sub edx esi +
mov eax esi +
call unknown_libname_482  +
mov [esp+8+var_4] al +
cmp [esp+8+var_4] 2 +
jz loc_4ACE73  +
push edi  +
push ebp  +
push edi  +
push ebx  +
push 0  +
push 400h  +
call CompareStringA  +
cmp eax 2 +
jz loc_4ACE9A  +
cmp [esp+8+var_4] 1 +
jnz loc_4ACE7B  +
inc ebx  +
inc ebx  +
mov edx ebp +
mov eax ebx +
call @Sysutils@StrPos$qqrpxct1  +
mov ebx eax +
test ebx ebx +
jz loc_4ACE98  +
mov eax ebx +
sub eax esi +
mov edx [esp+8+var_8] +
sub edx eax +
cmp edi edx +
jbe loc_4ACE48  +
xor ebx ebx +
mov eax ebx +
pop ecx  +
pop edx  +
pop ebp  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov ebx edx +
push edi  +
add esp 0FFFFFFF4h +
push ebx  +
xor edx edx +
mov [ebp+var_C] edx +
xor edx edx +
push ebp  +
push offset loc_4ACF70  +
push dword ptr fs:[edx]  +
mov fs:[edx] esp +
push 7  +
lea edx [ebp+LCData] +
push edx  +
push 1004h  +
push eax  +
call GetLocaleInfoA  +
lea eax [ebp+var_C] +
lea edx [ebp+LCData] +
mov ecx 7 +
call sub_4BB5C0  +
mov eax [ebp+var_C] +
push eax  +
call GetACP  +
mov edx eax +
pop eax  +
call sub_4A8CBC  +
mov ebx eax +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4ACF77  +
lea eax [ebp+var_C] +
call unknown_libname_540  +
retn   +
jmp unknown_libname_539  +
jmp loc_4ACF67  +
mov eax ebx +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
push ecx  +
mov eax dword_4F1AD8 +
cmp eax 1Fh +
ja loc_4ACFF1  +
bt dword_4E6CA4 eax +
setb al  +
retn   +
***
add esp 0FFFFFE68h +
push ebx  +
push esi  +
push edi  +
mov Locale 409h +
mov dword_4F1AD8 9 +
mov dword_4F1ADC 1 +
call GetThreadLocale  +
test eax eax +
jz loc_4AD030  +
mov Locale eax +
test ax ax +
jz loc_4AD050  +
mov edx eax +
and dx 3FFh +
movzx edx dx +
mov dword_4F1AD8 edx +
movzx eax ax +
shr eax 0Ah +
mov dword_4F1ADC eax +
mov esi offset dword_4AD14C +
mov edi offset dword_4E6AAC +
mov ecx 8 +
movs   +
cmp dword_4E6A64 2 +
jnz loc_4AD115  +
call sub_4ACFE0  +
test al al +
jz loc_4AD08A  +
mov byte ptr dword_4F1AE0+1 0 +
mov byte ptr dword_4F1AE0 0 +
jmp loc_4AD143  +
push ebp  +
call sub_4ACF80  +
pop ecx  +
mov eax offset dword_4E6AAC +
mov edx offset dword_4AD14C +
mov cl 20h +
call @System@@SetEq$qqrv  +
setnz bl  +
mov byte ptr dword_4F1AE0 bl +
test bl bl +
jz loc_4AD0BB  +
mov byte ptr dword_4F1AE0+1 0 +
jmp loc_4AD143  +
mov eax 80h +
lea edx [ebp+SrcStr] +
mov [edx] al +
inc eax  +
inc edx  +
cmp eax 100h +
jnz loc_4AD0C6  +
lea eax [ebp+SrcStr] +
lea edx [ebp+CharType] +
push edx  +
push 80h  +
push eax  +
push 2  +
mov eax Locale +
push eax  +
call GetStringTypeExA  +
mov eax 80h +
lea edx [ebp+CharType] +
cmp word ptr [edx] 2 +
setz cl  +
mov byte ptr dword_4F1AE0+1 cl +
test cl cl +
jnz loc_4AD143  +
add edx 2 +
dec eax  +
jnz loc_4AD0FC  +
jmp loc_4AD143  +
push 4Ah  +
call GetSystemMetrics  +
test eax eax +
setnz al  +
mov byte ptr dword_4F1AE0+1 al +
push 2Ah  +
call GetSystemMetrics  +
test eax eax +
setnz bl  +
mov byte ptr dword_4F1AE0 bl +
test bl bl +
jz loc_4AD143  +
push ebp  +
call sub_4ACF80  +
pop ecx  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
mov ecx 8 +
push 0  +
push 0  +
dec ecx  +
jnz loc_4AD174  +
push ebx  +
xor eax eax +
push ebp  +
push offset loc_4AD437  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
call sub_4ACFF8  +
call @SysUtils@_16680  +
cmp byte ptr dword_4F1AE0 0 +
jz loc_4AD1A2  +
call @SysUtils@_16683  +
call GetThreadLocale  +
mov ebx eax +
lea eax [ebp+var_10] +
push eax  +
xor ecx ecx +
mov edx 14h +
mov eax ebx +
call @GetLocaleStr$qqriix10AnsiString  +
mov edx [ebp+var_10] +
mov eax offset dword_4F1A14 +
call unknown_libname_542  +
lea eax [ebp+var_14] +
push eax  +
mov ecx offset _str_0_3.Text +
mov edx 1Bh +
mov eax ebx +
call @GetLocaleStr$qqriix10AnsiString  +
mov eax [ebp+var_14] +
xor edx edx +
call sub_4A8CBC  +
mov byte_4F1A18 al +
lea eax [ebp+var_18] +
push eax  +
mov ecx offset _str_0_3.Text +
mov edx 1Ch +
mov eax ebx +
call @GetLocaleStr$qqriix10AnsiString  +
mov eax [ebp+var_18] +
xor edx edx +
call sub_4A8CBC  +
mov byte_4F1A19 al +
mov cl 2Ch +
mov edx 0Fh +
mov eax ebx +
call @Sysutils@GetLocaleChar$qqriic  +
mov byte_4F1A1A al +
mov cl 2Eh +
mov edx 0Eh +
mov eax ebx +
call @Sysutils@GetLocaleChar$qqriic  +
mov byte_4F1A1B al +
lea eax [ebp+var_1C] +
push eax  +
mov ecx offset _str_0_3.Text +
mov edx 19h +
mov eax ebx +
call @GetLocaleStr$qqriix10AnsiString  +
mov eax [ebp+var_1C] +
xor edx edx +
call sub_4A8CBC  +
mov byte_4F1A1C al +
mov cl 2Fh +
mov edx 1Dh +
mov eax ebx +
call @Sysutils@GetLocaleChar$qqriic  +
mov byte_4F1A1D al +
lea eax [ebp+var_24] +
push eax  +
mov ecx offset _str_m_d_yy.Text +
mov edx 1Fh +
mov eax ebx +
call @GetLocaleStr$qqriix10AnsiString  +
mov eax [ebp+var_24] +
lea edx [ebp+var_20] +
call sub_4ABD08  +
mov edx [ebp+var_20] +
mov eax offset dword_4F1A20 +
call unknown_libname_542  +
lea eax [ebp+var_2C] +
push eax  +
mov ecx offset _str_mmmm_d__yyyy.Text +
mov edx 20h +
mov eax ebx +
call @GetLocaleStr$qqriix10AnsiString  +
mov eax [ebp+var_2C] +
lea edx [ebp+var_28] +
call sub_4ABD08  +
mov edx [ebp+var_28] +
mov eax offset dword_4F1A24 +
call unknown_libname_542  +
mov cl 3Ah +
mov edx 1Eh +
mov eax ebx +
call @Sysutils@GetLocaleChar$qqriic  +
mov byte_4F1A28 al +
lea eax [ebp+var_30] +
push eax  +
mov ecx offset _str_am.Text +
mov edx 28h +
mov eax ebx +
call @GetLocaleStr$qqriix10AnsiString  +
mov edx [ebp+var_30] +
mov eax offset dword_4F1A2C +
call unknown_libname_542  +
lea eax [ebp+var_34] +
push eax  +
mov ecx offset _str_pm.Text +
mov edx 29h +
mov eax ebx +
call @GetLocaleStr$qqriix10AnsiString  +
mov edx [ebp+var_34] +
mov eax offset dword_4F1A30 +
call unknown_libname_542  +
lea eax [ebp+var_8] +
call unknown_libname_540  +
lea eax [ebp+var_C] +
call unknown_libname_540  +
lea eax [ebp+var_38] +
push eax  +
mov ecx offset _str_0_3.Text +
mov edx 25h +
mov eax ebx +
call @GetLocaleStr$qqriix10AnsiString  +
mov eax [ebp+var_38] +
xor edx edx +
call sub_4A8CBC  +
test eax eax +
jnz loc_4AD360  +
lea eax [ebp+var_4] +
mov edx offset _str_h.Text +
call unknown_libname_543  +
jmp loc_4AD36D  +
lea eax [ebp+var_4] +
mov edx offset _str_hh.Text +
call unknown_libname_543  +
lea eax [ebp+var_3C] +
push eax  +
mov ecx offset _str_0_3.Text +
mov edx 23h +
mov eax ebx +
call @GetLocaleStr$qqriix10AnsiString  +
mov eax [ebp+var_3C] +
xor edx edx +
call sub_4A8CBC  +
test eax eax +
jnz loc_4AD3CF  +
lea eax [ebp+var_40] +
push eax  +
mov ecx offset _str_0_3.Text +
mov edx 1005h +
mov eax ebx +
call @GetLocaleStr$qqriix10AnsiString  +
mov eax [ebp+var_40] +
xor edx edx +
call sub_4A8CBC  +
test eax eax +
jnz loc_4AD3C2  +
lea eax [ebp+var_C] +
mov edx offset _str__AMPM.Text +
call unknown_libname_543  +
jmp loc_4AD3CF  +
lea eax [ebp+var_8] +
mov edx offset _str_AMPM_.Text +
call unknown_libname_543  +
push [ebp+var_8]  +
push [ebp+var_4]  +
push offset _str__mm.Text  +
push [ebp+var_C]  +
mov eax offset dword_4F1A34 +
mov edx 4 +
call sub_4BB6D0  +
push [ebp+var_8]  +
push [ebp+var_4]  +
push offset _str__mm_ss.Text  +
push [ebp+var_C]  +
mov eax offset dword_4F1A38 +
mov edx 4 +
call sub_4BB6D0  +
mov cl 2Ch +
mov edx 0Ch +
mov eax ebx +
call @Sysutils@GetLocaleChar$qqriic  +
mov byte ptr dword_4F1AE0+2 al +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4AD43E  +
lea eax [ebp+var_40] +
mov edx 10h +
call unknown_libname_541  +
retn   +
jmp unknown_libname_539  +
jmp loc_4AD429  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
add esp 0FFFFFFECh +
test ebx ebx +
mov ebx dword_4E6CA8 +
jmp loc_4AD5A0  +
call dword ptr [ebx+4]  +
mov ebx [ebx] +
test al al +
jz loc_4AD5A8  +
test ebx ebx +
jnz loc_4AD59B  +
pop ebx  +
retn   +
***
jmp loc_4AD5C4  +
mov eax [ebx] +
mov edx [eax] +
mov [ebx] edx +
mov edx 8 +
call sub_4B97E0  +
cmp dword ptr [ebx] 0 +
jnz loc_4AD5B4  +
pop ebx  +
retn   +
***
call GetModuleHandleA  +
mov ebx eax +
test ebx ebx +
jz loc_4AD5ED  +
push offset aGetdiskfreespa  +
push ebx  +
call GetProcAddress  +
mov dword_4E6A58 eax +
cmp dword_4E6A58 0 +
jnz loc_4AD600  +
mov eax offset unknown_libname_465 +
mov dword_4E6A58 eax +
pop ebx  +
retn   +
***
mov edx 1 +
mov edx 0FFFFFFFFh +
mov eax edx +
retn   +
***
xadd [edx] eax +
retn   +
***
call unknown_libname_536  +
mov ebx edx +
mov esi eax +
mov edx ebx +
and dl 0FCh +
mov eax esi +
call sub_4BA7FC  +
lea eax [esi+0Ch] +
push eax  +
call DeleteCriticalSection  +
test bl bl +
jle loc_4AD67B  +
mov eax esi +
call @System@@ClassDestroy$qqrp14System@TObject  +
pop esi  +
pop ebx  +
retn   +
***
add eax 0Ch +
push eax  +
call EnterCriticalSection  +
mov al 1 +
retn   +
***
add eax 0Ch +
push eax  +
call LeaveCriticalSection  +
retn   +
***
add eax 0Ch +
push eax  +
call EnterCriticalSection  +
retn   +
***
add eax 0Ch +
push eax  +
call LeaveCriticalSection  +
retn   +
***
push edi  +
push ebp  +
call unknown_libname_536  +
mov ebx edx +
mov edi eax +
xor esi esi +
mov ebp [edi+esi*4+4] +
xor eax eax +
mov [edi+esi*4+4] eax +
test ebp ebp +
jz loc_4AD73F  +
mov eax ebp +
mov ebp [ebp+0] +
call sub_4B97E0  +
test ebp ebp +
jnz loc_4AD731  +
inc esi  +
cmp esi 10h +
jnz loc_4AD723  +
mov edx ebx +
and dl 0FCh +
mov eax edi +
call sub_4BA7FC  +
test bl bl +
jle loc_4AD75C  +
mov eax edi +
call @System@@ClassDestroy$qqrp14System@TObject  +
pop ebp  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push ecx  +
push edi  +
push ebp  +
push ecx  +
mov [esp+4+var_4] edx +
mov edi eax +
mov eax edi +
call sub_4AD764  +
mov ebx eax +
call GetCurrentThreadId  +
mov esi eax +
xor eax eax +
mov al bl +
mov ebp [edi+eax*4+4] +
jmp loc_4AD7A3  +
mov ebp [ebp+0] +
test ebp ebp +
jz loc_4AD7AC  +
cmp esi [ebp+4] +
jnz loc_4AD7A0  +
test ebp ebp +
jnz loc_4AD7E8  +
mov eax edi +
call sub_4AD804  +
mov ebp eax +
test ebp ebp +
jnz loc_4AD7E8  +
mov eax 10h +
call sub_4A8724  +
mov ebp eax +
mov [ebp+4] esi +
mov dword ptr [ebp+8] 7FFFFFFFh +
mov [ebp+0] ebp +
xor eax eax +
mov al bl +
lea eax [edi+eax*4+4] +
mov edx ebp +
call @SysUtils@_16969  +
mov [ebp+0] eax +
mov eax [esp+4+var_4] +
mov [eax] ebp +
pop edx  +
pop ebp  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov eax [edx] +
xor ecx ecx +
mov [eax+4] ecx +
mov eax [edx] +
xor edx edx +
mov [eax+8] edx +
retn   +
***
mov eax ebx +
call sub_4AD764  +
and eax 0FFh +
mov ebx [ebx+eax*4+4] +
test ebx ebx +
jz loc_4AD83F  +
lea eax [ebx+8] +
mov edx 7FFFFFFFh +
call @SysUtils@_16969  +
cmp eax 7FFFFFFFh +
jz loc_4AD839  +
call GetCurrentThreadId  +
mov [ebx+4] eax +
jmp loc_4AD83F  +
mov ebx [ebx] +
test ebx ebx +
jnz loc_4AD81B  +
mov eax ebx +
pop ebx  +
retn   +
***
test dl dl +
jz loc_4AD852  +
add esp 0FFFFFFF0h +
call unknown_libname_535  +
mov ebx edx +
mov esi eax +
xor edx edx +
mov eax esi +
call @System@TObject@$bctr$qqrv  +
mov dword ptr [esi+0Ch] 0FFFFh +
push 0  +
push 0FFFFFFFFh  +
push 0FFFFFFFFh  +
push 0  +
call CreateEventA  +
mov [esi+10h] eax +
push 0  +
push 0  +
push 0  +
push 0  +
call CreateEventA  +
mov [esi+14h] eax +
mov dword ptr [esi+18h] 0FFFFFFFFh +
mov dl 1 +
mov eax ds:off_4AD6B0 +
call @System@TObject@$bctr$qqrv  +
mov [esi+20h] eax +
mov eax esi +
test bl bl +
jz loc_4AD8B1  +
call sub_4BABC8  +
pop large dword ptr fs:0  +
add esp 0Ch +
mov eax esi +
pop esi  +
pop ebx  +
retn   +
***
call unknown_libname_536  +
mov ebx edx +
mov esi eax +
mov eax esi +
call sub_4AD944  +
mov edx ebx +
and dl 0FCh +
mov eax esi +
call sub_4BA7FC  +
mov eax [esi+10h] +
push eax  +
call CloseHandle  +
mov eax [esi+14h] +
push eax  +
call CloseHandle  +
mov eax [esi+20h] +
call @System@TObject@Free$qqrv  +
test bl bl +
jle loc_4AD8FB  +
mov eax esi +
call @System@@ClassDestroy$qqrp14System@TObject  +
pop esi  +
pop ebx  +
retn   +
***
mov eax [eax+10h] +
push eax  +
call ResetEvent  +
retn   +
***
mov eax [eax+10h] +
push eax  +
call SetEvent  +
retn   +
***
mov eax [eax+14h] +
push eax  +
call SetEvent  +
retn   +
***
mov edx [eax+18h] +
push edx  +
mov eax [eax+10h] +
push eax  +
call WaitForSingleObject  +
retn   +
***
mov edx [eax+18h] +
push edx  +
mov eax [eax+14h] +
push eax  +
call WaitForSingleObject  +
retn   +
***
push edi  +
mov ebx eax +
mov edx esp +
mov eax [ebx+20h] +
call sub_4AD77C  +
dec dword ptr [ebx+1Ch]  +
cmp dword ptr [ebx+1Ch] 0 +
jnz loc_4ADA17  +
xor eax eax +
mov [ebx+24h] eax +
lea eax [ebx+0Ch] +
mov edx 0FFFFh +
call @SysUtils@_16970  +
mov eax ebx +
call sub_4AD918  +
mov eax ebx +
call sub_4AD90C  +
mov eax [esp+4+var_4] +
cmp dword ptr [eax+0Ch] 0 +
jnz loc_4ADA2A  +
mov edx esp +
mov eax [ebx+20h] +
call sub_4AD7F4  +
pop edx  +
pop ebx  +
retn   +
***
push ecx  +
mov ebx eax +
mov edx [eax] +
xor ecx ecx +
mov [eax] ecx +
mov eax edx +
call @System@TObject@Free$qqrv  +
retn   +
***
push edi  +
mov edi ecx +
mov esi edx +
mov ebx eax +
test ebx ebx +
jz loc_4ADB1C  +
push edi  +
push esi  +
push ebx  +
mov eax [ebx] +
call dword ptr [eax]  +
test eax eax +
jz loc_4ADB20  +
xor eax eax +
jmp loc_4ADB22  +
mov al 1 +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push 0  +
push ebx  +
push esi  +
push edi  +
mov edi ecx +
mov esi edx +
mov ebx eax +
xor eax eax +
push ebp  +
push offset loc_4ADB9F  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
test ebx ebx +
jz loc_4ADB81  +
lea eax [ebp+var_4] +
call unknown_libname_560  +
mov ecx eax +
mov edx offset dword_4ADBB0 +
mov eax ebx +
call @System@TObject@GetInterface$qqrrx5_GUIDpv  +
test al al +
jz loc_4ADB72  +
mov ecx edi +
mov edx esi +
mov eax [ebp+var_4] +
call @Sysutils@Supports$qqrx35System@_DelphiInterface$t8IUnknown_rx5_GUIDpv  +
test al al +
jnz loc_4ADB85  +
mov ecx edi +
mov edx esi +
mov eax ebx +
call @System@TObject@GetInterface$qqrrx5_GUIDpv  +
test al al +
jnz loc_4ADB85  +
xor eax eax +
jmp loc_4ADB87  +
mov al 1 +
mov ebx eax +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4ADBA6  +
lea eax [ebp+var_4] +
call unknown_libname_560  +
retn   +
jmp unknown_libname_539  +
jmp loc_4ADB96  +
mov eax ebx +
pop edi  +
pop esi  +
pop ebx  +
pop ecx  +
pop ebp  +
retn   +
***
add esp 0FFFFFFF4h +
push ebx  +
mov ebx eax +
push edx  +
call SetErrorMode  +
mov [ebp+uMode] eax +
xor eax eax +
push ebp  +
push offset loc_4ADC32  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
fnstcw  [ebp+var_2] +
xor eax eax +
push ebp  +
push offset loc_4ADC14  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov eax ebx +
call unknown_libname_550  +
push eax  +
call LoadLibraryA  +
mov [ebp+var_8] eax +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4ADC1B  +
fnclex   +
fldcw  [ebp+var_2] +
retn   +
jmp unknown_libname_539  +
jmp loc_4ADC0E  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4ADC39  +
mov eax [ebp+uMode] +
push eax  +
call SetErrorMode  +
retn   +
jmp unknown_libname_539  +
jmp loc_4ADC28  +
mov eax [ebp+var_8] +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
xor eax eax +
push ebp  +
push offset loc_4AE089  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
inc dword_4F1B24  +
jnz loc_4AE07B  +
mov eax offset unk_4F1B34 +
call @Sysutils@FreeAndNil$qqrpv  +
call sub_4AD5AC  +
call unknown_libname_580  +
mov eax offset off_4E6BF4 +
mov ecx 16h +
mov edx ds:off_4AC394 +
call @System@@FinalizeArray$qqrpvt1ui  +
mov eax offset dword_4E6BBC +
mov ecx 7 +
mov edx ds:off_4AC314 +
call @System@@FinalizeArray$qqrpvt1ui  +
mov eax offset off_4E6AD4 +
mov ecx 2 +
mov edx ds:@$xp$13System@String +
call @System@@FinalizeArray$qqrpvt1ui  +
mov eax offset off_4E6ACC +
call unknown_libname_540  +
mov eax offset dword_4F1B20 +
mov edx ds:off_4A84E8 +
call @System@@DynArrayClear$qqrrpvpv  +
mov eax offset dword_4F1B1C +
mov edx ds:off_4A84C4 +
call @System@@DynArrayClear$qqrrpvpv  +
mov eax offset unk_4F1AE4 +
mov ecx 7 +
mov edx ds:@$xp$13System@String +
call @System@@FinalizeArray$qqrpvt1ui  +
mov eax offset unk_4F1AB8 +
mov ecx 7 +
mov edx ds:@$xp$13System@String +
call @System@@FinalizeArray$qqrpvt1ui  +
mov eax offset unk_4F1A9C +
mov ecx 7 +
mov edx ds:@$xp$13System@String +
call @System@@FinalizeArray$qqrpvt1ui  +
mov eax offset unk_4F1A6C +
mov ecx 0Ch +
mov edx ds:@$xp$13System@String +
call @System@@FinalizeArray$qqrpvt1ui  +
mov eax offset unk_4F1A3C +
mov ecx 0Ch +
mov edx ds:@$xp$13System@String +
call @System@@FinalizeArray$qqrpvt1ui  +
mov eax offset dword_4F1A38 +
call unknown_libname_540  +
mov eax offset dword_4F1A34 +
call unknown_libname_540  +
mov eax offset dword_4F1A30 +
call unknown_libname_540  +
mov eax offset dword_4F1A2C +
call unknown_libname_540  +
mov eax offset dword_4F1A24 +
call unknown_libname_540  +
mov eax offset dword_4F1A20 +
call unknown_libname_540  +
mov eax offset dword_4F1A14 +
call unknown_libname_540  +
mov eax offset unk_4E6A74 +
call unknown_libname_540  +
mov eax offset unk_4E6A60 +
call unknown_libname_552  +
mov eax offset unk_4E6A5C +
call unknown_libname_540  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4AE090  +
retn   +
jmp unknown_libname_539  +
jmp locret_4AE088  +
pop ebp  +
retn   +
***
xor eax eax +
push ebp  +
push offset loc_4AE0FC  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
sub dword_4F1B24 1 +
jnb loc_4AE0EE  +
mov eax offset dword_4ADC44 +
call @System@@InitResStringImports$qqrv  +
mov eax offset unknown_libname_483 +
call @System@@InitImports$qqrv  +
cmp byte_4EAAE6 0 +
jz loc_4AE0DA  +
mov eax offset off_4E6ACC +
mov edx offset _str_0x_0.Text +
call unknown_libname_542  +
call sub_4AC838  +
call sub_4AC928  +
call @SysUtils@_16779  +
call @Sysutils@GetFormatSettings$qqrv  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4AE103  +
retn   +
jmp unknown_libname_539  +
jmp locret_4AE0FB  +
pop ebp  +
retn   +
***
xor eax eax +
push ebp  +
push offset loc_4AE419  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
inc dword_4F1B38  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4AE420  +
retn   +
jmp unknown_libname_539  +
jmp locret_4AE418  +
pop ebp  +
retn   +
***
cmp [ebp+arg_8] 400h +
jz loc_4AE43F  +
mov eax 80004001h +
jmp loc_4AE456  +
mov ax [ebp+vt] +
push eax  +
mov ax [ebp+wFlags] +
push eax  +
mov eax [ebp+pvarSrc] +
push eax  +
mov eax [ebp+pvargDest] +
push eax  +
call VariantChangeType  +
pop ebp  +
retn 14h  +
***
mov eax 80004001h +
mov eax 80004001h +
mov eax 80004001h +
push 0  +
push ebx  +
xor eax eax +
push ebp  +
push offset loc_4AE4DA  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
cmp [ebp+arg_4] 400h +
jz loc_4AE4A4  +
mov ebx 80004001h +
jmp loc_4AE4C4  +
lea eax [ebp+var_4] +
mov edx [ebp+arg_0] +
call unknown_libname_548  +
mov eax [ebp+var_4] +
mov edx [ebp+arg_C] +
call sub_4A8CD4  +
and eax 7Fh +
mov ebx dword_4E6DB4[eax*4] +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4AE4E1  +
lea eax [ebp+var_4] +
call unknown_libname_540  +
retn   +
jmp unknown_libname_539  +
jmp loc_4AE4D1  +
mov eax ebx +
pop ebx  +
pop ecx  +
pop ebp  +
retn 10h  +
***
push 0  +
push ebx  +
xor eax eax +
push ebp  +
push offset loc_4AE546  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
cmp [ebp+arg_4] 400h +
jz loc_4AE510  +
mov ebx 80004001h +
jmp loc_4AE530  +
lea eax [ebp+var_4] +
mov edx [ebp+arg_0] +
call unknown_libname_548  +
mov eax [ebp+var_4] +
mov edx [ebp+arg_C] +
call sub_4AA0D4  +
and eax 7Fh +
mov ebx dword_4E6DB4[eax*4] +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4AE54D  +
lea eax [ebp+var_4] +
call unknown_libname_540  +
retn   +
jmp unknown_libname_539  +
jmp loc_4AE53D  +
mov eax ebx +
pop ebx  +
pop ecx  +
pop ebp  +
retn 10h  +
***
push 0  +
push ebx  +
xor eax eax +
push ebp  +
push offset loc_4AE5B2  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
cmp [ebp+arg_4] 400h +
jz loc_4AE57C  +
mov ebx 80004001h +
jmp loc_4AE59C  +
lea eax [ebp+var_4] +
mov edx [ebp+arg_0] +
call unknown_libname_548  +
mov eax [ebp+var_4] +
mov edx [ebp+arg_C] +
call sub_4AA0A8  +
and eax 7Fh +
mov ebx dword_4E6DB4[eax*4] +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4AE5B9  +
lea eax [ebp+var_4] +
call unknown_libname_540  +
retn   +
jmp unknown_libname_539  +
jmp loc_4AE5A9  +
mov eax ebx +
pop ebx  +
pop ecx  +
pop ebp  +
retn 10h  +
***
push 0  +
push ebx  +
xor eax eax +
push ebp  +
push offset loc_4AE61E  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
cmp [ebp+arg_4] 400h +
jz loc_4AE5E8  +
mov ebx 80004001h +
jmp loc_4AE608  +
lea eax [ebp+var_4] +
mov edx [ebp+arg_0] +
call unknown_libname_548  +
mov eax [ebp+var_4] +
mov edx [ebp+arg_C] +
call sub_4AB8F8  +
and eax 7Fh +
mov ebx dword_4E6DB4[eax*4] +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4AE625  +
lea eax [ebp+var_4] +
call unknown_libname_540  +
retn   +
jmp unknown_libname_539  +
jmp loc_4AE615  +
mov eax ebx +
pop ebx  +
pop ecx  +
pop ebp  +
retn 10h  +
***
push 0  +
push ebx  +
xor eax eax +
push ebp  +
push offset loc_4AE68A  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
cmp [ebp+arg_4] 400h +
jz loc_4AE654  +
mov ebx 80004001h +
jmp loc_4AE674  +
lea eax [ebp+var_4] +
mov edx [ebp+arg_0] +
call unknown_libname_548  +
mov eax [ebp+var_4] +
mov edx [ebp+arg_C] +
call sub_4AA100  +
and eax 7Fh +
mov ebx dword_4E6DB4[eax*4] +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4AE691  +
lea eax [ebp+var_4] +
call unknown_libname_540  +
retn   +
jmp unknown_libname_539  +
jmp loc_4AE681  +
mov eax ebx +
pop ebx  +
pop ecx  +
pop ebp  +
retn 10h  +
***
add esp 0FFFFFFF8h +
push ebx  +
xor eax eax +
mov [ebp+var_8] eax +
xor eax eax +
push ebp  +
push offset loc_4AE709  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
cmp [ebp+arg_4] 400h +
jz loc_4AE6C6  +
mov ebx 80004001h +
jmp loc_4AE6F3  +
lea eax [ebp+var_8] +
mov edx [ebp+arg_0] +
call unknown_libname_548  +
mov eax [ebp+var_8] +
lea edx [ebp-1] +
call sub_4A8DE0  +
and eax 7Fh +
mov ebx dword_4E6DB4[eax*4] +
cmp [ebp+var_1] 1 +
cmc   +
sbb eax eax +
mov edx [ebp+arg_C] +
mov [edx] ax +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4AE710  +
lea eax [ebp+var_8] +
call unknown_libname_540  +
retn   +
jmp unknown_libname_539  +
jmp loc_4AE700  +
mov eax ebx +
pop ebx  +
pop ecx  +
pop ecx  +
pop ebp  +
retn 10h  +
***
push 0  +
push ebx  +
mov eax [ebp+arg_10] +
test eax eax +
jz loc_4AE72D  +
xor edx edx +
mov [eax] edx +
xor eax eax +
push ebp  +
push offset loc_4AE77C  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
cmp [ebp+arg_8] 400h +
jz loc_4AE74B  +
mov ebx 80004001h +
jmp loc_4AE766  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
lea eax [ebp+var_4] +
call @CurrToStr$qqr8Currency  +
mov edx [ebp+var_4] +
mov eax [ebp+arg_10] +
call unknown_libname_554  +
xor ebx ebx +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4AE783  +
lea eax [ebp+var_4] +
call unknown_libname_540  +
retn   +
jmp unknown_libname_539  +
jmp loc_4AE773  +
mov eax ebx +
pop ebx  +
pop ecx  +
pop ebp  +
retn 14h  +
***
push 0  +
push ebx  +
mov eax [ebp+arg_10] +
test eax eax +
jz loc_4AE79D  +
xor edx edx +
mov [eax] edx +
xor eax eax +
push ebp  +
push offset loc_4AE7EC  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
cmp [ebp+arg_8] 400h +
jz loc_4AE7BB  +
mov ebx 80004001h +
jmp loc_4AE7D6  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
lea eax [ebp+var_4] +
call sub_4AB088  +
mov edx [ebp+var_4] +
mov eax [ebp+arg_10] +
call unknown_libname_554  +
xor ebx ebx +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4AE7F3  +
lea eax [ebp+var_4] +
call unknown_libname_540  +
retn   +
jmp unknown_libname_539  +
jmp loc_4AE7E3  +
mov eax ebx +
pop ebx  +
pop ecx  +
pop ebp  +
retn 14h  +
***
push 0  +
push ebx  +
mov eax [ebp+arg_C] +
test eax eax +
jz loc_4AE80D  +
xor edx edx +
mov [eax] edx +
xor eax eax +
push ebp  +
push offset loc_4AE860  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
cmp [ebp+arg_4] 400h +
jz loc_4AE82B  +
mov ebx 80004001h +
jmp loc_4AE84A  +
cmp [ebp+arg_0] 1 +
sbb eax eax +
inc eax  +
lea ecx [ebp+var_4] +
xor edx edx +
call sub_4A8E7C  +
mov edx [ebp+var_4] +
mov eax [ebp+arg_C] +
call unknown_libname_554  +
xor ebx ebx +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4AE867  +
lea eax [ebp+var_4] +
call unknown_libname_540  +
retn   +
jmp unknown_libname_539  +
jmp loc_4AE857  +
mov eax ebx +
pop ebx  +
pop ecx  +
pop ebp  +
retn 10h  +
***
mov ax [ebp+arg_10] +
push eax  +
mov ax [ebp+arg_C] +
push eax  +
mov eax [ebp+arg_8] +
push eax  +
mov eax [ebp+arg_4] +
push eax  +
mov eax [ebp+arg_0] +
push eax  +
call dword_4F1B40  +
pop ebp  +
retn 14h  +
***
mov eax [ebp+arg_4] +
push eax  +
mov eax [ebp+arg_0] +
push eax  +
call dword_4F1B44  +
pop ebp  +
retn 8  +
***
mov eax [ebp+arg_4] +
push eax  +
mov eax [ebp+arg_0] +
push eax  +
call dword_4F1B48  +
pop ebp  +
retn 8  +
***
mov eax [ebp+arg_C] +
push eax  +
mov eax [ebp+arg_8] +
push eax  +
mov eax [ebp+arg_4] +
push eax  +
mov eax [ebp+arg_0] +
push eax  +
call dword_4F1B74  +
pop ebp  +
retn 10h  +
***
mov eax [ebp+arg_C] +
push eax  +
mov eax [ebp+arg_8] +
push eax  +
mov eax [ebp+arg_4] +
push eax  +
mov eax [ebp+arg_0] +
push eax  +
call dword_4F1B7C  +
pop ebp  +
retn 10h  +
***
mov eax [ebp+arg_C] +
push eax  +
mov eax [ebp+arg_8] +
push eax  +
mov eax [ebp+arg_4] +
push eax  +
mov eax [ebp+arg_0] +
push eax  +
call dword_4F1B80  +
pop ebp  +
retn 10h  +
***
mov eax [ebp+arg_C] +
push eax  +
mov eax [ebp+arg_8] +
push eax  +
mov eax [ebp+arg_4] +
push eax  +
mov eax [ebp+arg_0] +
push eax  +
call dword_4F1B84  +
pop ebp  +
retn 10h  +
***
mov eax [ebp+arg_C] +
push eax  +
mov eax [ebp+arg_8] +
push eax  +
mov eax [ebp+arg_4] +
push eax  +
mov eax [ebp+arg_0] +
push eax  +
call dword_4F1B88  +
pop ebp  +
retn 10h  +
***
mov eax [ebp+arg_10] +
test eax eax +
jz loc_4AE972  +
xor edx edx +
mov [eax] edx +
mov eax [ebp+arg_10] +
call unknown_libname_552  +
push eax  +
mov eax [ebp+arg_C] +
push eax  +
mov eax [ebp+arg_8] +
push eax  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call dword_4F1B8C  +
pop ebp  +
retn 14h  +
***
mov eax [ebp+arg_10] +
test eax eax +
jz loc_4AE9A2  +
xor edx edx +
mov [eax] edx +
mov eax [ebp+arg_10] +
call unknown_libname_552  +
push eax  +
mov eax [ebp+arg_C] +
push eax  +
mov eax [ebp+arg_8] +
push eax  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call dword_4F1B90  +
pop ebp  +
retn 14h  +
***
mov eax [ebp+arg_C] +
test eax eax +
jz loc_4AE9D2  +
xor edx edx +
mov [eax] edx +
mov eax [ebp+arg_C] +
call unknown_libname_552  +
push eax  +
mov eax [ebp+arg_8] +
push eax  +
mov eax [ebp+arg_4] +
push eax  +
mov ax [ebp+arg_0] +
push eax  +
call dword_4F1B94  +
pop ebp  +
retn 10h  +
***
push ebx  +
mov ebx edx +
mov edx ebx +
mov ecx [ebp+arg_0] +
cmp dword ptr [ecx-4] 0 +
jz loc_4AEA1A  +
push eax  +
mov eax [ebp+arg_0] +
mov eax [eax-4] +
push eax  +
call GetProcAddress  +
mov edx eax +
test edx edx +
jnz loc_4AEA1A  +
mov edx ebx +
mov eax edx +
pop ebx  +
pop ebp  +
retn   +
***
push ecx  +
push offset aOleaut32_dll  +
call GetModuleHandleA  +
mov [ebp+var_4] eax +
push ebp  +
mov edx offset sub_4AE42C +
mov eax offset aVariantchanget +
call sub_4AE9F4  +
pop ecx  +
mov dword_4F1B40 eax +
push ebp  +
mov edx offset unknown_libname_484 +
mov eax offset aVarneg +
call sub_4AE9F4  +
pop ecx  +
mov dword_4F1B44 eax +
push ebp  +
mov edx offset unknown_libname_484 +
mov eax offset aVarnot +
call sub_4AE9F4  +
pop ecx  +
mov dword_4F1B48 eax +
push ebp  +
mov edx offset unknown_libname_485 +
mov eax offset aVaradd +
call sub_4AE9F4  +
pop ecx  +
mov dword_4F1B4C eax +
push ebp  +
mov edx offset unknown_libname_485 +
mov eax offset aVarsub +
call sub_4AE9F4  +
pop ecx  +
mov dword_4F1B50 eax +
push ebp  +
mov edx offset unknown_libname_485 +
mov eax offset aVarmul +
call sub_4AE9F4  +
pop ecx  +
mov dword_4F1B54 eax +
push ebp  +
mov edx offset unknown_libname_485 +
mov eax offset aVardiv +
call sub_4AE9F4  +
pop ecx  +
mov dword_4F1B58 eax +
push ebp  +
mov edx offset unknown_libname_485 +
mov eax offset aVaridiv +
call sub_4AE9F4  +
pop ecx  +
mov dword_4F1B5C eax +
push ebp  +
mov edx offset unknown_libname_485 +
mov eax offset aVarmod +
call sub_4AE9F4  +
pop ecx  +
mov dword_4F1B60 eax +
push ebp  +
mov edx offset unknown_libname_485 +
mov eax offset aVarand +
call sub_4AE9F4  +
pop ecx  +
mov dword_4F1B64 eax +
push ebp  +
mov edx offset unknown_libname_485 +
mov eax offset aVaror +
call sub_4AE9F4  +
pop ecx  +
mov dword_4F1B68 eax +
push ebp  +
mov edx offset unknown_libname_485 +
mov eax offset aVarxor +
call sub_4AE9F4  +
pop ecx  +
mov dword_4F1B6C eax +
push ebp  +
mov edx offset unknown_libname_486 +
mov eax offset aVarcmp +
call sub_4AE9F4  +
pop ecx  +
mov dword_4F1B70 eax +
push ebp  +
mov edx offset sub_4AE480 +
mov eax offset aVari4fromstr +
call sub_4AE9F4  +
pop ecx  +
mov dword_4F1B74 eax +
push ebp  +
mov edx offset sub_4AE4EC +
mov eax offset aVarr4fromstr +
call sub_4AE9F4  +
pop ecx  +
mov dword_4F1B78 eax +
push ebp  +
mov edx offset sub_4AE558 +
mov eax offset aVarr8fromstr +
call sub_4AE9F4  +
pop ecx  +
mov dword_4F1B7C eax +
push ebp  +
mov edx offset sub_4AE5C4 +
mov eax offset aVardatefromstr +
call sub_4AE9F4  +
pop ecx  +
mov dword_4F1B80 eax +
push ebp  +
mov edx offset sub_4AE630 +
mov eax offset aVarcyfromstr +
call sub_4AE9F4  +
pop ecx  +
mov dword_4F1B84 eax +
push ebp  +
mov edx offset sub_4AE69C +
mov eax offset aVarboolfromstr +
call sub_4AE9F4  +
pop ecx  +
mov dword_4F1B88 eax +
push ebp  +
mov edx offset sub_4AE71C +
mov eax offset aVarbstrfromcy +
call sub_4AE9F4  +
pop ecx  +
mov dword_4F1B8C eax +
push ebp  +
mov edx offset sub_4AE78C +
mov eax offset aVarbstrfromdat +
call sub_4AE9F4  +
pop ecx  +
mov dword_4F1B90 eax +
push ebp  +
mov edx offset sub_4AE7FC +
mov eax offset aVarbstrfromboo +
call sub_4AE9F4  +
pop ecx  +
mov dword_4F1B94 eax +
pop ecx  +
pop ebp  +
retn   +
***
xor eax eax +
push ebp  +
push offset loc_4AED51  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
inc dword_4F1B3C  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4AED58  +
retn   +
jmp unknown_libname_539  +
jmp locret_4AED50  +
pop ebp  +
retn   +
***
sub dword_4F1B3C 1 +
jnb locret_4AED6A  +
call @VarUtils@_16415  +
retn   +
***
push 0  +
add esp 0FFFFFFE4h +
push 0  +
push 0  +
add esp 0FFFFFFE4h +
push 0  +
mov ecx 5 +
test eax eax +
jz locret_4AF865  +
call sub_4AF634  +
retn   +
***
jz loc_4AF899  +
mov ebx eax +
sub ebx 80020005h +
jz loc_4AF87E  +
sub ebx 5 +
jz loc_4AF889  +
jmp loc_4AF894  +
mov eax edx +
mov edx ecx +
call sub_4AF400  +
jmp loc_4AF899  +
mov eax edx +
mov edx ecx +
call sub_4AF544  +
jmp loc_4AF899  +
call sub_4AF634  +
pop ebx  +
retn   +
***
mov esi edx +
push 0  +
mov eax ebx +
call @Variants@@VarClear$qqrr8TVarData  +
mov word ptr [ebx] 1 +
pop ebx  +
retn   +
***
push ebx  +
mov ecx [ebp+arg_0] +
add ecx 0FFFFFD00h +
mov edx [ecx+eax*8+4] +
add edx [ecx+eax*8] +
mov ebx [ebp+arg_0] +
cmp edx [ebx+eax*4-100h] +
setnle dl  +
dec eax  +
test dl dl +
jz loc_4AF9B2  +
test eax eax +
jge loc_4AF995  +
mov eax edx +
pop ebx  +
pop ebp  +
retn   +
***
push ebx  +
push esi  +
mov dl 1 +
mov ecx [ebp+arg_0] +
inc dword ptr [ecx+eax*4-100h]  +
mov ecx [ebp+arg_0] +
mov ecx [ecx+eax*8-2FCh] +
mov ebx ecx +
mov esi [ebp+arg_0] +
add ebx [esi+eax*8-300h] +
mov esi [ebp+arg_0] +
cmp ebx [esi+eax*4-100h] +
jg loc_4AFA0D  +
test eax eax +
jnz loc_4AF9F3  +
xor edx edx +
jmp loc_4AFA0D  +
mov edx [ebp+arg_0] +
mov edx [ebp+arg_0] +
mov [edx+eax*4-100h] ecx +
mov edx [ebp+arg_0] +
push edx  +
dec eax  +
call unknown_libname_490  +
pop ecx  +
mov edx eax +
mov eax edx +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
add esp 0FFFFFCE8h +
push ecx  +
mov ebx eax +
mov si [ebx] +
cmp si 14h +
jnb loc_4AFBAB  +
push ebx  +
call VariantClear  +
call unknown_libname_488  +
jmp loc_4AFC06  +
cmp si 100h +
jnz loc_4AFBC1  +
mov word ptr [ebx] 0 +
lea eax [ebx+8] +
call unknown_libname_540  +
jmp loc_4AFC06  +
cmp si 101h +
jnz loc_4AFBD2  +
mov eax ebx +
call dword_4F1BAC  +
jmp loc_4AFC06  +
test si 2000h +
jz loc_4AFBE2  +
mov eax ebx +
call @Variants@_16455  +
jmp loc_4AFC06  +
mov edx esp +
mov eax esi +
call sub_4B7BE8  +
test al al +
jz loc_4AFBFB  +
mov edx ebx +
mov eax [esp+4+var_4] +
mov ecx [eax] +
call dword ptr [ecx+24h]  +
jmp loc_4AFC06  +
push ebx  +
call VariantClear  +
call unknown_libname_488  +
pop edx  +
pop esi  +
pop ebx  +
retn   +
***
test word ptr [eax] 0BFE8h +
jnz loc_4AFC19  +
mov word ptr [eax] 0 +
retn   +
call sub_4AFB90  +
retn   +
***
add esp 0FFFFFFE8h +
push ebx  +
push esi  +
mov ebx [ebp+arg_4] +
cmp word ptr [ebx] 400Ch +
jnz loc_4AFC4F  +
mov eax [ebp+arg_C] +
push eax  +
mov eax [ebp+arg_8] +
push eax  +
mov eax [ebx+8] +
push eax  +
mov eax [ebp+arg_0] +
push eax  +
call @Variants@@DispInvoke$qp8TVarDatarx8TVarDatap16System@TCallDescpv  +
add esp 10h +
jmp loc_4AFD1B  +
cmp [ebp+arg_0] 0 +
jnz loc_4AFC5C  +
xor eax eax +
mov [ebp+var_8] eax +
jmp loc_4AFC6B  +
lea eax [ebp+pvarg] +
push eax  +
call VariantInit  +
lea eax [ebp+pvarg] +
mov [ebp+var_8] eax +
xor eax eax +
push ebp  +
push offset loc_4AFD14  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov si [ebx] +
movzx eax si +
cmp eax 101h +
jg loc_4AFC94  +
jz loc_4AFCA0  +
sub eax 9 +
jz loc_4AFCA0  +
sub eax 4 +
jz loc_4AFCA0  +
jmp loc_4AFCC1  +
sub eax 4009h +
jz loc_4AFCA0  +
sub eax 4 +
jnz loc_4AFCC1  +
cmp dword_4F1BA8 0 +
jz loc_4AFCEB  +
lea eax [ebp+arg_C] +
push eax  +
mov eax [ebp+arg_8] +
push eax  +
push ebx  +
mov eax [ebp+var_8] +
push eax  +
call dword_4F1BA8  +
add esp 10h +
jmp loc_4AFCEB  +
lea edx [ebp+var_4] +
mov eax esi +
call sub_4B7BE8  +
test al al +
jz loc_4AFCE6  +
mov eax [ebp+arg_8] +
push eax  +
lea eax [ebp+arg_C] +
push eax  +
mov ecx ebx +
mov edx [ebp+var_8] +
mov eax [ebp+var_4] +
mov ebx [eax] +
call dword ptr [ebx+10h]  +
jmp loc_4AFCEB  +
call sub_4AF49C  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4AFD1B  +
cmp [ebp+var_8] 0 +
jz locret_4AFD13  +
mov eax [ebp+var_8] +
mov edx eax +
mov eax [ebp+arg_0] +
call @Variants@@VarCopy$qqrr8TVarDatarx8TVarData  +
lea eax [ebp+pvarg] +
call @Variants@@VarClear$qqrr8TVarData  +
retn   +
jmp unknown_libname_539  +
jmp loc_4AFCF8  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
push ebx  +
mov ecx [ebp+arg_0] +
add ecx 0FFFFFD00h +
mov edx [ecx+eax*8+4] +
add edx [ecx+eax*8] +
mov ebx [ebp+arg_0] +
cmp edx [ebx+eax*4-100h] +
setnle dl  +
dec eax  +
test dl dl +
jz loc_4AFD4E  +
test eax eax +
jge loc_4AFD31  +
mov eax edx +
pop ebx  +
pop ebp  +
retn   +
***
push ebx  +
push esi  +
mov dl 1 +
mov ecx [ebp+arg_0] +
inc dword ptr [ecx+eax*4-100h]  +
mov ecx [ebp+arg_0] +
mov ecx [ecx+eax*8-2FCh] +
mov ebx ecx +
mov esi [ebp+arg_0] +
add ebx [esi+eax*8-300h] +
mov esi [ebp+arg_0] +
cmp ebx [esi+eax*4-100h] +
jg loc_4AFDA9  +
test eax eax +
jnz loc_4AFD8F  +
xor edx edx +
jmp loc_4AFDA9  +
mov edx [ebp+arg_0] +
mov edx [ebp+arg_0] +
mov [edx+eax*4-100h] ecx +
mov edx [ebp+arg_0] +
push edx  +
dec eax  +
call unknown_libname_492  +
pop ecx  +
mov edx eax +
mov eax edx +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
add esp 0FFFFFCE0h +
push ebx  +
push esi  +
push edi  +
mov [ebp+var_308] ecx +
mov ebx edx +
mov [ebp+pvargDest] eax +
test byte ptr [ebx+1] 20h +
jnz loc_4AFDDA  +
mov eax 80070057h +
call unknown_libname_488  +
mov ax [ebx] +
mov edx eax +
and dx 0FFFh +
cmp dx 0Ch +
jnz loc_4AFF61  +
test ah 40h +
jz loc_4AFE00  +
mov eax [ebx+8] +
mov eax [eax] +
mov [ebp+psa] eax +
jmp loc_4AFE09  +
mov eax [ebx+8] +
mov [ebp+psa] eax +
mov eax [ebp+psa] +
movzx eax word ptr [eax] +
mov [ebp+cDims] eax +
mov ebx [ebp+cDims] +
dec ebx  +
test ebx ebx +
jl loc_4AFE8E  +
inc ebx  +
xor edi edi +
lea esi [ebp+rgsabound] +
mov eax esi +
mov [ebp+var_320] eax +
mov eax [ebp+var_320] +
add eax 4 +
push eax  +
lea eax [edi+1] +
push eax  +
mov eax [ebp+psa] +
push eax  +
call SafeArrayGetLBound  +
call unknown_libname_488  +
lea eax [ebp+plUbound] +
push eax  +
lea eax [edi+1] +
push eax  +
mov eax [ebp+psa] +
push eax  +
call SafeArrayGetUBound  +
call unknown_libname_488  +
mov eax [ebp+var_320] +
mov edx [ebp+plUbound] +
sub edx [eax+4] +
inc edx  +
mov eax [ebp+var_320] +
mov [eax] edx +
inc edi  +
add esi 8 +
dec ebx  +
jnz loc_4AFE2C  +
lea eax [ebp+rgsabound] +
push eax  +
mov eax [ebp+cDims] +
push eax  +
push 0Ch  +
call SafeArrayCreate  +
mov esi eax +
test esi esi +
jnz loc_4AFEAE  +
call sub_4AF5E0  +
mov eax [ebp+pvargDest] +
call @Variants@@VarClear$qqrr8TVarData  +
mov eax [ebp+pvargDest] +
mov word ptr [eax] 200Ch +
mov eax [ebp+pvargDest] +
mov [eax+8] esi +
mov ebx [ebp+cDims] +
dec ebx  +
test ebx ebx +
jl loc_4AFEF2  +
inc ebx  +
lea eax [ebp+rgsabound.lLbound] +
lea edx [ebp+rgIndices] +
mov ecx [eax] +
mov [edx] ecx +
add edx 4 +
add eax 8 +
dec ebx  +
jnz loc_4AFEE5  +
push ebp  +
mov ebx [ebp+cDims] +
dec ebx  +
mov eax ebx +
call unknown_libname_491  +
pop ecx  +
test al al +
jz loc_4AFF52  +
lea eax [ebp+ppvData] +
push eax  +
lea eax [ebp+rgIndices] +
push eax  +
mov eax [ebp+psa] +
push eax  +
call SafeArrayPtrOfIndex  +
call unknown_libname_488  +
lea eax [ebp+var_31C] +
push eax  +
lea eax [ebp+rgIndices] +
push eax  +
push esi  +
call SafeArrayPtrOfIndex  +
call unknown_libname_488  +
mov eax [ebp+ppvData] +
mov edx eax +
mov eax [ebp+var_31C] +
call [ebp+var_308]  +
push ebp  +
mov eax ebx +
call unknown_libname_492  +
pop ecx  +
test al al +
jnz loc_4AFEF2  +
jmp loc_4AFF73  +
push ebx  +
mov eax [ebp+pvargDest] +
push eax  +
call VariantCopy  +
call unknown_libname_488  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
call @Variants@@VarCopy$qqrr8TVarDatarx8TVarData  +
retn   +
***
push edi  +
push ecx  +
mov esi edx +
mov ebx eax +
test word ptr [ebx] 0BFE8h +
jz loc_4AFF9A  +
mov eax ebx +
call sub_4AFB90  +
mov di [esi] +
cmp di 14h +
jnb loc_4AFFB1  +
push esi  +
push ebx  +
call VariantCopy  +
call unknown_libname_488  +
jmp loc_4B002A  +
cmp di 100h +
jnz loc_4AFFCF  +
mov word ptr [ebx] 100h +
xor eax eax +
mov [ebx+8] eax +
lea eax [ebx+8] +
mov edx [esi+8] +
call unknown_libname_542  +
jmp loc_4B002A  +
cmp di 101h +
jnz loc_4AFFE9  +
mov [ebx] di +
mov eax [esi+8] +
mov [ebx+8] eax +
mov eax ebx +
call dword_4F1BB4  +
jmp loc_4B002A  +
test di 2000h +
jz loc_4B0000  +
mov ecx offset loc_4AFF7C +
mov edx esi +
mov eax ebx +
call @Variants@_16462  +
jmp loc_4B002A  +
mov edx esp +
mov eax edi +
call sub_4B7BE8  +
test al al +
jz loc_4B001E  +
push 0  +
mov ecx esi +
mov edx ebx +
mov eax [esp+8+var_4] +
mov ebx [eax] +
call dword ptr [ebx+28h]  +
jmp loc_4B002A  +
push esi  +
push ebx  +
call VariantCopy  +
call unknown_libname_488  +
pop edx  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov ebx edx +
mov esi eax +
cmp esi ebx +
jz loc_4B0070  +
test word ptr [ebx] 0BFE8h +
jnz loc_4B0067  +
test word ptr [esi] 0BFE8h +
jz loc_4B004F  +
mov eax esi +
call sub_4AFB90  +
mov eax [ebx] +
mov [esi] eax +
mov eax [ebx+4] +
mov [esi+4] eax +
mov eax [ebx+8] +
mov [esi+8] eax +
mov eax [ebx+0Ch] +
mov [esi+0Ch] eax +
jmp loc_4B0070  +
mov edx ebx +
mov eax esi +
call sub_4AFF84  +
pop esi  +
pop ebx  +
retn   +
***
mov esi edx +
xchg eax edx +
call sub_4B39CC  +
retn   +
***
call @Variants@@VarCopyNoInd$qqrr8TVarDatarx8TVarData  +
retn   +
***
push ecx  +
mov ebx edx +
mov esi eax +
mov edx esp +
mov ax [ebx] +
call sub_4B7BE8  +
test al al +
jz loc_4B00CA  +
push 1  +
mov ecx ebx +
mov edx esi +
mov eax [esp+8+var_4] +
mov ebx [eax] +
call dword ptr [ebx+28h]  +
jmp loc_4B00D3  +
mov edx ebx +
mov eax esi +
call @Variants@_16466  +
pop edx  +
pop esi  +
pop ebx  +
retn   +
***
push 0  +
push ebx  +
push esi  +
mov ebx edx +
mov esi eax +
xor eax eax +
push ebp  +
push offset loc_4B02A1  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov ax [ebx] +
movzx edx ax +
and edx 0FFFFBFFFh +
cmp edx 14h +
ja loc_4B026D  +
jmp ds:off_4B010D[edx*4]  +
mov eax esi +
mov edx [ebx+8] +
movsx edx word ptr [edx] +
mov cl 0FEh +
call sub_4BC218  +
jmp loc_4B028B  +
mov eax esi +
mov edx [ebx+8] +
mov edx [edx] +
mov cl 0FCh +
call sub_4BC218  +
jmp loc_4B028B  +
mov eax [ebx+8] +
fld  dword ptr [eax] +
mov eax esi +
call sub_4BC23C  +
jmp loc_4B028B  +
mov eax [ebx+8] +
fld  qword ptr [eax] +
mov eax esi +
call sub_4BC23C  +
jmp loc_4B028B  +
mov eax [ebx+8] +
fild  qword ptr [eax] +
mov eax esi +
call sub_4BC24C  +
jmp loc_4B028B  +
mov eax [ebx+8] +
fld  qword ptr [eax] +
mov eax esi +
call sub_4BC23C  +
jmp loc_4B028B  +
lea edx [ebp+var_4] +
mov eax ebx +
call sub_4B0094  +
mov edx [ebp+var_4] +
mov eax esi +
call sub_4BC25C  +
jmp loc_4B028B  +
mov eax esi +
mov edx [ebx+8] +
mov dx [edx] +
neg dx  +
sbb edx edx +
neg edx  +
call sub_4BC234  +
jmp loc_4B028B  +
mov eax esi +
mov edx [ebx+8] +
movsx edx byte ptr [edx] +
mov cl 0FFh +
call sub_4BC218  +
jmp loc_4B028B  +
mov eax esi +
mov edx [ebx+8] +
movzx edx byte ptr [edx] +
mov cl 1 +
call sub_4BC218  +
jmp loc_4B028B  +
mov eax esi +
mov edx [ebx+8] +
movzx edx word ptr [edx] +
mov cl 2 +
call sub_4BC218  +
jmp loc_4B028B  +
mov eax esi +
mov edx [ebx+8] +
mov edx [edx] +
mov cl 4 +
call sub_4BC218  +
jmp loc_4B028B  +
mov eax [ebx+8] +
mov edx [eax+4] +
mov eax [eax] +
push edx  +
push eax  +
mov eax esi +
call sub_4BC220  +
jmp loc_4B028B  +
mov eax [ebx+8] +
mov edx eax +
mov eax esi +
call @Variants@@VarCopyNoInd$qqrr8TVarDatarx8TVarData  +
jmp loc_4B028B  +
mov edx ebx +
mov eax esi +
call @Variants@_16466  +
jmp loc_4B028B  +
test ah 20h +
jz loc_4B0282  +
mov ecx offset loc_4B009C +
mov edx ebx +
mov eax esi +
call @Variants@_16462  +
jmp loc_4B028B  +
mov edx ebx +
mov eax esi +
call sub_4B00A4  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4B02A8  +
lea eax [ebp+var_4] +
call unknown_libname_552  +
retn   +
jmp unknown_libname_539  +
jmp loc_4B0298  +
pop esi  +
pop ebx  +
pop ecx  +
pop ebp  +
retn   +
***
test byte ptr [edx+1] 40h +
jnz loc_4B02BC  +
call @Variants@@VarCopy$qqrr8TVarDatarx8TVarData  +
retn   +
call sub_4B00D8  +
retn   +
***
mov ebx eax +
retn   +
***
add esp 0FFFFFFF0h +
push ebx  +
push esi  +
push edi  +
mov edi ecx +
mov esi edx +
mov ebx eax +
lea eax [ebp+pvarg] +
push eax  +
call VariantInit  +
xor eax eax +
push ebp  +
push offset loc_4B0348  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov edx esi +
lea eax [ebp+pvarg] +
call @Variants@@VarCopy$qqrr8TVarDatarx8TVarData  +
lea eax [ebp+pvarg] +
call dword_4F1BB0  +
movzx ecx di +
lea edx [ebp+pvarg] +
mov eax ebx +
call sub_4B056C  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4B034F  +
lea eax [ebp+pvarg] +
call @Variants@@VarClear$qqrr8TVarData  +
retn   +
jmp unknown_libname_539  +
jmp loc_4B033F  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
push 0  +
push ebx  +
mov ebx eax +
xor eax eax +
push ebp  +
push offset loc_4B0396  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
lea eax [ebp+var_4] +
call sub_4B39CC  +
mov eax ebx +
mov edx [ebp+var_4] +
call @Variants@@VarFromWStr$qqrr8TVarDatax17System@WideString  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4B039D  +
lea eax [ebp+var_4] +
call unknown_libname_552  +
retn   +
jmp unknown_libname_539  +
jmp loc_4B038D  +
pop ebx  +
pop ecx  +
pop ebp  +
retn   +
***
push 0  +
push ebx  +
mov ebx eax +
xor eax eax +
push ebp  +
push offset loc_4B03E2  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
lea eax [ebp+var_4] +
call sub_4B3258  +
mov eax ebx +
mov edx [ebp+var_4] +
call @Variants@@VarFromLStr$qqrr8TVarDatax17System@AnsiString  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4B03E9  +
lea eax [ebp+var_4] +
call unknown_libname_540  +
retn   +
jmp unknown_libname_539  +
jmp loc_4B03D9  +
pop ebx  +
pop ecx  +
pop ebp  +
retn   +
***
push 0  +
push ebx  +
mov ebx eax +
xor eax eax +
push ebp  +
push offset loc_4B042E  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
lea eax [ebp+var_4] +
call sub_4B4070  +
mov eax ebx +
mov edx [ebp+var_4] +
call @Variants@@VarFromDisp$qqrr8TVarDatax36System@_DelphiInterface$t9IDispatch_  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4B0435  +
lea eax [ebp+var_4] +
call unknown_libname_560  +
retn   +
jmp unknown_libname_539  +
jmp loc_4B0425  +
pop ebx  +
pop ecx  +
pop ebp  +
retn   +
***
push 0  +
push ebx  +
mov ebx eax +
xor eax eax +
push ebp  +
push offset loc_4B047A  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
lea eax [ebp+var_4] +
call @Variants@@VarToIntf$qqrr45System@_DelphiInterface$t17System@IInterface_rx8TVarData  +
mov eax ebx +
mov edx [ebp+var_4] +
call @Variants@@VarFromIntf$qqrr8TVarDatax45System@_DelphiInterface$t17System@IInterface_  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4B0481  +
lea eax [ebp+var_4] +
call unknown_libname_560  +
retn   +
jmp unknown_libname_539  +
jmp loc_4B0471  +
pop ebx  +
pop ecx  +
pop ebp  +
retn   +
***
push edi  +
mov esi ecx +
mov ebx edx +
mov edi eax +
mov ax [ebx] +
mov edx eax +
and dx 0FFFh +
cmp dx 14h +
jb loc_4B04CA  +
mov edx ebx +
mov eax edi +
mov ecx 8 +
call sub_4B056C  +
push esi  +
push 0  +
push 400h  +
push edi  +
push edi  +
call sub_4AE870  +
mov dx [ebx] +
mov ecx esi +
call @Variants@VarResultCheck$qqrlusus  +
jmp loc_4B04F9  +
mov edx esi +
and dx 0FFFh +
cmp dx 14h +
jnb loc_4B04F2  +
push esi  +
push 0  +
push 400h  +
push ebx  +
push edi  +
call sub_4AE870  +
mov dx [ebx] +
mov ecx esi +
call @Variants@VarResultCheck$qqrlusus  +
jmp loc_4B04F9  +
mov edx esi +
call sub_4AF400  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
push ebp  +
push ecx  +
mov esi ecx +
mov ebx edx +
mov edi eax +
mov bp [ebx] +
cmp bp 101h +
jnz loc_4B0522  +
mov edx ebx +
mov eax edi +
mov ecx esi +
call @Variants@_16478  +
jmp loc_4B0565  +
mov edx esp +
mov eax ebp +
call sub_4B7BE8  +
test al al +
jz loc_4B053F  +
push esi  +
mov ecx ebx +
mov edx edi +
mov eax [esp+8+var_4] +
mov ebx [eax] +
call dword ptr [ebx+1Ch]  +
jmp loc_4B0565  +
mov edx esp +
mov eax esi +
call sub_4B7BE8  +
test al al +
jz loc_4B055A  +
mov ecx ebx +
mov edx edi +
mov eax [esp+4+var_4] +
mov ebx [eax] +
call dword ptr [ebx+18h]  +
jmp loc_4B0565  +
mov edx ebx +
mov eax edi +
mov ecx esi +
call sub_4B0488  +
pop edx  +
pop ebp  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov ebx edx +
mov esi eax +
mov ax [ebx] +
movzx edx ax +
cmp ecx edx +
jnz loc_4B0588  +
mov edx ebx +
mov eax esi +
call @Variants@@VarCopy$qqrr8TVarDatarx8TVarData  +
pop esi  +
pop ebx  +
retn   +
cmp ax 400Ch +
jnz loc_4B059F  +
mov eax [ebx+8] +
mov edx eax +
mov eax esi +
call sub_4B056C  +
jmp loc_4B0792  +
mov edx ecx +
cmp edx 14h +
ja loc_4B0764  +
jmp ds:off_4B05B1[edx*4]  +
cmp word ptr [ebx] 1 +
jnz loc_4B0624  +
cmp byte_4E6DC4 0 +
jz loc_4B0624  +
xor edx edx +
mov ax 1 +
call sub_4AF400  +
jmp loc_4B0792  +
mov eax esi +
call @Variants@@VarClear$qqrr8TVarData  +
jmp loc_4B0792  +
mov eax esi +
call @Variants@_16452  +
jmp loc_4B0792  +
mov eax ebx +
call sub_4B0EE8  +
mov edx eax +
mov eax esi +
call @Variants@_16552  +
jmp loc_4B0792  +
mov eax ebx +
call sub_4B0994  +
mov edx eax +
mov eax esi +
call unknown_libname_497  +
jmp loc_4B0792  +
mov eax ebx +
call @Variants@_16514  +
add esp 0FFFFFFFCh +
fstp  [esp+4+var_4] +
wait   +
mov eax esi +
call @Variants@_16554  +
jmp loc_4B0792  +
mov eax ebx +
call sub_4B1EF4  +
add esp 0FFFFFFF8h +
fstp  qword ptr [esp] +
wait   +
mov eax esi +
call @Variants@_16555  +
jmp loc_4B0792  +
mov eax ebx +
call sub_4B2BB4  +
add esp 0FFFFFFF8h +
fistp  qword ptr [esp] +
wait   +
mov eax esi +
call @Variants@_16556  +
jmp loc_4B0792  +
mov eax ebx +
call sub_4B2658  +
add esp 0FFFFFFF8h +
fstp  qword ptr [esp] +
wait   +
mov eax esi +
call @Variants@_16557  +
jmp loc_4B0792  +
mov edx ebx +
mov eax esi +
call sub_4B0358  +
jmp loc_4B0792  +
mov eax ebx +
call sub_4B19E8  +
mov edx eax +
mov eax esi +
call @Variants@@VarFromBool$qqrr8TVarDataxo  +
jmp loc_4B0792  +
mov eax ebx +
call sub_4B0D90  +
mov edx eax +
mov eax esi +
call @Variants@_16551  +
jmp loc_4B0792  +
mov eax ebx +
call sub_4B0E40  +
mov edx eax +
mov eax esi +
call @Variants@_16548  +
jmp loc_4B0792  +
mov eax ebx +
call sub_4B0FE0  +
mov edx eax +
mov eax esi +
call @Variants@_16549  +
jmp loc_4B0792  +
mov eax ebx +
call sub_4B10B8  +
mov edx eax +
mov eax esi +
call @Variants@_16550  +
jmp loc_4B0792  +
mov eax ebx +
call sub_4B13F4  +
push edx  +
push eax  +
mov eax esi +
call @Variants@@VarFromInt64$qqrr8TVarDataxj  +
jmp loc_4B0792  +
mov edx ebx +
mov eax esi +
call sub_4B03F0  +
jmp loc_4B0792  +
mov edx ebx +
mov eax esi +
call sub_4B043C  +
jmp loc_4B0792  +
mov edx ecx +
sub edx 100h +
jz loc_4B0773  +
dec edx  +
jz loc_4B077E  +
jmp loc_4B0789  +
mov edx ebx +
mov eax esi +
call sub_4B03A4  +
jmp loc_4B0792  +
mov dx 101h +
call sub_4AF400  +
jmp loc_4B0792  +
mov edx ebx +
mov eax esi +
call sub_4B0500  +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
push ecx  +
mov esi ecx +
mov ebx edx +
mov edi eax +
cmp word ptr [ebx] 400Ch +
jnz loc_4B07B9  +
mov eax [ebx+8] +
mov edx eax +
mov eax edi +
mov ecx esi +
call sub_4B0798  +
jmp loc_4B07FE  +
cmp esi 100h +
jz loc_4B07C9  +
cmp esi 101h +
jnz loc_4B07D5  +
mov ax [ebx] +
mov edx esi +
call sub_4AF400  +
jmp loc_4B07FE  +
mov edx esp +
mov ax [ebx] +
call sub_4B7BE8  +
test al al +
jz loc_4B07F3  +
push esi  +
mov ecx ebx +
mov edx edi +
mov eax [esp+8+var_4] +
mov ebx [eax] +
call dword ptr [ebx+1Ch]  +
jmp loc_4B07FE  +
mov edx ebx +
mov eax edi +
mov ecx esi +
call sub_4B056C  +
pop edx  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push 0  +
push 0  +
push 0  +
push ebx  +
mov ebx eax +
xor eax eax +
push ebp  +
push offset loc_4B08A3  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov edx ebx +
lea eax [ebp+var_8] +
call sub_4B39CC  +
lea eax [ebp+var_4] +
push eax  +
push 0  +
push 400h  +
mov eax [ebp+var_8] +
push eax  +
call sub_4AE8C4  +
mov edx eax +
sub edx 80020005h +
jz loc_4B0850  +
sub edx 7FFDFFFBh +
jnz loc_4B0879  +
jmp loc_4B0885  +
lea eax [ebp+var_C] +
mov edx [ebp+var_8] +
call unknown_libname_548  +
mov eax [ebp+var_C] +
lea edx [ebp+var_4] +
call sub_4A8CD4  +
test al al +
jnz loc_4B0885  +
mov eax ebx +
call sub_4B19E8  +
and eax 7Fh +
mov [ebp+var_4] eax +
jmp loc_4B0885  +
mov dx [ebx] +
mov cx 3 +
call @Variants@VarResultCheck$qqrlusus  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4B08AA  +
lea eax [ebp+var_C] +
call unknown_libname_540  +
lea eax [ebp+var_8] +
call unknown_libname_552  +
retn   +
jmp unknown_libname_539  +
jmp loc_4B0892  +
mov eax [ebp+var_4] +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
mov ebx eax +
push esp  +
call VariantInit  +
push 3  +
push 0  +
push 400h  +
push ebx  +
lea eax [esp+20h+var_10] +
push eax  +
call sub_4AE870  +
mov dx [ebx] +
mov cx 3 +
call @Variants@VarResultCheck$qqrlusus  +
mov eax [esp+10h+var_8] +
add esp 10h +
pop ebx  +
retn   +
***
add esp 0FFFFFFECh +
push ebx  +
mov ebx eax +
lea eax [ebp+pvarg] +
push eax  +
call VariantInit  +
xor eax eax +
push ebp  +
push offset loc_4B0940  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov edx ebx +
lea eax [ebp+pvarg] +
call @Variants@@VarCopy$qqrr8TVarDatarx8TVarData  +
lea eax [ebp+pvarg] +
call dword_4F1BB0  +
lea eax [ebp+pvarg] +
call sub_4B0994  +
mov [ebp+var_4] eax +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4B0947  +
lea eax [ebp+pvarg] +
call @Variants@@VarClear$qqrr8TVarData  +
retn   +
jmp unknown_libname_539  +
jmp loc_4B0937  +
mov eax [ebp+var_4] +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
push edi  +
add esp 0FFFFFFF8h +
push ebx  +
push esi  +
push edi  +
mov [ebp+var_4] eax +
xor edx edx +
push ebp  +
push offset loc_4B0D63  +
push dword ptr fs:[edx]  +
mov fs:[edx] esp +
mov eax [ebp+var_4] +
mov ax [eax] +
movzx edx ax +
cmp edx 14h +
ja loc_4B0B3F  +
jmp ds:off_4B09C7[edx*4]  +
xor eax eax +
mov [ebp+var_8] eax +
jmp loc_4B0D59  +
cmp byte_4E6DC4 0 +
jz loc_4B0A3B  +
mov dx 3 +
mov ax 1 +
call sub_4AF400  +
xor eax eax +
mov [ebp+var_8] eax +
jmp loc_4B0D59  +
mov eax [ebp+var_4] +
movsx eax word ptr [eax+8] +
mov [ebp+var_8] eax +
jmp loc_4B0D59  +
mov eax [ebp+var_4] +
mov eax [eax+8] +
mov [ebp+var_8] eax +
jmp loc_4B0D59  +
mov eax [ebp+var_4] +
fld  dword ptr [eax+8] +
call @System@@ROUND$qqrv  +
mov [ebp+var_8] eax +
jmp loc_4B0D59  +
mov eax [ebp+var_4] +
fld  qword ptr [eax+8] +
call @System@@ROUND$qqrv  +
mov [ebp+var_8] eax +
jmp loc_4B0D59  +
mov eax [ebp+var_4] +
fild  qword ptr [eax+8] +
fdiv  ds:flt_4B0D8C +
call @System@@ROUND$qqrv  +
mov [ebp+var_8] eax +
jmp loc_4B0D59  +
mov eax [ebp+var_4] +
fld  qword ptr [eax+8] +
call @System@@ROUND$qqrv  +
mov [ebp+var_8] eax +
jmp loc_4B0D59  +
mov eax [ebp+var_4] +
call sub_4B0804  +
mov [ebp+var_8] eax +
jmp loc_4B0D59  +
mov eax [ebp+var_4] +
movsx eax word ptr [eax+8] +
mov [ebp+var_8] eax +
jmp loc_4B0D59  +
mov eax [ebp+var_4] +
movsx eax byte ptr [eax+8] +
mov [ebp+var_8] eax +
jmp loc_4B0D59  +
mov eax [ebp+var_4] +
movzx eax byte ptr [eax+8] +
mov [ebp+var_8] eax +
jmp loc_4B0D59  +
mov eax [ebp+var_4] +
movzx eax word ptr [eax+8] +
mov [ebp+var_8] eax +
jmp loc_4B0D59  +
mov eax [ebp+var_4] +
mov eax [eax+8] +
mov [ebp+var_8] eax +
jmp loc_4B0D59  +
mov eax [ebp+var_4] +
mov eax [eax+8] +
mov [ebp+var_8] eax +
jmp loc_4B0D59  +
mov eax [ebp+var_4] +
mov eax [eax+8] +
call sub_4B0994  +
mov [ebp+var_8] eax +
jmp loc_4B0D59  +
mov eax [ebp+var_4] +
call sub_4B08B4  +
mov [ebp+var_8] eax +
jmp loc_4B0D59  +
mov edx [ebp+var_4] +
mov edx eax +
sub dx 100h +
jz loc_4B0B52  +
dec dx  +
jz loc_4B0B62  +
jmp loc_4B0B72  +
mov eax [ebp+var_4] +
call sub_4B0804  +
mov [ebp+var_8] eax +
jmp loc_4B0D59  +
mov eax [ebp+var_4] +
call @Variants@_16489  +
mov [ebp+var_8] eax +
jmp loc_4B0D59  +
mov edx [ebp+var_4] +
test ah 40h +
jz loc_4B0D3F  +
mov edx [ebp+var_4] +
movzx eax ax +
and eax 0FFFFBFFFh +
cmp eax 14h +
ja loc_4B0D32  +
jmp ds:off_4B0B99[eax*4]  +
mov eax [ebp+var_4] +
mov eax [eax+8] +
movsx eax word ptr [eax] +
mov [ebp+var_8] eax +
jmp loc_4B0D59  +
mov eax [ebp+var_4] +
mov eax [eax+8] +
mov eax [eax] +
mov [ebp+var_8] eax +
jmp loc_4B0D59  +
mov eax [ebp+var_4] +
mov eax [eax+8] +
fld  dword ptr [eax] +
call @System@@ROUND$qqrv  +
push eax  +
sar eax 1Fh +
cmp eax edx +
pop eax  +
jz loc_4B0C29  +
call sub_4BA74C  +
mov [ebp+var_8] eax +
jmp loc_4B0D59  +
mov eax [ebp+var_4] +
mov eax [eax+8] +
fld  qword ptr [eax] +
call @System@@ROUND$qqrv  +
push eax  +
sar eax 1Fh +
cmp eax edx +
pop eax  +
jz loc_4B0C4C  +
call sub_4BA74C  +
mov [ebp+var_8] eax +
jmp loc_4B0D59  +
mov eax [ebp+var_4] +
mov eax [eax+8] +
fild  qword ptr [eax] +
fdiv  ds:flt_4B0D8C +
call @System@@ROUND$qqrv  +
push eax  +
sar eax 1Fh +
cmp eax edx +
pop eax  +
jz loc_4B0C75  +
call sub_4BA74C  +
mov [ebp+var_8] eax +
jmp loc_4B0D59  +
mov eax [ebp+var_4] +
mov eax [eax+8] +
fld  qword ptr [eax] +
call @System@@ROUND$qqrv  +
push eax  +
sar eax 1Fh +
cmp eax edx +
pop eax  +
jz loc_4B0C98  +
call sub_4BA74C  +
mov [ebp+var_8] eax +
jmp loc_4B0D59  +
mov eax [ebp+var_4] +
call sub_4B0804  +
mov [ebp+var_8] eax +
jmp loc_4B0D59  +
mov eax [ebp+var_4] +
mov eax [eax+8] +
movsx eax word ptr [eax] +
mov [ebp+var_8] eax +
jmp loc_4B0D59  +
mov eax [ebp+var_4] +
mov eax [eax+8] +
movsx eax byte ptr [eax] +
mov [ebp+var_8] eax +
jmp loc_4B0D59  +
mov eax [ebp+var_4] +
mov eax [eax+8] +
movzx eax byte ptr [eax] +
mov [ebp+var_8] eax +
jmp loc_4B0D59  +
mov eax [ebp+var_4] +
mov eax [eax+8] +
movzx eax word ptr [eax] +
mov [ebp+var_8] eax +
jmp loc_4B0D59  +
mov eax [ebp+var_4] +
mov eax [eax+8] +
mov eax [eax] +
test eax eax +
jns loc_4B0CFF  +
call sub_4BA74C  +
mov [ebp+var_8] eax +
jmp loc_4B0D59  +
mov eax [ebp+var_4] +
mov eax [eax+8] +
mov edx [eax+4] +
mov eax [eax] +
push eax  +
sar eax 1Fh +
cmp eax edx +
pop eax  +
jz loc_4B0D1D  +
call sub_4BA74C  +
mov [ebp+var_8] eax +
jmp loc_4B0D59  +
mov eax [ebp+var_4] +
mov eax [eax+8] +
call sub_4B0994  +
mov [ebp+var_8] eax +
jmp loc_4B0D59  +
mov eax [ebp+var_4] +
call sub_4B08B4  +
mov [ebp+var_8] eax +
jmp loc_4B0D59  +
lea edx [ebp+var_8] +
mov eax [ebp+var_4] +
call sub_4B0950  +
test al al +
jnz loc_4B0D59  +
mov eax [ebp+var_4] +
call sub_4B08B4  +
mov [ebp+var_8] eax +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
jmp loc_4B0D81  +
jmp @System@@HandleAnyException$qqrv  +
mov eax [ebp-4] +
mov ax [eax] +
mov dx 3 +
call @Variants@HandleConversionException$qqrxusxus  +
xor eax eax +
mov [ebp-8] eax +
call @@DoneExcept$qqrv  +
mov eax [ebp+var_8] +
pop edi  +
pop esi  +
pop ebx  +
pop ecx  +
pop ecx  +
pop ebp  +
retn   +
***
push ecx  +
push ebx  +
push esi  +
push edi  +
mov [ebp+var_4] eax +
mov eax [ebp+var_4] +
mov ax [eax] +
sub ax 1 +
jb loc_4B0DB6  +
jz loc_4B0DBA  +
sub ax 0Ah +
jz loc_4B0DD4  +
sub ax 5 +
jz loc_4B0DDC  +
jmp loc_4B0DE4  +
xor ebx ebx +
jmp loc_4B0E37  +
cmp byte_4E6DC4 0 +
jz loc_4B0DD0  +
mov dx 10h +
mov ax 1 +
call sub_4AF400  +
xor ebx ebx +
jmp loc_4B0E37  +
mov ebx [ebp+var_4] +
mov bl [ebx+8] +
jmp loc_4B0E37  +
mov ebx [ebp+var_4] +
mov bl [ebx+8] +
jmp loc_4B0E37  +
xor eax eax +
push ebp  +
push offset loc_4B0E1C  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov eax [ebp+var_4] +
call sub_4B0994  +
mov ebx eax +
add ebx 80h +
cmp ebx 0FFh +
jbe loc_4B0E0F  +
call sub_4BA74C  +
add ebx 0FFFFFF80h +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
jmp loc_4B0E37  +
jmp @System@@HandleAnyException$qqrv  +
mov eax [ebp-4] +
mov ax [eax] +
mov dx 10h +
call @Variants@HandleConversionException$qqrxusxus  +
xor ebx ebx +
call @@DoneExcept$qqrv  +
mov eax ebx +
pop edi  +
pop esi  +
pop ebx  +
pop ecx  +
pop ebp  +
retn   +
***
push ecx  +
push ebx  +
push esi  +
push edi  +
mov [ebp+var_4] eax +
mov eax [ebp+var_4] +
mov ax [eax] +
sub ax 1 +
jb loc_4B0E66  +
jz loc_4B0E6A  +
sub ax 0Ah +
jz loc_4B0E84  +
sub ax 6 +
jz loc_4B0E8C  +
jmp loc_4B0E94  +
xor ebx ebx +
jmp loc_4B0EDE  +
cmp byte_4E6DC4 0 +
jz loc_4B0E80  +
mov dx 11h +
mov ax 1 +
call sub_4AF400  +
xor ebx ebx +
jmp loc_4B0EDE  +
mov ebx [ebp+var_4] +
mov bl [ebx+8] +
jmp loc_4B0EDE  +
mov ebx [ebp+var_4] +
mov bl [ebx+8] +
jmp loc_4B0EDE  +
xor eax eax +
push ebp  +
push offset loc_4B0EC3  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov eax [ebp+var_4] +
call sub_4B0994  +
mov ebx eax +
cmp ebx 0FFh +
jbe loc_4B0EB9  +
call sub_4BA74C  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
jmp loc_4B0EDE  +
jmp @System@@HandleAnyException$qqrv  +
mov eax [ebp-4] +
mov ax [eax] +
mov dx 11h +
call @Variants@HandleConversionException$qqrxusxus  +
xor ebx ebx +
call @@DoneExcept$qqrv  +
mov eax ebx +
pop edi  +
pop esi  +
pop ebx  +
pop ecx  +
pop ebp  +
retn   +
***
push ecx  +
push ebx  +
push esi  +
push edi  +
mov [ebp+var_4] eax +
mov eax [ebp+var_4] +
movzx eax word ptr [eax] +
cmp eax 11h +
ja loc_4B0F81  +
mov al ds:byte_4B0F0E[eax] +
jmp ds:off_4B0F20[eax*4]  +
xor ebx ebx +
jmp loc_4B0FD7  +
cmp byte_4E6DC4 0 +
jz loc_4B0F59  +
mov dx 2 +
mov ax 1 +
call sub_4AF400  +
xor ebx ebx +
jmp loc_4B0FD7  +
mov ebx [ebp+var_4] +
mov bx [ebx+8] +
jmp loc_4B0FD7  +
mov ebx [ebp+var_4] +
mov bx [ebx+8] +
jmp loc_4B0FD7  +
mov ebx [ebp+var_4] +
movsx ebx byte ptr [ebx+8] +
jmp loc_4B0FD7  +
mov ebx [ebp+var_4] +
movzx ebx byte ptr [ebx+8] +
jmp loc_4B0FD7  +
xor eax eax +
push ebp  +
push offset loc_4B0FBC  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov eax [ebp+var_4] +
call sub_4B0994  +
mov ebx eax +
add ebx 8000h +
cmp ebx 0FFFFh +
jbe loc_4B0FAC  +
call sub_4BA74C  +
add ebx 0FFFF8000h +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
jmp loc_4B0FD7  +
jmp @System@@HandleAnyException$qqrv  +
mov eax [ebp-4] +
mov ax [eax] +
mov dx 2 +
call @Variants@HandleConversionException$qqrxusxus  +
xor ebx ebx +
call @@DoneExcept$qqrv  +
mov eax ebx +
pop edi  +
pop esi  +
pop ebx  +
pop ecx  +
pop ebp  +
retn   +
***
push ecx  +
push ecx  +
mov ebx eax +
lea eax [esp+18h+pvarg] +
push eax  +
call VariantInit  +
push 3  +
push 0  +
push 400h  +
push ebx  +
lea eax [esp+28h+pvarg] +
push eax  +
call sub_4AE870  +
test eax eax +
jnz loc_4B11D6  +
mov eax dword ptr [esp+18h+pvarg.n1+8] +
cdq   +
mov [esp+18h+var_18] eax +
mov [esp+18h+var_14] edx +
jmp loc_4B1237  +
push 5  +
push 0  +
push 400h  +
push ebx  +
lea eax [esp+28h+pvarg] +
push eax  +
call sub_4AE870  +
test eax eax +
jnz loc_4B1200  +
fld  qword ptr [esp+18h+pvarg.n1+8] +
call @System@@ROUND$qqrv  +
mov [esp+18h+var_18] eax +
mov [esp+18h+var_14] edx +
jmp loc_4B1237  +
cmp eax 80020005h +
jnz loc_4B121C  +
mov eax ebx +
call sub_4B19E8  +
and eax 7Fh +
xor edx edx +
mov [esp+18h+var_18] eax +
mov [esp+18h+var_14] edx +
jmp loc_4B1237  +
mov dx [ebx] +
mov cx 14h +
call @Variants@VarResultCheck$qqrlusus  +
mov [esp+18h+var_18] 0 +
mov [esp+18h+var_14] 0 +
mov eax [esp+18h+var_18] +
mov edx [esp+18h+var_14] +
add esp 18h +
pop ebx  +
retn   +
***
add esp 0FFFFFFE4h +
add esp 0FFFFFFE8h +
push ebx  +
mov ebx eax +
lea eax [ebp+pvarg] +
push eax  +
call VariantInit  +
xor eax eax +
push ebp  +
push offset loc_4B1393  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov edx ebx +
lea eax [ebp+pvarg] +
call @Variants@@VarCopy$qqrr8TVarDatarx8TVarData  +
lea eax [ebp+pvarg] +
call dword_4F1BB0  +
lea eax [ebp+pvarg] +
call sub_4B13F4  +
mov [ebp+var_8] eax +
mov [ebp+var_4] edx +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4B139A  +
lea eax [ebp+pvarg] +
call @Variants@@VarClear$qqrr8TVarData  +
retn   +
jmp unknown_libname_539  +
jmp loc_4B138A  +
mov eax [ebp+var_8] +
mov edx [ebp+var_4] +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
push edi  +
add esp 0FFFFFFECh +
mov edi edx +
mov esi eax +
mov edx esp +
mov ax [esi] +
call sub_4B7BE8  +
mov ebx eax +
test bl bl +
jz loc_4B13EA  +
lea eax [esp+14h+pvarg] +
push eax  +
call VariantInit  +
push 14h  +
mov ecx esi +
lea edx [esp+18h+pvarg] +
mov eax [esp+18h+var_14] +
mov esi [eax] +
call dword ptr [esi+1Ch]  +
mov eax dword ptr [esp+14h+pvarg.n1+8] +
mov [edi] eax +
mov eax dword ptr [esp+14h+pvarg.n1+0Ch] +
mov [edi+4] eax +
mov eax ebx +
add esp 14h +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
add esp 0FFFFFFF0h +
push ebx  +
push esi  +
push edi  +
mov [ebp+var_4] eax +
xor edx edx +
push ebp  +
push offset loc_4B1800  +
push dword ptr fs:[edx]  +
mov fs:[edx] esp +
mov eax [ebp+var_4] +
mov ax [eax] +
movzx edx ax +
cmp edx 14h +
ja loc_4B15EB  +
jmp ds:off_4B1427[edx*4]  +
mov [ebp+var_10] 0 +
mov [ebp+var_C] 0 +
jmp loc_4B17F6  +
cmp byte_4E6DC4 0 +
jz loc_4B14A4  +
mov dx 14h +
mov ax 1 +
call sub_4AF400  +
mov [ebp+var_10] 0 +
mov [ebp+var_C] 0 +
jmp loc_4B17F6  +
mov eax [ebp+var_4] +
movsx eax word ptr [eax+8] +
cdq   +
mov [ebp+var_10] eax +
mov [ebp+var_C] edx +
jmp loc_4B17F6  +
mov eax [ebp+var_4] +
mov eax [eax+8] +
cdq   +
mov [ebp+var_10] eax +
mov [ebp+var_C] edx +
jmp loc_4B17F6  +
mov eax [ebp+var_4] +
fld  dword ptr [eax+8] +
call @System@@ROUND$qqrv  +
mov [ebp+var_10] eax +
mov [ebp+var_C] edx +
jmp loc_4B17F6  +
mov eax [ebp+var_4] +
fld  qword ptr [eax+8] +
call @System@@ROUND$qqrv  +
mov [ebp+var_10] eax +
mov [ebp+var_C] edx +
jmp loc_4B17F6  +
mov eax [ebp+var_4] +
fild  qword ptr [eax+8] +
fdiv  ds:flt_4B1834 +
call @System@@ROUND$qqrv  +
mov [ebp+var_10] eax +
mov [ebp+var_C] edx +
jmp loc_4B17F6  +
mov eax [ebp+var_4] +
fld  qword ptr [eax+8] +
call @System@@ROUND$qqrv  +
mov [ebp+var_10] eax +
mov [ebp+var_C] edx +
jmp loc_4B17F6  +
mov eax [ebp+var_4] +
call sub_4B1244  +
mov [ebp+var_10] eax +
mov [ebp+var_C] edx +
jmp loc_4B17F6  +
mov eax [ebp+var_4] +
movsx eax word ptr [eax+8] +
cdq   +
mov [ebp+var_10] eax +
mov [ebp+var_C] edx +
jmp loc_4B17F6  +
mov eax [ebp+var_4] +
movsx eax byte ptr [eax+8] +
cdq   +
mov [ebp+var_10] eax +
mov [ebp+var_C] edx +
jmp loc_4B17F6  +
mov eax [ebp+var_4] +
movzx eax byte ptr [eax+8] +
xor edx edx +
mov [ebp+var_10] eax +
mov [ebp+var_C] edx +
jmp loc_4B17F6  +
mov eax [ebp+var_4] +
movzx eax word ptr [eax+8] +
xor edx edx +
mov [ebp+var_10] eax +
mov [ebp+var_C] edx +
jmp loc_4B17F6  +
mov eax [ebp+var_4] +
mov eax [eax+8] +
xor edx edx +
mov [ebp+var_10] eax +
mov [ebp+var_C] edx +
jmp loc_4B17F6  +
mov eax [ebp+var_4] +
mov edx [eax+8] +
mov [ebp+var_10] edx +
mov edx [eax+0Ch] +
mov [ebp+var_C] edx +
jmp loc_4B17F6  +
mov eax [ebp+var_4] +
mov eax [eax+8] +
call sub_4B13F4  +
mov [ebp+var_10] eax +
mov [ebp+var_C] edx +
jmp loc_4B17F6  +
mov eax [ebp+var_4] +
call sub_4B11A0  +
mov [ebp+var_10] eax +
mov [ebp+var_C] edx +
jmp loc_4B17F6  +
mov edx [ebp+var_4] +
mov edx eax +
sub dx 100h +
jz loc_4B15FE  +
dec dx  +
jz loc_4B1611  +
jmp loc_4B1624  +
mov eax [ebp+var_4] +
call sub_4B1244  +
mov [ebp+var_10] eax +
mov [ebp+var_C] edx +
jmp loc_4B17F6  +
mov eax [ebp+var_4] +
call @Variants@_16499  +
mov [ebp+var_10] eax +
mov [ebp+var_C] edx +
jmp loc_4B17F6  +
mov edx [ebp+var_4] +
test ah 40h +
jz loc_4B17D9  +
mov edx [ebp+var_4] +
movzx eax ax +
and eax 0FFFFBFFFh +
cmp eax 14h +
ja loc_4B17C9  +
jmp ds:off_4B164B[eax*4]  +
mov eax [ebp+var_4] +
mov eax [eax+8] +
movsx eax word ptr [eax] +
cdq   +
mov [ebp+var_10] eax +
mov [ebp+var_C] edx +
jmp loc_4B17F6  +
mov eax [ebp+var_4] +
mov eax [eax+8] +
mov eax [eax] +
cdq   +
mov [ebp+var_10] eax +
mov [ebp+var_C] edx +
jmp loc_4B17F6  +
mov eax [ebp+var_4] +
mov eax [eax+8] +
fld  dword ptr [eax] +
call @System@@ROUND$qqrv  +
mov [ebp+var_10] eax +
mov [ebp+var_C] edx +
jmp loc_4B17F6  +
mov eax [ebp+var_4] +
mov eax [eax+8] +
fld  qword ptr [eax] +
call @System@@ROUND$qqrv  +
mov [ebp+var_10] eax +
mov [ebp+var_C] edx +
jmp loc_4B17F6  +
mov eax [ebp+var_4] +
mov eax [eax+8] +
fild  qword ptr [eax] +
fdiv  ds:flt_4B1834 +
call @System@@ROUND$qqrv  +
mov [ebp+var_10] eax +
mov [ebp+var_C] edx +
jmp loc_4B17F6  +
mov eax [ebp+var_4] +
mov eax [eax+8] +
fld  qword ptr [eax] +
call @System@@ROUND$qqrv  +
mov [ebp+var_10] eax +
mov [ebp+var_C] edx +
jmp loc_4B17F6  +
mov eax [ebp+var_4] +
call sub_4B1244  +
mov [ebp+var_10] eax +
mov [ebp+var_C] edx +
jmp loc_4B17F6  +
mov eax [ebp+var_4] +
mov eax [eax+8] +
movsx eax word ptr [eax] +
cdq   +
mov [ebp+var_10] eax +
mov [ebp+var_C] edx +
jmp loc_4B17F6  +
mov eax [ebp+var_4] +
mov eax [eax+8] +
movsx eax byte ptr [eax] +
cdq   +
mov [ebp+var_10] eax +
mov [ebp+var_C] edx +
jmp loc_4B17F6  +
mov eax [ebp+var_4] +
mov eax [eax+8] +
movzx eax byte ptr [eax] +
xor edx edx +
mov [ebp+var_10] eax +
mov [ebp+var_C] edx +
jmp loc_4B17F6  +
mov eax [ebp+var_4] +
mov eax [eax+8] +
movzx eax word ptr [eax] +
xor edx edx +
mov [ebp+var_10] eax +
mov [ebp+var_C] edx +
jmp loc_4B17F6  +
mov eax [ebp+var_4] +
mov eax [eax+8] +
mov eax [eax] +
xor edx edx +
mov [ebp+var_10] eax +
mov [ebp+var_C] edx +
jmp loc_4B17F6  +
mov eax [ebp+var_4] +
mov eax [eax+8] +
mov edx [eax] +
mov [ebp+var_10] edx +
mov edx [eax+4] +
mov [ebp+var_C] edx +
jmp loc_4B17F6  +
mov eax [ebp+var_4] +
mov eax [eax+8] +
call sub_4B13F4  +
mov [ebp+var_10] eax +
mov [ebp+var_C] edx +
jmp loc_4B17F6  +
mov eax [ebp+var_4] +
call sub_4B11A0  +
mov [ebp+var_10] eax +
mov [ebp+var_C] edx +
jmp loc_4B17F6  +
lea edx [ebp+var_10] +
mov eax [ebp+var_4] +
call sub_4B13A8  +
test al al +
jnz loc_4B17F6  +
mov eax [ebp+var_4] +
call sub_4B11A0  +
mov [ebp+var_10] eax +
mov [ebp+var_C] edx +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
jmp loc_4B1827  +
jmp @System@@HandleAnyException$qqrv  +
mov eax [ebp-4] +
mov ax [eax] +
mov dx 14h +
call @Variants@HandleConversionException$qqrxusxus  +
mov dword ptr [ebp-10h] 0 +
mov dword ptr [ebp-0Ch] 0 +
call @@DoneExcept$qqrv  +
mov eax [ebp+var_10] +
mov edx [ebp+var_C] +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
add esp 0FFFFFFF0h +
push ebx  +
xor edx edx +
mov [ebp+var_10] edx +
mov [ebp+var_8] edx +
mov ebx eax +
xor eax eax +
push ebp  +
push offset loc_4B18EB  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov edx ebx +
lea eax [ebp+var_8] +
call sub_4B39CC  +
lea eax [ebp-0Ah] +
push eax  +
push 0  +
push 400h  +
mov eax [ebp+var_8] +
push eax  +
call sub_4AE944  +
mov edx eax +
sub edx 80020005h +
jz loc_4B1894  +
sub edx 7FFDFFFBh +
jnz loc_4B18C1  +
cmp [ebp+var_A] 1 +
sbb eax eax +
inc eax  +
mov byte ptr [ebp+var_1] al +
jmp loc_4B18CD  +
lea eax [ebp+var_10] +
mov edx [ebp+var_8] +
call unknown_libname_548  +
mov eax [ebp+var_10] +
lea edx [ebp+var_1] +
call sub_4A8DE0  +
test al al +
jnz loc_4B18CD  +
mov dx [ebx] +
mov cx 0Bh +
mov eax 80020005h +
call @Variants@VarResultCheck$qqrlusus  +
jmp loc_4B18CD  +
mov dx [ebx] +
mov cx 0Bh +
call @Variants@VarResultCheck$qqrlusus  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4B18F2  +
lea eax [ebp+var_10] +
call unknown_libname_540  +
lea eax [ebp+var_8] +
call unknown_libname_552  +
retn   +
jmp unknown_libname_539  +
jmp loc_4B18DA  +
mov al byte ptr [ebp+var_1] +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
mov ebx eax +
push esp  +
call VariantInit  +
push 0Bh  +
push 0  +
push 400h  +
push ebx  +
lea eax [esp+20h+var_10] +
push eax  +
call sub_4AE870  +
mov dx [ebx] +
mov cx 0Bh +
call @Variants@VarResultCheck$qqrlusus  +
cmp [esp+10h+var_8] 1 +
sbb eax eax +
inc eax  +
add esp 10h +
pop ebx  +
retn   +
***
add esp 0FFFFFFECh +
push ebx  +
mov ebx eax +
lea eax [ebp+pvarg] +
push eax  +
call VariantInit  +
xor eax eax +
push ebp  +
push offset loc_4B198C  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov edx ebx +
lea eax [ebp+pvarg] +
call @Variants@@VarCopy$qqrr8TVarDatarx8TVarData  +
lea eax [ebp+pvarg] +
call dword_4F1BB0  +
lea eax [ebp+pvarg] +
call sub_4B19E8  +
mov [ebp+var_1] al +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4B1993  +
lea eax [ebp+pvarg] +
call @Variants@@VarClear$qqrr8TVarData  +
retn   +
jmp unknown_libname_539  +
jmp loc_4B1983  +
mov al [ebp+var_1] +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
push edi  +
add esp 0FFFFFFECh +
mov edi edx +
mov esi eax +
mov edx esp +
mov ax [esi] +
call sub_4B7BE8  +
mov ebx eax +
test bl bl +
jz loc_4B19DC  +
lea eax [esp+14h+pvarg] +
push eax  +
call VariantInit  +
push 0Bh  +
mov ecx esi +
lea edx [esp+18h+pvarg] +
mov eax [esp+18h+var_14] +
mov esi [eax] +
call dword ptr [esi+1Ch]  +
cmp word ptr [esp+14h+pvarg.n1+8] 1 +
sbb eax eax +
inc eax  +
mov [edi] al +
mov eax ebx +
add esp 14h +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov ebx eax +
mov ax [ebx] +
movzx edx ax +
cmp edx 14h +
ja loc_4B1B75  +
jmp ds:off_4B1A02[edx*4]  +
mov [esp+1+var_1] 0 +
jmp loc_4B1D26  +
cmp byte_4E6DC4 0 +
jz loc_4B1A75  +
mov dx 0Bh +
mov ax 1 +
call sub_4AF400  +
mov [esp+1+var_1] 0 +
jmp loc_4B1D26  +
cmp word ptr [ebx+8] 0 +
setnz [esp+1+var_1]  +
jmp loc_4B1D26  +
cmp dword ptr [ebx+8] 0 +
setnz [esp+1+var_1]  +
jmp loc_4B1D26  +
fld  dword ptr [ebx+8] +
fcomp  ds:flt_4B1D2C +
fnstsw  ax +
sahf   +
setnz [esp+1+var_1]  +
jmp loc_4B1D26  +
fld  qword ptr [ebx+8] +
fcomp  ds:flt_4B1D2C +
fnstsw  ax +
sahf   +
setnz [esp+1+var_1]  +
jmp loc_4B1D26  +
fild  qword ptr [ebx+8] +
fcomp  ds:flt_4B1D2C +
fnstsw  ax +
sahf   +
setnz [esp+1+var_1]  +
jmp loc_4B1D26  +
fld  qword ptr [ebx+8] +
fcomp  ds:flt_4B1D2C +
fnstsw  ax +
sahf   +
setnz [esp+1+var_1]  +
jmp loc_4B1D26  +
mov eax ebx +
call sub_4B1838  +
mov [esp+1+var_1] al +
jmp loc_4B1D26  +
cmp word ptr [ebx+8] 1 +
sbb eax eax +
inc eax  +
mov [esp+1+var_1] al +
jmp loc_4B1D26  +
cmp byte ptr [ebx+8] 0 +
setnz [esp+1+var_1]  +
jmp loc_4B1D26  +
cmp byte ptr [ebx+8] 0 +
setnz [esp+1+var_1]  +
jmp loc_4B1D26  +
cmp word ptr [ebx+8] 0 +
setnz [esp+1+var_1]  +
jmp loc_4B1D26  +
cmp dword ptr [ebx+8] 0 +
setnz [esp+1+var_1]  +
jmp loc_4B1D26  +
cmp dword ptr [ebx+0Ch] 0 +
jnz loc_4B1B4B  +
cmp dword ptr [ebx+8] 0 +
setnz al  +
mov [esp+1+var_1] al +
jmp loc_4B1D26  +
mov eax [ebx+8] +
call sub_4B19E8  +
mov [esp+1+var_1] al +
jmp loc_4B1D26  +
mov eax ebx +
call sub_4B18FC  +
mov [esp+1+var_1] al +
jmp loc_4B1D26  +
mov edx eax +
sub dx 100h +
jz loc_4B1B85  +
dec dx  +
jz loc_4B1B94  +
jmp loc_4B1BA3  +
mov eax ebx +
call sub_4B1838  +
mov [esp+1+var_1] al +
jmp loc_4B1D26  +
mov eax ebx +
call @Variants@_16504  +
mov [esp+1+var_1] al +
jmp loc_4B1D26  +
test ah 40h +
jz loc_4B1D0F  +
movzx eax ax +
and eax 0FFFFBFFFh +
cmp eax 14h +
ja loc_4B1D03  +
jmp ds:off_4B1BC4[eax*4]  +
mov eax [ebx+8] +
cmp word ptr [eax] 0 +
setnz [esp+1+var_1]  +
jmp loc_4B1D26  +
mov eax [ebx+8] +
cmp dword ptr [eax] 0 +
setnz [esp+1+var_1]  +
jmp loc_4B1D26  +
mov eax [ebx+8] +
fld  dword ptr [eax] +
fcomp  ds:flt_4B1D2C +
fnstsw  ax +
sahf   +
setnz [esp+1+var_1]  +
jmp loc_4B1D26  +
mov eax [ebx+8] +
fld  qword ptr [eax] +
fcomp  ds:flt_4B1D2C +
fnstsw  ax +
sahf   +
setnz [esp+1+var_1]  +
jmp loc_4B1D26  +
mov eax [ebx+8] +
fild  qword ptr [eax] +
fcomp  ds:flt_4B1D2C +
fnstsw  ax +
sahf   +
setnz [esp+1+var_1]  +
jmp loc_4B1D26  +
mov eax [ebx+8] +
fld  qword ptr [eax] +
fcomp  ds:flt_4B1D2C +
fnstsw  ax +
sahf   +
setnz [esp+1+var_1]  +
jmp loc_4B1D26  +
mov eax ebx +
call sub_4B1838  +
mov [esp+1+var_1] al +
jmp loc_4B1D26  +
mov eax [ebx+8] +
cmp word ptr [eax] 1 +
sbb eax eax +
inc eax  +
mov [esp+1+var_1] al +
jmp loc_4B1D26  +
mov eax [ebx+8] +
cmp byte ptr [eax] 0 +
setnz [esp+1+var_1]  +
jmp loc_4B1D26  +
mov eax [ebx+8] +
cmp byte ptr [eax] 0 +
setnz [esp+1+var_1]  +
jmp loc_4B1D26  +
mov eax [ebx+8] +
cmp word ptr [eax] 0 +
setnz [esp+1+var_1]  +
jmp loc_4B1D26  +
mov eax [ebx+8] +
cmp dword ptr [eax] 0 +
setnz [esp+1+var_1]  +
jmp loc_4B1D26  +
mov eax [ebx+8] +
cmp dword ptr [eax+4] 0 +
jnz loc_4B1CEE  +
cmp dword ptr [eax] 0 +
setnz al  +
mov [esp+1+var_1] al +
jmp loc_4B1D26  +
mov eax [ebx+8] +
call sub_4B19E8  +
mov [esp+1+var_1] al +
jmp loc_4B1D26  +
mov eax ebx +
call sub_4B18FC  +
mov [esp+1+var_1] al +
jmp loc_4B1D26  +
mov edx esp +
mov eax ebx +
call sub_4B199C  +
test al al +
jnz loc_4B1D26  +
mov eax ebx +
call sub_4B18FC  +
mov [esp+1+var_1] al +
mov al [esp+1+var_1] +
pop edx  +
pop ebx  +
retn   +
***
call sub_4B19E8  +
add esp 0FFFFFFE4h +
mov ebx eax +
lea eax [esp+18h+pvarg] +
push eax  +
call VariantInit  +
push 5  +
push 0  +
push 400h  +
push ebx  +
lea eax [esp+28h+pvarg] +
push eax  +
call sub_4AE870  +
mov dx [ebx] +
mov cx 5 +
call @Variants@VarResultCheck$qqrlusus  +
mov eax dword ptr [esp+18h+pvarg.n1+8] +
mov dword ptr [esp+18h+var_18] eax +
mov eax dword ptr [esp+18h+pvarg.n1+0Ch] +
mov dword ptr [esp+18h+var_18+4] eax +
fld  [esp+18h+var_18] +
add esp 18h +
pop ebx  +
retn   +
***
add esp 0FFFFFFE8h +
push edi  +
add esp 0FFFFFFECh +
mov edi edx +
mov esi eax +
mov edx esp +
mov ax [esi] +
call sub_4B7BE8  +
mov ebx eax +
test bl bl +
jz loc_4B1EEA  +
lea eax [esp+14h+pvarg] +
push eax  +
call VariantInit  +
push 5  +
mov ecx esi +
lea edx [esp+18h+pvarg] +
mov eax [esp+18h+var_14] +
mov esi [eax] +
call dword ptr [esi+1Ch]  +
mov eax dword ptr [esp+14h+pvarg.n1+8] +
mov [edi] eax +
mov eax dword ptr [esp+14h+pvarg.n1+0Ch] +
mov [edi+4] eax +
mov eax ebx +
add esp 14h +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov ebx eax +
mov ax [ebx] +
movzx edx ax +
cmp edx 14h +
ja loc_4B209C  +
jmp ds:off_4B1F10[edx*4]  +
xor eax eax +
mov dword ptr [esp+14h+var_14] eax +
mov dword ptr [esp+14h+var_14+4] eax +
jmp loc_4B2261  +
cmp byte_4E6DC4 0 +
jz loc_4B1F88  +
mov dx 5 +
mov ax 1 +
call sub_4AF400  +
xor eax eax +
mov dword ptr [esp+14h+var_14] eax +
mov dword ptr [esp+14h+var_14+4] eax +
jmp loc_4B2261  +
fild  word ptr [ebx+8] +
fstp  [esp+14h+var_14] +
wait   +
jmp loc_4B2261  +
fild  dword ptr [ebx+8] +
fstp  [esp+14h+var_14] +
wait   +
jmp loc_4B2261  +
fld  dword ptr [ebx+8] +
fstp  [esp+14h+var_14] +
wait   +
jmp loc_4B2261  +
mov eax [ebx+8] +
mov dword ptr [esp+14h+var_14] eax +
mov eax [ebx+0Ch] +
mov dword ptr [esp+14h+var_14+4] eax +
jmp loc_4B2261  +
fild  qword ptr [ebx+8] +
fdiv  ds:flt_4B226C +
fstp  [esp+14h+var_14] +
wait   +
jmp loc_4B2261  +
mov eax [ebx+8] +
mov dword ptr [esp+14h+var_14] eax +
mov eax [ebx+0Ch] +
mov dword ptr [esp+14h+var_14+4] eax +
jmp loc_4B2261  +
mov eax ebx +
call sub_4B1D3C  +
fstp  [esp+14h+var_14] +
wait   +
jmp loc_4B2261  +
movsx eax word ptr [ebx+8] +
mov [esp+14h+var_C] eax +
fild  [esp+14h+var_C] +
fstp  [esp+14h+var_14] +
wait   +
jmp loc_4B2261  +
movsx eax byte ptr [ebx+8] +
mov [esp+14h+var_C] eax +
fild  [esp+14h+var_C] +
fstp  [esp+14h+var_14] +
wait   +
jmp loc_4B2261  +
xor eax eax +
mov al [ebx+8] +
mov [esp+14h+var_C] eax +
fild  [esp+14h+var_C] +
fstp  [esp+14h+var_14] +
wait   +
jmp loc_4B2261  +
movzx eax word ptr [ebx+8] +
mov [esp+14h+var_C] eax +
fild  [esp+14h+var_C] +
fstp  [esp+14h+var_14] +
wait   +
jmp loc_4B2261  +
mov eax [ebx+8] +
mov dword ptr [esp+14h+var_8] eax +
xor eax eax +
mov dword ptr [esp+14h+var_8+4] eax +
fild  [esp+14h+var_8] +
fstp  [esp+14h+var_14] +
wait   +
jmp loc_4B2261  +
fild  qword ptr [ebx+8] +
fstp  [esp+14h+var_14] +
wait   +
jmp loc_4B2261  +
mov eax [ebx+8] +
call sub_4B1EF4  +
fstp  [esp+14h+var_14] +
wait   +
jmp loc_4B2261  +
mov eax ebx +
call sub_4B1DFC  +
fstp  [esp+14h+var_14] +
wait   +
jmp loc_4B2261  +
mov edx eax +
sub dx 100h +
jz loc_4B20AC  +
dec dx  +
jz loc_4B20BC  +
jmp loc_4B20CC  +
mov eax ebx +
call sub_4B1D3C  +
fstp  [esp+14h+var_14] +
wait   +
jmp loc_4B2261  +
mov eax ebx +
call unknown_libname_493  +
fstp  [esp+14h+var_14] +
wait   +
jmp loc_4B2261  +
test ah 40h +
jz loc_4B2249  +
movzx eax ax +
and eax 0FFFFBFFFh +
cmp eax 14h +
ja loc_4B223C  +
jmp ds:off_4B20ED[eax*4]  +
mov eax [ebx+8] +
fild  word ptr [eax] +
fstp  [esp+14h+var_14] +
wait   +
jmp loc_4B2261  +
mov eax [ebx+8] +
fild  dword ptr [eax] +
fstp  [esp+14h+var_14] +
wait   +
jmp loc_4B2261  +
mov eax [ebx+8] +
fld  dword ptr [eax] +
fstp  [esp+14h+var_14] +
wait   +
jmp loc_4B2261  +
mov eax [ebx+8] +
mov edx [eax] +
mov dword ptr [esp+14h+var_14] edx +
mov edx [eax+4] +
mov dword ptr [esp+14h+var_14+4] edx +
jmp loc_4B2261  +
mov eax [ebx+8] +
fild  qword ptr [eax] +
fdiv  ds:flt_4B226C +
fstp  [esp+14h+var_14] +
wait   +
jmp loc_4B2261  +
mov eax [ebx+8] +
mov edx [eax] +
mov dword ptr [esp+14h+var_14] edx +
mov edx [eax+4] +
mov dword ptr [esp+14h+var_14+4] edx +
jmp loc_4B2261  +
mov eax ebx +
call sub_4B1D3C  +
fstp  [esp+14h+var_14] +
wait   +
jmp loc_4B2261  +
mov eax [ebx+8] +
movsx eax word ptr [eax] +
mov [esp+14h+var_C] eax +
fild  [esp+14h+var_C] +
fstp  [esp+14h+var_14] +
wait   +
jmp loc_4B2261  +
mov eax [ebx+8] +
movsx eax byte ptr [eax] +
mov [esp+14h+var_C] eax +
fild  [esp+14h+var_C] +
fstp  [esp+14h+var_14] +
wait   +
jmp loc_4B2261  +
mov eax [ebx+8] +
movzx eax byte ptr [eax] +
mov [esp+14h+var_C] eax +
fild  [esp+14h+var_C] +
fstp  [esp+14h+var_14] +
wait   +
jmp loc_4B2261  +
mov eax [ebx+8] +
movzx eax word ptr [eax] +
mov [esp+14h+var_C] eax +
fild  [esp+14h+var_C] +
fstp  [esp+14h+var_14] +
wait   +
jmp loc_4B2261  +
mov eax [ebx+8] +
mov eax [eax] +
mov dword ptr [esp+14h+var_8] eax +
xor eax eax +
mov dword ptr [esp+14h+var_8+4] eax +
fild  [esp+14h+var_8] +
fstp  [esp+14h+var_14] +
wait   +
jmp loc_4B2261  +
mov eax [ebx+8] +
fild  qword ptr [eax] +
fstp  [esp+14h+var_14] +
wait   +
jmp loc_4B2261  +
mov eax [ebx+8] +
call sub_4B1EF4  +
fstp  [esp+14h+var_14] +
wait   +
jmp loc_4B2261  +
mov eax ebx +
call sub_4B1DFC  +
fstp  [esp+14h+var_14] +
wait   +
jmp loc_4B2261  +
mov edx esp +
mov eax ebx +
call sub_4B1EA8  +
test al al +
jnz loc_4B2261  +
mov eax ebx +
call sub_4B1DFC  +
fstp  [esp+14h+var_14] +
wait   +
fld  [esp+14h+var_14] +
add esp 14h +
pop ebx  +
retn   +
***
mov ebx eax +
mov eax ebx +
call sub_4B1EF4  +
fstp  [esp+0Ch+var_C] +
wait   +
fld  [esp+0Ch+var_C] +
add esp 0Ch +
pop ebx  +
retn   +
***
add esp 0FFFFFFECh +
push ebx  +
push esi  +
push edi  +
mov [ebp+var_4] eax +
mov eax [ebp+var_4] +
movzx eax word ptr [eax] +
cmp eax 14h +
ja loc_4B23CD  +
jmp ds:off_4B22AE[eax*4]  +
xor eax eax +
mov [ebp+var_8] eax +
jmp loc_4B240F  +
cmp byte_4E6DC4 0 +
jz loc_4B2322  +
mov dx 4 +
mov ax 1 +
call sub_4AF400  +
xor eax eax +
mov [ebp+var_8] eax +
jmp loc_4B240F  +
mov eax [ebp+var_4] +
fild  word ptr [eax+8] +
fstp  [ebp+var_8] +
wait   +
jmp loc_4B240F  +
mov eax [ebp+var_4] +
fild  dword ptr [eax+8] +
fstp  [ebp+var_8] +
wait   +
jmp loc_4B240F  +
mov eax [ebp+var_4] +
mov eax [eax+8] +
mov [ebp+var_8] eax +
jmp loc_4B240F  +
mov eax [ebp+var_4] +
movsx eax word ptr [eax+8] +
mov [ebp+var_C] eax +
fild  [ebp+var_C] +
fstp  [ebp+var_8] +
wait   +
jmp loc_4B240F  +
mov eax [ebp+var_4] +
movsx eax byte ptr [eax+8] +
mov [ebp+var_C] eax +
fild  [ebp+var_C] +
fstp  [ebp+var_8] +
wait   +
jmp loc_4B240F  +
mov eax [ebp+var_4] +
movzx eax byte ptr [eax+8] +
mov [ebp+var_C] eax +
fild  [ebp+var_C] +
fstp  [ebp+var_8] +
wait   +
jmp loc_4B240F  +
mov eax [ebp+var_4] +
movzx eax word ptr [eax+8] +
mov [ebp+var_C] eax +
fild  [ebp+var_C] +
fstp  [ebp+var_8] +
wait   +
jmp loc_4B240F  +
mov eax [ebp+var_4] +
mov eax [eax+8] +
mov dword ptr [ebp+var_14] eax +
xor eax eax +
mov dword ptr [ebp+var_14+4] eax +
fild  [ebp+var_14] +
fstp  [ebp+var_8] +
wait   +
jmp loc_4B240F  +
mov eax [ebp+var_4] +
fild  qword ptr [eax+8] +
fstp  [ebp+var_8] +
wait   +
jmp loc_4B240F  +
xor eax eax +
push ebp  +
push offset loc_4B23F1  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov eax [ebp+var_4] +
call sub_4B1EF4  +
fstp  [ebp+var_8] +
wait   +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
jmp loc_4B240F  +
jmp @System@@HandleAnyException$qqrv  +
mov eax [ebp-4] +
mov ax [eax] +
mov dx 4 +
call @Variants@HandleConversionException$qqrxusxus  +
xor eax eax +
mov [ebp-8] eax +
call @@DoneExcept$qqrv  +
fld  [ebp+var_8] +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
add esp 0FFFFFFE0h +
push ebx  +
xor edx edx +
mov [ebp+var_20] edx +
mov [ebp+var_1C] edx +
mov [ebp+var_C] edx +
mov ebx eax +
xor eax eax +
push ebp  +
push offset loc_4B24F4  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov edx ebx +
lea eax [ebp+var_C] +
call sub_4B39CC  +
lea eax [ebp+var_8] +
push eax  +
push 0  +
push 400h  +
mov eax [ebp+var_C] +
push eax  +
call sub_4AE904  +
mov edx eax +
sub edx 80020005h +
jz loc_4B2470  +
sub edx 7FFDFFFBh +
jnz loc_4B24C5  +
jmp loc_4B24D1  +
lea eax [ebp+var_1C] +
mov edx [ebp+var_C] +
call unknown_libname_548  +
mov eax [ebp+var_1C] +
lea edx [ebp+var_8] +
call sub_4AB890  +
test al al +
jnz loc_4B24D1  +
lea eax [ebp+var_20] +
mov edx [ebp+var_C] +
call unknown_libname_548  +
mov eax [ebp+var_20] +
lea edx [ebp+var_18] +
call sub_4AA0A8  +
test al al +
jz loc_4B24B2  +
mov eax [ebp+var_18] +
mov dword ptr [ebp+var_8] eax +
mov eax [ebp+var_14] +
mov dword ptr [ebp+var_8+4] eax +
jmp loc_4B24D1  +
mov dx [ebx] +
mov cx 7 +
mov eax 80020005h +
call @Variants@VarResultCheck$qqrlusus  +
jmp loc_4B24D1  +
mov dx [ebx] +
mov cx 7 +
call @Variants@VarResultCheck$qqrlusus  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4B24FB  +
lea eax [ebp+var_20] +
mov edx 2 +
call unknown_libname_541  +
lea eax [ebp+var_C] +
call unknown_libname_552  +
retn   +
jmp unknown_libname_539  +
jmp loc_4B24DE  +
fld  [ebp+var_8] +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
add esp 0FFFFFFE8h +
mov ebx eax +
lea eax [esp+18h+pvarg] +
push eax  +
call VariantInit  +
push 7  +
push 0  +
push 400h  +
push ebx  +
lea eax [esp+28h+pvarg] +
push eax  +
call sub_4AE870  +
mov dx [ebx] +
mov cx 7 +
call @Variants@VarResultCheck$qqrlusus  +
mov eax dword ptr [esp+18h+pvarg.n1+8] +
mov dword ptr [esp+18h+var_18] eax +
mov eax dword ptr [esp+18h+pvarg.n1+0Ch] +
mov dword ptr [esp+18h+var_18+4] eax +
fld  [esp+18h+var_18] +
add esp 18h +
pop ebx  +
retn   +
***
add esp 0FFFFFFE8h +
push edi  +
add esp 0FFFFFFECh +
mov edi edx +
mov esi eax +
mov edx esp +
mov ax [esi] +
call sub_4B7BE8  +
mov ebx eax +
test bl bl +
jz loc_4B264E  +
lea eax [esp+14h+pvarg] +
push eax  +
call VariantInit  +
push 7  +
mov ecx esi +
lea edx [esp+18h+pvarg] +
mov eax [esp+18h+var_14] +
mov esi [eax] +
call dword ptr [esi+1Ch]  +
mov eax dword ptr [esp+14h+pvarg.n1+8] +
mov [edi] eax +
mov eax dword ptr [esp+14h+pvarg.n1+0Ch] +
mov [edi+4] eax +
mov eax ebx +
add esp 14h +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov ebx eax +
mov ax [ebx] +
movzx edx ax +
cmp edx 14h +
ja loc_4B27EE  +
jmp ds:off_4B2674[edx*4]  +
xor eax eax +
mov dword ptr [esp+14h+var_14] eax +
mov dword ptr [esp+14h+var_14+4] eax +
jmp loc_4B299E  +
cmp byte_4E6DC4 0 +
jz loc_4B26EC  +
mov dx 7 +
mov ax 1 +
call sub_4AF400  +
xor eax eax +
mov dword ptr [esp+14h+var_14] eax +
mov dword ptr [esp+14h+var_14+4] eax +
jmp loc_4B299E  +
fild  word ptr [ebx+8] +
fstp  [esp+14h+var_14] +
wait   +
jmp loc_4B299E  +
fild  dword ptr [ebx+8] +
fstp  [esp+14h+var_14] +
wait   +
jmp loc_4B299E  +
mov eax ebx +
call sub_4B2560  +
fstp  [esp+14h+var_14] +
wait   +
jmp loc_4B299E  +
mov eax [ebx+8] +
mov dword ptr [esp+14h+var_14] eax +
mov eax [ebx+0Ch] +
mov dword ptr [esp+14h+var_14+4] eax +
jmp loc_4B299E  +
mov eax ebx +
call sub_4B241C  +
fstp  [esp+14h+var_14] +
wait   +
jmp loc_4B299E  +
movsx eax word ptr [ebx+8] +
mov [esp+14h+var_C] eax +
fild  [esp+14h+var_C] +
fstp  [esp+14h+var_14] +
wait   +
jmp loc_4B299E  +
movsx eax byte ptr [ebx+8] +
mov [esp+14h+var_C] eax +
fild  [esp+14h+var_C] +
fstp  [esp+14h+var_14] +
wait   +
jmp loc_4B299E  +
xor eax eax +
mov al [ebx+8] +
mov [esp+14h+var_C] eax +
fild  [esp+14h+var_C] +
fstp  [esp+14h+var_14] +
wait   +
jmp loc_4B299E  +
movzx eax word ptr [ebx+8] +
mov [esp+14h+var_C] eax +
fild  [esp+14h+var_C] +
fstp  [esp+14h+var_14] +
wait   +
jmp loc_4B299E  +
mov eax [ebx+8] +
mov dword ptr [esp+14h+var_8] eax +
xor eax eax +
mov dword ptr [esp+14h+var_8+4] eax +
fild  [esp+14h+var_8] +
fstp  [esp+14h+var_14] +
wait   +
jmp loc_4B299E  +
fild  qword ptr [ebx+8] +
add esp 0FFFFFFF8h +
fstp  [esp+1Ch+var_1C] +
wait   +
mov eax ebx +
call sub_4B2504  +
fstp  [esp+14h+var_14] +
wait   +
jmp loc_4B299E  +
mov eax [ebx+8] +
call sub_4B2658  +
fstp  [esp+14h+var_14] +
wait   +
jmp loc_4B299E  +
mov eax ebx +
call sub_4B2560  +
fstp  [esp+14h+var_14] +
wait   +
jmp loc_4B299E  +
mov edx eax +
sub dx 100h +
jz loc_4B27FE  +
dec dx  +
jz loc_4B280E  +
jmp loc_4B281E  +
mov eax ebx +
call sub_4B241C  +
fstp  [esp+14h+var_14] +
wait   +
jmp loc_4B299E  +
mov eax ebx +
call unknown_libname_494  +
fstp  [esp+14h+var_14] +
wait   +
jmp loc_4B299E  +
test ah 40h +
jz loc_4B2986  +
movzx eax ax +
and eax 0FFFFBFFFh +
cmp eax 14h +
ja loc_4B2979  +
jmp ds:off_4B283F[eax*4]  +
mov eax [ebx+8] +
fild  word ptr [eax] +
fstp  [esp+14h+var_14] +
wait   +
jmp loc_4B299E  +
mov eax [ebx+8] +
fild  dword ptr [eax] +
fstp  [esp+14h+var_14] +
wait   +
jmp loc_4B299E  +
mov eax ebx +
call sub_4B2560  +
fstp  [esp+14h+var_14] +
wait   +
jmp loc_4B299E  +
mov eax [ebx+8] +
mov edx [eax] +
mov dword ptr [esp+14h+var_14] edx +
mov edx [eax+4] +
mov dword ptr [esp+14h+var_14+4] edx +
jmp loc_4B299E  +
mov eax ebx +
call sub_4B241C  +
fstp  [esp+14h+var_14] +
wait   +
jmp loc_4B299E  +
mov eax [ebx+8] +
movsx eax word ptr [eax] +
mov [esp+14h+var_C] eax +
fild  [esp+14h+var_C] +
fstp  [esp+14h+var_14] +
wait   +
jmp loc_4B299E  +
mov eax [ebx+8] +
movsx eax byte ptr [eax] +
mov [esp+14h+var_C] eax +
fild  [esp+14h+var_C] +
fstp  [esp+14h+var_14] +
wait   +
jmp loc_4B299E  +
mov eax [ebx+8] +
movzx eax byte ptr [eax] +
mov [esp+14h+var_C] eax +
fild  [esp+14h+var_C] +
fstp  [esp+14h+var_14] +
wait   +
jmp loc_4B299E  +
mov eax [ebx+8] +
movzx eax word ptr [eax] +
mov [esp+14h+var_C] eax +
fild  [esp+14h+var_C] +
fstp  [esp+14h+var_14] +
wait   +
jmp loc_4B299E  +
mov eax [ebx+8] +
mov eax [eax] +
mov dword ptr [esp+14h+var_8] eax +
xor eax eax +
mov dword ptr [esp+14h+var_8+4] eax +
fild  [esp+14h+var_8] +
fstp  [esp+14h+var_14] +
wait   +
jmp loc_4B299E  +
mov eax [ebx+8] +
fild  qword ptr [eax] +
add esp 0FFFFFFF8h +
fstp  [esp+1Ch+var_1C] +
wait   +
mov eax ebx +
call sub_4B2504  +
fstp  [esp+14h+var_14] +
wait   +
jmp loc_4B299E  +
mov eax [ebx+8] +
call sub_4B2658  +
fstp  [esp+14h+var_14] +
wait   +
jmp loc_4B299E  +
mov eax ebx +
call sub_4B2560  +
fstp  [esp+14h+var_14] +
wait   +
jmp loc_4B299E  +
mov edx esp +
mov eax ebx +
call sub_4B260C  +
test al al +
jnz loc_4B299E  +
mov eax ebx +
call sub_4B2560  +
fstp  [esp+14h+var_14] +
wait   +
fld  [esp+14h+var_14] +
add esp 14h +
pop ebx  +
retn   +
***
add esp 0FFFFFFF0h +
push ebx  +
xor edx edx +
mov [ebp+var_10] edx +
mov [ebp+var_C] edx +
mov ebx eax +
xor eax eax +
push ebp  +
push offset loc_4B2A50  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov edx ebx +
lea eax [ebp+var_C] +
call sub_4B39CC  +
lea eax [ebp+var_8] +
push eax  +
push 0  +
push 400h  +
mov eax [ebp+var_C] +
push eax  +
call sub_4AE924  +
mov edx eax +
sub edx 80020005h +
jz loc_4B29F9  +
sub edx 7FFDFFFBh +
jnz loc_4B2A26  +
jmp loc_4B2A32  +
lea eax [ebp+var_10] +
mov edx [ebp+var_C] +
call unknown_libname_548  +
mov eax [ebp+var_10] +
lea edx [ebp+var_8] +
call sub_4AA100  +
test al al +
jnz loc_4B2A32  +
mov dx [ebx] +
mov cx 6 +
mov eax 80020005h +
call @Variants@VarResultCheck$qqrlusus  +
jmp loc_4B2A32  +
mov dx [ebx] +
mov cx 6 +
call @Variants@VarResultCheck$qqrlusus  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4B2A57  +
lea eax [ebp+var_10] +
call unknown_libname_540  +
lea eax [ebp+var_C] +
call unknown_libname_552  +
retn   +
jmp unknown_libname_539  +
jmp loc_4B2A3F  +
fild  [ebp+var_8] +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
add esp 0FFFFFFE8h +
mov ebx eax +
lea eax [esp+18h+pvarg] +
push eax  +
call VariantInit  +
push 6  +
push 0  +
push 400h  +
push ebx  +
lea eax [esp+28h+pvarg] +
push eax  +
call sub_4AE870  +
mov dx [ebx] +
mov cx 6 +
call @Variants@VarResultCheck$qqrlusus  +
mov eax dword ptr [esp+18h+pvarg.n1+8] +
mov dword ptr [esp+18h+var_18] eax +
mov eax dword ptr [esp+18h+pvarg.n1+0Ch] +
mov dword ptr [esp+18h+var_18+4] eax +
fild  [esp+18h+var_18] +
add esp 18h +
pop ebx  +
retn   +
***
add esp 0FFFFFFE8h +
push edi  +
add esp 0FFFFFFECh +
mov edi edx +
mov esi eax +
mov edx esp +
mov ax [esi] +
call sub_4B7BE8  +
mov ebx eax +
test bl bl +
jz loc_4B2BAA  +
lea eax [esp+14h+pvarg] +
push eax  +
call VariantInit  +
push 6  +
mov ecx esi +
lea edx [esp+18h+pvarg] +
mov eax [esp+18h+var_14] +
mov esi [eax] +
call dword ptr [esi+1Ch]  +
mov eax dword ptr [esp+14h+pvarg.n1+8] +
mov [edi] eax +
mov eax dword ptr [esp+14h+pvarg.n1+0Ch] +
mov [edi+4] eax +
mov eax ebx +
add esp 14h +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov ebx eax +
mov ax [ebx] +
movzx edx ax +
cmp edx 14h +
ja loc_4B2D84  +
jmp ds:off_4B2BD0[edx*4]  +
xor eax eax +
mov dword ptr [esp+14h+var_14] eax +
mov dword ptr [esp+14h+var_14+4] eax +
jmp loc_4B2F71  +
cmp byte_4E6DC4 0 +
jz loc_4B2C48  +
mov dx 6 +
mov ax 1 +
call sub_4AF400  +
xor eax eax +
mov dword ptr [esp+14h+var_14] eax +
mov dword ptr [esp+14h+var_14+4] eax +
jmp loc_4B2F71  +
fild  word ptr [ebx+8] +
fmul  ds:flt_4B2F7C +
fistp  [esp+14h+var_14] +
wait   +
jmp loc_4B2F71  +
fild  dword ptr [ebx+8] +
fmul  ds:flt_4B2F7C +
fistp  [esp+14h+var_14] +
wait   +
jmp loc_4B2F71  +
mov eax ebx +
call sub_4B2ABC  +
fistp  [esp+14h+var_14] +
wait   +
jmp loc_4B2F71  +
mov eax [ebx+8] +
mov dword ptr [esp+14h+var_14] eax +
mov eax [ebx+0Ch] +
mov dword ptr [esp+14h+var_14+4] eax +
jmp loc_4B2F71  +
mov eax ebx +
call sub_4B2ABC  +
fistp  [esp+14h+var_14] +
wait   +
jmp loc_4B2F71  +
mov eax ebx +
call sub_4B29A8  +
fistp  [esp+14h+var_14] +
wait   +
jmp loc_4B2F71  +
movsx eax word ptr [ebx+8] +
mov [esp+14h+var_C] eax +
fild  [esp+14h+var_C] +
fmul  ds:flt_4B2F7C +
fistp  [esp+14h+var_14] +
wait   +
jmp loc_4B2F71  +
movsx eax byte ptr [ebx+8] +
mov [esp+14h+var_C] eax +
fild  [esp+14h+var_C] +
fmul  ds:flt_4B2F7C +
fistp  [esp+14h+var_14] +
wait   +
jmp loc_4B2F71  +
xor eax eax +
mov al [ebx+8] +
mov [esp+14h+var_C] eax +
fild  [esp+14h+var_C] +
fmul  ds:flt_4B2F7C +
fistp  [esp+14h+var_14] +
wait   +
jmp loc_4B2F71  +
movzx eax word ptr [ebx+8] +
mov [esp+14h+var_C] eax +
fild  [esp+14h+var_C] +
fmul  ds:flt_4B2F7C +
fistp  [esp+14h+var_14] +
wait   +
jmp loc_4B2F71  +
mov eax [ebx+8] +
mov dword ptr [esp+14h+var_8] eax +
xor eax eax +
mov dword ptr [esp+14h+var_8+4] eax +
fild  [esp+14h+var_8] +
fmul  ds:flt_4B2F7C +
fistp  [esp+14h+var_14] +
wait   +
jmp loc_4B2F71  +
fild  qword ptr [ebx+8] +
add esp 0FFFFFFF8h +
fstp  [esp+1Ch+var_1C] +
wait   +
mov eax ebx +
call sub_4B2A60  +
fistp  [esp+14h+var_14] +
wait   +
jmp loc_4B2F71  +
mov eax [ebx+8] +
call sub_4B2BB4  +
fistp  [esp+14h+var_14] +
wait   +
jmp loc_4B2F71  +
mov eax ebx +
call sub_4B2ABC  +
fistp  [esp+14h+var_14] +
wait   +
jmp loc_4B2F71  +
mov edx eax +
sub dx 100h +
jz loc_4B2D94  +
dec dx  +
jz loc_4B2DA4  +
jmp loc_4B2DB4  +
mov eax ebx +
call sub_4B29A8  +
fistp  [esp+14h+var_14] +
wait   +
jmp loc_4B2F71  +
mov eax ebx +
call @Variants@_16524  +
fistp  [esp+14h+var_14] +
wait   +
jmp loc_4B2F71  +
test ah 40h +
jz loc_4B2F59  +
movzx eax ax +
and eax 0FFFFBFFFh +
cmp eax 14h +
ja loc_4B2F4C  +
jmp ds:off_4B2DD5[eax*4]  +
mov eax [ebx+8] +
fild  word ptr [eax] +
fmul  ds:flt_4B2F7C +
fistp  [esp+14h+var_14] +
wait   +
jmp loc_4B2F71  +
mov eax [ebx+8] +
fild  dword ptr [eax] +
fmul  ds:flt_4B2F7C +
fistp  [esp+14h+var_14] +
wait   +
jmp loc_4B2F71  +
mov eax ebx +
call sub_4B2ABC  +
fistp  [esp+14h+var_14] +
wait   +
jmp loc_4B2F71  +
mov eax [ebx+8] +
mov edx [eax] +
mov dword ptr [esp+14h+var_14] edx +
mov edx [eax+4] +
mov dword ptr [esp+14h+var_14+4] edx +
jmp loc_4B2F71  +
mov eax ebx +
call sub_4B2ABC  +
fistp  [esp+14h+var_14] +
wait   +
jmp loc_4B2F71  +
mov eax ebx +
call sub_4B29A8  +
fistp  [esp+14h+var_14] +
wait   +
jmp loc_4B2F71  +
mov eax [ebx+8] +
movsx eax word ptr [eax] +
mov [esp+14h+var_C] eax +
fild  [esp+14h+var_C] +
fmul  ds:flt_4B2F7C +
fistp  [esp+14h+var_14] +
wait   +
jmp loc_4B2F71  +
mov eax [ebx+8] +
movsx eax byte ptr [eax] +
mov [esp+14h+var_C] eax +
fild  [esp+14h+var_C] +
fmul  ds:flt_4B2F7C +
fistp  [esp+14h+var_14] +
wait   +
jmp loc_4B2F71  +
mov eax [ebx+8] +
movzx eax byte ptr [eax] +
mov [esp+14h+var_C] eax +
fild  [esp+14h+var_C] +
fmul  ds:flt_4B2F7C +
fistp  [esp+14h+var_14] +
wait   +
jmp loc_4B2F71  +
mov eax [ebx+8] +
movzx eax word ptr [eax] +
mov [esp+14h+var_C] eax +
fild  [esp+14h+var_C] +
fmul  ds:flt_4B2F7C +
fistp  [esp+14h+var_14] +
wait   +
jmp loc_4B2F71  +
mov eax [ebx+8] +
mov eax [eax] +
mov dword ptr [esp+14h+var_8] eax +
xor eax eax +
mov dword ptr [esp+14h+var_8+4] eax +
fild  [esp+14h+var_8] +
fmul  ds:flt_4B2F7C +
fistp  [esp+14h+var_14] +
wait   +
jmp loc_4B2F71  +
mov eax [ebx+8] +
fild  qword ptr [eax] +
add esp 0FFFFFFF8h +
fstp  [esp+1Ch+var_1C] +
wait   +
mov eax ebx +
call sub_4B2A60  +
fistp  [esp+14h+var_14] +
wait   +
jmp loc_4B2F71  +
mov eax [ebx+8] +
call sub_4B2BB4  +
fistp  [esp+14h+var_14] +
wait   +
jmp loc_4B2F71  +
mov eax ebx +
call sub_4B2ABC  +
fistp  [esp+14h+var_14] +
wait   +
jmp loc_4B2F71  +
mov edx esp +
mov eax ebx +
call sub_4B2B68  +
test al al +
jnz loc_4B2F71  +
mov eax ebx +
call sub_4B2ABC  +
fistp  [esp+14h+var_14] +
wait   +
fild  [esp+14h+var_14] +
add esp 14h +
pop ebx  +
retn   +
***
push ebx  +
mov ebx eax +
mov eax ebx +
call unknown_libname_552  +
push eax  +
push 0  +
push 400h  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_4AE964  +
mov cx 8 +
mov dx 6 +
call @Variants@VarResultCheck$qqrlusus  +
pop ebx  +
pop ebp  +
retn 8  +
***
push ebx  +
mov ebx eax +
mov eax ebx +
call unknown_libname_552  +
push eax  +
push 0  +
push 400h  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_4AE994  +
mov cx 8 +
mov dx 7 +
call @Variants@VarResultCheck$qqrlusus  +
pop ebx  +
pop ebp  +
retn 8  +
***
xor ecx ecx +
push ecx  +
push ecx  +
push ecx  +
push ecx  +
push ebx  +
push esi  +
mov ebx edx +
mov esi eax +
xor eax eax +
push ebp  +
push offset loc_4B309A  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov eax ebx +
call unknown_libname_552  +
push eax  +
push 0  +
push 400h  +
push esi  +
call sub_4AE9C4  +
mov cx 8 +
mov dx 0Bh +
call @Variants@VarResultCheck$qqrlusus  +
mov al byte_4E6DD0 +
sub al 1 +
jb loc_4B307F  +
jz loc_4B3038  +
dec al  +
jz loc_4B3059  +
jmp loc_4B307A  +
lea eax [ebp+var_8] +
mov edx [ebx] +
call unknown_libname_548  +
mov eax [ebp+var_8] +
lea edx [ebp+var_4] +
call sub_4A87E4  +
mov edx [ebp+var_4] +
mov eax ebx +
call unknown_libname_554  +
jmp loc_4B307F  +
lea eax [ebp+var_10] +
mov edx [ebx] +
call unknown_libname_548  +
mov eax [ebp+var_10] +
lea edx [ebp+var_C] +
call sub_4A87A8  +
mov edx [ebp+var_C] +
mov eax ebx +
call unknown_libname_554  +
jmp loc_4B307F  +
call sub_4AF49C  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4B30A1  +
lea eax [ebp+var_10] +
mov edx 4 +
call unknown_libname_541  +
retn   +
jmp unknown_libname_539  +
jmp loc_4B308C  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
add esp 0FFFFFFE8h +
add esp 0FFFFFFF0h +
push ebx  +
push esi  +
mov esi edx +
mov ebx eax +
lea eax [ebp+pvarg] +
push eax  +
call VariantInit  +
xor eax eax +
push ebp  +
push offset loc_4B31C6  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov edx ebx +
lea eax [ebp+pvarg] +
call @Variants@@VarCopy$qqrr8TVarDatarx8TVarData  +
lea eax [ebp+pvarg] +
call dword_4F1BB0  +
lea edx [ebp+pvarg] +
mov eax esi +
call sub_4B3258  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4B31CD  +
lea eax [ebp+pvarg] +
call @Variants@@VarClear$qqrr8TVarData  +
retn   +
jmp unknown_libname_539  +
jmp loc_4B31BD  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
add esp 0FFFFFFE4h +
mov ecx 0Fh +
push 0  +
push ebx  +
mov ebx eax +
xor eax eax +
push ebp  +
push offset loc_4B37DF  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
lea eax [ebp+var_4] +
call sub_4B3258  +
mov eax ebx +
mov edx [ebp+var_4] +
mov ecx 0FFh +
call @System@@LStrToString$qqrv  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4B37E6  +
lea eax [ebp+var_4] +
call unknown_libname_540  +
retn   +
jmp unknown_libname_539  +
jmp loc_4B37D6  +
pop ebx  +
pop ecx  +
pop ebp  +
retn   +
***
add esp 0FFFFFFECh +
push ebx  +
push esi  +
xor ecx ecx +
mov [ebp+var_14] ecx +
mov esi edx +
mov ebx eax +
xor eax eax +
push ebp  +
push offset loc_4B3892  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
lea eax [ebp+pvarg] +
push eax  +
call VariantInit  +
xor eax eax +
push ebp  +
push offset loc_4B3875  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
push 8  +
push 0  +
push 400h  +
push ebx  +
lea eax [ebp+pvarg] +
push eax  +
call sub_4AE870  +
mov dx [ebx] +
mov cx 8 +
call @Variants@VarResultCheck$qqrlusus  +
push esi  +
lea eax [ebp+var_14] +
mov edx dword ptr [ebp+pvarg.n1+8] +
call unknown_libname_553  +
mov eax [ebp+var_14] +
mov ecx 7FFFFFFFh +
mov edx 1 +
call @System@@WStrCopy$qqrx17System@WideStringii  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4B387C  +
lea eax [ebp+pvarg] +
call @Variants@@VarClear$qqrr8TVarData  +
retn   +
jmp unknown_libname_539  +
jmp loc_4B386C  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4B3899  +
lea eax [ebp+var_14] +
call unknown_libname_552  +
retn   +
jmp unknown_libname_539  +
jmp loc_4B3889  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
add esp 0FFFFFFF0h +
push ebx  +
push esi  +
mov esi edx +
mov ebx eax +
lea eax [ebp+pvarg] +
push eax  +
call VariantInit  +
xor eax eax +
push ebp  +
push offset loc_4B38F6  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov edx ebx +
lea eax [ebp+pvarg] +
call @Variants@@VarCopy$qqrr8TVarDatarx8TVarData  +
lea eax [ebp+pvarg] +
call dword_4F1BB0  +
lea edx [ebp+pvarg] +
mov eax esi +
call sub_4B39CC  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4B38FD  +
lea eax [ebp+pvarg] +
call @Variants@@VarClear$qqrr8TVarData  +
retn   +
jmp unknown_libname_539  +
jmp loc_4B38ED  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
add esp 0FFFFFFE0h +
push ebx  +
xor ecx ecx +
mov [ebp+var_20] ecx +
mov [ebp+var_4] edx +
mov ebx eax +
mov eax [ebp+var_4] +
test eax eax +
jz loc_4B3920  +
xor edx edx +
mov [eax] edx +
xor eax eax +
push ebp  +
push offset loc_4B39BC  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
lea edx [ebp+var_C] +
mov ax [ebx] +
call sub_4B7BE8  +
mov [ebp+var_5] al +
cmp [ebp+var_5] 0 +
jz loc_4B39A6  +
lea eax [ebp+pvarg] +
push eax  +
call VariantInit  +
xor eax eax +
push ebp  +
push offset loc_4B399F  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
push 8  +
mov ecx ebx +
lea edx [ebp+pvarg] +
mov eax [ebp+var_C] +
mov ebx [eax] +
call dword ptr [ebx+1Ch]  +
mov eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_20] +
mov edx dword ptr [ebp+pvarg.n1+8] +
call unknown_libname_553  +
mov eax [ebp+var_20] +
mov ecx 7FFFFFFFh +
mov edx 1 +
call @System@@WStrCopy$qqrx17System@WideStringii  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4B39A6  +
lea eax [ebp+pvarg] +
call @Variants@@VarClear$qqrr8TVarData  +
retn   +
jmp unknown_libname_539  +
jmp loc_4B3996  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4B39C3  +
lea eax [ebp+var_20] +
call unknown_libname_552  +
retn   +
jmp unknown_libname_539  +
jmp loc_4B39B3  +
mov al [ebp+var_5] +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
mov ecx 0Eh +
push 0  +
push 0  +
dec ecx  +
jnz loc_4B39D4  +
push ecx  +
push ebx  +
push esi  +
mov ebx edx +
mov esi eax +
xor eax eax +
push ebp  +
push offset loc_4B3F1E  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov ax [ebx] +
movzx edx ax +
cmp edx 14h +
ja loc_4B3C34  +
jmp ds:off_4B3A06[edx*4]  +
mov eax esi +
call unknown_libname_552  +
jmp loc_4B3EA8  +
cmp byte_4E6DC4 0 +
jz loc_4B3A7C  +
mov dx 8 +
mov ax 1 +
call sub_4AF400  +
mov eax esi +
mov edx dword_4E6DC8 +
call unknown_libname_554  +
jmp loc_4B3EA8  +
lea edx [ebp+var_4] +
movsx eax word ptr [ebx+8] +
call @Sysutils@IntToStr$qqri  +
mov edx [ebp+var_4] +
mov eax esi +
call unknown_libname_554  +
jmp loc_4B3EA8  +
lea edx [ebp+var_8] +
mov eax [ebx+8] +
call @Sysutils@IntToStr$qqri  +
mov edx [ebp+var_8] +
mov eax esi +
call unknown_libname_554  +
jmp loc_4B3EA8  +
fld  dword ptr [ebx+8] +
add esp 0FFFFFFF4h +
fstp  [esp+2Ch+var_2C] +
wait   +
lea eax [ebp+var_C] +
call @FloatToStr$qqrg  +
mov edx [ebp+var_C] +
mov eax esi +
call unknown_libname_554  +
jmp loc_4B3EA8  +
fld  qword ptr [ebx+8] +
add esp 0FFFFFFF4h +
fstp  [esp+2Ch+var_2C] +
wait   +
lea eax [ebp+var_10] +
call @FloatToStr$qqrg  +
mov edx [ebp+var_10] +
mov eax esi +
call unknown_libname_554  +
jmp loc_4B3EA8  +
push dword ptr [ebx+0Ch]  +
push dword ptr [ebx+8]  +
lea eax [ebp+var_14] +
call sub_4B2F80  +
mov edx [ebp+var_14] +
mov eax esi +
call @System@@WStrAsg$qqrr17System@WideStringx17System@WideString  +
jmp loc_4B3EA8  +
push dword ptr [ebx+0Ch]  +
push dword ptr [ebx+8]  +
lea eax [ebp+var_18] +
call sub_4B2FB4  +
mov edx [ebp+var_18] +
mov eax esi +
call @System@@WStrAsg$qqrr17System@WideStringx17System@WideString  +
jmp loc_4B3EA8  +
push esi  +
lea eax [ebp+var_1C] +
mov edx [ebx+8] +
call unknown_libname_553  +
mov eax [ebp+var_1C] +
mov ecx 7FFFFFFFh +
mov edx 1 +
call @System@@WStrCopy$qqrx17System@WideStringii  +
jmp loc_4B3EA8  +
lea edx [ebp+var_20] +
mov ax [ebx+8] +
call @Variants@_16529  +
mov edx [ebp+var_20] +
mov eax esi +
call @System@@WStrAsg$qqrr17System@WideStringx17System@WideString  +
jmp loc_4B3EA8  +
lea edx [ebp+var_2C+8] +
movsx eax byte ptr [ebx+8] +
call @Sysutils@IntToStr$qqri  +
mov edx dword ptr [ebp+var_2C+8] +
mov eax esi +
call unknown_libname_554  +
jmp loc_4B3EA8  +
lea edx [ebp+var_2C+4] +
xor eax eax +
mov al [ebx+8] +
call @Sysutils@IntToStr$qqri  +
mov edx dword ptr [ebp+var_2C+4] +
mov eax esi +
call unknown_libname_554  +
jmp loc_4B3EA8  +
lea edx [ebp+var_2C] +
movzx eax word ptr [ebx+8] +
call @Sysutils@IntToStr$qqri  +
mov edx dword ptr [ebp+var_2C] +
mov eax esi +
call unknown_libname_554  +
jmp loc_4B3EA8  +
mov eax [ebx+8] +
xor edx edx +
push edx  +
push eax  +
lea eax [ebp+var_30] +
call unknown_libname_463  +
mov edx [ebp+var_30] +
mov eax esi +
call unknown_libname_554  +
jmp loc_4B3EA8  +
push dword ptr [ebx+0Ch]  +
push dword ptr [ebx+8]  +
lea eax [ebp+var_34] +
call unknown_libname_463  +
mov edx [ebp+var_34] +
mov eax esi +
call unknown_libname_554  +
jmp loc_4B3EA8  +
mov eax [ebx+8] +
mov edx eax +
mov eax esi +
call sub_4B39CC  +
jmp loc_4B3EA8  +
lea edx [ebp+var_38] +
mov eax ebx +
call @Variants@_16535  +
mov edx [ebp+var_38] +
mov eax esi +
call @System@@WStrAsg$qqrr17System@WideStringx17System@WideString  +
jmp loc_4B3EA8  +
mov edx eax +
sub dx 100h +
jz loc_4B3C44  +
dec dx  +
jz loc_4B3C53  +
jmp loc_4B3C6C  +
mov eax esi +
mov edx [ebx+8] +
call unknown_libname_554  +
jmp loc_4B3EA8  +
lea edx [ebp+var_3C] +
mov eax ebx +
call sub_4B38A0  +
mov edx [ebp+var_3C] +
mov eax esi +
call @System@@WStrAsg$qqrr17System@WideStringx17System@WideString  +
jmp loc_4B3EA8  +
test ah 40h +
jz loc_4B3E80  +
movzx eax ax +
and eax 0FFFFBFFFh +
cmp eax 14h +
ja loc_4B3E6A  +
jmp ds:off_4B3C8D[eax*4]  +
lea edx [ebp+var_40] +
mov eax [ebx+8] +
movsx eax word ptr [eax] +
call @Sysutils@IntToStr$qqri  +
mov edx [ebp+var_40] +
mov eax esi +
call unknown_libname_554  +
jmp loc_4B3EA8  +
lea edx [ebp+var_44] +
mov eax [ebx+8] +
mov eax [eax] +
call @Sysutils@IntToStr$qqri  +
mov edx [ebp+var_44] +
mov eax esi +
call unknown_libname_554  +
jmp loc_4B3EA8  +
mov eax [ebx+8] +
fld  dword ptr [eax] +
add esp 0FFFFFFF4h +
fstp  [esp+2Ch+var_2C] +
wait   +
lea eax [ebp+var_48] +
call @FloatToStr$qqrg  +
mov edx [ebp+var_48] +
mov eax esi +
call unknown_libname_554  +
jmp loc_4B3EA8  +
mov eax [ebx+8] +
fld  qword ptr [eax] +
add esp 0FFFFFFF4h +
fstp  [esp+2Ch+var_2C] +
wait   +
lea eax [ebp+var_4C] +
call @FloatToStr$qqrg  +
mov edx [ebp+var_4C] +
mov eax esi +
call unknown_libname_554  +
jmp loc_4B3EA8  +
mov eax [ebx+8] +
push dword ptr [eax+4]  +
push dword ptr [eax]  +
lea eax [ebp+var_50] +
call sub_4B2F80  +
mov edx [ebp+var_50] +
mov eax esi +
call @System@@WStrAsg$qqrr17System@WideStringx17System@WideString  +
jmp loc_4B3EA8  +
mov eax [ebx+8] +
push dword ptr [eax+4]  +
push dword ptr [eax]  +
lea eax [ebp+var_54] +
call sub_4B2FB4  +
mov edx [ebp+var_54] +
mov eax esi +
call @System@@WStrAsg$qqrr17System@WideStringx17System@WideString  +
jmp loc_4B3EA8  +
mov eax esi +
mov edx [ebx+8] +
mov edx [edx] +
call unknown_libname_553  +
jmp loc_4B3EA8  +
lea edx [ebp+var_58] +
mov eax [ebx+8] +
mov ax [eax] +
call @Variants@_16529  +
mov edx [ebp+var_58] +
mov eax esi +
call @System@@WStrAsg$qqrr17System@WideStringx17System@WideString  +
jmp loc_4B3EA8  +
lea edx [ebp+var_5C] +
mov eax [ebx+8] +
movsx eax byte ptr [eax] +
call @Sysutils@IntToStr$qqri  +
mov edx [ebp+var_5C] +
mov eax esi +
call unknown_libname_554  +
jmp loc_4B3EA8  +
lea edx [ebp+var_60] +
mov eax [ebx+8] +
movzx eax byte ptr [eax] +
call @Sysutils@IntToStr$qqri  +
mov edx [ebp+var_60] +
mov eax esi +
call unknown_libname_554  +
jmp loc_4B3EA8  +
lea edx [ebp+var_64] +
mov eax [ebx+8] +
movzx eax word ptr [eax] +
call @Sysutils@IntToStr$qqri  +
mov edx [ebp+var_64] +
mov eax esi +
call unknown_libname_554  +
jmp loc_4B3EA8  +
mov eax [ebx+8] +
mov eax [eax] +
xor edx edx +
push edx  +
push eax  +
lea eax [ebp+var_68] +
call unknown_libname_463  +
mov edx [ebp+var_68] +
mov eax esi +
call unknown_libname_554  +
jmp loc_4B3EA8  +
mov eax [ebx+8] +
push dword ptr [eax+4]  +
push dword ptr [eax]  +
lea eax [ebp+var_6C] +
call unknown_libname_463  +
mov edx [ebp+var_6C] +
mov eax esi +
call unknown_libname_554  +
jmp loc_4B3EA8  +
mov eax [ebx+8] +
mov edx eax +
mov eax esi +
call sub_4B39CC  +
jmp loc_4B3EA8  +
lea edx [ebp+var_70] +
mov eax ebx +
call @Variants@_16535  +
mov edx [ebp+var_70] +
mov eax esi +
call @System@@WStrAsg$qqrr17System@WideStringx17System@WideString  +
jmp loc_4B3EA8  +
mov eax esi +
call unknown_libname_552  +
mov edx eax +
mov eax ebx +
call @Variants@_16537  +
test al al +
jnz loc_4B3EA8  +
lea edx [ebp+var_74] +
mov eax ebx +
call @Variants@_16535  +
mov edx [ebp+var_74] +
mov eax esi +
call @System@@WStrAsg$qqrr17System@WideStringx17System@WideString  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4B3F25  +
lea eax [ebp+var_74] +
mov edx 2 +
call @System@@WStrArrayClr$qqrpvi  +
lea eax [ebp+var_6C] +
mov edx 5 +
call unknown_libname_541  +
lea eax [ebp+var_58] +
mov edx 3 +
call @System@@WStrArrayClr$qqrpvi  +
lea eax [ebp+var_4C] +
mov edx 4 +
call unknown_libname_541  +
lea eax [ebp+var_3C] +
mov edx 2 +
call @System@@WStrArrayClr$qqrpvi  +
lea eax [ebp+var_34] +
mov edx 5 +
call unknown_libname_541  +
lea eax [ebp+var_20] +
mov edx 4 +
call @System@@WStrArrayClr$qqrpvi  +
lea eax [ebp+var_10] +
mov edx 4 +
call unknown_libname_541  +
retn   +
jmp unknown_libname_539  +
jmp loc_4B3EB5  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
add esp 0FFFFFFF0h +
push ebx  +
push esi  +
mov esi edx +
mov ebx eax +
lea eax [ebp+pvarg] +
push eax  +
call VariantInit  +
xor eax eax +
push ebp  +
push offset loc_4B3F96  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov edx esi +
lea eax [ebp+pvarg] +
call @Variants@@VarCopy$qqrr8TVarDatarx8TVarData  +
lea eax [ebp+pvarg] +
call dword_4F1BB0  +
cmp word ptr [ebp+pvarg.n1] 0Dh +
jz loc_4B3F76  +
mov dx 0Dh +
mov ax 101h +
call sub_4AF400  +
mov eax ebx +
mov edx dword ptr [ebp+pvarg.n1+8] +
call @System@@IntfCopy$qqrr45System@_DelphiInterface$t17System@IInterface_x45System@_DelphiInterface$t17System@IInterface_  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4B3F9D  +
lea eax [ebp+pvarg] +
call @Variants@@VarClear$qqrr8TVarData  +
retn   +
jmp unknown_libname_539  +
jmp loc_4B3F8D  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
push ecx  +
mov ebx edx +
mov esi eax +
movzx eax word ptr [ebx] +
cmp eax 0Dh +
jg loc_4B3FC3  +
jz loc_4B4000  +
sub eax 1 +
jb loc_4B3FD8  +
jz loc_4B3FE1  +
sub eax 8 +
jz loc_4B4000  +
jmp loc_4B4025  +
sub eax 101h +
jz loc_4B401A  +
sub eax 3F08h +
jz loc_4B400C  +
sub eax 4 +
jz loc_4B400C  +
jmp loc_4B4025  +
mov eax esi +
call unknown_libname_560  +
jmp loc_4B4059  +
cmp byte_4E6DC4 0 +
jz loc_4B3FF7  +
mov dx 0Dh +
mov ax 1 +
call sub_4AF400  +
mov eax esi +
call unknown_libname_560  +
jmp loc_4B4059  +
mov eax esi +
mov edx [ebx+8] +
call @System@@IntfCopy$qqrr45System@_DelphiInterface$t17System@IInterface_x45System@_DelphiInterface$t17System@IInterface_  +
jmp loc_4B4059  +
mov eax esi +
mov edx [ebx+8] +
mov edx [edx] +
call @System@@IntfCopy$qqrr45System@_DelphiInterface$t17System@IInterface_x45System@_DelphiInterface$t17System@IInterface_  +
jmp loc_4B4059  +
mov edx ebx +
mov eax esi +
call @Variants@_16539  +
jmp loc_4B4059  +
mov edx esp +
mov ax [ebx] +
call sub_4B7BE8  +
test al al +
jz loc_4B404D  +
mov eax esi +
call unknown_libname_560  +
mov ecx eax +
mov edx offset dword_4B4060 +
mov eax [esp+4+var_4] +
call @System@TObject@GetInterface$qqrrx5_GUIDpv  +
test al al +
jnz loc_4B4059  +
mov ax [ebx] +
mov dx 0Dh +
call sub_4AF400  +
pop edx  +
pop esi  +
pop ebx  +
retn   +
***
push ecx  +
mov ebx edx +
mov esi eax +
mov ax [ebx] +
sub ax 1 +
jb loc_4B4090  +
jz loc_4B4099  +
sub ax 8 +
jz loc_4B40B8  +
sub ax 4000h +
jz loc_4B40C4  +
jmp loc_4B40D2  +
mov eax esi +
call unknown_libname_560  +
jmp loc_4B4106  +
cmp byte_4E6DC4 0 +
jz loc_4B40AF  +
mov dx 9 +
mov ax 1 +
call sub_4AF400  +
mov eax esi +
call unknown_libname_560  +
jmp loc_4B4106  +
mov eax esi +
mov edx [ebx+8] +
call @System@@IntfCopy$qqrr45System@_DelphiInterface$t17System@IInterface_x45System@_DelphiInterface$t17System@IInterface_  +
jmp loc_4B4106  +
mov eax esi +
mov edx [ebx+8] +
mov edx [edx] +
call @System@@IntfCopy$qqrr45System@_DelphiInterface$t17System@IInterface_x45System@_DelphiInterface$t17System@IInterface_  +
jmp loc_4B4106  +
mov edx esp +
mov ax [ebx] +
call sub_4B7BE8  +
test al al +
jz loc_4B40FA  +
mov eax esi +
call unknown_libname_560  +
mov ecx eax +
mov edx offset dword_4B410C +
mov eax [esp+4+var_4] +
call @System@TObject@GetInterface$qqrrx5_GUIDpv  +
test al al +
jnz loc_4B4106  +
mov ax [ebx] +
mov dx 9 +
call sub_4AF400  +
pop edx  +
pop esi  +
pop ebx  +
retn   +
***
call @System@DynArrayFromVariant$qqrrpvrx14System@Variantpv  +
or eax eax +
jnz locret_4B412A  +
jmp sub_4AF3AC  +
***
retn   +
***
push edi  +
mov edi ecx +
mov esi edx +
mov ebx eax +
test word ptr [ebx] 0BFE8h +
jz loc_4B4143  +
mov eax ebx +
call sub_4AFB90  +
cmp byte_4E6DCC 0 +
jz loc_4B415E  +
mov eax edi +
movsx eax al +
mov ax word_4E6DF8[eax*2] +
mov [ebx] ax +
jmp loc_4B4163  +
mov word ptr [ebx] 3 +
mov [ebx+8] esi +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov esi edx +
mov ebx eax +
test word ptr [ebx] 0BFE8h +
jz loc_4B4180  +
mov eax ebx +
call sub_4AFB90  +
mov word ptr [ebx] 3 +
mov [ebx+8] esi +
pop esi  +
pop ebx  +
retn   +
***
mov esi edx +
mov ebx eax +
test word ptr [ebx] 0BFE8h +
jz loc_4B41A0  +
mov eax ebx +
call sub_4AFB90  +
mov word ptr [ebx] 3 +
mov [ebx+8] esi +
pop esi  +
pop ebx  +
retn   +
***
mov ebx edx +
mov esi eax +
test word ptr [esi] 0BFE8h +
jz loc_4B41C0  +
mov eax esi +
call sub_4AFB90  +
mov word ptr [esi] 11h +
mov [esi+8] bl +
pop esi  +
pop ebx  +
retn   +
***
mov esi edx +
mov esi edx +
mov ebx eax +
test word ptr [ebx] 0BFE8h +
jz loc_4B4200  +
mov eax ebx +
call sub_4AFB90  +
mov word ptr [ebx] 13h +
mov [ebx+8] esi +
pop esi  +
pop ebx  +
retn   +
***
mov ebx edx +
mov esi eax +
test word ptr [esi] 0BFE8h +
jz loc_4B4220  +
mov eax esi +
call sub_4AFB90  +
mov word ptr [esi] 10h +
mov [esi+8] bl +
pop esi  +
pop ebx  +
retn   +
***
mov esi edx +
push ebx  +
mov ebx eax +
test word ptr [ebx] 0BFE8h +
jz loc_4B4260  +
mov eax ebx +
call sub_4AFB90  +
mov word ptr [ebx] 14h +
mov eax [ebp+arg_0] +
mov [ebx+8] eax +
mov eax [ebp+arg_4] +
mov [ebx+0Ch] eax +
pop ebx  +
pop ebp  +
retn 8  +
***
push ebx  +
push ebx  +
mov ebx eax +
test word ptr [ebx] 0BFE8h +
jz loc_4B42B0  +
mov eax ebx +
call sub_4AFB90  +
mov eax [ebp+arg_0] +
mov [ebx+8] eax +
mov eax [ebp+arg_4] +
mov [ebx+0Ch] eax +
mov word ptr [ebx] 5 +
pop ebx  +
pop ebp  +
retn 8  +
***
push ebx  +
mov ebx eax +
test word ptr [ebx] 0BFE8h +
jz loc_4B42DC  +
mov eax ebx +
call sub_4AFB90  +
mov eax [ebp+arg_0] +
mov [ebx+8] eax +
mov eax [ebp+arg_4] +
mov [ebx+0Ch] eax +
mov word ptr [ebx] 6 +
pop ebx  +
pop ebp  +
retn 8  +
***
push ebx  +
mov ebx eax +
test word ptr [ebx] 0BFE8h +
jz loc_4B4308  +
mov eax ebx +
call sub_4AFB90  +
mov eax [ebp+arg_0] +
mov [ebx+8] eax +
mov eax [ebp+arg_4] +
mov [ebx+0Ch] eax +
mov word ptr [ebx] 7 +
pop ebx  +
pop ebp  +
retn 8  +
***
mov ebx edx +
mov esi eax +
test word ptr [esi] 0BFE8h +
jz loc_4B4334  +
mov eax esi +
call sub_4AFB90  +
mov word ptr [esi] 0Bh +
cmp bl 1 +
cmc   +
sbb eax eax +
mov [esi+8] ax +
pop esi  +
pop ebx  +
retn   +
***
pop eax  +
mov word ptr [eax] 5 +
fstp  qword ptr [eax+8] +
wait   +
retn   +
***
pop eax  +
mov word ptr [eax] 7 +
fstp  qword ptr [eax+8] +
wait   +
retn   +
***
pop eax  +
mov word ptr [eax] 6 +
fistp  qword ptr [eax+8] +
wait   +
retn   +
***
mov esi edx +
mov ebx eax +
test word ptr [ebx] 0BFE8h +
jz loc_4B4398  +
mov eax ebx +
call sub_4AFB90  +
xor eax eax +
mov [ebx+8] eax +
mov word ptr [ebx] 100h +
lea eax [ebx+8] +
mov edx esi +
call unknown_libname_542  +
pop esi  +
pop ebx  +
retn   +
***
push 0  +
push ebx  +
push esi  +
mov esi edx +
mov ebx eax +
xor eax eax +
push ebp  +
push offset loc_4B43F3  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
lea eax [ebp+var_4] +
mov edx esi +
call unknown_libname_547  +
mov edx [ebp+var_4] +
mov eax ebx +
call @Variants@@VarFromLStr$qqrr8TVarDatax17System@AnsiString  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4B43FA  +
lea eax [ebp+var_4] +
call unknown_libname_540  +
retn   +
jmp unknown_libname_539  +
jmp loc_4B43EA  +
pop esi  +
pop ebx  +
pop ecx  +
pop ebp  +
retn   +
***
mov esi edx +
mov ebx eax +
test word ptr [ebx] 0BFE8h +
jz loc_4B4414  +
mov eax ebx +
call sub_4AFB90  +
xor eax eax +
mov [ebx+8] eax +
mov word ptr [ebx] 8 +
lea eax [ebx+8] +
push eax  +
mov ecx 7FFFFFFFh +
mov edx 1 +
mov eax esi +
call @System@@WStrCopy$qqrx17System@WideStringii  +
pop esi  +
pop ebx  +
retn   +
***
mov esi edx +
mov ebx eax +
test word ptr [ebx] 0BFE8h +
jz loc_4B444C  +
mov eax ebx +
call sub_4AFB90  +
xor eax eax +
mov [ebx+8] eax +
mov word ptr [ebx] 0Dh +
lea eax [ebx+8] +
mov edx esi +
call @System@@IntfCopy$qqrr45System@_DelphiInterface$t17System@IInterface_x45System@_DelphiInterface$t17System@IInterface_  +
pop esi  +
pop ebx  +
retn   +
***
mov esi edx +
mov ebx eax +
test word ptr [ebx] 0BFE8h +
jz loc_4B4478  +
mov eax ebx +
call sub_4AFB90  +
xor eax eax +
mov [ebx+8] eax +
mov word ptr [ebx] 9 +
lea eax [ebx+8] +
mov edx esi +
call @System@@IntfCopy$qqrr45System@_DelphiInterface$t17System@IInterface_x45System@_DelphiInterface$t17System@IInterface_  +
pop esi  +
pop ebx  +
retn   +
***
push eax  +
call sub_4B732C  +
pop eax  +
cmp word ptr [eax] 0 +
jnz locret_4B44A2  +
jmp sub_4AF3AC  +
***
retn   +
***
push 0  +
push ebx  +
push esi  +
mov esi edx +
mov ebx eax +
xor eax eax +
push ebp  +
push offset loc_4B44E7  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
lea eax [ebp+var_4] +
mov edx esi +
call unknown_libname_554  +
mov edx [ebp+var_4] +
mov eax ebx +
call @Variants@@VarFromWStr$qqrr8TVarDatax17System@WideString  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4B44EE  +
lea eax [ebp+var_4] +
call unknown_libname_552  +
retn   +
jmp unknown_libname_539  +
jmp loc_4B44DE  +
pop esi  +
pop ebx  +
pop ecx  +
pop ebp  +
retn   +
***
push 0  +
push ebx  +
push esi  +
mov esi edx +
mov ebx eax +
xor eax eax +
push ebp  +
push offset loc_4B4537  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
lea eax [ebp+var_4] +
mov edx esi +
call unknown_libname_547  +
mov edx [ebp+var_4] +
mov eax ebx +
call sub_4B44A4  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4B453E  +
lea eax [ebp+var_4] +
call unknown_libname_540  +
retn   +
jmp unknown_libname_539  +
jmp loc_4B452E  +
pop esi  +
pop ebx  +
pop ecx  +
pop ebp  +
retn   +
***
add esp 0FFFFFFF0h +
push ebx  +
push esi  +
mov esi edx +
mov ebx eax +
lea eax [ebp+pvarg] +
push eax  +
call VariantInit  +
xor eax eax +
push ebp  +
push offset loc_4B459A  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov edx esi +
lea eax [ebp+pvarg] +
call @Variants@@VarCopy$qqrr8TVarDatarx8TVarData  +
lea eax [ebp+pvarg] +
call dword_4F1BB0  +
lea edx [ebp+pvarg] +
mov eax ebx +
call @Variants@@VarCopy$qqrr8TVarDatarx8TVarData  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4B45A1  +
lea eax [ebp+pvarg] +
call @Variants@@VarClear$qqrr8TVarData  +
retn   +
jmp unknown_libname_539  +
jmp loc_4B4591  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
call sub_4B45B0  +
retn   +
***
push edi  +
xor ecx ecx +
push ecx  +
push ecx  +
push ecx  +
push ecx  +
push ebx  +
push esi  +
mov esi edx +
mov ebx eax +
xor eax eax +
push ebp  +
push offset loc_4B47A4  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
cmp word ptr [ebx] 100h +
jnz loc_4B4751  +
lea eax [ebp+var_4] +
mov edx ebx +
call sub_4BC1F8  +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_8] +
mov edx esi +
call sub_4BC1F8  +
mov edx [ebp+var_8] +
pop eax  +
call @System@@LStrCat$qqrv  +
mov edx [ebp+var_4] +
mov eax ebx +
call sub_4BC254  +
jmp loc_4B477C  +
lea eax [ebp+var_C] +
mov edx ebx +
call sub_4BC200  +
lea eax [ebp+var_C] +
push eax  +
lea eax [ebp+var_10] +
mov edx esi +
call sub_4BC200  +
mov edx [ebp+var_10] +
pop eax  +
call @System@@WStrCat$qqrr17System@WideStringx17System@WideString  +
mov edx [ebp+var_C] +
mov eax ebx +
call sub_4BC25C  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4B47AB  +
lea eax [ebp+var_10] +
mov edx 2 +
call @System@@WStrArrayClr$qqrpvi  +
lea eax [ebp+var_8] +
mov edx 2 +
call unknown_libname_541  +
retn   +
jmp unknown_libname_539  +
jmp loc_4B4789  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
add esp 0FFFFFFD8h +
push ebx  +
mov [ebp+var_E+2] ecx +
mov [ebp+var_8] edx +
mov [ebp+var_4] eax +
mov ebx [ebp+var_4] +
mov bx [ebx] +
mov eax ebx +
and ax 0FFFh +
cmp ax 10Fh +
jnb loc_4B48F6  +
lea edx [ebp+var_18] +
mov eax [ebp+var_8] +
mov ax [eax] +
call sub_4B7BE8  +
test al al +
jnz loc_4B47F6  +
call sub_4AF49C  +
jmp loc_4B4AF9  +
lea eax [ebp-0Eh] +
push eax  +
mov edx [ebp+var_4] +
mov ecx [ebp+var_E+2] +
mov eax [ebp+var_18] +
mov ebx [eax] +
call dword ptr [ebx+4]  +
test al al +
jz loc_4B4892  +
mov eax [ebp+var_4] +
mov ax [eax] +
cmp ax word ptr [ebp+var_E] +
jz loc_4B487B  +
lea eax [ebp+pvarg] +
push eax  +
call VariantInit  +
xor eax eax +
push ebp  +
push offset loc_4B4874  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
movzx ecx word ptr [ebp+var_E] +
mov edx [ebp+var_4] +
lea eax [ebp+pvarg] +
call sub_4B056C  +
lea edx [ebp+pvarg] +
mov eax [ebp+var_4] +
call @Variants@@VarCopy$qqrr8TVarDatarx8TVarData  +
mov eax [ebp+var_4] +
mov ax [eax] +
cmp ax word ptr [ebp+var_E] +
jz loc_4B485E  +
call sub_4AF3AC  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4B487B  +
lea eax [ebp+pvarg] +
call @Variants@@VarClear$qqrr8TVarData  +
retn   +
jmp unknown_libname_539  +
jmp loc_4B486B  +
mov eax [ebp+var_E+2] +
push eax  +
mov ecx [ebp+var_8] +
mov edx [ebp+var_4] +
mov eax [ebp+var_18] +
mov ebx [eax] +
call dword ptr [ebx+2Ch]  +
jmp loc_4B4AF9  +
lea eax [ebp+pvarg] +
push eax  +
call VariantInit  +
xor eax eax +
push ebp  +
push offset loc_4B48EF  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov ecx [ebp+var_4] +
movzx ecx word ptr [ecx] +
mov edx [ebp+var_8] +
lea eax [ebp+pvarg] +
call sub_4B056C  +
mov eax [ebp+var_4] +
mov ax [eax] +
cmp ax word ptr [ebp+pvarg.n1] +
jz loc_4B48CB  +
call sub_4AF3AC  +
lea edx [ebp+pvarg] +
mov eax [ebp+var_4] +
mov ecx [ebp+var_E+2] +
call sub_4B5524  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4B4AF9  +
lea eax [ebp+pvarg] +
call @Variants@@VarClear$qqrr8TVarData  +
retn   +
jmp unknown_libname_539  +
jmp loc_4B48E6  +
lea edx [ebp+var_14] +
mov eax [ebp+var_4] +
mov eax ebx +
call sub_4B7BE8  +
test al al +
jnz loc_4B490C  +
call sub_4AF49C  +
lea eax [ebp-10h] +
push eax  +
mov edx [ebp+var_8] +
mov ecx [ebp+var_E+2] +
mov eax [ebp+var_14] +
mov ebx [eax] +
call dword ptr [ebx+8]  +
test al al +
jz loc_4B49AD  +
mov eax [ebp+var_8] +
mov ax [eax] +
cmp ax [ebp+var_10] +
jz loc_4B4996  +
lea eax [ebp+pvarg] +
push eax  +
call VariantInit  +
xor eax eax +
push ebp  +
push offset loc_4B498F  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
movzx ecx [ebp+var_10] +
mov edx [ebp+var_8] +
lea eax [ebp+pvarg] +
call sub_4B056C  +
mov ax word ptr [ebp+pvarg.n1] +
cmp ax [ebp+var_10] +
jz loc_4B4967  +
call sub_4AF3AC  +
mov eax [ebp+var_E+2] +
push eax  +
lea ecx [ebp+pvarg] +
mov edx [ebp+var_4] +
mov eax [ebp+var_14] +
mov ebx [eax] +
call dword ptr [ebx+2Ch]  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4B4AF9  +
lea eax [ebp+pvarg] +
call @Variants@@VarClear$qqrr8TVarData  +
retn   +
jmp unknown_libname_539  +
jmp loc_4B4986  +
mov eax [ebp+var_E+2] +
push eax  +
mov ecx [ebp+var_8] +
mov edx [ebp+var_4] +
mov eax [ebp+var_14] +
mov ebx [eax] +
call dword ptr [ebx+2Ch]  +
jmp loc_4B4AF9  +
mov ebx [ebp+var_8] +
mov bx [ebx] +
mov eax ebx +
and ax 0FFFh +
cmp ax 10Fh +
jnb loc_4B4A44  +
mov eax [ebp+var_8] +
mov eax [ebp+var_4] +
cmp bx [eax] +
jz loc_4B4A31  +
lea eax [ebp+pvarg] +
push eax  +
call VariantInit  +
xor eax eax +
push ebp  +
push offset loc_4B4A2A  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov ecx [ebp+var_8] +
movzx ecx word ptr [ecx] +
mov edx [ebp+var_4] +
lea eax [ebp+pvarg] +
call sub_4B056C  +
lea edx [ebp+pvarg] +
mov eax [ebp+var_4] +
call @Variants@@VarCopy$qqrr8TVarDatarx8TVarData  +
mov eax [ebp+var_4] +
mov ax [eax] +
mov edx [ebp+var_8] +
cmp ax [edx] +
jz loc_4B4A14  +
call sub_4AF3AC  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4B4A31  +
lea eax [ebp+pvarg] +
call @Variants@@VarClear$qqrr8TVarData  +
retn   +
jmp unknown_libname_539  +
jmp loc_4B4A21  +
mov edx [ebp+var_8] +
mov eax [ebp+var_4] +
mov ecx [ebp+var_E+2] +
call sub_4B5524  +
jmp loc_4B4AF9  +
lea edx [ebp+var_18] +
mov eax [ebp+var_8] +
mov eax ebx +
call sub_4B7BE8  +
test al al +
jnz loc_4B4A5F  +
call sub_4AF49C  +
jmp loc_4B4AF9  +
lea eax [ebp+var_E] +
push eax  +
mov edx [ebp+var_4] +
mov ecx [ebp+var_E+2] +
mov eax [ebp+var_18] +
mov ebx [eax] +
call dword ptr [ebx+4]  +
test al al +
jz loc_4B4AF4  +
mov eax [ebp+var_4] +
mov ax [eax] +
cmp ax word ptr [ebp+var_E] +
jz loc_4B4AE0  +
lea eax [ebp+pvarg] +
push eax  +
call VariantInit  +
xor eax eax +
push ebp  +
push offset loc_4B4AD9  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
movzx ecx word ptr [ebp+var_E] +
mov edx [ebp+var_4] +
lea eax [ebp+pvarg] +
call sub_4B056C  +
lea edx [ebp+pvarg] +
mov eax [ebp+var_4] +
call @Variants@@VarCopy$qqrr8TVarDatarx8TVarData  +
mov eax [ebp+var_4] +
mov ax [eax] +
cmp ax word ptr [ebp+var_E] +
jz loc_4B4AC3  +
call sub_4AF3AC  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4B4AE0  +
lea eax [ebp+pvarg] +
call @Variants@@VarClear$qqrr8TVarData  +
retn   +
jmp unknown_libname_539  +
jmp loc_4B4AD0  +
mov eax [ebp+var_E+2] +
push eax  +
mov ecx [ebp+var_8] +
mov edx [ebp+var_4] +
mov eax [ebp+var_18] +
mov ebx [eax] +
call dword ptr [ebx+2Ch]  +
jmp loc_4B4AF9  +
call sub_4AF49C  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
add esp 0FFFFFFF0h +
push ebx  +
push esi  +
push edi  +
mov edi ecx +
mov esi edx +
mov ebx eax +
cmp word ptr [ebx] 101h +
jnz loc_4B4B1E  +
mov eax ebx +
call dword_4F1BB0  +
cmp word ptr [esi] 101h +
jnz loc_4B4B78  +
lea eax [ebp+pvarg] +
push eax  +
call VariantInit  +
xor eax eax +
push ebp  +
push offset loc_4B4B71  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov edx esi +
lea eax [ebp+pvarg] +
call @Variants@@VarCopy$qqrr8TVarDatarx8TVarData  +
lea eax [ebp+pvarg] +
call dword_4F1BB0  +
lea edx [ebp+pvarg] +
mov eax ebx +
mov ecx edi +
call sub_4B5524  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4B4B83  +
lea eax [ebp+pvarg] +
call @Variants@@VarClear$qqrr8TVarData  +
retn   +
jmp unknown_libname_539  +
jmp loc_4B4B68  +
mov edx esi +
mov eax ebx +
mov ecx edi +
call sub_4B5524  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
push ebx  +
add esp 0FFFFFFF0h +
push ebx  +
push esi  +
push edi  +
mov edi ecx +
mov esi edx +
mov ebx eax +
mov eax ebx +
call sub_4B1EF4  +
fstp  [ebp+var_8] +
wait   +
mov eax esi +
call sub_4B1EF4  +
fstp  [ebp+var_10] +
wait   +
sub edi 1 +
jb loc_4B4C08  +
jz loc_4B4C14  +
dec edi  +
jz loc_4B4C20  +
dec edi  +
jz loc_4B4C2C  +
jmp loc_4B4C38  +
fld  [ebp+var_8] +
fadd  [ebp+var_10] +
fstp  [ebp+var_8] +
wait   +
jmp loc_4B4C3D  +
fld  [ebp+var_8] +
fsub  [ebp+var_10] +
fstp  [ebp+var_8] +
wait   +
jmp loc_4B4C3D  +
fld  [ebp+var_8] +
fmul  [ebp+var_10] +
fstp  [ebp+var_8] +
wait   +
jmp loc_4B4C3D  +
fld  [ebp+var_8] +
fdiv  [ebp+var_10] +
fstp  [ebp+var_8] +
wait   +
jmp loc_4B4C3D  +
call sub_4AF49C  +
fld  [ebp+var_8] +
mov eax ebx +
call sub_4BC23C  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
add esp 0FFFFFFF0h +
add esp 0FFFFFFF4h +
push ebx  +
push esi  +
push edi  +
mov edi ecx +
mov esi edx +
mov ebx eax +
mov [ebp+var_9] 0 +
mov eax ebx +
call sub_4B0994  +
mov [ebp+var_4] eax +
mov eax esi +
call sub_4B0994  +
mov [ebp+var_8] eax +
mov eax edi +
cmp eax 0Ah +
ja loc_4B4D8A  +
jmp ds:off_4B4CE5[eax*4]  +
mov eax [ebp+var_4] +
mov edx [ebp+var_8] +
add eax edx +
seto [ebp+var_9]  +
mov [ebp+var_4] eax +
jmp loc_4B4D8F  +
mov eax [ebp+var_4] +
mov edx [ebp+var_8] +
sub eax edx +
seto [ebp+var_9]  +
mov [ebp+var_4] eax +
jmp loc_4B4D8F  +
mov eax [ebp+var_4] +
mov edx [ebp+var_8] +
imul  edx +
seto [ebp+var_9]  +
mov [ebp+var_4] eax +
jmp loc_4B4D8F  +
mov [ebp+var_9] 1 +
jmp loc_4B4D8F  +
mov eax [ebp+var_4] +
cdq   +
idiv  [ebp+var_8] +
mov [ebp+var_4] eax +
jmp loc_4B4D8F  +
mov eax [ebp+var_4] +
cdq   +
idiv  [ebp+var_8] +
mov [ebp+var_4] edx +
jmp loc_4B4D8F  +
mov ecx [ebp+var_8] +
shl [ebp+var_4] cl +
jmp loc_4B4D8F  +
mov ecx [ebp+var_8] +
shr [ebp+var_4] cl +
jmp loc_4B4D8F  +
mov eax [ebp+var_8] +
and [ebp+var_4] eax +
jmp loc_4B4D8F  +
mov eax [ebp+var_8] +
or [ebp+var_4] eax +
jmp loc_4B4D8F  +
mov eax [ebp+var_8] +
xor [ebp+var_4] eax +
jmp loc_4B4D8F  +
call sub_4AF49C  +
cmp [ebp+var_9] 0 +
jz loc_4B4DA2  +
mov edx esi +
mov eax ebx +
mov ecx edi +
call sub_4B4BD4  +
jmp loc_4B4DAE  +
mov eax ebx +
mov edx [ebp+var_4] +
mov cl 0FCh +
call sub_4BC218  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
add esp 0FFFFFFE0h +
mov esi edx +
mov ebx eax +
sub ecx 8 +
jz loc_4B4FA7  +
dec ecx  +
jz loc_4B4FED  +
jmp loc_4B5033  +
cmp word ptr [ebx] 1 +
jnz loc_4B4FD2  +
cmp word ptr [esi] 1 +
jz loc_4B4FBE  +
mov eax esi +
call sub_4B19E8  +
test al al +
jz loc_4B4FC7  +
mov eax ebx +
call @Variants@_16452  +
jmp loc_4B503A  +
mov edx esi +
mov eax ebx +
call @Variants@@VarCopy$qqrr8TVarDatarx8TVarData  +
jmp loc_4B503A  +
mov eax ebx +
call sub_4B19E8  +
test al al +
jz loc_4B503A  +
cmp word ptr [esi] 1 +
jnz loc_4B503A  +
mov eax ebx +
call @Variants@_16452  +
pop esi  +
pop ebx  +
retn   +
cmp word ptr [ebx] 1 +
jnz loc_4B5018  +
cmp word ptr [esi] 1 +
jz loc_4B5004  +
mov eax esi +
call sub_4B19E8  +
test al al +
jnz loc_4B500D  +
mov eax ebx +
call @Variants@_16452  +
jmp loc_4B503A  +
mov edx esi +
mov eax ebx +
call @Variants@@VarCopy$qqrr8TVarDatarx8TVarData  +
jmp loc_4B503A  +
mov eax ebx +
call sub_4B19E8  +
test al al +
jnz loc_4B503A  +
cmp word ptr [esi] 1 +
jnz loc_4B503A  +
mov eax ebx +
call @Variants@_16452  +
pop esi  +
pop ebx  +
retn   +
mov eax ebx +
call @Variants@_16452  +
pop esi  +
pop ebx  +
retn   +
***
push 0  +
push 0  +
push ebx  +
xor edx edx +
push ebp  +
push offset loc_4B50C9  +
push dword ptr fs:[edx]  +
mov fs:[edx] esp +
sub ecx 3 +
jz loc_4B5063  +
dec ecx  +
sub ecx 2 +
jb loc_4B5086  +
jmp loc_4B50A9  +
lea edx [ebp+var_4] +
mov eax off_4EA908 +
call @System@LoadResString$qqrp20System@TResStringRec  +
mov ecx [ebp+var_4] +
mov dl 1 +
mov eax ds:off_4A7F10 +
call sub_4AC17C  +
call @System@@RaiseExcept$qqrv  +
jmp loc_4B50AE  +
lea edx [ebp+var_8] +
mov eax off_4EA8F8 +
call @System@LoadResString$qqrp20System@TResStringRec  +
mov ecx [ebp+var_8] +
mov dl 1 +
mov eax ds:off_4A7D54 +
call sub_4AC17C  +
call @System@@RaiseExcept$qqrv  +
jmp loc_4B50AE  +
call @Variants@@VarClear$qqrr8TVarData  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4B50D0  +
lea eax [ebp+var_8] +
mov edx 2 +
call unknown_libname_541  +
retn   +
jmp unknown_libname_539  +
jmp loc_4B50BB  +
pop ebx  +
pop ecx  +
pop ecx  +
pop ebp  +
retn   +
***
add esp 0FFFFFFD8h +
push ebx  +
mov [ebp+var_C] ecx +
mov [ebp+var_8] edx +
mov [ebp+var_4] eax +
push ebp  +
mov eax [ebp+var_4] +
mov ax [eax] +
call sub_4B4B8C  +
pop ecx  +
movzx eax ax +
mov al byte_4E6DD4[eax] +
mov [ebp+var_D] al +
push ebp  +
mov eax [ebp+var_8] +
mov ax [eax] +
call sub_4B4B8C  +
pop ecx  +
movzx eax ax +
mov bl byte_4E6DD4[eax] +
xor eax eax +
mov al bl +
xor edx edx +
mov dl [ebp+var_D] +
lea edx [edx+edx*4] +
lea edx unk_4E6E04[edx*2] +
movzx eax byte ptr [edx+eax] +
cmp eax 9 +
ja loc_4B5513  +
jmp ds:off_4B513E[eax*4]  +
call sub_4AF49C  +
jmp loc_4B5518  +
mov edx [ebp+var_8] +
mov eax [ebp+var_4] +
mov ecx [ebp+var_C] +
call @Variants@_16581  +
jmp loc_4B5518  +
mov edx [ebp+var_8] +
mov eax [ebp+var_4] +
mov ecx [ebp+var_C] +
call @Variants@_16582  +
jmp loc_4B5518  +
cmp [ebp+var_C] 3 +
jnz loc_4B51AF  +
mov edx [ebp+var_8] +
mov eax [ebp+var_4] +
mov ecx [ebp+var_C] +
call sub_4B4BD4  +
jmp loc_4B5518  +
mov edx [ebp+var_8] +
mov eax [ebp+var_4] +
mov ecx [ebp+var_C] +
call @Variants@_16579  +
jmp loc_4B5518  +
cmp [ebp+var_C] 4 +
jl loc_4B51DB  +
mov edx [ebp+var_8] +
mov eax [ebp+var_4] +
mov ecx [ebp+var_C] +
call @Variants@_16579  +
jmp loc_4B5518  +
mov edx [ebp+var_8] +
mov eax [ebp+var_4] +
mov ecx [ebp+var_C] +
call sub_4B4BD4  +
jmp loc_4B5518  +
mov eax [ebp+var_C] +
sub eax 1 +
jb loc_4B5203  +
jz loc_4B5229  +
dec eax  +
sub eax 2 +
jb loc_4B524F  +
jmp loc_4B5375  +
mov eax [ebp+var_4] +
call sub_4B2BB4  +
fistp  [ebp+var_28] +
wait   +
mov eax [ebp+var_8] +
call sub_4B2BB4  +
fild  [ebp+var_28] +
faddp st(1) st +
mov eax [ebp+var_4] +
call sub_4BC24C  +
jmp loc_4B5518  +
mov eax [ebp+var_4] +
call sub_4B2BB4  +
fistp  [ebp+var_28] +
wait   +
mov eax [ebp+var_8] +
call sub_4B2BB4  +
fild  [ebp+var_28] +
fsubrp st(1) st +
mov eax [ebp+var_4] +
call sub_4BC24C  +
jmp loc_4B5518  +
cmp [ebp+var_D] 5 +
jnz loc_4B52B2  +
cmp bl 5 +
jnz loc_4B52B2  +
cmp [ebp+var_C] 2 +
jnz loc_4B528C  +
mov eax [ebp+var_4] +
call sub_4B2BB4  +
fistp  [ebp+var_28] +
wait   +
mov eax [ebp+var_8] +
call sub_4B2BB4  +
fild  [ebp+var_28] +
fmulp st(1) st +
fdiv  ds:flt_4B5520 +
mov eax [ebp+var_4] +
call sub_4BC24C  +
jmp loc_4B5518  +
mov eax [ebp+var_4] +
call sub_4B2BB4  +
fistp  [ebp+var_28] +
wait   +
mov eax [ebp+var_8] +
call sub_4B2BB4  +
fild  [ebp+var_28] +
fdivrp st(1) st +
mov eax [ebp+var_4] +
call sub_4BC23C  +
jmp loc_4B5518  +
cmp bl 5 +
jnz loc_4B5315  +
cmp [ebp+var_C] 2 +
jnz loc_4B52E8  +
mov eax [ebp+var_4] +
call sub_4B1EF4  +
fstp  [ebp+var_28] +
wait   +
mov eax [ebp+var_8] +
call sub_4B2BB4  +
fmul  [ebp+var_28] +
fistp  [ebp+var_18] +
wait   +
fild  [ebp+var_18] +
mov eax [ebp+var_4] +
call sub_4BC24C  +
jmp loc_4B5518  +
mov eax [ebp+var_4] +
call sub_4B2BB4  +
fistp  [ebp+var_28] +
wait   +
mov eax [ebp+var_8] +
call sub_4B2BB4  +
fild  [ebp+var_28] +
fdivrp st(1) st +
fstp  [ebp+var_20] +
wait   +
fld  [ebp+var_20] +
mov eax [ebp+var_4] +
call sub_4BC23C  +
jmp loc_4B5518  +
cmp [ebp+var_C] 2 +
jnz loc_4B5348  +
mov eax [ebp+var_4] +
call sub_4B2BB4  +
fistp  [ebp+var_28] +
wait   +
mov eax [ebp+var_8] +
call sub_4B1EF4  +
fild  [ebp+var_28] +
fmulp st(1) st +
fistp  [ebp+var_18] +
wait   +
fild  [ebp+var_18] +
mov eax [ebp+var_4] +
call sub_4BC24C  +
jmp loc_4B5518  +
mov eax [ebp+var_4] +
call sub_4B2BB4  +
fistp  [ebp+var_28] +
wait   +
mov eax [ebp+var_8] +
call sub_4B1EF4  +
fild  [ebp+var_28] +
fdivrp st(1) st +
fistp  [ebp+var_18] +
wait   +
fild  [ebp+var_18] +
mov eax [ebp+var_4] +
call sub_4BC24C  +
jmp loc_4B5518  +
mov edx [ebp+var_8] +
mov eax [ebp+var_4] +
mov ecx [ebp+var_C] +
call @Variants@_16579  +
jmp loc_4B5518  +
cmp [ebp+var_C] 0 +
jnz loc_4B539E  +
mov edx [ebp+var_8] +
mov eax [ebp+var_4] +
call @Variants@_16573  +
jmp loc_4B5518  +
cmp [ebp+var_C] 4 +
jl loc_4B53B7  +
mov edx [ebp+var_8] +
mov eax [ebp+var_4] +
mov ecx [ebp+var_C] +
call @Variants@_16579  +
jmp loc_4B5518  +
mov edx [ebp+var_8] +
mov eax [ebp+var_4] +
mov ecx [ebp+var_C] +
call sub_4B4BD4  +
jmp loc_4B5518  +
cmp [ebp+var_C] 8 +
jge loc_4B53FC  +
cmp [ebp+var_C] 4 +
jl loc_4B53E9  +
mov edx [ebp+var_8] +
mov eax [ebp+var_4] +
mov ecx [ebp+var_C] +
call @Variants@_16579  +
jmp loc_4B5518  +
mov edx [ebp+var_8] +
mov eax [ebp+var_4] +
mov ecx [ebp+var_C] +
call sub_4B4BD4  +
jmp loc_4B5518  +
mov eax [ebp+var_C] +
sub eax 8 +
jz loc_4B540F  +
dec eax  +
jz loc_4B543A  +
dec eax  +
jz loc_4B5465  +
jmp loc_4B5518  +
mov eax [ebp+var_4] +
call sub_4B19E8  +
test al al +
jz loc_4B5427  +
mov eax [ebp+var_8] +
call sub_4B19E8  +
test al al +
jnz loc_4B542B  +
xor edx edx +
jmp loc_4B542D  +
mov dl 1 +
mov eax [ebp+var_4] +
call sub_4BC234  +
jmp loc_4B5518  +
mov eax [ebp+var_4] +
call sub_4B19E8  +
test al al +
jnz loc_4B5456  +
mov eax [ebp+var_8] +
call sub_4B19E8  +
test al al +
jnz loc_4B5456  +
xor edx edx +
jmp loc_4B5458  +
mov dl 1 +
mov eax [ebp+var_4] +
call sub_4BC234  +
jmp loc_4B5518  +
mov eax [ebp+var_4] +
call sub_4B19E8  +
mov ebx eax +
mov eax [ebp+var_8] +
call sub_4B19E8  +
xor bl al +
mov edx ebx +
mov eax [ebp+var_4] +
call sub_4BC234  +
jmp loc_4B5518  +
mov eax [ebp+var_C] +
sub eax 1 +
jb loc_4B549A  +
jz loc_4B54AA  +
dec eax  +
sub eax 2 +
jb loc_4B54CD  +
jmp loc_4B54DD  +
mov edx [ebp+var_8] +
mov eax [ebp+var_4] +
mov ecx [ebp+var_C] +
call sub_4B4C50  +
jmp loc_4B5518  +
mov edx [ebp+var_8] +
mov eax [ebp+var_4] +
mov ecx [ebp+var_C] +
call sub_4B4C50  +
cmp [ebp+var_D] 8 +
jnz loc_4B5518  +
cmp bl 8 +
jnz loc_4B5518  +
mov eax [ebp+var_4] +
mov word ptr [eax] 5 +
jmp loc_4B5518  +
mov edx [ebp+var_8] +
mov eax [ebp+var_4] +
mov ecx [ebp+var_C] +
call sub_4B4BD4  +
jmp loc_4B5518  +
mov edx [ebp+var_8] +
mov eax [ebp+var_4] +
mov ecx [ebp+var_C] +
call @Variants@_16579  +
jmp loc_4B5518  +
cmp [ebp+var_C] 3 +
jnz loc_4B5503  +
mov edx [ebp+var_8] +
mov eax [ebp+var_4] +
mov ecx [ebp+var_C] +
call sub_4B4BD4  +
jmp loc_4B5518  +
mov edx [ebp+var_8] +
mov eax [ebp+var_4] +
mov ecx [ebp+var_C] +
call sub_4B4DB8  +
jmp loc_4B5518  +
call sub_4AF49C  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
push edi  +
mov edi ecx +
mov esi edx +
mov ebx eax +
mov ax [ebx] +
cmp ax 10Fh +
jnb loc_4B554A  +
cmp word ptr [esi] 10Fh +
jnb loc_4B554A  +
mov edx esi +
mov eax ebx +
mov ecx edi +
call sub_4B50D8  +
jmp loc_4B55AF  +
cmp ax 400Ch +
jnz loc_4B5566  +
mov edx ebx +
mov eax ebx +
call @Variants@@VarCopyNoInd$qqrr8TVarDatarx8TVarData  +
mov edx esi +
mov eax ebx +
mov ecx edi +
call sub_4B5524  +
jmp loc_4B55AF  +
cmp word ptr [esi] 400Ch +
jnz loc_4B557D  +
mov eax [esi+8] +
mov edx eax +
mov eax ebx +
mov ecx edi +
call sub_4B5524  +
jmp loc_4B55AF  +
mov ax [ebx] +
and ax 0FFFh +
cmp ax 10Fh +
jnb loc_4B55A4  +
mov ax [esi] +
and ax 0FFFh +
cmp ax 10Fh +
jnb loc_4B55A4  +
mov edx esi +
mov eax ebx +
mov ecx edi +
call sub_4B50D8  +
jmp loc_4B55AF  +
mov edx esi +
mov eax ebx +
mov ecx edi +
call sub_4B47B4  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
add esp 0FFFFFFDCh +
cmp al 1 +
jnz loc_4B5698  +
cmp dl 1 +
jnz loc_4B5695  +
mov al 1 +
jmp locret_4B569A  +
xor eax eax +
retn   +
mov al 2 +
retn   +
***
mov [esp+1+var_1] dl +
mov bl 1 +
mov edx ecx +
sub edx 0Eh +
jz loc_4B56BC  +
dec edx  +
jz loc_4B5702  +
dec edx  +
sub edx 4 +
jb loc_4B573F  +
jmp loc_4B5778  +
mov dl byte_4E6DBC +
sub dl 1 +
jb loc_4B56D2  +
jz loc_4B56DC  +
dec dl  +
jz loc_4B56E7  +
jmp loc_4B577D  +
call sub_4AF4F0  +
jmp loc_4B577D  +
mov bl byte_4E6E68 +
jmp loc_4B577D  +
cmp al 2 +
jnz loc_4B56F1  +
cmp [esp+1+var_1] 2 +
jz loc_4B56F5  +
xor eax eax +
jmp loc_4B56F7  +
mov al 1 +
and eax 7Fh +
mov bl byte_4E6E68[eax] +
jmp loc_4B577D  +
mov dl byte_4E6DBC +
sub dl 1 +
jb loc_4B5715  +
jz loc_4B571C  +
dec dl  +
jz loc_4B5724  +
jmp loc_4B577D  +
call sub_4AF4F0  +
jmp loc_4B577D  +
mov bl byte_4E6E6A +
jmp loc_4B577D  +
cmp al 2 +
jnz loc_4B5732  +
cmp [esp+1+var_1] 2 +
jnz loc_4B5732  +
xor eax eax +
jmp loc_4B5734  +
mov al 1 +
and eax 7Fh +
mov bl byte_4E6E6A[eax] +
jmp loc_4B577D  +
mov dl byte_4E6DC0 +
sub dl 1 +
jb loc_4B5752  +
jz loc_4B5759  +
dec dl  +
jz loc_4B5762  +
jmp loc_4B577D  +
call sub_4AF4F0  +
jmp loc_4B577D  +
mov bl byte_4E6E4C[ecx*2] +
jmp loc_4B577D  +
cmp al 2 +
jnz loc_4B5774  +
cmp [esp+1+var_1] 2 +
jnz loc_4B5770  +
mov bl 1 +
jmp loc_4B577D  +
xor ebx ebx +
jmp loc_4B577D  +
mov bl 2 +
jmp loc_4B577D  +
call sub_4AF49C  +
mov eax ebx +
pop edx  +
pop ebx  +
retn   +
***
and bx 0FFFh +
cmp edx eax +
jle loc_4B57AF  +
xor eax eax +
retn   +
cmp edx eax +
jge loc_4B57B7  +
mov al 2 +
jmp locret_4B57B9  +
mov al 1 +
retn   +
***
mov eax [ebp+arg_8] +
mov edx [ebp+arg_C] +
cmp edx [ebp+arg_4] +
jnz loc_4B57D1  +
cmp eax [ebp+arg_0] +
jnb loc_4B57D7  +
jmp loc_4B57D3  +
jge loc_4B57D7  +
xor eax eax +
jmp loc_4B57F1  +
mov eax [ebp+arg_8] +
mov edx [ebp+arg_C] +
cmp edx [ebp+arg_4] +
jnz loc_4B57E9  +
cmp eax [ebp+arg_0] +
jbe loc_4B57EF  +
jmp loc_4B57EB  +
jle loc_4B57EF  +
mov al 2 +
jmp loc_4B57F1  +
mov al 1 +
pop ebp  +
retn 10h  +
***
fld  [ebp+arg_8] +
fcomp  [ebp+arg_0] +
fnstsw  ax +
sahf   +
jnb loc_4B580A  +
xor eax eax +
jmp loc_4B581B  +
fld  [ebp+arg_8] +
fcomp  [ebp+arg_0] +
fnstsw  ax +
sahf   +
jbe loc_4B5819  +
mov al 2 +
jmp loc_4B581B  +
mov al 1 +
pop ebp  +
retn 10h  +
***
fld  [ebp+arg_8] +
fcomp  [ebp+arg_0] +
fnstsw  ax +
sahf   +
jnb loc_4B5832  +
xor eax eax +
jmp loc_4B5843  +
fld  [ebp+arg_8] +
fcomp  [ebp+arg_0] +
fnstsw  ax +
sahf   +
jbe loc_4B5841  +
mov al 2 +
jmp loc_4B5843  +
mov al 1 +
pop ebp  +
retn 10h  +
***
fild  [ebp+arg_8] +
fild  [ebp+arg_0] +
fcompp st(1) st +
fnstsw  ax +
sahf   +
jbe loc_4B585C  +
xor eax eax +
jmp loc_4B586F  +
fild  [ebp+arg_8] +
fild  [ebp+arg_0] +
fcompp st(1) st +
fnstsw  ax +
sahf   +
jnb loc_4B586D  +
mov al 2 +
jmp loc_4B586F  +
mov al 1 +
pop ebp  +
retn 10h  +
***
push 0  +
push 0  +
push ebx  +
mov ebx edx +
xor edx edx +
push ebp  +
push offset loc_4B58CF  +
push dword ptr fs:[edx]  +
mov fs:[edx] esp +
mov edx eax +
lea eax [ebp+var_4] +
call sub_4B3258  +
mov edx ebx +
lea eax [ebp+var_8] +
call sub_4B3258  +
mov edx [ebp+var_8] +
mov eax [ebp+var_4] +
call @Sysutils@CompareStr$qqrx17System@AnsiStringt1  +
xor edx edx +
call @Variants@_16591  +
mov ebx eax +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4B58D6  +
lea eax [ebp+var_8] +
mov edx 2 +
call unknown_libname_541  +
retn   +
jmp unknown_libname_539  +
jmp loc_4B58C1  +
mov eax ebx +
pop ebx  +
pop ecx  +
pop ecx  +
pop ebp  +
retn   +
***
push edi  +
push ebp  +
push ecx  +
mov ebp ecx +
mov edi edx +
mov esi eax +
mov [esp+1+var_1] 1 +
mov ax [esi] +
call @Variants@_16575  +
movzx eax ax +
mov bl byte_4E6DD4[eax] +
mov ax [edi] +
call @Variants@_16575  +
movzx eax ax +
mov al byte_4E6DD4[eax] +
xor edx edx +
mov dl al +
xor ecx ecx +
mov cl bl +
lea ecx [ecx+ecx*4] +
lea ecx unk_4E6E74[ecx*2] +
movzx edx byte ptr [ecx+edx] +
cmp edx 9 +
ja loc_4B5A69  +
jmp ds:off_4B5937[edx*4]  +
call sub_4AF49C  +
jmp loc_4B5A6E  +
mov edx eax +
mov eax ebx +
call sub_4B5688  +
mov [esp+1+var_1] al +
jmp loc_4B5A6E  +
mov ecx ebp +
mov edx eax +
mov eax ebx +
call sub_4B569C  +
mov [esp+1+var_1] al +
jmp loc_4B5A6E  +
mov eax edi +
call sub_4B0994  +
push eax  +
mov eax esi +
call sub_4B0994  +
pop edx  +
call @Variants@_16591  +
mov [esp+1+var_1] al +
jmp loc_4B5A6E  +
mov eax esi +
call sub_4B13F4  +
push edx  +
push eax  +
mov eax edi +
call sub_4B13F4  +
push edx  +
push eax  +
call @Variants@_16592  +
mov [esp+1+var_1] al +
jmp loc_4B5A6E  +
mov eax esi +
call sub_4B1EF4  +
add esp 0FFFFFFF8h +
fstp  [esp+9+var_A+1] +
wait   +
mov eax edi +
call sub_4B1EF4  +
add esp 0FFFFFFF8h +
fstp  [esp+11h+var_12+1] +
wait   +
call sub_4B57F8  +
mov [esp+1+var_1] al +
jmp loc_4B5A6E  +
mov eax esi +
call sub_4B2658  +
add esp 0FFFFFFF8h +
fstp  [esp+9+var_A+1] +
wait   +
mov eax edi +
call sub_4B2658  +
add esp 0FFFFFFF8h +
fstp  [esp+11h+var_12+1] +
wait   +
call sub_4B5820  +
mov [esp+1+var_1] al +
jmp loc_4B5A6E  +
mov eax esi +
call sub_4B2BB4  +
add esp 0FFFFFFF8h +
fistp  [esp+9+var_A+1] +
wait   +
mov eax edi +
call sub_4B2BB4  +
add esp 0FFFFFFF8h +
fistp  [esp+11h+var_12+1] +
wait   +
call sub_4B5848  +
mov [esp+1+var_1] al +
jmp loc_4B5A6E  +
mov edx edi +
mov eax esi +
call @Variants@_16596  +
mov [esp+1+var_1] al +
jmp loc_4B5A6E  +
mov eax edi +
call sub_4B19E8  +
and eax 7Fh +
push eax  +
mov eax esi +
call sub_4B19E8  +
and eax 7Fh +
pop edx  +
call @Variants@_16591  +
mov [esp+1+var_1] al +
jmp loc_4B5A6E  +
call sub_4AF49C  +
mov al [esp+1+var_1] +
pop edx  +
pop ebp  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
add esp 0FFFFFFD8h +
push ebx  +
push esi  +
mov [ebp+var_8] ecx +
mov [ebp+var_4] edx +
mov ebx eax +
mov byte ptr [ebp+var_C+3] 1 +
mov si [ebx] +
mov eax esi +
and ax 0FFFh +
cmp ax 10Fh +
jnb loc_4B5C18  +
test si si +
jnz loc_4B5AB5  +
xor edx edx +
mov al 1 +
call sub_4B5688  +
mov byte ptr [ebp+var_C+3] al +
jmp loc_4B5E8C  +
cmp si 1 +
jnz loc_4B5ACF  +
mov ecx [ebp+var_8] +
xor edx edx +
mov al 2 +
call sub_4B569C  +
mov byte ptr [ebp+var_C+3] al +
jmp loc_4B5E8C  +
lea edx [ebp+var_18] +
mov eax [ebp+var_4] +
mov ax [eax] +
call sub_4B7BE8  +
test al al +
jnz loc_4B5AEB  +
call sub_4AF49C  +
jmp loc_4B5E8C  +
lea eax [ebp-0Ch] +
push eax  +
mov edx ebx +
mov ecx 0Bh +
mov eax [ebp+var_18] +
mov esi [eax] +
call dword ptr [esi+4]  +
test al al +
jz loc_4B5BB4  +
mov ax [ebx] +
cmp ax word ptr [ebp+var_C] +
jz loc_4B5B8A  +
lea eax [ebp+pvarg] +
push eax  +
call VariantInit  +
xor eax eax +
push ebp  +
push offset loc_4B5B83  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
movzx ecx word ptr [ebp+var_C] +
mov edx ebx +
lea eax [ebp+pvarg] +
call sub_4B056C  +
mov ax word ptr [ebp+pvarg.n1] +
and ax 0FFFh +
cmp ax word ptr [ebp+var_C] +
jz loc_4B5B47  +
call sub_4AF3AC  +
mov eax [ebp+var_8] +
push eax  +
mov ecx [ebp+var_4] +
lea edx [ebp+pvarg] +
mov eax [ebp+var_18] +
mov ebx [eax] +
call dword ptr [ebx+34h]  +
and eax 7Fh +
mov edx [ebp+var_8] +
lea edx byte_4E6E68[edx*2] +
mov al [edx+eax-1Ch] +
mov byte ptr [ebp+var_C+3] al +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4B5E8C  +
lea eax [ebp+pvarg] +
call @Variants@@VarClear$qqrr8TVarData  +
retn   +
jmp unknown_libname_539  +
jmp loc_4B5B7A  +
mov eax [ebp+var_8] +
push eax  +
mov ecx [ebp+var_4] +
mov edx ebx +
mov eax [ebp+var_18] +
mov ebx [eax] +
call dword ptr [ebx+34h]  +
and eax 7Fh +
mov edx [ebp+var_8] +
lea edx byte_4E6E68[edx*2] +
mov al [edx+eax-1Ch] +
mov byte ptr [ebp+var_C+3] al +
jmp loc_4B5E8C  +
lea eax [ebp+pvarg] +
push eax  +
call VariantInit  +
xor eax eax +
push ebp  +
push offset loc_4B5C11  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
movzx ecx word ptr [ebx] +
mov edx [ebp+var_4] +
lea eax [ebp+pvarg] +
call sub_4B056C  +
mov ax word ptr [ebp+pvarg.n1] +
and ax 0FFFh +
cmp ax [ebx] +
jz loc_4B5BEB  +
call sub_4AF3AC  +
lea edx [ebp+pvarg] +
mov eax ebx +
mov ecx [ebp+var_8] +
call sub_4B58E0  +
mov byte ptr [ebp+var_C+3] al +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4B5E8C  +
lea eax [ebp+pvarg] +
call @Variants@@VarClear$qqrr8TVarData  +
retn   +
jmp unknown_libname_539  +
jmp loc_4B5C08  +
mov eax [ebp+var_4] +
mov ax [eax] +
test ax ax +
jnz loc_4B5C34  +
mov dl 1 +
xor eax eax +
call sub_4B5688  +
mov byte ptr [ebp+var_C+3] al +
jmp loc_4B5E8C  +
mov edx [ebp+var_4] +
cmp ax 1 +
jnz loc_4B5C51  +
mov ecx [ebp+var_8] +
mov dl 2 +
xor eax eax +
call sub_4B569C  +
mov byte ptr [ebp+var_C+3] al +
jmp loc_4B5E8C  +
lea edx [ebp+var_14] +
mov eax esi +
call sub_4B7BE8  +
test al al +
jnz loc_4B5C69  +
call sub_4AF49C  +
jmp loc_4B5E8C  +
lea eax [ebp-0Eh] +
push eax  +
mov edx [ebp+var_4] +
mov ecx 0Bh +
mov eax [ebp+var_14] +
mov esi [eax] +
call dword ptr [esi+8]  +
test al al +
jz loc_4B5D32  +
mov eax [ebp+var_4] +
mov ax [eax] +
cmp ax [ebp+var_E] +
jz loc_4B5D08  +
lea eax [ebp+pvarg] +
push eax  +
call VariantInit  +
xor eax eax +
push ebp  +
push offset loc_4B5D01  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
movzx ecx [ebp+var_E] +
mov edx [ebp+var_4] +
lea eax [ebp+pvarg] +
call sub_4B056C  +
mov ax word ptr [ebp+pvarg.n1] +
cmp ax [ebp+var_E] +
jz loc_4B5CC6  +
call sub_4AF3AC  +
mov eax [ebp+var_8] +
push eax  +
lea ecx [ebp+pvarg] +
mov edx ebx +
mov eax [ebp+var_14] +
mov ebx [eax] +
call dword ptr [ebx+34h]  +
and eax 7Fh +
mov edx [ebp+var_8] +
lea edx byte_4E6E68[edx*2] +
mov al [edx+eax-1Ch] +
mov byte ptr [ebp+var_C+3] al +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4B5E8C  +
lea eax [ebp+pvarg] +
call @Variants@@VarClear$qqrr8TVarData  +
retn   +
jmp unknown_libname_539  +
jmp loc_4B5CF8  +
mov eax [ebp+var_8] +
push eax  +
mov ecx [ebp+var_4] +
mov edx ebx +
mov eax [ebp+var_14] +
mov ebx [eax] +
call dword ptr [ebx+34h]  +
and eax 7Fh +
mov edx [ebp+var_8] +
lea edx byte_4E6E68[edx*2] +
mov al [edx+eax-1Ch] +
mov byte ptr [ebp+var_C+3] al +
jmp loc_4B5E8C  +
mov esi [ebp+var_4] +
mov si [esi] +
mov eax esi +
and ax 0FFFh +
cmp ax 10Fh +
jnb loc_4B5DAA  +
lea eax [ebp+pvarg] +
push eax  +
call VariantInit  +
xor eax eax +
push ebp  +
push offset loc_4B5DA3  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov ecx [ebp+var_4] +
movzx ecx word ptr [ecx] +
mov edx ebx +
lea eax [ebp+pvarg] +
call sub_4B056C  +
mov eax [ebp+var_4] +
mov ax [eax] +
cmp ax word ptr [ebp+pvarg.n1] +
jz loc_4B5D7C  +
call sub_4AF3AC  +
mov edx [ebp+var_4] +
lea eax [ebp+pvarg] +
mov ecx [ebp+var_8] +
call sub_4B58E0  +
mov byte ptr [ebp+var_C+3] al +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4B5E8C  +
lea eax [ebp+pvarg] +
call @Variants@@VarClear$qqrr8TVarData  +
retn   +
jmp unknown_libname_539  +
jmp loc_4B5D9A  +
lea edx [ebp+var_18] +
mov eax [ebp+var_4] +
mov eax esi +
call sub_4B7BE8  +
test al al +
jnz loc_4B5DC5  +
call sub_4AF49C  +
jmp loc_4B5E8C  +
lea eax [ebp+var_C] +
push eax  +
mov edx ebx +
mov ecx 0Bh +
mov eax [ebp+var_18] +
mov esi [eax] +
call dword ptr [esi+4]  +
test al al +
jz loc_4B5E87  +
mov ax [ebx] +
cmp ax word ptr [ebp+var_C] +
jz loc_4B5E60  +
lea eax [ebp+pvarg] +
push eax  +
call VariantInit  +
xor eax eax +
push ebp  +
push offset loc_4B5E59  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
movzx ecx word ptr [ebp+var_C] +
mov edx ebx +
lea eax [ebp+pvarg] +
call sub_4B056C  +
mov ax word ptr [ebp+pvarg.n1] +
cmp ax word ptr [ebp+var_C] +
jz loc_4B5E1D  +
call sub_4AF3AC  +
mov eax [ebp+var_8] +
push eax  +
mov ecx [ebp+var_4] +
lea edx [ebp+pvarg] +
mov eax [ebp+var_18] +
mov ebx [eax] +
call dword ptr [ebx+34h]  +
and eax 7Fh +
mov edx [ebp+var_8] +
lea edx byte_4E6E68[edx*2] +
mov al [edx+eax-1Ch] +
mov byte ptr [ebp+var_C+3] al +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4B5E8C  +
lea eax [ebp+pvarg] +
call @Variants@@VarClear$qqrr8TVarData  +
retn   +
jmp unknown_libname_539  +
jmp loc_4B5E50  +
mov eax [ebp+var_8] +
push eax  +
mov ecx [ebp+var_4] +
mov edx ebx +
mov eax [ebp+var_18] +
mov ebx [eax] +
call dword ptr [ebx+34h]  +
and eax 7Fh +
mov edx [ebp+var_8] +
lea edx byte_4E6E68[edx*2] +
mov al [edx+eax-1Ch] +
mov byte ptr [ebp+var_C+3] al +
jmp loc_4B5E8C  +
call sub_4AF49C  +
mov al byte ptr [ebp+var_C+3] +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
cmp word ptr [eax] 101h +
jz loc_4B5EA8  +
cmp word ptr [edx] 101h +
jnz loc_4B5EB0  +
call @Variants@_16587  +
pop esi  +
pop ebx  +
retn   +
mov si [eax] +
cmp si 10Fh +
jnb loc_4B5EC8  +
cmp word ptr [edx] 10Fh +
jnb loc_4B5EC8  +
call sub_4B58E0  +
jmp loc_4B5F14  +
cmp si 400Ch +
jnz loc_4B5ED9  +
mov eax [eax+8] +
call sub_4B5E98  +
jmp loc_4B5F14  +
cmp word ptr [edx] 400Ch +
jnz loc_4B5EEA  +
mov edx [edx+8] +
call sub_4B5E98  +
jmp loc_4B5F14  +
mov bx [eax] +
and bx 0FFFh +
cmp bx 10Fh +
jnb loc_4B5F0F  +
mov bx [edx] +
and bx 0FFFh +
cmp bx 10Fh +
jnb loc_4B5F0F  +
call sub_4B58E0  +
jmp loc_4B5F14  +
call sub_4B5A78  +
pop esi  +
pop ebx  +
retn   +
***
mov eax ebx +
call sub_4B1EF4  +
fchs   +
mov eax ebx +
call sub_4BC23C  +
pop ebx  +
retn   +
***
push ebx  +
push ebx  +
call sub_4AE894  +
call unknown_libname_488  +
pop ebx  +
retn   +
***
xor ecx ecx +
push ecx  +
push ecx  +
push ecx  +
push ecx  +
mov esi edx +
mov ebx eax +
mov edx ebx +
mov eax esp +
call sub_4BC1C8  +
mov eax esp +
call sub_4BC280  +
mov edx esp +
mov eax esi +
call sub_4BC1C8  +
add esp 10h +
pop esi  +
pop ebx  +
retn   +
***
and eax 0FFh +
neg ax  +
mov [edx+8] ax +
mov word ptr [edx] 2 +
retn   +
***
movzx eax ax +
neg eax  +
mov [edx+8] eax +
mov word ptr [edx] 3 +
retn   +
***
mov ebx eax +
test ebx 80000000h +
jz loc_4B5FC1  +
mov eax ebx +
xor edx edx +
neg eax  +
adc edx 0 +
neg edx  +
mov [ecx+8] eax +
mov [ecx+0Ch] edx +
mov word ptr [ecx] 14h +
pop ebx  +
retn   +
neg ebx  +
mov [ecx+8] ebx +
mov word ptr [ecx] 3 +
pop ebx  +
retn   +
***
mov eax ebx +
push ecx  +
mov esi eax +
mov edx esp +
mov ax [esi] +
call sub_4B7BE8  +
mov ebx eax +
test bl bl +
jz loc_4B6008  +
mov edx esi +
mov ecx 0Ch +
mov eax [esp+4+var_4] +
mov esi [eax] +
call dword ptr [esi+30h]  +
mov eax ebx +
pop edx  +
pop esi  +
pop ebx  +
retn   +
***
mov ax [ebx] +
movzx edx ax +
cmp edx 14h +
ja loc_4B613B  +
jmp ds:off_4B6029[edx*4]  +
mov edx ebx +
xor eax eax +
call sub_4B5F78  +
pop ebx  +
retn   +
neg word ptr [ebx+8]  +
pop ebx  +
retn   +
neg dword ptr [ebx+8]  +
pop ebx  +
retn   +
fld  dword ptr [ebx+8] +
fchs   +
fstp  dword ptr [ebx+8] +
wait   +
pop ebx  +
retn   +
fld  qword ptr [ebx+8] +
fchs   +
fstp  qword ptr [ebx+8] +
wait   +
pop ebx  +
retn   +
fild  qword ptr [ebx+8] +
fchs   +
fistp  qword ptr [ebx+8] +
wait   +
pop ebx  +
retn   +
fld  qword ptr [ebx+8] +
fchs   +
fstp  qword ptr [ebx+8] +
wait   +
pop ebx  +
retn   +
mov eax ebx +
call @Variants@_16601  +
pop ebx  +
retn   +
cmp word ptr [ebx+8] 1 +
sbb eax eax +
inc eax  +
cmp al 1 +
setz al  +
and eax 7Fh +
mov al byte_4E6ED8[eax] +
mov edx ebx +
call sub_4B5F78  +
pop ebx  +
retn   +
neg byte ptr [ebx+8]  +
pop ebx  +
retn   +
mov edx ebx +
mov al [ebx+8] +
call sub_4B5F78  +
pop ebx  +
retn   +
mov edx ebx +
mov ax [ebx+8] +
call @Variants@_16605  +
pop ebx  +
retn   +
mov edx ebx +
mov eax [ebx+8] +
call @Variants@_16606  +
pop ebx  +
retn   +
mov eax [ebx+8] +
mov edx [ebx+0Ch] +
neg eax  +
adc edx 0 +
neg edx  +
mov [ebx+8] eax +
mov [ebx+0Ch] edx +
pop ebx  +
retn   +
mov edx ebx +
mov eax [ebx+8] +
call sub_4B5F4C  +
pop ebx  +
retn   +
mov eax ebx +
call sub_4B5F38  +
pop ebx  +
retn   +
mov edx eax +
sub dx 100h +
jz loc_4B614B  +
dec dx  +
jz loc_4B6157  +
jmp loc_4B6163  +
mov eax ebx +
call @Variants@_16601  +
jmp loc_4B62FB  +
mov eax ebx +
call unknown_libname_500  +
jmp loc_4B62FB  +
test ah 40h +
jz loc_4B62E9  +
movzx eax ax +
and eax 0FFFFBFFFh +
cmp eax 14h +
ja loc_4B62E0  +
jmp ds:off_4B6184[eax*4]  +
mov eax ebx +
mov edx [ebx+8] +
movsx edx word ptr [edx] +
neg edx  +
mov cl 0FCh +
call sub_4BC218  +
jmp loc_4B62FB  +
mov eax ebx +
mov edx [ebx+8] +
mov edx [edx] +
neg edx  +
mov cl 0FCh +
call sub_4BC218  +
jmp loc_4B62FB  +
mov eax [ebx+8] +
fld  dword ptr [eax] +
fchs   +
mov eax ebx +
call sub_4BC23C  +
jmp loc_4B62FB  +
mov eax [ebx+8] +
fld  qword ptr [eax] +
fchs   +
mov eax ebx +
call sub_4BC23C  +
jmp loc_4B62FB  +
mov eax [ebx+8] +
fild  qword ptr [eax] +
fchs   +
mov eax ebx +
call sub_4BC24C  +
jmp loc_4B62FB  +
mov eax [ebx+8] +
fld  qword ptr [eax] +
fchs   +
mov eax ebx +
call sub_4BC23C  +
jmp loc_4B62FB  +
mov eax ebx +
call @Variants@_16601  +
jmp loc_4B62FB  +
mov eax [ebx+8] +
cmp word ptr [eax] 1 +
sbb eax eax +
inc eax  +
cmp al 1 +
setz al  +
and eax 7Fh +
mov al byte_4E6ED8[eax] +
mov edx ebx +
call sub_4B5F78  +
jmp loc_4B62FB  +
mov eax ebx +
mov edx [ebx+8] +
movsx edx byte ptr [edx] +
neg edx  +
mov cl 0FCh +
call sub_4BC218  +
jmp loc_4B62FB  +
mov edx ebx +
mov eax [ebx+8] +
mov al [eax] +
call sub_4B5F78  +
jmp loc_4B62FB  +
mov edx ebx +
mov eax [ebx+8] +
mov ax [eax] +
call @Variants@_16605  +
jmp loc_4B62FB  +
mov edx ebx +
mov eax [ebx+8] +
mov eax [eax] +
call @Variants@_16606  +
jmp loc_4B62FB  +
mov eax [ebx+8] +
mov edx [eax+4] +
mov eax [eax] +
neg eax  +
adc edx 0 +
neg edx  +
push edx  +
push eax  +
mov eax ebx +
call sub_4BC220  +
jmp loc_4B62FB  +
mov edx ebx +
mov eax [ebx+8] +
call sub_4B5F4C  +
jmp loc_4B62FB  +
mov eax ebx +
call sub_4B5F38  +
jmp loc_4B62FB  +
mov eax ebx +
call sub_4B5FE4  +
test al al +
jnz loc_4B62FB  +
mov eax ebx +
call sub_4B5F38  +
pop ebx  +
retn   +
***
push 0  +
push 0  +
push 0  +
push ebx  +
mov ebx eax +
xor eax eax +
push ebp  +
push offset loc_4B63C3  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov edx ebx +
lea eax [ebp+var_4] +
call sub_4B39CC  +
lea eax [ebp+var_8] +
push eax  +
push 0  +
push 400h  +
mov eax [ebp+var_4] +
push eax  +
call sub_4AE8C4  +
mov edx eax +
sub edx 80020005h +
jz loc_4B635A  +
sub edx 7FFDFFFBh +
jnz loc_4B6399  +
mov eax ebx +
mov edx [ebp+var_8] +
not edx  +
mov cl 0FCh +
call sub_4BC218  +
jmp loc_4B63A5  +
lea eax [ebp+var_C] +
mov edx [ebp+var_4] +
call unknown_libname_548  +
mov eax [ebp+var_C] +
lea edx [ebp+var_8] +
call sub_4A8CD4  +
test al al +
jz loc_4B6384  +
mov eax ebx +
mov edx [ebp+var_8] +
not edx  +
mov cl 0FCh +
call sub_4BC218  +
jmp loc_4B63A5  +
mov eax ebx +
call sub_4B19E8  +
mov edx eax +
xor dl 1 +
mov eax ebx +
call sub_4BC234  +
jmp loc_4B63A5  +
mov dx [ebx] +
mov cx 3 +
call @Variants@VarResultCheck$qqrlusus  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4B63CA  +
lea eax [ebp+var_C] +
call unknown_libname_540  +
lea eax [ebp+var_4] +
call unknown_libname_552  +
retn   +
jmp unknown_libname_539  +
jmp loc_4B63B2  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
mov ebx eax +
mov eax ebx +
call sub_4B13F4  +
mov [esp+8+var_8] eax +
mov [esp+8+var_4] edx +
cmp [esp+8+var_4] 0 +
jnz loc_4B63F6  +
cmp [esp+8+var_8] 7FFFFFFFh +
ja loc_4B641E  +
jmp loc_4B63F8  +
jg loc_4B641E  +
cmp [esp+8+var_4] 0FFFFFFFFh +
jnz loc_4B640A  +
cmp [esp+8+var_8] 80000000h +
jb loc_4B641E  +
jmp loc_4B640C  +
jl loc_4B641E  +
mov eax [esp+8+var_8] +
mov edx eax +
not edx  +
mov eax ebx +
mov cl 0FCh +
call sub_4BC218  +
jmp loc_4B6432  +
mov eax [esp+8+var_8] +
mov edx [esp+8+var_4] +
not eax  +
not edx  +
push edx  +
push eax  +
mov eax ebx +
call sub_4BC220  +
pop ecx  +
pop edx  +
pop ebx  +
retn   +
***
push ebx  +
push ebx  +
call sub_4AE8AC  +
call unknown_libname_488  +
pop ebx  +
retn   +
***
xor ecx ecx +
push ecx  +
push ecx  +
push ecx  +
push ecx  +
mov esi edx +
mov ebx eax +
mov edx ebx +
mov eax esp +
call sub_4BC1C8  +
mov eax esp +
call sub_4BC288  +
mov edx esp +
mov eax esi +
call sub_4BC1C8  +
add esp 10h +
pop esi  +
pop ebx  +
retn   +
***
mov eax ebx +
push ecx  +
mov esi eax +
mov edx esp +
mov ax [esi] +
call sub_4B7BE8  +
mov ebx eax +
test bl bl +
jz loc_4B64B0  +
mov edx esi +
mov ecx 0Dh +
mov eax [esp+4+var_4] +
mov esi [eax] +
call dword ptr [esi+30h]  +
mov eax ebx +
pop edx  +
pop esi  +
pop ebx  +
retn   +
***
mov ax [ebx] +
cmp word ptr [eax] 8 +
jb locret_4B6758  +
push dword ptr [eax+0Ch]  +
push dword ptr [eax+8]  +
push dword ptr [eax+4]  +
push dword ptr [eax]  +
mov word ptr [eax] 0 +
mov edx esp +
call @Variants@@VarCopy$qqrr8TVarDatarx8TVarData  +
add esp 10h +
retn   +
***
add esp 0FFFFFDF8h +
push ebx  +
push esi  +
push edi  +
xor ecx ecx +
mov [ebp+var_208] ecx +
mov esi edx +
mov ebx eax +
xor eax eax +
push ebp  +
push offset loc_4B69E2  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov edi ebx +
and di 0FFFh +
cmp di 14h +
ja loc_4B6905  +
mov eax esi +
movzx edx di +
mov edx off_4E6EDC[edx*4] +
call unknown_libname_542  +
jmp loc_4B69A3  +
cmp bx 100h +
jnz loc_4B691D  +
mov eax esi +
mov edx offset _str_String.Text +
call unknown_libname_542  +
jmp loc_4B69A3  +
cmp bx 101h +
jnz loc_4B6932  +
mov eax esi +
mov edx offset _str_Any.Text +
call unknown_libname_542  +
jmp loc_4B69A3  +
lea edx [ebp+var_4] +
mov eax ebx +
call sub_4B7BE8  +
test al al +
jz loc_4B697B  +
lea eax [ebp+var_104] +
push eax  +
lea edx [ebp+var_204] +
mov eax [ebp+var_4] +
mov eax [eax] +
call @System@TObject@ClassName$qqrp17System@TMetaClass  +
lea eax [ebp+var_204] +
mov ecx 7FFFFFFFh +
mov edx 2 +
call @System@@Copy$qqrv  +
lea edx [ebp+var_104] +
mov eax esi +
call unknown_libname_547  +
jmp loc_4B69A3  +
lea ecx [ebp+var_208] +
movzx eax di +
mov edx 4 +
call @Sysutils@IntToHex$qqrii  +
mov ecx [ebp+var_208] +
mov edx off_4EA8C8 +
mov edx [edx] +
mov eax esi +
call @System@@LStrCat3$qqrv  +
test bh 20h +
jz loc_4B69B6  +
mov ecx [esi] +
mov eax esi +
mov edx offset _str_Array_.Text +
call @System@@LStrCat3$qqrv  +
test bh 40h +
jz loc_4B69C9  +
mov ecx [esi] +
mov eax esi +
mov edx offset _str_ByRef_.Text +
call @System@@LStrCat3$qqrv  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4B69E9  +
lea eax [ebp+var_208] +
call unknown_libname_540  +
retn   +
jmp unknown_libname_539  +
jmp loc_4B69D6  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
jmp loc_4B6A35  +
mov eax [eax+8] +
cmp word ptr [eax] 400Ch +
jz loc_4B6A32  +
retn   +
***
push edi  +
add esp 0FFFFFFECh +
mov ebx eax +
mov eax ebx +
call @Variants@FindVarData$qqrrx14System@Variant  +
mov esi eax +
lea edi [esp+14h+var_10] +
movs   +
movs   +
movs   +
movs   +
mov bx word ptr [esp+14h+var_10] +
cmp bx 10Fh +
jnb loc_4B6A8D  +
cmp word ptr [esp+14h+var_10] 0 +
jz loc_4B6A89  +
mov ax word ptr [esp+14h+var_10] +
cmp ax 9 +
jz loc_4B6A7E  +
cmp ax 0Dh +
jnz loc_4B6A85  +
cmp [esp+14h+var_8] 0 +
jz loc_4B6A89  +
xor eax eax +
jmp loc_4B6AAA  +
mov al 1 +
jmp loc_4B6AAA  +
mov edx esp +
mov eax ebx +
call sub_4B7BE8  +
test al al +
jz loc_4B6AA8  +
lea edx [esp+14h+var_10] +
mov eax [esp+14h+var_14] +
mov ecx [eax] +
call dword ptr [ecx+14h]  +
jmp loc_4B6AAA  +
xor eax eax +
add esp 14h +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
call sub_4B7BE8  +
pop edx  +
retn   +
***
mov eax ebx +
call @Variants@FindVarData$qqrrx14System@Variant  +
cmp word ptr [eax] 1 +
setz al  +
pop ebx  +
retn   +
***
mov esi edx +
push edi  +
push edi  +
add esp 0FFFFFFE0h +
mov esi edx +
mov ebx eax +
mov eax ebx +
call @Variants@FindVarData$qqrrx14System@Variant  +
push esi  +
mov esi eax +
lea edi [esp+24h+var_20] +
movs   +
movs   +
movs   +
movs   +
pop esi  +
mov eax esi +
call @Variants@FindVarData$qqrrx14System@Variant  +
push esi  +
mov esi eax +
lea edi [esp+24h+var_10] +
movs   +
movs   +
movs   +
movs   +
pop esi  +
mov ax word ptr [esp+20h+var_20] +
test ax ax +
jnz loc_4B6B5C  +
cmp word ptr [esp+20h+var_10] 0 +
setz al  +
jmp loc_4B6B88  +
cmp ax 1 +
jnz loc_4B6B6D  +
cmp word ptr [esp+20h+var_10] 1 +
setz al  +
jmp loc_4B6B88  +
mov ax word ptr [esp+20h+var_10] +
sub ax 2 +
jnb loc_4B6B7C  +
xor eax eax +
jmp loc_4B6B88  +
mov eax ebx +
mov edx esi +
call sub_4BC274  +
setz al  +
add esp 20h +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov esi edx +
mov edx 80020004h +
call @Variants@_16653  +
retn   +
***
push 0  +
push ebx  +
push esi  +
push edi  +
mov edi ecx +
mov esi edx +
mov ebx eax +
xor eax eax +
push ebp  +
push offset loc_4B6C06  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
lea edx [ebp+var_4] +
mov eax esi +
call @Variants@VarToStr$qqrrx14System@Variant  +
mov eax ebx +
mov ecx edi +
mov edx [ebp+var_4] +
call unknown_libname_551  +
call @System@@Flush$qqrr15System@TTextRec  +
call @@_IOTest$qqrv  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4B6C0D  +
lea eax [ebp+var_4] +
call unknown_libname_540  +
retn   +
jmp unknown_libname_539  +
jmp loc_4B6BFD  +
mov eax ebx +
pop edi  +
pop esi  +
pop ebx  +
pop ecx  +
pop ebp  +
retn   +
***
cmp bx 400Ch +
jnz loc_4B6C37  +
mov eax [eax+8] +
call sub_4B6C20  +
mov ebx eax +
jmp loc_4B6C5F  +
mov [edx] bx +
test byte ptr [edx+1] 20h +
setnz bl  +
test bl bl +
jz loc_4B6C5B  +
test byte ptr [edx+1] 40h +
jz loc_4B6C54  +
mov eax [eax+8] +
mov eax [eax] +
mov [ecx] eax +
jmp loc_4B6C5F  +
mov eax [eax+8] +
mov [ecx] eax +
jmp loc_4B6C5F  +
xor eax eax +
mov [ecx] eax +
mov eax ebx +
pop ebx  +
retn   +
***
add esp 0FFFFFDF8h +
add esp 0FFFFFFF0h +
mov esi edx +
mov ebx eax +
lea ecx [esp+10h+psa] +
lea edx [esp+10h+var_8] +
mov eax ebx +
call sub_4B6C20  +
test al al +
jnz loc_4B6D32  +
mov eax 80070057h +
call unknown_libname_488  +
mov eax [esp+10h+psa] +
movzx edx word ptr [eax] +
mov edx [eax+edx*8+0Ch] +
mov [esp+10h+var_C] edx +
sub esi edx +
inc esi  +
mov [esp+10h+var_10] esi +
push esp  +
mov eax [esp+14h+psa] +
push eax  +
call SafeArrayRedim  +
test eax eax +
jz loc_4B6D5B  +
call sub_4AF5E0  +
add esp 10h +
pop esi  +
pop ebx  +
retn   +
***
mov ebx eax +
mov ebx eax +
lea ecx [esp+8+var_4] +
mov edx esp +
mov eax ebx +
call sub_4B6C20  +
test al al +
jz loc_4B6DAC  +
mov eax [esp+8+var_4] +
movzx eax word ptr [eax] +
jmp loc_4B6DAE  +
xor eax eax +
pop ecx  +
pop edx  +
pop ebx  +
retn   +
***
push ecx  +
mov esi edx +
mov ebx eax +
push esp  +
push esi  +
mov eax ebx +
call @Variants@VarArrayAsPSafeArray$qqrrx14System@Variant  +
push eax  +
call SafeArrayGetLBound  +
call unknown_libname_488  +
mov eax [esp+4+var_4] +
pop edx  +
pop esi  +
pop ebx  +
retn   +
***
push ecx  +
mov esi edx +
mov ebx eax +
push esp  +
push esi  +
mov eax ebx +
call @Variants@VarArrayAsPSafeArray$qqrrx14System@Variant  +
push eax  +
call SafeArrayGetUBound  +
call unknown_libname_488  +
mov eax [esp+4+var_4] +
pop edx  +
pop esi  +
pop ebx  +
retn   +
***
mov dl 1 +
add esp 0FFFFFFF8h +
test dl dl +
jz loc_4B6E19  +
lea ecx [esp+8+var_4] +
mov edx esp +
call sub_4B6C20  +
pop ecx  +
pop edx  +
retn   +
mov ax [eax] +
and ax 2000h +
cmp ax 2000h +
setz al  +
pop ecx  +
pop edx  +
retn   +
***
mov edx eax +
mov ebx eax +
movzx esi bx +
and esi 0FFFFBFFFh +
mov eax esi +
sub eax 16h +
jnb loc_4B6E70  +
lea eax [esi+esi*2] +
mov edx off_4EAAE0 +
cmp byte ptr [edx+eax*4+1] 0 +
jnz loc_4B6E80  +
mov eax ebx +
call unknown_libname_503  +
test al al +
jnz loc_4B6E80  +
xor eax eax +
pop esi  +
pop ebx  +
retn   +
mov al 1 +
pop esi  +
pop ebx  +
retn   +
***
add esp 0FFFFFFE4h +
push ebx  +
mov ebx ecx +
inc ebx  +
jle loc_4B6F63  +
push dword ptr [edx+ecx*4]  +
dec ecx  +
jns loc_4B6F5D  +
push ebx  +
push eax  +
mov eax [ebp+arg_0] +
push eax  +
call sub_4B6E88  +
lea esp [esp+ebx*4+0Ch] +
pop ebx  +
pop ebp  +
retn 4  +
***
add esp 0FFFFFFDCh +
push ebx  +
push esi  +
mov esi [ebp+arg_4] +
lea ecx [ebp+psa] +
lea edx [ebp+pvarg] +
mov eax [ebp+arg_0] +
call sub_4B6C20  +
test al al +
jnz loc_4B6F9F  +
mov eax 80070057h +
call unknown_libname_488  +
lea ecx [ebp+var_20] +
lea edx [ebp-1Ah] +
mov eax esi +
call sub_4B6C20  +
test al al +
jnz loc_4B6FCF  +
mov ax [ebp+var_1A] +
call @Variants@VarTypeIsValidElementType$qqrxus  +
test al al +
jnz loc_4B6FCF  +
cmp [ebp+var_1A] 100h +
jz loc_4B6FCF  +
mov eax 80020005h +
call unknown_libname_488  +
mov eax [ebp+psa] +
movzx eax word ptr [eax] +
cmp eax [ebp+arg_8] +
jz loc_4B6FE4  +
mov eax 8002000Bh +
call unknown_libname_488  +
mov bx word ptr [ebp+pvarg.n1] +
and bx 0FFFh +
movzx ebx bx +
cmp ebx 0Ch +
jnz loc_4B702F  +
cmp [ebp+var_1A] 100h +
jnz loc_4B700A  +
mov ax [ebp+var_1A] +
call unknown_libname_503  +
test al al +
jz loc_4B702F  +
lea eax [ebp+pv] +
push eax  +
lea eax [ebp+rgIndices] +
push eax  +
mov eax [ebp+psa] +
push eax  +
call SafeArrayPtrOfIndex  +
call unknown_libname_488  +
mov eax [ebp+pv] +
mov edx esi +
call sub_4BC1C8  +
jmp loc_4B70B7  +
lea eax [ebp+pvarg.n1+2] +
push eax  +
call VariantInit  +
xor eax eax +
push ebp  +
push offset loc_4B70B0  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
cmp ebx 0Ch +
jnz loc_4B705D  +
mov edx esi +
lea eax [ebp+pvarg.n1+2] +
call j_@Variants@_16476  +
lea eax [ebp+pvarg.n1+2] +
mov [ebp+pv] eax +
jmp loc_4B7084  +
mov edx esi +
lea eax [ebp+pvarg.n1+2] +
mov ecx ebx +
call sub_4B056C  +
add ebx 0FFFFFFF8h +
sub ebx 2 +
jb loc_4B7076  +
sub ebx 3 +
jnz loc_4B707E  +
mov eax dword ptr [ebp+pvarg.n1+0Ah] +
mov [ebp+pv] eax +
jmp loc_4B7084  +
lea eax [ebp+pvarg.n1+0Ah] +
mov [ebp+pv] eax +
mov eax [ebp+pv] +
push eax  +
lea eax [ebp+rgIndices] +
push eax  +
mov eax [ebp+psa] +
push eax  +
call SafeArrayPutElement  +
call unknown_libname_488  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4B70B7  +
lea eax [ebp+pvarg.n1+2] +
call @Variants@@VarClear$qqrr8TVarData  +
retn   +
jmp unknown_libname_539  +
jmp loc_4B70A7  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
push ebx  +
mov ebx [ebp+arg_0] +
test ebx ebx +
js loc_4B70D1  +
push dword ptr [ecx+ebx*4]  +
dec ebx  +
jns loc_4B70CB  +
mov ebx [ebp+arg_0] +
inc ebx  +
push ebx  +
push edx  +
push eax  +
call @Variants@@VarArrayPut$qr8TVarDatarx8TVarDataipxi  +
lea esp [esp+ebx*4+0Ch] +
pop ebx  +
pop ebp  +
retn 4  +
***
push ebx  +
push esi  +
push edi  +
push ebp  +
mov esi edx +
mov edi [ebp+arg_0] +
mov ebp eax +
xor ebx ebx +
test ecx ecx +
jge loc_4B70FF  +
mov ebp [ebp+0] +
xor eax eax +
mov al [edi+1] +
add edi eax +
mov eax [esi+ebx*4] +
mul  dword ptr [edi+2] +
mov edi [edi+6] +
test edi edi +
jz loc_4B7115  +
mov edi [edi] +
add ebp eax +
inc ebx  +
cmp ebx ecx +
jle loc_4B70FC  +
mov eax ebp +
pop ebp  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
xor edx edx +
test eax eax +
jz loc_4B713E  +
xor ecx ecx +
mov cl [eax+1] +
add eax ecx +
mov ecx [eax+6] +
test ecx ecx +
jz loc_4B713E  +
mov edx [ecx] +
mov eax edx +
retn   +
***
jmp loc_4B714F  +
test eax eax +
push edi  +
push ebp  +
add esp 0FFFFFFF8h +
mov [esp+8+var_8] 1 +
mov ebx eax +
mov eax edx +
call @System@_16822  +
dec eax  +
test eax eax +
jle loc_4B71BF  +
mov [esp+8+var_4] eax +
test ebx ebx +
jz loc_4B71B9  +
mov eax ebx +
call sub_4B715C  +
mov esi eax +
mov eax [ebx] +
call sub_4B715C  +
mov ebp eax +
dec esi  +
test esi esi +
jle loc_4B71B7  +
mov edi 1 +
mov eax [ebx+edi*4] +
call sub_4B715C  +
cmp ebp eax +
jz loc_4B71B3  +
mov [esp+8+var_8] 0 +
jmp loc_4B71BF  +
inc edi  +
dec esi  +
jnz loc_4B71A1  +
mov ebx [ebx] +
dec [esp+8+var_4]  +
jnz loc_4B7181  +
mov al [esp+8+var_8] +
pop ecx  +
pop edx  +
pop ebp  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
push ebp  +
push ecx  +
mov ebp ecx +
mov [esp+4+var_4] edx +
mov ebx eax +
mov eax [esp+4+var_4] +
call @System@_16822  +
mov esi eax +
push esi  +
mov eax ebp +
mov ecx 1 +
mov edx ds:off_4B8138 +
call unknown_libname_559  +
add esp 4 +
dec esi  +
test esi esi +
jl loc_4B7218  +
inc esi  +
xor edi edi +
test ebx ebx +
jz loc_4B7214  +
mov eax ebx +
call sub_4B715C  +
dec eax  +
mov edx [ebp+0] +
mov [edx+edi*4] eax +
mov ebx [ebx] +
inc edi  +
dec esi  +
jnz loc_4B7200  +
pop edx  +
pop ebp  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
push edi  +
test eax eax +
push ecx  +
mov ecx 3 +
jmp loc_4B7614  +
***
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
push ecx  +
mov ecx 4 +
push 0  +
push 0  +
dec ecx  +
jnz loc_4B7655  +
push ecx  +
xchg ecx [ebp+var_4] +
push ebx  +
push esi  +
push edi  +
mov [ebp+var_8] ecx +
mov esi edx +
mov [ebp+var_4] eax +
xor eax eax +
push ebp  +
push offset loc_4B790B  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov eax esi +
call @Variants@VarArrayDimCount$qqrrx14System@Variant  +
mov [ebp+var_C] eax +
mov eax [ebp+var_C] +
shl eax 2 +
call sub_4B97C0  +
mov [ebp+var_10] eax +
mov edi [ebp+var_C] +
dec edi  +
test edi edi +
jl loc_4B76BF  +
inc edi  +
xor ebx ebx +
lea edx [ebx+1] +
mov eax esi +
call @Variants@VarArrayHighBound$qqrrx14System@Varianti  +
push eax  +
lea edx [ebx+1] +
mov eax esi +
call @Variants@VarArrayLowBound$qqrrx14System@Varianti  +
pop edx  +
sub edx eax +
inc edx  +
mov eax [ebp+var_10] +
mov [eax+ebx*4] edx +
inc ebx  +
dec edi  +
jnz loc_4B769C  +
mov eax [ebp+var_10] +
push eax  +
mov eax [ebp+var_4] +
mov ecx [ebp+var_C] +
mov ebx [ebp+var_8] +
mov edx ebx +
call sub_4BC6EC  +
mov eax ebx +
call @System@_16822  +
mov eax ebx +
call sub_4B72E4  +
mov edi eax +
lea ecx [ebp+var_14] +
mov eax [ebp+var_4] +
mov eax [eax] +
mov edx [ebp+var_8] +
call @Variants@_16686  +
lea ecx [ebp+var_18] +
mov edx ds:off_4B8138 +
mov eax [ebp+var_14] +
call @System@@DynArrayCopy$qqrpvt1rpv  +
lea eax [ebp+var_28] +
push eax  +
mov eax [ebp+var_18] +
call sub_4BC6C4  +
mov ecx eax +
mov eax esi +
mov edx [ebp+var_18] +
call unknown_libname_504  +
mov eax [ebp+var_8] +
push eax  +
mov eax [ebp+var_18] +
call sub_4BC6C4  +
mov ecx eax +
mov eax [ebp+var_4] +
mov eax [eax] +
mov edx [ebp+var_18] +
call unknown_libname_506  +
mov ebx eax +
mov eax edi +
cmp eax 0Bh +
jg loc_4B7782  +
jz loc_4B7858  +
cmp eax 0Ah +
ja loc_4B78C7  +
jmp ds:off_4B7756[eax*4]  +
cmp eax 12h +
jg loc_4B77B2  +
jz loc_4B7895  +
sub eax 0Ch +
jz loc_4B7865  +
dec eax  +
jz loc_4B7871  +
sub eax 3 +
jz loc_4B787D  +
dec eax  +
jz loc_4B7889  +
jmp loc_4B78C7  +
sub eax 13h +
jz loc_4B78A2  +
dec eax  +
jz loc_4B78AE  +
sub eax 0ECh +
jz loc_4B78BD  +
jmp loc_4B78C7  +
lea eax [ebp+var_28] +
call sub_4BC1D0  +
mov [ebx] ax +
jmp loc_4B78C7  +
lea eax [ebp+var_28] +
call sub_4BC1D0  +
mov [ebx] eax +
jmp loc_4B78C7  +
lea eax [ebp+var_28] +
call sub_4BC1E8  +
fstp  dword ptr [ebx] +
wait   +
jmp loc_4B78C7  +
lea eax [ebp+var_28] +
call sub_4BC1E8  +
fstp  qword ptr [ebx] +
wait   +
jmp loc_4B78C7  +
lea eax [ebp+var_28] +
call sub_4BC1F0  +
fistp  qword ptr [ebx] +
wait   +
jmp loc_4B78C7  +
lea eax [ebp+var_28] +
call sub_4BC1E8  +
fstp  qword ptr [ebx] +
wait   +
jmp loc_4B78C7  +
mov eax ebx +
lea edx [ebp+var_28] +
call sub_4BC200  +
jmp loc_4B78C7  +
mov eax ebx +
lea edx [ebp+var_28] +
call sub_4BC210  +
jmp loc_4B78C7  +
lea eax [ebp+var_28] +
call sub_4BC1D0  +
mov [ebx] eax +
jmp loc_4B78C7  +
lea eax [ebp+var_28] +
call sub_4BC1E0  +
mov [ebx] ax +
jmp loc_4B78C7  +
mov eax ebx +
lea edx [ebp+var_28] +
call sub_4BC1C8  +
jmp loc_4B78C7  +
mov eax ebx +
lea edx [ebp+var_28] +
call sub_4BC208  +
jmp loc_4B78C7  +
lea eax [ebp+var_28] +
call sub_4BC1D0  +
mov [ebx] al +
jmp loc_4B78C7  +
lea eax [ebp+var_28] +
call sub_4BC1D0  +
mov [ebx] al +
jmp loc_4B78C7  +
lea eax [ebp+var_28] +
call sub_4BC1D0  +
mov [ebx] ax +
jmp loc_4B78C7  +
lea eax [ebp+var_28] +
call sub_4BC1D0  +
mov [ebx] eax +
jmp loc_4B78C7  +
lea eax [ebp+var_28] +
call sub_4BC1D8  +
mov [ebx] eax +
mov [ebx+4] edx +
jmp loc_4B78C7  +
mov eax ebx +
lea edx [ebp+var_28] +
call sub_4BC1F8  +
lea eax [ebp+var_18] +
mov edx [ebp+var_14] +
call @Variants@_16687  +
test al al +
jnz loc_4B7704  +
mov eax [ebp+var_10] +
call sub_4B97E0  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4B7912  +
lea eax [ebp+var_28] +
call sub_4BC290  +
lea eax [ebp+var_18] +
mov edx ds:off_4B8138 +
mov ecx 2 +
call @System@@FinalizeArray$qqrpvt1ui  +
retn   +
jmp unknown_libname_539  +
jmp loc_4B78EF  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
push ebx  +
push esi  +
mov esi offset dword_4F1D14 +
mov eax dword_4F1D18 +
call sub_4AD944  +
xor edx edx +
push ebp  +
push offset loc_4B79A3  +
push dword ptr fs:[edx]  +
mov fs:[edx] esp +
mov eax [esi] +
call sub_4BC6BC  +
mov ebx eax +
dec ebx  +
cmp ebx 0 +
jl loc_4B798B  +
mov eax [esi] +
mov eax [eax+ebx*4] +
cmp eax dword_4E6DEC +
jz loc_4B7985  +
mov edx [esi] +
call @System@TObject@Free$qqrv  +
dec ebx  +
cmp ebx 0FFFFFFFFh +
jnz loc_4B7971  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4B79AA  +
mov eax dword_4F1D18 +
call sub_4AD9E0  +
retn   +
jmp unknown_libname_539  +
jmp loc_4B7998  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
call sub_4B7B70  +
push edi  +
add esp 0FFFFFFF8h +
call sub_4B7B70  +
push ecx  +
push ebx  +
push esi  +
push edi  +
mov edi edx +
mov esi eax +
lea eax [ebp-1] +
push eax  +
mov edx edi +
mov eax esi +
mov ebx [eax] +
call dword ptr [ebx+38h]  +
xor eax eax +
mov al [ebp+var_1] +
mov edx [ebp+arg_0] +
lea edx [edx+edx*2] +
add edx offset unk_4E6F30 +
mov al [edx+eax-2Ah] +
pop edi  +
pop esi  +
pop ebx  +
pop ecx  +
pop ebp  +
retn 4  +
***
push edi  +
push ebp  +
push ecx  +
mov esi ecx +
mov edi edx +
mov ebx eax +
mov ecx esp +
mov edx esi +
mov eax ebx +
mov ebp [eax] +
call dword ptr [ebp+0Ch]  +
test al al +
jz loc_4B7AAC  +
mov ax [esp+2+var_2] +
push eax  +
mov ecx esi +
mov edx edi +
mov eax ebx +
mov ebx [eax] +
call dword ptr [ebx+1Ch]  +
jmp loc_4B7AB3  +
mov eax ebx +
call sub_4B7B68  +
pop edx  +
pop ebp  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
add esp 0FFFFFFF8h +
call unknown_libname_536  +
mov [ebp+var_5] dl +
mov [ebp+var_4] eax +
mov eax dword_4F1D18 +
call sub_4AD944  +
xor edx edx +
push ebp  +
push offset loc_4B7B1F  +
push dword ptr fs:[edx]  +
mov fs:[edx] esp +
mov eax [ebp+var_4] +
mov ax [eax+4] +
test ax ax +
jz loc_4B7B07  +
movzx eax ax +
mov edx dword_4F1D14 +
mov ecx dword_4E6DEC +
mov [edx+eax*4-400h] ecx +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4B7B26  +
mov eax dword_4F1D18 +
call sub_4AD9E0  +
retn   +
jmp unknown_libname_539  +
jmp loc_4B7B14  +
mov dl [ebp+var_5] +
and dl 0FCh +
mov eax [ebp+var_4] +
call sub_4BA7FC  +
cmp [ebp+var_5] 0 +
jle loc_4B7B42  +
mov eax [ebp+var_4] +
call @System@@ClassDestroy$qqrp14System@TObject  +
pop ecx  +
pop ecx  +
pop ebp  +
retn   +
***
retn   +
***
mov edx [ebp+arg_0] +
mov ax [eax+4] +
mov [edx] ax +
mov al 1 +
pop ebp  +
retn 4  +
***
mov word ptr [ecx] 8 +
retn   +
***
retn   +
***
retn   +
***
mov edx [ebp+arg_0] +
mov ax [eax+4] +
mov [edx] ax +
mov al 1 +
pop ebp  +
retn 4  +
***
retn   +
***
call sub_4B7B78  +
or eax 0FFFFFFFFh +
pop ebp  +
retn 4  +
***
or eax 0FFFFFFFFh +
pop ebp  +
retn 4  +
***
push ebx  +
mov ebx [ebp+arg_0] +
mov ecx [ebp+arg_8] +
mov edx [ebp+arg_4] +
mov eax ebx +
call @System@TObject@GetInterface$qqrrx5_GUIDpv  +
test al al +
jz loc_4B7BDC  +
xor eax eax +
jmp loc_4B7BE1  +
mov eax 80004002h +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
push ecx  +
add esp 0FFFFFEF0h +
push ebx  +
push esi  +
push edi  +
xor ecx ecx +
mov [ebp+var_10] ecx +
mov [ebp+var_8] edx +
mov [ebp+var_4] eax +
xor eax eax +
push ebp  +
push offset loc_4B7D76  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov [ebp+var_9] 0 +
mov eax dword_4F1D18 +
call sub_4ADA30  +
xor eax eax +
push ebp  +
push offset loc_4B7D59  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov eax dword_4F1D14 +
call sub_4BC6C4  +
mov esi eax +
test esi esi +
jl loc_4B7D41  +
inc esi  +
xor edi edi +
mov eax dword_4F1D14 +
mov ebx [eax+edi*4] +
test ebx ebx +
jz loc_4B7D3D  +
cmp ebx dword_4E6DEC +
jz loc_4B7D3D  +
lea edx [ebp+var_110] +
mov eax [ebx] +
call @System@TObject@ClassName$qqrp17System@TMetaClass  +
lea edx [ebp+var_110] +
lea eax [ebp+var_10] +
call unknown_libname_547  +
mov eax [ebp+var_10] +
mov edx [ebp+var_4] +
call unknown_libname_459  +
test al al +
jz loc_4B7D3D  +
mov eax [ebp+var_8] +
mov [eax] ebx +
mov [ebp+var_9] 1 +
jmp loc_4B7D41  +
inc edi  +
dec esi  +
jnz loc_4B7CF4  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4B7D60  +
mov eax dword_4F1D18 +
call sub_4ADA8C  +
retn   +
jmp unknown_libname_539  +
jmp loc_4B7D4E  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4B7D7D  +
lea eax [ebp+var_10] +
call unknown_libname_540  +
retn   +
jmp unknown_libname_539  +
jmp loc_4B7D6D  +
mov al [ebp+var_9] +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
retn   +
***
xor eax eax +
push ebp  +
push offset loc_4B7E09  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
inc dword_4F1BB8  +
jnz loc_4B7DFB  +
call sub_4B7940  +
mov eax offset dword_4F1D18 +
call @Sysutils@FreeAndNil$qqrpv  +
mov eax offset unk_4F1C68 +
call sub_4BC1AC  +
mov eax offset dword_4F1D14 +
mov edx ds:off_4B791C +
call @System@@DynArrayClear$qqrrpvpv  +
mov eax offset off_4E6EDC +
mov ecx 15h +
mov edx ds:@$xp$13System@String +
call @System@@FinalizeArray$qqrpvt1ui  +
mov eax offset dword_4E6DC8 +
call unknown_libname_540  +
mov eax offset unk_4F1B98 +
call sub_4BC290  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4B7E10  +
retn   +
jmp unknown_libname_539  +
jmp locret_4B7E08  +
pop ebp  +
retn   +
***
push ebx  +
mov ebx offset unk_4F1BBC +
xor eax eax +
push ebp  +
push offset loc_4B800E  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
sub dword_4F1BB8 1 +
jnb loc_4B8000  +
mov eax offset unk_4F1B98 +
call @Variants@_16655  +
mov eax offset sub_4AF920 +
mov dword_4F1BA8 eax +
mov eax offset sub_4AF49C +
mov dword_4F1BAC eax +
mov edx offset sub_4AF3AC +
mov dword_4F1BB0 edx +
mov dword_4F1BB4 eax +
mov eax offset @Variants@@VarClear$qqrr8TVarData +
mov [ebx] eax +
mov eax offset @Variants@@VarCopy$qqrr8TVarDatarx8TVarData +
mov [ebx+4] eax +
mov eax offset @Variants@@VarCopyNoInd$qqrr8TVarDatarx8TVarData +
mov [ebx+8] eax +
mov eax offset sub_4B056C +
mov [ebx+0Ch] eax +
mov eax offset sub_4B0798 +
mov [ebx+10h] eax +
mov eax offset sub_4B0994 +
mov [ebx+14h] eax +
mov eax offset sub_4B13F4 +
mov [ebx+18h] eax +
mov eax offset @Variants@@VarToBool$qqrrx8TVarData +
mov [ebx+1Ch] eax +
mov eax offset @Variants@@VarToReal$qqrrx8TVarData +
mov [ebx+20h] eax +
mov eax offset sub_4B2BB4 +
mov [ebx+24h] eax +
mov eax offset @Variants@@VarToPStr$qqrpvrx8TVarData +
mov [ebx+28h] eax +
mov eax offset sub_4B3258 +
mov [ebx+2Ch] eax +
mov eax offset sub_4B39CC +
mov [ebx+30h] eax +
mov eax offset @Variants@@VarToIntf$qqrr45System@_DelphiInterface$t17System@IInterface_rx8TVarData +
mov [ebx+34h] eax +
mov eax offset sub_4B4070 +
mov [ebx+38h] eax +
mov eax offset unknown_libname_496 +
mov [ebx+3Ch] eax +
mov eax offset sub_4B412C +
mov [ebx+40h] eax +
mov eax offset @Variants@@VarFromInt64$qqrr8TVarDataxj +
mov [ebx+44h] eax +
mov eax offset @Variants@@VarFromBool$qqrr8TVarDataxo +
mov [ebx+48h] eax +
mov eax offset @Variants@@VarFromReal$qqrv +
mov [ebx+4Ch] eax +
mov eax offset @Variants@@VarFromTDateTime$qqrv +
mov [ebx+50h] eax +
mov eax offset @Variants@@VarFromCurr$qqrv +
mov [ebx+54h] eax +
mov eax offset sub_4B43B0 +
mov [ebx+58h] eax +
mov eax offset @Variants@@VarFromLStr$qqrr8TVarDatax17System@AnsiString +
mov [ebx+5Ch] eax +
mov eax offset @Variants@@VarFromWStr$qqrr8TVarDatax17System@WideString +
mov [ebx+60h] eax +
mov eax offset @Variants@@VarFromIntf$qqrr8TVarDatax45System@_DelphiInterface$t17System@IInterface_ +
mov [ebx+64h] eax +
mov eax offset @Variants@@VarFromDisp$qqrr8TVarDatax36System@_DelphiInterface$t9IDispatch_ +
mov [ebx+68h] eax +
mov eax offset unknown_libname_499 +
mov [ebx+6Ch] eax +
mov eax offset sub_4B44F4 +
mov [ebx+70h] eax +
mov eax offset sub_4B44A4 +
mov [ebx+74h] eax +
mov eax offset sub_4B45B0 +
mov [ebx+78h] eax +
mov eax offset unknown_libname_498 +
mov [ebx+7Ch] eax +
mov eax offset sub_4B5524 +
mov [ebx+80h] eax +
mov eax offset loc_4B5F18 +
mov [ebx+84h] eax +
mov eax offset sub_4B6010 +
mov [ebx+88h] eax +
mov eax offset sub_4B64B8 +
mov [ebx+8Ch] eax +
mov eax offset @Variants@@DispInvoke$qp8TVarDatarx8TVarDatap16System@TCallDescpv +
mov [ebx+90h] eax +
mov eax offset unknown_libname_502 +
mov [ebx+94h] eax +
mov eax offset @Variants@@VarArrayRedim$qqrr8TVarDatai +
mov [ebx+98h] eax +
mov eax offset sub_4B6E88 +
mov [ebx+9Ch] eax +
mov eax offset @Variants@@VarArrayPut$qr8TVarDatarx8TVarDataipxi +
mov [ebx+0A0h] eax +
mov eax offset @Classes@TStrings@Error$qqrp20System@TResStringReci_0 +
mov [ebx+0A4h] eax +
mov eax offset loc_4B6C18 +
mov [ebx+0A8h] eax +
mov eax offset unk_4F1C68 +
call sub_4BC198  +
mov eax ebx +
call sub_4BC1AC  +
mov dl 1 +
mov eax ds:off_4A8670 +
call sub_4AD844  +
mov dword_4F1D18 eax +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4B8015  +
retn   +
jmp unknown_libname_539  +
jmp locret_4B800D  +
pop ebx  +
pop ebp  +
retn   +
***
mov ebx 0Ah +
push esp  +
call GetStartupInfoA  +
test [esp+44h+var_18] 1 +
jz loc_4B8477  +
movzx ebx [esp+44h+var_14] +
mov eax ebx +
add esp 44h +
pop ebx  +
retn   +
***
mov esi offset dword_4F2308 +
cmp dword ptr [esi] 0 +
jnz loc_4B84C6  +
push 644h  +
push 0  +
call LocalAlloc  +
mov ecx eax +
test ecx ecx +
jnz loc_4B84A3  +
xor eax eax +
pop esi  +
pop ebx  +
retn   +
mov eax dword_4F2304 +
mov [ecx] eax +
mov dword_4F2304 ecx +
xor edx edx +
mov eax edx +
add eax eax +
lea eax [ecx+eax*8+4] +
mov ebx [esi] +
mov [eax] ebx +
mov [esi] eax +
inc edx  +
cmp edx 64h +
jnz loc_4B84B2  +
mov eax [esi] +
mov edx [eax] +
mov [esi] edx +
pop esi  +
pop ebx  +
retn   +
***
mov [eax+4] eax +
retn   +
***
mov esi edx +
mov edx [eax+4] +
push edi  +
push edi  +
push ebp  +
add esp 0FFFFFFF8h +
mov ebx eax +
mov edi ebx +
mov esi [edx] +
mov eax [ebx+8] +
cmp esi eax +
jb loc_4B8614  +
mov ecx esi +
add ecx [edx+4] +
mov ebp eax +
add ebp [ebx+0Ch] +
cmp ecx ebp +
ja loc_4B8614  +
cmp esi eax +
jnz loc_4B85D1  +
mov eax [edx+4] +
add [ebx+8] eax +
mov eax [edx+4] +
sub [ebx+0Ch] eax +
cmp dword ptr [ebx+0Ch] 0 +
jnz loc_4B8610  +
mov eax ebx +
call @System@_16425  +
jmp loc_4B8610  +
mov ecx esi +
mov edi [edx+4] +
add ecx edi +
mov ebp eax +
add ebp [ebx+0Ch] +
cmp ecx ebp +
jnz loc_4B85E6  +
sub [ebx+0Ch] edi +
jmp loc_4B8610  +
mov ecx [edx] +
add ecx [edx+4] +
mov [esp+8+var_8] ecx +
mov edi [ebx+8] +
add edi [ebx+0Ch] +
sub edi ecx +
mov [esp+8+var_4] edi +
sub esi eax +
mov [ebx+0Ch] esi +
mov edx esp +
mov eax ebx +
call sub_4B84D8  +
test al al +
jnz loc_4B8610  +
xor eax eax +
jmp loc_4B861C  +
mov al 1 +
jmp loc_4B861C  +
mov ebx [ebx] +
cmp edi ebx +
jnz loc_4B859B  +
xor eax eax +
pop ecx  +
pop edx  +
pop ebp  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
mov ebx edx +
mov esi eax +
cmp esi 100000h +
jge loc_4B863A  +
mov esi 100000h +
jmp loc_4B8646  +
add esi 0FFFFh +
and esi 0FFFF0000h +
mov [ebx+4] esi +
push 1  +
push 2000h  +
push esi  +
push 0  +
call VirtualAlloc  +
mov edi eax +
mov [ebx] edi +
test edi edi +
jz loc_4B8683  +
mov edx ebx +
mov eax offset dword_4F230C +
call sub_4B84D8  +
test al al +
jnz loc_4B8683  +
push 8000h  +
push 0  +
mov eax [ebx] +
push eax  +
call VirtualFree  +
xor eax eax +
mov [ebx] eax +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
push ebp  +
mov ebx ecx +
mov esi edx +
mov ebp eax +
mov dword ptr [ebx+4] 100000h +
push 4  +
push 2000h  +
push 100000h  +
push ebp  +
call VirtualAlloc  +
mov edi eax +
mov [ebx] edi +
test edi edi +
jnz loc_4B86D2  +
add esi 0FFFFh +
and esi 0FFFF0000h +
mov [ebx+4] esi +
push 4  +
push 2000h  +
push esi  +
push ebp  +
call VirtualAlloc  +
mov [ebx] eax +
cmp dword ptr [ebx] 0 +
jz loc_4B86FA  +
mov edx ebx +
mov eax offset dword_4F230C +
call sub_4B84D8  +
test al al +
jnz loc_4B86FA  +
push 8000h  +
push 0  +
mov eax [ebx] +
push eax  +
call VirtualFree  +
xor eax eax +
mov [ebx] eax +
pop ebp  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
push edi  +
push ebp  +
add esp 0FFFFFFF4h +
mov [esp+0Ch+var_8] ecx +
mov [esp+0Ch+var_C] edx +
mov edx eax +
mov ebp edx +
and ebp 0FFFFF000h +
add edx [esp+0Ch+var_C] +
add edx 0FFFh +
and edx 0FFFFF000h +
mov [esp+0Ch+var_4] edx +
mov eax [esp+0Ch+var_8] +
mov [eax] ebp +
mov eax [esp+0Ch+var_4] +
sub eax ebp +
mov edx [esp+0Ch+var_8] +
mov [edx+4] eax +
mov esi dword_4F230C +
jmp loc_4B883A  +
mov ebx [esi+8] +
mov edi [esi+0Ch] +
add edi ebx +
cmp ebp ebx +
jbe loc_4B880C  +
mov ebx ebp +
cmp edi [esp+0Ch+var_4] +
jbe loc_4B8816  +
mov edi [esp+0Ch+var_4] +
cmp edi ebx +
jbe loc_4B8838  +
push 4  +
push 1000h  +
sub edi ebx +
push edi  +
push ebx  +
call VirtualAlloc  +
test eax eax +
jnz loc_4B8838  +
mov eax [esp+0Ch+var_8] +
xor edx edx +
mov [eax] edx +
jmp loc_4B8842  +
mov esi [esi] +
cmp esi offset dword_4F230C +
jnz loc_4B87FE  +
add esp 0Ch +
pop ebp  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
push ebp  +
push ecx  +
mov ebx eax +
mov esi ebx +
add esi 0FFFh +
and esi 0FFFFF000h +
mov [esp+4+var_4] esi +
mov ebp ebx +
add ebp edx +
and ebp 0FFFFF000h +
mov eax [esp+4+var_4] +
mov [ecx] eax +
mov eax ebp +
sub eax [esp+4+var_4] +
mov [ecx+4] eax +
mov esi dword_4F230C +
jmp loc_4B88BB  +
mov ebx [esi+8] +
mov edi [esi+0Ch] +
add edi ebx +
cmp ebx [esp+4+var_4] +
jnb loc_4B8893  +
mov ebx [esp+4+var_4] +
cmp ebp edi +
jnb loc_4B8899  +
mov edi ebp +
cmp edi ebx +
jbe loc_4B88B9  +
push 4000h  +
sub edi ebx +
push edi  +
push ebx  +
call VirtualFree  +
test eax eax +
jnz loc_4B88B9  +
mov dword_4F22E8 2 +
mov esi [esi] +
cmp esi offset dword_4F230C +
jnz loc_4B8883  +
pop edx  +
pop ebp  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
push ebp  +
add esp 0FFFFFFF8h +
mov esi edx +
mov edi eax +
mov ebp offset unk_4F231C +
add edi 3FFFh +
and edi 0FFFFC000h +
mov ebx [ebp+0] +
jmp loc_4B8920  +
cmp edi [ebx+0Ch] +
jg loc_4B891E  +
mov ecx esi +
mov edx edi +
mov eax [ebx+8] +
call @System@_16431  +
cmp dword ptr [esi] 0 +
jz loc_4B8953  +
mov eax [esi+4] +
add [ebx+8] eax +
mov eax [esi+4] +
sub [ebx+0Ch] eax +
cmp dword ptr [ebx+0Ch] 0 +
jnz loc_4B8953  +
mov eax ebx +
call @System@_16425  +
jmp loc_4B8953  +
mov ebx [ebx] +
cmp ebx ebp +
jnz loc_4B88ED  +
mov edx esi +
mov eax edi +
call sub_4B8624  +
cmp dword ptr [esi] 0 +
jz loc_4B8953  +
mov ecx esp +
mov edx esi +
mov eax ebp +
call sub_4B8520  +
cmp [esp+8+var_8] 0 +
jnz loc_4B88E8  +
mov ecx esp +
mov edx [esi+4] +
mov eax [esi] +
call @System@_16430  +
xor eax eax +
mov [esi] eax +
pop ecx  +
pop edx  +
pop ebp  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
push ebp  +
add esp 0FFFFFFECh +
mov [esp+14h+var_14] ecx +
mov edi edx +
mov esi eax +
mov ebp offset unk_4F231C +
add edi 3FFFh +
and edi 0FFFFC000h +
mov ebx [ebp+0] +
jmp loc_4B8982  +
mov ebx [ebx] +
cmp ebx ebp +
jz loc_4B898B  +
cmp esi [ebx+8] +
jnz loc_4B8980  +
cmp esi [ebx+8] +
jnz loc_4B89E7  +
cmp edi [ebx+0Ch] +
jle loc_4B8A2F  +
lea ecx [esp+14h+var_10] +
mov edx edi +
sub edx [ebx+0Ch] +
mov eax [ebx+8] +
add eax [ebx+0Ch] +
call sub_4B8688  +
cmp [esp+14h+var_10] 0 +
jz loc_4B89E7  +
lea ecx [esp+14h+var_8] +
lea edx [esp+14h+var_10] +
mov eax ebp +
call sub_4B8520  +
cmp [esp+14h+var_8] 0 +
jnz loc_4B897B  +
lea ecx [esp+14h+var_8] +
mov edx [esp+14h+var_C] +
mov eax [esp+14h+var_10] +
call @System@_16430  +
mov eax [esp+14h+var_14] +
xor edx edx +
mov [eax] edx +
jmp loc_4B8A77  +
lea ecx [esp+14h+var_10] +
mov edx edi +
mov eax esi +
call sub_4B8688  +
cmp [esp+14h+var_10] 0 +
jz loc_4B8A2F  +
lea ecx [esp+14h+var_8] +
lea edx [esp+14h+var_10] +
mov eax ebp +
call sub_4B8520  +
cmp [esp+14h+var_8] 0 +
jnz loc_4B897B  +
lea ecx [esp+14h+var_8] +
mov edx [esp+14h+var_C] +
mov eax [esp+14h+var_10] +
call @System@_16430  +
mov eax [esp+14h+var_14] +
xor edx edx +
mov [eax] edx +
jmp loc_4B8A77  +
mov ebp [ebx+8] +
cmp esi ebp +
jnz loc_4B8A70  +
cmp edi [ebx+0Ch] +
jg loc_4B8A70  +
mov ecx [esp+14h+var_14] +
mov edx edi +
mov eax ebp +
call @System@_16431  +
mov eax [esp+14h+var_14] +
cmp dword ptr [eax] 0 +
jz loc_4B8A77  +
mov eax [esp+14h+var_14] +
mov eax [eax+4] +
add [ebx+8] eax +
mov eax [esp+14h+var_14] +
mov eax [eax+4] +
sub [ebx+0Ch] eax +
cmp dword ptr [ebx+0Ch] 0 +
jnz loc_4B8A77  +
mov eax ebx +
call @System@_16425  +
jmp loc_4B8A77  +
mov eax [esp+14h+var_14] +
xor edx edx +
mov [eax] edx +
add esp 14h +
pop ebp  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
xor edx edx +
push ebx  +
jnz loc_4B8CC2  +
mov edx [eax+4] +
mov dword_4F2338 edx +
mov edx [eax+4] +
mov ecx [eax+8] +
cmp ecx 1000h +
jg loc_4B8D08  +
cmp eax edx +
jnz loc_4B8CEB  +
test ecx ecx +
jns loc_4B8CDB  +
add ecx 3 +
sar ecx 2 +
mov eax hMem +
xor edx edx +
mov [eax+ecx*4-0Ch] edx +
jmp loc_4B8D0F  +
test ecx ecx +
jns loc_4B8CF2  +
add ecx 3 +
sar ecx 2 +
mov ebx hMem +
mov [ebx+ecx*4-0Ch] edx +
mov eax [eax] +
mov [edx] eax +
mov [eax+4] edx +
pop ebx  +
retn   +
mov eax [eax] +
mov [edx] eax +
mov [eax+4] edx +
pop ebx  +
retn   +
***
mov edx dword_4F2348 +
jmp loc_4B8D2C  +
mov ecx [edx+8] +
cmp eax ecx +
jb loc_4B8D2A  +
add ecx [edx+0Ch] +
cmp eax ecx +
jb loc_4B8D40  +
mov edx [edx] +
cmp edx offset dword_4F2348 +
jnz loc_4B8D1C  +
mov dword_4F22E8 3 +
xor edx edx +
mov eax edx +
retn   +
***
sub ecx 4 +
inc dword_4F22D8  +
mov edx eax +
sub edx 4 +
mov edx [edx] +
and edx 7FFFFFFCh +
sub edx 4 +
add dword_4F22DC edx +
call @System@SysFreeMem$qqrpv  +
retn   +
***
cmp edx 0Ch +
mov edx eax +
sub edx 4 +
mov edx [edx] +
mov ecx edx +
and ecx 80000002h +
cmp ecx 80000002h +
jz loc_4B8DE3  +
mov dword_4F22E8 4 +
mov ebx edx +
and ebx 7FFFFFFCh +
sub eax ebx +
mov ecx eax +
xor edx [ecx] +
test edx 0FFFFFFFEh +
jz loc_4B8E03  +
mov dword_4F22E8 5 +
test byte ptr [ecx] 1 +
jz loc_4B8E28  +
mov edx eax +
sub edx 0Ch +
mov esi [edx+8] +
sub eax esi +
cmp esi [eax+8] +
jz loc_4B8E21  +
mov dword_4F22E8 6 +
call unknown_libname_524  +
add ebx esi +
mov eax ebx +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
push edi  +
push ebp  +
add esp 0FFFFFFF4h +
mov edi edx +
mov esi eax +
mov [esp+0Ch+var_C] 0 +
mov eax esi +
call unknown_libname_525  +
mov ebx eax +
test ebx ebx +
jz loc_4B8F0A  +
mov ebp [ebx+8] +
mov eax ebp +
add eax [ebx+0Ch] +
mov edx eax +
lea ecx [edi+esi] +
sub edx ecx +
cmp edx 0Ch +
jg loc_4B8EA0  +
mov edi eax +
sub edi esi +
mov eax esi +
sub eax ebp +
cmp eax 0Ch +
jge loc_4B8EBD  +
lea ecx [esp+0Ch+var_B] +
mov edx esi +
sub edx [ebx+8] +
add edx edi +
mov eax ebp +
call sub_4B8A80  +
jmp loc_4B8ECE  +
lea ecx [esp+0Ch+var_B] +
mov edx edi +
sub edx 4 +
lea eax [esi+4] +
call sub_4B8A80  +
mov ebp [esp+0Ch+var_B] +
test ebp ebp +
jz loc_4B8F0A  +
mov edx ebp +
sub edx esi +
mov eax esi +
call sub_4B8D44  +
mov eax ebp +
add eax [esp+0Ch+var_7] +
mov edx [ebx+8] +
add edx [ebx+0Ch] +
cmp eax edx +
jnb loc_4B8EFB  +
lea edx [edi+esi] +
sub edx eax +
call sub_4B8D98  +
lea edx [esp+0Ch+var_B] +
mov eax ebx +
call sub_4B8590  +
mov [esp+0Ch+var_C] 1 +
mov al [esp+0Ch+var_C] +
add esp 0Ch +
pop ebp  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
mov esi edx +
mov edi eax +
mov ebx edi +
mov [ebx+8] esi +
mov eax ebx +
add eax esi +
sub eax 0Ch +
mov [eax+8] esi +
cmp esi 1000h +
jg loc_4B8F6D  +
mov edx esi +
test edx edx +
jns loc_4B8F3F  +
add edx 3 +
sar edx 2 +
mov eax hMem +
mov eax [eax+edx*4-0Ch] +
test eax eax +
jnz loc_4B8F5F  +
mov eax hMem +
mov [eax+edx*4-0Ch] ebx +
mov [ebx+4] ebx +
mov [ebx] ebx +
jmp loc_4B8F99  +
mov edx [eax] +
mov [ebx+4] eax +
mov [ebx] edx +
mov [eax] ebx +
mov [edx+4] ebx +
jmp loc_4B8F99  +
cmp esi 3C00h +
jl loc_4B8F82  +
mov edx esi +
mov eax edi +
call sub_4B8E68  +
test al al +
jnz loc_4B8F99  +
mov eax dword_4F2338 +
mov dword_4F2338 ebx +
mov edx [eax] +
mov [ebx+4] eax +
mov [ebx] edx +
mov [eax] ebx +
mov [edx+4] ebx +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
cmp dword_4F233C 0 +
jle locret_4B8FE9  +
cmp dword_4F233C 0Ch +
jge loc_4B8FBE  +
mov dword_4F22E8 7 +
jmp locret_4B8FE9  +
mov eax dword_4F233C +
or eax 2 +
mov edx dword_4F2340 +
mov [edx] eax +
mov eax dword_4F2340 +
add eax 4 +
call sub_4B8D74  +
xor eax eax +
mov dword_4F2340 eax +
xor eax eax +
mov dword_4F233C eax +
retn   +
***
push edi  +
add esp 0FFFFFFF0h +
mov esi eax +
lea edi [esp+10h+var_10] +
movs   +
movs   +
mov edi esp +
call unknown_libname_528  +
lea ecx [esp+10h+var_8] +
mov edx edi +
mov eax offset dword_4F2348 +
call sub_4B8520  +
mov ebx [esp+10h+var_8] +
test ebx ebx +
jnz loc_4B901C  +
xor eax eax +
jmp loc_4B906E  +
mov eax [edi] +
cmp ebx eax +
jnb loc_4B902C  +
call unknown_libname_526  +
sub [edi] eax +
add [edi+4] eax +
mov eax [edi] +
add eax [edi+4] +
mov esi ebx +
add esi [esp+10h+var_4] +
cmp eax esi +
jnb loc_4B9043  +
call sub_4B8E30  +
add [edi+4] eax +
mov eax [edi] +
add eax [edi+4] +
cmp esi eax +
jnz loc_4B905D  +
sub eax 4 +
mov edx 4 +
call sub_4B8D44  +
sub dword ptr [edi+4] 4 +
mov eax [edi] +
mov dword_4F2340 eax +
mov eax [edi+4] +
mov dword_4F233C eax +
mov al 1 +
add esp 10h +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov ebx eax +
mov edx esp +
lea eax [ebx+4] +
call sub_4B88CC  +
cmp [esp+8+var_8] 0 +
jz loc_4B9099  +
mov eax esp +
call sub_4B8FEC  +
test al al +
jnz loc_4B909D  +
xor eax eax +
jmp loc_4B909F  +
mov al 1 +
pop ecx  +
pop edx  +
pop ebx  +
retn   +
***
add esp 0FFFFFFF8h +
mov esi edx +
mov ebx eax +
mov ecx esp +
lea edx [esi+4] +
mov eax ebx +
call @System@_16434  +
cmp [esp+8+var_8] 0 +
jz loc_4B90CA  +
mov eax esp +
call sub_4B8FEC  +
test al al +
jnz loc_4B90CE  +
xor eax eax +
jmp loc_4B90D0  +
mov al 1 +
pop ecx  +
pop edx  +
pop esi  +
pop ebx  +
retn   +
***
xor edx edx +
push edi  +
add esp 0FFFFFFF8h +
push ebx  +
push esi  +
push edi  +
mov ebx eax +
cmp byte_4F22E4 0 +
jnz loc_4B9215  +
call @System@_16436  +
test al al +
jz loc_4B921D  +
cmp ebx 7FFFFFF8h +
jle loc_4B9227  +
xor eax eax +
mov [ebp+var_4] eax +
jmp loc_4B937B  +
xor ecx ecx +
push ebp  +
push offset loc_4B9374  +
push dword ptr fs:[ecx]  +
mov fs:[ecx] esp +
cmp byte_4F1D6D 0 +
jz loc_4B9248  +
push offset stru_4F22EC  +
call EnterCriticalSection  +
add ebx 7 +
and ebx 0FFFFFFFCh +
cmp ebx 0Ch +
jge loc_4B9258  +
mov ebx 0Ch +
cmp ebx 1000h +
jg loc_4B92F7  +
mov eax ebx +
test eax eax +
jns loc_4B926D  +
add eax 3 +
sar eax 2 +
mov edx hMem +
mov edx [edx+eax*4-0Ch] +
test edx edx +
jz loc_4B92F7  +
mov esi edx +
mov eax esi +
add eax ebx +
and dword ptr [eax] 0FFFFFFFEh +
mov eax [edx+4] +
cmp edx eax +
jnz loc_4B92A8  +
mov eax ebx +
test eax eax +
jns loc_4B9297  +
add eax 3 +
sar eax 2 +
mov ecx hMem +
xor edi edi +
mov [ecx+eax*4-0Ch] edi +
jmp loc_4B92CE  +
mov ecx ebx +
test ecx ecx +
jns loc_4B92B1  +
add ecx 3 +
sar ecx 2 +
mov edi hMem +
mov [edi+ecx*4-0Ch] eax +
mov ecx [edx] +
mov [ebp+var_8] ecx +
mov ecx [ebp+var_8] +
mov [ecx+4] eax +
mov ecx [ebp+var_8] +
mov [eax] ecx +
mov eax esi +
mov edx [edx+8] +
or edx 2 +
mov [eax] edx +
add eax 4 +
mov [ebp+var_4] eax +
inc dword_4F22D8  +
sub ebx 4 +
add dword_4F22DC ebx +
call @System@@TryFinallyExit$qqrv  +
jmp loc_4B937B  +
cmp ebx dword_4F233C +
jg loc_4B9349  +
sub dword_4F233C ebx +
cmp dword_4F233C 0Ch +
jge loc_4B931B  +
add ebx dword_4F233C +
xor eax eax +
mov dword_4F233C eax +
mov eax dword_4F2340 +
add dword_4F2340 ebx +
mov edx ebx +
or edx 2 +
mov [eax] edx +
add eax 4 +
mov [ebp+var_4] eax +
inc dword_4F22D8  +
sub ebx 4 +
add dword_4F22DC ebx +
call @System@@TryFinallyExit$qqrv  +
jmp loc_4B937B  +
mov eax ebx +
call sub_4B9104  +
mov [ebp+var_4] eax +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4B937B  +
cmp byte_4F1D6D 0 +
jz locret_4B9373  +
push offset stru_4F22EC  +
call LeaveCriticalSection  +
retn   +
jmp unknown_libname_539  +
jmp loc_4B9360  +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
pop ecx  +
pop ecx  +
pop ebp  +
retn   +
***
push ecx  +
push ebx  +
push esi  +
push edi  +
mov ebx eax +
xor eax eax +
mov dword_4F22E8 eax +
cmp byte_4F22E4 0 +
jnz loc_4B93C0  +
call @System@_16436  +
test al al +
jnz loc_4B93C0  +
mov dword_4F22E8 8 +
mov [ebp+var_4] 8 +
jmp loc_4B9521  +
xor ecx ecx +
push ebp  +
push offset loc_4B951A  +
push dword ptr fs:[ecx]  +
mov fs:[ecx] esp +
cmp byte_4F1D6D 0 +
jz loc_4B93E1  +
push offset stru_4F22EC  +
call EnterCriticalSection  +
mov esi ebx +
sub esi 4 +
mov ebx [esi] +
test bl 2 +
jnz loc_4B93FC  +
mov dword_4F22E8 9 +
jmp loc_4B94F1  +
dec dword_4F22D8  +
mov eax ebx +
and eax 7FFFFFFCh +
sub eax 4 +
sub dword_4F22DC eax +
test bl 1 +
jz loc_4B945C  +
mov eax esi +
sub eax 0Ch +
mov edx [eax+8] +
cmp edx 0Ch +
jl loc_4B942C  +
test edx 80000003h +
jz loc_4B943B  +
mov dword_4F22E8 0Ah +
jmp loc_4B94F1  +
mov eax esi +
sub eax edx +
cmp edx [eax+8] +
jz loc_4B9453  +
mov dword_4F22E8 0Ah +
jmp loc_4B94F1  +
add ebx edx +
mov esi eax +
call unknown_libname_524  +
and ebx 7FFFFFFCh +
mov eax esi +
add eax ebx +
mov edi eax +
cmp edi dword_4F2340 +
jnz loc_4B949C  +
sub dword_4F2340 ebx +
add dword_4F233C ebx +
cmp dword_4F233C 3C00h +
jle loc_4B948D  +
call unknown_libname_528  +
xor eax eax +
mov [ebp+var_4] eax +
call @System@@TryFinallyExit$qqrv  +
jmp loc_4B9521  +
mov edx [eax] +
test dl 2 +
jz loc_4B94BF  +
and edx 7FFFFFFCh +
cmp edx 4 +
jge loc_4B94BA  +
mov dword_4F22E8 0Bh +
jmp loc_4B94F1  +
or dword ptr [eax] 1 +
jmp loc_4B94E8  +
mov eax edi +
cmp dword ptr [eax+4] 0 +
jz loc_4B94D2  +
cmp dword ptr [eax] 0 +
jz loc_4B94D2  +
cmp dword ptr [eax+8] 0Ch +
jge loc_4B94DE  +
mov dword_4F22E8 0Bh +
jmp loc_4B94F1  +
mov edx [eax+8] +
add ebx edx +
call unknown_libname_524  +
mov edx ebx +
mov eax esi +
call unknown_libname_527  +
mov eax dword_4F22E8 +
mov [ebp+var_4] eax +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4B9521  +
cmp byte_4F1D6D 0 +
jz locret_4B9519  +
push offset stru_4F22EC  +
call LeaveCriticalSection  +
retn   +
jmp unknown_libname_539  +
jmp loc_4B9506  +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
pop ecx  +
pop ebp  +
retn   +
***
push edi  +
push ebp  +
add esp 0FFFFFFF8h +
mov esi edx +
add esi 7 +
and esi 0FFFFFFFCh +
cmp esi 0Ch +
jge loc_4B9545  +
mov esi 0Ch +
mov ebp eax +
sub ebp 4 +
mov edi [ebp+0] +
and edi 7FFFFFFCh +
mov eax ebp +
add eax edi +
mov ebx eax +
cmp edi esi +
jl loc_4B95E4  +
mov edx edi +
sub edx esi +
mov [esp+8+var_8] edx +
cmp ebx dword_4F2340 +
jnz loc_4B95A8  +
mov eax [esp+8+var_8] +
sub dword_4F2340 eax +
mov eax [esp+8+var_8] +
add dword_4F233C eax +
cmp dword_4F233C 0Ch +
jge loc_4B96DB  +
mov eax [esp+8+var_8] +
add dword_4F2340 eax +
mov eax [esp+8+var_8] +
sub dword_4F233C eax +
mov esi edi +
jmp loc_4B96DB  +
mov ebx eax +
test byte ptr [ebx] 2 +
jnz loc_4B95BC  +
mov eax ebx +
mov edx [eax+8] +
add [esp+8+var_8] edx +
call unknown_libname_524  +
cmp [esp+8+var_8] 0Ch +
jl loc_4B95DD  +
mov ebx ebp +
add ebx esi +
mov eax [esp+8+var_8] +
or eax 2 +
mov [ebx] eax +
mov eax ebx +
add eax 4 +
call sub_4B8D74  +
jmp loc_4B96DB  +
mov esi edi +
jmp loc_4B96DB  +
mov eax esi +
sub eax edi +
mov [esp+8+var_4] eax +
cmp ebx dword_4F2340 +
jnz loc_4B965B  +
mov eax dword_4F233C +
cmp eax [esp+8+var_4] +
jl loc_4B9652  +
mov eax [esp+8+var_4] +
sub dword_4F233C eax +
mov eax [esp+8+var_4] +
add dword_4F2340 eax +
cmp dword_4F233C 0Ch +
jge loc_4B9634  +
mov eax dword_4F233C +
add dword_4F2340 eax +
add esi dword_4F233C +
xor eax eax +
mov dword_4F233C eax +
mov eax esi +
sub eax edi +
add dword_4F22DC eax +
mov eax [ebp+0] +
and eax 80000003h +
or esi eax +
mov [ebp+0] esi +
mov al 1 +
jmp loc_4B96F4  +
call unknown_libname_528  +
mov ebx ebp +
add ebx edi +
test byte ptr [ebx] 2 +
jnz loc_4B96AD  +
mov edx ebx +
mov eax edx +
mov ecx [eax+8] +
mov [esp+8+var_8] ecx +
mov ecx [esp+8+var_8] +
cmp ecx [esp+8+var_4] +
jge loc_4B9681  +
add edx [esp+8+var_8] +
mov ebx edx +
mov eax [esp+8+var_8] +
sub [esp+8+var_4] eax +
jmp loc_4B96AD  +
call unknown_libname_524  +
mov eax [esp+8+var_4] +
sub [esp+8+var_8] eax +
cmp [esp+8+var_8] 0Ch +
jl loc_4B96A1  +
mov eax ebp +
add eax esi +
mov edx [esp+8+var_8] +
call unknown_libname_527  +
jmp loc_4B96DB  +
add esi [esp+8+var_8] +
mov ebx ebp +
add ebx esi +
and dword ptr [ebx] 0FFFFFFFEh +
jmp loc_4B96DB  +
mov eax [ebx] +
test eax 80000000h +
jz loc_4B96D7  +
and eax 7FFFFFFCh +
add eax ebx +
mov ebx eax +
mov edx [esp+8+var_4] +
mov eax ebx +
call sub_4B90A4  +
test al al +
jz loc_4B96D7  +
mov ebx ebp +
add ebx edi +
jmp loc_4B95E4  +
xor eax eax +
jmp loc_4B96F4  +
mov eax esi +
sub eax edi +
add dword_4F22DC eax +
mov eax [ebp+0] +
and eax 80000003h +
or esi eax +
mov [ebp+0] esi +
mov al 1 +
pop ecx  +
pop edx  +
pop ebp  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push ecx  +
push ebx  +
push esi  +
push edi  +
mov esi edx +
mov ebx eax +
cmp byte_4F22E4 0 +
jnz loc_4B9723  +
call @System@_16436  +
test al al +
jnz loc_4B9723  +
xor eax eax +
mov [ebp+var_4] eax +
jmp loc_4B97B4  +
xor edx edx +
push ebp  +
push offset loc_4B97AD  +
push dword ptr fs:[edx]  +
mov fs:[edx] esp +
cmp byte_4F1D6D 0 +
jz loc_4B9744  +
push offset stru_4F22EC  +
call EnterCriticalSection  +
mov edx esi +
mov eax ebx +
call unknown_libname_530  +
test al al +
jz loc_4B9756  +
mov [ebp+var_4] ebx +
jmp loc_4B978C  +
mov eax esi +
call sub_4B91F8  +
mov edi eax +
mov eax ebx +
sub eax 4 +
mov eax [eax] +
and eax 7FFFFFFCh +
sub eax 4 +
cmp esi eax +
jge loc_4B9774  +
mov eax esi +
test edi edi +
jz loc_4B9789  +
mov edx edi +
mov ecx ebx +
xchg eax ecx +
call sub_4B9A24  +
mov eax ebx +
call @System@SysFreeMem$qqrpv  +
mov [ebp+var_4] edi +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4B97B4  +
cmp byte_4F1D6D 0 +
jz locret_4B97AC  +
push offset stru_4F22EC  +
call LeaveCriticalSection  +
retn   +
jmp unknown_libname_539  +
jmp loc_4B9799  +
mov eax [ebp+var_4] +
pop edi  +
pop esi  +
pop ebx  +
pop ecx  +
pop ebp  +
retn   +
***
jle loc_4B97DA  +
jz loc_4B97FA  +
mov ecx [eax] +
test ecx ecx +
jz loc_4B9838  +
test edx edx +
jz loc_4B9822  +
push eax  +
mov eax ecx +
call off_4E6F78  +
pop ecx  +
or eax eax +
jz loc_4B9831  +
mov [ecx] eax +
retn   +
mov al 2 +
jmp @System@Error$qqr20System@TRuntimeError  +
mov [eax] edx +
mov eax ecx +
call off_4E6F74  +
or eax eax +
jnz loc_4B981B  +
retn   +
mov al 1 +
jmp @System@Error$qqr20System@TRuntimeError  +
test edx edx +
jz locret_4B984C  +
push eax  +
mov eax edx +
call off_4E6F70  +
pop ecx  +
or eax eax +
jz loc_4B9831  +
mov [ecx] eax +
retn   +
***
mov edx off_4E6F70 +
mov [eax] edx +
mov edx off_4E6F74 +
mov [eax+4] edx +
mov edx off_4E6F78 +
mov [eax+8] edx +
retn   +
***
mov edx [eax] +
mov off_4E6F70 edx +
mov edx [eax+4] +
mov off_4E6F74 edx +
mov edx [eax+8] +
mov off_4E6F78 edx +
retn   +
***
mov eax offset sub_4B91F8 +
cmp eax off_4E6F70 +
jnz loc_4B98B2  +
mov eax offset @System@SysFreeMem$qqrpv +
cmp eax off_4E6F74 +
jnz loc_4B98B2  +
mov eax offset @System@SysReallocMem$qqrpvi +
cmp eax off_4E6F78 +
jnz loc_4B98B2  +
xor eax eax +
retn   +
mov al 1 +
retn   +
***
call @Sysinit@@GetTls$qqrv  +
call @Sysinit@@GetTls$qqrv  +
call @Sysinit@@GetTls$qqrv  +
cmp dword ptr [eax+8] 0 +
jz loc_4B9922  +
call @Sysinit@@GetTls$qqrv  +
mov esi [eax+8] +
mov ebx [esi+8] +
call @Sysinit@@GetTls$qqrv  +
xor eax eax +
mov [esi+8] eax +
jmp loc_4B9924  +
xor ebx ebx +
mov eax ebx +
pop esi  +
pop ebx  +
retn   +
***
mov dword_4E6F48 edx +
mov esi edx +
mov ebx eax +
and bl 7Fh +
cmp dword_4F1D24 0 +
jz loc_4B9954  +
mov edx esi +
mov eax ebx +
call dword_4F1D24  +
test bl bl +
jnz loc_4B9965  +
call @Sysinit@@GetTls$qqrv  +
mov ebx [eax+0Ch] +
jmp loc_4B9974  +
cmp bl 18h +
ja loc_4B9974  +
xor eax eax +
mov al bl +
mov bl byte_4E6F7C[eax] +
xor eax eax +
mov al bl +
mov edx esi +
call sub_4B992C  +
pop esi  +
pop ebx  +
retn   +
***
and eax 7Fh +
mov edx [esp+0] +
jmp @System@_16533  +
***
push ecx  +
call @Sysinit@@GetTls$qqrv  +
cmp dword ptr [eax+0Ch] 0 +
pop ecx  +
pop edx  +
pop eax  +
jnz loc_4B99A5  +
retn   +
xor eax eax +
jmp @System@Error$qqr20System@TRuntimeError  +
***
retn   +
***
call @Sysinit@@GetTls$qqrv  +
mov esi eax +
mov edi [esp+arg_0] +
xor eax eax +
or al [esi] +
jz loc_4B99F9  +
test edx edx +
jle loc_4B99EA  +
cmp edx eax +
jg loc_4B99F1  +
sub eax edx +
inc eax  +
test ecx ecx +
jl loc_4B99F1  +
cmp ecx eax +
jg loc_4B99F5  +
add esi edx +
mov [edi] cl +
inc edi  +
movs   +
jmp loc_4B99FB  +
mov edx 1 +
jmp loc_4B99D6  +
xor ecx ecx +
jmp loc_4B99E1  +
mov ecx eax +
jmp loc_4B99E1  +
mov [edi] al +
pop edi  +
pop esi  +
retn 4  +
***
retn   +
***
mov ebx [eax+0Ch] +
call @Sysinit@@GetTls$qqrv  +
xor edx edx +
mov [eax+0Ch] edx +
mov eax ebx +
pop ebx  +
retn   +
***
mov esi eax +
push edi  +
push ebp  +
mov esi edx +
mov ebx eax +
jmp loc_4B9A76  +
push ebx  +
call CharNextA  +
mov ebx eax +
mov al [ebx] +
test al al +
jz loc_4B9A80  +
cmp al 20h +
jbe loc_4B9A6E  +
cmp byte ptr [ebx] 22h +
jnz loc_4B9A90  +
cmp byte ptr [ebx+1] 22h +
jnz loc_4B9A90  +
add ebx 2 +
jmp loc_4B9A76  +
xor ebp ebp +
mov edi ebx +
jmp loc_4B9AD9  +
cmp al 22h +
jnz loc_4B9ACB  +
push ebx  +
call CharNextA  +
mov ebx eax +
jmp loc_4B9AB2  +
push ebx  +
call CharNextA  +
mov edx eax +
sub edx ebx +
add ebp edx +
mov ebx eax +
mov al [ebx] +
test al al +
jz loc_4B9ABC  +
cmp al 22h +
jnz loc_4B9AA4  +
cmp byte ptr [ebx] 0 +
jz loc_4B9AD9  +
push ebx  +
call CharNextA  +
mov ebx eax +
jmp loc_4B9AD9  +
push ebx  +
call CharNextA  +
mov edx eax +
sub edx ebx +
add ebp edx +
mov ebx eax +
mov al [ebx] +
cmp al 20h +
ja loc_4B9A96  +
mov eax esi +
mov edx ebp +
call @System@@LStrSetLength$qqrv  +
mov ebx edi +
mov edi [esi] +
xor esi esi +
jmp loc_4B9B41  +
cmp al 22h +
jnz loc_4B9B2C  +
push ebx  +
call CharNextA  +
mov ebx eax +
jmp loc_4B9B13  +
push ebx  +
call CharNextA  +
cmp eax ebx +
jbe loc_4B9B13  +
mov dl [ebx] +
mov [edi+esi] dl +
inc ebx  +
inc esi  +
cmp eax ebx +
ja loc_4B9B08  +
mov al [ebx] +
test al al +
jz loc_4B9B1D  +
cmp al 22h +
jnz loc_4B9AFE  +
cmp byte ptr [ebx] 0 +
jz loc_4B9B41  +
push ebx  +
call CharNextA  +
mov ebx eax +
jmp loc_4B9B41  +
push ebx  +
call CharNextA  +
cmp eax ebx +
jbe loc_4B9B41  +
mov dl [ebx] +
mov [edi+esi] dl +
inc ebx  +
inc esi  +
cmp eax ebx +
ja loc_4B9B36  +
mov al [ebx] +
cmp al 20h +
ja loc_4B9AF0  +
mov eax ebx +
pop ebp  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push 0  +
push ebx  +
push esi  +
xor eax eax +
push ebp  +
push offset loc_4B9BA1  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
xor esi esi +
call GetCommandLineA  +
lea edx [ebp+var_4] +
call sub_4B9A64  +
mov ebx eax +
lea edx [ebp+var_4] +
mov eax ebx +
call sub_4B9A64  +
mov ebx eax +
cmp [ebp+var_4] 0 +
jz loc_4B9B8B  +
inc esi  +
jmp loc_4B9B76  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4B9BA8  +
lea eax [ebp+var_4] +
call unknown_libname_540  +
retn   +
jmp unknown_libname_539  +
jmp loc_4B9B98  +
mov eax esi +
pop esi  +
pop ebx  +
pop ecx  +
pop ebp  +
retn   +
***
push edi  +
add esp 0FFFFFEF8h +
mov ebx edx +
mov esi eax +
mov eax ebx +
call unknown_libname_540  +
test esi esi +
jnz loc_4B9BE6  +
push 105h  +
lea eax [esp+10Ch+Filename] +
push eax  +
push 0  +
call GetModuleFileNameA  +
mov ecx eax +
mov edx esp +
mov eax ebx +
call @@LStrFromPCharLen$qqrr10AnsiStringpci  +
jmp loc_4B9C04  +
call GetCommandLineA  +
mov edi eax +
mov edx ebx +
mov eax edi +
call sub_4B9A64  +
mov edi eax +
test esi esi +
jz loc_4B9C04  +
cmp dword ptr [ebx] 0 +
jz loc_4B9C04  +
dec esi  +
jmp loc_4B9BED  +
add esp 108h +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
cmp al 61h +
jb locret_4B9C1A  +
cmp al 7Ah +
ja locret_4B9C1A  +
sub al 20h +
retn   +
***
sub esp 8 +
fistp  [esp+8+var_8] +
wait   +
pop eax  +
pop edx  +
retn   +
***
cmp dword_4F1D48 0 +
jz loc_4B9C37  +
call dword_4F1D48  +
mov eax 0D2h +
jmp sub_4BB34C  +
***
retn   +
***
mov esi edx +
mov dx 0D7B2h +
call sub_4B9C44  +
retn   +
***
xor eax eax +
mov [ebx+10h] eax +
xor eax eax +
mov [ebx+0Ch] eax +
push 0  +
lea eax [ebx+10h] +
push eax  +
mov eax [ebx+8] +
push eax  +
mov eax [ebx+14h] +
push eax  +
mov eax [ebx] +
push eax  +
call ReadFile  +
test eax eax +
jnz loc_4B9CDD  +
call GetLastError  +
cmp eax 6Dh +
jnz loc_4B9CDF  +
xor eax eax +
pop ebx  +
retn   +
xor eax eax +
pop ebx  +
retn   +
***
retn   +
***
push ecx  +
mov ebx eax +
mov esi [ebx+0Ch] +
test esi esi +
jnz loc_4B9CF8  +
xor eax eax +
jmp loc_4B9D1E  +
push 0  +
lea eax [esp+8+NumberOfBytesWritten] +
push eax  +
push esi  +
mov eax [ebx+14h] +
push eax  +
mov eax [ebx] +
push eax  +
call WriteFile  +
test eax eax +
jnz loc_4B9D17  +
call GetLastError  +
jmp loc_4B9D19  +
xor eax eax +
xor edx edx +
mov [ebx+0Ch] edx +
pop edx  +
pop esi  +
pop ebx  +
retn   +
***
push ebx  +
call CloseHandle  +
dec eax  +
setz al  +
pop ebx  +
retn   +
***
mov word ptr [ebx+4] 0D7B0h +
mov eax [ebx] +
call @System@_16582  +
test al al +
jnz loc_4B9D4F  +
call GetLastError  +
pop ebx  +
retn   +
xor eax eax +
pop ebx  +
retn   +
***
push esi  +
mov esi eax +
xor eax eax +
mov [esi+0Ch] eax +
mov [esi+10h] eax +
mov ax [esi+4] +
sub eax 0D7B1h +
jz loc_4B9D75  +
dec eax  +
jz loc_4B9D8D  +
dec eax  +
jz loc_4B9D9E  +
jmp loc_4B9EDC  +
mov eax 80000000h +
mov edx 1 +
mov ecx 3 +
mov dword ptr [esi+1Ch] offset @System@_16579 +
jmp loc_4B9DB4  +
mov eax 40000000h +
mov edx 1 +
mov ecx 2 +
jmp loc_4B9DAD  +
mov eax 0C0000000h +
mov edx 1 +
mov ecx 3 +
mov dword ptr [esi+1Ch] offset @System@_16581 +
mov dword ptr [esi+24h] offset @System@_16583 +
mov dword ptr [esi+20h] offset sub_4B9CE4 +
cmp byte ptr [esi+48h] 0 +
jz loc_4B9E7E  +
push 0  +
push 80h  +
push ecx  +
push 0  +
push edx  +
push eax  +
lea eax [esi+48h] +
push eax  +
call CreateFileA  +
cmp eax 0FFFFFFFFh +
jz loc_4B9EF2  +
mov [esi] eax +
cmp word ptr [esi+4] 0D7B3h +
jnz loc_4B9EBB  +
dec word ptr [esi+4]  +
push 0  +
push dword ptr [esi]  +
call GetFileSize  +
inc eax  +
jz loc_4B9EF2  +
sub eax 81h +
jnb loc_4B9E15  +
xor eax eax +
push 0  +
push 0  +
push eax  +
push dword ptr [esi]  +
call SetFilePointer  +
inc eax  +
jz loc_4B9EF2  +
push 0  +
mov edx esp +
push 0  +
push edx  +
push 80h  +
lea edx [esi+14Ch] +
push edx  +
push dword ptr [esi]  +
call ReadFile  +
pop edx  +
dec eax  +
jnz loc_4B9EF2  +
xor eax eax +
cmp eax edx +
jnb loc_4B9EBB  +
cmp byte ptr [esi+eax+14Ch] 0Eh +
jz loc_4B9E5D  +
inc eax  +
jmp loc_4B9E4C  +
***
push 2  +
push 0  +
sub eax edx +
push eax  +
push dword ptr [esi]  +
call SetFilePointer  +
inc eax  +
jz loc_4B9EF2  +
push dword ptr [esi]  +
call SetEndOfFile  +
dec eax  +
jnz loc_4B9EF2  +
jmp loc_4B9EBB  +
lea eax [esi+14Ch] +
mov dword ptr [esi+8] 80h +
mov dword ptr [esi+24h] offset sub_4B9CE4 +
mov [esi+14h] eax +
cmp word ptr [esi+4] 0D7B2h +
jz loc_4B9EA1  +
push 0FFFFFFF6h  +
jmp loc_4B9EAF  +
cmp esi offset unk_4F2108 +
jnz loc_4B9EAD  +
push 0FFFFFFF4h  +
jmp loc_4B9EAF  +
push 0FFFFFFF5h  +
call GetStdHandle  +
cmp eax 0FFFFFFFFh +
jz loc_4B9EF2  +
mov [esi] eax +
cmp word ptr [esi+4] 0D7B1h +
jz loc_4B9EDA  +
push dword ptr [esi]  +
call GetFileType  +
test eax eax +
jz loc_4B9EDE  +
cmp eax 2 +
jnz loc_4B9EDA  +
mov dword ptr [esi+20h] offset @System@_16581 +
xor eax eax +
pop esi  +
retn   +
***
push dword ptr [esi]  +
call CloseHandle  +
mov word ptr [esi+4] 0D7B0h +
mov eax 69h +
jmp loc_4B9EDC  +
***
mov word ptr [esi+4] 0D7B0h +
call GetLastError  +
jmp loc_4B9EDC  +
***
sub cx 0D7B1h +
jz loc_4B9F1B  +
dec ecx  +
sub cx 2 +
jnb loc_4B9F1F  +
mov ebx edx +
call ebx  +
mov ebx eax +
jmp loc_4B9F36  +
xor ebx ebx +
jmp loc_4B9F36  +
cmp eax offset unk_4F1F3C +
jz loc_4B9F2D  +
cmp eax offset unk_4F2108 +
jnz loc_4B9F31  +
xor ebx ebx +
jmp loc_4B9F36  +
mov ebx 67h +
test ebx ebx +
jz loc_4B9F41  +
mov eax ebx +
call @System@SetInOutRes$qqri  +
mov eax ebx +
pop ebx  +
retn   +
***
mov edx [eax+1Ch] +
call sub_4B9F00  +
retn   +
***
mov edx [eax+20h] +
call sub_4B9F00  +
retn   +
***
mov ebx eax +
xor esi esi +
mov ax [ebx+4] +
cmp ax 0D7B1h +
jb loc_4B9F9F  +
cmp ax 0D7B3h +
ja loc_4B9F9F  +
and ax 0D7B2h +
cmp ax 0D7B2h +
jnz loc_4B9F87  +
mov eax ebx +
call dword ptr [ebx+1Ch]  +
mov esi eax +
test esi esi +
jnz loc_4B9F92  +
mov eax ebx +
call dword ptr [ebx+24h]  +
mov esi eax +
test esi esi +
jz loc_4B9FB1  +
mov eax esi +
call @System@SetInOutRes$qqri  +
jmp loc_4B9FB1  +
cmp ebx offset unk_4F1D70 +
jz loc_4B9FB1  +
mov eax 67h +
call @System@SetInOutRes$qqri  +
mov eax esi +
pop esi  +
pop ebx  +
retn   +
***
cmp cl bl +
jbe loc_4B9FC1  +
mov ecx ebx +
mov [eax] cl +
inc edx  +
inc eax  +
and ecx 0FFh +
xchg eax edx +
call sub_4B9A24  +
pop ebx  +
retn   +
***
push edi  +
mov esi eax +
mov edi edx +
xor eax eax +
xor edx edx +
mov al [esi] +
mov dl [edi] +
inc esi  +
inc edi  +
sub eax edx +
ja loc_4B9FEB  +
add edx eax +
push edx  +
shr edx 2 +
jz loc_4BA017  +
mov ecx [esi] +
mov ebx [edi] +
cmp ecx ebx +
jnz loc_4BA03D  +
dec edx  +
jz loc_4BA011  +
mov ecx [esi+4] +
mov ebx [edi+4] +
cmp ecx ebx +
jnz loc_4BA03D  +
add esi 8 +
add edi 8 +
dec edx  +
jnz loc_4B9FF1  +
jmp loc_4BA017  +
add esi 4 +
add edi 4 +
pop edx  +
and edx 3 +
jz loc_4BA039  +
mov cl [esi] +
cmp cl [edi] +
jnz loc_4BA052  +
dec edx  +
jz loc_4BA039  +
mov cl [esi+1] +
cmp cl [edi+1] +
jnz loc_4BA052  +
dec edx  +
jz loc_4BA039  +
mov cl [esi+2] +
cmp cl [edi+2] +
jnz loc_4BA052  +
add eax eax +
jmp loc_4BA052  +
pop edx  +
cmp cl bl +
jnz loc_4BA052  +
cmp ch bh +
jnz loc_4BA052  +
shr ecx 10h +
shr ebx 10h +
cmp cl bl +
jnz loc_4BA052  +
cmp ch bh +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push ecx  +
mov esi ecx +
shr esi 2 +
jz loc_4BA088  +
mov ecx [eax] +
mov ebx [edx] +
cmp ecx ebx +
jnz loc_4BA0AF  +
dec esi  +
jz loc_4BA082  +
mov ecx [eax+4] +
mov ebx [edx+4] +
cmp ecx ebx +
jnz loc_4BA0AF  +
add eax 8 +
add edx 8 +
dec esi  +
jnz loc_4BA062  +
jmp loc_4BA088  +
add eax 4 +
add edx 4 +
pop esi  +
and esi 3 +
jz loc_4BA0C4  +
mov cl [eax] +
cmp cl [edx] +
jnz loc_4BA0C4  +
dec esi  +
jz loc_4BA0AA  +
mov cl [eax+1] +
cmp cl [edx+1] +
jnz loc_4BA0C4  +
dec esi  +
jz loc_4BA0AA  +
mov cl [eax+2] +
cmp cl [edx+2] +
jnz loc_4BA0C4  +
xor eax eax +
pop esi  +
pop ebx  +
retn   +
pop esi  +
cmp cl bl +
jnz loc_4BA0C4  +
cmp ch bh +
jnz loc_4BA0C4  +
shr ecx 10h +
shr ebx 10h +
cmp cl bl +
jnz loc_4BA0C4  +
cmp ch bh +
pop esi  +
pop ebx  +
retn   +
***
mov ch cl +
mov eax ecx +
shl eax 10h +
mov ax cx +
mov ecx edx +
sar ecx 2 +
js loc_4BA0E5  +
stos   +
mov ecx edx +
and ecx 3 +
stos   +
pop edi  +
retn   +
***
push edi  +
mov esi eax +
push eax  +
test eax eax +
jz loc_4BA15E  +
xor eax eax +
xor ebx ebx +
mov edi 0CCCCCCCh +
mov bl [esi] +
inc esi  +
cmp bl 20h +
jz loc_4BA0FB  +
mov ch 0 +
cmp bl 2Dh +
jz loc_4BA16C  +
cmp bl 2Bh +
jz loc_4BA16E  +
cmp bl 24h +
jz loc_4BA173  +
cmp bl 78h +
jz loc_4BA173  +
cmp bl 58h +
jz loc_4BA173  +
cmp bl 30h +
jnz loc_4BA136  +
mov bl [esi] +
inc esi  +
cmp bl 78h +
jz loc_4BA173  +
cmp bl 58h +
jz loc_4BA173  +
test bl bl +
jz loc_4BA154  +
jmp loc_4BA13A  +
test bl bl +
jz loc_4BA167  +
sub bl 30h +
cmp bl 9 +
ja loc_4BA167  +
cmp eax edi +
ja loc_4BA167  +
lea eax [eax+eax*4] +
add eax eax +
add eax ebx +
mov bl [esi] +
inc esi  +
test bl bl +
jnz loc_4BA13A  +
dec ch  +
jz loc_4BA161  +
test eax eax +
jge loc_4BA1AA  +
jmp loc_4BA167  +
inc esi  +
jmp loc_4BA167  +
neg eax  +
jle loc_4BA1AA  +
js loc_4BA1AA  +
pop ebx  +
sub esi ebx +
jmp loc_4BA1AD  +
inc ch  +
mov bl [esi] +
inc esi  +
jmp loc_4BA136  +
mov edi 0FFFFFFFh +
mov bl [esi] +
inc esi  +
test bl bl +
jz loc_4BA15E  +
cmp bl 61h +
jb loc_4BA187  +
sub bl 20h +
sub bl 30h +
cmp bl 9 +
jbe loc_4BA19A  +
sub bl 11h +
cmp bl 5 +
ja loc_4BA167  +
add bl 0Ah +
cmp eax edi +
ja loc_4BA167  +
shl eax 4 +
add eax ebx +
mov bl [esi] +
inc esi  +
test bl bl +
jnz loc_4BA17F  +
pop ecx  +
xor esi esi +
mov [edx] esi +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
cmp ebx offset unk_4F1F3C +
jz loc_4BA1C7  +
cmp ebx offset unk_4F2108 +
jnz loc_4BA1D9  +
xor eax eax +
mov al byte_4E6F64 +
mov [ebx+6] ax +
mov eax ebx +
call @System@@RewritText$qqrr15System@TTextRec  +
cmp word ptr [ebx+4] 0D7B2h +
setz al  +
mov ebx eax +
test bl bl +
jnz loc_4BA1F2  +
mov eax 69h +
call @System@SetInOutRes$qqri  +
mov eax ebx +
pop ebx  +
retn   +
***
mov esi edx +
cmp word ptr [eax+4] 0D7B2h +
jz loc_4BA213  +
push eax  +
push edx  +
push ecx  +
call sub_4BA1B4  +
test al al +
pop ecx  +
pop edx  +
pop eax  +
jz loc_4BA248  +
mov edi [eax+14h] +
add edi [eax+0Ch] +
mov edx [eax+8] +
sub edx [eax+0Ch] +
cmp edx ecx +
jg loc_4BA243  +
add [eax+0Ch] edx +
sub ecx edx +
push eax  +
push ecx  +
mov ecx edx +
movs   +
call dword ptr [eax+1Ch]  +
test eax eax +
jnz loc_4BA239  +
pop ecx  +
pop eax  +
jmp loc_4BA213  +
call @System@SetInOutRes$qqri  +
pop ecx  +
pop eax  +
pop edi  +
pop esi  +
retn   +
add [eax+0Ch] ecx +
movs   +
pop edi  +
pop esi  +
retn   +
***
mov ecx edx +
mov edx offset dword_4BA27C +
cmp ecx 40h +
jle loc_4BA2BC  +
sub ecx 40h +
push eax  +
push ecx  +
mov ecx 40h +
call @System@_16641  +
call @Sysinit@@GetTls$qqrv  +
cmp dword ptr [eax+0Ch] 0 +
jnz loc_4BA279  +
pop ecx  +
pop eax  +
jmp loc_4BA24E  +
pop ecx  +
pop eax  +
retn   +
test ecx ecx +
jg @System@_16641  +
retn   +
***
mov ecx 0FFh +
call @System@@_CLenToPasStr$qqrp28System@_SmallString$iuc$255_pxci  +
retn   +
***
cmp ecx 0FFh +
jbe loc_4BA2E3  +
mov ecx 0FFh +
mov bl [edx] +
inc edx  +
test bl bl +
jz loc_4BA2F0  +
inc eax  +
mov [eax] bl +
dec ecx  +
jnz loc_4BA2E3  +
pop edx  +
sub eax edx +
mov [edx] al +
pop ebx  +
retn   +
***
push edi  +
xor ebx ebx +
mov bl ah +
movzx esi al +
movzx edx dl +
mov edi ecx +
mov ecx ebx +
xor eax eax +
stos   +
sub edi ebx +
shl ebx 3 +
cmp edx ebx +
jb loc_4BA319  +
lea edx [ebx-1] +
cmp esi edx +
ja loc_4BA34A  +
dec eax  +
mov ecx esi +
and cl 7 +
shl al cl +
shr esi 3 +
mov cl dl +
not cl  +
and cl 7 +
shr ah cl +
shr edx 3 +
add edi esi +
mov ecx edx +
sub ecx esi +
jnz loc_4BA342  +
and al ah +
mov [edi] al +
jmp loc_4BA34A  +
stos   +
dec ecx  +
mov al 0FFh +
stos   +
mov [edi] ah +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov esi eax +
mov edi edx +
and ecx 0FFh +
cmps   +
pop edi  +
pop esi  +
retn   +
***
jmp loc_4BA36C  +
retn   +
push ebx  +
xor ebx ebx +
test eax eax +
jl loc_4BA3C0  +
jz loc_4BA40F  +
cmp eax 1400h +
jge loc_4BA405  +
mov edx eax +
and edx 1Fh +
lea edx [edx+edx*4] +
fld  ds:tbyte_4BA41B[ebx+edx*2] +
fmulp st(1) st +
shr eax 5 +
jz loc_4BA40F  +
mov edx eax +
and edx 0Fh +
jz loc_4BA3AD  +
lea edx [edx+edx*4] +
fld  ds:tbyte_4BA551[ebx+edx*2] +
fmulp st(1) st +
shr eax 4 +
jz loc_4BA40F  +
lea eax [eax+eax*4] +
fld  ds:tbyte_4BA5E7[ebx+eax*2] +
fmulp st(1) st +
jmp loc_4BA40F  +
neg eax  +
cmp eax 1400h +
jge loc_4BA40D  +
mov edx eax +
and edx 1Fh +
lea edx [edx+edx*4] +
fld  ds:tbyte_4BA41B[ebx+edx*2] +
fdivp st(1) st +
shr eax 5 +
jz loc_4BA40F  +
mov edx eax +
and edx 0Fh +
jz loc_4BA3F2  +
lea edx [edx+edx*4] +
fld  ds:tbyte_4BA551[ebx+edx*2] +
fdivp st(1) st +
shr eax 4 +
jz loc_4BA40F  +
lea eax [eax+eax*4] +
fld  ds:tbyte_4BA5E7[ebx+eax*2] +
fdivp st(1) st +
jmp loc_4BA40F  +
fld  ds:tbyte_4BA411[ebx] +
jmp loc_4BA40F  +
fldz   +
pop ebx  +
retn   +
***
push 0  +
call GetKeyboardType  +
cmp eax 7 +
jnz loc_4BA677  +
push 1  +
call GetKeyboardType  +
and eax 0FF00h +
cmp eax 0D00h +
jz loc_4BA675  +
cmp eax 400h +
jnz loc_4BA677  +
mov bl 1 +
mov eax ebx +
pop ebx  +
retn   +
***
add esp 0FFFFFFF4h +
movzx eax word_4E6F50 +
mov dword ptr [ebp+Data] eax +
lea eax [ebp+hKey] +
push eax  +
push 1  +
push 0  +
push offset SubKey  +
push 80000002h  +
call RegOpenKeyExA  +
test eax eax +
jnz loc_4BA6F4  +
xor eax eax +
push ebp  +
push offset loc_4BA6ED  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov [ebp+cbData] 4 +
lea eax [ebp+cbData] +
push eax  +
lea eax [ebp+Data] +
push eax  +
push 0  +
push 0  +
push offset aFpumaskvalue  +
mov eax [ebp+hKey] +
push eax  +
call RegQueryValueExA  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4BA6F4  +
mov eax [ebp+hKey] +
push eax  +
call RegCloseKey  +
retn   +
jmp unknown_libname_539  +
jmp loc_4BA6E3  +
mov ax word_4E6F50 +
and ax 0FFC0h +
mov dx word ptr [ebp+Data] +
and dx 3Fh +
or ax dx +
mov word_4E6F50 ax +
mov esp ebp +
pop ebp  +
retn   +
***
fninit   +
wait   +
fldcw  word_4E6F50 +
retn   +
***
mov al 4 +
jmp @System@Error$qqr20System@TRuntimeError  +
***
mov eax [eax] +
mov edx eax +
mov eax edx +
retn   +
***
mov edi edx +
mov esi [eax-2Ch] +
xor ecx ecx +
mov cl [esi] +
inc ecx  +
movs   +
pop edi  +
pop esi  +
retn   +
***
or edx edx +
jz loc_4BA793  +
mov eax [eax-2Ch] +
xor ecx ecx +
mov cl [eax] +
cmp ecx [edx-4] +
jnz loc_4BA793  +
dec edx  +
mov bh [ecx+eax] +
xor bh [ecx+edx] +
and bh 0DFh +
jnz loc_4BA793  +
dec ecx  +
jnz loc_4BA784  +
inc ebx  +
mov al bl +
pop ebx  +
retn   +
***
mov eax [eax-24h] +
test eax eax +
jz locret_4BA7A1  +
mov eax [eax] +
retn   +
***
mov eax ebx +
call @System@TObject@InstanceSize$qqrp17System@TMetaClass  +
call sub_4B97C0  +
mov edx eax +
mov eax ebx +
call @System@TObject@InitInstance$qqrp17System@TMetaClasspv  +
pop ebx  +
retn   +
***
mov eax ebx +
call @System@TObject@CleanupInstance$qqrv  +
mov eax ebx +
call sub_4B97E0  +
pop ebx  +
retn   +
***
mov eax [eax] +
retn   +
***
test dl dl +
call unknown_libname_536  +
test dl dl +
jle locret_4BA80A  +
call @System@@ClassDestroy$qqrp14System@TObject  +
retn   +
***
test eax eax +
push edi  +
mov ebx eax +
mov edi edx +
stos   +
mov ecx [ebx-28h] +
xor eax eax +
push ecx  +
shr ecx 2 +
dec ecx  +
stos   +
pop ecx  +
and ecx 3 +
stos   +
mov eax edx +
mov edx esp +
mov ecx [ebx-48h] +
test ecx ecx +
jz loc_4BA83E  +
push ecx  +
mov ebx [ebx-24h] +
test ebx ebx +
jz loc_4BA849  +
mov ebx [ebx] +
jmp loc_4BA836  +
cmp esp edx +
jz loc_4BA86A  +
pop ebx  +
mov ecx [ebx] +
add ebx 4 +
mov esi [ebx+10h] +
test esi esi +
jz loc_4BA860  +
mov edi [ebx+14h] +
mov [edi+eax] esi +
add ebx 1Ch +
dec ecx  +
jnz loc_4BA853  +
cmp esp edx +
jnz loc_4BA84D  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov ebx eax +
xchg edx ecx +
cmp ecx 0FF000000h +
jnb loc_4BA8AB  +
cmp ecx 0FE000000h +
jb loc_4BA8A9  +
movsx ecx cx +
add ecx [eax] +
jmp dword ptr [ecx]  +
jmp ecx  +
and ecx 0FFFFFFh +
add ecx eax +
mov eax edx +
mov edx [ecx] +
jmp @System@@IntfCopy$qqrr45System@_DelphiInterface$t17System@IInterface_x45System@_DelphiInterface$t17System@IInterface_  +
***
retn   +
***
add esp 0FFFFFFF8h +
mov ebx eax +
mov esi edx +
mov ebx eax +
test ebx ebx +
jz loc_4BA9AF  +
mov edx esi +
mov eax [ebx] +
call @System@TObject@InheritsFrom$qqrp17System@TMetaClasst1  +
test al al +
jnz loc_4BA9B4  +
xor eax eax +
pop esi  +
pop ebx  +
retn   +
mov al 1 +
pop esi  +
pop ebx  +
retn   +
***
test eax eax +
jz locret_4BA9D6  +
mov ecx eax +
mov ecx [ecx] +
cmp ecx edx +
jz locret_4BA9D6  +
mov ecx [ecx-24h] +
test ecx ecx +
jnz loc_4BA9C2  +
mov al 0Ah +
jmp @System@Error$qqr20System@TRuntimeError  +
retn   +
***
jmp loc_4BA9DE  +
mov esi [esi] +
mov edi [esi-30h] +
test edi edi +
jz loc_4BA9F2  +
movzx ecx word ptr [edi] +
push ecx  +
add edi 2 +
scas   +
jz loc_4BA9FB  +
pop ecx  +
mov esi [esi-24h] +
test esi esi +
jnz loc_4BA9DC  +
pop edi  +
retn   +
pop eax  +
add eax eax +
sub eax ecx +
mov esi [edi+eax*2-4] +
pop edi  +
retn   +
***
mov eax [eax] +
call @System@_16716  +
pop ecx  +
pop eax  +
jz loc_4BAA17  +
jmp esi  +
pop ecx  +
jmp @System@@AbstractError$qqrv  +
***
retn   +
***
mov eax [eax] +
call @System@_16716  +
mov eax esi +
pop esi  +
jnz locret_4BAA35  +
pop ecx  +
jmp @System@@AbstractError$qqrv  +
retn   +
***
jmp loc_4BAA3C  +
mov eax [eax] +
cmp eax edx +
jz loc_4BAA48  +
mov eax [eax-24h] +
test eax eax +
jnz loc_4BAA3A  +
retn   +
mov al 1 +
retn   +
***
mov eax [eax] +
retn   +
***
retn   +
***
or si si +
jz loc_4BAA88  +
cmp si 0C000h +
jnb loc_4BAA88  +
push eax  +
mov eax [eax] +
call @System@_16716  +
pop eax  +
jz loc_4BAA88  +
mov ecx esi +
pop esi  +
jmp ecx  +
pop esi  +
mov ecx [eax] +
jmp dword ptr [ecx-10h]  +
***
retn   +
***
push edi  +
xor ecx ecx +
xor edi edi +
mov bl [edx] +
jmp loc_4BAA9D  +
mov eax [eax] +
mov esi [eax-34h] +
test esi esi +
jz loc_4BAAB9  +
mov di [esi] +
add esi 2 +
mov cl [esi+6] +
cmp cl bl +
jz loc_4BAAC6  +
mov cx [esi] +
add esi ecx +
dec edi  +
jnz loc_4BAAAA  +
mov eax [eax-24h] +
test eax eax +
jnz loc_4BAA9B  +
jmp loc_4BAADA  +
mov bl [edx] +
jmp loc_4BAAB1  +
mov ch 0 +
mov bl [ecx+esi+6] +
xor bl [ecx+edx] +
and bl 0DFh +
jnz loc_4BAAC2  +
dec ecx  +
jnz loc_4BAAC8  +
mov eax [esi+2] +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
push edi  +
push ebx  +
mov eax [esp+2Ch] +
mov eax [eax+0Ch] +
test eax eax +
jz loc_4BABB7  +
mov ecx [eax] +
mov dl 81h +
push eax  +
call dword ptr [ecx-4]  +
pop eax  +
call @System@@ClassDestroy$qqrp14System@TObject  +
call @System@@RaiseAgain$qqrv  +
retn   +
***
call dword ptr [edx-8]  +
retn   +
***
mov eax ebx +
mov edx [eax] +
call dword ptr [edx-1Ch]  +
mov eax ebx +
pop ebx  +
retn   +
***
test dl dl +
jg loc_4BABDD  +
retn   +
push eax  +
push edx  +
mov edx [eax] +
call dword ptr [edx-18h]  +
pop edx  +
pop eax  +
retn   +
***
cmp byte_4E6F58 1 +
jbe locret_4BAC02  +
push 0  +
push 0  +
push 0  +
push 0EEDFADFh  +
call dword_4F1D30  +
retn   +
***
cmp byte_4E6F58 0 +
jz locret_4BAC24  +
push eax  +
push eax  +
push edx  +
push esp  +
push 2  +
push 0  +
push 0EEDFAE4h  +
call dword_4F1D30  +
add esp 8 +
pop eax  +
retn   +
***
push esp  +
push 1  +
push 0  +
push 0EEDFAE0h  +
call dword_4F1D30  +
add esp 4 +
pop eax  +
retn   +
***
cmp byte_4E6F58 1 +
jbe locret_4BAC52  +
push eax  +
push dword ptr [ebx+4]  +
jmp @System@_16737  +
retn   +
***
cmp byte_4E6F58 1 +
jbe locret_4BAC64  +
push eax  +
push ebx  +
jmp @System@_16737  +
retn   +
***
test ecx ecx +
jz locret_4BAC85  +
mov eax [ecx+1] +
cmp byte ptr [ecx] 0E9h +
jz loc_4BAC80  +
cmp byte ptr [ecx] 0EBh +
jnz locret_4BAC85  +
movsx eax al +
inc ecx  +
inc ecx  +
jmp loc_4BAC83  +
add ecx 5 +
add ecx eax +
retn   +
***
cmp byte_4E6F58 1 +
jbe locret_4BACAE  +
push eax  +
push edx  +
push ecx  +
call sub_4BAC68  +
push ecx  +
push esp  +
push 1  +
push 0  +
push 0EEDFAE1h  +
call dword_4F1D30  +
pop ecx  +
pop ecx  +
pop edx  +
pop eax  +
retn   +
***
cmp byte_4E6F58 1 +
jbe locret_4BACCB  +
push edx  +
push esp  +
push 1  +
push 0  +
push 0EEDFAE2h  +
call dword_4F1D30  +
pop edx  +
retn   +
***
call @Sysinit@@GetTls$qqrv  +
mov ecx [eax+8] +
mov edx [ecx] +
mov [eax+8] edx +
mov eax [ecx+8] +
jmp @System@TObject@Free$qqrv  +
***
mov eax 1 +
retn   +
***
mov eax [esp+arg_0] +
retn   +
***
mov eax [esp+88h+var_84] +
mov edx [esp+88h+var_80] +
test dword ptr [eax+4] 6 +
jz loc_4BAFB0  +
mov ecx [edx+4] +
mov dword ptr [edx+4] offset loc_4BAFB0 +
push ebx  +
push esi  +
push edi  +
push ebp  +
mov ebp [edx+8] +
add ecx 5 +
call @System@_16741  +
call ecx  +
pop ebp  +
pop edi  +
pop esi  +
pop ebx  +
mov eax 1 +
retn   +
***
or eax eax +
jnz loc_4BAFC6  +
mov eax 0D8h +
call sub_4BB34C  +
pop edx  +
push esp  +
push ebp  +
push edi  +
push esi  +
push ebx  +
push eax  +
push edx  +
push esp  +
push 7  +
push 1  +
push 0EEDFADEh  +
push edx  +
jmp dword_4F1D30  +
***
mov eax [esp+arg_2C] +
retn   +
***
call @Sysinit@@GetTls$qqrv  +
mov edx [eax+8] +
mov ecx [edx] +
mov [eax+8] ecx +
mov eax [edx+8] +
call @System@TObject@Free$qqrv  +
pop edx  +
mov esp [esp-4+arg_2C] +
xor eax eax +
pop ecx  +
mov fs:[eax] ecx +
pop eax  +
pop ebp  +
call @System@_16742  +
jmp edx  +
***
xor edx edx +
mov ecx [esp+arg_4] +
mov eax [esp+arg_0] +
add ecx 5 +
mov fs:[edx] eax +
call ecx  +
retn 0Ch  +
***
retn   +
***
xor edx edx +
push ebx  +
push esi  +
push edi  +
mov edi offset unk_4F2358 +
mov eax [edi+8] +
test eax eax +
jz loc_4BB0FE  +
mov ebx [edi+0Ch] +
mov esi [eax+4] +
xor edx edx +
push ebp  +
push offset loc_4BB0EA  +
push dword ptr fs:[edx]  +
mov fs:[edx] esp +
test ebx ebx +
jle loc_4BB0E0  +
dec ebx  +
mov [edi+0Ch] ebx +
mov eax [esi+ebx*8+4] +
test eax eax +
jz loc_4BB0DC  +
call eax  +
test ebx ebx +
jg loc_4BB0CE  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
jmp loc_4BB0FE  +
jmp @System@@HandleAnyException$qqrv  +
call @System@_16604  +
call @System@@RaiseAgain$qqrv  +
call @@DoneExcept$qqrv  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
push edi  +
push esi  +
mov edi [eax+ebx] +
lea esi [eax+ebx+4] +
mov eax [esi+4] +
mov edx [esi] +
mov eax [eax+ebx] +
add edx ebx +
call @System@LoadResString$qqrp20System@TResStringRec  +
add esi 8 +
dec edi  +
jnz loc_4BB110  +
pop esi  +
pop edi  +
pop ebx  +
retn   +
***
push edi  +
push edi  +
mov esi offset Text +
mov cl 10h +
mov ebx dword_4E6F44 +
mov eax ebx +
mov edi 0Ah +
cdq   +
idiv  edi +
add dl 30h +
xor eax eax +
mov al cl +
mov [esi+eax] dl +
mov eax ebx +
mov ebx 0Ah +
cdq   +
idiv  ebx +
mov ebx eax +
dec ecx  +
test ebx ebx +
jnz loc_4BB160  +
mov cl 1Ch +
mov eax dword_4E6F48 +
mov edx eax +
and edx 0Fh +
mov dl byte_4E6FC0[edx] +
xor ebx ebx +
mov bl cl +
mov [esi+ebx] dl +
shr eax 4 +
dec ecx  +
test eax eax +
jnz loc_4BB18C  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
xor eax eax +
xchg eax dword_4E6F44 +
neg eax  +
sbb eax eax +
inc eax  +
mov edi offset unk_4F2358 +
mov ebx [edi+18h] +
mov ebp [edi+14h] +
push dword ptr [edi+1Ch]  +
push dword ptr [edi+20h]  +
mov esi [edi] +
mov ecx 0Bh +
movs   +
pop edi  +
pop esi  +
leave   +
retn 0Ch  +
***
retn   +
***
jz loc_4BB23D  +
cmp word_4F1F40 0D7B2h +
jnz loc_4BB205  +
cmp dword_4F1F48 0 +
jbe loc_4BB205  +
mov eax offset unk_4F1F3C +
call dword_4F1F58  +
push 0  +
lea eax [esp+8+NumberOfBytesWritten] +
push eax  +
push 1Eh  +
push offset Text  +
push 0FFFFFFF5h  +
call GetStdHandle  +
push eax  +
call WriteFile  +
push 0  +
lea eax [esp+8+NumberOfBytesWritten] +
push eax  +
push 2  +
push offset _str____4.Text  +
push 0FFFFFFF5h  +
call GetStdHandle  +
push eax  +
call WriteFile  +
pop edx  +
retn   +
cmp byte_4E6F60 0 +
jnz loc_4BB259  +
push 0  +
push offset Caption  +
push offset Text  +
push 0  +
call MessageBoxA  +
pop edx  +
retn   +
***
push edi  +
push ebp  +
mov ebx offset unk_4F2358 +
mov esi offset dword_4E6F44 +
mov edi offset unk_4F1D68 +
cmp byte ptr [ebx+28h] 0 +
jnz loc_4BB297  +
cmp dword ptr [edi] 0 +
jz loc_4BB297  +
mov edx [edi] +
mov eax edx +
xor edx edx +
mov [edi] edx +
mov ebp eax +
call ebp  +
cmp dword ptr [edi] 0 +
jnz loc_4BB286  +
cmp dword_4E6F48 0 +
jz loc_4BB2B1  +
call sub_4BB150  +
call @System@_16772  +
xor eax eax +
mov dword_4E6F48 eax +
cmp byte ptr [ebx+28h] 2 +
jnz loc_4BB2C1  +
cmp dword ptr [esi] 0 +
jnz loc_4BB2C1  +
xor eax eax +
mov [ebx+0Ch] eax +
call @System@_16604  +
cmp byte ptr [ebx+28h] 1 +
jbe loc_4BB2D1  +
cmp dword ptr [esi] 0 +
jz loc_4BB2F2  +
mov eax [ebx+10h] +
test eax eax +
jz loc_4BB2F2  +
call @System@UnregisterModule$qqrp17System@TLibModule  +
mov edx [ebx+10h] +
mov eax [edx+10h] +
cmp eax [edx+4] +
jz loc_4BB2F2  +
test eax eax +
jz loc_4BB2F2  +
push eax  +
call FreeLibrary  +
call @System@_16756  +
cmp byte ptr [ebx+28h] 1 +
jnz loc_4BB300  +
call dword ptr [ebx+24h]  +
cmp byte ptr [ebx+28h] 0 +
jz loc_4BB30B  +
call @System@_16771  +
cmp dword ptr [ebx] 0 +
jnz loc_4BB327  +
cmp dword_4F1D44 0 +
jz loc_4BB31F  +
call dword_4F1D44  +
mov eax [esi] +
push eax  +
call ExitProcess  +
mov eax [ebx] +
push esi  +
mov esi eax +
mov edi ebx +
mov ecx 0Bh +
movs   +
pop esi  +
jmp loc_4BB2B1  +
***
mov dword_4E6F44 eax +
call sub_4BB268  +
retn   +
***
pop dword_4E6F48  +
jmp sub_4BB340  +
***
mov edx [eax] +
test edx edx +
jz locret_4BB37A  +
mov dword ptr [eax] 0 +
mov ecx [edx-8] +
dec ecx  +
jl locret_4BB37A  +
dec dword ptr [edx-8]  +
jnz locret_4BB37A  +
push eax  +
lea eax [edx-8] +
call sub_4B97E0  +
pop eax  +
retn   +
***
mov ebx eax +
mov esi edx +
mov edx [ebx] +
test edx edx +
jz loc_4BB3A2  +
mov dword ptr [ebx] 0 +
mov ecx [edx-8] +
dec ecx  +
jl loc_4BB3A2  +
dec dword ptr [edx-8]  +
jnz loc_4BB3A2  +
lea eax [edx-8] +
call sub_4B97E0  +
add ebx 4 +
dec esi  +
jnz loc_4BB382  +
pop esi  +
pop ebx  +
retn   +
***
test edx edx +
jz loc_4BB3D4  +
mov ecx [edx-8] +
inc ecx  +
jg loc_4BB3D0  +
push eax  +
push edx  +
mov eax [edx-4] +
call @System@@NewAnsiString$qqri  +
mov edx eax +
pop eax  +
push edx  +
mov ecx [eax-4] +
call sub_4B9A24  +
pop edx  +
pop eax  +
jmp loc_4BB3D4  +
inc dword ptr [edx-8]  +
xchg edx [eax] +
test edx edx +
jz locret_4BB3EE  +
mov ecx [edx-8] +
dec ecx  +
jl locret_4BB3EE  +
dec dword ptr [edx-8]  +
jnz locret_4BB3EE  +
lea eax [edx-8] +
call sub_4B97E0  +
retn   +
***
test edx edx +
jz loc_4BB3FE  +
mov ecx [edx-8] +
inc ecx  +
jle loc_4BB3FE  +
inc dword ptr [edx-8]  +
xchg edx [eax] +
test edx edx +
jz locret_4BB418  +
mov ecx [edx-8] +
dec ecx  +
jl locret_4BB418  +
dec dword ptr [edx-8]  +
jnz locret_4BB418  +
lea eax [edx-8] +
call sub_4B97E0  +
retn   +
***
test eax eax +
jle loc_4BB444  +
push eax  +
add eax 0Ah +
and eax 0FFFFFFFEh +
push eax  +
call sub_4B97C0  +
pop edx  +
mov word ptr [edx+eax-2] 0 +
add eax 8 +
pop edx  +
mov [eax-4] edx +
mov dword ptr [eax-8] 1 +
retn   +
xor eax eax +
retn   +
***
push edi  +
mov ebx eax +
mov esi edx +
mov edi ecx +
mov eax edi +
call @System@@NewAnsiString$qqri  +
mov ecx edi +
mov edi eax +
test esi esi +
jz loc_4BB469  +
mov edx eax +
mov eax esi +
call sub_4B9A24  +
mov eax ebx +
call unknown_libname_540  +
mov [ebx] edi +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push 0  +
push 0  +
push edx  +
push eax  +
mov eax [ebp+cchWideChar] +
push eax  +
push ecx  +
push 0  +
push 0  +
call WideCharToMultiByte  +
pop ebp  +
retn 4  +
***
push edx  +
push eax  +
mov eax [ebp+cbMultiByte] +
push eax  +
push ecx  +
push 0  +
push 0  +
call MultiByteToWideChar  +
pop ebp  +
retn 4  +
***
push edi  +
mov ecx 1 +
call @@LStrFromPCharLen$qqrr10AnsiStringpci  +
pop edx  +
retn   +
***
xor ecx ecx +
test edx edx +
jz loc_4BB56F  +
push edx  +
cmp cl [edx] +
jz loc_4BB56A  +
cmp cl [edx+1] +
jz loc_4BB569  +
cmp cl [edx+2] +
jz loc_4BB568  +
cmp cl [edx+3] +
jz loc_4BB567  +
add edx 4 +
jmp loc_4BB54F  +
inc edx  +
inc edx  +
inc edx  +
mov ecx edx +
pop edx  +
sub ecx edx +
jmp @@LStrFromPCharLen$qqrr10AnsiStringpci  +
***
retn   +
***
xor ecx ecx +
test edx edx +
jz loc_4BB5AB  +
push edx  +
cmp cx [edx] +
jz loc_4BB5A4  +
cmp cx [edx+2] +
jz loc_4BB5A1  +
cmp cx [edx+4] +
jz loc_4BB59E  +
cmp cx [edx+6] +
jz loc_4BB59B  +
add edx 8 +
jmp loc_4BB57F  +
add edx 2 +
add edx 2 +
add edx 2 +
mov ecx edx +
pop edx  +
sub ecx edx +
shr ecx 1 +
jmp @System@@LStrFromPWCharLen$qqrr17System@AnsiStringpbi  +
***
retn   +
***
xor ecx ecx +
mov cl [edx] +
inc edx  +
jmp @@LStrFromPCharLen$qqrr10AnsiStringpci  +
***
retn   +
***
push ecx  +
mov edi edx +
xor eax eax +
scas   +
jnz loc_4BB5CD  +
not ecx  +
pop eax  +
add ecx eax +
pop eax  +
pop edi  +
jmp @@LStrFromPCharLen$qqrr10AnsiStringpci  +
***
xor ecx ecx +
test edx edx +
jz loc_4BB5E3  +
mov ecx [edx-4] +
shr ecx 1 +
jmp @System@@LStrFromPWCharLen$qqrr17System@AnsiStringpbi  +
***
retn   +
***
jz loc_4BB609  +
mov ebx [edx-4] +
test ebx ebx +
jz loc_4BB609  +
cmp ecx ebx +
jl loc_4BB5FE  +
mov ecx ebx +
mov [eax] cl +
inc eax  +
xchg eax edx +
call sub_4B9A24  +
pop ebx  +
retn   +
mov byte ptr [eax] 0 +
pop ebx  +
retn   +
***
test eax eax +
test edx edx +
test edx edx +
jz loc_4BB6C1  +
test ecx ecx +
jz unknown_libname_542  +
cmp edx [eax] +
jz loc_4BB6C8  +
cmp ecx [eax] +
jz loc_4BB67E  +
push eax  +
push ecx  +
call unknown_libname_542  +
pop edx  +
pop eax  +
jmp @System@@LStrCat$qqrv  +
push ebx  +
push esi  +
push edi  +
mov ebx edx +
mov esi ecx +
push eax  +
mov eax [ebx-4] +
add eax [esi-4] +
call @System@@NewAnsiString$qqri  +
mov edi eax +
mov edx eax +
mov eax ebx +
mov ecx [ebx-4] +
call sub_4B9A24  +
mov edx edi +
mov eax esi +
mov ecx [esi-4] +
add edx [ebx-4] +
call sub_4B9A24  +
pop eax  +
mov edx edi +
test edi edi +
jz loc_4BB6B8  +
dec dword ptr [edi-8]  +
call unknown_libname_542  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
mov edx ecx +
jmp unknown_libname_542  +
mov edx ecx +
jmp @System@@LStrCat$qqrv  +
***
push edi  +
push edx  +
push eax  +
mov ebx edx +
xor edi edi +
mov ecx [esp+edx*4+14h] +
test ecx ecx +
jz loc_4BB6E7  +
cmp [eax] ecx +
jnz loc_4BB6E7  +
mov edi ecx +
xor eax eax +
mov ecx [esp+edx*4+14h] +
test ecx ecx +
jz loc_4BB6FA  +
add eax [ecx-4] +
cmp edi ecx +
jnz loc_4BB6FA  +
xor edi edi +
dec edx  +
jnz loc_4BB6E9  +
test edi edi +
jz loc_4BB715  +
mov edx eax +
mov eax edi +
mov esi [edi] +
mov esi [esi-4] +
call @System@@LStrSetLength$qqrv  +
push edi  +
add esi [edi] +
dec ebx  +
jmp loc_4BB71D  +
call @System@@NewAnsiString$qqri  +
push eax  +
mov esi eax +
mov eax [esp+ebx*4+18h] +
mov edx esi +
test eax eax +
jz loc_4BB731  +
mov ecx [eax-4] +
add esi ecx +
call sub_4B9A24  +
dec ebx  +
jnz loc_4BB71D  +
pop edx  +
pop eax  +
test edi edi +
jnz loc_4BB746  +
test edx edx +
jz loc_4BB741  +
dec dword ptr [edx-8]  +
call unknown_libname_542  +
pop edx  +
pop edi  +
pop esi  +
pop ebx  +
pop eax  +
lea esp [esp+edx*4-18h+arg_0] +
jmp eax  +
***
retn   +
***
push edi  +
mov esi eax +
mov edi edx +
cmp eax edx +
jz loc_4BB7F2  +
test esi esi +
jz loc_4BB7CF  +
test edi edi +
jz loc_4BB7D6  +
mov eax [esi-4] +
mov edx [edi-4] +
sub eax edx +
ja loc_4BB777  +
add edx eax +
push edx  +
shr edx 2 +
jz loc_4BB7A3  +
mov ecx [esi] +
mov ebx [edi] +
cmp ecx ebx +
jnz loc_4BB7DD  +
dec edx  +
jz loc_4BB79D  +
mov ecx [esi+4] +
mov ebx [edi+4] +
cmp ecx ebx +
jnz loc_4BB7DD  +
add esi 8 +
add edi 8 +
dec edx  +
jnz loc_4BB77D  +
jmp loc_4BB7A3  +
add esi 4 +
add edi 4 +
pop edx  +
and edx 3 +
jz loc_4BB7CB  +
mov ecx [esi] +
mov ebx [edi] +
cmp cl bl +
jnz loc_4BB7F2  +
dec edx  +
jz loc_4BB7CB  +
cmp ch bh +
jnz loc_4BB7F2  +
dec edx  +
jz loc_4BB7CB  +
and ebx 0FF0000h +
and ecx 0FF0000h +
cmp ecx ebx +
jnz loc_4BB7F2  +
add eax eax +
jmp loc_4BB7F2  +
mov edx [edi-4] +
sub eax edx +
jmp loc_4BB7F2  +
mov eax [esi-4] +
sub eax edx +
jmp loc_4BB7F2  +
pop edx  +
cmp cl bl +
jnz loc_4BB7F2  +
cmp ch bh +
jnz loc_4BB7F2  +
shr ecx 10h +
shr ebx 10h +
cmp cl bl +
jnz loc_4BB7F2  +
cmp ch bh +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
test eax eax +
jz locret_4BB806  +
mov edx [eax-8] +
inc edx  +
jle locret_4BB806  +
inc dword ptr [eax-8]  +
retn   +
***
test eax eax +
mov edx [eax] +
test edx edx +
jz loc_4BB852  +
mov ecx [edx-8] +
dec ecx  +
jz loc_4BB852  +
push ebx  +
mov ebx eax +
mov eax [edx-4] +
call @System@@NewAnsiString$qqri  +
mov edx eax +
mov eax [ebx] +
mov [ebx] edx +
push eax  +
mov ecx [eax-4] +
call sub_4B9A24  +
pop eax  +
mov ecx [eax-8] +
dec ecx  +
jl loc_4BB84F  +
dec dword ptr [eax-8]  +
jnz loc_4BB84F  +
lea eax [eax-8] +
call sub_4B97E0  +
mov edx [ebx] +
pop ebx  +
mov eax edx +
retn   +
***
retn   +
***
retn   +
***
jz loc_4BB89A  +
mov ebx [eax-4] +
test ebx ebx +
jz loc_4BB89A  +
dec edx  +
jl loc_4BB892  +
cmp edx ebx +
jge loc_4BB89A  +
sub ebx edx +
test ecx ecx +
jl loc_4BB89A  +
cmp ecx ebx +
jg loc_4BB896  +
add edx eax +
mov eax [esp+arg_0] +
call @@LStrFromPCharLen$qqrr10AnsiStringpci  +
jmp loc_4BB8A3  +
xor edx edx +
jmp loc_4BB87B  +
mov ecx ebx +
jmp loc_4BB885  +
mov eax [esp+arg_0] +
call unknown_libname_540  +
pop ebx  +
retn 4  +
***
push edi  +
test eax eax +
jz locret_4BB94A  +
push ebx  +
push esi  +
push edi  +
push ebp  +
mov ebx eax +
mov esi edx +
mov edi ecx +
mov edx [edx] +
push edx  +
test edx edx +
jz loc_4BB908  +
mov edx [edx-4] +
dec edi  +
jge loc_4BB90D  +
xor edi edi +
cmp edi edx +
jle loc_4BB913  +
mov edi edx +
mov ebp [ebx-4] +
mov eax esi +
add edx ebp +
call @System@@LStrSetLength$qqrv  +
pop eax  +
cmp eax ebx +
jnz loc_4BB926  +
mov ebx [esi] +
mov eax [esi] +
lea edx [edi+ebp] +
mov ecx [eax-4] +
sub ecx edx +
add edx eax +
add eax edi +
call sub_4B9A24  +
mov eax ebx +
mov edx [esi] +
mov ecx ebp +
add edx edi +
call sub_4B9A24  +
pop ebp  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
test eax eax +
jz locret_4BB990  +
test edx edx +
jz loc_4BB985  +
push ebx  +
push esi  +
push edi  +
mov esi eax +
mov edi edx +
mov ecx [edi-4] +
push edi  +
mov edx [esi-4] +
dec edx  +
js loc_4BB980  +
mov al [esi] +
inc esi  +
sub ecx edx +
jle loc_4BB980  +
scas   +
jnz loc_4BB980  +
mov ebx ecx +
push esi  +
push edi  +
mov ecx edx +
cmps   +
pop edi  +
pop esi  +
jz loc_4BB988  +
mov ecx ebx +
jmp loc_4BB96C  +
pop edx  +
xor eax eax +
jmp loc_4BB98D  +
xor eax eax +
retn   +
pop edx  +
mov eax edi +
sub eax edx +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
mov ebx eax +
mov esi edx +
xor edi edi +
test edx edx +
jle loc_4BB9E9  +
mov eax [ebx] +
test eax eax +
jz loc_4BB9CA  +
cmp dword ptr [eax-8] 1 +
jnz loc_4BB9CA  +
sub eax 8 +
add edx 9 +
push eax  +
mov eax esp +
call unknown_libname_531  +
pop eax  +
add eax 8 +
mov [ebx] eax +
mov [eax-4] esi +
mov byte ptr [esi+eax] 0 +
jmp loc_4BB9F2  +
mov eax edx +
call @System@@NewAnsiString$qqri  +
mov edi eax +
mov eax [ebx] +
test eax eax +
jz loc_4BB9E9  +
mov edx edi +
mov ecx [eax-4] +
cmp ecx esi +
jl loc_4BB9E4  +
mov ecx esi +
call sub_4B9A24  +
mov eax ebx +
call unknown_libname_540  +
mov [ebx] edi +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov edx ecx +
xor ecx ecx +
test ebx ebx +
jz loc_4BBA08  +
mov ecx [ebx-4] +
sub edx ecx +
push ecx  +
call @System@_16642  +
pop ecx  +
mov edx ebx +
pop ebx  +
jmp @System@_16641  +
***
retn   +
***
mov al 1 +
jmp @System@Error$qqr20System@TRuntimeError  +
***
test eax eax +
jz locret_4BBA34  +
push eax  +
push 0  +
call SysAllocStringLen  +
test eax eax +
jz loc_4BBA18  +
retn   +
***
xchg edx [eax] +
test edx edx +
jz locret_4BBA44  +
push edx  +
call SysFreeString  +
retn   +
***
mov edx [eax] +
test edx edx +
jz locret_4BBA5C  +
mov dword ptr [eax] 0 +
push eax  +
push edx  +
call SysFreeString  +
pop eax  +
retn   +
***
mov ebx eax +
mov esi edx +
mov eax [ebx] +
test eax eax +
jz loc_4BBA78  +
mov dword ptr [ebx] 0 +
push eax  +
call SysFreeString  +
add ebx 4 +
dec esi  +
jnz loc_4BBA66  +
pop esi  +
pop ebx  +
retn   +
***
test edx edx +
push edi  +
push ebp  +
add esp 0FFFFF004h +
push eax  +
add esp 0FFFFFFFCh +
mov esi ecx +
mov [esp+1004h+lpMultiByteStr] edx +
mov edi eax +
test esi esi +
jg loc_4BBACA  +
mov eax edi +
call unknown_libname_552  +
jmp loc_4BBB27  +
lea ebp [esi+1] +
cmp ebp 7FFh +
jge loc_4BBAFD  +
push esi  +
lea eax [esp+1008h+WideCharStr] +
mov ecx [esp+1008h+lpMultiByteStr] +
mov edx 7FFh +
call sub_4BB494  +
mov ebx eax +
test ebx ebx +
jle loc_4BBAFD  +
lea edx [esp+1004h+WideCharStr] +
mov eax edi +
mov ecx ebx +
call @System@@WStrFromPWCharLen$qqrr17System@WideStringpbi  +
jmp loc_4BBB27  +
mov ebx ebp +
mov eax edi +
mov edx ebx +
call @System@@WStrSetLength$qqrr17System@WideStringi  +
push esi  +
mov eax [edi] +
mov ecx [esp+1008h+lpMultiByteStr] +
mov edx ebx +
call sub_4BB494  +
mov ebx eax +
test ebx ebx +
jge loc_4BBB1E  +
xor ebx ebx +
mov eax edi +
mov edx ebx +
call @System@@WStrSetLength$qqrr17System@WideStringi  +
add esp 1004h +
pop ebp  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
test ecx ecx +
jz unknown_libname_552  +
push eax  +
push ecx  +
push edx  +
call SysAllocStringLen  +
test eax eax +
jz loc_4BBA18  +
pop edx  +
push dword ptr [edx]  +
mov [edx] eax +
call SysFreeString  +
retn   +
***
xor ecx ecx +
test edx edx +
jz loc_4BBB8B  +
push edx  +
cmp cx [edx] +
jz loc_4BBB84  +
cmp cx [edx+2] +
jz loc_4BBB81  +
cmp cx [edx+4] +
jz loc_4BBB7E  +
cmp cx [edx+6] +
jz loc_4BBB7B  +
add edx 8 +
jmp loc_4BBB5F  +
add edx 2 +
add edx 2 +
add edx 2 +
mov ecx edx +
pop edx  +
sub ecx edx +
shr ecx 1 +
jmp @System@@WStrFromPWCharLen$qqrr17System@WideStringpbi  +
***
retn   +
***
xor ecx ecx +
test edx edx +
jz loc_4BBB9D  +
mov ecx [edx-4] +
jmp @System@@WStrFromPCharLen$qqrr17System@WideStringpci  +
***
retn   +
***
test eax eax +
jz loc_4BBBAC  +
retn   +
mov eax offset word_4BBBAA +
retn   +
***
test eax eax +
jz locret_4BBBBD  +
mov eax [eax-4] +
shr eax 1 +
retn   +
***
push edi  +
push ebp  +
push ecx  +
mov ebp edx +
mov [esp+4+var_4] eax +
mov eax ebp +
call @System@@WStrLen$qqrx17System@WideString  +
mov ebx eax +
test ebx ebx +
jz loc_4BBC19  +
mov eax [esp+4+var_4] +
mov eax [eax] +
call @System@@WStrLen$qqrx17System@WideString  +
mov esi eax +
lea eax [ebx+esi] +
call @System@@NewWideString$qqri  +
mov edi eax +
test esi esi +
jle loc_4BBC01  +
mov ecx esi +
add ecx ecx +
mov edx edi +
mov eax [esp+4+var_4] +
mov eax [eax] +
call sub_4B9A24  +
mov ecx ebx +
add ecx ecx +
lea edx [edi+esi*2] +
mov eax ebp +
call sub_4B9A24  +
mov eax [esp+4+var_4] +
mov edx edi +
call @System@_16833  +
pop edx  +
pop ebp  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
mov esi eax +
mov edi edx +
cmp eax edx +
jz loc_4BBC9D  +
test esi esi +
jz loc_4BBC80  +
test edi edi +
jz loc_4BBC87  +
mov eax [esi-4] +
mov edx [edi-4] +
sub eax edx +
ja loc_4BBC3F  +
add edx eax +
push edx  +
shr edx 2 +
jz loc_4BBC6B  +
mov ecx [esi] +
mov ebx [edi] +
cmp ecx ebx +
jnz loc_4BBC8E  +
dec edx  +
jz loc_4BBC65  +
mov ecx [esi+4] +
mov ebx [edi+4] +
cmp ecx ebx +
jnz loc_4BBC8E  +
add esi 8 +
add edi 8 +
dec edx  +
jnz loc_4BBC45  +
jmp loc_4BBC6B  +
add esi 4 +
add edi 4 +
pop edx  +
and edx 2 +
jz loc_4BBC7C  +
mov cx [esi] +
mov bx [edi] +
cmp cx bx +
jnz loc_4BBC9D  +
add eax eax +
jmp loc_4BBC9D  +
mov edx [edi-4] +
sub eax edx +
jmp loc_4BBC9D  +
mov eax [esi-4] +
sub eax edx +
jmp loc_4BBC9D  +
pop edx  +
cmp cx bx +
jnz loc_4BBC9D  +
shr ecx 10h +
shr ebx 10h +
cmp cx bx +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push ebx  +
push esi  +
push edi  +
mov edi ecx +
mov ebx edx +
mov esi eax +
mov eax esi +
call @System@@WStrLen$qqrx17System@WideString  +
cmp ebx 1 +
jge loc_4BBCC0  +
xor ebx ebx +
jmp loc_4BBCC7  +
dec ebx  +
cmp eax ebx +
jge loc_4BBCC7  +
mov ebx eax +
test edi edi +
jge loc_4BBCCF  +
xor eax eax +
jmp loc_4BBCD7  +
sub eax ebx +
cmp edi eax +
jge loc_4BBCD7  +
mov eax edi +
mov edx ebx +
add edx edx +
add edx esi +
mov ecx [ebp+arg_0] +
xchg eax ecx +
call @System@@WStrFromPWCharLen$qqrr17System@WideStringpbi  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
push edi  +
mov esi edx +
mov edi eax +
xor ebx ebx +
test esi esi +
jle loc_4BBD24  +
mov eax esi +
call @System@@NewWideString$qqri  +
mov ebx eax +
mov eax [edi] +
call @System@@WStrLen$qqrx17System@WideString  +
test eax eax +
jle loc_4BBD24  +
cmp esi eax +
jge loc_4BBD17  +
mov eax esi +
mov ecx eax +
add ecx ecx +
mov edx ebx +
mov eax [edi] +
call sub_4B9A24  +
mov eax edi +
mov edx ebx +
call @System@_16833  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
xor ecx ecx +
push ebx  +
mov cl [edx+1] +
push esi  +
push edi  +
mov ebx eax +
lea esi [ecx+edx+0Ah] +
mov edi [ecx+edx+6] +
mov edx [esi] +
mov eax [esi+4] +
add eax ebx +
mov edx [edx] +
mov ecx 1 +
call @System@@InitializeArray$qqrpvt1ui  +
add esi 8 +
dec edi  +
jg loc_4BBD46  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
test ecx ecx +
jz locret_4BBDF6  +
push ebx  +
push esi  +
push edi  +
mov ebx eax +
mov esi edx +
mov edi ecx +
xor edx edx +
mov al [esi] +
mov dl [esi+1] +
xor ecx ecx +
cmp al 0Ah +
jz loc_4BBDA4  +
cmp al 0Bh +
jz loc_4BBDA4  +
cmp al 0Ch +
jz loc_4BBDAE  +
cmp al 0Dh +
jz loc_4BBDC1  +
cmp al 0Eh +
jz loc_4BBDDF  +
cmp al 0Fh +
jz loc_4BBDA4  +
cmp al 11h +
jz loc_4BBDA4  +
mov al 2 +
pop edi  +
pop esi  +
pop ebx  +
jmp @System@Error$qqr20System@TRuntimeError  +
mov [ebx] ecx +
add ebx 4 +
dec edi  +
jg loc_4BBDA4  +
jmp loc_4BBDF3  +
mov [ebx] ecx +
mov [ebx+4] ecx +
mov [ebx+8] ecx +
mov [ebx+0Ch] ecx +
add ebx 10h +
dec edi  +
jg loc_4BBDAE  +
jmp loc_4BBDF3  +
push ebp  +
mov ebp edx +
mov edx [esi+ebp+0Ah] +
mov eax ebx +
add ebx [esi+ebp+2] +
mov ecx [esi+ebp+6] +
mov edx [edx] +
call @System@@InitializeArray$qqrpvt1ui  +
dec edi  +
jg loc_4BBDC4  +
pop ebp  +
jmp loc_4BBDF3  +
push ebp  +
mov ebp edx +
mov eax ebx +
add ebx [esi+ebp+2] +
mov edx esi +
call unknown_libname_555  +
dec edi  +
jg loc_4BBDE2  +
pop ebp  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
xor ecx ecx +
push ebx  +
mov cl [edx+1] +
push esi  +
push edi  +
mov ebx eax +
lea esi [ecx+edx+0Ah] +
mov edi [ecx+edx+6] +
mov edx [esi] +
mov eax [esi+4] +
add eax ebx +
mov edx [edx] +
mov ecx 1 +
call @System@@FinalizeArray$qqrpvt1ui  +
add esi 8 +
dec edi  +
jg loc_4BBE0A  +
mov eax ebx +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
cmp ecx 0 +
jz locret_4BBF15  +
push eax  +
push ebx  +
push esi  +
push edi  +
mov ebx eax +
mov esi edx +
mov edi ecx +
xor edx edx +
mov al [esi] +
mov dl [esi+1] +
cmp al 0Ah +
jz loc_4BBE6F  +
cmp al 0Bh +
jz loc_4BBE8C  +
cmp al 0Ch +
jz loc_4BBEA3  +
cmp al 0Dh +
jz loc_4BBEB2  +
cmp al 0Eh +
jz loc_4BBED0  +
cmp al 0Fh +
jz loc_4BBEE6  +
cmp al 11h +
jz loc_4BBEF5  +
jmp loc_4BBF06  +
cmp ecx 1 +
mov eax ebx +
jg loc_4BBE80  +
call unknown_libname_540  +
jmp loc_4BBF11  +
mov edx ecx +
call unknown_libname_541  +
jmp loc_4BBF11  +
cmp ecx 1 +
mov eax ebx +
jg loc_4BBE9A  +
call unknown_libname_552  +
jmp loc_4BBF11  +
mov edx ecx +
call @System@@WStrArrayClr$qqrpvi  +
jmp loc_4BBF11  +
mov eax ebx +
add ebx 10h +
call sub_4BC290  +
dec edi  +
jg loc_4BBEA3  +
jmp loc_4BBF11  +
push ebp  +
mov ebp edx +
mov edx [esi+ebp+0Ah] +
mov eax ebx +
add ebx [esi+ebp+2] +
mov ecx [esi+ebp+6] +
mov edx [edx] +
call @System@@FinalizeArray$qqrpvt1ui  +
dec edi  +
jg loc_4BBEB5  +
pop ebp  +
jmp loc_4BBF11  +
push ebp  +
mov ebp edx +
mov eax ebx +
add ebx [esi+ebp+2] +
mov edx esi +
call @System@@FinalizeRecord$qqrpvt1  +
dec edi  +
jg loc_4BBED3  +
pop ebp  +
jmp loc_4BBF11  +
mov eax ebx +
add ebx 4 +
call unknown_libname_560  +
dec edi  +
jg loc_4BBEE6  +
jmp loc_4BBF11  +
mov eax ebx +
mov edx esi +
add ebx 4 +
call @System@@DynArrayClear$qqrrpvpv  +
dec edi  +
jg loc_4BBEF5  +
jmp loc_4BBF11  +
pop edi  +
pop esi  +
pop ebx  +
pop eax  +
mov al 2 +
jmp @System@Error$qqr20System@TRuntimeError  +
pop edi  +
pop esi  +
pop ebx  +
pop eax  +
retn   +
***
mov ecx 1 +
jmp @System@@FinalizeArray$qqrpvt1ui  +
***
retn   +
***
push edi  +
push ebp  +
mov ebx eax +
mov esi edx +
xor eax eax +
mov al [ecx+1] +
lea edi [eax+ecx+0Ah] +
mov ebp [edi-4] +
xor eax eax +
mov ecx [edi-8] +
push ecx  +
mov ecx [edi+4] +
sub ecx eax +
jle loc_4BBF50  +
mov edx eax +
add eax esi +
add edx ebx +
call sub_4B9A24  +
mov eax [edi+4] +
mov edx [edi] +
mov edx [edx] +
mov cl [edx] +
cmp cl 0Ah +
jz loc_4BBF8F  +
cmp cl 0Bh +
jz loc_4BBFA0  +
cmp cl 0Ch +
jz loc_4BBFB1  +
cmp cl 0Dh +
jz loc_4BBFC2  +
cmp cl 0Eh +
jz loc_4BBFE2  +
cmp cl 0Fh +
jz loc_4BBFFB  +
cmp cl 11h +
jz loc_4BC00C  +
mov al 2 +
pop ebp  +
pop edi  +
pop esi  +
pop ebx  +
jmp @System@Error$qqr20System@TRuntimeError  +
mov edx [eax+esi] +
add eax ebx +
call unknown_libname_542  +
mov eax 4 +
jmp loc_4BC01D  +
mov edx [eax+esi] +
add eax ebx +
call @System@@WStrAsg$qqrr17System@WideStringx17System@WideString  +
mov eax 4 +
jmp loc_4BC01D  +
lea edx [eax+esi] +
add eax ebx +
call sub_4BC1C8  +
mov eax 10h +
jmp loc_4BC01D  +
xor ecx ecx +
mov cl [edx+1] +
push dword ptr [ecx+edx+2]  +
push dword ptr [ecx+edx+6]  +
mov ecx [ecx+edx+0Ah] +
mov ecx [ecx] +
lea edx [eax+esi] +
add eax ebx +
call unknown_libname_557  +
pop eax  +
jmp loc_4BC01D  +
xor ecx ecx +
mov cl [edx+1] +
mov ecx [ecx+edx+2] +
push ecx  +
mov ecx edx +
lea edx [eax+esi] +
add eax ebx +
call @System@@CopyRecord$qqrv  +
pop eax  +
jmp loc_4BC01D  +
mov edx [eax+esi] +
add eax ebx +
call @System@@IntfCopy$qqrr45System@_DelphiInterface$t17System@IInterface_x45System@_DelphiInterface$t17System@IInterface_  +
mov eax 4 +
jmp loc_4BC01D  +
mov ecx edx +
mov edx [eax+esi] +
add eax ebx +
call @System@@DynArrayAsg$qqrv  +
mov eax 4 +
add eax [edi+4] +
add edi 8 +
dec ebp  +
jnz loc_4BBF3E  +
pop ecx  +
sub ecx eax +
jle loc_4BC039  +
lea edx [eax+ebx] +
add eax esi +
call sub_4B9A24  +
pop ebp  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push edi  +
push ebp  +
mov ebx eax +
mov esi edx +
mov edi ecx +
mov ebp [esp+arg_0] +
mov cl [edi] +
cmp cl 0Ah +
jz loc_4BC086  +
cmp cl 0Bh +
jz loc_4BC09D  +
cmp cl 0Ch +
jz loc_4BC0B1  +
cmp cl 0Dh +
jz loc_4BC0C5  +
cmp cl 0Eh +
jz loc_4BC0E6  +
cmp cl 0Fh +
jz loc_4BC103  +
cmp cl 11h +
jz loc_4BC117  +
mov al 2 +
pop ebp  +
pop edi  +
pop esi  +
pop ebx  +
jmp @System@Error$qqr20System@TRuntimeError  +
mov eax ebx +
mov edx [esi] +
call unknown_libname_542  +
add ebx 4 +
add esi 4 +
dec ebp  +
jnz loc_4BC086  +
jmp loc_4BC12B  +
mov eax ebx +
mov edx [esi] +
call @System@@WStrAsg$qqrr17System@WideStringx17System@WideString  +
add ebx 4 +
add esi 4 +
dec ebp  +
jnz loc_4BC09D  +
jmp loc_4BC12B  +
mov eax ebx +
mov edx esi +
call sub_4BC1C8  +
add ebx 10h +
add esi 10h +
dec ebp  +
jnz loc_4BC0B1  +
jmp loc_4BC12B  +
xor ecx ecx +
mov cl [edi+1] +
lea edi [ecx+edi+2] +
mov eax ebx +
mov edx esi +
mov ecx [edi+8] +
push dword ptr [edi+4]  +
call unknown_libname_557  +
add ebx [edi] +
add esi [edi] +
dec ebp  +
jnz loc_4BC0CE  +
jmp loc_4BC12B  +
mov eax ebx +
mov edx esi +
mov ecx edi +
call @System@@CopyRecord$qqrv  +
xor eax eax +
mov al [edi+1] +
add ebx [eax+edi+2] +
add esi [eax+edi+2] +
dec ebp  +
jnz loc_4BC0E6  +
jmp loc_4BC12B  +
mov eax ebx +
mov edx [esi] +
call @System@@IntfCopy$qqrr45System@_DelphiInterface$t17System@IInterface_x45System@_DelphiInterface$t17System@IInterface_  +
add ebx 4 +
add esi 4 +
dec ebp  +
jnz loc_4BC103  +
jmp loc_4BC12B  +
mov eax ebx +
mov edx [esi] +
mov ecx edi +
call @System@@DynArrayAsg$qqrv  +
add ebx 4 +
add esi 4 +
dec ebp  +
jnz loc_4BC117  +
pop ebp  +
pop edi  +
pop esi  +
pop ebx  +
retn 4  +
***
retn   +
***
mov ebx eax +
xor eax eax +
mov [esp+4+var_4] eax +
mov eax ebx +
call sub_4BB610  +
mov ecx eax +
mov eax esp +
mov edx ebx +
call @System@@WStrFromPCharLen$qqrr17System@WideStringpci  +
mov eax [esp+4+var_4] +
pop edx  +
pop ebx  +
retn   +
***
mov al 10h +
jmp @System@Error$qqr20System@TRuntimeError  +
***
retn   +
***
mov ax [eax] +
sub ax 2 +
jb locret_4BC174  +
sub ax 8 +
jz locret_4BC174  +
call sub_4BC158  +
retn   +
***
mov edx offset dword_4F2384 +
xor eax eax +
mov dword ptr [edx+eax*4] offset sub_4BC158 +
inc eax  +
cmp eax 2Bh +
jnz loc_4BC17F  +
mov eax offset loc_4BC160 +
mov dword_4F2384 eax +
retn   +
***
mov edi eax +
mov esi offset dword_4F2384 +
mov ecx 2Bh +
movs   +
pop edi  +
pop esi  +
retn   +
***
mov esi eax +
mov edi offset dword_4F2384 +
mov ecx 2Bh +
movs   +
pop edi  +
pop esi  +
retn   +
***
retn   +
***
retn   +
***
retn   +
***
retn   +
***
retn   +
***
retn   +
***
retn   +
***
retn   +
***
retn   +
***
retn   +
***
retn   +
***
retn   +
***
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call dword_4F23C8  +
pop ebp  +
retn 8  +
***
retn   +
***
retn   +
***
retn   +
***
retn   +
***
retn   +
***
retn   +
***
retn   +
***
retn   +
***
mov ecx 0Eh +
jmp dword_4F2408  +
***
retn   +
***
retn   +
***
pop eax  +
mov al 11h +
jmp @System@Error$qqr20System@TRuntimeError  +
***
mov eax [esp+8+arg_4] +
mul  [esp+8+var_8] +
mov ecx eax +
mov eax [esp+8+var_4] +
mul  [esp+8+arg_0] +
add ecx eax +
mov eax [esp+8+var_8] +
mul  [esp+8+arg_0] +
add edx ecx +
pop ecx  +
pop ecx  +
retn 8  +
***
push esi  +
push edi  +
xor edi edi +
mov ebx [esp+arg_0] +
mov ecx [esp+arg_4] +
or ecx ecx +
jnz loc_4BC2DE  +
or edx edx +
jz loc_4BC336  +
or ebx ebx +
jz loc_4BC336  +
or edx edx +
jns loc_4BC2EC  +
neg edx  +
neg eax  +
sbb edx 0 +
or edi 1 +
or ecx ecx +
jns loc_4BC2FA  +
neg ecx  +
neg ebx  +
sbb ecx 0 +
xor edi 1 +
mov ebp ecx +
mov ecx 40h +
push edi  +
xor edi edi +
xor esi esi +
shl eax 1 +
rcl edx 1 +
rcl esi 1 +
rcl edi 1 +
cmp edi ebp +
jb loc_4BC31D  +
ja loc_4BC318  +
cmp esi ebx +
jb loc_4BC31D  +
sub esi ebx +
sbb edi ebp +
inc eax  +
loop loc_4BC306  +
pop ebx  +
test ebx 1 +
jz loc_4BC32F  +
neg edx  +
neg eax  +
sbb edx 0 +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
div  ebx +
xor edx edx +
jmp loc_4BC32F  +
***
retn   +
***
push esi  +
push edi  +
mov ebx [esp+arg_0] +
mov ecx [esp+arg_4] +
or ecx ecx +
jnz loc_4BC358  +
or edx edx +
jz loc_4BC383  +
or ebx ebx +
jz loc_4BC383  +
mov ebp ecx +
mov ecx 40h +
xor edi edi +
xor esi esi +
shl eax 1 +
rcl edx 1 +
rcl esi 1 +
rcl edi 1 +
cmp edi ebp +
jb loc_4BC37A  +
ja loc_4BC375  +
cmp esi ebx +
jb loc_4BC37A  +
sub esi ebx +
sbb edi ebp +
inc eax  +
loop loc_4BC363  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
div  ebx +
xor edx edx +
jmp loc_4BC37C  +
***
retn   +
***
push esi  +
push edi  +
xor edi edi +
mov ebx [esp+arg_0] +
mov ecx [esp+arg_4] +
or ecx ecx +
jnz loc_4BC3A6  +
or edx edx +
jz loc_4BC3FF  +
or ebx ebx +
jz loc_4BC3FF  +
or edx edx +
jns loc_4BC3B4  +
neg edx  +
neg eax  +
sbb edx 0 +
or edi 1 +
or ecx ecx +
jns loc_4BC3BF  +
neg ecx  +
neg ebx  +
sbb ecx 0 +
mov ebp ecx +
mov ecx 40h +
push edi  +
xor edi edi +
xor esi esi +
shl eax 1 +
rcl edx 1 +
rcl esi 1 +
rcl edi 1 +
cmp edi ebp +
jb loc_4BC3E2  +
ja loc_4BC3DD  +
cmp esi ebx +
jb loc_4BC3E2  +
sub esi ebx +
sbb edi ebp +
inc eax  +
loop loc_4BC3CB  +
mov eax esi +
mov edx edi +
pop ebx  +
test ebx 1 +
jz loc_4BC3F8  +
neg edx  +
neg eax  +
sbb edx 0 +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
div  ebx +
xchg eax edx +
xor edx edx +
jmp loc_4BC3F8  +
***
retn   +
***
push esi  +
push edi  +
mov ebx [esp+arg_0] +
mov ecx [esp+arg_4] +
or ecx ecx +
jnz loc_4BC420  +
or edx edx +
jz loc_4BC44F  +
or ebx ebx +
jz loc_4BC44F  +
mov ebp ecx +
mov ecx 40h +
xor edi edi +
xor esi esi +
shl eax 1 +
rcl edx 1 +
rcl esi 1 +
rcl edi 1 +
cmp edi ebp +
jb loc_4BC442  +
ja loc_4BC43D  +
cmp esi ebx +
jb loc_4BC442  +
sub esi ebx +
sbb edi ebp +
inc eax  +
loop loc_4BC42B  +
mov eax esi +
mov edx edi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
div  ebx +
xchg eax edx +
xor edx edx +
jmp loc_4BC448  +
***
retn   +
***
cmp cl 20h +
jl loc_4BC46E  +
cmp cl 40h +
jl loc_4BC467  +
xor edx edx +
xor eax eax +
retn   +
mov edx eax +
shl edx cl +
xor eax eax +
retn   +
shld edx eax +
shl eax cl +
retn   +
***
retn   +
***
cmp cl 20h +
jl loc_4BC48E  +
cmp cl 40h +
jl loc_4BC487  +
xor edx edx +
xor eax eax +
retn   +
mov eax edx +
xor edx edx +
shr eax cl +
retn   +
shrd eax edx +
shr edx cl +
retn   +
***
retn   +
***
push edi  +
push ebp  +
add esp 0FFFFFFECh +
mov [esp+14h+var_14] edx +
mov esi eax +
mov ebp 1 +
xor edi edi +
mov [esp+14h+var_C] 0 +
mov [esp+14h+var_8] 0 +
test esi esi +
jnz loc_4BC4CA  +
mov eax [esp+14h+var_14] +
mov [eax] ebp +
jmp loc_4BC6AA  +
inc ebp  +
cmp byte ptr [esi+ebp-1] 20h +
jz loc_4BC4C9  +
mov [esp+14h+var_4] 0 +
mov al [esi+ebp-1] +
cmp al 2Dh +
jnz loc_4BC4E6  +
mov [esp+14h+var_4] 1 +
inc ebp  +
jmp loc_4BC4EB  +
cmp al 2Bh +
jnz loc_4BC4EB  +
inc ebp  +
mov bl 1 +
cmp byte ptr [esi+ebp-1] 24h +
jz loc_4BC50F  +
cmp byte ptr [esi+ebp-1] 30h +
jnz loc_4BC5D9  +
mov al [esi+ebp] +
call @System@UpCase$qqrc  +
cmp al 58h +
jnz loc_4BC5D9  +
cmp byte ptr [esi+ebp-1] 30h +
jnz loc_4BC517  +
inc ebp  +
inc ebp  +
mov al [esi+ebp-1] +
mov edx eax +
add dl 0D0h +
sub dl 0Ah +
jb loc_4BC538  +
add dl 0F9h +
sub dl 6 +
jb loc_4BC545  +
add dl 0E6h +
sub dl 6 +
jb loc_4BC552  +
jmp loc_4BC5B2  +
mov edi eax +
and edi 0FFh +
sub edi 30h +
jmp loc_4BC55D  +
mov edi eax +
and edi 0FFh +
sub edi 37h +
jmp loc_4BC55D  +
mov edi eax +
and edi 0FFh +
sub edi 57h +
cmp [esp+14h+var_8] 0 +
jnz loc_4BC56D  +
cmp [esp+14h+var_C] 0 +
jb loc_4BC5B2  +
jmp loc_4BC56F  +
jl loc_4BC5B2  +
cmp [esp+14h+var_8] 0FFFFFFFh +
jnz loc_4BC582  +
cmp [esp+14h+var_C] 0FFFFFFFFh +
jbe loc_4BC584  +
jmp loc_4BC5B2  +
jg loc_4BC5B2  +
mov eax edi +
cdq   +
push edx  +
push eax  +
mov eax [esp+1Ch+var_C] +
mov edx [esp+1Ch+var_8] +
shld edx eax +
shl eax 4 +
add eax [esp+1Ch+var_1C] +
adc edx [esp+1Ch+var_18] +
add esp 8 +
mov [esp+14h+var_C] eax +
mov [esp+14h+var_8] edx +
inc ebp  +
xor ebx ebx +
jmp loc_4BC518  +
cmp [esp+14h+var_4] 0 +
jz loc_4BC690  +
mov eax [esp+14h+var_C] +
mov edx [esp+14h+var_8] +
neg eax  +
adc edx 0 +
neg edx  +
mov [esp+14h+var_C] eax +
mov [esp+14h+var_8] edx +
jmp loc_4BC690  +
mov al [esi+ebp-1] +
mov edx eax +
add dl 0D0h +
sub dl 0Ah +
jnb loc_4BC649  +
mov edi eax +
and edi 0FFh +
sub edi 30h +
cmp [esp+14h+var_8] 0 +
jnz loc_4BC602  +
cmp [esp+14h+var_C] 0 +
jb loc_4BC649  +
jmp loc_4BC604  +
jl loc_4BC649  +
cmp [esp+14h+var_8] 0CCCCCCCh +
jnz loc_4BC61A  +
cmp [esp+14h+var_C] 0CCCCCCCCh +
jbe loc_4BC61C  +
jmp loc_4BC649  +
jg loc_4BC649  +
push 0  +
push 0Ah  +
mov eax [esp+1Ch+var_C] +
mov edx [esp+1Ch+var_8] +
call unknown_libname_558  +
push edx  +
push eax  +
mov eax edi +
cdq   +
add eax [esp+1Ch+var_1C] +
adc edx [esp+1Ch+var_18] +
add esp 8 +
mov [esp+14h+var_C] eax +
mov [esp+14h+var_8] edx +
inc ebp  +
xor ebx ebx +
jmp loc_4BC5D9  +
cmp [esp+14h+var_4] 0 +
jz loc_4BC667  +
mov eax [esp+14h+var_C] +
mov edx [esp+14h+var_8] +
neg eax  +
adc edx 0 +
neg edx  +
mov [esp+14h+var_C] eax +
mov [esp+14h+var_8] edx +
cmp [esp+14h+var_8] 0 +
jnz loc_4BC673  +
cmp [esp+14h+var_C] 0 +
jz loc_4BC690  +
cmp [esp+14h+var_8] 0 +
jnz loc_4BC686  +
cmp [esp+14h+var_C] 0 +
setb al  +
jmp loc_4BC689  +
setl al  +
cmp al [esp+14h+var_4] +
jz loc_4BC690  +
dec ebp  +
cmp byte ptr [esi+ebp-1] 0 +
setnz al  +
or bl al +
jz loc_4BC6A3  +
mov eax [esp+14h+var_14] +
mov [eax] ebp +
jmp loc_4BC6AA  +
mov eax [esp+14h+var_14] +
xor edx edx +
mov [eax] edx +
mov eax [esp+14h+var_C] +
mov edx [esp+14h+var_8] +
add esp 14h +
pop ebp  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
test eax eax +
call sub_4BC6BC  +
dec eax  +
retn   +
***
push [ebp+arg_0]  +
call unknown_libname_557  +
pop ebp  +
retn 4  +
***
retn   +
***
retn   +
***
add esp 0FFFFFFE0h +
call sub_4BC6EC  +
retn   +
***
jz loc_4BC89B  +
add esp 0FFFFFFF0h +
push ebx  +
push esi  +
push edi  +
mov edi ecx +
mov [ebp+var_8] edx +
mov [ebp+var_4] eax +
mov esi [ebp+arg_4] +
xor ebx ebx +
cmp [ebp+var_4] 0 +
jz loc_4BC97E  +
mov eax [ebp+var_8] +
mov [ebp+var_10] eax +
test edi edi +
jge loc_4BC8D2  +
add esi edi +
xor edi edi +
mov eax [ebp+var_4] +
sub eax 4 +
mov eax [eax] +
cmp eax edi +
jge loc_4BC8E0  +
mov edi eax +
mov edx eax +
sub edx edi +
cmp esi edx +
jle loc_4BC8EA  +
mov esi edx +
test esi esi +
jge loc_4BC8F0  +
xor esi esi +
test esi esi +
jle loc_4BC97E  +
mov eax [ebp+var_10] +
movzx eax byte ptr [eax+1] +
add [ebp+var_10] eax +
mov eax [ebp+var_10] +
mov eax [eax+2] +
mov [ebp+var_C] eax +
mov eax [ebp+var_10] +
mov eax [eax+6] +
test eax eax +
jz loc_4BC91C  +
mov eax [eax] +
mov [ebp+var_10] eax +
jmp loc_4BC921  +
xor eax eax +
mov [ebp+var_10] eax +
mov eax esi +
imul  [ebp+var_C] +
add eax 8 +
call sub_4B97C0  +
mov ebx eax +
mov dword ptr [ebx] 1 +
add ebx 4 +
mov [ebx] esi +
add ebx 4 +
imul edi [ebp+var_C] +
add [ebp+var_4] edi +
test esi esi +
jle loc_4BC97E  +
cmp [ebp+var_10] 0 +
jz loc_4BC96E  +
mov edx esi +
imul edx [ebp+var_C] +
mov eax ebx +
xor ecx ecx +
call @System@@FillChar$qqrv  +
push esi  +
mov ecx [ebp+var_10] +
mov edx [ebp+var_4] +
mov eax ebx +
call @System@Variant@PutElement$qqrrx14System@Variantxixi  +
jmp loc_4BC97E  +
mov ecx esi +
imul ecx [ebp+var_C] +
mov edx ebx +
mov eax [ebp+var_4] +
call sub_4B9A24  +
mov eax [ebp+arg_0] +
mov edx [ebp+var_8] +
call sub_4BC6E4  +
mov eax [ebp+arg_0] +
mov [eax] ebx +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 8  +
***
mov ecx [eax] +
test ecx ecx +
jz locret_4BC9D1  +
mov dword ptr [eax] 0 +
dec dword ptr [ecx-8]  +
jnz locret_4BC9D1  +
push eax  +
mov eax ecx +
xor ecx ecx +
mov cl [edx+1] +
mov edx [ecx+edx+6] +
test edx edx +
jz loc_4BC9C8  +
mov ecx [eax-4] +
test ecx ecx +
jz loc_4BC9C8  +
mov edx [edx] +
call @System@@FinalizeArray$qqrpvt1ui  +
sub eax 8 +
call sub_4B97E0  +
pop eax  +
retn   +
***
test edx edx +
jz loc_4BC9DF  +
inc dword ptr [edx-8]  +
test ebx ebx +
jz loc_4BC9F7  +
dec dword ptr [ebx-8]  +
jnz loc_4BC9F7  +
push eax  +
push edx  +
mov edx ecx +
inc dword ptr [ebx-8]  +
call @System@@DynArrayClear$qqrrpvpv  +
pop edx  +
pop eax  +
mov [eax] edx +
pop ebx  +
retn   +
***
add esp 0FFFFFFE4h +
push 1Ch  +
lea edx [esp+20h+Buffer] +
push edx  +
push eax  +
call VirtualQuery  +
cmp [esp+1Ch+Buffer.State] 1000h +
jnz loc_4BCA1C  +
mov eax [esp+1Ch+Buffer.AllocationBase] +
jmp loc_4BCA1E  +
xor eax eax +
add esp 1Ch +
retn   +
***
retn   +
***
add esp 0FFFFFEF8h +
mov ebx eax +
cmp dword ptr [ebx+10h] 0 +
jnz loc_4BCA67  +
push 105h  +
lea eax [esp+10Ch+Filename] +
push eax  +
mov eax [ebx+4] +
push eax  +
call GetModuleFileNameA  +
mov eax esp +
mov dl 1 +
call @System@LoadResourceModule$qqrpco  +
mov esi eax +
mov [ebx+10h] esi +
test esi esi +
jnz loc_4BCA67  +
mov eax [ebx+4] +
mov [ebx+10h] eax +
mov eax [ebx+10h] +
add esp 108h +
pop esi  +
pop ebx  +
retn   +
***
mov edx dword_4E6F68 +
jmp loc_4BCAA4  +
add esp 0FFFFFDB0h +
push ebx  +
push esi  +
push edi  +
mov [ebp+iMaxLength] edx +
mov [ebp+lpString1] eax +
mov eax [ebp+lpString1] +
mov [ebp-0Ch] eax +
push offset aKernel32_dll_0  +
call GetModuleHandleA  +
mov esi eax +
test esi esi +
jz loc_4BCB18  +
push offset aGetlongpathnam  +
push esi  +
call GetProcAddress  +
mov ebx eax +
test ebx ebx +
jz loc_4BCB18  +
push 105h  +
lea eax [ebp+String2] +
push eax  +
mov eax [ebp+lpString1] +
push eax  +
call ebx  +
test eax eax +
jz loc_4BCB18  +
mov eax [ebp+iMaxLength] +
push eax  +
lea eax [ebp+String2] +
push eax  +
mov eax [ebp+lpString1] +
push eax  +
call lstrcpynA  +
jmp loc_4BCC3A  +
mov eax [ebp+lpString1] +
cmp byte ptr [eax] 5Ch +
jnz loc_4BCB58  +
mov eax [ebp+lpString1] +
cmp byte ptr [eax+1] 5Ch +
jnz loc_4BCC3A  +
mov eax [ebp+lpString1] +
add eax 2 +
call @System@_16834  +
mov esi eax +
cmp byte ptr [esi] 0 +
jz loc_4BCC3A  +
lea eax [esi+1] +
call @System@_16834  +
mov esi eax +
cmp byte ptr [esi] 0 +
jz loc_4BCC3A  +
jmp loc_4BCB5E  +
mov esi [ebp+lpString1] +
add esi 2 +
mov ebx esi +
sub ebx [ebp+lpString1] +
lea eax [ebx+1] +
push eax  +
mov eax [ebp+lpString1] +
push eax  +
lea eax [ebp+String2] +
push eax  +
call lstrcpynA  +
jmp loc_4BCC1D  +
lea eax [esi+1] +
call @System@_16834  +
mov edi eax +
mov eax edi +
sub eax esi +
mov edx eax +
add edx ebx +
inc edx  +
cmp edx 105h +
jg loc_4BCC3A  +
inc eax  +
push eax  +
push esi  +
lea eax [ebp+String2] +
add eax ebx +
push eax  +
call lstrcpynA  +
lea eax [ebp+String] +
push eax  +
lea eax [ebp+String2] +
push eax  +
call FindFirstFileA  +
mov esi eax +
cmp esi 0FFFFFFFFh +
jz loc_4BCC3A  +
push esi  +
call FindClose  +
lea eax [ebp-11Eh] +
push eax  +
call lstrlenA  +
lea edx [ebx+1] +
add eax edx +
inc eax  +
cmp eax 105h +
jg loc_4BCC3A  +
mov [ebp+ebx+String2] 5Ch +
mov eax 105h +
sub eax ebx +
dec eax  +
push eax  +
lea eax [ebp-11Eh] +
push eax  +
lea eax [ebp+String2] +
add eax ebx +
inc eax  +
push eax  +
call lstrcpynA  +
lea eax [ebp-11Eh] +
push eax  +
call lstrlenA  +
inc eax  +
add ebx eax +
mov esi edi +
cmp byte ptr [esi] 0 +
jnz loc_4BCB7C  +
mov eax [ebp+iMaxLength] +
push eax  +
lea eax [ebp+String2] +
push eax  +
mov eax [ebp+lpString1] +
push eax  +
call lstrcpynA  +
mov eax [ebp-0Ch] +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
add esp 0FFFFFEE0h +
push ebx  +
push esi  +
mov [ebp+lpString2] eax +
push 105h  +
lea eax [ebp+LibFileName] +
push eax  +
push 0  +
call GetModuleFileNameA  +
mov [ebp+String2] 0 +
lea eax [ebp+hKey] +
push eax  +
push 0F0019h  +
push 0  +
push offset aSoftwareBorl_0  +
push 80000001h  +
call RegOpenKeyExA  +
test eax eax +
jz loc_4BCCEB  +
lea eax [ebp+hKey] +
push eax  +
push 0F0019h  +
push 0  +
push offset aSoftwareBorl_0  +
push 80000002h  +
call RegOpenKeyExA  +
test eax eax +
jz loc_4BCCEB  +
lea eax [ebp+hKey] +
push eax  +
push 0F0019h  +
push 0  +
push offset aSoftwareBorl_1  +
push 80000001h  +
call RegOpenKeyExA  +
test eax eax +
jnz loc_4BCD74  +
xor eax eax +
push ebp  +
push offset loc_4BCD6D  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov [ebp+cbData] 5 +
lea eax [ebp+LibFileName] +
mov edx 105h +
call sub_4BCAB0  +
lea eax [ebp+cbData] +
push eax  +
lea eax [ebp+String2] +
push eax  +
push 0  +
push 0  +
lea eax [ebp+LibFileName] +
push eax  +
mov eax [ebp+hKey] +
push eax  +
call RegQueryValueExA  +
test eax eax +
jz loc_4BCD52  +
lea eax [ebp+cbData] +
push eax  +
lea eax [ebp+String2] +
push eax  +
push 0  +
push 0  +
push offset byte_4BCED4  +
mov eax [ebp+hKey] +
push eax  +
call RegQueryValueExA  +
test eax eax +
jz loc_4BCD52  +
mov [ebp+String2] 0 +
mov [ebp+var_E] 0 +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4BCD74  +
mov eax [ebp+hKey] +
push eax  +
call RegCloseKey  +
retn   +
jmp unknown_libname_539  +
jmp loc_4BCD63  +
push 105h  +
mov eax [ebp+lpString2] +
push eax  +
lea eax [ebp+LibFileName] +
push eax  +
call lstrcpynA  +
push 5  +
lea eax [ebp+LCData] +
push eax  +
push 3  +
call GetThreadLocale  +
push eax  +
call GetLocaleInfoA  +
xor esi esi +
cmp [ebp+LibFileName] 0 +
jz loc_4BCE8E  +
cmp [ebp+LCData] 0 +
jnz loc_4BCDBB  +
cmp [ebp+String2] 0 +
jz loc_4BCE8E  +
lea eax [ebp+LibFileName] +
push eax  +
call lstrlenA  +
mov ebx eax +
lea eax [ebp+LibFileName] +
add ebx eax +
jmp loc_4BCDD4  +
dec ebx  +
cmp byte ptr [ebx] 2Eh +
jz loc_4BCDE3  +
lea eax [ebp+LibFileName] +
cmp ebx eax +
jnz loc_4BCDD3  +
lea eax [ebp+LibFileName] +
cmp ebx eax +
jz loc_4BCE8E  +
inc ebx  +
cmp [ebp+String2] 0 +
jz loc_4BCE20  +
mov edx ebx +
sub edx eax +
mov eax 105h +
sub eax edx +
push eax  +
lea eax [ebp+String2] +
push eax  +
push ebx  +
call lstrcpynA  +
push 2  +
push 0  +
lea eax [ebp+LibFileName] +
push eax  +
call LoadLibraryExA  +
mov esi eax +
test esi esi +
jnz loc_4BCE8E  +
cmp [ebp+LCData] 0 +
jz loc_4BCE8E  +
lea eax [ebp+LibFileName] +
mov edx ebx +
sub edx eax +
mov eax 105h +
sub eax edx +
push eax  +
lea eax [ebp+LCData] +
push eax  +
push ebx  +
call lstrcpynA  +
push 2  +
push 0  +
lea eax [ebp+LibFileName] +
push eax  +
call LoadLibraryExA  +
mov esi eax +
test esi esi +
jnz loc_4BCE8E  +
mov byte ptr [ebp-0Bh] 0 +
lea eax [ebp+LibFileName] +
mov edx ebx +
sub edx eax +
mov eax 105h +
sub eax edx +
push eax  +
lea eax [ebp+LCData] +
push eax  +
push ebx  +
call lstrcpynA  +
push 2  +
push 0  +
lea eax [ebp+LibFileName] +
push eax  +
call LoadLibraryExA  +
mov esi eax +
mov eax esi +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
retn   +
***
retn   +
***
mov eax 8 +
call sub_4B97C0  +
mov edx dword_4E6F6C +
mov [eax] edx +
mov [eax+4] ebx +
mov dword_4E6F6C eax +
pop ebx  +
retn   +
***
mov esi dword_4E6F6C +
test esi esi +
jz loc_4BCF36  +
mov edx [esi+4] +
cmp edx eax +
jnz loc_4BCF36  +
mov eax dword_4E6F6C +
mov eax [eax] +
mov dword_4E6F6C eax +
mov edx 8 +
mov eax esi +
call sub_4B97E0  +
pop esi  +
pop ebx  +
retn   +
mov edx esi +
test edx edx +
jz loc_4BCF63  +
mov ecx [edx] +
test ecx ecx +
jz loc_4BCF5D  +
mov ebx [ecx+4] +
cmp ebx eax +
jnz loc_4BCF5D  +
mov esi ecx +
mov eax [ecx] +
mov [edx] eax +
mov edx 8 +
mov eax esi +
call sub_4B97E0  +
jmp loc_4BCF63  +
mov edx [edx] +
test edx edx +
jnz loc_4BCF3C  +
pop esi  +
pop ebx  +
retn   +
***
add esp 0FFFFFFF8h +
push ebx  +
push esi  +
push edi  +
mov [ebp+var_4] eax +
mov eax dword_4E6F6C +
mov [ebp+var_8] eax +
cmp [ebp+var_8] 0 +
jz loc_4BCFBB  +
xor eax eax +
push ebp  +
push offset loc_4BCFA3  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov ebx [ebp+var_8] +
mov eax [ebp+var_4] +
call dword ptr [ebx+4]  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
jmp loc_4BCFAD  +
jmp @System@@HandleAnyException$qqrv  +
call @@DoneExcept$qqrv  +
mov eax [ebp+var_8] +
mov eax [eax] +
mov [ebp+var_8] eax +
cmp [ebp+var_8] 0 +
jnz loc_4BCF82  +
pop edi  +
pop esi  +
pop ebx  +
pop ecx  +
pop ecx  +
pop ebp  +
retn   +
***
mov edx dword_4E6F68 +
mov [eax] edx +
mov dword_4E6F68 eax +
retn   +
***
push ecx  +
mov [ebp+var_4] eax +
xor edx edx +
push ebp  +
push offset loc_4BD038  +
push dword ptr fs:[edx]  +
mov fs:[edx] esp +
mov eax [ebp+var_4] +
mov eax [eax+4] +
call sub_4BCF68  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4BD03F  +
mov eax [ebp+var_4] +
cmp eax dword_4E6F68 +
jnz loc_4BD018  +
mov eax [ebp+var_4] +
mov eax [eax] +
mov dword_4E6F68 eax +
jmp locret_4BD037  +
mov eax dword_4E6F68 +
test eax eax +
jz locret_4BD037  +
mov edx [eax] +
cmp edx [ebp+var_4] +
jnz loc_4BD031  +
mov edx [ebp+var_4] +
mov edx [edx] +
mov [eax] edx +
jmp locret_4BD037  +
mov eax [eax] +
test eax eax +
jnz loc_4BD021  +
retn   +
jmp unknown_libname_539  +
jmp loc_4BD001  +
pop ecx  +
pop ebp  +
retn   +
***
mov edx [eax] +
test edx edx +
jz locret_4BD058  +
mov dword ptr [eax] 0 +
push eax  +
push edx  +
mov eax [edx] +
call dword ptr [eax+8]  +
pop eax  +
retn   +
***
test edx edx +
test edx edx +
jz unknown_libname_560  +
push eax  +
push ecx  +
push edx  +
mov ecx [eax] +
test ecx ecx +
jz loc_4BD0A2  +
push ecx  +
mov eax [ecx] +
call dword ptr [eax+8]  +
mov edx [esp+0] +
mov eax [edx] +
call dword ptr [eax]  +
test eax eax +
jz locret_4BD0B1  +
mov al 17h +
jmp @System@Error$qqr20System@TRuntimeError  +
retn   +
***
test eax eax +
jz locret_4BD0BE  +
push eax  +
mov eax [eax] +
call dword ptr [eax+4]  +
retn   +
***
add eax 4 +
push eax  +
call InterlockedDecrement  +
retn   +
***
cmp dword ptr [eax+4] 0 +
jz locret_4BD0D9  +
mov al 2 +
call @System@Error$qqr20System@TRuntimeError  +
retn   +
***
call sub_4BA7A4  +
mov dword ptr [eax+4] 1 +
retn   +
***
push ebx  +
mov ebx [ebp+arg_0] +
mov ecx [ebp+arg_8] +
mov edx [ebp+arg_4] +
mov eax ebx +
call @System@TObject@GetInterface$qqrrx5_GUIDpv  +
test al al +
jz loc_4BD108  +
xor eax eax +
jmp loc_4BD10D  +
mov eax 80004002h +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov eax [ebp+arg_0] +
add eax 4 +
push eax  +
call InterlockedIncrement  +
pop ebp  +
retn 4  +
***
push ebx  +
mov eax [ebp+arg_0] +
mov eax [eax+4] +
push eax  +
mov eax [eax] +
call dword ptr [eax+4]  +
pop ebp  +
retn 4  +
***
mov eax [ebp+arg_0] +
mov eax [eax+4] +
push eax  +
mov eax [eax] +
call dword ptr [eax+8]  +
pop ebp  +
retn 4  +
***
push ebx  +
mov ebx [ebp+arg_0] +
mov ecx [ebp+arg_8] +
mov edx [ebp+arg_4] +
mov eax ebx +
call @System@TObject@GetInterface$qqrrx5_GUIDpv  +
test al al +
jz loc_4BD194  +
xor eax eax +
jmp loc_4BD199  +
mov eax 80004002h +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
add esp 0FFFFFFF8h +
add esp 0FFFFFFF0h +
push ebx  +
push esi  +
mov [ebp+var_C] ecx +
mov [ebp+var_8] edx +
mov [ebp+var_4] eax +
cmp [ebp+var_C] 0 +
jnz loc_4BD29D  +
xor eax eax +
mov [ebp+var_10] eax +
jmp loc_4BD3B2  +
mov [ebp+var_10] 0FFFFFFFFh +
xor eax eax +
xor esi esi +
cmp [ebp+var_4] 0 +
jz loc_4BD35B  +
jmp loc_4BD339  +
mov edx [ebp+var_C] +
xor ecx ecx +
mov cl [edx+esi] +
inc esi  +
test cl 80h +
jz loc_4BD331  +
and ecx 3Fh +
cmp esi [ebp+arg_0] +
ja loc_4BD3B2  +
test cl 20h +
jz loc_4BD304  +
mov edx [ebp+var_C] +
mov dl [edx+esi] +
inc esi  +
mov ebx edx +
and bl 0C0h +
cmp bl 80h +
jnz loc_4BD3B2  +
cmp esi [ebp+arg_0] +
ja loc_4BD3B2  +
and dl 3Fh +
and edx 0FFh +
shl ecx 6 +
or edx ecx +
mov ecx edx +
mov edx [ebp+var_C] +
mov dl [edx+esi] +
inc esi  +
mov ebx edx +
and bl 0C0h +
cmp bl 80h +
jnz loc_4BD3B2  +
and dl 3Fh +
and edx 0FFh +
shl ecx 6 +
or dx cx +
mov ecx [ebp+var_4] +
mov [ecx+eax*2] dx +
jmp loc_4BD338  +
mov edx [ebp+var_4] +
mov [edx+eax*2] cx +
inc eax  +
cmp esi [ebp+arg_0] +
jnb loc_4BD347  +
cmp eax [ebp+var_8] +
jb loc_4BD2B7  +
cmp eax [ebp+var_8] +
jb loc_4BD350  +
mov eax [ebp+var_8] +
dec eax  +
mov edx [ebp+var_4] +
mov word ptr [edx+eax*2] 0 +
jmp loc_4BD3AE  +
cmp esi [ebp+arg_0] +
ja loc_4BD3AE  +
mov edx [ebp+var_C] +
mov dl [edx+esi] +
inc esi  +
test dl 80h +
jz loc_4BD3A8  +
mov ecx edx +
and cl 0F0h +
cmp cl 0F0h +
jz loc_4BD3B2  +
test dl 40h +
jz loc_4BD3B2  +
cmp esi [ebp+arg_0] +
ja loc_4BD3B2  +
mov ecx [ebp+var_C] +
mov cl [ecx+esi] +
and cl 0C0h +
cmp cl 80h +
jnz loc_4BD3B2  +
inc esi  +
cmp esi [ebp+arg_0] +
ja loc_4BD3B2  +
test dl 20h +
jz loc_4BD3A7  +
mov edx [ebp+var_C] +
mov dl [edx+esi] +
and dl 0C0h +
cmp dl 80h +
jnz loc_4BD3B2  +
inc esi  +
inc eax  +
cmp esi [ebp+arg_0] +
jbe loc_4BD360  +
inc eax  +
mov [ebp+var_10] eax +
mov eax [ebp+var_10] +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn 4  +
***
push 0  +
push ebx  +
push esi  +
mov esi edx +
mov ebx eax +
xor eax eax +
push ebp  +
push offset loc_4BD45F  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov eax esi +
call unknown_libname_540  +
mov eax ebx +
xor edx edx +
call @System@@WStrCmp$qqrv  +
jz loc_4BD449  +
mov eax ebx +
call @System@@WStrLen$qqrx17System@WideString  +
lea edx [eax+eax*2] +
lea eax [ebp+var_4] +
call @System@@LStrSetLength$qqrv  +
mov eax ebx +
call @System@@WStrLen$qqrx17System@WideString  +
push eax  +
mov eax [ebp+var_4] +
call sub_4BB610  +
inc eax  +
push eax  +
mov eax ebx +
call @System@@WStrToPWChar$qqrx17System@WideString  +
push eax  +
mov eax [ebp+var_4] +
call unknown_libname_550  +
pop ecx  +
pop edx  +
call @System@UnicodeToUtf8$qqrpcuipbui  +
test eax eax +
jle loc_4BD437  +
mov edx eax +
dec edx  +
lea eax [ebp+var_4] +
call @System@@LStrSetLength$qqrv  +
jmp loc_4BD43F  +
lea eax [ebp+var_4] +
call unknown_libname_540  +
mov eax esi +
mov edx [ebp+var_4] +
call unknown_libname_542  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4BD466  +
lea eax [ebp+var_4] +
call unknown_libname_540  +
retn   +
jmp unknown_libname_539  +
jmp loc_4BD456  +
pop esi  +
pop ebx  +
pop ecx  +
pop ebp  +
retn   +
***
push 0  +
push ebx  +
push esi  +
mov esi edx +
mov ebx eax +
xor eax eax +
push ebp  +
push offset loc_4BD503  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
mov eax esi +
call unknown_libname_552  +
test ebx ebx +
jz loc_4BD4ED  +
mov eax ebx +
call sub_4BB610  +
mov edx eax +
lea eax [ebp+var_4] +
call @System@@WStrSetLength$qqrr17System@WideStringi  +
mov eax ebx +
call sub_4BB610  +
push eax  +
mov eax [ebp+var_4] +
call @System@@WStrLen$qqrx17System@WideString  +
inc eax  +
push eax  +
mov eax ebx +
call unknown_libname_550  +
push eax  +
mov eax [ebp+var_4] +
call @System@@WStrToPWChar$qqrx17System@WideString  +
pop ecx  +
pop edx  +
call sub_4BD27C  +
test eax eax +
jle loc_4BD4DB  +
mov edx eax +
dec edx  +
lea eax [ebp+var_4] +
call @System@@WStrSetLength$qqrr17System@WideStringi  +
jmp loc_4BD4E3  +
lea eax [ebp+var_4] +
call unknown_libname_552  +
mov eax esi +
mov edx [ebp+var_4] +
call @System@@WStrAsg$qqrr17System@WideStringx17System@WideString  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4BD50A  +
lea eax [ebp+var_4] +
call unknown_libname_552  +
retn   +
jmp unknown_libname_539  +
jmp loc_4BD4FA  +
pop esi  +
pop ebx  +
pop ecx  +
pop ebp  +
retn   +
***
push 0  +
push ebx  +
push esi  +
mov esi edx +
mov ebx eax +
xor eax eax +
push ebp  +
push offset loc_4BD553  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
lea eax [ebp+var_4] +
mov edx ebx +
call unknown_libname_554  +
mov eax [ebp+var_4] +
mov edx esi +
call sub_4BD3C0  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4BD55A  +
lea eax [ebp+var_4] +
call unknown_libname_552  +
retn   +
jmp unknown_libname_539  +
jmp loc_4BD54A  +
pop esi  +
pop ebx  +
pop ecx  +
pop ebp  +
retn   +
***
add esp 0FFFFFC00h +
mov esi edx +
mov ebx eax +
test ebx ebx +
jz loc_4BD5AD  +
cmp dword ptr [ebx+4] 10000h +
jge loc_4BD5A3  +
push 400h  +
lea eax [esp+404h+Buffer] +
push eax  +
mov eax [ebx+4] +
push eax  +
mov eax [ebx] +
mov eax [eax] +
call sub_4BCA74  +
push eax  +
call LoadStringA  +
mov ecx eax +
mov edx esp +
mov eax esi +
call @@LStrFromPCharLen$qqrr10AnsiStringpci  +
jmp loc_4BD5AD  +
mov eax esi +
mov edx [ebx+4] +
call unknown_libname_545  +
add esp 400h +
pop esi  +
pop ebx  +
retn   +
***
xor eax eax +
push ebp  +
push offset loc_4BD602  +
push dword ptr fs:[eax]  +
mov fs:[eax] esp +
inc dword_4F22E0  +
jnz loc_4BD5F4  +
mov eax offset unk_4F1D70 +
call sub_4B9F60  +
mov eax offset unk_4F1F3C +
call sub_4B9F60  +
mov eax offset unk_4F2108 +
call sub_4B9F60  +
call unknown_libname_523  +
xor eax eax +
pop edx  +
pop ecx  +
pop ecx  +
mov fs:[eax] edx +
push offset loc_4BD609  +
retn   +
jmp unknown_libname_539  +
jmp locret_4BD601  +
pop ebp  +
retn   +
***
sub dword_4F22E0 1 +
jnb locret_4BD692  +
mov byte_4E6F4C 2 +
mov dword_4F1D30 offset RaiseException +
mov dword_4F1D34 offset RtlUnwind +
mov byte_4F1D6E 2 +
mov dword_4F1D1C offset sub_4BC298 +
call @System@_16692  +
test al al +
jz loc_4BD64F  +
call @System@_16541  +
call unknown_libname_532  +
mov word_4F1D74 0D7B0h +
mov word_4F1F40 0D7B0h +
mov word_4F210C 0D7B0h +
call sub_4BC178  +
call GetCommandLineA  +
mov dword_4F1D60 eax +
call @System@_16453  +
mov dword_4F1D5C eax +
call GetCurrentThreadId  +
mov dword_4F1D54 eax +
retn   +
***
push ebx  +
push esi  +
mov esi [ebp+nitems] +
imul esi [ebp+size] +
push esi  +
call _malloc  +
pop ecx  +
mov ebx eax +
test eax eax +
jz loc_4BD6B9  +
push esi  +
push 0  +
push ebx  +
call _memset  +
add esp 0Ch +
mov eax ebx +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
mov eax [ebp+block] +
push eax  +
call _free  +
pop ecx  +
pop ebp  +
retn   +
***
mov eax [ebp+handle] +
push eax  +
call __rtl_close  +
pop ecx  +
pop ebp  +
retn   +
***
mov eax dword_4F2430 +
mov edx [ebp+arg_0] +
mov dword_4F2430 edx +
pop ebp  +
retn   +
***
add esp 0FFFFFFD8h +
mov eax offset stru_4E6FE0 +
push ebx  +
push esi  +
push edi  +
lea edi [ebp+var_4] +
mov ebx [ebp+arg_0] +
call @__InitExceptBlockLDTC  +
test ebx ebx +
jnz loc_4BD764  +
mov ebx 1 +
jmp loc_4BD764  +
cmp dword_4F2430 0 +
jz loc_4BD729  +
call dword_4F2430  +
jmp loc_4BD764  +
lea eax [ebp+var_28] +
mov edx offset off_4E7024 +
push eax  +
push 0  +
push 0  +
push 0  +
push 1  +
push offset @std@bad_alloc@$bctr$qrx13std@bad_alloc  +
push 0  +
mov ecx offset off_4E7038 +
mov [ebp+var_18] 8 +
mov [edi] edx +
inc [ebp+var_C]  +
mov [edi] ecx +
inc [ebp+var_C]  +
push edi  +
push offset @$xt$13std@bad_alloc  +
call @_ThrowExceptionLDTC$qpvt1t1t1uiuiuipuct1  +
add esp 24h +
push ebx  +
call _malloc  +
pop ecx  +
mov esi eax +
test eax eax +
jz loc_4BD718  +
mov eax esi +
mov edx [ebp+var_28] +
mov large fs:0 edx +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
add esp 0FFFFFFDCh +
mov eax offset stru_4E7004 +
call @__InitExceptBlockLDTC  +
mov [ebp+var_14] 8 +
mov edx offset off_4E7024 +
mov ecx [ebp+arg_0] +
mov [ecx] edx +
inc [ebp+var_8]  +
mov eax offset off_4E7038 +
mov edx [ebp+arg_0] +
mov [edx] eax +
mov ecx [ebp+var_24] +
mov large fs:0 ecx +
mov eax [ebp+arg_0] +
mov esp ebp +
pop ebp  +
retn   +
***
mov eax off_4E72BC +
pop ebp  +
retn   +
***
mov eax off_4E72C4 +
pop ebp  +
retn   +
***
mov eax [ebp+arg_0] +
push eax  +
call @$bnew$qui  +
pop ecx  +
pop ebp  +
retn   +
***
add esp 0FFFFFFD8h +
pop ecx  +
add esp 0FFFFFFDCh +
mov eax offset stru_4E7098 +
call @__InitExceptBlockLDTC  +
mov [ebp+var_14] 8 +
inc [ebp+var_8]  +
inc [ebp+var_8]  +
mov edx offset off_4E7024 +
mov dword_4F2434 edx +
mov ecx offset off_4E7038 +
mov dword_4F2434 ecx +
mov eax [ebp+var_24] +
mov large fs:0 eax +
mov esp ebp +
pop ebp  +
retn   +
***
add esp 0FFFFFFDCh +
mov eax offset stru_4E70AC +
call @__InitExceptBlockLDTC  +
sub [ebp+var_8] 2 +
push 2  +
push offset dword_4F2434  +
call unknown_libname_10  +
add esp 8 +
mov edx [ebp+var_24] +
mov large fs:0 edx +
mov esp ebp +
pop ebp  +
retn   +
***
mov ecx esp +
sub ecx 1000h +
cmp ecx eax +
jb loc_4BD9B9  +
sub esp 0FFCh +
push 0  +
jmp loc_4BD9A5  +
***
mov ecx esp +
mov esp eax +
push dword ptr [ecx+8]  +
push dword ptr [ecx+4]  +
push dword ptr [ecx]  +
sub esp 4 +
jmp edx  +
***
pop edx  +
pop eax  +
pop ecx  +
push edx  +
inc ecx  +
add eax 3 +
and eax 0FFFFFFFCh +
neg eax  +
add eax esp +
cmp eax esp +
ja loc_4BDA1F  +
push eax  +
push ecx  +
call ___GetStkIndex  +
add eax 4000h +
mov edx eax +
pop ecx  +
pop eax  +
cmp edx eax +
ja loc_4BDA1F  +
mov edx esp +
sub esp 1000h +
cmp esp eax +
jb loc_4BDA08  +
add esp 4 +
push 0  +
jmp loc_4BD9F7  +
mov esp eax +
push ebx  +
mov ebx [edx] +
mov [eax] ebx +
add eax 4 +
add edx 4 +
dec ecx  +
jnz loc_4BDA0B  +
pop ebx  +
pop edx  +
sub esp 4 +
jmp edx  +
xor eax eax +
jmp loc_4BDA19  +
***
cmp eax dword_4F244C +
jz locret_4BDA41  +
push offset aHrdir_b_cLoadl  +
call __ErrorExit  +
pop ecx  +
retn   +
***
push ebx  +
mov esi offset unk_4E7218 +
push offset aBorlndmm_0  +
call GetModuleHandleA  +
mov ebx eax +
mov dword_4F244C ebx +
test ebx ebx +
jnz loc_4BDAE2  +
xor eax eax +
pop esi  +
pop ebx  +
retn   +
call sub_4BDA24  +
push offset dword_4F2440  +
push offset dword_4F2438  +
push offset dword_4F243C  +
call ___CRTL_MEM_GetBorMemPtrs  +
add esp 0Ch +
push offset a@borlndmm@heap  +
mov edx dword_4F244C +
push edx  +
call GetProcAddress  +
mov dword_4F2444 eax +
push offset a@borlndmm@he_0  +
mov ecx dword_4F244C +
push ecx  +
call GetProcAddress  +
mov dword_4F2448 eax +
cmp dword_4F2444 0 +
jz loc_4BDB3C  +
cmp dword_4F2448 0 +
jnz loc_4BDB67  +
mov dword ptr [esi+0Ch] offset __internal_free +
mov dword ptr [esi+10h] offset __internal_malloc +
mov dword ptr [esi+14h] offset __internal_realloc +
mov dword ptr [esi+18h] offset __internal_free_heaps +
mov dword ptr [esi+8] 3 +
mov eax 1 +
pop esi  +
pop ebx  +
retn   +
cmp dword_4F243C 0 +
jz loc_4BDB82  +
cmp dword_4F2438 0 +
jz loc_4BDB82  +
cmp dword_4F2440 0 +
jnz loc_4BDB8D  +
push offset aHrdir_b_cGetme  +
call __ErrorExit  +
pop ecx  +
cmp dword ptr [esi+4] 0 +
jnz loc_4BDB99  +
cmp dword ptr [esi+8] 0 +
jz loc_4BDBA4  +
push offset aHrdir_b_cFatal  +
call __ErrorExit  +
pop ecx  +
mov dword ptr [esi+0Ch] offset __bormm_stub_FreeMem +
mov dword ptr [esi+10h] offset __bormm_stub_GetMem +
mov dword ptr [esi+14h] offset __bormm_stub_ReallocMem +
mov dword ptr [esi+18h] offset __bormm_stub_Terminate +
mov dword ptr [esi+8] 2 +
mov edx dword_4F2440 +
push edx  +
mov ecx dword_4F2438 +
push ecx  +
mov eax dword_4F243C +
push eax  +
call ___CRTL_VCL_HookSystem  +
add esp 0Ch +
call dword_4F2444  +
mov eax 1 +
pop esi  +
pop ebx  +
retn   +
***
mov eax [ebp+arg_0] +
test eax eax +
jz loc_4BDC04  +
call dword_4F2438  +
pop ebp  +
retn   +
***
mov eax [ebp+arg_0] +
test eax eax +
jz loc_4BDC1A  +
call dword_4F243C  +
pop ebp  +
retn   +
xor eax eax +
pop ebp  +
retn   +
***
mov eax [ebp+arg_4] +
mov edx [ebp+arg_0] +
test edx edx +
jnz loc_4BDC39  +
test eax eax +
jz loc_4BDC55  +
call dword_4F243C  +
pop ebp  +
retn   +
test eax eax +
jnz loc_4BDC47  +
mov eax edx +
call dword_4F2438  +
jmp loc_4BDC55  +
mov ecx eax +
mov eax edx +
mov edx ecx +
call dword_4F2440  +
pop ebp  +
retn   +
xor eax eax +
pop ebp  +
retn   +
***
call dword_4F2448  +
retn   +
***
mov eax [ebp+size] +
mov eax [ebp+block] +
mov eax [ebp+size] +
push eax  +
mov edx [ebp+block] +
push edx  +
call off_4E722C  +
add esp 8 +
pop ebp  +
retn   +
***
call ___CRTL_MEM_CheckBorMem  +
push 1  +
push 1  +
push 1  +
call ___CRTL_MEM_Revector  +
pop ecx  +
mov eax [ebp+arg_4] +
push eax  +
mov edx [ebp+arg_0] +
push edx  +
call off_4E722C  +
add esp 8 +
pop ebp  +
retn   +
***
mov dword_4E7214 1 +
retn   +
***
cmp dword_4E7214 0 +
retn   +
***
add esp 0FFFFFFF4h +
add esp 0FFFFFFF4h +
push ebx  +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_4BDD95  +
mov ebx eax +
lea eax [ebp+var_C] +
call @System@GetMemoryManager$qqrr21System@TMemoryManager  +
mov eax ebx +
call [ebp+var_8]  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
add esp 0FFFFFFF0h +
push ebx  +
push esi  +
push edi  +
mov ebx [ebp+arg_4] +
mov esi [ebp+arg_0] +
lea eax [ebp+var_10] +
call @System@GetMemoryManager$qqrr21System@TMemoryManager  +
test esi esi +
jz loc_4BDDD3  +
test ebx ebx +
jnz loc_4BDDC4  +
mov eax esi +
call [ebp+var_C]  +
xor eax eax +
jmp loc_4BDDE2  +
mov edi ebx +
mov [ebp+var_4] esi +
mov edx edi +
mov eax [ebp+var_4] +
call [ebp+var_8]  +
jmp loc_4BDDE2  +
test ebx ebx +
jnz loc_4BDDDB  +
xor eax eax +
jmp loc_4BDDE2  +
mov esi ebx +
mov eax esi +
call [ebp+var_10]  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
mov eax edx +
cmp byte_4CC07C 0 +
jnz loc_4BDE20  +
cmp byte_4CC07D 0 +
jz loc_4BDE18  +
cmp byte_4CC07D 0 +
jz loc_4BDE20  +
mov edx off_4EAA60 +
cmp dword ptr [edx] 0 +
jnz loc_4BDE20  +
mov ecx off_4EAA60 +
mov [ecx] eax +
mov eax off_4EAA84 +
mov byte ptr [eax] 1 +
call sub_4BD60C  +
retn   +
***
add esp 0FFFFFFF4h +
call @System@IsMemoryManagerSet$qqrv  +
test al al +
jnz loc_4BDE5D  +
mov eax [ebp+arg_0] +
mov [ebp+var_C] eax +
lea eax [ebp+var_C] +
mov edx [ebp+arg_4] +
mov [ebp+var_8] edx +
mov ecx [ebp+arg_8] +
mov [ebp+var_4] ecx +
call @System@SetMemoryManager$qqrrx21System@TMemoryManager  +
mov esp ebp +
pop ebp  +
retn   +
***
push offset @$xt$14std@bad_typeid  +
push 0  +
push 1  +
call @__GetTypeInfo$qpvt1t1  +
add esp 0Ch +
push eax  +
push offset @$xt$12std@bad_cast  +
push 0  +
push 1  +
call @__GetTypeInfo$qpvt1t1  +
add esp 0Ch +
push eax  +
call @std@type_info@$beql$xqrx13std@type_info  +
add esp 8 +
retn   +
***
add esp 0FFFFFFDCh +
mov eax offset stru_4E725C +
call @__InitExceptBlockLDTC  +
mov [ebp+var_14] 8 +
push offset stru_4F2450  +
call InitializeCriticalSection  +
inc [ebp+var_8]  +
inc [ebp+var_8]  +
inc [ebp+var_8]  +
inc [ebp+var_8]  +
mov dword_4F2468 1 +
mov edx offset off_4E7024 +
mov ecx offset off_4E72B4 +
mov dword_4F246C edx +
mov dword_4F246C ecx +
inc [ebp+var_8]  +
mov eax offset off_4E7024 +
mov dword_4F2470 eax +
mov edx offset off_4E72A0 +
mov dword_4F2470 edx +
mov ecx [ebp+var_24] +
mov large fs:0 ecx +
mov esp ebp +
pop ebp  +
retn   +
***
add esp 0FFFFFFDCh +
mov eax offset stru_4E7270 +
call @__InitExceptBlockLDTC  +
dec [ebp+var_8]  +
dec [ebp+var_8]  +
push 0  +
push offset dword_4F2470  +
call unknown_libname_9  +
add esp 8 +
dec [ebp+var_8]  +
dec [ebp+var_8]  +
push 0  +
push offset dword_4F246C  +
call unknown_libname_9  +
add esp 8 +
dec [ebp+var_8]  +
cmp dword_4F2468 0 +
jz loc_4BDF60  +
xor edx edx +
push offset stru_4F2450  +
mov dword_4F2468 edx +
call DeleteCriticalSection  +
mov ecx [ebp+var_24] +
mov large fs:0 ecx +
mov esp ebp +
pop ebp  +
retn   +
***
push ebx  +
add esp 0FFFFFFDCh +
mov eax offset stru_4E7284 +
push ebx  +
mov ebx [ebp+arg_0] +
call @__InitExceptBlockLDTC  +
test ebx ebx +
jz loc_4BE0C7  +
dec [ebp+var_8]  +
push 0  +
push ebx  +
call unknown_libname_9  +
add esp 8 +
test [ebp+arg_4] 1 +
jz loc_4BE0C7  +
push ebx  +
call __rtl_close  +
pop ecx  +
mov edx [ebp+var_24] +
mov large fs:0 edx +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
add esp 0FFFFFFDCh +
mov eax offset stru_4E728C +
push ebx  +
mov ebx [ebp+arg_0] +
call @__InitExceptBlockLDTC  +
test ebx ebx +
jz loc_4BE10B  +
dec [ebp+var_8]  +
push 0  +
push ebx  +
call unknown_libname_9  +
add esp 8 +
test [ebp+arg_4] 1 +
jz loc_4BE10B  +
push ebx  +
call __rtl_close  +
pop ecx  +
mov edx [ebp+var_24] +
mov large fs:0 edx +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
add esp 0FFFFFFDCh +
mov eax offset stru_4E72E0 +
call @__InitExceptBlockLDTC  +
mov [ebp+var_14] 8 +
push offset stru_4F2474  +
call InitializeCriticalSection  +
mov dword_4F248C 1 +
inc [ebp+var_8]  +
mov edx [ebp+var_24] +
mov large fs:0 edx +
mov esp ebp +
pop ebp  +
retn   +
***
add esp 0FFFFFFDCh +
mov eax [ebp+handle] +
add esp 0FFFFFFDCh +
push edi  +
mov edi [ebp+s] +
mov ecx [ebp+n] +
jecxz loc_4BE22A  +
mov al [ebp+c] +
cld   +
scas   +
jnz loc_4BE22A  +
lea eax [edi-1] +
pop edi  +
pop ebp  +
retn   +
xor eax eax +
jmp loc_4BE227  +
***
push esi  +
push esi  +
push edi  +
mov edi [ebp+dest] +
mov esi [ebp+src] +
mov ecx [ebp+n] +
mov edx ecx +
cmp edi esi +
jb loc_4BE289  +
jz loc_4BE297  +
std   +
lea esi [esi+ecx-1] +
lea edi [edi+ecx-1] +
and ecx 3 +
movs   +
mov ecx edx +
shr ecx 1 +
shr ecx 1 +
sub esi 3 +
sub edi 3 +
movs   +
cld   +
jmp loc_4BE297  +
cld   +
shr ecx 1 +
shr ecx 1 +
movs   +
mov ecx edx +
and ecx 3 +
movs   +
mov eax [ebp+dest] +
pop edi  +
pop esi  +
pop ebp  +
retn   +
***
push edi  +
mov al [ebp+c] +
mov edx [ebp+n] +
mov edi [ebp+s] +
mov ah al +
test edx 0FFFFFFFCh +
jz loc_4BE314  +
mov [edi] ax +
lea ecx [edi+edx-4] +
mov [edi+2] ax +
mov eax [edi] +
shr edx 3 +
jz loc_4BE30C  +
mov [edi] eax +
mov [edi+4] eax +
dec edx  +
jz loc_4BE301  +
mov [edi+8] eax +
mov [edi+0Ch] eax +
dec edx  +
jz loc_4BE301  +
mov [edi+10h] eax +
mov [edi+14h] eax +
dec edx  +
jz loc_4BE301  +
mov [edi+18h] eax +
mov [edi+1Ch] eax +
dec edx  +
jz loc_4BE301  +
mov [edi+20h] eax +
mov [edi+24h] eax +
dec edx  +
jz loc_4BE301  +
mov [edi+28h] eax +
mov [edi+2Ch] eax +
lea edi [edi+30h] +
dec edx  +
jnz loc_4BE2C9  +
mov [ecx] eax +
mov [ecx-4] eax +
mov eax [ebp+s] +
pop edi  +
pop ebp  +
retn   +
mov [ecx] eax +
mov eax [ebp+s] +
pop edi  +
pop ebp  +
retn   +
and edx 3 +
jz loc_4BE324  +
mov [edi] al +
dec dl  +
jz loc_4BE324  +
mov [edi+edx-1] ax +
mov eax [ebp+s] +
pop edi  +
pop ebp  +
retn   +
***
push edi  +
push esi  +
push ebx  +
mov edx [ebp+s] +
mov ecx edx +
mov al [ebp+c] +
cld   +
mov bl [edx] +
cmp al bl +
jz loc_4BE3C7  +
test bl bl +
jz loc_4BE3C3  +
mov bl [edx+1] +
cmp al bl +
jz loc_4BE3CB  +
test bl bl +
jz loc_4BE3C3  +
mov bl [edx+2] +
cmp al bl +
jz loc_4BE3D0  +
test bl bl +
jz loc_4BE3C3  +
mov bl [edx+3] +
cmp al bl +
jz loc_4BE3D5  +
add edx 4 +
test bl bl +
jnz loc_4BE395  +
xor eax eax +
jmp loc_4BE3D8  +
mov eax edx +
jmp loc_4BE3D8  +
lea eax [edx+1] +
jmp loc_4BE3D8  +
lea eax [edx+2] +
jmp loc_4BE3D8  +
lea eax [edx+3] +
pop ebx  +
pop ebp  +
retn   +
***
mov eax [esp+s] +
test al 3 +
jnz loc_4BE411  +
mov edx [eax] +
add eax 4 +
mov ecx edx +
sub edx 1010101h +
and edx 80808080h +
jz loc_4BE3E4  +
not ecx  +
and edx ecx +
jz loc_4BE3E4  +
test dl dl +
jnz loc_4BE42B  +
test dh dh +
jnz loc_4BE42C  +
test edx 0FF0000h +
jnz loc_4BE42D  +
jmp loc_4BE42E  +
add eax 4 +
test byte ptr [eax-4] 0FFh +
jz loc_4BE42B  +
test byte ptr [eax-3] 0FFh +
jz loc_4BE42C  +
test byte ptr [eax-2] 0FFh +
jz loc_4BE42D  +
dec eax  +
and al 0FCh +
jmp loc_4BE3E4  +
dec eax  +
dec eax  +
dec eax  +
mov ecx [esp+s] +
dec eax  +
sub eax ecx +
retn   +
***
push edi  +
push ebx  +
mov edi [ebp+dest] +
mov ecx 0FFFFFFFFh +
xor al al +
cld   +
scas   +
mov ecx [ebp+maxlen] +
lea ebx [edi-1] +
and ecx 3 +
mov edx [ebp+src] +
jecxz loc_4BE465  +
mov al [edx] +
mov [ebx] al +
test al al +
jz loc_4BE49F  +
inc edx  +
inc ebx  +
dec ecx  +
jnz loc_4BE458  +
mov ecx [ebp+maxlen] +
shr ecx 2 +
jecxz loc_4BE49C  +
mov al [edx] +
mov [ebx] al +
test al al +
jz loc_4BE49F  +
mov al [edx+1] +
mov [ebx+1] al +
test al al +
jz loc_4BE49F  +
mov al [edx+2] +
mov [ebx+2] al +
test al al +
jz loc_4BE49F  +
mov al [edx+3] +
add edx 4 +
mov [ebx+3] al +
add ebx 4 +
test al al +
jz loc_4BE49F  +
dec ecx  +
jnz loc_4BE46D  +
mov byte ptr [ebx] 0 +
mov eax [ebp+dest] +
pop ebx  +
pop edi  +
pop ebp  +
retn   +
***
push esi  +
push edi  +
cld   +
mov esi [ebp+s1] +
mov edi [ebp+s2] +
mov ecx [ebp+maxlen] +
dec ecx  +
js loc_4BE4C2  +
lods   +
scas   +
jnz loc_4BE4C6  +
test al al +
jnz loc_4BE4B7  +
xor eax eax +
jmp loc_4BE4CB  +
sbb eax eax +
or eax 1 +
pop edi  +
pop esi  +
pop ebp  +
retn   +
***
push esi  +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+s] +
push edi  +
call _strlen  +
pop ecx  +
mov esi eax +
inc esi  +
push esi  +
call _malloc  +
pop ecx  +
mov ebx eax +
test eax eax +
jz loc_4BE573  +
push esi  +
push edi  +
push ebx  +
call _memcpy  +
add esp 0Ch +
mov eax ebx +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
push ebx  +
push esi  +
push edi  +
mov edi [ebp+src] +
mov esi [ebp+dest] +
push edi  +
call _strlen  +
pop ecx  +
mov ebx eax +
cmp ebx [ebp+maxlen] +
jbe loc_4BE5A6  +
mov eax [ebp+maxlen] +
push eax  +
push edi  +
push esi  +
call _memcpy  +
add esp 0Ch +
jmp loc_4BE5C4  +
push ebx  +
push edi  +
push esi  +
call _memcpy  +
add esp 0Ch +
mov edx [ebp+maxlen] +
sub edx ebx +
add ebx esi +
push edx  +
push 0  +
push ebx  +
call _memset  +
add esp 0Ch +
mov eax esi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
mov eax [ebp+dest] +
mov edx [ebp+src] +
mov cl [edx] +
mov [eax] cl +
test cl cl +
jz loc_4BE601  +
inc eax  +
mov cl [edx+1] +
mov [eax] cl +
test cl cl +
jz loc_4BE601  +
inc eax  +
mov cl [edx+2] +
mov [eax] cl +
test cl cl +
jz loc_4BE601  +
inc eax  +
mov cl [edx+3] +
add edx 4 +
mov [eax] cl +
test cl cl +
jz loc_4BE601  +
inc eax  +
jmp loc_4BE5D5  +
pop ebp  +
retn   +
***
xor edx edx +
push ebx  +
push esi  +
mov esi [ebp+src] +
push esi  +
call _wcslen  +
pop ecx  +
mov ebx eax +
xor ecx ecx +
mov eax [ebp+dst] +
mov edx eax +
mov eax esi +
cmp ebx ecx +
jbe loc_4BE64B  +
mov si [eax] +
mov [edx] si +
inc ecx  +
add edx 2 +
add eax 2 +
cmp ebx ecx +
ja loc_4BE63A  +
mov eax [ebp+dst] +
mov word ptr [eax+ebx*2] 0 +
mov eax [ebp+dst] +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
add ebx [eax+4] +
mov [ebx+8] eax +
lea eax [esp+arg_0] +
mov [ebx+0Ch] eax +
mov dword ptr [ebx+4] offset __ExceptionHandler +
mov word ptr [ebx+10h] 0 +
mov word ptr [ebx+12h] 0 +
mov dword ptr [ebx+1Ch] 0 +
mov eax fs:0 +
mov [ebx] eax +
mov fs:0 ebx +
pop ebx  +
retn   +
***
mov fs:0 eax +
retn   +
***
add esp 0FFFFFFF8h +
add esp 0FFFFFFDCh +
add esp 0FFFFFFE8h +
push ecx  +
mov eax offset off_4E7024 +
call unknown_libname_9  +
add esp 8 +
push 0  +
push offset dword_4F2490  +
call unknown_libname_9  +
add esp 8 +
retn   +
***
push ebx  +
mov ebx [ebp+arg_0] +
test ebx ebx +
jnz loc_4BEBDF  +
mov eax offset aNotype +
pop ebx  +
pop ebp  +
retn   +
cmp word ptr [ebx+6] 0 +
jnz loc_4BEBFA  +
push 22h  +
push offset aXxtype_cpp_9  +
push offset aIdTpname  +
call __assert  +
add esp 0Ch +
movzx eax word ptr [ebx+6] +
add eax ebx +
pop ebx  +
pop ebp  +
retn   +
***
push ebx  +
push esi  +
push edi  +
mov esi [ebp+arg_4] +
mov ebx [ebp+arg_0] +
test ebx ebx +
jnz loc_4BEC2B  +
push 105h  +
push offset aXxtype_cpp_10  +
push offset aTp1  +
call __assert  +
add esp 0Ch +
test esi esi +
jnz loc_4BEC46  +
push 106h  +
push offset aXxtype_cpp_11  +
push offset aTp2  +
call __assert  +
add esp 0Ch +
cmp esi ebx +
jnz loc_4BEC54  +
mov eax 1 +
jmp loc_4BECDA  +
mov dx [ebx+4] +
cmp dx [esi+4] +
jnz loc_4BEC64  +
mov ecx [ebx] +
cmp ecx [esi] +
jz loc_4BEC68  +
xor eax eax +
jmp loc_4BECDA  +
mov dx [ebx+4] +
or dx [esi+4] +
test dl 80h +
jz loc_4BEC79  +
xor eax eax +
jmp loc_4BECDA  +
movzx edi word ptr [ebx+6] +
add edi ebx +
cmp word ptr [ebx+6] 0 +
jnz loc_4BEC9D  +
push 11Eh  +
push offset aXxtype_cpp_12  +
push offset aTp1Tpname  +
call __assert  +
add esp 0Ch +
movzx ebx word ptr [esi+6] +
add ebx esi +
cmp word ptr [esi+6] 0 +
jnz loc_4BECC1  +
push 11Fh  +
push offset aXxtype_cpp_13  +
push offset aTp2Tpname  +
call __assert  +
add esp 0Ch +
movsx eax byte ptr [edi] +
movsx edx byte ptr [ebx] +
inc ebx  +
inc edi  +
cmp edx eax +
jz loc_4BECD1  +
xor eax eax +
jmp loc_4BECDA  +
test eax eax +
jnz loc_4BECC1  +
mov eax 1 +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
push ecx  +
push ebx  +
push esi  +
push edi  +
mov eax [ebp+arg_8] +
mov esi [ebp+arg_4] +
mov ebx [ebp+arg_0] +
cmp esi ebx +
jnz loc_4BECFE  +
mov eax 1 +
jmp loc_4BEDE9  +
movzx edi word ptr [ebx+4] +
movzx edx word ptr [esi+4] +
mov [ebp+var_4] edx +
mov ecx [ebp+var_4] +
and ecx edi +
test cl 10h +
jz loc_4BED7B  +
and edi 300h +
and [ebp+var_4] 300h +
cmp edi [ebp+var_4] +
jz loc_4BED6B  +
test eax eax +
jnz loc_4BED67  +
mov eax edi +
mov edx [ebp+var_4] +
and edx 300h +
and eax 300h +
cmp eax edx +
jz loc_4BED67  +
mov eax [ebp+var_4] +
and eax 300h +
not eax  +
and eax edi +
test ah 3 +
jz loc_4BED55  +
xor eax eax +
jmp loc_4BEDE9  +
or edi 300h +
or [ebp+var_4] 300h +
cmp edi [ebp+var_4] +
jz loc_4BED6B  +
xor eax eax +
jmp loc_4BEDE9  +
mov eax 1 +
mov ebx [ebx+8] +
mov esi [esi+8] +
jmp loc_4BECF0  +
mov edx [ebp+var_4] +
and edx edi +
test dh 4 +
jz loc_4BEDAD  +
mov ecx [ebx+0Ch] +
cmp ecx [esi+0Ch] +
jz loc_4BED9D  +
test eax eax +
jnz loc_4BED99  +
mov eax [ebx+0Ch] +
or eax [esi+0Ch] +
jz loc_4BED9D  +
xor eax eax +
jmp loc_4BEDE9  +
mov eax 1 +
mov ebx [ebx+8] +
mov esi [esi+8] +
jmp loc_4BECF0  +
push esi  +
push ebx  +
call @__isSameTypeID$qp4tpidt1  +
add esp 8 +
test eax eax +
jz loc_4BEDC2  +
mov eax 1 +
jmp loc_4BEDE9  +
test edi 2 +
jz loc_4BEDE7  +
test byte ptr [ebp+var_4] 1 +
jz loc_4BEDE7  +
test byte ptr [ebx+0Ch] 4 +
jz loc_4BEDE7  +
push 1  +
push [ebp+arg_C]  +
push esi  +
push ebx  +
call unknown_libname_11  +
add esp 10h +
jmp loc_4BEDE9  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ecx  +
pop ebp  +
retn   +
***
mov eax [ebp+handle] +
push ebx  +
push esi  +
mov esi [ebp+arg_4] +
mov ebx [ebp+arg_0] +
mov eax [ebx+4] +
cmp eax [esi+4] +
jnz loc_4BEE27  +
mov al 1 +
jmp loc_4BEE7D  +
cmp dword ptr [ebx+4] 0 +
jz loc_4BEE36  +
mov edx [ebx+4] +
test byte ptr [edx+4] 80h +
jnz loc_4BEE45  +
cmp dword ptr [esi+4] 0 +
jz loc_4BEE49  +
mov ecx [esi+4] +
test byte ptr [ecx+4] 80h +
jz loc_4BEE49  +
xor eax eax +
jmp loc_4BEE7D  +
push ebx  +
call unknown_libname_13  +
pop ecx  +
push eax  +
push esi  +
call unknown_libname_13  +
pop ecx  +
mov edx eax +
pop eax  +
mov cl [eax] +
cmp cl [edx] +
jnz loc_4BEE77  +
test cl cl +
jz loc_4BEE77  +
mov cl [eax+1] +
cmp cl [edx+1] +
jnz loc_4BEE77  +
add eax 2 +
add edx 2 +
test cl cl +
jnz loc_4BEE5B  +
setz al  +
and eax 1 +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
add esp 0FFFFFFC4h +
mov edx offset off_4E7024 +
mov ecx offset off_4E72A0 +
mov eax [ebp+arg_0] +
mov [eax] edx +
mov [eax] ecx +
pop ebp  +
retn   +
***
push ebx  +
push esi  +
push edi  +
mov eax [ebp+arg_0] +
mov ebx eax +
cmp dword ptr [ebx+4] 0 +
jnz loc_4BF02D  +
cmp dword ptr [ebx+10h] 0 +
jz loc_4BEFF0  +
mov eax [ebx+10h] +
jmp loc_4BF036  +
cmp dword ptr [ebx+8] 0 +
jnz loc_4BEFFD  +
mov eax offset aNotype_0 +
jmp loc_4BF036  +
mov edx [ebx+8] +
mov edi [edx-2Ch] +
movzx esi byte ptr [edi] +
lea eax [esi+1] +
push eax  +
call @$bnwa$qui  +
pop ecx  +
mov [ebx+10h] eax +
push esi  +
inc edi  +
push edi  +
push dword ptr [ebx+10h]  +
call _memcpy  +
add esp 0Ch +
mov eax [ebx+10h] +
mov byte ptr [eax+esi] 0 +
mov eax [ebx+10h] +
jmp loc_4BF036  +
push dword ptr [eax+4]  +
call @__typeIDname$qp4tpid  +
pop ecx  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
push ebx  +
push esi  +
mov esi [ebp+arg_8] +
mov ebx [ebp+arg_4] +
cmp [ebp+arg_0] 0 +
jnz loc_4BF052  +
mov eax [ebp+arg_0] +
jmp loc_4BF0B2  +
movzx eax word ptr [ebx+10h] +
add eax ebx +
lea edx [ebp+arg_0] +
push edx  +
push esi  +
push 0  +
push eax  +
call sub_4BEADD  +
add esp 10h +
test eax eax +
jz loc_4BF071  +
mov eax [ebp+arg_0] +
jmp loc_4BF0B2  +
movzx eax word ptr [ebx+12h] +
add eax ebx +
lea edx [ebp+arg_0] +
push edx  +
push esi  +
push 1  +
push eax  +
call sub_4BEADD  +
add esp 10h +
test eax eax +
jz loc_4BF090  +
mov eax [ebp+arg_0] +
jmp loc_4BF0B2  +
mov edx offset aCanTAdjustClas +
test edx edx +
jz loc_4BF0B0  +
push 57Eh  +
push offset aXxtype_cpp_15  +
push offset aCanTAdjustCl_0  +
call __assert  +
add esp 0Ch +
xor eax eax +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
push ebx  +
mov ebx [ebp+handle] +
test ebx ebx +
jz loc_4BF17F  +
push 0  +
push ebx  +
call unknown_libname_12  +
add esp 8 +
test [ebp+arg_4] 1 +
jz loc_4BF17F  +
push ebx  +
call __rtl_close  +
pop ecx  +
pop ebx  +
pop ebp  +
retn   +
***
cmp dword_4E76D4 0 +
jnz loc_4BF197  +
mov dword_4E76D4 offset @std@terminate$qv +
cmp dword_4E76D8 0 +
jnz locret_4BF1AA  +
mov dword_4E76D8 offset @std@unexpected$qv +
retn   +
***
add esp 0FFFFFFDCh +
mov eax offset stru_4E76FC +
push ebx  +
push esi  +
push edi  +
call @__InitExceptBlockLDTC  +
mov edx offset @std@terminate$qv +
cmp edx dword_4E76D4 +
jz loc_4BF1E5  +
mov [ebp+var_14] 8 +
call dword_4E76D4  +
mov [ebp+var_14] 0 +
jmp loc_4BF1E5  +
call @_CatchCleanup$qv  +
call _abort  +
mov ecx [ebp+var_24] +
mov large fs:0 ecx +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
call @Sysinit@@GetTls$qqrv  +
and dword ptr [eax+14h] 0FFFFFFFDh +
mov eax offset @std@unexpected$qv +
cmp eax dword_4E76D8 +
jz loc_4BF21B  +
call dword_4E76D8  +
call ___call_terminate  +
retn   +
***
push offset a___cppdebughoo  +
push 0  +
call GetModuleHandleA  +
push eax  +
call GetProcAddress  +
mov dword_4F289C eax +
cmp dword_4F289C 0 +
jnz locret_4BF24E  +
mov dword_4F289C offset ___CPPdebugHook +
retn   +
***
add esp 0FFFFFFDCh +
mov eax offset stru_4E77E0 +
push ebx  +
push esi  +
push edi  +
call @__InitExceptBlockLDTC  +
call @Sysinit@@GetTls$qqrv  +
and dword ptr [eax+14h] 0FFFFFFFDh +
mov edx dword_4F289C +
cmp dword ptr [edx] 2 +
jnz loc_4BF28C  +
push dword_4E76D4  +
push 1  +
push 4  +
call ___raiseDebuggerException  +
add esp 0Ch +
call __flushall  +
mov eax dword_4E76D4 +
mov [ebp+var_14] 8 +
call eax  +
mov [ebp+var_14] 0 +
jmp loc_4BF2AB  +
call @_CatchCleanup$qv  +
call _abort  +
mov edx [ebp+var_24] +
mov large fs:0 edx +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
call @Sysinit@@GetTls$qqrv  +
and dword ptr [eax+14h] 0FFFFFFFDh +
mov eax dword_4F289C +
cmp dword ptr [eax] 2 +
jnz loc_4BF2EC  +
push dword_4E76D8  +
push 1  +
push 5  +
call ___raiseDebuggerException  +
add esp 0Ch +
mov eax dword_4E76D8 +
call eax  +
call _abort  +
retn   +
***
add esp 0FFFFFFF8h +
push ebx  +
mov ebx [ebp+arg_0] +
test ebx ebx +
setnz al  +
and eax 1 +
test ebx ebx +
jnz loc_4BF323  +
test ebx ebx +
jnz loc_4BF323  +
lea edx [ebp+var_8] +
push edx  +
call __GetExceptDLLinfoInternal  +
pop ecx  +
mov ebx [ebp+src] +
push 9Ch  +
push ebx  +
call @Sysinit@@GetTls$qqrv  +
add eax 10h +
push eax  +
call _memcpy  +
add esp 0Ch +
call @_InitTermAndUnexPtrs$qv  +
pop ebx  +
pop ecx  +
pop ecx  +
pop ebp  +
retn   +
***
push ebx  +
mov ebx [ebp+arg_0] +
call @Sysinit@@GetTls$qqrv  +
add eax 2Ch +
mov dword_4E7724 eax +
mov dword ptr [ebx] 82727349h +
mov dword ptr [ebx+4] offset unk_4E7710 +
pop ebx  +
pop ebp  +
retn   +
***
mov eax 1 +
pop ebp  +
retn   +
***
add esp 0FFFFFFF8h +
push ebx  +
push esi  +
push edi  +
mov esi [ebp+arg_8] +
mov edi [ebp+arg_4] +
mov ebx [ebp+arg_0] +
cmp dword ptr [ebx] 0EEDFAE6h +
jnz loc_4BF39D  +
xor eax eax +
jmp loc_4BF462  +
mov eax [ebx] +
cmp eax 0EEFFACEh +
jz loc_4BF3AD  +
cmp eax 0EEDFACEh +
jnz loc_4BF3BB  +
mov eax edi +
mov edx ebx +
call ___doGlobalUnwind  +
call ___call_terminate  +
cmp dword ptr [ebx] 0C00000FDh +
jnz loc_4BF3D7  +
cmp dword_4E77F4 0 +
jz loc_4BF3D7  +
push offset aStackOverflow  +
call __ErrorExit  +
pop ecx  +
cmp dword_4F28A4 0 +
jz loc_4BF3F8  +
mov edx [ebp+arg_C] +
push edx  +
push esi  +
push edi  +
push ebx  +
call dword_4F28A4  +
add esp 10h +
test eax eax +
jnz loc_4BF3F8  +
xor eax eax +
jmp loc_4BF462  +
cmp dword_4F28A0 0 +
jz loc_4BF419  +
mov edx [ebp+arg_C] +
push edx  +
push esi  +
push edi  +
push ebx  +
call dword_4F28A0  +
add esp 10h +
test eax eax +
jnz loc_4BF419  +
xor eax eax +
jmp loc_4BF462  +
cmp dword_4F5CF0 0 +
jz loc_4BF453  +
mov edx dword_4F5CF0 +
mov eax [edx] +
cmp eax 1 +
jz loc_4BF434  +
cmp eax 2 +
jnz loc_4BF453  +
mov eax [ebx] +
cmp eax 0EEDFACEh +
jb loc_4BF444  +
cmp eax 0EEFFACEh +
jbe loc_4BF453  +
push esi  +
push ebx  +
push edi  +
push 3  +
push 2  +
call ___raiseDebuggerException  +
add esp 14h +
mov [ebp+ExceptionInfo.ExceptionRecord] ebx +
mov [ebp+ExceptionInfo.ContextRecord] esi +
lea edx [ebp+ExceptionInfo] +
push edx  +
call UnhandledExceptionFilter  +
pop edi  +
pop esi  +
pop ebx  +
pop ecx  +
pop ecx  +
pop ebp  +
retn   +
***
mov eax [ebp+arg_0] +
xor edx edx +
mov [eax] edx +
mov dword ptr [eax+4] offset sub_4BF37C +
push eax  +
call __SetExceptionHandler  +
pop ecx  +
pop ebp  +
retn   +
***
mov eax [ebp+arg_0] +
push eax  +
call __UnsetExceptionHandler  +
pop ecx  +
pop ebp  +
retn   +
***
mov eax dword_4F28A4 +
mov edx [ebp+arg_0] +
mov dword_4F28A4 edx +
pop ebp  +
retn   +
***
mov dword_4F28A4 offset unknown_libname_14 +
retn   +
***
mov dword_4F28A0 offset unknown_libname_14 +
mov dword_4F28A4 offset unknown_libname_14 +
retn   +
***
mov eax dword_4F2CB4 +
test eax eax +
jz locret_4BF4E0  +
push eax  +
call __unsetexc  +
pop ecx  +
retn   +
***
mov eax dword_4F2CB4 +
test eax eax +
jz locret_4BF4F4  +
push eax  +
call __setexc  +
pop ecx  +
retn   +
***
mov eax [ebp+arg_0] +
mov eax [ebp+arg_0] +
mov ecx fs:0 +
cmp eax ecx +
jnz loc_4BF526  +
mov eax [eax] +
mov fs:0 eax +
pop ebp  +
retn   +
cmp ecx 0FFFFFFFFh +
jz loc_4BF524  +
cmp [ecx] eax +
jz loc_4BF533  +
mov ecx [ecx] +
jmp loc_4BF526  +
mov eax [eax] +
mov [ecx] eax +
jmp loc_4BF524  +
***
jmp RtlUnwind  +
***
push edi  +
call dword ptr [ebx]  +
pop ebp  +
retn   +
***
push ebx  +
mov eax [ebp+lpFileName] +
push eax  +
call GetFileAttributesA  +
mov ebx eax +
cmp eax 0FFFFFFFFh +
jnz loc_4BF580  +
call ___NTerror  +
pop ebx  +
pop ebp  +
retn   +
test [ebp+arg_4] 2 +
jz loc_4BF59C  +
test bl 1 +
jz loc_4BF59C  +
call ___errno  +
mov dword ptr [eax] 5 +
or eax 0FFFFFFFFh +
pop ebx  +
pop ebp  +
retn   +
xor eax eax +
pop ebx  +
pop ebp  +
retn   +
***
push ebx  +
push esi  +
mov ebx [ebp+arg_0] +
xor esi esi +
cmp ebx uNumber +
jb loc_4BF5C0  +
push 6  +
call ___IOerror  +
pop ecx  +
jmp loc_4BF615  +
push ebx  +
call __lock_handle  +
test byte_4E7CCA[ebx*4] 1 +
pop ecx  +
jz loc_4BF5D6  +
mov esi 1 +
test esi esi +
jnz loc_4BF5EA  +
mov eax hObject[ebx*4] +
push eax  +
call CloseHandle  +
dec eax  +
jnz loc_4BF609  +
xor edx edx +
mov dword ptr unk_4E7CC8[ebx*4] edx +
mov hObject[ebx*4] 0FFFFFFFFh +
push ebx  +
call __unlock_handle  +
pop ecx  +
xor eax eax +
jmp loc_4BF615  +
push ebx  +
call __unlock_handle  +
pop ecx  +
call ___NTerror  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
push ebx  +
push ebx  +
mov ebx [ebp+arg_0] +
cmp ebx uNumber +
jb loc_4BF6C8  +
xor eax eax +
pop ebx  +
pop ebp  +
retn   +
mov edx hObject[ebx*4] +
push edx  +
call GetFileType  +
cmp eax 2 +
setz al  +
and eax 1 +
pop ebx  +
pop ebp  +
retn   +
***
mov eax [ebp+hFile] +
push eax  +
call GetFileType  +
cmp eax 2 +
setz al  +
and eax 1 +
pop ebp  +
retn   +
***
push ebx  +
add esp 0FFFFFFECh +
add esp 0FFFFFFF8h +
push ebx  +
push esi  +
push edi  +
mov eax [ebp+s] +
add eax [ebp+arg_4] +
mov [ebp+var_4] eax +
mov edi [ebp+s] +
mov ebx edi +
mov eax [ebp+var_4] +
sub eax ebx +
push eax  +
push 0Dh  +
push ebx  +
call _memchr  +
add esp 0Ch +
mov esi eax +
test eax eax +
jnz loc_4BF9B5  +
mov esi [ebp+var_4] +
mov eax esi +
sub eax ebx +
cmp edi ebx +
mov [ebp+n] eax +
jz loc_4BF9CE  +
mov edx [ebp+n] +
push edx  +
push ebx  +
push edi  +
call _memcpy  +
add esp 0Ch +
mov ecx [ebp+var_4] +
dec ecx  +
cmp esi ecx +
jb loc_4BF9E0  +
mov eax edi +
sub eax [ebp+s] +
add eax [ebp+n] +
jmp loc_4BF9E8  +
lea ebx [esi+1] +
add edi [ebp+n] +
jmp loc_4BF99B  +
pop edi  +
pop esi  +
pop ebx  +
pop ecx  +
pop ecx  +
pop ebp  +
retn   +
***
add esp 0FFFFFFF4h +
push ebx  +
push esi  +
push edi  +
mov ebx [ebp+arg_4] +
mov eax [ebp+handle] +
cmp eax uNumber +
jb loc_4BFA14  +
push 0FFFFFFFAh  +
call ___IOerror  +
pop ecx  +
jmp loc_4BFB2F  +
mov edx [ebp+len] +
inc edx  +
cmp edx 2 +
jnb loc_4BFA24  +
xor eax eax +
jmp loc_4BFB2F  +
mov edx [ebp+handle] +
push edx  +
call __lock_handle  +
pop ecx  +
mov ecx [ebp+handle] +
test byte_4E7CC9[ecx*4] 40h +
jnz loc_4BFA53  +
mov eax [ebp+len] +
push eax  +
push ebx  +
mov edx [ebp+handle] +
push edx  +
call __rtl_read  +
add esp 0Ch +
mov ebx eax +
jmp loc_4BFB23  +
mov ecx [ebp+handle] +
test byte_4E7CC9[ecx*4] 2 +
jz loc_4BFA67  +
xor ebx ebx +
jmp loc_4BFB23  +
mov eax [ebp+handle] +
xor edi edi +
mov esi ebx +
lea edx unk_4E7CC8[eax*4] +
mov [ebp+var_C] edx +
cmp edi [ebp+len] +
jnb loc_4BFB21  +
mov ecx [ebp+len] +
sub ecx edi +
mov [ebp+var_4] ecx +
mov eax [ebp+var_4] +
push eax  +
push esi  +
mov edx [ebp+handle] +
push edx  +
call __rtl_read  +
add esp 0Ch +
mov ebx eax +
cmp eax 0FFFFFFFFh +
jnz loc_4BFAA6  +
or ebx 0FFFFFFFFh +
jmp loc_4BFB23  +
test ebx ebx +
jz loc_4BFB21  +
push ebx  +
push 1Ah  +
push esi  +
call _memchr  +
add esp 0Ch +
mov [ebp+var_8] eax +
test eax eax +
jz loc_4BFACF  +
mov edx [ebp+var_C] +
or dword ptr [edx] 200h +
mov ebx [ebp+var_8] +
sub ebx esi +
test ebx ebx +
jz loc_4BFB21  +
cmp byte ptr [esi+ebx-1] 0Dh +
jnz loc_4BFAF2  +
push 1  +
mov eax ebx +
dec eax  +
add eax esi +
push eax  +
mov edx [ebp+handle] +
push edx  +
call __rtl_read  +
add esp 0Ch +
inc eax  +
jnz loc_4BFAF2  +
or ebx 0FFFFFFFFh +
jmp loc_4BFB23  +
push ebx  +
push esi  +
call sub_4BF984  +
add esp 8 +
add edi eax +
cmp ebx [ebp+var_4] +
jnb loc_4BFB0C  +
mov edx [ebp+var_C] +
test byte ptr [edx+1] 20h +
jnz loc_4BFB21  +
cmp [ebp+var_8] 0 +
jnz loc_4BFB21  +
test eax eax +
jnz loc_4BFB21  +
add esi eax +
cmp edi [ebp+len] +
jb loc_4BFA81  +
mov ebx edi +
mov eax [ebp+handle] +
push eax  +
call __unlock_handle  +
pop ecx  +
mov eax ebx +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
add esp 0FFFFFDF8h +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_4] +
mov eax [ebp+handle] +
cmp eax uNumber +
jb loc_4BFB5F  +
push 0FFFFFFFAh  +
call ___IOerror  +
pop ecx  +
jmp loc_4BFC63  +
mov edx [ebp+len] +
inc edx  +
cmp edx 2 +
jnb loc_4BFB6F  +
xor eax eax +
jmp loc_4BFC63  +
mov edx [ebp+handle] +
push edx  +
call __lock_handle  +
pop ecx  +
mov ecx [ebp+handle] +
test byte_4E7CC9[ecx*4] 8 +
jz loc_4BFB96  +
push 2  +
push 0  +
mov eax [ebp+handle] +
push eax  +
call ___lseek  +
add esp 0Ch +
mov edx [ebp+handle] +
test byte_4E7CC9[edx*4] 40h +
jnz loc_4BFBBB  +
mov ecx [ebp+len] +
push ecx  +
push edi  +
mov eax [ebp+handle] +
push eax  +
call __rtl_write  +
add esp 0Ch +
mov ebx eax +
jmp loc_4BFC57  +
mov esi edi +
xor eax eax +
mov [ebp+var_4] eax +
xor edx edx +
mov [ebp+var_8] edx +
jmp loc_4BFC44  +
lea ebx [ebp+buf] +
jmp loc_4BFBE8  +
mov al [esi] +
inc esi  +
cmp al 0Ah +
jnz loc_4BFBE5  +
inc [ebp+var_4]  +
mov byte ptr [ebx] 0Dh +
inc ebx  +
mov byte ptr [ebx] 0Ah +
inc ebx  +
jmp loc_4BFBE8  +
mov [ebx] al +
inc ebx  +
lea edx [ebp+buf] +
mov ecx ebx +
sub ecx edx +
cmp ecx 1FFh +
jge loc_4BFC03  +
mov eax esi +
sub eax edi +
cmp eax [ebp+len] +
jb loc_4BFBD1  +
lea edx [ebp+buf] +
mov ecx ebx +
sub ecx edx +
lea eax [ebp+buf] +
push ecx  +
push eax  +
mov edx [ebp+handle] +
push edx  +
call __rtl_write  +
add esp 0Ch +
lea ecx [ebp+buf] +
sub ebx ecx +
cmp eax ebx +
jz loc_4BFC41  +
cmp eax 0FFFFFFFFh +
jnz loc_4BFC37  +
or ebx 0FFFFFFFFh +
jmp loc_4BFC57  +
mov ebx [ebp+var_8] +
sub ebx [ebp+var_4] +
add ebx eax +
jmp loc_4BFC57  +
add [ebp+var_8] eax +
mov eax esi +
sub eax edi +
cmp eax [ebp+len] +
jb loc_4BFBC9  +
mov ebx [ebp+var_8] +
sub ebx [ebp+var_4] +
mov eax [ebp+handle] +
push eax  +
call __unlock_handle  +
pop ecx  +
mov eax ebx +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
mov eax [ebp+arg_0] +
test eax eax +
jz loc_4BFC79  +
mov byte ptr [eax] 0 +
xor eax eax +
pop ebp  +
retn   +
***
push edi  +
call __lock_all_streams  +
xor edi edi +
mov esi uNumber +
mov ebx offset stru_4E7814 +
jmp loc_4BFCAE  +
test byte ptr [ebx+12h] 3 +
jz loc_4BFCAB  +
cmp dword ptr [ebx+8] 0 +
jz loc_4BFCAB  +
push ebx  +
call _fflush  +
pop ecx  +
inc edi  +
add ebx 18h +
mov eax esi +
add esi 0FFFFFFFFh +
test eax eax +
jnz loc_4BFC97  +
call __unlock_all_streams  +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
push ecx  +
mov eax [ebp+handle] +
cmp eax uNumber +
jb loc_4BFCDE  +
push 6  +
call ___IOerror  +
pop ecx  +
pop ecx  +
pop ebp  +
retn   +
push 0  +
lea edx [ebp+NumberOfBytesRead] +
push edx  +
mov ecx [ebp+len] +
push ecx  +
mov edx [ebp+buf] +
push edx  +
mov eax hObject[eax*4] +
push eax  +
call ReadFile  +
dec eax  +
jz loc_4BFD04  +
call ___NTerror  +
pop ecx  +
pop ebp  +
retn   +
mov eax [ebp+NumberOfBytesRead] +
pop ecx  +
pop ebp  +
retn   +
***
mov eax [ebp+len] +
push eax  +
mov edx [ebp+buf] +
push edx  +
mov ecx [ebp+handle] +
push ecx  +
call ___read  +
add esp 0Ch +
pop ebp  +
retn   +
***
push ecx  +
mov eax [ebp+handle] +
cmp eax uNumber +
jb loc_4BFD4A  +
push 6  +
call ___IOerror  +
pop ecx  +
pop ecx  +
pop ebp  +
retn   +
push 0  +
lea edx [ebp+NumberOfBytesWritten] +
push edx  +
mov ecx [ebp+len] +
push ecx  +
mov edx [ebp+buf] +
push edx  +
mov eax hObject[eax*4] +
push eax  +
call WriteFile  +
dec eax  +
jz loc_4BFD70  +
call ___NTerror  +
pop ecx  +
pop ebp  +
retn   +
mov eax [ebp+NumberOfBytesWritten] +
pop ecx  +
pop ebp  +
retn   +
***
mov eax [ebp+len] +
push eax  +
mov edx [ebp+buf] +
push edx  +
mov ecx [ebp+handle] +
push ecx  +
call ___write  +
add esp 0Ch +
pop ebp  +
retn   +
***
push ebx  +
push esi  +
push edi  +
mov ebx [ebp+arg_0] +
mov edi [ebp+arg_C] +
mov esi [ebp+arg_4] +
test byte ptr [ebx+12h] 4 +
jz loc_4BFDBB  +
mov eax [ebx+4] +
push eax  +
call _free  +
pop ecx  +
and word ptr [ebx+12h] 0FFF3h +
xor edx edx +
mov [ebx+0Ch] edx +
lea ecx [ebx+14h] +
mov [ebx+4] ecx +
mov [ebx] ecx +
cmp [ebp+arg_8] 2 +
jz loc_4BFE12  +
test edi edi +
jbe loc_4BFE12  +
mov off_4E8DC8 offset __xfflush +
test esi esi +
jnz loc_4BFDFF  +
push edi  +
call _malloc  +
pop ecx  +
mov esi eax +
test eax eax +
jz loc_4BFDFA  +
or word ptr [ebx+12h] 4 +
jmp loc_4BFDFF  +
or eax 0FFFFFFFFh +
jmp loc_4BFE14  +
mov [ebx] esi +
mov [ebx+4] esi +
mov [ebx+0Ch] edi +
cmp [ebp+arg_8] 1 +
jnz loc_4BFE12  +
or word ptr [ebx+12h] 8 +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
push ebx  +
push esi  +
push edi  +
mov ebx [ebp+stream] +
test ebx ebx +
jz loc_4BFE2E  +
cmp bl [ebx+17h] +
jz loc_4BFE36  +
or eax 0FFFFFFFFh +
jmp loc_4BFEB6  +
push ebx  +
call __lock_stream  +
cmp dword ptr [ebx+0Ch] 0 +
pop ecx  +
jz loc_4BFE69  +
cmp dword ptr [ebx+8] 0 +
jge loc_4BFE59  +
push ebx  +
call _fflush  +
pop ecx  +
test eax eax +
jz loc_4BFE59  +
or esi 0FFFFFFFFh +
jmp loc_4BFEAD  +
test byte ptr [ebx+12h] 4 +
jz loc_4BFE69  +
mov eax [ebx+4] +
push eax  +
call _free  +
pop ecx  +
movsx edx byte ptr [ebx+16h] +
push edx  +
call ___close  +
pop ecx  +
mov esi eax +
mov word ptr [ebx+12h] 0 +
xor eax eax +
xor edx edx +
mov [ebx+0Ch] eax +
mov [ebx+8] edx +
mov byte ptr [ebx+16h] 0FFh +
mov di [ebx+10h] +
test di di +
jz loc_4BFEAD  +
push edi  +
push 0  +
push 0  +
call ___mkname  +
add esp 0Ch +
push eax  +
call unknown_libname_18  +
pop ecx  +
mov word ptr [ebx+10h] 0 +
push ebx  +
call __unlock_stream  +
pop ecx  +
mov eax esi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
push ebx  +
push esi  +
mov ebx [ebp+stream] +
test ebx ebx +
jnz loc_4BFED1  +
call __flushout  +
xor eax eax +
jmp loc_4BFF47  +
cmp bl [ebx+17h] +
jz loc_4BFEDB  +
or eax 0FFFFFFFFh +
jmp loc_4BFF47  +
push ebx  +
call __lock_stream  +
cmp dword ptr [ebx+8] 0 +
pop ecx  +
jl loc_4BFF0A  +
test byte ptr [ebx+12h] 8 +
jnz loc_4BFEF5  +
lea edx [ebx+14h] +
cmp edx [ebx] +
jnz loc_4BFF06  +
xor ecx ecx +
mov [ebx+8] ecx +
lea eax [ebx+14h] +
cmp eax [ebx] +
jnz loc_4BFF06  +
mov edx [ebx+4] +
mov [ebx] edx +
xor esi esi +
jmp loc_4BFF3E  +
mov esi [ebx+0Ch] +
add esi [ebx+8] +
inc esi  +
sub [ebx+8] esi +
push esi  +
mov eax [ebx+4] +
mov [ebx] eax +
push eax  +
movsx edx byte ptr [ebx+16h] +
push edx  +
call ___write  +
add esp 0Ch +
cmp esi eax +
jz loc_4BFF3C  +
test byte ptr [ebx+13h] 2 +
jnz loc_4BFF3C  +
or word ptr [ebx+12h] 10h +
or esi 0FFFFFFFFh +
jmp loc_4BFF3E  +
xor esi esi +
push ebx  +
call __unlock_stream  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
push edi  +
mov eax [ebp+arg_0] +
mov off_4E7D94 eax +
pop ebp  +
retn   +
***
mov eax [ebp+arg_0] +
test eax eax +
jz loc_4BFFD1  +
mov eax [eax] +
mov dword_4E7810 eax +
pop ebp  +
retn   +
***
push ecx  +
push esi  +
mov ecx [ebp+arg_0] +
xor eax eax +
mov [ebp+var_4] eax +
mov al [ecx] +
inc ecx  +
cmp al 72h +
jnz loc_4BFFF1  +
xor edx edx +
mov esi 1 +
jmp loc_4C0026  +
cmp al 77h +
jnz loc_4C0008  +
mov edx 301h +
mov [ebp+var_4] 80h +
mov esi 2 +
jmp loc_4C0026  +
cmp al 61h +
jnz loc_4C001F  +
mov edx 901h +
mov [ebp+var_4] 80h +
mov esi 2 +
jmp loc_4C0026  +
xor eax eax +
jmp loc_4C00A9  +
mov al [ecx] +
inc ecx  +
cmp al 2Bh +
jz loc_4C003A  +
cmp byte ptr [ecx] 2Bh +
jnz loc_4C0052  +
cmp al 74h +
jz loc_4C003A  +
cmp al 62h +
jnz loc_4C0052  +
cmp al 2Bh +
jnz loc_4C0040  +
mov al [ecx] +
and edx 0FFFFFFFEh +
mov esi 3 +
mov [ebp+var_4] 180h +
or edx 2 +
cmp al 74h +
jnz loc_4C005E  +
or edx 4000h +
jmp loc_4C0090  +
cmp al 62h +
jnz loc_4C006D  +
or edx 8000h +
or esi 40h +
jmp loc_4C0090  +
cmp al 2Bh +
jz loc_4C0079  +
test al al +
jz loc_4C0079  +
xor eax eax +
jmp loc_4C00A9  +
mov ecx off_4E7D94 +
mov eax [ecx] +
and eax 0C000h +
or edx eax +
test dh 80h +
jz loc_4C0090  +
or esi 40h +
mov off_4E8DCC offset __xfclose +
mov ecx [ebp+arg_4] +
mov [ecx] edx +
mov edx [ebp+arg_8] +
mov eax [ebp+var_4] +
mov [edx] eax +
mov eax esi +
pop esi  +
pop ecx  +
pop ebp  +
retn   +
***
add esp 0FFFFFFF8h +
push ebx  +
mov ebx [ebp+arg_0] +
lea eax [ebp+var_8] +
push eax  +
lea edx [ebp+var_4] +
push edx  +
mov ecx [ebp+arg_8] +
push ecx  +
call sub_4BFFD4  +
add esp 0Ch +
mov [ebx+12h] ax +
test ax ax +
jz loc_4C00FB  +
cmp byte ptr [ebx+16h] 0 +
jge loc_4C0109  +
mov edx [ebp+var_8] +
push edx  +
mov ecx [ebp+var_4] +
or ecx [ebp+arg_C] +
push ecx  +
mov eax [ebp+lpFileName] +
push eax  +
call ___open  +
add esp 0Ch +
mov [ebx+16h] al +
test al al +
jge loc_4C0109  +
mov byte ptr [ebx+16h] 0FFh +
mov word ptr [ebx+12h] 0 +
xor eax eax +
jmp loc_4C0154  +
movsx edx byte ptr [ebx+16h] +
test byte_4E7CC9[edx*4] 20h +
jz loc_4C011D  +
or word ptr [ebx+12h] 200h +
push 200h  +
test byte ptr [ebx+13h] 2 +
jz loc_4C012F  +
mov ecx 1 +
jmp loc_4C0131  +
xor ecx ecx +
push ecx  +
push 0  +
push ebx  +
call _setvbuf  +
add esp 10h +
test eax eax +
jz loc_4C014C  +
push ebx  +
call _fclose  +
pop ecx  +
xor eax eax +
jmp loc_4C0154  +
mov word ptr [ebx+10h] 0 +
mov eax ebx +
pop ebx  +
pop ecx  +
pop ecx  +
pop ebp  +
retn   +
***
mov eax offset stru_4E7814 +
jmp loc_4C017F  +
mov edx uNumber +
shl edx 3 +
lea edx [edx+edx*2] +
add edx offset stru_4E7814 +
cmp eax edx +
jb loc_4C017C  +
xor eax eax +
retn   +
add eax 18h +
cmp byte ptr [eax+16h] 0 +
jge loc_4C0163  +
retn   +
***
push ebx  +
call __lock_all_streams  +
call ___getfp  +
mov ebx eax +
test eax eax +
jz loc_4C01B1  +
push 0  +
mov edx [ebp+mode] +
push edx  +
mov ecx [ebp+lpFileName] +
push ecx  +
push ebx  +
call ___openfp  +
add esp 10h +
mov ebx eax +
call __unlock_all_streams  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn   +
***
push ebx  +
push ecx  +
push ebx  +
push esi  +
push edi  +
mov ebx [ebp+stream] +
mov esi [ebp+arg_4] +
mov edi [ebp+arg_0] +
test byte ptr [ebx+12h] 8 +
jz loc_4C0240  +
mov [ebp+var_4] esi +
cmp [ebp+var_4] 0 +
jz loc_4C0234  +
push ebx  +
movsx eax byte ptr [edi] +
push eax  +
call _fputc  +
add esp 8 +
inc eax  +
jnz loc_4C022A  +
xor eax eax +
jmp loc_4C02C7  +
dec [ebp+var_4]  +
inc edi  +
cmp [ebp+var_4] 0 +
jnz loc_4C0213  +
mov eax esi +
jmp loc_4C02C7  +
jmp loc_4C02C7  +
mov eax [ebx+0Ch] +
test eax eax +
jz loc_4C028E  +
cmp eax esi +
jb loc_4C028E  +
mov edx [ebx+8] +
mov ecx edx +
add ecx esi +
test ecx ecx +
jl loc_4C0273  +
test edx edx +
jnz loc_4C0264  +
or edx 0FFFFFFFFh +
sub edx eax +
mov [ebx+8] edx +
jmp loc_4C0273  +
push ebx  +
call _fflush  +
pop ecx  +
test eax eax +
jz loc_4C0273  +
xor eax eax +
jmp loc_4C02C7  +
push esi  +
push edi  +
mov ecx [ebx] +
push ecx  +
call _memcpy  +
mov eax [ebx+8] +
add esp 0Ch +
add eax esi +
mov [ebx+8] eax +
mov eax esi +
add [ebx] esi +
jmp loc_4C02C7  +
cmp dword ptr [ebx+0Ch] 0 +
jz loc_4C02A9  +
cmp dword ptr [ebx+8] 0 +
jz loc_4C02A9  +
push ebx  +
call _fflush  +
pop ecx  +
test eax eax +
jz loc_4C02A9  +
xor eax eax +
jmp loc_4C02C7  +
push esi  +
push edi  +
movsx edx byte ptr [ebx+16h] +
push edx  +
call ___write  +
add esp 0Ch +
cmp eax 0FFFFFFFFh +
jz loc_4C02C1  +
cmp esi eax +
jbe loc_4C02C5  +
xor eax eax +
jmp loc_4C02C7  +
mov eax esi +
pop edi  +
pop esi  +
pop ebx  +
pop ecx  +
pop ebp  +
retn   +
***
add esp 0FFFFFFF8h +
push ebx  +
push esi  +
push edi  +
mov ebx [ebp+arg_8] +
mov esi [ebp+n] +
mov eax [ebp+arg_0] +
mov [ebp+dest] eax +
cmp dword ptr [ebx+0Ch] 0 +
jz loc_4C03CB  +
test esi esi +
jz loc_4C03F6  +
mov eax [ebx+8] +
test eax eax +
jz loc_4C032D  +
cmp eax esi +
jnb loc_4C0306  +
mov edi eax +
jmp loc_4C0308  +
mov edi esi +
push edi  +
mov eax [ebx] +
push eax  +
mov edx [ebp+dest] +
push edx  +
call _memcpy  +
add esp 0Ch +
add [ebx] edi +
sub [ebx+8] edi +
cmp esi edi +
jnz loc_4C0328  +
xor eax eax +
jmp loc_4C03F8  +
add [ebp+dest] edi +
sub esi edi +
mov ecx [ebx+0Ch] +
cmp esi ecx +
jb loc_4C0393  +
mov eax esi +
xor edx edx +
div  ecx +
mov edi esi +
sub edi edx +
push edi  +
mov eax [ebp+dest] +
push eax  +
movsx edx byte ptr [ebx+16h] +
push edx  +
call ___read  +
add esp 0Ch +
mov [ebp+var_4] eax +
cmp esi eax +
jnz loc_4C035E  +
xor eax eax +
jmp loc_4C03F8  +
cmp [ebp+var_4] 0FFFFFFFFh +
jnz loc_4C036E  +
or word ptr [ebx+12h] 10h +
jmp loc_4C03F6  +
mov edx [ebp+var_4] +
add [ebp+dest] edx +
sub esi [ebp+var_4] +
cmp edi [ebp+var_4] +
jz loc_4C0393  +
test byte ptr [ebx+12h] 40h +
jnz loc_4C038C  +
cmp [ebp+var_4] 0 +
jnz loc_4C02EF  +
or word ptr [ebx+12h] 20h +
jmp loc_4C03F6  +
push ebx  +
call unknown_libname_17  +
pop ecx  +
mov [ebp+var_4] eax +
inc eax  +
jz loc_4C03AE  +
mov dl byte ptr [ebp+var_4] +
mov ecx [ebp+dest] +
mov [ecx] dl +
inc [ebp+dest]  +
dec esi  +
jmp loc_4C03B5  +
or word ptr [ebx+12h] 20h +
jmp loc_4C03F6  +
test esi esi +
jnz loc_4C02F7  +
jmp loc_4C03F6  +
mov al byte ptr [ebp+var_4] +
mov edx [ebp+dest] +
mov [edx] al +
inc [ebp+dest]  +
dec esi  +
test esi esi +
jz loc_4C03EB  +
dec dword ptr [ebx+8]  +
js loc_4C03DE  +
mov ecx [ebx] +
inc dword ptr [ebx]  +
xor eax eax +
mov al [ecx] +
jmp loc_4C03E5  +
push ebx  +
call unknown_libname_16  +
pop ecx  +
mov [ebp+var_4] eax +
inc eax  +
jnz loc_4C03BF  +
cmp [ebp+var_4] 0FFFFFFFFh +
jnz loc_4C03F6  +
or word ptr [ebx+12h] 20h +
mov eax esi +
pop edi  +
pop esi  +
pop ebx  +
pop ecx  +
pop ecx  +
pop ebp  +
retn   +
***
push ebx  +
push esi  +
push edi  +
mov edi [ebp+stream] +
mov esi [ebp+size] +
test esi esi +
jnz loc_4C0414  +
xor eax eax +
jmp loc_4C043E  +
mov ebx esi +
imul ebx [ebp+n] +
push edi  +
call __lock_stream  +
pop ecx  +
push edi  +
push ebx  +
mov eax [ebp+ptr] +
push eax  +
call sub_4C02D0  +
add esp 0Ch +
sub ebx eax +
push edi  +
call __unlock_stream  +
mov eax ebx +
xor edx edx +
div  esi +
pop ecx  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
push ebx  +
push esi  +
mov ebx [ebp+stream] +
cmp bl [ebx+17h] +
jz loc_4C0455  +
xor eax eax +
jmp loc_4C048B  +
call __lock_all_streams  +
push ebx  +
call __lock_stream  +
pop ecx  +
push ebx  +
call _fclose  +
pop ecx  +
push 0  +
mov edx [ebp+mode] +
push edx  +
mov ecx [ebp+lpFileName] +
push ecx  +
push ebx  +
call ___openfp  +
add esp 10h +
mov esi eax +
push ebx  +
call __unlock_stream  +
pop ecx  +
call __unlock_all_streams  +
mov eax esi +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
push ebx  +
mov ebx [ebp+arg_0] +
mov edx [ebx+8] +
test edx edx +
jge loc_4C04A8  +
mov eax [ebx+0Ch] +
add eax edx +
inc eax  +
mov ecx eax +
jmp loc_4C04AC  +
mov eax edx +
mov ecx edx +
test byte ptr [ebx+12h] 40h +
jz loc_4C04B7  +
mov eax ecx +
pop ebx  +
pop ebp  +
retn   +
cmp dword ptr [ebx+8] 0 +
mov edx [ebx] +
jge loc_4C04DC  +
jmp loc_4C04C8  +
dec edx  +
cmp byte ptr [edx] 0Ah +
jnz loc_4C04C8  +
inc ecx  +
mov ebx eax +
add eax 0FFFFFFFFh +
test ebx ebx +
jnz loc_4C04C1  +
jmp loc_4C04E5  +
mov bl [edx] +
inc edx  +
cmp bl 0Ah +
jnz loc_4C04DC  +
inc ecx  +
mov ebx eax +
add eax 0FFFFFFFFh +
test ebx ebx +
jnz loc_4C04D3  +
mov eax ecx +
pop ebx  +
pop ebp  +
retn   +
***
push ebx  +
push esi  +
push edi  +
mov esi [ebp+whence] +
mov edi [ebp+offset] +
mov ebx [ebp+stream] +
push ebx  +
call _fflush  +
pop ecx  +
test eax eax +
jz loc_4C050B  +
or eax 0FFFFFFFFh +
jmp loc_4C055A  +
push ebx  +
call __lock_stream  +
pop ecx  +
cmp esi 1 +
jnz loc_4C0526  +
cmp dword ptr [ebx+8] 0 +
jle loc_4C0526  +
push ebx  +
call sub_4C0490  +
pop ecx  +
sub edi eax +
and word ptr [ebx+12h] 0FE5Fh +
xor edx edx +
mov [ebx+8] edx +
mov ecx [ebx+4] +
mov [ebx] ecx +
push esi  +
push edi  +
movsx eax byte ptr [ebx+16h] +
push eax  +
call ___lseek  +
add esp 0Ch +
inc eax  +
jnz loc_4C054D  +
or edx 0FFFFFFFFh +
jmp loc_4C054F  +
xor edx edx +
mov esi edx +
push ebx  +
call __unlock_stream  +
pop ecx  +
mov eax esi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
push ebx  +
push ebx  +
push esi  +
push edi  +
mov esi [ebp+stream] +
mov edi [ebp+n] +
mov ebx [ebp+size] +
test ebx ebx +
jnz loc_4C0603  +
mov eax edi +
jmp loc_4C062C  +
push esi  +
call __lock_stream  +
mov edx ebx +
pop ecx  +
imul edx edi +
push esi  +
push edx  +
mov ecx [ebp+ptr] +
push ecx  +
call ___fputn  +
add esp 0Ch +
xor edx edx +
div  ebx +
mov ebx eax +
push esi  +
call __unlock_stream  +
pop ecx  +
mov eax ebx +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
mov eax lpCriticalSection +
push eax  +
call __lock_nt  +
pop ecx  +
retn   +
***
mov eax dword_4F2A3C +
test eax eax +
jz loc_4C065C  +
push eax  +
call _free  +
pop ecx  +
xor edx edx +
mov dword_4F2A3C edx +
mov dword_4E7D98 1 +
retn   +
***
mov eax lpCriticalSection +
push eax  +
call __unlock_nt  +
pop ecx  +
retn   +
***
push ebx  +
cmp dword_4F2A3C 0 +
jnz loc_4C072F  +
push 0DCh  +
push offset aHandles_c  +
push offset aHlocks  +
call __assert  +
add esp 0Ch +
mov eax dword_4F2A3C +
mov edx [ebp+arg_0] +
mov ecx [eax+edx*4] +
push ecx  +
call __unlock_nt  +
pop ecx  +
cmp dword_4E7D98 0 +
jz loc_4C074F  +
call __cleanup_handle_locks  +
pop ebp  +
retn   +
***
xor eax eax +
mov eax [ebp+arg_4] +
mov eax [ebp+arg_0] +
cmp eax uNumber +
jnb loc_4C0813  +
xor edx edx +
mov dword ptr unk_4E7CC8[eax*4] edx +
pop ebp  +
retn   +
***
add esp 0FFFFFFF8h +
mov eax uNumber +
test eax eax +
push esi  +
mov esi [ebp+arg_0] +
lea edx uNumber[eax*4] +
jz loc_4C083F  +
cmp dword ptr [edx] 0 +
jnz loc_4C083F  +
dec eax  +
add edx 0FFFFFFFCh +
test eax eax +
jnz loc_4C0832  +
test esi esi +
jnz loc_4C0855  +
test eax eax +
jnz loc_4C084B  +
xor eax eax +
jmp loc_4C08AD  +
lea edx [eax+eax*4] +
add edx 4 +
mov eax edx +
jmp loc_4C08AD  +
mov [esi] eax +
xor ecx ecx +
mov [ebp+var_4] ecx +
add esi 4 +
mov [ebp+var_8] offset unk_4E7CC8 +
cmp eax [ebp+var_4] +
jle loc_4C0899  +
mov cl 1 +
mov edx [ebp+var_8] +
mov edx [edx] +
test dh 8 +
jz loc_4C087A  +
or cl 20h +
test dh 80h +
jnz loc_4C0882  +
or cl 80h +
test dh 20h +
jz loc_4C088A  +
or cl 40h +
mov [esi] cl +
inc esi  +
inc [ebp+var_4]  +
add [ebp+var_8] 4 +
cmp eax [ebp+var_4] +
jg loc_4C086B  +
shl eax 2 +
push eax  +
push offset hObject  +
push esi  +
call _memcpy  +
add esp 0Ch +
xor eax eax +
pop esi  +
pop ecx  +
pop ecx  +
pop ebp  +
retn   +
***
push edi  +
add esp 0FFFFFFB4h +
push offset aCreatingGlobal  +
push offset lpCriticalSection  +
call __create_lock  +
add esp 8 +
mov eax uNumber +
push eax  +
call SetHandleCount  +
mov ebx eax +
cmp eax uNumber +
jnb loc_4C08E7  +
mov uNumber ebx +
mov off_4E7808 offset sub_4C0818 +
xor edx edx +
mov [esp+4Ch+var_48] edx +
lea ecx [esp+4Ch+StartupInfo] +
push ecx  +
call GetStartupInfoA  +
movzx eax [esp+4Ch+StartupInfo.cbReserved2] +
mov esi [esp+4Ch+StartupInfo.lpReserved2] +
test eax eax +
jz loc_4C09AC  +
mov edx [esi] +
mov [esp+4Ch+var_4C] edx +
add esi 4 +
mov ecx [esp+4Ch+var_4C] +
lea ecx [ecx+ecx*4] +
add ecx 4 +
cmp ecx eax +
jnz loc_4C09AC  +
mov [esp+4Ch+var_48] 1 +
xor ebx ebx +
mov edi offset unk_4E7CC8 +
cmp ebx [esp+4Ch+var_4C] +
jge loc_4C097B  +
mov dl [esi] +
inc esi  +
xor eax eax +
test dl 20h +
jz loc_4C094E  +
or eax 800h +
test dl 40h +
jz loc_4C0958  +
or eax 2000h +
test dl 80h +
jz loc_4C0964  +
or eax 4000h +
jmp loc_4C0969  +
or eax 8000h +
mov ecx [edi] +
inc ebx  +
and ecx 3 +
or ecx eax +
mov [edi] ecx +
add edi 4 +
cmp ebx [esp+4Ch+var_4C] +
jl loc_4C093F  +
mov ebx [esp+4Ch+var_4C] +
lea eax unk_4E7CC8[ebx*4] +
jmp loc_4C098F  +
xor edx edx +
inc ebx  +
mov [eax] edx +
add eax 4 +
cmp ebx uNumber +
jb loc_4C0987  +
mov ecx [esp+4Ch+var_4C] +
shl ecx 2 +
push ecx  +
push esi  +
push offset hObject  +
call _memmove  +
add esp 0Ch +
cmp [esp+4Ch+var_48] 0 +
jnz loc_4C0A18  +
push 0FFFFFFF6h  +
call GetStdHandle  +
mov hObject eax +
push 0FFFFFFF5h  +
call GetStdHandle  +
mov dword_4F2974 eax +
push 0FFFFFFF4h  +
call GetStdHandle  +
mov dword_4F2978 eax +
xor ebx ebx +
mov esi offset unk_4E7CC8 +
push ebx  +
call ___isatty  +
pop ecx  +
test eax eax +
jnz loc_4C09F2  +
cmp dword_4E8F78 0 +
jz loc_4C0A09  +
or dword ptr [esi] 2000h +
cmp dword_4E8F78 0 +
jz loc_4C0A0F  +
or dword ptr [esi] 10000h +
jmp loc_4C0A0F  +
and dword ptr [esi] 0FFFFDFFFh +
inc ebx  +
add esi 4 +
cmp ebx 2 +
jle loc_4C09DE  +
add esp 4Ch +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
call __thread_data  +
add eax 10h +
retn   +
***
push ebx  +
mov ebx [ebp+arg_0] +
test ebx ebx +
jl loc_4C0A56  +
cmp ebx 12Ah +
jle loc_4C0A44  +
mov ebx 1 +
call ___doserrno  +
mov [eax] ebx +
movsx eax byte_4E7DFC[ebx] +
mov ebx eax +
jmp loc_4C0A6B  +
neg ebx  +
cmp ebx dword_4E7FF8 +
jge loc_4C0A3F  +
call ___doserrno  +
mov dword ptr [eax] 0FFFFFFFFh +
call ___errno  +
mov [eax] ebx +
or eax 0FFFFFFFFh +
pop ebx  +
pop ebp  +
retn   +
***
call GetLastError  +
and eax 0FFFFh +
push eax  +
call ___IOerror  +
pop ecx  +
retn   +
***
mov esi 32h +
push ebx  +
mov eax [ebp+arg_0] +
mov edx [eax+8] +
inc edx  +
mov [eax+8] edx +
push eax  +
call sub_4C1D34  +
pop ecx  +
pop ebp  +
retn   +
***
push ebx  +
mov ebx [ebp+arg_0] +
test ebx ebx +
jnz loc_4C0B7D  +
or eax 0FFFFFFFFh +
pop ebx  +
pop ebp  +
retn   +
mov eax [ebx+8] +
test eax eax +
jle loc_4C0B9C  +
dec eax  +
mov [ebx+8] eax +
mov edx [ebx] +
inc dword ptr [ebx]  +
mov al [edx] +
xor edx edx +
mov dl al +
mov byte_4F2A40 al +
mov eax edx +
pop ebx  +
pop ebp  +
retn   +
cmp dword ptr [ebx+8] 0 +
jl loc_4C0BB0  +
test word ptr [ebx+12h] 110h +
jnz loc_4C0BB0  +
test byte ptr [ebx+12h] 1 +
jnz loc_4C0BBB  +
or word ptr [ebx+12h] 10h +
or eax 0FFFFFFFFh +
pop ebx  +
pop ebp  +
retn   +
or word ptr [ebx+12h] 80h +
cmp dword ptr [ebx+0Ch] 0 +
jz loc_4C0BF3  +
push ebx  +
call sub_4C0AE8  +
pop ecx  +
test eax eax +
jz loc_4C0BD8  +
or eax 0FFFFFFFFh +
pop ebx  +
pop ebp  +
retn   +
mov edx [ebx+8] +
dec edx  +
mov [ebx+8] edx +
mov ecx [ebx] +
inc dword ptr [ebx]  +
xor edx edx +
mov al [ecx] +
mov byte_4F2A40 al +
mov dl al +
mov eax edx +
pop ebx  +
pop ebp  +
retn   +
test byte ptr [ebx+13h] 2 +
jz loc_4C0BFE  +
call sub_4C0AB4  +
push 1  +
push offset byte_4F2A40  +
movsx ecx byte ptr [ebx+16h] +
push ecx  +
call ___read  +
add esp 0Ch +
test eax eax +
jnz loc_4C0C42  +
movsx eax byte ptr [ebx+16h] +
push eax  +
call ___eof  +
pop ecx  +
dec eax  +
jz loc_4C0C2B  +
or word ptr [ebx+12h] 10h +
jmp loc_4C0C3C  +
mov dx [ebx+12h] +
and dx 0FE7Fh +
or dx 20h +
mov [ebx+12h] dx +
or eax 0FFFFFFFFh +
pop ebx  +
pop ebp  +
retn   +
and word ptr [ebx+12h] 0FFDFh +
xor eax eax +
mov al byte_4F2A40 +
pop ebx  +
pop ebp  +
retn   +
***
push ecx  +
push ebx  +
push ebx  +
push esi  +
mov esi [ebp+arg_4] +
mov ebx [ebp+arg_0] +
inc word ptr [esi]  +
mov ax [esi] +
test ax ax +
jnz loc_4C0DD7  +
mov word ptr [esi] 1 +
mov dx [esi] +
push edx  +
push 0  +
push ebx  +
call ___mkname  +
add esp 0Ch +
mov ebx eax +
push 0  +
push ebx  +
call j____access  +
add esp 8 +
test eax eax +
jz loc_4C0DC7  +
mov eax ebx +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
push ebx  +
push offset stru_4E782C  +
lea ebx [ebp+arg_4] +
call __lock_stream  +
pop ecx  +
push ebx  +
push 0  +
push 0  +
mov eax [ebp+format] +
push eax  +
push offset stru_4E782C  +
push offset ___fputn  +
call ___vprinter  +
add esp 18h +
mov ebx eax +
push offset stru_4E782C  +
call __unlock_stream  +
pop ecx  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn   +
***
push ebx  +
push esi  +
push edi  +
mov edi [ebp+size] +
mov esi [ebp+type] +
mov ebx [ebp+stream] +
cmp bl [ebx+17h] +
jnz loc_4C0E61  +
cmp esi 2 +
jg loc_4C0E61  +
cmp edi 7FFFFFFFh +
jbe loc_4C0E66  +
or eax 0FFFFFFFFh +
jmp loc_4C0E9A  +
push ebx  +
call __lock_stream  +
cmp dword ptr [ebx+8] 0 +
pop ecx  +
jz loc_4C0E80  +
push 1  +
push 0  +
push ebx  +
call _fseek  +
add esp 0Ch +
push edi  +
push esi  +
mov edx [ebp+buf] +
push edx  +
push ebx  +
call __allocbuf  +
add esp 10h +
mov esi eax +
push ebx  +
call __unlock_stream  +
pop ecx  +
mov eax esi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
push ebx  +
push esi  +
mov esi [ebp+arg_8] +
mov ebx [ebp+n] +
push ebx  +
mov eax [ebp+src] +
push eax  +
mov edx [esi] +
push edx  +
call _memcpy  +
add esp 0Ch +
cmp [ebp+arg_C] 0 +
jz loc_4C0EC8  +
add [esi] ebx +
mov ecx [esi] +
mov byte ptr [ecx] 0 +
mov eax ebx +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
mov eax [ebp+nsize] +
cmp eax 1 +
jb loc_4C0EE1  +
mov edx [ebp+buffer] +
mov byte ptr [edx] 0 +
lea edx [ebp+arg_C] +
lea ecx [ebp+buffer] +
push edx  +
push eax  +
push 1  +
mov eax [ebp+format] +
push eax  +
push ecx  +
push offset sub_4C0EA0  +
call ___vprinter  +
add esp 18h +
pop ebp  +
retn   +
***
mov eax [ebp+nsize] +
cmp eax 1 +
jb loc_4C0F11  +
mov edx [ebp+buffer] +
mov byte ptr [edx] 0 +
mov ecx [ebp+arglist] +
push ecx  +
push eax  +
push 1  +
mov eax [ebp+format] +
push eax  +
lea eax [ebp+buffer] +
push eax  +
push offset sub_4C0EA0  +
call ___vprinter  +
add esp 18h +
pop ebp  +
retn   +
***
push ebx  +
push ebx  +
push ebx  +
mov eax [ebp+buffer] +
mov eax [ebp+buffer] +
mov byte ptr [eax] 0 +
lea eax [ebp+buffer] +
mov edx [ebp+arglist] +
push edx  +
push 0  +
push 0  +
mov ecx [ebp+format] +
push ecx  +
push eax  +
push offset sub_4C0FA0  +
call ___vprinter  +
add esp 18h +
pop ebp  +
retn   +
***
mov ebx offset stru_4E7814 +
push offset aCreatingGlob_0  +
push offset dword_4F2A44  +
call __create_lock  +
add esp 8 +
xor eax eax +
lea edx [ebx+17h] +
mov ecx eax +
inc eax  +
shl ecx 3 +
lea ecx [ecx+ecx*2] +
add ecx ebx +
mov [edx] cl +
add edx 18h +
cmp eax 3 +
jl loc_4C1035  +
mov eax 3 +
lea edx [ebx+5Eh] +
jmp loc_4C1068  +
mov ecx eax +
mov byte ptr [edx] 0FFh +
shl ecx 3 +
inc eax  +
lea ecx [ecx+ecx*2] +
add ecx ebx +
mov [edx+1] cl +
add edx 18h +
cmp eax uNumber +
jb loc_4C1054  +
movsx eax byte ptr [ebx+16h] +
test byte_4E7CC9[eax*4] 20h +
jnz loc_4C1084  +
and word ptr [ebx+12h] 0FDFFh +
push 200h  +
test byte ptr [ebx+13h] 2 +
jz loc_4C1096  +
mov edx 1 +
jmp loc_4C1098  +
xor edx edx +
push edx  +
push 0  +
push ebx  +
call __allocbuf  +
movsx eax byte ptr [ebx+2Eh] +
add esp 10h +
test byte_4E7CC9[eax*4] 20h +
jnz loc_4C10B8  +
and word ptr [ebx+2Ah] 0FDFFh +
push 200h  +
test byte ptr [ebx+2Bh] 2 +
jz loc_4C10CA  +
mov ecx 2 +
jmp loc_4C10CC  +
xor ecx ecx +
push ecx  +
push 0  +
lea eax [ebx+18h] +
push eax  +
call __allocbuf  +
add esp 10h +
pop ebx  +
retn   +
***
call __lock_all_streams  +
test byte ptr [ebx+12h] 4 +
jz loc_4C110C  +
push ebx  +
call _fflush  +
pop ecx  +
mov eax [ebx+4] +
push eax  +
call _free  +
pop ecx  +
xor edx edx +
mov [ebx+0Ch] edx +
xor ecx ecx +
mov [ebx+8] ecx +
test byte ptr [ebx+2Ah] 4 +
jz loc_4C1130  +
lea eax [ebx+18h] +
push eax  +
call _fflush  +
pop ecx  +
mov edx [ebx+1Ch] +
push edx  +
call _free  +
pop ecx  +
xor ecx ecx +
xor eax eax +
mov [ebx+24h] ecx +
mov [ebx+20h] eax +
call __unlock_all_streams  +
pop ebx  +
retn   +
***
mov eax dword_4F2A44 +
push eax  +
call __lock_nt  +
pop ecx  +
retn   +
***
mov eax dword_4F2A44 +
push eax  +
call __unlock_nt  +
pop ecx  +
retn   +
***
push ebx  +
mov eax dword_4F2A48 +
test eax eax +
jz loc_4C1214  +
push eax  +
call _free  +
pop ecx  +
xor edx edx +
mov dword_4F2A48 edx +
mov dword_4E83B0 1 +
retn   +
***
cmp dword_4F2A48 0 +
mov eax [ebp+lpFileName] +
push eax  +
call DeleteFileA  +
dec eax  +
jnz loc_4C1287  +
xor eax eax +
jmp loc_4C128C  +
call ___NTerror  +
pop ebp  +
retn   +
***
push ebx  +
push ebx  +
mov ebx [ebp+arg_0] +
mov eax 1 +
cmp dword ptr [ebx+50h] 0 +
jz loc_4C130A  +
mov edx [ebx+64h] +
test edx edx +
jz loc_4C12EA  +
mov ecx [edx] +
cmp ecx [ebx+5Ch] +
ja loc_4C12EA  +
xor eax eax +
push eax  +
mov edx [ebx+58h] +
push edx  +
mov ecx [ebx+50h] +
push ecx  +
push ebx  +
call dword ptr [ebx+54h]  +
add esp 10h +
test eax eax +
jnz loc_4C1305  +
mov dword ptr [ebx+60h] 1 +
xor eax eax +
mov [ebx+50h] eax +
pop ebx  +
pop ebp  +
retn   +
***
push ebx  +
push esi  +
add esp 0FFFFFAE0h +
xor eax eax +
push ebx  +
push esi  +
push edi  +
mov esi [ebp+arg_8] +
mov [ebp+var_4C0] eax +
mov [ebp+var_4C4] eax +
mov [ebp+var_4D0] eax +
mov edx [ebp+arg_0] +
mov [ebp+var_4CC] edx +
mov ecx [ebp+arg_4] +
mov [ebp+var_4C8] ecx +
cmp [ebp+arg_C] 0 +
jz loc_4C13B8  +
lea eax [ebp+arg_10] +
jmp loc_4C13BA  +
xor eax eax +
mov [ebp+var_4BC] eax +
mov bl [esi] +
inc esi  +
test bl bl +
jz loc_4C1C9E  +
cmp bl 25h +
jnz loc_4C13D8  +
mov bl [esi] +
cmp bl 25h +
jnz loc_4C140F  +
inc esi  +
xor eax eax +
mov al bl +
test byte ptr dword_4F2A4D[eax] 4 +
jz loc_4C13FD  +
cmp byte ptr [esi] 0 +
jz loc_4C13FD  +
lea edx [ebp+var_520] +
push edx  +
push ebx  +
call sub_4C1310  +
add esp 8 +
mov bl [esi] +
inc esi  +
lea eax [ebp+var_520] +
push eax  +
push ebx  +
call sub_4C1310  +
add esp 8 +
jmp loc_4C13C0  +
lea edx [esi-1] +
xor ecx ecx +
mov [ebp+var_14] edx +
xor edx edx +
mov [ebp+var_10] edx +
mov eax ecx +
mov [ebp+var_9] 0 +
or ecx 0FFFFFFFFh +
xor edx edx +
mov [ebp+var_8] ecx +
mov [ebp+var_4] ecx +
mov [ebp+var_1C] edx +
mov edi 20h +
mov bl [esi] +
inc esi  +
cmp bl 20h +
jl loc_4C1C92  +
movsx edx bl +
cmp edx 7Fh +
jg loc_4C1C92  +
mov ecx ebx +
sub cl 20h +
xor edx edx +
mov dl cl +
xor ecx ecx +
mov cl byte_4E842E[edx] +
cmp ecx 1Ah +
ja loc_4C1435  +
jmp ds:off_4C146A[ecx*4]  +
test eax eax +
jg loc_4C1C92  +
or edi 1 +
jmp loc_4C1435  +
test eax eax +
jg loc_4C1C92  +
or edi 2 +
jmp loc_4C1435  +
test eax eax +
jg loc_4C1C92  +
cmp [ebp+var_9] 2Bh +
jz loc_4C1435  +
mov [ebp+var_9] bl +
jmp loc_4C1435  +
and edi 0FFFFFFDFh +
mov eax 5 +
jmp loc_4C1435  +
or edi 20h +
mov eax 5 +
jmp loc_4C1435  +
test eax eax +
jg loc_4C15A7  +
test edi 2 +
jnz loc_4C1435  +
or edi 8 +
mov eax 1 +
jmp loc_4C1435  +
add [ebp+arg_14] 4 +
mov edx [ebp+arg_14] +
cmp eax 2 +
mov ecx [edx-4] +
mov [ebp+var_30] ecx +
jge loc_4C157C  +
cmp [ebp+var_30] 0 +
jge loc_4C156C  +
mov eax [ebp+var_30] +
neg eax  +
mov [ebp+var_4] eax +
or edi 2 +
jmp loc_4C1572  +
mov eax [ebp+var_30] +
mov [ebp+var_4] eax +
mov eax 3 +
jmp loc_4C1435  +
cmp eax 4 +
jnz loc_4C1C92  +
mov edx [ebp+var_30] +
inc eax  +
mov [ebp+var_8] edx +
jmp loc_4C1435  +
cmp eax 4 +
jge loc_4C1C92  +
mov eax 4 +
inc [ebp+var_8]  +
jmp loc_4C1435  +
add bl 0D0h +
cmp eax 2 +
jg loc_4C15DA  +
cmp [ebp+var_4] 0FFFFFFFFh +
mov eax 2 +
jnz loc_4C15C5  +
movsx ecx bl +
mov [ebp+var_4] ecx +
jmp loc_4C1435  +
mov edx [ebp+var_4] +
add edx edx +
lea edx [edx+edx*4] +
movsx ecx bl +
add edx ecx +
mov [ebp+var_4] edx +
jmp loc_4C1435  +
cmp eax 4 +
jnz loc_4C1C92  +
mov edx [ebp+var_8] +
add edx edx +
lea edx [edx+edx*4] +
movsx ecx bl +
add edx ecx +
mov [ebp+var_8] edx +
jmp loc_4C1435  +
or edi 10h +
mov eax 5 +
jmp loc_4C1435  +
mov eax edi +
or eax 100h +
and eax 0FFFFFFEFh +
mov edi eax +
mov eax 5 +
jmp loc_4C1435  +
mov eax edi +
or eax 200h +
and eax 0FFFFFFEFh +
mov edi eax +
mov eax 5 +
jmp loc_4C1435  +
cmp byte ptr [esi] 36h +
jnz loc_4C1659  +
cmp byte ptr [esi+1] 34h +
jnz loc_4C1659  +
mov edx edi +
add esi 2 +
or edx 100h +
mov eax 5 +
and edx 0FFFFFDEFh +
mov edi edx +
jmp loc_4C1435  +
cmp byte ptr [esi] 33h +
jnz loc_4C167E  +
cmp byte ptr [esi+1] 32h +
jnz loc_4C167E  +
mov ecx edi +
add esi 2 +
or ecx 10h +
mov eax 5 +
and ecx 0FFFFFCFFh +
mov edi ecx +
jmp loc_4C1435  +
cmp byte ptr [esi] 31h +
jnz loc_4C16A4  +
cmp byte ptr [esi+1] 36h +
jnz loc_4C16A4  +
add esi 2 +
mov eax edi +
or eax 200h +
and eax 0FFFFFEEFh +
mov edi eax +
mov eax 5 +
jmp loc_4C1435  +
cmp byte ptr [esi] 38h +
jnz loc_4C1435  +
inc esi  +
and edi 0FFFFFCEFh +
mov eax 5 +
jmp loc_4C1435  +
mov [ebp+var_38] 8 +
jmp loc_4C16DD  +
mov [ebp+var_38] 0Ah +
jmp loc_4C16DD  +
mov [ebp+var_38] 10h +
lea edx [ebx-17h] +
mov [ebp+var_1D] dl +
mov [ebp+var_9] 0 +
xor ecx ecx +
jmp loc_4C16EE  +
mov [ebp+var_38] 0Ah +
mov cl 1 +
test edi 100h +
jz loc_4C170E  +
add [ebp+arg_14] 8 +
mov eax [ebp+arg_14] +
mov edx [eax-8] +
mov [ebp+var_28] edx +
mov edx [eax-4] +
mov [ebp+var_24] edx +
jmp loc_4C179E  +
test edi 10h +
jz loc_4C1740  +
add [ebp+arg_14] 4 +
mov eax [ebp+arg_14] +
test cl cl +
mov edx [eax-4] +
mov [ebp+var_2C] edx +
jz loc_4C1733  +
mov eax [ebp+var_2C] +
cdq   +
mov [ebp+var_28] eax +
mov [ebp+var_24] edx +
jmp loc_4C179E  +
mov eax [ebp+var_2C] +
xor edx edx +
mov [ebp+var_28] eax +
mov [ebp+var_24] edx +
jmp loc_4C179E  +
test edi 200h +
jz loc_4C1776  +
add [ebp+arg_14] 4 +
mov eax [ebp+arg_14] +
test cl cl +
mov dx [eax-4] +
mov [ebp+var_32] dx +
jz loc_4C1768  +
movsx eax [ebp+var_32] +
cdq   +
mov [ebp+var_28] eax +
mov [ebp+var_24] edx +
jmp loc_4C179E  +
movzx eax [ebp+var_32] +
xor edx edx +
mov [ebp+var_28] eax +
mov [ebp+var_24] edx +
jmp loc_4C179E  +
add [ebp+arg_14] 4 +
mov eax [ebp+arg_14] +
test cl cl +
mov edx [eax-4] +
mov [ebp+var_30] edx +
jz loc_4C1793  +
mov eax [ebp+var_30] +
cdq   +
mov [ebp+var_28] eax +
mov [ebp+var_24] edx +
jmp loc_4C179E  +
mov eax [ebp+var_30] +
xor edx edx +
mov [ebp+var_28] eax +
mov [ebp+var_24] edx +
lea eax [ebp+var_B7] +
mov [ebp+s] eax +
cmp [ebp+var_24] 0 +
jnz loc_4C17C1  +
cmp [ebp+var_28] 0 +
jnz loc_4C17C1  +
cmp [ebp+var_8] 0 +
jnz loc_4C17C4  +
mov edx [ebp+s] +
mov byte ptr [edx] 0 +
jmp loc_4C17DF  +
or edi 4 +
mov al [ebp+var_1D] +
push eax  +
push ecx  +
mov edx [ebp+var_38] +
push edx  +
mov ecx [ebp+s] +
push ecx  +
push [ebp+var_24]  +
push [ebp+var_28]  +
call ___int64toa  +
add esp 18h +
cmp [ebp+var_8] 0 +
jl loc_4C1A02  +
mov edx [ebp+s] +
push edx  +
call _strlen  +
pop ecx  +
mov [ebp+var_3C] eax +
mov [ebp+var_40] eax +
mov edx [ebp+s] +
cmp byte ptr [edx] 2Dh +
jnz loc_4C1806  +
dec [ebp+var_3C]  +
jmp loc_4C181A  +
cmp [ebp+var_9] 0 +
jz loc_4C181A  +
inc [ebp+var_40]  +
dec [ebp+s]  +
mov ecx [ebp+s] +
mov al [ebp+var_9] +
mov [ecx] al +
mov edx [ebp+var_8] +
cmp edx [ebp+var_3C] +
jle loc_4C1A70  +
mov ecx [ebp+var_8] +
sub ecx [ebp+var_3C] +
mov [ebp+var_10] ecx +
jmp loc_4C1A70  +
add [ebp+arg_14] 4 +
mov eax [ebp+arg_14] +
lea ecx [ebp-0B8h] +
mov edx [eax-4] +
mov [ebp+s] edx +
push ecx  +
mov eax [ebp+s] +
push eax  +
call sub_4C1344  +
add esp 8 +
mov [ebp+var_B0] 0 +
and edi 0FFFFFFFBh +
lea edx [ebp-0B8h] +
mov [ebp+s] edx +
jmp loc_4C1A02  +
test edi 210h +
jnz loc_4C1877  +
or edi 10h +
test edi 10h +
jz loc_4C18B6  +
add [ebp+arg_14] 4 +
mov ecx [ebp+arg_14] +
lea edx [ebp-0B8h] +
mov ax [ecx-4] +
mov [ebp-0B8h] ax +
mov word ptr [ebp+var_B7+1] 0 +
mov [ebp+var_1C] 1 +
mov [ebp+s] edx +
mov [ebp+var_40] 1 +
jmp loc_4C1A70  +
add [ebp+arg_14] 4 +
mov ecx [ebp+arg_14] +
lea edx [ebp-0B8h] +
mov al [ecx-4] +
xor ecx ecx +
mov [ebp+var_B8] al +
mov byte ptr [ebp+var_B7] 0 +
mov [ebp+s] edx +
mov [ebp+var_1C] ecx +
mov [ebp+var_40] 1 +
jmp loc_4C1A70  +
test edi 210h +
jnz loc_4C18F2  +
or edi 10h +
test edi 10h +
jz loc_4C191D  +
add [ebp+arg_14] 4 +
mov eax [ebp+arg_14] +
mov edx [eax-4] +
mov [ebp+s] edx +
mov [ebp+var_1C] 1 +
cmp [ebp+s] 0 +
jnz loc_4C193C  +
mov [ebp+s] offset aNull_1 +
jmp loc_4C193C  +
add [ebp+arg_14] 4 +
mov ecx [ebp+arg_14] +
xor edx edx +
mov eax [ecx-4] +
mov [ebp+s] eax +
mov [ebp+var_1C] edx +
cmp [ebp+s] 0 +
jnz loc_4C193C  +
mov [ebp+s] offset aNull_2 +
cmp [ebp+var_1C] 0 +
jz loc_4C1976  +
cmp [ebp+var_8] 0 +
jl loc_4C194D  +
mov eax [ebp+var_8] +
jmp loc_4C1952  +
mov eax 7FFFFFFFh +
mov edx [ebp+s] +
xor ecx ecx +
mov [ebp+var_40] ecx +
jmp loc_4C1963  +
dec eax  +
inc [ebp+var_40]  +
add edx 2 +
test eax eax +
jz loc_4C1A70  +
cmp word ptr [edx] 0 +
jnz loc_4C195C  +
jmp loc_4C1A70  +
cmp [ebp+var_8] 0 +
jl loc_4C1981  +
mov eax [ebp+var_8] +
jmp loc_4C1986  +
mov eax 7FFFFFFFh +
mov edx [ebp+s] +
xor ecx ecx +
mov [ebp+var_40] ecx +
jmp loc_4C1995  +
dec eax  +
inc [ebp+var_40]  +
inc edx  +
test eax eax +
jz loc_4C1A70  +
cmp byte ptr [edx] 0 +
jnz loc_4C1990  +
jmp loc_4C1A70  +
test edi 100h +
jz loc_4C19B6  +
mov eax 8 +
jmp loc_4C19BB  +
mov eax 6 +
mov edx edi +
push eax  +
and dl 1 +
lea ecx [ebp+var_B7] +
push edx  +
push ebx  +
mov [ebp+s] ecx +
push ecx  +
cmp [ebp+var_8] 0 +
jge loc_4C19DA  +
mov eax 6 +
jmp loc_4C19DD  +
mov eax [ebp+var_8] +
push eax  +
mov edx [ebp+arg_14] +
push edx  +
call sub_4C2A80  +
add esp 18h +
mov ecx edi +
and ecx 100h +
push ecx  +
mov eax [ebp+arg_14] +
push eax  +
call sub_4C2A86  +
add esp 8 +
mov [ebp+arg_14] eax +
test edi 8 +
jz loc_4C1A39  +
cmp [ebp+var_4] 0 +
jle loc_4C1A39  +
mov edx [ebp+s] +
push edx  +
call _strlen  +
pop ecx  +
mov [ebp+var_40] eax +
mov ecx [ebp+s] +
cmp byte ptr [ecx] 2Dh +
jnz loc_4C1A28  +
dec [ebp+var_40]  +
mov eax [ebp+var_4] +
cmp eax [ebp+var_40] +
jle loc_4C1A39  +
mov edx [ebp+var_4] +
sub edx [ebp+var_40] +
mov [ebp+var_10] edx +
mov ecx [ebp+s] +
cmp byte ptr [ecx] 2Dh +
jz loc_4C1A47  +
cmp [ebp+var_9] 0 +
jz loc_4C1A63  +
mov eax [ebp+s] +
cmp byte ptr [eax] 2Dh +
jz loc_4C1A5A  +
dec [ebp+s]  +
mov edx [ebp+s] +
mov cl [ebp+var_9] +
mov [edx] cl +
cmp [ebp+var_10] 0 +
jle loc_4C1A63  +
dec [ebp+var_10]  +
mov eax [ebp+s] +
push eax  +
call _strlen  +
pop ecx  +
mov [ebp+var_40] eax +
test edi 1 +
jz loc_4C1AA8  +
cmp bl 6Fh +
jnz loc_4C1A8C  +
cmp [ebp+var_10] 0 +
jg loc_4C1AA8  +
mov [ebp+var_10] 1 +
jmp loc_4C1AA8  +
cmp bl 78h +
jz loc_4C1A96  +
cmp bl 58h +
jnz loc_4C1AA8  +
or edi 40h +
sub [ebp+var_4] 2 +
sub [ebp+var_10] 2 +
jns loc_4C1AA8  +
xor edx edx +
mov [ebp+var_10] edx +
mov ecx [ebp+var_10] +
add [ebp+var_40] ecx +
test edi 2 +
jnz loc_4C1ADA  +
mov eax [ebp+var_4] +
cmp eax [ebp+var_40] +
jle loc_4C1ADA  +
lea edx [ebp+var_520] +
push edx  +
push 20h  +
call sub_4C1310  +
add esp 8 +
dec [ebp+var_4]  +
mov ecx [ebp+var_4] +
cmp ecx [ebp+var_40] +
jg loc_4C1ABE  +
test edi 40h +
jz loc_4C1B03  +
lea eax [ebp+var_520] +
push eax  +
push 30h  +
call sub_4C1310  +
add esp 8 +
lea edx [ebp+var_520] +
push edx  +
push ebx  +
call sub_4C1310  +
add esp 8 +
cmp [ebp+var_10] 0 +
jle loc_4C1B69  +
mov ecx [ebp+var_10] +
sub [ebp+var_40] ecx +
mov eax [ebp+var_10] +
sub [ebp+var_4] eax +
mov edx [ebp+s] +
cmp byte ptr [edx] 2Dh +
jz loc_4C1B2D  +
mov ecx [ebp+s] +
cmp byte ptr [ecx] 20h +
jz loc_4C1B2D  +
mov eax [ebp+s] +
cmp byte ptr [eax] 2Bh +
jnz loc_4C1B5E  +
lea edx [ebp+var_520] +
push edx  +
mov ecx [ebp+s] +
inc [ebp+s]  +
mov al [ecx] +
push eax  +
call sub_4C1310  +
add esp 8 +
dec [ebp+var_40]  +
dec [ebp+var_4]  +
jmp loc_4C1B5E  +
lea edx [ebp+var_520] +
push edx  +
push 30h  +
call sub_4C1310  +
add esp 8 +
mov ecx [ebp+var_10] +
add [ebp+var_10] 0FFFFFFFFh +
test ecx ecx +
jnz loc_4C1B4D  +
cmp [ebp+var_1C] 0 +
jz loc_4C1BDF  +
mov eax [ebp+s] +
xor edx edx +
mov [ebp+var_44] eax +
mov [ebp+var_4C] edx +
mov ecx [ebp+var_40] +
mov [ebp+var_54] ecx +
jmp loc_4C1BC5  +
mov eax [ebp+var_44] +
add [ebp+var_44] 2 +
mov dx [eax] +
push edx  +
lea ecx [ebp-56h] +
push ecx  +
call _wctomb  +
add esp 8 +
mov [ebp+var_50] eax +
cmp [ebp+var_50] 0 +
jle loc_4C1BD0  +
xor ecx ecx +
mov eax [ebp+var_4C] +
lea edx [ebp+eax+var_4B8] +
lea eax [ebp-56h] +
cmp ecx [ebp+var_50] +
jge loc_4C1BC5  +
mov bl [eax] +
inc eax  +
mov [edx] bl +
inc edx  +
inc [ebp+var_4C]  +
inc ecx  +
cmp ecx [ebp+var_50] +
jl loc_4C1BB6  +
mov eax [ebp+var_54] +
add [ebp+var_54] 0FFFFFFFFh +
test eax eax +
jg loc_4C1B82  +
lea edx [ebp+var_4B8] +
mov [ebp+s] edx +
mov ecx [ebp+var_4C] +
mov [ebp+var_40] ecx +
cmp [ebp+var_40] 0 +
jz loc_4C1C23  +
mov eax [ebp+var_40] +
sub [ebp+var_4] eax +
jmp loc_4C1C05  +
lea edx [ebp+var_520] +
push edx  +
mov ecx [ebp+s] +
inc [ebp+s]  +
mov al [ecx] +
push eax  +
call sub_4C1310  +
add esp 8 +
mov edx [ebp+var_40] +
add [ebp+var_40] 0FFFFFFFFh +
test edx edx +
jnz loc_4C1BED  +
jmp loc_4C1C23  +
lea ecx [ebp+var_520] +
push ecx  +
push 20h  +
call sub_4C1310  +
add esp 8 +
mov eax [ebp+var_4] +
add [ebp+var_4] 0FFFFFFFFh +
test eax eax +
jg loc_4C1C12  +
jmp loc_4C13C0  +
add [ebp+arg_14] 4 +
mov edx [ebp+arg_14] +
test edi 10h +
mov ecx [edx-4] +
mov [ebp+s] ecx +
jz loc_4C1C58  +
mov eax [ebp+s] +
mov edx [ebp+var_4C4] +
mov [eax] edx +
jmp loc_4C13C0  +
test edi 200h +
jz loc_4C1C72  +
mov ecx [ebp+s] +
mov ax word ptr [ebp+var_4C4] +
mov [ecx] ax +
jmp loc_4C13C0  +
mov edx [ebp+s] +
mov ecx [ebp+var_4C4] +
mov [edx] ecx +
jmp loc_4C13C0  +
lea edx [ebp+var_520] +
push edx  +
push eax  +
call sub_4C1310  +
add esp 8 +
mov eax [ebp+var_14] +
inc [ebp+var_14]  +
mov al [eax] +
test al al +
jnz loc_4C1C82  +
lea ecx [ebp+var_520] +
push ecx  +
call sub_4C12C8  +
cmp [ebp+var_4C0] 0 +
pop ecx  +
jz loc_4C1CB9  +
or eax 0FFFFFFFFh +
jmp loc_4C1CBF  +
mov eax [ebp+var_4C4] +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
call __lock_all_streams  +
call __lock_all_streams  +
xor esi esi +
mov ebx offset stru_4E7814 +
jmp loc_4C1D21  +
test byte ptr [ebx+12h] 3 +
jz loc_4C1D1D  +
push ebx  +
call _fflush  +
pop ecx  +
inc esi  +
add ebx 18h +
cmp esi uNumber +
jb loc_4C1D10  +
call __unlock_all_streams  +
pop esi  +
pop ebx  +
retn   +
***
push ebx  +
push esi  +
mov ebx [ebp+arg_0] +
push ebx  +
call __lock_stream  +
pop ecx  +
push ebx  +
call unknown_libname_17  +
pop ecx  +
mov esi eax +
push ebx  +
call __unlock_stream  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
mov eax off_4E88D0 +
mov edx [ebp+arg_0] +
cmp edx 10h +
jg loc_4C1D78  +
jz loc_4C1D91  +
sub edx 0Eh +
jz loc_4C1D82  +
dec edx  +
jz loc_4C1D8A  +
jmp loc_4C1DA9  +
sub edx 50h +
jz loc_4C1D99  +
dec edx  +
jz loc_4C1DA1  +
jmp loc_4C1DA9  +
mov ecx [eax+18h] +
mov eax [ecx+4] +
pop ebp  +
retn   +
mov eax [eax+18h] +
mov eax [eax] +
pop ebp  +
retn   +
mov edx [eax+18h] +
mov eax [edx+8] +
pop ebp  +
retn   +
mov ecx [eax+18h] +
mov eax [ecx+0Ch] +
pop ebp  +
retn   +
mov eax [eax+18h] +
mov eax [eax+10h] +
pop ebp  +
retn   +
xor eax eax +
pop ebp  +
retn   +
***
push 104h  +
mov eax [ebp+c] +
push eax  +
call ___isctype  +
add esp 8 +
pop ebp  +
retn   +
***
cmp [ebp+c] 80h +
setb al  +
and eax 1 +
pop ebp  +
retn   +
***
push 100h  +
mov eax [ebp+c] +
push eax  +
call ___isctype  +
add esp 8 +
pop ebp  +
retn   +
***
push 20h  +
mov eax [ebp+c] +
push eax  +
call ___isctype  +
add esp 8 +
pop ebp  +
retn   +
***
push 4  +
mov eax [ebp+c] +
push eax  +
call ___isctype  +
add esp 8 +
pop ebp  +
retn   +
***
push 194h  +
mov eax [ebp+c] +
push eax  +
call ___isctype  +
add esp 8 +
pop ebp  +
retn   +
***
push 2  +
mov eax [ebp+c] +
push eax  +
call ___isctype  +
add esp 8 +
pop ebp  +
retn   +
***
push 1D4h  +
mov eax [ebp+c] +
push eax  +
call ___isctype  +
add esp 8 +
pop ebp  +
retn   +
***
push 10h  +
mov eax [ebp+c] +
push eax  +
call ___isctype  +
add esp 8 +
pop ebp  +
retn   +
***
push 8  +
mov eax [ebp+c] +
push eax  +
call ___isctype  +
add esp 8 +
pop ebp  +
retn   +
***
push 1  +
mov eax [ebp+c] +
push eax  +
call ___isctype  +
add esp 8 +
pop ebp  +
retn   +
***
push 80h  +
mov eax [ebp+c] +
push eax  +
call ___isctype  +
add esp 8 +
pop ebp  +
retn   +
***
push 104h  +
movzx eax [ebp+c] +
push eax  +
call ___iswctype  +
add esp 8 +
pop ebp  +
retn   +
***
movzx eax [ebp+c] +
push 100h  +
movzx eax [ebp+c] +
push eax  +
call ___iswctype  +
add esp 8 +
pop ebp  +
retn   +
***
push 20h  +
push 4  +
push 194h  +
movzx eax [ebp+c] +
push eax  +
call ___iswctype  +
add esp 8 +
pop ebp  +
retn   +
***
push 2  +
push 1D4h  +
movzx eax [ebp+c] +
push eax  +
call ___iswctype  +
add esp 8 +
pop ebp  +
retn   +
***
push 10h  +
push 8  +
push 1  +
push 80h  +
movzx eax [ebp+c] +
push eax  +
call ___iswctype  +
add esp 8 +
pop ebp  +
retn   +
***
mov ecx [ebp+arg_4] +
mov edx [ebp+arg_0] +
cmp edx 0FFh +
jbe loc_4C1FCD  +
xor eax eax +
pop ebp  +
retn   +
mov eax off_4E88D0 +
cmp dword ptr [eax+8] 0 +
jnz loc_4C1FDE  +
cmp dword ptr [eax+10h] 0 +
jnz loc_4C1FED  +
movsx edx dx +
movzx eax word_4E8492[edx*2] +
and eax ecx +
pop ebp  +
retn   +
mov eax [eax+10h] +
movzx edx word ptr [eax+edx*2+2] +
and ecx edx +
mov eax ecx +
pop ebp  +
retn   +
***
push ecx  +
push ebx  +
cmp dword ptr [ebp+SrcStr] 0FFFFh +
mov ebx [ebp+arg_4] +
jnz loc_4C2011  +
xor eax eax +
jmp loc_4C204D  +
mov edx off_4E88D0 +
cmp dword ptr [edx+8] 0 +
jz loc_4C2036  +
cmp dword ptr [ebp+SrcStr] 100h +
jge loc_4C2036  +
movsx ecx [ebp+SrcStr] +
movzx eax word_4E8492[ecx*2] +
and eax ebx +
jmp loc_4C204D  +
lea edx [ebp-2] +
lea ecx [ebp+SrcStr] +
push edx  +
push 1  +
push ecx  +
push 1  +
call GetStringTypeW  +
movzx eax [ebp+var_2] +
and eax ebx +
pop ebx  +
pop ecx  +
pop ebp  +
retn   +
***
xor edx edx +
mov edx [ebp+n] +
mov eax [ebp+s] +
test eax eax +
jz loc_4C20BE  +
cmp byte ptr [eax] 0 +
jz loc_4C20BE  +
test edx edx +
jnz loc_4C20C2  +
xor eax eax +
pop ebp  +
retn   +
xor ecx ecx +
mov cl [eax] +
test byte ptr dword_4F2A4D[ecx] 4 +
jz loc_4C20FB  +
cmp edx 2 +
jl loc_4C20EF  +
push 0  +
push 0  +
mov edx off_4E88D0 +
push 2  +
push eax  +
push 9  +
mov eax [edx] +
push eax  +
call MultiByteToWideChar  +
test eax eax +
jnz loc_4C20F4  +
or eax 0FFFFFFFFh +
pop ebp  +
retn   +
mov eax 2 +
pop ebp  +
retn   +
push 0  +
push 0  +
mov edx off_4E88D0 +
push 1  +
push eax  +
push 9  +
mov ecx [edx] +
push ecx  +
call MultiByteToWideChar  +
test eax eax +
jnz loc_4C211B  +
or eax 0FFFFFFFFh +
pop ebp  +
retn   +
mov eax 1 +
pop ebp  +
retn   +
***
push ebx  +
push esi  +
mov esi [ebp+n] +
mov ebx [ebp+lpMultiByteStr] +
mov eax [ebp+pwc] +
test ebx ebx +
jz loc_4C213A  +
test esi esi +
jnz loc_4C2141  +
xor eax eax +
jmp loc_4C21F1  +
cmp byte ptr [ebx] 0 +
jnz loc_4C2156  +
test eax eax +
jz loc_4C214F  +
mov word ptr [eax] 0 +
xor eax eax +
jmp loc_4C21F1  +
mov edx off_4E88D0 +
cmp dword ptr [edx+8] 0 +
jz loc_4C2174  +
test eax eax +
jz loc_4C216D  +
xor ecx ecx +
mov cl [ebx] +
mov [eax] cx +
mov eax 1 +
jmp loc_4C21F1  +
xor edx edx +
mov dl [ebx] +
test byte ptr dword_4F2A4D[edx] 4 +
jz loc_4C21C2  +
cmp esi 2 +
jl loc_4C21AB  +
test eax eax +
jz loc_4C2191  +
mov ecx 1 +
jmp loc_4C2193  +
xor ecx ecx +
push ecx  +
push eax  +
mov eax off_4E88D0 +
push 2  +
push ebx  +
push 9  +
mov edx [eax] +
push edx  +
call MultiByteToWideChar  +
test eax eax +
jnz loc_4C21BB  +
cmp esi 2 +
jl loc_4C21B6  +
cmp byte ptr [ebx+1] 0 +
jnz loc_4C21BB  +
or eax 0FFFFFFFFh +
jmp loc_4C21F1  +
mov eax 2 +
jmp loc_4C21F1  +
test eax eax +
jz loc_4C21CD  +
mov edx 1 +
jmp loc_4C21CF  +
xor edx edx +
push edx  +
push eax  +
mov eax off_4E88D0 +
push 1  +
push ebx  +
push 9  +
mov ecx [eax] +
push ecx  +
call MultiByteToWideChar  +
test eax eax +
jnz loc_4C21EC  +
or eax 0FFFFFFFFh +
jmp loc_4C21F1  +
mov eax 1 +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
push ecx  +
mov eax [ebp+s] +
test eax eax +
jnz loc_4C2208  +
xor eax eax +
pop ecx  +
pop ebp  +
retn   +
mov edx off_4E88D0 +
cmp dword ptr [edx+8] 0 +
jz loc_4C222F  +
cmp [ebp+wc] 0FFh +
jbe loc_4C2222  +
or eax 0FFFFFFFFh +
pop ecx  +
pop ebp  +
retn   +
mov dl byte ptr [ebp+wc] +
mov [eax] dl +
mov eax 1 +
pop ecx  +
pop ebp  +
retn   +
xor edx edx +
lea ecx [ebp+UsedDefaultChar] +
mov [ebp+UsedDefaultChar] edx +
push ecx  +
push 0  +
push 2  +
push eax  +
lea eax [ebp+wc] +
mov edx off_4E88D0 +
push 1  +
push eax  +
push 220h  +
mov ecx [edx] +
push ecx  +
call WideCharToMultiByte  +
test eax eax +
jz loc_4C2260  +
cmp [ebp+UsedDefaultChar] 0 +
jz loc_4C2266  +
or eax 0FFFFFFFFh +
pop ecx  +
pop ebp  +
retn   +
pop ecx  +
pop ebp  +
retn   +
***
push ecx  +
push ebx  +
push esi  +
push edi  +
mov esi [ebp+lpMultiByteStr] +
mov edi [ebp+pwcs] +
xor ebx ebx +
test edi edi +
jz loc_4C228C  +
cmp [ebp+cchWideChar] 0 +
jnz loc_4C228C  +
xor eax eax +
jmp loc_4C238F  +
test edi edi +
jz loc_4C2355  +
mov edx off_4E88D0 +
cmp dword ptr [edx+8] 0 +
jz loc_4C22CA  +
cmp ebx [ebp+cchWideChar] +
jnb loc_4C22C3  +
xor ecx ecx +
mov cl [esi+ebx] +
mov [edi] cx +
cmp byte ptr [esi+ebx] 0 +
jnz loc_4C22BA  +
mov eax ebx +
jmp loc_4C238F  +
inc ebx  +
add edi 2 +
cmp ebx [ebp+cchWideChar] +
jb loc_4C22A5  +
mov eax ebx +
jmp loc_4C238F  +
mov edx [ebp+cchWideChar] +
mov ecx off_4E88D0 +
push edx  +
push edi  +
push 0FFFFFFFFh  +
push esi  +
push 9  +
mov eax [ecx] +
push eax  +
call MultiByteToWideChar  +
mov ebx eax +
test eax eax +
jz loc_4C22F0  +
mov eax ebx +
dec eax  +
jmp loc_4C238F  +
call GetLastError  +
cmp eax 7Ah +
jz loc_4C2302  +
or eax 0FFFFFFFFh +
jmp loc_4C238F  +
mov edx [ebp+cchWideChar] +
mov eax esi +
jmp loc_4C2318  +
xor ecx ecx +
mov cl [eax] +
test byte ptr dword_4F2A4D[ecx] 4 +
jz loc_4C2317  +
inc eax  +
inc eax  +
mov ecx edx +
add edx 0FFFFFFFFh +
test ecx ecx +
jz loc_4C2326  +
cmp byte ptr [eax] 0 +
jnz loc_4C2309  +
sub eax esi +
mov [ebp+cbMultiByte] eax +
mov eax [ebp+cchWideChar] +
push eax  +
push edi  +
mov edx [ebp+cbMultiByte] +
mov eax off_4E88D0 +
push edx  +
push esi  +
push 1  +
mov edx [eax] +
push edx  +
call MultiByteToWideChar  +
mov ebx eax +
test eax eax +
jnz loc_4C234F  +
or eax 0FFFFFFFFh +
jmp loc_4C238F  +
mov eax ebx +
jmp loc_4C238F  +
jmp loc_4C238F  +
mov edx off_4E88D0 +
cmp dword ptr [edx+8] 0 +
jz loc_4C236A  +
push esi  +
call _strlen  +
pop ecx  +
jmp loc_4C238F  +
push 0  +
push 0  +
mov ecx off_4E88D0 +
push 0FFFFFFFFh  +
push esi  +
push 9  +
mov eax [ecx] +
push eax  +
call MultiByteToWideChar  +
mov ebx eax +
test eax eax +
jnz loc_4C238C  +
or eax 0FFFFFFFFh +
jmp loc_4C238F  +
mov eax ebx +
dec eax  +
pop edi  +
pop esi  +
pop ebx  +
pop ecx  +
pop ebp  +
retn   +
***
push ebp  +
mov ebp esp +
push ebx  +
mov ecx [ebp+0Ch] +
mov ebx [ebp+8] +
lea edx [ecx+1] +
mov eax ebx +
jmp loc_4C23AC  +
add eax 2 +
dec edx  +
jz loc_4C23B5  +
cmp word ptr [eax] 0 +
jnz loc_4C23A9  +
test edx edx +
jz loc_4C23CC  +
cmp word ptr [eax] 0 +
jnz loc_4C23CC  +
sub eax ebx +
sar eax 1 +
jns loc_4C23C8  +
adc eax 0 +
inc eax  +
pop ebx  +
pop ebp  +
retn   +
***
mov eax ecx +
pop ebx  +
pop ebp  +
retn   +
***
add esp 0FFFFFFF4h +
xor eax eax +
push ebx  +
push esi  +
mov [ebp+UsedDefaultChar] eax +
xor ebx ebx +
cmp [ebp+lpMultiByteStr] 0 +
jz loc_4C23F6  +
cmp [ebp+cbMultiByte] 0 +
jnz loc_4C23F6  +
xor eax eax +
jmp loc_4C2572  +
cmp [ebp+lpMultiByteStr] 0 +
jz loc_4C2523  +
mov edx off_4E88D0 +
cmp dword ptr [edx+8] 0 +
jz loc_4C244F  +
cmp ebx [ebp+cbMultiByte] +
jnb loc_4C2448  +
mov ecx [ebp+lpWideCharStr] +
cmp word ptr [ecx] 0FFh +
jbe loc_4C2423  +
or eax 0FFFFFFFFh +
jmp loc_4C2572  +
mov edx [ebp+lpWideCharStr] +
mov eax [ebp+lpMultiByteStr] +
mov cl [edx] +
mov [eax+ebx] cl +
mov edx [ebp+lpWideCharStr] +
add [ebp+lpWideCharStr] 2 +
cmp word ptr [edx] 0 +
jnz loc_4C2442  +
mov eax ebx +
jmp loc_4C2572  +
inc ebx  +
cmp ebx [ebp+cbMultiByte] +
jb loc_4C2411  +
mov eax ebx +
jmp loc_4C2572  +
lea edx [ebp+UsedDefaultChar] +
push edx  +
push 0  +
mov ecx [ebp+cbMultiByte] +
push ecx  +
mov ecx off_4E88D0 +
mov eax [ebp+lpMultiByteStr] +
push eax  +
push 0FFFFFFFFh  +
mov edx [ebp+lpWideCharStr] +
push edx  +
push 220h  +
mov eax [ecx] +
push eax  +
call WideCharToMultiByte  +
mov ebx eax +
test ebx ebx +
jz loc_4C248A  +
cmp [ebp+UsedDefaultChar] 0 +
jnz loc_4C248A  +
mov eax ebx +
dec eax  +
jmp loc_4C2572  +
cmp [ebp+UsedDefaultChar] 0 +
jnz loc_4C249A  +
call GetLastError  +
cmp eax 7Ah +
jz loc_4C24A2  +
or eax 0FFFFFFFFh +
jmp loc_4C2572  +
cmp ebx [ebp+cbMultiByte] +
jnb loc_4C251F  +
lea edx [ebp+UsedDefaultChar] +
lea ecx [ebp+MultiByteStr] +
push edx  +
push 0  +
push 2  +
push ecx  +
push 1  +
mov edx off_4E88D0 +
mov eax [ebp+lpWideCharStr] +
push eax  +
push 0  +
mov ecx [edx] +
push ecx  +
call WideCharToMultiByte  +
mov [ebp-4] eax +
cmp dword ptr [ebp-4] 0 +
jz loc_4C24D8  +
cmp [ebp+UsedDefaultChar] 0 +
jz loc_4C24E0  +
or eax 0FFFFFFFFh +
jmp loc_4C2572  +
mov edx [ebp-4] +
add edx ebx +
cmp edx [ebp+cbMultiByte] +
jbe loc_4C24F1  +
mov eax ebx +
jmp loc_4C2572  +
xor esi esi +
mov eax [ebp+lpMultiByteStr] +
lea edx [eax+ebx] +
lea eax [ebp+MultiByteStr] +
cmp esi [ebp-4] +
jge loc_4C2516  +
mov cl [eax] +
mov [edx] cl +
test cl cl +
jnz loc_4C250D  +
mov eax ebx +
jmp loc_4C2572  +
inc eax  +
inc esi  +
inc edx  +
inc ebx  +
cmp esi [ebp-4] +
jl loc_4C2501  +
add [ebp+lpWideCharStr] 2 +
cmp ebx [ebp+cbMultiByte] +
jb loc_4C24A7  +
mov eax ebx +
jmp loc_4C2572  +
mov edx off_4E88D0 +
cmp dword ptr [edx+8] 0 +
jz loc_4C253B  +
mov ecx [ebp+lpWideCharStr] +
push ecx  +
call _wcslen  +
pop ecx  +
jmp loc_4C2572  +
lea eax [ebp+UsedDefaultChar] +
mov ecx off_4E88D0 +
push eax  +
push 0  +
push 0  +
push 0  +
push 0FFFFFFFFh  +
mov edx [ebp+lpWideCharStr] +
push edx  +
push 220h  +
mov eax [ecx] +
push eax  +
call WideCharToMultiByte  +
mov ebx eax +
test ebx ebx +
jz loc_4C256A  +
cmp [ebp+UsedDefaultChar] 0 +
jz loc_4C256F  +
or eax 0FFFFFFFFh +
jmp loc_4C2572  +
mov eax ebx +
dec eax  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
push edx  +
push eax  +
mov eax [esp+10h] +
mul  dword ptr [esp] +
mov ecx eax +
mov eax [esp+4] +
mul  dword ptr [esp+0Ch] +
add ecx eax +
mov eax [esp] +
mul  dword ptr [esp+0Ch] +
add edx ecx +
pop ecx  +
pop ecx  +
retn 8  +
***
or edx edx +
jns loc_4C25C3  +
neg edx  +
neg eax  +
sbb edx 0 +
or edi 1 +
or ecx ecx +
jns loc_4C25D1  +
neg ecx  +
neg ebx  +
sbb ecx 0 +
xor edi 1 +
mov ebp ecx +
mov ecx 40h +
push edi  +
xor edi edi +
xor esi esi +
shl eax 1 +
rcl edx 1 +
rcl esi 1 +
rcl edi 1 +
cmp edi ebp +
jb loc_4C25F4  +
ja loc_4C25EF  +
cmp esi ebx +
jb loc_4C25F4  +
sub esi ebx +
sbb edi ebp +
inc eax  +
loop loc_4C25DD  +
pop ebx  +
test ebx 1 +
jz loc_4C2606  +
neg edx  +
neg eax  +
sbb edx 0 +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
push esi  +
push edi  +
mov ebx [esp+arg_0] +
mov ecx [esp+arg_4] +
or ecx ecx +
jnz loc_4C262B  +
or edx edx +
jz loc_4C2656  +
or ebx ebx +
jz loc_4C2656  +
mov ebp ecx +
mov ecx 40h +
xor edi edi +
xor esi esi +
shl eax 1 +
rcl edx 1 +
rcl esi 1 +
rcl edi 1 +
cmp edi ebp +
jb loc_4C264D  +
ja loc_4C2648  +
cmp esi ebx +
jb loc_4C264D  +
sub esi ebx +
sbb edi ebp +
inc eax  +
loop loc_4C2636  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
div  ebx +
xor edx edx +
jmp loc_4C264F  +
***
or edx edx +
jns loc_4C2684  +
neg edx  +
neg eax  +
sbb edx 0 +
or edi 1 +
or ecx ecx +
jns loc_4C268F  +
neg ecx  +
neg ebx  +
sbb ecx 0 +
mov ebp ecx +
mov ecx 40h +
push edi  +
xor edi edi +
xor esi esi +
shl eax 1 +
rcl edx 1 +
rcl esi 1 +
rcl edi 1 +
cmp edi ebp +
jb loc_4C26B2  +
ja loc_4C26AD  +
cmp esi ebx +
jb loc_4C26B2  +
sub esi ebx +
sbb edi ebp +
inc eax  +
loop loc_4C269B  +
mov eax esi +
mov edx edi +
pop ebx  +
test ebx 1 +
jz loc_4C26C8  +
neg edx  +
neg eax  +
sbb edx 0 +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
push esi  +
push edi  +
mov ebx [esp+arg_0] +
mov ecx [esp+arg_4] +
or ecx ecx +
jnz loc_4C26EE  +
or edx edx +
jz loc_4C271D  +
or ebx ebx +
jz loc_4C271D  +
mov ebp ecx +
mov ecx 40h +
xor edi edi +
xor esi esi +
shl eax 1 +
rcl edx 1 +
rcl esi 1 +
rcl edi 1 +
cmp edi ebp +
jb loc_4C2710  +
ja loc_4C270B  +
cmp esi ebx +
jb loc_4C2710  +
sub esi ebx +
sbb edi ebp +
inc eax  +
loop loc_4C26F9  +
mov eax esi +
mov edx edi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
div  ebx +
xchg eax edx +
xor edx edx +
jmp loc_4C2716  +
***
cmp cl 20h +
jl loc_4C273A  +
cmp cl 40h +
jl loc_4C2733  +
xor edx edx +
xor eax eax +
retn   +
***
mov edx eax +
shl edx cl +
xor eax eax +
retn   +
***
shld edx eax +
shl eax cl +
retn   +
***
cmp cl 20h +
jl loc_4C2756  +
cmp cl 40h +
jl loc_4C2750  +
sar edx 1Fh +
mov eax edx +
retn   +
***
mov eax edx +
cdq   +
sar eax cl +
retn   +
***
shrd eax edx +
sar edx cl +
retn   +
***
cmp cl 40h +
jl loc_4C276B  +
xor edx edx +
xor eax eax +
retn   +
***
mov eax edx +
xor edx edx +
shr eax cl +
retn   +
***
add esp 0FFFFFF90h +
push ebx  +
push esi  +
mov edx [ebp+arg_C] +
mov eax [ebp+arg_8] +
mov esi [ebp+arg_4] +
mov ebx [ebp+arg_0] +
mov [ebp+e.type] ebx +
mov [ebp+e.name] esi +
test eax eax +
jnz loc_4C279E  +
fld  ds:dbl_4C2820 +
jmp loc_4C27A0  +
fld  qword ptr [eax] +
fstp  [ebp+e.arg1] +
wait   +
test edx edx +
jnz loc_4C27B0  +
fld  ds:dbl_4C2820 +
jmp loc_4C27B2  +
fld  qword ptr [edx] +
fstp  [ebp+e.arg2] +
wait   +
mov eax [ebp+arg_10] +
lea edx [ebp+e] +
mov dword ptr [ebp+e.retval] eax +
mov eax [ebp+arg_14] +
mov dword ptr [ebp+e.retval+4] eax +
push edx  +
call off_4E8C1C  +
pop ecx  +
test eax eax +
jnz loc_4C2817  +
mov ecx off_4E8C20[ebx*4] +
push ecx  +
push esi  +
push offset aSSError  +
lea eax [ebp+var_70] +
push eax  +
call wsprintfA  +
add esp 10h +
add ebx 0FFFFFFFEh +
sub ebx 3 +
jb loc_4C27F5  +
jmp loc_4C2802  +
call ___errno  +
mov dword ptr [eax] 22h +
jmp loc_4C280D  +
call ___errno  +
mov dword ptr [eax] 21h +
lea edx [ebp+var_70] +
push edx  +
call __ErrorMessage  +
pop ecx  +
fld  [ebp+e.retval] +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
add esp 0FFFFFFF4h +
push ebx  +
mov edx [ebp+arg_0] +
cmp edx 0FFFFECBCh +
jge loc_4C2845  +
fld  ds:tbyte_4C2994 +
jmp loc_4C298F  +
cmp edx 1344h +
jle loc_4C2859  +
mov eax offset unk_4E8ABA +
fld  tbyte ptr [eax] +
jmp loc_4C298F  +
test edx edx +
jnz loc_4C2868  +
fld  ds:tbyte_4C29A0 +
jmp loc_4C298F  +
mov eax edx +
test edx edx +
jge loc_4C2872  +
mov eax edx +
neg eax  +
mov ecx eax +
and ecx 7 +
sar eax 3 +
test al 1 +
lea ecx [ecx+ecx*4] +
mov ebx dword_4E8A04[ecx*2] +
mov dword ptr [ebp+var_C] ebx +
mov ebx dword_4E8A08[ecx*2] +
mov dword ptr [ebp+var_C+4] ebx +
mov bx word_4E8A0C[ecx*2] +
mov word ptr [ebp+var_C+8] bx +
jz loc_4C28B0  +
fld  tbyte_4E8A54 +
fld  [ebp+var_C] +
fmulp st(1) st +
fstp  [ebp+var_C] +
wait   +
sar eax 1 +
test eax eax +
jz loc_4C297D  +
test al 1 +
jz loc_4C28CD  +
fld  tbyte_4E8A60 +
fld  [ebp+var_C] +
fmulp st(1) st +
fstp  [ebp+var_C] +
wait   +
sar eax 1 +
test al 1 +
jz loc_4C28E3  +
mov ecx offset unk_4E8A6A +
fld  tbyte ptr [ecx] +
fld  [ebp+var_C] +
fmulp st(1) st +
fstp  [ebp+var_C] +
wait   +
sar eax 1 +
test al 1 +
jz loc_4C28F9  +
mov ecx offset unk_4E8A74 +
fld  tbyte ptr [ecx] +
fld  [ebp+var_C] +
fmulp st(1) st +
fstp  [ebp+var_C] +
wait   +
sar eax 1 +
test al 1 +
jz loc_4C290F  +
mov ecx offset unk_4E8A7E +
fld  tbyte ptr [ecx] +
fld  [ebp+var_C] +
fmulp st(1) st +
fstp  [ebp+var_C] +
wait   +
sar eax 1 +
test al 1 +
jz loc_4C2925  +
mov ecx offset unk_4E8A88 +
fld  tbyte ptr [ecx] +
fld  [ebp+var_C] +
fmulp st(1) st +
fstp  [ebp+var_C] +
wait   +
sar eax 1 +
test al 1 +
jz loc_4C293B  +
mov ecx offset unk_4E8A92 +
fld  tbyte ptr [ecx] +
fld  [ebp+var_C] +
fmulp st(1) st +
fstp  [ebp+var_C] +
wait   +
sar eax 1 +
test al 1 +
jz loc_4C2951  +
mov ecx offset unk_4E8A9C +
fld  tbyte ptr [ecx] +
fld  [ebp+var_C] +
fmulp st(1) st +
fstp  [ebp+var_C] +
wait   +
sar eax 1 +
test al 1 +
jz loc_4C2967  +
mov ecx offset unk_4E8AA6 +
fld  tbyte ptr [ecx] +
fld  [ebp+var_C] +
fmulp st(1) st +
fstp  [ebp+var_C] +
wait   +
sar eax 1 +
test al 1 +
jz loc_4C297D  +
mov eax offset unk_4E8AB0 +
fld  tbyte ptr [eax] +
fld  [ebp+var_C] +
fmulp st(1) st +
fstp  [ebp+var_C] +
wait   +
test edx edx +
jge loc_4C298C  +
fld  [ebp+var_C] +
fdivr  ds:flt_4C29AC +
jmp loc_4C298F  +
fld  [ebp+var_C] +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
push 0  +
mov eax [ebp+s] +
push eax  +
call _strtod  +
add esp 8 +
pop ebp  +
retn   +
***
push ebx  +
push esi  +
push edi  +
xor edi edi +
mov esi [ebp+s] +
mov bl [esi] +
inc esi  +
movsx eax bl +
push eax  +
call __ismbcspace  +
pop ecx  +
test eax eax +
jnz loc_4C29CF  +
cmp bl 2Bh +
jz loc_4C29EA  +
cmp bl 2Dh +
jnz loc_4C29F8  +
cmp bl 2Dh +
setz al  +
and eax 1 +
mov bl [esi] +
inc esi  +
jmp loc_4C2A10  +
xor eax eax +
jmp loc_4C2A10  +
movsx ecx bl +
mov edx edi +
mov bl [esi] +
add edx edx +
lea edx [edx+edx*4] +
add edx ecx +
sub edx 30h +
inc esi  +
mov edi edx +
cmp bl 30h +
jl loc_4C2A1A  +
cmp bl 39h +
jle loc_4C29FC  +
test eax eax +
jz loc_4C2A24  +
mov eax edi +
neg eax  +
jmp loc_4C2A26  +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
mov eax [ebp+s] +
push eax  +
call _atol  +
pop ecx  +
pop ebp  +
retn   +
***
lea esp [ebp-2] +
fnstsw  [ebp+var_2] +
fnclex   +
movzx eax [ebp+var_2] +
mov esp ebp +
pop ebp  +
retn   +
***
lea esp [ebp-4] +
fstcw  word ptr [ebp+var_4] +
mov eax [ebp+newcw] +
mov ecx [ebp+mask] +
jecxz loc_4C2A67  +
mov newcw eax +
and eax ecx +
not ecx  +
wait   +
movzx edx word ptr [ebp+var_4] +
and edx ecx +
or eax edx +
mov word ptr [ebp+var_4] ax +
fldcw  word ptr [ebp+var_4] +
mov esp ebp +
pop ebp  +
retn   +
***
jmp off_4E8ACC  +
pop ecx  +
pop ecx  +
fninit   +
push 1FFFh  +
push newcw  +
call __control87  +
add esp 8 +
retn   +
***
lea esp [ebp-0Ch] +
fstcw  word ptr [ebp+var_4] +
wait   +
mov al byte ptr [ebp+var_4+1] +
or [ebp+var_4] 0C01h +
fldcw  word ptr [ebp+var_4] +
fistp  [ebp+var_C] +
mov byte ptr [ebp+var_4+1] al +
fldcw  word ptr [ebp+var_4] +
mov eax dword ptr [ebp+var_C] +
mov edx dword ptr [ebp+var_C+4] +
mov esp ebp +
pop ebp  +
retn   +
***
lea esp [ebp-0Ah] +
mov eax [ebp+arg_0] +
test byte ptr [eax+7] 80h +
jnz loc_4C2B21  +
fild  qword ptr [eax] +
mov esp ebp +
pop ebp  +
retn   +
mov ecx [eax] +
mov [ebp+var_A] ecx +
mov ecx [eax+4] +
mov [ebp-6] ecx +
mov [ebp+var_2] 403Eh +
fld  tbyte ptr [ebp+var_A] +
mov esp ebp +
pop ebp  +
retn   +
***
mov eax [esp+arg_0] +
mov edx [esp+arg_4] +
cmp word ptr [edx+8] 403Eh +
jz loc_4C2B52  +
fld  tbyte ptr [edx] +
fistp  qword ptr [eax] +
wait   +
retn   +
mov ecx [edx] +
mov [eax] ecx +
mov ecx [edx+4] +
mov [eax+4] ecx +
retn   +
***
mov eax [esp+arg_0] +
fld  tbyte ptr [eax] +
fxam   +
xor eax eax +
fstsw  ax +
fstp  st +
wait   +
retn   +
***
add esp 0FFFFFFBCh +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_C] +
mov esi [ebp+arg_8] +
cmp edi 2 +
jl loc_4C2C18  +
cmp edi 24h +
jg loc_4C2C18  +
cmp [ebp+arg_4] 0 +
jnz loc_4C2BA3  +
cmp [ebp+arg_0] 0 +
jnb loc_4C2BC2  +
jmp loc_4C2BA5  +
jge loc_4C2BC2  +
cmp [ebp+arg_10] 0 +
jz loc_4C2BC2  +
mov byte ptr [esi] 2Dh +
inc esi  +
mov eax [ebp+arg_0] +
mov edx [ebp+arg_4] +
neg eax  +
adc edx 0 +
mov [ebp+arg_0] eax +
neg edx  +
mov [ebp+arg_4] edx +
lea ebx [ebp+var_44] +
mov eax edi +
cdq   +
push edx  +
push eax  +
mov eax [ebp+arg_0] +
mov edx [ebp+arg_4] +
call __llumod  +
mov [ebx] al +
mov eax edi +
cdq   +
push edx  +
push eax  +
mov eax [ebp+arg_0] +
mov edx [ebp+arg_4] +
inc ebx  +
call __lludiv  +
mov [ebp+arg_0] eax +
mov [ebp+arg_4] edx +
cmp edx 0 +
jnz loc_4C2BC5  +
cmp eax 0 +
jnz loc_4C2BC5  +
jmp loc_4C2C11  +
dec ebx  +
mov al [ebx] +
cmp al 0Ah +
jge loc_4C2C09  +
add eax 30h +
mov [esi] al +
inc esi  +
jmp loc_4C2C11  +
add al [ebp+arg_14] +
add al 0F6h +
mov [esi] al +
inc esi  +
lea edx [ebp+var_44] +
cmp ebx edx +
jnz loc_4C2BFA  +
mov byte ptr [esi] 0 +
mov eax [ebp+arg_8] +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
add esp 0FFFFFFD4h +
add esp 0FFFFFFDCh +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_8] +
mov esi [ebp+arg_0] +
mov ebx [ebp+arg_4] +
cmp edi 2 +
jl loc_4C2DA4  +
cmp edi 24h +
jg loc_4C2DA4  +
test esi esi +
jge loc_4C2D6C  +
cmp [ebp+arg_C] 0 +
jz loc_4C2D6C  +
mov byte ptr [ebx] 2Dh +
inc ebx  +
neg esi  +
lea ecx [ebp+var_24] +
mov eax esi +
xor edx edx +
div  edi +
mov [ecx] dl +
inc ecx  +
mov eax esi +
xor edx edx +
div  edi +
mov esi eax +
test eax eax +
jnz loc_4C2D6F  +
jmp loc_4C2D9D  +
dec ecx  +
mov al [ecx] +
cmp al 0Ah +
jge loc_4C2D95  +
add eax 30h +
mov [ebx] al +
inc ebx  +
jmp loc_4C2D9D  +
add al [ebp+arg_10] +
add al 0F6h +
mov [ebx] al +
inc ebx  +
lea edx [ebp+var_24] +
cmp ecx edx +
jnz loc_4C2D86  +
mov byte ptr [ebx] 0 +
mov eax [ebp+arg_4] +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
push 61h  +
push 0  +
push 0Ah  +
mov eax [ebp+arg_4] +
push eax  +
mov edx [ebp+arg_0] +
push edx  +
call ___longtoa  +
add esp 14h +
pop ebp  +
retn   +
***
mov eax [ebp+arg_8] +
push 61h  +
push 0  +
mov eax [ebp+arg_8] +
push eax  +
mov edx [ebp+arg_4] +
push edx  +
mov ecx [ebp+arg_0] +
push ecx  +
call ___longtoa  +
add esp 14h +
pop ebp  +
retn   +
***
mov eax [ebp+arg_8] +
push 61h  +
cmp eax 0Ah +
setz dl  +
and edx 1 +
push edx  +
push eax  +
mov eax [ebp+arg_4] +
push eax  +
mov ecx [ebp+arg_0] +
push ecx  +
call ___longtoa  +
add esp 14h +
pop ebp  +
retn   +
***
mov eax [ebp+e] +
cmp dword ptr [eax] 4 +
jnz loc_4C2E62  +
xor edx edx +
mov [eax+18h] edx +
mov [eax+1Ch] edx +
mov eax 1 +
pop ebp  +
retn   +
cmp dword ptr [eax] 5 +
jnz loc_4C2E6E  +
mov eax 1 +
pop ebp  +
retn   +
xor eax eax +
pop ebp  +
retn   +
***
mov eax [ebp+e] +
cmp dword ptr [eax] 4 +
jnz loc_4C2E92  +
xor edx edx +
mov [eax+1Ch] edx +
mov [eax+20h] edx +
mov [eax+24h] dx +
mov eax 1 +
pop ebp  +
retn   +
cmp dword ptr [eax] 5 +
jnz loc_4C2E9E  +
mov eax 1 +
pop ebp  +
retn   +
xor eax eax +
pop ebp  +
retn   +
***
mov eax [ebp+arg_0] +
mov edx [ebp+arg_4] +
mov off_4E8C1C eax +
mov off_4E8C20 edx +
pop ebp  +
retn   +
***
push esi  +
mov esi [ebp+arg_0] +
mov ecx 0Ah +
mov eax [esi+4] +
xor edx edx +
or eax eax +
jz loc_4C2ED6  +
div  ecx +
mov [esi+4] eax +
mov eax [esi] +
div  ecx +
mov [esi] eax +
mov eax edx +
pop esi  +
pop ebp  +
retn   +
***
push esi  +
push edi  +
mov esi [ebp+arg_0] +
mov ecx 0Ah +
mov eax [esi] +
mul  ecx +
add eax [ebp+arg_4] +
adc edx 0 +
mov [esi] eax +
mov edi edx +
mov eax [esi+4] +
mul  ecx +
add eax edi +
adc edx 0 +
mov [esi+4] eax +
mov eax edx +
pop edi  +
pop esi  +
pop ebp  +
retn   +
***
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_8] +
mov esi [ebp+arg_4] +
mov ebx [ebp+arg_0] +
push 0Eh  +
call __getLocaleNumericInfo  +
pop ecx  +
cmp bl 47h +
jz loc_4C2F40  +
cmp bl 67h +
jnz loc_4C2F46  +
jmp loc_4C2F40  +
dec edi  +
cmp esi edi +
jb loc_4C2F40  +
mov eax esi +
jmp loc_4C2F50  +
cmp byte ptr [edi-1] 30h +
jz loc_4C2F37  +
mov dl [eax] +
cmp dl [edi-1] +
jnz loc_4C2F4E  +
dec edi  +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
add esp 0FFFFFFC8h +
push ebx  +
push esi  +
push edi  +
push 0Eh  +
call __getLocaleNumericInfo  +
pop ecx  +
mov al [eax] +
mov [ebp+var_A] al +
cmp [ebp+arg_4] 28h +
jle loc_4C2F7B  +
mov [ebp+arg_4] 28h +
mov edx [ebp+arg_4] +
mov [ebp+var_8] edx +
mov cl [ebp+arg_C] +
and cl 0DFh +
mov [ebp+var_9] cl +
cmp cl 46h +
jnz loc_4C2FA1  +
mov edi [ebp+var_8] +
neg edi  +
test edi edi +
jle loc_4C2FB9  +
xor eax eax +
mov edi eax +
mov [ebp+arg_4] eax +
jmp loc_4C2FB9  +
mov edi [ebp+var_8] +
test edi edi +
jg loc_4C2FAF  +
mov edi 1 +
jmp loc_4C2FB9  +
cmp [ebp+var_9] 45h +
jnz loc_4C2FB9  +
inc edi  +
inc [ebp+arg_4]  +
mov eax [ebp+arg_14] +
push eax  +
lea edx [ebp+s] +
push edx  +
lea ecx [ebp+var_4] +
push ecx  +
push edi  +
mov eax [ebp+arg_0] +
push eax  +
call ___xcvt  +
add esp 14h +
mov esi eax +
mov ebx [ebp+arg_8] +
cmp esi 7FFFh +
jnz loc_4C3017  +
cmp [ebp+var_4] 0 +
jz loc_4C2FEC  +
mov eax offset aInf +
jmp loc_4C2FF1  +
mov eax offset aInf_0 +
mov edi eax +
xor eax eax +
or ecx 0FFFFFFFFh +
mov esi ebx +
scas   +
not ecx  +
sub edi ecx +
mov edx ecx +
xchg esi edi +
shr ecx 2 +
mov eax edi +
movs   +
mov ecx edx +
and ecx 3 +
movs   +
jmp loc_4C31D6  +
cmp esi 7FFEh +
jnz loc_4C3057  +
cmp [ebp+var_4] 0 +
jz loc_4C302C  +
mov eax offset aNan +
jmp loc_4C3031  +
mov eax offset aNan_0 +
mov edi eax +
xor eax eax +
or ecx 0FFFFFFFFh +
mov esi ebx +
scas   +
not ecx  +
sub edi ecx +
mov edx ecx +
xchg esi edi +
shr ecx 2 +
mov eax edi +
movs   +
mov ecx edx +
and ecx 3 +
movs   +
jmp loc_4C31D6  +
cmp [ebp+var_4] 0 +
jz loc_4C3061  +
mov byte ptr [ebx] 2Dh +
inc ebx  +
cmp [ebp+var_9] 46h +
jz loc_4C3092  +
cmp [ebp+var_9] 47h +
jnz loc_4C3122  +
cmp esi 0FFFFFFFDh +
jl loc_4C3122  +
cmp [ebp+arg_4] 0 +
jnz loc_4C3087  +
mov eax 1 +
jmp loc_4C308A  +
mov eax [ebp+arg_4] +
cmp esi eax +
jg loc_4C3122  +
cmp esi 28h +
jg loc_4C3122  +
test esi esi +
jg loc_4C30B6  +
mov byte ptr [ebx] 30h +
inc ebx  +
mov dl [ebp+var_A] +
mov [ebx] dl +
inc ebx  +
test esi esi +
jz loc_4C30B6  +
mov byte ptr [ebx] 30h +
inc ebx  +
inc esi  +
test esi esi +
jnz loc_4C30AD  +
xor edi edi +
lea eax [ebp+s] +
jmp loc_4C30CB  +
mov [ebx] dl +
inc ebx  +
dec esi  +
jnz loc_4C30CA  +
mov dl [ebp+var_A] +
mov [ebx] dl +
inc ebx  +
inc edi  +
inc eax  +
mov dl [eax] +
test dl dl +
jnz loc_4C30BD  +
add edi [ebp+var_8] +
cmp edi [ebp+arg_4] +
jge loc_4C30F5  +
mov ecx [ebp+arg_4] +
sub ecx edi +
mov edi ecx +
add esi edi +
push edi  +
push 30h  +
push ebx  +
call _memset  +
add esp 0Ch +
add ebx edi +
dec esi  +
jz loc_4C3111  +
jmp loc_4C3111  +
dec esi  +
jz loc_4C3111  +
cmp [ebp+arg_10] 0 +
jnz loc_4C3111  +
push ebx  +
mov eax [ebp+arg_8] +
push eax  +
mov dl [ebp+arg_C] +
push edx  +
call sub_4C2F14  +
add esp 0Ch +
mov ebx eax +
cmp ebx [ebp+arg_8] +
jnz loc_4C311A  +
mov byte ptr [ebx] 30h +
inc ebx  +
mov byte ptr [ebx] 0 +
jmp loc_4C31D6  +
lea eax [ebp+s] +
mov dl [eax] +
inc eax  +
mov [ebx] dl +
inc ebx  +
mov dl [eax] +
inc eax  +
test dl dl +
jz loc_4C3161  +
mov cl [ebp+var_A] +
mov [ebx] cl +
inc ebx  +
test dl dl +
jz loc_4C3146  +
mov [ebx] dl +
inc ebx  +
mov dl [eax] +
inc eax  +
test dl dl +
jnz loc_4C313C  +
cmp [ebp+arg_10] 0 +
jnz loc_4C316D  +
push ebx  +
mov eax [ebp+arg_8] +
push eax  +
mov cl [ebp+arg_C] +
push ecx  +
call sub_4C2F14  +
add esp 0Ch +
mov ebx eax +
jmp loc_4C316D  +
cmp [ebp+arg_10] 0 +
jz loc_4C316D  +
mov al [ebp+var_A] +
mov [ebx] al +
inc ebx  +
mov dl [ebp+arg_C] +
and dl 20h +
or dl 45h +
mov [ebx] dl +
inc ebx  +
dec esi  +
jns loc_4C3184  +
neg esi  +
mov byte ptr [ebx] 2Dh +
inc ebx  +
jmp loc_4C3188  +
mov byte ptr [ebx] 2Bh +
inc ebx  +
cmp esi 3E8h +
jl loc_4C3197  +
mov edi 4 +
jmp loc_4C31A8  +
cmp esi 64h +
jl loc_4C31A3  +
mov edi 3 +
jmp loc_4C31A8  +
mov edi 2 +
mov byte ptr [ebx+edi] 0 +
lea eax [ebx+edi] +
mov ebx eax +
test edi edi +
jz loc_4C31D6  +
mov eax esi +
mov ecx 0Ah +
cdq   +
idiv  ecx +
dec ebx  +
add dl 30h +
mov eax esi +
mov ecx 0Ah +
mov [ebx] dl +
dec edi  +
cdq   +
idiv  ecx +
mov esi eax +
test edi edi +
jnz loc_4C31B5  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
cmp [ebp+arg_4] 0 +
mov eax [ebp+arg_0] +
jz loc_4C31F1  +
add eax 0Ch +
jmp loc_4C31F4  +
add eax 8 +
pop ebp  +
retn   +
***
mov off_4E8AC4 offset sub_4C2F58 +
mov off_4E8AC8 offset sub_4C31E0 +
retn   +
***
push ebx  +
push esi  +
push edi  +
mov ebx [ebp+arg_8] +
mov esi [ebp+arg_4] +
mov edi [ebp+arg_0] +
push 0Eh  +
call __getLocaleNumericInfo  +
pop ecx  +
cmp di 47h +
jz loc_4C3240  +
cmp di 67h +
jnz loc_4C3247  +
jmp loc_4C3240  +
sub ebx 2 +
cmp esi ebx +
jb loc_4C3240  +
mov eax esi +
jmp loc_4C3255  +
cmp word ptr [ebx-2] 30h +
jz loc_4C3235  +
mov dx [eax] +
cmp dx [ebx-2] +
jnz loc_4C3253  +
sub ebx 2 +
mov eax ebx +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
add esp 0FFFFFF9Ch +
push ebx  +
push esi  +
push edi  +
push 0Eh  +
call __getLocaleNumericInfo  +
mov ax [eax] +
pop ecx  +
mov [ebp+var_C] ax +
cmp [ebp+arg_4] 28h +
jle loc_4C3281  +
mov [ebp+arg_4] 28h +
mov edx [ebp+arg_4] +
mov [ebp+var_8] edx +
mov cx [ebp+arg_C] +
and cx 0DFh +
mov [ebp+var_A] cx +
cmp cx 46h +
jnz loc_4C32AC  +
mov edi [ebp+var_8] +
neg edi  +
test edi edi +
jle loc_4C32C5  +
xor eax eax +
mov edi eax +
mov [ebp+arg_4] eax +
jmp loc_4C32C5  +
mov edi [ebp+var_8] +
test edi edi +
jg loc_4C32BA  +
mov edi 1 +
jmp loc_4C32C5  +
cmp [ebp+var_A] 45h +
jnz loc_4C32C5  +
inc edi  +
inc [ebp+arg_4]  +
mov eax [ebp+arg_14] +
push eax  +
lea edx [ebp+s] +
push edx  +
lea ecx [ebp+var_4] +
push ecx  +
push edi  +
mov eax [ebp+arg_0] +
push eax  +
call ___xcvtw  +
add esp 14h +
mov esi eax +
mov ebx [ebp+dst] +
cmp esi 7FFFh +
jnz loc_4C330C  +
cmp [ebp+var_4] 0 +
jz loc_4C32F8  +
mov eax offset aInf_1 +
jmp loc_4C32FD  +
mov eax offset asc_4E8C86 +
push eax  +
push ebx  +
call _wcscpy  +
add esp 8 +
jmp loc_4C350C  +
cmp esi 7FFEh +
jnz loc_4C3335  +
cmp [ebp+var_4] 0 +
jz loc_4C3321  +
mov edx offset off_4E8C90 +
jmp loc_4C3326  +
mov edx offset off_4E8C9A +
push edx  +
push ebx  +
call _wcscpy  +
add esp 8 +
jmp loc_4C350C  +
cmp [ebp+var_4] 0 +
jz loc_4C3343  +
mov word ptr [ebx] 2Dh +
add ebx 2 +
cmp [ebp+var_A] 46h +
jz loc_4C3376  +
cmp [ebp+var_A] 47h +
jnz loc_4C3427  +
cmp esi 0FFFFFFFDh +
jl loc_4C3427  +
cmp [ebp+arg_4] 0 +
jnz loc_4C336B  +
mov eax 1 +
jmp loc_4C336E  +
mov eax [ebp+arg_4] +
cmp esi eax +
jg loc_4C3427  +
cmp esi 28h +
jg loc_4C3427  +
test esi esi +
jg loc_4C33A6  +
mov word ptr [ebx] 30h +
add ebx 2 +
mov dx [ebp+var_C] +
mov [ebx] dx +
add ebx 2 +
test esi esi +
jz loc_4C33A6  +
mov word ptr [ebx] 30h +
add ebx 2 +
inc esi  +
test esi esi +
jnz loc_4C3399  +
xor edi edi +
lea eax [ebp+s] +
jmp loc_4C33C4  +
mov [ebx] dx +
add ebx 2 +
dec esi  +
jnz loc_4C33C1  +
mov dx [ebp+var_C] +
mov [ebx] dx +
add ebx 2 +
inc edi  +
add eax 2 +
mov dx [eax] +
test dx dx +
jnz loc_4C33AD  +
add edi [ebp+var_8] +
cmp edi [ebp+arg_4] +
jge loc_4C33F2  +
mov ecx [ebp+arg_4] +
sub ecx edi +
mov edi ecx +
add esi edi +
push edi  +
push 30h  +
push ebx  +
call _memset  +
add esp 0Ch +
add edi edi +
add ebx edi +
dec esi  +
jz loc_4C3410  +
jmp loc_4C3410  +
dec esi  +
jz loc_4C3410  +
cmp [ebp+arg_10] 0 +
jnz loc_4C3410  +
push ebx  +
mov eax [ebp+dst] +
push eax  +
mov dx [ebp+arg_C] +
push edx  +
call sub_4C3210  +
add esp 0Ch +
mov ebx eax +
cmp ebx [ebp+dst] +
jnz loc_4C341D  +
mov word ptr [ebx] 30h +
add ebx 2 +
mov word ptr [ebx] 0 +
jmp loc_4C350C  +
lea eax [ebp+s] +
mov dx [eax] +
add eax 2 +
mov [ebx] dx +
add ebx 2 +
mov dx [eax] +
add eax 2 +
test dx dx +
jz loc_4C347E  +
mov cx [ebp+var_C] +
mov [ebx] cx +
add ebx 2 +
test dx dx +
jz loc_4C3461  +
mov [ebx] dx +
add ebx 2 +
mov dx [eax] +
add eax 2 +
test dx dx +
jnz loc_4C3450  +
cmp [ebp+arg_10] 0 +
jnz loc_4C348F  +
push ebx  +
mov eax [ebp+dst] +
push eax  +
mov cx [ebp+arg_C] +
push ecx  +
call sub_4C3210  +
add esp 0Ch +
mov ebx eax +
jmp loc_4C348F  +
cmp [ebp+arg_10] 0 +
jz loc_4C348F  +
mov ax [ebp+var_C] +
mov [ebx] ax +
add ebx 2 +
mov dx [ebp+arg_C] +
and dx 20h +
or dx 45h +
mov [ebx] dx +
add ebx 2 +
dec esi  +
jns loc_4C34B0  +
neg esi  +
mov word ptr [ebx] 2Dh +
add ebx 2 +
jmp loc_4C34B8  +
mov word ptr [ebx] 2Bh +
add ebx 2 +
cmp esi 3E8h +
jl loc_4C34C7  +
mov edi 4 +
jmp loc_4C34D8  +
cmp esi 64h +
jl loc_4C34D3  +
mov edi 3 +
jmp loc_4C34D8  +
mov edi 2 +
mov word ptr [ebx+edi*2] 0 +
lea eax [ebx+edi*2] +
mov ebx eax +
test edi edi +
jz loc_4C350C  +
mov eax esi +
mov ecx 0Ah +
cdq   +
idiv  ecx +
add dx 30h +
add ebx 0FFFFFFFEh +
mov eax esi +
mov ecx 0Ah +
mov [ebx] dx +
dec edi  +
cdq   +
idiv  ecx +
mov esi eax +
test edi edi +
jnz loc_4C34E7  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
cmp [ebp+arg_4] 0 +
mov eax [ebp+arg_0] +
jz loc_4C3525  +
add eax 0Ch +
jmp loc_4C3528  +
add eax 8 +
pop ebp  +
retn   +
***
mov off_4E8B2C offset sub_4C325C +
mov off_4E8B30 offset sub_4C3514 +
retn   +
***
add esp 0FFFFFFBCh +
xor eax eax +
xor edx edx +
lea ecx [ebp+var_24] +
push ebx  +
push esi  +
push edi  +
lea edi [ebp+var_24] +
mov [ebp+var_4] 8000h +
mov [ebp+var_8] 13h +
mov [ebp+var_9] 0 +
mov [ebp+var_A] 1 +
mov [ebp+var_B] 0 +
mov [ebp+var_C] 0 +
mov [ebp+var_D] 0 +
mov [ebp+var_14] eax +
mov esi 0FFFFFFFEh +
mov [ebp+var_18] 1 +
mov dword ptr [ebp+var_24] edx +
mov dword ptr [ebp+var_24+4] edx +
mov word ptr [ebp+var_24+8] dx +
mov [ebp+var_34] ecx +
push 0Eh  +
call __getLocaleNumericInfo  +
pop ecx  +
mov al [eax] +
mov [ebp+var_3D] al +
inc [ebp+var_14]  +
mov edx [ebp+arg_C] +
push edx  +
call [ebp+arg_4]  +
pop ecx  +
mov ebx eax +
inc eax  +
jnz loc_4C35BE  +
mov [ebp+var_18] 0FFFFFFFFh +
jmp loc_4C3878  +
test bl 80h +
jnz loc_4C35CE  +
push ebx  +
call __ismbcspace  +
pop ecx  +
test eax eax +
jnz loc_4C35A2  +
dec [ebp+arg_10]  +
js loc_4C36E6  +
cmp ebx 2Bh +
jnz loc_4C35E2  +
mov [ebp+var_B] 1 +
jmp loc_4C35EF  +
cmp ebx 2Dh +
jnz loc_4C3605  +
mov dl 1 +
mov [ebp+var_B] dl +
mov [ebp+var_9] dl +
dec [ebp+arg_10]  +
js loc_4C36E6  +
inc [ebp+var_14]  +
mov eax [ebp+arg_C] +
push eax  +
call [ebp+arg_4]  +
pop ecx  +
mov ebx eax +
cmp [ebp+var_A] 1 +
jnz loc_4C3623  +
cmp [ebp+var_B] 0 +
jz loc_4C3623  +
cmp ebx 49h +
jz loc_4C389A  +
cmp ebx 4Eh +
jz loc_4C3908  +
mov [ebp+var_A] 0 +
movsx eax [ebp+var_3D] +
cmp ebx eax +
jnz loc_4C364B  +
cmp [ebp+var_4] 8000h +
jnz loc_4C36EB  +
test esi esi +
jle loc_4C3644  +
mov edx esi +
jmp loc_4C3646  +
xor edx edx +
mov [ebp+var_4] edx +
jmp loc_4C35EF  +
cmp ebx 30h +
jl loc_4C36EB  +
cmp ebx 39h +
jg loc_4C36EB  +
sub ebx 30h +
inc esi  +
test esi esi +
jg loc_4C3691  +
mov eax [ebp+var_34] +
test ebx ebx +
mov [eax] bx +
jz loc_4C3679  +
mov esi 1 +
jmp loc_4C35EF  +
or esi 0FFFFFFFFh +
cmp [ebp+var_4] 8000h +
jz loc_4C35EF  +
dec [ebp+var_4]  +
jmp loc_4C35EF  +
cmp esi 9 +
jg loc_4C36A6  +
mov eax [edi] +
add eax eax +
lea eax [eax+eax*4] +
add eax ebx +
mov [edi] eax +
jmp loc_4C35EF  +
cmp esi [ebp+var_8] +
jg loc_4C35EF  +
mov edx [edi] +
lea eax [ebp+var_3C] +
mov [ebp+var_3C] edx +
mov ecx [edi+4] +
mov [ebp+var_38] ecx +
push ebx  +
push eax  +
call __qmul10  +
add esp 8 +
test eax eax +
jz loc_4C36D6  +
lea edx [esi-1] +
mov [ebp+var_8] edx +
jmp loc_4C35EF  +
mov ecx [ebp+var_3C] +
mov [edi] ecx +
mov eax [ebp+var_38] +
mov [edi+4] eax +
jmp loc_4C35EF  +
mov ebx 65h +
cmp esi 0FFFFFFFEh +
jz loc_4C3873  +
cmp [ebp+var_4] 8000h +
jnz loc_4C3700  +
mov [ebp+var_4] esi +
xor edi edi +
cmp ebx 65h +
jz loc_4C370C  +
cmp ebx 45h +
jnz loc_4C3766  +
mov [ebp+var_44] 1 +
dec [ebp+arg_10]  +
js loc_4C3774  +
inc [ebp+var_14]  +
mov eax [ebp+arg_C] +
push eax  +
call [ebp+arg_4]  +
pop ecx  +
mov ebx eax +
cmp [ebp+var_44] 0 +
jz loc_4C3740  +
xor eax eax +
cmp ebx 2Dh +
mov [ebp+var_44] eax +
jnz loc_4C373B  +
mov [ebp+var_C] 1 +
jmp loc_4C3713  +
cmp ebx 2Bh +
jz loc_4C3713  +
cmp ebx 30h +
jl loc_4C3766  +
cmp ebx 39h +
jg loc_4C3766  +
mov edx edi +
add edx edx +
lea edx [edx+edx*4] +
add ebx edx +
sub ebx 30h +
mov edi ebx +
cmp ebx 1344h +
jle loc_4C3713  +
mov [ebp+var_D] 1 +
jmp loc_4C3713  +
mov eax [ebp+arg_C] +
push eax  +
push ebx  +
call [ebp+arg_8]  +
add esp 8 +
dec [ebp+var_14]  +
cmp [ebp+var_C] 0 +
jz loc_4C377F  +
neg edi  +
neg [ebp+var_D]  +
test esi esi +
jge loc_4C3794  +
xor edx edx +
mov dword ptr [ebp+var_24] edx +
mov dword ptr [ebp+var_24+4] edx +
mov word ptr [ebp+var_24+8] dx +
jmp loc_4C3839  +
cmp [ebp+var_D] 0 +
jz loc_4C37DF  +
cmp [ebp+var_D] 1 +
jnz loc_4C37CA  +
mov ecx [ebp+var_34] +
mov ax 0FFFFh +
mov [ecx+6] ax +
mov edx [ebp+var_34] +
mov [edx+4] ax +
mov edx [ebp+var_34] +
mov [edx+2] ax +
mov edx [ebp+var_34] +
mov [edx] ax +
mov ecx [ebp+var_34] +
mov word ptr [ecx+8] 7FFEh +
jmp loc_4C37D6  +
xor eax eax +
mov dword ptr [ebp+var_24] eax +
mov dword ptr [ebp+var_24+4] eax +
mov word ptr [ebp+var_24+8] ax +
mov [ebp+var_18] 2 +
jmp loc_4C3839  +
cmp esi [ebp+var_8] +
jle loc_4C37E9  +
mov edx [ebp+var_8] +
jmp loc_4C37EB  +
mov edx esi +
mov eax [ebp+var_4] +
lea ecx [ebp+var_24] +
sub eax edx +
push ecx  +
add edi eax +
call __fuildq  +
pop ecx  +
fstp  [ebp+var_24] +
wait   +
test edi edi +
jz loc_4C3839  +
test edi edi +
jle loc_4C380C  +
mov eax edi +
jmp loc_4C3810  +
mov eax edi +
neg eax  +
push eax  +
call __pow10  +
pop ecx  +
fstp  [ebp+var_30] +
wait   +
test edi edi +
jge loc_4C382D  +
fld  [ebp+var_24] +
fld  [ebp+var_30] +
fdivp st(1) st +
fstp  [ebp+var_24] +
wait   +
jmp loc_4C3839  +
fld  [ebp+var_24] +
fld  [ebp+var_30] +
fmulp st(1) st +
fstp  [ebp+var_24] +
wait   +
cmp [ebp+var_9] 0 +
jz loc_4C3848  +
fld  [ebp+var_24] +
fchs   +
fstp  [ebp+var_24] +
wait   +
mov edx [ebp+arg_14] +
mov ecx [ebp+var_14] +
add [edx] ecx +
mov eax [ebp+arg_18] +
mov edx [ebp+var_18] +
mov [eax] edx +
mov ecx [ebp+arg_0] +
mov eax dword ptr [ebp+var_24] +
mov [ecx] eax +
mov eax dword ptr [ebp+var_24+4] +
mov [ecx+4] eax +
mov ax word ptr [ebp+var_24+8] +
mov [ecx+8] ax +
jmp loc_4C3986  +
xor edx edx +
mov [ebp+var_18] edx +
cmp [ebp+arg_10] 0 +
jl loc_4C388C  +
mov ecx [ebp+arg_C] +
push ecx  +
push ebx  +
call [ebp+arg_8]  +
add esp 8 +
dec [ebp+var_14]  +
xor eax eax +
mov dword ptr [ebp+var_24] eax +
mov dword ptr [ebp+var_24+4] eax +
mov word ptr [ebp+var_24+8] ax +
jmp loc_4C3839  +
inc [ebp+var_14]  +
mov edx [ebp+arg_C] +
push edx  +
call [ebp+arg_4]  +
pop ecx  +
mov ebx eax +
dec [ebp+arg_10]  +
js loc_4C3873  +
cmp ebx 4Eh +
jnz loc_4C3873  +
inc [ebp+var_14]  +
mov eax [ebp+arg_C] +
push eax  +
call [ebp+arg_4]  +
pop ecx  +
mov ebx eax +
dec [ebp+arg_10]  +
js loc_4C3873  +
cmp ebx 46h +
jnz loc_4C3873  +
cmp [ebp+var_9] 0 +
jz loc_4C38EB  +
mov eax offset unk_4E8CAE +
mov edx [eax] +
mov dword ptr [ebp+var_24] edx +
mov edx [eax+4] +
mov dword ptr [ebp+var_24+4] edx +
mov dx [eax+8] +
mov word ptr [ebp+var_24+8] dx +
jmp loc_4C3848  +
mov ecx offset unk_4E8CA4 +
mov eax [ecx] +
mov dword ptr [ebp+var_24] eax +
mov eax [ecx+4] +
mov dword ptr [ebp+var_24+4] eax +
mov ax [ecx+8] +
mov word ptr [ebp+var_24+8] ax +
jmp loc_4C3848  +
inc [ebp+var_14]  +
mov edx [ebp+arg_C] +
push edx  +
call [ebp+arg_4]  +
pop ecx  +
mov ebx eax +
dec [ebp+arg_10]  +
js loc_4C3873  +
cmp ebx 41h +
jnz loc_4C3873  +
inc [ebp+var_14]  +
mov eax [ebp+arg_C] +
push eax  +
call [ebp+arg_4]  +
pop ecx  +
mov ebx eax +
dec [ebp+arg_10]  +
js loc_4C3873  +
cmp ebx 4Eh +
jnz loc_4C3873  +
cmp [ebp+var_9] 0 +
jz loc_4C3969  +
mov eax offset unk_4E8CC2 +
mov edx [eax] +
mov dword ptr [ebp+var_24] edx +
mov edx [eax+4] +
mov dword ptr [ebp+var_24+4] edx +
mov dx [eax+8] +
mov word ptr [ebp+var_24+8] dx +
jmp loc_4C3848  +
mov ecx offset unk_4E8CB8 +
mov eax [ecx] +
mov dword ptr [ebp+var_24] eax +
mov eax [ecx+4] +
mov dword ptr [ebp+var_24+4] eax +
mov ax [ecx+8] +
mov word ptr [ebp+var_24+8] ax +
jmp loc_4C3848  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
add esp 0FFFFFFF8h +
push ebx  +
push esi  +
mov eax [ebp+arg_8] +
mov esi [ebp+arg_4] +
mov ebx [ebp+arg_0] +
test al 4 +
jz loc_4C39CA  +
push dword_4E8BA0  +
push dword_4E8B9C  +
mov dx [ebx+8] +
push edx  +
push dword ptr [ebx+4]  +
push dword ptr [ebx]  +
push 1  +
call ___ldtrunc  +
add esp 18h +
fstp  qword ptr [esi] +
wait   +
jmp loc_4C3A0A  +
test al 8 +
jz loc_4C39E2  +
mov ecx [ebx] +
mov [esi] ecx +
mov ecx [ebx+4] +
mov [esi+4] ecx +
mov cx [ebx+8] +
mov [esi+8] cx +
jmp loc_4C3A0A  +
mov eax offset unk_4E8CA4 +
fld  tbyte ptr [eax] +
fstp  [ebp+var_8] +
wait   +
push dword ptr [ebp+var_8+4]  +
push dword ptr [ebp+var_8]  +
mov cx [ebx+8] +
push ecx  +
push dword ptr [ebx+4]  +
push dword ptr [ebx]  +
push 0  +
call ___ldtrunc  +
add esp 18h +
fstp  dword ptr [esi] +
wait   +
pop esi  +
pop ebx  +
pop ecx  +
pop ecx  +
pop ebp  +
retn   +
***
mov off_4E8ACC offset sub_4C3544 +
mov off_4E8AD0 offset sub_4C3990 +
retn   +
***
add esp 0FFFFFFBCh +
xor eax eax +
xor edx edx +
lea ecx [ebp+var_24] +
push ebx  +
push esi  +
push edi  +
lea edi [ebp+var_24] +
mov [ebp+var_4] 8000h +
mov [ebp+var_8] 13h +
mov [ebp+var_9] 0 +
mov [ebp+var_A] 1 +
mov [ebp+var_B] 0 +
mov [ebp+var_C] 0 +
mov [ebp+var_D] 0 +
mov [ebp+var_14] eax +
mov esi 0FFFFFFFEh +
mov [ebp+var_18] 1 +
mov dword ptr [ebp+var_24] edx +
mov dword ptr [ebp+var_24+4] edx +
mov word ptr [ebp+var_24+8] dx +
mov [ebp+var_34] ecx +
push 0Eh  +
call __getLocaleNumericInfo  +
mov ax [eax] +
pop ecx  +
mov [ebp+var_3E] ax +
inc [ebp+var_14]  +
mov edx [ebp+arg_C] +
push edx  +
call [ebp+arg_4]  +
pop ecx  +
mov ebx eax +
inc eax  +
jnz loc_4C3AA4  +
mov [ebp+var_18] 0FFFFFFFFh +
jmp loc_4C3D59  +
push ebx  +
call _iswspace  +
pop ecx  +
test eax eax +
jnz loc_4C3A88  +
dec [ebp+arg_10]  +
js loc_4C3BC7  +
cmp ebx 2Bh +
jnz loc_4C3AC3  +
mov [ebp+var_B] 1 +
jmp loc_4C3AD0  +
cmp ebx 2Dh +
jnz loc_4C3AE6  +
mov dl 1 +
mov [ebp+var_B] dl +
mov [ebp+var_9] dl +
dec [ebp+arg_10]  +
js loc_4C3BC7  +
inc [ebp+var_14]  +
mov eax [ebp+arg_C] +
push eax  +
call [ebp+arg_4]  +
pop ecx  +
mov ebx eax +
cmp [ebp+var_A] 1 +
jnz loc_4C3B04  +
cmp [ebp+var_B] 0 +
jz loc_4C3B04  +
cmp ebx 49h +
jz loc_4C3D7B  +
cmp ebx 4Eh +
jz loc_4C3DE9  +
mov [ebp+var_A] 0 +
movzx eax [ebp+var_3E] +
cmp ebx eax +
jnz loc_4C3B2C  +
cmp [ebp+var_4] 8000h +
jnz loc_4C3BCC  +
test esi esi +
jle loc_4C3B25  +
mov edx esi +
jmp loc_4C3B27  +
xor edx edx +
mov [ebp+var_4] edx +
jmp loc_4C3AD0  +
cmp ebx 30h +
jl loc_4C3BCC  +
cmp ebx 39h +
jg loc_4C3BCC  +
sub ebx 30h +
inc esi  +
test esi esi +
jg loc_4C3B72  +
mov eax [ebp+var_34] +
test ebx ebx +
mov [eax] bx +
jz loc_4C3B5A  +
mov esi 1 +
jmp loc_4C3AD0  +
or esi 0FFFFFFFFh +
cmp [ebp+var_4] 8000h +
jz loc_4C3AD0  +
dec [ebp+var_4]  +
jmp loc_4C3AD0  +
cmp esi 9 +
jg loc_4C3B87  +
mov eax [edi] +
add eax eax +
lea eax [eax+eax*4] +
add eax ebx +
mov [edi] eax +
jmp loc_4C3AD0  +
cmp esi [ebp+var_8] +
jg loc_4C3AD0  +
mov edx [edi] +
lea eax [ebp+var_3C] +
mov [ebp+var_3C] edx +
mov ecx [edi+4] +
mov [ebp+var_38] ecx +
push ebx  +
push eax  +
call __qmul10  +
add esp 8 +
test eax eax +
jz loc_4C3BB7  +
lea edx [esi-1] +
mov [ebp+var_8] edx +
jmp loc_4C3AD0  +
mov ecx [ebp+var_3C] +
mov [edi] ecx +
mov eax [ebp+var_38] +
mov [edi+4] eax +
jmp loc_4C3AD0  +
mov ebx 65h +
cmp esi 0FFFFFFFEh +
jz loc_4C3D54  +
cmp [ebp+var_4] 8000h +
jnz loc_4C3BE1  +
mov [ebp+var_4] esi +
xor edi edi +
cmp ebx 65h +
jz loc_4C3BED  +
cmp ebx 45h +
jnz loc_4C3C47  +
mov [ebp+var_44] 1 +
dec [ebp+arg_10]  +
js loc_4C3C55  +
inc [ebp+var_14]  +
mov eax [ebp+arg_C] +
push eax  +
call [ebp+arg_4]  +
pop ecx  +
mov ebx eax +
cmp [ebp+var_44] 0 +
jz loc_4C3C21  +
xor eax eax +
cmp ebx 2Dh +
mov [ebp+var_44] eax +
jnz loc_4C3C1C  +
mov [ebp+var_C] 1 +
jmp loc_4C3BF4  +
cmp ebx 2Bh +
jz loc_4C3BF4  +
cmp ebx 30h +
jl loc_4C3C47  +
cmp ebx 39h +
jg loc_4C3C47  +
mov edx edi +
add edx edx +
lea edx [edx+edx*4] +
add ebx edx +
add ebx 0FFFFFFD0h +
mov edi ebx +
cmp ebx 1344h +
jle loc_4C3BF4  +
mov [ebp+var_D] 1 +
jmp loc_4C3BF4  +
mov eax [ebp+arg_C] +
push eax  +
push ebx  +
call [ebp+arg_8]  +
add esp 8 +
dec [ebp+var_14]  +
cmp [ebp+var_C] 0 +
jz loc_4C3C60  +
neg edi  +
neg [ebp+var_D]  +
test esi esi +
jge loc_4C3C75  +
xor edx edx +
mov dword ptr [ebp+var_24] edx +
mov dword ptr [ebp+var_24+4] edx +
mov word ptr [ebp+var_24+8] dx +
jmp loc_4C3D1A  +
cmp [ebp+var_D] 0 +
jz loc_4C3CC0  +
cmp [ebp+var_D] 1 +
jnz loc_4C3CAB  +
mov ecx [ebp+var_34] +
mov ax 0FFFFh +
mov [ecx+6] ax +
mov edx [ebp+var_34] +
mov [edx+4] ax +
mov edx [ebp+var_34] +
mov [edx+2] ax +
mov edx [ebp+var_34] +
mov [edx] ax +
mov ecx [ebp+var_34] +
mov word ptr [ecx+8] 7FFEh +
jmp loc_4C3CB7  +
xor eax eax +
mov dword ptr [ebp+var_24] eax +
mov dword ptr [ebp+var_24+4] eax +
mov word ptr [ebp+var_24+8] ax +
mov [ebp+var_18] 2 +
jmp loc_4C3D1A  +
cmp esi [ebp+var_8] +
jle loc_4C3CCA  +
mov edx [ebp+var_8] +
jmp loc_4C3CCC  +
mov edx esi +
mov eax [ebp+var_4] +
lea ecx [ebp+var_24] +
sub eax edx +
push ecx  +
add edi eax +
call __fuildq  +
pop ecx  +
fstp  [ebp+var_24] +
wait   +
test edi edi +
jz loc_4C3D1A  +
test edi edi +
jle loc_4C3CED  +
mov eax edi +
jmp loc_4C3CF1  +
mov eax edi +
neg eax  +
push eax  +
call __pow10  +
pop ecx  +
fstp  [ebp+var_30] +
wait   +
test edi edi +
jge loc_4C3D0E  +
fld  [ebp+var_24] +
fld  [ebp+var_30] +
fdivp st(1) st +
fstp  [ebp+var_24] +
wait   +
jmp loc_4C3D1A  +
fld  [ebp+var_24] +
fld  [ebp+var_30] +
fmulp st(1) st +
fstp  [ebp+var_24] +
wait   +
cmp [ebp+var_9] 0 +
jz loc_4C3D29  +
fld  [ebp+var_24] +
fchs   +
fstp  [ebp+var_24] +
wait   +
mov edx [ebp+arg_14] +
mov ecx [ebp+var_14] +
add [edx] ecx +
mov eax [ebp+arg_18] +
mov edx [ebp+var_18] +
mov [eax] edx +
mov ecx [ebp+arg_0] +
mov eax dword ptr [ebp+var_24] +
mov [ecx] eax +
mov eax dword ptr [ebp+var_24+4] +
mov [ecx+4] eax +
mov ax word ptr [ebp+var_24+8] +
mov [ecx+8] ax +
jmp loc_4C3E67  +
xor edx edx +
mov [ebp+var_18] edx +
cmp [ebp+arg_10] 0 +
jl loc_4C3D6D  +
mov ecx [ebp+arg_C] +
push ecx  +
push ebx  +
call [ebp+arg_8]  +
add esp 8 +
dec [ebp+var_14]  +
xor eax eax +
mov dword ptr [ebp+var_24] eax +
mov dword ptr [ebp+var_24+4] eax +
mov word ptr [ebp+var_24+8] ax +
jmp loc_4C3D1A  +
inc [ebp+var_14]  +
mov edx [ebp+arg_C] +
push edx  +
call [ebp+arg_4]  +
pop ecx  +
mov ebx eax +
dec [ebp+arg_10]  +
js loc_4C3D54  +
cmp ebx 4Eh +
jnz loc_4C3D54  +
inc [ebp+var_14]  +
mov eax [ebp+arg_C] +
push eax  +
call [ebp+arg_4]  +
pop ecx  +
mov ebx eax +
dec [ebp+arg_10]  +
js loc_4C3D54  +
cmp ebx 46h +
jnz loc_4C3D54  +
cmp [ebp+var_9] 0 +
jz loc_4C3DCC  +
mov eax offset unk_4E8CD6 +
mov edx [eax] +
mov dword ptr [ebp+var_24] edx +
mov edx [eax+4] +
mov dword ptr [ebp+var_24+4] edx +
mov dx [eax+8] +
mov word ptr [ebp+var_24+8] dx +
jmp loc_4C3D29  +
mov ecx offset unk_4E8CCC +
mov eax [ecx] +
mov dword ptr [ebp+var_24] eax +
mov eax [ecx+4] +
mov dword ptr [ebp+var_24+4] eax +
mov ax [ecx+8] +
mov word ptr [ebp+var_24+8] ax +
jmp loc_4C3D29  +
inc [ebp+var_14]  +
mov edx [ebp+arg_C] +
push edx  +
call [ebp+arg_4]  +
pop ecx  +
mov ebx eax +
dec [ebp+arg_10]  +
js loc_4C3D54  +
cmp ebx 41h +
jnz loc_4C3D54  +
inc [ebp+var_14]  +
mov eax [ebp+arg_C] +
push eax  +
call [ebp+arg_4]  +
pop ecx  +
mov ebx eax +
dec [ebp+arg_10]  +
js loc_4C3D54  +
cmp ebx 4Eh +
jnz loc_4C3D54  +
cmp [ebp+var_9] 0 +
jz loc_4C3E4A  +
mov eax offset unk_4E8CEA +
mov edx [eax] +
mov dword ptr [ebp+var_24] edx +
mov edx [eax+4] +
mov dword ptr [ebp+var_24+4] edx +
mov dx [eax+8] +
mov word ptr [ebp+var_24+8] dx +
jmp loc_4C3D29  +
mov ecx offset unk_4E8CE0 +
mov eax [ecx] +
mov dword ptr [ebp+var_24] eax +
mov eax [ecx+4] +
mov dword ptr [ebp+var_24+4] eax +
mov ax [ecx+8] +
mov word ptr [ebp+var_24+8] ax +
jmp loc_4C3D29  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
add esp 0FFFFFFF8h +
push ebx  +
push esi  +
mov eax [ebp+arg_8] +
mov esi [ebp+arg_4] +
mov ebx [ebp+arg_0] +
test al 4 +
jz loc_4C3EAA  +
push dword_4E8BA0  +
push dword_4E8B9C  +
mov dx [ebx+8] +
push edx  +
push dword ptr [ebx+4]  +
push dword ptr [ebx]  +
push 1  +
call ___ldtrunc  +
add esp 18h +
fstp  qword ptr [esi] +
wait   +
jmp loc_4C3EEA  +
test al 8 +
jz loc_4C3EC2  +
mov ecx [ebx] +
mov [esi] ecx +
mov ecx [ebx+4] +
mov [esi+4] ecx +
mov cx [ebx+8] +
mov [esi+8] cx +
jmp loc_4C3EEA  +
mov eax offset unk_4E8CCC +
fld  tbyte ptr [eax] +
fstp  [ebp+var_8] +
wait   +
push dword ptr [ebp+var_8+4]  +
push dword ptr [ebp+var_8]  +
mov cx [ebx+8] +
push ecx  +
push dword ptr [ebx+4]  +
push dword ptr [ebx]  +
push 0  +
call ___ldtrunc  +
add esp 18h +
fstp  dword ptr [esi] +
wait   +
pop esi  +
pop ebx  +
pop ecx  +
pop ecx  +
pop ebp  +
retn   +
***
mov off_4E8B34 offset sub_4C3A28 +
mov off_4E8B38 offset sub_4C3E70 +
retn   +
***
fld  [ebp+x] +
mov ax word ptr [ebp+x+6] +
shl ax 1 +
jz loc_4C3F1B  +
jb loc_4C3F1D  +
fsqrt   +
pop ebp  +
retn   +
fstp  st +
push dword_4E8CF8  +
push dword_4E8CF4  +
push 0  +
lea eax [ebp+x] +
push eax  +
push offset aSqrt  +
push 1  +
call sub_4C2778  +
add esp 18h +
jmp loc_4C3F1B  +
***
mov eax [ebp+arg_0] +
mov eax [ebp+arg_4] +
dec dword ptr [eax]  +
pop ebp  +
retn   +
***
add esp 0FFFFFFECh +
xor eax eax +
lea edx [ebp+var_8] +
lea ecx [ebp+var_4] +
push ebx  +
mov ebx [ebp+endptr] +
mov [ebp+var_4] eax +
push edx  +
push ecx  +
lea eax [ebp+s] +
push 7FFFh  +
push eax  +
push offset sub_4C3F60  +
lea edx [ebp+var_14] +
push offset sub_4C3F44  +
push edx  +
call sub_4C2A8C  +
add esp 1Ch +
cmp [ebp+var_8] 0 +
jg loc_4C3FB0  +
mov ecx [ebp+var_4] +
sub [ebp+s] ecx +
jmp loc_4C3FC1  +
cmp [ebp+var_8] 2 +
jnz loc_4C3FC1  +
call ___errno  +
mov dword ptr [eax] 22h +
test ebx ebx +
jz loc_4C3FCA  +
mov eax [ebp+s] +
mov [ebx] eax +
fld  [ebp+var_14] +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
push dword_4E8BA0  +
push dword_4E8B9C  +
mov edx [ebp+endptr] +
push edx  +
mov ecx [ebp+s] +
push ecx  +
call __strtold  +
add esp 8 +
add esp 0FFFFFFF4h +
fstp  [esp+14h+var_14] +
push 1  +
call ___ldtrunc  +
add esp 18h +
pop ebp  +
retn   +
***
add esp 0FFFFFFD4h +
push ebx  +
push esi  +
push edi  +
mov [ebp+var_2] 0Ah +
mov eax [ebp+arg_10] +
sub eax 2 +
jz loc_4C402B  +
sub eax 4 +
jz loc_4C4036  +
sub eax 2 +
jz loc_4C4041  +
jmp loc_4C4057  +
mov edx [ebp+arg_0] +
fld  dword ptr [edx] +
fstp  [ebp+var_C] +
wait   +
jmp loc_4C4057  +
mov ecx [ebp+arg_0] +
fld  qword ptr [ecx] +
fstp  [ebp+var_C] +
wait   +
jmp loc_4C4057  +
mov eax [ebp+arg_0] +
mov edx [eax] +
mov dword ptr [ebp+var_C] edx +
mov edx [eax+4] +
mov dword ptr [ebp+var_C+4] edx +
mov dx [eax+8] +
mov word ptr [ebp+var_C+8] dx +
lea eax [ebp+var_C] +
lea edx [ebp+var_C] +
mov [ebp+var_10] edx +
mov bx [eax+8] +
mov edx ebx +
and dx 7FFFh +
mov [eax+8] dx +
test bh 80h +
setnz al  +
and eax 1 +
mov ecx [ebp+arg_8] +
mov [ecx] eax +
lea eax [ebp+var_C] +
push eax  +
call __fxam  +
and ax 4700h +
pop ecx  +
cmp ax 4000h +
jnz loc_4C40C5  +
mov ebx [ebp+arg_4] +
test ebx ebx +
jg loc_4C409B  +
neg ebx  +
inc ebx  +
cmp ebx 28h +
jle loc_4C40A5  +
mov ebx 28h +
push ebx  +
push 30h  +
mov eax [ebp+s] +
push eax  +
call _memset  +
add esp 0Ch +
mov edx [ebp+s] +
mov byte ptr [edx+ebx] 0 +
mov eax 1 +
jmp loc_4C42D3  +
cmp ax 500h +
jnz loc_4C40D5  +
mov eax 7FFFh +
jmp loc_4C42D3  +
cmp ax 100h +
jnz loc_4C40E5  +
mov eax 7FFEh +
jmp loc_4C42D3  +
movzx eax bx +
and eax 7FFFh +
mov ecx [ebp+var_10] +
add eax 0FFFFC001h +
imul edx eax +
mov eax edx +
xor edx edx +
mov dl [ecx+7] +
add edx edx +
and edx 0FFh +
mov ecx edx +
lea edx [ecx+edx*8] +
lea edx [ecx+edx*2] +
lea edx [ecx+edx*4] +
movsx edx dx +
and edx 0FFFFh +
add eax edx +
mov ecx eax +
sar ecx 10h +
test eax 0FFFFh +
mov [ebp+var_14] ecx +
jz loc_4C4132  +
inc [ebp+var_14]  +
mov edi [ebp+arg_4] +
test edi edi +
jg loc_4C4147  +
mov edi [ebp+var_14] +
sub edi [ebp+arg_4] +
test edi edi +
jl loc_4C4091  +
cmp edi 13h +
jle loc_4C4151  +
mov edi 13h +
mov esi edi +
sub esi [ebp+var_14] +
test esi esi +
jz loc_4C41A2  +
mov ebx esi +
test esi esi +
jge loc_4C4164  +
mov ebx esi +
neg ebx  +
cmp ebx 1344h +
jle loc_4C4171  +
mov ebx 1344h +
push ebx  +
call __pow10  +
pop ecx  +
fstp  [ebp+var_20] +
wait   +
test esi esi +
jge loc_4C4190  +
fld  [ebp+var_20] +
fld  [ebp+var_C] +
fdivrp st(1) st +
fstp  [ebp+var_C] +
wait   +
add esi ebx +
jmp loc_4C419E  +
fld  [ebp+var_20] +
fld  [ebp+var_C] +
fmulp st(1) st +
fstp  [ebp+var_C] +
wait   +
sub esi ebx +
test esi esi +
jnz loc_4C415A  +
push edi  +
call __pow10  +
pop ecx  +
fstp  [ebp+var_20] +
wait   +
fld  [ebp+var_C] +
fld  [ebp+var_20] +
fcompp st(1) st +
fnstsw  ax +
sahf   +
jnb loc_4C41DF  +
inc [ebp+var_14]  +
inc edi  +
cmp edi 13h +
jg loc_4C4218  +
cmp [ebp+arg_4] 0 +
jle loc_4C4218  +
movsx edx [ebp+var_2] +
mov [ebp+var_28] edx +
fild  [ebp+var_28] +
fld  [ebp+var_C] +
fdivrp st(1) st +
fstp  [ebp+var_C] +
wait   +
dec edi  +
jmp loc_4C4218  +
lea ecx [edi-1] +
push ecx  +
call __pow10  +
pop ecx  +
fstp  [ebp+var_20] +
wait   +
fld  [ebp+var_C] +
fld  [ebp+var_20] +
fcompp st(1) st +
fnstsw  ax +
sahf   +
jbe loc_4C4218  +
dec [ebp+var_14]  +
dec edi  +
cmp [ebp+arg_4] 0 +
jle loc_4C4218  +
movsx edx [ebp+var_2] +
mov [ebp+var_2C] edx +
fild  [ebp+var_2C] +
fld  [ebp+var_C] +
fmulp st(1) st +
fstp  [ebp+var_C] +
wait   +
inc edi  +
test edi edi +
jl loc_4C4091  +
lea ecx [ebp+var_C] +
push ecx  +
lea eax [ebp+var_C] +
push eax  +
call __fuistq  +
mov edx [ebp+s] +
add esp 8 +
add edx edi +
xor esi esi +
mov ebx edx +
mov [ebp+var_24] edx +
mov byte ptr [ebx] 0 +
dec ebx  +
test edi edi +
jnz loc_4C425D  +
mov eax [ebp+var_10] +
movzx esi byte ptr [eax] +
and esi 0FFh +
xor esi 1 +
test esi esi +
jnz loc_4C4091  +
jmp loc_4C4277  +
lea eax [ebp+var_C] +
push eax  +
call __qdiv10  +
pop ecx  +
movsx edx al +
or esi edx +
add eax 30h +
mov [ebx] al +
dec ebx  +
dec edi  +
jz loc_4C4277  +
jmp loc_4C425D  +
test esi esi +
jnz loc_4C4291  +
inc [ebp+var_14]  +
cmp [ebp+arg_4] 0 +
jg loc_4C428A  +
mov edx [ebp+var_24] +
mov byte ptr [edx] 30h +
inc [ebp+var_24]  +
mov byte ptr [ebx+1] 31h +
mov ebx [ebp+arg_4] +
test ebx ebx +
jg loc_4C429E  +
mov ebx [ebp+var_14] +
sub ebx [ebp+arg_4] +
cmp ebx 28h +
jle loc_4C42A8  +
mov ebx 28h +
mov eax [ebp+var_24] +
mov byte ptr [eax] 0 +
mov edx [ebp+var_24] +
sub edx [ebp+s] +
sub ebx edx +
test ebx ebx +
jle loc_4C42D0  +
push ebx  +
push 30h  +
mov ecx [ebp+var_24] +
push ecx  +
call _memset  +
add esp 0Ch +
mov eax [ebp+var_24] +
mov byte ptr [eax+ebx] 0 +
mov eax [ebp+var_14] +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
add esp 0FFFFFFD4h +
push ebx  +
push esi  +
push edi  +
mov [ebp+var_2] 0Ah +
mov eax [ebp+arg_10] +
sub eax 2 +
jz loc_4C42FF  +
sub eax 4 +
jz loc_4C430A  +
sub eax 2 +
jz loc_4C4315  +
jmp loc_4C432B  +
mov edx [ebp+arg_0] +
fld  dword ptr [edx] +
fstp  [ebp+var_C] +
wait   +
jmp loc_4C432B  +
mov ecx [ebp+arg_0] +
fld  qword ptr [ecx] +
fstp  [ebp+var_C] +
wait   +
jmp loc_4C432B  +
mov eax [ebp+arg_0] +
mov edx [eax] +
mov dword ptr [ebp+var_C] edx +
mov edx [eax+4] +
mov dword ptr [ebp+var_C+4] edx +
mov dx [eax+8] +
mov word ptr [ebp+var_C+8] dx +
lea eax [ebp+var_C] +
lea edx [ebp+var_C] +
mov [ebp+var_10] edx +
mov bx [eax+8] +
mov edx ebx +
and dx 7FFFh +
mov [eax+8] dx +
test bh 80h +
setnz al  +
and eax 1 +
mov ecx [ebp+arg_8] +
mov [ecx] eax +
lea eax [ebp+var_C] +
push eax  +
call __fxam  +
and ax 4700h +
pop ecx  +
cmp ax 4000h +
jnz loc_4C439B  +
mov ebx [ebp+arg_4] +
test ebx ebx +
jg loc_4C436F  +
neg ebx  +
inc ebx  +
cmp ebx 28h +
jle loc_4C4379  +
mov ebx 28h +
push ebx  +
push 30h  +
mov eax [ebp+s] +
push eax  +
call __wmemset  +
mov edx [ebp+s] +
add esp 0Ch +
mov eax 1 +
mov word ptr [edx+ebx*2] 0 +
jmp loc_4C45C6  +
cmp ax 500h +
jnz loc_4C43AB  +
mov eax 7FFFh +
jmp loc_4C45C6  +
cmp ax 100h +
jnz loc_4C43BB  +
mov eax 7FFEh +
jmp loc_4C45C6  +
movzx eax bx +
and eax 7FFFh +
mov ecx [ebp+var_10] +
add eax 0FFFFC001h +
imul edx eax +
mov eax edx +
xor edx edx +
mov dl [ecx+7] +
add edx edx +
and edx 0FFh +
mov ecx edx +
lea edx [ecx+edx*8] +
lea edx [ecx+edx*2] +
lea edx [ecx+edx*4] +
movsx edx dx +
and edx 0FFFFh +
add eax edx +
mov ecx eax +
sar ecx 10h +
test eax 0FFFFh +
mov [ebp+var_14] ecx +
jz loc_4C4408  +
inc [ebp+var_14]  +
mov edi [ebp+arg_4] +
test edi edi +
jg loc_4C441D  +
mov edi [ebp+var_14] +
sub edi [ebp+arg_4] +
test edi edi +
jl loc_4C4365  +
cmp edi 13h +
jle loc_4C4427  +
mov edi 13h +
mov esi edi +
sub esi [ebp+var_14] +
test esi esi +
jz loc_4C4478  +
mov ebx esi +
test esi esi +
jge loc_4C443A  +
mov ebx esi +
neg ebx  +
cmp ebx 1344h +
jle loc_4C4447  +
mov ebx 1344h +
push ebx  +
call __pow10  +
pop ecx  +
fstp  [ebp+var_20] +
wait   +
test esi esi +
jge loc_4C4466  +
fld  [ebp+var_20] +
fld  [ebp+var_C] +
fdivrp st(1) st +
fstp  [ebp+var_C] +
wait   +
add esi ebx +
jmp loc_4C4474  +
fld  [ebp+var_20] +
fld  [ebp+var_C] +
fmulp st(1) st +
fstp  [ebp+var_C] +
wait   +
sub esi ebx +
test esi esi +
jnz loc_4C4430  +
push edi  +
call __pow10  +
pop ecx  +
fstp  [ebp+var_20] +
wait   +
fld  [ebp+var_C] +
fld  [ebp+var_20] +
fcompp st(1) st +
fnstsw  ax +
sahf   +
jnb loc_4C44B5  +
inc [ebp+var_14]  +
inc edi  +
cmp edi 13h +
jg loc_4C44EE  +
cmp [ebp+arg_4] 0 +
jle loc_4C44EE  +
movsx edx [ebp+var_2] +
mov [ebp+var_28] edx +
fild  [ebp+var_28] +
fld  [ebp+var_C] +
fdivrp st(1) st +
fstp  [ebp+var_C] +
wait   +
dec edi  +
jmp loc_4C44EE  +
lea ecx [edi-1] +
push ecx  +
call __pow10  +
pop ecx  +
fstp  [ebp+var_20] +
wait   +
fld  [ebp+var_C] +
fld  [ebp+var_20] +
fcompp st(1) st +
fnstsw  ax +
sahf   +
jbe loc_4C44EE  +
dec [ebp+var_14]  +
dec edi  +
cmp [ebp+arg_4] 0 +
jle loc_4C44EE  +
movsx edx [ebp+var_2] +
mov [ebp+var_2C] edx +
fild  [ebp+var_2C] +
fld  [ebp+var_C] +
fmulp st(1) st +
fstp  [ebp+var_C] +
wait   +
inc edi  +
test edi edi +
jl loc_4C4365  +
lea ecx [ebp+var_C] +
push ecx  +
lea eax [ebp+var_C] +
push eax  +
call __fuistq  +
mov edx edi +
add esp 8 +
add edx edx +
xor esi esi +
add edx [ebp+s] +
mov ebx edx +
mov [ebp+var_24] edx +
mov word ptr [ebx] 0 +
sub ebx 2 +
test edi edi +
jnz loc_4C4539  +
mov eax [ebp+var_10] +
movzx esi byte ptr [eax] +
and esi 0FFh +
xor esi 1 +
test esi esi +
jnz loc_4C4365  +
jmp loc_4C455A  +
lea eax [ebp+var_C] +
push eax  +
call __qdiv10  +
pop ecx  +
movsx edx al +
or esi edx +
movsx ecx al +
add cx 30h +
mov [ebx] cx +
sub ebx 2 +
dec edi  +
jz loc_4C455A  +
jmp loc_4C4539  +
test esi esi +
jnz loc_4C4579  +
inc [ebp+var_14]  +
cmp [ebp+arg_4] 0 +
jg loc_4C456F  +
mov eax [ebp+var_24] +
mov word ptr [eax] 30h +
add [ebp+var_24] 2 +
mov word ptr [ebx+2] 31h +
mov ebx [ebp+arg_4] +
test ebx ebx +
jg loc_4C4586  +
mov ebx [ebp+var_14] +
sub ebx [ebp+arg_4] +
cmp ebx 28h +
jle loc_4C4590  +
mov ebx 28h +
mov eax [ebp+var_24] +
mov word ptr [eax] 0 +
mov edx [ebp+var_24] +
sub edx [ebp+s] +
sar edx 1 +
jns loc_4C45A5  +
adc edx 0 +
sub ebx edx +
test ebx ebx +
jle loc_4C45C3  +
push ebx  +
push 30h  +
mov ecx [ebp+var_24] +
push ecx  +
call __wmemset  +
add esp 0Ch +
mov eax [ebp+var_24] +
mov word ptr [eax+ebx*2] 0 +
mov eax [ebp+var_14] +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
add esp 0FFFFFFECh +
push ebx  +
push esi  +
mov esi [ebp+newCodePage] +
cmp esi 0FFFFFFFEh +
jnz loc_4C45E9  +
call GetOEMCP  +
mov esi eax +
jmp loc_4C4603  +
cmp esi 0FFFFFFFDh +
jnz loc_4C45F7  +
call GetACP  +
mov esi eax +
jmp loc_4C4603  +
cmp esi 0FFFFFFFCh +
jnz loc_4C4603  +
mov eax off_4E88D0 +
mov esi [eax] +
test esi esi +
jz loc_4C4628  +
lea eax [ebp+CPInfo] +
push eax  +
push esi  +
call GetCPInfo  +
test eax eax +
jnz loc_4C4628  +
push offset aErrorSystemCod  +
call __ErrorMessage  +
pop ecx  +
or eax 0FFFFFFFFh +
jmp loc_4C46EB  +
xor eax eax +
mov edx offset unk_4F2A4C +
mov byte ptr [edx] 0 +
inc eax  +
inc edx  +
cmp eax 101h +
jl loc_4C462F  +
test esi esi +
jz loc_4C46E2  +
cmp [ebp+CPInfo.MaxCharSize] 1 +
jbe loc_4C46E2  +
lea ecx [ebp+CPInfo.LeadByte] +
jmp loc_4C4670  +
and eax 0FFh +
lea edx dword_4F2A4D[eax] +
jmp loc_4C4664  +
mov byte ptr [edx] 4 +
inc eax  +
inc edx  +
xor ebx ebx +
mov bl [ecx+1] +
cmp eax ebx +
jle loc_4C465F  +
add ecx 2 +
mov al [ecx] +
test al al +
jz loc_4C467C  +
cmp byte ptr [ecx+1] 0 +
jnz loc_4C4652  +
mov eax 1 +
mov edx (offset dword_4F2A4D+1) +
or byte ptr [edx] 8 +
inc eax  +
inc edx  +
cmp eax 0FFh +
jl loc_4C4686  +
cmp esi 3A4h +
jnz loc_4C46DA  +
xor eax eax +
mov al byte_4E8D04 +
lea edx dword_4F2A4D[eax] +
jmp loc_4C46AE  +
or byte ptr [edx] 1 +
inc eax  +
inc edx  +
xor ecx ecx +
mov cl byte_4E8D05 +
cmp eax ecx +
jle loc_4C46A9  +
xor eax eax +
mov al byte_4E8D06 +
lea edx dword_4F2A4D[eax] +
jmp loc_4C46CE  +
or byte ptr [edx] 2 +
inc eax  +
inc edx  +
xor ecx ecx +
mov cl byte_4E8D07 +
cmp eax ecx +
jle loc_4C46C9  +
mov dword_4F2B50 esi +
jmp loc_4C46E9  +
xor eax eax +
mov dword_4F2B50 eax +
xor eax eax +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
retn   +
***
call GetACP  +
push eax  +
call __setmbcp  +
pop ecx  +
retn   +
***
push ebx  +
push esi  +
mov ebx [ebp+arg_0] +
cmp ebx 0FFh +
jbe loc_4C4720  +
xor eax eax +
jmp loc_4C4745  +
mov esi ebx +
and esi 0FFh +
push esi  +
call _isalpha  +
pop ecx  +
test eax eax +
jnz loc_4C4740  +
test byte ptr dword_4F2A4D[esi] 1 +
jnz loc_4C4740  +
xor eax eax +
jmp loc_4C4745  +
mov eax 1 +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
mov eax [ebp+arg_0] +
cmp eax 0FFh +
jbe loc_4C475D  +
xor eax eax +
pop ebp  +
retn   +
push eax  +
call _isdigit  +
pop ecx  +
pop ebp  +
retn   +
***
mov eax [ebp+arg_0] +
cmp eax 0FFh +
jbe loc_4C4779  +
xor eax eax +
pop ebp  +
retn   +
push eax  +
call _isspace  +
pop ecx  +
pop ebp  +
retn   +
***
push ebx  +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_8] +
test edi edi +
jbe loc_4C4890  +
dec edi  +
mov eax [ebp+arg_0] +
xor ebx ebx +
mov bl [eax] +
inc [ebp+arg_0]  +
xor eax eax +
mov al bl +
test byte ptr dword_4F2A4D[eax] 4 +
jz loc_4C4825  +
test edi edi +
jbe loc_4C4890  +
mov edx [ebp+arg_0] +
mov al [edx] +
test al al +
jnz loc_4C4816  +
xor ebx ebx +
jmp loc_4C482E  +
shl ebx 8 +
and eax 0FFh +
or ebx eax +
inc [ebp+arg_0]  +
jmp loc_4C482E  +
push ebx  +
call __ltoupper  +
pop ecx  +
mov ebx eax +
mov edx [ebp+arg_4] +
movzx esi byte ptr [edx] +
xor edx edx +
mov eax esi +
mov dl al +
inc [ebp+arg_4]  +
test byte ptr dword_4F2A4D[edx] 4 +
jz loc_4C4867  +
test edi edi +
jbe loc_4C4890  +
dec edi  +
mov ecx [ebp+arg_4] +
mov al [ecx] +
test al al +
jnz loc_4C4858  +
xor esi esi +
jmp loc_4C4870  +
shl esi 8 +
and eax 0FFh +
or esi eax +
inc [ebp+arg_4]  +
jmp loc_4C4870  +
push esi  +
call __ltoupper  +
pop ecx  +
mov esi eax +
cmp esi ebx +
jz loc_4C4884  +
cmp esi ebx +
jbe loc_4C487D  +
or eax 0FFFFFFFFh +
jmp loc_4C4892  +
mov eax 1 +
jmp loc_4C4892  +
test ebx ebx +
jz loc_4C4890  +
test edi edi +
ja loc_4C47E9  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
push ebx  +
push esi  +
mov ecx [ebp+arg_4] +
mov eax [ebp+arg_0] +
xor edx edx +
xor ebx ebx +
mov bl [eax] +
test byte ptr dword_4F2A4D[ebx] 4 +
jz loc_4C48D7  +
cmp byte ptr [eax+1] 0 +
jnz loc_4C48C1  +
inc eax  +
test ecx ecx +
jnz loc_4C48E8  +
mov edx eax +
jmp loc_4C48E8  +
xor ebx ebx +
mov bl [eax] +
shl ebx 8 +
movzx esi byte ptr [eax+1] +
or ebx esi +
cmp ecx ebx +
jnz loc_4C48D4  +
mov edx eax +
inc eax  +
jmp loc_4C48E1  +
xor ebx ebx +
mov bl [eax] +
cmp ecx ebx +
jnz loc_4C48E1  +
mov edx eax +
mov bl [eax] +
inc eax  +
test bl bl +
jnz loc_4C48A5  +
mov eax edx +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
push ecx  +
push ebx  +
push esi  +
push edi  +
mov ebx [ebp+s] +
mov byte ptr [ebx] 0 +
lea eax [ebp+arg_8] +
mov [ebp+var_4] eax +
jmp loc_4C4921  +
push ebx  +
call _strlen  +
pop ecx  +
mov edi [ebp+arg_4] +
sub edi eax +
dec edi  +
test edi edi +
jle loc_4C492F  +
push edi  +
push esi  +
push ebx  +
call _strncat  +
add esp 0Ch +
add [ebp+var_4] 4 +
mov eax [ebp+var_4] +
mov esi [eax-4] +
test esi esi +
jnz loc_4C4905  +
pop edi  +
pop esi  +
pop ebx  +
pop ecx  +
pop ebp  +
retn   +
***
push 0  +
push offset aLine  +
mov eax [ebp+file] +
push eax  +
push offset aFile  +
mov edx [ebp+cond] +
push edx  +
push offset asc_4E8D4C  +
push 0F6h  +
push offset byte_4F2B54  +
call sub_4C48F0  +
add esp 20h +
push offset byte_4F2B54  +
call _strlen  +
pop ecx  +
add eax offset byte_4F2B54 +
push eax  +
mov ecx [ebp+line] +
push ecx  +
call ___utoa  +
add esp 8 +
push offset byte_4F2B54  +
call __ErrorMessage  +
pop ecx  +
call _abort  +
pop ebp  +
retn   +
***
add esp 0FFFFFFF0h +
push esp  +
call GetLocalTime  +
movzx eax [esp+10h+var_2] +
push eax  +
movzx edx [esp+14h+var_4] +
push edx  +
movzx ecx [esp+18h+var_6] +
push ecx  +
movzx eax [esp+1Ch+var_8] +
push eax  +
movzx edx [esp+20h+var_10] +
push edx  +
movzx ecx [esp+24h+var_A] +
push ecx  +
movzx eax [esp+28h+var_E] +
push eax  +
push offset a02d02d04d02d02  +
push offset byte_4F2C54  +
call wsprintfA  +
add esp 24h +
mov eax offset byte_4F2C54 +
add esp 10h +
retn   +
***
push ecx  +
call GetLastError  +
mov esi eax +
call __thread_data  +
mov ebx eax +
push esi  +
add ebx 0Ch +
call SetLastError  +
mov eax ebx +
pop esi  +
pop ebx  +
retn   +
***
mov eax [ebp+arg_4] +
mov dword ptr [eax] 1 +
xor eax eax +
pop ebp  +
retn 8  +
***
mov [esp+4+var_4] eax +
add esp 0FFFFFF7Ch +
cmp lpFileName 0 +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
jnz loc_4C4BA2  +
cmp dword_4E8D94 0 +
jnz loc_4C4BA2  +
cmp dword_4E8F78 0 +
jz loc_4C4B5C  +
push 80h  +
lea eax [ebp+Filename] +
push eax  +
push 0  +
call GetModuleFileNameA  +
push 5Ch  +
lea edx [ebp+Filename] +
push edx  +
call __mbsrchr  +
add esp 8 +
mov ebx eax +
test eax eax +
jnz loc_4C4B42  +
push 3Ah  +
lea edx [ebp+Filename] +
push edx  +
call __mbsrchr  +
add esp 8 +
mov ebx eax +
test eax eax +
jnz loc_4C4B42  +
lea ebx [ebp+Filename] +
jmp loc_4C4B43  +
inc ebx  +
call sub_4C4A84  +
or eax 10010h +
push eax  +
push ebx  +
push esi  +
push 0  +
call MessageBoxA  +
jmp loc_4C4BDD  +
push 0FFFFFFF4h  +
call GetStdHandle  +
mov ebx eax +
lea eax [ebp+NumberOfBytesWritten] +
push 0  +
push eax  +
push 2  +
push offset unk_4E8D9C  +
push ebx  +
call WriteFile  +
push 0  +
lea edx [ebp+NumberOfBytesWritten] +
push edx  +
push esi  +
call _strlen  +
pop ecx  +
push eax  +
push esi  +
push ebx  +
call WriteFile  +
push 0  +
lea ecx [ebp+NumberOfBytesWritten] +
push ecx  +
push 2  +
push offset unk_4E8D9F  +
push ebx  +
call WriteFile  +
jmp loc_4C4BDD  +
cmp dword_4E8D94 0 +
jz loc_4C4BBC  +
cmp dword_4E8D94 0FFFFFFFFh +
jz loc_4C4BDD  +
push esi  +
call dword_4E8D94  +
pop ecx  +
mov eax lpFileName +
test eax eax +
jz loc_4C4BDD  +
cmp lpFileName 0FFFFFFFFh +
jz loc_4C4BDD  +
cmp byte ptr [eax] 0 +
jz loc_4C4BDD  +
push esi  +
push eax  +
call __ErrorMessageHelper  +
add esp 8 +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
mov eax [ebp+arg_0] +
push eax  +
call __ErrorMessage  +
pop ecx  +
pop ebp  +
retn   +
***
mov eax [ebp+arg_0] +
push eax  +
call __ErrorMessage  +
pop ecx  +
push 1  +
call __exit  +
pop ecx  +
pop ebp  +
retn   +
***
push ebx  +
push esi  +
push edi  +
mov esi [ebp+arg_0] +
mov ebx [ebp+arg_4] +
xor edi edi +
jmp loc_4C4C27  +
mov al [ebx] +
mov dl [esi] +
mov [ebx] dl +
inc ebx  +
mov [esi] al +
inc esi  +
inc edi  +
call @Sysinit@@GetTls$qqrv  +
cmp edi [eax+0B0h] +
jb loc_4C4C1C  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
add esp 0FFFFFFF4h +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
cmp [ebp+arg_4] 2 +
ja loc_4C4C8E  +
cmp [ebp+arg_4] 2 +
jnz loc_4C4EBA  +
call @Sysinit@@GetTls$qqrv  +
mov esi [eax+0B0h] +
add esi edi +
push esi  +
push edi  +
call @Sysinit@@GetTls$qqrv  +
mov eax [eax+0ACh] +
call eax  +
add esp 8 +
test eax eax +
jle loc_4C4EBA  +
push esi  +
push edi  +
call sub_4C4C0C  +
add esp 8 +
jmp loc_4C4EBA  +
call @Sysinit@@GetTls$qqrv  +
mov esi [eax+0B0h] +
mov eax [ebp+arg_4] +
dec eax  +
imul esi eax +
add esi edi +
call @Sysinit@@GetTls$qqrv  +
mov ebx [eax+0B0h] +
mov eax [ebp+arg_4] +
shr eax 1 +
imul ebx eax +
add ebx edi +
push esi  +
push ebx  +
call @Sysinit@@GetTls$qqrv  +
mov edx [eax+0ACh] +
call edx  +
add esp 8 +
test eax eax +
jle loc_4C4CD7  +
push esi  +
push ebx  +
call sub_4C4C0C  +
add esp 8 +
push edi  +
push ebx  +
call @Sysinit@@GetTls$qqrv  +
mov ecx [eax+0ACh] +
call ecx  +
add esp 8 +
test eax eax +
jle loc_4C4CF9  +
push edi  +
push ebx  +
call sub_4C4C0C  +
add esp 8 +
jmp loc_4C4D19  +
push esi  +
push edi  +
call @Sysinit@@GetTls$qqrv  +
mov eax [eax+0ACh] +
call eax  +
add esp 8 +
test eax eax +
jle loc_4C4D19  +
push esi  +
push edi  +
call sub_4C4C0C  +
add esp 8 +
cmp [ebp+arg_4] 3 +
jnz loc_4C4D2E  +
push ebx  +
push edi  +
call sub_4C4C0C  +
add esp 8 +
jmp loc_4C4EBA  +
call @Sysinit@@GetTls$qqrv  +
mov edx [eax+0B0h] +
add edx edi +
mov [ebp+var_4] edx +
mov ebx edx +
jmp loc_4C4D72  +
cmp [ebp+var_C] 0 +
jnz loc_4C4D63  +
mov eax [ebp+var_4] +
push eax  +
push ebx  +
call sub_4C4C0C  +
add esp 8 +
call @Sysinit@@GetTls$qqrv  +
mov edx [eax+0B0h] +
add [ebp+var_4] edx +
cmp esi ebx +
jbe loc_4C4DE5  +
call @Sysinit@@GetTls$qqrv  +
add ebx [eax+0B0h] +
push edi  +
push ebx  +
call @Sysinit@@GetTls$qqrv  +
mov ecx [eax+0ACh] +
call ecx  +
add esp 8 +
mov [ebp+var_C] eax +
test eax eax +
jle loc_4C4D42  +
cmp esi ebx +
jbe loc_4C4DE1  +
push esi  +
push edi  +
call @Sysinit@@GetTls$qqrv  +
mov edx [eax+0ACh] +
call edx  +
add esp 8 +
mov [ebp+var_C] eax +
test eax eax +
jge loc_4C4DB5  +
call @Sysinit@@GetTls$qqrv  +
sub esi [eax+0B0h] +
jmp loc_4C4DDD  +
push esi  +
push ebx  +
call sub_4C4C0C  +
add esp 8 +
cmp [ebp+var_C] 0 +
jz loc_4C4DE1  +
call @Sysinit@@GetTls$qqrv  +
add ebx [eax+0B0h] +
call @Sysinit@@GetTls$qqrv  +
sub esi [eax+0B0h] +
jmp loc_4C4DE1  +
cmp esi ebx +
ja loc_4C4D8F  +
cmp esi ebx +
ja loc_4C4D72  +
push edi  +
push ebx  +
call @Sysinit@@GetTls$qqrv  +
mov edx [eax+0ACh] +
call edx  +
add esp 8 +
test eax eax +
jg loc_4C4E06  +
call @Sysinit@@GetTls$qqrv  +
add ebx [eax+0B0h] +
call @Sysinit@@GetTls$qqrv  +
mov ecx ebx +
mov esi edi +
sub ecx [eax+0B0h] +
mov [ebp+var_8] ecx +
jmp loc_4C4E40  +
mov eax [ebp+var_8] +
push eax  +
push esi  +
call sub_4C4C0C  +
add esp 8 +
call @Sysinit@@GetTls$qqrv  +
add esi [eax+0B0h] +
call @Sysinit@@GetTls$qqrv  +
mov edx [eax+0B0h] +
sub [ebp+var_8] edx +
cmp esi [ebp+var_4] +
jnb loc_4C4E4D  +
mov ecx [ebp+var_8] +
cmp ecx [ebp+var_4] +
jnb loc_4C4E1A  +
call @Sysinit@@GetTls$qqrv  +
push dword ptr [eax+0B0h]  +
mov eax ebx +
sub eax [ebp+var_4] +
pop edx  +
mov ecx edx +
xor edx edx +
div  ecx +
mov esi eax +
call @Sysinit@@GetTls$qqrv  +
mov eax [eax+0B0h] +
imul  [ebp+arg_4] +
add eax edi +
sub eax ebx +
push eax  +
call @Sysinit@@GetTls$qqrv  +
pop edx  +
mov eax [eax+0B0h] +
xchg eax edx +
mov ecx edx +
xor edx edx +
div  ecx +
mov [ebp+arg_4] eax +
cmp esi [ebp+arg_4] +
jbe loc_4C4EA9  +
mov eax [ebp+arg_4] +
push eax  +
push ebx  +
call sub_4C4C3C  +
add esp 8 +
mov [ebp+arg_4] esi +
jmp loc_4C4C48  +
push esi  +
push edi  +
call sub_4C4C3C  +
add esp 8 +
mov edi ebx +
jmp loc_4C4C48  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
call @Sysinit@@GetTls$qqrv  +
mov edx [ebp+width] +
mov [eax+0B0h] edx +
test edx edx +
jz loc_4C4EF7  +
call @Sysinit@@GetTls$qqrv  +
mov ecx [ebp+fcmp] +
mov [eax+0ACh] ecx +
mov eax [ebp+nelem] +
push eax  +
mov eax [ebp+base] +
push eax  +
call sub_4C4C3C  +
add esp 8 +
pop ebp  +
retn   +
***
pop ecx  +
pop ecx  +
call __abort  +
retn   +
***
push ebx  +
mov ebx [ebp+arg_0] +
call __lock_exit  +
test ebx ebx +
jnz loc_4C4F50  +
cmp dword_4E8DC4 0 +
jz loc_4C4F43  +
call dword_4E8DC4  +
call __cleanup  +
call off_4E8DC8  +
jmp loc_4C4F57  +
xor eax eax +
mov dword_4E8DC4 eax +
cmp [ebp+arg_4] 0 +
jnz loc_4C4F86  +
test ebx ebx +
jnz loc_4C4F6D  +
call off_4E8DCC  +
call off_4E8DD0  +
call __unlock_exit  +
call __cleanup_handle_locks  +
call __cleanup_stream_locks  +
mov edx [ebp+uExitCode] +
push edx  +
call __terminate  +
pop ecx  +
call __unlock_exit  +
pop ebx  +
pop ebp  +
retn   +
***
mov eax [ebp+uExitCode] +
push eax  +
push 0  +
push 0  +
call sub_4C4F24  +
add esp 0Ch +
pop ebp  +
retn   +
***
mov eax [ebp+uExitCode] +
push eax  +
push 0  +
push 1  +
call sub_4C4F24  +
add esp 0Ch +
pop ebp  +
retn   +
***
push 0  +
call sub_4C4F24  +
add esp 0Ch +
retn   +
***
push 1  +
call sub_4C4F24  +
add esp 0Ch +
retn   +
***
push ebx  +
push esi  +
push edi  +
mov edi [ebp+name] +
push edi  +
call _strlen  +
pop ecx  +
mov esi eax +
test esi esi +
jnz loc_4C4FFA  +
xor eax eax +
jmp loc_4C503C  +
call __lock_env  +
mov ebx dword_4F2C84 +
jmp loc_4C5023  +
push esi  +
push edi  +
mov eax [ebx] +
push eax  +
call __mbsnbicmp  +
add esp 0Ch +
test eax eax +
jnz loc_4C5020  +
mov edx [ebx] +
cmp byte ptr [edx+esi] 3Dh +
jz loc_4C5028  +
add ebx 4 +
cmp dword ptr [ebx] 0 +
jnz loc_4C5007  +
call __unlock_env  +
mov eax [ebx] +
test eax eax +
jz loc_4C503A  +
add esi eax +
inc esi  +
mov eax esi +
jmp loc_4C503C  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
mov eax [ebp+arg_0] +
mov ecx [ebp+arg_4] +
mov edx [eax] +
mov off_4E8E84 edx +
mov eax [ecx] +
mov off_4E8E88 eax +
pop ebp  +
retn   +
***
push 0  +
mov eax [ebp+arg_0] +
push eax  +
call [ebp+arg_4]  +
add esp 8 +
pop ebp  +
retn   +
***
push 0  +
mov eax [ebp+arg_0] +
push eax  +
call [ebp+arg_4]  +
add esp 8 +
pop ebp  +
retn   +
***
mov eax [ebp+arg_0] +
mov edx [ebp+arg_4] +
mov off_4E8DD4 eax +
mov off_4E8DD8 edx +
mov ecx [ebp+arg_8] +
mov eax [ebp+arg_C] +
mov off_4E8DDC ecx +
mov off_4E8DE0 eax +
pop ebp  +
retn   +
***
jz loc_4C5136  +
call off_4E8DD8  +
cmp dword_4F2C70 0 +
jz locret_4C5168  +
mov eax dword_4F2C78 +
push eax  +
call _free  +
pop ecx  +
mov edx dword_4F2C70 +
push edx  +
call _free  +
pop ecx  +
xor ecx ecx +
mov dword_4F2C70 ecx +
retn   +
***
push ebx  +
add esp 0FFFFFFF4h +
mov eax dword_4F2C7C +
test eax eax +
jz locret_4C538C  +
push eax  +
call _free  +
pop ecx  +
xor edx edx +
mov dword_4F2C7C edx +
retn   +
***
push ebx  +
push esi  +
mov eax [ebp+arg_4] +
mov edx [ebp+arg_0] +
mov ecx [eax] +
cmp byte ptr [ecx] 5Ch +
jnz loc_4C53B2  +
cmp byte ptr [ecx+1] 22h +
jnz loc_4C53B2  +
mov ecx [edx] +
mov byte ptr [ecx] 22h +
add dword ptr [eax] 2 +
jmp loc_4C53FB  +
cmp dword_4E8E38 0 +
jz loc_4C53D2  +
mov ecx [eax] +
cmp byte ptr [ecx] 5Ch +
jnz loc_4C53D2  +
cmp byte ptr [ecx+1] 5Ch +
jnz loc_4C53D2  +
mov ecx [edx] +
mov byte ptr [ecx] 5Ch +
add dword ptr [eax] 2 +
jmp loc_4C53FB  +
mov esi [eax] +
mov cl [esi] +
xor ebx ebx +
mov bl cl +
test byte ptr dword_4F2A4D[ebx] 4 +
jz loc_4C53F1  +
cmp byte ptr [esi+1] 0 +
jz loc_4C53F1  +
mov ebx [edx] +
mov [ebx] cl +
inc dword ptr [eax]  +
inc dword ptr [edx]  +
mov ecx [eax] +
mov ebx [edx] +
mov cl [ecx] +
mov [ebx] cl +
inc dword ptr [eax]  +
inc dword ptr [edx]  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
add esp 0FFFFFFF4h +
push ebx  +
push esi  +
push edi  +
lea ebx [ebp+var_4] +
lea esi [ebp+var_8] +
mov eax [ebp+arg_4] +
mov [ebx] eax +
push 0  +
mov edx [ebp+arg_0] +
push edx  +
call [ebp+arg_8]  +
add esp 8 +
jmp loc_4C5429  +
add dword ptr [ebx] 2 +
mov ecx [ebx] +
mov ax [ecx] +
cmp ax 20h +
jz loc_4C5426  +
cmp ax 9 +
jz loc_4C5426  +
mov edx [ebx] +
cmp word ptr [edx] 22h +
jnz loc_4C546A  +
add dword ptr [ebx] 2 +
jmp loc_4C544A  +
add dword ptr [ebx] 2 +
mov ecx [ebx] +
mov ax [ecx] +
cmp ax 22h +
jz loc_4C545A  +
test ax ax +
jnz loc_4C5447  +
mov edx [ebx] +
cmp word ptr [edx] 22h +
jnz loc_4C5480  +
add dword ptr [ebx] 2 +
jmp loc_4C5480  +
add dword ptr [ebx] 2 +
mov ecx [ebx] +
mov ax [ecx] +
cmp ax 20h +
jz loc_4C5480  +
cmp ax 9 +
jz loc_4C5480  +
test ax ax +
jnz loc_4C5467  +
mov edx [ebx] +
push edx  +
call _wcslen  +
pop ecx  +
add eax eax +
add eax 2 +
push eax  +
call _malloc  +
pop ecx  +
mov [esi] eax +
mov dword_4F2C80 eax +
test eax eax +
jnz loc_4C557F  +
push offset aNoSpaceForCo_1  +
call __ErrorExit  +
pop ecx  +
jmp loc_4C557F  +
xor edi edi +
jmp loc_4C54BB  +
add dword ptr [ebx] 2 +
mov eax [ebx] +
mov ax [eax] +
cmp ax 20h +
jz loc_4C54B8  +
cmp ax 9 +
jz loc_4C54B8  +
mov edx [ebx] +
cmp word ptr [edx] 0 +
jz loc_4C558B  +
mov ecx [esi] +
mov [ebp+var_C] ecx +
jmp loc_4C5531  +
cmp ax 22h +
jnz loc_4C5511  +
add dword ptr [ebx] 2 +
jmp loc_4C54F4  +
push ebx  +
push esi  +
call sub_4C55B4  +
add esp 8 +
mov eax [ebx] +
mov ax [eax] +
cmp ax 22h +
jz loc_4C5504  +
test ax ax +
jnz loc_4C54EA  +
mov edx [ebx] +
cmp word ptr [edx] 22h +
jnz loc_4C5531  +
add dword ptr [ebx] 2 +
jmp loc_4C5531  +
mov ecx [ebx] +
mov ax [ecx] +
cmp ax 2Ah +
jz loc_4C5522  +
cmp ax 3Fh +
jnz loc_4C5527  +
mov edi 1 +
push ebx  +
push esi  +
call sub_4C55B4  +
add esp 8 +
mov eax [ebx] +
mov ax [eax] +
cmp ax 20h +
jz loc_4C5547  +
cmp ax 9 +
jz loc_4C5547  +
test ax ax +
jnz loc_4C54DF  +
mov edx [esi] +
mov word ptr [edx] 0 +
add dword ptr [esi] 2 +
test edi edi +
jz loc_4C5568  +
mov ecx [ebp+arg_8] +
push ecx  +
mov eax [ebp+var_C] +
push eax  +
call off_4E8E88  +
add esp 8 +
jmp loc_4C5574  +
push 0  +
mov edx [ebp+var_C] +
push edx  +
call [ebp+arg_8]  +
add esp 8 +
mov ecx [ebx] +
cmp word ptr [ecx] 0 +
jz loc_4C558B  +
add dword ptr [ebx] 2 +
mov eax [ebx] +
cmp word ptr [eax] 0 +
jnz loc_4C54B4  +
mov eax 1 +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
mov eax dword_4F2C80 +
test eax eax +
jz locret_4C55B0  +
push eax  +
call _free  +
pop ecx  +
xor edx edx +
mov dword_4F2C80 edx +
retn   +
***
push ebx  +
mov eax [ebp+arg_4] +
mov edx [ebp+arg_0] +
mov ecx [eax] +
cmp word ptr [ecx] 5Ch +
jnz loc_4C55D9  +
cmp word ptr [ecx+2] 22h +
jnz loc_4C55D9  +
mov ecx [edx] +
mov word ptr [ecx] 22h +
add dword ptr [eax] 4 +
jmp loc_4C5625  +
cmp dword_4E8E38 0 +
jz loc_4C5618  +
mov ecx [eax] +
cmp word ptr [ecx] 5Ch +
jnz loc_4C5618  +
cmp word ptr [ecx+2] 5Ch +
jnz loc_4C5618  +
mov ecx [edx] +
mov word ptr [ecx] 5Ch +
add dword ptr [eax] 4 +
jmp loc_4C5625  +
jmp loc_4C5618  +
mov ecx [eax] +
cmp word ptr [ecx+2] 0 +
jz loc_4C5618  +
mov ecx [eax] +
mov ebx [edx] +
mov cx [ecx] +
mov [ebx] cx +
add dword ptr [eax] 2 +
add dword ptr [edx] 2 +
mov ecx [eax] +
mov ebx [edx] +
mov cx [ecx] +
mov [ebx] cx +
add dword ptr [eax] 2 +
add dword ptr [edx] 2 +
pop ebx  +
pop ebp  +
retn   +
***
call _malloc  +
pop ecx  +
mov ebx eax +
mov lpFilename ebx +
test ebx ebx +
jnz loc_4C564F  +
push offset aOutOfMemoryIn_  +
call __ErrorExit  +
pop ecx  +
push 0FFh  +
mov eax lpFilename +
push eax  +
push 0  +
call GetModuleFileNameA  +
pop ebx  +
retn   +
***
mov eax lpFilename +
push eax  +
call _free  +
pop ecx  +
retn   +
***
mov eax dword_4F2C90 +
push eax  +
call __lock_nt  +
pop ecx  +
retn   +
***
mov eax dword_4F2C90 +
push eax  +
call __unlock_nt  +
pop ecx  +
retn   +
***
mov eax dword_4F2C88 +
test eax eax +
jz loc_4C56A4  +
push eax  +
call _free  +
pop ecx  +
mov eax dword_4F2C84 +
test eax eax +
jz loc_4C56B4  +
push eax  +
call _free  +
pop ecx  +
xor edx edx +
xor ecx ecx +
mov dword_4F2C88 edx +
mov dword_4F2C84 ecx +
retn   +
***
push edi  +
push ebp  +
push ecx  +
cmp dword_4F2C84 0 +
jnz loc_4C5749  +
cmp dword_4F2CA4 0 +
jnz loc_4C56F8  +
call GetEnvironmentStrings  +
mov dword_4F2CA4 eax +
test eax eax +
jnz loc_4C56F8  +
push offset aGetenvironment  +
call __ErrorExit  +
pop ecx  +
xor ebp ebp +
xor esi esi +
mov ebx dword_4F2CA4 +
jmp loc_4C570C  +
lea eax [edi+1] +
inc esi  +
add ebp eax +
add ebx eax +
push ebx  +
call _strlen  +
pop ecx  +
mov edi eax +
test eax eax +
jnz loc_4C5704  +
lea edi [ebp+1] +
push edi  +
call _malloc  +
pop ecx  +
mov ebx eax +
mov dword_4F2C88 ebx +
test ebx ebx +
jnz loc_4C5736  +
xor eax eax +
jmp loc_4C580C  +
push edi  +
mov edx dword_4F2CA4 +
push edx  +
push ebx  +
call _memcpy  +
add esp 0Ch +
jmp loc_4C5769  +
xor esi esi +
mov ebx dword_4F2C84 +
jmp loc_4C5763  +
push eax  +
call _strlen  +
pop ecx  +
test eax eax +
jnz loc_4C575F  +
dec esi  +
inc esi  +
add ebx 4 +
mov eax [ebx] +
test eax eax +
jnz loc_4C5753  +
lea ebx [esi+4] +
push 4  +
mov dword_4F2C8C ebx +
inc ebx  +
push ebx  +
call _calloc  +
add esp 8 +
test eax eax +
mov [esp+4+var_4] eax +
jnz loc_4C578C  +
xor eax eax +
jmp loc_4C580C  +
cmp dword_4F2C84 0 +
jnz loc_4C57BD  +
xor esi esi +
mov ebx dword_4F2C88 +
mov eax [esp+4+var_4] +
mov ebp eax +
jmp loc_4C57AE  +
mov [ebp+0] ebx +
add ebp 4 +
inc esi  +
inc edi  +
add ebx edi +
push ebx  +
call _strlen  +
pop ecx  +
mov edi eax +
test eax eax +
jnz loc_4C57A4  +
jmp loc_4C57EE  +
xor esi esi +
mov ebx dword_4F2C84 +
mov eax [esp+4+var_4] +
mov edi eax +
jmp loc_4C57E8  +
push eax  +
call _strlen  +
pop ecx  +
test eax eax +
jz loc_4C57DD  +
mov eax [ebx] +
mov [edi] eax +
jmp loc_4C57E1  +
dec esi  +
add edi 0FFFFFFFCh +
add edi 4 +
inc esi  +
add ebx 4 +
mov eax [ebx] +
test eax eax +
jnz loc_4C57CC  +
mov eax dword_4F2C84 +
test eax eax +
jz loc_4C57FE  +
push eax  +
call _free  +
pop ecx  +
mov edx [esp+4+var_4] +
mov eax 1 +
mov dword_4F2C84 edx +
pop edx  +
pop ebp  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
call __expandblock  +
test eax eax +
jnz loc_4C5829  +
push offset aCouldNotAlloca  +
call __ErrorExit  +
pop ecx  +
retn   +
***
mov eax dword_4F2C84 +
mov dword_4F2C9C eax +
push offset aCreatingEnviro  +
push offset dword_4F2C90  +
call __create_lock  +
add esp 8 +
retn   +
***
xor eax eax +
mov edx offset dword_4E8F44 +
mov ecx [ebp+arg_0] +
cmp ecx [edx] +
jz loc_4C5865  +
inc eax  +
add edx 4 +
cmp eax 0Ah +
jl loc_4C5855  +
or eax 0FFFFFFFFh +
pop ebp  +
retn   +
***
add esp 0FFFFFFF0h +
push ebx  +
push esi  +
push edi  +
mov ebx [ebp+arg_0] +
mov [ebp+var_10] ebx +
mov eax [ebp+arg_8] +
mov [ebp+var_C] eax +
xor edx edx +
mov [ebp+var_8] edx +
call __thread_data  +
mov esi eax +
test eax eax +
jz loc_4C5894  +
mov eax [esi+28h] +
test eax eax +
jnz loc_4C589E  +
mov eax 1 +
jmp loc_4C5A56  +
xor edi edi +
mov edx [ebx] +
cmp edx 0C0000090h +
jg loc_4C58EC  +
jz loc_4C595C  +
cmp edx 0C0000005h +
jg loc_4C58D6  +
jz loc_4C5990  +
sub edx 80000003h +
jz loc_4C59BA  +
dec edx  +
jz loc_4C59C8  +
jmp loc_4C59D6  +
sub edx 0C000001Dh +
jz loc_4C599E  +
sub edx 71h +
jz loc_4C591A  +
jmp loc_4C59D6  +
add edx 3FFFFF6Fh +
cmp edx 5 +
ja loc_4C59D6  +
jmp ds:off_4C5902[edx*4]  +
mov ebx 2 +
mov [ebp+var_4] 83h +
mov edi 4 +
jmp loc_4C59DD  +
mov ebx 2 +
mov [ebp+var_4] 84h +
mov edi 8 +
jmp loc_4C59DD  +
mov ebx 2 +
mov [ebp+var_4] 85h +
mov edi 10h +
jmp loc_4C59DD  +
mov ebx 2 +
mov [ebp+var_4] 81h +
mov edi 1 +
jmp loc_4C59DD  +
mov ebx 2 +
mov [ebp+var_4] 87h +
mov edi 49h +
jmp loc_4C59DD  +
mov [ebp+var_4] 7Fh +
mov ebx 2 +
jmp loc_4C59DD  +
mov [ebp+var_4] 0Ch +
mov ebx 3 +
jmp loc_4C59DD  +
mov [ebp+var_4] 14h +
mov ebx 1 +
jmp loc_4C59DD  +
mov [ebp+var_4] 16h +
mov ebx 1 +
jmp loc_4C59DD  +
mov [ebp+var_4] 17h +
mov ebx 1 +
jmp loc_4C59DD  +
mov [ebp+var_4] 18h +
mov ebx 1 +
jmp loc_4C59DD  +
mov eax 1 +
jmp loc_4C5A56  +
mov esi [eax+ebx*4] +
cmp esi 1 +
jnz loc_4C59E9  +
xor eax eax +
jmp loc_4C5A56  +
test esi esi +
jnz loc_4C59F4  +
mov eax 1 +
jmp loc_4C5A56  +
xor edx edx +
cmp ebx 1 +
mov [eax+ebx*4] edx +
jz loc_4C5A08  +
cmp ebx 3 +
jz loc_4C5A08  +
cmp ebx 2 +
jnz loc_4C5A40  +
call __clear87  +
push 1F3Fh  +
mov ecx newcw +
push ecx  +
call __control87  +
add esp 8 +
lea eax [ebp+var_10] +
push eax  +
mov edx [ebp+var_4] +
push edx  +
mov ecx dword_4E8F44[ebx*4] +
push ecx  +
call esi  +
mov eax [ebp+arg_8] +
add esp 0Ch +
not edi  +
and [eax+20h] edi +
jmp loc_4C5A53  +
lea edx [ebp+var_10] +
push edx  +
push 0  +
mov ecx dword_4E8F44[ebx*4] +
push ecx  +
call esi  +
add esp 0Ch +
mov eax [ebp+var_8] +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
cmp [ebp+arg_0] 0 +
jnz loc_4C5A70  +
mov eax 2 +
jmp loc_4C5A75  +
mov eax 15h +
push eax  +
call _raise  +
pop ecx  +
mov eax 1 +
pop ebp  +
retn 4  +
***
push ebx  +
push esi  +
push edi  +
cmp byte_4E8F18 0 +
mov ebx [ebp+sig] +
jnz loc_4C5AB7  +
mov dword_4F28A0 offset sub_4C5868 +
push 1  +
push offset HandlerRoutine  +
call SetConsoleCtrlHandler  +
mov byte_4E8F18 1 +
push ebx  +
call sub_4C5848  +
pop ecx  +
mov esi eax +
inc eax  +
jnz loc_4C5AD3  +
call ___errno  +
mov dword ptr [eax] 13h +
or eax 0FFFFFFFFh +
jmp loc_4C5B36  +
cmp ebx 2 +
jz loc_4C5ADD  +
cmp ebx 15h +
jnz loc_4C5AE4  +
mov ebx offset unk_4E8F1C +
jmp loc_4C5B2D  +
call __thread_data  +
mov edi eax +
test eax eax +
jnz loc_4C5AF4  +
or eax 0FFFFFFFFh +
jmp loc_4C5B36  +
mov ebx [edi+28h] +
test ebx ebx +
jnz loc_4C5B2D  +
push 28h  +
call _malloc  +
pop ecx  +
mov ebx eax +
test eax eax +
jnz loc_4C5B19  +
call ___errno  +
mov dword ptr [eax] 8 +
or eax 0FFFFFFFFh +
jmp loc_4C5B36  +
xor edx edx +
mov eax ebx +
xor ecx ecx +
inc edx  +
mov [eax] ecx +
add eax 4 +
cmp edx 0Ah +
jl loc_4C5B1D  +
mov [edi+28h] ebx +
mov eax [ebx+esi*4] +
mov edx [ebp+func] +
mov [ebx+esi*4] edx +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
push ebx  +
mov eax [ebp+uExitCode] +
push eax  +
call ExitProcess  +
pop ebp  +
retn   +
***
retn   +
***
retn   +
***
add esp 0FFFFFFECh +
push ebx  +
push esi  +
push edi  +
cmp [ebp+arg_4] 0 +
jz loc_4C5C0C  +
mov [ebp+var_C] 0FFFFFFFFh +
mov [ebp+var_10] 0FFFFFFFFh +
mov eax 0FFh +
jmp loc_4C5C1C  +
mov [ebp+var_C] 100h +
mov [ebp+var_10] 1 +
xor eax eax +
mov esi eax +
cmp esi [ebp+var_C] +
jz loc_4C5CB3  +
xor eax eax +
mov [ebp+var_8] eax +
mov edx [ebp+arg_0] +
lea ecx [edx+4] +
mov [ebp+var_14] ecx +
jmp loc_4C5C9D  +
mov eax [ebp+var_14] +
cmp [ebp+arg_4] 0 +
mov eax [eax] +
jz loc_4C5C47  +
mov edi [eax+8] +
jmp loc_4C5C49  +
mov edi [eax] +
cmp [ebp+arg_4] 0 +
jz loc_4C5C54  +
mov edx [eax+0Ch] +
jmp loc_4C5C57  +
mov edx [eax+4] +
mov [ebp+var_4] edx +
cmp [ebp+arg_4] 0 +
jnz loc_4C5C7B  +
mov ebx edi +
cmp ebx [ebp+var_4] +
jnb loc_4C5C96  +
mov eax esi +
cmp al [ebx+1] +
jnz loc_4C5C71  +
call dword ptr [ebx+2]  +
add ebx 6 +
cmp ebx [ebp+var_4] +
jb loc_4C5C67  +
jmp loc_4C5C96  +
mov ebx [ebp+var_4] +
add ebx 0FFFFFFFAh +
cmp edi ebx +
ja loc_4C5C96  +
mov eax esi +
cmp al [ebx+1] +
jnz loc_4C5C8F  +
call dword ptr [ebx+2]  +
sub ebx 6 +
cmp edi ebx +
jbe loc_4C5C85  +
inc [ebp+var_8]  +
add [ebp+var_14] 4 +
mov edx [ebp+arg_0] +
mov ecx [edx] +
cmp ecx [ebp+var_8] +
jg loc_4C5C37  +
add esi [ebp+var_10] +
cmp esi [ebp+var_C] +
jnz loc_4C5C27  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
push edi  +
cmp dword_4E8F7C 0 +
jnz loc_4C5D23  +
mov dword_4E8F7C 1 +
push 1  +
push offset dword_4F2CCC  +
call __init_exit_proc  +
add esp 8 +
push 1  +
push offset unk_4F2CAC  +
call __init_exit_proc  +
add esp 8 +
call sub_4C5BE4  +
mov edi eax +
test eax eax +
jz loc_4C5D23  +
push 1  +
push edi  +
call __init_exit_proc  +
add esp 8 +
xor esi esi +
lea ebx [edi+4] +
jmp loc_4C5D1F  +
mov eax [ebx] +
mov edx [eax+14h] +
push edx  +
push 1  +
call dword ptr [eax+18h]  +
add esp 8 +
inc esi  +
add ebx 4 +
cmp esi [edi] +
jl loc_4C5D0D  +
pop edi  +
pop esi  +
pop ebx  +
retn   +
***
mov eax dword_4F2CC0 +
push eax  +
call __lock_nt  +
pop ecx  +
retn   +
***
mov eax dword_4F2CC0 +
push eax  +
call __unlock_nt  +
pop ecx  +
retn   +
***
push offset aCreatingAtexit  +
push offset dword_4F2CC0  +
call __create_lock  +
add esp 8 +
retn   +
***
add esp 0FFFFFFF4h +
push ebx  +
push esi  +
push edi  +
mov esi [ebp+arg_0] +
mov eax [esi+10h] +
and eax 1 +
mov dword_4E8F78 eax +
call __fpreset  +
mov edx [esi+20h] +
push edx  +
mov ecx [esi+1Ch] +
push ecx  +
call __initmatherr_1  +
add esp 8 +
mov eax [esi+28h] +
push eax  +
call __initfmode  +
pop ecx  +
mov edx [esi+44h] +
push edx  +
call __initfileinfo  +
pop ecx  +
mov dword_4F2CCC 1 +
mov dword_4F2CD0 esi +
lea ecx [ebp+var_8] +
mov dword_4F2CB4 ecx +
call __InitDefaultHander  +
call GetEnvironmentStrings  +
mov dword_4F2CA4 eax +
call GetCommandLineA  +
mov dword_4F2CA0 eax +
mov eax [esi+30h] +
push eax  +
mov edx [esi+2Ch] +
push edx  +
call __init_wild_handlers  +
add esp 8 +
mov ecx [esi+40h] +
push ecx  +
mov eax [esi+3Ch] +
push eax  +
mov edx [esi+38h] +
push edx  +
mov ecx [esi+34h] +
push ecx  +
call __init_setargv_handlers  +
add esp 10h +
call __create_shmem  +
mov edi eax +
test eax eax +
jz loc_4C5E3B  +
mov edx [edi] +
mov dword ptr [edi+edx*4+4] 0FFFFFFFFh +
push 0  +
push edi  +
call __init_exit_proc  +
add esp 8 +
xor ecx ecx +
mov [ebp+var_C] ecx +
lea ebx [edi+4] +
jmp loc_4C5E34  +
mov eax [ebx] +
mov edx [eax+14h] +
push edx  +
push 0  +
call dword ptr [eax+18h]  +
add esp 8 +
inc [ebp+var_C]  +
add ebx 4 +
mov ecx [edi] +
cmp ecx [ebp+var_C] +
jg loc_4C5E20  +
push 0  +
push offset dword_4F2CCC  +
call __init_exit_proc  +
add esp 8 +
test byte ptr [esi+10h] 1 +
jz loc_4C5EB7  +
mov ebx dword_4F2CA0 +
jmp loc_4C5E59  +
inc ebx  +
mov al [ebx] +
cmp al 20h +
jz loc_4C5E58  +
cmp al 9 +
jz loc_4C5E58  +
cmp byte ptr [ebx] 22h +
jnz loc_4C5E6D  +
mov dl 22h +
inc ebx  +
jmp loc_4C5E72  +
mov dl 20h +
jmp loc_4C5E72  +
inc ebx  +
mov al [ebx] +
test al al +
jz loc_4C5E80  +
cmp dl al +
jz loc_4C5E80  +
cmp al 9 +
jnz loc_4C5E71  +
cmp byte ptr [ebx] 22h +
jnz loc_4C5E89  +
inc ebx  +
jmp loc_4C5E89  +
inc ebx  +
mov al [ebx] +
test al al +
jz loc_4C5E93  +
cmp al 20h +
jz loc_4C5E88  +
cmp al 9 +
jz loc_4C5E88  +
call sub_4C5EE0  +
push eax  +
push ebx  +
push 0  +
push 0  +
call GetModuleHandleA  +
push eax  +
call dword ptr [esi+18h]  +
add esp 10h +
push eax  +
call _exit  +
pop ecx  +
jmp loc_4C5ED8  +
mov edx dword_4F2C9C +
push edx  +
mov ecx dword_4F2C98 +
push ecx  +
mov eax dword_4F2C94 +
push eax  +
call dword ptr [esi+18h]  +
add esp 0Ch +
push eax  +
call _exit  +
pop ecx  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
add esp 0FFFFFFBCh +
push esp  +
call GetStartupInfoA  +
test [esp+44h+var_18] 1 +
jz loc_4C5EF7  +
movzx eax [esp+44h+var_14] +
jmp loc_4C5EFC  +
mov eax 0Ah +
add esp 44h +
retn   +
***
mov eax [eax+0B8h] +
call @Sysinit@@GetTls$qqrv  +
xor ebx ebx +
mov [esp+0B0h+VersionInformation.dwOSVersionInfoSize] 94h +
lea eax [esp+0B0h+VersionInformation] +
push eax  +
call GetVersionExA  +
cmp [esp+0B0h+VersionInformation.dwPlatformId] 1 +
jnz loc_4C5F3F  +
mov ebx 10000h +
push 1Ch  +
lea eax [esp+0B4h+Buffer] +
push eax  +
lea edx [esp+0B8h+Buffer] +
push edx  +
call VirtualQuery  +
call @Sysinit@@GetTls$qqrv  +
add ebx [esp+0B0h+Buffer.AllocationBase] +
mov [eax+0B4h] ebx +
add esp 0B0h +
pop ebx  +
retn   +
***
retn   +
***
mov eax [ebp+dwTlsIndex] +
mov eax [ebp+dwTlsIndex] +
mov eax [ebp+lpTlsValue] +
pop ebp  +
retn 4  +
***
pop ebp  +
retn 4  +
***
xor eax eax +
retn   +
***
push ebx  +
push esi  +
call __thread_data  +
mov ebx eax +
test eax eax +
jnz loc_4C5FCC  +
xor eax eax +
jmp loc_4C5FEF  +
mov esi [ebp+arg_0] +
add esi ebx +
mov ebx [esi] +
test ebx ebx +
jnz loc_4C5FED  +
mov eax [ebp+size] +
push eax  +
call _malloc  +
pop ecx  +
mov ebx eax +
test eax eax +
jnz loc_4C5FEB  +
xor eax eax +
jmp loc_4C5FEF  +
mov [esi] ebx +
mov eax ebx +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
mov ebx [eax+0B8h] +
test ebx ebx +
jnz loc_4C6016  +
call __thread_data_new  +
mov ebx eax +
call @Sysinit@@GetTls$qqrv  +
mov [eax+0B8h] ebx +
mov eax ebx +
pop ebx  +
retn   +
***
push eax  +
call __lock_nt  +
pop ecx  +
mov ebx dword_4F2CD8 +
test ebx ebx +
jz loc_4C603D  +
mov edx [ebx] +
mov dword_4F2CD8 edx +
jmp loc_4C6058  +
push 5Ch  +
call _malloc  +
pop ecx  +
mov ebx eax +
test eax eax +
jz loc_4C6058  +
push 5Ch  +
push 0  +
push ebx  +
call _memset  +
add esp 0Ch +
test ebx ebx +
jz loc_4C60B0  +
mov dword ptr [ebx+44h] 1 +
xor edx edx +
xor ecx ecx +
mov [ebx+48h] edx +
xor eax eax +
mov [ebx+54h] ecx +
xor edx edx +
mov [ebx+2Ch] eax +
mov [ebx+58h] edx +
cmp dword ptr [ebx+4Ch] 0 +
jnz loc_4C609C  +
mov ecx size +
push ecx  +
call _malloc  +
pop ecx  +
mov [ebx+4Ch] eax +
test eax eax +
jnz loc_4C609C  +
push ebx  +
call _free  +
pop ecx  +
xor ebx ebx +
jmp loc_4C60B0  +
mov eax size +
push eax  +
push 0  +
mov edx [ebx+4Ch] +
push edx  +
call _memset  +
add esp 0Ch +
mov ecx dword_4F2CDC +
push ecx  +
call __unlock_nt  +
pop ecx  +
mov eax ebx +
pop ebx  +
retn   +
***
push ebx  +
mov ebx [ebp+arg_0] +
mov eax dword_4F2CDC +
push eax  +
call __lock_nt  +
pop ecx  +
mov edx dword_4F2CD8 +
mov [ebx] edx +
mov dword_4F2CD8 ebx +
mov ecx dword_4F2CDC +
push ecx  +
call __unlock_nt  +
pop ecx  +
pop ebx  +
pop ebp  +
retn   +
***
push offset aCreatingThread  +
push offset dword_4F2CDC  +
call __create_lock  +
add esp 8 +
retn   +
***
mov esi offset dword_4F2CD8 +
call @Sysinit@@GetTls$qqrv  +
mov ebx [eax+0B8h] +
test ebx ebx +
jz loc_4C61AE  +
push ebx  +
call __thread_data_del  +
pop ecx  +
jmp loc_4C61AE  +
mov ebx eax +
mov eax [ebx+38h] +
test eax eax +
jz loc_4C613F  +
push eax  +
call _free  +
pop ecx  +
mov eax [ebx+1Ch] +
test eax eax +
jz loc_4C614D  +
push eax  +
call _free  +
pop ecx  +
mov eax [ebx+34h] +
test eax eax +
jz loc_4C615B  +
push eax  +
call _free  +
pop ecx  +
mov eax [ebx+40h] +
test eax eax +
jz loc_4C6169  +
push eax  +
call _free  +
pop ecx  +
mov eax [ebx+30h] +
test eax eax +
jz loc_4C6177  +
push eax  +
call _free  +
pop ecx  +
mov eax [ebx+3Ch] +
test eax eax +
jz loc_4C6185  +
push eax  +
call _free  +
pop ecx  +
mov eax [ebx+4Ch] +
test eax eax +
jz loc_4C6193  +
push eax  +
call _free  +
pop ecx  +
mov eax [ebx+28h] +
test eax eax +
jz loc_4C61A1  +
push eax  +
call _free  +
pop ecx  +
mov eax [esi] +
mov ebx [eax] +
push eax  +
call _free  +
pop ecx  +
mov [esi] ebx +
mov eax [esi] +
test eax eax +
jnz loc_4C612F  +
pop esi  +
pop ebx  +
retn   +
***
push offset stru_4F2CE0  +
mov eax [ebp+lpCriticalSection] +
push eax  +
call EnterCriticalSection  +
pop ebp  +
retn   +
***
mov eax [ebp+lpCriticalSection] +
push eax  +
call LeaveCriticalSection  +
pop ebp  +
retn   +
***
add esp 0FFFFFFB0h +
push esi  +
push edi  +
mov esi offset aSemaphoreError +
lea edi [ebp+dest] +
mov eax edi +
mov ecx 4 +
movs   +
movs   +
mov edx [ebp+src] +
push edx  +
lea ecx [ebp+dest] +
push ecx  +
call _strcat  +
add esp 8 +
lea eax [ebp+dest] +
push eax  +
call __ErrorExit  +
pop ecx  +
pop edi  +
pop esi  +
mov esp ebp +
pop ebp  +
retn   +
***
push offset stru_4F2CE0  +
call InitializeCriticalSection  +
mov dword_4F5CE0 1 +
retn   +
***
push ecx  +
push ecx  +
retn   +
***
push edi  +
add esp 0FFFFFFF0h +
push ebx  +
mov ebx [ebp+arg_0] +
lea eax [ebp+SystemTime] +
push eax  +
call GetLocalTime  +
push 0FFFFFFFFh  +
movzx edx [ebp+SystemTime.wSecond] +
push edx  +
movzx ecx [ebp+SystemTime.wMinute] +
push ecx  +
movzx eax [ebp+SystemTime.wHour] +
push eax  +
movzx edx [ebp+SystemTime.wDay] +
dec edx  +
push edx  +
movzx ecx [ebp+SystemTime.wMonth] +
dec ecx  +
push ecx  +
movzx eax [ebp+SystemTime.wYear] +
add eax 0FFFFF894h +
push eax  +
call __totalsec  +
add esp 1Ch +
test ebx ebx +
jz loc_4C6758  +
mov [ebx] eax +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
mov ebp ecx +
jmp eax  +
***
mov eax [ebp+arg_0] +
add esp 0FFFFFFA8h +
push ebx  +
push ebx  +
push ecx  +
push ebx  +
mov edx [ebp+arg_0] +
push ebx  +
push ebx  +
push ebx  +
add esp 0FFFFFFC0h +
mov ecx esp +
push ecx  +
add esp 0FFFFFFB0h +
add esp 0FFFFFFDCh +
push ebx  +
add esp 0FFFFFFECh +
push ebx  +
push esi  +
push edi  +
mov [ebp+var_8] ebx +
mov [ebp+var_C] edi +
mov [ebp+var_10] esi +
call @Sysinit@@GetTls$qqrv  +
cmp dword ptr [eax+10h] 0 +
jnz loc_4C755D  +
push 628h  +
push offset aXx_cpp_15  +
push offset a__cppexception  +
call __assert  +
add esp 0Ch +
call @Sysinit@@GetTls$qqrv  +
mov ebx [eax+10h] +
call @Sysinit@@GetTls$qqrv  +
mov edx [ebx] +
mov [eax+10h] edx +
mov eax [ebx+28h] +
mov [ebp+var_4] eax +
mov esi fs:0 +
test esi esi +
jnz loc_4C759C  +
push 636h  +
push offset aXx_cpp_16  +
push offset aXl  +
call __assert  +
add esp 0Ch +
cmp esi [ebx+28h] +
jz loc_4C75B8  +
push 637h  +
push offset aXx_cpp_17  +
push offset aXdrptrXderradd  +
call __assert  +
add esp 0Ch +
mov eax [ebp+var_4] +
mov ecx [ebp+var_4] +
movzx edx word ptr [eax+10h] +
mov eax [ecx+8] +
mov ecx [ebp+var_4] +
mov dx [eax+edx] +
mov [ecx+10h] dx +
push ebx  +
call sub_4C748B  +
pop ecx  +
mov esi [ebx+0Ch] +
and esi 2 +
test esi esi +
push ebx  +
call dword ptr [ebx+1Ch]  +
pop ecx  +
test esi esi +
jz loc_4C761E  +
mov eax dword_4F5CF0 +
cmp dword ptr [eax] 2 +
jnz loc_4C7601  +
push dword ptr [ebp+4]  +
push 1  +
push 6  +
call ___raiseDebuggerException  +
add esp 0Ch +
mov edx [ebp+var_4] +
mov ecx [edx+0Ch] +
mov [ebp+var_14] ecx +
mov ebx [ebp+var_8] +
mov edi [ebp+var_C] +
mov esi [ebp+var_10] +
mov edx [ebp+var_14] +
mov esp ebp +
pop ebp  +
pop eax  +
mov esp edx +
push eax  +
retn   +
mov eax dword_4F5CF0 +
cmp dword ptr [eax] 2 +
jnz loc_4C7637  +
push dword ptr [ebp+4]  +
push 1  +
push 6  +
call ___raiseDebuggerException  +
add esp 0Ch +
mov ebx [ebp+var_8] +
mov edi [ebp+var_C] +
mov esi [ebp+var_10] +
mov eax ebp +
mov eax [ebp+4] +
mov edx [ebp+var_4] +
mov edx [edx+0Ch] +
mov ebp [ebp+0] +
mov esp edx +
push eax  +
retn   +
***
push ebx  +
add esp 0FFFFFFF0h +
add esp 0FFFFFFF0h +
push [ebp+arg_4]  +
push ebx  +
add esp 0FFFFFF00h +
push ebx  +
add esp 0FFFFFEA0h +
add esp 0FFFFFFDCh +
push ebx  +
add esp 0FFFFFFE8h +
add esp 0FFFFFFF8h +
push ebx  +
add esp 0FFFFFFE4h +
push ebx  +
push offset @$xt$r19Sysutils@EDivByZero  +
push 0  +
push 1  +
call @__GetTypeInfo$qpvt1t1  +
add esp 0Ch +
mov eax [eax+4] +
mov [ebx+18h] eax +
push offset @$xt$r20Sysutils@ERangeError  +
push 0  +
push 1  +
call @__GetTypeInfo$qpvt1t1  +
add esp 0Ch +
mov edx [eax+4] +
mov [ebx+20h] edx +
push offset @$xt$r21Sysutils@EIntOverflow  +
push 0  +
push 1  +
call @__GetTypeInfo$qpvt1t1  +
add esp 0Ch +
mov ecx [eax+4] +
mov [ebx+28h] ecx +
push offset dword_4C99C4  +
push 0  +
push 1  +
call @__GetTypeInfo$qpvt1t1  +
add esp 0Ch +
mov eax [eax+4] +
mov [ebx+30h] eax +
push offset @$xt$r20Sysutils@EZeroDivide  +
push 0  +
push 1  +
call @__GetTypeInfo$qpvt1t1  +
add esp 0Ch +
mov edx [eax+4] +
mov [ebx+38h] edx +
push offset @$xt$r18Sysutils@EOverflow  +
push 0  +
push 1  +
call @__GetTypeInfo$qpvt1t1  +
add esp 0Ch +
mov ecx [eax+4] +
mov [ebx+40h] ecx +
push offset @$xt$r19Sysutils@EUnderflow  +
push 0  +
push 1  +
call @__GetTypeInfo$qpvt1t1  +
add esp 0Ch +
mov eax [eax+4] +
mov [ebx+48h] eax +
push offset @$xt$r25Sysutils@EAccessViolation  +
push 0  +
push 1  +
call @__GetTypeInfo$qpvt1t1  +
add esp 0Ch +
mov edx [eax+4] +
mov [ebx+58h] edx +
push offset @$xt$r19Sysutils@EPrivilege  +
push 0  +
push 1  +
call @__GetTypeInfo$qpvt1t1  +
add esp 0Ch +
mov ecx [eax+4] +
mov [ebx+60h] ecx +
push offset @$xt$r18Sysutils@EControlC  +
push 0  +
push 1  +
call @__GetTypeInfo$qpvt1t1  +
add esp 0Ch +
mov eax [eax+4] +
mov [ebx+68h] eax +
push offset @$xt$r23Sysutils@EStackOverflow  +
push 0  +
push 1  +
call @__GetTypeInfo$qpvt1t1  +
add esp 0Ch +
mov edx [eax+4] +
mov [ebx+70h] edx +
pop ebx  +
retn   +
***
add esp 0FFFFFFD0h +
push ebx  +
mov [ebp+var_10] dl +
test dl dl +
jle loc_4C8E0B  +
call __ClassCreate  +
mov [ebp+var_4] ecx +
mov ebx edx +
mov [ebp+var_8] eax +
mov eax offset stru_4E9484 +
call @__InitExceptBlockLDTC  +
mov [ebp+var_14] 1 +
lea edx [ebp+var_4] +
lea eax [ebp+var_4] +
call @System@AnsiString@$bctr$qqrrx17System@AnsiString  +
inc [ebp+var_14]  +
lea edx [ebp+var_4] +
mov [ebp+var_20] 8 +
mov [ebp+var_20] 14h +
mov [ebp+var_20] 20h +
lea eax [ebp+var_C] +
call @System@AnsiString@$bctr$qqrrx17System@AnsiString  +
inc [ebp+var_14]  +
mov ecx [eax] +
xor edx edx +
mov eax [ebp+var_8] +
call @Sysutils@EExternal@$bctr$qqrx17System@AnsiString_3  +
add [ebp+var_14] 5 +
dec [ebp+var_14]  +
lea eax [ebp+var_C] +
mov edx 2 +
call sub_4CA490  +
mov [ebp+var_20] 14h +
dec [ebp+var_14]  +
lea eax [ebp+var_4] +
mov edx 2 +
call sub_4CA490  +
mov ecx [ebp+var_30] +
mov fs:0 ecx +
mov eax [ebp+var_8] +
test bl bl +
jz loc_4C8E9D  +
call __AfterConstruction  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
add esp 0FFFFFFD0h +
push ebx  +
mov [ebp+var_10] dl +
test dl dl +
jle loc_4C8EB7  +
call __ClassCreate  +
mov [ebp+var_4] ecx +
mov ebx edx +
mov [ebp+var_8] eax +
mov eax offset stru_4E94EC +
call @__InitExceptBlockLDTC  +
mov [ebp+var_14] 1 +
lea edx [ebp+var_4] +
lea eax [ebp+var_4] +
call @System@AnsiString@$bctr$qqrrx17System@AnsiString  +
inc [ebp+var_14]  +
lea edx [ebp+var_4] +
mov [ebp+var_20] 8 +
mov [ebp+var_20] 14h +
mov [ebp+var_20] 20h +
lea eax [ebp+var_C] +
call @System@AnsiString@$bctr$qqrrx17System@AnsiString  +
inc [ebp+var_14]  +
mov ecx [eax] +
xor edx edx +
mov eax [ebp+var_8] +
call @Sysutils@EExternal@$bctr$qqrx17System@AnsiString_3  +
add [ebp+var_14] 5 +
dec [ebp+var_14]  +
lea eax [ebp+var_C] +
mov edx 2 +
call sub_4CA490  +
mov [ebp+var_20] 14h +
dec [ebp+var_14]  +
lea eax [ebp+var_4] +
mov edx 2 +
call sub_4CA490  +
mov ecx [ebp+var_30] +
mov fs:0 ecx +
mov eax [ebp+var_8] +
test bl bl +
jz loc_4C8F49  +
call __AfterConstruction  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
add esp 0FFFFFFD0h +
push ebx  +
mov [ebp+var_10] dl +
test dl dl +
jle loc_4C8F63  +
call __ClassCreate  +
mov [ebp+var_4] ecx +
mov ebx edx +
mov [ebp+var_8] eax +
mov eax offset stru_4E9554 +
call @__InitExceptBlockLDTC  +
mov [ebp+var_14] 1 +
lea edx [ebp+var_4] +
lea eax [ebp+var_4] +
call @System@AnsiString@$bctr$qqrrx17System@AnsiString  +
inc [ebp+var_14]  +
lea edx [ebp+var_4] +
mov [ebp+var_20] 8 +
mov [ebp+var_20] 14h +
mov [ebp+var_20] 20h +
lea eax [ebp+var_C] +
call @System@AnsiString@$bctr$qqrrx17System@AnsiString  +
inc [ebp+var_14]  +
mov ecx [eax] +
xor edx edx +
mov eax [ebp+var_8] +
call @Sysutils@EExternal@$bctr$qqrx17System@AnsiString_3  +
add [ebp+var_14] 5 +
dec [ebp+var_14]  +
lea eax [ebp+var_C] +
mov edx 2 +
call sub_4CA490  +
mov [ebp+var_20] 14h +
dec [ebp+var_14]  +
lea eax [ebp+var_4] +
mov edx 2 +
call sub_4CA490  +
mov ecx [ebp+var_30] +
mov fs:0 ecx +
mov eax [ebp+var_8] +
test bl bl +
jz loc_4C8FF5  +
call __AfterConstruction  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
add esp 0FFFFFFD0h +
push ebx  +
mov [ebp+var_10] dl +
test dl dl +
jle loc_4C900F  +
call __ClassCreate  +
mov [ebp+var_4] ecx +
mov ebx edx +
mov [ebp+var_8] eax +
mov eax offset stru_4E95BC +
call @__InitExceptBlockLDTC  +
mov [ebp+var_14] 1 +
lea edx [ebp+var_4] +
lea eax [ebp+var_4] +
call @System@AnsiString@$bctr$qqrrx17System@AnsiString  +
inc [ebp+var_14]  +
lea edx [ebp+var_4] +
mov [ebp+var_20] 8 +
mov [ebp+var_20] 14h +
mov [ebp+var_20] 20h +
lea eax [ebp+var_C] +
call @System@AnsiString@$bctr$qqrrx17System@AnsiString  +
inc [ebp+var_14]  +
mov ecx [eax] +
xor edx edx +
mov eax [ebp+var_8] +
call @Sysutils@EExternal@$bctr$qqrx17System@AnsiString_4  +
add [ebp+var_14] 5 +
dec [ebp+var_14]  +
lea eax [ebp+var_C] +
mov edx 2 +
call sub_4CA490  +
mov [ebp+var_20] 14h +
dec [ebp+var_14]  +
lea eax [ebp+var_4] +
mov edx 2 +
call sub_4CA490  +
mov ecx [ebp+var_30] +
mov fs:0 ecx +
mov eax [ebp+var_8] +
test bl bl +
jz loc_4C90A1  +
call __AfterConstruction  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
add esp 0FFFFFFD0h +
push ebx  +
mov [ebp+var_10] dl +
test dl dl +
jle loc_4C90BB  +
call __ClassCreate  +
mov [ebp+var_4] ecx +
mov ebx edx +
mov [ebp+var_8] eax +
mov eax offset stru_4E9624 +
call @__InitExceptBlockLDTC  +
mov [ebp+var_14] 1 +
lea edx [ebp+var_4] +
lea eax [ebp+var_4] +
call @System@AnsiString@$bctr$qqrrx17System@AnsiString  +
inc [ebp+var_14]  +
lea edx [ebp+var_4] +
mov [ebp+var_20] 8 +
mov [ebp+var_20] 14h +
mov [ebp+var_20] 20h +
lea eax [ebp+var_C] +
call @System@AnsiString@$bctr$qqrrx17System@AnsiString  +
inc [ebp+var_14]  +
mov ecx [eax] +
xor edx edx +
mov eax [ebp+var_8] +
call @Sysutils@EExternal@$bctr$qqrx17System@AnsiString_4  +
add [ebp+var_14] 5 +
dec [ebp+var_14]  +
lea eax [ebp+var_C] +
mov edx 2 +
call sub_4CA490  +
mov [ebp+var_20] 14h +
dec [ebp+var_14]  +
lea eax [ebp+var_4] +
mov edx 2 +
call sub_4CA490  +
mov ecx [ebp+var_30] +
mov fs:0 ecx +
mov eax [ebp+var_8] +
test bl bl +
jz loc_4C914D  +
call __AfterConstruction  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
add esp 0FFFFFFD0h +
push ebx  +
mov [ebp+var_10] dl +
test dl dl +
jle loc_4C9167  +
call __ClassCreate  +
mov [ebp+var_4] ecx +
mov ebx edx +
mov [ebp+var_8] eax +
mov eax offset stru_4E968C +
call @__InitExceptBlockLDTC  +
mov [ebp+var_14] 1 +
lea edx [ebp+var_4] +
lea eax [ebp+var_4] +
call @System@AnsiString@$bctr$qqrrx17System@AnsiString  +
inc [ebp+var_14]  +
lea edx [ebp+var_4] +
mov [ebp+var_20] 8 +
mov [ebp+var_20] 14h +
mov [ebp+var_20] 20h +
lea eax [ebp+var_C] +
call @System@AnsiString@$bctr$qqrrx17System@AnsiString  +
inc [ebp+var_14]  +
mov ecx [eax] +
xor edx edx +
mov eax [ebp+var_8] +
call @Sysutils@EExternal@$bctr$qqrx17System@AnsiString_4  +
add [ebp+var_14] 5 +
dec [ebp+var_14]  +
lea eax [ebp+var_C] +
mov edx 2 +
call sub_4CA490  +
mov [ebp+var_20] 14h +
dec [ebp+var_14]  +
lea eax [ebp+var_4] +
mov edx 2 +
call sub_4CA490  +
mov ecx [ebp+var_30] +
mov fs:0 ecx +
mov eax [ebp+var_8] +
test bl bl +
jz loc_4C91F9  +
call __AfterConstruction  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
add esp 0FFFFFFD0h +
push ebx  +
mov [ebp+var_10] dl +
test dl dl +
jle loc_4C9213  +
call __ClassCreate  +
mov [ebp+var_4] ecx +
mov ebx edx +
mov [ebp+var_8] eax +
mov eax offset stru_4E96F4 +
call @__InitExceptBlockLDTC  +
mov [ebp+var_14] 1 +
lea edx [ebp+var_4] +
lea eax [ebp+var_4] +
call @System@AnsiString@$bctr$qqrrx17System@AnsiString  +
inc [ebp+var_14]  +
lea edx [ebp+var_4] +
mov [ebp+var_20] 8 +
mov [ebp+var_20] 14h +
mov [ebp+var_20] 20h +
lea eax [ebp+var_C] +
call @System@AnsiString@$bctr$qqrrx17System@AnsiString  +
inc [ebp+var_14]  +
mov ecx [eax] +
xor edx edx +
mov eax [ebp+var_8] +
call @Sysutils@EExternal@$bctr$qqrx17System@AnsiString_4  +
add [ebp+var_14] 5 +
dec [ebp+var_14]  +
lea eax [ebp+var_C] +
mov edx 2 +
call sub_4CA490  +
mov [ebp+var_20] 14h +
dec [ebp+var_14]  +
lea eax [ebp+var_4] +
mov edx 2 +
call sub_4CA490  +
mov ecx [ebp+var_30] +
mov fs:0 ecx +
mov eax [ebp+var_8] +
test bl bl +
jz loc_4C92A5  +
call __AfterConstruction  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
add esp 0FFFFFFD0h +
push ebx  +
mov [ebp+var_10] dl +
test dl dl +
jle loc_4C92BF  +
call __ClassCreate  +
mov [ebp+var_4] ecx +
mov ebx edx +
mov [ebp+var_8] eax +
mov eax offset stru_4E975C +
call @__InitExceptBlockLDTC  +
mov [ebp+var_14] 1 +
lea edx [ebp+var_4] +
lea eax [ebp+var_4] +
call @System@AnsiString@$bctr$qqrrx17System@AnsiString  +
inc [ebp+var_14]  +
lea edx [ebp+var_4] +
mov [ebp+var_20] 8 +
mov [ebp+var_20] 14h +
mov [ebp+var_20] 20h +
lea eax [ebp+var_C] +
call @System@AnsiString@$bctr$qqrrx17System@AnsiString  +
inc [ebp+var_14]  +
mov ecx [eax] +
xor edx edx +
mov eax [ebp+var_8] +
call @Sysutils@EExternal@$bctr$qqrx17System@AnsiString_5  +
add [ebp+var_14] 4 +
dec [ebp+var_14]  +
lea eax [ebp+var_C] +
mov edx 2 +
call sub_4CA490  +
mov [ebp+var_20] 14h +
dec [ebp+var_14]  +
lea eax [ebp+var_4] +
mov edx 2 +
call sub_4CA490  +
mov ecx [ebp+var_30] +
mov fs:0 ecx +
mov eax [ebp+var_8] +
test bl bl +
jz loc_4C9351  +
call __AfterConstruction  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
add esp 0FFFFFFD0h +
push ebx  +
mov [ebp+var_10] dl +
test dl dl +
jle loc_4C936B  +
call __ClassCreate  +
mov [ebp+var_4] ecx +
mov ebx edx +
mov [ebp+var_8] eax +
mov eax offset stru_4E97C4 +
call @__InitExceptBlockLDTC  +
mov [ebp+var_14] 1 +
lea edx [ebp+var_4] +
lea eax [ebp+var_4] +
call @System@AnsiString@$bctr$qqrrx17System@AnsiString  +
inc [ebp+var_14]  +
lea edx [ebp+var_4] +
mov [ebp+var_20] 8 +
mov [ebp+var_20] 14h +
mov [ebp+var_20] 20h +
lea eax [ebp+var_C] +
call @System@AnsiString@$bctr$qqrrx17System@AnsiString  +
inc [ebp+var_14]  +
mov ecx [eax] +
xor edx edx +
mov eax [ebp+var_8] +
call @Sysutils@EExternal@$bctr$qqrx17System@AnsiString_5  +
add [ebp+var_14] 4 +
dec [ebp+var_14]  +
lea eax [ebp+var_C] +
mov edx 2 +
call sub_4CA490  +
mov [ebp+var_20] 14h +
dec [ebp+var_14]  +
lea eax [ebp+var_4] +
mov edx 2 +
call sub_4CA490  +
mov ecx [ebp+var_30] +
mov fs:0 ecx +
mov eax [ebp+var_8] +
test bl bl +
jz loc_4C93FD  +
call __AfterConstruction  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
add esp 0FFFFFFD0h +
push ebx  +
mov [ebp+var_10] dl +
test dl dl +
jle loc_4C9417  +
call __ClassCreate  +
mov [ebp+var_4] ecx +
mov ebx edx +
mov [ebp+var_8] eax +
mov eax offset stru_4E982C +
call @__InitExceptBlockLDTC  +
mov [ebp+var_14] 1 +
lea edx [ebp+var_4] +
lea eax [ebp+var_4] +
call @System@AnsiString@$bctr$qqrrx17System@AnsiString  +
inc [ebp+var_14]  +
lea edx [ebp+var_4] +
mov [ebp+var_20] 8 +
mov [ebp+var_20] 14h +
mov [ebp+var_20] 20h +
lea eax [ebp+var_C] +
call @System@AnsiString@$bctr$qqrrx17System@AnsiString  +
inc [ebp+var_14]  +
mov ecx [eax] +
xor edx edx +
mov eax [ebp+var_8] +
call @Sysutils@EExternal@$bctr$qqrx17System@AnsiString_5  +
add [ebp+var_14] 4 +
dec [ebp+var_14]  +
lea eax [ebp+var_C] +
mov edx 2 +
call sub_4CA490  +
mov [ebp+var_20] 14h +
dec [ebp+var_14]  +
lea eax [ebp+var_4] +
mov edx 2 +
call sub_4CA490  +
mov ecx [ebp+var_30] +
mov fs:0 ecx +
mov eax [ebp+var_8] +
test bl bl +
jz loc_4C94A9  +
call __AfterConstruction  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
add esp 0FFFFFFD0h +
push ebx  +
mov [ebp+var_10] dl +
test dl dl +
jle loc_4C94C3  +
call __ClassCreate  +
mov [ebp+var_4] ecx +
mov ebx edx +
mov [ebp+var_8] eax +
mov eax offset stru_4E9894 +
call @__InitExceptBlockLDTC  +
mov [ebp+var_14] 1 +
lea edx [ebp+var_4] +
lea eax [ebp+var_4] +
call @System@AnsiString@$bctr$qqrrx17System@AnsiString  +
inc [ebp+var_14]  +
lea edx [ebp+var_4] +
mov [ebp+var_20] 8 +
mov [ebp+var_20] 14h +
mov [ebp+var_20] 20h +
lea eax [ebp+var_C] +
call @System@AnsiString@$bctr$qqrrx17System@AnsiString  +
inc [ebp+var_14]  +
mov ecx [eax] +
xor edx edx +
mov eax [ebp+var_8] +
call @Sysutils@EExternal@$bctr$qqrx17System@AnsiString_5  +
add [ebp+var_14] 4 +
dec [ebp+var_14]  +
lea eax [ebp+var_C] +
mov edx 2 +
call sub_4CA490  +
mov [ebp+var_20] 14h +
dec [ebp+var_14]  +
lea eax [ebp+var_4] +
mov edx 2 +
call sub_4CA490  +
mov ecx [ebp+var_30] +
mov fs:0 ecx +
mov eax [ebp+var_8] +
test bl bl +
jz loc_4C9555  +
call __AfterConstruction  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
add esp 0FFFFFFD0h +
push ebx  +
mov [ebp+var_10] dl +
test dl dl +
jle loc_4C956F  +
call __ClassCreate  +
mov [ebp+var_4] ecx +
mov ebx edx +
mov [ebp+var_8] eax +
mov eax offset stru_4E98FC +
call @__InitExceptBlockLDTC  +
mov [ebp+var_14] 1 +
lea edx [ebp+var_4] +
lea eax [ebp+var_4] +
call @System@AnsiString@$bctr$qqrrx17System@AnsiString  +
inc [ebp+var_14]  +
lea edx [ebp+var_4] +
mov [ebp+var_20] 8 +
mov [ebp+var_20] 14h +
mov [ebp+var_20] 20h +
lea eax [ebp+var_C] +
call @System@AnsiString@$bctr$qqrrx17System@AnsiString  +
inc [ebp+var_14]  +
mov ecx [eax] +
xor edx edx +
mov eax [ebp+var_8] +
call @Sysutils@EExternal@$bctr$qqrx17System@AnsiString_5  +
add [ebp+var_14] 4 +
dec [ebp+var_14]  +
lea eax [ebp+var_C] +
mov edx 2 +
call sub_4CA490  +
mov [ebp+var_20] 14h +
dec [ebp+var_14]  +
lea eax [ebp+var_4] +
mov edx 2 +
call sub_4CA490  +
mov ecx [ebp+var_30] +
mov fs:0 ecx +
mov eax [ebp+var_8] +
test bl bl +
jz loc_4C9601  +
call __AfterConstruction  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
add esp 0FFFFFFD0h +
push ebx  +
mov [ebp+var_10] dl +
test dl dl +
jle loc_4C961B  +
call __ClassCreate  +
mov [ebp+var_4] ecx +
mov ebx edx +
mov [ebp+var_8] eax +
mov eax offset stru_4E9964 +
call @__InitExceptBlockLDTC  +
mov [ebp+var_14] 1 +
lea edx [ebp+var_4] +
lea eax [ebp+var_4] +
call @System@AnsiString@$bctr$qqrrx17System@AnsiString  +
inc [ebp+var_14]  +
lea edx [ebp+var_4] +
mov [ebp+var_20] 8 +
mov [ebp+var_20] 14h +
mov [ebp+var_20] 20h +
lea eax [ebp+var_C] +
call @System@AnsiString@$bctr$qqrrx17System@AnsiString  +
inc [ebp+var_14]  +
mov ecx [eax] +
xor edx edx +
mov eax [ebp+var_8] +
call @Sysutils@EExternal@$bctr$qqrx17System@AnsiString_5  +
add [ebp+var_14] 4 +
dec [ebp+var_14]  +
lea eax [ebp+var_C] +
mov edx 2 +
call sub_4CA490  +
mov [ebp+var_20] 14h +
dec [ebp+var_14]  +
lea eax [ebp+var_4] +
mov edx 2 +
call sub_4CA490  +
mov ecx [ebp+var_30] +
mov fs:0 ecx +
mov eax [ebp+var_8] +
test bl bl +
jz loc_4C96AD  +
call __AfterConstruction  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
add esp 0FFFFFFD0h +
push ebx  +
mov [ebp+var_10] dl +
test dl dl +
jle loc_4C96C7  +
call __ClassCreate  +
mov [ebp+var_4] ecx +
mov ebx edx +
mov [ebp+var_8] eax +
mov eax offset stru_4E99CC +
call @__InitExceptBlockLDTC  +
mov [ebp+var_14] 1 +
lea edx [ebp+var_4] +
lea eax [ebp+var_4] +
call @System@AnsiString@$bctr$qqrrx17System@AnsiString  +
inc [ebp+var_14]  +
lea edx [ebp+var_4] +
mov [ebp+var_20] 8 +
mov [ebp+var_20] 14h +
mov [ebp+var_20] 20h +
lea eax [ebp+var_C] +
call @System@AnsiString@$bctr$qqrrx17System@AnsiString  +
inc [ebp+var_14]  +
mov ecx [eax] +
xor edx edx +
mov eax [ebp+var_8] +
call sub_4AC17C  +
add [ebp+var_14] 3 +
dec [ebp+var_14]  +
lea eax [ebp+var_C] +
mov edx 2 +
call sub_4CA490  +
mov [ebp+var_20] 14h +
dec [ebp+var_14]  +
lea eax [ebp+var_4] +
mov edx 2 +
call sub_4CA490  +
mov ecx [ebp+var_30] +
mov fs:0 ecx +
mov eax [ebp+var_8] +
test bl bl +
jz loc_4C9759  +
call __AfterConstruction  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
add esp 0FFFFFFD8h +
add esp 0FFFFFFD8h +
add esp 0FFFFFFD8h +
add esp 0FFFFFFD8h +
add esp 0FFFFFFD8h +
add esp 0FFFFFFD8h +
add esp 0FFFFFFD8h +
add esp 0FFFFFFD8h +
add esp 0FFFFFFD8h +
add esp 0FFFFFFD8h +
add esp 0FFFFFFD8h +
add esp 0FFFFFFD8h +
add esp 0FFFFFFD8h +
add esp 0FFFFFFD8h +
add esp 0FFFFFFD8h +
push ebx  +
mov [ebp+var_4] eax +
mov eax offset stru_4EA59C +
call @__InitExceptBlockLDTC  +
mov [ebp+var_18] 8 +
xor ecx ecx +
mov eax [ebp+var_4] +
mov [eax] ecx +
call unknown_libname_545  +
mov edx [ebp+var_28] +
mov fs:0 edx +
mov eax [ebp+var_4] +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
add esp 0FFFFFFD8h +
push ebx  +
mov [ebp+var_4] eax +
mov eax offset stru_4EA5C0 +
call @__InitExceptBlockLDTC  +
mov [ebp+var_18] 8 +
mov edx [edx] +
xor ecx ecx +
mov eax [ebp+var_4] +
mov [eax] ecx +
call unknown_libname_542  +
mov edx [ebp+var_28] +
mov fs:0 edx +
mov eax [ebp+var_4] +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
push ecx  +
push ebx  +
push esi  +
mov esi edx +
mov [ebp+handle] eax +
cmp [ebp+handle] 0 +
jz loc_4CA4BA  +
mov eax [ebp+handle] +
call unknown_libname_540  +
test esi 1 +
jz loc_4CA4BA  +
push [ebp+handle]  +
call __rtl_close  +
pop ecx  +
pop esi  +
pop ebx  +
pop ecx  +
pop ebp  +
retn   +
***
push ebx  +
add esp 0FFFFFFC8h +
push ebx  +
mov [ebp+var_8] ecx +
mov [ebp+var_34] edx +
mov [ebp+var_30] eax +
mov eax offset stru_4EA614 +
call @__InitExceptBlockLDTC  +
mov [ebp+var_1C] 8 +
xor edx edx +
mov [ebp+var_4] edx +
inc [ebp+var_10]  +
mov [ebp+var_1C] 14h +
lea ecx [ebp+var_4] +
mov [ebp+var_38] ecx +
mov edx [ebp+var_30] +
mov edx [edx] +
mov eax [ebp+var_38] +
mov ecx [ebp+var_34] +
mov ecx [ecx] +
call @System@@LStrCat3$qqrv  +
mov [ebp+var_1C] 20h +
lea edx [ebp+var_4] +
mov eax [ebp+var_8] +
call sub_4CA4C0  +
mov eax [ebp+var_8] +
mov [ebp+var_1C] 2Ch +
push eax  +
dec [ebp+var_10]  +
lea eax [ebp+var_4] +
mov edx 2 +
call sub_4CA490  +
pop eax  +
mov [ebp+var_1C] 20h +
inc [ebp+var_10]  +
mov edx [ebp+var_2C] +
mov fs:0 edx +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
***
push ebx  +
push ebx  +
add esp 0FFFFFFF8h +
push ebx  +
mov [ebp+var_8] edx +
mov [ebp+var_4] eax +
mov eax [ebp+var_4] +
mov edx [ebp+var_8] +
call @System@@LStrSetLength$qqrv  +
mov eax [ebp+var_4] +
pop ebx  +
pop ecx  +
pop ecx  +
pop ebp  +
retn   +
***
push ebx  +
cmp byte_4CC044 0 +
setnz al  +
and eax 1 +
push eax  +
push dword_4CC093  +
cmp byte_4CC07C 0 +
setnz dl  +
and edx 1 +
push edx  +
cmp byte_4CC07D 0 +
setnz cl  +
and ecx 1 +
push ecx  +
call sub_401530  +
add esp 10h +
pop ebp  +
retn   +
***
call sub_4015CC  +
pop ebp  +
retn   +
***
add esp 0FFFFFFD0h +
mov eax offset stru_4EA68C +
call @__InitExceptBlockLDTC  +
mov [ebp+var_20] 8 +
mov edx offset aFalse_2 +
lea eax [ebp+var_4] +
call sub_4CA41C  +
inc [ebp+var_14]  +
lea edx [ebp+var_4] +
mov eax off_4EAA88 +
call sub_4CA4C0  +
dec [ebp+var_14]  +
lea eax [ebp+var_4] +
mov edx 2 +
call sub_4CA490  +
mov [ebp+var_20] 14h +
mov edx offset aTrue_2 +
lea eax [ebp+var_8] +
call sub_4CA41C  +
inc [ebp+var_14]  +
lea edx [ebp+var_8] +
mov eax off_4EAA88 +
add eax 4 +
call sub_4CA4C0  +
dec [ebp+var_14]  +
lea eax [ebp+var_8] +
mov edx 2 +
call sub_4CA490  +
mov [ebp+var_20] 20h +
mov edx offset asc_4EA657 +
lea eax [ebp+var_C] +
call sub_4CA41C  +
inc [ebp+var_14]  +
lea edx [ebp+var_C] +
mov eax off_4EA830 +
call sub_4CA4C0  +
dec [ebp+var_14]  +
lea eax [ebp+var_C] +
mov edx 2 +
call sub_4CA490  +
mov ecx [ebp+var_30] +
mov large fs:0 ecx +
mov esp ebp +
pop ebp  +
retn   +
***
call dword ptr [eax-0Ch]  +
call dword ptr [edx-1Ch]  +
test dl dl +
jg loc_4CA722  +
retn   +
push eax  +
push edx  +
mov edx [eax] +
call dword ptr [edx-18h]  +
pop edx  +
pop eax  +
retn   +
***
sub esp 8 +
fld  tbyte ptr [esp+0Ch] +
fistp  qword ptr [esp] +
pop eax  +
pop edx  +
retn   +
***
jmp ds:GetOpenFileNameA  +
***
jmp ds:GetSaveFileNameA  +
***
jmp ds:PrintDlgA  +
***
