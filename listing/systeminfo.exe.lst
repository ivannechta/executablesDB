call __EH_prolog3_catch  +
xor esi esi +
mov [ebp-14h] esi +
xor eax eax +
mov [ebp+1Eh] ax +
lea eax [ebp-14h] +
push eax  +
call sub_10095F3  +
mov [ebp-1Ch] eax +
mov [ebp-4] esi +
push esi  +
push esi  +
mov ecx [ebp-14h] +
dec ecx  +
neg ecx  +
sbb ecx ecx +
not ecx  +
mov ebx offset aMmDdYyyy +
and ecx ebx +
push ecx  +
lea ecx [ebp+10h] +
push ecx  +
push esi  +
push eax  +
mov edi ds:GetDateFormatW +
call edi  +
mov [ebp-18h] eax +
inc eax  +
push eax  +
mov ecx [ebp+8] +
call ?GetBufferSetLength@CHString@@QAEPAGH@Z  +
push dword ptr [ebp-18h]  +
push eax  +
mov eax [ebp-14h] +
dec eax  +
neg eax  +
sbb eax eax +
not eax  +
and eax ebx +
push eax  +
lea eax [ebp+10h] +
push eax  +
push esi  +
push dword ptr [ebp-1Ch]  +
call edi  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov dword ptr [ebp-4] 2 +
push esi  +
push esi  +
mov eax [ebp-14h] +
dec eax  +
neg eax  +
sbb eax eax +
not eax  +
and eax offset aHhMmSs +
push eax  +
lea eax [ebp+10h] +
push eax  +
push esi  +
mov ebx 400h +
push ebx  +
mov edi ds:GetTimeFormatW +
call edi  +
mov [ebp+8] eax +
inc eax  +
push eax  +
mov ecx [ebp+0Ch] +
call ?GetBufferSetLength@CHString@@QAEPAGH@Z  +
push dword ptr [ebp+8]  +
push eax  +
mov eax [ebp-14h] +
dec eax  +
neg eax  +
sbb eax eax +
not eax  +
and eax offset aHhMmSs +
push eax  +
lea eax [ebp+10h] +
push eax  +
push esi  +
push ebx  +
call edi  +
or dword ptr [ebp-4] 0FFFFFFFFh +
xor eax eax +
inc eax  +
jmp loc_100218D  +
push 8007000Eh  +
call ds:SetLastError  +
call sub_10093E5  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov eax offset loc_100218B +
retn   +
push 8007000Eh  +
call ds:SetLastError  +
call sub_10093E5  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov eax offset loc_100218B +
retn   +
xor eax eax +
call __EH_epilog3  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0B0h +
mov eax dword_101203C +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_4] +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
mov esi [ebp+arg_8] +
push edi  +
mov [ebp+lpString] eax +
xor eax eax +
xor edi edi +
push 9Eh  +
mov word ptr [ebp+var_A4] ax +
lea eax [ebp+var_A4+2] +
push edi  +
push eax  +
mov [ebp+NumberOfCharsWritten] edi +
call memset  +
add esp 0Ch +
cmp ebx edi +
jz loc_100227C  +
xor eax eax +
mov [ebp+dwCursorPosition.X] ax +
mov ax [esi+6] +
push 50h  +
mov [ebp+dwCursorPosition.Y] ax +
pop ecx  +
lea eax [ebp+var_A4] +
mov byte ptr [eax] 0 +
inc eax  +
dec ecx  +
jnz loc_100220C  +
push dword ptr [ebp+dwCursorPosition.X]  +
mov esi ds:SetConsoleCursorPosition +
push ebx  +
call esi  +
push edi  +
lea eax [ebp+NumberOfCharsWritten] +
push eax  +
push 4Fh  +
push 4Fh  +
push 4Fh  +
push offset asc_1001300  +
lea eax [ebp+var_A4] +
push eax  +
call sub_100A740  +
mov edi ds:WriteConsoleW +
push eax  +
push ebx  +
call edi  +
push dword ptr [ebp+dwCursorPosition.X]  +
push ebx  +
call esi  +
xor eax eax +
cmp [ebp+lpString] eax +
jz loc_100227C  +
push eax  +
lea ecx [ebp+NumberOfCharsWritten] +
push ecx  +
push eax  +
push [ebp+lpString]  +
call sub_100966D  +
push eax  +
push [ebp+lpString]  +
push ebx  +
call edi  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1008AC3  +
leave   +
retn 0Ch  +
***
call __EH_prolog3_catch  +
xor esi esi +
cmp [ebp-1Ch] esi +
jz loc_1002463  +
push dword ptr [ebp-1Ch]  +
call ds:RegCloseKey  +
mov [ebp-1Ch] esi +
cmp [ebp-14h] esi +
jz loc_1002474  +
push dword ptr [ebp-14h]  +
call ds:RegCloseKey  +
mov [ebp-14h] esi +
push 8007000Eh  +
call sub_1006660  +
mov [ebp-4] esi +
mov eax offset loc_10022D4 +
retn   +
***
call __EH_prolog3_catch  +
lea ecx [ebp-1Ch] +
call ??0CHString@@QAE@XZ  +
xor ebx ebx +
mov [ebp-4] ebx +
mov [ebp-24h] ebx +
lea ecx [ebp-20h] +
call ??0CHString@@QAE@XZ  +
mov byte ptr [ebp-4] 1 +
mov byte ptr [ebp-4] 2 +
push ebx  +
push ebx  +
push 10h  +
mov esi 400h +
push esi  +
mov edi ds:GetLocaleInfoW +
call edi  +
mov [ebp-18h] eax +
cmp eax ebx +
jnz loc_10024D9  +
mov [ebp-4] bl +
jmp loc_10026E0  +
add eax 2 +
push eax  +
lea ecx [ebp-1Ch] +
call ?GetBufferSetLength@CHString@@QAEPAGH@Z  +
mov ecx eax +
mov [ebp-38h] ecx +
mov eax [ebp-18h] +
add eax 2 +
add eax eax +
mov [ebp-2Ch] eax +
mov [ebp-28h] ecx +
cmp [ebp-2Ch] ebx +
jz loc_100250A  +
mov eax [ebp-28h] +
mov [eax] bl +
inc dword ptr [ebp-28h]  +
dec dword ptr [ebp-2Ch]  +
jmp loc_10024F8  +
push dword ptr [ebp-18h]  +
push dword ptr [ebp-38h]  +
push 10h  +
push esi  +
call edi  +
mov [ebp-18h] ebx +
mov [ebp-24h] ebx +
lea ecx [ebp-1Ch] +
call ?GetData@CHString@@IBEPAUCHStringData@@XZ  +
mov eax [eax+4] +
mov [ebp-44h] eax +
cmp [ebp-18h] eax +
jge loc_10025B3  +
push 1  +
push dword ptr [ebp-18h]  +
lea eax [ebp-3Ch] +
push eax  +
lea ecx [ebp-1Ch] +
call ?Mid@CHString@@QBE?AV1@HH@Z  +
mov [ebp-48h] eax +
mov byte ptr [ebp-4] 3 +
mov eax [eax] +
mov [ebp-4Ch] eax +
push 0Ah  +
push eax  +
call sub_100ABD5  +
test eax eax +
setnz byte ptr [ebp-11h]  +
mov byte ptr [ebp-4] 2 +
lea ecx [ebp-3Ch] +
call ??1CHString@@QAE@XZ  +
cmp [ebp-11h] bl +
jz loc_10025AA  +
push 1  +
push dword ptr [ebp-18h]  +
lea eax [ebp-40h] +
push eax  +
lea ecx [ebp-1Ch] +
call ?Mid@CHString@@QBE?AV1@HH@Z  +
mov [ebp-50h] eax +
mov byte ptr [ebp-4] 4 +
mov eax [eax] +
mov [ebp-54h] eax +
push 0Ah  +
push eax  +
call sub_100ABD5  +
mov ecx [ebp-24h] +
imul ecx ecx +
add eax ecx +
mov [ebp-24h] eax +
mov byte ptr [ebp-4] 2 +
lea ecx [ebp-40h] +
call ??1CHString@@QAE@XZ  +
add dword ptr [ebp-18h] 2 +
jmp loc_100251B  +
push ebx  +
push ebx  +
push 0Fh  +
push esi  +
call edi  +
mov [ebp-18h] eax +
cmp eax ebx +
jz loc_10024D1  +
add eax 2 +
push eax  +
lea ecx [ebp-20h] +
call ?GetBufferSetLength@CHString@@QAEPAGH@Z  +
mov ecx eax +
mov [ebp-38h] ecx +
mov eax [ebp-18h] +
add eax 2 +
add eax eax +
mov [ebp-34h] eax +
mov [ebp-30h] ecx +
cmp [ebp-34h] ebx +
jz loc_10025F6  +
mov eax [ebp-30h] +
mov [eax] bl +
inc dword ptr [ebp-30h]  +
dec dword ptr [ebp-34h]  +
jmp loc_10025E4  +
push dword ptr [ebp-18h]  +
push dword ptr [ebp-38h]  +
push 0Fh  +
push esi  +
call edi  +
push 0FFFFFFFFh  +
lea ecx [ebp-1Ch] +
call ?ReleaseBuffer@CHString@@QAEXH@Z  +
push 0FFFFFFFFh  +
lea ecx [ebp-20h] +
call ?ReleaseBuffer@CHString@@QAEXH@Z  +
mov dword ptr [ebp-4] 1 +
mov byte ptr [ebp-4] 6 +
mov [ebp-6Ch] ebx +
mov [ebp-68h] ebx +
mov [ebp-58h] ebx +
mov eax [ebp-24h] +
mov [ebp-64h] eax +
mov dword ptr [ebp-60h] offset dword_1001330 +
lea ecx [ebp-20h] +
call ?GetData@CHString@@IBEPAUCHStringData@@XZ  +
mov eax [eax+4] +
push eax  +
lea ecx [ebp-20h] +
call ?GetBuffer@CHString@@QAEPAGH@Z  +
mov [ebp-5Ch] eax +
push ebx  +
push ebx  +
lea eax [ebp-6Ch] +
push eax  +
push dword ptr [ebp+8]  +
push ebx  +
push esi  +
mov edi ds:GetNumberFormatW +
call edi  +
mov [ebp-18h] eax +
inc eax  +
push eax  +
mov ecx [ebp+0Ch] +
call ?GetBufferSetLength@CHString@@QAEPAGH@Z  +
push dword ptr [ebp-18h]  +
push eax  +
lea eax [ebp-6Ch] +
push eax  +
push dword ptr [ebp+8]  +
push ebx  +
push esi  +
call edi  +
push 0FFFFFFFFh  +
mov ecx [ebp+0Ch] +
call ?ReleaseBuffer@CHString@@QAEXH@Z  +
mov [ebp-4] ebx +
lea ecx [ebp-20h] +
call ??1CHString@@QAE@XZ  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-1Ch] +
call ??1CHString@@QAE@XZ  +
xor eax eax +
inc eax  +
jmp loc_10026F6  +
push 8007000Eh  +
call ds:SetLastError  +
call sub_10093E5  +
mov dword ptr [ebp-4] 1 +
mov eax offset loc_10026DC +
retn   +
push 8007000Eh  +
call ds:SetLastError  +
call sub_10093E5  +
mov dword ptr [ebp-4] 1 +
mov eax offset loc_10026DC +
retn   +
mov byte ptr [ebp-4] 0 +
lea ecx [ebp-20h] +
call ??1CHString@@QAE@XZ  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-1Ch] +
call ??1CHString@@QAE@XZ  +
xor eax eax +
call __EH_epilog3  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
and dword ptr [esi+4] 0 +
mov dword ptr [esi+8] 1 +
call ds:SysAllocString  +
mov [esi] eax +
test eax eax +
jnz loc_1002734  +
cmp [ebp+arg_0] eax +
jz loc_1002734  +
push 8007000Eh  +
call sub_100870D  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi] +
test eax eax +
jz loc_1002752  +
push eax  +
call ds:SysFreeString  +
mov esi [esi+4] +
test esi esi +
jz loc_1002760  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
pop esi  +
retn   +
***
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
push dword ptr [eax+4]  +
call sub_1006660  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
push edi  +
mov esi ecx +
mov eax [esi] +
xor ecx ecx +
push ecx  +
push ecx  +
mov [ebp+var_4] ecx +
lea ecx [ebp+var_4] +
push ecx  +
push offset aRootCimv2  +
push dword ptr [esi+38h]  +
lea edi [esi+44h] +
push edi  +
lea ecx [esi+8] +
push ecx  +
lea ecx [esi+4] +
push ecx  +
push eax  +
lea ebx [esi+10h] +
push ebx  +
push dword ptr [esi+0Ch]  +
call sub_10076D1  +
mov [ebp+var_8] eax +
test eax eax +
jnz loc_10027C5  +
xor eax eax +
jmp loc_100282E  +
call ds:GetLastError  +
mov ecx 80041064h +
cmp eax ecx +
jnz loc_1002800  +
push ecx  +
call sub_1006660  +
push 20004h  +
call ds:__iob_func  +
add eax 40h +
push eax  +
call sub_100B34F  +
mov eax [esi+14h] +
test eax eax +
jz loc_1002800  +
add esi 18h +
push esi  +
push eax  +
call ds:GetConsoleScreenBufferInfo  +
cmp [ebp+var_4] 0 +
jnz loc_100282B  +
push dword ptr [edi]  +
push dword ptr [ebx]  +
call sub_1007F77  +
push eax  +
call sub_100952D  +
test eax eax +
jnz loc_100282B  +
push 1580h  +
call sub_100B337  +
push eax  +
call sub_100937E  +
jmp loc_10027C1  +
mov eax [ebp+var_8] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
call __EH_prolog3  +
mov esi ecx +
lea ecx [ebp-14h] +
call ??0CHString@@QAE@XZ  +
xor edi edi +
mov [ebp-4] edi +
lea eax [esi+18h] +
push eax  +
push 231h  +
mov [ebp-10h] edi +
call sub_100B337  +
push eax  +
push dword ptr [esi+14h]  +
call sub_100219A  +
lea eax [esi+44h] +
mov ecx [eax] +
xor ebx ebx +
cmp ecx edi +
jz loc_100287B  +
mov ebx [ecx+10h] +
mov ecx [esi+4] +
mov edx [esi] +
push edi  +
push edi  +
push edi  +
push offset aRootDefault  +
push edi  +
push eax  +
push ebx  +
push ecx  +
push edx  +
lea eax [ebp-10h] +
push eax  +
push dword ptr [esi+0Ch]  +
call sub_10071E7  +
cmp eax edi +
jnz loc_10028B1  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-14h] +
call ??1CHString@@QAE@XZ  +
mov eax edi +
call __EH_epilog3  +
retn   +
push 138Dh  +
call sub_100B337  +
push eax  +
lea eax [ebp-14h] +
push eax  +
push offset aLogonserver  +
push offset aVolatileEnviro  +
push 80000001h  +
push dword ptr [ebp-10h]  +
call sub_1007E6C  +
mov eax [ebp-10h] +
cmp eax edi +
jz loc_10028E7  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp-10h] edi +
push edi  +
push dword ptr [ebp-14h]  +
push 1Dh  +
push edi  +
push dword ptr [esi+30h]  +
call sub_100BF94  +
xor edi edi +
inc edi  +
jmp loc_100289D  +
***
call __EH_prolog3  +
mov esi ecx +
push 0Ch  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov ecx eax +
mov [ebp-10h] ecx +
and dword ptr [ebp-4] 0 +
test ecx ecx +
jz loc_100292D  +
push dword ptr [ebp+8]  +
call sub_1002703  +
jmp loc_100292F  +
xor eax eax +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov [esi] eax +
test eax eax +
jnz loc_1002943  +
push 8007000Eh  +
call sub_100870D  +
mov eax esi +
call __EH_epilog3  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1002740  +
test [ebp+arg_0] 1 +
jz loc_100296C  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
push edi  +
lea eax [esi+8] +
push eax  +
call ds:InterlockedDecrement  +
mov edi eax +
test edi edi +
jnz loc_100299B  +
test esi esi +
jz loc_100299B  +
push 1  +
mov ecx esi +
call sub_1002952  +
mov eax edi +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
mov ecx [esi] +
test ecx ecx +
jz loc_10029B8  +
call sub_1002978  +
and dword ptr [esi] 0 +
pop esi  +
retn   +
***
call __EH_prolog3_catch_GS  +
call sub_10093E5  +
call sub_10093E5  +
call sub_10093E5  +
call sub_10093E5  +
mov dword ptr [ebp-4] 13h +
mov eax offset loc_1002CCD +
retn   +
***
add byte ptr ds:loc_1002CCD[eax] bh +
retn   +
***
call __EH_prolog3_catch_GS  +
mov esi ecx +
xor ebx ebx +
mov [ebp-90h] ebx +
lea ecx [ebp-5Ch] +
call ??0CHString@@QAE@XZ  +
mov [ebp-4] ebx +
lea ecx [ebp-6Ch] +
call ??0CHString@@QAE@XZ  +
mov byte ptr [ebp-4] 1 +
mov [ebp-68h] ebx +
mov [ebp-78h] ebx +
lea ecx [ebp-64h] +
call ??0CHString@@QAE@XZ  +
mov byte ptr [ebp-4] 2 +
lea ecx [ebp-70h] +
call ??0CHString@@QAE@XZ  +
mov byte ptr [ebp-4] 3 +
lea ecx [ebp-60h] +
call ??0CHString@@QAE@XZ  +
mov byte ptr [ebp-4] 4 +
lea ecx [ebp-74h] +
call ??0CHString@@QAE@XZ  +
mov byte ptr [ebp-4] 5 +
lea eax [esi+18h] +
push eax  +
push 228h  +
call sub_100B337  +
push eax  +
push dword ptr [esi+14h]  +
call sub_100219A  +
mov byte ptr [ebp-4] 6 +
wait   +
push offset aWin32_computer  +
lea ecx [ebp-7Ch] +
call sub_1002900  +
mov byte ptr [ebp-4] 7 +
cmp [eax] ebx +
jz loc_1003771  +
mov eax [eax] +
mov ecx [eax] +
jmp loc_1003773  +
xor ecx ecx +
mov eax [esi+10h] +
mov edx [eax] +
lea edi [ebp-78h] +
push edi  +
push ebx  +
push 30h  +
push ecx  +
push eax  +
call dword ptr [edx+48h]  +
mov edi eax +
mov byte ptr [ebp-4] 6 +
mov ecx [ebp-7Ch] +
cmp ecx ebx +
jz loc_1003799  +
call sub_1002978  +
mov [ebp-7Ch] ebx +
cmp edi ebx +
jge loc_10037F2  +
push edi  +
call sub_1006660  +
mov byte ptr [ebp-4] 4 +
lea ecx [ebp-74h] +
call ??1CHString@@QAE@XZ  +
mov byte ptr [ebp-4] 3 +
lea ecx [ebp-60h] +
call ??1CHString@@QAE@XZ  +
mov byte ptr [ebp-4] 2 +
lea ecx [ebp-70h] +
call ??1CHString@@QAE@XZ  +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp-64h] +
call ??1CHString@@QAE@XZ  +
mov [ebp-4] bl +
lea ecx [ebp-6Ch] +
call ??1CHString@@QAE@XZ  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-5Ch] +
call ??1CHString@@QAE@XZ  +
xor eax eax +
wait   +
jmp loc_1003BAD  +
wait   +
mov dword ptr [ebp-4] 5 +
push dword ptr [esi+44h]  +
push dword ptr [ebp-78h]  +
call sub_1005E50  +
cmp eax ebx +
jge loc_1003857  +
push eax  +
call sub_1006660  +
mov eax [ebp-78h] +
cmp eax ebx +
jz loc_100381F  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp-78h] ebx +
mov byte ptr [ebp-4] 4 +
lea ecx [ebp-74h] +
call ??1CHString@@QAE@XZ  +
mov byte ptr [ebp-4] 3 +
lea ecx [ebp-60h] +
call ??1CHString@@QAE@XZ  +
mov byte ptr [ebp-4] 2 +
lea ecx [ebp-70h] +
call ??1CHString@@QAE@XZ  +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp-64h] +
call ??1CHString@@QAE@XZ  +
mov [ebp-4] bl +
jmp loc_1003B97  +
mov eax [ebp-78h] +
mov ecx [eax] +
lea edx [ebp-90h] +
push edx  +
lea edx [ebp-68h] +
push edx  +
push 1  +
push 0FFFFFFFFh  +
push eax  +
call dword ptr [ecx+10h]  +
cmp eax ebx +
jl loc_1003809  +
mov edi 138Dh +
push edi  +
call sub_100B337  +
push eax  +
lea eax [ebp-64h] +
push eax  +
push offset aModel  +
push dword ptr [ebp-68h]  +
call sub_1007ABF  +
push edi  +
call sub_100B337  +
push eax  +
lea eax [ebp-70h] +
push eax  +
push offset aDomain  +
push dword ptr [ebp-68h]  +
call sub_1007ABF  +
push edi  +
call sub_100B337  +
push eax  +
lea eax [esi+40h] +
push eax  +
push offset aUsername  +
push dword ptr [ebp-68h]  +
call sub_1007ABF  +
push ebx  +
lea eax [ebp-94h] +
push eax  +
push offset aDomainrole  +
push dword ptr [ebp-68h]  +
call sub_10068DF  +
push edi  +
call sub_100B337  +
push eax  +
lea eax [ebp-60h] +
push eax  +
push offset aSystemtype  +
push dword ptr [ebp-68h]  +
call sub_1007ABF  +
push edi  +
call sub_100B337  +
push eax  +
lea eax [ebp-74h] +
push eax  +
push offset aManufacturer  +
push dword ptr [ebp-68h]  +
call sub_1007ABF  +
lea eax [ebp-8Ch] +
push eax  +
push offset aTotalphysicalm  +
push dword ptr [ebp-68h]  +
call sub_1007BC8  +
mov eax [ebp-78h] +
cmp eax ebx +
jz loc_1003929  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp-78h] ebx +
mov eax [ebp-68h] +
cmp eax ebx +
jz loc_1003939  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp-68h] ebx +
mov byte ptr [ebp-4] 9 +
wait   +
lea ecx [ebp-7Ch] +
call ??0CHString@@QAE@XZ  +
mov byte ptr [ebp-4] 0Ah +
mov [ebp-58h] ebx +
push 3Eh  +
push ebx  +
lea eax [ebp-54h] +
push eax  +
call memset  +
mov ecx [ebp-8Ch] +
mov eax [ebp-88h] +
mov [ebp-9Ch] ecx +
mov [ebp-80h] eax +
and eax 7FFFFFFFh +
mov [ebp-98h] eax +
fild  qword ptr [ebp-9Ch] +
and dword ptr [ebp-80h] 80000000h +
mov [ebp-84h] ebx +
fild  qword ptr [ebp-84h] +
fchs   +
faddp st(1) st +
fmul  ds:dbl_1001610 +
fadd  ds:dbl_10013B0 +
call _ftol2  +
mov [ebp-8Ch] eax +
mov [ebp-88h] edx +
push 0Ah  +
lea ecx [ebp-58h] +
push ecx  +
push edx  +
push eax  +
call ds:_ui64tow  +
add esp 1Ch +
lea eax [ebp-7Ch] +
push eax  +
lea eax [ebp-58h] +
push eax  +
call sub_100248C  +
test eax eax +
jnz loc_10039E6  +
mov byte ptr [ebp-4] 9 +
lea ecx [ebp-7Ch] +
call ??1CHString@@QAE@XZ  +
jmp loc_10037A3  +
push dword ptr [ebp-7Ch]  +
push 68h  +
call sub_100B337  +
push eax  +
lea eax [ebp-6Ch] +
push eax  +
call ?Format@CHString@@QAAXPBGZZ  +
add esp 0Ch +
mov byte ptr [ebp-4] 9 +
lea ecx [ebp-7Ch] +
call ??1CHString@@QAE@XZ  +
wait   +
push 5  +
pop edi  +
mov [ebp-4] edi +
mov byte ptr [ebp-4] 0Ch +
wait   +
mov eax [ebp-94h] +
sub eax ebx +
jz loc_1003A51  +
dec eax  +
jz loc_1003A4A  +
dec eax  +
jz loc_1003A43  +
dec eax  +
jz loc_1003A3C  +
dec eax  +
jz loc_1003A35  +
dec eax  +
jnz loc_1003A64  +
push 87h  +
jmp loc_1003A56  +
push 86h  +
jmp loc_1003A56  +
push 85h  +
jmp loc_1003A56  +
push 84h  +
jmp loc_1003A56  +
push 83h  +
jmp loc_1003A56  +
push 82h  +
call sub_100B337  +
push eax  +
lea ecx [ebp-5Ch] +
call ??4CHString@@QAEABV0@PBG@Z  +
wait   +
mov [ebp-4] edi +
push ebx  +
push dword ptr [ebp-70h]  +
push 1Ch  +
push ebx  +
push dword ptr [esi+30h]  +
call sub_100BF94  +
push ebx  +
push dword ptr [ebp-64h]  +
push 0Ch  +
push ebx  +
push dword ptr [esi+30h]  +
call sub_100BF94  +
push ebx  +
push dword ptr [ebp-5Ch]  +
push 4  +
push ebx  +
push dword ptr [esi+30h]  +
call sub_100BF94  +
push ebx  +
push dword ptr [ebp-60h]  +
push 0Dh  +
push ebx  +
push dword ptr [esi+30h]  +
call sub_100BF94  +
push ebx  +
push dword ptr [ebp-74h]  +
push 0Bh  +
push ebx  +
push dword ptr [esi+30h]  +
call sub_100BF94  +
push ebx  +
push dword ptr [ebp-6Ch]  +
push 16h  +
push ebx  +
push dword ptr [esi+30h]  +
call sub_100BF94  +
mov byte ptr [ebp-4] 4 +
lea ecx [ebp-74h] +
call ??1CHString@@QAE@XZ  +
mov byte ptr [ebp-4] 3 +
lea ecx [ebp-60h] +
call ??1CHString@@QAE@XZ  +
mov byte ptr [ebp-4] 2 +
lea ecx [ebp-70h] +
call ??1CHString@@QAE@XZ  +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp-64h] +
call ??1CHString@@QAE@XZ  +
mov [ebp-4] bl +
lea ecx [ebp-6Ch] +
call ??1CHString@@QAE@XZ  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-5Ch] +
call ??1CHString@@QAE@XZ  +
xor eax eax +
inc eax  +
jmp loc_1003BAD  +
push 8007000Eh  +
call ds:SetLastError  +
call sub_10093E5  +
mov dword ptr [ebp-4] 5 +
mov eax offset byte_1003B63 +
retn   +
push 8007000Eh  +
call ds:SetLastError  +
call sub_10093E5  +
mov dword ptr [ebp-4] 5 +
mov eax offset byte_1003B63 +
retn   +
add ds:byte_1003B63[eax] bh +
retn   +
lea ecx [ebp-6Ch] +
call ??1CHString@@QAE@XZ  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-5Ch] +
call ??1CHString@@QAE@XZ  +
xor eax eax +
call sub_1008BF1  +
retn   +
***
call __EH_prolog3_catch  +
mov esi ecx +
mov [ebp-38h] esi +
xor ebx ebx +
mov [ebp-3Ch] ebx +
mov [ebp-14h] ebx +
mov [ebp-18h] ebx +
lea ecx [ebp-20h] +
call ??0CHString@@QAE@XZ  +
mov [ebp-4] ebx +
lea ecx [ebp-30h] +
call ??0CHString@@QAE@XZ  +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp-2Ch] +
call ??0CHString@@QAE@XZ  +
mov byte ptr [ebp-4] 2 +
lea ecx [ebp-1Ch] +
call ??0CHString@@QAE@XZ  +
mov byte ptr [ebp-4] 3 +
lea ecx [ebp-28h] +
call ??0CHString@@QAE@XZ  +
mov byte ptr [ebp-4] 4 +
lea ecx [ebp-24h] +
call ??0CHString@@QAE@XZ  +
mov byte ptr [ebp-4] 5 +
lea eax [esi+18h] +
push eax  +
push 22Bh  +
call sub_100B337  +
push eax  +
push dword ptr [esi+14h]  +
call sub_100219A  +
mov byte ptr [ebp-4] 6 +
push offset aWin32_bios  +
lea ecx [ebp-34h] +
call sub_1002900  +
mov byte ptr [ebp-4] 7 +
cmp [eax] ebx +
jz loc_1003C51  +
mov eax [eax] +
mov ecx [eax] +
jmp loc_1003C53  +
xor ecx ecx +
mov eax [esi+10h] +
mov edx [eax] +
lea edi [ebp-18h] +
push edi  +
push ebx  +
push 30h  +
push ecx  +
push eax  +
call dword ptr [edx+48h]  +
mov edi eax +
mov byte ptr [ebp-4] 6 +
mov ecx [ebp-34h] +
cmp ecx ebx +
jz loc_1003C79  +
call sub_1002978  +
mov [ebp-34h] ebx +
cmp edi ebx +
jge loc_1003CBB  +
push edi  +
call sub_1006660  +
mov byte ptr [ebp-4] 4 +
lea ecx [ebp-24h] +
call ??1CHString@@QAE@XZ  +
mov byte ptr [ebp-4] 3 +
lea ecx [ebp-28h] +
call ??1CHString@@QAE@XZ  +
mov byte ptr [ebp-4] 2 +
lea ecx [ebp-1Ch] +
call ??1CHString@@QAE@XZ  +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp-2Ch] +
call ??1CHString@@QAE@XZ  +
mov [ebp-4] bl +
jmp loc_1003ED6  +
mov dword ptr [ebp-4] 5 +
push dword ptr [esi+44h]  +
push dword ptr [ebp-18h]  +
call sub_1005E50  +
cmp eax ebx +
jge loc_1003CE9  +
push eax  +
call sub_1006660  +
mov eax [ebp-18h] +
cmp eax ebx +
jz loc_1003C83  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp-18h] ebx +
jmp loc_1003C83  +
mov eax [ebp-18h] +
mov ecx [eax] +
lea edx [ebp-3Ch] +
push edx  +
lea edx [ebp-14h] +
push edx  +
push 1  +
push 0FFFFFFFFh  +
push eax  +
call dword ptr [ecx+10h]  +
cmp eax ebx +
jl loc_1003CD1  +
push ebx  +
lea eax [ebp-40h] +
push eax  +
push offset aSmbiospresent  +
push dword ptr [ebp-14h]  +
call sub_10068DF  +
mov edi 138Dh +
cmp [ebp-40h] ebx +
jz loc_1003D98  +
push edi  +
call sub_100B337  +
push eax  +
lea eax [ebp-30h] +
push eax  +
push offset aSmbiosbiosvers  +
push dword ptr [ebp-14h]  +
call sub_1007ABF  +
test eax eax +
jz loc_1003D98  +
push edi  +
call sub_100B337  +
push eax  +
lea eax [ebp-2Ch] +
push eax  +
push offset aManufacturer  +
push dword ptr [ebp-14h]  +
call sub_1007ABF  +
lea eax [ebp-54h] +
push eax  +
push offset aReleasedate  +
push dword ptr [ebp-14h]  +
call sub_1007C85  +
sub esp 10h +
lea esi [ebp-54h] +
mov edi esp +
movs   +
movs   +
movs   +
movs   +
lea eax [ebp-28h] +
push eax  +
lea eax [ebp-1Ch] +
push eax  +
call sub_1002085  +
push dword ptr [ebp-1Ch]  +
push dword ptr [ebp-30h]  +
push dword ptr [ebp-2Ch]  +
push offset aSSS  +
lea eax [ebp-20h] +
push eax  +
call ?Format@CHString@@QAAXPBGZZ  +
add esp 14h +
jmp loc_1003DF5  +
push edi  +
call sub_100B337  +
push eax  +
lea eax [ebp-24h] +
push eax  +
push offset aBiosversion  +
push dword ptr [ebp-14h]  +
call sub_1007ABF  +
test eax eax +
jz loc_1003DFA  +
lea eax [ebp-54h] +
push eax  +
push offset aReleasedate  +
push dword ptr [ebp-14h]  +
call sub_1007C85  +
sub esp 10h +
lea esi [ebp-54h] +
mov edi esp +
movs   +
movs   +
movs   +
movs   +
lea eax [ebp-28h] +
push eax  +
lea eax [ebp-1Ch] +
push eax  +
call sub_1002085  +
push dword ptr [ebp-1Ch]  +
push dword ptr [ebp-24h]  +
push offset aSS_0  +
lea eax [ebp-20h] +
push eax  +
call ?Format@CHString@@QAAXPBGZZ  +
add esp 10h +
mov esi [ebp-38h] +
jmp loc_1003E12  +
push edi  +
call sub_100B337  +
push eax  +
lea eax [ebp-20h] +
push eax  +
push offset aVersion  +
push dword ptr [ebp-14h]  +
call sub_1007ABF  +
mov eax [ebp-18h] +
cmp eax ebx +
jz loc_1003E22  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp-18h] ebx +
mov eax [ebp-14h] +
cmp eax ebx +
jz loc_1003E32  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp-14h] ebx +
push ebx  +
push dword ptr [ebp-20h]  +
push 0Fh  +
push ebx  +
push dword ptr [esi+30h]  +
call sub_100BF94  +
mov byte ptr [ebp-4] 4 +
lea ecx [ebp-24h] +
call ??1CHString@@QAE@XZ  +
mov byte ptr [ebp-4] 3 +
lea ecx [ebp-28h] +
call ??1CHString@@QAE@XZ  +
mov byte ptr [ebp-4] 2 +
lea ecx [ebp-1Ch] +
call ??1CHString@@QAE@XZ  +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp-2Ch] +
call ??1CHString@@QAE@XZ  +
mov [ebp-4] bl +
lea ecx [ebp-30h] +
call ??1CHString@@QAE@XZ  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-20h] +
call ??1CHString@@QAE@XZ  +
xor eax eax +
inc eax  +
jmp loc_1003EEC  +
mov eax offset loc_1003EA2 +
retn   +
mov byte ptr [ebp-4] 4 +
lea ecx [ebp-24h] +
call ??1CHString@@QAE@XZ  +
mov byte ptr [ebp-4] 3 +
lea ecx [ebp-28h] +
call ??1CHString@@QAE@XZ  +
mov byte ptr [ebp-4] 2 +
lea ecx [ebp-1Ch] +
call ??1CHString@@QAE@XZ  +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp-2Ch] +
call ??1CHString@@QAE@XZ  +
mov byte ptr [ebp-4] 0 +
lea ecx [ebp-30h] +
call ??1CHString@@QAE@XZ  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-20h] +
call ??1CHString@@QAE@XZ  +
xor eax eax +
call __EH_epilog3  +
retn   +
***
call __EH_prolog3_catch  +
mov edi ecx +
xor esi esi +
mov [ebp-24h] esi +
mov [ebp-1Ch] esi +
mov [ebp-14h] esi +
lea ecx [ebp-18h] +
call ??0CHString@@QAE@XZ  +
mov [ebp-4] esi +
lea eax [edi+18h] +
push eax  +
push 22Dh  +
call sub_100B337  +
push eax  +
push dword ptr [edi+14h]  +
call sub_100219A  +
mov byte ptr [ebp-4] 1 +
push offset aWin32_timezone  +
lea ecx [ebp-20h] +
call sub_1002900  +
mov byte ptr [ebp-4] 2 +
cmp [eax] esi +
jz loc_1003F51  +
mov eax [eax] +
mov ecx [eax] +
jmp loc_1003F53  +
xor ecx ecx +
mov eax [edi+10h] +
mov edx [eax] +
lea ebx [ebp-14h] +
push ebx  +
push esi  +
push 30h  +
push ecx  +
push eax  +
call dword ptr [edx+48h]  +
mov ebx eax +
mov byte ptr [ebp-4] 1 +
mov ecx [ebp-20h] +
cmp ecx esi +
jz loc_1003F79  +
call sub_1002978  +
mov [ebp-20h] esi +
cmp ebx esi +
jge loc_1003F97  +
push ebx  +
call sub_1006660  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-18h] +
call ??1CHString@@QAE@XZ  +
xor eax eax +
call __EH_epilog3  +
retn   +
mov [ebp-4] esi +
push dword ptr [edi+44h]  +
push dword ptr [ebp-14h]  +
call sub_1005E50  +
cmp eax esi +
jge loc_1003FC1  +
push eax  +
call sub_1006660  +
mov eax [ebp-14h] +
cmp eax esi +
jz loc_1003F83  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp-14h] esi +
jmp loc_1003F83  +
mov eax [ebp-14h] +
mov ecx [eax] +
lea edx [ebp-24h] +
push edx  +
lea edx [ebp-1Ch] +
push edx  +
push 1  +
push 0FFFFFFFFh  +
push eax  +
call dword ptr [ecx+10h]  +
cmp eax esi +
jl loc_1003FA9  +
push 138Dh  +
call sub_100B337  +
push eax  +
lea eax [ebp-18h] +
push eax  +
push offset aCaption  +
push dword ptr [ebp-1Ch]  +
call sub_1007ABF  +
mov eax [ebp-14h] +
cmp eax esi +
jz loc_1004006  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp-14h] esi +
mov eax [ebp-1Ch] +
cmp eax esi +
jz loc_1004016  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp-1Ch] esi +
push esi  +
push dword ptr [ebp-18h]  +
push 15h  +
push esi  +
push dword ptr [edi+30h]  +
call sub_100BF94  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-18h] +
call ??1CHString@@QAE@XZ  +
xor eax eax +
inc eax  +
jmp loc_1003F91  +
***
add byte ptr ds:loc_1003F83[eax] bh +
retn   +
***
call __EH_prolog3_catch  +
mov edi ecx +
xor esi esi +
mov [ebp-28h] esi +
mov [ebp-24h] esi +
mov [ebp-1Ch] esi +
mov [ebp-14h] esi +
lea ecx [ebp-18h] +
call ??0CHString@@QAE@XZ  +
mov [ebp-4] esi +
lea eax [edi+18h] +
push eax  +
push 22Eh  +
call sub_100B337  +
push eax  +
push dword ptr [edi+14h]  +
call sub_100219A  +
mov byte ptr [ebp-4] 1 +
push offset aWin32_pagefile  +
lea ecx [ebp-20h] +
call sub_1002900  +
mov byte ptr [ebp-4] 2 +
cmp [eax] esi +
jz loc_10040AD  +
mov eax [eax] +
mov ecx [eax] +
jmp loc_10040AF  +
xor ecx ecx +
mov eax [edi+10h] +
mov edx [eax] +
lea ebx [ebp-14h] +
push ebx  +
push esi  +
push 30h  +
push ecx  +
push eax  +
call dword ptr [edx+48h]  +
mov ebx eax +
mov byte ptr [ebp-4] 1 +
mov ecx [ebp-20h] +
cmp ecx esi +
jz loc_10040D5  +
call sub_1002978  +
mov [ebp-20h] esi +
cmp ebx esi +
jge loc_10040F3  +
push ebx  +
call sub_1006660  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-18h] +
call ??1CHString@@QAE@XZ  +
xor eax eax +
call __EH_epilog3  +
retn   +
mov [ebp-4] esi +
push dword ptr [edi+44h]  +
push dword ptr [ebp-14h]  +
call sub_1005E50  +
cmp eax esi +
jge loc_100411D  +
push eax  +
call sub_1006660  +
mov eax [ebp-14h] +
cmp eax esi +
jz loc_10040DF  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp-14h] esi +
jmp loc_10040DF  +
mov ebx [ebp-24h] +
mov eax [ebp-14h] +
mov ecx [eax] +
lea edx [ebp-28h] +
push edx  +
lea edx [ebp-1Ch] +
push edx  +
push 1  +
push 0FFFFFFFFh  +
push eax  +
call dword ptr [ecx+10h]  +
cmp eax 1 +
jz loc_10041A6  +
cmp eax esi +
jl loc_1004105  +
push 138Dh  +
call sub_100B337  +
push eax  +
lea eax [ebp-18h] +
push eax  +
push offset aCaption  +
push dword ptr [ebp-1Ch]  +
call sub_1007ABF  +
mov eax [ebp-1Ch] +
cmp eax esi +
jz loc_100416A  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp-1Ch] esi +
cmp ebx esi +
jnz loc_1004185  +
push 1Bh  +
push esi  +
push dword ptr [edi+30h]  +
call sub_100BD5F  +
mov ebx eax +
cmp ebx esi +
jz loc_1004191  +
push ebx  +
call sub_100B42F  +
push esi  +
push dword ptr [ebp-18h]  +
push ebx  +
call sub_100B7CC  +
jmp loc_1004120  +
push 8000FFFFh  +
call ds:SetLastError  +
call sub_10093E5  +
jmp loc_100410B  +
mov eax [ebp-14h] +
cmp eax esi +
jz loc_10041B6  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp-14h] esi +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-18h] +
call ??1CHString@@QAE@XZ  +
xor eax eax +
inc eax  +
jmp loc_10040ED  +
***
cld   +
add byte ptr ds:loc_10040DF[eax] bh +
retn   +
***
call __EH_prolog3_catch  +
mov esi ecx +
lea ecx [ebp-18h] +
call ??0CHString@@QAE@XZ  +
xor ebx ebx +
mov [ebp-4] ebx +
mov [ebp-2Ch] ebx +
mov [ebp-38h] ebx +
mov [ebp-28h] ebx +
mov [ebp-24h] ebx +
mov [ebp-14h] ebx +
lea ecx [ebp-20h] +
call ??0CHString@@QAE@XZ  +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp-1Ch] +
call ??0CHString@@QAE@XZ  +
mov byte ptr [ebp-4] 2 +
lea eax [esi+18h] +
push eax  +
push 22Ah  +
call sub_100B337  +
push eax  +
push dword ptr [esi+14h]  +
call sub_100219A  +
mov byte ptr [ebp-4] 3 +
push offset aWin32_processo  +
lea ecx [ebp-34h] +
call sub_1002900  +
mov byte ptr [ebp-4] 4 +
cmp [eax] ebx +
jz loc_1004259  +
mov eax [eax] +
mov ecx [eax] +
jmp loc_100425B  +
xor ecx ecx +
mov eax [esi+10h] +
mov edx [eax] +
lea edi [ebp-14h] +
push edi  +
push ebx  +
push 30h  +
push ecx  +
push eax  +
call dword ptr [edx+48h]  +
mov edi eax +
mov byte ptr [ebp-4] 3 +
mov ecx [ebp-34h] +
cmp ecx ebx +
jz loc_1004281  +
call sub_1002978  +
mov [ebp-34h] ebx +
cmp edi ebx +
jge loc_100429F  +
push edi  +
call sub_1006660  +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp-1Ch] +
call ??1CHString@@QAE@XZ  +
mov [ebp-4] bl +
jmp loc_1004473  +
mov dword ptr [ebp-4] 2 +
push dword ptr [esi+44h]  +
push dword ptr [ebp-14h]  +
call sub_1005E50  +
cmp eax ebx +
jge loc_10042CD  +
push eax  +
call sub_1006660  +
mov eax [ebp-14h] +
cmp eax ebx +
jz loc_100428B  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp-14h] ebx +
jmp loc_100428B  +
mov byte ptr [ebp-4] 6 +
mov edi 138Dh +
mov eax [ebp-14h] +
mov ecx [eax] +
lea edx [ebp-38h] +
push edx  +
lea edx [ebp-24h] +
push edx  +
push 1  +
push 0FFFFFFFFh  +
push eax  +
call dword ptr [ecx+10h]  +
cmp eax 1 +
jz loc_10043CD  +
cmp eax ebx +
jl loc_10042B5  +
inc dword ptr [ebp-2Ch]  +
push edi  +
call sub_100B337  +
push eax  +
lea eax [ebp-20h] +
push eax  +
push offset aCaption  +
push dword ptr [ebp-24h]  +
call sub_1007ABF  +
push edi  +
call sub_100B337  +
push eax  +
lea eax [ebp-1Ch] +
push eax  +
push offset aManufacturer  +
push dword ptr [ebp-24h]  +
call sub_1007ABF  +
push ebx  +
lea eax [ebp-30h] +
push eax  +
push offset aCurrentclocksp  +
push dword ptr [ebp-24h]  +
call sub_10068DF  +
cmp [ebp-30h] ebx +
jnz loc_1004354  +
push ebx  +
lea eax [ebp-30h] +
push eax  +
push offset aMaxclockspeed  +
push dword ptr [ebp-24h]  +
call sub_10068DF  +
mov eax [ebp-24h] +
cmp eax ebx +
jz loc_1004364  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp-24h] ebx +
cmp [ebp-28h] ebx +
jnz loc_1004396  +
push 0Eh  +
push ebx  +
push dword ptr [esi+30h]  +
call sub_100BD5F  +
mov [ebp-28h] eax +
cmp eax ebx +
jnz loc_1004390  +
push 8000FFFFh  +
call ds:SetLastError  +
call sub_10093E5  +
jmp loc_10042BB  +
push eax  +
call sub_100B42F  +
push dword ptr [ebp-30h]  +
push dword ptr [ebp-1Ch]  +
push dword ptr [ebp-20h]  +
push dword ptr [ebp-2Ch]  +
push 6Ah  +
call sub_100B337  +
push eax  +
lea eax [ebp-18h] +
push eax  +
call ?Format@CHString@@QAAXPBGZZ  +
add esp 18h +
push ebx  +
push dword ptr [ebp-18h]  +
push dword ptr [ebp-28h]  +
call sub_100B7CC  +
xor eax eax +
inc eax  +
cmp eax eax +
jz loc_10042D6  +
mov eax [ebp-14h] +
cmp eax ebx +
jz loc_10043DD  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp-14h] ebx +
cmp [ebp-28h] ebx +
jz loc_1004406  +
push dword ptr [ebp-2Ch]  +
push 69h  +
call sub_100B337  +
push eax  +
lea eax [ebp-18h] +
push eax  +
call ?Format@CHString@@QAAXPBGZZ  +
add esp 0Ch +
push ebx  +
push dword ptr [ebp-18h]  +
push ebx  +
push dword ptr [ebp-28h]  +
call sub_100BA90  +
mov dword ptr [ebp-4] 1 +
lea ecx [ebp-1Ch] +
call ??1CHString@@QAE@XZ  +
mov [ebp-4] bl +
lea ecx [ebp-20h] +
call ??1CHString@@QAE@XZ  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-18h] +
call ??1CHString@@QAE@XZ  +
xor eax eax +
inc eax  +
jmp loc_1004489  +
push 8007000Eh  +
call ds:SetLastError  +
call sub_10093E5  +
mov dword ptr [ebp-4] 2 +
mov eax offset byte_1004463 +
retn   +
add ds:byte_1004463[eax] bh +
retn   +
lea ecx [ebp-20h] +
call ??1CHString@@QAE@XZ  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-18h] +
call ??1CHString@@QAE@XZ  +
xor eax eax +
call __EH_epilog3  +
retn   +
***
call __EH_prolog3_catch  +
mov edi ecx +
xor esi esi +
mov [ebp-24h] esi +
mov [ebp-1Ch] esi +
mov [ebp-14h] esi +
lea ecx [ebp-18h] +
call ??0CHString@@QAE@XZ  +
mov [ebp-4] esi +
lea eax [edi+18h] +
push eax  +
push 22Ch  +
call sub_100B337  +
push eax  +
push dword ptr [edi+14h]  +
call sub_100219A  +
mov byte ptr [ebp-4] 1 +
push offset aWin32_keyboard  +
lea ecx [ebp-20h] +
call sub_1002900  +
mov byte ptr [ebp-4] 2 +
cmp [eax] esi +
jz loc_10044EE  +
mov eax [eax] +
mov ecx [eax] +
jmp loc_10044F0  +
xor ecx ecx +
mov eax [edi+10h] +
mov edx [eax] +
lea ebx [ebp-14h] +
push ebx  +
push esi  +
push 30h  +
push ecx  +
push eax  +
call dword ptr [edx+48h]  +
mov ebx eax +
mov byte ptr [ebp-4] 1 +
mov ecx [ebp-20h] +
cmp ecx esi +
jz loc_1004516  +
call sub_1002978  +
mov [ebp-20h] esi +
cmp ebx esi +
jge loc_1004534  +
push ebx  +
call sub_1006660  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-18h] +
call ??1CHString@@QAE@XZ  +
xor eax eax +
call __EH_epilog3  +
retn   +
mov [ebp-4] esi +
push dword ptr [edi+44h]  +
push dword ptr [ebp-14h]  +
call sub_1005E50  +
cmp eax esi +
jge loc_100455E  +
push eax  +
call sub_1006660  +
mov eax [ebp-14h] +
cmp eax esi +
jz loc_1004520  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp-14h] esi +
jmp loc_1004520  +
mov eax [ebp-14h] +
mov ecx [eax] +
lea edx [ebp-24h] +
push edx  +
lea edx [ebp-1Ch] +
push edx  +
push 1  +
push 0FFFFFFFFh  +
push eax  +
call dword ptr [ecx+10h]  +
cmp eax esi +
jl loc_1004546  +
push 138Dh  +
call sub_100B337  +
push eax  +
lea eax [ebp-18h] +
push eax  +
push offset aLayout  +
push dword ptr [ebp-1Ch]  +
call sub_1007ABF  +
mov eax [ebp-14h] +
cmp eax esi +
jz loc_10045A3  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp-14h] esi +
mov eax [ebp-1Ch] +
cmp eax esi +
jz loc_10045B3  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp-1Ch] esi +
lea eax [ebp-18h] +
push eax  +
call sub_1002292  +
push esi  +
push dword ptr [ebp-18h]  +
push 14h  +
push esi  +
push dword ptr [edi+30h]  +
call sub_100BF94  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-18h] +
call ??1CHString@@QAE@XZ  +
xor eax eax +
inc eax  +
jmp loc_100452E  +
***
retn   +
***
call __EH_prolog3_catch  +
mov esi ecx +
lea ecx [ebp-18h] +
call ??0CHString@@QAE@XZ  +
xor ebx ebx +
mov [ebp-4] ebx +
mov [ebp-2Ch] ebx +
mov [ebp-34h] ebx +
mov [ebp-28h] ebx +
mov [ebp-24h] ebx +
mov [ebp-14h] ebx +
lea ecx [ebp-20h] +
call ??0CHString@@QAE@XZ  +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp-1Ch] +
call ??0CHString@@QAE@XZ  +
mov byte ptr [ebp-4] 2 +
lea eax [esi+18h] +
push eax  +
push 22Fh  +
call sub_100B337  +
push eax  +
push dword ptr [esi+14h]  +
call sub_100219A  +
mov byte ptr [ebp-4] 3 +
push offset aWin32_quickfix  +
lea ecx [ebp-30h] +
call sub_1002900  +
mov byte ptr [ebp-4] 4 +
cmp [eax] ebx +
jz loc_100466E  +
mov eax [eax] +
mov ecx [eax] +
jmp loc_1004670  +
xor ecx ecx +
mov eax [esi+10h] +
mov edx [eax] +
lea edi [ebp-14h] +
push edi  +
push ebx  +
push 30h  +
push ecx  +
push eax  +
call dword ptr [edx+48h]  +
mov edi eax +
mov byte ptr [ebp-4] 3 +
mov ecx [ebp-30h] +
cmp ecx ebx +
jz loc_1004696  +
call sub_1002978  +
mov [ebp-30h] ebx +
cmp edi ebx +
jge loc_10046B4  +
push edi  +
call sub_1006660  +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp-1Ch] +
call ??1CHString@@QAE@XZ  +
mov [ebp-4] bl +
jmp loc_1004893  +
mov dword ptr [ebp-4] 2 +
push dword ptr [esi+44h]  +
push dword ptr [ebp-14h]  +
call sub_1005E50  +
cmp eax ebx +
jge loc_10046E2  +
push eax  +
call sub_1006660  +
mov eax [ebp-14h] +
cmp eax ebx +
jz loc_10046A0  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp-14h] ebx +
jmp loc_10046A0  +
mov byte ptr [ebp-4] 6 +
mov edi 138Dh +
mov eax [ebp-14h] +
mov ecx [eax] +
lea edx [ebp-34h] +
push edx  +
lea edx [ebp-24h] +
push edx  +
push 1  +
push 0FFFFFFFFh  +
push eax  +
call dword ptr [ecx+10h]  +
cmp eax 1 +
jz loc_10047ED  +
cmp eax ebx +
jl loc_10046CA  +
inc dword ptr [ebp-2Ch]  +
push edi  +
call sub_100B337  +
push eax  +
lea eax [ebp-20h] +
push eax  +
push offset aHotfixid  +
push dword ptr [ebp-24h]  +
call sub_1007ABF  +
push edi  +
call sub_100B337  +
push eax  +
lea eax [ebp-1Ch] +
push eax  +
push offset aFixcomments  +
push dword ptr [ebp-24h]  +
call sub_1007ABF  +
mov eax [ebp-24h] +
cmp eax ebx +
jz loc_1004750  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp-24h] ebx +
cmp [ebp-28h] ebx +
jnz loc_1004782  +
push 1Eh  +
push ebx  +
push dword ptr [esi+30h]  +
call sub_100BD5F  +
mov [ebp-28h] eax +
cmp eax ebx +
jnz loc_100477C  +
push 8000FFFFh  +
call ds:SetLastError  +
call sub_10093E5  +
jmp loc_10046D0  +
push eax  +
call sub_100B42F  +
lea ecx [ebp-1Ch] +
call ?GetData@CHString@@IBEPAUCHStringData@@XZ  +
mov eax [eax+4] +
cmp eax ebx +
jz loc_10047BC  +
lea eax [ebp-1Ch] +
push eax  +
push offset asc_1001840  +
lea eax [ebp-30h] +
push eax  +
call ??H@YG?AVCHString@@PBGABV0@@Z  +
mov byte ptr [ebp-4] 7 +
push eax  +
lea ecx [ebp-20h] +
call ??YCHString@@QAEABV0@ABV0@@Z  +
mov byte ptr [ebp-4] 6 +
lea ecx [ebp-30h] +
call ??1CHString@@QAE@XZ  +
push dword ptr [ebp-20h]  +
push dword ptr [ebp-2Ch]  +
push 6Eh  +
call sub_100B337  +
push eax  +
lea eax [ebp-18h] +
push eax  +
call ?Format@CHString@@QAAXPBGZZ  +
add esp 10h +
push ebx  +
push dword ptr [ebp-18h]  +
push dword ptr [ebp-28h]  +
call sub_100B7CC  +
xor eax eax +
inc eax  +
cmp eax eax +
jz loc_10046EB  +
mov eax [ebp-14h] +
cmp eax ebx +
jz loc_10047FD  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp-14h] ebx +
cmp [ebp-28h] ebx +
jz loc_1004826  +
push dword ptr [ebp-2Ch]  +
push 6Dh  +
call sub_100B337  +
push eax  +
lea eax [ebp-18h] +
push eax  +
call ?Format@CHString@@QAAXPBGZZ  +
add esp 0Ch +
push ebx  +
push dword ptr [ebp-18h]  +
push ebx  +
push dword ptr [ebp-28h]  +
call sub_100BA90  +
mov dword ptr [ebp-4] 1 +
lea ecx [ebp-1Ch] +
call ??1CHString@@QAE@XZ  +
mov [ebp-4] bl +
lea ecx [ebp-20h] +
call ??1CHString@@QAE@XZ  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-18h] +
call ??1CHString@@QAE@XZ  +
xor eax eax +
inc eax  +
jmp loc_10048A9  +
push 8007000Eh  +
call ds:SetLastError  +
call sub_10093E5  +
mov dword ptr [ebp-4] 2 +
mov eax offset byte_1004883 +
retn   +
add ds:byte_1004883[eax] bh +
retn   +
lea ecx [ebp-20h] +
call ??1CHString@@QAE@XZ  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-18h] +
call ??1CHString@@QAE@XZ  +
xor eax eax +
call __EH_epilog3  +
retn   +
***
call __EH_prolog3_catch  +
mov edi ecx +
lea ecx [ebp-14h] +
call ??0CHString@@QAE@XZ  +
xor ebx ebx +
mov [ebp-4] ebx +
mov [ebp-3Ch] ebx +
mov [ebp-30h] ebx +
mov [ebp-4Ch] ebx +
mov [ebp-20h] ebx +
mov [ebp-18h] ebx +
mov [ebp-1Ch] ebx +
mov [ebp-44h] ebx +
lea ecx [ebp-28h] +
call ??0CHString@@QAE@XZ  +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp-24h] +
call ??0CHString@@QAE@XZ  +
mov byte ptr [ebp-4] 2 +
lea eax [edi+18h] +
push eax  +
push 230h  +
call sub_100B337  +
push eax  +
push dword ptr [edi+14h]  +
call sub_100219A  +
mov byte ptr [ebp-4] 3 +
push offset aWin32_networka  +
lea ecx [ebp-40h] +
call sub_1002900  +
mov byte ptr [ebp-4] 4 +
cmp [eax] ebx +
jz loc_1004932  +
mov eax [eax] +
mov ecx [eax] +
jmp loc_1004934  +
xor ecx ecx +
mov eax [edi+10h] +
mov edx [eax] +
lea esi [ebp-1Ch] +
push esi  +
push ebx  +
push 30h  +
push ecx  +
push eax  +
call dword ptr [edx+48h]  +
mov esi eax +
mov byte ptr [ebp-4] 3 +
mov ecx [ebp-40h] +
cmp ecx ebx +
jz loc_100495A  +
call sub_1002978  +
mov [ebp-40h] ebx +
cmp esi ebx +
jge loc_1004978  +
push esi  +
call sub_1006660  +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp-24h] +
call ??1CHString@@QAE@XZ  +
mov [ebp-4] bl +
jmp loc_1004EE6  +
mov dword ptr [ebp-4] 2 +
push dword ptr [edi+44h]  +
push dword ptr [ebp-1Ch]  +
call sub_1005E50  +
cmp eax ebx +
jge loc_10049A6  +
push eax  +
call sub_1006660  +
mov eax [ebp-1Ch] +
cmp eax ebx +
jz loc_1004964  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp-1Ch] ebx +
jmp loc_1004964  +
mov byte ptr [ebp-4] 6 +
mov eax [ebp-1Ch] +
mov ecx [eax] +
lea edx [ebp-4Ch] +
push edx  +
lea edx [ebp-18h] +
push edx  +
push 1  +
push 0FFFFFFFFh  +
push eax  +
call dword ptr [ecx+10h]  +
cmp eax 1 +
jz loc_1004E26  +
cmp eax ebx +
jl loc_100498E  +
push ebx  +
lea eax [ebp-44h] +
push eax  +
push offset aIndex  +
push dword ptr [ebp-18h]  +
call sub_10068DF  +
mov esi 138Dh +
push esi  +
call sub_100B337  +
push eax  +
lea eax [ebp-24h] +
push eax  +
push offset aDescription  +
push dword ptr [ebp-18h]  +
call sub_1007ABF  +
push esi  +
call sub_100B337  +
push eax  +
lea eax [ebp-28h] +
push eax  +
push offset aNetconnectioni  +
push dword ptr [ebp-18h]  +
call sub_1007ABF  +
push ebx  +
lea eax [ebp-30h] +
push eax  +
push offset aNetconnections  +
push dword ptr [ebp-18h]  +
call sub_10068DF  +
mov esi eax +
mov eax [ebp-18h] +
cmp eax ebx +
jz loc_1004A37  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp-18h] ebx +
cmp esi ebx +
jz loc_1004A44  +
cmp [ebp-30h] ebx +
jz loc_1004E1B  +
inc dword ptr [ebp-3Ch]  +
cmp [ebp-20h] ebx +
jnz loc_1004A7B  +
push 1Fh  +
push ebx  +
push dword ptr [edi+30h]  +
call sub_100BD5F  +
mov [ebp-20h] eax +
cmp eax ebx +
jnz loc_1004A73  +
push 8000FFFFh  +
call ds:SetLastError  +
call sub_10093E5  +
jmp loc_1004994  +
push dword ptr [ebp-20h]  +
call sub_100B42F  +
push dword ptr [ebp-24h]  +
push dword ptr [ebp-3Ch]  +
push 6Ch  +
call sub_100B337  +
push eax  +
lea eax [ebp-14h] +
push eax  +
call ?Format@CHString@@QAAXPBGZZ  +
add esp 10h +
push ebx  +
push dword ptr [ebp-14h]  +
push dword ptr [ebp-20h]  +
call sub_100B7CC  +
cmp esi 1 +
jnz loc_1004E1B  +
push dword ptr [ebp-28h]  +
push 74h  +
call sub_100B337  +
push eax  +
lea eax [ebp-14h] +
push eax  +
call ?Format@CHString@@QAAXPBGZZ  +
add esp 0Ch +
push ebx  +
push dword ptr [ebp-14h]  +
push dword ptr [ebp-20h]  +
call sub_100B7CC  +
cmp dword ptr [ebp-30h] 2 +
jz loc_1004C27  +
push 8Ah  +
call sub_100B337  +
push eax  +
lea ecx [ebp-84h] +
call ??0CHString@@QAE@PBG@Z  +
mov byte ptr [ebp-4] 7 +
push 8Bh  +
call sub_100B337  +
push eax  +
lea ecx [ebp-80h] +
call ??0CHString@@QAE@PBG@Z  +
mov byte ptr [ebp-4] 8 +
push 8Ch  +
call sub_100B337  +
push eax  +
lea ecx [ebp-7Ch] +
call ??0CHString@@QAE@PBG@Z  +
mov byte ptr [ebp-4] 9 +
push 8Dh  +
call sub_100B337  +
push eax  +
lea ecx [ebp-78h] +
call ??0CHString@@QAE@PBG@Z  +
mov byte ptr [ebp-4] 0Ah +
push 8Eh  +
call sub_100B337  +
push eax  +
lea ecx [ebp-74h] +
call ??0CHString@@QAE@PBG@Z  +
mov byte ptr [ebp-4] 0Bh +
push 8Fh  +
call sub_100B337  +
push eax  +
lea ecx [ebp-70h] +
call ??0CHString@@QAE@PBG@Z  +
mov byte ptr [ebp-4] 0Ch +
push 90h  +
call sub_100B337  +
push eax  +
lea ecx [ebp-6Ch] +
call ??0CHString@@QAE@PBG@Z  +
mov byte ptr [ebp-4] 0Dh +
push 91h  +
call sub_100B337  +
push eax  +
lea ecx [ebp-68h] +
call ??0CHString@@QAE@PBG@Z  +
mov byte ptr [ebp-4] 0Eh +
push 92h  +
call sub_100B337  +
push eax  +
lea ecx [ebp-64h] +
call ??0CHString@@QAE@PBG@Z  +
mov byte ptr [ebp-4] 0Fh +
push 93h  +
call sub_100B337  +
push eax  +
lea ecx [ebp-60h] +
call ??0CHString@@QAE@PBG@Z  +
mov byte ptr [ebp-4] 10h +
push 94h  +
call sub_100B337  +
push eax  +
lea ecx [ebp-5Ch] +
call ??0CHString@@QAE@PBG@Z  +
mov byte ptr [ebp-4] 11h +
mov eax [ebp-30h] +
lea ecx [eax-1] +
cmp ecx 9 +
ja loc_1004C09  +
push dword ptr [ebp+eax*4-84h]  +
push 73h  +
call sub_100B337  +
push eax  +
lea eax [ebp-14h] +
push eax  +
call ?Format@CHString@@QAAXPBGZZ  +
add esp 0Ch +
push ebx  +
push dword ptr [ebp-14h]  +
push dword ptr [ebp-20h]  +
call sub_100B7CC  +
mov byte ptr [ebp-4] 6 +
push offset ??1CHString@@QAE@XZ  +
push 0Bh  +
push 4  +
lea eax [ebp-84h] +
push eax  +
call ??_M@YGXPAXIHP6EX0@Z@Z  +
jmp loc_1004E1B  +
lea ecx [ebp-38h] +
call ??0CHString@@QAE@XZ  +
mov byte ptr [ebp-4] 12h +
lea ecx [ebp-34h] +
call ??0CHString@@QAE@XZ  +
mov byte ptr [ebp-4] 13h +
mov [ebp-40h] ebx +
mov [ebp-2Ch] ebx +
call sub_100B40A  +
mov [ebp-2Ch] eax +
cmp eax ebx +
jnz loc_1004C88  +
push 8007000Eh  +
call sub_1006660  +
mov eax [ebp-1Ch] +
cmp eax ebx +
jz loc_1004C6B  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp-1Ch] ebx +
mov byte ptr [ebp-4] 12h +
lea ecx [ebp-34h] +
call ??1CHString@@QAE@XZ  +
mov byte ptr [ebp-4] 6 +
lea ecx [ebp-38h] +
call ??1CHString@@QAE@XZ  +
jmp loc_1004964  +
push dword ptr [ebp-44h]  +
push offset aWin32_networ_0  +
lea eax [ebp-14h] +
push eax  +
call ?Format@CHString@@QAAXPBGZZ  +
add esp 0Ch +
push dword ptr [ebp-14h]  +
lea ecx [ebp-48h] +
call sub_1002900  +
mov byte ptr [ebp-4] 14h +
cmp [eax] ebx +
jz loc_1004CB5  +
mov eax [eax] +
mov ecx [eax] +
jmp loc_1004CB7  +
xor ecx ecx +
mov eax [edi+10h] +
mov edx [eax] +
push ebx  +
lea esi [ebp-18h] +
push esi  +
push ebx  +
push ebx  +
push ecx  +
push eax  +
call dword ptr [edx+18h]  +
mov esi eax +
mov byte ptr [ebp-4] 13h +
mov ecx [ebp-48h] +
cmp ecx ebx +
jz loc_1004CDD  +
call sub_1002978  +
mov [ebp-48h] ebx +
cmp esi ebx +
jl loc_1004DEA  +
push dword ptr [ebp-2Ch]  +
push offset aIpaddress  +
push dword ptr [ebp-18h]  +
call sub_1007996  +
push 138Dh  +
call sub_100B337  +
push eax  +
lea eax [ebp-34h] +
push eax  +
push offset aDhcpserver  +
push dword ptr [ebp-18h]  +
call sub_1007ABF  +
push ebx  +
lea eax [ebp-40h] +
push eax  +
push offset aDhcpenabled  +
push dword ptr [ebp-18h]  +
call sub_10068DF  +
push 6Fh  +
call sub_100B337  +
push eax  +
lea ecx [ebp-38h] +
call ??4CHString@@QAEABV0@PBG@Z  +
cmp dword ptr [ebp-40h] 0FFFFFFFFh +
jnz loc_1004D40  +
push 88h  +
jmp loc_1004D45  +
push 89h  +
call sub_100B337  +
push eax  +
push dword ptr [ebp-38h]  +
lea eax [ebp-14h] +
push eax  +
call ?Format@CHString@@QAAXPBGZZ  +
add esp 0Ch +
push ebx  +
push dword ptr [ebp-14h]  +
push dword ptr [ebp-20h]  +
call sub_100B7CC  +
cmp dword ptr [ebp-40h] 0FFFFFFFFh +
jnz loc_1004D8F  +
push dword ptr [ebp-34h]  +
push 70h  +
call sub_100B337  +
push eax  +
lea eax [ebp-14h] +
push eax  +
call ?Format@CHString@@QAAXPBGZZ  +
add esp 0Ch +
push ebx  +
push dword ptr [ebp-14h]  +
push dword ptr [ebp-20h]  +
call sub_100B7CC  +
push ebx  +
push 71h  +
call sub_100B337  +
push eax  +
push dword ptr [ebp-20h]  +
call sub_100B7CC  +
push dword ptr [ebp-2Ch]  +
call sub_100B4AA  +
mov [ebp-50h] eax +
xor esi esi +
mov [ebp-54h] esi +
cmp esi [ebp-50h] +
jnb loc_1004DEA  +
push esi  +
push dword ptr [ebp-2Ch]  +
call sub_100BC14  +
cmp eax ebx +
jz loc_1004DE7  +
push eax  +
lea eax [esi+1] +
push eax  +
push 72h  +
call sub_100B337  +
push eax  +
lea eax [ebp-14h] +
push eax  +
call ?Format@CHString@@QAAXPBGZZ  +
add esp 10h +
push ebx  +
push dword ptr [ebp-14h]  +
push dword ptr [ebp-20h]  +
call sub_100B7CC  +
inc esi  +
jmp loc_1004DAD  +
mov eax [ebp-18h] +
cmp eax ebx +
jz loc_1004DFA  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp-18h] ebx +
lea eax [ebp-2Ch] +
push eax  +
call sub_100B47F  +
mov byte ptr [ebp-4] 12h +
lea ecx [ebp-34h] +
call ??1CHString@@QAE@XZ  +
mov byte ptr [ebp-4] 6 +
lea ecx [ebp-38h] +
call ??1CHString@@QAE@XZ  +
xor eax eax +
inc eax  +
cmp eax eax +
jz loc_10049AA  +
mov eax [ebp-1Ch] +
cmp eax ebx +
jz loc_1004E36  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp-1Ch] ebx +
cmp [ebp-20h] ebx +
jz loc_1004E5F  +
push dword ptr [ebp-3Ch]  +
push 6Bh  +
call sub_100B337  +
push eax  +
lea eax [ebp-14h] +
push eax  +
call ?Format@CHString@@QAAXPBGZZ  +
add esp 0Ch +
push ebx  +
push dword ptr [ebp-14h]  +
push ebx  +
push dword ptr [ebp-20h]  +
call sub_100BA90  +
xor esi esi +
inc esi  +
mov [ebp-4] esi +
lea ecx [ebp-24h] +
call ??1CHString@@QAE@XZ  +
mov [ebp-4] bl +
lea ecx [ebp-28h] +
call ??1CHString@@QAE@XZ  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-14h] +
call ??1CHString@@QAE@XZ  +
mov eax esi +
jmp loc_1004EFC  +
push 8007000Eh  +
call sub_1006660  +
mov eax [ebp-18h] +
xor ebx ebx +
cmp eax ebx +
jz loc_1004EA4  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp-18h] ebx +
mov eax [ebp-1Ch] +
cmp eax ebx +
jz loc_1004EB4  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp-1Ch] ebx +
mov dword ptr [ebp-4] 2 +
mov eax offset loc_1004ED6 +
retn   +
mov eax offset loc_1004ED6 +
retn   +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp-24h] +
call ??1CHString@@QAE@XZ  +
mov byte ptr [ebp-4] 0 +
lea ecx [ebp-28h] +
call ??1CHString@@QAE@XZ  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-14h] +
call ??1CHString@@QAE@XZ  +
xor eax eax +
call __EH_epilog3  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
call sub_10029C9  +
test eax eax +
jnz loc_1004F19  +
xor eax eax +
pop esi  +
retn   +
mov ecx esi +
call sub_10036D4  +
test eax eax +
jz loc_1004F15  +
mov ecx esi +
call sub_10041E1  +
test eax eax +
jz loc_1004F15  +
mov ecx esi +
call sub_1003BB8  +
test eax eax +
jz loc_1004F15  +
mov ecx esi +
call sub_1004494  +
test eax eax +
jz loc_1004F15  +
mov ecx esi +
call sub_1003EF7  +
test eax eax +
jz loc_1004F15  +
mov ecx esi +
call sub_1002838  +
test eax eax +
jz loc_1004F15  +
mov ecx esi +
call sub_1004050  +
test eax eax +
jz loc_1004F15  +
mov ecx esi +
call sub_10045F6  +
test eax eax +
jz loc_1004F15  +
mov ecx esi +
call sub_10048B4  +
test eax eax +
jz loc_1004F15  +
lea eax [esi+18h] +
push eax  +
push 0  +
push dword ptr [esi+14h]  +
call sub_100219A  +
xor eax eax +
inc eax  +
pop esi  +
retn   +
***
call __EH_prolog3  +
lea ecx [ebp-5Ch] +
call sub_100505D  +
and dword ptr [ebp-4] 0 +
lea ecx [ebp-5Ch] +
call sub_1005A00  +
test eax eax +
jnz loc_1004FE6  +
push 20001h  +
call ds:__iob_func  +
add eax 40h +
push eax  +
call sub_100B34F  +
call sub_1009E46  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-5Ch] +
call sub_10050C8  +
xor eax eax +
inc eax  +
call __EH_epilog3  +
retn   +
push dword ptr [ebp+0Ch]  +
lea ecx [ebp-5Ch] +
push dword ptr [ebp+8]  +
call sub_100834E  +
xor esi esi +
inc esi  +
test eax eax +
jnz loc_1005024  +
push 20001h  +
call ds:__iob_func  +
add eax 40h +
push eax  +
call sub_100B34F  +
call sub_1009E46  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-5Ch] +
call sub_10050C8  +
mov eax esi +
jmp loc_1004FE0  +
lea ecx [ebp-5Ch] +
cmp [ebp-14h] esi +
jnz loc_1005035  +
call sub_1008320  +
xor esi esi +
jmp loc_100500F  +
call sub_1002780  +
test eax eax +
jz loc_1004FFB  +
lea ecx [ebp-5Ch] +
call sub_1004F07  +
test eax eax +
jz loc_1004FFB  +
push 20h  +
push 0  +
lea ecx [ebp-5Ch] +
call sub_10082A1  +
jmp loc_1005031  +
***
call __EH_prolog3  +
mov esi ecx +
mov [ebp-10h] esi +
call ??0CHString@@QAE@XZ  +
xor edi edi +
mov [ebp-4] edi +
lea ecx [esi+4] +
call ??0CHString@@QAE@XZ  +
mov byte ptr [ebp-4] 1 +
lea ecx [esi+8] +
call ??0CHString@@QAE@XZ  +
mov byte ptr [ebp-4] 2 +
lea ecx [esi+40h] +
call ??0CHString@@QAE@XZ  +
mov byte ptr [ebp-4] 3 +
mov [esi+4Ch] edi +
mov [esi+48h] edi +
mov [esi+0Ch] edi +
mov [esi+10h] edi +
mov [esi+44h] edi +
mov [esi+30h] edi +
mov [esi+38h] edi +
mov [esi+34h] edi +
mov [esi+14h] edi +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov eax esi +
call __EH_epilog3  +
retn   +
***
call __EH_prolog3  +
mov esi ecx +
mov [ebp-10h] esi +
mov dword ptr [ebp-4] 3 +
cmp dword ptr [esi+3Ch] 1 +
jnz loc_10050ED  +
push dword ptr [esi]  +
call sub_100C7B8  +
lea edi [esi+30h] +
xor ebx ebx +
cmp [edi] ebx +
jz loc_10050FE  +
push edi  +
call sub_100B47F  +
mov [edi] ebx +
mov eax [esi+0Ch] +
cmp eax ebx +
jz loc_100510E  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [esi+0Ch] ebx +
mov eax [esi+10h] +
cmp eax ebx +
jz loc_100511E  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [esi+10h] ebx +
lea eax [esi+34h] +
push eax  +
call sub_1009B84  +
call ds:CoUninitialize  +
mov byte ptr [ebp-4] 2 +
lea ecx [esi+40h] +
call ??1CHString@@QAE@XZ  +
mov byte ptr [ebp-4] 1 +
lea ecx [esi+8] +
call ??1CHString@@QAE@XZ  +
mov [ebp-4] bl +
lea ecx [esi+4] +
call ??1CHString@@QAE@XZ  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov ecx esi +
call ??1CHString@@QAE@XZ  +
call __EH_epilog3  +
retn   +
***
call __EH_prolog3  +
mov edi ecx +
mov esi 5280h +
push esi  +
call sub_100986E  +
mov [edi+34h] eax +
test eax eax +
jnz loc_10051E9  +
push 8007000Eh  +
call ds:SetLastError  +
call sub_10093E5  +
lea ecx [ebp-10h] +
call ??0CHString@@QAE@XZ  +
and dword ptr [ebp-4] 0 +
call sub_1009352  +
push eax  +
push 1389h  +
call sub_100B337  +
push eax  +
lea eax [ebp-10h] +
push offset aSS  +
push eax  +
call ?Format@CHString@@QAAXPBGZZ  +
add esp 10h +
push dword ptr [ebp-10h]  +
call ds:__iob_func  +
add eax 40h +
push eax  +
call sub_1009FDF  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-10h] +
call ??1CHString@@QAE@XZ  +
xor eax eax +
jmp loc_10059F5  +
mov byte ptr [eax] 0 +
inc eax  +
dec esi  +
jnz loc_10051E9  +
mov esi [edi+34h] +
push 0Ah  +
push 0C9h  +
mov [ebp-10h] esi +
call sub_100B337  +
push eax  +
call sub_100ABD5  +
push 10h  +
pop ebx  +
mov [esi+200h] eax +
mov [esi+204h] ebx +
mov esi 0FEh +
push esi  +
push 97h  +
call sub_100B337  +
push eax  +
push dword ptr [ebp-10h]  +
call sub_1009F59  +
mov eax [edi+34h] +
push 0Ah  +
add eax 294h +
push 0CAh  +
mov [ebp-10h] eax +
call sub_100B337  +
push eax  +
call sub_100ABD5  +
mov ecx [ebp-10h] +
push esi  +
push 98h  +
mov [ecx+200h] eax +
mov [ecx+204h] ebx +
call sub_100B337  +
push eax  +
push dword ptr [ebp-10h]  +
call sub_1009F59  +
mov eax [edi+34h] +
push 0Ah  +
add eax 528h +
push 0CBh  +
mov [ebp-10h] eax +
call sub_100B337  +
push eax  +
call sub_100ABD5  +
mov ecx [ebp-10h] +
push esi  +
push 99h  +
mov [ecx+200h] eax +
mov [ecx+204h] ebx +
call sub_100B337  +
push eax  +
push dword ptr [ebp-10h]  +
call sub_1009F59  +
mov eax [edi+34h] +
push 0Ah  +
add eax 7BCh +
push 0CCh  +
mov [ebp-10h] eax +
call sub_100B337  +
push eax  +
call sub_100ABD5  +
mov ecx [ebp-10h] +
push esi  +
push 9Ah  +
mov [ecx+200h] eax +
mov [ecx+204h] ebx +
call sub_100B337  +
push eax  +
push dword ptr [ebp-10h]  +
call sub_1009F59  +
mov eax [edi+34h] +
push 0Ah  +
add eax 0A50h +
push 0CDh  +
mov [ebp-10h] eax +
call sub_100B337  +
push eax  +
call sub_100ABD5  +
mov ecx [ebp-10h] +
mov [ecx+200h] eax +
mov [ecx+204h] ebx +
push esi  +
push 9Bh  +
call sub_100B337  +
push eax  +
push dword ptr [ebp-10h]  +
call sub_1009F59  +
mov eax [edi+34h] +
push 0Ah  +
add eax 0CE4h +
push 0CEh  +
mov [ebp-10h] eax +
call sub_100B337  +
push eax  +
call sub_100ABD5  +
mov ecx [ebp-10h] +
push esi  +
push 9Ch  +
mov [ecx+200h] eax +
mov [ecx+204h] ebx +
call sub_100B337  +
push eax  +
push dword ptr [ebp-10h]  +
call sub_1009F59  +
mov eax [edi+34h] +
push 0Ah  +
add eax 0F78h +
push 0CFh  +
mov [ebp-10h] eax +
call sub_100B337  +
push eax  +
call sub_100ABD5  +
mov ecx [ebp-10h] +
push esi  +
push 9Dh  +
mov [ecx+200h] eax +
mov [ecx+204h] ebx +
call sub_100B337  +
push eax  +
push dword ptr [ebp-10h]  +
call sub_1009F59  +
mov eax [edi+34h] +
push 0Ah  +
add eax 120Ch +
push 0D0h  +
mov [ebp-10h] eax +
call sub_100B337  +
push eax  +
call sub_100ABD5  +
mov ecx [ebp-10h] +
push esi  +
push 9Eh  +
mov [ecx+200h] eax +
mov [ecx+204h] ebx +
call sub_100B337  +
push eax  +
push dword ptr [ebp-10h]  +
call sub_1009F59  +
mov eax [edi+34h] +
push 0Ah  +
add eax 14A0h +
push 0D1h  +
mov [ebp-10h] eax +
call sub_100B337  +
push eax  +
call sub_100ABD5  +
mov ecx [ebp-10h] +
push esi  +
push 9Fh  +
mov [ecx+200h] eax +
mov [ecx+204h] ebx +
call sub_100B337  +
push eax  +
push dword ptr [ebp-10h]  +
call sub_1009F59  +
mov eax [edi+34h] +
push 0Ah  +
add eax 1734h +
push 0D2h  +
mov [ebp-10h] eax +
call sub_100B337  +
push eax  +
call sub_100ABD5  +
mov ecx [ebp-10h] +
push esi  +
push 0A0h  +
mov [ecx+200h] eax +
mov [ecx+204h] ebx +
call sub_100B337  +
push eax  +
push dword ptr [ebp-10h]  +
call sub_1009F59  +
mov eax [edi+34h] +
push 0Ah  +
add eax 19C8h +
push 0D3h  +
mov [ebp-10h] eax +
call sub_100B337  +
push eax  +
call sub_100ABD5  +
mov ecx [ebp-10h] +
push esi  +
push 0A1h  +
mov [ecx+200h] eax +
mov [ecx+204h] ebx +
call sub_100B337  +
push eax  +
push dword ptr [ebp-10h]  +
call sub_1009F59  +
mov eax [edi+34h] +
push 0Ah  +
add eax 1C5Ch +
push 0D4h  +
mov [ebp-10h] eax +
call sub_100B337  +
push eax  +
call sub_100ABD5  +
mov ecx [ebp-10h] +
push esi  +
push 0A2h  +
mov [ecx+200h] eax +
mov [ecx+204h] ebx +
call sub_100B337  +
push eax  +
push dword ptr [ebp-10h]  +
call sub_1009F59  +
mov eax [edi+34h] +
push 0Ah  +
add eax 1EF0h +
push 0D5h  +
mov [ebp-10h] eax +
call sub_100B337  +
push eax  +
call sub_100ABD5  +
mov ecx [ebp-10h] +
push esi  +
push 0A3h  +
mov [ecx+200h] eax +
mov [ecx+204h] ebx +
call sub_100B337  +
push eax  +
push dword ptr [ebp-10h]  +
call sub_1009F59  +
mov eax [edi+34h] +
push 0Ah  +
add eax 2184h +
push 0D6h  +
mov [ebp-10h] eax +
call sub_100B337  +
push eax  +
call sub_100ABD5  +
mov ecx [ebp-10h] +
push esi  +
push 0A4h  +
mov [ecx+200h] eax +
mov [ecx+204h] ebx +
call sub_100B337  +
push eax  +
push dword ptr [ebp-10h]  +
call sub_1009F59  +
mov eax [edi+34h] +
add eax 2418h +
mov [ebp-10h] eax +
push 0Ah  +
push 0D7h  +
call sub_100B337  +
push eax  +
call sub_100ABD5  +
mov ecx [ebp-10h] +
push esi  +
push 0A5h  +
mov [ecx+200h] eax +
mov dword ptr [ecx+204h] 4010h +
call sub_100B337  +
push eax  +
push dword ptr [ebp-10h]  +
call sub_1009F59  +
mov eax [edi+34h] +
push 0Ah  +
add eax 26ACh +
push 0D8h  +
mov [ebp-10h] eax +
call sub_100B337  +
push eax  +
call sub_100ABD5  +
mov ecx [ebp-10h] +
push esi  +
push 0A6h  +
mov [ecx+200h] eax +
mov [ecx+204h] ebx +
call sub_100B337  +
push eax  +
push dword ptr [ebp-10h]  +
call sub_1009F59  +
mov eax [edi+34h] +
push 0Ah  +
add eax 2940h +
push 0D9h  +
mov [ebp-10h] eax +
call sub_100B337  +
push eax  +
call sub_100ABD5  +
mov ecx [ebp-10h] +
push esi  +
push 0A7h  +
mov [ecx+200h] eax +
mov [ecx+204h] ebx +
call sub_100B337  +
push eax  +
push dword ptr [ebp-10h]  +
call sub_1009F59  +
mov eax [edi+34h] +
push 0Ah  +
add eax 2BD4h +
push 0DAh  +
mov [ebp-10h] eax +
call sub_100B337  +
push eax  +
call sub_100ABD5  +
mov ecx [ebp-10h] +
push esi  +
push 0A8h  +
mov [ecx+200h] eax +
mov [ecx+204h] ebx +
call sub_100B337  +
push eax  +
push dword ptr [ebp-10h]  +
call sub_1009F59  +
mov eax [edi+34h] +
push 0Ah  +
add eax 2E68h +
push 0DBh  +
mov [ebp-10h] eax +
call sub_100B337  +
push eax  +
call sub_100ABD5  +
mov ecx [ebp-10h] +
push esi  +
push 0A9h  +
mov [ecx+200h] eax +
mov [ecx+204h] ebx +
call sub_100B337  +
push eax  +
push dword ptr [ebp-10h]  +
call sub_1009F59  +
mov eax [edi+34h] +
push 0Ah  +
add eax 30FCh +
push 0DCh  +
mov [ebp-10h] eax +
call sub_100B337  +
push eax  +
call sub_100ABD5  +
mov ecx [ebp-10h] +
push esi  +
push 0AAh  +
mov [ecx+200h] eax +
mov [ecx+204h] ebx +
call sub_100B337  +
push eax  +
push dword ptr [ebp-10h]  +
call sub_1009F59  +
mov eax [edi+34h] +
push 0Ah  +
add eax 3390h +
push 0DDh  +
mov [ebp-10h] eax +
call sub_100B337  +
push eax  +
call sub_100ABD5  +
mov ecx [ebp-10h] +
push esi  +
push 0ABh  +
mov [ecx+200h] eax +
mov [ecx+204h] ebx +
call sub_100B337  +
push eax  +
push dword ptr [ebp-10h]  +
call sub_1009F59  +
mov eax [edi+34h] +
push 0Ah  +
add eax 3624h +
push 0DEh  +
mov [ebp-10h] eax +
call sub_100B337  +
push eax  +
call sub_100ABD5  +
mov ecx [ebp-10h] +
push esi  +
push 0ACh  +
mov [ecx+200h] eax +
mov [ecx+204h] ebx +
call sub_100B337  +
push eax  +
push dword ptr [ebp-10h]  +
call sub_1009F59  +
mov eax [edi+34h] +
push 0Ah  +
add eax 38B8h +
push 0DFh  +
mov [ebp-10h] eax +
call sub_100B337  +
push eax  +
call sub_100ABD5  +
mov ecx [ebp-10h] +
push esi  +
push 0ADh  +
mov [ecx+200h] eax +
mov [ecx+204h] ebx +
call sub_100B337  +
push eax  +
push dword ptr [ebp-10h]  +
call sub_1009F59  +
mov eax [edi+34h] +
push 0Ah  +
add eax 3B4Ch +
push 0E0h  +
mov [ebp-10h] eax +
call sub_100B337  +
push eax  +
call sub_100ABD5  +
mov ecx [ebp-10h] +
push esi  +
mov [ecx+200h] eax +
mov [ecx+204h] ebx +
push 0AEh  +
call sub_100B337  +
push eax  +
push dword ptr [ebp-10h]  +
call sub_1009F59  +
mov eax [edi+34h] +
push 0Ah  +
add eax 3DE0h +
push 0E1h  +
mov [ebp-10h] eax +
call sub_100B337  +
push eax  +
call sub_100ABD5  +
mov ecx [ebp-10h] +
push esi  +
push 0AFh  +
mov [ecx+200h] eax +
mov [ecx+204h] ebx +
call sub_100B337  +
push eax  +
push dword ptr [ebp-10h]  +
call sub_1009F59  +
mov eax [edi+34h] +
push 0Ah  +
add eax 4074h +
push 0E2h  +
mov [ebp-10h] eax +
call sub_100B337  +
push eax  +
call sub_100ABD5  +
mov ecx [ebp-10h] +
push esi  +
push 0B0h  +
mov [ecx+200h] eax +
mov [ecx+204h] ebx +
call sub_100B337  +
push eax  +
push dword ptr [ebp-10h]  +
call sub_1009F59  +
mov eax [edi+34h] +
push 0Ah  +
add eax 4308h +
push 0E3h  +
mov [ebp-10h] eax +
call sub_100B337  +
push eax  +
call sub_100ABD5  +
mov ecx [ebp-10h] +
push esi  +
push 0B1h  +
mov [ecx+200h] eax +
mov [ecx+204h] ebx +
call sub_100B337  +
push eax  +
push dword ptr [ebp-10h]  +
call sub_1009F59  +
mov eax [edi+34h] +
push 0Ah  +
add eax 459Ch +
push 0E4h  +
mov [ebp-10h] eax +
call sub_100B337  +
push eax  +
call sub_100ABD5  +
mov ecx [ebp-10h] +
push esi  +
push 0B2h  +
mov [ecx+200h] eax +
mov dword ptr [ecx+204h] 4010h +
call sub_100B337  +
push eax  +
push dword ptr [ebp-10h]  +
call sub_1009F59  +
mov eax [edi+34h] +
push 0Ah  +
add eax 4830h +
push 0E5h  +
mov [ebp-10h] eax +
call sub_100B337  +
push eax  +
call sub_100ABD5  +
mov ecx [ebp-10h] +
push esi  +
push 0B3h  +
mov [ecx+200h] eax +
mov [ecx+204h] ebx +
call sub_100B337  +
push eax  +
push dword ptr [ebp-10h]  +
call sub_1009F59  +
mov eax [edi+34h] +
push 0Ah  +
add eax 4AC4h +
push 0E6h  +
mov [ebp-10h] eax +
call sub_100B337  +
push eax  +
call sub_100ABD5  +
mov ecx [ebp-10h] +
push esi  +
push 0B4h  +
mov [ecx+200h] eax +
mov [ecx+204h] ebx +
call sub_100B337  +
push eax  +
push dword ptr [ebp-10h]  +
call sub_1009F59  +
mov ebx [edi+34h] +
push 0Ah  +
push 0E7h  +
add ebx 4D58h +
call sub_100B337  +
push eax  +
call sub_100ABD5  +
push esi  +
push 0B5h  +
mov [ebx+200h] eax +
mov dword ptr [ebx+204h] 4010h +
call sub_100B337  +
push eax  +
push ebx  +
call sub_1009F59  +
mov edi [edi+34h] +
push 0Ah  +
push 0E8h  +
add edi 4FECh +
call sub_100B337  +
push eax  +
call sub_100ABD5  +
push esi  +
push 0B6h  +
mov [edi+200h] eax +
mov dword ptr [edi+204h] 4010h +
call sub_100B337  +
push eax  +
push edi  +
call sub_1009F59  +
xor eax eax +
inc eax  +
call __EH_epilog3  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
push edi  +
mov esi ecx +
xor edi edi +
cmp [esi+30h] edi +
jnz loc_1005AA3  +
call sub_100B40A  +
mov [esi+30h] eax +
cmp eax edi +
jnz loc_1005A39  +
push 8007000Eh  +
call ds:SetLastError  +
call sub_10093E5  +
xor eax eax +
jmp loc_1005B2B  +
push edi  +
push eax  +
call sub_100B997  +
mov [ebp+var_4] edi +
mov edi 138Dh +
cmp [ebp+var_4] 0Eh +
jz loc_1005A75  +
cmp [ebp+var_4] 1Bh +
jz loc_1005A75  +
cmp [ebp+var_4] 1Dh +
jbe loc_1005A60  +
cmp [ebp+var_4] 1Fh +
jbe loc_1005A75  +
push 0  +
push edi  +
call sub_100B337  +
push eax  +
push 0  +
push dword ptr [esi+30h]  +
call sub_100BA55  +
jmp loc_1005A9A  +
call sub_100B40A  +
mov ebx eax +
test ebx ebx +
jz loc_1005A22  +
push 0  +
push edi  +
call sub_100B337  +
push eax  +
push ebx  +
call sub_100B7CC  +
push ebx  +
push 0  +
push dword ptr [esi+30h]  +
call sub_100C151  +
inc [ebp+var_4]  +
cmp [ebp+var_4] 20h +
jb loc_1005A48  +
mov ecx esi +
call sub_1005166  +
test eax eax +
jz loc_1005A32  +
and dword ptr [esi+14h] 0 +
push 16h  +
lea ebx [esi+18h] +
pop ecx  +
mov eax ebx +
mov byte ptr [eax] 0 +
inc eax  +
dec ecx  +
jnz loc_1005ABA  +
mov edi ds:__iob_func +
call edi  +
add eax 20h +
push eax  +
call sub_1009545  +
cmp eax 1 +
jnz loc_1005ADB  +
push 0FFFFFFF5h  +
jmp loc_1005AED  +
call edi  +
add eax 40h +
push eax  +
call sub_1009545  +
cmp eax 1 +
jnz loc_1005AF6  +
push 0FFFFFFF4h  +
call ds:GetStdHandle  +
mov [esi+14h] eax +
mov eax [esi+14h] +
test eax eax +
jz loc_1005B05  +
push ebx  +
push eax  +
call ds:GetConsoleScreenBufferInfo  +
add esi 0Ch +
push esi  +
call sub_1007135  +
test eax eax +
jz loc_1005A32  +
push 0  +
call ds:SetLastError  +
push offset dword_1001330  +
call sub_100937E  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push esi  +
xor esi esi +
push edi  +
mov edi [ebp+arg_0] +
mov [ebp+var_8] esi +
mov [ebp+var_C] esi +
mov [ebp+var_4] esi +
cmp edi esi +
jnz loc_1005B58  +
mov eax 80041008h +
jmp loc_1005BAA  +
mov eax [edi] +
push ebx  +
lea ecx [ebp+var_4] +
push ecx  +
push offset dword_1001D70  +
push edi  +
call dword ptr [eax]  +
mov ebx eax +
cmp ebx esi +
jl loc_1005BA7  +
mov eax [ebp+var_4] +
mov ecx [eax] +
push esi  +
push esi  +
push esi  +
push esi  +
push esi  +
lea edx [ebp+var_C] +
push edx  +
lea edx [ebp+var_8] +
push edx  +
push edi  +
push eax  +
call dword ptr [ecx+0Ch]  +
mov ebx eax +
cmp ebx esi +
jl loc_1005B9A  +
mov eax [ebp+arg_8] +
mov ecx [ebp+var_8] +
mov [eax] ecx +
mov eax [ebp+arg_4] +
mov ecx [ebp+var_C] +
mov [eax] ecx +
mov eax [ebp+var_4] +
cmp eax esi +
jz loc_1005BA7  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax ebx +
pop ebx  +
pop edi  +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
and [ebp+var_8] 0 +
and [ebp+var_4] 0 +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
test esi esi +
jz loc_1005CD4  +
test [ebp+arg_1C] 60h +
mov ebx [ebp+arg_18] +
jz loc_1005BE3  +
test ebx ebx +
jnz loc_1005CD4  +
mov eax [esi] +
lea ecx [ebp+var_8] +
push ecx  +
push offset dword_1001D80  +
push esi  +
call dword ptr [eax]  +
test eax eax +
jl loc_1005CD9  +
mov eax [esi] +
lea ecx [ebp+var_4] +
push ecx  +
mov edi offset dword_1001D70 +
push edi  +
push esi  +
call dword ptr [eax]  +
mov [ebp+arg_0] eax +
test eax eax +
jge loc_1005C24  +
mov eax [ebp+var_8] +
test eax eax +
jz loc_1005C1C  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+arg_0] +
jmp loc_1005CD9  +
push dword ptr [ebp+arg_1C]  +
mov eax [ebp+var_4] +
mov ecx [eax] +
push ebx  +
push [ebp+arg_14]  +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push esi  +
push eax  +
call dword ptr [ecx+10h]  +
mov esi eax +
test esi esi +
jge loc_1005C69  +
mov eax [ebp+var_8] +
test eax eax +
jz loc_1005C58  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
and [ebp+var_8] 0 +
mov eax [ebp+var_4] +
test eax eax +
jz loc_1005C65  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax esi +
jmp loc_1005CD9  +
mov eax [ebp+var_4] +
test eax eax +
jz loc_1005C7A  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
and [ebp+var_4] 0 +
test ebx ebx +
jz loc_1005CCF  +
mov eax [ebp+var_8] +
mov ecx [eax] +
lea edx [ebp+var_4] +
push edx  +
push edi  +
push eax  +
call dword ptr [ecx]  +
mov esi eax +
test esi esi +
jl loc_1005CC5  +
push dword ptr [ebp+arg_1C]  +
mov eax [ebp+var_4] +
mov ecx [eax] +
push ebx  +
push [ebp+arg_14]  +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+var_8]  +
push eax  +
call dword ptr [ecx+10h]  +
mov esi eax +
mov eax [ebp+var_4] +
test eax eax +
jz loc_1005CCF  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
and [ebp+var_4] 0 +
jmp loc_1005CCF  +
cmp esi 80004002h +
jnz loc_1005CCF  +
xor esi esi +
mov eax [ebp+var_8] +
jmp loc_1005C5B  +
mov eax 80041008h +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 20h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
mov eax [esi] +
xor ebx ebx +
cmp eax ebx +
jz loc_1005D33  +
push edi  +
mov edi ds:CoTaskMemFree +
cmp [eax] ebx +
jz loc_1005D0A  +
push dword ptr [eax]  +
call edi  +
mov eax [esi] +
mov [eax] ebx +
mov eax [esi] +
mov eax [eax+10h] +
cmp eax ebx +
jz loc_1005D1B  +
push eax  +
call edi  +
mov eax [esi] +
mov [eax+10h] ebx +
mov eax [esi] +
mov eax [eax+8] +
cmp eax ebx +
jz loc_1005D2C  +
push eax  +
call edi  +
mov eax [esi] +
mov [eax+8] ebx +
push dword ptr [esi]  +
call edi  +
mov [esi] ebx +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_4] 0 +
ja loc_1005D5C  +
mov eax [ebp+arg_0] +
jb loc_1005D53  +
cmp eax 0FFFFFFFFh +
ja loc_1005D5C  +
mov ecx [ebp+arg_8] +
mov [ecx] eax +
xor eax eax +
jmp loc_1005D67  +
mov eax [ebp+arg_8] +
or dword ptr [eax] 0FFFFFFFFh +
mov eax 80070216h +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
mov eax [ebp+arg_4] +
add eax ecx +
cmp eax ecx +
jb loc_1005D8A  +
mov ecx [ebp+arg_8] +
mov [ecx] eax +
xor eax eax +
jmp loc_1005D95  +
mov eax [ebp+arg_8] +
or dword ptr [eax] 0FFFFFFFFh +
mov eax 80070216h +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
jge loc_1005DAF  +
pop ebp  +
jmp sub_100870D  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+pvargSrc]  +
mov esi ecx +
push esi  +
call ds:VariantCopy  +
push eax  +
call sub_1005D9E  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_4] +
test edx edx +
jnz loc_1005DEA  +
mov edx ecx +
mov eax dword ptr [ebp+vt] +
cmp ecx edx +
jnz loc_1005DF6  +
cmp ax [ecx] +
jz loc_1005E07  +
push eax  +
push 0  +
push edx  +
push ecx  +
call ds:VariantChangeType  +
push eax  +
call sub_1005D9E  +
pop ebp  +
retn 8  +
***
adc eax offset VariantClear +
push eax  +
call sub_1005D9E  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
lea ecx [eax+7FFBFE00h] +
cmp ecx 0FDFFh +
ja loc_1005E45  +
add eax 0FFFFFE00h +
movzx eax ax +
jmp loc_1005E47  +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
and [ebp+var_4] 0 +
cmp [ebp+arg_0] 0 +
mov [ebp+var_8] 0Ah +
jnz loc_1005E6F  +
mov eax 80041008h +
jmp locret_1005E9C  +
lea eax [ebp+var_8] +
push eax  +
lea eax [ebp+var_4] +
push eax  +
push [ebp+arg_0]  +
call sub_1005B35  +
test eax eax +
jl locret_1005E9C  +
push 0  +
push [ebp+arg_4]  +
push 3  +
push 6  +
push 0  +
push [ebp+var_4]  +
push [ebp+var_8]  +
push [ebp+arg_0]  +
call sub_1005BB5  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push edi  +
xor edi edi +
mov [ebp+var_4] edi +
mov [ebp+cb] edi +
cmp [ebp+arg_C] edi +
jnz loc_1005EC5  +
mov eax 80041008h +
jmp loc_100600A  +
push ebx  +
mov ebx ds:CoTaskMemAlloc +
push esi  +
push 1Ch  +
call ebx  +
mov esi eax +
mov [ebp+var_C] esi +
cmp esi edi +
jz loc_1006018  +
push 1Ch  +
pop ecx  +
mov byte ptr [eax] 0 +
inc eax  +
dec ecx  +
jnz loc_1005EE1  +
cmp [ebp+lpString] edi +
jz loc_1005F48  +
push edi  +
push [ebp+lpString]  +
call sub_100966D  +
mov edi eax +
lea eax [ebp+var_4] +
push eax  +
push 1  +
push edi  +
call sub_1005D70  +
test eax eax +
jl loc_100600F  +
lea eax [ebp+cb] +
push eax  +
mov eax [ebp+var_4] +
push 2  +
pop ecx  +
mul  ecx +
push edx  +
push eax  +
call sub_1005D3E  +
test eax eax +
jl loc_100600F  +
push [ebp+cb]  +
call ebx  +
mov [esi] eax +
test eax eax +
jz loc_100600F  +
push [ebp+var_4]  +
mov [esi+4] edi +
push [ebp+lpString]  +
push dword ptr [esi]  +
call sub_1009F59  +
xor edi edi +
cmp [ebp+arg_8] edi +
jz loc_1005FA6  +
push edi  +
push [ebp+arg_8]  +
call sub_100966D  +
mov edi eax +
lea eax [ebp+var_4] +
push eax  +
push 1  +
push edi  +
call sub_1005D70  +
test eax eax +
jl loc_100600F  +
lea eax [ebp+cb] +
push eax  +
mov eax [ebp+var_4] +
push 2  +
pop ecx  +
mul  ecx +
push edx  +
push eax  +
call sub_1005D3E  +
test eax eax +
jl loc_100600F  +
push [ebp+cb]  +
call ebx  +
mov [esi+8] eax +
test eax eax +
jz loc_100600F  +
push [ebp+var_4]  +
mov [esi+0Ch] edi +
push [ebp+arg_8]  +
push dword ptr [esi+8]  +
call sub_1009F59  +
xor edi edi +
cmp [ebp+arg_4] edi +
jz loc_1005FFA  +
push edi  +
push [ebp+arg_4]  +
call sub_100966D  +
mov edi eax +
lea eax [ebp+var_4] +
push eax  +
push 1  +
push edi  +
call sub_1005D70  +
test eax eax +
jl loc_100600F  +
lea eax [ebp+cb] +
push eax  +
mov eax [ebp+var_4] +
push 2  +
pop ecx  +
mul  ecx +
push edx  +
push eax  +
call sub_1005D3E  +
test eax eax +
jl loc_100600F  +
push [ebp+cb]  +
call ebx  +
mov [esi+10h] eax +
test eax eax +
jz loc_100600F  +
push [ebp+var_4]  +
mov [esi+14h] edi +
push [ebp+arg_4]  +
push dword ptr [esi+10h]  +
call sub_1009F59  +
mov eax [ebp+arg_C] +
mov dword ptr [esi+18h] 2 +
mov [eax] esi +
xor eax eax +
pop esi  +
pop ebx  +
pop edi  +
leave   +
retn 10h  +
lea eax [ebp+var_C] +
push eax  +
call sub_1005CE5  +
mov eax 80041006h +
jmp loc_1006008  +
***
mov eax [ecx] +
test eax eax +
jz loc_1006038  +
mov eax [eax] +
test eax eax +
jz loc_1006038  +
push eax  +
call ds:SysStringLen  +
retn   +
xor eax eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
mov ebx [ebp+len] +
push esi  +
mov esi ecx +
and dword ptr [esi+4] 0 +
push edi  +
mov ecx ebx +
mov dword ptr [esi+8] 1 +
call sub_1006024  +
mov ecx [ebp+arg_4] +
mov edi eax +
call sub_1006024  +
lea ecx [ebp+len] +
push ecx  +
push eax  +
push edi  +
mov [ebp+var_4] eax +
call sub_1005D70  +
test eax eax +
jl loc_1006093  +
mov eax [ebp+len] +
push 2  +
pop ecx  +
mul  ecx +
lea ecx [ebp+len] +
push ecx  +
push edx  +
push eax  +
call sub_1005D3E  +
test eax eax +
jge loc_100609D  +
push 8007000Eh  +
call sub_100870D  +
push [ebp+len]  +
push 0  +
call ds:SysAllocStringByteLen  +
mov [esi] eax +
test eax eax +
jnz loc_10060BF  +
mov eax [ebp+var_4] +
add eax edi +
jz loc_1006109  +
push 8007000Eh  +
call sub_100870D  +
mov eax [ebx] +
test eax eax +
jz loc_10060C9  +
mov eax [eax] +
jmp loc_10060CB  +
xor eax eax +
test eax eax +
jz loc_10060DF  +
lea ecx [edi+edi+2] +
push ecx  +
push eax  +
push dword ptr [esi]  +
call memcpy  +
add esp 0Ch +
mov eax [ebp+arg_4] +
mov eax [eax] +
test eax eax +
jz loc_10060EC  +
mov eax [eax] +
jmp loc_10060EE  +
xor eax eax +
test eax eax +
jz loc_1006109  +
mov ecx [ebp+var_4] +
lea ecx [ecx+ecx+2] +
push ecx  +
push eax  +
mov eax [esi] +
lea eax [eax+edi*2] +
push eax  +
call memcpy  +
add esp 0Ch +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
call __EH_prolog3  +
mov esi ecx +
cmp word ptr [esi] 3 +
jnz loc_1006130  +
mov eax [esi+8] +
jmp loc_1006162  +
lea eax [ebp-1Ch] +
push eax  +
call ds:VariantInit  +
and dword ptr [ebp-4] 0 +
push esi  +
push 3  +
lea ecx [ebp-1Ch] +
call sub_1005DDC  +
mov esi [ebp-14h] +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea eax [ebp-1Ch] +
push eax  +
call ds:VariantClear  +
push eax  +
call sub_1005D9E  +
mov eax esi +
call __EH_epilog3  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
movzx eax word ptr [esi] +
cmp ax 3 +
jz loc_10061AA  +
cmp ax 0Ah +
jz loc_10061AA  +
cmp ax 0Bh +
jnz loc_1006197  +
mov eax [ebp+arg_0] +
neg eax  +
sbb eax eax +
mov [esi+8] ax +
jmp loc_10061B0  +
push esi  +
call ds:VariantClear  +
push eax  +
call sub_1005D9E  +
push 3  +
pop eax  +
mov [esi] ax +
mov eax [ebp+arg_0] +
mov [esi+8] eax +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
push esi  +
call ds:VariantClear  +
push eax  +
call sub_1005D9E  +
cmp [ebp+arg_0] 0 +
jnz loc_10061E3  +
and dword ptr [esi+8] 0 +
push 8  +
pop eax  +
mov [esi] ax +
jmp loc_1006205  +
push [ebp+arg_0]  +
call ds:SysAllocString  +
test eax eax +
jnz loc_10061FC  +
push 8007000Eh  +
call sub_100870D  +
jmp loc_1006205  +
push 8  +
pop ecx  +
mov [esi] cx +
mov [esi+8] eax +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
push edi  +
mov edi ecx +
lea esi [edi+0Ch] +
xor ebx ebx +
cmp [esi] ebx +
jnz loc_10062B6  +
push ebx  +
push ebx  +
push esi  +
push 400h  +
push dword ptr [edi+4]  +
push ebx  +
push 1100h  +
call ds:FormatMessageW  +
mov eax [esi] +
cmp eax ebx +
jz loc_1006276  +
push eax  +
call ds:lstrlenW  +
cmp eax 1 +
jle loc_10062B6  +
mov ecx [esi] +
lea ecx [ecx+eax*2-2] +
cmp word ptr [ecx] 0Ah +
jnz loc_10062B6  +
xor edx edx +
mov [ecx] dx +
mov ecx [esi] +
lea eax [ecx+eax*2-4] +
cmp word ptr [eax] 0Dh +
jnz loc_10062B6  +
xor ecx ecx +
mov [eax] cx +
jmp loc_10062B6  +
push 40h  +
push ebx  +
call ds:LocalAlloc  +
mov [ebp-4] eax +
mov [esi] eax +
cmp eax ebx +
jz loc_10062B6  +
mov edi [edi+4] +
push edi  +
call sub_1005E25  +
movzx eax ax +
cmp ax bx +
jz loc_10062A4  +
movzx eax ax +
push eax  +
push offset aIdispatchError  +
jmp loc_10062AA  +
push edi  +
push offset aUnknownError0x  +
push dword ptr [ebp-4]  +
call ds:wsprintfW  +
add esp 0Ch +
mov eax [esi] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
call __EH_prolog3_catch  +
lea ecx [ebp-14h] +
call ??0CHString@@QAE@XZ  +
xor ebx ebx +
mov [ebp-4] ebx +
lea ecx [ebp-18h] +
call ??0CHString@@QAE@XZ  +
mov byte ptr [ebp-4] 1 +
mov [ebp-24h] ebx +
mov [ebp-20h] ebx +
mov byte ptr [ebp-4] 2 +
cmp [ebp+8] ebx +
jnz loc_1006317  +
mov [ebp-4] bl +
lea ecx [ebp-18h] +
call ??1CHString@@QAE@XZ  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-14h] +
call ??1CHString@@QAE@XZ  +
mov eax 80041008h +
jmp loc_1006473  +
mov edi [ebp+14h] +
mov eax [edi] +
cmp eax ebx +
jz loc_1006349  +
push eax  +
push dword ptr [ebp+8]  +
call sub_1005E50  +
mov esi eax +
mov [ebp-4] bl +
lea ecx [ebp-18h] +
call ??1CHString@@QAE@XZ  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-14h] +
call ??1CHString@@QAE@XZ  +
mov eax esi +
jmp loc_1006473  +
cmp [ebp+0Ch] ebx +
jnz loc_100636D  +
cmp [ebp+10h] ebx +
jnz loc_100636D  +
push ebx  +
push ebx  +
push 3  +
push 6  +
push ebx  +
push ebx  +
push 0Ah  +
push dword ptr [ebp+8]  +
call sub_1005BB5  +
mov [ebp-1Ch] eax +
jmp loc_1006459  +
push offset dword_1001330  +
lea ecx [ebp-18h] +
call ??4CHString@@QAEABV0@PBG@Z  +
push dword ptr [ebp+0Ch]  +
lea ecx [ebp-14h] +
call ??4CHString@@QAEABV0@PBG@Z  +
push 5Ch  +
lea ecx [ebp-14h] +
call ?Find@CHString@@QBEHG@Z  +
mov esi eax +
lea ecx [ebp-14h] +
cmp esi 0FFFFFFFFh +
jz loc_10063E5  +
push esi  +
lea eax [ebp+0Ch] +
push eax  +
call ?Left@CHString@@QBE?AV1@H@Z  +
mov byte ptr [ebp-4] 3 +
push eax  +
lea ecx [ebp-18h] +
call ??4CHString@@QAEABV0@ABV0@@Z  +
mov byte ptr [ebp-4] 2 +
lea ecx [ebp+0Ch] +
call ??1CHString@@QAE@XZ  +
inc esi  +
push esi  +
lea eax [ebp+0Ch] +
push eax  +
lea ecx [ebp-14h] +
call ?Mid@CHString@@QBE?AV1@H@Z  +
mov byte ptr [ebp-4] 4 +
push eax  +
lea ecx [ebp-14h] +
call ??4CHString@@QAEABV0@ABV0@@Z  +
mov byte ptr [ebp-4] 2 +
lea ecx [ebp+0Ch] +
call ??1CHString@@QAE@XZ  +
jmp loc_10063EC  +
push 40h  +
call ?Find@CHString@@QBEHG@Z  +
lea ecx [ebp-18h] +
call ?GetData@CHString@@IBEPAUCHStringData@@XZ  +
cmp [eax+4] ebx +
mov esi [ebp-18h] +
jnz loc_10063FF  +
mov esi [ebp-20h] +
lea ecx [ebp-14h] +
call ?GetData@CHString@@IBEPAUCHStringData@@XZ  +
cmp [eax+4] ebx +
mov eax [ebp-14h] +
jnz loc_1006412  +
mov eax [ebp-24h] +
push edi  +
push esi  +
push dword ptr [ebp+10h]  +
push eax  +
call sub_1005EA5  +
mov [ebp-1Ch] eax +
cmp eax ebx +
jl loc_1006459  +
push ebx  +
push dword ptr [edi]  +
push 3  +
push 6  +
push ebx  +
push ebx  +
push 0Ah  +
push dword ptr [ebp+8]  +
call sub_1005BB5  +
mov [ebp-1Ch] eax +
mov dword ptr [ebp-4] 1 +
jmp loc_1006459  +
mov dword ptr [ebp-1Ch] 80041006h +
mov dword ptr [ebp-4] 1 +
mov eax offset loc_1006457 +
retn   +
xor ebx ebx +
mov [ebp-4] bl +
lea ecx [ebp-18h] +
call ??1CHString@@QAE@XZ  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-14h] +
call ??1CHString@@QAE@XZ  +
mov eax [ebp-1Ch] +
call __EH_epilog3  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax] +
push esi  +
mov esi ecx +
mov [esi] eax +
test eax eax +
jz loc_100649D  +
add eax 8 +
push eax  +
call ds:InterlockedIncrement  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
mov eax [esi] +
push edi  +
mov edi ecx +
test eax eax +
jz loc_10064C5  +
add eax 8 +
push eax  +
call ds:InterlockedIncrement  +
mov ecx edi +
call sub_10029A5  +
mov eax [esi] +
mov [edi] eax +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
call __EH_prolog3  +
mov esi ecx +
call sub_10029A5  +
push 0Ch  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov ecx eax +
mov [ebp-10h] ecx +
xor eax eax +
mov [ebp-4] eax +
cmp ecx eax +
jz loc_100650E  +
push dword ptr [ebp+8]  +
call sub_1002703  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov [esi] eax +
mov eax esi +
call __EH_epilog3  +
retn 4  +
***
call __EH_prolog3  +
mov esi ecx +
push 0Ch  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov ecx eax +
mov [ebp-10h] ecx +
xor edi edi +
mov [ebp-4] edi +
cmp ecx edi +
jz loc_1006552  +
push dword ptr [ebp+8]  +
push esi  +
call sub_1006040  +
mov edi eax +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov ecx esi +
call sub_10029A5  +
mov [esi] edi +
mov eax esi +
call __EH_epilog3  +
retn 4  +
***
call __EH_prolog3  +
and dword ptr [ebp-4] 0 +
and dword ptr [ebp-10h] 0 +
push ecx  +
mov ecx [ebp+8] +
call sub_1006480  +
and dword ptr [ebp-4] 0 +
push dword ptr [ebp+0Ch]  +
mov ecx [ebp+8] +
mov dword ptr [ebp-10h] 1 +
call sub_1006523  +
mov eax [ebp+8] +
call __EH_epilog3  +
retn 8  +
***
call __EH_prolog3  +
and dword ptr [ebp-4] 0 +
and dword ptr [ebp-10h] 0 +
push dword ptr [ebp+0Ch]  +
mov ecx [ebp+8] +
call sub_1002900  +
and dword ptr [ebp-4] 0 +
push dword ptr [ebp+10h]  +
mov ecx [ebp+8] +
mov dword ptr [ebp-10h] 1 +
call sub_1006523  +
mov eax [ebp+8] +
call __EH_epilog3  +
retn 0Ch  +
***
call __EH_prolog3  +
mov esi ecx +
mov edi [ebp+8] +
and dword ptr [esi] 0 +
cmp word ptr [edi] 8 +
jnz loc_100661A  +
push dword ptr [edi+8]  +
call sub_10064DD  +
jmp loc_1006651  +
lea eax [ebp-1Ch] +
push eax  +
call ds:VariantInit  +
and dword ptr [ebp-4] 0 +
push edi  +
push 8  +
lea ecx [ebp-1Ch] +
call sub_1005DDC  +
push dword ptr [ebp-14h]  +
mov ecx esi +
call sub_10064DD  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea eax [ebp-1Ch] +
push eax  +
call ds:VariantClear  +
push eax  +
call sub_1005D9E  +
mov eax esi +
call __EH_epilog3  +
retn 4  +
***
call __EH_prolog3_catch  +
xor edi edi +
mov [ebp-20h] edi +
mov [ebp-14h] edi +
mov [ebp-4] edi +
mov byte ptr [ebp-4] 1 +
mov ebx [ebp+8] +
cmp ebx 80070005h +
jnz loc_100668B  +
mov ebx 52Eh +
cmp ebx 80040154h +
jnz loc_10066EC  +
push 1580h  +
call sub_100B337  +
push eax  +
lea ecx [ebp-1Ch] +
call sub_1002900  +
mov byte ptr [ebp-4] 2 +
push eax  +
lea ecx [ebp-14h] +
call sub_10064A9  +
mov byte ptr [ebp-4] 1 +
mov ecx [ebp-1Ch] +
cmp ecx edi +
jz loc_10066C6  +
call sub_1002978  +
mov [ebp-1Ch] edi +
mov esi [ebp-14h] +
cmp esi edi +
jz loc_10066D1  +
mov eax [esi] +
jmp loc_10066D3  +
xor eax eax +
push eax  +
call sub_100937E  +
or dword ptr [ebp-4] 0FFFFFFFFh +
cmp esi edi +
jz loc_100681A  +
mov ecx esi +
jmp loc_1006812  +
lea eax [ebp-20h] +
push eax  +
push offset riid  +
push 1  +
push edi  +
push offset rclsid  +
call ds:CoCreateInstance  +
cmp eax edi +
jl loc_1006759  +
mov [ebp-18h] edi +
mov eax [ebp-20h] +
mov ecx [eax] +
lea edx [ebp-18h] +
push edx  +
push edi  +
push edi  +
push ebx  +
push eax  +
call dword ptr [ecx+0Ch]  +
mov esi eax +
cmp [ebp-18h] edi +
jz loc_1006755  +
push dword ptr [ebp-18h]  +
lea ecx [ebp-24h] +
call sub_1002900  +
mov byte ptr [ebp-4] 3 +
push eax  +
lea ecx [ebp-14h] +
call sub_10064A9  +
mov byte ptr [ebp-4] 1 +
mov ecx [ebp-24h] +
cmp ecx edi +
jz loc_100674C  +
call sub_1002978  +
mov [ebp-24h] edi +
push dword ptr [ebp-18h]  +
call ds:SysFreeString  +
cmp esi edi +
jge loc_100675F  +
push ebx  +
call sub_100870D  +
mov [ebp-4] edi +
jmp loc_10066C6  +
push dword ptr [ebp+8]  +
call sub_1009F9C  +
push dword ptr [ebp+8]  +
call sub_100937E  +
lea eax [ebp+8] +
push eax  +
call sub_1009B84  +
jmp loc_10067D7  +
push 8  +
call ds:SetLastError  +
call sub_10093E5  +
mov dword ptr [ebp-4] 4 +
mov dword ptr [ebp-4] 4 +
mov eax offset loc_1006805 +
retn   +
push 8  +
call ds:SetLastError  +
call sub_10093E5  +
mov dword ptr [ebp-4] 4 +
mov eax offset loc_10067DE +
retn   +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov ecx [ebp-14h] +
xor edi edi +
cmp ecx edi +
jz loc_100681A  +
call sub_1002978  +
mov [ebp-14h] edi +
call __EH_epilog3  +
retn 4  +
***
call __EH_prolog3_catch  +
mov esi [ebp+8] +
xor ebx ebx +
cmp esi ebx +
jz loc_10068CD  +
cmp [ebp+0Ch] ebx +
jz loc_10068CD  +
mov [ebp-4] ebx +
lea eax [ebp-28h] +
push eax  +
call ds:VariantInit  +
push dword ptr [ebp+0Ch]  +
lea ecx [ebp+0Ch] +
call sub_1002900  +
mov byte ptr [ebp-4] 1 +
cmp [eax] ebx +
jz loc_100686F  +
mov eax [eax] +
mov eax [eax] +
jmp loc_1006871  +
xor eax eax +
mov ecx [esi] +
push ebx  +
push ebx  +
lea edx [ebp-28h] +
push edx  +
push ebx  +
push eax  +
push esi  +
call dword ptr [ecx+10h]  +
mov [ebp-14h] eax +
mov [ebp-4] bl +
mov ecx [ebp+0Ch] +
cmp ecx ebx +
jz loc_1006894  +
call sub_1002978  +
mov [ebp+0Ch] ebx +
lea eax [ebp-28h] +
push eax  +
cmp [ebp-14h] ebx +
jge loc_10068A8  +
call ds:VariantClear  +
mov eax [ebp-14h] +
jmp loc_10068D2  +
mov ecx [ebp+10h] +
call sub_1005DB8  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea eax [ebp-28h] +
push eax  +
jmp loc_100689D  +
mov eax [ebp-18h] +
mov eax [eax+4] +
mov [ebp-14h] eax +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov eax offset loc_10068B4 +
retn   +
mov eax 80041008h +
call __EH_epilog3  +
retn 0Ch  +
***
call __EH_prolog3  +
lea eax [ebp-1Ch] +
push eax  +
call ds:VariantInit  +
and dword ptr [ebp-4] 0 +
cmp dword ptr [ebp+8] 0 +
mov esi [ebp+10h] +
mov eax [ebp+14h] +
mov [esi] eax +
jz loc_1006951  +
cmp dword ptr [ebp+0Ch] 0 +
jz loc_1006951  +
lea eax [ebp-1Ch] +
push eax  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call sub_1006827  +
test eax eax +
jl loc_1006951  +
cmp word ptr [ebp-1Ch] 1 +
jz loc_1006938  +
cmp word ptr [ebp-1Ch] 0 +
jz loc_1006938  +
lea ecx [ebp-1Ch] +
call sub_1006117  +
mov [esi] eax +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea eax [ebp-1Ch] +
push eax  +
call ds:VariantClear  +
push eax  +
call sub_1005D9E  +
xor eax eax +
inc eax  +
jmp loc_1006967  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea eax [ebp-1Ch] +
push eax  +
call ds:VariantClear  +
push eax  +
call sub_1005D9E  +
xor eax eax +
call __EH_epilog3  +
retn 10h  +
***
call __EH_prolog3_catch  +
xor ebx ebx +
cmp [ebp+8] ebx +
jz loc_10069F5  +
cmp [ebp+0Ch] ebx +
jz loc_10069F5  +
mov [ebp-4] ebx +
mov esi [ebp+10h] +
lea edi [ebp-28h] +
movs   +
movs   +
movs   +
movs   +
push dword ptr [ebp+0Ch]  +
lea ecx [ebp+0Ch] +
call sub_1002900  +
mov byte ptr [ebp-4] 1 +
cmp [eax] ebx +
jz loc_10069B2  +
mov eax [eax] +
mov ecx [eax] +
jmp loc_10069B4  +
xor ecx ecx +
mov eax [ebp+8] +
mov edx [eax] +
push ebx  +
lea esi [ebp-28h] +
push esi  +
push ebx  +
push ecx  +
push eax  +
call dword ptr [edx+14h]  +
mov [ebp-14h] eax +
mov [ebp-4] bl +
mov ecx [ebp+0Ch] +
cmp ecx ebx +
jz loc_10069D9  +
call sub_1002978  +
mov [ebp+0Ch] ebx +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov eax [ebp-14h] +
jmp loc_10069FA  +
mov eax [ebp-18h] +
mov eax [eax+4] +
mov [ebp-14h] eax +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov eax offset loc_10069DD +
retn   +
mov eax 80041008h +
call __EH_epilog3  +
retn 0Ch  +
***
call __EH_prolog3_catch  +
lea eax [ebp-28h] +
push eax  +
call ds:VariantInit  +
xor esi esi +
mov [ebp-4] esi +
cmp [ebp+8] esi +
jz loc_1006A8B  +
cmp [ebp+0Ch] esi +
jz loc_1006A8B  +
cmp [ebp+10h] esi +
jz loc_1006A8B  +
mov byte ptr [ebp-4] 1 +
push dword ptr [ebp+10h]  +
lea ecx [ebp-28h] +
call sub_10061BC  +
lea eax [ebp-28h] +
push eax  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call sub_1006974  +
mov [ebp-14h] eax +
cmp eax esi +
jge loc_1006A5C  +
push eax  +
call sub_100870D  +
mov [ebp-4] esi +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea eax [ebp-28h] +
push eax  +
call ds:VariantClear  +
push eax  +
call sub_1005D9E  +
mov eax [ebp-14h] +
jmp loc_1006AA4  +
mov eax [ebp-18h] +
mov eax [eax+4] +
mov [ebp-14h] eax +
and dword ptr [ebp-4] 0 +
mov eax offset loc_1006A5F +
retn   +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea eax [ebp-28h] +
push eax  +
call ds:VariantClear  +
push eax  +
call sub_1005D9E  +
mov eax 80041008h +
call __EH_epilog3  +
retn 0Ch  +
***
call __EH_prolog3_catch  +
lea eax [ebp-24h] +
push eax  +
call ds:VariantInit  +
xor esi esi +
mov [ebp-4] esi +
cmp [ebp+8] esi +
jz loc_1006B42  +
cmp [ebp+0Ch] esi +
jz loc_1006B42  +
mov byte ptr [ebp-4] 1 +
push dword ptr [ebp+10h]  +
lea ecx [ebp-24h] +
call sub_100616D  +
lea eax [ebp-24h] +
push eax  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call sub_1006974  +
cmp eax esi +
jge loc_1006AFE  +
push eax  +
call sub_100870D  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea eax [ebp-24h] +
push eax  +
call ds:VariantClear  +
push eax  +
call sub_1005D9E  +
xor eax eax +
jmp loc_1006B5B  +
mov eax [ebp-14h] +
mov eax [eax+4] +
mov [ebp+0Ch] eax +
and dword ptr [ebp-4] 0 +
mov eax offset loc_1006B29 +
retn   +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea eax [ebp-24h] +
push eax  +
call ds:VariantClear  +
push eax  +
call sub_1005D9E  +
mov eax [ebp+0Ch] +
jmp loc_1006B5B  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea eax [ebp-24h] +
push eax  +
call ds:VariantClear  +
push eax  +
call sub_1005D9E  +
mov eax 80041008h +
call __EH_epilog3  +
retn 0Ch  +
***
call __EH_prolog3_catch  +
xor ebx ebx +
mov [ebp-34h] ebx +
mov [ebp-20h] ebx +
mov [ebp-24h] ebx +
mov [ebp-18h] ebx +
mov [ebp-1Ch] ebx +
push ebx  +
call ds:SetLastError  +
mov esi [ebp+8] +
cmp esi ebx +
jz loc_1006EFB  +
cmp [ebp+0Ch] ebx +
jz loc_1006EFB  +
cmp [ebp+14h] ebx +
jz loc_1006EFB  +
cmp [ebp+18h] ebx +
jz loc_1006EFB  +
mov [ebp-4] ebx +
mov edi offset aStdregprov +
push edi  +
lea ecx [ebp-28h] +
call sub_1002900  +
mov byte ptr [ebp-4] 1 +
cmp [eax] ebx +
jz loc_1006BD1  +
mov eax [eax] +
mov eax [eax] +
jmp loc_1006BD3  +
xor eax eax +
mov ecx [esi] +
push ebx  +
lea edx [ebp-20h] +
push edx  +
push ebx  +
push ebx  +
push eax  +
push esi  +
call dword ptr [ecx+18h]  +
mov [ebp-14h] eax +
mov [ebp-4] bl +
mov ecx [ebp-28h] +
cmp ecx ebx +
jz loc_1006BF6  +
call sub_1002978  +
mov [ebp-28h] ebx +
cmp [ebp-14h] ebx +
jge loc_1006C03  +
push dword ptr [ebp-14h]  +
call sub_100870D  +
mov eax [ebp-20h] +
mov ecx [eax] +
push ebx  +
lea edx [ebp-24h] +
push edx  +
push ebx  +
push dword ptr [ebp+0Ch]  +
push eax  +
call dword ptr [ecx+4Ch]  +
mov [ebp-14h] eax +
cmp eax ebx +
jge loc_1006C22  +
push eax  +
call sub_100870D  +
mov eax [ebp-24h] +
mov ecx [eax] +
lea edx [ebp-18h] +
push edx  +
push ebx  +
push eax  +
call dword ptr [ecx+3Ch]  +
mov [ebp-14h] eax +
cmp eax ebx +
jge loc_1006C3D  +
push eax  +
call sub_100870D  +
push offset aHdefkey  +
lea ecx [ebp-2Ch] +
call sub_1002900  +
mov byte ptr [ebp-4] 2 +
cmp [eax] ebx +
jz loc_1006C58  +
mov eax [eax] +
mov eax [eax] +
jmp loc_1006C5A  +
xor eax eax +
push dword ptr [ebp+10h]  +
push eax  +
push dword ptr [ebp-18h]  +
call sub_1006AB1  +
mov [ebp-14h] eax +
mov [ebp-4] bl +
mov ecx [ebp-2Ch] +
cmp ecx ebx +
jz loc_1006C7B  +
call sub_1002978  +
mov [ebp-2Ch] ebx +
cmp [ebp-14h] ebx +
jge loc_1006C88  +
push dword ptr [ebp-14h]  +
call sub_100870D  +
push offset aSsubkeyname  +
lea ecx [ebp+10h] +
call sub_1002900  +
mov byte ptr [ebp-4] 3 +
cmp [eax] ebx +
jz loc_1006CA3  +
mov eax [eax] +
mov eax [eax] +
jmp loc_1006CA5  +
xor eax eax +
push dword ptr [ebp+14h]  +
push eax  +
push dword ptr [ebp-18h]  +
call sub_1006A07  +
mov [ebp-14h] eax +
mov [ebp-4] bl +
mov ecx [ebp+10h] +
cmp ecx ebx +
jz loc_1006CC6  +
call sub_1002978  +
mov [ebp+10h] ebx +
cmp [ebp-14h] ebx +
jge loc_1006CD3  +
push dword ptr [ebp-14h]  +
call sub_100870D  +
push offset aSvaluename  +
lea ecx [ebp+14h] +
call sub_1002900  +
mov byte ptr [ebp-4] 4 +
cmp [eax] ebx +
jz loc_1006CEE  +
mov eax [eax] +
mov eax [eax] +
jmp loc_1006CF0  +
xor eax eax +
push dword ptr [ebp+18h]  +
push eax  +
push dword ptr [ebp-18h]  +
call sub_1006A07  +
mov [ebp-14h] eax +
mov [ebp-4] bl +
mov ecx [ebp+14h] +
cmp ecx ebx +
jz loc_1006D11  +
call sub_1002978  +
mov [ebp+14h] ebx +
cmp [ebp-14h] ebx +
jge loc_1006D1E  +
push dword ptr [ebp-14h]  +
call sub_100870D  +
push dword ptr [ebp+0Ch]  +
lea ecx [ebp-30h] +
call sub_1002900  +
mov esi eax +
mov byte ptr [ebp-4] 5 +
push edi  +
lea ecx [ebp+18h] +
call sub_1002900  +
mov byte ptr [ebp-4] 6 +
cmp [esi] ebx +
jz loc_1006D46  +
mov esi [esi] +
mov esi [esi] +
jmp loc_1006D48  +
xor esi esi +
cmp [eax] ebx +
jz loc_1006D52  +
mov eax [eax] +
mov eax [eax] +
jmp loc_1006D54  +
xor eax eax +
mov ecx [ebp+8] +
mov edx [ecx] +
push ebx  +
lea edi [ebp-1Ch] +
push edi  +
push dword ptr [ebp-18h]  +
push ebx  +
push ebx  +
push esi  +
push eax  +
push ecx  +
call dword ptr [edx+60h]  +
mov [ebp-14h] eax +
mov byte ptr [ebp-4] 5 +
mov ecx [ebp+18h] +
cmp ecx ebx +
jz loc_1006D7F  +
call sub_1002978  +
mov [ebp+18h] ebx +
mov [ebp-4] bl +
mov ecx [ebp-30h] +
cmp ecx ebx +
jz loc_1006D91  +
call sub_1002978  +
mov [ebp-30h] ebx +
cmp [ebp-14h] ebx +
jge loc_1006D9E  +
push dword ptr [ebp-14h]  +
call sub_100870D  +
cmp [ebp-1Ch] ebx +
jnz loc_1006DAD  +
push 800300FDh  +
call sub_100870D  +
push offset aReturnvalue  +
lea ecx [ebp+8] +
call sub_1002900  +
mov byte ptr [ebp-4] 7 +
cmp [eax] ebx +
jz loc_1006DC8  +
mov eax [eax] +
mov eax [eax] +
jmp loc_1006DCA  +
xor eax eax +
push ebx  +
lea ecx [ebp-34h] +
push ecx  +
push eax  +
push dword ptr [ebp-1Ch]  +
call sub_10068DF  +
mov esi eax +
mov [ebp-4] bl +
mov ecx [ebp+8] +
cmp ecx ebx +
jz loc_1006DEC  +
call sub_1002978  +
mov [ebp+8] ebx +
cmp esi ebx +
jz loc_1006DF5  +
cmp [ebp-34h] ebx +
jz loc_1006DFF  +
push 800300FDh  +
call sub_100870D  +
push ebx  +
push 1  +
push offset String2  +
push dword ptr [ebp+0Ch]  +
call sub_100968E  +
test eax eax +
jnz loc_1006E53  +
push offset aUvalue  +
lea ecx [ebp+0Ch] +
call sub_1002900  +
mov byte ptr [ebp-4] 8 +
cmp [eax] ebx +
jz loc_1006E2E  +
mov eax [eax] +
mov eax [eax] +
jmp loc_1006E30  +
xor eax eax +
push dword ptr [ebp+1Ch]  +
push eax  +
push dword ptr [ebp-1Ch]  +
call sub_1006827  +
mov [ebp-14h] eax +
mov [ebp-4] bl +
mov ecx [ebp+0Ch] +
cmp ecx ebx +
jz loc_1006E91  +
call sub_1002978  +
mov [ebp+0Ch] ebx +
jmp loc_1006E91  +
push offset aSvalue  +
lea ecx [ebp-34h] +
call sub_1002900  +
mov byte ptr [ebp-4] 9 +
cmp [eax] ebx +
jz loc_1006E6E  +
mov eax [eax] +
mov eax [eax] +
jmp loc_1006E70  +
xor eax eax +
push dword ptr [ebp+1Ch]  +
push eax  +
push dword ptr [ebp-1Ch]  +
call sub_1006827  +
mov [ebp-14h] eax +
mov [ebp-4] bl +
mov ecx [ebp-34h] +
cmp ecx ebx +
jz loc_1006E91  +
call sub_1002978  +
mov [ebp-34h] ebx +
cmp [ebp-14h] ebx +
jge loc_1006E9E  +
push dword ptr [ebp-14h]  +
call sub_100870D  +
or dword ptr [ebp-4] 0FFFFFFFFh +
jmp loc_1006EB9  +
mov eax [ebp-38h] +
mov eax [eax+4] +
mov [ebp-14h] eax +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov eax offset loc_1006EB7 +
retn   +
xor ebx ebx +
mov eax [ebp-20h] +
cmp eax ebx +
jz loc_1006EC9  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp-20h] ebx +
mov eax [ebp-24h] +
cmp eax ebx +
jz loc_1006ED9  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp-24h] ebx +
mov eax [ebp-18h] +
cmp eax ebx +
jz loc_1006EE9  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp-18h] ebx +
mov eax [ebp-1Ch] +
cmp eax ebx +
jz loc_1006EF6  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp-14h] +
jmp loc_1006F00  +
mov eax 80041008h +
call __EH_epilog3  +
retn 18h  +
***
call __EH_prolog3_catch  +
lea ecx [ebp-14h] +
call ??0CHString@@QAE@XZ  +
xor eax eax +
mov [ebp-4] eax +
cmp [ebp+8] eax +
jz loc_1006FEB  +
push eax  +
push dword ptr [ebp+8]  +
call sub_100966D  +
test eax eax +
jz loc_1006FEB  +
mov byte ptr [ebp-4] 1 +
push dword ptr [ebp+8]  +
lea ecx [ebp-14h] +
call ??4CHString@@QAEABV0@PBG@Z  +
push offset word_10012D0  +
push dword ptr [ebp-14h]  +
call ds:_wcsicmp  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_1006F76  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-14h] +
call ??1CHString@@QAE@XZ  +
xor eax eax +
jmp loc_1006FFA  +
push offset a?  +
lea ecx [ebp-14h] +
call ?FindOneOf@CHString@@QBEHPBG@Z  +
or esi 0FFFFFFFFh +
cmp eax esi +
jz loc_1006F8F  +
mov [ebp-4] esi +
jmp loc_1006F67  +
push 5Ch  +
lea ecx [ebp-14h] +
call ?Find@CHString@@QBEHG@Z  +
cmp eax esi +
jz loc_1006FD2  +
inc eax  +
push eax  +
lea eax [ebp+8] +
push eax  +
lea ecx [ebp-14h] +
call ?Mid@CHString@@QBE?AV1@H@Z  +
mov byte ptr [ebp-4] 2 +
push eax  +
lea ecx [ebp-14h] +
call ??4CHString@@QAEABV0@ABV0@@Z  +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp+8] +
call ??1CHString@@QAE@XZ  +
push 5Ch  +
lea ecx [ebp-14h] +
call ?Find@CHString@@QBEHG@Z  +
cmp eax esi +
jnz loc_1006F8A  +
mov [ebp-4] esi +
jmp loc_1006FEF  +
push 80041006h  +
call sub_1006660  +
and dword ptr [ebp-4] 0 +
mov eax offset loc_1006F63 +
retn   +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-14h] +
call ??1CHString@@QAE@XZ  +
xor eax eax +
inc eax  +
call __EH_epilog3  +
retn 4  +
***
call __EH_prolog3_catch  +
lea ecx [ebp-14h] +
call ??0CHString@@QAE@XZ  +
and dword ptr [ebp-4] 0 +
mov edi [ebp+8] +
test edi edi +
jz loc_1007112  +
push 0  +
push edi  +
call sub_100966D  +
test eax eax +
jz loc_1007112  +
xor ebx ebx +
inc ebx  +
mov [ebp-4] bl +
mov esi [ebp+0Ch] +
and dword ptr [esi] 0 +
push 0  +
push 0Ah  +
push edi  +
call sub_100ADBB  +
cmp eax ebx +
jnz loc_1007067  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-14h] +
call ??1CHString@@QAE@XZ  +
xor eax eax +
jmp loc_1007128  +
push edi  +
lea ecx [ebp-14h] +
call ??4CHString@@QAEABV0@PBG@Z  +
push dword ptr [ebp-14h]  +
call sub_100C29C  +
cmp eax ebx +
jnz loc_10070B0  +
push 2  +
lea eax [ebp+0Ch] +
push eax  +
lea ecx [ebp-14h] +
call ?Mid@CHString@@QBE?AV1@H@Z  +
mov byte ptr [ebp-4] 2 +
push eax  +
lea ecx [ebp-14h] +
call ??4CHString@@QAEABV0@ABV0@@Z  +
mov [ebp-4] bl +
lea ecx [ebp+0Ch] +
call ??1CHString@@QAE@XZ  +
lea ecx [ebp-14h] +
call ?GetData@CHString@@IBEPAUCHStringData@@XZ  +
cmp dword ptr [eax+4] 0 +
jz loc_1007054  +
push offset a@?  +
lea ecx [ebp-14h] +
call ?FindOneOf@CHString@@QBEHPBG@Z  +
or edi 0FFFFFFFFh +
cmp eax edi +
jz loc_10070C9  +
mov [ebp-4] edi +
jmp loc_1007058  +
push 5Ch  +
lea ecx [ebp-14h] +
call ?Find@CHString@@QBEHG@Z  +
cmp eax edi +
jnz loc_10070C4  +
push offset a_  +
push dword ptr [ebp-14h]  +
call ds:_wcsicmp  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_10070EF  +
mov [esi] ebx +
jmp loc_10070F9  +
push dword ptr [ebp-14h]  +
call sub_100C651  +
mov [esi] eax +
mov [ebp-4] edi +
jmp loc_100711E  +
push 80041006h  +
call sub_1006660  +
and dword ptr [ebp-4] 0 +
mov eax offset loc_1007054 +
retn   +
xor ebx ebx +
inc ebx  +
mov eax [ebp+0Ch] +
mov [eax] ebx +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-14h] +
call ??1CHString@@QAE@XZ  +
mov eax ebx +
call __EH_epilog3  +
retn 8  +
***
call __EH_prolog3_catch  +
xor esi esi +
mov [ebp-14h] esi +
mov [ebp-4] esi +
mov edi [ebp+8] +
cmp edi esi +
jz loc_1007154  +
cmp [edi] esi +
jz loc_100715E  +
push 80041008h  +
call sub_100870D  +
push esi  +
push esi  +
call ds:CoInitializeEx  +
cmp eax esi +
jge loc_1007170  +
push eax  +
call sub_100870D  +
push esi  +
push esi  +
push esi  +
push 3  +
xor ebx ebx +
inc ebx  +
push ebx  +
push esi  +
push esi  +
push 0FFFFFFFFh  +
push esi  +
call ds:CoInitializeSecurity  +
cmp eax esi +
jge loc_100718E  +
push eax  +
call sub_100870D  +
push edi  +
push offset stru_1001DE0  +
push ebx  +
push esi  +
push offset stru_1001EB0  +
call ds:CoCreateInstance  +
cmp eax esi +
jge loc_10071AB  +
push eax  +
call sub_100870D  +
mov [ebp-14h] ebx +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov eax [ebp-14h] +
call __EH_epilog3  +
retn 4  +
***
mov eax offset loc_10071B2 +
retn   +
***
call __EH_prolog3_catch  +
xor ebx ebx +
mov [ebp-24h] ebx +
mov [ebp-28h] ebx +
mov [ebp-4] ebx +
mov [ebp-18h] ebx +
mov byte ptr [ebp-4] 1 +
mov [ebp-1Ch] ebx +
mov byte ptr [ebp-4] 2 +
mov [ebp-14h] ebx +
mov byte ptr [ebp-4] 3 +
push ebx  +
call ds:SetLastError  +
cmp [ebp+8] ebx +
jz loc_10076B1  +
mov eax [ebp+0Ch] +
cmp eax ebx +
jz loc_10076B1  +
cmp [eax] ebx +
jnz loc_10076B1  +
cmp [ebp+24h] ebx +
jz loc_10076B1  +
mov eax [ebp+2Ch] +
cmp eax ebx +
jz loc_1007248  +
mov [eax] ebx +
mov edi [ebp+28h] +
cmp edi ebx +
jz loc_1007251  +
mov [edi] ebx +
mov byte ptr [ebp-4] 4 +
mov [ebp-38h] ebx +
lea eax [ebp-24h] +
push eax  +
mov esi [ebp+10h] +
push esi  +
call sub_1007007  +
test eax eax +
jnz loc_1007273  +
push 800706BAh  +
call sub_100870D  +
push dword ptr [ebp+14h]  +
call sub_1006F0D  +
test eax eax +
jnz loc_1007289  +
push 525h  +
call sub_100870D  +
push dword ptr [ebp+24h]  +
lea ecx [ebp-18h] +
call sub_10064DD  +
cmp esi ebx +
jz loc_1007468  +
cmp [ebp-24h] ebx +
jnz loc_1007468  +
push esi  +
lea ecx [ebp-28h] +
call sub_10064DD  +
push esi  +
call sub_100C29C  +
push dword ptr [ebp+24h]  +
cmp eax 1 +
jnz loc_1007362  +
lea ecx [ebp-2Ch] +
call sub_1002900  +
mov byte ptr [ebp-4] 5 +
push offset word_10012D0  +
lea ecx [ebp+10h] +
call sub_1002900  +
mov byte ptr [ebp-4] 6 +
lea eax [ebp+10h] +
push eax  +
lea eax [ebp-40h] +
push eax  +
lea ecx [ebp-28h] +
call sub_100656E  +
mov byte ptr [ebp-4] 7 +
lea ecx [ebp-2Ch] +
push ecx  +
lea ecx [ebp-3Ch] +
push ecx  +
mov ecx eax +
call sub_100656E  +
mov byte ptr [ebp-4] 8 +
push eax  +
lea ecx [ebp-18h] +
call sub_10064A9  +
mov byte ptr [ebp-4] 7 +
mov ecx [ebp-3Ch] +
cmp ecx ebx +
jz loc_1007320  +
call sub_1002978  +
mov [ebp-3Ch] ebx +
mov byte ptr [ebp-4] 6 +
mov ecx [ebp-40h] +
cmp ecx ebx +
jz loc_1007333  +
call sub_1002978  +
mov [ebp-40h] ebx +
mov byte ptr [ebp-4] 5 +
mov ecx [ebp+10h] +
cmp ecx ebx +
jz loc_1007346  +
call sub_1002978  +
mov [ebp+10h] ebx +
mov byte ptr [ebp-4] 4 +
mov ecx [ebp-2Ch] +
cmp ecx ebx +
jz loc_1007423  +
call sub_1002978  +
mov [ebp-2Ch] ebx +
jmp loc_1007423  +
lea ecx [ebp-34h] +
call sub_1002900  +
mov byte ptr [ebp-4] 9 +
push offset word_10012D0  +
lea ecx [ebp-30h] +
call sub_1002900  +
mov byte ptr [ebp-4] 0Ah +
lea eax [ebp-28h] +
push eax  +
push offset asc_1001B40  +
lea eax [ebp-4Ch] +
push eax  +
call sub_10065B1  +
mov byte ptr [ebp-4] 0Bh +
lea ecx [ebp-30h] +
push ecx  +
lea ecx [ebp-48h] +
push ecx  +
mov ecx eax +
call sub_100656E  +
mov byte ptr [ebp-4] 0Ch +
lea ecx [ebp-34h] +
push ecx  +
lea ecx [ebp-44h] +
push ecx  +
mov ecx eax +
call sub_100656E  +
mov byte ptr [ebp-4] 0Dh +
push eax  +
lea ecx [ebp-18h] +
call sub_10064A9  +
mov byte ptr [ebp-4] 0Ch +
mov ecx [ebp-44h] +
cmp ecx ebx +
jz loc_10073D7  +
call sub_1002978  +
mov [ebp-44h] ebx +
mov byte ptr [ebp-4] 0Bh +
mov ecx [ebp-48h] +
cmp ecx ebx +
jz loc_10073EA  +
call sub_1002978  +
mov [ebp-48h] ebx +
mov byte ptr [ebp-4] 0Ah +
mov ecx [ebp-4Ch] +
cmp ecx ebx +
jz loc_10073FD  +
call sub_1002978  +
mov [ebp-4Ch] ebx +
mov byte ptr [ebp-4] 9 +
mov ecx [ebp-30h] +
cmp ecx ebx +
jz loc_1007410  +
call sub_1002978  +
mov [ebp-30h] ebx +
mov byte ptr [ebp-4] 4 +
mov ecx [ebp-34h] +
cmp ecx ebx +
jz loc_1007423  +
call sub_1002978  +
mov [ebp-34h] ebx +
cmp [ebp+14h] ebx +
jz loc_1007496  +
push ebx  +
push dword ptr [ebp+14h]  +
call sub_100966D  +
test eax eax +
jz loc_1007496  +
push dword ptr [ebp+14h]  +
lea ecx [ebp-1Ch] +
call sub_10064DD  +
push dword ptr [ebp+18h]  +
lea ecx [ebp-14h] +
call sub_10064DD  +
cmp dword ptr [ebp+20h] 1 +
jnz loc_100748A  +
lea ecx [ebp-14h] +
call sub_1006024  +
test eax eax +
jnz loc_100748A  +
push ebx  +
lea ecx [ebp-14h] +
call sub_10064DD  +
jmp loc_100748A  +
cmp dword ptr [ebp-24h] 1 +
jnz loc_1007496  +
cmp [ebp+14h] ebx +
jz loc_1007496  +
push ebx  +
push dword ptr [ebp+14h]  +
call sub_100966D  +
test eax eax +
jz loc_1007496  +
cmp edi ebx +
jz loc_1007496  +
mov dword ptr [edi] 80041064h +
cmp [ebp-14h] ebx +
jz loc_1007496  +
mov eax [ebp-14h] +
mov edx [eax] +
jmp loc_1007498  +
xor edx edx +
mov eax [ebp-1Ch] +
cmp eax ebx +
jz loc_10074A3  +
mov ecx [eax] +
jmp loc_10074A5  +
xor ecx ecx +
mov eax [ebp-18h] +
cmp eax ebx +
jz loc_10074B0  +
mov eax [eax] +
jmp loc_10074B2  +
xor eax eax +
mov esi [ebp+8] +
mov esi [esi] +
mov edi [ebp+0Ch] +
push edi  +
push dword ptr [ebp+30h]  +
push ebx  +
push ebx  +
push ebx  +
push edx  +
push ecx  +
push eax  +
mov eax esi +
mov esi [ebp+8] +
push esi  +
call dword ptr [eax+0Ch]  +
mov [ebp-20h] eax +
cmp eax ebx +
jge loc_10075D8  +
cmp eax 80070005h +
jnz loc_100756E  +
cmp dword ptr [ebp+20h] 1 +
jnz loc_10075C1  +
lea ecx [ebp-1Ch] +
call sub_1006024  +
test eax eax +
jz loc_10075C1  +
lea ecx [ebp-14h] +
call sub_1006024  +
test eax eax +
jnz loc_10075C1  +
push offset dword_1001330  +
lea ecx [ebp+14h] +
call sub_1002900  +
mov byte ptr [ebp-4] 0Eh +
cmp [eax] ebx +
jz loc_1007528  +
mov eax [eax] +
mov edx [eax] +
jmp loc_100752A  +
xor edx edx +
mov eax [ebp-1Ch] +
cmp eax ebx +
jz loc_1007535  +
mov ecx [eax] +
jmp loc_1007537  +
xor ecx ecx +
mov eax [ebp-18h] +
cmp eax ebx +
jz loc_1007542  +
mov eax [eax] +
jmp loc_1007544  +
xor eax eax +
mov esi [esi] +
push edi  +
push dword ptr [ebp+30h]  +
push ebx  +
push ebx  +
push ebx  +
push edx  +
push ecx  +
push eax  +
push dword ptr [ebp+8]  +
call dword ptr [esi+0Ch]  +
mov [ebp-20h] eax +
mov byte ptr [ebp-4] 4 +
mov ecx [ebp+14h] +
cmp ecx ebx +
jz loc_10075BC  +
call sub_1002978  +
mov [ebp+14h] ebx +
jmp loc_10075BC  +
cmp dword ptr [ebp-20h] 80041064h +
jnz loc_10075BC  +
mov dword ptr [ebp-24h] 1 +
push ebx  +
lea ecx [ebp-1Ch] +
call sub_10064DD  +
push ebx  +
lea ecx [ebp-14h] +
call sub_10064DD  +
push dword ptr [ebp+24h]  +
lea ecx [ebp-18h] +
call sub_10064DD  +
cmp [ebp-18h] ebx +
jz loc_10075A7  +
mov eax [ebp-18h] +
mov eax [eax] +
jmp loc_10075A9  +
xor eax eax +
mov ecx [esi] +
push edi  +
push dword ptr [ebp+30h]  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push eax  +
push esi  +
call dword ptr [ecx+0Ch]  +
mov [ebp-20h] eax +
cmp [ebp-20h] ebx +
jge loc_10075CB  +
push dword ptr [ebp-20h]  +
call sub_100870D  +
jmp loc_10075D8  +
push offset dword_1001330  +
lea ecx [ebp-14h] +
call sub_10064DD  +
mov eax [ebp-14h] +
cmp eax ebx +
jz loc_10075E3  +
mov ecx [eax] +
jmp loc_10075E5  +
xor ecx ecx +
mov eax [ebp-1Ch] +
cmp eax ebx +
jz loc_10075F0  +
mov eax [eax] +
jmp loc_10075F2  +
xor eax eax +
push dword ptr [ebp+1Ch]  +
push ecx  +
push eax  +
push dword ptr [edi]  +
call sub_10062C2  +
mov [ebp-20h] eax +
cmp eax ebx +
jge loc_100760B  +
push eax  +
call sub_100870D  +
mov eax [ebp+2Ch] +
cmp eax ebx +
jz loc_1007617  +
mov ecx [ebp-24h] +
mov [eax] ecx +
mov dword ptr [ebp-38h] 1 +
mov dword ptr [ebp-4] 3 +
jmp loc_1007661  +
add ds:byte_100765F[eax] bh +
retn   +
mov byte ptr [ebp-4] 2 +
mov ecx [ebp-14h] +
cmp ecx ebx +
jz loc_1007674  +
call sub_1002978  +
mov [ebp-14h] ebx +
mov byte ptr [ebp-4] 1 +
mov ecx [ebp-1Ch] +
cmp ecx ebx +
jz loc_1007687  +
call sub_1002978  +
mov [ebp-1Ch] ebx +
mov [ebp-4] bl +
mov ecx [ebp-18h] +
cmp ecx ebx +
jz loc_1007699  +
call sub_1002978  +
mov [ebp-18h] ebx +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov ecx [ebp-28h] +
cmp ecx ebx +
jz loc_10076AC  +
call sub_1002978  +
mov [ebp-28h] ebx +
mov eax [ebp-38h] +
jmp loc_10076C4  +
mov eax [ebp+28h] +
cmp eax ebx +
jz loc_10076BE  +
mov dword ptr [eax] 80041008h +
or dword ptr [ebp-4] 0FFFFFFFFh +
xor eax eax +
call __EH_epilog3  +
retn 2Ch  +
***
call __EH_prolog3_catch  +
and dword ptr [ebp-4] 0 +
mov eax offset loc_10077C2 +
retn   +
***
call __EH_prolog3_catch  +
mov esi [ebp+8] +
xor ebx ebx +
cmp esi ebx +
jz loc_1007984  +
cmp [ebp+0Ch] ebx +
jz loc_1007984  +
cmp [ebp+10h] ebx +
jz loc_1007984  +
mov [ebp-4] ebx +
push dword ptr [ebp+0Ch]  +
lea ecx [ebp+0Ch] +
call sub_1002900  +
mov byte ptr [ebp-4] 1 +
cmp [eax] ebx +
jz loc_100792A  +
mov eax [eax] +
mov eax [eax] +
jmp loc_100792C  +
xor eax eax +
mov ecx [esi] +
push ebx  +
push ebx  +
push dword ptr [ebp+10h]  +
push ebx  +
push eax  +
push esi  +
call dword ptr [ecx+10h]  +
mov esi eax +
mov [ebp-4] bl +
mov ecx [ebp+0Ch] +
cmp ecx ebx +
jz loc_100794D  +
call sub_1002978  +
mov [ebp+0Ch] ebx +
cmp esi ebx +
jge loc_100795E  +
push dword ptr [ebp+10h]  +
call ds:VariantClear  +
mov eax esi +
jmp loc_1007989  +
or dword ptr [ebp-4] 0FFFFFFFFh +
xor eax eax +
jmp loc_1007989  +
retn   +
mov eax [ebp+10h] +
jmp loc_1007989  +
mov eax 80041008h +
call __EH_epilog3  +
retn 0Ch  +
***
call __EH_prolog3_catch  +
xor esi esi +
mov [ebp-14h] esi +
mov [ebp-18h] esi +
mov [ebp-1Ch] esi +
cmp [ebp+8] esi +
jz loc_1007AB0  +
cmp [ebp+0Ch] esi +
jz loc_1007AB0  +
cmp [ebp+10h] esi +
jz loc_1007AB0  +
lea eax [ebp-2Ch] +
push eax  +
call ds:VariantInit  +
lea eax [ebp-2Ch] +
push eax  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call sub_10078EB  +
cmp eax esi +
jl loc_1007AB0  +
xor ebx ebx +
inc ebx  +
cmp [ebp-2Ch] bx +
jnz loc_10079F9  +
mov eax ebx +
jmp loc_1007AB2  +
test dword ptr [ebp-2Ch] 2000h +
jz loc_1007AB0  +
mov edi [ebp-24h] +
lea eax [ebp-18h] +
push eax  +
push ebx  +
push edi  +
call ds:SafeArrayGetLBound  +
lea eax [ebp-1Ch] +
push eax  +
push ebx  +
push edi  +
call ds:SafeArrayGetUBound  +
mov esi [ebp-2Ch] +
and esi 0DFFFh +
and dword ptr [ebp-4] 0 +
mov eax [ebp-18h] +
mov [ebp-14h] eax +
mov eax [ebp-14h] +
cmp eax [ebp-1Ch] +
jg loc_1007A89  +
lea ecx [ebp+0Ch] +
call ??0CHString@@QAE@XZ  +
mov [ebp-4] bl +
mov [ebp-3Ch] si +
lea eax [ebp-34h] +
push eax  +
lea eax [ebp-14h] +
push eax  +
push edi  +
call ds:SafeArrayGetElement  +
cmp si 8 +
jnz loc_1007A78  +
push dword ptr [ebp-34h]  +
lea ecx [ebp+0Ch] +
call ??4CHString@@QAEABV0@PBG@Z  +
push 0  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+10h]  +
call sub_100B7CC  +
mov byte ptr [ebp-4] 0 +
lea ecx [ebp+0Ch] +
call ??1CHString@@QAE@XZ  +
inc dword ptr [ebp-14h]  +
jmp loc_1007A34  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea eax [ebp-2Ch] +
push eax  +
call ds:VariantClear  +
jmp loc_10079F2  +
lea eax [ebp-2Ch] +
push eax  +
call ds:VariantClear  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov eax offset loc_1007AB0 +
retn   +
xor eax eax +
call __EH_epilog3  +
retn 0Ch  +
***
call __EH_prolog3_catch  +
lea eax [ebp-24h] +
push eax  +
call ds:VariantInit  +
xor esi esi +
mov [ebp-4] esi +
push esi  +
call ds:SetLastError  +
mov ecx [ebp+10h] +
call ?Empty@CHString@@QAEXXZ  +
mov byte ptr [ebp-4] 1 +
push dword ptr [ebp+14h]  +
mov ecx [ebp+10h] +
call ??4CHString@@QAEABV0@PBG@Z  +
cmp [ebp+8] esi +
jz loc_1007B02  +
cmp [ebp+0Ch] esi +
jnz loc_1007B0C  +
push 80041008h  +
call sub_100870D  +
lea eax [ebp-24h] +
push eax  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call sub_1006827  +
cmp eax esi +
jge loc_1007B25  +
push eax  +
call sub_100870D  +
push 8  +
pop eax  +
cmp ax [ebp-24h] +
jnz loc_1007B66  +
lea eax [ebp-24h] +
push eax  +
lea ecx [ebp+0Ch] +
call sub_10065F6  +
mov byte ptr [ebp-4] 2 +
cmp [eax] esi +
jz loc_1007B48  +
mov eax [eax] +
mov eax [eax] +
jmp loc_1007B4A  +
xor eax eax +
push eax  +
mov ecx [ebp+10h] +
call ??4CHString@@QAEABV0@PBG@Z  +
mov byte ptr [ebp-4] 1 +
mov ecx [ebp+0Ch] +
cmp ecx esi +
jz loc_1007B66  +
call sub_1002978  +
mov [ebp+0Ch] esi +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea eax [ebp-24h] +
push eax  +
call ds:VariantClear  +
push eax  +
call sub_1005D9E  +
xor eax eax +
inc eax  +
jmp loc_1007BBB  +
retn   +
push 80041006h  +
call sub_1006660  +
and dword ptr [ebp-4] 0 +
mov eax offset loc_1007BA5 +
retn   +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea eax [ebp-24h] +
push eax  +
call ds:VariantClear  +
push eax  +
call sub_1005D9E  +
xor eax eax +
call __EH_epilog3  +
retn 10h  +
***
call __EH_prolog3_catch  +
and dword ptr [ebp-4] 0 +
mov eax offset loc_1007C46 +
retn   +
***
call __EH_prolog3_catch  +
lea ecx [ebp-14h] +
call ??0CHString@@QAE@XZ  +
xor eax eax +
mov [ebp-4] eax +
cmp [ebp+8] eax +
jz loc_1007E47  +
cmp [ebp+0Ch] eax +
jz loc_1007E47  +
mov byte ptr [ebp-4] 1 +
push offset a16010101000000  +
lea eax [ebp-14h] +
push eax  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call sub_1007ABF  +
test eax eax +
jz loc_1007E51  +
push 4  +
lea eax [ebp+0Ch] +
push eax  +
lea ecx [ebp-14h] +
call ?Left@CHString@@QBE?AV1@H@Z  +
push 2  +
pop ebx  +
mov [ebp-4] bl +
mov eax [eax] +
push 0Ah  +
pop edi  +
push edi  +
push eax  +
call sub_100ABD5  +
mov esi [ebp+10h] +
mov [esi] ax +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp+0Ch] +
call ??1CHString@@QAE@XZ  +
push ebx  +
push 4  +
lea eax [ebp+0Ch] +
push eax  +
lea ecx [ebp-14h] +
call ?Mid@CHString@@QBE?AV1@HH@Z  +
mov byte ptr [ebp-4] 3 +
mov eax [eax] +
push edi  +
push eax  +
call sub_100ABD5  +
mov [esi+2] ax +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp+0Ch] +
call ??1CHString@@QAE@XZ  +
xor eax eax +
mov [esi+4] ax +
push ebx  +
push 6  +
lea eax [ebp+0Ch] +
push eax  +
lea ecx [ebp-14h] +
call ?Mid@CHString@@QBE?AV1@HH@Z  +
mov byte ptr [ebp-4] 4 +
mov eax [eax] +
push edi  +
push eax  +
call sub_100ABD5  +
mov [esi+6] ax +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp+0Ch] +
call ??1CHString@@QAE@XZ  +
push ebx  +
push 8  +
lea eax [ebp+0Ch] +
push eax  +
lea ecx [ebp-14h] +
call ?Mid@CHString@@QBE?AV1@HH@Z  +
mov byte ptr [ebp-4] 5 +
mov eax [eax] +
push edi  +
push eax  +
call sub_100ABD5  +
mov [esi+8] ax +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp+0Ch] +
call ??1CHString@@QAE@XZ  +
push ebx  +
push edi  +
lea eax [ebp+0Ch] +
push eax  +
lea ecx [ebp-14h] +
call ?Mid@CHString@@QBE?AV1@HH@Z  +
mov byte ptr [ebp-4] 6 +
mov eax [eax] +
push edi  +
push eax  +
call sub_100ABD5  +
mov [esi+0Ah] ax +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp+0Ch] +
call ??1CHString@@QAE@XZ  +
push ebx  +
push 0Ch  +
lea eax [ebp+0Ch] +
push eax  +
lea ecx [ebp-14h] +
call ?Mid@CHString@@QBE?AV1@HH@Z  +
mov byte ptr [ebp-4] 7 +
mov eax [eax] +
push edi  +
push eax  +
call sub_100ABD5  +
mov [esi+0Ch] ax +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp+0Ch] +
call ??1CHString@@QAE@XZ  +
push 6  +
push 0Fh  +
lea eax [ebp+0Ch] +
push eax  +
lea ecx [ebp-14h] +
call ?Mid@CHString@@QBE?AV1@HH@Z  +
mov byte ptr [ebp-4] 8 +
mov eax [eax] +
push edi  +
push eax  +
call sub_100ABD5  +
mov [esi+0Eh] ax +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp+0Ch] +
call ??1CHString@@QAE@XZ  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-14h] +
call ??1CHString@@QAE@XZ  +
xor eax eax +
inc eax  +
jmp loc_1007E5F  +
add byte ptr ds:loc_1007E51[eax] bh +
retn   +
push 80041006h  +
call sub_1006660  +
and dword ptr [ebp-4] 0 +
mov eax offset loc_1007E51 +
retn   +
push 80041008h  +
call sub_1006660  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-14h] +
call ??1CHString@@QAE@XZ  +
xor eax eax +
call __EH_epilog3  +
retn 0Ch  +
***
call __EH_prolog3_catch  +
lea eax [ebp-24h] +
push eax  +
call ds:VariantInit  +
xor esi esi +
mov [ebp-4] esi +
push esi  +
call ds:SetLastError  +
cmp [ebp+8] esi +
jz loc_1007F4A  +
cmp [ebp+10h] esi +
jz loc_1007F4A  +
cmp [ebp+14h] esi +
jz loc_1007F4A  +
mov byte ptr [ebp-4] 1 +
cmp [ebp+1Ch] esi +
jz loc_1007EBD  +
push dword ptr [ebp+1Ch]  +
mov ecx [ebp+18h] +
call ??4CHString@@QAEABV0@PBG@Z  +
lea eax [ebp-24h] +
push eax  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push offset aGetstringvalue  +
push dword ptr [ebp+8]  +
call sub_1006B68  +
cmp eax esi +
jge loc_1007EDE  +
push eax  +
jmp loc_1007F4F  +
push 8  +
pop eax  +
cmp ax [ebp-24h] +
jnz loc_1007F4A  +
lea eax [ebp-24h] +
push eax  +
lea ecx [ebp+1Ch] +
call sub_10065F6  +
mov byte ptr [ebp-4] 2 +
cmp [eax] esi +
jz loc_1007F01  +
mov eax [eax] +
mov eax [eax] +
jmp loc_1007F03  +
xor eax eax +
push eax  +
mov ecx [ebp+18h] +
call ??4CHString@@QAEABV0@PBG@Z  +
mov byte ptr [ebp-4] 1 +
mov ecx [ebp+1Ch] +
cmp ecx esi +
jz loc_1007F1F  +
call sub_1002978  +
mov [ebp+1Ch] esi +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea eax [ebp-24h] +
push eax  +
call ds:VariantClear  +
push eax  +
call sub_1005D9E  +
xor eax eax +
inc eax  +
jmp loc_1007F6A  +
mov eax offset loc_1007F54 +
retn   +
push 80041008h  +
call sub_1006660  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea eax [ebp-24h] +
push eax  +
call ds:VariantClear  +
push eax  +
call sub_1005D9E  +
xor eax eax +
call __EH_epilog3  +
retn 18h  +
***
call __EH_prolog3_catch  +
xor esi esi +
mov [ebp-24h] esi +
lea ecx [ebp-14h] +
call ??0CHString@@QAE@XZ  +
mov [ebp-4] esi +
mov [ebp-1Ch] esi +
mov [ebp-18h] esi +
push esi  +
call ds:SetLastError  +
mov edi [ebp+8] +
cmp edi esi +
jnz loc_1007FC7  +
push 80041008h  +
call sub_1006660  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-14h] +
call ??1CHString@@QAE@XZ  +
xor eax eax +
call __EH_epilog3  +
retn 8  +
mov byte ptr [ebp-4] 1 +
push offset aWin32_operatin  +
lea ecx [ebp+8] +
call sub_1002900  +
mov byte ptr [ebp-4] 2 +
cmp [eax] esi +
jz loc_1007FE6  +
mov eax [eax] +
mov eax [eax] +
jmp loc_1007FE8  +
xor eax eax +
mov ecx [edi] +
lea edx [ebp-18h] +
push edx  +
push esi  +
push 30h  +
push eax  +
push edi  +
call dword ptr [ecx+48h]  +
mov edi eax +
mov byte ptr [ebp-4] 1 +
mov ecx [ebp+8] +
cmp ecx esi +
jz loc_100800B  +
call sub_1002978  +
mov [ebp+8] esi +
cmp edi esi +
jge loc_1008015  +
push edi  +
call sub_100870D  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp-18h]  +
call sub_1005E50  +
cmp eax esi +
jge loc_100802A  +
push eax  +
call sub_100870D  +
mov eax [ebp-18h] +
mov ecx [eax] +
lea edx [ebp-24h] +
push edx  +
lea edx [ebp-1Ch] +
push edx  +
push 1  +
or ebx 0FFFFFFFFh +
push ebx  +
push eax  +
call dword ptr [ecx+10h]  +
cmp eax esi +
jge loc_100804B  +
push eax  +
call sub_100870D  +
cmp [ebp-24h] esi +
jnz loc_100807F  +
push 1  +
call sub_1006660  +
mov eax [ebp-1Ch] +
cmp eax esi +
jz loc_1008067  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp-1Ch] esi +
mov eax [ebp-18h] +
cmp eax esi +
jz loc_1008077  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp-18h] esi +
mov [ebp-4] ebx +
jmp loc_1007FB5  +
push 138Dh  +
call sub_100B337  +
push eax  +
lea eax [ebp-14h] +
push eax  +
push offset aVersion  +
push dword ptr [ebp-1Ch]  +
call sub_1007ABF  +
test eax eax +
mov eax [ebp-1Ch] +
jz loc_100805A  +
cmp eax esi +
jz loc_10080AF  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp-1Ch] esi +
mov eax [ebp-18h] +
cmp eax esi +
jz loc_10080BF  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp-18h] esi +
mov [ebp-20h] esi +
push 2Eh  +
lea ecx [ebp-14h] +
call ?Find@CHString@@QBEHG@Z  +
mov edi eax +
cmp edi ebx +
jnz loc_10080F3  +
push esi  +
push 0Ah  +
push dword ptr [ebp-14h]  +
call sub_100ADBB  +
test eax eax +
jz loc_1008077  +
push 0Ah  +
push dword ptr [ebp-14h]  +
call sub_100ABD5  +
mov [ebp-20h] eax +
jmp loc_1008212  +
push edi  +
push esi  +
lea eax [ebp+8] +
push eax  +
lea ecx [ebp-14h] +
call ?Mid@CHString@@QBE?AV1@HH@Z  +
mov byte ptr [ebp-4] 3 +
mov eax [eax] +
push esi  +
push 0Ah  +
push eax  +
call sub_100ADBB  +
mov ebx eax +
neg ebx  +
sbb bl bl +
inc bl  +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp+8] +
call ??1CHString@@QAE@XZ  +
test bl bl +
jnz loc_1007FB1  +
push edi  +
push esi  +
lea eax [ebp+8] +
push eax  +
lea ecx [ebp-14h] +
call ?Mid@CHString@@QBE?AV1@HH@Z  +
mov byte ptr [ebp-4] 4 +
mov eax [eax] +
push 0Ah  +
pop ebx  +
push ebx  +
push eax  +
call sub_100ABD5  +
mov [ebp-20h] eax +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp+8] +
call ??1CHString@@QAE@XZ  +
inc edi  +
push edi  +
lea eax [ebp+8] +
push eax  +
lea ecx [ebp-14h] +
call ?Mid@CHString@@QBE?AV1@H@Z  +
mov byte ptr [ebp-4] 5 +
push eax  +
lea ecx [ebp-14h] +
call ??4CHString@@QAEABV0@ABV0@@Z  +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp+8] +
call ??1CHString@@QAE@XZ  +
push 2Eh  +
lea ecx [ebp-14h] +
call ?Find@CHString@@QBEHG@Z  +
mov edi eax +
cmp edi 0FFFFFFFFh +
jnz loc_10081B0  +
push esi  +
push ebx  +
push dword ptr [ebp-14h]  +
call sub_100ADBB  +
test eax eax +
jz loc_1007FB1  +
push ebx  +
push dword ptr [ebp-14h]  +
call sub_100ABD5  +
mov esi eax +
jmp loc_1008212  +
push edi  +
push esi  +
lea eax [ebp+8] +
push eax  +
lea ecx [ebp-14h] +
call ?Mid@CHString@@QBE?AV1@HH@Z  +
mov byte ptr [ebp-4] 6 +
mov eax [eax] +
push esi  +
push ebx  +
push eax  +
call sub_100ADBB  +
mov ebx eax +
neg ebx  +
sbb bl bl +
inc bl  +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp+8] +
call ??1CHString@@QAE@XZ  +
test bl bl +
jnz loc_1007FB1  +
push edi  +
push esi  +
lea eax [ebp+8] +
push eax  +
lea ecx [ebp-14h] +
call ?Mid@CHString@@QBE?AV1@HH@Z  +
mov byte ptr [ebp-4] 7 +
mov eax [eax] +
push 0Ah  +
push eax  +
call sub_100ABD5  +
mov esi eax +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp+8] +
call ??1CHString@@QAE@XZ  +
mov eax [ebp-20h] +
imul eax eax +
add eax esi +
mov [ebp-28h] eax +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-14h] +
call ??1CHString@@QAE@XZ  +
mov eax [ebp-28h] +
jmp loc_1007FBF  +
***
cld   +
mov eax offset loc_1007FB1 +
retn   +
***
push 80041006h  +
call sub_1006660  +
mov eax [ebp-1Ch] +
xor esi esi +
cmp eax esi +
jz loc_1008283  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp-1Ch] esi +
mov eax [ebp-18h] +
cmp eax esi +
jz loc_1008293  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp-18h] esi +
mov [ebp-4] esi +
mov eax offset loc_1007FB1 +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
xor edx edx +
mov esi ecx +
xor edi edi +
mov eax [esi+34h] +
add eax edi +
add eax 204h +
and dword ptr [eax] 0FFFFEFFFh +
mov ecx [eax] +
cmp edx [ebp+arg_0] +
jb loc_10082CA  +
cmp edx [ebp+arg_4] +
jbe loc_10082D2  +
or ecx 1000h +
mov [eax] ecx +
add edi 294h +
inc edx  +
cmp edi 5280h +
jb loc_10082AE  +
cmp [ebp+arg_0] 0 +
jnz loc_1008305  +
mov eax [esi+4Ch] +
and eax 3 +
cmp al 3 +
jz loc_1008305  +
push offset String  +
call ds:__iob_func  +
add eax 20h +
push eax  +
call sub_1009FDF  +
push dword ptr [esi+30h]  +
push dword ptr [esi+4Ch]  +
push dword ptr [esi+34h]  +
push 20h  +
call sub_100D648  +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push esi  +
mov esi 3E9h +
push esi  +
call sub_100B337  +
push eax  +
call ds:__iob_func  +
add eax 20h +
push eax  +
call sub_1009FDF  +
inc esi  +
cmp esi 404h +
jbe loc_1008328  +
pop esi  +
retn   +
***
call __EH_prolog3_GS  +
mov eax [ebp+0Ch] +
mov ebx ecx +
lea ecx [ebp-1F4h] +
mov [ebp-1F8h] eax +
call ??0CHString@@QAE@XZ  +
xor eax eax +
mov [ebp-4] eax +
mov [ebp-1FCh] eax +
mov [ebp-200h] eax +
mov ecx 1E0h +
lea eax [ebp-1F0h] +
mov byte ptr [eax] 0 +
inc eax  +
dec ecx  +
jnz loc_100838F  +
push 8  +
mov edi offset aParser2 +
push edi  +
lea eax [ebp-1F0h] +
push eax  +
call sub_1009F16  +
and dword ptr [ebp-1DCh] 0 +
lea eax [ebx+48h] +
push 8  +
mov [ebp-1C4h] eax +
xor esi esi +
push edi  +
lea eax [ebp-1A0h] +
inc esi  +
push eax  +
mov [ebp-1D8h] esi +
mov dword ptr [ebp-1E0h] 20000h +
mov dword ptr [ebp-1E8h] 0Ah +
mov dword ptr [ebp-1D0h] offset a?_0 +
call sub_1009F16  +
and dword ptr [ebp-18Ch] 0 +
push 8  +
push edi  +
lea eax [ebp-150h] +
push eax  +
mov [ebp-188h] esi +
mov dword ptr [ebp-190h] 100C0h +
mov [ebp-198h] esi +
mov dword ptr [ebp-180h] offset aS_6 +
call sub_1009F16  +
and dword ptr [ebp-13Ch] 0 +
push 8  +
push edi  +
lea eax [ebp-100h] +
push eax  +
mov [ebp-138h] esi +
mov dword ptr [ebp-140h] 100C0h +
mov [ebp-148h] esi +
mov dword ptr [ebp-130h] offset aU +
call sub_1009F16  +
and dword ptr [ebp-0ECh] 0 +
push 8  +
push edi  +
lea eax [ebp-0B0h] +
push eax  +
mov [ebp-0E8h] esi +
mov dword ptr [ebp-0F0h] 10010h +
mov [ebp-0F8h] esi +
mov dword ptr [ebp-0E0h] offset aP +
call sub_1009F16  +
and dword ptr [ebp-9Ch] 0 +
push 7Eh  +
mov [ebp-98h] esi +
mov dword ptr [ebp-0A0h] 100C2h +
mov [ebp-0A8h] esi +
mov dword ptr [ebp-90h] offset aFo +
call sub_100B337  +
push 8  +
mov [ebp-88h] eax +
push edi  +
lea eax [ebp-60h] +
push eax  +
call sub_1009F16  +
xor edi edi +
push edi  +
lea eax [ebp-1FCh] +
mov [ebp-34h] eax +
lea eax [ebp-1F0h] +
push eax  +
push 6  +
push 0FFFFFFFFh  +
push dword ptr [ebp-1F8h]  +
mov [ebp-48h] esi +
push dword ptr [ebp+8]  +
mov [ebp-50h] edi +
mov [ebp-4Ch] edi +
mov dword ptr [ebp-58h] 0Ah +
mov dword ptr [ebp-40h] offset aNh +
call sub_100E548  +
test eax eax +
jnz loc_100852B  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-1F4h] +
call ??1CHString@@QAE@XZ  +
xor eax eax +
call sub_1008BDD  +
retn 8  +
cmp [ebp-0D4h] edi +
jnz loc_1008539  +
mov [ebp-200h] esi +
push dword ptr [ebp-174h]  +
mov ecx ebx +
call ??4CHString@@QAEABV0@PBG@Z  +
push dword ptr [ebp-124h]  +
lea ecx [ebx+4] +
call ??4CHString@@QAEABV0@PBG@Z  +
push dword ptr [ebp-0D4h]  +
lea ecx [ebx+8] +
mov [ebp-1F8h] ecx +
call ??4CHString@@QAEABV0@PBG@Z  +
push dword ptr [ebp-84h]  +
lea ecx [ebp-1F4h] +
call ??4CHString@@QAEABV0@PBG@Z  +
lea eax [ebp-174h] +
push eax  +
call sub_1009B84  +
lea eax [ebp-124h] +
push eax  +
call sub_1009B84  +
lea eax [ebp-0D4h] +
push eax  +
call sub_1009B84  +
lea eax [ebp-84h] +
push eax  +
call sub_1009B84  +
mov eax [ebx+48h] +
cmp eax edi +
jz loc_10085E9  +
cmp dword ptr [ebp+8] 2 +
jbe loc_10085E9  +
push 800401E4h  +
call ds:SetLastError  +
push 1FBh  +
call sub_100B337  +
push eax  +
call sub_100937E  +
xor esi esi +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-1F4h] +
call ??1CHString@@QAE@XZ  +
mov eax esi +
jmp loc_1008523  +
cmp eax esi +
jz loc_10085D3  +
cmp [ebp-184h] edi +
jnz loc_1008604  +
cmp [ebp-134h] edi +
jz loc_100860C  +
push 1F5h  +
jmp loc_10085C6  +
cmp [ebp-134h] edi +
jnz loc_100861B  +
cmp [ebp-0E4h] edi +
jz loc_100861B  +
push 1F6h  +
jmp loc_10085C6  +
push 7Fh  +
mov [ebx+4Ch] esi +
call sub_100B337  +
mov edi ds:_wcsicmp +
push eax  +
push dword ptr [ebp-1F4h]  +
call edi  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_100863F  +
mov [ebx+4Ch] esi +
jmp loc_1008681  +
push 80h  +
call sub_100B337  +
push eax  +
push dword ptr [ebp-1F4h]  +
call edi  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_1008661  +
mov dword ptr [ebx+4Ch] 2 +
jmp loc_1008681  +
push 81h  +
call sub_100B337  +
push eax  +
push dword ptr [ebp-1F4h]  +
call edi  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_1008681  +
mov dword ptr [ebx+4Ch] 3 +
cmp [ebp-1FCh] esi +
jnz loc_10086A2  +
mov eax [ebx+4Ch] +
cmp eax esi +
jnz loc_100869A  +
push 1F9h  +
jmp loc_10085C6  +
or eax 1000h +
mov [ebx+4Ch] eax +
xor eax eax +
cmp [ebp-0E4h] eax +
jz loc_10086E1  +
mov ecx [ebp-1F8h] +
mov edi offset Buffer +
push edi  +
call ?Compare@CHString@@QBEHPBG@Z  +
test eax eax +
jz loc_10086D9  +
cmp [ebp-200h] esi +
jnz loc_10085D3  +
mov ecx [ebp-1F8h] +
push edi  +
call ??4CHString@@QAEABV0@PBG@Z  +
mov [ebx+38h] esi +
jmp loc_10085D3  +
cmp [ebp-184h] eax +
jnz loc_10086F5  +
cmp [ebp-134h] eax +
jz loc_10085D3  +
mov ecx [ebp-1F8h] +
mov [ebx+38h] esi +
call ?Empty@CHString@@QAEXXZ  +
jmp loc_10085D3  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+arg_0]  +
call loc_100878C  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
mov esi ecx +
and dword ptr [esi+0Ch] 0 +
mov [esi+4] eax +
mov eax [ebp+arg_4] +
mov dword ptr [esi] offset off_1001BCC +
mov [esi+8] eax +
test eax eax +
jz loc_1008753  +
cmp [ebp+arg_8] 0 +
jz loc_1008753  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
mov eax esi +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi+8] +
mov dword ptr [esi] offset off_1001BCC +
test eax eax +
jz loc_1008777  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov esi [esi+0Ch] +
test esi esi +
jz loc_1008785  +
push esi  +
call ds:LocalFree  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push 0  +
push dword ptr [ebp+0Ch]  +
lea ecx [ebp-10h] +
push dword ptr [ebp+8]  +
call sub_1008725  +
push offset dword_1010758  +
lea eax [ebp-10h] +
push eax  +
call _CxxThrowException  +
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_1001BCC +
mov ecx [eax+4] +
mov [esi+4] ecx +
mov eax [eax+8] +
and dword ptr [esi+0Ch] 0 +
mov [esi+8] eax +
test eax eax +
jz loc_10087E3  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_100875F  +
test byte ptr [ebp+8] 1 +
jz loc_1008809  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
xor eax eax +
jmp loc_1008831  +
test eax eax +
jnz loc_1008836  +
mov ecx [esi] +
test ecx ecx +
jz loc_100882E  +
call ecx  +
add esi 4 +
cmp esi [ebp+arg_4] +
jb loc_1008822  +
pop esi  +
pop ebp  +
retn   +
***
mov eax dword_1012090 +
push offset dword_1012080  +
push dword_101208C  +
mov dword_1012080 eax +
push offset dword_1012070  +
push offset dword_1012074  +
push offset dword_101206C  +
call ds:__wgetmainargs  +
add esp 14h +
mov dword_101207C eax +
retn   +
***
call __SEH_prolog4  +
xor ebx ebx +
mov [ebp+ms_exc.disabled] ebx +
mov eax large fs:18h +
mov esi [eax+4] +
mov [ebp+var_1C] ebx +
mov edi offset Destination +
push ebx  +
push esi  +
push edi  +
call ds:InterlockedCompareExchange  +
cmp eax ebx +
jz loc_10088BE  +
cmp eax esi +
jnz loc_10088B1  +
xor esi esi +
inc esi  +
mov [ebp+var_1C] esi +
jmp loc_10088C1  +
push 3E8h  +
call ds:Sleep  +
jmp loc_1008898  +
xor esi esi +
inc esi  +
mov eax dword_10124E0 +
cmp eax esi +
jnz loc_10088D4  +
push 1Fh  +
call _amsg_exit  +
pop ecx  +
jmp loc_100890F  +
mov eax dword_10124E0 +
test eax eax +
jnz loc_1008909  +
mov dword_10124E0 esi +
push offset dword_10012AC  +
push offset dword_10012A0  +
call sub_1008815  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_100890F  +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov eax 0FFh +
jmp loc_10089D9  +
mov dword_1012088 esi +
mov eax dword_10124E0 +
cmp eax esi +
jnz loc_1008933  +
push offset dword_100129C  +
push offset dword_1001294  +
call _initterm  +
pop ecx  +
pop ecx  +
mov dword_10124E0 2 +
cmp [ebp+var_1C] ebx +
jnz loc_1008940  +
push ebx  +
push edi  +
call ds:InterlockedExchange  +
cmp dword_10124E8 ebx +
jz loc_1008961  +
push offset dword_10124E8  +
call sub_1008E79  +
pop ecx  +
test eax eax +
jz loc_1008961  +
push ebx  +
push 2  +
push ebx  +
call dword_10124E8  +
push dword_1012070  +
push dword_1012074  +
push dword_101206C  +
call sub_1004F94  +
add esp 0Ch +
mov dword_1012084 eax +
cmp dword_1012078 ebx +
jnz loc_10089BF  +
push eax  +
call ds:exit  +
mov eax [ebp-14h] +
mov ecx [eax] +
mov ecx [ecx] +
mov [ebp-20h] ecx +
push eax  +
push ecx  +
call _XcptFilter  +
pop ecx  +
pop ecx  +
retn   +
mov esp [ebp-18h] +
mov eax [ebp-20h] +
mov dword_1012084 eax +
xor ebx ebx +
cmp dword_1012078 ebx +
jnz loc_10089BF  +
push eax  +
call ds:_exit  +
cmp dword_1012088 ebx +
jnz loc_10089CD  +
call ds:_cexit  +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov eax dword_1012084 +
call __SEH_epilog4  +
retn   +
***
mov eax 5A4Dh +
cmp ds:1000000h ax +
jz loc_10089F6  +
xor eax eax +
jmp loc_1008A43  +
mov eax ds:100003Ch +
lea eax [eax+1000000h] +
cmp dword ptr [eax] 4550h +
jnz loc_10089F2  +
movzx ecx word ptr [eax+18h] +
cmp ecx 10Bh +
jz loc_1008A30  +
cmp ecx 20Bh +
jnz loc_10089F2  +
cmp dword ptr [eax+84h] 0Eh +
jbe loc_10089F2  +
xor ecx ecx +
cmp [eax+0F8h] ecx +
jmp loc_1008A3E  +
cmp dword ptr [eax+74h] 0Eh +
jbe loc_10089F2  +
xor ecx ecx +
cmp [eax+0E8h] ecx +
setnz cl  +
mov eax ecx +
push 1  +
mov dword_1012078 eax +
call sub_1009012  +
push eax  +
call ds:__set_app_type  +
or dword_10124D8 0FFFFFFFFh +
or dword_10124DC 0FFFFFFFFh +
pop ecx  +
pop ecx  +
call ds:__p__fmode  +
mov ecx dword_1012098 +
mov [eax] ecx +
call ds:__p__commode  +
mov ecx dword_1012094 +
mov [eax] ecx +
call sub_1008FA4  +
cmp dword_1012058 0 +
jnz loc_1008A9C  +
push offset sub_1008FA4  +
call ds:__setusermatherr  +
pop ecx  +
call sub_1008F8C  +
xor eax eax +
retn   +
***
call sub_1009051  +
jmp sub_1008876  +
***
jmp ds:__CxxFrameHandler3  +
***
cmp ecx dword_101203C +
jnz loc_1008ACE  +
retn 0  +
jmp loc_10090E7  +
***
lea eax [esp+4+arg_0] +
sub esp [esp+0Ch] +
push ebx  +
push esi  +
push edi  +
mov [eax] ebp +
mov ebp eax +
mov eax dword_101203C +
xor eax ebp +
push eax  +
push dword ptr [ebp-4]  +
mov dword ptr [ebp-4] 0FFFFFFFFh +
lea eax [ebp-0Ch] +
mov large fs:0 eax +
retn   +
***
lea eax [esp+4+arg_0] +
sub esp [esp+0Ch] +
push ebx  +
push esi  +
push edi  +
mov [eax] ebp +
mov ebp eax +
mov eax dword_101203C +
xor eax ebp +
push eax  +
mov [ebp-10h] esp +
push dword ptr [ebp-4]  +
mov dword ptr [ebp-4] 0FFFFFFFFh +
lea eax [ebp-0Ch] +
mov large fs:0 eax +
retn   +
***
lea eax [esp+4+arg_0] +
sub esp [esp+0Ch] +
push ebx  +
push esi  +
push edi  +
mov [eax] ebp +
mov ebp eax +
mov eax dword_101203C +
xor eax ebp +
push eax  +
mov [ebp-10h] eax +
push dword ptr [ebp-4]  +
mov dword ptr [ebp-4] 0FFFFFFFFh +
lea eax [ebp-0Ch] +
mov large fs:0 eax +
retn   +
***
lea eax [esp+4+arg_0] +
sub esp [esp+0Ch] +
push ebx  +
push esi  +
push edi  +
mov [eax] ebp +
mov ebp eax +
mov eax dword_101203C +
xor eax ebp +
push eax  +
mov [ebp-14h] eax +
mov [ebp-10h] esp +
push dword ptr [ebp-4]  +
mov dword ptr [ebp-4] 0FFFFFFFFh +
lea eax [ebp-0Ch] +
mov large fs:0 eax +
retn   +
***
mov ecx [ebp-0Ch] +
mov large fs:0 ecx +
pop ecx  +
pop edi  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
push ecx  +
retn   +
***
mov ecx [ebp-10h] +
xor ecx ebp +
call sub_1008AC3  +
jmp __EH_epilog3  +
***
mov ecx [ebp-14h] +
xor ecx ebp +
call sub_1008AC3  +
jmp __EH_epilog3  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call ds:??1type_info@@UAE@XZ  +
test byte ptr [ebp+8] 1 +
jz loc_1008C5C  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call __SEH_prolog4  +
and [ebp+ms_exc.disabled] 0 +
dec [ebp+arg_8]  +
js loc_1008CB8  +
mov ecx [ebp+arg_0] +
sub ecx [ebp+arg_4] +
mov [ebp+arg_0] ecx +
call [ebp+arg_C]  +
jmp loc_1008C78  +
mov eax [ebp-14h] +
mov [ebp-1Ch] eax +
mov eax [ebp-1Ch] +
mov eax [eax] +
mov [ebp-20h] eax +
mov eax [ebp-20h] +
cmp dword ptr [eax] 0E06D7363h +
jz loc_1008CAF  +
mov dword ptr [ebp-24h] 0 +
mov eax [ebp-24h] +
retn   +
call ds:?terminate@@YAXXZ  +
mov esp [ebp-18h] +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
call __SEH_epilog4  +
retn 10h  +
***
call __SEH_prolog4  +
cmp dword ptr [ebp-1Ch] 0 +
jnz $LN9  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call sub_1008C68  +
retn   +
***
push ecx  +
lea ecx [esp+8] +
sub ecx eax +
and ecx 0Fh +
add eax ecx +
sbb ecx ecx +
or eax ecx +
pop ecx  +
jmp __alloca_probe  +
***
push ecx  +
lea ecx [esp+8] +
sub ecx eax +
and ecx 7 +
add eax ecx +
sbb ecx ecx +
or eax ecx +
pop ecx  +
jmp __alloca_probe  +
***
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov eax [eax] +
cmp dword ptr [eax] 0E06D7363h +
jnz loc_1008DBA  +
cmp dword ptr [eax+10h] 3 +
jnz loc_1008DBA  +
mov eax [eax+14h] +
cmp eax 19930520h +
jz loc_1008DB4  +
cmp eax 19930521h +
jz loc_1008DB4  +
cmp eax 19930522h +
jz loc_1008DB4  +
cmp eax 1994000h +
jnz loc_1008DBA  +
call ds:?terminate@@YAXXZ  +
xor eax eax +
pop ebp  +
retn 4  +
***
push (offset byte_1008D7C+1)  +
call ds:SetUnhandledExceptionFilter  +
xor eax eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
mov eax 5A4Dh +
cmp [ecx] ax +
jz loc_1008E06  +
xor eax eax +
pop ebp  +
retn   +
mov eax [ecx+3Ch] +
add eax ecx +
cmp dword ptr [eax] 4550h +
jnz loc_1008E02  +
xor edx edx +
mov ecx 10Bh +
cmp [eax+18h] cx +
setz dl  +
mov eax edx +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [eax+3Ch] +
add ecx eax +
movzx eax word ptr [ecx+14h] +
push ebx  +
push esi  +
movzx esi word ptr [ecx+6] +
xor edx edx +
push edi  +
lea eax [eax+ecx+18h] +
test esi esi +
jbe loc_1008E6D  +
mov edi [ebp+arg_4] +
mov ecx [eax+0Ch] +
cmp edi ecx +
jb loc_1008E65  +
mov ebx [eax+8] +
add ebx ecx +
cmp edi ebx +
jb loc_1008E6F  +
inc edx  +
add eax 28h +
cmp edx esi +
jb loc_1008E55  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
call __SEH_prolog4  +
and [ebp+ms_exc.disabled] 0 +
mov esi 1000000h +
push esi  +
call sub_1008DF0  +
pop ecx  +
test eax eax +
jz loc_1008ED6  +
mov eax [ebp+arg_0] +
sub eax esi +
push eax  +
push esi  +
call sub_1008E30  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1008ED6  +
mov eax [eax+24h] +
shr eax 1Fh +
not eax  +
and eax 1 +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
jmp loc_1008EDF  +
mov eax [ebp-14h] +
mov eax [eax] +
mov eax [eax] +
xor ecx ecx +
cmp eax 0C0000005h +
setz cl  +
mov eax ecx +
retn   +
mov esp [ebp-18h] +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
xor eax eax +
call __SEH_epilog4  +
retn   +
***
mov eax [esp+8+arg_4] +
mov ecx [ebp-10h] +
mov large fs:0 ecx +
pop ecx  +
pop edi  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
push ecx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push offset sub_1008AC3  +
push offset dword_101203C  +
call _except_handler4_common  +
add esp 18h +
pop ebp  +
retn   +
***
call ds:_controlfp  +
pop ecx  +
pop ecx  +
retn   +
***
retn   +
***
call __SEH_prolog4  +
xor eax eax +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_1009005  +
cmp ecx 0FFFFFFFFh +
jz loc_1009005  +
and [ebp+ms_exc.disabled] eax +
mov edx 5A4Dh +
cmp [ecx] dx +
jnz loc_1008FFE  +
mov edx [ecx+3Ch] +
test edx edx +
jl loc_1008FFE  +
cmp edx 10000000h +
jnb loc_1008FFE  +
lea eax [edx+ecx] +
mov [ebp+var_1C] eax +
cmp dword ptr [eax] 4550h +
jz loc_1008FFE  +
jmp loc_1008FF9  +
xor eax eax +
inc eax  +
retn   +
mov esp [ebp-18h] +
xor eax eax +
mov [ebp+var_1C] eax +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
call __SEH_epilog4  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
call ds:GetModuleHandleA  +
test eax eax +
jz loc_1009047  +
push eax  +
call sub_1008FAC  +
test eax eax +
jz loc_1009047  +
movzx eax word ptr [eax+5Ch] +
cmp ax 2 +
jnz loc_100903C  +
push 2  +
pop eax  +
pop ebp  +
retn   +
cmp ax 3 +
jnz loc_1009047  +
xor eax eax +
inc eax  +
pop ebp  +
retn   +
mov eax [ebp+arg_0] +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov eax dword_101203C +
and [ebp+SystemTimeAsFileTime.dwLowDateTime] 0 +
and [ebp+SystemTimeAsFileTime.dwHighDateTime] 0 +
push ebx  +
push edi  +
mov edi 0BB40E64Eh +
mov ebx 0FFFF0000h +
cmp eax edi +
jz loc_1009083  +
test eax ebx +
jz loc_1009083  +
not eax  +
mov dword_1012040 eax +
jmp loc_10090DE  +
push esi  +
lea eax [ebp+SystemTimeAsFileTime] +
push eax  +
call ds:GetSystemTimeAsFileTime  +
mov esi [ebp+SystemTimeAsFileTime.dwHighDateTime] +
xor esi [ebp+SystemTimeAsFileTime.dwLowDateTime] +
call ds:GetCurrentProcessId  +
xor esi eax +
call ds:GetCurrentThreadId  +
xor esi eax +
call ds:GetTickCount  +
xor esi eax +
lea eax [ebp+PerformanceCount] +
push eax  +
call ds:QueryPerformanceCounter  +
mov eax dword ptr [ebp+PerformanceCount+4] +
xor eax dword ptr [ebp+PerformanceCount] +
xor esi eax +
cmp esi edi +
jz loc_10090CA  +
test dword_101203C ebx +
jnz loc_10090CF  +
mov esi 0BB40E64Fh +
mov dword_101203C esi +
not esi  +
mov dword_1012040 esi +
pop esi  +
pop edi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 328h +
mov dword_10121A0 eax +
mov dword_101219C ecx +
mov dword_1012198 edx +
mov dword_1012194 ebx +
mov dword_1012190 esi +
mov dword_101218C edi +
mov word_10121B8 ss +
mov word_10121AC cs +
mov word_1012188 ds +
mov word_1012184 es +
mov word_1012180 fs +
mov word_101217C gs +
pushf   +
pop dword_10121B0  +
mov eax [ebp+0] +
mov dword_10121A4 eax +
mov eax [ebp+4] +
mov dword_10121A8 eax +
lea eax [ebp+8] +
mov dword_10121B4 eax +
mov eax [ebp-320h] +
mov dword_10120F0 10001h +
mov eax dword_10121A8 +
mov dword_10120AC eax +
mov dword_10120A0 0C0000409h +
mov dword_10120A4 1 +
mov eax dword_101203C +
mov [ebp-328h] eax +
mov eax dword_1012040 +
mov [ebp-324h] eax +
push 0  +
call ds:SetUnhandledExceptionFilter  +
push offset ExceptionInfo  +
call ds:UnhandledExceptionFilter  +
push 0C0000409h  +
call ds:GetCurrentProcess  +
push eax  +
call ds:TerminateProcess  +
leave   +
retn   +
***
push ecx  +
lea ecx [esp+4] +
sub ecx eax +
sbb eax eax +
not eax  +
and ecx eax +
mov eax esp +
and eax 0FFFFF000h +
cmp ecx eax +
jb cs20  +
mov eax ecx +
pop ecx  +
xchg eax esp +
mov eax [eax] +
mov [esp] eax +
retn   +
***
sub eax 1000h +
test [eax] eax +
jmp cs10  +
***
mov edi edi +
push edi  +
xor edi edi +
inc edi  +
cmp dword_10123C0 edi +
jnz loc_1009244  +
push dword_10123C8  +
call sub_100B3E9  +
test eax eax +
jnz loc_1009240  +
call ds:GetLastError  +
test eax eax +
jnz loc_10092D8  +
push 42Bh  +
jmp loc_10092D2  +
mov eax edi +
pop edi  +
retn   +
cmp dword_10123C8 0 +
jnz loc_1009228  +
call sub_100B40A  +
push eax  +
mov dword_10123C8 eax +
call sub_100B3E9  +
test eax eax +
jz loc_10092C6  +
push 0  +
push offset dword_1001BE0  +
push dword_10123C8  +
call sub_100B7CC  +
test eax eax +
jnz loc_10092C6  +
push 3  +
push dword_10123C8  +
call sub_100B997  +
cmp eax edi +
jnz loc_10092C6  +
push 3  +
push dword_10123C8  +
call sub_100B997  +
cmp eax 2 +
jnz loc_10092C6  +
push 3  +
push dword_10123C8  +
call sub_100B997  +
cmp eax 3 +
jnz loc_10092C6  +
push 0  +
mov dword_10123C0 edi +
call ds:SetThreadUILanguage  +
xor ecx ecx +
test ax ax +
setnz cl  +
pop edi  +
mov eax ecx +
retn   +
call ds:GetLastError  +
test eax eax +
jnz loc_10092D8  +
push 8  +
call ds:SetLastError  +
xor eax eax +
pop edi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword_10123C0 0 +
push esi  +
jz loc_1009346  +
push 3  +
push dword_10123C8  +
call sub_100BBA7  +
cmp eax [ebp+arg_0] +
jbe loc_1009346  +
push [ebp+arg_0]  +
push 3  +
push dword_10123C8  +
call sub_100C02D  +
test eax eax +
jz loc_1009346  +
push [ebp+arg_0]  +
push 3  +
push dword_10123C8  +
call sub_100BD5F  +
mov esi eax +
test esi esi +
jz loc_1009346  +
push 7  +
push offset aBuffer  +
push esi  +
call ds:_memicmp  +
add esp 0Ch +
test eax eax +
jnz loc_1009346  +
mov eax [esi+0Ch] +
jmp loc_1009348  +
xor eax eax +
pop esi  +
pop ebp  +
retn 4  +
***
mov eax dword_10123C8 +
test eax eax +
jz loc_1009373  +
push eax  +
call sub_100B3E9  +
test eax eax +
jz loc_1009373  +
push 0  +
push dword_10123C8  +
call sub_100BC14  +
retn   +
mov eax offset dword_1001BE0 +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ds:GetLastError +
push edi  +
call esi  +
cmp [ebp+lpString] 0 +
mov edi eax +
jnz loc_10093A7  +
call esi  +
test eax eax +
jnz loc_10093A3  +
push 57h  +
call ds:SetLastError  +
xor eax eax +
jmp loc_10093DA  +
call sub_100920B  +
test eax eax +
jz loc_10093A3  +
push 0  +
push [ebp+lpString]  +
push 0  +
push dword_10123C8  +
call sub_100BE4F  +
test eax eax +
jnz loc_10093D0  +
call esi  +
test eax eax +
jnz loc_10093A3  +
push 8  +
jmp loc_100939D  +
push edi  +
call ds:SetLastError  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push edi  +
xor edi edi +
mov [ebp+hMem] edi +
call sub_100920B  +
test eax eax +
jz loc_1009464  +
push ebx  +
push esi  +
mov esi ds:GetLastError +
push edi  +
push edi  +
lea eax [ebp+hMem] +
push eax  +
push edi  +
call esi  +
push eax  +
push edi  +
push 1300h  +
call ds:FormatMessageW  +
mov ebx ds:SetLastError +
test eax eax +
jz loc_100943E  +
cmp [ebp+hMem] edi +
jz loc_1009456  +
push [ebp+hMem]  +
call sub_100937E  +
push [ebp+hMem]  +
mov esi eax +
call ds:LocalFree  +
mov eax esi +
jmp loc_1009462  +
cmp [ebp+hMem] edi +
jz loc_1009456  +
push [ebp+hMem]  +
call ds:LocalFree  +
call esi  +
test eax eax +
jnz loc_1009456  +
push 8  +
call ebx  +
call esi  +
test eax eax +
jnz loc_1009460  +
push 8  +
call ebx  +
xor eax eax +
pop esi  +
pop ebx  +
pop edi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
call sub_10093E5  +
test eax eax +
jz loc_100948E  +
call sub_1009352  +
push eax  +
push [ebp+hConsoleOutput]  +
call sub_1009FDF  +
neg eax  +
sbb eax eax +
neg eax  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 120h +
mov eax dword_101203C +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
mov esi 11Ch +
push esi  +
lea eax [ebp+var_120] +
push 0  +
push eax  +
call memset  +
mov eax dword_1012060 +
add esp 0Ch +
push 3  +
mov [ebp+var_11C] eax +
mov eax dword_1012064 +
push 2  +
mov [ebp+var_118] eax +
mov ax word_10123CC +
push 0  +
mov [ebp+var_120] esi +
mov esi ds:VerSetConditionMask +
push 0  +
mov [ebp+var_C] ax +
call esi  +
push 3  +
push 1  +
push edx  +
push eax  +
call esi  +
push 3  +
push 20h  +
push edx  +
push eax  +
call esi  +
push edx  +
push eax  +
push 3  +
lea eax [ebp+var_120] +
push eax  +
call ds:VerifyVersionInfoW  +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop esi  +
call sub_1008AC3  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 1388h +
sbb eax eax +
inc eax  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
xor ebx ebx +
mov [ebp+Mode] ebx +
cmp [ebp+arg_0] ebx +
jnz loc_100956C  +
call ds:GetLastError  +
test eax eax +
jnz loc_1009568  +
push 57h  +
call ds:SetLastError  +
xor eax eax +
jmp loc_10095E9  +
push esi  +
push edi  +
push [ebp+arg_0]  +
call ds:_fileno  +
mov esi ds:_errno +
mov edi eax +
call esi  +
push edi  +
mov [eax] ebx +
call ds:_get_osfhandle  +
mov ebx eax +
pop ecx  +
pop ecx  +
cmp ebx 0FFFFFFFFh +
jz loc_10095DD  +
call esi  +
cmp dword ptr [eax] 9 +
jz loc_10095DD  +
push ebx  +
call ds:GetFileType  +
cmp eax 2 +
jnz loc_10095E5  +
sub edi 0 +
jz loc_10095B9  +
dec edi  +
jz loc_10095B5  +
dec edi  +
jnz loc_10095E5  +
push 0FFFFFFF4h  +
jmp loc_10095BB  +
push 0FFFFFFF5h  +
jmp loc_10095BB  +
push 0FFFFFFF6h  +
call ds:GetStdHandle  +
test eax eax +
jz loc_10095E5  +
cmp eax 0FFFFFFFFh +
jz loc_10095E5  +
lea ecx [ebp+Mode] +
push ecx  +
push eax  +
call ds:GetConsoleMode  +
neg eax  +
sbb eax eax +
neg eax  +
jmp loc_10095E7  +
push 6  +
call ds:SetLastError  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
call ds:GetUserDefaultLCID  +
mov edx [ebp+arg_0] +
test edx edx +
jz loc_1009608  +
and dword ptr [edx] 0 +
mov ecx eax +
and ecx 3FFh +
cmp cx 1 +
jz loc_1009634  +
cmp cx 0Dh +
jz loc_1009634  +
cmp cx 1Eh +
jz loc_1009634  +
cmp cx 39h +
jz loc_1009634  +
cmp cx 49h +
jz loc_1009634  +
cmp cx 29h +
jnz loc_1009643  +
test edx edx +
jz loc_100963E  +
mov dword ptr [edx] 1 +
mov eax 409h +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+lpString] 0 +
jnz loc_100965B  +
xor eax eax +
jmp loc_1009664  +
push [ebp+lpString]  +
call ds:lstrlenA  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+lpString] 0 +
jnz loc_100967C  +
xor eax eax +
jmp loc_1009685  +
push [ebp+lpString]  +
call ds:lstrlenW  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+lpString1] 0 +
jz loc_10096CC  +
cmp [ebp+lpString2] 0 +
jz loc_10096CC  +
mov eax [ebp+arg_C] +
xor ecx ecx +
cmp [ebp+arg_8] 1 +
setz cl  +
test eax eax +
jnz loc_10096B2  +
or eax 0FFFFFFFFh +
push eax  +
push [ebp+lpString2]  +
push eax  +
push [ebp+lpString1]  +
push ecx  +
call ds:GetThreadLocale  +
push eax  +
call ds:CompareStringW  +
dec eax  +
dec eax  +
jmp loc_10096E0  +
call ds:GetLastError  +
test eax eax +
jnz loc_10096DE  +
push 57h  +
call ds:SetLastError  +
xor eax eax +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+lpString1] 0 +
jz loc_1009727  +
cmp [ebp+lpString2] 0 +
jz loc_1009727  +
mov eax [ebp+arg_C] +
xor ecx ecx +
cmp [ebp+arg_8] 1 +
setz cl  +
test eax eax +
jnz loc_100970D  +
or eax 0FFFFFFFFh +
push eax  +
push [ebp+lpString2]  +
push eax  +
push [ebp+lpString1]  +
push ecx  +
call ds:GetThreadLocale  +
push eax  +
call ds:CompareStringA  +
dec eax  +
dec eax  +
jmp loc_100973B  +
call ds:GetLastError  +
test eax eax +
jnz loc_1009739  +
push 57h  +
call ds:SetLastError  +
xor eax eax +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
xor edi edi +
xor esi esi +
cmp [ebp+lpString] edi +
jz loc_1009808  +
mov eax [ebp+arg_8] +
cmp eax edi +
jz loc_1009808  +
mov ebx [ebp+arg_4] +
cmp ebx edi +
jnz loc_1009773  +
cmp [eax] edi +
jnz loc_1009808  +
mov eax [eax] +
cmp eax edi +
jz loc_1009781  +
cmp eax 1 +
jbe loc_10097EF  +
lea esi [eax-1] +
cmp ebx edi +
jz loc_1009798  +
cmp esi edi +
jz loc_1009798  +
lea eax [esi+esi+2] +
push eax  +
push edi  +
push ebx  +
call memset  +
add esp 0Ch +
or eax 0FFFFFFFFh +
cmp esi edi +
jz loc_10097AE  +
push edi  +
push [ebp+lpString]  +
call sub_100964C  +
cmp eax esi +
jle loc_10097AE  +
mov eax esi +
push esi  +
push ebx  +
push eax  +
push [ebp+lpString]  +
push edi  +
push 1  +
call ds:MultiByteToWideChar  +
cmp eax edi +
jnz loc_1009801  +
call ds:GetLastError  +
test eax eax +
jnz loc_10097D6  +
push 42Bh  +
call ds:SetLastError  +
cmp ebx edi +
jz loc_100981A  +
cmp esi edi +
jz loc_100981A  +
lea eax [esi+esi+2] +
push eax  +
push edi  +
push ebx  +
call memset  +
add esp 0Ch +
jmp loc_100981A  +
add eax eax +
push eax  +
push edi  +
push ebx  +
call memset  +
add esp 0Ch +
xor eax eax +
inc eax  +
jmp loc_100981C  +
mov ecx [ebp+arg_8] +
mov [ecx] eax +
jmp loc_10097FC  +
call ds:GetLastError  +
test eax eax +
jnz loc_100981A  +
push 57h  +
call ds:SetLastError  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+lpMem] 0 +
jnz loc_1009841  +
call ds:GetLastError  +
test eax eax +
jnz loc_1009863  +
push 57h  +
jmp loc_100985D  +
call ds:GetProcessHeap  +
test eax eax +
jz loc_1009863  +
push [ebp+lpMem]  +
push 0  +
push eax  +
call ds:HeapValidate  +
test eax eax +
jnz loc_1009865  +
push 6  +
call ds:SetLastError  +
xor eax eax +
pop ebp  +
retn 4  +
***
call __SEH_prolog4  +
cmp [ebp+dwBytes] 0 +
ja loc_1009894  +
call ds:GetLastError  +
test eax eax +
jnz loc_1009908  +
push 57h  +
call ds:SetLastError  +
jmp loc_1009908  +
call ds:GetProcessHeap  +
test eax eax +
jz loc_1009908  +
and [ebp+ms_exc.disabled] 0 +
push [ebp+dwBytes]  +
push 0Ch  +
push eax  +
call ds:HeapAlloc  +
mov [ebp+var_20] eax +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
jmp loc_100990A  +
mov eax [ebp-14h] +
mov eax [eax] +
mov eax [eax] +
mov [ebp-1Ch] eax +
xor eax eax +
inc eax  +
retn   +
mov esp [ebp-18h] +
cmp dword ptr [ebp-1Ch] 0C0000017h +
jz loc_10098EF  +
cmp dword ptr [ebp-1Ch] 0C0000005h +
jnz loc_10098EF  +
push 570h  +
call ds:SetLastError  +
call sub_10093E5  +
jmp loc_1009901  +
call ds:GetLastError  +
test eax eax +
jnz loc_1009901  +
push 8  +
call ds:SetLastError  +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
xor eax eax +
call __SEH_epilog4  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+lpMem] 0 +
jnz loc_1009939  +
call ds:GetLastError  +
test eax eax +
jnz loc_1009934  +
push 57h  +
call ds:SetLastError  +
or eax 0FFFFFFFFh +
jmp loc_100995B  +
push [ebp+lpMem]  +
call sub_1009828  +
test eax eax +
jz loc_1009934  +
call ds:GetProcessHeap  +
test eax eax +
jz loc_1009934  +
push [ebp+lpMem]  +
push 0  +
push eax  +
call ds:HeapSize  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov ebx eax +
mov esi edx +
xor eax eax +
xor edi edi +
test esi esi +
jz loc_1009994  +
cmp [ebp+arg_4] eax +
jz loc_1009990  +
mov dl [ebx] +
test dl dl +
jz loc_1009990  +
mov [ecx] dl +
inc ecx  +
inc ebx  +
dec esi  +
dec [ebp+arg_4]  +
inc edi  +
test esi esi +
jnz loc_1009978  +
test esi esi +
jnz loc_100999B  +
dec ecx  +
dec edi  +
mov eax 8007007Ah +
mov byte ptr [ecx] 0 +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_10099A7  +
mov [ecx] edi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov ebx eax +
mov esi edx +
xor eax eax +
xor edi edi +
test esi esi +
jz loc_10099E8  +
cmp [ebp+arg_4] eax +
jz loc_10099E4  +
movzx edx word ptr [ebx] +
test dx dx +
jz loc_10099E4  +
mov [ecx] dx +
inc ecx  +
inc ecx  +
inc ebx  +
inc ebx  +
dec esi  +
dec [ebp+arg_4]  +
inc edi  +
test esi esi +
jnz loc_10099C7  +
test esi esi +
jnz loc_10099F0  +
dec ecx  +
dec ecx  +
dec edi  +
mov eax 8007007Ah +
xor edx edx +
mov [ecx] dx +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_10099FE  +
mov [ecx] edi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push [ebp+arg_8]  +
mov esi eax +
push [ebp+arg_4]  +
xor ebx ebx +
dec esi  +
push esi  +
push edi  +
call ds:_vsnwprintf  +
add esp 10h +
test eax eax +
jl loc_1009A33  +
cmp eax esi +
ja loc_1009A33  +
jz loc_1009A38  +
jmp loc_1009A40  +
mov ebx 8007007Ah +
xor eax eax +
mov [edi+esi*2] ax +
mov eax esi +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_1009A49  +
mov [ecx] eax +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
test esi esi +
jnz loc_1009A71  +
call ds:GetLastError  +
test eax eax +
jnz loc_1009AB4  +
push 57h  +
jmp loc_1009AAE  +
push 0  +
push esi  +
call sub_100966D  +
test eax eax +
jz loc_1009AA9  +
mov ecx [ebp+arg_C] +
cmp ecx eax +
jnb loc_1009AA9  +
cmp [ebp+arg_8] 1 +
push dword ptr [ebp+wMatch]  +
lea eax [esi+ecx*2] +
push eax  +
jnz loc_1009A99  +
call ds:StrChrIW  +
jmp loc_1009A9F  +
call ds:StrChrW  +
test eax eax +
jz loc_1009AA9  +
sub eax esi +
sar eax 1 +
jmp loc_1009AB7  +
push 490h  +
call ds:SetLastError  +
or eax 0FFFFFFFFh +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+lpString] +
test edi edi +
jz loc_1009B28  +
mov ebx [ebp+arg_4] +
test ebx ebx +
jz loc_1009B28  +
push 0  +
push edi  +
call sub_100966D  +
push 0  +
push ebx  +
mov esi eax +
call sub_100966D  +
test eax eax +
jz loc_1009B1B  +
test esi esi +
jz loc_1009B1B  +
mov ecx [ebp+arg_C] +
cmp ecx esi +
jnb loc_1009B1B  +
sub esi ecx +
cmp esi eax +
jb loc_1009B1B  +
cmp [ebp+arg_8] 1 +
push ebx  +
lea eax [edi+ecx*2] +
push eax  +
jnz loc_1009B11  +
call ds:StrStrIW  +
jmp loc_1009B17  +
call ds:StrStrW  +
test eax eax +
jnz loc_1009B22  +
push 490h  +
jmp loc_1009B34  +
sub eax edi +
sar eax 1 +
jmp loc_1009B3D  +
call ds:GetLastError  +
test eax eax +
jnz loc_1009B3A  +
push 57h  +
call ds:SetLastError  +
or eax 0FFFFFFFFh +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
xor esi esi +
cmp [ebp+lpString] esi +
jz loc_1009B78  +
push esi  +
push [ebp+lpString]  +
call sub_100966D  +
test eax eax +
jz loc_1009B78  +
push esi  +
push esi  +
push esi  +
push esi  +
push 0FFFFFFFFh  +
push [ebp+lpString]  +
push esi  +
push 1  +
call ds:WideCharToMultiByte  +
dec eax  +
jmp loc_1009B7A  +
xor eax eax +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
test esi esi +
jnz loc_1009BA7  +
call ds:GetLastError  +
test eax eax +
jnz loc_1009BA3  +
push 57h  +
call ds:SetLastError  +
xor eax eax +
jmp loc_1009BF5  +
cmp dword ptr [esi] 0 +
jnz loc_1009BB1  +
xor eax eax +
inc eax  +
jmp loc_1009BF5  +
push ebx  +
call ds:GetProcessHeap  +
mov ebx eax +
test ebx ebx +
jz loc_1009BD5  +
push dword ptr [esi]  +
call sub_1009917  +
cmp eax 0FFFFFFFFh +
jnz loc_1009BD9  +
push 80004003h  +
call ds:SetLastError  +
xor eax eax +
jmp loc_1009BF4  +
push eax  +
push 0  +
push dword ptr [esi]  +
call memset  +
add esp 0Ch +
push dword ptr [esi]  +
push 0  +
push ebx  +
call ds:HeapFree  +
and dword ptr [esi] 0 +
pop ebx  +
pop esi  +
pop ebp  +
retn 4  +
***
call __SEH_prolog4  +
mov esi [ebp+arg_0] +
xor edi edi +
cmp esi edi +
jz loc_1009CC4  +
mov eax [esi] +
cmp eax edi +
jz loc_1009CC4  +
cmp [ebp+dwBytes] edi +
jnz loc_1009C32  +
push esi  +
call sub_1009B84  +
jmp loc_1009CD8  +
push eax  +
call sub_1009828  +
test eax eax +
jnz loc_1009C43  +
mov [esi] edi +
jmp loc_1009CD6  +
call ds:GetProcessHeap  +
cmp eax edi +
jz loc_1009CD6  +
mov [ebp+ms_exc.disabled] edi +
push [ebp+dwBytes]  +
push dword ptr [esi]  +
push 0Ch  +
push eax  +
call ds:HeapReAlloc  +
cmp eax edi +
jnz loc_1009C81  +
call ds:GetLastError  +
test eax eax +
jnz loc_1009C78  +
push 8  +
call ds:SetLastError  +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
jmp loc_1009CD6  +
mov [esi] eax +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
xor eax eax +
inc eax  +
jmp loc_1009CD8  +
mov eax [ebp-14h] +
mov eax [eax] +
mov eax [eax] +
mov [ebp-1Ch] eax +
xor eax eax +
inc eax  +
retn   +
mov esp [ebp-18h] +
cmp dword ptr [ebp-1Ch] 0C0000017h +
jz loc_1009C66  +
cmp dword ptr [ebp-1Ch] 0C0000005h +
jnz loc_1009C66  +
push 570h  +
call ds:SetLastError  +
call sub_10093E5  +
jmp loc_1009C78  +
call ds:GetLastError  +
test eax eax +
jnz loc_1009CD6  +
push 57h  +
call ds:SetLastError  +
xor eax eax +
call __SEH_epilog4  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_4] +
xor eax eax +
test edx edx +
jz loc_1009CFB  +
cmp edx 7FFFFFFFh +
jbe loc_1009D00  +
mov eax 80070057h +
test eax eax +
jl loc_1009D16  +
mov eax [ebp+arg_8] +
mov ecx [ebp+arg_0] +
push 7FFFFFFEh  +
push 0  +
call sub_1009964  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_4] +
xor eax eax +
test edx edx +
jz loc_1009D35  +
cmp edx 7FFFFFFFh +
jbe loc_1009D3A  +
mov eax 80070057h +
test eax eax +
jl loc_1009D50  +
mov eax [ebp+arg_8] +
mov ecx [ebp+arg_0] +
push 7FFFFFFEh  +
push 0  +
call sub_10099B3  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_4] +
push ebx  +
xor eax eax +
push edi  +
mov ebx 7FFFFFFFh +
test edx edx +
jz loc_1009D72  +
cmp edx ebx +
jbe loc_1009D77  +
mov eax 80070057h +
mov edi [ebp+arg_0] +
test eax eax +
jl loc_1009DAE  +
and [ebp+arg_4] 0 +
xor ecx ecx +
push esi  +
mov esi edx +
mov eax edi +
cmp edx ecx +
jz loc_1009D9B  +
cmp [eax] cx +
jz loc_1009D97  +
inc eax  +
inc eax  +
dec esi  +
jnz loc_1009D8D  +
cmp esi ecx +
jnz loc_1009DA4  +
mov [ebp+arg_4] 80070057h +
jmp loc_1009DA8  +
mov ecx edx +
sub ecx esi +
mov eax [ebp+arg_4] +
pop esi  +
jmp loc_1009DB0  +
xor ecx ecx +
test eax eax +
jl loc_1009DC4  +
mov eax [ebp+arg_8] +
push ebx  +
sub edx ecx +
push 0  +
lea ecx [edi+ecx*2] +
call sub_10099B3  +
pop edi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
cmp [ebp+arg_4] eax +
jz loc_1009DE4  +
cmp [ebp+arg_4] 7FFFFFFFh +
jbe loc_1009DE9  +
mov eax 80070057h +
test eax eax +
jl loc_1009E02  +
mov eax [ebp+arg_4] +
push edi  +
push [ebp+arg_C]  +
mov edi [ebp+arg_0] +
push [ebp+arg_8]  +
push 0  +
call sub_1009A0A  +
pop edi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
cmp [ebp+arg_4] eax +
jz loc_1009E20  +
cmp [ebp+arg_4] 7FFFFFFFh +
jbe loc_1009E25  +
mov eax 80070057h +
test eax eax +
jl loc_1009E3F  +
push edi  +
mov edi [ebp+arg_0] +
lea eax [ebp+arg_C] +
push eax  +
push [ebp+arg_8]  +
mov eax [ebp+arg_4] +
push 0  +
call sub_1009A0A  +
pop edi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push dword_10123C8  +
call sub_100B3E9  +
cmp eax 1 +
jnz loc_1009ED0  +
push edi  +
push 3  +
push dword_10123C8  +
call sub_100BBA7  +
mov edi eax +
test edi edi +
jz loc_1009EC5  +
push esi  +
lea esi [edi-1] +
push esi  +
push 3  +
push dword_10123C8  +
call sub_100C02D  +
cmp eax 10000h +
jnz loc_1009EBE  +
push esi  +
push 3  +
push dword_10123C8  +
call sub_100BD5F  +
mov [ebp+var_4] eax +
test eax eax +
jz loc_1009EBE  +
add eax 0Ch +
push eax  +
call sub_1009B84  +
lea eax [ebp+var_4] +
push eax  +
call sub_1009B84  +
push esi  +
push 3  +
push dword_10123C8  +
call sub_100BB70  +
dec edi  +
dec esi  +
test edi edi +
jnz loc_1009E74  +
pop esi  +
push offset dword_10123C8  +
call sub_100B47F  +
pop edi  +
cmp dword_10123C4 1 +
jnz loc_1009EDF  +
call ds:WSACleanup  +
xor eax eax +
inc eax  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_8]  +
mov esi [ebp+lpString] +
push 1  +
push [ebp+arg_4]  +
push esi  +
call sub_1009AC1  +
cmp eax 0FFFFFFFFh +
jnz loc_1009F09  +
xor eax eax +
jmp loc_1009F0C  +
lea eax [esi+eax*2] +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
jz loc_1009F49  +
cmp [ebp+arg_4] 0 +
jz loc_1009F49  +
cmp [ebp+arg_8] 0 +
jle loc_1009F49  +
push [ebp+arg_4]  +
push [ebp+arg_8]  +
push [ebp+arg_0]  +
call sub_1009CE5  +
test eax eax +
jge loc_1009F4F  +
movzx eax ax +
push eax  +
call ds:SetLastError  +
xor eax eax +
pop ebp  +
retn 0Ch  +
xor eax eax +
inc eax  +
jmp loc_1009F4B  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
jz loc_1009F8C  +
cmp [ebp+arg_4] 0 +
jz loc_1009F8C  +
cmp [ebp+arg_8] 0 +
jle loc_1009F8C  +
push [ebp+arg_4]  +
push [ebp+arg_8]  +
push [ebp+arg_0]  +
call sub_1009D1F  +
test eax eax +
jge loc_1009F92  +
movzx eax ax +
push eax  +
call ds:SetLastError  +
xor eax eax +
pop ebp  +
retn 0Ch  +
xor eax eax +
inc eax  +
jmp loc_1009F8E  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
jz loc_1009FCF  +
cmp [ebp+arg_4] 0 +
jz loc_1009FCF  +
cmp [ebp+arg_8] 0 +
jle loc_1009FCF  +
push [ebp+arg_4]  +
push [ebp+arg_8]  +
push [ebp+arg_0]  +
call sub_1009D59  +
test eax eax +
jge loc_1009FD5  +
movzx eax ax +
push eax  +
call ds:SetLastError  +
xor eax eax +
pop ebp  +
retn 0Ch  +
xor eax eax +
inc eax  +
jmp loc_1009FD1  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push ebx  +
push esi  +
push edi  +
xor edi edi +
mov [ebp+NumberOfCharsWritten] edi +
cmp [ebp+hConsoleOutput] edi +
jz loc_100A224  +
mov ebx [ebp+lpString] +
cmp ebx edi +
jz loc_100A224  +
push [ebp+hConsoleOutput]  +
call sub_1009545  +
cmp eax 1 +
jnz loc_100A111  +
mov esi ds:__iob_func +
call esi  +
add eax 20h +
cmp [ebp+hConsoleOutput] eax +
jnz loc_100A028  +
push 0FFFFFFF5h  +
jmp loc_100A038  +
call esi  +
add eax 40h +
cmp [ebp+hConsoleOutput] eax +
jnz loc_100A0F9  +
push 0FFFFFFF4h  +
call ds:GetStdHandle  +
push edi  +
push ebx  +
mov [ebp+hConsoleOutput] eax +
mov [ebp+NumberOfCharsWritten] edi +
call sub_100966D  +
push edi  +
lea ecx [ebp+NumberOfCharsWritten] +
push ecx  +
push eax  +
push ebx  +
push [ebp+hConsoleOutput]  +
mov ebx ds:WriteConsoleW +
mov [ebp+var_10] eax +
call ebx  +
test eax eax +
jz loc_100A06C  +
mov eax [ebp+var_10] +
cmp eax [ebp+NumberOfCharsWritten] +
jz loc_100A0D1  +
call ds:GetLastError  +
cmp eax 8 +
jnz loc_100A0F5  +
mov esi [ebp+lpString] +
push edi  +
push esi  +
call sub_100966D  +
mov [ebp+var_10] eax +
mov [ebp+var_C] edi +
cmp eax edi +
jbe loc_100A0D1  +
mov [ebp+cchWideChar] esi +
mov esi 400h +
mov eax [ebp+var_10] +
sub eax [ebp+var_C] +
mov [ebp+lpString] esi +
cmp eax esi +
ja loc_100A0A3  +
mov [ebp+lpString] eax +
push edi  +
lea eax [ebp+NumberOfCharsWritten] +
push eax  +
push [ebp+lpString]  +
push [ebp+cchWideChar]  +
push [ebp+hConsoleOutput]  +
call ebx  +
test eax eax +
jz loc_100A0D9  +
mov eax [ebp+lpString] +
cmp eax [ebp+NumberOfCharsWritten] +
jnz loc_100A0D9  +
add [ebp+var_C] esi +
mov eax [ebp+var_C] +
add [ebp+cchWideChar] 800h +
cmp eax [ebp+var_10] +
jb loc_100A093  +
xor eax eax +
inc eax  +
jmp loc_100A238  +
call ds:__iob_func  +
add eax 40h +
push eax  +
call sub_100946C  +
call sub_1009E46  +
push 1  +
call ds:ExitProcess  +
call esi  +
jmp loc_100A0DF  +
call ds:GetLastError  +
test eax eax +
jnz loc_100A236  +
push 42Bh  +
jmp loc_100A230  +
push edi  +
push ebx  +
call sub_100966D  +
push 100h  +
push edi  +
mov esi offset unk_10123D8 +
push esi  +
mov [ebp+var_10] eax +
call memset  +
add esp 0Ch +
mov [ebp+var_C] edi +
cmp [ebp+var_10] edi +
jbe loc_100A0D1  +
mov ebx 0FFh +
mov eax [ebp+var_10] +
mov ecx [ebp+var_C] +
sub eax ecx +
mov [ebp+NumberOfCharsWritten] edi +
mov [ebp+cchWideChar] ebx +
cmp eax ebx +
ja loc_100A151  +
mov [ebp+cchWideChar] eax +
mov eax [ebp+lpString] +
lea eax [eax+ecx*2] +
mov [ebp+lpWideCharStr] eax +
push edi  +
push edi  +
push edi  +
push edi  +
push [ebp+cchWideChar]  +
push [ebp+lpWideCharStr]  +
push edi  +
call ds:GetConsoleOutputCP  +
push eax  +
call ds:WideCharToMultiByte  +
mov [ebp+NumberOfCharsWritten] eax +
cmp eax edi +
jz loc_100A1AE  +
cmp eax ebx +
jbe loc_100A1BC  +
add eax 0FFFFFF01h +
cmp eax 3 +
jbe loc_100A18E  +
shr eax 1 +
sub [ebp+cchWideChar] eax +
jmp loc_100A191  +
dec [ebp+cchWideChar]  +
mov [ebp+NumberOfCharsWritten] edi +
cmp [ebp+cchWideChar] edi +
jnz loc_100A15A  +
call ds:GetLastError  +
test eax eax +
jnz loc_100A1AE  +
push 42Bh  +
call ds:SetLastError  +
call ds:__iob_func  +
add eax 20h +
jmp loc_100A0E2  +
cmp eax [ebp+cchWideChar] +
jnb loc_100A1C4  +
mov [ebp+cchWideChar] eax +
push 100h  +
push edi  +
push esi  +
call memset  +
add esp 0Ch +
push edi  +
push edi  +
push ebx  +
push esi  +
push [ebp+cchWideChar]  +
push [ebp+lpWideCharStr]  +
push edi  +
call ds:GetConsoleOutputCP  +
push eax  +
call ds:WideCharToMultiByte  +
mov [ebp+NumberOfCharsWritten] eax +
cmp eax edi +
jz loc_100A1AE  +
mov eax [ebp+cchWideChar] +
add [ebp+var_C] eax +
push esi  +
push offset aS  +
push [ebp+hConsoleOutput]  +
call ds:fprintf  +
push [ebp+hConsoleOutput]  +
call ds:fflush  +
mov eax [ebp+var_C] +
add esp 10h +
cmp [ebp+var_10] eax +
ja loc_100A13C  +
jmp loc_100A0D1  +
call ds:GetLastError  +
test eax eax +
jnz loc_100A236  +
push 57h  +
call ds:SetLastError  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 48h +
mov eax dword_101203C +
xor eax ebp +
mov [ebp+var_4] eax +
mov ecx [ebp+arg_0] +
xor eax eax +
push esi  +
push edi  +
mov word ptr [ebp+String] ax +
xor esi esi +
lea edi [ebp-22h] +
stos   +
stos   +
xor eax eax +
mov [ebp+var_18] esi +
lea edi [ebp+var_14] +
stos   +
stos   +
stos   +
mov [ebp+var_44] ecx +
mov [ebp+var_28] esi +
mov [ebp+NumberOfBytesRead] esi +
mov [ebp+NumberOfCharsWritten] esi +
mov [ebp+dwMode] esi +
stos   +
mov [ebp+var_40] esi +
cmp ecx esi +
jnz loc_100A2A3  +
call ds:GetLastError  +
test eax eax +
jnz loc_100A29C  +
push 57h  +
call ds:SetLastError  +
xor eax eax +
jmp loc_100A49E  +
push ebx  +
mov ebx ds:GetStdHandle +
push 0FFFFFFF6h  +
call ebx  +
mov edi eax +
mov [ebp+hConsoleHandle] edi +
cmp edi esi +
jz loc_100A45B  +
cmp edi 0Fh +
jz loc_100A2D3  +
cmp edi 3 +
jz loc_100A2D3  +
cmp edi 0FFFFFFFFh +
jz loc_100A2D3  +
mov [ebp+var_40] 1 +
jmp loc_100A2EF  +
lea eax [ebp+dwMode] +
push eax  +
push edi  +
call ds:GetConsoleMode  +
push 1  +
push edi  +
call ds:SetConsoleMode  +
test eax eax +
jz loc_100A45B  +
xor eax eax +
mov esi ds:WriteConsoleW +
lea edi [ebp+String] +
stos   +
stos   +
stos   +
xor eax eax +
lea edi [ebp+var_18] +
stos   +
stos   +
stos   +
stos   +
stos   +
mov edi offset aC +
cmp [ebp+var_40] 1 +
push 0  +
lea eax [ebp+NumberOfBytesRead] +
push eax  +
push 1  +
jnz loc_100A361  +
lea eax [ebp-29h] +
push eax  +
push [ebp+hConsoleHandle]  +
call ds:ReadFile  +
test eax eax +
jz loc_100A45B  +
cmp [ebp+NumberOfBytesRead] 0 +
jz loc_100A45F  +
mov al [ebp+var_29] +
mov [ebp+String] al +
lea eax [ebp+NumberOfBytesRead] +
push eax  +
lea eax [ebp+var_18] +
push eax  +
lea eax [ebp+String] +
push eax  +
mov [ebp+NumberOfBytesRead] 0Ah +
call sub_1009744  +
movzx eax word ptr [ebp+var_18] +
mov [ebp+Buffer] eax +
jmp loc_100A379  +
lea eax [ebp+Buffer] +
push eax  +
push [ebp+hConsoleHandle]  +
call ds:ReadConsoleW  +
test eax eax +
jz loc_100A44F  +
mov eax [ebp+Buffer] +
cmp ax 0Dh +
jz loc_100A45F  +
cmp ax 8 +
jnz loc_100A407  +
cmp [ebp+var_28] 0 +
jz loc_100A30D  +
push 8  +
push edi  +
lea eax [ebp+var_18] +
push 0Ah  +
push eax  +
call sub_1009E0B  +
add esp 10h +
push 0  +
lea eax [ebp+NumberOfCharsWritten] +
push eax  +
push 1  +
lea eax [ebp+var_18] +
push eax  +
push 0FFFFFFF5h  +
call ebx  +
push eax  +
call esi  +
push 0  +
push edi  +
lea eax [ebp+var_18] +
push 0Ah  +
push eax  +
call sub_1009E0B  +
add esp 10h +
push 0  +
lea eax [ebp+NumberOfCharsWritten] +
push eax  +
push 1  +
lea eax [ebp+var_18] +
push eax  +
push 0FFFFFFF5h  +
call ebx  +
push eax  +
call esi  +
push 8  +
push edi  +
lea eax [ebp+var_18] +
push 0Ah  +
push eax  +
call sub_1009E0B  +
add esp 10h +
push 0  +
lea eax [ebp+NumberOfCharsWritten] +
push eax  +
push 1  +
lea eax [ebp+var_18] +
push eax  +
push 0FFFFFFF5h  +
call ebx  +
push eax  +
call esi  +
dec [ebp+var_28]  +
jmp loc_100A30D  +
mov ecx [ebp+arg_4] +
dec ecx  +
cmp [ebp+var_28] ecx +
jnz loc_100A41F  +
push 0  +
lea eax [ebp+NumberOfCharsWritten] +
push eax  +
push 1  +
push offset asc_1001BF8  +
jmp loc_100A443  +
cmp ax 0Ah +
jz loc_100A30D  +
mov edx [ebp+var_28] +
mov ecx [ebp+var_44] +
inc [ebp+var_28]  +
push 0  +
mov [ecx+edx*2] ax +
lea eax [ebp+NumberOfCharsWritten] +
push eax  +
push 1  +
push offset Buffer  +
push 0FFFFFFF5h  +
call ebx  +
push eax  +
call esi  +
jmp loc_100A30D  +
push [ebp+dwMode]  +
push [ebp+hConsoleHandle]  +
call ds:SetConsoleMode  +
xor eax eax +
jmp loc_100A49D  +
push [ebp+dwMode]  +
mov ecx [ebp+var_44] +
mov edx [ebp+var_28] +
push [ebp+hConsoleHandle]  +
xor eax eax +
mov [ecx+edx*2] ax +
call ds:SetConsoleMode  +
push 0Ah  +
push offset asc_1001BF0  +
lea eax [ebp+var_18] +
push eax  +
call sub_1009F59  +
push 0  +
lea eax [ebp+NumberOfCharsWritten] +
push eax  +
push 2  +
lea eax [ebp+var_18] +
push eax  +
push 0FFFFFFF5h  +
call ebx  +
push eax  +
call esi  +
xor eax eax +
inc eax  +
pop ebx  +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_1008AC3  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_4] 0 +
jnz loc_100A4CB  +
cmp [ebp+arg_8] 0 +
jnz loc_100A4CB  +
xor eax eax +
jmp loc_100A61F  +
call sub_100920B  +
test eax eax +
jz loc_100A4C4  +
push ebx  +
push esi  +
push edi  +
push 3  +
pop esi  +
push esi  +
push dword_10123C8  +
call sub_100BBA7  +
mov ebx [ebp+arg_0] +
mov edi eax +
cmp edi ebx +
ja loc_100A518  +
push esi  +
push dword_10123C8  +
call sub_100BBDB  +
test eax eax +
jz loc_100A5E3  +
mov ecx ebx +
sub ecx edi +
inc ecx  +
push ecx  +
push eax  +
call sub_100BA12  +
cmp eax 0FFFFFFFFh +
jz loc_100A5E3  +
push ebx  +
push esi  +
push dword_10123C8  +
call sub_100C02D  +
mov edi offset aBuffer +
test eax eax +
jz loc_100A566  +
push ebx  +
push esi  +
push dword_10123C8  +
call sub_100BD5F  +
mov esi eax +
test esi esi +
jz loc_100A5E3  +
push 7  +
push edi  +
push esi  +
call ds:_memicmp  +
add esp 0Ch +
test eax eax +
jnz loc_100A5E3  +
mov ebx [ebp+arg_4] +
test ebx ebx +
jnz loc_100A5A5  +
mov edi [ebp+arg_8] +
jmp loc_100A5B0  +
push 10h  +
call sub_100986E  +
mov esi eax +
mov [ebp+arg_0] esi +
test esi esi +
jz loc_100A5E3  +
and dword ptr [esi+8] 0 +
and dword ptr [esi+0Ch] 0 +
push 7  +
push edi  +
push esi  +
call sub_1009F16  +
push esi  +
push ebx  +
push 3  +
push dword_10123C8  +
call sub_100BF5A  +
test eax eax +
jnz loc_100A545  +
lea eax [ebp+arg_0] +
push eax  +
call sub_1009B84  +
jmp loc_100A5E3  +
push 0  +
push ebx  +
call sub_100966D  +
mov edi eax +
inc edi  +
mov eax [esi+8] +
cmp edi eax +
ja loc_100A5C6  +
cmp edi 100h +
jbe loc_100A5DD  +
lea ecx [edi+edi] +
cmp ecx eax +
jnb loc_100A5DD  +
test eax eax +
lea eax [edi+edi] +
push eax  +
jnz loc_100A5E7  +
call sub_100986E  +
mov [esi+0Ch] eax +
test eax eax +
jz loc_100A5E3  +
mov [esi+8] edi +
cmp dword ptr [esi+0Ch] 0 +
jnz loc_100A5F2  +
xor eax eax +
jmp loc_100A61C  +
lea eax [esi+0Ch] +
push eax  +
call sub_1009BFF  +
jmp loc_100A5D6  +
test ebx ebx +
jz loc_100A602  +
push edi  +
push ebx  +
push dword ptr [esi+0Ch]  +
call sub_1009F59  +
jmp loc_100A619  +
cmp [ebp+arg_C] 1 +
jnz loc_100A619  +
lea eax [edi+edi] +
push eax  +
push 0  +
push dword ptr [esi+0Ch]  +
call memset  +
add esp 0Ch +
mov eax [esi+0Ch] +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
mov eax dword_101203C +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_4] +
push ebx  +
mov ebx [ebp+lpString] +
push esi  +
push edi  +
mov esi offset asc_1001C04 +
lea edi [ebp+var_C] +
movs   +
mov [ebp+lpStart] eax +
xor eax eax +
mov [ebp+var_18] eax +
mov [ebp+var_14] eax +
movs   +
cmp ebx eax +
jz loc_100A725  +
push eax  +
push ebx  +
call sub_100966D  +
test eax eax +
jz loc_100A725  +
cmp [ebp+lpStart] 0 +
jz loc_100A684  +
push 0  +
push [ebp+lpStart]  +
call sub_100966D  +
test eax eax +
jnz loc_100A68A  +
lea eax [ebp+var_C] +
mov [ebp+lpStart] eax +
mov edi [ebp+arg_8] +
mov esi ebx +
cmp edi 3 +
jz loc_100A699  +
cmp edi 1 +
jnz loc_100A6BB  +
cmp word ptr [ebx] 0 +
jz loc_100A6B8  +
movzx eax word ptr [esi] +
push eax  +
push [ebp+lpStart]  +
call ds:StrChrW  +
test eax eax +
jz loc_100A6B8  +
inc esi  +
inc esi  +
cmp word ptr [esi] 0 +
jnz loc_100A69F  +
mov [ebp+var_18] esi +
cmp edi 3 +
jz loc_100A6C5  +
cmp edi 2 +
jnz loc_100A707  +
cmp edi 2 +
jnz loc_100A6CC  +
mov esi ebx +
movzx eax word ptr [esi] +
test ax ax +
jz loc_100A707  +
push eax  +
push [ebp+lpStart]  +
call ds:StrChrW  +
test eax eax +
jz loc_100A6ED  +
cmp [ebp+var_14] 0 +
jnz loc_100A6F1  +
mov [ebp+var_14] esi +
jmp loc_100A6F1  +
and [ebp+var_14] 0 +
inc esi  +
inc esi  +
movzx eax word ptr [esi] +
test ax ax +
jnz loc_100A6D4  +
mov eax [ebp+var_14] +
test eax eax +
jz loc_100A707  +
xor ecx ecx +
mov [eax] cx +
cmp [ebp+var_18] ebx +
jbe loc_100A721  +
push 0  +
push [ebp+var_18]  +
call sub_100966D  +
inc eax  +
push eax  +
push [ebp+var_18]  +
push ebx  +
call sub_1009F59  +
mov eax ebx +
jmp loc_100A72A  +
mov eax offset dword_1001BE0 +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1008AC3  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
xor edi edi +
cmp esi edi +
jz loc_100A782  +
cmp [ebp+arg_4] edi +
jz loc_100A782  +
push [ebp+arg_C]  +
push offset dword_1001BE0  +
push esi  +
call sub_1009F59  +
cmp [ebp+arg_8] edi +
jbe loc_100A77E  +
push [ebp+arg_C]  +
push [ebp+arg_4]  +
push esi  +
call sub_1009F9C  +
test eax eax +
jz loc_100A77E  +
inc edi  +
cmp edi [ebp+arg_8] +
jb loc_100A768  +
mov eax esi +
jmp loc_100A799  +
call ds:GetLastError  +
test eax eax +
jnz loc_100A794  +
push 57h  +
call ds:SetLastError  +
mov eax offset dword_1001BE0 +
pop edi  +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
xor esi esi +
cmp [ebp+arg_4] esi +
jnz loc_100A7C7  +
call ds:GetLastError  +
test eax eax +
jnz loc_100A7C3  +
push 57h  +
call ds:SetLastError  +
xor eax eax +
jmp loc_100A82E  +
cmp [ebp+arg_0] esi +
jnz loc_100A7D9  +
push [ebp+arg_4]  +
call sub_100937E  +
xor eax eax +
inc eax  +
jmp loc_100A82E  +
push edi  +
push 1  +
add esi 100h +
push esi  +
push 0  +
push 5  +
call sub_100A4B3  +
mov edi eax +
test edi edi +
jz loc_100A819  +
lea eax [ebp+arg_8] +
push eax  +
push [ebp+arg_4]  +
push esi  +
push edi  +
call sub_1009DCF  +
cmp eax 8007007Ah +
jz loc_100A7DA  +
test eax eax +
jge loc_100A827  +
movzx eax ax +
push eax  +
call ds:SetLastError  +
xor eax eax +
jmp loc_100A82D  +
call ds:GetLastError  +
test eax eax +
jnz loc_100A815  +
push 8  +
jmp loc_100A80F  +
push edi  +
call sub_100937E  +
pop edi  +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+Error] 0 +
push ebx  +
push esi  +
push 1  +
mov esi 100h +
push esi  +
push 0  +
push 0  +
call sub_100A4B3  +
mov ebx eax +
test ebx ebx +
jnz loc_100A85E  +
push 8  +
pop eax  +
jmp loc_100A8A0  +
push 1  +
push esi  +
push 0  +
push 1  +
call sub_100A4B3  +
mov esi eax +
test esi esi +
jz loc_100A859  +
push esi  +
call sub_1009917  +
shr eax 1 +
dec eax  +
push eax  +
push esi  +
push ebx  +
call sub_1009917  +
shr eax 1 +
dec eax  +
push eax  +
push ebx  +
lea eax [ebp+Error] +
push eax  +
call WNetGetLastErrorW  +
test eax eax +
jnz loc_100A8A0  +
push ebx  +
call sub_100937E  +
test eax eax +
jz loc_100A859  +
mov eax [ebp+Error] +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
xor ebx ebx +
mov [ebp+lpString] ebx +
cmp [ebp+dwMessageId] ebx +
jnz loc_100A8D6  +
call ds:GetLastError  +
test eax eax +
jnz loc_100A8CC  +
push 57h  +
call ds:SetLastError  +
mov eax offset dword_1001BE0 +
jmp loc_100A9E3  +
call sub_100920B  +
test eax eax +
jz loc_100A8CC  +
push esi  +
push 1  +
push dword_10123C8  +
call sub_100BBA7  +
mov esi eax +
cmp esi [ebp+arg_8] +
ja loc_100A933  +
push 1  +
push dword_10123C8  +
call sub_100BBDB  +
cmp eax ebx +
jz loc_100A917  +
mov ecx [ebp+arg_8] +
sub ecx esi +
inc ecx  +
push ecx  +
push eax  +
call sub_100BA12  +
cmp eax 0FFFFFFFFh +
jnz loc_100A933  +
call ds:GetLastError  +
test eax eax +
jnz loc_100A929  +
push 8  +
call ds:SetLastError  +
mov eax offset dword_1001BE0 +
jmp loc_100A9E2  +
mov esi 80h +
push edi  +
push 1  +
add esi esi +
push esi  +
push ebx  +
push 4  +
call sub_100A4B3  +
mov edi eax +
cmp edi ebx +
jz loc_100A9A7  +
push esi  +
push edi  +
push [ebp+dwMessageId]  +
push [ebp+lpSource]  +
call ds:LoadStringW  +
cmp eax ebx +
jnz loc_100A98A  +
call ds:GetLastError  +
cmp eax 716h +
jnz loc_100A9B9  +
push ebx  +
push ebx  +
lea eax [ebp+lpString] +
push eax  +
push ebx  +
push [ebp+dwMessageId]  +
push [ebp+lpSource]  +
push 0B00h  +
call ds:FormatMessageW  +
cmp eax ebx +
jz loc_100A9B9  +
mov edi [ebp+lpString] +
lea ecx [esi-1] +
cmp eax ecx +
jnb loc_100A939  +
push ebx  +
push edi  +
push [ebp+arg_8]  +
push 1  +
push dword_10123C8  +
call sub_100BF94  +
test eax eax +
jnz loc_100A9C0  +
call ds:GetLastError  +
test eax eax +
jnz loc_100A9B9  +
push 8  +
call ds:SetLastError  +
mov eax offset dword_1001BE0 +
jmp loc_100A9E1  +
cmp [ebp+lpString] ebx +
jz loc_100A9D1  +
push [ebp+lpString]  +
call ds:LocalFree  +
mov [ebp+lpString] ebx +
push [ebp+arg_8]  +
push 1  +
push dword_10123C8  +
call sub_100BD96  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push ebx  +
xor ebx ebx +
push esi  +
push edi  +
mov [ebp+var_4] ebx +
cmp [ebp+lpString] ebx +
jz loc_100AB92  +
push ebx  +
push [ebp+lpString]  +
call sub_100966D  +
test eax eax +
jz loc_100AB92  +
call sub_100920B  +
test eax eax +
jz loc_100ABA4  +
call sub_100920B  +
test eax eax +
jz loc_100AB4C  +
push 3  +
pop esi  +
push esi  +
push dword_10123C8  +
call sub_100BBA7  +
mov edi eax +
cmp edi ebx +
ja loc_100AA6F  +
push esi  +
push dword_10123C8  +
call sub_100BBDB  +
cmp eax ebx +
jz loc_100AB4C  +
xor ecx ecx +
inc ecx  +
sub ecx edi +
push ecx  +
push eax  +
call sub_100BA12  +
cmp eax 0FFFFFFFFh +
jz loc_100AB4C  +
push ebx  +
push esi  +
push dword_10123C8  +
call sub_100C02D  +
mov edi offset aBuffer +
test eax eax +
jz loc_100AAE7  +
push ebx  +
push esi  +
push dword_10123C8  +
call sub_100BD5F  +
mov esi eax +
cmp esi ebx +
jz loc_100AB4C  +
push 7  +
push edi  +
push esi  +
call ds:_memicmp  +
add esp 0Ch +
test eax eax +
jnz loc_100AB4C  +
push ebx  +
push [ebp+lpString]  +
call sub_100966D  +
mov edi eax +
mov eax [esi+8] +
inc edi  +
cmp edi eax +
ja loc_100AAD3  +
cmp edi 100h +
jbe loc_100AB34  +
lea ecx [edi+edi] +
cmp ecx eax +
jnb loc_100AB34  +
cmp eax ebx +
lea eax [edi+edi] +
push eax  +
jnz loc_100AB24  +
call sub_100986E  +
mov [esi+0Ch] eax +
cmp eax ebx +
jmp loc_100AB2F  +
push 10h  +
call sub_100986E  +
mov esi eax +
mov [ebp+var_8] esi +
cmp esi ebx +
jz loc_100AB4C  +
push 7  +
push edi  +
mov [esi+8] ebx +
push esi  +
mov [esi+0Ch] ebx +
call sub_1009F16  +
push esi  +
push ebx  +
push 3  +
push dword_10123C8  +
call sub_100BF5A  +
test eax eax +
jnz loc_100AA9C  +
lea eax [ebp+var_8] +
push eax  +
call sub_1009B84  +
jmp loc_100AB4C  +
lea eax [esi+0Ch] +
push eax  +
call sub_1009BFF  +
test eax eax +
jz loc_100AB4C  +
mov [esi+8] edi +
cmp [esi+0Ch] ebx +
jz loc_100AB4C  +
push edi  +
push [ebp+lpString]  +
push dword ptr [esi+0Ch]  +
call sub_1009F59  +
mov esi [esi+0Ch] +
cmp esi ebx +
jnz loc_100AB5A  +
call ds:GetLastError  +
test eax eax +
jnz loc_100ABA4  +
push 8  +
jmp loc_100AB9E  +
mov edi ds:_errno +
call edi  +
mov [eax] ebx +
lea eax [ebp+var_4] +
push eax  +
push esi  +
call ds:wcstod  +
fstp  qword ptr [ebp-0Ch] +
pop ecx  +
pop ecx  +
call edi  +
cmp dword ptr [eax] 22h +
jz loc_100AB92  +
cmp [ebp+var_4] ebx +
jz loc_100AB8D  +
push ebx  +
push [ebp+var_4]  +
call sub_100966D  +
test eax eax +
jnz loc_100AB92  +
fld  qword ptr [ebp-0Ch] +
jmp loc_100ABA6  +
call ds:GetLastError  +
test eax eax +
jnz loc_100ABA4  +
push 57h  +
call ds:SetLastError  +
fldz   +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+lpString]  +
call sub_100A9ED  +
fstp  st +
call ds:GetLastError  +
neg eax  +
sbb eax eax +
inc eax  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax [ebp+arg_4] +
push ebx  +
xor ebx ebx +
add eax 0FFFFFFFEh +
push esi  +
push edi  +
mov [ebp+var_4] ebx +
cmp eax 22h +
ja loc_100AD9B  +
cmp [ebp+lpString] ebx +
jz loc_100AD9B  +
call sub_100920B  +
test eax eax +
jz loc_100ADAD  +
call sub_100920B  +
test eax eax +
jz loc_100AD31  +
push 3  +
pop esi  +
push esi  +
push dword_10123C8  +
call sub_100BBA7  +
mov edi eax +
cmp edi ebx +
ja loc_100AC54  +
push esi  +
push dword_10123C8  +
call sub_100BBDB  +
cmp eax ebx +
jz loc_100AD31  +
xor ecx ecx +
inc ecx  +
sub ecx edi +
push ecx  +
push eax  +
call sub_100BA12  +
cmp eax 0FFFFFFFFh +
jz loc_100AD31  +
push ebx  +
push esi  +
push dword_10123C8  +
call sub_100C02D  +
mov edi offset aBuffer +
test eax eax +
jz loc_100ACCC  +
push ebx  +
push esi  +
push dword_10123C8  +
call sub_100BD5F  +
mov esi eax +
cmp esi ebx +
jz loc_100AD31  +
push 7  +
push edi  +
push esi  +
call ds:_memicmp  +
add esp 0Ch +
test eax eax +
jnz loc_100AD31  +
push ebx  +
push [ebp+lpString]  +
call sub_100966D  +
mov edi eax +
mov eax [esi+8] +
inc edi  +
cmp edi eax +
ja loc_100ACB8  +
cmp edi 100h +
jbe loc_100AD19  +
lea ecx [edi+edi] +
cmp ecx eax +
jnb loc_100AD19  +
cmp eax ebx +
lea eax [edi+edi] +
push eax  +
jnz loc_100AD09  +
call sub_100986E  +
mov [esi+0Ch] eax +
cmp eax ebx +
jmp loc_100AD14  +
push 10h  +
call sub_100986E  +
mov esi eax +
mov [ebp+var_8] esi +
cmp esi ebx +
jz loc_100AD31  +
push 7  +
push edi  +
mov [esi+8] ebx +
push esi  +
mov [esi+0Ch] ebx +
call sub_1009F16  +
push esi  +
push ebx  +
push 3  +
push dword_10123C8  +
call sub_100BF5A  +
test eax eax +
jnz loc_100AC81  +
lea eax [ebp+var_8] +
push eax  +
call sub_1009B84  +
jmp loc_100AD31  +
lea eax [esi+0Ch] +
push eax  +
call sub_1009BFF  +
test eax eax +
jz loc_100AD31  +
mov [esi+8] edi +
cmp [esi+0Ch] ebx +
jz loc_100AD31  +
push edi  +
push [ebp+lpString]  +
push dword ptr [esi+0Ch]  +
call sub_1009F59  +
mov esi [esi+0Ch] +
cmp esi ebx +
jnz loc_100AD3F  +
call ds:GetLastError  +
test eax eax +
jnz loc_100ADAD  +
push 8  +
jmp loc_100ADA7  +
push 3  +
push ebx  +
push esi  +
call sub_100A628  +
push ebx  +
push esi  +
call sub_100966D  +
test eax eax +
jz loc_100AD9B  +
mov edi ds:_errno +
call edi  +
push [ebp+arg_4]  +
mov [eax] ebx +
cmp word ptr [esi] 2Dh +
lea eax [ebp+var_4] +
push eax  +
push esi  +
jnz loc_100AD73  +
call ds:wcstol  +
jmp loc_100AD79  +
call ds:wcstoul  +
add esp 0Ch +
mov esi eax +
call edi  +
cmp dword ptr [eax] 22h +
jz loc_100AD9B  +
cmp [ebp+var_4] ebx +
jz loc_100AD97  +
push ebx  +
push [ebp+var_4]  +
call sub_100966D  +
test eax eax +
jnz loc_100AD9B  +
mov eax esi +
jmp loc_100ADAF  +
call ds:GetLastError  +
test eax eax +
jnz loc_100ADAD  +
push 57h  +
call ds:SetLastError  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax [ebp+arg_4] +
push ebx  +
xor ebx ebx +
add eax 0FFFFFFFEh +
push esi  +
push edi  +
mov [ebp+var_4] ebx +
cmp eax 22h +
ja loc_100AF7E  +
cmp [ebp+lpString] ebx +
jz loc_100AF7E  +
call sub_100920B  +
test eax eax +
jz loc_100AF0A  +
push 3  +
pop esi  +
push esi  +
push dword_10123C8  +
call sub_100BBA7  +
mov edi eax +
cmp edi ebx +
ja loc_100AE2D  +
push esi  +
push dword_10123C8  +
call sub_100BBDB  +
cmp eax ebx +
jz loc_100AF0A  +
xor ecx ecx +
inc ecx  +
sub ecx edi +
push ecx  +
push eax  +
call sub_100BA12  +
cmp eax 0FFFFFFFFh +
jz loc_100AF0A  +
push ebx  +
push esi  +
push dword_10123C8  +
call sub_100C02D  +
mov edi offset aBuffer +
test eax eax +
jz loc_100AEA5  +
push ebx  +
push esi  +
push dword_10123C8  +
call sub_100BD5F  +
mov esi eax +
cmp esi ebx +
jz loc_100AF0A  +
push 7  +
push edi  +
push esi  +
call ds:_memicmp  +
add esp 0Ch +
test eax eax +
jnz loc_100AF0A  +
push ebx  +
push [ebp+lpString]  +
call sub_100966D  +
mov edi eax +
mov eax [esi+8] +
inc edi  +
cmp edi eax +
ja loc_100AE91  +
cmp edi 100h +
jbe loc_100AEF2  +
lea ecx [edi+edi] +
cmp ecx eax +
jnb loc_100AEF2  +
cmp eax ebx +
lea eax [edi+edi] +
push eax  +
jnz loc_100AEE2  +
call sub_100986E  +
mov [esi+0Ch] eax +
cmp eax ebx +
jmp loc_100AEED  +
push 10h  +
call sub_100986E  +
mov esi eax +
mov [ebp+var_8] esi +
cmp esi ebx +
jz loc_100AF0A  +
push 7  +
push edi  +
mov [esi+8] ebx +
push esi  +
mov [esi+0Ch] ebx +
call sub_1009F16  +
push esi  +
push ebx  +
push 3  +
push dword_10123C8  +
call sub_100BF5A  +
test eax eax +
jnz loc_100AE5A  +
lea eax [ebp+var_8] +
push eax  +
call sub_1009B84  +
jmp loc_100AF0A  +
lea eax [esi+0Ch] +
push eax  +
call sub_1009BFF  +
test eax eax +
jz loc_100AF0A  +
mov [esi+8] edi +
cmp [esi+0Ch] ebx +
jz loc_100AF0A  +
push edi  +
push [ebp+lpString]  +
push dword ptr [esi+0Ch]  +
call sub_1009F59  +
mov esi [esi+0Ch] +
cmp esi ebx +
jnz loc_100AF18  +
call ds:GetLastError  +
test eax eax +
jnz loc_100AF90  +
push 8  +
jmp loc_100AF8A  +
push 3  +
push ebx  +
push esi  +
call sub_100A628  +
push ebx  +
push esi  +
call sub_100966D  +
test eax eax +
jz loc_100AF90  +
cmp [ebp+arg_8] ebx +
jnz loc_100AF37  +
cmp word ptr [esi] 2Dh +
jz loc_100AF90  +
mov edi ds:_errno +
call edi  +
cmp [ebp+arg_8] 1 +
push [ebp+arg_4]  +
mov [eax] ebx +
lea eax [ebp+var_4] +
push eax  +
push esi  +
jnz loc_100AF57  +
call ds:wcstol  +
jmp loc_100AF5D  +
call ds:wcstoul  +
add esp 0Ch +
call edi  +
cmp dword ptr [eax] 22h +
jz loc_100AF90  +
cmp [ebp+var_4] ebx +
jz loc_100AF79  +
push ebx  +
push [ebp+var_4]  +
call sub_100966D  +
test eax eax +
jnz loc_100AF90  +
xor eax eax +
inc eax  +
jmp loc_100AF92  +
call ds:GetLastError  +
test eax eax +
jnz loc_100AF90  +
push 57h  +
call ds:SetLastError  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
xor ebx ebx +
push esi  +
push edi  +
cmp dword ptr [ebp+arg_0] ebx +
jz loc_100B05C  +
cmp dword ptr [ebp+lpString] ebx +
jz loc_100B05C  +
push ebx  +
push dword ptr [ebp+lpString]  +
call sub_100966D  +
mov edi eax +
push 1  +
add edi 4 +
push edi  +
push ebx  +
push ebx  +
call sub_100A4B3  +
mov [ebp+var_8] eax +
cmp eax ebx +
jnz loc_100AFED  +
call ds:GetLastError  +
test eax eax +
jnz loc_100B06E  +
push 8  +
jmp loc_100B068  +
push ebx  +
push dword ptr [ebp+arg_0]  +
call sub_100966D  +
mov esi eax +
push 1  +
add esi 4 +
push esi  +
push ebx  +
push 1  +
call sub_100A4B3  +
mov [ebp+var_4] eax +
cmp eax ebx +
jz loc_100AFDB  +
push dword ptr [ebp+lpString]  +
mov ebx offset aS_0 +
push ebx  +
push edi  +
push [ebp+var_8]  +
call sub_1009E0B  +
add esp 10h +
test eax eax +
jge loc_100B02C  +
movzx eax ax +
push eax  +
jmp loc_100B068  +
push dword ptr [ebp+arg_0]  +
push ebx  +
push esi  +
push [ebp+var_4]  +
call sub_1009E0B  +
add esp 10h +
test eax eax +
jl loc_100B026  +
push 0  +
push [ebp+arg_8]  +
push [ebp+var_4]  +
push [ebp+var_8]  +
call sub_1009AC1  +
xor ecx ecx +
cmp eax 0FFFFFFFFh +
setnz cl  +
mov eax ecx +
jmp loc_100B070  +
call ds:GetLastError  +
test eax eax +
jnz loc_100B06E  +
push 57h  +
call ds:SetLastError  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
mov eax dword_101203C +
xor eax ebp +
mov [ebp+var_4] eax +
mov ecx [ebp+arg_0] +
push esi  +
push edi  +
xor esi esi +
xor eax eax +
lea edi [ebp+var_8] +
mov dword ptr [ebp+String] esi +
mov [ebp+var_18] ecx +
stos   +
cmp ecx esi +
jnz loc_100B0C2  +
call ds:GetLastError  +
test eax eax +
jnz loc_100B0B8  +
push 57h  +
call ds:SetLastError  +
mov eax offset dword_1001BE0 +
jmp loc_100B1CF  +
push ecx  +
call sub_1009B49  +
mov [ebp+var_14] eax +
cmp eax [ebp+arg_4] +
ja loc_100B0D3  +
mov eax [ebp+arg_4] +
push ebx  +
xor ebx ebx +
inc ebx  +
push ebx  +
lea edi [eax+0Ah] +
push edi  +
push esi  +
push esi  +
call sub_100A4B3  +
mov [ebp+var_10] eax +
cmp eax esi +
jz loc_100B101  +
mov eax [ebp+arg_4] +
cmp [ebp+var_14] eax +
jnb loc_100B15C  +
push ebx  +
push edi  +
push esi  +
push ebx  +
call sub_100A4B3  +
mov esi eax +
test esi esi +
jnz loc_100B11D  +
call ds:GetLastError  +
test eax eax +
jnz loc_100B113  +
push 8  +
call ds:SetLastError  +
mov eax offset dword_1001BE0 +
jmp loc_100B1CE  +
mov eax [ebp+arg_4] +
sub eax [ebp+var_14] +
push edi  +
push eax  +
push offset asc_1001300  +
push esi  +
call sub_100A740  +
push edi  +
cmp [ebp+arg_8] ebx +
jnz loc_100B145  +
push esi  +
push [ebp+var_10]  +
call sub_1009F59  +
push edi  +
push [ebp+var_18]  +
jmp loc_100B152  +
push [ebp+var_18]  +
push [ebp+var_10]  +
call sub_1009F59  +
push edi  +
push esi  +
push [ebp+var_10]  +
call sub_1009F9C  +
jmp loc_100B1BB  +
xor ebx ebx +
cmp eax esi +
jbe loc_100B1BB  +
mov eax [ebp+var_18] +
mov [ebp+var_14] eax +
push 2  +
push [ebp+var_14]  +
lea eax [ebp+String] +
push eax  +
call sub_1009F59  +
lea eax [ebp+String] +
push eax  +
call sub_1009B49  +
mov esi eax +
add esi ebx +
cmp esi [ebp+arg_4] +
ja loc_100B1A0  +
push edi  +
lea eax [ebp+String] +
push eax  +
push [ebp+var_10]  +
call sub_1009F9C  +
add [ebp+var_14] 2 +
mov ebx esi +
cmp esi [ebp+arg_4] +
jb loc_100B168  +
cmp ebx [ebp+arg_4] +
jnb loc_100B1BB  +
mov esi [ebp+arg_4] +
sub esi ebx +
push edi  +
push offset asc_1001300  +
push [ebp+var_10]  +
call sub_1009F9C  +
dec esi  +
jnz loc_100B1AA  +
mov eax [ebp+arg_4] +
inc eax  +
push eax  +
push [ebp+var_10]  +
push [ebp+var_18]  +
call sub_1009F59  +
mov eax [ebp+var_18] +
pop ebx  +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_1008AC3  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
xor ebx ebx +
push edi  +
cmp [ebp+lpString] ebx +
jz loc_100B2EB  +
cmp [ebp+hConsoleOutput] ebx +
jz loc_100B2EB  +
cmp [ebp+arg_4] ebx +
jnz loc_100B216  +
push [ebp+lpString]  +
push [ebp+hConsoleOutput]  +
call sub_1009FDF  +
jmp loc_100B2FF  +
cmp [ebp+arg_8] ebx +
jnz loc_100B2AB  +
or [ebp+var_8] 0FFFFFFFFh +
lea eax [ebp+arg_10] +
mov [ebp+Arguments] eax +
xor eax eax +
cmp [ebp+var_8] 0FFFFFFFFh +
push 1  +
setnz al  +
dec eax  +
and eax 800h +
add eax 800h +
add ebx eax +
push ebx  +
push 0  +
push 3  +
call sub_100A4B3  +
mov edi eax +
test edi edi +
jz loc_100B298  +
lea eax [ebp+Arguments] +
push eax  +
lea eax [ebx-1] +
push eax  +
push edi  +
push 0  +
push 0  +
push [ebp+lpString]  +
push 400h  +
call ds:FormatMessageW  +
mov [ebp+var_8] eax +
test eax eax +
jnz loc_100B288  +
call ds:GetLastError  +
test eax eax +
jz loc_100B2A6  +
call ds:GetLastError  +
cmp eax 7Ah +
jnz loc_100B2FD  +
and [ebp+Arguments] 0 +
cmp [ebp+var_8] 0 +
jz loc_100B223  +
push edi  +
jmp loc_100B209  +
call ds:GetLastError  +
test eax eax +
jnz loc_100B2FD  +
push 8  +
jmp loc_100B2F7  +
xor eax eax +
inc eax  +
jmp loc_100B2FF  +
push 1  +
add ebx 800h +
push ebx  +
push 0  +
lea eax [ebp+arg_10] +
push 3  +
mov [ebp+Arguments] eax +
call sub_100A4B3  +
mov edi eax +
test edi edi +
jz loc_100B298  +
push [ebp+Arguments]  +
push [ebp+lpString]  +
push ebx  +
push edi  +
call sub_1009DCF  +
and [ebp+Arguments] 0 +
cmp eax 8007007Ah +
jz loc_100B2AB  +
test eax eax +
jge loc_100B292  +
movzx eax ax +
push eax  +
jmp loc_100B2F7  +
call ds:GetLastError  +
test eax eax +
jnz loc_100B2FD  +
push 57h  +
call ds:SetLastError  +
xor eax eax +
pop edi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
inc dword_10123D4  +
mov eax dword_10123D4 +
push 0Ah  +
pop ecx  +
xor edx edx +
div  ecx +
add edx 4 +
push edx  +
push [ebp+dwMessageId]  +
push [ebp+lpSource]  +
call sub_100A8A9  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+dwMessageId]  +
push 0  +
call sub_100B308  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
test esi esi +
jz loc_100B3CB  +
test [ebp+arg_4] 0F0000h +
jz loc_100B3CB  +
test [ebp+arg_4] 10000h +
jz loc_100B373  +
call sub_10093E5  +
mov al byte ptr [ebp+arg_4] +
push ebx  +
xor ebx ebx +
inc ebx  +
test al bl +
jz loc_100B385  +
push 1389h  +
jmp loc_100B3A4  +
test al 4 +
jz loc_100B390  +
push 138Ah  +
jmp loc_100B3A4  +
test al 2 +
jz loc_100B39B  +
push 138Ch  +
jmp loc_100B3A4  +
test al 8 +
jz loc_100B3BA  +
push 138Bh  +
call sub_100B337  +
push eax  +
push offset aS_1  +
push ebx  +
push ebx  +
push esi  +
call sub_100B1E4  +
add esp 14h +
call sub_1009352  +
push eax  +
push esi  +
call sub_1009FDF  +
mov eax ebx +
pop ebx  +
jmp loc_100B3DF  +
call ds:GetLastError  +
test eax eax +
jnz loc_100B3DD  +
push 57h  +
call ds:SetLastError  +
xor eax eax +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_100B3FF  +
cmp dword ptr [eax] 9 +
jnz loc_100B3FF  +
xor eax eax +
inc eax  +
jmp loc_100B401  +
xor eax eax +
pop ebp  +
retn 4  +
***
xor ecx ecx +
cmp eax ecx +
jnz loc_100B41A  +
xor eax eax +
retn   +
mov [eax+4] ecx +
mov [eax+8] ecx +
mov [eax+0Ch] ecx +
mov dword ptr [eax] 9 +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push esi  +
call sub_100B3E9  +
test eax eax +
jz loc_100B475  +
mov eax [esi+8] +
mov [ebp+arg_0] eax +
test eax eax +
jz loc_100B469  +
push edi  +
mov edi [eax+10h] +
push eax  +
call sub_100B616  +
lea eax [ebp+arg_0] +
push eax  +
call sub_1009B84  +
mov eax edi +
mov [ebp+arg_0] eax +
test edi edi +
jnz loc_100B44D  +
pop edi  +
and dword ptr [esi+4] 0 +
and dword ptr [esi+8] 0 +
and dword ptr [esi+0Ch] 0 +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
mov ecx [esi] +
push ecx  +
call sub_100B3E9  +
test eax eax +
jz loc_100B4A0  +
push ecx  +
call sub_100B42F  +
push esi  +
call sub_1009B84  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
push ecx  +
call sub_100B3E9  +
test eax eax +
jz loc_100B4BF  +
mov eax [ecx+4] +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
push ecx  +
call sub_100B3E9  +
test eax eax +
jnz loc_100B4DE  +
xor eax eax +
jmp loc_100B503  +
mov edx [ebp+arg_4] +
cmp [ecx+4] edx +
jbe loc_100B4DA  +
mov eax [ecx+8] +
push esi  +
xor esi esi +
cmp edx 1 +
jb loc_100B4F9  +
dec edx  +
mov esi eax +
mov eax [eax+10h] +
jnz loc_100B4F1  +
mov ecx [ebp+arg_8] +
test ecx ecx +
jz loc_100B502  +
mov [ecx] esi +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push esi  +
call sub_100B3E9  +
test eax eax +
jnz loc_100B524  +
or eax 0FFFFFFFFh +
jmp loc_100B56C  +
cmp dword ptr [esi+4] 0FFFFFFFFh +
jz loc_100B51F  +
push 14h  +
call sub_100986E  +
test eax eax +
jz loc_100B51F  +
mov ecx [ebp+arg_4] +
and dword ptr [eax+10h] 0 +
mov [eax+4] ecx +
mov ecx [ebp+arg_8] +
mov [eax+8] ecx +
mov ecx [ebp+arg_C] +
mov [eax+0Ch] ecx +
mov dword ptr [eax] 63h +
inc dword ptr [esi+4]  +
cmp dword ptr [esi+8] 0 +
jnz loc_100B55F  +
mov [esi+8] eax +
jmp loc_100B565  +
mov ecx [esi+0Ch] +
mov [ecx+10h] eax +
mov [esi+0Ch] eax +
mov eax [esi+4] +
dec eax  +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push esi  +
call sub_100B3E9  +
test eax eax +
jnz loc_100B58E  +
or eax 0FFFFFFFFh +
jmp loc_100B60C  +
mov eax [esi+4] +
cmp eax 0FFFFFFFFh +
jz loc_100B589  +
push edi  +
mov edi [ebp+arg_4] +
cmp eax edi +
ja loc_100B5AF  +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push esi  +
call sub_100B50C  +
jmp loc_100B60B  +
push 14h  +
call sub_100986E  +
test eax eax +
jnz loc_100B5BF  +
or eax 0FFFFFFFFh +
jmp loc_100B60B  +
mov ecx [ebp+arg_8] +
and dword ptr [eax+10h] 0 +
mov [eax+4] ecx +
mov ecx [ebp+arg_C] +
mov [eax+8] ecx +
mov ecx [ebp+arg_10] +
mov [eax+0Ch] ecx +
mov dword ptr [eax] 63h +
inc dword ptr [esi+4]  +
test edi edi +
jnz loc_100B5F0  +
mov ecx [esi+8] +
mov [eax+10h] ecx +
mov [esi+8] eax +
xor eax eax +
inc eax  +
jmp loc_100B60B  +
mov esi [esi+8] +
lea ecx [edi-1] +
test ecx ecx +
jbe loc_100B600  +
dec ecx  +
mov esi [esi+10h] +
jnz loc_100B5FA  +
mov ecx [esi+10h] +
mov [eax+10h] ecx +
mov [esi+10h] eax +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
test edx edx +
jz loc_100B68A  +
mov eax [edx+4] +
mov ecx 70000h +
cmp eax ecx +
ja loc_100B655  +
jz loc_100B671  +
cmp eax 20000h +
jz loc_100B671  +
cmp eax 30000h +
jz loc_100B671  +
cmp eax 40000h +
jz loc_100B671  +
cmp eax 50000h +
jz loc_100B671  +
cmp eax 60000h +
jz loc_100B671  +
jmp loc_100B68A  +
cmp eax 80000h +
jz loc_100B67C  +
cmp eax 90000h +
jz loc_100B671  +
cmp eax 0A0000h +
jz loc_100B671  +
cmp eax 0B0000h +
jnz loc_100B68A  +
add edx 0Ch +
push edx  +
call sub_1009B84  +
jmp loc_100B68A  +
push esi  +
lea esi [edx+0Ch] +
push esi  +
call sub_100B47F  +
and dword ptr [esi] 0 +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_0] +
push ebx  +
call sub_100B3E9  +
test eax eax +
jnz loc_100B6AE  +
or eax 0FFFFFFFFh +
jmp loc_100B7BD  +
xor edx edx +
push esi  +
push edi  +
mov edi [ebx+8] +
mov [ebp+arg_0] edx +
cmp [ebx+4] edx +
jbe loc_100B7B8  +
mov esi [ebp+lpString2] +
mov eax [ebp+arg_4] +
cmp [edi+4] eax +
jnz loc_100B7A8  +
mov ecx 70000h +
cmp eax ecx +
ja loc_100B73C  +
jz loc_100B72A  +
cmp eax 20000h +
jz loc_100B70E  +
cmp eax 30000h +
jz loc_100B79F  +
cmp eax 40000h +
jz loc_100B79F  +
cmp eax 60000h +
jnz loc_100B7A8  +
mov eax [edi+0Ch] +
fld  dword ptr [eax] +
fld  dword ptr [esi] +
fucompp   +
jmp loc_100B731  +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
push esi  +
push dword ptr [edi+0Ch]  +
call sub_100968E  +
test eax eax +
jz loc_100B7C2  +
mov edx [ebp+arg_0] +
jmp loc_100B7A8  +
mov eax [edi+0Ch] +
fld  qword ptr [esi] +
fcomp  qword ptr [eax] +
fnstsw  ax +
test ah 44h +
jp loc_100B7A8  +
mov eax edx +
jmp loc_100B7BB  +
cmp eax 90000h +
jz loc_100B79F  +
cmp eax 0A0000h +
jz loc_100B762  +
cmp eax 0B0000h +
jnz loc_100B7A8  +
mov eax [edi+0Ch] +
mov ecx [esi+4] +
cmp ecx [eax+4] +
jnz loc_100B7A8  +
mov ecx [esi] +
cmp ecx [eax] +
jmp loc_100B7A6  +
mov eax [edi+0Ch] +
mov cx [esi+6] +
cmp cx [eax+6] +
jnz loc_100B7A8  +
mov cx [esi+0Eh] +
cmp cx [eax+0Eh] +
jnz loc_100B7A8  +
mov cx [esi+0Ah] +
cmp cx [eax+0Ah] +
jnz loc_100B7A8  +
mov cx [esi+2] +
cmp cx [eax+2] +
jnz loc_100B7A8  +
mov cx [esi+0Ch] +
cmp cx [eax+0Ch] +
jnz loc_100B7A8  +
mov cx [esi] +
cmp cx [eax] +
jmp loc_100B7A6  +
mov eax [edi+0Ch] +
mov eax [eax] +
cmp eax [esi] +
jz loc_100B738  +
mov edi [edi+10h] +
inc edx  +
mov [ebp+arg_0] edx +
cmp edx [ebx+4] +
jb loc_100B6C4  +
or eax 0FFFFFFFFh +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 14h  +
mov eax [ebp+arg_0] +
jmp loc_100B7BB  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push [ebp+arg_0]  +
and [ebp+var_4] 0 +
call sub_100B3E9  +
test eax eax +
jnz loc_100B7E7  +
or eax 0FFFFFFFFh +
jmp locret_100B83A  +
push esi  +
mov esi [ebp+arg_8] +
test esi esi +
jnz loc_100B7FA  +
push [ebp+lpString]  +
call ds:lstrlenW  +
mov esi eax +
push edi  +
inc esi  +
lea edi [esi+esi] +
push edi  +
call sub_100986E  +
mov [ebp+var_4] eax +
test eax eax +
jz loc_100B835  +
push esi  +
push [ebp+lpString]  +
push eax  +
call sub_1009F59  +
push [ebp+var_4]  +
push edi  +
push 20000h  +
push [ebp+arg_0]  +
call sub_100B50C  +
cmp eax 0FFFFFFFFh +
jnz loc_100B838  +
lea eax [ebp+var_4] +
push eax  +
call sub_1009B84  +
or eax 0FFFFFFFFh +
pop edi  +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push [ebp+arg_0]  +
and [ebp+var_4] 0 +
call sub_100B3E9  +
test eax eax +
jz loc_100B88C  +
push 4  +
call sub_100986E  +
mov [ebp+var_4] eax +
test eax eax +
jz loc_100B88C  +
mov ecx [ebp+arg_4] +
mov [eax] ecx +
push [ebp+var_4]  +
push 4  +
push 30000h  +
push [ebp+arg_0]  +
call sub_100B50C  +
cmp eax 0FFFFFFFFh +
jnz locret_100B88F  +
lea eax [ebp+var_4] +
push eax  +
call sub_1009B84  +
or eax 0FFFFFFFFh +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push [ebp+arg_0]  +
and [ebp+var_4] 0 +
call sub_100B3E9  +
test eax eax +
jz loc_100B8E1  +
push 4  +
call sub_100986E  +
mov [ebp+var_4] eax +
test eax eax +
jz loc_100B8E1  +
mov ecx [ebp+arg_4] +
mov [eax] ecx +
push [ebp+var_4]  +
push 4  +
push 40000h  +
push [ebp+arg_0]  +
call sub_100B50C  +
cmp eax 0FFFFFFFFh +
jnz locret_100B8E4  +
lea eax [ebp+var_4] +
push eax  +
call sub_1009B84  +
or eax 0FFFFFFFFh +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push [ebp+arg_0]  +
and [ebp+var_4] 0 +
call sub_100B3E9  +
test eax eax +
jz loc_100B936  +
push 4  +
call sub_100986E  +
mov [ebp+var_4] eax +
test eax eax +
jz loc_100B936  +
fld  [ebp+arg_4] +
fstp  dword ptr [eax] +
push [ebp+var_4]  +
push 4  +
push 60000h  +
push [ebp+arg_0]  +
call sub_100B50C  +
cmp eax 0FFFFFFFFh +
jnz locret_100B939  +
lea eax [ebp+var_4] +
push eax  +
call sub_1009B84  +
or eax 0FFFFFFFFh +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push [ebp+arg_0]  +
and [ebp+var_4] 0 +
call sub_100B3E9  +
test eax eax +
jz loc_100B98B  +
push 8  +
call sub_100986E  +
mov [ebp+var_4] eax +
test eax eax +
jz loc_100B98B  +
fld  [ebp+arg_4] +
fstp  qword ptr [eax] +
push [ebp+var_4]  +
push 8  +
push 70000h  +
push [ebp+arg_0]  +
call sub_100B50C  +
cmp eax 0FFFFFFFFh +
jnz locret_100B98E  +
lea eax [ebp+var_4] +
push eax  +
call sub_1009B84  +
or eax 0FFFFFFFFh +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
push [ebp+arg_0]  +
xor esi esi +
mov [ebp+var_4] esi +
call sub_100B3E9  +
test eax eax +
jz loc_100BA05  +
call sub_100B40A  +
push eax  +
mov [ebp+var_4] eax +
call sub_100B3E9  +
test eax eax +
jz loc_100BA05  +
push edi  +
xor edi edi +
cmp [ebp+arg_4] esi +
jbe loc_100B9DF  +
push esi  +
push esi  +
push esi  +
push [ebp+var_4]  +
call sub_100B50C  +
cmp eax 0FFFFFFFFh +
jz loc_100B9DF  +
inc edi  +
cmp edi [ebp+arg_4] +
jb loc_100B9C9  +
cmp edi [ebp+arg_4] +
pop edi  +
jnz loc_100B9FC  +
push [ebp+var_4]  +
push 4  +
push 80000h  +
push [ebp+arg_0]  +
call sub_100B50C  +
cmp eax 0FFFFFFFFh +
jnz loc_100BA08  +
lea eax [ebp+var_4] +
push eax  +
call sub_100B47F  +
or eax 0FFFFFFFFh +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_0]  +
call sub_100B3E9  +
test eax eax +
jnz loc_100BA28  +
or eax 0FFFFFFFFh +
jmp loc_100BA4C  +
push edi  +
xor edi edi +
cmp [ebp+arg_4] edi +
jbe loc_100BA49  +
push 0  +
push 0  +
push 0  +
push [ebp+arg_0]  +
call sub_100B50C  +
cmp eax 0FFFFFFFFh +
jz loc_100BA49  +
inc edi  +
cmp edi [ebp+arg_4] +
jb loc_100BA30  +
mov eax edi +
pop edi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_100B4C8  +
test eax eax +
jz loc_100BA84  +
cmp dword ptr [eax+4] 80000h +
jnz loc_100BA84  +
push [ebp+arg_C]  +
push [ebp+lpString]  +
push dword ptr [eax+0Ch]  +
call sub_100B7CC  +
jmp loc_100BA87  +
or eax 0FFFFFFFFh +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push [ebp+arg_0]  +
and [ebp+var_4] 0 +
call sub_100B3E9  +
test eax eax +
jnz loc_100BAAB  +
or eax 0FFFFFFFFh +
jmp locret_100BB01  +
push esi  +
mov esi [ebp+arg_C] +
test esi esi +
jnz loc_100BABE  +
push [ebp+lpString]  +
call ds:lstrlenW  +
mov esi eax +
push edi  +
inc esi  +
lea edi [esi+esi] +
push edi  +
call sub_100986E  +
mov [ebp+var_4] eax +
test eax eax +
jz loc_100BAFC  +
push esi  +
push [ebp+lpString]  +
push eax  +
call sub_1009F59  +
push [ebp+var_4]  +
push edi  +
push 20000h  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_100B576  +
cmp eax 0FFFFFFFFh +
jnz loc_100BAFF  +
lea eax [ebp+var_4] +
push eax  +
call sub_1009B84  +
or eax 0FFFFFFFFh +
pop edi  +
pop esi  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
and [ebp+var_4] 0 +
and [ebp+var_8] 0 +
push esi  +
mov esi [ebp+arg_0] +
lea eax [ebp+var_8] +
push eax  +
push [ebp+arg_4]  +
push esi  +
call sub_100B4C8  +
mov [ebp+var_4] eax +
test eax eax +
jz loc_100BB66  +
mov ecx [ebp+var_8] +
test ecx ecx +
jz loc_100BB43  +
mov eax [eax+10h] +
mov [ecx+10h] eax +
mov eax [ebp+var_4] +
jmp loc_100BB49  +
mov edx [eax+10h] +
mov [esi+8] edx +
cmp eax [esi+0Ch] +
jnz loc_100BB51  +
mov [esi+0Ch] ecx +
dec dword ptr [esi+4]  +
push eax  +
call sub_100B616  +
lea eax [ebp+var_4] +
push eax  +
call sub_1009B84  +
xor eax eax +
inc eax  +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_100B4C8  +
test eax eax +
jz loc_100BB9C  +
cmp dword ptr [eax+4] 80000h +
jnz loc_100BB9C  +
push [ebp+arg_8]  +
push dword ptr [eax+0Ch]  +
call sub_100BB0A  +
jmp loc_100BB9E  +
xor eax eax +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_100B4C8  +
test eax eax +
jz loc_100BBD0  +
cmp dword ptr [eax+4] 80000h +
jnz loc_100BBD0  +
push dword ptr [eax+0Ch]  +
call sub_100B4AA  +
jmp loc_100BBD2  +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_100B4C8  +
test eax eax +
jnz loc_100BBF5  +
xor eax eax +
jmp loc_100BC0B  +
mov ecx [eax+4] +
cmp ecx 10000h +
jz loc_100BC08  +
cmp ecx 80000h +
jnz loc_100BBF1  +
mov eax [eax+0Ch] +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_100B4C8  +
test eax eax +
jnz loc_100BC2E  +
xor eax eax +
jmp loc_100BC3A  +
cmp dword ptr [eax+4] 20000h +
jnz loc_100BC2A  +
mov eax [eax+0Ch] +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_100B4C8  +
test eax eax +
jnz loc_100BC5D  +
xor eax eax +
jmp loc_100BC75  +
mov ecx [eax+4] +
cmp ecx 40000h +
jz loc_100BC70  +
cmp ecx 30000h +
jnz loc_100BC59  +
mov eax [eax+0Ch] +
mov eax [eax] +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_100B4C8  +
test eax eax +
jnz loc_100BC9C  +
fld  ds:flt_1001C20 +
jmp loc_100BCAA  +
cmp dword ptr [eax+4] 60000h +
jnz loc_100BC94  +
mov eax [eax+0Ch] +
fld  dword ptr [eax] +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_100B4C8  +
test eax eax +
jnz loc_100BCD1  +
fld  ds:dbl_1001C28 +
jmp loc_100BCDF  +
cmp dword ptr [eax+4] 70000h +
jnz loc_100BCC9  +
mov eax [eax+0Ch] +
fld  qword ptr [eax] +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
mov ebx [ebp+arg_0] +
push edi  +
xor eax eax +
lea edi [ebp+FileTime] +
stos   +
stos   +
xor eax eax +
mov edi ebx +
stos   +
stos   +
push 0  +
push [ebp+arg_8]  +
stos   +
push [ebp+arg_4]  +
stos   +
call sub_100B4C8  +
test eax eax +
jz loc_100BD52  +
mov edx [eax+4] +
mov ecx 0A0000h +
cmp edx ecx +
jz loc_100BD2C  +
cmp edx 0B0000h +
jnz loc_100BD52  +
cmp edx ecx +
jnz loc_100BD39  +
push esi  +
mov esi [eax+0Ch] +
mov edi ebx +
movs   +
movs   +
movs   +
movs   +
pop esi  +
jmp loc_100BD52  +
mov eax [eax+0Ch] +
mov ecx [eax] +
mov [ebp+FileTime.dwLowDateTime] ecx +
mov eax [eax+4] +
mov [ebp+FileTime.dwHighDateTime] eax +
push ebx  +
lea eax [ebp+FileTime] +
push eax  +
call ds:FileTimeToSystemTime  +
pop edi  +
mov eax ebx +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_100B4C8  +
test eax eax +
jz loc_100BD8B  +
cmp dword ptr [eax+4] 80000h +
jnz loc_100BD8B  +
push [ebp+arg_8]  +
push dword ptr [eax+0Ch]  +
call sub_100BBDB  +
jmp loc_100BD8D  +
xor eax eax +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_100B4C8  +
test eax eax +
jz loc_100BDC2  +
cmp dword ptr [eax+4] 80000h +
jnz loc_100BDC2  +
push [ebp+arg_8]  +
push dword ptr [eax+0Ch]  +
call sub_100BC14  +
jmp loc_100BDC4  +
xor eax eax +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_100B4C8  +
test eax eax +
jz loc_100BDF9  +
cmp dword ptr [eax+4] 80000h +
jnz loc_100BDF9  +
push [ebp+arg_8]  +
push dword ptr [eax+0Ch]  +
call sub_100BC43  +
jmp loc_100BDFB  +
xor eax eax +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_8] +
test esi esi +
jnz loc_100BE15  +
xor eax eax +
jmp loc_100BE45  +
push 0  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_100B4C8  +
test eax eax +
jz loc_100BE11  +
mov ecx [eax+4] +
mov edx 10000h +
cmp ecx edx +
jz loc_100BE38  +
test ecx ecx +
jz loc_100BE3C  +
jmp loc_100BE11  +
test ecx ecx +
jnz loc_100BE3F  +
mov [eax+4] edx +
mov [eax+0Ch] esi +
xor eax eax +
inc eax  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
xor edi edi +
push edi  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_100B4C8  +
mov esi eax +
cmp esi edi +
jnz loc_100BE6E  +
xor eax eax +
jmp loc_100BEED  +
mov eax [esi+4] +
push ebx  +
mov ebx 20000h +
cmp eax ebx +
jz loc_100BE7F  +
cmp eax edi +
jnz loc_100BED4  +
cmp [ebp+arg_C] edi +
jnz loc_100BE90  +
push [ebp+lpString]  +
call ds:lstrlenW  +
mov [ebp+arg_C] eax +
mov eax [ebp+arg_C] +
inc eax  +
mov [ebp+arg_C] eax +
cmp [esi+4] edi +
jnz loc_100BEB4  +
lea edi [eax+eax] +
push edi  +
call sub_100986E  +
mov [esi+0Ch] eax +
test eax eax +
jz loc_100BED4  +
mov [esi+4] ebx +
mov [esi+8] edi +
jmp loc_100BEDB  +
lea ebx [eax+eax] +
cmp [esi+8] ebx +
jnb loc_100BEDB  +
lea edi [esi+0Ch] +
push edi  +
call sub_1009B84  +
and dword ptr [edi] 0 +
push ebx  +
call sub_100986E  +
mov [edi] eax +
test eax eax +
jnz loc_100BED8  +
xor eax eax +
jmp loc_100BEEC  +
mov [esi+8] ebx +
push [ebp+arg_C]  +
push [ebp+lpString]  +
push dword ptr [esi+0Ch]  +
call sub_1009F59  +
xor eax eax +
inc eax  +
pop ebx  +
pop edi  +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push 0  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_100B4C8  +
mov esi eax +
test esi esi +
jnz loc_100BF15  +
xor eax eax +
jmp loc_100BF50  +
mov eax [esi+4] +
cmp eax 40000h +
jz loc_100BF25  +
test eax eax +
jz loc_100BF29  +
jmp loc_100BF11  +
test eax eax +
jnz loc_100BF45  +
push 4  +
call sub_100986E  +
mov [esi+0Ch] eax +
test eax eax +
jz loc_100BF11  +
mov dword ptr [esi+4] 40000h +
mov dword ptr [esi+8] 4 +
mov eax [esi+0Ch] +
mov ecx [ebp+arg_8] +
mov [eax] ecx +
xor eax eax +
inc eax  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_100B4C8  +
test eax eax +
jz loc_100BF89  +
cmp dword ptr [eax+4] 80000h +
jnz loc_100BF89  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push dword ptr [eax+0Ch]  +
call sub_100BE04  +
jmp loc_100BF8B  +
xor eax eax +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_100B4C8  +
test eax eax +
jz loc_100BFC6  +
cmp dword ptr [eax+4] 80000h +
jnz loc_100BFC6  +
push [ebp+arg_10]  +
push [ebp+lpString]  +
push [ebp+arg_8]  +
push dword ptr [eax+0Ch]  +
call sub_100BE4F  +
jmp loc_100BFC8  +
xor eax eax +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_100B4C8  +
test eax eax +
jz loc_100C000  +
cmp dword ptr [eax+4] 80000h +
jnz loc_100C000  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push dword ptr [eax+0Ch]  +
call sub_100BEF8  +
jmp loc_100C002  +
xor eax eax +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_100B4C8  +
test eax eax +
jz loc_100C024  +
mov eax [eax+4] +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_100B4C8  +
test eax eax +
jz loc_100C059  +
cmp dword ptr [eax+4] 80000h +
jnz loc_100C059  +
push [ebp+arg_8]  +
push dword ptr [eax+0Ch]  +
call sub_100C00B  +
jmp loc_100C05B  +
xor eax eax +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push 0  +
lea eax [ebp+String2] +
push eax  +
push 30000h  +
push [ebp+arg_0]  +
call sub_100B693  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push 0  +
lea eax [ebp+String2] +
push eax  +
push 40000h  +
push [ebp+arg_0]  +
call sub_100B693  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push 0  +
lea eax [ebp+String2] +
push eax  +
push 60000h  +
push [ebp+arg_0]  +
call sub_100B693  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push 0  +
lea eax [ebp+String2] +
push eax  +
push 70000h  +
push [ebp+arg_0]  +
call sub_100B693  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+lpString2]  +
push 20000h  +
push [ebp+arg_0]  +
call sub_100B693  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_0]  +
call sub_100B3E9  +
test eax eax +
jz loc_100C145  +
push [ebp+arg_4]  +
call sub_100B3E9  +
test eax eax +
jz loc_100C145  +
push [ebp+arg_4]  +
push 4  +
push 80000h  +
push [ebp+arg_0]  +
call sub_100B50C  +
jmp loc_100C148  +
or eax 0FFFFFFFFh +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_100B4C8  +
test eax eax +
jz loc_100C17D  +
cmp dword ptr [eax+4] 80000h +
jnz loc_100C17D  +
push [ebp+arg_8]  +
push dword ptr [eax+0Ch]  +
call sub_100C114  +
jmp loc_100C180  +
or eax 0FFFFFFFFh +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 204h +
mov eax dword_101203C +
xor eax ebp +
mov [ebp+var_4] eax +
and [ebp+var_204] 0 +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov edi [ebp+arg_8] +
push 1FAh  +
lea eax [ebp+var_200] +
push 0  +
push eax  +
call memset  +
mov ebx [ebp+arg_C] +
add esp 0Ch +
test ebx ebx +
jnz loc_100C1D2  +
xor eax eax +
jmp loc_100C286  +
push 0  +
push [ebp+arg_4]  +
push esi  +
call sub_100B4C8  +
mov esi eax +
test esi esi +
jz loc_100C1CB  +
push ebx  +
push offset dword_1001C48  +
push edi  +
call sub_1009F59  +
mov eax [esi+4] +
cmp eax 20000h +
jz loc_100C275  +
cmp eax 30000h +
jz loc_100C269  +
cmp eax 40000h +
jz loc_100C249  +
cmp eax 60000h +
jz loc_100C242  +
cmp eax 70000h +
jnz loc_100C27F  +
mov eax [esi+0Ch] +
fld  qword ptr [eax] +
push ecx  +
push ecx  +
fstp  [esp+218h+var_218] +
push offset aF  +
lea eax [ebp+var_204] +
push 0FEh  +
push eax  +
call sub_1009E0B  +
add esp 14h +
push ebx  +
lea eax [ebp+var_204] +
push eax  +
jmp loc_100C279  +
mov eax [esi+0Ch] +
fld  dword ptr [eax] +
jmp loc_100C21A  +
mov eax [esi+0Ch] +
push dword ptr [eax]  +
push offset aLu  +
lea eax [ebp+var_204] +
push 0FEh  +
push eax  +
call sub_1009E0B  +
add esp 10h +
jmp loc_100C238  +
mov eax [esi+0Ch] +
push dword ptr [eax]  +
push offset aLd  +
jmp loc_100C253  +
push ebx  +
push dword ptr [esi+0Ch]  +
push edi  +
call sub_1009F59  +
push edi  +
call ds:lstrlenW  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1008AC3  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+lpString1] 0 +
jnz loc_100C2BD  +
call ds:GetLastError  +
test eax eax +
jnz loc_100C2B9  +
push 57h  +
call ds:SetLastError  +
xor eax eax +
jmp loc_100C2E2  +
push 0  +
push [ebp+lpString1]  +
call sub_100966D  +
cmp eax 2 +
jbe loc_100C2B9  +
push 2  +
push 1  +
push offset asc_1001B40  +
push [ebp+lpString1]  +
call sub_100968E  +
neg eax  +
sbb eax eax +
inc eax  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push ebx  +
push esi  +
xor esi esi +
push edi  +
mov [ebp+var_4] esi +
cmp [ebp+lpString] esi +
jz loc_100C37C  +
push [ebp+lpString]  +
call ds:lstrlenW  +
test eax eax +
jz loc_100C37C  +
push esi  +
push esi  +
push [ebp+lpString]  +
push 10h  +
call sub_100A4B3  +
cmp eax esi +
jnz loc_100C32B  +
call ds:GetLastError  +
test eax eax +
jnz loc_100C387  +
push 8  +
jmp loc_100C381  +
mov esi ds:wcstok +
mov edi offset a_ +
push edi  +
push eax  +
call esi  +
mov ebx eax +
pop ecx  +
pop ecx  +
test ebx ebx +
jz loc_100C37C  +
push 0  +
push 0Ah  +
push ebx  +
call sub_100ADBB  +
test eax eax +
jz loc_100C387  +
push 0Ah  +
push ebx  +
call sub_100ABD5  +
cmp eax 0FFh +
ja loc_100C387  +
cmp [ebp+var_4] 4 +
inc [ebp+var_4]  +
push edi  +
push 0  +
call esi  +
mov ebx eax +
pop ecx  +
pop ecx  +
test ebx ebx +
jnz loc_100C342  +
cmp [ebp+var_4] 4 +
jnz loc_100C37C  +
inc eax  +
jmp loc_100C389  +
push 254Fh  +
call ds:SetLastError  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0A08h +
mov eax dword_101203C +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
mov edx [ebp+arg_4] +
push ebx  +
mov ebx [ebp+arg_8] +
push esi  +
push edi  +
xor esi esi +
mov [ebp+var_9E4] eax +
push 7  +
xor eax eax +
pop ecx  +
lea edi [ebp+var_A04] +
mov [ebp+var_A08] esi +
mov [ebp+var_9E8] edx +
mov [ebp+var_9E0] esi +
mov [ebp+var_9DC] esi +
stos   +
mov [ebp+var_46] ax +
cmp [ebp+var_9E4] esi +
jz loc_100C519  +
cmp ebx esi +
jz loc_100C519  +
mov eax [ebx] +
cmp eax esi +
jz loc_100C412  +
cmp eax 2 +
jb loc_100C519  +
cmp edx esi +
jz loc_100C519  +
cmp dword_10123C4 esi +
jnz loc_100C446  +
lea eax [ebp+WSAData] +
push eax  +
push 202h  +
call ds:WSAStartup  +
test eax eax +
jz loc_100C43C  +
call ds:WSAGetLastError  +
push eax  +
jmp loc_100C525  +
mov dword_10123C4 1 +
lea eax [ebp+var_9DC] +
push eax  +
lea eax [ebp+var_A08] +
push eax  +
push esi  +
push [ebp+var_9E4]  +
call ds:GetAddrInfoW  +
test eax eax +
jnz loc_100C52B  +
mov esi [ebp+var_9DC] +
xor edi edi +
jmp loc_100C4B3  +
push 4  +
xor eax eax +
mov [ebp+var_848] ax +
push 20h  +
lea eax [ebp+var_44] +
push eax  +
push 401h  +
lea eax [ebp+var_848] +
push eax  +
push dword ptr [esi+10h]  +
push dword ptr [esi+18h]  +
call ds:GetNameInfoW  +
cmp eax edi +
jz loc_100C4B9  +
cmp eax 2AFCh +
jnz loc_100C4B0  +
cmp [ebp+var_848] di +
jnz loc_100C4B9  +
mov esi [esi+1Ch] +
cmp esi edi +
jnz loc_100C473  +
jmp loc_100C505  +
lea esi [ebp+var_848] +
cmp [ebp+arg_C] edi +
jnz loc_100C4D6  +
mov eax esi +
push offset a_  +
push eax  +
call ds:wcstok  +
pop ecx  +
pop ecx  +
mov esi eax +
push edi  +
push esi  +
call sub_100966D  +
mov ecx [ebx] +
inc eax  +
cmp ecx eax +
jnb loc_100C4F2  +
mov [ebx] eax +
mov [ebp+var_9E0] 1 +
jmp loc_100C505  +
push ecx  +
push esi  +
push [ebp+var_9E8]  +
call sub_1009F59  +
mov [ebp+var_9E0] eax +
push [ebp+var_9DC]  +
call ds:FreeAddrInfoW  +
mov eax [ebp+var_9E0] +
jmp loc_100C52D  +
call ds:GetLastError  +
test eax eax +
jnz loc_100C52B  +
push 57h  +
call ds:SetLastError  +
xor eax eax +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1008AC3  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
mov esi [ebp+lpString] +
push edi  +
xor edi edi +
mov [ebp+fForce] edi +
cmp esi edi +
jz loc_100C643  +
push esi  +
call ds:lstrlenW  +
test eax eax +
jz loc_100C643  +
push esi  +
call sub_100C29C  +
cmp eax 1 +
jnz loc_100C579  +
add esi 4 +
mov ebx [ebp+arg_8] +
test bl 10h +
jz loc_100C5B4  +
push offset aIpc  +
push esi  +
push offset aSS_1  +
push 2  +
call sub_100A7A4  +
add esp 10h +
test eax eax +
jnz loc_100C5E1  +
call ds:GetLastError  +
test eax eax +
jnz loc_100C5AC  +
push 8  +
call ds:SetLastError  +
push 8  +
pop eax  +
jmp loc_100C645  +
test bl 20h +
jz loc_100C5C0  +
push offset aAdmin  +
jmp loc_100C586  +
test bl 40h +
jz loc_100C5CF  +
cmp [ebp+arg_4] edi +
jz loc_100C5CF  +
push [ebp+arg_4]  +
jmp loc_100C586  +
push esi  +
push offset aS_2  +
push 1  +
call sub_100A7A4  +
add esp 0Ch +
jmp loc_100C596  +
call sub_1009352  +
cmp eax edi +
jnz loc_100C5F3  +
push 12h  +
call sub_10092E1  +
jmp loc_100C5FD  +
push edi  +
push edi  +
push eax  +
push 12h  +
call sub_100A4B3  +
cmp eax edi +
jz loc_100C59A  +
test ebx 10000000h +
jz loc_100C610  +
mov [ebp+fForce] 1 +
push [ebp+fForce]  +
push edi  +
push eax  +
call WNetCancelConnection2W  +
mov esi eax +
cmp esi edi +
jz loc_100C636  +
cmp esi 4B8h +
jz loc_100C62F  +
call sub_10093E5  +
jmp loc_100C63F  +
call sub_100A836  +
jmp loc_100C63F  +
push edi  +
xor esi esi +
call ds:SetLastError  +
mov eax esi +
jmp loc_100C645  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
push edi  +
xor edi edi +
push edi  +
mov [ebp+var_4] edi +
call ds:SetLastError  +
cmp [ebp+lpString] edi +
jz loc_100C7A9  +
push [ebp+lpString]  +
call ds:lstrlenW  +
test eax eax +
jz loc_100C7A9  +
mov esi ds:GetComputerNameExW +
lea eax [ebp+var_4] +
push eax  +
push edi  +
push 4  +
call esi  +
mov ebx ds:GetLastError +
call ebx  +
cmp eax 0EAh +
jz loc_100C6A6  +
xor eax eax +
jmp loc_100C7AC  +
push 1  +
push [ebp+var_4]  +
push edi  +
push 0Eh  +
call sub_100A4B3  +
mov [ebp+lpString1] eax +
cmp eax edi +
jnz loc_100C6CA  +
call ebx  +
test eax eax +
jnz loc_100C69F  +
push 8  +
call ds:SetLastError  +
jmp loc_100C69F  +
lea ecx [ebp+var_4] +
push ecx  +
push eax  +
push 4  +
call esi  +
test eax eax +
jz loc_100C69F  +
push edi  +
push 1  +
push [ebp+lpString]  +
push [ebp+lpString1]  +
call sub_100968E  +
test eax eax +
jz loc_100C7A9  +
push [ebp+lpString]  +
call sub_100C2EB  +
cmp eax 1 +
mov [ebp+var_4] edi +
lea eax [ebp+var_4] +
jnz loc_100C765  +
push edi  +
push eax  +
push edi  +
push [ebp+lpString]  +
call sub_100C395  +
test eax eax +
jz loc_100C69F  +
xor ebx ebx +
inc ebx  +
push ebx  +
push [ebp+var_4]  +
push edi  +
push 0Fh  +
call sub_100A4B3  +
mov esi eax +
cmp esi edi +
jz loc_100C69F  +
push edi  +
lea eax [ebp+var_4] +
push eax  +
push esi  +
push [ebp+lpString]  +
call sub_100C395  +
test eax eax +
jz loc_100C69F  +
push edi  +
push ebx  +
push esi  +
push [ebp+lpString1]  +
call sub_100968E  +
test eax eax +
jnz loc_100C751  +
mov eax ebx +
jmp loc_100C7AC  +
push edi  +
push ebx  +
push offset aLocalhost  +
push esi  +
call sub_100968E  +
neg eax  +
sbb eax eax +
inc eax  +
jmp loc_100C7AC  +
push eax  +
push edi  +
push 7  +
call esi  +
call ebx  +
cmp eax 0EAh +
jnz loc_100C69F  +
push 1  +
push [ebp+var_4]  +
push edi  +
push 0Eh  +
call sub_100A4B3  +
mov ebx eax +
cmp ebx edi +
jz loc_100C69F  +
lea eax [ebp+var_4] +
push eax  +
push ebx  +
push 7  +
call esi  +
test eax eax +
jz loc_100C69F  +
push edi  +
push 1  +
push [ebp+lpString]  +
push ebx  +
jmp loc_100C759  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 10000010h  +
push 0  +
push [ebp+lpString]  +
call sub_100C543  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
mov ebx [ebp+lpString] +
push edi  +
xor edi edi +
cmp ebx edi +
jz loc_100C935  +
push esi  +
mov esi [ebp+arg_C] +
cmp esi edi +
jz loc_100C934  +
cmp [ebp+hConsoleOutput] edi +
jz loc_100C934  +
push ebx  +
call sub_1009B49  +
mov [ebp+lpString] eax +
cmp eax esi +
jnb loc_100C810  +
mov [ebp+lpString] esi +
mov eax [ebp+lpString] +
push 1  +
add eax 5 +
push eax  +
push edi  +
push 15h  +
call sub_100A4B3  +
mov [ebp+var_8] eax +
cmp eax edi +
jnz loc_100C852  +
call ds:GetLastError  +
test eax eax +
jnz loc_100C83A  +
push 8  +
call ds:SetLastError  +
call sub_10093E5  +
push ebx  +
call sub_1009917  +
shr eax 1 +
push eax  +
push offset dword_1001C48  +
jmp loc_100C92E  +
mov [ebp+var_4] edi +
cmp [ebp+arg_8] edi +
jz loc_100C865  +
push [ebp+arg_8]  +
call sub_1009B49  +
mov [ebp+var_4] eax +
xor esi esi +
cmp [ebp+arg_8] edi +
jz loc_100C8FB  +
push esi  +
push [ebp+arg_8]  +
push ebx  +
call sub_1009EE9  +
cmp eax edi +
jz loc_100C8FB  +
push eax  +
call sub_1009B49  +
mov edi [ebp+var_4] +
push ebx  +
sub edi eax +
call sub_1009B49  +
add eax edi +
cmp eax [ebp+arg_C] +
jnb loc_100C89C  +
mov esi eax +
xor edi edi +
jmp loc_100C867  +
test esi esi +
jz loc_100C8A5  +
cmp eax [ebp+arg_C] +
jnz loc_100C8A8  +
mov esi [ebp+arg_C] +
lea eax [esi+1] +
cmp [ebp+lpString] eax +
ja loc_100C8B3  +
mov eax [ebp+lpString] +
mov edi [ebp+var_8] +
push eax  +
push ebx  +
push edi  +
call sub_1009F59  +
push 0  +
push [ebp+arg_C]  +
push edi  +
call sub_100B07C  +
push edi  +
push [ebp+hConsoleOutput]  +
call sub_1009FDF  +
push edi  +
call sub_1009917  +
shr eax 1 +
push eax  +
push ebx  +
push edi  +
call sub_1009F59  +
push ebx  +
call sub_1009B49  +
cmp eax esi +
push ebx  +
jle loc_100C921  +
call sub_1009917  +
shr eax 1 +
push eax  +
lea eax [edi+esi*2] +
push eax  +
jmp loc_100C92E  +
cmp esi edi +
jz loc_100C8A5  +
push ebx  +
call sub_1009B49  +
sub eax esi +
cmp eax [ebp+arg_C] +
ja loc_100C8A5  +
push ebx  +
call sub_1009B49  +
cmp eax [ebp+arg_C] +
jg loc_100C8A8  +
push ebx  +
call sub_1009B49  +
mov esi eax +
jmp loc_100C8A8  +
call sub_1009917  +
shr eax 1 +
push eax  +
push offset dword_1001330  +
push ebx  +
call sub_1009F59  +
pop esi  +
pop edi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push edi  +
push 16h  +
call sub_10092E1  +
mov edi eax +
test edi edi +
jz loc_100CA26  +
cmp [ebp+arg_8] 0 +
jz loc_100CA26  +
push ebx  +
push esi  +
push edi  +
call sub_1009917  +
shr eax 1 +
push eax  +
push offset dword_1001C48  +
push edi  +
call sub_1009F59  +
push [ebp+arg_0]  +
call sub_100B4AA  +
mov ebx [ebp+lpMem] +
push 1  +
lea esi [ebx+5] +
push esi  +
push 0  +
push 13h  +
mov [ebp+var_4] eax +
call sub_100A4B3  +
push 1  +
push esi  +
xor esi esi +
push esi  +
push 14h  +
mov [ebp+lpMem] eax +
call sub_100A4B3  +
mov dword ptr [ebp+var_8] eax +
cmp [ebp+lpMem] esi +
jz loc_100CA24  +
cmp eax esi +
jz loc_100CA24  +
push [ebp+lpString]  +
call sub_1009B49  +
mov [ebp+var_C] eax +
cmp [ebp+var_4] esi +
jbe loc_100CA24  +
push ebx  +
push dword ptr [ebp+var_8]  +
push esi  +
push [ebp+arg_0]  +
call sub_100C189  +
push dword ptr [ebp+var_8]  +
push [ebp+arg_8]  +
push [ebp+lpMem]  +
call sub_1009917  +
shr eax 1 +
dec eax  +
push eax  +
push [ebp+lpMem]  +
call sub_1009E0B  +
add esp 10h +
push edi  +
call sub_1009917  +
shr eax 1 +
push eax  +
push [ebp+lpMem]  +
push edi  +
call sub_1009F9C  +
inc esi  +
cmp esi [ebp+var_4] +
jnb loc_100CA24  +
cmp ebx [ebp+var_C] +
jb loc_100CA24  +
push edi  +
call sub_1009917  +
shr eax 1 +
push eax  +
push [ebp+lpString]  +
push edi  +
call sub_1009F9C  +
sub ebx [ebp+var_C] +
cmp esi [ebp+var_4] +
jb loc_100C9C3  +
pop esi  +
pop ebx  +
pop edi  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 48h +
mov eax dword_101203C +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_8] +
push ebx  +
push esi  +
push edi  +
mov ebx [ebp+arg_0] +
mov esi offset aS_3 +
lea edi [ebp+var_1C] +
movs   +
movs   +
mov esi offset aD +
lea edi [ebp+var_14] +
movs   +
movs   +
mov esi offset aF +
lea edi [ebp+var_C] +
movs   +
mov [ebp+var_20] eax +
mov eax [ebp+arg_C] +
push 16h  +
mov [ebp+lpString] eax +
movs   +
call sub_10092E1  +
mov esi eax +
mov [ebp+lpMem] esi +
test ebx ebx +
jz loc_100CBB0  +
test esi esi +
jz loc_100CBB0  +
xor eax eax +
lea edi [ebp+Time] +
stos   +
stos   +
stos   +
push esi  +
stos   +
call sub_1009917  +
shr eax 1 +
push eax  +
mov edi offset dword_1001C48 +
push edi  +
push esi  +
call sub_1009F59  +
mov ecx [ebx+204h] +
mov eax ecx +
push 10h  +
and eax 0FF0h +
pop edx  +
sub eax edx +
jz loc_100CC6F  +
sub eax edx +
jz loc_100CC31  +
sub eax edx +
jz loc_100CBEB  +
sub eax edx +
jz loc_100CBC1  +
sub eax 20h +
jz loc_100CB24  +
sub eax 20h +
jz loc_100CAFE  +
push esi  +
call sub_1009917  +
shr eax 1 +
push eax  +
push edi  +
push esi  +
call sub_1009F59  +
jmp loc_100CB7F  +
mov ecx [ebx+28Ch] +
test ecx ecx +
jz loc_100CBB0  +
mov eax [ebx+290h] +
test eax eax +
jnz loc_100CB18  +
mov eax ebx +
push esi  +
push eax  +
push [ebp+var_20]  +
push [ebp+arg_4]  +
call ecx  +
jmp loc_100CB7F  +
push [ebp+arg_4]  +
lea eax [ebp+var_48] +
push [ebp+var_20]  +
push eax  +
call sub_100BCE8  +
mov esi eax +
lea edi [ebp+Time] +
movs   +
push 0FEh  +
push [ebp+lpMem]  +
movs   +
push 0  +
lea eax [ebp+Time] +
push eax  +
movs   +
push 80000000h  +
push 400h  +
movs   +
call ds:GetTimeFormatW  +
test eax eax +
jnz loc_100CB7C  +
call sub_10093E5  +
push [ebp+lpMem]  +
call sub_1009917  +
shr eax 1 +
push eax  +
call sub_1009352  +
push eax  +
push [ebp+lpMem]  +
call sub_1009F59  +
mov esi [ebp+lpMem] +
push esi  +
call ds:lstrlenW  +
test eax eax +
jnz loc_100CBB0  +
test dword ptr [ebx+204h] 100000h +
jz loc_100CBB0  +
push esi  +
call sub_1009917  +
shr eax 1 +
push eax  +
push 138Dh  +
call sub_100B337  +
push eax  +
push esi  +
call sub_1009F59  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1008AC3  +
leave   +
retn 10h  +
lea edi [ebx+208h] +
test ecx 2000h +
jnz loc_100CBD2  +
lea edi [ebp+var_C] +
push [ebp+arg_4]  +
push [ebp+var_20]  +
test ecx 4000h +
jnz loc_100CC8E  +
call sub_100BCB3  +
jmp loc_100CC13  +
lea edi [ebx+208h] +
test ecx 2000h +
jnz loc_100CBFC  +
lea edi [ebp+var_C] +
push [ebp+arg_4]  +
push [ebp+var_20]  +
test ecx 4000h +
jnz loc_100CC8E  +
call sub_100BC7E  +
push ecx  +
push ecx  +
fstp  [esp+5Ch+var_5C] +
push edi  +
push esi  +
call sub_1009917  +
shr eax 1 +
dec eax  +
push eax  +
push esi  +
call sub_1009E0B  +
add esp 14h +
jmp loc_100CB7F  +
lea edi [ebx+208h] +
test ecx 2000h +
jnz loc_100CC42  +
lea edi [ebp+var_14] +
push [ebp+arg_4]  +
push [ebp+var_20]  +
test ecx 4000h +
jnz loc_100CC8E  +
call sub_100BC43  +
push eax  +
push edi  +
push esi  +
call sub_1009917  +
shr eax 1 +
dec eax  +
push eax  +
push esi  +
call sub_1009E0B  +
add esp 10h +
jmp loc_100CB7F  +
lea edi [ebx+208h] +
test ecx 2000h +
jnz loc_100CC80  +
lea edi [ebp+var_1C] +
push [ebp+arg_4]  +
push [ebp+var_20]  +
test ecx 4000h +
jz loc_100CCB0  +
call sub_100BBDB  +
test eax eax +
jz loc_100CBB0  +
push [ebp+lpString]  +
push edi  +
push dword ptr [ebx+200h]  +
push eax  +
call sub_100C940  +
jmp loc_100CB7F  +
call sub_100BC14  +
test eax eax +
jz loc_100CBB0  +
jmp loc_100CC55  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1Ch +
push ebx  +
push esi  +
push edi  +
xor edi edi +
mov [ebp+var_8] edi +
cmp [ebp+hConsoleOutput] edi +
jz loc_100D126  +
mov esi [ebp+arg_8] +
cmp esi edi +
jz loc_100D126  +
push 1  +
mov ebx 1000h +
push ebx  +
push edi  +
push 16h  +
call sub_100A4B3  +
mov [ebp+lpMem] eax +
call sub_100B40A  +
mov [ebp+var_8] eax +
cmp eax edi +
jz loc_100D118  +
cmp [ebp+lpMem] edi +
jz loc_100D118  +
test [ebp+arg_C] ebx +
jnz loc_100CE18  +
mov eax [ebp+arg_4] +
xor ecx ecx +
cmp eax edi +
jbe loc_100CDAA  +
add esi 204h +
mov [ebp+arg_C] eax +
mov eax [esi] +
test eax ebx +
jnz loc_100CD9F  +
xor edi edi +
test eax 10000h +
jnz loc_100CD56  +
and eax 0FF0h +
cmp eax 20h +
jz loc_100CD56  +
cmp eax 30h +
jz loc_100CD56  +
cmp eax 40h +
jnz loc_100CD59  +
xor edi edi +
inc edi  +
cmp ecx 1 +
jnz loc_100CD6B  +
push offset asc_1001300  +
push [ebp+hConsoleOutput]  +
call sub_1009FDF  +
push [ebp+lpMem]  +
call sub_1009917  +
shr eax 1 +
push eax  +
lea eax [esi-204h] +
push eax  +
push [ebp+lpMem]  +
call sub_1009F59  +
push edi  +
push dword ptr [esi-4]  +
push [ebp+lpMem]  +
call sub_100B07C  +
push [ebp+lpMem]  +
push [ebp+hConsoleOutput]  +
call sub_1009FDF  +
xor ecx ecx +
inc ecx  +
add esi 294h +
dec [ebp+arg_C]  +
jnz loc_100CD33  +
push offset String  +
push [ebp+hConsoleOutput]  +
call sub_1009FDF  +
mov edi [ebp+arg_4] +
xor eax eax +
test edi edi +
jbe loc_100CE0B  +
mov esi [ebp+arg_8] +
add esi 200h +
test [esi+4] ebx +
jnz loc_100CE02  +
cmp eax 1 +
jnz loc_100CDE0  +
push offset asc_1001300  +
push [ebp+hConsoleOutput]  +
call sub_1009FDF  +
mov eax [esi] +
lea ecx [eax+1] +
push ecx  +
push eax  +
push offset asc_1001CB0  +
push [ebp+lpMem]  +
call sub_100A740  +
push [ebp+lpMem]  +
push [ebp+hConsoleOutput]  +
call sub_1009FDF  +
xor eax eax +
inc eax  +
add esi 294h +
dec edi  +
jnz loc_100CDC9  +
push offset String  +
push [ebp+hConsoleOutput]  +
call sub_1009FDF  +
push [ebp+arg_10]  +
call sub_100B4AA  +
and [ebp+var_14] 0 +
mov [ebp+var_1C] eax +
test eax eax +
jbe loc_100D10D  +
push [ebp+lpMem]  +
call sub_1009917  +
shr eax 1 +
push eax  +
push offset dword_1001C48  +
push [ebp+lpMem]  +
call sub_1009F59  +
push [ebp+var_14]  +
push [ebp+arg_10]  +
call sub_100BBDB  +
xor ecx ecx +
mov [ebp+var_18] eax +
cmp eax ecx +
jz loc_100D0FE  +
mov [ebp+var_C] ecx +
mov [ebp+arg_C] ecx +
cmp [ebp+arg_4] ecx +
jbe loc_100CF93  +
mov esi [ebp+arg_8] +
add esi 200h +
mov eax [esi+4] +
xor ebx ebx +
mov [ebp+var_10] ebx +
test eax 1000h +
jnz loc_100CF7E  +
test eax 88000h +
jz loc_100CEA3  +
mov eax [esi] +
push [ebp+lpMem]  +
inc ebx  +
mov [ebp+var_10] eax +
call sub_1009917  +
shr eax 1 +
mov [esi] eax +
mov edi offset asc_1001CA8 +
push edi  +
push [ebp+var_18]  +
lea eax [esi-200h] +
push [ebp+arg_C]  +
push eax  +
call sub_100CA30  +
xor ecx ecx +
test ebx ebx +
jnz loc_100CEED  +
mov eax [esi+4] +
test eax 10000h +
jnz loc_100CEDF  +
and eax 0FF0h +
cmp eax 20h +
jz loc_100CEDF  +
cmp eax 30h +
jz loc_100CEDF  +
cmp eax 40h +
jnz loc_100CEE2  +
xor ecx ecx +
inc ecx  +
push ecx  +
push dword ptr [esi]  +
push [ebp+lpMem]  +
call sub_100B07C  +
cmp ebx 1 +
jnz loc_100CEF7  +
mov eax [ebp+var_10] +
mov [esi] eax +
cmp [ebp+var_C] 1 +
jnz loc_100CF0A  +
push offset asc_1001300  +
push [ebp+hConsoleOutput]  +
call sub_1009FDF  +
test dword ptr [esi+4] 8000h +
jz loc_100CF6C  +
push dword ptr [esi]  +
push edi  +
push [ebp+lpMem]  +
push [ebp+hConsoleOutput]  +
call sub_100C7D5  +
push [ebp+lpMem]  +
call sub_1009B49  +
test eax eax +
jz loc_100CF77  +
push 3  +
push [ebp+var_8]  +
call sub_100B997  +
mov ebx eax +
cmp ebx 0FFFFFFFFh +
jz loc_100CF77  +
push [ebp+arg_C]  +
push 0  +
push ebx  +
push [ebp+var_8]  +
call sub_100BFD1  +
push 0  +
push [ebp+lpMem]  +
push 2  +
push ebx  +
push [ebp+var_8]  +
call sub_100BF94  +
push 0  +
push edi  +
push 1  +
push ebx  +
push [ebp+var_8]  +
call sub_100BF94  +
jmp loc_100CF77  +
push [ebp+lpMem]  +
push [ebp+hConsoleOutput]  +
call sub_1009FDF  +
mov [ebp+var_C] 1 +
inc [ebp+arg_C]  +
mov eax [ebp+arg_C] +
add esi 294h +
cmp eax [ebp+arg_4] +
jb loc_100CE77  +
push offset String  +
push [ebp+hConsoleOutput]  +
call sub_1009FDF  +
push [ebp+var_8]  +
call sub_100B4AA  +
mov [ebp+var_10] eax +
jmp loc_100D0F6  +
and [ebp+var_C] 0 +
and [ebp+arg_C] 0 +
or edi 0FFFFFFFFh +
test eax eax +
jbe loc_100D0E6  +
jmp loc_100CFC8  +
mov edi [ebp+var_18] +
push 0  +
push [ebp+arg_C]  +
push [ebp+var_8]  +
call sub_100BDCD  +
mov esi eax +
lea eax [edi+1] +
cmp eax esi +
jnb loc_100D03F  +
mov edx [ebp+arg_8] +
mov ecx eax +
imul ecx ecx +
mov ebx esi +
lea edi [ecx+edx+200h] +
sub ebx eax +
test dword ptr [edi+4] 1000h +
jnz loc_100D036  +
cmp [ebp+var_C] 1 +
jnz loc_100D010  +
push offset asc_1001300  +
push [ebp+hConsoleOutput]  +
call sub_1009FDF  +
mov eax [edi] +
lea ecx [eax+1] +
push ecx  +
push eax  +
push offset asc_1001300  +
push [ebp+lpMem]  +
call sub_100A740  +
push [ebp+lpMem]  +
push [ebp+hConsoleOutput]  +
call sub_1009FDF  +
mov [ebp+var_C] 1 +
add edi 294h +
dec ebx  +
jnz loc_100CFF4  +
cmp [ebp+var_C] 1 +
mov [ebp+var_18] esi +
jnz loc_100D055  +
push offset asc_1001300  +
push [ebp+hConsoleOutput]  +
call sub_1009FDF  +
push 2  +
push [ebp+arg_C]  +
push [ebp+var_8]  +
call sub_100BD96  +
push 1  +
push [ebp+arg_C]  +
mov edi eax +
push [ebp+var_8]  +
call sub_100BD96  +
mov ebx eax +
test edi edi +
jz loc_100D0D7  +
test ebx ebx +
jz loc_100D0D7  +
push [ebp+lpMem]  +
call sub_1009917  +
shr eax 1 +
push eax  +
push edi  +
mov edi [ebp+lpMem] +
push edi  +
call sub_1009F59  +
imul esi esi +
mov eax [ebp+arg_8] +
push dword ptr [esi+eax+200h]  +
push ebx  +
push edi  +
push [ebp+hConsoleOutput]  +
call sub_100C7D5  +
push edi  +
call sub_1009B49  +
test eax eax +
jnz loc_100D0C7  +
push [ebp+arg_C]  +
push [ebp+var_8]  +
call sub_100BB0A  +
dec [ebp+arg_C]  +
dec [ebp+var_10]  +
jmp loc_100D0D7  +
push 0  +
push edi  +
push 2  +
push [ebp+arg_C]  +
push [ebp+var_8]  +
call sub_100BF94  +
inc [ebp+arg_C]  +
mov eax [ebp+arg_C] +
cmp eax [ebp+var_10] +
jb loc_100CFC5  +
push offset String  +
push [ebp+hConsoleOutput]  +
call sub_1009FDF  +
mov eax [ebp+var_10] +
test eax eax +
jnz loc_100CFB0  +
inc [ebp+var_14]  +
mov eax [ebp+var_14] +
cmp eax [ebp+var_1C] +
jb loc_100CE2F  +
lea eax [ebp+var_8] +
push eax  +
call sub_100B47F  +
jmp loc_100D13D  +
call ds:GetLastError  +
test eax eax +
jnz loc_100D138  +
push 8  +
jmp loc_100D132  +
call ds:GetLastError  +
test eax eax +
jnz loc_100D138  +
push 57h  +
call ds:SetLastError  +
call sub_10093E5  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0ACh +
mov eax dword_101203C +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_10] +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov edi [ebp+arg_8] +
xor ebx ebx +
push 7Ch  +
mov [ebp+var_9C] eax +
lea eax [ebp+var_80] +
push ebx  +
push eax  +
mov [ebp+hConsoleOutput] esi +
mov [ebp+var_A8] edi +
mov dword ptr [ebp+String] ebx +
call memset  +
add esp 0Ch +
cmp esi ebx +
jz loc_100D3DF  +
cmp edi ebx +
jz loc_100D3DF  +
push 1  +
push 1000h  +
push ebx  +
push 16h  +
call sub_100A4B3  +
mov ebx eax +
mov [ebp+lpMem] ebx +
test ebx ebx +
jnz loc_100D1D3  +
call ds:GetLastError  +
test eax eax +
jnz loc_100D3F1  +
push 8  +
jmp loc_100D3EB  +
mov esi [ebp+arg_4] +
and [ebp+var_90] 0 +
test esi esi +
jbe loc_100D1FE  +
push edi  +
call sub_1009B49  +
cmp [ebp+var_90] eax +
jnb loc_100D1F5  +
mov [ebp+var_90] eax +
add edi 294h +
dec esi  +
jnz loc_100D1E1  +
push [ebp+var_9C]  +
call sub_100B4AA  +
and [ebp+var_8C] 0 +
mov [ebp+var_A4] eax +
test eax eax +
jbe loc_100D3F6  +
mov edi offset String +
push [ebp+var_8C]  +
push [ebp+var_9C]  +
call sub_100BBDB  +
mov [ebp+var_AC] eax +
test eax eax +
jz loc_100D3C5  +
and [ebp+var_94] 0 +
cmp [ebp+arg_4] 0 +
jbe loc_100D3AA  +
mov esi [ebp+var_A8] +
add esi 200h +
push ebx  +
call sub_1009917  +
shr eax 1 +
push eax  +
push offset dword_1001C48  +
push ebx  +
call sub_1009F59  +
test dword ptr [esi+4] 1000h +
jnz loc_100D38F  +
lea eax [esi-200h] +
push eax  +
push offset aS_4  +
push ebx  +
call sub_1009917  +
shr eax 1 +
dec eax  +
push eax  +
push ebx  +
call sub_1009E0B  +
mov eax [ebp+var_90] +
add esp 10h +
push 0  +
add eax 2 +
push eax  +
push ebx  +
call sub_100B07C  +
push ebx  +
push [ebp+hConsoleOutput]  +
call sub_1009FDF  +
push [ebp+lpMem]  +
mov ebx [esi] +
call sub_1009917  +
push edi  +
push [ebp+var_AC]  +
shr eax 1 +
push [ebp+var_94]  +
mov [esi] eax +
lea eax [esi-200h] +
push eax  +
call sub_100CA30  +
push edi  +
push [ebp+lpMem]  +
mov [esi] ebx +
mov ebx ds:wcstok +
call ebx  +
pop ecx  +
pop ecx  +
mov [ebp+lpString] eax +
test eax eax +
jz loc_100D37D  +
push [ebp+lpString]  +
push [ebp+hConsoleOutput]  +
call sub_1009FDF  +
push edi  +
push 0  +
call ebx  +
pop ecx  +
pop ecx  +
mov [ebp+lpString] eax +
test eax eax +
jz loc_100D37D  +
push [ebp+lpMem]  +
call sub_1009917  +
shr eax 1 +
push eax  +
push offset asc_1001300  +
lea eax [ebp+String] +
push eax  +
call sub_1009F59  +
mov eax [ebp+var_90] +
push 0  +
add eax 2 +
push eax  +
lea eax [ebp+String] +
push eax  +
call sub_100B07C  +
push edi  +
push [ebp+hConsoleOutput]  +
call sub_1009FDF  +
lea eax [ebp+String] +
push eax  +
push [ebp+hConsoleOutput]  +
call sub_1009FDF  +
jmp loc_100D304  +
push edi  +
push [ebp+hConsoleOutput]  +
call sub_1009FDF  +
mov ebx [ebp+lpMem] +
inc [ebp+var_94]  +
mov eax [ebp+var_94] +
add esi 294h +
cmp eax [ebp+arg_4] +
jb loc_100D25F  +
mov eax [ebp+var_8C] +
inc eax  +
cmp eax [ebp+var_A4] +
jnb loc_100D3C5  +
push edi  +
push [ebp+hConsoleOutput]  +
call sub_1009FDF  +
inc [ebp+var_8C]  +
mov eax [ebp+var_8C] +
cmp eax [ebp+var_A4] +
jb loc_100D223  +
jmp loc_100D3F6  +
call ds:GetLastError  +
test eax eax +
jnz loc_100D3F1  +
push 57h  +
call ds:SetLastError  +
call sub_10093E5  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1008AC3  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
cmp [ebp+hConsoleOutput] 0 +
push ebx  +
push esi  +
push edi  +
jz loc_100D5C0  +
mov esi [ebp+arg_8] +
test esi esi +
jz loc_100D5C0  +
push 1  +
mov edi 1000h +
push edi  +
push 0  +
push 16h  +
call sub_100A4B3  +
mov ebx eax +
mov [ebp+lpString] ebx +
test ebx ebx +
jnz loc_100D45B  +
call ds:GetLastError  +
test eax eax +
jnz loc_100D5D2  +
push 8  +
jmp loc_100D5CC  +
test [ebp+arg_C] edi +
jnz loc_100D4C3  +
mov ecx [ebp+arg_4] +
xor eax eax +
test ecx ecx +
jbe loc_100D4B6  +
mov [ebp+arg_C] ecx +
test [esi+204h] edi +
jnz loc_100D4AB  +
cmp eax 1 +
jnz loc_100D486  +
push offset asc_1001CCC  +
push [ebp+hConsoleOutput]  +
call sub_1009FDF  +
push esi  +
push offset aS_5  +
push ebx  +
call sub_1009917  +
shr eax 1 +
dec eax  +
push eax  +
push ebx  +
call sub_1009E0B  +
add esp 10h +
push ebx  +
push [ebp+hConsoleOutput]  +
call sub_1009FDF  +
xor eax eax +
inc eax  +
add esi 294h +
dec [ebp+arg_C]  +
jnz loc_100D46C  +
push offset String  +
push [ebp+hConsoleOutput]  +
call sub_1009FDF  +
push [ebp+arg_10]  +
call sub_100B4AA  +
and [ebp+var_8] 0 +
mov [ebp+var_14] eax +
test eax eax +
jbe loc_100D5D7  +
mov ebx offset asc_1001CBC +
push [ebp+var_8]  +
push [ebp+arg_10]  +
call sub_100BBDB  +
xor ecx ecx +
mov [ebp+var_10] eax +
cmp eax ecx +
jz loc_100D5AF  +
mov [ebp+var_C] ecx +
mov [ebp+arg_C] ecx +
cmp [ebp+arg_4] ecx +
jbe loc_100D5A2  +
mov esi [ebp+arg_8] +
add esi 200h +
push [ebp+lpString]  +
call sub_1009917  +
shr eax 1 +
push eax  +
push offset dword_1001C48  +
push [ebp+lpString]  +
call sub_1009F59  +
test [esi+4] edi +
jnz loc_100D58D  +
push [ebp+lpString]  +
mov edi [esi] +
call sub_1009917  +
push offset asc_1001CCC  +
push [ebp+var_10]  +
shr eax 1 +
push [ebp+arg_C]  +
mov [esi] eax +
lea eax [esi-200h] +
push eax  +
call sub_100CA30  +
mov [esi] edi +
xor edi edi +
inc edi  +
cmp [ebp+var_C] edi +
jnz loc_100D568  +
push offset asc_1001CCC  +
push [ebp+hConsoleOutput]  +
call sub_1009FDF  +
push ebx  +
push [ebp+hConsoleOutput]  +
call sub_1009FDF  +
push [ebp+lpString]  +
push [ebp+hConsoleOutput]  +
call sub_1009FDF  +
push ebx  +
push [ebp+hConsoleOutput]  +
call sub_1009FDF  +
mov [ebp+var_C] edi +
mov edi 1000h +
inc [ebp+arg_C]  +
mov eax [ebp+arg_C] +
add esi 294h +
cmp eax [ebp+arg_4] +
jb loc_100D50F  +
push offset String  +
push [ebp+hConsoleOutput]  +
call sub_1009FDF  +
inc [ebp+var_8]  +
mov eax [ebp+var_8] +
cmp eax [ebp+var_14] +
jb loc_100D4DF  +
jmp loc_100D5D7  +
call ds:GetLastError  +
test eax eax +
jnz loc_100D5D2  +
push 57h  +
call ds:SetLastError  +
call sub_10093E5  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+hConsoleOutput] +
test esi esi +
jz loc_100D63E  +
mov edx [ebp+arg_8] +
test edx edx +
jz loc_100D63E  +
mov ecx [ebp+arg_C] +
mov eax ecx +
and eax 0Fh +
dec eax  +
jz loc_100D628  +
dec eax  +
jz loc_100D618  +
dec eax  +
jnz loc_100D636  +
push [ebp+arg_10]  +
push ecx  +
push edx  +
push [ebp+arg_4]  +
push esi  +
call sub_100D40C  +
jmp loc_100D636  +
push [ebp+arg_10]  +
push ecx  +
push edx  +
push [ebp+arg_4]  +
push esi  +
call sub_100CCC4  +
jmp loc_100D636  +
push [ebp+arg_10]  +
push ecx  +
push edx  +
push [ebp+arg_4]  +
push esi  +
call sub_100D149  +
push esi  +
call ds:fflush  +
pop ecx  +
pop esi  +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call ds:__iob_func  +
add eax 20h +
push eax  +
call sub_100D5E3  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ds:SetLastError +
push edi  +
push 0  +
call esi  +
mov edi [ebp+arg_0] +
test edi edi +
jnz loc_100D69F  +
call ds:GetLastError  +
test eax eax +
jnz loc_100D697  +
push 57h  +
call esi  +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
push edi  +
call ds:lstrlenW  +
cmp eax 1 +
jle loc_100D697  +
movzx eax word ptr [edi] +
push 0  +
push 1  +
push eax  +
push offset asc_1001CD0  +
call sub_1009A56  +
cmp eax 0FFFFFFFFh +
jz loc_100D697  +
xor eax eax +
inc eax  +
jmp loc_100D699  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
dec eax  +
cmp eax 9 +
ja loc_100D6ED  +
movzx eax ds:byte_100D6FC[eax] +
jmp ds:off_100D6F4[eax*4]  +
xor eax eax +
inc eax  +
jmp loc_100D6EF  +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov edi ds:SetLastError +
xor ebx ebx +
push ebx  +
call edi  +
cmp [ebp+lpString] ebx +
jz loc_100D790  +
cmp [ebp+arg_4] ebx +
jnz loc_100D790  +
push ebx  +
push 1  +
push 7Ch  +
push [ebp+lpString]  +
call sub_1009A56  +
mov esi eax +
cmp esi 0FFFFFFFFh +
jnz loc_100D74A  +
push ebx  +
call edi  +
push ebx  +
push [ebp+lpString]  +
call sub_100966D  +
mov esi eax +
push 1  +
lea eax [esi+5] +
push eax  +
push ebx  +
push 0Ch  +
call sub_100A4B3  +
mov [ebp+arg_4] eax +
cmp eax ebx +
jnz loc_100D76D  +
call ds:GetLastError  +
test eax eax +
jnz loc_100D79E  +
push 8  +
jmp loc_100D79C  +
lea ecx [esi+1] +
push ecx  +
push offset dword_10012CC  +
push eax  +
call sub_1009F59  +
add esi 2 +
push esi  +
push [ebp+lpString]  +
push [ebp+arg_4]  +
call sub_1009F9C  +
mov eax [ebp+arg_4] +
jmp loc_100D7A0  +
call ds:GetLastError  +
test eax eax +
jnz loc_100D79E  +
push 57h  +
call edi  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push esi  +
mov esi ds:SetLastError +
push edi  +
xor edi edi +
push edi  +
mov [ebp+var_4] edi +
call esi  +
mov ecx [ebp+arg_8] +
cmp [ebp+arg_4] edi +
jz loc_100D7E5  +
cmp ecx edi +
jnz loc_100D7E5  +
call ds:GetLastError  +
test eax eax +
jnz loc_100D7DE  +
push 57h  +
call esi  +
xor eax eax +
jmp loc_100DA48  +
mov eax [ebp+arg_0] +
cmp eax edi +
jz loc_100D7D0  +
or dword ptr [eax] 0FFFFFFFFh +
push ebx  +
mov [ebp+arg_8] edi +
cmp [ebp+arg_4] edi +
jbe loc_100DA44  +
lea edi [ecx+3Ch] +
lea eax [edi-3Ch] +
test eax eax +
jz loc_100DA4E  +
xor ebx ebx +
push ebx  +
push 1  +
lea eax [edi-3Ch] +
push offset aParser2_0  +
push eax  +
call sub_10096E9  +
test eax eax +
jnz loc_100D900  +
mov eax [edi-28h] +
mov esi [edi-2Ch] +
mov [ebp+var_10] eax +
cmp [edi] ebx +
jnz loc_100D900  +
cmp [edi+4] ebx +
jnz loc_100D900  +
cmp [edi+8] ebx +
jnz loc_100D900  +
cmp [edi+0Ch] ebx +
jnz loc_100D900  +
mov ebx esi +
and ebx 40000h +
xor eax eax +
mov ecx ebx +
or ecx eax +
jnz loc_100D87B  +
mov eax [edi-1Ch] +
test eax eax +
jz loc_100D900  +
push eax  +
call ds:lstrlenW  +
test eax eax +
jz loc_100D900  +
mov eax esi +
and eax 20000h +
xor ecx ecx +
mov edx eax +
or edx ecx +
jz loc_100D890  +
cmp dword ptr [edi-34h] 0Ah +
jnz loc_100D900  +
mov edx eax +
or edx ecx +
jz loc_100D8A1  +
xor ecx ecx +
inc ecx  +
cmp [ebp+var_4] ecx +
jz loc_100D900  +
mov [ebp+var_4] ecx +
mov edx ebx +
xor ecx ecx +
or edx ecx +
jz loc_100D8B6  +
mov ecx [ebp+arg_0] +
cmp dword ptr [ecx] 0FFFFFFFFh +
jnz loc_100D900  +
mov edx [ebp+arg_8] +
mov [ecx] edx +
xor ecx ecx +
or eax ecx +
jz loc_100D8C2  +
xor eax eax +
or ebx eax +
jnz loc_100D900  +
mov eax [edi-34h] +
dec eax  +
cmp eax 9 +
ja loc_100D900  +
jmp ds:off_100DA70[eax*4]  +
mov eax esi +
and eax 10000h +
xor ecx ecx +
mov [ebp+var_C] eax +
or eax ecx +
jz loc_100D919  +
mov ebx esi +
and ebx 1 +
xor eax eax +
mov ecx ebx +
or ecx eax +
jnz loc_100D900  +
cmp [edi-10h] ecx +
jnz loc_100D900  +
mov eax [edi-0Ch] +
test eax eax +
jz loc_100D938  +
cmp eax 2 +
jnb loc_100D938  +
call ds:GetLastError  +
test eax eax +
jnz loc_100D912  +
push 57h  +
call ds:SetLastError  +
xor eax eax +
jmp loc_100DA47  +
mov eax [edi-10h] +
test eax eax +
jz loc_100D900  +
mov ebx esi +
and ebx 1 +
xor ecx ecx +
mov edx ebx +
or edx ecx +
jz loc_100D938  +
push dword ptr [eax]  +
call sub_100B3E9  +
test eax eax +
jz loc_100D900  +
mov eax esi +
and eax 2 +
xor ecx ecx +
or eax ecx +
jz loc_100D948  +
cmp [edi-14h] ecx +
jz loc_100D900  +
xor eax eax +
or ebx eax +
jnz loc_100DA2E  +
cmp dword ptr [edi-24h] 1 +
jnz loc_100D900  +
and esi 20h +
or esi eax +
jnz loc_100D900  +
mov eax [ebp+var_C] +
xor ecx ecx +
or eax ecx +
jnz loc_100DA2E  +
cmp dword ptr [edi-0Ch] 2 +
jb loc_100D900  +
jmp loc_100DA2E  +
mov eax esi +
and eax 2 +
xor ecx ecx +
or eax ecx +
jnz loc_100DA66  +
mov eax esi +
and eax 10000h +
or eax ecx +
jnz loc_100D900  +
mov eax esi +
and eax 40h +
or eax ecx +
jnz loc_100D900  +
mov eax esi +
and eax 80h +
or eax ecx +
jnz loc_100D900  +
mov edx [edi-10h] +
test edx edx +
jz loc_100D900  +
mov eax esi +
and eax 1 +
or eax ecx +
jz loc_100D9D6  +
push dword ptr [edx]  +
call sub_100B3E9  +
test eax eax +
jz loc_100D900  +
jmp loc_100DA2E  +
cmp dword ptr [edi-24h] 1 +
ja loc_100D900  +
and esi 20h +
xor eax eax +
jmp loc_100DA26  +
cmp dword ptr [edi-8] 0 +
jz loc_100D900  +
cmp dword ptr [edi-4] 0 +
jnz loc_100DA2E  +
lea eax [edi-3Ch] +
mov [edi-4] eax +
jmp loc_100DA2E  +
mov eax esi +
and eax 0Fh +
xor ecx ecx +
or eax ecx +
jnz loc_100D900  +
mov eax esi +
and eax 0FFF0h +
or eax ecx +
jnz loc_100D900  +
mov eax [ebp+var_10] +
and esi 0FFEDFFFFh +
or esi eax +
jnz loc_100D900  +
and dword ptr [edi-20h] 0 +
inc [ebp+arg_8]  +
mov eax [ebp+arg_8] +
add edi 50h +
cmp eax [ebp+arg_4] +
jb loc_100D7FF  +
xor eax eax +
inc eax  +
pop ebx  +
pop edi  +
pop esi  +
leave   +
retn 0Ch  +
call ds:GetLastError  +
test eax eax +
jnz loc_100D912  +
push 42Bh  +
jmp loc_100D90C  +
push 78h  +
jmp loc_100D90C  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 28h +
fldz   +
push ebx  +
mov ebx ds:SetLastError +
fstp  [ebp+var_18] +
fldz   +
push edi  +
xor edi edi +
fstp  [ebp+var_28] +
push edi  +
mov dword ptr [ebp+String2] edi +
mov [ebp+var_14] edi +
call ebx  +
mov eax [ebp+arg_8] +
cmp eax edi +
jnz loc_100DAE3  +
call ds:GetLastError  +
test eax eax +
jnz loc_100DAD7  +
push 57h  +
call ebx  +
call sub_10093E5  +
xor eax eax +
jmp loc_100E047  +
push esi  +
mov esi [eax+0Ch] +
mov eax [eax+8] +
mov dword ptr [ebp+var_8] eax +
cmp esi edi +
jz loc_100E031  +
cmp eax edi +
jz loc_100E031  +
mov eax [esi+2Ch] +
mov ecx [esi+8] +
mov edi [esi+10h] +
mov [ebp+var_4] eax +
mov eax [esi+14h] +
mov [ebp+var_1C] eax +
mov eax [esi+30h] +
mov [ebp+var_C] eax +
mov eax [esi+28h] +
mov [ebp+var_1C] eax +
cmp ecx 0Ah +
jz loc_100DB82  +
cmp [ebp+lpString2] 0 +
jnz loc_100DB82  +
mov eax edi +
and eax 10h +
xor edx edx +
or eax edx +
jnz loc_100DB82  +
cmp dword ptr [ebp+lpString] edx +
jz loc_100DB60  +
push dword ptr [ebp+lpString]  +
call ds:lstrlenW  +
test eax eax +
jz loc_100DB60  +
push dword ptr [ebp+var_8]  +
push dword ptr [ebp+lpString]  +
push 15EBh  +
call sub_100B337  +
push eax  +
push 2  +
call sub_100A7A4  +
add esp 10h +
jmp loc_100DB76  +
call ds:GetLastError  +
test eax eax +
jnz loc_100DB71  +
push 42Bh  +
call ebx  +
call sub_10093E5  +
push 800401E4h  +
call ebx  +
jmp loc_100E044  +
cmp dword ptr [ebp+lpString] 0 +
jnz loc_100DB9A  +
mov eax edi +
and eax 40000h +
xor edx edx +
or eax edx +
jnz loc_100DBA5  +
jmp loc_100E031  +
cmp dword ptr [esi+24h] 0 +
jz loc_100DBAB  +
cmp ecx 9 +
jz loc_100DBAB  +
mov eax [esi+24h] +
mov dword ptr [ebp+lpString] eax +
lea eax [ecx-1] +
cmp eax 9 +
ja loc_100E031  +
jmp ds:off_100E04D[eax*4]  +
mov ebx [ebp+lpString2] +
test ebx ebx +
jz loc_100DC19  +
mov eax edi +
and eax 42h +
xor ecx ecx +
or eax ecx +
jz loc_100DC19  +
push ecx  +
push ecx  +
push ebx  +
push 0Ah  +
call sub_100A4B3  +
test eax eax +
jnz loc_100DBF9  +
call ds:GetLastError  +
test eax eax +
jnz loc_100E03F  +
push 8  +
call ds:SetLastError  +
jmp loc_100E03F  +
push 3  +
push offset asc_1001C04  +
push eax  +
call sub_100A628  +
mov ebx eax +
mov [ebp+lpString2] ebx +
call ds:GetLastError  +
test eax eax +
jnz loc_100E03F  +
mov eax edi +
and eax 2 +
xor ecx ecx +
or eax ecx +
jz loc_100DC94  +
test ebx ebx +
jz loc_100E02C  +
push 1  +
push [ebp+var_1C]  +
push ebx  +
call sub_100AF9E  +
test eax eax +
jnz loc_100DC94  +
cmp dword ptr [ebp+lpString] eax +
jz loc_100DC6B  +
push dword ptr [ebp+lpString]  +
call ds:lstrlenW  +
test eax eax +
jz loc_100DC6B  +
push dword ptr [ebp+var_8]  +
push dword ptr [ebp+lpString]  +
push ebx  +
push 15E1h  +
call sub_100B337  +
push eax  +
push 3  +
call sub_100A7A4  +
add esp 14h +
jmp loc_100DC84  +
push dword ptr [ebp+var_8]  +
push ebx  +
push 15ECh  +
call sub_100B337  +
push eax  +
push 2  +
call sub_100A7A4  +
add esp 10h +
push 800401E4h  +
call ds:SetLastError  +
jmp loc_100E044  +
test ebx ebx +
jz loc_100E02C  +
mov ebx ds:lstrlenW +
mov eax edi +
and eax 80h +
xor ecx ecx +
or eax ecx +
jz loc_100DCED  +
push [ebp+lpString2]  +
call ebx  +
test eax eax +
jnz loc_100DCED  +
cmp dword ptr [ebp+lpString] eax +
jz loc_100DCD3  +
push dword ptr [ebp+lpString]  +
call ebx  +
test eax eax +
jz loc_100DCD3  +
push dword ptr [ebp+var_8]  +
push dword ptr [ebp+lpString]  +
push 15EEh  +
jmp loc_100DC74  +
push dword ptr [ebp+var_8]  +
push 15EFh  +
call sub_100B337  +
push eax  +
push 1  +
call sub_100A7A4  +
add esp 0Ch +
jmp loc_100DC84  +
mov eax edi +
and eax 1 +
xor ecx ecx +
or eax ecx +
jz loc_100DD3D  +
mov esi [esi+10h] +
and esi 4000h +
xor eax eax +
or esi eax +
jz loc_100DD20  +
push eax  +
mov eax [ebp+var_4] +
push 1  +
push [ebp+lpString2]  +
push dword ptr [eax]  +
call sub_100C0F0  +
cmp eax 0FFFFFFFFh +
jnz loc_100E02C  +
mov eax [ebp+var_4] +
push 0  +
push [ebp+lpString2]  +
push dword ptr [eax]  +
call sub_100B7CC  +
cmp eax 0FFFFFFFFh +
jnz loc_100E02C  +
jmp loc_100DBDE  +
cmp [ebp+var_C] ecx +
jz loc_100DD7C  +
push [ebp+lpString2]  +
call ebx  +
cmp eax [ebp+var_C] +
jl loc_100DD7C  +
cmp dword ptr [ebp+lpString] 0 +
jz loc_100DD6D  +
push dword ptr [ebp+lpString]  +
call ebx  +
test eax eax +
jz loc_100DD6D  +
mov eax [ebp+var_C] +
dec eax  +
push eax  +
push dword ptr [ebp+lpString]  +
push 15F4h  +
jmp loc_100DC74  +
mov eax [ebp+var_C] +
dec eax  +
push eax  +
push 15F2h  +
jmp loc_100DCDB  +
and edi 10000h +
xor eax eax +
or edi eax +
jz loc_100DDA6  +
push [ebp+lpString2]  +
call ebx  +
mov edi eax +
inc edi  +
lea eax [edi+edi] +
push eax  +
call sub_100986E  +
test eax eax +
jz loc_100DBDE  +
mov [esi+2Ch] eax +
jmp loc_100DDAC  +
mov eax [ebp+var_4] +
mov edi [ebp+var_C] +
push edi  +
push [ebp+lpString2]  +
push eax  +
call sub_1009F59  +
jmp loc_100E02C  +
mov ebx [ebp+lpString2] +
xor eax eax +
cmp ecx 2 +
setz al  +
mov [ebp+var_C] eax +
test ebx ebx +
jz loc_100E02C  +
push 0  +
push ebx  +
call sub_100966D  +
test eax eax +
jz loc_100DE85  +
push [ebp+var_C]  +
push 0Ah  +
push ebx  +
call sub_100ADBB  +
test eax eax +
jz loc_100DE85  +
push 0Ah  +
push ebx  +
call sub_100ABD5  +
cmp [ebp+var_C] 1 +
jnz loc_100DE07  +
mov dword ptr [ebp+String2] eax +
jmp loc_100DE0A  +
mov [ebp+var_14] eax +
and edi 1 +
xor eax eax +
or edi eax +
jz loc_100DE6F  +
mov esi [esi+10h] +
and esi 4000h +
or esi eax +
jz loc_100DE48  +
cmp [ebp+var_C] 1 +
mov eax [ebp+var_4] +
jnz loc_100DE35  +
push dword ptr [ebp+String2]  +
push dword ptr [eax]  +
call sub_100C064  +
jmp loc_100DE3F  +
push [ebp+var_14]  +
push dword ptr [eax]  +
call sub_100C087  +
cmp eax 0FFFFFFFFh +
jnz loc_100E02C  +
cmp [ebp+var_C] 1 +
mov eax [ebp+var_4] +
jnz loc_100DE60  +
push dword ptr [ebp+String2]  +
push dword ptr [eax]  +
call sub_100B843  +
jmp loc_100DD2F  +
push [ebp+var_14]  +
push dword ptr [eax]  +
call sub_100B898  +
jmp loc_100DD2F  +
cmp [ebp+var_C] 1 +
mov eax [ebp+var_4] +
mov ecx dword ptr [ebp+String2] +
jz loc_100DE7E  +
mov ecx [ebp+var_14] +
mov [eax] ecx +
jmp loc_100E02C  +
and edi 10h +
xor eax eax +
or edi eax +
jz loc_100DE97  +
mov ecx [ebp+arg_8] +
cmp dword ptr [ecx+4] 0FFFFFFFFh +
jnz loc_100DEEB  +
cmp dword ptr [ebp+lpString] eax +
jz loc_100DEB9  +
push dword ptr [ebp+lpString]  +
call ds:lstrlenW  +
test eax eax +
jz loc_100DEB9  +
push dword ptr [ebp+var_8]  +
push dword ptr [ebp+lpString]  +
push 15E2h  +
jmp loc_100DC74  +
push dword ptr [ebp+var_8]  +
push 15F0h  +
jmp loc_100DCDB  +
mov ebx [ebp+lpString2] +
test ebx ebx +
jz loc_100E02C  +
push ebx  +
call sub_100ABB2  +
test eax eax +
jnz loc_100DF24  +
and edi 10h +
or edi eax +
jz loc_100DEF5  +
mov ecx [ebp+arg_8] +
cmp dword ptr [ecx+4] 0FFFFFFFFh +
jz loc_100DEF5  +
xor eax eax +
inc eax  +
mov [ecx] eax +
jmp loc_100E046  +
cmp dword ptr [ebp+lpString] eax +
jz loc_100DF17  +
push dword ptr [ebp+lpString]  +
call ds:lstrlenW  +
test eax eax +
jz loc_100DF17  +
push dword ptr [ebp+var_8]  +
push dword ptr [ebp+lpString]  +
push 15E3h  +
jmp loc_100DC74  +
push dword ptr [ebp+var_8]  +
push 15F1h  +
jmp loc_100DCDB  +
cmp dword ptr [esi+8] 7 +
push ebx  +
jnz loc_100DF35  +
call sub_100A9ED  +
fstp  [ebp+var_18] +
jmp loc_100DF3D  +
call sub_100A9ED  +
fstp  [ebp+var_28] +
and edi 1 +
xor eax eax +
or edi eax +
jz loc_100DFB3  +
mov eax [esi+10h] +
and eax 4000h +
xor ecx ecx +
or eax ecx +
jz loc_100DF84  +
cmp dword ptr [esi+8] 7 +
mov eax [ebp+var_4] +
push ecx  +
jnz loc_100DF6D  +
fld  [ebp+var_18] +
fstp  [esp+38h+var_38] +
push dword ptr [eax]  +
call sub_100C0AA  +
jmp loc_100DF7B  +
fld  [ebp+var_28] +
push ecx  +
fstp  qword ptr [esp] +
push dword ptr [eax]  +
call sub_100C0CD  +
cmp eax 0FFFFFFFFh +
jnz loc_100E02C  +
cmp dword ptr [esi+8] 7 +
mov eax [ebp+var_4] +
push ecx  +
jnz loc_100DFA0  +
fld  [ebp+var_18] +
fstp  [esp+38h+var_38] +
push dword ptr [eax]  +
call sub_100B8ED  +
jmp loc_100DD2F  +
fld  [ebp+var_28] +
push ecx  +
fstp  qword ptr [esp] +
push dword ptr [eax]  +
call sub_100B942  +
jmp loc_100DD2F  +
cmp dword ptr [esi+8] 7 +
mov eax [ebp+var_4] +
jnz loc_100DFC3  +
fld  [ebp+var_18] +
fstp  dword ptr [eax] +
jmp loc_100E02C  +
fld  [ebp+var_28] +
fstp  qword ptr [eax] +
jmp loc_100E02C  +
push [ebp+arg_8]  +
push dword ptr [esi+38h]  +
push [ebp+lpString2]  +
push dword ptr [ebp+lpString]  +
call dword ptr [esi+34h]  +
jmp loc_100E046  +
cmp [ebp+lpString2] 0 +
jz loc_100E023  +
cmp dword ptr [ebp+lpString] 0 +
jz loc_100E004  +
push dword ptr [ebp+lpString]  +
call ds:lstrlenW  +
test eax eax +
jz loc_100E004  +
push dword ptr [ebp+var_8]  +
push dword ptr [ebp+lpString]  +
push 15F3h  +
jmp loc_100DC74  +
call ds:GetLastError  +
test eax eax +
jnz loc_100E019  +
push 42Bh  +
call ds:SetLastError  +
call sub_10093E5  +
jmp loc_100DC84  +
mov eax [ebp+var_4] +
mov dword ptr [eax] 1 +
xor eax eax +
inc eax  +
jmp loc_100E046  +
call ds:GetLastError  +
test eax eax +
jnz loc_100E03F  +
push 57h  +
call ebx  +
call sub_10093E5  +
xor eax eax +
pop esi  +
pop edi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx ds:SetLastError +
push esi  +
push edi  +
xor edi edi +
push edi  +
call ebx  +
cmp [ebp+arg_0] edi +
jz loc_100E13B  +
mov esi [ebp+arg_4] +
cmp esi edi +
jz loc_100E13B  +
cmp [ebp+arg_8] edi +
jz loc_100E13B  +
push [ebp+arg_8]  +
call sub_100D671  +
test eax eax +
jnz loc_100E0C0  +
push 490h  +
jmp loc_100E147  +
mov [ebp+arg_4] edi +
cmp [ebp+arg_0] edi +
jbe loc_100E0B6  +
add esi 20h +
jmp loc_100E0CF  +
xor edi edi +
lea eax [esi-20h] +
test eax eax +
jz loc_100E11C  +
mov eax [esi-10h] +
and eax 100000h +
xor ecx ecx +
or eax ecx +
jnz loc_100E0E7  +
xor edi edi +
inc edi  +
mov eax [esi] +
test eax eax +
jz loc_100E10C  +
push eax  +
call ds:lstrlenW  +
test eax eax +
jle loc_100E10C  +
mov eax [ebp+arg_8] +
push edi  +
push dword ptr [esi]  +
add eax 2 +
push eax  +
call sub_100AF9E  +
cmp eax 1 +
jz loc_100E136  +
inc [ebp+arg_4]  +
mov eax [ebp+arg_4] +
add esi 50h +
cmp eax [ebp+arg_0] +
jb loc_100E0CD  +
jmp loc_100E0B6  +
call ds:GetLastError  +
test eax eax +
jnz loc_100E12D  +
push 42Bh  +
call ebx  +
call sub_10093E5  +
xor eax eax +
jmp loc_100E14C  +
mov eax [ebp+arg_4] +
jmp loc_100E14C  +
call ds:GetLastError  +
test eax eax +
jnz loc_100E149  +
push 57h  +
call ebx  +
or eax 0FFFFFFFFh +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx ds:SetLastError +
push esi  +
push edi  +
xor edi edi +
push edi  +
call ebx  +
cmp [ebp+arg_0] edi +
jz loc_100E230  +
cmp [ebp+arg_4] edi +
jz loc_100E230  +
cmp [ebp+lpString] edi +
jz loc_100E230  +
mov esi [ebp+arg_C] +
cmp esi edi +
jz loc_100E230  +
push edi  +
push 1  +
push 3Ah  +
push [ebp+lpString]  +
mov [esi] edi +
mov [esi+4] edi +
call sub_1009A56  +
mov ebx eax +
or eax 0FFFFFFFFh +
cmp ebx eax +
jz loc_100E241  +
push [ebp+lpString]  +
call ds:lstrlenW  +
mov edi eax +
push 1  +
lea eax [ebx+5] +
push eax  +
push 0  +
sub edi ebx +
push 8  +
dec edi  +
call sub_100A4B3  +
mov [esi] eax +
test eax eax +
jnz loc_100E1E7  +
call ds:GetLastError  +
test eax eax +
jnz loc_100E23E  +
push 8  +
call ds:SetLastError  +
jmp loc_100E23E  +
push 1  +
lea eax [edi+5] +
push eax  +
push 0  +
push 9  +
call sub_100A4B3  +
mov [esi+4] eax +
test eax eax +
jz loc_100E1D3  +
lea eax [ebx+1] +
push eax  +
push [ebp+lpString]  +
push dword ptr [esi]  +
call sub_1009F59  +
test edi edi +
jz loc_100E221  +
mov eax [ebp+lpString] +
inc edi  +
push edi  +
lea eax [eax+ebx*2+2] +
push eax  +
push dword ptr [esi+4]  +
call sub_1009F59  +
push dword ptr [esi]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_100E07A  +
jmp loc_100E241  +
call ds:GetLastError  +
test eax eax +
jnz loc_100E23E  +
push 57h  +
call ebx  +
or eax 0FFFFFFFFh +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
test ebx ebx +
jz loc_100E2CC  +
mov esi [ebp+dwErrCode] +
test esi esi +
jz loc_100E2CC  +
call ds:GetLastError  +
mov [ebp+dwErrCode] eax +
call sub_1009352  +
test eax eax +
jnz loc_100E27D  +
push 7  +
call sub_10092E1  +
jmp loc_100E289  +
push 0  +
push 0  +
push eax  +
push 7  +
call sub_100A4B3  +
mov [ebp+arg_0] eax +
test eax eax +
jz loc_100E2CC  +
test ebx ebx +
jbe loc_100E2B6  +
add esi 2Ch +
cmp dword ptr [esi] 0 +
jz loc_100E2B0  +
mov eax [esi-1Ch] +
and eax 10000h +
xor ecx ecx +
or eax ecx +
jz loc_100E2B0  +
push esi  +
call sub_1009B84  +
add esi 50h +
dec ebx  +
jnz loc_100E297  +
push [ebp+arg_0]  +
call sub_100937E  +
push [ebp+dwErrCode]  +
call ds:SetLastError  +
xor eax eax +
inc eax  +
jmp loc_100E2CE  +
xor eax eax +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
push ebx  +
push esi  +
push edi  +
xor edi edi +
push edi  +
mov [ebp+dwLen] edi +
mov [ebp+puLen] edi +
mov dword ptr [ebp+lpString] edi +
mov [ebp+pBlock] edi +
mov [ebp+lpBuffer] edi +
call ds:SetLastError  +
mov esi 104h +
xor eax eax +
mov [ebp+dwLen] esi +
neg eax  +
sbb eax eax +
push 1  +
and eax esi +
add [ebp+dwLen] eax +
push [ebp+dwLen]  +
push edi  +
push 7  +
call sub_100A4B3  +
mov ebx eax +
cmp ebx edi +
jz loc_100E35D  +
push [ebp+dwLen]  +
push ebx  +
push edi  +
call ds:GetModuleFileNameW  +
cmp eax edi +
jz loc_100E36F  +
mov ecx [ebp+dwLen] +
dec ecx  +
cmp eax ecx +
jnb loc_100E306  +
push edi  +
push ebx  +
call GetFileVersionInfoSizeW  +
mov [ebp+dwLen] eax +
cmp eax edi +
jnz loc_100E376  +
mov esi ds:GetLastError +
call esi  +
test eax eax +
jnz loc_100E36F  +
call esi  +
test eax eax +
jnz loc_100E36F  +
push 57h  +
jmp loc_100E369  +
call ds:GetLastError  +
test eax eax +
jnz loc_100E36F  +
push 8  +
call ds:SetLastError  +
xor eax eax +
jmp loc_100E53C  +
add eax 0Ah +
push eax  +
mov [ebp+dwLen] eax +
call sub_100986E  +
mov [ebp+pBlock] eax +
cmp eax edi +
jz loc_100E36F  +
push eax  +
push [ebp+dwLen]  +
push edi  +
push ebx  +
call GetFileVersionInfoW  +
test eax eax +
jnz loc_100E3A3  +
lea eax [ebp+pBlock] +
push eax  +
call sub_1009B84  +
jmp loc_100E36F  +
lea eax [ebp+puLen] +
push eax  +
lea eax [ebp+lpBuffer] +
push eax  +
push offset SubBlock  +
push [ebp+pBlock]  +
call VerQueryValueW  +
test eax eax +
jz loc_100E398  +
push 1  +
push 40h  +
push edi  +
push 7  +
call sub_100A4B3  +
xor esi esi +
test [ebp+puLen] 0FFFFFFFCh +
mov ebx eax +
mov dword ptr [ebp+lpString] edi +
jbe loc_100E398  +
mov eax [ebp+lpBuffer] +
lea eax [eax+esi*4] +
movzx ecx word ptr [eax+2] +
movzx eax word ptr [eax] +
push ecx  +
push eax  +
push offset aStringfileinfo  +
push 40h  +
push ebx  +
call sub_1009E0B  +
add esp 14h +
lea eax [ebp+dwLen] +
push eax  +
lea eax [ebp+lpString] +
push eax  +
push ebx  +
push [ebp+pBlock]  +
call VerQueryValueW  +
test eax eax +
jnz loc_100E41A  +
mov eax [ebp+puLen] +
inc esi  +
shr eax 2 +
mov dword ptr [ebp+lpString] edi +
cmp esi eax +
jb loc_100E3D8  +
cmp dword ptr [ebp+lpString] edi +
jz loc_100E398  +
push edi  +
push dword ptr [ebp+lpString]  +
call sub_100966D  +
cmp eax 4 +
ja loc_100E452  +
lea eax [ebp+pBlock] +
push eax  +
call sub_1009B84  +
call ds:GetLastError  +
test eax eax +
jnz loc_100E36F  +
push 42Bh  +
jmp loc_100E369  +
push edi  +
push 1  +
mov ebx offset a_exe +
push ebx  +
push dword ptr [ebp+lpString]  +
call sub_1009AC1  +
mov esi ds:lstrlenW +
cmp eax 0FFFFFFFFh +
jz loc_100E48C  +
push dword ptr [ebp+lpString]  +
call esi  +
push ebx  +
mov [ebp+var_18] eax +
call esi  +
mov ecx [ebp+var_18] +
mov dx ds:word_1001BDC +
sub ecx eax +
mov eax dword ptr [ebp+lpString] +
mov [eax+ecx*2] dx +
cmp [ebp+arg_0] edi +
jz loc_100E4DC  +
push dword ptr [ebp+lpString]  +
call esi  +
push [ebp+arg_0]  +
mov ebx eax +
call esi  +
push 1  +
lea eax [ebx+eax+0Bh] +
push eax  +
push edi  +
push 7  +
mov [ebp+dwLen] eax +
call sub_100A4B3  +
mov esi eax +
cmp esi edi +
jnz loc_100E4C3  +
lea eax [ebp+pBlock] +
push eax  +
call sub_1009B84  +
jmp loc_100E35D  +
push [ebp+arg_0]  +
push dword ptr [ebp+lpString]  +
push offset aSS  +
push [ebp+dwLen]  +
push esi  +
call sub_1009E0B  +
add esp 14h +
jmp loc_100E4FC  +
cmp dword ptr [ebp+lpString] edi +
jnz loc_100E4EA  +
push 7  +
call sub_10092E1  +
jmp loc_100E4F6  +
push edi  +
push edi  +
push dword ptr [ebp+lpString]  +
push 7  +
call sub_100A4B3  +
mov esi eax +
cmp esi edi +
jz loc_100E4B5  +
push esi  +
mov dword ptr [ebp+lpString] esi +
call ds:CharUpperW  +
push 1  +
push 50h  +
push edi  +
push 0Bh  +
call sub_100A4B3  +
mov esi eax +
cmp esi edi +
jz loc_100E4B5  +
push dword ptr [ebp+lpString]  +
push 15EDh  +
call sub_100B337  +
push eax  +
push 50h  +
push esi  +
call sub_1009E0B  +
add esp 10h +
lea eax [ebp+pBlock] +
push eax  +
call sub_1009B84  +
mov eax esi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 24h +
push ebx  +
push esi  +
push edi  +
mov edi ds:SetLastError +
xor ebx ebx +
push ebx  +
mov [ebp+var_8] ebx +
xor esi esi +
call edi  +
cmp [ebp+arg_0] ebx +
jz loc_100E5BE  +
cmp [ebp+arg_4] ebx +
jz loc_100E5BE  +
cmp [ebp+arg_C] ebx +
jz loc_100E5BE  +
cmp [ebp+dwErrCode] ebx +
jz loc_100E5BE  +
cmp dword ptr [ebp+arg_14] ebx +
jnz loc_100E5BE  +
call sub_1009497  +
test eax eax +
jnz loc_100E59E  +
push 157Fh  +
call sub_100B337  +
push eax  +
call sub_100937E  +
push 47Eh  +
call edi  +
jmp loc_100E5C7  +
call sub_100920B  +
test eax eax +
jz loc_100E5C2  +
mov eax [ebp+arg_8] +
cmp eax 0FFFFFFFFh +
jz loc_100E5E6  +
cmp eax [ebp+arg_C] +
jl loc_100E5D0  +
call ds:GetLastError  +
test eax eax +
jnz loc_100E5C2  +
push 57h  +
call edi  +
call sub_10093E5  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 18h  +
mov ecx [ebp+dwErrCode] +
imul eax eax +
push ebx  +
push dword ptr [eax+ecx+20h]  +
call sub_100D70B  +
mov esi eax +
cmp esi ebx +
jz loc_100E5C2  +
push esi  +
call sub_100E2D9  +
mov dword ptr [ebp+arg_14] eax +
cmp eax ebx +
jz loc_100E5C2  +
push [ebp+dwErrCode]  +
lea eax [ebp+var_8] +
push [ebp+arg_C]  +
push eax  +
call sub_100D7AC  +
test eax eax +
jz loc_100E5C2  +
xor eax eax +
inc eax  +
mov [ebp+var_C] ebx +
mov [ebp+var_4] eax +
cmp [ebp+arg_0] eax +
jbe loc_100E748  +
jmp loc_100E61D  +
mov eax [ebp+var_4] +
mov ecx [ebp+arg_4] +
lea ecx [ecx+eax*4] +
mov ebx [ecx] +
push 2  +
inc eax  +
pop esi  +
mov [ebp+arg_8] esi +
cmp eax [ebp+arg_0] +
jnb loc_100E636  +
mov edi [ecx+4] +
jmp loc_100E638  +
xor edi edi +
push ebx  +
push [ebp+dwErrCode]  +
push [ebp+arg_C]  +
call sub_100E07A  +
cmp eax 0FFFFFFFFh +
jnz loc_100E67D  +
lea eax [ebp+var_14] +
push eax  +
push ebx  +
push [ebp+dwErrCode]  +
push [ebp+arg_C]  +
call sub_100E158  +
cmp eax 0FFFFFFFFh +
jnz loc_100E670  +
mov eax [ebp+var_8] +
cmp eax 0FFFFFFFFh +
jz loc_100E785  +
mov edi ebx +
xor ebx ebx +
jmp loc_100E676  +
mov ebx [ebp+var_14] +
mov edi [ebp+var_10] +
mov [ebp+arg_8] 1 +
imul eax eax +
add eax [ebp+dwErrCode] +
mov esi eax +
jz loc_100E7B8  +
test edi edi +
jz loc_100E6D8  +
cmp [ebp+arg_8] 2 +
jnz loc_100E6D8  +
push dword ptr [esi+8]  +
call sub_100D6CC  +
xor ecx ecx +
inc ecx  +
cmp eax ecx +
jnz loc_100E6D3  +
push edi  +
push [ebp+dwErrCode]  +
push [ebp+arg_C]  +
call sub_100E07A  +
cmp eax 0FFFFFFFFh +
jnz loc_100E6CA  +
lea eax [ebp+var_14] +
push eax  +
push edi  +
push [ebp+dwErrCode]  +
push [ebp+arg_C]  +
call sub_100E158  +
cmp eax 0FFFFFFFFh +
jz loc_100E6D8  +
mov [ebp+arg_8] 1 +
jmp loc_100E6D6  +
mov [ebp+arg_8] ecx +
xor edi edi +
mov eax [ebp+arg_8] +
mov [ebp+var_24] eax +
mov eax [ebp+var_8] +
mov [ebp+var_20] eax +
mov eax dword ptr [ebp+arg_14] +
mov [ebp+var_1C] eax +
lea eax [ebp+var_24] +
push eax  +
push edi  +
push ebx  +
mov [ebp+var_18] esi +
call sub_100DA9D  +
mov ecx [ebp+var_24] +
test eax eax +
jz loc_100E831  +
mov eax [esi+18h] +
test eax eax +
jz loc_100E713  +
cmp eax [esi+1Ch] +
jz loc_100E7D6  +
inc dword ptr [esi+1Ch]  +
mov esi [esi+10h] +
and esi 20000h +
xor eax eax +
or esi eax +
jz loc_100E72C  +
mov [ebp+var_C] 1 +
add [ebp+var_4] ecx +
mov eax [ebp+var_4] +
cmp eax [ebp+arg_0] +
jb loc_100E61A  +
mov edi ds:SetLastError +
xor ebx ebx +
cmp [ebp+var_C] ebx +
jnz loc_100E77A  +
xor esi esi +
cmp [ebp+arg_C] ebx +
jbe loc_100E77A  +
mov ecx [ebp+dwErrCode] +
cmp ecx ebx +
jz loc_100E81B  +
mov eax [ecx+10h] +
and eax 80000h +
xor edx edx +
or eax edx +
jz loc_100E771  +
cmp [ecx+1Ch] ebx +
jz loc_100E841  +
inc esi  +
add ecx 50h +
cmp esi [ebp+arg_C] +
jb loc_100E752  +
push ebx  +
call edi  +
xor eax eax +
inc eax  +
jmp loc_100E5C9  +
push dword ptr [ebp+arg_14]  +
push ebx  +
push 15E7h  +
call sub_100B337  +
push eax  +
push esi  +
call sub_100A7A4  +
add esp 10h +
push [ebp+dwErrCode]  +
push [ebp+arg_C]  +
call sub_100E24D  +
push 800401E4h  +
call ds:SetLastError  +
jmp loc_100E5C7  +
call ds:GetLastError  +
test eax eax +
jnz loc_100E5C2  +
push 42Bh  +
call ds:SetLastError  +
jmp loc_100E5C2  +
test ebx ebx +
jz loc_100E803  +
push ebx  +
call ds:lstrlenW  +
test eax eax +
jz loc_100E803  +
push dword ptr [ebp+arg_14]  +
push dword ptr [esi+18h]  +
push ebx  +
push 15E5h  +
call sub_100B337  +
push eax  +
push 3  +
call sub_100A7A4  +
add esp 14h +
jmp loc_100E79D  +
push dword ptr [ebp+arg_14]  +
push dword ptr [esi+18h]  +
push 15EAh  +
call sub_100B337  +
push eax  +
push 2  +
jmp loc_100E795  +
call ds:GetLastError  +
test eax eax +
jnz loc_100E82C  +
push 42Bh  +
call edi  +
call sub_10093E5  +
push [ebp+dwErrCode]  +
push [ebp+arg_C]  +
call sub_100E24D  +
jmp loc_100E5C7  +
mov eax [ecx+20h] +
cmp eax ebx +
jnz loc_100E85B  +
mov eax [ecx+10h] +
and eax 40000h +
xor edx edx +
or eax edx +
jz loc_100E81B  +
mov edi [ecx+24h] +
jmp loc_100E873  +
mov ecx [ecx+24h] +
cmp ecx ebx +
jnz loc_100E871  +
push ebx  +
push eax  +
call sub_100D70B  +
mov edi eax +
test edi edi +
jnz loc_100E877  +
jmp loc_100E82C  +
mov edi ecx +
test edi edi +
jz loc_100E88D  +
push edi  +
call ds:lstrlenW  +
test eax eax +
jz loc_100E88D  +
push dword ptr [ebp+arg_14]  +
push edi  +
push 15E4h  +
jmp loc_100E80E  +
push dword ptr [ebp+arg_14]  +
push 15E8h  +
call sub_100B337  +
push eax  +
push 1  +
call sub_100A7A4  +
add esp 0Ch +
jmp loc_100E79D  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-20h] +
xor ecx eax +
call sub_1008AC3  +
mov eax offset dword_100F460 +
jmp loc_1008AB8  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-34h] +
xor ecx eax +
call sub_1008AC3  +
mov eax offset dword_100F4F0 +
jmp loc_1008AB8  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-70h] +
xor ecx eax +
call sub_1008AC3  +
mov eax offset dword_100F534 +
jmp loc_1008AB8  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-18h] +
xor ecx eax +
call sub_1008AC3  +
mov eax offset dword_100F5C8 +
jmp loc_1008AB8  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-0F8h] +
xor ecx eax +
call sub_1008AC3  +
mov ecx [edx-8] +
xor ecx eax +
call sub_1008AC3  +
mov eax offset dword_100F63C +
jmp loc_1008AB8  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-0A4h] +
xor ecx eax +
call sub_1008AC3  +
mov ecx [edx-8] +
xor ecx eax +
call sub_1008AC3  +
mov eax offset dword_100F824 +
jmp loc_1008AB8  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-58h] +
xor ecx eax +
call sub_1008AC3  +
mov eax offset dword_100F918 +
jmp loc_1008AB8  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-2Ch] +
xor ecx eax +
call sub_1008AC3  +
mov eax offset dword_100F9C8 +
jmp loc_1008AB8  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-30h] +
xor ecx eax +
call sub_1008AC3  +
mov eax offset dword_100FA30 +
jmp loc_1008AB8  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-40h] +
xor ecx eax +
call sub_1008AC3  +
mov eax offset dword_100FA74 +
jmp loc_1008AB8  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-2Ch] +
xor ecx eax +
call sub_1008AC3  +
mov eax offset dword_100FB44 +
jmp loc_1008AB8  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-3Ch] +
xor ecx eax +
call sub_1008AC3  +
mov eax offset dword_100FB88 +
jmp loc_1008AB8  +
***
push 0Bh  +
push 4  +
lea eax [ebp-84h] +
push eax  +
call ??_M@YGXPAXIHP6EX0@Z@Z  +
retn   +
***
lea ecx [ebp-38h] +
jmp ??1CHString@@QAE@XZ  +
***
lea ecx [ebp-34h] +
jmp ??1CHString@@QAE@XZ  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-88h] +
xor ecx eax +
call sub_1008AC3  +
mov eax offset dword_100FC3C +
jmp loc_1008AB8  +
***
lea ecx [ebp-5Ch] +
jmp sub_10050C8  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-60h] +
xor ecx eax +
call sub_1008AC3  +
mov eax offset dword_100FD40 +
jmp loc_1008AB8  +
***
mov ecx [ebp-10h] +
jmp ??1CHString@@QAE@XZ  +
***
mov ecx [ebp-10h] +
add ecx 4 +
jmp ??1CHString@@QAE@XZ  +
***
mov ecx [ebp-10h] +
add ecx 8 +
jmp ??1CHString@@QAE@XZ  +
***
mov ecx [ebp-10h] +
add ecx 40h +
jmp ??1CHString@@QAE@XZ  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_1008AC3  +
mov eax offset dword_100FD84 +
jmp loc_1008AB8  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_1008AC3  +
mov eax offset dword_100FDB0 +
jmp loc_1008AB8  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-28h] +
xor ecx eax +
call sub_1008AC3  +
mov eax offset dword_100FDF8 +
jmp loc_1008AB8  +
***
push dword ptr [ebp-10h]  +
call ??3@YAXPAX@Z  +
pop ecx  +
retn   +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_1008AC3  +
mov eax offset dword_100FE54 +
jmp loc_1008AB8  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-14h] +
xor ecx eax +
call sub_1008AC3  +
mov eax offset dword_100FE80 +
jmp loc_1008AB8  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-20h] +
xor ecx eax +
call sub_1008AC3  +
mov eax offset dword_100FEAC +
jmp loc_1008AB8  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-2Ch] +
xor ecx eax +
call sub_1008AC3  +
mov eax offset dword_100FEF0 +
jmp loc_1008AB8  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-2Ch] +
xor ecx eax +
call sub_1008AC3  +
mov eax offset dword_100FFB0 +
jmp loc_1008AB8  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-2Ch] +
xor ecx eax +
call sub_1008AC3  +
mov eax offset dword_1010010 +
jmp loc_1008AB8  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-2Ch] +
xor ecx eax +
call sub_1008AC3  +
mov eax offset dword_1010070 +
jmp loc_1008AB8  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-28h] +
xor ecx eax +
call sub_1008AC3  +
mov eax offset dword_10100D0 +
jmp loc_1008AB8  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-3Ch] +
xor ecx eax +
call sub_1008AC3  +
mov eax offset dword_1010118 +
jmp loc_1008AB8  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-18h] +
xor ecx eax +
call sub_1008AC3  +
mov eax offset dword_10101D8 +
jmp loc_1008AB8  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-18h] +
xor ecx eax +
call sub_1008AC3  +
mov eax offset dword_1010240 +
jmp loc_1008AB8  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-1Ch] +
xor ecx eax +
call sub_1008AC3  +
mov eax offset dword_1010298 +
jmp loc_1008AB8  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-54h] +
xor ecx eax +
call sub_1008AC3  +
mov eax offset dword_10102E0 +
jmp loc_1008AB8  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-24h] +
xor ecx eax +
call sub_1008AC3  +
mov eax offset dword_10103C0 +
jmp loc_1008AB8  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-18h] +
xor ecx eax +
call sub_1008AC3  +
mov eax offset dword_1010420 +
jmp loc_1008AB8  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-40h] +
xor ecx eax +
call sub_1008AC3  +
mov eax offset dword_1010480 +
jmp loc_1008AB8  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-28h] +
xor ecx eax +
call sub_1008AC3  +
mov eax offset dword_10104F8 +
jmp loc_1008AB8  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-18h] +
xor ecx eax +
call sub_1008AC3  +
mov eax offset dword_1010558 +
jmp loc_1008AB8  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-1Ch] +
xor ecx eax +
call sub_1008AC3  +
mov eax offset dword_10105B0 +
jmp loc_1008AB8  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-28h] +
xor ecx eax +
call sub_1008AC3  +
mov eax offset dword_1010668 +
jmp loc_1008AB8  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-30h] +
xor ecx eax +
call sub_1008AC3  +
mov eax offset dword_10106C0 +
jmp loc_1008AB8  +
***
mov edx [esp+8] +
lea eax [edx+0Ch] +
mov ecx [edx-204h] +
xor ecx eax +
call sub_1008AC3  +
mov ecx [edx-4] +
xor ecx eax +
call sub_1008AC3  +
mov eax offset dword_1010734 +
jmp loc_1008AB8  +
***
mov al 11h +
add [eax] eax +
retf 111h  +
***
push 65676E61h  +
add [edx+656C5304h] dh +
jo $+3  +
jmp near ptr 756F5C9Dh  +
***
