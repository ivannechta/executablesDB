mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
test esi esi +
jz loc_1005FB0  +
mov eax [esi] +
test eax eax +
jz loc_1001345  +
push eax  +
call ds:RegCloseKey  +
and dword ptr [esi] 0 +
xor eax eax +
inc eax  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+lpString] +
test esi esi +
jz loc_100604F  +
push 0  +
push esi  +
call sub_100243E  +
cmp eax 1 +
jbe loc_100137E  +
lea eax [esi+eax*2-2] +
cmp word ptr [eax] 5Ch +
jz loc_100605E  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
xor ebx ebx +
mov [ebp+phkResult] ebx +
cmp esi ebx +
jz loc_1006149  +
cmp dword ptr [esi+8] 1 +
jz loc_1006158  +
push ebx  +
call ds:SetLastError  +
xor eax eax +
test ebx ebx +
setz al  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
push offset dword_100F010  +
push dword_100F46C  +
mov dword_100F010 eax +
push offset dword_100F034  +
push offset lpString2  +
push offset dword_100F030  +
call ds:__wgetmainargs  +
add esp 14h +
mov dword_100F00C eax +
retn   +
***
call ds:SetUnhandledExceptionFilter  +
xor eax eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov eax dword_100F000 +
and [ebp+SystemTimeAsFileTime.dwLowDateTime] 0 +
and [ebp+SystemTimeAsFileTime.dwHighDateTime] 0 +
push ebx  +
push edi  +
mov edi 0BB40E64Eh +
mov ebx 0FFFF0000h +
cmp eax edi +
jnz loc_10079DD  +
push esi  +
lea eax [ebp+SystemTimeAsFileTime] +
push eax  +
call ds:GetSystemTimeAsFileTime  +
mov esi [ebp+SystemTimeAsFileTime.dwHighDateTime] +
xor esi [ebp+SystemTimeAsFileTime.dwLowDateTime] +
call ds:GetCurrentProcessId  +
xor esi eax +
call ds:GetCurrentThreadId  +
xor esi eax +
call ds:GetTickCount  +
xor esi eax +
lea eax [ebp+PerformanceCount] +
push eax  +
call ds:QueryPerformanceCounter  +
mov eax dword ptr [ebp+PerformanceCount+4] +
xor eax dword ptr [ebp+PerformanceCount] +
xor esi eax +
cmp esi edi +
jz loc_10014A6  +
test dword_100F000 ebx +
jz loc_10014A6  +
mov dword_100F000 esi +
not esi  +
mov dword_100F004 esi +
pop esi  +
pop edi  +
pop ebx  +
leave   +
retn   +
mov esi 0BB40E64Fh +
jmp loc_1001493  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
xor ebx ebx +
mov [ebp+Mode] ebx +
cmp [ebp+arg_0] ebx +
jz loc_1007A60  +
push esi  +
push edi  +
push [ebp+arg_0]  +
call ds:_fileno  +
mov esi ds:_errno +
mov edi eax +
call esi  +
push edi  +
mov [eax] ebx +
call ds:_get_osfhandle  +
mov ebx eax +
pop ecx  +
pop ecx  +
cmp ebx 0FFFFFFFFh +
jz loc_1003B5D  +
call esi  +
cmp dword ptr [eax] 9 +
jz loc_1003B5D  +
push ebx  +
call ds:GetFileType  +
cmp eax 2 +
jz loc_1003B1E  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+lpString1] 0 +
jz loc_100156E  +
cmp [ebp+lpString2] 0 +
jz loc_100156E  +
mov eax [ebp+arg_C] +
xor edx edx +
cmp [ebp+arg_8] 1 +
setz dl  +
test eax eax +
jnz loc_100153F  +
or eax 0FFFFFFFFh +
cmp dword_100F464 5 +
push 7Fh  +
pop ecx  +
jnz loc_1001558  +
cmp dword_100F468 0 +
jz loc_1007AA9  +
push eax  +
push [ebp+lpString2]  +
push eax  +
push [ebp+lpString1]  +
push edx  +
push ecx  +
call ds:CompareStringW  +
dec eax  +
dec eax  +
pop ebp  +
retn 10h  +
call ds:GetLastError  +
jmp loc_1007AB3  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+lpString] +
test edi edi +
jz loc_10015D4  +
mov ebx [ebp+arg_4] +
test ebx ebx +
jz loc_10015D4  +
push 0  +
push edi  +
call sub_100243E  +
push 0  +
push ebx  +
mov esi eax +
call sub_100243E  +
test eax eax +
jz loc_10015BF  +
test esi esi +
jz loc_10015BF  +
mov ecx [ebp+arg_C] +
cmp ecx esi +
jnb loc_10015BF  +
sub esi ecx +
cmp esi eax +
jnb loc_1007BBA  +
push 490h  +
call ds:SetLastError  +
or eax 0FFFFFFFFh +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 10h  +
call ds:GetLastError  +
jmp loc_1007BE4  +
***
xor ecx ecx +
cmp eax ecx +
jz loc_1008284  +
mov [eax+4] ecx +
mov [eax+8] ecx +
mov [eax+0Ch] ecx +
mov dword ptr [eax] 9 +
retn   +
***
mov edi edi +
push edi  +
xor edi edi +
inc edi  +
cmp dword_100F018 edi +
jnz loc_100162F  +
push dword_100F01C  +
call sub_1002C80  +
test eax eax +
jz loc_10079F1  +
mov eax edi +
pop edi  +
retn   +
cmp dword_100F01C 0 +
jnz loc_10079F1  +
call sub_10015E4  +
push eax  +
mov dword_100F01C eax +
call sub_1002C80  +
test eax eax +
jz loc_10016B5  +
push 0  +
push offset dword_1001314  +
push dword_100F01C  +
call sub_1002C06  +
test eax eax +
jnz loc_10016B5  +
push 3  +
push dword_100F01C  +
call sub_10016C5  +
cmp eax edi +
jnz loc_10016B5  +
push 3  +
push dword_100F01C  +
call sub_10016C5  +
cmp eax 2 +
jnz loc_10016B5  +
push 3  +
push dword_100F01C  +
call sub_10016C5  +
cmp eax 3 +
jnz loc_10016B5  +
push 0  +
mov dword_100F018 edi +
call ds:SetThreadUILanguage  +
xor ecx ecx +
test ax ax +
setnz cl  +
pop edi  +
mov eax ecx +
retn   +
call ds:GetLastError  +
jmp loc_1007A02  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
push [ebp+arg_0]  +
xor esi esi +
mov [ebp+var_4] esi +
call sub_1002C80  +
test eax eax +
jz loc_1001737  +
call sub_10015E4  +
push eax  +
mov [ebp+var_4] eax +
call sub_1002C80  +
test eax eax +
jz loc_1001737  +
push edi  +
xor edi edi +
cmp [ebp+arg_4] esi +
jbe loc_100170D  +
push esi  +
push esi  +
push esi  +
push [ebp+var_4]  +
call sub_1001741  +
cmp eax 0FFFFFFFFh +
jz loc_100170D  +
inc edi  +
cmp edi [ebp+arg_4] +
jb loc_10016F7  +
cmp edi [ebp+arg_4] +
pop edi  +
jnz loc_10082B8  +
push [ebp+var_4]  +
push 4  +
push 80000h  +
push [ebp+arg_0]  +
call sub_1001741  +
cmp eax 0FFFFFFFFh +
jz loc_10082B8  +
pop esi  +
leave   +
retn 8  +
or eax 0FFFFFFFFh +
jmp loc_1001732  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push esi  +
call sub_1002C80  +
test eax eax +
jz loc_10017A1  +
cmp dword ptr [esi+4] 0FFFFFFFFh +
jz loc_10017A1  +
push 14h  +
call sub_10026AF  +
test eax eax +
jz loc_10017A1  +
mov ecx [ebp+arg_4] +
and dword ptr [eax+10h] 0 +
mov [eax+4] ecx +
mov ecx [ebp+arg_8] +
mov [eax+8] ecx +
mov ecx [ebp+arg_C] +
mov [eax+0Ch] ecx +
mov dword ptr [eax] 63h +
inc dword ptr [esi+4]  +
cmp dword ptr [esi+8] 0 +
jz loc_100179C  +
mov ecx [esi+0Ch] +
mov [ecx+10h] eax +
mov [esi+0Ch] eax +
mov eax [esi+4] +
dec eax  +
pop esi  +
pop ebp  +
retn 10h  +
mov [esi+8] eax +
jmp loc_1001790  +
or eax 0FFFFFFFFh +
jmp loc_1001797  +
***
add edx 0Ch +
push edx  +
call sub_1002024  +
jmp loc_10017FC  +
cmp eax 0B0000h +
jz loc_10017A6  +
jmp loc_10017FC  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
test edx edx +
jz loc_10017FC  +
mov eax [edx+4] +
mov ecx 70000h +
cmp eax ecx +
ja loc_1001800  +
jz loc_10017A6  +
cmp eax 20000h +
jz loc_10017A6  +
cmp eax 30000h +
jz loc_10017A6  +
cmp eax 40000h +
jz loc_10017A6  +
cmp eax 50000h +
jz loc_10017A6  +
cmp eax 60000h +
jz loc_10017A6  +
pop ebp  +
retn 4  +
cmp eax 80000h +
jnz loc_1008287  +
push esi  +
lea esi [edx+0Ch] +
push esi  +
call sub_1001820  +
and dword ptr [esi] 0 +
pop esi  +
jmp loc_10017FC  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
mov ecx [esi] +
push ecx  +
call sub_1002C80  +
test eax eax +
jz loc_1001841  +
push ecx  +
call sub_100184B  +
push esi  +
call sub_1002024  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push esi  +
call sub_1002C80  +
test eax eax +
jz loc_1001891  +
mov eax [esi+8] +
mov [ebp+arg_0] eax +
test eax eax +
jz loc_1001885  +
push edi  +
mov edi [eax+10h] +
push eax  +
call sub_10017BF  +
lea eax [ebp+arg_0] +
push eax  +
call sub_1002024  +
mov eax edi +
mov [ebp+arg_0] eax +
test edi edi +
jnz loc_1001869  +
pop edi  +
and dword ptr [esi+4] 0 +
and dword ptr [esi+8] 0 +
and dword ptr [esi+0Ch] 0 +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1001910  +
test eax eax +
jz loc_10018C9  +
cmp dword ptr [eax+4] 80000h +
jnz loc_10018C9  +
push [ebp+arg_8]  +
push dword ptr [eax+0Ch]  +
call sub_10018D2  +
pop ebp  +
retn 0Ch  +
xor eax eax +
jmp loc_10018C5  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1001910  +
test eax eax +
jz loc_1003258  +
mov ecx [eax+4] +
cmp ecx 10000h +
jnz loc_100324C  +
mov eax [eax+0Ch] +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
push ecx  +
call sub_1002C80  +
test eax eax +
jz loc_100194D  +
mov edx [ebp+arg_4] +
cmp [ecx+4] edx +
jbe loc_100194D  +
mov eax [ecx+8] +
push esi  +
xor esi esi +
cmp edx 1 +
jb loc_100193D  +
dec edx  +
mov esi eax +
mov eax [eax+10h] +
jnz loc_1001935  +
mov ecx [ebp+arg_8] +
test ecx ecx +
jnz loc_1001949  +
pop esi  +
pop ebp  +
retn 0Ch  +
mov [ecx] esi +
jmp loc_1001944  +
xor eax eax +
jmp loc_1001945  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
or edi 0FFFFFFFFh +
cmp [ebp+lpString] 0 +
mov esi edi +
jz loc_100606D  +
push 0  +
push [ebp+lpString]  +
call sub_100243E  +
test eax eax +
jz loc_100607C  +
push ebx  +
mov ebx 0FFh +
cmp esi edi +
jz loc_100199F  +
mov eax esi +
sub eax edi +
cmp eax 1 +
jz loc_100608B  +
cmp eax ebx +
jg loc_100608B  +
mov edi esi +
inc esi  +
push esi  +
push 1  +
push 5Ch  +
push [ebp+lpString]  +
call sub_10019F2  +
mov esi eax +
cmp esi 0FFFFFFFFh +
jnz loc_1001984  +
push 0  +
push [ebp+lpString]  +
call sub_100243E  +
lea ecx [eax-1] +
cmp edi ecx +
jz loc_100608B  +
cmp edi esi +
jz loc_1006083  +
sub eax edi +
cmp eax ebx +
jg loc_100608B  +
push 0  +
call ds:SetLastError  +
xor eax eax +
inc eax  +
pop ebx  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+lpString] +
test esi esi +
jz loc_1007B96  +
push 0  +
push esi  +
call sub_100243E  +
test eax eax +
jz loc_1001A36  +
mov ecx [ebp+arg_C] +
cmp ecx eax +
jnb loc_1001A36  +
cmp [ebp+arg_8] 1 +
push dword ptr [ebp+wMatch]  +
lea eax [esi+ecx*2] +
push eax  +
jnz loc_1001A46  +
call ds:StrChrIW  +
test eax eax +
jz loc_1001A36  +
sub eax esi +
sar eax 1 +
pop esi  +
pop ebp  +
retn 10h  +
push 490h  +
call ds:SetLastError  +
or eax 0FFFFFFFFh +
jmp loc_1001A31  +
call ds:StrChrW  +
jmp loc_1001A29  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
xor ecx ecx +
push esi  +
push edi  +
cmp [ebp+arg_0] ecx +
jz loc_1001ADC  +
mov esi [ebp+lpString2] +
cmp esi ecx +
jz loc_1001ADC  +
mov edi [ebp+arg_8] +
cmp edi ecx +
jz loc_1001ADC  +
mov eax [ebp+arg_C] +
cmp eax ecx +
jz loc_1001ADC  +
xor ebx ebx +
inc ebx  +
cmp [ebp+arg_0] ebx +
jz loc_10063E2  +
mov [eax] ecx +
or dword ptr [edi] 0FFFFFFFFh +
mov [ebp+arg_8] ecx +
mov [ebp+lpString2] offset aQuery +
push ecx  +
push ebx  +
push [ebp+lpString2]  +
push dword ptr [esi+4]  +
call sub_100151B  +
test eax eax +
jz loc_1001ABB  +
add [ebp+lpString2] 14h +
inc [ebp+arg_8]  +
cmp [ebp+lpString2] offset asc_10012E0 +
jge loc_10063F2  +
xor ecx ecx +
jmp loc_1001A92  +
cmp [ebp+arg_0] 3 +
mov eax [ebp+arg_8] +
mov [edi] eax +
jb loc_1001AD3  +
call sub_1001AED  +
cmp eax ebx +
jz loc_100640E  +
mov eax ebx +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 10h  +
push 57h  +
call sub_1003151  +
jmp loc_100643F  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push esi  +
lea eax [ebp+hKey] +
push eax  +
xor esi esi +
push offset SubKey  +
push 80000001h  +
mov [ebp+hKey] esi +
mov [ebp+Type] esi +
mov dword ptr [ebp+Data] esi +
mov [ebp+cbData] esi +
call ds:RegOpenKeyW  +
test eax eax +
jz loc_1006372  +
mov eax esi +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
xor eax eax +
cmp esi [ebp+arg_4] +
jnb loc_1001BC2  +
test eax eax +
jnz loc_1001BC2  +
mov ecx [esi] +
test ecx ecx +
jz loc_1001BBD  +
call ecx  +
add esi 4 +
jmp loc_1001BAC  +
pop esi  +
pop ebp  +
retn   +
***
call sub_1001423  +
push 10h  +
push offset dword_1001CD8  +
call sub_1002BBC  +
xor ebx ebx +
mov [ebp-4] ebx +
mov eax large fs:18h +
mov esi [eax+4] +
mov [ebp-1Ch] ebx +
mov edi offset Destination +
push ebx  +
push esi  +
push edi  +
call ds:InterlockedCompareExchange  +
cmp eax ebx +
jnz loc_10078E4  +
xor esi esi +
inc esi  +
mov eax dword_100F028 +
cmp eax esi +
jz loc_1007903  +
mov eax dword_100F028 +
test eax eax +
jnz loc_1001CAD  +
mov dword_100F028 esi +
push offset dword_1001CD0  +
push offset dword_1001CC4  +
call sub_1001BA1  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_1007910  +
mov eax dword_100F028 +
cmp eax esi +
jnz loc_1001C62  +
push offset dword_1001CC0  +
push offset dword_1001CB8  +
call _initterm  +
pop ecx  +
pop ecx  +
mov dword_100F028 2 +
cmp [ebp-1Ch] ebx +
jnz loc_1001C6F  +
push ebx  +
push edi  +
call ds:InterlockedExchange  +
cmp dword_100F480 ebx +
jnz loc_100791E  +
push dword_100F034  +
push lpString2  +
push dword_100F030  +
call sub_1001F21  +
add esp 0Ch +
mov dword_100F014 eax +
cmp dword_100F008 ebx +
jnz loc_1007970  +
push eax  +
call ds:exit  +
mov dword_100F48C esi +
jmp loc_1001C3E  +
***
inc dword ptr [ebx+0F4603Dh]  +
add [eax] eax +
jz loc_10079B6  +
call sub_1001DA3  +
xor eax eax +
retn   +
***
call ds:_controlfp  +
pop ecx  +
pop ecx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1001910  +
test eax eax +
jz loc_1001DE9  +
cmp dword ptr [eax+4] 80000h +
jnz loc_1001DE9  +
push [ebp+arg_8]  +
push dword ptr [eax+0Ch]  +
call sub_1001DF2  +
pop ebp  +
retn 0Ch  +
xor eax eax +
jmp loc_1001DE5  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
and [ebp+var_4] 0 +
and [ebp+var_8] 0 +
push esi  +
mov esi [ebp+arg_0] +
lea eax [ebp+var_8] +
push eax  +
push [ebp+arg_4]  +
push esi  +
call sub_1001910  +
mov [ebp+var_4] eax +
test eax eax +
jz loc_1001E47  +
mov ecx [ebp+var_8] +
test ecx ecx +
jz loc_1001E4C  +
mov eax [eax+10h] +
mov [ecx+10h] eax +
mov eax [ebp+var_4] +
cmp eax [esi+0Ch] +
jz loc_1003244  +
dec dword ptr [esi+4]  +
push eax  +
call sub_10017BF  +
lea eax [ebp+var_4] +
push eax  +
call sub_1002024  +
xor eax eax +
inc eax  +
pop esi  +
leave   +
retn 8  +
mov edx [eax+10h] +
mov [esi+8] edx +
jmp loc_1001E29  +
***
push 20000h  +
inc esi  +
call ds:__iob_func  +
add eax 40h +
push eax  +
call sub_10030DC  +
jmp loc_1001F72  +
mov esi ds:__iob_func +
push offset asc_1003C30  +
call esi  +
add eax 20h +
push eax  +
call sub_100245F  +
push 2  +
call esi  +
add eax 20h +
push eax  +
call sub_100D948  +
xor esi esi +
jmp loc_1001F72  +
push edi  +
push ebx  +
call sub_1008ECD  +
jmp loc_1001F70  +
push edi  +
push ebx  +
call sub_1009207  +
jmp loc_1001F70  +
push edi  +
push ebx  +
call sub_1009363  +
jmp loc_1001F70  +
push edi  +
push ebx  +
call sub_100AA63  +
jmp loc_1001F70  +
push edi  +
push ebx  +
call sub_100B0C4  +
jmp loc_1001F70  +
push edi  +
push ebx  +
call sub_100B2CF  +
jmp loc_1001F70  +
push edi  +
push ebx  +
call sub_100BB05  +
jmp loc_1001F70  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
push edi  +
mov edi [ebp+lpString2] +
lea eax [ebp+var_4] +
push eax  +
lea eax [ebp+var_8] +
push eax  +
push edi  +
xor esi esi +
push ebx  +
mov [ebp+var_4] esi +
mov [ebp+var_8] esi +
call sub_1001A53  +
test eax eax +
jz loc_1001E54  +
cmp [ebp+var_4] 1 +
jz loc_1001E6E  +
mov eax [ebp+var_8] +
cmp eax 0Bh +
ja loc_1001F72  +
jmp ds:off_1001EEC[eax*4]  +
push edi  +
push ebx  +
call sub_100356F  +
mov esi eax +
call sub_1001F83  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push dword_100F01C  +
call sub_1002C80  +
cmp eax 1 +
jnz loc_100200D  +
push edi  +
push 3  +
push dword_100F01C  +
call sub_1002DCA  +
mov edi eax +
test edi edi +
jz loc_1002002  +
push esi  +
lea esi [edi-1] +
push esi  +
push 3  +
push dword_100F01C  +
call sub_1002D71  +
cmp eax 10000h +
jnz loc_1001FFB  +
push esi  +
push 3  +
push dword_100F01C  +
call sub_100189B  +
mov [ebp+var_4] eax +
test eax eax +
jz loc_1001FFB  +
add eax 0Ch +
push eax  +
call sub_1002024  +
lea eax [ebp+var_4] +
push eax  +
call sub_1002024  +
push esi  +
push 3  +
push dword_100F01C  +
call sub_1001DBB  +
dec edi  +
dec esi  +
test edi edi +
jnz loc_1001FB1  +
pop esi  +
push offset dword_100F01C  +
call sub_1001820  +
pop edi  +
cmp dword_100F47C 1 +
jz loc_1007C1C  +
xor eax eax +
inc eax  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
test esi esi +
jz loc_1007BF3  +
cmp dword ptr [esi] 0 +
jz loc_1002F0A  +
push ebx  +
call ds:GetProcessHeap  +
mov ebx eax +
test ebx ebx +
jz loc_1002F12  +
push dword ptr [esi]  +
call sub_1002085  +
cmp eax 0FFFFFFFFh +
jz loc_1007C0C  +
push eax  +
push 0  +
push dword ptr [esi]  +
call memset  +
add esp 0Ch +
push dword ptr [esi]  +
push 0  +
push ebx  +
call ds:HeapFree  +
and dword ptr [esi] 0 +
pop ebx  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+lpMem] 0 +
jz loc_1007B53  +
push [ebp+lpMem]  +
call sub_10020C4  +
test eax eax +
jz loc_10020BA  +
call ds:GetProcessHeap  +
test eax eax +
jz loc_10020BA  +
push [ebp+lpMem]  +
push 0  +
push eax  +
call ds:HeapSize  +
pop ebp  +
retn 4  +
or eax 0FFFFFFFFh +
jmp loc_10020B6  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+lpMem] 0 +
jz loc_1007AC6  +
call ds:GetProcessHeap  +
test eax eax +
jz loc_10020F5  +
push [ebp+lpMem]  +
push 0  +
push eax  +
call ds:HeapValidate  +
test eax eax +
jz loc_1007AD8  +
pop ebp  +
retn 4  +
xor eax eax +
jmp loc_10020F1  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
mov ebx [ebp+arg_0] +
xor ecx ecx +
push esi  +
push edi  +
mov [ebp+var_4] ecx +
cmp ebx ecx +
jz loc_10047F9  +
mov esi [ebp+arg_4] +
cmp esi ecx +
jz loc_10047F9  +
mov eax [esi] +
cmp eax ecx +
jl loc_10047F9  +
cmp eax 0Ch +
jge loc_10047F9  +
push ecx  +
xor edi edi +
inc edi  +
push edi  +
push 5Ch  +
push ebx  +
mov [ebp+lpString] ecx +
call sub_10019F2  +
cmp eax 0FFFFFFFFh +
jz loc_100215E  +
lea eax [ebx+eax*2] +
lea ecx [eax+2] +
mov [ebp+lpString] ecx +
mov cx ds:word_1001310 +
mov [eax] cx +
cmp word ptr [ebx] 22h +
jz loc_1006446  +
push 0  +
push offset aHkey_current_c  +
mov [ebp+arg_0] edi +
call sub_100243E  +
inc eax  +
mov [ebp+arg_4] eax +
add eax eax +
push eax  +
call sub_10026AF  +
mov [ebp+var_4] eax +
test eax eax +
jz loc_100644D  +
push 0  +
push edi  +
push offset String2  +
push ebx  +
call sub_100151B  +
test eax eax +
jz loc_10021B6  +
push 0  +
push edi  +
push offset aHkey_current_u  +
push ebx  +
call sub_100151B  +
test eax eax +
jnz loc_100476F  +
push [ebp+arg_4]  +
mov dword ptr [esi+4] 80000001h +
push offset aHkey_current_u  +
push [ebp+var_4]  +
call sub_10022BD  +
cmp [esi+8] edi +
jz loc_1006506  +
mov eax [esi] +
cmp eax 6 +
jz loc_1006522  +
cmp eax 7 +
jz loc_1006522  +
xor ebx ebx +
cmp [ebp+lpString] ebx +
jz loc_10064C1  +
push [ebp+lpString]  +
call sub_1001352  +
mov ebx eax +
push ebx  +
call sub_1001956  +
test eax eax +
jz loc_100657B  +
push 0  +
push ebx  +
call sub_100243E  +
mov edi eax +
inc edi  +
lea eax [edi+edi] +
push eax  +
call sub_10026AF  +
mov [esi+3Ch] eax +
test eax eax +
jz loc_10065C3  +
push edi  +
push ebx  +
push eax  +
call sub_10022BD  +
mov eax [ebp+arg_4] +
lea edi [eax+edi+2] +
lea eax [edi+edi] +
push eax  +
call sub_10026AF  +
mov [esi+40h] eax +
test eax eax +
jz loc_10065C3  +
push edi  +
push [ebp+var_4]  +
push eax  +
call sub_10022BD  +
push edi  +
push offset dword_10011EC  +
push dword ptr [esi+40h]  +
call sub_10028CB  +
push edi  +
push dword ptr [esi+3Ch]  +
push dword ptr [esi+40h]  +
call sub_10028CB  +
lea eax [ebp+var_4] +
push eax  +
call sub_1002024  +
mov eax [ebp+arg_0] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
jz loc_10022F1  +
cmp [ebp+arg_4] 0 +
jz loc_10022F1  +
cmp [ebp+arg_8] 0 +
jle loc_10022F1  +
push [ebp+arg_4]  +
push [ebp+arg_8]  +
push [ebp+arg_0]  +
call sub_10022FA  +
test eax eax +
jl loc_1007C36  +
xor eax eax +
inc eax  +
pop ebp  +
retn 0Ch  +
xor eax eax +
jmp loc_10022ED  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
xor eax eax +
test ecx ecx +
jz loc_100235A  +
cmp ecx 7FFFFFFFh +
ja loc_100235A  +
test eax eax +
jl loc_1002356  +
mov eax [ebp+arg_0] +
push ebx  +
xor ebx ebx +
push esi  +
mov esi ecx +
test ecx ecx +
jz loc_1002361  +
mov edx [ebp+arg_8] +
push edi  +
mov edi 7FFFFFFEh +
sub edi ecx +
sub edx eax +
nop   +
nop   +
lea ecx [edi+esi] +
test ecx ecx +
jz loc_1002348  +
movzx ecx word ptr [edx+eax] +
test cx cx +
jz loc_1002348  +
mov [eax] cx +
inc eax  +
inc eax  +
dec esi  +
jnz loc_1002330  +
pop edi  +
test esi esi +
jz loc_1002361  +
xor ecx ecx +
mov [eax] cx +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 0Ch  +
mov eax 80070057h +
jmp loc_1002310  +
dec eax  +
dec eax  +
mov ebx 8007007Ah +
jmp loc_100234D  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
xor ebx ebx +
push esi  +
push edi  +
mov [ebp+lpString1] ebx +
cmp [ebp+lpString] ebx +
jz loc_1002432  +
mov edi [ebp+arg_4] +
cmp edi ebx +
jz loc_1002432  +
mov eax [edi] +
cmp eax ebx +
jl loc_1002432  +
cmp eax 0Ch +
jge loc_1002432  +
push ebx  +
push [ebp+lpString]  +
call sub_100243E  +
mov esi eax +
inc esi  +
lea eax [esi+esi] +
push eax  +
call sub_10026AF  +
mov [ebp+lpString1] eax +
cmp eax ebx +
jz loc_10065E8  +
push esi  +
push [ebp+lpString]  +
push eax  +
call sub_10022BD  +
push 3  +
push [ebp+lpString1]  +
call sub_10029E7  +
mov esi [ebp+lpString1] +
push ebx  +
push esi  +
call sub_100243E  +
cmp eax 2 +
jbe loc_1002400  +
push 2  +
push 1  +
push offset asc_10012E0  +
push [ebp+lpString1]  +
call sub_100151B  +
test eax eax +
jz loc_10065EC  +
cmp esi ebx +
jz loc_1006632  +
push ebx  +
push esi  +
call sub_100243E  +
test eax eax +
jbe loc_1006632  +
push edi  +
push esi  +
call sub_10020FE  +
mov edi eax +
lea eax [ebp+lpString1] +
push eax  +
call sub_1002024  +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
push 57h  +
jmp loc_1006662  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+lpString] 0 +
jz loc_1007A87  +
push [ebp+lpString]  +
call ds:lstrlenW  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push ebx  +
push esi  +
push edi  +
xor edi edi +
mov [ebp+NumberOfCharsWritten] edi +
cmp [ebp+hConsoleOutput] edi +
jz loc_1003BCC  +
mov ebx [ebp+lpString] +
cmp ebx edi +
jz loc_1003BCC  +
push [ebp+hConsoleOutput]  +
call sub_10014B2  +
cmp eax 1 +
jz loc_1003B6A  +
push edi  +
push ebx  +
call sub_100243E  +
push 100h  +
push edi  +
mov esi offset unk_100F360 +
push esi  +
mov [ebp+var_10] eax +
call memset  +
add esp 0Ch +
mov [ebp+var_C] edi +
cmp [ebp+var_10] edi +
jbe loc_1002574  +
mov ebx 0FFh +
mov eax [ebp+var_10] +
mov ecx [ebp+var_C] +
sub eax ecx +
mov [ebp+NumberOfCharsWritten] edi +
mov [ebp+cchWideChar] ebx +
cmp eax ebx +
ja loc_10024D8  +
mov [ebp+cchWideChar] eax +
mov eax [ebp+lpString] +
lea eax [eax+ecx*2] +
mov [ebp+lpWideCharStr] eax +
push edi  +
push edi  +
push edi  +
push edi  +
push [ebp+cchWideChar]  +
push [ebp+lpWideCharStr]  +
push edi  +
call ds:GetConsoleOutputCP  +
push eax  +
call ds:WideCharToMultiByte  +
mov [ebp+NumberOfCharsWritten] eax +
cmp eax edi +
jz loc_1003BC1  +
cmp eax ebx +
ja loc_1007D0D  +
cmp eax [ebp+cchWideChar] +
jb loc_1007D50  +
push 100h  +
push edi  +
push esi  +
call memset  +
add esp 0Ch +
push edi  +
push edi  +
push ebx  +
push esi  +
push [ebp+cchWideChar]  +
push [ebp+lpWideCharStr]  +
push edi  +
call ds:GetConsoleOutputCP  +
push eax  +
call ds:WideCharToMultiByte  +
mov [ebp+NumberOfCharsWritten] eax +
cmp eax edi +
jz loc_1003BC1  +
mov eax [ebp+cchWideChar] +
add [ebp+var_C] eax +
push esi  +
push offset aS_6  +
push [ebp+hConsoleOutput]  +
call ds:fprintf  +
push [ebp+hConsoleOutput]  +
call ds:fflush  +
mov eax [ebp+var_C] +
add esp 10h +
cmp [ebp+var_10] eax +
ja loc_10024C3  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_4] 0 +
jnz loc_10025A8  +
cmp [ebp+arg_8] 0 +
jz loc_10032A2  +
call sub_100160A  +
test eax eax +
jz loc_10032A2  +
push ebx  +
push esi  +
push edi  +
push 3  +
pop esi  +
push esi  +
push dword_100F01C  +
call sub_1002DCA  +
mov ebx [ebp+arg_0] +
mov edi eax +
cmp edi ebx +
jbe loc_100325F  +
push ebx  +
push esi  +
push dword_100F01C  +
call sub_1002D71  +
mov edi offset aBuffer +
test eax eax +
jnz sub_10031E6  +
push 10h  +
call sub_10026AF  +
mov esi eax +
mov [ebp+arg_0] esi +
test esi esi +
jz loc_10032A9  +
and dword ptr [esi+8] 0 +
and dword ptr [esi+0Ch] 0 +
push 7  +
push edi  +
push esi  +
call sub_1002CA5  +
push esi  +
push ebx  +
push 3  +
push dword_100F01C  +
call sub_1002E1C  +
test eax eax +
jz loc_1007D6B  +
push 7  +
push edi  +
push esi  +
call ds:_memicmp  +
add esp 0Ch +
test eax eax +
jnz loc_10032A9  +
mov ebx [ebp+arg_4] +
test ebx ebx +
jnz loc_1007D79  +
mov edi [ebp+arg_8] +
mov eax [esi+8] +
cmp edi eax +
jbe loc_1003286  +
test eax eax +
lea eax [edi+edi] +
push eax  +
jnz loc_10032B0  +
call sub_10026AF  +
mov [esi+0Ch] eax +
test eax eax +
jz loc_10032A9  +
mov [esi+8] edi +
cmp dword ptr [esi+0Ch] 0 +
jz loc_10032A9  +
test ebx ebx +
jnz loc_1007D89  +
cmp [ebp+arg_C] 1 +
jnz loc_10026A0  +
lea eax [edi+edi] +
push eax  +
push 0  +
push dword ptr [esi+0Ch]  +
call memset  +
add esp 0Ch +
mov eax [esi+0Ch] +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 10h  +
***
call sub_1002BBC  +
cmp dword ptr [ebp+8] 0 +
jbe loc_1007AE5  +
call ds:GetProcessHeap  +
test eax eax +
jz loc_10026F1  +
and dword ptr [ebp-4] 0 +
push dword ptr [ebp+8]  +
push 0Ch  +
push eax  +
call ds:HeapAlloc  +
mov [ebp-20h] eax +
mov dword ptr [ebp-4] 0FFFFFFFEh +
call sub_1002714  +
retn 4  +
xor eax eax +
jmp loc_10026E9  +
***
mov ecx [ebp-10h] +
mov large fs:0 ecx +
pop ecx  +
pop edi  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
push ecx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
xor ebx ebx +
push esi  +
push edi  +
cmp dword ptr [ebp+arg_0] ebx +
jz loc_10027E8  +
cmp dword ptr [ebp+lpString] ebx +
jz loc_10027E8  +
push ebx  +
push dword ptr [ebp+lpString]  +
call sub_100243E  +
mov edi eax +
push 1  +
add edi 4 +
push edi  +
push ebx  +
push ebx  +
call sub_1002593  +
mov [ebp+var_8] eax +
cmp eax ebx +
jz loc_100808B  +
push ebx  +
push dword ptr [ebp+arg_0]  +
call sub_100243E  +
mov esi eax +
push 1  +
add esi 4 +
push esi  +
push ebx  +
push 1  +
call sub_1002593  +
mov [ebp+var_4] eax +
cmp eax ebx +
jz loc_100808B  +
push dword ptr [ebp+lpString]  +
mov ebx offset aS +
push ebx  +
push edi  +
push [ebp+var_8]  +
call sub_1002803  +
add esp 10h +
test eax eax +
jl loc_1008099  +
push dword ptr [ebp+arg_0]  +
push ebx  +
push esi  +
push [ebp+var_4]  +
call sub_1002803  +
add esp 10h +
test eax eax +
jl loc_1008099  +
push 0  +
push [ebp+arg_8]  +
push [ebp+var_4]  +
push [ebp+var_8]  +
call sub_100157E  +
xor ecx ecx +
cmp eax 0FFFFFFFFh +
setnz cl  +
mov eax ecx +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
call ds:GetLastError  +
jmp loc_100809F  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
xor eax eax +
test ecx ecx +
jz loc_100284F  +
cmp ecx 7FFFFFFFh +
ja loc_100284F  +
test eax eax +
jl loc_100284D  +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
lea eax [ebp+arg_C] +
push eax  +
push [ebp+arg_8]  +
lea esi [ecx-1] +
push esi  +
push edi  +
xor ebx ebx +
call ds:_vsnwprintf  +
add esp 10h +
test eax eax +
jl loc_1002856  +
cmp eax esi +
ja loc_1002856  +
jz loc_10078D9  +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn   +
mov eax 80070057h +
jmp loc_1002819  +
mov ebx 8007007Ah +
jmp loc_10078D9  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_4] +
test esi esi +
jz loc_1005FB7  +
push edi  +
mov edi [ebp+arg_0] +
cmp edi 0Bh +
ja loc_1005FC6  +
push 64h  +
push 0  +
push esi  +
call memset  +
add esp 0Ch +
xor eax eax +
test edi edi +
setnz al  +
push 3  +
mov [esi] edi +
mov dword ptr [esi+4] 80000002h +
push offset a0  +
add esi 30h +
push esi  +
lea eax [eax+eax-1] +
mov [esi-4] eax +
call sub_10022BD  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
jz loc_10028FF  +
cmp [ebp+arg_4] 0 +
jz loc_10028FF  +
cmp [ebp+arg_8] 0 +
jle loc_10028FF  +
push [ebp+arg_4]  +
push [ebp+arg_8]  +
push [ebp+arg_0]  +
call sub_1002908  +
test eax eax +
jl loc_1007C45  +
xor eax eax +
inc eax  +
pop ebp  +
retn 0Ch  +
xor eax eax +
jmp loc_10028FB  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_4] +
push ebx  +
xor eax eax +
push edi  +
mov ebx 7FFFFFFFh +
test edx edx +
jz loc_1002970  +
cmp edx ebx +
ja loc_1002970  +
mov edi [ebp+arg_0] +
test eax eax +
jl loc_1002980  +
and [ebp+arg_4] 0 +
xor ecx ecx +
push esi  +
mov esi edx +
mov eax edi +
cmp edx ecx +
jz loc_1002977  +
nop   +
nop   +
nop   +
nop   +
nop   +
nop   +
nop   +
nop   +
nop   +
cmp [eax] cx +
jz loc_100294A  +
inc eax  +
inc eax  +
dec esi  +
jnz loc_1002940  +
cmp esi ecx +
jz loc_1002977  +
mov ecx edx +
sub ecx esi +
mov eax [ebp+arg_4] +
pop esi  +
test eax eax +
jl loc_100296A  +
mov eax [ebp+arg_8] +
push ebx  +
sub edx ecx +
push 0  +
lea ecx [edi+ecx*2] +
call sub_1002989  +
pop edi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
mov eax 80070057h +
jmp loc_1002921  +
mov [ebp+arg_4] 80070057h +
jmp loc_1002952  +
xor ecx ecx +
jmp loc_1002956  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov ebx eax +
mov esi edx +
xor eax eax +
xor edi edi +
test esi esi +
jz loc_10029D8  +
nop   +
nop   +
nop   +
cmp [ebp+arg_4] eax +
jz loc_10029BD  +
movzx edx word ptr [ebx] +
test dx dx +
jz loc_10029BD  +
mov [ecx] dx +
inc ecx  +
inc ecx  +
inc ebx  +
inc ebx  +
dec esi  +
dec [ebp+arg_4]  +
inc edi  +
test esi esi +
jnz loc_10029A0  +
test esi esi +
jz loc_10029D8  +
xor edx edx +
mov [ecx] dx +
mov ecx [ebp+arg_0] +
test ecx ecx +
jnz loc_1007B88  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
dec ecx  +
dec ecx  +
dec edi  +
mov eax 8007007Ah +
jmp loc_10029C1  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
push 0  +
push [ebp+lpString]  +
call sub_1002A02  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
mov eax dword_100F000 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_4] +
push ebx  +
mov ebx [ebp+lpString] +
push esi  +
push edi  +
mov esi offset asc_1002AE8 +
lea edi [ebp+var_C] +
movs   +
mov [ebp+lpStart] eax +
xor eax eax +
mov [ebp+var_18] eax +
mov [ebp+var_14] eax +
movs   +
cmp ebx eax +
jz loc_1002F00  +
push eax  +
push ebx  +
call sub_100243E  +
test eax eax +
jz loc_1002F00  +
cmp [ebp+lpStart] 0 +
jnz loc_1007D98  +
lea eax [ebp+var_C] +
mov [ebp+lpStart] eax +
mov edi [ebp+arg_8] +
mov esi ebx +
cmp edi 3 +
jnz loc_1002ED3  +
cmp word ptr [ebx] 0 +
jz loc_1002A83  +
movzx eax word ptr [esi] +
push eax  +
push [ebp+lpStart]  +
call ds:StrChrW  +
test eax eax +
jnz loc_1002EE1  +
mov [ebp+var_18] esi +
cmp edi 3 +
jnz loc_1002EF2  +
cmp edi 2 +
jz loc_1007DA7  +
movzx eax word ptr [esi] +
test ax ax +
jz loc_1002ACB  +
push eax  +
push [ebp+lpStart]  +
call ds:StrChrW  +
test eax eax +
jnz loc_1002EB4  +
and [ebp+var_14] 0 +
inc esi  +
inc esi  +
movzx eax word ptr [esi] +
test ax ax +
jnz loc_1002AA0  +
mov eax [ebp+var_14] +
test eax eax +
jnz loc_1007DAE  +
cmp [ebp+var_18] ebx +
ja loc_1007DB8  +
mov eax ebx +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1002AF3  +
leave   +
retn 0Ch  +
***
cmp ecx dword_100F000 +
jnz loc_100D667  +
retn   +
***
push ebp  +
mov ebp esp +
push 0  +
call ds:GetModuleHandleA  +
test eax eax +
jz loc_1002B39  +
push eax  +
call sub_1002B43  +
test eax eax +
jz loc_1002B39  +
movzx eax word ptr [eax+5Ch] +
cmp ax 2 +
jz loc_10079D8  +
cmp ax 3 +
jnz loc_1002B39  +
xor eax eax +
inc eax  +
pop ebp  +
retn   +
***
mov eax [ebp+8] +
pop ebp  +
retn   +
***
call sub_1002BBC  +
xor eax eax +
mov ecx [ebp+8] +
test ecx ecx +
jz loc_1002B92  +
cmp ecx 0FFFFFFFFh +
jz loc_1002B92  +
and [ebp-4] eax +
mov edx 5A4Dh +
cmp [ecx] dx +
jnz loc_1002B8B  +
mov edx [ecx+3Ch] +
test edx edx +
jl loc_1002B8B  +
cmp edx 10000000h +
jnb loc_1002B8B  +
lea eax [edx+ecx] +
mov [ebp-1Ch] eax +
cmp dword ptr [eax] 4550h +
jnz loc_10079CE  +
mov dword ptr [ebp-4] 0FFFFFFFEh +
call sub_1002714  +
retn 4  +
***
mov eax [esp+8+arg_4] +
mov [esp+8+arg_4] ebp +
lea ebp [esp+8+arg_4] +
sub esp eax +
push ebx  +
push esi  +
push edi  +
mov eax dword_100F000 +
xor [ebp-4] eax +
xor eax ebp +
push eax  +
mov [ebp-18h] esp +
push dword ptr [ebp-8]  +
mov eax [ebp-4] +
mov dword ptr [ebp-4] 0FFFFFFFEh +
mov [ebp-8] eax +
lea eax [ebp-10h] +
mov large fs:0 eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push [ebp+arg_0]  +
and [ebp+var_4] 0 +
call sub_1002C80  +
test eax eax +
jz loc_10082A2  +
push esi  +
mov esi [ebp+arg_8] +
test esi esi +
jnz loc_1002C33  +
push [ebp+lpString]  +
call ds:lstrlenW  +
mov esi eax +
push edi  +
inc esi  +
lea edi [esi+esi] +
push edi  +
call sub_10026AF  +
mov [ebp+var_4] eax +
test eax eax +
jz loc_1002C6F  +
push esi  +
push [ebp+lpString]  +
push eax  +
call sub_10022BD  +
push [ebp+var_4]  +
push edi  +
push 20000h  +
push [ebp+arg_0]  +
call sub_1001741  +
cmp eax 0FFFFFFFFh +
jz loc_10082AA  +
pop edi  +
pop esi  +
leave   +
retn 0Ch  +
or eax 0FFFFFFFFh +
jmp loc_1002C69  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_1003145  +
cmp dword ptr [eax] 9 +
jnz loc_1003145  +
xor eax eax +
inc eax  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
jz loc_1002CD9  +
cmp [ebp+arg_4] 0 +
jz loc_1002CD9  +
cmp [ebp+arg_8] 0 +
jle loc_1002CD9  +
push [ebp+arg_4]  +
push [ebp+arg_8]  +
push [ebp+arg_0]  +
call sub_1002CE2  +
test eax eax +
jl loc_1007C27  +
xor eax eax +
inc eax  +
pop ebp  +
retn 0Ch  +
xor eax eax +
jmp loc_1002CD5  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_4] +
xor eax eax +
test edx edx +
jz loc_1002D12  +
cmp edx 7FFFFFFFh +
ja loc_1002D12  +
test eax eax +
jl loc_1002D0E  +
mov eax [ebp+arg_8] +
mov ecx [ebp+arg_0] +
push 7FFFFFFEh  +
push 0  +
call sub_1002D1E  +
pop ebp  +
retn 0Ch  +
mov eax 80070057h +
jmp loc_1002CF8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov ebx eax +
mov esi edx +
xor eax eax +
xor edi edi +
test esi esi +
jz loc_1002D63  +
cmp [ebp+arg_4] eax +
jz loc_1002D4A  +
mov dl [ebx] +
test dl dl +
jz loc_1002D4A  +
mov [ecx] dl +
inc ecx  +
inc ebx  +
dec esi  +
dec [ebp+arg_4]  +
inc edi  +
test esi esi +
jnz loc_1002D32  +
test esi esi +
jz loc_1002D63  +
mov byte ptr [ecx] 0 +
mov ecx [ebp+arg_0] +
test ecx ecx +
jnz loc_1007B81  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
dec ecx  +
dec edi  +
mov eax 8007007Ah +
jmp loc_1002D4E  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1001910  +
test eax eax +
jz loc_1002D9F  +
cmp dword ptr [eax+4] 80000h +
jnz loc_1002D9F  +
push [ebp+arg_8]  +
push dword ptr [eax+0Ch]  +
call sub_1002DA8  +
pop ebp  +
retn 0Ch  +
xor eax eax +
jmp loc_1002D9B  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1001910  +
test eax eax +
jz loc_1002DC1  +
mov eax [eax+4] +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1001910  +
test eax eax +
jz loc_1002DF5  +
cmp dword ptr [eax+4] 80000h +
jnz loc_1002DF5  +
push dword ptr [eax+0Ch]  +
call sub_1002DFE  +
pop ebp  +
retn 8  +
xor eax eax +
jmp loc_1002DF1  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
push ecx  +
call sub_1002C80  +
test eax eax +
jz loc_1002E13  +
mov eax [ecx+4] +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1001910  +
test eax eax +
jz loc_1002E4D  +
cmp dword ptr [eax+4] 80000h +
jnz loc_1002E4D  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push dword ptr [eax+0Ch]  +
call sub_1002E56  +
pop ebp  +
retn 10h  +
xor eax eax +
jmp loc_1002E49  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_8] +
test esi esi +
jz loc_1002E92  +
push 0  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1001910  +
test eax eax +
jz loc_1002E92  +
mov ecx [eax+4] +
mov edx 10000h +
cmp ecx edx +
jz loc_1002E96  +
test ecx ecx +
jnz loc_1002E92  +
mov [eax+4] edx +
mov [eax+0Ch] esi +
xor eax eax +
inc eax  +
pop esi  +
pop ebp  +
retn 0Ch  +
xor eax eax +
jmp loc_1002E8D  +
test ecx ecx +
jz loc_1002E84  +
jmp loc_1002E87  +
***
cmp [ebp+var_14] 0 +
jnz loc_1002AB6  +
mov [ebp+var_14] esi +
jmp loc_1002AB6  +
test eax eax +
jz loc_1002A54  +
jmp loc_1002A5A  +
cmp edi 1 +
jz loc_1002A68  +
jmp loc_1002A86  +
inc esi  +
inc esi  +
cmp word ptr [esi] 0 +
jz loc_1002A83  +
jmp loc_1002A6E  +
cmp edi 2 +
jz loc_1002A8F  +
jmp loc_1002ACB  +
mov eax offset dword_1001314 +
jmp loc_1002AD6  +
***
xor eax eax +
inc eax  +
jmp loc_100207B  +
xor eax eax +
jmp loc_100207A  +
***
mov eax dword_100F01C +
test eax eax +
jz loc_1002F3F  +
push eax  +
call sub_1002C80  +
test eax eax +
jz loc_1002F3F  +
push 0  +
push dword_100F01C  +
call sub_1002F4A  +
retn   +
mov eax offset dword_1001314 +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1001910  +
test eax eax +
jz loc_1002F70  +
cmp dword ptr [eax+4] 20000h +
jnz loc_1002F70  +
mov eax [eax+0Ch] +
pop ebp  +
retn 8  +
xor eax eax +
jmp loc_1002F6C  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ds:GetLastError +
push edi  +
call esi  +
cmp [ebp+lpString] 0 +
mov edi eax +
jz loc_1007A12  +
call sub_100160A  +
test eax eax +
jz loc_1002FC7  +
push 0  +
push [ebp+lpString]  +
push 0  +
push dword_100F01C  +
call sub_1002FD0  +
test eax eax +
jz loc_1007A29  +
push edi  +
call ds:SetLastError  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
xor eax eax +
jmp loc_1002FC1  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
xor edi edi +
push edi  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1001910  +
mov esi eax +
cmp esi edi +
jz loc_10082CE  +
mov eax [esi+4] +
push ebx  +
mov ebx 20000h +
cmp eax ebx +
jnz loc_10034BA  +
cmp [ebp+arg_C] edi +
jnz loc_1003011  +
push [ebp+lpString]  +
call ds:lstrlenW  +
mov [ebp+arg_C] eax +
mov eax [ebp+arg_C] +
inc eax  +
mov [ebp+arg_C] eax +
cmp [esi+4] edi +
jz loc_100349F  +
lea ebx [eax+eax] +
cmp [esi+8] ebx +
jnb loc_1003048  +
lea edi [esi+0Ch] +
push edi  +
call sub_1002024  +
and dword ptr [edi] 0 +
push ebx  +
call sub_10026AF  +
mov [edi] eax +
test eax eax +
jz loc_10034C2  +
mov [esi+8] ebx +
push [ebp+arg_C]  +
push [ebp+lpString]  +
push dword ptr [esi+0Ch]  +
call sub_10022BD  +
xor eax eax +
inc eax  +
pop ebx  +
pop edi  +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
cmp dword ptr [esi+0Ch] 1 +
jz loc_1005FD5  +
lea eax [esi+3Ch] +
push eax  +
call sub_1002024  +
lea eax [esi+40h] +
push eax  +
call sub_1002024  +
lea eax [esi+38h] +
push eax  +
call sub_1002024  +
lea eax [esi+50h] +
push eax  +
call sub_1002024  +
lea eax [esi+44h] +
push eax  +
call sub_1002024  +
lea eax [esi+48h] +
push eax  +
call sub_1002024  +
add esi 54h +
push esi  +
call sub_1001820  +
xor eax eax +
inc eax  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
test esi esi +
jz loc_100313A  +
test [ebp+arg_4] 0F0000h +
jz loc_100313A  +
test [ebp+arg_4] 10000h +
jnz loc_100822A  +
mov al byte ptr [ebp+arg_4] +
push ebx  +
xor ebx ebx +
inc ebx  +
test al bl +
jnz loc_1008234  +
test al 4 +
jnz loc_100823B  +
test al 2 +
jnz loc_1008242  +
test al 8 +
jnz loc_1008249  +
call sub_1002F1E  +
push eax  +
push esi  +
call sub_100245F  +
mov eax ebx +
pop ebx  +
pop esi  +
pop ebp  +
retn 8  +
call ds:GetLastError  +
jmp loc_1008269  +
***
xor eax eax +
jmp loc_1002C9C  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+dwErrCode] +
test eax eax +
jl loc_100619E  +
cmp eax 2 +
jnb loc_10061A9  +
push eax  +
call ds:SetLastError  +
call sub_1003182  +
xor eax eax +
inc eax  +
pop ebp  +
retn 4  +
***
mov edi edi +
push dword_100F01C  +
call sub_100189B  +
mov esi eax +
test esi esi +
jnz loc_100262A  +
jmp loc_10032A9  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_0]  +
call sub_1002C80  +
test eax eax +
jz loc_10082C6  +
push edi  +
xor edi edi +
cmp [ebp+arg_4] edi +
jbe loc_100323D  +
push 0  +
push 0  +
push 0  +
push [ebp+arg_0]  +
call sub_1001741  +
cmp eax 0FFFFFFFFh +
jz loc_100323D  +
inc edi  +
cmp edi [ebp+arg_4] +
jb loc_1003224  +
mov eax edi +
pop edi  +
pop ebp  +
retn 8  +
***
mov [esi+0Ch] ecx +
jmp loc_1001E32  +
***
cmp ecx 80000h +
jz loc_10018FB  +
xor eax eax +
jmp loc_10018FE  +
***
push esi  +
push dword_100F01C  +
call sub_10018D2  +
test eax eax +
jz loc_10032A9  +
mov ecx ebx +
sub ecx edi +
inc ecx  +
push ecx  +
push eax  +
call sub_1003207  +
cmp eax 0FFFFFFFFh +
jnz loc_10025D4  +
jmp loc_10032A9  +
cmp edi 100h +
jbe loc_1002677  +
lea ecx [edi+edi] +
cmp ecx eax +
jnb loc_1002677  +
jmp loc_1002658  +
xor eax eax +
jmp loc_10026A6  +
xor eax eax +
jmp loc_10026A3  +
lea eax [esi+0Ch] +
push eax  +
call sub_100D7F8  +
jmp loc_100266C  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1001910  +
test eax eax +
jz loc_1003395  +
cmp dword ptr [eax+4] 80000h +
jnz loc_1003395  +
push [ebp+arg_10]  +
push [ebp+lpString]  +
push [ebp+arg_8]  +
push dword ptr [eax+0Ch]  +
call sub_1002FD0  +
pop ebp  +
retn 14h  +
xor eax eax +
jmp loc_1003391  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_4]  +
push [ebp+dwMessageId]  +
push 0  +
call sub_10033B9  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
xor ebx ebx +
mov [ebp+hMem] ebx +
cmp [ebp+dwMessageId] ebx +
jz loc_1007E1A  +
call sub_100160A  +
test eax eax +
jz loc_1007E2C  +
push esi  +
push 1  +
push dword_100F01C  +
call sub_1002DCA  +
mov esi eax +
cmp esi [ebp+arg_8] +
jbe loc_1007E36  +
mov esi 80h +
push edi  +
push 1  +
add esi esi +
push esi  +
push ebx  +
push 4  +
call sub_1002593  +
mov edi eax +
cmp edi ebx +
jz loc_1007EAA  +
push esi  +
push edi  +
push [ebp+dwMessageId]  +
push [ebp+lpSource]  +
call ds:LoadStringW  +
cmp eax ebx +
jz loc_1007E79  +
lea ecx [esi-1] +
cmp eax ecx +
jnb loc_10033FA  +
push ebx  +
push edi  +
push [ebp+arg_8]  +
push 1  +
push dword_100F01C  +
call sub_1003361  +
test eax eax +
jz loc_1007EAA  +
cmp [ebp+hMem] ebx +
jnz loc_1007EC6  +
push [ebp+arg_8]  +
push 1  +
push dword_100F01C  +
call sub_100346D  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1001910  +
test eax eax +
jz loc_100349B  +
cmp dword ptr [eax+4] 80000h +
jnz loc_100349B  +
push [ebp+arg_8]  +
push dword ptr [eax+0Ch]  +
call sub_1002F4A  +
pop ebp  +
retn 0Ch  +
xor eax eax +
jmp loc_1003497  +
***
lea edi [eax+eax] +
push edi  +
call sub_10026AF  +
mov [esi+0Ch] eax +
test eax eax +
jz loc_10034C2  +
mov [esi+4] ebx +
mov [esi+8] edi +
jmp loc_1003048  +
cmp eax edi +
jz loc_1003000  +
xor eax eax +
jmp loc_1003059  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+lpSource] 0 +
jz loc_10034F0  +
cmp [ebp+lpString] 0 +
jz loc_10034F0  +
cmp [ebp+arg_C] 1 +
jnz loc_1005FE3  +
xor eax eax +
inc eax  +
pop ebp  +
retn 10h  +
push 57h  +
call ds:SetLastError  +
jmp loc_1006047  +
***
cmp dword ptr [edi+44h] 0 +
jnz loc_1007127  +
inc ebx  +
cmp ebx [ebp+arg_0] +
jnb loc_1007127  +
mov eax [ebp+arg_4] +
push 0  +
push dword ptr [eax+ebx*4]  +
call sub_100243E  +
mov esi eax +
inc esi  +
lea eax [esi+esi] +
push eax  +
call sub_10026AF  +
mov [edi+44h] eax +
test eax eax +
jz loc_1007116  +
mov ecx [ebp+arg_4] +
push esi  +
push dword ptr [ecx+ebx*4]  +
push eax  +
call sub_10022BD  +
push 3  +
push dword ptr [edi+44h]  +
call sub_10029E7  +
jmp loc_1003993  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0A4h +
mov eax dword_100F000 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
xor ebx ebx +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
xor eax eax +
lea edi [ebp+var_8] +
mov [ebp+var_C] ebx +
mov dword ptr [ebp+Data] ebx +
mov [ebp+phkResult] ebx +
mov [ebp+var_88] ebx +
mov [ebp+dwDisposition] ebx +
stos   +
mov [ebp+var_90] ebx +
mov [ebp+lpData] ebx +
mov [ebp+var_78] ebx +
mov [ebp+var_98] ebx +
mov [ebp+var_94] ebx +
cmp [ebp+arg_0] ebx +
jz loc_1004B5D  +
cmp esi ebx +
jz loc_1004B5D  +
lea eax [ebp+var_70] +
xor edi edi +
push eax  +
inc edi  +
push edi  +
call sub_1002865  +
lea eax [ebp+var_78] +
push eax  +
lea eax [ebp+var_70] +
push eax  +
push esi  +
push [ebp+arg_0]  +
call sub_10037C9  +
test eax eax +
jz loc_1007155  +
cmp [ebp+var_78] edi +
jz loc_100717B  +
lea eax [ebp+var_70] +
push eax  +
call sub_100138A  +
mov [ebp+var_7C] eax +
cmp eax ebx +
jz loc_1007183  +
lea eax [ebp+dwDisposition] +
push eax  +
lea eax [ebp+phkResult] +
push eax  +
mov eax [ebp+var_14] +
push ebx  +
or eax 2001Fh +
push eax  +
push ebx  +
push ebx  +
push ebx  +
push [ebp+lpSubKey]  +
push [ebp+hKey]  +
call ds:RegCreateKeyExW  +
mov esi eax +
cmp esi ebx +
jnz loc_1003728  +
cmp [ebp+phkResult] ebx +
jz loc_1007191  +
cmp [ebp+lpValueName] ebx +
jz loc_1007198  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push [ebp+lpValueName]  +
push [ebp+phkResult]  +
call ds:RegQueryValueExW  +
cmp eax ebx +
jnz loc_1003AE2  +
push ebx  +
push 0CAh  +
call sub_100339E  +
push edi  +
push 0CEh  +
mov esi eax +
call sub_100339E  +
mov edi eax +
push [ebp+var_60]  +
push edi  +
push [ebp+lpValueName]  +
push esi  +
call sub_10034CE  +
cmp eax 2 +
jg loc_100368C  +
cmp eax 1 +
jnz loc_10071A5  +
mov eax [ebp+dwType] +
xor edi edi +
inc edi  +
mov [ebp+var_7C] edi +
cmp eax 3 +
jz loc_1007386  +
jle loc_1003AF9  +
cmp eax 5 +
jg loc_10071F6  +
cmp [ebp+lpString] ebx +
jz loc_1004B56  +
push 0Ah  +
pop esi  +
push 2  +
push edi  +
push offset a0x  +
push [ebp+lpString]  +
call sub_1004857  +
test eax eax +
jz loc_1004B4E  +
push ebx  +
push esi  +
push [ebp+lpString]  +
call sub_10049FF  +
test eax eax +
jz loc_1007275  +
push esi  +
push [ebp+lpString]  +
call sub_10048A8  +
mov dword ptr [ebp+Data] eax +
push 4  +
lea eax [ebp+Data] +
push eax  +
push [ebp+dwType]  +
push ebx  +
push [ebp+lpValueName]  +
push [ebp+phkResult]  +
call ds:RegSetValueExW  +
mov esi eax +
lea eax [ebp+phkResult] +
push eax  +
call sub_1001324  +
lea eax [ebp+var_70] +
push eax  +
call sub_100307D  +
cmp [ebp+var_7C] ebx +
jz loc_1007452  +
cmp esi ebx +
jnz loc_1007473  +
push ebx  +
xor esi esi +
call sub_1003151  +
push 20000h  +
call ds:__iob_func  +
add eax 20h +
push eax  +
call sub_10030DC  +
mov eax esi +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1002AF3  +
leave   +
retn 8  +
***
cmp dword ptr [edi+48h] 0 +
jnz loc_1007127  +
inc ebx  +
cmp ebx [ebp+arg_0] +
jnb loc_1007127  +
mov eax [ebp+arg_4] +
push 0  +
push dword ptr [eax+ebx*4]  +
call sub_100243E  +
mov esi eax +
inc esi  +
lea eax [esi+esi] +
push eax  +
call sub_10026AF  +
mov [edi+48h] eax +
test eax eax +
jz loc_1007116  +
mov ecx [ebp+arg_4] +
push esi  +
push dword ptr [ecx+ebx*4]  +
push eax  +
call sub_10022BD  +
jmp loc_1003993  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
xor ebx ebx +
push esi  +
push edi  +
mov [ebp+var_8] ebx +
mov [ebp+var_4] ebx +
cmp [ebp+arg_0] ebx +
jz loc_1003A17  +
mov esi [ebp+arg_4] +
cmp esi ebx +
jz loc_1003A17  +
mov edi [ebp+arg_8] +
cmp edi ebx +
jz loc_1003A17  +
cmp [ebp+arg_C] ebx +
jz loc_1003A17  +
mov eax [edi] +
cmp eax ebx +
jl loc_1003A17  +
cmp eax 0Ch +
jge loc_1003A17  +
cmp [ebp+arg_0] 3 +
jb loc_1006F59  +
push 0  +
xor ebx ebx +
inc ebx  +
push ebx  +
push offset aAdd  +
push dword ptr [esi+4]  +
call sub_100151B  +
test eax eax +
jnz loc_1003A17  +
push ebx  +
push offset a??HH  +
push dword ptr [esi+8]  +
call sub_100272D  +
cmp eax ebx +
jz loc_1006F81  +
push edi  +
push dword ptr [esi+8]  +
call sub_100236F  +
test eax eax +
jz loc_1003A1E  +
and [ebp+arg_C] 0 +
and dword ptr [edi+10h] 0 +
push 3  +
pop ebx  +
cmp [ebp+arg_0] ebx +
jbe loc_10039A7  +
mov eax [ebp+arg_4] +
push 0  +
push 1  +
lea esi [eax+ebx*4] +
push offset aV  +
push dword ptr [esi]  +
call sub_100151B  +
test eax eax +
jz loc_1003516  +
push 0  +
push 1  +
push offset aV_0  +
push dword ptr [esi]  +
call sub_100151B  +
test eax eax +
jz loc_1003516  +
push 0  +
push 1  +
push offset aVe  +
push dword ptr [esi]  +
call sub_100151B  +
test eax eax +
jz loc_10070CA  +
push 0  +
push 1  +
push offset aVe_0  +
push dword ptr [esi]  +
call sub_100151B  +
test eax eax +
jz loc_10070CA  +
push 0  +
push 1  +
push offset aT  +
push dword ptr [esi]  +
call sub_100151B  +
test eax eax +
jz loc_10039D4  +
push 0  +
push 1  +
push offset aT_0  +
push dword ptr [esi]  +
call sub_100151B  +
test eax eax +
jz loc_10039D4  +
push 0  +
push 1  +
push offset aS_0  +
push dword ptr [esi]  +
call sub_100151B  +
test eax eax +
jz loc_1007048  +
push 0  +
push 1  +
push offset aS_1  +
push dword ptr [esi]  +
call sub_100151B  +
test eax eax +
jz loc_1007048  +
push 0  +
push 1  +
push offset aD  +
push dword ptr [esi]  +
call sub_100151B  +
test eax eax +
jz loc_100377A  +
push 0  +
push 1  +
push offset aD_0  +
push dword ptr [esi]  +
call sub_100151B  +
test eax eax +
jz loc_100377A  +
push 0  +
push 1  +
push offset aF  +
push dword ptr [esi]  +
call sub_100151B  +
test eax eax +
jnz loc_1006FB0  +
xor eax eax +
inc eax  +
cmp [edi+10h] eax +
jz loc_1007127  +
mov [edi+10h] eax +
inc ebx  +
cmp ebx [ebp+arg_0] +
jb loc_1003876  +
cmp [ebp+var_4] 1 +
jz loc_10070E4  +
cmp dword ptr [edi+44h] 0 +
jz loc_10070F0  +
cmp dword ptr [edi+48h] 0 +
jz loc_1007104  +
xor eax eax +
cmp [ebp+arg_C] eax +
setz al  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
xor esi esi +
inc esi  +
cmp [ebp+var_8] esi +
jz loc_1007127  +
inc ebx  +
cmp ebx [ebp+arg_0] +
jnb loc_1007127  +
mov eax [ebp+arg_4] +
lea eax [eax+ebx*4] +
push dword ptr [eax]  +
mov [ebp+arg_8] eax +
call sub_1003A27  +
mov [edi+2Ch] eax +
cmp eax 0FFFFFFFFh +
jz loc_1007099  +
cmp [ebp+var_4] esi +
jz loc_10070BE  +
mov [ebp+var_8] esi +
jmp loc_1003993  +
push 57h  +
call sub_1003151  +
xor eax eax +
jmp loc_10039C3  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
or [ebp+var_4] 0FFFFFFFFh +
push ebx  +
xor ebx ebx +
cmp [ebp+lpSrch] ebx +
jz loc_100609D  +
push edi  +
push [ebp+lpSrch]  +
call ds:StrDupW  +
mov edi eax +
cmp edi ebx +
jz loc_10060AD  +
push esi  +
push 3  +
push ebx  +
push edi  +
call sub_1002A02  +
push ebx  +
xor esi esi +
inc esi  +
push esi  +
push offset aReg_sz  +
push edi  +
call sub_100151B  +
test eax eax +
jz loc_10060BD  +
push ebx  +
push esi  +
push offset aReg_expand_sz  +
push edi  +
call sub_100151B  +
test eax eax +
jz loc_1003AF0  +
push ebx  +
push esi  +
push offset aReg_multi_sz  +
push edi  +
call sub_100151B  +
test eax eax +
jz loc_10060C5  +
push ebx  +
push esi  +
push offset aReg_binary  +
push edi  +
call sub_100151B  +
test eax eax +
jz loc_10060D1  +
push ebx  +
push esi  +
push offset aReg_dword  +
push edi  +
call sub_100151B  +
test eax eax +
jnz loc_10060DD  +
mov [ebp+var_4] 4 +
push edi  +
call ds:LocalFree  +
push ebx  +
call ds:SetLastError  +
mov eax [ebp+var_4] +
pop esi  +
pop edi  +
pop ebx  +
leave   +
retn 4  +
cmp eax 2 +
jz loc_10036A7  +
jmp loc_10071CE  +
mov [ebp+var_4] 2 +
jmp loc_1003ACA  +
***
cmp [ebp+lpString] ebx +
jz loc_1004B56  +
push ebx  +
push [ebp+lpString]  +
call sub_100243E  +
lea eax [eax+eax+2] +
push eax  +
push [ebp+lpString]  +
mov dword ptr [ebp+Data] eax +
jmp loc_1003716  +
***
sub edi 0 +
jz loc_1003B59  +
dec edi  +
jnz loc_1007A79  +
push 0FFFFFFF5h  +
call ds:GetStdHandle  +
test eax eax +
jz loc_100150D  +
cmp eax 0FFFFFFFFh +
jz loc_100150D  +
lea ecx [ebp+Mode] +
push ecx  +
push eax  +
call ds:GetConsoleMode  +
neg eax  +
sbb eax eax +
neg eax  +
jmp loc_100150F  +
push 0FFFFFFF6h  +
jmp loc_1003B2C  +
push 6  +
call ds:SetLastError  +
jmp loc_100150D  +
***
mov esi ds:__iob_func +
call esi  +
add eax 20h +
cmp [ebp+hConsoleOutput] eax +
jnz loc_1007C54  +
push 0FFFFFFF5h  +
call ds:GetStdHandle  +
push edi  +
push ebx  +
mov [ebp+hConsoleOutput] eax +
mov [ebp+NumberOfCharsWritten] edi +
call sub_100243E  +
push edi  +
lea ecx [ebp+NumberOfCharsWritten] +
push ecx  +
push eax  +
push ebx  +
push [ebp+hConsoleOutput]  +
mov ebx ds:WriteConsoleW +
mov [ebp+var_10] eax +
call ebx  +
test eax eax +
jz loc_1007C69  +
mov eax [ebp+var_10] +
cmp eax [ebp+NumberOfCharsWritten] +
jz loc_1002574  +
jmp loc_1007C69  +
call ds:__iob_func  +
jmp loc_1007D4B  +
call ds:GetLastError  +
jmp loc_1007D58  +
***
push edi  +
push ebx  +
call sub_1003C7D  +
jmp loc_1001F70  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 84h +
mov eax dword_100F000 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
xor edi edi +
mov [ebp+phkResult] edi +
mov [ebp+dwErrCode] edi +
cmp [ebp+arg_0] edi +
jz loc_1005CBC  +
cmp esi edi +
jz loc_1005CBC  +
lea eax [ebp+var_68] +
push eax  +
push edi  +
call sub_1002865  +
lea eax [ebp+dwErrCode] +
push eax  +
lea eax [ebp+var_68] +
push eax  +
push esi  +
push [ebp+arg_0]  +
call sub_100437D  +
test eax eax +
jz loc_1006EB8  +
cmp [ebp+dwErrCode] 1 +
jz loc_1006EDF  +
lea eax [ebp+var_68] +
push eax  +
call sub_100138A  +
test eax eax +
jz loc_1006EE7  +
lea eax [ebp+phkResult] +
push eax  +
mov eax [ebp+var_C] +
or eax 20019h +
push eax  +
push edi  +
push [ebp+lpSubKey]  +
push [ebp+hKey]  +
call ds:RegOpenKeyExW  +
cmp eax edi +
jnz loc_1006EF5  +
mov esi ds:__iob_func +
push ebx  +
mov ebx offset asc_1003C30 +
push ebx  +
call esi  +
add eax 20h +
push eax  +
call sub_100245F  +
xor eax eax +
lea edi [ebp+dwIndex] +
stos   +
stos   +
stos   +
stos   +
stos   +
xor edi edi +
cmp [ebp+var_18] edi +
jnz loc_1005C80  +
cmp [ebp+lpString] edi +
jz loc_1005C80  +
cmp [ebp+var_14] edi +
jnz loc_1005C80  +
cmp [ebp+var_50] edi +
jnz loc_1005C80  +
push 0  +
push [ebp+lpString]  +
inc edi  +
mov [ebp+dwIndex] edi +
call sub_100243E  +
test eax eax +
jz loc_1003D89  +
push 0  +
push edi  +
push offset String  +
push [ebp+lpString]  +
call sub_10046F1  +
cmp eax 0FFFFFFFFh +
jnz loc_1006EF8  +
lea eax [ebp+dwIndex] +
push eax  +
lea eax [ebp+var_68] +
push eax  +
push [ebp+lpString]  +
push [ebp+var_28]  +
push [ebp+phkResult]  +
call sub_1003DEF  +
push ebx  +
mov [ebp+dwErrCode] eax +
xor edi edi +
call esi  +
add eax 20h +
push eax  +
call sub_100245F  +
xor eax eax +
xor ebx ebx +
cmp [ebp+dwErrCode] eax +
jnz loc_1006F2A  +
cmp edi eax +
jnz loc_100540D  +
lea eax [ebp+phkResult] +
push eax  +
call sub_1001324  +
mov eax ebx +
pop ebx  +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_1002AF3  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 30h +
push ebx  +
xor ebx ebx +
push esi  +
push edi  +
mov [ebp+var_C] ebx +
mov [ebp+var_4] ebx +
mov [ebp+var_8] ebx +
cmp [ebp+arg_0] ebx +
jz loc_10046E5  +
cmp [ebp+arg_4] ebx +
jz loc_10046E5  +
cmp [ebp+lpString] ebx +
jz loc_10046E5  +
cmp [ebp+arg_C] ebx +
jz loc_10046E5  +
cmp [ebp+arg_10] ebx +
jz loc_10046E5  +
mov esi ds:RegGetValueW +
lea eax [ebp+var_4] +
push eax  +
push ebx  +
push ebx  +
push 0FFFFh  +
push [ebp+lpString]  +
push ebx  +
push [ebp+arg_0]  +
call esi  +
mov edi eax +
cmp edi ebx +
jnz loc_1006D04  +
mov eax [ebp+var_4] +
mov ecx eax +
and ecx 1 +
add eax ecx +
mov [ebp+var_4] eax +
add eax 2 +
push eax  +
call sub_10026AF  +
mov [ebp+var_8] eax +
cmp eax ebx +
jz loc_1006D35  +
push eax  +
call sub_1002085  +
mov ecx [ebp+var_8] +
cmp eax ebx +
jz loc_1003E8A  +
mov [ecx] bl +
inc ecx  +
dec eax  +
jnz loc_1003E84  +
lea eax [ebp+var_4] +
push eax  +
push [ebp+var_8]  +
lea eax [ebp+var_C] +
push eax  +
push 1000FFFFh  +
push [ebp+lpString]  +
push ebx  +
push [ebp+arg_0]  +
call esi  +
mov edi eax +
cmp edi ebx +
jnz loc_1006D39  +
mov edi [ebp+arg_10] +
mov esi [ebp+arg_C] +
cmp [edi+8] ebx +
jnz loc_1003EF9  +
test byte ptr [esi+4Ch] 4 +
jz loc_1003EF9  +
push esi  +
push [ebp+var_4]  +
push [ebp+var_C]  +
push [ebp+var_8]  +
call sub_100569B  +
cmp eax 1 +
jz loc_1006D71  +
cmp eax ebx +
jnz loc_1003EF9  +
push 490h  +
call ds:SetLastError  +
xor edi edi +
lea eax [ebp+var_8] +
push eax  +
call sub_1002024  +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 14h  +
xor eax eax +
inc eax  +
cmp [edi+0Ch] eax +
jz loc_1006D79  +
cmp [edi] eax +
jnz loc_1003F27  +
push [ebp+arg_4]  +
push offset Source  +
push eax  +
push eax  +
call ds:__iob_func  +
add eax 20h +
push eax  +
call sub_1004105  +
add esp 14h +
mov [edi] ebx +
cmp [esi+44h] ebx +
jnz loc_10046DD  +
cmp [esi+54h] ebx +
jnz loc_10046DD  +
xor eax eax +
cmp dword ptr [esi+24h] 1 +
push 9  +
pop ecx  +
lea edi [ebp+String] +
stos   +
mov eax [ebp+lpString] +
mov [ebp+var_24] eax +
mov eax [ebp+var_C] +
mov dword ptr [ebp+String] eax +
mov eax [ebp+var_8] +
mov [ebp+var_28] eax +
mov eax [ebp+var_4] +
mov [ebp+var_2C] eax +
lea eax [esi+30h] +
mov [ebp+var_14] offset asc_1003F8C +
mov [ebp+var_20] ebx +
mov [ebp+var_18] 4 +
mov [ebp+var_10] eax +
jz loc_1006D8E  +
lea eax [ebp+String] +
push eax  +
call sub_1003F9B  +
jmp loc_1003EE5  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+var_4] 0 +
push edi  +
mov edi [ebp+lpString] +
test edi edi +
jz loc_1006213  +
mov eax [edi+14h] +
and eax 0Fh +
cmp al 0Fh +
jz loc_1006222  +
mov eax [edi+18h] +
push esi  +
mov esi ds:__iob_func +
test eax eax +
jz loc_1003FEA  +
push offset asc_1003C34  +
push eax  +
push offset aS_3  +
push 1  +
push 1  +
call esi  +
add eax 20h +
push eax  +
call sub_1004105  +
add esp 18h +
mov eax [edi+14h] +
push ebx  +
test al 1 +
jnz loc_1004048  +
mov ebx [edi+0Ch] +
test ebx ebx +
jz loc_10046C1  +
cmp dword ptr [edi+1Ch] 0 +
jz loc_100400B  +
test al 10h +
jnz loc_10046C1  +
push 0  +
push ebx  +
call sub_100243E  +
test eax eax +
jz loc_100622A  +
test byte ptr [edi+14h] 10h +
jnz loc_100623C  +
push ebx  +
call esi  +
add eax 20h +
push eax  +
call sub_100245F  +
mov eax [edi+1Ch] +
test eax eax +
jz loc_10046AD  +
push eax  +
call esi  +
add eax 20h +
push eax  +
call sub_100245F  +
mov eax [edi+14h] +
test al 2 +
jnz loc_1004085  +
test al 20h +
jnz loc_1006265  +
push dword ptr [edi]  +
push 0  +
push 0  +
call sub_1004217  +
push eax  +
call esi  +
add eax 20h +
push eax  +
call sub_100245F  +
mov eax [edi+1Ch] +
test eax eax +
jz loc_10046B7  +
push eax  +
call esi  +
add eax 20h +
push eax  +
call sub_100245F  +
test byte ptr [edi+14h] 4 +
jnz loc_10040DE  +
mov ebx [edi+8] +
mov ecx [edi+4] +
mov [ebp+lpString] ecx +
test ebx ebx +
jz loc_10046C1  +
test ecx ecx +
jz loc_10040DE  +
mov eax [edi] +
test eax eax +
jbe loc_10046CE  +
cmp eax 2 +
jbe sub_100469C  +
cmp eax 3 +
jbe loc_10046CE  +
cmp eax 5 +
ja loc_1006296  +
push dword ptr [ebx]  +
push offset a0xX  +
push 1  +
push 1  +
call esi  +
add eax 20h +
push eax  +
call sub_1004105  +
add esp 14h +
push offset asc_1003C30  +
call esi  +
add eax 20h +
push eax  +
call sub_100245F  +
xor eax eax +
inc eax  +
pop ebx  +
pop esi  +
pop edi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
xor ebx ebx +
push edi  +
cmp [ebp+lpSource] ebx +
jz loc_100417B  +
cmp [ebp+hConsoleOutput] ebx +
jz loc_100417B  +
cmp [ebp+arg_4] ebx +
jz loc_10080B2  +
cmp [ebp+arg_8] ebx +
jz loc_10080BA  +
push 1  +
add ebx 800h +
push ebx  +
push 0  +
lea eax [ebp+arg_10] +
push 3  +
mov [ebp+Arguments] eax +
call sub_1002593  +
mov edi eax +
test edi edi +
jz loc_1008133  +
push [ebp+Arguments]  +
push [ebp+lpSource]  +
push ebx  +
push edi  +
call sub_100418B  +
and [ebp+Arguments] 0 +
cmp eax 8007007Ah +
jz loc_100412C  +
test eax eax +
jl loc_1008149  +
push edi  +
push [ebp+hConsoleOutput]  +
call sub_100245F  +
pop edi  +
pop ebx  +
leave   +
retn   +
call ds:GetLastError  +
jmp loc_100814F  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
cmp [ebp+arg_4] eax +
jz loc_10041BD  +
cmp [ebp+arg_4] 7FFFFFFFh +
ja loc_10041BD  +
test eax eax +
jl loc_10041B9  +
mov eax [ebp+arg_4] +
push edi  +
push [ebp+arg_C]  +
mov edi [ebp+arg_0] +
push [ebp+arg_8]  +
push 0  +
call sub_10041C9  +
pop edi  +
pop ebp  +
retn 10h  +
mov eax 80070057h +
jmp loc_10041A0  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push [ebp+arg_8]  +
mov esi eax +
push [ebp+arg_4]  +
xor ebx ebx +
dec esi  +
push esi  +
push edi  +
call ds:_vsnwprintf  +
add esp 10h +
test eax eax +
jl loc_1004203  +
cmp eax esi +
ja loc_1004203  +
jz loc_1004208  +
mov ecx [ebp+arg_0] +
test ecx ecx +
jnz loc_1007B8F  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 0Ch  +
mov ebx 8007007Ah +
xor eax eax +
mov [edi+esi*2] ax +
mov eax esi +
jmp loc_10041F0  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
xor eax eax +
push edi  +
mov ecx [ebp+arg_8] +
mov edi ds:SetLastError +
cmp ecx ds:dword_1004270[eax*8] +
jz loc_100423D  +
inc eax  +
cmp eax 0Ch +
jb loc_1004220  +
jmp loc_10061C9  +
mov esi ds:off_1004274[eax*8] +
test esi esi +
jz loc_10061C9  +
cmp [ebp+arg_0] 0 +
jnz loc_10061E9  +
mov edi [ebp+arg_4] +
test edi edi +
jnz loc_10061DA  +
pop edi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
mov ecx [ebp+arg_0] +
push ebx  +
xor ebx ebx +
push esi  +
push edi  +
mov [ebp+lpString] ebx +
mov [ebp+var_10] ebx +
cmp ecx ebx +
jz loc_1005BD4  +
cmp [ebp+arg_4] ebx +
jz loc_1005BD4  +
mov esi [ebp+arg_8] +
cmp esi ebx +
jz loc_1005BD4  +
cmp [ebp+dwErrCode] ebx +
jz loc_1005BD4  +
mov eax [esi] +
cmp eax ebx +
jl loc_1005BD4  +
cmp eax 0Ch +
jge loc_1005BD4  +
add ecx 0FFFFFFFDh +
cmp ecx 0Ah +
ja loc_1006CA8  +
mov eax [ebp+arg_4] +
push ebx  +
xor edi edi +
inc edi  +
push edi  +
push offset aQuery_0  +
push dword ptr [eax+4]  +
call sub_100151B  +
test eax eax +
jnz loc_1005BD4  +
mov eax [ebp+arg_4] +
push edi  +
push offset a??HH_0  +
push dword ptr [eax+8]  +
call sub_100272D  +
cmp eax edi +
jz loc_10069D6  +
mov eax [ebp+arg_4] +
push esi  +
push dword ptr [eax+8]  +
call sub_100236F  +
test eax eax +
jz loc_1005BDB  +
push 3  +
pop eax  +
mov [ebp+arg_8] edi +
mov [ebp+dwErrCode] ebx +
mov [esi+4Ch] ebx +
mov [esi+20h] ebx +
mov [esi+1Ch] ebx +
mov [esi+18h] ebx +
mov [esi+24h] ebx +
mov [ebp+var_4] eax +
cmp [ebp+arg_0] eax +
jbe loc_100455D  +
mov [ebp+var_8] 4 +
mov eax [ebp+arg_4] +
mov ecx [ebp+var_4] +
push ebx  +
push 1  +
lea edi [eax+ecx*4] +
push offset aF  +
push dword ptr [edi]  +
call sub_100151B  +
test eax eax +
jz loc_1005B66  +
push ebx  +
push 1  +
push offset aF_0  +
push dword ptr [edi]  +
call sub_100151B  +
test eax eax +
jz loc_1005B66  +
push ebx  +
push 1  +
push offset aK  +
push dword ptr [edi]  +
call sub_100151B  +
test eax eax +
jz loc_1005BAB  +
push ebx  +
push 1  +
push offset aK_0  +
push dword ptr [edi]  +
call sub_100151B  +
test eax eax +
jz loc_1005BAB  +
push ebx  +
push 1  +
push offset aV  +
push dword ptr [edi]  +
call sub_100151B  +
test eax eax +
jnz sub_1005A0D  +
cmp [esi+44h] ebx +
jnz loc_1006C24  +
test byte ptr [esi+4Ch] 2 +
jnz loc_1006C24  +
mov eax [ebp+var_8] +
cmp eax [ebp+arg_0] +
jnb loc_1004539  +
mov ecx [ebp+var_4] +
mov eax [ebp+arg_4] +
lea eax [eax+ecx*4+4] +
push ebx  +
push dword ptr [eax]  +
mov [ebp+var_14] eax +
call sub_100243E  +
mov edi eax +
cmp edi 2 +
jb loc_100450E  +
mov eax [ebp+var_14] +
mov eax [eax] +
cmp word ptr [eax] 2Fh +
jz loc_1006C01  +
inc [ebp+var_4]  +
inc [ebp+var_8]  +
inc edi  +
lea eax [edi+edi] +
push eax  +
call sub_10026AF  +
mov [esi+44h] eax +
cmp eax ebx +
jz loc_1006BF5  +
mov ecx [ebp+arg_4] +
mov edx [ebp+var_4] +
push edi  +
push dword ptr [ecx+edx*4]  +
push eax  +
call sub_10022BD  +
cmp [esi+44h] ebx +
jz loc_1006C16  +
inc [ebp+var_4]  +
mov eax [ebp+var_4] +
inc [ebp+var_8]  +
cmp eax [ebp+arg_0] +
jb loc_100444C  +
cmp [ebp+lpString] ebx +
jnz loc_1005BE2  +
cmp [esi+4Ch] ebx +
jnz loc_1006C42  +
cmp dword ptr [esi+20h] 1 +
jz loc_1006C42  +
cmp dword ptr [esi+1Ch] 1 +
jz loc_1006C42  +
mov eax [esi+44h] +
cmp eax ebx +
jz loc_10045B0  +
push ebx  +
push eax  +
call sub_100243E  +
test eax eax +
jz loc_10045B0  +
push dword ptr [esi+44h]  +
call sub_10045E7  +
mov edi eax +
cmp edi ebx +
jz loc_1006C57  +
push dword ptr [esi+44h]  +
call sub_1002085  +
push eax  +
push edi  +
push dword ptr [esi+44h]  +
call sub_10022BD  +
mov eax [esi+50h] +
cmp eax ebx +
jnz loc_10053E6  +
cmp [ebp+dwErrCode] ebx +
jnz loc_1005BC6  +
xor eax eax +
cmp [ebp+dwErrCode] ebx +
setz al  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
mov esi [ebp+lpString] +
push edi  +
test esi esi +
jz loc_100544B  +
push 0  +
push esi  +
call sub_100243E  +
mov edi eax +
mov [ebp+var_4] edi +
test edi edi +
jz loc_100544B  +
xor ebx ebx +
inc ebx  +
push ebx  +
lea eax [edi+0Ah] +
push eax  +
push 0  +
push 6  +
call sub_1002593  +
test eax eax +
jz loc_1008162  +
and [ebp+lpString] 0 +
mov cx [esi] +
mov [eax] cx +
cmp edi ebx +
jbe loc_1004664  +
mov edx eax +
movzx ecx word ptr [esi+ebx*2] +
movzx edi cx +
cmp edi 2Ah +
jz loc_100543C  +
cmp edi 3Fh +
jz loc_100543C  +
inc [ebp+lpString]  +
mov edx [ebp+lpString] +
lea edx [eax+edx*2] +
mov [edx] cx +
inc ebx  +
cmp ebx [ebp+var_4] +
jb loc_1004639  +
mov edx [ebp+lpString] +
xor ecx ecx +
mov [eax+edx*2+2] cx +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
add eax 20h +
push eax  +
call sub_100245F  +
jmp loc_10040DE  +
***
push offset asc_1003C34  +
jmp loc_100403D  +
push offset asc_1003C34  +
jmp loc_100407A  +
push 57h  +
call ds:SetLastError  +
jmp loc_100628F  +
xor edi edi +
test ecx ecx +
ja loc_1006321  +
jmp loc_10040DE  +
***
inc dword ptr [edi+10h]  +
jmp loc_1003F39  +
push 57h  +
jmp loc_1006D97  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
xor esi esi +
push edi  +
cmp ebx esi +
jz loc_1004764  +
mov edi [ebp+lpString] +
cmp edi esi +
jz loc_1004764  +
push esi  +
push edi  +
call sub_100243E  +
mov [ebp+arg_0] eax +
cmp eax esi +
jz loc_100474F  +
push esi  +
push ebx  +
call sub_100243E  +
test eax eax +
jz loc_100474F  +
push esi  +
push ebx  +
call sub_100243E  +
cmp [ebp+arg_C] eax +
jnb loc_100474F  +
cmp [ebp+arg_0] esi +
jbe loc_100474F  +
push [ebp+arg_C]  +
movzx eax word ptr [edi+esi*2] +
push [ebp+arg_8]  +
push eax  +
push ebx  +
call sub_10019F2  +
cmp eax 0FFFFFFFFh +
jnz loc_100475D  +
inc esi  +
cmp esi [ebp+arg_0] +
jb loc_1004733  +
push 490h  +
call ds:SetLastError  +
or eax 0FFFFFFFFh +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 10h  +
call ds:GetLastError  +
jmp loc_1007BAB  +
***
push 0  +
push edi  +
push offset aHkcr  +
push ebx  +
call sub_100151B  +
test eax eax +
jz loc_10064F2  +
push 0  +
push edi  +
push offset aHkey_classes_r  +
push ebx  +
call sub_100151B  +
test eax eax +
jz loc_10064F2  +
push 0  +
push edi  +
push offset aHkcc  +
push ebx  +
call sub_100151B  +
test eax eax +
jz loc_10064DE  +
push 0  +
push edi  +
push offset aHkey_current_c  +
push ebx  +
call sub_100151B  +
test eax eax +
jz loc_10064DE  +
push 0  +
push edi  +
push offset aHklm  +
push ebx  +
call sub_100151B  +
test eax eax +
jnz loc_1006454  +
push [ebp+arg_4]  +
mov dword ptr [esi+4] 80000002h +
push offset aHkey_local_mac  +
push [ebp+var_4]  +
call sub_10022BD  +
jmp loc_10021EA  +
push 57h  +
jmp loc_10065D3  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+lpString1] 0 +
jz loc_1004898  +
cmp [ebp+lpString2] 0 +
jz loc_1004898  +
mov eax [ebp+cchCount2] +
xor ecx ecx +
cmp [ebp+arg_8] 1 +
setz cl  +
test eax eax +
jz loc_1007A8E  +
push eax  +
push [ebp+lpString2]  +
push eax  +
push [ebp+lpString1]  +
push ecx  +
call ds:GetThreadLocale  +
push eax  +
call ds:CompareStringW  +
dec eax  +
dec eax  +
pop ebp  +
retn 10h  +
call ds:GetLastError  +
jmp loc_1007A96  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax [ebp+arg_4] +
push ebx  +
xor ebx ebx +
add eax 0FFFFFFFEh +
push esi  +
push edi  +
mov [ebp+var_4] ebx +
cmp eax 22h +
ja loc_10049EB  +
cmp [ebp+lpString] ebx +
jz loc_10049EB  +
call sub_100160A  +
test eax eax +
jz loc_10049F6  +
call sub_100160A  +
test eax eax +
jz loc_10049E0  +
push 3  +
pop esi  +
push esi  +
push dword_100F01C  +
call sub_1002DCA  +
mov edi eax +
cmp edi ebx +
jbe loc_1007ED7  +
push ebx  +
push esi  +
push dword_100F01C  +
call sub_1002D71  +
mov edi offset aBuffer +
test eax eax +
jz loc_1007F24  +
push ebx  +
push esi  +
push dword_100F01C  +
call sub_100189B  +
mov esi eax +
cmp esi ebx +
jz loc_10049E0  +
push 7  +
push edi  +
push esi  +
call ds:_memicmp  +
add esp 0Ch +
test eax eax +
jnz loc_10049E0  +
push ebx  +
push [ebp+lpString]  +
call sub_100243E  +
mov edi eax +
mov eax [esi+8] +
inc edi  +
cmp edi eax +
ja loc_1007F10  +
cmp edi 100h +
ja loc_1007F05  +
cmp [esi+0Ch] ebx +
jz loc_10049E0  +
push edi  +
push [ebp+lpString]  +
push dword ptr [esi+0Ch]  +
call sub_10022BD  +
mov esi [esi+0Ch] +
cmp esi ebx +
jz loc_10049E0  +
push 3  +
push ebx  +
push esi  +
call sub_1002A02  +
push ebx  +
push esi  +
call sub_100243E  +
test eax eax +
jz loc_10049EB  +
mov edi ds:_errno +
call edi  +
push [ebp+arg_4]  +
mov [eax] ebx +
cmp word ptr [esi] 2Dh +
lea eax [ebp+var_4] +
push eax  +
push esi  +
jz loc_1007F91  +
call ds:wcstoul  +
add esp 0Ch +
mov esi eax +
call edi  +
cmp dword ptr [eax] 22h +
jz loc_10049EB  +
cmp [ebp+var_4] ebx +
jz loc_10049D7  +
push ebx  +
push [ebp+var_4]  +
call sub_100243E  +
test eax eax +
jnz loc_10049EB  +
mov eax esi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
call ds:GetLastError  +
jmp loc_1007F85  +
call ds:GetLastError  +
jmp loc_1007F9C  +
xor eax eax +
jmp loc_10049D9  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax [ebp+arg_4] +
push ebx  +
xor ebx ebx +
add eax 0FFFFFFFEh +
push esi  +
push edi  +
mov [ebp+var_4] ebx +
cmp eax 22h +
ja loc_1004B3F  +
cmp [ebp+lpString] ebx +
jz loc_1004B3F  +
call sub_100160A  +
test eax eax +
jz loc_1004B34  +
push 3  +
pop esi  +
push esi  +
push dword_100F01C  +
call sub_1002DCA  +
mov edi eax +
cmp edi ebx +
jbe loc_1007FB1  +
push ebx  +
push esi  +
push dword_100F01C  +
call sub_1002D71  +
mov edi offset aBuffer +
test eax eax +
jz loc_1007FFE  +
push ebx  +
push esi  +
push dword_100F01C  +
call sub_100189B  +
mov esi eax +
cmp esi ebx +
jz loc_1004B34  +
push 7  +
push edi  +
push esi  +
call ds:_memicmp  +
add esp 0Ch +
test eax eax +
jnz loc_1004B34  +
push ebx  +
push [ebp+lpString]  +
call sub_100243E  +
mov edi eax +
mov eax [esi+8] +
inc edi  +
cmp edi eax +
ja loc_1007FEA  +
cmp edi 100h +
ja loc_1007FDF  +
cmp [esi+0Ch] ebx +
jz loc_1004B34  +
push edi  +
push [ebp+lpString]  +
push dword ptr [esi+0Ch]  +
call sub_10022BD  +
mov esi [esi+0Ch] +
cmp esi ebx +
jz loc_1004B34  +
push 3  +
push ebx  +
push esi  +
call sub_1002A02  +
push ebx  +
push esi  +
call sub_100243E  +
test eax eax +
jz loc_1004B4A  +
cmp [ebp+arg_8] ebx +
jnz loc_1004AEC  +
cmp word ptr [esi] 2Dh +
jz loc_1004B4A  +
mov edi ds:_errno +
call edi  +
cmp [ebp+arg_8] 1 +
push [ebp+arg_4]  +
mov [eax] ebx +
lea eax [ebp+var_4] +
push eax  +
push esi  +
jz loc_100806B  +
call ds:wcstoul  +
add esp 0Ch +
call edi  +
cmp dword ptr [eax] 22h +
jz loc_1004B4A  +
cmp [ebp+var_4] ebx +
jz loc_1004B2A  +
push ebx  +
push [ebp+var_4]  +
call sub_100243E  +
test eax eax +
jnz loc_1004B4A  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
call ds:GetLastError  +
jmp loc_100805F  +
call ds:GetLastError  +
jmp loc_1008076  +
xor eax eax +
jmp loc_1004B2D  +
***
push 10h  +
pop esi  +
jmp loc_10036EC  +
push 57h  +
jmp loc_10073B7  +
push 57h  +
call ds:SetLastError  +
jmp loc_1007495  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
xor ebx ebx +
push esi  +
push edi  +
cmp [ebp+arg_0] ebx +
jz loc_100504A  +
mov edi [ebp+arg_4] +
cmp edi ebx +
jz loc_100504A  +
cmp [ebp+lpString2] ebx +
jz loc_100504A  +
mov esi [ebp+arg_C] +
cmp esi ebx +
jz loc_100504A  +
cmp [ebp+arg_10] ebx +
jz loc_100504A  +
mov eax [esi] +
cmp eax ebx +
jl loc_100504A  +
cmp eax 0Ch +
jge loc_100504A  +
cmp [ebp+arg_0] 3 +
jb loc_1005042  +
push 1  +
push offset a??HH  +
push dword ptr [edi+8]  +
call sub_100272D  +
xor ecx ecx +
inc ecx  +
cmp eax ecx +
jz loc_100666E  +
mov eax [esi] +
cmp eax 6 +
jz loc_10066AE  +
cmp eax 5 +
jnz loc_1004BFF  +
mov edx [ebp+arg_0] +
add edx 0FFFFFFFCh +
cmp edx ecx +
ja loc_1006680  +
cmp eax 4 +
jnz loc_1004C17  +
cmp [ebp+arg_0] eax +
jb loc_1006680  +
cmp [ebp+arg_0] 6 +
ja loc_1006680  +
push ebx  +
push ecx  +
push [ebp+lpString2]  +
push dword ptr [edi+4]  +
call sub_100151B  +
test eax eax +
jnz loc_100504A  +
push esi  +
push dword ptr [edi+8]  +
call sub_100236F  +
test eax eax +
jz loc_1005051  +
cmp dword ptr [esi] 6 +
jz loc_10066BA  +
push ebx  +
push dword ptr [edi+0Ch]  +
call sub_100243E  +
mov edi eax +
inc edi  +
lea eax [edi+edi] +
push eax  +
call sub_10026AF  +
mov [esi+44h] eax +
cmp eax ebx +
jz loc_10066D2  +
mov ecx [ebp+arg_4] +
push edi  +
push dword ptr [ecx+0Ch]  +
push eax  +
call sub_10022BD  +
push 3  +
push dword ptr [esi+44h]  +
call sub_10029E7  +
push ebx  +
push dword ptr [esi+44h]  +
call sub_100243E  +
test eax eax +
jz loc_1006680  +
cmp dword ptr [esi] 6 +
jz loc_1004C9D  +
cmp [ebp+arg_0] 5 +
jnb loc_100500A  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push esi  +
lea eax [ebp+hObject] +
push eax  +
xor esi esi +
push 28h  +
mov [ebp+hObject] esi +
call ds:GetCurrentProcess  +
push eax  +
call ds:OpenProcessToken  +
test eax eax +
jz loc_1006774  +
lea eax [ebp+NewState.Privileges] +
push eax  +
push [ebp+lpName]  +
push [ebp+lpSystemName]  +
call ds:LookupPrivilegeValueW  +
test eax eax +
jz loc_100677F  +
mov eax [ebp+arg_8] +
push esi  +
push esi  +
push esi  +
mov [ebp+NewState.Privileges.Attributes] eax +
lea eax [ebp+NewState] +
push eax  +
push esi  +
push [ebp+hObject]  +
mov [ebp+NewState.PrivilegeCount] 1 +
call ds:AdjustTokenPrivileges  +
push [ebp+hObject]  +
test eax eax +
jz loc_1006782  +
call ds:CloseHandle  +
xor eax eax +
pop esi  +
leave   +
retn 0Ch  +
***
push edi  +
push ebx  +
call sub_1004D34  +
jmp loc_1001F70  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 70h +
mov eax dword_100F000 +
xor eax ebp +
mov [ebp+var_4] eax +
and [ebp+phkResult] 0 +
and [ebp+var_70] 0 +
cmp [ebp+arg_0] 0 +
push esi  +
mov esi [ebp+arg_4] +
jz loc_1004E43  +
test esi esi +
jz loc_1004E43  +
lea eax [ebp+var_68] +
push eax  +
push 5  +
call sub_1002865  +
lea eax [ebp+var_70] +
push eax  +
lea eax [ebp+var_68] +
push eax  +
push offset aRestore  +
push esi  +
push [ebp+arg_0]  +
call sub_1004B6F  +
test eax eax +
jz loc_10068B3  +
xor esi esi +
inc esi  +
cmp [ebp+var_70] esi +
jz loc_10068DA  +
lea eax [ebp+var_68] +
push eax  +
call sub_100138A  +
test eax eax +
jz loc_10068E5  +
lea eax [ebp+phkResult] +
push eax  +
mov eax [ebp+var_C] +
or eax 0F003Fh +
push eax  +
push 0  +
push [ebp+lpSubKey]  +
push [ebp+hKey]  +
call ds:RegOpenKeyExW  +
mov esi eax +
test esi esi +
jnz loc_1004E02  +
push 2  +
push offset Name  +
push [ebp+lpSystemName]  +
call sub_1004CAC  +
mov esi eax +
test esi esi +
jnz loc_1004DF9  +
push 8  +
push [ebp+lpFile]  +
push [ebp+phkResult]  +
call ds:RegRestoreKeyW  +
mov esi eax +
cmp esi 57h +
jz loc_1006902  +
lea eax [ebp+phkResult] +
push eax  +
call sub_1001324  +
push esi  +
call sub_1003151  +
test esi esi +
jnz loc_100690A  +
push 20000h  +
call ds:__iob_func  +
add eax 20h +
push eax  +
call sub_10030DC  +
lea eax [ebp+var_68] +
push eax  +
call sub_100307D  +
xor eax eax +
test esi esi +
setnz al  +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop esi  +
call sub_1002AF3  +
leave   +
retn 8  +
push 57h  +
call ds:SetLastError  +
jmp loc_100691D  +
***
push edi  +
push ebx  +
call sub_1004E97  +
jmp loc_1001F70  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 70h +
mov eax dword_100F000 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
xor ebx ebx +
push esi  +
mov esi [ebp+arg_4] +
mov [ebp+phkResult] ebx +
mov [ebp+lpString] ebx +
cmp [ebp+arg_0] ebx +
jz loc_1004FCD  +
cmp esi ebx +
jz loc_1004FCD  +
lea eax [ebp+var_68] +
push eax  +
push 4  +
call sub_1002865  +
lea eax [ebp+lpString] +
push eax  +
lea eax [ebp+var_68] +
push eax  +
push offset aSave  +
push esi  +
push [ebp+arg_0]  +
call sub_1004B6F  +
test eax eax +
jz loc_100678A  +
cmp [ebp+lpString] 1 +
jz loc_10067A6  +
lea eax [ebp+var_68] +
push eax  +
call sub_100138A  +
test eax eax +
jz loc_10067B2  +
lea eax [ebp+phkResult] +
push eax  +
mov eax [ebp+var_C] +
or eax 20000h +
push eax  +
push ebx  +
push [ebp+lpSubKey]  +
push [ebp+hKey]  +
call ds:RegOpenKeyExW  +
mov esi eax +
cmp esi ebx +
jnz loc_1004F90  +
push 2  +
push offset aSebackupprivil  +
push [ebp+lpSystemName]  +
call sub_1004CAC  +
mov esi eax +
cmp esi ebx +
jnz loc_1004F87  +
push edi  +
mov edi ds:RegSaveKeyExW +
push 4  +
push ebx  +
push [ebp+lpFileName]  +
push [ebp+phkResult]  +
call edi  +
mov esi eax +
cmp esi 57h +
jnz loc_1004F71  +
push [ebp+lpFileName]  +
call ds:DeleteFileW  +
push ebx  +
push [ebp+lpFileName]  +
push [ebp+phkResult]  +
call ds:RegSaveKeyW  +
mov esi eax +
cmp esi 0B7h +
jz loc_10067C0  +
cmp esi 57h +
jz loc_1006872  +
pop edi  +
lea eax [ebp+phkResult] +
push eax  +
call sub_1001324  +
push esi  +
call sub_1003151  +
cmp esi ebx +
jnz loc_100687A  +
push 20000h  +
call ds:__iob_func  +
add eax 20h +
push eax  +
call sub_10030DC  +
lea eax [ebp+var_68] +
push eax  +
call sub_100307D  +
mov eax ebx +
mov ecx [ebp+var_4] +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1002AF3  +
leave   +
retn 8  +
push 57h  +
call ds:SetLastError  +
jmp loc_100689C  +
***
dec [ebp+arg_0]  +
mov eax [ebp+arg_4] +
mov ecx [ebp+arg_0] +
push ebx  +
push 1  +
lea edi [eax+ecx*4] +
push offset aY  +
push dword ptr [edi]  +
call sub_100151B  +
test eax eax +
jnz sub_10066D9  +
cmp dword ptr [esi] 4 +
jnz loc_1006680  +
mov dword ptr [esi+10h] 1 +
jmp loc_1004C93  +
xor ecx ecx +
inc ecx  +
jmp loc_1004BE1  +
push 57h  +
jmp loc_100676A  +
xor eax eax +
jmp loc_1004CA0  +
***
push 0  +
push edi  +
push offset aVe  +
push dword ptr [esi]  +
call sub_100151B  +
test eax eax +
jz loc_10074E6  +
push 0  +
push edi  +
push offset aVa  +
push dword ptr [esi]  +
call sub_100151B  +
test eax eax +
jz loc_1007509  +
push 0  +
push edi  +
push offset aF  +
push dword ptr [esi]  +
call sub_100151B  +
test eax eax +
jnz loc_100751D  +
cmp [ebx+10h] edi +
jz loc_100759E  +
mov [ebx+10h] edi +
jmp loc_10051D6  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov ecx [ebp+arg_0] +
push ebx  +
push esi  +
push edi  +
xor edi edi +
mov [ebp+var_4] edi +
cmp ecx edi +
jz loc_1005206  +
mov esi [ebp+arg_4] +
cmp esi edi +
jz loc_1005206  +
mov ebx [ebp+arg_8] +
cmp ebx edi +
jz loc_1005206  +
cmp [ebp+arg_C] edi +
jz loc_1005206  +
mov eax [ebx] +
cmp eax edi +
jl loc_1005206  +
cmp eax 0Ch +
jge loc_1005206  +
add ecx 0FFFFFFFDh +
cmp ecx 4 +
ja loc_10075CB  +
push edi  +
inc edi  +
push edi  +
push offset aDelete  +
push dword ptr [esi+4]  +
call sub_100151B  +
test eax eax +
jnz loc_1005206  +
push edi  +
push offset a??HH  +
push dword ptr [esi+8]  +
call sub_100272D  +
cmp eax edi +
jz loc_10074AC  +
push ebx  +
push dword ptr [esi+8]  +
call sub_100236F  +
test eax eax +
jz loc_100520D  +
and [ebp+arg_C] 0 +
push 3  +
pop eax  +
mov [ebp+arg_8] eax +
cmp [ebp+arg_0] eax +
jbe loc_10051E1  +
mov eax [ebp+arg_8] +
push 0  +
push edi  +
lea esi [esi+eax*4] +
push offset aV  +
push dword ptr [esi]  +
call sub_100151B  +
test eax eax +
jnz loc_100505E  +
cmp [ebp+var_4] edi +
jz loc_100759E  +
mov eax [ebp+arg_8] +
inc eax  +
mov [ebp+arg_8] eax +
cmp eax [ebp+arg_0] +
jnb loc_100759E  +
mov ecx [ebp+arg_4] +
lea eax [ecx+eax*4] +
push 0  +
push dword ptr [eax]  +
mov [ebp+var_8] eax +
call sub_100243E  +
mov esi eax +
inc esi  +
lea eax [esi+esi+0Ah] +
push eax  +
call sub_10026AF  +
mov [ebx+44h] eax +
test eax eax +
jz loc_100758D  +
mov ecx [ebp+var_8] +
push esi  +
push dword ptr [ecx]  +
mov [ebp+var_4] edi +
push eax  +
call sub_10022BD  +
inc [ebp+arg_8]  +
mov eax [ebp+arg_8] +
cmp eax [ebp+arg_0] +
jb loc_10051FE  +
xor eax eax +
cmp [ebp+arg_C] eax +
setz al  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
mov esi [ebp+arg_4] +
jmp loc_1005167  +
push 57h  +
call sub_1003151  +
xor eax eax +
jmp loc_10051E9  +
***
push edi  +
push ebx  +
call sub_1005222  +
jmp loc_1001F70  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 6Ch +
mov eax dword_100F000 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
xor edi edi +
mov [ebp+var_6C] edi +
cmp [ebp+arg_0] edi +
jz loc_10052BA  +
cmp esi edi +
jz loc_10052BA  +
lea eax [ebp+var_68] +
push eax  +
push 2  +
call sub_1002865  +
lea eax [ebp+var_6C] +
push eax  +
lea eax [ebp+var_68] +
push eax  +
push esi  +
push [ebp+arg_0]  +
call sub_10050C1  +
test eax eax +
jz loc_10077F3  +
cmp [ebp+var_6C] 1 +
jz loc_100781A  +
lea eax [ebp+var_68] +
push eax  +
call sub_100138A  +
test eax eax +
jz loc_1007825  +
cmp [ebp+var_24] edi +
jz loc_1007845  +
lea eax [ebp+var_68] +
push eax  +
call sub_10052CB  +
mov edi eax +
lea eax [ebp+var_68] +
push eax  +
call sub_100307D  +
xor eax eax +
test edi edi +
setnz al  +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_1002AF3  +
leave   +
retn 8  +
push 57h  +
call sub_1003151  +
jmp loc_10078BD  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
push ebx  +
xor ebx ebx +
push esi  +
mov esi [ebp+arg_0] +
mov [ebp+cbValueName] ebx +
mov [ebp+hKey] ebx +
mov [ebp+cValues] ebx +
mov [ebp+cbMaxValueNameLen] ebx +
mov [ebp+lpString] ebx +
cmp esi ebx +
jz loc_10075EB  +
push edi  +
push 1  +
push 0CEh  +
call sub_100339E  +
cmp dword ptr [esi+14h] 1 +
mov [ebp+var_18] eax +
jz loc_100760E  +
mov eax [esi+44h] +
cmp eax ebx +
jz loc_10077D0  +
push ebx  +
push eax  +
call sub_100243E  +
test eax eax +
jz loc_100761C  +
mov edi [esi+44h] +
push 2  +
push 0CDh  +
call sub_100339E  +
mov [ebp+arg_0] eax +
push dword ptr [esi+10h]  +
push [ebp+var_18]  +
push edi  +
push [ebp+arg_0]  +
call sub_10034CE  +
cmp eax 2 +
jg loc_1005337  +
jz loc_100762E  +
lea eax [ebp+hKey] +
push eax  +
mov eax [esi+5Ch] +
or eax 0F003Fh +
push eax  +
push ebx  +
push dword ptr [esi+3Ch]  +
push dword ptr [esi+4]  +
call ds:RegOpenKeyExW  +
mov edi eax +
cmp edi ebx +
jnz loc_1007660  +
call sub_10015E4  +
mov [ebp+var_18] eax +
cmp eax ebx +
jz loc_1007654  +
mov eax [esi+44h] +
cmp eax ebx +
jz loc_1007679  +
push eax  +
push [ebp+hKey]  +
call ds:RegDeleteValueW  +
mov edi eax +
lea eax [ebp+hKey] +
push eax  +
call sub_1001324  +
cmp edi ebx +
jnz loc_10077AE  +
push ebx  +
call sub_1003151  +
push 20000h  +
call ds:__iob_func  +
add eax 20h +
push eax  +
call sub_10030DC  +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
push eax  +
call sub_10045E7  +
mov edi eax +
cmp edi ebx +
jz loc_1006C65  +
push dword ptr [esi+50h]  +
call sub_1002085  +
push eax  +
push edi  +
push dword ptr [esi+50h]  +
call sub_10022BD  +
jmp loc_10045BB  +
***
cmp [ebp+var_74] eax +
jz loc_1006F24  +
push [ebp+var_74]  +
push eax  +
push 209h  +
call sub_100339E  +
push eax  +
push 1  +
push 1  +
call esi  +
add eax 20h +
push eax  +
call sub_1004105  +
add esp 14h +
jmp loc_1003DC8  +
***
cmp word ptr [edx] 2Ah +
jnz loc_1004652  +
jmp loc_100465E  +
call ds:GetLastError  +
jmp loc_1008170  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
xor edi edi +
cmp [ebp+lpString] edi +
jz loc_1008183  +
push esi  +
mov esi [ebp+lpString1] +
cmp esi edi +
jz loc_100818A  +
test [ebp+arg_8] 2 +
jz loc_10081BA  +
push edi  +
push 1  +
push offset dword_1005C7C  +
push esi  +
call sub_100151B  +
test eax eax +
jz loc_10081D1  +
mov edx dword ptr [ebp+arg_8] +
test dl 1 +
jnz loc_10081D7  +
call ds:GetThreadLocale  +
mov edx dword ptr [ebp+arg_8] +
test edx 100h +
jz loc_10054B8  +
xor edi edi +
inc edi  +
test edx 200h +
jnz loc_10081FD  +
test edx 400h +
jnz loc_1008208  +
test edx 800h +
jnz loc_1008210  +
mov ecx 1000h +
test edx ecx +
jnz loc_1008218  +
test edx 2000h +
jnz loc_1008223  +
push 0  +
push edi  +
push eax  +
push esi  +
push [ebp+lpString]  +
call sub_1005516  +
pop esi  +
pop edi  +
pop ebp  +
retn 0Ch  +
***
and [ebp+var_4] 0 +
jmp loc_100559A  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push esi  +
xor esi esi +
cmp [ebp+lpString] esi +
jz loc_1005A02  +
cmp [ebp+arg_4] esi +
jz loc_1005A02  +
push ebx  +
push edi  +
push esi  +
push [ebp+lpString]  +
xor edi edi +
inc edi  +
mov [ebp+var_4] edi +
call sub_100243E  +
push esi  +
push [ebp+arg_4]  +
mov [ebp+var_C] eax +
call sub_100243E  +
mov edx eax +
xor ebx ebx +
mov [ebp+var_10] edx +
mov [ebp+var_8] ebx +
test edx edx +
jbe loc_10055B0  +
cmp esi [ebp+var_C] +
jnb loc_10055AA  +
mov eax [ebp+arg_4] +
lea eax [eax+ebx*2] +
movzx ecx word ptr [eax] +
cmp ecx 2Ah +
jz loc_10055D6  +
cmp ecx 3Fh +
jz loc_1005595  +
push edi  +
push eax  +
mov eax [ebp+lpString] +
push edi  +
lea eax [eax+esi*2] +
push eax  +
push [ebp+dwCmpFlags]  +
push [ebp+Locale]  +
call ds:CompareStringW  +
cmp eax 2 +
jnz loc_1005508  +
inc esi  +
inc ebx  +
mov [ebp+var_8] ebx +
cmp [ebp+var_4] 0 +
jz loc_10055CC  +
mov ebx [ebp+var_8] +
mov edx [ebp+var_10] +
cmp ebx edx +
jb loc_100555E  +
cmp [ebp+var_4] 0 +
jz loc_10055CC  +
and [ebp+var_4] 0 +
cmp esi [ebp+var_C] +
jnz loc_10055CC  +
cmp ebx edx +
jz loc_10059F2  +
lea eax [ebx+1] +
cmp eax edx +
jz loc_10059D7  +
mov eax [ebp+var_4] +
pop edi  +
pop ebx  +
pop esi  +
leave   +
retn 14h  +
inc ebx  +
cmp ebx edx +
jnb loc_10059FA  +
lea ebx [eax+2] +
mov eax [ebp+lpString] +
lea edi [eax+esi*2] +
push 1  +
push ebx  +
push 1  +
push edi  +
push [ebp+dwCmpFlags]  +
push [ebp+Locale]  +
call ds:CompareStringW  +
cmp eax 2 +
jz loc_100560C  +
inc esi  +
inc edi  +
inc edi  +
cmp esi [ebp+var_C] +
jb loc_10055E8  +
xor edi edi +
inc edi  +
jmp loc_100559A  +
mov eax [ebp+arg_10] +
inc eax  +
push eax  +
push [ebp+dwCmpFlags]  +
push [ebp+Locale]  +
push ebx  +
push edi  +
call sub_1005516  +
mov [ebp+var_4] eax +
cmp eax 1 +
jnz loc_10055FF  +
mov eax [ebp+var_10] +
xor edi edi +
mov [ebp+var_8] eax +
inc edi  +
mov esi [ebp+var_C] +
jmp loc_100559A  +
***
cmp ebx 3 +
jbe loc_1005752  +
cmp ebx 5 +
ja loc_1006934  +
push 2  +
push 1  +
push offset a0x  +
push dword ptr [edi+50h]  +
call sub_1004857  +
push dword ptr [esi]  +
test eax eax +
jz loc_100699A  +
push offset aD_1  +
push 1  +
call sub_10057BA  +
add esp 0Ch +
test eax eax +
jz loc_10069A4  +
push [ebp+var_8]  +
call sub_1002F1E  +
push eax  +
push [ebp+var_4]  +
call sub_10022BD  +
jmp loc_10056E3  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push ebx  +
xor eax eax +
push esi  +
mov esi [ebp+lpString1] +
push edi  +
mov [ebp+var_8] eax +
mov [ebp+var_4] eax +
mov [ebp+var_C] eax +
cmp esi eax +
jz loc_1005772  +
mov edi [ebp+arg_C] +
cmp edi eax +
jz loc_1005772  +
mov ebx [ebp+arg_4] +
cmp ebx eax +
jbe loc_1005734  +
cmp ebx 2 +
ja loc_1005734  +
mov [ebp+lpString1] esi +
test ebx ebx +
jbe loc_1005752  +
cmp ebx 2 +
ja loc_1005637  +
xor esi esi +
xor eax eax +
inc esi  +
cmp [edi+20h] eax +
jnz loc_10069B1  +
mov eax [edi+1Ch] +
neg eax  +
sbb eax eax +
and eax 0FFFFFF00h +
add eax 100h +
or eax 2 +
push eax  +
push dword ptr [edi+50h]  +
push [ebp+lpString1]  +
call sub_100545B  +
test eax eax +
jnz loc_1005722  +
push 490h  +
xor esi esi +
call ds:SetLastError  +
lea eax [ebp+var_4] +
push eax  +
call sub_1002024  +
mov eax esi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
mov eax [ebp+arg_8] +
lea eax [eax+eax+0Ch] +
mov [ebp+var_8] eax +
add eax eax +
push eax  +
call sub_10026AF  +
mov [ebp+var_4] eax +
test eax eax +
jz loc_1005779  +
mov [ebp+lpString1] eax +
jmp loc_10056D6  +
push [ebp+var_8]  +
push offset dword_1001314  +
push eax  +
call sub_10022BD  +
xor ebx ebx +
cmp [ebp+arg_8] ebx +
ja loc_100577D  +
jmp loc_10056E3  +
test eax eax +
jnz loc_1005715  +
jmp loc_1005722  +
push 57h  +
jmp loc_10069CB  +
xor eax eax +
jmp loc_100572D  +
movzx eax byte ptr [ebx+esi] +
push eax  +
push offset a02x  +
push 1  +
call sub_10057BA  +
add esp 0Ch +
test eax eax +
jz loc_10069A4  +
push [ebp+var_8]  +
call sub_1002F1E  +
push eax  +
push [ebp+var_4]  +
call sub_10028CB  +
inc ebx  +
cmp ebx [ebp+arg_8] +
jb loc_100577D  +
jmp loc_10056E3  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
xor esi esi +
cmp [ebp+lpString] esi +
jz loc_1007DD2  +
cmp [ebp+arg_0] esi +
jz loc_1007DEB  +
push edi  +
push 1  +
add esi 100h +
push esi  +
push 0  +
push 5  +
call sub_1002593  +
mov edi eax +
test edi edi +
jz loc_1007E0C  +
lea eax [ebp+arg_8] +
push eax  +
push [ebp+lpString]  +
push esi  +
push edi  +
call sub_100418B  +
cmp eax 8007007Ah +
jz loc_10057D5  +
test eax eax +
jl loc_1007DFB  +
push edi  +
call sub_1002F79  +
pop edi  +
pop esi  +
pop ebp  +
retn   +
***
cmp [edi+44h] esi +
jnz loc_1005979  +
cmp [edi+54h] esi +
jnz loc_1005979  +
inc dword ptr [ebx+10h]  +
jmp loc_1005979  +
test eax eax +
jnz loc_100593C  +
jmp loc_100599D  +
cmp eax 0FFFFFFFFh +
jnz loc_1005947  +
jmp loc_100599D  +
cmp eax esi +
jnz loc_1006DDF  +
jmp loc_1005979  +
push eax  +
call sub_1003151  +
jmp loc_10059AC  +
push 57h  +
call sub_1003151  +
jmp loc_1006DF9  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push ebx  +
push esi  +
xor esi esi +
push edi  +
mov [ebp+Type] esi +
mov [ebp+cbValueName] esi +
mov [ebp+cbMaxValueNameLen] esi +
mov [ebp+cValues] esi +
mov [ebp+lpString] esi +
cmp [ebp+hKey] esi +
jz loc_1005865  +
cmp [ebp+arg_4] esi +
jz loc_1005865  +
mov edi [ebp+arg_8] +
cmp edi esi +
jz loc_1005865  +
mov ebx [ebp+dwIndex] +
cmp ebx esi +
jz loc_1005865  +
push esi  +
push esi  +
push esi  +
lea eax [ebp+cbMaxValueNameLen] +
push eax  +
lea eax [ebp+cValues] +
push eax  +
push esi  +
push esi  +
push esi  +
push esi  +
push esi  +
push esi  +
push [ebp+hKey]  +
call ds:RegQueryInfoKeyW  +
mov [ebp+arg_8] eax +
cmp eax esi +
jnz loc_1006DA3  +
inc [ebp+cbMaxValueNameLen]  +
mov eax [ebp+cbMaxValueNameLen] +
add eax eax +
push eax  +
call sub_10026AF  +
mov [ebp+lpString] eax +
cmp eax esi +
jz loc_1006DAE  +
mov [ebp+arg_8] esi +
mov [ebp+dwIndex] esi +
cmp [ebp+cValues] esi +
jbe loc_10059AC  +
mov eax [ebp+cbMaxValueNameLen] +
mov [ebp+cbValueName] eax +
add eax eax +
push eax  +
push esi  +
push [ebp+lpString]  +
call memset  +
add esp 0Ch +
push esi  +
push esi  +
lea eax [ebp+Type] +
push eax  +
push esi  +
lea eax [ebp+cbValueName] +
push eax  +
push [ebp+lpString]  +
push [ebp+dwIndex]  +
push [ebp+hKey]  +
call ds:RegEnumValueW  +
mov [ebp+arg_8] eax +
cmp eax esi +
jnz loc_100585A  +
mov eax [edi+44h] +
cmp eax esi +
jnz loc_1006DBC  +
mov eax [edi+54h] +
cmp eax esi +
jnz loc_1006DCF  +
xor ecx ecx +
inc ecx  +
mov [ebx+8] ecx +
mov eax [edi+4Ch] +
test al 2 +
jz loc_100584D  +
mov eax [ebp+cbValueName] +
push edi  +
add eax eax +
push eax  +
push ecx  +
push [ebp+lpString]  +
call sub_100569B  +
mov [ebx+8] eax +
cmp eax esi +
jnz loc_1005818  +
cmp dword ptr [edi+4Ch] 2 +
jz loc_100599D  +
cmp dword ptr [ebx+8] 1 +
jz loc_100598A  +
mov eax [edi+4Ch] +
cmp eax esi +
jz loc_100598A  +
test al 4 +
jz loc_100599D  +
push ebx  +
push edi  +
push [ebp+lpString]  +
push [ebp+arg_4]  +
push [ebp+hKey]  +
call sub_1003DEF  +
mov [ebp+arg_8] eax +
inc [ebp+dwIndex]  +
mov eax [ebp+dwIndex] +
cmp eax [ebp+cValues] +
jb loc_10058F7  +
cmp [ebx] esi +
jnz loc_10059C4  +
push offset asc_1003C30  +
call ds:__iob_func  +
add eax 20h +
push eax  +
call sub_100245F  +
lea eax [ebp+lpString] +
push eax  +
call sub_1002024  +
mov eax [ebp+arg_8] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
push offset aV_0  +
push dword ptr [edi]  +
call sub_100151B  +
test eax eax +
jz loc_10044C8  +
push ebx  +
push 1  +
push offset aVe  +
push dword ptr [edi]  +
call sub_100151B  +
test eax eax +
jz loc_1005B90  +
push ebx  +
push 1  +
push offset aVe_0  +
push dword ptr [edi]  +
call sub_100151B  +
test eax eax +
jz loc_1005B90  +
push ebx  +
push 1  +
push offset aD  +
push dword ptr [edi]  +
call sub_100151B  +
test eax eax +
jz loc_1006BCB  +
push ebx  +
push 1  +
push offset aD_0  +
push dword ptr [edi]  +
call sub_100151B  +
test eax eax +
jz loc_1006BCB  +
push ebx  +
push 1  +
push offset aC  +
push dword ptr [edi]  +
call sub_100151B  +
test eax eax +
jz loc_1006BBB  +
push ebx  +
push 1  +
push offset aC_0  +
push dword ptr [edi]  +
call sub_100151B  +
test eax eax +
jz loc_1006BBB  +
push ebx  +
push 1  +
push offset aE  +
push dword ptr [edi]  +
call sub_100151B  +
test eax eax +
jz loc_1006BAB  +
push ebx  +
push 1  +
push offset aE_0  +
push dword ptr [edi]  +
call sub_100151B  +
test eax eax +
jz loc_1006BAB  +
push ebx  +
push 1  +
push offset aZ  +
push dword ptr [edi]  +
call sub_100151B  +
test eax eax +
jz loc_1006B97  +
push ebx  +
push 1  +
push offset aZ_0  +
push dword ptr [edi]  +
call sub_100151B  +
test eax eax +
jz loc_1006B97  +
push ebx  +
push 1  +
push offset aS_0  +
push dword ptr [edi]  +
call sub_100151B  +
test eax eax +
jnz sub_1006A0F  +
xor eax eax +
inc eax  +
cmp [esi+18h] eax +
jz loc_1006C24  +
mov [esi+18h] eax +
jmp loc_1004542  +
***
cmp [ebp+lpString] ebx +
jnz loc_1006C24  +
mov eax [ebp+var_4] +
inc eax  +
inc [ebp+var_8]  +
mov [ebp+var_4] eax +
cmp eax [ebp+arg_0] +
jnb loc_1006C33  +
mov ecx [ebp+arg_4] +
mov eax [ecx+eax*4] +
mov [ebp+lpString] eax +
jmp loc_1004542  +
***
cmp [esi+44h] ebx +
jz loc_1006BDD  +
jmp loc_1006C24  +
***
test eax eax +
jz loc_100450E  +
jmp loc_1004539  +
mov eax [esi+4Ch] +
test al 1 +
jz loc_1006C1F  +
jmp loc_1006C24  +
cmp [ebp+dwErrCode] ebx +
jz loc_1004554  +
jmp loc_1005BF6  +
cmp [ebp+arg_8] ebx +
jz loc_1006C73  +
jmp loc_1006C9B  +
push 57h  +
call sub_1003151  +
xor eax eax +
jmp loc_10045CC  +
cmp [esi+4Ch] ebx +
jnz loc_1005BF6  +
xor eax eax +
cmp [esi+44h] ebx +
setz al  +
lea eax [eax+eax+5] +
mov [esi+4Ch] eax +
cmp [ebp+lpString] ebx +
jz loc_1005C6A  +
cmp [ebp+dwErrCode] ebx +
jnz loc_1005BC6  +
push ebx  +
push [ebp+lpString]  +
call sub_100243E  +
mov edi eax +
cmp [esi+20h] ebx +
jnz loc_1005C12  +
inc edi  +
inc edi  +
inc edi  +
lea eax [edi+edi+4] +
push eax  +
call sub_10026AF  +
mov [esi+50h] eax +
cmp eax ebx +
jz loc_1006C4B  +
push edi  +
push offset dword_1005C78  +
push eax  +
call sub_10022BD  +
cmp [esi+20h] ebx +
jnz loc_1005C47  +
push edi  +
push offset dword_1005C7C  +
push dword ptr [esi+50h]  +
call sub_10022BD  +
push edi  +
push [ebp+lpString]  +
push dword ptr [esi+50h]  +
call sub_10028CB  +
cmp [esi+20h] ebx +
jnz loc_100457A  +
push edi  +
push offset dword_1005C7C  +
push dword ptr [esi+50h]  +
call sub_10028CB  +
cmp [ebp+dwErrCode] ebx +
jnz loc_1005BC6  +
jmp loc_100457A  +
***
lea eax [ebp+dwIndex] +
push eax  +
lea eax [ebp+var_68] +
push eax  +
push [ebp+var_28]  +
xor ebx ebx +
push [ebp+phkResult]  +
inc ebx  +
mov [ebp+dwIndex] ebx +
call sub_1005CCE  +
mov [ebp+dwErrCode] eax +
cmp [ebp+var_18] edi +
jz loc_1006F16  +
mov edi ebx +
jmp loc_1003DB3  +
cmp [ebp+var_14] edi +
jnz loc_1005CAB  +
jmp loc_1003DB3  +
push 57h  +
call ds:SetLastError  +
jmp loc_1006F42  +
***
mov edi edi +
sub ecx eax +
mov eax [esp+8+arg_4] +
mov ecx [ebp-1Ch] +
sub ecx eax +
and ecx 0Fh +
add eax ecx +
sbb ecx ecx +
or eax ecx +
pop ecx  +
jmp sub_1005F18  +
***
xor eax eax +
jmp loc_1001348  +
***
push 57h  +
call ds:SetLastError  +
xor eax eax +
jmp loc_10028BB  +
push 57h  +
call ds:SetLastError  +
xor eax eax +
jmp loc_10028BA  +
***
lea eax [esi+4] +
push eax  +
call sub_1001324  +
jmp loc_1003090  +
***
push esi  +
mov esi ds:__iob_func +
cmp [ebp+arg_4] 0 +
jz loc_100600A  +
push [ebp+arg_4]  +
push [ebp+lpSource]  +
push 1  +
push 1  +
call esi  +
add eax 20h +
push eax  +
call sub_1004105  +
add esp 14h +
jmp loc_1006018  +
push [ebp+lpSource]  +
call esi  +
add eax 20h +
push eax  +
call sub_100245F  +
call esi  +
push eax  +
call ds:fflush  +
call esi  +
push eax  +
call fgetwc  +
pop ecx  +
pop ecx  +
push 0  +
movzx eax ax +
push 1  +
push eax  +
push [ebp+lpString]  +
call sub_10019F2  +
cmp eax 0FFFFFFFFh +
jz loc_1005FEA  +
inc eax  +
pop esi  +
jmp loc_10034EC  +
or eax 0FFFFFFFFh +
jmp loc_10034EC  +
***
push 57h  +
call ds:SetLastError  +
xor eax eax +
jmp loc_1001380  +
mov cx ds:word_1001310 +
mov [eax] cx +
jmp loc_100137E  +
***
push 57h  +
call ds:SetLastError  +
xor eax eax +
jmp loc_10019E7  +
push 80090003h  +
jmp loc_100606F  +
cmp eax ebx +
jle loc_10019D1  +
push 80090003h  +
call ds:SetLastError  +
xor eax eax +
jmp loc_10019E6  +
***
push 57h  +
call ds:SetLastError  +
or eax 0FFFFFFFFh +
jmp loc_1003ADD  +
push 0Eh  +
call ds:SetLastError  +
or eax 0FFFFFFFFh +
jmp loc_1003ADC  +
mov [ebp+var_4] esi +
jmp loc_1003ACA  +
mov [ebp+var_4] 7 +
jmp loc_1003ACA  +
mov [ebp+var_4] 3 +
jmp loc_1003ACA  +
push ebx  +
push esi  +
push offset aReg_qword  +
push edi  +
call sub_100151B  +
test eax eax +
jnz loc_10060FA  +
mov [ebp+var_4] 0Bh +
jmp loc_1003ACA  +
push ebx  +
push esi  +
push offset aReg_dword_litt  +
push edi  +
call sub_100151B  +
test eax eax +
jz loc_1003AC3  +
push ebx  +
push esi  +
push offset aReg_dword_big_  +
push edi  +
call sub_100151B  +
test eax eax +
jnz loc_100612C  +
mov [ebp+var_4] 5 +
jmp loc_1003ACA  +
push ebx  +
push esi  +
push offset aReg_none  +
push edi  +
call sub_100151B  +
test eax eax +
jnz loc_1003ACA  +
mov [ebp+var_4] ebx +
jmp loc_1003ACA  +
***
push 57h  +
call ds:SetLastError  +
xor eax eax +
jmp loc_10013BA  +
push edi  +
lea edi [esi+4] +
cmp [edi] ebx +
jz loc_100616C  +
cmp dword ptr [esi+0Ch] 1 +
jnz loc_100616C  +
push edi  +
call sub_1001324  +
lea eax [ebp+phkResult] +
push eax  +
push dword ptr [edi]  +
push dword ptr [esi+38h]  +
call ds:RegConnectRegistryW  +
mov ebx eax +
test ebx ebx +
jnz loc_1006198  +
mov eax [ebp+phkResult] +
test eax eax +
jz loc_1006193  +
mov [edi] eax +
mov dword ptr [esi+0Ch] 1 +
jmp loc_1006198  +
mov ebx 42Bh +
pop edi  +
jmp loc_10013AC  +
***
call ds:GetLastError  +
jmp loc_1003161  +
cmp eax 3 +
ja loc_100316A  +
push 0  +
push 0BFh  +
call sub_100339E  +
push eax  +
call sub_1002F79  +
jmp loc_1003176  +
***
push 490h  +
call edi  +
mov esi offset aReg_none +
jmp loc_100424C  +
push 0  +
push esi  +
call sub_100243E  +
mov [edi] eax +
jmp loc_1004261  +
mov eax [ebp+arg_4] +
test eax eax +
jz loc_1006205  +
mov eax [eax] +
test eax eax +
jz loc_1006205  +
push eax  +
push esi  +
push [ebp+arg_0]  +
call sub_10022BD  +
jmp loc_1004261  +
push 57h  +
call edi  +
mov esi offset dword_1001314 +
jmp loc_1004261  +
***
push 57h  +
call ds:SetLastError  +
xor eax eax +
jmp loc_10040F3  +
xor eax eax +
inc eax  +
jmp loc_10040F3  +
push eax  +
push 1F5h  +
call sub_100339E  +
mov ebx eax +
jmp loc_100401B  +
mov eax [edi+10h] +
test eax eax +
jz loc_10046C1  +
push ebx  +
push eax  +
push offset aS_4  +
push 1  +
push 2  +
call esi  +
add eax 20h +
push eax  +
call sub_1004105  +
add esp 18h +
jmp loc_1004031  +
mov eax [edi] +
push eax  +
push eax  +
push 0  +
push 0  +
call sub_1004217  +
push eax  +
push offset aSD  +
push 1  +
push 2  +
call esi  +
add eax 20h +
push eax  +
call sub_1004105  +
add esp 18h +
jmp loc_100406E  +
xor eax eax +
jmp loc_10040F1  +
cmp eax 7 +
jz loc_10062C5  +
cmp eax 0Bh +
jnz loc_10046CE  +
push dword ptr [ebx+4]  +
push dword ptr [ebx]  +
push offset a0xI64x  +
push 1  +
push 1  +
call esi  +
add eax 20h +
push eax  +
call sub_1004105  +
add esp 18h +
jmp loc_10040DE  +
mov edi [edi+20h] +
mov [ebp+lpString] offset a0 +
test edi edi +
jz loc_10062D6  +
mov [ebp+lpString] edi +
lea edi [ebx+ecx] +
jmp loc_1006317  +
cmp word ptr [ebx] 0 +
jnz loc_10062EC  +
inc ebx  +
inc ebx  +
mov [ebp+var_4] 1 +
jmp loc_1006317  +
cmp [ebp+var_4] 1 +
jnz loc_1006300  +
push [ebp+lpString]  +
call esi  +
add eax 20h +
push eax  +
call sub_100245F  +
push ebx  +
call esi  +
add eax 20h +
push eax  +
call sub_100245F  +
push 0  +
push ebx  +
call sub_100243E  +
lea ebx [ebx+eax*2] +
cmp ebx edi +
jnb loc_10040DE  +
jmp loc_10062DB  +
movzx eax byte ptr [ebx+edi] +
push eax  +
push offset a02x  +
push 1  +
push 1  +
call esi  +
add eax 20h +
push eax  +
call sub_1004105  +
add esp 14h +
inc edi  +
cmp edi [ebp+lpString] +
jb loc_1006321  +
jmp loc_10040DE  +
***
lea eax [ebp+cbData] +
push eax  +
lea eax [ebp+Data] +
push eax  +
lea eax [ebp+Type] +
push eax  +
push esi  +
push offset ValueName  +
push [ebp+hKey]  +
mov [ebp+cbData] 4 +
call ds:RegQueryValueExW  +
test eax eax +
jnz loc_10063AA  +
cmp [ebp+Type] 4 +
jnz loc_10063AA  +
cmp [ebp+cbData] 4 +
jnz loc_10063AA  +
cmp dword ptr [ebp+Data] esi +
jz loc_10063AA  +
inc esi  +
lea eax [ebp+hKey] +
push eax  +
call sub_1001324  +
jmp loc_1001B20  +
***
push ecx  +
push 65h  +
call sub_100339E  +
push eax  +
call sub_1002F79  +
jmp loc_100643F  +
push ebx  +
push offset a??HH  +
push dword ptr [esi+4]  +
call sub_100272D  +
cmp eax ebx +
jnz loc_1006429  +
mov eax [ebp+arg_C] +
mov [eax] ebx +
jmp loc_1001AD3  +
push ebx  +
push offset a??HH  +
push dword ptr [esi+8]  +
call sub_100272D  +
test eax eax +
jnz loc_1001AD3  +
push eax  +
push 6Ch  +
jmp loc_10063E5  +
push dword ptr [esi+4]  +
push 0  +
push 66h  +
call sub_100339E  +
push eax  +
push ebx  +
call sub_10057BA  +
add esp 0Ch +
xor eax eax +
jmp loc_1001AD5  +
***
inc ebx  +
inc ebx  +
jmp loc_1002168  +
push 0FFFFFFFFh  +
jmp loc_10065D3  +
push 0  +
push edi  +
push offset aHkey_local_mac  +
push ebx  +
call sub_100151B  +
test eax eax +
jz loc_10047DD  +
push 0  +
push edi  +
push offset aHku  +
push ebx  +
call sub_100151B  +
test eax eax +
jz loc_10064AD  +
push 0  +
push edi  +
push offset aHkey_users  +
push ebx  +
call sub_100151B  +
test eax eax +
jz loc_10064AD  +
push 800401E4h  +
call ds:SetLastError  +
mov eax [esi] +
imul eax eax +
add eax offset aQuery +
push eax  +
push 0  +
push 68h  +
jmp loc_100653C  +
push [ebp+arg_4]  +
mov dword ptr [esi+4] 80000003h +
push offset aHkey_users  +
jmp loc_10047EC  +
push 2  +
call sub_10026AF  +
mov [esi+3Ch] eax +
cmp eax ebx +
jnz loc_100654D  +
push 0FFFFFFFFh  +
call sub_1003151  +
mov [ebp+arg_0] ebx +
jmp loc_1002273  +
push [ebp+arg_4]  +
mov dword ptr [esi+4] 80000005h +
push offset aHkey_current_c  +
jmp loc_10021C5  +
push [ebp+arg_4]  +
mov dword ptr [esi+4] 80000000h +
push offset aHkey_classes_r  +
jmp loc_10021C5  +
push 800401E4h  +
call ds:SetLastError  +
mov eax [esi] +
imul eax eax +
add eax offset aQuery +
push eax  +
push 0  +
push 69h  +
jmp loc_100653C  +
push 800401E4h  +
call ds:SetLastError  +
mov eax [esi] +
imul eax eax +
add eax offset aQuery +
push eax  +
push 0  +
push 6Ah  +
call sub_100339E  +
push eax  +
push edi  +
call sub_10057BA  +
add esp 0Ch +
jmp loc_10065CA  +
mov edi [ebp+arg_4] +
lea eax [edi+edi] +
push eax  +
call sub_10026AF  +
mov [esi+40h] eax +
cmp eax ebx +
jnz loc_100656A  +
push 0FFFFFFFFh  +
call sub_1003151  +
mov [ebp+arg_0] ebx +
push edi  +
push [ebp+var_4]  +
push dword ptr [esi+40h]  +
call sub_10022BD  +
jmp loc_1002273  +
and [ebp+arg_0] eax +
call ds:GetLastError  +
cmp eax 57h +
jnz loc_1006595  +
push 0FFFFFFFFh  +
call sub_1003151  +
jmp loc_1002273  +
push 800401E4h  +
call ds:SetLastError  +
mov eax [esi] +
imul eax eax +
add eax offset aQuery +
push eax  +
push 0  +
push 68h  +
call sub_100339E  +
push eax  +
push edi  +
call sub_10057BA  +
add esp 0Ch +
jmp loc_1002273  +
push 0FFFFFFFFh  +
call sub_1003151  +
and [ebp+arg_0] 0 +
jmp loc_1002273  +
call sub_1003151  +
xor eax eax +
jmp loc_100227F  +
***
push 0FFFFFFFFh  +
jmp loc_1006662  +
push 2  +
push 1  +
push 5Ch  +
push [ebp+lpString1]  +
call sub_10019F2  +
cmp eax 0FFFFFFFFh +
jz loc_1006614  +
mov ecx [ebp+lpString1] +
lea eax [ecx+eax*2] +
mov cx ds:word_1001310 +
lea esi [eax+2] +
mov [eax] cx +
jmp loc_1006616  +
xor esi esi +
push edi  +
push [ebp+lpString1]  +
call sub_10086C5  +
mov edi eax +
cmp edi 1 +
jnz loc_1002420  +
mov edi [ebp+arg_4] +
jmp loc_1002400  +
push 80040152h  +
call ds:SetLastError  +
mov eax [edi] +
imul eax eax +
add eax offset aQuery +
push eax  +
push ebx  +
push 68h  +
call sub_100339E  +
push eax  +
push 1  +
call sub_10057BA  +
add esp 0Ch +
xor edi edi +
jmp loc_1002420  +
call sub_1003151  +
xor eax eax +
jmp loc_100242B  +
***
push offset aY_0  +
push dword ptr [edi]  +
call sub_100151B  +
test eax eax +
jz loc_100502D  +
push ebx  +
push 1  +
push offset aReg32  +
push dword ptr [edi]  +
call sub_100151B  +
test eax eax +
jz loc_1006755  +
push ebx  +
push 1  +
push offset aReg32_0  +
push dword ptr [edi]  +
call sub_100151B  +
test eax eax +
jz loc_1006755  +
push ebx  +
push 1  +
push offset aReg64  +
push dword ptr [edi]  +
call sub_100151B  +
test eax eax +
jz loc_1006740  +
push ebx  +
push 1  +
push offset aReg64_0  +
push dword ptr [edi]  +
call sub_100151B  +
test eax eax +
jnz loc_1004C93  +
cmp [esi+5Ch] ebx +
jnz loc_1006680  +
mov dword ptr [esi+5Ch] 100h +
jmp loc_1004C93  +
cmp [esi+5Ch] ebx +
jnz loc_1006680  +
mov dword ptr [esi+5Ch] 200h +
jmp loc_1004C93  +
***
call sub_1003151  +
jmp loc_1005051  +
***
call ds:GetLastError  +
jmp loc_1004D1E  +
push [ebp+hObject]  +
call ds:CloseHandle  +
jmp loc_1006774  +
***
push 20000h  +
call ds:__iob_func  +
add eax 40h +
push eax  +
call sub_10030DC  +
xor ebx ebx +
inc ebx  +
jmp loc_1004FB2  +
push 4  +
call sub_1008449  +
jmp loc_1004FB2  +
push 0FFFFFFFFh  +
call sub_1003151  +
push 20001h  +
jmp loc_100678F  +
push ebx  +
push 0CFh  +
call sub_100339E  +
push 1  +
push 0CEh  +
mov esi eax +
call sub_100339E  +
mov [ebp+lpString] eax +
push [ebp+var_58]  +
push [ebp+lpString]  +
push [ebp+lpFileName]  +
push esi  +
call sub_10034CE  +
cmp eax 2 +
jg loc_10067DC  +
cmp eax 1 +
jz loc_10067FF  +
mov esi 4C7h +
jmp loc_1004F86  +
mov eax [ebp+lpFileName] +
push eax  +
mov [ebp+lpNewFileName] eax +
call sub_100852A  +
mov [ebp+lpFileName] eax +
cmp eax ebx +
jnz loc_100681F  +
call ds:GetLastError  +
mov esi eax +
jmp loc_1004F7D  +
push 4  +
push ebx  +
push eax  +
push [ebp+phkResult]  +
call edi  +
mov esi eax +
cmp esi 57h +
jnz loc_1006847  +
push [ebp+lpFileName]  +
call ds:DeleteFileW  +
push ebx  +
push [ebp+lpFileName]  +
push [ebp+phkResult]  +
call ds:RegSaveKeyW  +
mov esi eax +
cmp esi ebx +
jnz loc_1006864  +
push ebx  +
push [ebp+lpNewFileName]  +
push [ebp+lpFileName]  +
call ds:CopyFileW  +
test eax eax +
jnz loc_1006864  +
call ds:GetLastError  +
mov esi eax +
push [ebp+lpFileName]  +
call ds:DeleteFileW  +
jmp loc_1004F7D  +
add esi 77h +
jmp loc_1004F86  +
cmp esi 4C7h +
jz loc_1004F9E  +
xor ebx ebx +
push 20001h  +
inc ebx  +
call ds:__iob_func  +
add eax 40h +
jmp loc_1004FAC  +
call ds:__iob_func  +
add eax 40h +
push eax  +
call sub_100D7CD  +
xor eax eax +
inc eax  +
jmp loc_1004FBD  +
***
push 20000h  +
call ds:__iob_func  +
add eax 40h +
push eax  +
call sub_10030DC  +
xor esi esi +
inc esi  +
lea eax [ebp+var_68] +
push eax  +
call sub_100307D  +
mov eax esi +
jmp loc_1004E34  +
push 5  +
call sub_1008449  +
xor esi esi +
jmp loc_10068CA  +
push 0FFFFFFFFh  +
call sub_1003151  +
push 20001h  +
call ds:__iob_func  +
add eax 40h +
push eax  +
call sub_10030DC  +
jmp loc_10068CA  +
add esi 77h +
jmp loc_1004DF9  +
push 20001h  +
call ds:__iob_func  +
add eax 40h +
jmp loc_1004E1E  +
call ds:__iob_func  +
add eax 40h +
push eax  +
call sub_100D7CD  +
xor eax eax +
inc eax  +
jmp loc_1004E34  +
***
cmp ebx 7 +
jnz loc_1005752  +
push [ebp+var_8]  +
push offset dword_1001314  +
push eax  +
call sub_10022BD  +
mov eax [ebp+arg_8] +
lea ebx [esi+eax] +
jmp loc_1006990  +
cmp word ptr [esi] 0 +
jnz loc_1006964  +
inc esi  +
inc esi  +
mov [ebp+var_C] 1 +
jmp loc_1006990  +
cmp [ebp+var_C] 1 +
jnz loc_1006979  +
push [ebp+var_8]  +
lea eax [edi+30h] +
push eax  +
push [ebp+var_4]  +
call sub_10028CB  +
push [ebp+var_8]  +
push esi  +
push [ebp+var_4]  +
call sub_10028CB  +
push 0  +
push esi  +
call sub_100243E  +
lea esi [esi+eax*2] +
cmp esi ebx +
jnb loc_10056E3  +
jmp loc_1006953  +
push offset a0xX  +
jmp loc_1005669  +
lea eax [ebp+var_4] +
push eax  +
call sub_1002024  +
push 0Eh  +
jmp loc_10069CB  +
xor ecx ecx +
cmp [edi+1Ch] eax +
push eax  +
setz cl  +
push ecx  +
push dword ptr [edi+50h]  +
push [ebp+lpString1]  +
call sub_1004857  +
jmp loc_100576C  +
call ds:SetLastError  +
jmp loc_1005779  +
***
push offset aS_1  +
push dword ptr [edi]  +
call sub_100151B  +
test eax eax +
jz loc_1005B21  +
push ebx  +
push 1  +
push offset aSe  +
push dword ptr [edi]  +
call sub_100151B  +
test eax eax +
jz loc_1006B4C  +
push ebx  +
push 1  +
push offset aSe_0  +
push dword ptr [edi]  +
call sub_100151B  +
test eax eax +
jz loc_1006B4C  +
push ebx  +
push 1  +
push offset aT  +
push dword ptr [edi]  +
call sub_100151B  +
test eax eax +
jz loc_1006AF8  +
push ebx  +
push 1  +
push offset aT_0  +
push dword ptr [edi]  +
call sub_100151B  +
test eax eax +
jz loc_1006AF8  +
push ebx  +
push 1  +
push offset aReg32  +
push dword ptr [edi]  +
call sub_100151B  +
test eax eax +
jz loc_1006AE3  +
push ebx  +
push 1  +
push offset aReg32_0  +
push dword ptr [edi]  +
call sub_100151B  +
test eax eax +
jz loc_1006AE3  +
push ebx  +
push 1  +
push offset aReg64  +
push dword ptr [edi]  +
call sub_100151B  +
test eax eax +
jz loc_1006ACE  +
push ebx  +
push 1  +
push offset aReg64_0  +
push dword ptr [edi]  +
call sub_100151B  +
test eax eax +
jnz loc_1006C24  +
cmp [esi+5Ch] ebx +
jnz loc_1006C24  +
mov dword ptr [esi+5Ch] 100h +
jmp loc_1004542  +
cmp [esi+5Ch] ebx +
jnz loc_1006C24  +
mov dword ptr [esi+5Ch] 200h +
jmp loc_1004542  +
cmp [esi+54h] ebx +
jnz loc_1006C24  +
mov eax [ebp-4] +
inc eax  +
inc dword ptr [ebp-8]  +
mov [ebp-4] eax +
cmp eax [ebp+8] +
jnb loc_1006C24  +
mov ecx [ebp+0Ch] +
push esi  +
push dword ptr [ecx+eax*4]  +
call sub_10094A4  +
test eax eax +
jnz loc_1004542  +
mov edi ds:GetLastError +
call edi  +
cmp eax 800401E4h +
jz loc_1006C24  +
mov dword ptr [ebp+10h] 1 +
call edi  +
mov [ebp+14h] eax +
jmp loc_1005BBB  +
cmp dword ptr [ebp-10h] 1 +
jz loc_1006C24  +
mov eax [ebp-4] +
inc eax  +
inc dword ptr [ebp-8]  +
mov [ebp-4] eax +
cmp eax [ebp+8] +
jnb loc_1006C24  +
mov ecx [ebp+0Ch] +
lea edi [ecx+eax*4] +
push ebx  +
push dword ptr [edi]  +
call sub_100243E  +
xor ecx ecx +
inc ecx  +
cmp eax ecx +
jnz loc_1006C24  +
push 3  +
push dword ptr [edi]  +
lea eax [esi+30h] +
push eax  +
mov [ebp-10h] ecx +
call sub_10022BD  +
jmp loc_1004542  +
***
xor eax eax +
inc eax  +
cmp [esi+24h] eax +
jz loc_1006C24  +
mov [esi+24h] eax +
jmp loc_1004542  +
xor eax eax +
inc eax  +
cmp [esi+20h] eax +
jz loc_1006C24  +
mov [esi+20h] eax +
jmp loc_1004542  +
xor eax eax +
inc eax  +
cmp [esi+1Ch] eax +
jz loc_1006C24  +
mov [esi+1Ch] eax +
jmp loc_1004542  +
mov eax [esi+4Ch] +
test al 4 +
jnz loc_1006C24  +
or eax 4 +
mov [esi+4Ch] eax +
jmp loc_1004542  +
test byte ptr [esi+4Ch] 2 +
jnz loc_1006C24  +
push 4  +
call sub_10026AF  +
mov [esi+44h] eax +
cmp eax ebx +
jnz loc_1004542  +
***
mov [ebp+dwErrCode] 0Eh +
jmp loc_1005BF6  +
push 1  +
push offset aZVeFKDCESTSe  +
add eax 2 +
push eax  +
call sub_100272D  +
jmp loc_1005B9E  +
or dword ptr [esi+4Ch] 2 +
jmp loc_1004542  +
or eax 1 +
jmp loc_1006BD5  +
mov [ebp+arg_8] ebx +
mov [ebp+dwErrCode] 67h +
jmp loc_1005BF6  +
mov [ebp+arg_8] ebx +
mov [ebp+dwErrCode] 67h +
jmp loc_1005BBB  +
mov [ebp+dwErrCode] 67h +
jmp loc_1006C73  +
mov [ebp+dwErrCode] 0Eh +
jmp loc_1005BC6  +
call ds:GetLastError  +
mov [ebp+dwErrCode] eax +
jmp loc_100459E  +
call ds:GetLastError  +
mov [ebp+dwErrCode] eax +
jmp loc_10053F6  +
push 800401E4h  +
call ds:SetLastError  +
push offset aQuery  +
push ebx  +
push 67h  +
call sub_100339E  +
push eax  +
push 1  +
call sub_10057BA  +
add esp 0Ch +
jmp loc_10045C4  +
push [ebp+dwErrCode]  +
call sub_1003151  +
jmp loc_10045C4  +
push 800401E4h  +
call ds:SetLastError  +
push offset aQuery  +
push ebx  +
push 67h  +
call sub_100339E  +
push eax  +
push 1  +
jmp loc_1006A02  +
***
cmp edi 2 +
jnz loc_1006D98  +
push ebx  +
push [ebp+lpString]  +
call sub_100243E  +
test eax eax +
jnz loc_1006D98  +
push ebx  +
push ebx  +
push 1F6h  +
call sub_100339E  +
push eax  +
call sub_100243E  +
lea eax [eax+eax+2] +
jmp loc_1003E59  +
push 0Eh  +
jmp loc_1006D97  +
cmp edi 2 +
jnz loc_1006D98  +
push ebx  +
push [ebp+lpString]  +
call sub_100243E  +
test eax eax +
jnz loc_1006D98  +
mov eax [ebp+var_4] +
shr eax 1 +
push eax  +
push ebx  +
push 1F6h  +
mov [ebp+var_C] 1 +
call sub_100339E  +
push eax  +
push [ebp+var_8]  +
call sub_10022BD  +
jmp loc_1003EAD  +
inc dword ptr [edi+10h]  +
jmp loc_1003ED6  +
cmp [esi+44h] ebx +
jnz loc_1006D86  +
cmp [esi+54h] ebx +
jnz loc_1006D86  +
inc dword ptr [edi+10h]  +
mov [edi+0Ch] ebx +
jmp loc_1003F05  +
or [ebp+var_1C] 20h +
jmp loc_1003F7C  +
pop edi  +
push edi  +
call sub_1003151  +
jmp loc_1003EE7  +
***
push eax  +
call sub_1003151  +
jmp loc_10059CD  +
push 0Eh  +
call sub_1003151  +
xor eax eax +
jmp loc_10059D0  +
push 102h  +
push eax  +
push [ebp+lpString]  +
call sub_100545B  +
jmp loc_1005832  +
push [ebp+Type]  +
push 1  +
push eax  +
call sub_100DCBD  +
jmp loc_100583F  +
cmp [edi+44h] esi +
jnz loc_1005979  +
cmp [edi+54h] esi +
jnz loc_1005979  +
mov [ebx+8] esi +
jmp loc_1005979  +
push 57h  +
pop eax  +
jmp loc_10059D0  +
***
cmp [ebx+4Ch] edx +
jnz loc_1005D23  +
cmp [ebx+44h] esi +
jz loc_1005EE4  +
jmp loc_1005D23  +
cmp ecx edx +
jnz loc_1005D4A  +
cmp [ebx+44h] esi +
jz loc_1005EF2  +
jmp loc_1005D32  +
push eax  +
call sub_1003151  +
jmp loc_1005EC8  +
mov eax 100h +
jmp loc_1005D88  +
push 0Eh  +
jmp loc_1006EA9  +
cmp dword ptr [ebx+4Ch] 1 +
jnz loc_1005E43  +
jmp loc_1005EB9  +
cmp eax esi +
jnz loc_1006E63  +
cmp [ebx+44h] esi +
jz loc_1005E43  +
mov [edi+4] esi +
jmp loc_1005E43  +
cmp [ebx+44h] esi +
jnz loc_1005E7D  +
cmp [ebx+54h] esi +
jnz loc_1005E7D  +
push [ebp+var_8]  +
inc dword ptr [edi+10h]  +
push offset Source  +
push eax  +
push eax  +
mov [edi+0Ch] esi +
mov [edi] esi +
call ds:__iob_func  +
add eax 20h +
push eax  +
call sub_1004105  +
xor eax eax +
add esp 14h +
inc eax  +
jmp loc_1005E7D  +
pop esi  +
push esi  +
call sub_1003151  +
mov [ebp+arg_8] esi +
jmp loc_1005EC8  +
***
push 20000h  +
call ds:__iob_func  +
add eax 40h +
push eax  +
call sub_10030DC  +
xor edi edi +
inc edi  +
lea eax [ebp+var_68] +
push eax  +
call sub_100307D  +
mov eax edi +
jmp loc_1003DD4  +
push edi  +
call sub_1008449  +
jmp loc_1006ECF  +
push 0FFFFFFFFh  +
call sub_1003151  +
push 20001h  +
jmp loc_1006EBD  +
push eax  +
jmp loc_1006EE9  +
lea eax [ebp+dwIndex] +
push eax  +
lea eax [ebp+var_68] +
push eax  +
push [ebp+var_28]  +
push [ebp+phkResult]  +
call sub_1005876  +
mov [ebp+dwErrCode] eax +
jmp loc_1003DB3  +
cmp [ebp+lpString] edi +
jz loc_1005CB2  +
jmp loc_1005CAB  +
inc ebx  +
jmp loc_1005416  +
xor ebx ebx +
push 20001h  +
inc ebx  +
call esi  +
add eax 40h +
push eax  +
call sub_10030DC  +
jmp loc_1003DC8  +
call ds:__iob_func  +
add eax 40h +
push eax  +
call sub_100D7CD  +
xor eax eax +
inc eax  +
jmp loc_1003DD4  +
***
push 800401E4h  +
call ds:SetLastError  +
push offset aAdd_0  +
push ebx  +
push 67h  +
call sub_100339E  +
push eax  +
push 1  +
call sub_10057BA  +
add esp 0Ch +
jmp loc_1003A1E  +
cmp [ebp+arg_0] 3 +
jnz loc_1006F93  +
mov eax [ebp+arg_C] +
mov [eax] ebx +
mov eax ebx +
jmp loc_10039C3  +
push 800401E4h  +
call ds:SetLastError  +
push offset aAdd_0  +
push 0  +
push 67h  +
call sub_100339E  +
push eax  +
push ebx  +
jmp loc_1006F74  +
push 0  +
push 1  +
push offset aF_0  +
push dword ptr [esi]  +
call sub_100151B  +
test eax eax +
jz loc_1003984  +
push 0  +
push 1  +
push offset aReg32  +
push dword ptr [esi]  +
call sub_100151B  +
test eax eax +
jz loc_1007032  +
push 0  +
push 1  +
push offset aReg32_0  +
push dword ptr [esi]  +
call sub_100151B  +
test eax eax +
jz loc_1007032  +
push 0  +
push 1  +
push offset aReg64  +
push dword ptr [esi]  +
call sub_100151B  +
test eax eax +
jz loc_100701C  +
push 0  +
push 1  +
push offset aReg64_0  +
push dword ptr [esi]  +
call sub_100151B  +
test eax eax +
jnz loc_1007127  +
cmp dword ptr [edi+5Ch] 0 +
jnz loc_1007127  +
mov dword ptr [edi+5Ch] 100h +
jmp loc_1003993  +
cmp dword ptr [edi+5Ch] 0 +
jnz loc_1007127  +
mov dword ptr [edi+5Ch] 200h +
jmp loc_1003993  +
xor esi esi +
inc esi  +
cmp [ebp+var_4] esi +
jz loc_1007127  +
cmp [ebp+var_8] esi +
jnz loc_1007063  +
cmp dword ptr [edi+2Ch] 7 +
jnz loc_1007127  +
inc ebx  +
cmp ebx [ebp+arg_0] +
jnb loc_1007127  +
mov eax [ebp+arg_4] +
lea eax [eax+ebx*4] +
push 0  +
push dword ptr [eax]  +
mov [ebp+arg_8] eax +
call sub_100243E  +
cmp eax esi +
jnz loc_1007127  +
mov eax [ebp+arg_8] +
push 3  +
push dword ptr [eax]  +
mov [ebp+var_4] esi +
lea eax [edi+30h] +
jmp loc_10037B9  +
mov eax [ebp+arg_8] +
push esi  +
push 0Ah  +
push dword ptr [eax]  +
call sub_10049FF  +
test eax eax +
jz loc_1007127  +
mov eax [ebp+arg_8] +
push 0Ah  +
push dword ptr [eax]  +
call sub_10048A8  +
mov [edi+2Ch] eax +
jmp loc_1003A06  +
cmp dword ptr [edi+2Ch] 7 +
jz loc_1003A0F  +
jmp loc_1007127  +
cmp dword ptr [edi+44h] 0 +
jnz loc_1007127  +
push 2  +
call sub_10026AF  +
mov [edi+44h] eax +
test eax eax +
jnz loc_1003993  +
jmp loc_1007116  +
cmp [ebp+var_8] 0 +
jnz loc_10039A7  +
jmp loc_1007127  +
push 2  +
call sub_10026AF  +
mov [edi+44h] eax +
test eax eax +
jnz loc_10039B1  +
jmp loc_1007116  +
push 2  +
call sub_10026AF  +
mov [edi+48h] eax +
test eax eax +
jnz loc_10039BB  +
push 0Eh  +
pop eax  +
push eax  +
mov [ebp+arg_C] eax +
call sub_1003151  +
jmp loc_10039BB  +
push 67h  +
pop esi  +
push 800401E4h  +
mov [ebp+arg_C] esi +
call ds:SetLastError  +
push offset aAdd_0  +
push 0  +
push esi  +
call sub_100339E  +
push eax  +
push 1  +
call sub_10057BA  +
add esp 0Ch +
jmp loc_10039BB  +
***
push 20000h  +
call ds:__iob_func  +
add eax 40h +
push eax  +
call sub_10030DC  +
mov ebx edi +
lea eax [ebp+var_70] +
push eax  +
call sub_100307D  +
mov eax ebx +
jmp loc_1003769  +
push edi  +
call sub_1008449  +
jmp loc_100716B  +
push 0FFFFFFFFh  +
call sub_1003151  +
push 20001h  +
jmp loc_100715A  +
push 42Bh  +
jmp loc_1007185  +
lea eax [ebp+phkResult] +
push eax  +
call sub_1001324  +
push 57h  +
jmp loc_1007185  +
lea eax [ebp+phkResult] +
push eax  +
call sub_1001324  +
push 4C7h  +
call sub_1003151  +
push 20000h  +
call ds:__iob_func  +
add eax 20h +
push eax  +
call sub_10030DC  +
jmp loc_100716B  +
***
push eax  +
call sub_1003151  +
push 20001h  +
call ds:__iob_func  +
add eax 40h +
push eax  +
call sub_10030DC  +
lea eax [ebp+var_74] +
push eax  +
call sub_1001324  +
jmp loc_1007169  +
***
cmp eax 7 +
jz loc_100727F  +
cmp eax 0Bh +
jnz loc_1003AF9  +
cmp [ebp+lpString] ebx +
jz loc_1004B56  +
push 0Ah  +
pop edi  +
push 2  +
push 1  +
push offset a0x  +
push [ebp+lpString]  +
call sub_1004857  +
test eax eax +
jnz loc_100722C  +
push 10h  +
pop edi  +
mov esi ds:_errno +
call esi  +
mov [eax] ebx +
push edi  +
lea eax [ebp+var_A4] +
push eax  +
push [ebp+lpString]  +
call ds:_wcstoui64  +
mov [ebp+var_98] eax +
mov eax [ebp+var_A4] +
add esp 0Ch +
mov [ebp+var_94] edx +
cmp [eax] bx +
jnz loc_1007275  +
call esi  +
cmp dword ptr [eax] 22h +
jz loc_1007275  +
push 8  +
lea eax [ebp+var_98] +
jmp loc_1003715  +
mov [ebp+var_7C] ebx +
push 79h  +
jmp loc_10073B7  +
push ebx  +
push [ebp+lpString]  +
call sub_100243E  +
mov esi eax +
push ebx  +
lea eax [ebp+String2] +
push eax  +
mov [ebp+var_80] esi +
call sub_100243E  +
mov [ebp+var_A0] eax +
lea eax [esi+esi+6] +
push eax  +
call sub_10026AF  +
mov [ebp+lpData] eax +
cmp eax ebx +
jz loc_10073B5  +
xor edi edi +
cmp [ebp+var_80] ebx +
mov esi eax +
jle loc_10072E3  +
push edi  +
push 1  +
lea eax [ebp+String2] +
push eax  +
push [ebp+lpString]  +
call sub_100157E  +
mov [ebp+var_78] eax +
cmp eax 0FFFFFFFFh +
jz loc_1007324  +
cmp eax edi +
jnz loc_100732A  +
mov [ebp+var_90] 1 +
push ebx  +
push 1  +
lea eax [ebp+String2] +
push eax  +
push [ebp+lpString]  +
call sub_1004857  +
test eax eax +
mov eax [ebp+lpData] +
jnz loc_1007373  +
lea esi [eax+4] +
sub esi eax +
sar esi 1 +
add esi esi +
push esi  +
push eax  +
push [ebp+dwType]  +
push ebx  +
push [ebp+lpValueName]  +
push [ebp+phkResult]  +
call ds:RegSetValueExW  +
mov esi eax +
lea eax [ebp+lpData] +
jmp loc_1007447  +
mov eax [ebp+var_80] +
mov [ebp+var_78] eax +
mov eax [ebp+var_78] +
sub eax edi +
inc eax  +
push eax  +
mov eax [ebp+lpString] +
lea eax [eax+edi*2] +
push eax  +
push esi  +
call sub_10022BD  +
push ebx  +
push esi  +
call sub_100243E  +
mov ecx [ebp+lpData] +
lea esi [esi+eax*2+2] +
mov eax [ebp+var_80] +
lea ecx [ecx+eax*2+4] +
cmp esi ecx +
jnb loc_10072E3  +
mov ecx [ebp+var_A0] +
mov edx [ebp+var_78] +
lea edi [ecx+edx] +
cmp edi eax +
jge loc_10072E3  +
jmp loc_10072BE  +
inc esi  +
inc esi  +
cmp [ebp+var_90] 1 +
jnz loc_10072FF  +
push 7Bh  +
mov [ebp+var_7C] ebx +
pop esi  +
jmp loc_1007319  +
cmp [ebp+lpString] ebx +
jz loc_1004B56  +
push ebx  +
push [ebp+lpString]  +
call sub_100243E  +
mov ecx eax +
shr ecx 1 +
and eax edi +
lea eax [eax+ecx+1] +
push eax  +
mov [ebp+var_80] eax +
call sub_10026AF  +
mov [ebp+var_88] eax +
cmp eax ebx +
jnz loc_10073BD  +
push 8  +
pop esi  +
jmp loc_1003728  +
mov esi [ebp+lpString] +
push 6  +
xor edi edi +
pop ecx  +
lea eax [ebp+var_C] +
mov [eax] bl +
inc eax  +
dec ecx  +
jz sub_1007416  +
jmp loc_10073C8  +
***
call sub_100243E  +
mov [ebp-84h] eax +
cmp eax 1 +
ja loc_10073D0  +
push edi  +
push dword ptr [ebp-88h]  +
push dword ptr [ebp-44h]  +
push ebx  +
push dword ptr [ebp-2Ch]  +
push dword ptr [ebp-74h]  +
call ds:RegSetValueExW  +
mov esi eax +
lea eax [ebp-88h] +
***
push eax  +
call sub_1002024  +
jmp loc_1003728  +
push esi  +
call ds:__iob_func  +
add eax 40h +
push eax  +
call sub_100D948  +
jmp loc_100748D  +
***
push 7Ah  +
mov [ebp-7Ch] ebx +
pop esi  +
jmp loc_1007441  +
mov esi 42Bh +
jmp loc_1007441  +
***
push esi  +
call sub_1003151  +
push 20001h  +
call ds:__iob_func  +
add eax 40h +
push eax  +
call sub_10030DC  +
xor esi esi +
inc esi  +
jmp loc_1003767  +
call ds:__iob_func  +
add eax 40h +
push eax  +
call sub_100D7CD  +
xor eax eax +
inc eax  +
jmp loc_1003769  +
***
cmp [ebp+arg_0] 3 +
jnz loc_10074BE  +
mov eax [ebp+arg_C] +
mov [eax] edi +
mov eax edi +
jmp loc_10051E9  +
push 800401E4h  +
call ds:SetLastError  +
push offset aDelete_0  +
push 0  +
push 67h  +
call sub_100339E  +
push eax  +
push edi  +
call sub_10057BA  +
add esp 0Ch +
jmp loc_100520D  +
cmp [ebp+var_4] edi +
jz loc_100759E  +
push 4  +
call sub_10026AF  +
mov [ebx+44h] eax +
test eax eax +
jz loc_100758D  +
mov [ebp+var_4] edi +
jmp loc_10051D6  +
cmp [ebp+var_4] edi +
jz loc_100759E  +
mov [ebp+var_4] edi +
mov [ebx+14h] edi +
jmp loc_10051D6  +
push 0  +
push edi  +
push offset aReg32  +
push dword ptr [esi]  +
call sub_100151B  +
test eax eax +
jz loc_100757B  +
push 0  +
push edi  +
push offset aReg32_0  +
push dword ptr [esi]  +
call sub_100151B  +
test eax eax +
jz loc_100757B  +
push 0  +
push edi  +
push offset aReg64  +
push dword ptr [esi]  +
call sub_100151B  +
test eax eax +
jz loc_1007569  +
push 0  +
push edi  +
push offset aReg64_0  +
push dword ptr [esi]  +
call sub_100151B  +
test eax eax +
jnz loc_100759E  +
cmp dword ptr [ebx+5Ch] 0 +
jnz loc_100759E  +
mov dword ptr [ebx+5Ch] 100h +
jmp loc_10051D6  +
cmp dword ptr [ebx+5Ch] 0 +
jnz loc_100759E  +
mov dword ptr [ebx+5Ch] 200h +
jmp loc_10051D6  +
push 0Eh  +
pop eax  +
push eax  +
mov [ebp+arg_C] eax +
call sub_1003151  +
jmp loc_10051E1  +
push 67h  +
pop esi  +
push 800401E4h  +
mov [ebp+arg_C] esi +
call ds:SetLastError  +
push offset aDelete_0  +
push 0  +
push esi  +
call sub_100339E  +
push eax  +
push edi  +
call sub_10057BA  +
add esp 0Ch +
jmp loc_10051E1  +
push 800401E4h  +
call ds:SetLastError  +
push offset aDelete_0  +
push edi  +
push 67h  +
call sub_100339E  +
push eax  +
push 1  +
jmp loc_10074D9  +
***
push 57h  +
call sub_1003151  +
push 20000h  +
call ds:__iob_func  +
add eax 40h +
push eax  +
call sub_10030DC  +
push 57h  +
pop eax  +
jmp loc_10053CA  +
mov edi [esi+40h] +
push ebx  +
push 0CCh  +
jmp loc_100532F  +
push ebx  +
push 1F5h  +
call sub_100339E  +
mov edi eax +
jmp loc_1005328  +
mov esi 4C7h +
push esi  +
call sub_1003151  +
push 20000h  +
call ds:__iob_func  +
add eax 20h +
push eax  +
call sub_10030DC  +
mov eax esi +
jmp loc_10053C9  +
lea eax [ebp+hKey] +
push eax  +
call sub_1001324  +
push 0Eh  +
pop edi  +
push edi  +
call sub_1003151  +
push 20001h  +
call ds:__iob_func  +
add eax 40h +
jmp loc_10053C1  +
cmp dword ptr [esi+14h] 1 +
jnz loc_100539C  +
push ebx  +
push ebx  +
push ebx  +
lea eax [ebp+cbMaxValueNameLen] +
push eax  +
lea eax [ebp+cValues] +
push eax  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push [ebp+hKey]  +
call ds:RegQueryInfoKeyW  +
mov edi eax +
cmp edi ebx +
jnz loc_100539C  +
cmp [ebp+cValues] ebx +
jz loc_100539C  +
inc [ebp+cbMaxValueNameLen]  +
mov eax [ebp+cbMaxValueNameLen] +
lea eax [eax+eax+4] +
push eax  +
call sub_10026AF  +
mov [ebp+lpString] eax +
cmp eax ebx +
jnz loc_10076CF  +
push 0Eh  +
pop edi  +
jmp loc_100539C  +
xor edi edi +
xor esi esi +
mov [ebp+arg_0] ebx +
cmp [ebp+cValues] ebx +
jbe loc_1007722  +
mov eax [ebp+cbMaxValueNameLen] +
mov ecx [ebp+lpString] +
mov [ebp+cbValueName] eax +
add eax eax +
cmp eax ebx +
jz loc_10076F0  +
mov [ecx] bl +
inc ecx  +
dec eax  +
jnz loc_10076EA  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
lea eax [ebp+cbValueName] +
push eax  +
push [ebp+lpString]  +
push edi  +
push [ebp+hKey]  +
call ds:RegEnumValueW  +
mov esi eax +
cmp esi ebx +
jnz loc_100776B  +
push ebx  +
push [ebp+lpString]  +
push [ebp+var_18]  +
call sub_1002C06  +
cmp eax 0FFFFFFFFh +
jnz loc_1007773  +
push 0Eh  +
pop esi  +
mov [ebp+arg_0] esi +
lea eax [ebp+lpString] +
push eax  +
call sub_1002024  +
push [ebp+var_18]  +
call sub_1002DFE  +
mov edi eax +
cmp esi 0Eh +
jz loc_10077A6  +
cmp edi ebx +
jz loc_10077A6  +
xor esi esi +
mov [ebp+cbValueName] ebx +
mov [ebp+arg_0] ebx +
cmp edi ebx +
jbe loc_10077A6  +
push esi  +
push [ebp+var_18]  +
call sub_1002F4A  +
push eax  +
push [ebp+hKey]  +
call ds:RegDeleteValueW  +
cmp eax ebx +
jz loc_100777E  +
cmp [ebp+arg_0] ebx +
jnz loc_1007781  +
mov [ebp+arg_0] eax +
jmp loc_1007781  +
cmp [ebp+arg_0] ebx +
jnz loc_1007773  +
mov [ebp+arg_0] esi +
inc edi  +
cmp edi [ebp+cValues] +
jnb loc_1007722  +
jmp loc_10076DB  +
inc [ebp+cbValueName]  +
inc esi  +
cmp esi edi +
jb loc_100774A  +
cmp [ebp+cbValueName] ebx +
jz loc_10077A6  +
cmp edi [ebp+cValues] +
jnz loc_100779C  +
cmp [ebp+cbValueName] edi +
jnz loc_100779C  +
xor edi edi +
jmp loc_100539C  +
mov edi 80030201h +
jmp loc_100539C  +
mov edi [ebp+arg_0] +
jmp loc_100539C  +
cmp edi 80030201h +
jnz loc_1007660  +
push ebx  +
push 8Dh  +
call sub_100339E  +
push eax  +
call sub_1002F79  +
jmp loc_1007666  +
push 57h  +
call sub_1003151  +
push 20000h  +
call ds:__iob_func  +
add eax 40h +
push eax  +
call sub_10030DC  +
push 57h  +
pop eax  +
jmp loc_10053C9  +
***
push 20000h  +
call ds:__iob_func  +
add eax 40h +
push eax  +
call sub_10030DC  +
xor esi esi +
inc esi  +
lea eax [ebp+var_68] +
push eax  +
call sub_100307D  +
mov eax esi +
jmp loc_10052AA  +
push 2  +
call sub_1008449  +
xor esi esi +
jmp loc_100780A  +
push 0FFFFFFFFh  +
call sub_1003151  +
push 20001h  +
call ds:__iob_func  +
add eax 40h +
push eax  +
call sub_10030DC  +
jmp loc_100529A  +
cmp [ebp+var_54] 1 +
jz loc_100528F  +
push 0  +
push 0C9h  +
call sub_100339E  +
push 1  +
push 0CEh  +
mov esi eax +
call sub_100339E  +
mov edi eax +
push [ebp+var_58]  +
push edi  +
push [ebp+var_28]  +
push esi  +
call sub_10034CE  +
cmp eax 2 +
jg loc_100786B  +
cmp eax 1 +
jnz loc_1007898  +
lea eax [ebp+var_68] +
push eax  +
push 0  +
push [ebp+lpSubKey]  +
push [ebp+hKey]  +
call sub_10095B5  +
jmp loc_1005298  +
push 4C7h  +
call sub_1003151  +
push 20000h  +
call ds:__iob_func  +
add eax 20h +
push eax  +
call sub_10030DC  +
xor edi edi +
jmp loc_100529A  +
push 20000h  +
call ds:__iob_func  +
add eax 40h +
push eax  +
call sub_10030DC  +
xor eax eax +
inc eax  +
jmp loc_10052AA  +
***
xor eax eax +
mov [edi+esi*2] ax +
jmp loc_1002848  +
***
mov eax [ebp-14h] +
mov esp [ebp-18h] +
mov eax [ebp-20h] +
mov dword_100F014 eax +
xor ebx ebx +
cmp dword_100F008 ebx +
jnz loc_1007970  +
push eax  +
call ds:_exit  +
***
cmp dword_100F48C ebx +
jnz loc_100797E  +
call ds:_cexit  +
mov dword ptr [ebp-4] 0FFFFFFFEh +
mov eax dword_100F014 +
call sub_1002714  +
retn   +
***
push (offset dword_1001418+3)  +
call ds:__setusermatherr  +
pop ecx  +
jmp loc_1001D92  +
***
xor eax eax +
inc eax  +
retn   +
***
mov esp [ebp-18h] +
***
xor eax eax +
mov [ebp-1Ch] eax +
jmp loc_1002B8B  +
***
push 2  +
pop eax  +
pop ebp  +
retn   +
***
test eax ebx +
jz loc_100144C  +
not eax  +
mov dword_100F004 eax +
jmp loc_10014A2  +
***
call ds:GetLastError  +
test eax eax +
jnz loc_1007A0E  +
push 42Bh  +
jmp loc_1007A08  +
test eax eax +
jnz loc_1007A0E  +
push 8  +
call ds:SetLastError  +
xor eax eax +
pop edi  +
retn   +
***
call esi  +
test eax eax +
jnz loc_1002FC7  +
push 57h  +
call ds:SetLastError  +
jmp loc_1002FC7  +
call esi  +
test eax eax +
jnz loc_1002FC7  +
push 8  +
jmp loc_1007A1E  +
***
cmp [ebp+lpString] edi +
jz loc_1007A4F  +
push [ebp+lpString]  +
call ds:LocalFree  +
call esi  +
test eax eax +
jnz loc_1007A4F  +
push 8  +
call ebx  +
call esi  +
test eax eax +
jnz loc_1007A59  +
push 8  +
call ebx  +
xor eax eax +
jmp loc_10031E1  +
***
call ds:GetLastError  +
test eax eax +
jnz loc_1007A72  +
push 57h  +
call ds:SetLastError  +
xor eax eax +
jmp loc_1001511  +
dec edi  +
jnz loc_100150D  +
push 0FFFFFFF4h  +
jmp loc_1003B2C  +
***
xor eax eax +
jmp loc_1002456  +
***
or eax 0FFFFFFFFh +
jmp loc_100487C  +
test eax eax +
jnz loc_1007AA2  +
push 57h  +
call ds:SetLastError  +
xor eax eax +
jmp loc_1004894  +
***
mov ecx 409h +
jmp loc_1001558  +
test eax eax +
jnz loc_1007ABF  +
push 57h  +
call ds:SetLastError  +
xor eax eax +
jmp loc_100156A  +
***
call ds:GetLastError  +
test eax eax +
jnz loc_10020F5  +
push 57h  +
jmp loc_1007ADA  +
push 6  +
call ds:SetLastError  +
jmp loc_10020F5  +
***
mov eax [ebp-14h] +
mov esp [ebp-18h] +
cmp dword ptr [ebp-1Ch] 0C0000017h +
jz loc_1007B35  +
cmp dword ptr [ebp-1Ch] 0C0000005h +
jnz loc_1007B35  +
push 570h  +
call ds:SetLastError  +
call sub_1003182  +
jmp loc_1007B47  +
call ds:GetLastError  +
test eax eax +
jnz loc_1007B47  +
push 8  +
call ds:SetLastError  +
mov dword ptr [ebp-4] 0FFFFFFFEh +
jmp loc_10026F1  +
***
call ds:GetLastError  +
test eax eax +
jnz loc_10020BA  +
push 57h  +
call ds:SetLastError  +
jmp loc_10020BA  +
***
test eax eax +
jnz loc_1007B7A  +
push 57h  +
call ds:SetLastError  +
xor eax eax +
jmp loc_10055D1  +
***
mov [ecx] edi +
jmp loc_1002D5C  +
***
mov [ecx] edi +
jmp loc_10029D1  +
***
mov [ecx] eax +
jmp loc_10041FB  +
***
call ds:GetLastError  +
test eax eax +
jnz loc_1001A41  +
push 57h  +
jmp loc_1001A3B  +
***
test eax eax +
jnz loc_100475A  +
push 57h  +
jmp loc_1004754  +
***
cmp [ebp+arg_8] 1 +
push ebx  +
lea eax [edi+ecx*2] +
push eax  +
jnz loc_1007BCD  +
call ds:StrStrIW  +
jmp loc_1007BD3  +
call ds:StrStrW  +
test eax eax +
jz loc_10015BF  +
sub eax edi +
sar eax 1 +
jmp loc_10015CD  +
test eax eax +
jnz loc_10015CA  +
push 57h  +
jmp loc_10015C4  +
***
call ds:GetLastError  +
test eax eax +
jnz loc_1007C05  +
push 57h  +
call ds:SetLastError  +
xor eax eax +
jmp loc_100207B  +
push 80004003h  +
call ds:SetLastError  +
jmp loc_1002F12  +
***
call ds:WSACleanup  +
jmp loc_100201A  +
***
movzx eax ax +
push eax  +
call ds:SetLastError  +
jmp loc_1002CD9  +
***
movzx eax ax +
push eax  +
call ds:SetLastError  +
jmp loc_10022F1  +
***
movzx eax ax +
push eax  +
call ds:SetLastError  +
jmp loc_10028FF  +
***
call esi  +
add eax 40h +
cmp [ebp+hConsoleOutput] eax +
jnz loc_1007CFC  +
push 0FFFFFFF4h  +
jmp loc_1003B80  +
call ds:GetLastError  +
cmp eax 8 +
jnz loc_1007CF8  +
mov esi [ebp+lpString] +
push edi  +
push esi  +
call sub_100243E  +
mov [ebp+var_10] eax +
mov [ebp+var_C] edi +
cmp eax edi +
jbe loc_1002574  +
mov [ebp+cchWideChar] esi +
mov esi 400h +
mov eax [ebp+var_10] +
sub eax [ebp+var_C] +
mov [ebp+lpString] esi +
cmp eax esi +
ja loc_1007CA8  +
mov [ebp+lpString] eax +
push edi  +
lea eax [ebp+NumberOfCharsWritten] +
push eax  +
push [ebp+lpString]  +
push [ebp+cchWideChar]  +
push [ebp+hConsoleOutput]  +
call ebx  +
test eax eax +
jz loc_1007CDC  +
mov eax [ebp+lpString] +
cmp eax [ebp+NumberOfCharsWritten] +
jnz loc_1007CDC  +
add [ebp+var_C] esi +
mov eax [ebp+var_C] +
add [ebp+cchWideChar] 800h +
cmp eax [ebp+var_10] +
jnb loc_1002574  +
jmp loc_1007C98  +
call ds:__iob_func  +
add eax 40h +
push eax  +
call sub_100D7CD  +
call sub_1001F83  +
push 1  +
call ds:ExitProcess  +
call esi  +
jmp loc_1007CE2  +
call ds:GetLastError  +
test eax eax +
jnz loc_1007D64  +
push 42Bh  +
jmp loc_1007D5E  +
add eax 0FFFFFF01h +
cmp eax 3 +
jbe loc_1007D1E  +
shr eax 1 +
sub [ebp+cchWideChar] eax +
jmp loc_1007D21  +
dec [ebp+cchWideChar]  +
mov [ebp+NumberOfCharsWritten] edi +
cmp [ebp+cchWideChar] edi +
jnz loc_10024E1  +
call ds:GetLastError  +
test eax eax +
jnz loc_1003BC1  +
push 42Bh  +
call ds:SetLastError  +
jmp loc_1003BC1  +
add eax 20h +
jmp loc_1007CE5  +
mov [ebp+cchWideChar] eax +
jmp loc_1002515  +
test eax eax +
jnz loc_1007D64  +
push 57h  +
call ds:SetLastError  +
xor eax eax +
jmp loc_1002577  +
***
lea eax [ebp+arg_0] +
push eax  +
call sub_1002024  +
jmp loc_10032A9  +
push 0  +
push ebx  +
call sub_100243E  +
mov edi eax +
inc edi  +
jmp loc_100264D  +
push edi  +
push ebx  +
push dword ptr [esi+0Ch]  +
call sub_10022BD  +
jmp loc_10026A0  +
***
push 0  +
push [ebp+lpStart]  +
call sub_100243E  +
jmp loc_1002EC6  +
mov esi ebx +
jmp loc_1002A98  +
xor ecx ecx +
mov [eax] cx +
jmp loc_1002ACB  +
push 0  +
push [ebp+var_18]  +
call sub_100243E  +
inc eax  +
push eax  +
push [ebp+var_18]  +
push ebx  +
call sub_10022BD  +
jmp loc_1002AD4  +
***
call ds:GetLastError  +
test eax eax +
jnz loc_1007DE4  +
push 57h  +
call ds:SetLastError  +
xor eax eax +
jmp loc_1005815  +
push [ebp+lpString]  +
call sub_1002F79  +
xor eax eax +
inc eax  +
jmp loc_1005815  +
movzx eax ax +
push eax  +
call ds:SetLastError  +
xor eax eax +
jmp loc_1005814  +
call ds:GetLastError  +
test eax eax +
jnz loc_1007E05  +
push 8  +
jmp loc_1007DFF  +
***
call ds:GetLastError  +
test eax eax +
jnz loc_1007E2C  +
push 57h  +
call ds:SetLastError  +
mov eax offset dword_1001314 +
jmp loc_1003463  +
push 1  +
push dword_100F01C  +
call sub_10018D2  +
cmp eax ebx +
jz loc_1007E5D  +
mov ecx [ebp+arg_8] +
sub ecx esi +
inc ecx  +
push ecx  +
push eax  +
call sub_1003207  +
cmp eax 0FFFFFFFFh +
jnz loc_10033F4  +
call ds:GetLastError  +
test eax eax +
jnz loc_1007E6F  +
push 8  +
call ds:SetLastError  +
mov eax offset dword_1001314 +
jmp loc_1003462  +
call ds:GetLastError  +
cmp eax 716h +
jnz loc_1007EBC  +
push ebx  +
push ebx  +
lea eax [ebp+hMem] +
push eax  +
push ebx  +
push [ebp+dwMessageId]  +
push [ebp+lpSource]  +
push 0B00h  +
call ds:FormatMessageW  +
cmp eax ebx +
jz loc_1007EBC  +
mov edi [ebp+hMem] +
jmp loc_1003427  +
call ds:GetLastError  +
test eax eax +
jnz loc_1007EBC  +
push 8  +
call ds:SetLastError  +
mov eax offset dword_1001314 +
jmp loc_1003461  +
push [ebp+hMem]  +
call ds:LocalFree  +
mov [ebp+hMem] ebx +
jmp loc_1003451  +
***
push esi  +
push dword_100F01C  +
call sub_10018D2  +
cmp eax ebx +
jz loc_10049E0  +
xor ecx ecx +
inc ecx  +
sub ecx edi +
push ecx  +
push eax  +
call sub_1003207  +
cmp eax 0FFFFFFFFh +
jnz loc_1004902  +
jmp loc_10049E0  +
lea ecx [edi+edi] +
cmp ecx eax +
jnb loc_100496B  +
cmp eax ebx +
lea eax [edi+edi] +
push eax  +
jnz loc_1007F6C  +
call sub_10026AF  +
mov [esi+0Ch] eax +
cmp eax ebx +
jmp loc_1007F77  +
push 10h  +
call sub_10026AF  +
mov esi eax +
mov [ebp+var_8] esi +
cmp esi ebx +
jz loc_10049E0  +
push 7  +
push edi  +
mov [esi+8] ebx +
push esi  +
mov [esi+0Ch] ebx +
call sub_1002CA5  +
push esi  +
push ebx  +
push 3  +
push dword_100F01C  +
call sub_1002E1C  +
test eax eax +
jnz loc_1004933  +
lea eax [ebp+var_8] +
push eax  +
call sub_1002024  +
jmp loc_10049E0  +
lea eax [esi+0Ch] +
push eax  +
call sub_100D7F8  +
test eax eax +
jz loc_10049E0  +
mov [esi+8] edi +
jmp loc_100496B  +
test eax eax +
jnz loc_10049F6  +
push 8  +
jmp loc_1007FA6  +
call ds:wcstol  +
jmp loc_10049B9  +
test eax eax +
jnz loc_10049F6  +
push 57h  +
call ds:SetLastError  +
jmp loc_10049F6  +
***
push esi  +
push dword_100F01C  +
call sub_10018D2  +
cmp eax ebx +
jz loc_1004B34  +
xor ecx ecx +
inc ecx  +
sub ecx edi +
push ecx  +
push eax  +
call sub_1003207  +
cmp eax 0FFFFFFFFh +
jnz loc_1004A4C  +
jmp loc_1004B34  +
lea ecx [edi+edi] +
cmp ecx eax +
jnb loc_1004AB5  +
cmp eax ebx +
lea eax [edi+edi] +
push eax  +
jnz loc_1008046  +
call sub_10026AF  +
mov [esi+0Ch] eax +
cmp eax ebx +
jmp loc_1008051  +
push 10h  +
call sub_10026AF  +
mov esi eax +
mov [ebp+var_8] esi +
cmp esi ebx +
jz loc_1004B34  +
push 7  +
push edi  +
mov [esi+8] ebx +
push esi  +
mov [esi+0Ch] ebx +
call sub_1002CA5  +
push esi  +
push ebx  +
push 3  +
push dword_100F01C  +
call sub_1002E1C  +
test eax eax +
jnz loc_1004A7D  +
lea eax [ebp+var_8] +
push eax  +
call sub_1002024  +
jmp loc_1004B34  +
lea eax [esi+0Ch] +
push eax  +
call sub_100D7F8  +
test eax eax +
jz loc_1004B34  +
mov [esi+8] edi +
jmp loc_1004AB5  +
test eax eax +
jnz loc_1004B4A  +
push 8  +
jmp loc_1008080  +
call ds:wcstol  +
jmp loc_1004B0E  +
test eax eax +
jnz loc_1004B4A  +
push 57h  +
call ds:SetLastError  +
jmp loc_1004B4A  +
***
call ds:GetLastError  +
test eax eax +
jnz loc_10080AB  +
push 8  +
jmp loc_10080A5  +
movzx eax ax +
push eax  +
jmp loc_10080A5  +
test eax eax +
jnz loc_10080AB  +
push 57h  +
call ds:SetLastError  +
xor eax eax +
jmp loc_10027E1  +
***
push [ebp+lpSource]  +
jmp loc_100416F  +
or [ebp+var_8] 0FFFFFFFFh +
lea eax [ebp+arg_10] +
mov [ebp+Arguments] eax +
xor eax eax +
cmp [ebp+var_8] 0FFFFFFFFh +
push 1  +
setnz al  +
dec eax  +
and eax 800h +
add eax 800h +
add ebx eax +
push ebx  +
push 0  +
push 3  +
call sub_1002593  +
mov edi eax +
test edi edi +
jz loc_1008133  +
lea eax [ebp+Arguments] +
push eax  +
lea eax [ebx-1] +
push eax  +
push edi  +
push 0  +
push 0  +
push [ebp+lpSource]  +
push 400h  +
call ds:FormatMessageW  +
mov [ebp+var_8] eax +
test eax eax +
jnz loc_1008123  +
call ds:GetLastError  +
test eax eax +
jz loc_1008141  +
call ds:GetLastError  +
cmp eax 7Ah +
jnz loc_100815B  +
and [ebp+Arguments] 0 +
cmp [ebp+var_8] 0 +
jnz loc_100416E  +
jmp loc_10080BE  +
call ds:GetLastError  +
test eax eax +
jnz loc_100815B  +
push 8  +
jmp loc_1008155  +
xor eax eax +
inc eax  +
jmp loc_1004177  +
movzx eax ax +
push eax  +
jmp loc_1008155  +
test eax eax +
jnz loc_100815B  +
push 57h  +
call ds:SetLastError  +
xor eax eax +
jmp loc_1004177  +
***
call ds:GetLastError  +
test eax eax +
jnz loc_100817C  +
push 8  +
jmp loc_1008176  +
test eax eax +
jnz loc_100817C  +
push 57h  +
call ds:SetLastError  +
xor eax eax +
jmp loc_100466E  +
***
xor eax eax +
jmp loc_1005503  +
push 6  +
call sub_100D75C  +
mov esi eax +
cmp esi edi +
jz loc_10081A6  +
push edi  +
push esi  +
call sub_100243E  +
test eax eax +
jnz loc_1005482  +
call ds:GetLastError  +
test eax eax +
jnz loc_10081CA  +
push 57h  +
call ds:SetLastError  +
jmp loc_10081CA  +
push esi  +
call sub_10045E7  +
mov esi eax +
cmp esi edi +
jnz loc_1005482  +
xor eax eax +
jmp loc_1005502  +
inc eax  +
jmp loc_1005502  +
cmp dword_100F464 5 +
push 7Fh  +
pop eax  +
jnz loc_10054AD  +
cmp dword_100F468 edi +
jnz loc_10054AD  +
mov eax 409h +
jmp loc_10054AD  +
or edi 10000h +
jmp loc_10054C4  +
or edi 2 +
jmp loc_10054D0  +
or edi 4 +
jmp loc_10054DC  +
or edi 20000h +
jmp loc_10054E9  +
or edi ecx +
jmp loc_10054F5  +
***
call sub_1003182  +
jmp loc_10030FF  +
push 1389h  +
jmp loc_100824E  +
push 138Ah  +
jmp loc_100824E  +
push 138Ch  +
jmp loc_100824E  +
push 138Bh  +
call sub_100D930  +
push eax  +
push offset aS_5  +
push ebx  +
push ebx  +
push esi  +
call sub_1004105  +
add esp 14h +
jmp loc_1003126  +
test eax eax +
jnz loc_1008275  +
push 57h  +
call ds:SetLastError  +
xor eax eax +
jmp loc_1003135  +
***
xor eax eax +
retn   +
***
cmp eax 90000h +
jz loc_10017A6  +
cmp eax 0A0000h +
jnz loc_10017B1  +
jmp loc_10017A6  +
***
or eax 0FFFFFFFFh +
jmp locret_1002C6B  +
lea eax [ebp+var_4] +
push eax  +
call sub_1002024  +
jmp loc_1002C6F  +
***
lea eax [ebp+var_4] +
push eax  +
call sub_1001820  +
jmp loc_1001737  +
***
or eax 0FFFFFFFFh +
jmp loc_1003240  +
***
xor eax eax +
jmp loc_100305A  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ds:__iob_func +
push edi  +
push offset asc_1003C30  +
call esi  +
push 20h  +
pop edi  +
add eax edi +
push eax  +
call sub_100245F  +
mov eax [ebp+arg_0] +
cmp eax 0Bh +
ja loc_10084E0  +
jmp ds:off_10084F5[eax*4]  +
push 12Dh  +
call esi  +
add eax edi +
push eax  +
call sub_100D948  +
push 12Eh  +
call esi  +
add eax edi +
push eax  +
call sub_100D948  +
push 12Fh  +
jmp loc_10084E2  +
push 4  +
call esi  +
add eax edi +
push eax  +
call sub_100D948  +
push 5  +
jmp loc_10084E2  +
push 6  +
jmp loc_10084E2  +
push 7  +
jmp loc_10084E2  +
push 8  +
jmp loc_10084E2  +
push 9  +
jmp loc_10084E2  +
push 0Ah  +
jmp loc_10084E2  +
push 0Bh  +
jmp loc_10084E2  +
push 0Ch  +
call esi  +
add eax edi +
push eax  +
call sub_100D948  +
push 0Dh  +
jmp loc_10084E2  +
push 0Eh  +
jmp loc_10084E2  +
push 0Fh  +
jmp loc_10084E2  +
push 10h  +
jmp loc_10084E2  +
push 2  +
call esi  +
add eax edi +
push eax  +
call sub_100D948  +
xor eax eax +
pop edi  +
inc eax  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
and [ebp+lpPathName] 0 +
and [ebp+lpFileName] 0 +
push ebx  +
push edi  +
mov edi 20Ah +
mov ebx 104h +
push edi  +
mov [ebp+nBufferLength] ebx +
call sub_10026AF  +
mov [ebp+lpPathName] eax +
test eax eax +
jnz loc_1008565  +
push 0Eh  +
call ds:SetLastError  +
xor eax eax +
jmp loc_10086AE  +
push esi  +
mov esi ds:GetTempPathW +
push eax  +
push ebx  +
call esi  +
test eax eax +
jz loc_100869D  +
cmp eax ebx +
jb loc_10085BF  +
add eax 2 +
mov [ebp+nBufferLength] eax +
lea eax [eax+eax+2] +
push eax  +
lea eax [ebp+lpPathName] +
push eax  +
call sub_100D7F8  +
test eax eax +
jz loc_10085CE  +
cmp [ebp+lpPathName] 0 +
jz loc_10085D7  +
push [ebp+lpPathName]  +
push [ebp+nBufferLength]  +
call esi  +
test eax eax +
jz loc_100869D  +
cmp eax [ebp+nBufferLength] +
jb loc_10085BF  +
lea eax [ebp+lpPathName] +
push eax  +
call sub_1002024  +
push 800300FDh  +
jmp loc_10085D9  +
push edi  +
call sub_10026AF  +
xor esi esi +
mov [ebp+lpFileName] eax +
cmp eax esi +
jnz loc_10085E4  +
lea eax [ebp+lpPathName] +
push eax  +
call sub_1002024  +
push 0Eh  +
call ds:SetLastError  +
jmp loc_10086A6  +
mov edi ds:GetTempFileNameW +
push eax  +
push esi  +
push offset PrefixString  +
push [ebp+lpPathName]  +
call edi  +
test eax eax +
jnz loc_1008687  +
cmp [ebp+lpString] esi +
jz loc_1008679  +
call ds:GetLastError  +
cmp eax 5 +
jnz loc_1008679  +
push eax  +
call ds:SetLastError  +
push esi  +
push [ebp+lpString]  +
call sub_100243E  +
mov esi eax +
jmp loc_100862C  +
mov eax [ebp+lpString] +
cmp word ptr [eax+esi*2] 5Ch +
jz loc_1008631  +
dec esi  +
js loc_1008653  +
jmp loc_1008622  +
cmp esi [ebp+nBufferLength] +
jl loc_1008647  +
lea eax [esi+6] +
push eax  +
lea eax [ebp+lpPathName] +
push eax  +
call sub_100D7F8  +
test eax eax +
jz loc_1008679  +
push esi  +
push [ebp+lpString]  +
push [ebp+lpPathName]  +
call sub_10022BD  +
cmp esi 0FFFFFFFFh +
jnz loc_1008666  +
push ebx  +
push offset dword_10086B4  +
push [ebp+lpPathName]  +
call sub_10022BD  +
push [ebp+lpFileName]  +
push 0  +
push offset PrefixString  +
push [ebp+lpPathName]  +
call edi  +
test eax eax +
jnz loc_1008687  +
lea eax [ebp+lpPathName] +
push eax  +
call sub_1002024  +
lea eax [ebp+lpFileName] +
jmp loc_10086A0  +
lea eax [ebp+lpPathName] +
push eax  +
call sub_1002024  +
push [ebp+lpFileName]  +
call ds:DeleteFileW  +
test eax eax +
jnz loc_10086AA  +
lea eax [ebp+lpPathName] +
push eax  +
call sub_1002024  +
xor eax eax +
jmp loc_10086AD  +
mov eax [ebp+lpFileName] +
pop esi  +
pop edi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
xor ebx ebx +
push esi  +
push edi  +
cmp [ebp+lpString] ebx +
jz loc_1008777  +
mov edi [ebp+arg_4] +
cmp edi ebx +
jz loc_1008777  +
push ebx  +
xor esi esi +
inc esi  +
push esi  +
push offset asc_10012E0  +
push [ebp+lpString]  +
mov [ebp+arg_4] esi +
call sub_100151B  +
test eax eax +
jnz loc_1008726  +
push 80040152h  +
call ds:SetLastError  +
mov eax [edi] +
imul eax eax +
add eax offset aQuery +
push eax  +
push ebx  +
push 68h  +
call sub_100339E  +
push eax  +
push esi  +
call sub_10057BA  +
add esp 0Ch +
jmp loc_100877E  +
push ebx  +
push esi  +
push offset a_  +
push [ebp+lpString]  +
call sub_100151B  +
test eax eax +
jnz loc_100873C  +
mov [ebp+arg_4] ebx +
push ebx  +
push [ebp+lpString]  +
call sub_100243E  +
mov esi eax +
inc esi  +
lea eax [esi+esi] +
push eax  +
call sub_10026AF  +
mov [edi+38h] eax +
cmp eax ebx +
jnz loc_100875C  +
push 0FFFFFFFFh  +
jmp loc_1008779  +
push esi  +
push [ebp+lpString]  +
push eax  +
call sub_10022BD  +
mov eax [ebp+arg_4] +
push ebx  +
mov [edi+8] eax +
call sub_1003151  +
xor eax eax +
inc eax  +
jmp loc_1008780  +
push 57h  +
call sub_1003151  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
xor ecx ecx +
push esi  +
push edi  +
cmp [ebp+arg_0] ecx +
jz loc_1008990  +
mov esi [ebp+arg_4] +
cmp esi ecx +
jz loc_1008990  +
mov ebx [ebp+arg_8] +
cmp ebx ecx +
jz loc_1008990  +
cmp [ebp+arg_C] ecx +
jz loc_1008990  +
cmp [ebp+arg_10] ecx +
jz loc_1008990  +
mov eax [ebx] +
cmp eax ecx +
jl loc_1008990  +
cmp eax 0Ch +
jge loc_1008990  +
xor edi edi +
inc edi  +
cmp [ebp+arg_0] 3 +
jb loc_100882F  +
push edi  +
push offset a??HH  +
push dword ptr [esi+8]  +
call sub_100272D  +
cmp eax edi +
jnz loc_100882F  +
cmp [ebp+arg_0] 3 +
jnz loc_1008807  +
mov eax [ebp+arg_10] +
mov [eax] edi +
mov eax edi +
jmp loc_1008999  +
push 800401E4h  +
call ds:SetLastError  +
push offset aCopy  +
push 0  +
push 67h  +
call sub_100339E  +
push eax  +
push edi  +
call sub_10057BA  +
add esp 0Ch +
jmp loc_1008997  +
mov eax [ebp+arg_0] +
add eax 0FFFFFFFCh +
cmp eax 3 +
ja loc_1008807  +
push 0  +
push edi  +
push offset aCopy_0  +
push dword ptr [esi+4]  +
call sub_100151B  +
test eax eax +
jnz loc_1008990  +
push ebx  +
push dword ptr [esi+8]  +
call sub_100236F  +
test eax eax +
jz loc_1008997  +
push [ebp+arg_C]  +
push dword ptr [esi+0Ch]  +
call sub_100236F  +
test eax eax +
jz loc_1008997  +
push 4  +
pop eax  +
mov [ebp+arg_10] eax +
cmp [ebp+arg_0] eax +
ja loc_1008889  +
jmp loc_1008800  +
mov esi [ebp+arg_4] +
mov eax [ebp+arg_10] +
push 0  +
push edi  +
lea esi [esi+eax*4] +
push offset aF  +
push dword ptr [esi]  +
call sub_100151B  +
test eax eax +
jz loc_1008970  +
push 0  +
push edi  +
push offset aF_0  +
push dword ptr [esi]  +
call sub_100151B  +
test eax eax +
jz loc_1008970  +
push 0  +
push edi  +
push offset aS_0  +
push dword ptr [esi]  +
call sub_1004857  +
test eax eax +
jz loc_1008962  +
push 0  +
push edi  +
push offset aS_1  +
push dword ptr [esi]  +
call sub_1004857  +
test eax eax +
jz loc_1008962  +
push 0  +
push edi  +
push offset aReg32  +
push dword ptr [esi]  +
call sub_100151B  +
test eax eax +
jz loc_1008951  +
push 0  +
push edi  +
push offset aReg32_0  +
push dword ptr [esi]  +
call sub_100151B  +
test eax eax +
jz loc_1008951  +
push 0  +
push edi  +
push offset aReg64  +
push dword ptr [esi]  +
call sub_100151B  +
test eax eax +
jz loc_1008937  +
push 0  +
push edi  +
push offset aReg64_0  +
push dword ptr [esi]  +
call sub_100151B  +
test eax eax +
jnz loc_1008807  +
cmp dword ptr [ebx+5Ch] 0 +
jnz loc_1008807  +
mov eax 100h +
mov ecx [ebp+arg_C] +
mov [ebx+5Ch] eax +
mov [ecx+5Ch] eax +
jmp loc_100897C  +
cmp dword ptr [ebx+5Ch] 0 +
jnz loc_1008807  +
mov eax 200h +
jmp loc_1008946  +
cmp [ebx+18h] edi +
jz loc_1008807  +
mov [ebx+18h] edi +
jmp loc_100897C  +
cmp [ebx+10h] edi +
jz loc_1008807  +
mov [ebx+10h] edi +
inc [ebp+arg_10]  +
mov eax [ebp+arg_10] +
cmp eax [ebp+arg_0] +
jnb loc_1008800  +
jmp loc_1008886  +
push 57h  +
call sub_1003151  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push ebx  +
push esi  +
push edi  +
xor edi edi +
mov [ebp+dwType] edi +
mov [ebp+cbData] edi +
mov [ebp+lpData] edi +
cmp [ebp+hKey] edi +
jz loc_1008B33  +
cmp [ebp+lpValueName] edi +
jz loc_1008B33  +
cmp [ebp+arg_8] edi +
jz loc_1008B33  +
cmp [ebp+lpString] edi +
jz loc_1008B33  +
cmp [ebp+arg_10] edi +
jz loc_1008B33  +
cmp dword ptr [ebp+arg_14] edi +
jz loc_1008B33  +
mov esi ds:RegQueryValueExW +
lea eax [ebp+cbData] +
push eax  +
push edi  +
lea eax [ebp+dwType] +
push eax  +
push edi  +
push [ebp+lpValueName]  +
push [ebp+hKey]  +
call esi  +
mov ebx eax +
cmp ebx edi +
jz loc_1008A26  +
push ebx  +
call sub_1003151  +
mov eax ebx +
jmp loc_1008B3D  +
mov eax [ebp+cbData] +
inc eax  +
push eax  +
call sub_10026AF  +
mov [ebp+lpData] eax +
cmp eax edi +
jnz loc_1008A45  +
push 0Eh  +
call sub_1003151  +
push 0Eh  +
jmp loc_1008B3C  +
lea ecx [ebp+cbData] +
push ecx  +
push eax  +
lea eax [ebp+dwType] +
push eax  +
push edi  +
push [ebp+lpValueName]  +
push [ebp+hKey]  +
call esi  +
mov ebx eax +
cmp ebx edi +
jz loc_1008A68  +
lea eax [ebp+lpData] +
push eax  +
call sub_1002024  +
jmp loc_1008A19  +
mov ebx [ebp+arg_10] +
cmp [ebx] edi +
jnz loc_1008AF3  +
push edi  +
push edi  +
push edi  +
push edi  +
push [ebp+lpString]  +
push [ebp+arg_8]  +
call esi  +
test eax eax +
jnz loc_1008AF3  +
push edi  +
push 0CBh  +
call sub_100339E  +
push 1  +
push 0CEh  +
mov [ebp+hKey] eax +
call sub_100339E  +
push edi  +
push [ebp+lpString]  +
mov [ebp+lpValueName] eax +
call sub_100243E  +
test eax eax +
jnz loc_1008ABB  +
push 2  +
push 1F5h  +
call sub_100339E  +
jmp loc_1008ABE  +
mov eax [ebp+lpString] +
push eax  +
push dword ptr [ebp+arg_14]  +
push offset aSS  +
push 2  +
call sub_10057BA  +
add esp 10h +
call sub_1002F1E  +
mov esi eax +
push dword ptr [ebx]  +
push [ebp+lpValueName]  +
push esi  +
push [ebp+hKey]  +
call sub_10034CE  +
cmp eax 3 +
jg loc_1008AD8  +
jnz loc_1008B16  +
mov dword ptr [ebx] 1 +
push [ebp+cbData]  +
push [ebp+lpData]  +
push [ebp+dwType]  +
push edi  +
push [ebp+lpString]  +
push [ebp+arg_8]  +
call ds:RegSetValueExW  +
mov esi eax +
lea eax [ebp+lpData] +
push eax  +
call sub_1002024  +
jmp loc_1008B2F  +
cmp eax 1 +
jz loc_1008AF3  +
lea eax [ebp+lpData] +
push eax  +
call sub_1002024  +
mov esi 4C7h +
push esi  +
call sub_1003151  +
mov eax esi +
jmp loc_1008B3D  +
push 57h  +
call sub_1003151  +
push 57h  +
pop eax  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
push ebx  +
push esi  +
xor esi esi +
push edi  +
mov [ebp+cValues] esi +
mov [ebp+cSubKeys] esi +
mov [ebp+cbMaxSubKeyLen] esi +
mov [ebp+cbMaxValueNameLen] esi +
mov [ebp+cbName] esi +
mov [ebp+dwDisposition] esi +
mov [ebp+phkResult] esi +
mov [ebp+var_1C] esi +
mov [ebp+lpString] esi +
mov dword ptr [ebp+var_10] esi +
mov [ebp+var_14] esi +
cmp [ebp+hKey] esi +
jz loc_1008E83  +
cmp dword ptr [ebp+arg_4] esi +
jz loc_1008E83  +
cmp [ebp+arg_8] esi +
jz loc_1008E83  +
cmp [ebp+arg_C] esi +
jz loc_1008E83  +
cmp [ebp+arg_10] esi +
jz loc_1008E83  +
push esi  +
push esi  +
push esi  +
lea eax [ebp+cbMaxValueNameLen] +
push eax  +
lea eax [ebp+cValues] +
push eax  +
push esi  +
lea eax [ebp+cbMaxSubKeyLen] +
push eax  +
lea eax [ebp+cSubKeys] +
push eax  +
push esi  +
push esi  +
push esi  +
push [ebp+hKey]  +
call ds:RegQueryInfoKeyW  +
mov edi eax +
cmp edi esi +
jnz loc_1008E86  +
mov eax [ebp+cbMaxSubKeyLen] +
cmp [ebp+cSubKeys] esi +
jz loc_1008BEF  +
cmp eax esi +
jnz loc_1008BEF  +
mov [ebp+cbMaxSubKeyLen] 100h +
jmp loc_1008BFB  +
cmp eax 100h +
jnb loc_1008BFB  +
add eax eax +
mov [ebp+cbMaxSubKeyLen] eax +
inc [ebp+cbMaxValueNameLen]  +
mov eax [ebp+cbMaxValueNameLen] +
add eax eax +
push eax  +
call sub_10026AF  +
mov [ebp+lpString] eax +
cmp eax esi +
jnz loc_1008C17  +
push 0Eh  +
jmp loc_1008E85  +
xor edi edi +
xor ebx ebx +
cmp [ebp+cValues] esi +
jbe loc_1008C6E  +
cmp edi esi +
jnz loc_1008C6E  +
mov eax [ebp+cbMaxValueNameLen] +
push esi  +
push esi  +
push esi  +
push esi  +
mov [ebp+cbName] eax +
lea eax [ebp+cbName] +
push eax  +
push [ebp+lpString]  +
push ebx  +
push [ebp+hKey]  +
call ds:RegEnumValueW  +
mov edi eax +
cmp edi esi +
jnz loc_1008C68  +
push dword ptr [ebp+arg_4]  +
push [ebp+arg_10]  +
push [ebp+lpString]  +
push [ebp+arg_8]  +
push [ebp+lpString]  +
push [ebp+hKey]  +
call sub_10089AF  +
mov edi eax +
cmp edi 4C7h +
jnz loc_1008C68  +
xor edi edi +
inc ebx  +
cmp ebx [ebp+cValues] +
jb loc_1008C20  +
lea eax [ebp+lpString] +
push eax  +
call sub_1002024  +
cmp [ebp+arg_14] esi +
jz loc_1008E86  +
cmp edi esi +
jnz loc_1008E86  +
inc [ebp+cbMaxSubKeyLen]  +
mov eax [ebp+cbMaxSubKeyLen] +
add eax eax +
push eax  +
call sub_10026AF  +
mov [ebp+lpString] eax +
cmp eax esi +
jnz loc_1008CA4  +
push 8  +
jmp loc_1008E85  +
xor ebx ebx +
mov [ebp+phkResult] esi +
mov [ebp+var_1C] esi +
cmp [ebp+cSubKeys] esi +
jbe loc_1008E66  +
mov eax [ebp+cbMaxSubKeyLen] +
push esi  +
push esi  +
push esi  +
push esi  +
mov [ebp+cbName] eax +
lea eax [ebp+cbName] +
push eax  +
push [ebp+lpString]  +
push ebx  +
push [ebp+hKey]  +
call ds:RegEnumKeyExW  +
mov edi eax +
cmp edi esi +
jnz loc_1008E4A  +
lea eax [ebp+phkResult] +
push eax  +
mov eax [ebp+arg_1C] +
or eax 20019h +
push eax  +
push esi  +
push [ebp+lpString]  +
push [ebp+hKey]  +
call ds:RegOpenKeyExW  +
mov edi eax +
cmp edi esi +
jnz loc_1008E4A  +
lea eax [ebp+dwDisposition] +
push eax  +
lea eax [ebp+var_1C] +
push eax  +
mov eax [ebp+arg_1C] +
push esi  +
or eax 0F003Fh +
push eax  +
push esi  +
push esi  +
push esi  +
push [ebp+lpString]  +
push [ebp+arg_8]  +
call ds:RegCreateKeyExW  +
mov edi eax +
cmp edi esi +
jnz loc_1008E4A  +
push esi  +
push [ebp+lpString]  +
call sub_100243E  +
push esi  +
push dword ptr [ebp+arg_4]  +
mov edi eax +
call sub_100243E  +
lea eax [edi+eax+3] +
mov [ebp+cbName] eax +
add eax eax +
push eax  +
call sub_10026AF  +
mov dword ptr [ebp+var_10] eax +
cmp eax esi +
jz loc_1008E47  +
push esi  +
push dword ptr [ebp+arg_4]  +
call sub_100243E  +
test eax eax +
jbe loc_1008D82  +
push [ebp+cbName]  +
push dword ptr [ebp+arg_4]  +
push dword ptr [ebp+var_10]  +
call sub_10022BD  +
push [ebp+cbName]  +
push offset dword_10011EC  +
push dword ptr [ebp+var_10]  +
call sub_10028CB  +
push [ebp+cbName]  +
push [ebp+lpString]  +
push dword ptr [ebp+var_10]  +
call sub_10028CB  +
push esi  +
push [ebp+lpString]  +
call sub_100243E  +
push esi  +
push [ebp+arg_C]  +
mov edi eax +
call sub_100243E  +
lea eax [edi+eax+3] +
mov [ebp+cbName] eax +
add eax eax +
push eax  +
call sub_10026AF  +
mov [ebp+var_14] eax +
cmp eax esi +
jz loc_1008E47  +
push esi  +
push [ebp+arg_C]  +
call sub_100243E  +
test eax eax +
jbe loc_1008DE9  +
push [ebp+cbName]  +
push [ebp+arg_C]  +
push [ebp+var_14]  +
call sub_10022BD  +
push [ebp+cbName]  +
push offset dword_10011EC  +
push [ebp+var_14]  +
call sub_10028CB  +
push [ebp+cbName]  +
push [ebp+lpString]  +
push [ebp+var_14]  +
call sub_10028CB  +
push [ebp+arg_1C]  +
mov eax [ebp+arg_18] +
inc eax  +
push eax  +
push [ebp+arg_14]  +
push [ebp+arg_10]  +
push [ebp+var_14]  +
push [ebp+var_1C]  +
push dword ptr [ebp+var_10]  +
push [ebp+phkResult]  +
call sub_1008B55  +
mov edi eax +
lea eax [ebp+phkResult] +
push eax  +
call sub_1001324  +
lea eax [ebp+var_1C] +
push eax  +
call sub_1001324  +
lea eax [ebp+var_10] +
push eax  +
call sub_1002024  +
lea eax [ebp+var_14] +
push eax  +
call sub_1002024  +
inc ebx  +
cmp ebx [ebp+cSubKeys] +
jnb loc_1008E4A  +
jmp loc_1008CB5  +
push 0Eh  +
pop edi  +
cmp [ebp+phkResult] esi +
jz loc_1008E58  +
lea eax [ebp+phkResult] +
push eax  +
call sub_1001324  +
cmp [ebp+var_1C] esi +
jz loc_1008E66  +
lea eax [ebp+var_1C] +
push eax  +
call sub_1001324  +
lea eax [ebp+lpString] +
push eax  +
call sub_1002024  +
lea eax [ebp+var_10] +
push eax  +
call sub_1002024  +
lea eax [ebp+var_14] +
push eax  +
call sub_1002024  +
jmp loc_1008E86  +
push 57h  +
pop edi  +
cmp [ebp+arg_18] esi +
jnz loc_1008EBF  +
cmp edi esi +
jz loc_1008EA5  +
push edi  +
call sub_1003151  +
push 20001h  +
call ds:__iob_func  +
add eax 40h +
jmp loc_1008EB9  +
push esi  +
call sub_1003151  +
push 20000h  +
call ds:__iob_func  +
add eax 20h +
push eax  +
call sub_10030DC  +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 20h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0DCh +
mov eax dword_100F000 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
xor esi esi +
push edi  +
mov edi [ebp+arg_4] +
mov [ebp+phkResult] esi +
mov [ebp+var_D4] esi +
mov [ebp+var_D8] esi +
mov [ebp+dwDisposition] esi +
cmp [ebp+arg_0] esi +
jz loc_10090D4  +
cmp edi esi +
jz loc_10090D4  +
lea eax [ebp+var_68] +
push eax  +
push 3  +
call sub_1002865  +
lea eax [ebp+var_CC] +
push eax  +
push 3  +
call sub_1002865  +
lea eax [ebp+var_D8] +
push eax  +
lea eax [ebp+var_CC] +
push eax  +
lea eax [ebp+var_68] +
push eax  +
push edi  +
push [ebp+arg_0]  +
call sub_100878C  +
test eax eax +
jnz loc_1008F7C  +
inc esi  +
push 20000h  +
call ds:__iob_func  +
add eax 40h +
push eax  +
call sub_10030DC  +
lea eax [ebp+var_68] +
push eax  +
call sub_100307D  +
lea eax [ebp+var_CC] +
push eax  +
call sub_100307D  +
mov eax esi +
jmp loc_10090EE  +
xor edi edi +
inc edi  +
cmp [ebp+var_D8] edi +
jnz loc_1008F90  +
push 3  +
call sub_1008449  +
jmp loc_1008F60  +
lea eax [ebp+var_68] +
push eax  +
call sub_100138A  +
test eax eax +
jnz loc_1008FBC  +
push 0FFFFFFFFh  +
call sub_1003151  +
push 20001h  +
call ds:__iob_func  +
add eax 40h +
push eax  +
call sub_10030DC  +
mov esi edi +
jmp loc_1008F60  +
lea eax [ebp+var_CC] +
push eax  +
call sub_100138A  +
test eax eax +
jz loc_1008F9D  +
mov eax [ebp+hKey] +
cmp eax [ebp+var_C8] +
jnz loc_100900E  +
push esi  +
push edi  +
push [ebp+lpString2]  +
push [ebp+lpString1]  +
call sub_1004857  +
test eax eax +
jnz loc_100900E  +
push 800401E4h  +
call ds:SetLastError  +
push esi  +
push 83h  +
call sub_100339E  +
push eax  +
call sub_1002F79  +
mov esi edi +
jmp loc_1008F4C  +
lea eax [ebp+phkResult] +
push eax  +
mov eax [ebp+var_C] +
or eax 20019h +
push eax  +
push esi  +
push [ebp+lpSubKey]  +
push [ebp+hKey]  +
call ds:RegOpenKeyExW  +
cmp eax esi +
jz loc_1009035  +
push eax  +
jmp loc_1008F9F  +
lea eax [ebp+dwDisposition] +
push eax  +
lea eax [ebp+var_D4] +
push eax  +
mov eax [ebp+var_70] +
push esi  +
or eax 0F003Fh +
push eax  +
push esi  +
push esi  +
push esi  +
push [ebp+var_90]  +
push [ebp+var_C8]  +
call ds:RegCreateKeyExW  +
mov ebx eax +
cmp ebx esi +
jz loc_100907A  +
lea eax [ebp+phkResult] +
push eax  +
call sub_1001324  +
push ebx  +
jmp loc_1008F9F  +
push [ebp+var_C]  +
lea eax [ebp+var_58] +
push esi  +
push [ebp+var_50]  +
push eax  +
push [ebp+lpSubKey]  +
push [ebp+var_D4]  +
push [ebp+lpSubKey]  +
push [ebp+phkResult]  +
call sub_1008B55  +
mov edi eax +
lea eax [ebp+var_D4] +
push eax  +
call sub_1001324  +
lea eax [ebp+phkResult] +
push eax  +
call sub_1001324  +
lea eax [ebp+var_68] +
push eax  +
call sub_100307D  +
lea eax [ebp+var_CC] +
push eax  +
call sub_100307D  +
xor eax eax +
cmp edi esi +
setnz al  +
jmp loc_10090EE  +
push 57h  +
call ds:SetLastError  +
call ds:__iob_func  +
add eax 40h +
push eax  +
call sub_100D7CD  +
xor eax eax +
inc eax  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1002AF3  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
xor ebx ebx +
push esi  +
push edi  +
cmp [ebp+arg_0] ebx +
jz loc_10091E3  +
mov esi [ebp+arg_4] +
cmp esi ebx +
jz loc_10091E3  +
mov edi [ebp+arg_8] +
cmp edi ebx +
jz loc_10091E3  +
cmp [ebp+arg_C] ebx +
jz loc_10091E3  +
mov eax [edi] +
cmp eax ebx +
jl loc_10091E3  +
cmp eax 0Ch +
jge loc_10091E3  +
cmp [ebp+arg_0] 3 +
jz loc_1009174  +
push 800401E4h  +
call ds:SetLastError  +
push offset aUnload  +
push ebx  +
push 67h  +
call sub_100339E  +
push eax  +
push 1  +
call sub_10057BA  +
add esp 0Ch +
jmp loc_10091EA  +
xor ebx ebx +
inc ebx  +
push ebx  +
push offset a??HH  +
push dword ptr [esi+8]  +
call sub_100272D  +
cmp eax ebx +
jnz loc_1009192  +
mov eax [ebp+arg_C] +
mov [eax] ebx +
mov eax ebx +
jmp loc_10091EC  +
push 0  +
push ebx  +
push offset sub_10091F4  +
push dword ptr [esi+4]  +
call sub_100151B  +
test eax eax +
jnz loc_10091E3  +
push edi  +
push dword ptr [esi+8]  +
call sub_100236F  +
test eax eax +
jz loc_10091EA  +
mov eax [edi+3Ch] +
test eax eax +
jz loc_10091C6  +
push 0  +
push eax  +
call sub_100243E  +
test eax eax +
jnz loc_100918E  +
push 800401E4h  +
call ds:SetLastError  +
push offset aUnload  +
push 0  +
push 67h  +
call sub_100339E  +
push eax  +
push ebx  +
jmp loc_100916A  +
push 57h  +
call sub_1003151  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 10h  +
***
dec esp  +
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 6Ch +
mov eax dword_100F000 +
xor eax ebp +
mov [ebp+var_4] eax +
and [ebp+var_6C] 0 +
cmp [ebp+arg_0] 0 +
push esi  +
mov esi [ebp+arg_4] +
jz loc_100932A  +
test esi esi +
jz loc_100932A  +
lea eax [ebp+var_68] +
push eax  +
push 6  +
call sub_1002865  +
lea eax [ebp+var_6C] +
push eax  +
lea eax [ebp+var_68] +
push eax  +
push offset aLoad  +
push esi  +
push [ebp+arg_0]  +
call sub_1004B6F  +
test eax eax +
jnz loc_100927F  +
push 20000h  +
call ds:__iob_func  +
add eax 40h +
push eax  +
call sub_10030DC  +
xor esi esi +
inc esi  +
lea eax [ebp+var_68] +
push eax  +
call sub_100307D  +
mov eax esi +
jmp loc_1009344  +
xor esi esi +
inc esi  +
cmp [ebp+var_6C] esi +
jnz loc_1009292  +
push 6  +
call sub_1008449  +
xor esi esi +
jmp loc_100926F  +
lea eax [ebp+var_68] +
push eax  +
call sub_100138A  +
test eax eax +
jnz loc_10092BC  +
push 0FFFFFFFFh  +
call sub_1003151  +
push 20001h  +
call ds:__iob_func  +
add eax 40h +
push eax  +
call sub_10030DC  +
jmp loc_100926F  +
push 2  +
push offset Name  +
push [ebp+lpSystemName]  +
call sub_1004CAC  +
mov esi eax +
test esi esi +
jnz loc_10092EA  +
push [ebp+lpFile]  +
push [ebp+lpSubKey]  +
push [ebp+hKey]  +
call ds:RegLoadKeyW  +
mov esi eax +
cmp esi 57h +
jnz loc_10092EA  +
add esi 77h +
push esi  +
call sub_1003151  +
test esi esi +
jnz loc_1009304  +
push 20000h  +
call ds:__iob_func  +
add eax 20h +
jmp loc_1009312  +
push 20001h  +
call ds:__iob_func  +
add eax 40h +
push eax  +
call sub_10030DC  +
lea eax [ebp+var_68] +
push eax  +
call sub_100307D  +
xor eax eax +
test esi esi +
setnz al  +
jmp loc_1009344  +
push 57h  +
call ds:SetLastError  +
call ds:__iob_func  +
add eax 40h +
push eax  +
call sub_100D7CD  +
xor eax eax +
inc eax  +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop esi  +
call sub_1002AF3  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 6Ch +
mov eax dword_100F000 +
xor eax ebp +
mov [ebp+var_4] eax +
and [ebp+var_6C] 0 +
cmp [ebp+arg_0] 0 +
push esi  +
mov esi [ebp+arg_4] +
jz loc_1009476  +
test esi esi +
jz loc_1009476  +
lea eax [ebp+var_68] +
push eax  +
push 7  +
call sub_1002865  +
lea eax [ebp+var_6C] +
push eax  +
lea eax [ebp+var_68] +
push eax  +
push esi  +
push [ebp+arg_0]  +
call sub_1009104  +
test eax eax +
jnz loc_10093D6  +
push 20000h  +
call ds:__iob_func  +
add eax 40h +
push eax  +
call sub_10030DC  +
xor esi esi +
inc esi  +
lea eax [ebp+var_68] +
push eax  +
call sub_100307D  +
mov eax esi +
jmp loc_1009490  +
xor esi esi +
inc esi  +
cmp [ebp+var_6C] esi +
jnz loc_10093E9  +
push 7  +
call sub_1008449  +
xor esi esi +
jmp loc_10093C6  +
lea eax [ebp+var_68] +
push eax  +
call sub_100138A  +
test eax eax +
jnz loc_1009413  +
push 0FFFFFFFFh  +
call sub_1003151  +
push 20001h  +
call ds:__iob_func  +
add eax 40h +
push eax  +
call sub_10030DC  +
jmp loc_10093C6  +
push 2  +
push offset Name  +
push [ebp+lpSystemName]  +
call sub_1004CAC  +
mov esi eax +
test esi esi +
jnz loc_1009436  +
push [ebp+lpSubKey]  +
push [ebp+hKey]  +
call ds:RegUnLoadKeyW  +
mov esi eax +
push esi  +
call sub_1003151  +
test esi esi +
jnz loc_1009450  +
push 20000h  +
call ds:__iob_func  +
add eax 20h +
jmp loc_100945E  +
push 20001h  +
call ds:__iob_func  +
add eax 40h +
push eax  +
call sub_10030DC  +
lea eax [ebp+var_68] +
push eax  +
call sub_100307D  +
xor eax eax +
test esi esi +
setnz al  +
jmp loc_1009490  +
push 57h  +
call ds:SetLastError  +
call ds:__iob_func  +
add eax 40h +
push eax  +
call sub_100D7CD  +
xor eax eax +
inc eax  +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop esi  +
call sub_1002AF3  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
push edi  +
xor edi edi +
cmp [ebp+lpString] edi +
jz loc_100959A  +
mov esi [ebp+arg_4] +
cmp esi edi +
jz loc_100959A  +
cmp [esi+54h] edi +
jnz loc_10094DB  +
call sub_10015E4  +
mov [esi+54h] eax +
cmp eax edi +
jnz loc_10094DB  +
push 0Eh  +
jmp loc_100959C  +
push edi  +
push 1  +
push offset dword_10095AC  +
push [ebp+lpString]  +
call sub_100157E  +
mov ebx eax +
mov [ebp+var_4] ebx +
cmp ebx 0FFFFFFFFh +
jnz loc_10094F9  +
xor ebx ebx +
jmp loc_10094FB  +
sub ebx edi +
push 2  +
push dword ptr [esi+54h]  +
call sub_10016C5  +
mov [ebp+arg_4] eax +
cmp eax 0FFFFFFFFh +
jz loc_10094D4  +
mov ecx [ebp+lpString] +
push ebx  +
lea ecx [ecx+edi*2] +
push ecx  +
push 0  +
push eax  +
push dword ptr [esi+54h]  +
call sub_1003361  +
or ebx 0FFFFFFFFh +
cmp eax ebx +
jz loc_10094D4  +
push 0  +
push [ebp+arg_4]  +
push dword ptr [esi+54h]  +
call sub_100346D  +
mov edi eax +
test edi edi +
jz loc_100958C  +
push edi  +
call sub_1003A27  +
cmp eax ebx +
jnz loc_100955B  +
push 1  +
push 0Ah  +
push edi  +
call sub_10049FF  +
cmp eax 1 +
jnz loc_1009593  +
push 0Ah  +
push edi  +
call sub_10048A8  +
push eax  +
push 1  +
push [ebp+arg_4]  +
push dword ptr [esi+54h]  +
call sub_100DC5F  +
cmp eax ebx +
jz loc_10094D4  +
mov eax [ebp+var_4] +
lea edi [eax+1] +
cmp eax ebx +
jnz loc_10094DB  +
push 0  +
call ds:SetLastError  +
xor eax eax +
inc eax  +
jmp loc_10095A4  +
push 800300FDh  +
jmp loc_100959C  +
push 800401E4h  +
jmp loc_100959C  +
push 57h  +
call ds:SetLastError  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push ebx  +
xor ebx ebx +
push esi  +
push edi  +
mov [ebp+cbName] ebx +
mov [ebp+phkResult] ebx +
mov [ebp+cSubKeys] ebx +
mov [ebp+cbMaxSubKeyLen] ebx +
mov [ebp+lpString] ebx +
mov [ebp+var_14] ebx +
cmp [ebp+hKey] ebx +
jz loc_10097CD  +
cmp [ebp+lpSubKey] ebx +
jz loc_10097CD  +
mov edi [ebp+arg_C] +
cmp edi ebx +
jz loc_10097CD  +
lea eax [ebp+phkResult] +
push eax  +
mov eax [edi+5Ch] +
or eax 0F003Fh +
push eax  +
push ebx  +
push [ebp+lpSubKey]  +
push [ebp+hKey]  +
call ds:RegOpenKeyExW  +
mov esi eax +
cmp esi ebx +
jnz loc_10097D0  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
lea eax [ebp+cbMaxSubKeyLen] +
push eax  +
lea eax [ebp+cSubKeys] +
push eax  +
push ebx  +
push ebx  +
push ebx  +
push [ebp+phkResult]  +
call ds:RegQueryInfoKeyW  +
mov esi eax +
cmp esi ebx +
jz loc_1009643  +
lea eax [ebp+phkResult] +
push eax  +
call sub_1001324  +
jmp loc_10097D0  +
cmp [ebp+cSubKeys] ebx +
jnz loc_1009668  +
lea eax [ebp+phkResult] +
push eax  +
call sub_1001324  +
push ebx  +
push dword ptr [edi+5Ch]  +
push [ebp+lpSubKey]  +
push [ebp+hKey]  +
call ds:RegDeleteKeyExW  +
mov esi eax +
jmp loc_10097D0  +
mov eax [ebp+cbMaxSubKeyLen] +
cmp eax ebx +
jnz loc_1009678  +
mov [ebp+cbMaxSubKeyLen] 100h +
jmp loc_1009684  +
cmp eax 100h +
jnb loc_1009684  +
add eax eax +
mov [ebp+cbMaxSubKeyLen] eax +
call sub_10015E4  +
mov [ebp+var_14] eax +
cmp eax ebx +
jnz loc_10096A0  +
lea eax [ebp+phkResult] +
push eax  +
call sub_1001324  +
push 0Eh  +
jmp loc_10097CF  +
inc [ebp+cbMaxSubKeyLen]  +
mov eax [ebp+cbMaxSubKeyLen] +
lea eax [eax+eax+4] +
push eax  +
call sub_10026AF  +
mov [ebp+lpString] eax +
cmp eax ebx +
jnz loc_10096CB  +
lea eax [ebp+phkResult] +
push eax  +
call sub_1001324  +
lea eax [ebp+var_14] +
push eax  +
call sub_1001820  +
jmp loc_1009699  +
xor edi edi +
xor esi esi +
mov [ebp+var_C] ebx +
cmp [ebp+cSubKeys] ebx +
jbe loc_100971E  +
mov eax [ebp+cbMaxSubKeyLen] +
mov ecx [ebp+lpString] +
mov [ebp+cbName] eax +
add eax eax +
cmp eax ebx +
jz loc_10096EC  +
mov [ecx] bl +
inc ecx  +
dec eax  +
jnz loc_10096E6  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
lea eax [ebp+cbName] +
push eax  +
push [ebp+lpString]  +
push edi  +
push [ebp+phkResult]  +
call ds:RegEnumKeyExW  +
mov esi eax +
cmp esi ebx +
jnz loc_100976F  +
push ebx  +
push [ebp+lpString]  +
push [ebp+var_14]  +
call sub_1002C06  +
cmp eax 0FFFFFFFFh +
jnz loc_1009777  +
push 0Eh  +
pop esi  +
mov [ebp+var_C] esi +
lea eax [ebp+lpString] +
push eax  +
call sub_1002024  +
push [ebp+var_14]  +
call sub_1002DFE  +
mov [ebp+var_20] eax +
cmp esi 0Eh +
jz loc_10097A8  +
cmp eax ebx +
jz loc_10097A8  +
xor esi esi +
mov [ebp+cbName] ebx +
mov [ebp+var_C] ebx +
cmp eax ebx +
jbe loc_10097A8  +
mov edi [ebp+arg_8] +
inc edi  +
push esi  +
push [ebp+var_14]  +
call sub_1002F4A  +
push [ebp+arg_C]  +
push edi  +
push eax  +
push [ebp+phkResult]  +
call sub_10095B5  +
cmp eax ebx +
jz loc_1009782  +
cmp [ebp+var_C] ebx +
jnz loc_1009785  +
mov [ebp+var_C] eax +
jmp loc_1009785  +
cmp [ebp+var_C] ebx +
jnz loc_1009777  +
mov [ebp+var_C] esi +
inc edi  +
cmp edi [ebp+cSubKeys] +
jnb loc_100971E  +
jmp loc_10096D7  +
inc [ebp+cbName]  +
inc esi  +
cmp esi [ebp+var_20] +
jb loc_100974B  +
cmp [ebp+cbName] ebx +
jz loc_10097A8  +
mov eax [ebp+var_20] +
cmp eax [ebp+cSubKeys] +
jnz loc_10097A1  +
cmp [ebp+cbName] eax +
jnz loc_10097A1  +
xor esi esi +
jmp loc_10097AB  +
mov esi 80030201h +
jmp loc_10097AB  +
mov esi [ebp+var_C] +
lea eax [ebp+var_14] +
push eax  +
call sub_1001820  +
lea eax [ebp+phkResult] +
push eax  +
call sub_1001324  +
cmp esi ebx +
jnz loc_10097D0  +
mov eax [ebp+arg_C] +
push ebx  +
push dword ptr [eax+5Ch]  +
jmp loc_1009655  +
push 57h  +
pop esi  +
cmp [ebp+arg_8] ebx +
jnz loc_1009824  +
cmp esi ebx +
jz loc_100980A  +
cmp esi 80030201h +
jnz loc_10097F4  +
push ebx  +
push 8Dh  +
call sub_100339E  +
push eax  +
call sub_1002F79  +
jmp loc_10097FA  +
push esi  +
call sub_1003151  +
push 20001h  +
call ds:__iob_func  +
add eax 40h +
jmp loc_100981E  +
push ebx  +
call sub_1003151  +
push 20000h  +
call ds:__iob_func  +
add eax 20h +
push eax  +
call sub_10030DC  +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
test esi esi +
jz loc_10098EA  +
mov ebx [ebp+arg_4] +
test ebx ebx +
jz loc_10098EA  +
cmp dword ptr [ebx+8] 1 +
jnz loc_100988D  +
mov eax [esi+4] +
cmp eax 80000003h +
jz loc_100988D  +
cmp eax 80000002h +
jz loc_100988D  +
push 800401E4h  +
call ds:SetLastError  +
push offset aCompare  +
push 0  +
push 69h  +
call sub_100339E  +
push eax  +
push 1  +
call sub_10057BA  +
add esp 0Ch +
jmp loc_10098F1  +
mov eax [esi+4] +
push 0  +
mov [ebx+4] eax +
push dword ptr [esi+40h]  +
call sub_100243E  +
mov edi eax +
inc edi  +
lea eax [edi+edi] +
push eax  +
call sub_10026AF  +
mov [ebx+40h] eax +
test eax eax +
jnz loc_10098B4  +
push 0Eh  +
jmp loc_10098EC  +
push edi  +
push dword ptr [esi+40h]  +
push eax  +
call sub_10022BD  +
push 0  +
push dword ptr [esi+3Ch]  +
call sub_100243E  +
mov edi eax +
inc edi  +
lea eax [edi+edi] +
push eax  +
call sub_10026AF  +
mov [ebx+3Ch] eax +
test eax eax +
jz loc_10098B0  +
push edi  +
push dword ptr [esi+3Ch]  +
push eax  +
call sub_10022BD  +
xor eax eax +
inc eax  +
jmp loc_10098F3  +
push 57h  +
call sub_1003151  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
jz loc_1009982  +
cmp [ebp+arg_4] 0 +
jz loc_1009982  +
cmp [ebp+arg_8] 1 +
push esi  +
mov esi ds:__iob_func +
jnz loc_1009924  +
push offset asc_1008350  +
jmp loc_100993C  +
cmp [ebp+arg_8] 2 +
jnz loc_1009931  +
push offset asc_1008348  +
jmp loc_100993C  +
cmp [ebp+arg_8] 3 +
jnz loc_1009947  +
push offset asc_1008340  +
call esi  +
add eax 20h +
push eax  +
call sub_100245F  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
push 0  +
push 202h  +
call sub_100339E  +
push eax  +
push 1  +
push 1  +
call esi  +
add eax 20h +
push eax  +
call sub_1004105  +
add esp 18h +
push offset asc_1003C30  +
call esi  +
add eax 20h +
push eax  +
call sub_100245F  +
xor eax eax +
inc eax  +
pop esi  +
jmp loc_100998C  +
push 57h  +
call ds:SetLastError  +
xor eax eax +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 24h +
push ebx  +
xor ebx ebx +
cmp [ebp+arg_0] ebx +
jz loc_1009A53  +
cmp [ebp+arg_4] ebx +
jz loc_1009A53  +
cmp [ebp+arg_C] ebx +
jz loc_1009A53  +
cmp [ebp+arg_14] 1 +
push esi  +
mov esi ds:__iob_func +
jnz loc_10099CF  +
push offset asc_1008350  +
jmp loc_10099E7  +
cmp [ebp+arg_14] 2 +
jnz loc_10099DC  +
push offset asc_1008348  +
jmp loc_10099E7  +
cmp [ebp+arg_14] 3 +
jnz loc_10099F2  +
push offset asc_1008340  +
call esi  +
add eax 20h +
push eax  +
call sub_100245F  +
push [ebp+arg_0]  +
push ebx  +
push 201h  +
call sub_100339E  +
push eax  +
push 1  +
push 1  +
call esi  +
add eax 20h +
push eax  +
call sub_1004105  +
add esp 14h +
push 24h  +
pop ecx  +
lea eax [ebp+String] +
pop esi  +
mov [eax] bl +
inc eax  +
dec ecx  +
jnz loc_1009A1A  +
mov eax [ebp+arg_4] +
mov [ebp+var_18] eax +
mov eax [ebp+arg_8] +
mov dword ptr [ebp+String] eax +
mov eax [ebp+arg_C] +
mov [ebp+var_1C] eax +
mov eax [ebp+arg_10] +
mov [ebp+var_20] eax +
lea eax [ebp+String] +
push eax  +
mov [ebp+var_8] ebx +
mov [ebp+var_14] ebx +
mov [ebp+var_C] 2 +
mov [ebp+var_4] ebx +
call sub_1003F9B  +
jmp loc_1009A5D  +
push 57h  +
call ds:SetLastError  +
xor eax eax +
pop ebx  +
leave   +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
push edi  +
xor edi edi +
cmp edx edi +
jz loc_1009A9F  +
mov ecx [ebp+arg_4] +
cmp ecx edi +
jz loc_1009A9F  +
push esi  +
xor esi esi +
cmp [ebp+arg_8] edi +
jbe loc_1009A9A  +
sub edx ecx +
mov al [edx+ecx] +
cmp al [ecx] +
jnz loc_1009A97  +
inc esi  +
inc ecx  +
cmp esi [ebp+arg_8] +
jnb loc_1009A9A  +
jmp loc_1009A87  +
xor edi edi +
inc edi  +
mov eax edi +
pop esi  +
jmp loc_1009AA9  +
push 57h  +
call ds:SetLastError  +
xor eax eax +
pop edi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
push ebx  +
xor ebx ebx +
push esi  +
push edi  +
cmp ecx ebx +
jz loc_1009EE5  +
mov esi [ebp+arg_4] +
cmp esi ebx +
jz loc_1009EE5  +
mov edi [ebp+arg_8] +
cmp edi ebx +
jz loc_1009EE5  +
cmp [ebp+arg_C] ebx +
jz loc_1009EE5  +
cmp [ebp+arg_10] ebx +
jz loc_1009EE5  +
mov eax [edi] +
cmp eax ebx +
jl loc_1009EE5  +
cmp eax 0Ch +
jge loc_1009EE5  +
cmp ecx 3 +
jnz loc_1009B2D  +
xor edi edi +
inc edi  +
push edi  +
push offset a??HH_0  +
push dword ptr [esi+8]  +
call sub_100272D  +
cmp eax edi +
jnz loc_1009EC6  +
mov eax [ebp+arg_10] +
mov [eax] edi +
mov eax edi +
jmp loc_1009EEE  +
add ecx 0FFFFFFFCh +
cmp ecx 5 +
ja loc_1009EC3  +
push ebx  +
push 1  +
push offset aCompare_0  +
push dword ptr [esi+4]  +
call sub_100151B  +
test eax eax +
jnz loc_1009EE5  +
push edi  +
push dword ptr [esi+8]  +
call sub_100236F  +
test eax eax +
jz loc_1009EEC  +
push [ebp+arg_C]  +
push dword ptr [esi+0Ch]  +
call sub_100236F  +
cmp eax ebx +
jnz loc_1009BD2  +
call ds:GetLastError  +
cmp eax 80040152h +
jnz loc_1009B89  +
push [ebp+arg_C]  +
push edi  +
call sub_1009832  +
jmp loc_1009BCA  +
mov eax [ebp+arg_C] +
mov eax [eax+38h] +
cmp eax ebx +
jz loc_1009EEC  +
push ebx  +
push 1  +
push offset a_  +
push eax  +
call sub_100151B  +
test eax eax +
jnz loc_1009EEC  +
push [ebp+arg_C]  +
call sub_100307D  +
push [ebp+arg_C]  +
push 8  +
call sub_1002865  +
push [ebp+arg_C]  +
push dword ptr [edi+40h]  +
call sub_100236F  +
cmp eax ebx +
jz loc_1009EEC  +
push 4  +
pop eax  +
mov [ebp+arg_C] eax +
cmp [ebp+arg_0] eax +
ja loc_1009BF4  +
cmp [edi+28h] ebx +
jnz loc_1009BE9  +
mov dword ptr [edi+28h] 3 +
xor eax eax +
inc eax  +
jmp loc_1009EEE  +
mov esi [ebp+arg_4] +
mov eax [ebp+arg_C] +
push ebx  +
push 1  +
lea esi [esi+eax*4] +
push offset aV  +
push dword ptr [esi]  +
call sub_100151B  +
test eax eax +
jz loc_1009E64  +
push ebx  +
push 1  +
push offset aV_0  +
push dword ptr [esi]  +
call sub_100151B  +
test eax eax +
jz loc_1009E64  +
push ebx  +
push 1  +
push offset aVe  +
push dword ptr [esi]  +
call sub_100151B  +
test eax eax +
jz loc_1009E23  +
push ebx  +
push 1  +
push offset aVe_0  +
push dword ptr [esi]  +
call sub_100151B  +
test eax eax +
jz loc_1009E23  +
push ebx  +
push 1  +
push offset aOa  +
push dword ptr [esi]  +
call sub_100151B  +
test eax eax +
jz loc_1009E0D  +
push ebx  +
push 1  +
push offset aOa_0  +
push dword ptr [esi]  +
call sub_100151B  +
test eax eax +
jz loc_1009E0D  +
push ebx  +
push 1  +
push offset aOd  +
push dword ptr [esi]  +
call sub_100151B  +
test eax eax +
jz loc_1009DF7  +
push ebx  +
push 1  +
push offset aOd_0  +
push dword ptr [esi]  +
call sub_100151B  +
test eax eax +
jz loc_1009DF7  +
push ebx  +
push 1  +
push offset aOs  +
push dword ptr [esi]  +
call sub_100151B  +
test eax eax +
jz loc_1009DE1  +
push ebx  +
push 1  +
push offset aOs_0  +
push dword ptr [esi]  +
call sub_100151B  +
test eax eax +
jz loc_1009DE1  +
push ebx  +
push 1  +
push offset aOn  +
push dword ptr [esi]  +
call sub_100151B  +
test eax eax +
jz loc_1009DCB  +
push ebx  +
push 1  +
push offset aOn_0  +
push dword ptr [esi]  +
call sub_100151B  +
test eax eax +
jz loc_1009DCB  +
push ebx  +
push 1  +
push offset aS_0  +
push dword ptr [esi]  +
call sub_100151B  +
test eax eax +
jz loc_1009DB2  +
push ebx  +
push 1  +
push offset aS_1  +
push dword ptr [esi]  +
call sub_100151B  +
test eax eax +
jz loc_1009DB2  +
push ebx  +
push 1  +
push offset aReg32  +
push dword ptr [esi]  +
call sub_100151B  +
test eax eax +
jz loc_1009D9D  +
push ebx  +
push 1  +
push offset aReg32_0  +
push dword ptr [esi]  +
call sub_100151B  +
test eax eax +
jz loc_1009D9D  +
push ebx  +
push 1  +
push offset aReg64  +
push dword ptr [esi]  +
call sub_100151B  +
test eax eax +
jz loc_1009D88  +
push ebx  +
push 1  +
push offset aReg64_0  +
push dword ptr [esi]  +
call sub_100151B  +
test eax eax +
jnz loc_1009E3C  +
cmp [edi+5Ch] ebx +
jnz loc_1009E3C  +
mov dword ptr [edi+5Ch] 100h +
jmp loc_1009EAB  +
cmp [edi+5Ch] ebx +
jnz loc_1009E3C  +
mov dword ptr [edi+5Ch] 200h +
jmp loc_1009EAB  +
cmp [edi+44h] ebx +
jnz loc_1009E3C  +
xor eax eax +
inc eax  +
cmp [edi+18h] eax +
jz loc_1009E3C  +
mov [edi+18h] eax +
jmp loc_1009EAB  +
cmp [edi+44h] ebx +
jnz loc_1009E3C  +
cmp [edi+28h] ebx +
jnz loc_1009E3C  +
mov dword ptr [edi+28h] 1 +
jmp loc_1009EAB  +
cmp [edi+44h] ebx +
jnz loc_1009E3C  +
cmp [edi+28h] ebx +
jnz loc_1009E3C  +
mov dword ptr [edi+28h] 2 +
jmp loc_1009EAB  +
cmp [edi+44h] ebx +
jnz loc_1009E3C  +
cmp [edi+28h] ebx +
jnz loc_1009E3C  +
mov dword ptr [edi+28h] 3 +
jmp loc_1009EAB  +
cmp [edi+44h] ebx +
jnz loc_1009E3C  +
cmp [edi+28h] ebx +
jnz loc_1009E3C  +
mov dword ptr [edi+28h] 4 +
jmp loc_1009EAB  +
cmp [edi+44h] ebx +
jnz loc_1009E3C  +
cmp dword ptr [edi+18h] 1 +
jz loc_1009E3C  +
push 4  +
call sub_10026AF  +
mov [edi+44h] eax +
cmp eax ebx +
jnz loc_1009EAB  +
push 800401E4h  +
call ds:SetLastError  +
push offset aCompare  +
push ebx  +
push 67h  +
call sub_100339E  +
push eax  +
push 1  +
call sub_10057BA  +
add esp 0Ch +
jmp loc_1009EEC  +
cmp [edi+44h] ebx +
jnz loc_1009E3C  +
cmp dword ptr [edi+18h] 1 +
jz loc_1009E3C  +
mov eax [ebp+arg_C] +
inc eax  +
mov [ebp+arg_C] eax +
cmp eax [ebp+arg_0] +
jnb loc_1009E3C  +
mov ecx [ebp+arg_4] +
lea eax [ecx+eax*4] +
push ebx  +
push dword ptr [eax]  +
mov [ebp+arg_10] eax +
call sub_100243E  +
mov esi eax +
inc esi  +
lea eax [esi+esi] +
push eax  +
call sub_10026AF  +
mov [edi+44h] eax +
cmp eax ebx +
jz loc_1009EBF  +
mov ecx [ebp+arg_10] +
push esi  +
push dword ptr [ecx]  +
push eax  +
call sub_10022BD  +
inc [ebp+arg_C]  +
mov eax [ebp+arg_C] +
cmp eax [ebp+arg_0] +
jnb loc_1009BDD  +
jmp loc_1009BF1  +
push 0Eh  +
jmp loc_1009EE7  +
xor edi edi +
inc edi  +
push 800401E4h  +
call ds:SetLastError  +
push offset aCompare  +
push ebx  +
push 67h  +
call sub_100339E  +
push eax  +
push edi  +
jmp loc_1009E57  +
push 57h  +
call sub_1003151  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
push ebx  +
xor ebx ebx +
push esi  +
push edi  +
mov [ebp+Type] ebx +
mov [ebp+var_18] ebx +
mov [ebp+cbData] ebx +
mov [ebp+var_C] ebx +
mov [ebp+lpData] ebx +
mov [ebp+var_14] ebx +
cmp [ebp+hKey] ebx +
jz loc_100A167  +
cmp [ebp+arg_4] ebx +
jz loc_100A167  +
cmp [ebp+arg_8] ebx +
jz loc_100A167  +
cmp [ebp+arg_C] ebx +
jz loc_100A167  +
cmp [ebp+lpValueName] ebx +
jz loc_100A167  +
mov eax [ebp+arg_18] +
cmp eax ebx +
jz loc_100A167  +
cmp [ebp+arg_14] ebx +
jz loc_1009FAF  +
cmp [ebp+arg_14] 1 +
jnz loc_1009FBB  +
cmp dword ptr [eax] 1 +
jnz loc_1009FBB  +
xor eax eax +
jmp loc_100A171  +
mov esi ds:RegQueryValueExW +
lea eax [ebp+cbData] +
push eax  +
push ebx  +
lea eax [ebp+Type] +
push eax  +
push ebx  +
push [ebp+lpValueName]  +
push [ebp+hKey]  +
call esi  +
mov edi eax +
cmp edi ebx +
jz loc_1009FE6  +
push edi  +
call sub_1003151  +
mov eax edi +
jmp loc_100A171  +
lea eax [ebp+var_C] +
push eax  +
push ebx  +
lea eax [ebp+var_18] +
push eax  +
push ebx  +
push [ebp+lpValueName]  +
push [ebp+arg_8]  +
call esi  +
mov edi eax +
cmp edi ebx +
jnz loc_1009FD9  +
mov eax [ebp+cbData] +
cmp [ebp+arg_14] ebx +
jz loc_100A00C  +
cmp [ebp+arg_14] 1 +
jnz loc_100A021  +
mov ecx [ebp+Type] +
cmp ecx [ebp+var_18] +
jnz loc_100A159  +
cmp eax [ebp+var_C] +
jnz loc_100A159  +
inc eax  +
and eax 0FFFFFFFEh +
mov [ebp+cbData] eax +
add eax 2 +
push eax  +
call sub_10026AF  +
mov [ebp+lpData] eax +
cmp eax ebx +
jnz loc_100A046  +
push 0Eh  +
call sub_1003151  +
push 0Eh  +
jmp loc_100A170  +
mov eax [ebp+var_C] +
inc eax  +
and eax 0FFFFFFFEh +
mov [ebp+var_C] eax +
add eax 2 +
push eax  +
call sub_10026AF  +
mov [ebp+var_14] eax +
cmp eax ebx +
jnz loc_100A06B  +
lea eax [ebp+lpData] +
push eax  +
call sub_1002024  +
jmp loc_100A038  +
lea eax [ebp+cbData] +
push eax  +
push [ebp+lpData]  +
lea eax [ebp+Type] +
push eax  +
push ebx  +
push [ebp+lpValueName]  +
push [ebp+hKey]  +
call esi  +
mov edi eax +
cmp edi ebx +
jnz loc_100A09F  +
lea eax [ebp+var_C] +
push eax  +
push [ebp+var_14]  +
lea eax [ebp+var_18] +
push eax  +
push ebx  +
push [ebp+lpValueName]  +
push [ebp+arg_8]  +
call esi  +
mov edi eax +
cmp edi ebx +
jz loc_100A0B6  +
lea eax [ebp+lpData] +
push eax  +
call sub_1002024  +
lea eax [ebp+var_14] +
push eax  +
call sub_1002024  +
jmp loc_1009FD9  +
mov eax [ebp+Type] +
cmp eax [ebp+var_18] +
jnz loc_100A0FB  +
mov eax [ebp+cbData] +
cmp eax [ebp+var_C] +
jnz loc_100A0FB  +
push eax  +
push [ebp+var_14]  +
push [ebp+lpData]  +
call sub_1009A67  +
cmp eax 1 +
jz loc_100A0FB  +
cmp [ebp+arg_14] 2 +
jz loc_100A0E3  +
cmp [ebp+arg_14] 4 +
jnz loc_100A13C  +
push 3  +
push [ebp+cbData]  +
push [ebp+lpData]  +
push [ebp+Type]  +
push [ebp+lpValueName]  +
push [ebp+arg_4]  +
call sub_1009995  +
jmp loc_100A13C  +
cmp [ebp+arg_14] 3 +
jz loc_100A107  +
cmp [ebp+arg_14] 4 +
jnz loc_100A133  +
push 1  +
push [ebp+cbData]  +
push [ebp+lpData]  +
push [ebp+Type]  +
push [ebp+lpValueName]  +
push [ebp+arg_4]  +
call sub_1009995  +
push 2  +
push [ebp+var_C]  +
push [ebp+var_14]  +
push [ebp+var_18]  +
push [ebp+lpValueName]  +
push [ebp+arg_C]  +
call sub_1009995  +
mov eax [ebp+arg_18] +
mov dword ptr [eax] 1 +
lea eax [ebp+lpData] +
push eax  +
call sub_1002024  +
lea eax [ebp+var_14] +
push eax  +
call sub_1002024  +
push ebx  +
call sub_1003151  +
jmp loc_1009FB4  +
mov eax [ebp+arg_18] +
mov dword ptr [eax] 1 +
jmp loc_1009FB4  +
push 57h  +
call sub_1003151  +
push 57h  +
pop eax  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 1Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push esi  +
mov esi ds:RegQueryValueExW +
push edi  +
xor edi edi +
lea eax [ebp+cbData] +
push eax  +
push edi  +
lea eax [ebp+Type] +
push eax  +
push edi  +
push [ebp+lpValueName]  +
mov [ebp+Type] edi +
push [ebp+hKey]  +
mov [ebp+cbData] edi +
mov [ebp+var_C] edi +
call esi  +
cmp eax edi +
jnz loc_100A207  +
mov eax [ebp+cbData] +
inc eax  +
and eax 0FFFFFFFEh +
mov [ebp+cbData] eax +
add eax 2 +
push eax  +
call sub_10026AF  +
mov [ebp+var_C] eax +
cmp eax edi +
jnz loc_100A1CD  +
push 8  +
pop eax  +
jmp loc_100A207  +
lea ecx [ebp+cbData] +
push ecx  +
push eax  +
lea eax [ebp+Type] +
push eax  +
push edi  +
push [ebp+lpValueName]  +
push [ebp+hKey]  +
call esi  +
mov esi eax +
cmp esi edi +
jnz loc_100A1FC  +
push [ebp+arg_C]  +
push [ebp+cbData]  +
push [ebp+var_C]  +
push [ebp+Type]  +
push [ebp+lpValueName]  +
push [ebp+arg_4]  +
call sub_1009995  +
lea eax [ebp+var_C] +
push eax  +
call sub_1002024  +
mov eax esi +
pop edi  +
pop esi  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 28h +
push ebx  +
xor ebx ebx +
push esi  +
push edi  +
mov [ebp+cbValueName] ebx +
mov [ebp+cValues] ebx +
mov [ebp+var_18] ebx +
mov [ebp+cbMaxValueNameLen] ebx +
mov [ebp+var_10] ebx +
mov [ebp+var_1C] ebx +
mov [ebp+var_20] ebx +
mov [ebp+lpString] ebx +
cmp [ebp+hKey] ebx +
jz loc_100A539  +
cmp [ebp+arg_4] ebx +
jz loc_100A539  +
cmp [ebp+arg_8] ebx +
jz loc_100A539  +
cmp [ebp+arg_C] ebx +
jz loc_100A539  +
mov eax [ebp+arg_14] +
cmp eax ebx +
jz loc_100A539  +
cmp [ebp+arg_10] ebx +
jz loc_100A271  +
cmp [ebp+arg_10] 1 +
jnz loc_100A27D  +
cmp dword ptr [eax] 1 +
jnz loc_100A27D  +
xor eax eax +
jmp loc_100A543  +
push ebx  +
push ebx  +
mov esi ds:RegQueryInfoKeyW +
push ebx  +
lea eax [ebp+cbMaxValueNameLen] +
push eax  +
lea eax [ebp+cValues] +
push eax  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push [ebp+hKey]  +
call esi  +
mov edi eax +
cmp edi ebx +
jz loc_100A2AC  +
push edi  +
call sub_1003151  +
mov eax edi +
jmp loc_100A543  +
push ebx  +
push ebx  +
push ebx  +
lea eax [ebp+var_10] +
push eax  +
lea eax [ebp+var_18] +
push eax  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push [ebp+arg_8]  +
call esi  +
mov esi eax +
cmp esi ebx +
jz loc_100A2D5  +
push esi  +
call sub_1003151  +
mov eax esi +
jmp loc_100A543  +
cmp [ebp+arg_10] ebx +
jz loc_100A2E0  +
cmp [ebp+arg_10] 1 +
jnz loc_100A2F8  +
mov eax [ebp+cValues] +
cmp eax [ebp+var_18] +
jnz loc_100A52B  +
mov eax [ebp+var_10] +
cmp [ebp+cbMaxValueNameLen] eax +
jnz loc_100A52B  +
inc [ebp+var_10]  +
mov eax [ebp+var_10] +
inc [ebp+cbMaxValueNameLen]  +
cmp eax [ebp+cbMaxValueNameLen] +
jbe loc_100A30B  +
mov [ebp+cbMaxValueNameLen] eax +
jmp loc_100A311  +
mov eax [ebp+cbMaxValueNameLen] +
mov [ebp+var_10] eax +
call sub_10015E4  +
mov [ebp+var_1C] eax +
cmp eax ebx +
jnz loc_100A32B  +
push 0Eh  +
call sub_1003151  +
push 0Eh  +
jmp loc_100A542  +
call sub_10015E4  +
mov [ebp+var_20] eax +
cmp eax ebx +
jnz loc_100A342  +
lea eax [ebp+var_1C] +
push eax  +
call sub_1001820  +
jmp loc_100A31D  +
mov eax [ebp+cbMaxValueNameLen] +
add eax eax +
push eax  +
call sub_10026AF  +
mov [ebp+lpString] eax +
cmp eax ebx +
jnz loc_100A35F  +
lea eax [ebp+var_20] +
push eax  +
call sub_1001820  +
jmp loc_100A337  +
mov esi ds:RegEnumValueW +
xor edi edi +
mov [ebp+dwIndex] ebx +
cmp [ebp+cValues] ebx +
jbe loc_100A3C0  +
cmp edi ebx +
jnz loc_100A3C0  +
mov eax [ebp+cbMaxValueNameLen] +
mov ecx [ebp+lpString] +
mov [ebp+cbValueName] eax +
add eax eax +
cmp eax ebx +
jz loc_100A388  +
mov [ecx] bl +
inc ecx  +
dec eax  +
jnz loc_100A382  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
lea eax [ebp+cbValueName] +
push eax  +
push [ebp+lpString]  +
push [ebp+dwIndex]  +
push [ebp+hKey]  +
call esi  +
mov edi eax +
cmp edi ebx +
jnz loc_100A3B5  +
push ebx  +
push [ebp+lpString]  +
push [ebp+var_1C]  +
call sub_1002C06  +
cmp eax 0FFFFFFFFh +
jnz loc_100A3B5  +
push 0Eh  +
pop edi  +
inc [ebp+dwIndex]  +
mov eax [ebp+dwIndex] +
cmp eax [ebp+cValues] +
jb loc_100A36F  +
mov [ebp+dwIndex] ebx +
cmp [ebp+var_18] ebx +
jbe loc_100A419  +
cmp edi ebx +
jnz loc_100A419  +
mov eax [ebp+var_10] +
mov ecx [ebp+lpString] +
mov [ebp+cbValueName] eax +
add eax eax +
cmp eax ebx +
jz loc_100A3E1  +
mov [ecx] bl +
inc ecx  +
dec eax  +
jnz loc_100A3DB  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
lea eax [ebp+cbValueName] +
push eax  +
push [ebp+lpString]  +
push [ebp+dwIndex]  +
push [ebp+arg_8]  +
call esi  +
mov edi eax +
cmp edi ebx +
jnz loc_100A40E  +
push ebx  +
push [ebp+lpString]  +
push [ebp+var_20]  +
call sub_1002C06  +
cmp eax 0FFFFFFFFh +
jnz loc_100A40E  +
push 0Eh  +
pop edi  +
inc [ebp+dwIndex]  +
mov eax [ebp+dwIndex] +
cmp eax [ebp+var_18] +
jb loc_100A3C8  +
lea eax [ebp+lpString] +
push eax  +
call sub_1002024  +
mov [ebp+dwIndex] ebx +
cmp [ebp+cValues] ebx +
jbe loc_100A496  +
cmp edi ebx +
jnz loc_100A496  +
push [ebp+dwIndex]  +
push [ebp+var_1C]  +
call sub_1002F4A  +
push ebx  +
push 1  +
mov esi eax +
push esi  +
push [ebp+var_20]  +
call sub_100DC99  +
mov [ebp+var_28] eax +
cmp eax 0FFFFFFFFh +
jz loc_100A48B  +
push [ebp+arg_14]  +
push [ebp+arg_10]  +
push esi  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+hKey]  +
call sub_1009F4D  +
mov edi eax +
cmp edi ebx +
jnz loc_100A48E  +
push [ebp+dwIndex]  +
push [ebp+var_1C]  +
call sub_1001DF2  +
push [ebp+var_28]  +
push [ebp+var_20]  +
call sub_1001DF2  +
dec [ebp+cValues]  +
dec [ebp+var_18]  +
jmp loc_100A48E  +
inc [ebp+dwIndex]  +
mov eax [ebp+dwIndex] +
cmp eax [ebp+cValues] +
jb loc_100A42A  +
xor esi esi +
cmp [ebp+cValues] ebx +
jbe loc_100A4D5  +
cmp edi ebx +
jnz loc_100A4D5  +
push esi  +
push [ebp+var_1C]  +
call sub_1002F4A  +
cmp [ebp+arg_10] 3 +
jz loc_100A4B6  +
cmp [ebp+arg_10] 4 +
jnz loc_100A4C6  +
push 1  +
push eax  +
push [ebp+arg_4]  +
push [ebp+hKey]  +
call sub_100A17D  +
mov edi eax +
mov eax [ebp+arg_14] +
inc esi  +
mov dword ptr [eax] 1 +
cmp esi [ebp+cValues] +
jb loc_100A49D  +
xor esi esi +
cmp [ebp+var_18] ebx +
jbe loc_100A514  +
cmp edi ebx +
jnz loc_100A514  +
push esi  +
push [ebp+var_20]  +
call sub_1002F4A  +
cmp [ebp+arg_10] 3 +
jz loc_100A4F5  +
cmp [ebp+arg_10] 4 +
jnz loc_100A505  +
push 2  +
push eax  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
call sub_100A17D  +
mov edi eax +
mov eax [ebp+arg_14] +
inc esi  +
mov dword ptr [eax] 1 +
cmp esi [ebp+var_18] +
jb loc_100A4DC  +
lea eax [ebp+var_1C] +
push eax  +
call sub_1001820  +
lea eax [ebp+var_20] +
push eax  +
call sub_1001820  +
jmp loc_100A29F  +
mov eax [ebp+arg_14] +
mov dword ptr [eax] 1 +
jmp loc_100A276  +
push 57h  +
call sub_1003151  +
push 57h  +
pop eax  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 3Ch +
push ebx  +
xor ebx ebx +
push esi  +
push edi  +
mov [ebp+cbName] ebx +
mov [ebp+cSubKeys] ebx +
mov [ebp+var_14] ebx +
mov [ebp+var_1C] ebx +
mov [ebp+var_20] ebx +
mov [ebp+phkResult] ebx +
mov [ebp+var_38] ebx +
mov [ebp+cbMaxSubKeyLen] ebx +
mov [ebp+var_10] ebx +
mov [ebp+lpName] ebx +
mov [ebp+var_24] ebx +
mov [ebp+var_28] ebx +
cmp [ebp+hKey] ebx +
jz loc_100AA4D  +
cmp [ebp+lpString] ebx +
jz loc_100AA4D  +
cmp [ebp+arg_8] ebx +
jz loc_100AA4D  +
cmp [ebp+arg_C] ebx +
jz loc_100AA4D  +
mov edi [ebp+arg_18] +
cmp edi ebx +
jz loc_100AA4D  +
push edi  +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+lpString]  +
push [ebp+hKey]  +
call sub_100A212  +
mov esi eax +
cmp [ebp+arg_14] ebx +
jz loc_100AA43  +
cmp esi ebx +
jnz loc_100AA43  +
cmp [ebp+arg_10] ebx +
jz loc_100A5E2  +
cmp [ebp+arg_10] 1 +
jnz loc_100A5EE  +
cmp dword ptr [edi] 1 +
jnz loc_100A5EE  +
xor eax eax +
jmp loc_100AA57  +
push ebx  +
push ebx  +
mov esi ds:RegQueryInfoKeyW +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
lea eax [ebp+cbMaxSubKeyLen] +
push eax  +
lea eax [ebp+cSubKeys] +
push eax  +
push ebx  +
push ebx  +
push ebx  +
push [ebp+hKey]  +
call esi  +
mov edi eax +
cmp edi ebx +
jz loc_100A61D  +
push edi  +
call sub_1003151  +
mov eax edi +
jmp loc_100AA57  +
mov eax [ebp+cbMaxSubKeyLen] +
cmp [ebp+cSubKeys] ebx +
jz loc_100A633  +
cmp eax ebx +
jnz loc_100A633  +
mov edi 100h +
mov [ebp+cbMaxSubKeyLen] edi +
jmp loc_100A641  +
mov edi 100h +
cmp eax edi +
jnb loc_100A641  +
add eax eax +
mov [ebp+cbMaxSubKeyLen] eax +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
lea eax [ebp+var_10] +
push eax  +
lea eax [ebp+var_14] +
push eax  +
push ebx  +
push ebx  +
push ebx  +
push [ebp+arg_8]  +
call esi  +
mov esi eax +
cmp esi ebx +
jnz loc_100AA43  +
mov ecx [ebp+var_14] +
mov eax [ebp+var_10] +
cmp ecx ebx +
jz loc_100A673  +
cmp eax ebx +
jnz loc_100A673  +
mov eax edi +
jmp loc_100A679  +
cmp eax edi +
jnb loc_100A679  +
add eax eax +
cmp [ebp+arg_10] ebx +
jz loc_100A684  +
cmp [ebp+arg_10] 1 +
jnz loc_100A696  +
cmp [ebp+cSubKeys] ecx +
jnz loc_100AA35  +
cmp [ebp+cbMaxSubKeyLen] eax +
jnz loc_100AA35  +
inc eax  +
inc [ebp+cbMaxSubKeyLen]  +
mov [ebp+var_10] eax +
cmp eax [ebp+cbMaxSubKeyLen] +
jbe loc_100A6A7  +
mov [ebp+cbMaxSubKeyLen] eax +
jmp loc_100A6AD  +
mov eax [ebp+cbMaxSubKeyLen] +
mov [ebp+var_10] eax +
call sub_10015E4  +
mov [ebp+var_1C] eax +
cmp eax ebx +
jnz loc_100A6C7  +
push 0Eh  +
call sub_1003151  +
push 0Eh  +
jmp loc_100AA56  +
call sub_10015E4  +
mov [ebp+var_20] eax +
cmp eax ebx +
jnz loc_100A6DE  +
lea eax [ebp+var_1C] +
push eax  +
call sub_1001820  +
jmp loc_100A6B9  +
mov eax [ebp+cbMaxSubKeyLen] +
add eax eax +
push eax  +
call sub_10026AF  +
mov [ebp+lpName] eax +
cmp eax ebx +
jnz loc_100A6FB  +
lea eax [ebp+var_20] +
push eax  +
call sub_1001820  +
jmp loc_100A6D3  +
mov esi ds:RegEnumKeyExW +
xor edi edi +
mov [ebp+dwErrCode] ebx +
cmp [ebp+cSubKeys] ebx +
jbe loc_100A75B  +
cmp [ebp+dwErrCode] ebx +
jnz loc_100A75B  +
mov eax [ebp+cbMaxSubKeyLen] +
mov ecx [ebp+lpName] +
mov [ebp+cbName] eax +
add eax eax +
cmp eax ebx +
jz loc_100A725  +
mov [ecx] bl +
inc ecx  +
dec eax  +
jnz loc_100A71F  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
lea eax [ebp+cbName] +
push eax  +
push [ebp+lpName]  +
push edi  +
push [ebp+hKey]  +
call esi  +
mov [ebp+dwErrCode] eax +
cmp eax ebx +
jnz loc_100A755  +
push ebx  +
push [ebp+lpName]  +
push [ebp+var_1C]  +
call sub_1002C06  +
cmp eax 0FFFFFFFFh +
jnz loc_100A755  +
mov [ebp+dwErrCode] 0Eh +
inc edi  +
cmp edi [ebp+cSubKeys] +
jb loc_100A70B  +
xor edi edi +
cmp [ebp+var_14] ebx +
jbe loc_100A7B2  +
cmp [ebp+dwErrCode] ebx +
jnz loc_100A7B2  +
mov eax [ebp+var_10] +
mov ecx [ebp+lpName] +
mov [ebp+cbName] eax +
add eax eax +
cmp eax ebx +
jz loc_100A77C  +
mov [ecx] bl +
inc ecx  +
dec eax  +
jnz loc_100A776  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
lea eax [ebp+cbName] +
push eax  +
push [ebp+lpName]  +
push edi  +
push [ebp+arg_8]  +
call esi  +
mov [ebp+dwErrCode] eax +
cmp eax ebx +
jnz loc_100A7AC  +
push ebx  +
push [ebp+lpName]  +
push [ebp+var_20]  +
call sub_1002C06  +
cmp eax 0FFFFFFFFh +
jnz loc_100A7AC  +
mov [ebp+dwErrCode] 0Eh +
inc edi  +
cmp edi [ebp+var_14] +
jb loc_100A762  +
lea eax [ebp+lpName] +
push eax  +
call sub_1002024  +
cmp [ebp+dwErrCode] ebx +
jnz loc_100A811  +
push ebx  +
push [ebp+lpString]  +
call sub_100243E  +
mov ecx [ebp+cbMaxSubKeyLen] +
push ebx  +
push [ebp+arg_C]  +
lea eax [ecx+eax+5] +
mov [ebp+cbMaxSubKeyLen] eax +
call sub_100243E  +
mov ecx [ebp+var_10] +
lea eax [ecx+eax+5] +
mov [ebp+var_10] eax +
mov eax [ebp+cbMaxSubKeyLen] +
add eax eax +
push eax  +
call sub_10026AF  +
mov [ebp+var_24] eax +
cmp eax ebx +
jz loc_100A80A  +
mov eax [ebp+var_10] +
add eax eax +
push eax  +
call sub_10026AF  +
mov [ebp+var_28] eax +
cmp eax ebx +
jnz loc_100A811  +
mov [ebp+dwErrCode] 0Eh +
mov [ebp+var_2C] ebx +
cmp [ebp+cSubKeys] ebx +
jbe loc_100A965  +
cmp [ebp+dwErrCode] ebx +
jnz loc_100A965  +
push [ebp+var_2C]  +
push [ebp+var_1C]  +
call sub_1002F4A  +
push ebx  +
push 1  +
mov esi eax +
push esi  +
push [ebp+var_20]  +
call sub_100DC99  +
mov [ebp+var_3C] eax +
cmp eax 0FFFFFFFFh +
jz loc_100AA21  +
cmp [ebp+arg_10] 4 +
jz loc_100A857  +
cmp [ebp+arg_10] 2 +
jnz loc_100A862  +
push 3  +
push esi  +
push [ebp+lpString]  +
call sub_10098FF  +
push [ebp+cbMaxSubKeyLen]  +
push [ebp+lpString]  +
push [ebp+var_24]  +
call sub_10022BD  +
push [ebp+cbMaxSubKeyLen]  +
mov edi offset dword_10011EC +
push edi  +
push [ebp+var_24]  +
call sub_10028CB  +
push [ebp+cbMaxSubKeyLen]  +
push esi  +
push [ebp+var_24]  +
call sub_10028CB  +
push [ebp+var_10]  +
push [ebp+arg_C]  +
push [ebp+var_28]  +
call sub_10022BD  +
push [ebp+var_10]  +
push edi  +
push [ebp+var_28]  +
call sub_10028CB  +
push [ebp+var_10]  +
push esi  +
push [ebp+var_28]  +
call sub_10028CB  +
mov edi [ebp+arg_20] +
lea eax [ebp+phkResult] +
push eax  +
or edi 20019h +
push edi  +
push ebx  +
push esi  +
push [ebp+hKey]  +
call ds:RegOpenKeyExW  +
mov [ebp+dwErrCode] eax +
cmp eax ebx +
jnz loc_100A965  +
lea eax [ebp+var_38] +
push eax  +
push edi  +
push ebx  +
push esi  +
push [ebp+arg_8]  +
call ds:RegOpenKeyExW  +
mov [ebp+dwErrCode] eax +
cmp eax ebx +
jnz loc_100A965  +
push [ebp+arg_20]  +
mov eax [ebp+arg_1C] +
mov esi [ebp+arg_18] +
inc eax  +
push eax  +
push esi  +
push [ebp+arg_14]  +
push [ebp+arg_10]  +
push [ebp+var_28]  +
push [ebp+var_38]  +
push [ebp+var_24]  +
push [ebp+phkResult]  +
call sub_100A54F  +
mov [ebp+dwErrCode] eax +
lea eax [ebp+phkResult] +
push eax  +
call sub_1001324  +
lea eax [ebp+var_38] +
push eax  +
call sub_1001324  +
cmp [ebp+dwErrCode] ebx +
jnz loc_100A947  +
push [ebp+var_2C]  +
push [ebp+var_1C]  +
call sub_1001DF2  +
push [ebp+var_3C]  +
push [ebp+var_20]  +
call sub_1001DF2  +
dec [ebp+cSubKeys]  +
dec [ebp+var_14]  +
cmp dword ptr [esi] 1 +
jnz loc_100AA24  +
cmp [ebp+arg_10] ebx +
jz loc_100A95F  +
cmp [ebp+arg_10] 1 +
jnz loc_100AA24  +
mov [ebp+cSubKeys] ebx +
mov [ebp+var_14] ebx +
xor edi edi +
xor esi esi +
inc edi  +
cmp [ebp+cSubKeys] ebx +
jbe loc_100A99E  +
cmp [ebp+dwErrCode] ebx +
jnz loc_100A99E  +
push esi  +
push [ebp+var_1C]  +
call sub_1002F4A  +
cmp [ebp+arg_10] 3 +
jz loc_100A989  +
cmp [ebp+arg_10] 4 +
jnz loc_100A993  +
push edi  +
push eax  +
push [ebp+lpString]  +
call sub_10098FF  +
mov eax [ebp+arg_18] +
inc esi  +
mov [eax] edi +
cmp esi [ebp+cSubKeys] +
jb loc_100A96F  +
xor esi esi +
cmp [ebp+var_14] ebx +
jbe loc_100A9D5  +
cmp [ebp+dwErrCode] ebx +
jnz loc_100A9D5  +
push esi  +
push [ebp+var_20]  +
call sub_1002F4A  +
cmp [ebp+arg_10] 3 +
jz loc_100A9BF  +
cmp [ebp+arg_10] 4 +
jnz loc_100A9CA  +
push 2  +
push eax  +
push [ebp+arg_C]  +
call sub_10098FF  +
mov eax [ebp+arg_18] +
inc esi  +
mov [eax] edi +
cmp esi [ebp+var_14] +
jb loc_100A9A5  +
lea eax [ebp+lpName] +
push eax  +
call sub_1002024  +
lea eax [ebp+phkResult] +
push eax  +
call sub_1001324  +
lea eax [ebp+var_38] +
push eax  +
call sub_1001324  +
lea eax [ebp+var_24] +
push eax  +
call sub_1002024  +
lea eax [ebp+var_28] +
push eax  +
call sub_1002024  +
lea eax [ebp+var_1C] +
push eax  +
call sub_1001820  +
lea eax [ebp+var_20] +
push eax  +
call sub_1001820  +
push [ebp+dwErrCode]  +
call sub_1003151  +
mov eax [ebp+dwErrCode] +
jmp loc_100AA57  +
inc [ebp+var_2C]  +
mov eax [ebp+cSubKeys] +
cmp [ebp+var_2C] eax +
jnb loc_100A965  +
jmp loc_100A81D  +
mov eax [ebp+arg_18] +
mov dword ptr [eax] 1 +
jmp loc_100A5E7  +
push esi  +
call sub_1003151  +
mov eax esi +
jmp loc_100AA57  +
push 57h  +
call sub_1003151  +
push 57h  +
pop eax  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 24h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0DCh +
mov eax dword_100F000 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
xor ebx ebx +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
mov [ebp+phkResult] ebx +
mov [ebp+var_D4] ebx +
mov [ebp+var_DC] ebx +
mov [ebp+var_D8] ebx +
cmp [ebp+arg_0] ebx +
jz loc_100AD19  +
cmp esi ebx +
jz loc_100AD19  +
lea eax [ebp+var_68] +
push eax  +
push 8  +
call sub_1002865  +
lea eax [ebp+var_CC] +
push eax  +
push 8  +
call sub_1002865  +
lea eax [ebp+var_DC] +
push eax  +
lea eax [ebp+var_CC] +
push eax  +
lea eax [ebp+var_68] +
push eax  +
push esi  +
push [ebp+arg_0]  +
call sub_1009AB3  +
test eax eax +
jnz loc_100AB12  +
inc ebx  +
push 20000h  +
call ds:__iob_func  +
add eax 40h +
push eax  +
call sub_10030DC  +
lea eax [ebp+var_68] +
push eax  +
call sub_100307D  +
lea eax [ebp+var_CC] +
push eax  +
call sub_100307D  +
mov eax ebx +
jmp loc_100AD33  +
xor esi esi +
inc esi  +
cmp [ebp+var_DC] esi +
jnz loc_100AB26  +
push 8  +
call sub_1008449  +
jmp loc_100AAF6  +
lea eax [ebp+var_68] +
push eax  +
call sub_100138A  +
test eax eax +
jnz loc_100AB52  +
push 0FFFFFFFFh  +
call sub_1003151  +
push 20001h  +
call ds:__iob_func  +
add eax 40h +
push eax  +
call sub_10030DC  +
mov ebx esi +
jmp loc_100AAF6  +
lea eax [ebp+var_CC] +
push eax  +
call sub_100138A  +
test eax eax +
jz loc_100AB33  +
mov eax [ebp+hKey] +
cmp eax [ebp+var_C8] +
jnz loc_100ABA4  +
push ebx  +
push esi  +
push [ebp+lpString2]  +
push [ebp+lpString]  +
call sub_1004857  +
test eax eax +
jnz loc_100ABA4  +
push 800401E4h  +
call ds:SetLastError  +
push ebx  +
push 97h  +
call sub_100339E  +
push eax  +
call sub_1002F79  +
mov ebx esi +
jmp loc_100AAE2  +
mov esi ds:RegOpenKeyExW +
lea eax [ebp+phkResult] +
push eax  +
mov eax [ebp+var_C] +
mov edi 20019h +
or eax edi +
push eax  +
push ebx  +
push [ebp+lpSubKey]  +
push [ebp+hKey]  +
call esi  +
cmp eax ebx +
jz loc_100ABEB  +
push eax  +
call sub_1003151  +
push 20001h  +
call ds:__iob_func  +
add eax 40h +
push eax  +
call sub_10030DC  +
xor ebx ebx +
inc ebx  +
jmp loc_100AAF6  +
lea eax [ebp+var_D4] +
push eax  +
mov eax [ebp+var_C] +
or eax edi +
push eax  +
push ebx  +
push [ebp+var_90]  +
push [ebp+var_C8]  +
call esi  +
cmp eax ebx +
jz loc_100AC33  +
push eax  +
call sub_1003151  +
push 20001h  +
call ds:__iob_func  +
add eax 40h +
push eax  +
call sub_10030DC  +
lea eax [ebp+phkResult] +
push eax  +
call sub_1001324  +
jmp loc_100ABE3  +
lea eax [ebp+var_D8] +
cmp [ebp+lpValueName] ebx +
jz loc_100AC61  +
push eax  +
push [ebp+var_40]  +
push [ebp+lpValueName]  +
push [ebp+lpString2]  +
push [ebp+var_D4]  +
push [ebp+lpString]  +
push [ebp+phkResult]  +
call sub_1009F4D  +
jmp loc_100AC86  +
push [ebp+var_C]  +
push ebx  +
push eax  +
push [ebp+var_50]  +
push [ebp+var_40]  +
push [ebp+lpString2]  +
push [ebp+var_D4]  +
push [ebp+lpString]  +
push [ebp+phkResult]  +
call sub_100A54F  +
cmp eax ebx +
jnz loc_100ACD1  +
cmp [ebp+var_D8] 1 +
jnz loc_100AC9E  +
push 2  +
pop esi  +
push ebx  +
push 1FFh  +
jmp loc_100ACA6  +
push ebx  +
xor esi esi +
push 200h  +
call sub_100339E  +
push eax  +
call ds:__iob_func  +
add eax 20h +
push eax  +
call sub_100245F  +
push ebx  +
call sub_1003151  +
push 20000h  +
call ds:__iob_func  +
add eax 20h +
jmp loc_100ACE2  +
xor esi esi +
push 20001h  +
inc esi  +
call ds:__iob_func  +
add eax 40h +
push eax  +
call sub_10030DC  +
lea eax [ebp+phkResult] +
push eax  +
call sub_1001324  +
lea eax [ebp+var_D4] +
push eax  +
call sub_1001324  +
lea eax [ebp+var_68] +
push eax  +
call sub_100307D  +
lea eax [ebp+var_CC] +
push eax  +
call sub_100307D  +
mov eax esi +
jmp loc_100AD33  +
push 57h  +
call ds:SetLastError  +
call ds:__iob_func  +
add eax 40h +
push eax  +
call sub_100D7CD  +
xor eax eax +
inc eax  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1002AF3  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
xor ebx ebx +
push esi  +
push edi  +
cmp [ebp+arg_0] ebx +
jz loc_100AF3C  +
mov edi [ebp+arg_4] +
cmp edi ebx +
jz loc_100AF3C  +
mov esi [ebp+arg_8] +
cmp esi ebx +
jz loc_100AF3C  +
cmp [ebp+arg_C] ebx +
jz loc_100AF3C  +
mov eax [esi] +
cmp eax ebx +
jl loc_100AF3C  +
cmp eax 0Ch +
jge loc_100AF3C  +
push 1  +
push offset a??HH  +
push dword ptr [edi+8]  +
call sub_100272D  +
xor ecx ecx +
inc ecx  +
cmp eax ecx +
jnz loc_100ADDE  +
cmp [ebp+arg_0] 3 +
jnz loc_100ADB6  +
mov eax [ebp+arg_C] +
mov [eax] ecx +
mov eax ecx +
jmp loc_100AF45  +
push 800401E4h  +
call ds:SetLastError  +
push offset aExport  +
push ebx  +
push 67h  +
call sub_100339E  +
push eax  +
push 1  +
call sub_10057BA  +
add esp 0Ch +
jmp loc_100AF43  +
mov eax [ebp+arg_0] +
add eax 0FFFFFFFCh +
cmp eax 2 +
ja loc_100ADB6  +
push esi  +
push dword ptr [edi+8]  +
call sub_100236F  +
test eax eax +
jz loc_100AF43  +
cmp dword ptr [esi+8] 1 +
jnz loc_100AE21  +
push 800401E4h  +
call ds:SetLastError  +
push ebx  +
push 0ABh  +
call sub_100339E  +
push eax  +
call sub_1002F79  +
jmp loc_100AF43  +
push ebx  +
push dword ptr [edi+0Ch]  +
call sub_100243E  +
mov edi eax +
add edi 5 +
lea eax [edi+edi] +
push eax  +
call sub_10026AF  +
mov [esi+44h] eax +
cmp eax ebx +
jnz loc_100AE49  +
call sub_1003182  +
jmp loc_100AF43  +
mov ecx [ebp+arg_4] +
push edi  +
push dword ptr [ecx+0Ch]  +
push eax  +
call sub_10022BD  +
push 3  +
push dword ptr [esi+44h]  +
call sub_10029E7  +
push ebx  +
push dword ptr [esi+44h]  +
call sub_100243E  +
test eax eax +
jz loc_100ADB6  +
mov [esi+10h] ebx +
mov [esi+5Ch] ebx +
jmp loc_100AF2D  +
dec [ebp+arg_0]  +
mov eax [ebp+arg_4] +
mov ecx [ebp+arg_0] +
push ebx  +
push 1  +
lea edi [eax+ecx*4] +
push offset aY  +
push dword ptr [edi]  +
call sub_100151B  +
test eax eax +
jz loc_100AF26  +
push ebx  +
push 1  +
push offset aY_0  +
push dword ptr [edi]  +
call sub_100151B  +
test eax eax +
jz loc_100AF26  +
push ebx  +
push 1  +
push offset aReg32  +
push dword ptr [edi]  +
call sub_100151B  +
test eax eax +
jz loc_100AF14  +
push ebx  +
push 1  +
push offset aReg32_0  +
push dword ptr [edi]  +
call sub_100151B  +
test eax eax +
jz loc_100AF14  +
push ebx  +
push 1  +
push offset aReg64  +
push dword ptr [edi]  +
call sub_100151B  +
test eax eax +
jz loc_100AF02  +
push ebx  +
push 1  +
push offset aReg64_0  +
push dword ptr [edi]  +
call sub_100151B  +
test eax eax +
jnz loc_100ADB6  +
cmp [esi+5Ch] ebx +
jnz loc_100ADB6  +
mov dword ptr [esi+5Ch] 100h +
jmp loc_100AF2D  +
cmp [esi+5Ch] ebx +
jnz loc_100ADB6  +
mov dword ptr [esi+5Ch] 200h +
jmp loc_100AF2D  +
mov dword ptr [esi+10h] 1 +
cmp [ebp+arg_0] 5 +
jnb loc_100AE7C  +
xor eax eax +
inc eax  +
jmp loc_100AF45  +
push 57h  +
call sub_1003151  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
push ebx  +
push esi  +
push edi  +
jz loc_100B0AF  +
mov esi [ebp+arg_4] +
test esi esi +
jz loc_100B0AF  +
mov eax [ebp+arg_8] +
test eax eax +
jz loc_100B0AF  +
mov edi [ebp+arg_C] +
test edi edi +
jz loc_100B0AF  +
mov eax [eax] +
test eax eax +
jl loc_100B0AF  +
cmp eax 0Ch +
jge loc_100B0AF  +
cmp [ebp+arg_0] 3 +
jz loc_100AFCC  +
cmp [ebp+arg_0] 4 +
jz loc_100AFCC  +
push 800401E4h  +
call ds:SetLastError  +
push offset aImport  +
push 0  +
push 67h  +
call sub_100339E  +
push eax  +
push 1  +
call sub_10057BA  +
add esp 0Ch +
jmp loc_100B0B6  +
xor ebx ebx +
inc ebx  +
push ebx  +
push offset a??HH  +
push dword ptr [esi+8]  +
call sub_100272D  +
cmp eax ebx +
jnz loc_100AFEA  +
mov [edi] ebx +
mov eax ebx +
jmp loc_100B0B8  +
push 0  +
push dword ptr [esi+8]  +
call sub_100243E  +
mov edi eax +
inc edi  +
lea eax [edi+edi] +
push eax  +
call sub_10026AF  +
mov ecx [ebp+arg_8] +
mov [ecx+44h] eax +
test eax eax +
jnz loc_100B014  +
call sub_1003182  +
jmp loc_100B0B6  +
push edi  +
push dword ptr [esi+8]  +
push eax  +
call sub_10022BD  +
cmp [ebp+arg_0] 4 +
jnz loc_100AFE3  +
xor edi edi +
push edi  +
push ebx  +
push offset aReg32  +
push dword ptr [esi+0Ch]  +
call sub_100151B  +
test eax eax +
jz loc_100B0A0  +
push edi  +
push ebx  +
push offset aReg32_0  +
push dword ptr [esi+0Ch]  +
call sub_100151B  +
test eax eax +
jz loc_100B0A0  +
push edi  +
push ebx  +
push offset aReg64  +
push dword ptr [esi+0Ch]  +
call sub_100151B  +
test eax eax +
jz loc_100B091  +
push edi  +
push ebx  +
push offset aReg64_0  +
push dword ptr [esi+0Ch]  +
call sub_100151B  +
test eax eax +
jz loc_100B091  +
push 800401E4h  +
call ds:SetLastError  +
push offset aImport  +
push edi  +
push 67h  +
call sub_100339E  +
push eax  +
push ebx  +
jmp loc_100AFBF  +
mov eax [ebp+arg_8] +
mov dword ptr [eax+5Ch] 100h +
jmp loc_100AFE3  +
mov eax [ebp+arg_8] +
mov dword ptr [eax+5Ch] 200h +
jmp loc_100AFE3  +
push 57h  +
call sub_1003151  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 70h +
mov eax dword_100F000 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
xor edi edi +
mov [ebp+phkResult] edi +
mov [ebp+var_6C] edi +
cmp [ebp+arg_0] edi +
jz loc_100B29F  +
cmp esi edi +
jz loc_100B29F  +
lea eax [ebp+var_68] +
push eax  +
push 9  +
call sub_1002865  +
lea eax [ebp+var_6C] +
push eax  +
lea eax [ebp+var_68] +
push eax  +
push esi  +
push [ebp+arg_0]  +
call sub_100AD49  +
test eax eax +
jnz loc_100B13A  +
push 20000h  +
call ds:__iob_func  +
add eax 40h +
push eax  +
call sub_10030DC  +
inc edi  +
lea eax [ebp+var_68] +
push eax  +
call sub_100307D  +
mov eax edi +
jmp loc_100B2B9  +
xor ebx ebx +
inc ebx  +
cmp [ebp+var_6C] ebx +
jnz loc_100B14B  +
push 9  +
call sub_1008449  +
jmp loc_100B12A  +
lea eax [ebp+phkResult] +
push eax  +
mov eax [ebp+var_C] +
or eax 20019h +
push eax  +
push edi  +
push [ebp+lpSubKey]  +
mov [ebp+var_6C] ebx +
push [ebp+hKey]  +
call ds:RegOpenKeyExW  +
mov esi eax +
cmp esi edi +
jnz loc_100B23A  +
lea eax [ebp+phkResult] +
push eax  +
call sub_1001324  +
push edi  +
push edi  +
push 3  +
push edi  +
push edi  +
push 0C0010000h  +
push [ebp+lpString]  +
call ds:CreateFileW  +
cmp eax 0FFFFFFFFh +
jz loc_100B1D5  +
push eax  +
call ds:CloseHandle  +
push ebx  +
push 0CEh  +
call sub_100339E  +
push edi  +
push 0CFh  +
mov esi eax +
call sub_100339E  +
mov ebx eax +
push [ebp+var_58]  +
push esi  +
push [ebp+lpString]  +
push ebx  +
call sub_10034CE  +
cmp eax 2 +
jg loc_100B1B5  +
dec eax  +
neg eax  +
sbb eax eax +
and eax 4C7h +
mov esi eax +
jmp loc_100B1EC  +
call ds:GetLastError  +
cmp eax 2 +
jnz loc_100B1E4  +
xor esi esi +
jmp loc_100B1F0  +
mov [ebp+var_6C] edi +
mov esi 322h +
cmp esi edi +
jnz loc_100B24B  +
mov eax [ebp+lpString] +
push eax  +
mov [ebp+lpNewFileName] eax +
call sub_100852A  +
mov [ebp+lpString] eax +
cmp eax edi +
jnz loc_100B20A  +
mov esi 322h +
jmp loc_100B258  +
push [ebp+var_C]  +
push [ebp+lpString2]  +
push eax  +
call sub_100CEE9  +
push edi  +
push [ebp+lpNewFileName]  +
push [ebp+lpString]  +
call ds:CopyFileW  +
test eax eax +
jnz loc_100B22F  +
mov [ebp+var_6C] edi +
mov esi 322h +
push [ebp+lpString]  +
call ds:DeleteFileW  +
jmp loc_100B247  +
cmp esi 6 +
jnz loc_100B247  +
mov [ebp+var_6C] edi +
mov esi 321h +
cmp esi edi +
jz loc_100B280  +
cmp esi 4C7h +
jz loc_100B280  +
cmp [ebp+var_6C] edi +
jnz loc_100B267  +
push edi  +
push esi  +
call sub_100339E  +
push eax  +
call sub_1002F79  +
jmp loc_100B26D  +
push esi  +
call sub_1003151  +
xor edi edi +
push 20001h  +
inc edi  +
call ds:__iob_func  +
add eax 40h +
jmp loc_100B294  +
push esi  +
call sub_1003151  +
push 20000h  +
call ds:__iob_func  +
add eax 20h +
push eax  +
call sub_10030DC  +
jmp loc_100B12A  +
push 57h  +
call ds:SetLastError  +
call ds:__iob_func  +
add eax 40h +
push eax  +
call sub_100D7CD  +
xor eax eax +
inc eax  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1002AF3  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 6Ch +
mov eax dword_100F000 +
xor eax ebp +
mov [ebp+var_4] eax +
and [ebp+var_6C] 0 +
cmp [ebp+arg_0] 0 +
push esi  +
mov esi [ebp+arg_4] +
jz loc_100B3A4  +
test esi esi +
jz loc_100B3A4  +
lea eax [ebp+var_68] +
push eax  +
push 0Ah  +
call sub_1002865  +
lea eax [ebp+var_6C] +
push eax  +
lea eax [ebp+var_68] +
push eax  +
push esi  +
push [ebp+arg_0]  +
call sub_100AF51  +
test eax eax +
jnz loc_100B33F  +
push 20000h  +
call ds:__iob_func  +
add eax 40h +
push eax  +
call sub_10030DC  +
xor esi esi +
inc esi  +
lea eax [ebp+var_68] +
push eax  +
call sub_100307D  +
mov eax esi +
jmp loc_100B3BE  +
xor esi esi +
inc esi  +
cmp [ebp+var_6C] esi +
jnz loc_100B352  +
push 0Ah  +
call sub_1008449  +
xor esi esi +
jmp loc_100B332  +
push [ebp+var_C]  +
push [ebp+var_24]  +
call sub_100D12D  +
mov eax dwErrCode +
test eax eax +
jnz loc_100B382  +
push eax  +
call sub_1003151  +
push 20000h  +
call ds:__iob_func  +
add eax 40h +
push eax  +
call sub_10030DC  +
jmp loc_100B34E  +
push eax  +
call sub_100D930  +
push eax  +
call sub_1002F79  +
push 20001h  +
call ds:__iob_func  +
add eax 40h +
push eax  +
call sub_10030DC  +
jmp loc_100B332  +
push 57h  +
call ds:SetLastError  +
call ds:__iob_func  +
add eax 40h +
push eax  +
call sub_100D7CD  +
xor eax eax +
inc eax  +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop esi  +
call sub_1002AF3  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 34h +
push ebx  +
push esi  +
push edi  +
xor edi edi +
mov [ebp+lpSubKey] edi +
mov [ebp+var_8] edi +
cmp [ebp+hKey] edi +
jz loc_100B694  +
cmp [ebp+lpString] edi +
jz loc_100B694  +
mov esi [ebp+arg_8] +
cmp esi edi +
jz loc_100B694  +
xor ebx ebx +
inc ebx  +
cmp [esi+58h] ebx +
jnz loc_100B451  +
mov eax [esi+60h] +
push 4  +
mov [ebp+var_20] eax +
lea eax [ebp+var_20] +
push eax  +
push 2  +
push [ebp+hKey]  +
call ds:NtSetInformationKey  +
mov ecx eax +
mov eax 0C0000000h +
and ecx eax +
cmp ecx eax +
jnz loc_100B513  +
push dword ptr [esi+40h]  +
push edi  +
push 0A1h  +
call sub_100339E  +
push eax  +
push ebx  +
call sub_10057BA  +
add esp 0Ch +
mov eax ebx +
jmp loc_100B69E  +
lea eax [ebp+var_28] +
push eax  +
push 0Ch  +
lea eax [ebp+var_34] +
push eax  +
push 5  +
push [ebp+hKey]  +
call ds:NtQueryKey  +
mov ecx eax +
mov eax 0C0000000h +
and ecx eax +
cmp ecx eax +
jz loc_100B432  +
mov esi ds:__iob_func +
push offset asc_1003C30  +
call esi  +
add eax 20h +
push eax  +
call sub_100245F  +
push [ebp+lpString]  +
push offset Source  +
push ebx  +
push ebx  +
call esi  +
add eax 20h +
push eax  +
call sub_1004105  +
add esp 14h +
test [ebp+var_2C] 2 +
mov eax offset aSet +
jnz loc_100B4B1  +
mov eax offset aClear +
push eax  +
push offset aReg_key_dont_v  +
push ebx  +
push ebx  +
call esi  +
add eax 20h +
push eax  +
call sub_1004105  +
add esp 14h +
test [ebp+var_2C] 4 +
mov eax offset aSet +
jnz loc_100B4D7  +
mov eax offset aClear +
push eax  +
push offset aReg_key_dont_s  +
push ebx  +
push ebx  +
call esi  +
add eax 20h +
push eax  +
call sub_1004105  +
add esp 14h +
test [ebp+var_2C] 8 +
mov eax offset aSet +
jnz loc_100B4FD  +
mov eax offset aClear +
push eax  +
push offset aReg_key_recurs  +
push ebx  +
push ebx  +
call esi  +
add eax 20h +
push eax  +
call sub_1004105  +
add esp 14h +
mov eax [ebp+arg_8] +
xor ebx ebx +
cmp dword ptr [eax+18h] 1 +
jnz loc_100B44A  +
push edi  +
push edi  +
push edi  +
push edi  +
push edi  +
push edi  +
lea eax [ebp+cbMaxSubKeyLen] +
push eax  +
lea eax [ebp+cSubKeys] +
push eax  +
push edi  +
push edi  +
push edi  +
push [ebp+hKey]  +
call ds:RegQueryInfoKeyW  +
mov esi eax +
cmp esi edi +
jz loc_100B54F  +
push esi  +
call sub_1003151  +
mov eax esi +
jmp loc_100B69E  +
mov eax [ebp+cbMaxSubKeyLen] +
cmp [ebp+cSubKeys] edi +
jz loc_100B562  +
cmp eax edi +
jnz loc_100B562  +
mov eax 100h +
jmp loc_100B56B  +
cmp eax 100h +
jnb loc_100B56B  +
add eax eax +
inc eax  +
mov [ebp+cbMaxSubKeyLen] eax +
add eax eax +
push eax  +
call sub_10026AF  +
mov [ebp+lpSubKey] eax +
cmp eax edi +
jnz loc_100B58C  +
push 0Eh  +
call sub_1003151  +
push 0Eh  +
jmp loc_100B69D  +
push edi  +
push [ebp+lpString]  +
call sub_100243E  +
mov ecx [ebp+cbMaxSubKeyLen] +
lea eax [eax+ecx+1] +
mov [ebp+var_14] eax +
add eax eax +
push eax  +
call sub_10026AF  +
mov [ebp+var_8] eax +
cmp eax edi +
jnz loc_100B5B9  +
lea eax [ebp+lpSubKey] +
push eax  +
call sub_1002024  +
jmp loc_100B57E  +
xor ebx ebx +
mov [ebp+dwIndex] edi +
cmp [ebp+cSubKeys] edi +
jbe loc_100B67D  +
mov esi ds:RegOpenKeyExW +
mov eax [ebp+cbMaxSubKeyLen] +
mov [ebp+cbName] eax +
add eax eax +
push eax  +
push edi  +
push [ebp+lpSubKey]  +
call memset  +
add esp 0Ch +
push edi  +
push edi  +
push edi  +
push edi  +
lea eax [ebp+cbName] +
push eax  +
push [ebp+lpSubKey]  +
push [ebp+dwIndex]  +
push [ebp+hKey]  +
call ds:RegEnumKeyExW  +
test eax eax +
jz loc_100B601  +
xor ebx ebx +
jmp loc_100B66E  +
push [ebp+var_14]  +
push [ebp+lpString]  +
push [ebp+var_8]  +
call sub_10022BD  +
push [ebp+var_14]  +
push offset dword_10011EC  +
push [ebp+var_8]  +
call sub_10028CB  +
push [ebp+var_14]  +
push [ebp+lpSubKey]  +
push [ebp+var_8]  +
call sub_10028CB  +
mov ebx [ebp+arg_8] +
cmp dword ptr [ebx+58h] 1 +
lea eax [ebp+phkResult] +
push eax  +
mov eax [ebx+5Ch] +
jnz loc_100B644  +
or eax 0F003Fh +
jmp loc_100B649  +
or eax 20019h +
push eax  +
push edi  +
push [ebp+lpSubKey]  +
push [ebp+hKey]  +
call esi  +
cmp eax edi +
jnz loc_100B5FD  +
push ebx  +
push [ebp+var_8]  +
push [ebp+phkResult]  +
call sub_100B3D2  +
mov ebx eax +
lea eax [ebp+phkResult] +
push eax  +
call sub_1001324  +
inc [ebp+dwIndex]  +
mov eax [ebp+dwIndex] +
cmp eax [ebp+cSubKeys] +
jb loc_100B5CD  +
lea eax [ebp+lpSubKey] +
push eax  +
call sub_1002024  +
lea eax [ebp+var_8] +
push eax  +
call sub_1002024  +
jmp loc_100B44A  +
push 57h  +
call sub_1003151  +
push 57h  +
pop eax  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
xor ebx ebx +
push esi  +
push edi  +
cmp [ebp+arg_0] ebx +
jz loc_100BA4A  +
mov edi [ebp+arg_4] +
cmp edi ebx +
jz loc_100BA4A  +
mov esi [ebp+arg_8] +
cmp esi ebx +
jz loc_100BA4A  +
cmp [ebp+arg_C] ebx +
jz loc_100BA4A  +
mov eax [esi] +
cmp eax ebx +
jl loc_100BA4A  +
cmp eax 0Ch +
jge loc_100BA4A  +
cmp [ebp+arg_0] 3 +
jnb loc_100B7E0  +
push 800401E4h  +
call ds:SetLastError  +
push offset aFlags  +
push ebx  +
push 67h  +
call sub_100339E  +
push eax  +
push 1  +
call sub_10057BA  +
add esp 0Ch +
jmp loc_100BA51  +
push ebx  +
xor ebx ebx +
inc ebx  +
push ebx  +
push offset aFlags_0  +
push dword ptr [edi+4]  +
call sub_100151B  +
test eax eax +
jnz loc_100BA4A  +
push ebx  +
push offset a??HH  +
push dword ptr [edi+8]  +
call sub_100272D  +
cmp eax ebx +
jnz loc_100B83B  +
cmp [ebp+arg_0] 3 +
jnz loc_100B81E  +
mov eax [ebp+arg_C] +
mov [eax] ebx +
mov eax ebx +
jmp loc_100BA53  +
push 800401E4h  +
call ds:SetLastError  +
push offset aFlags  +
push 0  +
push 67h  +
call sub_100339E  +
push eax  +
push ebx  +
jmp loc_100B7D3  +
push esi  +
push dword ptr [edi+8]  +
call sub_100236F  +
test eax eax +
jz loc_100BA51  +
cmp [esi+8] ebx +
jnz loc_100B873  +
push 800401E4h  +
call ds:SetLastError  +
push 0  +
push 0ACh  +
call sub_100339E  +
push eax  +
call sub_1002F79  +
jmp loc_100BA51  +
push 0  +
push ebx  +
push offset aHkey_local_m_0  +
push dword ptr [esi+40h]  +
call sub_100157E  +
push 0  +
cmp eax 0FFFFFFFFh +
jnz loc_100B88E  +
push 6Dh  +
jmp loc_100B863  +
push ebx  +
push offset aQuery_0  +
push dword ptr [edi+0Ch]  +
call sub_100151B  +
test eax eax +
jnz loc_100B8A5  +
and [esi+58h] eax +
jmp loc_100B8C0  +
push 0  +
push ebx  +
push offset aSet  +
push dword ptr [edi+0Ch]  +
call sub_100151B  +
test eax eax +
jnz loc_100B81E  +
mov [esi+58h] ebx +
and [ebp+arg_C] 0 +
and dword ptr [esi+60h] 0 +
push 4  +
pop eax  +
mov [ebp+arg_8] eax +
cmp [ebp+arg_0] eax +
ja loc_100B8DB  +
jmp loc_100BA40  +
mov edi [ebp+arg_4] +
mov eax [ebp+arg_8] +
push 0  +
push ebx  +
lea edi [edi+eax*4] +
push offset aS_0  +
push dword ptr [edi]  +
call sub_100151B  +
test eax eax +
jz loc_100BA00  +
push 0  +
push ebx  +
push offset aS_1  +
push dword ptr [edi]  +
call sub_100151B  +
test eax eax +
jz loc_100BA00  +
push 0  +
push ebx  +
push offset aDont_virtualiz  +
push dword ptr [edi]  +
call sub_100151B  +
test eax eax +
jnz loc_100B93B  +
cmp [esi+58h] eax +
jz loc_100BA18  +
mov eax [esi+60h] +
test al 2 +
jnz loc_100BA18  +
or eax 2 +
jmp loc_100B991  +
push 0  +
push ebx  +
push offset aDont_silent_fa  +
push dword ptr [edi]  +
call sub_100151B  +
test eax eax +
jnz loc_100B967  +
cmp [esi+58h] eax +
jz loc_100BA18  +
mov eax [esi+60h] +
test al 4 +
jnz loc_100BA18  +
or eax 4 +
jmp loc_100B991  +
push 0  +
push ebx  +
push offset aRecurse_flag  +
push dword ptr [edi]  +
call sub_100151B  +
test eax eax +
jnz loc_100B996  +
cmp [esi+58h] eax +
jz loc_100BA18  +
mov eax [esi+60h] +
test al 8 +
jnz loc_100BA18  +
or eax 8 +
mov [esi+60h] eax +
jmp loc_100BA08  +
push 0  +
push ebx  +
push offset aReg32  +
push dword ptr [edi]  +
call sub_100151B  +
test eax eax +
jz loc_100B9F1  +
push 0  +
push ebx  +
push offset aReg32_0  +
push dword ptr [edi]  +
call sub_100151B  +
test eax eax +
jz loc_100B9F1  +
push 0  +
push ebx  +
push offset aReg64  +
push dword ptr [edi]  +
call sub_100151B  +
test eax eax +
jz loc_100B9E2  +
push 0  +
push ebx  +
push offset aReg64_0  +
push dword ptr [edi]  +
call sub_100151B  +
test eax eax +
jnz loc_100BA18  +
cmp dword ptr [esi+5Ch] 0 +
jnz loc_100BA18  +
mov dword ptr [esi+5Ch] 100h +
jmp loc_100BA08  +
cmp dword ptr [esi+5Ch] 0 +
jnz loc_100BA18  +
mov dword ptr [esi+5Ch] 200h +
jmp loc_100BA08  +
cmp [esi+18h] ebx +
jz loc_100BA18  +
mov [esi+18h] ebx +
inc [ebp+arg_8]  +
mov eax [ebp+arg_8] +
cmp eax [ebp+arg_0] +
jnb loc_100BA40  +
jmp loc_100B8D8  +
push 67h  +
pop esi  +
push 800401E4h  +
mov [ebp+arg_C] esi +
call ds:SetLastError  +
push offset aFlags  +
push 0  +
push esi  +
call sub_100339E  +
push eax  +
push ebx  +
call sub_10057BA  +
add esp 0Ch +
xor eax eax +
cmp [ebp+arg_C] eax +
setz al  +
jmp loc_100BA53  +
push 57h  +
call sub_1003151  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 70h +
mov eax dword_100F000 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
xor edi edi +
mov [ebp+phkResult] edi +
cmp [ebp+arg_0] edi +
jz loc_100BC3C  +
cmp esi edi +
jz loc_100BC3C  +
lea eax [ebp+var_68] +
push eax  +
push 0Bh  +
call sub_1002865  +
lea eax [ebp+var_70] +
push eax  +
lea eax [ebp+var_68] +
push eax  +
push esi  +
push [ebp+arg_0]  +
call sub_100B76D  +
test eax eax +
jnz loc_100BB79  +
push 20000h  +
call ds:__iob_func  +
add eax 40h +
push eax  +
call sub_10030DC  +
xor esi esi +
inc esi  +
lea eax [ebp+var_68] +
push eax  +
call sub_100307D  +
mov eax esi +
jmp loc_100BC56  +
cmp [ebp+var_70] 1 +
jnz loc_100BB8A  +
push 0Bh  +
call sub_1008449  +
xor esi esi +
jmp loc_100BB69  +
lea eax [ebp+phkResult] +
push eax  +
mov eax [ebp+var_C] +
cmp [ebp+var_10] edi +
jnz loc_100BB9D  +
or eax 20019h +
jmp loc_100BBA2  +
or eax 0F003Fh +
push eax  +
push edi  +
push [ebp+lpSubKey]  +
push [ebp+hKey]  +
call ds:RegOpenKeyExW  +
mov esi eax +
cmp esi edi +
jz loc_100BBD2  +
push esi  +
call sub_1003151  +
push 20001h  +
call ds:__iob_func  +
add eax 40h +
push eax  +
call sub_10030DC  +
jmp loc_100BB69  +
lea eax [ebp+var_68] +
push eax  +
push [ebp+lpString]  +
push [ebp+phkResult]  +
call sub_100B3D2  +
mov esi eax +
lea eax [ebp+phkResult] +
push eax  +
call sub_1001324  +
lea eax [ebp+var_68] +
push eax  +
call sub_100307D  +
cmp esi edi +
jz loc_100BC1B  +
push esi  +
call sub_1003151  +
push 20001h  +
call ds:__iob_func  +
add eax 40h +
push eax  +
call sub_10030DC  +
xor esi esi +
inc esi  +
jmp loc_100BB72  +
push edi  +
xor esi esi +
call sub_1003151  +
push 20000h  +
call ds:__iob_func  +
add eax 20h +
push eax  +
call sub_10030DC  +
jmp loc_100BB72  +
push 57h  +
call ds:SetLastError  +
call ds:__iob_func  +
add eax 40h +
push eax  +
call sub_100D7CD  +
xor eax eax +
inc eax  +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_1002AF3  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov ecx dword_104F6C4 +
push esi  +
mov esi dword_104F6CC +
push edi  +
cmp ecx esi +
jnz loc_100BD40  +
cmp dword_100F484 1 +
push 0  +
lea eax [ebp+cchMultiByte] +
push eax  +
jnz loc_100BCCD  +
push 10000h  +
push offset WideCharStr  +
push hFile  +
call ds:ReadFile  +
test eax eax +
jnz loc_100BCC1  +
mov dwErrCode 2BFh +
xor eax eax +
jmp loc_100BD5D  +
mov eax [ebp+cchMultiByte] +
cdq   +
sub eax edx +
mov esi eax +
sar esi 1 +
jmp loc_100BCFF  +
mov edi 10000h +
push edi  +
mov esi offset unk_100F6C0 +
push esi  +
push hFile  +
call ds:ReadFile  +
test eax eax +
jz loc_100BCB0  +
push edi  +
push offset WideCharStr  +
push [ebp+cchMultiByte]  +
push esi  +
push 1  +
push 3  +
call ds:MultiByteToWideChar  +
mov esi eax +
mov eax [ebp+cchMultiByte] +
mov edi dword_104F6D0 +
add dword_104F6D4 eax +
xor ecx ecx +
mov dword_104F6CC esi +
mov dword_104F6C4 ecx +
test edi edi +
jz loc_100BD2E  +
mov eax dword_104F6D4 +
xor edx edx +
div  edi +
cmp eax 64h +
jbe loc_100BD31  +
push 64h  +
pop eax  +
cmp dword_104F6D8 eax +
jz loc_100BD3E  +
mov dword_104F6D8 eax +
cmp ecx esi +
jge loc_100BCBA  +
mov ax WideCharStr[ecx*2] +
mov ecx [ebp+arg_0] +
mov [ecx] ax +
inc dword_104F6C4  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
lea eax [ebp+var_4] +
push eax  +
xor esi esi +
call sub_100BC6B  +
test eax eax +
jz loc_100BD91  +
mov ax [ebp+arg_0] +
cmp ax word ptr [ebp+var_4] +
jnz loc_100BD8B  +
inc esi  +
jmp loc_100BD91  +
dec dword_104F6C4  +
mov eax esi +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 20h +
jz loc_100BDB4  +
cmp [ebp+arg_0] 9 +
jz loc_100BDB4  +
xor eax eax +
jmp loc_100BDB7  +
xor eax eax +
inc eax  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0Ah +
jz loc_100BDD7  +
cmp [ebp+arg_0] 0Dh +
jz loc_100BDD7  +
xor eax eax +
jmp loc_100BDDA  +
xor eax eax +
inc eax  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax dword_104F6C4 +
test eax eax +
jz loc_100BE26  +
push 0  +
lea ecx [ebp+NumberOfBytesWritten] +
push ecx  +
add eax eax +
push eax  +
push offset WideCharStr  +
push hFile  +
call ds:WriteFile  +
test eax eax +
jz loc_100BE1C  +
mov eax dword_104F6C4 +
add eax eax +
cmp eax [ebp+NumberOfBytesWritten] +
jz loc_100BE26  +
mov dwErrCode 322h +
and dword_104F6C4 0 +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2Ch +
push edi  +
lea eax [ebp+phkResult] +
push eax  +
mov eax [ebp+arg_8] +
or eax 9 +
push eax  +
xor edi edi +
push edi  +
push [ebp+lpSubKey]  +
mov [ebp+cbClass] edi +
push [ebp+hKey]  +
call ds:RegOpenKeyExW  +
test eax eax +
jz loc_100BE73  +
push edi  +
push [ebp+arg_8]  +
push [ebp+lpSubKey]  +
push [ebp+hKey]  +
call ds:RegDeleteKeyExW  +
jmp loc_100BF33  +
push esi  +
lea eax [ebp+ftLastWriteTime] +
push eax  +
lea eax [ebp+cbSecurityDescriptor] +
push eax  +
lea eax [ebp+cbMaxValueLen] +
push eax  +
lea eax [ebp+cbMaxValueNameLen] +
push eax  +
lea eax [ebp+cValues] +
push eax  +
lea eax [ebp+cbMaxClassLen] +
push eax  +
lea eax [ebp+cbMaxSubKeyLen] +
push eax  +
lea eax [ebp+cSubKeys] +
push eax  +
push edi  +
lea eax [ebp+cbClass] +
push eax  +
push edi  +
push [ebp+phkResult]  +
call ds:RegQueryInfoKeyW  +
cmp eax edi +
jz loc_100BEC2  +
cmp eax 0EAh +
jz loc_100BEC2  +
cmp eax 7Ah +
jz loc_100BEC2  +
mov esi eax +
push [ebp+phkResult]  +
call ds:RegCloseKey  +
mov eax esi +
jmp loc_100BF32  +
mov eax [ebp+cbMaxSubKeyLen] +
lea eax [eax+eax+2] +
push eax  +
push 40h  +
call ds:LocalAlloc  +
mov esi eax +
cmp esi edi +
jnz loc_100BEDD  +
push 8  +
pop esi  +
jmp loc_100BEB5  +
push ebx  +
xor ebx ebx +
mov eax [ebp+cbMaxSubKeyLen] +
inc eax  +
push eax  +
push esi  +
push ebx  +
push [ebp+phkResult]  +
call ds:RegEnumKeyW  +
cmp eax edi +
jnz loc_100BF04  +
push [ebp+arg_8]  +
push esi  +
push [ebp+phkResult]  +
call sub_100BE34  +
cmp eax edi +
jz loc_100BF05  +
inc ebx  +
cmp eax 103h +
jz loc_100BF11  +
cmp ebx [ebp+cSubKeys] +
jb loc_100BEE0  +
push esi  +
call ds:LocalFree  +
push [ebp+phkResult]  +
call ds:RegCloseKey  +
push edi  +
push [ebp+arg_8]  +
push [ebp+lpSubKey]  +
push [ebp+hKey]  +
call ds:RegDeleteKeyExW  +
pop ebx  +
pop esi  +
pop edi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
push edi  +
push 5Ch  +
push [ebp+lpString2]  +
xor ebx ebx +
mov [ebp+var_4] ebx +
call ds:StrChrW  +
mov edi eax +
cmp edi ebx +
jz loc_100BF69  +
movzx eax word ptr [edi] +
mov [ebp+var_4] eax +
xor eax eax +
mov [edi] ax +
inc edi  +
inc edi  +
push [ebp+lpString2]  +
call ds:CharUpperW  +
xor esi esi +
push [ebp+lpString2]  +
push ds:lpString1[esi*8]  +
call ds:lstrcmpW  +
test eax eax +
jz loc_100BFAB  +
inc esi  +
cmp esi 6 +
jb loc_100BF74  +
mov [ebp+lpString2] 3F2h +
cmp edi ebx +
jz loc_100BFA1  +
mov ax word ptr [ebp+var_4] +
mov [edi-2] ax +
mov eax [ebp+lpString2] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
mov esi ds:hKey[esi*8] +
cmp esi ebx +
jz loc_100BF8E  +
mov eax [ebp+arg_8] +
sub eax ebx +
mov [ebp+lpString2] 3F3h +
jz loc_100C012  +
dec eax  +
jz loc_100BFDE  +
dec eax  +
jnz loc_100BF95  +
push [ebp+arg_C]  +
push edi  +
push esi  +
call sub_100BE34  +
mov eax [ebp+phkResult] +
mov [ebp+lpString2] ebx +
mov [eax] ebx +
jmp loc_100BF95  +
cmp esi 80000002h +
jz loc_100BFEE  +
cmp esi 80000003h +
jnz loc_100BFF7  +
cmp edi ebx +
jnz loc_100BFF7  +
mov [ebp+lpString2] ebx +
jmp loc_100BFA1  +
mov eax [ebp+arg_C] +
push ebx  +
push [ebp+phkResult]  +
or eax 2001Fh +
push ebx  +
push eax  +
push ebx  +
push ebx  +
push ebx  +
push edi  +
push esi  +
call ds:RegCreateKeyExW  +
jmp loc_100C025  +
push [ebp+phkResult]  +
mov eax [ebp+arg_C] +
or eax 9 +
push eax  +
push ebx  +
push edi  +
push esi  +
call ds:RegOpenKeyExW  +
test eax eax +
jnz loc_100BF95  +
mov [ebp+lpString2] ebx +
jmp loc_100BF95  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax 172Ch +
call sub_1005F18  +
mov eax dword_100F000 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
push edi  +
lea eax [ebp+var_1728] +
push eax  +
mov [ebp+var_172C] 1 +
xor esi esi +
or edi 0FFFFFFFFh +
call sub_100BC6B  +
test eax eax +
jz loc_100C174  +
cmp word ptr [ebp+var_1728] 2Dh +
jnz loc_100C0D7  +
lea eax [ebp+var_1728] +
push eax  +
call sub_100BC6B  +
test eax eax +
jz loc_100C174  +
mov [ebp+var_172C] 2 +
mov ecx [ebp+var_1728] +
push ecx  +
call sub_100BDC0  +
test eax eax +
jnz loc_100C13E  +
cmp cx 5Dh +
jnz loc_100C0EF  +
mov edi esi +
mov [ebp+esi*2+String2] cx +
inc esi  +
cmp esi 0B90h +
jz loc_100C112  +
lea eax [ebp+var_1728] +
push eax  +
call sub_100BC6B  +
test eax eax +
jz loc_100C13E  +
jmp loc_100C0D7  +
cmp word ptr [ebp+var_1728] 5Dh +
jnz loc_100C11F  +
or edi 0FFFFFFFFh +
push [ebp+var_1728]  +
call sub_100BDC0  +
test eax eax +
jnz loc_100C13E  +
lea eax [ebp+var_1728] +
push eax  +
call sub_100BC6B  +
test eax eax +
jnz loc_100C112  +
cmp edi 0FFFFFFFFh +
jz loc_100C174  +
push [ebp+arg_4]  +
xor eax eax +
push [ebp+var_172C]  +
mov [ebp+edi*2+String2] ax +
lea eax [ebp+String2] +
push eax  +
push ebx  +
call sub_100BF3D  +
cmp eax 3F3h +
jnz loc_100C174  +
mov dwErrCode 2C0h +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1002AF3  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
mov esi [edi] +
mov ebx [edi+4] +
mov [ebp+var_4] 2 +
jmp loc_100C214  +
cmp [ebp+var_4] ebx +
jb loc_100C1CB  +
lea eax [ebx+100h] +
push 2  +
push eax  +
push dword ptr [edi]  +
mov [ebp+var_8] eax +
call ds:LocalReAlloc  +
test eax eax +
jz loc_100C221  +
lea esi [eax+ebx-2] +
mov ebx [ebp+var_8] +
mov [edi] eax +
mov ecx [ebp+arg_0] +
movzx eax cx +
cmp eax 22h +
jz loc_100C22A  +
cmp eax 5Ch +
jz loc_100C1EA  +
push ecx  +
call sub_100BDC0  +
test eax eax +
jnz loc_100C221  +
mov [esi] cx +
jmp loc_100C20E  +
lea eax [ebp+arg_0] +
push eax  +
call sub_100BC6B  +
test eax eax +
jz loc_100C221  +
movzx eax word ptr [ebp+arg_0] +
cmp eax 22h +
jz loc_100C208  +
cmp eax 5Ch +
jnz loc_100C221  +
push eax  +
jmp loc_100C20A  +
push 22h  +
pop eax  +
mov [esi] ax +
inc esi  +
inc esi  +
add [ebp+var_4] 2 +
lea eax [ebp+arg_0] +
push eax  +
call sub_100BC6B  +
test eax eax +
jnz loc_100C1A5  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
xor eax eax +
mov [esi] ax +
mov eax [ebp+var_4] +
mov [edi+4] eax +
xor eax eax +
inc eax  +
jmp loc_100C223  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
lea eax [ebp+var_4] +
push eax  +
call sub_100BC6B  +
test eax eax +
jz loc_100C28A  +
mov eax [ebp+var_4] +
lea ecx [eax-30h] +
cmp cx 9 +
ja loc_100C262  +
sub al 30h +
jmp loc_100C27A  +
lea ecx [eax-61h] +
cmp cx 5 +
ja loc_100C26F  +
sub al 57h +
jmp loc_100C27A  +
lea ecx [eax-41h] +
cmp cx 5 +
ja loc_100C284  +
sub al 37h +
mov ecx [ebp+arg_0] +
mov [ecx] al +
xor eax eax +
inc eax  +
jmp locret_100C28C  +
dec dword_104F6C4  +
xor eax eax +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
push edi  +
xor ebx ebx +
lea eax [ebp+var_4] +
inc ebx  +
push eax  +
xor esi esi +
xor edi edi +
mov [ebp+var_8] ebx +
call sub_100BC6B  +
test eax eax +
jz loc_100C307  +
push [ebp+var_4]  +
call sub_100BD9D  +
test eax eax +
jnz loc_100C2E3  +
push [ebp+var_4]  +
call sub_100BDC0  +
test eax eax +
jz loc_100C2D4  +
xor esi esi +
mov edi ebx +
jmp loc_100C2E3  +
cmp word ptr [ebp+var_4] 3Bh +
jnz loc_100C2DF  +
mov esi ebx +
jmp loc_100C2E3  +
test esi esi +
jz loc_100C2F2  +
lea eax [ebp+var_4] +
push eax  +
call sub_100BC6B  +
test eax eax +
jz loc_100C2FC  +
jmp loc_100C2B6  +
dec dword_104F6C4  +
and [ebp+var_8] 0 +
xor eax eax +
cmp edi eax +
jnz loc_100C307  +
cmp [ebp+var_8] eax +
jz loc_100C309  +
mov eax ebx +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
jmp loc_100C327  +
push [ebp+var_4]  +
call sub_100BD9D  +
test eax eax +
jz loc_100C336  +
lea eax [ebp+var_4] +
push eax  +
call sub_100BC6B  +
test eax eax +
jnz loc_100C31B  +
leave   +
retn   +
dec dword_104F6C4  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
jmp loc_100C357  +
push [ebp+var_4]  +
call sub_100BDC0  +
test eax eax +
jnz loc_100C372  +
lea eax [ebp+var_4] +
push eax  +
call sub_100BC6B  +
test eax eax +
jz loc_100C372  +
jmp loc_100C34B  +
push [ebp+var_4]  +
call sub_100BDC0  +
test eax eax +
jz loc_100C381  +
lea eax [ebp+var_4] +
push eax  +
call sub_100BC6B  +
test eax eax +
jnz loc_100C366  +
leave   +
retn   +
dec dword_104F6C4  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov si [ebp+arg_0] +
cmp si 0Ah +
jz loc_100C3A6  +
inc dword_104F6C8  +
jmp loc_100C3B4  +
push 0Dh  +
call sub_100C38E  +
and dword_104F6C8 0 +
mov eax dword_104F6C4 +
mov WideCharStr[eax*2] si +
inc dword_104F6C4  +
cmp dword_104F6C4 10000h +
pop esi  +
jnz loc_100C3D9  +
call sub_100BDE3  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 210h +
mov eax dword_100F000 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
lea eax [ebp+hKey] +
push eax  +
mov eax [ebp+arg_0] +
or eax 2 +
push eax  +
xor ebx ebx +
push ebx  +
push ebx  +
push 80000000h  +
call ds:RegOpenKeyExW  +
test eax eax +
jz loc_100C428  +
mov dwErrCode 2C0h +
jmp loc_100C618  +
lea eax [ebp+var_208] +
push eax  +
call sub_100BC6B  +
test eax eax +
jz loc_100C600  +
push esi  +
push edi  +
dec dword_104F6C4  +
push 5Ch  +
call sub_100BD68  +
test eax eax +
jz loc_100C456  +
mov esi offset a_classes +
jmp loc_100C464  +
mov esi offset aHkey_classes_r +
cmp word ptr ds:aHkey_classes_r bx +
jz loc_100C47C  +
movzx eax word ptr [esi] +
push eax  +
call sub_100BD68  +
inc esi  +
inc esi  +
test eax eax +
jz loc_100C5E5  +
cmp [esi] bx +
jnz loc_100C464  +
push 5Ch  +
call sub_100BD68  +
mov edi eax +
cmp edi ebx +
jz loc_100C5E5  +
xor esi esi +
jmp loc_100C4B8  +
mov ecx [ebp+var_208] +
cmp cx 20h +
jz loc_100C4CC  +
push ecx  +
call sub_100BDC0  +
test eax eax +
jnz loc_100C4CC  +
cmp esi 0FFh +
jnb loc_100C4CA  +
mov [ebp+esi*2+SubKey] cx +
inc esi  +
lea eax [ebp+var_208] +
push eax  +
call sub_100BC6B  +
test eax eax +
jz loc_100C4CC  +
jmp loc_100C491  +
xor edi edi +
cmp edi ebx +
jz loc_100C5E5  +
xor eax eax +
mov [ebp+esi*2+SubKey] ax +
call sub_100C313  +
push 3Dh  +
call sub_100BD68  +
test eax eax +
jz loc_100C4F5  +
push 20h  +
call sub_100BD68  +
push 100h  +
push 40h  +
xor edi edi +
call ds:LocalAlloc  +
mov esi eax +
xor eax eax +
cmp esi ebx +
setnz al  +
mov [ebp+var_20C] eax +
lea eax [ebp+var_208] +
push eax  +
call sub_100BC6B  +
test eax eax +
jz loc_100C58D  +
mov ebx 200h +
cmp [ebp+var_20C] 0 +
jz loc_100C5C6  +
push [ebp+var_208]  +
call sub_100BDC0  +
test eax eax +
jnz loc_100C58D  +
lea eax [ebx-101h] +
cmp edi eax +
jb loc_100C571  +
push 2  +
push ebx  +
push esi  +
call ds:LocalReAlloc  +
xor ecx ecx +
test eax eax +
setnz cl  +
mov [ebp+var_20C] ecx +
test ecx ecx +
jz loc_100C5C6  +
mov esi eax +
add ebx 100h +
mov ax word ptr [ebp+var_208] +
mov [esi+edi*2] ax +
lea eax [ebp+var_208] +
push eax  +
inc edi  +
call sub_100BC6B  +
test eax eax +
jnz loc_100C528  +
cmp [ebp+var_20C] 0 +
jz loc_100C5C6  +
lea eax [edi+edi] +
push eax  +
push esi  +
xor ecx ecx +
mov [eax+esi] cx +
push 1  +
lea eax [ebp+SubKey] +
push eax  +
push [ebp+hKey]  +
call ds:RegSetValueW  +
test eax eax +
jz loc_100C5D0  +
mov dwErrCode 2C1h +
jmp loc_100C5D0  +
mov dwErrCode 6Bh +
xor ebx ebx +
cmp esi ebx +
jz loc_100C5DD  +
push esi  +
call ds:LocalFree  +
cmp [ebp+var_20C] ebx +
jnz loc_100C5EA  +
call sub_100C343  +
lea eax [ebp+var_208] +
push eax  +
call sub_100BC6B  +
test eax eax +
jnz loc_100C43E  +
pop edi  +
pop esi  +
push [ebp+hKey]  +
call ds:RegFlushKey  +
push [ebp+hKey]  +
call ds:RegCloseKey  +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop ebx  +
call sub_1002AF3  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
push edi  +
xor esi esi +
xor edi edi +
jmp loc_100C65E  +
movzx eax byte ptr [ebp-1] +
shl esi 4 +
add esi eax +
inc edi  +
cmp edi 8 +
jz loc_100C66B  +
lea eax [ebp-1] +
push eax  +
call sub_100C23F  +
test eax eax +
jnz loc_100C64F  +
mov eax [ebp+arg_0] +
mov [eax] esi +
xor eax eax +
test edi edi +
pop edi  +
setnz al  +
pop esi  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push esi  +
call sub_100C23F  +
test eax eax +
jz loc_100C6B1  +
lea eax [ebp+arg_0+3] +
push eax  +
call sub_100C23F  +
test eax eax +
jz loc_100C6AC  +
mov al [esi] +
shl al 4 +
or al byte ptr [ebp+arg_0+3] +
mov [esi] al +
xor eax eax +
inc eax  +
jmp loc_100C6B3  +
xor eax eax +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
jmp loc_100C6D3  +
movzx eax ax +
push eax  +
call sub_100C38E  +
inc esi  +
inc esi  +
movzx eax word ptr [esi] +
test ax ax +
jnz loc_100C6C8  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
push 22h  +
call sub_100C38E  +
mov edi [ebp+arg_0] +
jmp loc_100C714  +
inc edi  +
movzx eax si +
inc edi  +
cmp eax 22h +
jz loc_100C707  +
cmp eax 5Ch +
jnz loc_100C70E  +
push 5Ch  +
call sub_100C38E  +
push esi  +
call sub_100C38E  +
movzx esi word ptr [edi] +
test si si +
jnz loc_100C6F8  +
push 22h  +
call sub_100C38E  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_4] +
push esi  +
push 1Ch  +
pop esi  +
mov eax [ebp+arg_0] +
mov ecx esi +
shr eax cl +
and eax 0Fh +
movzx eax ds:word_10083D8[eax*2] +
test edx edx +
jnz loc_100C756  +
cmp ax 30h +
jz loc_100C75F  +
push eax  +
call sub_100C38E  +
xor edx edx +
inc edx  +
sub esi 4 +
jns loc_100C73A  +
pop esi  +
test edx edx +
jnz loc_100C770  +
push 30h  +
call sub_100C38E  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
and [ebp+var_4] 0 +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
mov ebx [esi] +
push edi  +
mov edi [esi+4] +
mov [ebp+var_8] 1 +
cmp [ebp+var_4] edi +
jb loc_100C7BB  +
lea eax [edi+100h] +
push 2  +
push eax  +
push dword ptr [esi]  +
mov [ebp+arg_0] eax +
call ds:LocalReAlloc  +
test eax eax +
jz loc_100C7F9  +
lea ebx [eax+edi] +
mov edi [ebp+arg_0] +
mov [esi] eax +
call sub_100C313  +
push 5Ch  +
call sub_100BD68  +
test eax eax +
jz loc_100C7D4  +
call sub_100C295  +
test eax eax +
jz loc_100C7F9  +
call sub_100C313  +
push ebx  +
call sub_100C682  +
inc ebx  +
test eax eax +
jz loc_100C7FD  +
inc [ebp+var_4]  +
call sub_100C313  +
push 2Ch  +
call sub_100BD68  +
test eax eax +
jz loc_100C7FD  +
jmp loc_100C796  +
and [ebp+var_8] 0 +
mov eax [ebp+var_4] +
pop edi  +
mov [esi+4] eax +
mov eax [ebp+var_8] +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push offset aHex  +
call sub_100C6BD  +
cmp [ebp+arg_4] 3 +
jz loc_100C83F  +
push 28h  +
call sub_100C38E  +
push 0  +
push [ebp+arg_4]  +
call sub_100C72E  +
push 29h  +
call sub_100C38E  +
push 3Ah  +
call sub_100C38E  +
xor eax eax +
inc eax  +
cmp [ebp+arg_8] 0 +
jz loc_100C8AF  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
dec [ebp+arg_8]  +
cmp dword_104F6C8 4Bh +
jle loc_100C871  +
test eax eax +
jnz loc_100C87C  +
push offset asc_100C8B4  +
call sub_100C6BD  +
xor eax eax +
inc eax  +
test eax eax +
jnz loc_100C87C  +
push 2Ch  +
call sub_100C38E  +
mov al [edi] +
movzx esi al +
mov eax esi +
shr eax 4 +
movzx eax ds:word_10083D8[eax*2] +
push eax  +
inc edi  +
call sub_100C38E  +
and esi 0Fh +
movzx eax ds:word_10083D8[esi*2] +
push eax  +
call sub_100C38E  +
xor eax eax +
cmp [ebp+arg_8] eax +
jnz loc_100C854  +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 120h +
mov eax dword_100F000 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push ebx  +
push esi  +
push edi  +
mov [ebp+hKey] eax +
mov eax [ebp+arg_4] +
xor edi edi +
xor ebx ebx +
inc edi  +
mov [ebp+lpValueName] eax +
mov [ebp+var_108] edi +
mov [ebp+var_110] ebx +
mov [ebp+var_114] ebx +
call sub_100C313  +
push 3Dh  +
call sub_100BD68  +
test eax eax +
jz loc_100CBAF  +
call sub_100C313  +
mov esi 100h +
push esi  +
push 40h  +
call ds:LocalAlloc  +
mov [ebp+hMem] eax +
cmp eax ebx +
jnz loc_100C946  +
mov dwErrCode 2C1h +
jmp loc_100CBB4  +
push 22h  +
call sub_100BD68  +
test eax eax +
jz loc_100C98B  +
mov eax [ebp+hMem] +
mov [ebp+var_118] eax +
lea eax [ebp+var_118] +
push eax  +
mov [ebp+var_114] esi +
call sub_100C18A  +
test eax eax +
jz loc_100C980  +
call sub_100C295  +
test eax eax +
jnz loc_100CAF3  +
mov [ebp+var_110] edi +
jmp loc_100CAED  +
push 64h  +
call sub_100BD68  +
test eax eax +
jz loc_100C9FA  +
mov esi (offset aDword+2) +
movzx eax word ptr [esi] +
push eax  +
call sub_100BD68  +
inc esi  +
inc esi  +
test eax eax +
jnz loc_100C9B6  +
mov [ebp+var_108] ebx +
mov [ebp+var_110] edi +
cmp [esi] bx +
jnz loc_100C99B  +
cmp [ebp+var_108] ebx +
jz loc_100CB9B  +
call sub_100C313  +
push [ebp+hMem]  +
call sub_100C641  +
test eax eax +
jz loc_100C9E4  +
call sub_100C295  +
test eax eax +
jnz loc_100C9F0  +
mov [ebp+var_108] ebx +
mov [ebp+var_110] edi +
push 4  +
pop edi  +
mov esi edi +
jmp loc_100CB05  +
push 2Dh  +
call sub_100BD68  +
test eax eax +
jz loc_100CA30  +
call sub_100C295  +
test eax eax +
jnz loc_100CA19  +
mov [ebp+var_110] edi +
jmp loc_100CB9B  +
push [ebp+lpValueName]  +
push [ebp+hKey]  +
call ds:RegDeleteValueW  +
jmp loc_100CB9B  +
mov esi offset aHex +
movzx eax word ptr [esi] +
push eax  +
call sub_100BD68  +
inc esi  +
inc esi  +
test eax eax +
jnz loc_100CA50  +
mov [ebp+var_108] ebx +
mov [ebp+var_110] edi +
cmp [esi] bx +
jnz loc_100CA35  +
cmp [ebp+var_108] ebx +
jz loc_100CB9B  +
push 28h  +
call sub_100BD68  +
test eax eax +
jz loc_100CB6A  +
lea eax [ebp+var_114] +
push eax  +
call sub_100C641  +
test eax eax +
jz loc_100CA8B  +
push 29h  +
call sub_100BD68  +
test eax eax +
jnz loc_100CA97  +
mov [ebp+var_108] ebx +
mov [ebp+var_110] edi +
mov edi [ebp+var_114] +
cmp [ebp+var_108] ebx +
jz loc_100CB9B  +
mov eax [ebp+hMem] +
push 3Ah  +
mov [ebp+var_118] eax +
mov [ebp+var_114] 100h +
call sub_100BD68  +
test eax eax +
jz loc_100CAE3  +
lea eax [ebp+var_118] +
push eax  +
call sub_100C779  +
test eax eax +
jz loc_100CAE3  +
call sub_100C295  +
test eax eax +
jnz loc_100CAF3  +
mov [ebp+var_110] 1 +
mov [ebp+var_108] ebx +
mov eax [ebp+var_118] +
mov esi [ebp+var_114] +
mov [ebp+hMem] eax +
cmp [ebp+var_108] ebx +
jz loc_100CB9B  +
cmp dword_100F6A0 500h +
jnb loc_100CB72  +
cmp edi 2 +
jz loc_100CB27  +
cmp edi 7 +
jnz loc_100CB72  +
push ebx  +
push ebx  +
push 100h  +
lea eax [ebp+ValueName] +
push eax  +
push 0FFFFFFFFh  +
push [ebp+lpValueName]  +
mov [ebp+ValueName] bl +
push ebx  +
push 3  +
call ds:WideCharToMultiByte  +
push esi  +
push [ebp+hMem]  +
lea eax [ebp+ValueName] +
push edi  +
push ebx  +
push eax  +
push [ebp+hKey]  +
call ds:RegSetValueExA  +
jmp loc_100CB8D  +
push 3  +
pop edi  +
jmp loc_100CA9D  +
push esi  +
push [ebp+hMem]  +
push edi  +
push ebx  +
push [ebp+lpValueName]  +
push [ebp+hKey]  +
call ds:RegSetValueExW  +
test eax eax +
jz loc_100CB9B  +
mov dwErrCode 2C1h +
push [ebp+hMem]  +
call ds:LocalFree  +
cmp [ebp+var_110] ebx +
jz loc_100CBB4  +
call sub_100C343  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1002AF3  +
leave   +
retn 8  +
***
call sub_1005F43  +
xor esi esi +
mov [ebp-28h] esi +
push 5Bh  +
call sub_100C38E  +
push dword ptr [ebp+0Ch]  +
call sub_100C6BD  +
push offset asc_100CE70  +
call sub_100C6BD  +
mov [ebp-20h] esi +
mov ebx offset word_100F4A0 +
mov dword ptr [ebp-30h] 100h +
mov eax [ebp-20h] +
inc dword ptr [ebp-20h]  +
lea ecx [ebp-2Ch] +
push ecx  +
push esi  +
lea ecx [ebp-24h] +
push ecx  +
push esi  +
lea ecx [ebp-30h] +
push ecx  +
push ebx  +
push eax  +
push dword ptr [ebp+8]  +
call ds:RegEnumValueW  +
mov edi eax +
cmp edi esi +
jz loc_100CD80  +
push 0Ah  +
call sub_100C38E  +
cmp edi 103h +
jz loc_100CC45  +
mov dwErrCode 1Eh +
cmp dword ptr [ebp-28h] 1 +
jnz loc_100CC51  +
inc dword_100F488  +
push dword ptr [ebp+0Ch]  +
call ds:lstrlenW  +
mov ebx eax +
lea edi [ebx+100h] +
mov [ebp-4] esi +
lea eax [edi+edi] +
call sub_1005F9A  +
mov [ebp-18h] esp +
mov esi esp +
mov [ebp-3Ch] esi +
mov dword ptr [ebp-4] 0FFFFFFFEh +
push dword ptr [ebp+0Ch]  +
push edi  +
push esi  +
call sub_10022FA  +
lea esi [esi+ebx*2] +
push 5Ch  +
pop eax  +
mov [esi] ax +
inc esi  +
inc esi  +
xor eax eax +
mov [esi] ax +
mov dword ptr [ebp-20h] 1 +
mov ebx 0FFh +
push ebx  +
push esi  +
push eax  +
push dword ptr [ebp+8]  +
mov edi ds:RegEnumKeyW +
call edi  +
test eax eax +
jnz loc_100CD48  +
mov eax [ebp+10h] +
or eax 9 +
mov [ebp-38h] eax +
lea eax [ebp-34h] +
push eax  +
push dword ptr [ebp-38h]  +
push 0  +
push esi  +
push dword ptr [ebp+8]  +
call ds:RegOpenKeyExW  +
test eax eax +
jnz loc_100CD28  +
and dwErrCode eax +
push dword ptr [ebp+10h]  +
push dword ptr [ebp-3Ch]  +
push dword ptr [ebp-34h]  +
call sub_100CBCA  +
push dword ptr [ebp-34h]  +
call ds:RegCloseKey  +
cmp dword ptr [ebp-28h] 0 +
jnz loc_100CD11  +
cmp dwErrCode 0 +
jnz loc_100CD11  +
inc dword_100F488  +
mov dword ptr [ebp-28h] 1 +
cmp dwErrCode 322h +
jnz loc_100CD32  +
lea esp [ebp-4Ch] +
call sub_1005F8B  +
retn 0Ch  +
mov dwErrCode 6Eh +
mov eax [ebp-20h] +
inc dword ptr [ebp-20h]  +
push ebx  +
push esi  +
push eax  +
push dword ptr [ebp+8]  +
call edi  +
test eax eax +
jz loc_100CCC1  +
cmp eax 103h +
jz loc_100CD1D  +
mov dwErrCode 1Eh +
jmp loc_100CD1D  +
mov eax [ebp-14h] +
mov eax [eax] +
mov eax [eax] +
xor ecx ecx +
cmp eax 0C00000FDh +
setz cl  +
mov eax ecx +
retn   +
mov esp [ebp-18h] +
call _resetstkoflw  +
mov dword ptr [ebp-4] 0FFFFFFFEh +
jmp loc_100CD1D  +
mov dwErrCode esi +
cmp dword ptr [ebp-24h] 1 +
jz loc_100CD9C  +
cmp dword ptr [ebp-24h] 2 +
jz loc_100CD9C  +
cmp dword ptr [ebp-24h] 7 +
jz loc_100CD9C  +
xor eax eax +
jmp loc_100CD9F  +
push 2  +
pop eax  +
mov ecx [ebp-2Ch] +
add eax ecx +
push eax  +
push 40h  +
call ds:LocalAlloc  +
mov edi eax +
cmp edi esi +
jz loc_100CE40  +
lea eax [ebp-2Ch] +
push eax  +
push edi  +
lea eax [ebp-24h] +
push eax  +
push esi  +
push ebx  +
push dword ptr [ebp+8]  +
call ds:RegQueryValueExW  +
test eax eax +
jz loc_100CDDB  +
mov dwErrCode 322h +
jmp loc_100CE37  +
cmp [ebp-30h] esi +
jz loc_100CDE8  +
push ebx  +
call sub_100C6E5  +
jmp loc_100CDEF  +
push 40h  +
call sub_100C38E  +
push 3Dh  +
call sub_100C38E  +
mov eax [ebp-24h] +
dec eax  +
jz loc_100CE2A  +
sub eax 3 +
jnz loc_100CE1C  +
cmp dword ptr [ebp-2Ch] 4 +
jnz loc_100CE1C  +
push offset aDword  +
call sub_100C6BD  +
push 1  +
push dword ptr [edi]  +
call sub_100C72E  +
jmp loc_100CE30  +
push dword ptr [ebp-2Ch]  +
push dword ptr [ebp-24h]  +
push edi  +
call sub_100C812  +
jmp loc_100CE30  +
push edi  +
call sub_100C6E5  +
push 0Ah  +
call sub_100C38E  +
push edi  +
call ds:LocalFree  +
jmp loc_100CE4A  +
mov dwErrCode 322h +
mov eax dwErrCode +
cmp eax 322h +
jz loc_100CD1D  +
cmp eax esi +
jnz loc_100CBFC  +
mov dword ptr [ebp-28h] 1 +
jmp loc_100CBFC  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax 200h +
push eax  +
push 40h  +
mov [ebp+var_4] eax +
call ds:LocalAlloc  +
mov [ebp+hMem] eax +
test eax eax +
jz locret_100CEE0  +
lea eax [ebp+hMem] +
push eax  +
call sub_100C18A  +
test eax eax +
jz loc_100CED2  +
push [ebp+hMem]  +
push [ebp+arg_0]  +
call sub_100C8C5  +
jmp loc_100CED7  +
call sub_100C343  +
push [ebp+hMem]  +
call ds:LocalFree  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 25Ch +
mov eax dword_100F000 +
xor eax ebp +
mov [ebp+var_4] eax +
or [ebp+phkResult] 0FFFFFFFFh +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
push edi  +
mov edi [ebp+lpString2] +
xor esi esi +
mov dwErrCode esi +
cmp edi esi +
jz loc_100CF3E  +
push [ebp+arg_8]  +
lea eax [ebp+phkResult] +
push esi  +
push edi  +
push eax  +
call sub_100BF3D  +
test eax eax +
jz loc_100CF3E  +
mov dwErrCode 3F2h +
jmp loc_100D052  +
push esi  +
push 80h  +
push 2  +
push esi  +
push esi  +
push 40000000h  +
push ebx  +
mov dword_100F488 esi +
call ds:CreateFileW  +
mov hFile eax +
cmp eax 0FFFFFFFFh +
jz loc_100D038  +
push esi  +
lea ecx [ebp+NumberOfBytesWritten] +
push ecx  +
push 2  +
push offset dword_100D064  +
push eax  +
mov dword_104F6C4 esi +
mov dword_104F6C8 esi +
call ds:WriteFile  +
push offset aWindowsRegistr  +
call sub_100C6BD  +
push offset asc_1003C34  +
call sub_100C6BD  +
push offset a5_00  +
call sub_100C6BD  +
push offset asc_100D074  +
call sub_100C6BD  +
lea eax [ebp+var_254] +
cmp edi esi +
jz loc_100CFDA  +
push edi  +
push 128h  +
push eax  +
call sub_10022FA  +
push [ebp+arg_8]  +
lea eax [ebp+var_254] +
push eax  +
push [ebp+phkResult]  +
jmp loc_100D020  +
push offset aHkey_local_mac  +
mov ebx 128h +
push ebx  +
push eax  +
call sub_10022FA  +
push [ebp+arg_8]  +
lea eax [ebp+var_254] +
push eax  +
push 80000002h  +
call sub_100CBCA  +
push offset aHkey_users  +
push ebx  +
lea eax [ebp+var_254] +
push eax  +
call sub_10022FA  +
push [ebp+arg_8]  +
lea eax [ebp+var_254] +
push eax  +
push 80000003h  +
call sub_100CBCA  +
call sub_100BDE3  +
push hFile  +
call ds:CloseHandle  +
jmp loc_100D042  +
mov dwErrCode 6Eh +
cmp edi esi +
jz loc_100D052  +
push [ebp+phkResult]  +
call ds:RegCloseKey  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1002AF3  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push esi  +
push edi  +
xor edi edi +
mov [ebp+hKey] edi +
call sub_100C313  +
lea eax [ebp+var_8] +
push eax  +
call sub_100BC6B  +
mov esi ds:RegCloseKey +
jmp loc_100D0DA  +
movzx eax word ptr [ebp+var_8] +
cmp eax 22h +
jz loc_100D119  +
cmp eax 3Bh +
jz loc_100D0C7  +
cmp eax 40h +
jz loc_100D109  +
cmp eax 5Bh +
jz loc_100D0EE  +
push [ebp+var_8]  +
call sub_100BDC0  +
test eax eax +
jnz loc_100D0CC  +
call sub_100C343  +
call sub_100C313  +
lea eax [ebp+var_8] +
push eax  +
call sub_100BC6B  +
test eax eax +
jnz loc_100D0A3  +
cmp [ebp+hKey] edi +
jz loc_100D0E8  +
push [ebp+hKey]  +
call esi  +
pop edi  +
pop esi  +
leave   +
retn 4  +
cmp [ebp+hKey] edi +
jz loc_100D0FB  +
push [ebp+hKey]  +
call esi  +
mov [ebp+hKey] edi +
push [ebp+arg_0]  +
lea eax [ebp+hKey] +
push eax  +
call sub_100C06D  +
jmp loc_100D0CC  +
cmp [ebp+hKey] edi +
jz loc_100D0C7  +
push edi  +
push [ebp+hKey]  +
call sub_100C8C5  +
jmp loc_100D0CC  +
cmp [ebp+hKey] edi +
jz loc_100D0C7  +
push [ebp+hKey]  +
call sub_100CE99  +
jmp loc_100D0CC  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 414h +
mov eax dword_100F000 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
push edi  +
xor eax eax +
push 206h  +
mov [ebp+FileName] ax +
xor edi edi +
lea eax [ebp-20Ah] +
push edi  +
push eax  +
call memset  +
add esp 0Ch +
lea eax [ebp+FilePart] +
push eax  +
lea eax [ebp+FileName] +
push eax  +
mov esi 104h +
push esi  +
push edi  +
push ebx  +
push edi  +
mov [ebp+FilePart] edi +
mov dwErrCode edi +
call ds:SearchPathW  +
cmp eax edi +
jz loc_100D3E2  +
cmp eax esi +
ja loc_100D3E2  +
push edi  +
push 80h  +
push 3  +
push edi  +
xor esi esi +
inc esi  +
push esi  +
push 80000000h  +
lea eax [ebp+FileName] +
push eax  +
call ds:CreateFileW  +
mov hFile eax +
cmp eax 0FFFFFFFFh +
jz loc_100D3E2  +
push edi  +
push eax  +
call ds:GetFileSize  +
push 64h  +
pop ecx  +
xor edx edx +
div  ecx +
push edi  +
mov dword_104F6D4 edi +
mov dword_104F6CC edi +
mov dword_104F6D8 edi +
mov dword_104F6D0 eax +
lea eax [ebp+NumberOfBytesRead] +
push eax  +
push 2  +
lea eax [ebp+Buffer] +
push eax  +
push hFile  +
call ds:ReadFile  +
test eax eax +
jnz loc_100D224  +
mov dwErrCode 2BFh +
jmp loc_100D41F  +
mov eax 0FEFFh +
cmp word ptr [ebp+Buffer] ax +
jnz loc_100D23A  +
mov dword_100F484 esi +
jmp loc_100D250  +
push esi  +
push edi  +
push 0FFFFFFFEh  +
push hFile  +
mov dword_100F484 edi +
call ds:SetFilePointer  +
mov dword_104F6C4 edi +
call sub_100C313  +
mov ebx offset aRegedit +
mov dword_100F6A0 edi +
mov esi offset aWindowsRegistr +
movzx eax word ptr [esi] +
push eax  +
call sub_100BD68  +
test eax eax +
jz loc_100D286  +
push esi  +
call ds:CharNextW  +
mov esi eax +
cmp [esi] di +
jnz loc_100D26B  +
xor eax eax +
cmp ax [esi] +
jnz loc_100D371  +
call sub_100C313  +
xor eax eax +
push 2Eh  +
mov [ebp+var_402] ax +
call sub_100BD68  +
mov esi ds:StrToIntW +
jmp loc_100D2F3  +
lea eax [ebp-404h] +
push eax  +
call sub_100BC6B  +
test eax eax +
jz loc_100D350  +
push dword ptr [ebp-404h]  +
call ds:IsCharAlphaNumericW  +
test eax eax +
jz loc_100D350  +
lea eax [ebp-404h] +
push eax  +
call esi  +
mov ecx dword_100F6A0 +
shl ecx 4 +
add ecx eax +
push 2Eh  +
mov dword_100F6A0 ecx +
call sub_100BD68  +
test eax eax +
jz loc_100D2AE  +
xor ebx ebx +
lea eax [ebp-404h] +
push eax  +
call sub_100BC6B  +
test eax eax +
jz loc_100D350  +
push dword ptr [ebp-404h]  +
call ds:IsCharAlphaNumericW  +
test eax eax +
jz loc_100D350  +
lea eax [ebp-404h] +
push eax  +
call esi  +
mov ecx dword_100F6A0 +
shl ecx 4 +
add ecx eax +
inc ebx  +
mov dword_100F6A0 ecx +
cmp ebx 2 +
jb loc_100D2F9  +
cmp ecx 500h +
jz loc_100D35F  +
mov dwErrCode 2C3h +
jmp loc_100D41F  +
mov dwErrCode 2C2h +
jmp loc_100D41F  +
call sub_100C313  +
push [ebp+arg_4]  +
call sub_100D07F  +
jmp loc_100D41F  +
movzx eax word ptr [ebx] +
push eax  +
call sub_100BD68  +
test eax eax +
jz loc_100D38C  +
push ebx  +
call ds:CharNextW  +
mov ebx eax +
cmp [ebx] di +
jnz loc_100D371  +
cmp [ebx] di +
jnz loc_100D350  +
push 34h  +
call sub_100BD68  +
mov esi eax +
call sub_100C313  +
lea eax [ebp+var_40C] +
push eax  +
call sub_100BC6B  +
test eax eax +
jz loc_100D41F  +
push [ebp+var_40C]  +
call sub_100BDC0  +
test eax eax +
jz loc_100D41F  +
push [ebp+arg_4]  +
cmp esi edi +
jz loc_100D3D1  +
mov dword_100F6A0 400h +
jmp loc_100D367  +
mov dword_100F6A0 310h +
call sub_100C3E2  +
jmp loc_100D41F  +
call ds:GetLastError  +
push eax  +
push offset aRegeditCreatef  +
lea eax [ebp+OutputString] +
push 0FAh  +
push eax  +
call sub_1002803  +
add esp 10h +
lea eax [ebp+OutputString] +
push eax  +
call ds:OutputDebugStringW  +
mov hFile edi +
mov dwErrCode 2BEh +
mov eax hFile +
cmp eax edi +
pop edi  +
pop esi  +
pop ebx  +
jz loc_100D432  +
push eax  +
call ds:CloseHandle  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_1002AF3  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push offset sub_1002AF3  +
push offset dword_100F000  +
call _except_handler4_common  +
add esp 18h +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov eax [eax] +
cmp dword ptr [eax] 0E06D7363h +
jnz loc_100D536  +
cmp dword ptr [eax+10h] 3 +
jnz loc_100D536  +
mov eax [eax+14h] +
cmp eax 19930520h +
jz loc_100D530  +
cmp eax 19930521h +
jz loc_100D530  +
cmp eax 19930522h +
jz loc_100D530  +
cmp eax 1994000h +
jnz loc_100D536  +
call ds:?terminate@@YAXXZ  +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
mov eax 5A4Dh +
cmp [ecx] ax +
jz loc_100D562  +
xor eax eax +
pop ebp  +
retn   +
mov eax [ecx+3Ch] +
add eax ecx +
cmp dword ptr [eax] 4550h +
jnz loc_100D55E  +
xor edx edx +
mov ecx 10Bh +
cmp [eax+18h] cx +
setz dl  +
mov eax edx +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [eax+3Ch] +
add ecx eax +
movzx eax word ptr [ecx+14h] +
push ebx  +
push esi  +
movzx esi word ptr [ecx+6] +
xor edx edx +
push edi  +
lea eax [eax+ecx+18h] +
test esi esi +
jbe loc_100D5C3  +
mov edi [ebp+arg_4] +
mov ecx [eax+0Ch] +
cmp edi ecx +
jb loc_100D5BB  +
mov ebx [eax+8] +
add ebx ecx +
cmp edi ebx +
jb loc_100D5C5  +
inc edx  +
add eax 28h +
cmp edx esi +
jb loc_100D5AB  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
call sub_1002BBC  +
and dword ptr [ebp-4] 0 +
mov esi 1000000h +
push esi  +
call sub_100D54C  +
pop ecx  +
test eax eax +
jz loc_100D62C  +
mov eax [ebp+8] +
sub eax esi +
push eax  +
push esi  +
call sub_100D586  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_100D62C  +
mov eax [eax+24h] +
shr eax 1Fh +
not eax  +
and eax 1 +
mov dword ptr [ebp-4] 0FFFFFFFEh +
jmp loc_100D635  +
mov eax [ebp-14h] +
mov eax [eax] +
mov eax [eax] +
xor ecx ecx +
cmp eax 0C0000005h +
setz cl  +
mov eax ecx +
retn   +
mov esp [ebp-18h] +
mov dword ptr [ebp-4] 0FFFFFFFEh +
xor eax eax +
call sub_1002714  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 328h +
mov dword_100F140 eax +
mov dword_100F13C ecx +
mov dword_100F138 edx +
mov dword_100F134 ebx +
mov dword_100F130 esi +
mov dword_100F12C edi +
mov word_100F158 ss +
mov word_100F14C cs +
mov word_100F128 ds +
mov word_100F124 es +
mov word_100F120 fs +
mov word_100F11C gs +
pushf   +
pop dword_100F150  +
mov eax [ebp+0] +
mov dword_100F144 eax +
mov eax [ebp+4] +
mov dword_100F148 eax +
lea eax [ebp+8] +
mov dword_100F154 eax +
mov eax [ebp-320h] +
mov dword_100F090 10001h +
mov eax dword_100F148 +
mov dword_100F04C eax +
mov dword_100F040 0C0000409h +
mov dword_100F044 1 +
mov eax dword_100F000 +
mov [ebp-328h] eax +
mov eax dword_100F004 +
mov [ebp-324h] eax +
push 0  +
call ds:SetUnhandledExceptionFilter  +
push offset ExceptionInfo  +
call ds:UnhandledExceptionFilter  +
push 0C0000409h  +
call ds:GetCurrentProcess  +
push eax  +
call ds:TerminateProcess  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword_100F018 0 +
push esi  +
jz loc_100D7C1  +
push 3  +
push dword_100F01C  +
call sub_1002DCA  +
cmp eax [ebp+arg_0] +
jbe loc_100D7C1  +
push [ebp+arg_0]  +
push 3  +
push dword_100F01C  +
call sub_1002D71  +
test eax eax +
jz loc_100D7C1  +
push [ebp+arg_0]  +
push 3  +
push dword_100F01C  +
call sub_100189B  +
mov esi eax +
test esi esi +
jz loc_100D7C1  +
push 7  +
push offset aBuffer  +
push esi  +
call ds:_memicmp  +
add esp 0Ch +
test eax eax +
jnz loc_100D7C1  +
mov eax [esi+0Ch] +
jmp loc_100D7C3  +
xor eax eax +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
call sub_1003182  +
test eax eax +
jz loc_100D7EF  +
call sub_1002F1E  +
push eax  +
push [ebp+hConsoleOutput]  +
call sub_100245F  +
neg eax  +
sbb eax eax +
neg eax  +
pop ebp  +
retn 4  +
***
call sub_1002BBC  +
mov esi [ebp+8] +
xor edi edi +
cmp esi edi +
jz loc_100D8BD  +
mov eax [esi] +
cmp eax edi +
jz loc_100D8BD  +
cmp [ebp+0Ch] edi +
jnz loc_100D82B  +
push esi  +
call sub_1002024  +
jmp loc_100D8D1  +
push eax  +
call sub_10020C4  +
test eax eax +
jnz loc_100D83C  +
mov [esi] edi +
jmp loc_100D8CF  +
call ds:GetProcessHeap  +
cmp eax edi +
jz loc_100D8CF  +
mov [ebp-4] edi +
push dword ptr [ebp+0Ch]  +
push dword ptr [esi]  +
push 0Ch  +
push eax  +
call ds:HeapReAlloc  +
cmp eax edi +
jnz loc_100D87A  +
call ds:GetLastError  +
test eax eax +
jnz loc_100D871  +
push 8  +
call ds:SetLastError  +
mov dword ptr [ebp-4] 0FFFFFFFEh +
jmp loc_100D8CF  +
mov [esi] eax +
mov dword ptr [ebp-4] 0FFFFFFFEh +
xor eax eax +
inc eax  +
jmp loc_100D8D1  +
mov eax [ebp-14h] +
mov eax [eax] +
mov eax [eax] +
mov [ebp-1Ch] eax +
xor eax eax +
inc eax  +
retn   +
mov esp [ebp-18h] +
cmp dword ptr [ebp-1Ch] 0C0000017h +
jz loc_100D85F  +
cmp dword ptr [ebp-1Ch] 0C0000005h +
jnz loc_100D85F  +
push 570h  +
call ds:SetLastError  +
call sub_1003182  +
jmp loc_100D871  +
call ds:GetLastError  +
test eax eax +
jnz loc_100D8CF  +
push 57h  +
call ds:SetLastError  +
xor eax eax +
call sub_1002714  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
inc dword_100F490  +
mov eax dword_100F490 +
push 0Ah  +
pop ecx  +
xor edx edx +
div  ecx +
add edx 4 +
push edx  +
push [ebp+dwMessageId]  +
push [ebp+lpSource]  +
call sub_10033B9  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+dwMessageId]  +
push 0  +
call sub_100D901  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+dwMessageId]  +
call sub_100D930  +
push eax  +
push [ebp+hConsoleOutput]  +
call sub_100245F  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_0] +
push ebx  +
call sub_1002C80  +
test eax eax +
jnz loc_100D982  +
or eax 0FFFFFFFFh +
jmp loc_100DA91  +
xor edx edx +
push esi  +
push edi  +
mov edi [ebx+8] +
mov [ebp+arg_0] edx +
cmp [ebx+4] edx +
jbe loc_100DA8C  +
mov esi [ebp+lpString2] +
mov eax [ebp+arg_4] +
cmp [edi+4] eax +
jnz loc_100DA7C  +
mov ecx 70000h +
cmp eax ecx +
ja loc_100DA10  +
jz loc_100D9FE  +
cmp eax 20000h +
jz loc_100D9E2  +
cmp eax 30000h +
jz loc_100DA73  +
cmp eax 40000h +
jz loc_100DA73  +
cmp eax 60000h +
jnz loc_100DA7C  +
mov eax [edi+0Ch] +
fld  dword ptr [eax] +
fld  dword ptr [esi] +
fucompp   +
jmp loc_100DA05  +
push [ebp+cchCount2]  +
push [ebp+arg_C]  +
push esi  +
push dword ptr [edi+0Ch]  +
call sub_1004857  +
test eax eax +
jz loc_100DA96  +
mov edx [ebp+arg_0] +
jmp loc_100DA7C  +
mov eax [edi+0Ch] +
fld  qword ptr [esi] +
fcomp  qword ptr [eax] +
fnstsw  ax +
test ah 44h +
jp loc_100DA7C  +
mov eax edx +
jmp loc_100DA8F  +
cmp eax 90000h +
jz loc_100DA73  +
cmp eax 0A0000h +
jz loc_100DA36  +
cmp eax 0B0000h +
jnz loc_100DA7C  +
mov eax [edi+0Ch] +
mov ecx [esi+4] +
cmp ecx [eax+4] +
jnz loc_100DA7C  +
mov ecx [esi] +
cmp ecx [eax] +
jmp loc_100DA7A  +
mov eax [edi+0Ch] +
mov cx [esi+6] +
cmp cx [eax+6] +
jnz loc_100DA7C  +
mov cx [esi+0Eh] +
cmp cx [eax+0Eh] +
jnz loc_100DA7C  +
mov cx [esi+0Ah] +
cmp cx [eax+0Ah] +
jnz loc_100DA7C  +
mov cx [esi+2] +
cmp cx [eax+2] +
jnz loc_100DA7C  +
mov cx [esi+0Ch] +
cmp cx [eax+0Ch] +
jnz loc_100DA7C  +
mov cx [esi] +
cmp cx [eax] +
jmp loc_100DA7A  +
mov eax [edi+0Ch] +
mov eax [eax] +
cmp eax [esi] +
jz loc_100DA0C  +
mov edi [edi+10h] +
inc edx  +
mov [ebp+arg_0] edx +
cmp edx [ebx+4] +
jb loc_100D998  +
or eax 0FFFFFFFFh +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 14h  +
mov eax [ebp+arg_0] +
jmp loc_100DA8F  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_0] +
push ebx  +
call sub_1002C80  +
test eax eax +
jnz loc_100DABB  +
or eax 0FFFFFFFFh +
jmp loc_100DBF3  +
and [ebp+arg_0] 0 +
cmp dword ptr [ebx+4] 0 +
push esi  +
push edi  +
mov edi [ebx+8] +
jbe loc_100DBEE  +
mov esi [ebp+arg_C] +
cmp dword ptr [edi+4] 80000h +
jnz loc_100DBDC  +
push 0  +
push [ebp+arg_4]  +
push dword ptr [edi+0Ch]  +
call sub_1001910  +
test eax eax +
jz loc_100DBDC  +
mov ecx [ebp+arg_8] +
cmp [eax+4] ecx +
jnz loc_100DBDC  +
mov edx 70000h +
cmp ecx edx +
ja loc_100DB6D  +
jz loc_100DB57  +
cmp ecx 20000h +
jz loc_100DB41  +
cmp ecx 30000h +
jz loc_100DBD3  +
cmp ecx 40000h +
jz loc_100DBD3  +
cmp ecx 60000h +
jnz loc_100DBDC  +
mov eax [eax+0Ch] +
fld  dword ptr [eax] +
fld  dword ptr [esi] +
fucompp   +
jmp loc_100DB5E  +
push [ebp+cchCount2]  +
push [ebp+arg_10]  +
push esi  +
push dword ptr [eax+0Ch]  +
call sub_1004857  +
test eax eax +
jmp loc_100DBDA  +
mov eax [eax+0Ch] +
fld  qword ptr [esi] +
fcomp  qword ptr [eax] +
fnstsw  ax +
test ah 44h +
jp loc_100DBDC  +
mov eax [ebp+arg_0] +
jmp loc_100DBF1  +
cmp ecx 90000h +
jz loc_100DBD3  +
cmp ecx 0A0000h +
jz loc_100DB96  +
cmp ecx 0B0000h +
jnz loc_100DBDC  +
mov eax [edi+0Ch] +
mov ecx [esi+4] +
cmp ecx [eax+4] +
jnz loc_100DBDC  +
mov ecx [esi] +
cmp ecx [eax] +
jmp loc_100DBDA  +
mov eax [edi+0Ch] +
mov cx [esi+6] +
cmp cx [eax+6] +
jnz loc_100DBDC  +
mov cx [esi+0Eh] +
cmp cx [eax+0Eh] +
jnz loc_100DBDC  +
mov cx [esi+0Ah] +
cmp cx [eax+0Ah] +
jnz loc_100DBDC  +
mov cx [esi+2] +
cmp cx [eax+2] +
jnz loc_100DBDC  +
mov cx [esi+0Ch] +
cmp cx [eax+0Ch] +
jnz loc_100DBDC  +
mov cx [esi] +
cmp cx [eax] +
jmp loc_100DBDA  +
mov eax [eax+0Ch] +
mov eax [eax] +
cmp eax [esi] +
jz loc_100DB65  +
inc [ebp+arg_0]  +
mov eax [ebp+arg_0] +
mov edi [edi+10h] +
cmp eax [ebx+4] +
jb loc_100DAD1  +
or eax 0FFFFFFFFh +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push 0  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1001910  +
mov esi eax +
test esi esi +
jnz loc_100DC1A  +
xor eax eax +
jmp loc_100DC55  +
mov eax [esi+4] +
cmp eax 30000h +
jz loc_100DC2A  +
test eax eax +
jnz loc_100DC16  +
jmp loc_100DC2E  +
test eax eax +
jnz loc_100DC4A  +
push 4  +
call sub_10026AF  +
mov [esi+0Ch] eax +
test eax eax +
jz loc_100DC16  +
mov dword ptr [esi+4] 30000h +
mov dword ptr [esi+8] 4 +
mov eax [esi+0Ch] +
mov ecx [ebp+arg_8] +
mov [eax] ecx +
xor eax eax +
inc eax  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_1001910  +
test eax eax +
jz loc_100DC8E  +
cmp dword ptr [eax+4] 80000h +
jnz loc_100DC8E  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push dword ptr [eax+0Ch]  +
call sub_100DBFD  +
jmp loc_100DC90  +
xor eax eax +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+cchCount2]  +
push [ebp+arg_8]  +
push [ebp+lpString2]  +
push 20000h  +
push [ebp+arg_0]  +
call sub_100D967  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push 0  +
lea eax [ebp+arg_8] +
push eax  +
push 30000h  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_100DAA0  +
pop ebp  +
retn 0Ch  +
***
jz $+2  +
add [eax+0] al +
retn 0E6h  +
***
