mov edi edi +
push esi  +
mov esi eax +
xor eax eax +
mov ecx edx +
test edx edx +
jz loc_10014AE  +
cmp [esi] al +
jz loc_10014AA  +
inc esi  +
dec edx  +
jnz loc_10014A2  +
test edx edx +
jnz loc_10014B3  +
mov eax 80070057h +
pop esi  +
test edi edi +
jz locret_10014C4  +
test eax eax +
jl loc_10014C1  +
sub ecx edx +
mov [edi] ecx +
retn   +
and dword ptr [edi] 0 +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov ebx eax +
mov esi edx +
xor eax eax +
xor edi edi +
test esi esi +
jz loc_10014FA  +
cmp [ebp+arg_4] eax +
jz loc_10014F6  +
mov dl [ebx] +
test dl dl +
jz loc_10014F6  +
mov [ecx] dl +
inc ecx  +
inc ebx  +
dec esi  +
dec [ebp+arg_4]  +
inc edi  +
test esi esi +
jnz loc_10014DE  +
test esi esi +
jnz loc_1001501  +
dec ecx  +
dec edi  +
mov eax 8007007Ah +
mov byte ptr [ecx] 0 +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_100150D  +
mov [ecx] edi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+8]  +
call ds:malloc  +
pop ecx  +
test eax eax +
jnz loc_1001540  +
mov ecx dword_1006140 +
cmp word ptr [ecx+38h] 0Dh +
jnz loc_1001540  +
push 6  +
pop edx  +
mov [ecx+38h] dx +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call ds:_read  +
add esp 0Ch +
cmp eax [ebp+10h] +
jz loc_1001588  +
mov ecx dword_1006140 +
cmp word ptr [ecx+38h] 0Dh +
jnz loc_1001588  +
push 4  +
pop edx  +
mov [ecx+38h] dx +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call ds:_write  +
add esp 0Ch +
mov esi eax +
call sub_100245A  +
cmp esi [ebp+arg_8] +
jz loc_10015C6  +
mov eax dword_1006140 +
cmp word ptr [eax+38h] 0Dh +
jnz loc_10015C6  +
push 7  +
pop ecx  +
mov [eax+38h] cx +
mov eax esi +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
push esi  +
call ds:_close  +
mov edi eax +
mov eax dword_1006140 +
pop ecx  +
cmp edi 0FFFFFFFFh +
jnz loc_10015FC  +
cmp word ptr [eax+38h] 0Dh +
jnz loc_10015FC  +
push 7  +
pop ecx  +
mov [eax+38h] cx +
cmp esi [eax+0DCh] +
jnz loc_100161F  +
add eax 3Ah +
push eax  +
call ds:_unlink  +
mov eax dword_1006140 +
or dword ptr [eax+0DCh] 0FFFFFFFFh +
pop ecx  +
mov byte ptr [eax+3Ah] 0 +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call ds:_lseek  +
add esp 0Ch +
cmp eax 0FFFFFFFFh +
jnz loc_1001659  +
mov ecx dword_1006140 +
cmp word ptr [ecx+38h] 0Dh +
jnz loc_1001659  +
xor edx edx +
mov [ecx+38h] dx +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_4] +
xor eax eax +
test edx edx +
jz loc_1001676  +
cmp edx 7FFFFFFFh +
jbe loc_100167B  +
mov eax 80070057h +
test eax eax +
jl loc_1001691  +
mov eax [ebp+arg_8] +
mov ecx [ebp+arg_0] +
push 7FFFFFFEh  +
push 0  +
call sub_10014CA  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_4] +
push ebx  +
xor eax eax +
push esi  +
mov esi 7FFFFFFFh +
test edx edx +
jz loc_10016B3  +
cmp edx esi +
jbe loc_10016B8  +
mov eax 80070057h +
mov ebx [ebp+arg_0] +
test eax eax +
jl loc_10016D0  +
push edi  +
lea edi [ebp+arg_0] +
mov eax ebx +
call sub_1001495  +
mov ecx [ebp+arg_0] +
pop edi  +
jmp loc_10016D2  +
xor ecx ecx +
test eax eax +
jl loc_10016E8  +
mov edx [ebp+arg_4] +
mov eax [ebp+arg_8] +
push esi  +
sub edx ecx +
push 0  +
add ecx ebx +
call sub_10014CA  +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
xor eax eax +
test ecx ecx +
jz loc_1001709  +
cmp ecx 7FFFFFFFh +
jbe loc_100170E  +
mov eax 80070057h +
test eax eax +
jl loc_100174B  +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
lea eax [ebp+arg_C] +
push eax  +
push [ebp+arg_8]  +
lea esi [ecx-1] +
push esi  +
push edi  +
xor ebx ebx +
call ds:_vsnprintf  +
add esp 10h +
test eax eax +
jl loc_100173E  +
cmp eax esi +
ja loc_100173E  +
jnz loc_1001746  +
mov [esi+edi] bl +
jmp loc_1001746  +
mov [esi+edi] bl +
mov ebx 8007007Ah +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 28h +
and [ebp+var_4] 0 +
push ebx  +
mov ebx [edi+8] +
push esi  +
mov esi [edi+4] +
jmp loc_1001796  +
cmp al 40h +
jnz loc_100177D  +
push [ebp+lpString2]  +
lea eax [esi+1] +
push eax  +
call ds:lstrcmpiA  +
test eax eax +
jz loc_10017A4  +
push esi  +
call ds:lstrlenA  +
push ebx  +
lea esi [esi+eax+1] +
call ds:lstrlenA  +
inc [ebp+var_4]  +
lea ebx [ebx+eax+1] +
mov al [esi] +
test al al +
jnz loc_1001768  +
xor eax eax +
pop esi  +
pop ebx  +
leave   +
retn 4  +
push ebx  +
push dword ptr [edi]  +
push offset dword_100126C  +
push 0A0h  +
push dword ptr [edi+10h]  +
call sub_10016F3  +
add esp 14h +
test eax eax +
jge loc_10017C5  +
call loc_1001FA4  +
lea eax [ebp+var_28] +
push eax  +
push dword ptr [edi+10h]  +
call ds:_stat  +
pop ecx  +
pop ecx  +
mov esi 180h +
cmp eax 0FFFFFFFFh +
jz loc_10017FF  +
test byte ptr [ebp+var_28.st_mode] 80h +
jnz loc_10017F0  +
push esi  +
push dword ptr [edi+10h]  +
call ds:_chmod  +
pop ecx  +
pop ecx  +
mov eax dword_1006140 +
push dword ptr [eax+10h]  +
call ds:_unlink  +
pop ecx  +
push esi  +
push 8302h  +
push dword ptr [edi+10h]  +
call ds:_open  +
add esp 0Ch +
cmp eax 0FFFFFFFFh +
jnz loc_100181D  +
push 4  +
pop ecx  +
mov [edi+38h] cx +
mov ecx [ebp+var_4] +
cmp ecx [edi+1Ch] +
jge loc_100182F  +
mov edx [edi+14h] +
mov dword ptr [edx+ecx*4] 1 +
inc dword ptr [edi+18h]  +
jmp loc_100179E  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 154h +
mov eax dword_1006114 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
mov esi ds:lstrlenA +
push edi  +
mov ebx edx +
push ebx  +
mov edi ecx +
mov [ebp+var_150] 1 +
call esi  +
push edi  +
mov [ebp+var_154] eax +
call esi  +
mov ecx [ebp+var_154] +
add ecx eax +
mov eax 0A0h +
cmp ecx eax +
jnb loc_1001935  +
push ebx  +
push edi  +
push offset dword_1001274  +
push eax  +
lea eax [ebp+FileName] +
push eax  +
call sub_10016F3  +
add esp 14h +
test eax eax +
jge loc_10018A9  +
call loc_1001FA4  +
mov edi ds:OpenFile +
mov ebx 4000h +
push ebx  +
lea eax [ebp+ReOpenBuff] +
push eax  +
lea eax [ebp+FileName] +
push eax  +
call edi  +
cmp eax 0FFFFFFFFh +
jnz loc_1001930  +
xor esi esi +
push 0Ah  +
lea eax [ebp+var_24] +
push eax  +
push [ebp+arg_0]  +
call ds:_itoa  +
add esp 0Ch +
push esi  +
lea eax [ebp+var_24] +
cmp [ebp+var_150] esi +
jz loc_1001903  +
push esi  +
push eax  +
push 31h  +
push esi  +
push 8  +
call sub_10025D0  +
cmp eax 1 +
jnz loc_1001935  +
mov [ebp+var_150] esi +
jmp loc_100191A  +
push eax  +
lea eax [ebp+FileName] +
push eax  +
push 31h  +
push esi  +
push 9  +
call sub_10025D0  +
cmp eax 1 +
jnz loc_1001935  +
push ebx  +
lea eax [ebp+ReOpenBuff] +
push eax  +
lea eax [ebp+FileName] +
push eax  +
call edi  +
cmp eax 0FFFFFFFFh +
jz loc_10018CC  +
xor eax eax +
inc eax  +
jmp loc_1001937  +
xor eax eax +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1004BED  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1Ch +
mov eax dword_1006114 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
push offset aSf  +
push (offset aB+2)  +
mov [ebp+var_1C] 1 +
call ds:_tempnam  +
mov esi eax +
xor ebx ebx +
pop ecx  +
pop ecx  +
cmp esi ebx +
jz loc_1001A15  +
mov eax dword_1006140 +
push esi  +
push 0A0h  +
add eax 3Ah +
push eax  +
call sub_1001660  +
test eax eax +
jge loc_10019A3  +
call loc_1001FA4  +
push esi  +
call ds:free  +
pop ecx  +
push [ebp+arg_0]  +
mov eax dword_1006140 +
add eax 3Ah +
push 8102h  +
push eax  +
call ds:_open  +
mov ecx dword_1006140 +
add esp 0Ch +
mov [ecx+0DCh] eax +
cmp eax 0FFFFFFFFh +
jz loc_1001A1B  +
mov edx [edi+2] +
cmp edx ebx +
jle loc_1001ACB  +
push ebx  +
dec edx  +
push edx  +
push eax  +
call sub_100162A  +
add esp 0Ch +
cmp eax 0FFFFFFFFh +
jz loc_1001A15  +
mov eax dword_1006140 +
push 1  +
push offset aB  +
push dword ptr [eax+0DCh]  +
call sub_100158F  +
add esp 0Ch +
cmp eax 1 +
jz loc_1001AC5  +
mov ecx dword_1006140 +
mov eax [ecx+0DCh] +
cmp eax 0FFFFFFFFh +
jz loc_1001A33  +
push eax  +
call sub_10015D0  +
pop ecx  +
mov ecx dword_1006140 +
cmp [ebp+var_1C] ebx +
jz loc_1001A7E  +
push offset aSfxxxxxx  +
push offset dword_1001284  +
push dword ptr [ecx]  +
add ecx 3Ah +
push offset dword_100127C  +
push 0A0h  +
push ecx  +
mov [ebp+var_1C] ebx +
call sub_10016F3  +
add esp 18h +
test eax eax +
jge loc_1001A66  +
call loc_1001FA4  +
mov eax dword_1006140 +
add eax 3Ah +
push eax  +
call ds:_mktemp  +
pop ecx  +
test eax eax +
jnz loc_10019AB  +
push 0Ah  +
lea eax [ebp+var_18] +
push eax  +
mov eax [edi+2] +
mov ecx 3FFh +
add eax ecx +
cdq   +
and edx ecx +
add eax edx +
sar eax 0Ah +
push eax  +
call ds:_ltoa  +
add esp 0Ch +
push ebx  +
push ebx  +
lea eax [ebp+var_18] +
push eax  +
push 10h  +
push 1  +
push 0Bh  +
call sub_10025D0  +
mov eax dword_1006140 +
push 0Bh  +
pop ecx  +
mov [eax+3Ah] bl +
mov [eax+38h] cx +
or eax 0FFFFFFFFh +
jmp loc_1001AD1  +
mov ecx dword_1006140 +
mov eax [ecx+0DCh] +
mov ecx [ebp+var_4] +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1004BED  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_8] 0Ah +
jnz loc_1001AF5  +
xor eax eax +
jmp loc_1001B39  +
push [ebp+lpString]  +
push [ebp+arg_4]  +
push offset dword_1001274  +
push 0A0h  +
push dword ptr [esi+0Ch]  +
call sub_10016F3  +
add esp 14h +
test eax eax +
jge loc_1001B19  +
call loc_1001FA4  +
mov eax [esi+20h] +
mov edx [ebp+lpString] +
mov ecx [ebp+arg_4] +
inc eax  +
push eax  +
call sub_100183C  +
test eax eax +
jnz loc_1001B36  +
push 3  +
pop eax  +
mov [esi+38h] ax +
jmp loc_1001AF1  +
xor eax eax +
inc eax  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
mov edi [ebp+8] +
cmp byte ptr [edi] 2Ah +
push dword ptr [ebp+10h]  +
jnz loc_1001B5A  +
call sub_100194D  +
jmp loc_1001B80  +
push dword ptr [ebp+0Ch]  +
push edi  +
call ds:_open  +
add esp 0Ch +
cmp eax 0FFFFFFFFh +
jnz loc_1001B80  +
mov ecx dword_1006140 +
cmp word ptr [ecx+38h] 0Dh +
jnz loc_1001B80  +
push 3  +
pop edx  +
mov [ecx+38h] dx +
pop edi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
sub eax 0 +
push esi  +
jz loc_1001BAE  +
dec eax  +
jz loc_1001BAE  +
dec eax  +
jz loc_1001C08  +
dec eax  +
jz loc_1001BCD  +
dec eax  +
mov eax [ebp+0Ch] +
jz loc_1001BB3  +
mov eax [eax+10h] +
xor ecx ecx +
mov [eax+38h] cx +
xor eax eax +
pop esi  +
pop ebp  +
retn   +
***
push dword ptr [eax+24h]  +
mov esi [eax+10h] +
push dword ptr [eax+0Ch]  +
push dword ptr [eax+4]  +
call sub_1001AE6  +
neg eax  +
sbb eax eax +
neg eax  +
dec eax  +
jmp loc_1001BB0  +
***
mov eax [ebp+0Ch] +
mov ecx [eax+14h] +
mov esi [eax+10h] +
push ecx  +
call sub_10015D0  +
pop ecx  +
cmp eax 0FFFFFFFFh +
jz loc_1001BF7  +
push 100h  +
push dword ptr [esi+10h]  +
call ds:_chmod  +
pop ecx  +
xor eax eax +
pop ecx  +
inc eax  +
jmp loc_1001BF9  +
xor eax eax +
xor ecx ecx +
test eax eax +
setnz cl  +
lea ecx [ecx+ecx-1] +
mov eax ecx +
jmp loc_1001BB0  +
***
mov eax [ebp+0Ch] +
push edi  +
push dword ptr [eax+4]  +
mov edi [eax+10h] +
call sub_1001752  +
pop edi  +
jmp loc_1001BB0  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2FCh +
mov eax dword_1006114 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_4] +
mov [ebp+var_FC] eax +
mov eax [ebp+arg_10] +
mov [ebp+var_F0] eax +
mov eax [ebp+arg_20] +
push ebx  +
mov ebx [ebp+arg_14] +
push esi  +
mov esi [ebp+arg_18] +
mov [ebp+var_EC] eax +
push edi  +
xor eax eax +
inc eax  +
mov ecx 80h +
lea edi [ebp+var_2FC] +
stos   +
xor edi edi +
cmp byte ptr [esi] 0 +
mov [ebp+var_E8] 0Dh +
mov [ebp+lpString] esi +
jmp loc_1001CB5  +
cmp edi 80h +
jge loc_1001CBD  +
mov eax [ebp+lpString] +
cmp byte ptr [eax] 40h +
jnz loc_1001C9A  +
and [ebp+edi*4+var_2FC] 0 +
push eax  +
call ds:lstrlenA  +
mov ecx [ebp+lpString] +
lea eax [ecx+eax+1] +
inc edi  +
cmp byte ptr [eax] 0 +
mov [ebp+lpString] eax +
mov [ebp+var_F8] edi +
jnz loc_1001C7F  +
mov eax [ebp+arg_1C] +
mov [ebp+var_DC] eax +
mov eax [ebp+var_EC] +
mov [ebp+var_D8] eax +
mov eax [ebp+arg_24] +
mov [ebp+var_D4] eax +
push 0Dh  +
and [ebp+var_B0] 0 +
lea eax [ebp+var_2FC] +
mov [ebp+var_D0] eax +
mov eax [ebp+arg_0] +
and [ebp+var_CC] 0 +
or [ebp+var_8] 0FFFFFFFFh +
mov [ebp+var_C0] eax +
pop eax  +
mov word ptr [ebp+var_AC] ax +
lea eax [ebp+var_E4] +
mov dword_1006140 eax +
lea eax [ebp+var_B8] +
push eax  +
push 0FFFFFFFFh  +
push offset sub_100162A  +
push offset sub_10015D0  +
push offset sub_100158F  +
push offset loc_1001558  +
push offset loc_1001B42  +
push offset loc_1001547  +
push offset loc_1001519  +
mov [ebp+var_E4] ebx +
mov [ebp+var_E0] esi +
mov [ebp+var_C8] edi +
mov byte ptr [ebp+var_AC+2] 0 +
call FDICreate  +
add esp 24h +
mov [ebp+var_BC] eax +
test eax eax +
jnz loc_1001D76  +
push 6  +
pop eax  +
jmp loc_1001F3A  +
mov eax [ebp+arg_8] +
mov [ebp+var_C4] eax +
mov eax [ebp+var_CC] +
cmp eax [ebp+var_C8] +
jge loc_1001EA6  +
mov eax [ebp+var_C4] +
cmp eax [ebp+arg_C] +
jg loc_1001EA6  +
mov edi [ebp+var_FC] +
push edi  +
mov ebx eax +
call ds:lstrlenA  +
lea ecx [ebx-1] +
add eax edi +
cmp ecx 8 +
ja loc_1001E6E  +
cmp ebx 1 +
jz loc_1001DEB  +
mov cl [eax] +
cmp cl 2Eh +
jz loc_1001DE5  +
lea edx [edi+1] +
cmp eax edx +
jbe loc_1001E6E  +
cmp cl 5Ch +
jz loc_1001E6E  +
dec eax  +
mov cl [eax] +
cmp cl 2Eh +
jnz loc_1001DCC  +
add bl 30h +
mov [eax-1] bl +
push edi  +
push [ebp+var_F0]  +
mov ebx 0A0h +
push offset dword_1001274  +
push ebx  +
push [ebp+var_EC]  +
call sub_10016F3  +
add esp 14h +
test eax eax +
jge loc_1001E14  +
call loc_1001FA4  +
push [ebp+var_C4]  +
mov ecx [ebp+var_F0] +
mov edx edi +
call sub_100183C  +
test eax eax +
jz loc_1001E6E  +
lea eax [ebp+var_E4] +
push eax  +
push 0  +
push offset loc_1001B88  +
push 0  +
push [ebp+var_F0]  +
push edi  +
push [ebp+var_BC]  +
call FDICopy  +
add esp 1Ch +
test eax eax +
jz loc_1001E7D  +
mov eax [ebp+var_CC] +
inc [ebp+var_C4]  +
cmp eax [ebp+var_C8] +
jl loc_1001D91  +
jmp loc_1001EAB  +
mov [ebp+var_E8] 3 +
jmp loc_1001F10  +
mov ax word ptr [ebp+var_AC] +
sub ax 0Dh +
movzx eax ax +
neg eax  +
sbb eax eax +
and eax [ebp+var_AC] +
movzx eax ax +
mov [ebp+var_E8] eax +
cmp ax 0Dh +
jnz loc_1001F10  +
jmp loc_1001EAB  +
mov ebx 0A0h +
xor edi edi +
cmp [ebp+var_F8] edi +
jle loc_1001F10  +
cmp [ebp+edi*4+var_2FC] 0 +
jnz loc_1001EFC  +
push offset asc_100129C  +
push ebx  +
push [ebp+var_EC]  +
call sub_100169A  +
test eax eax +
jge loc_1001ED9  +
call loc_1001FA4  +
lea eax [esi+1] +
push eax  +
push ebx  +
push [ebp+var_EC]  +
call sub_100169A  +
test eax eax +
jge loc_1001EF2  +
call loc_1001FA4  +
mov [ebp+var_E8] 3 +
push esi  +
call ds:lstrlenA  +
inc edi  +
cmp edi [ebp+var_F8] +
lea esi [esi+eax+1] +
jl loc_1001EB5  +
push [ebp+var_BC]  +
call FDIDestroy  +
mov eax dword_1006140 +
mov eax [eax+0DCh] +
pop ecx  +
cmp eax 0FFFFFFFFh +
jz loc_1001F33  +
push eax  +
call sub_10015D0  +
pop ecx  +
mov ax word ptr [ebp+var_E8] +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1004BED  +
leave   +
retn 28h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov al [ebp+RootPathName] +
add al 41h +
mov [ebp+RootPathName] al +
lea eax [ebp+RootPathName] +
push eax  +
mov [ebp+arg_1] 3Ah +
mov [ebp+arg_2] 5Ch +
mov [ebp+arg_3] 0 +
call ds:GetDriveTypeA  +
dec eax  +
dec eax  +
jz loc_1001F98  +
dec eax  +
jz loc_1001F93  +
dec eax  +
jz loc_1001F8F  +
dec eax  +
jz loc_1001F8B  +
dec eax  +
jz loc_1001F87  +
xor eax eax +
jmp loc_1001F9B  +
push 6  +
jmp loc_1001F95  +
push 4  +
jmp loc_1001F95  +
push 3  +
jmp loc_1001F95  +
push 2  +
pop eax  +
jmp loc_1001F9B  +
xor eax eax +
inc eax  +
pop ebp  +
retn 4  +
***
push 1  +
call ds:ExitProcess  +
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 9Ch +
mov eax dword_1006114 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_8C] +
push ebx  +
mov ebx [ebp+arg_88] +
push esi  +
push edi  +
push 22h  +
pop ecx  +
mov [ebp+lpString] eax +
push 8001h  +
lea eax [ebp+ReOpenBuff] +
push eax  +
lea esi [ebp+arg_0] +
lea edi [ebp+ReOpenBuff] +
push offset FileName  +
movs   +
mov [ebp+var_98] 1 +
call ds:OpenFile  +
mov edi eax +
mov [ebp+hFile] edi +
cmp edi 0FFFFFFFFh +
jz loc_10020A0  +
push 2  +
push 0  +
push edi  +
call ds:_llseek  +
cmp eax 0FFFFFFFFh +
jz loc_10020A0  +
mov esi ds:lstrlenA +
push ebx  +
call esi  +
push eax  +
push ebx  +
push edi  +
mov edi ds:_lwrite +
call edi  +
push ebx  +
mov [ebp+var_9C] eax +
call esi  +
mov ecx [ebp+var_9C] +
cmp ecx eax +
jnz loc_10020A0  +
push 1  +
push offset Buffer  +
push [ebp+hFile]  +
call edi  +
cmp eax 1 +
jnz loc_10020A0  +
push [ebp+lpString]  +
call esi  +
push eax  +
push [ebp+lpString]  +
push [ebp+hFile]  +
call edi  +
push [ebp+lpString]  +
mov ebx eax +
call esi  +
cmp ebx eax +
jnz loc_10020A0  +
push 2  +
push offset asc_10012D8  +
push [ebp+hFile]  +
call edi  +
cmp eax 2 +
jz loc_10020A7  +
and [ebp+var_98] 0 +
cmp [ebp+hFile] 0FFFFFFFFh +
pop edi  +
pop esi  +
pop ebx  +
jz loc_10020BF  +
push [ebp+hFile]  +
call ds:_lclose  +
mov ecx [ebp+var_4] +
mov eax [ebp+var_98] +
xor ecx ebp +
call sub_1004BED  +
leave   +
retn 90h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov al [ebp+DirectoryName] +
push edi  +
add al 40h +
mov [ebp+DirectoryName] al +
xor eax eax +
lea edi [ebp+FreeBytesAvailableToCaller] +
stos   +
push 0  +
stos   +
push 0  +
lea eax [ebp+FreeBytesAvailableToCaller] +
push eax  +
lea eax [ebp+DirectoryName] +
push eax  +
mov [ebp+arg_1] 3Ah +
mov [ebp+arg_2] 5Ch +
mov [ebp+arg_3] 0 +
call ds:GetDiskFreeSpaceExA  +
cmp dword ptr [ebp+FreeBytesAvailableToCaller] 0 +
mov eax 3D08FC00h +
pop edi  +
jl locret_1002121  +
cmp dword ptr [ebp+FreeBytesAvailableToCaller] eax +
jg locret_1002121  +
mov eax dword ptr [ebp+FreeBytesAvailableToCaller] +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push esi  +
lea eax [ebp+var_8] +
push eax  +
push [ebp+arg_8]  +
xor esi esi +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call ds:GetTextExtentPointA  +
test eax eax +
jz loc_1002182  +
mov eax [ebp+var_8.cy] +
mov esi [ebp+var_8._cx] +
mov ecx eax +
or ecx esi +
test ecx 0FFFF8000h +
jz loc_100217B  +
mov ecx 7FFFh +
cmp esi ecx +
jle loc_1002168  +
mov esi ecx +
cmp eax ecx +
jle loc_1002174  +
or esi 7FFF0000h +
jmp loc_1002182  +
shl eax 10h +
or esi eax +
jmp loc_1002182  +
shl eax 10h +
or eax esi +
mov esi eax +
mov eax esi +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 58h +
mov eax dword_1006114 +
xor eax ebp +
mov [ebp-4] eax +
mov eax [ebp+0Ch] +
dec eax  +
push ebx  +
mov ebx [ebp+8] +
push esi  +
push edi  +
mov [ebp-48h] ebx +
jz loc_1002242  +
sub eax 0Eh +
jz loc_10021CD  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push ebx  +
call ds:DefWindowProcA  +
jmp loc_10022DE  +
cmp dword_100615C 0 +
jnz loc_10022DC  +
lea eax [ebp-44h] +
push eax  +
push ebx  +
call ds:BeginPaint  +
mov edi eax +
lea eax [ebp-58h] +
push eax  +
push ebx  +
call ds:GetClientRect  +
mov eax [ebp-50h] +
cdq   +
and edx 0Fh +
add eax edx +
mov esi eax +
push 4  +
sar esi 4 +
call ds:GetSystemMetrics  +
sub [ebp-50h] esi +
mov ecx eax +
mov eax [ebp-4Ch] +
cdq   +
sub eax edx +
sar eax 1 +
push 1  +
sub eax ecx +
push edi  +
mov [ebp-54h] eax +
mov [ebp-58h] esi +
call ds:SetBkMode  +
push 811h  +
lea eax [ebp-58h] +
push eax  +
push 0FFFFFFFFh  +
push offset byte_1006980  +
push edi  +
call ds:DrawTextA  +
jmp loc_10022D1  +
cmp dword_100615C 0 +
jnz loc_10022DC  +
lea eax [ebp-44h] +
push eax  +
push ebx  +
call ds:BeginPaint  +
mov edi eax +
lea eax [ebp-58h] +
push eax  +
push ebx  +
call ds:GetClientRect  +
mov esi offset byte_1006980 +
push esi  +
call ds:lstrlenA  +
push eax  +
push esi  +
push edi  +
call sub_100212A  +
movzx eax ax +
add eax 0Dh +
push 0Eh  +
cdq   +
pop ecx  +
idiv  ecx +
mov edi eax +
shl edi 4 +
inc edi  +
inc edi  +
cmp edi [ebp-50h] +
jle loc_10022D1  +
mov esi ds:GetSystemMetrics +
xor ebx ebx +
push ebx  +
call esi  +
cmp edi eax +
jle loc_10022A7  +
push ebx  +
call esi  +
mov edi eax +
push ebx  +
call esi  +
sub eax edi +
cdq   +
sub eax edx +
mov ebx eax +
push 1  +
sar ebx 1 +
call esi  +
push 3  +
pop ecx  +
cdq   +
idiv  ecx +
push 4  +
push eax  +
push edi  +
push eax  +
push ebx  +
push 0  +
push dword ptr [ebp-48h]  +
call ds:SetWindowPos  +
mov ebx [ebp-48h] +
lea eax [ebp-44h] +
push eax  +
push ebx  +
call ds:EndPaint  +
xor eax eax +
mov ecx [ebp-4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1004BED  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
xor edi edi +
push edi  +
push [ebp+lpPathName]  +
mov [esi] edi +
call ds:_lopen  +
mov ebx eax +
cmp ebx 0FFFFFFFFh +
jnz loc_100231E  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
push 2  +
push edi  +
push ebx  +
call ds:_llseek  +
cmp eax 0FFFFh +
jle loc_100233A  +
push ebx  +
call ds:_lclose  +
mov eax edi +
jmp loc_1002317  +
xor edi edi +
mov [esi] eax +
inc edi  +
jmp loc_100232F  +
***
mov eax hMem +
push esi  +
mov esi ds:LocalFree +
test eax eax +
jz loc_100235E  +
push eax  +
call esi  +
mov hMem eax +
mov eax dword_100616C +
test eax eax +
jz loc_100236F  +
push eax  +
call esi  +
mov dword_100616C eax +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1Ch +
push 1  +
push [ebp+uIDEvent]  +
call ds:WinExec  +
cmp eax 20h +
jbe loc_100244F  +
push ebx  +
push esi  +
xor esi esi +
push edi  +
mov edi ds:FindWindowA +
mov [ebp+uIDEvent] esi +
mov ebx offset ClassName +
push esi  +
push ebx  +
call edi  +
test eax eax +
jnz loc_10023E0  +
push 1  +
push esi  +
push esi  +
push esi  +
lea eax [ebp+Msg] +
push eax  +
call ds:PeekMessageA  +
test eax eax +
jz loc_10023D4  +
lea eax [ebp+Msg] +
push eax  +
call ds:TranslateMessage  +
lea eax [ebp+Msg] +
push eax  +
call ds:DispatchMessageA  +
inc [ebp+uIDEvent]  +
cmp [ebp+uIDEvent] 4B0h +
jb loc_10023A5  +
push esi  +
push 64h  +
push esi  +
push esi  +
call ds:SetTimer  +
mov [ebp+uIDEvent] eax +
jmp loc_1002430  +
push esi  +
push esi  +
push esi  +
lea eax [ebp+Msg] +
push eax  +
call ds:GetMessageA  +
test eax eax +
jz loc_1002415  +
lea eax [ebp+Msg] +
push eax  +
call ds:TranslateMessage  +
lea eax [ebp+Msg] +
push eax  +
call ds:DispatchMessageA  +
cmp [ebp+Msg.message] 113h +
jnz loc_1002430  +
cmp [ebp+hWnd] esi +
jz loc_1002430  +
push esi  +
push [ebp+hWnd]  +
call ds:ShowWindow  +
mov [ebp+hWnd] esi +
push esi  +
push ebx  +
call edi  +
test eax eax +
jnz loc_10023F0  +
cmp [ebp+uIDEvent] esi +
jz loc_1002447  +
push [ebp+uIDEvent]  +
push esi  +
call ds:KillTimer  +
pop edi  +
xor eax eax +
pop esi  +
inc eax  +
pop ebx  +
jmp locret_1002451  +
xor eax eax +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1Ch +
push esi  +
mov esi ds:PeekMessageA +
push edi  +
xor edi edi +
jmp loc_1002482  +
lea eax [ebp+Msg] +
push eax  +
call ds:TranslateMessage  +
lea eax [ebp+Msg] +
push eax  +
call ds:DispatchMessageA  +
push 1  +
push edi  +
push edi  +
push edi  +
lea eax [ebp+Msg] +
push eax  +
call esi  +
test eax eax +
jnz loc_100246E  +
pop edi  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+lpFileName]  +
push 80h  +
push offset ReturnedString  +
push (offset aB+2)  +
push offset KeyName  +
push [ebp+lpAppName]  +
call ds:GetPrivateProfileStringA  +
xor ecx ecx +
cmp ecx eax +
sbb eax eax +
neg eax  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 24h +
lea eax [ebp+SystemInfo] +
push eax  +
call ds:GetSystemInfo  +
movzx eax word ptr [ebp+SystemInfo.anonymous_0] +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
lea eax [ebp+hKey] +
push eax  +
push 20019h  +
push 0  +
push [ebp+hKey]  +
push 80000000h  +
call ds:RegOpenKeyExA  +
test eax eax +
jz loc_1002513  +
xor eax eax +
jmp loc_100251F  +
push [ebp+hKey]  +
call ds:RegCloseKey  +
xor eax eax +
inc eax  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and dword ptr [ebp-4] 0 +
push ebx  +
push esi  +
mov esi [ebp+8] +
cmp byte ptr [esi] 5Ch +
push edi  +
mov ebx esi +
jz loc_100254D  +
mov edi ds:CharNextA +
push esi  +
call edi  +
cmp byte ptr [eax] 3Ah +
jnz loc_100257B  +
push offset aMsstfqf_t  +
push dword ptr [ebp+0Ch]  +
push esi  +
call sub_1001660  +
jmp loc_10025BE  +
mov al [esi] +
cmp al 2Eh +
jz loc_1002580  +
test al al +
jz loc_1002580  +
cmp al 3Ah +
jz loc_1002580  +
mov eax [ebp-4] +
inc dword ptr [ebp-4]  +
cmp eax 8 +
jge loc_1002580  +
push esi  +
call edi  +
mov esi eax +
cmp byte ptr [esi] 5Ch +
jnz loc_100255D  +
push esi  +
call edi  +
cmp byte ptr [esi] 2Eh +
jnz loc_10025AA  +
mov cl [eax] +
cmp cl 2Eh +
jz loc_10025AA  +
cmp cl 5Ch +
jz loc_10025AA  +
test cl cl +
jz loc_10025AA  +
cmp cl 3Ah +
jz loc_10025AA  +
push eax  +
call edi  +
mov byte ptr [eax] 0 +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
sub ebx esi +
add ebx [ebp+0Ch] +
push offset a_t  +
push ebx  +
push esi  +
mov byte ptr [esi] 0 +
call sub_100169A  +
test eax eax +
jge loc_10025A3  +
push 1  +
call ds:ExitProcess  +
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 5B0h +
mov eax dword_1006114 +
xor eax ebp +
mov [ebp+var_4] eax +
cmp dword_100615C 0 +
mov eax [ebp+arg_10] +
mov [ebp+var_5B0] eax +
mov eax [ebp+arg_14] +
push ebx  +
mov ebx [ebp+arg_C] +
mov [ebp+var_5AC] eax +
jz loc_100260C  +
push 2  +
pop eax  +
jmp loc_1002758  +
push esi  +
mov esi ds:LoadStringA +
push edi  +
mov edi 104h +
push edi  +
lea eax [ebp+Caption] +
push eax  +
push 0  +
push hInstance  +
call esi  +
test eax eax +
jz loc_100273C  +
movzx eax [ebp+arg_0] +
push 200h  +
lea ecx [ebp+var_308] +
push ecx  +
push eax  +
push hInstance  +
call esi  +
test eax eax +
jz loc_100273C  +
xor esi esi +
cmp [ebp+arg_4] esi +
jnz loc_1002679  +
push offset byte_1006388  +
push edi  +
lea eax [ebp+Caption] +
push eax  +
call sub_1001660  +
test eax eax +
jge loc_1002679  +
push 1  +
call ds:ExitProcess  +
mov eax (offset aB+2) +
cmp ebx esi +
jnz loc_1002684  +
mov ebx eax +
cmp [ebp+var_5B0] esi +
jnz loc_1002692  +
mov [ebp+var_5B0] eax +
cmp [ebp+var_5AC] esi +
jnz loc_10026A0  +
mov [ebp+var_5AC] eax +
movzx eax [ebp+arg_0] +
sub eax 3 +
jz loc_10026EE  +
dec eax  +
jz loc_10026DB  +
sub eax 3 +
jz loc_10026DB  +
push [ebp+var_5AC]  +
lea eax [ebp+var_308] +
push [ebp+var_5B0]  +
push ebx  +
push eax  +
lea eax [ebp+Text] +
push 2A0h  +
push eax  +
call sub_10016F3  +
add esp 18h +
jmp loc_1002715  +
mov eax dword_1006DC0 +
cdq   +
and edx 3FFh +
add eax edx +
sar eax 0Ah +
jmp loc_10026F9  +
push offset sz  +
call ds:CharUpperA  +
push eax  +
lea eax [ebp+var_308] +
push eax  +
lea eax [ebp+Text] +
push 2A0h  +
push eax  +
call sub_10016F3  +
add esp 10h +
cmp eax esi +
jl loc_1002671  +
push [ebp+uType]  +
lea eax [ebp+Caption] +
push eax  +
lea eax [ebp+Text] +
push eax  +
push hWnd  +
call ds:MessageBoxA  +
jmp loc_1002756  +
push 10h  +
push offset Caption  +
push offset Text  +
push hWnd  +
call ds:MessageBoxA  +
xor eax eax +
pop edi  +
pop esi  +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop ebx  +
call sub_1004BED  +
leave   +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0A8h +
mov eax dword_1006114 +
xor eax ebp +
mov [ebp+var_4] eax +
and [ebp+var_A8] 0 +
push ebx  +
push esi  +
mov esi [ebp+lpString] +
push edi  +
mov edi [ebp+arg_4] +
push esi  +
call ds:lstrlenA  +
mov ebx eax +
movsx eax byte ptr [esi] +
sub eax 40h +
push eax  +
add ebx esi +
call ds:_chdrive  +
push esi  +
mov byte ptr [edi] 0 +
call ds:_mkdir  +
mov byte ptr [edi] 5Ch +
mov edi ds:_access +
push 0  +
push esi  +
call edi  +
add esp 10h +
jmp loc_1002840  +
push esi  +
call ds:_chdir  +
pop ecx  +
test eax eax +
jnz loc_100281A  +
push esi  +
push offset aSTxxxxxx  +
lea eax [ebp+var_A4] +
push 0A0h  +
push eax  +
call sub_10016F3  +
add esp 10h +
test eax eax +
jl loc_100285D  +
lea eax [ebp+var_A4] +
push eax  +
call ds:_mktemp  +
pop ecx  +
test eax eax +
jz loc_100281A  +
lea eax [ebp+var_A4] +
push offset aW  +
push eax  +
call ds:fopen  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_1002865  +
inc [ebp+var_A8]  +
cmp [ebp+var_A8] 9 +
jg loc_100288D  +
push 0Ah  +
push ebx  +
push [ebp+var_A8]  +
call ds:_itoa  +
push 0  +
push esi  +
call edi  +
add esp 14h +
test eax eax +
jz loc_10027C6  +
push esi  +
call ds:_mkdir  +
pop ecx  +
test eax eax +
jnz loc_100288D  +
push esi  +
call ds:_chdir  +
xor eax eax +
pop ecx  +
inc eax  +
jmp loc_1002892  +
push 1  +
call ds:ExitProcess  +
push eax  +
call ds:fclose  +
lea eax [ebp+var_A4] +
push eax  +
call ds:remove  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1002882  +
mov byte ptr [ebx] 0 +
xor ecx ecx +
test eax eax +
setz cl  +
mov eax ecx +
jmp loc_1002892  +
mov byte ptr [ebx] 0 +
xor eax eax +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1004BED  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 13Ch +
mov eax dword_1006114 +
xor eax ebp +
mov [ebp-4] eax +
mov eax [ebp+8] +
push edi  +
push 1  +
mov [ebp-134h] eax +
call ds:SetErrorMode  +
push dword_100616C  +
mov [ebp-13Ch] eax +
call ds:LocalLock  +
mov edi eax +
test edi edi +
jz loc_1002A3C  +
push ebx  +
push esi  +
mov esi ds:lstrlenA +
push edi  +
call esi  +
mov ebx 0A0h +
jmp loc_10029D3  +
push dword ptr [ebp-134h]  +
call esi  +
push edi  +
mov ebx eax +
call esi  +
lea eax [ebx+eax+1] +
mov ebx 0A0h +
cmp eax ebx +
jnb loc_1002A3A  +
push edi  +
push dword ptr [ebp-134h]  +
lea eax [ebp-0A4h] +
push offset dword_100126C  +
push ebx  +
push eax  +
call sub_10016F3  +
add esp 14h +
test eax eax +
jl loc_1002A4B  +
push 4000h  +
lea eax [ebp-12Ch] +
push eax  +
lea eax [ebp-0A4h] +
push eax  +
call ds:OpenFile  +
cmp eax 0FFFFFFFFh +
jz loc_10029C6  +
and dword ptr [ebp-130h] 0 +
lea eax [ebp-0A4h] +
push 80h  +
push eax  +
call ds:_chmod  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1002996  +
call sub_100245A  +
inc dword ptr [ebp-130h]  +
cmp dword ptr [ebp-130h] 4B0h +
jl loc_1002967  +
and dword ptr [ebp-130h] 0 +
lea eax [ebp-0A4h] +
push eax  +
call ds:remove  +
pop ecx  +
test eax eax +
jz loc_10029C6  +
call sub_100245A  +
inc dword ptr [ebp-130h]  +
cmp dword ptr [ebp-130h] 4B0h +
jl loc_100299D  +
mov eax [ebp-138h] +
lea edi [edi+eax+1] +
push edi  +
call esi  +
mov [ebp-138h] eax +
test eax eax +
jnz loc_1002900  +
push dword_100616C  +
call ds:LocalUnlock  +
push dword ptr [ebp-13Ch]  +
call ds:SetErrorMode  +
push dword ptr [ebp-134h]  +
lea eax [ebp-0A4h] +
push offset aS_mssetup__q_  +
push ebx  +
push eax  +
call sub_10016F3  +
add esp 10h +
test eax eax +
jl loc_1002A4B  +
lea eax [ebp-0A4h] +
push 80h  +
push eax  +
call ds:_chmod  +
lea eax [ebp-0A4h] +
push eax  +
call ds:remove  +
add esp 0Ch +
pop esi  +
pop ebx  +
mov ecx [ebp-4] +
xor ecx ebp +
pop edi  +
call sub_1004BED  +
leave   +
retn 4  +
***
push 1  +
call ds:ExitProcess  +
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 11Ch +
mov eax dword_1006114 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
mov esi [ebp+arg_4] +
push edi  +
push 180h  +
push esi  +
mov [ebp+var_118] 4 +
call ds:_chmod  +
pop ecx  +
pop ecx  +
mov edi 0A0h +
push edi  +
push esi  +
push esi  +
call ds:OemToCharBuffA  +
push 1001h  +
lea eax [ebp+ReOpenBuff] +
push eax  +
push esi  +
call ds:OpenFile  +
push esi  +
push esi  +
mov [ebp+hFile] eax +
call ds:CharToOemA  +
cmp [ebp+hFile] 0FFFFFFFFh +
jz loc_1002B57  +
push 0  +
lea eax [ebp+var_114] +
push eax  +
push ebx  +
call LZOpenFileA  +
mov esi eax +
cmp esi 0FFFFFFFFh +
jnz loc_1002B03  +
push ebx  +
push edi  +
push offset sz  +
mov [ebp+var_118] 3 +
call sub_1001660  +
test eax eax +
jge loc_1002B4B  +
push 1  +
call ds:ExitProcess  +
call sub_100245A  +
push [ebp+hFile]  +
push esi  +
call LZCopy  +
push esi  +
mov edi eax +
call LZClose  +
cmp edi 0FFFFFFF8h +
jb loc_1002B41  +
cmp edi 0FFFFFFFBh +
jnz loc_1002B30  +
mov [ebp+var_118] 6 +
cmp edi 0FFFFFFFCh +
jnz loc_1002B4B  +
mov [ebp+var_118] 7 +
jmp loc_1002B4B  +
mov [ebp+var_118] 0Dh +
push [ebp+hFile]  +
call ds:_lclose  +
mov ecx [ebp+var_4] +
mov ax word ptr [ebp+var_118] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1004BED  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 28h +
mov eax [ebp+hInstance] +
push ebx  +
xor ebx ebx +
mov [ebp+WndClass.hInstance] eax +
lea eax [ebp+WndClass] +
push eax  +
mov [ebp+WndClass.style] ebx +
mov [ebp+WndClass.lpfnWndProc] offset loc_100218E +
mov [ebp+WndClass.cbClsExtra] ebx +
mov [ebp+WndClass.cbWndExtra] ebx +
mov [ebp+WndClass.hIcon] ebx +
mov [ebp+WndClass.hCursor] ebx +
mov [ebp+WndClass.hbrBackground] 10h +
mov [ebp+WndClass.lpszMenuName] ebx +
mov [ebp+WndClass.lpszClassName] offset aStuffBoot +
call ds:RegisterClassA  +
test ax ax +
jnz loc_1002BBF  +
xor eax eax +
jmp loc_1002C28  +
push esi  +
push edi  +
mov edi ds:GetSystemMetrics +
push ebx  +
call edi  +
cdq   +
sub eax edx +
mov esi eax +
push 1  +
sar esi 1 +
call edi  +
push 3  +
pop ecx  +
cdq   +
idiv  ecx +
push ebx  +
push [ebp+hInstance]  +
push ebx  +
push ebx  +
push eax  +
push esi  +
push eax  +
mov eax esi +
cdq   +
sub eax edx +
sar eax 1 +
push eax  +
push 400000h  +
push offset WindowName  +
push offset aStuffBoot  +
push ebx  +
call ds:CreateWindowExA  +
mov esi eax +
cmp esi ebx +
jnz loc_1002C0C  +
xor eax eax +
jmp loc_1002C26  +
cmp dword_100615C ebx +
jnz loc_1002C24  +
push 1  +
push esi  +
call ds:ShowWindow  +
push esi  +
call ds:UpdateWindow  +
mov eax esi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 94h +
mov eax dword_1006114 +
xor eax ebp +
mov [ebp-4] eax +
push ebx  +
mov ebx ds:LocalAlloc +
push esi  +
push dword ptr [ebp+0Ch]  +
mov esi [ebp+8] +
push 2  +
mov [ebp-94h] esi +
call ebx  +
mov hMem eax +
test eax eax +
jnz loc_1002C70  +
push 6  +
pop eax  +
jmp loc_1002E29  +
push edi  +
push eax  +
call ds:LocalLock  +
mov edi eax +
test edi edi +
jnz loc_1002C85  +
push 6  +
jmp loc_1002E27  +
push esi  +
push dword ptr [ebp+0Ch]  +
push edi  +
push (offset aB+2)  +
push 0  +
push dword_100614C  +
call ds:GetPrivateProfileStringA  +
mov esi eax +
test esi esi +
ja loc_1002CC7  +
push hMem  +
call ds:LocalUnlock  +
push hMem  +
call ds:LocalFree  +
mov hMem eax +
push 5  +
jmp loc_1002E27  +
mov byte ptr [esi+edi] 0 +
inc esi  +
mov byte ptr [esi+edi] 0 +
push hMem  +
mov edi ds:LocalUnlock +
call edi  +
push 2  +
inc esi  +
push esi  +
push hMem  +
call ds:LocalReAlloc  +
test eax eax +
jz loc_1002C7E  +
push dword ptr [ebp+0Ch]  +
mov hMem eax +
push 2  +
call ebx  +
push hMem  +
mov dword_100616C eax +
test eax eax +
jnz loc_1002D1D  +
call ds:LocalFree  +
mov hMem eax +
jmp loc_1002C7E  +
***
mov esi ds:LocalLock +
call esi  +
mov [ebp-88h] eax +
test eax eax +
jz loc_1002C7E  +
push dword_100616C  +
call esi  +
mov [ebp-8Ch] eax +
mov esi eax +
test eax eax +
jnz loc_1002D54  +
push dword_100616C  +
call edi  +
jmp loc_1002C7E  +
***
mov ebx ds:lstrlenA +
jmp loc_1002DD9  +
push dword ptr [ebp-94h]  +
lea eax [ebp-84h] +
push 80h  +
push eax  +
push (offset aB+2)  +
push dword ptr [ebp-88h]  +
push dword_100614C  +
call ds:GetPrivateProfileStringA  +
test eax eax +
jbe loc_1002E39  +
lea eax [ebp-84h] +
push eax  +
push eax  +
call ds:CharToOemA  +
lea eax [ebp-84h] +
push eax  +
mov eax [ebp-8Ch] +
sub eax esi +
add eax [ebp+0Ch] +
push eax  +
push esi  +
call sub_1001660  +
test eax eax +
jl loc_1002E53  +
mov eax [ebp-88h] +
mov ecx [ebp-90h] +
lea eax [eax+ecx+1] +
push esi  +
mov [ebp-88h] eax +
call ebx  +
lea esi [esi+eax+1] +
push dword ptr [ebp-88h]  +
call ebx  +
mov [ebp-90h] eax +
test eax eax +
jnz loc_1002D5C  +
mov byte ptr [esi] 0 +
push hMem  +
call edi  +
push dword_100616C  +
call edi  +
sub esi [ebp-8Ch] +
push 2  +
inc esi  +
push esi  +
push dword_100616C  +
call ds:LocalReAlloc  +
test eax eax +
jz loc_1002C7E  +
mov dword_100616C eax +
push 0Dh  +
pop eax  +
pop edi  +
mov ecx [ebp-4] +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1004BED  +
leave   +
retn 8  +
***
push hMem  +
call edi  +
push dword_100616C  +
call edi  +
call sub_1002346  +
jmp loc_1002CC0  +
***
push 1  +
call ds:ExitProcess  +
mov edi edi +
push ebp  +
mov ebp esp +
lea eax [ebp+hKey] +
push eax  +
push [ebp+hKey]  +
push 80000000h  +
call ds:RegCreateKeyA  +
test eax eax +
jz loc_1002E90  +
xor eax eax +
push eax  +
push eax  +
push eax  +
push 10h  +
push 1  +
push 0Ch  +
call sub_10025D0  +
xor eax eax +
jmp loc_1002E9E  +
push [ebp+hKey]  +
call ds:RegCloseKey  +
test eax eax +
jnz loc_1002E7C  +
inc eax  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+lpSubKey]  +
call ds:lstrlenA  +
push eax  +
push [ebp+lpData]  +
push 1  +
push [ebp+lpSubKey]  +
push 80000000h  +
call ds:RegSetValueA  +
test eax eax +
jz loc_1002EE1  +
xor eax eax +
push eax  +
push eax  +
push eax  +
push 10h  +
push 1  +
push 0Ch  +
call sub_10025D0  +
xor eax eax +
jmp loc_1002EE4  +
xor eax eax +
inc eax  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+cbValue] +
push esi  +
mov esi [ebp+arg_4] +
mov [ebp+cbValue] eax +
test esi esi +
jz loc_1002F07  +
test eax eax +
jz loc_1002F07  +
mov byte ptr [esi] 0 +
push [ebp+hKey]  +
call sub_10024ED  +
test eax eax +
jnz loc_1002F17  +
xor eax eax +
jmp loc_1002F44  +
lea eax [ebp+cbValue] +
push eax  +
push esi  +
push [ebp+hKey]  +
push 80000000h  +
call ds:RegQueryValueA  +
test eax eax +
jz loc_1002F41  +
push 0  +
push 0  +
push 0  +
push 10h  +
push 1  +
push 0Ch  +
call sub_10025D0  +
jmp loc_1002F13  +
xor eax eax +
inc eax  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 210h +
mov eax dword_1006114 +
xor eax ebp +
mov [ebp+var_4] eax +
and [ebp+hKey] 0 +
push ebx  +
push esi  +
mov esi [ebp+lpString] +
push esi  +
call ds:lstrlenA  +
mov ebx 104h +
cmp eax ebx +
jge loc_100305E  +
push esi  +
push ebx  +
lea eax [ebp+SubKey] +
push eax  +
call sub_1001660  +
test eax eax +
jge loc_1002F9D  +
push 1  +
call ds:ExitProcess  +
push edi  +
lea eax [ebp+SubKey] +
push eax  +
mov edi 80000000h +
push edi  +
call ds:RegDeleteKeyA  +
lea eax [ebp+SubKey] +
push eax  +
call ds:lstrlenA  +
lea esi [ebp+eax+SubKey] +
jmp loc_1002FCD  +
cmp byte ptr [esi] 5Ch +
jz loc_1002FDC  +
dec esi  +
lea eax [ebp+SubKey] +
cmp esi eax +
ja loc_1002FC7  +
cmp byte ptr [esi] 5Ch +
jnz loc_1003048  +
lea eax [ebp+hKey] +
push eax  +
push 20019h  +
push 0  +
lea eax [ebp+SubKey] +
push eax  +
push edi  +
mov byte ptr [esi] 0 +
call ds:RegOpenKeyExA  +
test eax eax +
jnz loc_1003048  +
push ebx  +
lea eax [ebp+Name] +
push eax  +
push 0  +
push [ebp+hKey]  +
call ds:RegEnumKeyA  +
test eax eax +
jz loc_1003048  +
push [ebp+hKey]  +
call ds:RegCloseKey  +
and [ebp+hKey] 0 +
lea eax [ebp+SubKey] +
push eax  +
push edi  +
call ds:RegDeleteKeyA  +
lea eax [ebp+SubKey] +
cmp esi eax +
ja loc_1002FB1  +
cmp [ebp+hKey] 0 +
pop edi  +
jz loc_100305E  +
push [ebp+hKey]  +
call ds:RegCloseKey  +
mov ecx [ebp+var_4] +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1004BED  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 104h +
mov eax dword_1006114 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
xor ebx ebx +
push ebx  +
push ebx  +
mov esi 100h +
push esi  +
lea eax [ebp+var_104] +
push eax  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push edi  +
call _splitpath_s  +
add esp 24h +
cmp [ebp+var_104] bl +
jnz loc_10030D2  +
push offset aStf  +
push esi  +
lea eax [ebp+var_104] +
push eax  +
call sub_1001660  +
test eax eax +
jge loc_10030D2  +
push 1  +
call ds:ExitProcess  +
push offset a_000  +
push esi  +
lea eax [ebp+var_104] +
push eax  +
call sub_100169A  +
test eax eax +
jl loc_10030CA  +
lea eax [ebp+var_104] +
push eax  +
push edi  +
call ds:rename  +
push edi  +
call ds:remove  +
mov ecx [ebp+var_4] +
add esp 0Ch +
pop edi  +
xor eax eax +
pop esi  +
xor ecx ebp +
inc eax  +
pop ebx  +
call sub_1004BED  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
push edi  +
push ebx  +
mov dword ptr [ebp+var_4] 5C3A20h +
call loc_10028A8  +
mov al [ebx] +
mov [ebp+var_4] al +
lea eax [ebp+var_4] +
push eax  +
call ds:_chdir  +
mov esi ds:SetFileAttributesA +
pop ecx  +
mov edi 80h +
push edi  +
push ebx  +
call esi  +
and [ebp+arg_0] 0 +
push ebx  +
call ds:_rmdir  +
pop ecx  +
test eax eax +
jz loc_100316D  +
inc [ebp+arg_0]  +
cmp [ebp+arg_0] 4B0h +
jl loc_1003155  +
mov eax [ebp+arg_4] +
push edi  +
push ebx  +
mov byte ptr [eax] 0 +
call esi  +
xor esi esi +
push ebx  +
call ds:_rmdir  +
pop ecx  +
test eax eax +
jz loc_100318E  +
inc esi  +
cmp esi 4B0h +
jl loc_1003179  +
mov eax [ebp+arg_4] +
pop edi  +
pop esi  +
mov byte ptr [eax] 5Ch +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 28Ch +
mov eax dword_1006114 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
and [ebp+var_28C] 0 +
push ebx  +
mov ebx ds:lstrlenA +
push esi  +
push edi  +
mov edi [ebp+lpString] +
mov [ebp+var_280] eax +
mov eax [ebp+arg_8] +
push edi  +
mov dword ptr [ebp+var_270] edi +
mov [ebp+var_288] eax +
mov [ebp+var_274] 0Dh +
call ebx  +
add eax 0Eh +
mov esi 0A0h +
cmp eax esi +
jbe loc_1003201  +
push 6  +
pop eax  +
jmp loc_1003670  +
push edi  +
push offset aS_mssetup__q_  +
lea eax [ebp+szDst] +
push esi  +
push eax  +
call sub_10016F3  +
add esp 10h +
test eax eax +
jge loc_1003223  +
push 1  +
call ds:ExitProcess  +
lea eax [ebp+szDst] +
push 180h  +
push eax  +
call ds:_chmod  +
lea eax [ebp+szDst] +
push eax  +
call ds:remove  +
add esp 0Ch +
push esi  +
lea eax [ebp+szDst] +
push eax  +
push eax  +
call ds:OemToCharBuffA  +
push 1001h  +
lea eax [ebp+ReOpenBuff] +
push eax  +
lea eax [ebp+szDst] +
push eax  +
call ds:OpenFile  +
mov edi eax +
lea eax [ebp+szDst] +
push eax  +
push eax  +
call ds:CharToOemA  +
cmp edi 0FFFFFFFFh +
jnz loc_1003289  +
push 4  +
jmp loc_10031FB  +
push edi  +
call ds:_lclose  +
push hMem  +
mov edi ds:LocalLock +
call edi  +
mov [ebp+var_278] eax +
test eax eax +
jz loc_10031F9  +
push dword_100616C  +
call edi  +
mov [ebp+var_27C] eax +
test eax eax +
jnz loc_10032CF  +
push hMem  +
call ds:LocalUnlock  +
jmp loc_10031F9  +
mov edi [ebp+var_278] +
push edi  +
call ebx  +
mov [ebp+var_284] eax +
test eax eax +
jz loc_10034B6  +
jmp loc_10032EE  +
mov edi [ebp+var_278] +
mov al [edi+1] +
cmp al 3Ah +
jnz loc_10032FB  +
cmp byte ptr [edi+2] 5Ch +
jz loc_1003304  +
cmp byte ptr [edi] 5Ch +
jnz loc_100330D  +
cmp al 5Ch +
jnz loc_100330D  +
mov byte ptr [ebp+var_144] 0 +
jmp loc_1003338  +
push [ebp+var_280]  +
call ebx  +
cmp eax esi +
jge loc_10031F9  +
push [ebp+var_280]  +
lea eax [ebp+var_144] +
push esi  +
push eax  +
call sub_1001660  +
test eax eax +
jl loc_100321B  +
push edi  +
call ebx  +
mov edi eax +
lea eax [ebp+var_144] +
push eax  +
call ebx  +
add edi eax +
cmp edi esi +
jnb loc_10031F9  +
push [ebp+var_278]  +
lea eax [ebp+var_144] +
push esi  +
push eax  +
call sub_100169A  +
test eax eax +
jl loc_100321B  +
push dword ptr [ebp+var_270]  +
call ebx  +
push [ebp+var_27C]  +
mov edi eax +
call ebx  +
lea eax [edi+eax+1] +
cmp eax esi +
jnb loc_10031F9  +
push [ebp+var_27C]  +
lea eax [ebp+szDst] +
push dword ptr [ebp+var_270]  +
push offset dword_100126C  +
push esi  +
push eax  +
call sub_10016F3  +
add esp 14h +
test eax eax +
jl loc_100321B  +
lea eax [ebp+szDst] +
push eax  +
push offset aAttribR  +
sub esp 88h +
push 22h  +
pop ecx  +
mov edi esp +
lea esi [ebp+ReOpenBuff] +
movs   +
call sub_1001FB2  +
test eax eax +
jz loc_10034A7  +
lea eax [ebp+szDst] +
push eax  +
push offset aDel  +
sub esp 88h +
push 22h  +
pop ecx  +
mov edi esp +
lea esi [ebp+ReOpenBuff] +
movs   +
call sub_1001FB2  +
test eax eax +
jz loc_10034A7  +
mov esi [ebp+var_278] +
cmp byte ptr [esi] 40h +
jnz loc_100342A  +
cmp byte_1006880 0 +
jz loc_100349B  +
mov [ebp+var_28C] 1 +
jmp loc_1003460  +
lea eax [ebp+szDst] +
push eax  +
lea eax [ebp+var_144] +
push eax  +
call sub_1002A59  +
movzx eax ax +
mov [ebp+var_274] eax +
cmp ax 0Dh +
jnz loc_10034B1  +
lea eax [ebp+szDst] +
push 100h  +
push eax  +
call ds:_chmod  +
pop ecx  +
pop ecx  +
mov eax [ebp+var_284] +
mov edi [ebp+var_27C] +
lea esi [esi+eax+1] +
push edi  +
mov [ebp+var_278] esi +
call ebx  +
lea eax [edi+eax+1] +
push esi  +
mov [ebp+var_27C] eax +
call ebx  +
mov [ebp+var_284] eax +
mov esi 0A0h +
test eax eax +
jnz loc_10032E8  +
jmp loc_10034B6  +
mov [ebp+var_274] 3 +
jmp loc_10034B1  +
mov [ebp+var_274] 7 +
mov esi 0A0h +
push hMem  +
mov edi ds:LocalUnlock +
call edi  +
push dword_100616C  +
call edi  +
push dword ptr [ebp+var_270]  +
call ebx  +
add eax 0Eh +
cmp eax esi +
ja loc_10031F9  +
push dword ptr [ebp+var_270]  +
lea eax [ebp+szDst] +
push offset aS_mssetup__q_  +
push esi  +
push eax  +
call sub_10016F3  +
add esp 10h +
test eax eax +
jl loc_100321B  +
mov eax [ebp+var_288] +
push dword ptr [ebp+var_270]  +
mov byte ptr [eax] 0 +
call ebx  +
cmp eax esi +
jnb loc_10031F9  +
push dword ptr [ebp+var_270]  +
lea eax [ebp+var_1E4] +
push esi  +
push eax  +
call sub_1001660  +
test eax eax +
jl loc_100321B  +
cmp word ptr [ebp+var_274] 0Dh +
mov eax [ebp+var_288] +
mov byte ptr [eax] 5Ch +
jnz loc_10035CE  +
lea eax [ebp+szDst] +
push eax  +
push offset aDel  +
sub esp 88h +
push 22h  +
pop ecx  +
mov edi esp +
lea esi [ebp+ReOpenBuff] +
movs   +
call sub_1001FB2  +
test eax eax +
jz loc_10035C1  +
push dword ptr [ebp+var_270]  +
mov ebx offset aRmdir +
push ebx  +
sub esp 88h +
push 22h  +
pop ecx  +
mov edi esp +
lea esi [ebp+ReOpenBuff] +
movs   +
call sub_1001FB2  +
test eax eax +
jz loc_10035C1  +
lea eax [ebp+var_1E4] +
push eax  +
push ebx  +
sub esp 88h +
push 22h  +
pop ecx  +
mov edi esp +
lea esi [ebp+ReOpenBuff] +
movs   +
call sub_1001FB2  +
test eax eax +
jnz loc_10035C8  +
push 7  +
jmp loc_10031FB  +
mov edi ds:LocalUnlock +
cmp [ebp+var_28C] 0 +
jz loc_1003669  +
cmp word ptr [ebp+var_274] 0Dh +
jnz loc_1003669  +
push hMem  +
mov esi ds:LocalLock +
call esi  +
mov ebx eax +
test ebx ebx +
jz loc_10031F9  +
push dword_100616C  +
call esi  +
test eax eax +
jnz loc_100361A  +
push hMem  +
call edi  +
jmp loc_10031F9  +
lea ecx [ebp+szDst] +
push ecx  +
push offset sz  +
push eax  +
push ebx  +
push dword ptr [ebp+var_270]  +
push [ebp+var_280]  +
push dword_1006C00  +
push dword_1006860  +
push offset byte_1006880  +
push hWnd  +
call sub_1001C1F  +
push hMem  +
movzx eax ax +
mov [ebp+var_274] eax +
call edi  +
push dword_100616C  +
call edi  +
mov ax word ptr [ebp+var_274] +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1004BED  +
leave   +
retn 0Ch  +
***
mov edi edi +
push esi  +
mov esi offset hKey +
push esi  +
call sub_1002E61  +
test eax eax +
jnz loc_100369A  +
pop esi  +
retn   +
push offset Data  +
push esi  +
call sub_1002EA7  +
neg eax  +
sbb eax eax +
neg eax  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 108h +
mov eax dword_1006114 +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
push 104h  +
lea eax [ebp+var_108] +
push eax  +
mov edi offset hKey +
push edi  +
call sub_1002EED  +
test eax eax +
jz loc_1003701  +
lea eax [ebp+var_108] +
push eax  +
call ds:atoi  +
pop ecx  +
push edi  +
mov [esi] eax +
call sub_1002F4E  +
xor eax eax +
jmp loc_100370D  +
xor eax eax +
cmp dword_1006164 eax +
jz loc_100370E  +
and [esi] eax +
inc eax  +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_1004BED  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 158h +
mov eax dword_1006114 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_4] +
mov ecx [ebp+lpPathName] +
push ebx  +
push esi  +
push edi  +
push 20h  +
pop ebx  +
mov [ebp+var_14C] eax +
xor eax eax +
push eax  +
push ecx  +
mov [ebp+var_158] ecx +
mov edi ebx +
mov [ebp+var_148] ebx +
lea esi [ebp+PathName] +
mov [ebp+var_134] eax +
mov [ebp+var_130] 5 +
mov [ebp+var_13C] eax +
mov [ebp+var_140] 1 +
mov [ebp+var_150] eax +
mov [ebp+var_154] eax +
call ds:_lopen  +
mov [ebp+hFile] eax +
cmp eax 0FFFFFFFFh +
jnz loc_10037A7  +
push 12h  +
pop eax  +
jmp loc_1003A10  +
cmp edi [ebp+var_148] +
jnz loc_10037D0  +
push ebx  +
lea eax [ebp+Buffer] +
push eax  +
push [ebp+hFile]  +
call ds:_lread  +
mov [ebp+var_148] eax +
test eax eax +
jz loc_100388D  +
xor edi edi +
cmp edi ebx +
jnb loc_100388D  +
mov al byte ptr [ebp+edi+Buffer] +
inc edi  +
cmp [ebp+var_134] 11h +
mov [ebp+TestChar] al +
jnb loc_1003811  +
mov ecx [ebp+var_134] +
movsx ecx byte_1006100[ecx] +
movzx eax al +
cmp eax ecx +
jnz loc_1003808  +
inc [ebp+var_134]  +
jmp loc_1003882  +
and [ebp+var_134] 0 +
jmp loc_1003882  +
cmp [ebp+var_13C] 0 +
jz loc_1003823  +
and [ebp+var_13C] 0 +
jmp loc_100383B  +
cmp al 22h +
jnz loc_1003833  +
mov [ebp+var_13C] 1 +
jmp loc_1003882  +
cmp al 0Dh +
jz loc_100388D  +
cmp al 9 +
jz loc_100388D  +
push dword ptr [ebp+TestChar]  +
mov [esi] al +
inc esi  +
call ds:IsDBCSLeadByte  +
test eax eax +
jz loc_1003882  +
cmp edi [ebp+var_148] +
jnz loc_1003876  +
push 1  +
lea eax [ebp+TestChar] +
push eax  +
push [ebp+hFile]  +
call ds:_lread  +
mov al [ebp+TestChar] +
mov [esi] al +
inc esi  +
jmp loc_1003882  +
cmp edi ebx +
jnb loc_100388D  +
mov al byte ptr [ebp+edi+Buffer] +
mov [esi] al +
inc esi  +
inc edi  +
lea eax [ebp+var_28] +
cmp esi eax +
jb loc_10037A7  +
mov edi ds:_lclose +
mov byte ptr [esi] 0 +
cmp byte ptr [ebp+PathName] 0 +
jnz loc_10038AE  +
mov [ebp+var_154] 1 +
jmp loc_10039E3  +
movsx eax byte ptr [ebp+PathName] +
push eax  +
call ds:toupper  +
cmp byte ptr [ebp+PathName+1] 3Ah +
pop ecx  +
jnz loc_10038E0  +
mov cl al +
sub cl 41h +
cmp cl 19h +
ja loc_10038E0  +
movsx eax al +
sub eax 41h +
push eax  +
call sub_1001F50  +
mov ebx eax +
jmp loc_10038E3  +
push 3  +
pop ebx  +
lea eax [ebp+PathName] +
push eax  +
push [ebp+arg_8]  +
push [ebp+var_14C]  +
call sub_1001660  +
test eax eax +
jge loc_1003904  +
push 1  +
call ds:ExitProcess  +
push esi  +
lea eax [ebp+PathName] +
push eax  +
call ds:CharPrevA  +
cmp byte ptr [eax] 5Ch +
jz loc_100391E  +
mov byte ptr [esi] 5Ch +
mov byte ptr [esi+1] 0 +
push offset aSetup_ini  +
push 106h  +
lea eax [ebp+PathName] +
push eax  +
call sub_100169A  +
test eax eax +
jl loc_10038FC  +
mov eax ebx +
dec eax  +
jz loc_1003975  +
sub eax 3 +
jz loc_100396E  +
dec eax  +
jz loc_1003975  +
xor eax eax +
cmp [ebp+var_140] eax +
jnz loc_10039A5  +
push eax  +
push eax  +
push [ebp+var_14C]  +
push 10h  +
push 1  +
push 11h  +
call sub_10025D0  +
mov [ebp+var_130] 13h +
jmp loc_10039E3  +
mov eax offset byte_1006CA0 +
jmp loc_100397A  +
mov eax offset byte_1006C20 +
xor ecx ecx +
push ecx  +
cmp [ebp+var_140] ecx +
jz loc_100398E  +
push ecx  +
push eax  +
push 31h  +
push ecx  +
push 10h  +
jmp loc_100399B  +
push eax  +
lea eax [ebp+PathName] +
push eax  +
push 31h  +
push ecx  +
push 0Eh  +
call sub_10025D0  +
cmp eax 1 +
jnz loc_1003A21  +
xor esi esi +
push esi  +
lea eax [ebp+PathName] +
push eax  +
call ds:_lopen  +
cmp eax 0FFFFFFFFh +
jz loc_10039C7  +
push eax  +
call edi  +
mov [ebp+var_150] 1 +
mov [ebp+var_140] esi +
cmp [ebp+var_150] esi +
jz loc_1003938  +
mov [ebp+var_130] 0Dh +
push [ebp+hFile]  +
call edi  +
cmp [ebp+var_154] 0 +
jz loc_1003A09  +
push [ebp+var_158]  +
call sub_1003073  +
mov [ebp+var_130] 12h +
mov ax word ptr [ebp+var_130] +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1004BED  +
leave   +
retn 0Ch  +
mov [ebp+var_130] 0Fh +
jmp loc_10039E3  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_4] +
movsx eax byte ptr [ebx] +
sub eax 40h +
push eax  +
call sub_10020D8  +
cmp eax dword_1006DC0 +
jge loc_1003A54  +
push 7  +
pop eax  +
jmp loc_1003AA3  +
push edi  +
mov edi [ebp+arg_8] +
push edi  +
push ebx  +
call sub_100276C  +
test eax eax +
jnz loc_1003A68  +
push 4  +
pop eax  +
jmp loc_1003AA2  +
push esi  +
push edi  +
push ebx  +
push [ebp+arg_0]  +
call sub_10031A0  +
movzx esi ax +
cmp si 0Dh +
jz loc_1003A88  +
push edi  +
push ebx  +
call sub_1003119  +
mov ax si +
jmp loc_1003AA1  +
mov esi ds:SetFileAttributesA +
push 3  +
push ebx  +
call esi  +
push 3  +
push ebx  +
mov byte ptr [edi] 0 +
call esi  +
push 0Dh  +
mov byte ptr [edi] 5Ch +
pop eax  +
pop esi  +
pop edi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 71Ch +
mov eax dword_1006114 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
mov ebx [ebp+lpCmdLine] +
push esi  +
mov esi [ebp+hInstance] +
push edi  +
push 9Ch  +
lea eax [ebp+var_A0] +
push 0  +
push eax  +
mov [ebp+uMode] esi +
mov [ebp+var_70C] ebx +
mov dword ptr [ebp+szDst] 5C3A20h +
call memset  +
and [ebp+hWnd] 0 +
add esp 0Ch +
mov edi 104h +
push edi  +
push offset Text  +
push 14h  +
mov hInstance esi +
push esi  +
mov esi ds:LoadStringA +
mov sz 0 +
call esi  +
test eax eax +
jz loc_1003B49  +
push edi  +
push offset Caption  +
push 15h  +
push hInstance  +
call esi  +
test eax eax +
jz loc_1003B49  +
push edi  +
push offset byte_1006388  +
push 16h  +
push hInstance  +
call esi  +
cmp byte ptr [ebx] 0 +
mov edi ds:toupper +
mov esi ebx +
jz loc_1003B94  +
mov al [esi] +
cmp al 2Dh +
jz loc_1003B60  +
cmp al 2Fh +
jnz loc_1003B7A  +
movsx eax byte ptr [esi+1] +
push eax  +
call edi  +
pop ecx  +
cmp eax 51h +
jnz loc_1003B7A  +
movsx eax byte ptr [esi+2] +
push eax  +
call edi  +
pop ecx  +
cmp eax 54h +
jz loc_1003B8A  +
push esi  +
call ds:CharNextA  +
mov esi eax +
cmp byte ptr [esi] 0 +
jnz loc_1003B56  +
jmp loc_1003B94  +
mov dword_100615C 1 +
xor esi esi +
cmp [ebp+hPrevInstance] esi +
jnz loc_10048BC  +
push esi  +
push offset aStuffBoot  +
call ds:FindWindowA  +
test eax eax +
jnz loc_10048BC  +
mov edi 0A0h +
push edi  +
lea eax [ebp+String] +
push eax  +
push [ebp+uMode]  +
call ds:GetModuleFileNameA  +
mov al [ebx] +
cmp al 2Dh +
jz loc_1003BDA  +
cmp al 2Fh +
jnz loc_1003C69  +
movsx eax byte ptr [ebx+1] +
push eax  +
call ds:toupper  +
pop ecx  +
cmp eax 4Dh +
jnz loc_1003C69  +
add ebx 2 +
jmp loc_1003BF1  +
inc ebx  +
cmp byte ptr [ebx] 20h +
jz loc_1003BF0  +
xor eax eax +
cmp byte ptr [ebx] 22h +
setz al  +
mov esi eax +
test esi esi +
jz loc_1003C05  +
inc ebx  +
push ebx  +
push edi  +
lea eax [ebp+String] +
push eax  +
call sub_1001660  +
test eax eax +
jge loc_1003C1F  +
push 1  +
call ds:ExitProcess  +
lea eax [ebp+String] +
mov cl [eax] +
cmp cl 20h +
jnz loc_1003C30  +
test esi esi +
jz loc_1003C40  +
cmp cl 22h +
jnz loc_1003C39  +
test esi esi +
jnz loc_1003C40  +
test cl cl +
jz loc_1003C40  +
inc eax  +
jmp loc_1003C25  +
mov byte ptr [eax] 0 +
lea eax [ebp+String] +
push eax  +
call ds:lstrlenA  +
add eax ebx +
test esi esi +
jz loc_1003C5C  +
cmp byte ptr [eax] 22h +
jnz loc_1003C5C  +
inc eax  +
cmp byte ptr [eax] 20h +
jz loc_1003C5B  +
mov ebx eax +
mov [ebp+var_70C] eax +
push edi  +
lea eax [ebp+String] +
push eax  +
push eax  +
call ds:OemToCharBuffA  +
cmp [ebp+String] 0 +
jz loc_1003CD0  +
cmp [ebp+String] 5Ch +
jz loc_1003CD0  +
mov esi ds:CharNextA +
lea eax [ebp+String] +
push eax  +
call esi  +
cmp byte ptr [eax] 3Ah +
jnz loc_1003CD6  +
push eax  +
call esi  +
cmp byte ptr [eax] 5Ch +
mov [ebp+var_710] eax +
jnz loc_1003CD6  +
push eax  +
call esi  +
cmp byte ptr [eax] 5Ch +
jnz loc_1003CD6  +
push [ebp+var_710]  +
lea eax [ebp+String] +
push edi  +
push eax  +
call sub_1001660  +
test eax eax +
jge loc_1003CD6  +
jmp loc_1003C17  +
mov esi ds:CharNextA +
lea eax [ebp+String] +
push eax  +
call ds:lstrlenA  +
mov [ebp+var_710] eax +
lea eax [ebp+String] +
push eax  +
push edi  +
lea eax [ebp+szCurrent] +
push eax  +
call sub_1001660  +
test eax eax +
jl loc_1003C17  +
mov eax [ebp+var_710] +
lea eax [ebp+eax+szCurrent] +
jmp loc_1003D27  +
cmp byte ptr [eax] 5Ch +
jz loc_1003D31  +
push eax  +
lea eax [ebp+szCurrent] +
push eax  +
call ds:CharPrevA  +
lea ecx [ebp+szCurrent] +
cmp eax ecx +
ja loc_1003D14  +
push eax  +
call esi  +
mov byte ptr [eax] 0 +
lea eax [ebp+szCurrent] +
push 20h  +
push eax  +
call ds:strchr  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1003DB3  +
lea eax [ebp+szCurrent] +
push eax  +
call ds:lstrlenA  +
add eax 3 +
cmp eax edi +
jnb loc_1003DB3  +
lea eax [ebp+szCurrent] +
push eax  +
push offset aS  +
lea eax [ebp+var_564] +
push edi  +
push eax  +
call sub_10016F3  +
add esp 10h +
test eax eax +
jl loc_1003C17  +
mov [ebp+CmdLine] 0 +
mov al [ebx] +
cmp al 2Dh +
jz loc_1003D99  +
cmp al 2Fh +
jnz loc_1003EC3  +
movsx eax byte ptr [ebx+1] +
push eax  +
call ds:toupper  +
pop ecx  +
cmp eax 4Ch +
jnz loc_1003E2F  +
lea esi [ebx+2] +
jmp loc_1003DCE  +
lea eax [ebp+szCurrent] +
push eax  +
push edi  +
lea eax [ebp+var_564] +
push eax  +
call sub_1001660  +
jmp loc_1003D7C  +
test al al +
jz loc_1003DD4  +
inc esi  +
mov al [esi] +
cmp al 20h +
jz loc_1003DC9  +
push esi  +
push edi  +
lea eax [ebp+CmdLine] +
push eax  +
call sub_1001660  +
test eax eax +
jl loc_1003C17  +
cmp [ebp+CmdLine] 20h +
lea eax [ebp+CmdLine] +
jz loc_1003E04  +
cmp byte ptr [eax] 0 +
jz loc_1003E04  +
inc eax  +
cmp byte ptr [eax] 20h +
jnz loc_1003DF9  +
mov byte ptr [eax] 0 +
lea eax [ebp+CmdLine] +
push eax  +
call ds:lstrlenA  +
add esi eax +
jmp loc_1003E1D  +
test al al +
jz loc_1003E23  +
inc esi  +
mov al [esi] +
cmp al 20h +
jz loc_1003E18  +
mov [ebp+var_70C] esi +
mov esi ds:CharNextA +
cmp [ebp+CmdLine] 0 +
jz loc_1003EC3  +
lea eax [ebp+CmdLine] +
push eax  +
lea eax [ebp+szCurrent] +
push eax  +
push offset dword_1001274  +
lea eax [ebp+FileName] +
push edi  +
push eax  +
call sub_10016F3  +
add esp 14h +
test eax eax +
jl loc_1003C17  +
lea eax [ebp+var_714] +
push eax  +
lea eax [ebp+FileName] +
push eax  +
call sub_10022F4  +
xor esi esi +
test eax eax +
jz loc_100489A  +
cmp [ebp+var_714] esi +
jz loc_100489A  +
mov lpAppName esi +
mov dword_100614C esi +
call sub_10024D0  +
mov esi eax +
call ds:GetVersion  +
movzx edi al +
shr eax 8 +
movzx ebx al +
cmp esi 0Ah +
jnb loc_1003F28  +
mov esi off_10060C8[esi*4] +
jmp loc_1003F54  +
lea eax [ebp+String] +
push eax  +
push edi  +
lea eax [ebp+FileName] +
push eax  +
call sub_1001660  +
test eax eax +
jl loc_1003C17  +
mov eax [ebp+var_710] +
lea eax [ebp+eax+FileName] +
jmp loc_1003F01  +
cmp byte ptr [eax] 2Eh +
jz loc_1003F0B  +
push eax  +
lea eax [ebp+FileName] +
push eax  +
call ds:CharPrevA  +
lea ecx [ebp+FileName] +
cmp eax ecx +
ja loc_1003EEE  +
push eax  +
call esi  +
push offset unk_1006000  +
mov byte ptr [eax] 0 +
push edi  +
lea eax [ebp+FileName] +
push eax  +
call sub_100169A  +
jmp loc_1003E5F  +
mov esi offset unk_1006150 +
jmp loc_1003F54  +
movzx ecx byte ptr [esi] +
cmp ecx edi +
jb loc_1003F40  +
jnz loc_1003F51  +
movzx ecx byte ptr [esi+1] +
cmp ecx ebx +
ja loc_1003F51  +
push eax  +
lea eax [ebp+FileName] +
push eax  +
call sub_100249A  +
test eax eax +
jnz loc_1003F5D  +
add esi 0Ch +
mov eax [esi+4] +
test eax eax +
jnz loc_1003F2F  +
jmp loc_1003F6D  +
mov eax [esi+4] +
mov lpAppName eax +
mov eax [esi+8] +
mov dword_100614C eax +
cmp lpAppName 0 +
jnz loc_1003FA0  +
mov esi offset AppName +
push esi  +
lea eax [ebp+FileName] +
push eax  +
call sub_100249A  +
test eax eax +
jz loc_10040F2  +
mov lpAppName esi +
mov dword_100614C offset aFiles +
mov edi ds:GetPrivateProfileStringA +
lea eax [ebp+FileName] +
push eax  +
mov esi 80h +
push esi  +
push offset byte_1006DE0  +
mov ebx (offset aB+2) +
push ebx  +
push offset aTmpdirname  +
push lpAppName  +
call edi  +
test eax eax +
jbe loc_100488D  +
lea eax [ebp+FileName] +
push eax  +
push 0  +
push offset aTmpdirsize  +
push lpAppName  +
call ds:GetPrivateProfileIntA  +
shl eax 0Ah +
mov dword_1006DC0 eax +
test eax eax +
jle loc_100488D  +
lea eax [ebp+FileName] +
push eax  +
push 1  +
push offset aFirstcabnum  +
push lpAppName  +
call ds:GetPrivateProfileIntA  +
mov dword_1006860 eax +
test eax eax +
jle loc_100488D  +
lea eax [ebp+FileName] +
push eax  +
push 1  +
push offset aLastcabnum  +
push lpAppName  +
call ds:GetPrivateProfileIntA  +
mov dword_1006C00 eax +
test eax eax +
jle loc_100488D  +
lea eax [ebp+FileName] +
push eax  +
push esi  +
push offset ClassName  +
push ebx  +
push offset aDrvwinclass  +
push lpAppName  +
call edi  +
test eax eax +
jbe loc_100488D  +
lea eax [ebp+FileName] +
push eax  +
push esi  +
push offset ReturnedString  +
push ebx  +
push offset KeyName  +
push lpAppName  +
call edi  +
test eax eax +
jbe loc_100488D  +
lea eax [ebp+FileName] +
push eax  +
push esi  +
push offset WindowName  +
push ebx  +
push offset aWndtitle  +
push lpAppName  +
call edi  +
test eax eax +
jbe loc_100488D  +
lea eax [ebp+FileName] +
push eax  +
push esi  +
push offset byte_1006980  +
push ebx  +
push offset aWndmess  +
push lpAppName  +
call edi  +
test eax eax +
jbe loc_100488D  +
push 0  +
push offset ClassName  +
call ds:FindWindowA  +
test eax eax +
jz loc_1004102  +
xor eax eax +
push eax  +
push eax  +
push eax  +
jmp loc_10048BF  +
xor eax eax +
push eax  +
push eax  +
push eax  +
push 10h  +
push 1  +
push 0Ah  +
jmp loc_10048C5  +
lea eax [ebp+FileName] +
push eax  +
push esi  +
push offset byte_1006880  +
push ebx  +
push offset aCabinetfile  +
push lpAppName  +
call edi  +
lea eax [ebp+FileName] +
push eax  +
push esi  +
push offset byte_1006CA0  +
push ebx  +
push offset aInsertcdmsg  +
push lpAppName  +
call edi  +
lea eax [ebp+FileName] +
push eax  +
push esi  +
push offset byte_1006C20  +
push ebx  +
push offset aInsertdiskmsg  +
push lpAppName  +
call edi  +
cmp byte_10067E0 0 +
jz loc_10041DB  +
call ds:GetVersion  +
cmp al 3 +
jnz loc_10041DB  +
call ds:GetVersion  +
shr eax 8 +
cmp al 0Ah +
jnb loc_10041DB  +
cmp dword_100615C 0 +
jnz loc_10047DD  +
push 100h  +
lea eax [ebp+PathName] +
push eax  +
push 0  +
push hInstance  +
call ds:LoadStringA  +
test eax eax +
jnz loc_10041BC  +
push offset byte_1006388  +
push 104h  +
lea eax [ebp+PathName] +
push eax  +
call sub_1001660  +
test eax eax +
jl loc_1003C17  +
push 10h  +
lea eax [ebp+PathName] +
push eax  +
push offset byte_10067E0  +
push hWnd  +
call ds:MessageBoxA  +
jmp loc_10047DD  +
push esi  +
push offset byte_1006DE0  +
call loc_1002528  +
cmp byte_1006980 0 +
mov eax offset byte_1006980 +
jz loc_1004215  +
cmp byte ptr [eax] 5Ch +
jnz loc_1004209  +
lea ecx [eax+1] +
cmp byte ptr [ecx] 6Eh +
jnz loc_1004209  +
mov byte ptr [eax] 0Dh +
mov eax ecx +
mov byte ptr [eax] 0Ah +
push eax  +
call ds:CharNextA  +
cmp byte ptr [eax] 0 +
jnz loc_10041F4  +
mov eax [ebp+var_70C] +
mov al [eax] +
cmp al 2Dh +
jz loc_1004229  +
cmp al 2Fh +
jnz loc_1004333  +
mov eax [ebp+var_70C] +
movsx eax byte ptr [eax+1] +
push eax  +
call ds:toupper  +
pop ecx  +
cmp eax 57h +
jnz loc_1004333  +
mov ecx [ebp+var_70C] +
add ecx 2 +
jmp loc_1004254  +
test al al +
jz loc_1004260  +
inc ecx  +
mov al [ecx] +
mov [ebp+var_710] ecx +
cmp al 20h +
jz loc_100424F  +
lea eax [ebp+szCurrent] +
push eax  +
push 104h  +
lea eax [ebp+PathName] +
push eax  +
call sub_1001660  +
test eax eax +
jl loc_1003C17  +
lea eax [ebp+PathName] +
push eax  +
call ds:lstrlenA  +
mov ecx [ebp+var_710] +
mov [ebp+var_70C] ecx +
mov cl [ecx] +
lea eax [ebp+eax+PathName] +
cmp cl 20h +
jz loc_10042E4  +
mov [ebp+var_705] cl +
lea edx [ebp+PathName] +
mov ecx eax +
sub ecx edx +
mov dl [ebp+var_705] +
test dl dl +
jz loc_10042E4  +
mov [eax] dl +
inc eax  +
inc ecx  +
cmp ecx 104h +
jnb loc_1003C17  +
inc [ebp+var_70C]  +
mov edx [ebp+var_70C] +
mov dl [edx] +
cmp dl 20h +
jnz loc_10042BD  +
mov byte ptr [eax] 0 +
mov eax [ebp+var_70C] +
mov [ebp+var_70C] eax +
push 0A0h  +
lea eax [ebp+szCurrent] +
push eax  +
lea eax [ebp+PathName] +
push eax  +
call sub_1003723  +
movzx eax ax +
cmp ax 0Dh +
jz loc_1004333  +
cmp ax 13h +
jz loc_10047DD  +
push 0  +
push 0  +
lea ecx [ebp+PathName] +
push ecx  +
push 10h  +
push 1  +
push eax  +
jmp loc_10048C5  +
lea eax [ebp+FileName] +
push eax  +
push esi  +
push offset byte_1006B80  +
push ebx  +
push offset aBackground  +
push lpAppName  +
call edi  +
lea eax [ebp+FileName] +
push eax  +
push esi  +
mov esi offset byte_1006A80 +
push esi  +
push ebx  +
push offset aBkgwinclass  +
push lpAppName  +
call edi  +
cmp byte_1006B80 0 +
mov edi 0A0h +
jz loc_1004475  +
lea eax [ebp+szCurrent] +
push eax  +
push edi  +
lea eax [ebp+CmdLine] +
push eax  +
call sub_1001660  +
test eax eax +
jl loc_1003C17  +
push offset byte_1006B80  +
push edi  +
lea eax [ebp+CmdLine] +
push eax  +
call sub_100169A  +
test eax eax +
jl loc_1003C17  +
cmp byte_1006A80 0 +
jz loc_10043EB  +
push offset aC  +
push edi  +
lea eax [ebp+CmdLine] +
push eax  +
call sub_100169A  +
test eax eax +
jl loc_1003C17  +
push esi  +
push edi  +
lea eax [ebp+CmdLine] +
push eax  +
call sub_100169A  +
test eax eax +
jl loc_1003C17  +
push offset aT  +
push edi  +
lea eax [ebp+CmdLine] +
push eax  +
call sub_100169A  +
test eax eax +
jl loc_1003C17  +
mov ebx offset WindowName +
push ebx  +
push edi  +
lea eax [ebp+CmdLine] +
push eax  +
call sub_100169A  +
test eax eax +
jl loc_1003C17  +
push offset aM  +
push edi  +
lea eax [ebp+CmdLine] +
push eax  +
call sub_100169A  +
test eax eax +
jl loc_1003C17  +
push offset byte_1006980  +
push edi  +
lea eax [ebp+CmdLine] +
push eax  +
call sub_100169A  +
push 1  +
test eax eax +
jl loc_1003C19  +
lea eax [ebp+CmdLine] +
push eax  +
call ds:WinExec  +
push ebx  +
push esi  +
call ds:FindWindowA  +
mov [ebp+hWnd] eax +
test eax eax +
jnz loc_1004497  +
push [ebp+uMode]  +
call sub_1002B74  +
mov hWnd eax +
test eax eax +
jnz loc_1004497  +
push eax  +
push eax  +
push eax  +
push 10h  +
push 1  +
push 6  +
jmp loc_10048C5  +
push [ebp+var_714]  +
lea eax [ebp+FileName] +
push eax  +
call loc_1002C32  +
movzx eax ax +
cmp ax 0Dh +
jz loc_10044BB  +
xor ecx ecx +
push ecx  +
push ecx  +
jmp loc_1004328  +
push offset aMssetup_t  +
push edi  +
lea eax [ebp+szDst] +
push eax  +
call sub_100169A  +
test eax eax +
jl loc_1003C17  +
lea eax [ebp+szDst] +
push eax  +
call ds:lstrlenA  +
lea eax [ebp+eax+szDst] +
push offset dword_1001284  +
mov [ebp+var_714] eax +
push edi  +
lea eax [ebp+szDst] +
push eax  +
call sub_100169A  +
test eax eax +
jl loc_1003C17  +
push offset byte_1006DE0  +
push edi  +
lea eax [ebp+szDst] +
push eax  +
call sub_100169A  +
test eax eax +
jl loc_1003C17  +
lea eax [ebp+szDst] +
push eax  +
push eax  +
call ds:CharToOemA  +
mov ebx ds:SetErrorMode +
mov [ebp+var_705] 5Ah +
push 1  +
call ebx  +
mov [ebp+uMode] eax +
movsx eax [ebp+var_705] +
sub eax 41h +
push eax  +
call sub_1001F50  +
push [ebp+uMode]  +
mov esi eax +
dec esi  +
dec esi  +
neg esi  +
sbb esi esi +
inc esi  +
call ebx  +
test esi esi +
mov esi [ebp+var_714] +
jz loc_10045B5  +
mov al [ebp+var_705] +
mov [ebp+szDst] al +
push esi  +
lea eax [ebp+szDst] +
push eax  +
lea eax [ebp+szCurrent] +
push eax  +
call sub_1003A32  +
movzx eax ax +
cmp ax 0Dh +
jz loc_10045C8  +
cmp ax 3 +
jz loc_10046C2  +
cmp ax 0Bh +
jz loc_10047DD  +
mov edi 0A0h +
dec [ebp+var_705]  +
cmp [ebp+var_705] 41h +
jge loc_100453E  +
cmp [ebp+var_705] 41h +
jge loc_10046D2  +
push edi  +
lea eax [ebp+szDst] +
push eax  +
call ds:GetWindowsDirectoryA  +
mov ebx eax +
lea eax [ebp+szDst] +
push eax  +
call ds:CharUpperA  +
lea eax [ebp+ebx+szDst] +
push eax  +
lea eax [ebp+szDst] +
push eax  +
call ds:CharPrevA  +
cmp byte ptr [eax] 5Ch +
jz loc_1004626  +
push offset dword_1001284  +
push edi  +
lea eax [ebp+szDst] +
push eax  +
call sub_100169A  +
test eax eax +
jl loc_1003C17  +
push offset aMssetup_t  +
push edi  +
lea eax [ebp+szDst] +
push eax  +
call sub_100169A  +
test eax eax +
jl loc_1003C17  +
lea eax [ebp+szDst] +
push eax  +
call ds:lstrlenA  +
push offset dword_1001284  +
lea esi [ebp+eax+szDst] +
push edi  +
lea eax [ebp+szDst] +
push eax  +
call sub_100169A  +
test eax eax +
jl loc_1003C17  +
push offset byte_1006DE0  +
push edi  +
lea eax [ebp+szDst] +
push eax  +
call sub_100169A  +
test eax eax +
jl loc_1003C17  +
lea eax [ebp+szDst] +
push eax  +
push eax  +
call ds:CharToOemA  +
push esi  +
lea eax [ebp+szDst] +
push eax  +
lea eax [ebp+szCurrent] +
push eax  +
call sub_1003A32  +
movzx eax ax +
cmp ax 0Dh +
jz loc_10046D2  +
cmp ax 0Bh +
jz loc_10047DD  +
jmp loc_10044B2  +
xor eax eax +
push eax  +
push eax  +
push eax  +
push 10h  +
push 1  +
push 3  +
jmp loc_10048C5  +
push hMem  +
call ds:LocalFree  +
mov ebx ds:strstr +
push offset aS  +
mov edi offset ReturnedString +
push edi  +
mov hMem eax +
call ebx  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_100486D  +
add eax 4 +
push offset aS_0  +
push eax  +
call ebx  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_100486D  +
push [ebp+var_70C]  +
lea eax [ebp+szCurrent] +
push eax  +
push edi  +
mov edi 1A0h +
lea eax [ebp+var_4C4] +
push edi  +
push eax  +
call sub_10016F3  +
add esp 14h +
test eax eax +
jl loc_1003C17  +
lea eax [ebp+var_4C4] +
push eax  +
lea eax [ebp+szDst] +
push eax  +
push offset dword_100126C  +
lea eax [ebp+uIDEvent] +
push edi  +
push eax  +
call sub_10016F3  +
add esp 14h +
test eax eax +
jl loc_1003C17  +
push 10000h  +
call ds:GlobalCompact  +
xor edi edi +
cmp dword_1006164 edi +
jnz loc_1004785  +
call sub_1003686  +
cmp [ebp+hWnd] edi +
jz loc_10047A4  +
push edi  +
push 105h  +
push 111h  +
push [ebp+hWnd]  +
call ds:SendMessageA  +
push hWnd  +
lea eax [ebp+uIDEvent] +
push eax  +
call sub_1002376  +
test eax eax +
jnz loc_100487E  +
push edi  +
push edi  +
push edi  +
push 10h  +
push 1  +
push 6  +
call sub_10025D0  +
cmp esi edi +
jz loc_10047DD  +
push esi  +
lea eax [ebp+szDst] +
push eax  +
call sub_1003119  +
call sub_1002346  +
xor ebx ebx +
mov dword_10060FC 9 +
cmp dword_1006160 ebx +
jz loc_1004800  +
push offset dword_10060FC  +
call sub_10036B2  +
mov eax hWnd +
cmp eax ebx +
jz loc_1004810  +
push eax  +
call ds:DestroyWindow  +
mov edi [ebp+hWnd] +
cmp edi ebx +
jz loc_1004857  +
mov esi ds:IsWindow +
push edi  +
call esi  +
test eax eax +
jz loc_1004857  +
xor eax eax +
cmp dword_10060FC ebx +
push ebx  +
setnz al  +
add eax 106h +
push eax  +
push 111h  +
push edi  +
call ds:SendMessageA  +
push edi  +
call esi  +
test eax eax +
jz loc_1004857  +
push ebx  +
push ebx  +
push 12h  +
push edi  +
call ds:PostMessageA  +
mov ecx [ebp+var_4] +
mov eax dword_10060FC +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1004BED  +
leave   +
retn 10h  +
push [ebp+var_70C]  +
lea eax [ebp+var_564] +
jmp loc_1004721  +
mov dword_1006160 1 +
jmp loc_10047CC  +
xor eax eax +
push eax  +
push eax  +
push eax  +
push 10h  +
push 1  +
push 5  +
jmp loc_10048C5  +
lea eax [ebp+FileName] +
push eax  +
push edi  +
push offset sz  +
call sub_1001660  +
test eax eax +
jl loc_1003C17  +
push esi  +
push esi  +
push esi  +
jmp loc_10046C7  +
push esi  +
push esi  +
push esi  +
push 10h  +
push 1  +
push 2  +
call sub_10025D0  +
jmp loc_10047DD  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
xor eax eax +
jmp loc_10048F0  +
test eax eax +
jnz loc_10048F5  +
mov ecx [esi] +
test ecx ecx +
jz loc_10048ED  +
call ecx  +
add esi 4 +
cmp esi [ebp+arg_4] +
jb loc_10048E1  +
pop esi  +
pop ebp  +
retn   +
***
mov eax dword_10064B0 +
push offset dword_10064A0  +
push dword_10064AC  +
mov dword_10064A0 eax +
push (offset byte_1006388+108h)  +
push (offset byte_1006388+10Ch)  +
push (offset byte_1006388+104h)  +
call ds:__getmainargs  +
add esp 14h +
mov dword_100649C eax +
retn   +
***
call __SEH_prolog4  +
xor ebx ebx +
mov [ebp+var_1C] ebx +
mov [ebp+ms_exc.disabled] ebx +
lea eax [ebp+StartupInfo] +
push eax  +
call ds:GetStartupInfoA  +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov [ebp+ms_exc.disabled] 1 +
mov eax large fs:18h +
mov esi [eax+4] +
mov edi offset Destination +
push 0  +
push esi  +
push edi  +
call ds:InterlockedCompareExchange  +
test eax eax +
jz loc_1004995  +
cmp eax esi +
jnz loc_1004988  +
xor esi esi +
inc esi  +
mov ebx esi +
jmp loc_1004998  +
push 3E8h  +
call ds:Sleep  +
jmp loc_100496F  +
xor esi esi +
inc esi  +
mov eax dword_1006E68 +
cmp eax esi +
jnz loc_10049AB  +
push 1Fh  +
call _amsg_exit  +
pop ecx  +
jmp loc_10049DA  +
mov eax dword_1006E68 +
test eax eax +
jnz loc_10049D4  +
mov dword_1006E68 esi +
push offset dword_1001240  +
push offset dword_1001234  +
call sub_10048D4  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_10049DA  +
jmp loc_1004B02  +
mov dword_10064A8 esi +
mov eax dword_1006E68 +
cmp eax esi +
jnz loc_10049FE  +
push offset dword_1001230  +
push offset dword_1001228  +
call _initterm  +
pop ecx  +
pop ecx  +
mov dword_1006E68 2 +
test ebx ebx +
jnz loc_1004A0A  +
push ebx  +
push edi  +
call ds:InterlockedExchange  +
cmp dword_1006E70 0 +
jz loc_1004A2E  +
push offset dword_1006E70  +
call sub_1004D09  +
pop ecx  +
test eax eax +
jz loc_1004A2E  +
push 0  +
push 2  +
push 0  +
call dword_1006E70  +
mov eax ds:_acmdln +
mov esi [eax] +
mov [ebp+var_20] esi +
mov al [esi] +
cmp al 20h +
ja $LN61  +
test al al +
jz loc_1004A48  +
cmp [ebp+var_1C] 0 +
jnz $LN61  +
mov al [esi] +
test al al +
jz loc_1004A58  +
cmp al 20h +
ja loc_1004A58  +
inc esi  +
mov [ebp+var_20] esi +
jmp loc_1004A48  +
test byte ptr [ebp+StartupInfo.dwFlags] 1 +
jz loc_1004A64  +
movzx eax [ebp+StartupInfo.wShowWindow] +
jmp loc_1004A67  +
push 0Ah  +
pop eax  +
push eax  +
push esi  +
push 0  +
push 1000000h  +
call _WinMain@16  +
mov dword_10064A4 eax +
cmp dword_1006498 0 +
jnz $LN62  +
push eax  +
call ds:exit  +
cmp al 22h +
jnz loc_1004A99  +
xor ecx ecx +
cmp [ebp+var_1C] ecx +
setz cl  +
mov [ebp+var_1C] ecx +
movzx eax al +
push eax  +
call ds:_ismbblead  +
pop ecx  +
test eax eax +
jz loc_1004AAC  +
inc esi  +
mov [ebp+var_20] esi +
inc esi  +
jmp loc_1004A35  +
mov eax [ebp-14h] +
mov ecx [eax] +
mov ecx [ecx] +
mov [ebp-24h] ecx +
push eax  +
push ecx  +
call _XcptFilter  +
pop ecx  +
pop ecx  +
retn   +
mov esp [ebp-18h] +
mov eax [ebp-24h] +
mov dword_10064A4 eax +
cmp dword_1006498 0 +
jnz $LN62  +
push eax  +
call ds:_exit  +
cmp dword_10064A8 0 +
jnz loc_1004AED  +
call ds:_cexit  +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov eax dword_10064A4 +
jmp loc_1004B0E  +
xor eax eax +
inc eax  +
retn   +
mov esp [ebp-18h] +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov eax 0FFh +
call __SEH_epilog4  +
retn   +
***
mov eax 5A4Dh +
cmp ds:1000000h ax +
jz loc_1004B2B  +
xor eax eax +
jmp loc_1004B78  +
mov eax ds:100003Ch +
lea eax [eax+1000000h] +
cmp dword ptr [eax] 4550h +
jnz loc_1004B27  +
movzx ecx word ptr [eax+18h] +
cmp ecx 10Bh +
jz loc_1004B65  +
cmp ecx 20Bh +
jnz loc_1004B27  +
cmp dword ptr [eax+84h] 0Eh +
jbe loc_1004B27  +
xor ecx ecx +
cmp [eax+0F8h] ecx +
jmp loc_1004B73  +
cmp dword ptr [eax+74h] 0Eh +
jbe loc_1004B27  +
xor ecx ecx +
cmp [eax+0E8h] ecx +
setnz cl  +
mov eax ecx +
push 2  +
mov dword_1006498 eax +
call sub_1004EA2  +
push eax  +
call ds:__set_app_type  +
or dword ptr byte_1006DE0+80h 0FFFFFFFFh +
or dword ptr byte_1006DE0+84h 0FFFFFFFFh +
pop ecx  +
pop ecx  +
call ds:__p__fmode  +
mov ecx dword_10064B8 +
mov [eax] ecx +
call ds:__p__commode  +
mov ecx dword_10064B4 +
mov [eax] ecx +
call sub_1004E34  +
cmp dword_1006124 0 +
jnz loc_1004BD1  +
push offset sub_1004E34  +
call ds:__setusermatherr  +
pop ecx  +
call sub_1004E1C  +
xor eax eax +
retn   +
***
call sub_1004EE1  +
jmp ___tmainCRTStartup  +
***
cmp ecx dword_1006114 +
jnz loc_1004BF8  +
retn 0  +
jmp loc_1004F78  +
***
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov eax [eax] +
cmp dword ptr [eax] 0E06D7363h +
jnz loc_1004C56  +
cmp dword ptr [eax+10h] 3 +
jnz loc_1004C56  +
mov eax [eax+14h] +
cmp eax 19930520h +
jz loc_1004C50  +
cmp eax 19930521h +
jz loc_1004C50  +
cmp eax 19930522h +
jz loc_1004C50  +
cmp eax 1994000h +
jnz loc_1004C56  +
call ds:?terminate@@YAXXZ  +
xor eax eax +
pop ebp  +
retn 4  +
***
push (offset byte_1004C18+1)  +
call ds:SetUnhandledExceptionFilter  +
xor eax eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
mov eax 5A4Dh +
cmp [ecx] ax +
jz loc_1004C96  +
xor eax eax +
pop ebp  +
retn   +
mov eax [ecx+3Ch] +
add eax ecx +
cmp dword ptr [eax] 4550h +
jnz loc_1004C92  +
xor edx edx +
mov ecx 10Bh +
cmp [eax+18h] cx +
setz dl  +
mov eax edx +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [eax+3Ch] +
add ecx eax +
movzx eax word ptr [ecx+14h] +
push ebx  +
push esi  +
movzx esi word ptr [ecx+6] +
xor edx edx +
push edi  +
lea eax [eax+ecx+18h] +
test esi esi +
jbe loc_1004CFD  +
mov edi [ebp+arg_4] +
mov ecx [eax+0Ch] +
cmp edi ecx +
jb loc_1004CF5  +
mov ebx [eax+8] +
add ebx ecx +
cmp edi ebx +
jb loc_1004CFF  +
inc edx  +
add eax 28h +
cmp edx esi +
jb loc_1004CE5  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
call __SEH_prolog4  +
and [ebp+ms_exc.disabled] 0 +
mov esi 1000000h +
push esi  +
call sub_1004C80  +
pop ecx  +
test eax eax +
jz loc_1004D66  +
mov eax [ebp+arg_0] +
sub eax esi +
push eax  +
push esi  +
call sub_1004CC0  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1004D66  +
mov eax [eax+24h] +
shr eax 1Fh +
not eax  +
and eax 1 +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
jmp loc_1004D6F  +
mov eax [ebp-14h] +
mov eax [eax] +
mov eax [eax] +
xor ecx ecx +
cmp eax 0C0000005h +
setz cl  +
mov eax ecx +
retn   +
mov esp [ebp-18h] +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
xor eax eax +
call __SEH_epilog4  +
retn   +
***
mov eax [esp+8+arg_4] +
mov ecx [ebp-10h] +
mov large fs:0 ecx +
pop ecx  +
pop edi  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
push ecx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push offset sub_1004BED  +
push offset dword_1006114  +
call _except_handler4_common  +
add esp 18h +
pop ebp  +
retn   +
***
call ds:_controlfp  +
pop ecx  +
pop ecx  +
retn   +
***
retn   +
***
call __SEH_prolog4  +
xor eax eax +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_1004E95  +
cmp ecx 0FFFFFFFFh +
jz loc_1004E95  +
and [ebp+ms_exc.disabled] eax +
mov edx 5A4Dh +
cmp [ecx] dx +
jnz loc_1004E8E  +
mov edx [ecx+3Ch] +
test edx edx +
jl loc_1004E8E  +
cmp edx 10000000h +
jnb loc_1004E8E  +
lea eax [edx+ecx] +
mov [ebp+var_1C] eax +
cmp dword ptr [eax] 4550h +
jz loc_1004E8E  +
jmp loc_1004E89  +
xor eax eax +
inc eax  +
retn   +
mov esp [ebp-18h] +
xor eax eax +
mov [ebp+var_1C] eax +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
call __SEH_epilog4  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
call ds:GetModuleHandleA  +
test eax eax +
jz loc_1004ED7  +
push eax  +
call sub_1004E3C  +
test eax eax +
jz loc_1004ED7  +
movzx eax word ptr [eax+5Ch] +
cmp ax 2 +
jnz loc_1004ECC  +
push 2  +
pop eax  +
pop ebp  +
retn   +
cmp ax 3 +
jnz loc_1004ED7  +
xor eax eax +
inc eax  +
pop ebp  +
retn   +
mov eax [ebp+arg_0] +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov eax dword_1006114 +
and [ebp+SystemTimeAsFileTime.dwLowDateTime] 0 +
and [ebp+SystemTimeAsFileTime.dwHighDateTime] 0 +
push ebx  +
push edi  +
mov edi 0BB40E64Eh +
mov ebx 0FFFF0000h +
cmp eax edi +
jz loc_1004F13  +
test eax ebx +
jz loc_1004F13  +
not eax  +
mov dword_1006118 eax +
jmp loc_1004F6E  +
push esi  +
lea eax [ebp+SystemTimeAsFileTime] +
push eax  +
call ds:GetSystemTimeAsFileTime  +
mov esi [ebp+SystemTimeAsFileTime.dwHighDateTime] +
xor esi [ebp+SystemTimeAsFileTime.dwLowDateTime] +
call ds:GetCurrentProcessId  +
xor esi eax +
call ds:GetCurrentThreadId  +
xor esi eax +
call ds:GetTickCount  +
xor esi eax +
lea eax [ebp+PerformanceCount] +
push eax  +
call ds:QueryPerformanceCounter  +
mov eax dword ptr [ebp+PerformanceCount+4] +
xor eax dword ptr [ebp+PerformanceCount] +
xor esi eax +
cmp esi edi +
jz loc_1004F5A  +
test dword_1006114 ebx +
jnz loc_1004F5F  +
mov esi 0BB40E64Fh +
mov dword_1006114 esi +
not esi  +
mov dword_1006118 esi +
pop esi  +
pop edi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 328h +
mov dword_10065C0 eax +
mov dword_10065BC ecx +
mov dword_10065B8 edx +
mov dword_10065B4 ebx +
mov dword_10065B0 esi +
mov dword_10065AC edi +
mov word_10065D8 ss +
mov word_10065CC cs +
mov word_10065A8 ds +
mov word_10065A4 es +
mov word_10065A0 fs +
mov word_100659C gs +
pushf   +
pop dword_10065D0  +
mov eax [ebp+0] +
mov dword_10065C4 eax +
mov eax [ebp+4] +
mov dword_10065C8 eax +
lea eax [ebp+8] +
mov dword_10065D4 eax +
mov eax [ebp-320h] +
mov dword_1006510 10001h +
mov eax dword_10065C8 +
mov dword_10064CC eax +
mov dword_10064C0 0C0000409h +
mov dword_10064C4 1 +
mov eax dword_1006114 +
mov [ebp-328h] eax +
mov eax dword_1006118 +
mov [ebp-324h] eax +
push 0  +
call ds:SetUnhandledExceptionFilter  +
push offset ExceptionInfo  +
call ds:UnhandledExceptionFilter  +
push 0C0000409h  +
call ds:GetCurrentProcess  +
push eax  +
call ds:TerminateProcess  +
leave   +
retn   +
***
