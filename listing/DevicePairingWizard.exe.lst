add byte ptr ds:?messageMap@CWinApp@@1UAFX_MSGMAP@@B[ecx] ah +
retn   +
***
retn   +
***
mov eax esi +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
call ds:CoUninitialize  +
mov ecx esi +
pop esi  +
jmp loc_1003C7C  +
***
push ebp  +
mov ebp esp +
push dword ptr [ebp+8]  +
call ??3@YAXPAX@Z  +
pop ecx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
push edi  +
lea eax [ebp+ppv] +
push eax  +
push offset riid  +
push 1  +
xor esi esi +
push esi  +
push offset rclsid  +
call ds:CoCreateInstance  +
mov edi eax +
cmp edi esi +
jl loc_1003A37  +
mov eax dword_100511C +
cmp eax esi +
jz loc_1003A19  +
cmp [eax] si +
jz loc_1003A19  +
mov ecx [ebp+ppv] +
mov edx [ecx] +
push esi  +
push 1  +
push esi  +
push eax  +
push esi  +
push ecx  +
call dword ptr [edx+0Ch]  +
jmp loc_1003A2C  +
mov eax [ebp+ppv] +
mov ecx [eax] +
push esi  +
push 1  +
push esi  +
push offset aLayeredMicroso  +
push esi  +
push eax  +
call dword ptr [ecx+0Ch]  +
mov edi eax +
mov eax [ebp+ppv] +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax edi +
pop edi  +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call ??1CWinApp@@UAE@XZ  +
test byte ptr [ebp+8] 1 +
jz loc_1003A5C  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
call __EH_prolog3  +
mov esi ecx +
call ?InitInstance@CWinApp@@UAEHXZ  +
push 0  +
push 0  +
call ds:CoInitializeEx  +
push 40h  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov ecx eax +
mov [ebp-10h] ecx +
and dword ptr [ebp-4] 0 +
test ecx ecx +
jz loc_1003AA1  +
call ??0CWnd@@QAE@XZ  +
jmp loc_1003AA3  +
xor eax eax +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov [esi+20h] eax +
test eax eax +
jz loc_1003AB3  +
call sub_10039D3  +
xor eax eax +
call __EH_epilog3  +
retn   +
***
jmp ds:?OnHelp@CWinApp@@IAEXXZ  +
***
jmp ds:??0CWinApp@@QAE@PBG@Z  +
***
jmp ds:?GetRuntimeClass@CWinApp@@UBEPAUCRuntimeClass@@XZ  +
***
jmp ds:?ExitInstance@CWinApp@@UAEHXZ  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
xor eax eax +
jmp loc_1003CD3  +
test eax eax +
jnz loc_1003CD8  +
mov ecx [esi] +
test ecx ecx +
jz loc_1003CD0  +
call ecx  +
add esi 4 +
cmp esi [ebp+arg_4] +
jb loc_1003CC4  +
pop esi  +
pop ebp  +
retn   +
***
mov eax dword_1005198 +
push offset dword_1005188  +
push dword_1005194  +
mov dword_1005188 eax +
push offset unk_1005178  +
push offset unk_100517C  +
push offset unk_1005174  +
call ds:__wgetmainargs  +
add esp 14h +
mov dword_1005184 eax +
retn   +
***
call __SEH_prolog4  +
xor ebx ebx +
mov [ebp+var_1C] ebx +
mov [ebp+ms_exc.disabled] ebx +
lea eax [ebp+StartupInfo] +
push eax  +
call ds:GetStartupInfoW  +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov [ebp+ms_exc.disabled] 1 +
mov eax large fs:18h +
mov esi [eax+4] +
mov [ebp+var_20] ebx +
mov edi offset Destination +
push ebx  +
push esi  +
push edi  +
call ds:InterlockedCompareExchange  +
cmp eax ebx +
jz loc_1003D7B  +
cmp eax esi +
jnz loc_1003D6E  +
xor esi esi +
inc esi  +
mov [ebp+var_20] esi +
jmp loc_1003D7E  +
push 3E8h  +
call ds:Sleep  +
jmp loc_1003D55  +
xor esi esi +
inc esi  +
mov eax dword_10054C8 +
cmp eax esi +
jnz loc_1003D91  +
push 1Fh  +
call _amsg_exit  +
pop ecx  +
jmp loc_1003DC0  +
mov eax dword_10054C8 +
test eax eax +
jnz loc_1003DBA  +
mov dword_10054C8 esi +
push offset dword_100117C  +
push offset dword_1001170  +
call sub_1003CB7  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1003DC0  +
jmp loc_1003EE4  +
mov dword_1005190 esi +
mov eax dword_10054C8 +
cmp eax esi +
jnz loc_1003DE4  +
push offset dword_100116C  +
push offset dword_100115C  +
call _initterm  +
pop ecx  +
pop ecx  +
mov dword_10054C8 2 +
cmp [ebp+var_20] ebx +
jnz loc_1003DF1  +
push ebx  +
push edi  +
call ds:InterlockedExchange  +
cmp dword_10054D8 ebx +
jz loc_1003E12  +
push offset dword_10054D8  +
call sub_1004209  +
pop ecx  +
test eax eax +
jz loc_1003E12  +
push ebx  +
push 2  +
push ebx  +
call dword_10054D8  +
mov eax ds:_wcmdln +
cmp [eax] ebx +
jz loc_1003EE4  +
mov eax [eax] +
mov [ebp+var_24] eax +
movzx ecx word ptr [eax] +
cmp cx 20h +
ja $LN58  +
cmp cx bx +
jz loc_1003E37  +
cmp [ebp+var_1C] ebx +
jnz $LN58  +
movzx ecx word ptr [eax] +
cmp cx bx +
jz loc_1003E4C  +
cmp cx 20h +
ja loc_1003E4C  +
inc eax  +
inc eax  +
mov [ebp+var_24] eax +
jmp loc_1003E37  +
test byte ptr [ebp+StartupInfo.dwFlags] 1 +
jz loc_1003E58  +
movzx ecx [ebp+StartupInfo.wShowWindow] +
jmp loc_1003E5B  +
push 0Ah  +
pop ecx  +
push ecx  +
push eax  +
push ebx  +
push 1000000h  +
call _wWinMain@16  +
mov dword_100518C eax +
cmp dword_1005180 ebx +
jnz $LN59  +
push eax  +
call ds:exit  +
cmp cx 22h +
jnz loc_1003E8D  +
xor ecx ecx +
cmp [ebp+var_1C] ebx +
setz cl  +
mov [ebp+var_1C] ecx +
inc eax  +
inc eax  +
jmp loc_1003E21  +
mov eax [ebp-14h] +
mov ecx [eax] +
mov ecx [ecx] +
mov [ebp-28h] ecx +
push eax  +
push ecx  +
call _XcptFilter  +
pop ecx  +
pop ecx  +
retn   +
mov esp [ebp-18h] +
mov eax [ebp-28h] +
mov dword_100518C eax +
xor ebx ebx +
cmp dword_1005180 ebx +
jnz $LN59  +
push eax  +
call ds:_exit  +
cmp dword_1005190 ebx +
jnz loc_1003ECF  +
call ds:_cexit  +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov eax dword_100518C +
jmp loc_1003EF0  +
xor eax eax +
inc eax  +
retn   +
mov esp [ebp-18h] +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov eax 0FFh +
call __SEH_epilog4  +
retn   +
***
mov eax 5A4Dh +
cmp ds:1000000h ax +
jz loc_1003F0D  +
xor eax eax +
jmp loc_1003F5A  +
mov eax ds:100003Ch +
lea eax [eax+1000000h] +
cmp dword ptr [eax] 4550h +
jnz loc_1003F09  +
movzx ecx word ptr [eax+18h] +
cmp ecx 10Bh +
jz loc_1003F47  +
cmp ecx 20Bh +
jnz loc_1003F09  +
cmp dword ptr [eax+84h] 0Eh +
jbe loc_1003F09  +
xor ecx ecx +
cmp [eax+0F8h] ecx +
jmp loc_1003F55  +
cmp dword ptr [eax+74h] 0Eh +
jbe loc_1003F09  +
xor ecx ecx +
cmp [eax+0E8h] ecx +
setnz cl  +
mov eax ecx +
push 2  +
mov dword_1005180 eax +
call sub_10043A2  +
push eax  +
call ds:__set_app_type  +
or dword_10054D0 0FFFFFFFFh +
or dword_10054D4 0FFFFFFFFh +
pop ecx  +
pop ecx  +
call ds:__p__fmode  +
mov ecx dword_10051A0 +
mov [eax] ecx +
call ds:__p__commode  +
mov ecx dword_100519C +
mov [eax] ecx +
call sub_1004334  +
cmp dword_1005098 0 +
jnz loc_1003FB3  +
push offset sub_1004334  +
call ds:__setusermatherr  +
pop ecx  +
call sub_100431C  +
xor eax eax +
retn   +
***
call sub_10043E1  +
jmp ___tmainCRTStartup  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call ds:??1type_info@@UAE@XZ  +
test byte ptr [ebp+8] 1 +
jz loc_1003FEA  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
lea eax [esp+4+arg_0] +
sub esp [esp+0Ch] +
push ebx  +
push esi  +
push edi  +
mov [eax] ebp +
mov ebp eax +
mov eax dword_1005088 +
xor eax ebp +
push eax  +
push dword ptr [ebp-4]  +
mov dword ptr [ebp-4] 0FFFFFFFFh +
lea eax [ebp-0Ch] +
mov large fs:0 eax +
retn   +
***
mov ecx [ebp-0Ch] +
mov large fs:0 ecx +
pop ecx  +
pop edi  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
push ecx  +
retn   +
***
call __SEH_prolog4  +
pop ecx  +
retn   +
***
push ebp  +
mov ebp esp +
push dword ptr [ebp+8]  +
call sub_1004067  +
neg eax  +
sbb eax eax +
neg eax  +
pop ecx  +
dec eax  +
pop ebp  +
retn   +
***
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov eax [eax] +
cmp dword ptr [eax] 0E06D7363h +
jnz loc_100414A  +
cmp dword ptr [eax+10h] 3 +
jnz loc_100414A  +
mov eax [eax+14h] +
cmp eax 19930520h +
jz loc_1004144  +
cmp eax 19930521h +
jz loc_1004144  +
cmp eax 19930522h +
jz loc_1004144  +
cmp eax 1994000h +
jnz loc_100414A  +
call ds:?terminate@@YAXXZ  +
xor eax eax +
pop ebp  +
retn 4  +
***
push (offset byte_100410C+1)  +
call ds:SetUnhandledExceptionFilter  +
xor eax eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
mov eax 5A4Dh +
cmp [ecx] ax +
jz loc_1004196  +
xor eax eax +
pop ebp  +
retn   +
mov eax [ecx+3Ch] +
add eax ecx +
cmp dword ptr [eax] 4550h +
jnz loc_1004192  +
xor edx edx +
mov ecx 10Bh +
cmp [eax+18h] cx +
setz dl  +
mov eax edx +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [eax+3Ch] +
add ecx eax +
movzx eax word ptr [ecx+14h] +
push ebx  +
push esi  +
movzx esi word ptr [ecx+6] +
xor edx edx +
push edi  +
lea eax [eax+ecx+18h] +
test esi esi +
jbe loc_10041FD  +
mov edi [ebp+arg_4] +
mov ecx [eax+0Ch] +
cmp edi ecx +
jb loc_10041F5  +
mov ebx [eax+8] +
add ebx ecx +
cmp edi ebx +
jb loc_10041FF  +
inc edx  +
add eax 28h +
cmp edx esi +
jb loc_10041E5  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
call __SEH_prolog4  +
and [ebp+ms_exc.disabled] 0 +
mov esi 1000000h +
push esi  +
call sub_1004180  +
pop ecx  +
test eax eax +
jz loc_1004266  +
mov eax [ebp+arg_0] +
sub eax esi +
push eax  +
push esi  +
call sub_10041C0  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1004266  +
mov eax [eax+24h] +
shr eax 1Fh +
not eax  +
and eax 1 +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
jmp loc_100426F  +
mov eax [ebp-14h] +
mov eax [eax] +
mov eax [eax] +
xor ecx ecx +
cmp eax 0C0000005h +
setz cl  +
mov eax ecx +
retn   +
mov esp [ebp-18h] +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
xor eax eax +
call __SEH_epilog4  +
retn   +
***
mov eax [esp+8+arg_4] +
mov ecx [ebp-10h] +
mov large fs:0 ecx +
pop ecx  +
pop edi  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
push ecx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push offset unk_1004001  +
push offset dword_1005088  +
call _except_handler4_common  +
add esp 18h +
pop ebp  +
retn   +
***
call ds:_controlfp  +
pop ecx  +
pop ecx  +
retn   +
***
retn   +
***
call __SEH_prolog4  +
xor eax eax +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_1004395  +
cmp ecx 0FFFFFFFFh +
jz loc_1004395  +
and [ebp+ms_exc.disabled] eax +
mov edx 5A4Dh +
cmp [ecx] dx +
jnz loc_100438E  +
mov edx [ecx+3Ch] +
test edx edx +
jl loc_100438E  +
cmp edx 10000000h +
jnb loc_100438E  +
lea eax [edx+ecx] +
mov [ebp+var_1C] eax +
cmp dword ptr [eax] 4550h +
jz loc_100438E  +
jmp loc_1004389  +
xor eax eax +
inc eax  +
retn   +
mov esp [ebp-18h] +
xor eax eax +
mov [ebp+var_1C] eax +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
call __SEH_epilog4  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
call ds:GetModuleHandleA  +
test eax eax +
jz loc_10043D7  +
push eax  +
call sub_100433C  +
test eax eax +
jz loc_10043D7  +
movzx eax word ptr [eax+5Ch] +
cmp ax 2 +
jnz loc_10043CC  +
push 2  +
pop eax  +
pop ebp  +
retn   +
cmp ax 3 +
jnz loc_10043D7  +
xor eax eax +
inc eax  +
pop ebp  +
retn   +
mov eax [ebp+arg_0] +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov eax dword_1005088 +
and [ebp+SystemTimeAsFileTime.dwLowDateTime] 0 +
and [ebp+SystemTimeAsFileTime.dwHighDateTime] 0 +
push ebx  +
push edi  +
mov edi 0BB40E64Eh +
mov ebx 0FFFF0000h +
cmp eax edi +
jz loc_1004413  +
test eax ebx +
jz loc_1004413  +
not eax  +
mov dword_100508C eax +
jmp loc_100446E  +
push esi  +
lea eax [ebp+SystemTimeAsFileTime] +
push eax  +
call ds:GetSystemTimeAsFileTime  +
mov esi [ebp+SystemTimeAsFileTime.dwHighDateTime] +
xor esi [ebp+SystemTimeAsFileTime.dwLowDateTime] +
call ds:GetCurrentProcessId  +
xor esi eax +
call ds:GetCurrentThreadId  +
xor esi eax +
call ds:GetTickCount  +
xor esi eax +
lea eax [ebp+PerformanceCount] +
push eax  +
call ds:QueryPerformanceCounter  +
mov eax dword ptr [ebp+PerformanceCount+4] +
xor eax dword ptr [ebp+PerformanceCount] +
xor esi eax +
cmp esi edi +
jz loc_100445A  +
test dword_1005088 ebx +
jnz loc_100445F  +
mov esi 0BB40E64Fh +
mov dword_1005088 esi +
not esi  +
mov dword_100508C esi +
pop esi  +
pop edi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp loc_10045C2  +
push ebp  +
mov ebp esp +
call ?AfxGetModuleState@@YGPAVAFX_MODULE_STATE@@XZ  +
mov cl [ebp+arg_0] +
mov [eax+14h] cl +
mov ecx [ebp+arg_4] +
mov [eax+2040h] ecx +
xor eax eax +
inc eax  +
pop ebp  +
retn 8  +
jmp ds:?AfxWinMain@@YGHPAUHINSTANCE__@@0PAGH@Z  +
***
jmp dword_10054C4[edx]  +
***
retn   +
***
mov ecx offset unk_10050A8 +
jmp ??1CWinApp@@UAE@XZ  +
***
