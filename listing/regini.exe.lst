mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
push ebx  +
xor ebx ebx +
dec eax  +
mov [ebp+arg_4] eax +
jz loc_10041B2  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
add esi 8 +
mov edi offset sub_1007CFA +
cmp byte ptr [esi] 0 +
jnz loc_10041A7  +
push dword ptr [esi-4]  +
mov byte ptr [esi] 1 +
mov eax dword_100A994 +
imul eax ebx +
push eax  +
mov eax ds:_iob +
add eax 20h +
push eax  +
push edi  +
call sub_100660B  +
lea eax [ebx+1] +
cmp eax [ebp+arg_4] +
jnz loc_1004192  +
push [ebp+pSecurityDescriptor]  +
mov eax ds:_iob +
push 0  +
add eax 20h +
push eax  +
push edi  +
call sub_1006666  +
mov eax ds:_iob +
add eax 20h +
push offset dword_10011DC  +
push eax  +
call sub_1007CFA  +
pop ecx  +
pop ecx  +
inc ebx  +
add esi 18h +
cmp ebx [ebp+arg_4] +
jb loc_1004153  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 21Ch +
mov eax dword_100A000 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
mov ebx [ebp+lpSubKey] +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov edi [ebp+hKey] +
lea eax [ebp+phkResult] +
push eax  +
push 8  +
push 2000000h  +
push ebx  +
push edi  +
push esi  +
call sub_1005DD5  +
jmp loc_1004239  +
lea eax [ebp+SubKey] +
push eax  +
lea eax [ebp+cbName] +
push eax  +
lea eax [ebp+ftLastWriteTime] +
push eax  +
push 0  +
push [ebp+phkResult]  +
mov [ebp+cbName] 104h +
push esi  +
call sub_1006F3B  +
test eax eax +
jnz loc_100423D  +
lea eax [ebp+SubKey] +
push eax  +
push [ebp+phkResult]  +
push esi  +
call sub_10041BC  +
test eax eax +
jz loc_10041F5  +
push [ebp+phkResult]  +
push esi  +
call sub_1005EAD  +
push ebx  +
push edi  +
push esi  +
call sub_1005FAF  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1004C64  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 678h +
push ebx  +
push offset unk_100A9C0  +
xor ebx ebx +
push ebx  +
push dword_100B234  +
push lpFileName  +
push lpMachineName  +
call sub_1006C43  +
cmp eax ebx +
jnz loc_10042BE  +
mov eax dword_100B208 +
push esi  +
mov [ebp+var_C] eax +
lea eax [ebp+var_78] +
push eax  +
push dword ptr [ebp+lpFileName]  +
call sub_1005FFF  +
cmp eax ebx +
jz loc_10042C3  +
mov esi eax +
push offset unk_100A9C0  +
call sub_1006F08  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 4  +
push edi  +
push 38h  +
lea eax [ebp+var_4C] +
push ebx  +
push eax  +
call memset  +
mov al byte_100A9A4 +
or [ebp+var_14] 0FFFFFFFFh +
add esp 0Ch +
mov [ebp+var_5C] al +
xor esi esi +
mov dword ptr [ebp+var_4] ebx +
mov [ebp+var_8] ebx +
jmp loc_1004671  +
cmp [ebp+var_3F] bl +
jz loc_10044DD  +
cmp byte_100A9AC bl +
jz loc_100431C  +
push dword ptr [ebp+lpValueName]  +
mov eax ds:_iob +
push [ebp+var_48]  +
add eax 20h +
push dword ptr [ebp+var_4]  +
push offset a02u04uKeynameW  +
push eax  +
call sub_1007CFA  +
add esp 14h +
mov eax [ebp+var_48] +
cmp eax [ebp+var_14] +
ja loc_100473B  +
mov esi dword ptr [ebp+var_4] +
or [ebp+var_14] 0FFFFFFFFh +
imul esi esi +
lea esi [ebp+esi+var_690] +
cmp dword ptr [ebp+var_4] ebx +
jz loc_100436B  +
cmp eax [esi] +
ja loc_100436B  +
push dword ptr [esi+0Ch]  +
push offset unk_100A9C0  +
call sub_1005EAD  +
mov eax [ebp+var_48] +
mov [esi+0Ch] ebx +
cmp eax [esi] +
jz loc_100437B  +
sub esi 18h +
dec dword ptr [ebp+var_4]  +
cmp dword ptr [ebp+var_4] 1 +
jbe loc_100437B  +
cmp eax [esi] +
jbe loc_1004342  +
jmp loc_100437B  +
cmp dword ptr [ebp+var_4] 40h +
jz loc_1004756  +
inc dword ptr [ebp+var_4]  +
add esi 18h +
cmp byte_100A9AC bl +
jz loc_100439F  +
push dword ptr [ebp+var_4]  +
mov eax ds:_iob +
add eax 20h +
push offset a02u  +
push eax  +
call sub_1007CFA  +
mov eax [ebp+var_48] +
add esp 0Ch +
mov ecx dword ptr [ebp+lpValueName] +
lea edi [esi+0Ch] +
mov [esi] eax +
mov eax dword ptr [ebp+var_4] +
mov [esi+4] ecx +
mov [esi+8] bl +
mov [edi] ebx +
cmp byte ptr [ebp+Length] bl +
jz loc_100443B  +
cmp eax 2 +
jnb loc_10043C5  +
mov eax [ebp+var_C] +
jmp loc_10043D2  +
add eax 0FFFFFFFEh +
imul eax eax +
mov eax [ebp+eax+hKey] +
push ecx  +
push eax  +
push offset unk_100A9C0  +
call sub_10041BC  +
mov [ebp+var_10] eax +
cmp eax ebx +
jnz loc_100477A  +
cmp byte_100A9AC bl +
jz loc_100440F  +
push dword ptr [edi]  +
mov eax ds:_iob +
push ebx  +
push dword ptr [esi+4]  +
add eax 40h +
push dword ptr [esi]  +
push offset aDeletedKey02xW  +
push eax  +
call sub_1007CFA  +
add esp 18h +
mov eax dword ptr [ebp+var_4] +
push ebx  +
inc eax  +
push eax  +
lea eax [ebp+var_678] +
push eax  +
call sub_1004135  +
mov eax ds:_iob +
add eax 40h +
push offset aDeletedTheAbov  +
push eax  +
call sub_1007CFA  +
pop ecx  +
pop ecx  +
jmp loc_1004671  +
cmp eax 2 +
jnb loc_1004445  +
mov eax [ebp+var_C] +
jmp loc_1004452  +
add eax 0FFFFFFFEh +
imul eax eax +
mov eax [ebp+eax+hKey] +
lea edx [ebp+dwDisposition] +
push edx  +
push edi  +
push [ebp+dwType]  +
push ebx  +
push 2000000h  +
push ecx  +
push eax  +
push offset unk_100A9C0  +
call sub_1005CB7  +
mov [ebp+var_10] eax +
cmp eax ebx +
jnz loc_10047B8  +
cmp byte_100A9AC bl +
jz loc_100449D  +
push dword ptr [edi]  +
mov eax ds:_iob +
push ebx  +
push dword ptr [esi+4]  +
add eax 40h +
push dword ptr [esi]  +
push offset aCreatedKey02xW  +
push eax  +
call sub_1007CFA  +
add esp 18h +
push ebx  +
push ebx  +
lea eax [esi+10h] +
push eax  +
push dword ptr [edi]  +
push offset unk_100A9C0  +
call sub_1005EED  +
test eax eax +
jz loc_10044BA  +
xor eax eax +
lea edi [esi+10h] +
stos   +
stos   +
cmp [ebp+dwDisposition] 1 +
jnz loc_1004671  +
push [ebp+dwType]  +
mov eax dword ptr [ebp+var_4] +
inc eax  +
push eax  +
lea eax [ebp+var_678] +
push eax  +
call sub_1004135  +
jmp loc_1004671  +
cmp esi ebx +
jnz loc_1004532  +
push ebx  +
push dword ptr [ebp+lpValueName]  +
push offset aValueNameWsSee  +
jmp loc_1004722  +
cmp byte_100A9AC bl +
jz loc_1004516  +
push dword ptr [esi+0Ch]  +
mov eax ds:_iob +
push ebx  +
push dword ptr [esi+4]  +
add eax 40h +
push dword ptr [esi]  +
push offset aPoppingFromKey  +
push eax  +
call sub_1007CFA  +
add esp 18h +
push dword ptr [esi+0Ch]  +
push offset unk_100A9C0  +
call sub_1005EAD  +
mov [esi+0Ch] ebx +
sub esi 18h +
dec dword ptr [ebp+var_4]  +
cmp dword ptr [ebp+var_4] 1 +
jbe loc_1004539  +
mov eax [ebp+var_48] +
cmp eax [esi] +
jb loc_10044EF  +
cmp byte_100A9AC bl +
jz loc_1004566  +
push dword ptr [esi+0Ch]  +
mov eax ds:_iob +
push ebx  +
push dword ptr [esi+4]  +
add eax 40h +
push dword ptr [esi]  +
push [ebp+var_34]  +
push dword ptr [ebp+lpValueName]  +
push offset aAddingValueWsW  +
push eax  +
call sub_1007CFA  +
add esp 20h +
mov eax [ebp+var_48] +
mov [ebp+var_14] eax +
cmp [ebp+var_24] bl +
jz loc_10045B1  +
mov eax dword ptr [ebp+var_4] +
push dword ptr [ebp+lpValueName]  +
imul eax eax +
push [ebp+eax+var_684]  +
push offset unk_100A9C0  +
call sub_1005FE5  +
test eax eax +
jnz loc_1004671  +
push dword ptr [ebp+lpValueName]  +
mov eax ds:_iob +
add eax 20h +
push offset aWsDeleted  +
push eax  +
call sub_1007CFA  +
add esp 0Ch +
jmp loc_1004671  +
push lpData  +
mov eax dword_100A9A8 +
mov edi dword ptr [ebp+var_4] +
mov [ebp+cbData] eax +
imul edi edi +
lea eax [ebp+cbData] +
push eax  +
lea eax [ebp+Type] +
push eax  +
push dword ptr [ebp+lpValueName]  +
lea edi [ebp+edi+var_684] +
push dword ptr [edi]  +
push offset unk_100A9C0  +
call sub_1005F3A  +
test eax eax +
jnz loc_100460C  +
mov eax [ebp+Type] +
cmp eax [ebp+dwType] +
jnz loc_100460C  +
mov eax [ebp+Length] +
cmp [ebp+cbData] eax +
jnz loc_100460C  +
push eax  +
push [ebp+lpData]  +
push lpData  +
call ds:RtlCompareMemory  +
cmp eax [ebp+Length] +
jz loc_1004671  +
push [ebp+lpData]  +
push [ebp+Length]  +
push [ebp+dwType]  +
push dword ptr [ebp+lpValueName]  +
push dword ptr [edi]  +
push offset unk_100A9C0  +
call sub_1005F8A  +
mov edi eax +
cmp edi ebx +
jnz loc_10047E2  +
mov edi dword ptr [ebp+var_4] +
push ebx  +
lea eax [edi+1] +
push eax  +
lea eax [ebp+var_678] +
push eax  +
call sub_1004135  +
push [ebp+lpData]  +
mov eax dword_100A994 +
push [ebp+dwType]  +
imul eax edi +
push [ebp+Length]  +
push dword ptr [ebp+lpValueName]  +
push eax  +
mov eax ds:_iob +
push ebx  +
add eax 20h +
push eax  +
push offset sub_1007CFA  +
push dword_100A99C  +
call sub_10075E0  +
lea eax [ebp+var_4C] +
push eax  +
lea eax [ebp+var_78] +
push eax  +
call sub_1007A71  +
test al al +
jnz loc_10042EC  +
cmp [ebp+var_40] bl +
jnz loc_10047FF  +
mov eax dword ptr [ebp+var_4] +
push ebx  +
inc eax  +
push eax  +
lea eax [ebp+var_678] +
push eax  +
call sub_1004135  +
cmp [ebp+var_3F] bl +
jz loc_10046CE  +
mov eax offset aInvalidKeyWsAc +
cmp [ebp+var_34] ebx +
jnz loc_10046B5  +
mov eax offset aInvalidKeyWs +
push [ebp+var_34]  +
push dword ptr [ebp+lpValueName]  +
push eax  +
push 1  +
push [ebp+var_4C]  +
push dword ptr [ebp+lpFileName]  +
call sub_1007E30  +
jmp loc_10047FF  +
mov eax [ebp+var_3C] +
dec eax  +
cmp eax 8 +
ja loc_1004716  +
jmp ds:off_1004827[eax*4]  +
mov eax offset aValueTooLargeW +
jmp loc_100471B  +
mov eax offset aUnableToAccess +
jmp loc_100471B  +
mov eax offset aDateTimeFormat +
jmp loc_100471B  +
mov eax offset aInvalidLineCon +
jmp loc_100471B  +
mov eax offset aInvalidQuoteCh +
jmp loc_100471B  +
mov eax offset aMissingLengthF +
jmp loc_100471B  +
mov eax offset aNotEnoughBinar +
jmp loc_100471B  +
mov eax offset aInvalidRegistr +
jmp loc_100471B  +
mov eax offset aInvalidValueWs +
push [ebp+var_34]  +
push dword ptr [ebp+lpValueName]  +
push eax  +
push 1  +
push [ebp+var_4C]  +
push dword ptr [ebp+lpFileName]  +
call sub_1007E30  +
mov [ebp+var_8] 0Bh +
jmp loc_10047FF  +
push dword ptr [ebp+lpValueName]  +
mov eax ds:_iob +
add eax 40h +
push offset aReginiMissingL  +
push eax  +
call sub_1007CFA  +
add esp 0Ch +
jmp loc_100472F  +
mov eax ds:_iob +
push 40h  +
push dword ptr [ebp+lpValueName]  +
add eax 40h +
push offset aReginiWsKeyExc  +
push eax  +
call sub_1007CFA  +
mov [ebp+var_8] 0CEh +
jmp loc_10047FC  +
mov eax dword ptr [ebp+var_4] +
cmp eax 2 +
jnb loc_1004787  +
mov eax [ebp+var_C] +
jmp loc_1004794  +
add eax 0FFFFFFFEh +
imul eax eax +
mov eax [ebp+eax+hKey] +
mov edi [ebp+var_10] +
push edi  +
push eax  +
push ebx  +
push dword ptr [ebp+lpValueName]  +
push offset aReginiDeleteke  +
mov eax ds:_iob +
add eax 40h +
push eax  +
call sub_1007CFA  +
add esp 18h +
mov [ebp+var_8] edi +
jmp loc_10047FF  +
mov eax dword ptr [ebp+var_4] +
cmp eax 2 +
jnb loc_10047C5  +
mov eax [ebp+var_C] +
jmp loc_10047D2  +
add eax 0FFFFFFFEh +
imul eax eax +
mov eax [ebp+eax+hKey] +
mov edi [ebp+var_10] +
push edi  +
push eax  +
push ebx  +
push dword ptr [ebp+lpValueName]  +
push offset aReginiCreateke  +
jmp loc_10047A2  +
mov eax ds:_iob +
push edi  +
push dword ptr [ebp+lpValueName]  +
add eax 40h +
push offset aReginiSetvalue  +
push eax  +
call sub_1007CFA  +
mov [ebp+var_8] edi +
add esp 10h +
pop edi  +
jmp loc_1004812  +
push dword ptr [esi+0Ch]  +
push offset unk_100A9C0  +
call sub_1005EAD  +
sub esi 18h +
lea eax [ebp+var_678] +
cmp esi eax +
jnb loc_1004802  +
mov esi [ebp+var_8] +
jmp loc_10042B1  +
***
xor eax eax +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push edi  +
lea eax [ebp+hKey] +
push eax  +
push offset SubKey  +
push 80000001h  +
xor edi edi +
call ds:RegOpenKeyW  +
test eax eax +
jnz loc_10048C8  +
lea eax [ebp+cbData] +
push eax  +
lea eax [ebp+Data] +
push eax  +
lea eax [ebp+Type] +
push eax  +
push edi  +
push offset ValueName  +
push [ebp+hKey]  +
mov [ebp+cbData] 4 +
call ds:RegQueryValueExW  +
test eax eax +
jnz loc_10048BF  +
cmp [ebp+Type] 4 +
jnz loc_10048BF  +
cmp [ebp+cbData] 4 +
jnz loc_10048BF  +
cmp dword ptr [ebp+Data] edi +
jz loc_10048BF  +
inc edi  +
push [ebp+hKey]  +
call ds:RegCloseKey  +
mov eax edi +
pop edi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push offset aBSpecifiesThat  +
push offset aBTextfiles___  +
push offset aRegini  +
push offset HandlerRoutine  +
call sub_1007F10  +
call sub_1004864  +
test eax eax +
jz loc_1004913  +
mov eax ds:_iob +
add eax 40h +
push offset aErrorRegistryE  +
push eax  +
call sub_1007CFA  +
pop ecx  +
xor eax eax +
pop ecx  +
inc eax  +
pop ebp  +
retn   +
push ebx  +
xor ebx ebx +
dec [ebp+arg_0]  +
mov byte_100A9A4 0 +
jz loc_10049AC  +
push esi  +
push edi  +
add [ebp+arg_4] 4 +
mov eax [ebp+arg_4] +
mov esi [eax] +
mov al [esi] +
cmp al 2Dh +
jz loc_1004999  +
cmp al 2Fh +
jz loc_1004999  +
xor ebx ebx +
push esi  +
inc ebx  +
call sub_1007E95  +
test eax eax +
jnz loc_1004950  +
call ds:GetLastError  +
jmp loc_1004956  +
push eax  +
call sub_1004267  +
mov edi eax +
test edi edi +
jz loc_10049A0  +
push edi  +
push esi  +
push offset aFailedToLoadFr  +
call sub_1007DC4  +
push edi  +
call ds:exit  +
movsx eax al +
push eax  +
call ds:tolower  +
pop ecx  +
cmp eax 62h +
jz loc_1004992  +
movzx eax byte ptr [esi] +
push eax  +
lea eax [ebp+arg_4] +
push eax  +
lea eax [ebp+arg_0] +
push eax  +
call sub_10081A7  +
jmp loc_1004999  +
mov byte_100A9A4 1 +
inc esi  +
mov al [esi] +
test al al +
jnz loc_100496F  +
dec [ebp+arg_0]  +
jnz loc_1004928  +
pop edi  +
pop esi  +
test ebx ebx +
pop ebx  +
jnz loc_10049B8  +
push 0  +
push offset aNoTextfileSpec  +
call loc_1008036  +
xor eax eax +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
xor eax eax +
jmp loc_10049DD  +
test eax eax +
jnz loc_10049E2  +
mov ecx [esi] +
test ecx ecx +
jz loc_10049DA  +
call ecx  +
add esi 4 +
cmp esi [ebp+arg_4] +
jb loc_10049CE  +
pop esi  +
pop ebp  +
retn   +
***
mov eax dword_100A664 +
push offset dword_100A654  +
push dword_100A660  +
mov dword_100A654 eax +
push offset dword_100A644  +
push offset dword_100A648  +
push offset dword_100A640  +
call ds:__getmainargs  +
add esp 14h +
mov dword_100A650 eax +
retn   +
***
call __SEH_prolog4  +
xor ebx ebx +
mov [ebp+ms_exc.disabled] ebx +
mov eax large fs:18h +
mov esi [eax+4] +
mov [ebp+var_1C] ebx +
mov edi offset Destination +
push ebx  +
push esi  +
push edi  +
call ds:InterlockedCompareExchange  +
cmp eax ebx +
jz loc_1004A6A  +
cmp eax esi +
jnz loc_1004A5D  +
xor esi esi +
inc esi  +
mov [ebp+var_1C] esi +
jmp loc_1004A6D  +
push 3E8h  +
call ds:Sleep  +
jmp loc_1004A44  +
xor esi esi +
inc esi  +
mov eax dword_100B240 +
cmp eax esi +
jnz loc_1004A80  +
push 1Fh  +
call _amsg_exit  +
pop ecx  +
jmp loc_1004ABB  +
mov eax dword_100B240 +
test eax eax +
jnz loc_1004AB5  +
mov dword_100B240 esi +
push offset dword_10011BC  +
push offset dword_10011B0  +
call sub_10049C1  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1004ABB  +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov eax 0FFh +
jmp loc_1004B85  +
mov dword_100A65C esi +
mov eax dword_100B240 +
cmp eax esi +
jnz loc_1004ADF  +
push offset dword_10011AC  +
push offset dword_10011A4  +
call _initterm  +
pop ecx  +
pop ecx  +
mov dword_100B240 2 +
cmp [ebp+var_1C] ebx +
jnz loc_1004AEC  +
push ebx  +
push edi  +
call ds:InterlockedExchange  +
cmp dword_100B24C ebx +
jz loc_1004B0D  +
push offset dword_100B24C  +
call sub_1005249  +
pop ecx  +
test eax eax +
jz loc_1004B0D  +
push ebx  +
push 2  +
push ebx  +
call dword_100B24C  +
push dword_100A644  +
push dword_100A648  +
push dword_100A640  +
call sub_10048D2  +
add esp 0Ch +
mov dword_100A658 eax +
cmp dword_100A64C ebx +
jnz loc_1004B6B  +
push eax  +
call ds:exit  +
mov eax [ebp+ms_exc.exc_ptr] +
mov ecx [eax] +
mov ecx [ecx] +
mov [ebp+var_20] ecx +
push eax  +
push ecx  +
call _XcptFilter  +
pop ecx  +
pop ecx  +
retn   +
mov esp [ebp+ms_exc.old_esp] +
mov eax [ebp+var_20] +
mov dword_100A658 eax +
xor ebx ebx +
cmp dword_100A64C ebx +
jnz loc_1004B6B  +
push eax  +
call ds:_exit  +
cmp dword_100A65C ebx +
jnz loc_1004B79  +
call ds:_cexit  +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov eax dword_100A658 +
call __SEH_epilog4  +
retn   +
***
mov eax 5A4Dh +
cmp ds:1000000h ax +
jz loc_1004BA2  +
xor eax eax +
jmp loc_1004BEF  +
mov eax ds:100003Ch +
lea eax [eax+1000000h] +
cmp dword ptr [eax] 4550h +
jnz loc_1004B9E  +
movzx ecx word ptr [eax+18h] +
cmp ecx 10Bh +
jz loc_1004BDC  +
cmp ecx 20Bh +
jnz loc_1004B9E  +
cmp dword ptr [eax+84h] 0Eh +
jbe loc_1004B9E  +
xor ecx ecx +
cmp [eax+0F8h] ecx +
jmp loc_1004BEA  +
cmp dword ptr [eax+74h] 0Eh +
jbe loc_1004B9E  +
xor ecx ecx +
cmp [eax+0E8h] ecx +
setnz cl  +
mov eax ecx +
push 1  +
mov dword_100A64C eax +
call sub_10053E2  +
push eax  +
call ds:__set_app_type  +
or dword_100B238 0FFFFFFFFh +
or dword_100B23C 0FFFFFFFFh +
pop ecx  +
pop ecx  +
call ds:__p__fmode  +
mov ecx dword_100A66C +
mov [eax] ecx +
call ds:__p__commode  +
mov ecx dword_100A668 +
mov [eax] ecx +
call sub_1005374  +
cmp dword_100A018 0 +
jnz loc_1004C48  +
push offset sub_1005374  +
call ds:__setusermatherr  +
pop ecx  +
call sub_100535C  +
xor eax eax +
retn   +
***
call sub_1005421  +
jmp sub_1004A22  +
***
cmp ecx dword_100A000 +
jnz loc_1004C6F  +
retn 0  +
jmp loc_10054B7  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 2D0h +
mov eax dword_100A000 +
xor eax ebp +
mov [ebp+var_4] eax +
mov [ebp+var_220] eax +
mov [ebp+var_224] ecx +
mov [ebp+var_228] edx +
mov [ebp+var_22C] ebx +
mov [ebp+var_230] esi +
mov [ebp+var_234] edi +
mov [ebp+var_208] ss +
mov [ebp+var_214] cs +
mov [ebp+var_238] ds +
mov [ebp+var_23C] es +
mov [ebp+var_240] fs +
mov [ebp+var_244] gs +
pushf   +
pop [ebp+var_210]  +
mov eax [ebp+4] +
mov [ebp+var_218] eax +
lea eax [ebp+4] +
mov [ebp+var_2D0] 10001h +
mov [ebp+var_20C] eax +
mov eax [eax-4] +
push offset OutputString  +
mov [ebp+var_21C] eax +
call ds:OutputDebugStringA  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_1004C64  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
pop ebp  +
jmp loc_1004C85  +
***
push ecx  +
lea ecx [esp+4] +
sub ecx eax +
sbb eax eax +
not eax  +
and ecx eax +
mov eax esp +
and eax 0FFFFF000h +
cmp ecx eax +
jb cs20  +
mov eax ecx +
pop ecx  +
xchg eax esp +
mov eax [eax] +
mov [esp] eax +
retn   +
***
sub eax 1000h +
test [eax] eax +
jmp cs10  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
push ebx  +
xor ebx ebx +
push esi  +
push edi  +
cmp ecx ebx +
jz loc_1004DA8  +
mov edi [ebp+arg_4] +
cmp edi ebx +
ja loc_1004DC3  +
call _errno  +
push 16h  +
pop esi  +
mov [eax] esi +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
call sub_1004D30  +
add esp 14h +
mov eax esi +
jmp loc_1004DF3  +
mov esi [ebp+arg_8] +
cmp esi ebx +
jnz loc_1004DCE  +
mov [ecx] bl +
jmp loc_1004DA8  +
mov edx ecx +
mov al [esi] +
mov [edx] al +
inc edx  +
inc esi  +
cmp al bl +
jz loc_1004DDD  +
dec edi  +
jnz loc_1004DD0  +
cmp edi ebx +
jnz loc_1004DF1  +
mov [ecx] bl +
call _errno  +
push 22h  +
pop ecx  +
mov [eax] ecx +
mov esi ecx +
jmp loc_1004DB2  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
push ebx  +
push esi  +
push edi  +
xor edi edi +
cmp edx edi +
jz loc_1004E15  +
mov ebx [ebp+arg_4] +
cmp ebx edi +
ja loc_1004E33  +
call _errno  +
push 16h  +
pop esi  +
mov [eax] esi +
push edi  +
push edi  +
push edi  +
push edi  +
push edi  +
call sub_1004D30  +
add esp 14h +
mov eax esi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
mov esi [ebp+arg_8] +
cmp esi edi +
jnz loc_1004E41  +
xor eax eax +
mov [edx] ax +
jmp loc_1004E15  +
mov ecx edx +
movzx eax word ptr [esi] +
mov [ecx] ax +
inc ecx  +
inc ecx  +
inc esi  +
inc esi  +
cmp ax di +
jz loc_1004E55  +
dec ebx  +
jnz loc_1004E43  +
xor eax eax +
cmp ebx edi +
jnz loc_1004E2E  +
mov [edx] ax +
call _errno  +
push 22h  +
pop ecx  +
mov [eax] ecx +
mov esi ecx +
jmp loc_1004E1F  +
***
push edi  +
mov ebp [ecx] +
push edi  +
mov ebp edx +
push ebx  +
push edx  +
push ecx  +
push [esp+8+arg_4]  +
call __local_unwind4  +
add esp 0Ch +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
mov eax [ebp+arg_0] +
push ebx  +
mov ebx [ebp+arg_C] +
push esi  +
mov esi [ebx+8] +
xor esi [eax] +
push edi  +
mov eax [esi] +
mov [ebp+var_1] 0 +
mov [ebp+var_C] 1 +
lea edi [ebx+10h] +
cmp eax 0FFFFFFFEh +
jz loc_1005006  +
mov ecx [esi+4] +
add ecx edi +
xor ecx [eax+edi] +
call [ebp+arg_4]  +
mov ecx [esi+0Ch] +
mov edx [esi+8] +
add ecx edi +
xor ecx [edx+edi] +
call [ebp+arg_4]  +
mov eax [ebp+arg_8] +
test byte ptr [eax+4] 66h +
jnz loc_1005133  +
lea ecx [ebp+var_18] +
mov [ebx-4] ecx +
mov ebx [ebx+0Ch] +
mov [ebp+var_18] eax +
mov eax [ebp+arg_10] +
mov [ebp+var_14] eax +
cmp ebx 0FFFFFFFEh +
jz loc_1005098  +
jmp loc_1005040  +
lea edx [ebx+ebx*2] +
mov ecx [esi+edx*4+14h] +
lea eax [esi+edx*4+10h] +
mov [ebp+var_10] eax +
mov eax [eax] +
mov [ebp+var_8] eax +
test ecx ecx +
jz loc_100506B  +
mov edx edi +
call @_EH4_CallFilterFunc@8  +
mov [ebp+var_1] 1 +
test eax eax +
jl loc_10050A2  +
jg loc_10050AB  +
mov eax [ebp+var_8] +
mov ebx eax +
cmp eax 0FFFFFFFEh +
jnz loc_1005040  +
cmp [ebp+var_1] 0 +
jz loc_1005098  +
mov eax [esi] +
cmp eax 0FFFFFFFEh +
jz loc_100508A  +
mov ecx [esi+4] +
add ecx edi +
xor ecx [eax+edi] +
call [ebp+arg_4]  +
mov ecx [esi+0Ch] +
mov edx [esi+8] +
add ecx edi +
xor ecx [edx+edi] +
call [ebp+arg_4]  +
mov eax [ebp+var_C] +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
retn   +
mov [ebp+var_C] 0 +
jmp loc_1005078  +
mov eax [ebp+arg_8] +
cmp dword ptr [eax] 0E06D7363h +
jnz loc_10050DF  +
cmp dword_100B248 0 +
jz loc_10050DF  +
push offset dword_100B248  +
call sub_1005249  +
add esp 4 +
test eax eax +
jz loc_10050DF  +
mov ecx [ebp+arg_8] +
push 1  +
push ecx  +
call dword_100B248  +
add esp 8 +
mov ecx [ebp+arg_C] +
call @_EH4_GlobalUnwind@4  +
mov eax [ebp+arg_C] +
cmp [eax+0Ch] ebx +
jz loc_1005100  +
mov edx [ebp+arg_0] +
push edx  +
push edi  +
mov edx ebx +
mov ecx eax +
call @_EH4_LocalUnwind@16  +
mov eax [ebp+arg_C] +
mov ecx [ebp+var_8] +
mov [eax+0Ch] ecx +
mov eax [esi] +
cmp eax 0FFFFFFFEh +
jz loc_1005118  +
mov ecx [esi+4] +
add ecx edi +
xor ecx [eax+edi] +
call [ebp+arg_4]  +
mov ecx [esi+0Ch] +
mov edx [esi+8] +
add ecx edi +
xor ecx [edx+edi] +
call [ebp+arg_4]  +
mov eax [ebp+var_10] +
mov ecx [eax+8] +
mov edx edi +
call @_EH4_TransferToHandler@8  +
mov edx 0FFFFFFFEh +
cmp [ebx+0Ch] edx +
jz loc_1005098  +
mov ecx [ebp+arg_0] +
push ecx  +
push edi  +
mov ecx ebx +
call @_EH4_LocalUnwind@16  +
jmp loc_1005078  +
***
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov eax [eax] +
cmp dword ptr [eax] 0E06D7363h +
jnz loc_1005194  +
cmp dword ptr [eax+10h] 3 +
jnz loc_1005194  +
mov eax [eax+14h] +
cmp eax 19930520h +
jz loc_100518E  +
cmp eax 19930521h +
jz loc_100518E  +
cmp eax 19930522h +
jz loc_100518E  +
cmp eax 1994000h +
jnz loc_1005194  +
call ds:?terminate@@YAXXZ  +
xor eax eax +
pop ebp  +
retn 4  +
***
push (offset dword_1005154+3)  +
call ds:SetUnhandledExceptionFilter  +
xor eax eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
mov eax 5A4Dh +
cmp [ecx] ax +
jz loc_10051D6  +
xor eax eax +
pop ebp  +
retn   +
mov eax [ecx+3Ch] +
add eax ecx +
cmp dword ptr [eax] 4550h +
jnz loc_10051D2  +
xor edx edx +
mov ecx 10Bh +
cmp [eax+18h] cx +
setz dl  +
mov eax edx +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [eax+3Ch] +
add ecx eax +
movzx eax word ptr [ecx+14h] +
push ebx  +
push esi  +
movzx esi word ptr [ecx+6] +
xor edx edx +
push edi  +
lea eax [eax+ecx+18h] +
test esi esi +
jbe loc_100523D  +
mov edi [ebp+arg_4] +
mov ecx [eax+0Ch] +
cmp edi ecx +
jb loc_1005235  +
mov ebx [eax+8] +
add ebx ecx +
cmp edi ebx +
jb loc_100523F  +
inc edx  +
add eax 28h +
cmp edx esi +
jb loc_1005225  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
call __SEH_prolog4  +
and [ebp+ms_exc.disabled] 0 +
mov esi 1000000h +
push esi  +
call sub_10051C0  +
pop ecx  +
test eax eax +
jz loc_10052A6  +
mov eax [ebp+arg_0] +
sub eax esi +
push eax  +
push esi  +
call sub_1005200  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_10052A6  +
mov eax [eax+24h] +
shr eax 1Fh +
not eax  +
and eax 1 +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
jmp loc_10052AF  +
mov eax [ebp-14h] +
mov eax [eax] +
mov eax [eax] +
xor ecx ecx +
cmp eax 0C0000005h +
setz cl  +
mov eax ecx +
retn   +
mov esp [ebp-18h] +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
xor eax eax +
call __SEH_epilog4  +
retn   +
***
mov eax [esp+8+arg_4] +
mov ecx [ebp-10h] +
mov large fs:0 ecx +
pop ecx  +
pop edi  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
push ecx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push offset sub_1004C64  +
push offset dword_100A000  +
call sub_1004FD0  +
add esp 18h +
pop ebp  +
retn   +
***
call ds:_controlfp  +
pop ecx  +
pop ecx  +
retn   +
***
retn   +
***
call __SEH_prolog4  +
xor eax eax +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_10053D5  +
cmp ecx 0FFFFFFFFh +
jz loc_10053D5  +
and [ebp+ms_exc.disabled] eax +
mov edx 5A4Dh +
cmp [ecx] dx +
jnz loc_10053CE  +
mov edx [ecx+3Ch] +
test edx edx +
jl loc_10053CE  +
cmp edx 10000000h +
jnb loc_10053CE  +
lea eax [edx+ecx] +
mov [ebp+var_1C] eax +
cmp dword ptr [eax] 4550h +
jz loc_10053CE  +
jmp loc_10053C9  +
xor eax eax +
inc eax  +
retn   +
mov esp [ebp-18h] +
xor eax eax +
mov [ebp+var_1C] eax +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
call __SEH_epilog4  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
call ds:GetModuleHandleA  +
test eax eax +
jz loc_1005417  +
push eax  +
call sub_100537C  +
test eax eax +
jz loc_1005417  +
movzx eax word ptr [eax+5Ch] +
cmp ax 2 +
jnz loc_100540C  +
push 2  +
pop eax  +
pop ebp  +
retn   +
cmp ax 3 +
jnz loc_1005417  +
xor eax eax +
inc eax  +
pop ebp  +
retn   +
mov eax [ebp+arg_0] +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov eax dword_100A000 +
and [ebp+SystemTimeAsFileTime.dwLowDateTime] 0 +
and [ebp+SystemTimeAsFileTime.dwHighDateTime] 0 +
push ebx  +
push edi  +
mov edi 0BB40E64Eh +
mov ebx 0FFFF0000h +
cmp eax edi +
jz loc_1005453  +
test eax ebx +
jz loc_1005453  +
not eax  +
mov dword_100A004 eax +
jmp loc_10054AE  +
push esi  +
lea eax [ebp+SystemTimeAsFileTime] +
push eax  +
call ds:GetSystemTimeAsFileTime  +
mov esi [ebp+SystemTimeAsFileTime.dwHighDateTime] +
xor esi [ebp+SystemTimeAsFileTime.dwLowDateTime] +
call ds:GetCurrentProcessId  +
xor esi eax +
call ds:GetCurrentThreadId  +
xor esi eax +
call ds:GetTickCount  +
xor esi eax +
lea eax [ebp+PerformanceCount] +
push eax  +
call ds:QueryPerformanceCounter  +
mov eax dword ptr [ebp+PerformanceCount+4] +
xor eax dword ptr [ebp+PerformanceCount] +
xor esi eax +
cmp esi edi +
jz loc_100549A  +
test dword_100A000 ebx +
jnz loc_100549F  +
mov esi 0BB40E64Fh +
mov dword_100A000 esi +
not esi  +
mov dword_100A004 esi +
pop esi  +
pop edi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 328h +
mov dword_100A770 eax +
mov dword_100A76C ecx +
mov dword_100A768 edx +
mov dword_100A764 ebx +
mov dword_100A760 esi +
mov dword_100A75C edi +
mov word_100A788 ss +
mov word_100A77C cs +
mov word_100A758 ds +
mov word_100A754 es +
mov word_100A750 fs +
mov word_100A74C gs +
pushf   +
pop dword_100A780  +
mov eax [ebp+0] +
mov dword_100A774 eax +
mov eax [ebp+4] +
mov dword_100A778 eax +
lea eax [ebp+8] +
mov dword_100A784 eax +
mov eax [ebp-320h] +
mov dword_100A6C0 10001h +
mov eax dword_100A778 +
mov dword_100A67C eax +
mov dword_100A670 0C0000409h +
mov dword_100A674 1 +
mov eax dword_100A000 +
mov [ebp-328h] eax +
mov eax dword_100A004 +
mov [ebp-324h] eax +
push 0  +
call ds:SetUnhandledExceptionFilter  +
push offset ExceptionInfo  +
call ds:UnhandledExceptionFilter  +
push 0C0000409h  +
call ds:GetCurrentProcess  +
push eax  +
call ds:TerminateProcess  +
leave   +
retn   +
***
push esi  +
mov eax [esp+14h] +
or eax eax +
jnz loc_10055D1  +
mov ecx [esp+10h] +
mov eax [esp+0Ch] +
xor edx edx +
div  ecx +
mov ebx eax +
mov eax [esp+8] +
div  ecx +
mov esi eax +
mov eax ebx +
mul  dword ptr [esp+10h] +
mov ecx eax +
mov eax esi +
mul  dword ptr [esp+10h] +
add edx ecx +
jmp loc_1005618  +
mov ecx eax +
mov ebx [esp+10h] +
mov edx [esp+0Ch] +
mov eax [esp+8] +
shr ecx 1 +
rcr ebx 1 +
shr edx 1 +
rcr eax 1 +
or ecx ecx +
jnz loc_10055DF  +
div  ebx +
mov esi eax +
mul  dword ptr [esp+14h] +
mov ecx eax +
mov eax [esp+10h] +
mul  esi +
add edx ecx +
jb loc_100560D  +
cmp edx [esp+0Ch] +
ja loc_100560D  +
jb loc_1005616  +
cmp eax [esp+8] +
jbe loc_1005616  +
dec esi  +
sub eax [esp+10h] +
sbb edx [esp+14h] +
xor ebx ebx +
sub eax [esp+8] +
sbb edx [esp+0Ch] +
neg edx  +
neg eax  +
sbb edx 0 +
mov ecx edx +
mov edx ebx +
mov ebx ecx +
mov ecx eax +
mov eax esi +
pop esi  +
retn 10h  +
***
mov ebx offset unk_100A020 +
retn   +
***
mov eax [esp+arg_4] +
mov ecx [esp+arg_C] +
or ecx eax +
mov ecx [esp+arg_8] +
jnz loc_1005689  +
mov eax [esp+arg_0] +
mul  ecx +
retn 10h  +
push ebx  +
mul  ecx +
mov ebx eax +
mov eax [esp+4+arg_0] +
mul  [esp+4+arg_C] +
add ebx eax +
mov eax [esp+4+arg_0] +
mul  ecx +
add edx ebx +
pop ebx  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
push [ebp+cchWideChar]  +
mov edi [ebp+lpWideCharStr] +
push edi  +
push [ebp+cchWideChar]  +
push [ebp+lpMultiByteStr]  +
push 1  +
push 0  +
call ds:MultiByteToWideChar  +
mov esi eax +
xor eax eax +
mov [edi+esi*2] ax +
test esi esi +
jnz loc_10056EA  +
push 459h  +
call ds:SetLastError  +
pop edi  +
mov eax esi +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push esi  +
mov esi ds:RtlAdjustPrivilege +
push offset byte_100B328  +
push 0  +
push 1  +
push 12h  +
call esi  +
test eax eax +
jge loc_1005715  +
xor al al +
pop esi  +
retn   +
push offset byte_100B314  +
push 0  +
push 1  +
push 11h  +
call esi  +
test eax eax +
jl loc_1005711  +
mov byte_100B31C 1 +
mov al 1 +
pop esi  +
retn   +
***
movzx eax byte_100B328 +
push esi  +
mov esi ds:RtlAdjustPrivilege +
push offset byte_100B328  +
push 0  +
push eax  +
push 12h  +
call esi  +
movzx eax byte_100B314 +
push offset byte_100B314  +
push 0  +
push eax  +
push 11h  +
call esi  +
mov byte_100B31C 0 +
pop esi  +
retn   +
***
push dwSize  +
push 0  +
call ds:VirtualAlloc  +
mov lpBuffer eax +
test eax eax +
jnz loc_1005792  +
xor al al +
retn   +
call sub_1008C51  +
test al al +
setnz al  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 34h +
push ebx  +
mov ebx [ebp+lpFileName] +
push esi  +
push edi  +
xor esi esi +
push esi  +
push esi  +
push 3  +
push esi  +
xor edi edi +
inc edi  +
push edi  +
push 80000000h  +
push ebx  +
call ds:CreateFileW  +
cmp eax 0FFFFFFFFh +
jnz loc_10057E6  +
push edi  +
push ebx  +
push lpExistingFileName  +
call ds:CopyFileW  +
test eax eax +
jz loc_10057ED  +
mov ebx lpExistingFileName +
jmp loc_10057ED  +
push eax  +
call ds:CloseHandle  +
push edi  +
lea eax [ebp+var_1C] +
push eax  +
call ds:RtlCreateSecurityDescriptor  +
cmp eax esi +
jge loc_1005808  +
push eax  +
call ds:RtlNtStatusToDosError  +
jmp loc_1005909  +
push esi  +
push esi  +
push edi  +
lea eax [ebp+var_1C] +
push eax  +
call ds:RtlSetDaclSecurityDescriptor  +
cmp eax esi +
jl loc_10057FC  +
push esi  +
push esi  +
lea eax [ebp+var_8] +
push eax  +
push ebx  +
call ds:RtlDosPathNameToNtPathName_U  +
test al al +
jnz loc_1005834  +
mov eax 0A1h +
jmp loc_1005909  +
lea eax [ebp+var_8] +
mov [ebp+var_2C] eax +
push offset aRegistry  +
lea eax [ebp+var_1C] +
mov edi offset unk_100B320 +
push edi  +
mov [ebp+var_34] 18h +
mov [ebp+var_30] esi +
mov [ebp+var_28] 40h +
mov [ebp+var_24] eax +
mov [ebp+var_20] esi +
call ds:RtlInitUnicodeString  +
mov esi [ebp+arg_0] +
xor eax eax +
lea ebx [esi+84Ch] +
push ebx  +
mov [esi+850h] eax +
mov [esi+85Ch] eax +
mov [esi+860h] eax +
lea eax [esi+848h] +
push 2000000h  +
push eax  +
mov dword ptr [ebx] 18h +
mov dword ptr [esi+858h] 40h +
mov [esi+854h] edi +
call ds:NtOpenKey  +
test eax eax +
jl loc_10057FC  +
push [ebp+arg_8]  +
push edi  +
call ds:RtlInitUnicodeString  +
mov eax [esi+848h] +
and dword ptr [esi+85Ch] 0 +
and dword ptr [esi+860h] 0 +
push ebx  +
mov dword ptr [ebx] 18h +
mov [esi+850h] eax +
mov dword ptr [esi+858h] 40h +
mov [esi+854h] edi +
call ds:NtUnloadKey  +
lea eax [ebp+var_34] +
push eax  +
push ebx  +
call ds:NtLoadKey  +
test eax eax +
jl loc_10057FC  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push edi  +
mov edi [ebp+arg_0] +
lea ebx [edi+84Ch] +
push ebx  +
push 2000000h  +
lea eax [ebp+arg_0] +
push eax  +
call ds:NtOpenKey  +
test eax eax +
jl loc_100594B  +
push [ebp+arg_0]  +
call ds:NtFlushKey  +
push [ebp+arg_0]  +
call ds:NtClose  +
push esi  +
mov esi [edi+864h] +
jmp loc_1005971  +
push dword ptr [esi+4]  +
call ds:RegCloseKey  +
mov eax esi +
mov esi [esi] +
push eax  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
test esi esi +
jnz loc_1005954  +
pop esi  +
push ebx  +
call ds:NtUnloadKey  +
test eax eax +
jge loc_1005976  +
push dword ptr [edi+848h]  +
call ds:NtClose  +
pop edi  +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
add esi 864h +
mov eax [esi] +
push edi  +
mov edi [ebp+arg_4] +
jmp loc_10059B8  +
cmp [eax+4] edi +
jz loc_10059E5  +
mov esi eax +
mov eax [eax] +
test eax eax +
jnz loc_10059AF  +
push 0Ch  +
push eax  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
test eax eax +
jz loc_10059DF  +
and dword ptr [eax] 0 +
mov [eax+4] edi +
mov dword ptr [eax+8] 1 +
mov [esi] eax +
pop edi  +
pop esi  +
pop ebp  +
retn 8  +
inc dword ptr [eax+8]  +
jmp loc_10059DF  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
add ecx 864h +
jmp loc_1005A26  +
mov edx [eax+4] +
cmp edx [ebp+arg_4] +
jnz loc_1005A24  +
dec dword ptr [eax+8]  +
jnz loc_1005A26  +
mov edx [eax] +
push eax  +
push 0  +
mov [ecx] edx +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapFree  +
pop ebp  +
retn 8  +
mov ecx eax +
mov eax [ecx] +
test eax eax +
jnz loc_10059FF  +
jmp loc_1005A20  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push edi  +
mov edi [ebp+arg_8] +
test edi edi +
jnz loc_1005A44  +
xor al al +
jmp loc_1005A67  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
push [ebp+arg_4]  +
push dword ptr [esi]  +
call ds:_wcsnicmp  +
add esp 0Ch +
test eax eax +
jnz loc_1005A64  +
lea eax [edi+edi] +
add [esi] eax +
mov al 1 +
jmp loc_1005A66  +
xor al al +
pop esi  +
pop edi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov eax [ebp+arg_8] +
mov eax [eax] +
push esi  +
push edi  +
mov edi [ebp+arg_4] +
cmp dword ptr [edi] 0 +
mov [ebp+var_4] eax +
jnz loc_1005C9F  +
push 5  +
push offset aUser  +
lea eax [ebp+var_4] +
push eax  +
call sub_1005A33  +
test al al +
jnz loc_1005C66  +
push 11h  +
push offset aHkey_current_u  +
lea eax [ebp+var_4] +
push eax  +
call sub_1005A33  +
test al al +
jnz loc_1005C66  +
push 4  +
push offset aHkcu  +
lea eax [ebp+var_4] +
push eax  +
call sub_1005A33  +
test al al +
jnz loc_1005C66  +
push 12h  +
push offset aHkey_local_mac  +
lea eax [ebp+var_4] +
push eax  +
call sub_1005A33  +
test al al +
jnz loc_1005C46  +
push 4  +
push offset aHklm  +
lea eax [ebp+var_4] +
push eax  +
call sub_1005A33  +
test al al +
jnz loc_1005C46  +
push 11h  +
push offset aHkey_classes_r  +
lea eax [ebp+var_4] +
push eax  +
call sub_1005A33  +
test al al +
jnz loc_1005C26  +
push 4  +
push offset aHkcr  +
lea eax [ebp+var_4] +
push eax  +
call sub_1005A33  +
test al al +
jnz loc_1005C26  +
push 0Ah  +
push offset aHkey_users  +
lea eax [ebp+var_4] +
push eax  +
call sub_1005A33  +
test al al +
mov eax [ebp+var_4] +
jz loc_1005B6F  +
movzx ecx word ptr [eax] +
cmp cx 5Ch +
jnz loc_1005B59  +
inc eax  +
inc eax  +
jmp loc_1005B62  +
test cx cx +
jnz loc_1005C70  +
mov ecx [ebp+arg_0] +
mov ecx [ecx+10h] +
mov [edi] ecx +
jmp loc_1005CA5  +
cmp word ptr [eax] 5Ch +
jnz loc_1005C70  +
mov esi [ebp+arg_0] +
push dword ptr [esi+838h]  +
lea eax [esi+18h] +
push eax  +
lea eax [ebp+var_4] +
push eax  +
call sub_1005A33  +
test al al +
jz loc_1005B98  +
mov eax [esi+8] +
jmp loc_1005BF3  +
push dword ptr [esi+83Ch]  +
lea eax [esi+220h] +
push eax  +
lea eax [ebp+var_4] +
push eax  +
call sub_1005A33  +
test al al +
jz loc_1005BB7  +
mov eax [esi+0Ch] +
jmp loc_1005BF3  +
push dword ptr [esi+840h]  +
lea eax [esi+428h] +
push eax  +
lea eax [ebp+var_4] +
push eax  +
call sub_1005A33  +
test al al +
jz loc_1005BD6  +
mov eax [esi+10h] +
jmp loc_1005BF3  +
push dword ptr [esi+844h]  +
lea eax [esi+630h] +
push eax  +
lea eax [ebp+var_4] +
push eax  +
call sub_1005A33  +
test al al +
jz loc_1005C09  +
mov eax [esi+14h] +
mov [edi] eax +
mov eax [ebp+var_4] +
cmp word ptr [eax] 5Ch +
jnz loc_1005CA5  +
inc eax  +
inc eax  +
jmp loc_1005CA5  +
mov eax [ebp+arg_8] +
push offset aRegistry  +
push dword ptr [eax]  +
call ds:_wcsicmp  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_1005C70  +
and [edi] eax +
mov eax [ebp+var_4] +
jmp loc_1005CA5  +
mov eax [ebp+var_4] +
movzx ecx word ptr [eax] +
cmp cx 5Ch +
jnz loc_1005C36  +
inc eax  +
inc eax  +
jmp loc_1005C3B  +
test cx cx +
jnz loc_1005C70  +
mov ecx [ebp+arg_0] +
mov ecx [ecx+0Ch] +
jmp loc_1005B68  +
mov eax [ebp+var_4] +
movzx ecx word ptr [eax] +
cmp cx 5Ch +
jnz loc_1005C56  +
inc eax  +
inc eax  +
jmp loc_1005C5B  +
test cx cx +
jnz loc_1005C70  +
mov ecx [ebp+arg_0] +
mov ecx [ecx+8] +
jmp loc_1005B68  +
mov eax [ebp+arg_0] +
mov edx [eax+14h] +
test edx edx +
jnz loc_1005C7F  +
push 0A1h  +
call ds:SetLastError  +
xor al al +
jmp loc_1005CAC  +
mov eax [ebp+var_4] +
movzx ecx word ptr [eax] +
cmp cx 5Ch +
jnz loc_1005C8F  +
inc eax  +
inc eax  +
jmp loc_1005C9B  +
cmp word ptr [eax-2] 3Ah +
jz loc_1005C9B  +
test cx cx +
jnz loc_1005C70  +
mov [edi] edx +
jmp loc_1005CA5  +
cmp word ptr [eax] 5Ch +
jz loc_1005C70  +
mov ecx [ebp+arg_8] +
mov [ecx] eax +
mov al 1 +
pop edi  +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
lea eax [ebp+lpSubKey] +
push eax  +
lea eax [ebp+hKey] +
push eax  +
push [ebp+arg_0]  +
call sub_1005A71  +
test al al +
jnz loc_1005CDE  +
call ds:GetLastError  +
jmp locret_1005DCC  +
push ebx  +
xor ebx ebx +
cmp [ebp+hKey] ebx +
jnz loc_1005CFF  +
mov eax [ebp+lpdwDisposition] +
mov dword ptr [eax] 2 +
mov eax [ebp+arg_18] +
mov dword ptr [eax] 8000000Ah +
xor eax eax +
jmp loc_1005DCB  +
cmp [ebp+hKey] 8000000Ah +
push esi  +
push edi  +
mov edi [ebp+arg_18] +
jnz loc_1005D6B  +
mov esi ds:_wcsicmp +
push offset aMachine  +
push [ebp+lpSubKey]  +
mov [edi] ebx +
call esi  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_1005D2D  +
mov eax [ebp+arg_0] +
mov eax [eax+8] +
jmp loc_1005D5B  +
push offset aClasses  +
push [ebp+lpSubKey]  +
call esi  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_1005D45  +
mov eax [ebp+arg_0] +
mov eax [eax+0Ch] +
jmp loc_1005D5B  +
push offset aUsers  +
push [ebp+lpSubKey]  +
call esi  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_1005D5D  +
mov eax [ebp+arg_0] +
mov eax [eax+10h] +
mov [edi] eax +
mov eax [edi] +
neg eax  +
sbb eax eax +
and eax 0FFFFFFFDh +
add eax 3 +
jmp loc_1005DC9  +
push [ebp+lpdwDisposition]  +
mov esi [ebp+arg_14] +
push edi  +
lea eax [ebp+SecurityAttributes] +
push eax  +
push [ebp+samDesired]  +
mov [ebp+SecurityAttributes.nLength] 0Ch +
push [ebp+dwOptions]  +
mov [ebp+SecurityAttributes.lpSecurityDescriptor] esi +
push ebx  +
push ebx  +
push [ebp+lpSubKey]  +
mov [ebp+SecurityAttributes.bInheritHandle] ebx +
push [ebp+hKey]  +
call ds:RegCreateKeyExW  +
mov [ebp+lpSubKey] eax +
cmp eax ebx +
jnz loc_1005DC6  +
mov eax [ebp+arg_0] +
cmp dword ptr [eax+4] 4 +
jnz loc_1005DAF  +
push dword ptr [edi]  +
push eax  +
call sub_1005998  +
mov eax [ebp+lpdwDisposition] +
cmp dword ptr [eax] 2 +
jnz loc_1005DC6  +
cmp esi ebx +
jz loc_1005DC6  +
push esi  +
push 4  +
push dword ptr [edi]  +
call ds:RegSetKeySecurity  +
mov eax [ebp+lpSubKey] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 20h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_0] +
lea eax [ebp+lpSubKey] +
push eax  +
lea eax [ebp+hKey] +
push eax  +
push ebx  +
call sub_1005A71  +
test al al +
jnz loc_1005DFB  +
call ds:GetLastError  +
jmp loc_1005EA3  +
cmp [ebp+hKey] 0 +
jnz loc_1005E11  +
mov eax [ebp+phkResult] +
mov dword ptr [eax] 8000000Ah +
xor eax eax +
jmp loc_1005EA3  +
cmp [ebp+hKey] 8000000Ah +
push esi  +
push edi  +
jnz loc_1005E75  +
mov edi [ebp+phkResult] +
mov esi ds:_wcsicmp +
and dword ptr [edi] 0 +
push offset aMachine  +
push [ebp+lpSubKey]  +
call esi  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_1005E3D  +
mov eax [ebx+8] +
jmp loc_1005E65  +
push offset aClasses  +
push [ebp+lpSubKey]  +
call esi  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_1005E52  +
mov eax [ebx+0Ch] +
jmp loc_1005E65  +
push offset aUsers  +
push [ebp+lpSubKey]  +
call esi  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_1005E67  +
mov eax [ebx+10h] +
mov [edi] eax +
mov eax [edi] +
neg eax  +
sbb eax eax +
and eax 0FFFFFFFDh +
add eax 3 +
jmp loc_1005EA1  +
mov esi [ebp+phkResult] +
push esi  +
push [ebp+samDesired]  +
push [ebp+ulOptions]  +
push [ebp+lpSubKey]  +
push [ebp+hKey]  +
call ds:RegOpenKeyExW  +
mov edi eax +
test edi edi +
jnz loc_1005E9F  +
cmp dword ptr [ebx+4] 4 +
jnz loc_1005E9F  +
push dword ptr [esi]  +
push ebx  +
call sub_1005998  +
mov eax edi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+hKey] 8000000Ah +
jnz loc_1005EBF  +
xor eax eax +
jmp loc_1005EE4  +
push esi  +
push [ebp+hKey]  +
call ds:RegCloseKey  +
mov esi eax +
test esi esi +
jnz loc_1005EE1  +
mov eax [ebp+arg_0] +
cmp dword ptr [eax+4] 4 +
jnz loc_1005EE1  +
push [ebp+hKey]  +
push eax  +
call sub_10059EF  +
mov eax esi +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
cmp [ebp+hKey] 8000000Ah +
jnz loc_1005F17  +
mov ecx [ebp+lpcSubKeys] +
cmp ecx eax +
jz loc_1005F0A  +
mov dword ptr [ecx] 2 +
mov ecx [ebp+lpcValues] +
cmp ecx eax +
jz loc_1005F13  +
mov [ecx] eax +
xor eax eax +
jmp loc_1005F31  +
push [ebp+lpftLastWriteTime]  +
push eax  +
push eax  +
push eax  +
push [ebp+lpcValues]  +
push eax  +
push eax  +
push [ebp+lpcSubKeys]  +
push eax  +
push eax  +
push eax  +
push [ebp+hKey]  +
call ds:RegQueryInfoKeyW  +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi [ebp+lpcbData] +
push edi  +
mov edi [ebp+lpData] +
push esi  +
push edi  +
push [ebp+lpType]  +
push 0  +
push [ebp+lpValueName]  +
push [ebp+hKey]  +
call ds:RegQueryValueExW  +
mov ebx eax +
test ebx ebx +
jnz loc_1005F7C  +
mov eax [esi] +
push 4  +
mov ecx eax +
pop edx  +
and ecx 3 +
sub edx ecx +
push edx  +
lea eax [eax+edi-1] +
push ebx  +
push eax  +
call memset  +
add esp 0Ch +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+cbData]  +
push [ebp+lpData]  +
push [ebp+dwType]  +
push 0  +
push [ebp+lpValueName]  +
push [ebp+hKey]  +
call ds:RegSetValueExW  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
lea eax [ebp+lpSubKey] +
push eax  +
lea eax [ebp+hKey] +
push eax  +
push [ebp+arg_0]  +
call sub_1005A71  +
test al al +
jnz loc_1005FD0  +
call ds:GetLastError  +
jmp loc_1005FDC  +
push [ebp+lpSubKey]  +
push [ebp+hKey]  +
call ds:RegDeleteKeyW  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+lpValueName]  +
push [ebp+hKey]  +
call ds:RegDeleteValueW  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push ebx  +
push edi  +
xor edi edi +
push edi  +
push edi  +
push 3  +
push edi  +
push 7  +
push 120089h  +
push [ebp+lpFileName]  +
call ds:CreateFileW  +
mov ebx eax +
cmp ebx 0FFFFFFFFh +
jnz loc_1006032  +
call ds:GetLastError  +
jmp loc_1006283  +
push esi  +
push edi  +
push ebx  +
call ds:GetFileSize  +
mov esi eax +
cmp esi 0FFFFFFFFh +
jnz loc_100604E  +
push ebx  +
call ds:CloseHandle  +
jmp loc_100610D  +
push 4  +
push 1000h  +
lea eax [esi+esi+2] +
push eax  +
push 0  +
call ds:VirtualAlloc  +
mov [ebp+lpBuffer] eax +
test eax eax +
jz loc_10060BA  +
push 0  +
lea ecx [ebp+NumberOfBytesRead] +
push ecx  +
push esi  +
push eax  +
push ebx  +
call ds:ReadFile  +
test eax eax +
jz loc_10060C9  +
cmp [ebp+NumberOfBytesRead] esi +
jz loc_1006086  +
push 26h  +
pop edi  +
jmp loc_10060A8  +
mov eax [ebp+arg_4] +
add eax 4 +
push eax  +
xor edi edi +
push edi  +
push edi  +
push ebx  +
call ds:GetFileTime  +
test eax eax +
jnz loc_10060A4  +
call ds:GetLastError  +
mov edi eax +
test edi edi +
jz loc_10060C9  +
push 8000h  +
push 0  +
push [ebp+lpBuffer]  +
call ds:VirtualFree  +
jmp loc_10060C9  +
call ds:GetLastError  +
mov edi eax +
test edi edi +
jnz loc_10060C9  +
push 0Eh  +
pop edi  +
push ebx  +
call ds:CloseHandle  +
test edi edi +
jz loc_10060DB  +
mov eax edi +
jmp loc_1006282  +
mov edi [ebp+lpBuffer] +
push 0  +
push esi  +
push edi  +
mov ebx edi +
call ds:IsTextUnicode  +
test eax eax +
jnz loc_1006118  +
push esi  +
add edi esi +
push ebx  +
push edi  +
call ds:memmove  +
add esp 0Ch +
push esi  +
push ebx  +
push edi  +
call sub_10056B5  +
mov esi eax +
mov [ebp+var_10] esi +
test esi esi +
jnz loc_100613D  +
call ds:GetLastError  +
jmp loc_1006282  +
movzx eax word ptr [edi] +
shr esi 1 +
mov ecx 0FEFFh +
mov [ebp+var_10] esi +
cmp ax cx +
jz loc_1006134  +
mov ecx 0FFFEh +
cmp ax cx +
jnz loc_100613F  +
dec esi  +
lea ebx [edi+2] +
mov [ebp+var_10] esi +
jmp loc_100613F  +
mov edi ebx +
xor ecx ecx +
mov [ebp+var_8] ecx +
mov edx edi +
mov [ebp+var_4] ecx +
cmp esi ecx +
jbe loc_100625B  +
test ecx ecx +
jbe loc_1006289  +
cmp word ptr [ebx-2] 5Ch +
jnz loc_1006289  +
movzx eax word ptr [ebx] +
cmp ax 0Dh +
jz loc_1006177  +
cmp ax 0Ah +
jnz loc_1006289  +
lea eax [edx-2] +
cmp word ptr [eax] 5Ch +
jnz loc_100618D  +
jmp loc_100618B  +
lea eax [edx-2] +
cmp word ptr [eax] 20h +
ja loc_1006191  +
mov edx eax +
cmp edx edi +
ja loc_1006182  +
cmp word ptr [edx] 20h +
jnz loc_1006199  +
inc edx  +
inc edx  +
xor edi edi +
cmp ecx esi +
jnb loc_1006206  +
inc ecx  +
movzx eax word ptr [ebx] +
cmp ax 0Ah +
jnz loc_10061B1  +
inc [ebp+var_4]  +
inc ecx  +
inc ebx  +
inc ebx  +
jmp loc_10061CB  +
cmp ax 0Dh +
jnz loc_10061D1  +
cmp ecx esi +
jnb loc_10061D1  +
cmp word ptr [ebx+2] 0Ah +
jnz loc_10061D1  +
add [ebp+var_4] 2 +
inc ecx  +
inc ecx  +
add ebx 4 +
inc edi  +
cmp [ebp+var_4] esi +
jb loc_10061A0  +
cmp edi 1 +
jbe loc_1006206  +
add [ebp+var_8] edi +
jz loc_1006227  +
mov ecx [ebp+var_8] +
push 0Ah  +
pop eax  +
movzx esi ax +
mov eax esi +
shl esi 10h +
or eax esi +
shr ecx 1 +
mov edi edx +
stos   +
adc ecx ecx +
stos   +
mov eax [ebp+var_8] +
lea edx [edx+eax*2] +
dec [ebp+var_8]  +
jnz loc_10061FC  +
mov esi [ebp+var_10] +
jmp loc_1006227  +
inc [ebp+var_8]  +
cmp [ebp+var_4] esi +
jnb loc_1006230  +
movzx eax word ptr [ebx] +
cmp ax 20h +
jz loc_100621D  +
cmp ax 9 +
jnz loc_1006227  +
inc [ebp+var_4]  +
inc ebx  +
inc ebx  +
cmp [ebp+var_4] esi +
jb loc_100620E  +
cmp [ebp+var_4] esi +
jb loc_1006330  +
mov edi [ebp+lpBuffer] +
mov ecx [ebp+var_8] +
test ecx ecx +
jz loc_100625B  +
push 0Ah  +
pop eax  +
movzx esi ax +
mov eax esi +
shl esi 10h +
or eax esi +
shr ecx 1 +
mov edi edx +
stos   +
adc ecx ecx +
stos   +
mov eax [ebp+var_8] +
mov edi [ebp+lpBuffer] +
lea edx [edx+eax*2] +
mov ecx [ebp+lpFileName] +
push 0Ah  +
pop eax  +
mov [edx] ax +
inc edx  +
inc edx  +
xor eax eax +
mov [edx] ax +
mov eax [ebp+arg_4] +
mov [eax] ecx +
mov [eax+0Ch] edi +
mov [eax+10h] edx +
mov [eax+14h] edi +
mov dword ptr [eax+18h] 1 +
xor eax eax +
pop esi  +
pop edi  +
pop ebx  +
leave   +
retn 8  +
movzx eax word ptr [ebx] +
cmp ax 0Dh +
jnz loc_1006299  +
cmp word ptr [ebx+2] 0Ah +
jz loc_10062A3  +
cmp ax 0Ah +
jnz loc_1006335  +
mov edi [ebp+var_4] +
jmp loc_10062BD  +
movzx eax word ptr [ebx] +
cmp ax 0Dh +
jz loc_10062B7  +
cmp ax 0Ah +
jnz loc_10062C1  +
inc edi  +
inc ebx  +
mov [ebp+var_4] edi +
inc ebx  +
cmp edi esi +
jb loc_10062A8  +
mov eax ebx +
cmp edi esi +
jnb loc_10062EE  +
movzx ecx word ptr [eax] +
cmp cx 20h +
jz loc_10062D6  +
cmp cx 9 +
jnz loc_10062DD  +
inc edi  +
inc eax  +
inc eax  +
cmp edi esi +
jb loc_10062C7  +
cmp edi esi +
jnb loc_10062EE  +
cmp word ptr [eax] 0Dh +
jnz loc_10062EE  +
cmp word ptr [eax+2] 0Ah +
jz loc_10062F4  +
cmp word ptr [eax] 0Ah +
jnz loc_10062FB  +
mov ebx eax +
mov [ebp+var_4] edi +
jmp loc_10062A3  +
mov ecx [ebp+var_8] +
test ecx ecx +
jz loc_1006328  +
push 0Ah  +
pop eax  +
movzx esi ax +
mov eax esi +
shl esi 10h +
or eax esi +
shr ecx 1 +
mov edi edx +
stos   +
adc ecx ecx +
stos   +
mov eax [ebp+var_8] +
lea edx [edx+eax*2] +
dec [ebp+var_8]  +
jnz loc_1006320  +
mov esi [ebp+var_10] +
push 0Ah  +
pop eax  +
mov [edx] ax +
inc edx  +
inc edx  +
mov edi [ebp+lpBuffer] +
jmp loc_1006340  +
inc ecx  +
mov [edx] ax +
inc edx  +
inc edx  +
inc ebx  +
mov [ebp+var_4] ecx +
inc ebx  +
mov ecx [ebp+var_4] +
cmp ecx esi +
jb loc_1006151  +
jmp loc_1006233  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push 8000h  +
push 0  +
push dword ptr [eax+0Ch]  +
call ds:VirtualFree  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
push ebx  +
push esi  +
mov esi [eax] +
push edi  +
xor ecx ecx +
jmp loc_100638F  +
cmp ax 22h +
jz loc_1006397  +
inc esi  +
inc esi  +
movzx eax word ptr [esi] +
cmp ax cx +
jnz loc_1006387  +
mov eax [ebp+arg_8] +
mov ebx [eax] +
mov edi [ebp+arg_10] +
cmp [esi] cx +
jnz loc_10063AF  +
push ecx  +
call ds:SetLastError  +
xor al al +
jmp loc_10063E4  +
push 2  +
pop edx  +
jmp loc_10063DB  +
cmp word ptr [esi] 22h +
jnz loc_10063CA  +
cmp [ebp+arg_0] cl +
jnz loc_1006407  +
lea eax [esi+2] +
cmp word ptr [eax] 22h +
jnz loc_1006407  +
mov esi eax +
mov eax [ebp+arg_C] +
add [edi] edx +
cmp [edi] eax +
jnb loc_1006410  +
mov ax [esi] +
mov [ebx] ax +
add ebx edx +
add esi edx +
cmp [esi] cx +
jnz loc_10063B4  +
mov al 1 +
mov ecx [ebp+arg_C] +
add dword ptr [edi] 2 +
cmp [edi] ecx +
jnb loc_1006410  +
xor ecx ecx +
mov [ebx] cx +
mov ecx [ebp+arg_8] +
add ebx 2 +
mov [ecx] ebx +
mov ecx [ebp+arg_4] +
mov [ecx] esi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 14h  +
xor eax eax +
mov [esi] ax +
add esi edx +
jmp loc_10063E2  +
push 6Fh  +
call ds:SetLastError  +
xor al al +
jmp loc_1006400  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
lea eax [ebp+var_20] +
push eax  +
push [ebp+lpFileName]  +
call sub_1005FFF  +
test eax eax +
jnz loc_1006447  +
mov eax [ebp+arg_0] +
mov dword ptr [eax+10h] 2 +
xor al al +
jmp locret_100649B  +
mov eax [ebp+var_C] +
push ebx  +
push esi  +
mov esi [ebp+arg_10] +
mov [ebp+arg_10] eax +
mov eax [ebp+arg_C] +
push edi  +
mov edi [esi] +
xor ebx ebx +
mov [esi] ebx +
mov [ebp+lpFileName] eax +
push esi  +
push edi  +
lea eax [ebp+lpFileName] +
push eax  +
lea eax [ebp+arg_10] +
push eax  +
push [ebp+arg_4]  +
call sub_1006376  +
test al al +
jnz loc_100645F  +
call ds:GetLastError  +
test eax eax +
jnz loc_1006483  +
mov bl 1 +
jmp loc_100648D  +
mov eax [ebp+arg_0] +
mov dword ptr [eax+10h] 1 +
lea eax [ebp+var_20] +
push eax  +
call sub_1006355  +
pop edi  +
pop esi  +
mov al bl +
pop ebx  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
xor ebx ebx +
push ebx  +
push ebx  +
push 3  +
push ebx  +
push 7  +
push 120089h  +
push [ebp+hObject]  +
mov [ebp+FileSizeHigh] ebx +
mov [ebp+NumberOfBytesRead] ebx +
call ds:CreateFileW  +
mov [ebp+hObject] eax +
cmp eax 0FFFFFFFFh +
jnz loc_10064E2  +
mov eax [ebp+arg_0] +
mov dword ptr [eax+10h] 2 +
xor al al +
jmp loc_1006563  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
lea ecx [ebp+FileSizeHigh] +
push ecx  +
push eax  +
mov dword ptr [edi+10h] 1 +
call ds:GetFileSize  +
mov esi eax +
cmp [ebp+FileSizeHigh] ebx +
jnz loc_100654E  +
cmp esi 0FFFFFFFFh +
jz loc_100654E  +
mov eax [ebp+arg_C] +
cmp esi [eax] +
jnb loc_100654E  +
push ebx  +
lea eax [ebp+NumberOfBytesRead] +
push eax  +
push esi  +
push [ebp+lpBuffer]  +
mov byte ptr [ebp+arg_0+3] bl +
push [ebp+hObject]  +
call ds:ReadFile  +
test eax eax +
jz loc_1006540  +
cmp [ebp+NumberOfBytesRead] esi +
jz loc_1006534  +
push 26h  +
call ds:SetLastError  +
jmp loc_1006540  +
mov eax [ebp+arg_C] +
mov [edi+10h] ebx +
mov [eax] esi +
mov byte ptr [ebp+arg_0+3] 1 +
push [ebp+hObject]  +
call ds:CloseHandle  +
mov al byte ptr [ebp+arg_0+3] +
jmp loc_1006561  +
push [ebp+hObject]  +
call ds:CloseHandle  +
push 6Fh  +
call ds:SetLastError  +
xor al al +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
push esi  +
test ecx ecx +
jz loc_10065A3  +
movzx eax word ptr [ecx] +
test ax ax +
jz loc_10065FF  +
cmp ax 20h +
jz loc_10065F2  +
mov eax ecx +
lea esi [eax+2] +
mov dx [eax] +
inc eax  +
inc eax  +
test dx dx +
jnz loc_100658D  +
sub eax esi +
sar eax 1 +
cmp word ptr [ecx+eax*2-2] 20h +
jmp loc_10065F0  +
mov ecx [ebp+arg_4] +
mov eax ecx +
lea esi [eax+2] +
mov dx [eax] +
inc eax  +
inc eax  +
test dx dx +
jnz loc_10065AB  +
movzx edx word ptr [ecx] +
sub eax esi +
sar eax 1 +
test dx dx +
jz loc_10065FF  +
cmp dx 20h +
jz loc_10065F2  +
movzx eax word ptr [ecx+eax*2-2] +
cmp ax 20h +
jz loc_10065F2  +
cmp ax 5Ch +
jz loc_10065F2  +
cmp dx 22h +
jnz loc_10065E7  +
cmp ax dx +
jnz loc_10065E7  +
push 27h  +
jmp loc_10065F4  +
cmp dx 27h +
jnz loc_10065FF  +
cmp ax dx +
jnz loc_10065FF  +
push 22h  +
mov ecx [ebp+arg_8] +
pop eax  +
mov [ecx] ax +
mov al 1 +
jmp loc_1006601  +
xor al al +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
lea eax [ebp+var_4] +
push eax  +
push 0  +
push [ebp+arg_C]  +
call sub_100656D  +
test al al +
jz loc_1006644  +
movzx eax word ptr [ebp+var_4] +
push eax  +
push [ebp+arg_C]  +
push eax  +
push offset asc_100A328  +
push [ebp+arg_8]  +
push offset a_SCWsC  +
push [ebp+arg_4]  +
call [ebp+arg_0]  +
add esp 1Ch +
jmp locret_100665D  +
push [ebp+arg_C]  +
push offset asc_100A328  +
push [ebp+arg_8]  +
push offset a_SWs  +
push [ebp+arg_4]  +
call [ebp+arg_0]  +
add esp 14h +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 214h +
mov eax dword_100A000 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push ebx  +
mov ebx [ebp+hKey] +
mov [ebp+var_214] eax +
mov eax [ebp+arg_4] +
push esi  +
mov [ebp+var_210] eax +
mov eax [ebp+pSecurityDescriptor] +
push edi  +
test ebx ebx +
jz loc_1006736  +
mov edi ds:RegGetKeySecurity +
and [ebp+cbSecurityDescriptor] 0 +
lea ecx [ebp+cbSecurityDescriptor] +
push ecx  +
push eax  +
push 4  +
push ebx  +
call edi  +
cmp eax 7Ah +
jnz loc_1006771  +
push [ebp+cbSecurityDescriptor]  +
mov esi ds:GetProcessHeap +
push 0  +
call esi  +
push eax  +
call ds:HeapAlloc  +
mov [ebp+lpMem] eax +
test eax eax +
jz loc_1006771  +
lea ecx [ebp+cbSecurityDescriptor] +
push ecx  +
push eax  +
push 4  +
push ebx  +
call edi  +
test eax eax +
jz loc_100670A  +
push [ebp+lpMem]  +
push 0  +
call esi  +
push eax  +
call ds:HeapFree  +
jmp loc_1006771  +
push 100h  +
lea eax [ebp+var_204] +
push eax  +
push [ebp+lpMem]  +
call sub_100903A  +
push [ebp+lpMem]  +
mov bl al +
push 0  +
call esi  +
push eax  +
call ds:HeapFree  +
jmp loc_100674E  +
test eax eax +
jz loc_1006771  +
push 100h  +
lea ecx [ebp+var_204] +
push ecx  +
push eax  +
call sub_100903A  +
mov bl al +
test bl bl +
jz loc_1006771  +
push 5Dh  +
lea eax [ebp+var_204] +
push eax  +
push 5Bh  +
push offset aWcWsWc  +
push [ebp+var_210]  +
call [ebp+var_214]  +
add esp 14h +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1004C64  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
cmp [ebp+arg_14] 8 +
mov eax [ebp+arg_10] +
push ebx  +
push esi  +
mov [ebp+var_8] eax +
mov esi offset asc_100A328 +
jnz loc_10067D0  +
cmp eax 24h +
jb loc_1006B88  +
mov ebx [ebp+arg_18] +
mov eax [ebx] +
push eax  +
mov [ebp+var_10] eax +
mov eax [ebp+arg_C] +
add ebx 4 +
push esi  +
dec eax  +
push eax  +
push offset a_SnumberOfFull  +
push [ebp+arg_8]  +
mov [ebp+arg_18] ebx +
call [ebp+arg_4]  +
add esp 14h +
jmp loc_10067F2  +
cmp [ebp+arg_14] 9 +
jnz loc_1006B88  +
cmp eax 20h +
jb loc_1006B88  +
mov eax [ebp+arg_18] +
mov [ebp+var_10] 1 +
mov [ebp+arg_18] eax +
mov ebx eax +
and [ebp+arg_10] 0 +
cmp [ebp+var_10] 0 +
jbe loc_1006B88  +
push edi  +
jmp loc_1006806  +
mov ebx [ebp+arg_18] +
push [ebp+arg_10]  +
mov edi [ebp+arg_C] +
push esi  +
lea eax [edi+3] +
push eax  +
push offset a_SpartialListN  +
push [ebp+arg_8]  +
call [ebp+arg_4]  +
mov eax [ebx] +
add esp 14h +
inc eax  +
cmp eax 0Fh +
ja loc_100689E  +
jmp ds:off_1006B8F[eax*4]  +
mov eax offset aUndefined +
jmp loc_10068A3  +
mov eax offset aInternal +
jmp loc_10068A3  +
mov eax offset aIsa +
jmp loc_10068A3  +
mov eax offset aEisa +
jmp loc_10068A3  +
mov eax offset aMicrochannel +
jmp loc_10068A3  +
mov eax offset aTurbochannel +
jmp loc_10068A3  +
mov eax offset aPci +
jmp loc_10068A3  +
mov eax offset aVme +
jmp loc_10068A3  +
mov eax offset aNubus +
jmp loc_10068A3  +
mov eax offset aPcmcia +
jmp loc_10068A3  +
mov eax offset aCbus +
jmp loc_10068A3  +
mov eax offset aMpi +
jmp loc_10068A3  +
mov eax offset aMpsa +
jmp loc_10068A3  +
mov eax offset aProcessorinter +
jmp loc_10068A3  +
mov eax offset aInternalpower +
jmp loc_10068A3  +
mov eax offset aPnpIsa +
jmp loc_10068A3  +
mov eax offset aInvalidBusType +
push eax  +
push esi  +
add edi 7 +
push edi  +
push offset a_Sinterface_ty  +
push [ebp+arg_8]  +
call [ebp+arg_4]  +
push dword ptr [ebx+4]  +
push esi  +
push edi  +
push offset a_Sbus_numberD  +
push [ebp+arg_8]  +
call [ebp+arg_4]  +
mov eax [ebx+0Ch] +
mov ecx eax +
shl ecx 4 +
add esp 28h +
cmp [ebp+var_8] ecx +
jb loc_1006B74  +
sub [ebp+var_8] ecx +
and [ebp+var_4] 0 +
test eax eax +
jbe loc_1006B5A  +
lea edi [ebx+12h] +
push [ebp+var_4]  +
mov ebx [ebp+arg_C] +
push esi  +
add ebx 0Bh +
push ebx  +
push offset a_SdescriptorNu  +
push [ebp+arg_8]  +
call [ebp+arg_4]  +
lea eax [edi-2] +
mov [ebp+var_C] eax +
movzx eax byte ptr [edi-1] +
add esp 14h +
sub eax 0 +
jz loc_1006937  +
dec eax  +
jz loc_1006930  +
dec eax  +
jz loc_1006929  +
dec eax  +
jz loc_1006922  +
mov eax offset aInvalidShareDi +
jmp loc_100693C  +
mov eax offset aCmresourceshar +
jmp loc_100693C  +
mov eax offset aCmresourcedriv +
jmp loc_100693C  +
mov eax offset aCmresourcedevi +
jmp loc_100693C  +
mov eax offset aCmresourcesh_0 +
push eax  +
push esi  +
push ebx  +
push offset a_SshareDisposi  +
push [ebp+arg_8]  +
call [ebp+arg_4]  +
mov eax [ebp+var_C] +
movzx eax byte ptr [eax] +
add esp 14h +
sub eax 0 +
mov [ebp+arg_14] offset aInvalidFlags +
jz loc_1006A03  +
dec eax  +
jz loc_10069E0  +
dec eax  +
jz loc_10069BD  +
dec eax  +
jz loc_100698D  +
dec eax  +
jz loc_1006986  +
dec eax  +
jz loc_100697C  +
mov eax offset aInvalidType +
jmp loc_1006A0F  +
mov eax offset aDeviceSpecific +
jmp loc_1006A08  +
mov eax offset aDma +
jmp loc_1006A08  +
movzx ecx word ptr [edi] +
mov eax offset aMemory +
test cx cx +
jnz loc_10069A1  +
mov [ebp+arg_14] offset aCm_resource_me +
cmp cx 1 +
jnz loc_10069AE  +
mov [ebp+arg_14] offset aCm_resource__0 +
cmp cx 2 +
jnz loc_1006A0F  +
mov [ebp+arg_14] offset aCm_resource__1 +
jmp loc_1006A0F  +
movzx ecx word ptr [edi] +
mov eax offset aInterrupt +
test cx cx +
jnz loc_10069D1  +
mov [ebp+arg_14] offset aCm_resource_in +
cmp cx 1 +
jnz loc_1006A0F  +
mov [ebp+arg_14] offset aCm_resource__2 +
jmp loc_1006A0F  +
movzx ecx word ptr [edi] +
mov eax offset aPort +
test cx cx +
jnz loc_10069F4  +
mov [ebp+arg_14] offset aCm_resource_po +
cmp cx 1 +
jnz loc_1006A0F  +
mov [ebp+arg_14] offset aCm_resource__3 +
jmp loc_1006A0F  +
mov eax offset aNull +
mov [ebp+arg_14] offset aUnused +
push eax  +
push esi  +
push ebx  +
push offset a_StypeWs  +
push [ebp+arg_8]  +
call [ebp+arg_4]  +
push [ebp+arg_14]  +
push esi  +
push ebx  +
push offset a_SflagsWs  +
push [ebp+arg_8]  +
call [ebp+arg_4]  +
mov eax [ebp+var_C] +
movzx eax byte ptr [eax] +
mov ecx eax +
add esp 28h +
dec ecx  +
jz loc_1006B22  +
dec ecx  +
jz loc_1006B07  +
dec ecx  +
jz loc_1006AF5  +
dec ecx  +
jz loc_1006AE6  +
dec ecx  +
jz loc_1006A6D  +
push eax  +
push esi  +
push ebx  +
push offset a_SUnknownResou  +
push [ebp+arg_8]  +
call [ebp+arg_4]  +
add esp 14h +
jmp loc_1006B38  +
push dword ptr [edi+2]  +
push esi  +
push ebx  +
push offset a_Sdatasize0x08  +
push [ebp+arg_8]  +
call [ebp+arg_4]  +
mov ebx eax +
lea eax [edi+0Eh] +
mov [ebp+arg_14] eax +
mov eax [edi+2] +
add eax 3 +
shr eax 2 +
add esp 14h +
test eax eax +
jbe loc_1006AD7  +
mov [ebp+var_14] eax +
lea eax [ebx+0Bh] +
cmp eax [ebp+arg_0] +
jb loc_1006AB9  +
mov eax [ebp+arg_C] +
push esi  +
add eax 0Bh +
push eax  +
push offset a_S  +
push [ebp+arg_8]  +
call [ebp+arg_4]  +
mov ebx eax +
add esp 10h +
dec ebx  +
mov eax [ebp+arg_14] +
push dword ptr [eax]  +
push offset a0x08lx  +
push [ebp+arg_8]  +
call [ebp+arg_4]  +
add [ebp+arg_14] 4 +
add esp 0Ch +
add ebx eax +
dec [ebp+var_14]  +
jnz loc_1006A98  +
push offset dword_10011DC  +
push [ebp+arg_8]  +
call [ebp+arg_4]  +
pop ecx  +
pop ecx  +
jmp loc_1006B38  +
push dword ptr [edi+6]  +
push dword ptr [edi+2]  +
push esi  +
push ebx  +
push offset a_SchannelDPort  +
jmp loc_1006B2F  +
push dword ptr [edi+0Ah]  +
push dword ptr [edi+2]  +
push dword ptr [edi+6]  +
push esi  +
push ebx  +
push offset a_Sstart0x08lx0  +
jmp loc_1006B17  +
push dword ptr [edi+0Ah]  +
push dword ptr [edi+6]  +
push dword ptr [edi+2]  +
push esi  +
push ebx  +
push offset a_SlevelDVector  +
push [ebp+arg_8]  +
call [ebp+arg_4]  +
add esp 1Ch +
jmp loc_1006B38  +
push dword ptr [edi+0Ah]  +
push dword ptr [edi+2]  +
push esi  +
push ebx  +
push offset a_Sstart0x08lxL  +
push [ebp+arg_8]  +
call [ebp+arg_4]  +
add esp 18h +
push offset asc_1003200  +
push [ebp+arg_8]  +
call [ebp+arg_4]  +
inc [ebp+var_4]  +
mov eax [ebp+arg_18] +
pop ecx  +
pop ecx  +
mov ecx [ebp+var_4] +
add edi 10h +
cmp ecx [eax+0Ch] +
jb loc_10068EA  +
mov eax [ebp+var_C] +
add eax 10h +
inc [ebp+arg_10]  +
mov [ebp+arg_18] eax +
mov eax [ebp+arg_10] +
cmp eax [ebp+var_10] +
jb loc_1006803  +
jmp loc_1006B87  +
push [ebp+arg_10]  +
push esi  +
push edi  +
push offset a_SInvalidResou  +
push [ebp+arg_8]  +
call [ebp+arg_4]  +
add esp 14h +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 1Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
xor eax eax +
test ecx ecx +
jz loc_1006BEA  +
cmp ecx 7FFFFFFFh +
jbe loc_1006BEF  +
mov eax 80070057h +
test eax eax +
jl loc_1006C3A  +
mov eax [ebp+arg_0] +
push ebx  +
xor ebx ebx +
push esi  +
mov esi ecx +
test ecx ecx +
jz loc_1006C2A  +
mov edx [ebp+arg_8] +
push edi  +
mov edi 7FFFFFFEh +
sub edi ecx +
sub edx eax +
lea ecx [edi+esi] +
test ecx ecx +
jz loc_1006C25  +
movzx ecx word ptr [edx+eax] +
test cx cx +
jz loc_1006C25  +
mov [eax] cx +
inc eax  +
inc eax  +
dec esi  +
jnz loc_1006C0D  +
pop edi  +
test esi esi +
jnz loc_1006C31  +
dec eax  +
dec eax  +
mov ebx 8007007Ah +
xor ecx ecx +
mov [eax] cx +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
xor ebx ebx +
push esi  +
push edi  +
cmp [ebp+lpMachineName] ebx +
jz loc_1006D5F  +
cmp [ebp+arg_8] ebx +
jnz loc_1006EF9  +
cmp [ebp+lpFileName] ebx +
jnz loc_1006EF9  +
mov esi [ebp+arg_10] +
mov edi ds:RegConnectRegistryW +
lea eax [esi+8] +
push eax  +
push 80000002h  +
push [ebp+lpMachineName]  +
call edi  +
mov [ebp+lpFileName] eax +
cmp eax ebx +
jnz loc_1006CCC  +
lea eax [esi+0Ch] +
push eax  +
push 80000000h  +
push [ebp+lpMachineName]  +
call edi  +
mov [ebp+lpFileName] eax +
cmp eax ebx +
jnz loc_1006CCC  +
lea ebx [esi+10h] +
push ebx  +
push 80000003h  +
push [ebp+lpMachineName]  +
call edi  +
mov [ebp+lpFileName] eax +
test eax eax +
jnz loc_1006CCA  +
lea eax [esi+14h] +
push eax  +
push offset a_default  +
push dword ptr [ebx]  +
call ds:RegOpenKeyW  +
mov [ebp+lpFileName] eax +
test eax eax +
jz loc_1006D01  +
xor ebx ebx +
mov eax [esi+8] +
mov edi ds:RegCloseKey +
cmp eax ebx +
jz loc_1006CDF  +
push eax  +
call edi  +
mov [esi+8] ebx +
mov eax [esi+0Ch] +
cmp eax ebx +
jz loc_1006CEC  +
push eax  +
call edi  +
mov [esi+0Ch] ebx +
mov eax [esi+10h] +
cmp eax ebx +
jz loc_1006CF9  +
push eax  +
call edi  +
mov [esi+10h] ebx +
mov eax [ebp+lpFileName] +
jmp loc_1006EFC  +
push offset aRegistryMachin  +
mov edi 104h +
lea eax [esi+18h] +
push edi  +
push eax  +
call sub_1004DFD  +
push offset aRegistryClasse  +
lea eax [esi+220h] +
push edi  +
push eax  +
call sub_1004DFD  +
push offset aRegistryUsers  +
lea eax [esi+428h] +
push edi  +
push eax  +
call sub_1004DFD  +
push offset aRegistryUsers_  +
lea eax [esi+630h] +
push edi  +
push eax  +
call sub_1004DFD  +
add esp 30h +
mov dword ptr [esi+4] 2 +
xor ebx ebx +
mov eax [ebp+arg_C] +
jmp loc_1006E72  +
mov edi [ebp+arg_8] +
cmp edi ebx +
jnz loc_1006E19  +
cmp [ebp+lpFileName] ebx +
jnz loc_1006EF9  +
mov esi [ebp+arg_10] +
push offset aRegistryMachin  +
mov edi 104h +
lea eax [esi+18h] +
push edi  +
push eax  +
mov dword ptr [esi+8] 80000002h +
mov dword ptr [esi+0Ch] 80000000h +
mov dword ptr [esi+10h] 80000003h +
mov dword ptr [esi+14h] 80000001h +
call sub_1004DFD  +
push offset aRegistryClasse  +
lea eax [esi+220h] +
push edi  +
push eax  +
call sub_1004DFD  +
push offset aRegistryUsers  +
lea eax [esi+428h] +
push edi  +
push eax  +
call sub_1004DFD  +
add esp 24h +
lea eax [ebp+var_8] +
push eax  +
call ds:RtlFormatCurrentUserKeyPath  +
cmp eax ebx +
jge loc_1006DF0  +
push eax  +
call ds:RtlNtStatusToDosError  +
push eax  +
call ds:SetLastError  +
xor eax eax +
jmp loc_1006EFC  +
push [ebp+var_4]  +
lea eax [esi+630h] +
push edi  +
push eax  +
call sub_1004DFD  +
add esp 0Ch +
lea eax [ebp+var_8] +
push eax  +
call ds:RtlFreeUnicodeString  +
mov dword ptr [esi+4] 1 +
jmp loc_1006D57  +
cmp [ebp+lpFileName] ebx +
jz loc_1006EF9  +
cmp byte_100B31C bl +
jnz loc_1006E3D  +
call sub_10056F7  +
test al al +
jnz loc_1006E3D  +
mov eax 522h +
jmp loc_1006EFC  +
mov esi [ebp+arg_10] +
push edi  +
push [ebp+lpFileName]  +
mov [esi+8] ebx +
push esi  +
mov [esi+0Ch] ebx +
mov [esi+10h] ebx +
mov [esi+14h] ebx +
call sub_10057A2  +
cmp eax ebx +
jnz loc_1006EFC  +
mov eax [ebp+arg_C] +
cmp eax ebx +
jz loc_1006E6B  +
cmp [eax] ebx +
jnz loc_1006E6B  +
mov [eax] edi +
mov dword ptr [esi+4] 4 +
cmp eax ebx +
jz loc_1006E80  +
cmp [eax] ebx +
jnz loc_1006E80  +
mov dword ptr [eax] offset aRegistry +
lea eax [esi+18h] +
push 2  +
lea edx [eax+2] +
pop edi  +
mov cx [eax] +
add eax edi +
cmp cx bx +
jnz loc_1006E89  +
sub eax edx +
sar eax 1 +
mov [esi+838h] eax +
lea eax [esi+220h] +
lea ecx [eax+2] +
mov dx [eax] +
add eax edi +
cmp dx bx +
jnz loc_1006EA6  +
sub eax ecx +
sar eax 1 +
mov [esi+83Ch] eax +
lea eax [esi+428h] +
lea ecx [eax+2] +
mov dx [eax] +
add eax edi +
cmp dx bx +
jnz loc_1006EC3  +
sub eax ecx +
sar eax 1 +
mov [esi+840h] eax +
lea eax [esi+630h] +
lea ecx [eax+2] +
mov dx [eax] +
add eax edi +
cmp dx bx +
jnz loc_1006EE0  +
sub eax ecx +
sar eax 1 +
mov [esi+844h] eax +
jmp loc_1006DE9  +
push 57h  +
pop eax  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
cmp dword ptr [esi+4] 4 +
jnz loc_1006F1D  +
push esi  +
call sub_1005915  +
cmp byte_100B31C 0 +
jz loc_1006F2B  +
call sub_1005736  +
and dword ptr [esi+4] 0 +
xor eax eax +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+hKey] 8000000Ah +
jnz loc_1006F84  +
cmp [ebp+dwIndex] 0 +
jnz loc_1006F70  +
push offset aMachine  +
mov eax [ebp+lpcbName] +
push dword ptr [eax]  +
push [ebp+lpName]  +
call sub_1006BD4  +
test eax eax +
jge loc_1006F6C  +
mov eax 0EAh +
jmp loc_1006F9E  +
xor eax eax +
jmp loc_1006F9E  +
cmp [ebp+dwIndex] 1 +
jnz loc_1006F7D  +
push offset aUsers  +
jmp loc_1006F54  +
mov eax 103h +
jmp loc_1006F9E  +
push [ebp+lpftLastWriteTime]  +
xor eax eax +
push eax  +
push eax  +
push eax  +
push [ebp+lpcbName]  +
push [ebp+lpName]  +
push [ebp+dwIndex]  +
push [ebp+hKey]  +
call ds:RegEnumKeyExW  +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 38h +
mov eax [ebp+arg_0] +
xor ecx ecx +
mov [ebp+var_8] ecx +
mov byte ptr [ebp+var_C] cl +
mov [ebp+var_2] cl +
mov [ebp+var_1] cl +
mov [ebp+var_3] cl +
cmp eax ecx +
jz loc_1006FCD  +
mov al [eax+1Ch] +
mov byte ptr [ebp+var_C] al +
mov eax [ebp+arg_4] +
mov edx [ebp+arg_18] +
push ebx  +
push esi  +
mov esi [eax+18h] +
mov eax [ebp+arg_14] +
mov [eax] ecx +
push edi  +
mov edi [ebp+arg_10] +
mov [edx] ecx +
mov dword ptr [edi] 1 +
xor ebx ebx +
cmp off_100A3B0 ecx +
jz loc_1007078  +
mov eax offset off_100A3B0 +
mov eax [eax] +
lea edx [eax+2] +
mov [ebp+var_10] eax +
mov [ebp+var_8] edx +
mov dx [eax] +
inc eax  +
inc eax  +
cmp dx cx +
jnz loc_1007007  +
sub eax [ebp+var_8] +
sar eax 1 +
cmp word ptr [esi+eax*2] 20h +
mov [ebp+var_8] eax +
ja loc_1007039  +
push eax  +
push esi  +
push [ebp+var_10]  +
call ds:_wcsnicmp  +
mov edx [ebp+arg_18] +
add esp 0Ch +
test eax eax +
jz loc_100704E  +
xor ecx ecx +
jmp loc_100703C  +
mov edx [ebp+arg_18] +
inc ebx  +
mov eax ebx +
imul eax eax +
lea eax off_100A3B0[eax] +
cmp [eax] ecx +
jnz loc_1006FFC  +
jmp loc_1007078  +
mov eax ebx +
imul eax eax +
mov ecx dword_100A3B4[eax] +
mov [edi] ecx +
mov cl byte_100A3B8[eax] +
mov [ebp+var_2] cl +
mov cl byte_100A3B9[eax] +
mov al byte_100A3BA[eax] +
mov [ebp+var_1] cl +
mov [ebp+var_3] al +
xor ecx ecx +
imul ebx ebx +
cmp off_100A3B0[ebx] ecx +
jz loc_100709B  +
mov eax [ebp+var_8] +
lea esi [esi+eax*2] +
jmp loc_1007093  +
cmp ax 20h +
ja loc_100709B  +
inc esi  +
inc esi  +
movzx eax word ptr [esi] +
cmp ax cx +
jnz loc_100708B  +
cmp [ebp+var_1] 0 +
jz loc_10070C4  +
mov eax [ebp+lpBuffer] +
mov ecx [ebp+arg_14] +
mov edx [ebp+arg_C] +
mov [ecx] eax +
mov ecx [ebp+arg_18] +
push ecx  +
push eax  +
push esi  +
push [ebp+var_C]  +
mov [ecx] edx +
push [ebp+arg_4]  +
call sub_1006421  +
jmp loc_10075A3  +
cmp [ebp+var_2] 0 +
jz loc_10070EA  +
mov eax [ebp+lpBuffer] +
mov ecx [ebp+arg_14] +
mov edx [ebp+arg_C] +
mov [ecx] eax +
mov ecx [ebp+arg_18] +
push ecx  +
push eax  +
push esi  +
push [ebp+arg_4]  +
mov [ecx] edx +
call sub_10064A4  +
jmp loc_10075A3  +
mov eax esi +
lea ebx [eax+2] +
mov [ebp+var_10] ebx +
mov bx [eax] +
inc eax  +
inc eax  +
cmp bx cx +
jnz loc_10070F2  +
sub eax [ebp+var_10] +
mov [ebp+arg_10] esi +
sar eax 1 +
mov ebx eax +
mov eax [edi] +
cmp eax 0Bh +
ja loc_100758F  +
jmp ds:off_10075AB[eax*4]  +
cmp ebx 1 +
jbe loc_100713B  +
movzx eax word ptr [esi] +
cmp ax [esi+ebx*2-2] +
jnz loc_100713B  +
cmp ax 22h +
jz loc_1007133  +
cmp ax 27h +
jnz loc_100713B  +
add esi 2 +
dec ebx  +
mov [ebp+arg_10] esi +
dec ebx  +
lea esi [ebx+ebx] +
lea eax [esi+2] +
mov [edx] eax +
cmp eax [ebp+arg_C] +
jbe loc_100715F  +
push 6Fh  +
call ds:SetLastError  +
mov eax [ebp+arg_4] +
mov dword ptr [eax+10h] 1 +
jmp loc_10075A1  +
mov eax [ebp+lpBuffer] +
mov edi [ebp+arg_14] +
mov ecx [ebp+arg_18] +
mov [edi] eax +
push dword ptr [ecx]  +
push [ebp+arg_10]  +
push eax  +
call ds:memmove  +
mov eax [edi] +
add esp 0Ch +
xor ecx ecx +
mov [esi+eax] cx +
mov al 1 +
jmp loc_10075A3  +
mov eax [ebp+lpBuffer] +
mov edi [ebp+arg_14] +
mov [edi] eax +
mov dword ptr [edx] 4 +
xor ebx ebx +
cmp off_100A464 ecx +
jz loc_10071D7  +
mov eax offset off_100A464 +
mov ecx [eax] +
mov eax ecx +
lea edi [eax+2] +
mov dx [eax] +
inc eax  +
inc eax  +
test dx dx +
jnz loc_10071AC  +
sub eax edi +
sar eax 1 +
push eax  +
push esi  +
push ecx  +
call ds:_wcsnicmp  +
add esp 0Ch +
test eax eax +
jz loc_10071EC  +
inc ebx  +
lea eax off_100A464[ebx*8] +
cmp dword ptr [eax] 0 +
jnz loc_10071A5  +
mov eax [ebp+arg_14] +
push dword ptr [eax]  +
lea eax [ebp+arg_10] +
push 0  +
push eax  +
call sub_10084E9  +
jmp loc_10075A3  +
mov eax [ebp+arg_14] +
mov eax [eax] +
mov ecx dword_100A468[ebx*8] +
mov [eax] ecx +
jmp loc_1007181  +
cmp [ebp+var_3] 0 +
jz loc_1007412  +
xor eax eax +
lea edi [ebp+var_20] +
stos   +
stos   +
push 3  +
stos   +
pop esi  +
mov [ebp+var_38] 1 +
mov [ebp+var_34] 2 +
mov [ebp+var_30] ecx +
mov [ebp+var_2C] esi +
mov [ebp+var_28] 4 +
mov [ebp+var_24] 7 +
mov [ebp+var_C] ecx +
stos   +
cmp ebx ecx +
jz loc_10073AB  +
mov edi ds:_wcsnicmp +
cmp [ebp+var_C] 7 +
jnb loc_10075A1  +
jmp loc_100725F  +
mov eax [ebp+arg_10] +
cmp word ptr [eax] 20h +
jnz loc_1007263  +
dec ebx  +
add [ebp+arg_10] 2 +
test ebx ebx +
jnz loc_1007251  +
mov eax [ebp+arg_10] +
mov [ebp+arg_0] eax +
test ebx ebx +
jz loc_1007297  +
cmp [ebp+var_C] 5 +
jz loc_1007285  +
mov eax [ebp+arg_10] +
movzx eax word ptr [eax] +
cmp ax 30h +
jb loc_100728E  +
cmp ax 39h +
ja loc_100728E  +
add [ebp+arg_10] 2 +
dec ebx  +
test ebx ebx +
jnz loc_100726D  +
test ebx ebx +
jz loc_1007297  +
dec ebx  +
add [ebp+arg_10] 2 +
cmp [ebp+var_C] 5 +
jnz loc_1007372  +
cmp ebx esi +
jb loc_10073B8  +
cmp word ptr [ebp+var_20] 0 +
jnz loc_10073B8  +
push esi  +
push offset aSun  +
push [ebp+arg_0]  +
call edi  +
add esp 0Ch +
test eax eax +
jnz loc_10072CE  +
and [ebp+var_8] eax +
jmp loc_100738B  +
push esi  +
push offset aMon  +
push [ebp+arg_0]  +
call edi  +
add esp 0Ch +
test eax eax +
jnz loc_10072EC  +
mov [ebp+var_8] 1 +
jmp loc_100738B  +
push esi  +
push offset aTue  +
push [ebp+arg_0]  +
call edi  +
add esp 0Ch +
test eax eax +
jnz loc_100730A  +
mov [ebp+var_8] 2 +
jmp loc_100738B  +
push esi  +
push offset aWed  +
push [ebp+arg_0]  +
call edi  +
add esp 0Ch +
test eax eax +
jnz loc_1007321  +
mov [ebp+var_8] esi +
jmp loc_100738B  +
push esi  +
push offset aThu  +
push [ebp+arg_0]  +
call edi  +
add esp 0Ch +
test eax eax +
jnz loc_100733C  +
mov [ebp+var_8] 4 +
jmp loc_100738B  +
push esi  +
push offset aFri  +
push [ebp+arg_0]  +
call edi  +
add esp 0Ch +
test eax eax +
jnz loc_1007357  +
mov [ebp+var_8] 5 +
jmp loc_100738B  +
push esi  +
push offset aSat  +
push [ebp+arg_0]  +
call edi  +
add esp 0Ch +
test eax eax +
jnz loc_10073CB  +
mov [ebp+var_8] 6 +
jmp loc_100738B  +
lea eax [ebp+var_8] +
push eax  +
push 0  +
lea eax [ebp+arg_0] +
push eax  +
call sub_10084E9  +
test al al +
jz loc_10073C0  +
cmp [ebp+var_C] 6 +
jnb loc_100739E  +
mov eax [ebp+var_C] +
mov eax [ebp+eax*4+var_38] +
mov cx word ptr [ebp+var_8] +
inc [ebp+var_C]  +
mov word ptr [ebp+eax*2+var_20] cx +
test ebx ebx +
jnz loc_1007245  +
mov edx [ebp+arg_18] +
xor ecx ecx +
cmp word ptr [ebp+var_20] cx +
jnz loc_10073D8  +
cmp [ebp+var_1C] 5 +
jle loc_10073E8  +
push 57h  +
call ds:SetLastError  +
mov eax [ebp+arg_4] +
mov [eax+10h] esi +
jmp loc_10075A1  +
push 57h  +
call ds:SetLastError  +
jmp loc_10075A1  +
cmp word ptr [ebp+var_20] 64h +
jge loc_10073E8  +
mov eax 76Ch +
add word ptr [ebp+var_20] ax +
push 10h  +
pop ecx  +
mov [edx] ecx +
cmp [ebp+arg_C] ecx +
jb loc_1007148  +
mov eax [ebp+lpBuffer] +
mov edx [ebp+arg_14] +
push ecx  +
lea ecx [ebp+var_20] +
push ecx  +
push eax  +
mov [edx] eax +
call ds:memmove  +
add esp 0Ch +
jmp loc_1007181  +
mov esi [ebp+arg_18] +
push esi  +
push 0  +
lea eax [ebp+arg_10] +
push eax  +
call sub_10084E9  +
test al al +
jnz loc_1007434  +
mov eax [ebp+arg_4] +
mov dword ptr [eax+10h] 6 +
jmp loc_10075A1  +
mov eax [esi] +
cmp eax [ebp+arg_C] +
jnb loc_1007148  +
mov ebx [ebp+lpBuffer] +
lea esi [eax+3] +
mov eax [ebp+arg_14] +
shr esi 2 +
mov [eax] ebx +
mov [ebp+arg_14] ebx +
test esi esi +
jz loc_1007181  +
mov edi [ebp+arg_0] +
push [ebp+arg_14]  +
lea eax [ebp+arg_10] +
push 0  +
push eax  +
dec esi  +
call sub_10084E9  +
test al al +
jnz loc_100749F  +
cmp byte ptr [ebp+var_C] al +
jz loc_10074C4  +
mov eax [edi+14h] +
mov [ebp+arg_10] eax +
movzx ecx word ptr [eax] +
cmp cx 0Ah +
jnz loc_100748C  +
xor ecx ecx +
mov [eax] cx +
inc dword ptr [edi+18h]  +
jmp loc_1007496  +
cmp eax [edi+10h] +
jnb loc_10074AC  +
test cx cx +
jz loc_10074AC  +
add eax 2 +
mov [edi+14h] eax +
inc esi  +
jmp loc_10074A3  +
add [ebp+arg_14] 4 +
test esi esi +
jnz loc_100745B  +
jmp loc_1007181  +
and dword ptr [edi+14h] 0 +
mov eax [ebp+arg_4] +
mov dword ptr [eax+10h] 8 +
push 0EAh  +
jmp loc_10073CD  +
mov eax [ebp+arg_4] +
cmp [ebp+arg_14] ebx +
jnz loc_10074B3  +
mov dword ptr [eax+10h] 7 +
push 0E8h  +
jmp loc_10073CD  +
mov eax [ebp+lpBuffer] +
mov [edx] ecx +
mov ecx [ebp+arg_14] +
mov [ecx] eax +
mov [ebp+arg_14] eax +
push [ebp+arg_18]  +
lea eax [ebp+arg_14] +
push [ebp+arg_C]  +
push eax  +
lea eax [ebp+arg_10] +
push eax  +
push [ebp+var_C]  +
call sub_1006376  +
test al al +
jnz loc_10074EA  +
call ds:GetLastError  +
test eax eax +
jnz loc_1007150  +
jmp loc_1007181  +
mov edi [ebp+arg_14] +
mov eax [ebp+lpBuffer] +
mov [edi] eax +
mov dword ptr [edx] 8 +
xor edi edi +
cmp off_100A464 ecx +
jz loc_1007566  +
mov eax offset off_100A464 +
mov ecx [eax] +
mov eax ecx +
lea ebx [eax+2] +
mov dx [eax] +
inc eax  +
inc eax  +
test dx dx +
jnz loc_100753B  +
sub eax ebx +
sar eax 1 +
push eax  +
push esi  +
push ecx  +
call ds:_wcsnicmp  +
add esp 0Ch +
test eax eax +
jz loc_1007578  +
inc edi  +
lea eax off_100A464[edi*8] +
cmp dword ptr [eax] 0 +
jnz loc_1007534  +
mov eax [ebp+arg_14] +
push dword ptr [eax]  +
lea eax [ebp+arg_10] +
push 0  +
push eax  +
call sub_100863E  +
jmp loc_10075A3  +
mov eax [ebp+arg_14] +
mov ecx dword_100A468[edi*8] +
mov eax [eax] +
mov [eax] ecx +
and dword ptr [eax+4] 0 +
jmp loc_1007181  +
push 57h  +
call ds:SetLastError  +
mov eax [ebp+arg_4] +
mov dword ptr [eax+10h] 9 +
xor al al +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 1Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 24h +
mov eax dword_100A000 +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_8] +
mov ecx [ebp+arg_18] +
push ebx  +
mov ebx [ebp+arg_4] +
push esi  +
mov esi [ebp+arg_14] +
push edi  +
mov edi [ebp+arg_20] +
push offset asc_100A328  +
push [ebp+arg_10]  +
mov [ebp+var_14] eax +
push offset a_S_3  +
push eax  +
mov [ebp+var_1C] ecx +
call ebx  +
add esp 10h +
mov [ebp+var_18] eax +
test esi esi +
jz loc_1007661  +
cmp word ptr [esi] 0 +
jz loc_1007661  +
lea eax [ebp+var_24] +
push eax  +
push 0  +
push esi  +
call sub_100656D  +
test al al +
jz loc_1007650  +
movzx eax word ptr [ebp+var_24] +
push eax  +
push esi  +
push eax  +
push offset aCWsC_0  +
push [ebp+var_14]  +
call ebx  +
add esp 14h +
jmp loc_100765E  +
push esi  +
push offset aWs_0  +
push [ebp+var_14]  +
call ebx  +
add esp 0Ch +
add [ebp+var_18] eax +
mov esi [ebp+var_14] +
push offset asc_1003AEC  +
push esi  +
call ebx  +
add [ebp+var_18] eax +
mov eax [ebp+arg_1C] +
pop ecx  +
pop ecx  +
cmp eax 0Bh +
ja loc_1007A1A  +
jmp ds:off_1007A3C[eax*4]  +
cmp eax 2 +
jnz loc_1007696  +
push offset aReg_expand_sz  +
push esi  +
call ebx  +
add [ebp+var_18] eax +
pop ecx  +
pop ecx  +
test byte ptr [ebp+var_1C] 1 +
mov [ebp+var_20] edi +
jz loc_10076B3  +
push offset aLengthNotMulti  +
push esi  +
call ebx  +
mov eax [ebp+var_1C] +
inc eax  +
pop ecx  +
and eax 0FFFFFFFEh +
pop ecx  +
mov [ebp+var_1C] eax +
mov eax [ebp+var_1C] +
test eax eax +
jz loc_10076C2  +
cmp word ptr [edi+eax-2] 0 +
jz loc_10076D5  +
push offset aMissingTrailin  +
push esi  +
call ebx  +
pop ecx  +
pop ecx  +
mov ecx [ebp+var_1C] +
xor eax eax +
mov [edi+ecx] ax +
lea eax [ebp+var_24] +
push eax  +
push edi  +
push 0  +
call sub_100656D  +
test al al +
jz loc_10076FC  +
movzx eax word ptr [ebp+var_24] +
push eax  +
push edi  +
push eax  +
push offset aCWsC  +
push esi  +
call ebx  +
add esp 14h +
jmp loc_10077FC  +
mov eax edi +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
test cx cx +
jnz loc_1007701  +
mov ecx [ebp+var_18] +
sub eax edx +
sar eax 1 +
add eax ecx +
cmp eax [ebp+arg_0] +
ja loc_100772A  +
push edi  +
push offset aWs  +
push esi  +
call ebx  +
add esp 0Ch +
jmp loc_10077FC  +
cmp word ptr [edi] 0 +
jz loc_10077FC  +
mov esi [ebp+var_20] +
xor edi edi +
cmp [esi] di +
jz loc_100779C  +
and [ebp+var_1C] edi +
movzx eax word ptr [esi] +
cmp ax 20h +
jb loc_100777C  +
mov ecx [ebp+var_1C] +
mov edx [ebp+arg_0] +
sar ecx 1 +
add ecx [ebp+var_18] +
add edx 0FFFFFFFCh +
cmp ecx edx +
ja loc_100777C  +
push eax  +
push offset asc_1003A74  +
call ds:wcschr  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1007770  +
mov edi esi +
add [ebp+var_1C] 2 +
inc esi  +
inc esi  +
cmp word ptr [esi] 0 +
jnz loc_1007741  +
test edi edi +
jz loc_1007796  +
jmp loc_1007784  +
mov edi eax +
mov cx [edi] +
lea eax [edi+2] +
cmp cx [eax] +
jz loc_1007782  +
lea esi [edi+2] +
jmp loc_100779C  +
inc esi  +
inc esi  +
cmp word ptr [esi] 0 +
jnz loc_1007794  +
push [ebp+var_20]  +
mov eax esi +
sub eax [ebp+var_20] +
sar eax 1 +
push eax  +
push offset a_Ws  +
push [ebp+var_14]  +
call ebx  +
add esp 10h +
cmp word ptr [esi] 0 +
jz loc_10077FC  +
cmp [ebp+arg_C] 0 +
jnz loc_10077F0  +
cmp [ebp+arg_10] 0 +
jnz loc_10077CB  +
push 4  +
pop eax  +
jmp loc_10077CE  +
mov eax [ebp+var_18] +
push offset asc_100A328  +
push eax  +
push offset a_S_2  +
push [ebp+var_14]  +
call ebx  +
add esp 10h +
cmp word ptr [esi] 0 +
mov [ebp+var_20] esi +
jnz loc_1007734  +
jmp loc_10077FC  +
push offset a____0  +
push [ebp+var_14]  +
call ebx  +
pop ecx  +
pop ecx  +
push offset dword_10011DC  +
push [ebp+var_14]  +
call ebx  +
pop ecx  +
pop ecx  +
jmp loc_1007A29  +
sub eax 0 +
jz loc_100783E  +
sub eax 3 +
jz loc_1007837  +
sub eax 5 +
jz loc_1007830  +
dec eax  +
jz loc_1007829  +
dec eax  +
jnz loc_1007845  +
mov eax offset aReg_resource_r +
jmp loc_1007848  +
mov eax offset aReg_full_resou +
jmp loc_1007848  +
mov eax offset aReg_resource_l +
jmp loc_1007848  +
mov eax offset aReg_binary +
jmp loc_1007848  +
mov eax offset aReg_none +
jmp loc_1007848  +
mov eax [ebp+var_20] +
push [ebp+var_1C]  +
push eax  +
push offset aWs0x08lx  +
push esi  +
call ebx  +
mov esi eax +
mov eax [ebp+var_1C] +
add esp 10h +
test eax eax +
jz loc_10078E9  +
add eax 3 +
shr eax 2 +
cmp [ebp+arg_C] 0 +
mov [ebp+var_20] edi +
jz loc_1007886  +
cmp eax 2 +
jbe loc_1007886  +
push offset a___  +
push [ebp+var_14]  +
call ebx  +
pop ecx  +
pop ecx  +
jmp loc_10078E9  +
test eax eax +
jbe loc_10078E9  +
mov [ebp+var_24] eax +
mov ecx [ebp+var_18] +
mov eax [ebp+arg_0] +
lea edx [ecx+esi+0Bh] +
add eax 0FFFFFFFEh +
cmp edx eax +
jbe loc_10078BE  +
cmp [ebp+arg_10] 0 +
jnz loc_10078A7  +
push 4  +
pop ecx  +
push offset asc_100A328  +
push ecx  +
push offset a_S_1  +
push [ebp+var_14]  +
call ebx  +
add esp 10h +
xor esi esi +
jmp loc_10078CC  +
push offset asc_1003A3C  +
push [ebp+var_14]  +
call ebx  +
pop ecx  +
pop ecx  +
add esi eax +
mov eax [ebp+var_20] +
push dword ptr [eax]  +
push offset a0x08lx_0  +
push [ebp+var_14]  +
call ebx  +
add [ebp+var_20] 4 +
add esp 0Ch +
add esi eax +
dec [ebp+var_24]  +
jnz loc_100788D  +
push offset dword_10011DC  +
push [ebp+var_14]  +
call ebx  +
cmp [ebp+arg_C] 0 +
pop ecx  +
pop ecx  +
jnz loc_1007A29  +
push edi  +
push [ebp+arg_1C]  +
push [ebp+var_1C]  +
push [ebp+arg_10]  +
push [ebp+var_14]  +
push ebx  +
push [ebp+arg_0]  +
call sub_1006787  +
jmp loc_1007A29  +
push dword ptr [edi]  +
push offset aReg_dword0x08l  +
push esi  +
call ebx  +
add esp 0Ch +
jmp loc_1007A29  +
push dword ptr [edi]  +
push offset aReg_dword_big_  +
jmp loc_1007921  +
push edi  +
push offset aReg_linkWs  +
jmp loc_1007921  +
cmp byte_100B22C 0 +
lea eax [ebp+var_10] +
jnz loc_1007950  +
push offset a_S_1  +
jmp loc_1007955  +
push offset a_S_0  +
push 0Bh  +
push eax  +
call sub_1004D90  +
add esp 0Ch +
push offset aReg_multi_sz_0  +
push esi  +
call ebx  +
add [ebp+var_18] eax +
xor esi esi +
pop ecx  +
pop ecx  +
cmp [edi] si +
jz loc_10077FC  +
mov eax [ebp+var_1C] +
dec eax  +
shr eax 1 +
mov [ebp+var_20] eax +
jz loc_10077FC  +
test esi esi +
jbe loc_10079AB  +
cmp [ebp+arg_10] 0 +
jnz loc_1007996  +
push 4  +
pop eax  +
jmp loc_1007999  +
mov eax [ebp+var_18] +
push offset asc_100A328  +
push eax  +
lea eax [ebp+var_10] +
push eax  +
push [ebp+var_14]  +
call ebx  +
add esp 10h +
push offset asc_10039D0  +
push [ebp+var_14]  +
call ebx  +
pop ecx  +
pop ecx  +
cmp word ptr [edi+esi*2] 22h +
jnz loc_10079CD  +
push 22h  +
push offset aWc  +
push [ebp+var_14]  +
call ebx  +
add esp 0Ch +
movzx eax word ptr [edi+esi*2] +
push eax  +
push offset aWc  +
push [ebp+var_14]  +
call ebx  +
add esp 0Ch +
inc esi  +
cmp word ptr [edi+esi*2] 0 +
jnz loc_10079B7  +
push offset asc_10039C8  +
push [ebp+var_14]  +
call ebx  +
cmp [ebp+arg_C] 0 +
pop ecx  +
pop ecx  +
jnz loc_1007A04  +
inc esi  +
cmp esi [ebp+var_20] +
jb loc_1007987  +
jmp loc_10077FC  +
push offset a___  +
jmp loc_10077F5  +
push dword ptr [edi+4]  +
push dword ptr [edi]  +
push offset aReg_qword0x016  +
jmp loc_1007A23  +
push [ebp+var_1C]  +
push eax  +
push offset aUnknownRegistr  +
push esi  +
call ebx  +
add esp 10h +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1004C64  +
leave   +
retn 24h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_4] +
cmp byte ptr [edi+0Dh] 0 +
jz loc_1007A8F  +
mov eax [edi+1Ch] +
test eax eax +
jz loc_1007A8F  +
push eax  +
call sub_100890D  +
push 38h  +
push 0  +
push edi  +
call memset  +
mov esi [ebp+arg_0] +
mov eax [esi+14h] +
add esp 0Ch +
test eax eax +
jz loc_1007B03  +
and dword ptr [esi+14h] 0 +
movzx ecx word ptr [eax] +
test cx cx +
jz loc_1007B03  +
jmp loc_1007ADB  +
jnz loc_1007ABB  +
inc dword ptr [edi+4]  +
jmp loc_1007AD1  +
cmp cx 9 +
jnz loc_1007AD1  +
mov ecx [edi+4] +
mov edx ecx +
and edx 7 +
sub ecx edx +
add ecx 8 +
mov [edi+4] ecx +
inc eax  +
inc eax  +
cmp eax [esi+10h] +
jnb loc_1007B03  +
movzx ecx word ptr [eax] +
cmp cx 20h +
jbe loc_1007AB4  +
xor ecx ecx +
mov ebx eax +
mov [ebp+arg_4] ecx +
cmp [esi+1Ch] cl +
jnz loc_1007AF3  +
cmp word ptr [eax] 3Bh +
jz loc_1007B16  +
cmp word ptr [eax] 0Ah +
jnz loc_1007B32  +
inc dword ptr [esi+18h]  +
mov eax [esi+14h] +
cmp eax ecx +
jnz loc_1007AA6  +
mov byte ptr [edi+0Ch] 1 +
xor al al +
jmp loc_1007C63  +
cmp word ptr [eax] 0Ah +
jz loc_1007B1D  +
inc eax  +
inc eax  +
cmp eax [esi+10h] +
jb loc_1007B0E  +
jmp loc_1007B2D  +
inc dword ptr [esi+18h]  +
xor edx edx +
mov [eax] dx +
inc eax  +
inc eax  +
cmp word ptr [eax] 0Ah +
jz loc_1007B1D  +
mov [esi+14h] eax +
jmp loc_1007AFC  +
cmp byte ptr [esi+1Ch] 0 +
jnz loc_1007B95  +
movzx edx word ptr [eax] +
cmp dx 22h +
jz loc_1007B47  +
cmp dx 27h +
jnz loc_1007B95  +
inc eax  +
inc eax  +
movzx edx dx +
mov ebx eax +
jmp loc_1007B57  +
cmp [eax] dx +
jz loc_1007B6A  +
inc eax  +
inc eax  +
cmp eax [esi+10h] +
jb loc_1007B50  +
cmp [eax] dx +
jz loc_1007B6A  +
mov dword ptr [edi+10h] 5 +
jmp loc_1007B07  +
xor edx edx +
jmp loc_1007B90  +
movzx edx word ptr [eax] +
cmp dx 3Dh +
jz loc_1007B9C  +
cmp dx 5Bh +
jnz loc_1007B81  +
mov ecx eax +
jmp loc_1007B93  +
cmp dx 0Ah +
jz loc_1007BA3  +
cmp dx 9 +
jnz loc_1007B93  +
push 20h  +
pop edx  +
mov [eax] dx +
inc eax  +
inc eax  +
cmp eax [esi+10h] +
jb loc_1007B6E  +
jmp loc_1007BBB  +
mov [ebp+arg_4] eax +
xor ecx ecx +
jmp loc_1007BBB  +
lea edx [eax+2] +
mov [esi+14h] edx +
jmp loc_1007BBB  +
dec eax  +
dec eax  +
movzx edx word ptr [eax] +
cmp dx 20h +
ja loc_1007BC4  +
test dx dx +
jz loc_1007BC4  +
xor edx edx +
mov [eax] dx +
cmp eax ebx +
ja loc_1007BAB  +
mov eax [ebp+arg_4] +
test eax eax +
jz loc_1007BEC  +
add eax 2 +
jmp loc_1007BD8  +
cmp word ptr [eax] 0Ah +
jz loc_1007BDF  +
inc eax  +
inc eax  +
cmp eax [esi+10h] +
jb loc_1007BD0  +
jmp loc_1007BE4  +
xor edx edx +
mov [eax] dx +
add eax 2 +
mov [esi+14h] eax +
jmp loc_1007C14  +
test ecx ecx +
jz loc_1007C14  +
xor edx edx +
mov eax ecx +
mov [ecx] dx +
cmp ecx ebx +
jbe loc_1007C14  +
dec eax  +
dec eax  +
movzx edx word ptr [eax] +
cmp dx 20h +
ja loc_1007C14  +
test dx dx +
jz loc_1007C14  +
xor edx edx +
mov [eax] dx +
cmp eax ebx +
ja loc_1007BFB  +
mov eax [esi+18h] +
mov [edi] eax +
inc dword ptr [esi+18h]  +
cmp [ebp+arg_4] 0 +
mov [edi+8] ebx +
jz loc_1007C8E  +
cmp word ptr [ebx] 40h +
jz loc_1007C33  +
cmp ebx [ebp+arg_4] +
jz loc_1007C33  +
mov [edi+14h] ebx +
add [ebp+arg_4] 2 +
mov eax [ebp+arg_4] +
movzx eax word ptr [eax] +
test ax ax +
jz loc_1007C48  +
cmp ax 20h +
jbe loc_1007C33  +
mov ebx [ebp+arg_4] +
push ebx  +
push offset aDelete  +
call ds:_wcsicmp  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_1007C6A  +
mov byte ptr [edi+28h] 1 +
mov al 1 +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
lea eax [edi+20h] +
push eax  +
lea eax [edi+24h] +
push eax  +
lea eax [edi+1Ch] +
push eax  +
mov [edi+18h] ebx +
push dwSize  +
push lpBuffer  +
push edi  +
push esi  +
call sub_1006FA7  +
jmp loc_1007C63  +
mov byte ptr [edi+0Dh] 1 +
mov [edi+14h] ebx +
test ecx ecx +
jz loc_1007C61  +
inc ecx  +
inc ecx  +
mov esi ecx +
mov [edi+18h] ecx +
jmp loc_1007CAA  +
cmp word ptr [ecx] 5Dh +
jz loc_1007CBA  +
inc ecx  +
inc ecx  +
cmp word ptr [ecx] 0 +
jnz loc_1007CA2  +
cmp word ptr [ecx] 5Dh +
jnz loc_1007B07  +
xor eax eax +
push esi  +
push offset aDelete  +
mov [ecx] ax +
call ds:_wcsicmp  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_1007CD7  +
mov byte ptr [edi+20h] 1 +
jmp loc_1007C61  +
lea eax [edi+24h] +
push eax  +
push esi  +
mov [edi+1Ch] eax +
call sub_10087BF  +
test al al +
jnz loc_1007C61  +
and dword ptr [edi+1Ch] 0 +
jmp loc_1007B07  +
***
mov edi edi +
push ebp  +
mov ebp esp +
lea eax [ebp+arg_8] +
push eax  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call ds:vfprintf  +
add esp 0Ch +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_4] +
test eax eax +
jz loc_1007DBB  +
push esi  +
mov cl [eax] +
mov esi eax +
jmp loc_1007D38  +
cmp cl 0Ah +
jz loc_1007D3C  +
inc esi  +
mov cl [esi] +
test cl cl +
jnz loc_1007D30  +
push eax  +
mov ecx esi +
sub ecx eax +
mov eax ds:_iob +
push ecx  +
push offset asc_1003B70  +
push dword ptr [ebp+arg_0]  +
add eax 40h +
push offset a_S_S  +
push eax  +
call sub_1007CFA  +
mov eax dword_100A998 +
add esp 18h +
inc dword_100B310  +
test eax eax +
jz loc_1007DAA  +
cmp dword_100B310 eax +
jb loc_1007DAA  +
mov eax ds:_iob +
add eax 40h +
push offset aMore___pressAn  +
push eax  +
call sub_1007CFA  +
mov eax ds:_iob +
add eax 40h +
push offset asc_1003B1C  +
push eax  +
call sub_1007CFA  +
add esp 10h +
mov dword_100B310 2 +
cmp byte ptr [esi] 0 +
jz loc_1007DBA  +
lea eax [esi+1] +
test eax eax +
jnz loc_1007D2A  +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
jz loc_1007E15  +
push dword_100B304  +
mov eax ds:_iob +
add eax 40h +
push offset aS  +
push eax  +
call sub_1007CFA  +
push [ebp+arg_8]  +
mov eax ds:_iob +
push dword ptr [ebp+arg_4]  +
add eax 40h +
push [ebp+arg_0]  +
push eax  +
call sub_1007CFA  +
mov eax ds:_iob +
add eax 40h +
push offset dword_10011DC  +
push eax  +
call sub_1007CFA  +
add esp 24h +
mov eax dword_100B2FC +
test eax eax +
jz loc_1007E22  +
push 1  +
call eax  +
push 1  +
call ds:exit  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_8] 0 +
mov eax offset aError +
jnz loc_1007E45  +
mov eax offset aWarning +
push eax  +
push [ebp+arg_4]  +
mov eax ds:_iob +
push dword ptr [ebp+arg_0]  +
add eax 40h +
push offset aWsUS  +
push eax  +
call sub_1007CFA  +
push [ebp+arg_14]  +
mov eax ds:_iob +
push dword ptr [ebp+arg_10]  +
add eax 40h +
push [ebp+arg_C]  +
push eax  +
call sub_1007CFA  +
mov eax ds:_iob +
add eax 40h +
push offset dword_10011DC  +
push eax  +
call sub_1007CFA  +
add esp 2Ch +
pop ebp  +
retn 18h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+lpMultiByteStr] +
lea edx [eax+1] +
mov cl [eax] +
inc eax  +
test cl cl +
jnz loc_1007EA0  +
push ebx  +
push esi  +
push edi  +
sub eax edx +
mov edi eax +
lea esi [edi+edi] +
lea eax [esi+2] +
push eax  +
push 0  +
call ds:GetProcessHeap  +
push eax  +
call ds:HeapAlloc  +
mov ebx eax +
xor eax eax +
cmp ebx eax +
jnz loc_1007ED8  +
push eax  +
push eax  +
push offset aOutOfMemory  +
call sub_1007DC4  +
push edi  +
push ebx  +
push edi  +
push [ebp+lpMultiByteStr]  +
push 1  +
push eax  +
call ds:MultiByteToWideChar  +
cmp eax edi +
jz loc_1007EFC  +
call ds:GetLastError  +
push eax  +
push [ebp+lpMultiByteStr]  +
push offset aUnableToConver  +
jmp loc_1007ED3  +
xor eax eax +
mov [esi+ebx] ax +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
call sub_1005771  +
test al al +
jnz loc_1007F34  +
push 0  +
call ds:GetLastError  +
push eax  +
push offset aUnableToInitia  +
call sub_1007DC4  +
mov eax ds:_iob +
add eax 20h +
push eax  +
call ds:_fileno  +
push eax  +
call ds:_isatty  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1007FA1  +
lea eax [ebp+ConsoleScreenBufferInfo] +
push eax  +
push 0FFFFFFF5h  +
call ds:GetStdHandle  +
push eax  +
call ds:GetConsoleScreenBufferInfo  +
test eax eax +
jz loc_1007F8B  +
movsx eax [ebp+ConsoleScreenBufferInfo.srWindow.Top] +
movsx ecx [ebp+ConsoleScreenBufferInfo.srWindow.Bottom] +
sub ecx eax +
movsx eax [ebp+ConsoleScreenBufferInfo.srWindow.Left] +
inc ecx  +
mov dword_100A998 ecx +
movsx ecx [ebp+ConsoleScreenBufferInfo.srWindow.Right] +
sub ecx eax +
inc ecx  +
mov dword_100A99C ecx +
jmp loc_1007FB2  +
mov dword_100A998 18h +
mov dword_100A99C 50h +
jmp loc_1007FB2  +
and dword_100A998 0 +
mov dword_100A99C 0F0h +
mov eax [ebp+arg_4] +
push offset aRegback  +
push eax  +
mov dword_100A994 4 +
mov dword_100B304 eax +
call ds:_stricmp  +
neg eax  +
sbb al al +
pop ecx  +
inc al  +
pop ecx  +
mov byte_100B30C al +
mov eax [ebp+arg_8] +
push 1  +
push [ebp+HandlerRoutine]  +
mov dword_100B300 eax +
mov eax [ebp+arg_C] +
mov dword_100B308 eax +
call ds:SetConsoleCtrlHandler  +
push 4  +
mov eax 1E000h +
push 1000h  +
push eax  +
push 0  +
mov dword_100A9A8 eax +
call ds:VirtualAlloc  +
mov lpData eax +
test eax eax +
jnz locret_100802D  +
push eax  +
call ds:GetLastError  +
push eax  +
push offset aUnableToAlloca  +
jmp loc_1007F2F  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax ds:_iob +
inc dword_100B310  +
push ebx  +
push esi  +
push edi  +
push dword_100B304  +
add eax 40h +
push offset aUsageS  +
push eax  +
call sub_1007CFA  +
mov esi eax +
mov eax ds:_iob +
add eax 40h +
push offset aMMachinename  +
push eax  +
call sub_1007CFA  +
xor ebx ebx +
add esp 14h +
cmp byte_100B30C bl +
jnz loc_1008094  +
mov eax ds:_iob +
add eax 40h +
push offset aHHivefileHiver  +
push eax  +
call sub_1007CFA  +
pop ecx  +
pop ecx  +
mov eax ds:_iob +
add eax 40h +
push offset asc_1003F88  +
push eax  +
call sub_1007CFA  +
inc dword_100B310  +
pop ecx  +
pop ecx  +
cmp byte_100B30C bl +
jnz loc_10080C2  +
push offset aINOOutputwidth  +
push esi  +
call sub_1007D19  +
push dword_100B300  +
push esi  +
call sub_1007D19  +
mov eax ds:_iob +
mov esi offset dword_10011DC +
add eax 40h +
push esi  +
push eax  +
call sub_1007CFA  +
mov eax ds:_iob +
inc dword_100B310  +
add eax 40h +
push offset aWhere  +
push eax  +
call sub_1007CFA  +
mov edi eax +
mov eax ds:_iob +
add eax 40h +
push offset aMSpecifiesARem  +
push eax  +
call sub_1007CFA  +
add esp 18h +
inc dword_100B310  +
cmp byte_100B30C bl +
jnz loc_1008143  +
push offset aHSpecifiesASpe  +
push edi  +
call sub_1007D19  +
mov eax ds:_iob +
add eax 40h +
push esi  +
push eax  +
call sub_1007CFA  +
inc dword_100B310  +
pop ecx  +
pop ecx  +
push dword_100B308  +
push edi  +
call sub_1007D19  +
cmp byte_100B30C bl +
jnz loc_1008179  +
push offset aWheneverSpecif  +
push edi  +
call sub_1007D19  +
mov eax ds:_iob +
add eax 40h +
push esi  +
push eax  +
call sub_1007CFA  +
inc dword_100B310  +
pop ecx  +
pop ecx  +
cmp [ebp+8] ebx +
jz loc_1008195  +
mov eax ds:_iob +
add eax 40h +
push esi  +
push eax  +
call sub_1007CFA  +
inc dword_100B310  +
pop ecx  +
pop ecx  +
push ebx  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
call sub_1007DC4  +
mov edi edi +
push ebp  +
mov ebp esp +
movsx eax [ebp+arg_8] +
push esi  +
push eax  +
call ds:tolower  +
pop ecx  +
movsx ecx al +
mov eax ecx +
sub eax 3Fh +
jz loc_1008309  +
sub eax 25h +
jz loc_10082FD  +
push edi  +
push 4  +
pop edi  +
sub eax edi +
jz loc_10082AF  +
dec eax  +
jz loc_100828A  +
sub eax edi +
jz loc_1008221  +
dec eax  +
dec eax  +
jz loc_10081F6  +
push ecx  +
push offset aInvalidSwitchC  +
call loc_1008036  +
mov eax [ebp+arg_0] +
dec dword ptr [eax]  +
jz loc_1008218  +
mov eax [ebp+arg_4] +
add [eax] edi +
mov eax [eax] +
push dword ptr [eax]  +
call ds:atoi  +
pop ecx  +
mov dword_100A99C eax +
pop edi  +
pop esi  +
pop ebp  +
retn 0Ch  +
push 0  +
push offset aMissingArgumen  +
jmp loc_10081F1  +
xor esi esi +
cmp lpFileName esi +
jnz loc_100827F  +
cmp dword_100B234 esi +
jnz loc_100827F  +
mov eax [ebp+arg_0] +
dec dword ptr [eax]  +
jz loc_1008273  +
mov eax [ebp+arg_4] +
add [eax] edi +
mov eax [eax] +
push dword ptr [eax]  +
call sub_1007E95  +
push 2  +
push offset asc_1004058  +
push eax  +
mov lpMachineName eax +
call ds:_wcsnicmp  +
add esp 0Ch +
test eax eax +
jz loc_1008212  +
push esi  +
push lpMachineName  +
push offset aInvalidMachine  +
call sub_1007DC4  +
push 6Dh  +
push offset aMissingParamet  +
jmp loc_10081F1  +
push esi  +
push offset aMayOnlySpecify  +
jmp loc_10081F1  +
mov eax [ebp+arg_0] +
dec dword ptr [eax]  +
jz loc_10082AB  +
mov eax [ebp+arg_4] +
add [eax] edi +
mov eax [eax] +
push dword ptr [eax]  +
call ds:atoi  +
pop ecx  +
mov dword_100A994 eax +
jmp loc_1008212  +
push 69h  +
jmp loc_1008275  +
xor esi esi +
cmp lpMachineName esi +
jnz loc_100827F  +
mov eax [ebp+arg_0] +
dec dword ptr [eax]  +
mov ecx [eax] +
jz loc_10082F1  +
dec ecx  +
mov [eax] ecx +
cmp ecx esi +
jz loc_10082F1  +
mov esi [ebp+arg_4] +
add [esi] edi +
mov eax [esi] +
push dword ptr [eax]  +
call sub_1007E95  +
mov lpFileName eax +
add [esi] edi +
mov esi [esi] +
push dword ptr [esi]  +
call sub_1007E95  +
mov dword_100B234 eax +
jmp loc_1008212  +
push 68h  +
push offset aMissingParam_0  +
jmp loc_10081F1  +
mov byte_100A9AC 1 +
jmp loc_1008213  +
xor esi esi +
push esi  +
push esi  +
jmp loc_10081F1  +
***
mov edi edi +
push esi  +
mov esi eax +
xor eax eax +
mov ecx edx +
test edx edx +
jz loc_1008332  +
cmp [esi] ax +
jz loc_100832E  +
inc esi  +
inc esi  +
dec edx  +
jnz loc_1008324  +
test edx edx +
jnz loc_1008337  +
mov eax 80070057h +
pop esi  +
test edi edi +
jz locret_1008348  +
test eax eax +
jl loc_1008345  +
sub ecx edx +
mov [edi] ecx +
retn   +
and dword ptr [edi] 0 +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
test [ebp+arg_8] 100h +
jz loc_1008369  +
cmp [ebp+arg_0] eax +
jnz loc_100836D  +
cmp ecx eax +
jnz loc_1008372  +
jmp loc_100836D  +
cmp ecx eax +
jz loc_1008372  +
cmp ecx [ebp+arg_4] +
jbe loc_1008377  +
mov eax 80070057h +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp ecx 2 +
jbe loc_10083A3  +
add ecx 0FFFFFFFEh +
and eax 0FFh +
push ecx  +
push eax  +
mov eax [ebp+arg_0] +
add eax 2 +
push eax  +
call memset  +
add esp 0Ch +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
mov esi [ebp+arg_0] +
shr esi 1 +
jz loc_10083D8  +
test [ebp+arg_8] 1000h +
jz loc_10083D8  +
mov edx [ebp+arg_4] +
lea eax [edi+ecx*2] +
mov [edx] eax +
mov edx esi +
sub edx ecx +
xor ecx ecx +
mov [ebx] edx +
mov [eax] cx +
test [ebp+arg_8] 400h +
jz loc_1008420  +
mov eax [ebp+arg_8] +
push [ebp+arg_0]  +
and eax 0FFh +
push eax  +
push edi  +
mov [ebp+var_4] eax +
call memset  +
add esp 0Ch +
cmp [ebp+var_4] 0 +
jnz loc_1008408  +
mov eax [ebp+arg_4] +
mov [eax] edi +
mov [ebx] esi +
jmp loc_1008420  +
test esi esi +
jbe loc_1008439  +
mov ecx [ebp+arg_4] +
lea eax [edi+esi*2-2] +
mov [ecx] eax +
xor ecx ecx +
mov dword ptr [ebx] 1 +
mov [eax] cx +
test esi esi +
jbe loc_1008439  +
test [ebp+arg_8] 800h +
jz loc_1008439  +
mov eax [ebp+arg_4] +
mov [eax] edi +
xor eax eax +
mov [ebx] esi +
mov [edi] ax +
xor eax eax +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebx  +
push esi  +
push edi  +
push 4  +
mov edi offset off_100A4D0 +
pop esi  +
mov eax [edi] +
push dword ptr [eax]  +
call ds:RtlLengthSid  +
mov ebx eax +
mov eax large fs:18h +
mov eax [eax+30h] +
add ebx 8 +
push ebx  +
push 0  +
push dword ptr [eax+18h]  +
call ds:RtlAllocateHeap  +
mov dword_100B260[esi] eax +
test eax eax +
jz loc_10084E0  +
mov cl [edi+4] +
mov [eax] cl +
mov eax dword_100B260[esi] +
mov cl [edi+5] +
mov [eax+1] cl +
mov eax dword_100B260[esi] +
mov [eax+2] bx +
mov eax dword_100B260[esi] +
mov ecx [edi-4] +
mov [eax+4] ecx +
mov eax [edi] +
mov eax [eax] +
mov ecx dword_100B260[esi] +
push eax  +
add ecx 8 +
push ecx  +
push eax  +
call ds:RtlLengthSid  +
push eax  +
call ds:RtlCopySid  +
test eax eax +
jl loc_10084E0  +
add esi 4 +
add edi 0Ch +
cmp esi 80h +
jb loc_1008452  +
mov al 1 +
pop edi  +
pop esi  +
pop ebx  +
retn   +
xor al al +
jmp loc_10084DC  +
***
call __SEH_prolog4  +
mov eax [ebp+arg_0] +
mov eax [eax] +
xor esi esi +
mov [ebp+var_1C] esi +
push 2  +
pop edi  +
movzx ecx word ptr [eax] +
cmp cx si +
jz loc_1008514  +
cmp cx 20h +
ja loc_1008514  +
add eax edi +
jmp loc_1008502  +
movzx edx word ptr [eax] +
cmp dx 2Dh +
jz loc_1008523  +
cmp dx 2Bh +
jnz loc_100852E  +
movzx ecx dx +
mov [ebp+var_1C] ecx +
add eax edi +
movzx edx word ptr [eax] +
mov ecx [ebp+arg_4] +
cmp ecx esi +
jnz loc_10085A5  +
mov [ebp+arg_4] 0Ah +
xor ecx ecx +
cmp dx 30h +
jnz loc_1008584  +
add eax edi +
movzx edx word ptr [eax] +
cmp dx 78h +
jnz loc_100855D  +
add eax edi +
movzx edx word ptr [eax] +
mov [ebp+arg_4] 10h +
jmp loc_10085B7  +
cmp dx 6Fh +
jnz loc_1008573  +
add eax edi +
movzx edx word ptr [eax] +
mov [ebp+arg_4] 8 +
push 3  +
jmp loc_10085B9  +
cmp dx 62h +
jnz loc_100859E  +
add eax edi +
movzx edx word ptr [eax] +
mov [ebp+arg_4] edi +
xor ecx ecx +
inc ecx  +
cmp dx si +
jz loc_100862F  +
lea ebx [edx-30h] +
cmp bx 9 +
ja loc_10085C0  +
movzx edx dx +
sub edx 30h +
jmp loc_10085E0  +
sub eax edi +
movzx edx word ptr [eax] +
jmp loc_1008584  +
sub ecx edi +
jz loc_1008581  +
sub ecx 6 +
jz loc_100856F  +
sub ecx edi +
jz loc_10085BC  +
sub ecx 6 +
jnz loc_100862F  +
push 4  +
pop ecx  +
jmp loc_1008584  +
xor ecx ecx +
jmp loc_1008584  +
lea ebx [edx-41h] +
cmp bx 5 +
ja loc_10085D1  +
movzx edx dx +
sub edx 37h +
jmp loc_10085E0  +
lea ebx [edx-61h] +
cmp bx 5 +
ja loc_10085FF  +
movzx edx dx +
sub edx 57h +
cmp edx [ebp+arg_4] +
jnb loc_10085FF  +
test ecx ecx +
jnz loc_10085F1  +
imul esi [ebp+arg_4] +
add esi edx +
jmp loc_10085F5  +
shl esi cl +
or esi edx +
add eax edi +
movzx edx word ptr [eax] +
test dx dx +
jnz loc_100858D  +
cmp word ptr [ebp+var_1C] 2Dh +
jnz loc_1008608  +
neg esi  +
and [ebp+ms_exc.disabled] 0 +
mov ecx [ebp+arg_0] +
mov [ecx] eax +
mov eax [ebp+arg_8] +
mov [eax] esi +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov al 1 +
jmp loc_1008631  +
xor eax eax +
inc eax  +
retn   +
mov esp [ebp-18h] +
mov dword ptr [ebp-4] 0FFFFFFFEh +
xor al al +
call __SEH_epilog4  +
retn 0Ch  +
***
call __SEH_prolog4  +
mov eax [ebp+arg_0] +
mov esi [eax] +
and [ebp+var_1C] 0 +
jmp loc_100865D  +
cmp ax 20h +
ja loc_1008665  +
inc esi  +
inc esi  +
movzx eax word ptr [esi] +
test ax ax +
jnz loc_1008655  +
movzx ecx word ptr [esi] +
cmp cx 2Dh +
jz loc_1008674  +
cmp cx 2Bh +
jnz loc_1008684  +
movzx eax cx +
mov [ebp+var_1C] eax +
push 2  +
pop edx  +
add esi edx +
movzx ecx word ptr [esi] +
jmp loc_1008687  +
push 2  +
pop edx  +
mov eax [ebp+arg_4] +
test eax eax +
jnz loc_1008702  +
mov [ebp+arg_4] 0Ah +
xor ebx ebx +
cmp cx 30h +
jnz loc_10086DD  +
add esi edx +
movzx eax word ptr [esi] +
cmp ax 78h +
jnz loc_10086B6  +
add esi edx +
movzx ecx word ptr [esi] +
mov [ebp+arg_4] 10h +
jmp loc_1008718  +
cmp ax 6Fh +
jnz loc_10086CC  +
add esi edx +
movzx ecx word ptr [esi] +
mov [ebp+arg_4] 8 +
push 3  +
jmp loc_100871A  +
cmp ax 62h +
jnz loc_10086FB  +
add esi edx +
movzx ecx word ptr [esi] +
mov [ebp+arg_4] edx +
xor ebx ebx +
inc ebx  +
test cx cx +
jz loc_10087B0  +
xor eax eax +
xor edx edx +
lea edi [ecx-30h] +
cmp di 9 +
ja loc_1008721  +
movzx edi cx +
sub edi 30h +
jmp loc_1008741  +
sub esi edx +
movzx ecx word ptr [esi] +
jmp loc_10086DD  +
sub eax edx +
jz loc_10086DA  +
sub eax 6 +
jz loc_10086C8  +
sub eax edx +
jz loc_100871D  +
sub eax 6 +
jnz loc_10087B0  +
push 4  +
pop ebx  +
jmp loc_10086DD  +
xor ebx ebx +
jmp loc_10086DD  +
lea edi [ecx-41h] +
cmp di 5 +
ja loc_1008732  +
movzx edi cx +
sub edi 37h +
jmp loc_1008741  +
lea edi [ecx-61h] +
cmp di 5 +
ja loc_1008778  +
movzx edi cx +
sub edi 57h +
cmp edi [ebp+arg_4] +
jnb loc_1008778  +
test ebx ebx +
jnz loc_100875D  +
push edx  +
push eax  +
push ebx  +
push [ebp+arg_4]  +
call __allmul  +
xor ecx ecx +
add eax edi +
adc edx ecx +
jmp loc_100876A  +
mov ecx ebx +
call __allshl  +
xor ecx ecx +
or eax edi +
or edx ecx +
inc esi  +
inc esi  +
movzx ecx word ptr [esi] +
test cx cx +
jnz loc_10086EA  +
cmp word ptr [ebp+var_1C] 2Dh +
jnz loc_1008786  +
neg eax  +
adc edx 0 +
neg edx  +
and [ebp+ms_exc.disabled] 0 +
mov ecx [ebp+arg_0] +
mov [ecx] esi +
mov ecx [ebp+arg_8] +
mov [ecx] eax +
mov [ecx+4] edx +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov al 1 +
jmp loc_10087B2  +
xor eax eax +
inc eax  +
retn   +
mov esp [ebp-18h] +
mov dword ptr [ebp-4] 0FFFFFFFEh +
xor al al +
call __SEH_epilog4  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
mov ecx [ebp+arg_0] +
and [ebp+var_4] 0 +
push ebx  +
push esi  +
mov ebx ecx +
mov eax ecx +
push edi  +
mov [ebp+arg_0] ebx +
lea edx [eax+2] +
mov si [eax] +
inc eax  +
inc eax  +
test si si +
jnz loc_10087D9  +
sub eax edx +
sar eax 1 +
lea edi [ecx+eax*2] +
movzx eax word ptr [ebx] +
cmp ax 20h +
jz loc_10087F9  +
cmp ax 9 +
jnz loc_1008804  +
cmp ebx edi +
jz loc_1008804  +
inc ebx  +
inc ebx  +
mov [ebp+arg_0] ebx +
jmp loc_10087EA  +
cmp [ebp+arg_0] edi +
jz loc_1008848  +
mov esi ds:iswctype +
mov eax [ebp+arg_0] +
movzx eax word ptr [eax] +
push 4  +
push eax  +
call esi  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_100883F  +
inc [ebp+var_4]  +
add [ebp+arg_0] 2 +
mov eax [ebp+arg_0] +
movzx eax word ptr [eax] +
push 4  +
push eax  +
call esi  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1008843  +
cmp [ebp+arg_0] edi +
jnz loc_1008823  +
jmp loc_1008843  +
add [ebp+arg_0] 2 +
cmp [ebp+arg_0] edi +
jnz loc_100880F  +
mov eax large fs:18h +
mov eax [eax+30h] +
mov esi 100h +
push esi  +
push 0  +
push dword ptr [eax+18h]  +
call ds:RtlAllocateHeap  +
mov edi eax +
test edi edi +
jnz loc_100886F  +
xor al al +
jmp loc_10088FA  +
push 2  +
push esi  +
push edi  +
call ds:RtlCreateAcl  +
test eax eax +
jge loc_1008894  +
push edi  +
push 0  +
mov eax large fs:18h +
mov eax [eax+30h] +
push dword ptr [eax+18h]  +
call ds:RtlFreeHeap  +
jmp loc_1008868  +
mov [ebp+arg_0] ebx +
xor ebx ebx +
xor esi esi +
cmp [ebp+var_4] ebx +
jbe loc_10088D8  +
push 0Ah  +
lea eax [ebp+arg_0] +
push eax  +
push [ebp+arg_0]  +
call ds:wcstoul  +
add esp 0Ch +
cmp eax ebx +
jz loc_10088D8  +
mov eax dword_100B260[eax*4] +
movzx ecx word ptr [eax+2] +
push ecx  +
push eax  +
push 0FFFFFFFFh  +
push 2  +
push edi  +
call ds:RtlAddAce  +
test eax eax +
jl loc_1008901  +
inc esi  +
cmp esi [ebp+var_4] +
jb loc_10088A0  +
push 1  +
push [ebp+arg_4]  +
call ds:RtlCreateSecurityDescriptor  +
test eax eax +
jl loc_1008901  +
push ebx  +
push edi  +
push 1  +
push [ebp+arg_4]  +
call ds:RtlSetDaclSecurityDescriptor  +
test eax eax +
jl loc_1008901  +
mov al 1 +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
push edi  +
push ebx  +
jmp loc_1008880  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
and [ebp+var_8] 0 +
lea eax [ebp-1] +
push eax  +
lea eax [ebp+var_8] +
push eax  +
lea eax [ebp+arg_3] +
push eax  +
push dword ptr [ebp+8]  +
call ds:RtlGetDaclSecurityDescriptor  +
test eax eax +
jl locret_1008954  +
cmp byte ptr [ebp+arg_3] 0 +
jz locret_1008954  +
cmp [ebp+var_8] 0 +
jz locret_1008954  +
push [ebp+var_8]  +
mov eax large fs:18h +
mov eax [eax+30h] +
push 0  +
push dword ptr [eax+18h]  +
call ds:RtlFreeHeap  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov eax [ebp+arg_14] +
mov edx [ebp+arg_4] +
mov [ebp+var_8] eax +
and [ebp+var_8] 100h +
push esi  +
push edi  +
jz loc_1008A38  +
push eax  +
push 7FFFFFFFh  +
push [ebp+arg_0]  +
mov ecx edx +
call sub_100834E  +
test eax eax +
jl loc_1008999  +
test edx edx +
jnz loc_1008A53  +
and [ebp+var_4] 0 +
mov esi eax +
test eax eax +
jl loc_1008A30  +
mov ecx [ebp+arg_0] +
mov eax [ebp+var_4] +
mov edi [ebp+arg_4] +
push ebx  +
lea ebx [ecx+eax*2] +
sub edi eax +
xor ecx ecx +
mov [ebp+var_C] ebx +
mov [ebp+var_10] edi +
cmp [ebp+var_8] ecx +
jz loc_10089CF  +
cmp [ebp+arg_8] ecx +
jnz loc_10089CF  +
mov [ebp+arg_8] offset dword_1004098 +
xor esi esi +
test [ebp+arg_14] 0FFFFE000h +
jz loc_1008A63  +
mov esi 80070057h +
test [ebp+arg_14] 1C00h +
jz loc_1008A11  +
mov eax [ebp+arg_4] +
cmp eax ecx +
jz loc_1008A11  +
push [ebp+arg_14]  +
mov edi [ebp+arg_0] +
lea ecx [ebp+var_C] +
push ecx  +
mov ecx [ebp+var_4] +
add eax eax +
push eax  +
lea ebx [ebp+var_10] +
call sub_10083AE  +
mov ebx [ebp+var_C] +
mov edi [ebp+var_10] +
test esi esi +
jge loc_1008A1D  +
cmp esi 8007007Ah +
jnz loc_1008A2F  +
mov eax [ebp+arg_C] +
test eax eax +
jz loc_1008A26  +
mov [eax] ebx +
mov eax [ebp+arg_10] +
test eax eax +
jz loc_1008A2F  +
mov [eax] edi +
pop ebx  +
pop edi  +
mov eax esi +
pop esi  +
leave   +
retn 18h  +
xor eax eax +
test edx edx +
jz loc_1008A46  +
cmp edx 7FFFFFFFh +
jbe loc_1008A4B  +
mov eax 80070057h +
test eax eax +
jl loc_1008999  +
mov eax [ebp+arg_0] +
lea edi [ebp+var_4] +
call sub_1008317  +
jmp loc_100899D  +
cmp edi 1 +
ja loc_1008A85  +
mov eax [ebp+arg_8] +
cmp [eax] cx +
jz loc_1008A1D  +
mov esi [ebp+arg_0] +
neg esi  +
sbb esi esi +
and esi 23h +
add esi 80070057h +
jmp loc_10089E3  +
mov esi edi +
mov eax ebx +
mov [ebp+var_10] ecx +
cmp edi ecx +
jz loc_1008AC4  +
mov edx [ebp+arg_8] +
mov [ebp+var_8] 7FFFFFFEh +
sub [ebp+var_8] edi +
sub edx ebx +
mov [ebp+arg_8] edx +
mov edx [ebp+var_8] +
add edx esi +
jz loc_1008AC0  +
mov edx [ebp+arg_8] +
movzx edx word ptr [edx+eax] +
test dx dx +
jz loc_1008AC0  +
mov [eax] dx +
inc eax  +
inc eax  +
dec esi  +
inc ecx  +
test esi esi +
jnz loc_1008AA2  +
test esi esi +
jnz loc_1008ACE  +
dec eax  +
dec eax  +
dec ecx  +
mov [ebp+var_10] 8007007Ah +
mov esi [ebp+var_10] +
sub edi ecx +
lea ebx [ebx+ecx*2] +
xor edx edx +
xor ecx ecx +
cmp esi ecx +
mov [eax] dx +
mov [ebp+var_C] ebx +
mov [ebp+var_10] edi +
jl loc_10089E3  +
mov eax [ebp+arg_14] +
test eax 200h +
jz loc_1008A1D  +
cmp edi 1 +
jbe loc_1008A1D  +
lea ecx [edi+edi] +
push ebx  +
call sub_1008380  +
jmp loc_1008A1D  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov ecx [ebp+arg_4] +
push esi  +
push edi  +
push [ebp+arg_10]  +
mov edi [ebp+arg_0] +
push 7FFFFFFFh  +
push edi  +
call sub_100834E  +
mov esi eax +
test esi esi +
jl loc_1008C46  +
test [ebp+arg_10] 100h +
push ebx  +
mov ebx ecx +
mov [ebp+var_4] edi +
mov [ebp+var_8] ebx +
jz loc_1008B5B  +
cmp [ebp+arg_14] 0 +
jnz loc_1008B5B  +
mov [ebp+arg_14] offset dword_1004098 +
xor esi esi +
test [ebp+arg_10] 0FFFFE000h +
jz loc_1008B7D  +
mov esi 80070057h +
test ecx ecx +
jz loc_1008BFF  +
xor eax eax +
mov [edi] ax +
jmp loc_1008BFF  +
test ecx ecx +
jnz loc_1008B9E  +
mov eax [ebp+arg_14] +
cmp [eax] si +
jz loc_1008C30  +
mov esi edi +
neg esi  +
sbb esi esi +
and esi 23h +
add esi 80070057h +
jmp loc_1008BFF  +
lea eax [ebp+arg_18] +
push eax  +
push [ebp+arg_14]  +
lea ebx [ecx-1] +
push ebx  +
push edi  +
xor esi esi +
call ds:_vsnwprintf  +
add esp 10h +
test eax eax +
jl loc_1008BC1  +
cmp eax ebx +
ja loc_1008BC1  +
jz loc_1008BC6  +
jmp loc_1008BCE  +
mov esi 8007007Ah +
xor eax eax +
mov [edi+ebx*2] ax +
mov eax ebx +
mov ebx [ebp+arg_4] +
sub ebx eax +
lea ecx [edi+eax*2] +
mov [ebp+var_4] ecx +
mov [ebp+var_8] ebx +
test esi esi +
jl loc_1008BFC  +
mov eax [ebp+arg_10] +
test eax 200h +
jz loc_1008C30  +
cmp ebx 1 +
jbe loc_1008C30  +
push [ebp+var_4]  +
lea ecx [ebx+ebx] +
call sub_1008380  +
jmp loc_1008C30  +
mov ecx [ebp+arg_4] +
test [ebp+arg_10] 1C00h +
jz loc_1008C24  +
test ecx ecx +
jz loc_1008C24  +
push [ebp+arg_10]  +
lea eax [ebp+var_4] +
push eax  +
lea eax [ecx+ecx] +
push eax  +
lea ebx [ebp+var_8] +
xor ecx ecx +
call sub_10083AE  +
mov ebx [ebp+var_8] +
test esi esi +
jge loc_1008C30  +
cmp esi 8007007Ah +
jnz loc_1008C45  +
mov eax [ebp+arg_8] +
test eax eax +
jz loc_1008C3C  +
mov ecx [ebp+var_4] +
mov [eax] ecx +
mov eax [ebp+arg_C] +
test eax eax +
jz loc_1008C45  +
mov [eax] ebx +
pop ebx  +
pop edi  +
mov eax esi +
pop esi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 28h +
mov eax dword_100A000 +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
push esi  +
push edi  +
mov esi offset unk_100A98C +
lea edi [ebp+var_14] +
movs   +
movs   +
mov ebx large fs:18h +
mov esi offset unk_100A4A0 +
lea edi [ebp+var_1C] +
movs   +
movs   +
mov esi offset unk_100A4B0 +
lea edi [ebp+var_24] +
movs   +
movs   +
mov esi offset unk_100A4B8 +
lea edi [ebp+var_C] +
movs   +
movs   +
mov edi ds:RtlLengthRequiredSid +
push 1  +
call edi  +
push eax  +
mov eax [ebx+30h] +
mov ebx ds:RtlAllocateHeap +
push 0  +
push dword ptr [eax+18h]  +
call ebx  +
mov esi large fs:18h +
push 1  +
mov dword_100B2E8 eax +
call edi  +
push eax  +
mov eax [esi+30h] +
push 0  +
push dword ptr [eax+18h]  +
call ebx  +
mov esi large fs:18h +
push 1  +
mov dword_100B25C eax +
call edi  +
push eax  +
mov eax [esi+30h] +
push 0  +
push dword ptr [eax+18h]  +
call ebx  +
mov esi large fs:18h +
push 2  +
mov dword_100B2EC eax +
call edi  +
push eax  +
mov eax [esi+30h] +
push 0  +
push dword ptr [eax+18h]  +
call ebx  +
mov esi large fs:18h +
push 2  +
mov dword_100B2F0 eax +
call edi  +
push eax  +
mov eax [esi+30h] +
push 0  +
push dword ptr [eax+18h]  +
call ebx  +
mov ecx dword_100B2E8 +
xor edx edx +
mov dword_100B250 eax +
cmp ecx edx +
jz loc_1009024  +
cmp dword_100B25C edx +
jz loc_1009024  +
cmp dword_100B2EC edx +
jz loc_1009024  +
cmp dword_100B2F0 edx +
jz loc_1009024  +
cmp eax edx +
jz loc_1009024  +
mov esi ds:RtlInitializeSid +
push 1  +
lea eax [ebp+var_14] +
push eax  +
push ecx  +
call esi  +
test eax eax +
jl loc_1009024  +
push 1  +
lea eax [ebp+var_1C] +
push eax  +
push dword_100B25C  +
call esi  +
test eax eax +
jl loc_1009024  +
push 1  +
lea eax [ebp+var_24] +
push eax  +
push dword_100B2EC  +
call esi  +
test eax eax +
jl loc_1009024  +
push 1  +
lea eax [ebp+var_C] +
push eax  +
push dword_100B2F0  +
call esi  +
test eax eax +
jl loc_1009024  +
push 1  +
lea eax [ebp+var_C] +
push eax  +
push dword_100B250  +
call esi  +
test eax eax +
jl loc_1009024  +
mov esi ds:RtlSubAuthoritySid +
push 0  +
push dword_100B2E8  +
call esi  +
and dword ptr [eax] 0 +
push 0  +
push dword_100B25C  +
call esi  +
and dword ptr [eax] 0 +
push 0  +
push dword_100B2EC  +
call esi  +
and dword ptr [eax] 0 +
push 0  +
push dword_100B2F0  +
call esi  +
push 0  +
mov dword ptr [eax] 4 +
push dword_100B250  +
call esi  +
mov dword ptr [eax] 0Dh +
mov eax large fs:18h +
push 0  +
mov [ebp+var_28] eax +
call edi  +
push eax  +
mov eax [ebp+var_28] +
mov eax [eax+30h] +
push 0  +
push dword ptr [eax+18h]  +
call ebx  +
mov dword_100B2E0 eax +
mov eax large fs:18h +
push 1  +
mov [ebp+var_28] eax +
call edi  +
push eax  +
mov eax [ebp+var_28] +
mov eax [eax+30h] +
push 0  +
push dword ptr [eax+18h]  +
call ebx  +
mov dword_100B258 eax +
mov eax large fs:18h +
push 2  +
mov [ebp+var_28] eax +
call edi  +
push eax  +
mov eax [ebp+var_28] +
mov eax [eax+30h] +
push 0  +
push dword ptr [eax+18h]  +
call ebx  +
mov dword_100B2E4 eax +
mov eax large fs:18h +
push 2  +
mov [ebp+var_28] eax +
call edi  +
push eax  +
mov eax [ebp+var_28] +
mov eax [eax+30h] +
push 0  +
push dword ptr [eax+18h]  +
call ebx  +
mov dword_100B2F4 eax +
mov eax large fs:18h +
push 2  +
mov [ebp+var_28] eax +
call edi  +
push eax  +
mov eax [ebp+var_28] +
mov eax [eax+30h] +
push 0  +
push dword ptr [eax+18h]  +
call ebx  +
mov dword_100B2F8 eax +
mov eax large fs:18h +
push 2  +
mov [ebp+var_28] eax +
call edi  +
push eax  +
mov eax [ebp+var_28] +
mov eax [eax+30h] +
xor edi edi +
push edi  +
push dword ptr [eax+18h]  +
call ebx  +
mov dword_100B254 eax +
mov eax dword_100B2E0 +
cmp eax edi +
jz loc_1009024  +
cmp dword_100B258 edi +
jz loc_1009024  +
cmp dword_100B2E4 edi +
jz loc_1009024  +
cmp dword_100B2F8 edi +
jz loc_1009024  +
cmp dword_100B2F4 edi +
jz loc_1009024  +
mov ebx ds:RtlInitializeSid +
push edi  +
lea ecx [ebp+var_C] +
push ecx  +
push eax  +
call ebx  +
test eax eax +
jl loc_1009024  +
push 1  +
lea eax [ebp+var_C] +
push eax  +
push dword_100B258  +
call ebx  +
test eax eax +
jl loc_1009024  +
push 2  +
lea eax [ebp+var_C] +
push eax  +
push dword_100B2E4  +
call ebx  +
test eax eax +
jl loc_1009024  +
push 2  +
lea eax [ebp+var_C] +
push eax  +
push dword_100B2F4  +
call ebx  +
test eax eax +
jl loc_1009024  +
push 2  +
lea eax [ebp+var_C] +
push eax  +
push dword_100B2F8  +
call ebx  +
test eax eax +
jl loc_1009024  +
push 2  +
lea eax [ebp+var_C] +
push eax  +
push dword_100B254  +
call ebx  +
test eax eax +
jl loc_1009024  +
push edi  +
push dword_100B258  +
call esi  +
push edi  +
mov dword ptr [eax] 12h +
push dword_100B2E4  +
call esi  +
push 20h  +
pop ebx  +
push 1  +
mov [eax] ebx +
push dword_100B2E4  +
call esi  +
push edi  +
mov dword ptr [eax] 220h +
push dword_100B2F4  +
call esi  +
push 1  +
mov [eax] ebx +
push dword_100B2F4  +
call esi  +
push edi  +
mov dword ptr [eax] 225h +
push dword_100B2F8  +
call esi  +
push 1  +
mov [eax] ebx +
push dword_100B2F8  +
call esi  +
push edi  +
mov dword ptr [eax] 223h +
push dword_100B254  +
call esi  +
push 1  +
mov [eax] ebx +
push dword_100B254  +
call esi  +
mov dword ptr [eax] 221h +
call sub_1008445  +
jmp loc_1009026  +
xor al al +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_1004C64  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov eax [ebp+arg_4] +
push esi  +
xor ecx ecx +
mov [eax] cx +
and [ebp+var_8] ecx +
push edi  +
mov [ebp+var_10] eax +
lea eax [ebp-2] +
push eax  +
lea eax [ebp+var_8] +
push eax  +
lea eax [ebp-1] +
push eax  +
push [ebp+arg_0]  +
call ds:RtlGetDaclSecurityDescriptor  +
test eax eax +
jl loc_100913C  +
cmp [ebp+var_1] 0 +
jz loc_100913C  +
mov eax [ebp+var_8] +
test eax eax +
jz loc_100913C  +
xor ecx ecx +
xor edi edi +
cmp cx [eax+4] +
jnb loc_100913C  +
lea ecx [ebp+var_C] +
push ecx  +
push edi  +
push eax  +
call ds:RtlGetAce  +
test eax eax +
jl loc_100914D  +
mov ecx [ebp+var_C] +
xor esi esi +
inc esi  +
mov eax dword_100B260[esi*4] +
mov dl [ecx] +
cmp dl [eax] +
jnz loc_10090DE  +
mov dl [ecx+1] +
cmp dl [eax+1] +
jnz loc_10090DE  +
mov edx [ecx+4] +
cmp edx [eax+4] +
jnz loc_10090DE  +
add eax 8 +
push eax  +
add ecx 8 +
push ecx  +
call ds:RtlEqualSid  +
test al al +
jnz loc_10090E6  +
mov ecx [ebp+var_C] +
inc esi  +
cmp esi 20h +
jb loc_10090AC  +
jmp loc_100912C  +
mov eax [ebp+arg_4] +
cmp [ebp+var_10] eax +
jz loc_100910A  +
push 0  +
lea ecx [ebp+arg_8] +
push ecx  +
lea ecx [ebp+arg_4] +
push ecx  +
push offset asc_10040A4  +
push [ebp+arg_8]  +
push eax  +
call sub_100895D  +
test eax eax +
jl loc_100914D  +
push esi  +
push offset aD  +
push 0  +
lea eax [ebp+arg_8] +
push eax  +
lea eax [ebp+arg_4] +
push eax  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
call sub_1008B15  +
add esp 1Ch +
test eax eax +
jl loc_100914D  +
mov eax [ebp+var_8] +
movzx ecx word ptr [eax+4] +
inc edi  +
cmp edi ecx +
jb loc_1009092  +
mov ecx [ebp+arg_4] +
xor eax eax +
cmp [ebp+var_10] ecx +
setnz al  +
pop edi  +
pop esi  +
leave   +
retn 0Ch  +
xor al al +
jmp loc_1009147  +
***
cmp cl 40h +
jnb loc_100917A  +
cmp cl 20h +
jnb loc_1009170  +
shld edx eax +
shl eax cl +
retn   +
mov edx eax +
xor eax eax +
and cl 1Fh +
shl edx cl +
retn   +
xor eax eax +
xor edx edx +
retn   +
***
retf   +
***
