mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_4] 0 +
ja loc_1001D13  +
mov eax [ebp+arg_0] +
jb loc_1001D0A  +
cmp eax 0FFFFFFFFh +
ja loc_1001D13  +
mov ecx [ebp+arg_8] +
mov [ecx] eax +
xor eax eax +
jmp loc_1001D1E  +
mov eax [ebp+arg_8] +
or dword ptr [eax] 0FFFFFFFFh +
mov eax 80070216h +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
jge loc_1001D38  +
pop ebp  +
jmp sub_1007543  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_0]  +
mov esi ecx +
and dword ptr [esi+4] 0 +
mov dword ptr [esi+8] 1 +
call ds:SysAllocString  +
mov [esi] eax +
test eax eax +
jnz loc_1001D72  +
cmp [ebp+arg_0] eax +
jz loc_1001D72  +
push 8007000Eh  +
call sub_1007543  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi] +
test eax eax +
jz loc_1001D90  +
push eax  +
call ds:SysFreeString  +
mov esi [esi+4] +
test esi esi +
jz loc_1001D9E  +
push esi  +
call ??_V@YAXPAX@Z  +
pop ecx  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
push esi  +
call ds:VariantInit  +
push [ebp+pvargSrc]  +
push esi  +
call ds:VariantCopy  +
push eax  +
call sub_1001D27  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_4] +
test edx edx +
jnz loc_1001DDE  +
mov edx ecx +
mov eax dword ptr [ebp+vt] +
cmp ecx edx +
jnz loc_1001DEA  +
cmp ax [ecx] +
jz loc_1001DFB  +
push eax  +
push 0  +
push edx  +
push ecx  +
call ds:VariantChangeType  +
push eax  +
call sub_1001D27  +
pop ebp  +
retn 8  +
***
adc eax offset VariantClear +
push eax  +
call sub_1001D27  +
retn   +
***
mov edi edi +
push esi  +
mov esi 1F5h +
push esi  +
call sub_100A082  +
push eax  +
mov eax ds:_iob +
add eax 20h +
push eax  +
call sub_1008D2A  +
inc esi  +
cmp esi 20Fh +
jbe loc_1001E21  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 298h +
mov eax dword_101003C +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_4] +
mov ecx [ebp+arg_20] +
mov [ebp+var_298] eax +
mov eax [ebp+arg_C] +
mov [ebp+var_28C] eax +
mov eax [ebp+arg_10] +
push ebx  +
push esi  +
mov [ebp+var_294] eax +
mov eax [ebp+arg_14] +
xor esi esi +
push edi  +
mov [ebp+var_288] eax +
mov [ebp+var_290] ecx +
cmp eax esi +
jz loc_1001EA1  +
push 0FEh  +
push offset String2  +
push eax  +
call sub_1008CA4  +
mov eax [ebp+arg_8] +
push 8  +
mov [ebp+var_258] eax +
mov ebx offset aParser2 +
xor edi edi +
push ebx  +
lea eax [ebp+dwErrCode] +
inc edi  +
push eax  +
mov [ebp+var_27C] 0Ah +
mov [ebp+var_26C] edi +
mov [ebp+var_268] esi +
mov [ebp+var_274] 20000h +
mov [ebp+var_270] esi +
mov [ebp+var_250] esi +
mov [ebp+var_24C] esi +
mov [ebp+var_254] esi +
mov [ebp+var_260] esi +
mov [ebp+var_248] esi +
mov [ebp+var_244] esi +
mov [ebp+var_240] esi +
mov [ebp+var_23C] esi +
mov [ebp+var_25C] esi +
mov [ebp+var_264] offset a?_0 +
call sub_1008C61  +
push 8  +
push ebx  +
lea eax [ebp+var_234] +
push eax  +
mov [ebp+var_21C] edi +
mov [ebp+var_218] esi +
mov [ebp+var_224] 120C0h +
mov [ebp+var_220] esi +
mov [ebp+var_208] esi +
mov [ebp+var_200] esi +
mov [ebp+var_1FC] esi +
mov [ebp+var_22C] edi +
mov [ebp+var_204] esi +
mov [ebp+var_1F8] esi +
mov [ebp+var_1F4] esi +
mov [ebp+var_1F0] esi +
mov [ebp+var_1EC] esi +
mov [ebp+var_20C] esi +
mov [ebp+var_210] esi +
mov [ebp+var_214] offset aS_6 +
call sub_1008C61  +
push 8  +
push ebx  +
lea eax [ebp+var_1E4] +
push eax  +
mov [ebp+var_1CC] edi +
mov [ebp+var_1C8] esi +
mov [ebp+var_1D4] 120C0h +
mov [ebp+var_1D0] esi +
mov [ebp+var_1B8] esi +
mov [ebp+var_1B0] esi +
mov [ebp+var_1AC] esi +
mov [ebp+var_1DC] edi +
mov [ebp+var_1B4] esi +
mov [ebp+var_1C0] esi +
mov [ebp+var_1A8] esi +
mov [ebp+var_1A4] esi +
mov [ebp+var_1A0] esi +
mov [ebp+var_19C] esi +
mov [ebp+var_1BC] esi +
mov [ebp+var_1C4] offset aU +
call sub_1008C61  +
mov eax [ebp+var_288] +
mov [ebp+var_17C] edi +
mov [ebp+var_178] esi +
mov [ebp+var_184] 10h +
mov [ebp+var_180] esi +
mov [ebp+var_168] eax +
mov [ebp+var_160] esi +
mov [ebp+var_15C] esi +
mov [ebp+var_18C] edi +
mov [ebp+var_164] 0FEh +
mov [ebp+var_158] esi +
mov [ebp+var_154] esi +
mov [ebp+var_150] esi +
mov [ebp+var_14C] esi +
push 8  +
push ebx  +
lea eax [ebp+var_194] +
push eax  +
mov [ebp+var_16C] esi +
mov [ebp+var_170] esi +
mov [ebp+var_174] offset aP +
call sub_1008C61  +
mov eax [ebp+arg_18] +
push 8  +
mov [ebp+lpString1] eax +
push ebx  +
lea eax [ebp+var_144] +
push eax  +
mov [ebp+var_12C] edi +
mov [ebp+var_128] esi +
mov [ebp+var_134] 2002h +
mov [ebp+var_130] esi +
mov [ebp+var_110] esi +
mov [ebp+var_10C] esi +
mov [ebp+var_13C] edi +
mov [ebp+var_114] 0FEh +
mov [ebp+var_108] esi +
mov [ebp+var_104] esi +
mov [ebp+var_100] esi +
mov [ebp+var_FC] esi +
mov [ebp+var_11C] offset aListTableCsv +
mov [ebp+var_120] esi +
mov [ebp+var_124] offset aFo +
call sub_1008C61  +
mov eax [ebp+arg_1C] +
push 8  +
mov [ebp+var_C8] eax +
push ebx  +
lea eax [ebp+var_F4] +
push eax  +
mov [ebp+var_DC] edi +
mov [ebp+var_D8] esi +
mov [ebp+var_E4] esi +
mov [ebp+var_E0] esi +
mov [ebp+var_C0] esi +
mov [ebp+var_BC] esi +
mov [ebp+var_EC] 0Ah +
mov [ebp+var_C4] esi +
mov [ebp+var_B8] esi +
mov [ebp+var_B4] esi +
mov [ebp+var_B0] esi +
mov [ebp+var_AC] esi +
mov [ebp+var_CC] offset dword_100131C +
mov [ebp+var_D0] esi +
mov [ebp+var_D4] offset aNh +
call sub_1008C61  +
mov eax [ebp+arg_24] +
push 8  +
mov [ebp+var_78] eax +
push ebx  +
lea eax [ebp+var_A4] +
push eax  +
mov [ebp+var_8C] edi +
mov [ebp+var_88] esi +
mov [ebp+var_94] esi +
mov [ebp+var_90] esi +
mov [ebp+var_70] esi +
mov [ebp+var_6C] esi +
mov [ebp+var_9C] 0Ah +
mov [ebp+var_74] esi +
mov [ebp+var_68] esi +
mov [ebp+var_64] esi +
mov [ebp+var_60] esi +
mov [ebp+var_5C] esi +
mov [ebp+var_7C] offset dword_100131C +
mov [ebp+var_80] esi +
mov [ebp+var_84] offset aV +
call sub_1008C61  +
mov eax [ebp+arg_28] +
mov [ebp+var_3C] edi +
mov [ebp+var_38] esi +
mov [ebp+var_44] esi +
mov [ebp+var_40] esi +
mov [ebp+var_28] eax +
mov [ebp+var_20] esi +
push 8  +
push ebx  +
lea eax [ebp+var_54] +
push eax  +
mov [ebp+var_1C] esi +
mov [ebp+var_4C] 0Ah +
mov [ebp+var_24] esi +
mov [ebp+var_18] esi +
mov [ebp+var_30] esi +
mov [ebp+var_14] esi +
mov [ebp+var_10] esi +
mov [ebp+var_C] esi +
mov [ebp+var_2C] offset dword_100131C +
mov [ebp+var_34] offset aSi +
call sub_1008C61  +
push esi  +
lea eax [ebp+dwErrCode] +
push eax  +
push 8  +
push 0FFFFFFFFh  +
push [ebp+var_298]  +
push [ebp+arg_0]  +
call sub_100B871  +
test eax eax +
jnz loc_100227F  +
push 0CAh  +
call sub_100A082  +
push eax  +
mov eax ds:_iob +
add eax 40h +
push eax  +
call sub_1008D2A  +
xor eax eax +
jmp loc_1002420  +
mov eax [ebp+arg_8] +
cmp [eax] edi +
jnz loc_100229B  +
cmp [ebp+arg_0] 2 +
jle loc_100229B  +
push 6Bh  +
call sub_100A082  +
push eax  +
call sub_100809C  +
jmp loc_1002278  +
mov eax [ebp+var_208] +
mov ebx [ebp+var_28C] +
mov ecx [ebp+var_294] +
mov [ebx] eax +
mov eax [ebp+var_1B8] +
mov [ecx] eax +
cmp [ebp+var_218] esi +
jnz loc_10022CB  +
cmp [ebp+var_1C8] esi +
jz loc_10022D3  +
push 65h  +
jmp loc_100228E  +
cmp [ebp+var_1C8] esi +
jnz loc_10022DF  +
cmp [ebp+var_178] esi +
jz loc_10022DF  +
push 66h  +
jmp loc_100228E  +
cmp [ebp+var_218] esi +
jz loc_10022F7  +
push esi  +
push dword ptr [ebx]  +
call sub_1008332  +
test eax eax +
jnz loc_10022F7  +
push 77h  +
jmp loc_100228E  +
cmp [ebp+var_1C8] esi +
jz loc_1002318  +
mov eax [ebp+var_294] +
push esi  +
push dword ptr [eax]  +
call sub_1008332  +
test eax eax +
jnz loc_1002318  +
push 78h  +
jmp loc_100228E  +
cmp [ebp+var_128] esi +
jz loc_100234B  +
push esi  +
push edi  +
push 12Dh  +
call sub_100A082  +
push eax  +
push [ebp+lpString1]  +
call sub_1008353  +
test eax eax +
jnz loc_100234B  +
cmp [ebp+var_D8] esi +
jz loc_100234B  +
push 76h  +
jmp loc_100228E  +
cmp [ebp+var_38] esi +
jz loc_100235F  +
cmp [ebp+var_88] esi +
jz loc_100235F  +
push 74h  +
jmp loc_100228E  +
push 2  +
push offset Str2  +
push dword ptr [ebx]  +
call ds:StrCmpNW  +
test eax eax +
jnz loc_10023A6  +
push 3  +
push offset asc_10012F8  +
push dword ptr [ebx]  +
call ds:StrCmpNW  +
test eax eax +
jz loc_10023A6  +
mov eax [ebx] +
lea ecx [eax+4] +
push eax  +
mov [ebp+var_28C] ecx +
call sub_10085DC  +
shr eax 1 +
push eax  +
push [ebp+var_28C]  +
push dword ptr [ebx]  +
call sub_1008CA4  +
push dword ptr [ebx]  +
call sub_100A5A6  +
test eax eax +
jnz loc_100241E  +
cmp [ebp+var_178] esi +
jz loc_10023E9  +
cmp [ebp+var_288] esi +
jz loc_10023E1  +
push esi  +
push edi  +
push offset String2  +
push [ebp+var_288]  +
call sub_1008353  +
test eax eax +
jnz loc_10023E1  +
mov eax [ebp+var_290] +
mov [eax] edi +
jmp loc_100241E  +
cmp [ebp+var_178] esi +
jnz loc_100241E  +
cmp [ebp+var_218] esi +
jnz loc_10023F9  +
cmp [ebp+var_1C8] esi +
jz loc_100241E  +
mov eax [ebp+var_290] +
mov [eax] edi +
cmp [ebp+var_288] esi +
jz loc_100241E  +
push 0FEh  +
push offset dword_10012F4  +
push [ebp+var_288]  +
call sub_1008CA4  +
mov eax edi +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_10078F9  +
leave   +
retn 2Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
push 0Ah  +
push 191h  +
call sub_100A082  +
push eax  +
call sub_1009920  +
mov esi [ebp+arg_8] +
and dword ptr [esi+28Ch] 0 +
and dword ptr [esi+290h] 0 +
push 41h  +
mov [esi+200h] eax +
mov ebx offset dword_100131C +
push ebx  +
lea eax [esi+208h] +
push eax  +
mov dword ptr [esi+204h] 1010h +
call sub_1008CA4  +
mov edi 0FEh +
push edi  +
push 15Fh  +
call sub_100A082  +
push eax  +
push esi  +
call sub_1008CA4  +
push 0Ah  +
push 192h  +
call sub_100A082  +
push eax  +
call sub_1009920  +
and dword ptr [esi+520h] 0 +
and dword ptr [esi+524h] 0 +
push 41h  +
mov [esi+494h] eax +
push ebx  +
lea eax [esi+49Ch] +
push eax  +
mov dword ptr [esi+498h] 10h +
call sub_1008CA4  +
push edi  +
push 160h  +
call sub_100A082  +
push eax  +
lea eax [esi+294h] +
push eax  +
call sub_1008CA4  +
push 0Ah  +
push 194h  +
call sub_100A082  +
push eax  +
call sub_1009920  +
and dword ptr [esi+7B4h] 0 +
and dword ptr [esi+7B8h] 0 +
push 41h  +
mov [esi+728h] eax +
push ebx  +
lea eax [esi+730h] +
push eax  +
mov dword ptr [esi+72Ch] 10h +
call sub_1008CA4  +
push edi  +
push 162h  +
call sub_100A082  +
push eax  +
lea eax [esi+528h] +
push eax  +
call sub_1008CA4  +
push 0Ah  +
push 195h  +
call sub_100A082  +
push eax  +
call sub_1009920  +
mov [esi+9BCh] eax +
mov eax [ebp+arg_C] +
neg eax  +
sbb eax eax +
and eax 0FFFFF000h +
add eax 1010h +
and dword ptr [esi+0A48h] 0 +
mov [esi+9C0h] eax +
and dword ptr [esi+0A4Ch] 0 +
push 41h  +
push ebx  +
lea eax [esi+9C4h] +
push eax  +
call sub_1008CA4  +
push edi  +
push 163h  +
call sub_100A082  +
push eax  +
lea eax [esi+7BCh] +
push eax  +
call sub_1008CA4  +
push 0Ah  +
push 196h  +
call sub_100A082  +
push eax  +
call sub_1009920  +
and dword ptr [esi+0CDCh] 0 +
and dword ptr [esi+0CE0h] 0 +
push 41h  +
mov [esi+0C50h] eax +
push ebx  +
lea eax [esi+0C58h] +
push eax  +
mov dword ptr [esi+0C54h] 10h +
call sub_1008CA4  +
push edi  +
push 164h  +
call sub_100A082  +
push eax  +
lea eax [esi+0A50h] +
push eax  +
call sub_1008CA4  +
push 0Ah  +
push 197h  +
call sub_100A082  +
push eax  +
call sub_1009920  +
mov [esi+0EE4h] eax +
mov eax [ebp+arg_C] +
neg eax  +
sbb eax eax +
and dword ptr [esi+0F70h] 0 +
and dword ptr [esi+0F74h] 0 +
and eax 0FFFFF000h +
add eax 1010h +
push 41h  +
mov [esi+0EE8h] eax +
push ebx  +
lea eax [esi+0EECh] +
push eax  +
call sub_1008CA4  +
push edi  +
push 165h  +
call sub_100A082  +
push eax  +
lea eax [esi+0CE4h] +
push eax  +
call sub_1008CA4  +
push 0Ah  +
push 198h  +
call sub_100A082  +
push eax  +
call sub_1009920  +
mov [esi+1178h] eax +
mov eax [ebp+arg_C] +
neg eax  +
sbb eax eax +
and dword ptr [esi+1204h] 0 +
and dword ptr [esi+1208h] 0 +
and eax 0FFFFF000h +
add eax 1010h +
push 41h  +
mov [esi+117Ch] eax +
push ebx  +
lea eax [esi+1180h] +
push eax  +
call sub_1008CA4  +
push edi  +
push 166h  +
call sub_100A082  +
push eax  +
lea eax [esi+0F78h] +
push eax  +
call sub_1008CA4  +
push 0Ah  +
push 199h  +
call sub_100A082  +
push eax  +
call sub_1009920  +
mov [esi+140Ch] eax +
mov eax [ebp+arg_C] +
neg eax  +
sbb eax eax +
and dword ptr [esi+1498h] 0 +
and dword ptr [esi+149Ch] 0 +
and eax 0FFFFF000h +
add eax 1010h +
push 41h  +
mov [esi+1410h] eax +
push ebx  +
lea eax [esi+1414h] +
push eax  +
call sub_1008CA4  +
push edi  +
push 167h  +
call sub_100A082  +
push eax  +
lea eax [esi+120Ch] +
push eax  +
call sub_1008CA4  +
push 0Ah  +
push 19Ah  +
call sub_100A082  +
push eax  +
call sub_1009920  +
mov [esi+16A0h] eax +
mov eax [ebp+arg_C] +
neg eax  +
sbb eax eax +
and dword ptr [esi+172Ch] 0 +
and dword ptr [esi+1730h] 0 +
and eax 0FFFFF000h +
add eax 1010h +
push 41h  +
mov [esi+16A4h] eax +
push ebx  +
lea eax [esi+16A8h] +
push eax  +
call sub_1008CA4  +
push edi  +
push 168h  +
call sub_100A082  +
push eax  +
lea eax [esi+14A0h] +
push eax  +
call sub_1008CA4  +
push 0Ah  +
push 19Bh  +
call sub_100A082  +
push eax  +
call sub_1009920  +
mov [esi+1934h] eax +
mov eax [ebp+arg_C] +
neg eax  +
sbb eax eax +
and dword ptr [esi+19C0h] 0 +
and dword ptr [esi+19C4h] 0 +
and eax 0FFFFF000h +
add eax 1010h +
push 41h  +
mov [esi+1938h] eax +
push ebx  +
lea eax [esi+193Ch] +
push eax  +
call sub_1008CA4  +
push edi  +
push 169h  +
call sub_100A082  +
push eax  +
lea eax [esi+1734h] +
push eax  +
call sub_1008CA4  +
push 0Ah  +
push 19Dh  +
call sub_100A082  +
push eax  +
call sub_1009920  +
mov [esi+1BC8h] eax +
mov eax [ebp+arg_C] +
neg eax  +
sbb eax eax +
and dword ptr [esi+1C54h] 0 +
and dword ptr [esi+1C58h] 0 +
and eax 0FFFFF000h +
add eax 1010h +
push 41h  +
mov [esi+1BCCh] eax +
push ebx  +
lea eax [esi+1BD0h] +
push eax  +
call sub_1008CA4  +
push edi  +
push 16Bh  +
call sub_100A082  +
push eax  +
lea eax [esi+19C8h] +
push eax  +
call sub_1008CA4  +
push 0Ah  +
push 19Fh  +
call sub_100A082  +
push eax  +
call sub_1009920  +
mov [esi+1E5Ch] eax +
mov eax [ebp+arg_C] +
neg eax  +
sbb eax eax +
and dword ptr [esi+1EE8h] 0 +
and dword ptr [esi+1EECh] 0 +
and eax 0FFFFF000h +
add eax 1010h +
push 41h  +
mov [esi+1E60h] eax +
push ebx  +
lea eax [esi+1E64h] +
push eax  +
call sub_1008CA4  +
push edi  +
push 16Dh  +
call sub_100A082  +
push eax  +
lea eax [esi+1C5Ch] +
push eax  +
call sub_1008CA4  +
push 0Ah  +
push 1A1h  +
call sub_100A082  +
push eax  +
call sub_1009920  +
mov [esi+20F0h] eax +
mov eax [ebp+arg_C] +
neg eax  +
sbb eax eax +
and dword ptr [esi+217Ch] 0 +
and dword ptr [esi+2180h] 0 +
and eax 0FFFFF000h +
add eax 1010h +
push 41h  +
mov [esi+20F4h] eax +
push ebx  +
lea eax [esi+20F8h] +
push eax  +
call sub_1008CA4  +
push edi  +
push 16Fh  +
call sub_100A082  +
push eax  +
lea eax [esi+1EF0h] +
push eax  +
call sub_1008CA4  +
push 0Ah  +
push 1A2h  +
call sub_100A082  +
push eax  +
call sub_1009920  +
and dword ptr [esi+2410h] 0 +
and dword ptr [esi+2414h] 0 +
push 41h  +
mov [esi+2384h] eax +
push ebx  +
lea eax [esi+238Ch] +
push eax  +
mov dword ptr [esi+2388h] 10h +
call sub_1008CA4  +
push edi  +
push 170h  +
call sub_100A082  +
push eax  +
lea eax [esi+2184h] +
push eax  +
call sub_1008CA4  +
push 0Ah  +
push 1A3h  +
call sub_100A082  +
push eax  +
call sub_1009920  +
mov [esi+2618h] eax +
mov eax [ebp+arg_C] +
neg eax  +
sbb eax eax +
and dword ptr [esi+26A4h] 0 +
and dword ptr [esi+26A8h] 0 +
and eax 0FFFFF000h +
add eax 1010h +
push 41h  +
mov [esi+261Ch] eax +
push ebx  +
lea eax [esi+2620h] +
push eax  +
call sub_1008CA4  +
push edi  +
push 173h  +
call sub_100A082  +
push eax  +
lea eax [esi+2418h] +
push eax  +
call sub_1008CA4  +
push 0Ah  +
push 1A4h  +
call sub_100A082  +
push eax  +
call sub_1009920  +
mov [esi+28ACh] eax +
mov eax [ebp+arg_C] +
neg eax  +
sbb eax eax +
and dword ptr [esi+2938h] 0 +
and dword ptr [esi+293Ch] 0 +
and eax 0FFFFF000h +
add eax 1010h +
push 41h  +
mov [esi+28B0h] eax +
push ebx  +
lea eax [esi+28B4h] +
push eax  +
call sub_1008CA4  +
push edi  +
push 171h  +
call sub_100A082  +
push eax  +
add esi 26ACh +
push esi  +
call sub_1008CA4  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20Ch +
mov eax dword_101003C +
xor eax ebp +
mov [ebp+var_4] eax +
push offset ModuleName  +
call ds:GetModuleHandleW  +
test eax eax +
jnz loc_1002A78  +
xor eax eax +
jmp loc_1002AA8  +
push offset ProcName  +
push eax  +
call ds:GetProcAddress  +
test eax eax +
jz loc_1002A74  +
push 104h  +
lea ecx [ebp+var_20C] +
push ecx  +
call eax  +
test eax eax +
jnz loc_1002AA5  +
call ds:GetLastError  +
cmp eax 78h +
jz loc_1002A74  +
xor eax eax +
inc eax  +
mov ecx [ebp+var_4] +
xor ecx ebp +
call sub_10078F9  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
mov esi ds:GetLocaleInfoW +
push edi  +
push 0  +
push 0  +
push [ebp+LCType]  +
mov edi 400h +
push edi  +
call esi  +
mov ebx eax +
test ebx ebx +
jz loc_1002AFC  +
lea eax [ebx+ebx+2] +
push eax  +
call sub_1008533  +
mov ecx [ebp+arg_4] +
mov [ecx] eax +
test eax eax +
jz loc_1002AFC  +
push ebx  +
push eax  +
push [ebp+LCType]  +
push edi  +
call esi  +
xor eax eax +
inc eax  +
jmp loc_1002AFE  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
call __EH_prolog3_catch  +
xor esi esi +
mov [ebp-4] esi +
push 2  +
push esi  +
call ds:CoInitializeEx  +
cmp eax esi +
jge loc_1002B2E  +
push eax  +
call sub_1007543  +
push esi  +
push esi  +
push esi  +
push 3  +
push 1  +
push esi  +
push esi  +
push 0FFFFFFFFh  +
push esi  +
call ds:CoInitializeSecurity  +
cmp eax esi +
jge loc_1002B4A  +
push eax  +
call sub_1007543  +
push dword ptr [ebp+8]  +
push offset riid  +
push 1  +
push esi  +
push offset rclsid  +
call ds:CoCreateInstance  +
cmp eax esi +
jge loc_1002B6A  +
push eax  +
call sub_1007543  +
or dword ptr [ebp-4] 0FFFFFFFFh +
xor eax eax +
inc eax  +
jmp loc_1002BB7  +
mov eax [ebp-14h] +
push dword ptr [eax+4]  +
call sub_1006A2B  +
push 0CAh  +
call sub_100A082  +
push eax  +
mov eax ds:_iob +
add eax 40h +
push eax  +
call sub_1008D2A  +
call sub_1008070  +
push eax  +
mov eax ds:_iob +
add eax 40h +
push eax  +
call sub_1008D2A  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov eax offset loc_1002BB5 +
retn   +
xor eax eax +
call __EH_epilog3  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_C] +
test eax eax +
jz loc_1002BD6  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_1002BE3  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+arg_4] +
test eax eax +
jz loc_1002BF0  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax [ebp+arg_10] +
test eax eax +
jz loc_1002BFD  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
push esi  +
lea eax [ebp+arg_28] +
push eax  +
call sub_10088CF  +
push [ebp+pvarg]  +
mov esi ds:VariantClear +
call esi  +
test eax eax +
jnz loc_1002C36  +
push [ebp+arg_18]  +
call esi  +
test eax eax +
jnz loc_1002C36  +
push [ebp+arg_1C]  +
call esi  +
test eax eax +
jnz loc_1002C36  +
push [ebp+arg_24]  +
call esi  +
test eax eax +
jnz loc_1002C36  +
push [ebp+arg_20]  +
call esi  +
pop esi  +
pop ebp  +
retn 2Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push esi  +
lea eax [ebp+pvarg] +
push eax  +
call ds:VariantInit  +
mov eax [ebp+arg_0] +
mov ecx [eax] +
xor esi esi +
push esi  +
push esi  +
lea edx [ebp+pvarg] +
push edx  +
push esi  +
push [ebp+arg_4]  +
push eax  +
call dword ptr [ecx+10h]  +
cmp eax esi +
jz loc_1002C78  +
lea eax [ebp+pvarg] +
push eax  +
call ds:VariantClear  +
jmp loc_1002CAF  +
cmp word ptr [ebp+pvarg.anonymous_0] 1 +
jz loc_1002C9D  +
cmp word ptr [ebp+pvarg.anonymous_0] si +
jz loc_1002CA2  +
cmp word ptr [ebp+pvarg.anonymous_0] 0Bh +
jnz loc_1002C6C  +
mov ecx [ebp+arg_8] +
xor eax eax +
cmp word ptr [ebp+pvarg.anonymous_0+8] 0FFFFh +
setz al  +
mov [ecx] eax +
jmp loc_1002C6C  +
mov eax [ebp+arg_8] +
mov [eax] esi +
lea eax [ebp+pvarg] +
push eax  +
call ds:VariantClear  +
xor eax eax +
inc eax  +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
push 0Ah  +
push 1A6h  +
call sub_100A082  +
push eax  +
call sub_1009920  +
mov esi [ebp+arg_8] +
and dword ptr [esi+28Ch] 0 +
and dword ptr [esi+290h] 0 +
push 41h  +
mov [esi+200h] eax +
mov ebx offset dword_100131C +
push ebx  +
lea eax [esi+208h] +
push eax  +
mov dword ptr [esi+204h] 10h +
call sub_1008CA4  +
mov edi 100h +
push edi  +
push 174h  +
call sub_100A082  +
push eax  +
push esi  +
call sub_1008CA4  +
push 0Ah  +
push 1A7h  +
call sub_100A082  +
push eax  +
call sub_1009920  +
and dword ptr [esi+520h] 0 +
and dword ptr [esi+524h] 0 +
push 41h  +
mov [esi+494h] eax +
push ebx  +
lea eax [esi+49Ch] +
push eax  +
mov dword ptr [esi+498h] 10h +
call sub_1008CA4  +
push edi  +
push 175h  +
call sub_100A082  +
push eax  +
lea eax [esi+294h] +
push eax  +
call sub_1008CA4  +
push 0Ah  +
push 1A8h  +
call sub_100A082  +
push eax  +
call sub_1009920  +
and dword ptr [esi+7B4h] 0 +
and dword ptr [esi+7B8h] 0 +
push 41h  +
mov [esi+728h] eax +
push ebx  +
lea eax [esi+730h] +
push eax  +
mov dword ptr [esi+72Ch] 10h +
call sub_1008CA4  +
push edi  +
push 176h  +
call sub_100A082  +
push eax  +
lea eax [esi+528h] +
push eax  +
call sub_1008CA4  +
push 0Ah  +
push 1A9h  +
call sub_100A082  +
push eax  +
call sub_1009920  +
and dword ptr [esi+0A48h] 0 +
and dword ptr [esi+0A4Ch] 0 +
push 41h  +
mov [esi+9BCh] eax +
push ebx  +
lea eax [esi+9C4h] +
mov dword ptr [esi+9C0h] 10h +
push eax  +
call sub_1008CA4  +
push edi  +
push 177h  +
call sub_100A082  +
push eax  +
add esi 7BCh +
push esi  +
call sub_1008CA4  +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0B0h +
mov eax dword_101003C +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
mov esi [ebp+arg_0] +
push 55h  +
lea eax [ebp+var_B0] +
push eax  +
call ds:GetUserDefaultLocaleName  +
test eax eax +
jle loc_1002E6F  +
push 0  +
lea eax [ebp+var_B0] +
push eax  +
call ds:LocaleNameToLCID  +
test eax eax +
jnz loc_1002E75  +
call ds:GetUserDefaultLCID  +
and dword ptr [esi] 0 +
xor edx edx +
mov ecx eax +
and ecx 3FFh +
inc edx  +
cmp cx dx +
jz loc_1002EA6  +
cmp cx 0Dh +
jz loc_1002EA6  +
cmp cx 1Eh +
jz loc_1002EA6  +
cmp cx 39h +
jz loc_1002EA6  +
cmp cx 49h +
jz loc_1002EA6  +
cmp cx 29h +
jnz loc_1002EAD  +
mov [esi] edx +
mov eax 409h +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop esi  +
call sub_10078F9  +
leave   +
retn 4  +
***
call __EH_prolog3  +
mov esi ecx +
push 0Ch  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov ecx eax +
mov [ebp-10h] ecx +
and dword ptr [ebp-4] 0 +
test ecx ecx +
jz loc_1002EEE  +
push dword ptr [ebp+8]  +
call sub_1001D41  +
jmp loc_1002EF0  +
xor eax eax +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov [esi] eax +
test eax eax +
jnz loc_1002F04  +
push 8007000Eh  +
call sub_1007543  +
mov eax esi +
call __EH_epilog3  +
retn 4  +
***
mov eax [ecx] +
test eax eax +
jz loc_1002F27  +
mov eax [eax] +
test eax eax +
jz loc_1002F27  +
push eax  +
call ds:SysStringLen  +
retn   +
xor eax eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
mov ebx [ebp+len] +
push esi  +
mov esi ecx +
and dword ptr [esi+4] 0 +
push edi  +
mov ecx ebx +
mov dword ptr [esi+8] 1 +
call sub_1002F13  +
mov ecx [ebp+arg_4] +
mov edi eax +
call sub_1002F13  +
lea ecx [ebp+len] +
push ecx  +
push eax  +
push edi  +
mov [ebp+var_4] eax +
call sub_10062DE  +
test eax eax +
jl loc_1002F82  +
mov eax [ebp+len] +
push 2  +
pop ecx  +
mul  ecx +
lea ecx [ebp+len] +
push ecx  +
push edx  +
push eax  +
call sub_1001CF5  +
test eax eax +
jge loc_1002F8C  +
push 8007000Eh  +
call sub_1007543  +
push [ebp+len]  +
push 0  +
call ds:SysAllocStringByteLen  +
mov [esi] eax +
test eax eax +
jnz loc_1002FAE  +
mov eax [ebp+var_4] +
add eax edi +
jz loc_1002FF8  +
push 8007000Eh  +
call sub_1007543  +
mov eax [ebx] +
test eax eax +
jz loc_1002FB8  +
mov eax [eax] +
jmp loc_1002FBA  +
xor eax eax +
test eax eax +
jz loc_1002FCE  +
lea ecx [edi+edi+2] +
push ecx  +
push eax  +
push dword ptr [esi]  +
call memcpy  +
add esp 0Ch +
mov eax [ebp+arg_4] +
mov eax [eax] +
test eax eax +
jz loc_1002FDB  +
mov eax [eax] +
jmp loc_1002FDD  +
xor eax eax +
test eax eax +
jz loc_1002FF8  +
mov ecx [ebp+var_4] +
lea ecx [ecx+ecx+2] +
push ecx  +
push eax  +
mov eax [esi] +
lea eax [eax+edi*2] +
push eax  +
call memcpy  +
add esp 0Ch +
pop edi  +
mov eax esi +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 4E0h +
mov eax dword_101003C +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
push ebx  +
mov ebx [ebp+arg_8] +
push esi  +
push edi  +
mov [ebp+var_490] eax +
mov eax [ebp+arg_4] +
xor esi esi +
push 1FAh  +
mov [ebp+lpString] eax +
lea eax [ebp+var_280] +
push esi  +
push eax  +
mov dword ptr [ebp+FileName] esi +
call memset  +
add esp 0Ch +
mov edi 0FFh +
push edi  +
push offset Str2  +
lea eax [ebp+FileName] +
push eax  +
call sub_1008CA4  +
xor eax eax +
push 1FCh  +
mov [ebp+var_484] ax +
lea eax [ebp-482h] +
push esi  +
push eax  +
call memset  +
add esp 0Ch +
push edi  +
push [ebp+lpString]  +
lea eax [ebp+var_484] +
push eax  +
call sub_1008CA4  +
lea eax [ebp+var_484] +
push offset asc_10013FC  +
push eax  +
call ds:wcstok  +
pop ecx  +
mov [ebp+var_494] eax +
mov eax [ebp+var_490] +
pop ecx  +
lea ecx [eax+2] +
mov dx [eax] +
inc eax  +
inc eax  +
cmp dx si +
jnz loc_10030BB  +
sub eax ecx +
sar eax 1 +
jz loc_1003159  +
push esi  +
push offset asc_10013FC  +
push [ebp+lpString]  +
call sub_1008C34  +
mov [ebp+lpString] eax +
cmp eax esi +
jnz loc_10030FE  +
xor eax eax +
inc eax  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_10078F9  +
leave   +
retn 10h  +
push 1  +
push 24h  +
push eax  +
call ds:_wcsnset  +
add esp 0Ch +
push edi  +
push [ebp+var_490]  +
lea eax [ebp+FileName] +
push eax  +
call sub_1008CE7  +
push edi  +
push offset word_10012F0  +
lea eax [ebp+FileName] +
push eax  +
call sub_1008CE7  +
push edi  +
push [ebp+var_494]  +
lea eax [ebp+FileName] +
push eax  +
call sub_1008CE7  +
push edi  +
push [ebp+lpString]  +
lea eax [ebp+FileName] +
push eax  +
call sub_1008CE7  +
jmp loc_100316C  +
push edi  +
push [ebp+lpString]  +
lea eax [ebp+FileName] +
push eax  +
call sub_1008CA4  +
call sub_1002A50  +
mov [ebp+var_490] eax +
cmp eax esi +
jz loc_1003199  +
mov eax large fs:18h +
mov eax [eax+0F70h] +
lea ecx [ebp+FileName] +
mov [eax+14C0h] ecx +
mov [eax+14C4h] esi +
push esi  +
push esi  +
push 3  +
push esi  +
push 1  +
push 80000000h  +
lea eax [ebp+FileName] +
push eax  +
call ds:CreateFileW  +
mov [ebp+lpString] eax +
cmp eax 0FFFFFFFFh +
jz loc_10030EA  +
cmp [ebp+var_490] esi +
jz loc_10031E1  +
mov eax large fs:18h +
mov eax [eax+0F70h] +
mov [eax+14C0h] esi +
mov [eax+14C4h] esi +
push esi  +
push esi  +
push esi  +
push 2  +
push esi  +
push [ebp+lpString]  +
call ds:CreateFileMappingW  +
mov [ebp+var_490] eax +
cmp eax esi +
jnz loc_100320E  +
push [ebp+lpString]  +
call ds:CloseHandle  +
jmp loc_10030EA  +
push esi  +
push esi  +
push esi  +
push 4  +
push eax  +
call ds:MapViewOfFile  +
mov ecx eax +
mov [ebp+var_4D8] ecx +
cmp ecx esi +
jnz loc_1003241  +
push [ebp+var_490]  +
mov esi ds:CloseHandle +
call esi  +
push [ebp+lpString]  +
call esi  +
jmp loc_10030EA  +
mov eax 5A4Dh +
cmp [ecx] ax +
jz loc_1003254  +
push ecx  +
call ds:UnmapViewOfFile  +
jmp loc_1003226  +
mov eax [ecx+3Ch] +
add eax ecx +
cmp dword ptr [eax] 4550h +
mov [ebp+var_4D4] eax +
jz loc_100328E  +
xor esi esi +
inc esi  +
push ecx  +
call ds:UnmapViewOfFile  +
push [ebp+var_490]  +
mov edi ds:CloseHandle +
call edi  +
push [ebp+lpString]  +
call edi  +
mov eax esi +
jmp loc_10030ED  +
cmp [ebp+arg_C] 2 +
lea edx [eax+108h] +
jz loc_10032A0  +
lea edx [eax+0F8h] +
mov ecx [eax+38h] +
mov [ebp+var_48C] edx +
movzx edx word ptr [eax+6] +
mov [ebp+var_4AC] ecx +
cmp edx esi +
jbe loc_10033CC  +
lea eax [ecx-1] +
not eax  +
mov [ebp+var_498] eax +
mov [ebp+var_494] edx +
jmp loc_10032D4  +
mov ecx [ebp+var_4AC] +
mov edx [ebp+var_48C] +
mov eax [edx+8] +
cmp eax esi +
jnz loc_10032E4  +
mov eax [edx+10h] +
push 4  +
lea esi [eax+ecx-1] +
and esi [ebp+var_498] +
push offset aPage  +
push edx  +
call ds:_strnicmp  +
add esp 0Ch +
test eax eax +
jnz loc_100330B  +
add [ebx+0Ch] esi +
jmp loc_10033B1  +
push offset aInit  +
push [ebp+var_48C]  +
call ds:_stricmp  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_100332A  +
add [ebx+10h] esi +
jmp loc_10033B1  +
push offset a_bss  +
push [ebp+var_48C]  +
call ds:_stricmp  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_1003346  +
mov [ebx+8] esi +
jmp loc_10033B1  +
push offset a_edata  +
push [ebp+var_48C]  +
call ds:_stricmp  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_1003362  +
mov [ebx+18h] esi +
jmp loc_10033B1  +
push offset a_idata  +
push [ebp+var_48C]  +
call ds:_stricmp  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_100337E  +
mov [ebx+14h] esi +
jmp loc_10033B1  +
push offset a_rsrc  +
push [ebp+var_48C]  +
call ds:_stricmp  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_100339A  +
mov [ebx+1Ch] esi +
jmp loc_10033B1  +
mov eax [ebp+var_48C] +
mov eax [eax+24h] +
test eax 20000000h +
jz loc_10033AE  +
add [ebx] esi +
jmp loc_10033B1  +
add [ebx+4] esi +
add [ebp+var_48C] 28h +
xor esi esi +
dec [ebp+var_494]  +
jnz loc_10032CE  +
mov eax [ebp+var_4D4] +
mov eax [eax+8] +
mov [ebp+var_4B0] eax +
lea eax [ebp+var_4B0] +
push eax  +
call ds:localtime  +
pop ecx  +
cmp eax esi +
jz loc_10034E5  +
mov ecx 76Ch +
add cx [eax+14h] +
mov [ebp+var_494] esi +
mov [ebp+Time.wYear] cx +
mov cx [eax+10h] +
inc cx  +
mov [ebp+Time.wMonth] cx +
mov cx [eax+18h] +
mov [ebp+Time.wDayOfWeek] cx +
mov cx [eax+0Ch] +
mov [ebp+Time.wDay] cx +
mov cx [eax+8] +
mov [ebp+Time.wHour] cx +
mov cx [eax+4] +
mov ax [eax] +
mov [ebp+Time.wSecond] ax +
xor eax eax +
mov [ebp+Time.wMilliseconds] ax +
lea eax [ebp+var_494] +
push eax  +
mov [ebp+Time.wMinute] cx +
call sub_1002E30  +
mov esi [ebp+var_494] +
push 40h  +
lea ecx [ebp+TimeStr] +
push ecx  +
mov ecx esi +
dec ecx  +
neg ecx  +
sbb ecx ecx +
not ecx  +
and ecx offset aMmDdYyyy +
push ecx  +
lea ecx [ebp+Time] +
push ecx  +
push 0  +
push eax  +
call ds:GetDateFormatW  +
push edi  +
lea eax [ebp+TimeStr] +
push eax  +
add ebx 20h +
push ebx  +
call sub_1008CA4  +
dec esi  +
neg esi  +
push 40h  +
sbb esi esi +
lea eax [ebp+TimeStr] +
push eax  +
not esi  +
and esi offset aHhMmSs +
push esi  +
lea eax [ebp+Time] +
push eax  +
push 0  +
push 400h  +
call ds:GetTimeFormatW  +
mov esi 0FEh +
push esi  +
push offset asc_100139C  +
push ebx  +
call sub_1008CE7  +
push esi  +
lea eax [ebp+TimeStr] +
push eax  +
push ebx  +
call sub_1008CE7  +
xor esi esi +
mov ecx [ebp+var_4D8] +
jmp loc_100326A  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax dword_101003C +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_C] +
push ebx  +
mov ebx [ebp+arg_8] +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov edi [ebp+arg_4] +
push edi  +
push 10h  +
mov [ebp+var_8] eax +
call sub_1002AB9  +
test eax eax +
jnz loc_1003528  +
xor eax eax +
jmp loc_1003588  +
push ebx  +
push 0Eh  +
call sub_1002AB9  +
test eax eax +
jz loc_1003524  +
push [ebp+var_8]  +
push 0Fh  +
call sub_1002AB9  +
test eax eax +
jz loc_1003524  +
xor eax eax +
cmp esi eax +
jz loc_1003585  +
push eax  +
push 1  +
push offset a320  +
mov [esi+4] eax +
mov [esi+14h] eax +
mov [esi] eax +
push dword ptr [edi]  +
call sub_1008353  +
test eax eax +
jnz loc_100356C  +
mov dword ptr [esi+8] 20h +
jmp loc_1003578  +
push dword ptr [edi]  +
call ds:_wtoi  +
pop ecx  +
mov [esi+8] eax +
mov eax [ebx] +
mov [esi+0Ch] eax +
mov eax [ebp+var_8] +
mov eax [eax] +
mov [esi+10h] eax +
xor eax eax +
inc eax  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_10078F9  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov eax [eax] +
push esi  +
mov esi ecx +
mov [esi] eax +
test eax eax +
jz loc_10035BB  +
add eax 8 +
push eax  +
call ds:InterlockedIncrement  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1001D7E  +
test [ebp+arg_0] 1 +
jz loc_10035E1  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push esi  +
mov esi ecx +
push edi  +
lea eax [esi+8] +
push eax  +
call ds:InterlockedDecrement  +
mov edi eax +
test edi edi +
jnz loc_1003610  +
test esi esi +
jz loc_1003610  +
push 1  +
mov ecx esi +
call sub_10035C7  +
mov eax edi +
pop edi  +
pop esi  +
retn   +
***
mov edi edi +
push esi  +
mov esi ecx +
mov ecx [esi] +
test ecx ecx +
jz loc_100362D  +
call sub_10035ED  +
and dword ptr [esi] 0 +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
mov eax [esi] +
push edi  +
mov edi ecx +
test eax eax +
jz loc_100365A  +
add eax 8 +
push eax  +
call ds:InterlockedIncrement  +
mov ecx edi +
call sub_100361A  +
mov eax [esi] +
mov [edi] eax +
mov eax edi +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
call __EH_prolog3  +
mov esi ecx +
call sub_100361A  +
push 0Ch  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov ecx eax +
mov [ebp-10h] ecx +
xor eax eax +
mov [ebp-4] eax +
cmp ecx eax +
jz loc_10036A3  +
push dword ptr [ebp+8]  +
call sub_1001D41  +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov [esi] eax +
mov eax esi +
call __EH_epilog3  +
retn 4  +
***
call __EH_prolog3  +
mov esi ecx +
push 0Ch  +
call ??2@YAPAXI@Z  +
pop ecx  +
mov ecx eax +
mov [ebp-10h] ecx +
xor edi edi +
mov [ebp-4] edi +
cmp ecx edi +
jz loc_10036E7  +
push dword ptr [ebp+8]  +
push esi  +
call sub_1002F2F  +
mov edi eax +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov ecx esi +
call sub_100361A  +
mov [esi] edi +
mov eax esi +
call __EH_epilog3  +
retn 4  +
***
call __EH_prolog3  +
and dword ptr [ebp-4] 0 +
and dword ptr [ebp-10h] 0 +
push ecx  +
mov ecx [ebp+8] +
call sub_100359E  +
and dword ptr [ebp-4] 0 +
push dword ptr [ebp+0Ch]  +
mov ecx [ebp+8] +
mov dword ptr [ebp-10h] 1 +
call sub_10036B8  +
mov eax [ebp+8] +
call __EH_epilog3  +
retn 8  +
***
call __EH_prolog3  +
and dword ptr [ebp-4] 0 +
and dword ptr [ebp-10h] 0 +
push dword ptr [ebp+0Ch]  +
mov ecx [ebp+8] +
call sub_1002EC1  +
and dword ptr [ebp-4] 0 +
push dword ptr [ebp+10h]  +
mov ecx [ebp+8] +
mov dword ptr [ebp-10h] 1 +
call sub_10036B8  +
mov eax [ebp+8] +
call __EH_epilog3  +
retn 0Ch  +
***
call __EH_prolog3  +
mov esi ecx +
mov edi [ebp+8] +
and dword ptr [esi] 0 +
cmp word ptr [edi] 8 +
jnz loc_10037AF  +
push dword ptr [edi+8]  +
call sub_1003672  +
jmp loc_10037E6  +
lea eax [ebp-1Ch] +
push eax  +
call ds:VariantInit  +
and dword ptr [ebp-4] 0 +
push edi  +
push 8  +
lea ecx [ebp-1Ch] +
call sub_1001DD0  +
push dword ptr [ebp-14h]  +
mov ecx esi +
call sub_1003672  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea eax [ebp-1Ch] +
push eax  +
call ds:VariantClear  +
push eax  +
call sub_1001D27  +
mov eax esi +
call __EH_epilog3  +
retn 4  +
***
call __EH_prolog3_catch  +
push eax  +
mov eax ds:_iob +
add eax 40h +
push eax  +
call sub_1008D2A  +
xor esi esi +
push esi  +
lea eax [ebp-74h] +
push eax  +
lea eax [ebp-84h] +
push eax  +
lea eax [ebp-44h] +
push eax  +
lea eax [ebp-54h] +
push eax  +
lea eax [ebp-64h] +
push eax  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp-14h]  +
push dword ptr [ebp-18h]  +
push dword ptr [ebp-1Ch]  +
push dword ptr [ebp-20h]  +
call sub_1002BC4  +
mov [ebp-4] esi +
mov eax offset loc_10038C0 +
retn   +
***
call __EH_prolog3  +
lea eax [ebp-1Ch] +
push eax  +
call ds:VariantInit  +
mov eax [ebp+8] +
mov ecx [eax] +
xor ebx ebx +
push ebx  +
push ebx  +
lea edx [ebp-1Ch] +
push edx  +
push ebx  +
push dword ptr [ebp+0Ch]  +
push eax  +
call dword ptr [ecx+10h]  +
cmp eax ebx +
jz loc_1003C08  +
lea eax [ebp-1Ch] +
push eax  +
call ds:VariantClear  +
jmp loc_1003C77  +
cmp word ptr [ebp-1Ch] 1 +
mov esi ds:VariantClear +
jz loc_1003C71  +
cmp [ebp-1Ch] bx +
jz loc_1003C71  +
lea eax [ebp-1Ch] +
push eax  +
lea ecx [ebp-2Ch] +
call sub_1001DA5  +
mov [ebp-4] ebx +
lea eax [ebp-2Ch] +
push eax  +
lea ecx [ebp+8] +
call sub_100378B  +
mov byte ptr [ebp-4] 1 +
mov eax [eax] +
cmp eax ebx +
jz loc_1003C44  +
mov eax [eax] +
jmp loc_1003C46  +
xor eax eax +
mov ecx [ebp+10h] +
push eax  +
call ??4CHString@@QAEABV0@PBG@Z  +
mov [ebp-4] bl +
mov ecx [ebp+8] +
cmp ecx ebx +
jz loc_1003C61  +
call sub_10035ED  +
mov [ebp+8] ebx +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea eax [ebp-2Ch] +
push eax  +
call esi  +
push eax  +
call sub_1001D27  +
lea eax [ebp-1Ch] +
push eax  +
call esi  +
call __EH_epilog3  +
retn 0Ch  +
***
call __EH_prolog3_catch_GS  +
mov eax [ebp+0Ch] +
mov [ebp-0A98h] eax +
mov esi [ebp+10h] +
xor ebx ebx +
mov [ebp-4] ebx +
xor edi edi +
inc edi  +
mov [ebp-0A90h] edi +
mov [ebp-0A8Ch] ebx +
lea ecx [ebp-0A80h] +
call ??0CHString@@QAE@XZ  +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp-0A7Ch] +
call ??0CHString@@QAE@XZ  +
mov byte ptr [ebp-4] 2 +
lea ecx [ebp-0A78h] +
call ??0CHString@@QAE@XZ  +
mov byte ptr [ebp-4] 3 +
lea ecx [ebp-0A74h] +
call ??0CHString@@QAE@XZ  +
mov byte ptr [ebp-4] 4 +
mov [ebp-0A94h] ebx +
mov [ebp-0A68h] ebx +
mov dword ptr [ebp-0A6Ch] 2 +
call sub_100BBF9  +
mov [ebp-0A68h] eax +
cmp eax ebx +
jnz loc_1003D67  +
mov byte ptr [ebp-4] 3 +
lea ecx [ebp-0A74h] +
call ??1CHString@@QAE@XZ  +
mov byte ptr [ebp-4] 2 +
lea ecx [ebp-0A78h] +
call ??1CHString@@QAE@XZ  +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp-0A7Ch] +
call ??1CHString@@QAE@XZ  +
mov [ebp-4] bl +
lea ecx [ebp-0A80h] +
call ??1CHString@@QAE@XZ  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp+8] +
call ??1CHString@@QAE@XZ  +
mov eax edi +
call sub_10079E3  +
retn 18h  +
push ebx  +
push edi  +
push 12Eh  +
call sub_100A082  +
push eax  +
push esi  +
call sub_1008353  +
test eax eax +
jnz loc_1003D8A  +
mov dword ptr [ebp-0A6Ch] 2 +
jmp loc_1003DCA  +
push ebx  +
push edi  +
push 12Dh  +
call sub_100A082  +
push eax  +
push esi  +
call sub_1008353  +
test eax eax +
jnz loc_1003DA9  +
mov [ebp-0A6Ch] edi +
jmp loc_1003DCA  +
push ebx  +
push edi  +
push 12Fh  +
call sub_100A082  +
push eax  +
push esi  +
call sub_1008353  +
test eax eax +
jnz loc_1003DCA  +
mov dword ptr [ebp-0A6Ch] 3 +
lea eax [ebp-0A64h] +
push eax  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp-0A6Ch]  +
call sub_1002CB9  +
cmp [ebp+14h] edi +
jnz loc_1003DEE  +
or dword ptr [ebp-0A6Ch] 1000h +
push 0Ah  +
pop ecx  +
xor eax eax +
lea edi [ebp-0AC0h] +
stos   +
mov esi offset aNA +
mov [ebp-0A88h] ebx +
cmp [ebp-0A90h] ebx +
jbe loc_1004185  +
mov [ebp-0A70h] ebx +
mov edi [ebp-0A70h] +
lea edi [ebp+edi*4-0AC0h] +
mov eax [edi] +
cmp eax ebx +
jz loc_1003E33  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [edi] ebx +
inc dword ptr [ebp-0A70h]  +
cmp dword ptr [ebp-0A70h] 0Ah +
jb loc_1003E18  +
push esi  +
lea ecx [ebp-0A80h] +
call ??4CHString@@QAEABV0@PBG@Z  +
push esi  +
lea ecx [ebp-0A7Ch] +
call ??4CHString@@QAEABV0@PBG@Z  +
push esi  +
lea ecx [ebp-0A74h] +
call ??4CHString@@QAEABV0@PBG@Z  +
push esi  +
lea ecx [ebp-0A78h] +
call ??4CHString@@QAEABV0@PBG@Z  +
mov eax [ebp-0A98h] +
mov ecx [eax] +
lea edx [ebp-0A90h] +
push edx  +
lea edx [ebp-0AC0h] +
push edx  +
push 0Ah  +
push 0FFFFFFFFh  +
push eax  +
call dword ptr [ecx+10h]  +
inc dword ptr [ebp-0A8Ch]  +
cmp eax ebx +
jl loc_1004136  +
mov [ebp-0A84h] ebx +
mov edi [ebp-0A84h] +
cmp edi [ebp-0A90h] +
jnb loc_10040E1  +
push 10h  +
push dword ptr [ebp-0A68h]  +
call sub_100C0E6  +
mov [ebp-0A70h] eax +
mov byte ptr [ebp-4] 5 +
lea edi [ebp+edi*4-0AC0h] +
lea eax [ebp-0A80h] +
push eax  +
push offset aDevicename  +
push dword ptr [edi]  +
call sub_1003BCD  +
cmp eax ebx +
jge loc_1003EF1  +
push eax  +
call sub_1007543  +
lea eax [ebp-0A7Ch] +
push eax  +
push offset aInfname  +
push dword ptr [edi]  +
call sub_1003BCD  +
cmp eax ebx +
jge loc_1003F0E  +
push eax  +
call sub_1007543  +
lea eax [ebp-0A94h] +
push eax  +
push offset aIssigned  +
push dword ptr [edi]  +
call sub_1002C40  +
cmp eax ebx +
jge loc_1003F2B  +
push eax  +
call sub_1007543  +
lea eax [ebp-0A78h] +
push eax  +
push offset aManufacturer  +
push dword ptr [edi]  +
call sub_1003BCD  +
cmp eax ebx +
jge loc_1003F48  +
push eax  +
call sub_1007543  +
mov dword ptr [ebp-4] 4 +
mov eax [edi] +
cmp eax ebx +
jz loc_1003F5D  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [edi] ebx +
lea ecx [ebp-0A74h] +
cmp [ebp-0A94h] ebx +
jz loc_1003F72  +
push offset aTrue  +
jmp loc_1003F77  +
push offset aFalse  +
call ??4CHString@@QAEABV0@PBG@Z  +
push ebx  +
push dword ptr [ebp-0A80h]  +
push ebx  +
push dword ptr [ebp-0A70h]  +
push dword ptr [ebp-0A68h]  +
call sub_100C62E  +
push ebx  +
push dword ptr [ebp-0A7Ch]  +
xor edi edi +
inc edi  +
push edi  +
push dword ptr [ebp-0A70h]  +
push dword ptr [ebp-0A68h]  +
call sub_100C62E  +
push ebx  +
push dword ptr [ebp-0A74h]  +
push 2  +
push dword ptr [ebp-0A70h]  +
push dword ptr [ebp-0A68h]  +
call sub_100C62E  +
push ebx  +
push dword ptr [ebp-0A78h]  +
push 3  +
push dword ptr [ebp-0A70h]  +
push dword ptr [ebp-0A68h]  +
call sub_100C62E  +
cmp [ebp-0A88h] ebx +
jnz loc_100400D  +
mov eax [ebp-0A6Ch] +
and eax 0Fh +
cmp al 3 +
jz loc_100400D  +
push offset String  +
mov eax ds:_iob +
add eax 20h +
push eax  +
call sub_1008D2A  +
mov [ebp-0A88h] edi +
push esi  +
lea ecx [ebp-0A80h] +
call ??4CHString@@QAEABV0@PBG@Z  +
push esi  +
lea ecx [ebp-0A7Ch] +
call ??4CHString@@QAEABV0@PBG@Z  +
push esi  +
lea ecx [ebp-0A74h] +
call ??4CHString@@QAEABV0@PBG@Z  +
push esi  +
lea ecx [ebp-0A78h] +
call ??4CHString@@QAEABV0@PBG@Z  +
inc dword ptr [ebp-0A84h]  +
jmp loc_1003EA4  +
push 75h  +
call sub_100A082  +
push eax  +
mov eax ds:_iob +
add eax 40h +
push eax  +
call sub_1008D2A  +
mov esi [ebp-0A84h] +
lea esi [ebp+esi*4-0AC0h] +
mov eax [esi] +
xor ebx ebx +
cmp eax ebx +
jz loc_1004081  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [esi] ebx +
mov dword ptr [ebp-4] 4 +
mov eax offset loc_100408E +
retn   +
xor esi esi +
inc esi  +
xor ebx ebx +
mov byte ptr [ebp-4] 3 +
lea ecx [ebp-0A74h] +
call ??1CHString@@QAE@XZ  +
mov byte ptr [ebp-4] 2 +
lea ecx [ebp-0A78h] +
call ??1CHString@@QAE@XZ  +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp-0A7Ch] +
call ??1CHString@@QAE@XZ  +
mov [ebp-4] bl +
lea ecx [ebp-0A80h] +
call ??1CHString@@QAE@XZ  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp+8] +
call ??1CHString@@QAE@XZ  +
mov eax esi +
jmp loc_1003D5F  +
cmp dword ptr [ebp-0A88h] 1 +
jnz loc_1003E06  +
push dword ptr [ebp-0A68h]  +
push dword ptr [ebp-0A6Ch]  +
lea eax [ebp-0A64h] +
push eax  +
push 4  +
call sub_100D734  +
push dword ptr [ebp-0A68h]  +
call sub_100BC1E  +
or dword ptr [ebp-0A6Ch] 1000h +
mov eax [ebp-0A6Ch] +
or eax 1 +
cmp eax 1001h +
jnz loc_1003E06  +
jmp loc_1003E00  +
cmp eax 80041010h +
jnz loc_100416A  +
push 212h  +
call sub_100A082  +
push eax  +
mov eax ds:_iob +
add eax 40h +
push eax  +
call sub_1008D2A  +
lea eax [ebp-0A68h] +
push eax  +
call sub_100BC6E  +
push 8  +
pop esi  +
jmp loc_1004093  +
push eax  +
call sub_1006A2B  +
push 20001h  +
mov eax ds:_iob +
add eax 40h +
push eax  +
call sub_100A09A  +
jmp loc_1004156  +
cmp [ebp-0A8Ch] ebx +
jnz loc_10041C5  +
push 212h  +
call sub_100A082  +
push eax  +
mov eax ds:_iob +
add eax 40h +
push eax  +
call sub_1008D2A  +
xor edi edi +
lea esi [ebp+edi*4-0AC0h] +
mov eax [esi] +
cmp eax ebx +
jz loc_10041BD  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [esi] ebx +
inc edi  +
cmp edi 0Ah +
jb loc_10041A8  +
jmp loc_1004162  +
lea eax [ebp-0A68h] +
push eax  +
call sub_100BC6E  +
xor esi esi +
jmp loc_1004093  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0FFFFFFFFh  +
push offset byte_100DAA3  +
mov eax large fs:0 +
push eax  +
push ecx  +
mov eax 3430h +
call __alloca_probe  +
mov eax dword_101003C +
xor eax ebp +
mov [ebp+var_14] eax +
push ebx  +
push esi  +
push edi  +
push eax  +
lea eax [ebp+var_C] +
mov large fs:0 eax +
mov [ebp+var_10] esp +
mov eax [ebp+arg_4] +
mov [ebp+var_3400] eax +
mov edi [ebp+arg_8] +
xor ebx ebx +
mov [ebp+var_4] ebx +
mov [ebp+var_3408] ebx +
mov [ebp+var_33EC] 1 +
lea ecx [ebp+var_33B4] +
call ??0CHString@@QAE@XZ  +
mov byte ptr [ebp+var_4] 1 +
mov [ebp+var_33D0] ebx +
mov [ebp+var_33E4] ebx +
mov [ebp+var_3390] ebx +
lea ecx [ebp+var_33C0] +
call ??0CHString@@QAE@XZ  +
mov byte ptr [ebp+var_4] 2 +
lea ecx [ebp+var_33A8] +
call ??0CHString@@QAE@XZ  +
mov byte ptr [ebp+var_4] 3 +
mov [ebp+var_3388] ebx +
mov [ebp+var_337C] ebx +
xor eax eax +
mov word ptr [ebp+var_814] ax +
push 1FCh  +
push ebx  +
lea eax [ebp+var_814+2] +
push eax  +
call memset  +
mov [ebp+var_614] ebx +
mov esi 1FAh +
push esi  +
push ebx  +
lea eax [ebp+var_610] +
push eax  +
call memset  +
mov [ebp+var_33D8] 2 +
mov [ebp+var_33F0] ebx +
mov [ebp+lpFormat] ebx +
mov [ebp+var_3378] ebx +
mov [ebp+var_33B8] ebx +
mov [ebp+var_33E0] ebx +
mov [ebp+var_33D4] ebx +
mov [ebp+lpMem] ebx +
mov [ebp+lpString1] ebx +
mov [ebp+lpNumberStr] ebx +
mov dword ptr [ebp+String] ebx +
push esi  +
push ebx  +
lea eax [ebp+var_410] +
push eax  +
call memset  +
mov [ebp+Value] ebx +
push esi  +
push ebx  +
lea eax [ebp+var_210] +
push eax  +
call memset  +
add esp 30h +
lea ecx [ebp+var_33AC] +
call ??0CHString@@QAE@XZ  +
mov byte ptr [ebp+var_4] 4 +
lea ecx [ebp+var_33C8] +
call ??0CHString@@QAE@XZ  +
mov byte ptr [ebp+var_4] 5 +
lea ecx [ebp+var_33A4] +
call ??0CHString@@QAE@XZ  +
mov byte ptr [ebp+var_4] 6 +
lea ecx [ebp+var_33C4] +
call ??0CHString@@QAE@XZ  +
mov byte ptr [ebp+var_4] 7 +
lea ecx [ebp+var_33BC] +
call ??0CHString@@QAE@XZ  +
mov byte ptr [ebp+var_4] 8 +
lea ecx [ebp+var_33B0] +
call ??0CHString@@QAE@XZ  +
mov byte ptr [ebp+var_4] 9 +
lea ecx [ebp+var_33CC] +
call ??0CHString@@QAE@XZ  +
mov byte ptr [ebp+var_4] 0Ah +
lea ecx [ebp+lpString] +
call ??0CHString@@QAE@XZ  +
mov byte ptr [ebp+var_4] 0Bh +
mov [ebp+var_33F4] ebx +
mov [ebp+var_3398] ebx +
mov [ebp+var_3394] ebx +
mov [ebp+var_339C] ebx +
push 18h  +
call sub_1008533  +
mov [ebp+lpFormat] eax +
cmp eax ebx +
jnz loc_1004494  +
mov byte ptr [ebp+var_4] 0Ah +
lea ecx [ebp+lpString] +
call ??1CHString@@QAE@XZ  +
mov byte ptr [ebp+var_4] 9 +
lea ecx [ebp+var_33CC] +
call ??1CHString@@QAE@XZ  +
mov byte ptr [ebp+var_4] 8 +
lea ecx [ebp+var_33B0] +
call ??1CHString@@QAE@XZ  +
mov byte ptr [ebp+var_4] 7 +
lea ecx [ebp+var_33BC] +
call ??1CHString@@QAE@XZ  +
mov byte ptr [ebp+var_4] 6 +
lea ecx [ebp+var_33C4] +
call ??1CHString@@QAE@XZ  +
mov byte ptr [ebp+var_4] 5 +
lea ecx [ebp+var_33A4] +
call ??1CHString@@QAE@XZ  +
mov byte ptr [ebp+var_4] 4 +
lea ecx [ebp+var_33C8] +
call ??1CHString@@QAE@XZ  +
mov byte ptr [ebp+var_4] 3 +
lea ecx [ebp+var_33AC] +
call ??1CHString@@QAE@XZ  +
mov byte ptr [ebp+var_4] 2 +
lea ecx [ebp+var_33A8] +
call ??1CHString@@QAE@XZ  +
mov byte ptr [ebp+var_4] 1 +
lea ecx [ebp+var_33C0] +
call ??1CHString@@QAE@XZ  +
mov byte ptr [ebp+var_4] bl +
lea ecx [ebp+var_33B4] +
call ??1CHString@@QAE@XZ  +
or [ebp+var_4] 0FFFFFFFFh +
lea ecx [ebp+arg_0] +
call ??1CHString@@QAE@XZ  +
xor eax eax +
inc eax  +
mov ecx [ebp+var_C] +
mov large fs:0 ecx +
pop ecx  +
pop edi  +
pop esi  +
pop ebx  +
mov ecx [ebp+var_14] +
xor ecx ebp +
call sub_10078F9  +
leave   +
retn 18h  +
mov ecx 220h +
lea eax [ebp+var_A34] +
mov [eax] bl +
inc eax  +
dec ecx  +
jnz loc_100449F  +
push ebx  +
xor esi esi +
inc esi  +
push esi  +
push 12Eh  +
call sub_100A082  +
push eax  +
push edi  +
call sub_1008353  +
test eax eax +
jnz loc_10044CB  +
mov [ebp+var_33D8] 2 +
jmp loc_100450B  +
push ebx  +
push esi  +
push 12Dh  +
call sub_100A082  +
push eax  +
push edi  +
call sub_1008353  +
test eax eax +
jnz loc_10044EA  +
mov [ebp+var_33D8] esi +
jmp loc_100450B  +
push ebx  +
push esi  +
push 12Fh  +
call sub_100A082  +
push eax  +
push edi  +
call sub_1008353  +
test eax eax +
jnz loc_100450B  +
mov [ebp+var_33D8] 3 +
push [ebp+arg_14]  +
lea eax [ebp+var_3374] +
push eax  +
push [ebp+arg_C]  +
push [ebp+var_33D8]  +
call sub_1002436  +
mov [ebp+var_33FC] esi +
cmp [ebp+var_33EC] esi +
jnz loc_1005570  +
call sub_100BBF9  +
mov [ebp+var_337C] eax +
cmp eax ebx +
jnz loc_100460B  +
lea eax [ebp+lpFormat] +
push eax  +
call sub_10088CF  +
mov byte ptr [ebp+var_4] 0Ah +
lea ecx [ebp+lpString] +
call ??1CHString@@QAE@XZ  +
mov byte ptr [ebp+var_4] 9 +
lea ecx [ebp+var_33CC] +
call ??1CHString@@QAE@XZ  +
mov byte ptr [ebp+var_4] 8 +
lea ecx [ebp+var_33B0] +
call ??1CHString@@QAE@XZ  +
mov byte ptr [ebp+var_4] 7 +
lea ecx [ebp+var_33BC] +
call ??1CHString@@QAE@XZ  +
mov byte ptr [ebp+var_4] 6 +
lea ecx [ebp+var_33C4] +
call ??1CHString@@QAE@XZ  +
mov byte ptr [ebp+var_4] 5 +
lea ecx [ebp+var_33A4] +
call ??1CHString@@QAE@XZ  +
mov byte ptr [ebp+var_4] 4 +
lea ecx [ebp+var_33C8] +
call ??1CHString@@QAE@XZ  +
mov byte ptr [ebp+var_4] 3 +
lea ecx [ebp+var_33AC] +
call ??1CHString@@QAE@XZ  +
mov byte ptr [ebp+var_4] 2 +
lea ecx [ebp+var_33A8] +
call ??1CHString@@QAE@XZ  +
mov byte ptr [ebp+var_4] 1 +
lea ecx [ebp+var_33C0] +
call ??1CHString@@QAE@XZ  +
mov byte ptr [ebp+var_4] bl +
lea ecx [ebp+var_33B4] +
call ??1CHString@@QAE@XZ  +
or [ebp+var_4] 0FFFFFFFFh +
lea ecx [ebp+arg_0] +
call ??1CHString@@QAE@XZ  +
mov eax esi +
jmp loc_1004478  +
mov eax [ebp+var_3400] +
mov ecx [eax] +
lea edx [ebp+var_33EC] +
push edx  +
lea edx [ebp+var_3378] +
push edx  +
push esi  +
push 0FFFFFFFFh  +
push eax  +
call dword ptr [ecx+10h]  +
cmp eax ebx +
jl loc_1005435  +
cmp [ebp+var_33EC] 1 +
jnz loc_1005435  +
lea eax [ebp+pvargSrc] +
push eax  +
call ds:VariantInit  +
mov esi offset aNA +
push esi  +
lea ecx [ebp+var_33AC] +
call ??4CHString@@QAEABV0@PBG@Z  +
push esi  +
lea ecx [ebp+var_33C8] +
call ??4CHString@@QAEABV0@PBG@Z  +
push esi  +
lea ecx [ebp+var_33A4] +
call ??4CHString@@QAEABV0@PBG@Z  +
push esi  +
lea ecx [ebp+var_33C4] +
call ??4CHString@@QAEABV0@PBG@Z  +
push esi  +
lea ecx [ebp+var_33BC] +
call ??4CHString@@QAEABV0@PBG@Z  +
push esi  +
lea ecx [ebp+var_33B0] +
call ??4CHString@@QAEABV0@PBG@Z  +
push esi  +
lea ecx [ebp+var_33CC] +
call ??4CHString@@QAEABV0@PBG@Z  +
push esi  +
lea ecx [ebp+lpString] +
call ??4CHString@@QAEABV0@PBG@Z  +
mov byte ptr [ebp+var_4] 0Ch +
lea eax [ebp+var_33AC] +
push eax  +
push offset aName  +
push [ebp+var_3378]  +
call sub_1003BCD  +
cmp eax ebx +
jge loc_10046D4  +
push eax  +
call sub_1007543  +
lea eax [ebp+var_33C8] +
push eax  +
push offset aSystemname  +
push [ebp+var_3378]  +
call sub_1003BCD  +
cmp eax ebx +
jge loc_10046F5  +
push eax  +
call sub_1007543  +
lea eax [ebp+var_33A4] +
push eax  +
push offset aStartmode  +
push [ebp+var_3378]  +
call sub_1003BCD  +
cmp eax ebx +
jge loc_1004716  +
push eax  +
call sub_1007543  +
lea eax [ebp+var_33C4] +
push eax  +
push offset aDisplayname  +
push [ebp+var_3378]  +
call sub_1003BCD  +
cmp eax ebx +
jge loc_1004737  +
push eax  +
call sub_1007543  +
lea eax [ebp+var_33BC] +
push eax  +
push offset aDescription  +
push [ebp+var_3378]  +
call sub_1003BCD  +
cmp eax ebx +
jge loc_1004758  +
push eax  +
call sub_1007543  +
lea eax [ebp+var_33B0] +
push eax  +
push offset aStatus  +
push [ebp+var_3378]  +
call sub_1003BCD  +
cmp eax ebx +
jge loc_1004779  +
push eax  +
call sub_1007543  +
lea eax [ebp+var_33CC] +
push eax  +
push offset aState  +
push [ebp+var_3378]  +
call sub_1003BCD  +
cmp eax ebx +
jge loc_100479A  +
push eax  +
call sub_1007543  +
lea eax [ebp+var_33C0] +
push eax  +
push offset aAcceptpause  +
push [ebp+var_3378]  +
call sub_1003BCD  +
cmp eax ebx +
jge loc_10047BB  +
push eax  +
call sub_1007543  +
lea eax [ebp+var_33A8] +
push eax  +
push offset aAcceptstop  +
push [ebp+var_3378]  +
call sub_1003BCD  +
cmp eax ebx +
jge loc_10047DC  +
push eax  +
call sub_1007543  +
lea eax [ebp+lpString] +
push eax  +
push offset aServicetype  +
push [ebp+var_3378]  +
call sub_1003BCD  +
cmp eax ebx +
jge loc_10047FD  +
push eax  +
call sub_1007543  +
mov [ebp+var_4] 0Bh +
mov byte ptr [ebp+var_4] 0Eh +
mov eax [ebp+var_3378] +
mov ecx [eax] +
push ebx  +
push ebx  +
lea edx [ebp+pvargSrc] +
push edx  +
push ebx  +
push offset aPathname  +
push eax  +
call dword ptr [ecx+10h]  +
mov [ebp+var_3408] eax +
xor esi esi +
inc esi  +
cmp eax ebx +
jnz loc_1004A2B  +
cmp word ptr [ebp+pvargSrc.anonymous_0] si +
jz loc_1004A2B  +
cmp word ptr [ebp+pvargSrc.anonymous_0] bx +
jz loc_1004A2B  +
lea eax [ebp+pvargSrc] +
push eax  +
lea ecx [ebp+pvarg] +
call sub_1001DA5  +
mov byte ptr [ebp+var_4] 0Fh +
lea eax [ebp+pvarg] +
push eax  +
lea ecx [ebp+var_33F8] +
call sub_100378B  +
mov [ebp+var_3420] eax +
mov byte ptr [ebp+var_4] 10h +
cmp [eax] ebx +
jz loc_1004890  +
mov eax [eax] +
mov [ebp+var_342C] eax +
mov eax [eax] +
jmp loc_1004892  +
xor eax eax +
push eax  +
lea ecx [ebp+var_33B4] +
call ??4CHString@@QAEABV0@PBG@Z  +
mov byte ptr [ebp+var_4] 0Fh +
mov ecx [ebp+var_33F8] +
cmp ecx ebx +
jz loc_10048B7  +
call sub_10035ED  +
mov [ebp+var_33F8] ebx +
mov byte ptr [ebp+var_4] 0Eh +
lea eax [ebp+pvarg] +
push eax  +
call ds:VariantClear  +
push eax  +
call sub_1001D27  +
mov edi 1FCh +
push edi  +
call sub_1008533  +
mov [ebp+var_3388] eax +
cmp eax ebx +
jnz loc_100491C  +
mov eax [ebp+var_3378] +
cmp eax ebx +
jz loc_10048F9  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp+var_3378] ebx +
lea eax [ebp+var_337C] +
push eax  +
call sub_100BC6E  +
lea eax [ebp+lpFormat] +
push eax  +
call sub_10088CF  +
mov [ebp+var_3430] esi +
jmp loc_1004554  +
lea ecx [ebp+var_33B4] +
call ?GetData@CHString@@IBEPAUCHStringData@@XZ  +
mov eax [eax+4] +
mov [ebp+var_3428] eax +
mov [ebp+var_33D0] eax +
add eax 2 +
push eax  +
push [ebp+var_33B4]  +
push [ebp+var_3388]  +
call sub_1008CA4  +
mov eax [ebp+var_3388] +
mov [ebp+var_33E4] eax +
mov [ebp+var_33E8] 220h +
lea eax [ebp+var_A34] +
mov [ebp+var_3404] eax +
cmp [ebp+var_33E8] ebx +
jz loc_1004986  +
mov [eax] bl +
inc eax  +
mov [ebp+var_3404] eax +
dec [ebp+var_33E8]  +
jmp loc_100496D  +
push edi  +
call sub_1008533  +
mov [ebp+var_3390] eax +
cmp eax ebx +
jnz loc_10049DB  +
mov eax [ebp+var_3378] +
cmp eax ebx +
jz loc_10049AC  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp+var_3378] ebx +
lea eax [ebp+var_337C] +
push eax  +
call sub_100BC6E  +
lea eax [ebp+lpFormat] +
push eax  +
call sub_10088CF  +
lea eax [ebp+var_3388] +
push eax  +
call sub_10088CF  +
mov [ebp+var_341C] esi +
jmp loc_1004554  +
mov ecx [ebp+var_33D0] +
add ecx 2 +
push ecx  +
push [ebp+arg_0]  +
push eax  +
call sub_1008CA4  +
mov edi 0FFh +
push edi  +
push [ebp+var_33E4]  +
lea eax [ebp+var_814] +
push eax  +
call sub_1008CA4  +
push [ebp+arg_10]  +
lea eax [ebp+var_A34] +
push eax  +
push [ebp+var_33E4]  +
push [ebp+var_3390]  +
call sub_1003006  +
mov [ebp+var_3424] eax +
cmp eax esi +
jnz loc_1004A58  +
lea eax [ebp+var_337C] +
push eax  +
call sub_100BC6E  +
lea eax [ebp+var_3390] +
push eax  +
call sub_10088CF  +
lea eax [ebp+var_3388] +
push eax  +
call sub_10088CF  +
mov byte ptr [ebp+var_4] 0Bh +
jmp loc_1004529  +
mov [ebp+var_4] 0Bh +
push 10h  +
push [ebp+var_337C]  +
call sub_100C0E6  +
mov esi eax +
push ebx  +
push [ebp+var_33C8]  +
push ebx  +
push esi  +
push [ebp+var_337C]  +
call sub_100C62E  +
push ebx  +
push [ebp+var_33AC]  +
push 1  +
push esi  +
push [ebp+var_337C]  +
call sub_100C62E  +
push ebx  +
push [ebp+var_33C4]  +
push 2  +
push esi  +
push [ebp+var_337C]  +
call sub_100C62E  +
push ebx  +
push [ebp+var_33BC]  +
push 3  +
push esi  +
push [ebp+var_337C]  +
call sub_100C62E  +
push ebx  +
push [ebp+lpString]  +
call sub_1008332  +
add eax 2 +
cmp eax edi +
jbe loc_1004AD6  +
mov eax edi +
push eax  +
push [ebp+lpString]  +
lea eax [ebp+String] +
push eax  +
call sub_1008CA4  +
push edi  +
push offset aDriver  +
lea eax [ebp+var_614] +
push eax  +
call sub_1008CA4  +
lea eax [ebp+var_614] +
lea edx [eax+2] +
mov cx [eax] +
inc eax  +
inc eax  +
cmp cx bx +
jnz loc_1004B04  +
sub eax edx +
sar eax 1 +
mov edi eax +
lea eax [ebp+String] +
lea ecx [eax+2] +
mov dx [eax] +
inc eax  +
inc eax  +
cmp dx bx +
jnz loc_1004B1D  +
sub eax ecx +
sar eax 1 +
sub eax edi +
xor ecx ecx +
mov [ebp+eax*2+String] cx +
push ebx  +
lea eax [ebp+String] +
push eax  +
push 4  +
push esi  +
push [ebp+var_337C]  +
call sub_100C62E  +
push ebx  +
push [ebp+var_33A4]  +
push 5  +
push esi  +
push [ebp+var_337C]  +
call sub_100C62E  +
push ebx  +
push [ebp+var_33CC]  +
push 6  +
push esi  +
push [ebp+var_337C]  +
call sub_100C62E  +
push ebx  +
push [ebp+var_33B0]  +
push 7  +
push esi  +
push [ebp+var_337C]  +
call sub_100C62E  +
push ebx  +
push [ebp+var_33A8]  +
call sub_1008332  +
mov [ebp+var_33D0] eax +
mov edi 1FCh +
push edi  +
call sub_1008533  +
mov [ebp+lpMem] eax +
cmp eax ebx +
jnz loc_1004BFE  +
mov eax [ebp+var_3378] +
cmp eax ebx +
jz loc_1004BC9  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp+var_3378] ebx +
lea eax [ebp+lpFormat] +
push eax  +
call sub_10088CF  +
lea eax [ebp+var_3390] +
push eax  +
call sub_10088CF  +
lea eax [ebp+var_3388] +
push eax  +
call sub_10088CF  +
lea eax [ebp+var_337C] +
push eax  +
call sub_100BC6E  +
jmp loc_10043C5  +
mov ecx [ebp+var_33D0] +
add ecx 2 +
push ecx  +
push [ebp+var_33A8]  +
push eax  +
call sub_1008CA4  +
xor eax eax +
mov ecx [ebp+lpMem] +
mov edx [ebp+var_33D0] +
mov [ecx+edx*2] ax +
push ebx  +
push 1  +
push offset a0  +
push [ebp+lpMem]  +
call sub_1008353  +
push [ebp+lpMem]  +
test eax eax +
jnz loc_1004C52  +
call sub_10085DC  +
shr eax 1 +
push eax  +
push offset aFalse  +
jmp loc_1004C5F  +
call sub_10085DC  +
shr eax 1 +
push eax  +
push offset aTrue  +
push [ebp+lpMem]  +
call sub_1008CA4  +
push ebx  +
push [ebp+lpMem]  +
push 8  +
push esi  +
push [ebp+var_337C]  +
call sub_100C62E  +
push ebx  +
push [ebp+var_33C0]  +
call sub_1008332  +
mov [ebp+var_33D0] eax +
push edi  +
call sub_1008533  +
mov [ebp+lpString1] eax +
cmp eax ebx +
jnz loc_1004CFB  +
mov eax [ebp+var_3378] +
cmp eax ebx +
jz loc_1004CB7  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp+var_3378] ebx +
lea eax [ebp+lpFormat] +
push eax  +
call sub_10088CF  +
lea eax [ebp+var_3390] +
push eax  +
call sub_10088CF  +
lea eax [ebp+var_3388] +
push eax  +
call sub_10088CF  +
lea eax [ebp+lpMem] +
push eax  +
call sub_10088CF  +
xor esi esi +
inc esi  +
lea eax [ebp+var_337C] +
push eax  +
call sub_100BC6E  +
jmp loc_1004554  +
mov ecx [ebp+var_33D0] +
add ecx 2 +
push ecx  +
push [ebp+var_33C0]  +
push eax  +
call sub_1008CA4  +
xor eax eax +
mov ecx [ebp+lpString1] +
mov edx [ebp+var_33D0] +
mov [ecx+edx*2] ax +
push ebx  +
push 1  +
push offset a0  +
push [ebp+lpString1]  +
call sub_1008353  +
push [ebp+lpString1]  +
test eax eax +
jnz loc_1004D4F  +
call sub_10085DC  +
shr eax 1 +
push eax  +
push offset aFalse  +
jmp loc_1004D5C  +
call sub_10085DC  +
shr eax 1 +
push eax  +
push offset aTrue  +
push [ebp+lpString1]  +
call sub_1008CA4  +
push ebx  +
push [ebp+lpString1]  +
push 9  +
push esi  +
push [ebp+var_337C]  +
call sub_100C62E  +
lea eax [ebp+var_339C] +
push eax  +
lea eax [ebp+var_3394] +
push eax  +
lea eax [ebp+var_3398] +
push eax  +
push [ebp+lpFormat]  +
call sub_10034F5  +
cmp eax ebx +
jnz loc_1004E1E  +
mov eax [ebp+var_3378] +
cmp eax ebx +
jz loc_1004DB6  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp+var_3378] ebx +
lea eax [ebp+lpFormat] +
push eax  +
call sub_10088CF  +
lea eax [ebp+var_3390] +
push eax  +
call sub_10088CF  +
lea eax [ebp+var_3388] +
push eax  +
call sub_10088CF  +
lea eax [ebp+lpMem] +
push eax  +
call sub_10088CF  +
lea eax [ebp+lpString1] +
push eax  +
call sub_10088CF  +
lea eax [ebp+var_339C] +
push eax  +
call sub_10088CF  +
lea eax [ebp+var_3394] +
push eax  +
call sub_10088CF  +
lea eax [ebp+var_3398] +
push eax  +
call sub_10088CF  +
push 2  +
pop esi  +
jmp loc_1004CEA  +
push edi  +
call sub_1008533  +
mov [ebp+lpNumberStr] eax +
cmp eax ebx +
jnz loc_1004EA3  +
mov eax [ebp+var_3378] +
cmp eax ebx +
jz loc_1004E44  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp+var_3378] ebx +
lea eax [ebp+lpFormat] +
push eax  +
call sub_10088CF  +
lea eax [ebp+var_3390] +
push eax  +
call sub_10088CF  +
lea eax [ebp+var_3388] +
push eax  +
call sub_10088CF  +
lea eax [ebp+lpMem] +
push eax  +
call sub_10088CF  +
lea eax [ebp+lpString1] +
push eax  +
call sub_10088CF  +
lea eax [ebp+var_339C] +
push eax  +
call sub_10088CF  +
lea eax [ebp+var_3394] +
push eax  +
call sub_10088CF  +
lea eax [ebp+var_3398] +
jmp loc_1004CE1  +
push 0Ah  +
lea eax [ebp+Value] +
push eax  +
push [ebp+var_A28]  +
call ds:_ltow  +
add esp 0Ch +
push 0FFh  +
push [ebp+lpNumberStr]  +
push [ebp+lpFormat]  +
lea eax [ebp+Value] +
push eax  +
push ebx  +
push 400h  +
call ds:GetNumberFormatW  +
cmp eax ebx +
jnz loc_1004F2A  +
lea eax [ebp+lpFormat] +
push eax  +
call sub_10088CF  +
lea eax [ebp+var_3390] +
push eax  +
call sub_10088CF  +
lea eax [ebp+var_3388] +
push eax  +
call sub_10088CF  +
lea eax [ebp+lpMem] +
push eax  +
call sub_10088CF  +
lea eax [ebp+lpString1] +
push eax  +
call sub_10088CF  +
lea eax [ebp+lpNumberStr] +
jmp loc_1004DEC  +
push ebx  +
push [ebp+lpNumberStr]  +
push 0Ah  +
push esi  +
push [ebp+var_337C]  +
call sub_100C62E  +
push edi  +
call sub_1008533  +
mov [ebp+var_33B8] eax +
cmp eax ebx +
jnz loc_1004FAC  +
mov eax [ebp+var_3378] +
cmp eax ebx +
jz loc_1004F65  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp+var_3378] ebx +
lea eax [ebp+lpFormat] +
push eax  +
call sub_10088CF  +
lea eax [ebp+var_3390] +
push eax  +
call sub_10088CF  +
lea eax [ebp+var_3388] +
push eax  +
call sub_10088CF  +
lea eax [ebp+lpMem] +
push eax  +
call sub_10088CF  +
lea eax [ebp+lpString1] +
push eax  +
call sub_10088CF  +
lea eax [ebp+lpNumberStr] +
jmp loc_1004E7A  +
push 0Ah  +
lea eax [ebp+Value] +
push eax  +
push [ebp+var_A34]  +
call ds:_ltow  +
add esp 0Ch +
push 0FFh  +
push [ebp+var_33B8]  +
push [ebp+lpFormat]  +
lea eax [ebp+Value] +
push eax  +
push ebx  +
push 400h  +
call ds:GetNumberFormatW  +
cmp eax ebx +
jnz loc_1005049  +
mov eax [ebp+var_3378] +
cmp eax ebx +
jz loc_1005002  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp+var_3378] ebx +
lea eax [ebp+lpFormat] +
push eax  +
call sub_10088CF  +
lea eax [ebp+var_3390] +
push eax  +
call sub_10088CF  +
lea eax [ebp+var_3388] +
push eax  +
call sub_10088CF  +
lea eax [ebp+lpMem] +
push eax  +
call sub_10088CF  +
lea eax [ebp+lpString1] +
push eax  +
call sub_10088CF  +
lea eax [ebp+var_33B8] +
jmp loc_1004DEC  +
push ebx  +
push [ebp+var_33B8]  +
push 0Bh  +
push esi  +
push [ebp+var_337C]  +
call sub_100C62E  +
push edi  +
call sub_1008533  +
mov [ebp+var_33D4] eax +
cmp eax ebx +
jnz loc_10050CB  +
mov eax [ebp+var_3378] +
cmp eax ebx +
jz loc_1005084  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp+var_3378] ebx +
lea eax [ebp+lpFormat] +
push eax  +
call sub_10088CF  +
lea eax [ebp+var_3390] +
push eax  +
call sub_10088CF  +
lea eax [ebp+var_3388] +
push eax  +
call sub_10088CF  +
lea eax [ebp+lpMem] +
push eax  +
call sub_10088CF  +
lea eax [ebp+lpString1] +
push eax  +
call sub_10088CF  +
lea eax [ebp+var_33B8] +
jmp loc_1004E7A  +
push 0Ah  +
lea eax [ebp+Value] +
push eax  +
push [ebp+var_A2C]  +
call ds:_ltow  +
add esp 0Ch +
push 0FFh  +
push [ebp+var_33D4]  +
push [ebp+lpFormat]  +
lea eax [ebp+Value] +
push eax  +
push ebx  +
push 400h  +
call ds:GetNumberFormatW  +
cmp eax ebx +
jnz loc_1005174  +
mov eax [ebp+var_3378] +
cmp eax ebx +
jz loc_1005121  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp+var_3378] ebx +
lea eax [ebp+lpFormat] +
push eax  +
call sub_10088CF  +
lea eax [ebp+var_3390] +
push eax  +
call sub_10088CF  +
lea eax [ebp+var_3388] +
push eax  +
call sub_10088CF  +
lea eax [ebp+lpMem] +
push eax  +
call sub_10088CF  +
lea eax [ebp+lpString1] +
push eax  +
call sub_10088CF  +
lea eax [ebp+var_33B8] +
push eax  +
call sub_10088CF  +
lea eax [ebp+var_33D4] +
jmp loc_1004DEC  +
push ebx  +
push [ebp+var_33D4]  +
push 0Ch  +
push esi  +
push [ebp+var_337C]  +
call sub_100C62E  +
push ebx  +
lea eax [ebp+var_A14] +
push eax  +
push 0Dh  +
push esi  +
push [ebp+var_337C]  +
call sub_100C62E  +
push ebx  +
cmp [ebp+var_33E4] ebx +
jz loc_10051B1  +
lea eax [ebp+var_814] +
push eax  +
jmp loc_10051B6  +
push offset aNA  +
push 0Eh  +
push esi  +
push [ebp+var_337C]  +
call sub_100C62E  +
push edi  +
call sub_1008533  +
mov [ebp+var_33E0] eax +
cmp eax ebx +
jnz loc_100523D  +
mov eax [ebp+var_3378] +
cmp eax ebx +
jz loc_10051EA  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp+var_3378] ebx +
lea eax [ebp+lpFormat] +
push eax  +
call sub_10088CF  +
lea eax [ebp+var_3390] +
push eax  +
call sub_10088CF  +
lea eax [ebp+var_3388] +
push eax  +
call sub_10088CF  +
lea eax [ebp+lpMem] +
push eax  +
call sub_10088CF  +
lea eax [ebp+lpString1] +
push eax  +
call sub_10088CF  +
lea eax [ebp+var_33B8] +
push eax  +
call sub_10088CF  +
lea eax [ebp+var_33D4] +
jmp loc_1004E7A  +
push 0Ah  +
lea eax [ebp+Value] +
push eax  +
push [ebp+var_A24]  +
call ds:_ltow  +
add esp 0Ch +
push 0FFh  +
push [ebp+var_33E0]  +
push [ebp+lpFormat]  +
lea eax [ebp+Value] +
push eax  +
push ebx  +
push 400h  +
call ds:GetNumberFormatW  +
cmp eax ebx +
jnz loc_10052F2  +
mov eax [ebp+var_3378] +
cmp eax ebx +
jz loc_1005293  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp+var_3378] ebx +
lea eax [ebp+lpFormat] +
push eax  +
call sub_10088CF  +
lea eax [ebp+var_3390] +
push eax  +
call sub_10088CF  +
lea eax [ebp+var_3388] +
push eax  +
call sub_10088CF  +
lea eax [ebp+lpMem] +
push eax  +
call sub_10088CF  +
lea eax [ebp+lpString1] +
push eax  +
call sub_10088CF  +
lea eax [ebp+var_33B8] +
push eax  +
call sub_10088CF  +
lea eax [ebp+var_33D4] +
push eax  +
call sub_10088CF  +
lea eax [ebp+var_33E0] +
jmp loc_1004DEC  +
push ebx  +
push [ebp+var_33E0]  +
push 0Fh  +
push esi  +
push [ebp+var_337C]  +
call sub_100C62E  +
xor esi esi +
inc esi  +
cmp [ebp+var_33F4] esi +
jnz loc_1005331  +
mov eax [ebp+var_33D8] +
and al 0Fh +
cmp al 1 +
jnz loc_1005331  +
push offset String  +
mov eax ds:_iob +
add eax 20h +
push eax  +
call sub_1008D2A  +
cmp [ebp+var_33FC] esi +
jnz loc_100535F  +
mov eax [ebp+var_33D8] +
and eax 0Fh +
cmp al 3 +
jz loc_100535F  +
push offset String  +
mov eax ds:_iob +
add eax 20h +
push eax  +
call sub_1008D2A  +
mov [ebp+var_33FC] ebx +
push [ebp+var_337C]  +
cmp [ebp+arg_C] ebx +
jz loc_1005378  +
mov eax [ebp+var_33D8] +
or eax 1000h +
push eax  +
jmp loc_100537E  +
push [ebp+var_33D8]  +
lea eax [ebp+var_3374] +
push eax  +
push 10h  +
call sub_100D734  +
mov [ebp+arg_C] esi +
mov [ebp+var_33F4] esi +
mov [ebp+var_33F0] esi +
lea eax [ebp+var_3388] +
push eax  +
call sub_10088CF  +
lea eax [ebp+var_3390] +
push eax  +
call sub_10088CF  +
lea eax [ebp+lpMem] +
push eax  +
call sub_10088CF  +
lea eax [ebp+lpString1] +
push eax  +
call sub_10088CF  +
lea eax [ebp+lpNumberStr] +
push eax  +
call sub_10088CF  +
lea eax [ebp+var_33D4] +
push eax  +
call sub_10088CF  +
lea eax [ebp+var_33E0] +
push eax  +
call sub_10088CF  +
lea eax [ebp+var_33B8] +
push eax  +
call sub_10088CF  +
lea eax [ebp+var_339C] +
push eax  +
call sub_10088CF  +
lea eax [ebp+var_3394] +
push eax  +
call sub_10088CF  +
lea eax [ebp+var_3398] +
push eax  +
call sub_10088CF  +
mov eax [ebp+var_3378] +
cmp eax ebx +
jz loc_1005435  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp+var_3378] ebx +
lea eax [ebp+var_337C] +
push eax  +
call sub_100BC6E  +
jmp loc_1005476  +
lea eax [ebp-337Ch] +
push eax  +
call sub_100BC6E  +
lea eax [ebp+var_3390] +
push eax  +
call sub_10088CF  +
lea eax [ebp+var_3388] +
push eax  +
call sub_10088CF  +
mov [ebp+var_4] 0Bh +
mov eax offset loc_1005474 +
retn   +
xor ebx ebx +
xor esi esi +
inc esi  +
jmp loc_1004529  +
push 75h  +
call sub_100A082  +
push eax  +
mov eax ds:_iob +
add eax 40h +
push eax  +
call sub_1008D2A  +
mov eax [ebp+var_3378] +
xor ebx ebx +
cmp eax ebx +
jz loc_10054AC  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp+var_3378] ebx +
lea eax [ebp+var_337C] +
push eax  +
call sub_100BC6E  +
lea eax [ebp+lpFormat] +
push eax  +
call sub_10088CF  +
mov [ebp+var_4] 0Bh +
mov eax offset loc_10054D1 +
retn   +
mov byte ptr [ebp-4] 0Ah +
lea ecx [ebp-33A0h] +
call ??1CHString@@QAE@XZ  +
mov byte ptr [ebp-4] 9 +
lea ecx [ebp-33CCh] +
call ??1CHString@@QAE@XZ  +
mov byte ptr [ebp-4] 8 +
lea ecx [ebp-33B0h] +
call ??1CHString@@QAE@XZ  +
mov byte ptr [ebp-4] 7 +
lea ecx [ebp-33BCh] +
call ??1CHString@@QAE@XZ  +
mov byte ptr [ebp-4] 6 +
lea ecx [ebp-33C4h] +
call ??1CHString@@QAE@XZ  +
mov byte ptr [ebp-4] 5 +
lea ecx [ebp-33A4h] +
call ??1CHString@@QAE@XZ  +
mov byte ptr [ebp-4] 4 +
lea ecx [ebp-33C8h] +
call ??1CHString@@QAE@XZ  +
mov byte ptr [ebp-4] 3 +
lea ecx [ebp-33ACh] +
call ??1CHString@@QAE@XZ  +
mov byte ptr [ebp-4] 2 +
lea ecx [ebp-33A8h] +
call ??1CHString@@QAE@XZ  +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp-33C0h] +
call ??1CHString@@QAE@XZ  +
mov byte ptr [ebp-4] 0 +
jmp loc_100445E  +
lea eax [ebp+lpFormat] +
push eax  +
call sub_10088CF  +
lea eax [ebp+var_3388] +
push eax  +
call sub_10088CF  +
lea eax [ebp+var_3390] +
push eax  +
call sub_10088CF  +
lea eax [ebp+lpMem] +
push eax  +
call sub_10088CF  +
lea eax [ebp+lpString1] +
push eax  +
call sub_10088CF  +
lea eax [ebp+lpNumberStr] +
push eax  +
call sub_10088CF  +
lea eax [ebp+var_33D4] +
push eax  +
call sub_10088CF  +
lea eax [ebp+var_33E0] +
push eax  +
call sub_10088CF  +
lea eax [ebp+var_33B8] +
push eax  +
call sub_10088CF  +
lea eax [ebp+var_339C] +
push eax  +
call sub_10088CF  +
lea eax [ebp+var_3394] +
push eax  +
call sub_10088CF  +
lea eax [ebp+var_3398] +
push eax  +
call sub_10088CF  +
cmp [ebp+var_33F0] esi +
jnz loc_100560F  +
xor esi esi +
jmp loc_1004554  +
push 4  +
pop esi  +
jmp loc_1004554  +
***
call __EH_prolog3_catch  +
xor ebx ebx +
mov [ebp-1Ch] ebx +
mov [ebp-4] ebx +
mov [ebp-18h] ebx +
mov byte ptr [ebp-4] 1 +
mov [ebp-14h] ebx +
mov byte ptr [ebp-4] 2 +
mov [ebp-20h] ebx +
push 3  +
pop edi  +
mov byte ptr [ebp-4] 3 +
mov [ebp-24h] ebx +
mov [ebp-28h] ebx +
mov byte ptr [ebp-4] 4 +
mov esi offset aRootCimv2 +
push esi  +
lea ecx [ebp-14h] +
call sub_1003672  +
push dword ptr [ebp+8]  +
lea ecx [ebp-20h] +
call sub_1003672  +
mov [ebp-4] edi +
push dword ptr [ebp+8]  +
call sub_100A5A6  +
test eax eax +
jnz loc_100579A  +
mov byte ptr [ebp-4] 6 +
push esi  +
lea ecx [ebp-30h] +
call sub_1002EC1  +
mov byte ptr [ebp-4] 7 +
push offset word_10012F0  +
lea ecx [ebp-2Ch] +
call sub_1002EC1  +
mov byte ptr [ebp-4] 8 +
push dword ptr [ebp+8]  +
lea ecx [ebp-40h] +
call sub_1002EC1  +
mov byte ptr [ebp-4] 9 +
push eax  +
push offset Str2  +
lea eax [ebp-3Ch] +
push eax  +
call sub_1003746  +
mov byte ptr [ebp-4] 0Ah +
lea ecx [ebp-2Ch] +
push ecx  +
lea ecx [ebp-38h] +
push ecx  +
mov ecx eax +
call sub_1003703  +
mov byte ptr [ebp-4] 0Bh +
lea ecx [ebp-30h] +
push ecx  +
lea ecx [ebp-34h] +
push ecx  +
mov ecx eax +
call sub_1003703  +
mov byte ptr [ebp-4] 0Ch +
push eax  +
lea ecx [ebp-14h] +
call sub_100363E  +
mov byte ptr [ebp-4] 0Bh +
mov ecx [ebp-34h] +
cmp ecx ebx +
jz loc_1005704  +
call sub_10035ED  +
mov [ebp-34h] ebx +
mov byte ptr [ebp-4] 0Ah +
mov ecx [ebp-38h] +
cmp ecx ebx +
jz loc_1005717  +
call sub_10035ED  +
mov [ebp-38h] ebx +
mov byte ptr [ebp-4] 9 +
mov ecx [ebp-3Ch] +
cmp ecx ebx +
jz loc_100572A  +
call sub_10035ED  +
mov [ebp-3Ch] ebx +
mov byte ptr [ebp-4] 8 +
mov ecx [ebp-40h] +
cmp ecx ebx +
jz loc_100573D  +
call sub_10035ED  +
mov [ebp-40h] ebx +
mov byte ptr [ebp-4] 7 +
mov ecx [ebp-2Ch] +
cmp ecx ebx +
jz loc_1005750  +
call sub_10035ED  +
mov [ebp-2Ch] ebx +
mov byte ptr [ebp-4] 6 +
mov ecx [ebp-30h] +
cmp ecx ebx +
jz loc_1005763  +
call sub_10035ED  +
mov [ebp-30h] ebx +
push ebx  +
push dword ptr [ebp+0Ch]  +
call sub_1008332  +
test eax eax +
jz loc_100579A  +
push dword ptr [ebp+0Ch]  +
lea ecx [ebp-1Ch] +
call sub_1003672  +
push ebx  +
push dword ptr [ebp+10h]  +
call sub_1008332  +
lea ecx [ebp-18h] +
test eax eax +
jnz loc_1005792  +
push offset dword_10012F4  +
jmp loc_1005795  +
push dword ptr [ebp+10h]  +
call sub_1003672  +
mov [ebp-4] edi +
push dword ptr [ebp+28h]  +
push dword ptr [ebp+24h]  +
call sub_10037F5  +
mov [ebp+28h] eax +
cmp eax 1 +
jnz loc_1005849  +
push 6Ch  +
call sub_100A082  +
push eax  +
mov eax ds:_iob +
add eax 40h +
push eax  +
call sub_1008D2A  +
mov byte ptr [ebp-4] 2 +
jmp loc_10057F9  +
push 6Ch  +
call sub_100A082  +
push eax  +
mov eax ds:_iob +
add eax 40h +
push eax  +
call sub_1008D2A  +
mov dword ptr [ebp-4] 3 +
mov eax offset loc_10057F3 +
retn   +
mov byte ptr [ebp-4] 2 +
xor ebx ebx +
mov ecx [ebp-20h] +
cmp ecx ebx +
jz loc_1005808  +
call sub_10035ED  +
mov [ebp-20h] ebx +
mov byte ptr [ebp-4] 1 +
mov ecx [ebp-14h] +
cmp ecx ebx +
jz loc_100581B  +
call sub_10035ED  +
mov [ebp-14h] ebx +
mov [ebp-4] bl +
mov ecx [ebp-18h] +
cmp ecx ebx +
jz loc_100582D  +
call sub_10035ED  +
mov [ebp-18h] ebx +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov ecx [ebp-1Ch] +
cmp ecx ebx +
jz loc_1005CAB  +
call sub_10035ED  +
mov [ebp-1Ch] ebx +
jmp loc_1005CAB  +
mov eax [ebp-18h] +
cmp eax ebx +
jz loc_1005857  +
mov eax [eax] +
mov [ebp+10h] eax +
jmp loc_100585A  +
mov [ebp+10h] ebx +
mov eax [ebp-1Ch] +
cmp eax ebx +
jz loc_1005865  +
mov ecx [eax] +
jmp loc_1005867  +
xor ecx ecx +
mov eax [ebp-14h] +
cmp eax ebx +
jz loc_1005872  +
mov eax [eax] +
jmp loc_1005874  +
xor eax eax +
mov esi [ebp+20h] +
mov edx [esi] +
lea edi [ebp-24h] +
push edi  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push dword ptr [ebp+10h]  +
push ecx  +
push eax  +
push esi  +
call dword ptr [edx+0Ch]  +
mov edi eax +
push ebx  +
push dword ptr [ebp+0Ch]  +
call sub_1008332  +
test eax eax +
jz loc_10058D2  +
cmp edi ebx +
jge loc_10058D4  +
cmp edi 80070005h +
jnz loc_10058D2  +
mov eax [ebp-1Ch] +
cmp eax ebx +
jz loc_10058B0  +
mov ecx [eax] +
jmp loc_10058B2  +
xor ecx ecx +
mov eax [ebp-14h] +
cmp eax ebx +
jz loc_10058BD  +
mov eax [eax] +
jmp loc_10058BF  +
xor eax eax +
mov edx [esi] +
lea edi [ebp-24h] +
push edi  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ecx  +
push eax  +
push esi  +
call dword ptr [edx+0Ch]  +
mov edi eax +
cmp edi ebx +
jnz loc_1005C55  +
push dword ptr [ebp+30h]  +
push dword ptr [ebp+24h]  +
push dword ptr [ebp-24h]  +
call sub_100670B  +
cmp eax ebx +
jge loc_100591E  +
push eax  +
call sub_1006A2B  +
push 20001h  +
mov eax ds:_iob +
add eax 20h +
push eax  +
call sub_100A09A  +
mov eax [ebp-24h] +
cmp eax ebx +
jz loc_10057CA  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp-24h] ebx +
jmp loc_10057CA  +
cmp [ebp+2Ch] ebx +
jnz loc_100596F  +
push offset aWin32_systemdr  +
lea ecx [ebp+0Ch] +
call sub_1002EC1  +
mov byte ptr [ebp-4] 0Eh +
mov eax [eax] +
cmp eax ebx +
jz loc_100593E  +
mov ecx [eax] +
jmp loc_1005940  +
xor ecx ecx +
mov eax [ebp-24h] +
mov edx [eax] +
lea esi [ebp-28h] +
push esi  +
push ebx  +
push 30h  +
push ecx  +
push eax  +
call dword ptr [edx+48h]  +
mov esi eax +
mov byte ptr [ebp-4] 3 +
mov ecx [ebp+0Ch] +
cmp ecx ebx +
jz loc_1005A82  +
call sub_10035ED  +
mov [ebp+0Ch] ebx +
jmp loc_1005A82  +
push offset Name  +
push ebx  +
push ebx  +
call ds:CreateMutexW  +
cmp eax ebx +
jz loc_1005A0C  +
call ds:GetLastError  +
cmp eax 0B7h +
jnz loc_1005A0C  +
push 1AAh  +
call sub_100A082  +
push eax  +
mov eax ds:_iob +
add eax 20h +
push eax  +
call sub_1008D2A  +
mov eax [ebp-24h] +
cmp eax ebx +
jz loc_10059BA  +
push eax  +
mov ecx [eax] +
call dword ptr [ecx+8]  +
mov [ebp-24h] ebx +
mov byte ptr [ebp-4] 2 +
mov ecx [ebp-20h] +
cmp ecx ebx +
jz loc_10059CD  +
call sub_10035ED  +
mov [ebp-20h] ebx +
mov byte ptr [ebp-4] 1 +
mov ecx [ebp-14h] +
cmp ecx ebx +
jz loc_10059E0  +
call sub_10035ED  +
mov [ebp-14h] ebx +
mov [ebp-4] bl +
mov ecx [ebp-18h] +
cmp ecx ebx +
jz loc_10059F2  +
call sub_10035ED  +
mov [ebp-18h] ebx +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov ecx [ebp-1Ch] +
cmp ecx ebx +
jz loc_1005A05  +
call sub_10035ED  +
mov [ebp-1Ch] ebx +
xor eax eax +
jmp loc_1005CAE  +
push offset aSelectFromWin3  +
lea ecx [ebp+10h] +
call sub_1002EC1  +
mov esi eax +
mov byte ptr [ebp-4] 0Fh +
push offset aWql  +
lea ecx [ebp+0Ch] +
call sub_1002EC1  +
mov byte ptr [ebp-4] 10h +
mov ecx [esi] +
cmp ecx ebx +
jz loc_1005A3A  +
mov ecx [ecx] +
jmp loc_1005A3C  +
xor ecx ecx +
mov eax [eax] +
cmp eax ebx +
jz loc_1005A46  +
mov edx [eax] +
jmp loc_1005A48  +
xor edx edx +
mov eax [ebp-24h] +
mov esi [eax] +
lea edi [ebp-28h] +
push edi  +
push ebx  +
push 30h  +
push ecx  +
push edx  +
push eax  +
call dword ptr [esi+50h]  +
mov esi eax +
mov byte ptr [ebp-4] 0Fh +
mov ecx [ebp+0Ch] +
cmp ecx ebx +
jz loc_1005A6F  +
call sub_10035ED  +
mov [ebp+0Ch] ebx +
mov byte ptr [ebp-4] 3 +
mov ecx [ebp+10h] +
cmp ecx ebx +
jz loc_1005A82  +
call sub_10035ED  +
mov [ebp+10h] ebx +
cmp esi ebx +
jl loc_1005C3A  +
push dword ptr [ebp+30h]  +
push dword ptr [ebp+24h]  +
push dword ptr [ebp-28h]  +
call sub_100670B  +
cmp eax ebx +
jge loc_1005ACE  +
push eax  +
call sub_1006A2B  +
push 20001h  +
mov eax ds:_iob +
add eax 20h +
push eax  +
call sub_100A09A  +
mov eax [ebp-28h] +
cmp eax ebx +
jz loc_10057CA  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp-28h] ebx +
jmp loc_10057CA  +
push dword ptr [ebp+1Ch]  +
push dword ptr [ebp+28h]  +
push dword ptr [ebp+18h]  +
push dword ptr [ebp+14h]  +
push dword ptr [ebp-28h]  +
push ecx  +
mov ecx esp +
mov [ebp+0Ch] esp +
push dword ptr [ebp+8]  +
call ??0CHString@@QAE@PBG@Z  +
cmp [ebp+2Ch] ebx +
jnz loc_1005AFF  +
mov byte ptr [ebp-4] 11h +
mov byte ptr [ebp-4] 3 +
call sub_10041DD  +
jmp loc_1005B0C  +
mov byte ptr [ebp-4] 12h +
mov byte ptr [ebp-4] 3 +
call sub_1003C86  +
dec eax  +
jz loc_1005C15  +
dec eax  +
jz loc_1005BFD  +
dec eax  +
jz loc_1005BE4  +
dec eax  +
jz loc_1005BB8  +
sub eax 4 +
jz loc_1005B9F  +
mov eax [ebp-24h] +
cmp eax ebx +
jz loc_1005B3D  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp-24h] ebx +
mov eax [ebp-28h] +
cmp eax ebx +
jz loc_1005B4D  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp-28h] ebx +
mov byte ptr [ebp-4] 2 +
mov ecx [ebp-20h] +
cmp ecx ebx +
jz loc_1005B60  +
call sub_10035ED  +
mov [ebp-20h] ebx +
mov byte ptr [ebp-4] 1 +
mov ecx [ebp-14h] +
cmp ecx ebx +
jz loc_1005B73  +
call sub_10035ED  +
mov [ebp-14h] ebx +
mov [ebp-4] bl +
mov ecx [ebp-18h] +
cmp ecx ebx +
jz loc_1005B85  +
call sub_10035ED  +
mov [ebp-18h] ebx +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov ecx [ebp-1Ch] +
cmp ecx ebx +
jz loc_1005B98  +
call sub_10035ED  +
mov [ebp-1Ch] ebx +
mov eax esi +
jmp loc_1005CAE  +
mov eax [ebp-28h] +
cmp eax ebx +
jz loc_1005905  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp-28h] ebx +
jmp loc_1005905  +
push offset String  +
mov eax ds:_iob +
add eax 20h +
push eax  +
call sub_1008D2A  +
push 0FBh  +
call sub_100A082  +
push eax  +
mov eax ds:_iob +
add eax 20h +
push eax  +
call sub_1008D2A  +
mov eax [ebp-28h] +
cmp eax ebx +
jz loc_10059AA  +
push eax  +
mov ecx [eax] +
call dword ptr [ecx+8]  +
mov [ebp-28h] ebx +
jmp loc_10059AA  +
push 69h  +
call sub_100A082  +
push eax  +
mov eax ds:_iob +
add eax 40h +
push eax  +
call sub_1008D2A  +
jmp loc_1005B9F  +
push 8  +
call ds:SetLastError  +
call sub_1008103  +
push 20001h  +
mov eax ds:_iob +
add eax 20h +
push eax  +
call sub_100A09A  +
jmp loc_1005B9F  +
push 69h  +
call sub_100A082  +
push eax  +
mov eax ds:_iob +
add eax 40h +
push eax  +
call sub_1008D2A  +
jmp loc_1005905  +
push 73h  +
jmp loc_10057B6  +
push 6Ch  +
call sub_100A082  +
push eax  +
mov eax ds:_iob +
add eax 40h +
push eax  +
call sub_1008D2A  +
mov dword ptr [ebp-4] 3 +
mov eax offset loc_1005C7F +
retn   +
mov byte ptr [ebp-4] 2 +
mov ecx [ebp-20h] +
xor ebx ebx +
cmp ecx ebx +
jz loc_1005C94  +
call sub_10035ED  +
mov [ebp-20h] ebx +
mov byte ptr [ebp-4] 1 +
mov ecx [ebp-14h] +
cmp ecx ebx +
jz loc_1005CA7  +
call sub_10035ED  +
mov [ebp-14h] ebx +
or dword ptr [ebp-4] 0FFFFFFFFh +
xor eax eax +
inc eax  +
call __EH_epilog3  +
retn 2Ch  +
***
call __EH_prolog3_catch_GS  +
mov eax [ebp+0Ch] +
mov [ebp-464h] eax +
xor ebx ebx +
mov [ebp-454h] ebx +
mov [ebp-448h] ebx +
mov [ebp-458h] ebx +
mov [ebp-438h] ebx +
mov [ebp-430h] ebx +
mov [ebp-420h] ebx +
push 1F8h  +
push ebx  +
lea eax [ebp-41Ch] +
push eax  +
call memset  +
mov [ebp-224h] ebx +
push 1FAh  +
push ebx  +
lea eax [ebp-220h] +
push eax  +
call memset  +
add esp 18h +
xor esi esi +
inc esi  +
mov [ebp-444h] esi +
mov [ebp-440h] esi +
mov [ebp-44Ch] ebx +
mov [ebp-43Ch] ebx +
mov [ebp-450h] ebx +
mov [ebp-434h] ebx +
mov [ebp-45Ch] ebx +
mov edi offset dword_100131C +
push edi  +
lea ecx [ebp-424h] +
call ??0CHString@@QAE@PBG@Z  +
mov [ebp-4] ebx +
push edi  +
lea ecx [ebp-428h] +
call ??0CHString@@QAE@PBG@Z  +
mov byte ptr [ebp-4] 1 +
push edi  +
lea ecx [ebp-42Ch] +
call ??0CHString@@QAE@PBG@Z  +
mov byte ptr [ebp-4] 2 +
mov edi offset a_ocp +
push edi  +
push esi  +
mov esi ds:_wsetlocale +
call esi  +
push edi  +
push 3  +
call esi  +
push edi  +
push 4  +
call esi  +
push edi  +
push 5  +
call esi  +
add esp 20h +
call ds:GetConsoleOutputCP  +
push eax  +
push offset a_D  +
push 8  +
lea eax [ebp-24h] +
push eax  +
call swprintf_s  +
lea eax [ebp-24h] +
push eax  +
push 2  +
pop edi  +
push edi  +
call esi  +
add esp 18h +
lea eax [ebp-45Ch] +
push eax  +
lea eax [ebp-44Ch] +
push eax  +
lea eax [ebp-454h] +
push eax  +
lea eax [ebp-458h] +
push eax  +
lea eax [ebp-224h] +
push eax  +
lea eax [ebp-420h] +
push eax  +
lea eax [ebp-438h] +
push eax  +
lea eax [ebp-430h] +
push eax  +
lea eax [ebp-448h] +
push eax  +
push dword ptr [ebp-464h]  +
push dword ptr [ebp+8]  +
call sub_1001E46  +
cmp eax ebx +
jnz loc_1005E90  +
call sub_1008070  +
push eax  +
mov eax ds:_iob +
add eax 40h +
push eax  +
call sub_1008D2A  +
xor esi esi +
inc esi  +
call sub_1008B91  +
lea eax [ebp-438h] +
push eax  +
call sub_10088CF  +
lea eax [ebp-430h] +
push eax  +
call sub_10088CF  +
lea eax [ebp-434h] +
push eax  +
call sub_1006525  +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp-42Ch] +
call ??1CHString@@QAE@XZ  +
mov [ebp-4] bl +
lea ecx [ebp-428h] +
call ??1CHString@@QAE@XZ  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-424h] +
call ??1CHString@@QAE@XZ  +
mov eax esi +
jmp loc_10062D3  +
xor esi esi +
inc esi  +
cmp [ebp-448h] esi +
jnz loc_1005EA4  +
call sub_1001E19  +
xor esi esi +
jmp loc_1005E34  +
lea eax [ebp-43Ch] +
push eax  +
call sub_1002B0A  +
cmp eax ebx +
jnz loc_1005EC4  +
push dword ptr [ebp-430h]  +
call sub_100A7C2  +
jmp loc_1005E34  +
mov byte ptr [ebp-4] 3 +
push dword ptr [ebp-438h]  +
lea ecx [ebp-424h] +
call ??4CHString@@QAEABV0@PBG@Z  +
push dword ptr [ebp-430h]  +
lea ecx [ebp-42Ch] +
call ??4CHString@@QAEABV0@PBG@Z  +
lea eax [ebp-420h] +
push eax  +
lea ecx [ebp-428h] +
call ??4CHString@@QAEABV0@PBG@Z  +
lea eax [ebp-440h] +
push eax  +
push offset aRootDefault  +
push dword ptr [ebp-454h]  +
lea eax [ebp-434h] +
push eax  +
lea eax [ebp-428h] +
push eax  +
lea eax [ebp-424h] +
push eax  +
lea eax [ebp-42Ch] +
push eax  +
lea eax [ebp-450h] +
push eax  +
push dword ptr [ebp-43Ch]  +
call sub_10070D8  +
cmp eax ebx +
jnz loc_1005F8A  +
mov eax [ebp-43Ch] +
cmp eax ebx +
jz loc_1005F56  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp-43Ch] ebx +
lea eax [ebp-434h] +
push eax  +
call sub_1006525  +
lea eax [ebp-438h] +
push eax  +
call sub_10088CF  +
lea eax [ebp-430h] +
push eax  +
call sub_10088CF  +
call ds:CoUninitialize  +
call sub_1008B91  +
jmp loc_1005E5D  +
lea eax [ebp-438h] +
push eax  +
call sub_10088CF  +
lea eax [ebp-430h] +
push eax  +
call sub_10088CF  +
lea ecx [ebp-424h] +
call ?GetData@CHString@@IBEPAUCHStringData@@XZ  +
push dword ptr [eax+4]  +
lea ecx [ebp-424h] +
call ?GetBuffer@CHString@@QAEPAGH@Z  +
mov [ebp-438h] eax +
lea ecx [ebp-428h] +
call ?GetData@CHString@@IBEPAUCHStringData@@XZ  +
push dword ptr [eax+4]  +
lea ecx [ebp-428h] +
call ?GetBuffer@CHString@@QAEPAGH@Z  +
mov [ebp-460h] eax +
lea ecx [ebp-428h] +
call ?GetData@CHString@@IBEPAUCHStringData@@XZ  +
push dword ptr [eax+4]  +
lea ecx [ebp-42Ch] +
call ?GetBuffer@CHString@@QAEPAGH@Z  +
mov [ebp-430h] eax +
mov [ebp-4] edi +
push dword ptr [ebp-430h]  +
call sub_100A5A6  +
cmp eax esi +
jnz loc_100603A  +
push ebx  +
push dword ptr [ebp-438h]  +
call sub_1008332  +
test eax eax +
jz loc_100603A  +
push 97h  +
call sub_100A082  +
push eax  +
mov eax ds:_iob +
add eax 40h +
push eax  +
call sub_1008D2A  +
cmp [ebp-440h] ebx +
jnz loc_1006140  +
xor edi edi +
xor esi esi +
mov eax [ebp-434h] +
cmp eax ebx +
jz loc_100606D  +
mov esi [eax+10h] +
lea ecx [ebp-424h] +
call ?GetData@CHString@@IBEPAUCHStringData@@XZ  +
cmp [eax+4] ebx +
jz loc_100606D  +
mov edi [ebp-424h] +
push esi  +
push edi  +
push dword ptr [ebp-42Ch]  +
call sub_100A979  +
mov esi eax +
cmp esi ebx +
jz loc_1006138  +
call ds:GetLastError  +
cmp eax 4C3h +
jnz loc_10060A9  +
push 20004h  +
mov eax ds:_iob +
add eax 40h +
push eax  +
call sub_100A09A  +
jmp loc_100615D  +
cmp esi 4B8h +
jnz loc_1006127  +
push 20001h  +
mov eax ds:_iob +
add eax 20h +
push eax  +
call sub_100A09A  +
lea eax [ebp-434h] +
push eax  +
call sub_1006525  +
or esi 0FFFFFFFFh +
push esi  +
lea ecx [ebp-42Ch] +
call ?ReleaseBuffer@CHString@@QAEXH@Z  +
push esi  +
lea ecx [ebp-424h] +
call ?ReleaseBuffer@CHString@@QAEXH@Z  +
push esi  +
lea ecx [ebp-428h] +
call ?ReleaseBuffer@CHString@@QAEXH@Z  +
call ds:CoUninitialize  +
call sub_1008B91  +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp-42Ch] +
call ??1CHString@@QAE@XZ  +
mov [ebp-4] bl +
lea ecx [ebp-428h] +
call ??1CHString@@QAE@XZ  +
mov [ebp-4] esi +
jmp loc_10062C5  +
push esi  +
call ds:SetLastError  +
call sub_1008103  +
jmp loc_10060B1  +
mov [ebp-444h] ebx +
jmp loc_100615D  +
push ebx  +
push dword ptr [ebp-430h]  +
call sub_1008332  +
push eax  +
push offset dword_10012F4  +
push dword ptr [ebp-430h]  +
call sub_1008CA4  +
push dword ptr [ebp-440h]  +
push dword ptr [ebp-45Ch]  +
push dword ptr [ebp-450h]  +
push dword ptr [ebp-434h]  +
push dword ptr [ebp-43Ch]  +
push dword ptr [ebp-44Ch]  +
push dword ptr [ebp-458h]  +
lea eax [ebp-224h] +
push eax  +
push dword ptr [ebp-460h]  +
push dword ptr [ebp-438h]  +
push dword ptr [ebp-430h]  +
call sub_100561C  +
cmp eax 1 +
jnz loc_10061C6  +
cmp [ebp-444h] ebx +
jnz loc_10060C4  +
push dword ptr [ebp-430h]  +
call sub_100A7C2  +
jmp loc_10060C4  +
cmp [ebp-444h] ebx +
jnz loc_10061D9  +
push dword ptr [ebp-430h]  +
call sub_100A7C2  +
or esi 0FFFFFFFFh +
push esi  +
lea ecx [ebp-42Ch] +
call ?ReleaseBuffer@CHString@@QAEXH@Z  +
push esi  +
lea ecx [ebp-424h] +
call ?ReleaseBuffer@CHString@@QAEXH@Z  +
push esi  +
lea ecx [ebp-428h] +
call ?ReleaseBuffer@CHString@@QAEXH@Z  +
lea eax [ebp-434h] +
push eax  +
call sub_1006525  +
mov eax [ebp-43Ch] +
cmp eax ebx +
jz loc_1006222  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp-43Ch] ebx +
call ds:CoUninitialize  +
call sub_1008B91  +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp-42Ch] +
call ??1CHString@@QAE@XZ  +
mov [ebp-4] bl +
lea ecx [ebp-428h] +
call ??1CHString@@QAE@XZ  +
mov [ebp-4] esi +
lea ecx [ebp-424h] +
call ??1CHString@@QAE@XZ  +
xor eax eax +
jmp loc_10062D3  +
push 8007000Eh  +
call ds:SetLastError  +
call sub_1008103  +
push 20001h  +
mov eax ds:_iob +
add eax 20h +
push eax  +
call sub_100A09A  +
lea eax [ebp-434h] +
push eax  +
call sub_1006525  +
call ds:CoUninitialize  +
call sub_1008B91  +
mov dword ptr [ebp-4] 2 +
mov eax offset loc_10062A3 +
retn   +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp-42Ch] +
call ??1CHString@@QAE@XZ  +
mov byte ptr [ebp-4] 0 +
lea ecx [ebp-428h] +
call ??1CHString@@QAE@XZ  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-424h] +
call ??1CHString@@QAE@XZ  +
xor eax eax +
inc eax  +
call sub_10079E3  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
mov eax [ebp+arg_4] +
add eax ecx +
cmp eax ecx +
jb loc_10062F8  +
mov ecx [ebp+arg_8] +
mov [ecx] eax +
xor eax eax +
jmp loc_1006303  +
mov eax [ebp+arg_8] +
or dword ptr [eax] 0FFFFFFFFh +
mov eax 80070216h +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
lea ecx [eax+7FFBFE00h] +
cmp ecx 0FDFFh +
ja loc_100632C  +
add eax 0FFFFFE00h +
movzx eax ax +
jmp loc_100632E  +
xor eax eax +
pop ebp  +
retn 4  +
***
call __EH_prolog3  +
lea ecx [ebp-10h] +
call ??0CHString@@QAE@XZ  +
and dword ptr [ebp-4] 0 +
cmp dword ptr [ebp+8] 0 +
jnz loc_100636B  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-10h] +
call ??1CHString@@QAE@XZ  +
xor eax eax +
call __EH_epilog3  +
retn 8  +
mov esi [ebp+0Ch] +
push dword ptr [ebp+8]  +
and dword ptr [esi] 0 +
lea ecx [ebp-10h] +
call ??4CHString@@QAEABV0@PBG@Z  +
push dword ptr [ebp-10h]  +
call sub_100A134  +
xor ebx ebx +
inc ebx  +
cmp eax ebx +
jnz loc_10063BF  +
push 2  +
lea eax [ebp+8] +
push eax  +
lea ecx [ebp-10h] +
call ?Mid@CHString@@QBE?AV1@H@Z  +
mov [ebp-4] bl +
push eax  +
lea ecx [ebp-10h] +
call ??4CHString@@QAEABV0@ABV0@@Z  +
mov byte ptr [ebp-4] 0 +
lea ecx [ebp+8] +
call ??1CHString@@QAE@XZ  +
lea ecx [ebp-10h] +
call ?GetData@CHString@@IBEPAUCHStringData@@XZ  +
cmp dword ptr [eax+4] 0 +
jz loc_1006355  +
push 5Ch  +
lea ecx [ebp-10h] +
call ?Find@CHString@@QBEHG@Z  +
cmp eax 0FFFFFFFFh +
jnz loc_1006355  +
push offset a_  +
push dword ptr [ebp-10h]  +
mov [esi] ebx +
call ds:_wcsicmp  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_10063F2  +
push dword ptr [ebp-10h]  +
call sub_100A70D  +
test eax eax +
jnz loc_1006405  +
xor ebx ebx +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-10h] +
call ??1CHString@@QAE@XZ  +
mov eax ebx +
jmp loc_1006363  +
push dword ptr [ebp-10h]  +
call sub_100A5A6  +
mov [esi] eax +
jmp loc_10063F2  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
and [ebp+var_8] 0 +
and [ebp+var_4] 0 +
push esi  +
mov esi [ebp+arg_0] +
test esi esi +
jnz loc_1006437  +
mov eax 80041008h +
jmp loc_100651B  +
mov eax [esi] +
lea ecx [ebp+var_8] +
push ecx  +
push offset dword_1001A38  +
push esi  +
call dword ptr [eax]  +
test eax eax +
jnz loc_100651B  +
mov eax [esi] +
push ebx  +
push edi  +
lea ecx [ebp+var_4] +
push ecx  +
mov ebx offset dword_1001A28 +
push ebx  +
push esi  +
call dword ptr [eax]  +
mov edi eax +
test edi edi +
jz loc_1006478  +
mov eax [ebp+var_8] +
test eax eax +
jz loc_1006471  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax edi +
jmp loc_1006519  +
test [ebp+arg_1C] 60h +
jz loc_1006482  +
xor edi edi +
jmp loc_1006485  +
mov edi [ebp+arg_18] +
push dword ptr [ebp+arg_1C]  +
mov eax [ebp+var_4] +
mov ecx [eax] +
push edi  +
push [ebp+arg_14]  +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push esi  +
push eax  +
call dword ptr [ecx+10h]  +
mov esi eax +
mov eax [ebp+var_4] +
test eax eax +
jz loc_10064B5  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
and [ebp+var_4] 0 +
test edi edi +
jz loc_100650A  +
mov eax [ebp+var_8] +
mov ecx [eax] +
lea edx [ebp+var_4] +
push edx  +
push ebx  +
push eax  +
call dword ptr [ecx]  +
mov esi eax +
test esi esi +
jnz loc_1006500  +
push dword ptr [ebp+arg_1C]  +
mov eax [ebp+var_4] +
mov ecx [eax] +
push edi  +
push [ebp+arg_14]  +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+var_8]  +
push eax  +
call dword ptr [ecx+10h]  +
mov esi eax +
mov eax [ebp+var_4] +
test eax eax +
jz loc_100650A  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
and [ebp+var_4] 0 +
jmp loc_100650A  +
cmp esi 80004002h +
jnz loc_100650A  +
xor esi esi +
mov eax [ebp+var_8] +
test eax eax +
jz loc_1006517  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov eax esi +
pop edi  +
pop ebx  +
pop esi  +
leave   +
retn 20h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
mov eax [esi] +
test eax eax +
jz loc_1006561  +
cmp dword ptr [eax] 0 +
push edi  +
mov edi ds:CoTaskMemFree +
jz loc_1006544  +
push dword ptr [eax]  +
call edi  +
mov eax [esi] +
mov eax [eax+10h] +
test eax eax +
jz loc_1006550  +
push eax  +
call edi  +
mov eax [esi] +
mov eax [eax+8] +
test eax eax +
jz loc_100655C  +
push eax  +
call edi  +
push dword ptr [esi]  +
call edi  +
pop edi  +
and dword ptr [esi] 0 +
pop esi  +
pop ebp  +
retn 4  +
***
call __EH_prolog3_catch  +
lea ecx [ebp-14h] +
call ??0CHString@@QAE@XZ  +
and dword ptr [ebp-4] 0 +
mov byte ptr [ebp-4] 1 +
push dword ptr [ebp+8]  +
lea ecx [ebp-14h] +
call ??4CHString@@QAEABV0@PBG@Z  +
push offset word_10012F0  +
push dword ptr [ebp-14h]  +
call ds:_wcsicmp  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_10065E0  +
push offset a?  +
lea ecx [ebp-14h] +
call ?FindOneOf@CHString@@QBEHPBG@Z  +
cmp eax 0FFFFFFFFh +
jnz loc_10065E0  +
or [ebp-4] eax +
lea ecx [ebp-14h] +
call ??1CHString@@QAE@XZ  +
xor eax eax +
inc eax  +
jmp loc_10065EE  +
push 8007000Eh  +
call ds:SetLastError  +
and dword ptr [ebp-4] 0 +
mov eax offset loc_10065E0 +
retn   +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-14h] +
call ??1CHString@@QAE@XZ  +
xor eax eax +
call __EH_epilog3  +
retn 4  +
***
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
push edi  +
mov edi ecx +
lea esi [edi+0Ch] +
xor ebx ebx +
cmp [esi] ebx +
jnz loc_10066A0  +
push ebx  +
push ebx  +
push esi  +
push 400h  +
push dword ptr [edi+4]  +
push ebx  +
push 1100h  +
call ds:FormatMessageW  +
mov eax [esi] +
cmp eax ebx +
jz loc_1006660  +
push eax  +
call ds:lstrlenW  +
cmp eax 1 +
jle loc_10066A0  +
mov ecx [esi] +
lea ecx [ecx+eax*2-2] +
cmp word ptr [ecx] 0Ah +
jnz loc_10066A0  +
xor edx edx +
mov [ecx] dx +
mov ecx [esi] +
lea eax [ecx+eax*2-4] +
cmp word ptr [eax] 0Dh +
jnz loc_10066A0  +
xor ecx ecx +
mov [eax] cx +
jmp loc_10066A0  +
push 40h  +
push ebx  +
call ds:LocalAlloc  +
mov [ebp-4] eax +
mov [esi] eax +
cmp eax ebx +
jz loc_10066A0  +
mov edi [edi+4] +
push edi  +
call sub_100630C  +
movzx eax ax +
cmp ax bx +
jz loc_100668E  +
movzx eax ax +
push eax  +
push offset aIdispatchError  +
jmp loc_1006694  +
push edi  +
push offset aUnknownError0x  +
push dword ptr [ebp-4]  +
call ds:wsprintfW  +
add esp 0Ch +
mov eax [esi] +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_4] +
xor eax eax +
test ecx ecx +
jz loc_10066C2  +
cmp ecx 7FFFFFFFh +
jbe loc_10066C7  +
mov eax 80070057h +
test eax eax +
jl loc_1006704  +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+arg_0] +
lea eax [ebp+arg_C] +
push eax  +
push [ebp+arg_8]  +
lea esi [ecx-1] +
push esi  +
push edi  +
xor ebx ebx +
call ds:_vsnwprintf  +
add esp 10h +
test eax eax +
jl loc_10066F4  +
cmp eax esi +
ja loc_10066F4  +
jnz loc_10066FF  +
jmp loc_10066F9  +
mov ebx 8007007Ah +
xor eax eax +
mov [edi+esi*2] ax +
pop edi  +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_8] +
dec eax  +
neg eax  +
sbb eax eax +
xor ecx ecx +
add eax 0Ah +
cmp [ebp+arg_0] ecx +
jnz loc_1006729  +
mov eax 80041008h +
jmp loc_100673C  +
push ecx  +
push [ebp+arg_4]  +
push 3  +
push 6  +
push ecx  +
push ecx  +
push eax  +
push [ebp+arg_0]  +
call sub_1006416  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push ebx  +
xor ebx ebx +
cmp [ebp+arg_C] ebx +
jnz loc_100675F  +
mov eax 80041008h +
jmp loc_10068B5  +
push esi  +
push 1Ch  +
call ds:CoTaskMemAlloc  +
mov esi eax +
mov [ebp+var_4] esi +
cmp esi ebx +
jnz loc_100677B  +
mov eax 80041006h +
jmp loc_10068B4  +
push 1Ch  +
pop ecx  +
mov [eax] bl +
inc eax  +
dec ecx  +
jnz loc_100677E  +
push edi  +
cmp [ebp+lpString] ebx +
jz loc_10067E9  +
push ebx  +
push [ebp+lpString]  +
call sub_1008332  +
mov edi eax +
lea eax [ebp+cb] +
push eax  +
push 1  +
push edi  +
mov [ebp+cb] ebx +
call sub_10062DE  +
test eax eax +
jl loc_10068BA  +
mov eax [ebp+cb] +
push 2  +
pop ecx  +
mul  ecx +
lea ecx [ebp+cb] +
push ecx  +
push edx  +
push eax  +
call sub_1001CF5  +
test eax eax +
jl loc_10068BA  +
push [ebp+cb]  +
call ds:CoTaskMemAlloc  +
mov [esi] eax +
cmp eax ebx +
jz loc_10068BA  +
mov [esi+4] edi +
inc edi  +
push edi  +
push [ebp+lpString]  +
push dword ptr [esi]  +
call sub_1008CA4  +
cmp [ebp+arg_8] ebx +
jz loc_100684B  +
push ebx  +
push [ebp+arg_8]  +
call sub_1008332  +
mov edi eax +
lea eax [ebp+var_C] +
push eax  +
push 1  +
push edi  +
mov [ebp+var_C] ebx +
call sub_10062DE  +
test eax eax +
jl loc_10068BA  +
mov eax [ebp+var_C] +
push 2  +
pop ecx  +
mul  ecx +
lea ecx [ebp+var_C] +
push ecx  +
push edx  +
push eax  +
call sub_1001CF5  +
test eax eax +
jl loc_10068BA  +
push [ebp+var_C]  +
call ds:CoTaskMemAlloc  +
mov [esi+8] eax +
cmp eax ebx +
jz loc_10068BA  +
mov [esi+0Ch] edi +
inc edi  +
push edi  +
push [ebp+arg_8]  +
push dword ptr [esi+8]  +
call sub_1008CA4  +
cmp [ebp+arg_4] ebx +
jz loc_10068A5  +
push ebx  +
push [ebp+arg_4]  +
call sub_1008332  +
mov edi eax +
lea eax [ebp+var_10] +
push eax  +
push 1  +
push edi  +
mov [ebp+var_10] ebx +
call sub_10062DE  +
test eax eax +
jl loc_10068BA  +
mov eax [ebp+var_10] +
push 2  +
pop ecx  +
mul  ecx +
lea ecx [ebp+var_10] +
push ecx  +
push edx  +
push eax  +
call sub_1001CF5  +
test eax eax +
jl loc_10068BA  +
push [ebp+var_10]  +
call ds:CoTaskMemAlloc  +
mov [esi+10h] eax +
cmp eax ebx +
jz loc_10068BA  +
mov [esi+14h] edi +
inc edi  +
push edi  +
push [ebp+arg_4]  +
push dword ptr [esi+10h]  +
call sub_1008CA4  +
mov eax [ebp+arg_C] +
mov dword ptr [esi+18h] 2 +
mov [eax] esi +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
lea eax [ebp+var_4] +
push eax  +
call sub_1006525  +
mov eax 80041006h +
jmp loc_10068B3  +
***
call __EH_prolog3  +
lea ecx [ebp-10h] +
call ??0CHString@@QAE@XZ  +
xor ebx ebx +
mov [ebp-4] ebx +
lea ecx [ebp-14h] +
call ??0CHString@@QAE@XZ  +
mov byte ptr [ebp-4] 1 +
mov [ebp-1Ch] ebx +
mov [ebp-18h] ebx +
cmp [ebp+8] ebx +
jnz loc_1006925  +
mov esi 80041008h +
mov [ebp-4] bl +
lea ecx [ebp-14h] +
call ??1CHString@@QAE@XZ  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-10h] +
call ??1CHString@@QAE@XZ  +
mov eax esi +
call __EH_epilog3  +
retn 18h  +
mov eax [ebp+18h] +
mov eax [eax] +
cmp eax ebx +
jz loc_100693E  +
push dword ptr [ebp+1Ch]  +
push eax  +
push dword ptr [ebp+8]  +
call sub_100670B  +
mov esi eax +
jmp loc_1006904  +
mov esi [ebp+1Ch] +
dec esi  +
neg esi  +
sbb esi esi +
add esi 0Ah +
cmp [ebp+10h] ebx +
jnz loc_1006966  +
cmp [ebp+14h] ebx +
jnz loc_1006966  +
push ebx  +
push ebx  +
push 3  +
push 6  +
push ebx  +
push ebx  +
push esi  +
push dword ptr [ebp+8]  +
call sub_1006416  +
jmp loc_100693A  +
push offset dword_10012F4  +
lea ecx [ebp-14h] +
call ??4CHString@@QAEABV0@PBG@Z  +
push dword ptr [ebp+10h]  +
lea ecx [ebp-10h] +
call ??4CHString@@QAEABV0@PBG@Z  +
push 5Ch  +
lea ecx [ebp-10h] +
call ?Find@CHString@@QBEHG@Z  +
mov edi eax +
cmp edi 0FFFFFFFFh +
jz loc_10069DC  +
push edi  +
lea eax [ebp+1Ch] +
push eax  +
lea ecx [ebp-10h] +
call ?Left@CHString@@QBE?AV1@H@Z  +
mov byte ptr [ebp-4] 2 +
push eax  +
lea ecx [ebp-14h] +
call ??4CHString@@QAEABV0@ABV0@@Z  +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp+1Ch] +
call ??1CHString@@QAE@XZ  +
inc edi  +
push edi  +
lea eax [ebp+1Ch] +
push eax  +
lea ecx [ebp-10h] +
call ?Mid@CHString@@QBE?AV1@H@Z  +
mov byte ptr [ebp-4] 3 +
push eax  +
lea ecx [ebp-10h] +
call ??4CHString@@QAEABV0@ABV0@@Z  +
mov byte ptr [ebp-4] 1 +
lea ecx [ebp+1Ch] +
call ??1CHString@@QAE@XZ  +
lea ecx [ebp-14h] +
call ?GetData@CHString@@IBEPAUCHStringData@@XZ  +
cmp [eax+4] ebx +
jz loc_10069EF  +
mov eax [ebp-14h] +
mov [ebp-18h] eax +
lea ecx [ebp-10h] +
call ?GetData@CHString@@IBEPAUCHStringData@@XZ  +
cmp [eax+4] ebx +
mov eax [ebp-10h] +
jnz loc_1006A02  +
mov eax [ebp-1Ch] +
mov edi [ebp+18h] +
cmp [edi] ebx +
jnz loc_1006A1E  +
push edi  +
push dword ptr [ebp-18h]  +
push dword ptr [ebp+14h]  +
push eax  +
call sub_1006745  +
cmp eax ebx +
jnz loc_100693A  +
push ebx  +
push dword ptr [edi]  +
jmp loc_1006955  +
***
call __EH_prolog3_catch  +
xor edi edi +
mov [ebp-18h] edi +
mov [ebp-14h] edi +
mov [ebp-4] edi +
mov byte ptr [ebp-4] 1 +
mov ebx [ebp+8] +
cmp ebx 80070005h +
jnz loc_1006A56  +
mov ebx 52Eh +
cmp ebx 80040154h +
jnz loc_1006AB7  +
push 1580h  +
call sub_100A082  +
push eax  +
lea ecx [ebp-20h] +
call sub_1002EC1  +
mov byte ptr [ebp-4] 2 +
push eax  +
lea ecx [ebp-14h] +
call sub_100363E  +
mov byte ptr [ebp-4] 1 +
mov ecx [ebp-20h] +
cmp ecx edi +
jz loc_1006A91  +
call sub_10035ED  +
mov [ebp-20h] edi +
mov esi [ebp-14h] +
cmp esi edi +
jz loc_1006A9C  +
mov eax [esi] +
jmp loc_1006A9E  +
xor eax eax +
push eax  +
call sub_100809C  +
or dword ptr [ebp-4] 0FFFFFFFFh +
cmp esi edi +
jz loc_1006C0D  +
mov ecx esi +
jmp loc_1006C05  +
lea eax [ebp-18h] +
push eax  +
push offset stru_1001B08  +
push 1  +
push edi  +
push offset stru_1001BB8  +
call ds:CoCreateInstance  +
cmp eax edi +
jl loc_1006B3C  +
mov [ebp-1Ch] edi +
mov eax [ebp-18h] +
mov ecx [eax] +
lea edx [ebp-1Ch] +
push edx  +
push edi  +
push edi  +
push ebx  +
push eax  +
call dword ptr [ecx+0Ch]  +
mov esi eax +
cmp [ebp-1Ch] edi +
jz loc_1006B20  +
push dword ptr [ebp-1Ch]  +
lea ecx [ebp-24h] +
call sub_1002EC1  +
mov byte ptr [ebp-4] 3 +
push eax  +
lea ecx [ebp-14h] +
call sub_100363E  +
mov byte ptr [ebp-4] 1 +
mov ecx [ebp-24h] +
cmp ecx edi +
jz loc_1006B17  +
call sub_10035ED  +
mov [ebp-24h] edi +
push dword ptr [ebp-1Ch]  +
call ds:SysFreeString  +
cmp esi edi +
jge loc_1006B2A  +
push ebx  +
call sub_1007543  +
mov eax [ebp-18h] +
cmp eax edi +
jz loc_1006B42  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [ebp-18h] edi +
jmp loc_1006B42  +
push ebx  +
call sub_1007543  +
mov [ebp-4] edi +
jmp loc_1006A91  +
push esi  +
push offset String  +
push dword ptr [ebp+8]  +
call sub_1008CE7  +
push dword ptr [ebp+8]  +
call sub_100809C  +
lea eax [ebp+8] +
push eax  +
call sub_10088CF  +
jmp loc_1006BCA  +
push 8  +
call ds:SetLastError  +
call sub_1008103  +
mov dword ptr [ebp-4] 4 +
mov dword ptr [ebp-4] 4 +
mov eax offset loc_1006BF8 +
retn   +
push 8  +
call ds:SetLastError  +
call sub_1008103  +
mov dword ptr [ebp-4] 4 +
mov eax offset loc_1006BD1 +
retn   +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov ecx [ebp-14h] +
xor edi edi +
cmp ecx edi +
jz loc_1006C0D  +
call sub_10035ED  +
mov [ebp-14h] edi +
call __EH_epilog3  +
retn 4  +
***
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
push dword ptr [eax+4]  +
call sub_1006A2B  +
pop ebp  +
retn 4  +
***
call __EH_prolog3_catch  +
xor ebx ebx +
mov [ebp-38h] ebx +
mov [ebp-24h] ebx +
mov [ebp-28h] ebx +
mov [ebp-4] ebx +
mov [ebp-18h] ebx +
mov byte ptr [ebp-4] 1 +
mov [ebp-1Ch] ebx +
mov byte ptr [ebp-4] 2 +
mov [ebp-14h] ebx +
mov byte ptr [ebp-4] 3 +
mov eax [ebp+2Ch] +
cmp eax ebx +
jz loc_1006C6B  +
mov [eax] ebx +
mov esi [ebp+28h] +
cmp esi ebx +
jz loc_1006C74  +
mov [esi] ebx +
mov byte ptr [ebp-4] 4 +
push ebx  +
call ds:SetLastError  +
mov [ebp-38h] ebx +
cmp [ebp+8] ebx +
jnz loc_1006CA7  +
cmp esi ebx +
jz loc_1006C91  +
mov dword ptr [esi] 80041008h +
mov byte ptr [ebp-4] 2 +
mov byte ptr [ebp-4] 1 +
mov [ebp-4] bl +
or dword ptr [ebp-4] 0FFFFFFFFh +
xor eax eax +
jmp loc_10070CB  +
lea eax [ebp-24h] +
push eax  +
mov esi [ebp+10h] +
push esi  +
call sub_1006337  +
test eax eax +
jnz loc_1006CBF  +
push 35h  +
call sub_1007543  +
mov edi [ebp+14h] +
push edi  +
call sub_100656E  +
test eax eax +
jnz loc_1006CD6  +
push 525h  +
call sub_1007543  +
push dword ptr [ebp+24h]  +
lea ecx [ebp-18h] +
call sub_1003672  +
cmp esi ebx +
jz loc_1006EAE  +
cmp [ebp-24h] ebx +
jnz loc_1006EAE  +
push esi  +
lea ecx [ebp-28h] +
call sub_1003672  +
push esi  +
call sub_100A134  +
push dword ptr [ebp+24h]  +
cmp eax 1 +
jnz loc_1006DAF  +
lea ecx [ebp-2Ch] +
call sub_1002EC1  +
mov byte ptr [ebp-4] 5 +
push offset word_10012F0  +
lea ecx [ebp+14h] +
call sub_1002EC1  +
mov byte ptr [ebp-4] 6 +
lea eax [ebp+14h] +
push eax  +
lea eax [ebp-40h] +
push eax  +
lea ecx [ebp-28h] +
call sub_1003703  +
mov byte ptr [ebp-4] 7 +
lea ecx [ebp-2Ch] +
push ecx  +
lea ecx [ebp-3Ch] +
push ecx  +
mov ecx eax +
call sub_1003703  +
mov byte ptr [ebp-4] 8 +
push eax  +
lea ecx [ebp-18h] +
call sub_100363E  +
mov byte ptr [ebp-4] 7 +
mov ecx [ebp-3Ch] +
cmp ecx ebx +
jz loc_1006D6D  +
call sub_10035ED  +
mov [ebp-3Ch] ebx +
mov byte ptr [ebp-4] 6 +
mov ecx [ebp-40h] +
cmp ecx ebx +
jz loc_1006D80  +
call sub_10035ED  +
mov [ebp-40h] ebx +
mov byte ptr [ebp-4] 5 +
mov ecx [ebp+14h] +
cmp ecx ebx +
jz loc_1006D93  +
call sub_10035ED  +
mov [ebp+14h] ebx +
mov byte ptr [ebp-4] 4 +
mov ecx [ebp-2Ch] +
cmp ecx ebx +
jz loc_1006E70  +
call sub_10035ED  +
mov [ebp-2Ch] ebx +
jmp loc_1006E70  +
lea ecx [ebp-34h] +
call sub_1002EC1  +
mov byte ptr [ebp-4] 9 +
push offset word_10012F0  +
lea ecx [ebp-30h] +
call sub_1002EC1  +
mov byte ptr [ebp-4] 0Ah +
lea eax [ebp-28h] +
push eax  +
push offset Str2  +
lea eax [ebp-4Ch] +
push eax  +
call sub_1003746  +
mov byte ptr [ebp-4] 0Bh +
lea ecx [ebp-30h] +
push ecx  +
lea ecx [ebp-48h] +
push ecx  +
mov ecx eax +
call sub_1003703  +
mov byte ptr [ebp-4] 0Ch +
lea ecx [ebp-34h] +
push ecx  +
lea ecx [ebp-44h] +
push ecx  +
mov ecx eax +
call sub_1003703  +
mov byte ptr [ebp-4] 0Dh +
push eax  +
lea ecx [ebp-18h] +
call sub_100363E  +
mov byte ptr [ebp-4] 0Ch +
mov ecx [ebp-44h] +
cmp ecx ebx +
jz loc_1006E24  +
call sub_10035ED  +
mov [ebp-44h] ebx +
mov byte ptr [ebp-4] 0Bh +
mov ecx [ebp-48h] +
cmp ecx ebx +
jz loc_1006E37  +
call sub_10035ED  +
mov [ebp-48h] ebx +
mov byte ptr [ebp-4] 0Ah +
mov ecx [ebp-4Ch] +
cmp ecx ebx +
jz loc_1006E4A  +
call sub_10035ED  +
mov [ebp-4Ch] ebx +
mov byte ptr [ebp-4] 9 +
mov ecx [ebp-30h] +
cmp ecx ebx +
jz loc_1006E5D  +
call sub_10035ED  +
mov [ebp-30h] ebx +
mov byte ptr [ebp-4] 4 +
mov ecx [ebp-34h] +
cmp ecx ebx +
jz loc_1006E70  +
call sub_10035ED  +
mov [ebp-34h] ebx +
cmp edi ebx +
jz loc_1006EAE  +
push ebx  +
push edi  +
call sub_1008332  +
test eax eax +
jz loc_1006EAE  +
push edi  +
lea ecx [ebp-1Ch] +
call sub_1003672  +
push dword ptr [ebp+18h]  +
lea ecx [ebp-14h] +
call sub_1003672  +
cmp dword ptr [ebp+20h] 1 +
jnz loc_1006EAE  +
lea ecx [ebp-14h] +
call sub_1002F13  +
test eax eax +
jnz loc_1006EAE  +
push ebx  +
lea ecx [ebp-14h] +
call sub_1003672  +
mov esi [ebp+0Ch] +
mov eax [esi] +
cmp eax ebx +
jz loc_1006EBF  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov [esi] ebx +
mov eax [ebp-14h] +
cmp eax ebx +
jz loc_1006ECA  +
mov edx [eax] +
jmp loc_1006ECC  +
xor edx edx +
cmp [ebp-1Ch] ebx +
jz loc_1006ED8  +
mov eax [ebp-1Ch] +
mov ecx [eax] +
jmp loc_1006EDA  +
xor ecx ecx +
mov eax [ebp-18h] +
cmp eax ebx +
jz loc_1006EE5  +
mov eax [eax] +
jmp loc_1006EE7  +
xor eax eax +
mov edi [ebp+8] +
mov edi [edi] +
push esi  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push edx  +
push ecx  +
push eax  +
mov eax edi +
mov edi [ebp+8] +
push edi  +
call dword ptr [eax+0Ch]  +
mov [ebp-20h] eax +
cmp eax ebx +
jge loc_1006FFB  +
cmp eax 80070005h +
jnz loc_1006FA0  +
cmp dword ptr [ebp+20h] 1 +
jnz loc_1006F96  +
lea ecx [ebp-1Ch] +
call sub_1002F13  +
test eax eax +
jz loc_1006F96  +
lea ecx [ebp-14h] +
call sub_1002F13  +
test eax eax +
jnz loc_1006F96  +
push offset dword_10012F4  +
lea ecx [ebp+24h] +
call sub_1002EC1  +
mov byte ptr [ebp-4] 0Eh +
cmp [eax] ebx +
jz loc_1006F4C  +
mov eax [eax] +
mov eax [eax] +
jmp loc_1006F4E  +
xor eax eax +
mov ecx [ebp-1Ch] +
cmp ecx ebx +
jz loc_1006F59  +
mov edx [ecx] +
jmp loc_1006F5B  +
xor edx edx +
mov ecx [ebp-18h] +
cmp ecx ebx +
jz loc_1006F66  +
mov ecx [ecx] +
jmp loc_1006F68  +
xor ecx ecx +
mov esi [edi] +
push dword ptr [ebp+0Ch]  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push eax  +
push edx  +
push ecx  +
push edi  +
call dword ptr [esi+0Ch]  +
mov [ebp-20h] eax +
mov byte ptr [ebp-4] 4 +
mov ecx [ebp+24h] +
cmp ecx ebx +
jz loc_1006F8E  +
call sub_10035ED  +
mov [ebp+24h] ebx +
mov esi [ebp+0Ch] +
cmp [ebp-20h] ebx +
jge loc_1006FEE  +
push dword ptr [ebp-20h]  +
call sub_1007543  +
jmp loc_1006FFB  +
cmp dword ptr [ebp-20h] 80041064h +
jnz loc_1006F91  +
mov dword ptr [ebp-24h] 1 +
push ebx  +
lea ecx [ebp-1Ch] +
call sub_1003672  +
push ebx  +
lea ecx [ebp-14h] +
call sub_1003672  +
push dword ptr [ebp+24h]  +
lea ecx [ebp-18h] +
call sub_1003672  +
cmp [ebp-18h] ebx +
jz loc_1006FD9  +
mov eax [ebp-18h] +
mov eax [eax] +
jmp loc_1006FDB  +
xor eax eax +
mov ecx [edi] +
push esi  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push ebx  +
push eax  +
push edi  +
call dword ptr [ecx+0Ch]  +
mov [ebp-20h] eax +
jmp loc_1006F91  +
push offset dword_10012F4  +
lea ecx [ebp-14h] +
call sub_1003672  +
mov eax [ebp-14h] +
cmp eax ebx +
jz loc_1007006  +
mov ecx [eax] +
jmp loc_1007008  +
xor ecx ecx +
mov eax [ebp-1Ch] +
cmp eax ebx +
jz loc_1007013  +
mov eax [eax] +
jmp loc_1007015  +
xor eax eax +
push dword ptr [ebp-24h]  +
push dword ptr [ebp+1Ch]  +
push ecx  +
push eax  +
push dword ptr [ebp+10h]  +
push dword ptr [esi]  +
call sub_10068CF  +
mov [ebp-20h] eax +
cmp eax ebx +
jge loc_1007034  +
push eax  +
call sub_1007543  +
mov dword ptr [ebp-38h] 1 +
mov eax [ebp+28h] +
cmp eax ebx +
jz loc_1007044  +
mov [eax] ebx +
mov dword ptr [ebp-4] 3 +
jmp loc_1007071  +
add ds:byte_100706F[eax] bh +
retn   +
mov eax [ebp+2Ch] +
cmp eax ebx +
jz loc_100707D  +
mov ecx [ebp-24h] +
mov [eax] ecx +
mov byte ptr [ebp-4] 2 +
mov ecx [ebp-14h] +
cmp ecx ebx +
jz loc_1007090  +
call sub_10035ED  +
mov [ebp-14h] ebx +
mov byte ptr [ebp-4] 1 +
mov ecx [ebp-1Ch] +
cmp ecx ebx +
jz loc_10070A3  +
call sub_10035ED  +
mov [ebp-1Ch] ebx +
mov [ebp-4] bl +
mov ecx [ebp-18h] +
cmp ecx ebx +
jz loc_10070B5  +
call sub_10035ED  +
mov [ebp-18h] ebx +
or dword ptr [ebp-4] 0FFFFFFFFh +
mov ecx [ebp-28h] +
cmp ecx ebx +
jz loc_10070C8  +
call sub_10035ED  +
mov [ebp-28h] ebx +
mov eax [ebp-38h] +
call __EH_epilog3  +
retn 28h  +
***
call __EH_prolog3_catch_GS  +
mov eax [ebp+8] +
mov [ebp-424h] eax +
mov eax [ebp+0Ch] +
mov [ebp-420h] eax +
mov edi [ebp+10h] +
mov [ebp-438h] edi +
mov esi [ebp+14h] +
mov eax [ebp+18h] +
mov [ebp-41Ch] eax +
mov eax [ebp+1Ch] +
mov [ebp-434h] eax +
mov eax [ebp+24h] +
mov [ebp-428h] eax +
mov eax [ebp+28h] +
mov [ebp-430h] eax +
xor ebx ebx +
mov [ebp-418h] ebx +
mov [ebp-440h] ebx +
push offset dword_100131C  +
lea ecx [ebp-414h] +
call ??0CHString@@QAE@PBG@Z  +
mov [ebp-4] ebx +
mov [ebp-214h] ebx +
push 1FAh  +
push ebx  +
lea eax [ebp-210h] +
push eax  +
call memset  +
add esp 0Ch +
push ebx  +
call ds:SetLastError  +
cmp dword ptr [ebp+20h] 1 +
jnz loc_100718A  +
push offset String2  +
mov ecx [ebp-41Ch] +
call ?Compare@CHString@@QBEHPBG@Z  +
test eax eax +
jz loc_100726C  +
mov ecx esi +
call ?GetData@CHString@@IBEPAUCHStringData@@XZ  +
cmp [eax+4] ebx +
jnz loc_10071B4  +
push dword ptr [ebp-430h]  +
lea eax [ebp-418h] +
push eax  +
push dword ptr [ebp-428h]  +
push ebx  +
push dword ptr [ebp-434h]  +
push ebx  +
push ebx  +
jmp loc_10071E1  +
xor ecx ecx +
cmp [ebp+20h] ebx +
jnz loc_10071C3  +
mov eax [ebp-41Ch] +
mov ecx [eax] +
mov eax [esi] +
push dword ptr [ebp-430h]  +
lea edx [ebp-418h] +
push edx  +
push dword ptr [ebp-428h]  +
push ebx  +
push dword ptr [ebp-434h]  +
push ecx  +
push eax  +
mov edi [edi] +
push edi  +
push dword ptr [ebp-420h]  +
push dword ptr [ebp-424h]  +
call sub_1006C33  +
cmp eax 1 +
jnz loc_1007213  +
xor ebx ebx +
inc ebx  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-414h] +
call ??1CHString@@QAE@XZ  +
mov eax ebx +
jmp loc_1007536  +
mov eax [ebp-418h] +
cmp eax 80040154h +
jz loc_10074F3  +
cmp eax 80041064h +
jz loc_1007267  +
cmp eax 80070005h +
jz loc_1007267  +
push eax  +
call sub_1006A2B  +
push 0CAh  +
call sub_100A082  +
push eax  +
mov eax ds:_iob +
add eax 40h +
push eax  +
call sub_1008D2A  +
call sub_1008070  +
push eax  +
mov eax ds:_iob +
add eax 40h +
push eax  +
call sub_1008D2A  +
jmp loc_10071FD  +
cmp [ebp+20h] ebx +
jz loc_1007232  +
mov ecx esi +
call ?GetData@CHString@@IBEPAUCHStringData@@XZ  +
cmp [eax+4] ebx +
jnz loc_100739C  +
mov byte ptr [ebp-4] 1 +
mov edi 0FEh +
push edi  +
mov ecx esi +
call ?GetBufferSetLength@CHString@@QAEPAGH@Z  +
mov [ebp-42Ch] eax +
mov [ebp-4] ebx +
mov [ebp-43Ch] edi +
lea eax [ebp-43Ch] +
push eax  +
lea eax [ebp-410h] +
push eax  +
push 2  +
call GetUserNameExW  +
test al al +
jnz loc_10072E6  +
call sub_1008103  +
push 0CAh  +
call sub_100A082  +
push eax  +
mov eax ds:_iob +
add eax 40h +
push eax  +
call sub_1008D2A  +
mov eax ds:_iob +
add eax 40h +
push eax  +
call sub_100818A  +
jmp loc_10071FD  +
push edi  +
lea eax [ebp-410h] +
push eax  +
push dword ptr [ebp-42Ch]  +
call sub_1008CA4  +
push 5Ch  +
push dword ptr [ebp-42Ch]  +
call ds:wcschr  +
pop ecx  +
pop ecx  +
test eax eax +
jnz loc_1007349  +
mov eax [ebp-438h] +
mov eax [eax] +
lea ecx [ebp-410h] +
push ecx  +
push eax  +
push offset aSS  +
push 0FFh  +
lea eax [ebp-214h] +
push eax  +
call sub_10066AC  +
add esp 14h +
push edi  +
lea eax [ebp-214h] +
push eax  +
push dword ptr [ebp-42Ch]  +
call sub_1008CA4  +
push 0FFFFFFFFh  +
mov ecx esi +
call ?ReleaseBuffer@CHString@@QAEXH@Z  +
jmp loc_10073A1  +
push 8007000Eh  +
call ds:SetLastError  +
call sub_1008103  +
push 0CAh  +
call sub_100A082  +
push eax  +
mov eax ds:_iob +
add eax 40h +
push eax  +
call sub_1008D2A  +
mov eax ds:_iob +
add eax 40h +
push eax  +
call sub_100818A  +
and dword ptr [ebp-4] 0 +
mov eax offset loc_1007395 +
retn   +
xor ebx ebx +
jmp loc_10071FD  +
mov edi 0FEh +
mov byte ptr [ebp-4] 3 +
push edi  +
mov ecx [ebp-41Ch] +
call ?GetBufferSetLength@CHString@@QAEPAGH@Z  +
mov [ebp-444h] eax +
mov [ebp-4] ebx +
push dword ptr [esi]  +
push 0CCh  +
call sub_100A082  +
push eax  +
lea eax [ebp-414h] +
push eax  +
call ?Format@CHString@@QAAXPBGZZ  +
add esp 0Ch +
lea ecx [ebp-414h] +
call ?GetData@CHString@@IBEPAUCHStringData@@XZ  +
mov eax [eax+4] +
push ebx  +
lea ecx [ebp-440h] +
push ecx  +
push eax  +
push dword ptr [ebp-414h]  +
push 0FFFFFFF4h  +
call ds:GetStdHandle  +
push eax  +
call ds:WriteConsoleW  +
push edi  +
push dword ptr [ebp-444h]  +
call sub_1008F8F  +
push 0FFFFFFFFh  +
mov edi [ebp-41Ch] +
mov ecx edi +
call ?ReleaseBuffer@CHString@@QAEXH@Z  +
mov eax [edi] +
mov esi [esi] +
mov ecx [ebp-438h] +
mov ecx [ecx] +
push dword ptr [ebp-430h]  +
lea edx [ebp-418h] +
push edx  +
push dword ptr [ebp-428h]  +
push ebx  +
push dword ptr [ebp-434h]  +
push eax  +
push esi  +
push ecx  +
push dword ptr [ebp-420h]  +
push dword ptr [ebp-424h]  +
call sub_1006C33  +
mov esi eax +
cmp esi ebx +
jnz loc_100749C  +
cmp dword ptr [ebp-418h] 80040154h +
jnz loc_1007491  +
push 0CAh  +
call sub_100A082  +
push eax  +
mov eax ds:_iob +
add eax 40h +
push eax  +
call sub_1008D2A  +
push 1580h  +
call sub_100A082  +
jmp loc_1007256  +
push dword ptr [ebp-418h]  +
jmp loc_1007233  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-414h] +
call ??1CHString@@QAE@XZ  +
mov eax esi +
jmp loc_1007536  +
push 8007000Eh  +
call ds:SetLastError  +
call sub_1008103  +
push 0CAh  +
call sub_100A082  +
push eax  +
mov eax ds:_iob +
add eax 40h +
push eax  +
call sub_1008D2A  +
mov eax ds:_iob +
add eax 40h +
push eax  +
call sub_100818A  +
and dword ptr [ebp-4] 0 +
mov eax offset loc_1007395 +
retn   +
push 0CAh  +
call sub_100A082  +
push eax  +
mov eax ds:_iob +
add eax 40h +
push eax  +
call sub_1008D2A  +
push 1580h  +
call sub_100A082  +
push eax  +
mov eax ds:_iob +
add eax 40h +
push eax  +
call sub_1008D2A  +
or dword ptr [ebp-4] 0FFFFFFFFh +
lea ecx [ebp-414h] +
call ??1CHString@@QAE@XZ  +
xor eax eax +
call sub_10079E3  +
retn 24h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+arg_0]  +
call loc_10075C2  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
push esi  +
mov esi ecx +
and dword ptr [esi+0Ch] 0 +
mov [esi+4] eax +
mov eax [ebp+arg_4] +
mov dword ptr [esi] offset off_1001848 +
mov [esi+8] eax +
test eax eax +
jz loc_1007589  +
cmp [ebp+arg_8] 0 +
jz loc_1007589  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
mov eax esi +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push esi  +
mov esi ecx +
mov eax [esi+8] +
mov dword ptr [esi] offset off_1001848 +
test eax eax +
jz loc_10075AD  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+8]  +
mov esi [esi+0Ch] +
test esi esi +
jz loc_10075BB  +
push esi  +
call ds:LocalFree  +
pop esi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
push 0  +
push dword ptr [ebp+0Ch]  +
lea ecx [ebp-10h] +
push dword ptr [ebp+8]  +
call sub_100755B  +
push offset dword_100E4A8  +
lea eax [ebp-10h] +
push eax  +
call _CxxThrowException  +
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
push esi  +
mov esi ecx +
mov dword ptr [esi] offset off_1001848 +
mov ecx [eax+4] +
mov [esi+4] ecx +
mov eax [eax+8] +
and dword ptr [esi+0Ch] 0 +
mov [esi+8] eax +
test eax eax +
jz loc_1007619  +
mov ecx [eax] +
push eax  +
call dword ptr [ecx+4]  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call sub_1007595  +
test byte ptr [ebp+8] 1 +
jz loc_100763F  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
xor eax eax +
jmp loc_1007667  +
test eax eax +
jnz loc_100766C  +
mov ecx [esi] +
test ecx ecx +
jz loc_1007664  +
call ecx  +
add esi 4 +
cmp esi [ebp+arg_4] +
jb loc_1007658  +
pop esi  +
pop ebp  +
retn   +
***
mov eax dword_1010098 +
push offset dword_1010088  +
push dword_1010094  +
mov dword_1010088 eax +
push offset dword_1010078  +
push offset dword_101007C  +
push offset dword_1010074  +
call ds:__wgetmainargs  +
add esp 14h +
mov dword_1010084 eax +
retn   +
***
call __SEH_prolog4  +
xor ebx ebx +
mov [ebp+ms_exc.disabled] ebx +
mov eax large fs:18h +
mov esi [eax+4] +
mov [ebp+var_1C] ebx +
mov edi offset Destination +
push ebx  +
push esi  +
push edi  +
call ds:InterlockedCompareExchange  +
cmp eax ebx +
jz loc_10076F4  +
cmp eax esi +
jnz loc_10076E7  +
xor esi esi +
inc esi  +
mov [ebp+var_1C] esi +
jmp loc_10076F7  +
push 3E8h  +
call ds:Sleep  +
jmp loc_10076CE  +
xor esi esi +
inc esi  +
mov eax dword_10104E8 +
cmp eax esi +
jnz loc_100770A  +
push 1Fh  +
call _amsg_exit  +
pop ecx  +
jmp loc_1007745  +
mov eax dword_10104E8 +
test eax eax +
jnz loc_100773F  +
mov dword_10104E8 esi +
push offset dword_10012C8  +
push offset dword_10012BC  +
call sub_100764B  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1007745  +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov eax 0FFh +
jmp loc_100780F  +
mov dword_1010090 esi +
mov eax dword_10104E8 +
cmp eax esi +
jnz loc_1007769  +
push offset dword_10012B8  +
push offset dword_10012B0  +
call _initterm  +
pop ecx  +
pop ecx  +
mov dword_10104E8 2 +
cmp [ebp+var_1C] ebx +
jnz loc_1007776  +
push ebx  +
push edi  +
call ds:InterlockedExchange  +
cmp dword_10104F0 ebx +
jz loc_1007797  +
push offset dword_10104F0  +
call sub_1007BC9  +
pop ecx  +
test eax eax +
jz loc_1007797  +
push ebx  +
push 2  +
push ebx  +
call dword_10104F0  +
push dword_1010078  +
push dword_101007C  +
push dword_1010074  +
call sub_1005CBB  +
add esp 0Ch +
mov dword_101008C eax +
cmp dword_1010080 ebx +
jnz loc_10077F5  +
push eax  +
call ds:exit  +
mov eax [ebp-14h] +
mov ecx [eax] +
mov ecx [ecx] +
mov [ebp-20h] ecx +
push eax  +
push ecx  +
call _XcptFilter  +
pop ecx  +
pop ecx  +
retn   +
mov esp [ebp-18h] +
mov eax [ebp-20h] +
mov dword_101008C eax +
xor ebx ebx +
cmp dword_1010080 ebx +
jnz loc_10077F5  +
push eax  +
call ds:_exit  +
cmp dword_1010090 ebx +
jnz loc_1007803  +
call ds:_cexit  +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
mov eax dword_101008C +
call __SEH_epilog4  +
retn   +
***
mov eax 5A4Dh +
cmp ds:1000000h ax +
jz loc_100782C  +
xor eax eax +
jmp loc_1007879  +
mov eax ds:100003Ch +
lea eax [eax+1000000h] +
cmp dword ptr [eax] 4550h +
jnz loc_1007828  +
movzx ecx word ptr [eax+18h] +
cmp ecx 10Bh +
jz loc_1007866  +
cmp ecx 20Bh +
jnz loc_1007828  +
cmp dword ptr [eax+84h] 0Eh +
jbe loc_1007828  +
xor ecx ecx +
cmp [eax+0F8h] ecx +
jmp loc_1007874  +
cmp dword ptr [eax+74h] 0Eh +
jbe loc_1007828  +
xor ecx ecx +
cmp [eax+0E8h] ecx +
setnz cl  +
mov eax ecx +
push 1  +
mov dword_1010080 eax +
call sub_1007D62  +
push eax  +
call ds:__set_app_type  +
or dword_10104E0 0FFFFFFFFh +
or dword_10104E4 0FFFFFFFFh +
pop ecx  +
pop ecx  +
call ds:__p__fmode  +
mov ecx dword_10100A0 +
mov [eax] ecx +
call ds:__p__commode  +
mov ecx dword_101009C +
mov [eax] ecx +
call sub_1007CF4  +
cmp dword_1010058 0 +
jnz loc_10078D2  +
push offset sub_1007CF4  +
call ds:__setusermatherr  +
pop ecx  +
call sub_1007CDC  +
xor eax eax +
retn   +
***
call sub_1007DA1  +
jmp sub_10076AC  +
***
cmp ecx dword_101003C +
jnz loc_1007904  +
retn 0  +
jmp loc_1007E37  +
***
lea eax [esp+4+arg_0] +
sub esp [esp+0Ch] +
push ebx  +
push esi  +
push edi  +
mov [eax] ebp +
mov ebp eax +
mov eax dword_101003C +
xor eax ebp +
push eax  +
push dword ptr [ebp-4]  +
mov dword ptr [ebp-4] 0FFFFFFFFh +
lea eax [ebp-0Ch] +
mov large fs:0 eax +
retn   +
***
lea eax [esp+4+arg_0] +
sub esp [esp+0Ch] +
push ebx  +
push esi  +
push edi  +
mov [eax] ebp +
mov ebp eax +
mov eax dword_101003C +
xor eax ebp +
push eax  +
mov [ebp-10h] esp +
push dword ptr [ebp-4]  +
mov dword ptr [ebp-4] 0FFFFFFFFh +
lea eax [ebp-0Ch] +
mov large fs:0 eax +
retn   +
***
lea eax [esp+4+arg_0] +
sub esp [esp+0Ch] +
push ebx  +
push esi  +
push edi  +
mov [eax] ebp +
mov ebp eax +
mov eax dword_101003C +
xor eax ebp +
push eax  +
mov [ebp-14h] eax +
mov [ebp-10h] esp +
push dword ptr [ebp-4]  +
mov dword ptr [ebp-4] 0FFFFFFFFh +
lea eax [ebp-0Ch] +
mov large fs:0 eax +
retn   +
***
mov ecx [ebp-0Ch] +
mov large fs:0 ecx +
pop ecx  +
pop edi  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
push ecx  +
retn   +
***
mov ecx [ebp-14h] +
xor ecx ebp +
call sub_10078F9  +
jmp __EH_epilog3  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ecx +
call ds:??1type_info@@UAE@XZ  +
test byte ptr [ebp+8] 1 +
jz loc_1007A12  +
push esi  +
call ??3@YAXPAX@Z  +
pop ecx  +
mov eax esi +
pop esi  +
pop ebp  +
retn 4  +
***
sub ecx eax +
sbb eax eax +
not eax  +
and ecx eax +
mov eax esp +
and eax 0FFFFF000h +
cmp ecx eax +
jb cs20  +
mov eax ecx +
pop ecx  +
xchg eax esp +
mov eax [eax] +
mov [esp+0] eax +
retn   +
sub eax 1000h +
test [eax] eax +
jmp cs10  +
***
push ecx  +
lea ecx [esp+8] +
sub ecx eax +
and ecx 0Fh +
add eax ecx +
sbb ecx ecx +
or eax ecx +
pop ecx  +
jmp __alloca_probe  +
***
push ecx  +
lea ecx [esp+8] +
sub ecx eax +
and ecx 7 +
add eax ecx +
sbb ecx ecx +
or eax ecx +
pop ecx  +
jmp __alloca_probe  +
***
push ebp  +
mov ebp esp +
mov eax [ebp+8] +
mov eax [eax] +
cmp dword ptr [eax] 0E06D7363h +
jnz loc_1007B0A  +
cmp dword ptr [eax+10h] 3 +
jnz loc_1007B0A  +
mov eax [eax+14h] +
cmp eax 19930520h +
jz loc_1007B04  +
cmp eax 19930521h +
jz loc_1007B04  +
cmp eax 19930522h +
jz loc_1007B04  +
cmp eax 1994000h +
jnz loc_1007B0A  +
call ds:?terminate@@YAXXZ  +
xor eax eax +
pop ebp  +
retn 4  +
***
push (offset byte_1007ACC+1)  +
call ds:SetUnhandledExceptionFilter  +
xor eax eax +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
mov eax 5A4Dh +
cmp [ecx] ax +
jz loc_1007B56  +
xor eax eax +
pop ebp  +
retn   +
mov eax [ecx+3Ch] +
add eax ecx +
cmp dword ptr [eax] 4550h +
jnz loc_1007B52  +
xor edx edx +
mov ecx 10Bh +
cmp [eax+18h] cx +
setz dl  +
mov eax edx +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
mov ecx [eax+3Ch] +
add ecx eax +
movzx eax word ptr [ecx+14h] +
push ebx  +
push esi  +
movzx esi word ptr [ecx+6] +
xor edx edx +
push edi  +
lea eax [eax+ecx+18h] +
test esi esi +
jbe loc_1007BBD  +
mov edi [ebp+arg_4] +
mov ecx [eax+0Ch] +
cmp edi ecx +
jb loc_1007BB5  +
mov ebx [eax+8] +
add ebx ecx +
cmp edi ebx +
jb loc_1007BBF  +
inc edx  +
add eax 28h +
cmp edx esi +
jb loc_1007BA5  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn   +
***
call __SEH_prolog4  +
and [ebp+ms_exc.disabled] 0 +
mov esi 1000000h +
push esi  +
call sub_1007B40  +
pop ecx  +
test eax eax +
jz loc_1007C26  +
mov eax [ebp+arg_0] +
sub eax esi +
push eax  +
push esi  +
call sub_1007B80  +
pop ecx  +
pop ecx  +
test eax eax +
jz loc_1007C26  +
mov eax [eax+24h] +
shr eax 1Fh +
not eax  +
and eax 1 +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
jmp loc_1007C2F  +
mov eax [ebp-14h] +
mov eax [eax] +
mov eax [eax] +
xor ecx ecx +
cmp eax 0C0000005h +
setz cl  +
mov eax ecx +
retn   +
mov esp [ebp-18h] +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
xor eax eax +
call __SEH_epilog4  +
retn   +
***
mov eax [esp+8+arg_4] +
mov ecx [ebp-10h] +
mov large fs:0 ecx +
pop ecx  +
pop edi  +
pop edi  +
pop esi  +
pop ebx  +
mov esp ebp +
pop ebp  +
push ecx  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push dword ptr [ebp+14h]  +
push dword ptr [ebp+10h]  +
push dword ptr [ebp+0Ch]  +
push dword ptr [ebp+8]  +
push offset sub_10078F9  +
push offset dword_101003C  +
call _except_handler4_common  +
add esp 18h +
pop ebp  +
retn   +
***
call ds:_controlfp  +
pop ecx  +
pop ecx  +
retn   +
***
retn   +
***
call __SEH_prolog4  +
xor eax eax +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_1007D55  +
cmp ecx 0FFFFFFFFh +
jz loc_1007D55  +
and [ebp+ms_exc.disabled] eax +
mov edx 5A4Dh +
cmp [ecx] dx +
jnz loc_1007D4E  +
mov edx [ecx+3Ch] +
test edx edx +
jl loc_1007D4E  +
cmp edx 10000000h +
jnb loc_1007D4E  +
lea eax [edx+ecx] +
mov [ebp+var_1C] eax +
cmp dword ptr [eax] 4550h +
jz loc_1007D4E  +
jmp loc_1007D49  +
xor eax eax +
inc eax  +
retn   +
mov esp [ebp-18h] +
xor eax eax +
mov [ebp+var_1C] eax +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
call __SEH_epilog4  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
call ds:GetModuleHandleA  +
test eax eax +
jz loc_1007D97  +
push eax  +
call sub_1007CFC  +
test eax eax +
jz loc_1007D97  +
movzx eax word ptr [eax+5Ch] +
cmp ax 2 +
jnz loc_1007D8C  +
push 2  +
pop eax  +
pop ebp  +
retn   +
cmp ax 3 +
jnz loc_1007D97  +
xor eax eax +
inc eax  +
pop ebp  +
retn   +
mov eax [ebp+arg_0] +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 10h +
mov eax dword_101003C +
and [ebp+SystemTimeAsFileTime.dwLowDateTime] 0 +
and [ebp+SystemTimeAsFileTime.dwHighDateTime] 0 +
push ebx  +
push edi  +
mov edi 0BB40E64Eh +
mov ebx 0FFFF0000h +
cmp eax edi +
jz loc_1007DD3  +
test eax ebx +
jz loc_1007DD3  +
not eax  +
mov dword_1010040 eax +
jmp loc_1007E2E  +
push esi  +
lea eax [ebp+SystemTimeAsFileTime] +
push eax  +
call ds:GetSystemTimeAsFileTime  +
mov esi [ebp+SystemTimeAsFileTime.dwHighDateTime] +
xor esi [ebp+SystemTimeAsFileTime.dwLowDateTime] +
call ds:GetCurrentProcessId  +
xor esi eax +
call ds:GetCurrentThreadId  +
xor esi eax +
call ds:GetTickCount  +
xor esi eax +
lea eax [ebp+PerformanceCount] +
push eax  +
call ds:QueryPerformanceCounter  +
mov eax dword ptr [ebp+PerformanceCount+4] +
xor eax dword ptr [ebp+PerformanceCount] +
xor esi eax +
cmp esi edi +
jz loc_1007E1A  +
test dword_101003C ebx +
jnz loc_1007E1F  +
mov esi 0BB40E64Fh +
mov dword_101003C esi +
not esi  +
mov dword_1010040 esi +
pop esi  +
pop edi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 328h +
mov dword_10101A8 eax +
mov dword_10101A4 ecx +
mov dword_10101A0 edx +
mov dword_101019C ebx +
mov dword_1010198 esi +
mov dword_1010194 edi +
mov word_10101C0 ss +
mov word_10101B4 cs +
mov word_1010190 ds +
mov word_101018C es +
mov word_1010188 fs +
mov word_1010184 gs +
pushf   +
pop dword_10101B8  +
mov eax [ebp+0] +
mov dword_10101AC eax +
mov eax [ebp+4] +
mov dword_10101B0 eax +
lea eax [ebp+8] +
mov dword_10101BC eax +
mov eax [ebp-320h] +
mov dword_10100F8 10001h +
mov eax dword_10101B0 +
mov dword_10100B4 eax +
mov dword_10100A8 0C0000409h +
mov dword_10100AC 1 +
mov eax dword_101003C +
mov [ebp-328h] eax +
mov eax dword_1010040 +
mov [ebp-324h] eax +
push 0  +
call ds:SetUnhandledExceptionFilter  +
push offset ExceptionInfo  +
call ds:UnhandledExceptionFilter  +
push 0C0000409h  +
call ds:GetCurrentProcess  +
push eax  +
call ds:TerminateProcess  +
leave   +
retn   +
***
mov edi edi +
push edi  +
xor edi edi +
inc edi  +
cmp dword_10103C8 edi +
jnz loc_1007F62  +
push dword_10103D0  +
call sub_100BBD8  +
test eax eax +
jnz loc_1007F5E  +
call ds:GetLastError  +
test eax eax +
jnz loc_1007FF6  +
push 42Bh  +
jmp loc_1007FF0  +
mov eax edi +
pop edi  +
retn   +
cmp dword_10103D0 0 +
jnz loc_1007F46  +
call sub_100BBF9  +
push eax  +
mov dword_10103D0 eax +
call sub_100BBD8  +
test eax eax +
jz loc_1007FE4  +
push 0  +
push offset dword_100185C  +
push dword_10103D0  +
call sub_100BF1B  +
test eax eax +
jnz loc_1007FE4  +
push 3  +
push dword_10103D0  +
call sub_100C0E6  +
cmp eax edi +
jnz loc_1007FE4  +
push 3  +
push dword_10103D0  +
call sub_100C0E6  +
cmp eax 2 +
jnz loc_1007FE4  +
push 3  +
push dword_10103D0  +
call sub_100C0E6  +
cmp eax 3 +
jnz loc_1007FE4  +
push 0  +
mov dword_10103C8 edi +
call ds:SetThreadUILanguage  +
xor ecx ecx +
test ax ax +
setnz cl  +
pop edi  +
mov eax ecx +
retn   +
call ds:GetLastError  +
test eax eax +
jnz loc_1007FF6  +
push 8  +
call ds:SetLastError  +
xor eax eax +
pop edi  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp dword_10103C8 0 +
push esi  +
jz loc_1008064  +
push 3  +
push dword_10103D0  +
call sub_100C241  +
cmp eax [ebp+arg_0] +
jbe loc_1008064  +
push [ebp+arg_0]  +
push 3  +
push dword_10103D0  +
call sub_100C6C7  +
test eax eax +
jz loc_1008064  +
push [ebp+arg_0]  +
push 3  +
push dword_10103D0  +
call sub_100C3F9  +
mov esi eax +
test esi esi +
jz loc_1008064  +
push 7  +
push offset aBuffer  +
push esi  +
call ds:_memicmp  +
add esp 0Ch +
test eax eax +
jnz loc_1008064  +
mov eax [esi+0Ch] +
jmp loc_1008066  +
xor eax eax +
pop esi  +
pop ebp  +
retn 4  +
***
mov eax dword_10103D0 +
test eax eax +
jz loc_1008091  +
push eax  +
call sub_100BBD8  +
test eax eax +
jz loc_1008091  +
push 0  +
push dword_10103D0  +
call sub_100C2AE  +
retn   +
mov eax offset dword_100185C +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ds:GetLastError +
push edi  +
call esi  +
cmp [ebp+lpString] 0 +
mov edi eax +
jnz loc_10080C5  +
call esi  +
test eax eax +
jnz loc_10080C1  +
push 57h  +
call ds:SetLastError  +
xor eax eax +
jmp loc_10080F8  +
call sub_1007F29  +
test eax eax +
jz loc_10080C1  +
push 0  +
push [ebp+lpString]  +
push 0  +
push dword_10103D0  +
call sub_100C4E9  +
test eax eax +
jnz loc_10080EE  +
call esi  +
test eax eax +
jnz loc_10080C1  +
push 8  +
jmp loc_10080BB  +
push edi  +
call ds:SetLastError  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push edi  +
xor edi edi +
mov [ebp+hMem] edi +
call sub_1007F29  +
test eax eax +
jz loc_1008182  +
push ebx  +
push esi  +
mov esi ds:GetLastError +
push edi  +
push edi  +
lea eax [ebp+hMem] +
push eax  +
push edi  +
call esi  +
push eax  +
push edi  +
push 1300h  +
call ds:FormatMessageW  +
mov ebx ds:SetLastError +
test eax eax +
jz loc_100815C  +
cmp [ebp+hMem] edi +
jz loc_1008174  +
push [ebp+hMem]  +
call sub_100809C  +
push [ebp+hMem]  +
mov esi eax +
call ds:LocalFree  +
mov eax esi +
jmp loc_1008180  +
cmp [ebp+hMem] edi +
jz loc_1008174  +
push [ebp+hMem]  +
call ds:LocalFree  +
call esi  +
test eax eax +
jnz loc_1008174  +
push 8  +
call ebx  +
call esi  +
test eax eax +
jnz loc_100817E  +
push 8  +
call ebx  +
xor eax eax +
pop esi  +
pop ebx  +
pop edi  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
call sub_1008103  +
test eax eax +
jz loc_10081AC  +
call sub_1008070  +
push eax  +
push [ebp+hConsoleOutput]  +
call sub_1008D2A  +
neg eax  +
sbb eax eax +
neg eax  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 120h +
mov eax dword_101003C +
xor eax ebp +
mov [ebp+var_4] eax +
push esi  +
mov esi 11Ch +
push esi  +
lea eax [ebp+var_120] +
push 0  +
push eax  +
call memset  +
mov eax dword_101005C +
add esp 0Ch +
push 3  +
mov [ebp+var_11C] eax +
mov eax dword_1010060 +
push 2  +
mov [ebp+var_118] eax +
mov ax word_10103D4 +
push 0  +
mov [ebp+var_120] esi +
mov esi ds:VerSetConditionMask +
push 0  +
mov [ebp+var_C] ax +
call esi  +
push 3  +
push 1  +
push edx  +
push eax  +
call esi  +
push 3  +
push 20h  +
push edx  +
push eax  +
call esi  +
push edx  +
push eax  +
push 3  +
lea eax [ebp+var_120] +
push eax  +
call ds:VerifyVersionInfoW  +
mov ecx [ebp+var_4] +
xor ecx ebp +
pop esi  +
call sub_10078F9  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 1388h +
sbb eax eax +
inc eax  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
xor ebx ebx +
mov [ebp+Mode] ebx +
cmp [ebp+arg_0] ebx +
jnz loc_100828A  +
call ds:GetLastError  +
test eax eax +
jnz loc_1008286  +
push 57h  +
call ds:SetLastError  +
xor eax eax +
jmp loc_1008307  +
push esi  +
push edi  +
push [ebp+arg_0]  +
call ds:_fileno  +
mov esi ds:_errno +
mov edi eax +
call esi  +
push edi  +
mov [eax] ebx +
call ds:_get_osfhandle  +
mov ebx eax +
pop ecx  +
pop ecx  +
cmp ebx 0FFFFFFFFh +
jz loc_10082FB  +
call esi  +
cmp dword ptr [eax] 9 +
jz loc_10082FB  +
push ebx  +
call ds:GetFileType  +
cmp eax 2 +
jnz loc_1008303  +
sub edi 0 +
jz loc_10082D7  +
dec edi  +
jz loc_10082D3  +
dec edi  +
jnz loc_1008303  +
push 0FFFFFFF4h  +
jmp loc_10082D9  +
push 0FFFFFFF5h  +
jmp loc_10082D9  +
push 0FFFFFFF6h  +
call ds:GetStdHandle  +
test eax eax +
jz loc_1008303  +
cmp eax 0FFFFFFFFh +
jz loc_1008303  +
lea ecx [ebp+Mode] +
push ecx  +
push eax  +
call ds:GetConsoleMode  +
neg eax  +
sbb eax eax +
neg eax  +
jmp loc_1008305  +
push 6  +
call ds:SetLastError  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+lpString] 0 +
jnz loc_1008320  +
xor eax eax +
jmp loc_1008329  +
push [ebp+lpString]  +
call ds:lstrlenA  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+lpString] 0 +
jnz loc_1008341  +
xor eax eax +
jmp loc_100834A  +
push [ebp+lpString]  +
call ds:lstrlenW  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+lpString1] 0 +
jz loc_1008391  +
cmp [ebp+lpString2] 0 +
jz loc_1008391  +
mov eax [ebp+arg_C] +
xor ecx ecx +
cmp [ebp+arg_8] 1 +
setz cl  +
test eax eax +
jnz loc_1008377  +
or eax 0FFFFFFFFh +
push eax  +
push [ebp+lpString2]  +
push eax  +
push [ebp+lpString1]  +
push ecx  +
call ds:GetThreadLocale  +
push eax  +
call ds:CompareStringW  +
dec eax  +
dec eax  +
jmp loc_10083A5  +
call ds:GetLastError  +
test eax eax +
jnz loc_10083A3  +
push 57h  +
call ds:SetLastError  +
xor eax eax +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+lpString1] 0 +
jz loc_10083EC  +
cmp [ebp+lpString2] 0 +
jz loc_10083EC  +
mov eax [ebp+arg_C] +
xor ecx ecx +
cmp [ebp+arg_8] 1 +
setz cl  +
test eax eax +
jnz loc_10083D2  +
or eax 0FFFFFFFFh +
push eax  +
push [ebp+lpString2]  +
push eax  +
push [ebp+lpString1]  +
push ecx  +
call ds:GetThreadLocale  +
push eax  +
call ds:CompareStringA  +
dec eax  +
dec eax  +
jmp loc_1008400  +
call ds:GetLastError  +
test eax eax +
jnz loc_10083FE  +
push 57h  +
call ds:SetLastError  +
xor eax eax +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
xor edi edi +
xor esi esi +
cmp [ebp+lpString] edi +
jz loc_10084CD  +
mov eax [ebp+arg_8] +
cmp eax edi +
jz loc_10084CD  +
mov ebx [ebp+arg_4] +
cmp ebx edi +
jnz loc_1008438  +
cmp [eax] edi +
jnz loc_10084CD  +
mov eax [eax] +
cmp eax edi +
jz loc_1008446  +
cmp eax 1 +
jbe loc_10084B4  +
lea esi [eax-1] +
cmp ebx edi +
jz loc_100845D  +
cmp esi edi +
jz loc_100845D  +
lea eax [esi+esi+2] +
push eax  +
push edi  +
push ebx  +
call memset  +
add esp 0Ch +
or eax 0FFFFFFFFh +
cmp esi edi +
jz loc_1008473  +
push edi  +
push [ebp+lpString]  +
call sub_1008311  +
cmp eax esi +
jle loc_1008473  +
mov eax esi +
push esi  +
push ebx  +
push eax  +
push [ebp+lpString]  +
push edi  +
push 1  +
call ds:MultiByteToWideChar  +
cmp eax edi +
jnz loc_10084C6  +
call ds:GetLastError  +
test eax eax +
jnz loc_100849B  +
push 42Bh  +
call ds:SetLastError  +
cmp ebx edi +
jz loc_10084DF  +
cmp esi edi +
jz loc_10084DF  +
lea eax [esi+esi+2] +
push eax  +
push edi  +
push ebx  +
call memset  +
add esp 0Ch +
jmp loc_10084DF  +
add eax eax +
push eax  +
push edi  +
push ebx  +
call memset  +
add esp 0Ch +
xor eax eax +
inc eax  +
jmp loc_10084E1  +
mov ecx [ebp+arg_8] +
mov [ecx] eax +
jmp loc_10084C1  +
call ds:GetLastError  +
test eax eax +
jnz loc_10084DF  +
push 57h  +
call ds:SetLastError  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+lpMem] 0 +
jnz loc_1008506  +
call ds:GetLastError  +
test eax eax +
jnz loc_1008528  +
push 57h  +
jmp loc_1008522  +
call ds:GetProcessHeap  +
test eax eax +
jz loc_1008528  +
push [ebp+lpMem]  +
push 0  +
push eax  +
call ds:HeapValidate  +
test eax eax +
jnz loc_100852A  +
push 6  +
call ds:SetLastError  +
xor eax eax +
pop ebp  +
retn 4  +
***
call __SEH_prolog4  +
cmp [ebp+dwBytes] 0 +
ja loc_1008559  +
call ds:GetLastError  +
test eax eax +
jnz loc_10085CD  +
push 57h  +
call ds:SetLastError  +
jmp loc_10085CD  +
call ds:GetProcessHeap  +
test eax eax +
jz loc_10085CD  +
and [ebp+ms_exc.disabled] 0 +
push [ebp+dwBytes]  +
push 0Ch  +
push eax  +
call ds:HeapAlloc  +
mov [ebp+var_20] eax +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
jmp loc_10085CF  +
mov eax [ebp-14h] +
mov eax [eax] +
mov eax [eax] +
mov [ebp-1Ch] eax +
xor eax eax +
inc eax  +
retn   +
mov esp [ebp-18h] +
cmp dword ptr [ebp-1Ch] 0C0000017h +
jz loc_10085B4  +
cmp dword ptr [ebp-1Ch] 0C0000005h +
jnz loc_10085B4  +
push 570h  +
call ds:SetLastError  +
call sub_1008103  +
jmp loc_10085C6  +
call ds:GetLastError  +
test eax eax +
jnz loc_10085C6  +
push 8  +
call ds:SetLastError  +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
xor eax eax +
call __SEH_epilog4  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+lpMem] 0 +
jnz loc_10085FE  +
call ds:GetLastError  +
test eax eax +
jnz loc_10085F9  +
push 57h  +
call ds:SetLastError  +
or eax 0FFFFFFFFh +
jmp loc_1008620  +
push [ebp+lpMem]  +
call sub_10084ED  +
test eax eax +
jz loc_10085F9  +
call ds:GetProcessHeap  +
test eax eax +
jz loc_10085F9  +
push [ebp+lpMem]  +
push 0  +
push eax  +
call ds:HeapSize  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov ebx eax +
mov esi edx +
xor eax eax +
xor edi edi +
test esi esi +
jz loc_1008659  +
cmp [ebp+arg_4] eax +
jz loc_1008655  +
mov dl [ebx] +
test dl dl +
jz loc_1008655  +
mov [ecx] dl +
inc ecx  +
inc ebx  +
dec esi  +
dec [ebp+arg_4]  +
inc edi  +
test esi esi +
jnz loc_100863D  +
test esi esi +
jnz loc_1008660  +
dec ecx  +
dec edi  +
mov eax 8007007Ah +
mov byte ptr [ecx] 0 +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_100866C  +
mov [ecx] edi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov ebx eax +
mov esi edx +
xor eax eax +
xor edi edi +
test esi esi +
jz loc_10086AD  +
cmp [ebp+arg_4] eax +
jz loc_10086A9  +
movzx edx word ptr [ebx] +
test dx dx +
jz loc_10086A9  +
mov [ecx] dx +
inc ecx  +
inc ecx  +
inc ebx  +
inc ebx  +
dec esi  +
dec [ebp+arg_4]  +
inc edi  +
test esi esi +
jnz loc_100868C  +
test esi esi +
jnz loc_10086B5  +
dec ecx  +
dec ecx  +
dec edi  +
mov eax 8007007Ah +
xor edx edx +
mov [ecx] dx +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_10086C3  +
mov [ecx] edi +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push [ebp+arg_8]  +
mov esi eax +
push [ebp+arg_4]  +
xor ebx ebx +
dec esi  +
push esi  +
push edi  +
call ds:_vsnwprintf  +
add esp 10h +
test eax eax +
jl loc_10086F8  +
cmp eax esi +
ja loc_10086F8  +
jz loc_10086FD  +
jmp loc_1008705  +
mov ebx 8007007Ah +
xor eax eax +
mov [edi+esi*2] ax +
mov eax esi +
mov ecx [ebp+arg_0] +
test ecx ecx +
jz loc_100870E  +
mov [ecx] eax +
pop esi  +
mov eax ebx +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
test esi esi +
jnz loc_1008736  +
call ds:GetLastError  +
test eax eax +
jnz loc_1008779  +
push 57h  +
jmp loc_1008773  +
push 0  +
push esi  +
call sub_1008332  +
test eax eax +
jz loc_100876E  +
mov ecx [ebp+arg_C] +
cmp ecx eax +
jnb loc_100876E  +
cmp [ebp+arg_8] 1 +
push dword ptr [ebp+wMatch]  +
lea eax [esi+ecx*2] +
push eax  +
jnz loc_100875E  +
call ds:StrChrIW  +
jmp loc_1008764  +
call ds:StrChrW  +
test eax eax +
jz loc_100876E  +
sub eax esi +
sar eax 1 +
jmp loc_100877C  +
push 490h  +
call ds:SetLastError  +
or eax 0FFFFFFFFh +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
xor esi esi +
push edi  +
cmp ebx esi +
jz loc_10087EB  +
mov edi [ebp+lpString] +
cmp edi esi +
jz loc_10087EB  +
push esi  +
push edi  +
call sub_1008332  +
mov [ebp+arg_0] eax +
cmp eax esi +
jz loc_10087E4  +
push esi  +
push ebx  +
call sub_1008332  +
test eax eax +
jz loc_10087E4  +
push esi  +
push ebx  +
call sub_1008332  +
cmp [ebp+arg_C] eax +
jnb loc_10087E4  +
cmp [ebp+arg_0] esi +
jbe loc_10087E4  +
push [ebp+arg_C]  +
movzx eax word ptr [edi+esi*2] +
push [ebp+arg_8]  +
push eax  +
push ebx  +
call sub_100871B  +
cmp eax 0FFFFFFFFh +
jnz loc_1008800  +
inc esi  +
cmp esi [ebp+arg_0] +
jb loc_10087C8  +
push 490h  +
jmp loc_10087F7  +
call ds:GetLastError  +
test eax eax +
jnz loc_10087FD  +
push 57h  +
call ds:SetLastError  +
or eax 0FFFFFFFFh +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov edi [ebp+lpString] +
test edi edi +
jz loc_1008873  +
mov ebx [ebp+arg_4] +
test ebx ebx +
jz loc_1008873  +
push 0  +
push edi  +
call sub_1008332  +
push 0  +
push ebx  +
mov esi eax +
call sub_1008332  +
test eax eax +
jz loc_1008866  +
test esi esi +
jz loc_1008866  +
mov ecx [ebp+arg_C] +
cmp ecx esi +
jnb loc_1008866  +
sub esi ecx +
cmp esi eax +
jb loc_1008866  +
cmp [ebp+arg_8] 1 +
push ebx  +
lea eax [edi+ecx*2] +
push eax  +
jnz loc_100885C  +
call ds:StrStrIW  +
jmp loc_1008862  +
call ds:StrStrW  +
test eax eax +
jnz loc_100886D  +
push 490h  +
jmp loc_100887F  +
sub eax edi +
sar eax 1 +
jmp loc_1008888  +
call ds:GetLastError  +
test eax eax +
jnz loc_1008885  +
push 57h  +
call ds:SetLastError  +
or eax 0FFFFFFFFh +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
xor esi esi +
cmp [ebp+lpString] esi +
jz loc_10088C3  +
push esi  +
push [ebp+lpString]  +
call sub_1008332  +
test eax eax +
jz loc_10088C3  +
push esi  +
push esi  +
push esi  +
push esi  +
push 0FFFFFFFFh  +
push [ebp+lpString]  +
push esi  +
push 1  +
call ds:WideCharToMultiByte  +
dec eax  +
jmp loc_10088C5  +
xor eax eax +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
test esi esi +
jnz loc_10088F2  +
call ds:GetLastError  +
test eax eax +
jnz loc_10088EE  +
push 57h  +
call ds:SetLastError  +
xor eax eax +
jmp loc_1008940  +
cmp dword ptr [esi] 0 +
jnz loc_10088FC  +
xor eax eax +
inc eax  +
jmp loc_1008940  +
push ebx  +
call ds:GetProcessHeap  +
mov ebx eax +
test ebx ebx +
jz loc_1008920  +
push dword ptr [esi]  +
call sub_10085DC  +
cmp eax 0FFFFFFFFh +
jnz loc_1008924  +
push 80004003h  +
call ds:SetLastError  +
xor eax eax +
jmp loc_100893F  +
push eax  +
push 0  +
push dword ptr [esi]  +
call memset  +
add esp 0Ch +
push dword ptr [esi]  +
push 0  +
push ebx  +
call ds:HeapFree  +
and dword ptr [esi] 0 +
pop ebx  +
pop esi  +
pop ebp  +
retn 4  +
***
call __SEH_prolog4  +
mov esi [ebp+arg_0] +
xor edi edi +
cmp esi edi +
jz loc_1008A0F  +
mov eax [esi] +
cmp eax edi +
jz loc_1008A0F  +
cmp [ebp+dwBytes] edi +
jnz loc_100897D  +
push esi  +
call sub_10088CF  +
jmp loc_1008A23  +
push eax  +
call sub_10084ED  +
test eax eax +
jnz loc_100898E  +
mov [esi] edi +
jmp loc_1008A21  +
call ds:GetProcessHeap  +
cmp eax edi +
jz loc_1008A21  +
mov [ebp+ms_exc.disabled] edi +
push [ebp+dwBytes]  +
push dword ptr [esi]  +
push 0Ch  +
push eax  +
call ds:HeapReAlloc  +
cmp eax edi +
jnz loc_10089CC  +
call ds:GetLastError  +
test eax eax +
jnz loc_10089C3  +
push 8  +
call ds:SetLastError  +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
jmp loc_1008A21  +
mov [esi] eax +
mov [ebp+ms_exc.disabled] 0FFFFFFFEh +
xor eax eax +
inc eax  +
jmp loc_1008A23  +
mov eax [ebp-14h] +
mov eax [eax] +
mov eax [eax] +
mov [ebp-1Ch] eax +
xor eax eax +
inc eax  +
retn   +
mov esp [ebp-18h] +
cmp dword ptr [ebp-1Ch] 0C0000017h +
jz loc_10089B1  +
cmp dword ptr [ebp-1Ch] 0C0000005h +
jnz loc_10089B1  +
push 570h  +
call ds:SetLastError  +
call sub_1008103  +
jmp loc_10089C3  +
call ds:GetLastError  +
test eax eax +
jnz loc_1008A21  +
push 57h  +
call ds:SetLastError  +
xor eax eax +
call __SEH_epilog4  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_4] +
xor eax eax +
test edx edx +
jz loc_1008A46  +
cmp edx 7FFFFFFFh +
jbe loc_1008A4B  +
mov eax 80070057h +
test eax eax +
jl loc_1008A61  +
mov eax [ebp+arg_8] +
mov ecx [ebp+arg_0] +
push 7FFFFFFEh  +
push 0  +
call sub_1008629  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_4] +
xor eax eax +
test edx edx +
jz loc_1008A80  +
cmp edx 7FFFFFFFh +
jbe loc_1008A85  +
mov eax 80070057h +
test eax eax +
jl loc_1008A9B  +
mov eax [ebp+arg_8] +
mov ecx [ebp+arg_0] +
push 7FFFFFFEh  +
push 0  +
call sub_1008678  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_4] +
push ebx  +
xor eax eax +
push edi  +
mov ebx 7FFFFFFFh +
test edx edx +
jz loc_1008ABD  +
cmp edx ebx +
jbe loc_1008AC2  +
mov eax 80070057h +
mov edi [ebp+arg_0] +
test eax eax +
jl loc_1008AF9  +
and [ebp+arg_4] 0 +
xor ecx ecx +
push esi  +
mov esi edx +
mov eax edi +
cmp edx ecx +
jz loc_1008AE6  +
cmp [eax] cx +
jz loc_1008AE2  +
inc eax  +
inc eax  +
dec esi  +
jnz loc_1008AD8  +
cmp esi ecx +
jnz loc_1008AEF  +
mov [ebp+arg_4] 80070057h +
jmp loc_1008AF3  +
mov ecx edx +
sub ecx esi +
mov eax [ebp+arg_4] +
pop esi  +
jmp loc_1008AFB  +
xor ecx ecx +
test eax eax +
jl loc_1008B0F  +
mov eax [ebp+arg_8] +
push ebx  +
sub edx ecx +
push 0  +
lea ecx [edi+ecx*2] +
call sub_1008678  +
pop edi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
cmp [ebp+arg_4] eax +
jz loc_1008B2F  +
cmp [ebp+arg_4] 7FFFFFFFh +
jbe loc_1008B34  +
mov eax 80070057h +
test eax eax +
jl loc_1008B4D  +
mov eax [ebp+arg_4] +
push edi  +
push [ebp+arg_C]  +
mov edi [ebp+arg_0] +
push [ebp+arg_8]  +
push 0  +
call sub_10086CF  +
pop edi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
xor eax eax +
cmp [ebp+arg_4] eax +
jz loc_1008B6B  +
cmp [ebp+arg_4] 7FFFFFFFh +
jbe loc_1008B70  +
mov eax 80070057h +
test eax eax +
jl loc_1008B8A  +
push edi  +
mov edi [ebp+arg_0] +
lea eax [ebp+arg_C] +
push eax  +
push [ebp+arg_8]  +
mov eax [ebp+arg_4] +
push 0  +
call sub_10086CF  +
pop edi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push dword_10103D0  +
call sub_100BBD8  +
cmp eax 1 +
jnz loc_1008C1B  +
push edi  +
push 3  +
push dword_10103D0  +
call sub_100C241  +
mov edi eax +
test edi edi +
jz loc_1008C10  +
push esi  +
lea esi [edi-1] +
push esi  +
push 3  +
push dword_10103D0  +
call sub_100C6C7  +
cmp eax 10000h +
jnz loc_1008C09  +
push esi  +
push 3  +
push dword_10103D0  +
call sub_100C3F9  +
mov [ebp+var_4] eax +
test eax eax +
jz loc_1008C09  +
add eax 0Ch +
push eax  +
call sub_10088CF  +
lea eax [ebp+var_4] +
push eax  +
call sub_10088CF  +
push esi  +
push 3  +
push dword_10103D0  +
call sub_100C20A  +
dec edi  +
dec esi  +
test edi edi +
jnz loc_1008BBF  +
pop esi  +
push offset dword_10103D0  +
call sub_100BC6E  +
pop edi  +
cmp dword_10103CC 1 +
jnz loc_1008C2A  +
call ds:WSACleanup  +
xor eax eax +
inc eax  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push [ebp+arg_8]  +
mov esi [ebp+lpString] +
push 1  +
push [ebp+arg_4]  +
push esi  +
call sub_100880C  +
cmp eax 0FFFFFFFFh +
jnz loc_1008C54  +
xor eax eax +
jmp loc_1008C57  +
lea eax [esi+eax*2] +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
jz loc_1008C94  +
cmp [ebp+arg_4] 0 +
jz loc_1008C94  +
cmp [ebp+arg_8] 0 +
jle loc_1008C94  +
push [ebp+arg_4]  +
push [ebp+arg_8]  +
push [ebp+arg_0]  +
call sub_1008A30  +
test eax eax +
jge loc_1008C9A  +
movzx eax ax +
push eax  +
call ds:SetLastError  +
xor eax eax +
pop ebp  +
retn 0Ch  +
xor eax eax +
inc eax  +
jmp loc_1008C96  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
jz loc_1008CD7  +
cmp [ebp+arg_4] 0 +
jz loc_1008CD7  +
cmp [ebp+arg_8] 0 +
jle loc_1008CD7  +
push [ebp+arg_4]  +
push [ebp+arg_8]  +
push [ebp+arg_0]  +
call sub_1008A6A  +
test eax eax +
jge loc_1008CDD  +
movzx eax ax +
push eax  +
call ds:SetLastError  +
xor eax eax +
pop ebp  +
retn 0Ch  +
xor eax eax +
inc eax  +
jmp loc_1008CD9  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_0] 0 +
jz loc_1008D1A  +
cmp [ebp+arg_4] 0 +
jz loc_1008D1A  +
cmp [ebp+arg_8] 0 +
jle loc_1008D1A  +
push [ebp+arg_4]  +
push [ebp+arg_8]  +
push [ebp+arg_0]  +
call sub_1008AA4  +
test eax eax +
jge loc_1008D20  +
movzx eax ax +
push eax  +
call ds:SetLastError  +
xor eax eax +
pop ebp  +
retn 0Ch  +
xor eax eax +
inc eax  +
jmp loc_1008D1C  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push ebx  +
push esi  +
push edi  +
xor edi edi +
mov [ebp+NumberOfCharsWritten] edi +
cmp [ebp+hConsoleOutput] edi +
jz loc_1008F6F  +
mov ebx [ebp+lpString] +
cmp ebx edi +
jz loc_1008F6F  +
push [ebp+hConsoleOutput]  +
call sub_1008263  +
cmp eax 1 +
jnz loc_1008E5C  +
mov esi ds:__iob_func +
call esi  +
add eax 20h +
cmp [ebp+hConsoleOutput] eax +
jnz loc_1008D73  +
push 0FFFFFFF5h  +
jmp loc_1008D83  +
call esi  +
add eax 40h +
cmp [ebp+hConsoleOutput] eax +
jnz loc_1008E44  +
push 0FFFFFFF4h  +
call ds:GetStdHandle  +
push edi  +
push ebx  +
mov [ebp+hConsoleOutput] eax +
mov [ebp+NumberOfCharsWritten] edi +
call sub_1008332  +
push edi  +
lea ecx [ebp+NumberOfCharsWritten] +
push ecx  +
push eax  +
push ebx  +
push [ebp+hConsoleOutput]  +
mov ebx ds:WriteConsoleW +
mov [ebp+var_10] eax +
call ebx  +
test eax eax +
jz loc_1008DB7  +
mov eax [ebp+var_10] +
cmp eax [ebp+NumberOfCharsWritten] +
jz loc_1008E1C  +
call ds:GetLastError  +
cmp eax 8 +
jnz loc_1008E40  +
mov esi [ebp+lpString] +
push edi  +
push esi  +
call sub_1008332  +
mov [ebp+var_10] eax +
mov [ebp+var_C] edi +
cmp eax edi +
jbe loc_1008E1C  +
mov [ebp+cchWideChar] esi +
mov esi 400h +
mov eax [ebp+var_10] +
sub eax [ebp+var_C] +
mov [ebp+lpString] esi +
cmp eax esi +
ja loc_1008DEE  +
mov [ebp+lpString] eax +
push edi  +
lea eax [ebp+NumberOfCharsWritten] +
push eax  +
push [ebp+lpString]  +
push [ebp+cchWideChar]  +
push [ebp+hConsoleOutput]  +
call ebx  +
test eax eax +
jz loc_1008E24  +
mov eax [ebp+lpString] +
cmp eax [ebp+NumberOfCharsWritten] +
jnz loc_1008E24  +
add [ebp+var_C] esi +
mov eax [ebp+var_C] +
add [ebp+cchWideChar] 800h +
cmp eax [ebp+var_10] +
jb loc_1008DDE  +
xor eax eax +
inc eax  +
jmp loc_1008F83  +
call ds:__iob_func  +
add eax 40h +
push eax  +
call sub_100818A  +
call sub_1008B91  +
push 1  +
call ds:ExitProcess  +
call esi  +
jmp loc_1008E2A  +
call ds:GetLastError  +
test eax eax +
jnz loc_1008F81  +
push 42Bh  +
jmp loc_1008F7B  +
push edi  +
push ebx  +
call sub_1008332  +
push 100h  +
push edi  +
mov esi offset unk_10103E0 +
push esi  +
mov [ebp+var_10] eax +
call memset  +
add esp 0Ch +
mov [ebp+var_C] edi +
cmp [ebp+var_10] edi +
jbe loc_1008E1C  +
mov ebx 0FFh +
mov eax [ebp+var_10] +
mov ecx [ebp+var_C] +
sub eax ecx +
mov [ebp+NumberOfCharsWritten] edi +
mov [ebp+cchWideChar] ebx +
cmp eax ebx +
ja loc_1008E9C  +
mov [ebp+cchWideChar] eax +
mov eax [ebp+lpString] +
lea eax [eax+ecx*2] +
mov [ebp+lpWideCharStr] eax +
push edi  +
push edi  +
push edi  +
push edi  +
push [ebp+cchWideChar]  +
push [ebp+lpWideCharStr]  +
push edi  +
call ds:GetConsoleOutputCP  +
push eax  +
call ds:WideCharToMultiByte  +
mov [ebp+NumberOfCharsWritten] eax +
cmp eax edi +
jz loc_1008EF9  +
cmp eax ebx +
jbe loc_1008F07  +
add eax 0FFFFFF01h +
cmp eax 3 +
jbe loc_1008ED9  +
shr eax 1 +
sub [ebp+cchWideChar] eax +
jmp loc_1008EDC  +
dec [ebp+cchWideChar]  +
mov [ebp+NumberOfCharsWritten] edi +
cmp [ebp+cchWideChar] edi +
jnz loc_1008EA5  +
call ds:GetLastError  +
test eax eax +
jnz loc_1008EF9  +
push 42Bh  +
call ds:SetLastError  +
call ds:__iob_func  +
add eax 20h +
jmp loc_1008E2D  +
cmp eax [ebp+cchWideChar] +
jnb loc_1008F0F  +
mov [ebp+cchWideChar] eax +
push 100h  +
push edi  +
push esi  +
call memset  +
add esp 0Ch +
push edi  +
push edi  +
push ebx  +
push esi  +
push [ebp+cchWideChar]  +
push [ebp+lpWideCharStr]  +
push edi  +
call ds:GetConsoleOutputCP  +
push eax  +
call ds:WideCharToMultiByte  +
mov [ebp+NumberOfCharsWritten] eax +
cmp eax edi +
jz loc_1008EF9  +
mov eax [ebp+cchWideChar] +
add [ebp+var_C] eax +
push esi  +
push offset aS  +
push [ebp+hConsoleOutput]  +
call ds:fprintf  +
push [ebp+hConsoleOutput]  +
call ds:fflush  +
mov eax [ebp+var_C] +
add esp 10h +
cmp [ebp+var_10] eax +
ja loc_1008E87  +
jmp loc_1008E1C  +
call ds:GetLastError  +
test eax eax +
jnz loc_1008F81  +
push 57h  +
call ds:SetLastError  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 48h +
mov eax dword_101003C +
xor eax ebp +
mov [ebp+var_4] eax +
mov ecx [ebp+arg_0] +
xor eax eax +
push esi  +
push edi  +
mov word ptr [ebp+String] ax +
xor esi esi +
lea edi [ebp-22h] +
stos   +
stos   +
xor eax eax +
mov [ebp+var_18] esi +
lea edi [ebp+var_14] +
stos   +
stos   +
stos   +
mov [ebp+var_44] ecx +
mov [ebp+var_28] esi +
mov [ebp+NumberOfBytesRead] esi +
mov [ebp+NumberOfCharsWritten] esi +
mov [ebp+dwMode] esi +
stos   +
mov [ebp+var_40] esi +
cmp ecx esi +
jnz loc_1008FEE  +
call ds:GetLastError  +
test eax eax +
jnz loc_1008FE7  +
push 57h  +
call ds:SetLastError  +
xor eax eax +
jmp loc_10091E9  +
push ebx  +
mov ebx ds:GetStdHandle +
push 0FFFFFFF6h  +
call ebx  +
mov edi eax +
mov [ebp+hConsoleHandle] edi +
cmp edi esi +
jz loc_10091A6  +
cmp edi 0Fh +
jz loc_100901E  +
cmp edi 3 +
jz loc_100901E  +
cmp edi 0FFFFFFFFh +
jz loc_100901E  +
mov [ebp+var_40] 1 +
jmp loc_100903A  +
lea eax [ebp+dwMode] +
push eax  +
push edi  +
call ds:GetConsoleMode  +
push 1  +
push edi  +
call ds:SetConsoleMode  +
test eax eax +
jz loc_10091A6  +
xor eax eax +
mov esi ds:WriteConsoleW +
lea edi [ebp+String] +
stos   +
stos   +
stos   +
xor eax eax +
lea edi [ebp+var_18] +
stos   +
stos   +
stos   +
stos   +
stos   +
mov edi offset aC +
cmp [ebp+var_40] 1 +
push 0  +
lea eax [ebp+NumberOfBytesRead] +
push eax  +
push 1  +
jnz loc_10090AC  +
lea eax [ebp-29h] +
push eax  +
push [ebp+hConsoleHandle]  +
call ds:ReadFile  +
test eax eax +
jz loc_10091A6  +
cmp [ebp+NumberOfBytesRead] 0 +
jz loc_10091AA  +
mov al [ebp+var_29] +
mov [ebp+String] al +
lea eax [ebp+NumberOfBytesRead] +
push eax  +
lea eax [ebp+var_18] +
push eax  +
lea eax [ebp+String] +
push eax  +
mov [ebp+NumberOfBytesRead] 0Ah +
call sub_1008409  +
movzx eax word ptr [ebp+var_18] +
mov [ebp+Buffer] eax +
jmp loc_10090C4  +
lea eax [ebp+Buffer] +
push eax  +
push [ebp+hConsoleHandle]  +
call ds:ReadConsoleW  +
test eax eax +
jz loc_100919A  +
mov eax [ebp+Buffer] +
cmp ax 0Dh +
jz loc_10091AA  +
cmp ax 8 +
jnz loc_1009152  +
cmp [ebp+var_28] 0 +
jz loc_1009058  +
push 8  +
push edi  +
lea eax [ebp+var_18] +
push 0Ah  +
push eax  +
call sub_1008B56  +
add esp 10h +
push 0  +
lea eax [ebp+NumberOfCharsWritten] +
push eax  +
push 1  +
lea eax [ebp+var_18] +
push eax  +
push 0FFFFFFF5h  +
call ebx  +
push eax  +
call esi  +
push 0  +
push edi  +
lea eax [ebp+var_18] +
push 0Ah  +
push eax  +
call sub_1008B56  +
add esp 10h +
push 0  +
lea eax [ebp+NumberOfCharsWritten] +
push eax  +
push 1  +
lea eax [ebp+var_18] +
push eax  +
push 0FFFFFFF5h  +
call ebx  +
push eax  +
call esi  +
push 8  +
push edi  +
lea eax [ebp+var_18] +
push 0Ah  +
push eax  +
call sub_1008B56  +
add esp 10h +
push 0  +
lea eax [ebp+NumberOfCharsWritten] +
push eax  +
push 1  +
lea eax [ebp+var_18] +
push eax  +
push 0FFFFFFF5h  +
call ebx  +
push eax  +
call esi  +
dec [ebp+var_28]  +
jmp loc_1009058  +
mov ecx [ebp+arg_4] +
dec ecx  +
cmp [ebp+var_28] ecx +
jnz loc_100916A  +
push 0  +
lea eax [ebp+NumberOfCharsWritten] +
push eax  +
push 1  +
push offset asc_1001874  +
jmp loc_100918E  +
cmp ax 0Ah +
jz loc_1009058  +
mov edx [ebp+var_28] +
mov ecx [ebp+var_44] +
inc [ebp+var_28]  +
push 0  +
mov [ecx+edx*2] ax +
lea eax [ebp+NumberOfCharsWritten] +
push eax  +
push 1  +
push offset String2  +
push 0FFFFFFF5h  +
call ebx  +
push eax  +
call esi  +
jmp loc_1009058  +
push [ebp+dwMode]  +
push [ebp+hConsoleHandle]  +
call ds:SetConsoleMode  +
xor eax eax +
jmp loc_10091E8  +
push [ebp+dwMode]  +
mov ecx [ebp+var_44] +
mov edx [ebp+var_28] +
push [ebp+hConsoleHandle]  +
xor eax eax +
mov [ecx+edx*2] ax +
call ds:SetConsoleMode  +
push 0Ah  +
push offset asc_100186C  +
lea eax [ebp+var_18] +
push eax  +
call sub_1008CA4  +
push 0  +
lea eax [ebp+NumberOfCharsWritten] +
push eax  +
push 2  +
lea eax [ebp+var_18] +
push eax  +
push 0FFFFFFF5h  +
call ebx  +
push eax  +
call esi  +
xor eax eax +
inc eax  +
pop ebx  +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_10078F9  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+arg_4] 0 +
jnz loc_1009216  +
cmp [ebp+arg_8] 0 +
jnz loc_1009216  +
xor eax eax +
jmp loc_100936A  +
call sub_1007F29  +
test eax eax +
jz loc_100920F  +
push ebx  +
push esi  +
push edi  +
push 3  +
pop esi  +
push esi  +
push dword_10103D0  +
call sub_100C241  +
mov ebx [ebp+arg_0] +
mov edi eax +
cmp edi ebx +
ja loc_1009263  +
push esi  +
push dword_10103D0  +
call sub_100C275  +
test eax eax +
jz loc_100932E  +
mov ecx ebx +
sub ecx edi +
inc ecx  +
push ecx  +
push eax  +
call sub_100C161  +
cmp eax 0FFFFFFFFh +
jz loc_100932E  +
push ebx  +
push esi  +
push dword_10103D0  +
call sub_100C6C7  +
mov edi offset aBuffer +
test eax eax +
jz loc_10092B1  +
push ebx  +
push esi  +
push dword_10103D0  +
call sub_100C3F9  +
mov esi eax +
test esi esi +
jz loc_100932E  +
push 7  +
push edi  +
push esi  +
call ds:_memicmp  +
add esp 0Ch +
test eax eax +
jnz loc_100932E  +
mov ebx [ebp+arg_4] +
test ebx ebx +
jnz loc_10092F0  +
mov edi [ebp+arg_8] +
jmp loc_10092FB  +
push 10h  +
call sub_1008533  +
mov esi eax +
mov [ebp+arg_0] esi +
test esi esi +
jz loc_100932E  +
and dword ptr [esi+8] 0 +
and dword ptr [esi+0Ch] 0 +
push 7  +
push edi  +
push esi  +
call sub_1008C61  +
push esi  +
push ebx  +
push 3  +
push dword_10103D0  +
call sub_100C5F4  +
test eax eax +
jnz loc_1009290  +
lea eax [ebp+arg_0] +
push eax  +
call sub_10088CF  +
jmp loc_100932E  +
push 0  +
push ebx  +
call sub_1008332  +
mov edi eax +
inc edi  +
mov eax [esi+8] +
cmp edi eax +
ja loc_1009311  +
cmp edi 100h +
jbe loc_1009328  +
lea ecx [edi+edi] +
cmp ecx eax +
jnb loc_1009328  +
test eax eax +
lea eax [edi+edi] +
push eax  +
jnz loc_1009332  +
call sub_1008533  +
mov [esi+0Ch] eax +
test eax eax +
jz loc_100932E  +
mov [esi+8] edi +
cmp dword ptr [esi+0Ch] 0 +
jnz loc_100933D  +
xor eax eax +
jmp loc_1009367  +
lea eax [esi+0Ch] +
push eax  +
call sub_100894A  +
jmp loc_1009321  +
test ebx ebx +
jz loc_100934D  +
push edi  +
push ebx  +
push dword ptr [esi+0Ch]  +
call sub_1008CA4  +
jmp loc_1009364  +
cmp [ebp+arg_C] 1 +
jnz loc_1009364  +
lea eax [edi+edi] +
push eax  +
push 0  +
push dword ptr [esi+0Ch]  +
call memset  +
add esp 0Ch +
mov eax [esi+0Ch] +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
mov eax dword_101003C +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_4] +
push ebx  +
mov ebx [ebp+lpString] +
push esi  +
push edi  +
mov esi offset asc_1001880 +
lea edi [ebp+var_C] +
movs   +
mov [ebp+lpStart] eax +
xor eax eax +
mov [ebp+var_18] eax +
mov [ebp+var_14] eax +
movs   +
cmp ebx eax +
jz loc_1009470  +
push eax  +
push ebx  +
call sub_1008332  +
test eax eax +
jz loc_1009470  +
cmp [ebp+lpStart] 0 +
jz loc_10093CF  +
push 0  +
push [ebp+lpStart]  +
call sub_1008332  +
test eax eax +
jnz loc_10093D5  +
lea eax [ebp+var_C] +
mov [ebp+lpStart] eax +
mov edi [ebp+arg_8] +
mov esi ebx +
cmp edi 3 +
jz loc_10093E4  +
cmp edi 1 +
jnz loc_1009406  +
cmp word ptr [ebx] 0 +
jz loc_1009403  +
movzx eax word ptr [esi] +
push eax  +
push [ebp+lpStart]  +
call ds:StrChrW  +
test eax eax +
jz loc_1009403  +
inc esi  +
inc esi  +
cmp word ptr [esi] 0 +
jnz loc_10093EA  +
mov [ebp+var_18] esi +
cmp edi 3 +
jz loc_1009410  +
cmp edi 2 +
jnz loc_1009452  +
cmp edi 2 +
jnz loc_1009417  +
mov esi ebx +
movzx eax word ptr [esi] +
test ax ax +
jz loc_1009452  +
push eax  +
push [ebp+lpStart]  +
call ds:StrChrW  +
test eax eax +
jz loc_1009438  +
cmp [ebp+var_14] 0 +
jnz loc_100943C  +
mov [ebp+var_14] esi +
jmp loc_100943C  +
and [ebp+var_14] 0 +
inc esi  +
inc esi  +
movzx eax word ptr [esi] +
test ax ax +
jnz loc_100941F  +
mov eax [ebp+var_14] +
test eax eax +
jz loc_1009452  +
xor ecx ecx +
mov [eax] cx +
cmp [ebp+var_18] ebx +
jbe loc_100946C  +
push 0  +
push [ebp+var_18]  +
call sub_1008332  +
inc eax  +
push eax  +
push [ebp+var_18]  +
push ebx  +
call sub_1008CA4  +
mov eax ebx +
jmp loc_1009475  +
mov eax offset dword_100185C +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_10078F9  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
xor edi edi +
cmp esi edi +
jz loc_10094CD  +
cmp [ebp+arg_4] edi +
jz loc_10094CD  +
push [ebp+arg_C]  +
push offset dword_100185C  +
push esi  +
call sub_1008CA4  +
cmp [ebp+arg_8] edi +
jbe loc_10094C9  +
push [ebp+arg_C]  +
push [ebp+arg_4]  +
push esi  +
call sub_1008CE7  +
test eax eax +
jz loc_10094C9  +
inc edi  +
cmp edi [ebp+arg_8] +
jb loc_10094B3  +
mov eax esi +
jmp loc_10094E4  +
call ds:GetLastError  +
test eax eax +
jnz loc_10094DF  +
push 57h  +
call ds:SetLastError  +
mov eax offset dword_100185C +
pop edi  +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
xor esi esi +
cmp [ebp+arg_4] esi +
jnz loc_1009512  +
call ds:GetLastError  +
test eax eax +
jnz loc_100950E  +
push 57h  +
call ds:SetLastError  +
xor eax eax +
jmp loc_1009579  +
cmp [ebp+arg_0] esi +
jnz loc_1009524  +
push [ebp+arg_4]  +
call sub_100809C  +
xor eax eax +
inc eax  +
jmp loc_1009579  +
push edi  +
push 1  +
add esi 100h +
push esi  +
push 0  +
push 5  +
call sub_10091FE  +
mov edi eax +
test edi edi +
jz loc_1009564  +
lea eax [ebp+arg_8] +
push eax  +
push [ebp+arg_4]  +
push esi  +
push edi  +
call sub_1008B1A  +
cmp eax 8007007Ah +
jz loc_1009525  +
test eax eax +
jge loc_1009572  +
movzx eax ax +
push eax  +
call ds:SetLastError  +
xor eax eax +
jmp loc_1009578  +
call ds:GetLastError  +
test eax eax +
jnz loc_1009560  +
push 8  +
jmp loc_100955A  +
push edi  +
call sub_100809C  +
pop edi  +
pop esi  +
pop ebp  +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
and [ebp+Error] 0 +
push ebx  +
push esi  +
push 1  +
mov esi 100h +
push esi  +
push 0  +
push 0  +
call sub_10091FE  +
mov ebx eax +
test ebx ebx +
jnz loc_10095A9  +
push 8  +
pop eax  +
jmp loc_10095EB  +
push 1  +
push esi  +
push 0  +
push 1  +
call sub_10091FE  +
mov esi eax +
test esi esi +
jz loc_10095A4  +
push esi  +
call sub_10085DC  +
shr eax 1 +
dec eax  +
push eax  +
push esi  +
push ebx  +
call sub_10085DC  +
shr eax 1 +
dec eax  +
push eax  +
push ebx  +
lea eax [ebp+Error] +
push eax  +
call WNetGetLastErrorW  +
test eax eax +
jnz loc_10095EB  +
push ebx  +
call sub_100809C  +
test eax eax +
jz loc_10095A4  +
mov eax [ebp+Error] +
pop esi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
xor ebx ebx +
mov [ebp+lpString] ebx +
cmp [ebp+dwMessageId] ebx +
jnz loc_1009621  +
call ds:GetLastError  +
test eax eax +
jnz loc_1009617  +
push 57h  +
call ds:SetLastError  +
mov eax offset dword_100185C +
jmp loc_100972E  +
call sub_1007F29  +
test eax eax +
jz loc_1009617  +
push esi  +
push 1  +
push dword_10103D0  +
call sub_100C241  +
mov esi eax +
cmp esi [ebp+arg_8] +
ja loc_100967E  +
push 1  +
push dword_10103D0  +
call sub_100C275  +
cmp eax ebx +
jz loc_1009662  +
mov ecx [ebp+arg_8] +
sub ecx esi +
inc ecx  +
push ecx  +
push eax  +
call sub_100C161  +
cmp eax 0FFFFFFFFh +
jnz loc_100967E  +
call ds:GetLastError  +
test eax eax +
jnz loc_1009674  +
push 8  +
call ds:SetLastError  +
mov eax offset dword_100185C +
jmp loc_100972D  +
mov esi 80h +
push edi  +
push 1  +
add esi esi +
push esi  +
push ebx  +
push 4  +
call sub_10091FE  +
mov edi eax +
cmp edi ebx +
jz loc_10096F2  +
push esi  +
push edi  +
push [ebp+dwMessageId]  +
push [ebp+lpSource]  +
call ds:LoadStringW  +
cmp eax ebx +
jnz loc_10096D5  +
call ds:GetLastError  +
cmp eax 716h +
jnz loc_1009704  +
push ebx  +
push ebx  +
lea eax [ebp+lpString] +
push eax  +
push ebx  +
push [ebp+dwMessageId]  +
push [ebp+lpSource]  +
push 0B00h  +
call ds:FormatMessageW  +
cmp eax ebx +
jz loc_1009704  +
mov edi [ebp+lpString] +
lea ecx [esi-1] +
cmp eax ecx +
jnb loc_1009684  +
push ebx  +
push edi  +
push [ebp+arg_8]  +
push 1  +
push dword_10103D0  +
call sub_100C62E  +
test eax eax +
jnz loc_100970B  +
call ds:GetLastError  +
test eax eax +
jnz loc_1009704  +
push 8  +
call ds:SetLastError  +
mov eax offset dword_100185C +
jmp loc_100972C  +
cmp [ebp+lpString] ebx +
jz loc_100971C  +
push [ebp+lpString]  +
call ds:LocalFree  +
mov [ebp+lpString] ebx +
push [ebp+arg_8]  +
push 1  +
push dword_10103D0  +
call sub_100C430  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push ebx  +
xor ebx ebx +
push esi  +
push edi  +
mov [ebp+var_4] ebx +
cmp [ebp+lpString] ebx +
jz loc_10098DD  +
push ebx  +
push [ebp+lpString]  +
call sub_1008332  +
test eax eax +
jz loc_10098DD  +
call sub_1007F29  +
test eax eax +
jz loc_10098EF  +
call sub_1007F29  +
test eax eax +
jz loc_1009897  +
push 3  +
pop esi  +
push esi  +
push dword_10103D0  +
call sub_100C241  +
mov edi eax +
cmp edi ebx +
ja loc_10097BA  +
push esi  +
push dword_10103D0  +
call sub_100C275  +
cmp eax ebx +
jz loc_1009897  +
xor ecx ecx +
inc ecx  +
sub ecx edi +
push ecx  +
push eax  +
call sub_100C161  +
cmp eax 0FFFFFFFFh +
jz loc_1009897  +
push ebx  +
push esi  +
push dword_10103D0  +
call sub_100C6C7  +
mov edi offset aBuffer +
test eax eax +
jz loc_1009832  +
push ebx  +
push esi  +
push dword_10103D0  +
call sub_100C3F9  +
mov esi eax +
cmp esi ebx +
jz loc_1009897  +
push 7  +
push edi  +
push esi  +
call ds:_memicmp  +
add esp 0Ch +
test eax eax +
jnz loc_1009897  +
push ebx  +
push [ebp+lpString]  +
call sub_1008332  +
mov edi eax +
mov eax [esi+8] +
inc edi  +
cmp edi eax +
ja loc_100981E  +
cmp edi 100h +
jbe loc_100987F  +
lea ecx [edi+edi] +
cmp ecx eax +
jnb loc_100987F  +
cmp eax ebx +
lea eax [edi+edi] +
push eax  +
jnz loc_100986F  +
call sub_1008533  +
mov [esi+0Ch] eax +
cmp eax ebx +
jmp loc_100987A  +
push 10h  +
call sub_1008533  +
mov esi eax +
mov [ebp+var_8] esi +
cmp esi ebx +
jz loc_1009897  +
push 7  +
push edi  +
mov [esi+8] ebx +
push esi  +
mov [esi+0Ch] ebx +
call sub_1008C61  +
push esi  +
push ebx  +
push 3  +
push dword_10103D0  +
call sub_100C5F4  +
test eax eax +
jnz loc_10097E7  +
lea eax [ebp+var_8] +
push eax  +
call sub_10088CF  +
jmp loc_1009897  +
lea eax [esi+0Ch] +
push eax  +
call sub_100894A  +
test eax eax +
jz loc_1009897  +
mov [esi+8] edi +
cmp [esi+0Ch] ebx +
jz loc_1009897  +
push edi  +
push [ebp+lpString]  +
push dword ptr [esi+0Ch]  +
call sub_1008CA4  +
mov esi [esi+0Ch] +
cmp esi ebx +
jnz loc_10098A5  +
call ds:GetLastError  +
test eax eax +
jnz loc_10098EF  +
push 8  +
jmp loc_10098E9  +
mov edi ds:_errno +
call edi  +
mov [eax] ebx +
lea eax [ebp+var_4] +
push eax  +
push esi  +
call ds:wcstod  +
fstp  qword ptr [ebp-0Ch] +
pop ecx  +
pop ecx  +
call edi  +
cmp dword ptr [eax] 22h +
jz loc_10098DD  +
cmp [ebp+var_4] ebx +
jz loc_10098D8  +
push ebx  +
push [ebp+var_4]  +
call sub_1008332  +
test eax eax +
jnz loc_10098DD  +
fld  qword ptr [ebp-0Ch] +
jmp loc_10098F1  +
call ds:GetLastError  +
test eax eax +
jnz loc_10098EF  +
push 57h  +
call ds:SetLastError  +
fldz   +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+lpString]  +
call sub_1009738  +
fstp  st +
call ds:GetLastError  +
neg eax  +
sbb eax eax +
inc eax  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax [ebp+arg_4] +
push ebx  +
xor ebx ebx +
add eax 0FFFFFFFEh +
push esi  +
push edi  +
mov [ebp+var_4] ebx +
cmp eax 22h +
ja loc_1009AE6  +
cmp [ebp+lpString] ebx +
jz loc_1009AE6  +
call sub_1007F29  +
test eax eax +
jz loc_1009AF8  +
call sub_1007F29  +
test eax eax +
jz loc_1009A7C  +
push 3  +
pop esi  +
push esi  +
push dword_10103D0  +
call sub_100C241  +
mov edi eax +
cmp edi ebx +
ja loc_100999F  +
push esi  +
push dword_10103D0  +
call sub_100C275  +
cmp eax ebx +
jz loc_1009A7C  +
xor ecx ecx +
inc ecx  +
sub ecx edi +
push ecx  +
push eax  +
call sub_100C161  +
cmp eax 0FFFFFFFFh +
jz loc_1009A7C  +
push ebx  +
push esi  +
push dword_10103D0  +
call sub_100C6C7  +
mov edi offset aBuffer +
test eax eax +
jz loc_1009A17  +
push ebx  +
push esi  +
push dword_10103D0  +
call sub_100C3F9  +
mov esi eax +
cmp esi ebx +
jz loc_1009A7C  +
push 7  +
push edi  +
push esi  +
call ds:_memicmp  +
add esp 0Ch +
test eax eax +
jnz loc_1009A7C  +
push ebx  +
push [ebp+lpString]  +
call sub_1008332  +
mov edi eax +
mov eax [esi+8] +
inc edi  +
cmp edi eax +
ja loc_1009A03  +
cmp edi 100h +
jbe loc_1009A64  +
lea ecx [edi+edi] +
cmp ecx eax +
jnb loc_1009A64  +
cmp eax ebx +
lea eax [edi+edi] +
push eax  +
jnz loc_1009A54  +
call sub_1008533  +
mov [esi+0Ch] eax +
cmp eax ebx +
jmp loc_1009A5F  +
push 10h  +
call sub_1008533  +
mov esi eax +
mov [ebp+var_8] esi +
cmp esi ebx +
jz loc_1009A7C  +
push 7  +
push edi  +
mov [esi+8] ebx +
push esi  +
mov [esi+0Ch] ebx +
call sub_1008C61  +
push esi  +
push ebx  +
push 3  +
push dword_10103D0  +
call sub_100C5F4  +
test eax eax +
jnz loc_10099CC  +
lea eax [ebp+var_8] +
push eax  +
call sub_10088CF  +
jmp loc_1009A7C  +
lea eax [esi+0Ch] +
push eax  +
call sub_100894A  +
test eax eax +
jz loc_1009A7C  +
mov [esi+8] edi +
cmp [esi+0Ch] ebx +
jz loc_1009A7C  +
push edi  +
push [ebp+lpString]  +
push dword ptr [esi+0Ch]  +
call sub_1008CA4  +
mov esi [esi+0Ch] +
cmp esi ebx +
jnz loc_1009A8A  +
call ds:GetLastError  +
test eax eax +
jnz loc_1009AF8  +
push 8  +
jmp loc_1009AF2  +
push 3  +
push ebx  +
push esi  +
call sub_1009373  +
push ebx  +
push esi  +
call sub_1008332  +
test eax eax +
jz loc_1009AE6  +
mov edi ds:_errno +
call edi  +
push [ebp+arg_4]  +
mov [eax] ebx +
cmp word ptr [esi] 2Dh +
lea eax [ebp+var_4] +
push eax  +
push esi  +
jnz loc_1009ABE  +
call ds:wcstol  +
jmp loc_1009AC4  +
call ds:wcstoul  +
add esp 0Ch +
mov esi eax +
call edi  +
cmp dword ptr [eax] 22h +
jz loc_1009AE6  +
cmp [ebp+var_4] ebx +
jz loc_1009AE2  +
push ebx  +
push [ebp+var_4]  +
call sub_1008332  +
test eax eax +
jnz loc_1009AE6  +
mov eax esi +
jmp loc_1009AFA  +
call ds:GetLastError  +
test eax eax +
jnz loc_1009AF8  +
push 57h  +
call ds:SetLastError  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
mov eax [ebp+arg_4] +
push ebx  +
xor ebx ebx +
add eax 0FFFFFFFEh +
push esi  +
push edi  +
mov [ebp+var_4] ebx +
cmp eax 22h +
ja loc_1009CC9  +
cmp [ebp+lpString] ebx +
jz loc_1009CC9  +
call sub_1007F29  +
test eax eax +
jz loc_1009C55  +
push 3  +
pop esi  +
push esi  +
push dword_10103D0  +
call sub_100C241  +
mov edi eax +
cmp edi ebx +
ja loc_1009B78  +
push esi  +
push dword_10103D0  +
call sub_100C275  +
cmp eax ebx +
jz loc_1009C55  +
xor ecx ecx +
inc ecx  +
sub ecx edi +
push ecx  +
push eax  +
call sub_100C161  +
cmp eax 0FFFFFFFFh +
jz loc_1009C55  +
push ebx  +
push esi  +
push dword_10103D0  +
call sub_100C6C7  +
mov edi offset aBuffer +
test eax eax +
jz loc_1009BF0  +
push ebx  +
push esi  +
push dword_10103D0  +
call sub_100C3F9  +
mov esi eax +
cmp esi ebx +
jz loc_1009C55  +
push 7  +
push edi  +
push esi  +
call ds:_memicmp  +
add esp 0Ch +
test eax eax +
jnz loc_1009C55  +
push ebx  +
push [ebp+lpString]  +
call sub_1008332  +
mov edi eax +
mov eax [esi+8] +
inc edi  +
cmp edi eax +
ja loc_1009BDC  +
cmp edi 100h +
jbe loc_1009C3D  +
lea ecx [edi+edi] +
cmp ecx eax +
jnb loc_1009C3D  +
cmp eax ebx +
lea eax [edi+edi] +
push eax  +
jnz loc_1009C2D  +
call sub_1008533  +
mov [esi+0Ch] eax +
cmp eax ebx +
jmp loc_1009C38  +
push 10h  +
call sub_1008533  +
mov esi eax +
mov [ebp+var_8] esi +
cmp esi ebx +
jz loc_1009C55  +
push 7  +
push edi  +
mov [esi+8] ebx +
push esi  +
mov [esi+0Ch] ebx +
call sub_1008C61  +
push esi  +
push ebx  +
push 3  +
push dword_10103D0  +
call sub_100C5F4  +
test eax eax +
jnz loc_1009BA5  +
lea eax [ebp+var_8] +
push eax  +
call sub_10088CF  +
jmp loc_1009C55  +
lea eax [esi+0Ch] +
push eax  +
call sub_100894A  +
test eax eax +
jz loc_1009C55  +
mov [esi+8] edi +
cmp [esi+0Ch] ebx +
jz loc_1009C55  +
push edi  +
push [ebp+lpString]  +
push dword ptr [esi+0Ch]  +
call sub_1008CA4  +
mov esi [esi+0Ch] +
cmp esi ebx +
jnz loc_1009C63  +
call ds:GetLastError  +
test eax eax +
jnz loc_1009CDB  +
push 8  +
jmp loc_1009CD5  +
push 3  +
push ebx  +
push esi  +
call sub_1009373  +
push ebx  +
push esi  +
call sub_1008332  +
test eax eax +
jz loc_1009CDB  +
cmp [ebp+arg_8] ebx +
jnz loc_1009C82  +
cmp word ptr [esi] 2Dh +
jz loc_1009CDB  +
mov edi ds:_errno +
call edi  +
cmp [ebp+arg_8] 1 +
push [ebp+arg_4]  +
mov [eax] ebx +
lea eax [ebp+var_4] +
push eax  +
push esi  +
jnz loc_1009CA2  +
call ds:wcstol  +
jmp loc_1009CA8  +
call ds:wcstoul  +
add esp 0Ch +
call edi  +
cmp dword ptr [eax] 22h +
jz loc_1009CDB  +
cmp [ebp+var_4] ebx +
jz loc_1009CC4  +
push ebx  +
push [ebp+var_4]  +
call sub_1008332  +
test eax eax +
jnz loc_1009CDB  +
xor eax eax +
inc eax  +
jmp loc_1009CDD  +
call ds:GetLastError  +
test eax eax +
jnz loc_1009CDB  +
push 57h  +
call ds:SetLastError  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
xor ebx ebx +
push esi  +
push edi  +
cmp dword ptr [ebp+arg_0] ebx +
jz loc_1009DA7  +
cmp dword ptr [ebp+lpString] ebx +
jz loc_1009DA7  +
push ebx  +
push dword ptr [ebp+lpString]  +
call sub_1008332  +
mov edi eax +
push 1  +
add edi 4 +
push edi  +
push ebx  +
push ebx  +
call sub_10091FE  +
mov [ebp+var_8] eax +
cmp eax ebx +
jnz loc_1009D38  +
call ds:GetLastError  +
test eax eax +
jnz loc_1009DB9  +
push 8  +
jmp loc_1009DB3  +
push ebx  +
push dword ptr [ebp+arg_0]  +
call sub_1008332  +
mov esi eax +
push 1  +
add esi 4 +
push esi  +
push ebx  +
push 1  +
call sub_10091FE  +
mov [ebp+var_4] eax +
cmp eax ebx +
jz loc_1009D26  +
push dword ptr [ebp+lpString]  +
mov ebx offset aS_0 +
push ebx  +
push edi  +
push [ebp+var_8]  +
call sub_1008B56  +
add esp 10h +
test eax eax +
jge loc_1009D77  +
movzx eax ax +
push eax  +
jmp loc_1009DB3  +
push dword ptr [ebp+arg_0]  +
push ebx  +
push esi  +
push [ebp+var_4]  +
call sub_1008B56  +
add esp 10h +
test eax eax +
jl loc_1009D71  +
push 0  +
push [ebp+arg_8]  +
push [ebp+var_4]  +
push [ebp+var_8]  +
call sub_100880C  +
xor ecx ecx +
cmp eax 0FFFFFFFFh +
setnz cl  +
mov eax ecx +
jmp loc_1009DBB  +
call ds:GetLastError  +
test eax eax +
jnz loc_1009DB9  +
push 57h  +
call ds:SetLastError  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
mov eax dword_101003C +
xor eax ebp +
mov [ebp+var_4] eax +
mov ecx [ebp+arg_0] +
push esi  +
push edi  +
xor esi esi +
xor eax eax +
lea edi [ebp+var_8] +
mov dword ptr [ebp+String] esi +
mov [ebp+var_18] ecx +
stos   +
cmp ecx esi +
jnz loc_1009E0D  +
call ds:GetLastError  +
test eax eax +
jnz loc_1009E03  +
push 57h  +
call ds:SetLastError  +
mov eax offset dword_100185C +
jmp loc_1009F1A  +
push ecx  +
call sub_1008894  +
mov [ebp+var_14] eax +
cmp eax [ebp+arg_4] +
ja loc_1009E1E  +
mov eax [ebp+arg_4] +
push ebx  +
xor ebx ebx +
inc ebx  +
push ebx  +
lea edi [eax+0Ah] +
push edi  +
push esi  +
push esi  +
call sub_10091FE  +
mov [ebp+var_10] eax +
cmp eax esi +
jz loc_1009E4C  +
mov eax [ebp+arg_4] +
cmp [ebp+var_14] eax +
jnb loc_1009EA7  +
push ebx  +
push edi  +
push esi  +
push ebx  +
call sub_10091FE  +
mov esi eax +
test esi esi +
jnz loc_1009E68  +
call ds:GetLastError  +
test eax eax +
jnz loc_1009E5E  +
push 8  +
call ds:SetLastError  +
mov eax offset dword_100185C +
jmp loc_1009F19  +
mov eax [ebp+arg_4] +
sub eax [ebp+var_14] +
push edi  +
push eax  +
push offset asc_100139C  +
push esi  +
call sub_100948B  +
push edi  +
cmp [ebp+arg_8] ebx +
jnz loc_1009E90  +
push esi  +
push [ebp+var_10]  +
call sub_1008CA4  +
push edi  +
push [ebp+var_18]  +
jmp loc_1009E9D  +
push [ebp+var_18]  +
push [ebp+var_10]  +
call sub_1008CA4  +
push edi  +
push esi  +
push [ebp+var_10]  +
call sub_1008CE7  +
jmp loc_1009F06  +
xor ebx ebx +
cmp eax esi +
jbe loc_1009F06  +
mov eax [ebp+var_18] +
mov [ebp+var_14] eax +
push 2  +
push [ebp+var_14]  +
lea eax [ebp+String] +
push eax  +
call sub_1008CA4  +
lea eax [ebp+String] +
push eax  +
call sub_1008894  +
mov esi eax +
add esi ebx +
cmp esi [ebp+arg_4] +
ja loc_1009EEB  +
push edi  +
lea eax [ebp+String] +
push eax  +
push [ebp+var_10]  +
call sub_1008CE7  +
add [ebp+var_14] 2 +
mov ebx esi +
cmp esi [ebp+arg_4] +
jb loc_1009EB3  +
cmp ebx [ebp+arg_4] +
jnb loc_1009F06  +
mov esi [ebp+arg_4] +
sub esi ebx +
push edi  +
push offset asc_100139C  +
push [ebp+var_10]  +
call sub_1008CE7  +
dec esi  +
jnz loc_1009EF5  +
mov eax [ebp+arg_4] +
inc eax  +
push eax  +
push [ebp+var_10]  +
push [ebp+var_18]  +
call sub_1008CA4  +
mov eax [ebp+var_18] +
pop ebx  +
mov ecx [ebp+var_4] +
pop edi  +
xor ecx ebp +
pop esi  +
call sub_10078F9  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
xor ebx ebx +
push edi  +
cmp [ebp+lpString] ebx +
jz loc_100A036  +
cmp [ebp+hConsoleOutput] ebx +
jz loc_100A036  +
cmp [ebp+arg_4] ebx +
jnz loc_1009F61  +
push [ebp+lpString]  +
push [ebp+hConsoleOutput]  +
call sub_1008D2A  +
jmp loc_100A04A  +
cmp [ebp+arg_8] ebx +
jnz loc_1009FF6  +
or [ebp+var_8] 0FFFFFFFFh +
lea eax [ebp+arg_10] +
mov [ebp+Arguments] eax +
xor eax eax +
cmp [ebp+var_8] 0FFFFFFFFh +
push 1  +
setnz al  +
dec eax  +
and eax 800h +
add eax 800h +
add ebx eax +
push ebx  +
push 0  +
push 3  +
call sub_10091FE  +
mov edi eax +
test edi edi +
jz loc_1009FE3  +
lea eax [ebp+Arguments] +
push eax  +
lea eax [ebx-1] +
push eax  +
push edi  +
push 0  +
push 0  +
push [ebp+lpString]  +
push 400h  +
call ds:FormatMessageW  +
mov [ebp+var_8] eax +
test eax eax +
jnz loc_1009FD3  +
call ds:GetLastError  +
test eax eax +
jz loc_1009FF1  +
call ds:GetLastError  +
cmp eax 7Ah +
jnz loc_100A048  +
and [ebp+Arguments] 0 +
cmp [ebp+var_8] 0 +
jz loc_1009F6E  +
push edi  +
jmp loc_1009F54  +
call ds:GetLastError  +
test eax eax +
jnz loc_100A048  +
push 8  +
jmp loc_100A042  +
xor eax eax +
inc eax  +
jmp loc_100A04A  +
push 1  +
add ebx 800h +
push ebx  +
push 0  +
lea eax [ebp+arg_10] +
push 3  +
mov [ebp+Arguments] eax +
call sub_10091FE  +
mov edi eax +
test edi edi +
jz loc_1009FE3  +
push [ebp+Arguments]  +
push [ebp+lpString]  +
push ebx  +
push edi  +
call sub_1008B1A  +
and [ebp+Arguments] 0 +
cmp eax 8007007Ah +
jz loc_1009FF6  +
test eax eax +
jge loc_1009FDD  +
movzx eax ax +
push eax  +
jmp loc_100A042  +
call ds:GetLastError  +
test eax eax +
jnz loc_100A048  +
push 57h  +
call ds:SetLastError  +
xor eax eax +
pop edi  +
pop ebx  +
leave   +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
inc dword_10103DC  +
mov eax dword_10103DC +
push 0Ah  +
pop ecx  +
xor edx edx +
div  ecx +
add edx 4 +
push edx  +
push [ebp+dwMessageId]  +
push [ebp+lpSource]  +
call sub_10095F4  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+dwMessageId]  +
push 0  +
call sub_100A053  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
test esi esi +
jz loc_100A116  +
test [ebp+arg_4] 0F0000h +
jz loc_100A116  +
test [ebp+arg_4] 10000h +
jz loc_100A0BE  +
call sub_1008103  +
mov al byte ptr [ebp+arg_4] +
push ebx  +
xor ebx ebx +
inc ebx  +
test al bl +
jz loc_100A0D0  +
push 1389h  +
jmp loc_100A0EF  +
test al 4 +
jz loc_100A0DB  +
push 138Ah  +
jmp loc_100A0EF  +
test al 2 +
jz loc_100A0E6  +
push 138Ch  +
jmp loc_100A0EF  +
test al 8 +
jz loc_100A105  +
push 138Bh  +
call sub_100A082  +
push eax  +
push offset aS_1  +
push ebx  +
push ebx  +
push esi  +
call sub_1009F2F  +
add esp 14h +
call sub_1008070  +
push eax  +
push esi  +
call sub_1008D2A  +
mov eax ebx +
pop ebx  +
jmp loc_100A12A  +
call ds:GetLastError  +
test eax eax +
jnz loc_100A128  +
push 57h  +
call ds:SetLastError  +
xor eax eax +
pop esi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
cmp [ebp+lpString1] 0 +
jnz loc_100A155  +
call ds:GetLastError  +
test eax eax +
jnz loc_100A151  +
push 57h  +
call ds:SetLastError  +
xor eax eax +
jmp loc_100A17A  +
push 0  +
push [ebp+lpString1]  +
call sub_1008332  +
cmp eax 2 +
jbe loc_100A151  +
push 2  +
push 1  +
push offset Str2  +
push [ebp+lpString1]  +
call sub_1008353  +
neg eax  +
sbb eax eax +
inc eax  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push ebx  +
push esi  +
xor esi esi +
push edi  +
mov [ebp+var_4] esi +
cmp [ebp+lpString] esi +
jz loc_100A214  +
push [ebp+lpString]  +
call ds:lstrlenW  +
test eax eax +
jz loc_100A214  +
push esi  +
push esi  +
push [ebp+lpString]  +
push 10h  +
call sub_10091FE  +
cmp eax esi +
jnz loc_100A1C3  +
call ds:GetLastError  +
test eax eax +
jnz loc_100A21F  +
push 8  +
jmp loc_100A219  +
mov esi ds:wcstok +
mov edi offset a_ +
push edi  +
push eax  +
call esi  +
mov ebx eax +
pop ecx  +
pop ecx  +
test ebx ebx +
jz loc_100A214  +
push 0  +
push 0Ah  +
push ebx  +
call sub_1009B06  +
test eax eax +
jz loc_100A21F  +
push 0Ah  +
push ebx  +
call sub_1009920  +
cmp eax 0FFh +
ja loc_100A21F  +
cmp [ebp+var_4] 4 +
inc [ebp+var_4]  +
push edi  +
push 0  +
call esi  +
mov ebx eax +
pop ecx  +
pop ecx  +
test ebx ebx +
jnz loc_100A1DA  +
cmp [ebp+var_4] 4 +
jnz loc_100A214  +
inc eax  +
jmp loc_100A221  +
push 254Fh  +
call ds:SetLastError  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0A08h +
mov eax dword_101003C +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_0] +
mov edx [ebp+arg_4] +
push ebx  +
mov ebx [ebp+arg_8] +
push esi  +
push edi  +
xor esi esi +
mov [ebp+var_9E4] eax +
push 7  +
xor eax eax +
pop ecx  +
lea edi [ebp+var_A04] +
mov [ebp+var_A08] esi +
mov [ebp+var_9E8] edx +
mov [ebp+var_9E0] esi +
mov [ebp+var_9DC] esi +
stos   +
mov [ebp+var_46] ax +
cmp [ebp+var_9E4] esi +
jz loc_100A3B1  +
cmp ebx esi +
jz loc_100A3B1  +
mov eax [ebx] +
cmp eax esi +
jz loc_100A2AA  +
cmp eax 2 +
jb loc_100A3B1  +
cmp edx esi +
jz loc_100A3B1  +
cmp dword_10103CC esi +
jnz loc_100A2DE  +
lea eax [ebp+WSAData] +
push eax  +
push 202h  +
call ds:WSAStartup  +
test eax eax +
jz loc_100A2D4  +
call ds:WSAGetLastError  +
push eax  +
jmp loc_100A3BD  +
mov dword_10103CC 1 +
lea eax [ebp+var_9DC] +
push eax  +
lea eax [ebp+var_A08] +
push eax  +
push esi  +
push [ebp+var_9E4]  +
call ds:GetAddrInfoW  +
test eax eax +
jnz loc_100A3C3  +
mov esi [ebp+var_9DC] +
xor edi edi +
jmp loc_100A34B  +
push 4  +
xor eax eax +
mov [ebp+var_848] ax +
push 20h  +
lea eax [ebp+var_44] +
push eax  +
push 401h  +
lea eax [ebp+var_848] +
push eax  +
push dword ptr [esi+10h]  +
push dword ptr [esi+18h]  +
call ds:GetNameInfoW  +
cmp eax edi +
jz loc_100A351  +
cmp eax 2AFCh +
jnz loc_100A348  +
cmp [ebp+var_848] di +
jnz loc_100A351  +
mov esi [esi+1Ch] +
cmp esi edi +
jnz loc_100A30B  +
jmp loc_100A39D  +
lea esi [ebp+var_848] +
cmp [ebp+arg_C] edi +
jnz loc_100A36E  +
mov eax esi +
push offset a_  +
push eax  +
call ds:wcstok  +
pop ecx  +
pop ecx  +
mov esi eax +
push edi  +
push esi  +
call sub_1008332  +
mov ecx [ebx] +
inc eax  +
cmp ecx eax +
jnb loc_100A38A  +
mov [ebx] eax +
mov [ebp+var_9E0] 1 +
jmp loc_100A39D  +
push ecx  +
push esi  +
push [ebp+var_9E8]  +
call sub_1008CA4  +
mov [ebp+var_9E0] eax +
push [ebp+var_9DC]  +
call ds:FreeAddrInfoW  +
mov eax [ebp+var_9E0] +
jmp loc_100A3C5  +
call ds:GetLastError  +
test eax eax +
jnz loc_100A3C3  +
push 57h  +
call ds:SetLastError  +
xor eax eax +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_10078F9  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
push edi  +
mov edi [ebp+lpString] +
xor esi esi +
mov [ebp+Buffer] esi +
cmp edi esi +
jz loc_100A42F  +
push esi  +
push edi  +
call sub_1008332  +
test eax eax +
jz loc_100A42F  +
push edi  +
call sub_100A134  +
push edi  +
test eax eax +
jnz loc_100A437  +
push offset aS_2  +
push 1  +
call sub_10094EF  +
add esp 0Ch +
test eax eax +
jnz loc_100A43E  +
call ds:GetLastError  +
test eax eax +
jnz loc_100A42A  +
push 8  +
call ds:SetLastError  +
call sub_1008103  +
xor eax eax +
pop edi  +
pop esi  +
leave   +
retn 4  +
call sub_100809C  +
jmp loc_100A414  +
call sub_1008070  +
cmp eax esi +
jnz loc_100A450  +
push 0Dh  +
call sub_1007FFF  +
jmp loc_100A45A  +
push esi  +
push esi  +
push eax  +
push 0Dh  +
call sub_10091FE  +
cmp eax esi +
jz loc_100A418  +
lea ecx [ebp+Buffer] +
push ecx  +
push 65h  +
push eax  +
call NetServerGetInfo  +
test eax eax +
jnz loc_100A42F  +
mov eax [ebp+Buffer] +
test dword ptr [eax+10h] 1000h +
jz loc_100A489  +
mov esi [eax+8] +
and esi 0Fh +
imul esi esi +
add esi [eax+0Ch] +
push eax  +
call NetApiBufferFree  +
mov eax esi +
jmp loc_100A431  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ebx  +
push esi  +
mov esi [ebp+lpString] +
push edi  +
xor edi edi +
mov [ebp+fForce] edi +
cmp esi edi +
jz loc_100A598  +
push esi  +
call ds:lstrlenW  +
test eax eax +
jz loc_100A598  +
push esi  +
call sub_100A134  +
cmp eax 1 +
jnz loc_100A4CE  +
add esi 4 +
mov ebx [ebp+arg_8] +
test bl 10h +
jz loc_100A509  +
push offset aIpc  +
push esi  +
push offset aSS_0  +
push 2  +
call sub_10094EF  +
add esp 10h +
test eax eax +
jnz loc_100A536  +
call ds:GetLastError  +
test eax eax +
jnz loc_100A501  +
push 8  +
call ds:SetLastError  +
push 8  +
pop eax  +
jmp loc_100A59A  +
test bl 20h +
jz loc_100A515  +
push offset aAdmin  +
jmp loc_100A4DB  +
test bl 40h +
jz loc_100A524  +
cmp [ebp+arg_4] edi +
jz loc_100A524  +
push [ebp+arg_4]  +
jmp loc_100A4DB  +
push esi  +
push offset aS_2  +
push 1  +
call sub_10094EF  +
add esp 0Ch +
jmp loc_100A4EB  +
call sub_1008070  +
cmp eax edi +
jnz loc_100A548  +
push 12h  +
call sub_1007FFF  +
jmp loc_100A552  +
push edi  +
push edi  +
push eax  +
push 12h  +
call sub_10091FE  +
cmp eax edi +
jz loc_100A4EF  +
test ebx 10000000h +
jz loc_100A565  +
mov [ebp+fForce] 1 +
push [ebp+fForce]  +
push edi  +
push eax  +
call WNetCancelConnection2W  +
mov esi eax +
cmp esi edi +
jz loc_100A58B  +
cmp esi 4B8h +
jz loc_100A584  +
call sub_1008103  +
jmp loc_100A594  +
call sub_1009581  +
jmp loc_100A594  +
push edi  +
xor esi esi +
call ds:SetLastError  +
mov eax esi +
jmp loc_100A59A  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
push esi  +
push edi  +
xor edi edi +
push edi  +
mov [ebp+var_4] edi +
call ds:SetLastError  +
cmp [ebp+lpString] edi +
jz loc_100A6FE  +
push [ebp+lpString]  +
call ds:lstrlenW  +
test eax eax +
jz loc_100A6FE  +
mov esi ds:GetComputerNameExW +
lea eax [ebp+var_4] +
push eax  +
push edi  +
push 4  +
call esi  +
mov ebx ds:GetLastError +
call ebx  +
cmp eax 0EAh +
jz loc_100A5FB  +
xor eax eax +
jmp loc_100A701  +
push 1  +
push [ebp+var_4]  +
push edi  +
push 0Eh  +
call sub_10091FE  +
mov [ebp+lpString1] eax +
cmp eax edi +
jnz loc_100A61F  +
call ebx  +
test eax eax +
jnz loc_100A5F4  +
push 8  +
call ds:SetLastError  +
jmp loc_100A5F4  +
lea ecx [ebp+var_4] +
push ecx  +
push eax  +
push 4  +
call esi  +
test eax eax +
jz loc_100A5F4  +
push edi  +
push 1  +
push [ebp+lpString]  +
push [ebp+lpString1]  +
call sub_1008353  +
test eax eax +
jz loc_100A6FE  +
push [ebp+lpString]  +
call sub_100A183  +
cmp eax 1 +
mov [ebp+var_4] edi +
lea eax [ebp+var_4] +
jnz loc_100A6BA  +
push edi  +
push eax  +
push edi  +
push [ebp+lpString]  +
call sub_100A22D  +
test eax eax +
jz loc_100A5F4  +
xor ebx ebx +
inc ebx  +
push ebx  +
push [ebp+var_4]  +
push edi  +
push 0Fh  +
call sub_10091FE  +
mov esi eax +
cmp esi edi +
jz loc_100A5F4  +
push edi  +
lea eax [ebp+var_4] +
push eax  +
push esi  +
push [ebp+lpString]  +
call sub_100A22D  +
test eax eax +
jz loc_100A5F4  +
push edi  +
push ebx  +
push esi  +
push [ebp+lpString1]  +
call sub_1008353  +
test eax eax +
jnz loc_100A6A6  +
mov eax ebx +
jmp loc_100A701  +
push edi  +
push ebx  +
push offset aLocalhost  +
push esi  +
call sub_1008353  +
neg eax  +
sbb eax eax +
inc eax  +
jmp loc_100A701  +
push eax  +
push edi  +
push 7  +
call esi  +
call ebx  +
cmp eax 0EAh +
jnz loc_100A5F4  +
push 1  +
push [ebp+var_4]  +
push edi  +
push 0Eh  +
call sub_10091FE  +
mov ebx eax +
cmp ebx edi +
jz loc_100A5F4  +
lea eax [ebp+var_4] +
push eax  +
push ebx  +
push 7  +
call esi  +
test eax eax +
jz loc_100A5F4  +
push edi  +
push 1  +
push [ebp+lpString]  +
push ebx  +
jmp loc_100A6AE  +
xor eax eax +
inc eax  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 40h +
mov eax dword_101003C +
xor eax ebp +
mov [ebp+var_4] eax +
push ebx  +
mov ebx [ebp+lpString] +
push esi  +
push edi  +
push 0Eh  +
pop ecx  +
mov esi offset a?@ +
lea edi [ebp+String] +
movs   +
xor esi esi +
cmp ebx esi +
jz loc_100A7A9  +
push ebx  +
call ds:lstrlenW  +
test eax eax +
jz loc_100A7A9  +
push ebx  +
call sub_100A183  +
xor edi edi +
inc edi  +
push esi  +
cmp eax edi +
jnz loc_100A78B  +
lea eax [ebp+var_40] +
push eax  +
push esi  +
push ebx  +
mov [ebp+var_40] esi +
call sub_100A22D  +
test eax eax +
jnz loc_100A767  +
xor eax eax +
jmp loc_100A7AC  +
push edi  +
push [ebp+var_40]  +
push esi  +
push 0Fh  +
call sub_10091FE  +
cmp eax esi +
jz loc_100A763  +
push esi  +
lea ecx [ebp+var_40] +
push ecx  +
push eax  +
push ebx  +
call sub_100A22D  +
neg eax  +
sbb eax eax +
neg eax  +
jmp loc_100A7AC  +
push edi  +
lea eax [ebp+String] +
push eax  +
push ebx  +
call sub_1008786  +
cmp eax 0FFFFFFFFh +
jz loc_100A7A5  +
push 35h  +
call ds:SetLastError  +
jmp loc_100A763  +
mov eax edi +
jmp loc_100A7AC  +
xor eax eax +
inc eax  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_10078F9  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 10000010h  +
push 0  +
push [ebp+lpString]  +
call sub_100A498  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 20h +
push ebx  +
push esi  +
mov esi dword ptr [ebp+arg_0] +
xor ebx ebx +
cmp esi ebx +
jz loc_100A93A  +
push esi  +
call sub_100A5A6  +
cmp eax 1 +
jz loc_100A93A  +
push esi  +
mov dword ptr [ebp+arg_0] esi +
call sub_100A134  +
cmp eax 1 +
jnz loc_100A819  +
add esi 4 +
mov dword ptr [ebp+arg_0] esi +
push dword ptr [ebp+arg_0]  +
call sub_100A70D  +
test eax eax +
jnz loc_100A835  +
call sub_1008103  +
call ds:GetLastError  +
jmp loc_100A96E  +
cmp [ebp+lpString] ebx +
jz loc_100A85E  +
push [ebp+lpString]  +
call ds:lstrlenW  +
test eax eax +
jz loc_100A85E  +
push [ebp+lpString]  +
push dword ptr [ebp+arg_0]  +
push offset aSS_0  +
push 2  +
call sub_10094EF  +
add esp 10h +
jmp loc_100A870  +
push dword ptr [ebp+arg_0]  +
push offset aS_2  +
push 1  +
call sub_10094EF  +
add esp 0Ch +
test eax eax +
jnz loc_100A893  +
call ds:GetLastError  +
test eax eax +
jnz loc_100A886  +
push 8  +
call ds:SetLastError  +
call sub_1008103  +
push 8  +
pop eax  +
jmp loc_100A96E  +
call sub_1008070  +
cmp eax ebx +
jnz loc_100A8A5  +
push 12h  +
call sub_1007FFF  +
jmp loc_100A8AF  +
push ebx  +
push ebx  +
push eax  +
push 12h  +
call sub_10091FE  +
mov edx eax +
cmp edx ebx +
jz loc_100A874  +
push edi  +
push 8  +
pop ecx  +
push ebx  +
push [ebp+lpUserName]  +
xor eax eax +
push [ebp+lpPassword]  +
lea edi [ebp+NetResource] +
stos   +
lea eax [ebp+NetResource] +
push eax  +
mov [ebp+NetResource.dwType] ebx +
mov [ebp+NetResource.lpProvider] ebx +
mov [ebp+NetResource.lpLocalName] ebx +
mov [ebp+NetResource.lpRemoteName] edx +
call WNetAddConnection2W  +
mov esi eax +
pop edi  +
cmp esi ebx +
jz loc_100A900  +
cmp esi 4B8h +
jz loc_100A8F9  +
push esi  +
call ds:SetLastError  +
call sub_1008103  +
jmp loc_100A968  +
call sub_1009581  +
jmp loc_100A968  +
push ebx  +
xor esi esi +
call ds:SetLastError  +
push dword ptr [ebp+arg_0]  +
call sub_100A3DB  +
push eax  +
call sub_100824B  +
test eax eax +
jnz loc_100A968  +
push dword ptr [ebp+arg_0]  +
call sub_100A7C2  +
push 1580h  +
call sub_100A082  +
push eax  +
call sub_100809C  +
mov esi 4B8h +
jmp loc_100A968  +
cmp [ebp+lpUserName] ebx +
jz loc_100A96C  +
push [ebp+lpUserName]  +
call ds:lstrlenW  +
test eax eax +
jz loc_100A96C  +
push 157Eh  +
call sub_100A082  +
push eax  +
call sub_100809C  +
mov esi 0A0010001h +
push esi  +
call ds:SetLastError  +
mov eax esi +
jmp loc_100A96E  +
xor eax eax +
pop esi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push offset aIpc  +
push [ebp+lpPassword]  +
push [ebp+lpUserName]  +
push dword ptr [ebp+arg_0]  +
call sub_100A7DF  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi ds:SetLastError +
push edi  +
push 0  +
call esi  +
mov edi [ebp+arg_0] +
test edi edi +
jnz loc_100A9C8  +
call ds:GetLastError  +
test eax eax +
jnz loc_100A9C0  +
push 57h  +
call esi  +
xor eax eax +
pop edi  +
pop esi  +
pop ebp  +
retn 4  +
push edi  +
call ds:lstrlenW  +
cmp eax 1 +
jle loc_100A9C0  +
movzx eax word ptr [edi] +
push 0  +
push 1  +
push eax  +
push offset asc_1001920  +
call sub_100871B  +
cmp eax 0FFFFFFFFh +
jz loc_100A9C0  +
xor eax eax +
inc eax  +
jmp loc_100A9C2  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
dec eax  +
cmp eax 9 +
ja loc_100AA16  +
movzx eax ds:byte_100AA25[eax] +
jmp ds:off_100AA1D[eax*4]  +
xor eax eax +
inc eax  +
jmp loc_100AA18  +
xor eax eax +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
push esi  +
push edi  +
mov edi ds:SetLastError +
xor ebx ebx +
push ebx  +
call edi  +
cmp [ebp+lpString] ebx +
jz loc_100AAB9  +
cmp [ebp+arg_4] ebx +
jnz loc_100AAB9  +
push ebx  +
push 1  +
push 7Ch  +
push [ebp+lpString]  +
call sub_100871B  +
mov esi eax +
cmp esi 0FFFFFFFFh +
jnz loc_100AA73  +
push ebx  +
call edi  +
push ebx  +
push [ebp+lpString]  +
call sub_1008332  +
mov esi eax +
push 1  +
lea eax [esi+5] +
push eax  +
push ebx  +
push 0Ch  +
call sub_10091FE  +
mov [ebp+arg_4] eax +
cmp eax ebx +
jnz loc_100AA96  +
call ds:GetLastError  +
test eax eax +
jnz loc_100AAC7  +
push 8  +
jmp loc_100AAC5  +
lea ecx [esi+1] +
push ecx  +
push offset dword_10012EC  +
push eax  +
call sub_1008CA4  +
add esi 2 +
push esi  +
push [ebp+lpString]  +
push [ebp+arg_4]  +
call sub_1008CE7  +
mov eax [ebp+arg_4] +
jmp loc_100AAC9  +
call ds:GetLastError  +
test eax eax +
jnz loc_100AAC7  +
push 57h  +
call edi  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
push esi  +
mov esi ds:SetLastError +
push edi  +
xor edi edi +
push edi  +
mov [ebp+var_4] edi +
call esi  +
mov ecx [ebp+arg_8] +
cmp [ebp+arg_4] edi +
jz loc_100AB0E  +
cmp ecx edi +
jnz loc_100AB0E  +
call ds:GetLastError  +
test eax eax +
jnz loc_100AB07  +
push 57h  +
call esi  +
xor eax eax +
jmp loc_100AD71  +
mov eax [ebp+arg_0] +
cmp eax edi +
jz loc_100AAF9  +
or dword ptr [eax] 0FFFFFFFFh +
push ebx  +
mov [ebp+arg_8] edi +
cmp [ebp+arg_4] edi +
jbe loc_100AD6D  +
lea edi [ecx+3Ch] +
lea eax [edi-3Ch] +
test eax eax +
jz loc_100AD77  +
xor ebx ebx +
push ebx  +
push 1  +
lea eax [edi-3Ch] +
push offset aParser2_0  +
push eax  +
call sub_10083AE  +
test eax eax +
jnz loc_100AC29  +
mov eax [edi-28h] +
mov esi [edi-2Ch] +
mov [ebp+var_10] eax +
cmp [edi] ebx +
jnz loc_100AC29  +
cmp [edi+4] ebx +
jnz loc_100AC29  +
cmp [edi+8] ebx +
jnz loc_100AC29  +
cmp [edi+0Ch] ebx +
jnz loc_100AC29  +
mov ebx esi +
and ebx 40000h +
xor eax eax +
mov ecx ebx +
or ecx eax +
jnz loc_100ABA4  +
mov eax [edi-1Ch] +
test eax eax +
jz loc_100AC29  +
push eax  +
call ds:lstrlenW  +
test eax eax +
jz loc_100AC29  +
mov eax esi +
and eax 20000h +
xor ecx ecx +
mov edx eax +
or edx ecx +
jz loc_100ABB9  +
cmp dword ptr [edi-34h] 0Ah +
jnz loc_100AC29  +
mov edx eax +
or edx ecx +
jz loc_100ABCA  +
xor ecx ecx +
inc ecx  +
cmp [ebp+var_4] ecx +
jz loc_100AC29  +
mov [ebp+var_4] ecx +
mov edx ebx +
xor ecx ecx +
or edx ecx +
jz loc_100ABDF  +
mov ecx [ebp+arg_0] +
cmp dword ptr [ecx] 0FFFFFFFFh +
jnz loc_100AC29  +
mov edx [ebp+arg_8] +
mov [ecx] edx +
xor ecx ecx +
or eax ecx +
jz loc_100ABEB  +
xor eax eax +
or ebx eax +
jnz loc_100AC29  +
mov eax [edi-34h] +
dec eax  +
cmp eax 9 +
ja loc_100AC29  +
jmp ds:off_100AD99[eax*4]  +
mov eax esi +
and eax 10000h +
xor ecx ecx +
mov [ebp+var_C] eax +
or eax ecx +
jz loc_100AC42  +
mov ebx esi +
and ebx 1 +
xor eax eax +
mov ecx ebx +
or ecx eax +
jnz loc_100AC29  +
cmp [edi-10h] ecx +
jnz loc_100AC29  +
mov eax [edi-0Ch] +
test eax eax +
jz loc_100AC61  +
cmp eax 2 +
jnb loc_100AC61  +
call ds:GetLastError  +
test eax eax +
jnz loc_100AC3B  +
push 57h  +
call ds:SetLastError  +
xor eax eax +
jmp loc_100AD70  +
mov eax [edi-10h] +
test eax eax +
jz loc_100AC29  +
mov ebx esi +
and ebx 1 +
xor ecx ecx +
mov edx ebx +
or edx ecx +
jz loc_100AC61  +
push dword ptr [eax]  +
call sub_100BBD8  +
test eax eax +
jz loc_100AC29  +
mov eax esi +
and eax 2 +
xor ecx ecx +
or eax ecx +
jz loc_100AC71  +
cmp [edi-14h] ecx +
jz loc_100AC29  +
xor eax eax +
or ebx eax +
jnz loc_100AD57  +
cmp dword ptr [edi-24h] 1 +
jnz loc_100AC29  +
and esi 20h +
or esi eax +
jnz loc_100AC29  +
mov eax [ebp+var_C] +
xor ecx ecx +
or eax ecx +
jnz loc_100AD57  +
cmp dword ptr [edi-0Ch] 2 +
jb loc_100AC29  +
jmp loc_100AD57  +
mov eax esi +
and eax 2 +
xor ecx ecx +
or eax ecx +
jnz loc_100AD8F  +
mov eax esi +
and eax 10000h +
or eax ecx +
jnz loc_100AC29  +
mov eax esi +
and eax 40h +
or eax ecx +
jnz loc_100AC29  +
mov eax esi +
and eax 80h +
or eax ecx +
jnz loc_100AC29  +
mov edx [edi-10h] +
test edx edx +
jz loc_100AC29  +
mov eax esi +
and eax 1 +
or eax ecx +
jz loc_100ACFF  +
push dword ptr [edx]  +
call sub_100BBD8  +
test eax eax +
jz loc_100AC29  +
jmp loc_100AD57  +
cmp dword ptr [edi-24h] 1 +
ja loc_100AC29  +
and esi 20h +
xor eax eax +
jmp loc_100AD4F  +
cmp dword ptr [edi-8] 0 +
jz loc_100AC29  +
cmp dword ptr [edi-4] 0 +
jnz loc_100AD57  +
lea eax [edi-3Ch] +
mov [edi-4] eax +
jmp loc_100AD57  +
mov eax esi +
and eax 0Fh +
xor ecx ecx +
or eax ecx +
jnz loc_100AC29  +
mov eax esi +
and eax 0FFF0h +
or eax ecx +
jnz loc_100AC29  +
mov eax [ebp+var_10] +
and esi 0FFEDFFFFh +
or esi eax +
jnz loc_100AC29  +
and dword ptr [edi-20h] 0 +
inc [ebp+arg_8]  +
mov eax [ebp+arg_8] +
add edi 50h +
cmp eax [ebp+arg_4] +
jb loc_100AB28  +
xor eax eax +
inc eax  +
pop ebx  +
pop edi  +
pop esi  +
leave   +
retn 0Ch  +
call ds:GetLastError  +
test eax eax +
jnz loc_100AC3B  +
push 42Bh  +
jmp loc_100AC35  +
push 78h  +
jmp loc_100AC35  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 28h +
fldz   +
push ebx  +
mov ebx ds:SetLastError +
fstp  [ebp+var_18] +
fldz   +
push edi  +
xor edi edi +
fstp  [ebp+var_28] +
push edi  +
mov dword ptr [ebp+String2] edi +
mov [ebp+var_14] edi +
call ebx  +
mov eax [ebp+arg_8] +
cmp eax edi +
jnz loc_100AE0C  +
call ds:GetLastError  +
test eax eax +
jnz loc_100AE00  +
push 57h  +
call ebx  +
call sub_1008103  +
xor eax eax +
jmp loc_100B370  +
push esi  +
mov esi [eax+0Ch] +
mov eax [eax+8] +
mov dword ptr [ebp+var_8] eax +
cmp esi edi +
jz loc_100B35A  +
cmp eax edi +
jz loc_100B35A  +
mov eax [esi+2Ch] +
mov ecx [esi+8] +
mov edi [esi+10h] +
mov [ebp+var_4] eax +
mov eax [esi+14h] +
mov [ebp+var_1C] eax +
mov eax [esi+30h] +
mov [ebp+var_C] eax +
mov eax [esi+28h] +
mov [ebp+var_1C] eax +
cmp ecx 0Ah +
jz loc_100AEAB  +
cmp [ebp+lpString2] 0 +
jnz loc_100AEAB  +
mov eax edi +
and eax 10h +
xor edx edx +
or eax edx +
jnz loc_100AEAB  +
cmp dword ptr [ebp+lpString] edx +
jz loc_100AE89  +
push dword ptr [ebp+lpString]  +
call ds:lstrlenW  +
test eax eax +
jz loc_100AE89  +
push dword ptr [ebp+var_8]  +
push dword ptr [ebp+lpString]  +
push 15EBh  +
call sub_100A082  +
push eax  +
push 2  +
call sub_10094EF  +
add esp 10h +
jmp loc_100AE9F  +
call ds:GetLastError  +
test eax eax +
jnz loc_100AE9A  +
push 42Bh  +
call ebx  +
call sub_1008103  +
push 800401E4h  +
call ebx  +
jmp loc_100B36D  +
cmp dword ptr [ebp+lpString] 0 +
jnz loc_100AEC3  +
mov eax edi +
and eax 40000h +
xor edx edx +
or eax edx +
jnz loc_100AECE  +
jmp loc_100B35A  +
cmp dword ptr [esi+24h] 0 +
jz loc_100AED4  +
cmp ecx 9 +
jz loc_100AED4  +
mov eax [esi+24h] +
mov dword ptr [ebp+lpString] eax +
lea eax [ecx-1] +
cmp eax 9 +
ja loc_100B35A  +
jmp ds:off_100B376[eax*4]  +
mov ebx [ebp+lpString2] +
test ebx ebx +
jz loc_100AF42  +
mov eax edi +
and eax 42h +
xor ecx ecx +
or eax ecx +
jz loc_100AF42  +
push ecx  +
push ecx  +
push ebx  +
push 0Ah  +
call sub_10091FE  +
test eax eax +
jnz loc_100AF22  +
call ds:GetLastError  +
test eax eax +
jnz loc_100B368  +
push 8  +
call ds:SetLastError  +
jmp loc_100B368  +
push 3  +
push offset asc_1001880  +
push eax  +
call sub_1009373  +
mov ebx eax +
mov [ebp+lpString2] ebx +
call ds:GetLastError  +
test eax eax +
jnz loc_100B368  +
mov eax edi +
and eax 2 +
xor ecx ecx +
or eax ecx +
jz loc_100AFBD  +
test ebx ebx +
jz loc_100B355  +
push 1  +
push [ebp+var_1C]  +
push ebx  +
call sub_1009CE9  +
test eax eax +
jnz loc_100AFBD  +
cmp dword ptr [ebp+lpString] eax +
jz loc_100AF94  +
push dword ptr [ebp+lpString]  +
call ds:lstrlenW  +
test eax eax +
jz loc_100AF94  +
push dword ptr [ebp+var_8]  +
push dword ptr [ebp+lpString]  +
push ebx  +
push 15E1h  +
call sub_100A082  +
push eax  +
push 3  +
call sub_10094EF  +
add esp 14h +
jmp loc_100AFAD  +
push dword ptr [ebp+var_8]  +
push ebx  +
push 15ECh  +
call sub_100A082  +
push eax  +
push 2  +
call sub_10094EF  +
add esp 10h +
push 800401E4h  +
call ds:SetLastError  +
jmp loc_100B36D  +
test ebx ebx +
jz loc_100B355  +
mov ebx ds:lstrlenW +
mov eax edi +
and eax 80h +
xor ecx ecx +
or eax ecx +
jz loc_100B016  +
push [ebp+lpString2]  +
call ebx  +
test eax eax +
jnz loc_100B016  +
cmp dword ptr [ebp+lpString] eax +
jz loc_100AFFC  +
push dword ptr [ebp+lpString]  +
call ebx  +
test eax eax +
jz loc_100AFFC  +
push dword ptr [ebp+var_8]  +
push dword ptr [ebp+lpString]  +
push 15EEh  +
jmp loc_100AF9D  +
push dword ptr [ebp+var_8]  +
push 15EFh  +
call sub_100A082  +
push eax  +
push 1  +
call sub_10094EF  +
add esp 0Ch +
jmp loc_100AFAD  +
mov eax edi +
and eax 1 +
xor ecx ecx +
or eax ecx +
jz loc_100B066  +
mov esi [esi+10h] +
and esi 4000h +
xor eax eax +
or esi eax +
jz loc_100B049  +
push eax  +
mov eax [ebp+var_4] +
push 1  +
push [ebp+lpString2]  +
push dword ptr [eax]  +
call sub_100C78A  +
cmp eax 0FFFFFFFFh +
jnz loc_100B355  +
mov eax [ebp+var_4] +
push 0  +
push [ebp+lpString2]  +
push dword ptr [eax]  +
call sub_100BF1B  +
cmp eax 0FFFFFFFFh +
jnz loc_100B355  +
jmp loc_100AF07  +
cmp [ebp+var_C] ecx +
jz loc_100B0A5  +
push [ebp+lpString2]  +
call ebx  +
cmp eax [ebp+var_C] +
jl loc_100B0A5  +
cmp dword ptr [ebp+lpString] 0 +
jz loc_100B096  +
push dword ptr [ebp+lpString]  +
call ebx  +
test eax eax +
jz loc_100B096  +
mov eax [ebp+var_C] +
dec eax  +
push eax  +
push dword ptr [ebp+lpString]  +
push 15F4h  +
jmp loc_100AF9D  +
mov eax [ebp+var_C] +
dec eax  +
push eax  +
push 15F2h  +
jmp loc_100B004  +
and edi 10000h +
xor eax eax +
or edi eax +
jz loc_100B0CF  +
push [ebp+lpString2]  +
call ebx  +
mov edi eax +
inc edi  +
lea eax [edi+edi] +
push eax  +
call sub_1008533  +
test eax eax +
jz loc_100AF07  +
mov [esi+2Ch] eax +
jmp loc_100B0D5  +
mov eax [ebp+var_4] +
mov edi [ebp+var_C] +
push edi  +
push [ebp+lpString2]  +
push eax  +
call sub_1008CA4  +
jmp loc_100B355  +
mov ebx [ebp+lpString2] +
xor eax eax +
cmp ecx 2 +
setz al  +
mov [ebp+var_C] eax +
test ebx ebx +
jz loc_100B355  +
push 0  +
push ebx  +
call sub_1008332  +
test eax eax +
jz loc_100B1AE  +
push [ebp+var_C]  +
push 0Ah  +
push ebx  +
call sub_1009B06  +
test eax eax +
jz loc_100B1AE  +
push 0Ah  +
push ebx  +
call sub_1009920  +
cmp [ebp+var_C] 1 +
jnz loc_100B130  +
mov dword ptr [ebp+String2] eax +
jmp loc_100B133  +
mov [ebp+var_14] eax +
and edi 1 +
xor eax eax +
or edi eax +
jz loc_100B198  +
mov esi [esi+10h] +
and esi 4000h +
or esi eax +
jz loc_100B171  +
cmp [ebp+var_C] 1 +
mov eax [ebp+var_4] +
jnz loc_100B15E  +
push dword ptr [ebp+String2]  +
push dword ptr [eax]  +
call sub_100C6FE  +
jmp loc_100B168  +
push [ebp+var_14]  +
push dword ptr [eax]  +
call sub_100C721  +
cmp eax 0FFFFFFFFh +
jnz loc_100B355  +
cmp [ebp+var_C] 1 +
mov eax [ebp+var_4] +
jnz loc_100B189  +
push dword ptr [ebp+String2]  +
push dword ptr [eax]  +
call sub_100BF92  +
jmp loc_100B058  +
push [ebp+var_14]  +
push dword ptr [eax]  +
call sub_100BFE7  +
jmp loc_100B058  +
cmp [ebp+var_C] 1 +
mov eax [ebp+var_4] +
mov ecx dword ptr [ebp+String2] +
jz loc_100B1A7  +
mov ecx [ebp+var_14] +
mov [eax] ecx +
jmp loc_100B355  +
and edi 10h +
xor eax eax +
or edi eax +
jz loc_100B1C0  +
mov ecx [ebp+arg_8] +
cmp dword ptr [ecx+4] 0FFFFFFFFh +
jnz loc_100B214  +
cmp dword ptr [ebp+lpString] eax +
jz loc_100B1E2  +
push dword ptr [ebp+lpString]  +
call ds:lstrlenW  +
test eax eax +
jz loc_100B1E2  +
push dword ptr [ebp+var_8]  +
push dword ptr [ebp+lpString]  +
push 15E2h  +
jmp loc_100AF9D  +
push dword ptr [ebp+var_8]  +
push 15F0h  +
jmp loc_100B004  +
mov ebx [ebp+lpString2] +
test ebx ebx +
jz loc_100B355  +
push ebx  +
call sub_10098FD  +
test eax eax +
jnz loc_100B24D  +
and edi 10h +
or edi eax +
jz loc_100B21E  +
mov ecx [ebp+arg_8] +
cmp dword ptr [ecx+4] 0FFFFFFFFh +
jz loc_100B21E  +
xor eax eax +
inc eax  +
mov [ecx] eax +
jmp loc_100B36F  +
cmp dword ptr [ebp+lpString] eax +
jz loc_100B240  +
push dword ptr [ebp+lpString]  +
call ds:lstrlenW  +
test eax eax +
jz loc_100B240  +
push dword ptr [ebp+var_8]  +
push dword ptr [ebp+lpString]  +
push 15E3h  +
jmp loc_100AF9D  +
push dword ptr [ebp+var_8]  +
push 15F1h  +
jmp loc_100B004  +
cmp dword ptr [esi+8] 7 +
push ebx  +
jnz loc_100B25E  +
call sub_1009738  +
fstp  [ebp+var_18] +
jmp loc_100B266  +
call sub_1009738  +
fstp  [ebp+var_28] +
and edi 1 +
xor eax eax +
or edi eax +
jz loc_100B2DC  +
mov eax [esi+10h] +
and eax 4000h +
xor ecx ecx +
or eax ecx +
jz loc_100B2AD  +
cmp dword ptr [esi+8] 7 +
mov eax [ebp+var_4] +
push ecx  +
jnz loc_100B296  +
fld  [ebp+var_18] +
fstp  [esp+38h+var_38] +
push dword ptr [eax]  +
call sub_100C744  +
jmp loc_100B2A4  +
fld  [ebp+var_28] +
push ecx  +
fstp  qword ptr [esp] +
push dword ptr [eax]  +
call sub_100C767  +
cmp eax 0FFFFFFFFh +
jnz loc_100B355  +
cmp dword ptr [esi+8] 7 +
mov eax [ebp+var_4] +
push ecx  +
jnz loc_100B2C9  +
fld  [ebp+var_18] +
fstp  [esp+38h+var_38] +
push dword ptr [eax]  +
call sub_100C03C  +
jmp loc_100B058  +
fld  [ebp+var_28] +
push ecx  +
fstp  qword ptr [esp] +
push dword ptr [eax]  +
call sub_100C091  +
jmp loc_100B058  +
cmp dword ptr [esi+8] 7 +
mov eax [ebp+var_4] +
jnz loc_100B2EC  +
fld  [ebp+var_18] +
fstp  dword ptr [eax] +
jmp loc_100B355  +
fld  [ebp+var_28] +
fstp  qword ptr [eax] +
jmp loc_100B355  +
push [ebp+arg_8]  +
push dword ptr [esi+38h]  +
push [ebp+lpString2]  +
push dword ptr [ebp+lpString]  +
call dword ptr [esi+34h]  +
jmp loc_100B36F  +
cmp [ebp+lpString2] 0 +
jz loc_100B34C  +
cmp dword ptr [ebp+lpString] 0 +
jz loc_100B32D  +
push dword ptr [ebp+lpString]  +
call ds:lstrlenW  +
test eax eax +
jz loc_100B32D  +
push dword ptr [ebp+var_8]  +
push dword ptr [ebp+lpString]  +
push 15F3h  +
jmp loc_100AF9D  +
call ds:GetLastError  +
test eax eax +
jnz loc_100B342  +
push 42Bh  +
call ds:SetLastError  +
call sub_1008103  +
jmp loc_100AFAD  +
mov eax [ebp+var_4] +
mov dword ptr [eax] 1 +
xor eax eax +
inc eax  +
jmp loc_100B36F  +
call ds:GetLastError  +
test eax eax +
jnz loc_100B368  +
push 57h  +
call ebx  +
call sub_1008103  +
xor eax eax +
pop esi  +
pop edi  +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx ds:SetLastError +
push esi  +
push edi  +
xor edi edi +
push edi  +
call ebx  +
cmp [ebp+arg_0] edi +
jz loc_100B464  +
mov esi [ebp+arg_4] +
cmp esi edi +
jz loc_100B464  +
cmp [ebp+arg_8] edi +
jz loc_100B464  +
push [ebp+arg_8]  +
call sub_100A99A  +
test eax eax +
jnz loc_100B3E9  +
push 490h  +
jmp loc_100B470  +
mov [ebp+arg_4] edi +
cmp [ebp+arg_0] edi +
jbe loc_100B3DF  +
add esi 20h +
jmp loc_100B3F8  +
xor edi edi +
lea eax [esi-20h] +
test eax eax +
jz loc_100B445  +
mov eax [esi-10h] +
and eax 100000h +
xor ecx ecx +
or eax ecx +
jnz loc_100B410  +
xor edi edi +
inc edi  +
mov eax [esi] +
test eax eax +
jz loc_100B435  +
push eax  +
call ds:lstrlenW  +
test eax eax +
jle loc_100B435  +
mov eax [ebp+arg_8] +
push edi  +
push dword ptr [esi]  +
add eax 2 +
push eax  +
call sub_1009CE9  +
cmp eax 1 +
jz loc_100B45F  +
inc [ebp+arg_4]  +
mov eax [ebp+arg_4] +
add esi 50h +
cmp eax [ebp+arg_0] +
jb loc_100B3F6  +
jmp loc_100B3DF  +
call ds:GetLastError  +
test eax eax +
jnz loc_100B456  +
push 42Bh  +
call ebx  +
call sub_1008103  +
xor eax eax +
jmp loc_100B475  +
mov eax [ebp+arg_4] +
jmp loc_100B475  +
call ds:GetLastError  +
test eax eax +
jnz loc_100B472  +
push 57h  +
call ebx  +
or eax 0FFFFFFFFh +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx ds:SetLastError +
push esi  +
push edi  +
xor edi edi +
push edi  +
call ebx  +
cmp [ebp+arg_0] edi +
jz loc_100B559  +
cmp [ebp+arg_4] edi +
jz loc_100B559  +
cmp [ebp+lpString] edi +
jz loc_100B559  +
mov esi [ebp+arg_C] +
cmp esi edi +
jz loc_100B559  +
push edi  +
push 1  +
push 3Ah  +
push [ebp+lpString]  +
mov [esi] edi +
mov [esi+4] edi +
call sub_100871B  +
mov ebx eax +
or eax 0FFFFFFFFh +
cmp ebx eax +
jz loc_100B56A  +
push [ebp+lpString]  +
call ds:lstrlenW  +
mov edi eax +
push 1  +
lea eax [ebx+5] +
push eax  +
push 0  +
sub edi ebx +
push 8  +
dec edi  +
call sub_10091FE  +
mov [esi] eax +
test eax eax +
jnz loc_100B510  +
call ds:GetLastError  +
test eax eax +
jnz loc_100B567  +
push 8  +
call ds:SetLastError  +
jmp loc_100B567  +
push 1  +
lea eax [edi+5] +
push eax  +
push 0  +
push 9  +
call sub_10091FE  +
mov [esi+4] eax +
test eax eax +
jz loc_100B4FC  +
lea eax [ebx+1] +
push eax  +
push [ebp+lpString]  +
push dword ptr [esi]  +
call sub_1008CA4  +
test edi edi +
jz loc_100B54A  +
mov eax [ebp+lpString] +
inc edi  +
push edi  +
lea eax [eax+ebx*2+2] +
push eax  +
push dword ptr [esi+4]  +
call sub_1008CA4  +
push dword ptr [esi]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_100B3A3  +
jmp loc_100B56A  +
call ds:GetLastError  +
test eax eax +
jnz loc_100B567  +
push 57h  +
call ebx  +
or eax 0FFFFFFFFh +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_0] +
push esi  +
test ebx ebx +
jz loc_100B5F5  +
mov esi [ebp+dwErrCode] +
test esi esi +
jz loc_100B5F5  +
call ds:GetLastError  +
mov [ebp+dwErrCode] eax +
call sub_1008070  +
test eax eax +
jnz loc_100B5A6  +
push 7  +
call sub_1007FFF  +
jmp loc_100B5B2  +
push 0  +
push 0  +
push eax  +
push 7  +
call sub_10091FE  +
mov [ebp+arg_0] eax +
test eax eax +
jz loc_100B5F5  +
test ebx ebx +
jbe loc_100B5DF  +
add esi 2Ch +
cmp dword ptr [esi] 0 +
jz loc_100B5D9  +
mov eax [esi-1Ch] +
and eax 10000h +
xor ecx ecx +
or eax ecx +
jz loc_100B5D9  +
push esi  +
call sub_10088CF  +
add esi 50h +
dec ebx  +
jnz loc_100B5C0  +
push [ebp+arg_0]  +
call sub_100809C  +
push [ebp+dwErrCode]  +
call ds:SetLastError  +
xor eax eax +
inc eax  +
jmp loc_100B5F7  +
xor eax eax +
pop esi  +
pop ebx  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 18h +
push ebx  +
push esi  +
push edi  +
xor edi edi +
push edi  +
mov [ebp+dwLen] edi +
mov [ebp+puLen] edi +
mov dword ptr [ebp+lpString] edi +
mov [ebp+pBlock] edi +
mov [ebp+lpBuffer] edi +
call ds:SetLastError  +
mov esi 104h +
xor eax eax +
mov [ebp+dwLen] esi +
neg eax  +
sbb eax eax +
push 1  +
and eax esi +
add [ebp+dwLen] eax +
push [ebp+dwLen]  +
push edi  +
push 7  +
call sub_10091FE  +
mov ebx eax +
cmp ebx edi +
jz loc_100B686  +
push [ebp+dwLen]  +
push ebx  +
push edi  +
call ds:GetModuleFileNameW  +
cmp eax edi +
jz loc_100B698  +
mov ecx [ebp+dwLen] +
dec ecx  +
cmp eax ecx +
jnb loc_100B62F  +
push edi  +
push ebx  +
call GetFileVersionInfoSizeW  +
mov [ebp+dwLen] eax +
cmp eax edi +
jnz loc_100B69F  +
mov esi ds:GetLastError +
call esi  +
test eax eax +
jnz loc_100B698  +
call esi  +
test eax eax +
jnz loc_100B698  +
push 57h  +
jmp loc_100B692  +
call ds:GetLastError  +
test eax eax +
jnz loc_100B698  +
push 8  +
call ds:SetLastError  +
xor eax eax +
jmp loc_100B865  +
add eax 0Ah +
push eax  +
mov [ebp+dwLen] eax +
call sub_1008533  +
mov [ebp+pBlock] eax +
cmp eax edi +
jz loc_100B698  +
push eax  +
push [ebp+dwLen]  +
push edi  +
push ebx  +
call GetFileVersionInfoW  +
test eax eax +
jnz loc_100B6CC  +
lea eax [ebp+pBlock] +
push eax  +
call sub_10088CF  +
jmp loc_100B698  +
lea eax [ebp+puLen] +
push eax  +
lea eax [ebp+lpBuffer] +
push eax  +
push offset SubBlock  +
push [ebp+pBlock]  +
call VerQueryValueW  +
test eax eax +
jz loc_100B6C1  +
push 1  +
push 40h  +
push edi  +
push 7  +
call sub_10091FE  +
xor esi esi +
test [ebp+puLen] 0FFFFFFFCh +
mov ebx eax +
mov dword ptr [ebp+lpString] edi +
jbe loc_100B6C1  +
mov eax [ebp+lpBuffer] +
lea eax [eax+esi*4] +
movzx ecx word ptr [eax+2] +
movzx eax word ptr [eax] +
push ecx  +
push eax  +
push offset aStringfileinfo  +
push 40h  +
push ebx  +
call sub_1008B56  +
add esp 14h +
lea eax [ebp+dwLen] +
push eax  +
lea eax [ebp+lpString] +
push eax  +
push ebx  +
push [ebp+pBlock]  +
call VerQueryValueW  +
test eax eax +
jnz loc_100B743  +
mov eax [ebp+puLen] +
inc esi  +
shr eax 2 +
mov dword ptr [ebp+lpString] edi +
cmp esi eax +
jb loc_100B701  +
cmp dword ptr [ebp+lpString] edi +
jz loc_100B6C1  +
push edi  +
push dword ptr [ebp+lpString]  +
call sub_1008332  +
cmp eax 4 +
ja loc_100B77B  +
lea eax [ebp+pBlock] +
push eax  +
call sub_10088CF  +
call ds:GetLastError  +
test eax eax +
jnz loc_100B698  +
push 42Bh  +
jmp loc_100B692  +
push edi  +
push 1  +
mov ebx offset a_exe +
push ebx  +
push dword ptr [ebp+lpString]  +
call sub_100880C  +
mov esi ds:lstrlenW +
cmp eax 0FFFFFFFFh +
jz loc_100B7B5  +
push dword ptr [ebp+lpString]  +
call esi  +
push ebx  +
mov [ebp+var_18] eax +
call esi  +
mov ecx [ebp+var_18] +
mov dx ds:word_1001858 +
sub ecx eax +
mov eax dword ptr [ebp+lpString] +
mov [eax+ecx*2] dx +
cmp [ebp+arg_0] edi +
jz loc_100B805  +
push dword ptr [ebp+lpString]  +
call esi  +
push [ebp+arg_0]  +
mov ebx eax +
call esi  +
push 1  +
lea eax [ebx+eax+0Bh] +
push eax  +
push edi  +
push 7  +
mov [ebp+dwLen] eax +
call sub_10091FE  +
mov esi eax +
cmp esi edi +
jnz loc_100B7EC  +
lea eax [ebp+pBlock] +
push eax  +
call sub_10088CF  +
jmp loc_100B686  +
push [ebp+arg_0]  +
push dword ptr [ebp+lpString]  +
push offset aSS_1  +
push [ebp+dwLen]  +
push esi  +
call sub_1008B56  +
add esp 14h +
jmp loc_100B825  +
cmp dword ptr [ebp+lpString] edi +
jnz loc_100B813  +
push 7  +
call sub_1007FFF  +
jmp loc_100B81F  +
push edi  +
push edi  +
push dword ptr [ebp+lpString]  +
push 7  +
call sub_10091FE  +
mov esi eax +
cmp esi edi +
jz loc_100B7DE  +
push esi  +
mov dword ptr [ebp+lpString] esi +
call ds:CharUpperW  +
push 1  +
push 50h  +
push edi  +
push 0Bh  +
call sub_10091FE  +
mov esi eax +
cmp esi edi +
jz loc_100B7DE  +
push dword ptr [ebp+lpString]  +
push 15EDh  +
call sub_100A082  +
push eax  +
push 50h  +
push esi  +
call sub_1008B56  +
add esp 10h +
lea eax [ebp+pBlock] +
push eax  +
call sub_10088CF  +
mov eax esi +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 24h +
push ebx  +
push esi  +
push edi  +
mov edi ds:SetLastError +
xor ebx ebx +
push ebx  +
mov [ebp+var_8] ebx +
xor esi esi +
call edi  +
cmp [ebp+arg_0] ebx +
jz loc_100B8E7  +
cmp [ebp+arg_4] ebx +
jz loc_100B8E7  +
cmp [ebp+arg_C] ebx +
jz loc_100B8E7  +
cmp [ebp+dwErrCode] ebx +
jz loc_100B8E7  +
cmp dword ptr [ebp+arg_14] ebx +
jnz loc_100B8E7  +
call sub_10081B5  +
test eax eax +
jnz loc_100B8C7  +
push 157Fh  +
call sub_100A082  +
push eax  +
call sub_100809C  +
push 47Eh  +
call edi  +
jmp loc_100B8F0  +
call sub_1007F29  +
test eax eax +
jz loc_100B8EB  +
mov eax [ebp+arg_8] +
cmp eax 0FFFFFFFFh +
jz loc_100B90F  +
cmp eax [ebp+arg_C] +
jl loc_100B8F9  +
call ds:GetLastError  +
test eax eax +
jnz loc_100B8EB  +
push 57h  +
call edi  +
call sub_1008103  +
xor eax eax +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 18h  +
mov ecx [ebp+dwErrCode] +
imul eax eax +
push ebx  +
push dword ptr [eax+ecx+20h]  +
call sub_100AA34  +
mov esi eax +
cmp esi ebx +
jz loc_100B8EB  +
push esi  +
call sub_100B602  +
mov dword ptr [ebp+arg_14] eax +
cmp eax ebx +
jz loc_100B8EB  +
push [ebp+dwErrCode]  +
lea eax [ebp+var_8] +
push [ebp+arg_C]  +
push eax  +
call sub_100AAD5  +
test eax eax +
jz loc_100B8EB  +
xor eax eax +
inc eax  +
mov [ebp+var_C] ebx +
mov [ebp+var_4] eax +
cmp [ebp+arg_0] eax +
jbe loc_100BA71  +
jmp loc_100B946  +
mov eax [ebp+var_4] +
mov ecx [ebp+arg_4] +
lea ecx [ecx+eax*4] +
mov ebx [ecx] +
push 2  +
inc eax  +
pop esi  +
mov [ebp+arg_8] esi +
cmp eax [ebp+arg_0] +
jnb loc_100B95F  +
mov edi [ecx+4] +
jmp loc_100B961  +
xor edi edi +
push ebx  +
push [ebp+dwErrCode]  +
push [ebp+arg_C]  +
call sub_100B3A3  +
cmp eax 0FFFFFFFFh +
jnz loc_100B9A6  +
lea eax [ebp+var_14] +
push eax  +
push ebx  +
push [ebp+dwErrCode]  +
push [ebp+arg_C]  +
call sub_100B481  +
cmp eax 0FFFFFFFFh +
jnz loc_100B999  +
mov eax [ebp+var_8] +
cmp eax 0FFFFFFFFh +
jz loc_100BAAE  +
mov edi ebx +
xor ebx ebx +
jmp loc_100B99F  +
mov ebx [ebp+var_14] +
mov edi [ebp+var_10] +
mov [ebp+arg_8] 1 +
imul eax eax +
add eax [ebp+dwErrCode] +
mov esi eax +
jz loc_100BAE1  +
test edi edi +
jz loc_100BA01  +
cmp [ebp+arg_8] 2 +
jnz loc_100BA01  +
push dword ptr [esi+8]  +
call sub_100A9F5  +
xor ecx ecx +
inc ecx  +
cmp eax ecx +
jnz loc_100B9FC  +
push edi  +
push [ebp+dwErrCode]  +
push [ebp+arg_C]  +
call sub_100B3A3  +
cmp eax 0FFFFFFFFh +
jnz loc_100B9F3  +
lea eax [ebp+var_14] +
push eax  +
push edi  +
push [ebp+dwErrCode]  +
push [ebp+arg_C]  +
call sub_100B481  +
cmp eax 0FFFFFFFFh +
jz loc_100BA01  +
mov [ebp+arg_8] 1 +
jmp loc_100B9FF  +
mov [ebp+arg_8] ecx +
xor edi edi +
mov eax [ebp+arg_8] +
mov [ebp+var_24] eax +
mov eax [ebp+var_8] +
mov [ebp+var_20] eax +
mov eax dword ptr [ebp+arg_14] +
mov [ebp+var_1C] eax +
lea eax [ebp+var_24] +
push eax  +
push edi  +
push ebx  +
mov [ebp+var_18] esi +
call sub_100ADC6  +
mov ecx [ebp+var_24] +
test eax eax +
jz loc_100BB5A  +
mov eax [esi+18h] +
test eax eax +
jz loc_100BA3C  +
cmp eax [esi+1Ch] +
jz loc_100BAFF  +
inc dword ptr [esi+1Ch]  +
mov esi [esi+10h] +
and esi 20000h +
xor eax eax +
or esi eax +
jz loc_100BA55  +
mov [ebp+var_C] 1 +
add [ebp+var_4] ecx +
mov eax [ebp+var_4] +
cmp eax [ebp+arg_0] +
jb loc_100B943  +
mov edi ds:SetLastError +
xor ebx ebx +
cmp [ebp+var_C] ebx +
jnz loc_100BAA3  +
xor esi esi +
cmp [ebp+arg_C] ebx +
jbe loc_100BAA3  +
mov ecx [ebp+dwErrCode] +
cmp ecx ebx +
jz loc_100BB44  +
mov eax [ecx+10h] +
and eax 80000h +
xor edx edx +
or eax edx +
jz loc_100BA9A  +
cmp [ecx+1Ch] ebx +
jz loc_100BB6A  +
inc esi  +
add ecx 50h +
cmp esi [ebp+arg_C] +
jb loc_100BA7B  +
push ebx  +
call edi  +
xor eax eax +
inc eax  +
jmp loc_100B8F2  +
push dword ptr [ebp+arg_14]  +
push ebx  +
push 15E7h  +
call sub_100A082  +
push eax  +
push esi  +
call sub_10094EF  +
add esp 10h +
push [ebp+dwErrCode]  +
push [ebp+arg_C]  +
call sub_100B576  +
push 800401E4h  +
call ds:SetLastError  +
jmp loc_100B8F0  +
call ds:GetLastError  +
test eax eax +
jnz loc_100B8EB  +
push 42Bh  +
call ds:SetLastError  +
jmp loc_100B8EB  +
test ebx ebx +
jz loc_100BB2C  +
push ebx  +
call ds:lstrlenW  +
test eax eax +
jz loc_100BB2C  +
push dword ptr [ebp+arg_14]  +
push dword ptr [esi+18h]  +
push ebx  +
push 15E5h  +
call sub_100A082  +
push eax  +
push 3  +
call sub_10094EF  +
add esp 14h +
jmp loc_100BAC6  +
push dword ptr [ebp+arg_14]  +
push dword ptr [esi+18h]  +
push 15EAh  +
call sub_100A082  +
push eax  +
push 2  +
jmp loc_100BABE  +
call ds:GetLastError  +
test eax eax +
jnz loc_100BB55  +
push 42Bh  +
call edi  +
call sub_1008103  +
push [ebp+dwErrCode]  +
push [ebp+arg_C]  +
call sub_100B576  +
jmp loc_100B8F0  +
mov eax [ecx+20h] +
cmp eax ebx +
jnz loc_100BB84  +
mov eax [ecx+10h] +
and eax 40000h +
xor edx edx +
or eax edx +
jz loc_100BB44  +
mov edi [ecx+24h] +
jmp loc_100BB9C  +
mov ecx [ecx+24h] +
cmp ecx ebx +
jnz loc_100BB9A  +
push ebx  +
push eax  +
call sub_100AA34  +
mov edi eax +
test edi edi +
jnz loc_100BBA0  +
jmp loc_100BB55  +
mov edi ecx +
test edi edi +
jz loc_100BBB6  +
push edi  +
call ds:lstrlenW  +
test eax eax +
jz loc_100BBB6  +
push dword ptr [ebp+arg_14]  +
push edi  +
push 15E4h  +
jmp loc_100BB37  +
push dword ptr [ebp+arg_14]  +
push 15E8h  +
call sub_100A082  +
push eax  +
push 1  +
call sub_10094EF  +
add esp 0Ch +
jmp loc_100BAC6  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov eax [ebp+arg_0] +
test eax eax +
jz loc_100BBEE  +
cmp dword ptr [eax] 9 +
jnz loc_100BBEE  +
xor eax eax +
inc eax  +
jmp loc_100BBF0  +
xor eax eax +
pop ebp  +
retn 4  +
***
xor ecx ecx +
cmp eax ecx +
jnz loc_100BC09  +
xor eax eax +
retn   +
mov [eax+4] ecx +
mov [eax+8] ecx +
mov [eax+0Ch] ecx +
mov dword ptr [eax] 9 +
retn   +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push esi  +
call sub_100BBD8  +
test eax eax +
jz loc_100BC64  +
mov eax [esi+8] +
mov [ebp+arg_0] eax +
test eax eax +
jz loc_100BC58  +
push edi  +
mov edi [eax+10h] +
push eax  +
call sub_100BD65  +
lea eax [ebp+arg_0] +
push eax  +
call sub_10088CF  +
mov eax edi +
mov [ebp+arg_0] eax +
test edi edi +
jnz loc_100BC3C  +
pop edi  +
and dword ptr [esi+4] 0 +
and dword ptr [esi+8] 0 +
and dword ptr [esi+0Ch] 0 +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
mov ecx [esi] +
push ecx  +
call sub_100BBD8  +
test eax eax +
jz loc_100BC8F  +
push ecx  +
call sub_100BC1E  +
push esi  +
call sub_10088CF  +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
push ecx  +
call sub_100BBD8  +
test eax eax +
jz loc_100BCAE  +
mov eax [ecx+4] +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov ecx [ebp+arg_0] +
push ecx  +
call sub_100BBD8  +
test eax eax +
jnz loc_100BCCD  +
xor eax eax +
jmp loc_100BCF2  +
mov edx [ebp+arg_4] +
cmp [ecx+4] edx +
jbe loc_100BCC9  +
mov eax [ecx+8] +
push esi  +
xor esi esi +
cmp edx 1 +
jb loc_100BCE8  +
dec edx  +
mov esi eax +
mov eax [eax+10h] +
jnz loc_100BCE0  +
mov ecx [ebp+arg_8] +
test ecx ecx +
jz loc_100BCF1  +
mov [ecx] esi +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_0] +
push esi  +
call sub_100BBD8  +
test eax eax +
jnz loc_100BD13  +
or eax 0FFFFFFFFh +
jmp loc_100BD5B  +
cmp dword ptr [esi+4] 0FFFFFFFFh +
jz loc_100BD0E  +
push 14h  +
call sub_1008533  +
test eax eax +
jz loc_100BD0E  +
mov ecx [ebp+arg_4] +
and dword ptr [eax+10h] 0 +
mov [eax+4] ecx +
mov ecx [ebp+arg_8] +
mov [eax+8] ecx +
mov ecx [ebp+arg_C] +
mov [eax+0Ch] ecx +
mov dword ptr [eax] 63h +
inc dword ptr [esi+4]  +
cmp dword ptr [esi+8] 0 +
jnz loc_100BD4E  +
mov [esi+8] eax +
jmp loc_100BD54  +
mov ecx [esi+0Ch] +
mov [ecx+10h] eax +
mov [esi+0Ch] eax +
mov eax [esi+4] +
dec eax  +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
mov edx [ebp+arg_0] +
test edx edx +
jz loc_100BDD9  +
mov eax [edx+4] +
mov ecx 70000h +
cmp eax ecx +
ja loc_100BDA4  +
jz loc_100BDC0  +
cmp eax 20000h +
jz loc_100BDC0  +
cmp eax 30000h +
jz loc_100BDC0  +
cmp eax 40000h +
jz loc_100BDC0  +
cmp eax 50000h +
jz loc_100BDC0  +
cmp eax 60000h +
jz loc_100BDC0  +
jmp loc_100BDD9  +
cmp eax 80000h +
jz loc_100BDCB  +
cmp eax 90000h +
jz loc_100BDC0  +
cmp eax 0A0000h +
jz loc_100BDC0  +
cmp eax 0B0000h +
jnz loc_100BDD9  +
add edx 0Ch +
push edx  +
call sub_10088CF  +
jmp loc_100BDD9  +
push esi  +
lea esi [edx+0Ch] +
push esi  +
call sub_100BC6E  +
and dword ptr [esi] 0 +
pop esi  +
pop ebp  +
retn 4  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ebx  +
mov ebx [ebp+arg_0] +
push ebx  +
call sub_100BBD8  +
test eax eax +
jnz loc_100BDFD  +
or eax 0FFFFFFFFh +
jmp loc_100BF0C  +
xor edx edx +
push esi  +
push edi  +
mov edi [ebx+8] +
mov [ebp+arg_0] edx +
cmp [ebx+4] edx +
jbe loc_100BF07  +
mov esi [ebp+lpString2] +
mov eax [ebp+arg_4] +
cmp [edi+4] eax +
jnz loc_100BEF7  +
mov ecx 70000h +
cmp eax ecx +
ja loc_100BE8B  +
jz loc_100BE79  +
cmp eax 20000h +
jz loc_100BE5D  +
cmp eax 30000h +
jz loc_100BEEE  +
cmp eax 40000h +
jz loc_100BEEE  +
cmp eax 60000h +
jnz loc_100BEF7  +
mov eax [edi+0Ch] +
fld  dword ptr [eax] +
fld  dword ptr [esi] +
fucompp   +
jmp loc_100BE80  +
push [ebp+arg_10]  +
push [ebp+arg_C]  +
push esi  +
push dword ptr [edi+0Ch]  +
call sub_1008353  +
test eax eax +
jz loc_100BF11  +
mov edx [ebp+arg_0] +
jmp loc_100BEF7  +
mov eax [edi+0Ch] +
fld  qword ptr [esi] +
fcomp  qword ptr [eax] +
fnstsw  ax +
test ah 44h +
jp loc_100BEF7  +
mov eax edx +
jmp loc_100BF0A  +
cmp eax 90000h +
jz loc_100BEEE  +
cmp eax 0A0000h +
jz loc_100BEB1  +
cmp eax 0B0000h +
jnz loc_100BEF7  +
mov eax [edi+0Ch] +
mov ecx [esi+4] +
cmp ecx [eax+4] +
jnz loc_100BEF7  +
mov ecx [esi] +
cmp ecx [eax] +
jmp loc_100BEF5  +
mov eax [edi+0Ch] +
mov cx [esi+6] +
cmp cx [eax+6] +
jnz loc_100BEF7  +
mov cx [esi+0Eh] +
cmp cx [eax+0Eh] +
jnz loc_100BEF7  +
mov cx [esi+0Ah] +
cmp cx [eax+0Ah] +
jnz loc_100BEF7  +
mov cx [esi+2] +
cmp cx [eax+2] +
jnz loc_100BEF7  +
mov cx [esi+0Ch] +
cmp cx [eax+0Ch] +
jnz loc_100BEF7  +
mov cx [esi] +
cmp cx [eax] +
jmp loc_100BEF5  +
mov eax [edi+0Ch] +
mov eax [eax] +
cmp eax [esi] +
jz loc_100BE87  +
mov edi [edi+10h] +
inc edx  +
mov [ebp+arg_0] edx +
cmp edx [ebx+4] +
jb loc_100BE13  +
or eax 0FFFFFFFFh +
pop edi  +
pop esi  +
pop ebx  +
pop ebp  +
retn 14h  +
mov eax [ebp+arg_0] +
jmp loc_100BF0A  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push [ebp+arg_0]  +
and [ebp+var_4] 0 +
call sub_100BBD8  +
test eax eax +
jnz loc_100BF36  +
or eax 0FFFFFFFFh +
jmp locret_100BF89  +
push esi  +
mov esi [ebp+arg_8] +
test esi esi +
jnz loc_100BF49  +
push [ebp+lpString]  +
call ds:lstrlenW  +
mov esi eax +
push edi  +
inc esi  +
lea edi [esi+esi] +
push edi  +
call sub_1008533  +
mov [ebp+var_4] eax +
test eax eax +
jz loc_100BF84  +
push esi  +
push [ebp+lpString]  +
push eax  +
call sub_1008CA4  +
push [ebp+var_4]  +
push edi  +
push 20000h  +
push [ebp+arg_0]  +
call sub_100BCFB  +
cmp eax 0FFFFFFFFh +
jnz loc_100BF87  +
lea eax [ebp+var_4] +
push eax  +
call sub_10088CF  +
or eax 0FFFFFFFFh +
pop edi  +
pop esi  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push [ebp+arg_0]  +
and [ebp+var_4] 0 +
call sub_100BBD8  +
test eax eax +
jz loc_100BFDB  +
push 4  +
call sub_1008533  +
mov [ebp+var_4] eax +
test eax eax +
jz loc_100BFDB  +
mov ecx [ebp+arg_4] +
mov [eax] ecx +
push [ebp+var_4]  +
push 4  +
push 30000h  +
push [ebp+arg_0]  +
call sub_100BCFB  +
cmp eax 0FFFFFFFFh +
jnz locret_100BFDE  +
lea eax [ebp+var_4] +
push eax  +
call sub_10088CF  +
or eax 0FFFFFFFFh +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push [ebp+arg_0]  +
and [ebp+var_4] 0 +
call sub_100BBD8  +
test eax eax +
jz loc_100C030  +
push 4  +
call sub_1008533  +
mov [ebp+var_4] eax +
test eax eax +
jz loc_100C030  +
mov ecx [ebp+arg_4] +
mov [eax] ecx +
push [ebp+var_4]  +
push 4  +
push 40000h  +
push [ebp+arg_0]  +
call sub_100BCFB  +
cmp eax 0FFFFFFFFh +
jnz locret_100C033  +
lea eax [ebp+var_4] +
push eax  +
call sub_10088CF  +
or eax 0FFFFFFFFh +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push [ebp+arg_0]  +
and [ebp+var_4] 0 +
call sub_100BBD8  +
test eax eax +
jz loc_100C085  +
push 4  +
call sub_1008533  +
mov [ebp+var_4] eax +
test eax eax +
jz loc_100C085  +
fld  [ebp+arg_4] +
fstp  dword ptr [eax] +
push [ebp+var_4]  +
push 4  +
push 60000h  +
push [ebp+arg_0]  +
call sub_100BCFB  +
cmp eax 0FFFFFFFFh +
jnz locret_100C088  +
lea eax [ebp+var_4] +
push eax  +
call sub_10088CF  +
or eax 0FFFFFFFFh +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push [ebp+arg_0]  +
and [ebp+var_4] 0 +
call sub_100BBD8  +
test eax eax +
jz loc_100C0DA  +
push 8  +
call sub_1008533  +
mov [ebp+var_4] eax +
test eax eax +
jz loc_100C0DA  +
fld  [ebp+arg_4] +
fstp  qword ptr [eax] +
push [ebp+var_4]  +
push 8  +
push 70000h  +
push [ebp+arg_0]  +
call sub_100BCFB  +
cmp eax 0FFFFFFFFh +
jnz locret_100C0DD  +
lea eax [ebp+var_4] +
push eax  +
call sub_10088CF  +
or eax 0FFFFFFFFh +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push esi  +
push [ebp+arg_0]  +
xor esi esi +
mov [ebp+var_4] esi +
call sub_100BBD8  +
test eax eax +
jz loc_100C154  +
call sub_100BBF9  +
push eax  +
mov [ebp+var_4] eax +
call sub_100BBD8  +
test eax eax +
jz loc_100C154  +
push edi  +
xor edi edi +
cmp [ebp+arg_4] esi +
jbe loc_100C12E  +
push esi  +
push esi  +
push esi  +
push [ebp+var_4]  +
call sub_100BCFB  +
cmp eax 0FFFFFFFFh +
jz loc_100C12E  +
inc edi  +
cmp edi [ebp+arg_4] +
jb loc_100C118  +
cmp edi [ebp+arg_4] +
pop edi  +
jnz loc_100C14B  +
push [ebp+var_4]  +
push 4  +
push 80000h  +
push [ebp+arg_0]  +
call sub_100BCFB  +
cmp eax 0FFFFFFFFh +
jnz loc_100C157  +
lea eax [ebp+var_4] +
push eax  +
call sub_100BC6E  +
or eax 0FFFFFFFFh +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_0]  +
call sub_100BBD8  +
test eax eax +
jnz loc_100C177  +
or eax 0FFFFFFFFh +
jmp loc_100C19B  +
push edi  +
xor edi edi +
cmp [ebp+arg_4] edi +
jbe loc_100C198  +
push 0  +
push 0  +
push 0  +
push [ebp+arg_0]  +
call sub_100BCFB  +
cmp eax 0FFFFFFFFh +
jz loc_100C198  +
inc edi  +
cmp edi [ebp+arg_4] +
jb loc_100C17F  +
mov eax edi +
pop edi  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
and [ebp+var_4] 0 +
and [ebp+var_8] 0 +
push esi  +
mov esi [ebp+arg_0] +
lea eax [ebp+var_8] +
push eax  +
push [ebp+arg_4]  +
push esi  +
call sub_100BCB7  +
mov [ebp+var_4] eax +
test eax eax +
jz loc_100C200  +
mov ecx [ebp+var_8] +
test ecx ecx +
jz loc_100C1DD  +
mov eax [eax+10h] +
mov [ecx+10h] eax +
mov eax [ebp+var_4] +
jmp loc_100C1E3  +
mov edx [eax+10h] +
mov [esi+8] edx +
cmp eax [esi+0Ch] +
jnz loc_100C1EB  +
mov [esi+0Ch] ecx +
dec dword ptr [esi+4]  +
push eax  +
call sub_100BD65  +
lea eax [ebp+var_4] +
push eax  +
call sub_10088CF  +
xor eax eax +
inc eax  +
pop esi  +
leave   +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_100BCB7  +
test eax eax +
jz loc_100C236  +
cmp dword ptr [eax+4] 80000h +
jnz loc_100C236  +
push [ebp+arg_8]  +
push dword ptr [eax+0Ch]  +
call sub_100C1A4  +
jmp loc_100C238  +
xor eax eax +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_100BCB7  +
test eax eax +
jz loc_100C26A  +
cmp dword ptr [eax+4] 80000h +
jnz loc_100C26A  +
push dword ptr [eax+0Ch]  +
call sub_100BC99  +
jmp loc_100C26C  +
xor eax eax +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_100BCB7  +
test eax eax +
jnz loc_100C28F  +
xor eax eax +
jmp loc_100C2A5  +
mov ecx [eax+4] +
cmp ecx 10000h +
jz loc_100C2A2  +
cmp ecx 80000h +
jnz loc_100C28B  +
mov eax [eax+0Ch] +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_100BCB7  +
test eax eax +
jnz loc_100C2C8  +
xor eax eax +
jmp loc_100C2D4  +
cmp dword ptr [eax+4] 20000h +
jnz loc_100C2C4  +
mov eax [eax+0Ch] +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_100BCB7  +
test eax eax +
jnz loc_100C2F7  +
xor eax eax +
jmp loc_100C30F  +
mov ecx [eax+4] +
cmp ecx 40000h +
jz loc_100C30A  +
cmp ecx 30000h +
jnz loc_100C2F3  +
mov eax [eax+0Ch] +
mov eax [eax] +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_100BCB7  +
test eax eax +
jnz loc_100C336  +
fld  ds:flt_10019C8 +
jmp loc_100C344  +
cmp dword ptr [eax+4] 60000h +
jnz loc_100C32E  +
mov eax [eax+0Ch] +
fld  dword ptr [eax] +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_100BCB7  +
test eax eax +
jnz loc_100C36B  +
fld  ds:dbl_10019D0 +
jmp loc_100C379  +
cmp dword ptr [eax+4] 70000h +
jnz loc_100C363  +
mov eax [eax+0Ch] +
fld  qword ptr [eax] +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
mov ebx [ebp+arg_0] +
push edi  +
xor eax eax +
lea edi [ebp+FileTime] +
stos   +
stos   +
xor eax eax +
mov edi ebx +
stos   +
stos   +
push 0  +
push [ebp+arg_8]  +
stos   +
push [ebp+arg_4]  +
stos   +
call sub_100BCB7  +
test eax eax +
jz loc_100C3EC  +
mov edx [eax+4] +
mov ecx 0A0000h +
cmp edx ecx +
jz loc_100C3C6  +
cmp edx 0B0000h +
jnz loc_100C3EC  +
cmp edx ecx +
jnz loc_100C3D3  +
push esi  +
mov esi [eax+0Ch] +
mov edi ebx +
movs   +
movs   +
movs   +
movs   +
pop esi  +
jmp loc_100C3EC  +
mov eax [eax+0Ch] +
mov ecx [eax] +
mov [ebp+FileTime.dwLowDateTime] ecx +
mov eax [eax+4] +
mov [ebp+FileTime.dwHighDateTime] eax +
push ebx  +
lea eax [ebp+FileTime] +
push eax  +
call ds:FileTimeToSystemTime  +
pop edi  +
mov eax ebx +
pop ebx  +
leave   +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_100BCB7  +
test eax eax +
jz loc_100C425  +
cmp dword ptr [eax+4] 80000h +
jnz loc_100C425  +
push [ebp+arg_8]  +
push dword ptr [eax+0Ch]  +
call sub_100C275  +
jmp loc_100C427  +
xor eax eax +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_100BCB7  +
test eax eax +
jz loc_100C45C  +
cmp dword ptr [eax+4] 80000h +
jnz loc_100C45C  +
push [ebp+arg_8]  +
push dword ptr [eax+0Ch]  +
call sub_100C2AE  +
jmp loc_100C45E  +
xor eax eax +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_100BCB7  +
test eax eax +
jz loc_100C493  +
cmp dword ptr [eax+4] 80000h +
jnz loc_100C493  +
push [ebp+arg_8]  +
push dword ptr [eax+0Ch]  +
call sub_100C2DD  +
jmp loc_100C495  +
xor eax eax +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+arg_8] +
test esi esi +
jnz loc_100C4AF  +
xor eax eax +
jmp loc_100C4DF  +
push 0  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_100BCB7  +
test eax eax +
jz loc_100C4AB  +
mov ecx [eax+4] +
mov edx 10000h +
cmp ecx edx +
jz loc_100C4D2  +
test ecx ecx +
jz loc_100C4D6  +
jmp loc_100C4AB  +
test ecx ecx +
jnz loc_100C4D9  +
mov [eax+4] edx +
mov [eax+0Ch] esi +
xor eax eax +
inc eax  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push edi  +
xor edi edi +
push edi  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_100BCB7  +
mov esi eax +
cmp esi edi +
jnz loc_100C508  +
xor eax eax +
jmp loc_100C587  +
mov eax [esi+4] +
push ebx  +
mov ebx 20000h +
cmp eax ebx +
jz loc_100C519  +
cmp eax edi +
jnz loc_100C56E  +
cmp [ebp+arg_C] edi +
jnz loc_100C52A  +
push [ebp+lpString]  +
call ds:lstrlenW  +
mov [ebp+arg_C] eax +
mov eax [ebp+arg_C] +
inc eax  +
mov [ebp+arg_C] eax +
cmp [esi+4] edi +
jnz loc_100C54E  +
lea edi [eax+eax] +
push edi  +
call sub_1008533  +
mov [esi+0Ch] eax +
test eax eax +
jz loc_100C56E  +
mov [esi+4] ebx +
mov [esi+8] edi +
jmp loc_100C575  +
lea ebx [eax+eax] +
cmp [esi+8] ebx +
jnb loc_100C575  +
lea edi [esi+0Ch] +
push edi  +
call sub_10088CF  +
and dword ptr [edi] 0 +
push ebx  +
call sub_1008533  +
mov [edi] eax +
test eax eax +
jnz loc_100C572  +
xor eax eax +
jmp loc_100C586  +
mov [esi+8] ebx +
push [ebp+arg_C]  +
push [ebp+lpString]  +
push dword ptr [esi+0Ch]  +
call sub_1008CA4  +
xor eax eax +
inc eax  +
pop ebx  +
pop edi  +
pop esi  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
push 0  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_100BCB7  +
mov esi eax +
test esi esi +
jnz loc_100C5AF  +
xor eax eax +
jmp loc_100C5EA  +
mov eax [esi+4] +
cmp eax 40000h +
jz loc_100C5BF  +
test eax eax +
jz loc_100C5C3  +
jmp loc_100C5AB  +
test eax eax +
jnz loc_100C5DF  +
push 4  +
call sub_1008533  +
mov [esi+0Ch] eax +
test eax eax +
jz loc_100C5AB  +
mov dword ptr [esi+4] 40000h +
mov dword ptr [esi+8] 4 +
mov eax [esi+0Ch] +
mov ecx [ebp+arg_8] +
mov [eax] ecx +
xor eax eax +
inc eax  +
pop esi  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_100BCB7  +
test eax eax +
jz loc_100C623  +
cmp dword ptr [eax+4] 80000h +
jnz loc_100C623  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push dword ptr [eax+0Ch]  +
call sub_100C49E  +
jmp loc_100C625  +
xor eax eax +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_100BCB7  +
test eax eax +
jz loc_100C660  +
cmp dword ptr [eax+4] 80000h +
jnz loc_100C660  +
push [ebp+arg_10]  +
push [ebp+lpString]  +
push [ebp+arg_8]  +
push dword ptr [eax+0Ch]  +
call sub_100C4E9  +
jmp loc_100C662  +
xor eax eax +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_100BCB7  +
test eax eax +
jz loc_100C69A  +
cmp dword ptr [eax+4] 80000h +
jnz loc_100C69A  +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push dword ptr [eax+0Ch]  +
call sub_100C592  +
jmp loc_100C69C  +
xor eax eax +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_100BCB7  +
test eax eax +
jz loc_100C6BE  +
mov eax [eax+4] +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call sub_100BCB7  +
test eax eax +
jz loc_100C6F3  +
cmp dword ptr [eax+4] 80000h +
jnz loc_100C6F3  +
push [ebp+arg_8]  +
push dword ptr [eax+0Ch]  +
call sub_100C6A5  +
jmp loc_100C6F5  +
xor eax eax +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push 0  +
lea eax [ebp+String2] +
push eax  +
push 30000h  +
push [ebp+arg_0]  +
call sub_100BDE2  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push 0  +
lea eax [ebp+String2] +
push eax  +
push 40000h  +
push [ebp+arg_0]  +
call sub_100BDE2  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push 0  +
lea eax [ebp+String2] +
push eax  +
push 60000h  +
push [ebp+arg_0]  +
call sub_100BDE2  +
pop ebp  +
retn 8  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push 0  +
push 0  +
lea eax [ebp+String2] +
push eax  +
push 70000h  +
push [ebp+arg_0]  +
call sub_100BDE2  +
pop ebp  +
retn 0Ch  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+lpString2]  +
push 20000h  +
push [ebp+arg_0]  +
call sub_100BDE2  +
pop ebp  +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 204h +
mov eax dword_101003C +
xor eax ebp +
mov [ebp+var_4] eax +
and [ebp+var_204] 0 +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov edi [ebp+arg_8] +
push 1FAh  +
lea eax [ebp+var_200] +
push 0  +
push eax  +
call memset  +
mov ebx [ebp+arg_C] +
add esp 0Ch +
test ebx ebx +
jnz loc_100C7F7  +
xor eax eax +
jmp loc_100C8AB  +
push 0  +
push [ebp+arg_4]  +
push esi  +
call sub_100BCB7  +
mov esi eax +
test esi esi +
jz loc_100C7F0  +
push ebx  +
push offset dword_100131C  +
push edi  +
call sub_1008CA4  +
mov eax [esi+4] +
cmp eax 20000h +
jz loc_100C89A  +
cmp eax 30000h +
jz loc_100C88E  +
cmp eax 40000h +
jz loc_100C86E  +
cmp eax 60000h +
jz loc_100C867  +
cmp eax 70000h +
jnz loc_100C8A4  +
mov eax [esi+0Ch] +
fld  qword ptr [eax] +
push ecx  +
push ecx  +
fstp  [esp+218h+var_218] +
push offset aF  +
lea eax [ebp+var_204] +
push 0FEh  +
push eax  +
call sub_1008B56  +
add esp 14h +
push ebx  +
lea eax [ebp+var_204] +
push eax  +
jmp loc_100C89E  +
mov eax [esi+0Ch] +
fld  dword ptr [eax] +
jmp loc_100C83F  +
mov eax [esi+0Ch] +
push dword ptr [eax]  +
push offset aLu  +
lea eax [ebp+var_204] +
push 0FEh  +
push eax  +
call sub_1008B56  +
add esp 10h +
jmp loc_100C85D  +
mov eax [esi+0Ch] +
push dword ptr [eax]  +
push offset aLd  +
jmp loc_100C878  +
push ebx  +
push dword ptr [esi+0Ch]  +
push edi  +
call sub_1008CA4  +
push edi  +
call ds:lstrlenW  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_10078F9  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push ecx  +
push ecx  +
push ebx  +
mov ebx [ebp+lpString] +
push edi  +
xor edi edi +
cmp ebx edi +
jz loc_100CA21  +
push esi  +
mov esi [ebp+arg_C] +
cmp esi edi +
jz loc_100CA20  +
cmp [ebp+hConsoleOutput] edi +
jz loc_100CA20  +
push ebx  +
call sub_1008894  +
mov [ebp+lpString] eax +
cmp eax esi +
jnb loc_100C8FC  +
mov [ebp+lpString] esi +
mov eax [ebp+lpString] +
push 1  +
add eax 5 +
push eax  +
push edi  +
push 15h  +
call sub_10091FE  +
mov [ebp+var_8] eax +
cmp eax edi +
jnz loc_100C93E  +
call ds:GetLastError  +
test eax eax +
jnz loc_100C926  +
push 8  +
call ds:SetLastError  +
call sub_1008103  +
push ebx  +
call sub_10085DC  +
shr eax 1 +
push eax  +
push offset dword_100131C  +
jmp loc_100CA1A  +
mov [ebp+var_4] edi +
cmp [ebp+arg_8] edi +
jz loc_100C951  +
push [ebp+arg_8]  +
call sub_1008894  +
mov [ebp+var_4] eax +
xor esi esi +
cmp [ebp+arg_8] edi +
jz loc_100C9E7  +
push esi  +
push [ebp+arg_8]  +
push ebx  +
call sub_1008C34  +
cmp eax edi +
jz loc_100C9E7  +
push eax  +
call sub_1008894  +
mov edi [ebp+var_4] +
push ebx  +
sub edi eax +
call sub_1008894  +
add eax edi +
cmp eax [ebp+arg_C] +
jnb loc_100C988  +
mov esi eax +
xor edi edi +
jmp loc_100C953  +
test esi esi +
jz loc_100C991  +
cmp eax [ebp+arg_C] +
jnz loc_100C994  +
mov esi [ebp+arg_C] +
lea eax [esi+1] +
cmp [ebp+lpString] eax +
ja loc_100C99F  +
mov eax [ebp+lpString] +
mov edi [ebp+var_8] +
push eax  +
push ebx  +
push edi  +
call sub_1008CA4  +
push 0  +
push [ebp+arg_C]  +
push edi  +
call sub_1009DC7  +
push edi  +
push [ebp+hConsoleOutput]  +
call sub_1008D2A  +
push edi  +
call sub_10085DC  +
shr eax 1 +
push eax  +
push ebx  +
push edi  +
call sub_1008CA4  +
push ebx  +
call sub_1008894  +
cmp eax esi +
push ebx  +
jle loc_100CA0D  +
call sub_10085DC  +
shr eax 1 +
push eax  +
lea eax [edi+esi*2] +
push eax  +
jmp loc_100CA1A  +
cmp esi edi +
jz loc_100C991  +
push ebx  +
call sub_1008894  +
sub eax esi +
cmp eax [ebp+arg_C] +
ja loc_100C991  +
push ebx  +
call sub_1008894  +
cmp eax [ebp+arg_C] +
jg loc_100C994  +
push ebx  +
call sub_1008894  +
mov esi eax +
jmp loc_100C994  +
call sub_10085DC  +
shr eax 1 +
push eax  +
push offset dword_10012F4  +
push ebx  +
call sub_1008CA4  +
pop esi  +
pop edi  +
pop ebx  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0Ch +
push edi  +
push 16h  +
call sub_1007FFF  +
mov edi eax +
test edi edi +
jz loc_100CB12  +
cmp [ebp+arg_8] 0 +
jz loc_100CB12  +
push ebx  +
push esi  +
push edi  +
call sub_10085DC  +
shr eax 1 +
push eax  +
push offset dword_100131C  +
push edi  +
call sub_1008CA4  +
push [ebp+arg_0]  +
call sub_100BC99  +
mov ebx [ebp+lpMem] +
push 1  +
lea esi [ebx+5] +
push esi  +
push 0  +
push 13h  +
mov [ebp+var_4] eax +
call sub_10091FE  +
push 1  +
push esi  +
xor esi esi +
push esi  +
push 14h  +
mov [ebp+lpMem] eax +
call sub_10091FE  +
mov dword ptr [ebp+var_8] eax +
cmp [ebp+lpMem] esi +
jz loc_100CB10  +
cmp eax esi +
jz loc_100CB10  +
push [ebp+lpString]  +
call sub_1008894  +
mov [ebp+var_C] eax +
cmp [ebp+var_4] esi +
jbe loc_100CB10  +
push ebx  +
push dword ptr [ebp+var_8]  +
push esi  +
push [ebp+arg_0]  +
call sub_100C7AE  +
push dword ptr [ebp+var_8]  +
push [ebp+arg_8]  +
push [ebp+lpMem]  +
call sub_10085DC  +
shr eax 1 +
dec eax  +
push eax  +
push [ebp+lpMem]  +
call sub_1008B56  +
add esp 10h +
push edi  +
call sub_10085DC  +
shr eax 1 +
push eax  +
push [ebp+lpMem]  +
push edi  +
call sub_1008CE7  +
inc esi  +
cmp esi [ebp+var_4] +
jnb loc_100CB10  +
cmp ebx [ebp+var_C] +
jb loc_100CB10  +
push edi  +
call sub_10085DC  +
shr eax 1 +
push eax  +
push [ebp+lpString]  +
push edi  +
call sub_1008CE7  +
sub ebx [ebp+var_C] +
cmp esi [ebp+var_4] +
jb loc_100CAAF  +
pop esi  +
pop ebx  +
pop edi  +
leave   +
retn 10h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 48h +
mov eax dword_101003C +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_8] +
push ebx  +
push esi  +
push edi  +
mov ebx [ebp+arg_0] +
mov esi offset aS_3 +
lea edi [ebp+var_1C] +
movs   +
movs   +
mov esi offset aD +
lea edi [ebp+var_14] +
movs   +
movs   +
mov esi offset aF +
lea edi [ebp+var_C] +
movs   +
mov [ebp+var_20] eax +
mov eax [ebp+arg_C] +
push 16h  +
mov [ebp+lpString] eax +
movs   +
call sub_1007FFF  +
mov esi eax +
mov [ebp+lpMem] esi +
test ebx ebx +
jz loc_100CC9C  +
test esi esi +
jz loc_100CC9C  +
xor eax eax +
lea edi [ebp+Time] +
stos   +
stos   +
stos   +
push esi  +
stos   +
call sub_10085DC  +
shr eax 1 +
push eax  +
mov edi offset dword_100131C +
push edi  +
push esi  +
call sub_1008CA4  +
mov ecx [ebx+204h] +
mov eax ecx +
push 10h  +
and eax 0FF0h +
pop edx  +
sub eax edx +
jz loc_100CD5B  +
sub eax edx +
jz loc_100CD1D  +
sub eax edx +
jz loc_100CCD7  +
sub eax edx +
jz loc_100CCAD  +
sub eax 20h +
jz loc_100CC10  +
sub eax 20h +
jz loc_100CBEA  +
push esi  +
call sub_10085DC  +
shr eax 1 +
push eax  +
push edi  +
push esi  +
call sub_1008CA4  +
jmp loc_100CC6B  +
mov ecx [ebx+28Ch] +
test ecx ecx +
jz loc_100CC9C  +
mov eax [ebx+290h] +
test eax eax +
jnz loc_100CC04  +
mov eax ebx +
push esi  +
push eax  +
push [ebp+var_20]  +
push [ebp+arg_4]  +
call ecx  +
jmp loc_100CC6B  +
push [ebp+arg_4]  +
lea eax [ebp+var_48] +
push [ebp+var_20]  +
push eax  +
call sub_100C382  +
mov esi eax +
lea edi [ebp+Time] +
movs   +
push 0FEh  +
push [ebp+lpMem]  +
movs   +
push 0  +
lea eax [ebp+Time] +
push eax  +
movs   +
push 80000000h  +
push 400h  +
movs   +
call ds:GetTimeFormatW  +
test eax eax +
jnz loc_100CC68  +
call sub_1008103  +
push [ebp+lpMem]  +
call sub_10085DC  +
shr eax 1 +
push eax  +
call sub_1008070  +
push eax  +
push [ebp+lpMem]  +
call sub_1008CA4  +
mov esi [ebp+lpMem] +
push esi  +
call ds:lstrlenW  +
test eax eax +
jnz loc_100CC9C  +
test dword ptr [ebx+204h] 100000h +
jz loc_100CC9C  +
push esi  +
call sub_10085DC  +
shr eax 1 +
push eax  +
push 138Dh  +
call sub_100A082  +
push eax  +
push esi  +
call sub_1008CA4  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_10078F9  +
leave   +
retn 10h  +
lea edi [ebx+208h] +
test ecx 2000h +
jnz loc_100CCBE  +
lea edi [ebp+var_C] +
push [ebp+arg_4]  +
push [ebp+var_20]  +
test ecx 4000h +
jnz loc_100CD7A  +
call sub_100C34D  +
jmp loc_100CCFF  +
lea edi [ebx+208h] +
test ecx 2000h +
jnz loc_100CCE8  +
lea edi [ebp+var_C] +
push [ebp+arg_4]  +
push [ebp+var_20]  +
test ecx 4000h +
jnz loc_100CD7A  +
call sub_100C318  +
push ecx  +
push ecx  +
fstp  [esp+5Ch+var_5C] +
push edi  +
push esi  +
call sub_10085DC  +
shr eax 1 +
dec eax  +
push eax  +
push esi  +
call sub_1008B56  +
add esp 14h +
jmp loc_100CC6B  +
lea edi [ebx+208h] +
test ecx 2000h +
jnz loc_100CD2E  +
lea edi [ebp+var_14] +
push [ebp+arg_4]  +
push [ebp+var_20]  +
test ecx 4000h +
jnz loc_100CD7A  +
call sub_100C2DD  +
push eax  +
push edi  +
push esi  +
call sub_10085DC  +
shr eax 1 +
dec eax  +
push eax  +
push esi  +
call sub_1008B56  +
add esp 10h +
jmp loc_100CC6B  +
lea edi [ebx+208h] +
test ecx 2000h +
jnz loc_100CD6C  +
lea edi [ebp+var_1C] +
push [ebp+arg_4]  +
push [ebp+var_20]  +
test ecx 4000h +
jz loc_100CD9C  +
call sub_100C275  +
test eax eax +
jz loc_100CC9C  +
push [ebp+lpString]  +
push edi  +
push dword ptr [ebx+200h]  +
push eax  +
call sub_100CA2C  +
jmp loc_100CC6B  +
call sub_100C2AE  +
test eax eax +
jz loc_100CC9C  +
jmp loc_100CD41  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 1Ch +
push ebx  +
push esi  +
push edi  +
xor edi edi +
mov [ebp+var_8] edi +
cmp [ebp+hConsoleOutput] edi +
jz loc_100D212  +
mov esi [ebp+arg_8] +
cmp esi edi +
jz loc_100D212  +
push 1  +
mov ebx 1000h +
push ebx  +
push edi  +
push 16h  +
call sub_10091FE  +
mov [ebp+lpMem] eax +
call sub_100BBF9  +
mov [ebp+var_8] eax +
cmp eax edi +
jz loc_100D204  +
cmp [ebp+lpMem] edi +
jz loc_100D204  +
test [ebp+arg_C] ebx +
jnz loc_100CF04  +
mov eax [ebp+arg_4] +
xor ecx ecx +
cmp eax edi +
jbe loc_100CE96  +
add esi 204h +
mov [ebp+arg_C] eax +
mov eax [esi] +
test eax ebx +
jnz loc_100CE8B  +
xor edi edi +
test eax 10000h +
jnz loc_100CE42  +
and eax 0FF0h +
cmp eax 20h +
jz loc_100CE42  +
cmp eax 30h +
jz loc_100CE42  +
cmp eax 40h +
jnz loc_100CE45  +
xor edi edi +
inc edi  +
cmp ecx 1 +
jnz loc_100CE57  +
push offset asc_100139C  +
push [ebp+hConsoleOutput]  +
call sub_1008D2A  +
push [ebp+lpMem]  +
call sub_10085DC  +
shr eax 1 +
push eax  +
lea eax [esi-204h] +
push eax  +
push [ebp+lpMem]  +
call sub_1008CA4  +
push edi  +
push dword ptr [esi-4]  +
push [ebp+lpMem]  +
call sub_1009DC7  +
push [ebp+lpMem]  +
push [ebp+hConsoleOutput]  +
call sub_1008D2A  +
xor ecx ecx +
inc ecx  +
add esi 294h +
dec [ebp+arg_C]  +
jnz loc_100CE1F  +
push offset String  +
push [ebp+hConsoleOutput]  +
call sub_1008D2A  +
mov edi [ebp+arg_4] +
xor eax eax +
test edi edi +
jbe loc_100CEF7  +
mov esi [ebp+arg_8] +
add esi 200h +
test [esi+4] ebx +
jnz loc_100CEEE  +
cmp eax 1 +
jnz loc_100CECC  +
push offset asc_100139C  +
push [ebp+hConsoleOutput]  +
call sub_1008D2A  +
mov eax [esi] +
lea ecx [eax+1] +
push ecx  +
push eax  +
push offset asc_1001A08  +
push [ebp+lpMem]  +
call sub_100948B  +
push [ebp+lpMem]  +
push [ebp+hConsoleOutput]  +
call sub_1008D2A  +
xor eax eax +
inc eax  +
add esi 294h +
dec edi  +
jnz loc_100CEB5  +
push offset String  +
push [ebp+hConsoleOutput]  +
call sub_1008D2A  +
push [ebp+arg_10]  +
call sub_100BC99  +
and [ebp+var_14] 0 +
mov [ebp+var_1C] eax +
test eax eax +
jbe loc_100D1F9  +
push [ebp+lpMem]  +
call sub_10085DC  +
shr eax 1 +
push eax  +
push offset dword_100131C  +
push [ebp+lpMem]  +
call sub_1008CA4  +
push [ebp+var_14]  +
push [ebp+arg_10]  +
call sub_100C275  +
xor ecx ecx +
mov [ebp+var_18] eax +
cmp eax ecx +
jz loc_100D1EA  +
mov [ebp+var_C] ecx +
mov [ebp+arg_C] ecx +
cmp [ebp+arg_4] ecx +
jbe loc_100D07F  +
mov esi [ebp+arg_8] +
add esi 200h +
mov eax [esi+4] +
xor ebx ebx +
mov [ebp+var_10] ebx +
test eax 1000h +
jnz loc_100D06A  +
test eax 88000h +
jz loc_100CF8F  +
mov eax [esi] +
push [ebp+lpMem]  +
inc ebx  +
mov [ebp+var_10] eax +
call sub_10085DC  +
shr eax 1 +
mov [esi] eax +
mov edi offset asc_1001A00 +
push edi  +
push [ebp+var_18]  +
lea eax [esi-200h] +
push [ebp+arg_C]  +
push eax  +
call sub_100CB1C  +
xor ecx ecx +
test ebx ebx +
jnz loc_100CFD9  +
mov eax [esi+4] +
test eax 10000h +
jnz loc_100CFCB  +
and eax 0FF0h +
cmp eax 20h +
jz loc_100CFCB  +
cmp eax 30h +
jz loc_100CFCB  +
cmp eax 40h +
jnz loc_100CFCE  +
xor ecx ecx +
inc ecx  +
push ecx  +
push dword ptr [esi]  +
push [ebp+lpMem]  +
call sub_1009DC7  +
cmp ebx 1 +
jnz loc_100CFE3  +
mov eax [ebp+var_10] +
mov [esi] eax +
cmp [ebp+var_C] 1 +
jnz loc_100CFF6  +
push offset asc_100139C  +
push [ebp+hConsoleOutput]  +
call sub_1008D2A  +
test dword ptr [esi+4] 8000h +
jz loc_100D058  +
push dword ptr [esi]  +
push edi  +
push [ebp+lpMem]  +
push [ebp+hConsoleOutput]  +
call sub_100C8C1  +
push [ebp+lpMem]  +
call sub_1008894  +
test eax eax +
jz loc_100D063  +
push 3  +
push [ebp+var_8]  +
call sub_100C0E6  +
mov ebx eax +
cmp ebx 0FFFFFFFFh +
jz loc_100D063  +
push [ebp+arg_C]  +
push 0  +
push ebx  +
push [ebp+var_8]  +
call sub_100C66B  +
push 0  +
push [ebp+lpMem]  +
push 2  +
push ebx  +
push [ebp+var_8]  +
call sub_100C62E  +
push 0  +
push edi  +
push 1  +
push ebx  +
push [ebp+var_8]  +
call sub_100C62E  +
jmp loc_100D063  +
push [ebp+lpMem]  +
push [ebp+hConsoleOutput]  +
call sub_1008D2A  +
mov [ebp+var_C] 1 +
inc [ebp+arg_C]  +
mov eax [ebp+arg_C] +
add esi 294h +
cmp eax [ebp+arg_4] +
jb loc_100CF63  +
push offset String  +
push [ebp+hConsoleOutput]  +
call sub_1008D2A  +
push [ebp+var_8]  +
call sub_100BC99  +
mov [ebp+var_10] eax +
jmp loc_100D1E2  +
and [ebp+var_C] 0 +
and [ebp+arg_C] 0 +
or edi 0FFFFFFFFh +
test eax eax +
jbe loc_100D1D2  +
jmp loc_100D0B4  +
mov edi [ebp+var_18] +
push 0  +
push [ebp+arg_C]  +
push [ebp+var_8]  +
call sub_100C467  +
mov esi eax +
lea eax [edi+1] +
cmp eax esi +
jnb loc_100D12B  +
mov edx [ebp+arg_8] +
mov ecx eax +
imul ecx ecx +
mov ebx esi +
lea edi [ecx+edx+200h] +
sub ebx eax +
test dword ptr [edi+4] 1000h +
jnz loc_100D122  +
cmp [ebp+var_C] 1 +
jnz loc_100D0FC  +
push offset asc_100139C  +
push [ebp+hConsoleOutput]  +
call sub_1008D2A  +
mov eax [edi] +
lea ecx [eax+1] +
push ecx  +
push eax  +
push offset asc_100139C  +
push [ebp+lpMem]  +
call sub_100948B  +
push [ebp+lpMem]  +
push [ebp+hConsoleOutput]  +
call sub_1008D2A  +
mov [ebp+var_C] 1 +
add edi 294h +
dec ebx  +
jnz loc_100D0E0  +
cmp [ebp+var_C] 1 +
mov [ebp+var_18] esi +
jnz loc_100D141  +
push offset asc_100139C  +
push [ebp+hConsoleOutput]  +
call sub_1008D2A  +
push 2  +
push [ebp+arg_C]  +
push [ebp+var_8]  +
call sub_100C430  +
push 1  +
push [ebp+arg_C]  +
mov edi eax +
push [ebp+var_8]  +
call sub_100C430  +
mov ebx eax +
test edi edi +
jz loc_100D1C3  +
test ebx ebx +
jz loc_100D1C3  +
push [ebp+lpMem]  +
call sub_10085DC  +
shr eax 1 +
push eax  +
push edi  +
mov edi [ebp+lpMem] +
push edi  +
call sub_1008CA4  +
imul esi esi +
mov eax [ebp+arg_8] +
push dword ptr [esi+eax+200h]  +
push ebx  +
push edi  +
push [ebp+hConsoleOutput]  +
call sub_100C8C1  +
push edi  +
call sub_1008894  +
test eax eax +
jnz loc_100D1B3  +
push [ebp+arg_C]  +
push [ebp+var_8]  +
call sub_100C1A4  +
dec [ebp+arg_C]  +
dec [ebp+var_10]  +
jmp loc_100D1C3  +
push 0  +
push edi  +
push 2  +
push [ebp+arg_C]  +
push [ebp+var_8]  +
call sub_100C62E  +
inc [ebp+arg_C]  +
mov eax [ebp+arg_C] +
cmp eax [ebp+var_10] +
jb loc_100D0B1  +
push offset String  +
push [ebp+hConsoleOutput]  +
call sub_1008D2A  +
mov eax [ebp+var_10] +
test eax eax +
jnz loc_100D09C  +
inc [ebp+var_14]  +
mov eax [ebp+var_14] +
cmp eax [ebp+var_1C] +
jb loc_100CF1B  +
lea eax [ebp+var_8] +
push eax  +
call sub_100BC6E  +
jmp loc_100D229  +
call ds:GetLastError  +
test eax eax +
jnz loc_100D224  +
push 8  +
jmp loc_100D21E  +
call ds:GetLastError  +
test eax eax +
jnz loc_100D224  +
push 57h  +
call ds:SetLastError  +
call sub_1008103  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 0ACh +
mov eax dword_101003C +
xor eax ebp +
mov [ebp+var_4] eax +
mov eax [ebp+arg_10] +
push ebx  +
push esi  +
mov esi [ebp+arg_0] +
push edi  +
mov edi [ebp+arg_8] +
xor ebx ebx +
push 7Ch  +
mov [ebp+var_9C] eax +
lea eax [ebp+var_80] +
push ebx  +
push eax  +
mov [ebp+hConsoleOutput] esi +
mov [ebp+var_A8] edi +
mov dword ptr [ebp+String] ebx +
call memset  +
add esp 0Ch +
cmp esi ebx +
jz loc_100D4CB  +
cmp edi ebx +
jz loc_100D4CB  +
push 1  +
push 1000h  +
push ebx  +
push 16h  +
call sub_10091FE  +
mov ebx eax +
mov [ebp+lpMem] ebx +
test ebx ebx +
jnz loc_100D2BF  +
call ds:GetLastError  +
test eax eax +
jnz loc_100D4DD  +
push 8  +
jmp loc_100D4D7  +
mov esi [ebp+arg_4] +
and [ebp+var_90] 0 +
test esi esi +
jbe loc_100D2EA  +
push edi  +
call sub_1008894  +
cmp [ebp+var_90] eax +
jnb loc_100D2E1  +
mov [ebp+var_90] eax +
add edi 294h +
dec esi  +
jnz loc_100D2CD  +
push [ebp+var_9C]  +
call sub_100BC99  +
and [ebp+var_8C] 0 +
mov [ebp+var_A4] eax +
test eax eax +
jbe loc_100D4E2  +
mov edi offset String +
push [ebp+var_8C]  +
push [ebp+var_9C]  +
call sub_100C275  +
mov [ebp+var_AC] eax +
test eax eax +
jz loc_100D4B1  +
and [ebp+var_94] 0 +
cmp [ebp+arg_4] 0 +
jbe loc_100D496  +
mov esi [ebp+var_A8] +
add esi 200h +
push ebx  +
call sub_10085DC  +
shr eax 1 +
push eax  +
push offset dword_100131C  +
push ebx  +
call sub_1008CA4  +
test dword ptr [esi+4] 1000h +
jnz loc_100D47B  +
lea eax [esi-200h] +
push eax  +
push offset aS_4  +
push ebx  +
call sub_10085DC  +
shr eax 1 +
dec eax  +
push eax  +
push ebx  +
call sub_1008B56  +
mov eax [ebp+var_90] +
add esp 10h +
push 0  +
add eax 2 +
push eax  +
push ebx  +
call sub_1009DC7  +
push ebx  +
push [ebp+hConsoleOutput]  +
call sub_1008D2A  +
push [ebp+lpMem]  +
mov ebx [esi] +
call sub_10085DC  +
push edi  +
push [ebp+var_AC]  +
shr eax 1 +
push [ebp+var_94]  +
mov [esi] eax +
lea eax [esi-200h] +
push eax  +
call sub_100CB1C  +
push edi  +
push [ebp+lpMem]  +
mov [esi] ebx +
mov ebx ds:wcstok +
call ebx  +
pop ecx  +
pop ecx  +
mov [ebp+lpString] eax +
test eax eax +
jz loc_100D469  +
push [ebp+lpString]  +
push [ebp+hConsoleOutput]  +
call sub_1008D2A  +
push edi  +
push 0  +
call ebx  +
pop ecx  +
pop ecx  +
mov [ebp+lpString] eax +
test eax eax +
jz loc_100D469  +
push [ebp+lpMem]  +
call sub_10085DC  +
shr eax 1 +
push eax  +
push offset asc_100139C  +
lea eax [ebp+String] +
push eax  +
call sub_1008CA4  +
mov eax [ebp+var_90] +
push 0  +
add eax 2 +
push eax  +
lea eax [ebp+String] +
push eax  +
call sub_1009DC7  +
push edi  +
push [ebp+hConsoleOutput]  +
call sub_1008D2A  +
lea eax [ebp+String] +
push eax  +
push [ebp+hConsoleOutput]  +
call sub_1008D2A  +
jmp loc_100D3F0  +
push edi  +
push [ebp+hConsoleOutput]  +
call sub_1008D2A  +
mov ebx [ebp+lpMem] +
inc [ebp+var_94]  +
mov eax [ebp+var_94] +
add esi 294h +
cmp eax [ebp+arg_4] +
jb loc_100D34B  +
mov eax [ebp+var_8C] +
inc eax  +
cmp eax [ebp+var_A4] +
jnb loc_100D4B1  +
push edi  +
push [ebp+hConsoleOutput]  +
call sub_1008D2A  +
inc [ebp+var_8C]  +
mov eax [ebp+var_8C] +
cmp eax [ebp+var_A4] +
jb loc_100D30F  +
jmp loc_100D4E2  +
call ds:GetLastError  +
test eax eax +
jnz loc_100D4DD  +
push 57h  +
call ds:SetLastError  +
call sub_1008103  +
mov ecx [ebp+var_4] +
pop edi  +
pop esi  +
xor ecx ebp +
pop ebx  +
call sub_10078F9  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
sub esp 14h +
cmp [ebp+hConsoleOutput] 0 +
push ebx  +
push esi  +
push edi  +
jz loc_100D6AC  +
mov esi [ebp+arg_8] +
test esi esi +
jz loc_100D6AC  +
push 1  +
mov edi 1000h +
push edi  +
push 0  +
push 16h  +
call sub_10091FE  +
mov ebx eax +
mov [ebp+lpString] ebx +
test ebx ebx +
jnz loc_100D547  +
call ds:GetLastError  +
test eax eax +
jnz loc_100D6BE  +
push 8  +
jmp loc_100D6B8  +
test [ebp+arg_C] edi +
jnz loc_100D5AF  +
mov ecx [ebp+arg_4] +
xor eax eax +
test ecx ecx +
jbe loc_100D5A2  +
mov [ebp+arg_C] ecx +
test [esi+204h] edi +
jnz loc_100D597  +
cmp eax 1 +
jnz loc_100D572  +
push offset asc_1001A24  +
push [ebp+hConsoleOutput]  +
call sub_1008D2A  +
push esi  +
push offset aS_5  +
push ebx  +
call sub_10085DC  +
shr eax 1 +
dec eax  +
push eax  +
push ebx  +
call sub_1008B56  +
add esp 10h +
push ebx  +
push [ebp+hConsoleOutput]  +
call sub_1008D2A  +
xor eax eax +
inc eax  +
add esi 294h +
dec [ebp+arg_C]  +
jnz loc_100D558  +
push offset String  +
push [ebp+hConsoleOutput]  +
call sub_1008D2A  +
push [ebp+arg_10]  +
call sub_100BC99  +
and [ebp+var_8] 0 +
mov [ebp+var_14] eax +
test eax eax +
jbe loc_100D6C3  +
mov ebx offset asc_1001A14 +
push [ebp+var_8]  +
push [ebp+arg_10]  +
call sub_100C275  +
xor ecx ecx +
mov [ebp+var_10] eax +
cmp eax ecx +
jz loc_100D69B  +
mov [ebp+var_C] ecx +
mov [ebp+arg_C] ecx +
cmp [ebp+arg_4] ecx +
jbe loc_100D68E  +
mov esi [ebp+arg_8] +
add esi 200h +
push [ebp+lpString]  +
call sub_10085DC  +
shr eax 1 +
push eax  +
push offset dword_100131C  +
push [ebp+lpString]  +
call sub_1008CA4  +
test [esi+4] edi +
jnz loc_100D679  +
push [ebp+lpString]  +
mov edi [esi] +
call sub_10085DC  +
push offset asc_1001A24  +
push [ebp+var_10]  +
shr eax 1 +
push [ebp+arg_C]  +
mov [esi] eax +
lea eax [esi-200h] +
push eax  +
call sub_100CB1C  +
mov [esi] edi +
xor edi edi +
inc edi  +
cmp [ebp+var_C] edi +
jnz loc_100D654  +
push offset asc_1001A24  +
push [ebp+hConsoleOutput]  +
call sub_1008D2A  +
push ebx  +
push [ebp+hConsoleOutput]  +
call sub_1008D2A  +
push [ebp+lpString]  +
push [ebp+hConsoleOutput]  +
call sub_1008D2A  +
push ebx  +
push [ebp+hConsoleOutput]  +
call sub_1008D2A  +
mov [ebp+var_C] edi +
mov edi 1000h +
inc [ebp+arg_C]  +
mov eax [ebp+arg_C] +
add esi 294h +
cmp eax [ebp+arg_4] +
jb loc_100D5FB  +
push offset String  +
push [ebp+hConsoleOutput]  +
call sub_1008D2A  +
inc [ebp+var_8]  +
mov eax [ebp+var_8] +
cmp eax [ebp+var_14] +
jb loc_100D5CB  +
jmp loc_100D6C3  +
call ds:GetLastError  +
test eax eax +
jnz loc_100D6BE  +
push 57h  +
call ds:SetLastError  +
call sub_1008103  +
pop edi  +
pop esi  +
pop ebx  +
leave   +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push esi  +
mov esi [ebp+hConsoleOutput] +
test esi esi +
jz loc_100D72A  +
mov edx [ebp+arg_8] +
test edx edx +
jz loc_100D72A  +
mov ecx [ebp+arg_C] +
mov eax ecx +
and eax 0Fh +
dec eax  +
jz loc_100D714  +
dec eax  +
jz loc_100D704  +
dec eax  +
jnz loc_100D722  +
push [ebp+arg_10]  +
push ecx  +
push edx  +
push [ebp+arg_4]  +
push esi  +
call sub_100D4F8  +
jmp loc_100D722  +
push [ebp+arg_10]  +
push ecx  +
push edx  +
push [ebp+arg_4]  +
push esi  +
call sub_100CDB0  +
jmp loc_100D722  +
push [ebp+arg_10]  +
push ecx  +
push edx  +
push [ebp+arg_4]  +
push esi  +
call sub_100D235  +
push esi  +
call ds:fflush  +
pop ecx  +
pop esi  +
pop ebp  +
retn 14h  +
***
mov edi edi +
push ebp  +
mov ebp esp +
push [ebp+arg_C]  +
push [ebp+arg_8]  +
push [ebp+arg_4]  +
push [ebp+arg_0]  +
call ds:__iob_func  +
add eax 20h +
push eax  +
call sub_100D6CF  +
pop ebp  +
retn 10h  +
***
push dword ptr [ebp-10h]  +
call ??3@YAXPAX@Z  +
pop ecx  +
retn   +
***
push 65676E61h  +
add [edx+656C5304h] dh +
jo $+3  +
jmp near ptr 756F3A47h  +
***
